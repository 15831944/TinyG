
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c62c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00802000  0000c62c  0000c6c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000043c  0080212e  0080212e  0000c7ee  2**0
                  ALLOC
  3 .debug_aranges 00000360  00000000  00000000  0000c7ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000dfc  00000000  00000000  0000cb4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000cb6c  00000000  00000000  0000d94a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002934  00000000  00000000  0001a4b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000545e  00000000  00000000  0001cdea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000bd0  00000000  00000000  00022248  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002513  00000000  00000000  00022e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001cbe  00000000  00000000  0002532b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00026fe9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__ctors_end>
       4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
       8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
       c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      10:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      14:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      18:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      1c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      20:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      24:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      28:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      2c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      30:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      34:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      38:	0c 94 98 30 	jmp	0x6130	; 0x6130 <__vector_14>
      3c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      40:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      44:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      48:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      4c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      50:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      54:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      58:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      5c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      60:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      64:	0c 94 b7 38 	jmp	0x716e	; 0x716e <__vector_25>
      68:	0c 94 84 39 	jmp	0x7308	; 0x7308 <__vector_26>
      6c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      70:	0c 94 40 4c 	jmp	0x9880	; 0x9880 <__vector_28>
      74:	0c 94 0d 4d 	jmp	0x9a1a	; 0x9a1a <__vector_29>
      78:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      7c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      80:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      84:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      88:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      8c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      90:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      94:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      98:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      9c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      a0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      a4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      a8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      ac:	0c 94 59 49 	jmp	0x92b2	; 0x92b2 <__vector_43>
      b0:	0c 94 89 49 	jmp	0x9312	; 0x9312 <__vector_44>
      b4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      b8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      bc:	0c 94 9a 31 	jmp	0x6334	; 0x6334 <__vector_47>
      c0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      c4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      c8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      cc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      d0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      d4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      d8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      dc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      e0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      e4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      e8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      ec:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      f0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      f4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      f8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
      fc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     100:	0c 94 b9 49 	jmp	0x9372	; 0x9372 <__vector_64>
     104:	0c 94 e9 49 	jmp	0x93d2	; 0x93d2 <__vector_65>
     108:	0c 94 99 48 	jmp	0x9132	; 0x9132 <__vector_66>
     10c:	0c 94 c9 48 	jmp	0x9192	; 0x9192 <__vector_67>
     110:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     114:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     118:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     11c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     120:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     124:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     128:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     12c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     130:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     134:	0c 94 1b 31 	jmp	0x6236	; 0x6236 <__vector_77>
     138:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     13c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     140:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     144:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     148:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     14c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     150:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     154:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     158:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     15c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     160:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     164:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     168:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     16c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     170:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     174:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     178:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     17c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     180:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     184:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     188:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     18c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     190:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     194:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     198:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     19c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1a0:	0c 94 f9 48 	jmp	0x91f2	; 0x91f2 <__vector_104>
     1a4:	0c 94 29 49 	jmp	0x9252	; 0x9252 <__vector_105>
     1a8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1ac:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1b0:	0c 94 19 32 	jmp	0x6432	; 0x6432 <__vector_108>
     1b4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1b8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1bc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1c0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1c4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1c8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1cc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1d0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1d4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1d8:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1dc:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1e0:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1e4:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <cfgMsgXaxis>:
     23b:	58 00                                               X.

0000023d <cfgMsgYaxis>:
     23d:	59 00                                               Y.

0000023f <cfgMsgZaxis>:
     23f:	5a 00                                               Z.

00000241 <cfgMsgAaxis>:
     241:	41 00                                               A.

00000243 <cfgMsgs>:
     243:	3b 02 3d 02 3f 02 41 02                             ;.=.?.A.

0000024b <__c.3776>:
     24b:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     25b:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     26b:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000276 <__c.3774>:
     276:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     286:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     296:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000002a0 <__c.3772>:
     2a0:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     2b0:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     2c0:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000002ca <__c.3770>:
     2ca:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     2da:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     2ea:	73 20 2d 2d 2d 0a 00                                s ---..

000002f1 <__c.3768>:
     2f1:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     301:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     311:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000319 <__c.3813>:
     319:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     329:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     339:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     349:	29 0a 0a 00                                         )...

0000034d <__c.3811>:
     34d:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     35d:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     36d:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

0000037d <__c.3809>:
     37d:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     38d:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     39d:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000003ae <__c.3807>:
     3ae:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     3be:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     3ce:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000003df <__c.3805>:
     3df:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     3ef:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     3ff:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     40f:	6c 0a 00                                            l..

00000412 <__c.3803>:
     412:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     422:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     432:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     442:	6e 0a 00                                            n..

00000445 <__c.3801>:
     445:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     455:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     465:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     475:	74 65 70 73 29 0a 00                                teps)..

0000047c <__c.3799>:
     47c:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     48c:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     49c:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     4ac:	70 0a 00                                            p..

000004af <__c.3797>:
     4af:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     4bf:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     4cf:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     4df:	73 74 65 70 73 29 0a 00                             steps)..

000004e7 <__c.3795>:
     4e7:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     4f7:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     507:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     517:	73 74 65 70 73 29 0a 00                             steps)..

0000051f <__c.3790>:
     51f:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     52f:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

0000053d <__c.3927>:
     53d:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     54d:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

00000558 <__c.3924>:
     558:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     568:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

00000572 <__c.3921>:
     572:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     582:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

0000058c <__c.3918>:
     58c:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     59c:	74 3a 20 25 73 0a 00                                t: %s..

000005a3 <__c.3915>:
     5a3:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     5b3:	4d 6f 64 65 0a 00                                   Mode..

000005b9 <__c.3912>:
     5b9:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     5c9:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

000005d6 <configs_P>:
     5d6:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     5e6:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     5f6:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     606:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     616:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     626:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     636:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     646:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     656:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     666:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     676:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     686:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     696:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     6a6:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     6b6:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     6c6:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     6d6:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     6e6:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     6f6:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     706:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     716:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

00000724 <bsel>:
     724:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

0000072f <bscale>:
     72f:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

0000073a <__c.3533>:
     73a:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     74a:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     75a:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000766 <getcFuncs>:
     766:	0f 3b f3 3a f3 3a c2 3c f3 3a f3 3a f3 3a f3 3a     .;.:.:.<.:.:.:.:
     776:	54 3b f3 3a 0f 3b f3 3a f3 3a 0f 3b e6 3c f2 3c     T;.:.;.:.:.;.<.<
     786:	f3 3a da 3c f3 3a ce 3c f3 3a f3 3a f3 3a f3 3a     .:.<.:.<.:.:.:.:
     796:	c2 3c f3 3a f3 3a c2 3c f3 3a f3 3a f3 3a f3 3a     .<.:.:.<.:.:.:.:
     7a6:	f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a     .:.:.:.:.:.:.:.:
     7b6:	f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a     .:.:.:.:.:.:.:.:
     7c6:	f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a     .:.:.:.:.:.:.:.:
     7d6:	f3 3a f3 3a f3 3a 36 3b f3 3a f3 3a f3 3a f3 3a     .:.:.:6;.:.:.:.:
     7e6:	f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a     .:.:.:.:.:.:.:.:
     7f6:	f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a     .:.:.:.:.:.:.:.:
     806:	f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a     .:.:.:.:.:.:.:.:
     816:	f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a     .:.:.:.:.:.:.:.:
     826:	f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a     .:.:.:.:.:.:.:.:
     836:	f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a     .:.:.:.:.:.:.:.:
     846:	f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a     .:.:.:.:.:.:.:.:
     856:	f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a f3 3a 54 3b     .:.:.:.:.:.:.:T;

00000866 <readlnFuncs>:
     866:	54 3c 06 3c 06 3c c2 3c 06 3c 06 3c 06 3c 06 3c     T<.<.<.<.<.<.<.<
     876:	a3 3c 06 3c 54 3c 06 3c 06 3c 54 3c e6 3c f2 3c     .<.<T<.<.<T<.<.<
     886:	06 3c da 3c 06 3c ce 3c 06 3c 06 3c 06 3c 06 3c     .<.<.<.<.<.<.<.<
     896:	c2 3c 06 3c 06 3c c2 3c 06 3c 06 3c 06 3c 06 3c     .<.<.<.<.<.<.<.<
     8a6:	06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c     .<.<.<.<.<.<.<.<
     8b6:	06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c     .<.<.<.<.<.<.<.<
     8c6:	06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c     .<.<.<.<.<.<.<.<
     8d6:	06 3c 06 3c 06 3c 85 3c 06 3c 06 3c 06 3c 06 3c     .<.<.<.<.<.<.<.<
     8e6:	06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c     .<.<.<.<.<.<.<.<
     8f6:	06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c     .<.<.<.<.<.<.<.<
     906:	06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c     .<.<.<.<.<.<.<.<
     916:	06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c     .<.<.<.<.<.<.<.<
     926:	06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c     .<.<.<.<.<.<.<.<
     936:	06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c     .<.<.<.<.<.<.<.<
     946:	06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c     .<.<.<.<.<.<.<.<
     956:	06 3c 06 3c 06 3c 06 3c 06 3c 06 3c 06 3c a3 3c     .<.<.<.<.<.<.<.<

00000966 <square_test1>:
     966:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     976:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     986:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     996:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     9a6:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     9b6:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     9c6:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000009d4 <square_test2>:
     9d4:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     9e4:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     9f4:	78 30 20 79 30 00                                   x0 y0.

000009fa <square_test10>:
     9fa:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     a0a:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     a1a:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000a26 <circle_test10>:
     a26:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     a36:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     a46:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     a56:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     a66:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     a76:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     a86:	30 00                                               0.

00000a88 <square_circle_test10>:
     a88:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     a98:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     aa8:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     ab8:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     ac8:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     ad8:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     ae8:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     af8:	31 30 20 79 30 00                                   10 y0.

00000afe <square_circle_test100>:
     afe:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     b0e:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     b1e:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     b2e:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     b3e:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     b4e:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     b5e:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     b6e:	35 30 20 6a 30 00                                   50 j0.

00000b74 <spiral_test5>:
     b74:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     b84:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     b94:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     ba4:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     bb4:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     bc4:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     bd4:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     be4:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

00000bee <spiral_test50a>:
     bee:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     bfe:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

00000c0e <dwell_test1>:
     c0e:	67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30 20     g0 x10.g4 p1.g0 
     c1e:	78 32 30 0a 67 34 20 70 31 0a 67 30 20 78 31 30     x20.g4 p1.g0 x10
     c2e:	0a 67 34 20 70 31 0a 67 30 20 78 30 30 0a 67 34     .g4 p1.g0 x00.g4
     c3e:	20 70 31 0a 67 30 20 78 31 30 0a 67 34 20 70 31      p1.g0 x10.g4 p1
     c4e:	0a 67 30 20 78 32 30 0a 67 34 20 70 31 0a 67 30     .g0 x20.g4 p1.g0
     c5e:	20 78 31 30 0a 67 34 20 70 31 0a 67 30 20 78 30      x10.g4 p1.g0 x0
     c6e:	0a 67 34 20 70 31 0a 67 30 20 78 31 30 0a 67 34     .g4 p1.g0 x10.g4
     c7e:	20 70 31 0a 67 30 20 78 32 30 0a 67 34 20 70 31      p1.g0 x20.g4 p1
     c8e:	0a 67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30     .g0 x10.g4 p1.g0
     c9e:	20 78 30 00                                          x0.

00000ca2 <dwell_test2>:
     ca2:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     cb2:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     cc2:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     cd2:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     ce2:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     cf2:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     d02:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     d12:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     d22:	20 70 31 0a 67 30 20 78 30 00                        p1.g0 x0.

00000d2c <dwell_testMax>:
     d2c:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000d36 <g0_test1>:
     d36:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     d46:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000d56 <g0_test2>:
     d56:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     d66:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     d76:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     d86:	79 30 20 7a 30 00                                   y0 z0.

00000d8c <g0_test3>:
     d8c:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     d9c:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     dac:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000dba <radius_arc_test1>:
     dba:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     dca:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     dda:	72 35 30 0a 00                                      r50..

00000ddf <radius_arc_test2>:
     ddf:	67 32 0a 00                                         g2..

00000de3 <zoetrope>:
     de3:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     df3:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     e03:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     e13:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     e23:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     e33:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     e43:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     e53:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     e63:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     e73:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     e83:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     e93:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     ea3:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     eb3:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     ec3:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     ed3:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     ee3:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     ef3:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     f03:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     f13:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     f23:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     f33:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     f43:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     f53:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     f63:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     f73:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     f83:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     f93:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     fa3:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     fb3:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     fc3:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     fd3:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     fe3:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     ff3:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
    1003:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
    1013:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
    1023:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
    1033:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
    1043:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
    1053:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
    1063:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
    1073:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
    1083:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
    1093:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
    10a3:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
    10b3:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
    10c3:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
    10d3:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
    10e3:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
    10f3:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
    1103:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
    1113:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
    1123:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
    1133:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
    1143:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
    1153:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
    1163:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
    1173:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
    1183:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
    1193:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
    11a3:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
    11b3:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
    11c3:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
    11d3:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
    11e3:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
    11f3:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
    1203:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
    1213:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    1223:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    1233:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    1243:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    1253:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    1263:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    1273:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    1283:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    1293:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    12a3:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    12b3:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    12c3:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    12d3:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    12e3:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    12f3:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    1303:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    1313:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    1323:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    1333:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    1343:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    1353:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    1363:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    1373:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    1383:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    1393:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    13a3:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    13b3:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    13c3:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    13d3:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    13e3:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    13f3:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    1403:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    1413:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    1423:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    1433:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    1443:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    1453:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    1463:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    1473:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    1483:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    1493:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    14a3:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    14b3:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    14c3:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    14d3:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    14e3:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    14f3:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    1503:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    1513:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    1523:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    1533:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    1543:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    1553:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    1563:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    1573:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    1583:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    1593:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    15a3:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    15b3:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    15c3:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    15d3:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    15e3:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    15f3:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    1603:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    1613:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    1623:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    1633:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    1643:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    1653:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    1663:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    1673:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    1683:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    1693:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    16a3:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    16b3:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    16c3:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    16d3:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    16e3:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    16f3:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    1703:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    1713:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    1723:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    1733:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    1743:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    1753:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    1763:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    1773:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    1783:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    1793:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

0000179e <contraptor_circle>:
    179e:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    17ae:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    17be:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    17ce:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    17de:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    17ee:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    17fe:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    180e:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    181e:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    182e:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    183e:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    184e:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    185e:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    186e:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    187e:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    188e:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    189e:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    18ae:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    18be:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    18ce:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    18de:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    18ee:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    18fe:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    190e:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    191e:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    192e:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    193e:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    194e:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    195e:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    196e:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    197e:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    198e:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    199e:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    19ae:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    19be:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    19ce:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    19de:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    19ee:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    19fe:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    1a0e:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    1a1e:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1a2e:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1a3e:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    1a4e:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    1a5e:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    1a6e:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    1a7e:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    1a8e:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    1a9e:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1aae:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    1abe:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    1ace:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    1ade:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    1aee:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    1afe:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    1b0e:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    1b1e:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1b2e:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1b3e:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1b4e:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1b5e:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1b6e:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001b7e <__c.3863>:
    1b7e:	62 75 69 6c 64 20 32 30 32 00                       build 202.

00001b88 <__c.3861>:
    1b88:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1b98:	25 53 0a 00                                         %S..

00001b9c <__c.3891>:
    1b9c:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1bac:	69 6c 65 0a 00                                      ile..

00001bb1 <tgModeStringControl>:
    1bb1:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001bbe <tgModeStringConfig>:
    1bbe:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001bca <tgModeStringGCode>:
    1bca:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

00001bd6 <tgModeStringDirect>:
    1bd6:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

00001be3 <tgModeStrings>:
    1be3:	b1 1b be 1b ca 1b d6 1b                             ........

00001beb <__c.3979>:
    1beb:	54 69 6e 79 47 20 5b 25 53 5d 3e 20 00              TinyG [%S]> .

00001bf8 <__c.3974>:
    1bf8:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001c06 <getcFuncs>:
    1c06:	98 4e 7c 4e 7c 4e 0e 50 7c 4e 7c 4e 7c 4e 7c 4e     .N|N|N.P|N|N|N|N
    1c16:	dd 4e 7c 4e 98 4e 7c 4e 7c 4e 98 4e 32 50 3e 50     .N|N.N|N|N.N2P>P
    1c26:	7c 4e 26 50 7c 4e 1a 50 7c 4e 7c 4e 7c 4e 7c 4e     |N&P|N.P|N|N|N|N
    1c36:	0e 50 7c 4e 7c 4e 0e 50 7c 4e 7c 4e 7c 4e 7c 4e     .P|N|N.P|N|N|N|N
    1c46:	7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e     |N|N|N|N|N|N|N|N
    1c56:	7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e     |N|N|N|N|N|N|N|N
    1c66:	7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e     |N|N|N|N|N|N|N|N
    1c76:	7c 4e 7c 4e 7c 4e bf 4e 7c 4e 7c 4e 7c 4e 7c 4e     |N|N|N.N|N|N|N|N
    1c86:	7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e     |N|N|N|N|N|N|N|N
    1c96:	7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e     |N|N|N|N|N|N|N|N
    1ca6:	7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e     |N|N|N|N|N|N|N|N
    1cb6:	7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e     |N|N|N|N|N|N|N|N
    1cc6:	7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e     |N|N|N|N|N|N|N|N
    1cd6:	7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e     |N|N|N|N|N|N|N|N
    1ce6:	7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e     |N|N|N|N|N|N|N|N
    1cf6:	7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e 7c 4e dd 4e     |N|N|N|N|N|N|N.N

00001d06 <readlnFuncs>:
    1d06:	a0 4f 52 4f 52 4f 0e 50 52 4f 52 4f 52 4f 52 4f     .ORORO.PRORORORO
    1d16:	ef 4f 52 4f a0 4f 52 4f 52 4f a0 4f 32 50 3e 50     .ORO.ORORO.O2P>P
    1d26:	52 4f 26 50 52 4f 1a 50 52 4f 52 4f 52 4f 52 4f     RO&PRO.PRORORORO
    1d36:	0e 50 52 4f 52 4f 0e 50 52 4f 52 4f 52 4f 52 4f     .PRORO.PRORORORO
    1d46:	52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f     RORORORORORORORO
    1d56:	52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f     RORORORORORORORO
    1d66:	52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f     RORORORORORORORO
    1d76:	52 4f 52 4f 52 4f d1 4f 52 4f 52 4f 52 4f 52 4f     RORORO.ORORORORO
    1d86:	52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f     RORORORORORORORO
    1d96:	52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f     RORORORORORORORO
    1da6:	52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f     RORORORORORORORO
    1db6:	52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f     RORORORORORORORO
    1dc6:	52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f     RORORORORORORORO
    1dd6:	52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f     RORORORORORORORO
    1de6:	52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f     RORORORORORORORO
    1df6:	52 4f 52 4f 52 4f 52 4f 52 4f 52 4f 52 4f ef 4f     RORORORORORORO.O

00001e06 <pstr_inf>:
    1e06:	49 4e 46                                            INF

00001e09 <pstr_inity>:
    1e09:	49 4e 49 54 59                                      INITY

00001e0e <pstr_nan>:
    1e0e:	4e 41 4e                                            NAN

00001e11 <pwr_m10>:
    1e11:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1e21:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001e29 <pwr_p10>:
    1e29:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1e39:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1e49:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1e59:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1e69:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1e79:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1e89:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1e99:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1ea9:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1eb9:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1ec9:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1ed9:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1ee9:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1ef9:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1f09:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1f19:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1f29:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1f39:	3d 27 00                                            ='.

00001f3c <__ctors_end>:
    1f3c:	11 24       	eor	r1, r1
    1f3e:	1f be       	out	0x3f, r1	; 63
    1f40:	cf ef       	ldi	r28, 0xFF	; 255
    1f42:	df e5       	ldi	r29, 0x5F	; 95
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	00 e0       	ldi	r16, 0x00	; 0
    1f4a:	0c bf       	out	0x3c, r16	; 60

00001f4c <__do_copy_data>:
    1f4c:	11 e2       	ldi	r17, 0x21	; 33
    1f4e:	a0 e0       	ldi	r26, 0x00	; 0
    1f50:	b0 e2       	ldi	r27, 0x20	; 32
    1f52:	ec e2       	ldi	r30, 0x2C	; 44
    1f54:	f6 ec       	ldi	r31, 0xC6	; 198
    1f56:	00 e0       	ldi	r16, 0x00	; 0
    1f58:	0b bf       	out	0x3b, r16	; 59
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <__do_copy_data+0x14>
    1f5c:	07 90       	elpm	r0, Z+
    1f5e:	0d 92       	st	X+, r0
    1f60:	ae 32       	cpi	r26, 0x2E	; 46
    1f62:	b1 07       	cpc	r27, r17
    1f64:	d9 f7       	brne	.-10     	; 0x1f5c <__do_copy_data+0x10>

00001f66 <__do_clear_bss>:
    1f66:	15 e2       	ldi	r17, 0x25	; 37
    1f68:	ae e2       	ldi	r26, 0x2E	; 46
    1f6a:	b1 e2       	ldi	r27, 0x21	; 33
    1f6c:	01 c0       	rjmp	.+2      	; 0x1f70 <.do_clear_bss_start>

00001f6e <.do_clear_bss_loop>:
    1f6e:	1d 92       	st	X+, r1

00001f70 <.do_clear_bss_start>:
    1f70:	aa 36       	cpi	r26, 0x6A	; 106
    1f72:	b1 07       	cpc	r27, r17
    1f74:	e1 f7       	brne	.-8      	; 0x1f6e <.do_clear_bss_loop>
    1f76:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <main>
    1f7a:	0c 94 14 63 	jmp	0xc628	; 0xc628 <_exit>

00001f7e <__bad_interrupt>:
    1f7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001f82 <main>:
#include "encoder.h"
#include "gcode.h"


int main(void) 
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
	/* These inits are order dependent */
	cli();
    1f8a:	f8 94       	cli
	xmega_init();				// xmega setup
    1f8c:	0e 94 10 23 	call	0x4620	; 0x4620 <xmega_init>
	xio_init();					// xmega io subsystem
    1f90:	0e 94 7e 35 	call	0x6afc	; 0x6afc <xio_init>

	cfg_init();					// get config record from eeprom
    1f94:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <cfg_init>
	st_init(); 					// stepper subsystem
    1f98:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <st_init>
	ls_init();					// limit switches
    1f9c:	0e 94 09 48 	call	0x9012	; 0x9012 <ls_init>
	mv_init();					// move buffers
    1fa0:	0e 94 98 44 	call	0x8930	; 0x8930 <mv_init>
	mc_init();					// motion control subsystem
    1fa4:	0e 94 76 23 	call	0x46ec	; 0x46ec <mc_init>
	spindle_init();				// spindle controller
    1fa8:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <spindle_init>
	en_init();					// encoders
    1fac:	0e 94 bf 22 	call	0x457e	; 0x457e <en_init>
	gc_init();					// gcode-parser
    1fb0:	0e 94 00 10 	call	0x2000	; 0x2000 <gc_init>
	dd_init();					// direct drive commands
    1fb4:	0e 94 82 44 	call	0x8904	; 0x8904 <dd_init>
	tg_init();					// tinyg parsers
    1fb8:	0e 94 28 42 	call	0x8450	; 0x8450 <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1fbc:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1fc0:	a0 ea       	ldi	r26, 0xA0	; 160
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e0 ea       	ldi	r30, 0xA0	; 160
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	82 81       	ldd	r24, Z+2	; 0x02
    1fca:	81 60       	ori	r24, 0x01	; 1
    1fcc:	12 96       	adiw	r26, 0x02	; 2
    1fce:	8c 93       	st	X, r24
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1fd0:	a0 ea       	ldi	r26, 0xA0	; 160
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e0 ea       	ldi	r30, 0xA0	; 160
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	82 60       	ori	r24, 0x02	; 2
    1fdc:	12 96       	adiw	r26, 0x02	; 2
    1fde:	8c 93       	st	X, r24
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1fe0:	a0 ea       	ldi	r26, 0xA0	; 160
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e0 ea       	ldi	r30, 0xA0	; 160
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	82 81       	ldd	r24, Z+2	; 0x02
    1fea:	84 60       	ori	r24, 0x04	; 4
    1fec:	12 96       	adiw	r26, 0x02	; 2
    1fee:	8c 93       	st	X, r24
	sei();						// enable global interrupts
    1ff0:	78 94       	sei

	// Debug help:
	// Pre-load the USB RX (input) buffer with some test strings
	// Be mindful of the 16 char limit on the RX (circular) buffer.
//	xio_usb_queue_RX_char(ETX);			// set control-c (kill)
	xio_usb_queue_RX_string("f\n");
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e2       	ldi	r25, 0x20	; 32
    1ff6:	0e 94 59 39 	call	0x72b2	; 0x72b2 <xio_usb_queue_RX_string>
//	xio_usb_queue_RX_string("?\n");
//	xio_usb_queue_RX_string("g0x10y10z25\n");

	for(;;){
		tg_controller();
    1ffa:	0e 94 7f 42 	call	0x84fe	; 0x84fe <tg_controller>
    1ffe:	fd cf       	rjmp	.-6      	; 0x1ffa <main+0x78>

00002000 <gc_init>:

/* 
 * gc_init() 
 */

void gc_init() {
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    2008:	8e e2       	ldi	r24, 0x2E	; 46
    200a:	91 e2       	ldi	r25, 0x21	; 33
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	70 e0       	ldi	r23, 0x00	; 0
    2010:	46 e5       	ldi	r20, 0x56	; 86
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	0e 94 d0 61 	call	0xc3a0	; 0xc3a0 <memset>
  	gc.dwell_time = 0; 						// was 'p' 
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a0 e0       	ldi	r26, 0x00	; 0
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	80 93 3f 21 	sts	0x213F, r24
    2024:	90 93 40 21 	sts	0x2140, r25
    2028:	a0 93 41 21 	sts	0x2141, r26
    202c:	b0 93 42 21 	sts	0x2142, r27
	gc.radius = 0;							// radius value
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a0 e0       	ldi	r26, 0x00	; 0
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	80 93 43 21 	sts	0x2143, r24
    203c:	90 93 44 21 	sts	0x2144, r25
    2040:	a0 93 45 21 	sts	0x2145, r26
    2044:	b0 93 46 21 	sts	0x2146, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    2048:	80 91 a0 24 	lds	r24, 0x24A0
    204c:	90 91 a1 24 	lds	r25, 0x24A1
    2050:	a0 91 a2 24 	lds	r26, 0x24A2
    2054:	b0 91 a3 24 	lds	r27, 0x24A3
    2058:	80 93 47 21 	sts	0x2147, r24
    205c:	90 93 48 21 	sts	0x2148, r25
    2060:	a0 93 49 21 	sts	0x2149, r26
    2064:	b0 93 4a 21 	sts	0x214A, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    2068:	80 91 a4 24 	lds	r24, 0x24A4
    206c:	90 91 a5 24 	lds	r25, 0x24A5
    2070:	a0 91 a6 24 	lds	r26, 0x24A6
    2074:	b0 91 a7 24 	lds	r27, 0x24A7
    2078:	80 93 4b 21 	sts	0x214B, r24
    207c:	90 93 4c 21 	sts	0x214C, r25
    2080:	a0 93 4d 21 	sts	0x214D, r26
    2084:	b0 93 4e 21 	sts	0x214E, r27

	gc.absolute_mode = TRUE;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	80 93 3c 21 	sts	0x213C, r24
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	a0 e8       	ldi	r26, 0x80	; 128
    2094:	bf eb       	ldi	r27, 0xBF	; 191
    2096:	80 93 53 21 	sts	0x2153, r24
    209a:	90 93 54 21 	sts	0x2154, r25
    209e:	a0 93 55 21 	sts	0x2155, r26
    20a2:	b0 93 56 21 	sts	0x2156, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    20a6:	10 92 3d 21 	sts	0x213D, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    20aa:	10 92 82 21 	sts	0x2182, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    20ae:	10 92 83 21 	sts	0x2183, r1

	select_plane(X, Y, Z);
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	61 e0       	ldi	r22, 0x01	; 1
    20b6:	42 e0       	ldi	r20, 0x02	; 2
    20b8:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <select_plane>
}
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <gc_gcode_parser+0x6>
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	9a 83       	std	Y+2, r25	; 0x02
	_gc_normalize_gcode_block(block);
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	9a 81       	ldd	r25, Y+2	; 0x02
    20d4:	0e 94 92 10 	call	0x2124	; 0x2124 <_gc_normalize_gcode_block>
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    20d8:	e9 81       	ldd	r30, Y+1	; 0x01
    20da:	fa 81       	ldd	r31, Y+2	; 0x02
    20dc:	80 81       	ld	r24, Z
    20de:	88 32       	cpi	r24, 0x28	; 40
    20e0:	11 f4       	brne	.+4      	; 0x20e6 <gc_gcode_parser+0x24>
		return(TG_OK);
    20e2:	1b 82       	std	Y+3, r1	; 0x03
    20e4:	18 c0       	rjmp	.+48     	; 0x2116 <gc_gcode_parser+0x54>
	}
	if (block[0] == 'Q') { 					// quit
    20e6:	e9 81       	ldd	r30, Y+1	; 0x01
    20e8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ea:	80 81       	ld	r24, Z
    20ec:	81 35       	cpi	r24, 0x51	; 81
    20ee:	19 f4       	brne	.+6      	; 0x20f6 <gc_gcode_parser+0x34>
		return(TG_QUIT);
    20f0:	83 e0       	ldi	r24, 0x03	; 3
    20f2:	8b 83       	std	Y+3, r24	; 0x03
    20f4:	10 c0       	rjmp	.+32     	; 0x2116 <gc_gcode_parser+0x54>
	} 
	if (block[0] == '/') { 					// ignore block delete
    20f6:	e9 81       	ldd	r30, Y+1	; 0x01
    20f8:	fa 81       	ldd	r31, Y+2	; 0x02
    20fa:	80 81       	ld	r24, Z
    20fc:	8f 32       	cpi	r24, 0x2F	; 47
    20fe:	11 f4       	brne	.+4      	; 0x2104 <gc_gcode_parser+0x42>
		return(TG_OK);
    2100:	1b 82       	std	Y+3, r1	; 0x03
    2102:	09 c0       	rjmp	.+18     	; 0x2116 <gc_gcode_parser+0x54>
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	0e 94 81 12 	call	0x2502	; 0x2502 <gc_execute_block>
    210c:	80 93 2e 21 	sts	0x212E, r24
#ifdef __ECHO
	_gc_print_status(gc.status, block);
#endif
	return (gc.status);
    2110:	80 91 2e 21 	lds	r24, 0x212E
    2114:	8b 83       	std	Y+3, r24	; 0x03
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2118:	23 96       	adiw	r28, 0x03	; 3
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <_gc_normalize_gcode_block>:

/*
 * _gc_normalize_gcode_block() - normalize a block (line) of gcode in place
 */

char *_gc_normalize_gcode_block(char *block) {
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <_gc_normalize_gcode_block+0x6>
    212a:	00 d0       	rcall	.+0      	; 0x212c <_gc_normalize_gcode_block+0x8>
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	8c 83       	std	Y+4, r24	; 0x04
    2132:	9d 83       	std	Y+5, r25	; 0x05

	char c;
	uint8_t i = 0; 		// index for incoming characters
    2134:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t j = 0;		// index for normalized characters
    2136:	19 82       	std	Y+1, r1	; 0x01
    2138:	25 c0       	rjmp	.+74     	; 0x2184 <_gc_normalize_gcode_block+0x60>

	while ((c = block[i++]) != NUL) {
		if (c <= ' ' ) {					// throw away WS & ctrl chars
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	81 32       	cpi	r24, 0x21	; 33
    213e:	10 f1       	brcs	.+68     	; 0x2184 <_gc_normalize_gcode_block+0x60>
			continue;
		} else if (c >= 'a' && c <= 'z') {	// convert lower to upper
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	81 36       	cpi	r24, 0x61	; 97
    2144:	90 f0       	brcs	.+36     	; 0x216a <_gc_normalize_gcode_block+0x46>
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	8b 37       	cpi	r24, 0x7B	; 123
    214a:	78 f4       	brcc	.+30     	; 0x216a <_gc_normalize_gcode_block+0x46>
			block[j++] = c-'a'+'A';
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	8c 81       	ldd	r24, Y+4	; 0x04
    2154:	9d 81       	ldd	r25, Y+5	; 0x05
    2156:	fc 01       	movw	r30, r24
    2158:	e2 0f       	add	r30, r18
    215a:	f3 1f       	adc	r31, r19
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	80 52       	subi	r24, 0x20	; 32
    2160:	80 83       	st	Z, r24
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	8f 5f       	subi	r24, 0xFF	; 255
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	0d c0       	rjmp	.+26     	; 0x2184 <_gc_normalize_gcode_block+0x60>
		} else {
			block[j++] = c;
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	8c 81       	ldd	r24, Y+4	; 0x04
    2172:	9d 81       	ldd	r25, Y+5	; 0x05
    2174:	fc 01       	movw	r30, r24
    2176:	e2 0f       	add	r30, r18
    2178:	f3 1f       	adc	r31, r19
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	80 83       	st	Z, r24
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	8f 5f       	subi	r24, 0xFF	; 255
    2182:	89 83       	std	Y+1, r24	; 0x01

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	8c 81       	ldd	r24, Y+4	; 0x04
    218c:	9d 81       	ldd	r25, Y+5	; 0x05
    218e:	fc 01       	movw	r30, r24
    2190:	e2 0f       	add	r30, r18
    2192:	f3 1f       	adc	r31, r19
    2194:	80 81       	ld	r24, Z
    2196:	8b 83       	std	Y+3, r24	; 0x03
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	8e 83       	std	Y+6, r24	; 0x06
    219c:	8e 81       	ldd	r24, Y+6	; 0x06
    219e:	88 23       	and	r24, r24
    21a0:	11 f0       	breq	.+4      	; 0x21a6 <_gc_normalize_gcode_block+0x82>
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	8e 83       	std	Y+6, r24	; 0x06
    21a6:	8e 81       	ldd	r24, Y+6	; 0x06
    21a8:	9a 81       	ldd	r25, Y+2	; 0x02
    21aa:	9f 5f       	subi	r25, 0xFF	; 255
    21ac:	9a 83       	std	Y+2, r25	; 0x02
    21ae:	88 23       	and	r24, r24
    21b0:	21 f6       	brne	.-120    	; 0x213a <_gc_normalize_gcode_block+0x16>
			block[j++] = c-'a'+'A';
		} else {
			block[j++] = c;
		}
	}
	block[j] = 0;
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	8c 81       	ldd	r24, Y+4	; 0x04
    21ba:	9d 81       	ldd	r25, Y+5	; 0x05
    21bc:	fc 01       	movw	r30, r24
    21be:	e2 0f       	add	r30, r18
    21c0:	f3 1f       	adc	r31, r19
    21c2:	10 82       	st	Z, r1
	return block;
    21c4:	8c 81       	ldd	r24, Y+4	; 0x04
    21c6:	9d 81       	ldd	r25, Y+5	; 0x05
}
    21c8:	26 96       	adiw	r28, 0x06	; 6
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <select_plane>:
/* 
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	00 d0       	rcall	.+0      	; 0x21da <select_plane+0x6>
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	89 83       	std	Y+1, r24	; 0x01
    21e0:	6a 83       	std	Y+2, r22	; 0x02
    21e2:	4b 83       	std	Y+3, r20	; 0x03
	gc.plane_axis_0 = axis_0;
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	80 93 7b 21 	sts	0x217B, r24
	gc.plane_axis_1 = axis_1;
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	80 93 7c 21 	sts	0x217C, r24
	gc.plane_axis_2 = axis_2;
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	80 93 7d 21 	sts	0x217D, r24
}
    21f6:	23 96       	adiw	r28, 0x03	; 3
    21f8:	cd bf       	out	0x3d, r28	; 61
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	28 97       	sbiw	r28, 0x08	; 8
    220c:	cd bf       	out	0x3d, r28	; 61
    220e:	de bf       	out	0x3e, r29	; 62
    2210:	69 83       	std	Y+1, r22	; 0x01
    2212:	7a 83       	std	Y+2, r23	; 0x02
    2214:	8b 83       	std	Y+3, r24	; 0x03
    2216:	9c 83       	std	Y+4, r25	; 0x04
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    2218:	80 91 3b 21 	lds	r24, 0x213B
    221c:	88 23       	and	r24, r24
    221e:	89 f0       	breq	.+34     	; 0x2242 <to_millimeters+0x40>
    2220:	69 81       	ldd	r22, Y+1	; 0x01
    2222:	7a 81       	ldd	r23, Y+2	; 0x02
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	9c 81       	ldd	r25, Y+4	; 0x04
    2228:	25 e8       	ldi	r18, 0x85	; 133
    222a:	32 e4       	ldi	r19, 0x42	; 66
    222c:	41 e2       	ldi	r20, 0x21	; 33
    222e:	5d e3       	ldi	r21, 0x3D	; 61
    2230:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	8d 83       	std	Y+5, r24	; 0x05
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	af 83       	std	Y+7, r26	; 0x07
    223e:	b8 87       	std	Y+8, r27	; 0x08
    2240:	08 c0       	rjmp	.+16     	; 0x2252 <to_millimeters+0x50>
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	9a 81       	ldd	r25, Y+2	; 0x02
    2246:	ab 81       	ldd	r26, Y+3	; 0x03
    2248:	bc 81       	ldd	r27, Y+4	; 0x04
    224a:	8d 83       	std	Y+5, r24	; 0x05
    224c:	9e 83       	std	Y+6, r25	; 0x06
    224e:	af 83       	std	Y+7, r26	; 0x07
    2250:	b8 87       	std	Y+8, r27	; 0x08
    2252:	8d 81       	ldd	r24, Y+5	; 0x05
    2254:	9e 81       	ldd	r25, Y+6	; 0x06
    2256:	af 81       	ldd	r26, Y+7	; 0x07
    2258:	b8 85       	ldd	r27, Y+8	; 0x08
}
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	28 96       	adiw	r28, 0x08	; 8
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	60 97       	sbiw	r28, 0x10	; 16
    2274:	cd bf       	out	0x3d, r28	; 61
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	6d 83       	std	Y+5, r22	; 0x05
    227a:	7e 83       	std	Y+6, r23	; 0x06
    227c:	8f 83       	std	Y+7, r24	; 0x07
    227e:	98 87       	std	Y+8, r25	; 0x08
    2280:	29 87       	std	Y+9, r18	; 0x09
    2282:	3a 87       	std	Y+10, r19	; 0x0a
    2284:	4b 87       	std	Y+11, r20	; 0x0b
    2286:	5c 87       	std	Y+12, r21	; 0x0c
	double theta = atan(x/fabs(y));
    2288:	89 85       	ldd	r24, Y+9	; 0x09
    228a:	9a 85       	ldd	r25, Y+10	; 0x0a
    228c:	ab 85       	ldd	r26, Y+11	; 0x0b
    228e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2290:	9c 01       	movw	r18, r24
    2292:	ad 01       	movw	r20, r26
    2294:	5f 77       	andi	r21, 0x7F	; 127
    2296:	6d 81       	ldd	r22, Y+5	; 0x05
    2298:	7e 81       	ldd	r23, Y+6	; 0x06
    229a:	8f 81       	ldd	r24, Y+7	; 0x07
    229c:	98 85       	ldd	r25, Y+8	; 0x08
    229e:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	bc 01       	movw	r22, r24
    22a8:	cd 01       	movw	r24, r26
    22aa:	0e 94 f2 5a 	call	0xb5e4	; 0xb5e4 <atan>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	9a 83       	std	Y+2, r25	; 0x02
    22b6:	ab 83       	std	Y+3, r26	; 0x03
    22b8:	bc 83       	std	Y+4, r27	; 0x04

	if (y>0) {
    22ba:	69 85       	ldd	r22, Y+9	; 0x09
    22bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    22be:	8b 85       	ldd	r24, Y+11	; 0x0b
    22c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	50 e0       	ldi	r21, 0x00	; 0
    22ca:	0e 94 1d 5d 	call	0xba3a	; 0xba3a <__gesf2>
    22ce:	18 16       	cp	r1, r24
    22d0:	4c f4       	brge	.+18     	; 0x22e4 <theta+0x7a>
		return(theta);
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	9a 81       	ldd	r25, Y+2	; 0x02
    22d6:	ab 81       	ldd	r26, Y+3	; 0x03
    22d8:	bc 81       	ldd	r27, Y+4	; 0x04
    22da:	8d 87       	std	Y+13, r24	; 0x0d
    22dc:	9e 87       	std	Y+14, r25	; 0x0e
    22de:	af 87       	std	Y+15, r26	; 0x0f
    22e0:	b8 8b       	std	Y+16, r27	; 0x10
    22e2:	2d c0       	rjmp	.+90     	; 0x233e <theta+0xd4>
	} else {
		if (theta>0) 
    22e4:	69 81       	ldd	r22, Y+1	; 0x01
    22e6:	7a 81       	ldd	r23, Y+2	; 0x02
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	9c 81       	ldd	r25, Y+4	; 0x04
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	50 e0       	ldi	r21, 0x00	; 0
    22f4:	0e 94 1d 5d 	call	0xba3a	; 0xba3a <__gesf2>
    22f8:	18 16       	cp	r1, r24
    22fa:	8c f4       	brge	.+34     	; 0x231e <theta+0xb4>
	    {
			return(M_PI-theta);
    22fc:	6b ed       	ldi	r22, 0xDB	; 219
    22fe:	7f e0       	ldi	r23, 0x0F	; 15
    2300:	89 e4       	ldi	r24, 0x49	; 73
    2302:	90 e4       	ldi	r25, 0x40	; 64
    2304:	29 81       	ldd	r18, Y+1	; 0x01
    2306:	3a 81       	ldd	r19, Y+2	; 0x02
    2308:	4b 81       	ldd	r20, Y+3	; 0x03
    230a:	5c 81       	ldd	r21, Y+4	; 0x04
    230c:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	8d 87       	std	Y+13, r24	; 0x0d
    2316:	9e 87       	std	Y+14, r25	; 0x0e
    2318:	af 87       	std	Y+15, r26	; 0x0f
    231a:	b8 8b       	std	Y+16, r27	; 0x10
    231c:	10 c0       	rjmp	.+32     	; 0x233e <theta+0xd4>
    	} else {
			return(-M_PI-theta);
    231e:	6b ed       	ldi	r22, 0xDB	; 219
    2320:	7f e0       	ldi	r23, 0x0F	; 15
    2322:	89 e4       	ldi	r24, 0x49	; 73
    2324:	90 ec       	ldi	r25, 0xC0	; 192
    2326:	29 81       	ldd	r18, Y+1	; 0x01
    2328:	3a 81       	ldd	r19, Y+2	; 0x02
    232a:	4b 81       	ldd	r20, Y+3	; 0x03
    232c:	5c 81       	ldd	r21, Y+4	; 0x04
    232e:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	8d 87       	std	Y+13, r24	; 0x0d
    2338:	9e 87       	std	Y+14, r25	; 0x0e
    233a:	af 87       	std	Y+15, r26	; 0x0f
    233c:	b8 8b       	std	Y+16, r27	; 0x10
    233e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2340:	9e 85       	ldd	r25, Y+14	; 0x0e
    2342:	af 85       	ldd	r26, Y+15	; 0x0f
    2344:	b8 89       	ldd	r27, Y+16	; 0x10
		}
	}
}
    2346:	bc 01       	movw	r22, r24
    2348:	cd 01       	movw	r24, r26
    234a:	60 96       	adiw	r28, 0x10	; 16
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    2356:	ef 92       	push	r14
    2358:	ff 92       	push	r15
    235a:	0f 93       	push	r16
    235c:	1f 93       	push	r17
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	2c 97       	sbiw	r28, 0x0c	; 12
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	9a 83       	std	Y+2, r25	; 0x02
    2370:	6b 83       	std	Y+3, r22	; 0x03
    2372:	7c 83       	std	Y+4, r23	; 0x04
    2374:	4d 83       	std	Y+5, r20	; 0x05
    2376:	5e 83       	std	Y+6, r21	; 0x06
    2378:	2f 83       	std	Y+7, r18	; 0x07
    237a:	38 87       	std	Y+8, r19	; 0x08
    237c:	09 87       	std	Y+9, r16	; 0x09
    237e:	1a 87       	std	Y+10, r17	; 0x0a
	if (buf[*i] == 0) {
    2380:	e9 85       	ldd	r30, Y+9	; 0x09
    2382:	fa 85       	ldd	r31, Y+10	; 0x0a
    2384:	80 81       	ld	r24, Z
    2386:	91 81       	ldd	r25, Z+1	; 0x01
    2388:	9c 01       	movw	r18, r24
    238a:	8f 81       	ldd	r24, Y+7	; 0x07
    238c:	98 85       	ldd	r25, Y+8	; 0x08
    238e:	fc 01       	movw	r30, r24
    2390:	e2 0f       	add	r30, r18
    2392:	f3 1f       	adc	r31, r19
    2394:	80 81       	ld	r24, Z
    2396:	88 23       	and	r24, r24
    2398:	19 f4       	brne	.+6      	; 0x23a0 <_gc_next_statement+0x4a>
		return(FALSE); // No more statements
    239a:	1b 86       	std	Y+11, r1	; 0x0b
    239c:	1c 86       	std	Y+12, r1	; 0x0c
    239e:	57 c0       	rjmp	.+174    	; 0x244e <_gc_next_statement+0xf8>
	}
  
	*letter = buf[*i];
    23a0:	e9 85       	ldd	r30, Y+9	; 0x09
    23a2:	fa 85       	ldd	r31, Y+10	; 0x0a
    23a4:	80 81       	ld	r24, Z
    23a6:	91 81       	ldd	r25, Z+1	; 0x01
    23a8:	9c 01       	movw	r18, r24
    23aa:	8f 81       	ldd	r24, Y+7	; 0x07
    23ac:	98 85       	ldd	r25, Y+8	; 0x08
    23ae:	fc 01       	movw	r30, r24
    23b0:	e2 0f       	add	r30, r18
    23b2:	f3 1f       	adc	r31, r19
    23b4:	80 81       	ld	r24, Z
    23b6:	e9 81       	ldd	r30, Y+1	; 0x01
    23b8:	fa 81       	ldd	r31, Y+2	; 0x02
    23ba:	80 83       	st	Z, r24
	if((*letter < 'A') || (*letter > 'Z')) {
    23bc:	e9 81       	ldd	r30, Y+1	; 0x01
    23be:	fa 81       	ldd	r31, Y+2	; 0x02
    23c0:	80 81       	ld	r24, Z
    23c2:	81 34       	cpi	r24, 0x41	; 65
    23c4:	28 f0       	brcs	.+10     	; 0x23d0 <_gc_next_statement+0x7a>
    23c6:	e9 81       	ldd	r30, Y+1	; 0x01
    23c8:	fa 81       	ldd	r31, Y+2	; 0x02
    23ca:	80 81       	ld	r24, Z
    23cc:	8b 35       	cpi	r24, 0x5B	; 91
    23ce:	30 f0       	brcs	.+12     	; 0x23dc <_gc_next_statement+0x86>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    23d0:	8a e0       	ldi	r24, 0x0A	; 10
    23d2:	80 93 2e 21 	sts	0x212E, r24
		return(FALSE);
    23d6:	1b 86       	std	Y+11, r1	; 0x0b
    23d8:	1c 86       	std	Y+12, r1	; 0x0c
    23da:	39 c0       	rjmp	.+114    	; 0x244e <_gc_next_statement+0xf8>
	}
	(*i)++;
    23dc:	e9 85       	ldd	r30, Y+9	; 0x09
    23de:	fa 85       	ldd	r31, Y+10	; 0x0a
    23e0:	80 81       	ld	r24, Z
    23e2:	91 81       	ldd	r25, Z+1	; 0x01
    23e4:	01 96       	adiw	r24, 0x01	; 1
    23e6:	e9 85       	ldd	r30, Y+9	; 0x09
    23e8:	fa 85       	ldd	r31, Y+10	; 0x0a
    23ea:	80 83       	st	Z, r24
    23ec:	91 83       	std	Z+1, r25	; 0x01
	if (!_gc_read_double(buf, i, value_ptr)) {
    23ee:	8f 81       	ldd	r24, Y+7	; 0x07
    23f0:	98 85       	ldd	r25, Y+8	; 0x08
    23f2:	29 85       	ldd	r18, Y+9	; 0x09
    23f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    23f6:	4b 81       	ldd	r20, Y+3	; 0x03
    23f8:	5c 81       	ldd	r21, Y+4	; 0x04
    23fa:	b9 01       	movw	r22, r18
    23fc:	0e 94 33 12 	call	0x2466	; 0x2466 <_gc_read_double>
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	19 f4       	brne	.+6      	; 0x240a <_gc_next_statement+0xb4>
		return(FALSE);
    2404:	1b 86       	std	Y+11, r1	; 0x0b
    2406:	1c 86       	std	Y+12, r1	; 0x0c
    2408:	22 c0       	rjmp	.+68     	; 0x244e <_gc_next_statement+0xf8>
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    240a:	eb 81       	ldd	r30, Y+3	; 0x03
    240c:	fc 81       	ldd	r31, Y+4	; 0x04
    240e:	e0 80       	ld	r14, Z
    2410:	f1 80       	ldd	r15, Z+1	; 0x01
    2412:	02 81       	ldd	r16, Z+2	; 0x02
    2414:	13 81       	ldd	r17, Z+3	; 0x03
    2416:	eb 81       	ldd	r30, Y+3	; 0x03
    2418:	fc 81       	ldd	r31, Y+4	; 0x04
    241a:	80 81       	ld	r24, Z
    241c:	91 81       	ldd	r25, Z+1	; 0x01
    241e:	a2 81       	ldd	r26, Z+2	; 0x02
    2420:	b3 81       	ldd	r27, Z+3	; 0x03
    2422:	bc 01       	movw	r22, r24
    2424:	cd 01       	movw	r24, r26
    2426:	0e 94 9d 5e 	call	0xbd3a	; 0xbd3a <trunc>
    242a:	9b 01       	movw	r18, r22
    242c:	ac 01       	movw	r20, r24
    242e:	c8 01       	movw	r24, r16
    2430:	b7 01       	movw	r22, r14
    2432:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	ed 81       	ldd	r30, Y+5	; 0x05
    243c:	fe 81       	ldd	r31, Y+6	; 0x06
    243e:	80 83       	st	Z, r24
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	a2 83       	std	Z+2, r26	; 0x02
    2444:	b3 83       	std	Z+3, r27	; 0x03
	return(TRUE);
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	8b 87       	std	Y+11, r24	; 0x0b
    244c:	9c 87       	std	Y+12, r25	; 0x0c
    244e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2450:	9c 85       	ldd	r25, Y+12	; 0x0c
}
    2452:	2c 96       	adiw	r28, 0x0c	; 12
    2454:	cd bf       	out	0x3d, r28	; 61
    2456:	de bf       	out	0x3e, r29	; 62
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	1f 91       	pop	r17
    245e:	0f 91       	pop	r16
    2460:	ff 90       	pop	r15
    2462:	ef 90       	pop	r14
    2464:	08 95       	ret

00002466 <_gc_read_double>:
 *	i			index into string array (position on the line)
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	2c 97       	sbiw	r28, 0x0c	; 12
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	8d 83       	std	Y+5, r24	; 0x05
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	6f 83       	std	Y+7, r22	; 0x07
    247a:	78 87       	std	Y+8, r23	; 0x08
    247c:	49 87       	std	Y+9, r20	; 0x09
    247e:	5a 87       	std	Y+10, r21	; 0x0a
	char *start = buf + *i;
    2480:	ef 81       	ldd	r30, Y+7	; 0x07
    2482:	f8 85       	ldd	r31, Y+8	; 0x08
    2484:	80 81       	ld	r24, Z
    2486:	91 81       	ldd	r25, Z+1	; 0x01
    2488:	9c 01       	movw	r18, r24
    248a:	8d 81       	ldd	r24, Y+5	; 0x05
    248c:	9e 81       	ldd	r25, Y+6	; 0x06
    248e:	82 0f       	add	r24, r18
    2490:	93 1f       	adc	r25, r19
    2492:	89 83       	std	Y+1, r24	; 0x01
    2494:	9a 83       	std	Y+2, r25	; 0x02
	char *end;
  
	*double_ptr = strtod(start, &end);
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	9a 81       	ldd	r25, Y+2	; 0x02
    249a:	9e 01       	movw	r18, r28
    249c:	2d 5f       	subi	r18, 0xFD	; 253
    249e:	3f 4f       	sbci	r19, 0xFF	; 255
    24a0:	b9 01       	movw	r22, r18
    24a2:	0e 94 38 5f 	call	0xbe70	; 0xbe70 <strtod>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	e9 85       	ldd	r30, Y+9	; 0x09
    24ac:	fa 85       	ldd	r31, Y+10	; 0x0a
    24ae:	80 83       	st	Z, r24
    24b0:	91 83       	std	Z+1, r25	; 0x01
    24b2:	a2 83       	std	Z+2, r26	; 0x02
    24b4:	b3 83       	std	Z+3, r27	; 0x03
	if(end == start) { 
    24b6:	2b 81       	ldd	r18, Y+3	; 0x03
    24b8:	3c 81       	ldd	r19, Y+4	; 0x04
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	9a 81       	ldd	r25, Y+2	; 0x02
    24be:	28 17       	cp	r18, r24
    24c0:	39 07       	cpc	r19, r25
    24c2:	31 f4       	brne	.+12     	; 0x24d0 <_gc_read_double+0x6a>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    24c4:	8d e0       	ldi	r24, 0x0D	; 13
    24c6:	80 93 2e 21 	sts	0x212E, r24
		return(FALSE); 
    24ca:	1b 86       	std	Y+11, r1	; 0x0b
    24cc:	1c 86       	std	Y+12, r1	; 0x0c
    24ce:	11 c0       	rjmp	.+34     	; 0x24f2 <_gc_read_double+0x8c>
	};
	*i = end - buf;
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	9c 81       	ldd	r25, Y+4	; 0x04
    24d4:	9c 01       	movw	r18, r24
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	a9 01       	movw	r20, r18
    24dc:	48 1b       	sub	r20, r24
    24de:	59 0b       	sbc	r21, r25
    24e0:	ca 01       	movw	r24, r20
    24e2:	ef 81       	ldd	r30, Y+7	; 0x07
    24e4:	f8 85       	ldd	r31, Y+8	; 0x08
    24e6:	80 83       	st	Z, r24
    24e8:	91 83       	std	Z+1, r25	; 0x01
	return(TRUE);
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	8b 87       	std	Y+11, r24	; 0x0b
    24f0:	9c 87       	std	Y+12, r25	; 0x0c
    24f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    24f4:	9c 85       	ldd	r25, Y+12	; 0x0c
}
    24f6:	2c 96       	adiw	r28, 0x0c	; 12
    24f8:	cd bf       	out	0x3d, r28	; 61
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	08 95       	ret

00002502 <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    2502:	8f 92       	push	r8
    2504:	9f 92       	push	r9
    2506:	af 92       	push	r10
    2508:	bf 92       	push	r11
    250a:	cf 92       	push	r12
    250c:	df 92       	push	r13
    250e:	ef 92       	push	r14
    2510:	ff 92       	push	r15
    2512:	0f 93       	push	r16
    2514:	1f 93       	push	r17
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	a1 97       	sbiw	r28, 0x21	; 33
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	8b 83       	std	Y+3, r24	; 0x03
    2526:	9c 83       	std	Y+4, r25	; 0x04
	int i = 0;  				// index into Gcode block buffer (buf)
    2528:	19 82       	std	Y+1, r1	; 0x01
    252a:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    252c:	83 e6       	ldi	r24, 0x63	; 99
    252e:	91 e2       	ldi	r25, 0x21	; 33
    2530:	60 e0       	ldi	r22, 0x00	; 0
    2532:	70 e0       	ldi	r23, 0x00	; 0
    2534:	4c e0       	ldi	r20, 0x0C	; 12
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	0e 94 d0 61 	call	0xc3a0	; 0xc3a0 <memset>
	clear_vector(gc.offset);
    253c:	8f e6       	ldi	r24, 0x6F	; 111
    253e:	91 e2       	ldi	r25, 0x21	; 33
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	70 e0       	ldi	r23, 0x00	; 0
    2544:	4c e0       	ldi	r20, 0x0C	; 12
    2546:	50 e0       	ldi	r21, 0x00	; 0
    2548:	0e 94 d0 61 	call	0xc3a0	; 0xc3a0 <memset>

	gc.status = TG_OK;
    254c:	10 92 2e 21 	sts	0x212E, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    2550:	10 92 3e 21 	sts	0x213E, r1
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set
    2554:	10 92 83 21 	sts	0x2183, r1
    2558:	87 c1       	rjmp	.+782    	; 0x2868 <gc_execute_block+0x366>

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    255a:	80 91 2f 21 	lds	r24, 0x212F
    255e:	28 2f       	mov	r18, r24
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	28 a3       	std	Y+32, r18	; 0x20
    2564:	39 a3       	std	Y+33, r19	; 0x21
    2566:	88 a1       	ldd	r24, Y+32	; 0x20
    2568:	99 a1       	ldd	r25, Y+33	; 0x21
    256a:	8d 34       	cpi	r24, 0x4D	; 77
    256c:	91 05       	cpc	r25, r1
    256e:	09 f4       	brne	.+2      	; 0x2572 <gc_execute_block+0x70>
    2570:	11 c1       	rjmp	.+546    	; 0x2794 <gc_execute_block+0x292>
    2572:	a8 a1       	ldd	r26, Y+32	; 0x20
    2574:	b9 a1       	ldd	r27, Y+33	; 0x21
    2576:	a4 35       	cpi	r26, 0x54	; 84
    2578:	b1 05       	cpc	r27, r1
    257a:	09 f4       	brne	.+2      	; 0x257e <gc_execute_block+0x7c>
    257c:	5b c1       	rjmp	.+694    	; 0x2834 <gc_execute_block+0x332>
    257e:	28 a1       	ldd	r18, Y+32	; 0x20
    2580:	39 a1       	ldd	r19, Y+33	; 0x21
    2582:	27 34       	cpi	r18, 0x47	; 71
    2584:	31 05       	cpc	r19, r1
    2586:	09 f0       	breq	.+2      	; 0x258a <gc_execute_block+0x88>
    2588:	6b c1       	rjmp	.+726    	; 0x2860 <gc_execute_block+0x35e>
			case 'G':
				switch((int)gc.value) {
    258a:	80 91 30 21 	lds	r24, 0x2130
    258e:	90 91 31 21 	lds	r25, 0x2131
    2592:	a0 91 32 21 	lds	r26, 0x2132
    2596:	b0 91 33 21 	lds	r27, 0x2133
    259a:	bc 01       	movw	r22, r24
    259c:	cd 01       	movw	r24, r26
    259e:	0e 94 9c 5b 	call	0xb738	; 0xb738 <__fixsfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	8e 8f       	std	Y+30, r24	; 0x1e
    25a8:	9f 8f       	std	Y+31, r25	; 0x1f
    25aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25ae:	85 31       	cpi	r24, 0x15	; 21
    25b0:	91 05       	cpc	r25, r1
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <gc_execute_block+0xb4>
    25b4:	c6 c0       	rjmp	.+396    	; 0x2742 <gc_execute_block+0x240>
    25b6:	ae 8d       	ldd	r26, Y+30	; 0x1e
    25b8:	bf 8d       	ldd	r27, Y+31	; 0x1f
    25ba:	a6 31       	cpi	r26, 0x16	; 22
    25bc:	b1 05       	cpc	r27, r1
    25be:	0c f0       	brlt	.+2      	; 0x25c2 <gc_execute_block+0xc0>
    25c0:	48 c0       	rjmp	.+144    	; 0x2652 <gc_execute_block+0x150>
    25c2:	2e 8d       	ldd	r18, Y+30	; 0x1e
    25c4:	3f 8d       	ldd	r19, Y+31	; 0x1f
    25c6:	24 30       	cpi	r18, 0x04	; 4
    25c8:	31 05       	cpc	r19, r1
    25ca:	09 f4       	brne	.+2      	; 0x25ce <gc_execute_block+0xcc>
    25cc:	a0 c0       	rjmp	.+320    	; 0x270e <gc_execute_block+0x20c>
    25ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25d2:	85 30       	cpi	r24, 0x05	; 5
    25d4:	91 05       	cpc	r25, r1
    25d6:	f4 f4       	brge	.+60     	; 0x2614 <gc_execute_block+0x112>
    25d8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    25da:	bf 8d       	ldd	r27, Y+31	; 0x1f
    25dc:	a1 30       	cpi	r26, 0x01	; 1
    25de:	b1 05       	cpc	r27, r1
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <gc_execute_block+0xe2>
    25e2:	80 c0       	rjmp	.+256    	; 0x26e4 <gc_execute_block+0x1e2>
    25e4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    25e6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    25e8:	22 30       	cpi	r18, 0x02	; 2
    25ea:	31 05       	cpc	r19, r1
    25ec:	34 f4       	brge	.+12     	; 0x25fa <gc_execute_block+0xf8>
    25ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <gc_execute_block+0xf6>
    25f6:	70 c0       	rjmp	.+224    	; 0x26d8 <gc_execute_block+0x1d6>
    25f8:	c9 c0       	rjmp	.+402    	; 0x278c <gc_execute_block+0x28a>
    25fa:	ae 8d       	ldd	r26, Y+30	; 0x1e
    25fc:	bf 8d       	ldd	r27, Y+31	; 0x1f
    25fe:	a2 30       	cpi	r26, 0x02	; 2
    2600:	b1 05       	cpc	r27, r1
    2602:	09 f4       	brne	.+2      	; 0x2606 <gc_execute_block+0x104>
    2604:	76 c0       	rjmp	.+236    	; 0x26f2 <gc_execute_block+0x1f0>
    2606:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2608:	3f 8d       	ldd	r19, Y+31	; 0x1f
    260a:	23 30       	cpi	r18, 0x03	; 3
    260c:	31 05       	cpc	r19, r1
    260e:	09 f4       	brne	.+2      	; 0x2612 <gc_execute_block+0x110>
    2610:	77 c0       	rjmp	.+238    	; 0x2700 <gc_execute_block+0x1fe>
    2612:	bc c0       	rjmp	.+376    	; 0x278c <gc_execute_block+0x28a>
    2614:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2616:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2618:	82 31       	cpi	r24, 0x12	; 18
    261a:	91 05       	cpc	r25, r1
    261c:	09 f4       	brne	.+2      	; 0x2620 <gc_execute_block+0x11e>
    261e:	81 c0       	rjmp	.+258    	; 0x2722 <gc_execute_block+0x220>
    2620:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2622:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2624:	a3 31       	cpi	r26, 0x13	; 19
    2626:	b1 05       	cpc	r27, r1
    2628:	3c f4       	brge	.+14     	; 0x2638 <gc_execute_block+0x136>
    262a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    262c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    262e:	21 31       	cpi	r18, 0x11	; 17
    2630:	31 05       	cpc	r19, r1
    2632:	09 f4       	brne	.+2      	; 0x2636 <gc_execute_block+0x134>
    2634:	70 c0       	rjmp	.+224    	; 0x2716 <gc_execute_block+0x214>
    2636:	aa c0       	rjmp	.+340    	; 0x278c <gc_execute_block+0x28a>
    2638:	8e 8d       	ldd	r24, Y+30	; 0x1e
    263a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    263c:	83 31       	cpi	r24, 0x13	; 19
    263e:	91 05       	cpc	r25, r1
    2640:	09 f4       	brne	.+2      	; 0x2644 <gc_execute_block+0x142>
    2642:	75 c0       	rjmp	.+234    	; 0x272e <gc_execute_block+0x22c>
    2644:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2646:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2648:	a4 31       	cpi	r26, 0x14	; 20
    264a:	b1 05       	cpc	r27, r1
    264c:	09 f4       	brne	.+2      	; 0x2650 <gc_execute_block+0x14e>
    264e:	75 c0       	rjmp	.+234    	; 0x273a <gc_execute_block+0x238>
    2650:	9d c0       	rjmp	.+314    	; 0x278c <gc_execute_block+0x28a>
    2652:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2654:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2656:	2a 35       	cpi	r18, 0x5A	; 90
    2658:	31 05       	cpc	r19, r1
    265a:	09 f4       	brne	.+2      	; 0x265e <gc_execute_block+0x15c>
    265c:	85 c0       	rjmp	.+266    	; 0x2768 <gc_execute_block+0x266>
    265e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2660:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2662:	8b 35       	cpi	r24, 0x5B	; 91
    2664:	91 05       	cpc	r25, r1
    2666:	fc f4       	brge	.+62     	; 0x26a6 <gc_execute_block+0x1a4>
    2668:	ae 8d       	ldd	r26, Y+30	; 0x1e
    266a:	bf 8d       	ldd	r27, Y+31	; 0x1f
    266c:	ae 31       	cpi	r26, 0x1E	; 30
    266e:	b1 05       	cpc	r27, r1
    2670:	09 f4       	brne	.+2      	; 0x2674 <gc_execute_block+0x172>
    2672:	6e c0       	rjmp	.+220    	; 0x2750 <gc_execute_block+0x24e>
    2674:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2676:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2678:	2f 31       	cpi	r18, 0x1F	; 31
    267a:	31 05       	cpc	r19, r1
    267c:	3c f4       	brge	.+14     	; 0x268c <gc_execute_block+0x18a>
    267e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2680:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2682:	8c 31       	cpi	r24, 0x1C	; 28
    2684:	91 05       	cpc	r25, r1
    2686:	09 f4       	brne	.+2      	; 0x268a <gc_execute_block+0x188>
    2688:	5f c0       	rjmp	.+190    	; 0x2748 <gc_execute_block+0x246>
    268a:	80 c0       	rjmp	.+256    	; 0x278c <gc_execute_block+0x28a>
    268c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    268e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2690:	a5 33       	cpi	r26, 0x35	; 53
    2692:	b1 05       	cpc	r27, r1
    2694:	09 f4       	brne	.+2      	; 0x2698 <gc_execute_block+0x196>
    2696:	60 c0       	rjmp	.+192    	; 0x2758 <gc_execute_block+0x256>
    2698:	2e 8d       	ldd	r18, Y+30	; 0x1e
    269a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    269c:	20 35       	cpi	r18, 0x50	; 80
    269e:	31 05       	cpc	r19, r1
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <gc_execute_block+0x1a2>
    26a2:	5e c0       	rjmp	.+188    	; 0x2760 <gc_execute_block+0x25e>
    26a4:	73 c0       	rjmp	.+230    	; 0x278c <gc_execute_block+0x28a>
    26a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26aa:	8c 35       	cpi	r24, 0x5C	; 92
    26ac:	91 05       	cpc	r25, r1
    26ae:	09 f4       	brne	.+2      	; 0x26b2 <gc_execute_block+0x1b0>
    26b0:	62 c0       	rjmp	.+196    	; 0x2776 <gc_execute_block+0x274>
    26b2:	ae 8d       	ldd	r26, Y+30	; 0x1e
    26b4:	bf 8d       	ldd	r27, Y+31	; 0x1f
    26b6:	ac 35       	cpi	r26, 0x5C	; 92
    26b8:	b1 05       	cpc	r27, r1
    26ba:	0c f4       	brge	.+2      	; 0x26be <gc_execute_block+0x1bc>
    26bc:	59 c0       	rjmp	.+178    	; 0x2770 <gc_execute_block+0x26e>
    26be:	2e 8d       	ldd	r18, Y+30	; 0x1e
    26c0:	3f 8d       	ldd	r19, Y+31	; 0x1f
    26c2:	2d 35       	cpi	r18, 0x5D	; 93
    26c4:	31 05       	cpc	r19, r1
    26c6:	09 f4       	brne	.+2      	; 0x26ca <gc_execute_block+0x1c8>
    26c8:	5a c0       	rjmp	.+180    	; 0x277e <gc_execute_block+0x27c>
    26ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26cc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26ce:	8e 35       	cpi	r24, 0x5E	; 94
    26d0:	91 05       	cpc	r25, r1
    26d2:	09 f4       	brne	.+2      	; 0x26d6 <gc_execute_block+0x1d4>
    26d4:	58 c0       	rjmp	.+176    	; 0x2786 <gc_execute_block+0x284>
    26d6:	5a c0       	rjmp	.+180    	; 0x278c <gc_execute_block+0x28a>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	80 93 83 21 	sts	0x2183, r24
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    26de:	10 92 39 21 	sts	0x2139, r1
    26e2:	be c0       	rjmp	.+380    	; 0x2860 <gc_execute_block+0x35e>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	80 93 83 21 	sts	0x2183, r24
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	80 93 39 21 	sts	0x2139, r24
    26f0:	b7 c0       	rjmp	.+366    	; 0x2860 <gc_execute_block+0x35e>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	80 93 83 21 	sts	0x2183, r24
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    26f8:	82 e0       	ldi	r24, 0x02	; 2
    26fa:	80 93 39 21 	sts	0x2139, r24
    26fe:	b0 c0       	rjmp	.+352    	; 0x2860 <gc_execute_block+0x35e>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	80 93 83 21 	sts	0x2183, r24
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    2706:	83 e0       	ldi	r24, 0x03	; 3
    2708:	80 93 39 21 	sts	0x2139, r24
    270c:	a9 c0       	rjmp	.+338    	; 0x2860 <gc_execute_block+0x35e>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    270e:	82 e0       	ldi	r24, 0x02	; 2
    2710:	80 93 83 21 	sts	0x2183, r24
    2714:	a5 c0       	rjmp	.+330    	; 0x2860 <gc_execute_block+0x35e>

					case 17: { select_plane(X, Y, Z); break; }
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	61 e0       	ldi	r22, 0x01	; 1
    271a:	42 e0       	ldi	r20, 0x02	; 2
    271c:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <select_plane>
    2720:	9f c0       	rjmp	.+318    	; 0x2860 <gc_execute_block+0x35e>
					case 18: { select_plane(X, Z, Y); break; }
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	62 e0       	ldi	r22, 0x02	; 2
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <select_plane>
    272c:	99 c0       	rjmp	.+306    	; 0x2860 <gc_execute_block+0x35e>
					case 19: { select_plane(Y, Z, X); break; }
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	62 e0       	ldi	r22, 0x02	; 2
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <select_plane>
    2738:	93 c0       	rjmp	.+294    	; 0x2860 <gc_execute_block+0x35e>

					case 20: { gc.inches_mode = TRUE; break; }
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	80 93 3b 21 	sts	0x213B, r24
    2740:	8f c0       	rjmp	.+286    	; 0x2860 <gc_execute_block+0x35e>
					case 21: { gc.inches_mode = FALSE; break; }
    2742:	10 92 3b 21 	sts	0x213B, r1
    2746:	8c c0       	rjmp	.+280    	; 0x2860 <gc_execute_block+0x35e>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    2748:	83 e0       	ldi	r24, 0x03	; 3
    274a:	80 93 83 21 	sts	0x2183, r24
    274e:	88 c0       	rjmp	.+272    	; 0x2860 <gc_execute_block+0x35e>
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    2750:	83 e0       	ldi	r24, 0x03	; 3
    2752:	80 93 83 21 	sts	0x2183, r24
    2756:	84 c0       	rjmp	.+264    	; 0x2860 <gc_execute_block+0x35e>

					case 53: { gc.absolute_override = TRUE; break; }
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	80 93 82 21 	sts	0x2182, r24
    275e:	80 c0       	rjmp	.+256    	; 0x2860 <gc_execute_block+0x35e>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2760:	84 e0       	ldi	r24, 0x04	; 4
    2762:	80 93 39 21 	sts	0x2139, r24
    2766:	7c c0       	rjmp	.+248    	; 0x2860 <gc_execute_block+0x35e>
					case 90: { gc.absolute_mode = TRUE; break; }
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	80 93 3c 21 	sts	0x213C, r24
    276e:	78 c0       	rjmp	.+240    	; 0x2860 <gc_execute_block+0x35e>
					case 91: { gc.absolute_mode = FALSE; break; }
    2770:	10 92 3c 21 	sts	0x213C, r1
    2774:	75 c0       	rjmp	.+234    	; 0x2860 <gc_execute_block+0x35e>
					case 92: { gc.set_origin_mode = TRUE; break; }
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	80 93 3e 21 	sts	0x213E, r24
    277c:	71 c0       	rjmp	.+226    	; 0x2860 <gc_execute_block+0x35e>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	80 93 3a 21 	sts	0x213A, r24
    2784:	6d c0       	rjmp	.+218    	; 0x2860 <gc_execute_block+0x35e>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    2786:	10 92 3a 21 	sts	0x213A, r1
    278a:	6a c0       	rjmp	.+212    	; 0x2860 <gc_execute_block+0x35e>

					default: FAIL(TG_UNSUPPORTED_STATEMENT);
    278c:	8c e0       	ldi	r24, 0x0C	; 12
    278e:	80 93 2e 21 	sts	0x212E, r24
    2792:	66 c0       	rjmp	.+204    	; 0x2860 <gc_execute_block+0x35e>
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    2794:	80 91 30 21 	lds	r24, 0x2130
    2798:	90 91 31 21 	lds	r25, 0x2131
    279c:	a0 91 32 21 	lds	r26, 0x2132
    27a0:	b0 91 33 21 	lds	r27, 0x2133
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 9c 5b 	call	0xb738	; 0xb738 <__fixsfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	8c 8f       	std	Y+28, r24	; 0x1c
    27b2:	9d 8f       	std	Y+29, r25	; 0x1d
    27b4:	ac 8d       	ldd	r26, Y+28	; 0x1c
    27b6:	bd 8d       	ldd	r27, Y+29	; 0x1d
    27b8:	a3 30       	cpi	r26, 0x03	; 3
    27ba:	b1 05       	cpc	r27, r1
    27bc:	61 f1       	breq	.+88     	; 0x2816 <gc_execute_block+0x314>
    27be:	2c 8d       	ldd	r18, Y+28	; 0x1c
    27c0:	3d 8d       	ldd	r19, Y+29	; 0x1d
    27c2:	24 30       	cpi	r18, 0x04	; 4
    27c4:	31 05       	cpc	r19, r1
    27c6:	54 f4       	brge	.+20     	; 0x27dc <gc_execute_block+0x2da>
    27c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27ca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27cc:	99 23       	and	r25, r25
    27ce:	74 f1       	brlt	.+92     	; 0x282c <gc_execute_block+0x32a>
    27d0:	ac 8d       	ldd	r26, Y+28	; 0x1c
    27d2:	bd 8d       	ldd	r27, Y+29	; 0x1d
    27d4:	a2 30       	cpi	r26, 0x02	; 2
    27d6:	b1 05       	cpc	r27, r1
    27d8:	b4 f0       	brlt	.+44     	; 0x2806 <gc_execute_block+0x304>
    27da:	19 c0       	rjmp	.+50     	; 0x280e <gc_execute_block+0x30c>
    27dc:	2c 8d       	ldd	r18, Y+28	; 0x1c
    27de:	3d 8d       	ldd	r19, Y+29	; 0x1d
    27e0:	25 30       	cpi	r18, 0x05	; 5
    27e2:	31 05       	cpc	r19, r1
    27e4:	01 f1       	breq	.+64     	; 0x2826 <gc_execute_block+0x324>
    27e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27e8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27ea:	85 30       	cpi	r24, 0x05	; 5
    27ec:	91 05       	cpc	r25, r1
    27ee:	bc f0       	brlt	.+46     	; 0x281e <gc_execute_block+0x31c>
    27f0:	ac 8d       	ldd	r26, Y+28	; 0x1c
    27f2:	bd 8d       	ldd	r27, Y+29	; 0x1d
    27f4:	ae 31       	cpi	r26, 0x1E	; 30
    27f6:	b1 05       	cpc	r27, r1
    27f8:	51 f0       	breq	.+20     	; 0x280e <gc_execute_block+0x30c>
    27fa:	2c 8d       	ldd	r18, Y+28	; 0x1c
    27fc:	3d 8d       	ldd	r19, Y+29	; 0x1d
    27fe:	2c 33       	cpi	r18, 0x3C	; 60
    2800:	31 05       	cpc	r19, r1
    2802:	29 f0       	breq	.+10     	; 0x280e <gc_execute_block+0x30c>
    2804:	13 c0       	rjmp	.+38     	; 0x282c <gc_execute_block+0x32a>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	80 93 38 21 	sts	0x2138, r24
    280c:	29 c0       	rjmp	.+82     	; 0x2860 <gc_execute_block+0x35e>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    280e:	82 e0       	ldi	r24, 0x02	; 2
    2810:	80 93 38 21 	sts	0x2138, r24
    2814:	25 c0       	rjmp	.+74     	; 0x2860 <gc_execute_block+0x35e>
					case 3: gc.spindle_direction = 1; break;
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	80 93 7f 21 	sts	0x217F, r24
    281c:	21 c0       	rjmp	.+66     	; 0x2860 <gc_execute_block+0x35e>
					case 4: gc.spindle_direction = -1; break;
    281e:	8f ef       	ldi	r24, 0xFF	; 255
    2820:	80 93 7f 21 	sts	0x217F, r24
    2824:	1d c0       	rjmp	.+58     	; 0x2860 <gc_execute_block+0x35e>
					case 5: gc.spindle_direction = 0; break;
    2826:	10 92 7f 21 	sts	0x217F, r1
    282a:	1a c0       	rjmp	.+52     	; 0x2860 <gc_execute_block+0x35e>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    282c:	8c e0       	ldi	r24, 0x0C	; 12
    282e:	80 93 2e 21 	sts	0x212E, r24
    2832:	16 c0       	rjmp	.+44     	; 0x2860 <gc_execute_block+0x35e>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    2834:	80 91 30 21 	lds	r24, 0x2130
    2838:	90 91 31 21 	lds	r25, 0x2131
    283c:	a0 91 32 21 	lds	r26, 0x2132
    2840:	b0 91 33 21 	lds	r27, 0x2133
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	0e 94 9d 5e 	call	0xbd3a	; 0xbd3a <trunc>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	0e 94 a1 5b 	call	0xb742	; 0xb742 <__fixunssfsi>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	80 93 7e 21 	sts	0x217E, r24
		}
		if(gc.status) {
    2860:	80 91 2e 21 	lds	r24, 0x212E
    2864:	88 23       	and	r24, r24
    2866:	91 f4       	brne	.+36     	; 0x288c <gc_execute_block+0x38a>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2868:	8f e2       	ldi	r24, 0x2F	; 47
    286a:	91 e2       	ldi	r25, 0x21	; 33
    286c:	20 e3       	ldi	r18, 0x30	; 48
    286e:	31 e2       	ldi	r19, 0x21	; 33
    2870:	44 e3       	ldi	r20, 0x34	; 52
    2872:	51 e2       	ldi	r21, 0x21	; 33
    2874:	eb 81       	ldd	r30, Y+3	; 0x03
    2876:	fc 81       	ldd	r31, Y+4	; 0x04
    2878:	b9 01       	movw	r22, r18
    287a:	9f 01       	movw	r18, r30
    287c:	fe 01       	movw	r30, r28
    287e:	31 96       	adiw	r30, 0x01	; 1
    2880:	8f 01       	movw	r16, r30
    2882:	0e 94 ab 11 	call	0x2356	; 0x2356 <_gc_next_statement>
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	09 f0       	breq	.+2      	; 0x288c <gc_execute_block+0x38a>
    288a:	67 ce       	rjmp	.-818    	; 0x255a <gc_execute_block+0x58>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    288c:	80 91 2e 21 	lds	r24, 0x212E
    2890:	88 23       	and	r24, r24
    2892:	21 f0       	breq	.+8      	; 0x289c <gc_execute_block+0x39a>
		return(gc.status); 
    2894:	30 91 2e 21 	lds	r19, 0x212E
    2898:	3b 8f       	std	Y+27, r19	; 0x1b
    289a:	49 c2       	rjmp	.+1170   	; 0x2d2e <gc_execute_block+0x82c>
	}

	i = 0;
    289c:	19 82       	std	Y+1, r1	; 0x01
    289e:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    28a0:	8f e6       	ldi	r24, 0x6F	; 111
    28a2:	91 e2       	ldi	r25, 0x21	; 33
    28a4:	60 e0       	ldi	r22, 0x00	; 0
    28a6:	70 e0       	ldi	r23, 0x00	; 0
    28a8:	4c e0       	ldi	r20, 0x0C	; 12
    28aa:	50 e0       	ldi	r21, 0x00	; 0
    28ac:	0e 94 d0 61 	call	0xc3a0	; 0xc3a0 <memset>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    28b0:	83 e6       	ldi	r24, 0x63	; 99
    28b2:	91 e2       	ldi	r25, 0x21	; 33
    28b4:	27 e5       	ldi	r18, 0x57	; 87
    28b6:	31 e2       	ldi	r19, 0x21	; 33
    28b8:	b9 01       	movw	r22, r18
    28ba:	4c e0       	ldi	r20, 0x0C	; 12
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	0e 94 c7 61 	call	0xc38e	; 0xc38e <memcpy>
    28c2:	4c c1       	rjmp	.+664    	; 0x2b5c <gc_execute_block+0x65a>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    28c4:	80 91 30 21 	lds	r24, 0x2130
    28c8:	90 91 31 21 	lds	r25, 0x2131
    28cc:	a0 91 32 21 	lds	r26, 0x2132
    28d0:	b0 91 33 21 	lds	r27, 0x2133
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 01 11 	call	0x2202	; 0x2202 <to_millimeters>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	80 93 4f 21 	sts	0x214F, r24
    28e4:	90 93 50 21 	sts	0x2150, r25
    28e8:	a0 93 51 21 	sts	0x2151, r26
    28ec:	b0 93 52 21 	sts	0x2152, r27
		switch(gc.letter) {
    28f0:	80 91 2f 21 	lds	r24, 0x212F
    28f4:	a8 2f       	mov	r26, r24
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	a9 8f       	std	Y+25, r26	; 0x19
    28fa:	ba 8f       	std	Y+26, r27	; 0x1a
    28fc:	29 8d       	ldd	r18, Y+25	; 0x19
    28fe:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2900:	20 35       	cpi	r18, 0x50	; 80
    2902:	31 05       	cpc	r19, r1
    2904:	09 f4       	brne	.+2      	; 0x2908 <gc_execute_block+0x406>
    2906:	7e c0       	rjmp	.+252    	; 0x2a04 <gc_execute_block+0x502>
    2908:	89 8d       	ldd	r24, Y+25	; 0x19
    290a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    290c:	81 35       	cpi	r24, 0x51	; 81
    290e:	91 05       	cpc	r25, r1
    2910:	a4 f4       	brge	.+40     	; 0x293a <gc_execute_block+0x438>
    2912:	a9 8d       	ldd	r26, Y+25	; 0x19
    2914:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2916:	a6 34       	cpi	r26, 0x46	; 70
    2918:	b1 05       	cpc	r27, r1
    291a:	51 f1       	breq	.+84     	; 0x2970 <gc_execute_block+0x46e>
    291c:	29 8d       	ldd	r18, Y+25	; 0x19
    291e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2920:	26 34       	cpi	r18, 0x46	; 70
    2922:	31 05       	cpc	r19, r1
    2924:	0c f4       	brge	.+2      	; 0x2928 <gc_execute_block+0x426>
    2926:	1a c1       	rjmp	.+564    	; 0x2b5c <gc_execute_block+0x65a>
    2928:	89 8d       	ldd	r24, Y+25	; 0x19
    292a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    292c:	89 54       	subi	r24, 0x49	; 73
    292e:	90 40       	sbci	r25, 0x00	; 0
    2930:	83 30       	cpi	r24, 0x03	; 3
    2932:	91 05       	cpc	r25, r1
    2934:	08 f0       	brcs	.+2      	; 0x2938 <gc_execute_block+0x436>
    2936:	12 c1       	rjmp	.+548    	; 0x2b5c <gc_execute_block+0x65a>
    2938:	4b c0       	rjmp	.+150    	; 0x29d0 <gc_execute_block+0x4ce>
    293a:	89 8d       	ldd	r24, Y+25	; 0x19
    293c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    293e:	83 35       	cpi	r24, 0x53	; 83
    2940:	91 05       	cpc	r25, r1
    2942:	09 f4       	brne	.+2      	; 0x2946 <gc_execute_block+0x444>
    2944:	84 c0       	rjmp	.+264    	; 0x2a4e <gc_execute_block+0x54c>
    2946:	a9 8d       	ldd	r26, Y+25	; 0x19
    2948:	ba 8d       	ldd	r27, Y+26	; 0x1a
    294a:	a4 35       	cpi	r26, 0x54	; 84
    294c:	b1 05       	cpc	r27, r1
    294e:	3c f4       	brge	.+14     	; 0x295e <gc_execute_block+0x45c>
    2950:	29 8d       	ldd	r18, Y+25	; 0x19
    2952:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2954:	22 35       	cpi	r18, 0x52	; 82
    2956:	31 05       	cpc	r19, r1
    2958:	09 f4       	brne	.+2      	; 0x295c <gc_execute_block+0x45a>
    295a:	65 c0       	rjmp	.+202    	; 0x2a26 <gc_execute_block+0x524>
    295c:	ff c0       	rjmp	.+510    	; 0x2b5c <gc_execute_block+0x65a>
    295e:	89 8d       	ldd	r24, Y+25	; 0x19
    2960:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2962:	88 55       	subi	r24, 0x58	; 88
    2964:	90 40       	sbci	r25, 0x00	; 0
    2966:	83 30       	cpi	r24, 0x03	; 3
    2968:	91 05       	cpc	r25, r1
    296a:	08 f0       	brcs	.+2      	; 0x296e <gc_execute_block+0x46c>
    296c:	f7 c0       	rjmp	.+494    	; 0x2b5c <gc_execute_block+0x65a>
    296e:	82 c0       	rjmp	.+260    	; 0x2a74 <gc_execute_block+0x572>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    2970:	80 91 3a 21 	lds	r24, 0x213A
    2974:	88 23       	and	r24, r24
    2976:	89 f0       	breq	.+34     	; 0x299a <gc_execute_block+0x498>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    2978:	80 91 4f 21 	lds	r24, 0x214F
    297c:	90 91 50 21 	lds	r25, 0x2150
    2980:	a0 91 51 21 	lds	r26, 0x2151
    2984:	b0 91 52 21 	lds	r27, 0x2152
    2988:	80 93 53 21 	sts	0x2153, r24
    298c:	90 93 54 21 	sts	0x2154, r25
    2990:	a0 93 55 21 	sts	0x2155, r26
    2994:	b0 93 56 21 	sts	0x2156, r27
    2998:	e1 c0       	rjmp	.+450    	; 0x2b5c <gc_execute_block+0x65a>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    299a:	80 91 4f 21 	lds	r24, 0x214F
    299e:	90 91 50 21 	lds	r25, 0x2150
    29a2:	a0 91 51 21 	lds	r26, 0x2151
    29a6:	b0 91 52 21 	lds	r27, 0x2152
    29aa:	bc 01       	movw	r22, r24
    29ac:	cd 01       	movw	r24, r26
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e7       	ldi	r20, 0x70	; 112
    29b4:	52 e4       	ldi	r21, 0x42	; 66
    29b6:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	80 93 47 21 	sts	0x2147, r24
    29c2:	90 93 48 21 	sts	0x2148, r25
    29c6:	a0 93 49 21 	sts	0x2149, r26
    29ca:	b0 93 4a 21 	sts	0x214A, r27
    29ce:	c6 c0       	rjmp	.+396    	; 0x2b5c <gc_execute_block+0x65a>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    29d0:	80 91 2f 21 	lds	r24, 0x212F
    29d4:	88 2f       	mov	r24, r24
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	89 54       	subi	r24, 0x49	; 73
    29da:	90 40       	sbci	r25, 0x00	; 0
    29dc:	20 91 4f 21 	lds	r18, 0x214F
    29e0:	30 91 50 21 	lds	r19, 0x2150
    29e4:	40 91 51 21 	lds	r20, 0x2151
    29e8:	50 91 52 21 	lds	r21, 0x2152
    29ec:	88 0f       	add	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	88 0f       	add	r24, r24
    29f2:	99 1f       	adc	r25, r25
    29f4:	fc 01       	movw	r30, r24
    29f6:	e1 59       	subi	r30, 0x91	; 145
    29f8:	fe 4d       	sbci	r31, 0xDE	; 222
    29fa:	20 83       	st	Z, r18
    29fc:	31 83       	std	Z+1, r19	; 0x01
    29fe:	42 83       	std	Z+2, r20	; 0x02
    2a00:	53 83       	std	Z+3, r21	; 0x03
    2a02:	ac c0       	rjmp	.+344    	; 0x2b5c <gc_execute_block+0x65a>
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
    2a04:	80 91 30 21 	lds	r24, 0x2130
    2a08:	90 91 31 21 	lds	r25, 0x2131
    2a0c:	a0 91 32 21 	lds	r26, 0x2132
    2a10:	b0 91 33 21 	lds	r27, 0x2133
    2a14:	80 93 3f 21 	sts	0x213F, r24
    2a18:	90 93 40 21 	sts	0x2140, r25
    2a1c:	a0 93 41 21 	sts	0x2141, r26
    2a20:	b0 93 42 21 	sts	0x2142, r27
    2a24:	9b c0       	rjmp	.+310    	; 0x2b5c <gc_execute_block+0x65a>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    2a26:	80 91 4f 21 	lds	r24, 0x214F
    2a2a:	90 91 50 21 	lds	r25, 0x2150
    2a2e:	a0 91 51 21 	lds	r26, 0x2151
    2a32:	b0 91 52 21 	lds	r27, 0x2152
    2a36:	80 93 43 21 	sts	0x2143, r24
    2a3a:	90 93 44 21 	sts	0x2144, r25
    2a3e:	a0 93 45 21 	sts	0x2145, r26
    2a42:	b0 93 46 21 	sts	0x2146, r27
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	80 93 3d 21 	sts	0x213D, r24
    2a4c:	87 c0       	rjmp	.+270    	; 0x2b5c <gc_execute_block+0x65a>
			case 'S': gc.spindle_speed = gc.value; break;
    2a4e:	80 91 30 21 	lds	r24, 0x2130
    2a52:	90 91 31 21 	lds	r25, 0x2131
    2a56:	a0 91 32 21 	lds	r26, 0x2132
    2a5a:	b0 91 33 21 	lds	r27, 0x2133
    2a5e:	bc 01       	movw	r22, r24
    2a60:	cd 01       	movw	r24, r26
    2a62:	0e 94 9c 5b 	call	0xb738	; 0xb738 <__fixsfsi>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	80 93 80 21 	sts	0x2180, r24
    2a6e:	90 93 81 21 	sts	0x2181, r25
    2a72:	74 c0       	rjmp	.+232    	; 0x2b5c <gc_execute_block+0x65a>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    2a74:	80 91 3e 21 	lds	r24, 0x213E
    2a78:	88 23       	and	r24, r24
    2a7a:	d1 f0       	breq	.+52     	; 0x2ab0 <gc_execute_block+0x5ae>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    2a7c:	80 91 2f 21 	lds	r24, 0x212F
    2a80:	88 2f       	mov	r24, r24
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	88 55       	subi	r24, 0x58	; 88
    2a86:	90 40       	sbci	r25, 0x00	; 0
    2a88:	20 91 4f 21 	lds	r18, 0x214F
    2a8c:	30 91 50 21 	lds	r19, 0x2150
    2a90:	40 91 51 21 	lds	r20, 0x2151
    2a94:	50 91 52 21 	lds	r21, 0x2152
    2a98:	88 0f       	add	r24, r24
    2a9a:	99 1f       	adc	r25, r25
    2a9c:	88 0f       	add	r24, r24
    2a9e:	99 1f       	adc	r25, r25
    2aa0:	fc 01       	movw	r30, r24
    2aa2:	e9 5a       	subi	r30, 0xA9	; 169
    2aa4:	fe 4d       	sbci	r31, 0xDE	; 222
    2aa6:	20 83       	st	Z, r18
    2aa8:	31 83       	std	Z+1, r19	; 0x01
    2aaa:	42 83       	std	Z+2, r20	; 0x02
    2aac:	53 83       	std	Z+3, r21	; 0x03
    2aae:	56 c0       	rjmp	.+172    	; 0x2b5c <gc_execute_block+0x65a>
				} else if (gc.absolute_mode || gc.absolute_override) {
    2ab0:	80 91 3c 21 	lds	r24, 0x213C
    2ab4:	88 23       	and	r24, r24
    2ab6:	21 f4       	brne	.+8      	; 0x2ac0 <gc_execute_block+0x5be>
    2ab8:	80 91 82 21 	lds	r24, 0x2182
    2abc:	88 23       	and	r24, r24
    2abe:	d1 f0       	breq	.+52     	; 0x2af4 <gc_execute_block+0x5f2>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    2ac0:	80 91 2f 21 	lds	r24, 0x212F
    2ac4:	88 2f       	mov	r24, r24
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	88 55       	subi	r24, 0x58	; 88
    2aca:	90 40       	sbci	r25, 0x00	; 0
    2acc:	20 91 4f 21 	lds	r18, 0x214F
    2ad0:	30 91 50 21 	lds	r19, 0x2150
    2ad4:	40 91 51 21 	lds	r20, 0x2151
    2ad8:	50 91 52 21 	lds	r21, 0x2152
    2adc:	88 0f       	add	r24, r24
    2ade:	99 1f       	adc	r25, r25
    2ae0:	88 0f       	add	r24, r24
    2ae2:	99 1f       	adc	r25, r25
    2ae4:	fc 01       	movw	r30, r24
    2ae6:	ed 59       	subi	r30, 0x9D	; 157
    2ae8:	fe 4d       	sbci	r31, 0xDE	; 222
    2aea:	20 83       	st	Z, r18
    2aec:	31 83       	std	Z+1, r19	; 0x01
    2aee:	42 83       	std	Z+2, r20	; 0x02
    2af0:	53 83       	std	Z+3, r21	; 0x03
    2af2:	34 c0       	rjmp	.+104    	; 0x2b5c <gc_execute_block+0x65a>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    2af4:	80 91 2f 21 	lds	r24, 0x212F
    2af8:	88 2f       	mov	r24, r24
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	8c 01       	movw	r16, r24
    2afe:	08 55       	subi	r16, 0x58	; 88
    2b00:	10 40       	sbci	r17, 0x00	; 0
    2b02:	80 91 2f 21 	lds	r24, 0x212F
    2b06:	88 2f       	mov	r24, r24
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	88 55       	subi	r24, 0x58	; 88
    2b0c:	90 40       	sbci	r25, 0x00	; 0
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	88 0f       	add	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	fc 01       	movw	r30, r24
    2b18:	ed 59       	subi	r30, 0x9D	; 157
    2b1a:	fe 4d       	sbci	r31, 0xDE	; 222
    2b1c:	80 81       	ld	r24, Z
    2b1e:	91 81       	ldd	r25, Z+1	; 0x01
    2b20:	a2 81       	ldd	r26, Z+2	; 0x02
    2b22:	b3 81       	ldd	r27, Z+3	; 0x03
    2b24:	20 91 4f 21 	lds	r18, 0x214F
    2b28:	30 91 50 21 	lds	r19, 0x2150
    2b2c:	40 91 51 21 	lds	r20, 0x2151
    2b30:	50 91 52 21 	lds	r21, 0x2152
    2b34:	bc 01       	movw	r22, r24
    2b36:	cd 01       	movw	r24, r26
    2b38:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <__addsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	9c 01       	movw	r18, r24
    2b42:	ad 01       	movw	r20, r26
    2b44:	c8 01       	movw	r24, r16
    2b46:	88 0f       	add	r24, r24
    2b48:	99 1f       	adc	r25, r25
    2b4a:	88 0f       	add	r24, r24
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	fc 01       	movw	r30, r24
    2b50:	ed 59       	subi	r30, 0x9D	; 157
    2b52:	fe 4d       	sbci	r31, 0xDE	; 222
    2b54:	20 83       	st	Z, r18
    2b56:	31 83       	std	Z+1, r19	; 0x01
    2b58:	42 83       	std	Z+2, r20	; 0x02
    2b5a:	53 83       	std	Z+3, r21	; 0x03
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2b5c:	8f e2       	ldi	r24, 0x2F	; 47
    2b5e:	91 e2       	ldi	r25, 0x21	; 33
    2b60:	20 e3       	ldi	r18, 0x30	; 48
    2b62:	31 e2       	ldi	r19, 0x21	; 33
    2b64:	44 e3       	ldi	r20, 0x34	; 52
    2b66:	51 e2       	ldi	r21, 0x21	; 33
    2b68:	eb 81       	ldd	r30, Y+3	; 0x03
    2b6a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b6c:	b9 01       	movw	r22, r18
    2b6e:	9f 01       	movw	r18, r30
    2b70:	fe 01       	movw	r30, r28
    2b72:	31 96       	adiw	r30, 0x01	; 1
    2b74:	8f 01       	movw	r16, r30
    2b76:	0e 94 ab 11 	call	0x2356	; 0x2356 <_gc_next_statement>
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	09 f0       	breq	.+2      	; 0x2b80 <gc_execute_block+0x67e>
    2b7e:	a2 ce       	rjmp	.-700    	; 0x28c4 <gc_execute_block+0x3c2>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    2b80:	80 91 2e 21 	lds	r24, 0x212E
    2b84:	88 23       	and	r24, r24
    2b86:	21 f0       	breq	.+8      	; 0x2b90 <gc_execute_block+0x68e>
		return(gc.status); 
    2b88:	30 91 2e 21 	lds	r19, 0x212E
    2b8c:	3b 8f       	std	Y+27, r19	; 0x1b
    2b8e:	cf c0       	rjmp	.+414    	; 0x2d2e <gc_execute_block+0x82c>
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    2b90:	80 91 7f 21 	lds	r24, 0x217F
    2b94:	88 23       	and	r24, r24
    2b96:	a9 f0       	breq	.+42     	; 0x2bc2 <gc_execute_block+0x6c0>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    2b98:	80 91 7f 21 	lds	r24, 0x217F
    2b9c:	68 2f       	mov	r22, r24
    2b9e:	77 27       	eor	r23, r23
    2ba0:	67 fd       	sbrc	r22, 7
    2ba2:	70 95       	com	r23
    2ba4:	80 91 80 21 	lds	r24, 0x2180
    2ba8:	90 91 81 21 	lds	r25, 0x2181
    2bac:	9c 01       	movw	r18, r24
    2bae:	44 27       	eor	r20, r20
    2bb0:	37 fd       	sbrc	r19, 7
    2bb2:	40 95       	com	r20
    2bb4:	54 2f       	mov	r21, r20
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	ba 01       	movw	r22, r20
    2bba:	a9 01       	movw	r20, r18
    2bbc:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <spindle_run>
    2bc0:	02 c0       	rjmp	.+4      	; 0x2bc6 <gc_execute_block+0x6c4>
	} else {
		spindle_stop();
    2bc2:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    2bc6:	80 91 83 21 	lds	r24, 0x2183
    2bca:	a8 2f       	mov	r26, r24
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	af 8b       	std	Y+23, r26	; 0x17
    2bd0:	b8 8f       	std	Y+24, r27	; 0x18
    2bd2:	2f 89       	ldd	r18, Y+23	; 0x17
    2bd4:	38 8d       	ldd	r19, Y+24	; 0x18
    2bd6:	21 30       	cpi	r18, 0x01	; 1
    2bd8:	31 05       	cpc	r19, r1
    2bda:	09 f1       	breq	.+66     	; 0x2c1e <gc_execute_block+0x71c>
    2bdc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bde:	98 8d       	ldd	r25, Y+24	; 0x18
    2be0:	82 30       	cpi	r24, 0x02	; 2
    2be2:	91 05       	cpc	r25, r1
    2be4:	0c f4       	brge	.+2      	; 0x2be8 <gc_execute_block+0x6e6>
    2be6:	8f c0       	rjmp	.+286    	; 0x2d06 <gc_execute_block+0x804>
    2be8:	af 89       	ldd	r26, Y+23	; 0x17
    2bea:	b8 8d       	ldd	r27, Y+24	; 0x18
    2bec:	a2 30       	cpi	r26, 0x02	; 2
    2bee:	b1 05       	cpc	r27, r1
    2bf0:	49 f0       	breq	.+18     	; 0x2c04 <gc_execute_block+0x702>
    2bf2:	2f 89       	ldd	r18, Y+23	; 0x17
    2bf4:	38 8d       	ldd	r19, Y+24	; 0x18
    2bf6:	23 30       	cpi	r18, 0x03	; 3
    2bf8:	31 05       	cpc	r19, r1
    2bfa:	09 f0       	breq	.+2      	; 0x2bfe <gc_execute_block+0x6fc>
    2bfc:	84 c0       	rjmp	.+264    	; 0x2d06 <gc_execute_block+0x804>
		case NEXT_ACTION_DEFAULT: break;		// nothing to do here
    	case NEXT_ACTION_GO_HOME: mc_go_home(); break;
    2bfe:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <mc_go_home>
    2c02:	81 c0       	rjmp	.+258    	; 0x2d06 <gc_execute_block+0x804>
		case NEXT_ACTION_DWELL: mc_dwell(gc.dwell_time); break;
    2c04:	80 91 3f 21 	lds	r24, 0x213F
    2c08:	90 91 40 21 	lds	r25, 0x2140
    2c0c:	a0 91 41 21 	lds	r26, 0x2141
    2c10:	b0 91 42 21 	lds	r27, 0x2142
    2c14:	bc 01       	movw	r22, r24
    2c16:	cd 01       	movw	r24, r26
    2c18:	0e 94 0f 2f 	call	0x5e1e	; 0x5e1e <mc_dwell>
    2c1c:	74 c0       	rjmp	.+232    	; 0x2d06 <gc_execute_block+0x804>
		case NEXT_ACTION_MOTION: 
			switch (gc.motion_mode) {
    2c1e:	80 91 39 21 	lds	r24, 0x2139
    2c22:	a8 2f       	mov	r26, r24
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	ad 8b       	std	Y+21, r26	; 0x15
    2c28:	be 8b       	std	Y+22, r27	; 0x16
    2c2a:	2d 89       	ldd	r18, Y+21	; 0x15
    2c2c:	3e 89       	ldd	r19, Y+22	; 0x16
    2c2e:	24 30       	cpi	r18, 0x04	; 4
    2c30:	31 05       	cpc	r19, r1
    2c32:	0c f0       	brlt	.+2      	; 0x2c36 <gc_execute_block+0x734>
    2c34:	68 c0       	rjmp	.+208    	; 0x2d06 <gc_execute_block+0x804>
    2c36:	8d 89       	ldd	r24, Y+21	; 0x15
    2c38:	9e 89       	ldd	r25, Y+22	; 0x16
    2c3a:	82 30       	cpi	r24, 0x02	; 2
    2c3c:	91 05       	cpc	r25, r1
    2c3e:	0c f0       	brlt	.+2      	; 0x2c42 <gc_execute_block+0x740>
    2c40:	60 c0       	rjmp	.+192    	; 0x2d02 <gc_execute_block+0x800>
    2c42:	ad 89       	ldd	r26, Y+21	; 0x15
    2c44:	be 89       	ldd	r27, Y+22	; 0x16
    2c46:	bb 23       	and	r27, r27
    2c48:	0c f4       	brge	.+2      	; 0x2c4c <gc_execute_block+0x74a>
    2c4a:	5d c0       	rjmp	.+186    	; 0x2d06 <gc_execute_block+0x804>
				case MOTION_MODE_CANCEL: break;
				case MOTION_MODE_RAPID_LINEAR:
				case MOTION_MODE_LINEAR:
					gc.status = mc_line_nonblock(gc.target[X], gc.target[Y], gc.target[Z], 
    2c4c:	80 91 63 21 	lds	r24, 0x2163
    2c50:	90 91 64 21 	lds	r25, 0x2164
    2c54:	a0 91 65 21 	lds	r26, 0x2165
    2c58:	b0 91 66 21 	lds	r27, 0x2166
    2c5c:	89 8b       	std	Y+17, r24	; 0x11
    2c5e:	9a 8b       	std	Y+18, r25	; 0x12
    2c60:	ab 8b       	std	Y+19, r26	; 0x13
    2c62:	bc 8b       	std	Y+20, r27	; 0x14
    2c64:	80 91 67 21 	lds	r24, 0x2167
    2c68:	90 91 68 21 	lds	r25, 0x2168
    2c6c:	a0 91 69 21 	lds	r26, 0x2169
    2c70:	b0 91 6a 21 	lds	r27, 0x216A
    2c74:	8d 87       	std	Y+13, r24	; 0x0d
    2c76:	9e 87       	std	Y+14, r25	; 0x0e
    2c78:	af 87       	std	Y+15, r26	; 0x0f
    2c7a:	b8 8b       	std	Y+16, r27	; 0x10
    2c7c:	80 91 6b 21 	lds	r24, 0x216B
    2c80:	90 91 6c 21 	lds	r25, 0x216C
    2c84:	a0 91 6d 21 	lds	r26, 0x216D
    2c88:	b0 91 6e 21 	lds	r27, 0x216E
    2c8c:	89 87       	std	Y+9, r24	; 0x09
    2c8e:	9a 87       	std	Y+10, r25	; 0x0a
    2c90:	ab 87       	std	Y+11, r26	; 0x0b
    2c92:	bc 87       	std	Y+12, r27	; 0x0c
    2c94:	80 91 3a 21 	lds	r24, 0x213A
    2c98:	88 23       	and	r24, r24
    2c9a:	69 f0       	breq	.+26     	; 0x2cb6 <gc_execute_block+0x7b4>
    2c9c:	80 91 53 21 	lds	r24, 0x2153
    2ca0:	90 91 54 21 	lds	r25, 0x2154
    2ca4:	a0 91 55 21 	lds	r26, 0x2155
    2ca8:	b0 91 56 21 	lds	r27, 0x2156
    2cac:	8d 83       	std	Y+5, r24	; 0x05
    2cae:	9e 83       	std	Y+6, r25	; 0x06
    2cb0:	af 83       	std	Y+7, r26	; 0x07
    2cb2:	b8 87       	std	Y+8, r27	; 0x08
    2cb4:	0c c0       	rjmp	.+24     	; 0x2cce <gc_execute_block+0x7cc>
    2cb6:	80 91 47 21 	lds	r24, 0x2147
    2cba:	90 91 48 21 	lds	r25, 0x2148
    2cbe:	a0 91 49 21 	lds	r26, 0x2149
    2cc2:	b0 91 4a 21 	lds	r27, 0x214A
    2cc6:	8d 83       	std	Y+5, r24	; 0x05
    2cc8:	9e 83       	std	Y+6, r25	; 0x06
    2cca:	af 83       	std	Y+7, r26	; 0x07
    2ccc:	b8 87       	std	Y+8, r27	; 0x08
    2cce:	80 91 3a 21 	lds	r24, 0x213A
    2cd2:	e8 2f       	mov	r30, r24
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	69 89       	ldd	r22, Y+17	; 0x11
    2cd8:	7a 89       	ldd	r23, Y+18	; 0x12
    2cda:	8b 89       	ldd	r24, Y+19	; 0x13
    2cdc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cde:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ce0:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ce2:	4f 85       	ldd	r20, Y+15	; 0x0f
    2ce4:	58 89       	ldd	r21, Y+16	; 0x10
    2ce6:	e9 84       	ldd	r14, Y+9	; 0x09
    2ce8:	fa 84       	ldd	r15, Y+10	; 0x0a
    2cea:	0b 85       	ldd	r16, Y+11	; 0x0b
    2cec:	1c 85       	ldd	r17, Y+12	; 0x0c
    2cee:	ad 80       	ldd	r10, Y+5	; 0x05
    2cf0:	be 80       	ldd	r11, Y+6	; 0x06
    2cf2:	cf 80       	ldd	r12, Y+7	; 0x07
    2cf4:	d8 84       	ldd	r13, Y+8	; 0x08
    2cf6:	4f 01       	movw	r8, r30
    2cf8:	0e 94 81 25 	call	0x4b02	; 0x4b02 <mc_line_nonblock>
    2cfc:	80 93 2e 21 	sts	0x212E, r24
    2d00:	02 c0       	rjmp	.+4      	; 0x2d06 <gc_execute_block+0x804>
							    				(gc.inverse_feed_rate_mode) ? 
								 				 gc.inverse_feed_rate : gc.feed_rate, 
												 gc.inverse_feed_rate_mode); break;
				case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC: _gc_compute_arc(); break;
    2d02:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <_gc_compute_arc>
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_EAGAIN)) {
    2d06:	80 91 2e 21 	lds	r24, 0x212E
    2d0a:	88 23       	and	r24, r24
    2d0c:	21 f0       	breq	.+8      	; 0x2d16 <gc_execute_block+0x814>
    2d0e:	80 91 2e 21 	lds	r24, 0x212E
    2d12:	81 30       	cpi	r24, 0x01	; 1
    2d14:	49 f4       	brne	.+18     	; 0x2d28 <gc_execute_block+0x826>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2d16:	87 e5       	ldi	r24, 0x57	; 87
    2d18:	91 e2       	ldi	r25, 0x21	; 33
    2d1a:	23 e6       	ldi	r18, 0x63	; 99
    2d1c:	31 e2       	ldi	r19, 0x21	; 33
    2d1e:	b9 01       	movw	r22, r18
    2d20:	4c e0       	ldi	r20, 0x0C	; 12
    2d22:	50 e0       	ldi	r21, 0x00	; 0
    2d24:	0e 94 c7 61 	call	0xc38e	; 0xc38e <memcpy>
	};
	return(gc.status);
    2d28:	90 91 2e 21 	lds	r25, 0x212E
    2d2c:	9b 8f       	std	Y+27, r25	; 0x1b
    2d2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
}
    2d30:	a1 96       	adiw	r28, 0x21	; 33
    2d32:	cd bf       	out	0x3d, r28	; 61
    2d34:	de bf       	out	0x3e, r29	; 62
    2d36:	cf 91       	pop	r28
    2d38:	df 91       	pop	r29
    2d3a:	1f 91       	pop	r17
    2d3c:	0f 91       	pop	r16
    2d3e:	ff 90       	pop	r15
    2d40:	ef 90       	pop	r14
    2d42:	df 90       	pop	r13
    2d44:	cf 90       	pop	r12
    2d46:	bf 90       	pop	r11
    2d48:	af 90       	pop	r10
    2d4a:	9f 90       	pop	r9
    2d4c:	8f 90       	pop	r8
    2d4e:	08 95       	ret

00002d50 <_gc_compute_arc>:
/*
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
    2d50:	df 93       	push	r29
    2d52:	cf 93       	push	r28
    2d54:	0f 92       	push	r0
    2d56:	0f 92       	push	r0
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
	if (gc.radius_mode) {
    2d5c:	80 91 3d 21 	lds	r24, 0x213D
    2d60:	88 23       	and	r24, r24
    2d62:	59 f0       	breq	.+22     	; 0x2d7a <_gc_compute_arc+0x2a>
		if ((_gc_compute_radius_arc() != TG_OK)) {
    2d64:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <_gc_compute_radius_arc>
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	39 f0       	breq	.+14     	; 0x2d7a <_gc_compute_arc+0x2a>
			return (gc.status);
    2d6c:	80 91 2e 21 	lds	r24, 0x212E
    2d70:	28 2f       	mov	r18, r24
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	29 83       	std	Y+1, r18	; 0x01
    2d76:	3a 83       	std	Y+2, r19	; 0x02
    2d78:	04 c0       	rjmp	.+8      	; 0x2d82 <_gc_compute_arc+0x32>
		}
	}
	return (_gc_compute_center_arc());
    2d7a:	0e 94 57 18 	call	0x30ae	; 0x30ae <_gc_compute_center_arc>
    2d7e:	89 83       	std	Y+1, r24	; 0x01
    2d80:	9a 83       	std	Y+2, r25	; 0x02
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2d86:	0f 90       	pop	r0
    2d88:	0f 90       	pop	r0
    2d8a:	cf 91       	pop	r28
    2d8c:	df 91       	pop	r29
    2d8e:	08 95       	ret

00002d90 <_gc_compute_radius_arc>:
 *
 * Compute arc center (offset) from radius. Used to prep for computing an center arc
 */

int _gc_compute_radius_arc()
{
    2d90:	af 92       	push	r10
    2d92:	bf 92       	push	r11
    2d94:	cf 92       	push	r12
    2d96:	df 92       	push	r13
    2d98:	ef 92       	push	r14
    2d9a:	ff 92       	push	r15
    2d9c:	0f 93       	push	r16
    2d9e:	1f 93       	push	r17
    2da0:	df 93       	push	r29
    2da2:	cf 93       	push	r28
    2da4:	cd b7       	in	r28, 0x3d	; 61
    2da6:	de b7       	in	r29, 0x3e	; 62
    2da8:	2e 97       	sbiw	r28, 0x0e	; 14
    2daa:	cd bf       	out	0x3d, r28	; 61
    2dac:	de bf       	out	0x3e, r29	; 62
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    2dae:	80 91 7b 21 	lds	r24, 0x217B
    2db2:	88 2f       	mov	r24, r24
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	88 0f       	add	r24, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	ed 59       	subi	r30, 0x9D	; 157
    2dc2:	fe 4d       	sbci	r31, 0xDE	; 222
    2dc4:	e0 80       	ld	r14, Z
    2dc6:	f1 80       	ldd	r15, Z+1	; 0x01
    2dc8:	02 81       	ldd	r16, Z+2	; 0x02
    2dca:	13 81       	ldd	r17, Z+3	; 0x03
    2dcc:	80 91 7b 21 	lds	r24, 0x217B
    2dd0:	88 2f       	mov	r24, r24
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	88 0f       	add	r24, r24
    2dd6:	99 1f       	adc	r25, r25
    2dd8:	88 0f       	add	r24, r24
    2dda:	99 1f       	adc	r25, r25
    2ddc:	fc 01       	movw	r30, r24
    2dde:	e9 5a       	subi	r30, 0xA9	; 169
    2de0:	fe 4d       	sbci	r31, 0xDE	; 222
    2de2:	20 81       	ld	r18, Z
    2de4:	31 81       	ldd	r19, Z+1	; 0x01
    2de6:	42 81       	ldd	r20, Z+2	; 0x02
    2de8:	53 81       	ldd	r21, Z+3	; 0x03
    2dea:	c8 01       	movw	r24, r16
    2dec:	b7 01       	movw	r22, r14
    2dee:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	89 87       	std	Y+9, r24	; 0x09
    2df8:	9a 87       	std	Y+10, r25	; 0x0a
    2dfa:	ab 87       	std	Y+11, r26	; 0x0b
    2dfc:	bc 87       	std	Y+12, r27	; 0x0c
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    2dfe:	80 91 7c 21 	lds	r24, 0x217C
    2e02:	88 2f       	mov	r24, r24
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	88 0f       	add	r24, r24
    2e08:	99 1f       	adc	r25, r25
    2e0a:	88 0f       	add	r24, r24
    2e0c:	99 1f       	adc	r25, r25
    2e0e:	fc 01       	movw	r30, r24
    2e10:	ed 59       	subi	r30, 0x9D	; 157
    2e12:	fe 4d       	sbci	r31, 0xDE	; 222
    2e14:	e0 80       	ld	r14, Z
    2e16:	f1 80       	ldd	r15, Z+1	; 0x01
    2e18:	02 81       	ldd	r16, Z+2	; 0x02
    2e1a:	13 81       	ldd	r17, Z+3	; 0x03
    2e1c:	80 91 7c 21 	lds	r24, 0x217C
    2e20:	88 2f       	mov	r24, r24
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	88 0f       	add	r24, r24
    2e26:	99 1f       	adc	r25, r25
    2e28:	88 0f       	add	r24, r24
    2e2a:	99 1f       	adc	r25, r25
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	e9 5a       	subi	r30, 0xA9	; 169
    2e30:	fe 4d       	sbci	r31, 0xDE	; 222
    2e32:	20 81       	ld	r18, Z
    2e34:	31 81       	ldd	r19, Z+1	; 0x01
    2e36:	42 81       	ldd	r20, Z+2	; 0x02
    2e38:	53 81       	ldd	r21, Z+3	; 0x03
    2e3a:	c8 01       	movw	r24, r16
    2e3c:	b7 01       	movw	r22, r14
    2e3e:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	8d 83       	std	Y+5, r24	; 0x05
    2e48:	9e 83       	std	Y+6, r25	; 0x06
    2e4a:	af 83       	std	Y+7, r26	; 0x07
    2e4c:	b8 87       	std	Y+8, r27	; 0x08
        
	clear_vector(&gc.offset);
    2e4e:	8f e6       	ldi	r24, 0x6F	; 111
    2e50:	91 e2       	ldi	r25, 0x21	; 33
    2e52:	60 e0       	ldi	r22, 0x00	; 0
    2e54:	70 e0       	ldi	r23, 0x00	; 0
    2e56:	42 e0       	ldi	r20, 0x02	; 2
    2e58:	50 e0       	ldi	r21, 0x00	; 0
    2e5a:	0e 94 d0 61 	call	0xc3a0	; 0xc3a0 <memset>
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    2e5e:	80 91 43 21 	lds	r24, 0x2143
    2e62:	90 91 44 21 	lds	r25, 0x2144
    2e66:	a0 91 45 21 	lds	r26, 0x2145
    2e6a:	b0 91 46 21 	lds	r27, 0x2146
    2e6e:	bc 01       	movw	r22, r24
    2e70:	cd 01       	movw	r24, r26
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	40 e8       	ldi	r20, 0x80	; 128
    2e78:	50 e4       	ldi	r21, 0x40	; 64
    2e7a:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	20 91 43 21 	lds	r18, 0x2143
    2e86:	30 91 44 21 	lds	r19, 0x2144
    2e8a:	40 91 45 21 	lds	r20, 0x2145
    2e8e:	50 91 46 21 	lds	r21, 0x2146
    2e92:	bc 01       	movw	r22, r24
    2e94:	cd 01       	movw	r24, r26
    2e96:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	5c 01       	movw	r10, r24
    2ea0:	6d 01       	movw	r12, r26
    2ea2:	69 85       	ldd	r22, Y+9	; 0x09
    2ea4:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ea6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ea8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2eaa:	29 85       	ldd	r18, Y+9	; 0x09
    2eac:	3a 85       	ldd	r19, Y+10	; 0x0a
    2eae:	4b 85       	ldd	r20, Y+11	; 0x0b
    2eb0:	5c 85       	ldd	r21, Y+12	; 0x0c
    2eb2:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	7c 01       	movw	r14, r24
    2ebc:	8d 01       	movw	r16, r26
    2ebe:	6d 81       	ldd	r22, Y+5	; 0x05
    2ec0:	7e 81       	ldd	r23, Y+6	; 0x06
    2ec2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ec4:	98 85       	ldd	r25, Y+8	; 0x08
    2ec6:	2d 81       	ldd	r18, Y+5	; 0x05
    2ec8:	3e 81       	ldd	r19, Y+6	; 0x06
    2eca:	4f 81       	ldd	r20, Y+7	; 0x07
    2ecc:	58 85       	ldd	r21, Y+8	; 0x08
    2ece:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	9c 01       	movw	r18, r24
    2ed8:	ad 01       	movw	r20, r26
    2eda:	c8 01       	movw	r24, r16
    2edc:	b7 01       	movw	r22, r14
    2ede:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	9c 01       	movw	r18, r24
    2ee8:	ad 01       	movw	r20, r26
    2eea:	c6 01       	movw	r24, r12
    2eec:	b5 01       	movw	r22, r10
    2eee:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	bc 01       	movw	r22, r24
    2ef8:	cd 01       	movw	r24, r26
    2efa:	0e 94 5c 5e 	call	0xbcb8	; 0xbcb8 <sqrt>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	7c 01       	movw	r14, r24
    2f04:	8d 01       	movw	r16, r26
    2f06:	17 fb       	bst	r17, 7
    2f08:	10 95       	com	r17
    2f0a:	17 f9       	bld	r17, 7
    2f0c:	10 95       	com	r17
    2f0e:	89 85       	ldd	r24, Y+9	; 0x09
    2f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f12:	ab 85       	ldd	r26, Y+11	; 0x0b
    2f14:	bc 85       	ldd	r27, Y+12	; 0x0c
    2f16:	2d 81       	ldd	r18, Y+5	; 0x05
    2f18:	3e 81       	ldd	r19, Y+6	; 0x06
    2f1a:	4f 81       	ldd	r20, Y+7	; 0x07
    2f1c:	58 85       	ldd	r21, Y+8	; 0x08
    2f1e:	bc 01       	movw	r22, r24
    2f20:	cd 01       	movw	r24, r26
    2f22:	0e 94 2a 5d 	call	0xba54	; 0xba54 <hypot>
    2f26:	9b 01       	movw	r18, r22
    2f28:	ac 01       	movw	r20, r24
    2f2a:	c8 01       	movw	r24, r16
    2f2c:	b7 01       	movw	r22, r14
    2f2e:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	89 83       	std	Y+1, r24	; 0x01
    2f38:	9a 83       	std	Y+2, r25	; 0x02
    2f3a:	ab 83       	std	Y+3, r26	; 0x03
    2f3c:	bc 83       	std	Y+4, r27	; 0x04

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    2f3e:	69 81       	ldd	r22, Y+1	; 0x01
    2f40:	7a 81       	ldd	r23, Y+2	; 0x02
    2f42:	8b 81       	ldd	r24, Y+3	; 0x03
    2f44:	9c 81       	ldd	r25, Y+4	; 0x04
    2f46:	29 81       	ldd	r18, Y+1	; 0x01
    2f48:	3a 81       	ldd	r19, Y+2	; 0x02
    2f4a:	4b 81       	ldd	r20, Y+3	; 0x03
    2f4c:	5c 81       	ldd	r21, Y+4	; 0x04
    2f4e:	0e 94 a4 5e 	call	0xbd48	; 0xbd48 <__unordsf2>
    2f52:	88 23       	and	r24, r24
    2f54:	51 f0       	breq	.+20     	; 0x2f6a <_gc_compute_radius_arc+0x1da>
		FAIL(TG_FLOATING_POINT_ERROR); 
    2f56:	8e e0       	ldi	r24, 0x0E	; 14
    2f58:	80 93 2e 21 	sts	0x212E, r24
		return(gc.status); 
    2f5c:	80 91 2e 21 	lds	r24, 0x212E
    2f60:	28 2f       	mov	r18, r24
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	2d 87       	std	Y+13, r18	; 0x0d
    2f66:	3e 87       	std	Y+14, r19	; 0x0e
    2f68:	92 c0       	rjmp	.+292    	; 0x308e <_gc_compute_radius_arc+0x2fe>
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2f6a:	80 91 39 21 	lds	r24, 0x2139
    2f6e:	83 30       	cpi	r24, 0x03	; 3
    2f70:	49 f4       	brne	.+18     	; 0x2f84 <_gc_compute_radius_arc+0x1f4>
		h_x2_div_d = -h_x2_div_d;
    2f72:	89 81       	ldd	r24, Y+1	; 0x01
    2f74:	9a 81       	ldd	r25, Y+2	; 0x02
    2f76:	ab 81       	ldd	r26, Y+3	; 0x03
    2f78:	bc 81       	ldd	r27, Y+4	; 0x04
    2f7a:	b0 58       	subi	r27, 0x80	; 128
    2f7c:	89 83       	std	Y+1, r24	; 0x01
    2f7e:	9a 83       	std	Y+2, r25	; 0x02
    2f80:	ab 83       	std	Y+3, r26	; 0x03
    2f82:	bc 83       	std	Y+4, r27	; 0x04
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    2f84:	80 91 43 21 	lds	r24, 0x2143
    2f88:	90 91 44 21 	lds	r25, 0x2144
    2f8c:	a0 91 45 21 	lds	r26, 0x2145
    2f90:	b0 91 46 21 	lds	r27, 0x2146
    2f94:	bc 01       	movw	r22, r24
    2f96:	cd 01       	movw	r24, r26
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e0       	ldi	r20, 0x00	; 0
    2f9e:	50 e0       	ldi	r21, 0x00	; 0
    2fa0:	0e 94 2d 5b 	call	0xb65a	; 0xb65a <__cmpsf2>
    2fa4:	88 23       	and	r24, r24
    2fa6:	4c f4       	brge	.+18     	; 0x2fba <_gc_compute_radius_arc+0x22a>
		h_x2_div_d = -h_x2_div_d; 
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	9a 81       	ldd	r25, Y+2	; 0x02
    2fac:	ab 81       	ldd	r26, Y+3	; 0x03
    2fae:	bc 81       	ldd	r27, Y+4	; 0x04
    2fb0:	b0 58       	subi	r27, 0x80	; 128
    2fb2:	89 83       	std	Y+1, r24	; 0x01
    2fb4:	9a 83       	std	Y+2, r25	; 0x02
    2fb6:	ab 83       	std	Y+3, r26	; 0x03
    2fb8:	bc 83       	std	Y+4, r27	; 0x04
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    2fba:	80 91 7b 21 	lds	r24, 0x217B
    2fbe:	08 2f       	mov	r16, r24
    2fc0:	10 e0       	ldi	r17, 0x00	; 0
    2fc2:	6d 81       	ldd	r22, Y+5	; 0x05
    2fc4:	7e 81       	ldd	r23, Y+6	; 0x06
    2fc6:	8f 81       	ldd	r24, Y+7	; 0x07
    2fc8:	98 85       	ldd	r25, Y+8	; 0x08
    2fca:	29 81       	ldd	r18, Y+1	; 0x01
    2fcc:	3a 81       	ldd	r19, Y+2	; 0x02
    2fce:	4b 81       	ldd	r20, Y+3	; 0x03
    2fd0:	5c 81       	ldd	r21, Y+4	; 0x04
    2fd2:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	9c 01       	movw	r18, r24
    2fdc:	ad 01       	movw	r20, r26
    2fde:	69 85       	ldd	r22, Y+9	; 0x09
    2fe0:	7a 85       	ldd	r23, Y+10	; 0x0a
    2fe2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fe4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fe6:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	bc 01       	movw	r22, r24
    2ff0:	cd 01       	movw	r24, r26
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	50 e4       	ldi	r21, 0x40	; 64
    2ffa:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	9c 01       	movw	r18, r24
    3004:	ad 01       	movw	r20, r26
    3006:	c8 01       	movw	r24, r16
    3008:	88 0f       	add	r24, r24
    300a:	99 1f       	adc	r25, r25
    300c:	88 0f       	add	r24, r24
    300e:	99 1f       	adc	r25, r25
    3010:	fc 01       	movw	r30, r24
    3012:	e1 59       	subi	r30, 0x91	; 145
    3014:	fe 4d       	sbci	r31, 0xDE	; 222
    3016:	20 83       	st	Z, r18
    3018:	31 83       	std	Z+1, r19	; 0x01
    301a:	42 83       	std	Z+2, r20	; 0x02
    301c:	53 83       	std	Z+3, r21	; 0x03
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    301e:	80 91 7c 21 	lds	r24, 0x217C
    3022:	08 2f       	mov	r16, r24
    3024:	10 e0       	ldi	r17, 0x00	; 0
    3026:	69 85       	ldd	r22, Y+9	; 0x09
    3028:	7a 85       	ldd	r23, Y+10	; 0x0a
    302a:	8b 85       	ldd	r24, Y+11	; 0x0b
    302c:	9c 85       	ldd	r25, Y+12	; 0x0c
    302e:	29 81       	ldd	r18, Y+1	; 0x01
    3030:	3a 81       	ldd	r19, Y+2	; 0x02
    3032:	4b 81       	ldd	r20, Y+3	; 0x03
    3034:	5c 81       	ldd	r21, Y+4	; 0x04
    3036:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	bc 01       	movw	r22, r24
    3040:	cd 01       	movw	r24, r26
    3042:	2d 81       	ldd	r18, Y+5	; 0x05
    3044:	3e 81       	ldd	r19, Y+6	; 0x06
    3046:	4f 81       	ldd	r20, Y+7	; 0x07
    3048:	58 85       	ldd	r21, Y+8	; 0x08
    304a:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <__addsf3>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	bc 01       	movw	r22, r24
    3054:	cd 01       	movw	r24, r26
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	40 e0       	ldi	r20, 0x00	; 0
    305c:	50 e4       	ldi	r21, 0x40	; 64
    305e:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	9c 01       	movw	r18, r24
    3068:	ad 01       	movw	r20, r26
    306a:	c8 01       	movw	r24, r16
    306c:	88 0f       	add	r24, r24
    306e:	99 1f       	adc	r25, r25
    3070:	88 0f       	add	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	fc 01       	movw	r30, r24
    3076:	e1 59       	subi	r30, 0x91	; 145
    3078:	fe 4d       	sbci	r31, 0xDE	; 222
    307a:	20 83       	st	Z, r18
    307c:	31 83       	std	Z+1, r19	; 0x01
    307e:	42 83       	std	Z+2, r20	; 0x02
    3080:	53 83       	std	Z+3, r21	; 0x03
	return (gc.status);
    3082:	80 91 2e 21 	lds	r24, 0x212E
    3086:	28 2f       	mov	r18, r24
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	2d 87       	std	Y+13, r18	; 0x0d
    308c:	3e 87       	std	Y+14, r19	; 0x0e
    308e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3090:	9e 85       	ldd	r25, Y+14	; 0x0e
} 
    3092:	2e 96       	adiw	r28, 0x0e	; 14
    3094:	cd bf       	out	0x3d, r28	; 61
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	cf 91       	pop	r28
    309a:	df 91       	pop	r29
    309c:	1f 91       	pop	r17
    309e:	0f 91       	pop	r16
    30a0:	ff 90       	pop	r15
    30a2:	ef 90       	pop	r14
    30a4:	df 90       	pop	r13
    30a6:	cf 90       	pop	r12
    30a8:	bf 90       	pop	r11
    30aa:	af 90       	pop	r10
    30ac:	08 95       	ret

000030ae <_gc_compute_center_arc>:
 *
 * Compute the arc move given I and J (arc center point - found in offset vector).
 */

int _gc_compute_center_arc()
{
    30ae:	6f 92       	push	r6
    30b0:	7f 92       	push	r7
    30b2:	8f 92       	push	r8
    30b4:	9f 92       	push	r9
    30b6:	af 92       	push	r10
    30b8:	bf 92       	push	r11
    30ba:	cf 92       	push	r12
    30bc:	df 92       	push	r13
    30be:	ef 92       	push	r14
    30c0:	ff 92       	push	r15
    30c2:	0f 93       	push	r16
    30c4:	1f 93       	push	r17
    30c6:	df 93       	push	r29
    30c8:	cf 93       	push	r28
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
    30ce:	a0 97       	sbiw	r28, 0x20	; 32
    30d0:	cd bf       	out	0x3d, r28	; 61
    30d2:	de bf       	out	0x3e, r29	; 62
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    30d4:	80 91 7b 21 	lds	r24, 0x217B
    30d8:	88 2f       	mov	r24, r24
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	88 0f       	add	r24, r24
    30de:	99 1f       	adc	r25, r25
    30e0:	88 0f       	add	r24, r24
    30e2:	99 1f       	adc	r25, r25
    30e4:	fc 01       	movw	r30, r24
    30e6:	e1 59       	subi	r30, 0x91	; 145
    30e8:	fe 4d       	sbci	r31, 0xDE	; 222
    30ea:	80 81       	ld	r24, Z
    30ec:	91 81       	ldd	r25, Z+1	; 0x01
    30ee:	a2 81       	ldd	r26, Z+2	; 0x02
    30f0:	b3 81       	ldd	r27, Z+3	; 0x03
    30f2:	7c 01       	movw	r14, r24
    30f4:	8d 01       	movw	r16, r26
    30f6:	17 fb       	bst	r17, 7
    30f8:	10 95       	com	r17
    30fa:	17 f9       	bld	r17, 7
    30fc:	10 95       	com	r17
    30fe:	80 91 7c 21 	lds	r24, 0x217C
    3102:	88 2f       	mov	r24, r24
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	88 0f       	add	r24, r24
    3108:	99 1f       	adc	r25, r25
    310a:	88 0f       	add	r24, r24
    310c:	99 1f       	adc	r25, r25
    310e:	fc 01       	movw	r30, r24
    3110:	e1 59       	subi	r30, 0x91	; 145
    3112:	fe 4d       	sbci	r31, 0xDE	; 222
    3114:	80 81       	ld	r24, Z
    3116:	91 81       	ldd	r25, Z+1	; 0x01
    3118:	a2 81       	ldd	r26, Z+2	; 0x02
    311a:	b3 81       	ldd	r27, Z+3	; 0x03
    311c:	9c 01       	movw	r18, r24
    311e:	ad 01       	movw	r20, r26
    3120:	50 58       	subi	r21, 0x80	; 128
    3122:	c8 01       	movw	r24, r16
    3124:	b7 01       	movw	r22, r14
    3126:	0e 94 35 11 	call	0x226a	; 0x226a <theta>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	89 8b       	std	Y+17, r24	; 0x11
    3130:	9a 8b       	std	Y+18, r25	; 0x12
    3132:	ab 8b       	std	Y+19, r26	; 0x13
    3134:	bc 8b       	std	Y+20, r27	; 0x14
	if(isnan(theta_start)) { 
    3136:	69 89       	ldd	r22, Y+17	; 0x11
    3138:	7a 89       	ldd	r23, Y+18	; 0x12
    313a:	8b 89       	ldd	r24, Y+19	; 0x13
    313c:	9c 89       	ldd	r25, Y+20	; 0x14
    313e:	29 89       	ldd	r18, Y+17	; 0x11
    3140:	3a 89       	ldd	r19, Y+18	; 0x12
    3142:	4b 89       	ldd	r20, Y+19	; 0x13
    3144:	5c 89       	ldd	r21, Y+20	; 0x14
    3146:	0e 94 a4 5e 	call	0xbd48	; 0xbd48 <__unordsf2>
    314a:	88 23       	and	r24, r24
    314c:	51 f0       	breq	.+20     	; 0x3162 <_gc_compute_center_arc+0xb4>
		FAIL(TG_ARC_ERROR); 
    314e:	80 e1       	ldi	r24, 0x10	; 16
    3150:	80 93 2e 21 	sts	0x212E, r24
		return(gc.status); 
    3154:	80 91 2e 21 	lds	r24, 0x212E
    3158:	68 2e       	mov	r6, r24
    315a:	77 24       	eor	r7, r7
    315c:	6f 8e       	std	Y+31, r6	; 0x1f
    315e:	78 a2       	std	Y+32, r7	; 0x20
    3160:	9c c1       	rjmp	.+824    	; 0x349a <_gc_compute_center_arc+0x3ec>
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    3162:	80 91 7b 21 	lds	r24, 0x217B
    3166:	88 2f       	mov	r24, r24
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	88 0f       	add	r24, r24
    316c:	99 1f       	adc	r25, r25
    316e:	88 0f       	add	r24, r24
    3170:	99 1f       	adc	r25, r25
    3172:	fc 01       	movw	r30, r24
    3174:	ed 59       	subi	r30, 0x9D	; 157
    3176:	fe 4d       	sbci	r31, 0xDE	; 222
    3178:	e0 80       	ld	r14, Z
    317a:	f1 80       	ldd	r15, Z+1	; 0x01
    317c:	02 81       	ldd	r16, Z+2	; 0x02
    317e:	13 81       	ldd	r17, Z+3	; 0x03
    3180:	80 91 7b 21 	lds	r24, 0x217B
    3184:	88 2f       	mov	r24, r24
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	88 0f       	add	r24, r24
    318a:	99 1f       	adc	r25, r25
    318c:	88 0f       	add	r24, r24
    318e:	99 1f       	adc	r25, r25
    3190:	fc 01       	movw	r30, r24
    3192:	e1 59       	subi	r30, 0x91	; 145
    3194:	fe 4d       	sbci	r31, 0xDE	; 222
    3196:	20 81       	ld	r18, Z
    3198:	31 81       	ldd	r19, Z+1	; 0x01
    319a:	42 81       	ldd	r20, Z+2	; 0x02
    319c:	53 81       	ldd	r21, Z+3	; 0x03
    319e:	c8 01       	movw	r24, r16
    31a0:	b7 01       	movw	r22, r14
    31a2:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	7c 01       	movw	r14, r24
    31ac:	8d 01       	movw	r16, r26
    31ae:	80 91 7b 21 	lds	r24, 0x217B
    31b2:	88 2f       	mov	r24, r24
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	88 0f       	add	r24, r24
    31b8:	99 1f       	adc	r25, r25
    31ba:	88 0f       	add	r24, r24
    31bc:	99 1f       	adc	r25, r25
    31be:	fc 01       	movw	r30, r24
    31c0:	e9 5a       	subi	r30, 0xA9	; 169
    31c2:	fe 4d       	sbci	r31, 0xDE	; 222
    31c4:	20 81       	ld	r18, Z
    31c6:	31 81       	ldd	r19, Z+1	; 0x01
    31c8:	42 81       	ldd	r20, Z+2	; 0x02
    31ca:	53 81       	ldd	r21, Z+3	; 0x03
    31cc:	c8 01       	movw	r24, r16
    31ce:	b7 01       	movw	r22, r14
    31d0:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	5c 01       	movw	r10, r24
    31da:	6d 01       	movw	r12, r26
    31dc:	80 91 7c 21 	lds	r24, 0x217C
    31e0:	88 2f       	mov	r24, r24
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	88 0f       	add	r24, r24
    31e6:	99 1f       	adc	r25, r25
    31e8:	88 0f       	add	r24, r24
    31ea:	99 1f       	adc	r25, r25
    31ec:	fc 01       	movw	r30, r24
    31ee:	ed 59       	subi	r30, 0x9D	; 157
    31f0:	fe 4d       	sbci	r31, 0xDE	; 222
    31f2:	e0 80       	ld	r14, Z
    31f4:	f1 80       	ldd	r15, Z+1	; 0x01
    31f6:	02 81       	ldd	r16, Z+2	; 0x02
    31f8:	13 81       	ldd	r17, Z+3	; 0x03
    31fa:	80 91 7c 21 	lds	r24, 0x217C
    31fe:	88 2f       	mov	r24, r24
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	88 0f       	add	r24, r24
    3204:	99 1f       	adc	r25, r25
    3206:	88 0f       	add	r24, r24
    3208:	99 1f       	adc	r25, r25
    320a:	fc 01       	movw	r30, r24
    320c:	e1 59       	subi	r30, 0x91	; 145
    320e:	fe 4d       	sbci	r31, 0xDE	; 222
    3210:	20 81       	ld	r18, Z
    3212:	31 81       	ldd	r19, Z+1	; 0x01
    3214:	42 81       	ldd	r20, Z+2	; 0x02
    3216:	53 81       	ldd	r21, Z+3	; 0x03
    3218:	c8 01       	movw	r24, r16
    321a:	b7 01       	movw	r22, r14
    321c:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	7c 01       	movw	r14, r24
    3226:	8d 01       	movw	r16, r26
    3228:	80 91 7c 21 	lds	r24, 0x217C
    322c:	88 2f       	mov	r24, r24
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	88 0f       	add	r24, r24
    3232:	99 1f       	adc	r25, r25
    3234:	88 0f       	add	r24, r24
    3236:	99 1f       	adc	r25, r25
    3238:	fc 01       	movw	r30, r24
    323a:	e9 5a       	subi	r30, 0xA9	; 169
    323c:	fe 4d       	sbci	r31, 0xDE	; 222
    323e:	20 81       	ld	r18, Z
    3240:	31 81       	ldd	r19, Z+1	; 0x01
    3242:	42 81       	ldd	r20, Z+2	; 0x02
    3244:	53 81       	ldd	r21, Z+3	; 0x03
    3246:	c8 01       	movw	r24, r16
    3248:	b7 01       	movw	r22, r14
    324a:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	9c 01       	movw	r18, r24
    3254:	ad 01       	movw	r20, r26
    3256:	c6 01       	movw	r24, r12
    3258:	b5 01       	movw	r22, r10
    325a:	0e 94 35 11 	call	0x226a	; 0x226a <theta>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	8d 87       	std	Y+13, r24	; 0x0d
    3264:	9e 87       	std	Y+14, r25	; 0x0e
    3266:	af 87       	std	Y+15, r26	; 0x0f
    3268:	b8 8b       	std	Y+16, r27	; 0x10
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    326a:	6d 85       	ldd	r22, Y+13	; 0x0d
    326c:	7e 85       	ldd	r23, Y+14	; 0x0e
    326e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3270:	98 89       	ldd	r25, Y+16	; 0x10
    3272:	2d 85       	ldd	r18, Y+13	; 0x0d
    3274:	3e 85       	ldd	r19, Y+14	; 0x0e
    3276:	4f 85       	ldd	r20, Y+15	; 0x0f
    3278:	58 89       	ldd	r21, Y+16	; 0x10
    327a:	0e 94 a4 5e 	call	0xbd48	; 0xbd48 <__unordsf2>
    327e:	88 23       	and	r24, r24
    3280:	51 f0       	breq	.+20     	; 0x3296 <_gc_compute_center_arc+0x1e8>
		FAIL(TG_ARC_ERROR); 
    3282:	80 e1       	ldi	r24, 0x10	; 16
    3284:	80 93 2e 21 	sts	0x212E, r24
		return(gc.status); 
    3288:	80 91 2e 21 	lds	r24, 0x212E
    328c:	88 2e       	mov	r8, r24
    328e:	99 24       	eor	r9, r9
    3290:	8f 8e       	std	Y+31, r8	; 0x1f
    3292:	98 a2       	std	Y+32, r9	; 0x20
    3294:	02 c1       	rjmp	.+516    	; 0x349a <_gc_compute_center_arc+0x3ec>
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    3296:	6d 85       	ldd	r22, Y+13	; 0x0d
    3298:	7e 85       	ldd	r23, Y+14	; 0x0e
    329a:	8f 85       	ldd	r24, Y+15	; 0x0f
    329c:	98 89       	ldd	r25, Y+16	; 0x10
    329e:	29 89       	ldd	r18, Y+17	; 0x11
    32a0:	3a 89       	ldd	r19, Y+18	; 0x12
    32a2:	4b 89       	ldd	r20, Y+19	; 0x13
    32a4:	5c 89       	ldd	r21, Y+20	; 0x14
    32a6:	0e 94 2d 5b 	call	0xb65a	; 0xb65a <__cmpsf2>
    32aa:	88 23       	and	r24, r24
    32ac:	84 f4       	brge	.+32     	; 0x32ce <_gc_compute_center_arc+0x220>
		theta_end += 2*M_PI;
    32ae:	6d 85       	ldd	r22, Y+13	; 0x0d
    32b0:	7e 85       	ldd	r23, Y+14	; 0x0e
    32b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    32b4:	98 89       	ldd	r25, Y+16	; 0x10
    32b6:	2b ed       	ldi	r18, 0xDB	; 219
    32b8:	3f e0       	ldi	r19, 0x0F	; 15
    32ba:	49 ec       	ldi	r20, 0xC9	; 201
    32bc:	50 e4       	ldi	r21, 0x40	; 64
    32be:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <__addsf3>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	8d 87       	std	Y+13, r24	; 0x0d
    32c8:	9e 87       	std	Y+14, r25	; 0x0e
    32ca:	af 87       	std	Y+15, r26	; 0x0f
    32cc:	b8 8b       	std	Y+16, r27	; 0x10
	}
	angular_travel = theta_end - theta_start;
    32ce:	6d 85       	ldd	r22, Y+13	; 0x0d
    32d0:	7e 85       	ldd	r23, Y+14	; 0x0e
    32d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    32d4:	98 89       	ldd	r25, Y+16	; 0x10
    32d6:	29 89       	ldd	r18, Y+17	; 0x11
    32d8:	3a 89       	ldd	r19, Y+18	; 0x12
    32da:	4b 89       	ldd	r20, Y+19	; 0x13
    32dc:	5c 89       	ldd	r21, Y+20	; 0x14
    32de:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	89 87       	std	Y+9, r24	; 0x09
    32e8:	9a 87       	std	Y+10, r25	; 0x0a
    32ea:	ab 87       	std	Y+11, r26	; 0x0b
    32ec:	bc 87       	std	Y+12, r27	; 0x0c

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    32ee:	80 91 39 21 	lds	r24, 0x2139
    32f2:	83 30       	cpi	r24, 0x03	; 3
    32f4:	81 f4       	brne	.+32     	; 0x3316 <_gc_compute_center_arc+0x268>
		angular_travel = angular_travel - 2*M_PI;
    32f6:	69 85       	ldd	r22, Y+9	; 0x09
    32f8:	7a 85       	ldd	r23, Y+10	; 0x0a
    32fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    32fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    32fe:	2b ed       	ldi	r18, 0xDB	; 219
    3300:	3f e0       	ldi	r19, 0x0F	; 15
    3302:	49 ec       	ldi	r20, 0xC9	; 201
    3304:	50 e4       	ldi	r21, 0x40	; 64
    3306:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	89 87       	std	Y+9, r24	; 0x09
    3310:	9a 87       	std	Y+10, r25	; 0x0a
    3312:	ab 87       	std	Y+11, r26	; 0x0b
    3314:	bc 87       	std	Y+12, r27	; 0x0c
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    3316:	80 91 7b 21 	lds	r24, 0x217B
    331a:	88 2f       	mov	r24, r24
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	88 0f       	add	r24, r24
    3320:	99 1f       	adc	r25, r25
    3322:	88 0f       	add	r24, r24
    3324:	99 1f       	adc	r25, r25
    3326:	fc 01       	movw	r30, r24
    3328:	e1 59       	subi	r30, 0x91	; 145
    332a:	fe 4d       	sbci	r31, 0xDE	; 222
    332c:	e0 80       	ld	r14, Z
    332e:	f1 80       	ldd	r15, Z+1	; 0x01
    3330:	02 81       	ldd	r16, Z+2	; 0x02
    3332:	13 81       	ldd	r17, Z+3	; 0x03
    3334:	80 91 7c 21 	lds	r24, 0x217C
    3338:	88 2f       	mov	r24, r24
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	88 0f       	add	r24, r24
    333e:	99 1f       	adc	r25, r25
    3340:	88 0f       	add	r24, r24
    3342:	99 1f       	adc	r25, r25
    3344:	fc 01       	movw	r30, r24
    3346:	e1 59       	subi	r30, 0x91	; 145
    3348:	fe 4d       	sbci	r31, 0xDE	; 222
    334a:	20 81       	ld	r18, Z
    334c:	31 81       	ldd	r19, Z+1	; 0x01
    334e:	42 81       	ldd	r20, Z+2	; 0x02
    3350:	53 81       	ldd	r21, Z+3	; 0x03
    3352:	c8 01       	movw	r24, r16
    3354:	b7 01       	movw	r22, r14
    3356:	0e 94 2a 5d 	call	0xba54	; 0xba54 <hypot>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	8d 83       	std	Y+5, r24	; 0x05
    3360:	9e 83       	std	Y+6, r25	; 0x06
    3362:	af 83       	std	Y+7, r26	; 0x07
    3364:	b8 87       	std	Y+8, r27	; 0x08

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    3366:	80 91 7d 21 	lds	r24, 0x217D
    336a:	88 2f       	mov	r24, r24
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	88 0f       	add	r24, r24
    3370:	99 1f       	adc	r25, r25
    3372:	88 0f       	add	r24, r24
    3374:	99 1f       	adc	r25, r25
    3376:	fc 01       	movw	r30, r24
    3378:	ed 59       	subi	r30, 0x9D	; 157
    337a:	fe 4d       	sbci	r31, 0xDE	; 222
    337c:	e0 80       	ld	r14, Z
    337e:	f1 80       	ldd	r15, Z+1	; 0x01
    3380:	02 81       	ldd	r16, Z+2	; 0x02
    3382:	13 81       	ldd	r17, Z+3	; 0x03
    3384:	80 91 7d 21 	lds	r24, 0x217D
    3388:	88 2f       	mov	r24, r24
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	88 0f       	add	r24, r24
    338e:	99 1f       	adc	r25, r25
    3390:	88 0f       	add	r24, r24
    3392:	99 1f       	adc	r25, r25
    3394:	fc 01       	movw	r30, r24
    3396:	e9 5a       	subi	r30, 0xA9	; 169
    3398:	fe 4d       	sbci	r31, 0xDE	; 222
    339a:	20 81       	ld	r18, Z
    339c:	31 81       	ldd	r19, Z+1	; 0x01
    339e:	42 81       	ldd	r20, Z+2	; 0x02
    33a0:	53 81       	ldd	r21, Z+3	; 0x03
    33a2:	c8 01       	movw	r24, r16
    33a4:	b7 01       	movw	r22, r14
    33a6:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	89 83       	std	Y+1, r24	; 0x01
    33b0:	9a 83       	std	Y+2, r25	; 0x02
    33b2:	ab 83       	std	Y+3, r26	; 0x03
    33b4:	bc 83       	std	Y+4, r27	; 0x04

	// Trace the arc
	gc.status = mc_arc_nonblock(theta_start, 
    33b6:	80 91 7b 21 	lds	r24, 0x217B
    33ba:	28 2f       	mov	r18, r24
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	2d 8f       	std	Y+29, r18	; 0x1d
    33c0:	3e 8f       	std	Y+30, r19	; 0x1e
    33c2:	80 91 7c 21 	lds	r24, 0x217C
    33c6:	a8 2f       	mov	r26, r24
    33c8:	b0 e0       	ldi	r27, 0x00	; 0
    33ca:	ab 8f       	std	Y+27, r26	; 0x1b
    33cc:	bc 8f       	std	Y+28, r27	; 0x1c
    33ce:	80 91 7d 21 	lds	r24, 0x217D
    33d2:	68 2e       	mov	r6, r24
    33d4:	77 24       	eor	r7, r7
    33d6:	69 8e       	std	Y+25, r6	; 0x19
    33d8:	7a 8e       	std	Y+26, r7	; 0x1a
    33da:	80 91 3a 21 	lds	r24, 0x213A
    33de:	88 23       	and	r24, r24
    33e0:	69 f0       	breq	.+26     	; 0x33fc <_gc_compute_center_arc+0x34e>
    33e2:	80 91 53 21 	lds	r24, 0x2153
    33e6:	90 91 54 21 	lds	r25, 0x2154
    33ea:	a0 91 55 21 	lds	r26, 0x2155
    33ee:	b0 91 56 21 	lds	r27, 0x2156
    33f2:	8d 8b       	std	Y+21, r24	; 0x15
    33f4:	9e 8b       	std	Y+22, r25	; 0x16
    33f6:	af 8b       	std	Y+23, r26	; 0x17
    33f8:	b8 8f       	std	Y+24, r27	; 0x18
    33fa:	0c c0       	rjmp	.+24     	; 0x3414 <_gc_compute_center_arc+0x366>
    33fc:	60 90 47 21 	lds	r6, 0x2147
    3400:	70 90 48 21 	lds	r7, 0x2148
    3404:	80 90 49 21 	lds	r8, 0x2149
    3408:	90 90 4a 21 	lds	r9, 0x214A
    340c:	6d 8a       	std	Y+21, r6	; 0x15
    340e:	7e 8a       	std	Y+22, r7	; 0x16
    3410:	8f 8a       	std	Y+23, r8	; 0x17
    3412:	98 8e       	std	Y+24, r9	; 0x18
    3414:	80 91 3a 21 	lds	r24, 0x213A
    3418:	68 2f       	mov	r22, r24
    341a:	70 e0       	ldi	r23, 0x00	; 0
    341c:	2d b7       	in	r18, 0x3d	; 61
    341e:	3e b7       	in	r19, 0x3e	; 62
    3420:	2a 50       	subi	r18, 0x0A	; 10
    3422:	30 40       	sbci	r19, 0x00	; 0
    3424:	2d bf       	out	0x3d, r18	; 61
    3426:	3e bf       	out	0x3e, r19	; 62
    3428:	ed b7       	in	r30, 0x3d	; 61
    342a:	fe b7       	in	r31, 0x3e	; 62
    342c:	31 96       	adiw	r30, 0x01	; 1
    342e:	89 89       	ldd	r24, Y+17	; 0x11
    3430:	9a 89       	ldd	r25, Y+18	; 0x12
    3432:	ab 89       	ldd	r26, Y+19	; 0x13
    3434:	bc 89       	ldd	r27, Y+20	; 0x14
    3436:	29 85       	ldd	r18, Y+9	; 0x09
    3438:	3a 85       	ldd	r19, Y+10	; 0x0a
    343a:	4b 85       	ldd	r20, Y+11	; 0x0b
    343c:	5c 85       	ldd	r21, Y+12	; 0x0c
    343e:	ed 80       	ldd	r14, Y+5	; 0x05
    3440:	fe 80       	ldd	r15, Y+6	; 0x06
    3442:	0f 81       	ldd	r16, Y+7	; 0x07
    3444:	18 85       	ldd	r17, Y+8	; 0x08
    3446:	a9 80       	ldd	r10, Y+1	; 0x01
    3448:	ba 80       	ldd	r11, Y+2	; 0x02
    344a:	cb 80       	ldd	r12, Y+3	; 0x03
    344c:	dc 80       	ldd	r13, Y+4	; 0x04
    344e:	6b 8c       	ldd	r6, Y+27	; 0x1b
    3450:	7c 8c       	ldd	r7, Y+28	; 0x1c
    3452:	60 82       	st	Z, r6
    3454:	71 82       	std	Z+1, r7	; 0x01
    3456:	89 8c       	ldd	r8, Y+25	; 0x19
    3458:	9a 8c       	ldd	r9, Y+26	; 0x1a
    345a:	82 82       	std	Z+2, r8	; 0x02
    345c:	93 82       	std	Z+3, r9	; 0x03
    345e:	6d 88       	ldd	r6, Y+21	; 0x15
    3460:	7e 88       	ldd	r7, Y+22	; 0x16
    3462:	8f 88       	ldd	r8, Y+23	; 0x17
    3464:	98 8c       	ldd	r9, Y+24	; 0x18
    3466:	64 82       	std	Z+4, r6	; 0x04
    3468:	75 82       	std	Z+5, r7	; 0x05
    346a:	86 82       	std	Z+6, r8	; 0x06
    346c:	97 82       	std	Z+7, r9	; 0x07
    346e:	60 87       	std	Z+8, r22	; 0x08
    3470:	71 87       	std	Z+9, r23	; 0x09
    3472:	bc 01       	movw	r22, r24
    3474:	cd 01       	movw	r24, r26
    3476:	8d 8c       	ldd	r8, Y+29	; 0x1d
    3478:	9e 8c       	ldd	r9, Y+30	; 0x1e
    347a:	0e 94 39 2b 	call	0x5672	; 0x5672 <mc_arc_nonblock>
    347e:	2d b7       	in	r18, 0x3d	; 61
    3480:	3e b7       	in	r19, 0x3e	; 62
    3482:	26 5f       	subi	r18, 0xF6	; 246
    3484:	3f 4f       	sbci	r19, 0xFF	; 255
    3486:	2d bf       	out	0x3d, r18	; 61
    3488:	3e bf       	out	0x3e, r19	; 62
    348a:	80 93 2e 21 	sts	0x212E, r24
	// has completed the arc. So the endpoint should be passed to the generator and
	// executed there.
//	gc.status = mc_line_nonblock(gc.target[X_AXIS], gc.target[Y_AXIS], gc.target[Z_AXIS], 
//								(gc.inverse_feed_rate_mode) ? gc.inverse_feed_rate : 
//								 gc.feed_rate, gc.inverse_feed_rate_mode);
	return (gc.status);
    348e:	80 91 2e 21 	lds	r24, 0x212E
    3492:	a8 2f       	mov	r26, r24
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	af 8f       	std	Y+31, r26	; 0x1f
    3498:	b8 a3       	std	Y+32, r27	; 0x20
    349a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    349c:	98 a1       	ldd	r25, Y+32	; 0x20
}
    349e:	a0 96       	adiw	r28, 0x20	; 32
    34a0:	cd bf       	out	0x3d, r28	; 61
    34a2:	de bf       	out	0x3e, r29	; 62
    34a4:	cf 91       	pop	r28
    34a6:	df 91       	pop	r29
    34a8:	1f 91       	pop	r17
    34aa:	0f 91       	pop	r16
    34ac:	ff 90       	pop	r15
    34ae:	ef 90       	pop	r14
    34b0:	df 90       	pop	r13
    34b2:	cf 90       	pop	r12
    34b4:	bf 90       	pop	r11
    34b6:	af 90       	pop	r10
    34b8:	9f 90       	pop	r9
    34ba:	8f 90       	pop	r8
    34bc:	7f 90       	pop	r7
    34be:	6f 90       	pop	r6
    34c0:	08 95       	ret

000034c2 <cfg_init>:
/* 
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
    34c2:	df 93       	push	r29
    34c4:	cf 93       	push	r28
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
	cfg_reset();
    34ca:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <cfg_reset>
}
    34ce:	cf 91       	pop	r28
    34d0:	df 91       	pop	r29
    34d2:	08 95       	ret

000034d4 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    34d4:	0f 93       	push	r16
    34d6:	1f 93       	push	r17
    34d8:	df 93       	push	r29
    34da:	cf 93       	push	r28
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	2f 97       	sbiw	r28, 0x0f	; 15
    34e2:	cd bf       	out	0x3d, r28	; 61
    34e4:	de bf       	out	0x3e, r29	; 62
    34e6:	89 87       	std	Y+9, r24	; 0x09
    34e8:	9a 87       	std	Y+10, r25	; 0x0a
	char c;
	char *val = 0;				// pointer to normalized value 
    34ea:	1c 82       	std	Y+4, r1	; 0x04
    34ec:	1d 82       	std	Y+5, r1	; 0x05
	char *end = 0;				// pointer to end of value
    34ee:	1f 82       	std	Y+7, r1	; 0x07
    34f0:	18 86       	std	Y+8, r1	; 0x08
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
    34f2:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t j = 0;				// buffer write index
    34f4:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t	axis = 0;			// axis index
    34f6:	19 82       	std	Y+1, r1	; 0x01
    34f8:	72 c0       	rjmp	.+228    	; 0x35de <cfg_parse+0x10a>

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
		if (c == '=') {							// handle separator
    34fa:	8e 81       	ldd	r24, Y+6	; 0x06
    34fc:	8d 33       	cpi	r24, 0x3D	; 61
    34fe:	b1 f4       	brne	.+44     	; 0x352c <cfg_parse+0x58>
			text[j++] = 0;						// terminate tag at separator
    3500:	8a 81       	ldd	r24, Y+2	; 0x02
    3502:	28 2f       	mov	r18, r24
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	89 85       	ldd	r24, Y+9	; 0x09
    3508:	9a 85       	ldd	r25, Y+10	; 0x0a
    350a:	fc 01       	movw	r30, r24
    350c:	e2 0f       	add	r30, r18
    350e:	f3 1f       	adc	r31, r19
    3510:	10 82       	st	Z, r1
    3512:	8a 81       	ldd	r24, Y+2	; 0x02
    3514:	8f 5f       	subi	r24, 0xFF	; 255
    3516:	8a 83       	std	Y+2, r24	; 0x02
			val = &text[j];						// new string starts at value
    3518:	8a 81       	ldd	r24, Y+2	; 0x02
    351a:	28 2f       	mov	r18, r24
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	89 85       	ldd	r24, Y+9	; 0x09
    3520:	9a 85       	ldd	r25, Y+10	; 0x0a
    3522:	82 0f       	add	r24, r18
    3524:	93 1f       	adc	r25, r19
    3526:	8c 83       	std	Y+4, r24	; 0x04
    3528:	9d 83       	std	Y+5, r25	; 0x05
    352a:	59 c0       	rjmp	.+178    	; 0x35de <cfg_parse+0x10a>
		} else if ( (c == '-') || 				// pass special characters
    352c:	8e 81       	ldd	r24, Y+6	; 0x06
    352e:	8d 32       	cpi	r24, 0x2D	; 45
    3530:	61 f0       	breq	.+24     	; 0x354a <cfg_parse+0x76>
    3532:	8e 81       	ldd	r24, Y+6	; 0x06
    3534:	8b 32       	cpi	r24, 0x2B	; 43
    3536:	49 f0       	breq	.+18     	; 0x354a <cfg_parse+0x76>
    3538:	8e 81       	ldd	r24, Y+6	; 0x06
    353a:	8e 32       	cpi	r24, 0x2E	; 46
    353c:	31 f0       	breq	.+12     	; 0x354a <cfg_parse+0x76>
    353e:	8e 81       	ldd	r24, Y+6	; 0x06
    3540:	8f 33       	cpi	r24, 0x3F	; 63
    3542:	19 f0       	breq	.+6      	; 0x354a <cfg_parse+0x76>
    3544:	8e 81       	ldd	r24, Y+6	; 0x06
    3546:	88 32       	cpi	r24, 0x28	; 40
    3548:	71 f4       	brne	.+28     	; 0x3566 <cfg_parse+0x92>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
    354a:	8a 81       	ldd	r24, Y+2	; 0x02
    354c:	28 2f       	mov	r18, r24
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	89 85       	ldd	r24, Y+9	; 0x09
    3552:	9a 85       	ldd	r25, Y+10	; 0x0a
    3554:	fc 01       	movw	r30, r24
    3556:	e2 0f       	add	r30, r18
    3558:	f3 1f       	adc	r31, r19
    355a:	8e 81       	ldd	r24, Y+6	; 0x06
    355c:	80 83       	st	Z, r24
    355e:	8a 81       	ldd	r24, Y+2	; 0x02
    3560:	8f 5f       	subi	r24, 0xFF	; 255
    3562:	8a 83       	std	Y+2, r24	; 0x02
    3564:	3c c0       	rjmp	.+120    	; 0x35de <cfg_parse+0x10a>
		} else if (c >= 'a' && c <= 'z') {		// convert lower to upper
    3566:	8e 81       	ldd	r24, Y+6	; 0x06
    3568:	81 36       	cpi	r24, 0x61	; 97
    356a:	90 f0       	brcs	.+36     	; 0x3590 <cfg_parse+0xbc>
    356c:	8e 81       	ldd	r24, Y+6	; 0x06
    356e:	8b 37       	cpi	r24, 0x7B	; 123
    3570:	78 f4       	brcc	.+30     	; 0x3590 <cfg_parse+0xbc>
			text[j++] = c-'a'+'A';
    3572:	8a 81       	ldd	r24, Y+2	; 0x02
    3574:	28 2f       	mov	r18, r24
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	89 85       	ldd	r24, Y+9	; 0x09
    357a:	9a 85       	ldd	r25, Y+10	; 0x0a
    357c:	fc 01       	movw	r30, r24
    357e:	e2 0f       	add	r30, r18
    3580:	f3 1f       	adc	r31, r19
    3582:	8e 81       	ldd	r24, Y+6	; 0x06
    3584:	80 52       	subi	r24, 0x20	; 32
    3586:	80 83       	st	Z, r24
    3588:	8a 81       	ldd	r24, Y+2	; 0x02
    358a:	8f 5f       	subi	r24, 0xFF	; 255
    358c:	8a 83       	std	Y+2, r24	; 0x02
    358e:	27 c0       	rjmp	.+78     	; 0x35de <cfg_parse+0x10a>
		} else if (c >= 'A' && c <= 'Z') {		// pass upper case letters
    3590:	8e 81       	ldd	r24, Y+6	; 0x06
    3592:	81 34       	cpi	r24, 0x41	; 65
    3594:	88 f0       	brcs	.+34     	; 0x35b8 <cfg_parse+0xe4>
    3596:	8e 81       	ldd	r24, Y+6	; 0x06
    3598:	8b 35       	cpi	r24, 0x5B	; 91
    359a:	70 f4       	brcc	.+28     	; 0x35b8 <cfg_parse+0xe4>
			text[j++] = c;
    359c:	8a 81       	ldd	r24, Y+2	; 0x02
    359e:	28 2f       	mov	r18, r24
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	89 85       	ldd	r24, Y+9	; 0x09
    35a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a6:	fc 01       	movw	r30, r24
    35a8:	e2 0f       	add	r30, r18
    35aa:	f3 1f       	adc	r31, r19
    35ac:	8e 81       	ldd	r24, Y+6	; 0x06
    35ae:	80 83       	st	Z, r24
    35b0:	8a 81       	ldd	r24, Y+2	; 0x02
    35b2:	8f 5f       	subi	r24, 0xFF	; 255
    35b4:	8a 83       	std	Y+2, r24	; 0x02
    35b6:	13 c0       	rjmp	.+38     	; 0x35de <cfg_parse+0x10a>
		} else if (c >= '0' && c <= '9') {		// pass numbers
    35b8:	8e 81       	ldd	r24, Y+6	; 0x06
    35ba:	80 33       	cpi	r24, 0x30	; 48
    35bc:	80 f0       	brcs	.+32     	; 0x35de <cfg_parse+0x10a>
    35be:	8e 81       	ldd	r24, Y+6	; 0x06
    35c0:	8a 33       	cpi	r24, 0x3A	; 58
    35c2:	68 f4       	brcc	.+26     	; 0x35de <cfg_parse+0x10a>
			text[j++] = c;
    35c4:	8a 81       	ldd	r24, Y+2	; 0x02
    35c6:	28 2f       	mov	r18, r24
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	89 85       	ldd	r24, Y+9	; 0x09
    35cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ce:	fc 01       	movw	r30, r24
    35d0:	e2 0f       	add	r30, r18
    35d2:	f3 1f       	adc	r31, r19
    35d4:	8e 81       	ldd	r24, Y+6	; 0x06
    35d6:	80 83       	st	Z, r24
    35d8:	8a 81       	ldd	r24, Y+2	; 0x02
    35da:	8f 5f       	subi	r24, 0xFF	; 255
    35dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
    35de:	8b 81       	ldd	r24, Y+3	; 0x03
    35e0:	28 2f       	mov	r18, r24
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	89 85       	ldd	r24, Y+9	; 0x09
    35e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e8:	fc 01       	movw	r30, r24
    35ea:	e2 0f       	add	r30, r18
    35ec:	f3 1f       	adc	r31, r19
    35ee:	80 81       	ld	r24, Z
    35f0:	8e 83       	std	Y+6, r24	; 0x06
    35f2:	2e 81       	ldd	r18, Y+6	; 0x06
    35f4:	2f 87       	std	Y+15, r18	; 0x0f
    35f6:	3f 85       	ldd	r19, Y+15	; 0x0f
    35f8:	33 23       	and	r19, r19
    35fa:	11 f0       	breq	.+4      	; 0x3600 <cfg_parse+0x12c>
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	8f 87       	std	Y+15, r24	; 0x0f
    3600:	8f 85       	ldd	r24, Y+15	; 0x0f
    3602:	9b 81       	ldd	r25, Y+3	; 0x03
    3604:	9f 5f       	subi	r25, 0xFF	; 255
    3606:	9b 83       	std	Y+3, r25	; 0x03
    3608:	88 23       	and	r24, r24
    360a:	09 f0       	breq	.+2      	; 0x360e <cfg_parse+0x13a>
    360c:	76 cf       	rjmp	.-276    	; 0x34fa <cfg_parse+0x26>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// terminate line
    360e:	8a 81       	ldd	r24, Y+2	; 0x02
    3610:	28 2f       	mov	r18, r24
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	89 85       	ldd	r24, Y+9	; 0x09
    3616:	9a 85       	ldd	r25, Y+10	; 0x0a
    3618:	fc 01       	movw	r30, r24
    361a:	e2 0f       	add	r30, r18
    361c:	f3 1f       	adc	r31, r19
    361e:	10 82       	st	Z, r1
    3620:	8a 81       	ldd	r24, Y+2	; 0x02
    3622:	8f 5f       	subi	r24, 0xFF	; 255
    3624:	8a 83       	std	Y+2, r24	; 0x02
	end = &text[j];								// needed for string-to-double
    3626:	8a 81       	ldd	r24, Y+2	; 0x02
    3628:	28 2f       	mov	r18, r24
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	89 85       	ldd	r24, Y+9	; 0x09
    362e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3630:	82 0f       	add	r24, r18
    3632:	93 1f       	adc	r25, r19
    3634:	8f 83       	std	Y+7, r24	; 0x07
    3636:	98 87       	std	Y+8, r25	; 0x08

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    3638:	10 92 9b 24 	sts	0x249B, r1
	switch (text[0]) {
    363c:	e9 85       	ldd	r30, Y+9	; 0x09
    363e:	fa 85       	ldd	r31, Y+10	; 0x0a
    3640:	80 81       	ld	r24, Z
    3642:	28 2f       	mov	r18, r24
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	2d 87       	std	Y+13, r18	; 0x0d
    3648:	3e 87       	std	Y+14, r19	; 0x0e
    364a:	8d 85       	ldd	r24, Y+13	; 0x0d
    364c:	9e 85       	ldd	r25, Y+14	; 0x0e
    364e:	81 35       	cpi	r24, 0x51	; 81
    3650:	91 05       	cpc	r25, r1
    3652:	c9 f1       	breq	.+114    	; 0x36c6 <cfg_parse+0x1f2>
    3654:	2d 85       	ldd	r18, Y+13	; 0x0d
    3656:	3e 85       	ldd	r19, Y+14	; 0x0e
    3658:	22 35       	cpi	r18, 0x52	; 82
    365a:	31 05       	cpc	r19, r1
    365c:	e4 f4       	brge	.+56     	; 0x3696 <cfg_parse+0x1c2>
    365e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3660:	9e 85       	ldd	r25, Y+14	; 0x0e
    3662:	81 34       	cpi	r24, 0x41	; 65
    3664:	91 05       	cpc	r25, r1
    3666:	09 f4       	brne	.+2      	; 0x366a <cfg_parse+0x196>
    3668:	4f c0       	rjmp	.+158    	; 0x3708 <cfg_parse+0x234>
    366a:	2d 85       	ldd	r18, Y+13	; 0x0d
    366c:	3e 85       	ldd	r19, Y+14	; 0x0e
    366e:	22 34       	cpi	r18, 0x42	; 66
    3670:	31 05       	cpc	r19, r1
    3672:	5c f4       	brge	.+22     	; 0x368a <cfg_parse+0x1b6>
    3674:	8d 85       	ldd	r24, Y+13	; 0x0d
    3676:	9e 85       	ldd	r25, Y+14	; 0x0e
    3678:	88 32       	cpi	r24, 0x28	; 40
    367a:	91 05       	cpc	r25, r1
    367c:	09 f1       	breq	.+66     	; 0x36c0 <cfg_parse+0x1ec>
    367e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3680:	3e 85       	ldd	r19, Y+14	; 0x0e
    3682:	2f 33       	cpi	r18, 0x3F	; 63
    3684:	31 05       	cpc	r19, r1
    3686:	b9 f0       	breq	.+46     	; 0x36b6 <cfg_parse+0x1e2>
    3688:	42 c0       	rjmp	.+132    	; 0x370e <cfg_parse+0x23a>
    368a:	8d 85       	ldd	r24, Y+13	; 0x0d
    368c:	9e 85       	ldd	r25, Y+14	; 0x0e
    368e:	8d 34       	cpi	r24, 0x4D	; 77
    3690:	91 05       	cpc	r25, r1
    3692:	e9 f0       	breq	.+58     	; 0x36ce <cfg_parse+0x1fa>
    3694:	3c c0       	rjmp	.+120    	; 0x370e <cfg_parse+0x23a>
    3696:	2d 85       	ldd	r18, Y+13	; 0x0d
    3698:	3e 85       	ldd	r19, Y+14	; 0x0e
    369a:	29 35       	cpi	r18, 0x59	; 89
    369c:	31 05       	cpc	r19, r1
    369e:	71 f1       	breq	.+92     	; 0x36fc <cfg_parse+0x228>
    36a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    36a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    36a4:	8a 35       	cpi	r24, 0x5A	; 90
    36a6:	91 05       	cpc	r25, r1
    36a8:	61 f1       	breq	.+88     	; 0x3702 <cfg_parse+0x22e>
    36aa:	2d 85       	ldd	r18, Y+13	; 0x0d
    36ac:	3e 85       	ldd	r19, Y+14	; 0x0e
    36ae:	28 35       	cpi	r18, 0x58	; 88
    36b0:	31 05       	cpc	r19, r1
    36b2:	11 f1       	breq	.+68     	; 0x36f8 <cfg_parse+0x224>
    36b4:	2c c0       	rjmp	.+88     	; 0x370e <cfg_parse+0x23a>
		case '?': cfg_dump(); status (TG_OK); break;
    36b6:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <cfg_dump>
    36ba:	10 92 9b 24 	sts	0x249B, r1
    36be:	2a c0       	rjmp	.+84     	; 0x3714 <cfg_parse+0x240>
		case '(': status (TG_OK);	break;			// ignore comment lines
    36c0:	10 92 9b 24 	sts	0x249B, r1
    36c4:	27 c0       	rjmp	.+78     	; 0x3714 <cfg_parse+0x240>
		case 'Q': status (TG_QUIT); break;
    36c6:	83 e0       	ldi	r24, 0x03	; 3
    36c8:	80 93 9b 24 	sts	0x249B, r24
    36cc:	23 c0       	rjmp	.+70     	; 0x3714 <cfg_parse+0x240>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    36ce:	8c 81       	ldd	r24, Y+4	; 0x04
    36d0:	9d 81       	ldd	r25, Y+5	; 0x05
    36d2:	9e 01       	movw	r18, r28
    36d4:	29 5f       	subi	r18, 0xF9	; 249
    36d6:	3f 4f       	sbci	r19, 0xFF	; 255
    36d8:	b9 01       	movw	r22, r18
    36da:	0e 94 38 5f 	call	0xbe70	; 0xbe70 <strtod>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	80 93 9c 24 	sts	0x249C, r24
    36e6:	90 93 9d 24 	sts	0x249D, r25
    36ea:	a0 93 9e 24 	sts	0x249E, r26
    36ee:	b0 93 9f 24 	sts	0x249F, r27
				  status(TG_OK); 
    36f2:	10 92 9b 24 	sts	0x249B, r1
    36f6:	0e c0       	rjmp	.+28     	; 0x3714 <cfg_parse+0x240>
				  break;

		case 'X': axis = X; break;
    36f8:	19 82       	std	Y+1, r1	; 0x01
    36fa:	0c c0       	rjmp	.+24     	; 0x3714 <cfg_parse+0x240>
		case 'Y': axis = Y; break;
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	89 83       	std	Y+1, r24	; 0x01
    3700:	09 c0       	rjmp	.+18     	; 0x3714 <cfg_parse+0x240>
		case 'Z': axis = Z; break;
    3702:	82 e0       	ldi	r24, 0x02	; 2
    3704:	89 83       	std	Y+1, r24	; 0x01
    3706:	06 c0       	rjmp	.+12     	; 0x3714 <cfg_parse+0x240>
		case 'A': axis = A; break;
    3708:	83 e0       	ldi	r24, 0x03	; 3
    370a:	89 83       	std	Y+1, r24	; 0x01
    370c:	03 c0       	rjmp	.+6      	; 0x3714 <cfg_parse+0x240>

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    370e:	89 e0       	ldi	r24, 0x09	; 9
    3710:	80 93 9b 24 	sts	0x249B, r24
	}
	if (cfg.status == TG_OK) {
    3714:	80 91 9b 24 	lds	r24, 0x249B
    3718:	88 23       	and	r24, r24
    371a:	09 f0       	breq	.+2      	; 0x371e <cfg_parse+0x24a>
    371c:	62 c1       	rjmp	.+708    	; 0x39e2 <cfg_parse+0x50e>
		status(TG_OK);							// pre-emptive setting
    371e:	10 92 9b 24 	sts	0x249B, r1
		switch (text[1]) {
    3722:	89 85       	ldd	r24, Y+9	; 0x09
    3724:	9a 85       	ldd	r25, Y+10	; 0x0a
    3726:	fc 01       	movw	r30, r24
    3728:	31 96       	adiw	r30, 0x01	; 1
    372a:	80 81       	ld	r24, Z
    372c:	28 2f       	mov	r18, r24
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	2b 87       	std	Y+11, r18	; 0x0b
    3732:	3c 87       	std	Y+12, r19	; 0x0c
    3734:	8b 85       	ldd	r24, Y+11	; 0x0b
    3736:	9c 85       	ldd	r25, Y+12	; 0x0c
    3738:	8c 34       	cpi	r24, 0x4C	; 76
    373a:	91 05       	cpc	r25, r1
    373c:	09 f4       	brne	.+2      	; 0x3740 <cfg_parse+0x26c>
    373e:	10 c1       	rjmp	.+544    	; 0x3960 <cfg_parse+0x48c>
    3740:	2b 85       	ldd	r18, Y+11	; 0x0b
    3742:	3c 85       	ldd	r19, Y+12	; 0x0c
    3744:	2d 34       	cpi	r18, 0x4D	; 77
    3746:	31 05       	cpc	r19, r1
    3748:	64 f4       	brge	.+24     	; 0x3762 <cfg_parse+0x28e>
    374a:	8b 85       	ldd	r24, Y+11	; 0x0b
    374c:	9c 85       	ldd	r25, Y+12	; 0x0c
    374e:	84 34       	cpi	r24, 0x44	; 68
    3750:	91 05       	cpc	r25, r1
    3752:	09 f4       	brne	.+2      	; 0x3756 <cfg_parse+0x282>
    3754:	4a c0       	rjmp	.+148    	; 0x37ea <cfg_parse+0x316>
    3756:	2b 85       	ldd	r18, Y+11	; 0x0b
    3758:	3c 85       	ldd	r19, Y+12	; 0x0c
    375a:	26 34       	cpi	r18, 0x46	; 70
    375c:	31 05       	cpc	r19, r1
    375e:	61 f1       	breq	.+88     	; 0x37b8 <cfg_parse+0x2e4>
    3760:	3d c1       	rjmp	.+634    	; 0x39dc <cfg_parse+0x508>
    3762:	8b 85       	ldd	r24, Y+11	; 0x0b
    3764:	9c 85       	ldd	r25, Y+12	; 0x0c
    3766:	80 35       	cpi	r24, 0x50	; 80
    3768:	91 05       	cpc	r25, r1
    376a:	09 f4       	brne	.+2      	; 0x376e <cfg_parse+0x29a>
    376c:	5e c0       	rjmp	.+188    	; 0x382a <cfg_parse+0x356>
    376e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3770:	3c 85       	ldd	r19, Y+12	; 0x0c
    3772:	23 35       	cpi	r18, 0x53	; 83
    3774:	31 05       	cpc	r19, r1
    3776:	39 f0       	breq	.+14     	; 0x3786 <cfg_parse+0x2b2>
    3778:	8b 85       	ldd	r24, Y+11	; 0x0b
    377a:	9c 85       	ldd	r25, Y+12	; 0x0c
    377c:	8d 34       	cpi	r24, 0x4D	; 77
    377e:	91 05       	cpc	r25, r1
    3780:	09 f4       	brne	.+2      	; 0x3784 <cfg_parse+0x2b0>
    3782:	81 c0       	rjmp	.+258    	; 0x3886 <cfg_parse+0x3b2>
    3784:	2b c1       	rjmp	.+598    	; 0x39dc <cfg_parse+0x508>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    3786:	89 81       	ldd	r24, Y+1	; 0x01
    3788:	08 2f       	mov	r16, r24
    378a:	10 e0       	ldi	r17, 0x00	; 0
    378c:	8c 81       	ldd	r24, Y+4	; 0x04
    378e:	9d 81       	ldd	r25, Y+5	; 0x05
    3790:	0e 94 a6 60 	call	0xc14c	; 0xc14c <atoi>
    3794:	9c 01       	movw	r18, r24
    3796:	c8 01       	movw	r24, r16
    3798:	88 0f       	add	r24, r24
    379a:	99 1f       	adc	r25, r25
    379c:	80 0f       	add	r24, r16
    379e:	91 1f       	adc	r25, r17
    37a0:	88 0f       	add	r24, r24
    37a2:	99 1f       	adc	r25, r25
    37a4:	88 0f       	add	r24, r24
    37a6:	99 1f       	adc	r25, r25
    37a8:	88 0f       	add	r24, r24
    37aa:	99 1f       	adc	r25, r25
    37ac:	fc 01       	movw	r30, r24
    37ae:	e5 55       	subi	r30, 0x55	; 85
    37b0:	fb 4d       	sbci	r31, 0xDB	; 219
    37b2:	20 83       	st	Z, r18
    37b4:	31 83       	std	Z+1, r19	; 0x01
    37b6:	15 c1       	rjmp	.+554    	; 0x39e2 <cfg_parse+0x50e>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
    37ba:	08 2f       	mov	r16, r24
    37bc:	10 e0       	ldi	r17, 0x00	; 0
    37be:	8c 81       	ldd	r24, Y+4	; 0x04
    37c0:	9d 81       	ldd	r25, Y+5	; 0x05
    37c2:	0e 94 a6 60 	call	0xc14c	; 0xc14c <atoi>
    37c6:	9c 01       	movw	r18, r24
    37c8:	c8 01       	movw	r24, r16
    37ca:	88 0f       	add	r24, r24
    37cc:	99 1f       	adc	r25, r25
    37ce:	80 0f       	add	r24, r16
    37d0:	91 1f       	adc	r25, r17
    37d2:	88 0f       	add	r24, r24
    37d4:	99 1f       	adc	r25, r25
    37d6:	88 0f       	add	r24, r24
    37d8:	99 1f       	adc	r25, r25
    37da:	88 0f       	add	r24, r24
    37dc:	99 1f       	adc	r25, r25
    37de:	fc 01       	movw	r30, r24
    37e0:	e3 55       	subi	r30, 0x53	; 83
    37e2:	fb 4d       	sbci	r31, 0xDB	; 219
    37e4:	20 83       	st	Z, r18
    37e6:	31 83       	std	Z+1, r19	; 0x01
    37e8:	fc c0       	rjmp	.+504    	; 0x39e2 <cfg_parse+0x50e>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    37ea:	89 81       	ldd	r24, Y+1	; 0x01
    37ec:	08 2f       	mov	r16, r24
    37ee:	10 e0       	ldi	r17, 0x00	; 0
    37f0:	8c 81       	ldd	r24, Y+4	; 0x04
    37f2:	9d 81       	ldd	r25, Y+5	; 0x05
    37f4:	9e 01       	movw	r18, r28
    37f6:	29 5f       	subi	r18, 0xF9	; 249
    37f8:	3f 4f       	sbci	r19, 0xFF	; 255
    37fa:	b9 01       	movw	r22, r18
    37fc:	0e 94 38 5f 	call	0xbe70	; 0xbe70 <strtod>
    3800:	9b 01       	movw	r18, r22
    3802:	ac 01       	movw	r20, r24
    3804:	c8 01       	movw	r24, r16
    3806:	88 0f       	add	r24, r24
    3808:	99 1f       	adc	r25, r25
    380a:	80 0f       	add	r24, r16
    380c:	91 1f       	adc	r25, r17
    380e:	88 0f       	add	r24, r24
    3810:	99 1f       	adc	r25, r25
    3812:	88 0f       	add	r24, r24
    3814:	99 1f       	adc	r25, r25
    3816:	88 0f       	add	r24, r24
    3818:	99 1f       	adc	r25, r25
    381a:	fc 01       	movw	r30, r24
    381c:	e1 55       	subi	r30, 0x51	; 81
    381e:	fb 4d       	sbci	r31, 0xDB	; 219
    3820:	20 83       	st	Z, r18
    3822:	31 83       	std	Z+1, r19	; 0x01
    3824:	42 83       	std	Z+2, r20	; 0x02
    3826:	53 83       	std	Z+3, r21	; 0x03
    3828:	dc c0       	rjmp	.+440    	; 0x39e2 <cfg_parse+0x50e>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	08 2f       	mov	r16, r24
    382e:	10 e0       	ldi	r17, 0x00	; 0
    3830:	8c 81       	ldd	r24, Y+4	; 0x04
    3832:	9d 81       	ldd	r25, Y+5	; 0x05
    3834:	0e 94 a6 60 	call	0xc14c	; 0xc14c <atoi>
    3838:	28 2f       	mov	r18, r24
    383a:	c8 01       	movw	r24, r16
    383c:	88 0f       	add	r24, r24
    383e:	99 1f       	adc	r25, r25
    3840:	80 0f       	add	r24, r16
    3842:	91 1f       	adc	r25, r17
    3844:	88 0f       	add	r24, r24
    3846:	99 1f       	adc	r25, r25
    3848:	88 0f       	add	r24, r24
    384a:	99 1f       	adc	r25, r25
    384c:	88 0f       	add	r24, r24
    384e:	99 1f       	adc	r25, r25
    3850:	fc 01       	movw	r30, r24
    3852:	e6 55       	subi	r30, 0x56	; 86
    3854:	fb 4d       	sbci	r31, 0xDB	; 219
    3856:	20 83       	st	Z, r18
					  st_set_polarity(axis, CFG(axis).polarity);
    3858:	89 81       	ldd	r24, Y+1	; 0x01
    385a:	28 2f       	mov	r18, r24
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	c9 01       	movw	r24, r18
    3860:	88 0f       	add	r24, r24
    3862:	99 1f       	adc	r25, r25
    3864:	82 0f       	add	r24, r18
    3866:	93 1f       	adc	r25, r19
    3868:	88 0f       	add	r24, r24
    386a:	99 1f       	adc	r25, r25
    386c:	88 0f       	add	r24, r24
    386e:	99 1f       	adc	r25, r25
    3870:	88 0f       	add	r24, r24
    3872:	99 1f       	adc	r25, r25
    3874:	fc 01       	movw	r30, r24
    3876:	e6 55       	subi	r30, 0x56	; 86
    3878:	fb 4d       	sbci	r31, 0xDB	; 219
    387a:	90 81       	ld	r25, Z
    387c:	89 81       	ldd	r24, Y+1	; 0x01
    387e:	69 2f       	mov	r22, r25
    3880:	0e 94 91 34 	call	0x6922	; 0x6922 <st_set_polarity>
    3884:	ae c0       	rjmp	.+348    	; 0x39e2 <cfg_parse+0x50e>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    3886:	89 85       	ldd	r24, Y+9	; 0x09
    3888:	9a 85       	ldd	r25, Y+10	; 0x0a
    388a:	fc 01       	movw	r30, r24
    388c:	32 96       	adiw	r30, 0x02	; 2
    388e:	80 81       	ld	r24, Z
    3890:	89 34       	cpi	r24, 0x49	; 73
    3892:	c1 f4       	brne	.+48     	; 0x38c4 <cfg_parse+0x3f0>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    3894:	89 81       	ldd	r24, Y+1	; 0x01
    3896:	08 2f       	mov	r16, r24
    3898:	10 e0       	ldi	r17, 0x00	; 0
    389a:	8c 81       	ldd	r24, Y+4	; 0x04
    389c:	9d 81       	ldd	r25, Y+5	; 0x05
    389e:	0e 94 a6 60 	call	0xc14c	; 0xc14c <atoi>
    38a2:	28 2f       	mov	r18, r24
    38a4:	c8 01       	movw	r24, r16
    38a6:	88 0f       	add	r24, r24
    38a8:	99 1f       	adc	r25, r25
    38aa:	80 0f       	add	r24, r16
    38ac:	91 1f       	adc	r25, r17
    38ae:	88 0f       	add	r24, r24
    38b0:	99 1f       	adc	r25, r25
    38b2:	88 0f       	add	r24, r24
    38b4:	99 1f       	adc	r25, r25
    38b6:	88 0f       	add	r24, r24
    38b8:	99 1f       	adc	r25, r25
    38ba:	fc 01       	movw	r30, r24
    38bc:	e8 55       	subi	r30, 0x58	; 88
    38be:	fb 4d       	sbci	r31, 0xDB	; 219
    38c0:	20 83       	st	Z, r18
    38c2:	8f c0       	rjmp	.+286    	; 0x39e2 <cfg_parse+0x50e>
				} else if (text[3] == 'R') {
    38c4:	89 85       	ldd	r24, Y+9	; 0x09
    38c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c8:	fc 01       	movw	r30, r24
    38ca:	33 96       	adiw	r30, 0x03	; 3
    38cc:	80 81       	ld	r24, Z
    38ce:	82 35       	cpi	r24, 0x52	; 82
    38d0:	01 f5       	brne	.+64     	; 0x3912 <cfg_parse+0x43e>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
    38d4:	08 2f       	mov	r16, r24
    38d6:	10 e0       	ldi	r17, 0x00	; 0
    38d8:	8c 81       	ldd	r24, Y+4	; 0x04
    38da:	9d 81       	ldd	r25, Y+5	; 0x05
    38dc:	9e 01       	movw	r18, r28
    38de:	29 5f       	subi	r18, 0xF9	; 249
    38e0:	3f 4f       	sbci	r19, 0xFF	; 255
    38e2:	b9 01       	movw	r22, r18
    38e4:	0e 94 38 5f 	call	0xbe70	; 0xbe70 <strtod>
    38e8:	9b 01       	movw	r18, r22
    38ea:	ac 01       	movw	r20, r24
    38ec:	c8 01       	movw	r24, r16
    38ee:	88 0f       	add	r24, r24
    38f0:	99 1f       	adc	r25, r25
    38f2:	80 0f       	add	r24, r16
    38f4:	91 1f       	adc	r25, r17
    38f6:	88 0f       	add	r24, r24
    38f8:	99 1f       	adc	r25, r25
    38fa:	88 0f       	add	r24, r24
    38fc:	99 1f       	adc	r25, r25
    38fe:	88 0f       	add	r24, r24
    3900:	99 1f       	adc	r25, r25
    3902:	fc 01       	movw	r30, r24
    3904:	ed 54       	subi	r30, 0x4D	; 77
    3906:	fb 4d       	sbci	r31, 0xDB	; 219
    3908:	20 83       	st	Z, r18
    390a:	31 83       	std	Z+1, r19	; 0x01
    390c:	42 83       	std	Z+2, r20	; 0x02
    390e:	53 83       	std	Z+3, r21	; 0x03
    3910:	68 c0       	rjmp	.+208    	; 0x39e2 <cfg_parse+0x50e>
				} else if (text[3] == 'T') {
    3912:	89 85       	ldd	r24, Y+9	; 0x09
    3914:	9a 85       	ldd	r25, Y+10	; 0x0a
    3916:	fc 01       	movw	r30, r24
    3918:	33 96       	adiw	r30, 0x03	; 3
    391a:	80 81       	ld	r24, Z
    391c:	84 35       	cpi	r24, 0x54	; 84
    391e:	01 f5       	brne	.+64     	; 0x3960 <cfg_parse+0x48c>
					CFG(axis).mm_travel = strtod(val, &end); break;
    3920:	89 81       	ldd	r24, Y+1	; 0x01
    3922:	08 2f       	mov	r16, r24
    3924:	10 e0       	ldi	r17, 0x00	; 0
    3926:	8c 81       	ldd	r24, Y+4	; 0x04
    3928:	9d 81       	ldd	r25, Y+5	; 0x05
    392a:	9e 01       	movw	r18, r28
    392c:	29 5f       	subi	r18, 0xF9	; 249
    392e:	3f 4f       	sbci	r19, 0xFF	; 255
    3930:	b9 01       	movw	r22, r18
    3932:	0e 94 38 5f 	call	0xbe70	; 0xbe70 <strtod>
    3936:	9b 01       	movw	r18, r22
    3938:	ac 01       	movw	r20, r24
    393a:	c8 01       	movw	r24, r16
    393c:	88 0f       	add	r24, r24
    393e:	99 1f       	adc	r25, r25
    3940:	80 0f       	add	r24, r16
    3942:	91 1f       	adc	r25, r17
    3944:	88 0f       	add	r24, r24
    3946:	99 1f       	adc	r25, r25
    3948:	88 0f       	add	r24, r24
    394a:	99 1f       	adc	r25, r25
    394c:	88 0f       	add	r24, r24
    394e:	99 1f       	adc	r25, r25
    3950:	fc 01       	movw	r30, r24
    3952:	e9 54       	subi	r30, 0x49	; 73
    3954:	fb 4d       	sbci	r31, 0xDB	; 219
    3956:	20 83       	st	Z, r18
    3958:	31 83       	std	Z+1, r19	; 0x01
    395a:	42 83       	std	Z+2, r20	; 0x02
    395c:	53 83       	std	Z+3, r21	; 0x03
    395e:	41 c0       	rjmp	.+130    	; 0x39e2 <cfg_parse+0x50e>
				}
			case 'L': 
				if (text[2] == 'O') {
    3960:	89 85       	ldd	r24, Y+9	; 0x09
    3962:	9a 85       	ldd	r25, Y+10	; 0x0a
    3964:	fc 01       	movw	r30, r24
    3966:	32 96       	adiw	r30, 0x02	; 2
    3968:	80 81       	ld	r24, Z
    396a:	8f 34       	cpi	r24, 0x4F	; 79
    396c:	c1 f4       	brne	.+48     	; 0x399e <cfg_parse+0x4ca>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    396e:	89 81       	ldd	r24, Y+1	; 0x01
    3970:	08 2f       	mov	r16, r24
    3972:	10 e0       	ldi	r17, 0x00	; 0
    3974:	8c 81       	ldd	r24, Y+4	; 0x04
    3976:	9d 81       	ldd	r25, Y+5	; 0x05
    3978:	0e 94 a6 60 	call	0xc14c	; 0xc14c <atoi>
    397c:	28 2f       	mov	r18, r24
    397e:	c8 01       	movw	r24, r16
    3980:	88 0f       	add	r24, r24
    3982:	99 1f       	adc	r25, r25
    3984:	80 0f       	add	r24, r16
    3986:	91 1f       	adc	r25, r17
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	88 0f       	add	r24, r24
    398e:	99 1f       	adc	r25, r25
    3990:	88 0f       	add	r24, r24
    3992:	99 1f       	adc	r25, r25
    3994:	fc 01       	movw	r30, r24
    3996:	e7 55       	subi	r30, 0x57	; 87
    3998:	fb 4d       	sbci	r31, 0xDB	; 219
    399a:	20 83       	st	Z, r18
    399c:	22 c0       	rjmp	.+68     	; 0x39e2 <cfg_parse+0x50e>
				} else if (text[2] == 'I') {
    399e:	89 85       	ldd	r24, Y+9	; 0x09
    39a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39a2:	fc 01       	movw	r30, r24
    39a4:	32 96       	adiw	r30, 0x02	; 2
    39a6:	80 81       	ld	r24, Z
    39a8:	89 34       	cpi	r24, 0x49	; 73
    39aa:	c1 f4       	brne	.+48     	; 0x39dc <cfg_parse+0x508>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    39ac:	89 81       	ldd	r24, Y+1	; 0x01
    39ae:	08 2f       	mov	r16, r24
    39b0:	10 e0       	ldi	r17, 0x00	; 0
    39b2:	8c 81       	ldd	r24, Y+4	; 0x04
    39b4:	9d 81       	ldd	r25, Y+5	; 0x05
    39b6:	0e 94 a6 60 	call	0xc14c	; 0xc14c <atoi>
    39ba:	28 2f       	mov	r18, r24
    39bc:	c8 01       	movw	r24, r16
    39be:	88 0f       	add	r24, r24
    39c0:	99 1f       	adc	r25, r25
    39c2:	80 0f       	add	r24, r16
    39c4:	91 1f       	adc	r25, r17
    39c6:	88 0f       	add	r24, r24
    39c8:	99 1f       	adc	r25, r25
    39ca:	88 0f       	add	r24, r24
    39cc:	99 1f       	adc	r25, r25
    39ce:	88 0f       	add	r24, r24
    39d0:	99 1f       	adc	r25, r25
    39d2:	fc 01       	movw	r30, r24
    39d4:	e1 54       	subi	r30, 0x41	; 65
    39d6:	fb 4d       	sbci	r31, 0xDB	; 219
    39d8:	20 83       	st	Z, r18
    39da:	03 c0       	rjmp	.+6      	; 0x39e2 <cfg_parse+0x50e>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    39dc:	89 e0       	ldi	r24, 0x09	; 9
    39de:	80 93 9b 24 	sts	0x249B, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    39e2:	80 91 9b 24 	lds	r24, 0x249B
    39e6:	29 85       	ldd	r18, Y+9	; 0x09
    39e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    39ea:	b9 01       	movw	r22, r18
    39ec:	0e 94 b5 21 	call	0x436a	; 0x436a <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
    39f0:	80 91 9b 24 	lds	r24, 0x249B
    39f4:	88 2f       	mov	r24, r24
    39f6:	90 e0       	ldi	r25, 0x00	; 0
}
    39f8:	2f 96       	adiw	r28, 0x0f	; 15
    39fa:	cd bf       	out	0x3d, r28	; 61
    39fc:	de bf       	out	0x3e, r29	; 62
    39fe:	cf 91       	pop	r28
    3a00:	df 91       	pop	r29
    3a02:	1f 91       	pop	r17
    3a04:	0f 91       	pop	r16
    3a06:	08 95       	ret

00003a08 <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    3a08:	df 93       	push	r29
    3a0a:	cf 93       	push	r28
    3a0c:	0f 92       	push	r0
    3a0e:	cd b7       	in	r28, 0x3d	; 61
    3a10:	de b7       	in	r29, 0x3e	; 62
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    3a12:	21 ef       	ldi	r18, 0xF1	; 241
    3a14:	32 e0       	ldi	r19, 0x02	; 2
    3a16:	80 91 9a 24 	lds	r24, 0x249A
    3a1a:	88 2f       	mov	r24, r24
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	00 d0       	rcall	.+0      	; 0x3a20 <cfg_dump+0x18>
    3a20:	0f 92       	push	r0
    3a22:	ed b7       	in	r30, 0x3d	; 61
    3a24:	fe b7       	in	r31, 0x3e	; 62
    3a26:	31 96       	adiw	r30, 0x01	; 1
    3a28:	20 83       	st	Z, r18
    3a2a:	31 83       	std	Z+1, r19	; 0x01
    3a2c:	82 83       	std	Z+2, r24	; 0x02
    3a2e:	93 83       	std	Z+3, r25	; 0x03
    3a30:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    3a34:	0f 90       	pop	r0
    3a36:	0f 90       	pop	r0
    3a38:	0f 90       	pop	r0
    3a3a:	0f 90       	pop	r0
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    3a3c:	8a ec       	ldi	r24, 0xCA	; 202
    3a3e:	92 e0       	ldi	r25, 0x02	; 2
    3a40:	0f 92       	push	r0
    3a42:	0f 92       	push	r0
    3a44:	ed b7       	in	r30, 0x3d	; 61
    3a46:	fe b7       	in	r31, 0x3e	; 62
    3a48:	31 96       	adiw	r30, 0x01	; 1
    3a4a:	80 83       	st	Z, r24
    3a4c:	91 83       	std	Z+1, r25	; 0x01
    3a4e:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    3a52:	0f 90       	pop	r0
    3a54:	0f 90       	pop	r0
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    3a56:	20 ea       	ldi	r18, 0xA0	; 160
    3a58:	32 e0       	ldi	r19, 0x02	; 2
    3a5a:	80 91 9c 24 	lds	r24, 0x249C
    3a5e:	90 91 9d 24 	lds	r25, 0x249D
    3a62:	a0 91 9e 24 	lds	r26, 0x249E
    3a66:	b0 91 9f 24 	lds	r27, 0x249F
    3a6a:	00 d0       	rcall	.+0      	; 0x3a6c <cfg_dump+0x64>
    3a6c:	00 d0       	rcall	.+0      	; 0x3a6e <cfg_dump+0x66>
    3a6e:	ed b7       	in	r30, 0x3d	; 61
    3a70:	fe b7       	in	r31, 0x3e	; 62
    3a72:	31 96       	adiw	r30, 0x01	; 1
    3a74:	20 83       	st	Z, r18
    3a76:	31 83       	std	Z+1, r19	; 0x01
    3a78:	82 83       	std	Z+2, r24	; 0x02
    3a7a:	93 83       	std	Z+3, r25	; 0x03
    3a7c:	a4 83       	std	Z+4, r26	; 0x04
    3a7e:	b5 83       	std	Z+5, r27	; 0x05
    3a80:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    3a84:	8d b7       	in	r24, 0x3d	; 61
    3a86:	9e b7       	in	r25, 0x3e	; 62
    3a88:	06 96       	adiw	r24, 0x06	; 6
    3a8a:	8d bf       	out	0x3d, r24	; 61
    3a8c:	9e bf       	out	0x3e, r25	; 62
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    3a8e:	26 e7       	ldi	r18, 0x76	; 118
    3a90:	32 e0       	ldi	r19, 0x02	; 2
    3a92:	80 91 a4 24 	lds	r24, 0x24A4
    3a96:	90 91 a5 24 	lds	r25, 0x24A5
    3a9a:	a0 91 a6 24 	lds	r26, 0x24A6
    3a9e:	b0 91 a7 24 	lds	r27, 0x24A7
    3aa2:	00 d0       	rcall	.+0      	; 0x3aa4 <cfg_dump+0x9c>
    3aa4:	00 d0       	rcall	.+0      	; 0x3aa6 <cfg_dump+0x9e>
    3aa6:	ed b7       	in	r30, 0x3d	; 61
    3aa8:	fe b7       	in	r31, 0x3e	; 62
    3aaa:	31 96       	adiw	r30, 0x01	; 1
    3aac:	20 83       	st	Z, r18
    3aae:	31 83       	std	Z+1, r19	; 0x01
    3ab0:	82 83       	std	Z+2, r24	; 0x02
    3ab2:	93 83       	std	Z+3, r25	; 0x03
    3ab4:	a4 83       	std	Z+4, r26	; 0x04
    3ab6:	b5 83       	std	Z+5, r27	; 0x05
    3ab8:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    3abc:	8d b7       	in	r24, 0x3d	; 61
    3abe:	9e b7       	in	r25, 0x3e	; 62
    3ac0:	06 96       	adiw	r24, 0x06	; 6
    3ac2:	8d bf       	out	0x3d, r24	; 61
    3ac4:	9e bf       	out	0x3e, r25	; 62
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    3ac6:	2b e4       	ldi	r18, 0x4B	; 75
    3ac8:	32 e0       	ldi	r19, 0x02	; 2
    3aca:	80 91 a0 24 	lds	r24, 0x24A0
    3ace:	90 91 a1 24 	lds	r25, 0x24A1
    3ad2:	a0 91 a2 24 	lds	r26, 0x24A2
    3ad6:	b0 91 a3 24 	lds	r27, 0x24A3
    3ada:	00 d0       	rcall	.+0      	; 0x3adc <cfg_dump+0xd4>
    3adc:	00 d0       	rcall	.+0      	; 0x3ade <cfg_dump+0xd6>
    3ade:	ed b7       	in	r30, 0x3d	; 61
    3ae0:	fe b7       	in	r31, 0x3e	; 62
    3ae2:	31 96       	adiw	r30, 0x01	; 1
    3ae4:	20 83       	st	Z, r18
    3ae6:	31 83       	std	Z+1, r19	; 0x01
    3ae8:	82 83       	std	Z+2, r24	; 0x02
    3aea:	93 83       	std	Z+3, r25	; 0x03
    3aec:	a4 83       	std	Z+4, r26	; 0x04
    3aee:	b5 83       	std	Z+5, r27	; 0x05
    3af0:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    3af4:	8d b7       	in	r24, 0x3d	; 61
    3af6:	9e b7       	in	r25, 0x3e	; 62
    3af8:	06 96       	adiw	r24, 0x06	; 6
    3afa:	8d bf       	out	0x3d, r24	; 61
    3afc:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
    3afe:	19 82       	std	Y+1, r1	; 0x01
    3b00:	06 c0       	rjmp	.+12     	; 0x3b0e <cfg_dump+0x106>
		_cfg_dump_axis(axis);
    3b02:	89 81       	ldd	r24, Y+1	; 0x01
    3b04:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    3b08:	89 81       	ldd	r24, Y+1	; 0x01
    3b0a:	8f 5f       	subi	r24, 0xFF	; 255
    3b0c:	89 83       	std	Y+1, r24	; 0x01
    3b0e:	89 81       	ldd	r24, Y+1	; 0x01
    3b10:	84 30       	cpi	r24, 0x04	; 4
    3b12:	b8 f3       	brcs	.-18     	; 0x3b02 <cfg_dump+0xfa>
		_cfg_dump_axis(axis);
	}
}
    3b14:	0f 90       	pop	r0
    3b16:	cf 91       	pop	r28
    3b18:	df 91       	pop	r29
    3b1a:	08 95       	ret

00003b1c <_cfg_dump_axis>:

void _cfg_dump_axis(uint8_t	axis)
{
    3b1c:	df 93       	push	r29
    3b1e:	cf 93       	push	r28
    3b20:	cd b7       	in	r28, 0x3d	; 61
    3b22:	de b7       	in	r29, 0x3e	; 62
    3b24:	25 97       	sbiw	r28, 0x05	; 5
    3b26:	cd bf       	out	0x3d, r28	; 61
    3b28:	de bf       	out	0x3e, r29	; 62
    3b2a:	8d 83       	std	Y+5, r24	; 0x05
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    3b2c:	2f e1       	ldi	r18, 0x1F	; 31
    3b2e:	35 e0       	ldi	r19, 0x05	; 5
    3b30:	8d 81       	ldd	r24, Y+5	; 0x05
    3b32:	88 2f       	mov	r24, r24
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	88 0f       	add	r24, r24
    3b38:	99 1f       	adc	r25, r25
    3b3a:	8d 5b       	subi	r24, 0xBD	; 189
    3b3c:	9d 4f       	sbci	r25, 0xFD	; 253
    3b3e:	8b 83       	std	Y+3, r24	; 0x03
    3b40:	9c 83       	std	Y+4, r25	; 0x04
    3b42:	8b 81       	ldd	r24, Y+3	; 0x03
    3b44:	9c 81       	ldd	r25, Y+4	; 0x04
    3b46:	fc 01       	movw	r30, r24
    3b48:	85 91       	lpm	r24, Z+
    3b4a:	94 91       	lpm	r25, Z+
    3b4c:	89 83       	std	Y+1, r24	; 0x01
    3b4e:	9a 83       	std	Y+2, r25	; 0x02
    3b50:	eb 83       	std	Y+3, r30	; 0x03
    3b52:	fc 83       	std	Y+4, r31	; 0x04
    3b54:	89 81       	ldd	r24, Y+1	; 0x01
    3b56:	9a 81       	ldd	r25, Y+2	; 0x02
    3b58:	00 d0       	rcall	.+0      	; 0x3b5a <_cfg_dump_axis+0x3e>
    3b5a:	0f 92       	push	r0
    3b5c:	ed b7       	in	r30, 0x3d	; 61
    3b5e:	fe b7       	in	r31, 0x3e	; 62
    3b60:	31 96       	adiw	r30, 0x01	; 1
    3b62:	20 83       	st	Z, r18
    3b64:	31 83       	std	Z+1, r19	; 0x01
    3b66:	82 83       	std	Z+2, r24	; 0x02
    3b68:	93 83       	std	Z+3, r25	; 0x03
    3b6a:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    3b6e:	0f 90       	pop	r0
    3b70:	0f 90       	pop	r0
    3b72:	0f 90       	pop	r0
    3b74:	0f 90       	pop	r0
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    3b76:	47 ee       	ldi	r20, 0xE7	; 231
    3b78:	54 e0       	ldi	r21, 0x04	; 4
    3b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7c:	28 2f       	mov	r18, r24
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	c9 01       	movw	r24, r18
    3b82:	88 0f       	add	r24, r24
    3b84:	99 1f       	adc	r25, r25
    3b86:	82 0f       	add	r24, r18
    3b88:	93 1f       	adc	r25, r19
    3b8a:	88 0f       	add	r24, r24
    3b8c:	99 1f       	adc	r25, r25
    3b8e:	88 0f       	add	r24, r24
    3b90:	99 1f       	adc	r25, r25
    3b92:	88 0f       	add	r24, r24
    3b94:	99 1f       	adc	r25, r25
    3b96:	fc 01       	movw	r30, r24
    3b98:	e5 55       	subi	r30, 0x55	; 85
    3b9a:	fb 4d       	sbci	r31, 0xDB	; 219
    3b9c:	80 81       	ld	r24, Z
    3b9e:	91 81       	ldd	r25, Z+1	; 0x01
    3ba0:	00 d0       	rcall	.+0      	; 0x3ba2 <_cfg_dump_axis+0x86>
    3ba2:	0f 92       	push	r0
    3ba4:	ed b7       	in	r30, 0x3d	; 61
    3ba6:	fe b7       	in	r31, 0x3e	; 62
    3ba8:	31 96       	adiw	r30, 0x01	; 1
    3baa:	40 83       	st	Z, r20
    3bac:	51 83       	std	Z+1, r21	; 0x01
    3bae:	82 83       	std	Z+2, r24	; 0x02
    3bb0:	93 83       	std	Z+3, r25	; 0x03
    3bb2:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    3bb6:	0f 90       	pop	r0
    3bb8:	0f 90       	pop	r0
    3bba:	0f 90       	pop	r0
    3bbc:	0f 90       	pop	r0
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    3bbe:	4f ea       	ldi	r20, 0xAF	; 175
    3bc0:	54 e0       	ldi	r21, 0x04	; 4
    3bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc4:	28 2f       	mov	r18, r24
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	c9 01       	movw	r24, r18
    3bca:	88 0f       	add	r24, r24
    3bcc:	99 1f       	adc	r25, r25
    3bce:	82 0f       	add	r24, r18
    3bd0:	93 1f       	adc	r25, r19
    3bd2:	88 0f       	add	r24, r24
    3bd4:	99 1f       	adc	r25, r25
    3bd6:	88 0f       	add	r24, r24
    3bd8:	99 1f       	adc	r25, r25
    3bda:	88 0f       	add	r24, r24
    3bdc:	99 1f       	adc	r25, r25
    3bde:	fc 01       	movw	r30, r24
    3be0:	e3 55       	subi	r30, 0x53	; 83
    3be2:	fb 4d       	sbci	r31, 0xDB	; 219
    3be4:	80 81       	ld	r24, Z
    3be6:	91 81       	ldd	r25, Z+1	; 0x01
    3be8:	00 d0       	rcall	.+0      	; 0x3bea <_cfg_dump_axis+0xce>
    3bea:	0f 92       	push	r0
    3bec:	ed b7       	in	r30, 0x3d	; 61
    3bee:	fe b7       	in	r31, 0x3e	; 62
    3bf0:	31 96       	adiw	r30, 0x01	; 1
    3bf2:	40 83       	st	Z, r20
    3bf4:	51 83       	std	Z+1, r21	; 0x01
    3bf6:	82 83       	std	Z+2, r24	; 0x02
    3bf8:	93 83       	std	Z+3, r25	; 0x03
    3bfa:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    3bfe:	0f 90       	pop	r0
    3c00:	0f 90       	pop	r0
    3c02:	0f 90       	pop	r0
    3c04:	0f 90       	pop	r0
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    3c06:	4c e7       	ldi	r20, 0x7C	; 124
    3c08:	54 e0       	ldi	r21, 0x04	; 4
    3c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c0c:	28 2f       	mov	r18, r24
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	c9 01       	movw	r24, r18
    3c12:	88 0f       	add	r24, r24
    3c14:	99 1f       	adc	r25, r25
    3c16:	82 0f       	add	r24, r18
    3c18:	93 1f       	adc	r25, r19
    3c1a:	88 0f       	add	r24, r24
    3c1c:	99 1f       	adc	r25, r25
    3c1e:	88 0f       	add	r24, r24
    3c20:	99 1f       	adc	r25, r25
    3c22:	88 0f       	add	r24, r24
    3c24:	99 1f       	adc	r25, r25
    3c26:	fc 01       	movw	r30, r24
    3c28:	e8 55       	subi	r30, 0x58	; 88
    3c2a:	fb 4d       	sbci	r31, 0xDB	; 219
    3c2c:	80 81       	ld	r24, Z
    3c2e:	88 2f       	mov	r24, r24
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	00 d0       	rcall	.+0      	; 0x3c34 <_cfg_dump_axis+0x118>
    3c34:	0f 92       	push	r0
    3c36:	ed b7       	in	r30, 0x3d	; 61
    3c38:	fe b7       	in	r31, 0x3e	; 62
    3c3a:	31 96       	adiw	r30, 0x01	; 1
    3c3c:	40 83       	st	Z, r20
    3c3e:	51 83       	std	Z+1, r21	; 0x01
    3c40:	82 83       	std	Z+2, r24	; 0x02
    3c42:	93 83       	std	Z+3, r25	; 0x03
    3c44:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    3c48:	0f 90       	pop	r0
    3c4a:	0f 90       	pop	r0
    3c4c:	0f 90       	pop	r0
    3c4e:	0f 90       	pop	r0
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    3c50:	45 e4       	ldi	r20, 0x45	; 69
    3c52:	54 e0       	ldi	r21, 0x04	; 4
    3c54:	8d 81       	ldd	r24, Y+5	; 0x05
    3c56:	28 2f       	mov	r18, r24
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	c9 01       	movw	r24, r18
    3c5c:	88 0f       	add	r24, r24
    3c5e:	99 1f       	adc	r25, r25
    3c60:	82 0f       	add	r24, r18
    3c62:	93 1f       	adc	r25, r19
    3c64:	88 0f       	add	r24, r24
    3c66:	99 1f       	adc	r25, r25
    3c68:	88 0f       	add	r24, r24
    3c6a:	99 1f       	adc	r25, r25
    3c6c:	88 0f       	add	r24, r24
    3c6e:	99 1f       	adc	r25, r25
    3c70:	fc 01       	movw	r30, r24
    3c72:	e1 55       	subi	r30, 0x51	; 81
    3c74:	fb 4d       	sbci	r31, 0xDB	; 219
    3c76:	80 81       	ld	r24, Z
    3c78:	91 81       	ldd	r25, Z+1	; 0x01
    3c7a:	a2 81       	ldd	r26, Z+2	; 0x02
    3c7c:	b3 81       	ldd	r27, Z+3	; 0x03
    3c7e:	00 d0       	rcall	.+0      	; 0x3c80 <_cfg_dump_axis+0x164>
    3c80:	00 d0       	rcall	.+0      	; 0x3c82 <_cfg_dump_axis+0x166>
    3c82:	ed b7       	in	r30, 0x3d	; 61
    3c84:	fe b7       	in	r31, 0x3e	; 62
    3c86:	31 96       	adiw	r30, 0x01	; 1
    3c88:	40 83       	st	Z, r20
    3c8a:	51 83       	std	Z+1, r21	; 0x01
    3c8c:	82 83       	std	Z+2, r24	; 0x02
    3c8e:	93 83       	std	Z+3, r25	; 0x03
    3c90:	a4 83       	std	Z+4, r26	; 0x04
    3c92:	b5 83       	std	Z+5, r27	; 0x05
    3c94:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    3c98:	8d b7       	in	r24, 0x3d	; 61
    3c9a:	9e b7       	in	r25, 0x3e	; 62
    3c9c:	06 96       	adiw	r24, 0x06	; 6
    3c9e:	8d bf       	out	0x3d, r24	; 61
    3ca0:	9e bf       	out	0x3e, r25	; 62
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    3ca2:	42 e1       	ldi	r20, 0x12	; 18
    3ca4:	54 e0       	ldi	r21, 0x04	; 4
    3ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca8:	28 2f       	mov	r18, r24
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	c9 01       	movw	r24, r18
    3cae:	88 0f       	add	r24, r24
    3cb0:	99 1f       	adc	r25, r25
    3cb2:	82 0f       	add	r24, r18
    3cb4:	93 1f       	adc	r25, r19
    3cb6:	88 0f       	add	r24, r24
    3cb8:	99 1f       	adc	r25, r25
    3cba:	88 0f       	add	r24, r24
    3cbc:	99 1f       	adc	r25, r25
    3cbe:	88 0f       	add	r24, r24
    3cc0:	99 1f       	adc	r25, r25
    3cc2:	fc 01       	movw	r30, r24
    3cc4:	ed 54       	subi	r30, 0x4D	; 77
    3cc6:	fb 4d       	sbci	r31, 0xDB	; 219
    3cc8:	80 81       	ld	r24, Z
    3cca:	91 81       	ldd	r25, Z+1	; 0x01
    3ccc:	a2 81       	ldd	r26, Z+2	; 0x02
    3cce:	b3 81       	ldd	r27, Z+3	; 0x03
    3cd0:	00 d0       	rcall	.+0      	; 0x3cd2 <_cfg_dump_axis+0x1b6>
    3cd2:	00 d0       	rcall	.+0      	; 0x3cd4 <_cfg_dump_axis+0x1b8>
    3cd4:	ed b7       	in	r30, 0x3d	; 61
    3cd6:	fe b7       	in	r31, 0x3e	; 62
    3cd8:	31 96       	adiw	r30, 0x01	; 1
    3cda:	40 83       	st	Z, r20
    3cdc:	51 83       	std	Z+1, r21	; 0x01
    3cde:	82 83       	std	Z+2, r24	; 0x02
    3ce0:	93 83       	std	Z+3, r25	; 0x03
    3ce2:	a4 83       	std	Z+4, r26	; 0x04
    3ce4:	b5 83       	std	Z+5, r27	; 0x05
    3ce6:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    3cea:	8d b7       	in	r24, 0x3d	; 61
    3cec:	9e b7       	in	r25, 0x3e	; 62
    3cee:	06 96       	adiw	r24, 0x06	; 6
    3cf0:	8d bf       	out	0x3d, r24	; 61
    3cf2:	9e bf       	out	0x3e, r25	; 62
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    3cf4:	4f ed       	ldi	r20, 0xDF	; 223
    3cf6:	53 e0       	ldi	r21, 0x03	; 3
    3cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cfa:	28 2f       	mov	r18, r24
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	c9 01       	movw	r24, r18
    3d00:	88 0f       	add	r24, r24
    3d02:	99 1f       	adc	r25, r25
    3d04:	82 0f       	add	r24, r18
    3d06:	93 1f       	adc	r25, r19
    3d08:	88 0f       	add	r24, r24
    3d0a:	99 1f       	adc	r25, r25
    3d0c:	88 0f       	add	r24, r24
    3d0e:	99 1f       	adc	r25, r25
    3d10:	88 0f       	add	r24, r24
    3d12:	99 1f       	adc	r25, r25
    3d14:	fc 01       	movw	r30, r24
    3d16:	e9 54       	subi	r30, 0x49	; 73
    3d18:	fb 4d       	sbci	r31, 0xDB	; 219
    3d1a:	80 81       	ld	r24, Z
    3d1c:	91 81       	ldd	r25, Z+1	; 0x01
    3d1e:	a2 81       	ldd	r26, Z+2	; 0x02
    3d20:	b3 81       	ldd	r27, Z+3	; 0x03
    3d22:	00 d0       	rcall	.+0      	; 0x3d24 <_cfg_dump_axis+0x208>
    3d24:	00 d0       	rcall	.+0      	; 0x3d26 <_cfg_dump_axis+0x20a>
    3d26:	ed b7       	in	r30, 0x3d	; 61
    3d28:	fe b7       	in	r31, 0x3e	; 62
    3d2a:	31 96       	adiw	r30, 0x01	; 1
    3d2c:	40 83       	st	Z, r20
    3d2e:	51 83       	std	Z+1, r21	; 0x01
    3d30:	82 83       	std	Z+2, r24	; 0x02
    3d32:	93 83       	std	Z+3, r25	; 0x03
    3d34:	a4 83       	std	Z+4, r26	; 0x04
    3d36:	b5 83       	std	Z+5, r27	; 0x05
    3d38:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    3d3c:	8d b7       	in	r24, 0x3d	; 61
    3d3e:	9e b7       	in	r25, 0x3e	; 62
    3d40:	06 96       	adiw	r24, 0x06	; 6
    3d42:	8d bf       	out	0x3d, r24	; 61
    3d44:	9e bf       	out	0x3e, r25	; 62
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    3d46:	4e ea       	ldi	r20, 0xAE	; 174
    3d48:	53 e0       	ldi	r21, 0x03	; 3
    3d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4c:	28 2f       	mov	r18, r24
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	c9 01       	movw	r24, r18
    3d52:	88 0f       	add	r24, r24
    3d54:	99 1f       	adc	r25, r25
    3d56:	82 0f       	add	r24, r18
    3d58:	93 1f       	adc	r25, r19
    3d5a:	88 0f       	add	r24, r24
    3d5c:	99 1f       	adc	r25, r25
    3d5e:	88 0f       	add	r24, r24
    3d60:	99 1f       	adc	r25, r25
    3d62:	88 0f       	add	r24, r24
    3d64:	99 1f       	adc	r25, r25
    3d66:	fc 01       	movw	r30, r24
    3d68:	e1 54       	subi	r30, 0x41	; 65
    3d6a:	fb 4d       	sbci	r31, 0xDB	; 219
    3d6c:	80 81       	ld	r24, Z
    3d6e:	88 2f       	mov	r24, r24
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	00 d0       	rcall	.+0      	; 0x3d74 <_cfg_dump_axis+0x258>
    3d74:	0f 92       	push	r0
    3d76:	ed b7       	in	r30, 0x3d	; 61
    3d78:	fe b7       	in	r31, 0x3e	; 62
    3d7a:	31 96       	adiw	r30, 0x01	; 1
    3d7c:	40 83       	st	Z, r20
    3d7e:	51 83       	std	Z+1, r21	; 0x01
    3d80:	82 83       	std	Z+2, r24	; 0x02
    3d82:	93 83       	std	Z+3, r25	; 0x03
    3d84:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    3d88:	0f 90       	pop	r0
    3d8a:	0f 90       	pop	r0
    3d8c:	0f 90       	pop	r0
    3d8e:	0f 90       	pop	r0
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    3d90:	4d e7       	ldi	r20, 0x7D	; 125
    3d92:	53 e0       	ldi	r21, 0x03	; 3
    3d94:	8d 81       	ldd	r24, Y+5	; 0x05
    3d96:	28 2f       	mov	r18, r24
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	c9 01       	movw	r24, r18
    3d9c:	88 0f       	add	r24, r24
    3d9e:	99 1f       	adc	r25, r25
    3da0:	82 0f       	add	r24, r18
    3da2:	93 1f       	adc	r25, r19
    3da4:	88 0f       	add	r24, r24
    3da6:	99 1f       	adc	r25, r25
    3da8:	88 0f       	add	r24, r24
    3daa:	99 1f       	adc	r25, r25
    3dac:	88 0f       	add	r24, r24
    3dae:	99 1f       	adc	r25, r25
    3db0:	fc 01       	movw	r30, r24
    3db2:	e7 55       	subi	r30, 0x57	; 87
    3db4:	fb 4d       	sbci	r31, 0xDB	; 219
    3db6:	80 81       	ld	r24, Z
    3db8:	88 2f       	mov	r24, r24
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	00 d0       	rcall	.+0      	; 0x3dbe <_cfg_dump_axis+0x2a2>
    3dbe:	0f 92       	push	r0
    3dc0:	ed b7       	in	r30, 0x3d	; 61
    3dc2:	fe b7       	in	r31, 0x3e	; 62
    3dc4:	31 96       	adiw	r30, 0x01	; 1
    3dc6:	40 83       	st	Z, r20
    3dc8:	51 83       	std	Z+1, r21	; 0x01
    3dca:	82 83       	std	Z+2, r24	; 0x02
    3dcc:	93 83       	std	Z+3, r25	; 0x03
    3dce:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    3dd2:	0f 90       	pop	r0
    3dd4:	0f 90       	pop	r0
    3dd6:	0f 90       	pop	r0
    3dd8:	0f 90       	pop	r0
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    3dda:	4d e4       	ldi	r20, 0x4D	; 77
    3ddc:	53 e0       	ldi	r21, 0x03	; 3
    3dde:	8d 81       	ldd	r24, Y+5	; 0x05
    3de0:	28 2f       	mov	r18, r24
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	c9 01       	movw	r24, r18
    3de6:	88 0f       	add	r24, r24
    3de8:	99 1f       	adc	r25, r25
    3dea:	82 0f       	add	r24, r18
    3dec:	93 1f       	adc	r25, r19
    3dee:	88 0f       	add	r24, r24
    3df0:	99 1f       	adc	r25, r25
    3df2:	88 0f       	add	r24, r24
    3df4:	99 1f       	adc	r25, r25
    3df6:	88 0f       	add	r24, r24
    3df8:	99 1f       	adc	r25, r25
    3dfa:	fc 01       	movw	r30, r24
    3dfc:	e6 55       	subi	r30, 0x56	; 86
    3dfe:	fb 4d       	sbci	r31, 0xDB	; 219
    3e00:	80 81       	ld	r24, Z
    3e02:	88 2f       	mov	r24, r24
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	00 d0       	rcall	.+0      	; 0x3e08 <_cfg_dump_axis+0x2ec>
    3e08:	0f 92       	push	r0
    3e0a:	ed b7       	in	r30, 0x3d	; 61
    3e0c:	fe b7       	in	r31, 0x3e	; 62
    3e0e:	31 96       	adiw	r30, 0x01	; 1
    3e10:	40 83       	st	Z, r20
    3e12:	51 83       	std	Z+1, r21	; 0x01
    3e14:	82 83       	std	Z+2, r24	; 0x02
    3e16:	93 83       	std	Z+3, r25	; 0x03
    3e18:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    3e1c:	0f 90       	pop	r0
    3e1e:	0f 90       	pop	r0
    3e20:	0f 90       	pop	r0
    3e22:	0f 90       	pop	r0
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    3e24:	49 e1       	ldi	r20, 0x19	; 25
    3e26:	53 e0       	ldi	r21, 0x03	; 3
    3e28:	8d 81       	ldd	r24, Y+5	; 0x05
    3e2a:	28 2f       	mov	r18, r24
    3e2c:	30 e0       	ldi	r19, 0x00	; 0
    3e2e:	c9 01       	movw	r24, r18
    3e30:	88 0f       	add	r24, r24
    3e32:	99 1f       	adc	r25, r25
    3e34:	82 0f       	add	r24, r18
    3e36:	93 1f       	adc	r25, r19
    3e38:	88 0f       	add	r24, r24
    3e3a:	99 1f       	adc	r25, r25
    3e3c:	88 0f       	add	r24, r24
    3e3e:	99 1f       	adc	r25, r25
    3e40:	88 0f       	add	r24, r24
    3e42:	99 1f       	adc	r25, r25
    3e44:	fc 01       	movw	r30, r24
    3e46:	e5 54       	subi	r30, 0x45	; 69
    3e48:	fb 4d       	sbci	r31, 0xDB	; 219
    3e4a:	80 81       	ld	r24, Z
    3e4c:	91 81       	ldd	r25, Z+1	; 0x01
    3e4e:	a2 81       	ldd	r26, Z+2	; 0x02
    3e50:	b3 81       	ldd	r27, Z+3	; 0x03
    3e52:	00 d0       	rcall	.+0      	; 0x3e54 <_cfg_dump_axis+0x338>
    3e54:	00 d0       	rcall	.+0      	; 0x3e56 <_cfg_dump_axis+0x33a>
    3e56:	ed b7       	in	r30, 0x3d	; 61
    3e58:	fe b7       	in	r31, 0x3e	; 62
    3e5a:	31 96       	adiw	r30, 0x01	; 1
    3e5c:	40 83       	st	Z, r20
    3e5e:	51 83       	std	Z+1, r21	; 0x01
    3e60:	82 83       	std	Z+2, r24	; 0x02
    3e62:	93 83       	std	Z+3, r25	; 0x03
    3e64:	a4 83       	std	Z+4, r26	; 0x04
    3e66:	b5 83       	std	Z+5, r27	; 0x05
    3e68:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    3e6c:	8d b7       	in	r24, 0x3d	; 61
    3e6e:	9e b7       	in	r25, 0x3e	; 62
    3e70:	06 96       	adiw	r24, 0x06	; 6
    3e72:	8d bf       	out	0x3d, r24	; 61
    3e74:	9e bf       	out	0x3e, r25	; 62
}
    3e76:	25 96       	adiw	r28, 0x05	; 5
    3e78:	cd bf       	out	0x3d, r28	; 61
    3e7a:	de bf       	out	0x3e, r29	; 62
    3e7c:	cf 91       	pop	r28
    3e7e:	df 91       	pop	r29
    3e80:	08 95       	ret

00003e82 <cfg_reset>:
/* 
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
    3e82:	df 93       	push	r29
    3e84:	cf 93       	push	r28
    3e86:	cd b7       	in	r28, 0x3d	; 61
    3e88:	de b7       	in	r29, 0x3e	; 62
	cfg.config_version = EEPROM_DATA_VERSION;
    3e8a:	84 e6       	ldi	r24, 0x64	; 100
    3e8c:	80 93 9a 24 	sts	0x249A, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    3e90:	8a e0       	ldi	r24, 0x0A	; 10
    3e92:	97 ed       	ldi	r25, 0xD7	; 215
    3e94:	a3 e2       	ldi	r26, 0x23	; 35
    3e96:	bc e3       	ldi	r27, 0x3C	; 60
    3e98:	80 93 9c 24 	sts	0x249C, r24
    3e9c:	90 93 9d 24 	sts	0x249D, r25
    3ea0:	a0 93 9e 24 	sts	0x249E, r26
    3ea4:	b0 93 9f 24 	sts	0x249F, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    3ea8:	8c ed       	ldi	r24, 0xDC	; 220
    3eaa:	95 e0       	ldi	r25, 0x05	; 5
    3eac:	80 93 ab 24 	sts	0x24AB, r24
    3eb0:	90 93 ac 24 	sts	0x24AC, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    3eb4:	8c ed       	ldi	r24, 0xDC	; 220
    3eb6:	95 e0       	ldi	r25, 0x05	; 5
    3eb8:	80 93 c3 24 	sts	0x24C3, r24
    3ebc:	90 93 c4 24 	sts	0x24C4, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    3ec0:	8c ed       	ldi	r24, 0xDC	; 220
    3ec2:	95 e0       	ldi	r25, 0x05	; 5
    3ec4:	80 93 db 24 	sts	0x24DB, r24
    3ec8:	90 93 dc 24 	sts	0x24DC, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    3ecc:	8c ed       	ldi	r24, 0xDC	; 220
    3ece:	95 e0       	ldi	r25, 0x05	; 5
    3ed0:	80 93 f3 24 	sts	0x24F3, r24
    3ed4:	90 93 f4 24 	sts	0x24F4, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    3ed8:	8c ed       	ldi	r24, 0xDC	; 220
    3eda:	95 e0       	ldi	r25, 0x05	; 5
    3edc:	80 93 ad 24 	sts	0x24AD, r24
    3ee0:	90 93 ae 24 	sts	0x24AE, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    3ee4:	8c ed       	ldi	r24, 0xDC	; 220
    3ee6:	95 e0       	ldi	r25, 0x05	; 5
    3ee8:	80 93 c5 24 	sts	0x24C5, r24
    3eec:	90 93 c6 24 	sts	0x24C6, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    3ef0:	8c ed       	ldi	r24, 0xDC	; 220
    3ef2:	95 e0       	ldi	r25, 0x05	; 5
    3ef4:	80 93 dd 24 	sts	0x24DD, r24
    3ef8:	90 93 de 24 	sts	0x24DE, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    3efc:	8c ed       	ldi	r24, 0xDC	; 220
    3efe:	95 e0       	ldi	r25, 0x05	; 5
    3f00:	80 93 f5 24 	sts	0x24F5, r24
    3f04:	90 93 f6 24 	sts	0x24F6, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    3f08:	86 e6       	ldi	r24, 0x66	; 102
    3f0a:	96 e6       	ldi	r25, 0x66	; 102
    3f0c:	a6 ee       	ldi	r26, 0xE6	; 230
    3f0e:	bf e3       	ldi	r27, 0x3F	; 63
    3f10:	80 93 af 24 	sts	0x24AF, r24
    3f14:	90 93 b0 24 	sts	0x24B0, r25
    3f18:	a0 93 b1 24 	sts	0x24B1, r26
    3f1c:	b0 93 b2 24 	sts	0x24B2, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    3f20:	86 e6       	ldi	r24, 0x66	; 102
    3f22:	96 e6       	ldi	r25, 0x66	; 102
    3f24:	a6 ee       	ldi	r26, 0xE6	; 230
    3f26:	bf e3       	ldi	r27, 0x3F	; 63
    3f28:	80 93 c7 24 	sts	0x24C7, r24
    3f2c:	90 93 c8 24 	sts	0x24C8, r25
    3f30:	a0 93 c9 24 	sts	0x24C9, r26
    3f34:	b0 93 ca 24 	sts	0x24CA, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    3f38:	86 e6       	ldi	r24, 0x66	; 102
    3f3a:	96 e6       	ldi	r25, 0x66	; 102
    3f3c:	a6 ee       	ldi	r26, 0xE6	; 230
    3f3e:	bf e3       	ldi	r27, 0x3F	; 63
    3f40:	80 93 df 24 	sts	0x24DF, r24
    3f44:	90 93 e0 24 	sts	0x24E0, r25
    3f48:	a0 93 e1 24 	sts	0x24E1, r26
    3f4c:	b0 93 e2 24 	sts	0x24E2, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    3f50:	86 e6       	ldi	r24, 0x66	; 102
    3f52:	96 e6       	ldi	r25, 0x66	; 102
    3f54:	a6 ee       	ldi	r26, 0xE6	; 230
    3f56:	bf e3       	ldi	r27, 0x3F	; 63
    3f58:	80 93 f7 24 	sts	0x24F7, r24
    3f5c:	90 93 f8 24 	sts	0x24F8, r25
    3f60:	a0 93 f9 24 	sts	0x24F9, r26
    3f64:	b0 93 fa 24 	sts	0x24FA, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    3f68:	8c e5       	ldi	r24, 0x5C	; 92
    3f6a:	9f e8       	ldi	r25, 0x8F	; 143
    3f6c:	a2 ea       	ldi	r26, 0xA2	; 162
    3f6e:	bf e3       	ldi	r27, 0x3F	; 63
    3f70:	80 93 b3 24 	sts	0x24B3, r24
    3f74:	90 93 b4 24 	sts	0x24B4, r25
    3f78:	a0 93 b5 24 	sts	0x24B5, r26
    3f7c:	b0 93 b6 24 	sts	0x24B6, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    3f80:	8c e5       	ldi	r24, 0x5C	; 92
    3f82:	9f e8       	ldi	r25, 0x8F	; 143
    3f84:	a2 ea       	ldi	r26, 0xA2	; 162
    3f86:	bf e3       	ldi	r27, 0x3F	; 63
    3f88:	80 93 cb 24 	sts	0x24CB, r24
    3f8c:	90 93 cc 24 	sts	0x24CC, r25
    3f90:	a0 93 cd 24 	sts	0x24CD, r26
    3f94:	b0 93 ce 24 	sts	0x24CE, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    3f98:	8c e5       	ldi	r24, 0x5C	; 92
    3f9a:	9f e8       	ldi	r25, 0x8F	; 143
    3f9c:	a2 ea       	ldi	r26, 0xA2	; 162
    3f9e:	bf e3       	ldi	r27, 0x3F	; 63
    3fa0:	80 93 e3 24 	sts	0x24E3, r24
    3fa4:	90 93 e4 24 	sts	0x24E4, r25
    3fa8:	a0 93 e5 24 	sts	0x24E5, r26
    3fac:	b0 93 e6 24 	sts	0x24E6, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    3fb0:	8c e5       	ldi	r24, 0x5C	; 92
    3fb2:	9f e8       	ldi	r25, 0x8F	; 143
    3fb4:	a2 ea       	ldi	r26, 0xA2	; 162
    3fb6:	bf e3       	ldi	r27, 0x3F	; 63
    3fb8:	80 93 fb 24 	sts	0x24FB, r24
    3fbc:	90 93 fc 24 	sts	0x24FC, r25
    3fc0:	a0 93 fd 24 	sts	0x24FD, r26
    3fc4:	b0 93 fe 24 	sts	0x24FE, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    3fc8:	80 e0       	ldi	r24, 0x00	; 0
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	a8 ec       	ldi	r26, 0xC8	; 200
    3fce:	b3 e4       	ldi	r27, 0x43	; 67
    3fd0:	80 93 b7 24 	sts	0x24B7, r24
    3fd4:	90 93 b8 24 	sts	0x24B8, r25
    3fd8:	a0 93 b9 24 	sts	0x24B9, r26
    3fdc:	b0 93 ba 24 	sts	0x24BA, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    3fe0:	80 e0       	ldi	r24, 0x00	; 0
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	a8 ec       	ldi	r26, 0xC8	; 200
    3fe6:	b3 e4       	ldi	r27, 0x43	; 67
    3fe8:	80 93 cf 24 	sts	0x24CF, r24
    3fec:	90 93 d0 24 	sts	0x24D0, r25
    3ff0:	a0 93 d1 24 	sts	0x24D1, r26
    3ff4:	b0 93 d2 24 	sts	0x24D2, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	a6 e9       	ldi	r26, 0x96	; 150
    3ffe:	b3 e4       	ldi	r27, 0x43	; 67
    4000:	80 93 e7 24 	sts	0x24E7, r24
    4004:	90 93 e8 24 	sts	0x24E8, r25
    4008:	a0 93 e9 24 	sts	0x24E9, r26
    400c:	b0 93 ea 24 	sts	0x24EA, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    4010:	80 e0       	ldi	r24, 0x00	; 0
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	a0 e8       	ldi	r26, 0x80	; 128
    4016:	bf eb       	ldi	r27, 0xBF	; 191
    4018:	80 93 ff 24 	sts	0x24FF, r24
    401c:	90 93 00 25 	sts	0x2500, r25
    4020:	a0 93 01 25 	sts	0x2501, r26
    4024:	b0 93 02 25 	sts	0x2502, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    4028:	88 e0       	ldi	r24, 0x08	; 8
    402a:	80 93 a8 24 	sts	0x24A8, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    402e:	88 e0       	ldi	r24, 0x08	; 8
    4030:	80 93 c0 24 	sts	0x24C0, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    4034:	88 e0       	ldi	r24, 0x08	; 8
    4036:	80 93 d8 24 	sts	0x24D8, r24
	cfg.a[A].microstep = A_MICROSTEPS;
    403a:	88 e0       	ldi	r24, 0x08	; 8
    403c:	80 93 f0 24 	sts	0x24F0, r24

	cfg.a[X].polarity = X_POLARITY;
    4040:	10 92 aa 24 	sts	0x24AA, r1
	cfg.a[Y].polarity = Y_POLARITY;
    4044:	81 e0       	ldi	r24, 0x01	; 1
    4046:	80 93 c2 24 	sts	0x24C2, r24
	cfg.a[Z].polarity = Z_POLARITY;
    404a:	10 92 da 24 	sts	0x24DA, r1
	cfg.a[A].polarity = A_POLARITY;
    404e:	10 92 f2 24 	sts	0x24F2, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    4052:	81 e0       	ldi	r24, 0x01	; 1
    4054:	80 93 bf 24 	sts	0x24BF, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	80 93 d7 24 	sts	0x24D7, r24
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    405e:	81 e0       	ldi	r24, 0x01	; 1
    4060:	80 93 ef 24 	sts	0x24EF, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    4064:	10 92 07 25 	sts	0x2507, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	80 93 a9 24 	sts	0x24A9, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	80 93 c1 24 	sts	0x24C1, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	80 93 d9 24 	sts	0x24D9, r24
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	80 93 f1 24 	sts	0x24F1, r24

	_cfg_computed();		// generate computed values from the above
    4080:	0e 94 45 20 	call	0x408a	; 0x408a <_cfg_computed>
}
    4084:	cf 91       	pop	r28
    4086:	df 91       	pop	r29
    4088:	08 95       	ret

0000408a <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    408a:	af 92       	push	r10
    408c:	bf 92       	push	r11
    408e:	cf 92       	push	r12
    4090:	df 92       	push	r13
    4092:	ef 92       	push	r14
    4094:	ff 92       	push	r15
    4096:	0f 93       	push	r16
    4098:	1f 93       	push	r17
    409a:	df 93       	push	r29
    409c:	cf 93       	push	r28
    409e:	0f 92       	push	r0
    40a0:	cd b7       	in	r28, 0x3d	; 61
    40a2:	de b7       	in	r29, 0x3e	; 62
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    40a4:	19 82       	std	Y+1, r1	; 0x01
    40a6:	7a c0       	rjmp	.+244    	; 0x419c <_cfg_computed+0x112>
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    40a8:	89 81       	ldd	r24, Y+1	; 0x01
    40aa:	c8 2e       	mov	r12, r24
    40ac:	dd 24       	eor	r13, r13
    40ae:	89 81       	ldd	r24, Y+1	; 0x01
    40b0:	28 2f       	mov	r18, r24
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	c9 01       	movw	r24, r18
    40b6:	88 0f       	add	r24, r24
    40b8:	99 1f       	adc	r25, r25
    40ba:	82 0f       	add	r24, r18
    40bc:	93 1f       	adc	r25, r19
    40be:	88 0f       	add	r24, r24
    40c0:	99 1f       	adc	r25, r25
    40c2:	88 0f       	add	r24, r24
    40c4:	99 1f       	adc	r25, r25
    40c6:	88 0f       	add	r24, r24
    40c8:	99 1f       	adc	r25, r25
    40ca:	fc 01       	movw	r30, r24
    40cc:	e1 55       	subi	r30, 0x51	; 81
    40ce:	fb 4d       	sbci	r31, 0xDB	; 219
    40d0:	e0 80       	ld	r14, Z
    40d2:	f1 80       	ldd	r15, Z+1	; 0x01
    40d4:	02 81       	ldd	r16, Z+2	; 0x02
    40d6:	13 81       	ldd	r17, Z+3	; 0x03
    40d8:	89 81       	ldd	r24, Y+1	; 0x01
    40da:	28 2f       	mov	r18, r24
    40dc:	30 e0       	ldi	r19, 0x00	; 0
    40de:	c9 01       	movw	r24, r18
    40e0:	88 0f       	add	r24, r24
    40e2:	99 1f       	adc	r25, r25
    40e4:	82 0f       	add	r24, r18
    40e6:	93 1f       	adc	r25, r19
    40e8:	88 0f       	add	r24, r24
    40ea:	99 1f       	adc	r25, r25
    40ec:	88 0f       	add	r24, r24
    40ee:	99 1f       	adc	r25, r25
    40f0:	88 0f       	add	r24, r24
    40f2:	99 1f       	adc	r25, r25
    40f4:	fc 01       	movw	r30, r24
    40f6:	e8 55       	subi	r30, 0x58	; 88
    40f8:	fb 4d       	sbci	r31, 0xDB	; 219
    40fa:	80 81       	ld	r24, Z
    40fc:	88 2f       	mov	r24, r24
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	aa 27       	eor	r26, r26
    4102:	97 fd       	sbrc	r25, 7
    4104:	a0 95       	com	r26
    4106:	ba 2f       	mov	r27, r26
    4108:	bc 01       	movw	r22, r24
    410a:	cd 01       	movw	r24, r26
    410c:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    4110:	9b 01       	movw	r18, r22
    4112:	ac 01       	movw	r20, r24
    4114:	c8 01       	movw	r24, r16
    4116:	b7 01       	movw	r22, r14
    4118:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    411c:	dc 01       	movw	r26, r24
    411e:	cb 01       	movw	r24, r22
    4120:	9c 01       	movw	r18, r24
    4122:	ad 01       	movw	r20, r26
    4124:	60 e0       	ldi	r22, 0x00	; 0
    4126:	70 e0       	ldi	r23, 0x00	; 0
    4128:	84 eb       	ldi	r24, 0xB4	; 180
    412a:	93 e4       	ldi	r25, 0x43	; 67
    412c:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    4130:	dc 01       	movw	r26, r24
    4132:	cb 01       	movw	r24, r22
    4134:	7c 01       	movw	r14, r24
    4136:	8d 01       	movw	r16, r26
    4138:	89 81       	ldd	r24, Y+1	; 0x01
    413a:	28 2f       	mov	r18, r24
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	c9 01       	movw	r24, r18
    4140:	88 0f       	add	r24, r24
    4142:	99 1f       	adc	r25, r25
    4144:	82 0f       	add	r24, r18
    4146:	93 1f       	adc	r25, r19
    4148:	88 0f       	add	r24, r24
    414a:	99 1f       	adc	r25, r25
    414c:	88 0f       	add	r24, r24
    414e:	99 1f       	adc	r25, r25
    4150:	88 0f       	add	r24, r24
    4152:	99 1f       	adc	r25, r25
    4154:	fc 01       	movw	r30, r24
    4156:	ed 54       	subi	r30, 0x4D	; 77
    4158:	fb 4d       	sbci	r31, 0xDB	; 219
    415a:	20 81       	ld	r18, Z
    415c:	31 81       	ldd	r19, Z+1	; 0x01
    415e:	42 81       	ldd	r20, Z+2	; 0x02
    4160:	53 81       	ldd	r21, Z+3	; 0x03
    4162:	c8 01       	movw	r24, r16
    4164:	b7 01       	movw	r22, r14
    4166:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    416a:	dc 01       	movw	r26, r24
    416c:	cb 01       	movw	r24, r22
    416e:	9c 01       	movw	r18, r24
    4170:	ad 01       	movw	r20, r26
    4172:	c6 01       	movw	r24, r12
    4174:	88 0f       	add	r24, r24
    4176:	99 1f       	adc	r25, r25
    4178:	8c 0d       	add	r24, r12
    417a:	9d 1d       	adc	r25, r13
    417c:	88 0f       	add	r24, r24
    417e:	99 1f       	adc	r25, r25
    4180:	88 0f       	add	r24, r24
    4182:	99 1f       	adc	r25, r25
    4184:	88 0f       	add	r24, r24
    4186:	99 1f       	adc	r25, r25
    4188:	fc 01       	movw	r30, r24
    418a:	e5 54       	subi	r30, 0x45	; 69
    418c:	fb 4d       	sbci	r31, 0xDB	; 219
    418e:	20 83       	st	Z, r18
    4190:	31 83       	std	Z+1, r19	; 0x01
    4192:	42 83       	std	Z+2, r20	; 0x02
    4194:	53 83       	std	Z+3, r21	; 0x03
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	8f 5f       	subi	r24, 0xFF	; 255
    419a:	89 83       	std	Y+1, r24	; 0x01
    419c:	89 81       	ldd	r24, Y+1	; 0x01
    419e:	84 30       	cpi	r24, 0x04	; 4
    41a0:	08 f4       	brcc	.+2      	; 0x41a4 <_cfg_computed+0x11a>
    41a2:	82 cf       	rjmp	.-252    	; 0x40a8 <_cfg_computed+0x1e>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    41a4:	20 91 ad 24 	lds	r18, 0x24AD
    41a8:	30 91 ae 24 	lds	r19, 0x24AE
    41ac:	80 91 a8 24 	lds	r24, 0x24A8
    41b0:	88 2f       	mov	r24, r24
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	ac 01       	movw	r20, r24
    41b6:	24 9f       	mul	r18, r20
    41b8:	c0 01       	movw	r24, r0
    41ba:	25 9f       	mul	r18, r21
    41bc:	90 0d       	add	r25, r0
    41be:	34 9f       	mul	r19, r20
    41c0:	90 0d       	add	r25, r0
    41c2:	11 24       	eor	r1, r1
    41c4:	cc 01       	movw	r24, r24
    41c6:	a0 e0       	ldi	r26, 0x00	; 0
    41c8:	b0 e0       	ldi	r27, 0x00	; 0
    41ca:	bc 01       	movw	r22, r24
    41cc:	cd 01       	movw	r24, r26
    41ce:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <__floatunsisf>
    41d2:	5b 01       	movw	r10, r22
    41d4:	6c 01       	movw	r12, r24
    41d6:	e0 90 af 24 	lds	r14, 0x24AF
    41da:	f0 90 b0 24 	lds	r15, 0x24B0
    41de:	00 91 b1 24 	lds	r16, 0x24B1
    41e2:	10 91 b2 24 	lds	r17, 0x24B2
    41e6:	80 91 a8 24 	lds	r24, 0x24A8
    41ea:	88 2f       	mov	r24, r24
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	aa 27       	eor	r26, r26
    41f0:	97 fd       	sbrc	r25, 7
    41f2:	a0 95       	com	r26
    41f4:	ba 2f       	mov	r27, r26
    41f6:	bc 01       	movw	r22, r24
    41f8:	cd 01       	movw	r24, r26
    41fa:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    41fe:	9b 01       	movw	r18, r22
    4200:	ac 01       	movw	r20, r24
    4202:	c8 01       	movw	r24, r16
    4204:	b7 01       	movw	r22, r14
    4206:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    420a:	dc 01       	movw	r26, r24
    420c:	cb 01       	movw	r24, r22
    420e:	9c 01       	movw	r18, r24
    4210:	ad 01       	movw	r20, r26
    4212:	60 e0       	ldi	r22, 0x00	; 0
    4214:	70 e0       	ldi	r23, 0x00	; 0
    4216:	84 eb       	ldi	r24, 0xB4	; 180
    4218:	93 e4       	ldi	r25, 0x43	; 67
    421a:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    421e:	dc 01       	movw	r26, r24
    4220:	cb 01       	movw	r24, r22
    4222:	9c 01       	movw	r18, r24
    4224:	ad 01       	movw	r20, r26
    4226:	c6 01       	movw	r24, r12
    4228:	b5 01       	movw	r22, r10
    422a:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    422e:	dc 01       	movw	r26, r24
    4230:	cb 01       	movw	r24, r22
    4232:	80 93 a0 24 	sts	0x24A0, r24
    4236:	90 93 a1 24 	sts	0x24A1, r25
    423a:	a0 93 a2 24 	sts	0x24A2, r26
    423e:	b0 93 a3 24 	sts	0x24A3, r27
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    4242:	20 91 ab 24 	lds	r18, 0x24AB
    4246:	30 91 ac 24 	lds	r19, 0x24AC
    424a:	80 91 a8 24 	lds	r24, 0x24A8
    424e:	88 2f       	mov	r24, r24
    4250:	90 e0       	ldi	r25, 0x00	; 0
    4252:	ac 01       	movw	r20, r24
    4254:	24 9f       	mul	r18, r20
    4256:	c0 01       	movw	r24, r0
    4258:	25 9f       	mul	r18, r21
    425a:	90 0d       	add	r25, r0
    425c:	34 9f       	mul	r19, r20
    425e:	90 0d       	add	r25, r0
    4260:	11 24       	eor	r1, r1
    4262:	cc 01       	movw	r24, r24
    4264:	a0 e0       	ldi	r26, 0x00	; 0
    4266:	b0 e0       	ldi	r27, 0x00	; 0
    4268:	bc 01       	movw	r22, r24
    426a:	cd 01       	movw	r24, r26
    426c:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <__floatunsisf>
    4270:	5b 01       	movw	r10, r22
    4272:	6c 01       	movw	r12, r24
    4274:	e0 90 af 24 	lds	r14, 0x24AF
    4278:	f0 90 b0 24 	lds	r15, 0x24B0
    427c:	00 91 b1 24 	lds	r16, 0x24B1
    4280:	10 91 b2 24 	lds	r17, 0x24B2
    4284:	80 91 a8 24 	lds	r24, 0x24A8
    4288:	88 2f       	mov	r24, r24
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	aa 27       	eor	r26, r26
    428e:	97 fd       	sbrc	r25, 7
    4290:	a0 95       	com	r26
    4292:	ba 2f       	mov	r27, r26
    4294:	bc 01       	movw	r22, r24
    4296:	cd 01       	movw	r24, r26
    4298:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    429c:	9b 01       	movw	r18, r22
    429e:	ac 01       	movw	r20, r24
    42a0:	c8 01       	movw	r24, r16
    42a2:	b7 01       	movw	r22, r14
    42a4:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    42a8:	dc 01       	movw	r26, r24
    42aa:	cb 01       	movw	r24, r22
    42ac:	9c 01       	movw	r18, r24
    42ae:	ad 01       	movw	r20, r26
    42b0:	60 e0       	ldi	r22, 0x00	; 0
    42b2:	70 e0       	ldi	r23, 0x00	; 0
    42b4:	84 eb       	ldi	r24, 0xB4	; 180
    42b6:	93 e4       	ldi	r25, 0x43	; 67
    42b8:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    42bc:	dc 01       	movw	r26, r24
    42be:	cb 01       	movw	r24, r22
    42c0:	9c 01       	movw	r18, r24
    42c2:	ad 01       	movw	r20, r26
    42c4:	c6 01       	movw	r24, r12
    42c6:	b5 01       	movw	r22, r10
    42c8:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    42cc:	dc 01       	movw	r26, r24
    42ce:	cb 01       	movw	r24, r22
    42d0:	80 93 a4 24 	sts	0x24A4, r24
    42d4:	90 93 a5 24 	sts	0x24A5, r25
    42d8:	a0 93 a6 24 	sts	0x24A6, r26
    42dc:	b0 93 a7 24 	sts	0x24A7, r27
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    42e0:	0f 90       	pop	r0
    42e2:	cf 91       	pop	r28
    42e4:	df 91       	pop	r29
    42e6:	1f 91       	pop	r17
    42e8:	0f 91       	pop	r16
    42ea:	ff 90       	pop	r15
    42ec:	ef 90       	pop	r14
    42ee:	df 90       	pop	r13
    42f0:	cf 90       	pop	r12
    42f2:	bf 90       	pop	r11
    42f4:	af 90       	pop	r10
    42f6:	08 95       	ret

000042f8 <cfg_read>:
/* 
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
    42f8:	df 93       	push	r29
    42fa:	cf 93       	push	r28
    42fc:	00 d0       	rcall	.+0      	; 0x42fe <cfg_read+0x6>
    42fe:	cd b7       	in	r28, 0x3d	; 61
    4300:	de b7       	in	r29, 0x3e	; 62
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    4302:	80 e0       	ldi	r24, 0x00	; 0
    4304:	90 e0       	ldi	r25, 0x00	; 0
    4306:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <eeprom_get_char>
    430a:	89 83       	std	Y+1, r24	; 0x01

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    430c:	89 81       	ldd	r24, Y+1	; 0x01
    430e:	84 36       	cpi	r24, 0x64	; 100
    4310:	19 f0       	breq	.+6      	; 0x4318 <cfg_read+0x20>
		return(FALSE); 
    4312:	1a 82       	std	Y+2, r1	; 0x02
    4314:	1b 82       	std	Y+3, r1	; 0x03
    4316:	11 c0       	rjmp	.+34     	; 0x433a <cfg_read+0x42>
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    4318:	8a e9       	ldi	r24, 0x9A	; 154
    431a:	94 e2       	ldi	r25, 0x24	; 36
    431c:	60 e0       	ldi	r22, 0x00	; 0
    431e:	70 e0       	ldi	r23, 0x00	; 0
    4320:	4e e6       	ldi	r20, 0x6E	; 110
    4322:	50 e0       	ldi	r21, 0x00	; 0
    4324:	0e 94 90 3d 	call	0x7b20	; 0x7b20 <memcpy_from_eeprom_with_checksum>
    4328:	00 97       	sbiw	r24, 0x00	; 0
    432a:	19 f4       	brne	.+6      	; 0x4332 <cfg_read+0x3a>
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
    432c:	1a 82       	std	Y+2, r1	; 0x02
    432e:	1b 82       	std	Y+3, r1	; 0x03
    4330:	04 c0       	rjmp	.+8      	; 0x433a <cfg_read+0x42>
  	}
  	return(TRUE);
    4332:	81 e0       	ldi	r24, 0x01	; 1
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	8a 83       	std	Y+2, r24	; 0x02
    4338:	9b 83       	std	Y+3, r25	; 0x03
    433a:	8a 81       	ldd	r24, Y+2	; 0x02
    433c:	9b 81       	ldd	r25, Y+3	; 0x03
}
    433e:	23 96       	adiw	r28, 0x03	; 3
    4340:	cd bf       	out	0x3d, r28	; 61
    4342:	de bf       	out	0x3e, r29	; 62
    4344:	cf 91       	pop	r28
    4346:	df 91       	pop	r29
    4348:	08 95       	ret

0000434a <cfg_write>:
/* 
 * cfg_write() - write config struct to program ROM 
 */

void cfg_write()
{
    434a:	df 93       	push	r29
    434c:	cf 93       	push	r28
    434e:	cd b7       	in	r28, 0x3d	; 61
    4350:	de b7       	in	r29, 0x3e	; 62
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    4352:	2a e9       	ldi	r18, 0x9A	; 154
    4354:	34 e2       	ldi	r19, 0x24	; 36
    4356:	80 e0       	ldi	r24, 0x00	; 0
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	b9 01       	movw	r22, r18
    435c:	4e e6       	ldi	r20, 0x6E	; 110
    435e:	50 e0       	ldi	r21, 0x00	; 0
    4360:	0e 94 41 3d 	call	0x7a82	; 0x7a82 <memcpy_to_eeprom_with_checksum>
}
    4364:	cf 91       	pop	r28
    4366:	df 91       	pop	r29
    4368:	08 95       	ret

0000436a <_cfg_print_status>:
/*
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
    436a:	df 93       	push	r29
    436c:	cf 93       	push	r28
    436e:	cd b7       	in	r28, 0x3d	; 61
    4370:	de b7       	in	r29, 0x3e	; 62
    4372:	25 97       	sbiw	r28, 0x05	; 5
    4374:	cd bf       	out	0x3d, r28	; 61
    4376:	de bf       	out	0x3e, r29	; 62
    4378:	89 83       	std	Y+1, r24	; 0x01
    437a:	6a 83       	std	Y+2, r22	; 0x02
    437c:	7b 83       	std	Y+3, r23	; 0x03
	switch(status_code) {
    437e:	89 81       	ldd	r24, Y+1	; 0x01
    4380:	28 2f       	mov	r18, r24
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	2c 83       	std	Y+4, r18	; 0x04
    4386:	3d 83       	std	Y+5, r19	; 0x05
    4388:	8c 81       	ldd	r24, Y+4	; 0x04
    438a:	9d 81       	ldd	r25, Y+5	; 0x05
    438c:	89 30       	cpi	r24, 0x09	; 9
    438e:	91 05       	cpc	r25, r1
    4390:	09 f4       	brne	.+2      	; 0x4394 <_cfg_print_status+0x2a>
    4392:	58 c0       	rjmp	.+176    	; 0x4444 <_cfg_print_status+0xda>
    4394:	2c 81       	ldd	r18, Y+4	; 0x04
    4396:	3d 81       	ldd	r19, Y+5	; 0x05
    4398:	2a 30       	cpi	r18, 0x0A	; 10
    439a:	31 05       	cpc	r19, r1
    439c:	5c f4       	brge	.+22     	; 0x43b4 <_cfg_print_status+0x4a>
    439e:	8c 81       	ldd	r24, Y+4	; 0x04
    43a0:	9d 81       	ldd	r25, Y+5	; 0x05
    43a2:	81 30       	cpi	r24, 0x01	; 1
    43a4:	91 05       	cpc	r25, r1
    43a6:	c1 f0       	breq	.+48     	; 0x43d8 <_cfg_print_status+0x6e>
    43a8:	2c 81       	ldd	r18, Y+4	; 0x04
    43aa:	3d 81       	ldd	r19, Y+5	; 0x05
    43ac:	23 30       	cpi	r18, 0x03	; 3
    43ae:	31 05       	cpc	r19, r1
    43b0:	39 f1       	breq	.+78     	; 0x4400 <_cfg_print_status+0x96>
    43b2:	83 c0       	rjmp	.+262    	; 0x44ba <_cfg_print_status+0x150>
    43b4:	8c 81       	ldd	r24, Y+4	; 0x04
    43b6:	9d 81       	ldd	r25, Y+5	; 0x05
    43b8:	8e 30       	cpi	r24, 0x0E	; 14
    43ba:	91 05       	cpc	r25, r1
    43bc:	09 f4       	brne	.+2      	; 0x43c0 <_cfg_print_status+0x56>
    43be:	56 c0       	rjmp	.+172    	; 0x446c <_cfg_print_status+0x102>
    43c0:	2c 81       	ldd	r18, Y+4	; 0x04
    43c2:	3d 81       	ldd	r19, Y+5	; 0x05
    43c4:	20 31       	cpi	r18, 0x10	; 16
    43c6:	31 05       	cpc	r19, r1
    43c8:	09 f4       	brne	.+2      	; 0x43cc <_cfg_print_status+0x62>
    43ca:	64 c0       	rjmp	.+200    	; 0x4494 <_cfg_print_status+0x12a>
    43cc:	8c 81       	ldd	r24, Y+4	; 0x04
    43ce:	9d 81       	ldd	r25, Y+5	; 0x05
    43d0:	8d 30       	cpi	r24, 0x0D	; 13
    43d2:	91 05       	cpc	r25, r1
    43d4:	19 f1       	breq	.+70     	; 0x441c <_cfg_print_status+0xb2>
    43d6:	71 c0       	rjmp	.+226    	; 0x44ba <_cfg_print_status+0x150>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_EAGAIN: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    43d8:	89 eb       	ldi	r24, 0xB9	; 185
    43da:	95 e0       	ldi	r25, 0x05	; 5
    43dc:	00 d0       	rcall	.+0      	; 0x43de <_cfg_print_status+0x74>
    43de:	0f 92       	push	r0
    43e0:	ed b7       	in	r30, 0x3d	; 61
    43e2:	fe b7       	in	r31, 0x3e	; 62
    43e4:	31 96       	adiw	r30, 0x01	; 1
    43e6:	80 83       	st	Z, r24
    43e8:	91 83       	std	Z+1, r25	; 0x01
    43ea:	8a 81       	ldd	r24, Y+2	; 0x02
    43ec:	9b 81       	ldd	r25, Y+3	; 0x03
    43ee:	82 83       	std	Z+2, r24	; 0x02
    43f0:	93 83       	std	Z+3, r25	; 0x03
    43f2:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    43f6:	0f 90       	pop	r0
    43f8:	0f 90       	pop	r0
    43fa:	0f 90       	pop	r0
    43fc:	0f 90       	pop	r0
    43fe:	5d c0       	rjmp	.+186    	; 0x44ba <_cfg_print_status+0x150>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    4400:	83 ea       	ldi	r24, 0xA3	; 163
    4402:	95 e0       	ldi	r25, 0x05	; 5
    4404:	0f 92       	push	r0
    4406:	0f 92       	push	r0
    4408:	ed b7       	in	r30, 0x3d	; 61
    440a:	fe b7       	in	r31, 0x3e	; 62
    440c:	31 96       	adiw	r30, 0x01	; 1
    440e:	80 83       	st	Z, r24
    4410:	91 83       	std	Z+1, r25	; 0x01
    4412:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    4416:	0f 90       	pop	r0
    4418:	0f 90       	pop	r0
    441a:	4f c0       	rjmp	.+158    	; 0x44ba <_cfg_print_status+0x150>
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    441c:	8c e8       	ldi	r24, 0x8C	; 140
    441e:	95 e0       	ldi	r25, 0x05	; 5
    4420:	00 d0       	rcall	.+0      	; 0x4422 <_cfg_print_status+0xb8>
    4422:	0f 92       	push	r0
    4424:	ed b7       	in	r30, 0x3d	; 61
    4426:	fe b7       	in	r31, 0x3e	; 62
    4428:	31 96       	adiw	r30, 0x01	; 1
    442a:	80 83       	st	Z, r24
    442c:	91 83       	std	Z+1, r25	; 0x01
    442e:	8a 81       	ldd	r24, Y+2	; 0x02
    4430:	9b 81       	ldd	r25, Y+3	; 0x03
    4432:	82 83       	std	Z+2, r24	; 0x02
    4434:	93 83       	std	Z+3, r25	; 0x03
    4436:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    443a:	0f 90       	pop	r0
    443c:	0f 90       	pop	r0
    443e:	0f 90       	pop	r0
    4440:	0f 90       	pop	r0
    4442:	3b c0       	rjmp	.+118    	; 0x44ba <_cfg_print_status+0x150>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    4444:	82 e7       	ldi	r24, 0x72	; 114
    4446:	95 e0       	ldi	r25, 0x05	; 5
    4448:	00 d0       	rcall	.+0      	; 0x444a <_cfg_print_status+0xe0>
    444a:	0f 92       	push	r0
    444c:	ed b7       	in	r30, 0x3d	; 61
    444e:	fe b7       	in	r31, 0x3e	; 62
    4450:	31 96       	adiw	r30, 0x01	; 1
    4452:	80 83       	st	Z, r24
    4454:	91 83       	std	Z+1, r25	; 0x01
    4456:	8a 81       	ldd	r24, Y+2	; 0x02
    4458:	9b 81       	ldd	r25, Y+3	; 0x03
    445a:	82 83       	std	Z+2, r24	; 0x02
    445c:	93 83       	std	Z+3, r25	; 0x03
    445e:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    4462:	0f 90       	pop	r0
    4464:	0f 90       	pop	r0
    4466:	0f 90       	pop	r0
    4468:	0f 90       	pop	r0
    446a:	27 c0       	rjmp	.+78     	; 0x44ba <_cfg_print_status+0x150>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    446c:	88 e5       	ldi	r24, 0x58	; 88
    446e:	95 e0       	ldi	r25, 0x05	; 5
    4470:	00 d0       	rcall	.+0      	; 0x4472 <_cfg_print_status+0x108>
    4472:	0f 92       	push	r0
    4474:	ed b7       	in	r30, 0x3d	; 61
    4476:	fe b7       	in	r31, 0x3e	; 62
    4478:	31 96       	adiw	r30, 0x01	; 1
    447a:	80 83       	st	Z, r24
    447c:	91 83       	std	Z+1, r25	; 0x01
    447e:	8a 81       	ldd	r24, Y+2	; 0x02
    4480:	9b 81       	ldd	r25, Y+3	; 0x03
    4482:	82 83       	std	Z+2, r24	; 0x02
    4484:	93 83       	std	Z+3, r25	; 0x03
    4486:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    448a:	0f 90       	pop	r0
    448c:	0f 90       	pop	r0
    448e:	0f 90       	pop	r0
    4490:	0f 90       	pop	r0
    4492:	13 c0       	rjmp	.+38     	; 0x44ba <_cfg_print_status+0x150>
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    4494:	8d e3       	ldi	r24, 0x3D	; 61
    4496:	95 e0       	ldi	r25, 0x05	; 5
    4498:	00 d0       	rcall	.+0      	; 0x449a <_cfg_print_status+0x130>
    449a:	0f 92       	push	r0
    449c:	ed b7       	in	r30, 0x3d	; 61
    449e:	fe b7       	in	r31, 0x3e	; 62
    44a0:	31 96       	adiw	r30, 0x01	; 1
    44a2:	80 83       	st	Z, r24
    44a4:	91 83       	std	Z+1, r25	; 0x01
    44a6:	8a 81       	ldd	r24, Y+2	; 0x02
    44a8:	9b 81       	ldd	r25, Y+3	; 0x03
    44aa:	82 83       	std	Z+2, r24	; 0x02
    44ac:	93 83       	std	Z+3, r25	; 0x03
    44ae:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    44b2:	0f 90       	pop	r0
    44b4:	0f 90       	pop	r0
    44b6:	0f 90       	pop	r0
    44b8:	0f 90       	pop	r0
			break;
	}
	return;
}
    44ba:	25 96       	adiw	r28, 0x05	; 5
    44bc:	cd bf       	out	0x3d, r28	; 61
    44be:	de bf       	out	0x3e, r29	; 62
    44c0:	cf 91       	pop	r28
    44c2:	df 91       	pop	r29
    44c4:	08 95       	ret

000044c6 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    44c6:	df 93       	push	r29
    44c8:	cf 93       	push	r28
    44ca:	cd b7       	in	r28, 0x3d	; 61
    44cc:	de b7       	in	r29, 0x3e	; 62
    44ce:	e0 97       	sbiw	r28, 0x30	; 48
    44d0:	cd bf       	out	0x3d, r28	; 61
    44d2:	de bf       	out	0x3e, r29	; 62
	char text[40];
	int i = 0;					// ROM buffer index (int allows for > 256 chars)
    44d4:	1f 82       	std	Y+7, r1	; 0x07
    44d6:	18 86       	std	Y+8, r1	; 0x08
	int j = 0;					// RAM buffer index (text)
    44d8:	1d 82       	std	Y+5, r1	; 0x05
    44da:	1e 82       	std	Y+6, r1	; 0x06
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    44dc:	8f 81       	ldd	r24, Y+7	; 0x07
    44de:	98 85       	ldd	r25, Y+8	; 0x08
    44e0:	8a 52       	subi	r24, 0x2A	; 42
    44e2:	9a 4f       	sbci	r25, 0xFA	; 250
    44e4:	8a 83       	std	Y+2, r24	; 0x02
    44e6:	9b 83       	std	Y+3, r25	; 0x03
    44e8:	8f 81       	ldd	r24, Y+7	; 0x07
    44ea:	98 85       	ldd	r25, Y+8	; 0x08
    44ec:	01 96       	adiw	r24, 0x01	; 1
    44ee:	8f 83       	std	Y+7, r24	; 0x07
    44f0:	98 87       	std	Y+8, r25	; 0x08
    44f2:	ea 81       	ldd	r30, Y+2	; 0x02
    44f4:	fb 81       	ldd	r31, Y+3	; 0x03
    44f6:	84 91       	lpm	r24, Z+
    44f8:	89 83       	std	Y+1, r24	; 0x01
    44fa:	89 81       	ldd	r24, Y+1	; 0x01
    44fc:	8c 83       	std	Y+4, r24	; 0x04
		if (c == 0) {									// last line
    44fe:	8c 81       	ldd	r24, Y+4	; 0x04
    4500:	88 23       	and	r24, r24
    4502:	91 f4       	brne	.+36     	; 0x4528 <cfg_test+0x62>
			text[j] = 0;
    4504:	2d 81       	ldd	r18, Y+5	; 0x05
    4506:	3e 81       	ldd	r19, Y+6	; 0x06
    4508:	ce 01       	movw	r24, r28
    450a:	09 96       	adiw	r24, 0x09	; 9
    450c:	fc 01       	movw	r30, r24
    450e:	e2 0f       	add	r30, r18
    4510:	f3 1f       	adc	r31, r19
    4512:	10 82       	st	Z, r1
			cfg_parse(text);
    4514:	ce 01       	movw	r24, r28
    4516:	09 96       	adiw	r24, 0x09	; 9
    4518:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    451c:	e0 96       	adiw	r28, 0x30	; 48
    451e:	cd bf       	out	0x3d, r28	; 61
    4520:	de bf       	out	0x3e, r29	; 62
    4522:	cf 91       	pop	r28
    4524:	df 91       	pop	r29
    4526:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    4528:	8c 81       	ldd	r24, Y+4	; 0x04
    452a:	8d 30       	cpi	r24, 0x0D	; 13
    452c:	31 f0       	breq	.+12     	; 0x453a <cfg_test+0x74>
    452e:	8c 81       	ldd	r24, Y+4	; 0x04
    4530:	8a 30       	cpi	r24, 0x0A	; 10
    4532:	19 f0       	breq	.+6      	; 0x453a <cfg_test+0x74>
    4534:	8c 81       	ldd	r24, Y+4	; 0x04
    4536:	8b 33       	cpi	r24, 0x3B	; 59
    4538:	79 f4       	brne	.+30     	; 0x4558 <cfg_test+0x92>
			text[j] = 0;							// terminate the string
    453a:	2d 81       	ldd	r18, Y+5	; 0x05
    453c:	3e 81       	ldd	r19, Y+6	; 0x06
    453e:	ce 01       	movw	r24, r28
    4540:	09 96       	adiw	r24, 0x09	; 9
    4542:	fc 01       	movw	r30, r24
    4544:	e2 0f       	add	r30, r18
    4546:	f3 1f       	adc	r31, r19
    4548:	10 82       	st	Z, r1
			cfg_parse(text);						// parse line 
    454a:	ce 01       	movw	r24, r28
    454c:	09 96       	adiw	r24, 0x09	; 9
    454e:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <cfg_parse>
			j = 0;			
    4552:	1d 82       	std	Y+5, r1	; 0x05
    4554:	1e 82       	std	Y+6, r1	; 0x06
    4556:	c2 cf       	rjmp	.-124    	; 0x44dc <cfg_test+0x16>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    4558:	8c 81       	ldd	r24, Y+4	; 0x04
    455a:	81 32       	cpi	r24, 0x21	; 33
    455c:	08 f4       	brcc	.+2      	; 0x4560 <cfg_test+0x9a>
    455e:	be cf       	rjmp	.-132    	; 0x44dc <cfg_test+0x16>
		} else {
			text[j++] = c;							// put characters into line
    4560:	2d 81       	ldd	r18, Y+5	; 0x05
    4562:	3e 81       	ldd	r19, Y+6	; 0x06
    4564:	ce 01       	movw	r24, r28
    4566:	09 96       	adiw	r24, 0x09	; 9
    4568:	fc 01       	movw	r30, r24
    456a:	e2 0f       	add	r30, r18
    456c:	f3 1f       	adc	r31, r19
    456e:	8c 81       	ldd	r24, Y+4	; 0x04
    4570:	80 83       	st	Z, r24
    4572:	8d 81       	ldd	r24, Y+5	; 0x05
    4574:	9e 81       	ldd	r25, Y+6	; 0x06
    4576:	01 96       	adiw	r24, 0x01	; 1
    4578:	8d 83       	std	Y+5, r24	; 0x05
    457a:	9e 83       	std	Y+6, r25	; 0x06
    457c:	af cf       	rjmp	.-162    	; 0x44dc <cfg_test+0x16>

0000457e <en_init>:
#include "encoder.h"
#include "hardware.h"


void en_init(void) 
{
    457e:	df 93       	push	r29
    4580:	cf 93       	push	r28
    4582:	cd b7       	in	r28, 0x3d	; 61
    4584:	de b7       	in	r29, 0x3e	; 62
	return;
}
    4586:	cf 91       	pop	r28
    4588:	df 91       	pop	r29
    458a:	08 95       	ret

0000458c <en_write>:
 * This is a hack to hide the fact that we've scattered the encode output
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
    458c:	df 93       	push	r29
    458e:	cf 93       	push	r28
    4590:	0f 92       	push	r0
    4592:	cd b7       	in	r28, 0x3d	; 61
    4594:	de b7       	in	r29, 0x3e	; 62
    4596:	89 83       	std	Y+1, r24	; 0x01
	if (b && 0x01) { 								// b0 is on A axis
    4598:	89 81       	ldd	r24, Y+1	; 0x01
    459a:	88 23       	and	r24, r24
    459c:	39 f0       	breq	.+14     	; 0x45ac <en_write+0x20>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    459e:	e0 91 96 24 	lds	r30, 0x2496
    45a2:	f0 91 97 24 	lds	r31, 0x2497
    45a6:	80 e2       	ldi	r24, 0x20	; 32
    45a8:	85 83       	std	Z+5, r24	; 0x05
    45aa:	06 c0       	rjmp	.+12     	; 0x45b8 <en_write+0x2c>
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    45ac:	e0 91 96 24 	lds	r30, 0x2496
    45b0:	f0 91 97 24 	lds	r31, 0x2497
    45b4:	80 e2       	ldi	r24, 0x20	; 32
    45b6:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
    45b8:	89 81       	ldd	r24, Y+1	; 0x01
    45ba:	88 23       	and	r24, r24
    45bc:	39 f0       	breq	.+14     	; 0x45cc <en_write+0x40>
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    45be:	e0 91 86 24 	lds	r30, 0x2486
    45c2:	f0 91 87 24 	lds	r31, 0x2487
    45c6:	80 e2       	ldi	r24, 0x20	; 32
    45c8:	85 83       	std	Z+5, r24	; 0x05
    45ca:	06 c0       	rjmp	.+12     	; 0x45d8 <en_write+0x4c>
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    45cc:	e0 91 86 24 	lds	r30, 0x2486
    45d0:	f0 91 87 24 	lds	r31, 0x2487
    45d4:	80 e2       	ldi	r24, 0x20	; 32
    45d6:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
    45d8:	89 81       	ldd	r24, Y+1	; 0x01
    45da:	88 23       	and	r24, r24
    45dc:	39 f0       	breq	.+14     	; 0x45ec <en_write+0x60>
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    45de:	e0 91 76 24 	lds	r30, 0x2476
    45e2:	f0 91 77 24 	lds	r31, 0x2477
    45e6:	80 e2       	ldi	r24, 0x20	; 32
    45e8:	85 83       	std	Z+5, r24	; 0x05
    45ea:	06 c0       	rjmp	.+12     	; 0x45f8 <en_write+0x6c>
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    45ec:	e0 91 76 24 	lds	r30, 0x2476
    45f0:	f0 91 77 24 	lds	r31, 0x2477
    45f4:	80 e2       	ldi	r24, 0x20	; 32
    45f6:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
    45f8:	89 81       	ldd	r24, Y+1	; 0x01
    45fa:	88 23       	and	r24, r24
    45fc:	39 f0       	breq	.+14     	; 0x460c <en_write+0x80>
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    45fe:	e0 91 66 24 	lds	r30, 0x2466
    4602:	f0 91 67 24 	lds	r31, 0x2467
    4606:	80 e2       	ldi	r24, 0x20	; 32
    4608:	85 83       	std	Z+5, r24	; 0x05
    460a:	06 c0       	rjmp	.+12     	; 0x4618 <en_write+0x8c>
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    460c:	e0 91 66 24 	lds	r30, 0x2466
    4610:	f0 91 67 24 	lds	r31, 0x2467
    4614:	80 e2       	ldi	r24, 0x20	; 32
    4616:	86 83       	std	Z+6, r24	; 0x06
	}
}
    4618:	0f 90       	pop	r0
    461a:	cf 91       	pop	r28
    461c:	df 91       	pop	r29
    461e:	08 95       	ret

00004620 <xmega_init>:

/*
 * xmega_init()
 */

void xmega_init(void) {
    4620:	df 93       	push	r29
    4622:	cf 93       	push	r28
    4624:	cd b7       	in	r28, 0x3d	; 61
    4626:	de b7       	in	r29, 0x3e	; 62
	xmega_init_clocks();
    4628:	0e 94 19 23 	call	0x4632	; 0x4632 <xmega_init_clocks>
}
    462c:	cf 91       	pop	r28
    462e:	df 91       	pop	r29
    4630:	08 95       	ret

00004632 <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    4632:	df 93       	push	r29
    4634:	cf 93       	push	r28
    4636:	cd b7       	in	r28, 0x3d	; 61
    4638:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    463a:	e0 e5       	ldi	r30, 0x50	; 80
    463c:	f0 e0       	ldi	r31, 0x00	; 0
    463e:	8b ec       	ldi	r24, 0xCB	; 203
    4640:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    4642:	e0 e5       	ldi	r30, 0x50	; 80
    4644:	f0 e0       	ldi	r31, 0x00	; 0
    4646:	88 e0       	ldi	r24, 0x08	; 8
    4648:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    464a:	e0 e5       	ldi	r30, 0x50	; 80
    464c:	f0 e0       	ldi	r31, 0x00	; 0
    464e:	81 81       	ldd	r24, Z+1	; 0x01
    4650:	88 2f       	mov	r24, r24
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	88 70       	andi	r24, 0x08	; 8
    4656:	90 70       	andi	r25, 0x00	; 0
    4658:	00 97       	sbiw	r24, 0x00	; 0
    465a:	b9 f3       	breq	.-18     	; 0x464a <xmega_init_clocks+0x18>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    465c:	e0 e5       	ldi	r30, 0x50	; 80
    465e:	f0 e0       	ldi	r31, 0x00	; 0
    4660:	82 ec       	ldi	r24, 0xC2	; 194
    4662:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    4664:	e0 e5       	ldi	r30, 0x50	; 80
    4666:	f0 e0       	ldi	r31, 0x00	; 0
    4668:	88 e1       	ldi	r24, 0x18	; 24
    466a:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    466c:	e0 e5       	ldi	r30, 0x50	; 80
    466e:	f0 e0       	ldi	r31, 0x00	; 0
    4670:	81 81       	ldd	r24, Z+1	; 0x01
    4672:	88 2f       	mov	r24, r24
    4674:	90 e0       	ldi	r25, 0x00	; 0
    4676:	80 71       	andi	r24, 0x10	; 16
    4678:	90 70       	andi	r25, 0x00	; 0
    467a:	00 97       	sbiw	r24, 0x00	; 0
    467c:	b9 f3       	breq	.-18     	; 0x466c <xmega_init_clocks+0x3a>
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
    467e:	80 e4       	ldi	r24, 0x40	; 64
    4680:	90 e0       	ldi	r25, 0x00	; 0
    4682:	64 e0       	ldi	r22, 0x04	; 4
    4684:	0e 94 4e 23 	call	0x469c	; 0x469c <CCPWrite>
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    4688:	a0 e5       	ldi	r26, 0x50	; 80
    468a:	b0 e0       	ldi	r27, 0x00	; 0
    468c:	e0 e5       	ldi	r30, 0x50	; 80
    468e:	f0 e0       	ldi	r31, 0x00	; 0
    4690:	80 81       	ld	r24, Z
    4692:	8e 7f       	andi	r24, 0xFE	; 254
    4694:	8c 93       	st	X, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    4696:	cf 91       	pop	r28
    4698:	df 91       	pop	r29
    469a:	08 95       	ret

0000469c <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    469c:	0f 93       	push	r16
    469e:	df 93       	push	r29
    46a0:	cf 93       	push	r28
    46a2:	00 d0       	rcall	.+0      	; 0x46a4 <CCPWrite+0x8>
    46a4:	00 d0       	rcall	.+0      	; 0x46a6 <CCPWrite+0xa>
    46a6:	cd b7       	in	r28, 0x3d	; 61
    46a8:	de b7       	in	r29, 0x3e	; 62
    46aa:	8c 83       	std	Y+4, r24	; 0x04
    46ac:	9d 83       	std	Y+5, r25	; 0x05
    46ae:	6e 83       	std	Y+6, r22	; 0x06

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    46b0:	ef e3       	ldi	r30, 0x3F	; 63
    46b2:	f0 e0       	ldi	r31, 0x00	; 0
    46b4:	80 81       	ld	r24, Z
    46b6:	8b 83       	std	Y+3, r24	; 0x03
    46b8:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
    46ba:	8c 81       	ldd	r24, Y+4	; 0x04
    46bc:	9d 81       	ldd	r25, Y+5	; 0x05
    46be:	89 83       	std	Y+1, r24	; 0x01
    46c0:	9a 83       	std	Y+2, r25	; 0x02
#ifdef RAMPZ
	RAMPZ = 0;
    46c2:	eb e3       	ldi	r30, 0x3B	; 59
    46c4:	f0 e0       	ldi	r31, 0x00	; 0
    46c6:	10 82       	st	Z, r1
#endif
	asm volatile(
    46c8:	89 81       	ldd	r24, Y+1	; 0x01
    46ca:	9a 81       	ldd	r25, Y+2	; 0x02
    46cc:	2e 81       	ldd	r18, Y+6	; 0x06
    46ce:	fc 01       	movw	r30, r24
    46d0:	08 ed       	ldi	r16, 0xD8	; 216
    46d2:	04 bf       	out	0x34, r16	; 52
    46d4:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    46d6:	ef e3       	ldi	r30, 0x3F	; 63
    46d8:	f0 e0       	ldi	r31, 0x00	; 0
    46da:	8b 81       	ldd	r24, Y+3	; 0x03
    46dc:	80 83       	st	Z, r24
#endif
}
    46de:	26 96       	adiw	r28, 0x06	; 6
    46e0:	cd bf       	out	0x3d, r28	; 61
    46e2:	de bf       	out	0x3e, r29	; 62
    46e4:	cf 91       	pop	r28
    46e6:	df 91       	pop	r29
    46e8:	0f 91       	pop	r16
    46ea:	08 95       	ret

000046ec <mc_init>:
/* 
 * mc_init() 
 */

void mc_init()
{
    46ec:	df 93       	push	r29
    46ee:	cf 93       	push	r28
    46f0:	cd b7       	in	r28, 0x3d	; 61
    46f2:	de b7       	in	r29, 0x3e	; 62
	clear_vector(mc.position);		// zero robot position
    46f4:	85 e8       	ldi	r24, 0x85	; 133
    46f6:	91 e2       	ldi	r25, 0x21	; 33
    46f8:	60 e0       	ldi	r22, 0x00	; 0
    46fa:	70 e0       	ldi	r23, 0x00	; 0
    46fc:	4c e0       	ldi	r20, 0x0C	; 12
    46fe:	50 e0       	ldi	r21, 0x00	; 0
    4700:	0e 94 d0 61 	call	0xc3a0	; 0xc3a0 <memset>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    4704:	10 92 84 21 	sts	0x2184, r1
	ma.arc_state = MC_STATE_OFF;
    4708:	10 92 0a 25 	sts	0x250A, r1
}
    470c:	cf 91       	pop	r28
    470e:	df 91       	pop	r29
    4710:	08 95       	ret

00004712 <mc_motion_stop>:
/* 
 * mc_motion_stop() - stop all current motions
 */

void mc_motion_stop()
{
    4712:	df 93       	push	r29
    4714:	cf 93       	push	r28
    4716:	cd b7       	in	r28, 0x3d	; 61
    4718:	de b7       	in	r29, 0x3e	; 62
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    471a:	10 92 84 21 	sts	0x2184, r1
	ma.arc_state = MC_STATE_OFF;
    471e:	10 92 0a 25 	sts	0x250A, r1
}
    4722:	cf 91       	pop	r28
    4724:	df 91       	pop	r29
    4726:	08 95       	ret

00004728 <mc_line>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    4728:	8f 92       	push	r8
    472a:	9f 92       	push	r9
    472c:	af 92       	push	r10
    472e:	bf 92       	push	r11
    4730:	cf 92       	push	r12
    4732:	df 92       	push	r13
    4734:	ef 92       	push	r14
    4736:	ff 92       	push	r15
    4738:	0f 93       	push	r16
    473a:	1f 93       	push	r17
    473c:	df 93       	push	r29
    473e:	cf 93       	push	r28
    4740:	cd b7       	in	r28, 0x3d	; 61
    4742:	de b7       	in	r29, 0x3e	; 62
    4744:	62 97       	sbiw	r28, 0x12	; 18
    4746:	cd bf       	out	0x3d, r28	; 61
    4748:	de bf       	out	0x3e, r29	; 62
    474a:	69 83       	std	Y+1, r22	; 0x01
    474c:	7a 83       	std	Y+2, r23	; 0x02
    474e:	8b 83       	std	Y+3, r24	; 0x03
    4750:	9c 83       	std	Y+4, r25	; 0x04
    4752:	2d 83       	std	Y+5, r18	; 0x05
    4754:	3e 83       	std	Y+6, r19	; 0x06
    4756:	4f 83       	std	Y+7, r20	; 0x07
    4758:	58 87       	std	Y+8, r21	; 0x08
    475a:	e9 86       	std	Y+9, r14	; 0x09
    475c:	fa 86       	std	Y+10, r15	; 0x0a
    475e:	0b 87       	std	Y+11, r16	; 0x0b
    4760:	1c 87       	std	Y+12, r17	; 0x0c
    4762:	ad 86       	std	Y+13, r10	; 0x0d
    4764:	be 86       	std	Y+14, r11	; 0x0e
    4766:	cf 86       	std	Y+15, r12	; 0x0f
    4768:	d8 8a       	std	Y+16, r13	; 0x10
    476a:	89 8a       	std	Y+17, r8	; 0x11
    476c:	9a 8a       	std	Y+18, r9	; 0x12
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    476e:	80 91 bb 24 	lds	r24, 0x24BB
    4772:	90 91 bc 24 	lds	r25, 0x24BC
    4776:	a0 91 bd 24 	lds	r26, 0x24BD
    477a:	b0 91 be 24 	lds	r27, 0x24BE
    477e:	bc 01       	movw	r22, r24
    4780:	cd 01       	movw	r24, r26
    4782:	29 81       	ldd	r18, Y+1	; 0x01
    4784:	3a 81       	ldd	r19, Y+2	; 0x02
    4786:	4b 81       	ldd	r20, Y+3	; 0x03
    4788:	5c 81       	ldd	r21, Y+4	; 0x04
    478a:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    478e:	dc 01       	movw	r26, r24
    4790:	cb 01       	movw	r24, r22
    4792:	bc 01       	movw	r22, r24
    4794:	cd 01       	movw	r24, r26
    4796:	0e 94 bf 5d 	call	0xbb7e	; 0xbb7e <lround>
    479a:	dc 01       	movw	r26, r24
    479c:	cb 01       	movw	r24, r22
    479e:	80 93 91 21 	sts	0x2191, r24
    47a2:	90 93 92 21 	sts	0x2192, r25
    47a6:	a0 93 93 21 	sts	0x2193, r26
    47aa:	b0 93 94 21 	sts	0x2194, r27
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    47ae:	80 91 d3 24 	lds	r24, 0x24D3
    47b2:	90 91 d4 24 	lds	r25, 0x24D4
    47b6:	a0 91 d5 24 	lds	r26, 0x24D5
    47ba:	b0 91 d6 24 	lds	r27, 0x24D6
    47be:	bc 01       	movw	r22, r24
    47c0:	cd 01       	movw	r24, r26
    47c2:	2d 81       	ldd	r18, Y+5	; 0x05
    47c4:	3e 81       	ldd	r19, Y+6	; 0x06
    47c6:	4f 81       	ldd	r20, Y+7	; 0x07
    47c8:	58 85       	ldd	r21, Y+8	; 0x08
    47ca:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    47ce:	dc 01       	movw	r26, r24
    47d0:	cb 01       	movw	r24, r22
    47d2:	bc 01       	movw	r22, r24
    47d4:	cd 01       	movw	r24, r26
    47d6:	0e 94 bf 5d 	call	0xbb7e	; 0xbb7e <lround>
    47da:	dc 01       	movw	r26, r24
    47dc:	cb 01       	movw	r24, r22
    47de:	80 93 95 21 	sts	0x2195, r24
    47e2:	90 93 96 21 	sts	0x2196, r25
    47e6:	a0 93 97 21 	sts	0x2197, r26
    47ea:	b0 93 98 21 	sts	0x2198, r27
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    47ee:	80 91 eb 24 	lds	r24, 0x24EB
    47f2:	90 91 ec 24 	lds	r25, 0x24EC
    47f6:	a0 91 ed 24 	lds	r26, 0x24ED
    47fa:	b0 91 ee 24 	lds	r27, 0x24EE
    47fe:	bc 01       	movw	r22, r24
    4800:	cd 01       	movw	r24, r26
    4802:	29 85       	ldd	r18, Y+9	; 0x09
    4804:	3a 85       	ldd	r19, Y+10	; 0x0a
    4806:	4b 85       	ldd	r20, Y+11	; 0x0b
    4808:	5c 85       	ldd	r21, Y+12	; 0x0c
    480a:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    480e:	dc 01       	movw	r26, r24
    4810:	cb 01       	movw	r24, r22
    4812:	bc 01       	movw	r22, r24
    4814:	cd 01       	movw	r24, r26
    4816:	0e 94 bf 5d 	call	0xbb7e	; 0xbb7e <lround>
    481a:	dc 01       	movw	r26, r24
    481c:	cb 01       	movw	r24, r22
    481e:	80 93 99 21 	sts	0x2199, r24
    4822:	90 93 9a 21 	sts	0x219A, r25
    4826:	a0 93 9b 21 	sts	0x219B, r26
    482a:	b0 93 9c 21 	sts	0x219C, r27

	mc.steps[X] = mc.target[X]-mc.position[X];
    482e:	20 91 91 21 	lds	r18, 0x2191
    4832:	30 91 92 21 	lds	r19, 0x2192
    4836:	40 91 93 21 	lds	r20, 0x2193
    483a:	50 91 94 21 	lds	r21, 0x2194
    483e:	80 91 85 21 	lds	r24, 0x2185
    4842:	90 91 86 21 	lds	r25, 0x2186
    4846:	a0 91 87 21 	lds	r26, 0x2187
    484a:	b0 91 88 21 	lds	r27, 0x2188
    484e:	79 01       	movw	r14, r18
    4850:	8a 01       	movw	r16, r20
    4852:	e8 1a       	sub	r14, r24
    4854:	f9 0a       	sbc	r15, r25
    4856:	0a 0b       	sbc	r16, r26
    4858:	1b 0b       	sbc	r17, r27
    485a:	d8 01       	movw	r26, r16
    485c:	c7 01       	movw	r24, r14
    485e:	80 93 9d 21 	sts	0x219D, r24
    4862:	90 93 9e 21 	sts	0x219E, r25
    4866:	a0 93 9f 21 	sts	0x219F, r26
    486a:	b0 93 a0 21 	sts	0x21A0, r27
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    486e:	20 91 95 21 	lds	r18, 0x2195
    4872:	30 91 96 21 	lds	r19, 0x2196
    4876:	40 91 97 21 	lds	r20, 0x2197
    487a:	50 91 98 21 	lds	r21, 0x2198
    487e:	80 91 89 21 	lds	r24, 0x2189
    4882:	90 91 8a 21 	lds	r25, 0x218A
    4886:	a0 91 8b 21 	lds	r26, 0x218B
    488a:	b0 91 8c 21 	lds	r27, 0x218C
    488e:	79 01       	movw	r14, r18
    4890:	8a 01       	movw	r16, r20
    4892:	e8 1a       	sub	r14, r24
    4894:	f9 0a       	sbc	r15, r25
    4896:	0a 0b       	sbc	r16, r26
    4898:	1b 0b       	sbc	r17, r27
    489a:	d8 01       	movw	r26, r16
    489c:	c7 01       	movw	r24, r14
    489e:	80 93 a1 21 	sts	0x21A1, r24
    48a2:	90 93 a2 21 	sts	0x21A2, r25
    48a6:	a0 93 a3 21 	sts	0x21A3, r26
    48aa:	b0 93 a4 21 	sts	0x21A4, r27
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    48ae:	20 91 99 21 	lds	r18, 0x2199
    48b2:	30 91 9a 21 	lds	r19, 0x219A
    48b6:	40 91 9b 21 	lds	r20, 0x219B
    48ba:	50 91 9c 21 	lds	r21, 0x219C
    48be:	80 91 8d 21 	lds	r24, 0x218D
    48c2:	90 91 8e 21 	lds	r25, 0x218E
    48c6:	a0 91 8f 21 	lds	r26, 0x218F
    48ca:	b0 91 90 21 	lds	r27, 0x2190
    48ce:	79 01       	movw	r14, r18
    48d0:	8a 01       	movw	r16, r20
    48d2:	e8 1a       	sub	r14, r24
    48d4:	f9 0a       	sbc	r15, r25
    48d6:	0a 0b       	sbc	r16, r26
    48d8:	1b 0b       	sbc	r17, r27
    48da:	d8 01       	movw	r26, r16
    48dc:	c7 01       	movw	r24, r14
    48de:	80 93 a5 21 	sts	0x21A5, r24
    48e2:	90 93 a6 21 	sts	0x21A6, r25
    48e6:	a0 93 a7 21 	sts	0x21A7, r26
    48ea:	b0 93 a8 21 	sts	0x21A8, r27

	if (invert_feed_rate) {
    48ee:	89 89       	ldd	r24, Y+17	; 0x11
    48f0:	9a 89       	ldd	r25, Y+18	; 0x12
    48f2:	00 97       	sbiw	r24, 0x00	; 0
    48f4:	d9 f0       	breq	.+54     	; 0x492c <mc_line+0x204>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    48f6:	60 ec       	ldi	r22, 0xC0	; 192
    48f8:	71 ee       	ldi	r23, 0xE1	; 225
    48fa:	84 e6       	ldi	r24, 0x64	; 100
    48fc:	9c e4       	ldi	r25, 0x4C	; 76
    48fe:	2d 85       	ldd	r18, Y+13	; 0x0d
    4900:	3e 85       	ldd	r19, Y+14	; 0x0e
    4902:	4f 85       	ldd	r20, Y+15	; 0x0f
    4904:	58 89       	ldd	r21, Y+16	; 0x10
    4906:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    490a:	dc 01       	movw	r26, r24
    490c:	cb 01       	movw	r24, r22
    490e:	bc 01       	movw	r22, r24
    4910:	cd 01       	movw	r24, r26
    4912:	0e 94 bf 5d 	call	0xbb7e	; 0xbb7e <lround>
    4916:	dc 01       	movw	r26, r24
    4918:	cb 01       	movw	r24, r22
    491a:	80 93 a9 21 	sts	0x21A9, r24
    491e:	90 93 aa 21 	sts	0x21AA, r25
    4922:	a0 93 ab 21 	sts	0x21AB, r26
    4926:	b0 93 ac 21 	sts	0x21AC, r27
    492a:	ac c0       	rjmp	.+344    	; 0x4a84 <mc_line+0x35c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    492c:	80 91 9d 21 	lds	r24, 0x219D
    4930:	90 91 9e 21 	lds	r25, 0x219E
    4934:	a0 91 9f 21 	lds	r26, 0x219F
    4938:	b0 91 a0 21 	lds	r27, 0x21A0
    493c:	bc 01       	movw	r22, r24
    493e:	cd 01       	movw	r24, r26
    4940:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    4944:	dc 01       	movw	r26, r24
    4946:	cb 01       	movw	r24, r22
    4948:	20 91 bb 24 	lds	r18, 0x24BB
    494c:	30 91 bc 24 	lds	r19, 0x24BC
    4950:	40 91 bd 24 	lds	r20, 0x24BD
    4954:	50 91 be 24 	lds	r21, 0x24BE
    4958:	bc 01       	movw	r22, r24
    495a:	cd 01       	movw	r24, r26
    495c:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    4960:	dc 01       	movw	r26, r24
    4962:	cb 01       	movw	r24, r22
    4964:	bc 01       	movw	r22, r24
    4966:	cd 01       	movw	r24, r26
    4968:	0e 94 9a 5e 	call	0xbd34	; 0xbd34 <square>
    496c:	7b 01       	movw	r14, r22
    496e:	8c 01       	movw	r16, r24
    4970:	80 91 a1 21 	lds	r24, 0x21A1
    4974:	90 91 a2 21 	lds	r25, 0x21A2
    4978:	a0 91 a3 21 	lds	r26, 0x21A3
    497c:	b0 91 a4 21 	lds	r27, 0x21A4
    4980:	bc 01       	movw	r22, r24
    4982:	cd 01       	movw	r24, r26
    4984:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    4988:	dc 01       	movw	r26, r24
    498a:	cb 01       	movw	r24, r22
    498c:	20 91 d3 24 	lds	r18, 0x24D3
    4990:	30 91 d4 24 	lds	r19, 0x24D4
    4994:	40 91 d5 24 	lds	r20, 0x24D5
    4998:	50 91 d6 24 	lds	r21, 0x24D6
    499c:	bc 01       	movw	r22, r24
    499e:	cd 01       	movw	r24, r26
    49a0:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    49a4:	dc 01       	movw	r26, r24
    49a6:	cb 01       	movw	r24, r22
    49a8:	bc 01       	movw	r22, r24
    49aa:	cd 01       	movw	r24, r26
    49ac:	0e 94 9a 5e 	call	0xbd34	; 0xbd34 <square>
    49b0:	9b 01       	movw	r18, r22
    49b2:	ac 01       	movw	r20, r24
    49b4:	c8 01       	movw	r24, r16
    49b6:	b7 01       	movw	r22, r14
    49b8:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <__addsf3>
    49bc:	dc 01       	movw	r26, r24
    49be:	cb 01       	movw	r24, r22
    49c0:	7c 01       	movw	r14, r24
    49c2:	8d 01       	movw	r16, r26
    49c4:	80 91 a5 21 	lds	r24, 0x21A5
    49c8:	90 91 a6 21 	lds	r25, 0x21A6
    49cc:	a0 91 a7 21 	lds	r26, 0x21A7
    49d0:	b0 91 a8 21 	lds	r27, 0x21A8
    49d4:	bc 01       	movw	r22, r24
    49d6:	cd 01       	movw	r24, r26
    49d8:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    49dc:	dc 01       	movw	r26, r24
    49de:	cb 01       	movw	r24, r22
    49e0:	20 91 eb 24 	lds	r18, 0x24EB
    49e4:	30 91 ec 24 	lds	r19, 0x24EC
    49e8:	40 91 ed 24 	lds	r20, 0x24ED
    49ec:	50 91 ee 24 	lds	r21, 0x24EE
    49f0:	bc 01       	movw	r22, r24
    49f2:	cd 01       	movw	r24, r26
    49f4:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    49f8:	dc 01       	movw	r26, r24
    49fa:	cb 01       	movw	r24, r22
    49fc:	bc 01       	movw	r22, r24
    49fe:	cd 01       	movw	r24, r26
    4a00:	0e 94 9a 5e 	call	0xbd34	; 0xbd34 <square>
    4a04:	9b 01       	movw	r18, r22
    4a06:	ac 01       	movw	r20, r24
    4a08:	c8 01       	movw	r24, r16
    4a0a:	b7 01       	movw	r22, r14
    4a0c:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <__addsf3>
    4a10:	dc 01       	movw	r26, r24
    4a12:	cb 01       	movw	r24, r22
    4a14:	bc 01       	movw	r22, r24
    4a16:	cd 01       	movw	r24, r26
    4a18:	0e 94 5c 5e 	call	0xbcb8	; 0xbcb8 <sqrt>
    4a1c:	dc 01       	movw	r26, r24
    4a1e:	cb 01       	movw	r24, r22
    4a20:	80 93 ad 21 	sts	0x21AD, r24
    4a24:	90 93 ae 21 	sts	0x21AE, r25
    4a28:	a0 93 af 21 	sts	0x21AF, r26
    4a2c:	b0 93 b0 21 	sts	0x21B0, r27
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    4a30:	80 91 ad 21 	lds	r24, 0x21AD
    4a34:	90 91 ae 21 	lds	r25, 0x21AE
    4a38:	a0 91 af 21 	lds	r26, 0x21AF
    4a3c:	b0 91 b0 21 	lds	r27, 0x21B0
    4a40:	bc 01       	movw	r22, r24
    4a42:	cd 01       	movw	r24, r26
    4a44:	2d 85       	ldd	r18, Y+13	; 0x0d
    4a46:	3e 85       	ldd	r19, Y+14	; 0x0e
    4a48:	4f 85       	ldd	r20, Y+15	; 0x0f
    4a4a:	58 89       	ldd	r21, Y+16	; 0x10
    4a4c:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    4a50:	dc 01       	movw	r26, r24
    4a52:	cb 01       	movw	r24, r22
    4a54:	bc 01       	movw	r22, r24
    4a56:	cd 01       	movw	r24, r26
    4a58:	20 e0       	ldi	r18, 0x00	; 0
    4a5a:	34 e2       	ldi	r19, 0x24	; 36
    4a5c:	44 e7       	ldi	r20, 0x74	; 116
    4a5e:	59 e4       	ldi	r21, 0x49	; 73
    4a60:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    4a64:	dc 01       	movw	r26, r24
    4a66:	cb 01       	movw	r24, r22
    4a68:	bc 01       	movw	r22, r24
    4a6a:	cd 01       	movw	r24, r26
    4a6c:	0e 94 bf 5d 	call	0xbb7e	; 0xbb7e <lround>
    4a70:	dc 01       	movw	r26, r24
    4a72:	cb 01       	movw	r24, r22
    4a74:	80 93 a9 21 	sts	0x21A9, r24
    4a78:	90 93 aa 21 	sts	0x21AA, r25
    4a7c:	a0 93 ab 21 	sts	0x21AB, r26
    4a80:	b0 93 ac 21 	sts	0x21AC, r27
	}
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    4a84:	80 91 9d 21 	lds	r24, 0x219D
    4a88:	90 91 9e 21 	lds	r25, 0x219E
    4a8c:	a0 91 9f 21 	lds	r26, 0x219F
    4a90:	b0 91 a0 21 	lds	r27, 0x21A0
    4a94:	20 91 a1 21 	lds	r18, 0x21A1
    4a98:	30 91 a2 21 	lds	r19, 0x21A2
    4a9c:	40 91 a3 21 	lds	r20, 0x21A3
    4aa0:	50 91 a4 21 	lds	r21, 0x21A4
    4aa4:	e0 90 a5 21 	lds	r14, 0x21A5
    4aa8:	f0 90 a6 21 	lds	r15, 0x21A6
    4aac:	00 91 a7 21 	lds	r16, 0x21A7
    4ab0:	10 91 a8 21 	lds	r17, 0x21A8
    4ab4:	a0 90 a9 21 	lds	r10, 0x21A9
    4ab8:	b0 90 aa 21 	lds	r11, 0x21AA
    4abc:	c0 90 ab 21 	lds	r12, 0x21AB
    4ac0:	d0 90 ac 21 	lds	r13, 0x21AC
    4ac4:	bc 01       	movw	r22, r24
    4ac6:	cd 01       	movw	r24, r26
    4ac8:	0e 94 a3 44 	call	0x8946	; 0x8946 <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    4acc:	85 e8       	ldi	r24, 0x85	; 133
    4ace:	91 e2       	ldi	r25, 0x21	; 33
    4ad0:	21 e9       	ldi	r18, 0x91	; 145
    4ad2:	31 e2       	ldi	r19, 0x21	; 33
    4ad4:	b9 01       	movw	r22, r18
    4ad6:	4c e0       	ldi	r20, 0x0C	; 12
    4ad8:	50 e0       	ldi	r21, 0x00	; 0
    4ada:	0e 94 c7 61 	call	0xc38e	; 0xc38e <memcpy>
	return (TG_OK);
    4ade:	80 e0       	ldi	r24, 0x00	; 0
    4ae0:	90 e0       	ldi	r25, 0x00	; 0
}
    4ae2:	62 96       	adiw	r28, 0x12	; 18
    4ae4:	cd bf       	out	0x3d, r28	; 61
    4ae6:	de bf       	out	0x3e, r29	; 62
    4ae8:	cf 91       	pop	r28
    4aea:	df 91       	pop	r29
    4aec:	1f 91       	pop	r17
    4aee:	0f 91       	pop	r16
    4af0:	ff 90       	pop	r15
    4af2:	ef 90       	pop	r14
    4af4:	df 90       	pop	r13
    4af6:	cf 90       	pop	r12
    4af8:	bf 90       	pop	r11
    4afa:	af 90       	pop	r10
    4afc:	9f 90       	pop	r9
    4afe:	8f 90       	pop	r8
    4b00:	08 95       	ret

00004b02 <mc_line_nonblock>:
/* 
 * mc_line_nonblock() - mc_line with non-blocking behavior
 */

int mc_line_nonblock(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    4b02:	8f 92       	push	r8
    4b04:	9f 92       	push	r9
    4b06:	af 92       	push	r10
    4b08:	bf 92       	push	r11
    4b0a:	cf 92       	push	r12
    4b0c:	df 92       	push	r13
    4b0e:	ef 92       	push	r14
    4b10:	ff 92       	push	r15
    4b12:	0f 93       	push	r16
    4b14:	1f 93       	push	r17
    4b16:	df 93       	push	r29
    4b18:	cf 93       	push	r28
    4b1a:	cd b7       	in	r28, 0x3d	; 61
    4b1c:	de b7       	in	r29, 0x3e	; 62
    4b1e:	62 97       	sbiw	r28, 0x12	; 18
    4b20:	cd bf       	out	0x3d, r28	; 61
    4b22:	de bf       	out	0x3e, r29	; 62
    4b24:	69 83       	std	Y+1, r22	; 0x01
    4b26:	7a 83       	std	Y+2, r23	; 0x02
    4b28:	8b 83       	std	Y+3, r24	; 0x03
    4b2a:	9c 83       	std	Y+4, r25	; 0x04
    4b2c:	2d 83       	std	Y+5, r18	; 0x05
    4b2e:	3e 83       	std	Y+6, r19	; 0x06
    4b30:	4f 83       	std	Y+7, r20	; 0x07
    4b32:	58 87       	std	Y+8, r21	; 0x08
    4b34:	e9 86       	std	Y+9, r14	; 0x09
    4b36:	fa 86       	std	Y+10, r15	; 0x0a
    4b38:	0b 87       	std	Y+11, r16	; 0x0b
    4b3a:	1c 87       	std	Y+12, r17	; 0x0c
    4b3c:	ad 86       	std	Y+13, r10	; 0x0d
    4b3e:	be 86       	std	Y+14, r11	; 0x0e
    4b40:	cf 86       	std	Y+15, r12	; 0x0f
    4b42:	d8 8a       	std	Y+16, r13	; 0x10
    4b44:	89 8a       	std	Y+17, r8	; 0x11
    4b46:	9a 8a       	std	Y+18, r9	; 0x12
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    4b48:	80 91 bb 24 	lds	r24, 0x24BB
    4b4c:	90 91 bc 24 	lds	r25, 0x24BC
    4b50:	a0 91 bd 24 	lds	r26, 0x24BD
    4b54:	b0 91 be 24 	lds	r27, 0x24BE
    4b58:	bc 01       	movw	r22, r24
    4b5a:	cd 01       	movw	r24, r26
    4b5c:	29 81       	ldd	r18, Y+1	; 0x01
    4b5e:	3a 81       	ldd	r19, Y+2	; 0x02
    4b60:	4b 81       	ldd	r20, Y+3	; 0x03
    4b62:	5c 81       	ldd	r21, Y+4	; 0x04
    4b64:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    4b68:	dc 01       	movw	r26, r24
    4b6a:	cb 01       	movw	r24, r22
    4b6c:	bc 01       	movw	r22, r24
    4b6e:	cd 01       	movw	r24, r26
    4b70:	0e 94 bf 5d 	call	0xbb7e	; 0xbb7e <lround>
    4b74:	dc 01       	movw	r26, r24
    4b76:	cb 01       	movw	r24, r22
    4b78:	80 93 91 21 	sts	0x2191, r24
    4b7c:	90 93 92 21 	sts	0x2192, r25
    4b80:	a0 93 93 21 	sts	0x2193, r26
    4b84:	b0 93 94 21 	sts	0x2194, r27
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    4b88:	80 91 d3 24 	lds	r24, 0x24D3
    4b8c:	90 91 d4 24 	lds	r25, 0x24D4
    4b90:	a0 91 d5 24 	lds	r26, 0x24D5
    4b94:	b0 91 d6 24 	lds	r27, 0x24D6
    4b98:	bc 01       	movw	r22, r24
    4b9a:	cd 01       	movw	r24, r26
    4b9c:	2d 81       	ldd	r18, Y+5	; 0x05
    4b9e:	3e 81       	ldd	r19, Y+6	; 0x06
    4ba0:	4f 81       	ldd	r20, Y+7	; 0x07
    4ba2:	58 85       	ldd	r21, Y+8	; 0x08
    4ba4:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    4ba8:	dc 01       	movw	r26, r24
    4baa:	cb 01       	movw	r24, r22
    4bac:	bc 01       	movw	r22, r24
    4bae:	cd 01       	movw	r24, r26
    4bb0:	0e 94 bf 5d 	call	0xbb7e	; 0xbb7e <lround>
    4bb4:	dc 01       	movw	r26, r24
    4bb6:	cb 01       	movw	r24, r22
    4bb8:	80 93 95 21 	sts	0x2195, r24
    4bbc:	90 93 96 21 	sts	0x2196, r25
    4bc0:	a0 93 97 21 	sts	0x2197, r26
    4bc4:	b0 93 98 21 	sts	0x2198, r27
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    4bc8:	80 91 eb 24 	lds	r24, 0x24EB
    4bcc:	90 91 ec 24 	lds	r25, 0x24EC
    4bd0:	a0 91 ed 24 	lds	r26, 0x24ED
    4bd4:	b0 91 ee 24 	lds	r27, 0x24EE
    4bd8:	bc 01       	movw	r22, r24
    4bda:	cd 01       	movw	r24, r26
    4bdc:	29 85       	ldd	r18, Y+9	; 0x09
    4bde:	3a 85       	ldd	r19, Y+10	; 0x0a
    4be0:	4b 85       	ldd	r20, Y+11	; 0x0b
    4be2:	5c 85       	ldd	r21, Y+12	; 0x0c
    4be4:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    4be8:	dc 01       	movw	r26, r24
    4bea:	cb 01       	movw	r24, r22
    4bec:	bc 01       	movw	r22, r24
    4bee:	cd 01       	movw	r24, r26
    4bf0:	0e 94 bf 5d 	call	0xbb7e	; 0xbb7e <lround>
    4bf4:	dc 01       	movw	r26, r24
    4bf6:	cb 01       	movw	r24, r22
    4bf8:	80 93 99 21 	sts	0x2199, r24
    4bfc:	90 93 9a 21 	sts	0x219A, r25
    4c00:	a0 93 9b 21 	sts	0x219B, r26
    4c04:	b0 93 9c 21 	sts	0x219C, r27

	mc.steps[X] = mc.target[X]-mc.position[X];
    4c08:	20 91 91 21 	lds	r18, 0x2191
    4c0c:	30 91 92 21 	lds	r19, 0x2192
    4c10:	40 91 93 21 	lds	r20, 0x2193
    4c14:	50 91 94 21 	lds	r21, 0x2194
    4c18:	80 91 85 21 	lds	r24, 0x2185
    4c1c:	90 91 86 21 	lds	r25, 0x2186
    4c20:	a0 91 87 21 	lds	r26, 0x2187
    4c24:	b0 91 88 21 	lds	r27, 0x2188
    4c28:	79 01       	movw	r14, r18
    4c2a:	8a 01       	movw	r16, r20
    4c2c:	e8 1a       	sub	r14, r24
    4c2e:	f9 0a       	sbc	r15, r25
    4c30:	0a 0b       	sbc	r16, r26
    4c32:	1b 0b       	sbc	r17, r27
    4c34:	d8 01       	movw	r26, r16
    4c36:	c7 01       	movw	r24, r14
    4c38:	80 93 9d 21 	sts	0x219D, r24
    4c3c:	90 93 9e 21 	sts	0x219E, r25
    4c40:	a0 93 9f 21 	sts	0x219F, r26
    4c44:	b0 93 a0 21 	sts	0x21A0, r27
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    4c48:	20 91 95 21 	lds	r18, 0x2195
    4c4c:	30 91 96 21 	lds	r19, 0x2196
    4c50:	40 91 97 21 	lds	r20, 0x2197
    4c54:	50 91 98 21 	lds	r21, 0x2198
    4c58:	80 91 89 21 	lds	r24, 0x2189
    4c5c:	90 91 8a 21 	lds	r25, 0x218A
    4c60:	a0 91 8b 21 	lds	r26, 0x218B
    4c64:	b0 91 8c 21 	lds	r27, 0x218C
    4c68:	79 01       	movw	r14, r18
    4c6a:	8a 01       	movw	r16, r20
    4c6c:	e8 1a       	sub	r14, r24
    4c6e:	f9 0a       	sbc	r15, r25
    4c70:	0a 0b       	sbc	r16, r26
    4c72:	1b 0b       	sbc	r17, r27
    4c74:	d8 01       	movw	r26, r16
    4c76:	c7 01       	movw	r24, r14
    4c78:	80 93 a1 21 	sts	0x21A1, r24
    4c7c:	90 93 a2 21 	sts	0x21A2, r25
    4c80:	a0 93 a3 21 	sts	0x21A3, r26
    4c84:	b0 93 a4 21 	sts	0x21A4, r27
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    4c88:	20 91 99 21 	lds	r18, 0x2199
    4c8c:	30 91 9a 21 	lds	r19, 0x219A
    4c90:	40 91 9b 21 	lds	r20, 0x219B
    4c94:	50 91 9c 21 	lds	r21, 0x219C
    4c98:	80 91 8d 21 	lds	r24, 0x218D
    4c9c:	90 91 8e 21 	lds	r25, 0x218E
    4ca0:	a0 91 8f 21 	lds	r26, 0x218F
    4ca4:	b0 91 90 21 	lds	r27, 0x2190
    4ca8:	79 01       	movw	r14, r18
    4caa:	8a 01       	movw	r16, r20
    4cac:	e8 1a       	sub	r14, r24
    4cae:	f9 0a       	sbc	r15, r25
    4cb0:	0a 0b       	sbc	r16, r26
    4cb2:	1b 0b       	sbc	r17, r27
    4cb4:	d8 01       	movw	r26, r16
    4cb6:	c7 01       	movw	r24, r14
    4cb8:	80 93 a5 21 	sts	0x21A5, r24
    4cbc:	90 93 a6 21 	sts	0x21A6, r25
    4cc0:	a0 93 a7 21 	sts	0x21A7, r26
    4cc4:	b0 93 a8 21 	sts	0x21A8, r27

	if (invert_feed_rate) {
    4cc8:	89 89       	ldd	r24, Y+17	; 0x11
    4cca:	9a 89       	ldd	r25, Y+18	; 0x12
    4ccc:	00 97       	sbiw	r24, 0x00	; 0
    4cce:	d9 f0       	breq	.+54     	; 0x4d06 <mc_line_nonblock+0x204>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    4cd0:	60 ec       	ldi	r22, 0xC0	; 192
    4cd2:	71 ee       	ldi	r23, 0xE1	; 225
    4cd4:	84 e6       	ldi	r24, 0x64	; 100
    4cd6:	9c e4       	ldi	r25, 0x4C	; 76
    4cd8:	2d 85       	ldd	r18, Y+13	; 0x0d
    4cda:	3e 85       	ldd	r19, Y+14	; 0x0e
    4cdc:	4f 85       	ldd	r20, Y+15	; 0x0f
    4cde:	58 89       	ldd	r21, Y+16	; 0x10
    4ce0:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    4ce4:	dc 01       	movw	r26, r24
    4ce6:	cb 01       	movw	r24, r22
    4ce8:	bc 01       	movw	r22, r24
    4cea:	cd 01       	movw	r24, r26
    4cec:	0e 94 bf 5d 	call	0xbb7e	; 0xbb7e <lround>
    4cf0:	dc 01       	movw	r26, r24
    4cf2:	cb 01       	movw	r24, r22
    4cf4:	80 93 a9 21 	sts	0x21A9, r24
    4cf8:	90 93 aa 21 	sts	0x21AA, r25
    4cfc:	a0 93 ab 21 	sts	0x21AB, r26
    4d00:	b0 93 ac 21 	sts	0x21AC, r27
    4d04:	ac c0       	rjmp	.+344    	; 0x4e5e <mc_line_nonblock+0x35c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    4d06:	80 91 9d 21 	lds	r24, 0x219D
    4d0a:	90 91 9e 21 	lds	r25, 0x219E
    4d0e:	a0 91 9f 21 	lds	r26, 0x219F
    4d12:	b0 91 a0 21 	lds	r27, 0x21A0
    4d16:	bc 01       	movw	r22, r24
    4d18:	cd 01       	movw	r24, r26
    4d1a:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    4d1e:	dc 01       	movw	r26, r24
    4d20:	cb 01       	movw	r24, r22
    4d22:	20 91 bb 24 	lds	r18, 0x24BB
    4d26:	30 91 bc 24 	lds	r19, 0x24BC
    4d2a:	40 91 bd 24 	lds	r20, 0x24BD
    4d2e:	50 91 be 24 	lds	r21, 0x24BE
    4d32:	bc 01       	movw	r22, r24
    4d34:	cd 01       	movw	r24, r26
    4d36:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    4d3a:	dc 01       	movw	r26, r24
    4d3c:	cb 01       	movw	r24, r22
    4d3e:	bc 01       	movw	r22, r24
    4d40:	cd 01       	movw	r24, r26
    4d42:	0e 94 9a 5e 	call	0xbd34	; 0xbd34 <square>
    4d46:	7b 01       	movw	r14, r22
    4d48:	8c 01       	movw	r16, r24
    4d4a:	80 91 a1 21 	lds	r24, 0x21A1
    4d4e:	90 91 a2 21 	lds	r25, 0x21A2
    4d52:	a0 91 a3 21 	lds	r26, 0x21A3
    4d56:	b0 91 a4 21 	lds	r27, 0x21A4
    4d5a:	bc 01       	movw	r22, r24
    4d5c:	cd 01       	movw	r24, r26
    4d5e:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    4d62:	dc 01       	movw	r26, r24
    4d64:	cb 01       	movw	r24, r22
    4d66:	20 91 d3 24 	lds	r18, 0x24D3
    4d6a:	30 91 d4 24 	lds	r19, 0x24D4
    4d6e:	40 91 d5 24 	lds	r20, 0x24D5
    4d72:	50 91 d6 24 	lds	r21, 0x24D6
    4d76:	bc 01       	movw	r22, r24
    4d78:	cd 01       	movw	r24, r26
    4d7a:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    4d7e:	dc 01       	movw	r26, r24
    4d80:	cb 01       	movw	r24, r22
    4d82:	bc 01       	movw	r22, r24
    4d84:	cd 01       	movw	r24, r26
    4d86:	0e 94 9a 5e 	call	0xbd34	; 0xbd34 <square>
    4d8a:	9b 01       	movw	r18, r22
    4d8c:	ac 01       	movw	r20, r24
    4d8e:	c8 01       	movw	r24, r16
    4d90:	b7 01       	movw	r22, r14
    4d92:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <__addsf3>
    4d96:	dc 01       	movw	r26, r24
    4d98:	cb 01       	movw	r24, r22
    4d9a:	7c 01       	movw	r14, r24
    4d9c:	8d 01       	movw	r16, r26
    4d9e:	80 91 a5 21 	lds	r24, 0x21A5
    4da2:	90 91 a6 21 	lds	r25, 0x21A6
    4da6:	a0 91 a7 21 	lds	r26, 0x21A7
    4daa:	b0 91 a8 21 	lds	r27, 0x21A8
    4dae:	bc 01       	movw	r22, r24
    4db0:	cd 01       	movw	r24, r26
    4db2:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    4db6:	dc 01       	movw	r26, r24
    4db8:	cb 01       	movw	r24, r22
    4dba:	20 91 eb 24 	lds	r18, 0x24EB
    4dbe:	30 91 ec 24 	lds	r19, 0x24EC
    4dc2:	40 91 ed 24 	lds	r20, 0x24ED
    4dc6:	50 91 ee 24 	lds	r21, 0x24EE
    4dca:	bc 01       	movw	r22, r24
    4dcc:	cd 01       	movw	r24, r26
    4dce:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    4dd2:	dc 01       	movw	r26, r24
    4dd4:	cb 01       	movw	r24, r22
    4dd6:	bc 01       	movw	r22, r24
    4dd8:	cd 01       	movw	r24, r26
    4dda:	0e 94 9a 5e 	call	0xbd34	; 0xbd34 <square>
    4dde:	9b 01       	movw	r18, r22
    4de0:	ac 01       	movw	r20, r24
    4de2:	c8 01       	movw	r24, r16
    4de4:	b7 01       	movw	r22, r14
    4de6:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <__addsf3>
    4dea:	dc 01       	movw	r26, r24
    4dec:	cb 01       	movw	r24, r22
    4dee:	bc 01       	movw	r22, r24
    4df0:	cd 01       	movw	r24, r26
    4df2:	0e 94 5c 5e 	call	0xbcb8	; 0xbcb8 <sqrt>
    4df6:	dc 01       	movw	r26, r24
    4df8:	cb 01       	movw	r24, r22
    4dfa:	80 93 ad 21 	sts	0x21AD, r24
    4dfe:	90 93 ae 21 	sts	0x21AE, r25
    4e02:	a0 93 af 21 	sts	0x21AF, r26
    4e06:	b0 93 b0 21 	sts	0x21B0, r27
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    4e0a:	80 91 ad 21 	lds	r24, 0x21AD
    4e0e:	90 91 ae 21 	lds	r25, 0x21AE
    4e12:	a0 91 af 21 	lds	r26, 0x21AF
    4e16:	b0 91 b0 21 	lds	r27, 0x21B0
    4e1a:	bc 01       	movw	r22, r24
    4e1c:	cd 01       	movw	r24, r26
    4e1e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4e20:	3e 85       	ldd	r19, Y+14	; 0x0e
    4e22:	4f 85       	ldd	r20, Y+15	; 0x0f
    4e24:	58 89       	ldd	r21, Y+16	; 0x10
    4e26:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    4e2a:	dc 01       	movw	r26, r24
    4e2c:	cb 01       	movw	r24, r22
    4e2e:	bc 01       	movw	r22, r24
    4e30:	cd 01       	movw	r24, r26
    4e32:	20 e0       	ldi	r18, 0x00	; 0
    4e34:	34 e2       	ldi	r19, 0x24	; 36
    4e36:	44 e7       	ldi	r20, 0x74	; 116
    4e38:	59 e4       	ldi	r21, 0x49	; 73
    4e3a:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    4e3e:	dc 01       	movw	r26, r24
    4e40:	cb 01       	movw	r24, r22
    4e42:	bc 01       	movw	r22, r24
    4e44:	cd 01       	movw	r24, r26
    4e46:	0e 94 bf 5d 	call	0xbb7e	; 0xbb7e <lround>
    4e4a:	dc 01       	movw	r26, r24
    4e4c:	cb 01       	movw	r24, r22
    4e4e:	80 93 a9 21 	sts	0x21A9, r24
    4e52:	90 93 aa 21 	sts	0x21AA, r25
    4e56:	a0 93 ab 21 	sts	0x21AB, r26
    4e5a:	b0 93 ac 21 	sts	0x21AC, r27
	}
	mc.line_state = MC_STATE_NEW;
    4e5e:	81 e0       	ldi	r24, 0x01	; 1
    4e60:	80 93 84 21 	sts	0x2184, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    4e64:	85 e8       	ldi	r24, 0x85	; 133
    4e66:	91 e2       	ldi	r25, 0x21	; 33
    4e68:	21 e9       	ldi	r18, 0x91	; 145
    4e6a:	31 e2       	ldi	r19, 0x21	; 33
    4e6c:	b9 01       	movw	r22, r18
    4e6e:	4c e0       	ldi	r20, 0x0C	; 12
    4e70:	50 e0       	ldi	r21, 0x00	; 0
    4e72:	0e 94 c7 61 	call	0xc38e	; 0xc38e <memcpy>
	return (mc_line_continuation());
    4e76:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <mc_line_continuation>
}
    4e7a:	62 96       	adiw	r28, 0x12	; 18
    4e7c:	cd bf       	out	0x3d, r28	; 61
    4e7e:	de bf       	out	0x3e, r29	; 62
    4e80:	cf 91       	pop	r28
    4e82:	df 91       	pop	r29
    4e84:	1f 91       	pop	r17
    4e86:	0f 91       	pop	r16
    4e88:	ff 90       	pop	r15
    4e8a:	ef 90       	pop	r14
    4e8c:	df 90       	pop	r13
    4e8e:	cf 90       	pop	r12
    4e90:	bf 90       	pop	r11
    4e92:	af 90       	pop	r10
    4e94:	9f 90       	pop	r9
    4e96:	8f 90       	pop	r8
    4e98:	08 95       	ret

00004e9a <mc_line_continuation>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continuation() 
{
    4e9a:	af 92       	push	r10
    4e9c:	bf 92       	push	r11
    4e9e:	cf 92       	push	r12
    4ea0:	df 92       	push	r13
    4ea2:	ef 92       	push	r14
    4ea4:	ff 92       	push	r15
    4ea6:	0f 93       	push	r16
    4ea8:	1f 93       	push	r17
    4eaa:	df 93       	push	r29
    4eac:	cf 93       	push	r28
    4eae:	0f 92       	push	r0
    4eb0:	0f 92       	push	r0
    4eb2:	cd b7       	in	r28, 0x3d	; 61
    4eb4:	de b7       	in	r29, 0x3e	; 62
	if (mc.line_state == MC_STATE_OFF) {
    4eb6:	80 91 84 21 	lds	r24, 0x2184
    4eba:	88 23       	and	r24, r24
    4ebc:	29 f4       	brne	.+10     	; 0x4ec8 <mc_line_continuation+0x2e>
		return (TG_NOOP);				// return NULL for non-started line
    4ebe:	82 e0       	ldi	r24, 0x02	; 2
    4ec0:	90 e0       	ldi	r25, 0x00	; 0
    4ec2:	89 83       	std	Y+1, r24	; 0x01
    4ec4:	9a 83       	std	Y+2, r25	; 0x02
    4ec6:	34 c0       	rjmp	.+104    	; 0x4f30 <mc_line_continuation+0x96>
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    4ec8:	82 e0       	ldi	r24, 0x02	; 2
    4eca:	80 93 84 21 	sts	0x2184, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    4ece:	0e 94 be 47 	call	0x8f7c	; 0x8f7c <mv_test_move_buffer_full>
    4ed2:	88 23       	and	r24, r24
    4ed4:	29 f0       	breq	.+10     	; 0x4ee0 <mc_line_continuation+0x46>
		return (TG_EAGAIN);
    4ed6:	81 e0       	ldi	r24, 0x01	; 1
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	89 83       	std	Y+1, r24	; 0x01
    4edc:	9a 83       	std	Y+2, r25	; 0x02
    4ede:	28 c0       	rjmp	.+80     	; 0x4f30 <mc_line_continuation+0x96>
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    4ee0:	80 91 9d 21 	lds	r24, 0x219D
    4ee4:	90 91 9e 21 	lds	r25, 0x219E
    4ee8:	a0 91 9f 21 	lds	r26, 0x219F
    4eec:	b0 91 a0 21 	lds	r27, 0x21A0
    4ef0:	20 91 a1 21 	lds	r18, 0x21A1
    4ef4:	30 91 a2 21 	lds	r19, 0x21A2
    4ef8:	40 91 a3 21 	lds	r20, 0x21A3
    4efc:	50 91 a4 21 	lds	r21, 0x21A4
    4f00:	e0 90 a5 21 	lds	r14, 0x21A5
    4f04:	f0 90 a6 21 	lds	r15, 0x21A6
    4f08:	00 91 a7 21 	lds	r16, 0x21A7
    4f0c:	10 91 a8 21 	lds	r17, 0x21A8
    4f10:	a0 90 a9 21 	lds	r10, 0x21A9
    4f14:	b0 90 aa 21 	lds	r11, 0x21AA
    4f18:	c0 90 ab 21 	lds	r12, 0x21AB
    4f1c:	d0 90 ac 21 	lds	r13, 0x21AC
    4f20:	bc 01       	movw	r22, r24
    4f22:	cd 01       	movw	r24, r26
    4f24:	0e 94 a3 44 	call	0x8946	; 0x8946 <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    4f28:	10 92 84 21 	sts	0x2184, r1
	return (TG_OK);
    4f2c:	19 82       	std	Y+1, r1	; 0x01
    4f2e:	1a 82       	std	Y+2, r1	; 0x02
    4f30:	89 81       	ldd	r24, Y+1	; 0x01
    4f32:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4f34:	0f 90       	pop	r0
    4f36:	0f 90       	pop	r0
    4f38:	cf 91       	pop	r28
    4f3a:	df 91       	pop	r29
    4f3c:	1f 91       	pop	r17
    4f3e:	0f 91       	pop	r16
    4f40:	ff 90       	pop	r15
    4f42:	ef 90       	pop	r14
    4f44:	df 90       	pop	r13
    4f46:	cf 90       	pop	r12
    4f48:	bf 90       	pop	r11
    4f4a:	af 90       	pop	r10
    4f4c:	08 95       	ret

00004f4e <mc_arc>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    4f4e:	8f 92       	push	r8
    4f50:	9f 92       	push	r9
    4f52:	af 92       	push	r10
    4f54:	bf 92       	push	r11
    4f56:	cf 92       	push	r12
    4f58:	df 92       	push	r13
    4f5a:	ef 92       	push	r14
    4f5c:	ff 92       	push	r15
    4f5e:	0f 93       	push	r16
    4f60:	1f 93       	push	r17
    4f62:	df 93       	push	r29
    4f64:	cf 93       	push	r28
    4f66:	cd b7       	in	r28, 0x3d	; 61
    4f68:	de b7       	in	r29, 0x3e	; 62
    4f6a:	6c 97       	sbiw	r28, 0x1c	; 28
    4f6c:	cd bf       	out	0x3d, r28	; 61
    4f6e:	de bf       	out	0x3e, r29	; 62
    4f70:	69 83       	std	Y+1, r22	; 0x01
    4f72:	7a 83       	std	Y+2, r23	; 0x02
    4f74:	8b 83       	std	Y+3, r24	; 0x03
    4f76:	9c 83       	std	Y+4, r25	; 0x04
    4f78:	2d 83       	std	Y+5, r18	; 0x05
    4f7a:	3e 83       	std	Y+6, r19	; 0x06
    4f7c:	4f 83       	std	Y+7, r20	; 0x07
    4f7e:	58 87       	std	Y+8, r21	; 0x08
    4f80:	e9 86       	std	Y+9, r14	; 0x09
    4f82:	fa 86       	std	Y+10, r15	; 0x0a
    4f84:	0b 87       	std	Y+11, r16	; 0x0b
    4f86:	1c 87       	std	Y+12, r17	; 0x0c
    4f88:	ad 86       	std	Y+13, r10	; 0x0d
    4f8a:	be 86       	std	Y+14, r11	; 0x0e
    4f8c:	cf 86       	std	Y+15, r12	; 0x0f
    4f8e:	d8 8a       	std	Y+16, r13	; 0x10
    4f90:	89 8a       	std	Y+17, r8	; 0x11
    4f92:	9a 8a       	std	Y+18, r9	; 0x12
	// load the arc struct
	ma.theta = theta;
    4f94:	89 81       	ldd	r24, Y+1	; 0x01
    4f96:	9a 81       	ldd	r25, Y+2	; 0x02
    4f98:	ab 81       	ldd	r26, Y+3	; 0x03
    4f9a:	bc 81       	ldd	r27, Y+4	; 0x04
    4f9c:	80 93 2f 25 	sts	0x252F, r24
    4fa0:	90 93 30 25 	sts	0x2530, r25
    4fa4:	a0 93 31 25 	sts	0x2531, r26
    4fa8:	b0 93 32 25 	sts	0x2532, r27
	ma.radius = radius;
    4fac:	89 85       	ldd	r24, Y+9	; 0x09
    4fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fb0:	ab 85       	ldd	r26, Y+11	; 0x0b
    4fb2:	bc 85       	ldd	r27, Y+12	; 0x0c
    4fb4:	80 93 33 25 	sts	0x2533, r24
    4fb8:	90 93 34 25 	sts	0x2534, r25
    4fbc:	a0 93 35 25 	sts	0x2535, r26
    4fc0:	b0 93 36 25 	sts	0x2536, r27
	ma.angular_travel = angular_travel;
    4fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    4fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    4fc8:	af 81       	ldd	r26, Y+7	; 0x07
    4fca:	b8 85       	ldd	r27, Y+8	; 0x08
    4fcc:	80 93 43 25 	sts	0x2543, r24
    4fd0:	90 93 44 25 	sts	0x2544, r25
    4fd4:	a0 93 45 25 	sts	0x2545, r26
    4fd8:	b0 93 46 25 	sts	0x2546, r27
	ma.linear_travel = linear_travel;
    4fdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fde:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fe0:	af 85       	ldd	r26, Y+15	; 0x0f
    4fe2:	b8 89       	ldd	r27, Y+16	; 0x10
    4fe4:	80 93 47 25 	sts	0x2547, r24
    4fe8:	90 93 48 25 	sts	0x2548, r25
    4fec:	a0 93 49 25 	sts	0x2549, r26
    4ff0:	b0 93 4a 25 	sts	0x254A, r27
	ma.feed_rate = feed_rate;
    4ff4:	88 a9       	ldd	r24, Y+48	; 0x30
    4ff6:	99 a9       	ldd	r25, Y+49	; 0x31
    4ff8:	aa a9       	ldd	r26, Y+50	; 0x32
    4ffa:	bb a9       	ldd	r27, Y+51	; 0x33
    4ffc:	80 93 37 25 	sts	0x2537, r24
    5000:	90 93 38 25 	sts	0x2538, r25
    5004:	a0 93 39 25 	sts	0x2539, r26
    5008:	b0 93 3a 25 	sts	0x253A, r27
	ma.invert_feed_rate = invert_feed_rate;
    500c:	8c a9       	ldd	r24, Y+52	; 0x34
    500e:	9d a9       	ldd	r25, Y+53	; 0x35
    5010:	80 93 0f 25 	sts	0x250F, r24
    5014:	90 93 10 25 	sts	0x2510, r25
	ma.axis_1 = axis_1;
    5018:	89 89       	ldd	r24, Y+17	; 0x11
    501a:	9a 89       	ldd	r25, Y+18	; 0x12
    501c:	80 93 11 25 	sts	0x2511, r24
    5020:	90 93 12 25 	sts	0x2512, r25
	ma.axis_2 = axis_2;
    5024:	8c a5       	ldd	r24, Y+44	; 0x2c
    5026:	9d a5       	ldd	r25, Y+45	; 0x2d
    5028:	80 93 13 25 	sts	0x2513, r24
    502c:	90 93 14 25 	sts	0x2514, r25
	ma.axis_linear = axis_linear;
    5030:	8e a5       	ldd	r24, Y+46	; 0x2e
    5032:	9f a5       	ldd	r25, Y+47	; 0x2f
    5034:	80 93 15 25 	sts	0x2515, r24
    5038:	90 93 16 25 	sts	0x2516, r25
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    503c:	80 91 43 25 	lds	r24, 0x2543
    5040:	90 91 44 25 	lds	r25, 0x2544
    5044:	a0 91 45 25 	lds	r26, 0x2545
    5048:	b0 91 46 25 	lds	r27, 0x2546
    504c:	20 91 33 25 	lds	r18, 0x2533
    5050:	30 91 34 25 	lds	r19, 0x2534
    5054:	40 91 35 25 	lds	r20, 0x2535
    5058:	50 91 36 25 	lds	r21, 0x2536
    505c:	bc 01       	movw	r22, r24
    505e:	cd 01       	movw	r24, r26
    5060:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    5064:	dc 01       	movw	r26, r24
    5066:	cb 01       	movw	r24, r22
    5068:	89 8f       	std	Y+25, r24	; 0x19
    506a:	9a 8f       	std	Y+26, r25	; 0x1a
    506c:	ab 8f       	std	Y+27, r26	; 0x1b
    506e:	bc 8f       	std	Y+28, r27	; 0x1c
    5070:	80 91 47 25 	lds	r24, 0x2547
    5074:	90 91 48 25 	lds	r25, 0x2548
    5078:	a0 91 49 25 	lds	r26, 0x2549
    507c:	b0 91 4a 25 	lds	r27, 0x254A
    5080:	bc 01       	movw	r22, r24
    5082:	cd 01       	movw	r24, r26
    5084:	0e 94 9c 5b 	call	0xb738	; 0xb738 <__fixsfsi>
    5088:	dc 01       	movw	r26, r24
    508a:	cb 01       	movw	r24, r22
    508c:	8d 8b       	std	Y+21, r24	; 0x15
    508e:	9e 8b       	std	Y+22, r25	; 0x16
    5090:	af 8b       	std	Y+23, r26	; 0x17
    5092:	b8 8f       	std	Y+24, r27	; 0x18
    5094:	8d 89       	ldd	r24, Y+21	; 0x15
    5096:	9e 89       	ldd	r25, Y+22	; 0x16
    5098:	af 89       	ldd	r26, Y+23	; 0x17
    509a:	b8 8d       	ldd	r27, Y+24	; 0x18
    509c:	bb 23       	and	r27, r27
    509e:	7c f4       	brge	.+30     	; 0x50be <mc_arc+0x170>
    50a0:	8d 89       	ldd	r24, Y+21	; 0x15
    50a2:	9e 89       	ldd	r25, Y+22	; 0x16
    50a4:	af 89       	ldd	r26, Y+23	; 0x17
    50a6:	b8 8d       	ldd	r27, Y+24	; 0x18
    50a8:	b0 95       	com	r27
    50aa:	a0 95       	com	r26
    50ac:	90 95       	com	r25
    50ae:	81 95       	neg	r24
    50b0:	9f 4f       	sbci	r25, 0xFF	; 255
    50b2:	af 4f       	sbci	r26, 0xFF	; 255
    50b4:	bf 4f       	sbci	r27, 0xFF	; 255
    50b6:	8d 8b       	std	Y+21, r24	; 0x15
    50b8:	9e 8b       	std	Y+22, r25	; 0x16
    50ba:	af 8b       	std	Y+23, r26	; 0x17
    50bc:	b8 8f       	std	Y+24, r27	; 0x18
    50be:	6d 89       	ldd	r22, Y+21	; 0x15
    50c0:	7e 89       	ldd	r23, Y+22	; 0x16
    50c2:	8f 89       	ldd	r24, Y+23	; 0x17
    50c4:	98 8d       	ldd	r25, Y+24	; 0x18
    50c6:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    50ca:	9b 01       	movw	r18, r22
    50cc:	ac 01       	movw	r20, r24
    50ce:	69 8d       	ldd	r22, Y+25	; 0x19
    50d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    50d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50d6:	0e 94 2a 5d 	call	0xba54	; 0xba54 <hypot>
    50da:	dc 01       	movw	r26, r24
    50dc:	cb 01       	movw	r24, r22
    50de:	80 93 23 25 	sts	0x2523, r24
    50e2:	90 93 24 25 	sts	0x2524, r25
    50e6:	a0 93 25 25 	sts	0x2525, r26
    50ea:	b0 93 26 25 	sts	0x2526, r27
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    50ee:	80 91 23 25 	lds	r24, 0x2523
    50f2:	90 91 24 25 	lds	r25, 0x2524
    50f6:	a0 91 25 25 	lds	r26, 0x2525
    50fa:	b0 91 26 25 	lds	r27, 0x2526
    50fe:	bc 01       	movw	r22, r24
    5100:	cd 01       	movw	r24, r26
    5102:	2a e0       	ldi	r18, 0x0A	; 10
    5104:	37 ed       	ldi	r19, 0xD7	; 215
    5106:	43 e2       	ldi	r20, 0x23	; 35
    5108:	5c e3       	ldi	r21, 0x3C	; 60
    510a:	0e 94 2d 5b 	call	0xb65a	; 0xb65a <__cmpsf2>
    510e:	88 23       	and	r24, r24
    5110:	2c f4       	brge	.+10     	; 0x511c <mc_arc+0x1ce>
		return (TG_ARC_ERROR);						// arc specification error
    5112:	a0 e1       	ldi	r26, 0x10	; 16
    5114:	b0 e0       	ldi	r27, 0x00	; 0
    5116:	ab 8b       	std	Y+19, r26	; 0x13
    5118:	bc 8b       	std	Y+20, r27	; 0x14
    511a:	99 c2       	rjmp	.+1330   	; 0x564e <mc_arc+0x700>
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    511c:	80 91 23 25 	lds	r24, 0x2523
    5120:	90 91 24 25 	lds	r25, 0x2524
    5124:	a0 91 25 25 	lds	r26, 0x2525
    5128:	b0 91 26 25 	lds	r27, 0x2526
    512c:	20 91 9c 24 	lds	r18, 0x249C
    5130:	30 91 9d 24 	lds	r19, 0x249D
    5134:	40 91 9e 24 	lds	r20, 0x249E
    5138:	50 91 9f 24 	lds	r21, 0x249F
    513c:	bc 01       	movw	r22, r24
    513e:	cd 01       	movw	r24, r26
    5140:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    5144:	dc 01       	movw	r26, r24
    5146:	cb 01       	movw	r24, r22
    5148:	bc 01       	movw	r22, r24
    514a:	cd 01       	movw	r24, r26
    514c:	0e 94 1a 5b 	call	0xb634	; 0xb634 <ceil>
    5150:	dc 01       	movw	r26, r24
    5152:	cb 01       	movw	r24, r22
    5154:	bc 01       	movw	r22, r24
    5156:	cd 01       	movw	r24, r26
    5158:	0e 94 9c 5b 	call	0xb738	; 0xb738 <__fixsfsi>
    515c:	dc 01       	movw	r26, r24
    515e:	cb 01       	movw	r24, r22
    5160:	80 93 0b 25 	sts	0x250B, r24
    5164:	90 93 0c 25 	sts	0x250C, r25
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    5168:	80 91 0f 25 	lds	r24, 0x250F
    516c:	90 91 10 25 	lds	r25, 0x2510
    5170:	00 97       	sbiw	r24, 0x00	; 0
    5172:	21 f1       	breq	.+72     	; 0x51bc <mc_arc+0x26e>
		ma.feed_rate *= ma.segments; 
    5174:	e0 90 37 25 	lds	r14, 0x2537
    5178:	f0 90 38 25 	lds	r15, 0x2538
    517c:	00 91 39 25 	lds	r16, 0x2539
    5180:	10 91 3a 25 	lds	r17, 0x253A
    5184:	80 91 0b 25 	lds	r24, 0x250B
    5188:	90 91 0c 25 	lds	r25, 0x250C
    518c:	aa 27       	eor	r26, r26
    518e:	97 fd       	sbrc	r25, 7
    5190:	a0 95       	com	r26
    5192:	ba 2f       	mov	r27, r26
    5194:	bc 01       	movw	r22, r24
    5196:	cd 01       	movw	r24, r26
    5198:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    519c:	9b 01       	movw	r18, r22
    519e:	ac 01       	movw	r20, r24
    51a0:	c8 01       	movw	r24, r16
    51a2:	b7 01       	movw	r22, r14
    51a4:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    51a8:	dc 01       	movw	r26, r24
    51aa:	cb 01       	movw	r24, r22
    51ac:	80 93 37 25 	sts	0x2537, r24
    51b0:	90 93 38 25 	sts	0x2538, r25
    51b4:	a0 93 39 25 	sts	0x2539, r26
    51b8:	b0 93 3a 25 	sts	0x253A, r27
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    51bc:	e0 90 43 25 	lds	r14, 0x2543
    51c0:	f0 90 44 25 	lds	r15, 0x2544
    51c4:	00 91 45 25 	lds	r16, 0x2545
    51c8:	10 91 46 25 	lds	r17, 0x2546
    51cc:	80 91 0b 25 	lds	r24, 0x250B
    51d0:	90 91 0c 25 	lds	r25, 0x250C
    51d4:	aa 27       	eor	r26, r26
    51d6:	97 fd       	sbrc	r25, 7
    51d8:	a0 95       	com	r26
    51da:	ba 2f       	mov	r27, r26
    51dc:	bc 01       	movw	r22, r24
    51de:	cd 01       	movw	r24, r26
    51e0:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    51e4:	9b 01       	movw	r18, r22
    51e6:	ac 01       	movw	r20, r24
    51e8:	c8 01       	movw	r24, r16
    51ea:	b7 01       	movw	r22, r14
    51ec:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    51f0:	dc 01       	movw	r26, r24
    51f2:	cb 01       	movw	r24, r22
    51f4:	80 93 3b 25 	sts	0x253B, r24
    51f8:	90 93 3c 25 	sts	0x253C, r25
    51fc:	a0 93 3d 25 	sts	0x253D, r26
    5200:	b0 93 3e 25 	sts	0x253E, r27
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    5204:	e0 90 47 25 	lds	r14, 0x2547
    5208:	f0 90 48 25 	lds	r15, 0x2548
    520c:	00 91 49 25 	lds	r16, 0x2549
    5210:	10 91 4a 25 	lds	r17, 0x254A
    5214:	80 91 0b 25 	lds	r24, 0x250B
    5218:	90 91 0c 25 	lds	r25, 0x250C
    521c:	aa 27       	eor	r26, r26
    521e:	97 fd       	sbrc	r25, 7
    5220:	a0 95       	com	r26
    5222:	ba 2f       	mov	r27, r26
    5224:	bc 01       	movw	r22, r24
    5226:	cd 01       	movw	r24, r26
    5228:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    522c:	9b 01       	movw	r18, r22
    522e:	ac 01       	movw	r20, r24
    5230:	c8 01       	movw	r24, r16
    5232:	b7 01       	movw	r22, r14
    5234:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    5238:	dc 01       	movw	r26, r24
    523a:	cb 01       	movw	r24, r22
    523c:	80 93 3f 25 	sts	0x253F, r24
    5240:	90 93 40 25 	sts	0x2540, r25
    5244:	a0 93 41 25 	sts	0x2541, r26
    5248:	b0 93 42 25 	sts	0x2542, r27
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    524c:	80 91 11 25 	lds	r24, 0x2511
    5250:	90 91 12 25 	lds	r25, 0x2512
    5254:	88 0f       	add	r24, r24
    5256:	99 1f       	adc	r25, r25
    5258:	88 0f       	add	r24, r24
    525a:	99 1f       	adc	r25, r25
    525c:	fc 01       	movw	r30, r24
    525e:	eb 57       	subi	r30, 0x7B	; 123
    5260:	fe 4d       	sbci	r31, 0xDE	; 222
    5262:	80 81       	ld	r24, Z
    5264:	91 81       	ldd	r25, Z+1	; 0x01
    5266:	a2 81       	ldd	r26, Z+2	; 0x02
    5268:	b3 81       	ldd	r27, Z+3	; 0x03
    526a:	bc 01       	movw	r22, r24
    526c:	cd 01       	movw	r24, r26
    526e:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    5272:	7b 01       	movw	r14, r22
    5274:	8c 01       	movw	r16, r24
    5276:	20 91 11 25 	lds	r18, 0x2511
    527a:	30 91 12 25 	lds	r19, 0x2512
    527e:	c9 01       	movw	r24, r18
    5280:	88 0f       	add	r24, r24
    5282:	99 1f       	adc	r25, r25
    5284:	82 0f       	add	r24, r18
    5286:	93 1f       	adc	r25, r19
    5288:	88 0f       	add	r24, r24
    528a:	99 1f       	adc	r25, r25
    528c:	88 0f       	add	r24, r24
    528e:	99 1f       	adc	r25, r25
    5290:	88 0f       	add	r24, r24
    5292:	99 1f       	adc	r25, r25
    5294:	fc 01       	movw	r30, r24
    5296:	e5 54       	subi	r30, 0x45	; 69
    5298:	fb 4d       	sbci	r31, 0xDB	; 219
    529a:	20 81       	ld	r18, Z
    529c:	31 81       	ldd	r19, Z+1	; 0x01
    529e:	42 81       	ldd	r20, Z+2	; 0x02
    52a0:	53 81       	ldd	r21, Z+3	; 0x03
    52a2:	c8 01       	movw	r24, r16
    52a4:	b7 01       	movw	r22, r14
    52a6:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    52aa:	dc 01       	movw	r26, r24
    52ac:	cb 01       	movw	r24, r22
    52ae:	7c 01       	movw	r14, r24
    52b0:	8d 01       	movw	r16, r26
    52b2:	80 91 2f 25 	lds	r24, 0x252F
    52b6:	90 91 30 25 	lds	r25, 0x2530
    52ba:	a0 91 31 25 	lds	r26, 0x2531
    52be:	b0 91 32 25 	lds	r27, 0x2532
    52c2:	bc 01       	movw	r22, r24
    52c4:	cd 01       	movw	r24, r26
    52c6:	0e 94 52 5e 	call	0xbca4	; 0xbca4 <sin>
    52ca:	dc 01       	movw	r26, r24
    52cc:	cb 01       	movw	r24, r22
    52ce:	20 91 33 25 	lds	r18, 0x2533
    52d2:	30 91 34 25 	lds	r19, 0x2534
    52d6:	40 91 35 25 	lds	r20, 0x2535
    52da:	50 91 36 25 	lds	r21, 0x2536
    52de:	bc 01       	movw	r22, r24
    52e0:	cd 01       	movw	r24, r26
    52e2:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    52e6:	dc 01       	movw	r26, r24
    52e8:	cb 01       	movw	r24, r22
    52ea:	9c 01       	movw	r18, r24
    52ec:	ad 01       	movw	r20, r26
    52ee:	c8 01       	movw	r24, r16
    52f0:	b7 01       	movw	r22, r14
    52f2:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    52f6:	dc 01       	movw	r26, r24
    52f8:	cb 01       	movw	r24, r22
    52fa:	80 93 27 25 	sts	0x2527, r24
    52fe:	90 93 28 25 	sts	0x2528, r25
    5302:	a0 93 29 25 	sts	0x2529, r26
    5306:	b0 93 2a 25 	sts	0x252A, r27
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    530a:	80 91 13 25 	lds	r24, 0x2513
    530e:	90 91 14 25 	lds	r25, 0x2514
    5312:	88 0f       	add	r24, r24
    5314:	99 1f       	adc	r25, r25
    5316:	88 0f       	add	r24, r24
    5318:	99 1f       	adc	r25, r25
    531a:	fc 01       	movw	r30, r24
    531c:	eb 57       	subi	r30, 0x7B	; 123
    531e:	fe 4d       	sbci	r31, 0xDE	; 222
    5320:	80 81       	ld	r24, Z
    5322:	91 81       	ldd	r25, Z+1	; 0x01
    5324:	a2 81       	ldd	r26, Z+2	; 0x02
    5326:	b3 81       	ldd	r27, Z+3	; 0x03
    5328:	bc 01       	movw	r22, r24
    532a:	cd 01       	movw	r24, r26
    532c:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    5330:	7b 01       	movw	r14, r22
    5332:	8c 01       	movw	r16, r24
    5334:	20 91 13 25 	lds	r18, 0x2513
    5338:	30 91 14 25 	lds	r19, 0x2514
    533c:	c9 01       	movw	r24, r18
    533e:	88 0f       	add	r24, r24
    5340:	99 1f       	adc	r25, r25
    5342:	82 0f       	add	r24, r18
    5344:	93 1f       	adc	r25, r19
    5346:	88 0f       	add	r24, r24
    5348:	99 1f       	adc	r25, r25
    534a:	88 0f       	add	r24, r24
    534c:	99 1f       	adc	r25, r25
    534e:	88 0f       	add	r24, r24
    5350:	99 1f       	adc	r25, r25
    5352:	fc 01       	movw	r30, r24
    5354:	e5 54       	subi	r30, 0x45	; 69
    5356:	fb 4d       	sbci	r31, 0xDB	; 219
    5358:	20 81       	ld	r18, Z
    535a:	31 81       	ldd	r19, Z+1	; 0x01
    535c:	42 81       	ldd	r20, Z+2	; 0x02
    535e:	53 81       	ldd	r21, Z+3	; 0x03
    5360:	c8 01       	movw	r24, r16
    5362:	b7 01       	movw	r22, r14
    5364:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    5368:	dc 01       	movw	r26, r24
    536a:	cb 01       	movw	r24, r22
    536c:	7c 01       	movw	r14, r24
    536e:	8d 01       	movw	r16, r26
    5370:	80 91 2f 25 	lds	r24, 0x252F
    5374:	90 91 30 25 	lds	r25, 0x2530
    5378:	a0 91 31 25 	lds	r26, 0x2531
    537c:	b0 91 32 25 	lds	r27, 0x2532
    5380:	bc 01       	movw	r22, r24
    5382:	cd 01       	movw	r24, r26
    5384:	0e 94 31 5b 	call	0xb662	; 0xb662 <cos>
    5388:	dc 01       	movw	r26, r24
    538a:	cb 01       	movw	r24, r22
    538c:	20 91 33 25 	lds	r18, 0x2533
    5390:	30 91 34 25 	lds	r19, 0x2534
    5394:	40 91 35 25 	lds	r20, 0x2535
    5398:	50 91 36 25 	lds	r21, 0x2536
    539c:	bc 01       	movw	r22, r24
    539e:	cd 01       	movw	r24, r26
    53a0:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    53a4:	dc 01       	movw	r26, r24
    53a6:	cb 01       	movw	r24, r22
    53a8:	9c 01       	movw	r18, r24
    53aa:	ad 01       	movw	r20, r26
    53ac:	c8 01       	movw	r24, r16
    53ae:	b7 01       	movw	r22, r14
    53b0:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    53b4:	dc 01       	movw	r26, r24
    53b6:	cb 01       	movw	r24, r22
    53b8:	80 93 2b 25 	sts	0x252B, r24
    53bc:	90 93 2c 25 	sts	0x252C, r25
    53c0:	a0 93 2d 25 	sts	0x252D, r26
    53c4:	b0 93 2e 25 	sts	0x252E, r27

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    53c8:	00 91 15 25 	lds	r16, 0x2515
    53cc:	10 91 16 25 	lds	r17, 0x2516
    53d0:	80 91 15 25 	lds	r24, 0x2515
    53d4:	90 91 16 25 	lds	r25, 0x2516
    53d8:	88 0f       	add	r24, r24
    53da:	99 1f       	adc	r25, r25
    53dc:	88 0f       	add	r24, r24
    53de:	99 1f       	adc	r25, r25
    53e0:	fc 01       	movw	r30, r24
    53e2:	eb 57       	subi	r30, 0x7B	; 123
    53e4:	fe 4d       	sbci	r31, 0xDE	; 222
    53e6:	80 81       	ld	r24, Z
    53e8:	91 81       	ldd	r25, Z+1	; 0x01
    53ea:	a2 81       	ldd	r26, Z+2	; 0x02
    53ec:	b3 81       	ldd	r27, Z+3	; 0x03
    53ee:	bc 01       	movw	r22, r24
    53f0:	cd 01       	movw	r24, r26
    53f2:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    53f6:	dc 01       	movw	r26, r24
    53f8:	cb 01       	movw	r24, r22
    53fa:	20 91 eb 24 	lds	r18, 0x24EB
    53fe:	30 91 ec 24 	lds	r19, 0x24EC
    5402:	40 91 ed 24 	lds	r20, 0x24ED
    5406:	50 91 ee 24 	lds	r21, 0x24EE
    540a:	bc 01       	movw	r22, r24
    540c:	cd 01       	movw	r24, r26
    540e:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    5412:	dc 01       	movw	r26, r24
    5414:	cb 01       	movw	r24, r22
    5416:	9c 01       	movw	r18, r24
    5418:	ad 01       	movw	r20, r26
    541a:	c8 01       	movw	r24, r16
    541c:	88 0f       	add	r24, r24
    541e:	99 1f       	adc	r25, r25
    5420:	88 0f       	add	r24, r24
    5422:	99 1f       	adc	r25, r25
    5424:	fc 01       	movw	r30, r24
    5426:	e9 5e       	subi	r30, 0xE9	; 233
    5428:	fa 4d       	sbci	r31, 0xDA	; 218
    542a:	20 83       	st	Z, r18
    542c:	31 83       	std	Z+1, r19	; 0x01
    542e:	42 83       	std	Z+2, r20	; 0x02
    5430:	53 83       	std	Z+3, r21	; 0x03
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    5432:	10 92 0d 25 	sts	0x250D, r1
    5436:	10 92 0e 25 	sts	0x250E, r1
    543a:	fb c0       	rjmp	.+502    	; 0x5632 <mc_arc+0x6e4>
		ma.theta += ma.theta_per_segment;
    543c:	80 91 2f 25 	lds	r24, 0x252F
    5440:	90 91 30 25 	lds	r25, 0x2530
    5444:	a0 91 31 25 	lds	r26, 0x2531
    5448:	b0 91 32 25 	lds	r27, 0x2532
    544c:	20 91 3b 25 	lds	r18, 0x253B
    5450:	30 91 3c 25 	lds	r19, 0x253C
    5454:	40 91 3d 25 	lds	r20, 0x253D
    5458:	50 91 3e 25 	lds	r21, 0x253E
    545c:	bc 01       	movw	r22, r24
    545e:	cd 01       	movw	r24, r26
    5460:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <__addsf3>
    5464:	dc 01       	movw	r26, r24
    5466:	cb 01       	movw	r24, r22
    5468:	80 93 2f 25 	sts	0x252F, r24
    546c:	90 93 30 25 	sts	0x2530, r25
    5470:	a0 93 31 25 	sts	0x2531, r26
    5474:	b0 93 32 25 	sts	0x2532, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    5478:	c0 90 11 25 	lds	r12, 0x2511
    547c:	d0 90 12 25 	lds	r13, 0x2512
    5480:	e0 90 27 25 	lds	r14, 0x2527
    5484:	f0 90 28 25 	lds	r15, 0x2528
    5488:	00 91 29 25 	lds	r16, 0x2529
    548c:	10 91 2a 25 	lds	r17, 0x252A
    5490:	80 91 2f 25 	lds	r24, 0x252F
    5494:	90 91 30 25 	lds	r25, 0x2530
    5498:	a0 91 31 25 	lds	r26, 0x2531
    549c:	b0 91 32 25 	lds	r27, 0x2532
    54a0:	bc 01       	movw	r22, r24
    54a2:	cd 01       	movw	r24, r26
    54a4:	0e 94 52 5e 	call	0xbca4	; 0xbca4 <sin>
    54a8:	dc 01       	movw	r26, r24
    54aa:	cb 01       	movw	r24, r22
    54ac:	20 91 33 25 	lds	r18, 0x2533
    54b0:	30 91 34 25 	lds	r19, 0x2534
    54b4:	40 91 35 25 	lds	r20, 0x2535
    54b8:	50 91 36 25 	lds	r21, 0x2536
    54bc:	bc 01       	movw	r22, r24
    54be:	cd 01       	movw	r24, r26
    54c0:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    54c4:	dc 01       	movw	r26, r24
    54c6:	cb 01       	movw	r24, r22
    54c8:	9c 01       	movw	r18, r24
    54ca:	ad 01       	movw	r20, r26
    54cc:	c8 01       	movw	r24, r16
    54ce:	b7 01       	movw	r22, r14
    54d0:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <__addsf3>
    54d4:	dc 01       	movw	r26, r24
    54d6:	cb 01       	movw	r24, r22
    54d8:	9c 01       	movw	r18, r24
    54da:	ad 01       	movw	r20, r26
    54dc:	c6 01       	movw	r24, r12
    54de:	88 0f       	add	r24, r24
    54e0:	99 1f       	adc	r25, r25
    54e2:	88 0f       	add	r24, r24
    54e4:	99 1f       	adc	r25, r25
    54e6:	fc 01       	movw	r30, r24
    54e8:	e9 5e       	subi	r30, 0xE9	; 233
    54ea:	fa 4d       	sbci	r31, 0xDA	; 218
    54ec:	20 83       	st	Z, r18
    54ee:	31 83       	std	Z+1, r19	; 0x01
    54f0:	42 83       	std	Z+2, r20	; 0x02
    54f2:	53 83       	std	Z+3, r21	; 0x03
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    54f4:	c0 90 13 25 	lds	r12, 0x2513
    54f8:	d0 90 14 25 	lds	r13, 0x2514
    54fc:	e0 90 2b 25 	lds	r14, 0x252B
    5500:	f0 90 2c 25 	lds	r15, 0x252C
    5504:	00 91 2d 25 	lds	r16, 0x252D
    5508:	10 91 2e 25 	lds	r17, 0x252E
    550c:	80 91 2f 25 	lds	r24, 0x252F
    5510:	90 91 30 25 	lds	r25, 0x2530
    5514:	a0 91 31 25 	lds	r26, 0x2531
    5518:	b0 91 32 25 	lds	r27, 0x2532
    551c:	bc 01       	movw	r22, r24
    551e:	cd 01       	movw	r24, r26
    5520:	0e 94 31 5b 	call	0xb662	; 0xb662 <cos>
    5524:	dc 01       	movw	r26, r24
    5526:	cb 01       	movw	r24, r22
    5528:	20 91 33 25 	lds	r18, 0x2533
    552c:	30 91 34 25 	lds	r19, 0x2534
    5530:	40 91 35 25 	lds	r20, 0x2535
    5534:	50 91 36 25 	lds	r21, 0x2536
    5538:	bc 01       	movw	r22, r24
    553a:	cd 01       	movw	r24, r26
    553c:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    5540:	dc 01       	movw	r26, r24
    5542:	cb 01       	movw	r24, r22
    5544:	9c 01       	movw	r18, r24
    5546:	ad 01       	movw	r20, r26
    5548:	c8 01       	movw	r24, r16
    554a:	b7 01       	movw	r22, r14
    554c:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <__addsf3>
    5550:	dc 01       	movw	r26, r24
    5552:	cb 01       	movw	r24, r22
    5554:	9c 01       	movw	r18, r24
    5556:	ad 01       	movw	r20, r26
    5558:	c6 01       	movw	r24, r12
    555a:	88 0f       	add	r24, r24
    555c:	99 1f       	adc	r25, r25
    555e:	88 0f       	add	r24, r24
    5560:	99 1f       	adc	r25, r25
    5562:	fc 01       	movw	r30, r24
    5564:	e9 5e       	subi	r30, 0xE9	; 233
    5566:	fa 4d       	sbci	r31, 0xDA	; 218
    5568:	20 83       	st	Z, r18
    556a:	31 83       	std	Z+1, r19	; 0x01
    556c:	42 83       	std	Z+2, r20	; 0x02
    556e:	53 83       	std	Z+3, r21	; 0x03
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    5570:	00 91 15 25 	lds	r16, 0x2515
    5574:	10 91 16 25 	lds	r17, 0x2516
    5578:	80 91 15 25 	lds	r24, 0x2515
    557c:	90 91 16 25 	lds	r25, 0x2516
    5580:	88 0f       	add	r24, r24
    5582:	99 1f       	adc	r25, r25
    5584:	88 0f       	add	r24, r24
    5586:	99 1f       	adc	r25, r25
    5588:	fc 01       	movw	r30, r24
    558a:	e9 5e       	subi	r30, 0xE9	; 233
    558c:	fa 4d       	sbci	r31, 0xDA	; 218
    558e:	80 81       	ld	r24, Z
    5590:	91 81       	ldd	r25, Z+1	; 0x01
    5592:	a2 81       	ldd	r26, Z+2	; 0x02
    5594:	b3 81       	ldd	r27, Z+3	; 0x03
    5596:	20 91 3f 25 	lds	r18, 0x253F
    559a:	30 91 40 25 	lds	r19, 0x2540
    559e:	40 91 41 25 	lds	r20, 0x2541
    55a2:	50 91 42 25 	lds	r21, 0x2542
    55a6:	bc 01       	movw	r22, r24
    55a8:	cd 01       	movw	r24, r26
    55aa:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <__addsf3>
    55ae:	dc 01       	movw	r26, r24
    55b0:	cb 01       	movw	r24, r22
    55b2:	9c 01       	movw	r18, r24
    55b4:	ad 01       	movw	r20, r26
    55b6:	c8 01       	movw	r24, r16
    55b8:	88 0f       	add	r24, r24
    55ba:	99 1f       	adc	r25, r25
    55bc:	88 0f       	add	r24, r24
    55be:	99 1f       	adc	r25, r25
    55c0:	fc 01       	movw	r30, r24
    55c2:	e9 5e       	subi	r30, 0xE9	; 233
    55c4:	fa 4d       	sbci	r31, 0xDA	; 218
    55c6:	20 83       	st	Z, r18
    55c8:	31 83       	std	Z+1, r19	; 0x01
    55ca:	42 83       	std	Z+2, r20	; 0x02
    55cc:	53 83       	std	Z+3, r21	; 0x03
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    55ce:	80 91 17 25 	lds	r24, 0x2517
    55d2:	90 91 18 25 	lds	r25, 0x2518
    55d6:	a0 91 19 25 	lds	r26, 0x2519
    55da:	b0 91 1a 25 	lds	r27, 0x251A
    55de:	20 91 1b 25 	lds	r18, 0x251B
    55e2:	30 91 1c 25 	lds	r19, 0x251C
    55e6:	40 91 1d 25 	lds	r20, 0x251D
    55ea:	50 91 1e 25 	lds	r21, 0x251E
    55ee:	e0 90 1f 25 	lds	r14, 0x251F
    55f2:	f0 90 20 25 	lds	r15, 0x2520
    55f6:	00 91 21 25 	lds	r16, 0x2521
    55fa:	10 91 22 25 	lds	r17, 0x2522
    55fe:	a0 90 37 25 	lds	r10, 0x2537
    5602:	b0 90 38 25 	lds	r11, 0x2538
    5606:	c0 90 39 25 	lds	r12, 0x2539
    560a:	d0 90 3a 25 	lds	r13, 0x253A
    560e:	e0 91 0f 25 	lds	r30, 0x250F
    5612:	f0 91 10 25 	lds	r31, 0x2510
    5616:	bc 01       	movw	r22, r24
    5618:	cd 01       	movw	r24, r26
    561a:	4f 01       	movw	r8, r30
    561c:	0e 94 94 23 	call	0x4728	; 0x4728 <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    5620:	80 91 0d 25 	lds	r24, 0x250D
    5624:	90 91 0e 25 	lds	r25, 0x250E
    5628:	01 96       	adiw	r24, 0x01	; 1
    562a:	80 93 0d 25 	sts	0x250D, r24
    562e:	90 93 0e 25 	sts	0x250E, r25
    5632:	20 91 0d 25 	lds	r18, 0x250D
    5636:	30 91 0e 25 	lds	r19, 0x250E
    563a:	80 91 0b 25 	lds	r24, 0x250B
    563e:	90 91 0c 25 	lds	r25, 0x250C
    5642:	82 17       	cp	r24, r18
    5644:	93 07       	cpc	r25, r19
    5646:	0c f0       	brlt	.+2      	; 0x564a <mc_arc+0x6fc>
    5648:	f9 ce       	rjmp	.-526    	; 0x543c <mc_arc+0x4ee>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
    564a:	1b 8a       	std	Y+19, r1	; 0x13
    564c:	1c 8a       	std	Y+20, r1	; 0x14
    564e:	8b 89       	ldd	r24, Y+19	; 0x13
    5650:	9c 89       	ldd	r25, Y+20	; 0x14
}
    5652:	6c 96       	adiw	r28, 0x1c	; 28
    5654:	cd bf       	out	0x3d, r28	; 61
    5656:	de bf       	out	0x3e, r29	; 62
    5658:	cf 91       	pop	r28
    565a:	df 91       	pop	r29
    565c:	1f 91       	pop	r17
    565e:	0f 91       	pop	r16
    5660:	ff 90       	pop	r15
    5662:	ef 90       	pop	r14
    5664:	df 90       	pop	r13
    5666:	cf 90       	pop	r12
    5668:	bf 90       	pop	r11
    566a:	af 90       	pop	r10
    566c:	9f 90       	pop	r9
    566e:	8f 90       	pop	r8
    5670:	08 95       	ret

00005672 <mc_arc_nonblock>:

int mc_arc_nonblock(double theta, double angular_travel, 
					double radius, double linear_travel, 
					int axis_1, int axis_2, int axis_linear, 
					double feed_rate, int invert_feed_rate)
{
    5672:	8f 92       	push	r8
    5674:	9f 92       	push	r9
    5676:	af 92       	push	r10
    5678:	bf 92       	push	r11
    567a:	cf 92       	push	r12
    567c:	df 92       	push	r13
    567e:	ef 92       	push	r14
    5680:	ff 92       	push	r15
    5682:	0f 93       	push	r16
    5684:	1f 93       	push	r17
    5686:	df 93       	push	r29
    5688:	cf 93       	push	r28
    568a:	cd b7       	in	r28, 0x3d	; 61
    568c:	de b7       	in	r29, 0x3e	; 62
    568e:	6c 97       	sbiw	r28, 0x1c	; 28
    5690:	cd bf       	out	0x3d, r28	; 61
    5692:	de bf       	out	0x3e, r29	; 62
    5694:	69 83       	std	Y+1, r22	; 0x01
    5696:	7a 83       	std	Y+2, r23	; 0x02
    5698:	8b 83       	std	Y+3, r24	; 0x03
    569a:	9c 83       	std	Y+4, r25	; 0x04
    569c:	2d 83       	std	Y+5, r18	; 0x05
    569e:	3e 83       	std	Y+6, r19	; 0x06
    56a0:	4f 83       	std	Y+7, r20	; 0x07
    56a2:	58 87       	std	Y+8, r21	; 0x08
    56a4:	e9 86       	std	Y+9, r14	; 0x09
    56a6:	fa 86       	std	Y+10, r15	; 0x0a
    56a8:	0b 87       	std	Y+11, r16	; 0x0b
    56aa:	1c 87       	std	Y+12, r17	; 0x0c
    56ac:	ad 86       	std	Y+13, r10	; 0x0d
    56ae:	be 86       	std	Y+14, r11	; 0x0e
    56b0:	cf 86       	std	Y+15, r12	; 0x0f
    56b2:	d8 8a       	std	Y+16, r13	; 0x10
    56b4:	89 8a       	std	Y+17, r8	; 0x11
    56b6:	9a 8a       	std	Y+18, r9	; 0x12
	// load the arc struct
	ma.theta = theta;
    56b8:	89 81       	ldd	r24, Y+1	; 0x01
    56ba:	9a 81       	ldd	r25, Y+2	; 0x02
    56bc:	ab 81       	ldd	r26, Y+3	; 0x03
    56be:	bc 81       	ldd	r27, Y+4	; 0x04
    56c0:	80 93 2f 25 	sts	0x252F, r24
    56c4:	90 93 30 25 	sts	0x2530, r25
    56c8:	a0 93 31 25 	sts	0x2531, r26
    56cc:	b0 93 32 25 	sts	0x2532, r27
	ma.radius = radius;
    56d0:	89 85       	ldd	r24, Y+9	; 0x09
    56d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    56d4:	ab 85       	ldd	r26, Y+11	; 0x0b
    56d6:	bc 85       	ldd	r27, Y+12	; 0x0c
    56d8:	80 93 33 25 	sts	0x2533, r24
    56dc:	90 93 34 25 	sts	0x2534, r25
    56e0:	a0 93 35 25 	sts	0x2535, r26
    56e4:	b0 93 36 25 	sts	0x2536, r27
	ma.angular_travel = angular_travel;
    56e8:	8d 81       	ldd	r24, Y+5	; 0x05
    56ea:	9e 81       	ldd	r25, Y+6	; 0x06
    56ec:	af 81       	ldd	r26, Y+7	; 0x07
    56ee:	b8 85       	ldd	r27, Y+8	; 0x08
    56f0:	80 93 43 25 	sts	0x2543, r24
    56f4:	90 93 44 25 	sts	0x2544, r25
    56f8:	a0 93 45 25 	sts	0x2545, r26
    56fc:	b0 93 46 25 	sts	0x2546, r27
	ma.linear_travel = linear_travel;
    5700:	8d 85       	ldd	r24, Y+13	; 0x0d
    5702:	9e 85       	ldd	r25, Y+14	; 0x0e
    5704:	af 85       	ldd	r26, Y+15	; 0x0f
    5706:	b8 89       	ldd	r27, Y+16	; 0x10
    5708:	80 93 47 25 	sts	0x2547, r24
    570c:	90 93 48 25 	sts	0x2548, r25
    5710:	a0 93 49 25 	sts	0x2549, r26
    5714:	b0 93 4a 25 	sts	0x254A, r27
	ma.feed_rate = feed_rate;
    5718:	88 a9       	ldd	r24, Y+48	; 0x30
    571a:	99 a9       	ldd	r25, Y+49	; 0x31
    571c:	aa a9       	ldd	r26, Y+50	; 0x32
    571e:	bb a9       	ldd	r27, Y+51	; 0x33
    5720:	80 93 37 25 	sts	0x2537, r24
    5724:	90 93 38 25 	sts	0x2538, r25
    5728:	a0 93 39 25 	sts	0x2539, r26
    572c:	b0 93 3a 25 	sts	0x253A, r27
	ma.invert_feed_rate = invert_feed_rate;
    5730:	8c a9       	ldd	r24, Y+52	; 0x34
    5732:	9d a9       	ldd	r25, Y+53	; 0x35
    5734:	80 93 0f 25 	sts	0x250F, r24
    5738:	90 93 10 25 	sts	0x2510, r25
	ma.axis_1 = axis_1;
    573c:	89 89       	ldd	r24, Y+17	; 0x11
    573e:	9a 89       	ldd	r25, Y+18	; 0x12
    5740:	80 93 11 25 	sts	0x2511, r24
    5744:	90 93 12 25 	sts	0x2512, r25
	ma.axis_2 = axis_2;
    5748:	8c a5       	ldd	r24, Y+44	; 0x2c
    574a:	9d a5       	ldd	r25, Y+45	; 0x2d
    574c:	80 93 13 25 	sts	0x2513, r24
    5750:	90 93 14 25 	sts	0x2514, r25
	ma.axis_linear = axis_linear;
    5754:	8e a5       	ldd	r24, Y+46	; 0x2e
    5756:	9f a5       	ldd	r25, Y+47	; 0x2f
    5758:	80 93 15 25 	sts	0x2515, r24
    575c:	90 93 16 25 	sts	0x2516, r25
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    5760:	80 91 43 25 	lds	r24, 0x2543
    5764:	90 91 44 25 	lds	r25, 0x2544
    5768:	a0 91 45 25 	lds	r26, 0x2545
    576c:	b0 91 46 25 	lds	r27, 0x2546
    5770:	20 91 33 25 	lds	r18, 0x2533
    5774:	30 91 34 25 	lds	r19, 0x2534
    5778:	40 91 35 25 	lds	r20, 0x2535
    577c:	50 91 36 25 	lds	r21, 0x2536
    5780:	bc 01       	movw	r22, r24
    5782:	cd 01       	movw	r24, r26
    5784:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    5788:	dc 01       	movw	r26, r24
    578a:	cb 01       	movw	r24, r22
    578c:	89 8f       	std	Y+25, r24	; 0x19
    578e:	9a 8f       	std	Y+26, r25	; 0x1a
    5790:	ab 8f       	std	Y+27, r26	; 0x1b
    5792:	bc 8f       	std	Y+28, r27	; 0x1c
    5794:	80 91 47 25 	lds	r24, 0x2547
    5798:	90 91 48 25 	lds	r25, 0x2548
    579c:	a0 91 49 25 	lds	r26, 0x2549
    57a0:	b0 91 4a 25 	lds	r27, 0x254A
    57a4:	bc 01       	movw	r22, r24
    57a6:	cd 01       	movw	r24, r26
    57a8:	0e 94 9c 5b 	call	0xb738	; 0xb738 <__fixsfsi>
    57ac:	dc 01       	movw	r26, r24
    57ae:	cb 01       	movw	r24, r22
    57b0:	8d 8b       	std	Y+21, r24	; 0x15
    57b2:	9e 8b       	std	Y+22, r25	; 0x16
    57b4:	af 8b       	std	Y+23, r26	; 0x17
    57b6:	b8 8f       	std	Y+24, r27	; 0x18
    57b8:	8d 89       	ldd	r24, Y+21	; 0x15
    57ba:	9e 89       	ldd	r25, Y+22	; 0x16
    57bc:	af 89       	ldd	r26, Y+23	; 0x17
    57be:	b8 8d       	ldd	r27, Y+24	; 0x18
    57c0:	bb 23       	and	r27, r27
    57c2:	7c f4       	brge	.+30     	; 0x57e2 <mc_arc_nonblock+0x170>
    57c4:	8d 89       	ldd	r24, Y+21	; 0x15
    57c6:	9e 89       	ldd	r25, Y+22	; 0x16
    57c8:	af 89       	ldd	r26, Y+23	; 0x17
    57ca:	b8 8d       	ldd	r27, Y+24	; 0x18
    57cc:	b0 95       	com	r27
    57ce:	a0 95       	com	r26
    57d0:	90 95       	com	r25
    57d2:	81 95       	neg	r24
    57d4:	9f 4f       	sbci	r25, 0xFF	; 255
    57d6:	af 4f       	sbci	r26, 0xFF	; 255
    57d8:	bf 4f       	sbci	r27, 0xFF	; 255
    57da:	8d 8b       	std	Y+21, r24	; 0x15
    57dc:	9e 8b       	std	Y+22, r25	; 0x16
    57de:	af 8b       	std	Y+23, r26	; 0x17
    57e0:	b8 8f       	std	Y+24, r27	; 0x18
    57e2:	6d 89       	ldd	r22, Y+21	; 0x15
    57e4:	7e 89       	ldd	r23, Y+22	; 0x16
    57e6:	8f 89       	ldd	r24, Y+23	; 0x17
    57e8:	98 8d       	ldd	r25, Y+24	; 0x18
    57ea:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    57ee:	9b 01       	movw	r18, r22
    57f0:	ac 01       	movw	r20, r24
    57f2:	69 8d       	ldd	r22, Y+25	; 0x19
    57f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57fa:	0e 94 2a 5d 	call	0xba54	; 0xba54 <hypot>
    57fe:	dc 01       	movw	r26, r24
    5800:	cb 01       	movw	r24, r22
    5802:	80 93 23 25 	sts	0x2523, r24
    5806:	90 93 24 25 	sts	0x2524, r25
    580a:	a0 93 25 25 	sts	0x2525, r26
    580e:	b0 93 26 25 	sts	0x2526, r27
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    5812:	80 91 23 25 	lds	r24, 0x2523
    5816:	90 91 24 25 	lds	r25, 0x2524
    581a:	a0 91 25 25 	lds	r26, 0x2525
    581e:	b0 91 26 25 	lds	r27, 0x2526
    5822:	bc 01       	movw	r22, r24
    5824:	cd 01       	movw	r24, r26
    5826:	2a e0       	ldi	r18, 0x0A	; 10
    5828:	37 ed       	ldi	r19, 0xD7	; 215
    582a:	43 e2       	ldi	r20, 0x23	; 35
    582c:	5c e3       	ldi	r21, 0x3C	; 60
    582e:	0e 94 2d 5b 	call	0xb65a	; 0xb65a <__cmpsf2>
    5832:	88 23       	and	r24, r24
    5834:	2c f4       	brge	.+10     	; 0x5840 <mc_arc_nonblock+0x1ce>
		return (TG_ARC_ERROR);						// arc specification error
    5836:	a0 e1       	ldi	r26, 0x10	; 16
    5838:	b0 e0       	ldi	r27, 0x00	; 0
    583a:	ab 8b       	std	Y+19, r26	; 0x13
    583c:	bc 8b       	std	Y+20, r27	; 0x14
    583e:	92 c1       	rjmp	.+804    	; 0x5b64 <mc_arc_nonblock+0x4f2>
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    5840:	80 91 23 25 	lds	r24, 0x2523
    5844:	90 91 24 25 	lds	r25, 0x2524
    5848:	a0 91 25 25 	lds	r26, 0x2525
    584c:	b0 91 26 25 	lds	r27, 0x2526
    5850:	20 91 9c 24 	lds	r18, 0x249C
    5854:	30 91 9d 24 	lds	r19, 0x249D
    5858:	40 91 9e 24 	lds	r20, 0x249E
    585c:	50 91 9f 24 	lds	r21, 0x249F
    5860:	bc 01       	movw	r22, r24
    5862:	cd 01       	movw	r24, r26
    5864:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    5868:	dc 01       	movw	r26, r24
    586a:	cb 01       	movw	r24, r22
    586c:	bc 01       	movw	r22, r24
    586e:	cd 01       	movw	r24, r26
    5870:	0e 94 1a 5b 	call	0xb634	; 0xb634 <ceil>
    5874:	dc 01       	movw	r26, r24
    5876:	cb 01       	movw	r24, r22
    5878:	bc 01       	movw	r22, r24
    587a:	cd 01       	movw	r24, r26
    587c:	0e 94 9c 5b 	call	0xb738	; 0xb738 <__fixsfsi>
    5880:	dc 01       	movw	r26, r24
    5882:	cb 01       	movw	r24, r22
    5884:	80 93 0b 25 	sts	0x250B, r24
    5888:	90 93 0c 25 	sts	0x250C, r25
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    588c:	80 91 0f 25 	lds	r24, 0x250F
    5890:	90 91 10 25 	lds	r25, 0x2510
    5894:	00 97       	sbiw	r24, 0x00	; 0
    5896:	21 f1       	breq	.+72     	; 0x58e0 <mc_arc_nonblock+0x26e>
		ma.feed_rate *= ma.segments; 
    5898:	e0 90 37 25 	lds	r14, 0x2537
    589c:	f0 90 38 25 	lds	r15, 0x2538
    58a0:	00 91 39 25 	lds	r16, 0x2539
    58a4:	10 91 3a 25 	lds	r17, 0x253A
    58a8:	80 91 0b 25 	lds	r24, 0x250B
    58ac:	90 91 0c 25 	lds	r25, 0x250C
    58b0:	aa 27       	eor	r26, r26
    58b2:	97 fd       	sbrc	r25, 7
    58b4:	a0 95       	com	r26
    58b6:	ba 2f       	mov	r27, r26
    58b8:	bc 01       	movw	r22, r24
    58ba:	cd 01       	movw	r24, r26
    58bc:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    58c0:	9b 01       	movw	r18, r22
    58c2:	ac 01       	movw	r20, r24
    58c4:	c8 01       	movw	r24, r16
    58c6:	b7 01       	movw	r22, r14
    58c8:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    58cc:	dc 01       	movw	r26, r24
    58ce:	cb 01       	movw	r24, r22
    58d0:	80 93 37 25 	sts	0x2537, r24
    58d4:	90 93 38 25 	sts	0x2538, r25
    58d8:	a0 93 39 25 	sts	0x2539, r26
    58dc:	b0 93 3a 25 	sts	0x253A, r27
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    58e0:	e0 90 43 25 	lds	r14, 0x2543
    58e4:	f0 90 44 25 	lds	r15, 0x2544
    58e8:	00 91 45 25 	lds	r16, 0x2545
    58ec:	10 91 46 25 	lds	r17, 0x2546
    58f0:	80 91 0b 25 	lds	r24, 0x250B
    58f4:	90 91 0c 25 	lds	r25, 0x250C
    58f8:	aa 27       	eor	r26, r26
    58fa:	97 fd       	sbrc	r25, 7
    58fc:	a0 95       	com	r26
    58fe:	ba 2f       	mov	r27, r26
    5900:	bc 01       	movw	r22, r24
    5902:	cd 01       	movw	r24, r26
    5904:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    5908:	9b 01       	movw	r18, r22
    590a:	ac 01       	movw	r20, r24
    590c:	c8 01       	movw	r24, r16
    590e:	b7 01       	movw	r22, r14
    5910:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    5914:	dc 01       	movw	r26, r24
    5916:	cb 01       	movw	r24, r22
    5918:	80 93 3b 25 	sts	0x253B, r24
    591c:	90 93 3c 25 	sts	0x253C, r25
    5920:	a0 93 3d 25 	sts	0x253D, r26
    5924:	b0 93 3e 25 	sts	0x253E, r27
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    5928:	e0 90 47 25 	lds	r14, 0x2547
    592c:	f0 90 48 25 	lds	r15, 0x2548
    5930:	00 91 49 25 	lds	r16, 0x2549
    5934:	10 91 4a 25 	lds	r17, 0x254A
    5938:	80 91 0b 25 	lds	r24, 0x250B
    593c:	90 91 0c 25 	lds	r25, 0x250C
    5940:	aa 27       	eor	r26, r26
    5942:	97 fd       	sbrc	r25, 7
    5944:	a0 95       	com	r26
    5946:	ba 2f       	mov	r27, r26
    5948:	bc 01       	movw	r22, r24
    594a:	cd 01       	movw	r24, r26
    594c:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    5950:	9b 01       	movw	r18, r22
    5952:	ac 01       	movw	r20, r24
    5954:	c8 01       	movw	r24, r16
    5956:	b7 01       	movw	r22, r14
    5958:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    595c:	dc 01       	movw	r26, r24
    595e:	cb 01       	movw	r24, r22
    5960:	80 93 3f 25 	sts	0x253F, r24
    5964:	90 93 40 25 	sts	0x2540, r25
    5968:	a0 93 41 25 	sts	0x2541, r26
    596c:	b0 93 42 25 	sts	0x2542, r27
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    5970:	80 91 11 25 	lds	r24, 0x2511
    5974:	90 91 12 25 	lds	r25, 0x2512
    5978:	88 0f       	add	r24, r24
    597a:	99 1f       	adc	r25, r25
    597c:	88 0f       	add	r24, r24
    597e:	99 1f       	adc	r25, r25
    5980:	fc 01       	movw	r30, r24
    5982:	eb 57       	subi	r30, 0x7B	; 123
    5984:	fe 4d       	sbci	r31, 0xDE	; 222
    5986:	80 81       	ld	r24, Z
    5988:	91 81       	ldd	r25, Z+1	; 0x01
    598a:	a2 81       	ldd	r26, Z+2	; 0x02
    598c:	b3 81       	ldd	r27, Z+3	; 0x03
    598e:	bc 01       	movw	r22, r24
    5990:	cd 01       	movw	r24, r26
    5992:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    5996:	7b 01       	movw	r14, r22
    5998:	8c 01       	movw	r16, r24
    599a:	20 91 11 25 	lds	r18, 0x2511
    599e:	30 91 12 25 	lds	r19, 0x2512
    59a2:	c9 01       	movw	r24, r18
    59a4:	88 0f       	add	r24, r24
    59a6:	99 1f       	adc	r25, r25
    59a8:	82 0f       	add	r24, r18
    59aa:	93 1f       	adc	r25, r19
    59ac:	88 0f       	add	r24, r24
    59ae:	99 1f       	adc	r25, r25
    59b0:	88 0f       	add	r24, r24
    59b2:	99 1f       	adc	r25, r25
    59b4:	88 0f       	add	r24, r24
    59b6:	99 1f       	adc	r25, r25
    59b8:	fc 01       	movw	r30, r24
    59ba:	e5 54       	subi	r30, 0x45	; 69
    59bc:	fb 4d       	sbci	r31, 0xDB	; 219
    59be:	20 81       	ld	r18, Z
    59c0:	31 81       	ldd	r19, Z+1	; 0x01
    59c2:	42 81       	ldd	r20, Z+2	; 0x02
    59c4:	53 81       	ldd	r21, Z+3	; 0x03
    59c6:	c8 01       	movw	r24, r16
    59c8:	b7 01       	movw	r22, r14
    59ca:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    59ce:	dc 01       	movw	r26, r24
    59d0:	cb 01       	movw	r24, r22
    59d2:	7c 01       	movw	r14, r24
    59d4:	8d 01       	movw	r16, r26
    59d6:	80 91 2f 25 	lds	r24, 0x252F
    59da:	90 91 30 25 	lds	r25, 0x2530
    59de:	a0 91 31 25 	lds	r26, 0x2531
    59e2:	b0 91 32 25 	lds	r27, 0x2532
    59e6:	bc 01       	movw	r22, r24
    59e8:	cd 01       	movw	r24, r26
    59ea:	0e 94 52 5e 	call	0xbca4	; 0xbca4 <sin>
    59ee:	dc 01       	movw	r26, r24
    59f0:	cb 01       	movw	r24, r22
    59f2:	20 91 33 25 	lds	r18, 0x2533
    59f6:	30 91 34 25 	lds	r19, 0x2534
    59fa:	40 91 35 25 	lds	r20, 0x2535
    59fe:	50 91 36 25 	lds	r21, 0x2536
    5a02:	bc 01       	movw	r22, r24
    5a04:	cd 01       	movw	r24, r26
    5a06:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    5a0a:	dc 01       	movw	r26, r24
    5a0c:	cb 01       	movw	r24, r22
    5a0e:	9c 01       	movw	r18, r24
    5a10:	ad 01       	movw	r20, r26
    5a12:	c8 01       	movw	r24, r16
    5a14:	b7 01       	movw	r22, r14
    5a16:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    5a1a:	dc 01       	movw	r26, r24
    5a1c:	cb 01       	movw	r24, r22
    5a1e:	80 93 27 25 	sts	0x2527, r24
    5a22:	90 93 28 25 	sts	0x2528, r25
    5a26:	a0 93 29 25 	sts	0x2529, r26
    5a2a:	b0 93 2a 25 	sts	0x252A, r27
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    5a2e:	80 91 13 25 	lds	r24, 0x2513
    5a32:	90 91 14 25 	lds	r25, 0x2514
    5a36:	88 0f       	add	r24, r24
    5a38:	99 1f       	adc	r25, r25
    5a3a:	88 0f       	add	r24, r24
    5a3c:	99 1f       	adc	r25, r25
    5a3e:	fc 01       	movw	r30, r24
    5a40:	eb 57       	subi	r30, 0x7B	; 123
    5a42:	fe 4d       	sbci	r31, 0xDE	; 222
    5a44:	80 81       	ld	r24, Z
    5a46:	91 81       	ldd	r25, Z+1	; 0x01
    5a48:	a2 81       	ldd	r26, Z+2	; 0x02
    5a4a:	b3 81       	ldd	r27, Z+3	; 0x03
    5a4c:	bc 01       	movw	r22, r24
    5a4e:	cd 01       	movw	r24, r26
    5a50:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    5a54:	7b 01       	movw	r14, r22
    5a56:	8c 01       	movw	r16, r24
    5a58:	20 91 13 25 	lds	r18, 0x2513
    5a5c:	30 91 14 25 	lds	r19, 0x2514
    5a60:	c9 01       	movw	r24, r18
    5a62:	88 0f       	add	r24, r24
    5a64:	99 1f       	adc	r25, r25
    5a66:	82 0f       	add	r24, r18
    5a68:	93 1f       	adc	r25, r19
    5a6a:	88 0f       	add	r24, r24
    5a6c:	99 1f       	adc	r25, r25
    5a6e:	88 0f       	add	r24, r24
    5a70:	99 1f       	adc	r25, r25
    5a72:	88 0f       	add	r24, r24
    5a74:	99 1f       	adc	r25, r25
    5a76:	fc 01       	movw	r30, r24
    5a78:	e5 54       	subi	r30, 0x45	; 69
    5a7a:	fb 4d       	sbci	r31, 0xDB	; 219
    5a7c:	20 81       	ld	r18, Z
    5a7e:	31 81       	ldd	r19, Z+1	; 0x01
    5a80:	42 81       	ldd	r20, Z+2	; 0x02
    5a82:	53 81       	ldd	r21, Z+3	; 0x03
    5a84:	c8 01       	movw	r24, r16
    5a86:	b7 01       	movw	r22, r14
    5a88:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    5a8c:	dc 01       	movw	r26, r24
    5a8e:	cb 01       	movw	r24, r22
    5a90:	7c 01       	movw	r14, r24
    5a92:	8d 01       	movw	r16, r26
    5a94:	80 91 2f 25 	lds	r24, 0x252F
    5a98:	90 91 30 25 	lds	r25, 0x2530
    5a9c:	a0 91 31 25 	lds	r26, 0x2531
    5aa0:	b0 91 32 25 	lds	r27, 0x2532
    5aa4:	bc 01       	movw	r22, r24
    5aa6:	cd 01       	movw	r24, r26
    5aa8:	0e 94 31 5b 	call	0xb662	; 0xb662 <cos>
    5aac:	dc 01       	movw	r26, r24
    5aae:	cb 01       	movw	r24, r22
    5ab0:	20 91 33 25 	lds	r18, 0x2533
    5ab4:	30 91 34 25 	lds	r19, 0x2534
    5ab8:	40 91 35 25 	lds	r20, 0x2535
    5abc:	50 91 36 25 	lds	r21, 0x2536
    5ac0:	bc 01       	movw	r22, r24
    5ac2:	cd 01       	movw	r24, r26
    5ac4:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    5ac8:	dc 01       	movw	r26, r24
    5aca:	cb 01       	movw	r24, r22
    5acc:	9c 01       	movw	r18, r24
    5ace:	ad 01       	movw	r20, r26
    5ad0:	c8 01       	movw	r24, r16
    5ad2:	b7 01       	movw	r22, r14
    5ad4:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__subsf3>
    5ad8:	dc 01       	movw	r26, r24
    5ada:	cb 01       	movw	r24, r22
    5adc:	80 93 2b 25 	sts	0x252B, r24
    5ae0:	90 93 2c 25 	sts	0x252C, r25
    5ae4:	a0 93 2d 25 	sts	0x252D, r26
    5ae8:	b0 93 2e 25 	sts	0x252E, r27

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    5aec:	00 91 15 25 	lds	r16, 0x2515
    5af0:	10 91 16 25 	lds	r17, 0x2516
    5af4:	80 91 15 25 	lds	r24, 0x2515
    5af8:	90 91 16 25 	lds	r25, 0x2516
    5afc:	88 0f       	add	r24, r24
    5afe:	99 1f       	adc	r25, r25
    5b00:	88 0f       	add	r24, r24
    5b02:	99 1f       	adc	r25, r25
    5b04:	fc 01       	movw	r30, r24
    5b06:	eb 57       	subi	r30, 0x7B	; 123
    5b08:	fe 4d       	sbci	r31, 0xDE	; 222
    5b0a:	80 81       	ld	r24, Z
    5b0c:	91 81       	ldd	r25, Z+1	; 0x01
    5b0e:	a2 81       	ldd	r26, Z+2	; 0x02
    5b10:	b3 81       	ldd	r27, Z+3	; 0x03
    5b12:	bc 01       	movw	r22, r24
    5b14:	cd 01       	movw	r24, r26
    5b16:	0e 94 cf 5b 	call	0xb79e	; 0xb79e <__floatsisf>
    5b1a:	dc 01       	movw	r26, r24
    5b1c:	cb 01       	movw	r24, r22
    5b1e:	20 91 eb 24 	lds	r18, 0x24EB
    5b22:	30 91 ec 24 	lds	r19, 0x24EC
    5b26:	40 91 ed 24 	lds	r20, 0x24ED
    5b2a:	50 91 ee 24 	lds	r21, 0x24EE
    5b2e:	bc 01       	movw	r22, r24
    5b30:	cd 01       	movw	r24, r26
    5b32:	0e 94 34 5b 	call	0xb668	; 0xb668 <__divsf3>
    5b36:	dc 01       	movw	r26, r24
    5b38:	cb 01       	movw	r24, r22
    5b3a:	9c 01       	movw	r18, r24
    5b3c:	ad 01       	movw	r20, r26
    5b3e:	c8 01       	movw	r24, r16
    5b40:	88 0f       	add	r24, r24
    5b42:	99 1f       	adc	r25, r25
    5b44:	88 0f       	add	r24, r24
    5b46:	99 1f       	adc	r25, r25
    5b48:	fc 01       	movw	r30, r24
    5b4a:	e9 5e       	subi	r30, 0xE9	; 233
    5b4c:	fa 4d       	sbci	r31, 0xDA	; 218
    5b4e:	20 83       	st	Z, r18
    5b50:	31 83       	std	Z+1, r19	; 0x01
    5b52:	42 83       	std	Z+2, r20	; 0x02
    5b54:	53 83       	std	Z+3, r21	; 0x03
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    5b56:	81 e0       	ldi	r24, 0x01	; 1
    5b58:	80 93 0a 25 	sts	0x250A, r24
	return (mc_arc_continuation());
    5b5c:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <mc_arc_continuation>
    5b60:	8b 8b       	std	Y+19, r24	; 0x13
    5b62:	9c 8b       	std	Y+20, r25	; 0x14
    5b64:	8b 89       	ldd	r24, Y+19	; 0x13
    5b66:	9c 89       	ldd	r25, Y+20	; 0x14
}
    5b68:	6c 96       	adiw	r28, 0x1c	; 28
    5b6a:	cd bf       	out	0x3d, r28	; 61
    5b6c:	de bf       	out	0x3e, r29	; 62
    5b6e:	cf 91       	pop	r28
    5b70:	df 91       	pop	r29
    5b72:	1f 91       	pop	r17
    5b74:	0f 91       	pop	r16
    5b76:	ff 90       	pop	r15
    5b78:	ef 90       	pop	r14
    5b7a:	df 90       	pop	r13
    5b7c:	cf 90       	pop	r12
    5b7e:	bf 90       	pop	r11
    5b80:	af 90       	pop	r10
    5b82:	9f 90       	pop	r9
    5b84:	8f 90       	pop	r8
    5b86:	08 95       	ret

00005b88 <mc_arc_continuation>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continuation() 
{
    5b88:	8f 92       	push	r8
    5b8a:	9f 92       	push	r9
    5b8c:	af 92       	push	r10
    5b8e:	bf 92       	push	r11
    5b90:	cf 92       	push	r12
    5b92:	df 92       	push	r13
    5b94:	ef 92       	push	r14
    5b96:	ff 92       	push	r15
    5b98:	0f 93       	push	r16
    5b9a:	1f 93       	push	r17
    5b9c:	df 93       	push	r29
    5b9e:	cf 93       	push	r28
    5ba0:	0f 92       	push	r0
    5ba2:	0f 92       	push	r0
    5ba4:	cd b7       	in	r28, 0x3d	; 61
    5ba6:	de b7       	in	r29, 0x3e	; 62
	if (ma.arc_state == MC_STATE_OFF) {
    5ba8:	80 91 0a 25 	lds	r24, 0x250A
    5bac:	88 23       	and	r24, r24
    5bae:	29 f4       	brne	.+10     	; 0x5bba <mc_arc_continuation+0x32>
		return (TG_NOOP);						// return NULL for non-started arc
    5bb0:	82 e0       	ldi	r24, 0x02	; 2
    5bb2:	90 e0       	ldi	r25, 0x00	; 0
    5bb4:	89 83       	std	Y+1, r24	; 0x01
    5bb6:	9a 83       	std	Y+2, r25	; 0x02
    5bb8:	21 c1       	rjmp	.+578    	; 0x5dfc <mc_arc_continuation+0x274>
	} else if (ma.arc_state == MC_STATE_NEW) {
    5bba:	80 91 0a 25 	lds	r24, 0x250A
    5bbe:	81 30       	cpi	r24, 0x01	; 1
    5bc0:	09 f0       	breq	.+2      	; 0x5bc4 <mc_arc_continuation+0x3c>
    5bc2:	0c c1       	rjmp	.+536    	; 0x5ddc <mc_arc_continuation+0x254>
		ma.segment_counter=0;
    5bc4:	10 92 0d 25 	sts	0x250D, r1
    5bc8:	10 92 0e 25 	sts	0x250E, r1
		ma.arc_state = MC_STATE_RUNNING;
    5bcc:	82 e0       	ldi	r24, 0x02	; 2
    5bce:	80 93 0a 25 	sts	0x250A, r24
    5bd2:	04 c1       	rjmp	.+520    	; 0x5ddc <mc_arc_continuation+0x254>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    5bd4:	0e 94 be 47 	call	0x8f7c	; 0x8f7c <mv_test_move_buffer_full>
    5bd8:	88 23       	and	r24, r24
    5bda:	29 f0       	breq	.+10     	; 0x5be6 <mc_arc_continuation+0x5e>
			return (TG_EAGAIN);
    5bdc:	81 e0       	ldi	r24, 0x01	; 1
    5bde:	90 e0       	ldi	r25, 0x00	; 0
    5be0:	89 83       	std	Y+1, r24	; 0x01
    5be2:	9a 83       	std	Y+2, r25	; 0x02
    5be4:	0b c1       	rjmp	.+534    	; 0x5dfc <mc_arc_continuation+0x274>
		}
		ma.segment_counter++;
    5be6:	80 91 0d 25 	lds	r24, 0x250D
    5bea:	90 91 0e 25 	lds	r25, 0x250E
    5bee:	01 96       	adiw	r24, 0x01	; 1
    5bf0:	80 93 0d 25 	sts	0x250D, r24
    5bf4:	90 93 0e 25 	sts	0x250E, r25
		ma.theta += ma.theta_per_segment;
    5bf8:	80 91 2f 25 	lds	r24, 0x252F
    5bfc:	90 91 30 25 	lds	r25, 0x2530
    5c00:	a0 91 31 25 	lds	r26, 0x2531
    5c04:	b0 91 32 25 	lds	r27, 0x2532
    5c08:	20 91 3b 25 	lds	r18, 0x253B
    5c0c:	30 91 3c 25 	lds	r19, 0x253C
    5c10:	40 91 3d 25 	lds	r20, 0x253D
    5c14:	50 91 3e 25 	lds	r21, 0x253E
    5c18:	bc 01       	movw	r22, r24
    5c1a:	cd 01       	movw	r24, r26
    5c1c:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <__addsf3>
    5c20:	dc 01       	movw	r26, r24
    5c22:	cb 01       	movw	r24, r22
    5c24:	80 93 2f 25 	sts	0x252F, r24
    5c28:	90 93 30 25 	sts	0x2530, r25
    5c2c:	a0 93 31 25 	sts	0x2531, r26
    5c30:	b0 93 32 25 	sts	0x2532, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    5c34:	c0 90 11 25 	lds	r12, 0x2511
    5c38:	d0 90 12 25 	lds	r13, 0x2512
    5c3c:	e0 90 27 25 	lds	r14, 0x2527
    5c40:	f0 90 28 25 	lds	r15, 0x2528
    5c44:	00 91 29 25 	lds	r16, 0x2529
    5c48:	10 91 2a 25 	lds	r17, 0x252A
    5c4c:	80 91 2f 25 	lds	r24, 0x252F
    5c50:	90 91 30 25 	lds	r25, 0x2530
    5c54:	a0 91 31 25 	lds	r26, 0x2531
    5c58:	b0 91 32 25 	lds	r27, 0x2532
    5c5c:	bc 01       	movw	r22, r24
    5c5e:	cd 01       	movw	r24, r26
    5c60:	0e 94 52 5e 	call	0xbca4	; 0xbca4 <sin>
    5c64:	dc 01       	movw	r26, r24
    5c66:	cb 01       	movw	r24, r22
    5c68:	20 91 33 25 	lds	r18, 0x2533
    5c6c:	30 91 34 25 	lds	r19, 0x2534
    5c70:	40 91 35 25 	lds	r20, 0x2535
    5c74:	50 91 36 25 	lds	r21, 0x2536
    5c78:	bc 01       	movw	r22, r24
    5c7a:	cd 01       	movw	r24, r26
    5c7c:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    5c80:	dc 01       	movw	r26, r24
    5c82:	cb 01       	movw	r24, r22
    5c84:	9c 01       	movw	r18, r24
    5c86:	ad 01       	movw	r20, r26
    5c88:	c8 01       	movw	r24, r16
    5c8a:	b7 01       	movw	r22, r14
    5c8c:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <__addsf3>
    5c90:	dc 01       	movw	r26, r24
    5c92:	cb 01       	movw	r24, r22
    5c94:	9c 01       	movw	r18, r24
    5c96:	ad 01       	movw	r20, r26
    5c98:	c6 01       	movw	r24, r12
    5c9a:	88 0f       	add	r24, r24
    5c9c:	99 1f       	adc	r25, r25
    5c9e:	88 0f       	add	r24, r24
    5ca0:	99 1f       	adc	r25, r25
    5ca2:	fc 01       	movw	r30, r24
    5ca4:	e9 5e       	subi	r30, 0xE9	; 233
    5ca6:	fa 4d       	sbci	r31, 0xDA	; 218
    5ca8:	20 83       	st	Z, r18
    5caa:	31 83       	std	Z+1, r19	; 0x01
    5cac:	42 83       	std	Z+2, r20	; 0x02
    5cae:	53 83       	std	Z+3, r21	; 0x03
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    5cb0:	c0 90 13 25 	lds	r12, 0x2513
    5cb4:	d0 90 14 25 	lds	r13, 0x2514
    5cb8:	e0 90 2b 25 	lds	r14, 0x252B
    5cbc:	f0 90 2c 25 	lds	r15, 0x252C
    5cc0:	00 91 2d 25 	lds	r16, 0x252D
    5cc4:	10 91 2e 25 	lds	r17, 0x252E
    5cc8:	80 91 2f 25 	lds	r24, 0x252F
    5ccc:	90 91 30 25 	lds	r25, 0x2530
    5cd0:	a0 91 31 25 	lds	r26, 0x2531
    5cd4:	b0 91 32 25 	lds	r27, 0x2532
    5cd8:	bc 01       	movw	r22, r24
    5cda:	cd 01       	movw	r24, r26
    5cdc:	0e 94 31 5b 	call	0xb662	; 0xb662 <cos>
    5ce0:	dc 01       	movw	r26, r24
    5ce2:	cb 01       	movw	r24, r22
    5ce4:	20 91 33 25 	lds	r18, 0x2533
    5ce8:	30 91 34 25 	lds	r19, 0x2534
    5cec:	40 91 35 25 	lds	r20, 0x2535
    5cf0:	50 91 36 25 	lds	r21, 0x2536
    5cf4:	bc 01       	movw	r22, r24
    5cf6:	cd 01       	movw	r24, r26
    5cf8:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    5cfc:	dc 01       	movw	r26, r24
    5cfe:	cb 01       	movw	r24, r22
    5d00:	9c 01       	movw	r18, r24
    5d02:	ad 01       	movw	r20, r26
    5d04:	c8 01       	movw	r24, r16
    5d06:	b7 01       	movw	r22, r14
    5d08:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <__addsf3>
    5d0c:	dc 01       	movw	r26, r24
    5d0e:	cb 01       	movw	r24, r22
    5d10:	9c 01       	movw	r18, r24
    5d12:	ad 01       	movw	r20, r26
    5d14:	c6 01       	movw	r24, r12
    5d16:	88 0f       	add	r24, r24
    5d18:	99 1f       	adc	r25, r25
    5d1a:	88 0f       	add	r24, r24
    5d1c:	99 1f       	adc	r25, r25
    5d1e:	fc 01       	movw	r30, r24
    5d20:	e9 5e       	subi	r30, 0xE9	; 233
    5d22:	fa 4d       	sbci	r31, 0xDA	; 218
    5d24:	20 83       	st	Z, r18
    5d26:	31 83       	std	Z+1, r19	; 0x01
    5d28:	42 83       	std	Z+2, r20	; 0x02
    5d2a:	53 83       	std	Z+3, r21	; 0x03
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    5d2c:	00 91 15 25 	lds	r16, 0x2515
    5d30:	10 91 16 25 	lds	r17, 0x2516
    5d34:	80 91 15 25 	lds	r24, 0x2515
    5d38:	90 91 16 25 	lds	r25, 0x2516
    5d3c:	88 0f       	add	r24, r24
    5d3e:	99 1f       	adc	r25, r25
    5d40:	88 0f       	add	r24, r24
    5d42:	99 1f       	adc	r25, r25
    5d44:	fc 01       	movw	r30, r24
    5d46:	e9 5e       	subi	r30, 0xE9	; 233
    5d48:	fa 4d       	sbci	r31, 0xDA	; 218
    5d4a:	80 81       	ld	r24, Z
    5d4c:	91 81       	ldd	r25, Z+1	; 0x01
    5d4e:	a2 81       	ldd	r26, Z+2	; 0x02
    5d50:	b3 81       	ldd	r27, Z+3	; 0x03
    5d52:	20 91 3f 25 	lds	r18, 0x253F
    5d56:	30 91 40 25 	lds	r19, 0x2540
    5d5a:	40 91 41 25 	lds	r20, 0x2541
    5d5e:	50 91 42 25 	lds	r21, 0x2542
    5d62:	bc 01       	movw	r22, r24
    5d64:	cd 01       	movw	r24, r26
    5d66:	0e 94 8e 5a 	call	0xb51c	; 0xb51c <__addsf3>
    5d6a:	dc 01       	movw	r26, r24
    5d6c:	cb 01       	movw	r24, r22
    5d6e:	9c 01       	movw	r18, r24
    5d70:	ad 01       	movw	r20, r26
    5d72:	c8 01       	movw	r24, r16
    5d74:	88 0f       	add	r24, r24
    5d76:	99 1f       	adc	r25, r25
    5d78:	88 0f       	add	r24, r24
    5d7a:	99 1f       	adc	r25, r25
    5d7c:	fc 01       	movw	r30, r24
    5d7e:	e9 5e       	subi	r30, 0xE9	; 233
    5d80:	fa 4d       	sbci	r31, 0xDA	; 218
    5d82:	20 83       	st	Z, r18
    5d84:	31 83       	std	Z+1, r19	; 0x01
    5d86:	42 83       	std	Z+2, r20	; 0x02
    5d88:	53 83       	std	Z+3, r21	; 0x03
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    5d8a:	80 91 17 25 	lds	r24, 0x2517
    5d8e:	90 91 18 25 	lds	r25, 0x2518
    5d92:	a0 91 19 25 	lds	r26, 0x2519
    5d96:	b0 91 1a 25 	lds	r27, 0x251A
    5d9a:	20 91 1b 25 	lds	r18, 0x251B
    5d9e:	30 91 1c 25 	lds	r19, 0x251C
    5da2:	40 91 1d 25 	lds	r20, 0x251D
    5da6:	50 91 1e 25 	lds	r21, 0x251E
    5daa:	e0 90 1f 25 	lds	r14, 0x251F
    5dae:	f0 90 20 25 	lds	r15, 0x2520
    5db2:	00 91 21 25 	lds	r16, 0x2521
    5db6:	10 91 22 25 	lds	r17, 0x2522
    5dba:	a0 90 37 25 	lds	r10, 0x2537
    5dbe:	b0 90 38 25 	lds	r11, 0x2538
    5dc2:	c0 90 39 25 	lds	r12, 0x2539
    5dc6:	d0 90 3a 25 	lds	r13, 0x253A
    5dca:	e0 91 0f 25 	lds	r30, 0x250F
    5dce:	f0 91 10 25 	lds	r31, 0x2510
    5dd2:	bc 01       	movw	r22, r24
    5dd4:	cd 01       	movw	r24, r26
    5dd6:	4f 01       	movw	r8, r30
    5dd8:	0e 94 94 23 	call	0x4728	; 0x4728 <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    5ddc:	20 91 0d 25 	lds	r18, 0x250D
    5de0:	30 91 0e 25 	lds	r19, 0x250E
    5de4:	80 91 0b 25 	lds	r24, 0x250B
    5de8:	90 91 0c 25 	lds	r25, 0x250C
    5dec:	82 17       	cp	r24, r18
    5dee:	93 07       	cpc	r25, r19
    5df0:	0c f0       	brlt	.+2      	; 0x5df4 <mc_arc_continuation+0x26c>
    5df2:	f0 ce       	rjmp	.-544    	; 0x5bd4 <mc_arc_continuation+0x4c>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    5df4:	10 92 0a 25 	sts	0x250A, r1
	return (TG_OK);
    5df8:	19 82       	std	Y+1, r1	; 0x01
    5dfa:	1a 82       	std	Y+2, r1	; 0x02
    5dfc:	89 81       	ldd	r24, Y+1	; 0x01
    5dfe:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5e00:	0f 90       	pop	r0
    5e02:	0f 90       	pop	r0
    5e04:	cf 91       	pop	r28
    5e06:	df 91       	pop	r29
    5e08:	1f 91       	pop	r17
    5e0a:	0f 91       	pop	r16
    5e0c:	ff 90       	pop	r15
    5e0e:	ef 90       	pop	r14
    5e10:	df 90       	pop	r13
    5e12:	cf 90       	pop	r12
    5e14:	bf 90       	pop	r11
    5e16:	af 90       	pop	r10
    5e18:	9f 90       	pop	r9
    5e1a:	8f 90       	pop	r8
    5e1c:	08 95       	ret

00005e1e <mc_dwell>:
 * This routine uses the X axis as only the X axis knows how to deal with a dwell.
 * Dwells are queued as linbes so the line continuation is used for non-blocking.
 */

int mc_dwell(double seconds) 
{
    5e1e:	df 93       	push	r29
    5e20:	cf 93       	push	r28
    5e22:	00 d0       	rcall	.+0      	; 0x5e24 <mc_dwell+0x6>
    5e24:	0f 92       	push	r0
    5e26:	cd b7       	in	r28, 0x3d	; 61
    5e28:	de b7       	in	r29, 0x3e	; 62
    5e2a:	69 83       	std	Y+1, r22	; 0x01
    5e2c:	7a 83       	std	Y+2, r23	; 0x02
    5e2e:	8b 83       	std	Y+3, r24	; 0x03
    5e30:	9c 83       	std	Y+4, r25	; 0x04
	mc.steps[X] = 0;
    5e32:	10 92 9d 21 	sts	0x219D, r1
    5e36:	10 92 9e 21 	sts	0x219E, r1
    5e3a:	10 92 9f 21 	sts	0x219F, r1
    5e3e:	10 92 a0 21 	sts	0x21A0, r1
	mc.steps[Y] = 0;
    5e42:	10 92 a1 21 	sts	0x21A1, r1
    5e46:	10 92 a2 21 	sts	0x21A2, r1
    5e4a:	10 92 a3 21 	sts	0x21A3, r1
    5e4e:	10 92 a4 21 	sts	0x21A4, r1
	mc.steps[Z] = 0;
    5e52:	10 92 a5 21 	sts	0x21A5, r1
    5e56:	10 92 a6 21 	sts	0x21A6, r1
    5e5a:	10 92 a7 21 	sts	0x21A7, r1
    5e5e:	10 92 a8 21 	sts	0x21A8, r1
	mc.microseconds = trunc(seconds*1000000);
    5e62:	69 81       	ldd	r22, Y+1	; 0x01
    5e64:	7a 81       	ldd	r23, Y+2	; 0x02
    5e66:	8b 81       	ldd	r24, Y+3	; 0x03
    5e68:	9c 81       	ldd	r25, Y+4	; 0x04
    5e6a:	20 e0       	ldi	r18, 0x00	; 0
    5e6c:	34 e2       	ldi	r19, 0x24	; 36
    5e6e:	44 e7       	ldi	r20, 0x74	; 116
    5e70:	59 e4       	ldi	r21, 0x49	; 73
    5e72:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    5e76:	dc 01       	movw	r26, r24
    5e78:	cb 01       	movw	r24, r22
    5e7a:	bc 01       	movw	r22, r24
    5e7c:	cd 01       	movw	r24, r26
    5e7e:	0e 94 9d 5e 	call	0xbd3a	; 0xbd3a <trunc>
    5e82:	dc 01       	movw	r26, r24
    5e84:	cb 01       	movw	r24, r22
    5e86:	bc 01       	movw	r22, r24
    5e88:	cd 01       	movw	r24, r26
    5e8a:	0e 94 a1 5b 	call	0xb742	; 0xb742 <__fixunssfsi>
    5e8e:	dc 01       	movw	r26, r24
    5e90:	cb 01       	movw	r24, r22
    5e92:	80 93 a9 21 	sts	0x21A9, r24
    5e96:	90 93 aa 21 	sts	0x21AA, r25
    5e9a:	a0 93 ab 21 	sts	0x21AB, r26
    5e9e:	b0 93 ac 21 	sts	0x21AC, r27
	mc.line_state = MC_STATE_NEW;
    5ea2:	81 e0       	ldi	r24, 0x01	; 1
    5ea4:	80 93 84 21 	sts	0x2184, r24
	return (mc_line_continuation());
    5ea8:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <mc_line_continuation>
}
    5eac:	24 96       	adiw	r28, 0x04	; 4
    5eae:	cd bf       	out	0x3d, r28	; 61
    5eb0:	de bf       	out	0x3e, r29	; 62
    5eb2:	cf 91       	pop	r28
    5eb4:	df 91       	pop	r29
    5eb6:	08 95       	ret

00005eb8 <mc_go_home>:
/* 
 * mc_go_home()  (st_go_home is NOT IMPLEMENTED)
 */

void mc_go_home()
{
    5eb8:	df 93       	push	r29
    5eba:	cf 93       	push	r28
    5ebc:	cd b7       	in	r28, 0x3d	; 61
    5ebe:	de b7       	in	r29, 0x3e	; 62
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    5ec0:	85 e8       	ldi	r24, 0x85	; 133
    5ec2:	91 e2       	ldi	r25, 0x21	; 33
    5ec4:	60 e0       	ldi	r22, 0x00	; 0
    5ec6:	70 e0       	ldi	r23, 0x00	; 0
    5ec8:	4c e0       	ldi	r20, 0x0C	; 12
    5eca:	50 e0       	ldi	r21, 0x00	; 0
    5ecc:	0e 94 d0 61 	call	0xc3a0	; 0xc3a0 <memset>
}
    5ed0:	cf 91       	pop	r28
    5ed2:	df 91       	pop	r29
    5ed4:	08 95       	ret

00005ed6 <spindle_init>:
 *	These should have been initially set as A axis max/min limit inputs
 *	See config.h for settings
 */

void spindle_init()
{
    5ed6:	df 93       	push	r29
    5ed8:	cf 93       	push	r28
    5eda:	cd b7       	in	r28, 0x3d	; 61
    5edc:	de b7       	in	r29, 0x3e	; 62
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    5ede:	e0 e6       	ldi	r30, 0x60	; 96
    5ee0:	f6 e0       	ldi	r31, 0x06	; 6
    5ee2:	80 e4       	ldi	r24, 0x40	; 64
    5ee4:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    5ee6:	e0 e6       	ldi	r30, 0x60	; 96
    5ee8:	f6 e0       	ldi	r31, 0x06	; 6
    5eea:	80 e8       	ldi	r24, 0x80	; 128
    5eec:	81 83       	std	Z+1, r24	; 0x01
}
    5eee:	cf 91       	pop	r28
    5ef0:	df 91       	pop	r29
    5ef2:	08 95       	ret

00005ef4 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
    5ef4:	df 93       	push	r29
    5ef6:	cf 93       	push	r28
    5ef8:	00 d0       	rcall	.+0      	; 0x5efa <spindle_run+0x6>
    5efa:	00 d0       	rcall	.+0      	; 0x5efc <spindle_run+0x8>
    5efc:	cd b7       	in	r28, 0x3d	; 61
    5efe:	de b7       	in	r29, 0x3e	; 62
    5f00:	89 83       	std	Y+1, r24	; 0x01
    5f02:	9a 83       	std	Y+2, r25	; 0x02
    5f04:	4b 83       	std	Y+3, r20	; 0x03
    5f06:	5c 83       	std	Y+4, r21	; 0x04
    5f08:	6d 83       	std	Y+5, r22	; 0x05
    5f0a:	7e 83       	std	Y+6, r23	; 0x06
	if(direction >= 0) {
    5f0c:	89 81       	ldd	r24, Y+1	; 0x01
    5f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f10:	99 23       	and	r25, r25
    5f12:	2c f0       	brlt	.+10     	; 0x5f1e <spindle_run+0x2a>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    5f14:	e0 e6       	ldi	r30, 0x60	; 96
    5f16:	f6 e0       	ldi	r31, 0x06	; 6
    5f18:	80 e8       	ldi	r24, 0x80	; 128
    5f1a:	85 83       	std	Z+5, r24	; 0x05
    5f1c:	04 c0       	rjmp	.+8      	; 0x5f26 <spindle_run+0x32>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    5f1e:	e0 e6       	ldi	r30, 0x60	; 96
    5f20:	f6 e0       	ldi	r31, 0x06	; 6
    5f22:	80 e8       	ldi	r24, 0x80	; 128
    5f24:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    5f26:	e0 e6       	ldi	r30, 0x60	; 96
    5f28:	f6 e0       	ldi	r31, 0x06	; 6
    5f2a:	80 e4       	ldi	r24, 0x40	; 64
    5f2c:	85 83       	std	Z+5, r24	; 0x05
}
    5f2e:	26 96       	adiw	r28, 0x06	; 6
    5f30:	cd bf       	out	0x3d, r28	; 61
    5f32:	de bf       	out	0x3e, r29	; 62
    5f34:	cf 91       	pop	r28
    5f36:	df 91       	pop	r29
    5f38:	08 95       	ret

00005f3a <spindle_stop>:

void spindle_stop()
{
    5f3a:	df 93       	push	r29
    5f3c:	cf 93       	push	r28
    5f3e:	cd b7       	in	r28, 0x3d	; 61
    5f40:	de b7       	in	r29, 0x3e	; 62
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    5f42:	e0 e6       	ldi	r30, 0x60	; 96
    5f44:	f6 e0       	ldi	r31, 0x06	; 6
    5f46:	80 e4       	ldi	r24, 0x40	; 64
    5f48:	86 83       	std	Z+6, r24	; 0x06
}
    5f4a:	cf 91       	pop	r28
    5f4c:	df 91       	pop	r29
    5f4e:	08 95       	ret

00005f50 <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    5f50:	df 93       	push	r29
    5f52:	cf 93       	push	r28
    5f54:	0f 92       	push	r0
    5f56:	cd b7       	in	r28, 0x3d	; 61
    5f58:	de b7       	in	r29, 0x3e	; 62
	ax.active_axes = 0;								// clear all active bits
    5f5a:	10 92 57 24 	sts	0x2457, r1
	ax.exec_mutex = FALSE;
    5f5e:	10 92 56 24 	sts	0x2456, r1

	ax.a[X].port = &X_MOTOR_PORT;				// bind PORTs to structs
    5f62:	80 e0       	ldi	r24, 0x00	; 0
    5f64:	96 e0       	ldi	r25, 0x06	; 6
    5f66:	80 93 66 24 	sts	0x2466, r24
    5f6a:	90 93 67 24 	sts	0x2467, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    5f6e:	80 ea       	ldi	r24, 0xA0	; 160
    5f70:	96 e0       	ldi	r25, 0x06	; 6
    5f72:	80 93 76 24 	sts	0x2476, r24
    5f76:	90 93 77 24 	sts	0x2477, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    5f7a:	80 e8       	ldi	r24, 0x80	; 128
    5f7c:	96 e0       	ldi	r25, 0x06	; 6
    5f7e:	80 93 86 24 	sts	0x2486, r24
    5f82:	90 93 87 24 	sts	0x2487, r25
	ax.a[A].port = &A_MOTOR_PORT;
    5f86:	80 e6       	ldi	r24, 0x60	; 96
    5f88:	96 e0       	ldi	r25, 0x06	; 6
    5f8a:	80 93 96 24 	sts	0x2496, r24
    5f8e:	90 93 97 24 	sts	0x2497, r25

	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
    5f92:	80 e0       	ldi	r24, 0x00	; 0
    5f94:	98 e0       	ldi	r25, 0x08	; 8
    5f96:	80 93 68 24 	sts	0x2468, r24
    5f9a:	90 93 69 24 	sts	0x2469, r25
	ax.a[Y].timer = &Y_TIMER;
    5f9e:	80 e0       	ldi	r24, 0x00	; 0
    5fa0:	99 e0       	ldi	r25, 0x09	; 9
    5fa2:	80 93 78 24 	sts	0x2478, r24
    5fa6:	90 93 79 24 	sts	0x2479, r25
	ax.a[Z].timer = &Z_TIMER;
    5faa:	80 e0       	ldi	r24, 0x00	; 0
    5fac:	9a e0       	ldi	r25, 0x0A	; 10
    5fae:	80 93 88 24 	sts	0x2488, r24
    5fb2:	90 93 89 24 	sts	0x2489, r25
	ax.a[A].timer = &A_TIMER;
    5fb6:	80 e0       	ldi	r24, 0x00	; 0
    5fb8:	9b e0       	ldi	r25, 0x0B	; 11
    5fba:	80 93 98 24 	sts	0x2498, r24
    5fbe:	90 93 99 24 	sts	0x2499, r25

	for (uint8_t i=X; i<=A; i++) {
    5fc2:	19 82       	std	Y+1, r1	; 0x01
    5fc4:	ad c0       	rjmp	.+346    	; 0x6120 <__stack+0x121>
		ax.a[i].polarity = cfg.a[i].polarity;
    5fc6:	89 81       	ldd	r24, Y+1	; 0x01
    5fc8:	48 2f       	mov	r20, r24
    5fca:	50 e0       	ldi	r21, 0x00	; 0
    5fcc:	89 81       	ldd	r24, Y+1	; 0x01
    5fce:	28 2f       	mov	r18, r24
    5fd0:	30 e0       	ldi	r19, 0x00	; 0
    5fd2:	c9 01       	movw	r24, r18
    5fd4:	88 0f       	add	r24, r24
    5fd6:	99 1f       	adc	r25, r25
    5fd8:	82 0f       	add	r24, r18
    5fda:	93 1f       	adc	r25, r19
    5fdc:	88 0f       	add	r24, r24
    5fde:	99 1f       	adc	r25, r25
    5fe0:	88 0f       	add	r24, r24
    5fe2:	99 1f       	adc	r25, r25
    5fe4:	88 0f       	add	r24, r24
    5fe6:	99 1f       	adc	r25, r25
    5fe8:	fc 01       	movw	r30, r24
    5fea:	e6 55       	subi	r30, 0x56	; 86
    5fec:	fb 4d       	sbci	r31, 0xDB	; 219
    5fee:	20 81       	ld	r18, Z
    5ff0:	ca 01       	movw	r24, r20
    5ff2:	82 95       	swap	r24
    5ff4:	92 95       	swap	r25
    5ff6:	90 7f       	andi	r25, 0xF0	; 240
    5ff8:	98 27       	eor	r25, r24
    5ffa:	80 7f       	andi	r24, 0xF0	; 240
    5ffc:	98 27       	eor	r25, r24
    5ffe:	fc 01       	movw	r30, r24
    6000:	ec 59       	subi	r30, 0x9C	; 156
    6002:	fb 4d       	sbci	r31, 0xDB	; 219
    6004:	20 83       	st	Z, r18

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    6006:	89 81       	ldd	r24, Y+1	; 0x01
    6008:	88 2f       	mov	r24, r24
    600a:	90 e0       	ldi	r25, 0x00	; 0
    600c:	01 96       	adiw	r24, 0x01	; 1
    600e:	82 95       	swap	r24
    6010:	92 95       	swap	r25
    6012:	90 7f       	andi	r25, 0xF0	; 240
    6014:	98 27       	eor	r25, r24
    6016:	80 7f       	andi	r24, 0xF0	; 240
    6018:	98 27       	eor	r25, r24
    601a:	fc 01       	movw	r30, r24
    601c:	ea 5a       	subi	r30, 0xAA	; 170
    601e:	fb 4d       	sbci	r31, 0xDB	; 219
    6020:	01 90       	ld	r0, Z+
    6022:	f0 81       	ld	r31, Z
    6024:	e0 2d       	mov	r30, r0
    6026:	8f e3       	ldi	r24, 0x3F	; 63
    6028:	80 83       	st	Z, r24
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    602a:	89 81       	ldd	r24, Y+1	; 0x01
    602c:	88 2f       	mov	r24, r24
    602e:	90 e0       	ldi	r25, 0x00	; 0
    6030:	01 96       	adiw	r24, 0x01	; 1
    6032:	82 95       	swap	r24
    6034:	92 95       	swap	r25
    6036:	90 7f       	andi	r25, 0xF0	; 240
    6038:	98 27       	eor	r25, r24
    603a:	80 7f       	andi	r24, 0xF0	; 240
    603c:	98 27       	eor	r25, r24
    603e:	fc 01       	movw	r30, r24
    6040:	ea 5a       	subi	r30, 0xAA	; 170
    6042:	fb 4d       	sbci	r31, 0xDB	; 219
    6044:	01 90       	ld	r0, Z+
    6046:	f0 81       	ld	r31, Z
    6048:	e0 2d       	mov	r30, r0
    604a:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
    604c:	89 81       	ldd	r24, Y+1	; 0x01
    604e:	88 2f       	mov	r24, r24
    6050:	90 e0       	ldi	r25, 0x00	; 0
    6052:	01 96       	adiw	r24, 0x01	; 1
    6054:	82 95       	swap	r24
    6056:	92 95       	swap	r25
    6058:	90 7f       	andi	r25, 0xF0	; 240
    605a:	98 27       	eor	r25, r24
    605c:	80 7f       	andi	r24, 0xF0	; 240
    605e:	98 27       	eor	r25, r24
    6060:	fc 01       	movw	r30, r24
    6062:	ea 5a       	subi	r30, 0xAA	; 170
    6064:	fb 4d       	sbci	r31, 0xDB	; 219
    6066:	a0 81       	ld	r26, Z
    6068:	b1 81       	ldd	r27, Z+1	; 0x01
    606a:	89 81       	ldd	r24, Y+1	; 0x01
    606c:	88 2f       	mov	r24, r24
    606e:	90 e0       	ldi	r25, 0x00	; 0
    6070:	01 96       	adiw	r24, 0x01	; 1
    6072:	82 95       	swap	r24
    6074:	92 95       	swap	r25
    6076:	90 7f       	andi	r25, 0xF0	; 240
    6078:	98 27       	eor	r25, r24
    607a:	80 7f       	andi	r24, 0xF0	; 240
    607c:	98 27       	eor	r25, r24
    607e:	fc 01       	movw	r30, r24
    6080:	ea 5a       	subi	r30, 0xAA	; 170
    6082:	fb 4d       	sbci	r31, 0xDB	; 219
    6084:	01 90       	ld	r0, Z+
    6086:	f0 81       	ld	r31, Z
    6088:	e0 2d       	mov	r30, r0
    608a:	84 81       	ldd	r24, Z+4	; 0x04
    608c:	88 61       	ori	r24, 0x18	; 24
    608e:	14 96       	adiw	r26, 0x04	; 4
    6090:	8c 93       	st	X, r24
    6092:	14 97       	sbiw	r26, 0x04	; 4
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    6094:	89 81       	ldd	r24, Y+1	; 0x01
    6096:	88 2f       	mov	r24, r24
    6098:	90 e0       	ldi	r25, 0x00	; 0
    609a:	01 96       	adiw	r24, 0x01	; 1
    609c:	82 95       	swap	r24
    609e:	92 95       	swap	r25
    60a0:	90 7f       	andi	r25, 0xF0	; 240
    60a2:	98 27       	eor	r25, r24
    60a4:	80 7f       	andi	r24, 0xF0	; 240
    60a6:	98 27       	eor	r25, r24
    60a8:	fc 01       	movw	r30, r24
    60aa:	ea 5a       	subi	r30, 0xAA	; 170
    60ac:	fb 4d       	sbci	r31, 0xDB	; 219
    60ae:	01 90       	ld	r0, Z+
    60b0:	f0 81       	ld	r31, Z
    60b2:	e0 2d       	mov	r30, r0
    60b4:	84 e0       	ldi	r24, 0x04	; 4
    60b6:	85 83       	std	Z+5, r24	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    60b8:	89 81       	ldd	r24, Y+1	; 0x01
    60ba:	88 2f       	mov	r24, r24
    60bc:	90 e0       	ldi	r25, 0x00	; 0
    60be:	82 95       	swap	r24
    60c0:	92 95       	swap	r25
    60c2:	90 7f       	andi	r25, 0xF0	; 240
    60c4:	98 27       	eor	r25, r24
    60c6:	80 7f       	andi	r24, 0xF0	; 240
    60c8:	98 27       	eor	r25, r24
    60ca:	fc 01       	movw	r30, r24
    60cc:	e8 59       	subi	r30, 0x98	; 152
    60ce:	fb 4d       	sbci	r31, 0xDB	; 219
    60d0:	01 90       	ld	r0, Z+
    60d2:	f0 81       	ld	r31, Z
    60d4:	e0 2d       	mov	r30, r0
    60d6:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    60d8:	89 81       	ldd	r24, Y+1	; 0x01
    60da:	88 2f       	mov	r24, r24
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	82 95       	swap	r24
    60e0:	92 95       	swap	r25
    60e2:	90 7f       	andi	r25, 0xF0	; 240
    60e4:	98 27       	eor	r25, r24
    60e6:	80 7f       	andi	r24, 0xF0	; 240
    60e8:	98 27       	eor	r25, r24
    60ea:	fc 01       	movw	r30, r24
    60ec:	e8 59       	subi	r30, 0x98	; 152
    60ee:	fb 4d       	sbci	r31, 0xDB	; 219
    60f0:	01 90       	ld	r0, Z+
    60f2:	f0 81       	ld	r31, Z
    60f4:	e0 2d       	mov	r30, r0
    60f6:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    60f8:	89 81       	ldd	r24, Y+1	; 0x01
    60fa:	88 2f       	mov	r24, r24
    60fc:	90 e0       	ldi	r25, 0x00	; 0
    60fe:	82 95       	swap	r24
    6100:	92 95       	swap	r25
    6102:	90 7f       	andi	r25, 0xF0	; 240
    6104:	98 27       	eor	r25, r24
    6106:	80 7f       	andi	r24, 0xF0	; 240
    6108:	98 27       	eor	r25, r24
    610a:	fc 01       	movw	r30, r24
    610c:	e8 59       	subi	r30, 0x98	; 152
    610e:	fb 4d       	sbci	r31, 0xDB	; 219
    6110:	01 90       	ld	r0, Z+
    6112:	f0 81       	ld	r31, Z
    6114:	e0 2d       	mov	r30, r0
    6116:	83 e0       	ldi	r24, 0x03	; 3
    6118:	86 83       	std	Z+6, r24	; 0x06
	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    611a:	89 81       	ldd	r24, Y+1	; 0x01
    611c:	8f 5f       	subi	r24, 0xFF	; 255
    611e:	89 83       	std	Y+1, r24	; 0x01
    6120:	89 81       	ldd	r24, Y+1	; 0x01
    6122:	84 30       	cpi	r24, 0x04	; 4
    6124:	08 f4       	brcc	.+2      	; 0x6128 <__stack+0x129>
    6126:	4f cf       	rjmp	.-354    	; 0x5fc6 <st_init+0x76>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    6128:	0f 90       	pop	r0
    612a:	cf 91       	pop	r28
    612c:	df 91       	pop	r29
    612e:	08 95       	ret

00006130 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    6130:	1f 92       	push	r1
    6132:	0f 92       	push	r0
    6134:	0f b6       	in	r0, 0x3f	; 63
    6136:	0f 92       	push	r0
    6138:	00 90 3b 00 	lds	r0, 0x003B
    613c:	0f 92       	push	r0
    613e:	11 24       	eor	r1, r1
    6140:	2f 93       	push	r18
    6142:	3f 93       	push	r19
    6144:	4f 93       	push	r20
    6146:	5f 93       	push	r21
    6148:	6f 93       	push	r22
    614a:	7f 93       	push	r23
    614c:	8f 93       	push	r24
    614e:	9f 93       	push	r25
    6150:	af 93       	push	r26
    6152:	bf 93       	push	r27
    6154:	ef 93       	push	r30
    6156:	ff 93       	push	r31
    6158:	df 93       	push	r29
    615a:	cf 93       	push	r28
    615c:	cd b7       	in	r28, 0x3d	; 61
    615e:	de b7       	in	r29, 0x3e	; 62
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    6160:	80 91 62 24 	lds	r24, 0x2462
    6164:	90 91 63 24 	lds	r25, 0x2463
    6168:	01 97       	sbiw	r24, 0x01	; 1
    616a:	80 93 62 24 	sts	0x2462, r24
    616e:	90 93 63 24 	sts	0x2463, r25
    6172:	80 91 62 24 	lds	r24, 0x2462
    6176:	90 91 63 24 	lds	r25, 0x2463
    617a:	00 97       	sbiw	r24, 0x00	; 0
    617c:	09 f0       	breq	.+2      	; 0x6180 <__vector_14+0x50>
    617e:	45 c0       	rjmp	.+138    	; 0x620a <__vector_14+0xda>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    6180:	80 91 65 24 	lds	r24, 0x2465
    6184:	88 23       	and	r24, r24
    6186:	21 f4       	brne	.+8      	; 0x6190 <__vector_14+0x60>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    6188:	e0 e0       	ldi	r30, 0x00	; 0
    618a:	f6 e0       	ldi	r31, 0x06	; 6
    618c:	81 e0       	ldi	r24, 0x01	; 1
    618e:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    6190:	80 91 5a 24 	lds	r24, 0x245A
    6194:	90 91 5b 24 	lds	r25, 0x245B
    6198:	a0 91 5c 24 	lds	r26, 0x245C
    619c:	b0 91 5d 24 	lds	r27, 0x245D
    61a0:	01 97       	sbiw	r24, 0x01	; 1
    61a2:	a1 09       	sbc	r26, r1
    61a4:	b1 09       	sbc	r27, r1
    61a6:	80 93 5a 24 	sts	0x245A, r24
    61aa:	90 93 5b 24 	sts	0x245B, r25
    61ae:	a0 93 5c 24 	sts	0x245C, r26
    61b2:	b0 93 5d 24 	sts	0x245D, r27
    61b6:	80 91 5a 24 	lds	r24, 0x245A
    61ba:	90 91 5b 24 	lds	r25, 0x245B
    61be:	a0 91 5c 24 	lds	r26, 0x245C
    61c2:	b0 91 5d 24 	lds	r27, 0x245D
    61c6:	00 97       	sbiw	r24, 0x00	; 0
    61c8:	a1 05       	cpc	r26, r1
    61ca:	b1 05       	cpc	r27, r1
    61cc:	91 f4       	brne	.+36     	; 0x61f2 <__vector_14+0xc2>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    61ce:	e0 e0       	ldi	r30, 0x00	; 0
    61d0:	f8 e0       	ldi	r31, 0x08	; 8
    61d2:	10 82       	st	Z, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    61d4:	e0 e0       	ldi	r30, 0x00	; 0
    61d6:	f6 e0       	ldi	r31, 0x06	; 6
    61d8:	84 e0       	ldi	r24, 0x04	; 4
    61da:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    61dc:	80 91 57 24 	lds	r24, 0x2457
    61e0:	87 7f       	andi	r24, 0xF7	; 247
    61e2:	80 93 57 24 	sts	0x2457, r24
		if (ax.active_axes == 0) {				// if all axes are done
    61e6:	80 91 57 24 	lds	r24, 0x2457
    61ea:	88 23       	and	r24, r24
    61ec:	11 f4       	brne	.+4      	; 0x61f2 <__vector_14+0xc2>
			st_execute_move();					// ...run the next move
    61ee:	0e 94 98 32 	call	0x6530	; 0x6530 <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    61f2:	80 91 60 24 	lds	r24, 0x2460
    61f6:	90 91 61 24 	lds	r25, 0x2461
    61fa:	80 93 62 24 	sts	0x2462, r24
    61fe:	90 93 63 24 	sts	0x2463, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    6202:	e0 e0       	ldi	r30, 0x00	; 0
    6204:	f6 e0       	ldi	r31, 0x06	; 6
    6206:	81 e0       	ldi	r24, 0x01	; 1
    6208:	86 83       	std	Z+6, r24	; 0x06
}
    620a:	cf 91       	pop	r28
    620c:	df 91       	pop	r29
    620e:	ff 91       	pop	r31
    6210:	ef 91       	pop	r30
    6212:	bf 91       	pop	r27
    6214:	af 91       	pop	r26
    6216:	9f 91       	pop	r25
    6218:	8f 91       	pop	r24
    621a:	7f 91       	pop	r23
    621c:	6f 91       	pop	r22
    621e:	5f 91       	pop	r21
    6220:	4f 91       	pop	r20
    6222:	3f 91       	pop	r19
    6224:	2f 91       	pop	r18
    6226:	0f 90       	pop	r0
    6228:	00 92 3b 00 	sts	0x003B, r0
    622c:	0f 90       	pop	r0
    622e:	0f be       	out	0x3f, r0	; 63
    6230:	0f 90       	pop	r0
    6232:	1f 90       	pop	r1
    6234:	18 95       	reti

00006236 <__vector_77>:

ISR(Y_TIMER_ISR_vect)
{
    6236:	1f 92       	push	r1
    6238:	0f 92       	push	r0
    623a:	0f b6       	in	r0, 0x3f	; 63
    623c:	0f 92       	push	r0
    623e:	00 90 3b 00 	lds	r0, 0x003B
    6242:	0f 92       	push	r0
    6244:	11 24       	eor	r1, r1
    6246:	2f 93       	push	r18
    6248:	3f 93       	push	r19
    624a:	4f 93       	push	r20
    624c:	5f 93       	push	r21
    624e:	6f 93       	push	r22
    6250:	7f 93       	push	r23
    6252:	8f 93       	push	r24
    6254:	9f 93       	push	r25
    6256:	af 93       	push	r26
    6258:	bf 93       	push	r27
    625a:	ef 93       	push	r30
    625c:	ff 93       	push	r31
    625e:	df 93       	push	r29
    6260:	cf 93       	push	r28
    6262:	cd b7       	in	r28, 0x3d	; 61
    6264:	de b7       	in	r29, 0x3e	; 62
	if (--ax.a[Y].postscale_counter != 0) {
    6266:	80 91 72 24 	lds	r24, 0x2472
    626a:	90 91 73 24 	lds	r25, 0x2473
    626e:	01 97       	sbiw	r24, 0x01	; 1
    6270:	80 93 72 24 	sts	0x2472, r24
    6274:	90 93 73 24 	sts	0x2473, r25
    6278:	80 91 72 24 	lds	r24, 0x2472
    627c:	90 91 73 24 	lds	r25, 0x2473
    6280:	00 97       	sbiw	r24, 0x00	; 0
    6282:	09 f0       	breq	.+2      	; 0x6286 <__vector_77+0x50>
    6284:	41 c0       	rjmp	.+130    	; 0x6308 <__vector_77+0xd2>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    6286:	e0 ea       	ldi	r30, 0xA0	; 160
    6288:	f6 e0       	ldi	r31, 0x06	; 6
    628a:	81 e0       	ldi	r24, 0x01	; 1
    628c:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    628e:	80 91 6a 24 	lds	r24, 0x246A
    6292:	90 91 6b 24 	lds	r25, 0x246B
    6296:	a0 91 6c 24 	lds	r26, 0x246C
    629a:	b0 91 6d 24 	lds	r27, 0x246D
    629e:	01 97       	sbiw	r24, 0x01	; 1
    62a0:	a1 09       	sbc	r26, r1
    62a2:	b1 09       	sbc	r27, r1
    62a4:	80 93 6a 24 	sts	0x246A, r24
    62a8:	90 93 6b 24 	sts	0x246B, r25
    62ac:	a0 93 6c 24 	sts	0x246C, r26
    62b0:	b0 93 6d 24 	sts	0x246D, r27
    62b4:	80 91 6a 24 	lds	r24, 0x246A
    62b8:	90 91 6b 24 	lds	r25, 0x246B
    62bc:	a0 91 6c 24 	lds	r26, 0x246C
    62c0:	b0 91 6d 24 	lds	r27, 0x246D
    62c4:	00 97       	sbiw	r24, 0x00	; 0
    62c6:	a1 05       	cpc	r26, r1
    62c8:	b1 05       	cpc	r27, r1
    62ca:	91 f4       	brne	.+36     	; 0x62f0 <__vector_77+0xba>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    62cc:	e0 e0       	ldi	r30, 0x00	; 0
    62ce:	f9 e0       	ldi	r31, 0x09	; 9
    62d0:	10 82       	st	Z, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    62d2:	e0 ea       	ldi	r30, 0xA0	; 160
    62d4:	f6 e0       	ldi	r31, 0x06	; 6
    62d6:	84 e0       	ldi	r24, 0x04	; 4
    62d8:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    62da:	80 91 57 24 	lds	r24, 0x2457
    62de:	8b 7f       	andi	r24, 0xFB	; 251
    62e0:	80 93 57 24 	sts	0x2457, r24
		if (ax.active_axes == 0) {
    62e4:	80 91 57 24 	lds	r24, 0x2457
    62e8:	88 23       	and	r24, r24
    62ea:	11 f4       	brne	.+4      	; 0x62f0 <__vector_77+0xba>
			st_execute_move();
    62ec:	0e 94 98 32 	call	0x6530	; 0x6530 <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    62f0:	80 91 70 24 	lds	r24, 0x2470
    62f4:	90 91 71 24 	lds	r25, 0x2471
    62f8:	80 93 72 24 	sts	0x2472, r24
    62fc:	90 93 73 24 	sts	0x2473, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    6300:	e0 ea       	ldi	r30, 0xA0	; 160
    6302:	f6 e0       	ldi	r31, 0x06	; 6
    6304:	81 e0       	ldi	r24, 0x01	; 1
    6306:	86 83       	std	Z+6, r24	; 0x06
}
    6308:	cf 91       	pop	r28
    630a:	df 91       	pop	r29
    630c:	ff 91       	pop	r31
    630e:	ef 91       	pop	r30
    6310:	bf 91       	pop	r27
    6312:	af 91       	pop	r26
    6314:	9f 91       	pop	r25
    6316:	8f 91       	pop	r24
    6318:	7f 91       	pop	r23
    631a:	6f 91       	pop	r22
    631c:	5f 91       	pop	r21
    631e:	4f 91       	pop	r20
    6320:	3f 91       	pop	r19
    6322:	2f 91       	pop	r18
    6324:	0f 90       	pop	r0
    6326:	00 92 3b 00 	sts	0x003B, r0
    632a:	0f 90       	pop	r0
    632c:	0f be       	out	0x3f, r0	; 63
    632e:	0f 90       	pop	r0
    6330:	1f 90       	pop	r1
    6332:	18 95       	reti

00006334 <__vector_47>:

ISR(Z_TIMER_ISR_vect)
{
    6334:	1f 92       	push	r1
    6336:	0f 92       	push	r0
    6338:	0f b6       	in	r0, 0x3f	; 63
    633a:	0f 92       	push	r0
    633c:	00 90 3b 00 	lds	r0, 0x003B
    6340:	0f 92       	push	r0
    6342:	11 24       	eor	r1, r1
    6344:	2f 93       	push	r18
    6346:	3f 93       	push	r19
    6348:	4f 93       	push	r20
    634a:	5f 93       	push	r21
    634c:	6f 93       	push	r22
    634e:	7f 93       	push	r23
    6350:	8f 93       	push	r24
    6352:	9f 93       	push	r25
    6354:	af 93       	push	r26
    6356:	bf 93       	push	r27
    6358:	ef 93       	push	r30
    635a:	ff 93       	push	r31
    635c:	df 93       	push	r29
    635e:	cf 93       	push	r28
    6360:	cd b7       	in	r28, 0x3d	; 61
    6362:	de b7       	in	r29, 0x3e	; 62
	if (--ax.a[Z].postscale_counter != 0) {
    6364:	80 91 82 24 	lds	r24, 0x2482
    6368:	90 91 83 24 	lds	r25, 0x2483
    636c:	01 97       	sbiw	r24, 0x01	; 1
    636e:	80 93 82 24 	sts	0x2482, r24
    6372:	90 93 83 24 	sts	0x2483, r25
    6376:	80 91 82 24 	lds	r24, 0x2482
    637a:	90 91 83 24 	lds	r25, 0x2483
    637e:	00 97       	sbiw	r24, 0x00	; 0
    6380:	09 f0       	breq	.+2      	; 0x6384 <__vector_47+0x50>
    6382:	41 c0       	rjmp	.+130    	; 0x6406 <__vector_47+0xd2>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    6384:	e0 e8       	ldi	r30, 0x80	; 128
    6386:	f6 e0       	ldi	r31, 0x06	; 6
    6388:	81 e0       	ldi	r24, 0x01	; 1
    638a:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    638c:	80 91 7a 24 	lds	r24, 0x247A
    6390:	90 91 7b 24 	lds	r25, 0x247B
    6394:	a0 91 7c 24 	lds	r26, 0x247C
    6398:	b0 91 7d 24 	lds	r27, 0x247D
    639c:	01 97       	sbiw	r24, 0x01	; 1
    639e:	a1 09       	sbc	r26, r1
    63a0:	b1 09       	sbc	r27, r1
    63a2:	80 93 7a 24 	sts	0x247A, r24
    63a6:	90 93 7b 24 	sts	0x247B, r25
    63aa:	a0 93 7c 24 	sts	0x247C, r26
    63ae:	b0 93 7d 24 	sts	0x247D, r27
    63b2:	80 91 7a 24 	lds	r24, 0x247A
    63b6:	90 91 7b 24 	lds	r25, 0x247B
    63ba:	a0 91 7c 24 	lds	r26, 0x247C
    63be:	b0 91 7d 24 	lds	r27, 0x247D
    63c2:	00 97       	sbiw	r24, 0x00	; 0
    63c4:	a1 05       	cpc	r26, r1
    63c6:	b1 05       	cpc	r27, r1
    63c8:	91 f4       	brne	.+36     	; 0x63ee <__vector_47+0xba>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    63ca:	e0 e0       	ldi	r30, 0x00	; 0
    63cc:	fa e0       	ldi	r31, 0x0A	; 10
    63ce:	10 82       	st	Z, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    63d0:	e0 e8       	ldi	r30, 0x80	; 128
    63d2:	f6 e0       	ldi	r31, 0x06	; 6
    63d4:	84 e0       	ldi	r24, 0x04	; 4
    63d6:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    63d8:	80 91 57 24 	lds	r24, 0x2457
    63dc:	8d 7f       	andi	r24, 0xFD	; 253
    63de:	80 93 57 24 	sts	0x2457, r24
		if (ax.active_axes == 0) {
    63e2:	80 91 57 24 	lds	r24, 0x2457
    63e6:	88 23       	and	r24, r24
    63e8:	11 f4       	brne	.+4      	; 0x63ee <__vector_47+0xba>
			st_execute_move();
    63ea:	0e 94 98 32 	call	0x6530	; 0x6530 <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    63ee:	80 91 80 24 	lds	r24, 0x2480
    63f2:	90 91 81 24 	lds	r25, 0x2481
    63f6:	80 93 82 24 	sts	0x2482, r24
    63fa:	90 93 83 24 	sts	0x2483, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    63fe:	e0 e8       	ldi	r30, 0x80	; 128
    6400:	f6 e0       	ldi	r31, 0x06	; 6
    6402:	81 e0       	ldi	r24, 0x01	; 1
    6404:	86 83       	std	Z+6, r24	; 0x06
}
    6406:	cf 91       	pop	r28
    6408:	df 91       	pop	r29
    640a:	ff 91       	pop	r31
    640c:	ef 91       	pop	r30
    640e:	bf 91       	pop	r27
    6410:	af 91       	pop	r26
    6412:	9f 91       	pop	r25
    6414:	8f 91       	pop	r24
    6416:	7f 91       	pop	r23
    6418:	6f 91       	pop	r22
    641a:	5f 91       	pop	r21
    641c:	4f 91       	pop	r20
    641e:	3f 91       	pop	r19
    6420:	2f 91       	pop	r18
    6422:	0f 90       	pop	r0
    6424:	00 92 3b 00 	sts	0x003B, r0
    6428:	0f 90       	pop	r0
    642a:	0f be       	out	0x3f, r0	; 63
    642c:	0f 90       	pop	r0
    642e:	1f 90       	pop	r1
    6430:	18 95       	reti

00006432 <__vector_108>:

ISR(A_TIMER_ISR_vect)
{
    6432:	1f 92       	push	r1
    6434:	0f 92       	push	r0
    6436:	0f b6       	in	r0, 0x3f	; 63
    6438:	0f 92       	push	r0
    643a:	00 90 3b 00 	lds	r0, 0x003B
    643e:	0f 92       	push	r0
    6440:	11 24       	eor	r1, r1
    6442:	2f 93       	push	r18
    6444:	3f 93       	push	r19
    6446:	4f 93       	push	r20
    6448:	5f 93       	push	r21
    644a:	6f 93       	push	r22
    644c:	7f 93       	push	r23
    644e:	8f 93       	push	r24
    6450:	9f 93       	push	r25
    6452:	af 93       	push	r26
    6454:	bf 93       	push	r27
    6456:	ef 93       	push	r30
    6458:	ff 93       	push	r31
    645a:	df 93       	push	r29
    645c:	cf 93       	push	r28
    645e:	cd b7       	in	r28, 0x3d	; 61
    6460:	de b7       	in	r29, 0x3e	; 62
	if (--ax.a[A].postscale_counter != 0) {
    6462:	80 91 92 24 	lds	r24, 0x2492
    6466:	90 91 93 24 	lds	r25, 0x2493
    646a:	01 97       	sbiw	r24, 0x01	; 1
    646c:	80 93 92 24 	sts	0x2492, r24
    6470:	90 93 93 24 	sts	0x2493, r25
    6474:	80 91 92 24 	lds	r24, 0x2492
    6478:	90 91 93 24 	lds	r25, 0x2493
    647c:	00 97       	sbiw	r24, 0x00	; 0
    647e:	09 f0       	breq	.+2      	; 0x6482 <__vector_108+0x50>
    6480:	41 c0       	rjmp	.+130    	; 0x6504 <__vector_108+0xd2>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    6482:	e0 e6       	ldi	r30, 0x60	; 96
    6484:	f6 e0       	ldi	r31, 0x06	; 6
    6486:	81 e0       	ldi	r24, 0x01	; 1
    6488:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    648a:	80 91 8a 24 	lds	r24, 0x248A
    648e:	90 91 8b 24 	lds	r25, 0x248B
    6492:	a0 91 8c 24 	lds	r26, 0x248C
    6496:	b0 91 8d 24 	lds	r27, 0x248D
    649a:	01 97       	sbiw	r24, 0x01	; 1
    649c:	a1 09       	sbc	r26, r1
    649e:	b1 09       	sbc	r27, r1
    64a0:	80 93 8a 24 	sts	0x248A, r24
    64a4:	90 93 8b 24 	sts	0x248B, r25
    64a8:	a0 93 8c 24 	sts	0x248C, r26
    64ac:	b0 93 8d 24 	sts	0x248D, r27
    64b0:	80 91 8a 24 	lds	r24, 0x248A
    64b4:	90 91 8b 24 	lds	r25, 0x248B
    64b8:	a0 91 8c 24 	lds	r26, 0x248C
    64bc:	b0 91 8d 24 	lds	r27, 0x248D
    64c0:	00 97       	sbiw	r24, 0x00	; 0
    64c2:	a1 05       	cpc	r26, r1
    64c4:	b1 05       	cpc	r27, r1
    64c6:	91 f4       	brne	.+36     	; 0x64ec <__vector_108+0xba>
		A_TIMER.CTRLA = TC_CLK_OFF;
    64c8:	e0 e0       	ldi	r30, 0x00	; 0
    64ca:	fb e0       	ldi	r31, 0x0B	; 11
    64cc:	10 82       	st	Z, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    64ce:	e0 e6       	ldi	r30, 0x60	; 96
    64d0:	f6 e0       	ldi	r31, 0x06	; 6
    64d2:	84 e0       	ldi	r24, 0x04	; 4
    64d4:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    64d6:	80 91 57 24 	lds	r24, 0x2457
    64da:	8e 7f       	andi	r24, 0xFE	; 254
    64dc:	80 93 57 24 	sts	0x2457, r24
		if (ax.active_axes == 0) {
    64e0:	80 91 57 24 	lds	r24, 0x2457
    64e4:	88 23       	and	r24, r24
    64e6:	11 f4       	brne	.+4      	; 0x64ec <__vector_108+0xba>
			st_execute_move();
    64e8:	0e 94 98 32 	call	0x6530	; 0x6530 <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    64ec:	80 91 90 24 	lds	r24, 0x2490
    64f0:	90 91 91 24 	lds	r25, 0x2491
    64f4:	80 93 92 24 	sts	0x2492, r24
    64f8:	90 93 93 24 	sts	0x2493, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    64fc:	e0 e6       	ldi	r30, 0x60	; 96
    64fe:	f6 e0       	ldi	r31, 0x06	; 6
    6500:	81 e0       	ldi	r24, 0x01	; 1
    6502:	86 83       	std	Z+6, r24	; 0x06
}
    6504:	cf 91       	pop	r28
    6506:	df 91       	pop	r29
    6508:	ff 91       	pop	r31
    650a:	ef 91       	pop	r30
    650c:	bf 91       	pop	r27
    650e:	af 91       	pop	r26
    6510:	9f 91       	pop	r25
    6512:	8f 91       	pop	r24
    6514:	7f 91       	pop	r23
    6516:	6f 91       	pop	r22
    6518:	5f 91       	pop	r21
    651a:	4f 91       	pop	r20
    651c:	3f 91       	pop	r19
    651e:	2f 91       	pop	r18
    6520:	0f 90       	pop	r0
    6522:	00 92 3b 00 	sts	0x003B, r0
    6526:	0f 90       	pop	r0
    6528:	0f be       	out	0x3f, r0	; 63
    652a:	0f 90       	pop	r0
    652c:	1f 90       	pop	r1
    652e:	18 95       	reti

00006530 <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    6530:	df 93       	push	r29
    6532:	cf 93       	push	r28
    6534:	0f 92       	push	r0
    6536:	cd b7       	in	r28, 0x3d	; 61
    6538:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    653a:	80 91 56 24 	lds	r24, 0x2456
    653e:	88 23       	and	r24, r24
    6540:	09 f0       	breq	.+2      	; 0x6544 <st_execute_move+0x14>
    6542:	e0 c1       	rjmp	.+960    	; 0x6904 <st_execute_move+0x3d4>
		return;
	}
	ax.exec_mutex = TRUE;
    6544:	81 e0       	ldi	r24, 0x01	; 1
    6546:	80 93 56 24 	sts	0x2456, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    654a:	80 91 57 24 	lds	r24, 0x2457
    654e:	88 23       	and	r24, r24
    6550:	19 f0       	breq	.+6      	; 0x6558 <st_execute_move+0x28>
		ax.exec_mutex = FALSE;	
    6552:	10 92 56 24 	sts	0x2456, r1
    6556:	d6 c1       	rjmp	.+940    	; 0x6904 <st_execute_move+0x3d4>
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    6558:	0e 94 7f 47 	call	0x8efe	; 0x8efe <mv_dequeue_move_buffer>
    655c:	80 93 58 24 	sts	0x2458, r24
    6560:	90 93 59 24 	sts	0x2459, r25
    6564:	80 91 58 24 	lds	r24, 0x2458
    6568:	90 91 59 24 	lds	r25, 0x2459
    656c:	00 97       	sbiw	r24, 0x00	; 0
    656e:	19 f4       	brne	.+6      	; 0x6576 <st_execute_move+0x46>
		ax.exec_mutex = FALSE;
    6570:	10 92 56 24 	sts	0x2456, r1
    6574:	c7 c1       	rjmp	.+910    	; 0x6904 <st_execute_move+0x3d4>
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    6576:	19 82       	std	Y+1, r1	; 0x01
    6578:	78 c1       	rjmp	.+752    	; 0x686a <st_execute_move+0x33a>
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    657a:	89 81       	ldd	r24, Y+1	; 0x01
    657c:	88 2f       	mov	r24, r24
    657e:	90 e0       	ldi	r25, 0x00	; 0
    6580:	82 95       	swap	r24
    6582:	92 95       	swap	r25
    6584:	90 7f       	andi	r25, 0xF0	; 240
    6586:	98 27       	eor	r25, r24
    6588:	80 7f       	andi	r24, 0xF0	; 240
    658a:	98 27       	eor	r25, r24
    658c:	fc 01       	movw	r30, r24
    658e:	e8 59       	subi	r30, 0x98	; 152
    6590:	fb 4d       	sbci	r31, 0xDB	; 219
    6592:	01 90       	ld	r0, Z+
    6594:	f0 81       	ld	r31, Z
    6596:	e0 2d       	mov	r30, r0
    6598:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    659a:	40 91 58 24 	lds	r20, 0x2458
    659e:	50 91 59 24 	lds	r21, 0x2459
    65a2:	89 81       	ldd	r24, Y+1	; 0x01
    65a4:	88 2f       	mov	r24, r24
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	88 0f       	add	r24, r24
    65aa:	99 1f       	adc	r25, r25
    65ac:	9c 01       	movw	r18, r24
    65ae:	22 0f       	add	r18, r18
    65b0:	33 1f       	adc	r19, r19
    65b2:	22 0f       	add	r18, r18
    65b4:	33 1f       	adc	r19, r19
    65b6:	82 0f       	add	r24, r18
    65b8:	93 1f       	adc	r25, r19
    65ba:	fa 01       	movw	r30, r20
    65bc:	e8 0f       	add	r30, r24
    65be:	f9 1f       	adc	r31, r25
    65c0:	80 81       	ld	r24, Z
    65c2:	91 81       	ldd	r25, Z+1	; 0x01
    65c4:	a2 81       	ldd	r26, Z+2	; 0x02
    65c6:	b3 81       	ldd	r27, Z+3	; 0x03
    65c8:	00 97       	sbiw	r24, 0x00	; 0
    65ca:	a1 05       	cpc	r26, r1
    65cc:	b1 05       	cpc	r27, r1
    65ce:	09 f4       	brne	.+2      	; 0x65d2 <st_execute_move+0xa2>
    65d0:	49 c1       	rjmp	.+658    	; 0x6864 <st_execute_move+0x334>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    65d2:	89 81       	ldd	r24, Y+1	; 0x01
    65d4:	68 2f       	mov	r22, r24
    65d6:	70 e0       	ldi	r23, 0x00	; 0
    65d8:	40 91 58 24 	lds	r20, 0x2458
    65dc:	50 91 59 24 	lds	r21, 0x2459
    65e0:	89 81       	ldd	r24, Y+1	; 0x01
    65e2:	88 2f       	mov	r24, r24
    65e4:	90 e0       	ldi	r25, 0x00	; 0
    65e6:	88 0f       	add	r24, r24
    65e8:	99 1f       	adc	r25, r25
    65ea:	9c 01       	movw	r18, r24
    65ec:	22 0f       	add	r18, r18
    65ee:	33 1f       	adc	r19, r19
    65f0:	22 0f       	add	r18, r18
    65f2:	33 1f       	adc	r19, r19
    65f4:	82 0f       	add	r24, r18
    65f6:	93 1f       	adc	r25, r19
    65f8:	84 0f       	add	r24, r20
    65fa:	95 1f       	adc	r25, r21
    65fc:	fc 01       	movw	r30, r24
    65fe:	39 96       	adiw	r30, 0x09	; 9
    6600:	20 81       	ld	r18, Z
    6602:	cb 01       	movw	r24, r22
    6604:	82 95       	swap	r24
    6606:	92 95       	swap	r25
    6608:	90 7f       	andi	r25, 0xF0	; 240
    660a:	98 27       	eor	r25, r24
    660c:	80 7f       	andi	r24, 0xF0	; 240
    660e:	98 27       	eor	r25, r24
    6610:	fc 01       	movw	r30, r24
    6612:	eb 59       	subi	r30, 0x9B	; 155
    6614:	fb 4d       	sbci	r31, 0xDB	; 219
    6616:	20 83       	st	Z, r18

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    6618:	40 91 58 24 	lds	r20, 0x2458
    661c:	50 91 59 24 	lds	r21, 0x2459
    6620:	89 81       	ldd	r24, Y+1	; 0x01
    6622:	88 2f       	mov	r24, r24
    6624:	90 e0       	ldi	r25, 0x00	; 0
    6626:	88 0f       	add	r24, r24
    6628:	99 1f       	adc	r25, r25
    662a:	9c 01       	movw	r18, r24
    662c:	22 0f       	add	r18, r18
    662e:	33 1f       	adc	r19, r19
    6630:	22 0f       	add	r18, r18
    6632:	33 1f       	adc	r19, r19
    6634:	82 0f       	add	r24, r18
    6636:	93 1f       	adc	r25, r19
    6638:	84 0f       	add	r24, r20
    663a:	95 1f       	adc	r25, r21
    663c:	fc 01       	movw	r30, r24
    663e:	38 96       	adiw	r30, 0x08	; 8
    6640:	20 81       	ld	r18, Z
    6642:	89 81       	ldd	r24, Y+1	; 0x01
    6644:	88 2f       	mov	r24, r24
    6646:	90 e0       	ldi	r25, 0x00	; 0
    6648:	82 95       	swap	r24
    664a:	92 95       	swap	r25
    664c:	90 7f       	andi	r25, 0xF0	; 240
    664e:	98 27       	eor	r25, r24
    6650:	80 7f       	andi	r24, 0xF0	; 240
    6652:	98 27       	eor	r25, r24
    6654:	fc 01       	movw	r30, r24
    6656:	ec 59       	subi	r30, 0x9C	; 156
    6658:	fb 4d       	sbci	r31, 0xDB	; 219
    665a:	80 81       	ld	r24, Z
    665c:	28 17       	cp	r18, r24
    665e:	99 f0       	breq	.+38     	; 0x6686 <st_execute_move+0x156>
    6660:	89 81       	ldd	r24, Y+1	; 0x01
    6662:	88 2f       	mov	r24, r24
    6664:	90 e0       	ldi	r25, 0x00	; 0
    6666:	01 96       	adiw	r24, 0x01	; 1
    6668:	82 95       	swap	r24
    666a:	92 95       	swap	r25
    666c:	90 7f       	andi	r25, 0xF0	; 240
    666e:	98 27       	eor	r25, r24
    6670:	80 7f       	andi	r24, 0xF0	; 240
    6672:	98 27       	eor	r25, r24
    6674:	fc 01       	movw	r30, r24
    6676:	ea 5a       	subi	r30, 0xAA	; 170
    6678:	fb 4d       	sbci	r31, 0xDB	; 219
    667a:	01 90       	ld	r0, Z+
    667c:	f0 81       	ld	r31, Z
    667e:	e0 2d       	mov	r30, r0
    6680:	82 e0       	ldi	r24, 0x02	; 2
    6682:	85 83       	std	Z+5, r24	; 0x05
    6684:	12 c0       	rjmp	.+36     	; 0x66aa <st_execute_move+0x17a>
    6686:	89 81       	ldd	r24, Y+1	; 0x01
    6688:	88 2f       	mov	r24, r24
    668a:	90 e0       	ldi	r25, 0x00	; 0
    668c:	01 96       	adiw	r24, 0x01	; 1
    668e:	82 95       	swap	r24
    6690:	92 95       	swap	r25
    6692:	90 7f       	andi	r25, 0xF0	; 240
    6694:	98 27       	eor	r25, r24
    6696:	80 7f       	andi	r24, 0xF0	; 240
    6698:	98 27       	eor	r25, r24
    669a:	fc 01       	movw	r30, r24
    669c:	ea 5a       	subi	r30, 0xAA	; 170
    669e:	fb 4d       	sbci	r31, 0xDB	; 219
    66a0:	01 90       	ld	r0, Z+
    66a2:	f0 81       	ld	r31, Z
    66a4:	e0 2d       	mov	r30, r0
    66a6:	82 e0       	ldi	r24, 0x02	; 2
    66a8:	86 83       	std	Z+6, r24	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    66aa:	89 81       	ldd	r24, Y+1	; 0x01
    66ac:	68 2f       	mov	r22, r24
    66ae:	70 e0       	ldi	r23, 0x00	; 0
    66b0:	40 91 58 24 	lds	r20, 0x2458
    66b4:	50 91 59 24 	lds	r21, 0x2459
    66b8:	89 81       	ldd	r24, Y+1	; 0x01
    66ba:	88 2f       	mov	r24, r24
    66bc:	90 e0       	ldi	r25, 0x00	; 0
    66be:	88 0f       	add	r24, r24
    66c0:	99 1f       	adc	r25, r25
    66c2:	9c 01       	movw	r18, r24
    66c4:	22 0f       	add	r18, r18
    66c6:	33 1f       	adc	r19, r19
    66c8:	22 0f       	add	r18, r18
    66ca:	33 1f       	adc	r19, r19
    66cc:	82 0f       	add	r24, r18
    66ce:	93 1f       	adc	r25, r19
    66d0:	fa 01       	movw	r30, r20
    66d2:	e8 0f       	add	r30, r24
    66d4:	f9 1f       	adc	r31, r25
    66d6:	80 81       	ld	r24, Z
    66d8:	91 81       	ldd	r25, Z+1	; 0x01
    66da:	a2 81       	ldd	r26, Z+2	; 0x02
    66dc:	b3 81       	ldd	r27, Z+3	; 0x03
    66de:	9c 01       	movw	r18, r24
    66e0:	ad 01       	movw	r20, r26
    66e2:	cb 01       	movw	r24, r22
    66e4:	88 0f       	add	r24, r24
    66e6:	99 1f       	adc	r25, r25
    66e8:	88 0f       	add	r24, r24
    66ea:	99 1f       	adc	r25, r25
    66ec:	01 96       	adiw	r24, 0x01	; 1
    66ee:	88 0f       	add	r24, r24
    66f0:	99 1f       	adc	r25, r25
    66f2:	88 0f       	add	r24, r24
    66f4:	99 1f       	adc	r25, r25
    66f6:	fc 01       	movw	r30, r24
    66f8:	ea 5a       	subi	r30, 0xAA	; 170
    66fa:	fb 4d       	sbci	r31, 0xDB	; 219
    66fc:	20 83       	st	Z, r18
    66fe:	31 83       	std	Z+1, r19	; 0x01
    6700:	42 83       	std	Z+2, r20	; 0x02
    6702:	53 83       	std	Z+3, r21	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    6704:	89 81       	ldd	r24, Y+1	; 0x01
    6706:	68 2f       	mov	r22, r24
    6708:	70 e0       	ldi	r23, 0x00	; 0
    670a:	40 91 58 24 	lds	r20, 0x2458
    670e:	50 91 59 24 	lds	r21, 0x2459
    6712:	89 81       	ldd	r24, Y+1	; 0x01
    6714:	88 2f       	mov	r24, r24
    6716:	90 e0       	ldi	r25, 0x00	; 0
    6718:	88 0f       	add	r24, r24
    671a:	99 1f       	adc	r25, r25
    671c:	9c 01       	movw	r18, r24
    671e:	22 0f       	add	r18, r18
    6720:	33 1f       	adc	r19, r19
    6722:	22 0f       	add	r18, r18
    6724:	33 1f       	adc	r19, r19
    6726:	82 0f       	add	r24, r18
    6728:	93 1f       	adc	r25, r19
    672a:	84 0f       	add	r24, r20
    672c:	95 1f       	adc	r25, r21
    672e:	fc 01       	movw	r30, r24
    6730:	36 96       	adiw	r30, 0x06	; 6
    6732:	20 81       	ld	r18, Z
    6734:	31 81       	ldd	r19, Z+1	; 0x01
    6736:	cb 01       	movw	r24, r22
    6738:	82 95       	swap	r24
    673a:	92 95       	swap	r25
    673c:	90 7f       	andi	r25, 0xF0	; 240
    673e:	98 27       	eor	r25, r24
    6740:	80 7f       	andi	r24, 0xF0	; 240
    6742:	98 27       	eor	r25, r24
    6744:	fc 01       	movw	r30, r24
    6746:	e0 5a       	subi	r30, 0xA0	; 160
    6748:	fb 4d       	sbci	r31, 0xDB	; 219
    674a:	20 83       	st	Z, r18
    674c:	31 83       	std	Z+1, r19	; 0x01
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    674e:	89 81       	ldd	r24, Y+1	; 0x01
    6750:	68 2f       	mov	r22, r24
    6752:	70 e0       	ldi	r23, 0x00	; 0
    6754:	40 91 58 24 	lds	r20, 0x2458
    6758:	50 91 59 24 	lds	r21, 0x2459
    675c:	89 81       	ldd	r24, Y+1	; 0x01
    675e:	88 2f       	mov	r24, r24
    6760:	90 e0       	ldi	r25, 0x00	; 0
    6762:	88 0f       	add	r24, r24
    6764:	99 1f       	adc	r25, r25
    6766:	9c 01       	movw	r18, r24
    6768:	22 0f       	add	r18, r18
    676a:	33 1f       	adc	r19, r19
    676c:	22 0f       	add	r18, r18
    676e:	33 1f       	adc	r19, r19
    6770:	82 0f       	add	r24, r18
    6772:	93 1f       	adc	r25, r19
    6774:	84 0f       	add	r24, r20
    6776:	95 1f       	adc	r25, r21
    6778:	fc 01       	movw	r30, r24
    677a:	36 96       	adiw	r30, 0x06	; 6
    677c:	20 81       	ld	r18, Z
    677e:	31 81       	ldd	r19, Z+1	; 0x01
    6780:	cb 01       	movw	r24, r22
    6782:	88 0f       	add	r24, r24
    6784:	99 1f       	adc	r25, r25
    6786:	01 96       	adiw	r24, 0x01	; 1
    6788:	88 0f       	add	r24, r24
    678a:	99 1f       	adc	r25, r25
    678c:	01 96       	adiw	r24, 0x01	; 1
    678e:	88 0f       	add	r24, r24
    6790:	99 1f       	adc	r25, r25
    6792:	88 0f       	add	r24, r24
    6794:	99 1f       	adc	r25, r25
    6796:	fc 01       	movw	r30, r24
    6798:	ea 5a       	subi	r30, 0xAA	; 170
    679a:	fb 4d       	sbci	r31, 0xDB	; 219
    679c:	20 83       	st	Z, r18
    679e:	31 83       	std	Z+1, r19	; 0x01
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    67a0:	89 81       	ldd	r24, Y+1	; 0x01
    67a2:	68 2f       	mov	r22, r24
    67a4:	70 e0       	ldi	r23, 0x00	; 0
    67a6:	40 91 58 24 	lds	r20, 0x2458
    67aa:	50 91 59 24 	lds	r21, 0x2459
    67ae:	89 81       	ldd	r24, Y+1	; 0x01
    67b0:	88 2f       	mov	r24, r24
    67b2:	90 e0       	ldi	r25, 0x00	; 0
    67b4:	88 0f       	add	r24, r24
    67b6:	99 1f       	adc	r25, r25
    67b8:	9c 01       	movw	r18, r24
    67ba:	22 0f       	add	r18, r18
    67bc:	33 1f       	adc	r19, r19
    67be:	22 0f       	add	r18, r18
    67c0:	33 1f       	adc	r19, r19
    67c2:	82 0f       	add	r24, r18
    67c4:	93 1f       	adc	r25, r19
    67c6:	84 0f       	add	r24, r20
    67c8:	95 1f       	adc	r25, r21
    67ca:	fc 01       	movw	r30, r24
    67cc:	34 96       	adiw	r30, 0x04	; 4
    67ce:	20 81       	ld	r18, Z
    67d0:	31 81       	ldd	r19, Z+1	; 0x01
    67d2:	cb 01       	movw	r24, r22
    67d4:	88 0f       	add	r24, r24
    67d6:	99 1f       	adc	r25, r25
    67d8:	01 96       	adiw	r24, 0x01	; 1
    67da:	88 0f       	add	r24, r24
    67dc:	99 1f       	adc	r25, r25
    67de:	88 0f       	add	r24, r24
    67e0:	99 1f       	adc	r25, r25
    67e2:	88 0f       	add	r24, r24
    67e4:	99 1f       	adc	r25, r25
    67e6:	fc 01       	movw	r30, r24
    67e8:	ea 5a       	subi	r30, 0xAA	; 170
    67ea:	fb 4d       	sbci	r31, 0xDB	; 219
    67ec:	20 83       	st	Z, r18
    67ee:	31 83       	std	Z+1, r19	; 0x01
		ax.a[i].timer->PER = ax.p->a[i].period;
    67f0:	89 81       	ldd	r24, Y+1	; 0x01
    67f2:	88 2f       	mov	r24, r24
    67f4:	90 e0       	ldi	r25, 0x00	; 0
    67f6:	82 95       	swap	r24
    67f8:	92 95       	swap	r25
    67fa:	90 7f       	andi	r25, 0xF0	; 240
    67fc:	98 27       	eor	r25, r24
    67fe:	80 7f       	andi	r24, 0xF0	; 240
    6800:	98 27       	eor	r25, r24
    6802:	fc 01       	movw	r30, r24
    6804:	e8 59       	subi	r30, 0x98	; 152
    6806:	fb 4d       	sbci	r31, 0xDB	; 219
    6808:	a0 81       	ld	r26, Z
    680a:	b1 81       	ldd	r27, Z+1	; 0x01
    680c:	40 91 58 24 	lds	r20, 0x2458
    6810:	50 91 59 24 	lds	r21, 0x2459
    6814:	89 81       	ldd	r24, Y+1	; 0x01
    6816:	88 2f       	mov	r24, r24
    6818:	90 e0       	ldi	r25, 0x00	; 0
    681a:	88 0f       	add	r24, r24
    681c:	99 1f       	adc	r25, r25
    681e:	9c 01       	movw	r18, r24
    6820:	22 0f       	add	r18, r18
    6822:	33 1f       	adc	r19, r19
    6824:	22 0f       	add	r18, r18
    6826:	33 1f       	adc	r19, r19
    6828:	82 0f       	add	r24, r18
    682a:	93 1f       	adc	r25, r19
    682c:	84 0f       	add	r24, r20
    682e:	95 1f       	adc	r25, r21
    6830:	fc 01       	movw	r30, r24
    6832:	34 96       	adiw	r30, 0x04	; 4
    6834:	80 81       	ld	r24, Z
    6836:	91 81       	ldd	r25, Z+1	; 0x01
    6838:	96 96       	adiw	r26, 0x26	; 38
    683a:	8d 93       	st	X+, r24
    683c:	9c 93       	st	X, r25
    683e:	97 97       	sbiw	r26, 0x27	; 39
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    6840:	89 81       	ldd	r24, Y+1	; 0x01
    6842:	88 2f       	mov	r24, r24
    6844:	90 e0       	ldi	r25, 0x00	; 0
    6846:	01 96       	adiw	r24, 0x01	; 1
    6848:	82 95       	swap	r24
    684a:	92 95       	swap	r25
    684c:	90 7f       	andi	r25, 0xF0	; 240
    684e:	98 27       	eor	r25, r24
    6850:	80 7f       	andi	r24, 0xF0	; 240
    6852:	98 27       	eor	r25, r24
    6854:	fc 01       	movw	r30, r24
    6856:	ea 5a       	subi	r30, 0xAA	; 170
    6858:	fb 4d       	sbci	r31, 0xDB	; 219
    685a:	01 90       	ld	r0, Z+
    685c:	f0 81       	ld	r31, Z
    685e:	e0 2d       	mov	r30, r0
    6860:	84 e0       	ldi	r24, 0x04	; 4
    6862:	86 83       	std	Z+6, r24	; 0x06
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    6864:	89 81       	ldd	r24, Y+1	; 0x01
    6866:	8f 5f       	subi	r24, 0xFF	; 255
    6868:	89 83       	std	Y+1, r24	; 0x01
    686a:	89 81       	ldd	r24, Y+1	; 0x01
    686c:	83 30       	cpi	r24, 0x03	; 3
    686e:	08 f4       	brcc	.+2      	; 0x6872 <st_execute_move+0x342>
    6870:	84 ce       	rjmp	.-760    	; 0x657a <st_execute_move+0x4a>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    6872:	10 92 57 24 	sts	0x2457, r1
	if (ax.a[X].step_counter) { 
    6876:	80 91 5a 24 	lds	r24, 0x245A
    687a:	90 91 5b 24 	lds	r25, 0x245B
    687e:	a0 91 5c 24 	lds	r26, 0x245C
    6882:	b0 91 5d 24 	lds	r27, 0x245D
    6886:	00 97       	sbiw	r24, 0x00	; 0
    6888:	a1 05       	cpc	r26, r1
    688a:	b1 05       	cpc	r27, r1
    688c:	59 f0       	breq	.+22     	; 0x68a4 <st_execute_move+0x374>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    688e:	e0 91 68 24 	lds	r30, 0x2468
    6892:	f0 91 69 24 	lds	r31, 0x2469
    6896:	81 e0       	ldi	r24, 0x01	; 1
    6898:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    689a:	80 91 57 24 	lds	r24, 0x2457
    689e:	88 60       	ori	r24, 0x08	; 8
    68a0:	80 93 57 24 	sts	0x2457, r24
	}
	if (ax.a[Y].step_counter) {
    68a4:	80 91 6a 24 	lds	r24, 0x246A
    68a8:	90 91 6b 24 	lds	r25, 0x246B
    68ac:	a0 91 6c 24 	lds	r26, 0x246C
    68b0:	b0 91 6d 24 	lds	r27, 0x246D
    68b4:	00 97       	sbiw	r24, 0x00	; 0
    68b6:	a1 05       	cpc	r26, r1
    68b8:	b1 05       	cpc	r27, r1
    68ba:	59 f0       	breq	.+22     	; 0x68d2 <st_execute_move+0x3a2>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    68bc:	e0 91 78 24 	lds	r30, 0x2478
    68c0:	f0 91 79 24 	lds	r31, 0x2479
    68c4:	81 e0       	ldi	r24, 0x01	; 1
    68c6:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    68c8:	80 91 57 24 	lds	r24, 0x2457
    68cc:	84 60       	ori	r24, 0x04	; 4
    68ce:	80 93 57 24 	sts	0x2457, r24
	}
	if (ax.a[Z].step_counter) {
    68d2:	80 91 7a 24 	lds	r24, 0x247A
    68d6:	90 91 7b 24 	lds	r25, 0x247B
    68da:	a0 91 7c 24 	lds	r26, 0x247C
    68de:	b0 91 7d 24 	lds	r27, 0x247D
    68e2:	00 97       	sbiw	r24, 0x00	; 0
    68e4:	a1 05       	cpc	r26, r1
    68e6:	b1 05       	cpc	r27, r1
    68e8:	59 f0       	breq	.+22     	; 0x6900 <st_execute_move+0x3d0>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    68ea:	e0 91 88 24 	lds	r30, 0x2488
    68ee:	f0 91 89 24 	lds	r31, 0x2489
    68f2:	81 e0       	ldi	r24, 0x01	; 1
    68f4:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    68f6:	80 91 57 24 	lds	r24, 0x2457
    68fa:	82 60       	ori	r24, 0x02	; 2
    68fc:	80 93 57 24 	sts	0x2457, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    6900:	10 92 56 24 	sts	0x2456, r1
}
    6904:	0f 90       	pop	r0
    6906:	cf 91       	pop	r28
    6908:	df 91       	pop	r29
    690a:	08 95       	ret

0000690c <_st_fake_move>:
/* 
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
    690c:	df 93       	push	r29
    690e:	cf 93       	push	r28
    6910:	cd b7       	in	r28, 0x3d	; 61
    6912:	de b7       	in	r29, 0x3e	; 62
	ax.exec_mutex = FALSE;
    6914:	10 92 56 24 	sts	0x2456, r1
	st_execute_move();		// recursively empty the move queue
    6918:	0e 94 98 32 	call	0x6530	; 0x6530 <st_execute_move>
	return;
}
    691c:	cf 91       	pop	r28
    691e:	df 91       	pop	r29
    6920:	08 95       	ret

00006922 <st_set_polarity>:
/* 
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
    6922:	df 93       	push	r29
    6924:	cf 93       	push	r28
    6926:	0f 92       	push	r0
    6928:	0f 92       	push	r0
    692a:	cd b7       	in	r28, 0x3d	; 61
    692c:	de b7       	in	r29, 0x3e	; 62
    692e:	89 83       	std	Y+1, r24	; 0x01
    6930:	6a 83       	std	Y+2, r22	; 0x02
	ax.a[axis].polarity = polarity;
    6932:	89 81       	ldd	r24, Y+1	; 0x01
    6934:	88 2f       	mov	r24, r24
    6936:	90 e0       	ldi	r25, 0x00	; 0
    6938:	82 95       	swap	r24
    693a:	92 95       	swap	r25
    693c:	90 7f       	andi	r25, 0xF0	; 240
    693e:	98 27       	eor	r25, r24
    6940:	80 7f       	andi	r24, 0xF0	; 240
    6942:	98 27       	eor	r25, r24
    6944:	fc 01       	movw	r30, r24
    6946:	ec 59       	subi	r30, 0x9C	; 156
    6948:	fb 4d       	sbci	r31, 0xDB	; 219
    694a:	8a 81       	ldd	r24, Y+2	; 0x02
    694c:	80 83       	st	Z, r24
}
    694e:	0f 90       	pop	r0
    6950:	0f 90       	pop	r0
    6952:	cf 91       	pop	r28
    6954:	df 91       	pop	r29
    6956:	08 95       	ret

00006958 <st_stop_steppers>:
/* 
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
    6958:	df 93       	push	r29
    695a:	cf 93       	push	r28
    695c:	0f 92       	push	r0
    695e:	cd b7       	in	r28, 0x3d	; 61
    6960:	de b7       	in	r29, 0x3e	; 62
	cli();										// stop interrupts
    6962:	f8 94       	cli
	for (uint8_t i=X; i<=A; i++) {
    6964:	19 82       	std	Y+1, r1	; 0x01
    6966:	13 c0       	rjmp	.+38     	; 0x698e <st_stop_steppers+0x36>
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    6968:	89 81       	ldd	r24, Y+1	; 0x01
    696a:	88 2f       	mov	r24, r24
    696c:	90 e0       	ldi	r25, 0x00	; 0
    696e:	82 95       	swap	r24
    6970:	92 95       	swap	r25
    6972:	90 7f       	andi	r25, 0xF0	; 240
    6974:	98 27       	eor	r25, r24
    6976:	80 7f       	andi	r24, 0xF0	; 240
    6978:	98 27       	eor	r25, r24
    697a:	fc 01       	movw	r30, r24
    697c:	e8 59       	subi	r30, 0x98	; 152
    697e:	fb 4d       	sbci	r31, 0xDB	; 219
    6980:	01 90       	ld	r0, Z+
    6982:	f0 81       	ld	r31, Z
    6984:	e0 2d       	mov	r30, r0
    6986:	10 82       	st	Z, r1
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
	for (uint8_t i=X; i<=A; i++) {
    6988:	89 81       	ldd	r24, Y+1	; 0x01
    698a:	8f 5f       	subi	r24, 0xFF	; 255
    698c:	89 83       	std	Y+1, r24	; 0x01
    698e:	89 81       	ldd	r24, Y+1	; 0x01
    6990:	84 30       	cpi	r24, 0x04	; 4
    6992:	50 f3       	brcs	.-44     	; 0x6968 <st_stop_steppers+0x10>
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
	}	
	mv_flush();									// flush the move buffer
    6994:	0e 94 f8 47 	call	0x8ff0	; 0x8ff0 <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    6998:	10 92 57 24 	sts	0x2457, r1
	sei();
    699c:	78 94       	sei
}
    699e:	0f 90       	pop	r0
    69a0:	cf 91       	pop	r28
    69a2:	df 91       	pop	r29
    69a4:	08 95       	ret

000069a6 <st_terminate>:
/* 
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
    69a6:	df 93       	push	r29
    69a8:	cf 93       	push	r28
    69aa:	cd b7       	in	r28, 0x3d	; 61
    69ac:	de b7       	in	r29, 0x3e	; 62
	cli();
    69ae:	f8 94       	cli
	mv_flush();									// flush the move buffer
    69b0:	0e 94 f8 47 	call	0x8ff0	; 0x8ff0 <mv_flush>
	sei();
    69b4:	78 94       	sei
}
    69b6:	cf 91       	pop	r28
    69b8:	df 91       	pop	r29
    69ba:	08 95       	ret

000069bc <st_motor_test>:

/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
    69bc:	df 93       	push	r29
    69be:	cf 93       	push	r28
    69c0:	cd b7       	in	r28, 0x3d	; 61
    69c2:	de b7       	in	r29, 0x3e	; 62
	ax.a[X].step_counter = 0x00001000;
    69c4:	80 e0       	ldi	r24, 0x00	; 0
    69c6:	90 e1       	ldi	r25, 0x10	; 16
    69c8:	a0 e0       	ldi	r26, 0x00	; 0
    69ca:	b0 e0       	ldi	r27, 0x00	; 0
    69cc:	80 93 5a 24 	sts	0x245A, r24
    69d0:	90 93 5b 24 	sts	0x245B, r25
    69d4:	a0 93 5c 24 	sts	0x245C, r26
    69d8:	b0 93 5d 24 	sts	0x245D, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    69dc:	e0 91 68 24 	lds	r30, 0x2468
    69e0:	f0 91 69 24 	lds	r31, 0x2469
    69e4:	80 e0       	ldi	r24, 0x00	; 0
    69e6:	90 e1       	ldi	r25, 0x10	; 16
    69e8:	86 a3       	std	Z+38, r24	; 0x26
    69ea:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    69ec:	e0 91 68 24 	lds	r30, 0x2468
    69f0:	f0 91 69 24 	lds	r31, 0x2469
    69f4:	81 e0       	ldi	r24, 0x01	; 1
    69f6:	80 83       	st	Z, r24

	ax.a[Y].step_counter = 0x00000800;
    69f8:	80 e0       	ldi	r24, 0x00	; 0
    69fa:	98 e0       	ldi	r25, 0x08	; 8
    69fc:	a0 e0       	ldi	r26, 0x00	; 0
    69fe:	b0 e0       	ldi	r27, 0x00	; 0
    6a00:	80 93 6a 24 	sts	0x246A, r24
    6a04:	90 93 6b 24 	sts	0x246B, r25
    6a08:	a0 93 6c 24 	sts	0x246C, r26
    6a0c:	b0 93 6d 24 	sts	0x246D, r27
	ax.a[Y].timer->PER = 0x2000;
    6a10:	e0 91 78 24 	lds	r30, 0x2478
    6a14:	f0 91 79 24 	lds	r31, 0x2479
    6a18:	80 e0       	ldi	r24, 0x00	; 0
    6a1a:	90 e2       	ldi	r25, 0x20	; 32
    6a1c:	86 a3       	std	Z+38, r24	; 0x26
    6a1e:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    6a20:	e0 91 78 24 	lds	r30, 0x2478
    6a24:	f0 91 79 24 	lds	r31, 0x2479
    6a28:	81 e0       	ldi	r24, 0x01	; 1
    6a2a:	80 83       	st	Z, r24

	ax.a[Z].step_counter = 0x00000600;
    6a2c:	80 e0       	ldi	r24, 0x00	; 0
    6a2e:	96 e0       	ldi	r25, 0x06	; 6
    6a30:	a0 e0       	ldi	r26, 0x00	; 0
    6a32:	b0 e0       	ldi	r27, 0x00	; 0
    6a34:	80 93 7a 24 	sts	0x247A, r24
    6a38:	90 93 7b 24 	sts	0x247B, r25
    6a3c:	a0 93 7c 24 	sts	0x247C, r26
    6a40:	b0 93 7d 24 	sts	0x247D, r27
	ax.a[Z].timer->PER = 0x3000;
    6a44:	e0 91 88 24 	lds	r30, 0x2488
    6a48:	f0 91 89 24 	lds	r31, 0x2489
    6a4c:	80 e0       	ldi	r24, 0x00	; 0
    6a4e:	90 e3       	ldi	r25, 0x30	; 48
    6a50:	86 a3       	std	Z+38, r24	; 0x26
    6a52:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    6a54:	e0 91 88 24 	lds	r30, 0x2488
    6a58:	f0 91 89 24 	lds	r31, 0x2489
    6a5c:	81 e0       	ldi	r24, 0x01	; 1
    6a5e:	80 83       	st	Z, r24

	ax.a[A].step_counter = 0x00000400;
    6a60:	80 e0       	ldi	r24, 0x00	; 0
    6a62:	94 e0       	ldi	r25, 0x04	; 4
    6a64:	a0 e0       	ldi	r26, 0x00	; 0
    6a66:	b0 e0       	ldi	r27, 0x00	; 0
    6a68:	80 93 8a 24 	sts	0x248A, r24
    6a6c:	90 93 8b 24 	sts	0x248B, r25
    6a70:	a0 93 8c 24 	sts	0x248C, r26
    6a74:	b0 93 8d 24 	sts	0x248D, r27
	ax.a[A].timer->PER = 0x4000;
    6a78:	e0 91 98 24 	lds	r30, 0x2498
    6a7c:	f0 91 99 24 	lds	r31, 0x2499
    6a80:	80 e0       	ldi	r24, 0x00	; 0
    6a82:	90 e4       	ldi	r25, 0x40	; 64
    6a84:	86 a3       	std	Z+38, r24	; 0x26
    6a86:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    6a88:	e0 91 98 24 	lds	r30, 0x2498
    6a8c:	f0 91 99 24 	lds	r31, 0x2499
    6a90:	81 e0       	ldi	r24, 0x01	; 1
    6a92:	80 83       	st	Z, r24

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    6a94:	80 91 57 24 	lds	r24, 0x2457
    6a98:	8f 60       	ori	r24, 0x0F	; 15
    6a9a:	80 93 57 24 	sts	0x2457, r24
}
    6a9e:	cf 91       	pop	r28
    6aa0:	df 91       	pop	r29
    6aa2:	08 95       	ret

00006aa4 <PMIC_SetVectorLocationToBoot>:
 *  The function writes the correct signature to the Configuration
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
    6aa4:	df 93       	push	r29
    6aa6:	cf 93       	push	r28
    6aa8:	0f 92       	push	r0
    6aaa:	cd b7       	in	r28, 0x3d	; 61
    6aac:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    6aae:	e0 ea       	ldi	r30, 0xA0	; 160
    6ab0:	f0 e0       	ldi	r31, 0x00	; 0
    6ab2:	82 81       	ldd	r24, Z+2	; 0x02
    6ab4:	80 64       	ori	r24, 0x40	; 64
    6ab6:	89 83       	std	Y+1, r24	; 0x01
	CCP = CCP_IOREG_gc;
    6ab8:	e4 e3       	ldi	r30, 0x34	; 52
    6aba:	f0 e0       	ldi	r31, 0x00	; 0
    6abc:	88 ed       	ldi	r24, 0xD8	; 216
    6abe:	80 83       	st	Z, r24
	PMIC.CTRL = temp;
    6ac0:	e0 ea       	ldi	r30, 0xA0	; 160
    6ac2:	f0 e0       	ldi	r31, 0x00	; 0
    6ac4:	89 81       	ldd	r24, Y+1	; 0x01
    6ac6:	82 83       	std	Z+2, r24	; 0x02
}
    6ac8:	0f 90       	pop	r0
    6aca:	cf 91       	pop	r28
    6acc:	df 91       	pop	r29
    6ace:	08 95       	ret

00006ad0 <PMIC_SetVectorLocationToApplication>:
 *  The function writes the correct signature to the Configuration
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
    6ad0:	df 93       	push	r29
    6ad2:	cf 93       	push	r28
    6ad4:	0f 92       	push	r0
    6ad6:	cd b7       	in	r28, 0x3d	; 61
    6ad8:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    6ada:	e0 ea       	ldi	r30, 0xA0	; 160
    6adc:	f0 e0       	ldi	r31, 0x00	; 0
    6ade:	82 81       	ldd	r24, Z+2	; 0x02
    6ae0:	8f 7b       	andi	r24, 0xBF	; 191
    6ae2:	89 83       	std	Y+1, r24	; 0x01
	CCP = CCP_IOREG_gc;
    6ae4:	e4 e3       	ldi	r30, 0x34	; 52
    6ae6:	f0 e0       	ldi	r31, 0x00	; 0
    6ae8:	88 ed       	ldi	r24, 0xD8	; 216
    6aea:	80 83       	st	Z, r24
	PMIC.CTRL = temp;
    6aec:	e0 ea       	ldi	r30, 0xA0	; 160
    6aee:	f0 e0       	ldi	r31, 0x00	; 0
    6af0:	89 81       	ldd	r24, Y+1	; 0x01
    6af2:	82 83       	std	Z+2, r24	; 0x02
}
    6af4:	0f 90       	pop	r0
    6af6:	cf 91       	pop	r28
    6af8:	df 91       	pop	r29
    6afa:	08 95       	ret

00006afc <xio_init>:
 *
 *	xio_init()
 */

void xio_init(void)
{	
    6afc:	df 93       	push	r29
    6afe:	cf 93       	push	r28
    6b00:	cd b7       	in	r28, 0x3d	; 61
    6b02:	de b7       	in	r29, 0x3e	; 62
	// USB port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_SEMICOLONS | XIO_BAUD_115200);
    6b04:	85 e0       	ldi	r24, 0x05	; 5
    6b06:	90 e5       	ldi	r25, 0x50	; 80
    6b08:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <xio_usb_init>

	// RS485 port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_BAUD_115200);
    6b0c:	85 e0       	ldi	r24, 0x05	; 5
    6b0e:	90 e1       	ldi	r25, 0x10	; 16
    6b10:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <xio_usb_init>

	// PGM file defaults are:	XIO_RD | XIO_BLOCK
//	xio_pgm_init(XIO_ECHO | XIO_CRLF | XIO_LINEMODE | XIO_SEMICOLONS);
	xio_pgm_init(XIO_ECHO | XIO_CRLF | XIO_LINEMODE);
    6b14:	80 e0       	ldi	r24, 0x00	; 0
    6b16:	95 e1       	ldi	r25, 0x15	; 21
    6b18:	0e 94 d4 3f 	call	0x7fa8	; 0x7fa8 <xio_pgm_init>
//	xio_pgm_init(XIO_LINEMODE);

	stddev = &dev_usb;				// stddev is a convenience
    6b1c:	83 e0       	ldi	r24, 0x03	; 3
    6b1e:	90 e2       	ldi	r25, 0x20	; 32
    6b20:	80 93 08 25 	sts	0x2508, r24
    6b24:	90 93 09 25 	sts	0x2509, r25
	stdin = &dev_usb;				// define the console device
    6b28:	83 e0       	ldi	r24, 0x03	; 3
    6b2a:	90 e2       	ldi	r25, 0x20	; 32
    6b2c:	80 93 62 25 	sts	0x2562, r24
    6b30:	90 93 63 25 	sts	0x2563, r25
	stdout = &dev_usb;				// ...
    6b34:	83 e0       	ldi	r24, 0x03	; 3
    6b36:	90 e2       	ldi	r25, 0x20	; 32
    6b38:	80 93 64 25 	sts	0x2564, r24
    6b3c:	90 93 65 25 	sts	0x2565, r25
	stderr = &dev_usb;				// ...
    6b40:	83 e0       	ldi	r24, 0x03	; 3
    6b42:	90 e2       	ldi	r25, 0x20	; 32
    6b44:	80 93 66 25 	sts	0x2566, r24
    6b48:	90 93 67 25 	sts	0x2567, r25

	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    6b4c:	8a e3       	ldi	r24, 0x3A	; 58
    6b4e:	97 e0       	ldi	r25, 0x07	; 7
    6b50:	0f 92       	push	r0
    6b52:	0f 92       	push	r0
    6b54:	ed b7       	in	r30, 0x3d	; 61
    6b56:	fe b7       	in	r31, 0x3e	; 62
    6b58:	31 96       	adiw	r30, 0x01	; 1
    6b5a:	80 83       	st	Z, r24
    6b5c:	91 83       	std	Z+1, r25	; 0x01
    6b5e:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    6b62:	0f 90       	pop	r0
    6b64:	0f 90       	pop	r0
}
    6b66:	cf 91       	pop	r28
    6b68:	df 91       	pop	r29
    6b6a:	08 95       	ret

00006b6c <xio_dev_init>:
/*
 * xio_dev_init() - common entry point for device init functions
 */

int8_t xio_dev_init(uint8_t dev, const int16_t arg)
{
    6b6c:	df 93       	push	r29
    6b6e:	cf 93       	push	r28
    6b70:	00 d0       	rcall	.+0      	; 0x6b72 <xio_dev_init+0x6>
    6b72:	00 d0       	rcall	.+0      	; 0x6b74 <xio_dev_init+0x8>
    6b74:	cd b7       	in	r28, 0x3d	; 61
    6b76:	de b7       	in	r29, 0x3e	; 62
    6b78:	89 83       	std	Y+1, r24	; 0x01
    6b7a:	6a 83       	std	Y+2, r22	; 0x02
    6b7c:	7b 83       	std	Y+3, r23	; 0x03
	switch (dev) {
    6b7e:	89 81       	ldd	r24, Y+1	; 0x01
    6b80:	28 2f       	mov	r18, r24
    6b82:	30 e0       	ldi	r19, 0x00	; 0
    6b84:	2d 83       	std	Y+5, r18	; 0x05
    6b86:	3e 83       	std	Y+6, r19	; 0x06
    6b88:	8d 81       	ldd	r24, Y+5	; 0x05
    6b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    6b8c:	81 30       	cpi	r24, 0x01	; 1
    6b8e:	91 05       	cpc	r25, r1
    6b90:	b9 f0       	breq	.+46     	; 0x6bc0 <xio_dev_init+0x54>
    6b92:	2d 81       	ldd	r18, Y+5	; 0x05
    6b94:	3e 81       	ldd	r19, Y+6	; 0x06
    6b96:	22 30       	cpi	r18, 0x02	; 2
    6b98:	31 05       	cpc	r19, r1
    6b9a:	2c f4       	brge	.+10     	; 0x6ba6 <xio_dev_init+0x3a>
    6b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    6b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    6ba0:	00 97       	sbiw	r24, 0x00	; 0
    6ba2:	61 f0       	breq	.+24     	; 0x6bbc <xio_dev_init+0x50>
    6ba4:	1f c0       	rjmp	.+62     	; 0x6be4 <xio_dev_init+0x78>
    6ba6:	2d 81       	ldd	r18, Y+5	; 0x05
    6ba8:	3e 81       	ldd	r19, Y+6	; 0x06
    6baa:	22 30       	cpi	r18, 0x02	; 2
    6bac:	31 05       	cpc	r19, r1
    6bae:	71 f0       	breq	.+28     	; 0x6bcc <xio_dev_init+0x60>
    6bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    6bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    6bb4:	84 30       	cpi	r24, 0x04	; 4
    6bb6:	91 05       	cpc	r25, r1
    6bb8:	79 f0       	breq	.+30     	; 0x6bd8 <xio_dev_init+0x6c>
    6bba:	14 c0       	rjmp	.+40     	; 0x6be4 <xio_dev_init+0x78>
		case (XIO_DEV_NULL): return (TG_OK);
    6bbc:	1c 82       	std	Y+4, r1	; 0x04
    6bbe:	14 c0       	rjmp	.+40     	; 0x6be8 <xio_dev_init+0x7c>
		case (XIO_DEV_USB): xio_usb_init(arg); return (TG_OK);
    6bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    6bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    6bc4:	0e 94 9d 36 	call	0x6d3a	; 0x6d3a <xio_usb_init>
    6bc8:	1c 82       	std	Y+4, r1	; 0x04
    6bca:	0e c0       	rjmp	.+28     	; 0x6be8 <xio_dev_init+0x7c>
		case (XIO_DEV_RS485): xio_rs485_init(arg); return (TG_OK);
    6bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    6bce:	9b 81       	ldd	r25, Y+3	; 0x03
    6bd0:	0e 94 20 4a 	call	0x9440	; 0x9440 <xio_rs485_init>
    6bd4:	1c 82       	std	Y+4, r1	; 0x04
    6bd6:	08 c0       	rjmp	.+16     	; 0x6be8 <xio_dev_init+0x7c>
//		case (XIO_DEV_AUX): xio_aux_init(arg); return (TG_OK);
		case (XIO_DEV_PGM): xio_pgm_init(arg); return (TG_OK);
    6bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    6bda:	9b 81       	ldd	r25, Y+3	; 0x03
    6bdc:	0e 94 d4 3f 	call	0x7fa8	; 0x7fa8 <xio_pgm_init>
    6be0:	1c 82       	std	Y+4, r1	; 0x04
    6be2:	02 c0       	rjmp	.+4      	; 0x6be8 <xio_dev_init+0x7c>
		default: return (TG_UNRECOGNIZED_DEVICE);
    6be4:	91 e1       	ldi	r25, 0x11	; 17
    6be6:	9c 83       	std	Y+4, r25	; 0x04
    6be8:	8c 81       	ldd	r24, Y+4	; 0x04
	}
	return (TG_ERROR);		// never should hit this
}
    6bea:	26 96       	adiw	r28, 0x06	; 6
    6bec:	cd bf       	out	0x3d, r28	; 61
    6bee:	de bf       	out	0x3e, r29	; 62
    6bf0:	cf 91       	pop	r28
    6bf2:	df 91       	pop	r29
    6bf4:	08 95       	ret

00006bf6 <xio_control>:
/*
 * xio_control() - common entry point for device control functions
 */

int8_t xio_control(uint8_t dev, const uint16_t control, const int16_t arg)
{
    6bf6:	df 93       	push	r29
    6bf8:	cf 93       	push	r28
    6bfa:	cd b7       	in	r28, 0x3d	; 61
    6bfc:	de b7       	in	r29, 0x3e	; 62
    6bfe:	28 97       	sbiw	r28, 0x08	; 8
    6c00:	cd bf       	out	0x3d, r28	; 61
    6c02:	de bf       	out	0x3e, r29	; 62
    6c04:	89 83       	std	Y+1, r24	; 0x01
    6c06:	6a 83       	std	Y+2, r22	; 0x02
    6c08:	7b 83       	std	Y+3, r23	; 0x03
    6c0a:	4c 83       	std	Y+4, r20	; 0x04
    6c0c:	5d 83       	std	Y+5, r21	; 0x05
	switch (dev) {
    6c0e:	89 81       	ldd	r24, Y+1	; 0x01
    6c10:	28 2f       	mov	r18, r24
    6c12:	30 e0       	ldi	r19, 0x00	; 0
    6c14:	2f 83       	std	Y+7, r18	; 0x07
    6c16:	38 87       	std	Y+8, r19	; 0x08
    6c18:	8f 81       	ldd	r24, Y+7	; 0x07
    6c1a:	98 85       	ldd	r25, Y+8	; 0x08
    6c1c:	81 30       	cpi	r24, 0x01	; 1
    6c1e:	91 05       	cpc	r25, r1
    6c20:	b9 f0       	breq	.+46     	; 0x6c50 <xio_control+0x5a>
    6c22:	2f 81       	ldd	r18, Y+7	; 0x07
    6c24:	38 85       	ldd	r19, Y+8	; 0x08
    6c26:	22 30       	cpi	r18, 0x02	; 2
    6c28:	31 05       	cpc	r19, r1
    6c2a:	2c f4       	brge	.+10     	; 0x6c36 <xio_control+0x40>
    6c2c:	8f 81       	ldd	r24, Y+7	; 0x07
    6c2e:	98 85       	ldd	r25, Y+8	; 0x08
    6c30:	00 97       	sbiw	r24, 0x00	; 0
    6c32:	61 f0       	breq	.+24     	; 0x6c4c <xio_control+0x56>
    6c34:	28 c0       	rjmp	.+80     	; 0x6c86 <xio_control+0x90>
    6c36:	2f 81       	ldd	r18, Y+7	; 0x07
    6c38:	38 85       	ldd	r19, Y+8	; 0x08
    6c3a:	22 30       	cpi	r18, 0x02	; 2
    6c3c:	31 05       	cpc	r19, r1
    6c3e:	89 f0       	breq	.+34     	; 0x6c62 <xio_control+0x6c>
    6c40:	8f 81       	ldd	r24, Y+7	; 0x07
    6c42:	98 85       	ldd	r25, Y+8	; 0x08
    6c44:	84 30       	cpi	r24, 0x04	; 4
    6c46:	91 05       	cpc	r25, r1
    6c48:	a9 f0       	breq	.+42     	; 0x6c74 <xio_control+0x7e>
    6c4a:	1d c0       	rjmp	.+58     	; 0x6c86 <xio_control+0x90>
		case (XIO_DEV_NULL): return (TG_OK);
    6c4c:	1e 82       	std	Y+6, r1	; 0x06
    6c4e:	1d c0       	rjmp	.+58     	; 0x6c8a <xio_control+0x94>
		case (XIO_DEV_USB): return (xio_usb_control(control, arg));
    6c50:	8a 81       	ldd	r24, Y+2	; 0x02
    6c52:	9b 81       	ldd	r25, Y+3	; 0x03
    6c54:	2c 81       	ldd	r18, Y+4	; 0x04
    6c56:	3d 81       	ldd	r19, Y+5	; 0x05
    6c58:	b9 01       	movw	r22, r18
    6c5a:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <xio_usb_control>
    6c5e:	8e 83       	std	Y+6, r24	; 0x06
    6c60:	14 c0       	rjmp	.+40     	; 0x6c8a <xio_control+0x94>
		case (XIO_DEV_RS485): return (xio_rs485_control(control, arg));
    6c62:	8a 81       	ldd	r24, Y+2	; 0x02
    6c64:	9b 81       	ldd	r25, Y+3	; 0x03
    6c66:	2c 81       	ldd	r18, Y+4	; 0x04
    6c68:	3d 81       	ldd	r19, Y+5	; 0x05
    6c6a:	b9 01       	movw	r22, r18
    6c6c:	0e 94 6d 4b 	call	0x96da	; 0x96da <xio_rs485_control>
    6c70:	8e 83       	std	Y+6, r24	; 0x06
    6c72:	0b c0       	rjmp	.+22     	; 0x6c8a <xio_control+0x94>
//		case (XIO_DEV_AUX): return (xio_aux_control(control, arg));
		case (XIO_DEV_PGM): return (xio_pgm_control(control, arg));
    6c74:	8a 81       	ldd	r24, Y+2	; 0x02
    6c76:	9b 81       	ldd	r25, Y+3	; 0x03
    6c78:	2c 81       	ldd	r18, Y+4	; 0x04
    6c7a:	3d 81       	ldd	r19, Y+5	; 0x05
    6c7c:	b9 01       	movw	r22, r18
    6c7e:	0e 94 ac 40 	call	0x8158	; 0x8158 <xio_pgm_control>
    6c82:	8e 83       	std	Y+6, r24	; 0x06
    6c84:	02 c0       	rjmp	.+4      	; 0x6c8a <xio_control+0x94>
		default: return (TG_UNRECOGNIZED_DEVICE);
    6c86:	91 e1       	ldi	r25, 0x11	; 17
    6c88:	9e 83       	std	Y+6, r25	; 0x06
    6c8a:	8e 81       	ldd	r24, Y+6	; 0x06
	}
	return (TG_ERROR);		// never should hit this
}
    6c8c:	28 96       	adiw	r28, 0x08	; 8
    6c8e:	cd bf       	out	0x3d, r28	; 61
    6c90:	de bf       	out	0x3e, r29	; 62
    6c92:	cf 91       	pop	r28
    6c94:	df 91       	pop	r29
    6c96:	08 95       	ret

00006c98 <xio_fget_ln>:
 *	len		length of text buffer in 1 offset form: e.g. use 80 instead of 79
 *	dev		XIO device enumeration
 */

int xio_fget_ln(uint8_t dev, char *buf, uint8_t len)
{
    6c98:	df 93       	push	r29
    6c9a:	cf 93       	push	r28
    6c9c:	cd b7       	in	r28, 0x3d	; 61
    6c9e:	de b7       	in	r29, 0x3e	; 62
    6ca0:	28 97       	sbiw	r28, 0x08	; 8
    6ca2:	cd bf       	out	0x3d, r28	; 61
    6ca4:	de bf       	out	0x3e, r29	; 62
    6ca6:	89 83       	std	Y+1, r24	; 0x01
    6ca8:	6a 83       	std	Y+2, r22	; 0x02
    6caa:	7b 83       	std	Y+3, r23	; 0x03
    6cac:	4c 83       	std	Y+4, r20	; 0x04
	switch (dev) {
    6cae:	89 81       	ldd	r24, Y+1	; 0x01
    6cb0:	28 2f       	mov	r18, r24
    6cb2:	30 e0       	ldi	r19, 0x00	; 0
    6cb4:	2f 83       	std	Y+7, r18	; 0x07
    6cb6:	38 87       	std	Y+8, r19	; 0x08
    6cb8:	8f 81       	ldd	r24, Y+7	; 0x07
    6cba:	98 85       	ldd	r25, Y+8	; 0x08
    6cbc:	81 30       	cpi	r24, 0x01	; 1
    6cbe:	91 05       	cpc	r25, r1
    6cc0:	c1 f0       	breq	.+48     	; 0x6cf2 <xio_fget_ln+0x5a>
    6cc2:	2f 81       	ldd	r18, Y+7	; 0x07
    6cc4:	38 85       	ldd	r19, Y+8	; 0x08
    6cc6:	22 30       	cpi	r18, 0x02	; 2
    6cc8:	31 05       	cpc	r19, r1
    6cca:	2c f4       	brge	.+10     	; 0x6cd6 <xio_fget_ln+0x3e>
    6ccc:	8f 81       	ldd	r24, Y+7	; 0x07
    6cce:	98 85       	ldd	r25, Y+8	; 0x08
    6cd0:	00 97       	sbiw	r24, 0x00	; 0
    6cd2:	61 f0       	breq	.+24     	; 0x6cec <xio_fget_ln+0x54>
    6cd4:	26 c0       	rjmp	.+76     	; 0x6d22 <xio_fget_ln+0x8a>
    6cd6:	2f 81       	ldd	r18, Y+7	; 0x07
    6cd8:	38 85       	ldd	r19, Y+8	; 0x08
    6cda:	22 30       	cpi	r18, 0x02	; 2
    6cdc:	31 05       	cpc	r19, r1
    6cde:	89 f0       	breq	.+34     	; 0x6d02 <xio_fget_ln+0x6a>
    6ce0:	8f 81       	ldd	r24, Y+7	; 0x07
    6ce2:	98 85       	ldd	r25, Y+8	; 0x08
    6ce4:	84 30       	cpi	r24, 0x04	; 4
    6ce6:	91 05       	cpc	r25, r1
    6ce8:	a1 f0       	breq	.+40     	; 0x6d12 <xio_fget_ln+0x7a>
    6cea:	1b c0       	rjmp	.+54     	; 0x6d22 <xio_fget_ln+0x8a>
		case (XIO_DEV_NULL): return (TG_OK);
    6cec:	1d 82       	std	Y+5, r1	; 0x05
    6cee:	1e 82       	std	Y+6, r1	; 0x06
    6cf0:	1c c0       	rjmp	.+56     	; 0x6d2a <xio_fget_ln+0x92>
		case (XIO_DEV_USB): return (xio_usb_readln(buf, len));
    6cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    6cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    6cf6:	6c 81       	ldd	r22, Y+4	; 0x04
    6cf8:	0e 94 60 3b 	call	0x76c0	; 0x76c0 <xio_usb_readln>
    6cfc:	8d 83       	std	Y+5, r24	; 0x05
    6cfe:	9e 83       	std	Y+6, r25	; 0x06
    6d00:	14 c0       	rjmp	.+40     	; 0x6d2a <xio_fget_ln+0x92>
		case (XIO_DEV_RS485): return (xio_rs485_readln(buf, len));
    6d02:	8a 81       	ldd	r24, Y+2	; 0x02
    6d04:	9b 81       	ldd	r25, Y+3	; 0x03
    6d06:	6c 81       	ldd	r22, Y+4	; 0x04
    6d08:	0e 94 e9 4e 	call	0x9dd2	; 0x9dd2 <xio_rs485_readln>
    6d0c:	8d 83       	std	Y+5, r24	; 0x05
    6d0e:	9e 83       	std	Y+6, r25	; 0x06
    6d10:	0c c0       	rjmp	.+24     	; 0x6d2a <xio_fget_ln+0x92>
//		case (XIO_DEV_AUX): return (xio_aux_readln(buf, len));
		case (XIO_DEV_PGM): return (xio_pgm_readln(buf, len));
    6d12:	8a 81       	ldd	r24, Y+2	; 0x02
    6d14:	9b 81       	ldd	r25, Y+3	; 0x03
    6d16:	6c 81       	ldd	r22, Y+4	; 0x04
    6d18:	0e 94 ed 41 	call	0x83da	; 0x83da <xio_pgm_readln>
    6d1c:	8d 83       	std	Y+5, r24	; 0x05
    6d1e:	9e 83       	std	Y+6, r25	; 0x06
    6d20:	04 c0       	rjmp	.+8      	; 0x6d2a <xio_fget_ln+0x92>
		default: return (TG_UNRECOGNIZED_DEVICE);
    6d22:	21 e1       	ldi	r18, 0x11	; 17
    6d24:	30 e0       	ldi	r19, 0x00	; 0
    6d26:	2d 83       	std	Y+5, r18	; 0x05
    6d28:	3e 83       	std	Y+6, r19	; 0x06
    6d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    6d2c:	9e 81       	ldd	r25, Y+6	; 0x06
	}
	return (TG_ERROR);		// never should hit this
}
    6d2e:	28 96       	adiw	r28, 0x08	; 8
    6d30:	cd bf       	out	0x3d, r28	; 61
    6d32:	de bf       	out	0x3e, r29	; 62
    6d34:	cf 91       	pop	r28
    6d36:	df 91       	pop	r29
    6d38:	08 95       	ret

00006d3a <xio_usb_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_usb_init(const uint16_t control)
{
    6d3a:	df 93       	push	r29
    6d3c:	cf 93       	push	r28
    6d3e:	cd b7       	in	r28, 0x3d	; 61
    6d40:	de b7       	in	r29, 0x3e	; 62
    6d42:	29 97       	sbiw	r28, 0x09	; 9
    6d44:	cd bf       	out	0x3d, r28	; 61
    6d46:	de bf       	out	0x3e, r29	; 62
    6d48:	88 87       	std	Y+8, r24	; 0x08
    6d4a:	99 87       	std	Y+9, r25	; 0x09
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    6d4c:	88 85       	ldd	r24, Y+8	; 0x08
    6d4e:	8f 70       	andi	r24, 0x0F	; 15
    6d50:	8f 83       	std	Y+7, r24	; 0x07

	// transfer control flags to internal flag bits
	f.flags = XIO_FLAG_USB_DEFS_gm;		// set flags to defaults & initial state
    6d52:	87 e3       	ldi	r24, 0x37	; 55
    6d54:	90 e0       	ldi	r25, 0x00	; 0
    6d56:	80 93 b1 21 	sts	0x21B1, r24
    6d5a:	90 93 b2 21 	sts	0x21B2, r25
	if (control & XIO_RD) {
    6d5e:	88 85       	ldd	r24, Y+8	; 0x08
    6d60:	99 85       	ldd	r25, Y+9	; 0x09
    6d62:	80 71       	andi	r24, 0x10	; 16
    6d64:	90 70       	andi	r25, 0x00	; 0
    6d66:	00 97       	sbiw	r24, 0x00	; 0
    6d68:	49 f0       	breq	.+18     	; 0x6d7c <xio_usb_init+0x42>
		f.flags |= XIO_FLAG_RD_bm;
    6d6a:	80 91 b1 21 	lds	r24, 0x21B1
    6d6e:	90 91 b2 21 	lds	r25, 0x21B2
    6d72:	81 60       	ori	r24, 0x01	; 1
    6d74:	80 93 b1 21 	sts	0x21B1, r24
    6d78:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_WR) {
    6d7c:	88 85       	ldd	r24, Y+8	; 0x08
    6d7e:	99 85       	ldd	r25, Y+9	; 0x09
    6d80:	80 72       	andi	r24, 0x20	; 32
    6d82:	90 70       	andi	r25, 0x00	; 0
    6d84:	00 97       	sbiw	r24, 0x00	; 0
    6d86:	49 f0       	breq	.+18     	; 0x6d9a <xio_usb_init+0x60>
		f.flags |= XIO_FLAG_WR_bm;
    6d88:	80 91 b1 21 	lds	r24, 0x21B1
    6d8c:	90 91 b2 21 	lds	r25, 0x21B2
    6d90:	82 60       	ori	r24, 0x02	; 2
    6d92:	80 93 b1 21 	sts	0x21B1, r24
    6d96:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_BLOCK) {
    6d9a:	88 85       	ldd	r24, Y+8	; 0x08
    6d9c:	99 85       	ldd	r25, Y+9	; 0x09
    6d9e:	80 74       	andi	r24, 0x40	; 64
    6da0:	90 70       	andi	r25, 0x00	; 0
    6da2:	00 97       	sbiw	r24, 0x00	; 0
    6da4:	49 f0       	breq	.+18     	; 0x6db8 <xio_usb_init+0x7e>
		f.flags |= XIO_FLAG_BLOCK_bm;
    6da6:	80 91 b1 21 	lds	r24, 0x21B1
    6daa:	90 91 b2 21 	lds	r25, 0x21B2
    6dae:	84 60       	ori	r24, 0x04	; 4
    6db0:	80 93 b1 21 	sts	0x21B1, r24
    6db4:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOBLOCK) {
    6db8:	88 85       	ldd	r24, Y+8	; 0x08
    6dba:	99 85       	ldd	r25, Y+9	; 0x09
    6dbc:	80 78       	andi	r24, 0x80	; 128
    6dbe:	90 70       	andi	r25, 0x00	; 0
    6dc0:	00 97       	sbiw	r24, 0x00	; 0
    6dc2:	49 f0       	breq	.+18     	; 0x6dd6 <xio_usb_init+0x9c>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    6dc4:	80 91 b1 21 	lds	r24, 0x21B1
    6dc8:	90 91 b2 21 	lds	r25, 0x21B2
    6dcc:	8b 7f       	andi	r24, 0xFB	; 251
    6dce:	80 93 b1 21 	sts	0x21B1, r24
    6dd2:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_ECHO) {
    6dd6:	88 85       	ldd	r24, Y+8	; 0x08
    6dd8:	99 85       	ldd	r25, Y+9	; 0x09
    6dda:	80 70       	andi	r24, 0x00	; 0
    6ddc:	91 70       	andi	r25, 0x01	; 1
    6dde:	00 97       	sbiw	r24, 0x00	; 0
    6de0:	49 f0       	breq	.+18     	; 0x6df4 <xio_usb_init+0xba>
		f.flags |= XIO_FLAG_ECHO_bm;
    6de2:	80 91 b1 21 	lds	r24, 0x21B1
    6de6:	90 91 b2 21 	lds	r25, 0x21B2
    6dea:	80 61       	ori	r24, 0x10	; 16
    6dec:	80 93 b1 21 	sts	0x21B1, r24
    6df0:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOECHO) {
    6df4:	88 85       	ldd	r24, Y+8	; 0x08
    6df6:	99 85       	ldd	r25, Y+9	; 0x09
    6df8:	80 70       	andi	r24, 0x00	; 0
    6dfa:	92 70       	andi	r25, 0x02	; 2
    6dfc:	00 97       	sbiw	r24, 0x00	; 0
    6dfe:	49 f0       	breq	.+18     	; 0x6e12 <xio_usb_init+0xd8>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    6e00:	80 91 b1 21 	lds	r24, 0x21B1
    6e04:	90 91 b2 21 	lds	r25, 0x21B2
    6e08:	8f 7e       	andi	r24, 0xEF	; 239
    6e0a:	80 93 b1 21 	sts	0x21B1, r24
    6e0e:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_CRLF) {
    6e12:	88 85       	ldd	r24, Y+8	; 0x08
    6e14:	99 85       	ldd	r25, Y+9	; 0x09
    6e16:	80 70       	andi	r24, 0x00	; 0
    6e18:	94 70       	andi	r25, 0x04	; 4
    6e1a:	00 97       	sbiw	r24, 0x00	; 0
    6e1c:	49 f0       	breq	.+18     	; 0x6e30 <xio_usb_init+0xf6>
		f.flags |= XIO_FLAG_CRLF_bm;
    6e1e:	80 91 b1 21 	lds	r24, 0x21B1
    6e22:	90 91 b2 21 	lds	r25, 0x21B2
    6e26:	80 62       	ori	r24, 0x20	; 32
    6e28:	80 93 b1 21 	sts	0x21B1, r24
    6e2c:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOCRLF) {
    6e30:	88 85       	ldd	r24, Y+8	; 0x08
    6e32:	99 85       	ldd	r25, Y+9	; 0x09
    6e34:	80 70       	andi	r24, 0x00	; 0
    6e36:	98 70       	andi	r25, 0x08	; 8
    6e38:	00 97       	sbiw	r24, 0x00	; 0
    6e3a:	49 f0       	breq	.+18     	; 0x6e4e <xio_usb_init+0x114>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    6e3c:	80 91 b1 21 	lds	r24, 0x21B1
    6e40:	90 91 b2 21 	lds	r25, 0x21B2
    6e44:	8f 7d       	andi	r24, 0xDF	; 223
    6e46:	80 93 b1 21 	sts	0x21B1, r24
    6e4a:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_LINEMODE) {
    6e4e:	88 85       	ldd	r24, Y+8	; 0x08
    6e50:	99 85       	ldd	r25, Y+9	; 0x09
    6e52:	80 70       	andi	r24, 0x00	; 0
    6e54:	90 71       	andi	r25, 0x10	; 16
    6e56:	00 97       	sbiw	r24, 0x00	; 0
    6e58:	49 f0       	breq	.+18     	; 0x6e6c <xio_usb_init+0x132>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    6e5a:	80 91 b1 21 	lds	r24, 0x21B1
    6e5e:	90 91 b2 21 	lds	r25, 0x21B2
    6e62:	80 64       	ori	r24, 0x40	; 64
    6e64:	80 93 b1 21 	sts	0x21B1, r24
    6e68:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOLINEMODE) {
    6e6c:	88 85       	ldd	r24, Y+8	; 0x08
    6e6e:	99 85       	ldd	r25, Y+9	; 0x09
    6e70:	80 70       	andi	r24, 0x00	; 0
    6e72:	90 72       	andi	r25, 0x20	; 32
    6e74:	00 97       	sbiw	r24, 0x00	; 0
    6e76:	49 f0       	breq	.+18     	; 0x6e8a <xio_usb_init+0x150>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    6e78:	80 91 b1 21 	lds	r24, 0x21B1
    6e7c:	90 91 b2 21 	lds	r25, 0x21B2
    6e80:	8f 7b       	andi	r24, 0xBF	; 191
    6e82:	80 93 b1 21 	sts	0x21B1, r24
    6e86:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_SEMICOLONS) {
    6e8a:	88 85       	ldd	r24, Y+8	; 0x08
    6e8c:	99 85       	ldd	r25, Y+9	; 0x09
    6e8e:	80 70       	andi	r24, 0x00	; 0
    6e90:	90 74       	andi	r25, 0x40	; 64
    6e92:	00 97       	sbiw	r24, 0x00	; 0
    6e94:	49 f0       	breq	.+18     	; 0x6ea8 <xio_usb_init+0x16e>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    6e96:	80 91 b1 21 	lds	r24, 0x21B1
    6e9a:	90 91 b2 21 	lds	r25, 0x21B2
    6e9e:	80 68       	ori	r24, 0x80	; 128
    6ea0:	80 93 b1 21 	sts	0x21B1, r24
    6ea4:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    6ea8:	88 85       	ldd	r24, Y+8	; 0x08
    6eaa:	99 85       	ldd	r25, Y+9	; 0x09
    6eac:	99 23       	and	r25, r25
    6eae:	4c f4       	brge	.+18     	; 0x6ec2 <xio_usb_init+0x188>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    6eb0:	80 91 b1 21 	lds	r24, 0x21B1
    6eb4:	90 91 b2 21 	lds	r25, 0x21B2
    6eb8:	8f 77       	andi	r24, 0x7F	; 127
    6eba:	80 93 b1 21 	sts	0x21B1, r24
    6ebe:	90 93 b2 21 	sts	0x21B2, r25
	}

	// character signals and error returns
	f.sig = 0;
    6ec2:	10 92 b3 21 	sts	0x21B3, r1
	dev_usb.udata = &(f.sig);				// bind sig register to FILE struct
    6ec6:	83 eb       	ldi	r24, 0xB3	; 179
    6ec8:	91 e2       	ldi	r25, 0x21	; 33
    6eca:	80 93 0f 20 	sts	0x200F, r24
    6ece:	90 93 10 20 	sts	0x2010, r25

	// setup internal RX/TX buffers
	f.rx_buf_head = 1;						// can't use location 0
    6ed2:	81 e0       	ldi	r24, 0x01	; 1
    6ed4:	80 93 ba 21 	sts	0x21BA, r24
	f.rx_buf_tail = 1;
    6ed8:	81 e0       	ldi	r24, 0x01	; 1
    6eda:	80 93 b9 21 	sts	0x21B9, r24
	f.tx_buf_head = 1;
    6ede:	81 e0       	ldi	r24, 0x01	; 1
    6ee0:	80 93 bc 21 	sts	0x21BC, r24
	f.tx_buf_tail = 1;
    6ee4:	81 e0       	ldi	r24, 0x01	; 1
    6ee6:	80 93 bb 21 	sts	0x21BB, r24
	f.len = sizeof(f.buf);					// offset to zero
    6eea:	82 e0       	ldi	r24, 0x02	; 2
    6eec:	80 93 b6 21 	sts	0x21B6, r24

	f.usart = &USB_USART;					// bind USART structure
    6ef0:	80 ea       	ldi	r24, 0xA0	; 160
    6ef2:	98 e0       	ldi	r25, 0x08	; 8
    6ef4:	80 93 e9 21 	sts	0x21E9, r24
    6ef8:	90 93 ea 21 	sts	0x21EA, r25
	f.port = &USB_PORT;						// bind PORT structure
    6efc:	80 e4       	ldi	r24, 0x40	; 64
    6efe:	96 e0       	ldi	r25, 0x06	; 6
    6f00:	80 93 eb 21 	sts	0x21EB, r24
    6f04:	90 93 ec 21 	sts	0x21EC, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    6f08:	8f 81       	ldd	r24, Y+7	; 0x07
    6f0a:	88 23       	and	r24, r24
    6f0c:	11 f4       	brne	.+4      	; 0x6f12 <xio_usb_init+0x1d8>
		baud = XIO_BAUD_DEFAULT;
    6f0e:	85 e0       	ldi	r24, 0x05	; 5
    6f10:	8f 83       	std	Y+7, r24	; 0x07
	}
	f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    6f12:	a0 91 e9 21 	lds	r26, 0x21E9
    6f16:	b0 91 ea 21 	lds	r27, 0x21EA
    6f1a:	8f 81       	ldd	r24, Y+7	; 0x07
    6f1c:	88 2f       	mov	r24, r24
    6f1e:	90 e0       	ldi	r25, 0x00	; 0
    6f20:	8c 5d       	subi	r24, 0xDC	; 220
    6f22:	98 4f       	sbci	r25, 0xF8	; 248
    6f24:	8d 83       	std	Y+5, r24	; 0x05
    6f26:	9e 83       	std	Y+6, r25	; 0x06
    6f28:	ed 81       	ldd	r30, Y+5	; 0x05
    6f2a:	fe 81       	ldd	r31, Y+6	; 0x06
    6f2c:	84 91       	lpm	r24, Z+
    6f2e:	8c 83       	std	Y+4, r24	; 0x04
    6f30:	8c 81       	ldd	r24, Y+4	; 0x04
    6f32:	16 96       	adiw	r26, 0x06	; 6
    6f34:	8c 93       	st	X, r24
	f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    6f36:	a0 91 e9 21 	lds	r26, 0x21E9
    6f3a:	b0 91 ea 21 	lds	r27, 0x21EA
    6f3e:	8f 81       	ldd	r24, Y+7	; 0x07
    6f40:	88 2f       	mov	r24, r24
    6f42:	90 e0       	ldi	r25, 0x00	; 0
    6f44:	81 5d       	subi	r24, 0xD1	; 209
    6f46:	98 4f       	sbci	r25, 0xF8	; 248
    6f48:	8a 83       	std	Y+2, r24	; 0x02
    6f4a:	9b 83       	std	Y+3, r25	; 0x03
    6f4c:	ea 81       	ldd	r30, Y+2	; 0x02
    6f4e:	fb 81       	ldd	r31, Y+3	; 0x03
    6f50:	84 91       	lpm	r24, Z+
    6f52:	89 83       	std	Y+1, r24	; 0x01
    6f54:	89 81       	ldd	r24, Y+1	; 0x01
    6f56:	17 96       	adiw	r26, 0x07	; 7
    6f58:	8c 93       	st	X, r24
    6f5a:	17 97       	sbiw	r26, 0x07	; 7
	f.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm; // enable tx and rx on USART
    6f5c:	e0 91 e9 21 	lds	r30, 0x21E9
    6f60:	f0 91 ea 21 	lds	r31, 0x21EA
    6f64:	88 e1       	ldi	r24, 0x18	; 24
    6f66:	84 83       	std	Z+4, r24	; 0x04
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    6f68:	e0 91 e9 21 	lds	r30, 0x21E9
    6f6c:	f0 91 ea 21 	lds	r31, 0x21EA
    6f70:	81 e2       	ldi	r24, 0x21	; 33
    6f72:	83 83       	std	Z+3, r24	; 0x03

	f.port->DIRCLR = USB_RX_bm;	 			// clr RX pin as input
    6f74:	e0 91 eb 21 	lds	r30, 0x21EB
    6f78:	f0 91 ec 21 	lds	r31, 0x21EC
    6f7c:	84 e0       	ldi	r24, 0x04	; 4
    6f7e:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_TX_bm; 			// set TX pin as output
    6f80:	e0 91 eb 21 	lds	r30, 0x21EB
    6f84:	f0 91 ec 21 	lds	r31, 0x21EC
    6f88:	88 e0       	ldi	r24, 0x08	; 8
    6f8a:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_TX_bm;				// set TX HI as initial state
    6f8c:	e0 91 eb 21 	lds	r30, 0x21EB
    6f90:	f0 91 ec 21 	lds	r31, 0x21EC
    6f94:	88 e0       	ldi	r24, 0x08	; 8
    6f96:	85 83       	std	Z+5, r24	; 0x05
	f.port->DIRCLR = USB_CTS_bm; 			// set CTS pin as input
    6f98:	e0 91 eb 21 	lds	r30, 0x21EB
    6f9c:	f0 91 ec 21 	lds	r31, 0x21EC
    6fa0:	81 e0       	ldi	r24, 0x01	; 1
    6fa2:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_RTS_bm; 			// set RTS pin as output
    6fa4:	e0 91 eb 21 	lds	r30, 0x21EB
    6fa8:	f0 91 ec 21 	lds	r31, 0x21EC
    6fac:	82 e0       	ldi	r24, 0x02	; 2
    6fae:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
    6fb0:	e0 91 eb 21 	lds	r30, 0x21EB
    6fb4:	f0 91 ec 21 	lds	r31, 0x21EC
    6fb8:	82 e0       	ldi	r24, 0x02	; 2
    6fba:	85 83       	std	Z+5, r24	; 0x05
//	f.port->OUTCLR = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
}
    6fbc:	29 96       	adiw	r28, 0x09	; 9
    6fbe:	cd bf       	out	0x3d, r28	; 61
    6fc0:	de bf       	out	0x3e, r29	; 62
    6fc2:	cf 91       	pop	r28
    6fc4:	df 91       	pop	r29
    6fc6:	08 95       	ret

00006fc8 <xio_usb_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_usb_control(const uint16_t control, const int16_t arg)
{
    6fc8:	df 93       	push	r29
    6fca:	cf 93       	push	r28
    6fcc:	cd b7       	in	r28, 0x3d	; 61
    6fce:	de b7       	in	r29, 0x3e	; 62
    6fd0:	2a 97       	sbiw	r28, 0x0a	; 10
    6fd2:	cd bf       	out	0x3d, r28	; 61
    6fd4:	de bf       	out	0x3e, r29	; 62
    6fd6:	8f 83       	std	Y+7, r24	; 0x07
    6fd8:	98 87       	std	Y+8, r25	; 0x08
    6fda:	69 87       	std	Y+9, r22	; 0x09
    6fdc:	7a 87       	std	Y+10, r23	; 0x0a
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    6fde:	8f 81       	ldd	r24, Y+7	; 0x07
    6fe0:	98 85       	ldd	r25, Y+8	; 0x08
    6fe2:	8f 70       	andi	r24, 0x0F	; 15
    6fe4:	90 70       	andi	r25, 0x00	; 0
    6fe6:	00 97       	sbiw	r24, 0x00	; 0
    6fe8:	39 f1       	breq	.+78     	; 0x7038 <xio_usb_control+0x70>
		f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    6fea:	a0 91 e9 21 	lds	r26, 0x21E9
    6fee:	b0 91 ea 21 	lds	r27, 0x21EA
    6ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    6ff4:	98 85       	ldd	r25, Y+8	; 0x08
    6ff6:	8f 70       	andi	r24, 0x0F	; 15
    6ff8:	90 70       	andi	r25, 0x00	; 0
    6ffa:	8c 5d       	subi	r24, 0xDC	; 220
    6ffc:	98 4f       	sbci	r25, 0xF8	; 248
    6ffe:	8d 83       	std	Y+5, r24	; 0x05
    7000:	9e 83       	std	Y+6, r25	; 0x06
    7002:	ed 81       	ldd	r30, Y+5	; 0x05
    7004:	fe 81       	ldd	r31, Y+6	; 0x06
    7006:	84 91       	lpm	r24, Z+
    7008:	8c 83       	std	Y+4, r24	; 0x04
    700a:	8c 81       	ldd	r24, Y+4	; 0x04
    700c:	16 96       	adiw	r26, 0x06	; 6
    700e:	8c 93       	st	X, r24
		f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    7010:	a0 91 e9 21 	lds	r26, 0x21E9
    7014:	b0 91 ea 21 	lds	r27, 0x21EA
    7018:	8f 81       	ldd	r24, Y+7	; 0x07
    701a:	98 85       	ldd	r25, Y+8	; 0x08
    701c:	8f 70       	andi	r24, 0x0F	; 15
    701e:	90 70       	andi	r25, 0x00	; 0
    7020:	81 5d       	subi	r24, 0xD1	; 209
    7022:	98 4f       	sbci	r25, 0xF8	; 248
    7024:	8a 83       	std	Y+2, r24	; 0x02
    7026:	9b 83       	std	Y+3, r25	; 0x03
    7028:	ea 81       	ldd	r30, Y+2	; 0x02
    702a:	fb 81       	ldd	r31, Y+3	; 0x03
    702c:	84 91       	lpm	r24, Z+
    702e:	89 83       	std	Y+1, r24	; 0x01
    7030:	89 81       	ldd	r24, Y+1	; 0x01
    7032:	17 96       	adiw	r26, 0x07	; 7
    7034:	8c 93       	st	X, r24
    7036:	17 97       	sbiw	r26, 0x07	; 7
	}
	if (control & XIO_BLOCK) {
    7038:	8f 81       	ldd	r24, Y+7	; 0x07
    703a:	98 85       	ldd	r25, Y+8	; 0x08
    703c:	80 74       	andi	r24, 0x40	; 64
    703e:	90 70       	andi	r25, 0x00	; 0
    7040:	00 97       	sbiw	r24, 0x00	; 0
    7042:	49 f0       	breq	.+18     	; 0x7056 <xio_usb_control+0x8e>
		f.flags |= XIO_FLAG_BLOCK_bm;
    7044:	80 91 b1 21 	lds	r24, 0x21B1
    7048:	90 91 b2 21 	lds	r25, 0x21B2
    704c:	84 60       	ori	r24, 0x04	; 4
    704e:	80 93 b1 21 	sts	0x21B1, r24
    7052:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOBLOCK) {
    7056:	8f 81       	ldd	r24, Y+7	; 0x07
    7058:	98 85       	ldd	r25, Y+8	; 0x08
    705a:	80 78       	andi	r24, 0x80	; 128
    705c:	90 70       	andi	r25, 0x00	; 0
    705e:	00 97       	sbiw	r24, 0x00	; 0
    7060:	49 f0       	breq	.+18     	; 0x7074 <xio_usb_control+0xac>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    7062:	80 91 b1 21 	lds	r24, 0x21B1
    7066:	90 91 b2 21 	lds	r25, 0x21B2
    706a:	8b 7f       	andi	r24, 0xFB	; 251
    706c:	80 93 b1 21 	sts	0x21B1, r24
    7070:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_ECHO) {
    7074:	8f 81       	ldd	r24, Y+7	; 0x07
    7076:	98 85       	ldd	r25, Y+8	; 0x08
    7078:	80 70       	andi	r24, 0x00	; 0
    707a:	91 70       	andi	r25, 0x01	; 1
    707c:	00 97       	sbiw	r24, 0x00	; 0
    707e:	49 f0       	breq	.+18     	; 0x7092 <xio_usb_control+0xca>
		f.flags |= XIO_FLAG_ECHO_bm;
    7080:	80 91 b1 21 	lds	r24, 0x21B1
    7084:	90 91 b2 21 	lds	r25, 0x21B2
    7088:	80 61       	ori	r24, 0x10	; 16
    708a:	80 93 b1 21 	sts	0x21B1, r24
    708e:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOECHO) {
    7092:	8f 81       	ldd	r24, Y+7	; 0x07
    7094:	98 85       	ldd	r25, Y+8	; 0x08
    7096:	80 70       	andi	r24, 0x00	; 0
    7098:	92 70       	andi	r25, 0x02	; 2
    709a:	00 97       	sbiw	r24, 0x00	; 0
    709c:	49 f0       	breq	.+18     	; 0x70b0 <xio_usb_control+0xe8>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    709e:	80 91 b1 21 	lds	r24, 0x21B1
    70a2:	90 91 b2 21 	lds	r25, 0x21B2
    70a6:	8f 7e       	andi	r24, 0xEF	; 239
    70a8:	80 93 b1 21 	sts	0x21B1, r24
    70ac:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_CRLF) {
    70b0:	8f 81       	ldd	r24, Y+7	; 0x07
    70b2:	98 85       	ldd	r25, Y+8	; 0x08
    70b4:	80 70       	andi	r24, 0x00	; 0
    70b6:	94 70       	andi	r25, 0x04	; 4
    70b8:	00 97       	sbiw	r24, 0x00	; 0
    70ba:	49 f0       	breq	.+18     	; 0x70ce <xio_usb_control+0x106>
		f.flags |= XIO_FLAG_CRLF_bm;
    70bc:	80 91 b1 21 	lds	r24, 0x21B1
    70c0:	90 91 b2 21 	lds	r25, 0x21B2
    70c4:	80 62       	ori	r24, 0x20	; 32
    70c6:	80 93 b1 21 	sts	0x21B1, r24
    70ca:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOCRLF) {
    70ce:	8f 81       	ldd	r24, Y+7	; 0x07
    70d0:	98 85       	ldd	r25, Y+8	; 0x08
    70d2:	80 70       	andi	r24, 0x00	; 0
    70d4:	98 70       	andi	r25, 0x08	; 8
    70d6:	00 97       	sbiw	r24, 0x00	; 0
    70d8:	49 f0       	breq	.+18     	; 0x70ec <xio_usb_control+0x124>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    70da:	80 91 b1 21 	lds	r24, 0x21B1
    70de:	90 91 b2 21 	lds	r25, 0x21B2
    70e2:	8f 7d       	andi	r24, 0xDF	; 223
    70e4:	80 93 b1 21 	sts	0x21B1, r24
    70e8:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_LINEMODE) {
    70ec:	8f 81       	ldd	r24, Y+7	; 0x07
    70ee:	98 85       	ldd	r25, Y+8	; 0x08
    70f0:	80 70       	andi	r24, 0x00	; 0
    70f2:	90 71       	andi	r25, 0x10	; 16
    70f4:	00 97       	sbiw	r24, 0x00	; 0
    70f6:	49 f0       	breq	.+18     	; 0x710a <xio_usb_control+0x142>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    70f8:	80 91 b1 21 	lds	r24, 0x21B1
    70fc:	90 91 b2 21 	lds	r25, 0x21B2
    7100:	80 64       	ori	r24, 0x40	; 64
    7102:	80 93 b1 21 	sts	0x21B1, r24
    7106:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOLINEMODE) {
    710a:	8f 81       	ldd	r24, Y+7	; 0x07
    710c:	98 85       	ldd	r25, Y+8	; 0x08
    710e:	80 70       	andi	r24, 0x00	; 0
    7110:	90 72       	andi	r25, 0x20	; 32
    7112:	00 97       	sbiw	r24, 0x00	; 0
    7114:	49 f0       	breq	.+18     	; 0x7128 <xio_usb_control+0x160>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    7116:	80 91 b1 21 	lds	r24, 0x21B1
    711a:	90 91 b2 21 	lds	r25, 0x21B2
    711e:	8f 7b       	andi	r24, 0xBF	; 191
    7120:	80 93 b1 21 	sts	0x21B1, r24
    7124:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_SEMICOLONS) {
    7128:	8f 81       	ldd	r24, Y+7	; 0x07
    712a:	98 85       	ldd	r25, Y+8	; 0x08
    712c:	80 70       	andi	r24, 0x00	; 0
    712e:	90 74       	andi	r25, 0x40	; 64
    7130:	00 97       	sbiw	r24, 0x00	; 0
    7132:	49 f0       	breq	.+18     	; 0x7146 <xio_usb_control+0x17e>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    7134:	80 91 b1 21 	lds	r24, 0x21B1
    7138:	90 91 b2 21 	lds	r25, 0x21B2
    713c:	80 68       	ori	r24, 0x80	; 128
    713e:	80 93 b1 21 	sts	0x21B1, r24
    7142:	90 93 b2 21 	sts	0x21B2, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    7146:	8f 81       	ldd	r24, Y+7	; 0x07
    7148:	98 85       	ldd	r25, Y+8	; 0x08
    714a:	99 23       	and	r25, r25
    714c:	4c f4       	brge	.+18     	; 0x7160 <xio_usb_control+0x198>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    714e:	80 91 b1 21 	lds	r24, 0x21B1
    7152:	90 91 b2 21 	lds	r25, 0x21B2
    7156:	8f 77       	andi	r24, 0x7F	; 127
    7158:	80 93 b1 21 	sts	0x21B1, r24
    715c:	90 93 b2 21 	sts	0x21B2, r25
	}
	return (0);
    7160:	80 e0       	ldi	r24, 0x00	; 0
}
    7162:	2a 96       	adiw	r28, 0x0a	; 10
    7164:	cd bf       	out	0x3d, r28	; 61
    7166:	de bf       	out	0x3e, r29	; 62
    7168:	cf 91       	pop	r28
    716a:	df 91       	pop	r29
    716c:	08 95       	ret

0000716e <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular buffers work
 */

ISR(USB_RX_ISR_vect)	//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    716e:	1f 92       	push	r1
    7170:	0f 92       	push	r0
    7172:	0f b6       	in	r0, 0x3f	; 63
    7174:	0f 92       	push	r0
    7176:	00 90 3b 00 	lds	r0, 0x003B
    717a:	0f 92       	push	r0
    717c:	11 24       	eor	r1, r1
    717e:	2f 93       	push	r18
    7180:	3f 93       	push	r19
    7182:	4f 93       	push	r20
    7184:	5f 93       	push	r21
    7186:	6f 93       	push	r22
    7188:	7f 93       	push	r23
    718a:	8f 93       	push	r24
    718c:	9f 93       	push	r25
    718e:	af 93       	push	r26
    7190:	bf 93       	push	r27
    7192:	ef 93       	push	r30
    7194:	ff 93       	push	r31
    7196:	df 93       	push	r29
    7198:	cf 93       	push	r28
    719a:	0f 92       	push	r0
    719c:	cd b7       	in	r28, 0x3d	; 61
    719e:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = f.usart->DATA;					// can only read DATA once
    71a0:	e0 91 e9 21 	lds	r30, 0x21E9
    71a4:	f0 91 ea 21 	lds	r31, 0x21EA
    71a8:	80 81       	ld	r24, Z
    71aa:	89 83       	std	Y+1, r24	; 0x01

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    71ac:	89 81       	ldd	r24, Y+1	; 0x01
    71ae:	83 30       	cpi	r24, 0x03	; 3
    71b0:	31 f4       	brne	.+12     	; 0x71be <__vector_25+0x50>
		f.sig = XIO_SIG_KILL;					// set signal value
    71b2:	84 e0       	ldi	r24, 0x04	; 4
    71b4:	80 93 b3 21 	sts	0x21B3, r24
		signal_etx();							// call app-specific signal handler
    71b8:	0e 94 4a 50 	call	0xa094	; 0xa094 <signal_etx>
    71bc:	28 c0       	rjmp	.+80     	; 0x720e <__vector_25+0xa0>
		return;
	}

	// normal character path
	if ((--f.rx_buf_head) == 0) { 				// advance buffer head with wrap
    71be:	80 91 ba 21 	lds	r24, 0x21BA
    71c2:	81 50       	subi	r24, 0x01	; 1
    71c4:	80 93 ba 21 	sts	0x21BA, r24
    71c8:	80 91 ba 21 	lds	r24, 0x21BA
    71cc:	88 23       	and	r24, r24
    71ce:	19 f4       	brne	.+6      	; 0x71d6 <__vector_25+0x68>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    71d0:	88 e1       	ldi	r24, 0x18	; 24
    71d2:	80 93 ba 21 	sts	0x21BA, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    71d6:	90 91 ba 21 	lds	r25, 0x21BA
    71da:	80 91 b9 21 	lds	r24, 0x21B9
    71de:	98 17       	cp	r25, r24
    71e0:	51 f0       	breq	.+20     	; 0x71f6 <__vector_25+0x88>
		f.rx_buf[f.rx_buf_head] = c;
    71e2:	80 91 ba 21 	lds	r24, 0x21BA
    71e6:	88 2f       	mov	r24, r24
    71e8:	90 e0       	ldi	r25, 0x00	; 0
    71ea:	fc 01       	movw	r30, r24
    71ec:	e2 54       	subi	r30, 0x42	; 66
    71ee:	fe 4d       	sbci	r31, 0xDE	; 222
    71f0:	89 81       	ldd	r24, Y+1	; 0x01
    71f2:	80 83       	st	Z, r24
    71f4:	0c c0       	rjmp	.+24     	; 0x720e <__vector_25+0xa0>
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    71f6:	80 91 ba 21 	lds	r24, 0x21BA
    71fa:	8f 5f       	subi	r24, 0xFF	; 255
    71fc:	80 93 ba 21 	sts	0x21BA, r24
    7200:	80 91 ba 21 	lds	r24, 0x21BA
    7204:	89 31       	cpi	r24, 0x19	; 25
    7206:	18 f0       	brcs	.+6      	; 0x720e <__vector_25+0xa0>
		f.rx_buf_head = 1;
    7208:	81 e0       	ldi	r24, 0x01	; 1
    720a:	80 93 ba 21 	sts	0x21BA, r24
	}
	// activate flow control here or before it gets to this level
}
    720e:	0f 90       	pop	r0
    7210:	cf 91       	pop	r28
    7212:	df 91       	pop	r29
    7214:	ff 91       	pop	r31
    7216:	ef 91       	pop	r30
    7218:	bf 91       	pop	r27
    721a:	af 91       	pop	r26
    721c:	9f 91       	pop	r25
    721e:	8f 91       	pop	r24
    7220:	7f 91       	pop	r23
    7222:	6f 91       	pop	r22
    7224:	5f 91       	pop	r21
    7226:	4f 91       	pop	r20
    7228:	3f 91       	pop	r19
    722a:	2f 91       	pop	r18
    722c:	0f 90       	pop	r0
    722e:	00 92 3b 00 	sts	0x003B, r0
    7232:	0f 90       	pop	r0
    7234:	0f be       	out	0x3f, r0	; 63
    7236:	0f 90       	pop	r0
    7238:	1f 90       	pop	r1
    723a:	18 95       	reti

0000723c <xio_usb_queue_RX_char>:
/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_usb_queue_RX_char(const char c)
{
    723c:	df 93       	push	r29
    723e:	cf 93       	push	r28
    7240:	0f 92       	push	r0
    7242:	cd b7       	in	r28, 0x3d	; 61
    7244:	de b7       	in	r29, 0x3e	; 62
    7246:	89 83       	std	Y+1, r24	; 0x01
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    7248:	89 81       	ldd	r24, Y+1	; 0x01
    724a:	83 30       	cpi	r24, 0x03	; 3
    724c:	31 f4       	brne	.+12     	; 0x725a <xio_usb_queue_RX_char+0x1e>
		f.sig = XIO_SIG_KILL;					// set signal value
    724e:	84 e0       	ldi	r24, 0x04	; 4
    7250:	80 93 b3 21 	sts	0x21B3, r24
		signal_etx();							// call app-specific signal handler
    7254:	0e 94 4a 50 	call	0xa094	; 0xa094 <signal_etx>
    7258:	28 c0       	rjmp	.+80     	; 0x72aa <xio_usb_queue_RX_char+0x6e>
		return;
	}

	// normal path
	if ((--f.rx_buf_head) == 0) { 				// wrap condition
    725a:	80 91 ba 21 	lds	r24, 0x21BA
    725e:	81 50       	subi	r24, 0x01	; 1
    7260:	80 93 ba 21 	sts	0x21BA, r24
    7264:	80 91 ba 21 	lds	r24, 0x21BA
    7268:	88 23       	and	r24, r24
    726a:	19 f4       	brne	.+6      	; 0x7272 <xio_usb_queue_RX_char+0x36>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    726c:	88 e1       	ldi	r24, 0x18	; 24
    726e:	80 93 ba 21 	sts	0x21BA, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    7272:	90 91 ba 21 	lds	r25, 0x21BA
    7276:	80 91 b9 21 	lds	r24, 0x21B9
    727a:	98 17       	cp	r25, r24
    727c:	51 f0       	breq	.+20     	; 0x7292 <xio_usb_queue_RX_char+0x56>
		f.rx_buf[f.rx_buf_head] = c;			// FAKE INPUT DATA
    727e:	80 91 ba 21 	lds	r24, 0x21BA
    7282:	88 2f       	mov	r24, r24
    7284:	90 e0       	ldi	r25, 0x00	; 0
    7286:	fc 01       	movw	r30, r24
    7288:	e2 54       	subi	r30, 0x42	; 66
    728a:	fe 4d       	sbci	r31, 0xDE	; 222
    728c:	89 81       	ldd	r24, Y+1	; 0x01
    728e:	80 83       	st	Z, r24
    7290:	0c c0       	rjmp	.+24     	; 0x72aa <xio_usb_queue_RX_char+0x6e>
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    7292:	80 91 ba 21 	lds	r24, 0x21BA
    7296:	8f 5f       	subi	r24, 0xFF	; 255
    7298:	80 93 ba 21 	sts	0x21BA, r24
    729c:	80 91 ba 21 	lds	r24, 0x21BA
    72a0:	89 31       	cpi	r24, 0x19	; 25
    72a2:	18 f0       	brcs	.+6      	; 0x72aa <xio_usb_queue_RX_char+0x6e>
		f.rx_buf_head = 1;
    72a4:	81 e0       	ldi	r24, 0x01	; 1
    72a6:	80 93 ba 21 	sts	0x21BA, r24
	}
}
    72aa:	0f 90       	pop	r0
    72ac:	cf 91       	pop	r28
    72ae:	df 91       	pop	r29
    72b0:	08 95       	ret

000072b2 <xio_usb_queue_RX_string>:
/*
 * xio_usb_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_usb_queue_RX_string(char *buf)
{
    72b2:	df 93       	push	r29
    72b4:	cf 93       	push	r28
    72b6:	cd b7       	in	r28, 0x3d	; 61
    72b8:	de b7       	in	r29, 0x3e	; 62
    72ba:	25 97       	sbiw	r28, 0x05	; 5
    72bc:	cd bf       	out	0x3d, r28	; 61
    72be:	de bf       	out	0x3e, r29	; 62
    72c0:	8b 83       	std	Y+3, r24	; 0x03
    72c2:	9c 83       	std	Y+4, r25	; 0x04
	char c;
	uint8_t i=0;
    72c4:	19 82       	std	Y+1, r1	; 0x01
    72c6:	03 c0       	rjmp	.+6      	; 0x72ce <xio_usb_queue_RX_string+0x1c>

	while ((c = buf[i++]) != NUL) {
		xio_usb_queue_RX_char(c);
    72c8:	8a 81       	ldd	r24, Y+2	; 0x02
    72ca:	0e 94 1e 39 	call	0x723c	; 0x723c <xio_usb_queue_RX_char>
void xio_usb_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    72ce:	89 81       	ldd	r24, Y+1	; 0x01
    72d0:	28 2f       	mov	r18, r24
    72d2:	30 e0       	ldi	r19, 0x00	; 0
    72d4:	8b 81       	ldd	r24, Y+3	; 0x03
    72d6:	9c 81       	ldd	r25, Y+4	; 0x04
    72d8:	fc 01       	movw	r30, r24
    72da:	e2 0f       	add	r30, r18
    72dc:	f3 1f       	adc	r31, r19
    72de:	80 81       	ld	r24, Z
    72e0:	8a 83       	std	Y+2, r24	; 0x02
    72e2:	8a 81       	ldd	r24, Y+2	; 0x02
    72e4:	8d 83       	std	Y+5, r24	; 0x05
    72e6:	8d 81       	ldd	r24, Y+5	; 0x05
    72e8:	88 23       	and	r24, r24
    72ea:	11 f0       	breq	.+4      	; 0x72f0 <xio_usb_queue_RX_string+0x3e>
    72ec:	81 e0       	ldi	r24, 0x01	; 1
    72ee:	8d 83       	std	Y+5, r24	; 0x05
    72f0:	8d 81       	ldd	r24, Y+5	; 0x05
    72f2:	99 81       	ldd	r25, Y+1	; 0x01
    72f4:	9f 5f       	subi	r25, 0xFF	; 255
    72f6:	99 83       	std	Y+1, r25	; 0x01
    72f8:	88 23       	and	r24, r24
    72fa:	31 f7       	brne	.-52     	; 0x72c8 <xio_usb_queue_RX_string+0x16>
		xio_usb_queue_RX_char(c);
	}
}
    72fc:	25 96       	adiw	r28, 0x05	; 5
    72fe:	cd bf       	out	0x3d, r28	; 61
    7300:	de bf       	out	0x3e, r29	; 62
    7302:	cf 91       	pop	r28
    7304:	df 91       	pop	r29
    7306:	08 95       	ret

00007308 <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)		//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    7308:	1f 92       	push	r1
    730a:	0f 92       	push	r0
    730c:	0f b6       	in	r0, 0x3f	; 63
    730e:	0f 92       	push	r0
    7310:	00 90 3b 00 	lds	r0, 0x003B
    7314:	0f 92       	push	r0
    7316:	11 24       	eor	r1, r1
    7318:	8f 93       	push	r24
    731a:	9f 93       	push	r25
    731c:	af 93       	push	r26
    731e:	bf 93       	push	r27
    7320:	ef 93       	push	r30
    7322:	ff 93       	push	r31
    7324:	df 93       	push	r29
    7326:	cf 93       	push	r28
    7328:	cd b7       	in	r28, 0x3d	; 61
    732a:	de b7       	in	r29, 0x3e	; 62
	if (f.tx_buf_head == f.tx_buf_tail) {			// buffer empty - disable ints
    732c:	90 91 bc 21 	lds	r25, 0x21BC
    7330:	80 91 bb 21 	lds	r24, 0x21BB
    7334:	98 17       	cp	r25, r24
    7336:	39 f4       	brne	.+14     	; 0x7346 <__vector_26+0x3e>
		f.usart->CTRLA = USARTC0_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    7338:	e0 91 e9 21 	lds	r30, 0x21E9
    733c:	f0 91 ea 21 	lds	r31, 0x21EA
    7340:	80 e2       	ldi	r24, 0x20	; 32
    7342:	83 83       	std	Z+3, r24	; 0x03
    7344:	21 c0       	rjmp	.+66     	; 0x7388 <__vector_26+0x80>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(f.flags)) {
    7346:	80 91 b1 21 	lds	r24, 0x21B1
    734a:	90 91 b2 21 	lds	r25, 0x21B2
    734e:	80 70       	andi	r24, 0x00	; 0
    7350:	98 70       	andi	r25, 0x08	; 8
    7352:	00 97       	sbiw	r24, 0x00	; 0
    7354:	c9 f4       	brne	.+50     	; 0x7388 <__vector_26+0x80>
		if (--(f.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    7356:	80 91 bb 21 	lds	r24, 0x21BB
    735a:	81 50       	subi	r24, 0x01	; 1
    735c:	80 93 bb 21 	sts	0x21BB, r24
    7360:	80 91 bb 21 	lds	r24, 0x21BB
    7364:	88 23       	and	r24, r24
    7366:	19 f4       	brne	.+6      	; 0x736e <__vector_26+0x66>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    7368:	81 e1       	ldi	r24, 0x11	; 17
    736a:	80 93 bb 21 	sts	0x21BB, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];	// write char to TX DATA register
    736e:	a0 91 e9 21 	lds	r26, 0x21E9
    7372:	b0 91 ea 21 	lds	r27, 0x21EA
    7376:	80 91 bb 21 	lds	r24, 0x21BB
    737a:	88 2f       	mov	r24, r24
    737c:	90 e0       	ldi	r25, 0x00	; 0
    737e:	fc 01       	movw	r30, r24
    7380:	e9 52       	subi	r30, 0x29	; 41
    7382:	fe 4d       	sbci	r31, 0xDE	; 222
    7384:	80 81       	ld	r24, Z
    7386:	8c 93       	st	X, r24
	}
}
    7388:	cf 91       	pop	r28
    738a:	df 91       	pop	r29
    738c:	ff 91       	pop	r31
    738e:	ef 91       	pop	r30
    7390:	bf 91       	pop	r27
    7392:	af 91       	pop	r26
    7394:	9f 91       	pop	r25
    7396:	8f 91       	pop	r24
    7398:	0f 90       	pop	r0
    739a:	00 92 3b 00 	sts	0x003B, r0
    739e:	0f 90       	pop	r0
    73a0:	0f be       	out	0x3f, r0	; 63
    73a2:	0f 90       	pop	r0
    73a4:	1f 90       	pop	r1
    73a6:	18 95       	reti

000073a8 <xio_usb_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
    73a8:	df 93       	push	r29
    73aa:	cf 93       	push	r28
    73ac:	cd b7       	in	r28, 0x3d	; 61
    73ae:	de b7       	in	r29, 0x3e	; 62
    73b0:	25 97       	sbiw	r28, 0x05	; 5
    73b2:	cd bf       	out	0x3d, r28	; 61
    73b4:	de bf       	out	0x3e, r29	; 62
    73b6:	89 83       	std	Y+1, r24	; 0x01
    73b8:	6a 83       	std	Y+2, r22	; 0x02
    73ba:	7b 83       	std	Y+3, r23	; 0x03
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
    73bc:	80 91 bc 21 	lds	r24, 0x21BC
    73c0:	81 50       	subi	r24, 0x01	; 1
    73c2:	80 93 bd 21 	sts	0x21BD, r24
    73c6:	80 91 bd 21 	lds	r24, 0x21BD
    73ca:	88 23       	and	r24, r24
    73cc:	21 f5       	brne	.+72     	; 0x7416 <xio_usb_putc+0x6e>
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
    73ce:	81 e1       	ldi	r24, 0x11	; 17
    73d0:	80 93 bd 21 	sts	0x21BD, r24
    73d4:	20 c0       	rjmp	.+64     	; 0x7416 <xio_usb_putc+0x6e>
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    73d6:	80 91 b1 21 	lds	r24, 0x21B1
    73da:	90 91 b2 21 	lds	r25, 0x21B2
    73de:	84 70       	andi	r24, 0x04	; 4
    73e0:	90 70       	andi	r25, 0x00	; 0
    73e2:	00 97       	sbiw	r24, 0x00	; 0
    73e4:	81 f0       	breq	.+32     	; 0x7406 <xio_usb_putc+0x5e>
			sleep_mode();
    73e6:	a8 e4       	ldi	r26, 0x48	; 72
    73e8:	b0 e0       	ldi	r27, 0x00	; 0
    73ea:	e8 e4       	ldi	r30, 0x48	; 72
    73ec:	f0 e0       	ldi	r31, 0x00	; 0
    73ee:	80 81       	ld	r24, Z
    73f0:	81 60       	ori	r24, 0x01	; 1
    73f2:	8c 93       	st	X, r24
    73f4:	88 95       	sleep
    73f6:	a8 e4       	ldi	r26, 0x48	; 72
    73f8:	b0 e0       	ldi	r27, 0x00	; 0
    73fa:	e8 e4       	ldi	r30, 0x48	; 72
    73fc:	f0 e0       	ldi	r31, 0x00	; 0
    73fe:	80 81       	ld	r24, Z
    7400:	8e 7f       	andi	r24, 0xFE	; 254
    7402:	8c 93       	st	X, r24
    7404:	08 c0       	rjmp	.+16     	; 0x7416 <xio_usb_putc+0x6e>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    7406:	83 e0       	ldi	r24, 0x03	; 3
    7408:	80 93 b3 21 	sts	0x21B3, r24
			return(_FDEV_ERR);
    740c:	8f ef       	ldi	r24, 0xFF	; 255
    740e:	9f ef       	ldi	r25, 0xFF	; 255
    7410:	8c 83       	std	Y+4, r24	; 0x04
    7412:	9d 83       	std	Y+5, r25	; 0x05
    7414:	78 c0       	rjmp	.+240    	; 0x7506 <xio_usb_putc+0x15e>
int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
    7416:	90 91 bd 21 	lds	r25, 0x21BD
    741a:	80 91 bb 21 	lds	r24, 0x21BB
    741e:	98 17       	cp	r25, r24
    7420:	d1 f2       	breq	.-76     	; 0x73d6 <xio_usb_putc+0x2e>
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
    7422:	80 91 bd 21 	lds	r24, 0x21BD
    7426:	80 93 bc 21 	sts	0x21BC, r24
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer
    742a:	80 91 bc 21 	lds	r24, 0x21BC
    742e:	88 2f       	mov	r24, r24
    7430:	90 e0       	ldi	r25, 0x00	; 0
    7432:	fc 01       	movw	r30, r24
    7434:	e9 52       	subi	r30, 0x29	; 41
    7436:	fe 4d       	sbci	r31, 0xDE	; 222
    7438:	89 81       	ldd	r24, Y+1	; 0x01
    743a:	80 83       	st	Z, r24

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    743c:	80 91 b1 21 	lds	r24, 0x21B1
    7440:	90 91 b2 21 	lds	r25, 0x21B2
    7444:	80 72       	andi	r24, 0x20	; 32
    7446:	90 70       	andi	r25, 0x00	; 0
    7448:	00 97       	sbiw	r24, 0x00	; 0
    744a:	61 f0       	breq	.+24     	; 0x7464 <xio_usb_putc+0xbc>
    744c:	89 81       	ldd	r24, Y+1	; 0x01
    744e:	8a 30       	cpi	r24, 0x0A	; 10
    7450:	49 f4       	brne	.+18     	; 0x7464 <xio_usb_putc+0xbc>
		return xio_usb_putc('\r', stream);		// recursion.
    7452:	2a 81       	ldd	r18, Y+2	; 0x02
    7454:	3b 81       	ldd	r19, Y+3	; 0x03
    7456:	8d e0       	ldi	r24, 0x0D	; 13
    7458:	b9 01       	movw	r22, r18
    745a:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <xio_usb_putc>
    745e:	8c 83       	std	Y+4, r24	; 0x04
    7460:	9d 83       	std	Y+5, r25	; 0x05
    7462:	51 c0       	rjmp	.+162    	; 0x7506 <xio_usb_putc+0x15e>
	}

	// dequeue the buffer if DATA register is ready
	if (f.usart->STATUS & 0x20) {
    7464:	e0 91 e9 21 	lds	r30, 0x21E9
    7468:	f0 91 ea 21 	lds	r31, 0x21EA
    746c:	81 81       	ldd	r24, Z+1	; 0x01
    746e:	88 2f       	mov	r24, r24
    7470:	90 e0       	ldi	r25, 0x00	; 0
    7472:	80 72       	andi	r24, 0x20	; 32
    7474:	90 70       	andi	r25, 0x00	; 0
    7476:	00 97       	sbiw	r24, 0x00	; 0
    7478:	a1 f1       	breq	.+104    	; 0x74e2 <xio_usb_putc+0x13a>
		if (f.tx_buf_head == f.tx_buf_tail) {	// buf might be empty if IRQ got it
    747a:	90 91 bc 21 	lds	r25, 0x21BC
    747e:	80 91 bb 21 	lds	r24, 0x21BB
    7482:	98 17       	cp	r25, r24
    7484:	19 f4       	brne	.+6      	; 0x748c <xio_usb_putc+0xe4>
			return (0);
    7486:	1c 82       	std	Y+4, r1	; 0x04
    7488:	1d 82       	std	Y+5, r1	; 0x05
    748a:	3d c0       	rjmp	.+122    	; 0x7506 <xio_usb_putc+0x15e>
		}
		f.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    748c:	80 91 b1 21 	lds	r24, 0x21B1
    7490:	90 91 b2 21 	lds	r25, 0x21B2
    7494:	98 60       	ori	r25, 0x08	; 8
    7496:	80 93 b1 21 	sts	0x21B1, r24
    749a:	90 93 b2 21 	sts	0x21B2, r25
		if (--(f.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    749e:	80 91 bb 21 	lds	r24, 0x21BB
    74a2:	81 50       	subi	r24, 0x01	; 1
    74a4:	80 93 bb 21 	sts	0x21BB, r24
    74a8:	80 91 bb 21 	lds	r24, 0x21BB
    74ac:	88 23       	and	r24, r24
    74ae:	19 f4       	brne	.+6      	; 0x74b6 <xio_usb_putc+0x10e>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    74b0:	81 e1       	ldi	r24, 0x11	; 17
    74b2:	80 93 bb 21 	sts	0x21BB, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];// write char to TX DATA register
    74b6:	a0 91 e9 21 	lds	r26, 0x21E9
    74ba:	b0 91 ea 21 	lds	r27, 0x21EA
    74be:	80 91 bb 21 	lds	r24, 0x21BB
    74c2:	88 2f       	mov	r24, r24
    74c4:	90 e0       	ldi	r25, 0x00	; 0
    74c6:	fc 01       	movw	r30, r24
    74c8:	e9 52       	subi	r30, 0x29	; 41
    74ca:	fe 4d       	sbci	r31, 0xDE	; 222
    74cc:	80 81       	ld	r24, Z
    74ce:	8c 93       	st	X, r24
		f.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    74d0:	80 91 b1 21 	lds	r24, 0x21B1
    74d4:	90 91 b2 21 	lds	r25, 0x21B2
    74d8:	97 7f       	andi	r25, 0xF7	; 247
    74da:	80 93 b1 21 	sts	0x21B1, r24
    74de:	90 93 b2 21 	sts	0x21B2, r25
	}
	// enable interrupts regardless
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    74e2:	e0 91 e9 21 	lds	r30, 0x21E9
    74e6:	f0 91 ea 21 	lds	r31, 0x21EA
    74ea:	81 e2       	ldi	r24, 0x21	; 33
    74ec:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    74ee:	a0 ea       	ldi	r26, 0xA0	; 160
    74f0:	b0 e0       	ldi	r27, 0x00	; 0
    74f2:	e0 ea       	ldi	r30, 0xA0	; 160
    74f4:	f0 e0       	ldi	r31, 0x00	; 0
    74f6:	82 81       	ldd	r24, Z+2	; 0x02
    74f8:	81 60       	ori	r24, 0x01	; 1
    74fa:	12 96       	adiw	r26, 0x02	; 2
    74fc:	8c 93       	st	X, r24
    74fe:	12 97       	sbiw	r26, 0x02	; 2
	sei();										// enable global interrupts
    7500:	78 94       	sei

	return (0);	// 0 = OK
    7502:	1c 82       	std	Y+4, r1	; 0x04
    7504:	1d 82       	std	Y+5, r1	; 0x05
    7506:	8c 81       	ldd	r24, Y+4	; 0x04
    7508:	9d 81       	ldd	r25, Y+5	; 0x05
}
    750a:	25 96       	adiw	r28, 0x05	; 5
    750c:	cd bf       	out	0x3d, r28	; 61
    750e:	de bf       	out	0x3e, r29	; 62
    7510:	cf 91       	pop	r28
    7512:	df 91       	pop	r29
    7514:	08 95       	ret

00007516 <xio_usb_getc>:
 *		- special characters such as EOL and control chars are handled by the
 *		  character helper routines. See them for behaviors
 */

int xio_usb_getc(FILE *stream)
{
    7516:	df 93       	push	r29
    7518:	cf 93       	push	r28
    751a:	cd b7       	in	r28, 0x3d	; 61
    751c:	de b7       	in	r29, 0x3e	; 62
    751e:	28 97       	sbiw	r28, 0x08	; 8
    7520:	cd bf       	out	0x3d, r28	; 61
    7522:	de bf       	out	0x3e, r29	; 62
    7524:	8d 83       	std	Y+5, r24	; 0x05
    7526:	9e 83       	std	Y+6, r25	; 0x06
    7528:	20 c0       	rjmp	.+64     	; 0x756a <xio_usb_getc+0x54>
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(f.flags)) {
    752a:	80 91 b1 21 	lds	r24, 0x21B1
    752e:	90 91 b2 21 	lds	r25, 0x21B2
    7532:	84 70       	andi	r24, 0x04	; 4
    7534:	90 70       	andi	r25, 0x00	; 0
    7536:	00 97       	sbiw	r24, 0x00	; 0
    7538:	81 f0       	breq	.+32     	; 0x755a <xio_usb_getc+0x44>
			sleep_mode();
    753a:	a8 e4       	ldi	r26, 0x48	; 72
    753c:	b0 e0       	ldi	r27, 0x00	; 0
    753e:	e8 e4       	ldi	r30, 0x48	; 72
    7540:	f0 e0       	ldi	r31, 0x00	; 0
    7542:	80 81       	ld	r24, Z
    7544:	81 60       	ori	r24, 0x01	; 1
    7546:	8c 93       	st	X, r24
    7548:	88 95       	sleep
    754a:	a8 e4       	ldi	r26, 0x48	; 72
    754c:	b0 e0       	ldi	r27, 0x00	; 0
    754e:	e8 e4       	ldi	r30, 0x48	; 72
    7550:	f0 e0       	ldi	r31, 0x00	; 0
    7552:	80 81       	ld	r24, Z
    7554:	8e 7f       	andi	r24, 0xFE	; 254
    7556:	8c 93       	st	X, r24
    7558:	08 c0       	rjmp	.+16     	; 0x756a <xio_usb_getc+0x54>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    755a:	83 e0       	ldi	r24, 0x03	; 3
    755c:	80 93 b3 21 	sts	0x21B3, r24
			return(_FDEV_ERR);
    7560:	8f ef       	ldi	r24, 0xFF	; 255
    7562:	9f ef       	ldi	r25, 0xFF	; 255
    7564:	8f 83       	std	Y+7, r24	; 0x07
    7566:	98 87       	std	Y+8, r25	; 0x08
    7568:	36 c0       	rjmp	.+108    	; 0x75d6 <xio_usb_getc+0xc0>
 *		  character helper routines. See them for behaviors
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
    756a:	90 91 ba 21 	lds	r25, 0x21BA
    756e:	80 91 b9 21 	lds	r24, 0x21B9
    7572:	98 17       	cp	r25, r24
    7574:	d1 f2       	breq	.-76     	; 0x752a <xio_usb_getc+0x14>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    7576:	80 91 b9 21 	lds	r24, 0x21B9
    757a:	81 50       	subi	r24, 0x01	; 1
    757c:	80 93 b9 21 	sts	0x21B9, r24
    7580:	80 91 b9 21 	lds	r24, 0x21B9
    7584:	88 23       	and	r24, r24
    7586:	19 f4       	brne	.+6      	; 0x758e <xio_usb_getc+0x78>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    7588:	88 e1       	ldi	r24, 0x18	; 24
    758a:	80 93 b9 21 	sts	0x21B9, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    758e:	80 91 b9 21 	lds	r24, 0x21B9
    7592:	88 2f       	mov	r24, r24
    7594:	90 e0       	ldi	r25, 0x00	; 0
    7596:	fc 01       	movw	r30, r24
    7598:	e2 54       	subi	r30, 0x42	; 66
    759a:	fe 4d       	sbci	r31, 0xDE	; 222
    759c:	80 81       	ld	r24, Z
    759e:	8f 77       	andi	r24, 0x7F	; 127
    75a0:	80 93 b4 21 	sts	0x21B4, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[f.c])))());
    75a4:	80 91 b4 21 	lds	r24, 0x21B4
    75a8:	88 2f       	mov	r24, r24
    75aa:	90 e0       	ldi	r25, 0x00	; 0
    75ac:	88 0f       	add	r24, r24
    75ae:	99 1f       	adc	r25, r25
    75b0:	8a 59       	subi	r24, 0x9A	; 154
    75b2:	98 4f       	sbci	r25, 0xF8	; 248
    75b4:	8b 83       	std	Y+3, r24	; 0x03
    75b6:	9c 83       	std	Y+4, r25	; 0x04
    75b8:	8b 81       	ldd	r24, Y+3	; 0x03
    75ba:	9c 81       	ldd	r25, Y+4	; 0x04
    75bc:	fc 01       	movw	r30, r24
    75be:	85 91       	lpm	r24, Z+
    75c0:	94 91       	lpm	r25, Z+
    75c2:	89 83       	std	Y+1, r24	; 0x01
    75c4:	9a 83       	std	Y+2, r25	; 0x02
    75c6:	eb 83       	std	Y+3, r30	; 0x03
    75c8:	fc 83       	std	Y+4, r31	; 0x04
    75ca:	89 81       	ldd	r24, Y+1	; 0x01
    75cc:	9a 81       	ldd	r25, Y+2	; 0x02
    75ce:	fc 01       	movw	r30, r24
    75d0:	19 95       	eicall
    75d2:	8f 83       	std	Y+7, r24	; 0x07
    75d4:	98 87       	std	Y+8, r25	; 0x08
    75d6:	8f 81       	ldd	r24, Y+7	; 0x07
    75d8:	98 85       	ldd	r25, Y+8	; 0x08
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    75da:	28 96       	adiw	r28, 0x08	; 8
    75dc:	cd bf       	out	0x3d, r28	; 61
    75de:	de bf       	out	0x3e, r29	; 62
    75e0:	cf 91       	pop	r28
    75e2:	df 91       	pop	r29
    75e4:	08 95       	ret

000075e6 <_getc_char>:

/* xio_usb_getc helper routines */

static int _getc_char(void)
{
    75e6:	df 93       	push	r29
    75e8:	cf 93       	push	r28
    75ea:	cd b7       	in	r28, 0x3d	; 61
    75ec:	de b7       	in	r29, 0x3e	; 62
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    75ee:	80 91 b1 21 	lds	r24, 0x21B1
    75f2:	90 91 b2 21 	lds	r25, 0x21B2
    75f6:	80 71       	andi	r24, 0x10	; 16
    75f8:	90 70       	andi	r25, 0x00	; 0
    75fa:	00 97       	sbiw	r24, 0x00	; 0
    75fc:	49 f0       	breq	.+18     	; 0x7610 <_getc_char+0x2a>
    75fe:	80 91 b4 21 	lds	r24, 0x21B4
    7602:	20 91 64 25 	lds	r18, 0x2564
    7606:	30 91 65 25 	lds	r19, 0x2565
    760a:	b9 01       	movw	r22, r18
    760c:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <xio_usb_putc>
	return(f.c);
    7610:	80 91 b4 21 	lds	r24, 0x21B4
    7614:	88 2f       	mov	r24, r24
    7616:	90 e0       	ldi	r25, 0x00	; 0
}
    7618:	cf 91       	pop	r28
    761a:	df 91       	pop	r29
    761c:	08 95       	ret

0000761e <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
    761e:	df 93       	push	r29
    7620:	cf 93       	push	r28
    7622:	cd b7       	in	r28, 0x3d	; 61
    7624:	de b7       	in	r29, 0x3e	; 62
	if (LINEMODE(f.flags)) f.c = '\n';
    7626:	80 91 b1 21 	lds	r24, 0x21B1
    762a:	90 91 b2 21 	lds	r25, 0x21B2
    762e:	80 74       	andi	r24, 0x40	; 64
    7630:	90 70       	andi	r25, 0x00	; 0
    7632:	00 97       	sbiw	r24, 0x00	; 0
    7634:	19 f0       	breq	.+6      	; 0x763c <_getc_NEWLINE+0x1e>
    7636:	8a e0       	ldi	r24, 0x0A	; 10
    7638:	80 93 b4 21 	sts	0x21B4, r24
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    763c:	80 91 b1 21 	lds	r24, 0x21B1
    7640:	90 91 b2 21 	lds	r25, 0x21B2
    7644:	80 71       	andi	r24, 0x10	; 16
    7646:	90 70       	andi	r25, 0x00	; 0
    7648:	00 97       	sbiw	r24, 0x00	; 0
    764a:	49 f0       	breq	.+18     	; 0x765e <_getc_NEWLINE+0x40>
    764c:	80 91 b4 21 	lds	r24, 0x21B4
    7650:	20 91 64 25 	lds	r18, 0x2564
    7654:	30 91 65 25 	lds	r19, 0x2565
    7658:	b9 01       	movw	r22, r18
    765a:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <xio_usb_putc>
	return(f.c);
    765e:	80 91 b4 21 	lds	r24, 0x21B4
    7662:	88 2f       	mov	r24, r24
    7664:	90 e0       	ldi	r25, 0x00	; 0
}
    7666:	cf 91       	pop	r28
    7668:	df 91       	pop	r29
    766a:	08 95       	ret

0000766c <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
    766c:	df 93       	push	r29
    766e:	cf 93       	push	r28
    7670:	0f 92       	push	r0
    7672:	0f 92       	push	r0
    7674:	cd b7       	in	r28, 0x3d	; 61
    7676:	de b7       	in	r29, 0x3e	; 62
	if (SEMICOLONS(f.flags)) {
    7678:	80 91 b1 21 	lds	r24, 0x21B1
    767c:	90 91 b2 21 	lds	r25, 0x21B2
    7680:	80 78       	andi	r24, 0x80	; 128
    7682:	90 70       	andi	r25, 0x00	; 0
    7684:	00 97       	sbiw	r24, 0x00	; 0
    7686:	29 f0       	breq	.+10     	; 0x7692 <_getc_SEMICOLON+0x26>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    7688:	0e 94 0f 3b 	call	0x761e	; 0x761e <_getc_NEWLINE>
    768c:	89 83       	std	Y+1, r24	; 0x01
    768e:	9a 83       	std	Y+2, r25	; 0x02
    7690:	04 c0       	rjmp	.+8      	; 0x769a <_getc_SEMICOLON+0x2e>
	} 
	return (_getc_char());					// else treat as any other character
    7692:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <_getc_char>
    7696:	89 83       	std	Y+1, r24	; 0x01
    7698:	9a 83       	std	Y+2, r25	; 0x02
    769a:	89 81       	ldd	r24, Y+1	; 0x01
    769c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    769e:	0f 90       	pop	r0
    76a0:	0f 90       	pop	r0
    76a2:	cf 91       	pop	r28
    76a4:	df 91       	pop	r29
    76a6:	08 95       	ret

000076a8 <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
    76a8:	df 93       	push	r29
    76aa:	cf 93       	push	r28
    76ac:	cd b7       	in	r28, 0x3d	; 61
    76ae:	de b7       	in	r29, 0x3e	; 62
	f.sig = XIO_SIG_DELETE;
    76b0:	8a e0       	ldi	r24, 0x0A	; 10
    76b2:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
    76b6:	8f ef       	ldi	r24, 0xFF	; 255
    76b8:	9f ef       	ldi	r25, 0xFF	; 255
}
    76ba:	cf 91       	pop	r28
    76bc:	df 91       	pop	r29
    76be:	08 95       	ret

000076c0 <xio_usb_readln>:
 *
 *	Note: LINEMODE flag in device struct is ignored. It's ALWAYS LINEMODE here.
 */

int xio_usb_readln(char *buf, uint8_t len)
{
    76c0:	df 93       	push	r29
    76c2:	cf 93       	push	r28
    76c4:	cd b7       	in	r28, 0x3d	; 61
    76c6:	de b7       	in	r29, 0x3e	; 62
    76c8:	28 97       	sbiw	r28, 0x08	; 8
    76ca:	cd bf       	out	0x3d, r28	; 61
    76cc:	de bf       	out	0x3e, r29	; 62
    76ce:	8a 83       	std	Y+2, r24	; 0x02
    76d0:	9b 83       	std	Y+3, r25	; 0x03
    76d2:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t status = 0;
    76d4:	19 82       	std	Y+1, r1	; 0x01

	if (!IN_LINE(f.flags)) {					// first time thru initializations
    76d6:	80 91 b1 21 	lds	r24, 0x21B1
    76da:	90 91 b2 21 	lds	r25, 0x21B2
    76de:	80 70       	andi	r24, 0x00	; 0
    76e0:	90 74       	andi	r25, 0x40	; 64
    76e2:	00 97       	sbiw	r24, 0x00	; 0
    76e4:	b1 f4       	brne	.+44     	; 0x7712 <xio_usb_readln+0x52>
		f.i = 0;								// zero buffer
    76e6:	10 92 b5 21 	sts	0x21B5, r1
		f.len = len;							// save arg into struct 
    76ea:	8c 81       	ldd	r24, Y+4	; 0x04
    76ec:	80 93 b6 21 	sts	0x21B6, r24
		f.buf = buf;							// save arg into struct 
    76f0:	8a 81       	ldd	r24, Y+2	; 0x02
    76f2:	9b 81       	ldd	r25, Y+3	; 0x03
    76f4:	80 93 b7 21 	sts	0x21B7, r24
    76f8:	90 93 b8 21 	sts	0x21B8, r25
		f.sig = XIO_SIG_OK;						// reset signal register
    76fc:	10 92 b3 21 	sts	0x21B3, r1
		f.flags |= XIO_FLAG_IN_LINE_bm;			// yes, we are busy getting a line
    7700:	80 91 b1 21 	lds	r24, 0x21B1
    7704:	90 91 b2 21 	lds	r25, 0x21B2
    7708:	90 64       	ori	r25, 0x40	; 64
    770a:	80 93 b1 21 	sts	0x21B1, r24
    770e:	90 93 b2 21 	sts	0x21B2, r25
	}
	while (TRUE) { 
		switch (status = _xio_usb_readchar(buf, len)) {
    7712:	8a 81       	ldd	r24, Y+2	; 0x02
    7714:	9b 81       	ldd	r25, Y+3	; 0x03
    7716:	6c 81       	ldd	r22, Y+4	; 0x04
    7718:	0e 94 b9 3b 	call	0x7772	; 0x7772 <_xio_usb_readchar>
    771c:	89 83       	std	Y+1, r24	; 0x01
    771e:	89 81       	ldd	r24, Y+1	; 0x01
    7720:	28 2f       	mov	r18, r24
    7722:	30 e0       	ldi	r19, 0x00	; 0
    7724:	2f 83       	std	Y+7, r18	; 0x07
    7726:	38 87       	std	Y+8, r19	; 0x08
    7728:	8f 81       	ldd	r24, Y+7	; 0x07
    772a:	98 85       	ldd	r25, Y+8	; 0x08
    772c:	87 30       	cpi	r24, 0x07	; 7
    772e:	91 05       	cpc	r25, r1
    7730:	81 f0       	breq	.+32     	; 0x7752 <xio_usb_readln+0x92>
    7732:	2f 81       	ldd	r18, Y+7	; 0x07
    7734:	38 85       	ldd	r19, Y+8	; 0x08
    7736:	28 30       	cpi	r18, 0x08	; 8
    7738:	31 05       	cpc	r19, r1
    773a:	31 f0       	breq	.+12     	; 0x7748 <xio_usb_readln+0x88>
    773c:	8f 81       	ldd	r24, Y+7	; 0x07
    773e:	98 85       	ldd	r25, Y+8	; 0x08
    7740:	84 30       	cpi	r24, 0x04	; 4
    7742:	91 05       	cpc	r25, r1
    7744:	61 f0       	breq	.+24     	; 0x775e <xio_usb_readln+0x9e>
    7746:	e5 cf       	rjmp	.-54     	; 0x7712 <xio_usb_readln+0x52>
			case (TG_BUFFER_EMPTY): return (TG_EAGAIN); break;	// empty condition
    7748:	21 e0       	ldi	r18, 0x01	; 1
    774a:	30 e0       	ldi	r19, 0x00	; 0
    774c:	2d 83       	std	Y+5, r18	; 0x05
    774e:	3e 83       	std	Y+6, r19	; 0x06
    7750:	08 c0       	rjmp	.+16     	; 0x7762 <xio_usb_readln+0xa2>
			case (TG_BUFFER_FULL): return (status); break;		// overrun error
    7752:	89 81       	ldd	r24, Y+1	; 0x01
    7754:	28 2f       	mov	r18, r24
    7756:	30 e0       	ldi	r19, 0x00	; 0
    7758:	2d 83       	std	Y+5, r18	; 0x05
    775a:	3e 83       	std	Y+6, r19	; 0x06
    775c:	02 c0       	rjmp	.+4      	; 0x7762 <xio_usb_readln+0xa2>
			case (TG_EOL):return (TG_OK); break;				// got completed line
    775e:	1d 82       	std	Y+5, r1	; 0x05
    7760:	1e 82       	std	Y+6, r1	; 0x06
			case (TG_EAGAIN): break;							// loop
		}
	}
    7762:	8d 81       	ldd	r24, Y+5	; 0x05
    7764:	9e 81       	ldd	r25, Y+6	; 0x06
}
    7766:	28 96       	adiw	r28, 0x08	; 8
    7768:	cd bf       	out	0x3d, r28	; 61
    776a:	de bf       	out	0x3e, r29	; 62
    776c:	cf 91       	pop	r28
    776e:	df 91       	pop	r29
    7770:	08 95       	ret

00007772 <_xio_usb_readchar>:

int _xio_usb_readchar(char *buf, uint8_t len)
{
    7772:	df 93       	push	r29
    7774:	cf 93       	push	r28
    7776:	cd b7       	in	r28, 0x3d	; 61
    7778:	de b7       	in	r29, 0x3e	; 62
    777a:	29 97       	sbiw	r28, 0x09	; 9
    777c:	cd bf       	out	0x3d, r28	; 61
    777e:	de bf       	out	0x3e, r29	; 62
    7780:	8d 83       	std	Y+5, r24	; 0x05
    7782:	9e 83       	std	Y+6, r25	; 0x06
    7784:	6f 83       	std	Y+7, r22	; 0x07
	if (f.rx_buf_head == f.rx_buf_tail) {		// RX ISR buffer empty
    7786:	90 91 ba 21 	lds	r25, 0x21BA
    778a:	80 91 b9 21 	lds	r24, 0x21B9
    778e:	98 17       	cp	r25, r24
    7790:	29 f4       	brne	.+10     	; 0x779c <_xio_usb_readchar+0x2a>
		return(TG_BUFFER_EMPTY);
    7792:	88 e0       	ldi	r24, 0x08	; 8
    7794:	90 e0       	ldi	r25, 0x00	; 0
    7796:	88 87       	std	Y+8, r24	; 0x08
    7798:	99 87       	std	Y+9, r25	; 0x09
    779a:	30 c0       	rjmp	.+96     	; 0x77fc <_xio_usb_readchar+0x8a>
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RX queue read pointer)
    779c:	80 91 b9 21 	lds	r24, 0x21B9
    77a0:	81 50       	subi	r24, 0x01	; 1
    77a2:	80 93 b9 21 	sts	0x21B9, r24
    77a6:	80 91 b9 21 	lds	r24, 0x21B9
    77aa:	88 23       	and	r24, r24
    77ac:	19 f4       	brne	.+6      	; 0x77b4 <_xio_usb_readchar+0x42>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    77ae:	88 e1       	ldi	r24, 0x18	; 24
    77b0:	80 93 b9 21 	sts	0x21B9, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    77b4:	80 91 b9 21 	lds	r24, 0x21B9
    77b8:	88 2f       	mov	r24, r24
    77ba:	90 e0       	ldi	r25, 0x00	; 0
    77bc:	fc 01       	movw	r30, r24
    77be:	e2 54       	subi	r30, 0x42	; 66
    77c0:	fe 4d       	sbci	r31, 0xDE	; 222
    77c2:	80 81       	ld	r24, Z
    77c4:	8f 77       	andi	r24, 0x7F	; 127
    77c6:	80 93 b4 21 	sts	0x21B4, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[f.c])))()); // dispatch on character
    77ca:	80 91 b4 21 	lds	r24, 0x21B4
    77ce:	88 2f       	mov	r24, r24
    77d0:	90 e0       	ldi	r25, 0x00	; 0
    77d2:	88 0f       	add	r24, r24
    77d4:	99 1f       	adc	r25, r25
    77d6:	8a 59       	subi	r24, 0x9A	; 154
    77d8:	97 4f       	sbci	r25, 0xF7	; 247
    77da:	8b 83       	std	Y+3, r24	; 0x03
    77dc:	9c 83       	std	Y+4, r25	; 0x04
    77de:	8b 81       	ldd	r24, Y+3	; 0x03
    77e0:	9c 81       	ldd	r25, Y+4	; 0x04
    77e2:	fc 01       	movw	r30, r24
    77e4:	85 91       	lpm	r24, Z+
    77e6:	94 91       	lpm	r25, Z+
    77e8:	89 83       	std	Y+1, r24	; 0x01
    77ea:	9a 83       	std	Y+2, r25	; 0x02
    77ec:	eb 83       	std	Y+3, r30	; 0x03
    77ee:	fc 83       	std	Y+4, r31	; 0x04
    77f0:	89 81       	ldd	r24, Y+1	; 0x01
    77f2:	9a 81       	ldd	r25, Y+2	; 0x02
    77f4:	fc 01       	movw	r30, r24
    77f6:	19 95       	eicall
    77f8:	88 87       	std	Y+8, r24	; 0x08
    77fa:	99 87       	std	Y+9, r25	; 0x09
    77fc:	88 85       	ldd	r24, Y+8	; 0x08
    77fe:	99 85       	ldd	r25, Y+9	; 0x09
}
    7800:	29 96       	adiw	r28, 0x09	; 9
    7802:	cd bf       	out	0x3d, r28	; 61
    7804:	de bf       	out	0x3e, r29	; 62
    7806:	cf 91       	pop	r28
    7808:	df 91       	pop	r29
    780a:	08 95       	ret

0000780c <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
    780c:	df 93       	push	r29
    780e:	cf 93       	push	r28
    7810:	0f 92       	push	r0
    7812:	0f 92       	push	r0
    7814:	cd b7       	in	r28, 0x3d	; 61
    7816:	de b7       	in	r29, 0x3e	; 62
	if (f.i > f.len) {							// trap buffer overflow
    7818:	90 91 b5 21 	lds	r25, 0x21B5
    781c:	80 91 b6 21 	lds	r24, 0x21B6
    7820:	89 17       	cp	r24, r25
    7822:	a0 f4       	brcc	.+40     	; 0x784c <_readln_char+0x40>
		f.sig = XIO_SIG_EOL;
    7824:	81 e0       	ldi	r24, 0x01	; 1
    7826:	80 93 b3 21 	sts	0x21B3, r24
		f.buf[f.len] = NUL;						// f.len is zero based
    782a:	20 91 b7 21 	lds	r18, 0x21B7
    782e:	30 91 b8 21 	lds	r19, 0x21B8
    7832:	80 91 b6 21 	lds	r24, 0x21B6
    7836:	88 2f       	mov	r24, r24
    7838:	90 e0       	ldi	r25, 0x00	; 0
    783a:	f9 01       	movw	r30, r18
    783c:	e8 0f       	add	r30, r24
    783e:	f9 1f       	adc	r31, r25
    7840:	10 82       	st	Z, r1
		return (TG_BUFFER_FULL);
    7842:	87 e0       	ldi	r24, 0x07	; 7
    7844:	90 e0       	ldi	r25, 0x00	; 0
    7846:	89 83       	std	Y+1, r24	; 0x01
    7848:	9a 83       	std	Y+2, r25	; 0x02
    784a:	27 c0       	rjmp	.+78     	; 0x789a <_readln_char+0x8e>
	}
	f.buf[f.i++] = f.c;
    784c:	20 91 b7 21 	lds	r18, 0x21B7
    7850:	30 91 b8 21 	lds	r19, 0x21B8
    7854:	40 91 b5 21 	lds	r20, 0x21B5
    7858:	84 2f       	mov	r24, r20
    785a:	90 e0       	ldi	r25, 0x00	; 0
    785c:	f9 01       	movw	r30, r18
    785e:	e8 0f       	add	r30, r24
    7860:	f9 1f       	adc	r31, r25
    7862:	80 91 b4 21 	lds	r24, 0x21B4
    7866:	80 83       	st	Z, r24
    7868:	84 2f       	mov	r24, r20
    786a:	8f 5f       	subi	r24, 0xFF	; 255
    786c:	80 93 b5 21 	sts	0x21B5, r24
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);// conditional echo
    7870:	80 91 b1 21 	lds	r24, 0x21B1
    7874:	90 91 b2 21 	lds	r25, 0x21B2
    7878:	80 71       	andi	r24, 0x10	; 16
    787a:	90 70       	andi	r25, 0x00	; 0
    787c:	00 97       	sbiw	r24, 0x00	; 0
    787e:	49 f0       	breq	.+18     	; 0x7892 <_readln_char+0x86>
    7880:	80 91 b4 21 	lds	r24, 0x21B4
    7884:	20 91 64 25 	lds	r18, 0x2564
    7888:	30 91 65 25 	lds	r19, 0x2565
    788c:	b9 01       	movw	r22, r18
    788e:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <xio_usb_putc>
	return (TG_EAGAIN);							// line is still in process
    7892:	81 e0       	ldi	r24, 0x01	; 1
    7894:	90 e0       	ldi	r25, 0x00	; 0
    7896:	89 83       	std	Y+1, r24	; 0x01
    7898:	9a 83       	std	Y+2, r25	; 0x02
    789a:	89 81       	ldd	r24, Y+1	; 0x01
    789c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    789e:	0f 90       	pop	r0
    78a0:	0f 90       	pop	r0
    78a2:	cf 91       	pop	r28
    78a4:	df 91       	pop	r29
    78a6:	08 95       	ret

000078a8 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
    78a8:	df 93       	push	r29
    78aa:	cf 93       	push	r28
    78ac:	cd b7       	in	r28, 0x3d	; 61
    78ae:	de b7       	in	r29, 0x3e	; 62
	f.sig = XIO_SIG_EOL;
    78b0:	81 e0       	ldi	r24, 0x01	; 1
    78b2:	80 93 b3 21 	sts	0x21B3, r24
	f.buf[f.i] = NUL;
    78b6:	20 91 b7 21 	lds	r18, 0x21B7
    78ba:	30 91 b8 21 	lds	r19, 0x21B8
    78be:	80 91 b5 21 	lds	r24, 0x21B5
    78c2:	88 2f       	mov	r24, r24
    78c4:	90 e0       	ldi	r25, 0x00	; 0
    78c6:	f9 01       	movw	r30, r18
    78c8:	e8 0f       	add	r30, r24
    78ca:	f9 1f       	adc	r31, r25
    78cc:	10 82       	st	Z, r1
	f.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    78ce:	80 91 b1 21 	lds	r24, 0x21B1
    78d2:	90 91 b2 21 	lds	r25, 0x21B2
    78d6:	9f 7b       	andi	r25, 0xBF	; 191
    78d8:	80 93 b1 21 	sts	0x21B1, r24
    78dc:	90 93 b2 21 	sts	0x21B2, r25
	if (ECHO(f.flags)) xio_usb_putc('\n',stdout);// echo a newline
    78e0:	80 91 b1 21 	lds	r24, 0x21B1
    78e4:	90 91 b2 21 	lds	r25, 0x21B2
    78e8:	80 71       	andi	r24, 0x10	; 16
    78ea:	90 70       	andi	r25, 0x00	; 0
    78ec:	00 97       	sbiw	r24, 0x00	; 0
    78ee:	41 f0       	breq	.+16     	; 0x7900 <_readln_NEWLINE+0x58>
    78f0:	20 91 64 25 	lds	r18, 0x2564
    78f4:	30 91 65 25 	lds	r19, 0x2565
    78f8:	8a e0       	ldi	r24, 0x0A	; 10
    78fa:	b9 01       	movw	r22, r18
    78fc:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <xio_usb_putc>
	return (TG_OK);								// return for end-of-line
    7900:	80 e0       	ldi	r24, 0x00	; 0
    7902:	90 e0       	ldi	r25, 0x00	; 0
}
    7904:	cf 91       	pop	r28
    7906:	df 91       	pop	r29
    7908:	08 95       	ret

0000790a <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
    790a:	df 93       	push	r29
    790c:	cf 93       	push	r28
    790e:	0f 92       	push	r0
    7910:	0f 92       	push	r0
    7912:	cd b7       	in	r28, 0x3d	; 61
    7914:	de b7       	in	r29, 0x3e	; 62
	if (SEMICOLONS(f.flags)) {
    7916:	80 91 b1 21 	lds	r24, 0x21B1
    791a:	90 91 b2 21 	lds	r25, 0x21B2
    791e:	80 78       	andi	r24, 0x80	; 128
    7920:	90 70       	andi	r25, 0x00	; 0
    7922:	00 97       	sbiw	r24, 0x00	; 0
    7924:	29 f0       	breq	.+10     	; 0x7930 <_readln_SEMICOLON+0x26>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    7926:	0e 94 54 3c 	call	0x78a8	; 0x78a8 <_readln_NEWLINE>
    792a:	89 83       	std	Y+1, r24	; 0x01
    792c:	9a 83       	std	Y+2, r25	; 0x02
    792e:	04 c0       	rjmp	.+8      	; 0x7938 <_readln_SEMICOLON+0x2e>
	} else {
		return (_readln_char());				// else treat as any other character
    7930:	0e 94 06 3c 	call	0x780c	; 0x780c <_readln_char>
    7934:	89 83       	std	Y+1, r24	; 0x01
    7936:	9a 83       	std	Y+2, r25	; 0x02
    7938:	89 81       	ldd	r24, Y+1	; 0x01
    793a:	9a 81       	ldd	r25, Y+2	; 0x02
	}
}
    793c:	0f 90       	pop	r0
    793e:	0f 90       	pop	r0
    7940:	cf 91       	pop	r28
    7942:	df 91       	pop	r29
    7944:	08 95       	ret

00007946 <_readln_DELETE>:

static int _readln_DELETE(void)
{
    7946:	df 93       	push	r29
    7948:	cf 93       	push	r28
    794a:	cd b7       	in	r28, 0x3d	; 61
    794c:	de b7       	in	r29, 0x3e	; 62
	if (--f.i >= 0) {
    794e:	80 91 b5 21 	lds	r24, 0x21B5
    7952:	81 50       	subi	r24, 0x01	; 1
    7954:	80 93 b5 21 	sts	0x21B5, r24
		if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    7958:	80 91 b1 21 	lds	r24, 0x21B1
    795c:	90 91 b2 21 	lds	r25, 0x21B2
    7960:	80 71       	andi	r24, 0x10	; 16
    7962:	90 70       	andi	r25, 0x00	; 0
    7964:	00 97       	sbiw	r24, 0x00	; 0
    7966:	49 f0       	breq	.+18     	; 0x797a <_readln_DELETE+0x34>
    7968:	80 91 b4 21 	lds	r24, 0x21B4
    796c:	20 91 64 25 	lds	r18, 0x2564
    7970:	30 91 65 25 	lds	r19, 0x2565
    7974:	b9 01       	movw	r22, r18
    7976:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <xio_usb_putc>
	} else {
		f.i = 0;
	}
	return (TG_EAGAIN);							// line is still in process
    797a:	81 e0       	ldi	r24, 0x01	; 1
    797c:	90 e0       	ldi	r25, 0x00	; 0
}
    797e:	cf 91       	pop	r28
    7980:	df 91       	pop	r29
    7982:	08 95       	ret

00007984 <_sig_KILL>:
/*
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
    7984:	df 93       	push	r29
    7986:	cf 93       	push	r28
    7988:	cd b7       	in	r28, 0x3d	; 61
    798a:	de b7       	in	r29, 0x3e	; 62
	f.sig = XIO_SIG_KILL;
    798c:	84 e0       	ldi	r24, 0x04	; 4
    798e:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
    7992:	8f ef       	ldi	r24, 0xFF	; 255
    7994:	9f ef       	ldi	r25, 0xFF	; 255
}
    7996:	cf 91       	pop	r28
    7998:	df 91       	pop	r29
    799a:	08 95       	ret

0000799c <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
    799c:	df 93       	push	r29
    799e:	cf 93       	push	r28
    79a0:	cd b7       	in	r28, 0x3d	; 61
    79a2:	de b7       	in	r29, 0x3e	; 62
	f.sig = XIO_SIG_PAUSE;
    79a4:	86 e0       	ldi	r24, 0x06	; 6
    79a6:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
    79aa:	8f ef       	ldi	r24, 0xFF	; 255
    79ac:	9f ef       	ldi	r25, 0xFF	; 255
}
    79ae:	cf 91       	pop	r28
    79b0:	df 91       	pop	r29
    79b2:	08 95       	ret

000079b4 <_sig_RESUME>:

static int _sig_RESUME(void)
{
    79b4:	df 93       	push	r29
    79b6:	cf 93       	push	r28
    79b8:	cd b7       	in	r28, 0x3d	; 61
    79ba:	de b7       	in	r29, 0x3e	; 62
	f.sig = XIO_SIG_RESUME;
    79bc:	87 e0       	ldi	r24, 0x07	; 7
    79be:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
    79c2:	8f ef       	ldi	r24, 0xFF	; 255
    79c4:	9f ef       	ldi	r25, 0xFF	; 255
}
    79c6:	cf 91       	pop	r28
    79c8:	df 91       	pop	r29
    79ca:	08 95       	ret

000079cc <_sig_SHIFTOUT>:

static int _sig_SHIFTOUT(void)
{
    79cc:	df 93       	push	r29
    79ce:	cf 93       	push	r28
    79d0:	cd b7       	in	r28, 0x3d	; 61
    79d2:	de b7       	in	r29, 0x3e	; 62
	f.sig = XIO_SIG_SHIFTOUT;
    79d4:	88 e0       	ldi	r24, 0x08	; 8
    79d6:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
    79da:	8f ef       	ldi	r24, 0xFF	; 255
    79dc:	9f ef       	ldi	r25, 0xFF	; 255
}
    79de:	cf 91       	pop	r28
    79e0:	df 91       	pop	r29
    79e2:	08 95       	ret

000079e4 <_sig_SHIFTIN>:

static int _sig_SHIFTIN(void)
{
    79e4:	df 93       	push	r29
    79e6:	cf 93       	push	r28
    79e8:	cd b7       	in	r28, 0x3d	; 61
    79ea:	de b7       	in	r29, 0x3e	; 62
	f.sig = XIO_SIG_SHIFTIN;
    79ec:	89 e0       	ldi	r24, 0x09	; 9
    79ee:	80 93 b3 21 	sts	0x21B3, r24
	return(_FDEV_ERR);
    79f2:	8f ef       	ldi	r24, 0xFF	; 255
    79f4:	9f ef       	ldi	r25, 0xFF	; 255
}
    79f6:	cf 91       	pop	r28
    79f8:	df 91       	pop	r29
    79fa:	08 95       	ret

000079fc <eeprom_get_char>:
#include "xmega_eeprom.h"

/****** Functions from Grbl eeprom.c ******/

char eeprom_get_char( unsigned int addr )
{
    79fc:	df 93       	push	r29
    79fe:	cf 93       	push	r28
    7a00:	00 d0       	rcall	.+0      	; 0x7a02 <eeprom_get_char+0x6>
    7a02:	0f 92       	push	r0
    7a04:	cd b7       	in	r28, 0x3d	; 61
    7a06:	de b7       	in	r29, 0x3e	; 62
    7a08:	8b 83       	std	Y+3, r24	; 0x03
    7a0a:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
    7a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    7a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    7a10:	96 95       	lsr	r25
    7a12:	87 95       	ror	r24
    7a14:	92 95       	swap	r25
    7a16:	82 95       	swap	r24
    7a18:	8f 70       	andi	r24, 0x0F	; 15
    7a1a:	89 27       	eor	r24, r25
    7a1c:	9f 70       	andi	r25, 0x0F	; 15
    7a1e:	89 27       	eor	r24, r25
    7a20:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
    7a22:	8b 81       	ldd	r24, Y+3	; 0x03
    7a24:	8f 71       	andi	r24, 0x1F	; 31
    7a26:	89 83       	std	Y+1, r24	; 0x01
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    7a28:	8a 81       	ldd	r24, Y+2	; 0x02
    7a2a:	69 81       	ldd	r22, Y+1	; 0x01
    7a2c:	0e 94 39 3e 	call	0x7c72	; 0x7c72 <EEPROM_ReadByte>
}
    7a30:	24 96       	adiw	r28, 0x04	; 4
    7a32:	cd bf       	out	0x3d, r28	; 61
    7a34:	de bf       	out	0x3e, r29	; 62
    7a36:	cf 91       	pop	r28
    7a38:	df 91       	pop	r29
    7a3a:	08 95       	ret

00007a3c <eeprom_put_char>:

void eeprom_put_char( unsigned int addr, char value )
{
    7a3c:	df 93       	push	r29
    7a3e:	cf 93       	push	r28
    7a40:	cd b7       	in	r28, 0x3d	; 61
    7a42:	de b7       	in	r29, 0x3e	; 62
    7a44:	25 97       	sbiw	r28, 0x05	; 5
    7a46:	cd bf       	out	0x3d, r28	; 61
    7a48:	de bf       	out	0x3e, r29	; 62
    7a4a:	8b 83       	std	Y+3, r24	; 0x03
    7a4c:	9c 83       	std	Y+4, r25	; 0x04
    7a4e:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
    7a50:	8b 81       	ldd	r24, Y+3	; 0x03
    7a52:	9c 81       	ldd	r25, Y+4	; 0x04
    7a54:	96 95       	lsr	r25
    7a56:	87 95       	ror	r24
    7a58:	92 95       	swap	r25
    7a5a:	82 95       	swap	r24
    7a5c:	8f 70       	andi	r24, 0x0F	; 15
    7a5e:	89 27       	eor	r24, r25
    7a60:	9f 70       	andi	r25, 0x0F	; 15
    7a62:	89 27       	eor	r24, r25
    7a64:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
    7a66:	8b 81       	ldd	r24, Y+3	; 0x03
    7a68:	8f 71       	andi	r24, 0x1F	; 31
    7a6a:	89 83       	std	Y+1, r24	; 0x01

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    7a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    7a6e:	69 81       	ldd	r22, Y+1	; 0x01
    7a70:	4d 81       	ldd	r20, Y+5	; 0x05
    7a72:	0e 94 e9 3d 	call	0x7bd2	; 0x7bd2 <EEPROM_WriteByte>
}
    7a76:	25 96       	adiw	r28, 0x05	; 5
    7a78:	cd bf       	out	0x3d, r28	; 61
    7a7a:	de bf       	out	0x3e, r29	; 62
    7a7c:	cf 91       	pop	r28
    7a7e:	df 91       	pop	r29
    7a80:	08 95       	ret

00007a82 <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    7a82:	df 93       	push	r29
    7a84:	cf 93       	push	r28
    7a86:	cd b7       	in	r28, 0x3d	; 61
    7a88:	de b7       	in	r29, 0x3e	; 62
    7a8a:	29 97       	sbiw	r28, 0x09	; 9
    7a8c:	cd bf       	out	0x3d, r28	; 61
    7a8e:	de bf       	out	0x3e, r29	; 62
    7a90:	8a 83       	std	Y+2, r24	; 0x02
    7a92:	9b 83       	std	Y+3, r25	; 0x03
    7a94:	6c 83       	std	Y+4, r22	; 0x04
    7a96:	7d 83       	std	Y+5, r23	; 0x05
    7a98:	4e 83       	std	Y+6, r20	; 0x06
    7a9a:	5f 83       	std	Y+7, r21	; 0x07
  unsigned char checksum = 0;
    7a9c:	19 82       	std	Y+1, r1	; 0x01
    7a9e:	31 c0       	rjmp	.+98     	; 0x7b02 <memcpy_to_eeprom_with_checksum+0x80>
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    7aa0:	89 81       	ldd	r24, Y+1	; 0x01
    7aa2:	88 2f       	mov	r24, r24
    7aa4:	90 e0       	ldi	r25, 0x00	; 0
    7aa6:	88 0f       	add	r24, r24
    7aa8:	99 1f       	adc	r25, r25
    7aaa:	00 97       	sbiw	r24, 0x00	; 0
    7aac:	19 f4       	brne	.+6      	; 0x7ab4 <memcpy_to_eeprom_with_checksum+0x32>
    7aae:	89 81       	ldd	r24, Y+1	; 0x01
    7ab0:	88 23       	and	r24, r24
    7ab2:	2c f4       	brge	.+10     	; 0x7abe <memcpy_to_eeprom_with_checksum+0x3c>
    7ab4:	81 e0       	ldi	r24, 0x01	; 1
    7ab6:	90 e0       	ldi	r25, 0x00	; 0
    7ab8:	88 87       	std	Y+8, r24	; 0x08
    7aba:	99 87       	std	Y+9, r25	; 0x09
    7abc:	02 c0       	rjmp	.+4      	; 0x7ac2 <memcpy_to_eeprom_with_checksum+0x40>
    7abe:	18 86       	std	Y+8, r1	; 0x08
    7ac0:	19 86       	std	Y+9, r1	; 0x09
    7ac2:	98 85       	ldd	r25, Y+8	; 0x08
    7ac4:	99 83       	std	Y+1, r25	; 0x01
    checksum += *source;
    7ac6:	ec 81       	ldd	r30, Y+4	; 0x04
    7ac8:	fd 81       	ldd	r31, Y+5	; 0x05
    7aca:	90 81       	ld	r25, Z
    7acc:	89 81       	ldd	r24, Y+1	; 0x01
    7ace:	89 0f       	add	r24, r25
    7ad0:	89 83       	std	Y+1, r24	; 0x01
    eeprom_put_char(destination++, *(source++)); 
    7ad2:	2a 81       	ldd	r18, Y+2	; 0x02
    7ad4:	3b 81       	ldd	r19, Y+3	; 0x03
    7ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    7ad8:	9b 81       	ldd	r25, Y+3	; 0x03
    7ada:	01 96       	adiw	r24, 0x01	; 1
    7adc:	8a 83       	std	Y+2, r24	; 0x02
    7ade:	9b 83       	std	Y+3, r25	; 0x03
    7ae0:	ec 81       	ldd	r30, Y+4	; 0x04
    7ae2:	fd 81       	ldd	r31, Y+5	; 0x05
    7ae4:	40 81       	ld	r20, Z
    7ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    7ae8:	9d 81       	ldd	r25, Y+5	; 0x05
    7aea:	01 96       	adiw	r24, 0x01	; 1
    7aec:	8c 83       	std	Y+4, r24	; 0x04
    7aee:	9d 83       	std	Y+5, r25	; 0x05
    7af0:	c9 01       	movw	r24, r18
    7af2:	64 2f       	mov	r22, r20
    7af4:	0e 94 1e 3d 	call	0x7a3c	; 0x7a3c <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    7af8:	8e 81       	ldd	r24, Y+6	; 0x06
    7afa:	9f 81       	ldd	r25, Y+7	; 0x07
    7afc:	01 97       	sbiw	r24, 0x01	; 1
    7afe:	8e 83       	std	Y+6, r24	; 0x06
    7b00:	9f 83       	std	Y+7, r25	; 0x07
    7b02:	8e 81       	ldd	r24, Y+6	; 0x06
    7b04:	9f 81       	ldd	r25, Y+7	; 0x07
    7b06:	00 97       	sbiw	r24, 0x00	; 0
    7b08:	59 f6       	brne	.-106    	; 0x7aa0 <memcpy_to_eeprom_with_checksum+0x1e>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    7b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    7b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    7b0e:	69 81       	ldd	r22, Y+1	; 0x01
    7b10:	0e 94 1e 3d 	call	0x7a3c	; 0x7a3c <eeprom_put_char>
}
    7b14:	29 96       	adiw	r28, 0x09	; 9
    7b16:	cd bf       	out	0x3d, r28	; 61
    7b18:	de bf       	out	0x3e, r29	; 62
    7b1a:	cf 91       	pop	r28
    7b1c:	df 91       	pop	r29
    7b1e:	08 95       	ret

00007b20 <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    7b20:	df 93       	push	r29
    7b22:	cf 93       	push	r28
    7b24:	cd b7       	in	r28, 0x3d	; 61
    7b26:	de b7       	in	r29, 0x3e	; 62
    7b28:	2c 97       	sbiw	r28, 0x0c	; 12
    7b2a:	cd bf       	out	0x3d, r28	; 61
    7b2c:	de bf       	out	0x3e, r29	; 62
    7b2e:	8b 83       	std	Y+3, r24	; 0x03
    7b30:	9c 83       	std	Y+4, r25	; 0x04
    7b32:	6d 83       	std	Y+5, r22	; 0x05
    7b34:	7e 83       	std	Y+6, r23	; 0x06
    7b36:	4f 83       	std	Y+7, r20	; 0x07
    7b38:	58 87       	std	Y+8, r21	; 0x08
  unsigned char data, checksum = 0;
    7b3a:	19 82       	std	Y+1, r1	; 0x01
    7b3c:	30 c0       	rjmp	.+96     	; 0x7b9e <memcpy_from_eeprom_with_checksum+0x7e>
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    7b3e:	2d 81       	ldd	r18, Y+5	; 0x05
    7b40:	3e 81       	ldd	r19, Y+6	; 0x06
    7b42:	8d 81       	ldd	r24, Y+5	; 0x05
    7b44:	9e 81       	ldd	r25, Y+6	; 0x06
    7b46:	01 96       	adiw	r24, 0x01	; 1
    7b48:	8d 83       	std	Y+5, r24	; 0x05
    7b4a:	9e 83       	std	Y+6, r25	; 0x06
    7b4c:	c9 01       	movw	r24, r18
    7b4e:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <eeprom_get_char>
    7b52:	8a 83       	std	Y+2, r24	; 0x02
    checksum = (checksum << 1) || (checksum >> 7);
    7b54:	89 81       	ldd	r24, Y+1	; 0x01
    7b56:	88 2f       	mov	r24, r24
    7b58:	90 e0       	ldi	r25, 0x00	; 0
    7b5a:	88 0f       	add	r24, r24
    7b5c:	99 1f       	adc	r25, r25
    7b5e:	00 97       	sbiw	r24, 0x00	; 0
    7b60:	19 f4       	brne	.+6      	; 0x7b68 <memcpy_from_eeprom_with_checksum+0x48>
    7b62:	89 81       	ldd	r24, Y+1	; 0x01
    7b64:	88 23       	and	r24, r24
    7b66:	2c f4       	brge	.+10     	; 0x7b72 <memcpy_from_eeprom_with_checksum+0x52>
    7b68:	81 e0       	ldi	r24, 0x01	; 1
    7b6a:	90 e0       	ldi	r25, 0x00	; 0
    7b6c:	8b 87       	std	Y+11, r24	; 0x0b
    7b6e:	9c 87       	std	Y+12, r25	; 0x0c
    7b70:	02 c0       	rjmp	.+4      	; 0x7b76 <memcpy_from_eeprom_with_checksum+0x56>
    7b72:	1b 86       	std	Y+11, r1	; 0x0b
    7b74:	1c 86       	std	Y+12, r1	; 0x0c
    7b76:	9b 85       	ldd	r25, Y+11	; 0x0b
    7b78:	99 83       	std	Y+1, r25	; 0x01
    checksum += data;    
    7b7a:	99 81       	ldd	r25, Y+1	; 0x01
    7b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    7b7e:	89 0f       	add	r24, r25
    7b80:	89 83       	std	Y+1, r24	; 0x01
    *(destination++) = data; 
    7b82:	eb 81       	ldd	r30, Y+3	; 0x03
    7b84:	fc 81       	ldd	r31, Y+4	; 0x04
    7b86:	8a 81       	ldd	r24, Y+2	; 0x02
    7b88:	80 83       	st	Z, r24
    7b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    7b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    7b8e:	01 96       	adiw	r24, 0x01	; 1
    7b90:	8b 83       	std	Y+3, r24	; 0x03
    7b92:	9c 83       	std	Y+4, r25	; 0x04
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    7b94:	8f 81       	ldd	r24, Y+7	; 0x07
    7b96:	98 85       	ldd	r25, Y+8	; 0x08
    7b98:	01 97       	sbiw	r24, 0x01	; 1
    7b9a:	8f 83       	std	Y+7, r24	; 0x07
    7b9c:	98 87       	std	Y+8, r25	; 0x08
    7b9e:	8f 81       	ldd	r24, Y+7	; 0x07
    7ba0:	98 85       	ldd	r25, Y+8	; 0x08
    7ba2:	00 97       	sbiw	r24, 0x00	; 0
    7ba4:	61 f6       	brne	.-104    	; 0x7b3e <memcpy_from_eeprom_with_checksum+0x1e>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    7ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    7ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    7baa:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <eeprom_get_char>
    7bae:	98 2f       	mov	r25, r24
    7bb0:	19 86       	std	Y+9, r1	; 0x09
    7bb2:	1a 86       	std	Y+10, r1	; 0x0a
    7bb4:	89 81       	ldd	r24, Y+1	; 0x01
    7bb6:	98 17       	cp	r25, r24
    7bb8:	21 f4       	brne	.+8      	; 0x7bc2 <memcpy_from_eeprom_with_checksum+0xa2>
    7bba:	81 e0       	ldi	r24, 0x01	; 1
    7bbc:	90 e0       	ldi	r25, 0x00	; 0
    7bbe:	89 87       	std	Y+9, r24	; 0x09
    7bc0:	9a 87       	std	Y+10, r25	; 0x0a
    7bc2:	89 85       	ldd	r24, Y+9	; 0x09
    7bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    7bc6:	2c 96       	adiw	r28, 0x0c	; 12
    7bc8:	cd bf       	out	0x3d, r28	; 61
    7bca:	de bf       	out	0x3e, r29	; 62
    7bcc:	cf 91       	pop	r28
    7bce:	df 91       	pop	r29
    7bd0:	08 95       	ret

00007bd2 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    7bd2:	df 93       	push	r29
    7bd4:	cf 93       	push	r28
    7bd6:	cd b7       	in	r28, 0x3d	; 61
    7bd8:	de b7       	in	r29, 0x3e	; 62
    7bda:	25 97       	sbiw	r28, 0x05	; 5
    7bdc:	cd bf       	out	0x3d, r28	; 61
    7bde:	de bf       	out	0x3e, r29	; 62
    7be0:	8b 83       	std	Y+3, r24	; 0x03
    7be2:	6c 83       	std	Y+4, r22	; 0x04
    7be4:	4d 83       	std	Y+5, r20	; 0x05
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    7be6:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    7bea:	e0 ec       	ldi	r30, 0xC0	; 192
    7bec:	f1 e0       	ldi	r31, 0x01	; 1
    7bee:	83 e3       	ldi	r24, 0x33	; 51
    7bf0:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    7bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    7bf4:	88 2f       	mov	r24, r24
    7bf6:	90 e0       	ldi	r25, 0x00	; 0
    7bf8:	88 0f       	add	r24, r24
    7bfa:	99 1f       	adc	r25, r25
    7bfc:	82 95       	swap	r24
    7bfe:	92 95       	swap	r25
    7c00:	90 7f       	andi	r25, 0xF0	; 240
    7c02:	98 27       	eor	r25, r24
    7c04:	80 7f       	andi	r24, 0xF0	; 240
    7c06:	98 27       	eor	r25, r24
    7c08:	9c 01       	movw	r18, r24
    7c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    7c0c:	88 2f       	mov	r24, r24
    7c0e:	90 e0       	ldi	r25, 0x00	; 0
    7c10:	8f 71       	andi	r24, 0x1F	; 31
    7c12:	90 70       	andi	r25, 0x00	; 0
    7c14:	82 2b       	or	r24, r18
    7c16:	93 2b       	or	r25, r19
    7c18:	89 83       	std	Y+1, r24	; 0x01
    7c1a:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    7c1c:	e0 ec       	ldi	r30, 0xC0	; 192
    7c1e:	f1 e0       	ldi	r31, 0x01	; 1
    7c20:	89 81       	ldd	r24, Y+1	; 0x01
    7c22:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    7c24:	e0 ec       	ldi	r30, 0xC0	; 192
    7c26:	f1 e0       	ldi	r31, 0x01	; 1
    7c28:	89 81       	ldd	r24, Y+1	; 0x01
    7c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    7c2c:	89 2f       	mov	r24, r25
    7c2e:	99 27       	eor	r25, r25
    7c30:	8f 71       	andi	r24, 0x1F	; 31
    7c32:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    7c34:	e0 ec       	ldi	r30, 0xC0	; 192
    7c36:	f1 e0       	ldi	r31, 0x01	; 1
    7c38:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    7c3a:	e0 ec       	ldi	r30, 0xC0	; 192
    7c3c:	f1 e0       	ldi	r31, 0x01	; 1
    7c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    7c40:	84 83       	std	Z+4, r24	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    7c42:	e0 ec       	ldi	r30, 0xC0	; 192
    7c44:	f1 e0       	ldi	r31, 0x01	; 1
    7c46:	85 e3       	ldi	r24, 0x35	; 53
    7c48:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    7c4a:	ef 93       	push	r30
    7c4c:	ff 93       	push	r31
    7c4e:	0f 93       	push	r16
    7c50:	2f 93       	push	r18
    7c52:	eb ec       	ldi	r30, 0xCB	; 203
    7c54:	f1 e0       	ldi	r31, 0x01	; 1
    7c56:	08 ed       	ldi	r16, 0xD8	; 216
    7c58:	21 e0       	ldi	r18, 0x01	; 1
    7c5a:	04 bf       	out	0x34, r16	; 52
    7c5c:	20 83       	st	Z, r18
    7c5e:	2f 91       	pop	r18
    7c60:	0f 91       	pop	r16
    7c62:	ff 91       	pop	r31
    7c64:	ef 91       	pop	r30
}
    7c66:	25 96       	adiw	r28, 0x05	; 5
    7c68:	cd bf       	out	0x3d, r28	; 61
    7c6a:	de bf       	out	0x3e, r29	; 62
    7c6c:	cf 91       	pop	r28
    7c6e:	df 91       	pop	r29
    7c70:	08 95       	ret

00007c72 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    7c72:	df 93       	push	r29
    7c74:	cf 93       	push	r28
    7c76:	00 d0       	rcall	.+0      	; 0x7c78 <EEPROM_ReadByte+0x6>
    7c78:	0f 92       	push	r0
    7c7a:	cd b7       	in	r28, 0x3d	; 61
    7c7c:	de b7       	in	r29, 0x3e	; 62
    7c7e:	8b 83       	std	Y+3, r24	; 0x03
    7c80:	6c 83       	std	Y+4, r22	; 0x04
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    7c82:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <EEPROM_WaitForNVM>

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    7c86:	8b 81       	ldd	r24, Y+3	; 0x03
    7c88:	88 2f       	mov	r24, r24
    7c8a:	90 e0       	ldi	r25, 0x00	; 0
    7c8c:	88 0f       	add	r24, r24
    7c8e:	99 1f       	adc	r25, r25
    7c90:	82 95       	swap	r24
    7c92:	92 95       	swap	r25
    7c94:	90 7f       	andi	r25, 0xF0	; 240
    7c96:	98 27       	eor	r25, r24
    7c98:	80 7f       	andi	r24, 0xF0	; 240
    7c9a:	98 27       	eor	r25, r24
    7c9c:	9c 01       	movw	r18, r24
    7c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    7ca0:	88 2f       	mov	r24, r24
    7ca2:	90 e0       	ldi	r25, 0x00	; 0
    7ca4:	8f 71       	andi	r24, 0x1F	; 31
    7ca6:	90 70       	andi	r25, 0x00	; 0
    7ca8:	82 2b       	or	r24, r18
    7caa:	93 2b       	or	r25, r19
    7cac:	89 83       	std	Y+1, r24	; 0x01
    7cae:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    7cb0:	e0 ec       	ldi	r30, 0xC0	; 192
    7cb2:	f1 e0       	ldi	r31, 0x01	; 1
    7cb4:	89 81       	ldd	r24, Y+1	; 0x01
    7cb6:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    7cb8:	e0 ec       	ldi	r30, 0xC0	; 192
    7cba:	f1 e0       	ldi	r31, 0x01	; 1
    7cbc:	89 81       	ldd	r24, Y+1	; 0x01
    7cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    7cc0:	89 2f       	mov	r24, r25
    7cc2:	99 27       	eor	r25, r25
    7cc4:	8f 71       	andi	r24, 0x1F	; 31
    7cc6:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    7cc8:	e0 ec       	ldi	r30, 0xC0	; 192
    7cca:	f1 e0       	ldi	r31, 0x01	; 1
    7ccc:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    7cce:	e0 ec       	ldi	r30, 0xC0	; 192
    7cd0:	f1 e0       	ldi	r31, 0x01	; 1
    7cd2:	86 e0       	ldi	r24, 0x06	; 6
    7cd4:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    7cd6:	ef 93       	push	r30
    7cd8:	ff 93       	push	r31
    7cda:	0f 93       	push	r16
    7cdc:	2f 93       	push	r18
    7cde:	eb ec       	ldi	r30, 0xCB	; 203
    7ce0:	f1 e0       	ldi	r31, 0x01	; 1
    7ce2:	08 ed       	ldi	r16, 0xD8	; 216
    7ce4:	21 e0       	ldi	r18, 0x01	; 1
    7ce6:	04 bf       	out	0x34, r16	; 52
    7ce8:	20 83       	st	Z, r18
    7cea:	2f 91       	pop	r18
    7cec:	0f 91       	pop	r16
    7cee:	ff 91       	pop	r31
    7cf0:	ef 91       	pop	r30

	return NVM.DATA0;
    7cf2:	e0 ec       	ldi	r30, 0xC0	; 192
    7cf4:	f1 e0       	ldi	r31, 0x01	; 1
    7cf6:	84 81       	ldd	r24, Z+4	; 0x04
}
    7cf8:	24 96       	adiw	r28, 0x04	; 4
    7cfa:	cd bf       	out	0x3d, r28	; 61
    7cfc:	de bf       	out	0x3e, r29	; 62
    7cfe:	cf 91       	pop	r28
    7d00:	df 91       	pop	r29
    7d02:	08 95       	ret

00007d04 <EEPROM_WaitForNVM>:
 *  including EEPROM. Use this function before any EEPROM accesses,
 *  if you are not certain that any previous operations are finished yet,
 *  like an EEPROM write.
 */
void EEPROM_WaitForNVM( void )
{
    7d04:	df 93       	push	r29
    7d06:	cf 93       	push	r28
    7d08:	cd b7       	in	r28, 0x3d	; 61
    7d0a:	de b7       	in	r29, 0x3e	; 62
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    7d0c:	e0 ec       	ldi	r30, 0xC0	; 192
    7d0e:	f1 e0       	ldi	r31, 0x01	; 1
    7d10:	87 85       	ldd	r24, Z+15	; 0x0f
    7d12:	88 23       	and	r24, r24
    7d14:	dc f3       	brlt	.-10     	; 0x7d0c <EEPROM_WaitForNVM+0x8>
}
    7d16:	cf 91       	pop	r28
    7d18:	df 91       	pop	r29
    7d1a:	08 95       	ret

00007d1c <EEPROM_FlushBuffer>:
 *  This function also works for memory mapped EEPROM access.
 *
 *  \note The EEPROM write operations will automatically flush the buffer for you.
 */
void EEPROM_FlushBuffer( void )
{
    7d1c:	df 93       	push	r29
    7d1e:	cf 93       	push	r28
    7d20:	cd b7       	in	r28, 0x3d	; 61
    7d22:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    7d24:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <EEPROM_WaitForNVM>

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    7d28:	e0 ec       	ldi	r30, 0xC0	; 192
    7d2a:	f1 e0       	ldi	r31, 0x01	; 1
    7d2c:	87 85       	ldd	r24, Z+15	; 0x0f
    7d2e:	88 2f       	mov	r24, r24
    7d30:	90 e0       	ldi	r25, 0x00	; 0
    7d32:	82 70       	andi	r24, 0x02	; 2
    7d34:	90 70       	andi	r25, 0x00	; 0
    7d36:	00 97       	sbiw	r24, 0x00	; 0
    7d38:	91 f0       	breq	.+36     	; 0x7d5e <EEPROM_FlushBuffer+0x42>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    7d3a:	e0 ec       	ldi	r30, 0xC0	; 192
    7d3c:	f1 e0       	ldi	r31, 0x01	; 1
    7d3e:	86 e3       	ldi	r24, 0x36	; 54
    7d40:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    7d42:	ef 93       	push	r30
    7d44:	ff 93       	push	r31
    7d46:	0f 93       	push	r16
    7d48:	2f 93       	push	r18
    7d4a:	eb ec       	ldi	r30, 0xCB	; 203
    7d4c:	f1 e0       	ldi	r31, 0x01	; 1
    7d4e:	08 ed       	ldi	r16, 0xD8	; 216
    7d50:	21 e0       	ldi	r18, 0x01	; 1
    7d52:	04 bf       	out	0x34, r16	; 52
    7d54:	20 83       	st	Z, r18
    7d56:	2f 91       	pop	r18
    7d58:	0f 91       	pop	r16
    7d5a:	ff 91       	pop	r31
    7d5c:	ef 91       	pop	r30
	}
}
    7d5e:	cf 91       	pop	r28
    7d60:	df 91       	pop	r29
    7d62:	08 95       	ret

00007d64 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    7d64:	df 93       	push	r29
    7d66:	cf 93       	push	r28
    7d68:	0f 92       	push	r0
    7d6a:	0f 92       	push	r0
    7d6c:	cd b7       	in	r28, 0x3d	; 61
    7d6e:	de b7       	in	r29, 0x3e	; 62
    7d70:	89 83       	std	Y+1, r24	; 0x01
    7d72:	6a 83       	std	Y+2, r22	; 0x02
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
    7d74:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    7d78:	e0 ec       	ldi	r30, 0xC0	; 192
    7d7a:	f1 e0       	ldi	r31, 0x01	; 1
    7d7c:	83 e3       	ldi	r24, 0x33	; 51
    7d7e:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    7d80:	e0 ec       	ldi	r30, 0xC0	; 192
    7d82:	f1 e0       	ldi	r31, 0x01	; 1
    7d84:	89 81       	ldd	r24, Y+1	; 0x01
    7d86:	80 83       	st	Z, r24
	NVM.ADDR1 = 0x00;
    7d88:	e0 ec       	ldi	r30, 0xC0	; 192
    7d8a:	f1 e0       	ldi	r31, 0x01	; 1
    7d8c:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    7d8e:	e0 ec       	ldi	r30, 0xC0	; 192
    7d90:	f1 e0       	ldi	r31, 0x01	; 1
    7d92:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    7d94:	e0 ec       	ldi	r30, 0xC0	; 192
    7d96:	f1 e0       	ldi	r31, 0x01	; 1
    7d98:	8a 81       	ldd	r24, Y+2	; 0x02
    7d9a:	84 83       	std	Z+4, r24	; 0x04
}
    7d9c:	0f 90       	pop	r0
    7d9e:	0f 90       	pop	r0
    7da0:	cf 91       	pop	r28
    7da2:	df 91       	pop	r29
    7da4:	08 95       	ret

00007da6 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    7da6:	df 93       	push	r29
    7da8:	cf 93       	push	r28
    7daa:	00 d0       	rcall	.+0      	; 0x7dac <EEPROM_LoadPage+0x6>
    7dac:	cd b7       	in	r28, 0x3d	; 61
    7dae:	de b7       	in	r29, 0x3e	; 62
    7db0:	8a 83       	std	Y+2, r24	; 0x02
    7db2:	9b 83       	std	Y+3, r25	; 0x03
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    7db4:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    7db8:	e0 ec       	ldi	r30, 0xC0	; 192
    7dba:	f1 e0       	ldi	r31, 0x01	; 1
    7dbc:	83 e3       	ldi	r24, 0x33	; 51
    7dbe:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    7dc0:	e0 ec       	ldi	r30, 0xC0	; 192
    7dc2:	f1 e0       	ldi	r31, 0x01	; 1
    7dc4:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    7dc6:	e0 ec       	ldi	r30, 0xC0	; 192
    7dc8:	f1 e0       	ldi	r31, 0x01	; 1
    7dca:	12 82       	std	Z+2, r1	; 0x02

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    7dcc:	19 82       	std	Y+1, r1	; 0x01
    7dce:	14 c0       	rjmp	.+40     	; 0x7df8 <EEPROM_LoadPage+0x52>
		NVM.ADDR0 = i;
    7dd0:	e0 ec       	ldi	r30, 0xC0	; 192
    7dd2:	f1 e0       	ldi	r31, 0x01	; 1
    7dd4:	89 81       	ldd	r24, Y+1	; 0x01
    7dd6:	80 83       	st	Z, r24
		NVM.DATA0 = *values;
    7dd8:	a0 ec       	ldi	r26, 0xC0	; 192
    7dda:	b1 e0       	ldi	r27, 0x01	; 1
    7ddc:	ea 81       	ldd	r30, Y+2	; 0x02
    7dde:	fb 81       	ldd	r31, Y+3	; 0x03
    7de0:	80 81       	ld	r24, Z
    7de2:	14 96       	adiw	r26, 0x04	; 4
    7de4:	8c 93       	st	X, r24
    7de6:	14 97       	sbiw	r26, 0x04	; 4
		++values;
    7de8:	8a 81       	ldd	r24, Y+2	; 0x02
    7dea:	9b 81       	ldd	r25, Y+3	; 0x03
    7dec:	01 96       	adiw	r24, 0x01	; 1
    7dee:	8a 83       	std	Y+2, r24	; 0x02
    7df0:	9b 83       	std	Y+3, r25	; 0x03
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    7df2:	89 81       	ldd	r24, Y+1	; 0x01
    7df4:	8f 5f       	subi	r24, 0xFF	; 255
    7df6:	89 83       	std	Y+1, r24	; 0x01
    7df8:	89 81       	ldd	r24, Y+1	; 0x01
    7dfa:	80 32       	cpi	r24, 0x20	; 32
    7dfc:	48 f3       	brcs	.-46     	; 0x7dd0 <EEPROM_LoadPage+0x2a>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    7dfe:	23 96       	adiw	r28, 0x03	; 3
    7e00:	cd bf       	out	0x3d, r28	; 61
    7e02:	de bf       	out	0x3e, r29	; 62
    7e04:	cf 91       	pop	r28
    7e06:	df 91       	pop	r29
    7e08:	08 95       	ret

00007e0a <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    7e0a:	df 93       	push	r29
    7e0c:	cf 93       	push	r28
    7e0e:	00 d0       	rcall	.+0      	; 0x7e10 <EEPROM_AtomicWritePage+0x6>
    7e10:	cd b7       	in	r28, 0x3d	; 61
    7e12:	de b7       	in	r29, 0x3e	; 62
    7e14:	8b 83       	std	Y+3, r24	; 0x03
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    7e16:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    7e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    7e1c:	88 2f       	mov	r24, r24
    7e1e:	90 e0       	ldi	r25, 0x00	; 0
    7e20:	88 0f       	add	r24, r24
    7e22:	99 1f       	adc	r25, r25
    7e24:	82 95       	swap	r24
    7e26:	92 95       	swap	r25
    7e28:	90 7f       	andi	r25, 0xF0	; 240
    7e2a:	98 27       	eor	r25, r24
    7e2c:	80 7f       	andi	r24, 0xF0	; 240
    7e2e:	98 27       	eor	r25, r24
    7e30:	89 83       	std	Y+1, r24	; 0x01
    7e32:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    7e34:	e0 ec       	ldi	r30, 0xC0	; 192
    7e36:	f1 e0       	ldi	r31, 0x01	; 1
    7e38:	89 81       	ldd	r24, Y+1	; 0x01
    7e3a:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    7e3c:	e0 ec       	ldi	r30, 0xC0	; 192
    7e3e:	f1 e0       	ldi	r31, 0x01	; 1
    7e40:	89 81       	ldd	r24, Y+1	; 0x01
    7e42:	9a 81       	ldd	r25, Y+2	; 0x02
    7e44:	89 2f       	mov	r24, r25
    7e46:	99 27       	eor	r25, r25
    7e48:	8f 71       	andi	r24, 0x1F	; 31
    7e4a:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    7e4c:	e0 ec       	ldi	r30, 0xC0	; 192
    7e4e:	f1 e0       	ldi	r31, 0x01	; 1
    7e50:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    7e52:	e0 ec       	ldi	r30, 0xC0	; 192
    7e54:	f1 e0       	ldi	r31, 0x01	; 1
    7e56:	85 e3       	ldi	r24, 0x35	; 53
    7e58:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    7e5a:	ef 93       	push	r30
    7e5c:	ff 93       	push	r31
    7e5e:	0f 93       	push	r16
    7e60:	2f 93       	push	r18
    7e62:	eb ec       	ldi	r30, 0xCB	; 203
    7e64:	f1 e0       	ldi	r31, 0x01	; 1
    7e66:	08 ed       	ldi	r16, 0xD8	; 216
    7e68:	21 e0       	ldi	r18, 0x01	; 1
    7e6a:	04 bf       	out	0x34, r16	; 52
    7e6c:	20 83       	st	Z, r18
    7e6e:	2f 91       	pop	r18
    7e70:	0f 91       	pop	r16
    7e72:	ff 91       	pop	r31
    7e74:	ef 91       	pop	r30
}
    7e76:	23 96       	adiw	r28, 0x03	; 3
    7e78:	cd bf       	out	0x3d, r28	; 61
    7e7a:	de bf       	out	0x3e, r29	; 62
    7e7c:	cf 91       	pop	r28
    7e7e:	df 91       	pop	r29
    7e80:	08 95       	ret

00007e82 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    7e82:	df 93       	push	r29
    7e84:	cf 93       	push	r28
    7e86:	00 d0       	rcall	.+0      	; 0x7e88 <EEPROM_ErasePage+0x6>
    7e88:	cd b7       	in	r28, 0x3d	; 61
    7e8a:	de b7       	in	r29, 0x3e	; 62
    7e8c:	8b 83       	std	Y+3, r24	; 0x03
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    7e8e:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    7e92:	8b 81       	ldd	r24, Y+3	; 0x03
    7e94:	88 2f       	mov	r24, r24
    7e96:	90 e0       	ldi	r25, 0x00	; 0
    7e98:	88 0f       	add	r24, r24
    7e9a:	99 1f       	adc	r25, r25
    7e9c:	82 95       	swap	r24
    7e9e:	92 95       	swap	r25
    7ea0:	90 7f       	andi	r25, 0xF0	; 240
    7ea2:	98 27       	eor	r25, r24
    7ea4:	80 7f       	andi	r24, 0xF0	; 240
    7ea6:	98 27       	eor	r25, r24
    7ea8:	89 83       	std	Y+1, r24	; 0x01
    7eaa:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    7eac:	e0 ec       	ldi	r30, 0xC0	; 192
    7eae:	f1 e0       	ldi	r31, 0x01	; 1
    7eb0:	89 81       	ldd	r24, Y+1	; 0x01
    7eb2:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    7eb4:	e0 ec       	ldi	r30, 0xC0	; 192
    7eb6:	f1 e0       	ldi	r31, 0x01	; 1
    7eb8:	89 81       	ldd	r24, Y+1	; 0x01
    7eba:	9a 81       	ldd	r25, Y+2	; 0x02
    7ebc:	89 2f       	mov	r24, r25
    7ebe:	99 27       	eor	r25, r25
    7ec0:	8f 71       	andi	r24, 0x1F	; 31
    7ec2:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    7ec4:	e0 ec       	ldi	r30, 0xC0	; 192
    7ec6:	f1 e0       	ldi	r31, 0x01	; 1
    7ec8:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    7eca:	e0 ec       	ldi	r30, 0xC0	; 192
    7ecc:	f1 e0       	ldi	r31, 0x01	; 1
    7ece:	82 e3       	ldi	r24, 0x32	; 50
    7ed0:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    7ed2:	ef 93       	push	r30
    7ed4:	ff 93       	push	r31
    7ed6:	0f 93       	push	r16
    7ed8:	2f 93       	push	r18
    7eda:	eb ec       	ldi	r30, 0xCB	; 203
    7edc:	f1 e0       	ldi	r31, 0x01	; 1
    7ede:	08 ed       	ldi	r16, 0xD8	; 216
    7ee0:	21 e0       	ldi	r18, 0x01	; 1
    7ee2:	04 bf       	out	0x34, r16	; 52
    7ee4:	20 83       	st	Z, r18
    7ee6:	2f 91       	pop	r18
    7ee8:	0f 91       	pop	r16
    7eea:	ff 91       	pop	r31
    7eec:	ef 91       	pop	r30
}
    7eee:	23 96       	adiw	r28, 0x03	; 3
    7ef0:	cd bf       	out	0x3d, r28	; 61
    7ef2:	de bf       	out	0x3e, r29	; 62
    7ef4:	cf 91       	pop	r28
    7ef6:	df 91       	pop	r29
    7ef8:	08 95       	ret

00007efa <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    7efa:	df 93       	push	r29
    7efc:	cf 93       	push	r28
    7efe:	00 d0       	rcall	.+0      	; 0x7f00 <EEPROM_SplitWritePage+0x6>
    7f00:	cd b7       	in	r28, 0x3d	; 61
    7f02:	de b7       	in	r29, 0x3e	; 62
    7f04:	8b 83       	std	Y+3, r24	; 0x03
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    7f06:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    7f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    7f0c:	88 2f       	mov	r24, r24
    7f0e:	90 e0       	ldi	r25, 0x00	; 0
    7f10:	88 0f       	add	r24, r24
    7f12:	99 1f       	adc	r25, r25
    7f14:	82 95       	swap	r24
    7f16:	92 95       	swap	r25
    7f18:	90 7f       	andi	r25, 0xF0	; 240
    7f1a:	98 27       	eor	r25, r24
    7f1c:	80 7f       	andi	r24, 0xF0	; 240
    7f1e:	98 27       	eor	r25, r24
    7f20:	89 83       	std	Y+1, r24	; 0x01
    7f22:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    7f24:	e0 ec       	ldi	r30, 0xC0	; 192
    7f26:	f1 e0       	ldi	r31, 0x01	; 1
    7f28:	89 81       	ldd	r24, Y+1	; 0x01
    7f2a:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    7f2c:	e0 ec       	ldi	r30, 0xC0	; 192
    7f2e:	f1 e0       	ldi	r31, 0x01	; 1
    7f30:	89 81       	ldd	r24, Y+1	; 0x01
    7f32:	9a 81       	ldd	r25, Y+2	; 0x02
    7f34:	89 2f       	mov	r24, r25
    7f36:	99 27       	eor	r25, r25
    7f38:	8f 71       	andi	r24, 0x1F	; 31
    7f3a:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    7f3c:	e0 ec       	ldi	r30, 0xC0	; 192
    7f3e:	f1 e0       	ldi	r31, 0x01	; 1
    7f40:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    7f42:	e0 ec       	ldi	r30, 0xC0	; 192
    7f44:	f1 e0       	ldi	r31, 0x01	; 1
    7f46:	84 e3       	ldi	r24, 0x34	; 52
    7f48:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    7f4a:	ef 93       	push	r30
    7f4c:	ff 93       	push	r31
    7f4e:	0f 93       	push	r16
    7f50:	2f 93       	push	r18
    7f52:	eb ec       	ldi	r30, 0xCB	; 203
    7f54:	f1 e0       	ldi	r31, 0x01	; 1
    7f56:	08 ed       	ldi	r16, 0xD8	; 216
    7f58:	21 e0       	ldi	r18, 0x01	; 1
    7f5a:	04 bf       	out	0x34, r16	; 52
    7f5c:	20 83       	st	Z, r18
    7f5e:	2f 91       	pop	r18
    7f60:	0f 91       	pop	r16
    7f62:	ff 91       	pop	r31
    7f64:	ef 91       	pop	r30
}
    7f66:	23 96       	adiw	r28, 0x03	; 3
    7f68:	cd bf       	out	0x3d, r28	; 61
    7f6a:	de bf       	out	0x3e, r29	; 62
    7f6c:	cf 91       	pop	r28
    7f6e:	df 91       	pop	r29
    7f70:	08 95       	ret

00007f72 <EEPROM_EraseAll>:
/* Erase entire EEPROM memory.
 *
 *  This function erases the entire EEPROM memory block to 0xFF.
 */
void EEPROM_EraseAll( void )
{
    7f72:	df 93       	push	r29
    7f74:	cf 93       	push	r28
    7f76:	cd b7       	in	r28, 0x3d	; 61
    7f78:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    7f7a:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <EEPROM_WaitForNVM>

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    7f7e:	e0 ec       	ldi	r30, 0xC0	; 192
    7f80:	f1 e0       	ldi	r31, 0x01	; 1
    7f82:	80 e3       	ldi	r24, 0x30	; 48
    7f84:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    7f86:	ef 93       	push	r30
    7f88:	ff 93       	push	r31
    7f8a:	0f 93       	push	r16
    7f8c:	2f 93       	push	r18
    7f8e:	eb ec       	ldi	r30, 0xCB	; 203
    7f90:	f1 e0       	ldi	r31, 0x01	; 1
    7f92:	08 ed       	ldi	r16, 0xD8	; 216
    7f94:	21 e0       	ldi	r18, 0x01	; 1
    7f96:	04 bf       	out	0x34, r16	; 52
    7f98:	20 83       	st	Z, r18
    7f9a:	2f 91       	pop	r18
    7f9c:	0f 91       	pop	r16
    7f9e:	ff 91       	pop	r31
    7fa0:	ef 91       	pop	r30
}
    7fa2:	cf 91       	pop	r28
    7fa4:	df 91       	pop	r29
    7fa6:	08 95       	ret

00007fa8 <xio_pgm_init>:
 *
 *  Control parameters are defaulted and may be set using xio_pgm_control()
 */

void xio_pgm_init(const uint16_t control)
{
    7fa8:	df 93       	push	r29
    7faa:	cf 93       	push	r28
    7fac:	0f 92       	push	r0
    7fae:	0f 92       	push	r0
    7fb0:	cd b7       	in	r28, 0x3d	; 61
    7fb2:	de b7       	in	r29, 0x3e	; 62
    7fb4:	89 83       	std	Y+1, r24	; 0x01
    7fb6:	9a 83       	std	Y+2, r25	; 0x02
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;	// set flags to defaults & initial state
    7fb8:	85 e0       	ldi	r24, 0x05	; 5
    7fba:	90 e0       	ldi	r25, 0x00	; 0
    7fbc:	80 93 ed 21 	sts	0x21ED, r24
    7fc0:	90 93 ee 21 	sts	0x21EE, r25
	if (control & XIO_WR) {				// this is actually an error. Ignore for now.
    7fc4:	89 81       	ldd	r24, Y+1	; 0x01
    7fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    7fc8:	80 72       	andi	r24, 0x20	; 32
    7fca:	90 70       	andi	r25, 0x00	; 0
    7fcc:	00 97       	sbiw	r24, 0x00	; 0
    7fce:	49 f0       	breq	.+18     	; 0x7fe2 <xio_pgm_init+0x3a>
		fpgm.flags |= XIO_FLAG_WR_bm;
    7fd0:	80 91 ed 21 	lds	r24, 0x21ED
    7fd4:	90 91 ee 21 	lds	r25, 0x21EE
    7fd8:	82 60       	ori	r24, 0x02	; 2
    7fda:	80 93 ed 21 	sts	0x21ED, r24
    7fde:	90 93 ee 21 	sts	0x21EE, r25
	}
	if (control & XIO_NOBLOCK) {		// this is also technically a config error.
    7fe2:	89 81       	ldd	r24, Y+1	; 0x01
    7fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    7fe6:	80 78       	andi	r24, 0x80	; 128
    7fe8:	90 70       	andi	r25, 0x00	; 0
    7fea:	00 97       	sbiw	r24, 0x00	; 0
    7fec:	49 f0       	breq	.+18     	; 0x8000 <xio_pgm_init+0x58>
		fpgm.flags &= ~XIO_FLAG_BLOCK_bm;
    7fee:	80 91 ed 21 	lds	r24, 0x21ED
    7ff2:	90 91 ee 21 	lds	r25, 0x21EE
    7ff6:	8b 7f       	andi	r24, 0xFB	; 251
    7ff8:	80 93 ed 21 	sts	0x21ED, r24
    7ffc:	90 93 ee 21 	sts	0x21EE, r25
	}
	if (control & XIO_ECHO) {
    8000:	89 81       	ldd	r24, Y+1	; 0x01
    8002:	9a 81       	ldd	r25, Y+2	; 0x02
    8004:	80 70       	andi	r24, 0x00	; 0
    8006:	91 70       	andi	r25, 0x01	; 1
    8008:	00 97       	sbiw	r24, 0x00	; 0
    800a:	49 f0       	breq	.+18     	; 0x801e <xio_pgm_init+0x76>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    800c:	80 91 ed 21 	lds	r24, 0x21ED
    8010:	90 91 ee 21 	lds	r25, 0x21EE
    8014:	80 61       	ori	r24, 0x10	; 16
    8016:	80 93 ed 21 	sts	0x21ED, r24
    801a:	90 93 ee 21 	sts	0x21EE, r25
	}
	if (control & XIO_NOECHO) {
    801e:	89 81       	ldd	r24, Y+1	; 0x01
    8020:	9a 81       	ldd	r25, Y+2	; 0x02
    8022:	80 70       	andi	r24, 0x00	; 0
    8024:	92 70       	andi	r25, 0x02	; 2
    8026:	00 97       	sbiw	r24, 0x00	; 0
    8028:	49 f0       	breq	.+18     	; 0x803c <xio_pgm_init+0x94>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    802a:	80 91 ed 21 	lds	r24, 0x21ED
    802e:	90 91 ee 21 	lds	r25, 0x21EE
    8032:	8f 7e       	andi	r24, 0xEF	; 239
    8034:	80 93 ed 21 	sts	0x21ED, r24
    8038:	90 93 ee 21 	sts	0x21EE, r25
	}
	if (control & XIO_CRLF) {
    803c:	89 81       	ldd	r24, Y+1	; 0x01
    803e:	9a 81       	ldd	r25, Y+2	; 0x02
    8040:	80 70       	andi	r24, 0x00	; 0
    8042:	94 70       	andi	r25, 0x04	; 4
    8044:	00 97       	sbiw	r24, 0x00	; 0
    8046:	49 f0       	breq	.+18     	; 0x805a <xio_pgm_init+0xb2>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    8048:	80 91 ed 21 	lds	r24, 0x21ED
    804c:	90 91 ee 21 	lds	r25, 0x21EE
    8050:	80 62       	ori	r24, 0x20	; 32
    8052:	80 93 ed 21 	sts	0x21ED, r24
    8056:	90 93 ee 21 	sts	0x21EE, r25
	}
	if (control & XIO_NOCRLF) {
    805a:	89 81       	ldd	r24, Y+1	; 0x01
    805c:	9a 81       	ldd	r25, Y+2	; 0x02
    805e:	80 70       	andi	r24, 0x00	; 0
    8060:	98 70       	andi	r25, 0x08	; 8
    8062:	00 97       	sbiw	r24, 0x00	; 0
    8064:	49 f0       	breq	.+18     	; 0x8078 <xio_pgm_init+0xd0>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    8066:	80 91 ed 21 	lds	r24, 0x21ED
    806a:	90 91 ee 21 	lds	r25, 0x21EE
    806e:	8f 7d       	andi	r24, 0xDF	; 223
    8070:	80 93 ed 21 	sts	0x21ED, r24
    8074:	90 93 ee 21 	sts	0x21EE, r25
	}
	if (control & XIO_LINEMODE) {
    8078:	89 81       	ldd	r24, Y+1	; 0x01
    807a:	9a 81       	ldd	r25, Y+2	; 0x02
    807c:	80 70       	andi	r24, 0x00	; 0
    807e:	90 71       	andi	r25, 0x10	; 16
    8080:	00 97       	sbiw	r24, 0x00	; 0
    8082:	49 f0       	breq	.+18     	; 0x8096 <xio_pgm_init+0xee>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    8084:	80 91 ed 21 	lds	r24, 0x21ED
    8088:	90 91 ee 21 	lds	r25, 0x21EE
    808c:	80 64       	ori	r24, 0x40	; 64
    808e:	80 93 ed 21 	sts	0x21ED, r24
    8092:	90 93 ee 21 	sts	0x21EE, r25
	}
	if (control & XIO_NOLINEMODE) {
    8096:	89 81       	ldd	r24, Y+1	; 0x01
    8098:	9a 81       	ldd	r25, Y+2	; 0x02
    809a:	80 70       	andi	r24, 0x00	; 0
    809c:	90 72       	andi	r25, 0x20	; 32
    809e:	00 97       	sbiw	r24, 0x00	; 0
    80a0:	49 f0       	breq	.+18     	; 0x80b4 <xio_pgm_init+0x10c>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    80a2:	80 91 ed 21 	lds	r24, 0x21ED
    80a6:	90 91 ee 21 	lds	r25, 0x21EE
    80aa:	8f 7b       	andi	r24, 0xBF	; 191
    80ac:	80 93 ed 21 	sts	0x21ED, r24
    80b0:	90 93 ee 21 	sts	0x21EE, r25
	}
	if (control & XIO_SEMICOLONS) {
    80b4:	89 81       	ldd	r24, Y+1	; 0x01
    80b6:	9a 81       	ldd	r25, Y+2	; 0x02
    80b8:	80 70       	andi	r24, 0x00	; 0
    80ba:	90 74       	andi	r25, 0x40	; 64
    80bc:	00 97       	sbiw	r24, 0x00	; 0
    80be:	49 f0       	breq	.+18     	; 0x80d2 <xio_pgm_init+0x12a>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    80c0:	80 91 ed 21 	lds	r24, 0x21ED
    80c4:	90 91 ee 21 	lds	r25, 0x21EE
    80c8:	80 68       	ori	r24, 0x80	; 128
    80ca:	80 93 ed 21 	sts	0x21ED, r24
    80ce:	90 93 ee 21 	sts	0x21EE, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    80d2:	89 81       	ldd	r24, Y+1	; 0x01
    80d4:	9a 81       	ldd	r25, Y+2	; 0x02
    80d6:	99 23       	and	r25, r25
    80d8:	4c f4       	brge	.+18     	; 0x80ec <xio_pgm_init+0x144>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    80da:	80 91 ed 21 	lds	r24, 0x21ED
    80de:	90 91 ee 21 	lds	r25, 0x21EE
    80e2:	8f 77       	andi	r24, 0x7F	; 127
    80e4:	80 93 ed 21 	sts	0x21ED, r24
    80e8:	90 93 ee 21 	sts	0x21EE, r25
	}
	fpgm.idx = 0;
    80ec:	10 92 fb 21 	sts	0x21FB, r1
    80f0:	10 92 fc 21 	sts	0x21FC, r1
	fpgm.sig = 0;
    80f4:	10 92 ef 21 	sts	0x21EF, r1
	dev_pgm.udata = &(fpgm.sig); 	// bind signals register to pgm FILE struct
    80f8:	8f ee       	ldi	r24, 0xEF	; 239
    80fa:	91 e2       	ldi	r25, 0x21	; 33
    80fc:	80 93 1d 20 	sts	0x201D, r24
    8100:	90 93 1e 20 	sts	0x201E, r25
	fpgm.len = sizeof(fpgm.buf);
    8104:	82 e0       	ldi	r24, 0x02	; 2
    8106:	80 93 f2 21 	sts	0x21F2, r24
}
    810a:	0f 90       	pop	r0
    810c:	0f 90       	pop	r0
    810e:	cf 91       	pop	r28
    8110:	df 91       	pop	r29
    8112:	08 95       	ret

00008114 <xio_pgm_open>:
 *	OK, so this is not really a UNIX open() except for it's moral equivalency
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

FILE * xio_pgm_open(const prog_char *addr)
{
    8114:	df 93       	push	r29
    8116:	cf 93       	push	r28
    8118:	0f 92       	push	r0
    811a:	0f 92       	push	r0
    811c:	cd b7       	in	r28, 0x3d	; 61
    811e:	de b7       	in	r29, 0x3e	; 62
    8120:	89 83       	std	Y+1, r24	; 0x01
    8122:	9a 83       	std	Y+2, r25	; 0x02
	fpgm.flags &= XIO_FLAG_RESET_gm;			// reset the signaling bits
    8124:	80 91 ed 21 	lds	r24, 0x21ED
    8128:	90 91 ee 21 	lds	r25, 0x21EE
    812c:	9f 70       	andi	r25, 0x0F	; 15
    812e:	80 93 ed 21 	sts	0x21ED, r24
    8132:	90 93 ee 21 	sts	0x21EE, r25
	fpgm.pgmbase_P = (PROGMEM char *)addr;		// might want to range check this
    8136:	89 81       	ldd	r24, Y+1	; 0x01
    8138:	9a 81       	ldd	r25, Y+2	; 0x02
    813a:	80 93 f9 21 	sts	0x21F9, r24
    813e:	90 93 fa 21 	sts	0x21FA, r25
	fpgm.idx = 0;
    8142:	10 92 fb 21 	sts	0x21FB, r1
    8146:	10 92 fc 21 	sts	0x21FC, r1
	return(&dev_pgm);
    814a:	81 e1       	ldi	r24, 0x11	; 17
    814c:	90 e2       	ldi	r25, 0x20	; 32
}
    814e:	0f 90       	pop	r0
    8150:	0f 90       	pop	r0
    8152:	cf 91       	pop	r28
    8154:	df 91       	pop	r29
    8156:	08 95       	ret

00008158 <xio_pgm_control>:
 *	XIO_SEMICOLONS <null>		Treat semicolons as line breaks
 *	XIO_NOSEMICOLONS <null>	Y	Don't treat semicolons as line breaks
 */

int8_t xio_pgm_control(const uint16_t control, const int16_t arg)
{
    8158:	df 93       	push	r29
    815a:	cf 93       	push	r28
    815c:	00 d0       	rcall	.+0      	; 0x815e <xio_pgm_control+0x6>
    815e:	0f 92       	push	r0
    8160:	cd b7       	in	r28, 0x3d	; 61
    8162:	de b7       	in	r29, 0x3e	; 62
    8164:	89 83       	std	Y+1, r24	; 0x01
    8166:	9a 83       	std	Y+2, r25	; 0x02
    8168:	6b 83       	std	Y+3, r22	; 0x03
    816a:	7c 83       	std	Y+4, r23	; 0x04
	// transfer control flags to internal flag bits
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;		// set flags to defaults & initial state
    816c:	85 e0       	ldi	r24, 0x05	; 5
    816e:	90 e0       	ldi	r25, 0x00	; 0
    8170:	80 93 ed 21 	sts	0x21ED, r24
    8174:	90 93 ee 21 	sts	0x21EE, r25
	if (control & XIO_ECHO) {
    8178:	89 81       	ldd	r24, Y+1	; 0x01
    817a:	9a 81       	ldd	r25, Y+2	; 0x02
    817c:	80 70       	andi	r24, 0x00	; 0
    817e:	91 70       	andi	r25, 0x01	; 1
    8180:	00 97       	sbiw	r24, 0x00	; 0
    8182:	49 f0       	breq	.+18     	; 0x8196 <xio_pgm_control+0x3e>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    8184:	80 91 ed 21 	lds	r24, 0x21ED
    8188:	90 91 ee 21 	lds	r25, 0x21EE
    818c:	80 61       	ori	r24, 0x10	; 16
    818e:	80 93 ed 21 	sts	0x21ED, r24
    8192:	90 93 ee 21 	sts	0x21EE, r25
	}
	if (control & XIO_NOECHO) {
    8196:	89 81       	ldd	r24, Y+1	; 0x01
    8198:	9a 81       	ldd	r25, Y+2	; 0x02
    819a:	80 70       	andi	r24, 0x00	; 0
    819c:	92 70       	andi	r25, 0x02	; 2
    819e:	00 97       	sbiw	r24, 0x00	; 0
    81a0:	49 f0       	breq	.+18     	; 0x81b4 <xio_pgm_control+0x5c>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    81a2:	80 91 ed 21 	lds	r24, 0x21ED
    81a6:	90 91 ee 21 	lds	r25, 0x21EE
    81aa:	8f 7e       	andi	r24, 0xEF	; 239
    81ac:	80 93 ed 21 	sts	0x21ED, r24
    81b0:	90 93 ee 21 	sts	0x21EE, r25
	}
	if (control & XIO_CRLF) {
    81b4:	89 81       	ldd	r24, Y+1	; 0x01
    81b6:	9a 81       	ldd	r25, Y+2	; 0x02
    81b8:	80 70       	andi	r24, 0x00	; 0
    81ba:	94 70       	andi	r25, 0x04	; 4
    81bc:	00 97       	sbiw	r24, 0x00	; 0
    81be:	49 f0       	breq	.+18     	; 0x81d2 <xio_pgm_control+0x7a>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    81c0:	80 91 ed 21 	lds	r24, 0x21ED
    81c4:	90 91 ee 21 	lds	r25, 0x21EE
    81c8:	80 62       	ori	r24, 0x20	; 32
    81ca:	80 93 ed 21 	sts	0x21ED, r24
    81ce:	90 93 ee 21 	sts	0x21EE, r25
	}
	if (control & XIO_NOCRLF) {
    81d2:	89 81       	ldd	r24, Y+1	; 0x01
    81d4:	9a 81       	ldd	r25, Y+2	; 0x02
    81d6:	80 70       	andi	r24, 0x00	; 0
    81d8:	98 70       	andi	r25, 0x08	; 8
    81da:	00 97       	sbiw	r24, 0x00	; 0
    81dc:	49 f0       	breq	.+18     	; 0x81f0 <xio_pgm_control+0x98>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    81de:	80 91 ed 21 	lds	r24, 0x21ED
    81e2:	90 91 ee 21 	lds	r25, 0x21EE
    81e6:	8f 7d       	andi	r24, 0xDF	; 223
    81e8:	80 93 ed 21 	sts	0x21ED, r24
    81ec:	90 93 ee 21 	sts	0x21EE, r25
	}
	if (control & XIO_LINEMODE) {
    81f0:	89 81       	ldd	r24, Y+1	; 0x01
    81f2:	9a 81       	ldd	r25, Y+2	; 0x02
    81f4:	80 70       	andi	r24, 0x00	; 0
    81f6:	90 71       	andi	r25, 0x10	; 16
    81f8:	00 97       	sbiw	r24, 0x00	; 0
    81fa:	49 f0       	breq	.+18     	; 0x820e <xio_pgm_control+0xb6>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    81fc:	80 91 ed 21 	lds	r24, 0x21ED
    8200:	90 91 ee 21 	lds	r25, 0x21EE
    8204:	80 64       	ori	r24, 0x40	; 64
    8206:	80 93 ed 21 	sts	0x21ED, r24
    820a:	90 93 ee 21 	sts	0x21EE, r25
	}
	if (control & XIO_NOLINEMODE) {
    820e:	89 81       	ldd	r24, Y+1	; 0x01
    8210:	9a 81       	ldd	r25, Y+2	; 0x02
    8212:	80 70       	andi	r24, 0x00	; 0
    8214:	90 72       	andi	r25, 0x20	; 32
    8216:	00 97       	sbiw	r24, 0x00	; 0
    8218:	49 f0       	breq	.+18     	; 0x822c <xio_pgm_control+0xd4>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    821a:	80 91 ed 21 	lds	r24, 0x21ED
    821e:	90 91 ee 21 	lds	r25, 0x21EE
    8222:	8f 7b       	andi	r24, 0xBF	; 191
    8224:	80 93 ed 21 	sts	0x21ED, r24
    8228:	90 93 ee 21 	sts	0x21EE, r25
	}
	if (control & XIO_SEMICOLONS) {
    822c:	89 81       	ldd	r24, Y+1	; 0x01
    822e:	9a 81       	ldd	r25, Y+2	; 0x02
    8230:	80 70       	andi	r24, 0x00	; 0
    8232:	90 74       	andi	r25, 0x40	; 64
    8234:	00 97       	sbiw	r24, 0x00	; 0
    8236:	49 f0       	breq	.+18     	; 0x824a <xio_pgm_control+0xf2>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    8238:	80 91 ed 21 	lds	r24, 0x21ED
    823c:	90 91 ee 21 	lds	r25, 0x21EE
    8240:	80 68       	ori	r24, 0x80	; 128
    8242:	80 93 ed 21 	sts	0x21ED, r24
    8246:	90 93 ee 21 	sts	0x21EE, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    824a:	89 81       	ldd	r24, Y+1	; 0x01
    824c:	9a 81       	ldd	r25, Y+2	; 0x02
    824e:	99 23       	and	r25, r25
    8250:	4c f4       	brge	.+18     	; 0x8264 <xio_pgm_control+0x10c>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    8252:	80 91 ed 21 	lds	r24, 0x21ED
    8256:	90 91 ee 21 	lds	r25, 0x21EE
    825a:	8f 77       	andi	r24, 0x7F	; 127
    825c:	80 93 ed 21 	sts	0x21ED, r24
    8260:	90 93 ee 21 	sts	0x21EE, r25
	}
	return (0);
    8264:	80 e0       	ldi	r24, 0x00	; 0
}
    8266:	24 96       	adiw	r28, 0x04	; 4
    8268:	cd bf       	out	0x3d, r28	; 61
    826a:	de bf       	out	0x3e, r29	; 62
    826c:	cf 91       	pop	r28
    826e:	df 91       	pop	r29
    8270:	08 95       	ret

00008272 <xio_pgm_putc>:
 *
 *  Always returns error. You cannot write to program memory
 */

int xio_pgm_putc(const char c, FILE *stream)
{
    8272:	df 93       	push	r29
    8274:	cf 93       	push	r28
    8276:	00 d0       	rcall	.+0      	; 0x8278 <xio_pgm_putc+0x6>
    8278:	cd b7       	in	r28, 0x3d	; 61
    827a:	de b7       	in	r29, 0x3e	; 62
    827c:	89 83       	std	Y+1, r24	; 0x01
    827e:	6a 83       	std	Y+2, r22	; 0x02
    8280:	7b 83       	std	Y+3, r23	; 0x03
	return -1;			// always returns an error. Big surprise.
    8282:	8f ef       	ldi	r24, 0xFF	; 255
    8284:	9f ef       	ldi	r25, 0xFF	; 255
}
    8286:	23 96       	adiw	r28, 0x03	; 3
    8288:	cd bf       	out	0x3d, r28	; 61
    828a:	de bf       	out	0x3e, r29	; 62
    828c:	cf 91       	pop	r28
    828e:	df 91       	pop	r29
    8290:	08 95       	ret

00008292 <xio_pgm_getc>:
 *		- echo all line termination chars as newlines ('\n')
 *		- Note: putc should expand newlines to <cr><lf>
 */

int xio_pgm_getc(FILE *stream)
{
    8292:	df 93       	push	r29
    8294:	cf 93       	push	r28
    8296:	cd b7       	in	r28, 0x3d	; 61
    8298:	de b7       	in	r29, 0x3e	; 62
    829a:	27 97       	sbiw	r28, 0x07	; 7
    829c:	cd bf       	out	0x3d, r28	; 61
    829e:	de bf       	out	0x3e, r29	; 62
    82a0:	8c 83       	std	Y+4, r24	; 0x04
    82a2:	9d 83       	std	Y+5, r25	; 0x05
	if (fpgm.flags & XIO_FLAG_EOF_bm) {
    82a4:	80 91 ed 21 	lds	r24, 0x21ED
    82a8:	90 91 ee 21 	lds	r25, 0x21EE
    82ac:	80 70       	andi	r24, 0x00	; 0
    82ae:	90 72       	andi	r25, 0x20	; 32
    82b0:	00 97       	sbiw	r24, 0x00	; 0
    82b2:	41 f0       	breq	.+16     	; 0x82c4 <xio_pgm_getc+0x32>
		fpgm.sig = XIO_SIG_EOF;
    82b4:	82 e0       	ldi	r24, 0x02	; 2
    82b6:	80 93 ef 21 	sts	0x21EF, r24
		return (_FDEV_EOF);
    82ba:	2e ef       	ldi	r18, 0xFE	; 254
    82bc:	3f ef       	ldi	r19, 0xFF	; 255
    82be:	2e 83       	std	Y+6, r18	; 0x06
    82c0:	3f 83       	std	Y+7, r19	; 0x07
    82c2:	83 c0       	rjmp	.+262    	; 0x83ca <xio_pgm_getc+0x138>
	}
	if ((fpgm.c = pgm_read_byte(&fpgm.pgmbase_P[fpgm.idx])) == NUL) {
    82c4:	20 91 f9 21 	lds	r18, 0x21F9
    82c8:	30 91 fa 21 	lds	r19, 0x21FA
    82cc:	80 91 fb 21 	lds	r24, 0x21FB
    82d0:	90 91 fc 21 	lds	r25, 0x21FC
    82d4:	82 0f       	add	r24, r18
    82d6:	93 1f       	adc	r25, r19
    82d8:	8a 83       	std	Y+2, r24	; 0x02
    82da:	9b 83       	std	Y+3, r25	; 0x03
    82dc:	ea 81       	ldd	r30, Y+2	; 0x02
    82de:	fb 81       	ldd	r31, Y+3	; 0x03
    82e0:	84 91       	lpm	r24, Z+
    82e2:	89 83       	std	Y+1, r24	; 0x01
    82e4:	89 81       	ldd	r24, Y+1	; 0x01
    82e6:	80 93 f0 21 	sts	0x21F0, r24
    82ea:	80 91 f0 21 	lds	r24, 0x21F0
    82ee:	88 23       	and	r24, r24
    82f0:	49 f4       	brne	.+18     	; 0x8304 <xio_pgm_getc+0x72>
		fpgm.flags |= XIO_FLAG_EOF_bm;
    82f2:	80 91 ed 21 	lds	r24, 0x21ED
    82f6:	90 91 ee 21 	lds	r25, 0x21EE
    82fa:	90 62       	ori	r25, 0x20	; 32
    82fc:	80 93 ed 21 	sts	0x21ED, r24
    8300:	90 93 ee 21 	sts	0x21EE, r25
	}
	++fpgm.idx;
    8304:	80 91 fb 21 	lds	r24, 0x21FB
    8308:	90 91 fc 21 	lds	r25, 0x21FC
    830c:	01 96       	adiw	r24, 0x01	; 1
    830e:	80 93 fb 21 	sts	0x21FB, r24
    8312:	90 93 fc 21 	sts	0x21FC, r25
	if (!LINEMODE(fpgm.flags)) {		// processing is simple if not LINEMODE
    8316:	80 91 ed 21 	lds	r24, 0x21ED
    831a:	90 91 ee 21 	lds	r25, 0x21EE
    831e:	80 74       	andi	r24, 0x40	; 64
    8320:	90 70       	andi	r25, 0x00	; 0
    8322:	00 97       	sbiw	r24, 0x00	; 0
    8324:	d1 f4       	brne	.+52     	; 0x835a <xio_pgm_getc+0xc8>
		if (ECHO(fpgm.flags)) {
    8326:	80 91 ed 21 	lds	r24, 0x21ED
    832a:	90 91 ee 21 	lds	r25, 0x21EE
    832e:	80 71       	andi	r24, 0x10	; 16
    8330:	90 70       	andi	r25, 0x00	; 0
    8332:	00 97       	sbiw	r24, 0x00	; 0
    8334:	59 f0       	breq	.+22     	; 0x834c <xio_pgm_getc+0xba>
			putchar(fpgm.c);
    8336:	80 91 f0 21 	lds	r24, 0x21F0
    833a:	88 2f       	mov	r24, r24
    833c:	90 e0       	ldi	r25, 0x00	; 0
    833e:	20 91 64 25 	lds	r18, 0x2564
    8342:	30 91 65 25 	lds	r19, 0x2565
    8346:	b9 01       	movw	r22, r18
    8348:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
		}
		return (fpgm.c);
    834c:	80 91 f0 21 	lds	r24, 0x21F0
    8350:	28 2f       	mov	r18, r24
    8352:	30 e0       	ldi	r19, 0x00	; 0
    8354:	2e 83       	std	Y+6, r18	; 0x06
    8356:	3f 83       	std	Y+7, r19	; 0x07
    8358:	38 c0       	rjmp	.+112    	; 0x83ca <xio_pgm_getc+0x138>
	}
	// now do the LINEMODE stuff
	if (fpgm.c == NUL) {				// perform newline substitutions
    835a:	80 91 f0 21 	lds	r24, 0x21F0
    835e:	88 23       	and	r24, r24
    8360:	21 f4       	brne	.+8      	; 0x836a <xio_pgm_getc+0xd8>
		fpgm.c = '\n';
    8362:	8a e0       	ldi	r24, 0x0A	; 10
    8364:	80 93 f0 21 	sts	0x21F0, r24
    8368:	17 c0       	rjmp	.+46     	; 0x8398 <xio_pgm_getc+0x106>
	} else if (fpgm.c == '\r') {
    836a:	80 91 f0 21 	lds	r24, 0x21F0
    836e:	8d 30       	cpi	r24, 0x0D	; 13
    8370:	21 f4       	brne	.+8      	; 0x837a <xio_pgm_getc+0xe8>
		fpgm.c = '\n';
    8372:	8a e0       	ldi	r24, 0x0A	; 10
    8374:	80 93 f0 21 	sts	0x21F0, r24
    8378:	0f c0       	rjmp	.+30     	; 0x8398 <xio_pgm_getc+0x106>
	} else if ((SEMICOLONS(fpgm.flags)) && (fpgm.c == ';')) {
    837a:	80 91 ed 21 	lds	r24, 0x21ED
    837e:	90 91 ee 21 	lds	r25, 0x21EE
    8382:	80 78       	andi	r24, 0x80	; 128
    8384:	90 70       	andi	r25, 0x00	; 0
    8386:	00 97       	sbiw	r24, 0x00	; 0
    8388:	39 f0       	breq	.+14     	; 0x8398 <xio_pgm_getc+0x106>
    838a:	80 91 f0 21 	lds	r24, 0x21F0
    838e:	8b 33       	cpi	r24, 0x3B	; 59
    8390:	19 f4       	brne	.+6      	; 0x8398 <xio_pgm_getc+0x106>
		fpgm.c = '\n';
    8392:	8a e0       	ldi	r24, 0x0A	; 10
    8394:	80 93 f0 21 	sts	0x21F0, r24
	}
	if (ECHO(fpgm.flags)) {
    8398:	80 91 ed 21 	lds	r24, 0x21ED
    839c:	90 91 ee 21 	lds	r25, 0x21EE
    83a0:	80 71       	andi	r24, 0x10	; 16
    83a2:	90 70       	andi	r25, 0x00	; 0
    83a4:	00 97       	sbiw	r24, 0x00	; 0
    83a6:	59 f0       	breq	.+22     	; 0x83be <xio_pgm_getc+0x12c>
		putchar(fpgm.c);
    83a8:	80 91 f0 21 	lds	r24, 0x21F0
    83ac:	88 2f       	mov	r24, r24
    83ae:	90 e0       	ldi	r25, 0x00	; 0
    83b0:	20 91 64 25 	lds	r18, 0x2564
    83b4:	30 91 65 25 	lds	r19, 0x2565
    83b8:	b9 01       	movw	r22, r18
    83ba:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
	}
	return (fpgm.c);
    83be:	80 91 f0 21 	lds	r24, 0x21F0
    83c2:	28 2f       	mov	r18, r24
    83c4:	30 e0       	ldi	r19, 0x00	; 0
    83c6:	2e 83       	std	Y+6, r18	; 0x06
    83c8:	3f 83       	std	Y+7, r19	; 0x07
    83ca:	8e 81       	ldd	r24, Y+6	; 0x06
    83cc:	9f 81       	ldd	r25, Y+7	; 0x07
}
    83ce:	27 96       	adiw	r28, 0x07	; 7
    83d0:	cd bf       	out	0x3d, r28	; 61
    83d2:	de bf       	out	0x3e, r29	; 62
    83d4:	cf 91       	pop	r28
    83d6:	df 91       	pop	r29
    83d8:	08 95       	ret

000083da <xio_pgm_readln>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_pgm_readln(char *buf, uint8_t len)
{
    83da:	df 93       	push	r29
    83dc:	cf 93       	push	r28
    83de:	cd b7       	in	r28, 0x3d	; 61
    83e0:	de b7       	in	r29, 0x3e	; 62
    83e2:	25 97       	sbiw	r28, 0x05	; 5
    83e4:	cd bf       	out	0x3d, r28	; 61
    83e6:	de bf       	out	0x3e, r29	; 62
    83e8:	89 83       	std	Y+1, r24	; 0x01
    83ea:	9a 83       	std	Y+2, r25	; 0x02
    83ec:	6b 83       	std	Y+3, r22	; 0x03
	if (!(fpgm.pgmbase_P)) {					// return error if no file is open
    83ee:	80 91 f9 21 	lds	r24, 0x21F9
    83f2:	90 91 fa 21 	lds	r25, 0x21FA
    83f6:	00 97       	sbiw	r24, 0x00	; 0
    83f8:	29 f4       	brne	.+10     	; 0x8404 <xio_pgm_readln+0x2a>
		return (TG_FILE_NOT_OPEN);
    83fa:	82 e1       	ldi	r24, 0x12	; 18
    83fc:	90 e0       	ldi	r25, 0x00	; 0
    83fe:	8c 83       	std	Y+4, r24	; 0x04
    8400:	9d 83       	std	Y+5, r25	; 0x05
    8402:	1e c0       	rjmp	.+60     	; 0x8440 <xio_pgm_readln+0x66>
	}
	fpgm.sig = XIO_SIG_OK;						// initialize signal
    8404:	10 92 ef 21 	sts	0x21EF, r1
	if (fgets(buf, len, &dev_pgm) == NULL) {
    8408:	8b 81       	ldd	r24, Y+3	; 0x03
    840a:	48 2f       	mov	r20, r24
    840c:	50 e0       	ldi	r21, 0x00	; 0
    840e:	89 81       	ldd	r24, Y+1	; 0x01
    8410:	9a 81       	ldd	r25, Y+2	; 0x02
    8412:	21 e1       	ldi	r18, 0x11	; 17
    8414:	30 e2       	ldi	r19, 0x20	; 32
    8416:	ba 01       	movw	r22, r20
    8418:	a9 01       	movw	r20, r18
    841a:	0e 94 ef 61 	call	0xc3de	; 0xc3de <fgets>
    841e:	00 97       	sbiw	r24, 0x00	; 0
    8420:	69 f4       	brne	.+26     	; 0x843c <xio_pgm_readln+0x62>
		fpgm.pgmbase_P = NULL;
    8422:	10 92 f9 21 	sts	0x21F9, r1
    8426:	10 92 fa 21 	sts	0x21FA, r1
		clearerr(&dev_pgm);
    842a:	81 e1       	ldi	r24, 0x11	; 17
    842c:	90 e2       	ldi	r25, 0x20	; 32
    842e:	0e 94 ea 61 	call	0xc3d4	; 0xc3d4 <clearerr>
		return (TG_EOF);
    8432:	85 e0       	ldi	r24, 0x05	; 5
    8434:	90 e0       	ldi	r25, 0x00	; 0
    8436:	8c 83       	std	Y+4, r24	; 0x04
    8438:	9d 83       	std	Y+5, r25	; 0x05
    843a:	02 c0       	rjmp	.+4      	; 0x8440 <xio_pgm_readln+0x66>
	}
	return (TG_OK);
    843c:	1c 82       	std	Y+4, r1	; 0x04
    843e:	1d 82       	std	Y+5, r1	; 0x05
    8440:	8c 81       	ldd	r24, Y+4	; 0x04
    8442:	9d 81       	ldd	r25, Y+5	; 0x05
}
    8444:	25 96       	adiw	r28, 0x05	; 5
    8446:	cd bf       	out	0x3d, r28	; 61
    8448:	de bf       	out	0x3e, r29	; 62
    844a:	cf 91       	pop	r28
    844c:	df 91       	pop	r29
    844e:	08 95       	ret

00008450 <tg_init>:
/*
 * tg_init()
 */

void tg_init() 
{
    8450:	df 93       	push	r29
    8452:	cf 93       	push	r28
    8454:	0f 92       	push	r0
    8456:	cd b7       	in	r28, 0x3d	; 61
    8458:	de b7       	in	r29, 0x3e	; 62
	// initialize devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) { // don't bother with /dev/null
    845a:	81 e0       	ldi	r24, 0x01	; 1
    845c:	89 83       	std	Y+1, r24	; 0x01
    845e:	27 c0       	rjmp	.+78     	; 0x84ae <tg_init+0x5e>
		tg.dev[i].flags = XIO_FLAG_ASTERISK_bm;
    8460:	89 81       	ldd	r24, Y+1	; 0x01
    8462:	28 2f       	mov	r18, r24
    8464:	30 e0       	ldi	r19, 0x00	; 0
    8466:	82 e5       	ldi	r24, 0x52	; 82
    8468:	90 e0       	ldi	r25, 0x00	; 0
    846a:	ac 01       	movw	r20, r24
    846c:	24 9f       	mul	r18, r20
    846e:	c0 01       	movw	r24, r0
    8470:	25 9f       	mul	r18, r21
    8472:	90 0d       	add	r25, r0
    8474:	34 9f       	mul	r19, r20
    8476:	90 0d       	add	r25, r0
    8478:	11 24       	eor	r1, r1
    847a:	fc 01       	movw	r30, r24
    847c:	ec 5f       	subi	r30, 0xFC	; 252
    847e:	fd 4d       	sbci	r31, 0xDD	; 221
    8480:	81 e0       	ldi	r24, 0x01	; 1
    8482:	80 83       	st	Z, r24
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    8484:	89 81       	ldd	r24, Y+1	; 0x01
    8486:	28 2f       	mov	r18, r24
    8488:	30 e0       	ldi	r19, 0x00	; 0
    848a:	82 e5       	ldi	r24, 0x52	; 82
    848c:	90 e0       	ldi	r25, 0x00	; 0
    848e:	ac 01       	movw	r20, r24
    8490:	24 9f       	mul	r18, r20
    8492:	c0 01       	movw	r24, r0
    8494:	25 9f       	mul	r18, r21
    8496:	90 0d       	add	r25, r0
    8498:	34 9f       	mul	r19, r20
    849a:	90 0d       	add	r25, r0
    849c:	11 24       	eor	r1, r1
    849e:	fc 01       	movw	r30, r24
    84a0:	eb 5f       	subi	r30, 0xFB	; 251
    84a2:	fd 4d       	sbci	r31, 0xDD	; 221
    84a4:	80 e5       	ldi	r24, 0x50	; 80
    84a6:	80 83       	st	Z, r24
 */

void tg_init() 
{
	// initialize devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) { // don't bother with /dev/null
    84a8:	89 81       	ldd	r24, Y+1	; 0x01
    84aa:	8f 5f       	subi	r24, 0xFF	; 255
    84ac:	89 83       	std	Y+1, r24	; 0x01
    84ae:	89 81       	ldd	r24, Y+1	; 0x01
    84b0:	85 30       	cpi	r24, 0x05	; 5
    84b2:	b0 f2       	brcs	.-84     	; 0x8460 <tg_init+0x10>
		tg.dev[i].flags = XIO_FLAG_ASTERISK_bm;
		tg.dev[i].len = sizeof(tg.dev[i].buf);
	}
	tg.dev[XIO_DEV_PGM].flags = 0;			// no asterisks on file devices
    84b4:	10 92 4c 23 	sts	0x234C, r1

	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
    84b8:	81 e0       	ldi	r24, 0x01	; 1
    84ba:	80 93 02 22 	sts	0x2202, r24
	_tg_set_source(tg.default_src);			// set initial active source
    84be:	80 91 02 22 	lds	r24, 0x2202
    84c2:	0e 94 e1 43 	call	0x87c2	; 0x87c2 <_tg_set_source>
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode
    84c6:	80 e0       	ldi	r24, 0x00	; 0
    84c8:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <_tg_set_mode>
	tg.state = TG_STATE_READY_UNPROMPTED;
    84cc:	10 92 fe 21 	sts	0x21FE, r1

	// version string
	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    84d0:	88 e8       	ldi	r24, 0x88	; 136
    84d2:	9b e1       	ldi	r25, 0x1B	; 27
    84d4:	2e e7       	ldi	r18, 0x7E	; 126
    84d6:	3b e1       	ldi	r19, 0x1B	; 27
    84d8:	00 d0       	rcall	.+0      	; 0x84da <tg_init+0x8a>
    84da:	0f 92       	push	r0
    84dc:	ed b7       	in	r30, 0x3d	; 61
    84de:	fe b7       	in	r31, 0x3e	; 62
    84e0:	31 96       	adiw	r30, 0x01	; 1
    84e2:	80 83       	st	Z, r24
    84e4:	91 83       	std	Z+1, r25	; 0x01
    84e6:	22 83       	std	Z+2, r18	; 0x02
    84e8:	33 83       	std	Z+3, r19	; 0x03
    84ea:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    84ee:	0f 90       	pop	r0
    84f0:	0f 90       	pop	r0
    84f2:	0f 90       	pop	r0
    84f4:	0f 90       	pop	r0
}
    84f6:	0f 90       	pop	r0
    84f8:	cf 91       	pop	r28
    84fa:	df 91       	pop	r29
    84fc:	08 95       	ret

000084fe <tg_controller>:
/* 
 * tg_controller() - top-level controller.
 */

void tg_controller()
{
    84fe:	df 93       	push	r29
    8500:	cf 93       	push	r28
    8502:	cd b7       	in	r28, 0x3d	; 61
    8504:	de b7       	in	r29, 0x3e	; 62
	// top priority tasks
	st_execute_move();
    8506:	0e 94 98 32 	call	0x6530	; 0x6530 <st_execute_move>

	// medium priority tasks
	if ((tg.status = mc_line_continuation()) == TG_EAGAIN) {	// line generator
    850a:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <mc_line_continuation>
    850e:	80 93 ff 21 	sts	0x21FF, r24
    8512:	80 91 ff 21 	lds	r24, 0x21FF
    8516:	81 30       	cpi	r24, 0x01	; 1
    8518:	91 f0       	breq	.+36     	; 0x853e <tg_controller+0x40>
		return;
	}
	if ((tg.status = mc_arc_continuation()) == TG_EAGAIN) {	 	// arc generator 
    851a:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <mc_arc_continuation>
    851e:	80 93 ff 21 	sts	0x21FF, r24
    8522:	80 91 ff 21 	lds	r24, 0x21FF
    8526:	81 30       	cpi	r24, 0x01	; 1
    8528:	51 f0       	breq	.+20     	; 0x853e <tg_controller+0x40>
		return;
	}

	// low priority tasks
	if ((tg.status = _tg_read_next_line()) == TG_EAGAIN) {			// input line
    852a:	0e 94 a2 42 	call	0x8544	; 0x8544 <_tg_read_next_line>
    852e:	80 93 ff 21 	sts	0x21FF, r24
    8532:	80 91 ff 21 	lds	r24, 0x21FF
    8536:	81 30       	cpi	r24, 0x01	; 1
    8538:	11 f0       	breq	.+4      	; 0x853e <tg_controller+0x40>
		return;
	}
	_tg_prompt();		// Send a prompt - but only if controller is ready for input
    853a:	0e 94 f9 43 	call	0x87f2	; 0x87f2 <_tg_prompt>
}
    853e:	cf 91       	pop	r28
    8540:	df 91       	pop	r29
    8542:	08 95       	ret

00008544 <_tg_read_next_line>:
/* 
 * _tg_read_next_line() - Perform a non-blocking line read from active input device
 */

static int _tg_read_next_line()
{
    8544:	df 93       	push	r29
    8546:	cf 93       	push	r28
    8548:	0f 92       	push	r0
    854a:	0f 92       	push	r0
    854c:	cd b7       	in	r28, 0x3d	; 61
    854e:	de b7       	in	r29, 0x3e	; 62
	// read input line or return if not a completed line
	if ((tg.status = xio_fget_ln(tg.src, tg.dev[tg.src].buf, tg.dev[tg.src].len)) == TG_OK) {
    8550:	60 91 01 22 	lds	r22, 0x2201
    8554:	80 91 01 22 	lds	r24, 0x2201
    8558:	28 2f       	mov	r18, r24
    855a:	30 e0       	ldi	r19, 0x00	; 0
    855c:	82 e5       	ldi	r24, 0x52	; 82
    855e:	90 e0       	ldi	r25, 0x00	; 0
    8560:	ac 01       	movw	r20, r24
    8562:	24 9f       	mul	r18, r20
    8564:	c0 01       	movw	r24, r0
    8566:	25 9f       	mul	r18, r21
    8568:	90 0d       	add	r25, r0
    856a:	34 9f       	mul	r19, r20
    856c:	90 0d       	add	r25, r0
    856e:	11 24       	eor	r1, r1
    8570:	08 96       	adiw	r24, 0x08	; 8
    8572:	ac 01       	movw	r20, r24
    8574:	42 50       	subi	r20, 0x02	; 2
    8576:	5e 4d       	sbci	r21, 0xDE	; 222
    8578:	80 91 01 22 	lds	r24, 0x2201
    857c:	28 2f       	mov	r18, r24
    857e:	30 e0       	ldi	r19, 0x00	; 0
    8580:	82 e5       	ldi	r24, 0x52	; 82
    8582:	90 e0       	ldi	r25, 0x00	; 0
    8584:	fc 01       	movw	r30, r24
    8586:	2e 9f       	mul	r18, r30
    8588:	c0 01       	movw	r24, r0
    858a:	2f 9f       	mul	r18, r31
    858c:	90 0d       	add	r25, r0
    858e:	3e 9f       	mul	r19, r30
    8590:	90 0d       	add	r25, r0
    8592:	11 24       	eor	r1, r1
    8594:	fc 01       	movw	r30, r24
    8596:	eb 5f       	subi	r30, 0xFB	; 251
    8598:	fd 4d       	sbci	r31, 0xDD	; 221
    859a:	90 81       	ld	r25, Z
    859c:	86 2f       	mov	r24, r22
    859e:	ba 01       	movw	r22, r20
    85a0:	49 2f       	mov	r20, r25
    85a2:	0e 94 4c 36 	call	0x6c98	; 0x6c98 <xio_fget_ln>
    85a6:	80 93 ff 21 	sts	0x21FF, r24
    85aa:	80 91 ff 21 	lds	r24, 0x21FF
    85ae:	88 23       	and	r24, r24
    85b0:	a9 f4       	brne	.+42     	; 0x85dc <_tg_read_next_line+0x98>
		tg.status = tg_parser(tg.dev[tg.src].buf);	// dispatch to parser
    85b2:	80 91 01 22 	lds	r24, 0x2201
    85b6:	28 2f       	mov	r18, r24
    85b8:	30 e0       	ldi	r19, 0x00	; 0
    85ba:	82 e5       	ldi	r24, 0x52	; 82
    85bc:	90 e0       	ldi	r25, 0x00	; 0
    85be:	ac 01       	movw	r20, r24
    85c0:	24 9f       	mul	r18, r20
    85c2:	c0 01       	movw	r24, r0
    85c4:	25 9f       	mul	r18, r21
    85c6:	90 0d       	add	r25, r0
    85c8:	34 9f       	mul	r19, r20
    85ca:	90 0d       	add	r25, r0
    85cc:	11 24       	eor	r1, r1
    85ce:	08 96       	adiw	r24, 0x08	; 8
    85d0:	82 50       	subi	r24, 0x02	; 2
    85d2:	9e 4d       	sbci	r25, 0xDE	; 222
    85d4:	0e 94 3b 43 	call	0x8676	; 0x8676 <tg_parser>
    85d8:	80 93 ff 21 	sts	0x21FF, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_STATE_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    85dc:	80 91 ff 21 	lds	r24, 0x21FF
    85e0:	e8 2f       	mov	r30, r24
    85e2:	f0 e0       	ldi	r31, 0x00	; 0
    85e4:	e9 83       	std	Y+1, r30	; 0x01
    85e6:	fa 83       	std	Y+2, r31	; 0x02
    85e8:	29 81       	ldd	r18, Y+1	; 0x01
    85ea:	3a 81       	ldd	r19, Y+2	; 0x02
    85ec:	22 30       	cpi	r18, 0x02	; 2
    85ee:	31 05       	cpc	r19, r1
    85f0:	d9 f1       	breq	.+118    	; 0x8668 <_tg_read_next_line+0x124>
    85f2:	49 81       	ldd	r20, Y+1	; 0x01
    85f4:	5a 81       	ldd	r21, Y+2	; 0x02
    85f6:	43 30       	cpi	r20, 0x03	; 3
    85f8:	51 05       	cpc	r21, r1
    85fa:	54 f4       	brge	.+20     	; 0x8610 <_tg_read_next_line+0xcc>
    85fc:	89 81       	ldd	r24, Y+1	; 0x01
    85fe:	9a 81       	ldd	r25, Y+2	; 0x02
    8600:	00 97       	sbiw	r24, 0x00	; 0
    8602:	89 f0       	breq	.+34     	; 0x8626 <_tg_read_next_line+0xe2>
    8604:	e9 81       	ldd	r30, Y+1	; 0x01
    8606:	fa 81       	ldd	r31, Y+2	; 0x02
    8608:	e1 30       	cpi	r30, 0x01	; 1
    860a:	f1 05       	cpc	r31, r1
    860c:	79 f0       	breq	.+30     	; 0x862c <_tg_read_next_line+0xe8>
    860e:	2a c0       	rjmp	.+84     	; 0x8664 <_tg_read_next_line+0x120>
    8610:	29 81       	ldd	r18, Y+1	; 0x01
    8612:	3a 81       	ldd	r19, Y+2	; 0x02
    8614:	23 30       	cpi	r18, 0x03	; 3
    8616:	31 05       	cpc	r19, r1
    8618:	69 f0       	breq	.+26     	; 0x8634 <_tg_read_next_line+0xf0>
    861a:	49 81       	ldd	r20, Y+1	; 0x01
    861c:	5a 81       	ldd	r21, Y+2	; 0x02
    861e:	45 30       	cpi	r20, 0x05	; 5
    8620:	51 05       	cpc	r21, r1
    8622:	71 f0       	breq	.+28     	; 0x8640 <_tg_read_next_line+0xfc>
    8624:	1f c0       	rjmp	.+62     	; 0x8664 <_tg_read_next_line+0x120>

		case TG_OK: {								// got a completed line
			tg.state = TG_STATE_READY_UNPROMPTED; 
    8626:	10 92 fe 21 	sts	0x21FE, r1
    862a:	1e c0       	rjmp	.+60     	; 0x8668 <_tg_read_next_line+0x124>
			break;
		}

		case TG_EAGAIN: { 							// returned without a new line
			tg.state = TG_STATE_READING_COMMAND; 
    862c:	82 e0       	ldi	r24, 0x02	; 2
    862e:	80 93 fe 21 	sts	0x21FE, r24
    8632:	1a c0       	rjmp	.+52     	; 0x8668 <_tg_read_next_line+0x124>
		case TG_NOOP: {
			break;
		}

		case TG_QUIT: {								// Quit returned from parser
			_tg_set_mode(TG_CONTROL_MODE);
    8634:	80 e0       	ldi	r24, 0x00	; 0
    8636:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <_tg_set_mode>
			tg.state = TG_STATE_READY_UNPROMPTED;
    863a:	10 92 fe 21 	sts	0x21FE, r1
    863e:	14 c0       	rjmp	.+40     	; 0x8668 <_tg_read_next_line+0x124>
			break;
		}
					  	
		case TG_EOF: {								// file devices only
			printf_P(PSTR("End of command file\n"));
    8640:	8c e9       	ldi	r24, 0x9C	; 156
    8642:	9b e1       	ldi	r25, 0x1B	; 27
    8644:	0f 92       	push	r0
    8646:	0f 92       	push	r0
    8648:	ed b7       	in	r30, 0x3d	; 61
    864a:	fe b7       	in	r31, 0x3e	; 62
    864c:	31 96       	adiw	r30, 0x01	; 1
    864e:	80 83       	st	Z, r24
    8650:	91 83       	std	Z+1, r25	; 0x01
    8652:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    8656:	0f 90       	pop	r0
    8658:	0f 90       	pop	r0
			tg_reset_source();						// reset to default src
    865a:	0e 94 ee 43 	call	0x87dc	; 0x87dc <tg_reset_source>
			tg.state = TG_STATE_READY_UNPROMPTED;
    865e:	10 92 fe 21 	sts	0x21FE, r1
    8662:	02 c0       	rjmp	.+4      	; 0x8668 <_tg_read_next_line+0x124>
			break;
		}
		default: {
			tg.state = TG_STATE_READY_UNPROMPTED;	// traps various error returns
    8664:	10 92 fe 21 	sts	0x21FE, r1
		}
	}
	return (TG_OK);
    8668:	80 e0       	ldi	r24, 0x00	; 0
    866a:	90 e0       	ldi	r25, 0x00	; 0
}
    866c:	0f 90       	pop	r0
    866e:	0f 90       	pop	r0
    8670:	cf 91       	pop	r28
    8672:	df 91       	pop	r29
    8674:	08 95       	ret

00008676 <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    8676:	df 93       	push	r29
    8678:	cf 93       	push	r28
    867a:	cd b7       	in	r28, 0x3d	; 61
    867c:	de b7       	in	r29, 0x3e	; 62
    867e:	28 97       	sbiw	r28, 0x08	; 8
    8680:	cd bf       	out	0x3d, r28	; 61
    8682:	de bf       	out	0x3e, r29	; 62
    8684:	89 83       	std	Y+1, r24	; 0x01
    8686:	9a 83       	std	Y+2, r25	; 0x02
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    8688:	80 91 00 22 	lds	r24, 0x2200
    868c:	88 23       	and	r24, r24
    868e:	09 f0       	breq	.+2      	; 0x8692 <tg_parser+0x1c>
    8690:	52 c0       	rjmp	.+164    	; 0x8736 <tg_parser+0xc0>
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
    8692:	e9 81       	ldd	r30, Y+1	; 0x01
    8694:	fa 81       	ldd	r31, Y+2	; 0x02
    8696:	80 81       	ld	r24, Z
    8698:	81 36       	cpi	r24, 0x61	; 97
    869a:	60 f0       	brcs	.+24     	; 0x86b4 <tg_parser+0x3e>
    869c:	e9 81       	ldd	r30, Y+1	; 0x01
    869e:	fa 81       	ldd	r31, Y+2	; 0x02
    86a0:	80 81       	ld	r24, Z
    86a2:	8b 37       	cpi	r24, 0x7B	; 123
    86a4:	38 f4       	brcc	.+14     	; 0x86b4 <tg_parser+0x3e>
			buf[0] = buf[0]-'a'+'A';
    86a6:	e9 81       	ldd	r30, Y+1	; 0x01
    86a8:	fa 81       	ldd	r31, Y+2	; 0x02
    86aa:	80 81       	ld	r24, Z
    86ac:	80 52       	subi	r24, 0x20	; 32
    86ae:	e9 81       	ldd	r30, Y+1	; 0x01
    86b0:	fa 81       	ldd	r31, Y+2	; 0x02
    86b2:	80 83       	st	Z, r24
		}
		switch (buf[0]) {
    86b4:	e9 81       	ldd	r30, Y+1	; 0x01
    86b6:	fa 81       	ldd	r31, Y+2	; 0x02
    86b8:	80 81       	ld	r24, Z
    86ba:	28 2f       	mov	r18, r24
    86bc:	30 e0       	ldi	r19, 0x00	; 0
    86be:	2f 83       	std	Y+7, r18	; 0x07
    86c0:	38 87       	std	Y+8, r19	; 0x08
    86c2:	8f 81       	ldd	r24, Y+7	; 0x07
    86c4:	98 85       	ldd	r25, Y+8	; 0x08
    86c6:	86 34       	cpi	r24, 0x46	; 70
    86c8:	91 05       	cpc	r25, r1
    86ca:	69 f1       	breq	.+90     	; 0x8726 <tg_parser+0xb0>
    86cc:	2f 81       	ldd	r18, Y+7	; 0x07
    86ce:	38 85       	ldd	r19, Y+8	; 0x08
    86d0:	27 34       	cpi	r18, 0x47	; 71
    86d2:	31 05       	cpc	r19, r1
    86d4:	84 f4       	brge	.+32     	; 0x86f6 <tg_parser+0x80>
    86d6:	8f 81       	ldd	r24, Y+7	; 0x07
    86d8:	98 85       	ldd	r25, Y+8	; 0x08
    86da:	83 34       	cpi	r24, 0x43	; 67
    86dc:	91 05       	cpc	r25, r1
    86de:	d9 f0       	breq	.+54     	; 0x8716 <tg_parser+0xa0>
    86e0:	2f 81       	ldd	r18, Y+7	; 0x07
    86e2:	38 85       	ldd	r19, Y+8	; 0x08
    86e4:	24 34       	cpi	r18, 0x44	; 68
    86e6:	31 05       	cpc	r19, r1
    86e8:	d1 f0       	breq	.+52     	; 0x871e <tg_parser+0xa8>
    86ea:	8f 81       	ldd	r24, Y+7	; 0x07
    86ec:	98 85       	ldd	r25, Y+8	; 0x08
    86ee:	8f 33       	cpi	r24, 0x3F	; 63
    86f0:	91 05       	cpc	r25, r1
    86f2:	89 f0       	breq	.+34     	; 0x8716 <tg_parser+0xa0>
    86f4:	1d c0       	rjmp	.+58     	; 0x8730 <tg_parser+0xba>
    86f6:	2f 81       	ldd	r18, Y+7	; 0x07
    86f8:	38 85       	ldd	r19, Y+8	; 0x08
    86fa:	27 34       	cpi	r18, 0x47	; 71
    86fc:	31 05       	cpc	r19, r1
    86fe:	39 f0       	breq	.+14     	; 0x870e <tg_parser+0x98>
    8700:	8f 81       	ldd	r24, Y+7	; 0x07
    8702:	98 85       	ldd	r25, Y+8	; 0x08
    8704:	8d 54       	subi	r24, 0x4D	; 77
    8706:	90 40       	sbci	r25, 0x00	; 0
    8708:	82 30       	cpi	r24, 0x02	; 2
    870a:	91 05       	cpc	r25, r1
    870c:	88 f4       	brcc	.+34     	; 0x8730 <tg_parser+0xba>
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    870e:	82 e0       	ldi	r24, 0x02	; 2
    8710:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <_tg_set_mode>
    8714:	10 c0       	rjmp	.+32     	; 0x8736 <tg_parser+0xc0>
			case 'C': case '?': _tg_set_mode(TG_CONFIG_MODE); break;
    8716:	81 e0       	ldi	r24, 0x01	; 1
    8718:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <_tg_set_mode>
    871c:	0c c0       	rjmp	.+24     	; 0x8736 <tg_parser+0xc0>
			case 'D': _tg_set_mode(TG_DIRECT_DRIVE_MODE); break;
    871e:	83 e0       	ldi	r24, 0x03	; 3
    8720:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <_tg_set_mode>
    8724:	08 c0       	rjmp	.+16     	; 0x8736 <tg_parser+0xc0>
			case 'F': return (_tg_test_file());
    8726:	0e 94 6f 44 	call	0x88de	; 0x88de <_tg_test_file>
    872a:	8d 83       	std	Y+5, r24	; 0x05
    872c:	9e 83       	std	Y+6, r25	; 0x06
    872e:	34 c0       	rjmp	.+104    	; 0x8798 <tg_parser+0x122>
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
    8730:	80 e0       	ldi	r24, 0x00	; 0
    8732:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <_tg_set_mode>
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    8736:	10 92 ff 21 	sts	0x21FF, r1
	switch (tg.mode) {
    873a:	80 91 00 22 	lds	r24, 0x2200
    873e:	28 2f       	mov	r18, r24
    8740:	30 e0       	ldi	r19, 0x00	; 0
    8742:	2b 83       	std	Y+3, r18	; 0x03
    8744:	3c 83       	std	Y+4, r19	; 0x04
    8746:	8b 81       	ldd	r24, Y+3	; 0x03
    8748:	9c 81       	ldd	r25, Y+4	; 0x04
    874a:	82 30       	cpi	r24, 0x02	; 2
    874c:	91 05       	cpc	r25, r1
    874e:	89 f0       	breq	.+34     	; 0x8772 <tg_parser+0xfc>
    8750:	2b 81       	ldd	r18, Y+3	; 0x03
    8752:	3c 81       	ldd	r19, Y+4	; 0x04
    8754:	23 30       	cpi	r18, 0x03	; 3
    8756:	31 05       	cpc	r19, r1
    8758:	99 f0       	breq	.+38     	; 0x8780 <tg_parser+0x10a>
    875a:	8b 81       	ldd	r24, Y+3	; 0x03
    875c:	9c 81       	ldd	r25, Y+4	; 0x04
    875e:	81 30       	cpi	r24, 0x01	; 1
    8760:	91 05       	cpc	r25, r1
    8762:	a1 f4       	brne	.+40     	; 0x878c <tg_parser+0x116>
//		case TG_CONTROL_MODE: 
//			break;

		case TG_CONFIG_MODE:
			tg.status = cfg_parse(buf);
    8764:	89 81       	ldd	r24, Y+1	; 0x01
    8766:	9a 81       	ldd	r25, Y+2	; 0x02
    8768:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <cfg_parse>
    876c:	80 93 ff 21 	sts	0x21FF, r24
    8770:	0d c0       	rjmp	.+26     	; 0x878c <tg_parser+0x116>
			break;

		case TG_GCODE_MODE: 
			tg.status = gc_gcode_parser(buf);
    8772:	89 81       	ldd	r24, Y+1	; 0x01
    8774:	9a 81       	ldd	r25, Y+2	; 0x02
    8776:	0e 94 61 10 	call	0x20c2	; 0x20c2 <gc_gcode_parser>
    877a:	80 93 ff 21 	sts	0x21FF, r24
    877e:	06 c0       	rjmp	.+12     	; 0x878c <tg_parser+0x116>
			break;

		case TG_DIRECT_DRIVE_MODE:
			tg.status = dd_parser(buf);
    8780:	89 81       	ldd	r24, Y+1	; 0x01
    8782:	9a 81       	ldd	r25, Y+2	; 0x02
    8784:	0e 94 89 44 	call	0x8912	; 0x8912 <dd_parser>
    8788:	80 93 ff 21 	sts	0x21FF, r24
			break;
	}
	return (tg.status);
    878c:	80 91 ff 21 	lds	r24, 0x21FF
    8790:	28 2f       	mov	r18, r24
    8792:	30 e0       	ldi	r19, 0x00	; 0
    8794:	2d 83       	std	Y+5, r18	; 0x05
    8796:	3e 83       	std	Y+6, r19	; 0x06
    8798:	8d 81       	ldd	r24, Y+5	; 0x05
    879a:	9e 81       	ldd	r25, Y+6	; 0x06
}
    879c:	28 96       	adiw	r28, 0x08	; 8
    879e:	cd bf       	out	0x3d, r28	; 61
    87a0:	de bf       	out	0x3e, r29	; 62
    87a2:	cf 91       	pop	r28
    87a4:	df 91       	pop	r29
    87a6:	08 95       	ret

000087a8 <_tg_set_mode>:
/*
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
    87a8:	df 93       	push	r29
    87aa:	cf 93       	push	r28
    87ac:	0f 92       	push	r0
    87ae:	cd b7       	in	r28, 0x3d	; 61
    87b0:	de b7       	in	r29, 0x3e	; 62
    87b2:	89 83       	std	Y+1, r24	; 0x01
	tg.mode = mode;
    87b4:	89 81       	ldd	r24, Y+1	; 0x01
    87b6:	80 93 00 22 	sts	0x2200, r24
}
    87ba:	0f 90       	pop	r0
    87bc:	cf 91       	pop	r28
    87be:	df 91       	pop	r29
    87c0:	08 95       	ret

000087c2 <_tg_set_source>:
 *	expanded to also set the stdout/stderr console device so the prompt and
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
    87c2:	df 93       	push	r29
    87c4:	cf 93       	push	r28
    87c6:	0f 92       	push	r0
    87c8:	cd b7       	in	r28, 0x3d	; 61
    87ca:	de b7       	in	r29, 0x3e	; 62
    87cc:	89 83       	std	Y+1, r24	; 0x01
	tg.src = d;									// d = XIO device #. See xio.h
    87ce:	89 81       	ldd	r24, Y+1	; 0x01
    87d0:	80 93 01 22 	sts	0x2201, r24
}
    87d4:	0f 90       	pop	r0
    87d6:	cf 91       	pop	r28
    87d8:	df 91       	pop	r29
    87da:	08 95       	ret

000087dc <tg_reset_source>:
/*
 * tg_reset_source()  Reset source to default input device
 */

void tg_reset_source()
{
    87dc:	df 93       	push	r29
    87de:	cf 93       	push	r28
    87e0:	cd b7       	in	r28, 0x3d	; 61
    87e2:	de b7       	in	r29, 0x3e	; 62
	_tg_set_source(tg.default_src);
    87e4:	80 91 02 22 	lds	r24, 0x2202
    87e8:	0e 94 e1 43 	call	0x87c2	; 0x87c2 <_tg_set_source>
}
    87ec:	cf 91       	pop	r28
    87ee:	df 91       	pop	r29
    87f0:	08 95       	ret

000087f2 <_tg_prompt>:
	tgModeStringGCode,
	tgModeStringDirect
};

void _tg_prompt()
{
    87f2:	df 93       	push	r29
    87f4:	cf 93       	push	r28
    87f6:	cd b7       	in	r28, 0x3d	; 61
    87f8:	de b7       	in	r29, 0x3e	; 62
    87fa:	28 97       	sbiw	r28, 0x08	; 8
    87fc:	cd bf       	out	0x3d, r28	; 61
    87fe:	de bf       	out	0x3e, r29	; 62
	if (tg.state == TG_STATE_READY_UNPROMPTED) {
    8800:	80 91 fe 21 	lds	r24, 0x21FE
    8804:	88 23       	and	r24, r24
    8806:	09 f0       	breq	.+2      	; 0x880a <_tg_prompt+0x18>
    8808:	64 c0       	rjmp	.+200    	; 0x88d2 <_tg_prompt+0xe0>
		if (tg.dev[tg.src].flags && XIO_FLAG_ASTERISK_bm) {
    880a:	80 91 01 22 	lds	r24, 0x2201
    880e:	28 2f       	mov	r18, r24
    8810:	30 e0       	ldi	r19, 0x00	; 0
    8812:	82 e5       	ldi	r24, 0x52	; 82
    8814:	90 e0       	ldi	r25, 0x00	; 0
    8816:	ac 01       	movw	r20, r24
    8818:	24 9f       	mul	r18, r20
    881a:	c0 01       	movw	r24, r0
    881c:	25 9f       	mul	r18, r21
    881e:	90 0d       	add	r25, r0
    8820:	34 9f       	mul	r19, r20
    8822:	90 0d       	add	r25, r0
    8824:	11 24       	eor	r1, r1
    8826:	fc 01       	movw	r30, r24
    8828:	ec 5f       	subi	r30, 0xFC	; 252
    882a:	fd 4d       	sbci	r31, 0xDD	; 221
    882c:	80 81       	ld	r24, Z
    882e:	88 23       	and	r24, r24
    8830:	39 f1       	breq	.+78     	; 0x8880 <_tg_prompt+0x8e>
			printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    8832:	28 ef       	ldi	r18, 0xF8	; 248
    8834:	3b e1       	ldi	r19, 0x1B	; 27
    8836:	80 91 00 22 	lds	r24, 0x2200
    883a:	88 2f       	mov	r24, r24
    883c:	90 e0       	ldi	r25, 0x00	; 0
    883e:	88 0f       	add	r24, r24
    8840:	99 1f       	adc	r25, r25
    8842:	8d 51       	subi	r24, 0x1D	; 29
    8844:	94 4e       	sbci	r25, 0xE4	; 228
    8846:	8f 83       	std	Y+7, r24	; 0x07
    8848:	98 87       	std	Y+8, r25	; 0x08
    884a:	8f 81       	ldd	r24, Y+7	; 0x07
    884c:	98 85       	ldd	r25, Y+8	; 0x08
    884e:	fc 01       	movw	r30, r24
    8850:	85 91       	lpm	r24, Z+
    8852:	94 91       	lpm	r25, Z+
    8854:	8d 83       	std	Y+5, r24	; 0x05
    8856:	9e 83       	std	Y+6, r25	; 0x06
    8858:	ef 83       	std	Y+7, r30	; 0x07
    885a:	f8 87       	std	Y+8, r31	; 0x08
    885c:	8d 81       	ldd	r24, Y+5	; 0x05
    885e:	9e 81       	ldd	r25, Y+6	; 0x06
    8860:	00 d0       	rcall	.+0      	; 0x8862 <_tg_prompt+0x70>
    8862:	0f 92       	push	r0
    8864:	ed b7       	in	r30, 0x3d	; 61
    8866:	fe b7       	in	r31, 0x3e	; 62
    8868:	31 96       	adiw	r30, 0x01	; 1
    886a:	20 83       	st	Z, r18
    886c:	31 83       	std	Z+1, r19	; 0x01
    886e:	82 83       	std	Z+2, r24	; 0x02
    8870:	93 83       	std	Z+3, r25	; 0x03
    8872:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    8876:	0f 90       	pop	r0
    8878:	0f 90       	pop	r0
    887a:	0f 90       	pop	r0
    887c:	0f 90       	pop	r0
    887e:	26 c0       	rjmp	.+76     	; 0x88cc <_tg_prompt+0xda>
		} else {
			printf_P(PSTR("TinyG [%S]> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    8880:	2b ee       	ldi	r18, 0xEB	; 235
    8882:	3b e1       	ldi	r19, 0x1B	; 27
    8884:	80 91 00 22 	lds	r24, 0x2200
    8888:	88 2f       	mov	r24, r24
    888a:	90 e0       	ldi	r25, 0x00	; 0
    888c:	88 0f       	add	r24, r24
    888e:	99 1f       	adc	r25, r25
    8890:	8d 51       	subi	r24, 0x1D	; 29
    8892:	94 4e       	sbci	r25, 0xE4	; 228
    8894:	8b 83       	std	Y+3, r24	; 0x03
    8896:	9c 83       	std	Y+4, r25	; 0x04
    8898:	8b 81       	ldd	r24, Y+3	; 0x03
    889a:	9c 81       	ldd	r25, Y+4	; 0x04
    889c:	fc 01       	movw	r30, r24
    889e:	85 91       	lpm	r24, Z+
    88a0:	94 91       	lpm	r25, Z+
    88a2:	89 83       	std	Y+1, r24	; 0x01
    88a4:	9a 83       	std	Y+2, r25	; 0x02
    88a6:	eb 83       	std	Y+3, r30	; 0x03
    88a8:	fc 83       	std	Y+4, r31	; 0x04
    88aa:	89 81       	ldd	r24, Y+1	; 0x01
    88ac:	9a 81       	ldd	r25, Y+2	; 0x02
    88ae:	00 d0       	rcall	.+0      	; 0x88b0 <_tg_prompt+0xbe>
    88b0:	0f 92       	push	r0
    88b2:	ed b7       	in	r30, 0x3d	; 61
    88b4:	fe b7       	in	r31, 0x3e	; 62
    88b6:	31 96       	adiw	r30, 0x01	; 1
    88b8:	20 83       	st	Z, r18
    88ba:	31 83       	std	Z+1, r19	; 0x01
    88bc:	82 83       	std	Z+2, r24	; 0x02
    88be:	93 83       	std	Z+3, r25	; 0x03
    88c0:	0e 94 4e 62 	call	0xc49c	; 0xc49c <printf_P>
    88c4:	0f 90       	pop	r0
    88c6:	0f 90       	pop	r0
    88c8:	0f 90       	pop	r0
    88ca:	0f 90       	pop	r0
		}
		tg.state = TG_STATE_READY_PROMPTED;
    88cc:	81 e0       	ldi	r24, 0x01	; 1
    88ce:	80 93 fe 21 	sts	0x21FE, r24
	}
}
    88d2:	28 96       	adiw	r28, 0x08	; 8
    88d4:	cd bf       	out	0x3d, r28	; 61
    88d6:	de bf       	out	0x3e, r29	; 62
    88d8:	cf 91       	pop	r28
    88da:	df 91       	pop	r29
    88dc:	08 95       	ret

000088de <_tg_test_file>:
 * This is a shoirtcut for now. Ultimately the file handle, mode and device 
 * should be provided as args.
 */

int _tg_test_file()
{
    88de:	df 93       	push	r29
    88e0:	cf 93       	push	r28
    88e2:	cd b7       	in	r28, 0x3d	; 61
    88e4:	de b7       	in	r29, 0x3e	; 62
//	xio_pgm_open(PGMFILE(&circle_test10));
//	xio_pgm_open(PGMFILE(&square_circle_test10));
//	xio_pgm_open(PGMFILE(&square_circle_test100));
//	xio_pgm_open(PGMFILE(&spiral_test50a));
//	xio_pgm_open(PGMFILE(&spiral_test5));
	xio_pgm_open(PGMFILE(&dwell_test2));
    88e6:	82 ea       	ldi	r24, 0xA2	; 162
    88e8:	9c e0       	ldi	r25, 0x0C	; 12
    88ea:	0e 94 8a 40 	call	0x8114	; 0x8114 <xio_pgm_open>

//	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
//	xio_pgm_open(PGMFILE(&zoetrope));

	// set mode and source for file mode
	_tg_set_mode(TG_GCODE_MODE);
    88ee:	82 e0       	ldi	r24, 0x02	; 2
    88f0:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <_tg_set_mode>
	_tg_set_source(XIO_DEV_PGM);
    88f4:	84 e0       	ldi	r24, 0x04	; 4
    88f6:	0e 94 e1 43 	call	0x87c2	; 0x87c2 <_tg_set_source>
	return (TG_OK);
    88fa:	80 e0       	ldi	r24, 0x00	; 0
    88fc:	90 e0       	ldi	r25, 0x00	; 0
}
    88fe:	cf 91       	pop	r28
    8900:	df 91       	pop	r29
    8902:	08 95       	ret

00008904 <dd_init>:
/* 
 * dd_init() - initialize direct drive system 
 */

void dd_init() 
{
    8904:	df 93       	push	r29
    8906:	cf 93       	push	r28
    8908:	cd b7       	in	r28, 0x3d	; 61
    890a:	de b7       	in	r29, 0x3e	; 62
//	cfg_reset();
}
    890c:	cf 91       	pop	r28
    890e:	df 91       	pop	r29
    8910:	08 95       	ret

00008912 <dd_parser>:
/* 
 * dd_parser() - parse a direct drive command 
 */

int dd_parser(char *text)
{
    8912:	df 93       	push	r29
    8914:	cf 93       	push	r28
    8916:	0f 92       	push	r0
    8918:	0f 92       	push	r0
    891a:	cd b7       	in	r28, 0x3d	; 61
    891c:	de b7       	in	r29, 0x3e	; 62
    891e:	89 83       	std	Y+1, r24	; 0x01
    8920:	9a 83       	std	Y+2, r25	; 0x02
				CFG(axis).limit_enable = (uint8_t)atoi(val); return(0);
			}
		default: return (1);	// error
	}
*/
	return (0);
    8922:	80 e0       	ldi	r24, 0x00	; 0
    8924:	90 e0       	ldi	r25, 0x00	; 0
}
    8926:	0f 90       	pop	r0
    8928:	0f 90       	pop	r0
    892a:	cf 91       	pop	r28
    892c:	df 91       	pop	r29
    892e:	08 95       	ret

00008930 <mv_init>:
/* 
 * mv_init() - initialize move buffers
 */

void mv_init()
{
    8930:	df 93       	push	r29
    8932:	cf 93       	push	r28
    8934:	cd b7       	in	r28, 0x3d	; 61
    8936:	de b7       	in	r29, 0x3e	; 62
	mv.move_buffer_head = 0;
    8938:	10 92 9e 23 	sts	0x239E, r1
	mv.move_buffer_tail = 0;
    893c:	10 92 9f 23 	sts	0x239F, r1
}
    8940:	cf 91       	pop	r28
    8942:	df 91       	pop	r29
    8944:	08 95       	ret

00008946 <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    8946:	2f 92       	push	r2
    8948:	3f 92       	push	r3
    894a:	4f 92       	push	r4
    894c:	5f 92       	push	r5
    894e:	6f 92       	push	r6
    8950:	7f 92       	push	r7
    8952:	8f 92       	push	r8
    8954:	9f 92       	push	r9
    8956:	af 92       	push	r10
    8958:	bf 92       	push	r11
    895a:	cf 92       	push	r12
    895c:	df 92       	push	r13
    895e:	ef 92       	push	r14
    8960:	ff 92       	push	r15
    8962:	0f 93       	push	r16
    8964:	1f 93       	push	r17
    8966:	df 93       	push	r29
    8968:	cf 93       	push	r28
    896a:	cd b7       	in	r28, 0x3d	; 61
    896c:	de b7       	in	r29, 0x3e	; 62
    896e:	a7 97       	sbiw	r28, 0x27	; 39
    8970:	cd bf       	out	0x3d, r28	; 61
    8972:	de bf       	out	0x3e, r29	; 62
    8974:	6f 87       	std	Y+15, r22	; 0x0f
    8976:	78 8b       	std	Y+16, r23	; 0x10
    8978:	89 8b       	std	Y+17, r24	; 0x11
    897a:	9a 8b       	std	Y+18, r25	; 0x12
    897c:	2b 8b       	std	Y+19, r18	; 0x13
    897e:	3c 8b       	std	Y+20, r19	; 0x14
    8980:	4d 8b       	std	Y+21, r20	; 0x15
    8982:	5e 8b       	std	Y+22, r21	; 0x16
    8984:	ef 8a       	std	Y+23, r14	; 0x17
    8986:	f8 8e       	std	Y+24, r15	; 0x18
    8988:	09 8f       	std	Y+25, r16	; 0x19
    898a:	1a 8f       	std	Y+26, r17	; 0x1a
    898c:	ab 8e       	std	Y+27, r10	; 0x1b
    898e:	bc 8e       	std	Y+28, r11	; 0x1c
    8990:	cd 8e       	std	Y+29, r12	; 0x1d
    8992:	de 8e       	std	Y+30, r13	; 0x1e
					// Using 64 bits is expensive! The division goes from ~640 
					// cycles at 32 bits to ~3800 cycles using 64 bits
	uint32_t ticks_per_step; // temp variable

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    8994:	80 91 9e 23 	lds	r24, 0x239E
    8998:	8f 5f       	subi	r24, 0xFF	; 255
    899a:	8e 87       	std	Y+14, r24	; 0x0e
    899c:	8e 85       	ldd	r24, Y+14	; 0x0e
    899e:	84 30       	cpi	r24, 0x04	; 4
    89a0:	08 f0       	brcs	.+2      	; 0x89a4 <mv_queue_move_buffer+0x5e>
		next_buffer_head = 0;					 // wrap condition
    89a2:	1e 86       	std	Y+14, r1	; 0x0e
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    89a4:	90 91 9f 23 	lds	r25, 0x239F
    89a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    89aa:	98 17       	cp	r25, r24
    89ac:	19 f4       	brne	.+6      	; 0x89b4 <mv_queue_move_buffer+0x6e>
		return (TG_BUFFER_FULL);
    89ae:	27 e0       	ldi	r18, 0x07	; 7
    89b0:	2f a3       	std	Y+39, r18	; 0x27
    89b2:	8e c2       	rjmp	.+1308   	; 0x8ed0 <mv_queue_move_buffer+0x58a>
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    89b4:	80 91 9e 23 	lds	r24, 0x239E
    89b8:	28 2f       	mov	r18, r24
    89ba:	30 e0       	ldi	r19, 0x00	; 0
    89bc:	c9 01       	movw	r24, r18
    89be:	88 0f       	add	r24, r24
    89c0:	99 1f       	adc	r25, r25
    89c2:	82 0f       	add	r24, r18
    89c4:	93 1f       	adc	r25, r19
    89c6:	9c 01       	movw	r18, r24
    89c8:	22 0f       	add	r18, r18
    89ca:	33 1f       	adc	r19, r19
    89cc:	22 0f       	add	r18, r18
    89ce:	33 1f       	adc	r19, r19
    89d0:	82 0f       	add	r24, r18
    89d2:	93 1f       	adc	r25, r19
    89d4:	88 0f       	add	r24, r24
    89d6:	99 1f       	adc	r25, r25
    89d8:	8e 55       	subi	r24, 0x5E	; 94
    89da:	9c 4d       	sbci	r25, 0xDC	; 220
    89dc:	80 93 a0 23 	sts	0x23A0, r24
    89e0:	90 93 a1 23 	sts	0x23A1, r25
	memset(mv.p, 0, sizeof(struct mvMove));
    89e4:	80 91 a0 23 	lds	r24, 0x23A0
    89e8:	90 91 a1 23 	lds	r25, 0x23A1
    89ec:	60 e0       	ldi	r22, 0x00	; 0
    89ee:	70 e0       	ldi	r23, 0x00	; 0
    89f0:	4e e1       	ldi	r20, 0x1E	; 30
    89f2:	50 e0       	ldi	r21, 0x00	; 0
    89f4:	0e 94 d0 61 	call	0xc3a0	; 0xc3a0 <memset>
	mv.p->a[X].steps = steps_x;
    89f8:	e0 91 a0 23 	lds	r30, 0x23A0
    89fc:	f0 91 a1 23 	lds	r31, 0x23A1
    8a00:	8f 85       	ldd	r24, Y+15	; 0x0f
    8a02:	98 89       	ldd	r25, Y+16	; 0x10
    8a04:	a9 89       	ldd	r26, Y+17	; 0x11
    8a06:	ba 89       	ldd	r27, Y+18	; 0x12
    8a08:	80 83       	st	Z, r24
    8a0a:	91 83       	std	Z+1, r25	; 0x01
    8a0c:	a2 83       	std	Z+2, r26	; 0x02
    8a0e:	b3 83       	std	Z+3, r27	; 0x03
	mv.p->a[Y].steps = steps_y;
    8a10:	e0 91 a0 23 	lds	r30, 0x23A0
    8a14:	f0 91 a1 23 	lds	r31, 0x23A1
    8a18:	8b 89       	ldd	r24, Y+19	; 0x13
    8a1a:	9c 89       	ldd	r25, Y+20	; 0x14
    8a1c:	ad 89       	ldd	r26, Y+21	; 0x15
    8a1e:	be 89       	ldd	r27, Y+22	; 0x16
    8a20:	82 87       	std	Z+10, r24	; 0x0a
    8a22:	93 87       	std	Z+11, r25	; 0x0b
    8a24:	a4 87       	std	Z+12, r26	; 0x0c
    8a26:	b5 87       	std	Z+13, r27	; 0x0d
	mv.p->a[Z].steps = steps_z;
    8a28:	e0 91 a0 23 	lds	r30, 0x23A0
    8a2c:	f0 91 a1 23 	lds	r31, 0x23A1
    8a30:	8f 89       	ldd	r24, Y+23	; 0x17
    8a32:	98 8d       	ldd	r25, Y+24	; 0x18
    8a34:	a9 8d       	ldd	r26, Y+25	; 0x19
    8a36:	ba 8d       	ldd	r27, Y+26	; 0x1a
    8a38:	84 8b       	std	Z+20, r24	; 0x14
    8a3a:	95 8b       	std	Z+21, r25	; 0x15
    8a3c:	a6 8b       	std	Z+22, r26	; 0x16
    8a3e:	b7 8b       	std	Z+23, r27	; 0x17
	ticks = microseconds * TICKS_PER_MICROSECOND;
    8a40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8a42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8a44:	ad 8d       	ldd	r26, Y+29	; 0x1d
    8a46:	be 8d       	ldd	r27, Y+30	; 0x1e
    8a48:	88 0f       	add	r24, r24
    8a4a:	99 1f       	adc	r25, r25
    8a4c:	aa 1f       	adc	r26, r26
    8a4e:	bb 1f       	adc	r27, r27
    8a50:	88 0f       	add	r24, r24
    8a52:	99 1f       	adc	r25, r25
    8a54:	aa 1f       	adc	r26, r26
    8a56:	bb 1f       	adc	r27, r27
    8a58:	88 0f       	add	r24, r24
    8a5a:	99 1f       	adc	r25, r25
    8a5c:	aa 1f       	adc	r26, r26
    8a5e:	bb 1f       	adc	r27, r27
    8a60:	88 0f       	add	r24, r24
    8a62:	99 1f       	adc	r25, r25
    8a64:	aa 1f       	adc	r26, r26
    8a66:	bb 1f       	adc	r27, r27
    8a68:	88 0f       	add	r24, r24
    8a6a:	99 1f       	adc	r25, r25
    8a6c:	aa 1f       	adc	r26, r26
    8a6e:	bb 1f       	adc	r27, r27
    8a70:	9c 01       	movw	r18, r24
    8a72:	ad 01       	movw	r20, r26
    8a74:	60 e0       	ldi	r22, 0x00	; 0
    8a76:	70 e0       	ldi	r23, 0x00	; 0
    8a78:	80 e0       	ldi	r24, 0x00	; 0
    8a7a:	90 e0       	ldi	r25, 0x00	; 0
    8a7c:	2d 83       	std	Y+5, r18	; 0x05
    8a7e:	3e 83       	std	Y+6, r19	; 0x06
    8a80:	4f 83       	std	Y+7, r20	; 0x07
    8a82:	58 87       	std	Y+8, r21	; 0x08
    8a84:	69 87       	std	Y+9, r22	; 0x09
    8a86:	7a 87       	std	Y+10, r23	; 0x0a
    8a88:	8b 87       	std	Y+11, r24	; 0x0b
    8a8a:	9c 87       	std	Y+12, r25	; 0x0c

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    8a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    8a8e:	98 89       	ldd	r25, Y+16	; 0x10
    8a90:	a9 89       	ldd	r26, Y+17	; 0x11
    8a92:	ba 89       	ldd	r27, Y+18	; 0x12
    8a94:	00 97       	sbiw	r24, 0x00	; 0
    8a96:	a1 05       	cpc	r26, r1
    8a98:	b1 05       	cpc	r27, r1
    8a9a:	09 f0       	breq	.+2      	; 0x8a9e <mv_queue_move_buffer+0x158>
    8a9c:	96 c0       	rjmp	.+300    	; 0x8bca <mv_queue_move_buffer+0x284>
    8a9e:	8b 89       	ldd	r24, Y+19	; 0x13
    8aa0:	9c 89       	ldd	r25, Y+20	; 0x14
    8aa2:	ad 89       	ldd	r26, Y+21	; 0x15
    8aa4:	be 89       	ldd	r27, Y+22	; 0x16
    8aa6:	00 97       	sbiw	r24, 0x00	; 0
    8aa8:	a1 05       	cpc	r26, r1
    8aaa:	b1 05       	cpc	r27, r1
    8aac:	09 f0       	breq	.+2      	; 0x8ab0 <mv_queue_move_buffer+0x16a>
    8aae:	8d c0       	rjmp	.+282    	; 0x8bca <mv_queue_move_buffer+0x284>
    8ab0:	8f 89       	ldd	r24, Y+23	; 0x17
    8ab2:	98 8d       	ldd	r25, Y+24	; 0x18
    8ab4:	a9 8d       	ldd	r26, Y+25	; 0x19
    8ab6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    8ab8:	00 97       	sbiw	r24, 0x00	; 0
    8aba:	a1 05       	cpc	r26, r1
    8abc:	b1 05       	cpc	r27, r1
    8abe:	09 f0       	breq	.+2      	; 0x8ac2 <mv_queue_move_buffer+0x17c>
    8ac0:	84 c0       	rjmp	.+264    	; 0x8bca <mv_queue_move_buffer+0x284>
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    8ac2:	e0 91 a0 23 	lds	r30, 0x23A0
    8ac6:	f0 91 a1 23 	lds	r31, 0x23A1
    8aca:	81 e0       	ldi	r24, 0x01	; 1
    8acc:	90 e0       	ldi	r25, 0x00	; 0
    8ace:	a0 e0       	ldi	r26, 0x00	; 0
    8ad0:	b0 e0       	ldi	r27, 0x00	; 0
    8ad2:	80 83       	st	Z, r24
    8ad4:	91 83       	std	Z+1, r25	; 0x01
    8ad6:	a2 83       	std	Z+2, r26	; 0x02
    8ad8:	b3 83       	std	Z+3, r27	; 0x03
		mv.p->a[X].postscale = 1;
    8ada:	e0 91 a0 23 	lds	r30, 0x23A0
    8ade:	f0 91 a1 23 	lds	r31, 0x23A1
    8ae2:	81 e0       	ldi	r24, 0x01	; 1
    8ae4:	90 e0       	ldi	r25, 0x00	; 0
    8ae6:	86 83       	std	Z+6, r24	; 0x06
    8ae8:	97 83       	std	Z+7, r25	; 0x07
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
    8aea:	e0 91 a0 23 	lds	r30, 0x23A0
    8aee:	f0 91 a1 23 	lds	r31, 0x23A1
    8af2:	20 81       	ld	r18, Z
    8af4:	31 81       	ldd	r19, Z+1	; 0x01
    8af6:	42 81       	ldd	r20, Z+2	; 0x02
    8af8:	53 81       	ldd	r21, Z+3	; 0x03
    8afa:	da 01       	movw	r26, r20
    8afc:	c9 01       	movw	r24, r18
    8afe:	bb 0f       	add	r27, r27
    8b00:	88 0b       	sbc	r24, r24
    8b02:	98 2f       	mov	r25, r24
    8b04:	dc 01       	movw	r26, r24
    8b06:	19 01       	movw	r2, r18
    8b08:	2a 01       	movw	r4, r20
    8b0a:	68 2e       	mov	r6, r24
    8b0c:	78 2e       	mov	r7, r24
    8b0e:	88 2e       	mov	r8, r24
    8b10:	98 2e       	mov	r9, r24
    8b12:	2d 81       	ldd	r18, Y+5	; 0x05
    8b14:	3e 81       	ldd	r19, Y+6	; 0x06
    8b16:	4f 81       	ldd	r20, Y+7	; 0x07
    8b18:	58 85       	ldd	r21, Y+8	; 0x08
    8b1a:	69 85       	ldd	r22, Y+9	; 0x09
    8b1c:	7a 85       	ldd	r23, Y+10	; 0x0a
    8b1e:	8b 85       	ldd	r24, Y+11	; 0x0b
    8b20:	9c 85       	ldd	r25, Y+12	; 0x0c
    8b22:	a2 2c       	mov	r10, r2
    8b24:	b3 2c       	mov	r11, r3
    8b26:	c4 2c       	mov	r12, r4
    8b28:	d5 2c       	mov	r13, r5
    8b2a:	e6 2c       	mov	r14, r6
    8b2c:	f7 2c       	mov	r15, r7
    8b2e:	08 2d       	mov	r16, r8
    8b30:	19 2d       	mov	r17, r9
    8b32:	0e 94 6e 50 	call	0xa0dc	; 0xa0dc <__udivdi3>
    8b36:	a2 2e       	mov	r10, r18
    8b38:	b3 2e       	mov	r11, r19
    8b3a:	c4 2e       	mov	r12, r20
    8b3c:	d5 2e       	mov	r13, r21
    8b3e:	e6 2e       	mov	r14, r22
    8b40:	f7 2e       	mov	r15, r23
    8b42:	08 2f       	mov	r16, r24
    8b44:	19 2f       	mov	r17, r25
    8b46:	2a 2d       	mov	r18, r10
    8b48:	3b 2d       	mov	r19, r11
    8b4a:	4c 2d       	mov	r20, r12
    8b4c:	5d 2d       	mov	r21, r13
    8b4e:	6e 2d       	mov	r22, r14
    8b50:	7f 2d       	mov	r23, r15
    8b52:	80 2f       	mov	r24, r16
    8b54:	91 2f       	mov	r25, r17
    8b56:	29 83       	std	Y+1, r18	; 0x01
    8b58:	3a 83       	std	Y+2, r19	; 0x02
    8b5a:	4b 83       	std	Y+3, r20	; 0x03
    8b5c:	5c 83       	std	Y+4, r21	; 0x04
    8b5e:	1c c0       	rjmp	.+56     	; 0x8b98 <mv_queue_move_buffer+0x252>
		while (ticks_per_step & 0xFFFF0000) {
			ticks_per_step >>= 1;
    8b60:	89 81       	ldd	r24, Y+1	; 0x01
    8b62:	9a 81       	ldd	r25, Y+2	; 0x02
    8b64:	ab 81       	ldd	r26, Y+3	; 0x03
    8b66:	bc 81       	ldd	r27, Y+4	; 0x04
    8b68:	b6 95       	lsr	r27
    8b6a:	a7 95       	ror	r26
    8b6c:	97 95       	ror	r25
    8b6e:	87 95       	ror	r24
    8b70:	89 83       	std	Y+1, r24	; 0x01
    8b72:	9a 83       	std	Y+2, r25	; 0x02
    8b74:	ab 83       	std	Y+3, r26	; 0x03
    8b76:	bc 83       	std	Y+4, r27	; 0x04
			mv.p->a[X].postscale <<= 1;
    8b78:	a0 91 a0 23 	lds	r26, 0x23A0
    8b7c:	b0 91 a1 23 	lds	r27, 0x23A1
    8b80:	e0 91 a0 23 	lds	r30, 0x23A0
    8b84:	f0 91 a1 23 	lds	r31, 0x23A1
    8b88:	86 81       	ldd	r24, Z+6	; 0x06
    8b8a:	97 81       	ldd	r25, Z+7	; 0x07
    8b8c:	88 0f       	add	r24, r24
    8b8e:	99 1f       	adc	r25, r25
    8b90:	16 96       	adiw	r26, 0x06	; 6
    8b92:	8d 93       	st	X+, r24
    8b94:	9c 93       	st	X, r25
    8b96:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
		while (ticks_per_step & 0xFFFF0000) {
    8b98:	89 81       	ldd	r24, Y+1	; 0x01
    8b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    8b9c:	ab 81       	ldd	r26, Y+3	; 0x03
    8b9e:	bc 81       	ldd	r27, Y+4	; 0x04
    8ba0:	80 70       	andi	r24, 0x00	; 0
    8ba2:	90 70       	andi	r25, 0x00	; 0
    8ba4:	00 97       	sbiw	r24, 0x00	; 0
    8ba6:	a1 05       	cpc	r26, r1
    8ba8:	b1 05       	cpc	r27, r1
    8baa:	d1 f6       	brne	.-76     	; 0x8b60 <mv_queue_move_buffer+0x21a>
			ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    8bac:	e0 91 a0 23 	lds	r30, 0x23A0
    8bb0:	f0 91 a1 23 	lds	r31, 0x23A1
    8bb4:	89 81       	ldd	r24, Y+1	; 0x01
    8bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    8bb8:	84 83       	std	Z+4, r24	; 0x04
    8bba:	95 83       	std	Z+5, r25	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    8bbc:	e0 91 a0 23 	lds	r30, 0x23A0
    8bc0:	f0 91 a1 23 	lds	r31, 0x23A1
    8bc4:	81 e0       	ldi	r24, 0x01	; 1
    8bc6:	81 87       	std	Z+9, r24	; 0x09
    8bc8:	7d c1       	rjmp	.+762    	; 0x8ec4 <mv_queue_move_buffer+0x57e>

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    8bca:	1d 86       	std	Y+13, r1	; 0x0d
    8bcc:	77 c1       	rjmp	.+750    	; 0x8ebc <mv_queue_move_buffer+0x576>
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    8bce:	40 91 a0 23 	lds	r20, 0x23A0
    8bd2:	50 91 a1 23 	lds	r21, 0x23A1
    8bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    8bd8:	88 2f       	mov	r24, r24
    8bda:	90 e0       	ldi	r25, 0x00	; 0
    8bdc:	88 0f       	add	r24, r24
    8bde:	99 1f       	adc	r25, r25
    8be0:	9c 01       	movw	r18, r24
    8be2:	22 0f       	add	r18, r18
    8be4:	33 1f       	adc	r19, r19
    8be6:	22 0f       	add	r18, r18
    8be8:	33 1f       	adc	r19, r19
    8bea:	82 0f       	add	r24, r18
    8bec:	93 1f       	adc	r25, r19
    8bee:	fa 01       	movw	r30, r20
    8bf0:	e8 0f       	add	r30, r24
    8bf2:	f9 1f       	adc	r31, r25
    8bf4:	80 81       	ld	r24, Z
    8bf6:	91 81       	ldd	r25, Z+1	; 0x01
    8bf8:	a2 81       	ldd	r26, Z+2	; 0x02
    8bfa:	b3 81       	ldd	r27, Z+3	; 0x03
    8bfc:	00 97       	sbiw	r24, 0x00	; 0
    8bfe:	a1 05       	cpc	r26, r1
    8c00:	b1 05       	cpc	r27, r1
    8c02:	09 f4       	brne	.+2      	; 0x8c06 <mv_queue_move_buffer+0x2c0>
    8c04:	58 c1       	rjmp	.+688    	; 0x8eb6 <mv_queue_move_buffer+0x570>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    8c06:	40 91 a0 23 	lds	r20, 0x23A0
    8c0a:	50 91 a1 23 	lds	r21, 0x23A1
    8c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8c10:	88 2f       	mov	r24, r24
    8c12:	90 e0       	ldi	r25, 0x00	; 0
    8c14:	88 0f       	add	r24, r24
    8c16:	99 1f       	adc	r25, r25
    8c18:	9c 01       	movw	r18, r24
    8c1a:	22 0f       	add	r18, r18
    8c1c:	33 1f       	adc	r19, r19
    8c1e:	22 0f       	add	r18, r18
    8c20:	33 1f       	adc	r19, r19
    8c22:	82 0f       	add	r24, r18
    8c24:	93 1f       	adc	r25, r19
    8c26:	fa 01       	movw	r30, r20
    8c28:	e8 0f       	add	r30, r24
    8c2a:	f9 1f       	adc	r31, r25
    8c2c:	80 81       	ld	r24, Z
    8c2e:	91 81       	ldd	r25, Z+1	; 0x01
    8c30:	a2 81       	ldd	r26, Z+2	; 0x02
    8c32:	b3 81       	ldd	r27, Z+3	; 0x03
    8c34:	bb 23       	and	r27, r27
    8c36:	bc f4       	brge	.+46     	; 0x8c66 <mv_queue_move_buffer+0x320>
    8c38:	40 91 a0 23 	lds	r20, 0x23A0
    8c3c:	50 91 a1 23 	lds	r21, 0x23A1
    8c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    8c42:	88 2f       	mov	r24, r24
    8c44:	90 e0       	ldi	r25, 0x00	; 0
    8c46:	88 0f       	add	r24, r24
    8c48:	99 1f       	adc	r25, r25
    8c4a:	9c 01       	movw	r18, r24
    8c4c:	22 0f       	add	r18, r18
    8c4e:	33 1f       	adc	r19, r19
    8c50:	22 0f       	add	r18, r18
    8c52:	33 1f       	adc	r19, r19
    8c54:	82 0f       	add	r24, r18
    8c56:	93 1f       	adc	r25, r19
    8c58:	84 0f       	add	r24, r20
    8c5a:	95 1f       	adc	r25, r21
    8c5c:	fc 01       	movw	r30, r24
    8c5e:	38 96       	adiw	r30, 0x08	; 8
    8c60:	81 e0       	ldi	r24, 0x01	; 1
    8c62:	80 83       	st	Z, r24
    8c64:	15 c0       	rjmp	.+42     	; 0x8c90 <mv_queue_move_buffer+0x34a>
    8c66:	40 91 a0 23 	lds	r20, 0x23A0
    8c6a:	50 91 a1 23 	lds	r21, 0x23A1
    8c6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8c70:	88 2f       	mov	r24, r24
    8c72:	90 e0       	ldi	r25, 0x00	; 0
    8c74:	88 0f       	add	r24, r24
    8c76:	99 1f       	adc	r25, r25
    8c78:	9c 01       	movw	r18, r24
    8c7a:	22 0f       	add	r18, r18
    8c7c:	33 1f       	adc	r19, r19
    8c7e:	22 0f       	add	r18, r18
    8c80:	33 1f       	adc	r19, r19
    8c82:	82 0f       	add	r24, r18
    8c84:	93 1f       	adc	r25, r19
    8c86:	84 0f       	add	r24, r20
    8c88:	95 1f       	adc	r25, r21
    8c8a:	fc 01       	movw	r30, r24
    8c8c:	38 96       	adiw	r30, 0x08	; 8
    8c8e:	10 82       	st	Z, r1
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    8c90:	80 91 a0 23 	lds	r24, 0x23A0
    8c94:	90 91 a1 23 	lds	r25, 0x23A1
    8c98:	8d a3       	std	Y+37, r24	; 0x25
    8c9a:	9e a3       	std	Y+38, r25	; 0x26
    8c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    8c9e:	a8 2f       	mov	r26, r24
    8ca0:	b0 e0       	ldi	r27, 0x00	; 0
    8ca2:	ab a3       	std	Y+35, r26	; 0x23
    8ca4:	bc a3       	std	Y+36, r27	; 0x24
    8ca6:	40 91 a0 23 	lds	r20, 0x23A0
    8caa:	50 91 a1 23 	lds	r21, 0x23A1
    8cae:	8d 85       	ldd	r24, Y+13	; 0x0d
    8cb0:	88 2f       	mov	r24, r24
    8cb2:	90 e0       	ldi	r25, 0x00	; 0
    8cb4:	88 0f       	add	r24, r24
    8cb6:	99 1f       	adc	r25, r25
    8cb8:	9c 01       	movw	r18, r24
    8cba:	22 0f       	add	r18, r18
    8cbc:	33 1f       	adc	r19, r19
    8cbe:	22 0f       	add	r18, r18
    8cc0:	33 1f       	adc	r19, r19
    8cc2:	82 0f       	add	r24, r18
    8cc4:	93 1f       	adc	r25, r19
    8cc6:	fa 01       	movw	r30, r20
    8cc8:	e8 0f       	add	r30, r24
    8cca:	f9 1f       	adc	r31, r25
    8ccc:	80 81       	ld	r24, Z
    8cce:	91 81       	ldd	r25, Z+1	; 0x01
    8cd0:	a2 81       	ldd	r26, Z+2	; 0x02
    8cd2:	b3 81       	ldd	r27, Z+3	; 0x03
    8cd4:	8f 8f       	std	Y+31, r24	; 0x1f
    8cd6:	98 a3       	std	Y+32, r25	; 0x20
    8cd8:	a9 a3       	std	Y+33, r26	; 0x21
    8cda:	ba a3       	std	Y+34, r27	; 0x22
    8cdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8cde:	98 a1       	ldd	r25, Y+32	; 0x20
    8ce0:	a9 a1       	ldd	r26, Y+33	; 0x21
    8ce2:	ba a1       	ldd	r27, Y+34	; 0x22
    8ce4:	bb 23       	and	r27, r27
    8ce6:	7c f4       	brge	.+30     	; 0x8d06 <mv_queue_move_buffer+0x3c0>
    8ce8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8cea:	98 a1       	ldd	r25, Y+32	; 0x20
    8cec:	a9 a1       	ldd	r26, Y+33	; 0x21
    8cee:	ba a1       	ldd	r27, Y+34	; 0x22
    8cf0:	b0 95       	com	r27
    8cf2:	a0 95       	com	r26
    8cf4:	90 95       	com	r25
    8cf6:	81 95       	neg	r24
    8cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    8cfa:	af 4f       	sbci	r26, 0xFF	; 255
    8cfc:	bf 4f       	sbci	r27, 0xFF	; 255
    8cfe:	8f 8f       	std	Y+31, r24	; 0x1f
    8d00:	98 a3       	std	Y+32, r25	; 0x20
    8d02:	a9 a3       	std	Y+33, r26	; 0x21
    8d04:	ba a3       	std	Y+34, r27	; 0x22
    8d06:	8b a1       	ldd	r24, Y+35	; 0x23
    8d08:	9c a1       	ldd	r25, Y+36	; 0x24
    8d0a:	88 0f       	add	r24, r24
    8d0c:	99 1f       	adc	r25, r25
    8d0e:	9c 01       	movw	r18, r24
    8d10:	22 0f       	add	r18, r18
    8d12:	33 1f       	adc	r19, r19
    8d14:	22 0f       	add	r18, r18
    8d16:	33 1f       	adc	r19, r19
    8d18:	82 0f       	add	r24, r18
    8d1a:	93 1f       	adc	r25, r19
    8d1c:	ed a1       	ldd	r30, Y+37	; 0x25
    8d1e:	fe a1       	ldd	r31, Y+38	; 0x26
    8d20:	e8 0f       	add	r30, r24
    8d22:	f9 1f       	adc	r31, r25
    8d24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8d26:	98 a1       	ldd	r25, Y+32	; 0x20
    8d28:	a9 a1       	ldd	r26, Y+33	; 0x21
    8d2a:	ba a1       	ldd	r27, Y+34	; 0x22
    8d2c:	80 83       	st	Z, r24
    8d2e:	91 83       	std	Z+1, r25	; 0x01
    8d30:	a2 83       	std	Z+2, r26	; 0x02
    8d32:	b3 83       	std	Z+3, r27	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    8d34:	40 91 a0 23 	lds	r20, 0x23A0
    8d38:	50 91 a1 23 	lds	r21, 0x23A1
    8d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    8d3e:	88 2f       	mov	r24, r24
    8d40:	90 e0       	ldi	r25, 0x00	; 0
    8d42:	88 0f       	add	r24, r24
    8d44:	99 1f       	adc	r25, r25
    8d46:	9c 01       	movw	r18, r24
    8d48:	22 0f       	add	r18, r18
    8d4a:	33 1f       	adc	r19, r19
    8d4c:	22 0f       	add	r18, r18
    8d4e:	33 1f       	adc	r19, r19
    8d50:	82 0f       	add	r24, r18
    8d52:	93 1f       	adc	r25, r19
    8d54:	84 0f       	add	r24, r20
    8d56:	95 1f       	adc	r25, r21
    8d58:	fc 01       	movw	r30, r24
    8d5a:	36 96       	adiw	r30, 0x06	; 6
    8d5c:	81 e0       	ldi	r24, 0x01	; 1
    8d5e:	90 e0       	ldi	r25, 0x00	; 0
    8d60:	80 83       	st	Z, r24
    8d62:	91 83       	std	Z+1, r25	; 0x01
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
    8d64:	40 91 a0 23 	lds	r20, 0x23A0
    8d68:	50 91 a1 23 	lds	r21, 0x23A1
    8d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    8d6e:	88 2f       	mov	r24, r24
    8d70:	90 e0       	ldi	r25, 0x00	; 0
    8d72:	88 0f       	add	r24, r24
    8d74:	99 1f       	adc	r25, r25
    8d76:	9c 01       	movw	r18, r24
    8d78:	22 0f       	add	r18, r18
    8d7a:	33 1f       	adc	r19, r19
    8d7c:	22 0f       	add	r18, r18
    8d7e:	33 1f       	adc	r19, r19
    8d80:	82 0f       	add	r24, r18
    8d82:	93 1f       	adc	r25, r19
    8d84:	fa 01       	movw	r30, r20
    8d86:	e8 0f       	add	r30, r24
    8d88:	f9 1f       	adc	r31, r25
    8d8a:	20 81       	ld	r18, Z
    8d8c:	31 81       	ldd	r19, Z+1	; 0x01
    8d8e:	42 81       	ldd	r20, Z+2	; 0x02
    8d90:	53 81       	ldd	r21, Z+3	; 0x03
    8d92:	da 01       	movw	r26, r20
    8d94:	c9 01       	movw	r24, r18
    8d96:	bb 0f       	add	r27, r27
    8d98:	88 0b       	sbc	r24, r24
    8d9a:	98 2f       	mov	r25, r24
    8d9c:	dc 01       	movw	r26, r24
    8d9e:	19 01       	movw	r2, r18
    8da0:	2a 01       	movw	r4, r20
    8da2:	68 2e       	mov	r6, r24
    8da4:	78 2e       	mov	r7, r24
    8da6:	88 2e       	mov	r8, r24
    8da8:	98 2e       	mov	r9, r24
    8daa:	2d 81       	ldd	r18, Y+5	; 0x05
    8dac:	3e 81       	ldd	r19, Y+6	; 0x06
    8dae:	4f 81       	ldd	r20, Y+7	; 0x07
    8db0:	58 85       	ldd	r21, Y+8	; 0x08
    8db2:	69 85       	ldd	r22, Y+9	; 0x09
    8db4:	7a 85       	ldd	r23, Y+10	; 0x0a
    8db6:	8b 85       	ldd	r24, Y+11	; 0x0b
    8db8:	9c 85       	ldd	r25, Y+12	; 0x0c
    8dba:	a2 2c       	mov	r10, r2
    8dbc:	b3 2c       	mov	r11, r3
    8dbe:	c4 2c       	mov	r12, r4
    8dc0:	d5 2c       	mov	r13, r5
    8dc2:	e6 2c       	mov	r14, r6
    8dc4:	f7 2c       	mov	r15, r7
    8dc6:	08 2d       	mov	r16, r8
    8dc8:	19 2d       	mov	r17, r9
    8dca:	0e 94 6e 50 	call	0xa0dc	; 0xa0dc <__udivdi3>
    8dce:	a2 2e       	mov	r10, r18
    8dd0:	b3 2e       	mov	r11, r19
    8dd2:	c4 2e       	mov	r12, r20
    8dd4:	d5 2e       	mov	r13, r21
    8dd6:	e6 2e       	mov	r14, r22
    8dd8:	f7 2e       	mov	r15, r23
    8dda:	08 2f       	mov	r16, r24
    8ddc:	19 2f       	mov	r17, r25
    8dde:	2a 2d       	mov	r18, r10
    8de0:	3b 2d       	mov	r19, r11
    8de2:	4c 2d       	mov	r20, r12
    8de4:	5d 2d       	mov	r21, r13
    8de6:	6e 2d       	mov	r22, r14
    8de8:	7f 2d       	mov	r23, r15
    8dea:	80 2f       	mov	r24, r16
    8dec:	91 2f       	mov	r25, r17
    8dee:	29 83       	std	Y+1, r18	; 0x01
    8df0:	3a 83       	std	Y+2, r19	; 0x02
    8df2:	4b 83       	std	Y+3, r20	; 0x03
    8df4:	5c 83       	std	Y+4, r21	; 0x04
    8df6:	3c c0       	rjmp	.+120    	; 0x8e70 <mv_queue_move_buffer+0x52a>
				while (ticks_per_step & 0xFFFF0000) {
					ticks_per_step >>= 1;
    8df8:	89 81       	ldd	r24, Y+1	; 0x01
    8dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    8dfc:	ab 81       	ldd	r26, Y+3	; 0x03
    8dfe:	bc 81       	ldd	r27, Y+4	; 0x04
    8e00:	b6 95       	lsr	r27
    8e02:	a7 95       	ror	r26
    8e04:	97 95       	ror	r25
    8e06:	87 95       	ror	r24
    8e08:	89 83       	std	Y+1, r24	; 0x01
    8e0a:	9a 83       	std	Y+2, r25	; 0x02
    8e0c:	ab 83       	std	Y+3, r26	; 0x03
    8e0e:	bc 83       	std	Y+4, r27	; 0x04
					mv.p->a[i].postscale <<= 1;
    8e10:	60 91 a0 23 	lds	r22, 0x23A0
    8e14:	70 91 a1 23 	lds	r23, 0x23A1
    8e18:	8d 85       	ldd	r24, Y+13	; 0x0d
    8e1a:	a8 2f       	mov	r26, r24
    8e1c:	b0 e0       	ldi	r27, 0x00	; 0
    8e1e:	40 91 a0 23 	lds	r20, 0x23A0
    8e22:	50 91 a1 23 	lds	r21, 0x23A1
    8e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    8e28:	88 2f       	mov	r24, r24
    8e2a:	90 e0       	ldi	r25, 0x00	; 0
    8e2c:	88 0f       	add	r24, r24
    8e2e:	99 1f       	adc	r25, r25
    8e30:	9c 01       	movw	r18, r24
    8e32:	22 0f       	add	r18, r18
    8e34:	33 1f       	adc	r19, r19
    8e36:	22 0f       	add	r18, r18
    8e38:	33 1f       	adc	r19, r19
    8e3a:	82 0f       	add	r24, r18
    8e3c:	93 1f       	adc	r25, r19
    8e3e:	84 0f       	add	r24, r20
    8e40:	95 1f       	adc	r25, r21
    8e42:	fc 01       	movw	r30, r24
    8e44:	36 96       	adiw	r30, 0x06	; 6
    8e46:	80 81       	ld	r24, Z
    8e48:	91 81       	ldd	r25, Z+1	; 0x01
    8e4a:	ac 01       	movw	r20, r24
    8e4c:	44 0f       	add	r20, r20
    8e4e:	55 1f       	adc	r21, r21
    8e50:	cd 01       	movw	r24, r26
    8e52:	88 0f       	add	r24, r24
    8e54:	99 1f       	adc	r25, r25
    8e56:	9c 01       	movw	r18, r24
    8e58:	22 0f       	add	r18, r18
    8e5a:	33 1f       	adc	r19, r19
    8e5c:	22 0f       	add	r18, r18
    8e5e:	33 1f       	adc	r19, r19
    8e60:	82 0f       	add	r24, r18
    8e62:	93 1f       	adc	r25, r19
    8e64:	86 0f       	add	r24, r22
    8e66:	97 1f       	adc	r25, r23
    8e68:	fc 01       	movw	r30, r24
    8e6a:	36 96       	adiw	r30, 0x06	; 6
    8e6c:	40 83       	st	Z, r20
    8e6e:	51 83       	std	Z+1, r21	; 0x01

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
				while (ticks_per_step & 0xFFFF0000) {
    8e70:	89 81       	ldd	r24, Y+1	; 0x01
    8e72:	9a 81       	ldd	r25, Y+2	; 0x02
    8e74:	ab 81       	ldd	r26, Y+3	; 0x03
    8e76:	bc 81       	ldd	r27, Y+4	; 0x04
    8e78:	80 70       	andi	r24, 0x00	; 0
    8e7a:	90 70       	andi	r25, 0x00	; 0
    8e7c:	00 97       	sbiw	r24, 0x00	; 0
    8e7e:	a1 05       	cpc	r26, r1
    8e80:	b1 05       	cpc	r27, r1
    8e82:	09 f0       	breq	.+2      	; 0x8e86 <mv_queue_move_buffer+0x540>
    8e84:	b9 cf       	rjmp	.-142    	; 0x8df8 <mv_queue_move_buffer+0x4b2>
					ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    8e86:	40 91 a0 23 	lds	r20, 0x23A0
    8e8a:	50 91 a1 23 	lds	r21, 0x23A1
    8e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8e90:	88 2f       	mov	r24, r24
    8e92:	90 e0       	ldi	r25, 0x00	; 0
    8e94:	69 81       	ldd	r22, Y+1	; 0x01
    8e96:	7a 81       	ldd	r23, Y+2	; 0x02
    8e98:	88 0f       	add	r24, r24
    8e9a:	99 1f       	adc	r25, r25
    8e9c:	9c 01       	movw	r18, r24
    8e9e:	22 0f       	add	r18, r18
    8ea0:	33 1f       	adc	r19, r19
    8ea2:	22 0f       	add	r18, r18
    8ea4:	33 1f       	adc	r19, r19
    8ea6:	82 0f       	add	r24, r18
    8ea8:	93 1f       	adc	r25, r19
    8eaa:	84 0f       	add	r24, r20
    8eac:	95 1f       	adc	r25, r21
    8eae:	fc 01       	movw	r30, r24
    8eb0:	34 96       	adiw	r30, 0x04	; 4
    8eb2:	60 83       	st	Z, r22
    8eb4:	71 83       	std	Z+1, r23	; 0x01
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    8eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    8eb8:	8f 5f       	subi	r24, 0xFF	; 255
    8eba:	8d 87       	std	Y+13, r24	; 0x0d
    8ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
    8ebe:	83 30       	cpi	r24, 0x03	; 3
    8ec0:	08 f4       	brcc	.+2      	; 0x8ec4 <mv_queue_move_buffer+0x57e>
    8ec2:	85 ce       	rjmp	.-758    	; 0x8bce <mv_queue_move_buffer+0x288>
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    8ec4:	8e 85       	ldd	r24, Y+14	; 0x0e
    8ec6:	80 93 9e 23 	sts	0x239E, r24
	st_execute_move();
    8eca:	0e 94 98 32 	call	0x6530	; 0x6530 <st_execute_move>
	return (TG_OK);
    8ece:	1f a2       	std	Y+39, r1	; 0x27
    8ed0:	8f a1       	ldd	r24, Y+39	; 0x27
}
    8ed2:	a7 96       	adiw	r28, 0x27	; 39
    8ed4:	cd bf       	out	0x3d, r28	; 61
    8ed6:	de bf       	out	0x3e, r29	; 62
    8ed8:	cf 91       	pop	r28
    8eda:	df 91       	pop	r29
    8edc:	1f 91       	pop	r17
    8ede:	0f 91       	pop	r16
    8ee0:	ff 90       	pop	r15
    8ee2:	ef 90       	pop	r14
    8ee4:	df 90       	pop	r13
    8ee6:	cf 90       	pop	r12
    8ee8:	bf 90       	pop	r11
    8eea:	af 90       	pop	r10
    8eec:	9f 90       	pop	r9
    8eee:	8f 90       	pop	r8
    8ef0:	7f 90       	pop	r7
    8ef2:	6f 90       	pop	r6
    8ef4:	5f 90       	pop	r5
    8ef6:	4f 90       	pop	r4
    8ef8:	3f 90       	pop	r3
    8efa:	2f 90       	pop	r2
    8efc:	08 95       	ret

00008efe <mv_dequeue_move_buffer>:
/* 
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
    8efe:	df 93       	push	r29
    8f00:	cf 93       	push	r28
    8f02:	0f 92       	push	r0
    8f04:	0f 92       	push	r0
    8f06:	cd b7       	in	r28, 0x3d	; 61
    8f08:	de b7       	in	r29, 0x3e	; 62
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    8f0a:	90 91 9e 23 	lds	r25, 0x239E
    8f0e:	80 91 9f 23 	lds	r24, 0x239F
    8f12:	98 17       	cp	r25, r24
    8f14:	19 f4       	brne	.+6      	; 0x8f1c <mv_dequeue_move_buffer+0x1e>
		return (NULL);
    8f16:	19 82       	std	Y+1, r1	; 0x01
    8f18:	1a 82       	std	Y+2, r1	; 0x02
    8f1a:	29 c0       	rjmp	.+82     	; 0x8f6e <mv_dequeue_move_buffer+0x70>
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    8f1c:	80 91 9f 23 	lds	r24, 0x239F
    8f20:	28 2f       	mov	r18, r24
    8f22:	30 e0       	ldi	r19, 0x00	; 0
    8f24:	c9 01       	movw	r24, r18
    8f26:	88 0f       	add	r24, r24
    8f28:	99 1f       	adc	r25, r25
    8f2a:	82 0f       	add	r24, r18
    8f2c:	93 1f       	adc	r25, r19
    8f2e:	9c 01       	movw	r18, r24
    8f30:	22 0f       	add	r18, r18
    8f32:	33 1f       	adc	r19, r19
    8f34:	22 0f       	add	r18, r18
    8f36:	33 1f       	adc	r19, r19
    8f38:	82 0f       	add	r24, r18
    8f3a:	93 1f       	adc	r25, r19
    8f3c:	88 0f       	add	r24, r24
    8f3e:	99 1f       	adc	r25, r25
    8f40:	8e 55       	subi	r24, 0x5E	; 94
    8f42:	9c 4d       	sbci	r25, 0xDC	; 220
    8f44:	80 93 a0 23 	sts	0x23A0, r24
    8f48:	90 93 a1 23 	sts	0x23A1, r25
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    8f4c:	80 91 9f 23 	lds	r24, 0x239F
    8f50:	8f 5f       	subi	r24, 0xFF	; 255
    8f52:	80 93 9f 23 	sts	0x239F, r24
    8f56:	80 91 9f 23 	lds	r24, 0x239F
    8f5a:	84 30       	cpi	r24, 0x04	; 4
    8f5c:	10 f0       	brcs	.+4      	; 0x8f62 <mv_dequeue_move_buffer+0x64>
		mv.move_buffer_tail = 0;
    8f5e:	10 92 9f 23 	sts	0x239F, r1
	}
	return (mv.p); 
    8f62:	80 91 a0 23 	lds	r24, 0x23A0
    8f66:	90 91 a1 23 	lds	r25, 0x23A1
    8f6a:	89 83       	std	Y+1, r24	; 0x01
    8f6c:	9a 83       	std	Y+2, r25	; 0x02
    8f6e:	89 81       	ldd	r24, Y+1	; 0x01
    8f70:	9a 81       	ldd	r25, Y+2	; 0x02
}
    8f72:	0f 90       	pop	r0
    8f74:	0f 90       	pop	r0
    8f76:	cf 91       	pop	r28
    8f78:	df 91       	pop	r29
    8f7a:	08 95       	ret

00008f7c <mv_test_move_buffer_full>:
 *		  buffer between the not-full result and the subsequent write. 
 *		  Be careful about changing this condition.
 */

uint8_t mv_test_move_buffer_full() 
{
    8f7c:	df 93       	push	r29
    8f7e:	cf 93       	push	r28
    8f80:	0f 92       	push	r0
    8f82:	0f 92       	push	r0
    8f84:	cd b7       	in	r28, 0x3d	; 61
    8f86:	de b7       	in	r29, 0x3e	; 62
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    8f88:	80 91 9e 23 	lds	r24, 0x239E
    8f8c:	8f 5f       	subi	r24, 0xFF	; 255
    8f8e:	89 83       	std	Y+1, r24	; 0x01
    8f90:	89 81       	ldd	r24, Y+1	; 0x01
    8f92:	84 30       	cpi	r24, 0x04	; 4
    8f94:	08 f0       	brcs	.+2      	; 0x8f98 <mv_test_move_buffer_full+0x1c>
		next_buffer_head = 0;					  // wrap condition
    8f96:	19 82       	std	Y+1, r1	; 0x01
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    8f98:	90 91 9f 23 	lds	r25, 0x239F
    8f9c:	89 81       	ldd	r24, Y+1	; 0x01
    8f9e:	98 17       	cp	r25, r24
    8fa0:	19 f4       	brne	.+6      	; 0x8fa8 <mv_test_move_buffer_full+0x2c>
		return (TRUE);
    8fa2:	81 e0       	ldi	r24, 0x01	; 1
    8fa4:	8a 83       	std	Y+2, r24	; 0x02
    8fa6:	01 c0       	rjmp	.+2      	; 0x8faa <mv_test_move_buffer_full+0x2e>
	};
	return (FALSE);
    8fa8:	1a 82       	std	Y+2, r1	; 0x02
    8faa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    8fac:	0f 90       	pop	r0
    8fae:	0f 90       	pop	r0
    8fb0:	cf 91       	pop	r28
    8fb2:	df 91       	pop	r29
    8fb4:	08 95       	ret

00008fb6 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    8fb6:	df 93       	push	r29
    8fb8:	cf 93       	push	r28
    8fba:	cd b7       	in	r28, 0x3d	; 61
    8fbc:	de b7       	in	r29, 0x3e	; 62
    8fbe:	0f c0       	rjmp	.+30     	; 0x8fde <mv_synchronize+0x28>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    8fc0:	a8 e4       	ldi	r26, 0x48	; 72
    8fc2:	b0 e0       	ldi	r27, 0x00	; 0
    8fc4:	e8 e4       	ldi	r30, 0x48	; 72
    8fc6:	f0 e0       	ldi	r31, 0x00	; 0
    8fc8:	80 81       	ld	r24, Z
    8fca:	81 60       	ori	r24, 0x01	; 1
    8fcc:	8c 93       	st	X, r24
    8fce:	88 95       	sleep
    8fd0:	a8 e4       	ldi	r26, 0x48	; 72
    8fd2:	b0 e0       	ldi	r27, 0x00	; 0
    8fd4:	e8 e4       	ldi	r30, 0x48	; 72
    8fd6:	f0 e0       	ldi	r31, 0x00	; 0
    8fd8:	80 81       	ld	r24, Z
    8fda:	8e 7f       	andi	r24, 0xFE	; 254
    8fdc:	8c 93       	st	X, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    8fde:	90 91 9f 23 	lds	r25, 0x239F
    8fe2:	80 91 9e 23 	lds	r24, 0x239E
    8fe6:	98 17       	cp	r25, r24
    8fe8:	59 f7       	brne	.-42     	; 0x8fc0 <mv_synchronize+0xa>
		sleep_mode();
	}    
}
    8fea:	cf 91       	pop	r28
    8fec:	df 91       	pop	r29
    8fee:	08 95       	ret

00008ff0 <mv_flush>:
/* 
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
    8ff0:	df 93       	push	r29
    8ff2:	cf 93       	push	r28
    8ff4:	cd b7       	in	r28, 0x3d	; 61
    8ff6:	de b7       	in	r29, 0x3e	; 62
	cli();
    8ff8:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    8ffa:	80 91 9e 23 	lds	r24, 0x239E
    8ffe:	80 93 9f 23 	sts	0x239F, r24
	mv.p = NULL;
    9002:	10 92 a0 23 	sts	0x23A0, r1
    9006:	10 92 a1 23 	sts	0x23A1, r1
	sei();
    900a:	78 94       	sei
}
    900c:	cf 91       	pop	r28
    900e:	df 91       	pop	r29
    9010:	08 95       	ret

00009012 <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    9012:	df 93       	push	r29
    9014:	cf 93       	push	r28
    9016:	0f 92       	push	r0
    9018:	cd b7       	in	r28, 0x3d	; 61
    901a:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i=X; i<=A; i++) {
    901c:	19 82       	std	Y+1, r1	; 0x01
    901e:	81 c0       	rjmp	.+258    	; 0x9122 <ls_init+0x110>
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    9020:	89 81       	ldd	r24, Y+1	; 0x01
    9022:	88 2f       	mov	r24, r24
    9024:	90 e0       	ldi	r25, 0x00	; 0
    9026:	01 96       	adiw	r24, 0x01	; 1
    9028:	82 95       	swap	r24
    902a:	92 95       	swap	r25
    902c:	90 7f       	andi	r25, 0xF0	; 240
    902e:	98 27       	eor	r25, r24
    9030:	80 7f       	andi	r24, 0xF0	; 240
    9032:	98 27       	eor	r25, r24
    9034:	fc 01       	movw	r30, r24
    9036:	ea 5a       	subi	r30, 0xAA	; 170
    9038:	fb 4d       	sbci	r31, 0xDB	; 219
    903a:	01 90       	ld	r0, Z+
    903c:	f0 81       	ld	r31, Z
    903e:	e0 2d       	mov	r30, r0
    9040:	80 e4       	ldi	r24, 0x40	; 64
    9042:	82 83       	std	Z+2, r24	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    9044:	89 81       	ldd	r24, Y+1	; 0x01
    9046:	88 2f       	mov	r24, r24
    9048:	90 e0       	ldi	r25, 0x00	; 0
    904a:	01 96       	adiw	r24, 0x01	; 1
    904c:	82 95       	swap	r24
    904e:	92 95       	swap	r25
    9050:	90 7f       	andi	r25, 0xF0	; 240
    9052:	98 27       	eor	r25, r24
    9054:	80 7f       	andi	r24, 0xF0	; 240
    9056:	98 27       	eor	r25, r24
    9058:	fc 01       	movw	r30, r24
    905a:	ea 5a       	subi	r30, 0xAA	; 170
    905c:	fb 4d       	sbci	r31, 0xDB	; 219
    905e:	01 90       	ld	r0, Z+
    9060:	f0 81       	ld	r31, Z
    9062:	e0 2d       	mov	r30, r0
    9064:	80 e8       	ldi	r24, 0x80	; 128
    9066:	82 83       	std	Z+2, r24	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    9068:	89 81       	ldd	r24, Y+1	; 0x01
    906a:	88 2f       	mov	r24, r24
    906c:	90 e0       	ldi	r25, 0x00	; 0
    906e:	01 96       	adiw	r24, 0x01	; 1
    9070:	82 95       	swap	r24
    9072:	92 95       	swap	r25
    9074:	90 7f       	andi	r25, 0xF0	; 240
    9076:	98 27       	eor	r25, r24
    9078:	80 7f       	andi	r24, 0xF0	; 240
    907a:	98 27       	eor	r25, r24
    907c:	fc 01       	movw	r30, r24
    907e:	ea 5a       	subi	r30, 0xAA	; 170
    9080:	fb 4d       	sbci	r31, 0xDB	; 219
    9082:	01 90       	ld	r0, Z+
    9084:	f0 81       	ld	r31, Z
    9086:	e0 2d       	mov	r30, r0
    9088:	89 e1       	ldi	r24, 0x19	; 25
    908a:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    908c:	89 81       	ldd	r24, Y+1	; 0x01
    908e:	88 2f       	mov	r24, r24
    9090:	90 e0       	ldi	r25, 0x00	; 0
    9092:	01 96       	adiw	r24, 0x01	; 1
    9094:	82 95       	swap	r24
    9096:	92 95       	swap	r25
    9098:	90 7f       	andi	r25, 0xF0	; 240
    909a:	98 27       	eor	r25, r24
    909c:	80 7f       	andi	r24, 0xF0	; 240
    909e:	98 27       	eor	r25, r24
    90a0:	fc 01       	movw	r30, r24
    90a2:	ea 5a       	subi	r30, 0xAA	; 170
    90a4:	fb 4d       	sbci	r31, 0xDB	; 219
    90a6:	01 90       	ld	r0, Z+
    90a8:	f0 81       	ld	r31, Z
    90aa:	e0 2d       	mov	r30, r0
    90ac:	89 e1       	ldi	r24, 0x19	; 25
    90ae:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    90b0:	89 81       	ldd	r24, Y+1	; 0x01
    90b2:	88 2f       	mov	r24, r24
    90b4:	90 e0       	ldi	r25, 0x00	; 0
    90b6:	01 96       	adiw	r24, 0x01	; 1
    90b8:	82 95       	swap	r24
    90ba:	92 95       	swap	r25
    90bc:	90 7f       	andi	r25, 0xF0	; 240
    90be:	98 27       	eor	r25, r24
    90c0:	80 7f       	andi	r24, 0xF0	; 240
    90c2:	98 27       	eor	r25, r24
    90c4:	fc 01       	movw	r30, r24
    90c6:	ea 5a       	subi	r30, 0xAA	; 170
    90c8:	fb 4d       	sbci	r31, 0xDB	; 219
    90ca:	01 90       	ld	r0, Z+
    90cc:	f0 81       	ld	r31, Z
    90ce:	e0 2d       	mov	r30, r0
    90d0:	80 e4       	ldi	r24, 0x40	; 64
    90d2:	82 87       	std	Z+10, r24	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    90d4:	89 81       	ldd	r24, Y+1	; 0x01
    90d6:	88 2f       	mov	r24, r24
    90d8:	90 e0       	ldi	r25, 0x00	; 0
    90da:	01 96       	adiw	r24, 0x01	; 1
    90dc:	82 95       	swap	r24
    90de:	92 95       	swap	r25
    90e0:	90 7f       	andi	r25, 0xF0	; 240
    90e2:	98 27       	eor	r25, r24
    90e4:	80 7f       	andi	r24, 0xF0	; 240
    90e6:	98 27       	eor	r25, r24
    90e8:	fc 01       	movw	r30, r24
    90ea:	ea 5a       	subi	r30, 0xAA	; 170
    90ec:	fb 4d       	sbci	r31, 0xDB	; 219
    90ee:	01 90       	ld	r0, Z+
    90f0:	f0 81       	ld	r31, Z
    90f2:	e0 2d       	mov	r30, r0
    90f4:	80 e8       	ldi	r24, 0x80	; 128
    90f6:	83 87       	std	Z+11, r24	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    90f8:	89 81       	ldd	r24, Y+1	; 0x01
    90fa:	88 2f       	mov	r24, r24
    90fc:	90 e0       	ldi	r25, 0x00	; 0
    90fe:	01 96       	adiw	r24, 0x01	; 1
    9100:	82 95       	swap	r24
    9102:	92 95       	swap	r25
    9104:	90 7f       	andi	r25, 0xF0	; 240
    9106:	98 27       	eor	r25, r24
    9108:	80 7f       	andi	r24, 0xF0	; 240
    910a:	98 27       	eor	r25, r24
    910c:	fc 01       	movw	r30, r24
    910e:	ea 5a       	subi	r30, 0xAA	; 170
    9110:	fb 4d       	sbci	r31, 0xDB	; 219
    9112:	01 90       	ld	r0, Z+
    9114:	f0 81       	ld	r31, Z
    9116:	e0 2d       	mov	r30, r0
    9118:	8a e0       	ldi	r24, 0x0A	; 10
    911a:	81 87       	std	Z+9, r24	; 0x09
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    911c:	89 81       	ldd	r24, Y+1	; 0x01
    911e:	8f 5f       	subi	r24, 0xFF	; 255
    9120:	89 83       	std	Y+1, r24	; 0x01
    9122:	89 81       	ldd	r24, Y+1	; 0x01
    9124:	84 30       	cpi	r24, 0x04	; 4
    9126:	08 f4       	brcc	.+2      	; 0x912a <ls_init+0x118>
    9128:	7b cf       	rjmp	.-266    	; 0x9020 <ls_init+0xe>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    912a:	0f 90       	pop	r0
    912c:	cf 91       	pop	r28
    912e:	df 91       	pop	r29
    9130:	08 95       	ret

00009132 <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    9132:	1f 92       	push	r1
    9134:	0f 92       	push	r0
    9136:	0f b6       	in	r0, 0x3f	; 63
    9138:	0f 92       	push	r0
    913a:	00 90 3b 00 	lds	r0, 0x003B
    913e:	0f 92       	push	r0
    9140:	11 24       	eor	r1, r1
    9142:	2f 93       	push	r18
    9144:	3f 93       	push	r19
    9146:	4f 93       	push	r20
    9148:	5f 93       	push	r21
    914a:	6f 93       	push	r22
    914c:	7f 93       	push	r23
    914e:	8f 93       	push	r24
    9150:	9f 93       	push	r25
    9152:	af 93       	push	r26
    9154:	bf 93       	push	r27
    9156:	ef 93       	push	r30
    9158:	ff 93       	push	r31
    915a:	df 93       	push	r29
    915c:	cf 93       	push	r28
    915e:	cd b7       	in	r28, 0x3d	; 61
    9160:	de b7       	in	r29, 0x3e	; 62
    9162:	0e 94 19 4a 	call	0x9432	; 0x9432 <_ls_handler>
    9166:	cf 91       	pop	r28
    9168:	df 91       	pop	r29
    916a:	ff 91       	pop	r31
    916c:	ef 91       	pop	r30
    916e:	bf 91       	pop	r27
    9170:	af 91       	pop	r26
    9172:	9f 91       	pop	r25
    9174:	8f 91       	pop	r24
    9176:	7f 91       	pop	r23
    9178:	6f 91       	pop	r22
    917a:	5f 91       	pop	r21
    917c:	4f 91       	pop	r20
    917e:	3f 91       	pop	r19
    9180:	2f 91       	pop	r18
    9182:	0f 90       	pop	r0
    9184:	00 92 3b 00 	sts	0x003B, r0
    9188:	0f 90       	pop	r0
    918a:	0f be       	out	0x3f, r0	; 63
    918c:	0f 90       	pop	r0
    918e:	1f 90       	pop	r1
    9190:	18 95       	reti

00009192 <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    9192:	1f 92       	push	r1
    9194:	0f 92       	push	r0
    9196:	0f b6       	in	r0, 0x3f	; 63
    9198:	0f 92       	push	r0
    919a:	00 90 3b 00 	lds	r0, 0x003B
    919e:	0f 92       	push	r0
    91a0:	11 24       	eor	r1, r1
    91a2:	2f 93       	push	r18
    91a4:	3f 93       	push	r19
    91a6:	4f 93       	push	r20
    91a8:	5f 93       	push	r21
    91aa:	6f 93       	push	r22
    91ac:	7f 93       	push	r23
    91ae:	8f 93       	push	r24
    91b0:	9f 93       	push	r25
    91b2:	af 93       	push	r26
    91b4:	bf 93       	push	r27
    91b6:	ef 93       	push	r30
    91b8:	ff 93       	push	r31
    91ba:	df 93       	push	r29
    91bc:	cf 93       	push	r28
    91be:	cd b7       	in	r28, 0x3d	; 61
    91c0:	de b7       	in	r29, 0x3e	; 62
    91c2:	0e 94 19 4a 	call	0x9432	; 0x9432 <_ls_handler>
    91c6:	cf 91       	pop	r28
    91c8:	df 91       	pop	r29
    91ca:	ff 91       	pop	r31
    91cc:	ef 91       	pop	r30
    91ce:	bf 91       	pop	r27
    91d0:	af 91       	pop	r26
    91d2:	9f 91       	pop	r25
    91d4:	8f 91       	pop	r24
    91d6:	7f 91       	pop	r23
    91d8:	6f 91       	pop	r22
    91da:	5f 91       	pop	r21
    91dc:	4f 91       	pop	r20
    91de:	3f 91       	pop	r19
    91e0:	2f 91       	pop	r18
    91e2:	0f 90       	pop	r0
    91e4:	00 92 3b 00 	sts	0x003B, r0
    91e8:	0f 90       	pop	r0
    91ea:	0f be       	out	0x3f, r0	; 63
    91ec:	0f 90       	pop	r0
    91ee:	1f 90       	pop	r1
    91f0:	18 95       	reti

000091f2 <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    91f2:	1f 92       	push	r1
    91f4:	0f 92       	push	r0
    91f6:	0f b6       	in	r0, 0x3f	; 63
    91f8:	0f 92       	push	r0
    91fa:	00 90 3b 00 	lds	r0, 0x003B
    91fe:	0f 92       	push	r0
    9200:	11 24       	eor	r1, r1
    9202:	2f 93       	push	r18
    9204:	3f 93       	push	r19
    9206:	4f 93       	push	r20
    9208:	5f 93       	push	r21
    920a:	6f 93       	push	r22
    920c:	7f 93       	push	r23
    920e:	8f 93       	push	r24
    9210:	9f 93       	push	r25
    9212:	af 93       	push	r26
    9214:	bf 93       	push	r27
    9216:	ef 93       	push	r30
    9218:	ff 93       	push	r31
    921a:	df 93       	push	r29
    921c:	cf 93       	push	r28
    921e:	cd b7       	in	r28, 0x3d	; 61
    9220:	de b7       	in	r29, 0x3e	; 62
    9222:	0e 94 19 4a 	call	0x9432	; 0x9432 <_ls_handler>
    9226:	cf 91       	pop	r28
    9228:	df 91       	pop	r29
    922a:	ff 91       	pop	r31
    922c:	ef 91       	pop	r30
    922e:	bf 91       	pop	r27
    9230:	af 91       	pop	r26
    9232:	9f 91       	pop	r25
    9234:	8f 91       	pop	r24
    9236:	7f 91       	pop	r23
    9238:	6f 91       	pop	r22
    923a:	5f 91       	pop	r21
    923c:	4f 91       	pop	r20
    923e:	3f 91       	pop	r19
    9240:	2f 91       	pop	r18
    9242:	0f 90       	pop	r0
    9244:	00 92 3b 00 	sts	0x003B, r0
    9248:	0f 90       	pop	r0
    924a:	0f be       	out	0x3f, r0	; 63
    924c:	0f 90       	pop	r0
    924e:	1f 90       	pop	r1
    9250:	18 95       	reti

00009252 <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    9252:	1f 92       	push	r1
    9254:	0f 92       	push	r0
    9256:	0f b6       	in	r0, 0x3f	; 63
    9258:	0f 92       	push	r0
    925a:	00 90 3b 00 	lds	r0, 0x003B
    925e:	0f 92       	push	r0
    9260:	11 24       	eor	r1, r1
    9262:	2f 93       	push	r18
    9264:	3f 93       	push	r19
    9266:	4f 93       	push	r20
    9268:	5f 93       	push	r21
    926a:	6f 93       	push	r22
    926c:	7f 93       	push	r23
    926e:	8f 93       	push	r24
    9270:	9f 93       	push	r25
    9272:	af 93       	push	r26
    9274:	bf 93       	push	r27
    9276:	ef 93       	push	r30
    9278:	ff 93       	push	r31
    927a:	df 93       	push	r29
    927c:	cf 93       	push	r28
    927e:	cd b7       	in	r28, 0x3d	; 61
    9280:	de b7       	in	r29, 0x3e	; 62
    9282:	0e 94 19 4a 	call	0x9432	; 0x9432 <_ls_handler>
    9286:	cf 91       	pop	r28
    9288:	df 91       	pop	r29
    928a:	ff 91       	pop	r31
    928c:	ef 91       	pop	r30
    928e:	bf 91       	pop	r27
    9290:	af 91       	pop	r26
    9292:	9f 91       	pop	r25
    9294:	8f 91       	pop	r24
    9296:	7f 91       	pop	r23
    9298:	6f 91       	pop	r22
    929a:	5f 91       	pop	r21
    929c:	4f 91       	pop	r20
    929e:	3f 91       	pop	r19
    92a0:	2f 91       	pop	r18
    92a2:	0f 90       	pop	r0
    92a4:	00 92 3b 00 	sts	0x003B, r0
    92a8:	0f 90       	pop	r0
    92aa:	0f be       	out	0x3f, r0	; 63
    92ac:	0f 90       	pop	r0
    92ae:	1f 90       	pop	r1
    92b0:	18 95       	reti

000092b2 <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    92b2:	1f 92       	push	r1
    92b4:	0f 92       	push	r0
    92b6:	0f b6       	in	r0, 0x3f	; 63
    92b8:	0f 92       	push	r0
    92ba:	00 90 3b 00 	lds	r0, 0x003B
    92be:	0f 92       	push	r0
    92c0:	11 24       	eor	r1, r1
    92c2:	2f 93       	push	r18
    92c4:	3f 93       	push	r19
    92c6:	4f 93       	push	r20
    92c8:	5f 93       	push	r21
    92ca:	6f 93       	push	r22
    92cc:	7f 93       	push	r23
    92ce:	8f 93       	push	r24
    92d0:	9f 93       	push	r25
    92d2:	af 93       	push	r26
    92d4:	bf 93       	push	r27
    92d6:	ef 93       	push	r30
    92d8:	ff 93       	push	r31
    92da:	df 93       	push	r29
    92dc:	cf 93       	push	r28
    92de:	cd b7       	in	r28, 0x3d	; 61
    92e0:	de b7       	in	r29, 0x3e	; 62
    92e2:	0e 94 19 4a 	call	0x9432	; 0x9432 <_ls_handler>
    92e6:	cf 91       	pop	r28
    92e8:	df 91       	pop	r29
    92ea:	ff 91       	pop	r31
    92ec:	ef 91       	pop	r30
    92ee:	bf 91       	pop	r27
    92f0:	af 91       	pop	r26
    92f2:	9f 91       	pop	r25
    92f4:	8f 91       	pop	r24
    92f6:	7f 91       	pop	r23
    92f8:	6f 91       	pop	r22
    92fa:	5f 91       	pop	r21
    92fc:	4f 91       	pop	r20
    92fe:	3f 91       	pop	r19
    9300:	2f 91       	pop	r18
    9302:	0f 90       	pop	r0
    9304:	00 92 3b 00 	sts	0x003B, r0
    9308:	0f 90       	pop	r0
    930a:	0f be       	out	0x3f, r0	; 63
    930c:	0f 90       	pop	r0
    930e:	1f 90       	pop	r1
    9310:	18 95       	reti

00009312 <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    9312:	1f 92       	push	r1
    9314:	0f 92       	push	r0
    9316:	0f b6       	in	r0, 0x3f	; 63
    9318:	0f 92       	push	r0
    931a:	00 90 3b 00 	lds	r0, 0x003B
    931e:	0f 92       	push	r0
    9320:	11 24       	eor	r1, r1
    9322:	2f 93       	push	r18
    9324:	3f 93       	push	r19
    9326:	4f 93       	push	r20
    9328:	5f 93       	push	r21
    932a:	6f 93       	push	r22
    932c:	7f 93       	push	r23
    932e:	8f 93       	push	r24
    9330:	9f 93       	push	r25
    9332:	af 93       	push	r26
    9334:	bf 93       	push	r27
    9336:	ef 93       	push	r30
    9338:	ff 93       	push	r31
    933a:	df 93       	push	r29
    933c:	cf 93       	push	r28
    933e:	cd b7       	in	r28, 0x3d	; 61
    9340:	de b7       	in	r29, 0x3e	; 62
    9342:	0e 94 19 4a 	call	0x9432	; 0x9432 <_ls_handler>
    9346:	cf 91       	pop	r28
    9348:	df 91       	pop	r29
    934a:	ff 91       	pop	r31
    934c:	ef 91       	pop	r30
    934e:	bf 91       	pop	r27
    9350:	af 91       	pop	r26
    9352:	9f 91       	pop	r25
    9354:	8f 91       	pop	r24
    9356:	7f 91       	pop	r23
    9358:	6f 91       	pop	r22
    935a:	5f 91       	pop	r21
    935c:	4f 91       	pop	r20
    935e:	3f 91       	pop	r19
    9360:	2f 91       	pop	r18
    9362:	0f 90       	pop	r0
    9364:	00 92 3b 00 	sts	0x003B, r0
    9368:	0f 90       	pop	r0
    936a:	0f be       	out	0x3f, r0	; 63
    936c:	0f 90       	pop	r0
    936e:	1f 90       	pop	r1
    9370:	18 95       	reti

00009372 <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    9372:	1f 92       	push	r1
    9374:	0f 92       	push	r0
    9376:	0f b6       	in	r0, 0x3f	; 63
    9378:	0f 92       	push	r0
    937a:	00 90 3b 00 	lds	r0, 0x003B
    937e:	0f 92       	push	r0
    9380:	11 24       	eor	r1, r1
    9382:	2f 93       	push	r18
    9384:	3f 93       	push	r19
    9386:	4f 93       	push	r20
    9388:	5f 93       	push	r21
    938a:	6f 93       	push	r22
    938c:	7f 93       	push	r23
    938e:	8f 93       	push	r24
    9390:	9f 93       	push	r25
    9392:	af 93       	push	r26
    9394:	bf 93       	push	r27
    9396:	ef 93       	push	r30
    9398:	ff 93       	push	r31
    939a:	df 93       	push	r29
    939c:	cf 93       	push	r28
    939e:	cd b7       	in	r28, 0x3d	; 61
    93a0:	de b7       	in	r29, 0x3e	; 62
    93a2:	0e 94 19 4a 	call	0x9432	; 0x9432 <_ls_handler>
    93a6:	cf 91       	pop	r28
    93a8:	df 91       	pop	r29
    93aa:	ff 91       	pop	r31
    93ac:	ef 91       	pop	r30
    93ae:	bf 91       	pop	r27
    93b0:	af 91       	pop	r26
    93b2:	9f 91       	pop	r25
    93b4:	8f 91       	pop	r24
    93b6:	7f 91       	pop	r23
    93b8:	6f 91       	pop	r22
    93ba:	5f 91       	pop	r21
    93bc:	4f 91       	pop	r20
    93be:	3f 91       	pop	r19
    93c0:	2f 91       	pop	r18
    93c2:	0f 90       	pop	r0
    93c4:	00 92 3b 00 	sts	0x003B, r0
    93c8:	0f 90       	pop	r0
    93ca:	0f be       	out	0x3f, r0	; 63
    93cc:	0f 90       	pop	r0
    93ce:	1f 90       	pop	r1
    93d0:	18 95       	reti

000093d2 <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    93d2:	1f 92       	push	r1
    93d4:	0f 92       	push	r0
    93d6:	0f b6       	in	r0, 0x3f	; 63
    93d8:	0f 92       	push	r0
    93da:	00 90 3b 00 	lds	r0, 0x003B
    93de:	0f 92       	push	r0
    93e0:	11 24       	eor	r1, r1
    93e2:	2f 93       	push	r18
    93e4:	3f 93       	push	r19
    93e6:	4f 93       	push	r20
    93e8:	5f 93       	push	r21
    93ea:	6f 93       	push	r22
    93ec:	7f 93       	push	r23
    93ee:	8f 93       	push	r24
    93f0:	9f 93       	push	r25
    93f2:	af 93       	push	r26
    93f4:	bf 93       	push	r27
    93f6:	ef 93       	push	r30
    93f8:	ff 93       	push	r31
    93fa:	df 93       	push	r29
    93fc:	cf 93       	push	r28
    93fe:	cd b7       	in	r28, 0x3d	; 61
    9400:	de b7       	in	r29, 0x3e	; 62
    9402:	0e 94 19 4a 	call	0x9432	; 0x9432 <_ls_handler>
    9406:	cf 91       	pop	r28
    9408:	df 91       	pop	r29
    940a:	ff 91       	pop	r31
    940c:	ef 91       	pop	r30
    940e:	bf 91       	pop	r27
    9410:	af 91       	pop	r26
    9412:	9f 91       	pop	r25
    9414:	8f 91       	pop	r24
    9416:	7f 91       	pop	r23
    9418:	6f 91       	pop	r22
    941a:	5f 91       	pop	r21
    941c:	4f 91       	pop	r20
    941e:	3f 91       	pop	r19
    9420:	2f 91       	pop	r18
    9422:	0f 90       	pop	r0
    9424:	00 92 3b 00 	sts	0x003B, r0
    9428:	0f 90       	pop	r0
    942a:	0f be       	out	0x3f, r0	; 63
    942c:	0f 90       	pop	r0
    942e:	1f 90       	pop	r1
    9430:	18 95       	reti

00009432 <_ls_handler>:

void _ls_handler() {
    9432:	df 93       	push	r29
    9434:	cf 93       	push	r28
    9436:	cd b7       	in	r28, 0x3d	; 61
    9438:	de b7       	in	r29, 0x3e	; 62
//	tg_kill();
	return;
}
    943a:	cf 91       	pop	r28
    943c:	df 91       	pop	r29
    943e:	08 95       	ret

00009440 <xio_rs485_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_rs485_init(const uint16_t control)
{
    9440:	df 93       	push	r29
    9442:	cf 93       	push	r28
    9444:	cd b7       	in	r28, 0x3d	; 61
    9446:	de b7       	in	r29, 0x3e	; 62
    9448:	29 97       	sbiw	r28, 0x09	; 9
    944a:	cd bf       	out	0x3d, r28	; 61
    944c:	de bf       	out	0x3e, r29	; 62
    944e:	88 87       	std	Y+8, r24	; 0x08
    9450:	99 87       	std	Y+9, r25	; 0x09
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    9452:	88 85       	ldd	r24, Y+8	; 0x08
    9454:	8f 70       	andi	r24, 0x0F	; 15
    9456:	8f 83       	std	Y+7, r24	; 0x07

	// transfer control flags to internal flag bits
	fr.flags = XIO_FLAG_RS485_DEFS_gm;		// set flags to defaults & initial state
    9458:	87 e3       	ldi	r24, 0x37	; 55
    945a:	90 e0       	ldi	r25, 0x00	; 0
    945c:	80 93 1a 24 	sts	0x241A, r24
    9460:	90 93 1b 24 	sts	0x241B, r25
	if (control & XIO_RD) {
    9464:	88 85       	ldd	r24, Y+8	; 0x08
    9466:	99 85       	ldd	r25, Y+9	; 0x09
    9468:	80 71       	andi	r24, 0x10	; 16
    946a:	90 70       	andi	r25, 0x00	; 0
    946c:	00 97       	sbiw	r24, 0x00	; 0
    946e:	49 f0       	breq	.+18     	; 0x9482 <xio_rs485_init+0x42>
		fr.flags |= XIO_FLAG_RD_bm;
    9470:	80 91 1a 24 	lds	r24, 0x241A
    9474:	90 91 1b 24 	lds	r25, 0x241B
    9478:	81 60       	ori	r24, 0x01	; 1
    947a:	80 93 1a 24 	sts	0x241A, r24
    947e:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_WR) {
    9482:	88 85       	ldd	r24, Y+8	; 0x08
    9484:	99 85       	ldd	r25, Y+9	; 0x09
    9486:	80 72       	andi	r24, 0x20	; 32
    9488:	90 70       	andi	r25, 0x00	; 0
    948a:	00 97       	sbiw	r24, 0x00	; 0
    948c:	49 f0       	breq	.+18     	; 0x94a0 <xio_rs485_init+0x60>
		fr.flags |= XIO_FLAG_WR_bm;
    948e:	80 91 1a 24 	lds	r24, 0x241A
    9492:	90 91 1b 24 	lds	r25, 0x241B
    9496:	82 60       	ori	r24, 0x02	; 2
    9498:	80 93 1a 24 	sts	0x241A, r24
    949c:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_BLOCK) {
    94a0:	88 85       	ldd	r24, Y+8	; 0x08
    94a2:	99 85       	ldd	r25, Y+9	; 0x09
    94a4:	80 74       	andi	r24, 0x40	; 64
    94a6:	90 70       	andi	r25, 0x00	; 0
    94a8:	00 97       	sbiw	r24, 0x00	; 0
    94aa:	49 f0       	breq	.+18     	; 0x94be <xio_rs485_init+0x7e>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    94ac:	80 91 1a 24 	lds	r24, 0x241A
    94b0:	90 91 1b 24 	lds	r25, 0x241B
    94b4:	84 60       	ori	r24, 0x04	; 4
    94b6:	80 93 1a 24 	sts	0x241A, r24
    94ba:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_NOBLOCK) {
    94be:	88 85       	ldd	r24, Y+8	; 0x08
    94c0:	99 85       	ldd	r25, Y+9	; 0x09
    94c2:	80 78       	andi	r24, 0x80	; 128
    94c4:	90 70       	andi	r25, 0x00	; 0
    94c6:	00 97       	sbiw	r24, 0x00	; 0
    94c8:	49 f0       	breq	.+18     	; 0x94dc <xio_rs485_init+0x9c>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    94ca:	80 91 1a 24 	lds	r24, 0x241A
    94ce:	90 91 1b 24 	lds	r25, 0x241B
    94d2:	8b 7f       	andi	r24, 0xFB	; 251
    94d4:	80 93 1a 24 	sts	0x241A, r24
    94d8:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_ECHO) {
    94dc:	88 85       	ldd	r24, Y+8	; 0x08
    94de:	99 85       	ldd	r25, Y+9	; 0x09
    94e0:	80 70       	andi	r24, 0x00	; 0
    94e2:	91 70       	andi	r25, 0x01	; 1
    94e4:	00 97       	sbiw	r24, 0x00	; 0
    94e6:	49 f0       	breq	.+18     	; 0x94fa <xio_rs485_init+0xba>
		fr.flags |= XIO_FLAG_ECHO_bm;
    94e8:	80 91 1a 24 	lds	r24, 0x241A
    94ec:	90 91 1b 24 	lds	r25, 0x241B
    94f0:	80 61       	ori	r24, 0x10	; 16
    94f2:	80 93 1a 24 	sts	0x241A, r24
    94f6:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_NOECHO) {
    94fa:	88 85       	ldd	r24, Y+8	; 0x08
    94fc:	99 85       	ldd	r25, Y+9	; 0x09
    94fe:	80 70       	andi	r24, 0x00	; 0
    9500:	92 70       	andi	r25, 0x02	; 2
    9502:	00 97       	sbiw	r24, 0x00	; 0
    9504:	49 f0       	breq	.+18     	; 0x9518 <xio_rs485_init+0xd8>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    9506:	80 91 1a 24 	lds	r24, 0x241A
    950a:	90 91 1b 24 	lds	r25, 0x241B
    950e:	8f 7e       	andi	r24, 0xEF	; 239
    9510:	80 93 1a 24 	sts	0x241A, r24
    9514:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_CRLF) {
    9518:	88 85       	ldd	r24, Y+8	; 0x08
    951a:	99 85       	ldd	r25, Y+9	; 0x09
    951c:	80 70       	andi	r24, 0x00	; 0
    951e:	94 70       	andi	r25, 0x04	; 4
    9520:	00 97       	sbiw	r24, 0x00	; 0
    9522:	49 f0       	breq	.+18     	; 0x9536 <xio_rs485_init+0xf6>
		fr.flags |= XIO_FLAG_CRLF_bm;
    9524:	80 91 1a 24 	lds	r24, 0x241A
    9528:	90 91 1b 24 	lds	r25, 0x241B
    952c:	80 62       	ori	r24, 0x20	; 32
    952e:	80 93 1a 24 	sts	0x241A, r24
    9532:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_NOCRLF) {
    9536:	88 85       	ldd	r24, Y+8	; 0x08
    9538:	99 85       	ldd	r25, Y+9	; 0x09
    953a:	80 70       	andi	r24, 0x00	; 0
    953c:	98 70       	andi	r25, 0x08	; 8
    953e:	00 97       	sbiw	r24, 0x00	; 0
    9540:	49 f0       	breq	.+18     	; 0x9554 <xio_rs485_init+0x114>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    9542:	80 91 1a 24 	lds	r24, 0x241A
    9546:	90 91 1b 24 	lds	r25, 0x241B
    954a:	8f 7d       	andi	r24, 0xDF	; 223
    954c:	80 93 1a 24 	sts	0x241A, r24
    9550:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_LINEMODE) {
    9554:	88 85       	ldd	r24, Y+8	; 0x08
    9556:	99 85       	ldd	r25, Y+9	; 0x09
    9558:	80 70       	andi	r24, 0x00	; 0
    955a:	90 71       	andi	r25, 0x10	; 16
    955c:	00 97       	sbiw	r24, 0x00	; 0
    955e:	49 f0       	breq	.+18     	; 0x9572 <xio_rs485_init+0x132>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    9560:	80 91 1a 24 	lds	r24, 0x241A
    9564:	90 91 1b 24 	lds	r25, 0x241B
    9568:	80 64       	ori	r24, 0x40	; 64
    956a:	80 93 1a 24 	sts	0x241A, r24
    956e:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_NOLINEMODE) {
    9572:	88 85       	ldd	r24, Y+8	; 0x08
    9574:	99 85       	ldd	r25, Y+9	; 0x09
    9576:	80 70       	andi	r24, 0x00	; 0
    9578:	90 72       	andi	r25, 0x20	; 32
    957a:	00 97       	sbiw	r24, 0x00	; 0
    957c:	49 f0       	breq	.+18     	; 0x9590 <xio_rs485_init+0x150>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    957e:	80 91 1a 24 	lds	r24, 0x241A
    9582:	90 91 1b 24 	lds	r25, 0x241B
    9586:	8f 7b       	andi	r24, 0xBF	; 191
    9588:	80 93 1a 24 	sts	0x241A, r24
    958c:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_SEMICOLONS) {
    9590:	88 85       	ldd	r24, Y+8	; 0x08
    9592:	99 85       	ldd	r25, Y+9	; 0x09
    9594:	80 70       	andi	r24, 0x00	; 0
    9596:	90 74       	andi	r25, 0x40	; 64
    9598:	00 97       	sbiw	r24, 0x00	; 0
    959a:	49 f0       	breq	.+18     	; 0x95ae <xio_rs485_init+0x16e>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    959c:	80 91 1a 24 	lds	r24, 0x241A
    95a0:	90 91 1b 24 	lds	r25, 0x241B
    95a4:	80 68       	ori	r24, 0x80	; 128
    95a6:	80 93 1a 24 	sts	0x241A, r24
    95aa:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    95ae:	88 85       	ldd	r24, Y+8	; 0x08
    95b0:	99 85       	ldd	r25, Y+9	; 0x09
    95b2:	99 23       	and	r25, r25
    95b4:	4c f4       	brge	.+18     	; 0x95c8 <xio_rs485_init+0x188>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    95b6:	80 91 1a 24 	lds	r24, 0x241A
    95ba:	90 91 1b 24 	lds	r25, 0x241B
    95be:	8f 77       	andi	r24, 0x7F	; 127
    95c0:	80 93 1a 24 	sts	0x241A, r24
    95c4:	90 93 1b 24 	sts	0x241B, r25
	}

	// character signals and error returns
	fr.sig = 0;
    95c8:	10 92 1c 24 	sts	0x241C, r1
	dev_rs485.udata = &(fr.sig);				// bind sig register to FILE struct
    95cc:	8c e1       	ldi	r24, 0x1C	; 28
    95ce:	94 e2       	ldi	r25, 0x24	; 36
    95d0:	80 93 2b 20 	sts	0x202B, r24
    95d4:	90 93 2c 20 	sts	0x202C, r25

	// setup internal RX/TX buffers
	fr.rx_buf_head = 1;						// can't use location 0
    95d8:	81 e0       	ldi	r24, 0x01	; 1
    95da:	80 93 23 24 	sts	0x2423, r24
	fr.rx_buf_tail = 1;
    95de:	81 e0       	ldi	r24, 0x01	; 1
    95e0:	80 93 22 24 	sts	0x2422, r24
	fr.tx_buf_head = 1;
    95e4:	81 e0       	ldi	r24, 0x01	; 1
    95e6:	80 93 25 24 	sts	0x2425, r24
	fr.tx_buf_tail = 1;
    95ea:	81 e0       	ldi	r24, 0x01	; 1
    95ec:	80 93 24 24 	sts	0x2424, r24
	fr.len = sizeof(fr.buf);					// offset to zero
    95f0:	82 e0       	ldi	r24, 0x02	; 2
    95f2:	80 93 1f 24 	sts	0x241F, r24

	fr.usart = &RS485_USART;				// bind USART structure
    95f6:	80 eb       	ldi	r24, 0xB0	; 176
    95f8:	98 e0       	ldi	r25, 0x08	; 8
    95fa:	80 93 52 24 	sts	0x2452, r24
    95fe:	90 93 53 24 	sts	0x2453, r25
	fr.port = &RS485_PORT;					// bind PORT structure
    9602:	80 e4       	ldi	r24, 0x40	; 64
    9604:	96 e0       	ldi	r25, 0x06	; 6
    9606:	80 93 54 24 	sts	0x2454, r24
    960a:	90 93 55 24 	sts	0x2455, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    960e:	8f 81       	ldd	r24, Y+7	; 0x07
    9610:	88 23       	and	r24, r24
    9612:	11 f4       	brne	.+4      	; 0x9618 <xio_rs485_init+0x1d8>
		baud = XIO_BAUD_DEFAULT;
    9614:	85 e0       	ldi	r24, 0x05	; 5
    9616:	8f 83       	std	Y+7, r24	; 0x07
	}
	fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    9618:	a0 91 52 24 	lds	r26, 0x2452
    961c:	b0 91 53 24 	lds	r27, 0x2453
    9620:	8f 81       	ldd	r24, Y+7	; 0x07
    9622:	88 2f       	mov	r24, r24
    9624:	90 e0       	ldi	r25, 0x00	; 0
    9626:	8c 5d       	subi	r24, 0xDC	; 220
    9628:	98 4f       	sbci	r25, 0xF8	; 248
    962a:	8d 83       	std	Y+5, r24	; 0x05
    962c:	9e 83       	std	Y+6, r25	; 0x06
    962e:	ed 81       	ldd	r30, Y+5	; 0x05
    9630:	fe 81       	ldd	r31, Y+6	; 0x06
    9632:	84 91       	lpm	r24, Z+
    9634:	8c 83       	std	Y+4, r24	; 0x04
    9636:	8c 81       	ldd	r24, Y+4	; 0x04
    9638:	16 96       	adiw	r26, 0x06	; 6
    963a:	8c 93       	st	X, r24
	fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    963c:	a0 91 52 24 	lds	r26, 0x2452
    9640:	b0 91 53 24 	lds	r27, 0x2453
    9644:	8f 81       	ldd	r24, Y+7	; 0x07
    9646:	88 2f       	mov	r24, r24
    9648:	90 e0       	ldi	r25, 0x00	; 0
    964a:	81 5d       	subi	r24, 0xD1	; 209
    964c:	98 4f       	sbci	r25, 0xF8	; 248
    964e:	8a 83       	std	Y+2, r24	; 0x02
    9650:	9b 83       	std	Y+3, r25	; 0x03
    9652:	ea 81       	ldd	r30, Y+2	; 0x02
    9654:	fb 81       	ldd	r31, Y+3	; 0x03
    9656:	84 91       	lpm	r24, Z+
    9658:	89 83       	std	Y+1, r24	; 0x01
    965a:	89 81       	ldd	r24, Y+1	; 0x01
    965c:	17 96       	adiw	r26, 0x07	; 7
    965e:	8c 93       	st	X, r24
    9660:	17 97       	sbiw	r26, 0x07	; 7
	fr.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx on USART
    9662:	e0 91 52 24 	lds	r30, 0x2452
    9666:	f0 91 53 24 	lds	r31, 0x2453
    966a:	88 e1       	ldi	r24, 0x18	; 24
    966c:	84 83       	std	Z+4, r24	; 0x04
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    966e:	e0 91 52 24 	lds	r30, 0x2452
    9672:	f0 91 53 24 	lds	r31, 0x2453
    9676:	81 e2       	ldi	r24, 0x21	; 33
    9678:	83 83       	std	Z+3, r24	; 0x03

	fr.port->DIRCLR = RS485_RX_bm;	// clr RX pin as input
    967a:	e0 91 54 24 	lds	r30, 0x2454
    967e:	f0 91 55 24 	lds	r31, 0x2455
    9682:	80 e4       	ldi	r24, 0x40	; 64
    9684:	82 83       	std	Z+2, r24	; 0x02
	fr.port->DIRSET = RS485_TX_bm; 	// set TX pin as output
    9686:	e0 91 54 24 	lds	r30, 0x2454
    968a:	f0 91 55 24 	lds	r31, 0x2455
    968e:	80 e8       	ldi	r24, 0x80	; 128
    9690:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTSET = RS485_TX_bm;	// set TX HI as initial state
    9692:	e0 91 54 24 	lds	r30, 0x2454
    9696:	f0 91 55 24 	lds	r31, 0x2455
    969a:	80 e8       	ldi	r24, 0x80	; 128
    969c:	85 83       	std	Z+5, r24	; 0x05
	fr.port->DIRSET = RS485_DE_bm; 	// Data Enable (TX) to output (TX enabled hi)
    969e:	e0 91 54 24 	lds	r30, 0x2454
    96a2:	f0 91 55 24 	lds	r31, 0x2455
    96a6:	80 e2       	ldi	r24, 0x20	; 32
    96a8:	81 83       	std	Z+1, r24	; 0x01
	fr.port->DIRSET = RS485_RE_bm; 	// Recv Enable (RX) to output (RX enabled lo)
    96aa:	e0 91 54 24 	lds	r30, 0x2454
    96ae:	f0 91 55 24 	lds	r31, 0x2455
    96b2:	80 e1       	ldi	r24, 0x10	; 16
    96b4:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTCLR = RS485_DE_bm;	// DE lo initially (TX disabled)
    96b6:	e0 91 54 24 	lds	r30, 0x2454
    96ba:	f0 91 55 24 	lds	r31, 0x2455
    96be:	80 e2       	ldi	r24, 0x20	; 32
    96c0:	86 83       	std	Z+6, r24	; 0x06
	fr.port->OUTCLR = RS485_RE_bm; 	// RE lo initially (RX enabled)
    96c2:	e0 91 54 24 	lds	r30, 0x2454
    96c6:	f0 91 55 24 	lds	r31, 0x2455
    96ca:	80 e1       	ldi	r24, 0x10	; 16
    96cc:	86 83       	std	Z+6, r24	; 0x06
}
    96ce:	29 96       	adiw	r28, 0x09	; 9
    96d0:	cd bf       	out	0x3d, r28	; 61
    96d2:	de bf       	out	0x3e, r29	; 62
    96d4:	cf 91       	pop	r28
    96d6:	df 91       	pop	r29
    96d8:	08 95       	ret

000096da <xio_rs485_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_rs485_control(const uint16_t control, const int16_t arg)
{
    96da:	df 93       	push	r29
    96dc:	cf 93       	push	r28
    96de:	cd b7       	in	r28, 0x3d	; 61
    96e0:	de b7       	in	r29, 0x3e	; 62
    96e2:	2a 97       	sbiw	r28, 0x0a	; 10
    96e4:	cd bf       	out	0x3d, r28	; 61
    96e6:	de bf       	out	0x3e, r29	; 62
    96e8:	8f 83       	std	Y+7, r24	; 0x07
    96ea:	98 87       	std	Y+8, r25	; 0x08
    96ec:	69 87       	std	Y+9, r22	; 0x09
    96ee:	7a 87       	std	Y+10, r23	; 0x0a
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    96f0:	8f 81       	ldd	r24, Y+7	; 0x07
    96f2:	98 85       	ldd	r25, Y+8	; 0x08
    96f4:	8f 70       	andi	r24, 0x0F	; 15
    96f6:	90 70       	andi	r25, 0x00	; 0
    96f8:	00 97       	sbiw	r24, 0x00	; 0
    96fa:	39 f1       	breq	.+78     	; 0x974a <xio_rs485_control+0x70>
		fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    96fc:	a0 91 52 24 	lds	r26, 0x2452
    9700:	b0 91 53 24 	lds	r27, 0x2453
    9704:	8f 81       	ldd	r24, Y+7	; 0x07
    9706:	98 85       	ldd	r25, Y+8	; 0x08
    9708:	8f 70       	andi	r24, 0x0F	; 15
    970a:	90 70       	andi	r25, 0x00	; 0
    970c:	8c 5d       	subi	r24, 0xDC	; 220
    970e:	98 4f       	sbci	r25, 0xF8	; 248
    9710:	8d 83       	std	Y+5, r24	; 0x05
    9712:	9e 83       	std	Y+6, r25	; 0x06
    9714:	ed 81       	ldd	r30, Y+5	; 0x05
    9716:	fe 81       	ldd	r31, Y+6	; 0x06
    9718:	84 91       	lpm	r24, Z+
    971a:	8c 83       	std	Y+4, r24	; 0x04
    971c:	8c 81       	ldd	r24, Y+4	; 0x04
    971e:	16 96       	adiw	r26, 0x06	; 6
    9720:	8c 93       	st	X, r24
		fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    9722:	a0 91 52 24 	lds	r26, 0x2452
    9726:	b0 91 53 24 	lds	r27, 0x2453
    972a:	8f 81       	ldd	r24, Y+7	; 0x07
    972c:	98 85       	ldd	r25, Y+8	; 0x08
    972e:	8f 70       	andi	r24, 0x0F	; 15
    9730:	90 70       	andi	r25, 0x00	; 0
    9732:	81 5d       	subi	r24, 0xD1	; 209
    9734:	98 4f       	sbci	r25, 0xF8	; 248
    9736:	8a 83       	std	Y+2, r24	; 0x02
    9738:	9b 83       	std	Y+3, r25	; 0x03
    973a:	ea 81       	ldd	r30, Y+2	; 0x02
    973c:	fb 81       	ldd	r31, Y+3	; 0x03
    973e:	84 91       	lpm	r24, Z+
    9740:	89 83       	std	Y+1, r24	; 0x01
    9742:	89 81       	ldd	r24, Y+1	; 0x01
    9744:	17 96       	adiw	r26, 0x07	; 7
    9746:	8c 93       	st	X, r24
    9748:	17 97       	sbiw	r26, 0x07	; 7
	}
	if (control & XIO_BLOCK) {
    974a:	8f 81       	ldd	r24, Y+7	; 0x07
    974c:	98 85       	ldd	r25, Y+8	; 0x08
    974e:	80 74       	andi	r24, 0x40	; 64
    9750:	90 70       	andi	r25, 0x00	; 0
    9752:	00 97       	sbiw	r24, 0x00	; 0
    9754:	49 f0       	breq	.+18     	; 0x9768 <xio_rs485_control+0x8e>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    9756:	80 91 1a 24 	lds	r24, 0x241A
    975a:	90 91 1b 24 	lds	r25, 0x241B
    975e:	84 60       	ori	r24, 0x04	; 4
    9760:	80 93 1a 24 	sts	0x241A, r24
    9764:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_NOBLOCK) {
    9768:	8f 81       	ldd	r24, Y+7	; 0x07
    976a:	98 85       	ldd	r25, Y+8	; 0x08
    976c:	80 78       	andi	r24, 0x80	; 128
    976e:	90 70       	andi	r25, 0x00	; 0
    9770:	00 97       	sbiw	r24, 0x00	; 0
    9772:	49 f0       	breq	.+18     	; 0x9786 <xio_rs485_control+0xac>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    9774:	80 91 1a 24 	lds	r24, 0x241A
    9778:	90 91 1b 24 	lds	r25, 0x241B
    977c:	8b 7f       	andi	r24, 0xFB	; 251
    977e:	80 93 1a 24 	sts	0x241A, r24
    9782:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_ECHO) {
    9786:	8f 81       	ldd	r24, Y+7	; 0x07
    9788:	98 85       	ldd	r25, Y+8	; 0x08
    978a:	80 70       	andi	r24, 0x00	; 0
    978c:	91 70       	andi	r25, 0x01	; 1
    978e:	00 97       	sbiw	r24, 0x00	; 0
    9790:	49 f0       	breq	.+18     	; 0x97a4 <xio_rs485_control+0xca>
		fr.flags |= XIO_FLAG_ECHO_bm;
    9792:	80 91 1a 24 	lds	r24, 0x241A
    9796:	90 91 1b 24 	lds	r25, 0x241B
    979a:	80 61       	ori	r24, 0x10	; 16
    979c:	80 93 1a 24 	sts	0x241A, r24
    97a0:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_NOECHO) {
    97a4:	8f 81       	ldd	r24, Y+7	; 0x07
    97a6:	98 85       	ldd	r25, Y+8	; 0x08
    97a8:	80 70       	andi	r24, 0x00	; 0
    97aa:	92 70       	andi	r25, 0x02	; 2
    97ac:	00 97       	sbiw	r24, 0x00	; 0
    97ae:	49 f0       	breq	.+18     	; 0x97c2 <xio_rs485_control+0xe8>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    97b0:	80 91 1a 24 	lds	r24, 0x241A
    97b4:	90 91 1b 24 	lds	r25, 0x241B
    97b8:	8f 7e       	andi	r24, 0xEF	; 239
    97ba:	80 93 1a 24 	sts	0x241A, r24
    97be:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_CRLF) {
    97c2:	8f 81       	ldd	r24, Y+7	; 0x07
    97c4:	98 85       	ldd	r25, Y+8	; 0x08
    97c6:	80 70       	andi	r24, 0x00	; 0
    97c8:	94 70       	andi	r25, 0x04	; 4
    97ca:	00 97       	sbiw	r24, 0x00	; 0
    97cc:	49 f0       	breq	.+18     	; 0x97e0 <xio_rs485_control+0x106>
		fr.flags |= XIO_FLAG_CRLF_bm;
    97ce:	80 91 1a 24 	lds	r24, 0x241A
    97d2:	90 91 1b 24 	lds	r25, 0x241B
    97d6:	80 62       	ori	r24, 0x20	; 32
    97d8:	80 93 1a 24 	sts	0x241A, r24
    97dc:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_NOCRLF) {
    97e0:	8f 81       	ldd	r24, Y+7	; 0x07
    97e2:	98 85       	ldd	r25, Y+8	; 0x08
    97e4:	80 70       	andi	r24, 0x00	; 0
    97e6:	98 70       	andi	r25, 0x08	; 8
    97e8:	00 97       	sbiw	r24, 0x00	; 0
    97ea:	49 f0       	breq	.+18     	; 0x97fe <xio_rs485_control+0x124>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    97ec:	80 91 1a 24 	lds	r24, 0x241A
    97f0:	90 91 1b 24 	lds	r25, 0x241B
    97f4:	8f 7d       	andi	r24, 0xDF	; 223
    97f6:	80 93 1a 24 	sts	0x241A, r24
    97fa:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_LINEMODE) {
    97fe:	8f 81       	ldd	r24, Y+7	; 0x07
    9800:	98 85       	ldd	r25, Y+8	; 0x08
    9802:	80 70       	andi	r24, 0x00	; 0
    9804:	90 71       	andi	r25, 0x10	; 16
    9806:	00 97       	sbiw	r24, 0x00	; 0
    9808:	49 f0       	breq	.+18     	; 0x981c <xio_rs485_control+0x142>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    980a:	80 91 1a 24 	lds	r24, 0x241A
    980e:	90 91 1b 24 	lds	r25, 0x241B
    9812:	80 64       	ori	r24, 0x40	; 64
    9814:	80 93 1a 24 	sts	0x241A, r24
    9818:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_NOLINEMODE) {
    981c:	8f 81       	ldd	r24, Y+7	; 0x07
    981e:	98 85       	ldd	r25, Y+8	; 0x08
    9820:	80 70       	andi	r24, 0x00	; 0
    9822:	90 72       	andi	r25, 0x20	; 32
    9824:	00 97       	sbiw	r24, 0x00	; 0
    9826:	49 f0       	breq	.+18     	; 0x983a <xio_rs485_control+0x160>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    9828:	80 91 1a 24 	lds	r24, 0x241A
    982c:	90 91 1b 24 	lds	r25, 0x241B
    9830:	8f 7b       	andi	r24, 0xBF	; 191
    9832:	80 93 1a 24 	sts	0x241A, r24
    9836:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_SEMICOLONS) {
    983a:	8f 81       	ldd	r24, Y+7	; 0x07
    983c:	98 85       	ldd	r25, Y+8	; 0x08
    983e:	80 70       	andi	r24, 0x00	; 0
    9840:	90 74       	andi	r25, 0x40	; 64
    9842:	00 97       	sbiw	r24, 0x00	; 0
    9844:	49 f0       	breq	.+18     	; 0x9858 <xio_rs485_control+0x17e>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    9846:	80 91 1a 24 	lds	r24, 0x241A
    984a:	90 91 1b 24 	lds	r25, 0x241B
    984e:	80 68       	ori	r24, 0x80	; 128
    9850:	80 93 1a 24 	sts	0x241A, r24
    9854:	90 93 1b 24 	sts	0x241B, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    9858:	8f 81       	ldd	r24, Y+7	; 0x07
    985a:	98 85       	ldd	r25, Y+8	; 0x08
    985c:	99 23       	and	r25, r25
    985e:	4c f4       	brge	.+18     	; 0x9872 <xio_rs485_control+0x198>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    9860:	80 91 1a 24 	lds	r24, 0x241A
    9864:	90 91 1b 24 	lds	r25, 0x241B
    9868:	8f 77       	andi	r24, 0x7F	; 127
    986a:	80 93 1a 24 	sts	0x241A, r24
    986e:	90 93 1b 24 	sts	0x241B, r25
	}
	return (0);
    9872:	80 e0       	ldi	r24, 0x00	; 0
}
    9874:	2a 96       	adiw	r28, 0x0a	; 10
    9876:	cd bf       	out	0x3d, r28	; 61
    9878:	de bf       	out	0x3e, r29	; 62
    987a:	cf 91       	pop	r28
    987c:	df 91       	pop	r29
    987e:	08 95       	ret

00009880 <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)		//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    9880:	1f 92       	push	r1
    9882:	0f 92       	push	r0
    9884:	0f b6       	in	r0, 0x3f	; 63
    9886:	0f 92       	push	r0
    9888:	00 90 3b 00 	lds	r0, 0x003B
    988c:	0f 92       	push	r0
    988e:	11 24       	eor	r1, r1
    9890:	2f 93       	push	r18
    9892:	3f 93       	push	r19
    9894:	4f 93       	push	r20
    9896:	5f 93       	push	r21
    9898:	6f 93       	push	r22
    989a:	7f 93       	push	r23
    989c:	8f 93       	push	r24
    989e:	9f 93       	push	r25
    98a0:	af 93       	push	r26
    98a2:	bf 93       	push	r27
    98a4:	ef 93       	push	r30
    98a6:	ff 93       	push	r31
    98a8:	df 93       	push	r29
    98aa:	cf 93       	push	r28
    98ac:	0f 92       	push	r0
    98ae:	cd b7       	in	r28, 0x3d	; 61
    98b0:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = fr.usart->DATA;					// can only read DATA once
    98b2:	e0 91 52 24 	lds	r30, 0x2452
    98b6:	f0 91 53 24 	lds	r31, 0x2453
    98ba:	80 81       	ld	r24, Z
    98bc:	89 83       	std	Y+1, r24	; 0x01

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    98be:	89 81       	ldd	r24, Y+1	; 0x01
    98c0:	83 30       	cpi	r24, 0x03	; 3
    98c2:	31 f4       	brne	.+12     	; 0x98d0 <__vector_28+0x50>
		fr.sig = XIO_SIG_KILL;					// set signal value
    98c4:	84 e0       	ldi	r24, 0x04	; 4
    98c6:	80 93 1c 24 	sts	0x241C, r24
		signal_etx();							// call app-specific signal handler
    98ca:	0e 94 4a 50 	call	0xa094	; 0xa094 <signal_etx>
    98ce:	28 c0       	rjmp	.+80     	; 0x9920 <__vector_28+0xa0>
		return;
	}

	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// advance buffer head with wrap
    98d0:	80 91 23 24 	lds	r24, 0x2423
    98d4:	81 50       	subi	r24, 0x01	; 1
    98d6:	80 93 23 24 	sts	0x2423, r24
    98da:	80 91 23 24 	lds	r24, 0x2423
    98de:	88 23       	and	r24, r24
    98e0:	19 f4       	brne	.+6      	; 0x98e8 <__vector_28+0x68>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    98e2:	88 e1       	ldi	r24, 0x18	; 24
    98e4:	80 93 23 24 	sts	0x2423, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    98e8:	90 91 23 24 	lds	r25, 0x2423
    98ec:	80 91 22 24 	lds	r24, 0x2422
    98f0:	98 17       	cp	r25, r24
    98f2:	51 f0       	breq	.+20     	; 0x9908 <__vector_28+0x88>
		fr.rx_buf[fr.rx_buf_head] = c;			// (= USARTC0.DATA;)
    98f4:	80 91 23 24 	lds	r24, 0x2423
    98f8:	88 2f       	mov	r24, r24
    98fa:	90 e0       	ldi	r25, 0x00	; 0
    98fc:	fc 01       	movw	r30, r24
    98fe:	e9 5d       	subi	r30, 0xD9	; 217
    9900:	fb 4d       	sbci	r31, 0xDB	; 219
    9902:	89 81       	ldd	r24, Y+1	; 0x01
    9904:	80 83       	st	Z, r24
    9906:	0c c0       	rjmp	.+24     	; 0x9920 <__vector_28+0xa0>
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    9908:	80 91 23 24 	lds	r24, 0x2423
    990c:	8f 5f       	subi	r24, 0xFF	; 255
    990e:	80 93 23 24 	sts	0x2423, r24
    9912:	80 91 23 24 	lds	r24, 0x2423
    9916:	89 31       	cpi	r24, 0x19	; 25
    9918:	18 f0       	brcs	.+6      	; 0x9920 <__vector_28+0xa0>
		fr.rx_buf_head = 1;
    991a:	81 e0       	ldi	r24, 0x01	; 1
    991c:	80 93 23 24 	sts	0x2423, r24
	}
	// activate flow control here or before it gets to this level
}
    9920:	0f 90       	pop	r0
    9922:	cf 91       	pop	r28
    9924:	df 91       	pop	r29
    9926:	ff 91       	pop	r31
    9928:	ef 91       	pop	r30
    992a:	bf 91       	pop	r27
    992c:	af 91       	pop	r26
    992e:	9f 91       	pop	r25
    9930:	8f 91       	pop	r24
    9932:	7f 91       	pop	r23
    9934:	6f 91       	pop	r22
    9936:	5f 91       	pop	r21
    9938:	4f 91       	pop	r20
    993a:	3f 91       	pop	r19
    993c:	2f 91       	pop	r18
    993e:	0f 90       	pop	r0
    9940:	00 92 3b 00 	sts	0x003B, r0
    9944:	0f 90       	pop	r0
    9946:	0f be       	out	0x3f, r0	; 63
    9948:	0f 90       	pop	r0
    994a:	1f 90       	pop	r1
    994c:	18 95       	reti

0000994e <xio_rs485_queue_RX_char>:
/*
 * xio_rs485_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_rs485_queue_RX_char(const char c)
{
    994e:	df 93       	push	r29
    9950:	cf 93       	push	r28
    9952:	0f 92       	push	r0
    9954:	cd b7       	in	r28, 0x3d	; 61
    9956:	de b7       	in	r29, 0x3e	; 62
    9958:	89 83       	std	Y+1, r24	; 0x01
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    995a:	89 81       	ldd	r24, Y+1	; 0x01
    995c:	83 30       	cpi	r24, 0x03	; 3
    995e:	31 f4       	brne	.+12     	; 0x996c <xio_rs485_queue_RX_char+0x1e>
		fr.sig = XIO_SIG_KILL;					// set signal value
    9960:	84 e0       	ldi	r24, 0x04	; 4
    9962:	80 93 1c 24 	sts	0x241C, r24
		signal_etx();							// call app-specific signal handler
    9966:	0e 94 4a 50 	call	0xa094	; 0xa094 <signal_etx>
    996a:	28 c0       	rjmp	.+80     	; 0x99bc <xio_rs485_queue_RX_char+0x6e>
		return;
	}

	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// wrap condition
    996c:	80 91 23 24 	lds	r24, 0x2423
    9970:	81 50       	subi	r24, 0x01	; 1
    9972:	80 93 23 24 	sts	0x2423, r24
    9976:	80 91 23 24 	lds	r24, 0x2423
    997a:	88 23       	and	r24, r24
    997c:	19 f4       	brne	.+6      	; 0x9984 <xio_rs485_queue_RX_char+0x36>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    997e:	88 e1       	ldi	r24, 0x18	; 24
    9980:	80 93 23 24 	sts	0x2423, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    9984:	90 91 23 24 	lds	r25, 0x2423
    9988:	80 91 22 24 	lds	r24, 0x2422
    998c:	98 17       	cp	r25, r24
    998e:	51 f0       	breq	.+20     	; 0x99a4 <xio_rs485_queue_RX_char+0x56>
		fr.rx_buf[fr.rx_buf_head] = c;			// FAKE INPUT DATA
    9990:	80 91 23 24 	lds	r24, 0x2423
    9994:	88 2f       	mov	r24, r24
    9996:	90 e0       	ldi	r25, 0x00	; 0
    9998:	fc 01       	movw	r30, r24
    999a:	e9 5d       	subi	r30, 0xD9	; 217
    999c:	fb 4d       	sbci	r31, 0xDB	; 219
    999e:	89 81       	ldd	r24, Y+1	; 0x01
    99a0:	80 83       	st	Z, r24
    99a2:	0c c0       	rjmp	.+24     	; 0x99bc <xio_rs485_queue_RX_char+0x6e>
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    99a4:	80 91 23 24 	lds	r24, 0x2423
    99a8:	8f 5f       	subi	r24, 0xFF	; 255
    99aa:	80 93 23 24 	sts	0x2423, r24
    99ae:	80 91 23 24 	lds	r24, 0x2423
    99b2:	89 31       	cpi	r24, 0x19	; 25
    99b4:	18 f0       	brcs	.+6      	; 0x99bc <xio_rs485_queue_RX_char+0x6e>
		fr.rx_buf_head = 1;
    99b6:	81 e0       	ldi	r24, 0x01	; 1
    99b8:	80 93 23 24 	sts	0x2423, r24
	}
}
    99bc:	0f 90       	pop	r0
    99be:	cf 91       	pop	r28
    99c0:	df 91       	pop	r29
    99c2:	08 95       	ret

000099c4 <xio_rs485_queue_RX_string>:
/*
 * xio_rs485_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_rs485_queue_RX_string(char *buf)
{
    99c4:	df 93       	push	r29
    99c6:	cf 93       	push	r28
    99c8:	cd b7       	in	r28, 0x3d	; 61
    99ca:	de b7       	in	r29, 0x3e	; 62
    99cc:	25 97       	sbiw	r28, 0x05	; 5
    99ce:	cd bf       	out	0x3d, r28	; 61
    99d0:	de bf       	out	0x3e, r29	; 62
    99d2:	8b 83       	std	Y+3, r24	; 0x03
    99d4:	9c 83       	std	Y+4, r25	; 0x04
	char c;
	uint8_t i=0;
    99d6:	19 82       	std	Y+1, r1	; 0x01
    99d8:	03 c0       	rjmp	.+6      	; 0x99e0 <xio_rs485_queue_RX_string+0x1c>

	while ((c = buf[i++]) != NUL) {
		xio_rs485_queue_RX_char(c);
    99da:	8a 81       	ldd	r24, Y+2	; 0x02
    99dc:	0e 94 a7 4c 	call	0x994e	; 0x994e <xio_rs485_queue_RX_char>
void xio_rs485_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    99e0:	89 81       	ldd	r24, Y+1	; 0x01
    99e2:	28 2f       	mov	r18, r24
    99e4:	30 e0       	ldi	r19, 0x00	; 0
    99e6:	8b 81       	ldd	r24, Y+3	; 0x03
    99e8:	9c 81       	ldd	r25, Y+4	; 0x04
    99ea:	fc 01       	movw	r30, r24
    99ec:	e2 0f       	add	r30, r18
    99ee:	f3 1f       	adc	r31, r19
    99f0:	80 81       	ld	r24, Z
    99f2:	8a 83       	std	Y+2, r24	; 0x02
    99f4:	8a 81       	ldd	r24, Y+2	; 0x02
    99f6:	8d 83       	std	Y+5, r24	; 0x05
    99f8:	8d 81       	ldd	r24, Y+5	; 0x05
    99fa:	88 23       	and	r24, r24
    99fc:	11 f0       	breq	.+4      	; 0x9a02 <xio_rs485_queue_RX_string+0x3e>
    99fe:	81 e0       	ldi	r24, 0x01	; 1
    9a00:	8d 83       	std	Y+5, r24	; 0x05
    9a02:	8d 81       	ldd	r24, Y+5	; 0x05
    9a04:	99 81       	ldd	r25, Y+1	; 0x01
    9a06:	9f 5f       	subi	r25, 0xFF	; 255
    9a08:	99 83       	std	Y+1, r25	; 0x01
    9a0a:	88 23       	and	r24, r24
    9a0c:	31 f7       	brne	.-52     	; 0x99da <xio_rs485_queue_RX_string+0x16>
		xio_rs485_queue_RX_char(c);
	}
}
    9a0e:	25 96       	adiw	r28, 0x05	; 5
    9a10:	cd bf       	out	0x3d, r28	; 61
    9a12:	de bf       	out	0x3e, r29	; 62
    9a14:	cf 91       	pop	r28
    9a16:	df 91       	pop	r29
    9a18:	08 95       	ret

00009a1a <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC0 data register empty
{
    9a1a:	1f 92       	push	r1
    9a1c:	0f 92       	push	r0
    9a1e:	0f b6       	in	r0, 0x3f	; 63
    9a20:	0f 92       	push	r0
    9a22:	00 90 3b 00 	lds	r0, 0x003B
    9a26:	0f 92       	push	r0
    9a28:	11 24       	eor	r1, r1
    9a2a:	8f 93       	push	r24
    9a2c:	9f 93       	push	r25
    9a2e:	af 93       	push	r26
    9a30:	bf 93       	push	r27
    9a32:	ef 93       	push	r30
    9a34:	ff 93       	push	r31
    9a36:	df 93       	push	r29
    9a38:	cf 93       	push	r28
    9a3a:	cd b7       	in	r28, 0x3d	; 61
    9a3c:	de b7       	in	r29, 0x3e	; 62
	if (fr.tx_buf_head == fr.tx_buf_tail) {			// buffer empty - disable ints
    9a3e:	90 91 25 24 	lds	r25, 0x2425
    9a42:	80 91 24 24 	lds	r24, 0x2424
    9a46:	98 17       	cp	r25, r24
    9a48:	39 f4       	brne	.+14     	; 0x9a58 <__vector_29+0x3e>
		fr.usart->CTRLA = USART_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    9a4a:	e0 91 52 24 	lds	r30, 0x2452
    9a4e:	f0 91 53 24 	lds	r31, 0x2453
    9a52:	80 e2       	ldi	r24, 0x20	; 32
    9a54:	83 83       	std	Z+3, r24	; 0x03
    9a56:	21 c0       	rjmp	.+66     	; 0x9a9a <__vector_29+0x80>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(fr.flags)) {
    9a58:	80 91 1a 24 	lds	r24, 0x241A
    9a5c:	90 91 1b 24 	lds	r25, 0x241B
    9a60:	80 70       	andi	r24, 0x00	; 0
    9a62:	98 70       	andi	r25, 0x08	; 8
    9a64:	00 97       	sbiw	r24, 0x00	; 0
    9a66:	c9 f4       	brne	.+50     	; 0x9a9a <__vector_29+0x80>
		if (--(fr.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    9a68:	80 91 24 24 	lds	r24, 0x2424
    9a6c:	81 50       	subi	r24, 0x01	; 1
    9a6e:	80 93 24 24 	sts	0x2424, r24
    9a72:	80 91 24 24 	lds	r24, 0x2424
    9a76:	88 23       	and	r24, r24
    9a78:	19 f4       	brne	.+6      	; 0x9a80 <__vector_29+0x66>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    9a7a:	81 e1       	ldi	r24, 0x11	; 17
    9a7c:	80 93 24 24 	sts	0x2424, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];	// write char to TX DATA register
    9a80:	a0 91 52 24 	lds	r26, 0x2452
    9a84:	b0 91 53 24 	lds	r27, 0x2453
    9a88:	80 91 24 24 	lds	r24, 0x2424
    9a8c:	88 2f       	mov	r24, r24
    9a8e:	90 e0       	ldi	r25, 0x00	; 0
    9a90:	fc 01       	movw	r30, r24
    9a92:	e0 5c       	subi	r30, 0xC0	; 192
    9a94:	fb 4d       	sbci	r31, 0xDB	; 219
    9a96:	80 81       	ld	r24, Z
    9a98:	8c 93       	st	X, r24
	}
}
    9a9a:	cf 91       	pop	r28
    9a9c:	df 91       	pop	r29
    9a9e:	ff 91       	pop	r31
    9aa0:	ef 91       	pop	r30
    9aa2:	bf 91       	pop	r27
    9aa4:	af 91       	pop	r26
    9aa6:	9f 91       	pop	r25
    9aa8:	8f 91       	pop	r24
    9aaa:	0f 90       	pop	r0
    9aac:	00 92 3b 00 	sts	0x003B, r0
    9ab0:	0f 90       	pop	r0
    9ab2:	0f be       	out	0x3f, r0	; 63
    9ab4:	0f 90       	pop	r0
    9ab6:	1f 90       	pop	r1
    9ab8:	18 95       	reti

00009aba <xio_rs485_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_rs485_putc(const char c, FILE *stream)
{
    9aba:	df 93       	push	r29
    9abc:	cf 93       	push	r28
    9abe:	cd b7       	in	r28, 0x3d	; 61
    9ac0:	de b7       	in	r29, 0x3e	; 62
    9ac2:	25 97       	sbiw	r28, 0x05	; 5
    9ac4:	cd bf       	out	0x3d, r28	; 61
    9ac6:	de bf       	out	0x3e, r29	; 62
    9ac8:	89 83       	std	Y+1, r24	; 0x01
    9aca:	6a 83       	std	Y+2, r22	; 0x02
    9acc:	7b 83       	std	Y+3, r23	; 0x03
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
    9ace:	80 91 25 24 	lds	r24, 0x2425
    9ad2:	81 50       	subi	r24, 0x01	; 1
    9ad4:	80 93 26 24 	sts	0x2426, r24
    9ad8:	80 91 26 24 	lds	r24, 0x2426
    9adc:	88 23       	and	r24, r24
    9ade:	21 f5       	brne	.+72     	; 0x9b28 <xio_rs485_putc+0x6e>
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
    9ae0:	81 e1       	ldi	r24, 0x11	; 17
    9ae2:	80 93 26 24 	sts	0x2426, r24
    9ae6:	20 c0       	rjmp	.+64     	; 0x9b28 <xio_rs485_putc+0x6e>
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(fr.flags)) {
    9ae8:	80 91 1a 24 	lds	r24, 0x241A
    9aec:	90 91 1b 24 	lds	r25, 0x241B
    9af0:	84 70       	andi	r24, 0x04	; 4
    9af2:	90 70       	andi	r25, 0x00	; 0
    9af4:	00 97       	sbiw	r24, 0x00	; 0
    9af6:	81 f0       	breq	.+32     	; 0x9b18 <xio_rs485_putc+0x5e>
			sleep_mode();
    9af8:	a8 e4       	ldi	r26, 0x48	; 72
    9afa:	b0 e0       	ldi	r27, 0x00	; 0
    9afc:	e8 e4       	ldi	r30, 0x48	; 72
    9afe:	f0 e0       	ldi	r31, 0x00	; 0
    9b00:	80 81       	ld	r24, Z
    9b02:	81 60       	ori	r24, 0x01	; 1
    9b04:	8c 93       	st	X, r24
    9b06:	88 95       	sleep
    9b08:	a8 e4       	ldi	r26, 0x48	; 72
    9b0a:	b0 e0       	ldi	r27, 0x00	; 0
    9b0c:	e8 e4       	ldi	r30, 0x48	; 72
    9b0e:	f0 e0       	ldi	r31, 0x00	; 0
    9b10:	80 81       	ld	r24, Z
    9b12:	8e 7f       	andi	r24, 0xFE	; 254
    9b14:	8c 93       	st	X, r24
    9b16:	08 c0       	rjmp	.+16     	; 0x9b28 <xio_rs485_putc+0x6e>
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
    9b18:	83 e0       	ldi	r24, 0x03	; 3
    9b1a:	80 93 1c 24 	sts	0x241C, r24
			return(_FDEV_ERR);
    9b1e:	8f ef       	ldi	r24, 0xFF	; 255
    9b20:	9f ef       	ldi	r25, 0xFF	; 255
    9b22:	8c 83       	std	Y+4, r24	; 0x04
    9b24:	9d 83       	std	Y+5, r25	; 0x05
    9b26:	78 c0       	rjmp	.+240    	; 0x9c18 <xio_rs485_putc+0x15e>
int xio_rs485_putc(const char c, FILE *stream)
{
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
    9b28:	90 91 26 24 	lds	r25, 0x2426
    9b2c:	80 91 24 24 	lds	r24, 0x2424
    9b30:	98 17       	cp	r25, r24
    9b32:	d1 f2       	breq	.-76     	; 0x9ae8 <xio_rs485_putc+0x2e>
			fr.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	fr.tx_buf_head = fr.next_tx_buf_head;			// accept the next buffer head value
    9b34:	80 91 26 24 	lds	r24, 0x2426
    9b38:	80 93 25 24 	sts	0x2425, r24
	fr.tx_buf[fr.tx_buf_head] = c;				// ...and write char to buffer
    9b3c:	80 91 25 24 	lds	r24, 0x2425
    9b40:	88 2f       	mov	r24, r24
    9b42:	90 e0       	ldi	r25, 0x00	; 0
    9b44:	fc 01       	movw	r30, r24
    9b46:	e0 5c       	subi	r30, 0xC0	; 192
    9b48:	fb 4d       	sbci	r31, 0xDB	; 219
    9b4a:	89 81       	ldd	r24, Y+1	; 0x01
    9b4c:	80 83       	st	Z, r24

	if (CRLF(fr.flags) && (c == '\n')) {			// detect LF and add a CR
    9b4e:	80 91 1a 24 	lds	r24, 0x241A
    9b52:	90 91 1b 24 	lds	r25, 0x241B
    9b56:	80 72       	andi	r24, 0x20	; 32
    9b58:	90 70       	andi	r25, 0x00	; 0
    9b5a:	00 97       	sbiw	r24, 0x00	; 0
    9b5c:	61 f0       	breq	.+24     	; 0x9b76 <xio_rs485_putc+0xbc>
    9b5e:	89 81       	ldd	r24, Y+1	; 0x01
    9b60:	8a 30       	cpi	r24, 0x0A	; 10
    9b62:	49 f4       	brne	.+18     	; 0x9b76 <xio_rs485_putc+0xbc>
		return xio_rs485_putc('\r', stream);		// recursion.
    9b64:	2a 81       	ldd	r18, Y+2	; 0x02
    9b66:	3b 81       	ldd	r19, Y+3	; 0x03
    9b68:	8d e0       	ldi	r24, 0x0D	; 13
    9b6a:	b9 01       	movw	r22, r18
    9b6c:	0e 94 5d 4d 	call	0x9aba	; 0x9aba <xio_rs485_putc>
    9b70:	8c 83       	std	Y+4, r24	; 0x04
    9b72:	9d 83       	std	Y+5, r25	; 0x05
    9b74:	51 c0       	rjmp	.+162    	; 0x9c18 <xio_rs485_putc+0x15e>
	}

	// dequeue the buffer if DATA register is ready
	if (fr.usart->STATUS & 0x20) {
    9b76:	e0 91 52 24 	lds	r30, 0x2452
    9b7a:	f0 91 53 24 	lds	r31, 0x2453
    9b7e:	81 81       	ldd	r24, Z+1	; 0x01
    9b80:	88 2f       	mov	r24, r24
    9b82:	90 e0       	ldi	r25, 0x00	; 0
    9b84:	80 72       	andi	r24, 0x20	; 32
    9b86:	90 70       	andi	r25, 0x00	; 0
    9b88:	00 97       	sbiw	r24, 0x00	; 0
    9b8a:	a1 f1       	breq	.+104    	; 0x9bf4 <xio_rs485_putc+0x13a>
		if (fr.tx_buf_head == fr.tx_buf_tail) {	// buf might be empty if IRQ got it
    9b8c:	90 91 25 24 	lds	r25, 0x2425
    9b90:	80 91 24 24 	lds	r24, 0x2424
    9b94:	98 17       	cp	r25, r24
    9b96:	19 f4       	brne	.+6      	; 0x9b9e <xio_rs485_putc+0xe4>
			return (0);
    9b98:	1c 82       	std	Y+4, r1	; 0x04
    9b9a:	1d 82       	std	Y+5, r1	; 0x05
    9b9c:	3d c0       	rjmp	.+122    	; 0x9c18 <xio_rs485_putc+0x15e>
		}
		fr.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    9b9e:	80 91 1a 24 	lds	r24, 0x241A
    9ba2:	90 91 1b 24 	lds	r25, 0x241B
    9ba6:	98 60       	ori	r25, 0x08	; 8
    9ba8:	80 93 1a 24 	sts	0x241A, r24
    9bac:	90 93 1b 24 	sts	0x241B, r25
		if (--(fr.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    9bb0:	80 91 24 24 	lds	r24, 0x2424
    9bb4:	81 50       	subi	r24, 0x01	; 1
    9bb6:	80 93 24 24 	sts	0x2424, r24
    9bba:	80 91 24 24 	lds	r24, 0x2424
    9bbe:	88 23       	and	r24, r24
    9bc0:	19 f4       	brne	.+6      	; 0x9bc8 <xio_rs485_putc+0x10e>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    9bc2:	81 e1       	ldi	r24, 0x11	; 17
    9bc4:	80 93 24 24 	sts	0x2424, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];// write char to TX DATA register
    9bc8:	a0 91 52 24 	lds	r26, 0x2452
    9bcc:	b0 91 53 24 	lds	r27, 0x2453
    9bd0:	80 91 24 24 	lds	r24, 0x2424
    9bd4:	88 2f       	mov	r24, r24
    9bd6:	90 e0       	ldi	r25, 0x00	; 0
    9bd8:	fc 01       	movw	r30, r24
    9bda:	e0 5c       	subi	r30, 0xC0	; 192
    9bdc:	fb 4d       	sbci	r31, 0xDB	; 219
    9bde:	80 81       	ld	r24, Z
    9be0:	8c 93       	st	X, r24
		fr.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    9be2:	80 91 1a 24 	lds	r24, 0x241A
    9be6:	90 91 1b 24 	lds	r25, 0x241B
    9bea:	97 7f       	andi	r25, 0xF7	; 247
    9bec:	80 93 1a 24 	sts	0x241A, r24
    9bf0:	90 93 1b 24 	sts	0x241B, r25
	}
	// enable interrupts regardless
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    9bf4:	e0 91 52 24 	lds	r30, 0x2452
    9bf8:	f0 91 53 24 	lds	r31, 0x2453
    9bfc:	81 e2       	ldi	r24, 0x21	; 33
    9bfe:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    9c00:	a0 ea       	ldi	r26, 0xA0	; 160
    9c02:	b0 e0       	ldi	r27, 0x00	; 0
    9c04:	e0 ea       	ldi	r30, 0xA0	; 160
    9c06:	f0 e0       	ldi	r31, 0x00	; 0
    9c08:	82 81       	ldd	r24, Z+2	; 0x02
    9c0a:	81 60       	ori	r24, 0x01	; 1
    9c0c:	12 96       	adiw	r26, 0x02	; 2
    9c0e:	8c 93       	st	X, r24
    9c10:	12 97       	sbiw	r26, 0x02	; 2
	sei();										// enable global interrupts
    9c12:	78 94       	sei

	return (0);	// 0 = OK
    9c14:	1c 82       	std	Y+4, r1	; 0x04
    9c16:	1d 82       	std	Y+5, r1	; 0x05
    9c18:	8c 81       	ldd	r24, Y+4	; 0x04
    9c1a:	9d 81       	ldd	r25, Y+5	; 0x05
}
    9c1c:	25 96       	adiw	r28, 0x05	; 5
    9c1e:	cd bf       	out	0x3d, r28	; 61
    9c20:	de bf       	out	0x3e, r29	; 62
    9c22:	cf 91       	pop	r28
    9c24:	df 91       	pop	r29
    9c26:	08 95       	ret

00009c28 <xio_rs485_getc>:
 *		- special characters such as EOL and control chars are handled by the
 *		  character helper routines. See them for behaviors
 */

int xio_rs485_getc(FILE *stream)
{
    9c28:	df 93       	push	r29
    9c2a:	cf 93       	push	r28
    9c2c:	cd b7       	in	r28, 0x3d	; 61
    9c2e:	de b7       	in	r29, 0x3e	; 62
    9c30:	28 97       	sbiw	r28, 0x08	; 8
    9c32:	cd bf       	out	0x3d, r28	; 61
    9c34:	de bf       	out	0x3e, r29	; 62
    9c36:	8d 83       	std	Y+5, r24	; 0x05
    9c38:	9e 83       	std	Y+6, r25	; 0x06
    9c3a:	20 c0       	rjmp	.+64     	; 0x9c7c <xio_rs485_getc+0x54>
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(fr.flags)) {
    9c3c:	80 91 1a 24 	lds	r24, 0x241A
    9c40:	90 91 1b 24 	lds	r25, 0x241B
    9c44:	84 70       	andi	r24, 0x04	; 4
    9c46:	90 70       	andi	r25, 0x00	; 0
    9c48:	00 97       	sbiw	r24, 0x00	; 0
    9c4a:	81 f0       	breq	.+32     	; 0x9c6c <xio_rs485_getc+0x44>
			sleep_mode();
    9c4c:	a8 e4       	ldi	r26, 0x48	; 72
    9c4e:	b0 e0       	ldi	r27, 0x00	; 0
    9c50:	e8 e4       	ldi	r30, 0x48	; 72
    9c52:	f0 e0       	ldi	r31, 0x00	; 0
    9c54:	80 81       	ld	r24, Z
    9c56:	81 60       	ori	r24, 0x01	; 1
    9c58:	8c 93       	st	X, r24
    9c5a:	88 95       	sleep
    9c5c:	a8 e4       	ldi	r26, 0x48	; 72
    9c5e:	b0 e0       	ldi	r27, 0x00	; 0
    9c60:	e8 e4       	ldi	r30, 0x48	; 72
    9c62:	f0 e0       	ldi	r31, 0x00	; 0
    9c64:	80 81       	ld	r24, Z
    9c66:	8e 7f       	andi	r24, 0xFE	; 254
    9c68:	8c 93       	st	X, r24
    9c6a:	08 c0       	rjmp	.+16     	; 0x9c7c <xio_rs485_getc+0x54>
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
    9c6c:	83 e0       	ldi	r24, 0x03	; 3
    9c6e:	80 93 1c 24 	sts	0x241C, r24
			return(_FDEV_ERR);
    9c72:	8f ef       	ldi	r24, 0xFF	; 255
    9c74:	9f ef       	ldi	r25, 0xFF	; 255
    9c76:	8f 83       	std	Y+7, r24	; 0x07
    9c78:	98 87       	std	Y+8, r25	; 0x08
    9c7a:	36 c0       	rjmp	.+108    	; 0x9ce8 <xio_rs485_getc+0xc0>
 *		  character helper routines. See them for behaviors
 */

int xio_rs485_getc(FILE *stream)
{
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
    9c7c:	90 91 23 24 	lds	r25, 0x2423
    9c80:	80 91 22 24 	lds	r24, 0x2422
    9c84:	98 17       	cp	r25, r24
    9c86:	d1 f2       	breq	.-76     	; 0x9c3c <xio_rs485_getc+0x14>
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    9c88:	80 91 22 24 	lds	r24, 0x2422
    9c8c:	81 50       	subi	r24, 0x01	; 1
    9c8e:	80 93 22 24 	sts	0x2422, r24
    9c92:	80 91 22 24 	lds	r24, 0x2422
    9c96:	88 23       	and	r24, r24
    9c98:	19 f4       	brne	.+6      	; 0x9ca0 <xio_rs485_getc+0x78>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    9c9a:	88 e1       	ldi	r24, 0x18	; 24
    9c9c:	80 93 22 24 	sts	0x2422, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    9ca0:	80 91 22 24 	lds	r24, 0x2422
    9ca4:	88 2f       	mov	r24, r24
    9ca6:	90 e0       	ldi	r25, 0x00	; 0
    9ca8:	fc 01       	movw	r30, r24
    9caa:	e9 5d       	subi	r30, 0xD9	; 217
    9cac:	fb 4d       	sbci	r31, 0xDB	; 219
    9cae:	80 81       	ld	r24, Z
    9cb0:	8f 77       	andi	r24, 0x7F	; 127
    9cb2:	80 93 1d 24 	sts	0x241D, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[fr.c])))());
    9cb6:	80 91 1d 24 	lds	r24, 0x241D
    9cba:	88 2f       	mov	r24, r24
    9cbc:	90 e0       	ldi	r25, 0x00	; 0
    9cbe:	88 0f       	add	r24, r24
    9cc0:	99 1f       	adc	r25, r25
    9cc2:	8a 5f       	subi	r24, 0xFA	; 250
    9cc4:	93 4e       	sbci	r25, 0xE3	; 227
    9cc6:	8b 83       	std	Y+3, r24	; 0x03
    9cc8:	9c 83       	std	Y+4, r25	; 0x04
    9cca:	8b 81       	ldd	r24, Y+3	; 0x03
    9ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    9cce:	fc 01       	movw	r30, r24
    9cd0:	85 91       	lpm	r24, Z+
    9cd2:	94 91       	lpm	r25, Z+
    9cd4:	89 83       	std	Y+1, r24	; 0x01
    9cd6:	9a 83       	std	Y+2, r25	; 0x02
    9cd8:	eb 83       	std	Y+3, r30	; 0x03
    9cda:	fc 83       	std	Y+4, r31	; 0x04
    9cdc:	89 81       	ldd	r24, Y+1	; 0x01
    9cde:	9a 81       	ldd	r25, Y+2	; 0x02
    9ce0:	fc 01       	movw	r30, r24
    9ce2:	19 95       	eicall
    9ce4:	8f 83       	std	Y+7, r24	; 0x07
    9ce6:	98 87       	std	Y+8, r25	; 0x08
    9ce8:	8f 81       	ldd	r24, Y+7	; 0x07
    9cea:	98 85       	ldd	r25, Y+8	; 0x08
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    9cec:	28 96       	adiw	r28, 0x08	; 8
    9cee:	cd bf       	out	0x3d, r28	; 61
    9cf0:	de bf       	out	0x3e, r29	; 62
    9cf2:	cf 91       	pop	r28
    9cf4:	df 91       	pop	r29
    9cf6:	08 95       	ret

00009cf8 <_getc_char>:

/* xio_rs485_getc helper routines */

static int _getc_char(void)
{
    9cf8:	df 93       	push	r29
    9cfa:	cf 93       	push	r28
    9cfc:	cd b7       	in	r28, 0x3d	; 61
    9cfe:	de b7       	in	r29, 0x3e	; 62
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    9d00:	80 91 1a 24 	lds	r24, 0x241A
    9d04:	90 91 1b 24 	lds	r25, 0x241B
    9d08:	80 71       	andi	r24, 0x10	; 16
    9d0a:	90 70       	andi	r25, 0x00	; 0
    9d0c:	00 97       	sbiw	r24, 0x00	; 0
    9d0e:	49 f0       	breq	.+18     	; 0x9d22 <_getc_char+0x2a>
    9d10:	80 91 1d 24 	lds	r24, 0x241D
    9d14:	20 91 64 25 	lds	r18, 0x2564
    9d18:	30 91 65 25 	lds	r19, 0x2565
    9d1c:	b9 01       	movw	r22, r18
    9d1e:	0e 94 5d 4d 	call	0x9aba	; 0x9aba <xio_rs485_putc>
	return(fr.c);
    9d22:	80 91 1d 24 	lds	r24, 0x241D
    9d26:	88 2f       	mov	r24, r24
    9d28:	90 e0       	ldi	r25, 0x00	; 0
}
    9d2a:	cf 91       	pop	r28
    9d2c:	df 91       	pop	r29
    9d2e:	08 95       	ret

00009d30 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
    9d30:	df 93       	push	r29
    9d32:	cf 93       	push	r28
    9d34:	cd b7       	in	r28, 0x3d	; 61
    9d36:	de b7       	in	r29, 0x3e	; 62
	if (LINEMODE(fr.flags)) fr.c = '\n';
    9d38:	80 91 1a 24 	lds	r24, 0x241A
    9d3c:	90 91 1b 24 	lds	r25, 0x241B
    9d40:	80 74       	andi	r24, 0x40	; 64
    9d42:	90 70       	andi	r25, 0x00	; 0
    9d44:	00 97       	sbiw	r24, 0x00	; 0
    9d46:	19 f0       	breq	.+6      	; 0x9d4e <_getc_NEWLINE+0x1e>
    9d48:	8a e0       	ldi	r24, 0x0A	; 10
    9d4a:	80 93 1d 24 	sts	0x241D, r24
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    9d4e:	80 91 1a 24 	lds	r24, 0x241A
    9d52:	90 91 1b 24 	lds	r25, 0x241B
    9d56:	80 71       	andi	r24, 0x10	; 16
    9d58:	90 70       	andi	r25, 0x00	; 0
    9d5a:	00 97       	sbiw	r24, 0x00	; 0
    9d5c:	49 f0       	breq	.+18     	; 0x9d70 <_getc_NEWLINE+0x40>
    9d5e:	80 91 1d 24 	lds	r24, 0x241D
    9d62:	20 91 64 25 	lds	r18, 0x2564
    9d66:	30 91 65 25 	lds	r19, 0x2565
    9d6a:	b9 01       	movw	r22, r18
    9d6c:	0e 94 5d 4d 	call	0x9aba	; 0x9aba <xio_rs485_putc>
	return(fr.c);
    9d70:	80 91 1d 24 	lds	r24, 0x241D
    9d74:	88 2f       	mov	r24, r24
    9d76:	90 e0       	ldi	r25, 0x00	; 0
}
    9d78:	cf 91       	pop	r28
    9d7a:	df 91       	pop	r29
    9d7c:	08 95       	ret

00009d7e <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
    9d7e:	df 93       	push	r29
    9d80:	cf 93       	push	r28
    9d82:	0f 92       	push	r0
    9d84:	0f 92       	push	r0
    9d86:	cd b7       	in	r28, 0x3d	; 61
    9d88:	de b7       	in	r29, 0x3e	; 62
	if (SEMICOLONS(fr.flags)) {
    9d8a:	80 91 1a 24 	lds	r24, 0x241A
    9d8e:	90 91 1b 24 	lds	r25, 0x241B
    9d92:	80 78       	andi	r24, 0x80	; 128
    9d94:	90 70       	andi	r25, 0x00	; 0
    9d96:	00 97       	sbiw	r24, 0x00	; 0
    9d98:	29 f0       	breq	.+10     	; 0x9da4 <_getc_SEMICOLON+0x26>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    9d9a:	0e 94 98 4e 	call	0x9d30	; 0x9d30 <_getc_NEWLINE>
    9d9e:	89 83       	std	Y+1, r24	; 0x01
    9da0:	9a 83       	std	Y+2, r25	; 0x02
    9da2:	04 c0       	rjmp	.+8      	; 0x9dac <_getc_SEMICOLON+0x2e>
	} 
	return (_getc_char());					// else treat as any other character
    9da4:	0e 94 7c 4e 	call	0x9cf8	; 0x9cf8 <_getc_char>
    9da8:	89 83       	std	Y+1, r24	; 0x01
    9daa:	9a 83       	std	Y+2, r25	; 0x02
    9dac:	89 81       	ldd	r24, Y+1	; 0x01
    9dae:	9a 81       	ldd	r25, Y+2	; 0x02
}
    9db0:	0f 90       	pop	r0
    9db2:	0f 90       	pop	r0
    9db4:	cf 91       	pop	r28
    9db6:	df 91       	pop	r29
    9db8:	08 95       	ret

00009dba <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
    9dba:	df 93       	push	r29
    9dbc:	cf 93       	push	r28
    9dbe:	cd b7       	in	r28, 0x3d	; 61
    9dc0:	de b7       	in	r29, 0x3e	; 62
	fr.sig = XIO_SIG_DELETE;
    9dc2:	8a e0       	ldi	r24, 0x0A	; 10
    9dc4:	80 93 1c 24 	sts	0x241C, r24
	return(_FDEV_ERR);
    9dc8:	8f ef       	ldi	r24, 0xFF	; 255
    9dca:	9f ef       	ldi	r25, 0xFF	; 255
}
    9dcc:	cf 91       	pop	r28
    9dce:	df 91       	pop	r29
    9dd0:	08 95       	ret

00009dd2 <xio_rs485_readln>:
 *
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_rs485_readln(char *buf, uint8_t len)
{
    9dd2:	df 93       	push	r29
    9dd4:	cf 93       	push	r28
    9dd6:	cd b7       	in	r28, 0x3d	; 61
    9dd8:	de b7       	in	r29, 0x3e	; 62
    9dda:	29 97       	sbiw	r28, 0x09	; 9
    9ddc:	cd bf       	out	0x3d, r28	; 61
    9dde:	de bf       	out	0x3e, r29	; 62
    9de0:	8d 83       	std	Y+5, r24	; 0x05
    9de2:	9e 83       	std	Y+6, r25	; 0x06
    9de4:	6f 83       	std	Y+7, r22	; 0x07
	if (!IN_LINE(fr.flags)) {					// first time thru initializations
    9de6:	80 91 1a 24 	lds	r24, 0x241A
    9dea:	90 91 1b 24 	lds	r25, 0x241B
    9dee:	80 70       	andi	r24, 0x00	; 0
    9df0:	90 74       	andi	r25, 0x40	; 64
    9df2:	00 97       	sbiw	r24, 0x00	; 0
    9df4:	a1 f4       	brne	.+40     	; 0x9e1e <xio_rs485_readln+0x4c>
		fr.i = 0;								// zero buffer
    9df6:	10 92 1e 24 	sts	0x241E, r1
		fr.len = len;							// save arg into struct 
    9dfa:	8f 81       	ldd	r24, Y+7	; 0x07
    9dfc:	80 93 1f 24 	sts	0x241F, r24
		fr.buf = buf;							// save arg into struct 
    9e00:	8d 81       	ldd	r24, Y+5	; 0x05
    9e02:	9e 81       	ldd	r25, Y+6	; 0x06
    9e04:	80 93 20 24 	sts	0x2420, r24
    9e08:	90 93 21 24 	sts	0x2421, r25
//		fr.sig = XIO_SIG_OK;					// no signal action
		fr.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    9e0c:	80 91 1a 24 	lds	r24, 0x241A
    9e10:	90 91 1b 24 	lds	r25, 0x241B
    9e14:	90 64       	ori	r25, 0x40	; 64
    9e16:	80 93 1a 24 	sts	0x241A, r24
    9e1a:	90 93 1b 24 	sts	0x241B, r25
	}
	if (fr.rx_buf_head == fr.rx_buf_tail) {		// RX ISR buffer empty
    9e1e:	90 91 23 24 	lds	r25, 0x2423
    9e22:	80 91 22 24 	lds	r24, 0x2422
    9e26:	98 17       	cp	r25, r24
    9e28:	29 f4       	brne	.+10     	; 0x9e34 <xio_rs485_readln+0x62>
//		fr.sig = XIO_SIG_WOULDBLOCK;
		return(TG_EAGAIN);
    9e2a:	81 e0       	ldi	r24, 0x01	; 1
    9e2c:	90 e0       	ldi	r25, 0x00	; 0
    9e2e:	88 87       	std	Y+8, r24	; 0x08
    9e30:	99 87       	std	Y+9, r25	; 0x09
    9e32:	30 c0       	rjmp	.+96     	; 0x9e94 <xio_rs485_readln+0xc2>
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    9e34:	80 91 22 24 	lds	r24, 0x2422
    9e38:	81 50       	subi	r24, 0x01	; 1
    9e3a:	80 93 22 24 	sts	0x2422, r24
    9e3e:	80 91 22 24 	lds	r24, 0x2422
    9e42:	88 23       	and	r24, r24
    9e44:	19 f4       	brne	.+6      	; 0x9e4c <xio_rs485_readln+0x7a>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    9e46:	88 e1       	ldi	r24, 0x18	; 24
    9e48:	80 93 22 24 	sts	0x2422, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    9e4c:	80 91 22 24 	lds	r24, 0x2422
    9e50:	88 2f       	mov	r24, r24
    9e52:	90 e0       	ldi	r25, 0x00	; 0
    9e54:	fc 01       	movw	r30, r24
    9e56:	e9 5d       	subi	r30, 0xD9	; 217
    9e58:	fb 4d       	sbci	r31, 0xDB	; 219
    9e5a:	80 81       	ld	r24, Z
    9e5c:	8f 77       	andi	r24, 0x7F	; 127
    9e5e:	80 93 1d 24 	sts	0x241D, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[fr.c])))()); // dispatch on character
    9e62:	80 91 1d 24 	lds	r24, 0x241D
    9e66:	88 2f       	mov	r24, r24
    9e68:	90 e0       	ldi	r25, 0x00	; 0
    9e6a:	88 0f       	add	r24, r24
    9e6c:	99 1f       	adc	r25, r25
    9e6e:	8a 5f       	subi	r24, 0xFA	; 250
    9e70:	92 4e       	sbci	r25, 0xE2	; 226
    9e72:	8b 83       	std	Y+3, r24	; 0x03
    9e74:	9c 83       	std	Y+4, r25	; 0x04
    9e76:	8b 81       	ldd	r24, Y+3	; 0x03
    9e78:	9c 81       	ldd	r25, Y+4	; 0x04
    9e7a:	fc 01       	movw	r30, r24
    9e7c:	85 91       	lpm	r24, Z+
    9e7e:	94 91       	lpm	r25, Z+
    9e80:	89 83       	std	Y+1, r24	; 0x01
    9e82:	9a 83       	std	Y+2, r25	; 0x02
    9e84:	eb 83       	std	Y+3, r30	; 0x03
    9e86:	fc 83       	std	Y+4, r31	; 0x04
    9e88:	89 81       	ldd	r24, Y+1	; 0x01
    9e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    9e8c:	fc 01       	movw	r30, r24
    9e8e:	19 95       	eicall
    9e90:	88 87       	std	Y+8, r24	; 0x08
    9e92:	99 87       	std	Y+9, r25	; 0x09
    9e94:	88 85       	ldd	r24, Y+8	; 0x08
    9e96:	99 85       	ldd	r25, Y+9	; 0x09
}
    9e98:	29 96       	adiw	r28, 0x09	; 9
    9e9a:	cd bf       	out	0x3d, r28	; 61
    9e9c:	de bf       	out	0x3e, r29	; 62
    9e9e:	cf 91       	pop	r28
    9ea0:	df 91       	pop	r29
    9ea2:	08 95       	ret

00009ea4 <_readln_char>:

/* xio_rs485_readln helper routines */

static int _readln_char(void)
{
    9ea4:	df 93       	push	r29
    9ea6:	cf 93       	push	r28
    9ea8:	0f 92       	push	r0
    9eaa:	0f 92       	push	r0
    9eac:	cd b7       	in	r28, 0x3d	; 61
    9eae:	de b7       	in	r29, 0x3e	; 62
	if (fr.i > fr.len) {						// trap buffer overflow
    9eb0:	90 91 1e 24 	lds	r25, 0x241E
    9eb4:	80 91 1f 24 	lds	r24, 0x241F
    9eb8:	89 17       	cp	r24, r25
    9eba:	a0 f4       	brcc	.+40     	; 0x9ee4 <_readln_char+0x40>
		fr.sig = XIO_SIG_EOL;
    9ebc:	81 e0       	ldi	r24, 0x01	; 1
    9ebe:	80 93 1c 24 	sts	0x241C, r24
		fr.buf[fr.len] = NUL;					// fr.len is zero based
    9ec2:	20 91 20 24 	lds	r18, 0x2420
    9ec6:	30 91 21 24 	lds	r19, 0x2421
    9eca:	80 91 1f 24 	lds	r24, 0x241F
    9ece:	88 2f       	mov	r24, r24
    9ed0:	90 e0       	ldi	r25, 0x00	; 0
    9ed2:	f9 01       	movw	r30, r18
    9ed4:	e8 0f       	add	r30, r24
    9ed6:	f9 1f       	adc	r31, r25
    9ed8:	10 82       	st	Z, r1
		return (TG_BUFFER_FULL);
    9eda:	87 e0       	ldi	r24, 0x07	; 7
    9edc:	90 e0       	ldi	r25, 0x00	; 0
    9ede:	89 83       	std	Y+1, r24	; 0x01
    9ee0:	9a 83       	std	Y+2, r25	; 0x02
    9ee2:	27 c0       	rjmp	.+78     	; 0x9f32 <_readln_char+0x8e>
	}
	fr.buf[fr.i++] = fr.c;
    9ee4:	20 91 20 24 	lds	r18, 0x2420
    9ee8:	30 91 21 24 	lds	r19, 0x2421
    9eec:	40 91 1e 24 	lds	r20, 0x241E
    9ef0:	84 2f       	mov	r24, r20
    9ef2:	90 e0       	ldi	r25, 0x00	; 0
    9ef4:	f9 01       	movw	r30, r18
    9ef6:	e8 0f       	add	r30, r24
    9ef8:	f9 1f       	adc	r31, r25
    9efa:	80 91 1d 24 	lds	r24, 0x241D
    9efe:	80 83       	st	Z, r24
    9f00:	84 2f       	mov	r24, r20
    9f02:	8f 5f       	subi	r24, 0xFF	; 255
    9f04:	80 93 1e 24 	sts	0x241E, r24
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);// conditional echo
    9f08:	80 91 1a 24 	lds	r24, 0x241A
    9f0c:	90 91 1b 24 	lds	r25, 0x241B
    9f10:	80 71       	andi	r24, 0x10	; 16
    9f12:	90 70       	andi	r25, 0x00	; 0
    9f14:	00 97       	sbiw	r24, 0x00	; 0
    9f16:	49 f0       	breq	.+18     	; 0x9f2a <_readln_char+0x86>
    9f18:	80 91 1d 24 	lds	r24, 0x241D
    9f1c:	20 91 64 25 	lds	r18, 0x2564
    9f20:	30 91 65 25 	lds	r19, 0x2565
    9f24:	b9 01       	movw	r22, r18
    9f26:	0e 94 5d 4d 	call	0x9aba	; 0x9aba <xio_rs485_putc>
	return (TG_EAGAIN);						// line is still in process
    9f2a:	81 e0       	ldi	r24, 0x01	; 1
    9f2c:	90 e0       	ldi	r25, 0x00	; 0
    9f2e:	89 83       	std	Y+1, r24	; 0x01
    9f30:	9a 83       	std	Y+2, r25	; 0x02
    9f32:	89 81       	ldd	r24, Y+1	; 0x01
    9f34:	9a 81       	ldd	r25, Y+2	; 0x02
}
    9f36:	0f 90       	pop	r0
    9f38:	0f 90       	pop	r0
    9f3a:	cf 91       	pop	r28
    9f3c:	df 91       	pop	r29
    9f3e:	08 95       	ret

00009f40 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
    9f40:	df 93       	push	r29
    9f42:	cf 93       	push	r28
    9f44:	cd b7       	in	r28, 0x3d	; 61
    9f46:	de b7       	in	r29, 0x3e	; 62
	fr.sig = XIO_SIG_EOL;
    9f48:	81 e0       	ldi	r24, 0x01	; 1
    9f4a:	80 93 1c 24 	sts	0x241C, r24
	fr.buf[fr.i] = NUL;
    9f4e:	20 91 20 24 	lds	r18, 0x2420
    9f52:	30 91 21 24 	lds	r19, 0x2421
    9f56:	80 91 1e 24 	lds	r24, 0x241E
    9f5a:	88 2f       	mov	r24, r24
    9f5c:	90 e0       	ldi	r25, 0x00	; 0
    9f5e:	f9 01       	movw	r30, r18
    9f60:	e8 0f       	add	r30, r24
    9f62:	f9 1f       	adc	r31, r25
    9f64:	10 82       	st	Z, r1
	fr.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    9f66:	80 91 1a 24 	lds	r24, 0x241A
    9f6a:	90 91 1b 24 	lds	r25, 0x241B
    9f6e:	9f 7b       	andi	r25, 0xBF	; 191
    9f70:	80 93 1a 24 	sts	0x241A, r24
    9f74:	90 93 1b 24 	sts	0x241B, r25
	if (ECHO(fr.flags)) xio_rs485_putc('\n',stdout);// echo a newline
    9f78:	80 91 1a 24 	lds	r24, 0x241A
    9f7c:	90 91 1b 24 	lds	r25, 0x241B
    9f80:	80 71       	andi	r24, 0x10	; 16
    9f82:	90 70       	andi	r25, 0x00	; 0
    9f84:	00 97       	sbiw	r24, 0x00	; 0
    9f86:	41 f0       	breq	.+16     	; 0x9f98 <_readln_NEWLINE+0x58>
    9f88:	20 91 64 25 	lds	r18, 0x2564
    9f8c:	30 91 65 25 	lds	r19, 0x2565
    9f90:	8a e0       	ldi	r24, 0x0A	; 10
    9f92:	b9 01       	movw	r22, r18
    9f94:	0e 94 5d 4d 	call	0x9aba	; 0x9aba <xio_rs485_putc>
	return 0;
    9f98:	80 e0       	ldi	r24, 0x00	; 0
    9f9a:	90 e0       	ldi	r25, 0x00	; 0
//	return ((int)fr.line_func(fr.buf));			// call line handler function
}
    9f9c:	cf 91       	pop	r28
    9f9e:	df 91       	pop	r29
    9fa0:	08 95       	ret

00009fa2 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
    9fa2:	df 93       	push	r29
    9fa4:	cf 93       	push	r28
    9fa6:	0f 92       	push	r0
    9fa8:	0f 92       	push	r0
    9faa:	cd b7       	in	r28, 0x3d	; 61
    9fac:	de b7       	in	r29, 0x3e	; 62
	if (SEMICOLONS(fr.flags)) {
    9fae:	80 91 1a 24 	lds	r24, 0x241A
    9fb2:	90 91 1b 24 	lds	r25, 0x241B
    9fb6:	80 78       	andi	r24, 0x80	; 128
    9fb8:	90 70       	andi	r25, 0x00	; 0
    9fba:	00 97       	sbiw	r24, 0x00	; 0
    9fbc:	29 f0       	breq	.+10     	; 0x9fc8 <_readln_SEMICOLON+0x26>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    9fbe:	0e 94 a0 4f 	call	0x9f40	; 0x9f40 <_readln_NEWLINE>
    9fc2:	89 83       	std	Y+1, r24	; 0x01
    9fc4:	9a 83       	std	Y+2, r25	; 0x02
    9fc6:	04 c0       	rjmp	.+8      	; 0x9fd0 <_readln_SEMICOLON+0x2e>
	} else {
		return (_readln_char());				// else treat as any other character
    9fc8:	0e 94 52 4f 	call	0x9ea4	; 0x9ea4 <_readln_char>
    9fcc:	89 83       	std	Y+1, r24	; 0x01
    9fce:	9a 83       	std	Y+2, r25	; 0x02
    9fd0:	89 81       	ldd	r24, Y+1	; 0x01
    9fd2:	9a 81       	ldd	r25, Y+2	; 0x02
	}
}
    9fd4:	0f 90       	pop	r0
    9fd6:	0f 90       	pop	r0
    9fd8:	cf 91       	pop	r28
    9fda:	df 91       	pop	r29
    9fdc:	08 95       	ret

00009fde <_readln_DELETE>:

static int _readln_DELETE(void)
{
    9fde:	df 93       	push	r29
    9fe0:	cf 93       	push	r28
    9fe2:	cd b7       	in	r28, 0x3d	; 61
    9fe4:	de b7       	in	r29, 0x3e	; 62
	if (--fr.i >= 0) {
    9fe6:	80 91 1e 24 	lds	r24, 0x241E
    9fea:	81 50       	subi	r24, 0x01	; 1
    9fec:	80 93 1e 24 	sts	0x241E, r24
		if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    9ff0:	80 91 1a 24 	lds	r24, 0x241A
    9ff4:	90 91 1b 24 	lds	r25, 0x241B
    9ff8:	80 71       	andi	r24, 0x10	; 16
    9ffa:	90 70       	andi	r25, 0x00	; 0
    9ffc:	00 97       	sbiw	r24, 0x00	; 0
    9ffe:	49 f0       	breq	.+18     	; 0xa012 <_readln_DELETE+0x34>
    a000:	80 91 1d 24 	lds	r24, 0x241D
    a004:	20 91 64 25 	lds	r18, 0x2564
    a008:	30 91 65 25 	lds	r19, 0x2565
    a00c:	b9 01       	movw	r22, r18
    a00e:	0e 94 5d 4d 	call	0x9aba	; 0x9aba <xio_rs485_putc>
	} else {
		fr.i = 0;
	}
	return (TG_EAGAIN);							// line is still in process
    a012:	81 e0       	ldi	r24, 0x01	; 1
    a014:	90 e0       	ldi	r25, 0x00	; 0
}
    a016:	cf 91       	pop	r28
    a018:	df 91       	pop	r29
    a01a:	08 95       	ret

0000a01c <_sig_KILL>:
/*
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
    a01c:	df 93       	push	r29
    a01e:	cf 93       	push	r28
    a020:	cd b7       	in	r28, 0x3d	; 61
    a022:	de b7       	in	r29, 0x3e	; 62
	fr.sig = XIO_SIG_KILL;
    a024:	84 e0       	ldi	r24, 0x04	; 4
    a026:	80 93 1c 24 	sts	0x241C, r24
	return(_FDEV_ERR);
    a02a:	8f ef       	ldi	r24, 0xFF	; 255
    a02c:	9f ef       	ldi	r25, 0xFF	; 255
}
    a02e:	cf 91       	pop	r28
    a030:	df 91       	pop	r29
    a032:	08 95       	ret

0000a034 <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
    a034:	df 93       	push	r29
    a036:	cf 93       	push	r28
    a038:	cd b7       	in	r28, 0x3d	; 61
    a03a:	de b7       	in	r29, 0x3e	; 62
	fr.sig = XIO_SIG_PAUSE;
    a03c:	86 e0       	ldi	r24, 0x06	; 6
    a03e:	80 93 1c 24 	sts	0x241C, r24
	return(_FDEV_ERR);
    a042:	8f ef       	ldi	r24, 0xFF	; 255
    a044:	9f ef       	ldi	r25, 0xFF	; 255
}
    a046:	cf 91       	pop	r28
    a048:	df 91       	pop	r29
    a04a:	08 95       	ret

0000a04c <_sig_RESUME>:

static int _sig_RESUME(void)
{
    a04c:	df 93       	push	r29
    a04e:	cf 93       	push	r28
    a050:	cd b7       	in	r28, 0x3d	; 61
    a052:	de b7       	in	r29, 0x3e	; 62
	fr.sig = XIO_SIG_RESUME;
    a054:	87 e0       	ldi	r24, 0x07	; 7
    a056:	80 93 1c 24 	sts	0x241C, r24
	return(_FDEV_ERR);
    a05a:	8f ef       	ldi	r24, 0xFF	; 255
    a05c:	9f ef       	ldi	r25, 0xFF	; 255
}
    a05e:	cf 91       	pop	r28
    a060:	df 91       	pop	r29
    a062:	08 95       	ret

0000a064 <_sig_SHIFTOUT>:

static int _sig_SHIFTOUT(void)
{
    a064:	df 93       	push	r29
    a066:	cf 93       	push	r28
    a068:	cd b7       	in	r28, 0x3d	; 61
    a06a:	de b7       	in	r29, 0x3e	; 62
	fr.sig = XIO_SIG_SHIFTOUT;
    a06c:	88 e0       	ldi	r24, 0x08	; 8
    a06e:	80 93 1c 24 	sts	0x241C, r24
	return(_FDEV_ERR);
    a072:	8f ef       	ldi	r24, 0xFF	; 255
    a074:	9f ef       	ldi	r25, 0xFF	; 255
}
    a076:	cf 91       	pop	r28
    a078:	df 91       	pop	r29
    a07a:	08 95       	ret

0000a07c <_sig_SHIFTIN>:

static int _sig_SHIFTIN(void)
{
    a07c:	df 93       	push	r29
    a07e:	cf 93       	push	r28
    a080:	cd b7       	in	r28, 0x3d	; 61
    a082:	de b7       	in	r29, 0x3e	; 62
	fr.sig = XIO_SIG_SHIFTIN;
    a084:	89 e0       	ldi	r24, 0x09	; 9
    a086:	80 93 1c 24 	sts	0x241C, r24
	return(_FDEV_ERR);
    a08a:	8f ef       	ldi	r24, 0xFF	; 255
    a08c:	9f ef       	ldi	r25, 0xFF	; 255
}
    a08e:	cf 91       	pop	r28
    a090:	df 91       	pop	r29
    a092:	08 95       	ret

0000a094 <signal_etx>:

/*
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx() {			// ^c
    a094:	df 93       	push	r29
    a096:	cf 93       	push	r28
    a098:	cd b7       	in	r28, 0x3d	; 61
    a09a:	de b7       	in	r29, 0x3e	; 62
{
	tg_reset_source();					// return control to standard device
    a09c:	0e 94 ee 43 	call	0x87dc	; 0x87dc <tg_reset_source>
	mc_motion_stop();					// stop computing and generating motions
    a0a0:	0e 94 89 23 	call	0x4712	; 0x4712 <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    a0a4:	0e 94 f8 47 	call	0x8ff0	; 0x8ff0 <mv_flush>
	st_stop_steppers();					// stop the steppers
    a0a8:	0e 94 ac 34 	call	0x6958	; 0x6958 <st_stop_steppers>
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
*/
}
    a0ac:	cf 91       	pop	r28
    a0ae:	df 91       	pop	r29
    a0b0:	08 95       	ret

0000a0b2 <tg_resume.1635>:
{
	return;
}

void tg_resume()
{
    a0b2:	df 93       	push	r29
    a0b4:	cf 93       	push	r28
    a0b6:	cd b7       	in	r28, 0x3d	; 61
    a0b8:	de b7       	in	r29, 0x3e	; 62
	return;
}
    a0ba:	cf 91       	pop	r28
    a0bc:	df 91       	pop	r29
    a0be:	08 95       	ret

0000a0c0 <tg_pause.1633>:
//	tg_kill();
	return;
}

void tg_pause()
{
    a0c0:	df 93       	push	r29
    a0c2:	cf 93       	push	r28
    a0c4:	cd b7       	in	r28, 0x3d	; 61
    a0c6:	de b7       	in	r29, 0x3e	; 62
	return;
}
    a0c8:	cf 91       	pop	r28
    a0ca:	df 91       	pop	r29
    a0cc:	08 95       	ret

0000a0ce <tg_terminate.1631>:
	st_stop_steppers();					// stop the steppers
	return;
}

void tg_terminate()
{
    a0ce:	df 93       	push	r29
    a0d0:	cf 93       	push	r28
    a0d2:	cd b7       	in	r28, 0x3d	; 61
    a0d4:	de b7       	in	r29, 0x3e	; 62
//	tg_kill();
	return;
}
    a0d6:	cf 91       	pop	r28
    a0d8:	df 91       	pop	r29
    a0da:	08 95       	ret

0000a0dc <__udivdi3>:
    a0dc:	ae e5       	ldi	r26, 0x5E	; 94
    a0de:	b0 e0       	ldi	r27, 0x00	; 0
    a0e0:	e4 e7       	ldi	r30, 0x74	; 116
    a0e2:	f0 e5       	ldi	r31, 0x50	; 80
    a0e4:	0c 94 01 5f 	jmp	0xbe02	; 0xbe02 <__prologue_saves__>
    a0e8:	a8 e0       	ldi	r26, 0x08	; 8
    a0ea:	4e 01       	movw	r8, r28
    a0ec:	08 94       	sec
    a0ee:	81 1c       	adc	r8, r1
    a0f0:	91 1c       	adc	r9, r1
    a0f2:	f4 01       	movw	r30, r8
    a0f4:	6a 2e       	mov	r6, r26
    a0f6:	11 92       	st	Z+, r1
    a0f8:	6a 94       	dec	r6
    a0fa:	e9 f7       	brne	.-6      	; 0xa0f6 <__udivdi3+0x1a>
    a0fc:	29 83       	std	Y+1, r18	; 0x01
    a0fe:	3a 83       	std	Y+2, r19	; 0x02
    a100:	4b 83       	std	Y+3, r20	; 0x03
    a102:	5c 83       	std	Y+4, r21	; 0x04
    a104:	6d 83       	std	Y+5, r22	; 0x05
    a106:	7e 83       	std	Y+6, r23	; 0x06
    a108:	8f 83       	std	Y+7, r24	; 0x07
    a10a:	98 87       	std	Y+8, r25	; 0x08
    a10c:	ce 01       	movw	r24, r28
    a10e:	09 96       	adiw	r24, 0x09	; 9
    a110:	fc 01       	movw	r30, r24
    a112:	11 92       	st	Z+, r1
    a114:	aa 95       	dec	r26
    a116:	e9 f7       	brne	.-6      	; 0xa112 <__udivdi3+0x36>
    a118:	a9 86       	std	Y+9, r10	; 0x09
    a11a:	ba 86       	std	Y+10, r11	; 0x0a
    a11c:	cb 86       	std	Y+11, r12	; 0x0b
    a11e:	dc 86       	std	Y+12, r13	; 0x0c
    a120:	ed 86       	std	Y+13, r14	; 0x0d
    a122:	fe 86       	std	Y+14, r15	; 0x0e
    a124:	0f 87       	std	Y+15, r16	; 0x0f
    a126:	18 8b       	std	Y+16, r17	; 0x10
    a128:	29 84       	ldd	r2, Y+9	; 0x09
    a12a:	3a 84       	ldd	r3, Y+10	; 0x0a
    a12c:	4b 84       	ldd	r4, Y+11	; 0x0b
    a12e:	5c 84       	ldd	r5, Y+12	; 0x0c
    a130:	ed 84       	ldd	r14, Y+13	; 0x0d
    a132:	fe 84       	ldd	r15, Y+14	; 0x0e
    a134:	0f 85       	ldd	r16, Y+15	; 0x0f
    a136:	18 89       	ldd	r17, Y+16	; 0x10
    a138:	69 80       	ldd	r6, Y+1	; 0x01
    a13a:	7a 80       	ldd	r7, Y+2	; 0x02
    a13c:	8b 80       	ldd	r8, Y+3	; 0x03
    a13e:	9c 80       	ldd	r9, Y+4	; 0x04
    a140:	6d a6       	std	Y+45, r6	; 0x2d
    a142:	7e a6       	std	Y+46, r7	; 0x2e
    a144:	8f a6       	std	Y+47, r8	; 0x2f
    a146:	98 aa       	std	Y+48, r9	; 0x30
    a148:	6d 80       	ldd	r6, Y+5	; 0x05
    a14a:	7e 80       	ldd	r7, Y+6	; 0x06
    a14c:	8f 80       	ldd	r8, Y+7	; 0x07
    a14e:	98 84       	ldd	r9, Y+8	; 0x08
    a150:	e1 14       	cp	r14, r1
    a152:	f1 04       	cpc	r15, r1
    a154:	01 05       	cpc	r16, r1
    a156:	11 05       	cpc	r17, r1
    a158:	09 f0       	breq	.+2      	; 0xa15c <__udivdi3+0x80>
    a15a:	b3 c3       	rjmp	.+1894   	; 0xa8c2 <__udivdi3+0x7e6>
    a15c:	62 14       	cp	r6, r2
    a15e:	73 04       	cpc	r7, r3
    a160:	84 04       	cpc	r8, r4
    a162:	95 04       	cpc	r9, r5
    a164:	08 f0       	brcs	.+2      	; 0xa168 <__udivdi3+0x8c>
    a166:	3d c1       	rjmp	.+634    	; 0xa3e2 <__udivdi3+0x306>
    a168:	00 e0       	ldi	r16, 0x00	; 0
    a16a:	20 16       	cp	r2, r16
    a16c:	00 e0       	ldi	r16, 0x00	; 0
    a16e:	30 06       	cpc	r3, r16
    a170:	01 e0       	ldi	r16, 0x01	; 1
    a172:	40 06       	cpc	r4, r16
    a174:	00 e0       	ldi	r16, 0x00	; 0
    a176:	50 06       	cpc	r5, r16
    a178:	88 f4       	brcc	.+34     	; 0xa19c <__udivdi3+0xc0>
    a17a:	1f ef       	ldi	r17, 0xFF	; 255
    a17c:	21 16       	cp	r2, r17
    a17e:	31 04       	cpc	r3, r1
    a180:	41 04       	cpc	r4, r1
    a182:	51 04       	cpc	r5, r1
    a184:	39 f0       	breq	.+14     	; 0xa194 <__udivdi3+0xb8>
    a186:	30 f0       	brcs	.+12     	; 0xa194 <__udivdi3+0xb8>
    a188:	48 e0       	ldi	r20, 0x08	; 8
    a18a:	e4 2e       	mov	r14, r20
    a18c:	f1 2c       	mov	r15, r1
    a18e:	01 2d       	mov	r16, r1
    a190:	11 2d       	mov	r17, r1
    a192:	18 c0       	rjmp	.+48     	; 0xa1c4 <__udivdi3+0xe8>
    a194:	ee 24       	eor	r14, r14
    a196:	ff 24       	eor	r15, r15
    a198:	87 01       	movw	r16, r14
    a19a:	14 c0       	rjmp	.+40     	; 0xa1c4 <__udivdi3+0xe8>
    a19c:	20 e0       	ldi	r18, 0x00	; 0
    a19e:	22 16       	cp	r2, r18
    a1a0:	20 e0       	ldi	r18, 0x00	; 0
    a1a2:	32 06       	cpc	r3, r18
    a1a4:	20 e0       	ldi	r18, 0x00	; 0
    a1a6:	42 06       	cpc	r4, r18
    a1a8:	21 e0       	ldi	r18, 0x01	; 1
    a1aa:	52 06       	cpc	r5, r18
    a1ac:	30 f0       	brcs	.+12     	; 0xa1ba <__udivdi3+0xde>
    a1ae:	38 e1       	ldi	r19, 0x18	; 24
    a1b0:	e3 2e       	mov	r14, r19
    a1b2:	f1 2c       	mov	r15, r1
    a1b4:	01 2d       	mov	r16, r1
    a1b6:	11 2d       	mov	r17, r1
    a1b8:	05 c0       	rjmp	.+10     	; 0xa1c4 <__udivdi3+0xe8>
    a1ba:	20 e1       	ldi	r18, 0x10	; 16
    a1bc:	e2 2e       	mov	r14, r18
    a1be:	f1 2c       	mov	r15, r1
    a1c0:	01 2d       	mov	r16, r1
    a1c2:	11 2d       	mov	r17, r1
    a1c4:	d2 01       	movw	r26, r4
    a1c6:	c1 01       	movw	r24, r2
    a1c8:	0e 2c       	mov	r0, r14
    a1ca:	04 c0       	rjmp	.+8      	; 0xa1d4 <__udivdi3+0xf8>
    a1cc:	b6 95       	lsr	r27
    a1ce:	a7 95       	ror	r26
    a1d0:	97 95       	ror	r25
    a1d2:	87 95       	ror	r24
    a1d4:	0a 94       	dec	r0
    a1d6:	d2 f7       	brpl	.-12     	; 0xa1cc <__udivdi3+0xf0>
    a1d8:	83 5d       	subi	r24, 0xD3	; 211
    a1da:	9f 4d       	sbci	r25, 0xDF	; 223
    a1dc:	dc 01       	movw	r26, r24
    a1de:	2c 91       	ld	r18, X
    a1e0:	80 e2       	ldi	r24, 0x20	; 32
    a1e2:	90 e0       	ldi	r25, 0x00	; 0
    a1e4:	a0 e0       	ldi	r26, 0x00	; 0
    a1e6:	b0 e0       	ldi	r27, 0x00	; 0
    a1e8:	8e 19       	sub	r24, r14
    a1ea:	9f 09       	sbc	r25, r15
    a1ec:	a0 0b       	sbc	r26, r16
    a1ee:	b1 0b       	sbc	r27, r17
    a1f0:	7c 01       	movw	r14, r24
    a1f2:	8d 01       	movw	r16, r26
    a1f4:	e2 1a       	sub	r14, r18
    a1f6:	f1 08       	sbc	r15, r1
    a1f8:	01 09       	sbc	r16, r1
    a1fa:	11 09       	sbc	r17, r1
    a1fc:	e1 14       	cp	r14, r1
    a1fe:	f1 04       	cpc	r15, r1
    a200:	01 05       	cpc	r16, r1
    a202:	11 05       	cpc	r17, r1
    a204:	a1 f1       	breq	.+104    	; 0xa26e <__udivdi3+0x192>
    a206:	0e 2c       	mov	r0, r14
    a208:	04 c0       	rjmp	.+8      	; 0xa212 <__udivdi3+0x136>
    a20a:	22 0c       	add	r2, r2
    a20c:	33 1c       	adc	r3, r3
    a20e:	44 1c       	adc	r4, r4
    a210:	55 1c       	adc	r5, r5
    a212:	0a 94       	dec	r0
    a214:	d2 f7       	brpl	.-12     	; 0xa20a <__udivdi3+0x12e>
    a216:	a4 01       	movw	r20, r8
    a218:	93 01       	movw	r18, r6
    a21a:	0e 2c       	mov	r0, r14
    a21c:	04 c0       	rjmp	.+8      	; 0xa226 <__udivdi3+0x14a>
    a21e:	22 0f       	add	r18, r18
    a220:	33 1f       	adc	r19, r19
    a222:	44 1f       	adc	r20, r20
    a224:	55 1f       	adc	r21, r21
    a226:	0a 94       	dec	r0
    a228:	d2 f7       	brpl	.-12     	; 0xa21e <__udivdi3+0x142>
    a22a:	80 e2       	ldi	r24, 0x20	; 32
    a22c:	90 e0       	ldi	r25, 0x00	; 0
    a22e:	8e 19       	sub	r24, r14
    a230:	9f 09       	sbc	r25, r15
    a232:	6d a4       	ldd	r6, Y+45	; 0x2d
    a234:	7e a4       	ldd	r7, Y+46	; 0x2e
    a236:	8f a4       	ldd	r8, Y+47	; 0x2f
    a238:	98 a8       	ldd	r9, Y+48	; 0x30
    a23a:	04 c0       	rjmp	.+8      	; 0xa244 <__udivdi3+0x168>
    a23c:	96 94       	lsr	r9
    a23e:	87 94       	ror	r8
    a240:	77 94       	ror	r7
    a242:	67 94       	ror	r6
    a244:	8a 95       	dec	r24
    a246:	d2 f7       	brpl	.-12     	; 0xa23c <__udivdi3+0x160>
    a248:	62 2a       	or	r6, r18
    a24a:	73 2a       	or	r7, r19
    a24c:	84 2a       	or	r8, r20
    a24e:	95 2a       	or	r9, r21
    a250:	ad a4       	ldd	r10, Y+45	; 0x2d
    a252:	be a4       	ldd	r11, Y+46	; 0x2e
    a254:	cf a4       	ldd	r12, Y+47	; 0x2f
    a256:	d8 a8       	ldd	r13, Y+48	; 0x30
    a258:	04 c0       	rjmp	.+8      	; 0xa262 <__udivdi3+0x186>
    a25a:	aa 0c       	add	r10, r10
    a25c:	bb 1c       	adc	r11, r11
    a25e:	cc 1c       	adc	r12, r12
    a260:	dd 1c       	adc	r13, r13
    a262:	ea 94       	dec	r14
    a264:	d2 f7       	brpl	.-12     	; 0xa25a <__udivdi3+0x17e>
    a266:	ad a6       	std	Y+45, r10	; 0x2d
    a268:	be a6       	std	Y+46, r11	; 0x2e
    a26a:	cf a6       	std	Y+47, r12	; 0x2f
    a26c:	d8 aa       	std	Y+48, r13	; 0x30
    a26e:	62 01       	movw	r12, r4
    a270:	ee 24       	eor	r14, r14
    a272:	ff 24       	eor	r15, r15
    a274:	cd aa       	std	Y+53, r12	; 0x35
    a276:	de aa       	std	Y+54, r13	; 0x36
    a278:	ef aa       	std	Y+55, r14	; 0x37
    a27a:	f8 ae       	std	Y+56, r15	; 0x38
    a27c:	92 01       	movw	r18, r4
    a27e:	81 01       	movw	r16, r2
    a280:	20 70       	andi	r18, 0x00	; 0
    a282:	30 70       	andi	r19, 0x00	; 0
    a284:	09 af       	std	Y+57, r16	; 0x39
    a286:	1a af       	std	Y+58, r17	; 0x3a
    a288:	2b af       	std	Y+59, r18	; 0x3b
    a28a:	3c af       	std	Y+60, r19	; 0x3c
    a28c:	c4 01       	movw	r24, r8
    a28e:	b3 01       	movw	r22, r6
    a290:	a7 01       	movw	r20, r14
    a292:	96 01       	movw	r18, r12
    a294:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <__udivmodsi4>
    a298:	7b 01       	movw	r14, r22
    a29a:	8c 01       	movw	r16, r24
    a29c:	c4 01       	movw	r24, r8
    a29e:	b3 01       	movw	r22, r6
    a2a0:	2d a9       	ldd	r18, Y+53	; 0x35
    a2a2:	3e a9       	ldd	r19, Y+54	; 0x36
    a2a4:	4f a9       	ldd	r20, Y+55	; 0x37
    a2a6:	58 ad       	ldd	r21, Y+56	; 0x38
    a2a8:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <__udivmodsi4>
    a2ac:	c9 01       	movw	r24, r18
    a2ae:	da 01       	movw	r26, r20
    a2b0:	3c 01       	movw	r6, r24
    a2b2:	4d 01       	movw	r8, r26
    a2b4:	c4 01       	movw	r24, r8
    a2b6:	b3 01       	movw	r22, r6
    a2b8:	29 ad       	ldd	r18, Y+57	; 0x39
    a2ba:	3a ad       	ldd	r19, Y+58	; 0x3a
    a2bc:	4b ad       	ldd	r20, Y+59	; 0x3b
    a2be:	5c ad       	ldd	r21, Y+60	; 0x3c
    a2c0:	0e 94 c0 5e 	call	0xbd80	; 0xbd80 <__mulsi3>
    a2c4:	9b 01       	movw	r18, r22
    a2c6:	ac 01       	movw	r20, r24
    a2c8:	87 01       	movw	r16, r14
    a2ca:	ff 24       	eor	r15, r15
    a2cc:	ee 24       	eor	r14, r14
    a2ce:	ad a4       	ldd	r10, Y+45	; 0x2d
    a2d0:	be a4       	ldd	r11, Y+46	; 0x2e
    a2d2:	cf a4       	ldd	r12, Y+47	; 0x2f
    a2d4:	d8 a8       	ldd	r13, Y+48	; 0x30
    a2d6:	c6 01       	movw	r24, r12
    a2d8:	aa 27       	eor	r26, r26
    a2da:	bb 27       	eor	r27, r27
    a2dc:	57 01       	movw	r10, r14
    a2de:	68 01       	movw	r12, r16
    a2e0:	a8 2a       	or	r10, r24
    a2e2:	b9 2a       	or	r11, r25
    a2e4:	ca 2a       	or	r12, r26
    a2e6:	db 2a       	or	r13, r27
    a2e8:	a2 16       	cp	r10, r18
    a2ea:	b3 06       	cpc	r11, r19
    a2ec:	c4 06       	cpc	r12, r20
    a2ee:	d5 06       	cpc	r13, r21
    a2f0:	e0 f4       	brcc	.+56     	; 0xa32a <__udivdi3+0x24e>
    a2f2:	08 94       	sec
    a2f4:	61 08       	sbc	r6, r1
    a2f6:	71 08       	sbc	r7, r1
    a2f8:	81 08       	sbc	r8, r1
    a2fa:	91 08       	sbc	r9, r1
    a2fc:	a2 0c       	add	r10, r2
    a2fe:	b3 1c       	adc	r11, r3
    a300:	c4 1c       	adc	r12, r4
    a302:	d5 1c       	adc	r13, r5
    a304:	a2 14       	cp	r10, r2
    a306:	b3 04       	cpc	r11, r3
    a308:	c4 04       	cpc	r12, r4
    a30a:	d5 04       	cpc	r13, r5
    a30c:	70 f0       	brcs	.+28     	; 0xa32a <__udivdi3+0x24e>
    a30e:	a2 16       	cp	r10, r18
    a310:	b3 06       	cpc	r11, r19
    a312:	c4 06       	cpc	r12, r20
    a314:	d5 06       	cpc	r13, r21
    a316:	48 f4       	brcc	.+18     	; 0xa32a <__udivdi3+0x24e>
    a318:	08 94       	sec
    a31a:	61 08       	sbc	r6, r1
    a31c:	71 08       	sbc	r7, r1
    a31e:	81 08       	sbc	r8, r1
    a320:	91 08       	sbc	r9, r1
    a322:	a2 0c       	add	r10, r2
    a324:	b3 1c       	adc	r11, r3
    a326:	c4 1c       	adc	r12, r4
    a328:	d5 1c       	adc	r13, r5
    a32a:	a2 1a       	sub	r10, r18
    a32c:	b3 0a       	sbc	r11, r19
    a32e:	c4 0a       	sbc	r12, r20
    a330:	d5 0a       	sbc	r13, r21
    a332:	c6 01       	movw	r24, r12
    a334:	b5 01       	movw	r22, r10
    a336:	2d a9       	ldd	r18, Y+53	; 0x35
    a338:	3e a9       	ldd	r19, Y+54	; 0x36
    a33a:	4f a9       	ldd	r20, Y+55	; 0x37
    a33c:	58 ad       	ldd	r21, Y+56	; 0x38
    a33e:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <__udivmodsi4>
    a342:	7b 01       	movw	r14, r22
    a344:	8c 01       	movw	r16, r24
    a346:	c6 01       	movw	r24, r12
    a348:	b5 01       	movw	r22, r10
    a34a:	2d a9       	ldd	r18, Y+53	; 0x35
    a34c:	3e a9       	ldd	r19, Y+54	; 0x36
    a34e:	4f a9       	ldd	r20, Y+55	; 0x37
    a350:	58 ad       	ldd	r21, Y+56	; 0x38
    a352:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <__udivmodsi4>
    a356:	c9 01       	movw	r24, r18
    a358:	da 01       	movw	r26, r20
    a35a:	5c 01       	movw	r10, r24
    a35c:	6d 01       	movw	r12, r26
    a35e:	c6 01       	movw	r24, r12
    a360:	b5 01       	movw	r22, r10
    a362:	29 ad       	ldd	r18, Y+57	; 0x39
    a364:	3a ad       	ldd	r19, Y+58	; 0x3a
    a366:	4b ad       	ldd	r20, Y+59	; 0x3b
    a368:	5c ad       	ldd	r21, Y+60	; 0x3c
    a36a:	0e 94 c0 5e 	call	0xbd80	; 0xbd80 <__mulsi3>
    a36e:	9b 01       	movw	r18, r22
    a370:	ac 01       	movw	r20, r24
    a372:	87 01       	movw	r16, r14
    a374:	ff 24       	eor	r15, r15
    a376:	ee 24       	eor	r14, r14
    a378:	8d a5       	ldd	r24, Y+45	; 0x2d
    a37a:	9e a5       	ldd	r25, Y+46	; 0x2e
    a37c:	af a5       	ldd	r26, Y+47	; 0x2f
    a37e:	b8 a9       	ldd	r27, Y+48	; 0x30
    a380:	a0 70       	andi	r26, 0x00	; 0
    a382:	b0 70       	andi	r27, 0x00	; 0
    a384:	e8 2a       	or	r14, r24
    a386:	f9 2a       	or	r15, r25
    a388:	0a 2b       	or	r16, r26
    a38a:	1b 2b       	or	r17, r27
    a38c:	e2 16       	cp	r14, r18
    a38e:	f3 06       	cpc	r15, r19
    a390:	04 07       	cpc	r16, r20
    a392:	15 07       	cpc	r17, r21
    a394:	c0 f4       	brcc	.+48     	; 0xa3c6 <__udivdi3+0x2ea>
    a396:	08 94       	sec
    a398:	a1 08       	sbc	r10, r1
    a39a:	b1 08       	sbc	r11, r1
    a39c:	c1 08       	sbc	r12, r1
    a39e:	d1 08       	sbc	r13, r1
    a3a0:	e2 0c       	add	r14, r2
    a3a2:	f3 1c       	adc	r15, r3
    a3a4:	04 1d       	adc	r16, r4
    a3a6:	15 1d       	adc	r17, r5
    a3a8:	e2 14       	cp	r14, r2
    a3aa:	f3 04       	cpc	r15, r3
    a3ac:	04 05       	cpc	r16, r4
    a3ae:	15 05       	cpc	r17, r5
    a3b0:	50 f0       	brcs	.+20     	; 0xa3c6 <__udivdi3+0x2ea>
    a3b2:	e2 16       	cp	r14, r18
    a3b4:	f3 06       	cpc	r15, r19
    a3b6:	04 07       	cpc	r16, r20
    a3b8:	15 07       	cpc	r17, r21
    a3ba:	28 f4       	brcc	.+10     	; 0xa3c6 <__udivdi3+0x2ea>
    a3bc:	08 94       	sec
    a3be:	a1 08       	sbc	r10, r1
    a3c0:	b1 08       	sbc	r11, r1
    a3c2:	c1 08       	sbc	r12, r1
    a3c4:	d1 08       	sbc	r13, r1
    a3c6:	d3 01       	movw	r26, r6
    a3c8:	99 27       	eor	r25, r25
    a3ca:	88 27       	eor	r24, r24
    a3cc:	86 01       	movw	r16, r12
    a3ce:	75 01       	movw	r14, r10
    a3d0:	e8 2a       	or	r14, r24
    a3d2:	f9 2a       	or	r15, r25
    a3d4:	0a 2b       	or	r16, r26
    a3d6:	1b 2b       	or	r17, r27
    a3d8:	e9 aa       	std	Y+49, r14	; 0x31
    a3da:	fa aa       	std	Y+50, r15	; 0x32
    a3dc:	0b ab       	std	Y+51, r16	; 0x33
    a3de:	1c ab       	std	Y+52, r17	; 0x34
    a3e0:	cf c4       	rjmp	.+2462   	; 0xad80 <__udivdi3+0xca4>
    a3e2:	21 14       	cp	r2, r1
    a3e4:	31 04       	cpc	r3, r1
    a3e6:	41 04       	cpc	r4, r1
    a3e8:	51 04       	cpc	r5, r1
    a3ea:	71 f4       	brne	.+28     	; 0xa408 <__udivdi3+0x32c>
    a3ec:	61 e0       	ldi	r22, 0x01	; 1
    a3ee:	70 e0       	ldi	r23, 0x00	; 0
    a3f0:	80 e0       	ldi	r24, 0x00	; 0
    a3f2:	90 e0       	ldi	r25, 0x00	; 0
    a3f4:	20 e0       	ldi	r18, 0x00	; 0
    a3f6:	30 e0       	ldi	r19, 0x00	; 0
    a3f8:	40 e0       	ldi	r20, 0x00	; 0
    a3fa:	50 e0       	ldi	r21, 0x00	; 0
    a3fc:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <__udivmodsi4>
    a400:	c9 01       	movw	r24, r18
    a402:	da 01       	movw	r26, r20
    a404:	1c 01       	movw	r2, r24
    a406:	2d 01       	movw	r4, r26
    a408:	00 e0       	ldi	r16, 0x00	; 0
    a40a:	20 16       	cp	r2, r16
    a40c:	00 e0       	ldi	r16, 0x00	; 0
    a40e:	30 06       	cpc	r3, r16
    a410:	01 e0       	ldi	r16, 0x01	; 1
    a412:	40 06       	cpc	r4, r16
    a414:	00 e0       	ldi	r16, 0x00	; 0
    a416:	50 06       	cpc	r5, r16
    a418:	88 f4       	brcc	.+34     	; 0xa43c <__udivdi3+0x360>
    a41a:	1f ef       	ldi	r17, 0xFF	; 255
    a41c:	21 16       	cp	r2, r17
    a41e:	31 04       	cpc	r3, r1
    a420:	41 04       	cpc	r4, r1
    a422:	51 04       	cpc	r5, r1
    a424:	31 f0       	breq	.+12     	; 0xa432 <__udivdi3+0x356>
    a426:	28 f0       	brcs	.+10     	; 0xa432 <__udivdi3+0x356>
    a428:	48 e0       	ldi	r20, 0x08	; 8
    a42a:	50 e0       	ldi	r21, 0x00	; 0
    a42c:	60 e0       	ldi	r22, 0x00	; 0
    a42e:	70 e0       	ldi	r23, 0x00	; 0
    a430:	17 c0       	rjmp	.+46     	; 0xa460 <__udivdi3+0x384>
    a432:	40 e0       	ldi	r20, 0x00	; 0
    a434:	50 e0       	ldi	r21, 0x00	; 0
    a436:	60 e0       	ldi	r22, 0x00	; 0
    a438:	70 e0       	ldi	r23, 0x00	; 0
    a43a:	12 c0       	rjmp	.+36     	; 0xa460 <__udivdi3+0x384>
    a43c:	20 e0       	ldi	r18, 0x00	; 0
    a43e:	22 16       	cp	r2, r18
    a440:	20 e0       	ldi	r18, 0x00	; 0
    a442:	32 06       	cpc	r3, r18
    a444:	20 e0       	ldi	r18, 0x00	; 0
    a446:	42 06       	cpc	r4, r18
    a448:	21 e0       	ldi	r18, 0x01	; 1
    a44a:	52 06       	cpc	r5, r18
    a44c:	28 f0       	brcs	.+10     	; 0xa458 <__udivdi3+0x37c>
    a44e:	48 e1       	ldi	r20, 0x18	; 24
    a450:	50 e0       	ldi	r21, 0x00	; 0
    a452:	60 e0       	ldi	r22, 0x00	; 0
    a454:	70 e0       	ldi	r23, 0x00	; 0
    a456:	04 c0       	rjmp	.+8      	; 0xa460 <__udivdi3+0x384>
    a458:	40 e1       	ldi	r20, 0x10	; 16
    a45a:	50 e0       	ldi	r21, 0x00	; 0
    a45c:	60 e0       	ldi	r22, 0x00	; 0
    a45e:	70 e0       	ldi	r23, 0x00	; 0
    a460:	d2 01       	movw	r26, r4
    a462:	c1 01       	movw	r24, r2
    a464:	04 2e       	mov	r0, r20
    a466:	04 c0       	rjmp	.+8      	; 0xa470 <__udivdi3+0x394>
    a468:	b6 95       	lsr	r27
    a46a:	a7 95       	ror	r26
    a46c:	97 95       	ror	r25
    a46e:	87 95       	ror	r24
    a470:	0a 94       	dec	r0
    a472:	d2 f7       	brpl	.-12     	; 0xa468 <__udivdi3+0x38c>
    a474:	83 5d       	subi	r24, 0xD3	; 211
    a476:	9f 4d       	sbci	r25, 0xDF	; 223
    a478:	dc 01       	movw	r26, r24
    a47a:	2c 91       	ld	r18, X
    a47c:	e0 e2       	ldi	r30, 0x20	; 32
    a47e:	ee 2e       	mov	r14, r30
    a480:	f1 2c       	mov	r15, r1
    a482:	01 2d       	mov	r16, r1
    a484:	11 2d       	mov	r17, r1
    a486:	d8 01       	movw	r26, r16
    a488:	c7 01       	movw	r24, r14
    a48a:	84 1b       	sub	r24, r20
    a48c:	95 0b       	sbc	r25, r21
    a48e:	a6 0b       	sbc	r26, r22
    a490:	b7 0b       	sbc	r27, r23
    a492:	82 1b       	sub	r24, r18
    a494:	91 09       	sbc	r25, r1
    a496:	a1 09       	sbc	r26, r1
    a498:	b1 09       	sbc	r27, r1
    a49a:	00 97       	sbiw	r24, 0x00	; 0
    a49c:	a1 05       	cpc	r26, r1
    a49e:	b1 05       	cpc	r27, r1
    a4a0:	61 f4       	brne	.+24     	; 0xa4ba <__udivdi3+0x3de>
    a4a2:	64 01       	movw	r12, r8
    a4a4:	53 01       	movw	r10, r6
    a4a6:	a2 18       	sub	r10, r2
    a4a8:	b3 08       	sbc	r11, r3
    a4aa:	c4 08       	sbc	r12, r4
    a4ac:	d5 08       	sbc	r13, r5
    a4ae:	31 e0       	ldi	r19, 0x01	; 1
    a4b0:	63 2e       	mov	r6, r19
    a4b2:	71 2c       	mov	r7, r1
    a4b4:	81 2c       	mov	r8, r1
    a4b6:	91 2c       	mov	r9, r1
    a4b8:	1e c1       	rjmp	.+572    	; 0xa6f6 <__udivdi3+0x61a>
    a4ba:	6f 96       	adiw	r28, 0x1f	; 31
    a4bc:	8f af       	std	Y+63, r24	; 0x3f
    a4be:	6f 97       	sbiw	r28, 0x1f	; 31
    a4c0:	08 2e       	mov	r0, r24
    a4c2:	04 c0       	rjmp	.+8      	; 0xa4cc <__udivdi3+0x3f0>
    a4c4:	22 0c       	add	r2, r2
    a4c6:	33 1c       	adc	r3, r3
    a4c8:	44 1c       	adc	r4, r4
    a4ca:	55 1c       	adc	r5, r5
    a4cc:	0a 94       	dec	r0
    a4ce:	d2 f7       	brpl	.-12     	; 0xa4c4 <__udivdi3+0x3e8>
    a4d0:	ee 2d       	mov	r30, r14
    a4d2:	e8 1b       	sub	r30, r24
    a4d4:	64 01       	movw	r12, r8
    a4d6:	53 01       	movw	r10, r6
    a4d8:	0e 2e       	mov	r0, r30
    a4da:	04 c0       	rjmp	.+8      	; 0xa4e4 <__udivdi3+0x408>
    a4dc:	d6 94       	lsr	r13
    a4de:	c7 94       	ror	r12
    a4e0:	b7 94       	ror	r11
    a4e2:	a7 94       	ror	r10
    a4e4:	0a 94       	dec	r0
    a4e6:	d2 f7       	brpl	.-12     	; 0xa4dc <__udivdi3+0x400>
    a4e8:	a4 01       	movw	r20, r8
    a4ea:	93 01       	movw	r18, r6
    a4ec:	6f 96       	adiw	r28, 0x1f	; 31
    a4ee:	0f ac       	ldd	r0, Y+63	; 0x3f
    a4f0:	6f 97       	sbiw	r28, 0x1f	; 31
    a4f2:	04 c0       	rjmp	.+8      	; 0xa4fc <__udivdi3+0x420>
    a4f4:	22 0f       	add	r18, r18
    a4f6:	33 1f       	adc	r19, r19
    a4f8:	44 1f       	adc	r20, r20
    a4fa:	55 1f       	adc	r21, r21
    a4fc:	0a 94       	dec	r0
    a4fe:	d2 f7       	brpl	.-12     	; 0xa4f4 <__udivdi3+0x418>
    a500:	6d a4       	ldd	r6, Y+45	; 0x2d
    a502:	7e a4       	ldd	r7, Y+46	; 0x2e
    a504:	8f a4       	ldd	r8, Y+47	; 0x2f
    a506:	98 a8       	ldd	r9, Y+48	; 0x30
    a508:	0e 2e       	mov	r0, r30
    a50a:	04 c0       	rjmp	.+8      	; 0xa514 <__udivdi3+0x438>
    a50c:	96 94       	lsr	r9
    a50e:	87 94       	ror	r8
    a510:	77 94       	ror	r7
    a512:	67 94       	ror	r6
    a514:	0a 94       	dec	r0
    a516:	d2 f7       	brpl	.-12     	; 0xa50c <__udivdi3+0x430>
    a518:	84 01       	movw	r16, r8
    a51a:	73 01       	movw	r14, r6
    a51c:	e2 2a       	or	r14, r18
    a51e:	f3 2a       	or	r15, r19
    a520:	04 2b       	or	r16, r20
    a522:	15 2b       	or	r17, r21
    a524:	e9 a6       	std	Y+41, r14	; 0x29
    a526:	fa a6       	std	Y+42, r15	; 0x2a
    a528:	0b a7       	std	Y+43, r16	; 0x2b
    a52a:	1c a7       	std	Y+44, r17	; 0x2c
    a52c:	32 01       	movw	r6, r4
    a52e:	88 24       	eor	r8, r8
    a530:	99 24       	eor	r9, r9
    a532:	92 01       	movw	r18, r4
    a534:	81 01       	movw	r16, r2
    a536:	20 70       	andi	r18, 0x00	; 0
    a538:	30 70       	andi	r19, 0x00	; 0
    a53a:	21 96       	adiw	r28, 0x01	; 1
    a53c:	0c af       	std	Y+60, r16	; 0x3c
    a53e:	1d af       	std	Y+61, r17	; 0x3d
    a540:	2e af       	std	Y+62, r18	; 0x3e
    a542:	3f af       	std	Y+63, r19	; 0x3f
    a544:	21 97       	sbiw	r28, 0x01	; 1
    a546:	c6 01       	movw	r24, r12
    a548:	b5 01       	movw	r22, r10
    a54a:	a4 01       	movw	r20, r8
    a54c:	93 01       	movw	r18, r6
    a54e:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <__udivmodsi4>
    a552:	7b 01       	movw	r14, r22
    a554:	8c 01       	movw	r16, r24
    a556:	c6 01       	movw	r24, r12
    a558:	b5 01       	movw	r22, r10
    a55a:	a4 01       	movw	r20, r8
    a55c:	93 01       	movw	r18, r6
    a55e:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <__udivmodsi4>
    a562:	c9 01       	movw	r24, r18
    a564:	da 01       	movw	r26, r20
    a566:	25 96       	adiw	r28, 0x05	; 5
    a568:	8c af       	std	Y+60, r24	; 0x3c
    a56a:	9d af       	std	Y+61, r25	; 0x3d
    a56c:	ae af       	std	Y+62, r26	; 0x3e
    a56e:	bf af       	std	Y+63, r27	; 0x3f
    a570:	25 97       	sbiw	r28, 0x05	; 5
    a572:	bc 01       	movw	r22, r24
    a574:	cd 01       	movw	r24, r26
    a576:	21 96       	adiw	r28, 0x01	; 1
    a578:	2c ad       	ldd	r18, Y+60	; 0x3c
    a57a:	3d ad       	ldd	r19, Y+61	; 0x3d
    a57c:	4e ad       	ldd	r20, Y+62	; 0x3e
    a57e:	5f ad       	ldd	r21, Y+63	; 0x3f
    a580:	21 97       	sbiw	r28, 0x01	; 1
    a582:	0e 94 c0 5e 	call	0xbd80	; 0xbd80 <__mulsi3>
    a586:	9b 01       	movw	r18, r22
    a588:	ac 01       	movw	r20, r24
    a58a:	87 01       	movw	r16, r14
    a58c:	ff 24       	eor	r15, r15
    a58e:	ee 24       	eor	r14, r14
    a590:	a9 a4       	ldd	r10, Y+41	; 0x29
    a592:	ba a4       	ldd	r11, Y+42	; 0x2a
    a594:	cb a4       	ldd	r12, Y+43	; 0x2b
    a596:	dc a4       	ldd	r13, Y+44	; 0x2c
    a598:	c6 01       	movw	r24, r12
    a59a:	aa 27       	eor	r26, r26
    a59c:	bb 27       	eor	r27, r27
    a59e:	5c 01       	movw	r10, r24
    a5a0:	6d 01       	movw	r12, r26
    a5a2:	ae 28       	or	r10, r14
    a5a4:	bf 28       	or	r11, r15
    a5a6:	c0 2a       	or	r12, r16
    a5a8:	d1 2a       	or	r13, r17
    a5aa:	a2 16       	cp	r10, r18
    a5ac:	b3 06       	cpc	r11, r19
    a5ae:	c4 06       	cpc	r12, r20
    a5b0:	d5 06       	cpc	r13, r21
    a5b2:	60 f5       	brcc	.+88     	; 0xa60c <__udivdi3+0x530>
    a5b4:	25 96       	adiw	r28, 0x05	; 5
    a5b6:	6c ad       	ldd	r22, Y+60	; 0x3c
    a5b8:	7d ad       	ldd	r23, Y+61	; 0x3d
    a5ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    a5bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    a5be:	25 97       	sbiw	r28, 0x05	; 5
    a5c0:	61 50       	subi	r22, 0x01	; 1
    a5c2:	70 40       	sbci	r23, 0x00	; 0
    a5c4:	80 40       	sbci	r24, 0x00	; 0
    a5c6:	90 40       	sbci	r25, 0x00	; 0
    a5c8:	25 96       	adiw	r28, 0x05	; 5
    a5ca:	6c af       	std	Y+60, r22	; 0x3c
    a5cc:	7d af       	std	Y+61, r23	; 0x3d
    a5ce:	8e af       	std	Y+62, r24	; 0x3e
    a5d0:	9f af       	std	Y+63, r25	; 0x3f
    a5d2:	25 97       	sbiw	r28, 0x05	; 5
    a5d4:	a2 0c       	add	r10, r2
    a5d6:	b3 1c       	adc	r11, r3
    a5d8:	c4 1c       	adc	r12, r4
    a5da:	d5 1c       	adc	r13, r5
    a5dc:	a2 14       	cp	r10, r2
    a5de:	b3 04       	cpc	r11, r3
    a5e0:	c4 04       	cpc	r12, r4
    a5e2:	d5 04       	cpc	r13, r5
    a5e4:	98 f0       	brcs	.+38     	; 0xa60c <__udivdi3+0x530>
    a5e6:	a2 16       	cp	r10, r18
    a5e8:	b3 06       	cpc	r11, r19
    a5ea:	c4 06       	cpc	r12, r20
    a5ec:	d5 06       	cpc	r13, r21
    a5ee:	70 f4       	brcc	.+28     	; 0xa60c <__udivdi3+0x530>
    a5f0:	61 50       	subi	r22, 0x01	; 1
    a5f2:	70 40       	sbci	r23, 0x00	; 0
    a5f4:	80 40       	sbci	r24, 0x00	; 0
    a5f6:	90 40       	sbci	r25, 0x00	; 0
    a5f8:	25 96       	adiw	r28, 0x05	; 5
    a5fa:	6c af       	std	Y+60, r22	; 0x3c
    a5fc:	7d af       	std	Y+61, r23	; 0x3d
    a5fe:	8e af       	std	Y+62, r24	; 0x3e
    a600:	9f af       	std	Y+63, r25	; 0x3f
    a602:	25 97       	sbiw	r28, 0x05	; 5
    a604:	a2 0c       	add	r10, r2
    a606:	b3 1c       	adc	r11, r3
    a608:	c4 1c       	adc	r12, r4
    a60a:	d5 1c       	adc	r13, r5
    a60c:	a2 1a       	sub	r10, r18
    a60e:	b3 0a       	sbc	r11, r19
    a610:	c4 0a       	sbc	r12, r20
    a612:	d5 0a       	sbc	r13, r21
    a614:	c6 01       	movw	r24, r12
    a616:	b5 01       	movw	r22, r10
    a618:	a4 01       	movw	r20, r8
    a61a:	93 01       	movw	r18, r6
    a61c:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <__udivmodsi4>
    a620:	7b 01       	movw	r14, r22
    a622:	8c 01       	movw	r16, r24
    a624:	c6 01       	movw	r24, r12
    a626:	b5 01       	movw	r22, r10
    a628:	a4 01       	movw	r20, r8
    a62a:	93 01       	movw	r18, r6
    a62c:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <__udivmodsi4>
    a630:	c9 01       	movw	r24, r18
    a632:	da 01       	movw	r26, r20
    a634:	3c 01       	movw	r6, r24
    a636:	4d 01       	movw	r8, r26
    a638:	c4 01       	movw	r24, r8
    a63a:	b3 01       	movw	r22, r6
    a63c:	21 96       	adiw	r28, 0x01	; 1
    a63e:	2c ad       	ldd	r18, Y+60	; 0x3c
    a640:	3d ad       	ldd	r19, Y+61	; 0x3d
    a642:	4e ad       	ldd	r20, Y+62	; 0x3e
    a644:	5f ad       	ldd	r21, Y+63	; 0x3f
    a646:	21 97       	sbiw	r28, 0x01	; 1
    a648:	0e 94 c0 5e 	call	0xbd80	; 0xbd80 <__mulsi3>
    a64c:	9b 01       	movw	r18, r22
    a64e:	ac 01       	movw	r20, r24
    a650:	87 01       	movw	r16, r14
    a652:	ff 24       	eor	r15, r15
    a654:	ee 24       	eor	r14, r14
    a656:	89 a5       	ldd	r24, Y+41	; 0x29
    a658:	9a a5       	ldd	r25, Y+42	; 0x2a
    a65a:	ab a5       	ldd	r26, Y+43	; 0x2b
    a65c:	bc a5       	ldd	r27, Y+44	; 0x2c
    a65e:	a0 70       	andi	r26, 0x00	; 0
    a660:	b0 70       	andi	r27, 0x00	; 0
    a662:	57 01       	movw	r10, r14
    a664:	68 01       	movw	r12, r16
    a666:	a8 2a       	or	r10, r24
    a668:	b9 2a       	or	r11, r25
    a66a:	ca 2a       	or	r12, r26
    a66c:	db 2a       	or	r13, r27
    a66e:	a2 16       	cp	r10, r18
    a670:	b3 06       	cpc	r11, r19
    a672:	c4 06       	cpc	r12, r20
    a674:	d5 06       	cpc	r13, r21
    a676:	e0 f4       	brcc	.+56     	; 0xa6b0 <__udivdi3+0x5d4>
    a678:	08 94       	sec
    a67a:	61 08       	sbc	r6, r1
    a67c:	71 08       	sbc	r7, r1
    a67e:	81 08       	sbc	r8, r1
    a680:	91 08       	sbc	r9, r1
    a682:	a2 0c       	add	r10, r2
    a684:	b3 1c       	adc	r11, r3
    a686:	c4 1c       	adc	r12, r4
    a688:	d5 1c       	adc	r13, r5
    a68a:	a2 14       	cp	r10, r2
    a68c:	b3 04       	cpc	r11, r3
    a68e:	c4 04       	cpc	r12, r4
    a690:	d5 04       	cpc	r13, r5
    a692:	70 f0       	brcs	.+28     	; 0xa6b0 <__udivdi3+0x5d4>
    a694:	a2 16       	cp	r10, r18
    a696:	b3 06       	cpc	r11, r19
    a698:	c4 06       	cpc	r12, r20
    a69a:	d5 06       	cpc	r13, r21
    a69c:	48 f4       	brcc	.+18     	; 0xa6b0 <__udivdi3+0x5d4>
    a69e:	08 94       	sec
    a6a0:	61 08       	sbc	r6, r1
    a6a2:	71 08       	sbc	r7, r1
    a6a4:	81 08       	sbc	r8, r1
    a6a6:	91 08       	sbc	r9, r1
    a6a8:	a2 0c       	add	r10, r2
    a6aa:	b3 1c       	adc	r11, r3
    a6ac:	c4 1c       	adc	r12, r4
    a6ae:	d5 1c       	adc	r13, r5
    a6b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    a6b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    a6b4:	af a5       	ldd	r26, Y+47	; 0x2f
    a6b6:	b8 a9       	ldd	r27, Y+48	; 0x30
    a6b8:	6f 96       	adiw	r28, 0x1f	; 31
    a6ba:	0f ac       	ldd	r0, Y+63	; 0x3f
    a6bc:	6f 97       	sbiw	r28, 0x1f	; 31
    a6be:	04 c0       	rjmp	.+8      	; 0xa6c8 <__udivdi3+0x5ec>
    a6c0:	88 0f       	add	r24, r24
    a6c2:	99 1f       	adc	r25, r25
    a6c4:	aa 1f       	adc	r26, r26
    a6c6:	bb 1f       	adc	r27, r27
    a6c8:	0a 94       	dec	r0
    a6ca:	d2 f7       	brpl	.-12     	; 0xa6c0 <__udivdi3+0x5e4>
    a6cc:	8d a7       	std	Y+45, r24	; 0x2d
    a6ce:	9e a7       	std	Y+46, r25	; 0x2e
    a6d0:	af a7       	std	Y+47, r26	; 0x2f
    a6d2:	b8 ab       	std	Y+48, r27	; 0x30
    a6d4:	a2 1a       	sub	r10, r18
    a6d6:	b3 0a       	sbc	r11, r19
    a6d8:	c4 0a       	sbc	r12, r20
    a6da:	d5 0a       	sbc	r13, r21
    a6dc:	25 96       	adiw	r28, 0x05	; 5
    a6de:	ec ac       	ldd	r14, Y+60	; 0x3c
    a6e0:	fd ac       	ldd	r15, Y+61	; 0x3d
    a6e2:	0e ad       	ldd	r16, Y+62	; 0x3e
    a6e4:	1f ad       	ldd	r17, Y+63	; 0x3f
    a6e6:	25 97       	sbiw	r28, 0x05	; 5
    a6e8:	d7 01       	movw	r26, r14
    a6ea:	99 27       	eor	r25, r25
    a6ec:	88 27       	eor	r24, r24
    a6ee:	68 2a       	or	r6, r24
    a6f0:	79 2a       	or	r7, r25
    a6f2:	8a 2a       	or	r8, r26
    a6f4:	9b 2a       	or	r9, r27
    a6f6:	82 01       	movw	r16, r4
    a6f8:	22 27       	eor	r18, r18
    a6fa:	33 27       	eor	r19, r19
    a6fc:	29 96       	adiw	r28, 0x09	; 9
    a6fe:	0c af       	std	Y+60, r16	; 0x3c
    a700:	1d af       	std	Y+61, r17	; 0x3d
    a702:	2e af       	std	Y+62, r18	; 0x3e
    a704:	3f af       	std	Y+63, r19	; 0x3f
    a706:	29 97       	sbiw	r28, 0x09	; 9
    a708:	a2 01       	movw	r20, r4
    a70a:	91 01       	movw	r18, r2
    a70c:	40 70       	andi	r20, 0x00	; 0
    a70e:	50 70       	andi	r21, 0x00	; 0
    a710:	2d 96       	adiw	r28, 0x0d	; 13
    a712:	2c af       	std	Y+60, r18	; 0x3c
    a714:	3d af       	std	Y+61, r19	; 0x3d
    a716:	4e af       	std	Y+62, r20	; 0x3e
    a718:	5f af       	std	Y+63, r21	; 0x3f
    a71a:	2d 97       	sbiw	r28, 0x0d	; 13
    a71c:	c6 01       	movw	r24, r12
    a71e:	b5 01       	movw	r22, r10
    a720:	29 96       	adiw	r28, 0x09	; 9
    a722:	2c ad       	ldd	r18, Y+60	; 0x3c
    a724:	3d ad       	ldd	r19, Y+61	; 0x3d
    a726:	4e ad       	ldd	r20, Y+62	; 0x3e
    a728:	5f ad       	ldd	r21, Y+63	; 0x3f
    a72a:	29 97       	sbiw	r28, 0x09	; 9
    a72c:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <__udivmodsi4>
    a730:	7b 01       	movw	r14, r22
    a732:	8c 01       	movw	r16, r24
    a734:	c6 01       	movw	r24, r12
    a736:	b5 01       	movw	r22, r10
    a738:	29 96       	adiw	r28, 0x09	; 9
    a73a:	2c ad       	ldd	r18, Y+60	; 0x3c
    a73c:	3d ad       	ldd	r19, Y+61	; 0x3d
    a73e:	4e ad       	ldd	r20, Y+62	; 0x3e
    a740:	5f ad       	ldd	r21, Y+63	; 0x3f
    a742:	29 97       	sbiw	r28, 0x09	; 9
    a744:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <__udivmodsi4>
    a748:	c9 01       	movw	r24, r18
    a74a:	da 01       	movw	r26, r20
    a74c:	61 96       	adiw	r28, 0x11	; 17
    a74e:	8c af       	std	Y+60, r24	; 0x3c
    a750:	9d af       	std	Y+61, r25	; 0x3d
    a752:	ae af       	std	Y+62, r26	; 0x3e
    a754:	bf af       	std	Y+63, r27	; 0x3f
    a756:	61 97       	sbiw	r28, 0x11	; 17
    a758:	bc 01       	movw	r22, r24
    a75a:	cd 01       	movw	r24, r26
    a75c:	2d 96       	adiw	r28, 0x0d	; 13
    a75e:	2c ad       	ldd	r18, Y+60	; 0x3c
    a760:	3d ad       	ldd	r19, Y+61	; 0x3d
    a762:	4e ad       	ldd	r20, Y+62	; 0x3e
    a764:	5f ad       	ldd	r21, Y+63	; 0x3f
    a766:	2d 97       	sbiw	r28, 0x0d	; 13
    a768:	0e 94 c0 5e 	call	0xbd80	; 0xbd80 <__mulsi3>
    a76c:	9b 01       	movw	r18, r22
    a76e:	ac 01       	movw	r20, r24
    a770:	87 01       	movw	r16, r14
    a772:	ff 24       	eor	r15, r15
    a774:	ee 24       	eor	r14, r14
    a776:	ad a4       	ldd	r10, Y+45	; 0x2d
    a778:	be a4       	ldd	r11, Y+46	; 0x2e
    a77a:	cf a4       	ldd	r12, Y+47	; 0x2f
    a77c:	d8 a8       	ldd	r13, Y+48	; 0x30
    a77e:	c6 01       	movw	r24, r12
    a780:	aa 27       	eor	r26, r26
    a782:	bb 27       	eor	r27, r27
    a784:	57 01       	movw	r10, r14
    a786:	68 01       	movw	r12, r16
    a788:	a8 2a       	or	r10, r24
    a78a:	b9 2a       	or	r11, r25
    a78c:	ca 2a       	or	r12, r26
    a78e:	db 2a       	or	r13, r27
    a790:	a2 16       	cp	r10, r18
    a792:	b3 06       	cpc	r11, r19
    a794:	c4 06       	cpc	r12, r20
    a796:	d5 06       	cpc	r13, r21
    a798:	60 f5       	brcc	.+88     	; 0xa7f2 <__udivdi3+0x716>
    a79a:	61 96       	adiw	r28, 0x11	; 17
    a79c:	6c ad       	ldd	r22, Y+60	; 0x3c
    a79e:	7d ad       	ldd	r23, Y+61	; 0x3d
    a7a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    a7a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    a7a4:	61 97       	sbiw	r28, 0x11	; 17
    a7a6:	61 50       	subi	r22, 0x01	; 1
    a7a8:	70 40       	sbci	r23, 0x00	; 0
    a7aa:	80 40       	sbci	r24, 0x00	; 0
    a7ac:	90 40       	sbci	r25, 0x00	; 0
    a7ae:	61 96       	adiw	r28, 0x11	; 17
    a7b0:	6c af       	std	Y+60, r22	; 0x3c
    a7b2:	7d af       	std	Y+61, r23	; 0x3d
    a7b4:	8e af       	std	Y+62, r24	; 0x3e
    a7b6:	9f af       	std	Y+63, r25	; 0x3f
    a7b8:	61 97       	sbiw	r28, 0x11	; 17
    a7ba:	a2 0c       	add	r10, r2
    a7bc:	b3 1c       	adc	r11, r3
    a7be:	c4 1c       	adc	r12, r4
    a7c0:	d5 1c       	adc	r13, r5
    a7c2:	a2 14       	cp	r10, r2
    a7c4:	b3 04       	cpc	r11, r3
    a7c6:	c4 04       	cpc	r12, r4
    a7c8:	d5 04       	cpc	r13, r5
    a7ca:	98 f0       	brcs	.+38     	; 0xa7f2 <__udivdi3+0x716>
    a7cc:	a2 16       	cp	r10, r18
    a7ce:	b3 06       	cpc	r11, r19
    a7d0:	c4 06       	cpc	r12, r20
    a7d2:	d5 06       	cpc	r13, r21
    a7d4:	70 f4       	brcc	.+28     	; 0xa7f2 <__udivdi3+0x716>
    a7d6:	61 50       	subi	r22, 0x01	; 1
    a7d8:	70 40       	sbci	r23, 0x00	; 0
    a7da:	80 40       	sbci	r24, 0x00	; 0
    a7dc:	90 40       	sbci	r25, 0x00	; 0
    a7de:	61 96       	adiw	r28, 0x11	; 17
    a7e0:	6c af       	std	Y+60, r22	; 0x3c
    a7e2:	7d af       	std	Y+61, r23	; 0x3d
    a7e4:	8e af       	std	Y+62, r24	; 0x3e
    a7e6:	9f af       	std	Y+63, r25	; 0x3f
    a7e8:	61 97       	sbiw	r28, 0x11	; 17
    a7ea:	a2 0c       	add	r10, r2
    a7ec:	b3 1c       	adc	r11, r3
    a7ee:	c4 1c       	adc	r12, r4
    a7f0:	d5 1c       	adc	r13, r5
    a7f2:	a2 1a       	sub	r10, r18
    a7f4:	b3 0a       	sbc	r11, r19
    a7f6:	c4 0a       	sbc	r12, r20
    a7f8:	d5 0a       	sbc	r13, r21
    a7fa:	c6 01       	movw	r24, r12
    a7fc:	b5 01       	movw	r22, r10
    a7fe:	29 96       	adiw	r28, 0x09	; 9
    a800:	2c ad       	ldd	r18, Y+60	; 0x3c
    a802:	3d ad       	ldd	r19, Y+61	; 0x3d
    a804:	4e ad       	ldd	r20, Y+62	; 0x3e
    a806:	5f ad       	ldd	r21, Y+63	; 0x3f
    a808:	29 97       	sbiw	r28, 0x09	; 9
    a80a:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <__udivmodsi4>
    a80e:	7b 01       	movw	r14, r22
    a810:	8c 01       	movw	r16, r24
    a812:	c6 01       	movw	r24, r12
    a814:	b5 01       	movw	r22, r10
    a816:	29 96       	adiw	r28, 0x09	; 9
    a818:	2c ad       	ldd	r18, Y+60	; 0x3c
    a81a:	3d ad       	ldd	r19, Y+61	; 0x3d
    a81c:	4e ad       	ldd	r20, Y+62	; 0x3e
    a81e:	5f ad       	ldd	r21, Y+63	; 0x3f
    a820:	29 97       	sbiw	r28, 0x09	; 9
    a822:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <__udivmodsi4>
    a826:	c9 01       	movw	r24, r18
    a828:	da 01       	movw	r26, r20
    a82a:	5c 01       	movw	r10, r24
    a82c:	6d 01       	movw	r12, r26
    a82e:	c6 01       	movw	r24, r12
    a830:	b5 01       	movw	r22, r10
    a832:	2d 96       	adiw	r28, 0x0d	; 13
    a834:	2c ad       	ldd	r18, Y+60	; 0x3c
    a836:	3d ad       	ldd	r19, Y+61	; 0x3d
    a838:	4e ad       	ldd	r20, Y+62	; 0x3e
    a83a:	5f ad       	ldd	r21, Y+63	; 0x3f
    a83c:	2d 97       	sbiw	r28, 0x0d	; 13
    a83e:	0e 94 c0 5e 	call	0xbd80	; 0xbd80 <__mulsi3>
    a842:	9b 01       	movw	r18, r22
    a844:	ac 01       	movw	r20, r24
    a846:	87 01       	movw	r16, r14
    a848:	ff 24       	eor	r15, r15
    a84a:	ee 24       	eor	r14, r14
    a84c:	8d a5       	ldd	r24, Y+45	; 0x2d
    a84e:	9e a5       	ldd	r25, Y+46	; 0x2e
    a850:	af a5       	ldd	r26, Y+47	; 0x2f
    a852:	b8 a9       	ldd	r27, Y+48	; 0x30
    a854:	a0 70       	andi	r26, 0x00	; 0
    a856:	b0 70       	andi	r27, 0x00	; 0
    a858:	e8 2a       	or	r14, r24
    a85a:	f9 2a       	or	r15, r25
    a85c:	0a 2b       	or	r16, r26
    a85e:	1b 2b       	or	r17, r27
    a860:	e2 16       	cp	r14, r18
    a862:	f3 06       	cpc	r15, r19
    a864:	04 07       	cpc	r16, r20
    a866:	15 07       	cpc	r17, r21
    a868:	c0 f4       	brcc	.+48     	; 0xa89a <__udivdi3+0x7be>
    a86a:	08 94       	sec
    a86c:	a1 08       	sbc	r10, r1
    a86e:	b1 08       	sbc	r11, r1
    a870:	c1 08       	sbc	r12, r1
    a872:	d1 08       	sbc	r13, r1
    a874:	e2 0c       	add	r14, r2
    a876:	f3 1c       	adc	r15, r3
    a878:	04 1d       	adc	r16, r4
    a87a:	15 1d       	adc	r17, r5
    a87c:	e2 14       	cp	r14, r2
    a87e:	f3 04       	cpc	r15, r3
    a880:	04 05       	cpc	r16, r4
    a882:	15 05       	cpc	r17, r5
    a884:	50 f0       	brcs	.+20     	; 0xa89a <__udivdi3+0x7be>
    a886:	e2 16       	cp	r14, r18
    a888:	f3 06       	cpc	r15, r19
    a88a:	04 07       	cpc	r16, r20
    a88c:	15 07       	cpc	r17, r21
    a88e:	28 f4       	brcc	.+10     	; 0xa89a <__udivdi3+0x7be>
    a890:	08 94       	sec
    a892:	a1 08       	sbc	r10, r1
    a894:	b1 08       	sbc	r11, r1
    a896:	c1 08       	sbc	r12, r1
    a898:	d1 08       	sbc	r13, r1
    a89a:	61 96       	adiw	r28, 0x11	; 17
    a89c:	ec ac       	ldd	r14, Y+60	; 0x3c
    a89e:	fd ac       	ldd	r15, Y+61	; 0x3d
    a8a0:	0e ad       	ldd	r16, Y+62	; 0x3e
    a8a2:	1f ad       	ldd	r17, Y+63	; 0x3f
    a8a4:	61 97       	sbiw	r28, 0x11	; 17
    a8a6:	d7 01       	movw	r26, r14
    a8a8:	99 27       	eor	r25, r25
    a8aa:	88 27       	eor	r24, r24
    a8ac:	96 01       	movw	r18, r12
    a8ae:	85 01       	movw	r16, r10
    a8b0:	08 2b       	or	r16, r24
    a8b2:	19 2b       	or	r17, r25
    a8b4:	2a 2b       	or	r18, r26
    a8b6:	3b 2b       	or	r19, r27
    a8b8:	09 ab       	std	Y+49, r16	; 0x31
    a8ba:	1a ab       	std	Y+50, r17	; 0x32
    a8bc:	2b ab       	std	Y+51, r18	; 0x33
    a8be:	3c ab       	std	Y+52, r19	; 0x34
    a8c0:	62 c2       	rjmp	.+1220   	; 0xad86 <__udivdi3+0xcaa>
    a8c2:	6e 14       	cp	r6, r14
    a8c4:	7f 04       	cpc	r7, r15
    a8c6:	80 06       	cpc	r8, r16
    a8c8:	91 06       	cpc	r9, r17
    a8ca:	08 f4       	brcc	.+2      	; 0xa8ce <__udivdi3+0x7f2>
    a8cc:	51 c2       	rjmp	.+1186   	; 0xad70 <__udivdi3+0xc94>
    a8ce:	20 e0       	ldi	r18, 0x00	; 0
    a8d0:	e2 16       	cp	r14, r18
    a8d2:	20 e0       	ldi	r18, 0x00	; 0
    a8d4:	f2 06       	cpc	r15, r18
    a8d6:	21 e0       	ldi	r18, 0x01	; 1
    a8d8:	02 07       	cpc	r16, r18
    a8da:	20 e0       	ldi	r18, 0x00	; 0
    a8dc:	12 07       	cpc	r17, r18
    a8de:	88 f4       	brcc	.+34     	; 0xa902 <__udivdi3+0x826>
    a8e0:	3f ef       	ldi	r19, 0xFF	; 255
    a8e2:	e3 16       	cp	r14, r19
    a8e4:	f1 04       	cpc	r15, r1
    a8e6:	01 05       	cpc	r16, r1
    a8e8:	11 05       	cpc	r17, r1
    a8ea:	31 f0       	breq	.+12     	; 0xa8f8 <__udivdi3+0x81c>
    a8ec:	28 f0       	brcs	.+10     	; 0xa8f8 <__udivdi3+0x81c>
    a8ee:	48 e0       	ldi	r20, 0x08	; 8
    a8f0:	50 e0       	ldi	r21, 0x00	; 0
    a8f2:	60 e0       	ldi	r22, 0x00	; 0
    a8f4:	70 e0       	ldi	r23, 0x00	; 0
    a8f6:	17 c0       	rjmp	.+46     	; 0xa926 <__udivdi3+0x84a>
    a8f8:	40 e0       	ldi	r20, 0x00	; 0
    a8fa:	50 e0       	ldi	r21, 0x00	; 0
    a8fc:	60 e0       	ldi	r22, 0x00	; 0
    a8fe:	70 e0       	ldi	r23, 0x00	; 0
    a900:	12 c0       	rjmp	.+36     	; 0xa926 <__udivdi3+0x84a>
    a902:	40 e0       	ldi	r20, 0x00	; 0
    a904:	e4 16       	cp	r14, r20
    a906:	40 e0       	ldi	r20, 0x00	; 0
    a908:	f4 06       	cpc	r15, r20
    a90a:	40 e0       	ldi	r20, 0x00	; 0
    a90c:	04 07       	cpc	r16, r20
    a90e:	41 e0       	ldi	r20, 0x01	; 1
    a910:	14 07       	cpc	r17, r20
    a912:	28 f0       	brcs	.+10     	; 0xa91e <__udivdi3+0x842>
    a914:	48 e1       	ldi	r20, 0x18	; 24
    a916:	50 e0       	ldi	r21, 0x00	; 0
    a918:	60 e0       	ldi	r22, 0x00	; 0
    a91a:	70 e0       	ldi	r23, 0x00	; 0
    a91c:	04 c0       	rjmp	.+8      	; 0xa926 <__udivdi3+0x84a>
    a91e:	40 e1       	ldi	r20, 0x10	; 16
    a920:	50 e0       	ldi	r21, 0x00	; 0
    a922:	60 e0       	ldi	r22, 0x00	; 0
    a924:	70 e0       	ldi	r23, 0x00	; 0
    a926:	d8 01       	movw	r26, r16
    a928:	c7 01       	movw	r24, r14
    a92a:	04 2e       	mov	r0, r20
    a92c:	04 c0       	rjmp	.+8      	; 0xa936 <__udivdi3+0x85a>
    a92e:	b6 95       	lsr	r27
    a930:	a7 95       	ror	r26
    a932:	97 95       	ror	r25
    a934:	87 95       	ror	r24
    a936:	0a 94       	dec	r0
    a938:	d2 f7       	brpl	.-12     	; 0xa92e <__udivdi3+0x852>
    a93a:	83 5d       	subi	r24, 0xD3	; 211
    a93c:	9f 4d       	sbci	r25, 0xDF	; 223
    a93e:	dc 01       	movw	r26, r24
    a940:	2c 91       	ld	r18, X
    a942:	30 e2       	ldi	r19, 0x20	; 32
    a944:	a3 2e       	mov	r10, r19
    a946:	b1 2c       	mov	r11, r1
    a948:	c1 2c       	mov	r12, r1
    a94a:	d1 2c       	mov	r13, r1
    a94c:	d6 01       	movw	r26, r12
    a94e:	c5 01       	movw	r24, r10
    a950:	84 1b       	sub	r24, r20
    a952:	95 0b       	sbc	r25, r21
    a954:	a6 0b       	sbc	r26, r22
    a956:	b7 0b       	sbc	r27, r23
    a958:	82 1b       	sub	r24, r18
    a95a:	91 09       	sbc	r25, r1
    a95c:	a1 09       	sbc	r26, r1
    a95e:	b1 09       	sbc	r27, r1
    a960:	00 97       	sbiw	r24, 0x00	; 0
    a962:	a1 05       	cpc	r26, r1
    a964:	b1 05       	cpc	r27, r1
    a966:	89 f4       	brne	.+34     	; 0xa98a <__udivdi3+0x8ae>
    a968:	e6 14       	cp	r14, r6
    a96a:	f7 04       	cpc	r15, r7
    a96c:	08 05       	cpc	r16, r8
    a96e:	19 05       	cpc	r17, r9
    a970:	08 f4       	brcc	.+2      	; 0xa974 <__udivdi3+0x898>
    a972:	f2 c1       	rjmp	.+996    	; 0xad58 <__udivdi3+0xc7c>
    a974:	6d a4       	ldd	r6, Y+45	; 0x2d
    a976:	7e a4       	ldd	r7, Y+46	; 0x2e
    a978:	8f a4       	ldd	r8, Y+47	; 0x2f
    a97a:	98 a8       	ldd	r9, Y+48	; 0x30
    a97c:	62 14       	cp	r6, r2
    a97e:	73 04       	cpc	r7, r3
    a980:	84 04       	cpc	r8, r4
    a982:	95 04       	cpc	r9, r5
    a984:	08 f0       	brcs	.+2      	; 0xa988 <__udivdi3+0x8ac>
    a986:	e8 c1       	rjmp	.+976    	; 0xad58 <__udivdi3+0xc7c>
    a988:	f3 c1       	rjmp	.+998    	; 0xad70 <__udivdi3+0xc94>
    a98a:	6e 96       	adiw	r28, 0x1e	; 30
    a98c:	8f af       	std	Y+63, r24	; 0x3f
    a98e:	6e 97       	sbiw	r28, 0x1e	; 30
    a990:	08 2e       	mov	r0, r24
    a992:	04 c0       	rjmp	.+8      	; 0xa99c <__udivdi3+0x8c0>
    a994:	ee 0c       	add	r14, r14
    a996:	ff 1c       	adc	r15, r15
    a998:	00 1f       	adc	r16, r16
    a99a:	11 1f       	adc	r17, r17
    a99c:	0a 94       	dec	r0
    a99e:	d2 f7       	brpl	.-12     	; 0xa994 <__udivdi3+0x8b8>
    a9a0:	6a 2d       	mov	r22, r10
    a9a2:	68 1b       	sub	r22, r24
    a9a4:	d2 01       	movw	r26, r4
    a9a6:	c1 01       	movw	r24, r2
    a9a8:	06 2e       	mov	r0, r22
    a9aa:	04 c0       	rjmp	.+8      	; 0xa9b4 <__udivdi3+0x8d8>
    a9ac:	b6 95       	lsr	r27
    a9ae:	a7 95       	ror	r26
    a9b0:	97 95       	ror	r25
    a9b2:	87 95       	ror	r24
    a9b4:	0a 94       	dec	r0
    a9b6:	d2 f7       	brpl	.-12     	; 0xa9ac <__udivdi3+0x8d0>
    a9b8:	5c 01       	movw	r10, r24
    a9ba:	6d 01       	movw	r12, r26
    a9bc:	ae 28       	or	r10, r14
    a9be:	bf 28       	or	r11, r15
    a9c0:	c0 2a       	or	r12, r16
    a9c2:	d1 2a       	or	r13, r17
    a9c4:	ad a2       	std	Y+37, r10	; 0x25
    a9c6:	be a2       	std	Y+38, r11	; 0x26
    a9c8:	cf a2       	std	Y+39, r12	; 0x27
    a9ca:	d8 a6       	std	Y+40, r13	; 0x28
    a9cc:	72 01       	movw	r14, r4
    a9ce:	61 01       	movw	r12, r2
    a9d0:	6e 96       	adiw	r28, 0x1e	; 30
    a9d2:	0f ac       	ldd	r0, Y+63	; 0x3f
    a9d4:	6e 97       	sbiw	r28, 0x1e	; 30
    a9d6:	04 c0       	rjmp	.+8      	; 0xa9e0 <__udivdi3+0x904>
    a9d8:	cc 0c       	add	r12, r12
    a9da:	dd 1c       	adc	r13, r13
    a9dc:	ee 1c       	adc	r14, r14
    a9de:	ff 1c       	adc	r15, r15
    a9e0:	0a 94       	dec	r0
    a9e2:	d2 f7       	brpl	.-12     	; 0xa9d8 <__udivdi3+0x8fc>
    a9e4:	c9 a2       	std	Y+33, r12	; 0x21
    a9e6:	da a2       	std	Y+34, r13	; 0x22
    a9e8:	eb a2       	std	Y+35, r14	; 0x23
    a9ea:	fc a2       	std	Y+36, r15	; 0x24
    a9ec:	64 01       	movw	r12, r8
    a9ee:	53 01       	movw	r10, r6
    a9f0:	06 2e       	mov	r0, r22
    a9f2:	04 c0       	rjmp	.+8      	; 0xa9fc <__udivdi3+0x920>
    a9f4:	d6 94       	lsr	r13
    a9f6:	c7 94       	ror	r12
    a9f8:	b7 94       	ror	r11
    a9fa:	a7 94       	ror	r10
    a9fc:	0a 94       	dec	r0
    a9fe:	d2 f7       	brpl	.-12     	; 0xa9f4 <__udivdi3+0x918>
    aa00:	d4 01       	movw	r26, r8
    aa02:	c3 01       	movw	r24, r6
    aa04:	6e 96       	adiw	r28, 0x1e	; 30
    aa06:	0f ac       	ldd	r0, Y+63	; 0x3f
    aa08:	6e 97       	sbiw	r28, 0x1e	; 30
    aa0a:	04 c0       	rjmp	.+8      	; 0xaa14 <__udivdi3+0x938>
    aa0c:	88 0f       	add	r24, r24
    aa0e:	99 1f       	adc	r25, r25
    aa10:	aa 1f       	adc	r26, r26
    aa12:	bb 1f       	adc	r27, r27
    aa14:	0a 94       	dec	r0
    aa16:	d2 f7       	brpl	.-12     	; 0xaa0c <__udivdi3+0x930>
    aa18:	ed a4       	ldd	r14, Y+45	; 0x2d
    aa1a:	fe a4       	ldd	r15, Y+46	; 0x2e
    aa1c:	0f a5       	ldd	r16, Y+47	; 0x2f
    aa1e:	18 a9       	ldd	r17, Y+48	; 0x30
    aa20:	04 c0       	rjmp	.+8      	; 0xaa2a <__udivdi3+0x94e>
    aa22:	16 95       	lsr	r17
    aa24:	07 95       	ror	r16
    aa26:	f7 94       	ror	r15
    aa28:	e7 94       	ror	r14
    aa2a:	6a 95       	dec	r22
    aa2c:	d2 f7       	brpl	.-12     	; 0xaa22 <__udivdi3+0x946>
    aa2e:	37 01       	movw	r6, r14
    aa30:	48 01       	movw	r8, r16
    aa32:	68 2a       	or	r6, r24
    aa34:	79 2a       	or	r7, r25
    aa36:	8a 2a       	or	r8, r26
    aa38:	9b 2a       	or	r9, r27
    aa3a:	6d 8e       	std	Y+29, r6	; 0x1d
    aa3c:	7e 8e       	std	Y+30, r7	; 0x1e
    aa3e:	8f 8e       	std	Y+31, r8	; 0x1f
    aa40:	98 a2       	std	Y+32, r9	; 0x20
    aa42:	ed a0       	ldd	r14, Y+37	; 0x25
    aa44:	fe a0       	ldd	r15, Y+38	; 0x26
    aa46:	0f a1       	ldd	r16, Y+39	; 0x27
    aa48:	18 a5       	ldd	r17, Y+40	; 0x28
    aa4a:	38 01       	movw	r6, r16
    aa4c:	88 24       	eor	r8, r8
    aa4e:	99 24       	eor	r9, r9
    aa50:	98 01       	movw	r18, r16
    aa52:	87 01       	movw	r16, r14
    aa54:	20 70       	andi	r18, 0x00	; 0
    aa56:	30 70       	andi	r19, 0x00	; 0
    aa58:	65 96       	adiw	r28, 0x15	; 21
    aa5a:	0c af       	std	Y+60, r16	; 0x3c
    aa5c:	1d af       	std	Y+61, r17	; 0x3d
    aa5e:	2e af       	std	Y+62, r18	; 0x3e
    aa60:	3f af       	std	Y+63, r19	; 0x3f
    aa62:	65 97       	sbiw	r28, 0x15	; 21
    aa64:	c6 01       	movw	r24, r12
    aa66:	b5 01       	movw	r22, r10
    aa68:	a4 01       	movw	r20, r8
    aa6a:	93 01       	movw	r18, r6
    aa6c:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <__udivmodsi4>
    aa70:	7b 01       	movw	r14, r22
    aa72:	8c 01       	movw	r16, r24
    aa74:	c6 01       	movw	r24, r12
    aa76:	b5 01       	movw	r22, r10
    aa78:	a4 01       	movw	r20, r8
    aa7a:	93 01       	movw	r18, r6
    aa7c:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <__udivmodsi4>
    aa80:	c9 01       	movw	r24, r18
    aa82:	da 01       	movw	r26, r20
    aa84:	1c 01       	movw	r2, r24
    aa86:	2d 01       	movw	r4, r26
    aa88:	c2 01       	movw	r24, r4
    aa8a:	b1 01       	movw	r22, r2
    aa8c:	65 96       	adiw	r28, 0x15	; 21
    aa8e:	2c ad       	ldd	r18, Y+60	; 0x3c
    aa90:	3d ad       	ldd	r19, Y+61	; 0x3d
    aa92:	4e ad       	ldd	r20, Y+62	; 0x3e
    aa94:	5f ad       	ldd	r21, Y+63	; 0x3f
    aa96:	65 97       	sbiw	r28, 0x15	; 21
    aa98:	0e 94 c0 5e 	call	0xbd80	; 0xbd80 <__mulsi3>
    aa9c:	9b 01       	movw	r18, r22
    aa9e:	ac 01       	movw	r20, r24
    aaa0:	87 01       	movw	r16, r14
    aaa2:	ff 24       	eor	r15, r15
    aaa4:	ee 24       	eor	r14, r14
    aaa6:	ad 8c       	ldd	r10, Y+29	; 0x1d
    aaa8:	be 8c       	ldd	r11, Y+30	; 0x1e
    aaaa:	cf 8c       	ldd	r12, Y+31	; 0x1f
    aaac:	d8 a0       	ldd	r13, Y+32	; 0x20
    aaae:	c6 01       	movw	r24, r12
    aab0:	aa 27       	eor	r26, r26
    aab2:	bb 27       	eor	r27, r27
    aab4:	57 01       	movw	r10, r14
    aab6:	68 01       	movw	r12, r16
    aab8:	a8 2a       	or	r10, r24
    aaba:	b9 2a       	or	r11, r25
    aabc:	ca 2a       	or	r12, r26
    aabe:	db 2a       	or	r13, r27
    aac0:	a2 16       	cp	r10, r18
    aac2:	b3 06       	cpc	r11, r19
    aac4:	c4 06       	cpc	r12, r20
    aac6:	d5 06       	cpc	r13, r21
    aac8:	00 f5       	brcc	.+64     	; 0xab0a <__udivdi3+0xa2e>
    aaca:	08 94       	sec
    aacc:	21 08       	sbc	r2, r1
    aace:	31 08       	sbc	r3, r1
    aad0:	41 08       	sbc	r4, r1
    aad2:	51 08       	sbc	r5, r1
    aad4:	ed a0       	ldd	r14, Y+37	; 0x25
    aad6:	fe a0       	ldd	r15, Y+38	; 0x26
    aad8:	0f a1       	ldd	r16, Y+39	; 0x27
    aada:	18 a5       	ldd	r17, Y+40	; 0x28
    aadc:	ae 0c       	add	r10, r14
    aade:	bf 1c       	adc	r11, r15
    aae0:	c0 1e       	adc	r12, r16
    aae2:	d1 1e       	adc	r13, r17
    aae4:	ae 14       	cp	r10, r14
    aae6:	bf 04       	cpc	r11, r15
    aae8:	c0 06       	cpc	r12, r16
    aaea:	d1 06       	cpc	r13, r17
    aaec:	70 f0       	brcs	.+28     	; 0xab0a <__udivdi3+0xa2e>
    aaee:	a2 16       	cp	r10, r18
    aaf0:	b3 06       	cpc	r11, r19
    aaf2:	c4 06       	cpc	r12, r20
    aaf4:	d5 06       	cpc	r13, r21
    aaf6:	48 f4       	brcc	.+18     	; 0xab0a <__udivdi3+0xa2e>
    aaf8:	08 94       	sec
    aafa:	21 08       	sbc	r2, r1
    aafc:	31 08       	sbc	r3, r1
    aafe:	41 08       	sbc	r4, r1
    ab00:	51 08       	sbc	r5, r1
    ab02:	ae 0c       	add	r10, r14
    ab04:	bf 1c       	adc	r11, r15
    ab06:	c0 1e       	adc	r12, r16
    ab08:	d1 1e       	adc	r13, r17
    ab0a:	a2 1a       	sub	r10, r18
    ab0c:	b3 0a       	sbc	r11, r19
    ab0e:	c4 0a       	sbc	r12, r20
    ab10:	d5 0a       	sbc	r13, r21
    ab12:	c6 01       	movw	r24, r12
    ab14:	b5 01       	movw	r22, r10
    ab16:	a4 01       	movw	r20, r8
    ab18:	93 01       	movw	r18, r6
    ab1a:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <__udivmodsi4>
    ab1e:	7b 01       	movw	r14, r22
    ab20:	8c 01       	movw	r16, r24
    ab22:	c6 01       	movw	r24, r12
    ab24:	b5 01       	movw	r22, r10
    ab26:	a4 01       	movw	r20, r8
    ab28:	93 01       	movw	r18, r6
    ab2a:	0e 94 df 5e 	call	0xbdbe	; 0xbdbe <__udivmodsi4>
    ab2e:	c9 01       	movw	r24, r18
    ab30:	da 01       	movw	r26, r20
    ab32:	3c 01       	movw	r6, r24
    ab34:	4d 01       	movw	r8, r26
    ab36:	c4 01       	movw	r24, r8
    ab38:	b3 01       	movw	r22, r6
    ab3a:	65 96       	adiw	r28, 0x15	; 21
    ab3c:	2c ad       	ldd	r18, Y+60	; 0x3c
    ab3e:	3d ad       	ldd	r19, Y+61	; 0x3d
    ab40:	4e ad       	ldd	r20, Y+62	; 0x3e
    ab42:	5f ad       	ldd	r21, Y+63	; 0x3f
    ab44:	65 97       	sbiw	r28, 0x15	; 21
    ab46:	0e 94 c0 5e 	call	0xbd80	; 0xbd80 <__mulsi3>
    ab4a:	9b 01       	movw	r18, r22
    ab4c:	ac 01       	movw	r20, r24
    ab4e:	87 01       	movw	r16, r14
    ab50:	ff 24       	eor	r15, r15
    ab52:	ee 24       	eor	r14, r14
    ab54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    ab56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    ab58:	af 8d       	ldd	r26, Y+31	; 0x1f
    ab5a:	b8 a1       	ldd	r27, Y+32	; 0x20
    ab5c:	a0 70       	andi	r26, 0x00	; 0
    ab5e:	b0 70       	andi	r27, 0x00	; 0
    ab60:	57 01       	movw	r10, r14
    ab62:	68 01       	movw	r12, r16
    ab64:	a8 2a       	or	r10, r24
    ab66:	b9 2a       	or	r11, r25
    ab68:	ca 2a       	or	r12, r26
    ab6a:	db 2a       	or	r13, r27
    ab6c:	a2 16       	cp	r10, r18
    ab6e:	b3 06       	cpc	r11, r19
    ab70:	c4 06       	cpc	r12, r20
    ab72:	d5 06       	cpc	r13, r21
    ab74:	00 f5       	brcc	.+64     	; 0xabb6 <__udivdi3+0xada>
    ab76:	08 94       	sec
    ab78:	61 08       	sbc	r6, r1
    ab7a:	71 08       	sbc	r7, r1
    ab7c:	81 08       	sbc	r8, r1
    ab7e:	91 08       	sbc	r9, r1
    ab80:	6d a1       	ldd	r22, Y+37	; 0x25
    ab82:	7e a1       	ldd	r23, Y+38	; 0x26
    ab84:	8f a1       	ldd	r24, Y+39	; 0x27
    ab86:	98 a5       	ldd	r25, Y+40	; 0x28
    ab88:	a6 0e       	add	r10, r22
    ab8a:	b7 1e       	adc	r11, r23
    ab8c:	c8 1e       	adc	r12, r24
    ab8e:	d9 1e       	adc	r13, r25
    ab90:	a6 16       	cp	r10, r22
    ab92:	b7 06       	cpc	r11, r23
    ab94:	c8 06       	cpc	r12, r24
    ab96:	d9 06       	cpc	r13, r25
    ab98:	70 f0       	brcs	.+28     	; 0xabb6 <__udivdi3+0xada>
    ab9a:	a2 16       	cp	r10, r18
    ab9c:	b3 06       	cpc	r11, r19
    ab9e:	c4 06       	cpc	r12, r20
    aba0:	d5 06       	cpc	r13, r21
    aba2:	48 f4       	brcc	.+18     	; 0xabb6 <__udivdi3+0xada>
    aba4:	08 94       	sec
    aba6:	61 08       	sbc	r6, r1
    aba8:	71 08       	sbc	r7, r1
    abaa:	81 08       	sbc	r8, r1
    abac:	91 08       	sbc	r9, r1
    abae:	a6 0e       	add	r10, r22
    abb0:	b7 1e       	adc	r11, r23
    abb2:	c8 1e       	adc	r12, r24
    abb4:	d9 1e       	adc	r13, r25
    abb6:	d6 01       	movw	r26, r12
    abb8:	c5 01       	movw	r24, r10
    abba:	82 1b       	sub	r24, r18
    abbc:	93 0b       	sbc	r25, r19
    abbe:	a4 0b       	sbc	r26, r20
    abc0:	b5 0b       	sbc	r27, r21
    abc2:	89 8f       	std	Y+25, r24	; 0x19
    abc4:	9a 8f       	std	Y+26, r25	; 0x1a
    abc6:	ab 8f       	std	Y+27, r26	; 0x1b
    abc8:	bc 8f       	std	Y+28, r27	; 0x1c
    abca:	d1 01       	movw	r26, r2
    abcc:	99 27       	eor	r25, r25
    abce:	88 27       	eor	r24, r24
    abd0:	64 01       	movw	r12, r8
    abd2:	53 01       	movw	r10, r6
    abd4:	a8 2a       	or	r10, r24
    abd6:	b9 2a       	or	r11, r25
    abd8:	ca 2a       	or	r12, r26
    abda:	db 2a       	or	r13, r27
    abdc:	a9 aa       	std	Y+49, r10	; 0x31
    abde:	ba aa       	std	Y+50, r11	; 0x32
    abe0:	cb aa       	std	Y+51, r12	; 0x33
    abe2:	dc aa       	std	Y+52, r13	; 0x34
    abe4:	86 01       	movw	r16, r12
    abe6:	75 01       	movw	r14, r10
    abe8:	2f ef       	ldi	r18, 0xFF	; 255
    abea:	3f ef       	ldi	r19, 0xFF	; 255
    abec:	40 e0       	ldi	r20, 0x00	; 0
    abee:	50 e0       	ldi	r21, 0x00	; 0
    abf0:	e2 22       	and	r14, r18
    abf2:	f3 22       	and	r15, r19
    abf4:	04 23       	and	r16, r20
    abf6:	15 23       	and	r17, r21
    abf8:	a6 01       	movw	r20, r12
    abfa:	66 27       	eor	r22, r22
    abfc:	77 27       	eor	r23, r23
    abfe:	6d 96       	adiw	r28, 0x1d	; 29
    ac00:	4c af       	std	Y+60, r20	; 0x3c
    ac02:	5d af       	std	Y+61, r21	; 0x3d
    ac04:	6e af       	std	Y+62, r22	; 0x3e
    ac06:	7f af       	std	Y+63, r23	; 0x3f
    ac08:	6d 97       	sbiw	r28, 0x1d	; 29
    ac0a:	a9 a0       	ldd	r10, Y+33	; 0x21
    ac0c:	ba a0       	ldd	r11, Y+34	; 0x22
    ac0e:	cb a0       	ldd	r12, Y+35	; 0x23
    ac10:	dc a0       	ldd	r13, Y+36	; 0x24
    ac12:	6f ef       	ldi	r22, 0xFF	; 255
    ac14:	7f ef       	ldi	r23, 0xFF	; 255
    ac16:	80 e0       	ldi	r24, 0x00	; 0
    ac18:	90 e0       	ldi	r25, 0x00	; 0
    ac1a:	a6 22       	and	r10, r22
    ac1c:	b7 22       	and	r11, r23
    ac1e:	c8 22       	and	r12, r24
    ac20:	d9 22       	and	r13, r25
    ac22:	89 a1       	ldd	r24, Y+33	; 0x21
    ac24:	9a a1       	ldd	r25, Y+34	; 0x22
    ac26:	ab a1       	ldd	r26, Y+35	; 0x23
    ac28:	bc a1       	ldd	r27, Y+36	; 0x24
    ac2a:	1d 01       	movw	r2, r26
    ac2c:	44 24       	eor	r4, r4
    ac2e:	55 24       	eor	r5, r5
    ac30:	c8 01       	movw	r24, r16
    ac32:	b7 01       	movw	r22, r14
    ac34:	a6 01       	movw	r20, r12
    ac36:	95 01       	movw	r18, r10
    ac38:	0e 94 c0 5e 	call	0xbd80	; 0xbd80 <__mulsi3>
    ac3c:	69 96       	adiw	r28, 0x19	; 25
    ac3e:	6c af       	std	Y+60, r22	; 0x3c
    ac40:	7d af       	std	Y+61, r23	; 0x3d
    ac42:	8e af       	std	Y+62, r24	; 0x3e
    ac44:	9f af       	std	Y+63, r25	; 0x3f
    ac46:	69 97       	sbiw	r28, 0x19	; 25
    ac48:	c8 01       	movw	r24, r16
    ac4a:	b7 01       	movw	r22, r14
    ac4c:	a2 01       	movw	r20, r4
    ac4e:	91 01       	movw	r18, r2
    ac50:	0e 94 c0 5e 	call	0xbd80	; 0xbd80 <__mulsi3>
    ac54:	3b 01       	movw	r6, r22
    ac56:	4c 01       	movw	r8, r24
    ac58:	6d 96       	adiw	r28, 0x1d	; 29
    ac5a:	6c ad       	ldd	r22, Y+60	; 0x3c
    ac5c:	7d ad       	ldd	r23, Y+61	; 0x3d
    ac5e:	8e ad       	ldd	r24, Y+62	; 0x3e
    ac60:	9f ad       	ldd	r25, Y+63	; 0x3f
    ac62:	6d 97       	sbiw	r28, 0x1d	; 29
    ac64:	a6 01       	movw	r20, r12
    ac66:	95 01       	movw	r18, r10
    ac68:	0e 94 c0 5e 	call	0xbd80	; 0xbd80 <__mulsi3>
    ac6c:	7b 01       	movw	r14, r22
    ac6e:	8c 01       	movw	r16, r24
    ac70:	6d 96       	adiw	r28, 0x1d	; 29
    ac72:	6c ad       	ldd	r22, Y+60	; 0x3c
    ac74:	7d ad       	ldd	r23, Y+61	; 0x3d
    ac76:	8e ad       	ldd	r24, Y+62	; 0x3e
    ac78:	9f ad       	ldd	r25, Y+63	; 0x3f
    ac7a:	6d 97       	sbiw	r28, 0x1d	; 29
    ac7c:	a2 01       	movw	r20, r4
    ac7e:	91 01       	movw	r18, r2
    ac80:	0e 94 c0 5e 	call	0xbd80	; 0xbd80 <__mulsi3>
    ac84:	5b 01       	movw	r10, r22
    ac86:	6c 01       	movw	r12, r24
    ac88:	a8 01       	movw	r20, r16
    ac8a:	97 01       	movw	r18, r14
    ac8c:	26 0d       	add	r18, r6
    ac8e:	37 1d       	adc	r19, r7
    ac90:	48 1d       	adc	r20, r8
    ac92:	59 1d       	adc	r21, r9
    ac94:	69 96       	adiw	r28, 0x19	; 25
    ac96:	6c ac       	ldd	r6, Y+60	; 0x3c
    ac98:	7d ac       	ldd	r7, Y+61	; 0x3d
    ac9a:	8e ac       	ldd	r8, Y+62	; 0x3e
    ac9c:	9f ac       	ldd	r9, Y+63	; 0x3f
    ac9e:	69 97       	sbiw	r28, 0x19	; 25
    aca0:	c4 01       	movw	r24, r8
    aca2:	aa 27       	eor	r26, r26
    aca4:	bb 27       	eor	r27, r27
    aca6:	28 0f       	add	r18, r24
    aca8:	39 1f       	adc	r19, r25
    acaa:	4a 1f       	adc	r20, r26
    acac:	5b 1f       	adc	r21, r27
    acae:	2e 15       	cp	r18, r14
    acb0:	3f 05       	cpc	r19, r15
    acb2:	40 07       	cpc	r20, r16
    acb4:	51 07       	cpc	r21, r17
    acb6:	48 f4       	brcc	.+18     	; 0xacca <__udivdi3+0xbee>
    acb8:	e1 2c       	mov	r14, r1
    acba:	f1 2c       	mov	r15, r1
    acbc:	61 e0       	ldi	r22, 0x01	; 1
    acbe:	06 2f       	mov	r16, r22
    acc0:	11 2d       	mov	r17, r1
    acc2:	ae 0c       	add	r10, r14
    acc4:	bf 1c       	adc	r11, r15
    acc6:	c0 1e       	adc	r12, r16
    acc8:	d1 1e       	adc	r13, r17
    acca:	ca 01       	movw	r24, r20
    accc:	aa 27       	eor	r26, r26
    acce:	bb 27       	eor	r27, r27
    acd0:	bc 01       	movw	r22, r24
    acd2:	cd 01       	movw	r24, r26
    acd4:	6a 0d       	add	r22, r10
    acd6:	7b 1d       	adc	r23, r11
    acd8:	8c 1d       	adc	r24, r12
    acda:	9d 1d       	adc	r25, r13
    acdc:	69 8c       	ldd	r6, Y+25	; 0x19
    acde:	7a 8c       	ldd	r7, Y+26	; 0x1a
    ace0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    ace2:	9c 8c       	ldd	r9, Y+28	; 0x1c
    ace4:	66 16       	cp	r6, r22
    ace6:	77 06       	cpc	r7, r23
    ace8:	88 06       	cpc	r8, r24
    acea:	99 06       	cpc	r9, r25
    acec:	40 f1       	brcs	.+80     	; 0xad3e <__udivdi3+0xc62>
    acee:	66 15       	cp	r22, r6
    acf0:	77 05       	cpc	r23, r7
    acf2:	88 05       	cpc	r24, r8
    acf4:	99 05       	cpc	r25, r9
    acf6:	09 f0       	breq	.+2      	; 0xacfa <__udivdi3+0xc1e>
    acf8:	43 c0       	rjmp	.+134    	; 0xad80 <__udivdi3+0xca4>
    acfa:	d9 01       	movw	r26, r18
    acfc:	99 27       	eor	r25, r25
    acfe:	88 27       	eor	r24, r24
    ad00:	69 96       	adiw	r28, 0x19	; 25
    ad02:	2c ad       	ldd	r18, Y+60	; 0x3c
    ad04:	3d ad       	ldd	r19, Y+61	; 0x3d
    ad06:	4e ad       	ldd	r20, Y+62	; 0x3e
    ad08:	5f ad       	ldd	r21, Y+63	; 0x3f
    ad0a:	69 97       	sbiw	r28, 0x19	; 25
    ad0c:	40 70       	andi	r20, 0x00	; 0
    ad0e:	50 70       	andi	r21, 0x00	; 0
    ad10:	82 0f       	add	r24, r18
    ad12:	93 1f       	adc	r25, r19
    ad14:	a4 1f       	adc	r26, r20
    ad16:	b5 1f       	adc	r27, r21
    ad18:	2d a5       	ldd	r18, Y+45	; 0x2d
    ad1a:	3e a5       	ldd	r19, Y+46	; 0x2e
    ad1c:	4f a5       	ldd	r20, Y+47	; 0x2f
    ad1e:	58 a9       	ldd	r21, Y+48	; 0x30
    ad20:	6e 96       	adiw	r28, 0x1e	; 30
    ad22:	0f ac       	ldd	r0, Y+63	; 0x3f
    ad24:	6e 97       	sbiw	r28, 0x1e	; 30
    ad26:	04 c0       	rjmp	.+8      	; 0xad30 <__udivdi3+0xc54>
    ad28:	22 0f       	add	r18, r18
    ad2a:	33 1f       	adc	r19, r19
    ad2c:	44 1f       	adc	r20, r20
    ad2e:	55 1f       	adc	r21, r21
    ad30:	0a 94       	dec	r0
    ad32:	d2 f7       	brpl	.-12     	; 0xad28 <__udivdi3+0xc4c>
    ad34:	28 17       	cp	r18, r24
    ad36:	39 07       	cpc	r19, r25
    ad38:	4a 07       	cpc	r20, r26
    ad3a:	5b 07       	cpc	r21, r27
    ad3c:	08 f5       	brcc	.+66     	; 0xad80 <__udivdi3+0xca4>
    ad3e:	09 a9       	ldd	r16, Y+49	; 0x31
    ad40:	1a a9       	ldd	r17, Y+50	; 0x32
    ad42:	2b a9       	ldd	r18, Y+51	; 0x33
    ad44:	3c a9       	ldd	r19, Y+52	; 0x34
    ad46:	01 50       	subi	r16, 0x01	; 1
    ad48:	10 40       	sbci	r17, 0x00	; 0
    ad4a:	20 40       	sbci	r18, 0x00	; 0
    ad4c:	30 40       	sbci	r19, 0x00	; 0
    ad4e:	09 ab       	std	Y+49, r16	; 0x31
    ad50:	1a ab       	std	Y+50, r17	; 0x32
    ad52:	2b ab       	std	Y+51, r18	; 0x33
    ad54:	3c ab       	std	Y+52, r19	; 0x34
    ad56:	14 c0       	rjmp	.+40     	; 0xad80 <__udivdi3+0xca4>
    ad58:	66 24       	eor	r6, r6
    ad5a:	77 24       	eor	r7, r7
    ad5c:	43 01       	movw	r8, r6
    ad5e:	21 e0       	ldi	r18, 0x01	; 1
    ad60:	30 e0       	ldi	r19, 0x00	; 0
    ad62:	40 e0       	ldi	r20, 0x00	; 0
    ad64:	50 e0       	ldi	r21, 0x00	; 0
    ad66:	29 ab       	std	Y+49, r18	; 0x31
    ad68:	3a ab       	std	Y+50, r19	; 0x32
    ad6a:	4b ab       	std	Y+51, r20	; 0x33
    ad6c:	5c ab       	std	Y+52, r21	; 0x34
    ad6e:	0b c0       	rjmp	.+22     	; 0xad86 <__udivdi3+0xcaa>
    ad70:	66 24       	eor	r6, r6
    ad72:	77 24       	eor	r7, r7
    ad74:	43 01       	movw	r8, r6
    ad76:	19 aa       	std	Y+49, r1	; 0x31
    ad78:	1a aa       	std	Y+50, r1	; 0x32
    ad7a:	1b aa       	std	Y+51, r1	; 0x33
    ad7c:	1c aa       	std	Y+52, r1	; 0x34
    ad7e:	03 c0       	rjmp	.+6      	; 0xad86 <__udivdi3+0xcaa>
    ad80:	66 24       	eor	r6, r6
    ad82:	77 24       	eor	r7, r7
    ad84:	43 01       	movw	r8, r6
    ad86:	fe 01       	movw	r30, r28
    ad88:	71 96       	adiw	r30, 0x11	; 17
    ad8a:	88 e0       	ldi	r24, 0x08	; 8
    ad8c:	df 01       	movw	r26, r30
    ad8e:	1d 92       	st	X+, r1
    ad90:	8a 95       	dec	r24
    ad92:	e9 f7       	brne	.-6      	; 0xad8e <__udivdi3+0xcb2>
    ad94:	a9 a8       	ldd	r10, Y+49	; 0x31
    ad96:	ba a8       	ldd	r11, Y+50	; 0x32
    ad98:	cb a8       	ldd	r12, Y+51	; 0x33
    ad9a:	dc a8       	ldd	r13, Y+52	; 0x34
    ad9c:	a9 8a       	std	Y+17, r10	; 0x11
    ad9e:	ba 8a       	std	Y+18, r11	; 0x12
    ada0:	cb 8a       	std	Y+19, r12	; 0x13
    ada2:	dc 8a       	std	Y+20, r13	; 0x14
    ada4:	6d 8a       	std	Y+21, r6	; 0x15
    ada6:	7e 8a       	std	Y+22, r7	; 0x16
    ada8:	8f 8a       	std	Y+23, r8	; 0x17
    adaa:	98 8e       	std	Y+24, r9	; 0x18
    adac:	29 a9       	ldd	r18, Y+49	; 0x31
    adae:	3a 89       	ldd	r19, Y+18	; 0x12
    adb0:	4b 89       	ldd	r20, Y+19	; 0x13
    adb2:	5c 89       	ldd	r21, Y+20	; 0x14
    adb4:	66 2d       	mov	r22, r6
    adb6:	7e 89       	ldd	r23, Y+22	; 0x16
    adb8:	8f 89       	ldd	r24, Y+23	; 0x17
    adba:	98 8d       	ldd	r25, Y+24	; 0x18
    adbc:	c2 5a       	subi	r28, 0xA2	; 162
    adbe:	df 4f       	sbci	r29, 0xFF	; 255
    adc0:	e2 e1       	ldi	r30, 0x12	; 18
    adc2:	0c 94 1d 5f 	jmp	0xbe3a	; 0xbe3a <__epilogue_restores__>

0000adc6 <vfprintf>:
    adc6:	2f 92       	push	r2
    adc8:	3f 92       	push	r3
    adca:	4f 92       	push	r4
    adcc:	5f 92       	push	r5
    adce:	6f 92       	push	r6
    add0:	7f 92       	push	r7
    add2:	8f 92       	push	r8
    add4:	9f 92       	push	r9
    add6:	af 92       	push	r10
    add8:	bf 92       	push	r11
    adda:	cf 92       	push	r12
    addc:	df 92       	push	r13
    adde:	ef 92       	push	r14
    ade0:	ff 92       	push	r15
    ade2:	0f 93       	push	r16
    ade4:	1f 93       	push	r17
    ade6:	df 93       	push	r29
    ade8:	cf 93       	push	r28
    adea:	cd b7       	in	r28, 0x3d	; 61
    adec:	de b7       	in	r29, 0x3e	; 62
    adee:	61 97       	sbiw	r28, 0x11	; 17
    adf0:	cd bf       	out	0x3d, r28	; 61
    adf2:	de bf       	out	0x3e, r29	; 62
    adf4:	3c 01       	movw	r6, r24
    adf6:	6e 87       	std	Y+14, r22	; 0x0e
    adf8:	7f 87       	std	Y+15, r23	; 0x0f
    adfa:	6a 01       	movw	r12, r20
    adfc:	fc 01       	movw	r30, r24
    adfe:	16 82       	std	Z+6, r1	; 0x06
    ae00:	17 82       	std	Z+7, r1	; 0x07
    ae02:	83 81       	ldd	r24, Z+3	; 0x03
    ae04:	81 fd       	sbrc	r24, 1
    ae06:	03 c0       	rjmp	.+6      	; 0xae0e <vfprintf+0x48>
    ae08:	6f ef       	ldi	r22, 0xFF	; 255
    ae0a:	7f ef       	ldi	r23, 0xFF	; 255
    ae0c:	6f c3       	rjmp	.+1758   	; 0xb4ec <vfprintf+0x726>
    ae0e:	9e 01       	movw	r18, r28
    ae10:	2f 5f       	subi	r18, 0xFF	; 255
    ae12:	3f 4f       	sbci	r19, 0xFF	; 255
    ae14:	28 8b       	std	Y+16, r18	; 0x10
    ae16:	39 8b       	std	Y+17, r19	; 0x11
    ae18:	f3 01       	movw	r30, r6
    ae1a:	23 81       	ldd	r18, Z+3	; 0x03
    ae1c:	ee 85       	ldd	r30, Y+14	; 0x0e
    ae1e:	ff 85       	ldd	r31, Y+15	; 0x0f
    ae20:	23 fd       	sbrc	r18, 3
    ae22:	85 91       	lpm	r24, Z+
    ae24:	23 ff       	sbrs	r18, 3
    ae26:	81 91       	ld	r24, Z+
    ae28:	ee 87       	std	Y+14, r30	; 0x0e
    ae2a:	ff 87       	std	Y+15, r31	; 0x0f
    ae2c:	88 23       	and	r24, r24
    ae2e:	09 f4       	brne	.+2      	; 0xae32 <vfprintf+0x6c>
    ae30:	5a c3       	rjmp	.+1716   	; 0xb4e6 <vfprintf+0x720>
    ae32:	85 32       	cpi	r24, 0x25	; 37
    ae34:	51 f4       	brne	.+20     	; 0xae4a <vfprintf+0x84>
    ae36:	ee 85       	ldd	r30, Y+14	; 0x0e
    ae38:	ff 85       	ldd	r31, Y+15	; 0x0f
    ae3a:	23 fd       	sbrc	r18, 3
    ae3c:	85 91       	lpm	r24, Z+
    ae3e:	23 ff       	sbrs	r18, 3
    ae40:	81 91       	ld	r24, Z+
    ae42:	ee 87       	std	Y+14, r30	; 0x0e
    ae44:	ff 87       	std	Y+15, r31	; 0x0f
    ae46:	85 32       	cpi	r24, 0x25	; 37
    ae48:	29 f4       	brne	.+10     	; 0xae54 <vfprintf+0x8e>
    ae4a:	90 e0       	ldi	r25, 0x00	; 0
    ae4c:	b3 01       	movw	r22, r6
    ae4e:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    ae52:	e2 cf       	rjmp	.-60     	; 0xae18 <vfprintf+0x52>
    ae54:	98 2f       	mov	r25, r24
    ae56:	10 e0       	ldi	r17, 0x00	; 0
    ae58:	88 24       	eor	r8, r8
    ae5a:	99 24       	eor	r9, r9
    ae5c:	10 32       	cpi	r17, 0x20	; 32
    ae5e:	b0 f4       	brcc	.+44     	; 0xae8c <vfprintf+0xc6>
    ae60:	9b 32       	cpi	r25, 0x2B	; 43
    ae62:	69 f0       	breq	.+26     	; 0xae7e <vfprintf+0xb8>
    ae64:	9c 32       	cpi	r25, 0x2C	; 44
    ae66:	28 f4       	brcc	.+10     	; 0xae72 <vfprintf+0xac>
    ae68:	90 32       	cpi	r25, 0x20	; 32
    ae6a:	51 f0       	breq	.+20     	; 0xae80 <vfprintf+0xba>
    ae6c:	93 32       	cpi	r25, 0x23	; 35
    ae6e:	71 f4       	brne	.+28     	; 0xae8c <vfprintf+0xc6>
    ae70:	0b c0       	rjmp	.+22     	; 0xae88 <vfprintf+0xc2>
    ae72:	9d 32       	cpi	r25, 0x2D	; 45
    ae74:	39 f0       	breq	.+14     	; 0xae84 <vfprintf+0xbe>
    ae76:	90 33       	cpi	r25, 0x30	; 48
    ae78:	49 f4       	brne	.+18     	; 0xae8c <vfprintf+0xc6>
    ae7a:	11 60       	ori	r17, 0x01	; 1
    ae7c:	28 c0       	rjmp	.+80     	; 0xaece <vfprintf+0x108>
    ae7e:	12 60       	ori	r17, 0x02	; 2
    ae80:	14 60       	ori	r17, 0x04	; 4
    ae82:	25 c0       	rjmp	.+74     	; 0xaece <vfprintf+0x108>
    ae84:	18 60       	ori	r17, 0x08	; 8
    ae86:	23 c0       	rjmp	.+70     	; 0xaece <vfprintf+0x108>
    ae88:	10 61       	ori	r17, 0x10	; 16
    ae8a:	21 c0       	rjmp	.+66     	; 0xaece <vfprintf+0x108>
    ae8c:	17 fd       	sbrc	r17, 7
    ae8e:	2a c0       	rjmp	.+84     	; 0xaee4 <vfprintf+0x11e>
    ae90:	89 2f       	mov	r24, r25
    ae92:	80 53       	subi	r24, 0x30	; 48
    ae94:	8a 30       	cpi	r24, 0x0A	; 10
    ae96:	78 f4       	brcc	.+30     	; 0xaeb6 <vfprintf+0xf0>
    ae98:	16 ff       	sbrs	r17, 6
    ae9a:	06 c0       	rjmp	.+12     	; 0xaea8 <vfprintf+0xe2>
    ae9c:	fa e0       	ldi	r31, 0x0A	; 10
    ae9e:	9f 9e       	mul	r9, r31
    aea0:	90 2c       	mov	r9, r0
    aea2:	11 24       	eor	r1, r1
    aea4:	98 0e       	add	r9, r24
    aea6:	13 c0       	rjmp	.+38     	; 0xaece <vfprintf+0x108>
    aea8:	3a e0       	ldi	r19, 0x0A	; 10
    aeaa:	83 9e       	mul	r8, r19
    aeac:	80 2c       	mov	r8, r0
    aeae:	11 24       	eor	r1, r1
    aeb0:	88 0e       	add	r8, r24
    aeb2:	10 62       	ori	r17, 0x20	; 32
    aeb4:	0c c0       	rjmp	.+24     	; 0xaece <vfprintf+0x108>
    aeb6:	9e 32       	cpi	r25, 0x2E	; 46
    aeb8:	21 f4       	brne	.+8      	; 0xaec2 <vfprintf+0xfc>
    aeba:	16 fd       	sbrc	r17, 6
    aebc:	14 c3       	rjmp	.+1576   	; 0xb4e6 <vfprintf+0x720>
    aebe:	10 64       	ori	r17, 0x40	; 64
    aec0:	06 c0       	rjmp	.+12     	; 0xaece <vfprintf+0x108>
    aec2:	9c 36       	cpi	r25, 0x6C	; 108
    aec4:	11 f4       	brne	.+4      	; 0xaeca <vfprintf+0x104>
    aec6:	10 68       	ori	r17, 0x80	; 128
    aec8:	02 c0       	rjmp	.+4      	; 0xaece <vfprintf+0x108>
    aeca:	98 36       	cpi	r25, 0x68	; 104
    aecc:	59 f4       	brne	.+22     	; 0xaee4 <vfprintf+0x11e>
    aece:	ee 85       	ldd	r30, Y+14	; 0x0e
    aed0:	ff 85       	ldd	r31, Y+15	; 0x0f
    aed2:	23 fd       	sbrc	r18, 3
    aed4:	95 91       	lpm	r25, Z+
    aed6:	23 ff       	sbrs	r18, 3
    aed8:	91 91       	ld	r25, Z+
    aeda:	ee 87       	std	Y+14, r30	; 0x0e
    aedc:	ff 87       	std	Y+15, r31	; 0x0f
    aede:	99 23       	and	r25, r25
    aee0:	09 f0       	breq	.+2      	; 0xaee4 <vfprintf+0x11e>
    aee2:	bc cf       	rjmp	.-136    	; 0xae5c <vfprintf+0x96>
    aee4:	89 2f       	mov	r24, r25
    aee6:	85 54       	subi	r24, 0x45	; 69
    aee8:	83 30       	cpi	r24, 0x03	; 3
    aeea:	20 f4       	brcc	.+8      	; 0xaef4 <vfprintf+0x12e>
    aeec:	81 2f       	mov	r24, r17
    aeee:	80 61       	ori	r24, 0x10	; 16
    aef0:	90 5e       	subi	r25, 0xE0	; 224
    aef2:	07 c0       	rjmp	.+14     	; 0xaf02 <vfprintf+0x13c>
    aef4:	89 2f       	mov	r24, r25
    aef6:	85 56       	subi	r24, 0x65	; 101
    aef8:	83 30       	cpi	r24, 0x03	; 3
    aefa:	08 f0       	brcs	.+2      	; 0xaefe <vfprintf+0x138>
    aefc:	9f c1       	rjmp	.+830    	; 0xb23c <vfprintf+0x476>
    aefe:	81 2f       	mov	r24, r17
    af00:	8f 7e       	andi	r24, 0xEF	; 239
    af02:	86 fd       	sbrc	r24, 6
    af04:	02 c0       	rjmp	.+4      	; 0xaf0a <vfprintf+0x144>
    af06:	76 e0       	ldi	r23, 0x06	; 6
    af08:	97 2e       	mov	r9, r23
    af0a:	6f e3       	ldi	r22, 0x3F	; 63
    af0c:	f6 2e       	mov	r15, r22
    af0e:	f8 22       	and	r15, r24
    af10:	95 36       	cpi	r25, 0x65	; 101
    af12:	19 f4       	brne	.+6      	; 0xaf1a <vfprintf+0x154>
    af14:	f0 e4       	ldi	r31, 0x40	; 64
    af16:	ff 2a       	or	r15, r31
    af18:	07 c0       	rjmp	.+14     	; 0xaf28 <vfprintf+0x162>
    af1a:	96 36       	cpi	r25, 0x66	; 102
    af1c:	19 f4       	brne	.+6      	; 0xaf24 <vfprintf+0x15e>
    af1e:	20 e8       	ldi	r18, 0x80	; 128
    af20:	f2 2a       	or	r15, r18
    af22:	02 c0       	rjmp	.+4      	; 0xaf28 <vfprintf+0x162>
    af24:	91 10       	cpse	r9, r1
    af26:	9a 94       	dec	r9
    af28:	f7 fe       	sbrs	r15, 7
    af2a:	0a c0       	rjmp	.+20     	; 0xaf40 <vfprintf+0x17a>
    af2c:	3b e3       	ldi	r19, 0x3B	; 59
    af2e:	39 15       	cp	r19, r9
    af30:	18 f4       	brcc	.+6      	; 0xaf38 <vfprintf+0x172>
    af32:	5c e3       	ldi	r21, 0x3C	; 60
    af34:	b5 2e       	mov	r11, r21
    af36:	02 c0       	rjmp	.+4      	; 0xaf3c <vfprintf+0x176>
    af38:	b9 2c       	mov	r11, r9
    af3a:	b3 94       	inc	r11
    af3c:	27 e0       	ldi	r18, 0x07	; 7
    af3e:	09 c0       	rjmp	.+18     	; 0xaf52 <vfprintf+0x18c>
    af40:	47 e0       	ldi	r20, 0x07	; 7
    af42:	49 15       	cp	r20, r9
    af44:	20 f4       	brcc	.+8      	; 0xaf4e <vfprintf+0x188>
    af46:	bb 24       	eor	r11, r11
    af48:	47 e0       	ldi	r20, 0x07	; 7
    af4a:	94 2e       	mov	r9, r20
    af4c:	f7 cf       	rjmp	.-18     	; 0xaf3c <vfprintf+0x176>
    af4e:	29 2d       	mov	r18, r9
    af50:	bb 24       	eor	r11, r11
    af52:	c6 01       	movw	r24, r12
    af54:	04 96       	adiw	r24, 0x04	; 4
    af56:	8c 87       	std	Y+12, r24	; 0x0c
    af58:	9d 87       	std	Y+13, r25	; 0x0d
    af5a:	f6 01       	movw	r30, r12
    af5c:	60 81       	ld	r22, Z
    af5e:	71 81       	ldd	r23, Z+1	; 0x01
    af60:	82 81       	ldd	r24, Z+2	; 0x02
    af62:	93 81       	ldd	r25, Z+3	; 0x03
    af64:	ae 01       	movw	r20, r28
    af66:	4f 5f       	subi	r20, 0xFF	; 255
    af68:	5f 4f       	sbci	r21, 0xFF	; 255
    af6a:	0b 2d       	mov	r16, r11
    af6c:	0e 94 c4 60 	call	0xc188	; 0xc188 <__ftoa_engine>
    af70:	6c 01       	movw	r12, r24
    af72:	09 81       	ldd	r16, Y+1	; 0x01
    af74:	20 2e       	mov	r2, r16
    af76:	33 24       	eor	r3, r3
    af78:	00 ff       	sbrs	r16, 0
    af7a:	04 c0       	rjmp	.+8      	; 0xaf84 <vfprintf+0x1be>
    af7c:	03 fd       	sbrc	r16, 3
    af7e:	02 c0       	rjmp	.+4      	; 0xaf84 <vfprintf+0x1be>
    af80:	1d e2       	ldi	r17, 0x2D	; 45
    af82:	09 c0       	rjmp	.+18     	; 0xaf96 <vfprintf+0x1d0>
    af84:	f1 fe       	sbrs	r15, 1
    af86:	02 c0       	rjmp	.+4      	; 0xaf8c <vfprintf+0x1c6>
    af88:	1b e2       	ldi	r17, 0x2B	; 43
    af8a:	05 c0       	rjmp	.+10     	; 0xaf96 <vfprintf+0x1d0>
    af8c:	f2 fc       	sbrc	r15, 2
    af8e:	02 c0       	rjmp	.+4      	; 0xaf94 <vfprintf+0x1ce>
    af90:	10 e0       	ldi	r17, 0x00	; 0
    af92:	01 c0       	rjmp	.+2      	; 0xaf96 <vfprintf+0x1d0>
    af94:	10 e2       	ldi	r17, 0x20	; 32
    af96:	c1 01       	movw	r24, r2
    af98:	8c 70       	andi	r24, 0x0C	; 12
    af9a:	90 70       	andi	r25, 0x00	; 0
    af9c:	89 2b       	or	r24, r25
    af9e:	b9 f1       	breq	.+110    	; 0xb00e <vfprintf+0x248>
    afa0:	11 23       	and	r17, r17
    afa2:	11 f4       	brne	.+4      	; 0xafa8 <vfprintf+0x1e2>
    afa4:	83 e0       	ldi	r24, 0x03	; 3
    afa6:	01 c0       	rjmp	.+2      	; 0xafaa <vfprintf+0x1e4>
    afa8:	84 e0       	ldi	r24, 0x04	; 4
    afaa:	88 15       	cp	r24, r8
    afac:	10 f0       	brcs	.+4      	; 0xafb2 <vfprintf+0x1ec>
    afae:	88 24       	eor	r8, r8
    afb0:	0a c0       	rjmp	.+20     	; 0xafc6 <vfprintf+0x200>
    afb2:	88 1a       	sub	r8, r24
    afb4:	f3 fc       	sbrc	r15, 3
    afb6:	07 c0       	rjmp	.+14     	; 0xafc6 <vfprintf+0x200>
    afb8:	80 e2       	ldi	r24, 0x20	; 32
    afba:	90 e0       	ldi	r25, 0x00	; 0
    afbc:	b3 01       	movw	r22, r6
    afbe:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    afc2:	8a 94       	dec	r8
    afc4:	c9 f7       	brne	.-14     	; 0xafb8 <vfprintf+0x1f2>
    afc6:	11 23       	and	r17, r17
    afc8:	29 f0       	breq	.+10     	; 0xafd4 <vfprintf+0x20e>
    afca:	81 2f       	mov	r24, r17
    afcc:	90 e0       	ldi	r25, 0x00	; 0
    afce:	b3 01       	movw	r22, r6
    afd0:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    afd4:	23 fe       	sbrs	r2, 3
    afd6:	03 c0       	rjmp	.+6      	; 0xafde <vfprintf+0x218>
    afd8:	03 e3       	ldi	r16, 0x33	; 51
    afda:	12 e0       	ldi	r17, 0x02	; 2
    afdc:	0e c0       	rjmp	.+28     	; 0xaffa <vfprintf+0x234>
    afde:	07 e3       	ldi	r16, 0x37	; 55
    afe0:	12 e0       	ldi	r17, 0x02	; 2
    afe2:	0b c0       	rjmp	.+22     	; 0xaffa <vfprintf+0x234>
    afe4:	e1 14       	cp	r14, r1
    afe6:	f1 04       	cpc	r15, r1
    afe8:	09 f0       	breq	.+2      	; 0xafec <vfprintf+0x226>
    afea:	80 52       	subi	r24, 0x20	; 32
    afec:	90 e0       	ldi	r25, 0x00	; 0
    afee:	b3 01       	movw	r22, r6
    aff0:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    aff4:	0f 5f       	subi	r16, 0xFF	; 255
    aff6:	1f 4f       	sbci	r17, 0xFF	; 255
    aff8:	05 c0       	rjmp	.+10     	; 0xb004 <vfprintf+0x23e>
    affa:	ef 2c       	mov	r14, r15
    affc:	ff 24       	eor	r15, r15
    affe:	f0 e1       	ldi	r31, 0x10	; 16
    b000:	ef 22       	and	r14, r31
    b002:	ff 24       	eor	r15, r15
    b004:	f8 01       	movw	r30, r16
    b006:	84 91       	lpm	r24, Z+
    b008:	88 23       	and	r24, r24
    b00a:	61 f7       	brne	.-40     	; 0xafe4 <vfprintf+0x21e>
    b00c:	14 c1       	rjmp	.+552    	; 0xb236 <vfprintf+0x470>
    b00e:	f7 fe       	sbrs	r15, 7
    b010:	12 c0       	rjmp	.+36     	; 0xb036 <vfprintf+0x270>
    b012:	bc 0c       	add	r11, r12
    b014:	24 fe       	sbrs	r2, 4
    b016:	04 c0       	rjmp	.+8      	; 0xb020 <vfprintf+0x25a>
    b018:	8a 81       	ldd	r24, Y+2	; 0x02
    b01a:	81 33       	cpi	r24, 0x31	; 49
    b01c:	09 f4       	brne	.+2      	; 0xb020 <vfprintf+0x25a>
    b01e:	ba 94       	dec	r11
    b020:	1b 14       	cp	r1, r11
    b022:	1c f0       	brlt	.+6      	; 0xb02a <vfprintf+0x264>
    b024:	bb 24       	eor	r11, r11
    b026:	b3 94       	inc	r11
    b028:	2d c0       	rjmp	.+90     	; 0xb084 <vfprintf+0x2be>
    b02a:	f8 e0       	ldi	r31, 0x08	; 8
    b02c:	fb 15       	cp	r31, r11
    b02e:	50 f5       	brcc	.+84     	; 0xb084 <vfprintf+0x2be>
    b030:	38 e0       	ldi	r19, 0x08	; 8
    b032:	b3 2e       	mov	r11, r19
    b034:	27 c0       	rjmp	.+78     	; 0xb084 <vfprintf+0x2be>
    b036:	f6 fc       	sbrc	r15, 6
    b038:	25 c0       	rjmp	.+74     	; 0xb084 <vfprintf+0x2be>
    b03a:	89 2d       	mov	r24, r9
    b03c:	90 e0       	ldi	r25, 0x00	; 0
    b03e:	8c 15       	cp	r24, r12
    b040:	9d 05       	cpc	r25, r13
    b042:	4c f0       	brlt	.+18     	; 0xb056 <vfprintf+0x290>
    b044:	2c ef       	ldi	r18, 0xFC	; 252
    b046:	c2 16       	cp	r12, r18
    b048:	2f ef       	ldi	r18, 0xFF	; 255
    b04a:	d2 06       	cpc	r13, r18
    b04c:	24 f0       	brlt	.+8      	; 0xb056 <vfprintf+0x290>
    b04e:	30 e8       	ldi	r19, 0x80	; 128
    b050:	f3 2a       	or	r15, r19
    b052:	01 c0       	rjmp	.+2      	; 0xb056 <vfprintf+0x290>
    b054:	9a 94       	dec	r9
    b056:	99 20       	and	r9, r9
    b058:	49 f0       	breq	.+18     	; 0xb06c <vfprintf+0x2a6>
    b05a:	e2 e0       	ldi	r30, 0x02	; 2
    b05c:	f0 e0       	ldi	r31, 0x00	; 0
    b05e:	ec 0f       	add	r30, r28
    b060:	fd 1f       	adc	r31, r29
    b062:	e9 0d       	add	r30, r9
    b064:	f1 1d       	adc	r31, r1
    b066:	80 81       	ld	r24, Z
    b068:	80 33       	cpi	r24, 0x30	; 48
    b06a:	a1 f3       	breq	.-24     	; 0xb054 <vfprintf+0x28e>
    b06c:	f7 fe       	sbrs	r15, 7
    b06e:	0a c0       	rjmp	.+20     	; 0xb084 <vfprintf+0x2be>
    b070:	b9 2c       	mov	r11, r9
    b072:	b3 94       	inc	r11
    b074:	89 2d       	mov	r24, r9
    b076:	90 e0       	ldi	r25, 0x00	; 0
    b078:	c8 16       	cp	r12, r24
    b07a:	d9 06       	cpc	r13, r25
    b07c:	14 f0       	brlt	.+4      	; 0xb082 <vfprintf+0x2bc>
    b07e:	99 24       	eor	r9, r9
    b080:	01 c0       	rjmp	.+2      	; 0xb084 <vfprintf+0x2be>
    b082:	9c 18       	sub	r9, r12
    b084:	f7 fc       	sbrc	r15, 7
    b086:	03 c0       	rjmp	.+6      	; 0xb08e <vfprintf+0x2c8>
    b088:	25 e0       	ldi	r18, 0x05	; 5
    b08a:	30 e0       	ldi	r19, 0x00	; 0
    b08c:	09 c0       	rjmp	.+18     	; 0xb0a0 <vfprintf+0x2da>
    b08e:	1c 14       	cp	r1, r12
    b090:	1d 04       	cpc	r1, r13
    b092:	1c f0       	brlt	.+6      	; 0xb09a <vfprintf+0x2d4>
    b094:	21 e0       	ldi	r18, 0x01	; 1
    b096:	30 e0       	ldi	r19, 0x00	; 0
    b098:	03 c0       	rjmp	.+6      	; 0xb0a0 <vfprintf+0x2da>
    b09a:	96 01       	movw	r18, r12
    b09c:	2f 5f       	subi	r18, 0xFF	; 255
    b09e:	3f 4f       	sbci	r19, 0xFF	; 255
    b0a0:	11 23       	and	r17, r17
    b0a2:	11 f0       	breq	.+4      	; 0xb0a8 <vfprintf+0x2e2>
    b0a4:	2f 5f       	subi	r18, 0xFF	; 255
    b0a6:	3f 4f       	sbci	r19, 0xFF	; 255
    b0a8:	99 20       	and	r9, r9
    b0aa:	29 f0       	breq	.+10     	; 0xb0b6 <vfprintf+0x2f0>
    b0ac:	89 2d       	mov	r24, r9
    b0ae:	90 e0       	ldi	r25, 0x00	; 0
    b0b0:	01 96       	adiw	r24, 0x01	; 1
    b0b2:	28 0f       	add	r18, r24
    b0b4:	39 1f       	adc	r19, r25
    b0b6:	88 2d       	mov	r24, r8
    b0b8:	90 e0       	ldi	r25, 0x00	; 0
    b0ba:	28 17       	cp	r18, r24
    b0bc:	39 07       	cpc	r19, r25
    b0be:	14 f0       	brlt	.+4      	; 0xb0c4 <vfprintf+0x2fe>
    b0c0:	88 24       	eor	r8, r8
    b0c2:	01 c0       	rjmp	.+2      	; 0xb0c6 <vfprintf+0x300>
    b0c4:	82 1a       	sub	r8, r18
    b0c6:	4f 2c       	mov	r4, r15
    b0c8:	55 24       	eor	r5, r5
    b0ca:	c2 01       	movw	r24, r4
    b0cc:	89 70       	andi	r24, 0x09	; 9
    b0ce:	90 70       	andi	r25, 0x00	; 0
    b0d0:	89 2b       	or	r24, r25
    b0d2:	39 f0       	breq	.+14     	; 0xb0e2 <vfprintf+0x31c>
    b0d4:	08 c0       	rjmp	.+16     	; 0xb0e6 <vfprintf+0x320>
    b0d6:	80 e2       	ldi	r24, 0x20	; 32
    b0d8:	90 e0       	ldi	r25, 0x00	; 0
    b0da:	b3 01       	movw	r22, r6
    b0dc:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b0e0:	8a 94       	dec	r8
    b0e2:	88 20       	and	r8, r8
    b0e4:	c1 f7       	brne	.-16     	; 0xb0d6 <vfprintf+0x310>
    b0e6:	11 23       	and	r17, r17
    b0e8:	29 f0       	breq	.+10     	; 0xb0f4 <vfprintf+0x32e>
    b0ea:	81 2f       	mov	r24, r17
    b0ec:	90 e0       	ldi	r25, 0x00	; 0
    b0ee:	b3 01       	movw	r22, r6
    b0f0:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b0f4:	43 fe       	sbrs	r4, 3
    b0f6:	07 c0       	rjmp	.+14     	; 0xb106 <vfprintf+0x340>
    b0f8:	08 c0       	rjmp	.+16     	; 0xb10a <vfprintf+0x344>
    b0fa:	80 e3       	ldi	r24, 0x30	; 48
    b0fc:	90 e0       	ldi	r25, 0x00	; 0
    b0fe:	b3 01       	movw	r22, r6
    b100:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b104:	8a 94       	dec	r8
    b106:	88 20       	and	r8, r8
    b108:	c1 f7       	brne	.-16     	; 0xb0fa <vfprintf+0x334>
    b10a:	f7 fe       	sbrs	r15, 7
    b10c:	46 c0       	rjmp	.+140    	; 0xb19a <vfprintf+0x3d4>
    b10e:	86 01       	movw	r16, r12
    b110:	d7 fe       	sbrs	r13, 7
    b112:	02 c0       	rjmp	.+4      	; 0xb118 <vfprintf+0x352>
    b114:	00 e0       	ldi	r16, 0x00	; 0
    b116:	10 e0       	ldi	r17, 0x00	; 0
    b118:	76 01       	movw	r14, r12
    b11a:	08 94       	sec
    b11c:	e1 1c       	adc	r14, r1
    b11e:	f1 1c       	adc	r15, r1
    b120:	e0 1a       	sub	r14, r16
    b122:	f1 0a       	sbc	r15, r17
    b124:	41 e0       	ldi	r20, 0x01	; 1
    b126:	50 e0       	ldi	r21, 0x00	; 0
    b128:	4c 0f       	add	r20, r28
    b12a:	5d 1f       	adc	r21, r29
    b12c:	e4 0e       	add	r14, r20
    b12e:	f5 1e       	adc	r15, r21
    b130:	26 01       	movw	r4, r12
    b132:	4b 18       	sub	r4, r11
    b134:	51 08       	sbc	r5, r1
    b136:	89 2d       	mov	r24, r9
    b138:	90 e0       	ldi	r25, 0x00	; 0
    b13a:	aa 24       	eor	r10, r10
    b13c:	bb 24       	eor	r11, r11
    b13e:	a8 1a       	sub	r10, r24
    b140:	b9 0a       	sbc	r11, r25
    b142:	5f ef       	ldi	r21, 0xFF	; 255
    b144:	0f 3f       	cpi	r16, 0xFF	; 255
    b146:	15 07       	cpc	r17, r21
    b148:	29 f4       	brne	.+10     	; 0xb154 <vfprintf+0x38e>
    b14a:	8e e2       	ldi	r24, 0x2E	; 46
    b14c:	90 e0       	ldi	r25, 0x00	; 0
    b14e:	b3 01       	movw	r22, r6
    b150:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b154:	c0 16       	cp	r12, r16
    b156:	d1 06       	cpc	r13, r17
    b158:	34 f0       	brlt	.+12     	; 0xb166 <vfprintf+0x3a0>
    b15a:	40 16       	cp	r4, r16
    b15c:	51 06       	cpc	r5, r17
    b15e:	1c f4       	brge	.+6      	; 0xb166 <vfprintf+0x3a0>
    b160:	f7 01       	movw	r30, r14
    b162:	80 81       	ld	r24, Z
    b164:	01 c0       	rjmp	.+2      	; 0xb168 <vfprintf+0x3a2>
    b166:	80 e3       	ldi	r24, 0x30	; 48
    b168:	01 50       	subi	r16, 0x01	; 1
    b16a:	10 40       	sbci	r17, 0x00	; 0
    b16c:	08 94       	sec
    b16e:	e1 1c       	adc	r14, r1
    b170:	f1 1c       	adc	r15, r1
    b172:	0a 15       	cp	r16, r10
    b174:	1b 05       	cpc	r17, r11
    b176:	2c f0       	brlt	.+10     	; 0xb182 <vfprintf+0x3bc>
    b178:	90 e0       	ldi	r25, 0x00	; 0
    b17a:	b3 01       	movw	r22, r6
    b17c:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b180:	e0 cf       	rjmp	.-64     	; 0xb142 <vfprintf+0x37c>
    b182:	0c 15       	cp	r16, r12
    b184:	1d 05       	cpc	r17, r13
    b186:	39 f4       	brne	.+14     	; 0xb196 <vfprintf+0x3d0>
    b188:	9a 81       	ldd	r25, Y+2	; 0x02
    b18a:	96 33       	cpi	r25, 0x36	; 54
    b18c:	18 f4       	brcc	.+6      	; 0xb194 <vfprintf+0x3ce>
    b18e:	95 33       	cpi	r25, 0x35	; 53
    b190:	11 f4       	brne	.+4      	; 0xb196 <vfprintf+0x3d0>
    b192:	24 fe       	sbrs	r2, 4
    b194:	81 e3       	ldi	r24, 0x31	; 49
    b196:	90 e0       	ldi	r25, 0x00	; 0
    b198:	4b c0       	rjmp	.+150    	; 0xb230 <vfprintf+0x46a>
    b19a:	8a 81       	ldd	r24, Y+2	; 0x02
    b19c:	81 33       	cpi	r24, 0x31	; 49
    b19e:	09 f0       	breq	.+2      	; 0xb1a2 <vfprintf+0x3dc>
    b1a0:	0f 7e       	andi	r16, 0xEF	; 239
    b1a2:	90 e0       	ldi	r25, 0x00	; 0
    b1a4:	b3 01       	movw	r22, r6
    b1a6:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b1aa:	99 20       	and	r9, r9
    b1ac:	a1 f0       	breq	.+40     	; 0xb1d6 <vfprintf+0x410>
    b1ae:	8e e2       	ldi	r24, 0x2E	; 46
    b1b0:	90 e0       	ldi	r25, 0x00	; 0
    b1b2:	b3 01       	movw	r22, r6
    b1b4:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b1b8:	12 e0       	ldi	r17, 0x02	; 2
    b1ba:	e1 e0       	ldi	r30, 0x01	; 1
    b1bc:	f0 e0       	ldi	r31, 0x00	; 0
    b1be:	ec 0f       	add	r30, r28
    b1c0:	fd 1f       	adc	r31, r29
    b1c2:	e1 0f       	add	r30, r17
    b1c4:	f1 1d       	adc	r31, r1
    b1c6:	1f 5f       	subi	r17, 0xFF	; 255
    b1c8:	80 81       	ld	r24, Z
    b1ca:	90 e0       	ldi	r25, 0x00	; 0
    b1cc:	b3 01       	movw	r22, r6
    b1ce:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b1d2:	9a 94       	dec	r9
    b1d4:	91 f7       	brne	.-28     	; 0xb1ba <vfprintf+0x3f4>
    b1d6:	44 fc       	sbrc	r4, 4
    b1d8:	03 c0       	rjmp	.+6      	; 0xb1e0 <vfprintf+0x41a>
    b1da:	85 e6       	ldi	r24, 0x65	; 101
    b1dc:	90 e0       	ldi	r25, 0x00	; 0
    b1de:	02 c0       	rjmp	.+4      	; 0xb1e4 <vfprintf+0x41e>
    b1e0:	85 e4       	ldi	r24, 0x45	; 69
    b1e2:	90 e0       	ldi	r25, 0x00	; 0
    b1e4:	b3 01       	movw	r22, r6
    b1e6:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b1ea:	d7 fc       	sbrc	r13, 7
    b1ec:	05 c0       	rjmp	.+10     	; 0xb1f8 <vfprintf+0x432>
    b1ee:	c1 14       	cp	r12, r1
    b1f0:	d1 04       	cpc	r13, r1
    b1f2:	41 f4       	brne	.+16     	; 0xb204 <vfprintf+0x43e>
    b1f4:	04 ff       	sbrs	r16, 4
    b1f6:	06 c0       	rjmp	.+12     	; 0xb204 <vfprintf+0x43e>
    b1f8:	d0 94       	com	r13
    b1fa:	c1 94       	neg	r12
    b1fc:	d1 08       	sbc	r13, r1
    b1fe:	d3 94       	inc	r13
    b200:	8d e2       	ldi	r24, 0x2D	; 45
    b202:	01 c0       	rjmp	.+2      	; 0xb206 <vfprintf+0x440>
    b204:	8b e2       	ldi	r24, 0x2B	; 43
    b206:	90 e0       	ldi	r25, 0x00	; 0
    b208:	b3 01       	movw	r22, r6
    b20a:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b20e:	80 e3       	ldi	r24, 0x30	; 48
    b210:	05 c0       	rjmp	.+10     	; 0xb21c <vfprintf+0x456>
    b212:	8f 5f       	subi	r24, 0xFF	; 255
    b214:	26 ef       	ldi	r18, 0xF6	; 246
    b216:	3f ef       	ldi	r19, 0xFF	; 255
    b218:	c2 0e       	add	r12, r18
    b21a:	d3 1e       	adc	r13, r19
    b21c:	3a e0       	ldi	r19, 0x0A	; 10
    b21e:	c3 16       	cp	r12, r19
    b220:	d1 04       	cpc	r13, r1
    b222:	bc f7       	brge	.-18     	; 0xb212 <vfprintf+0x44c>
    b224:	90 e0       	ldi	r25, 0x00	; 0
    b226:	b3 01       	movw	r22, r6
    b228:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b22c:	c6 01       	movw	r24, r12
    b22e:	c0 96       	adiw	r24, 0x30	; 48
    b230:	b3 01       	movw	r22, r6
    b232:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b236:	cc 84       	ldd	r12, Y+12	; 0x0c
    b238:	dd 84       	ldd	r13, Y+13	; 0x0d
    b23a:	52 c1       	rjmp	.+676    	; 0xb4e0 <vfprintf+0x71a>
    b23c:	93 36       	cpi	r25, 0x63	; 99
    b23e:	31 f0       	breq	.+12     	; 0xb24c <vfprintf+0x486>
    b240:	93 37       	cpi	r25, 0x73	; 115
    b242:	99 f0       	breq	.+38     	; 0xb26a <vfprintf+0x4a4>
    b244:	93 35       	cpi	r25, 0x53	; 83
    b246:	09 f0       	breq	.+2      	; 0xb24a <vfprintf+0x484>
    b248:	59 c0       	rjmp	.+178    	; 0xb2fc <vfprintf+0x536>
    b24a:	23 c0       	rjmp	.+70     	; 0xb292 <vfprintf+0x4cc>
    b24c:	f6 01       	movw	r30, r12
    b24e:	80 81       	ld	r24, Z
    b250:	89 83       	std	Y+1, r24	; 0x01
    b252:	5e 01       	movw	r10, r28
    b254:	08 94       	sec
    b256:	a1 1c       	adc	r10, r1
    b258:	b1 1c       	adc	r11, r1
    b25a:	22 e0       	ldi	r18, 0x02	; 2
    b25c:	30 e0       	ldi	r19, 0x00	; 0
    b25e:	c2 0e       	add	r12, r18
    b260:	d3 1e       	adc	r13, r19
    b262:	21 e0       	ldi	r18, 0x01	; 1
    b264:	e2 2e       	mov	r14, r18
    b266:	f1 2c       	mov	r15, r1
    b268:	12 c0       	rjmp	.+36     	; 0xb28e <vfprintf+0x4c8>
    b26a:	f6 01       	movw	r30, r12
    b26c:	a0 80       	ld	r10, Z
    b26e:	b1 80       	ldd	r11, Z+1	; 0x01
    b270:	16 fd       	sbrc	r17, 6
    b272:	03 c0       	rjmp	.+6      	; 0xb27a <vfprintf+0x4b4>
    b274:	6f ef       	ldi	r22, 0xFF	; 255
    b276:	7f ef       	ldi	r23, 0xFF	; 255
    b278:	02 c0       	rjmp	.+4      	; 0xb27e <vfprintf+0x4b8>
    b27a:	69 2d       	mov	r22, r9
    b27c:	70 e0       	ldi	r23, 0x00	; 0
    b27e:	22 e0       	ldi	r18, 0x02	; 2
    b280:	30 e0       	ldi	r19, 0x00	; 0
    b282:	c2 0e       	add	r12, r18
    b284:	d3 1e       	adc	r13, r19
    b286:	c5 01       	movw	r24, r10
    b288:	0e 94 d7 61 	call	0xc3ae	; 0xc3ae <strnlen>
    b28c:	7c 01       	movw	r14, r24
    b28e:	1f 77       	andi	r17, 0x7F	; 127
    b290:	13 c0       	rjmp	.+38     	; 0xb2b8 <vfprintf+0x4f2>
    b292:	f6 01       	movw	r30, r12
    b294:	a0 80       	ld	r10, Z
    b296:	b1 80       	ldd	r11, Z+1	; 0x01
    b298:	16 fd       	sbrc	r17, 6
    b29a:	03 c0       	rjmp	.+6      	; 0xb2a2 <vfprintf+0x4dc>
    b29c:	6f ef       	ldi	r22, 0xFF	; 255
    b29e:	7f ef       	ldi	r23, 0xFF	; 255
    b2a0:	02 c0       	rjmp	.+4      	; 0xb2a6 <vfprintf+0x4e0>
    b2a2:	69 2d       	mov	r22, r9
    b2a4:	70 e0       	ldi	r23, 0x00	; 0
    b2a6:	22 e0       	ldi	r18, 0x02	; 2
    b2a8:	30 e0       	ldi	r19, 0x00	; 0
    b2aa:	c2 0e       	add	r12, r18
    b2ac:	d3 1e       	adc	r13, r19
    b2ae:	c5 01       	movw	r24, r10
    b2b0:	0e 94 bc 61 	call	0xc378	; 0xc378 <strnlen_P>
    b2b4:	7c 01       	movw	r14, r24
    b2b6:	10 68       	ori	r17, 0x80	; 128
    b2b8:	13 ff       	sbrs	r17, 3
    b2ba:	07 c0       	rjmp	.+14     	; 0xb2ca <vfprintf+0x504>
    b2bc:	1b c0       	rjmp	.+54     	; 0xb2f4 <vfprintf+0x52e>
    b2be:	80 e2       	ldi	r24, 0x20	; 32
    b2c0:	90 e0       	ldi	r25, 0x00	; 0
    b2c2:	b3 01       	movw	r22, r6
    b2c4:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b2c8:	8a 94       	dec	r8
    b2ca:	88 2d       	mov	r24, r8
    b2cc:	90 e0       	ldi	r25, 0x00	; 0
    b2ce:	e8 16       	cp	r14, r24
    b2d0:	f9 06       	cpc	r15, r25
    b2d2:	a8 f3       	brcs	.-22     	; 0xb2be <vfprintf+0x4f8>
    b2d4:	0f c0       	rjmp	.+30     	; 0xb2f4 <vfprintf+0x52e>
    b2d6:	f5 01       	movw	r30, r10
    b2d8:	17 fd       	sbrc	r17, 7
    b2da:	85 91       	lpm	r24, Z+
    b2dc:	17 ff       	sbrs	r17, 7
    b2de:	81 91       	ld	r24, Z+
    b2e0:	5f 01       	movw	r10, r30
    b2e2:	90 e0       	ldi	r25, 0x00	; 0
    b2e4:	b3 01       	movw	r22, r6
    b2e6:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b2ea:	81 10       	cpse	r8, r1
    b2ec:	8a 94       	dec	r8
    b2ee:	08 94       	sec
    b2f0:	e1 08       	sbc	r14, r1
    b2f2:	f1 08       	sbc	r15, r1
    b2f4:	e1 14       	cp	r14, r1
    b2f6:	f1 04       	cpc	r15, r1
    b2f8:	71 f7       	brne	.-36     	; 0xb2d6 <vfprintf+0x510>
    b2fa:	f2 c0       	rjmp	.+484    	; 0xb4e0 <vfprintf+0x71a>
    b2fc:	94 36       	cpi	r25, 0x64	; 100
    b2fe:	11 f0       	breq	.+4      	; 0xb304 <vfprintf+0x53e>
    b300:	99 36       	cpi	r25, 0x69	; 105
    b302:	89 f5       	brne	.+98     	; 0xb366 <vfprintf+0x5a0>
    b304:	17 ff       	sbrs	r17, 7
    b306:	08 c0       	rjmp	.+16     	; 0xb318 <vfprintf+0x552>
    b308:	f6 01       	movw	r30, r12
    b30a:	20 81       	ld	r18, Z
    b30c:	31 81       	ldd	r19, Z+1	; 0x01
    b30e:	42 81       	ldd	r20, Z+2	; 0x02
    b310:	53 81       	ldd	r21, Z+3	; 0x03
    b312:	84 e0       	ldi	r24, 0x04	; 4
    b314:	90 e0       	ldi	r25, 0x00	; 0
    b316:	0a c0       	rjmp	.+20     	; 0xb32c <vfprintf+0x566>
    b318:	f6 01       	movw	r30, r12
    b31a:	80 81       	ld	r24, Z
    b31c:	91 81       	ldd	r25, Z+1	; 0x01
    b31e:	9c 01       	movw	r18, r24
    b320:	44 27       	eor	r20, r20
    b322:	37 fd       	sbrc	r19, 7
    b324:	40 95       	com	r20
    b326:	54 2f       	mov	r21, r20
    b328:	82 e0       	ldi	r24, 0x02	; 2
    b32a:	90 e0       	ldi	r25, 0x00	; 0
    b32c:	c8 0e       	add	r12, r24
    b32e:	d9 1e       	adc	r13, r25
    b330:	9f e6       	ldi	r25, 0x6F	; 111
    b332:	f9 2e       	mov	r15, r25
    b334:	f1 22       	and	r15, r17
    b336:	57 ff       	sbrs	r21, 7
    b338:	09 c0       	rjmp	.+18     	; 0xb34c <vfprintf+0x586>
    b33a:	50 95       	com	r21
    b33c:	40 95       	com	r20
    b33e:	30 95       	com	r19
    b340:	21 95       	neg	r18
    b342:	3f 4f       	sbci	r19, 0xFF	; 255
    b344:	4f 4f       	sbci	r20, 0xFF	; 255
    b346:	5f 4f       	sbci	r21, 0xFF	; 255
    b348:	90 e8       	ldi	r25, 0x80	; 128
    b34a:	f9 2a       	or	r15, r25
    b34c:	ca 01       	movw	r24, r20
    b34e:	b9 01       	movw	r22, r18
    b350:	ae 01       	movw	r20, r28
    b352:	4f 5f       	subi	r20, 0xFF	; 255
    b354:	5f 4f       	sbci	r21, 0xFF	; 255
    b356:	2a e0       	ldi	r18, 0x0A	; 10
    b358:	30 e0       	ldi	r19, 0x00	; 0
    b35a:	0e 94 71 62 	call	0xc4e2	; 0xc4e2 <__ultoa_invert>
    b35e:	e8 2e       	mov	r14, r24
    b360:	e8 89       	ldd	r30, Y+16	; 0x10
    b362:	ee 1a       	sub	r14, r30
    b364:	41 c0       	rjmp	.+130    	; 0xb3e8 <vfprintf+0x622>
    b366:	95 37       	cpi	r25, 0x75	; 117
    b368:	21 f4       	brne	.+8      	; 0xb372 <vfprintf+0x5ac>
    b36a:	1f 7e       	andi	r17, 0xEF	; 239
    b36c:	2a e0       	ldi	r18, 0x0A	; 10
    b36e:	30 e0       	ldi	r19, 0x00	; 0
    b370:	1c c0       	rjmp	.+56     	; 0xb3aa <vfprintf+0x5e4>
    b372:	19 7f       	andi	r17, 0xF9	; 249
    b374:	9f 36       	cpi	r25, 0x6F	; 111
    b376:	61 f0       	breq	.+24     	; 0xb390 <vfprintf+0x5ca>
    b378:	90 37       	cpi	r25, 0x70	; 112
    b37a:	20 f4       	brcc	.+8      	; 0xb384 <vfprintf+0x5be>
    b37c:	98 35       	cpi	r25, 0x58	; 88
    b37e:	09 f0       	breq	.+2      	; 0xb382 <vfprintf+0x5bc>
    b380:	b2 c0       	rjmp	.+356    	; 0xb4e6 <vfprintf+0x720>
    b382:	0f c0       	rjmp	.+30     	; 0xb3a2 <vfprintf+0x5dc>
    b384:	90 37       	cpi	r25, 0x70	; 112
    b386:	39 f0       	breq	.+14     	; 0xb396 <vfprintf+0x5d0>
    b388:	98 37       	cpi	r25, 0x78	; 120
    b38a:	09 f0       	breq	.+2      	; 0xb38e <vfprintf+0x5c8>
    b38c:	ac c0       	rjmp	.+344    	; 0xb4e6 <vfprintf+0x720>
    b38e:	04 c0       	rjmp	.+8      	; 0xb398 <vfprintf+0x5d2>
    b390:	28 e0       	ldi	r18, 0x08	; 8
    b392:	30 e0       	ldi	r19, 0x00	; 0
    b394:	0a c0       	rjmp	.+20     	; 0xb3aa <vfprintf+0x5e4>
    b396:	10 61       	ori	r17, 0x10	; 16
    b398:	14 fd       	sbrc	r17, 4
    b39a:	14 60       	ori	r17, 0x04	; 4
    b39c:	20 e1       	ldi	r18, 0x10	; 16
    b39e:	30 e0       	ldi	r19, 0x00	; 0
    b3a0:	04 c0       	rjmp	.+8      	; 0xb3aa <vfprintf+0x5e4>
    b3a2:	14 fd       	sbrc	r17, 4
    b3a4:	16 60       	ori	r17, 0x06	; 6
    b3a6:	20 e1       	ldi	r18, 0x10	; 16
    b3a8:	32 e0       	ldi	r19, 0x02	; 2
    b3aa:	17 ff       	sbrs	r17, 7
    b3ac:	08 c0       	rjmp	.+16     	; 0xb3be <vfprintf+0x5f8>
    b3ae:	f6 01       	movw	r30, r12
    b3b0:	60 81       	ld	r22, Z
    b3b2:	71 81       	ldd	r23, Z+1	; 0x01
    b3b4:	82 81       	ldd	r24, Z+2	; 0x02
    b3b6:	93 81       	ldd	r25, Z+3	; 0x03
    b3b8:	44 e0       	ldi	r20, 0x04	; 4
    b3ba:	50 e0       	ldi	r21, 0x00	; 0
    b3bc:	08 c0       	rjmp	.+16     	; 0xb3ce <vfprintf+0x608>
    b3be:	f6 01       	movw	r30, r12
    b3c0:	80 81       	ld	r24, Z
    b3c2:	91 81       	ldd	r25, Z+1	; 0x01
    b3c4:	bc 01       	movw	r22, r24
    b3c6:	80 e0       	ldi	r24, 0x00	; 0
    b3c8:	90 e0       	ldi	r25, 0x00	; 0
    b3ca:	42 e0       	ldi	r20, 0x02	; 2
    b3cc:	50 e0       	ldi	r21, 0x00	; 0
    b3ce:	c4 0e       	add	r12, r20
    b3d0:	d5 1e       	adc	r13, r21
    b3d2:	ae 01       	movw	r20, r28
    b3d4:	4f 5f       	subi	r20, 0xFF	; 255
    b3d6:	5f 4f       	sbci	r21, 0xFF	; 255
    b3d8:	0e 94 71 62 	call	0xc4e2	; 0xc4e2 <__ultoa_invert>
    b3dc:	e8 2e       	mov	r14, r24
    b3de:	58 89       	ldd	r21, Y+16	; 0x10
    b3e0:	e5 1a       	sub	r14, r21
    b3e2:	8f e7       	ldi	r24, 0x7F	; 127
    b3e4:	f8 2e       	mov	r15, r24
    b3e6:	f1 22       	and	r15, r17
    b3e8:	f6 fe       	sbrs	r15, 6
    b3ea:	0b c0       	rjmp	.+22     	; 0xb402 <vfprintf+0x63c>
    b3ec:	8e ef       	ldi	r24, 0xFE	; 254
    b3ee:	f8 22       	and	r15, r24
    b3f0:	e9 14       	cp	r14, r9
    b3f2:	38 f4       	brcc	.+14     	; 0xb402 <vfprintf+0x63c>
    b3f4:	f4 fe       	sbrs	r15, 4
    b3f6:	07 c0       	rjmp	.+14     	; 0xb406 <vfprintf+0x640>
    b3f8:	f2 fc       	sbrc	r15, 2
    b3fa:	05 c0       	rjmp	.+10     	; 0xb406 <vfprintf+0x640>
    b3fc:	9f ee       	ldi	r25, 0xEF	; 239
    b3fe:	f9 22       	and	r15, r25
    b400:	02 c0       	rjmp	.+4      	; 0xb406 <vfprintf+0x640>
    b402:	1e 2d       	mov	r17, r14
    b404:	01 c0       	rjmp	.+2      	; 0xb408 <vfprintf+0x642>
    b406:	19 2d       	mov	r17, r9
    b408:	f4 fe       	sbrs	r15, 4
    b40a:	0d c0       	rjmp	.+26     	; 0xb426 <vfprintf+0x660>
    b40c:	fe 01       	movw	r30, r28
    b40e:	ee 0d       	add	r30, r14
    b410:	f1 1d       	adc	r31, r1
    b412:	80 81       	ld	r24, Z
    b414:	80 33       	cpi	r24, 0x30	; 48
    b416:	19 f4       	brne	.+6      	; 0xb41e <vfprintf+0x658>
    b418:	e9 ee       	ldi	r30, 0xE9	; 233
    b41a:	fe 22       	and	r15, r30
    b41c:	08 c0       	rjmp	.+16     	; 0xb42e <vfprintf+0x668>
    b41e:	1f 5f       	subi	r17, 0xFF	; 255
    b420:	f2 fe       	sbrs	r15, 2
    b422:	05 c0       	rjmp	.+10     	; 0xb42e <vfprintf+0x668>
    b424:	03 c0       	rjmp	.+6      	; 0xb42c <vfprintf+0x666>
    b426:	8f 2d       	mov	r24, r15
    b428:	86 78       	andi	r24, 0x86	; 134
    b42a:	09 f0       	breq	.+2      	; 0xb42e <vfprintf+0x668>
    b42c:	1f 5f       	subi	r17, 0xFF	; 255
    b42e:	0f 2d       	mov	r16, r15
    b430:	f3 fc       	sbrc	r15, 3
    b432:	14 c0       	rjmp	.+40     	; 0xb45c <vfprintf+0x696>
    b434:	f0 fe       	sbrs	r15, 0
    b436:	0f c0       	rjmp	.+30     	; 0xb456 <vfprintf+0x690>
    b438:	18 15       	cp	r17, r8
    b43a:	10 f0       	brcs	.+4      	; 0xb440 <vfprintf+0x67a>
    b43c:	9e 2c       	mov	r9, r14
    b43e:	0b c0       	rjmp	.+22     	; 0xb456 <vfprintf+0x690>
    b440:	9e 2c       	mov	r9, r14
    b442:	98 0c       	add	r9, r8
    b444:	91 1a       	sub	r9, r17
    b446:	18 2d       	mov	r17, r8
    b448:	06 c0       	rjmp	.+12     	; 0xb456 <vfprintf+0x690>
    b44a:	80 e2       	ldi	r24, 0x20	; 32
    b44c:	90 e0       	ldi	r25, 0x00	; 0
    b44e:	b3 01       	movw	r22, r6
    b450:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b454:	1f 5f       	subi	r17, 0xFF	; 255
    b456:	18 15       	cp	r17, r8
    b458:	c0 f3       	brcs	.-16     	; 0xb44a <vfprintf+0x684>
    b45a:	04 c0       	rjmp	.+8      	; 0xb464 <vfprintf+0x69e>
    b45c:	18 15       	cp	r17, r8
    b45e:	10 f4       	brcc	.+4      	; 0xb464 <vfprintf+0x69e>
    b460:	81 1a       	sub	r8, r17
    b462:	01 c0       	rjmp	.+2      	; 0xb466 <vfprintf+0x6a0>
    b464:	88 24       	eor	r8, r8
    b466:	04 ff       	sbrs	r16, 4
    b468:	0f c0       	rjmp	.+30     	; 0xb488 <vfprintf+0x6c2>
    b46a:	80 e3       	ldi	r24, 0x30	; 48
    b46c:	90 e0       	ldi	r25, 0x00	; 0
    b46e:	b3 01       	movw	r22, r6
    b470:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b474:	02 ff       	sbrs	r16, 2
    b476:	1d c0       	rjmp	.+58     	; 0xb4b2 <vfprintf+0x6ec>
    b478:	01 fd       	sbrc	r16, 1
    b47a:	03 c0       	rjmp	.+6      	; 0xb482 <vfprintf+0x6bc>
    b47c:	88 e7       	ldi	r24, 0x78	; 120
    b47e:	90 e0       	ldi	r25, 0x00	; 0
    b480:	0e c0       	rjmp	.+28     	; 0xb49e <vfprintf+0x6d8>
    b482:	88 e5       	ldi	r24, 0x58	; 88
    b484:	90 e0       	ldi	r25, 0x00	; 0
    b486:	0b c0       	rjmp	.+22     	; 0xb49e <vfprintf+0x6d8>
    b488:	80 2f       	mov	r24, r16
    b48a:	86 78       	andi	r24, 0x86	; 134
    b48c:	91 f0       	breq	.+36     	; 0xb4b2 <vfprintf+0x6ec>
    b48e:	01 ff       	sbrs	r16, 1
    b490:	02 c0       	rjmp	.+4      	; 0xb496 <vfprintf+0x6d0>
    b492:	8b e2       	ldi	r24, 0x2B	; 43
    b494:	01 c0       	rjmp	.+2      	; 0xb498 <vfprintf+0x6d2>
    b496:	80 e2       	ldi	r24, 0x20	; 32
    b498:	f7 fc       	sbrc	r15, 7
    b49a:	8d e2       	ldi	r24, 0x2D	; 45
    b49c:	90 e0       	ldi	r25, 0x00	; 0
    b49e:	b3 01       	movw	r22, r6
    b4a0:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b4a4:	06 c0       	rjmp	.+12     	; 0xb4b2 <vfprintf+0x6ec>
    b4a6:	80 e3       	ldi	r24, 0x30	; 48
    b4a8:	90 e0       	ldi	r25, 0x00	; 0
    b4aa:	b3 01       	movw	r22, r6
    b4ac:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b4b0:	9a 94       	dec	r9
    b4b2:	e9 14       	cp	r14, r9
    b4b4:	c0 f3       	brcs	.-16     	; 0xb4a6 <vfprintf+0x6e0>
    b4b6:	ea 94       	dec	r14
    b4b8:	e1 e0       	ldi	r30, 0x01	; 1
    b4ba:	f0 e0       	ldi	r31, 0x00	; 0
    b4bc:	ec 0f       	add	r30, r28
    b4be:	fd 1f       	adc	r31, r29
    b4c0:	ee 0d       	add	r30, r14
    b4c2:	f1 1d       	adc	r31, r1
    b4c4:	80 81       	ld	r24, Z
    b4c6:	90 e0       	ldi	r25, 0x00	; 0
    b4c8:	b3 01       	movw	r22, r6
    b4ca:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b4ce:	ee 20       	and	r14, r14
    b4d0:	91 f7       	brne	.-28     	; 0xb4b6 <vfprintf+0x6f0>
    b4d2:	06 c0       	rjmp	.+12     	; 0xb4e0 <vfprintf+0x71a>
    b4d4:	80 e2       	ldi	r24, 0x20	; 32
    b4d6:	90 e0       	ldi	r25, 0x00	; 0
    b4d8:	b3 01       	movw	r22, r6
    b4da:	0e 94 22 62 	call	0xc444	; 0xc444 <fputc>
    b4de:	8a 94       	dec	r8
    b4e0:	88 20       	and	r8, r8
    b4e2:	c1 f7       	brne	.-16     	; 0xb4d4 <vfprintf+0x70e>
    b4e4:	99 cc       	rjmp	.-1742   	; 0xae18 <vfprintf+0x52>
    b4e6:	f3 01       	movw	r30, r6
    b4e8:	66 81       	ldd	r22, Z+6	; 0x06
    b4ea:	77 81       	ldd	r23, Z+7	; 0x07
    b4ec:	cb 01       	movw	r24, r22
    b4ee:	61 96       	adiw	r28, 0x11	; 17
    b4f0:	cd bf       	out	0x3d, r28	; 61
    b4f2:	de bf       	out	0x3e, r29	; 62
    b4f4:	cf 91       	pop	r28
    b4f6:	df 91       	pop	r29
    b4f8:	1f 91       	pop	r17
    b4fa:	0f 91       	pop	r16
    b4fc:	ff 90       	pop	r15
    b4fe:	ef 90       	pop	r14
    b500:	df 90       	pop	r13
    b502:	cf 90       	pop	r12
    b504:	bf 90       	pop	r11
    b506:	af 90       	pop	r10
    b508:	9f 90       	pop	r9
    b50a:	8f 90       	pop	r8
    b50c:	7f 90       	pop	r7
    b50e:	6f 90       	pop	r6
    b510:	5f 90       	pop	r5
    b512:	4f 90       	pop	r4
    b514:	3f 90       	pop	r3
    b516:	2f 90       	pop	r2
    b518:	08 95       	ret

0000b51a <__subsf3>:
    b51a:	50 58       	subi	r21, 0x80	; 128

0000b51c <__addsf3>:
    b51c:	bb 27       	eor	r27, r27
    b51e:	aa 27       	eor	r26, r26
    b520:	0e d0       	rcall	.+28     	; 0xb53e <__addsf3x>
    b522:	29 c2       	rjmp	.+1106   	; 0xb976 <__fp_round>
    b524:	f2 d1       	rcall	.+996    	; 0xb90a <__fp_pscA>
    b526:	30 f0       	brcs	.+12     	; 0xb534 <__addsf3+0x18>
    b528:	f7 d1       	rcall	.+1006   	; 0xb918 <__fp_pscB>
    b52a:	20 f0       	brcs	.+8      	; 0xb534 <__addsf3+0x18>
    b52c:	31 f4       	brne	.+12     	; 0xb53a <__addsf3+0x1e>
    b52e:	9f 3f       	cpi	r25, 0xFF	; 255
    b530:	11 f4       	brne	.+4      	; 0xb536 <__addsf3+0x1a>
    b532:	1e f4       	brtc	.+6      	; 0xb53a <__addsf3+0x1e>
    b534:	c2 c1       	rjmp	.+900    	; 0xb8ba <__fp_nan>
    b536:	0e f4       	brtc	.+2      	; 0xb53a <__addsf3+0x1e>
    b538:	e0 95       	com	r30
    b53a:	e7 fb       	bst	r30, 7
    b53c:	8f c1       	rjmp	.+798    	; 0xb85c <__fp_inf>

0000b53e <__addsf3x>:
    b53e:	e9 2f       	mov	r30, r25
    b540:	3c d2       	rcall	.+1144   	; 0xb9ba <__fp_split3>
    b542:	80 f3       	brcs	.-32     	; 0xb524 <__addsf3+0x8>
    b544:	ba 17       	cp	r27, r26
    b546:	62 07       	cpc	r22, r18
    b548:	73 07       	cpc	r23, r19
    b54a:	84 07       	cpc	r24, r20
    b54c:	95 07       	cpc	r25, r21
    b54e:	18 f0       	brcs	.+6      	; 0xb556 <__addsf3x+0x18>
    b550:	71 f4       	brne	.+28     	; 0xb56e <__addsf3x+0x30>
    b552:	9e f5       	brtc	.+102    	; 0xb5ba <__addsf3x+0x7c>
    b554:	6b c2       	rjmp	.+1238   	; 0xba2c <__fp_zero>
    b556:	0e f4       	brtc	.+2      	; 0xb55a <__addsf3x+0x1c>
    b558:	e0 95       	com	r30
    b55a:	0b 2e       	mov	r0, r27
    b55c:	ba 2f       	mov	r27, r26
    b55e:	a0 2d       	mov	r26, r0
    b560:	0b 01       	movw	r0, r22
    b562:	b9 01       	movw	r22, r18
    b564:	90 01       	movw	r18, r0
    b566:	0c 01       	movw	r0, r24
    b568:	ca 01       	movw	r24, r20
    b56a:	a0 01       	movw	r20, r0
    b56c:	11 24       	eor	r1, r1
    b56e:	ff 27       	eor	r31, r31
    b570:	59 1b       	sub	r21, r25
    b572:	99 f0       	breq	.+38     	; 0xb59a <__addsf3x+0x5c>
    b574:	59 3f       	cpi	r21, 0xF9	; 249
    b576:	50 f4       	brcc	.+20     	; 0xb58c <__addsf3x+0x4e>
    b578:	50 3e       	cpi	r21, 0xE0	; 224
    b57a:	68 f1       	brcs	.+90     	; 0xb5d6 <__addsf3x+0x98>
    b57c:	1a 16       	cp	r1, r26
    b57e:	f0 40       	sbci	r31, 0x00	; 0
    b580:	a2 2f       	mov	r26, r18
    b582:	23 2f       	mov	r18, r19
    b584:	34 2f       	mov	r19, r20
    b586:	44 27       	eor	r20, r20
    b588:	58 5f       	subi	r21, 0xF8	; 248
    b58a:	f3 cf       	rjmp	.-26     	; 0xb572 <__addsf3x+0x34>
    b58c:	46 95       	lsr	r20
    b58e:	37 95       	ror	r19
    b590:	27 95       	ror	r18
    b592:	a7 95       	ror	r26
    b594:	f0 40       	sbci	r31, 0x00	; 0
    b596:	53 95       	inc	r21
    b598:	c9 f7       	brne	.-14     	; 0xb58c <__addsf3x+0x4e>
    b59a:	7e f4       	brtc	.+30     	; 0xb5ba <__addsf3x+0x7c>
    b59c:	1f 16       	cp	r1, r31
    b59e:	ba 0b       	sbc	r27, r26
    b5a0:	62 0b       	sbc	r22, r18
    b5a2:	73 0b       	sbc	r23, r19
    b5a4:	84 0b       	sbc	r24, r20
    b5a6:	ba f0       	brmi	.+46     	; 0xb5d6 <__addsf3x+0x98>
    b5a8:	91 50       	subi	r25, 0x01	; 1
    b5aa:	a1 f0       	breq	.+40     	; 0xb5d4 <__addsf3x+0x96>
    b5ac:	ff 0f       	add	r31, r31
    b5ae:	bb 1f       	adc	r27, r27
    b5b0:	66 1f       	adc	r22, r22
    b5b2:	77 1f       	adc	r23, r23
    b5b4:	88 1f       	adc	r24, r24
    b5b6:	c2 f7       	brpl	.-16     	; 0xb5a8 <__addsf3x+0x6a>
    b5b8:	0e c0       	rjmp	.+28     	; 0xb5d6 <__addsf3x+0x98>
    b5ba:	ba 0f       	add	r27, r26
    b5bc:	62 1f       	adc	r22, r18
    b5be:	73 1f       	adc	r23, r19
    b5c0:	84 1f       	adc	r24, r20
    b5c2:	48 f4       	brcc	.+18     	; 0xb5d6 <__addsf3x+0x98>
    b5c4:	87 95       	ror	r24
    b5c6:	77 95       	ror	r23
    b5c8:	67 95       	ror	r22
    b5ca:	b7 95       	ror	r27
    b5cc:	f7 95       	ror	r31
    b5ce:	9e 3f       	cpi	r25, 0xFE	; 254
    b5d0:	08 f0       	brcs	.+2      	; 0xb5d4 <__addsf3x+0x96>
    b5d2:	b3 cf       	rjmp	.-154    	; 0xb53a <__addsf3+0x1e>
    b5d4:	93 95       	inc	r25
    b5d6:	88 0f       	add	r24, r24
    b5d8:	08 f0       	brcs	.+2      	; 0xb5dc <__addsf3x+0x9e>
    b5da:	99 27       	eor	r25, r25
    b5dc:	ee 0f       	add	r30, r30
    b5de:	97 95       	ror	r25
    b5e0:	87 95       	ror	r24
    b5e2:	08 95       	ret

0000b5e4 <atan>:
    b5e4:	df 93       	push	r29
    b5e6:	dd 27       	eor	r29, r29
    b5e8:	b9 2f       	mov	r27, r25
    b5ea:	bf 77       	andi	r27, 0x7F	; 127
    b5ec:	40 e8       	ldi	r20, 0x80	; 128
    b5ee:	5f e3       	ldi	r21, 0x3F	; 63
    b5f0:	16 16       	cp	r1, r22
    b5f2:	17 06       	cpc	r1, r23
    b5f4:	48 07       	cpc	r20, r24
    b5f6:	5b 07       	cpc	r21, r27
    b5f8:	10 f4       	brcc	.+4      	; 0xb5fe <atan+0x1a>
    b5fa:	d9 2f       	mov	r29, r25
    b5fc:	83 d2       	rcall	.+1286   	; 0xbb04 <inverse>
    b5fe:	9f 93       	push	r25
    b600:	8f 93       	push	r24
    b602:	7f 93       	push	r23
    b604:	6f 93       	push	r22
    b606:	96 d3       	rcall	.+1836   	; 0xbd34 <square>
    b608:	e8 ee       	ldi	r30, 0xE8	; 232
    b60a:	f1 e0       	ldi	r31, 0x01	; 1
    b60c:	59 d1       	rcall	.+690    	; 0xb8c0 <__fp_powser>
    b60e:	b3 d1       	rcall	.+870    	; 0xb976 <__fp_round>
    b610:	2f 91       	pop	r18
    b612:	3f 91       	pop	r19
    b614:	4f 91       	pop	r20
    b616:	5f 91       	pop	r21
    b618:	ee d2       	rcall	.+1500   	; 0xbbf6 <__mulsf3x>
    b61a:	dd 23       	and	r29, r29
    b61c:	49 f0       	breq	.+18     	; 0xb630 <atan+0x4c>
    b61e:	90 58       	subi	r25, 0x80	; 128
    b620:	a2 ea       	ldi	r26, 0xA2	; 162
    b622:	2a ed       	ldi	r18, 0xDA	; 218
    b624:	3f e0       	ldi	r19, 0x0F	; 15
    b626:	49 ec       	ldi	r20, 0xC9	; 201
    b628:	5f e3       	ldi	r21, 0x3F	; 63
    b62a:	d0 78       	andi	r29, 0x80	; 128
    b62c:	5d 27       	eor	r21, r29
    b62e:	87 df       	rcall	.-242    	; 0xb53e <__addsf3x>
    b630:	df 91       	pop	r29
    b632:	a1 c1       	rjmp	.+834    	; 0xb976 <__fp_round>

0000b634 <ceil>:
    b634:	e4 d1       	rcall	.+968    	; 0xb9fe <__fp_trunc>
    b636:	80 f0       	brcs	.+32     	; 0xb658 <ceil+0x24>
    b638:	9f 37       	cpi	r25, 0x7F	; 127
    b63a:	40 f4       	brcc	.+16     	; 0xb64c <ceil+0x18>
    b63c:	91 11       	cpse	r25, r1
    b63e:	0e f4       	brtc	.+2      	; 0xb642 <ceil+0xe>
    b640:	f6 c1       	rjmp	.+1004   	; 0xba2e <__fp_szero>
    b642:	60 e0       	ldi	r22, 0x00	; 0
    b644:	70 e0       	ldi	r23, 0x00	; 0
    b646:	80 e8       	ldi	r24, 0x80	; 128
    b648:	9f e3       	ldi	r25, 0x3F	; 63
    b64a:	08 95       	ret
    b64c:	26 f0       	brts	.+8      	; 0xb656 <ceil+0x22>
    b64e:	1b 16       	cp	r1, r27
    b650:	61 1d       	adc	r22, r1
    b652:	71 1d       	adc	r23, r1
    b654:	81 1d       	adc	r24, r1
    b656:	08 c1       	rjmp	.+528    	; 0xb868 <__fp_mintl>
    b658:	22 c1       	rjmp	.+580    	; 0xb89e <__fp_mpack>

0000b65a <__cmpsf2>:
    b65a:	dc d0       	rcall	.+440    	; 0xb814 <__fp_cmp>
    b65c:	08 f4       	brcc	.+2      	; 0xb660 <__cmpsf2+0x6>
    b65e:	81 e0       	ldi	r24, 0x01	; 1
    b660:	08 95       	ret

0000b662 <cos>:
    b662:	62 d1       	rcall	.+708    	; 0xb928 <__fp_rempio2>
    b664:	e3 95       	inc	r30
    b666:	98 c1       	rjmp	.+816    	; 0xb998 <__fp_sinus>

0000b668 <__divsf3>:
    b668:	0c d0       	rcall	.+24     	; 0xb682 <__divsf3x>
    b66a:	85 c1       	rjmp	.+778    	; 0xb976 <__fp_round>
    b66c:	55 d1       	rcall	.+682    	; 0xb918 <__fp_pscB>
    b66e:	40 f0       	brcs	.+16     	; 0xb680 <__divsf3+0x18>
    b670:	4c d1       	rcall	.+664    	; 0xb90a <__fp_pscA>
    b672:	30 f0       	brcs	.+12     	; 0xb680 <__divsf3+0x18>
    b674:	21 f4       	brne	.+8      	; 0xb67e <__divsf3+0x16>
    b676:	5f 3f       	cpi	r21, 0xFF	; 255
    b678:	19 f0       	breq	.+6      	; 0xb680 <__divsf3+0x18>
    b67a:	f0 c0       	rjmp	.+480    	; 0xb85c <__fp_inf>
    b67c:	51 11       	cpse	r21, r1
    b67e:	d7 c1       	rjmp	.+942    	; 0xba2e <__fp_szero>
    b680:	1c c1       	rjmp	.+568    	; 0xb8ba <__fp_nan>

0000b682 <__divsf3x>:
    b682:	9b d1       	rcall	.+822    	; 0xb9ba <__fp_split3>
    b684:	98 f3       	brcs	.-26     	; 0xb66c <__divsf3+0x4>

0000b686 <__divsf3_pse>:
    b686:	99 23       	and	r25, r25
    b688:	c9 f3       	breq	.-14     	; 0xb67c <__divsf3+0x14>
    b68a:	55 23       	and	r21, r21
    b68c:	b1 f3       	breq	.-20     	; 0xb67a <__divsf3+0x12>
    b68e:	95 1b       	sub	r25, r21
    b690:	55 0b       	sbc	r21, r21
    b692:	bb 27       	eor	r27, r27
    b694:	aa 27       	eor	r26, r26
    b696:	62 17       	cp	r22, r18
    b698:	73 07       	cpc	r23, r19
    b69a:	84 07       	cpc	r24, r20
    b69c:	38 f0       	brcs	.+14     	; 0xb6ac <__divsf3_pse+0x26>
    b69e:	9f 5f       	subi	r25, 0xFF	; 255
    b6a0:	5f 4f       	sbci	r21, 0xFF	; 255
    b6a2:	22 0f       	add	r18, r18
    b6a4:	33 1f       	adc	r19, r19
    b6a6:	44 1f       	adc	r20, r20
    b6a8:	aa 1f       	adc	r26, r26
    b6aa:	a9 f3       	breq	.-22     	; 0xb696 <__divsf3_pse+0x10>
    b6ac:	33 d0       	rcall	.+102    	; 0xb714 <__divsf3_pse+0x8e>
    b6ae:	0e 2e       	mov	r0, r30
    b6b0:	3a f0       	brmi	.+14     	; 0xb6c0 <__divsf3_pse+0x3a>
    b6b2:	e0 e8       	ldi	r30, 0x80	; 128
    b6b4:	30 d0       	rcall	.+96     	; 0xb716 <__divsf3_pse+0x90>
    b6b6:	91 50       	subi	r25, 0x01	; 1
    b6b8:	50 40       	sbci	r21, 0x00	; 0
    b6ba:	e6 95       	lsr	r30
    b6bc:	00 1c       	adc	r0, r0
    b6be:	ca f7       	brpl	.-14     	; 0xb6b2 <__divsf3_pse+0x2c>
    b6c0:	29 d0       	rcall	.+82     	; 0xb714 <__divsf3_pse+0x8e>
    b6c2:	fe 2f       	mov	r31, r30
    b6c4:	27 d0       	rcall	.+78     	; 0xb714 <__divsf3_pse+0x8e>
    b6c6:	66 0f       	add	r22, r22
    b6c8:	77 1f       	adc	r23, r23
    b6ca:	88 1f       	adc	r24, r24
    b6cc:	bb 1f       	adc	r27, r27
    b6ce:	26 17       	cp	r18, r22
    b6d0:	37 07       	cpc	r19, r23
    b6d2:	48 07       	cpc	r20, r24
    b6d4:	ab 07       	cpc	r26, r27
    b6d6:	b0 e8       	ldi	r27, 0x80	; 128
    b6d8:	09 f0       	breq	.+2      	; 0xb6dc <__divsf3_pse+0x56>
    b6da:	bb 0b       	sbc	r27, r27
    b6dc:	80 2d       	mov	r24, r0
    b6de:	bf 01       	movw	r22, r30
    b6e0:	ff 27       	eor	r31, r31
    b6e2:	93 58       	subi	r25, 0x83	; 131
    b6e4:	5f 4f       	sbci	r21, 0xFF	; 255
    b6e6:	2a f0       	brmi	.+10     	; 0xb6f2 <__divsf3_pse+0x6c>
    b6e8:	9e 3f       	cpi	r25, 0xFE	; 254
    b6ea:	51 05       	cpc	r21, r1
    b6ec:	68 f0       	brcs	.+26     	; 0xb708 <__divsf3_pse+0x82>
    b6ee:	b6 c0       	rjmp	.+364    	; 0xb85c <__fp_inf>
    b6f0:	9e c1       	rjmp	.+828    	; 0xba2e <__fp_szero>
    b6f2:	5f 3f       	cpi	r21, 0xFF	; 255
    b6f4:	ec f3       	brlt	.-6      	; 0xb6f0 <__divsf3_pse+0x6a>
    b6f6:	98 3e       	cpi	r25, 0xE8	; 232
    b6f8:	dc f3       	brlt	.-10     	; 0xb6f0 <__divsf3_pse+0x6a>
    b6fa:	86 95       	lsr	r24
    b6fc:	77 95       	ror	r23
    b6fe:	67 95       	ror	r22
    b700:	b7 95       	ror	r27
    b702:	f7 95       	ror	r31
    b704:	9f 5f       	subi	r25, 0xFF	; 255
    b706:	c9 f7       	brne	.-14     	; 0xb6fa <__divsf3_pse+0x74>
    b708:	88 0f       	add	r24, r24
    b70a:	91 1d       	adc	r25, r1
    b70c:	96 95       	lsr	r25
    b70e:	87 95       	ror	r24
    b710:	97 f9       	bld	r25, 7
    b712:	08 95       	ret
    b714:	e1 e0       	ldi	r30, 0x01	; 1
    b716:	66 0f       	add	r22, r22
    b718:	77 1f       	adc	r23, r23
    b71a:	88 1f       	adc	r24, r24
    b71c:	bb 1f       	adc	r27, r27
    b71e:	62 17       	cp	r22, r18
    b720:	73 07       	cpc	r23, r19
    b722:	84 07       	cpc	r24, r20
    b724:	ba 07       	cpc	r27, r26
    b726:	20 f0       	brcs	.+8      	; 0xb730 <__divsf3_pse+0xaa>
    b728:	62 1b       	sub	r22, r18
    b72a:	73 0b       	sbc	r23, r19
    b72c:	84 0b       	sbc	r24, r20
    b72e:	ba 0b       	sbc	r27, r26
    b730:	ee 1f       	adc	r30, r30
    b732:	88 f7       	brcc	.-30     	; 0xb716 <__divsf3_pse+0x90>
    b734:	e0 95       	com	r30
    b736:	08 95       	ret

0000b738 <__fixsfsi>:
    b738:	04 d0       	rcall	.+8      	; 0xb742 <__fixunssfsi>
    b73a:	68 94       	set
    b73c:	b1 11       	cpse	r27, r1
    b73e:	77 c1       	rjmp	.+750    	; 0xba2e <__fp_szero>
    b740:	08 95       	ret

0000b742 <__fixunssfsi>:
    b742:	43 d1       	rcall	.+646    	; 0xb9ca <__fp_splitA>
    b744:	88 f0       	brcs	.+34     	; 0xb768 <__fixunssfsi+0x26>
    b746:	9f 57       	subi	r25, 0x7F	; 127
    b748:	90 f0       	brcs	.+36     	; 0xb76e <__fixunssfsi+0x2c>
    b74a:	b9 2f       	mov	r27, r25
    b74c:	99 27       	eor	r25, r25
    b74e:	b7 51       	subi	r27, 0x17	; 23
    b750:	a0 f0       	brcs	.+40     	; 0xb77a <__fixunssfsi+0x38>
    b752:	d1 f0       	breq	.+52     	; 0xb788 <__fixunssfsi+0x46>
    b754:	66 0f       	add	r22, r22
    b756:	77 1f       	adc	r23, r23
    b758:	88 1f       	adc	r24, r24
    b75a:	99 1f       	adc	r25, r25
    b75c:	1a f0       	brmi	.+6      	; 0xb764 <__fixunssfsi+0x22>
    b75e:	ba 95       	dec	r27
    b760:	c9 f7       	brne	.-14     	; 0xb754 <__fixunssfsi+0x12>
    b762:	12 c0       	rjmp	.+36     	; 0xb788 <__fixunssfsi+0x46>
    b764:	b1 30       	cpi	r27, 0x01	; 1
    b766:	81 f0       	breq	.+32     	; 0xb788 <__fixunssfsi+0x46>
    b768:	61 d1       	rcall	.+706    	; 0xba2c <__fp_zero>
    b76a:	b1 e0       	ldi	r27, 0x01	; 1
    b76c:	08 95       	ret
    b76e:	5e c1       	rjmp	.+700    	; 0xba2c <__fp_zero>
    b770:	67 2f       	mov	r22, r23
    b772:	78 2f       	mov	r23, r24
    b774:	88 27       	eor	r24, r24
    b776:	b8 5f       	subi	r27, 0xF8	; 248
    b778:	39 f0       	breq	.+14     	; 0xb788 <__fixunssfsi+0x46>
    b77a:	b9 3f       	cpi	r27, 0xF9	; 249
    b77c:	cc f3       	brlt	.-14     	; 0xb770 <__fixunssfsi+0x2e>
    b77e:	86 95       	lsr	r24
    b780:	77 95       	ror	r23
    b782:	67 95       	ror	r22
    b784:	b3 95       	inc	r27
    b786:	d9 f7       	brne	.-10     	; 0xb77e <__fixunssfsi+0x3c>
    b788:	3e f4       	brtc	.+14     	; 0xb798 <__fixunssfsi+0x56>
    b78a:	90 95       	com	r25
    b78c:	80 95       	com	r24
    b78e:	70 95       	com	r23
    b790:	61 95       	neg	r22
    b792:	7f 4f       	sbci	r23, 0xFF	; 255
    b794:	8f 4f       	sbci	r24, 0xFF	; 255
    b796:	9f 4f       	sbci	r25, 0xFF	; 255
    b798:	08 95       	ret

0000b79a <__floatunsisf>:
    b79a:	e8 94       	clt
    b79c:	09 c0       	rjmp	.+18     	; 0xb7b0 <__floatsisf+0x12>

0000b79e <__floatsisf>:
    b79e:	97 fb       	bst	r25, 7
    b7a0:	3e f4       	brtc	.+14     	; 0xb7b0 <__floatsisf+0x12>
    b7a2:	90 95       	com	r25
    b7a4:	80 95       	com	r24
    b7a6:	70 95       	com	r23
    b7a8:	61 95       	neg	r22
    b7aa:	7f 4f       	sbci	r23, 0xFF	; 255
    b7ac:	8f 4f       	sbci	r24, 0xFF	; 255
    b7ae:	9f 4f       	sbci	r25, 0xFF	; 255
    b7b0:	99 23       	and	r25, r25
    b7b2:	a9 f0       	breq	.+42     	; 0xb7de <__floatsisf+0x40>
    b7b4:	f9 2f       	mov	r31, r25
    b7b6:	96 e9       	ldi	r25, 0x96	; 150
    b7b8:	bb 27       	eor	r27, r27
    b7ba:	93 95       	inc	r25
    b7bc:	f6 95       	lsr	r31
    b7be:	87 95       	ror	r24
    b7c0:	77 95       	ror	r23
    b7c2:	67 95       	ror	r22
    b7c4:	b7 95       	ror	r27
    b7c6:	f1 11       	cpse	r31, r1
    b7c8:	f8 cf       	rjmp	.-16     	; 0xb7ba <__floatsisf+0x1c>
    b7ca:	fa f4       	brpl	.+62     	; 0xb80a <__floatsisf+0x6c>
    b7cc:	bb 0f       	add	r27, r27
    b7ce:	11 f4       	brne	.+4      	; 0xb7d4 <__floatsisf+0x36>
    b7d0:	60 ff       	sbrs	r22, 0
    b7d2:	1b c0       	rjmp	.+54     	; 0xb80a <__floatsisf+0x6c>
    b7d4:	6f 5f       	subi	r22, 0xFF	; 255
    b7d6:	7f 4f       	sbci	r23, 0xFF	; 255
    b7d8:	8f 4f       	sbci	r24, 0xFF	; 255
    b7da:	9f 4f       	sbci	r25, 0xFF	; 255
    b7dc:	16 c0       	rjmp	.+44     	; 0xb80a <__floatsisf+0x6c>
    b7de:	88 23       	and	r24, r24
    b7e0:	11 f0       	breq	.+4      	; 0xb7e6 <__floatsisf+0x48>
    b7e2:	96 e9       	ldi	r25, 0x96	; 150
    b7e4:	11 c0       	rjmp	.+34     	; 0xb808 <__floatsisf+0x6a>
    b7e6:	77 23       	and	r23, r23
    b7e8:	21 f0       	breq	.+8      	; 0xb7f2 <__floatsisf+0x54>
    b7ea:	9e e8       	ldi	r25, 0x8E	; 142
    b7ec:	87 2f       	mov	r24, r23
    b7ee:	76 2f       	mov	r23, r22
    b7f0:	05 c0       	rjmp	.+10     	; 0xb7fc <__floatsisf+0x5e>
    b7f2:	66 23       	and	r22, r22
    b7f4:	71 f0       	breq	.+28     	; 0xb812 <__floatsisf+0x74>
    b7f6:	96 e8       	ldi	r25, 0x86	; 134
    b7f8:	86 2f       	mov	r24, r22
    b7fa:	70 e0       	ldi	r23, 0x00	; 0
    b7fc:	60 e0       	ldi	r22, 0x00	; 0
    b7fe:	2a f0       	brmi	.+10     	; 0xb80a <__floatsisf+0x6c>
    b800:	9a 95       	dec	r25
    b802:	66 0f       	add	r22, r22
    b804:	77 1f       	adc	r23, r23
    b806:	88 1f       	adc	r24, r24
    b808:	da f7       	brpl	.-10     	; 0xb800 <__floatsisf+0x62>
    b80a:	88 0f       	add	r24, r24
    b80c:	96 95       	lsr	r25
    b80e:	87 95       	ror	r24
    b810:	97 f9       	bld	r25, 7
    b812:	08 95       	ret

0000b814 <__fp_cmp>:
    b814:	99 0f       	add	r25, r25
    b816:	00 08       	sbc	r0, r0
    b818:	55 0f       	add	r21, r21
    b81a:	aa 0b       	sbc	r26, r26
    b81c:	e0 e8       	ldi	r30, 0x80	; 128
    b81e:	fe ef       	ldi	r31, 0xFE	; 254
    b820:	16 16       	cp	r1, r22
    b822:	17 06       	cpc	r1, r23
    b824:	e8 07       	cpc	r30, r24
    b826:	f9 07       	cpc	r31, r25
    b828:	c0 f0       	brcs	.+48     	; 0xb85a <__fp_cmp+0x46>
    b82a:	12 16       	cp	r1, r18
    b82c:	13 06       	cpc	r1, r19
    b82e:	e4 07       	cpc	r30, r20
    b830:	f5 07       	cpc	r31, r21
    b832:	98 f0       	brcs	.+38     	; 0xb85a <__fp_cmp+0x46>
    b834:	62 1b       	sub	r22, r18
    b836:	73 0b       	sbc	r23, r19
    b838:	84 0b       	sbc	r24, r20
    b83a:	95 0b       	sbc	r25, r21
    b83c:	39 f4       	brne	.+14     	; 0xb84c <__fp_cmp+0x38>
    b83e:	0a 26       	eor	r0, r26
    b840:	61 f0       	breq	.+24     	; 0xb85a <__fp_cmp+0x46>
    b842:	23 2b       	or	r18, r19
    b844:	24 2b       	or	r18, r20
    b846:	25 2b       	or	r18, r21
    b848:	21 f4       	brne	.+8      	; 0xb852 <__fp_cmp+0x3e>
    b84a:	08 95       	ret
    b84c:	0a 26       	eor	r0, r26
    b84e:	09 f4       	brne	.+2      	; 0xb852 <__fp_cmp+0x3e>
    b850:	a1 40       	sbci	r26, 0x01	; 1
    b852:	a6 95       	lsr	r26
    b854:	8f ef       	ldi	r24, 0xFF	; 255
    b856:	81 1d       	adc	r24, r1
    b858:	81 1d       	adc	r24, r1
    b85a:	08 95       	ret

0000b85c <__fp_inf>:
    b85c:	97 f9       	bld	r25, 7
    b85e:	9f 67       	ori	r25, 0x7F	; 127
    b860:	80 e8       	ldi	r24, 0x80	; 128
    b862:	70 e0       	ldi	r23, 0x00	; 0
    b864:	60 e0       	ldi	r22, 0x00	; 0
    b866:	08 95       	ret

0000b868 <__fp_mintl>:
    b868:	88 23       	and	r24, r24
    b86a:	71 f4       	brne	.+28     	; 0xb888 <__fp_mintl+0x20>
    b86c:	77 23       	and	r23, r23
    b86e:	21 f0       	breq	.+8      	; 0xb878 <__fp_mintl+0x10>
    b870:	98 50       	subi	r25, 0x08	; 8
    b872:	87 2b       	or	r24, r23
    b874:	76 2f       	mov	r23, r22
    b876:	07 c0       	rjmp	.+14     	; 0xb886 <__fp_mintl+0x1e>
    b878:	66 23       	and	r22, r22
    b87a:	11 f4       	brne	.+4      	; 0xb880 <__fp_mintl+0x18>
    b87c:	99 27       	eor	r25, r25
    b87e:	0d c0       	rjmp	.+26     	; 0xb89a <__fp_mintl+0x32>
    b880:	90 51       	subi	r25, 0x10	; 16
    b882:	86 2b       	or	r24, r22
    b884:	70 e0       	ldi	r23, 0x00	; 0
    b886:	60 e0       	ldi	r22, 0x00	; 0
    b888:	2a f0       	brmi	.+10     	; 0xb894 <__fp_mintl+0x2c>
    b88a:	9a 95       	dec	r25
    b88c:	66 0f       	add	r22, r22
    b88e:	77 1f       	adc	r23, r23
    b890:	88 1f       	adc	r24, r24
    b892:	da f7       	brpl	.-10     	; 0xb88a <__fp_mintl+0x22>
    b894:	88 0f       	add	r24, r24
    b896:	96 95       	lsr	r25
    b898:	87 95       	ror	r24
    b89a:	97 f9       	bld	r25, 7
    b89c:	08 95       	ret

0000b89e <__fp_mpack>:
    b89e:	9f 3f       	cpi	r25, 0xFF	; 255
    b8a0:	31 f0       	breq	.+12     	; 0xb8ae <__fp_mpack_finite+0xc>

0000b8a2 <__fp_mpack_finite>:
    b8a2:	91 50       	subi	r25, 0x01	; 1
    b8a4:	20 f4       	brcc	.+8      	; 0xb8ae <__fp_mpack_finite+0xc>
    b8a6:	87 95       	ror	r24
    b8a8:	77 95       	ror	r23
    b8aa:	67 95       	ror	r22
    b8ac:	b7 95       	ror	r27
    b8ae:	88 0f       	add	r24, r24
    b8b0:	91 1d       	adc	r25, r1
    b8b2:	96 95       	lsr	r25
    b8b4:	87 95       	ror	r24
    b8b6:	97 f9       	bld	r25, 7
    b8b8:	08 95       	ret

0000b8ba <__fp_nan>:
    b8ba:	9f ef       	ldi	r25, 0xFF	; 255
    b8bc:	80 ec       	ldi	r24, 0xC0	; 192
    b8be:	08 95       	ret

0000b8c0 <__fp_powser>:
    b8c0:	df 93       	push	r29
    b8c2:	cf 93       	push	r28
    b8c4:	1f 93       	push	r17
    b8c6:	0f 93       	push	r16
    b8c8:	ff 92       	push	r15
    b8ca:	ef 92       	push	r14
    b8cc:	df 92       	push	r13
    b8ce:	7b 01       	movw	r14, r22
    b8d0:	8c 01       	movw	r16, r24
    b8d2:	68 94       	set
    b8d4:	05 c0       	rjmp	.+10     	; 0xb8e0 <__fp_powser+0x20>
    b8d6:	da 2e       	mov	r13, r26
    b8d8:	ef 01       	movw	r28, r30
    b8da:	8d d1       	rcall	.+794    	; 0xbbf6 <__mulsf3x>
    b8dc:	fe 01       	movw	r30, r28
    b8de:	e8 94       	clt
    b8e0:	a5 91       	lpm	r26, Z+
    b8e2:	25 91       	lpm	r18, Z+
    b8e4:	35 91       	lpm	r19, Z+
    b8e6:	45 91       	lpm	r20, Z+
    b8e8:	55 91       	lpm	r21, Z+
    b8ea:	ae f3       	brts	.-22     	; 0xb8d6 <__fp_powser+0x16>
    b8ec:	ef 01       	movw	r28, r30
    b8ee:	27 de       	rcall	.-946    	; 0xb53e <__addsf3x>
    b8f0:	fe 01       	movw	r30, r28
    b8f2:	97 01       	movw	r18, r14
    b8f4:	a8 01       	movw	r20, r16
    b8f6:	da 94       	dec	r13
    b8f8:	79 f7       	brne	.-34     	; 0xb8d8 <__fp_powser+0x18>
    b8fa:	df 90       	pop	r13
    b8fc:	ef 90       	pop	r14
    b8fe:	ff 90       	pop	r15
    b900:	0f 91       	pop	r16
    b902:	1f 91       	pop	r17
    b904:	cf 91       	pop	r28
    b906:	df 91       	pop	r29
    b908:	08 95       	ret

0000b90a <__fp_pscA>:
    b90a:	00 24       	eor	r0, r0
    b90c:	0a 94       	dec	r0
    b90e:	16 16       	cp	r1, r22
    b910:	17 06       	cpc	r1, r23
    b912:	18 06       	cpc	r1, r24
    b914:	09 06       	cpc	r0, r25
    b916:	08 95       	ret

0000b918 <__fp_pscB>:
    b918:	00 24       	eor	r0, r0
    b91a:	0a 94       	dec	r0
    b91c:	12 16       	cp	r1, r18
    b91e:	13 06       	cpc	r1, r19
    b920:	14 06       	cpc	r1, r20
    b922:	05 06       	cpc	r0, r21
    b924:	08 95       	ret
    b926:	c9 cf       	rjmp	.-110    	; 0xb8ba <__fp_nan>

0000b928 <__fp_rempio2>:
    b928:	50 d0       	rcall	.+160    	; 0xb9ca <__fp_splitA>
    b92a:	e8 f3       	brcs	.-6      	; 0xb926 <__fp_pscB+0xe>
    b92c:	e8 94       	clt
    b92e:	e0 e0       	ldi	r30, 0x00	; 0
    b930:	bb 27       	eor	r27, r27
    b932:	9f 57       	subi	r25, 0x7F	; 127
    b934:	f0 f0       	brcs	.+60     	; 0xb972 <__fp_rempio2+0x4a>
    b936:	2a ed       	ldi	r18, 0xDA	; 218
    b938:	3f e0       	ldi	r19, 0x0F	; 15
    b93a:	49 ec       	ldi	r20, 0xC9	; 201
    b93c:	06 c0       	rjmp	.+12     	; 0xb94a <__fp_rempio2+0x22>
    b93e:	ee 0f       	add	r30, r30
    b940:	bb 0f       	add	r27, r27
    b942:	66 1f       	adc	r22, r22
    b944:	77 1f       	adc	r23, r23
    b946:	88 1f       	adc	r24, r24
    b948:	28 f0       	brcs	.+10     	; 0xb954 <__fp_rempio2+0x2c>
    b94a:	b2 3a       	cpi	r27, 0xA2	; 162
    b94c:	62 07       	cpc	r22, r18
    b94e:	73 07       	cpc	r23, r19
    b950:	84 07       	cpc	r24, r20
    b952:	28 f0       	brcs	.+10     	; 0xb95e <__fp_rempio2+0x36>
    b954:	b2 5a       	subi	r27, 0xA2	; 162
    b956:	62 0b       	sbc	r22, r18
    b958:	73 0b       	sbc	r23, r19
    b95a:	84 0b       	sbc	r24, r20
    b95c:	e3 95       	inc	r30
    b95e:	9a 95       	dec	r25
    b960:	72 f7       	brpl	.-36     	; 0xb93e <__fp_rempio2+0x16>
    b962:	80 38       	cpi	r24, 0x80	; 128
    b964:	30 f4       	brcc	.+12     	; 0xb972 <__fp_rempio2+0x4a>
    b966:	9a 95       	dec	r25
    b968:	bb 0f       	add	r27, r27
    b96a:	66 1f       	adc	r22, r22
    b96c:	77 1f       	adc	r23, r23
    b96e:	88 1f       	adc	r24, r24
    b970:	d2 f7       	brpl	.-12     	; 0xb966 <__fp_rempio2+0x3e>
    b972:	90 48       	sbci	r25, 0x80	; 128
    b974:	96 cf       	rjmp	.-212    	; 0xb8a2 <__fp_mpack_finite>

0000b976 <__fp_round>:
    b976:	09 2e       	mov	r0, r25
    b978:	03 94       	inc	r0
    b97a:	00 0c       	add	r0, r0
    b97c:	11 f4       	brne	.+4      	; 0xb982 <__fp_round+0xc>
    b97e:	88 23       	and	r24, r24
    b980:	52 f0       	brmi	.+20     	; 0xb996 <__fp_round+0x20>
    b982:	bb 0f       	add	r27, r27
    b984:	40 f4       	brcc	.+16     	; 0xb996 <__fp_round+0x20>
    b986:	bf 2b       	or	r27, r31
    b988:	11 f4       	brne	.+4      	; 0xb98e <__fp_round+0x18>
    b98a:	60 ff       	sbrs	r22, 0
    b98c:	04 c0       	rjmp	.+8      	; 0xb996 <__fp_round+0x20>
    b98e:	6f 5f       	subi	r22, 0xFF	; 255
    b990:	7f 4f       	sbci	r23, 0xFF	; 255
    b992:	8f 4f       	sbci	r24, 0xFF	; 255
    b994:	9f 4f       	sbci	r25, 0xFF	; 255
    b996:	08 95       	ret

0000b998 <__fp_sinus>:
    b998:	ef 93       	push	r30
    b99a:	e0 ff       	sbrs	r30, 0
    b99c:	06 c0       	rjmp	.+12     	; 0xb9aa <__fp_sinus+0x12>
    b99e:	a2 ea       	ldi	r26, 0xA2	; 162
    b9a0:	2a ed       	ldi	r18, 0xDA	; 218
    b9a2:	3f e0       	ldi	r19, 0x0F	; 15
    b9a4:	49 ec       	ldi	r20, 0xC9	; 201
    b9a6:	5f eb       	ldi	r21, 0xBF	; 191
    b9a8:	ca dd       	rcall	.-1132   	; 0xb53e <__addsf3x>
    b9aa:	e5 df       	rcall	.-54     	; 0xb976 <__fp_round>
    b9ac:	0f 90       	pop	r0
    b9ae:	03 94       	inc	r0
    b9b0:	01 fc       	sbrc	r0, 1
    b9b2:	90 58       	subi	r25, 0x80	; 128
    b9b4:	e5 e1       	ldi	r30, 0x15	; 21
    b9b6:	f2 e0       	ldi	r31, 0x02	; 2
    b9b8:	d2 c1       	rjmp	.+932    	; 0xbd5e <__fp_powsodd>

0000b9ba <__fp_split3>:
    b9ba:	57 fd       	sbrc	r21, 7
    b9bc:	90 58       	subi	r25, 0x80	; 128
    b9be:	44 0f       	add	r20, r20
    b9c0:	55 1f       	adc	r21, r21
    b9c2:	59 f0       	breq	.+22     	; 0xb9da <__fp_splitA+0x10>
    b9c4:	5f 3f       	cpi	r21, 0xFF	; 255
    b9c6:	71 f0       	breq	.+28     	; 0xb9e4 <__fp_splitA+0x1a>
    b9c8:	47 95       	ror	r20

0000b9ca <__fp_splitA>:
    b9ca:	88 0f       	add	r24, r24
    b9cc:	97 fb       	bst	r25, 7
    b9ce:	99 1f       	adc	r25, r25
    b9d0:	61 f0       	breq	.+24     	; 0xb9ea <__fp_splitA+0x20>
    b9d2:	9f 3f       	cpi	r25, 0xFF	; 255
    b9d4:	79 f0       	breq	.+30     	; 0xb9f4 <__fp_splitA+0x2a>
    b9d6:	87 95       	ror	r24
    b9d8:	08 95       	ret
    b9da:	12 16       	cp	r1, r18
    b9dc:	13 06       	cpc	r1, r19
    b9de:	14 06       	cpc	r1, r20
    b9e0:	55 1f       	adc	r21, r21
    b9e2:	f2 cf       	rjmp	.-28     	; 0xb9c8 <__fp_split3+0xe>
    b9e4:	46 95       	lsr	r20
    b9e6:	f1 df       	rcall	.-30     	; 0xb9ca <__fp_splitA>
    b9e8:	08 c0       	rjmp	.+16     	; 0xb9fa <__fp_splitA+0x30>
    b9ea:	16 16       	cp	r1, r22
    b9ec:	17 06       	cpc	r1, r23
    b9ee:	18 06       	cpc	r1, r24
    b9f0:	99 1f       	adc	r25, r25
    b9f2:	f1 cf       	rjmp	.-30     	; 0xb9d6 <__fp_splitA+0xc>
    b9f4:	86 95       	lsr	r24
    b9f6:	71 05       	cpc	r23, r1
    b9f8:	61 05       	cpc	r22, r1
    b9fa:	08 94       	sec
    b9fc:	08 95       	ret

0000b9fe <__fp_trunc>:
    b9fe:	e5 df       	rcall	.-54     	; 0xb9ca <__fp_splitA>
    ba00:	a0 f0       	brcs	.+40     	; 0xba2a <__fp_trunc+0x2c>
    ba02:	be e7       	ldi	r27, 0x7E	; 126
    ba04:	b9 17       	cp	r27, r25
    ba06:	88 f4       	brcc	.+34     	; 0xba2a <__fp_trunc+0x2c>
    ba08:	bb 27       	eor	r27, r27
    ba0a:	9f 38       	cpi	r25, 0x8F	; 143
    ba0c:	60 f4       	brcc	.+24     	; 0xba26 <__fp_trunc+0x28>
    ba0e:	16 16       	cp	r1, r22
    ba10:	b1 1d       	adc	r27, r1
    ba12:	67 2f       	mov	r22, r23
    ba14:	78 2f       	mov	r23, r24
    ba16:	88 27       	eor	r24, r24
    ba18:	98 5f       	subi	r25, 0xF8	; 248
    ba1a:	f7 cf       	rjmp	.-18     	; 0xba0a <__fp_trunc+0xc>
    ba1c:	86 95       	lsr	r24
    ba1e:	77 95       	ror	r23
    ba20:	67 95       	ror	r22
    ba22:	b1 1d       	adc	r27, r1
    ba24:	93 95       	inc	r25
    ba26:	96 39       	cpi	r25, 0x96	; 150
    ba28:	c8 f3       	brcs	.-14     	; 0xba1c <__fp_trunc+0x1e>
    ba2a:	08 95       	ret

0000ba2c <__fp_zero>:
    ba2c:	e8 94       	clt

0000ba2e <__fp_szero>:
    ba2e:	bb 27       	eor	r27, r27
    ba30:	66 27       	eor	r22, r22
    ba32:	77 27       	eor	r23, r23
    ba34:	cb 01       	movw	r24, r22
    ba36:	97 f9       	bld	r25, 7
    ba38:	08 95       	ret

0000ba3a <__gesf2>:
    ba3a:	ec de       	rcall	.-552    	; 0xb814 <__fp_cmp>
    ba3c:	08 f4       	brcc	.+2      	; 0xba40 <__gesf2+0x6>
    ba3e:	8f ef       	ldi	r24, 0xFF	; 255
    ba40:	08 95       	ret
    ba42:	63 df       	rcall	.-314    	; 0xb90a <__fp_pscA>
    ba44:	19 f0       	breq	.+6      	; 0xba4c <__gesf2+0x12>
    ba46:	68 df       	rcall	.-304    	; 0xb918 <__fp_pscB>
    ba48:	09 f0       	breq	.+2      	; 0xba4c <__gesf2+0x12>
    ba4a:	37 cf       	rjmp	.-402    	; 0xb8ba <__fp_nan>
    ba4c:	07 cf       	rjmp	.-498    	; 0xb85c <__fp_inf>
    ba4e:	b9 01       	movw	r22, r18
    ba50:	ca 01       	movw	r24, r20
    ba52:	25 cf       	rjmp	.-438    	; 0xb89e <__fp_mpack>

0000ba54 <hypot>:
    ba54:	9f 77       	andi	r25, 0x7F	; 127
    ba56:	5f 77       	andi	r21, 0x7F	; 127
    ba58:	b0 df       	rcall	.-160    	; 0xb9ba <__fp_split3>
    ba5a:	98 f3       	brcs	.-26     	; 0xba42 <__gesf2+0x8>
    ba5c:	99 23       	and	r25, r25
    ba5e:	b9 f3       	breq	.-18     	; 0xba4e <__gesf2+0x14>
    ba60:	55 23       	and	r21, r21
    ba62:	b9 f3       	breq	.-18     	; 0xba52 <__gesf2+0x18>
    ba64:	ff 27       	eor	r31, r31
    ba66:	95 17       	cp	r25, r21
    ba68:	58 f4       	brcc	.+22     	; 0xba80 <hypot+0x2c>
    ba6a:	e5 2f       	mov	r30, r21
    ba6c:	e9 1b       	sub	r30, r25
    ba6e:	ed 30       	cpi	r30, 0x0D	; 13
    ba70:	70 f7       	brcc	.-36     	; 0xba4e <__gesf2+0x14>
    ba72:	5e 3b       	cpi	r21, 0xBE	; 190
    ba74:	10 f0       	brcs	.+4      	; 0xba7a <hypot+0x26>
    ba76:	f1 e4       	ldi	r31, 0x41	; 65
    ba78:	1c c0       	rjmp	.+56     	; 0xbab2 <hypot+0x5e>
    ba7a:	90 34       	cpi	r25, 0x40	; 64
    ba7c:	e0 f4       	brcc	.+56     	; 0xbab6 <hypot+0x62>
    ba7e:	0a c0       	rjmp	.+20     	; 0xba94 <hypot+0x40>
    ba80:	e9 2f       	mov	r30, r25
    ba82:	e5 1b       	sub	r30, r21
    ba84:	ed 30       	cpi	r30, 0x0D	; 13
    ba86:	28 f7       	brcc	.-54     	; 0xba52 <__gesf2+0x18>
    ba88:	9e 3b       	cpi	r25, 0xBE	; 190
    ba8a:	10 f0       	brcs	.+4      	; 0xba90 <hypot+0x3c>
    ba8c:	f1 e4       	ldi	r31, 0x41	; 65
    ba8e:	11 c0       	rjmp	.+34     	; 0xbab2 <hypot+0x5e>
    ba90:	50 34       	cpi	r21, 0x40	; 64
    ba92:	88 f4       	brcc	.+34     	; 0xbab6 <hypot+0x62>
    ba94:	f9 ea       	ldi	r31, 0xA9	; 169
    ba96:	88 23       	and	r24, r24
    ba98:	2a f0       	brmi	.+10     	; 0xbaa4 <hypot+0x50>
    ba9a:	9a 95       	dec	r25
    ba9c:	66 0f       	add	r22, r22
    ba9e:	77 1f       	adc	r23, r23
    baa0:	88 1f       	adc	r24, r24
    baa2:	da f7       	brpl	.-10     	; 0xba9a <hypot+0x46>
    baa4:	44 23       	and	r20, r20
    baa6:	2a f0       	brmi	.+10     	; 0xbab2 <hypot+0x5e>
    baa8:	5a 95       	dec	r21
    baaa:	22 0f       	add	r18, r18
    baac:	33 1f       	adc	r19, r19
    baae:	44 1f       	adc	r20, r20
    bab0:	da f7       	brpl	.-10     	; 0xbaa8 <hypot+0x54>
    bab2:	9f 1b       	sub	r25, r31
    bab4:	5f 1b       	sub	r21, r31
    bab6:	ff 93       	push	r31
    bab8:	1f 93       	push	r17
    baba:	0f 93       	push	r16
    babc:	ff 92       	push	r15
    babe:	ef 92       	push	r14
    bac0:	79 01       	movw	r14, r18
    bac2:	8a 01       	movw	r16, r20
    bac4:	bb 27       	eor	r27, r27
    bac6:	ab 2f       	mov	r26, r27
    bac8:	9b 01       	movw	r18, r22
    baca:	ac 01       	movw	r20, r24
    bacc:	96 d0       	rcall	.+300    	; 0xbbfa <__mulsf3_pse>
    bace:	97 01       	movw	r18, r14
    bad0:	a8 01       	movw	r20, r16
    bad2:	bf 93       	push	r27
    bad4:	7b 01       	movw	r14, r22
    bad6:	8c 01       	movw	r16, r24
    bad8:	aa 27       	eor	r26, r26
    bada:	ba 2f       	mov	r27, r26
    badc:	b9 01       	movw	r22, r18
    bade:	ca 01       	movw	r24, r20
    bae0:	8c d0       	rcall	.+280    	; 0xbbfa <__mulsf3_pse>
    bae2:	af 91       	pop	r26
    bae4:	97 01       	movw	r18, r14
    bae6:	a8 01       	movw	r20, r16
    bae8:	ef 90       	pop	r14
    baea:	ff 90       	pop	r15
    baec:	0f 91       	pop	r16
    baee:	1f 91       	pop	r17
    baf0:	26 dd       	rcall	.-1460   	; 0xb53e <__addsf3x>
    baf2:	41 df       	rcall	.-382    	; 0xb976 <__fp_round>
    baf4:	e1 d0       	rcall	.+450    	; 0xbcb8 <sqrt>
    baf6:	4f 91       	pop	r20
    baf8:	40 ff       	sbrs	r20, 0
    bafa:	08 95       	ret
    bafc:	55 27       	eor	r21, r21
    bafe:	47 fd       	sbrc	r20, 7
    bb00:	50 95       	com	r21
    bb02:	09 c0       	rjmp	.+18     	; 0xbb16 <ldexp>

0000bb04 <inverse>:
    bb04:	9b 01       	movw	r18, r22
    bb06:	ac 01       	movw	r20, r24
    bb08:	60 e0       	ldi	r22, 0x00	; 0
    bb0a:	70 e0       	ldi	r23, 0x00	; 0
    bb0c:	80 e8       	ldi	r24, 0x80	; 128
    bb0e:	9f e3       	ldi	r25, 0x3F	; 63
    bb10:	ab cd       	rjmp	.-1194   	; 0xb668 <__divsf3>
    bb12:	a4 ce       	rjmp	.-696    	; 0xb85c <__fp_inf>
    bb14:	c4 ce       	rjmp	.-632    	; 0xb89e <__fp_mpack>

0000bb16 <ldexp>:
    bb16:	59 df       	rcall	.-334    	; 0xb9ca <__fp_splitA>
    bb18:	e8 f3       	brcs	.-6      	; 0xbb14 <inverse+0x10>
    bb1a:	99 23       	and	r25, r25
    bb1c:	d9 f3       	breq	.-10     	; 0xbb14 <inverse+0x10>
    bb1e:	94 0f       	add	r25, r20
    bb20:	51 1d       	adc	r21, r1
    bb22:	bb f3       	brvs	.-18     	; 0xbb12 <inverse+0xe>
    bb24:	91 50       	subi	r25, 0x01	; 1
    bb26:	50 40       	sbci	r21, 0x00	; 0
    bb28:	94 f0       	brlt	.+36     	; 0xbb4e <ldexp+0x38>
    bb2a:	59 f0       	breq	.+22     	; 0xbb42 <ldexp+0x2c>
    bb2c:	88 23       	and	r24, r24
    bb2e:	32 f0       	brmi	.+12     	; 0xbb3c <ldexp+0x26>
    bb30:	66 0f       	add	r22, r22
    bb32:	77 1f       	adc	r23, r23
    bb34:	88 1f       	adc	r24, r24
    bb36:	91 50       	subi	r25, 0x01	; 1
    bb38:	50 40       	sbci	r21, 0x00	; 0
    bb3a:	c1 f7       	brne	.-16     	; 0xbb2c <ldexp+0x16>
    bb3c:	9e 3f       	cpi	r25, 0xFE	; 254
    bb3e:	51 05       	cpc	r21, r1
    bb40:	44 f7       	brge	.-48     	; 0xbb12 <inverse+0xe>
    bb42:	88 0f       	add	r24, r24
    bb44:	91 1d       	adc	r25, r1
    bb46:	96 95       	lsr	r25
    bb48:	87 95       	ror	r24
    bb4a:	97 f9       	bld	r25, 7
    bb4c:	08 95       	ret
    bb4e:	5f 3f       	cpi	r21, 0xFF	; 255
    bb50:	ac f0       	brlt	.+42     	; 0xbb7c <ldexp+0x66>
    bb52:	98 3e       	cpi	r25, 0xE8	; 232
    bb54:	9c f0       	brlt	.+38     	; 0xbb7c <ldexp+0x66>
    bb56:	bb 27       	eor	r27, r27
    bb58:	86 95       	lsr	r24
    bb5a:	77 95       	ror	r23
    bb5c:	67 95       	ror	r22
    bb5e:	b7 95       	ror	r27
    bb60:	08 f4       	brcc	.+2      	; 0xbb64 <ldexp+0x4e>
    bb62:	b1 60       	ori	r27, 0x01	; 1
    bb64:	93 95       	inc	r25
    bb66:	c1 f7       	brne	.-16     	; 0xbb58 <ldexp+0x42>
    bb68:	bb 0f       	add	r27, r27
    bb6a:	58 f7       	brcc	.-42     	; 0xbb42 <ldexp+0x2c>
    bb6c:	11 f4       	brne	.+4      	; 0xbb72 <ldexp+0x5c>
    bb6e:	60 ff       	sbrs	r22, 0
    bb70:	e8 cf       	rjmp	.-48     	; 0xbb42 <ldexp+0x2c>
    bb72:	6f 5f       	subi	r22, 0xFF	; 255
    bb74:	7f 4f       	sbci	r23, 0xFF	; 255
    bb76:	8f 4f       	sbci	r24, 0xFF	; 255
    bb78:	9f 4f       	sbci	r25, 0xFF	; 255
    bb7a:	e3 cf       	rjmp	.-58     	; 0xbb42 <ldexp+0x2c>
    bb7c:	58 cf       	rjmp	.-336    	; 0xba2e <__fp_szero>

0000bb7e <lround>:
    bb7e:	25 df       	rcall	.-438    	; 0xb9ca <__fp_splitA>
    bb80:	58 f1       	brcs	.+86     	; 0xbbd8 <lround+0x5a>
    bb82:	9e 57       	subi	r25, 0x7E	; 126
    bb84:	58 f1       	brcs	.+86     	; 0xbbdc <lround+0x5e>
    bb86:	98 51       	subi	r25, 0x18	; 24
    bb88:	a0 f0       	brcs	.+40     	; 0xbbb2 <lround+0x34>
    bb8a:	e9 f0       	breq	.+58     	; 0xbbc6 <lround+0x48>
    bb8c:	98 30       	cpi	r25, 0x08	; 8
    bb8e:	20 f5       	brcc	.+72     	; 0xbbd8 <lround+0x5a>
    bb90:	09 2e       	mov	r0, r25
    bb92:	99 27       	eor	r25, r25
    bb94:	66 0f       	add	r22, r22
    bb96:	77 1f       	adc	r23, r23
    bb98:	88 1f       	adc	r24, r24
    bb9a:	99 1f       	adc	r25, r25
    bb9c:	0a 94       	dec	r0
    bb9e:	d1 f7       	brne	.-12     	; 0xbb94 <lround+0x16>
    bba0:	12 c0       	rjmp	.+36     	; 0xbbc6 <lround+0x48>
    bba2:	06 2e       	mov	r0, r22
    bba4:	67 2f       	mov	r22, r23
    bba6:	78 2f       	mov	r23, r24
    bba8:	88 27       	eor	r24, r24
    bbaa:	98 5f       	subi	r25, 0xF8	; 248
    bbac:	11 f4       	brne	.+4      	; 0xbbb2 <lround+0x34>
    bbae:	00 0c       	add	r0, r0
    bbb0:	07 c0       	rjmp	.+14     	; 0xbbc0 <lround+0x42>
    bbb2:	99 3f       	cpi	r25, 0xF9	; 249
    bbb4:	b4 f3       	brlt	.-20     	; 0xbba2 <lround+0x24>
    bbb6:	86 95       	lsr	r24
    bbb8:	77 95       	ror	r23
    bbba:	67 95       	ror	r22
    bbbc:	93 95       	inc	r25
    bbbe:	d9 f7       	brne	.-10     	; 0xbbb6 <lround+0x38>
    bbc0:	61 1d       	adc	r22, r1
    bbc2:	71 1d       	adc	r23, r1
    bbc4:	81 1d       	adc	r24, r1
    bbc6:	3e f4       	brtc	.+14     	; 0xbbd6 <lround+0x58>
    bbc8:	90 95       	com	r25
    bbca:	80 95       	com	r24
    bbcc:	70 95       	com	r23
    bbce:	61 95       	neg	r22
    bbd0:	7f 4f       	sbci	r23, 0xFF	; 255
    bbd2:	8f 4f       	sbci	r24, 0xFF	; 255
    bbd4:	9f 4f       	sbci	r25, 0xFF	; 255
    bbd6:	08 95       	ret
    bbd8:	68 94       	set
    bbda:	29 cf       	rjmp	.-430    	; 0xba2e <__fp_szero>
    bbdc:	27 cf       	rjmp	.-434    	; 0xba2c <__fp_zero>

0000bbde <__mulsf3>:
    bbde:	0b d0       	rcall	.+22     	; 0xbbf6 <__mulsf3x>
    bbe0:	ca ce       	rjmp	.-620    	; 0xb976 <__fp_round>
    bbe2:	93 de       	rcall	.-730    	; 0xb90a <__fp_pscA>
    bbe4:	28 f0       	brcs	.+10     	; 0xbbf0 <__mulsf3+0x12>
    bbe6:	98 de       	rcall	.-720    	; 0xb918 <__fp_pscB>
    bbe8:	18 f0       	brcs	.+6      	; 0xbbf0 <__mulsf3+0x12>
    bbea:	95 23       	and	r25, r21
    bbec:	09 f0       	breq	.+2      	; 0xbbf0 <__mulsf3+0x12>
    bbee:	36 ce       	rjmp	.-916    	; 0xb85c <__fp_inf>
    bbf0:	64 ce       	rjmp	.-824    	; 0xb8ba <__fp_nan>
    bbf2:	11 24       	eor	r1, r1
    bbf4:	1c cf       	rjmp	.-456    	; 0xba2e <__fp_szero>

0000bbf6 <__mulsf3x>:
    bbf6:	e1 de       	rcall	.-574    	; 0xb9ba <__fp_split3>
    bbf8:	a0 f3       	brcs	.-24     	; 0xbbe2 <__mulsf3+0x4>

0000bbfa <__mulsf3_pse>:
    bbfa:	95 9f       	mul	r25, r21
    bbfc:	d1 f3       	breq	.-12     	; 0xbbf2 <__mulsf3+0x14>
    bbfe:	95 0f       	add	r25, r21
    bc00:	50 e0       	ldi	r21, 0x00	; 0
    bc02:	55 1f       	adc	r21, r21
    bc04:	62 9f       	mul	r22, r18
    bc06:	f0 01       	movw	r30, r0
    bc08:	72 9f       	mul	r23, r18
    bc0a:	bb 27       	eor	r27, r27
    bc0c:	f0 0d       	add	r31, r0
    bc0e:	b1 1d       	adc	r27, r1
    bc10:	63 9f       	mul	r22, r19
    bc12:	aa 27       	eor	r26, r26
    bc14:	f0 0d       	add	r31, r0
    bc16:	b1 1d       	adc	r27, r1
    bc18:	aa 1f       	adc	r26, r26
    bc1a:	64 9f       	mul	r22, r20
    bc1c:	66 27       	eor	r22, r22
    bc1e:	b0 0d       	add	r27, r0
    bc20:	a1 1d       	adc	r26, r1
    bc22:	66 1f       	adc	r22, r22
    bc24:	82 9f       	mul	r24, r18
    bc26:	22 27       	eor	r18, r18
    bc28:	b0 0d       	add	r27, r0
    bc2a:	a1 1d       	adc	r26, r1
    bc2c:	62 1f       	adc	r22, r18
    bc2e:	73 9f       	mul	r23, r19
    bc30:	b0 0d       	add	r27, r0
    bc32:	a1 1d       	adc	r26, r1
    bc34:	62 1f       	adc	r22, r18
    bc36:	83 9f       	mul	r24, r19
    bc38:	a0 0d       	add	r26, r0
    bc3a:	61 1d       	adc	r22, r1
    bc3c:	22 1f       	adc	r18, r18
    bc3e:	74 9f       	mul	r23, r20
    bc40:	33 27       	eor	r19, r19
    bc42:	a0 0d       	add	r26, r0
    bc44:	61 1d       	adc	r22, r1
    bc46:	23 1f       	adc	r18, r19
    bc48:	84 9f       	mul	r24, r20
    bc4a:	60 0d       	add	r22, r0
    bc4c:	21 1d       	adc	r18, r1
    bc4e:	82 2f       	mov	r24, r18
    bc50:	76 2f       	mov	r23, r22
    bc52:	6a 2f       	mov	r22, r26
    bc54:	11 24       	eor	r1, r1
    bc56:	9f 57       	subi	r25, 0x7F	; 127
    bc58:	50 40       	sbci	r21, 0x00	; 0
    bc5a:	8a f0       	brmi	.+34     	; 0xbc7e <__mulsf3_pse+0x84>
    bc5c:	e1 f0       	breq	.+56     	; 0xbc96 <__mulsf3_pse+0x9c>
    bc5e:	88 23       	and	r24, r24
    bc60:	4a f0       	brmi	.+18     	; 0xbc74 <__mulsf3_pse+0x7a>
    bc62:	ee 0f       	add	r30, r30
    bc64:	ff 1f       	adc	r31, r31
    bc66:	bb 1f       	adc	r27, r27
    bc68:	66 1f       	adc	r22, r22
    bc6a:	77 1f       	adc	r23, r23
    bc6c:	88 1f       	adc	r24, r24
    bc6e:	91 50       	subi	r25, 0x01	; 1
    bc70:	50 40       	sbci	r21, 0x00	; 0
    bc72:	a9 f7       	brne	.-22     	; 0xbc5e <__mulsf3_pse+0x64>
    bc74:	9e 3f       	cpi	r25, 0xFE	; 254
    bc76:	51 05       	cpc	r21, r1
    bc78:	70 f0       	brcs	.+28     	; 0xbc96 <__mulsf3_pse+0x9c>
    bc7a:	f0 cd       	rjmp	.-1056   	; 0xb85c <__fp_inf>
    bc7c:	d8 ce       	rjmp	.-592    	; 0xba2e <__fp_szero>
    bc7e:	5f 3f       	cpi	r21, 0xFF	; 255
    bc80:	ec f3       	brlt	.-6      	; 0xbc7c <__mulsf3_pse+0x82>
    bc82:	98 3e       	cpi	r25, 0xE8	; 232
    bc84:	dc f3       	brlt	.-10     	; 0xbc7c <__mulsf3_pse+0x82>
    bc86:	86 95       	lsr	r24
    bc88:	77 95       	ror	r23
    bc8a:	67 95       	ror	r22
    bc8c:	b7 95       	ror	r27
    bc8e:	f7 95       	ror	r31
    bc90:	e7 95       	ror	r30
    bc92:	9f 5f       	subi	r25, 0xFF	; 255
    bc94:	c1 f7       	brne	.-16     	; 0xbc86 <__mulsf3_pse+0x8c>
    bc96:	fe 2b       	or	r31, r30
    bc98:	88 0f       	add	r24, r24
    bc9a:	91 1d       	adc	r25, r1
    bc9c:	96 95       	lsr	r25
    bc9e:	87 95       	ror	r24
    bca0:	97 f9       	bld	r25, 7
    bca2:	08 95       	ret

0000bca4 <sin>:
    bca4:	9f 93       	push	r25
    bca6:	40 de       	rcall	.-896    	; 0xb928 <__fp_rempio2>
    bca8:	0f 90       	pop	r0
    bcaa:	07 fc       	sbrc	r0, 7
    bcac:	ee 5f       	subi	r30, 0xFE	; 254
    bcae:	74 ce       	rjmp	.-792    	; 0xb998 <__fp_sinus>
    bcb0:	11 f4       	brne	.+4      	; 0xbcb6 <sin+0x12>
    bcb2:	0e f4       	brtc	.+2      	; 0xbcb6 <sin+0x12>
    bcb4:	02 ce       	rjmp	.-1020   	; 0xb8ba <__fp_nan>
    bcb6:	f3 cd       	rjmp	.-1050   	; 0xb89e <__fp_mpack>

0000bcb8 <sqrt>:
    bcb8:	88 de       	rcall	.-752    	; 0xb9ca <__fp_splitA>
    bcba:	d0 f3       	brcs	.-12     	; 0xbcb0 <sin+0xc>
    bcbc:	99 23       	and	r25, r25
    bcbe:	d9 f3       	breq	.-10     	; 0xbcb6 <sin+0x12>
    bcc0:	ce f3       	brts	.-14     	; 0xbcb4 <sin+0x10>
    bcc2:	9f 57       	subi	r25, 0x7F	; 127
    bcc4:	55 0b       	sbc	r21, r21
    bcc6:	87 ff       	sbrs	r24, 7
    bcc8:	43 d0       	rcall	.+134    	; 0xbd50 <__fp_norm2>
    bcca:	00 24       	eor	r0, r0
    bccc:	a0 e6       	ldi	r26, 0x60	; 96
    bcce:	40 ea       	ldi	r20, 0xA0	; 160
    bcd0:	90 01       	movw	r18, r0
    bcd2:	80 58       	subi	r24, 0x80	; 128
    bcd4:	56 95       	lsr	r21
    bcd6:	97 95       	ror	r25
    bcd8:	28 f4       	brcc	.+10     	; 0xbce4 <sqrt+0x2c>
    bcda:	80 5c       	subi	r24, 0xC0	; 192
    bcdc:	66 0f       	add	r22, r22
    bcde:	77 1f       	adc	r23, r23
    bce0:	88 1f       	adc	r24, r24
    bce2:	20 f0       	brcs	.+8      	; 0xbcec <sqrt+0x34>
    bce4:	26 17       	cp	r18, r22
    bce6:	37 07       	cpc	r19, r23
    bce8:	48 07       	cpc	r20, r24
    bcea:	30 f4       	brcc	.+12     	; 0xbcf8 <sqrt+0x40>
    bcec:	62 1b       	sub	r22, r18
    bcee:	73 0b       	sbc	r23, r19
    bcf0:	84 0b       	sbc	r24, r20
    bcf2:	20 29       	or	r18, r0
    bcf4:	31 29       	or	r19, r1
    bcf6:	4a 2b       	or	r20, r26
    bcf8:	a6 95       	lsr	r26
    bcfa:	17 94       	ror	r1
    bcfc:	07 94       	ror	r0
    bcfe:	20 25       	eor	r18, r0
    bd00:	31 25       	eor	r19, r1
    bd02:	4a 27       	eor	r20, r26
    bd04:	58 f7       	brcc	.-42     	; 0xbcdc <sqrt+0x24>
    bd06:	66 0f       	add	r22, r22
    bd08:	77 1f       	adc	r23, r23
    bd0a:	88 1f       	adc	r24, r24
    bd0c:	20 f0       	brcs	.+8      	; 0xbd16 <sqrt+0x5e>
    bd0e:	26 17       	cp	r18, r22
    bd10:	37 07       	cpc	r19, r23
    bd12:	48 07       	cpc	r20, r24
    bd14:	30 f4       	brcc	.+12     	; 0xbd22 <sqrt+0x6a>
    bd16:	62 0b       	sbc	r22, r18
    bd18:	73 0b       	sbc	r23, r19
    bd1a:	84 0b       	sbc	r24, r20
    bd1c:	20 0d       	add	r18, r0
    bd1e:	31 1d       	adc	r19, r1
    bd20:	41 1d       	adc	r20, r1
    bd22:	a0 95       	com	r26
    bd24:	81 f7       	brne	.-32     	; 0xbd06 <sqrt+0x4e>
    bd26:	b9 01       	movw	r22, r18
    bd28:	84 2f       	mov	r24, r20
    bd2a:	91 58       	subi	r25, 0x81	; 129
    bd2c:	88 0f       	add	r24, r24
    bd2e:	96 95       	lsr	r25
    bd30:	87 95       	ror	r24
    bd32:	08 95       	ret

0000bd34 <square>:
    bd34:	9b 01       	movw	r18, r22
    bd36:	ac 01       	movw	r20, r24
    bd38:	52 cf       	rjmp	.-348    	; 0xbbde <__mulsf3>

0000bd3a <trunc>:
    bd3a:	61 de       	rcall	.-830    	; 0xb9fe <__fp_trunc>
    bd3c:	20 f0       	brcs	.+8      	; 0xbd46 <trunc+0xc>
    bd3e:	9f 37       	cpi	r25, 0x7F	; 127
    bd40:	08 f4       	brcc	.+2      	; 0xbd44 <trunc+0xa>
    bd42:	75 ce       	rjmp	.-790    	; 0xba2e <__fp_szero>
    bd44:	91 cd       	rjmp	.-1246   	; 0xb868 <__fp_mintl>
    bd46:	ab cd       	rjmp	.-1194   	; 0xb89e <__fp_mpack>

0000bd48 <__unordsf2>:
    bd48:	65 dd       	rcall	.-1334   	; 0xb814 <__fp_cmp>
    bd4a:	88 0b       	sbc	r24, r24
    bd4c:	99 0b       	sbc	r25, r25
    bd4e:	08 95       	ret

0000bd50 <__fp_norm2>:
    bd50:	91 50       	subi	r25, 0x01	; 1
    bd52:	50 40       	sbci	r21, 0x00	; 0
    bd54:	66 0f       	add	r22, r22
    bd56:	77 1f       	adc	r23, r23
    bd58:	88 1f       	adc	r24, r24
    bd5a:	d2 f7       	brpl	.-12     	; 0xbd50 <__fp_norm2>
    bd5c:	08 95       	ret

0000bd5e <__fp_powsodd>:
    bd5e:	9f 93       	push	r25
    bd60:	8f 93       	push	r24
    bd62:	7f 93       	push	r23
    bd64:	6f 93       	push	r22
    bd66:	ff 93       	push	r31
    bd68:	ef 93       	push	r30
    bd6a:	9b 01       	movw	r18, r22
    bd6c:	ac 01       	movw	r20, r24
    bd6e:	37 df       	rcall	.-402    	; 0xbbde <__mulsf3>
    bd70:	ef 91       	pop	r30
    bd72:	ff 91       	pop	r31
    bd74:	a5 dd       	rcall	.-1206   	; 0xb8c0 <__fp_powser>
    bd76:	2f 91       	pop	r18
    bd78:	3f 91       	pop	r19
    bd7a:	4f 91       	pop	r20
    bd7c:	5f 91       	pop	r21
    bd7e:	2f cf       	rjmp	.-418    	; 0xbbde <__mulsf3>

0000bd80 <__mulsi3>:
    bd80:	62 9f       	mul	r22, r18
    bd82:	d0 01       	movw	r26, r0
    bd84:	73 9f       	mul	r23, r19
    bd86:	f0 01       	movw	r30, r0
    bd88:	82 9f       	mul	r24, r18
    bd8a:	e0 0d       	add	r30, r0
    bd8c:	f1 1d       	adc	r31, r1
    bd8e:	64 9f       	mul	r22, r20
    bd90:	e0 0d       	add	r30, r0
    bd92:	f1 1d       	adc	r31, r1
    bd94:	92 9f       	mul	r25, r18
    bd96:	f0 0d       	add	r31, r0
    bd98:	83 9f       	mul	r24, r19
    bd9a:	f0 0d       	add	r31, r0
    bd9c:	74 9f       	mul	r23, r20
    bd9e:	f0 0d       	add	r31, r0
    bda0:	65 9f       	mul	r22, r21
    bda2:	f0 0d       	add	r31, r0
    bda4:	99 27       	eor	r25, r25
    bda6:	72 9f       	mul	r23, r18
    bda8:	b0 0d       	add	r27, r0
    bdaa:	e1 1d       	adc	r30, r1
    bdac:	f9 1f       	adc	r31, r25
    bdae:	63 9f       	mul	r22, r19
    bdb0:	b0 0d       	add	r27, r0
    bdb2:	e1 1d       	adc	r30, r1
    bdb4:	f9 1f       	adc	r31, r25
    bdb6:	bd 01       	movw	r22, r26
    bdb8:	cf 01       	movw	r24, r30
    bdba:	11 24       	eor	r1, r1
    bdbc:	08 95       	ret

0000bdbe <__udivmodsi4>:
    bdbe:	a1 e2       	ldi	r26, 0x21	; 33
    bdc0:	1a 2e       	mov	r1, r26
    bdc2:	aa 1b       	sub	r26, r26
    bdc4:	bb 1b       	sub	r27, r27
    bdc6:	fd 01       	movw	r30, r26
    bdc8:	0d c0       	rjmp	.+26     	; 0xbde4 <__udivmodsi4_ep>

0000bdca <__udivmodsi4_loop>:
    bdca:	aa 1f       	adc	r26, r26
    bdcc:	bb 1f       	adc	r27, r27
    bdce:	ee 1f       	adc	r30, r30
    bdd0:	ff 1f       	adc	r31, r31
    bdd2:	a2 17       	cp	r26, r18
    bdd4:	b3 07       	cpc	r27, r19
    bdd6:	e4 07       	cpc	r30, r20
    bdd8:	f5 07       	cpc	r31, r21
    bdda:	20 f0       	brcs	.+8      	; 0xbde4 <__udivmodsi4_ep>
    bddc:	a2 1b       	sub	r26, r18
    bdde:	b3 0b       	sbc	r27, r19
    bde0:	e4 0b       	sbc	r30, r20
    bde2:	f5 0b       	sbc	r31, r21

0000bde4 <__udivmodsi4_ep>:
    bde4:	66 1f       	adc	r22, r22
    bde6:	77 1f       	adc	r23, r23
    bde8:	88 1f       	adc	r24, r24
    bdea:	99 1f       	adc	r25, r25
    bdec:	1a 94       	dec	r1
    bdee:	69 f7       	brne	.-38     	; 0xbdca <__udivmodsi4_loop>
    bdf0:	60 95       	com	r22
    bdf2:	70 95       	com	r23
    bdf4:	80 95       	com	r24
    bdf6:	90 95       	com	r25
    bdf8:	9b 01       	movw	r18, r22
    bdfa:	ac 01       	movw	r20, r24
    bdfc:	bd 01       	movw	r22, r26
    bdfe:	cf 01       	movw	r24, r30
    be00:	08 95       	ret

0000be02 <__prologue_saves__>:
    be02:	2f 92       	push	r2
    be04:	3f 92       	push	r3
    be06:	4f 92       	push	r4
    be08:	5f 92       	push	r5
    be0a:	6f 92       	push	r6
    be0c:	7f 92       	push	r7
    be0e:	8f 92       	push	r8
    be10:	9f 92       	push	r9
    be12:	af 92       	push	r10
    be14:	bf 92       	push	r11
    be16:	cf 92       	push	r12
    be18:	df 92       	push	r13
    be1a:	ef 92       	push	r14
    be1c:	ff 92       	push	r15
    be1e:	0f 93       	push	r16
    be20:	1f 93       	push	r17
    be22:	cf 93       	push	r28
    be24:	df 93       	push	r29
    be26:	cd b7       	in	r28, 0x3d	; 61
    be28:	de b7       	in	r29, 0x3e	; 62
    be2a:	ca 1b       	sub	r28, r26
    be2c:	db 0b       	sbc	r29, r27
    be2e:	0f b6       	in	r0, 0x3f	; 63
    be30:	f8 94       	cli
    be32:	de bf       	out	0x3e, r29	; 62
    be34:	0f be       	out	0x3f, r0	; 63
    be36:	cd bf       	out	0x3d, r28	; 61
    be38:	19 94       	eijmp

0000be3a <__epilogue_restores__>:
    be3a:	2a 88       	ldd	r2, Y+18	; 0x12
    be3c:	39 88       	ldd	r3, Y+17	; 0x11
    be3e:	48 88       	ldd	r4, Y+16	; 0x10
    be40:	5f 84       	ldd	r5, Y+15	; 0x0f
    be42:	6e 84       	ldd	r6, Y+14	; 0x0e
    be44:	7d 84       	ldd	r7, Y+13	; 0x0d
    be46:	8c 84       	ldd	r8, Y+12	; 0x0c
    be48:	9b 84       	ldd	r9, Y+11	; 0x0b
    be4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    be4c:	b9 84       	ldd	r11, Y+9	; 0x09
    be4e:	c8 84       	ldd	r12, Y+8	; 0x08
    be50:	df 80       	ldd	r13, Y+7	; 0x07
    be52:	ee 80       	ldd	r14, Y+6	; 0x06
    be54:	fd 80       	ldd	r15, Y+5	; 0x05
    be56:	0c 81       	ldd	r16, Y+4	; 0x04
    be58:	1b 81       	ldd	r17, Y+3	; 0x03
    be5a:	aa 81       	ldd	r26, Y+2	; 0x02
    be5c:	b9 81       	ldd	r27, Y+1	; 0x01
    be5e:	ce 0f       	add	r28, r30
    be60:	d1 1d       	adc	r29, r1
    be62:	0f b6       	in	r0, 0x3f	; 63
    be64:	f8 94       	cli
    be66:	de bf       	out	0x3e, r29	; 62
    be68:	0f be       	out	0x3f, r0	; 63
    be6a:	cd bf       	out	0x3d, r28	; 61
    be6c:	ed 01       	movw	r28, r26
    be6e:	08 95       	ret

0000be70 <strtod>:
    be70:	8f 92       	push	r8
    be72:	9f 92       	push	r9
    be74:	af 92       	push	r10
    be76:	bf 92       	push	r11
    be78:	cf 92       	push	r12
    be7a:	df 92       	push	r13
    be7c:	ef 92       	push	r14
    be7e:	ff 92       	push	r15
    be80:	0f 93       	push	r16
    be82:	1f 93       	push	r17
    be84:	cf 93       	push	r28
    be86:	df 93       	push	r29
    be88:	ec 01       	movw	r28, r24
    be8a:	5b 01       	movw	r10, r22
    be8c:	61 15       	cp	r22, r1
    be8e:	71 05       	cpc	r23, r1
    be90:	19 f0       	breq	.+6      	; 0xbe98 <strtod+0x28>
    be92:	fb 01       	movw	r30, r22
    be94:	80 83       	st	Z, r24
    be96:	91 83       	std	Z+1, r25	; 0x01
    be98:	f9 90       	ld	r15, Y+
    be9a:	8f 2d       	mov	r24, r15
    be9c:	90 e0       	ldi	r25, 0x00	; 0
    be9e:	0e 94 9c 61 	call	0xc338	; 0xc338 <isspace>
    bea2:	89 2b       	or	r24, r25
    bea4:	c9 f7       	brne	.-14     	; 0xbe98 <strtod+0x28>
    bea6:	fd e2       	ldi	r31, 0x2D	; 45
    bea8:	ff 16       	cp	r15, r31
    beaa:	21 f4       	brne	.+8      	; 0xbeb4 <strtod+0x44>
    beac:	f9 90       	ld	r15, Y+
    beae:	ee 24       	eor	r14, r14
    beb0:	e3 94       	inc	r14
    beb2:	05 c0       	rjmp	.+10     	; 0xbebe <strtod+0x4e>
    beb4:	2b e2       	ldi	r18, 0x2B	; 43
    beb6:	f2 16       	cp	r15, r18
    beb8:	09 f4       	brne	.+2      	; 0xbebc <strtod+0x4c>
    beba:	f9 90       	ld	r15, Y+
    bebc:	ee 24       	eor	r14, r14
    bebe:	8e 01       	movw	r16, r28
    bec0:	01 50       	subi	r16, 0x01	; 1
    bec2:	10 40       	sbci	r17, 0x00	; 0
    bec4:	c8 01       	movw	r24, r16
    bec6:	66 e0       	ldi	r22, 0x06	; 6
    bec8:	7e e1       	ldi	r23, 0x1E	; 30
    beca:	43 e0       	ldi	r20, 0x03	; 3
    becc:	50 e0       	ldi	r21, 0x00	; 0
    bece:	0e 94 a4 61 	call	0xc348	; 0xc348 <strncasecmp_P>
    bed2:	89 2b       	or	r24, r25
    bed4:	01 f5       	brne	.+64     	; 0xbf16 <strtod+0xa6>
    bed6:	8e 01       	movw	r16, r28
    bed8:	0e 5f       	subi	r16, 0xFE	; 254
    beda:	1f 4f       	sbci	r17, 0xFF	; 255
    bedc:	c8 01       	movw	r24, r16
    bede:	69 e0       	ldi	r22, 0x09	; 9
    bee0:	7e e1       	ldi	r23, 0x1E	; 30
    bee2:	45 e0       	ldi	r20, 0x05	; 5
    bee4:	50 e0       	ldi	r21, 0x00	; 0
    bee6:	0e 94 a4 61 	call	0xc348	; 0xc348 <strncasecmp_P>
    beea:	89 2b       	or	r24, r25
    beec:	19 f4       	brne	.+6      	; 0xbef4 <strtod+0x84>
    beee:	8e 01       	movw	r16, r28
    bef0:	09 5f       	subi	r16, 0xF9	; 249
    bef2:	1f 4f       	sbci	r17, 0xFF	; 255
    bef4:	a1 14       	cp	r10, r1
    bef6:	b1 04       	cpc	r11, r1
    bef8:	19 f0       	breq	.+6      	; 0xbf00 <strtod+0x90>
    befa:	f5 01       	movw	r30, r10
    befc:	00 83       	st	Z, r16
    befe:	11 83       	std	Z+1, r17	; 0x01
    bf00:	e0 fc       	sbrc	r14, 0
    bf02:	04 c0       	rjmp	.+8      	; 0xbf0c <strtod+0x9c>
    bf04:	70 e0       	ldi	r23, 0x00	; 0
    bf06:	90 e0       	ldi	r25, 0x00	; 0
    bf08:	80 e8       	ldi	r24, 0x80	; 128
    bf0a:	14 c0       	rjmp	.+40     	; 0xbf34 <strtod+0xc4>
    bf0c:	70 e0       	ldi	r23, 0x00	; 0
    bf0e:	90 e0       	ldi	r25, 0x00	; 0
    bf10:	80 e8       	ldi	r24, 0x80	; 128
    bf12:	6f ef       	ldi	r22, 0xFF	; 255
    bf14:	08 c1       	rjmp	.+528    	; 0xc126 <strtod+0x2b6>
    bf16:	c8 01       	movw	r24, r16
    bf18:	6e e0       	ldi	r22, 0x0E	; 14
    bf1a:	7e e1       	ldi	r23, 0x1E	; 30
    bf1c:	43 e0       	ldi	r20, 0x03	; 3
    bf1e:	50 e0       	ldi	r21, 0x00	; 0
    bf20:	0e 94 a4 61 	call	0xc348	; 0xc348 <strncasecmp_P>
    bf24:	89 2b       	or	r24, r25
    bf26:	69 f4       	brne	.+26     	; 0xbf42 <strtod+0xd2>
    bf28:	a1 14       	cp	r10, r1
    bf2a:	b1 04       	cpc	r11, r1
    bf2c:	29 f4       	brne	.+10     	; 0xbf38 <strtod+0xc8>
    bf2e:	70 e0       	ldi	r23, 0x00	; 0
    bf30:	90 e0       	ldi	r25, 0x00	; 0
    bf32:	80 ec       	ldi	r24, 0xC0	; 192
    bf34:	6f e7       	ldi	r22, 0x7F	; 127
    bf36:	f7 c0       	rjmp	.+494    	; 0xc126 <strtod+0x2b6>
    bf38:	22 96       	adiw	r28, 0x02	; 2
    bf3a:	f5 01       	movw	r30, r10
    bf3c:	c0 83       	st	Z, r28
    bf3e:	d1 83       	std	Z+1, r29	; 0x01
    bf40:	f6 cf       	rjmp	.-20     	; 0xbf2e <strtod+0xbe>
    bf42:	88 24       	eor	r8, r8
    bf44:	99 24       	eor	r9, r9
    bf46:	40 e0       	ldi	r20, 0x00	; 0
    bf48:	50 e0       	ldi	r21, 0x00	; 0
    bf4a:	60 e0       	ldi	r22, 0x00	; 0
    bf4c:	70 e0       	ldi	r23, 0x00	; 0
    bf4e:	ef 2d       	mov	r30, r15
    bf50:	e0 53       	subi	r30, 0x30	; 48
    bf52:	ea 30       	cpi	r30, 0x0A	; 10
    bf54:	a0 f5       	brcc	.+104    	; 0xbfbe <strtod+0x14e>
    bf56:	f2 e0       	ldi	r31, 0x02	; 2
    bf58:	ef 2a       	or	r14, r31
    bf5a:	8e 2d       	mov	r24, r14
    bf5c:	90 e0       	ldi	r25, 0x00	; 0
    bf5e:	9c 01       	movw	r18, r24
    bf60:	28 70       	andi	r18, 0x08	; 8
    bf62:	30 70       	andi	r19, 0x00	; 0
    bf64:	e2 fe       	sbrs	r14, 2
    bf66:	06 c0       	rjmp	.+12     	; 0xbf74 <strtod+0x104>
    bf68:	23 2b       	or	r18, r19
    bf6a:	79 f5       	brne	.+94     	; 0xbfca <strtod+0x15a>
    bf6c:	08 94       	sec
    bf6e:	81 1c       	adc	r8, r1
    bf70:	91 1c       	adc	r9, r1
    bf72:	2b c0       	rjmp	.+86     	; 0xbfca <strtod+0x15a>
    bf74:	23 2b       	or	r18, r19
    bf76:	19 f0       	breq	.+6      	; 0xbf7e <strtod+0x10e>
    bf78:	08 94       	sec
    bf7a:	81 08       	sbc	r8, r1
    bf7c:	91 08       	sbc	r9, r1
    bf7e:	db 01       	movw	r26, r22
    bf80:	ca 01       	movw	r24, r20
    bf82:	12 e0       	ldi	r17, 0x02	; 2
    bf84:	88 0f       	add	r24, r24
    bf86:	99 1f       	adc	r25, r25
    bf88:	aa 1f       	adc	r26, r26
    bf8a:	bb 1f       	adc	r27, r27
    bf8c:	1a 95       	dec	r17
    bf8e:	d1 f7       	brne	.-12     	; 0xbf84 <strtod+0x114>
    bf90:	48 0f       	add	r20, r24
    bf92:	59 1f       	adc	r21, r25
    bf94:	6a 1f       	adc	r22, r26
    bf96:	7b 1f       	adc	r23, r27
    bf98:	44 0f       	add	r20, r20
    bf9a:	55 1f       	adc	r21, r21
    bf9c:	66 1f       	adc	r22, r22
    bf9e:	77 1f       	adc	r23, r23
    bfa0:	4e 0f       	add	r20, r30
    bfa2:	51 1d       	adc	r21, r1
    bfa4:	61 1d       	adc	r22, r1
    bfa6:	71 1d       	adc	r23, r1
    bfa8:	48 39       	cpi	r20, 0x98	; 152
    bfaa:	29 e9       	ldi	r18, 0x99	; 153
    bfac:	52 07       	cpc	r21, r18
    bfae:	29 e9       	ldi	r18, 0x99	; 153
    bfb0:	62 07       	cpc	r22, r18
    bfb2:	29 e1       	ldi	r18, 0x19	; 25
    bfb4:	72 07       	cpc	r23, r18
    bfb6:	48 f0       	brcs	.+18     	; 0xbfca <strtod+0x15a>
    bfb8:	84 e0       	ldi	r24, 0x04	; 4
    bfba:	e8 2a       	or	r14, r24
    bfbc:	06 c0       	rjmp	.+12     	; 0xbfca <strtod+0x15a>
    bfbe:	ee 3f       	cpi	r30, 0xFE	; 254
    bfc0:	31 f4       	brne	.+12     	; 0xbfce <strtod+0x15e>
    bfc2:	e3 fc       	sbrc	r14, 3
    bfc4:	39 c0       	rjmp	.+114    	; 0xc038 <strtod+0x1c8>
    bfc6:	98 e0       	ldi	r25, 0x08	; 8
    bfc8:	e9 2a       	or	r14, r25
    bfca:	f9 90       	ld	r15, Y+
    bfcc:	c0 cf       	rjmp	.-128    	; 0xbf4e <strtod+0xde>
    bfce:	e5 33       	cpi	r30, 0x35	; 53
    bfd0:	11 f0       	breq	.+4      	; 0xbfd6 <strtod+0x166>
    bfd2:	e5 31       	cpi	r30, 0x15	; 21
    bfd4:	89 f5       	brne	.+98     	; 0xc038 <strtod+0x1c8>
    bfd6:	29 91       	ld	r18, Y+
    bfd8:	2d 32       	cpi	r18, 0x2D	; 45
    bfda:	19 f4       	brne	.+6      	; 0xbfe2 <strtod+0x172>
    bfdc:	e0 e1       	ldi	r30, 0x10	; 16
    bfde:	ee 2a       	or	r14, r30
    bfe0:	05 c0       	rjmp	.+10     	; 0xbfec <strtod+0x17c>
    bfe2:	2b 32       	cpi	r18, 0x2B	; 43
    bfe4:	19 f0       	breq	.+6      	; 0xbfec <strtod+0x17c>
    bfe6:	81 e0       	ldi	r24, 0x01	; 1
    bfe8:	90 e0       	ldi	r25, 0x00	; 0
    bfea:	03 c0       	rjmp	.+6      	; 0xbff2 <strtod+0x182>
    bfec:	29 91       	ld	r18, Y+
    bfee:	82 e0       	ldi	r24, 0x02	; 2
    bff0:	90 e0       	ldi	r25, 0x00	; 0
    bff2:	e2 2f       	mov	r30, r18
    bff4:	e0 53       	subi	r30, 0x30	; 48
    bff6:	ea 30       	cpi	r30, 0x0A	; 10
    bff8:	18 f0       	brcs	.+6      	; 0xc000 <strtod+0x190>
    bffa:	c8 1b       	sub	r28, r24
    bffc:	d9 0b       	sbc	r29, r25
    bffe:	1c c0       	rjmp	.+56     	; 0xc038 <strtod+0x1c8>
    c000:	20 e0       	ldi	r18, 0x00	; 0
    c002:	30 e0       	ldi	r19, 0x00	; 0
    c004:	fc e0       	ldi	r31, 0x0C	; 12
    c006:	20 38       	cpi	r18, 0x80	; 128
    c008:	3f 07       	cpc	r19, r31
    c00a:	5c f4       	brge	.+22     	; 0xc022 <strtod+0x1b2>
    c00c:	c9 01       	movw	r24, r18
    c00e:	88 0f       	add	r24, r24
    c010:	99 1f       	adc	r25, r25
    c012:	88 0f       	add	r24, r24
    c014:	99 1f       	adc	r25, r25
    c016:	28 0f       	add	r18, r24
    c018:	39 1f       	adc	r19, r25
    c01a:	22 0f       	add	r18, r18
    c01c:	33 1f       	adc	r19, r19
    c01e:	2e 0f       	add	r18, r30
    c020:	31 1d       	adc	r19, r1
    c022:	e9 91       	ld	r30, Y+
    c024:	e0 53       	subi	r30, 0x30	; 48
    c026:	ea 30       	cpi	r30, 0x0A	; 10
    c028:	68 f3       	brcs	.-38     	; 0xc004 <strtod+0x194>
    c02a:	e4 fe       	sbrs	r14, 4
    c02c:	03 c0       	rjmp	.+6      	; 0xc034 <strtod+0x1c4>
    c02e:	30 95       	com	r19
    c030:	21 95       	neg	r18
    c032:	3f 4f       	sbci	r19, 0xFF	; 255
    c034:	82 0e       	add	r8, r18
    c036:	93 1e       	adc	r9, r19
    c038:	ce 2c       	mov	r12, r14
    c03a:	dd 24       	eor	r13, r13
    c03c:	e1 fe       	sbrs	r14, 1
    c03e:	07 c0       	rjmp	.+14     	; 0xc04e <strtod+0x1de>
    c040:	a1 14       	cp	r10, r1
    c042:	b1 04       	cpc	r11, r1
    c044:	21 f0       	breq	.+8      	; 0xc04e <strtod+0x1de>
    c046:	21 97       	sbiw	r28, 0x01	; 1
    c048:	f5 01       	movw	r30, r10
    c04a:	c0 83       	st	Z, r28
    c04c:	d1 83       	std	Z+1, r29	; 0x01
    c04e:	cb 01       	movw	r24, r22
    c050:	ba 01       	movw	r22, r20
    c052:	0e 94 cd 5b 	call	0xb79a	; 0xb79a <__floatunsisf>
    c056:	7b 01       	movw	r14, r22
    c058:	8c 01       	movw	r16, r24
    c05a:	f3 e0       	ldi	r31, 0x03	; 3
    c05c:	cf 22       	and	r12, r31
    c05e:	dd 24       	eor	r13, r13
    c060:	23 e0       	ldi	r18, 0x03	; 3
    c062:	c2 16       	cp	r12, r18
    c064:	d1 04       	cpc	r13, r1
    c066:	21 f4       	brne	.+8      	; 0xc070 <strtod+0x200>
    c068:	17 fb       	bst	r17, 7
    c06a:	10 95       	com	r17
    c06c:	17 f9       	bld	r17, 7
    c06e:	10 95       	com	r17
    c070:	57 01       	movw	r10, r14
    c072:	68 01       	movw	r12, r16
    c074:	c8 01       	movw	r24, r16
    c076:	b7 01       	movw	r22, r14
    c078:	20 e0       	ldi	r18, 0x00	; 0
    c07a:	30 e0       	ldi	r19, 0x00	; 0
    c07c:	40 e0       	ldi	r20, 0x00	; 0
    c07e:	50 e0       	ldi	r21, 0x00	; 0
    c080:	0e 94 2d 5b 	call	0xb65a	; 0xb65a <__cmpsf2>
    c084:	88 23       	and	r24, r24
    c086:	09 f4       	brne	.+2      	; 0xc08a <strtod+0x21a>
    c088:	4a c0       	rjmp	.+148    	; 0xc11e <strtod+0x2ae>
    c08a:	97 fe       	sbrs	r9, 7
    c08c:	0d c0       	rjmp	.+26     	; 0xc0a8 <strtod+0x238>
    c08e:	25 e2       	ldi	r18, 0x25	; 37
    c090:	e2 2e       	mov	r14, r18
    c092:	2e e1       	ldi	r18, 0x1E	; 30
    c094:	f2 2e       	mov	r15, r18
    c096:	90 94       	com	r9
    c098:	81 94       	neg	r8
    c09a:	91 08       	sbc	r9, r1
    c09c:	93 94       	inc	r9
    c09e:	c0 e2       	ldi	r28, 0x20	; 32
    c0a0:	d0 e0       	ldi	r29, 0x00	; 0
    c0a2:	00 e0       	ldi	r16, 0x00	; 0
    c0a4:	10 e0       	ldi	r17, 0x00	; 0
    c0a6:	12 c0       	rjmp	.+36     	; 0xc0cc <strtod+0x25c>
    c0a8:	9d e3       	ldi	r25, 0x3D	; 61
    c0aa:	e9 2e       	mov	r14, r25
    c0ac:	9e e1       	ldi	r25, 0x1E	; 30
    c0ae:	f9 2e       	mov	r15, r25
    c0b0:	f6 cf       	rjmp	.-20     	; 0xc09e <strtod+0x22e>
    c0b2:	f7 01       	movw	r30, r14
    c0b4:	25 91       	lpm	r18, Z+
    c0b6:	35 91       	lpm	r19, Z+
    c0b8:	45 91       	lpm	r20, Z+
    c0ba:	54 91       	lpm	r21, Z+
    c0bc:	c6 01       	movw	r24, r12
    c0be:	b5 01       	movw	r22, r10
    c0c0:	0e 94 ef 5d 	call	0xbbde	; 0xbbde <__mulsf3>
    c0c4:	5b 01       	movw	r10, r22
    c0c6:	6c 01       	movw	r12, r24
    c0c8:	8c 1a       	sub	r8, r28
    c0ca:	9d 0a       	sbc	r9, r29
    c0cc:	8c 16       	cp	r8, r28
    c0ce:	9d 06       	cpc	r9, r29
    c0d0:	84 f7       	brge	.-32     	; 0xc0b2 <strtod+0x242>
    c0d2:	d5 95       	asr	r29
    c0d4:	c7 95       	ror	r28
    c0d6:	0f 5f       	subi	r16, 0xFF	; 255
    c0d8:	1f 4f       	sbci	r17, 0xFF	; 255
    c0da:	06 30       	cpi	r16, 0x06	; 6
    c0dc:	11 05       	cpc	r17, r1
    c0de:	29 f0       	breq	.+10     	; 0xc0ea <strtod+0x27a>
    c0e0:	8c ef       	ldi	r24, 0xFC	; 252
    c0e2:	9f ef       	ldi	r25, 0xFF	; 255
    c0e4:	e8 0e       	add	r14, r24
    c0e6:	f9 1e       	adc	r15, r25
    c0e8:	f1 cf       	rjmp	.-30     	; 0xc0cc <strtod+0x25c>
    c0ea:	c5 01       	movw	r24, r10
    c0ec:	d6 01       	movw	r26, r12
    c0ee:	7c 01       	movw	r14, r24
    c0f0:	8d 01       	movw	r16, r26
    c0f2:	8c 2d       	mov	r24, r12
    c0f4:	88 0f       	add	r24, r24
    c0f6:	8d 2d       	mov	r24, r13
    c0f8:	88 1f       	adc	r24, r24
    c0fa:	8f 3f       	cpi	r24, 0xFF	; 255
    c0fc:	51 f0       	breq	.+20     	; 0xc112 <strtod+0x2a2>
    c0fe:	c6 01       	movw	r24, r12
    c100:	b5 01       	movw	r22, r10
    c102:	20 e0       	ldi	r18, 0x00	; 0
    c104:	30 e0       	ldi	r19, 0x00	; 0
    c106:	40 e0       	ldi	r20, 0x00	; 0
    c108:	50 e0       	ldi	r21, 0x00	; 0
    c10a:	0e 94 2d 5b 	call	0xb65a	; 0xb65a <__cmpsf2>
    c10e:	88 23       	and	r24, r24
    c110:	31 f4       	brne	.+12     	; 0xc11e <strtod+0x2ae>
    c112:	82 e2       	ldi	r24, 0x22	; 34
    c114:	90 e0       	ldi	r25, 0x00	; 0
    c116:	80 93 68 25 	sts	0x2568, r24
    c11a:	90 93 69 25 	sts	0x2569, r25
    c11e:	7e 2d       	mov	r23, r14
    c120:	9f 2d       	mov	r25, r15
    c122:	80 2f       	mov	r24, r16
    c124:	61 2f       	mov	r22, r17
    c126:	27 2f       	mov	r18, r23
    c128:	39 2f       	mov	r19, r25
    c12a:	48 2f       	mov	r20, r24
    c12c:	56 2f       	mov	r21, r22
    c12e:	b9 01       	movw	r22, r18
    c130:	ca 01       	movw	r24, r20
    c132:	df 91       	pop	r29
    c134:	cf 91       	pop	r28
    c136:	1f 91       	pop	r17
    c138:	0f 91       	pop	r16
    c13a:	ff 90       	pop	r15
    c13c:	ef 90       	pop	r14
    c13e:	df 90       	pop	r13
    c140:	cf 90       	pop	r12
    c142:	bf 90       	pop	r11
    c144:	af 90       	pop	r10
    c146:	9f 90       	pop	r9
    c148:	8f 90       	pop	r8
    c14a:	08 95       	ret

0000c14c <atoi>:
    c14c:	fc 01       	movw	r30, r24
    c14e:	88 27       	eor	r24, r24
    c150:	99 27       	eor	r25, r25
    c152:	e8 94       	clt
    c154:	21 91       	ld	r18, Z+
    c156:	20 32       	cpi	r18, 0x20	; 32
    c158:	e9 f3       	breq	.-6      	; 0xc154 <atoi+0x8>
    c15a:	29 30       	cpi	r18, 0x09	; 9
    c15c:	10 f0       	brcs	.+4      	; 0xc162 <atoi+0x16>
    c15e:	2e 30       	cpi	r18, 0x0E	; 14
    c160:	c8 f3       	brcs	.-14     	; 0xc154 <atoi+0x8>
    c162:	2b 32       	cpi	r18, 0x2B	; 43
    c164:	41 f0       	breq	.+16     	; 0xc176 <atoi+0x2a>
    c166:	2d 32       	cpi	r18, 0x2D	; 45
    c168:	39 f4       	brne	.+14     	; 0xc178 <atoi+0x2c>
    c16a:	68 94       	set
    c16c:	04 c0       	rjmp	.+8      	; 0xc176 <atoi+0x2a>
    c16e:	0e 94 e2 61 	call	0xc3c4	; 0xc3c4 <__mulhi_const_10>
    c172:	82 0f       	add	r24, r18
    c174:	91 1d       	adc	r25, r1
    c176:	21 91       	ld	r18, Z+
    c178:	20 53       	subi	r18, 0x30	; 48
    c17a:	2a 30       	cpi	r18, 0x0A	; 10
    c17c:	c0 f3       	brcs	.-16     	; 0xc16e <atoi+0x22>
    c17e:	1e f4       	brtc	.+6      	; 0xc186 <atoi+0x3a>
    c180:	90 95       	com	r25
    c182:	81 95       	neg	r24
    c184:	9f 4f       	sbci	r25, 0xFF	; 255
    c186:	08 95       	ret

0000c188 <__ftoa_engine>:
    c188:	28 30       	cpi	r18, 0x08	; 8
    c18a:	08 f0       	brcs	.+2      	; 0xc18e <__ftoa_engine+0x6>
    c18c:	27 e0       	ldi	r18, 0x07	; 7
    c18e:	33 27       	eor	r19, r19
    c190:	da 01       	movw	r26, r20
    c192:	99 0f       	add	r25, r25
    c194:	31 1d       	adc	r19, r1
    c196:	87 fd       	sbrc	r24, 7
    c198:	91 60       	ori	r25, 0x01	; 1
    c19a:	00 96       	adiw	r24, 0x00	; 0
    c19c:	61 05       	cpc	r22, r1
    c19e:	71 05       	cpc	r23, r1
    c1a0:	39 f4       	brne	.+14     	; 0xc1b0 <__ftoa_engine+0x28>
    c1a2:	32 60       	ori	r19, 0x02	; 2
    c1a4:	2e 5f       	subi	r18, 0xFE	; 254
    c1a6:	3d 93       	st	X+, r19
    c1a8:	30 e3       	ldi	r19, 0x30	; 48
    c1aa:	2a 95       	dec	r18
    c1ac:	e1 f7       	brne	.-8      	; 0xc1a6 <__ftoa_engine+0x1e>
    c1ae:	08 95       	ret
    c1b0:	9f 3f       	cpi	r25, 0xFF	; 255
    c1b2:	30 f0       	brcs	.+12     	; 0xc1c0 <__ftoa_engine+0x38>
    c1b4:	80 38       	cpi	r24, 0x80	; 128
    c1b6:	71 05       	cpc	r23, r1
    c1b8:	61 05       	cpc	r22, r1
    c1ba:	09 f0       	breq	.+2      	; 0xc1be <__ftoa_engine+0x36>
    c1bc:	3c 5f       	subi	r19, 0xFC	; 252
    c1be:	3c 5f       	subi	r19, 0xFC	; 252
    c1c0:	3d 93       	st	X+, r19
    c1c2:	91 30       	cpi	r25, 0x01	; 1
    c1c4:	08 f0       	brcs	.+2      	; 0xc1c8 <__ftoa_engine+0x40>
    c1c6:	80 68       	ori	r24, 0x80	; 128
    c1c8:	91 1d       	adc	r25, r1
    c1ca:	df 93       	push	r29
    c1cc:	cf 93       	push	r28
    c1ce:	1f 93       	push	r17
    c1d0:	0f 93       	push	r16
    c1d2:	ff 92       	push	r15
    c1d4:	ef 92       	push	r14
    c1d6:	19 2f       	mov	r17, r25
    c1d8:	98 7f       	andi	r25, 0xF8	; 248
    c1da:	96 95       	lsr	r25
    c1dc:	e9 2f       	mov	r30, r25
    c1de:	96 95       	lsr	r25
    c1e0:	96 95       	lsr	r25
    c1e2:	e9 0f       	add	r30, r25
    c1e4:	ff 27       	eor	r31, r31
    c1e6:	e5 56       	subi	r30, 0x65	; 101
    c1e8:	f1 4e       	sbci	r31, 0xE1	; 225
    c1ea:	99 27       	eor	r25, r25
    c1ec:	33 27       	eor	r19, r19
    c1ee:	ee 24       	eor	r14, r14
    c1f0:	ff 24       	eor	r15, r15
    c1f2:	a7 01       	movw	r20, r14
    c1f4:	e7 01       	movw	r28, r14
    c1f6:	05 90       	lpm	r0, Z+
    c1f8:	08 94       	sec
    c1fa:	07 94       	ror	r0
    c1fc:	28 f4       	brcc	.+10     	; 0xc208 <__ftoa_engine+0x80>
    c1fe:	36 0f       	add	r19, r22
    c200:	e7 1e       	adc	r14, r23
    c202:	f8 1e       	adc	r15, r24
    c204:	49 1f       	adc	r20, r25
    c206:	51 1d       	adc	r21, r1
    c208:	66 0f       	add	r22, r22
    c20a:	77 1f       	adc	r23, r23
    c20c:	88 1f       	adc	r24, r24
    c20e:	99 1f       	adc	r25, r25
    c210:	06 94       	lsr	r0
    c212:	a1 f7       	brne	.-24     	; 0xc1fc <__ftoa_engine+0x74>
    c214:	05 90       	lpm	r0, Z+
    c216:	07 94       	ror	r0
    c218:	28 f4       	brcc	.+10     	; 0xc224 <__ftoa_engine+0x9c>
    c21a:	e7 0e       	add	r14, r23
    c21c:	f8 1e       	adc	r15, r24
    c21e:	49 1f       	adc	r20, r25
    c220:	56 1f       	adc	r21, r22
    c222:	c1 1d       	adc	r28, r1
    c224:	77 0f       	add	r23, r23
    c226:	88 1f       	adc	r24, r24
    c228:	99 1f       	adc	r25, r25
    c22a:	66 1f       	adc	r22, r22
    c22c:	06 94       	lsr	r0
    c22e:	a1 f7       	brne	.-24     	; 0xc218 <__ftoa_engine+0x90>
    c230:	05 90       	lpm	r0, Z+
    c232:	07 94       	ror	r0
    c234:	28 f4       	brcc	.+10     	; 0xc240 <__ftoa_engine+0xb8>
    c236:	f8 0e       	add	r15, r24
    c238:	49 1f       	adc	r20, r25
    c23a:	56 1f       	adc	r21, r22
    c23c:	c7 1f       	adc	r28, r23
    c23e:	d1 1d       	adc	r29, r1
    c240:	88 0f       	add	r24, r24
    c242:	99 1f       	adc	r25, r25
    c244:	66 1f       	adc	r22, r22
    c246:	77 1f       	adc	r23, r23
    c248:	06 94       	lsr	r0
    c24a:	a1 f7       	brne	.-24     	; 0xc234 <__ftoa_engine+0xac>
    c24c:	05 90       	lpm	r0, Z+
    c24e:	07 94       	ror	r0
    c250:	20 f4       	brcc	.+8      	; 0xc25a <__ftoa_engine+0xd2>
    c252:	49 0f       	add	r20, r25
    c254:	56 1f       	adc	r21, r22
    c256:	c7 1f       	adc	r28, r23
    c258:	d8 1f       	adc	r29, r24
    c25a:	99 0f       	add	r25, r25
    c25c:	66 1f       	adc	r22, r22
    c25e:	77 1f       	adc	r23, r23
    c260:	88 1f       	adc	r24, r24
    c262:	06 94       	lsr	r0
    c264:	a9 f7       	brne	.-22     	; 0xc250 <__ftoa_engine+0xc8>
    c266:	84 91       	lpm	r24, Z+
    c268:	10 95       	com	r17
    c26a:	17 70       	andi	r17, 0x07	; 7
    c26c:	41 f0       	breq	.+16     	; 0xc27e <__ftoa_engine+0xf6>
    c26e:	d6 95       	lsr	r29
    c270:	c7 95       	ror	r28
    c272:	57 95       	ror	r21
    c274:	47 95       	ror	r20
    c276:	f7 94       	ror	r15
    c278:	e7 94       	ror	r14
    c27a:	1a 95       	dec	r17
    c27c:	c1 f7       	brne	.-16     	; 0xc26e <__ftoa_engine+0xe6>
    c27e:	e1 e4       	ldi	r30, 0x41	; 65
    c280:	fe e1       	ldi	r31, 0x1E	; 30
    c282:	68 94       	set
    c284:	15 90       	lpm	r1, Z+
    c286:	15 91       	lpm	r17, Z+
    c288:	35 91       	lpm	r19, Z+
    c28a:	65 91       	lpm	r22, Z+
    c28c:	95 91       	lpm	r25, Z+
    c28e:	05 90       	lpm	r0, Z+
    c290:	7f e2       	ldi	r23, 0x2F	; 47
    c292:	73 95       	inc	r23
    c294:	e1 18       	sub	r14, r1
    c296:	f1 0a       	sbc	r15, r17
    c298:	43 0b       	sbc	r20, r19
    c29a:	56 0b       	sbc	r21, r22
    c29c:	c9 0b       	sbc	r28, r25
    c29e:	d0 09       	sbc	r29, r0
    c2a0:	c0 f7       	brcc	.-16     	; 0xc292 <__ftoa_engine+0x10a>
    c2a2:	e1 0c       	add	r14, r1
    c2a4:	f1 1e       	adc	r15, r17
    c2a6:	43 1f       	adc	r20, r19
    c2a8:	56 1f       	adc	r21, r22
    c2aa:	c9 1f       	adc	r28, r25
    c2ac:	d0 1d       	adc	r29, r0
    c2ae:	7e f4       	brtc	.+30     	; 0xc2ce <__ftoa_engine+0x146>
    c2b0:	70 33       	cpi	r23, 0x30	; 48
    c2b2:	11 f4       	brne	.+4      	; 0xc2b8 <__ftoa_engine+0x130>
    c2b4:	8a 95       	dec	r24
    c2b6:	e6 cf       	rjmp	.-52     	; 0xc284 <__ftoa_engine+0xfc>
    c2b8:	e8 94       	clt
    c2ba:	01 50       	subi	r16, 0x01	; 1
    c2bc:	30 f0       	brcs	.+12     	; 0xc2ca <__ftoa_engine+0x142>
    c2be:	08 0f       	add	r16, r24
    c2c0:	0a f4       	brpl	.+2      	; 0xc2c4 <__ftoa_engine+0x13c>
    c2c2:	00 27       	eor	r16, r16
    c2c4:	02 17       	cp	r16, r18
    c2c6:	08 f4       	brcc	.+2      	; 0xc2ca <__ftoa_engine+0x142>
    c2c8:	20 2f       	mov	r18, r16
    c2ca:	23 95       	inc	r18
    c2cc:	02 2f       	mov	r16, r18
    c2ce:	7a 33       	cpi	r23, 0x3A	; 58
    c2d0:	28 f0       	brcs	.+10     	; 0xc2dc <__ftoa_engine+0x154>
    c2d2:	79 e3       	ldi	r23, 0x39	; 57
    c2d4:	7d 93       	st	X+, r23
    c2d6:	2a 95       	dec	r18
    c2d8:	e9 f7       	brne	.-6      	; 0xc2d4 <__ftoa_engine+0x14c>
    c2da:	10 c0       	rjmp	.+32     	; 0xc2fc <__ftoa_engine+0x174>
    c2dc:	7d 93       	st	X+, r23
    c2de:	2a 95       	dec	r18
    c2e0:	89 f6       	brne	.-94     	; 0xc284 <__ftoa_engine+0xfc>
    c2e2:	06 94       	lsr	r0
    c2e4:	97 95       	ror	r25
    c2e6:	67 95       	ror	r22
    c2e8:	37 95       	ror	r19
    c2ea:	17 95       	ror	r17
    c2ec:	17 94       	ror	r1
    c2ee:	e1 18       	sub	r14, r1
    c2f0:	f1 0a       	sbc	r15, r17
    c2f2:	43 0b       	sbc	r20, r19
    c2f4:	56 0b       	sbc	r21, r22
    c2f6:	c9 0b       	sbc	r28, r25
    c2f8:	d0 09       	sbc	r29, r0
    c2fa:	98 f0       	brcs	.+38     	; 0xc322 <__ftoa_engine+0x19a>
    c2fc:	23 95       	inc	r18
    c2fe:	7e 91       	ld	r23, -X
    c300:	73 95       	inc	r23
    c302:	7a 33       	cpi	r23, 0x3A	; 58
    c304:	08 f0       	brcs	.+2      	; 0xc308 <__ftoa_engine+0x180>
    c306:	70 e3       	ldi	r23, 0x30	; 48
    c308:	7c 93       	st	X, r23
    c30a:	20 13       	cpse	r18, r16
    c30c:	b8 f7       	brcc	.-18     	; 0xc2fc <__ftoa_engine+0x174>
    c30e:	7e 91       	ld	r23, -X
    c310:	70 61       	ori	r23, 0x10	; 16
    c312:	7d 93       	st	X+, r23
    c314:	30 f0       	brcs	.+12     	; 0xc322 <__ftoa_engine+0x19a>
    c316:	83 95       	inc	r24
    c318:	71 e3       	ldi	r23, 0x31	; 49
    c31a:	7d 93       	st	X+, r23
    c31c:	70 e3       	ldi	r23, 0x30	; 48
    c31e:	2a 95       	dec	r18
    c320:	e1 f7       	brne	.-8      	; 0xc31a <__ftoa_engine+0x192>
    c322:	11 24       	eor	r1, r1
    c324:	ef 90       	pop	r14
    c326:	ff 90       	pop	r15
    c328:	0f 91       	pop	r16
    c32a:	1f 91       	pop	r17
    c32c:	cf 91       	pop	r28
    c32e:	df 91       	pop	r29
    c330:	99 27       	eor	r25, r25
    c332:	87 fd       	sbrc	r24, 7
    c334:	90 95       	com	r25
    c336:	08 95       	ret

0000c338 <isspace>:
    c338:	91 11       	cpse	r25, r1
    c33a:	31 c1       	rjmp	.+610    	; 0xc59e <__ctype_isfalse>
    c33c:	80 32       	cpi	r24, 0x20	; 32
    c33e:	19 f0       	breq	.+6      	; 0xc346 <isspace+0xe>
    c340:	89 50       	subi	r24, 0x09	; 9
    c342:	85 50       	subi	r24, 0x05	; 5
    c344:	d0 f7       	brcc	.-12     	; 0xc33a <isspace+0x2>
    c346:	08 95       	ret

0000c348 <strncasecmp_P>:
    c348:	fb 01       	movw	r30, r22
    c34a:	dc 01       	movw	r26, r24
    c34c:	41 50       	subi	r20, 0x01	; 1
    c34e:	50 40       	sbci	r21, 0x00	; 0
    c350:	88 f0       	brcs	.+34     	; 0xc374 <strncasecmp_P+0x2c>
    c352:	8d 91       	ld	r24, X+
    c354:	81 34       	cpi	r24, 0x41	; 65
    c356:	1c f0       	brlt	.+6      	; 0xc35e <strncasecmp_P+0x16>
    c358:	8b 35       	cpi	r24, 0x5B	; 91
    c35a:	0c f4       	brge	.+2      	; 0xc35e <strncasecmp_P+0x16>
    c35c:	80 5e       	subi	r24, 0xE0	; 224
    c35e:	65 91       	lpm	r22, Z+
    c360:	61 34       	cpi	r22, 0x41	; 65
    c362:	1c f0       	brlt	.+6      	; 0xc36a <strncasecmp_P+0x22>
    c364:	6b 35       	cpi	r22, 0x5B	; 91
    c366:	0c f4       	brge	.+2      	; 0xc36a <strncasecmp_P+0x22>
    c368:	60 5e       	subi	r22, 0xE0	; 224
    c36a:	86 1b       	sub	r24, r22
    c36c:	61 11       	cpse	r22, r1
    c36e:	71 f3       	breq	.-36     	; 0xc34c <strncasecmp_P+0x4>
    c370:	99 0b       	sbc	r25, r25
    c372:	08 95       	ret
    c374:	88 1b       	sub	r24, r24
    c376:	fc cf       	rjmp	.-8      	; 0xc370 <strncasecmp_P+0x28>

0000c378 <strnlen_P>:
    c378:	fc 01       	movw	r30, r24
    c37a:	05 90       	lpm	r0, Z+
    c37c:	61 50       	subi	r22, 0x01	; 1
    c37e:	70 40       	sbci	r23, 0x00	; 0
    c380:	01 10       	cpse	r0, r1
    c382:	d8 f7       	brcc	.-10     	; 0xc37a <strnlen_P+0x2>
    c384:	80 95       	com	r24
    c386:	90 95       	com	r25
    c388:	8e 0f       	add	r24, r30
    c38a:	9f 1f       	adc	r25, r31
    c38c:	08 95       	ret

0000c38e <memcpy>:
    c38e:	fb 01       	movw	r30, r22
    c390:	dc 01       	movw	r26, r24
    c392:	02 c0       	rjmp	.+4      	; 0xc398 <memcpy+0xa>
    c394:	01 90       	ld	r0, Z+
    c396:	0d 92       	st	X+, r0
    c398:	41 50       	subi	r20, 0x01	; 1
    c39a:	50 40       	sbci	r21, 0x00	; 0
    c39c:	d8 f7       	brcc	.-10     	; 0xc394 <memcpy+0x6>
    c39e:	08 95       	ret

0000c3a0 <memset>:
    c3a0:	dc 01       	movw	r26, r24
    c3a2:	01 c0       	rjmp	.+2      	; 0xc3a6 <memset+0x6>
    c3a4:	6d 93       	st	X+, r22
    c3a6:	41 50       	subi	r20, 0x01	; 1
    c3a8:	50 40       	sbci	r21, 0x00	; 0
    c3aa:	e0 f7       	brcc	.-8      	; 0xc3a4 <memset+0x4>
    c3ac:	08 95       	ret

0000c3ae <strnlen>:
    c3ae:	fc 01       	movw	r30, r24
    c3b0:	61 50       	subi	r22, 0x01	; 1
    c3b2:	70 40       	sbci	r23, 0x00	; 0
    c3b4:	01 90       	ld	r0, Z+
    c3b6:	01 10       	cpse	r0, r1
    c3b8:	d8 f7       	brcc	.-10     	; 0xc3b0 <strnlen+0x2>
    c3ba:	80 95       	com	r24
    c3bc:	90 95       	com	r25
    c3be:	8e 0f       	add	r24, r30
    c3c0:	9f 1f       	adc	r25, r31
    c3c2:	08 95       	ret

0000c3c4 <__mulhi_const_10>:
    c3c4:	7a e0       	ldi	r23, 0x0A	; 10
    c3c6:	97 9f       	mul	r25, r23
    c3c8:	90 2d       	mov	r25, r0
    c3ca:	87 9f       	mul	r24, r23
    c3cc:	80 2d       	mov	r24, r0
    c3ce:	91 0d       	add	r25, r1
    c3d0:	11 24       	eor	r1, r1
    c3d2:	08 95       	ret

0000c3d4 <clearerr>:
    c3d4:	fc 01       	movw	r30, r24
    c3d6:	83 81       	ldd	r24, Z+3	; 0x03
    c3d8:	8f 7c       	andi	r24, 0xCF	; 207
    c3da:	83 83       	std	Z+3, r24	; 0x03
    c3dc:	08 95       	ret

0000c3de <fgets>:
    c3de:	cf 92       	push	r12
    c3e0:	df 92       	push	r13
    c3e2:	ef 92       	push	r14
    c3e4:	ff 92       	push	r15
    c3e6:	0f 93       	push	r16
    c3e8:	1f 93       	push	r17
    c3ea:	cf 93       	push	r28
    c3ec:	df 93       	push	r29
    c3ee:	7c 01       	movw	r14, r24
    c3f0:	6a 01       	movw	r12, r20
    c3f2:	fa 01       	movw	r30, r20
    c3f4:	83 81       	ldd	r24, Z+3	; 0x03
    c3f6:	80 ff       	sbrs	r24, 0
    c3f8:	19 c0       	rjmp	.+50     	; 0xc42c <fgets+0x4e>
    c3fa:	16 16       	cp	r1, r22
    c3fc:	17 06       	cpc	r1, r23
    c3fe:	b4 f4       	brge	.+44     	; 0xc42c <fgets+0x4e>
    c400:	eb 01       	movw	r28, r22
    c402:	21 97       	sbiw	r28, 0x01	; 1
    c404:	87 01       	movw	r16, r14
    c406:	0d c0       	rjmp	.+26     	; 0xc422 <fgets+0x44>
    c408:	c6 01       	movw	r24, r12
    c40a:	0e 94 d2 62 	call	0xc5a4	; 0xc5a4 <fgetc>
    c40e:	ff ef       	ldi	r31, 0xFF	; 255
    c410:	8f 3f       	cpi	r24, 0xFF	; 255
    c412:	9f 07       	cpc	r25, r31
    c414:	59 f0       	breq	.+22     	; 0xc42c <fgets+0x4e>
    c416:	f8 01       	movw	r30, r16
    c418:	81 93       	st	Z+, r24
    c41a:	8f 01       	movw	r16, r30
    c41c:	0a 97       	sbiw	r24, 0x0a	; 10
    c41e:	19 f0       	breq	.+6      	; 0xc426 <fgets+0x48>
    c420:	21 97       	sbiw	r28, 0x01	; 1
    c422:	20 97       	sbiw	r28, 0x00	; 0
    c424:	89 f7       	brne	.-30     	; 0xc408 <fgets+0x2a>
    c426:	f8 01       	movw	r30, r16
    c428:	10 82       	st	Z, r1
    c42a:	02 c0       	rjmp	.+4      	; 0xc430 <fgets+0x52>
    c42c:	ee 24       	eor	r14, r14
    c42e:	ff 24       	eor	r15, r15
    c430:	c7 01       	movw	r24, r14
    c432:	df 91       	pop	r29
    c434:	cf 91       	pop	r28
    c436:	1f 91       	pop	r17
    c438:	0f 91       	pop	r16
    c43a:	ff 90       	pop	r15
    c43c:	ef 90       	pop	r14
    c43e:	df 90       	pop	r13
    c440:	cf 90       	pop	r12
    c442:	08 95       	ret

0000c444 <fputc>:
    c444:	0f 93       	push	r16
    c446:	1f 93       	push	r17
    c448:	cf 93       	push	r28
    c44a:	df 93       	push	r29
    c44c:	8c 01       	movw	r16, r24
    c44e:	eb 01       	movw	r28, r22
    c450:	8b 81       	ldd	r24, Y+3	; 0x03
    c452:	81 ff       	sbrs	r24, 1
    c454:	1b c0       	rjmp	.+54     	; 0xc48c <fputc+0x48>
    c456:	82 ff       	sbrs	r24, 2
    c458:	0d c0       	rjmp	.+26     	; 0xc474 <fputc+0x30>
    c45a:	2e 81       	ldd	r18, Y+6	; 0x06
    c45c:	3f 81       	ldd	r19, Y+7	; 0x07
    c45e:	8c 81       	ldd	r24, Y+4	; 0x04
    c460:	9d 81       	ldd	r25, Y+5	; 0x05
    c462:	28 17       	cp	r18, r24
    c464:	39 07       	cpc	r19, r25
    c466:	64 f4       	brge	.+24     	; 0xc480 <fputc+0x3c>
    c468:	e8 81       	ld	r30, Y
    c46a:	f9 81       	ldd	r31, Y+1	; 0x01
    c46c:	01 93       	st	Z+, r16
    c46e:	e8 83       	st	Y, r30
    c470:	f9 83       	std	Y+1, r31	; 0x01
    c472:	06 c0       	rjmp	.+12     	; 0xc480 <fputc+0x3c>
    c474:	e8 85       	ldd	r30, Y+8	; 0x08
    c476:	f9 85       	ldd	r31, Y+9	; 0x09
    c478:	80 2f       	mov	r24, r16
    c47a:	19 95       	eicall
    c47c:	89 2b       	or	r24, r25
    c47e:	31 f4       	brne	.+12     	; 0xc48c <fputc+0x48>
    c480:	8e 81       	ldd	r24, Y+6	; 0x06
    c482:	9f 81       	ldd	r25, Y+7	; 0x07
    c484:	01 96       	adiw	r24, 0x01	; 1
    c486:	8e 83       	std	Y+6, r24	; 0x06
    c488:	9f 83       	std	Y+7, r25	; 0x07
    c48a:	02 c0       	rjmp	.+4      	; 0xc490 <fputc+0x4c>
    c48c:	0f ef       	ldi	r16, 0xFF	; 255
    c48e:	1f ef       	ldi	r17, 0xFF	; 255
    c490:	c8 01       	movw	r24, r16
    c492:	df 91       	pop	r29
    c494:	cf 91       	pop	r28
    c496:	1f 91       	pop	r17
    c498:	0f 91       	pop	r16
    c49a:	08 95       	ret

0000c49c <printf_P>:
    c49c:	df 93       	push	r29
    c49e:	cf 93       	push	r28
    c4a0:	cd b7       	in	r28, 0x3d	; 61
    c4a2:	de b7       	in	r29, 0x3e	; 62
    c4a4:	fe 01       	movw	r30, r28
    c4a6:	36 96       	adiw	r30, 0x06	; 6
    c4a8:	61 91       	ld	r22, Z+
    c4aa:	71 91       	ld	r23, Z+
    c4ac:	a0 91 64 25 	lds	r26, 0x2564
    c4b0:	b0 91 65 25 	lds	r27, 0x2565
    c4b4:	13 96       	adiw	r26, 0x03	; 3
    c4b6:	8c 91       	ld	r24, X
    c4b8:	13 97       	sbiw	r26, 0x03	; 3
    c4ba:	88 60       	ori	r24, 0x08	; 8
    c4bc:	13 96       	adiw	r26, 0x03	; 3
    c4be:	8c 93       	st	X, r24
    c4c0:	80 91 64 25 	lds	r24, 0x2564
    c4c4:	90 91 65 25 	lds	r25, 0x2565
    c4c8:	af 01       	movw	r20, r30
    c4ca:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <vfprintf>
    c4ce:	e0 91 64 25 	lds	r30, 0x2564
    c4d2:	f0 91 65 25 	lds	r31, 0x2565
    c4d6:	23 81       	ldd	r18, Z+3	; 0x03
    c4d8:	27 7f       	andi	r18, 0xF7	; 247
    c4da:	23 83       	std	Z+3, r18	; 0x03
    c4dc:	cf 91       	pop	r28
    c4de:	df 91       	pop	r29
    c4e0:	08 95       	ret

0000c4e2 <__ultoa_invert>:
    c4e2:	fa 01       	movw	r30, r20
    c4e4:	aa 27       	eor	r26, r26
    c4e6:	28 30       	cpi	r18, 0x08	; 8
    c4e8:	51 f1       	breq	.+84     	; 0xc53e <__ultoa_invert+0x5c>
    c4ea:	20 31       	cpi	r18, 0x10	; 16
    c4ec:	81 f1       	breq	.+96     	; 0xc54e <__ultoa_invert+0x6c>
    c4ee:	e8 94       	clt
    c4f0:	6f 93       	push	r22
    c4f2:	6e 7f       	andi	r22, 0xFE	; 254
    c4f4:	6e 5f       	subi	r22, 0xFE	; 254
    c4f6:	7f 4f       	sbci	r23, 0xFF	; 255
    c4f8:	8f 4f       	sbci	r24, 0xFF	; 255
    c4fa:	9f 4f       	sbci	r25, 0xFF	; 255
    c4fc:	af 4f       	sbci	r26, 0xFF	; 255
    c4fe:	b1 e0       	ldi	r27, 0x01	; 1
    c500:	3e d0       	rcall	.+124    	; 0xc57e <__ultoa_invert+0x9c>
    c502:	b4 e0       	ldi	r27, 0x04	; 4
    c504:	3c d0       	rcall	.+120    	; 0xc57e <__ultoa_invert+0x9c>
    c506:	67 0f       	add	r22, r23
    c508:	78 1f       	adc	r23, r24
    c50a:	89 1f       	adc	r24, r25
    c50c:	9a 1f       	adc	r25, r26
    c50e:	a1 1d       	adc	r26, r1
    c510:	68 0f       	add	r22, r24
    c512:	79 1f       	adc	r23, r25
    c514:	8a 1f       	adc	r24, r26
    c516:	91 1d       	adc	r25, r1
    c518:	a1 1d       	adc	r26, r1
    c51a:	6a 0f       	add	r22, r26
    c51c:	71 1d       	adc	r23, r1
    c51e:	81 1d       	adc	r24, r1
    c520:	91 1d       	adc	r25, r1
    c522:	a1 1d       	adc	r26, r1
    c524:	20 d0       	rcall	.+64     	; 0xc566 <__ultoa_invert+0x84>
    c526:	09 f4       	brne	.+2      	; 0xc52a <__ultoa_invert+0x48>
    c528:	68 94       	set
    c52a:	3f 91       	pop	r19
    c52c:	2a e0       	ldi	r18, 0x0A	; 10
    c52e:	26 9f       	mul	r18, r22
    c530:	11 24       	eor	r1, r1
    c532:	30 19       	sub	r19, r0
    c534:	30 5d       	subi	r19, 0xD0	; 208
    c536:	31 93       	st	Z+, r19
    c538:	de f6       	brtc	.-74     	; 0xc4f0 <__ultoa_invert+0xe>
    c53a:	cf 01       	movw	r24, r30
    c53c:	08 95       	ret
    c53e:	46 2f       	mov	r20, r22
    c540:	47 70       	andi	r20, 0x07	; 7
    c542:	40 5d       	subi	r20, 0xD0	; 208
    c544:	41 93       	st	Z+, r20
    c546:	b3 e0       	ldi	r27, 0x03	; 3
    c548:	0f d0       	rcall	.+30     	; 0xc568 <__ultoa_invert+0x86>
    c54a:	c9 f7       	brne	.-14     	; 0xc53e <__ultoa_invert+0x5c>
    c54c:	f6 cf       	rjmp	.-20     	; 0xc53a <__ultoa_invert+0x58>
    c54e:	46 2f       	mov	r20, r22
    c550:	4f 70       	andi	r20, 0x0F	; 15
    c552:	40 5d       	subi	r20, 0xD0	; 208
    c554:	4a 33       	cpi	r20, 0x3A	; 58
    c556:	18 f0       	brcs	.+6      	; 0xc55e <__ultoa_invert+0x7c>
    c558:	49 5d       	subi	r20, 0xD9	; 217
    c55a:	31 fd       	sbrc	r19, 1
    c55c:	40 52       	subi	r20, 0x20	; 32
    c55e:	41 93       	st	Z+, r20
    c560:	02 d0       	rcall	.+4      	; 0xc566 <__ultoa_invert+0x84>
    c562:	a9 f7       	brne	.-22     	; 0xc54e <__ultoa_invert+0x6c>
    c564:	ea cf       	rjmp	.-44     	; 0xc53a <__ultoa_invert+0x58>
    c566:	b4 e0       	ldi	r27, 0x04	; 4
    c568:	a6 95       	lsr	r26
    c56a:	97 95       	ror	r25
    c56c:	87 95       	ror	r24
    c56e:	77 95       	ror	r23
    c570:	67 95       	ror	r22
    c572:	ba 95       	dec	r27
    c574:	c9 f7       	brne	.-14     	; 0xc568 <__ultoa_invert+0x86>
    c576:	00 97       	sbiw	r24, 0x00	; 0
    c578:	61 05       	cpc	r22, r1
    c57a:	71 05       	cpc	r23, r1
    c57c:	08 95       	ret
    c57e:	9b 01       	movw	r18, r22
    c580:	ac 01       	movw	r20, r24
    c582:	0a 2e       	mov	r0, r26
    c584:	06 94       	lsr	r0
    c586:	57 95       	ror	r21
    c588:	47 95       	ror	r20
    c58a:	37 95       	ror	r19
    c58c:	27 95       	ror	r18
    c58e:	ba 95       	dec	r27
    c590:	c9 f7       	brne	.-14     	; 0xc584 <__ultoa_invert+0xa2>
    c592:	62 0f       	add	r22, r18
    c594:	73 1f       	adc	r23, r19
    c596:	84 1f       	adc	r24, r20
    c598:	95 1f       	adc	r25, r21
    c59a:	a0 1d       	adc	r26, r0
    c59c:	08 95       	ret

0000c59e <__ctype_isfalse>:
    c59e:	99 27       	eor	r25, r25
    c5a0:	88 27       	eor	r24, r24

0000c5a2 <__ctype_istrue>:
    c5a2:	08 95       	ret

0000c5a4 <fgetc>:
    c5a4:	cf 93       	push	r28
    c5a6:	df 93       	push	r29
    c5a8:	ec 01       	movw	r28, r24
    c5aa:	4b 81       	ldd	r20, Y+3	; 0x03
    c5ac:	40 ff       	sbrs	r20, 0
    c5ae:	1a c0       	rjmp	.+52     	; 0xc5e4 <fgetc+0x40>
    c5b0:	46 ff       	sbrs	r20, 6
    c5b2:	0a c0       	rjmp	.+20     	; 0xc5c8 <fgetc+0x24>
    c5b4:	4f 7b       	andi	r20, 0xBF	; 191
    c5b6:	4b 83       	std	Y+3, r20	; 0x03
    c5b8:	8e 81       	ldd	r24, Y+6	; 0x06
    c5ba:	9f 81       	ldd	r25, Y+7	; 0x07
    c5bc:	01 96       	adiw	r24, 0x01	; 1
    c5be:	8e 83       	std	Y+6, r24	; 0x06
    c5c0:	9f 83       	std	Y+7, r25	; 0x07
    c5c2:	8a 81       	ldd	r24, Y+2	; 0x02
    c5c4:	28 2f       	mov	r18, r24
    c5c6:	2b c0       	rjmp	.+86     	; 0xc61e <fgetc+0x7a>
    c5c8:	42 ff       	sbrs	r20, 2
    c5ca:	13 c0       	rjmp	.+38     	; 0xc5f2 <fgetc+0x4e>
    c5cc:	e8 81       	ld	r30, Y
    c5ce:	f9 81       	ldd	r31, Y+1	; 0x01
    c5d0:	80 81       	ld	r24, Z
    c5d2:	28 2f       	mov	r18, r24
    c5d4:	33 27       	eor	r19, r19
    c5d6:	27 fd       	sbrc	r18, 7
    c5d8:	30 95       	com	r19
    c5da:	21 15       	cp	r18, r1
    c5dc:	31 05       	cpc	r19, r1
    c5de:	29 f4       	brne	.+10     	; 0xc5ea <fgetc+0x46>
    c5e0:	40 62       	ori	r20, 0x20	; 32
    c5e2:	4b 83       	std	Y+3, r20	; 0x03
    c5e4:	2f ef       	ldi	r18, 0xFF	; 255
    c5e6:	3f ef       	ldi	r19, 0xFF	; 255
    c5e8:	1b c0       	rjmp	.+54     	; 0xc620 <fgetc+0x7c>
    c5ea:	31 96       	adiw	r30, 0x01	; 1
    c5ec:	e8 83       	st	Y, r30
    c5ee:	f9 83       	std	Y+1, r31	; 0x01
    c5f0:	11 c0       	rjmp	.+34     	; 0xc614 <fgetc+0x70>
    c5f2:	ea 85       	ldd	r30, Y+10	; 0x0a
    c5f4:	fb 85       	ldd	r31, Y+11	; 0x0b
    c5f6:	ce 01       	movw	r24, r28
    c5f8:	19 95       	eicall
    c5fa:	9c 01       	movw	r18, r24
    c5fc:	97 ff       	sbrs	r25, 7
    c5fe:	0a c0       	rjmp	.+20     	; 0xc614 <fgetc+0x70>
    c600:	9b 81       	ldd	r25, Y+3	; 0x03
    c602:	2f 5f       	subi	r18, 0xFF	; 255
    c604:	3f 4f       	sbci	r19, 0xFF	; 255
    c606:	11 f0       	breq	.+4      	; 0xc60c <fgetc+0x68>
    c608:	80 e2       	ldi	r24, 0x20	; 32
    c60a:	01 c0       	rjmp	.+2      	; 0xc60e <fgetc+0x6a>
    c60c:	80 e1       	ldi	r24, 0x10	; 16
    c60e:	89 2b       	or	r24, r25
    c610:	8b 83       	std	Y+3, r24	; 0x03
    c612:	e8 cf       	rjmp	.-48     	; 0xc5e4 <fgetc+0x40>
    c614:	8e 81       	ldd	r24, Y+6	; 0x06
    c616:	9f 81       	ldd	r25, Y+7	; 0x07
    c618:	01 96       	adiw	r24, 0x01	; 1
    c61a:	8e 83       	std	Y+6, r24	; 0x06
    c61c:	9f 83       	std	Y+7, r25	; 0x07
    c61e:	30 e0       	ldi	r19, 0x00	; 0
    c620:	c9 01       	movw	r24, r18
    c622:	df 91       	pop	r29
    c624:	cf 91       	pop	r28
    c626:	08 95       	ret

0000c628 <_exit>:
    c628:	f8 94       	cli

0000c62a <__stop_program>:
    c62a:	ff cf       	rjmp	.-2      	; 0xc62a <__stop_program>
