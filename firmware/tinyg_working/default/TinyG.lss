
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009578  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00802000  00009578  0000960c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000045e  0080212a  0080212a  00009736  2**0
                  ALLOC
  3 .debug_aranges 00000380  00000000  00000000  00009736  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e8d  00000000  00000000  00009ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000d88c  00000000  00000000  0000a943  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e10  00000000  00000000  000181cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000052d7  00000000  00000000  0001afdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ad0  00000000  00000000  000202b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000024d8  00000000  00000000  00020d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003c4e  00000000  00000000  00023260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00026eae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a6 0f 	jmp	0x1f4c	; 0x1f4c <__ctors_end>
       4:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
       8:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
       c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      10:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      14:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      18:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      1c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      20:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      24:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      28:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      2c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      30:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      34:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      38:	0c 94 b2 27 	jmp	0x4f64	; 0x4f64 <__vector_14>
      3c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      40:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      44:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      48:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      4c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      50:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      54:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      58:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      5c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      60:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      64:	0c 94 5c 2c 	jmp	0x58b8	; 0x58b8 <__vector_25>
      68:	0c 94 01 2a 	jmp	0x5402	; 0x5402 <__vector_26>
      6c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      70:	0c 94 10 37 	jmp	0x6e20	; 0x6e20 <__vector_28>
      74:	0c 94 d8 34 	jmp	0x69b0	; 0x69b0 <__vector_29>
      78:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      7c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      80:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      84:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      88:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      8c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      90:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      94:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      98:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      9c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      a0:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      a4:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      a8:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      ac:	0c 94 6e 33 	jmp	0x66dc	; 0x66dc <__vector_43>
      b0:	0c 94 78 33 	jmp	0x66f0	; 0x66f0 <__vector_44>
      b4:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      b8:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      bc:	0c 94 e8 26 	jmp	0x4dd0	; 0x4dd0 <__vector_47>
      c0:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      c4:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      c8:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      cc:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      d0:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      d4:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      d8:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      dc:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      e0:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      e4:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      e8:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      ec:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      f0:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      f4:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      f8:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
      fc:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     100:	0c 94 82 33 	jmp	0x6704	; 0x6704 <__vector_64>
     104:	0c 94 8c 33 	jmp	0x6718	; 0x6718 <__vector_65>
     108:	0c 94 46 33 	jmp	0x668c	; 0x668c <__vector_66>
     10c:	0c 94 50 33 	jmp	0x66a0	; 0x66a0 <__vector_67>
     110:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     114:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     118:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     11c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     120:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     124:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     128:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     12c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     130:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     134:	0c 94 4d 27 	jmp	0x4e9a	; 0x4e9a <__vector_77>
     138:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     13c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     140:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     144:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     148:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     14c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     150:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     154:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     158:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     15c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     160:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     164:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     168:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     16c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     170:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     174:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     178:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     17c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     180:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     184:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     188:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     18c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     190:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     194:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     198:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     19c:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     1a0:	0c 94 5a 33 	jmp	0x66b4	; 0x66b4 <__vector_104>
     1a4:	0c 94 64 33 	jmp	0x66c8	; 0x66c8 <__vector_105>
     1a8:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     1ac:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     1b0:	0c 94 83 26 	jmp	0x4d06	; 0x4d06 <__vector_108>
     1b4:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     1b8:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     1bc:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     1c0:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     1c4:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     1c8:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     1cc:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     1d0:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     1d4:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     1d8:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     1dc:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     1e0:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     1e4:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <cfgMsgXaxis>:
     23b:	58 00                                               X.

0000023d <cfgMsgYaxis>:
     23d:	59 00                                               Y.

0000023f <cfgMsgZaxis>:
     23f:	5a 00                                               Z.

00000241 <cfgMsgAaxis>:
     241:	41 00                                               A.

00000243 <cfgMsgs>:
     243:	3b 02 3d 02 3f 02 41 02                             ;.=.?.A.

0000024b <configs_P>:
     24b:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25b:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26b:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27b:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28b:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29b:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2ab:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bb:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2db:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2eb:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2fb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30b:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31b:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32b:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33b:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34b:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35b:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36b:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37b:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38b:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

00000399 <__c.3833>:
     399:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     3a9:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

000003b4 <__c.3830>:
     3b4:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     3c4:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

000003ce <__c.3827>:
     3ce:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     3de:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

000003e8 <__c.3824>:
     3e8:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     3f8:	74 3a 20 25 73 0a 00                                t: %s..

000003ff <__c.3821>:
     3ff:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     40f:	4d 6f 64 65 0a 00                                   Mode..

00000415 <__c.3818>:
     415:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     425:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

00000432 <__c.3750>:
     432:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     442:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     452:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     462:	29 0a 0a 00                                         )...

00000466 <__c.3748>:
     466:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     476:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     486:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000496 <__c.3746>:
     496:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     4a6:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4b6:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004c7 <__c.3744>:
     4c7:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     4d7:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4e7:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004f8 <__c.3742>:
     4f8:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     508:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     518:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     528:	6c 0a 00                                            l..

0000052b <__c.3740>:
     52b:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     53b:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     54b:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     55b:	6e 0a 00                                            n..

0000055e <__c.3738>:
     55e:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     56e:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     57e:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     58e:	74 65 70 73 29 0a 00                                teps)..

00000595 <__c.3736>:
     595:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     5a5:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     5b5:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     5c5:	70 0a 00                                            p..

000005c8 <__c.3734>:
     5c8:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     5d8:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     5e8:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     5f8:	73 74 65 70 73 29 0a 00                             steps)..

00000600 <__c.3732>:
     600:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     610:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     620:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     630:	73 74 65 70 73 29 0a 00                             steps)..

00000638 <__c.3727>:
     638:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     648:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

00000656 <__c.3713>:
     656:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     666:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     676:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000681 <__c.3711>:
     681:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     691:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     6a1:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000006ab <__c.3709>:
     6ab:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     6bb:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     6cb:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000006d5 <__c.3707>:
     6d5:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     6e5:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     6f5:	73 20 2d 2d 2d 0a 00                                s ---..

000006fc <__c.3705>:
     6fc:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     70c:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     71c:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000724 <__c.3542>:
     724:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     734:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     744:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000750 <readlnFuncs>:
     750:	c8 2b 9d 2b 9d 2b 08 2c 9d 2b 9d 2b 9d 2b 9d 2b     .+.+.+.,.+.+.+.+
     760:	f4 2b 9d 2b c8 2b 9d 2b 9d 2b c8 2b 9d 2b 9d 2b     .+.+.+.+.+.+.+.+
     770:	9d 2b 14 2c 9d 2b 0e 2c 9d 2b 9d 2b 9d 2b 9d 2b     .+.,.+.,.+.+.+.+
     780:	08 2c 9d 2b 9d 2b 08 2c 9d 2b 9d 2b 9d 2b 9d 2b     .,.+.+.,.+.+.+.+
     790:	9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b     .+.+.+.+.+.+.+.+
     7a0:	9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b     .+.+.+.+.+.+.+.+
     7b0:	9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b     .+.+.+.+.+.+.+.+
     7c0:	9d 2b 9d 2b 9d 2b ea 2b 9d 2b 9d 2b 9d 2b 9d 2b     .+.+.+.+.+.+.+.+
     7d0:	9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b     .+.+.+.+.+.+.+.+
     7e0:	9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b     .+.+.+.+.+.+.+.+
     7f0:	9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b     .+.+.+.+.+.+.+.+
     800:	9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b     .+.+.+.+.+.+.+.+
     810:	9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b     .+.+.+.+.+.+.+.+
     820:	9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b     .+.+.+.+.+.+.+.+
     830:	9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b     .+.+.+.+.+.+.+.+
     840:	9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b 9d 2b f4 2b     .+.+.+.+.+.+.+.+

00000850 <getcFuncs>:
     850:	17 2b 07 2b 07 2b 08 2c 07 2b 07 2b 07 2b 07 2b     .+.+.+.,.+.+.+.+
     860:	36 2b 07 2b 17 2b 07 2b 07 2b 17 2b 07 2b 07 2b     6+.+.+.+.+.+.+.+
     870:	07 2b 14 2c 07 2b 0e 2c 07 2b 07 2b 07 2b 07 2b     .+.,.+.,.+.+.+.+
     880:	08 2c 07 2b 07 2b 08 2c 07 2b 07 2b 07 2b 07 2b     .,.+.+.,.+.+.+.+
     890:	07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b     .+.+.+.+.+.+.+.+
     8a0:	07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b     .+.+.+.+.+.+.+.+
     8b0:	07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b     .+.+.+.+.+.+.+.+
     8c0:	07 2b 07 2b 07 2b 2c 2b 07 2b 07 2b 07 2b 07 2b     .+.+.+,+.+.+.+.+
     8d0:	07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b     .+.+.+.+.+.+.+.+
     8e0:	07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b     .+.+.+.+.+.+.+.+
     8f0:	07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b     .+.+.+.+.+.+.+.+
     900:	07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b     .+.+.+.+.+.+.+.+
     910:	07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b     .+.+.+.+.+.+.+.+
     920:	07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b     .+.+.+.+.+.+.+.+
     930:	07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b     .+.+.+.+.+.+.+.+
     940:	07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 07 2b 36 2b     .+.+.+.+.+.+.+6+

00000950 <square_test1>:
     950:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     960:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     970:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     980:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     990:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     9a0:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     9b0:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000009be <square_test2>:
     9be:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     9ce:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     9de:	78 30 20 79 30 00                                   x0 y0.

000009e4 <square_test10>:
     9e4:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     9f4:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     a04:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000a10 <circle_test10>:
     a10:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     a20:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     a30:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     a40:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     a50:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     a60:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     a70:	30 00                                               0.

00000a72 <square_circle_test10>:
     a72:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     a82:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     a92:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     aa2:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     ab2:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     ac2:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     ad2:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     ae2:	31 30 20 79 30 00                                   10 y0.

00000ae8 <square_circle_test100>:
     ae8:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     af8:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     b08:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     b18:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     b28:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     b38:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     b48:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     b58:	35 30 20 6a 30 00                                   50 j0.

00000b5e <spiral_test5>:
     b5e:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     b6e:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     b7e:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     b8e:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     b9e:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     bae:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     bbe:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     bce:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

00000bd8 <spiral_test50a>:
     bd8:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     be8:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

00000bf8 <dwell_test1>:
     bf8:	67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30 20     g0 x10.g4 p1.g0 
     c08:	78 32 30 0a 67 34 20 70 31 0a 67 30 20 78 31 30     x20.g4 p1.g0 x10
     c18:	0a 67 34 20 70 31 0a 67 30 20 78 30 30 0a 67 34     .g4 p1.g0 x00.g4
     c28:	20 70 31 0a 67 30 20 78 31 30 0a 67 34 20 70 31      p1.g0 x10.g4 p1
     c38:	0a 67 30 20 78 32 30 0a 67 34 20 70 31 0a 67 30     .g0 x20.g4 p1.g0
     c48:	20 78 31 30 0a 67 34 20 70 31 0a 67 30 20 78 30      x10.g4 p1.g0 x0
     c58:	0a 67 34 20 70 31 0a 67 30 20 78 31 30 0a 67 34     .g4 p1.g0 x10.g4
     c68:	20 70 31 0a 67 30 20 78 32 30 0a 67 34 20 70 31      p1.g0 x20.g4 p1
     c78:	0a 67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30     .g0 x10.g4 p1.g0
     c88:	20 78 30 00                                          x0.

00000c8c <dwell_test2>:
     c8c:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     c9c:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     cac:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     cbc:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     ccc:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     cdc:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     cec:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     cfc:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     d0c:	20 70 31 0a 67 30 20 78 30 00                        p1.g0 x0.

00000d16 <dwell_testMax>:
     d16:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000d20 <g0_test1>:
     d20:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     d30:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000d40 <g0_test2>:
     d40:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     d50:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     d60:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     d70:	79 30 20 7a 30 00                                   y0 z0.

00000d76 <g0_test3>:
     d76:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     d86:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     d96:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000da4 <radius_arc_test1>:
     da4:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     db4:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     dc4:	72 35 30 0a 00                                      r50..

00000dc9 <radius_arc_test2>:
     dc9:	67 32 0a 00                                         g2..

00000dcd <zoetrope>:
     dcd:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     ddd:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     ded:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     dfd:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     e0d:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     e1d:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     e2d:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     e3d:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     e4d:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     e5d:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     e6d:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     e7d:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     e8d:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     e9d:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     ead:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     ebd:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     ecd:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     edd:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     eed:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     efd:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     f0d:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     f1d:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     f2d:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     f3d:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     f4d:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     f5d:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     f6d:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     f7d:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     f8d:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     f9d:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     fad:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     fbd:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     fcd:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     fdd:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     fed:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     ffd:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
    100d:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
    101d:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
    102d:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
    103d:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
    104d:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
    105d:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
    106d:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
    107d:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
    108d:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
    109d:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
    10ad:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
    10bd:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
    10cd:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
    10dd:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
    10ed:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
    10fd:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
    110d:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
    111d:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
    112d:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
    113d:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
    114d:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
    115d:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
    116d:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
    117d:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
    118d:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
    119d:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
    11ad:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
    11bd:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
    11cd:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
    11dd:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
    11ed:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
    11fd:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    120d:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    121d:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    122d:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    123d:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    124d:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    125d:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    126d:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    127d:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    128d:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    129d:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    12ad:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    12bd:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    12cd:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    12dd:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    12ed:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    12fd:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    130d:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    131d:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    132d:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    133d:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    134d:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    135d:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    136d:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    137d:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    138d:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    139d:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    13ad:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    13bd:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    13cd:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    13dd:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    13ed:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    13fd:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    140d:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    141d:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    142d:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    143d:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    144d:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    145d:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    146d:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    147d:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    148d:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    149d:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    14ad:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    14bd:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    14cd:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    14dd:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    14ed:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    14fd:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    150d:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    151d:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    152d:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    153d:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    154d:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    155d:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    156d:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    157d:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    158d:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    159d:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    15ad:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    15bd:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    15cd:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    15dd:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    15ed:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    15fd:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    160d:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    161d:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    162d:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    163d:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    164d:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    165d:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    166d:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    167d:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    168d:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    169d:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    16ad:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    16bd:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    16cd:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    16dd:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    16ed:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    16fd:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    170d:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    171d:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    172d:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    173d:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    174d:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    175d:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    176d:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    177d:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

00001788 <contraptor_circle>:
    1788:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    1798:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    17a8:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    17b8:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    17c8:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    17d8:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    17e8:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    17f8:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    1808:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    1818:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    1828:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    1838:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    1848:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    1858:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    1868:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    1878:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    1888:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    1898:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    18a8:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    18b8:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    18c8:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    18d8:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    18e8:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    18f8:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    1908:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    1918:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    1928:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    1938:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    1948:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    1958:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    1968:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    1978:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    1988:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    1998:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    19a8:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    19b8:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    19c8:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    19d8:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    19e8:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    19f8:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    1a08:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1a18:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1a28:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    1a38:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    1a48:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    1a58:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    1a68:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    1a78:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    1a88:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1a98:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    1aa8:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    1ab8:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    1ac8:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    1ad8:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    1ae8:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    1af8:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    1b08:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1b18:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1b28:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1b38:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1b48:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1b58:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001b68 <tgModeStringControl>:
    1b68:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001b75 <tgModeStringConfig>:
    1b75:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001b81 <tgModeStringGCode>:
    1b81:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

00001b8d <tgModeStringDirect>:
    1b8d:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

00001b9a <tgModeStrings>:
    1b9a:	68 1b 75 1b 81 1b 8d 1b                             h.u.....

00001ba2 <__c.3851>:
    1ba2:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1bb2:	69 6c 65 0a 00                                      ile..

00001bb7 <__c.3912>:
    1bb7:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001bc5 <__c.3830>:
    1bc5:	62 75 69 6c 64 20 32 30 33 00                       build 203.

00001bcf <__c.3828>:
    1bcf:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1bdf:	25 53 0a 00                                         %S..

00001be3 <readlnFuncs>:
    1be3:	7c 36 51 36 51 36 bc 36 51 36 51 36 51 36 51 36     |6Q6Q6.6Q6Q6Q6Q6
    1bf3:	a8 36 51 36 7c 36 51 36 51 36 7c 36 51 36 51 36     .6Q6|6Q6Q6|6Q6Q6
    1c03:	51 36 c8 36 51 36 c2 36 51 36 51 36 51 36 51 36     Q6.6Q6.6Q6Q6Q6Q6
    1c13:	bc 36 51 36 51 36 bc 36 51 36 51 36 51 36 51 36     .6Q6Q6.6Q6Q6Q6Q6
    1c23:	51 36 51 36 51 36 51 36 51 36 51 36 51 36 51 36     Q6Q6Q6Q6Q6Q6Q6Q6
    1c33:	51 36 51 36 51 36 51 36 51 36 51 36 51 36 51 36     Q6Q6Q6Q6Q6Q6Q6Q6
    1c43:	51 36 51 36 51 36 51 36 51 36 51 36 51 36 51 36     Q6Q6Q6Q6Q6Q6Q6Q6
    1c53:	51 36 51 36 51 36 9e 36 51 36 51 36 51 36 51 36     Q6Q6Q6.6Q6Q6Q6Q6
    1c63:	51 36 51 36 51 36 51 36 51 36 51 36 51 36 51 36     Q6Q6Q6Q6Q6Q6Q6Q6
    1c73:	51 36 51 36 51 36 51 36 51 36 51 36 51 36 51 36     Q6Q6Q6Q6Q6Q6Q6Q6
    1c83:	51 36 51 36 51 36 51 36 51 36 51 36 51 36 51 36     Q6Q6Q6Q6Q6Q6Q6Q6
    1c93:	51 36 51 36 51 36 51 36 51 36 51 36 51 36 51 36     Q6Q6Q6Q6Q6Q6Q6Q6
    1ca3:	51 36 51 36 51 36 51 36 51 36 51 36 51 36 51 36     Q6Q6Q6Q6Q6Q6Q6Q6
    1cb3:	51 36 51 36 51 36 51 36 51 36 51 36 51 36 51 36     Q6Q6Q6Q6Q6Q6Q6Q6
    1cc3:	51 36 51 36 51 36 51 36 51 36 51 36 51 36 51 36     Q6Q6Q6Q6Q6Q6Q6Q6
    1cd3:	51 36 51 36 51 36 51 36 51 36 51 36 51 36 a8 36     Q6Q6Q6Q6Q6Q6Q6.6

00001ce3 <getcFuncs>:
    1ce3:	ee 35 de 35 de 35 bc 36 de 35 de 35 de 35 de 35     .5.5.5.6.5.5.5.5
    1cf3:	0d 36 de 35 ee 35 de 35 de 35 ee 35 de 35 de 35     .6.5.5.5.5.5.5.5
    1d03:	de 35 c8 36 de 35 c2 36 de 35 de 35 de 35 de 35     .5.6.5.6.5.5.5.5
    1d13:	bc 36 de 35 de 35 bc 36 de 35 de 35 de 35 de 35     .6.5.5.6.5.5.5.5
    1d23:	de 35 de 35 de 35 de 35 de 35 de 35 de 35 de 35     .5.5.5.5.5.5.5.5
    1d33:	de 35 de 35 de 35 de 35 de 35 de 35 de 35 de 35     .5.5.5.5.5.5.5.5
    1d43:	de 35 de 35 de 35 de 35 de 35 de 35 de 35 de 35     .5.5.5.5.5.5.5.5
    1d53:	de 35 de 35 de 35 03 36 de 35 de 35 de 35 de 35     .5.5.5.6.5.5.5.5
    1d63:	de 35 de 35 de 35 de 35 de 35 de 35 de 35 de 35     .5.5.5.5.5.5.5.5
    1d73:	de 35 de 35 de 35 de 35 de 35 de 35 de 35 de 35     .5.5.5.5.5.5.5.5
    1d83:	de 35 de 35 de 35 de 35 de 35 de 35 de 35 de 35     .5.5.5.5.5.5.5.5
    1d93:	de 35 de 35 de 35 de 35 de 35 de 35 de 35 de 35     .5.5.5.5.5.5.5.5
    1da3:	de 35 de 35 de 35 de 35 de 35 de 35 de 35 de 35     .5.5.5.5.5.5.5.5
    1db3:	de 35 de 35 de 35 de 35 de 35 de 35 de 35 de 35     .5.5.5.5.5.5.5.5
    1dc3:	de 35 de 35 de 35 de 35 de 35 de 35 de 35 de 35     .5.5.5.5.5.5.5.5
    1dd3:	de 35 de 35 de 35 de 35 de 35 de 35 de 35 0d 36     .5.5.5.5.5.5.5.6

00001de3 <usart_addr>:
    1de3:	b0 08 a0 08 a0 08                                   ......

00001de9 <port_addr>:
    1de9:	40 06 40 06 40 06                                   @.@.@.

00001def <dirclr_bm>:
    1def:	40 05 04                                            @..

00001df2 <dirset_bm>:
    1df2:	b0 0a 08                                            ...

00001df5 <outclr_bm>:
    1df5:	30 00 00                                            0..

00001df8 <outset_bm>:
    1df8:	80 0a 08                                            ...

00001dfb <controls>:
    1dfb:	35 15 35 55 35 55                                   5.5U5U

00001e01 <bsel>:
    1e01:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

00001e0c <bscale>:
    1e0c:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

00001e17 <pstr_inf>:
    1e17:	49 4e 46                                            INF

00001e1a <pstr_inity>:
    1e1a:	49 4e 49 54 59                                      INITY

00001e1f <pstr_nan>:
    1e1f:	4e 41 4e                                            NAN

00001e22 <pwr_m10>:
    1e22:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1e32:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001e3a <pwr_p10>:
    1e3a:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1e4a:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1e5a:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1e6a:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1e7a:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1e8a:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1e9a:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1eaa:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1eba:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1eca:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1eda:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1eea:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1efa:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1f0a:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1f1a:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1f2a:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1f3a:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1f4a:	3d 27                                               ='

00001f4c <__ctors_end>:
    1f4c:	11 24       	eor	r1, r1
    1f4e:	1f be       	out	0x3f, r1	; 63
    1f50:	cf ef       	ldi	r28, 0xFF	; 255
    1f52:	df e5       	ldi	r29, 0x5F	; 95
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	00 e0       	ldi	r16, 0x00	; 0
    1f5a:	0c bf       	out	0x3c, r16	; 60

00001f5c <__do_copy_data>:
    1f5c:	11 e2       	ldi	r17, 0x21	; 33
    1f5e:	a0 e0       	ldi	r26, 0x00	; 0
    1f60:	b0 e2       	ldi	r27, 0x20	; 32
    1f62:	e8 e7       	ldi	r30, 0x78	; 120
    1f64:	f5 e9       	ldi	r31, 0x95	; 149
    1f66:	00 e0       	ldi	r16, 0x00	; 0
    1f68:	0b bf       	out	0x3b, r16	; 59
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <__do_copy_data+0x14>
    1f6c:	07 90       	elpm	r0, Z+
    1f6e:	0d 92       	st	X+, r0
    1f70:	aa 32       	cpi	r26, 0x2A	; 42
    1f72:	b1 07       	cpc	r27, r17
    1f74:	d9 f7       	brne	.-10     	; 0x1f6c <__do_copy_data+0x10>

00001f76 <__do_clear_bss>:
    1f76:	15 e2       	ldi	r17, 0x25	; 37
    1f78:	aa e2       	ldi	r26, 0x2A	; 42
    1f7a:	b1 e2       	ldi	r27, 0x21	; 33
    1f7c:	01 c0       	rjmp	.+2      	; 0x1f80 <.do_clear_bss_start>

00001f7e <.do_clear_bss_loop>:
    1f7e:	1d 92       	st	X+, r1

00001f80 <.do_clear_bss_start>:
    1f80:	a8 38       	cpi	r26, 0x88	; 136
    1f82:	b1 07       	cpc	r27, r17
    1f84:	e1 f7       	brne	.-8      	; 0x1f7e <.do_clear_bss_loop>
    1f86:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <main>
    1f8a:	0c 94 ba 4a 	jmp	0x9574	; 0x9574 <_exit>

00001f8e <__bad_interrupt>:
    1f8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001f92 <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1f92:	f8 94       	cli
	xmega_init();				// xmega setup
    1f94:	0e 94 c0 1b 	call	0x3780	; 0x3780 <xmega_init>
	xio_init();					// xmega io subsystem
    1f98:	0e 94 74 28 	call	0x50e8	; 0x50e8 <xio_init>

	cfg_init();					// get config record from eeprom
    1f9c:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <cfg_init>
	st_init(); 					// stepper subsystem
    1fa0:	0e 94 3f 24 	call	0x487e	; 0x487e <st_init>
	ls_init();					// limit switches
    1fa4:	0e 94 1e 33 	call	0x663c	; 0x663c <ls_init>
	mv_init();					// move buffers
    1fa8:	0e 94 fa 30 	call	0x61f4	; 0x61f4 <mv_init>
	mc_init();					// motion control subsystem
    1fac:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <mc_init>
	spindle_init();				// spindle controller
    1fb0:	0e 94 23 24 	call	0x4846	; 0x4846 <spindle_init>
	en_init();					// encoders
    1fb4:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <en_init>
	gc_init();					// gcode-parser
    1fb8:	0e 94 18 10 	call	0x2030	; 0x2030 <gc_init>
	dd_init();					// direct drive commands
    1fbc:	0e 94 f6 30 	call	0x61ec	; 0x61ec <dd_init>
	tg_init();					// tinyg parsers
    1fc0:	0e 94 cd 30 	call	0x619a	; 0x619a <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1fc4:	0e 94 25 28 	call	0x504a	; 0x504a <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1fc8:	e0 ea       	ldi	r30, 0xA0	; 160
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 91 a2 00 	lds	r24, 0x00A2
    1fd0:	81 60       	ori	r24, 0x01	; 1
    1fd2:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1fd4:	80 91 a2 00 	lds	r24, 0x00A2
    1fd8:	82 60       	ori	r24, 0x02	; 2
    1fda:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1fdc:	80 91 a2 00 	lds	r24, 0x00A2
    1fe0:	84 60       	ori	r24, 0x04	; 4
    1fe2:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1fe4:	78 94       	sei
//	xio_usb_queue_RX_string("f\n");
//	xio_usb_queue_RX_string("?\n");
//	xio_usb_queue_RX_string("g0x10y10z25\n");

	for(;;){
		tg_controller();
    1fe6:	0e 94 3f 30 	call	0x607e	; 0x607e <tg_controller>
    1fea:	fd cf       	rjmp	.-6      	; 0x1fe6 <main+0x54>

00001fec <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1fec:	80 93 77 21 	sts	0x2177, r24
	gc.plane_axis_1 = axis_1;
    1ff0:	60 93 78 21 	sts	0x2178, r22
	gc.plane_axis_2 = axis_2;
    1ff4:	40 93 79 21 	sts	0x2179, r20
}
    1ff8:	08 95       	ret

00001ffa <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1ffa:	ef 92       	push	r14
    1ffc:	ff 92       	push	r15
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	7b 01       	movw	r14, r22
    2004:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    2006:	80 91 37 21 	lds	r24, 0x2137
    200a:	88 23       	and	r24, r24
    200c:	51 f0       	breq	.+20     	; 0x2022 <to_millimeters+0x28>
    200e:	c8 01       	movw	r24, r16
    2010:	b7 01       	movw	r22, r14
    2012:	25 e8       	ldi	r18, 0x85	; 133
    2014:	32 e4       	ldi	r19, 0x42	; 66
    2016:	41 e2       	ldi	r20, 0x21	; 33
    2018:	5d e3       	ldi	r21, 0x3D	; 61
    201a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    201e:	7b 01       	movw	r14, r22
    2020:	8c 01       	movw	r16, r24
}
    2022:	b7 01       	movw	r22, r14
    2024:	c8 01       	movw	r24, r16
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
    202a:	ff 90       	pop	r15
    202c:	ef 90       	pop	r14
    202e:	08 95       	ret

00002030 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    2030:	86 e5       	ldi	r24, 0x56	; 86
    2032:	ea e2       	ldi	r30, 0x2A	; 42
    2034:	f1 e2       	ldi	r31, 0x21	; 33
    2036:	df 01       	movw	r26, r30
    2038:	1d 92       	st	X+, r1
    203a:	8a 95       	dec	r24
    203c:	e9 f7       	brne	.-6      	; 0x2038 <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	a0 e0       	ldi	r26, 0x00	; 0
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	80 93 3b 21 	sts	0x213B, r24
    204a:	90 93 3c 21 	sts	0x213C, r25
    204e:	a0 93 3d 21 	sts	0x213D, r26
    2052:	b0 93 3e 21 	sts	0x213E, r27
	gc.radius = 0;							// radius value
    2056:	80 93 3f 21 	sts	0x213F, r24
    205a:	90 93 40 21 	sts	0x2140, r25
    205e:	a0 93 41 21 	sts	0x2141, r26
    2062:	b0 93 42 21 	sts	0x2142, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    2066:	80 91 1c 24 	lds	r24, 0x241C
    206a:	90 91 1d 24 	lds	r25, 0x241D
    206e:	a0 91 1e 24 	lds	r26, 0x241E
    2072:	b0 91 1f 24 	lds	r27, 0x241F
    2076:	80 93 43 21 	sts	0x2143, r24
    207a:	90 93 44 21 	sts	0x2144, r25
    207e:	a0 93 45 21 	sts	0x2145, r26
    2082:	b0 93 46 21 	sts	0x2146, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    2086:	80 91 20 24 	lds	r24, 0x2420
    208a:	90 91 21 24 	lds	r25, 0x2421
    208e:	a0 91 22 24 	lds	r26, 0x2422
    2092:	b0 91 23 24 	lds	r27, 0x2423
    2096:	80 93 47 21 	sts	0x2147, r24
    209a:	90 93 48 21 	sts	0x2148, r25
    209e:	a0 93 49 21 	sts	0x2149, r26
    20a2:	b0 93 4a 21 	sts	0x214A, r27

	gc.absolute_mode = TRUE;
    20a6:	21 e0       	ldi	r18, 0x01	; 1
    20a8:	20 93 38 21 	sts	0x2138, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a0 e8       	ldi	r26, 0x80	; 128
    20b2:	bf eb       	ldi	r27, 0xBF	; 191
    20b4:	80 93 4f 21 	sts	0x214F, r24
    20b8:	90 93 50 21 	sts	0x2150, r25
    20bc:	a0 93 51 21 	sts	0x2151, r26
    20c0:	b0 93 52 21 	sts	0x2152, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    20c4:	10 92 39 21 	sts	0x2139, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    20c8:	10 92 7e 21 	sts	0x217E, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    20cc:	10 92 7f 21 	sts	0x217F, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    20d0:	10 92 77 21 	sts	0x2177, r1
	gc.plane_axis_1 = axis_1;
    20d4:	20 93 78 21 	sts	0x2178, r18
	gc.plane_axis_2 = axis_2;
    20d8:	82 e0       	ldi	r24, 0x02	; 2
    20da:	80 93 79 21 	sts	0x2179, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X, Y, Z);
}
    20de:	08 95       	ret

000020e0 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    20e0:	4f 92       	push	r4
    20e2:	5f 92       	push	r5
    20e4:	6f 92       	push	r6
    20e6:	7f 92       	push	r7
    20e8:	8f 92       	push	r8
    20ea:	9f 92       	push	r9
    20ec:	af 92       	push	r10
    20ee:	bf 92       	push	r11
    20f0:	cf 92       	push	r12
    20f2:	df 92       	push	r13
    20f4:	ef 92       	push	r14
    20f6:	ff 92       	push	r15
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	0f 92       	push	r0
    2102:	0f 92       	push	r0
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	3b 01       	movw	r6, r22
    210a:	2a 01       	movw	r4, r20
    210c:	49 01       	movw	r8, r18
    210e:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    2110:	d8 01       	movw	r26, r16
    2112:	ed 91       	ld	r30, X+
    2114:	fc 91       	ld	r31, X
    2116:	e2 0f       	add	r30, r18
    2118:	f3 1f       	adc	r31, r19
    211a:	e0 81       	ld	r30, Z
    211c:	ee 23       	and	r30, r30
    211e:	41 f0       	breq	.+16     	; 0x2130 <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    2120:	dc 01       	movw	r26, r24
    2122:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    2124:	e1 54       	subi	r30, 0x41	; 65
    2126:	ea 31       	cpi	r30, 0x1A	; 26
    2128:	30 f0       	brcs	.+12     	; 0x2136 <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    212a:	8a e0       	ldi	r24, 0x0A	; 10
    212c:	80 93 2a 21 	sts	0x212A, r24
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	35 c0       	rjmp	.+106    	; 0x21a0 <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    2136:	f8 01       	movw	r30, r16
    2138:	80 81       	ld	r24, Z
    213a:	91 81       	ldd	r25, Z+1	; 0x01
    213c:	01 96       	adiw	r24, 0x01	; 1
    213e:	80 83       	st	Z, r24
    2140:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    2142:	89 01       	movw	r16, r18
    2144:	08 0f       	add	r16, r24
    2146:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    2148:	c8 01       	movw	r24, r16
    214a:	be 01       	movw	r22, r28
    214c:	6f 5f       	subi	r22, 0xFF	; 255
    214e:	7f 4f       	sbci	r23, 0xFF	; 255
    2150:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <strtod>
    2154:	6b 01       	movw	r12, r22
    2156:	7c 01       	movw	r14, r24
    2158:	d3 01       	movw	r26, r6
    215a:	6d 93       	st	X+, r22
    215c:	7d 93       	st	X+, r23
    215e:	8d 93       	st	X+, r24
    2160:	9c 93       	st	X, r25
    2162:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	9a 81       	ldd	r25, Y+2	; 0x02
    2168:	80 17       	cp	r24, r16
    216a:	91 07       	cpc	r25, r17
    216c:	11 f4       	brne	.+4      	; 0x2172 <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    216e:	8d e0       	ldi	r24, 0x0D	; 13
    2170:	dd cf       	rjmp	.-70     	; 0x212c <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    2172:	88 19       	sub	r24, r8
    2174:	99 09       	sbc	r25, r9
    2176:	f5 01       	movw	r30, r10
    2178:	80 83       	st	Z, r24
    217a:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    217c:	c7 01       	movw	r24, r14
    217e:	b6 01       	movw	r22, r12
    2180:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <trunc>
    2184:	9b 01       	movw	r18, r22
    2186:	ac 01       	movw	r20, r24
    2188:	c7 01       	movw	r24, r14
    218a:	b6 01       	movw	r22, r12
    218c:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    2190:	d2 01       	movw	r26, r4
    2192:	6d 93       	st	X+, r22
    2194:	7d 93       	st	X+, r23
    2196:	8d 93       	st	X+, r24
    2198:	9c 93       	st	X, r25
    219a:	13 97       	sbiw	r26, 0x03	; 3
    219c:	21 e0       	ldi	r18, 0x01	; 1
    219e:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    21a0:	c9 01       	movw	r24, r18
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	1f 91       	pop	r17
    21ac:	0f 91       	pop	r16
    21ae:	ff 90       	pop	r15
    21b0:	ef 90       	pop	r14
    21b2:	df 90       	pop	r13
    21b4:	cf 90       	pop	r12
    21b6:	bf 90       	pop	r11
    21b8:	af 90       	pop	r10
    21ba:	9f 90       	pop	r9
    21bc:	8f 90       	pop	r8
    21be:	7f 90       	pop	r7
    21c0:	6f 90       	pop	r6
    21c2:	5f 90       	pop	r5
    21c4:	4f 90       	pop	r4
    21c6:	08 95       	ret

000021c8 <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    21c8:	af 92       	push	r10
    21ca:	bf 92       	push	r11
    21cc:	cf 92       	push	r12
    21ce:	df 92       	push	r13
    21d0:	ef 92       	push	r14
    21d2:	ff 92       	push	r15
    21d4:	0f 93       	push	r16
    21d6:	1f 93       	push	r17
    21d8:	79 01       	movw	r14, r18
    21da:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    21dc:	5f 77       	andi	r21, 0x7F	; 127
    21de:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    21e2:	0e 94 a8 42 	call	0x8550	; 0x8550 <atan>
    21e6:	5b 01       	movw	r10, r22
    21e8:	6c 01       	movw	r12, r24

	if (y>0) {
    21ea:	c8 01       	movw	r24, r16
    21ec:	b7 01       	movw	r22, r14
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	50 e0       	ldi	r21, 0x00	; 0
    21f6:	0e 94 d3 44 	call	0x89a6	; 0x89a6 <__gesf2>
    21fa:	18 16       	cp	r1, r24
    21fc:	cc f0       	brlt	.+50     	; 0x2230 <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    21fe:	c6 01       	movw	r24, r12
    2200:	b5 01       	movw	r22, r10
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	0e 94 d3 44 	call	0x89a6	; 0x89a6 <__gesf2>
    220e:	18 16       	cp	r1, r24
    2210:	2c f4       	brge	.+10     	; 0x221c <theta+0x54>
	    {
			return(M_PI-theta);
    2212:	6b ed       	ldi	r22, 0xDB	; 219
    2214:	7f e0       	ldi	r23, 0x0F	; 15
    2216:	89 e4       	ldi	r24, 0x49	; 73
    2218:	90 e4       	ldi	r25, 0x40	; 64
    221a:	04 c0       	rjmp	.+8      	; 0x2224 <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    221c:	6b ed       	ldi	r22, 0xDB	; 219
    221e:	7f e0       	ldi	r23, 0x0F	; 15
    2220:	89 e4       	ldi	r24, 0x49	; 73
    2222:	90 ec       	ldi	r25, 0xC0	; 192
    2224:	a6 01       	movw	r20, r12
    2226:	95 01       	movw	r18, r10
    2228:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    222c:	5b 01       	movw	r10, r22
    222e:	6c 01       	movw	r12, r24
		}
	}
}
    2230:	b5 01       	movw	r22, r10
    2232:	c6 01       	movw	r24, r12
    2234:	1f 91       	pop	r17
    2236:	0f 91       	pop	r16
    2238:	ff 90       	pop	r15
    223a:	ef 90       	pop	r14
    223c:	df 90       	pop	r13
    223e:	cf 90       	pop	r12
    2240:	bf 90       	pop	r11
    2242:	af 90       	pop	r10
    2244:	08 95       	ret

00002246 <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    2246:	2f 92       	push	r2
    2248:	3f 92       	push	r3
    224a:	4f 92       	push	r4
    224c:	5f 92       	push	r5
    224e:	6f 92       	push	r6
    2250:	7f 92       	push	r7
    2252:	8f 92       	push	r8
    2254:	9f 92       	push	r9
    2256:	af 92       	push	r10
    2258:	bf 92       	push	r11
    225a:	cf 92       	push	r12
    225c:	df 92       	push	r13
    225e:	ef 92       	push	r14
    2260:	ff 92       	push	r15
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    226e:	68 97       	sbiw	r28, 0x18	; 24
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    2276:	19 82       	std	Y+1, r1	; 0x01
    2278:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    227a:	ef e5       	ldi	r30, 0x5F	; 95
    227c:	f1 e2       	ldi	r31, 0x21	; 33
    227e:	8c e0       	ldi	r24, 0x0C	; 12
    2280:	df 01       	movw	r26, r30
    2282:	28 2f       	mov	r18, r24
    2284:	1d 92       	st	X+, r1
    2286:	2a 95       	dec	r18
    2288:	e9 f7       	brne	.-6      	; 0x2284 <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    228a:	3c 96       	adiw	r30, 0x0c	; 12
    228c:	df 01       	movw	r26, r30
    228e:	1d 92       	st	X+, r1
    2290:	8a 95       	dec	r24
    2292:	e9 f7       	brne	.-6      	; 0x228e <gc_execute_block+0x48>

	gc.status = TG_OK;
    2294:	10 92 2a 21 	sts	0x212A, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    2298:	10 92 3a 21 	sts	0x213A, r1
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set
    229c:	10 92 7f 21 	sts	0x217F, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    22a0:	5e 01       	movw	r10, r28
    22a2:	08 94       	sec
    22a4:	a1 1c       	adc	r10, r1
    22a6:	b1 1c       	adc	r11, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    22a8:	ff 24       	eor	r15, r15
    22aa:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    22ac:	bc e0       	ldi	r27, 0x0C	; 12
    22ae:	cb 2e       	mov	r12, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    22b0:	a2 e0       	ldi	r26, 0x02	; 2
    22b2:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    22b4:	77 24       	eor	r7, r7
    22b6:	7a 94       	dec	r7

					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    22b8:	f3 e0       	ldi	r31, 0x03	; 3
    22ba:	df 2e       	mov	r13, r31

					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    22bc:	e4 e0       	ldi	r30, 0x04	; 4
    22be:	6e 2e       	mov	r6, r30
    22c0:	0a c1       	rjmp	.+532    	; 0x24d6 <gc_execute_block+0x290>
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    22c2:	80 91 2b 21 	lds	r24, 0x212B
    22c6:	8d 34       	cpi	r24, 0x4D	; 77
    22c8:	09 f4       	brne	.+2      	; 0x22cc <gc_execute_block+0x86>
    22ca:	be c0       	rjmp	.+380    	; 0x2448 <gc_execute_block+0x202>
    22cc:	84 35       	cpi	r24, 0x54	; 84
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <gc_execute_block+0x8c>
    22d0:	f0 c0       	rjmp	.+480    	; 0x24b2 <gc_execute_block+0x26c>
    22d2:	87 34       	cpi	r24, 0x47	; 71
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <gc_execute_block+0x92>
    22d6:	fb c0       	rjmp	.+502    	; 0x24ce <gc_execute_block+0x288>
			case 'G':
				switch((int)gc.value) {
    22d8:	60 91 2c 21 	lds	r22, 0x212C
    22dc:	70 91 2d 21 	lds	r23, 0x212D
    22e0:	80 91 2e 21 	lds	r24, 0x212E
    22e4:	90 91 2f 21 	lds	r25, 0x212F
    22e8:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__fixsfsi>
    22ec:	65 31       	cpi	r22, 0x15	; 21
    22ee:	71 05       	cpc	r23, r1
    22f0:	09 f4       	brne	.+2      	; 0x22f4 <gc_execute_block+0xae>
    22f2:	8f c0       	rjmp	.+286    	; 0x2412 <gc_execute_block+0x1cc>
    22f4:	66 31       	cpi	r22, 0x16	; 22
    22f6:	71 05       	cpc	r23, r1
    22f8:	84 f5       	brge	.+96     	; 0x235a <gc_execute_block+0x114>
    22fa:	64 30       	cpi	r22, 0x04	; 4
    22fc:	71 05       	cpc	r23, r1
    22fe:	09 f4       	brne	.+2      	; 0x2302 <gc_execute_block+0xbc>
    2300:	6d c0       	rjmp	.+218    	; 0x23dc <gc_execute_block+0x196>
    2302:	65 30       	cpi	r22, 0x05	; 5
    2304:	71 05       	cpc	r23, r1
    2306:	a4 f4       	brge	.+40     	; 0x2330 <gc_execute_block+0xea>
    2308:	61 30       	cpi	r22, 0x01	; 1
    230a:	71 05       	cpc	r23, r1
    230c:	09 f4       	brne	.+2      	; 0x2310 <gc_execute_block+0xca>
    230e:	57 c0       	rjmp	.+174    	; 0x23be <gc_execute_block+0x178>
    2310:	62 30       	cpi	r22, 0x02	; 2
    2312:	71 05       	cpc	r23, r1
    2314:	24 f4       	brge	.+8      	; 0x231e <gc_execute_block+0xd8>
    2316:	67 2b       	or	r22, r23
    2318:	09 f4       	brne	.+2      	; 0x231c <gc_execute_block+0xd6>
    231a:	4c c0       	rjmp	.+152    	; 0x23b4 <gc_execute_block+0x16e>
    231c:	c7 c0       	rjmp	.+398    	; 0x24ac <gc_execute_block+0x266>
    231e:	62 30       	cpi	r22, 0x02	; 2
    2320:	71 05       	cpc	r23, r1
    2322:	09 f4       	brne	.+2      	; 0x2326 <gc_execute_block+0xe0>
    2324:	51 c0       	rjmp	.+162    	; 0x23c8 <gc_execute_block+0x182>
    2326:	63 30       	cpi	r22, 0x03	; 3
    2328:	71 05       	cpc	r23, r1
    232a:	09 f0       	breq	.+2      	; 0x232e <gc_execute_block+0xe8>
    232c:	bf c0       	rjmp	.+382    	; 0x24ac <gc_execute_block+0x266>
    232e:	51 c0       	rjmp	.+162    	; 0x23d2 <gc_execute_block+0x18c>
    2330:	62 31       	cpi	r22, 0x12	; 18
    2332:	71 05       	cpc	r23, r1
    2334:	09 f4       	brne	.+2      	; 0x2338 <gc_execute_block+0xf2>
    2336:	5c c0       	rjmp	.+184    	; 0x23f0 <gc_execute_block+0x1aa>
    2338:	63 31       	cpi	r22, 0x13	; 19
    233a:	71 05       	cpc	r23, r1
    233c:	2c f4       	brge	.+10     	; 0x2348 <gc_execute_block+0x102>
    233e:	61 31       	cpi	r22, 0x11	; 17
    2340:	71 05       	cpc	r23, r1
    2342:	09 f0       	breq	.+2      	; 0x2346 <gc_execute_block+0x100>
    2344:	b3 c0       	rjmp	.+358    	; 0x24ac <gc_execute_block+0x266>
    2346:	4d c0       	rjmp	.+154    	; 0x23e2 <gc_execute_block+0x19c>
    2348:	63 31       	cpi	r22, 0x13	; 19
    234a:	71 05       	cpc	r23, r1
    234c:	09 f4       	brne	.+2      	; 0x2350 <gc_execute_block+0x10a>
    234e:	57 c0       	rjmp	.+174    	; 0x23fe <gc_execute_block+0x1b8>
    2350:	64 31       	cpi	r22, 0x14	; 20
    2352:	71 05       	cpc	r23, r1
    2354:	09 f0       	breq	.+2      	; 0x2358 <gc_execute_block+0x112>
    2356:	aa c0       	rjmp	.+340    	; 0x24ac <gc_execute_block+0x266>
    2358:	59 c0       	rjmp	.+178    	; 0x240c <gc_execute_block+0x1c6>
    235a:	6a 35       	cpi	r22, 0x5A	; 90
    235c:	71 05       	cpc	r23, r1
    235e:	09 f4       	brne	.+2      	; 0x2362 <gc_execute_block+0x11c>
    2360:	64 c0       	rjmp	.+200    	; 0x242a <gc_execute_block+0x1e4>
    2362:	6b 35       	cpi	r22, 0x5B	; 91
    2364:	71 05       	cpc	r23, r1
    2366:	ac f4       	brge	.+42     	; 0x2392 <gc_execute_block+0x14c>
    2368:	6e 31       	cpi	r22, 0x1E	; 30
    236a:	71 05       	cpc	r23, r1
    236c:	09 f4       	brne	.+2      	; 0x2370 <gc_execute_block+0x12a>
    236e:	54 c0       	rjmp	.+168    	; 0x2418 <gc_execute_block+0x1d2>
    2370:	6f 31       	cpi	r22, 0x1F	; 31
    2372:	71 05       	cpc	r23, r1
    2374:	2c f4       	brge	.+10     	; 0x2380 <gc_execute_block+0x13a>
    2376:	6c 31       	cpi	r22, 0x1C	; 28
    2378:	71 05       	cpc	r23, r1
    237a:	09 f0       	breq	.+2      	; 0x237e <gc_execute_block+0x138>
    237c:	97 c0       	rjmp	.+302    	; 0x24ac <gc_execute_block+0x266>
    237e:	4c c0       	rjmp	.+152    	; 0x2418 <gc_execute_block+0x1d2>
    2380:	65 33       	cpi	r22, 0x35	; 53
    2382:	71 05       	cpc	r23, r1
    2384:	09 f4       	brne	.+2      	; 0x2388 <gc_execute_block+0x142>
    2386:	4b c0       	rjmp	.+150    	; 0x241e <gc_execute_block+0x1d8>
    2388:	60 35       	cpi	r22, 0x50	; 80
    238a:	71 05       	cpc	r23, r1
    238c:	09 f0       	breq	.+2      	; 0x2390 <gc_execute_block+0x14a>
    238e:	8e c0       	rjmp	.+284    	; 0x24ac <gc_execute_block+0x266>
    2390:	49 c0       	rjmp	.+146    	; 0x2424 <gc_execute_block+0x1de>
    2392:	6c 35       	cpi	r22, 0x5C	; 92
    2394:	71 05       	cpc	r23, r1
    2396:	09 f4       	brne	.+2      	; 0x239a <gc_execute_block+0x154>
    2398:	4e c0       	rjmp	.+156    	; 0x2436 <gc_execute_block+0x1f0>
    239a:	6c 35       	cpi	r22, 0x5C	; 92
    239c:	71 05       	cpc	r23, r1
    239e:	0c f4       	brge	.+2      	; 0x23a2 <gc_execute_block+0x15c>
    23a0:	47 c0       	rjmp	.+142    	; 0x2430 <gc_execute_block+0x1ea>
    23a2:	6d 35       	cpi	r22, 0x5D	; 93
    23a4:	71 05       	cpc	r23, r1
    23a6:	09 f4       	brne	.+2      	; 0x23aa <gc_execute_block+0x164>
    23a8:	49 c0       	rjmp	.+146    	; 0x243c <gc_execute_block+0x1f6>
    23aa:	6e 35       	cpi	r22, 0x5E	; 94
    23ac:	71 05       	cpc	r23, r1
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <gc_execute_block+0x16c>
    23b0:	7d c0       	rjmp	.+250    	; 0x24ac <gc_execute_block+0x266>
    23b2:	47 c0       	rjmp	.+142    	; 0x2442 <gc_execute_block+0x1fc>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    23b4:	f0 92 7f 21 	sts	0x217F, r15
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    23b8:	10 92 35 21 	sts	0x2135, r1
    23bc:	88 c0       	rjmp	.+272    	; 0x24ce <gc_execute_block+0x288>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    23be:	f0 92 7f 21 	sts	0x217F, r15
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    23c2:	f0 92 35 21 	sts	0x2135, r15
    23c6:	83 c0       	rjmp	.+262    	; 0x24ce <gc_execute_block+0x288>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    23c8:	f0 92 7f 21 	sts	0x217F, r15
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    23cc:	e0 92 35 21 	sts	0x2135, r14
    23d0:	7e c0       	rjmp	.+252    	; 0x24ce <gc_execute_block+0x288>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    23d2:	f0 92 7f 21 	sts	0x217F, r15
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    23d6:	d0 92 35 21 	sts	0x2135, r13
    23da:	79 c0       	rjmp	.+242    	; 0x24ce <gc_execute_block+0x288>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    23dc:	e0 92 7f 21 	sts	0x217F, r14
    23e0:	76 c0       	rjmp	.+236    	; 0x24ce <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23e2:	10 92 77 21 	sts	0x2177, r1
	gc.plane_axis_1 = axis_1;
    23e6:	f0 92 78 21 	sts	0x2178, r15
	gc.plane_axis_2 = axis_2;
    23ea:	e0 92 79 21 	sts	0x2179, r14
    23ee:	6f c0       	rjmp	.+222    	; 0x24ce <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23f0:	10 92 77 21 	sts	0x2177, r1
	gc.plane_axis_1 = axis_1;
    23f4:	e0 92 78 21 	sts	0x2178, r14
	gc.plane_axis_2 = axis_2;
    23f8:	f0 92 79 21 	sts	0x2179, r15
    23fc:	68 c0       	rjmp	.+208    	; 0x24ce <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23fe:	f0 92 77 21 	sts	0x2177, r15
	gc.plane_axis_1 = axis_1;
    2402:	e0 92 78 21 	sts	0x2178, r14
	gc.plane_axis_2 = axis_2;
    2406:	10 92 79 21 	sts	0x2179, r1
    240a:	61 c0       	rjmp	.+194    	; 0x24ce <gc_execute_block+0x288>

					case 17: { select_plane(X, Y, Z); break; }
					case 18: { select_plane(X, Z, Y); break; }
					case 19: { select_plane(Y, Z, X); break; }

					case 20: { gc.inches_mode = TRUE; break; }
    240c:	f0 92 37 21 	sts	0x2137, r15
    2410:	5e c0       	rjmp	.+188    	; 0x24ce <gc_execute_block+0x288>
					case 21: { gc.inches_mode = FALSE; break; }
    2412:	10 92 37 21 	sts	0x2137, r1
    2416:	5b c0       	rjmp	.+182    	; 0x24ce <gc_execute_block+0x288>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    2418:	d0 92 7f 21 	sts	0x217F, r13
    241c:	58 c0       	rjmp	.+176    	; 0x24ce <gc_execute_block+0x288>

					case 53: { gc.absolute_override = TRUE; break; }
    241e:	f0 92 7e 21 	sts	0x217E, r15
    2422:	55 c0       	rjmp	.+170    	; 0x24ce <gc_execute_block+0x288>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2424:	60 92 35 21 	sts	0x2135, r6
    2428:	52 c0       	rjmp	.+164    	; 0x24ce <gc_execute_block+0x288>
					case 90: { gc.absolute_mode = TRUE; break; }
    242a:	f0 92 38 21 	sts	0x2138, r15
    242e:	4f c0       	rjmp	.+158    	; 0x24ce <gc_execute_block+0x288>
					case 91: { gc.absolute_mode = FALSE; break; }
    2430:	10 92 38 21 	sts	0x2138, r1
    2434:	4c c0       	rjmp	.+152    	; 0x24ce <gc_execute_block+0x288>
					case 92: { gc.set_origin_mode = TRUE; break; }
    2436:	f0 92 3a 21 	sts	0x213A, r15
    243a:	49 c0       	rjmp	.+146    	; 0x24ce <gc_execute_block+0x288>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    243c:	f0 92 36 21 	sts	0x2136, r15
    2440:	46 c0       	rjmp	.+140    	; 0x24ce <gc_execute_block+0x288>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    2442:	10 92 36 21 	sts	0x2136, r1
    2446:	43 c0       	rjmp	.+134    	; 0x24ce <gc_execute_block+0x288>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    2448:	60 91 2c 21 	lds	r22, 0x212C
    244c:	70 91 2d 21 	lds	r23, 0x212D
    2450:	80 91 2e 21 	lds	r24, 0x212E
    2454:	90 91 2f 21 	lds	r25, 0x212F
    2458:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__fixsfsi>
    245c:	63 30       	cpi	r22, 0x03	; 3
    245e:	71 05       	cpc	r23, r1
    2460:	e1 f0       	breq	.+56     	; 0x249a <gc_execute_block+0x254>
    2462:	64 30       	cpi	r22, 0x04	; 4
    2464:	71 05       	cpc	r23, r1
    2466:	34 f4       	brge	.+12     	; 0x2474 <gc_execute_block+0x22e>
    2468:	77 fd       	sbrc	r23, 7
    246a:	20 c0       	rjmp	.+64     	; 0x24ac <gc_execute_block+0x266>
    246c:	62 30       	cpi	r22, 0x02	; 2
    246e:	71 05       	cpc	r23, r1
    2470:	74 f0       	brlt	.+28     	; 0x248e <gc_execute_block+0x248>
    2472:	10 c0       	rjmp	.+32     	; 0x2494 <gc_execute_block+0x24e>
    2474:	65 30       	cpi	r22, 0x05	; 5
    2476:	71 05       	cpc	r23, r1
    2478:	b1 f0       	breq	.+44     	; 0x24a6 <gc_execute_block+0x260>
    247a:	65 30       	cpi	r22, 0x05	; 5
    247c:	71 05       	cpc	r23, r1
    247e:	84 f0       	brlt	.+32     	; 0x24a0 <gc_execute_block+0x25a>
    2480:	6e 31       	cpi	r22, 0x1E	; 30
    2482:	71 05       	cpc	r23, r1
    2484:	39 f0       	breq	.+14     	; 0x2494 <gc_execute_block+0x24e>
    2486:	6c 33       	cpi	r22, 0x3C	; 60
    2488:	71 05       	cpc	r23, r1
    248a:	81 f4       	brne	.+32     	; 0x24ac <gc_execute_block+0x266>
    248c:	03 c0       	rjmp	.+6      	; 0x2494 <gc_execute_block+0x24e>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    248e:	f0 92 34 21 	sts	0x2134, r15
    2492:	1d c0       	rjmp	.+58     	; 0x24ce <gc_execute_block+0x288>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2494:	e0 92 34 21 	sts	0x2134, r14
    2498:	1a c0       	rjmp	.+52     	; 0x24ce <gc_execute_block+0x288>
					case 3: gc.spindle_direction = 1; break;
    249a:	f0 92 7b 21 	sts	0x217B, r15
    249e:	17 c0       	rjmp	.+46     	; 0x24ce <gc_execute_block+0x288>
					case 4: gc.spindle_direction = -1; break;
    24a0:	70 92 7b 21 	sts	0x217B, r7
    24a4:	14 c0       	rjmp	.+40     	; 0x24ce <gc_execute_block+0x288>
					case 5: gc.spindle_direction = 0; break;
    24a6:	10 92 7b 21 	sts	0x217B, r1
    24aa:	11 c0       	rjmp	.+34     	; 0x24ce <gc_execute_block+0x288>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    24ac:	c0 92 2a 21 	sts	0x212A, r12
    24b0:	0e c0       	rjmp	.+28     	; 0x24ce <gc_execute_block+0x288>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    24b2:	60 91 2c 21 	lds	r22, 0x212C
    24b6:	70 91 2d 21 	lds	r23, 0x212D
    24ba:	80 91 2e 21 	lds	r24, 0x212E
    24be:	90 91 2f 21 	lds	r25, 0x212F
    24c2:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <trunc>
    24c6:	0e 94 57 43 	call	0x86ae	; 0x86ae <__fixunssfsi>
    24ca:	60 93 7a 21 	sts	0x217A, r22
		}
		if(gc.status) {
    24ce:	80 91 2a 21 	lds	r24, 0x212A
    24d2:	88 23       	and	r24, r24
    24d4:	69 f4       	brne	.+26     	; 0x24f0 <gc_execute_block+0x2aa>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    24d6:	8b e2       	ldi	r24, 0x2B	; 43
    24d8:	91 e2       	ldi	r25, 0x21	; 33
    24da:	6c e2       	ldi	r22, 0x2C	; 44
    24dc:	71 e2       	ldi	r23, 0x21	; 33
    24de:	40 e3       	ldi	r20, 0x30	; 48
    24e0:	51 e2       	ldi	r21, 0x21	; 33
    24e2:	94 01       	movw	r18, r8
    24e4:	85 01       	movw	r16, r10
    24e6:	0e 94 70 10 	call	0x20e0	; 0x20e0 <_gc_next_statement>
    24ea:	89 2b       	or	r24, r25
    24ec:	09 f0       	breq	.+2      	; 0x24f0 <gc_execute_block+0x2aa>
    24ee:	e9 ce       	rjmp	.-558    	; 0x22c2 <gc_execute_block+0x7c>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    24f0:	80 91 2a 21 	lds	r24, 0x212A
    24f4:	88 23       	and	r24, r24
    24f6:	09 f0       	breq	.+2      	; 0x24fa <gc_execute_block+0x2b4>
    24f8:	97 c3       	rjmp	.+1838   	; 0x2c28 <gc_execute_block+0x9e2>
		return(gc.status); 
	}

	i = 0;
    24fa:	19 82       	std	Y+1, r1	; 0x01
    24fc:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    24fe:	eb e6       	ldi	r30, 0x6B	; 107
    2500:	f1 e2       	ldi	r31, 0x21	; 33
    2502:	8c e0       	ldi	r24, 0x0C	; 12
    2504:	df 01       	movw	r26, r30
    2506:	1d 92       	st	X+, r1
    2508:	8a 95       	dec	r24
    250a:	e9 f7       	brne	.-6      	; 0x2506 <gc_execute_block+0x2c0>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    250c:	df 01       	movw	r26, r30
    250e:	1c 97       	sbiw	r26, 0x0c	; 12
    2510:	78 97       	sbiw	r30, 0x18	; 24
    2512:	8c e0       	ldi	r24, 0x0C	; 12
    2514:	01 90       	ld	r0, Z+
    2516:	0d 92       	st	X+, r0
    2518:	81 50       	subi	r24, 0x01	; 1
    251a:	e1 f7       	brne	.-8      	; 0x2514 <gc_execute_block+0x2ce>
    251c:	c6 c0       	rjmp	.+396    	; 0x26aa <gc_execute_block+0x464>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    251e:	c0 90 2c 21 	lds	r12, 0x212C
    2522:	d0 90 2d 21 	lds	r13, 0x212D
    2526:	e0 90 2e 21 	lds	r14, 0x212E
    252a:	f0 90 2f 21 	lds	r15, 0x212F
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    252e:	80 91 37 21 	lds	r24, 0x2137
    2532:	88 23       	and	r24, r24
    2534:	19 f4       	brne	.+6      	; 0x253c <gc_execute_block+0x2f6>
    2536:	a7 01       	movw	r20, r14
    2538:	96 01       	movw	r18, r12
    253a:	0a c0       	rjmp	.+20     	; 0x2550 <gc_execute_block+0x30a>
    253c:	c7 01       	movw	r24, r14
    253e:	b6 01       	movw	r22, r12
    2540:	25 e8       	ldi	r18, 0x85	; 133
    2542:	32 e4       	ldi	r19, 0x42	; 66
    2544:	41 e2       	ldi	r20, 0x21	; 33
    2546:	5d e3       	ldi	r21, 0x3D	; 61
    2548:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    254c:	9b 01       	movw	r18, r22
    254e:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2550:	20 93 4b 21 	sts	0x214B, r18
    2554:	30 93 4c 21 	sts	0x214C, r19
    2558:	40 93 4d 21 	sts	0x214D, r20
    255c:	50 93 4e 21 	sts	0x214E, r21
		switch(gc.letter) {
    2560:	00 91 2b 21 	lds	r16, 0x212B
    2564:	00 35       	cpi	r16, 0x50	; 80
    2566:	09 f4       	brne	.+2      	; 0x256a <gc_execute_block+0x324>
    2568:	47 c0       	rjmp	.+142    	; 0x25f8 <gc_execute_block+0x3b2>
    256a:	01 35       	cpi	r16, 0x51	; 81
    256c:	58 f4       	brcc	.+22     	; 0x2584 <gc_execute_block+0x33e>
    256e:	06 34       	cpi	r16, 0x46	; 70
    2570:	c1 f0       	breq	.+48     	; 0x25a2 <gc_execute_block+0x35c>
    2572:	06 34       	cpi	r16, 0x46	; 70
    2574:	08 f4       	brcc	.+2      	; 0x2578 <gc_execute_block+0x332>
    2576:	9f c0       	rjmp	.+318    	; 0x26b6 <gc_execute_block+0x470>
    2578:	80 2f       	mov	r24, r16
    257a:	89 54       	subi	r24, 0x49	; 73
    257c:	83 30       	cpi	r24, 0x03	; 3
    257e:	08 f0       	brcs	.+2      	; 0x2582 <gc_execute_block+0x33c>
    2580:	9a c0       	rjmp	.+308    	; 0x26b6 <gc_execute_block+0x470>
    2582:	2d c0       	rjmp	.+90     	; 0x25de <gc_execute_block+0x398>
    2584:	03 35       	cpi	r16, 0x53	; 83
    2586:	09 f4       	brne	.+2      	; 0x258a <gc_execute_block+0x344>
    2588:	4b c0       	rjmp	.+150    	; 0x2620 <gc_execute_block+0x3da>
    258a:	04 35       	cpi	r16, 0x54	; 84
    258c:	20 f4       	brcc	.+8      	; 0x2596 <gc_execute_block+0x350>
    258e:	02 35       	cpi	r16, 0x52	; 82
    2590:	09 f0       	breq	.+2      	; 0x2594 <gc_execute_block+0x34e>
    2592:	91 c0       	rjmp	.+290    	; 0x26b6 <gc_execute_block+0x470>
    2594:	3a c0       	rjmp	.+116    	; 0x260a <gc_execute_block+0x3c4>
    2596:	80 2f       	mov	r24, r16
    2598:	88 55       	subi	r24, 0x58	; 88
    259a:	83 30       	cpi	r24, 0x03	; 3
    259c:	08 f0       	brcs	.+2      	; 0x25a0 <gc_execute_block+0x35a>
    259e:	8b c0       	rjmp	.+278    	; 0x26b6 <gc_execute_block+0x470>
    25a0:	48 c0       	rjmp	.+144    	; 0x2632 <gc_execute_block+0x3ec>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    25a2:	80 91 36 21 	lds	r24, 0x2136
    25a6:	88 23       	and	r24, r24
    25a8:	49 f0       	breq	.+18     	; 0x25bc <gc_execute_block+0x376>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    25aa:	20 93 4f 21 	sts	0x214F, r18
    25ae:	30 93 50 21 	sts	0x2150, r19
    25b2:	40 93 51 21 	sts	0x2151, r20
    25b6:	50 93 52 21 	sts	0x2152, r21
    25ba:	7d c0       	rjmp	.+250    	; 0x26b6 <gc_execute_block+0x470>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    25bc:	ca 01       	movw	r24, r20
    25be:	b9 01       	movw	r22, r18
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e7       	ldi	r20, 0x70	; 112
    25c6:	52 e4       	ldi	r21, 0x42	; 66
    25c8:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    25cc:	60 93 43 21 	sts	0x2143, r22
    25d0:	70 93 44 21 	sts	0x2144, r23
    25d4:	80 93 45 21 	sts	0x2145, r24
    25d8:	90 93 46 21 	sts	0x2146, r25
    25dc:	6c c0       	rjmp	.+216    	; 0x26b6 <gc_execute_block+0x470>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    25de:	e0 2f       	mov	r30, r16
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	ee 0f       	add	r30, r30
    25e4:	ff 1f       	adc	r31, r31
    25e6:	ee 0f       	add	r30, r30
    25e8:	ff 1f       	adc	r31, r31
    25ea:	e9 5b       	subi	r30, 0xB9	; 185
    25ec:	ff 4d       	sbci	r31, 0xDF	; 223
    25ee:	20 83       	st	Z, r18
    25f0:	31 83       	std	Z+1, r19	; 0x01
    25f2:	42 83       	std	Z+2, r20	; 0x02
    25f4:	53 83       	std	Z+3, r21	; 0x03
    25f6:	5f c0       	rjmp	.+190    	; 0x26b6 <gc_execute_block+0x470>
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
    25f8:	c0 92 3b 21 	sts	0x213B, r12
    25fc:	d0 92 3c 21 	sts	0x213C, r13
    2600:	e0 92 3d 21 	sts	0x213D, r14
    2604:	f0 92 3e 21 	sts	0x213E, r15
    2608:	56 c0       	rjmp	.+172    	; 0x26b6 <gc_execute_block+0x470>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    260a:	20 93 3f 21 	sts	0x213F, r18
    260e:	30 93 40 21 	sts	0x2140, r19
    2612:	40 93 41 21 	sts	0x2141, r20
    2616:	50 93 42 21 	sts	0x2142, r21
    261a:	70 92 39 21 	sts	0x2139, r7
    261e:	4b c0       	rjmp	.+150    	; 0x26b6 <gc_execute_block+0x470>
			case 'S': gc.spindle_speed = gc.value; break;
    2620:	c7 01       	movw	r24, r14
    2622:	b6 01       	movw	r22, r12
    2624:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__fixsfsi>
    2628:	60 93 7c 21 	sts	0x217C, r22
    262c:	70 93 7d 21 	sts	0x217D, r23
    2630:	42 c0       	rjmp	.+132    	; 0x26b6 <gc_execute_block+0x470>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    2632:	80 91 3a 21 	lds	r24, 0x213A
    2636:	88 23       	and	r24, r24
    2638:	69 f0       	breq	.+26     	; 0x2654 <gc_execute_block+0x40e>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    263a:	e0 2f       	mov	r30, r16
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	ee 0f       	add	r30, r30
    2640:	ff 1f       	adc	r31, r31
    2642:	ee 0f       	add	r30, r30
    2644:	ff 1f       	adc	r31, r31
    2646:	e6 53       	subi	r30, 0x36	; 54
    2648:	f0 4e       	sbci	r31, 0xE0	; 224
    264a:	21 a7       	std	Z+41, r18	; 0x29
    264c:	32 a7       	std	Z+42, r19	; 0x2a
    264e:	43 a7       	std	Z+43, r20	; 0x2b
    2650:	54 a7       	std	Z+44, r21	; 0x2c
    2652:	31 c0       	rjmp	.+98     	; 0x26b6 <gc_execute_block+0x470>
				} else if (gc.absolute_mode || gc.absolute_override) {
    2654:	80 91 38 21 	lds	r24, 0x2138
    2658:	88 23       	and	r24, r24
    265a:	21 f4       	brne	.+8      	; 0x2664 <gc_execute_block+0x41e>
    265c:	80 91 7e 21 	lds	r24, 0x217E
    2660:	88 23       	and	r24, r24
    2662:	69 f0       	breq	.+26     	; 0x267e <gc_execute_block+0x438>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    2664:	e0 2f       	mov	r30, r16
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	ee 0f       	add	r30, r30
    266a:	ff 1f       	adc	r31, r31
    266c:	ee 0f       	add	r30, r30
    266e:	ff 1f       	adc	r31, r31
    2670:	e6 53       	subi	r30, 0x36	; 54
    2672:	f0 4e       	sbci	r31, 0xE0	; 224
    2674:	25 ab       	std	Z+53, r18	; 0x35
    2676:	36 ab       	std	Z+54, r19	; 0x36
    2678:	47 ab       	std	Z+55, r20	; 0x37
    267a:	50 af       	std	Z+56, r21	; 0x38
    267c:	1c c0       	rjmp	.+56     	; 0x26b6 <gc_execute_block+0x470>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    267e:	10 e0       	ldi	r17, 0x00	; 0
    2680:	00 0f       	add	r16, r16
    2682:	11 1f       	adc	r17, r17
    2684:	00 0f       	add	r16, r16
    2686:	11 1f       	adc	r17, r17
    2688:	06 53       	subi	r16, 0x36	; 54
    268a:	10 4e       	sbci	r17, 0xE0	; 224
    268c:	f8 01       	movw	r30, r16
    268e:	65 a9       	ldd	r22, Z+53	; 0x35
    2690:	76 a9       	ldd	r23, Z+54	; 0x36
    2692:	87 a9       	ldd	r24, Z+55	; 0x37
    2694:	90 ad       	ldd	r25, Z+56	; 0x38
    2696:	0e 94 44 42 	call	0x8488	; 0x8488 <__addsf3>
    269a:	d8 01       	movw	r26, r16
    269c:	d5 96       	adiw	r26, 0x35	; 53
    269e:	6d 93       	st	X+, r22
    26a0:	7d 93       	st	X+, r23
    26a2:	8d 93       	st	X+, r24
    26a4:	9c 93       	st	X, r25
    26a6:	d8 97       	sbiw	r26, 0x38	; 56
    26a8:	06 c0       	rjmp	.+12     	; 0x26b6 <gc_execute_block+0x470>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    26aa:	5e 01       	movw	r10, r28
    26ac:	08 94       	sec
    26ae:	a1 1c       	adc	r10, r1
    26b0:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    26b2:	77 24       	eor	r7, r7
    26b4:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    26b6:	8b e2       	ldi	r24, 0x2B	; 43
    26b8:	91 e2       	ldi	r25, 0x21	; 33
    26ba:	6c e2       	ldi	r22, 0x2C	; 44
    26bc:	71 e2       	ldi	r23, 0x21	; 33
    26be:	40 e3       	ldi	r20, 0x30	; 48
    26c0:	51 e2       	ldi	r21, 0x21	; 33
    26c2:	94 01       	movw	r18, r8
    26c4:	85 01       	movw	r16, r10
    26c6:	0e 94 70 10 	call	0x20e0	; 0x20e0 <_gc_next_statement>
    26ca:	89 2b       	or	r24, r25
    26cc:	09 f0       	breq	.+2      	; 0x26d0 <gc_execute_block+0x48a>
    26ce:	27 cf       	rjmp	.-434    	; 0x251e <gc_execute_block+0x2d8>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    26d0:	80 91 2a 21 	lds	r24, 0x212A
    26d4:	88 23       	and	r24, r24
    26d6:	09 f0       	breq	.+2      	; 0x26da <gc_execute_block+0x494>
    26d8:	a7 c2       	rjmp	.+1358   	; 0x2c28 <gc_execute_block+0x9e2>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    26da:	80 91 7b 21 	lds	r24, 0x217B
    26de:	88 23       	and	r24, r24
    26e0:	71 f0       	breq	.+28     	; 0x26fe <gc_execute_block+0x4b8>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    26e2:	40 91 7c 21 	lds	r20, 0x217C
    26e6:	50 91 7d 21 	lds	r21, 0x217D
    26ea:	66 27       	eor	r22, r22
    26ec:	57 fd       	sbrc	r21, 7
    26ee:	60 95       	com	r22
    26f0:	76 2f       	mov	r23, r22
    26f2:	99 27       	eor	r25, r25
    26f4:	87 fd       	sbrc	r24, 7
    26f6:	90 95       	com	r25
    26f8:	0e 94 2a 24 	call	0x4854	; 0x4854 <spindle_run>
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <gc_execute_block+0x4bc>
	} else {
		spindle_stop();
    26fe:	0e 94 3a 24 	call	0x4874	; 0x4874 <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    2702:	80 91 7f 21 	lds	r24, 0x217F
    2706:	82 30       	cpi	r24, 0x02	; 2
    2708:	49 f0       	breq	.+18     	; 0x271c <gc_execute_block+0x4d6>
    270a:	83 30       	cpi	r24, 0x03	; 3
    270c:	21 f0       	breq	.+8      	; 0x2716 <gc_execute_block+0x4d0>
    270e:	81 30       	cpi	r24, 0x01	; 1
    2710:	09 f0       	breq	.+2      	; 0x2714 <gc_execute_block+0x4ce>
    2712:	7d c2       	rjmp	.+1274   	; 0x2c0e <gc_execute_block+0x9c8>
    2714:	0e c0       	rjmp	.+28     	; 0x2732 <gc_execute_block+0x4ec>
		case NEXT_ACTION_DEFAULT: {				// nothing to do here
			break;
		}

		case NEXT_ACTION_GO_HOME: { 
			gc.status = mc_go_home(); 
    2716:	0e 94 df 1b 	call	0x37be	; 0x37be <mc_go_home>
    271a:	77 c2       	rjmp	.+1262   	; 0x2c0a <gc_execute_block+0x9c4>
			break;
		}

		case NEXT_ACTION_DWELL: {
			gc.status = mc_dwell(gc.dwell_time); 
    271c:	60 91 3b 21 	lds	r22, 0x213B
    2720:	70 91 3c 21 	lds	r23, 0x213C
    2724:	80 91 3d 21 	lds	r24, 0x213D
    2728:	90 91 3e 21 	lds	r25, 0x213E
    272c:	0e 94 3e 1c 	call	0x387c	; 0x387c <mc_dwell>
    2730:	6c c2       	rjmp	.+1240   	; 0x2c0a <gc_execute_block+0x9c4>
			break;
		}

		case NEXT_ACTION_MOTION: {
			switch (gc.motion_mode) {
    2732:	b0 91 35 21 	lds	r27, 0x2135
    2736:	b8 8f       	std	Y+24, r27	; 0x18
    2738:	b2 30       	cpi	r27, 0x02	; 2
    273a:	20 f0       	brcs	.+8      	; 0x2744 <gc_execute_block+0x4fe>
    273c:	b4 30       	cpi	r27, 0x04	; 4
    273e:	08 f0       	brcs	.+2      	; 0x2742 <gc_execute_block+0x4fc>
    2740:	66 c2       	rjmp	.+1228   	; 0x2c0e <gc_execute_block+0x9c8>
    2742:	31 c0       	rjmp	.+98     	; 0x27a6 <gc_execute_block+0x560>
				case MOTION_MODE_CANCEL: {
					break;
				}

				case MOTION_MODE_RAPID_LINEAR: case MOTION_MODE_LINEAR: {
					gc.status = mc_line(gc.target[X], gc.target[Y], gc.target[Z],
    2744:	60 91 5f 21 	lds	r22, 0x215F
    2748:	70 91 60 21 	lds	r23, 0x2160
    274c:	80 91 61 21 	lds	r24, 0x2161
    2750:	90 91 62 21 	lds	r25, 0x2162
    2754:	20 91 63 21 	lds	r18, 0x2163
    2758:	30 91 64 21 	lds	r19, 0x2164
    275c:	40 91 65 21 	lds	r20, 0x2165
    2760:	50 91 66 21 	lds	r21, 0x2166
    2764:	e0 90 67 21 	lds	r14, 0x2167
    2768:	f0 90 68 21 	lds	r15, 0x2168
    276c:	00 91 69 21 	lds	r16, 0x2169
    2770:	10 91 6a 21 	lds	r17, 0x216A
    2774:	80 90 36 21 	lds	r8, 0x2136
    2778:	88 20       	and	r8, r8
    277a:	49 f0       	breq	.+18     	; 0x278e <gc_execute_block+0x548>
    277c:	a0 90 4f 21 	lds	r10, 0x214F
    2780:	b0 90 50 21 	lds	r11, 0x2150
    2784:	c0 90 51 21 	lds	r12, 0x2151
    2788:	d0 90 52 21 	lds	r13, 0x2152
    278c:	08 c0       	rjmp	.+16     	; 0x279e <gc_execute_block+0x558>
    278e:	a0 90 43 21 	lds	r10, 0x2143
    2792:	b0 90 44 21 	lds	r11, 0x2144
    2796:	c0 90 45 21 	lds	r12, 0x2145
    279a:	d0 90 46 21 	lds	r13, 0x2146
    279e:	99 24       	eor	r9, r9
    27a0:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <mc_line>
    27a4:	32 c2       	rjmp	.+1124   	; 0x2c0a <gc_execute_block+0x9c4>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    27a6:	80 91 39 21 	lds	r24, 0x2139
    27aa:	88 23       	and	r24, r24
    27ac:	09 f4       	brne	.+2      	; 0x27b0 <gc_execute_block+0x56a>
    27ae:	ec c0       	rjmp	.+472    	; 0x2988 <gc_execute_block+0x742>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    27b0:	e0 91 77 21 	lds	r30, 0x2177
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	ee 0f       	add	r30, r30
    27b8:	ff 1f       	adc	r31, r31
    27ba:	ee 0f       	add	r30, r30
    27bc:	ff 1f       	adc	r31, r31
    27be:	e6 5d       	subi	r30, 0xD6	; 214
    27c0:	fe 4d       	sbci	r31, 0xDE	; 222
    27c2:	65 a9       	ldd	r22, Z+53	; 0x35
    27c4:	76 a9       	ldd	r23, Z+54	; 0x36
    27c6:	87 a9       	ldd	r24, Z+55	; 0x37
    27c8:	90 ad       	ldd	r25, Z+56	; 0x38
    27ca:	21 a5       	ldd	r18, Z+41	; 0x29
    27cc:	32 a5       	ldd	r19, Z+42	; 0x2a
    27ce:	43 a5       	ldd	r20, Z+43	; 0x2b
    27d0:	54 a5       	ldd	r21, Z+44	; 0x2c
    27d2:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    27d6:	6f 83       	std	Y+7, r22	; 0x07
    27d8:	78 87       	std	Y+8, r23	; 0x08
    27da:	89 87       	std	Y+9, r24	; 0x09
    27dc:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    27de:	e0 91 78 21 	lds	r30, 0x2178
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	ee 0f       	add	r30, r30
    27e6:	ff 1f       	adc	r31, r31
    27e8:	ee 0f       	add	r30, r30
    27ea:	ff 1f       	adc	r31, r31
    27ec:	e6 5d       	subi	r30, 0xD6	; 214
    27ee:	fe 4d       	sbci	r31, 0xDE	; 222
    27f0:	65 a9       	ldd	r22, Z+53	; 0x35
    27f2:	76 a9       	ldd	r23, Z+54	; 0x36
    27f4:	87 a9       	ldd	r24, Z+55	; 0x37
    27f6:	90 ad       	ldd	r25, Z+56	; 0x38
    27f8:	21 a5       	ldd	r18, Z+41	; 0x29
    27fa:	32 a5       	ldd	r19, Z+42	; 0x2a
    27fc:	43 a5       	ldd	r20, Z+43	; 0x2b
    27fe:	54 a5       	ldd	r21, Z+44	; 0x2c
    2800:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    2804:	1b 01       	movw	r2, r22
    2806:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    2808:	10 92 6b 21 	sts	0x216B, r1
    280c:	10 92 6c 21 	sts	0x216C, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    2810:	60 90 3f 21 	lds	r6, 0x213F
    2814:	70 90 40 21 	lds	r7, 0x2140
    2818:	80 90 41 21 	lds	r8, 0x2141
    281c:	90 90 42 21 	lds	r9, 0x2142
    2820:	c4 01       	movw	r24, r8
    2822:	b3 01       	movw	r22, r6
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e8       	ldi	r20, 0x80	; 128
    282a:	50 e4       	ldi	r21, 0x40	; 64
    282c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    2830:	a4 01       	movw	r20, r8
    2832:	93 01       	movw	r18, r6
    2834:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    2838:	5b 01       	movw	r10, r22
    283a:	6c 01       	movw	r12, r24
    283c:	6f 81       	ldd	r22, Y+7	; 0x07
    283e:	78 85       	ldd	r23, Y+8	; 0x08
    2840:	89 85       	ldd	r24, Y+9	; 0x09
    2842:	9a 85       	ldd	r25, Y+10	; 0x0a
    2844:	9b 01       	movw	r18, r22
    2846:	ac 01       	movw	r20, r24
    2848:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    284c:	7b 01       	movw	r14, r22
    284e:	8c 01       	movw	r16, r24
    2850:	c2 01       	movw	r24, r4
    2852:	b1 01       	movw	r22, r2
    2854:	a2 01       	movw	r20, r4
    2856:	91 01       	movw	r18, r2
    2858:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    285c:	9b 01       	movw	r18, r22
    285e:	ac 01       	movw	r20, r24
    2860:	c8 01       	movw	r24, r16
    2862:	b7 01       	movw	r22, r14
    2864:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    2868:	9b 01       	movw	r18, r22
    286a:	ac 01       	movw	r20, r24
    286c:	c6 01       	movw	r24, r12
    286e:	b5 01       	movw	r22, r10
    2870:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    2874:	0e 94 12 46 	call	0x8c24	; 0x8c24 <sqrt>
    2878:	7b 01       	movw	r14, r22
    287a:	8c 01       	movw	r16, r24
    287c:	6f 81       	ldd	r22, Y+7	; 0x07
    287e:	78 85       	ldd	r23, Y+8	; 0x08
    2880:	89 85       	ldd	r24, Y+9	; 0x09
    2882:	9a 85       	ldd	r25, Y+10	; 0x0a
    2884:	a2 01       	movw	r20, r4
    2886:	91 01       	movw	r18, r2
    2888:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <hypot>
    288c:	9b 01       	movw	r18, r22
    288e:	ac 01       	movw	r20, r24
    2890:	17 fb       	bst	r17, 7
    2892:	10 95       	com	r17
    2894:	17 f9       	bld	r17, 7
    2896:	10 95       	com	r17
    2898:	c8 01       	movw	r24, r16
    289a:	b7 01       	movw	r22, r14
    289c:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    28a0:	7b 01       	movw	r14, r22
    28a2:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    28a4:	a8 01       	movw	r20, r16
    28a6:	97 01       	movw	r18, r14
    28a8:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <__unordsf2>
    28ac:	88 23       	and	r24, r24
    28ae:	21 f0       	breq	.+8      	; 0x28b8 <gc_execute_block+0x672>
		FAIL(TG_FLOATING_POINT_ERROR); 
    28b0:	8e e0       	ldi	r24, 0x0E	; 14
    28b2:	80 93 2a 21 	sts	0x212A, r24
    28b6:	65 c0       	rjmp	.+202    	; 0x2982 <gc_execute_block+0x73c>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    28b8:	e8 8d       	ldd	r30, Y+24	; 0x18
    28ba:	e3 30       	cpi	r30, 0x03	; 3
    28bc:	21 f4       	brne	.+8      	; 0x28c6 <gc_execute_block+0x680>
		h_x2_div_d = -h_x2_div_d;
    28be:	17 fb       	bst	r17, 7
    28c0:	10 95       	com	r17
    28c2:	17 f9       	bld	r17, 7
    28c4:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    28c6:	c4 01       	movw	r24, r8
    28c8:	b3 01       	movw	r22, r6
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e0       	ldi	r20, 0x00	; 0
    28d0:	50 e0       	ldi	r21, 0x00	; 0
    28d2:	0e 94 e3 42 	call	0x85c6	; 0x85c6 <__cmpsf2>
    28d6:	88 23       	and	r24, r24
    28d8:	24 f4       	brge	.+8      	; 0x28e2 <gc_execute_block+0x69c>
		h_x2_div_d = -h_x2_div_d; 
    28da:	17 fb       	bst	r17, 7
    28dc:	10 95       	com	r17
    28de:	17 f9       	bld	r17, 7
    28e0:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    28e2:	80 91 77 21 	lds	r24, 0x2177
    28e6:	c8 2e       	mov	r12, r24
    28e8:	dd 24       	eor	r13, r13
    28ea:	cc 0c       	add	r12, r12
    28ec:	dd 1c       	adc	r13, r13
    28ee:	cc 0c       	add	r12, r12
    28f0:	dd 1c       	adc	r13, r13
    28f2:	2b e6       	ldi	r18, 0x6B	; 107
    28f4:	31 e2       	ldi	r19, 0x21	; 33
    28f6:	c2 0e       	add	r12, r18
    28f8:	d3 1e       	adc	r13, r19
    28fa:	c2 01       	movw	r24, r4
    28fc:	b1 01       	movw	r22, r2
    28fe:	a8 01       	movw	r20, r16
    2900:	97 01       	movw	r18, r14
    2902:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    2906:	9b 01       	movw	r18, r22
    2908:	ac 01       	movw	r20, r24
    290a:	6f 81       	ldd	r22, Y+7	; 0x07
    290c:	78 85       	ldd	r23, Y+8	; 0x08
    290e:	89 85       	ldd	r24, Y+9	; 0x09
    2910:	9a 85       	ldd	r25, Y+10	; 0x0a
    2912:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e0       	ldi	r20, 0x00	; 0
    291c:	5f e3       	ldi	r21, 0x3F	; 63
    291e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    2922:	d6 01       	movw	r26, r12
    2924:	6d 93       	st	X+, r22
    2926:	7d 93       	st	X+, r23
    2928:	8d 93       	st	X+, r24
    292a:	9c 93       	st	X, r25
    292c:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    292e:	80 91 78 21 	lds	r24, 0x2178
    2932:	c8 2e       	mov	r12, r24
    2934:	dd 24       	eor	r13, r13
    2936:	cc 0c       	add	r12, r12
    2938:	dd 1c       	adc	r13, r13
    293a:	cc 0c       	add	r12, r12
    293c:	dd 1c       	adc	r13, r13
    293e:	eb e6       	ldi	r30, 0x6B	; 107
    2940:	f1 e2       	ldi	r31, 0x21	; 33
    2942:	ce 0e       	add	r12, r30
    2944:	df 1e       	adc	r13, r31
    2946:	6f 81       	ldd	r22, Y+7	; 0x07
    2948:	78 85       	ldd	r23, Y+8	; 0x08
    294a:	89 85       	ldd	r24, Y+9	; 0x09
    294c:	9a 85       	ldd	r25, Y+10	; 0x0a
    294e:	a8 01       	movw	r20, r16
    2950:	97 01       	movw	r18, r14
    2952:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    2956:	9b 01       	movw	r18, r22
    2958:	ac 01       	movw	r20, r24
    295a:	c2 01       	movw	r24, r4
    295c:	b1 01       	movw	r22, r2
    295e:	0e 94 44 42 	call	0x8488	; 0x8488 <__addsf3>
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e0       	ldi	r20, 0x00	; 0
    2968:	5f e3       	ldi	r21, 0x3F	; 63
    296a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    296e:	d6 01       	movw	r26, r12
    2970:	6d 93       	st	X+, r22
    2972:	7d 93       	st	X+, r23
    2974:	8d 93       	st	X+, r24
    2976:	9c 93       	st	X, r25
    2978:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    297a:	80 91 2a 21 	lds	r24, 0x212A
    297e:	88 23       	and	r24, r24
    2980:	19 f0       	breq	.+6      	; 0x2988 <gc_execute_block+0x742>
			return (gc.status);
    2982:	80 91 2a 21 	lds	r24, 0x212A
    2986:	41 c1       	rjmp	.+642    	; 0x2c0a <gc_execute_block+0x9c4>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    2988:	e0 91 77 21 	lds	r30, 0x2177
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	ee 0f       	add	r30, r30
    2990:	ff 1f       	adc	r31, r31
    2992:	ee 0f       	add	r30, r30
    2994:	ff 1f       	adc	r31, r31
    2996:	e5 59       	subi	r30, 0x95	; 149
    2998:	fe 4d       	sbci	r31, 0xDE	; 222
    299a:	60 81       	ld	r22, Z
    299c:	71 81       	ldd	r23, Z+1	; 0x01
    299e:	82 81       	ldd	r24, Z+2	; 0x02
    29a0:	93 81       	ldd	r25, Z+3	; 0x03
    29a2:	90 58       	subi	r25, 0x80	; 128
    29a4:	e0 91 78 21 	lds	r30, 0x2178
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	ee 0f       	add	r30, r30
    29ac:	ff 1f       	adc	r31, r31
    29ae:	ee 0f       	add	r30, r30
    29b0:	ff 1f       	adc	r31, r31
    29b2:	e5 59       	subi	r30, 0x95	; 149
    29b4:	fe 4d       	sbci	r31, 0xDE	; 222
    29b6:	20 81       	ld	r18, Z
    29b8:	31 81       	ldd	r19, Z+1	; 0x01
    29ba:	42 81       	ldd	r20, Z+2	; 0x02
    29bc:	53 81       	ldd	r21, Z+3	; 0x03
    29be:	50 58       	subi	r21, 0x80	; 128
    29c0:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <theta>
    29c4:	6f 87       	std	Y+15, r22	; 0x0f
    29c6:	78 8b       	std	Y+16, r23	; 0x10
    29c8:	89 8b       	std	Y+17, r24	; 0x11
    29ca:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    29cc:	9b 01       	movw	r18, r22
    29ce:	ac 01       	movw	r20, r24
    29d0:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <__unordsf2>
    29d4:	88 23       	and	r24, r24
    29d6:	09 f0       	breq	.+2      	; 0x29da <gc_execute_block+0x794>
    29d8:	54 c0       	rjmp	.+168    	; 0x2a82 <gc_execute_block+0x83c>
		FAIL(TG_ARC_ERROR); 
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    29da:	e0 91 77 21 	lds	r30, 0x2177
    29de:	0e 2f       	mov	r16, r30
    29e0:	10 e0       	ldi	r17, 0x00	; 0
    29e2:	e0 91 78 21 	lds	r30, 0x2178
    29e6:	ce 2e       	mov	r12, r30
    29e8:	dd 24       	eor	r13, r13
    29ea:	00 0f       	add	r16, r16
    29ec:	11 1f       	adc	r17, r17
    29ee:	00 0f       	add	r16, r16
    29f0:	11 1f       	adc	r17, r17
    29f2:	06 5d       	subi	r16, 0xD6	; 214
    29f4:	1e 4d       	sbci	r17, 0xDE	; 222
    29f6:	f8 01       	movw	r30, r16
    29f8:	ef 5b       	subi	r30, 0xBF	; 191
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	d8 01       	movw	r26, r16
    29fe:	d5 96       	adiw	r26, 0x35	; 53
    2a00:	6d 91       	ld	r22, X+
    2a02:	7d 91       	ld	r23, X+
    2a04:	8d 91       	ld	r24, X+
    2a06:	9c 91       	ld	r25, X
    2a08:	d8 97       	sbiw	r26, 0x38	; 56
    2a0a:	20 81       	ld	r18, Z
    2a0c:	31 81       	ldd	r19, Z+1	; 0x01
    2a0e:	42 81       	ldd	r20, Z+2	; 0x02
    2a10:	53 81       	ldd	r21, Z+3	; 0x03
    2a12:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    2a16:	f8 01       	movw	r30, r16
    2a18:	21 a5       	ldd	r18, Z+41	; 0x29
    2a1a:	32 a5       	ldd	r19, Z+42	; 0x2a
    2a1c:	43 a5       	ldd	r20, Z+43	; 0x2b
    2a1e:	54 a5       	ldd	r21, Z+44	; 0x2c
    2a20:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    2a24:	7b 01       	movw	r14, r22
    2a26:	8c 01       	movw	r16, r24
    2a28:	cc 0c       	add	r12, r12
    2a2a:	dd 1c       	adc	r13, r13
    2a2c:	cc 0c       	add	r12, r12
    2a2e:	dd 1c       	adc	r13, r13
    2a30:	2a e2       	ldi	r18, 0x2A	; 42
    2a32:	31 e2       	ldi	r19, 0x21	; 33
    2a34:	c2 0e       	add	r12, r18
    2a36:	d3 1e       	adc	r13, r19
    2a38:	f6 01       	movw	r30, r12
    2a3a:	ef 5b       	subi	r30, 0xBF	; 191
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	d6 01       	movw	r26, r12
    2a40:	d5 96       	adiw	r26, 0x35	; 53
    2a42:	6d 91       	ld	r22, X+
    2a44:	7d 91       	ld	r23, X+
    2a46:	8d 91       	ld	r24, X+
    2a48:	9c 91       	ld	r25, X
    2a4a:	d8 97       	sbiw	r26, 0x38	; 56
    2a4c:	20 81       	ld	r18, Z
    2a4e:	31 81       	ldd	r19, Z+1	; 0x01
    2a50:	42 81       	ldd	r20, Z+2	; 0x02
    2a52:	53 81       	ldd	r21, Z+3	; 0x03
    2a54:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    2a58:	f6 01       	movw	r30, r12
    2a5a:	21 a5       	ldd	r18, Z+41	; 0x29
    2a5c:	32 a5       	ldd	r19, Z+42	; 0x2a
    2a5e:	43 a5       	ldd	r20, Z+43	; 0x2b
    2a60:	54 a5       	ldd	r21, Z+44	; 0x2c
    2a62:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    2a66:	9b 01       	movw	r18, r22
    2a68:	ac 01       	movw	r20, r24
    2a6a:	c8 01       	movw	r24, r16
    2a6c:	b7 01       	movw	r22, r14
    2a6e:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <theta>
    2a72:	7b 01       	movw	r14, r22
    2a74:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    2a76:	a8 01       	movw	r20, r16
    2a78:	97 01       	movw	r18, r14
    2a7a:	0e 94 5a 46 	call	0x8cb4	; 0x8cb4 <__unordsf2>
    2a7e:	88 23       	and	r24, r24
    2a80:	19 f0       	breq	.+6      	; 0x2a88 <gc_execute_block+0x842>
		FAIL(TG_ARC_ERROR); 
    2a82:	80 e1       	ldi	r24, 0x10	; 16
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	c1 c0       	rjmp	.+386    	; 0x2c0a <gc_execute_block+0x9c4>
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    2a88:	c8 01       	movw	r24, r16
    2a8a:	b7 01       	movw	r22, r14
    2a8c:	2f 85       	ldd	r18, Y+15	; 0x0f
    2a8e:	38 89       	ldd	r19, Y+16	; 0x10
    2a90:	49 89       	ldd	r20, Y+17	; 0x11
    2a92:	5a 89       	ldd	r21, Y+18	; 0x12
    2a94:	0e 94 e3 42 	call	0x85c6	; 0x85c6 <__cmpsf2>
    2a98:	88 23       	and	r24, r24
    2a9a:	54 f4       	brge	.+20     	; 0x2ab0 <gc_execute_block+0x86a>
		theta_end += 2*M_PI;
    2a9c:	c8 01       	movw	r24, r16
    2a9e:	b7 01       	movw	r22, r14
    2aa0:	2b ed       	ldi	r18, 0xDB	; 219
    2aa2:	3f e0       	ldi	r19, 0x0F	; 15
    2aa4:	49 ec       	ldi	r20, 0xC9	; 201
    2aa6:	50 e4       	ldi	r21, 0x40	; 64
    2aa8:	0e 94 44 42 	call	0x8488	; 0x8488 <__addsf3>
    2aac:	7b 01       	movw	r14, r22
    2aae:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    2ab0:	c8 01       	movw	r24, r16
    2ab2:	b7 01       	movw	r22, r14
    2ab4:	2f 85       	ldd	r18, Y+15	; 0x0f
    2ab6:	38 89       	ldd	r19, Y+16	; 0x10
    2ab8:	49 89       	ldd	r20, Y+17	; 0x11
    2aba:	5a 89       	ldd	r21, Y+18	; 0x12
    2abc:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    2ac0:	6b 87       	std	Y+11, r22	; 0x0b
    2ac2:	7c 87       	std	Y+12, r23	; 0x0c
    2ac4:	8d 87       	std	Y+13, r24	; 0x0d
    2ac6:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2ac8:	80 91 35 21 	lds	r24, 0x2135
    2acc:	83 30       	cpi	r24, 0x03	; 3
    2ace:	71 f4       	brne	.+28     	; 0x2aec <gc_execute_block+0x8a6>
		angular_travel = angular_travel - 2*M_PI;
    2ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad8:	2b ed       	ldi	r18, 0xDB	; 219
    2ada:	3f e0       	ldi	r19, 0x0F	; 15
    2adc:	49 ec       	ldi	r20, 0xC9	; 201
    2ade:	50 e4       	ldi	r21, 0x40	; 64
    2ae0:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    2ae4:	6b 87       	std	Y+11, r22	; 0x0b
    2ae6:	7c 87       	std	Y+12, r23	; 0x0c
    2ae8:	8d 87       	std	Y+13, r24	; 0x0d
    2aea:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2aec:	80 91 77 21 	lds	r24, 0x2177
    2af0:	28 2f       	mov	r18, r24
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	2d 83       	std	Y+5, r18	; 0x05
    2af6:	3e 83       	std	Y+6, r19	; 0x06
    2af8:	f9 01       	movw	r30, r18
    2afa:	ee 0f       	add	r30, r30
    2afc:	ff 1f       	adc	r31, r31
    2afe:	ee 0f       	add	r30, r30
    2b00:	ff 1f       	adc	r31, r31
    2b02:	e5 59       	subi	r30, 0x95	; 149
    2b04:	fe 4d       	sbci	r31, 0xDE	; 222
    2b06:	e0 80       	ld	r14, Z
    2b08:	f1 80       	ldd	r15, Z+1	; 0x01
    2b0a:	02 81       	ldd	r16, Z+2	; 0x02
    2b0c:	13 81       	ldd	r17, Z+3	; 0x03
    2b0e:	80 91 78 21 	lds	r24, 0x2178
    2b12:	a8 2f       	mov	r26, r24
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	ab 83       	std	Y+3, r26	; 0x03
    2b18:	bc 83       	std	Y+4, r27	; 0x04
    2b1a:	fd 01       	movw	r30, r26
    2b1c:	ee 0f       	add	r30, r30
    2b1e:	ff 1f       	adc	r31, r31
    2b20:	ee 0f       	add	r30, r30
    2b22:	ff 1f       	adc	r31, r31
    2b24:	e5 59       	subi	r30, 0x95	; 149
    2b26:	fe 4d       	sbci	r31, 0xDE	; 222
    2b28:	20 81       	ld	r18, Z
    2b2a:	31 81       	ldd	r19, Z+1	; 0x01
    2b2c:	42 81       	ldd	r20, Z+2	; 0x02
    2b2e:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    2b30:	80 91 79 21 	lds	r24, 0x2179
    2b34:	28 2e       	mov	r2, r24
    2b36:	33 24       	eor	r3, r3
    2b38:	f1 01       	movw	r30, r2
    2b3a:	ee 0f       	add	r30, r30
    2b3c:	ff 1f       	adc	r31, r31
    2b3e:	ee 0f       	add	r30, r30
    2b40:	ff 1f       	adc	r31, r31
    2b42:	e6 5d       	subi	r30, 0xD6	; 214
    2b44:	fe 4d       	sbci	r31, 0xDE	; 222
    2b46:	85 a9       	ldd	r24, Z+53	; 0x35
    2b48:	96 a9       	ldd	r25, Z+54	; 0x36
    2b4a:	a7 a9       	ldd	r26, Z+55	; 0x37
    2b4c:	b0 ad       	ldd	r27, Z+56	; 0x38
    2b4e:	8c 8b       	std	Y+20, r24	; 0x14
    2b50:	9d 8b       	std	Y+21, r25	; 0x15
    2b52:	ae 8b       	std	Y+22, r26	; 0x16
    2b54:	bf 8b       	std	Y+23, r27	; 0x17
    2b56:	a1 a4       	ldd	r10, Z+41	; 0x29
    2b58:	b2 a4       	ldd	r11, Z+42	; 0x2a
    2b5a:	c3 a4       	ldd	r12, Z+43	; 0x2b
    2b5c:	d4 a4       	ldd	r13, Z+44	; 0x2c

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2b5e:	90 91 36 21 	lds	r25, 0x2136
    2b62:	9b 8b       	std	Y+19, r25	; 0x13
    2b64:	99 23       	and	r25, r25
    2b66:	49 f0       	breq	.+18     	; 0x2b7a <gc_execute_block+0x934>
    2b68:	40 90 4f 21 	lds	r4, 0x214F
    2b6c:	50 90 50 21 	lds	r5, 0x2150
    2b70:	60 90 51 21 	lds	r6, 0x2151
    2b74:	70 90 52 21 	lds	r7, 0x2152
    2b78:	08 c0       	rjmp	.+16     	; 0x2b8a <gc_execute_block+0x944>
    2b7a:	40 90 43 21 	lds	r4, 0x2143
    2b7e:	50 90 44 21 	lds	r5, 0x2144
    2b82:	60 90 45 21 	lds	r6, 0x2145
    2b86:	70 90 46 21 	lds	r7, 0x2146
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2b8a:	c8 01       	movw	r24, r16
    2b8c:	b7 01       	movw	r22, r14
    2b8e:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <hypot>
    2b92:	7b 01       	movw	r14, r22
    2b94:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2b96:	ad b7       	in	r26, 0x3d	; 61
    2b98:	be b7       	in	r27, 0x3e	; 62
    2b9a:	1a 97       	sbiw	r26, 0x0a	; 10
    2b9c:	ad bf       	out	0x3d, r26	; 61
    2b9e:	be bf       	out	0x3e, r27	; 62
    2ba0:	8d b6       	in	r8, 0x3d	; 61
    2ba2:	9e b6       	in	r9, 0x3e	; 62
    2ba4:	08 94       	sec
    2ba6:	81 1c       	adc	r8, r1
    2ba8:	91 1c       	adc	r9, r1
    2baa:	6c 89       	ldd	r22, Y+20	; 0x14
    2bac:	7d 89       	ldd	r23, Y+21	; 0x15
    2bae:	8e 89       	ldd	r24, Y+22	; 0x16
    2bb0:	9f 89       	ldd	r25, Y+23	; 0x17
    2bb2:	a6 01       	movw	r20, r12
    2bb4:	95 01       	movw	r18, r10
    2bb6:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    2bba:	5b 01       	movw	r10, r22
    2bbc:	6c 01       	movw	r12, r24
    2bbe:	2b 81       	ldd	r18, Y+3	; 0x03
    2bc0:	3c 81       	ldd	r19, Y+4	; 0x04
    2bc2:	f4 01       	movw	r30, r8
    2bc4:	20 83       	st	Z, r18
    2bc6:	31 83       	std	Z+1, r19	; 0x01
    2bc8:	22 82       	std	Z+2, r2	; 0x02
    2bca:	33 82       	std	Z+3, r3	; 0x03
    2bcc:	d4 01       	movw	r26, r8
    2bce:	14 96       	adiw	r26, 0x04	; 4
    2bd0:	4d 92       	st	X+, r4
    2bd2:	5d 92       	st	X+, r5
    2bd4:	6d 92       	st	X+, r6
    2bd6:	7c 92       	st	X, r7
    2bd8:	17 97       	sbiw	r26, 0x07	; 7
    2bda:	eb 89       	ldd	r30, Y+19	; 0x13
    2bdc:	18 96       	adiw	r26, 0x08	; 8
    2bde:	ec 93       	st	X, r30
    2be0:	18 97       	sbiw	r26, 0x08	; 8
    2be2:	19 96       	adiw	r26, 0x09	; 9
    2be4:	1c 92       	st	X, r1
    2be6:	6f 85       	ldd	r22, Y+15	; 0x0f
    2be8:	78 89       	ldd	r23, Y+16	; 0x10
    2bea:	89 89       	ldd	r24, Y+17	; 0x11
    2bec:	9a 89       	ldd	r25, Y+18	; 0x12
    2bee:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bf0:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bf2:	4d 85       	ldd	r20, Y+13	; 0x0d
    2bf4:	5e 85       	ldd	r21, Y+14	; 0x0e
    2bf6:	8d 80       	ldd	r8, Y+5	; 0x05
    2bf8:	9e 80       	ldd	r9, Y+6	; 0x06
    2bfa:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <mc_arc>
	// has completed the arc. So the endpoint should be passed to the generator and
	// executed there.
//	gc.status = mc_line(gc.target[X_AXIS], gc.target[Y_AXIS], gc.target[Z_AXIS], 
//					   (gc.inverse_feed_rate_mode) ? gc.inverse_feed_rate : 
//						gc.feed_rate, gc.inverse_feed_rate_mode);
	return (gc.status);
    2bfe:	2d b7       	in	r18, 0x3d	; 61
    2c00:	3e b7       	in	r19, 0x3e	; 62
    2c02:	26 5f       	subi	r18, 0xF6	; 246
    2c04:	3f 4f       	sbci	r19, 0xFF	; 255
    2c06:	2d bf       	out	0x3d, r18	; 61
    2c08:	3e bf       	out	0x3e, r19	; 62
										gc.inverse_feed_rate_mode); 
					break;
				}

				case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC: {
					gc.status = _gc_compute_arc(); 
    2c0a:	80 93 2a 21 	sts	0x212A, r24
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_EAGAIN)) {
    2c0e:	80 91 2a 21 	lds	r24, 0x212A
    2c12:	82 30       	cpi	r24, 0x02	; 2
    2c14:	48 f4       	brcc	.+18     	; 0x2c28 <gc_execute_block+0x9e2>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2c16:	e3 e5       	ldi	r30, 0x53	; 83
    2c18:	f1 e2       	ldi	r31, 0x21	; 33
    2c1a:	df 01       	movw	r26, r30
    2c1c:	1c 96       	adiw	r26, 0x0c	; 12
    2c1e:	9c e0       	ldi	r25, 0x0C	; 12
    2c20:	0d 90       	ld	r0, X+
    2c22:	01 92       	st	Z+, r0
    2c24:	91 50       	subi	r25, 0x01	; 1
    2c26:	e1 f7       	brne	.-8      	; 0x2c20 <gc_execute_block+0x9da>
	};
	return(gc.status);
}
    2c28:	68 96       	adiw	r28, 0x18	; 24
    2c2a:	cd bf       	out	0x3d, r28	; 61
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	cf 91       	pop	r28
    2c30:	df 91       	pop	r29
    2c32:	1f 91       	pop	r17
    2c34:	0f 91       	pop	r16
    2c36:	ff 90       	pop	r15
    2c38:	ef 90       	pop	r14
    2c3a:	df 90       	pop	r13
    2c3c:	cf 90       	pop	r12
    2c3e:	bf 90       	pop	r11
    2c40:	af 90       	pop	r10
    2c42:	9f 90       	pop	r9
    2c44:	8f 90       	pop	r8
    2c46:	7f 90       	pop	r7
    2c48:	6f 90       	pop	r6
    2c4a:	5f 90       	pop	r5
    2c4c:	4f 90       	pop	r4
    2c4e:	3f 90       	pop	r3
    2c50:	2f 90       	pop	r2
    2c52:	08 95       	ret

00002c54 <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2c54:	cf 93       	push	r28
    2c56:	df 93       	push	r29
    2c58:	ec 01       	movw	r28, r24
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	10 c0       	rjmp	.+32     	; 0x2c80 <gc_gcode_parser+0x2c>
	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
		if (c <= ' ' ) {					// throw away WS & ctrl chars
    2c60:	e1 32       	cpi	r30, 0x21	; 33
    2c62:	70 f0       	brcs	.+28     	; 0x2c80 <gc_gcode_parser+0x2c>
			continue;
		} else if (c >= 'a' && c <= 'z') {	// convert lower to upper
    2c64:	8e 2f       	mov	r24, r30
    2c66:	81 56       	subi	r24, 0x61	; 97
    2c68:	a9 2f       	mov	r26, r25
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
    2c6c:	9f 5f       	subi	r25, 0xFF	; 255
    2c6e:	8a 31       	cpi	r24, 0x1A	; 26
    2c70:	20 f4       	brcc	.+8      	; 0x2c7a <gc_gcode_parser+0x26>
			block[j++] = c-'a'+'A';
    2c72:	ac 0f       	add	r26, r28
    2c74:	bd 1f       	adc	r27, r29
    2c76:	e0 52       	subi	r30, 0x20	; 32
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <gc_gcode_parser+0x2a>
		} else {
			block[j++] = c;
    2c7a:	ac 0f       	add	r26, r28
    2c7c:	bd 1f       	adc	r27, r29
    2c7e:	ec 93       	st	X, r30

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
    2c80:	fe 01       	movw	r30, r28
    2c82:	e2 0f       	add	r30, r18
    2c84:	f1 1d       	adc	r31, r1
    2c86:	e0 81       	ld	r30, Z
    2c88:	2f 5f       	subi	r18, 0xFF	; 255
    2c8a:	ee 23       	and	r30, r30
    2c8c:	49 f7       	brne	.-46     	; 0x2c60 <gc_gcode_parser+0xc>
			block[j++] = c-'a'+'A';
		} else {
			block[j++] = c;
		}
	}
	block[j] = 0;
    2c8e:	fe 01       	movw	r30, r28
    2c90:	e9 0f       	add	r30, r25
    2c92:	f1 1d       	adc	r31, r1
    2c94:	10 82       	st	Z, r1
{
	_gc_normalize_gcode_block(block);
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    2c96:	88 81       	ld	r24, Y
    2c98:	88 32       	cpi	r24, 0x28	; 40
    2c9a:	61 f0       	breq	.+24     	; 0x2cb4 <gc_gcode_parser+0x60>
		return(TG_OK);
	}
	if (block[0] == 'Q') { 					// quit
    2c9c:	81 35       	cpi	r24, 0x51	; 81
    2c9e:	11 f4       	brne	.+4      	; 0x2ca4 <gc_gcode_parser+0x50>
    2ca0:	83 e0       	ldi	r24, 0x03	; 3
    2ca2:	09 c0       	rjmp	.+18     	; 0x2cb6 <gc_gcode_parser+0x62>
		return(TG_QUIT);
	} 
	if (block[0] == '/') { 					// ignore block delete
    2ca4:	8f 32       	cpi	r24, 0x2F	; 47
    2ca6:	31 f0       	breq	.+12     	; 0x2cb4 <gc_gcode_parser+0x60>
		return(TG_OK);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2ca8:	ce 01       	movw	r24, r28
    2caa:	0e 94 23 11 	call	0x2246	; 0x2246 <gc_execute_block>
    2cae:	80 93 2a 21 	sts	0x212A, r24
    2cb2:	01 c0       	rjmp	.+2      	; 0x2cb6 <gc_gcode_parser+0x62>
#ifdef __ECHO
	_gc_print_status(gc.status, block);
#endif
	return (gc.status);
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
}
    2cb6:	df 91       	pop	r29
    2cb8:	cf 91       	pop	r28
    2cba:	08 95       	ret

00002cbc <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2cbc:	cf 92       	push	r12
    2cbe:	df 92       	push	r13
    2cc0:	ef 92       	push	r14
    2cc2:	ff 92       	push	r15
    2cc4:	0f 93       	push	r16
    2cc6:	1f 93       	push	r17
    2cc8:	cf 93       	push	r28
    2cca:	df 93       	push	r29
    2ccc:	c4 e2       	ldi	r28, 0x24	; 36
    2cce:	d4 e2       	ldi	r29, 0x24	; 36
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2cd0:	68 81       	ld	r22, Y
    2cd2:	70 e0       	ldi	r23, 0x00	; 0
    2cd4:	88 27       	eor	r24, r24
    2cd6:	77 fd       	sbrc	r23, 7
    2cd8:	80 95       	com	r24
    2cda:	98 2f       	mov	r25, r24
    2cdc:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    2ce0:	9b 01       	movw	r18, r22
    2ce2:	ac 01       	movw	r20, r24
    2ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce6:	78 85       	ldd	r23, Y+8	; 0x08
    2ce8:	89 85       	ldd	r24, Y+9	; 0x09
    2cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cec:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    2cf0:	9b 01       	movw	r18, r22
    2cf2:	ac 01       	movw	r20, r24
    2cf4:	60 e0       	ldi	r22, 0x00	; 0
    2cf6:	70 e0       	ldi	r23, 0x00	; 0
    2cf8:	84 eb       	ldi	r24, 0xB4	; 180
    2cfa:	93 e4       	ldi	r25, 0x43	; 67
    2cfc:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    2d00:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d02:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d04:	4d 85       	ldd	r20, Y+13	; 0x0d
    2d06:	5e 85       	ldd	r21, Y+14	; 0x0e
    2d08:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    2d0c:	6b 8b       	std	Y+19, r22	; 0x13
    2d0e:	7c 8b       	std	Y+20, r23	; 0x14
    2d10:	8d 8b       	std	Y+21, r24	; 0x15
    2d12:	9e 8b       	std	Y+22, r25	; 0x16
    2d14:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    2d16:	84 e2       	ldi	r24, 0x24	; 36
    2d18:	c4 38       	cpi	r28, 0x84	; 132
    2d1a:	d8 07       	cpc	r29, r24
    2d1c:	c9 f6       	brne	.-78     	; 0x2cd0 <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    2d1e:	00 91 24 24 	lds	r16, 0x2424
    2d22:	10 e0       	ldi	r17, 0x00	; 0
    2d24:	b8 01       	movw	r22, r16
    2d26:	88 27       	eor	r24, r24
    2d28:	77 fd       	sbrc	r23, 7
    2d2a:	80 95       	com	r24
    2d2c:	98 2f       	mov	r25, r24
    2d2e:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    2d32:	9b 01       	movw	r18, r22
    2d34:	ac 01       	movw	r20, r24
    2d36:	60 91 2b 24 	lds	r22, 0x242B
    2d3a:	70 91 2c 24 	lds	r23, 0x242C
    2d3e:	80 91 2d 24 	lds	r24, 0x242D
    2d42:	90 91 2e 24 	lds	r25, 0x242E
    2d46:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    2d4a:	9b 01       	movw	r18, r22
    2d4c:	ac 01       	movw	r20, r24
    2d4e:	60 e0       	ldi	r22, 0x00	; 0
    2d50:	70 e0       	ldi	r23, 0x00	; 0
    2d52:	84 eb       	ldi	r24, 0xB4	; 180
    2d54:	93 e4       	ldi	r25, 0x43	; 67
    2d56:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    2d5a:	6b 01       	movw	r12, r22
    2d5c:	7c 01       	movw	r14, r24
    2d5e:	80 91 29 24 	lds	r24, 0x2429
    2d62:	90 91 2a 24 	lds	r25, 0x242A
    2d66:	08 9f       	mul	r16, r24
    2d68:	b0 01       	movw	r22, r0
    2d6a:	09 9f       	mul	r16, r25
    2d6c:	70 0d       	add	r23, r0
    2d6e:	18 9f       	mul	r17, r24
    2d70:	70 0d       	add	r23, r0
    2d72:	11 24       	eor	r1, r1
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	0e 94 83 43 	call	0x8706	; 0x8706 <__floatunsisf>
    2d7c:	a7 01       	movw	r20, r14
    2d7e:	96 01       	movw	r18, r12
    2d80:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    2d84:	60 93 1c 24 	sts	0x241C, r22
    2d88:	70 93 1d 24 	sts	0x241D, r23
    2d8c:	80 93 1e 24 	sts	0x241E, r24
    2d90:	90 93 1f 24 	sts	0x241F, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    2d94:	80 91 27 24 	lds	r24, 0x2427
    2d98:	90 91 28 24 	lds	r25, 0x2428
    2d9c:	08 9f       	mul	r16, r24
    2d9e:	b0 01       	movw	r22, r0
    2da0:	09 9f       	mul	r16, r25
    2da2:	70 0d       	add	r23, r0
    2da4:	18 9f       	mul	r17, r24
    2da6:	70 0d       	add	r23, r0
    2da8:	11 24       	eor	r1, r1
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	0e 94 83 43 	call	0x8706	; 0x8706 <__floatunsisf>
    2db2:	a7 01       	movw	r20, r14
    2db4:	96 01       	movw	r18, r12
    2db6:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    2dba:	60 93 20 24 	sts	0x2420, r22
    2dbe:	70 93 21 24 	sts	0x2421, r23
    2dc2:	80 93 22 24 	sts	0x2422, r24
    2dc6:	90 93 23 24 	sts	0x2423, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    2dca:	df 91       	pop	r29
    2dcc:	cf 91       	pop	r28
    2dce:	1f 91       	pop	r17
    2dd0:	0f 91       	pop	r16
    2dd2:	ff 90       	pop	r15
    2dd4:	ef 90       	pop	r14
    2dd6:	df 90       	pop	r13
    2dd8:	cf 90       	pop	r12
    2dda:	08 95       	ret

00002ddc <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    2ddc:	e6 e1       	ldi	r30, 0x16	; 22
    2dde:	f4 e2       	ldi	r31, 0x24	; 36
    2de0:	84 e6       	ldi	r24, 0x64	; 100
    2de2:	80 93 16 24 	sts	0x2416, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2de6:	8a e0       	ldi	r24, 0x0A	; 10
    2de8:	97 ed       	ldi	r25, 0xD7	; 215
    2dea:	a3 e2       	ldi	r26, 0x23	; 35
    2dec:	bc e3       	ldi	r27, 0x3C	; 60
    2dee:	80 93 18 24 	sts	0x2418, r24
    2df2:	90 93 19 24 	sts	0x2419, r25
    2df6:	a0 93 1a 24 	sts	0x241A, r26
    2dfa:	b0 93 1b 24 	sts	0x241B, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2dfe:	8c ed       	ldi	r24, 0xDC	; 220
    2e00:	95 e0       	ldi	r25, 0x05	; 5
    2e02:	80 93 27 24 	sts	0x2427, r24
    2e06:	90 93 28 24 	sts	0x2428, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2e0a:	80 93 3f 24 	sts	0x243F, r24
    2e0e:	90 93 40 24 	sts	0x2440, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2e12:	80 93 57 24 	sts	0x2457, r24
    2e16:	90 93 58 24 	sts	0x2458, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2e1a:	80 93 6f 24 	sts	0x246F, r24
    2e1e:	90 93 70 24 	sts	0x2470, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2e22:	80 93 29 24 	sts	0x2429, r24
    2e26:	90 93 2a 24 	sts	0x242A, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2e2a:	80 93 41 24 	sts	0x2441, r24
    2e2e:	90 93 42 24 	sts	0x2442, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2e32:	80 93 59 24 	sts	0x2459, r24
    2e36:	90 93 5a 24 	sts	0x245A, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2e3a:	80 93 71 24 	sts	0x2471, r24
    2e3e:	90 93 72 24 	sts	0x2472, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2e42:	86 e6       	ldi	r24, 0x66	; 102
    2e44:	96 e6       	ldi	r25, 0x66	; 102
    2e46:	a6 ee       	ldi	r26, 0xE6	; 230
    2e48:	bf e3       	ldi	r27, 0x3F	; 63
    2e4a:	80 93 2b 24 	sts	0x242B, r24
    2e4e:	90 93 2c 24 	sts	0x242C, r25
    2e52:	a0 93 2d 24 	sts	0x242D, r26
    2e56:	b0 93 2e 24 	sts	0x242E, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2e5a:	80 93 43 24 	sts	0x2443, r24
    2e5e:	90 93 44 24 	sts	0x2444, r25
    2e62:	a0 93 45 24 	sts	0x2445, r26
    2e66:	b0 93 46 24 	sts	0x2446, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2e6a:	80 93 5b 24 	sts	0x245B, r24
    2e6e:	90 93 5c 24 	sts	0x245C, r25
    2e72:	a0 93 5d 24 	sts	0x245D, r26
    2e76:	b0 93 5e 24 	sts	0x245E, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2e7a:	80 93 73 24 	sts	0x2473, r24
    2e7e:	90 93 74 24 	sts	0x2474, r25
    2e82:	a0 93 75 24 	sts	0x2475, r26
    2e86:	b0 93 76 24 	sts	0x2476, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    2e8a:	8c e5       	ldi	r24, 0x5C	; 92
    2e8c:	9f e8       	ldi	r25, 0x8F	; 143
    2e8e:	a2 ea       	ldi	r26, 0xA2	; 162
    2e90:	bf e3       	ldi	r27, 0x3F	; 63
    2e92:	80 93 2f 24 	sts	0x242F, r24
    2e96:	90 93 30 24 	sts	0x2430, r25
    2e9a:	a0 93 31 24 	sts	0x2431, r26
    2e9e:	b0 93 32 24 	sts	0x2432, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    2ea2:	80 93 47 24 	sts	0x2447, r24
    2ea6:	90 93 48 24 	sts	0x2448, r25
    2eaa:	a0 93 49 24 	sts	0x2449, r26
    2eae:	b0 93 4a 24 	sts	0x244A, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    2eb2:	80 93 5f 24 	sts	0x245F, r24
    2eb6:	90 93 60 24 	sts	0x2460, r25
    2eba:	a0 93 61 24 	sts	0x2461, r26
    2ebe:	b0 93 62 24 	sts	0x2462, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    2ec2:	80 93 77 24 	sts	0x2477, r24
    2ec6:	90 93 78 24 	sts	0x2478, r25
    2eca:	a0 93 79 24 	sts	0x2479, r26
    2ece:	b0 93 7a 24 	sts	0x247A, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	a8 ec       	ldi	r26, 0xC8	; 200
    2ed8:	b3 e4       	ldi	r27, 0x43	; 67
    2eda:	80 93 33 24 	sts	0x2433, r24
    2ede:	90 93 34 24 	sts	0x2434, r25
    2ee2:	a0 93 35 24 	sts	0x2435, r26
    2ee6:	b0 93 36 24 	sts	0x2436, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    2eea:	80 93 4b 24 	sts	0x244B, r24
    2eee:	90 93 4c 24 	sts	0x244C, r25
    2ef2:	a0 93 4d 24 	sts	0x244D, r26
    2ef6:	b0 93 4e 24 	sts	0x244E, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	a6 e9       	ldi	r26, 0x96	; 150
    2f00:	b3 e4       	ldi	r27, 0x43	; 67
    2f02:	80 93 63 24 	sts	0x2463, r24
    2f06:	90 93 64 24 	sts	0x2464, r25
    2f0a:	a0 93 65 24 	sts	0x2465, r26
    2f0e:	b0 93 66 24 	sts	0x2466, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	a0 e8       	ldi	r26, 0x80	; 128
    2f18:	bf eb       	ldi	r27, 0xBF	; 191
    2f1a:	80 93 7b 24 	sts	0x247B, r24
    2f1e:	90 93 7c 24 	sts	0x247C, r25
    2f22:	a0 93 7d 24 	sts	0x247D, r26
    2f26:	b0 93 7e 24 	sts	0x247E, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    2f2a:	88 e0       	ldi	r24, 0x08	; 8
    2f2c:	80 93 24 24 	sts	0x2424, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    2f30:	80 93 3c 24 	sts	0x243C, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    2f34:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A].microstep = A_MICROSTEPS;
    2f36:	80 93 6c 24 	sts	0x246C, r24

	cfg.a[X].polarity = X_POLARITY;
    2f3a:	10 92 26 24 	sts	0x2426, r1
	cfg.a[Y].polarity = Y_POLARITY;
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	80 93 3e 24 	sts	0x243E, r24
	cfg.a[Z].polarity = Z_POLARITY;
    2f44:	10 92 56 24 	sts	0x2456, r1
	cfg.a[A].polarity = A_POLARITY;
    2f48:	10 92 6e 24 	sts	0x246E, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    2f4c:	80 93 3b 24 	sts	0x243B, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    2f50:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    2f52:	80 93 6b 24 	sts	0x246B, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    2f56:	10 92 83 24 	sts	0x2483, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    2f5a:	80 93 25 24 	sts	0x2425, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    2f5e:	80 93 3d 24 	sts	0x243D, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    2f62:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    2f64:	80 93 6d 24 	sts	0x246D, r24

	_cfg_computed();		// generate computed values from the above
    2f68:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <_cfg_computed>
}
    2f6c:	08 95       	ret

00002f6e <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2f6e:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <cfg_reset>
}
    2f72:	08 95       	ret

00002f74 <_cfg_print_status>:
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    2f74:	89 30       	cpi	r24, 0x09	; 9
    2f76:	31 f1       	breq	.+76     	; 0x2fc4 <_cfg_print_status+0x50>
    2f78:	8a 30       	cpi	r24, 0x0A	; 10
    2f7a:	30 f4       	brcc	.+12     	; 0x2f88 <_cfg_print_status+0x14>
    2f7c:	81 30       	cpi	r24, 0x01	; 1
    2f7e:	59 f0       	breq	.+22     	; 0x2f96 <_cfg_print_status+0x22>
    2f80:	83 30       	cpi	r24, 0x03	; 3
    2f82:	09 f0       	breq	.+2      	; 0x2f86 <_cfg_print_status+0x12>
    2f84:	45 c0       	rjmp	.+138    	; 0x3010 <_cfg_print_status+0x9c>
    2f86:	0c c0       	rjmp	.+24     	; 0x2fa0 <_cfg_print_status+0x2c>
    2f88:	8e 30       	cpi	r24, 0x0E	; 14
    2f8a:	09 f1       	breq	.+66     	; 0x2fce <_cfg_print_status+0x5a>
    2f8c:	80 31       	cpi	r24, 0x10	; 16
    2f8e:	81 f1       	breq	.+96     	; 0x2ff0 <_cfg_print_status+0x7c>
    2f90:	8d 30       	cpi	r24, 0x0D	; 13
    2f92:	f1 f5       	brne	.+124    	; 0x3010 <_cfg_print_status+0x9c>
    2f94:	12 c0       	rjmp	.+36     	; 0x2fba <_cfg_print_status+0x46>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_EAGAIN: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    2f96:	00 d0       	rcall	.+0      	; 0x2f98 <_cfg_print_status+0x24>
    2f98:	0f 92       	push	r0
    2f9a:	85 e1       	ldi	r24, 0x15	; 21
    2f9c:	94 e0       	ldi	r25, 0x04	; 4
    2f9e:	1b c0       	rjmp	.+54     	; 0x2fd6 <_cfg_print_status+0x62>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    2fa0:	0f 92       	push	r0
    2fa2:	0f 92       	push	r0
    2fa4:	8f ef       	ldi	r24, 0xFF	; 255
    2fa6:	93 e0       	ldi	r25, 0x03	; 3
    2fa8:	ed b7       	in	r30, 0x3d	; 61
    2faa:	fe b7       	in	r31, 0x3e	; 62
    2fac:	81 83       	std	Z+1, r24	; 0x01
    2fae:	92 83       	std	Z+2, r25	; 0x02
    2fb0:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	08 95       	ret
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2fba:	00 d0       	rcall	.+0      	; 0x2fbc <_cfg_print_status+0x48>
    2fbc:	0f 92       	push	r0
    2fbe:	88 ee       	ldi	r24, 0xE8	; 232
    2fc0:	93 e0       	ldi	r25, 0x03	; 3
    2fc2:	09 c0       	rjmp	.+18     	; 0x2fd6 <_cfg_print_status+0x62>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    2fc4:	00 d0       	rcall	.+0      	; 0x2fc6 <_cfg_print_status+0x52>
    2fc6:	0f 92       	push	r0
    2fc8:	8e ec       	ldi	r24, 0xCE	; 206
    2fca:	93 e0       	ldi	r25, 0x03	; 3
    2fcc:	04 c0       	rjmp	.+8      	; 0x2fd6 <_cfg_print_status+0x62>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2fce:	00 d0       	rcall	.+0      	; 0x2fd0 <_cfg_print_status+0x5c>
    2fd0:	0f 92       	push	r0
    2fd2:	84 eb       	ldi	r24, 0xB4	; 180
    2fd4:	93 e0       	ldi	r25, 0x03	; 3
    2fd6:	ed b7       	in	r30, 0x3d	; 61
    2fd8:	fe b7       	in	r31, 0x3e	; 62
    2fda:	81 83       	std	Z+1, r24	; 0x01
    2fdc:	92 83       	std	Z+2, r25	; 0x02
    2fde:	63 83       	std	Z+3, r22	; 0x03
    2fe0:	74 83       	std	Z+4, r23	; 0x04
    2fe2:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	0f 90       	pop	r0
    2fee:	08 95       	ret
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    2ff0:	00 d0       	rcall	.+0      	; 0x2ff2 <_cfg_print_status+0x7e>
    2ff2:	0f 92       	push	r0
    2ff4:	89 e9       	ldi	r24, 0x99	; 153
    2ff6:	93 e0       	ldi	r25, 0x03	; 3
    2ff8:	ed b7       	in	r30, 0x3d	; 61
    2ffa:	fe b7       	in	r31, 0x3e	; 62
    2ffc:	81 83       	std	Z+1, r24	; 0x01
    2ffe:	92 83       	std	Z+2, r25	; 0x02
    3000:	63 83       	std	Z+3, r22	; 0x03
    3002:	74 83       	std	Z+4, r23	; 0x04
    3004:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
    3008:	0f 90       	pop	r0
    300a:	0f 90       	pop	r0
    300c:	0f 90       	pop	r0
    300e:	0f 90       	pop	r0
    3010:	08 95       	ret

00003012 <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    3012:	ef 92       	push	r14
    3014:	ff 92       	push	r15
    3016:	0f 93       	push	r16
    3018:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    301a:	e8 2e       	mov	r14, r24
    301c:	ff 24       	eor	r15, r15
    301e:	87 01       	movw	r16, r14
    3020:	00 0f       	add	r16, r16
    3022:	11 1f       	adc	r17, r17
    3024:	f8 01       	movw	r30, r16
    3026:	ed 5b       	subi	r30, 0xBD	; 189
    3028:	fd 4f       	sbci	r31, 0xFD	; 253
    302a:	25 91       	lpm	r18, Z+
    302c:	34 91       	lpm	r19, Z+
    302e:	00 d0       	rcall	.+0      	; 0x3030 <_cfg_dump_axis+0x1e>
    3030:	0f 92       	push	r0
    3032:	88 e3       	ldi	r24, 0x38	; 56
    3034:	96 e0       	ldi	r25, 0x06	; 6
    3036:	ad b7       	in	r26, 0x3d	; 61
    3038:	be b7       	in	r27, 0x3e	; 62
    303a:	11 96       	adiw	r26, 0x01	; 1
    303c:	8d 93       	st	X+, r24
    303e:	9c 93       	st	X, r25
    3040:	12 97       	sbiw	r26, 0x02	; 2
    3042:	13 96       	adiw	r26, 0x03	; 3
    3044:	2d 93       	st	X+, r18
    3046:	3c 93       	st	X, r19
    3048:	14 97       	sbiw	r26, 0x04	; 4
    304a:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    304e:	80 e0       	ldi	r24, 0x00	; 0
    3050:	96 e0       	ldi	r25, 0x06	; 6
    3052:	ed b7       	in	r30, 0x3d	; 61
    3054:	fe b7       	in	r31, 0x3e	; 62
    3056:	81 83       	std	Z+1, r24	; 0x01
    3058:	92 83       	std	Z+2, r25	; 0x02
    305a:	0e 0d       	add	r16, r14
    305c:	1f 1d       	adc	r17, r15
    305e:	83 e0       	ldi	r24, 0x03	; 3
    3060:	00 0f       	add	r16, r16
    3062:	11 1f       	adc	r17, r17
    3064:	8a 95       	dec	r24
    3066:	e1 f7       	brne	.-8      	; 0x3060 <_cfg_dump_axis+0x4e>
    3068:	0a 5e       	subi	r16, 0xEA	; 234
    306a:	1b 4d       	sbci	r17, 0xDB	; 219
    306c:	d8 01       	movw	r26, r16
    306e:	51 96       	adiw	r26, 0x11	; 17
    3070:	8d 91       	ld	r24, X+
    3072:	9c 91       	ld	r25, X
    3074:	52 97       	sbiw	r26, 0x12	; 18
    3076:	83 83       	std	Z+3, r24	; 0x03
    3078:	94 83       	std	Z+4, r25	; 0x04
    307a:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    307e:	88 ec       	ldi	r24, 0xC8	; 200
    3080:	95 e0       	ldi	r25, 0x05	; 5
    3082:	ed b7       	in	r30, 0x3d	; 61
    3084:	fe b7       	in	r31, 0x3e	; 62
    3086:	81 83       	std	Z+1, r24	; 0x01
    3088:	92 83       	std	Z+2, r25	; 0x02
    308a:	d8 01       	movw	r26, r16
    308c:	53 96       	adiw	r26, 0x13	; 19
    308e:	8d 91       	ld	r24, X+
    3090:	9c 91       	ld	r25, X
    3092:	54 97       	sbiw	r26, 0x14	; 20
    3094:	83 83       	std	Z+3, r24	; 0x03
    3096:	94 83       	std	Z+4, r25	; 0x04
    3098:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    309c:	ed b7       	in	r30, 0x3d	; 61
    309e:	fe b7       	in	r31, 0x3e	; 62
    30a0:	31 96       	adiw	r30, 0x01	; 1
    30a2:	85 e9       	ldi	r24, 0x95	; 149
    30a4:	95 e0       	ldi	r25, 0x05	; 5
    30a6:	ad b7       	in	r26, 0x3d	; 61
    30a8:	be b7       	in	r27, 0x3e	; 62
    30aa:	11 96       	adiw	r26, 0x01	; 1
    30ac:	8d 93       	st	X+, r24
    30ae:	9c 93       	st	X, r25
    30b0:	12 97       	sbiw	r26, 0x02	; 2
    30b2:	d8 01       	movw	r26, r16
    30b4:	1e 96       	adiw	r26, 0x0e	; 14
    30b6:	8c 91       	ld	r24, X
    30b8:	82 83       	std	Z+2, r24	; 0x02
    30ba:	13 82       	std	Z+3, r1	; 0x03
    30bc:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    30c0:	0f 92       	push	r0
    30c2:	0f 92       	push	r0
    30c4:	8e e5       	ldi	r24, 0x5E	; 94
    30c6:	95 e0       	ldi	r25, 0x05	; 5
    30c8:	ed b7       	in	r30, 0x3d	; 61
    30ca:	fe b7       	in	r31, 0x3e	; 62
    30cc:	81 83       	std	Z+1, r24	; 0x01
    30ce:	92 83       	std	Z+2, r25	; 0x02
    30d0:	f8 01       	movw	r30, r16
    30d2:	85 89       	ldd	r24, Z+21	; 0x15
    30d4:	96 89       	ldd	r25, Z+22	; 0x16
    30d6:	a7 89       	ldd	r26, Z+23	; 0x17
    30d8:	b0 8d       	ldd	r27, Z+24	; 0x18
    30da:	ed b7       	in	r30, 0x3d	; 61
    30dc:	fe b7       	in	r31, 0x3e	; 62
    30de:	83 83       	std	Z+3, r24	; 0x03
    30e0:	94 83       	std	Z+4, r25	; 0x04
    30e2:	a5 83       	std	Z+5, r26	; 0x05
    30e4:	b6 83       	std	Z+6, r27	; 0x06
    30e6:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    30ea:	8b e2       	ldi	r24, 0x2B	; 43
    30ec:	95 e0       	ldi	r25, 0x05	; 5
    30ee:	ad b7       	in	r26, 0x3d	; 61
    30f0:	be b7       	in	r27, 0x3e	; 62
    30f2:	11 96       	adiw	r26, 0x01	; 1
    30f4:	8d 93       	st	X+, r24
    30f6:	9c 93       	st	X, r25
    30f8:	12 97       	sbiw	r26, 0x02	; 2
    30fa:	f8 01       	movw	r30, r16
    30fc:	81 8d       	ldd	r24, Z+25	; 0x19
    30fe:	92 8d       	ldd	r25, Z+26	; 0x1a
    3100:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3102:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3104:	ed b7       	in	r30, 0x3d	; 61
    3106:	fe b7       	in	r31, 0x3e	; 62
    3108:	83 83       	std	Z+3, r24	; 0x03
    310a:	94 83       	std	Z+4, r25	; 0x04
    310c:	a5 83       	std	Z+5, r26	; 0x05
    310e:	b6 83       	std	Z+6, r27	; 0x06
    3110:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    3114:	88 ef       	ldi	r24, 0xF8	; 248
    3116:	94 e0       	ldi	r25, 0x04	; 4
    3118:	ad b7       	in	r26, 0x3d	; 61
    311a:	be b7       	in	r27, 0x3e	; 62
    311c:	11 96       	adiw	r26, 0x01	; 1
    311e:	8d 93       	st	X+, r24
    3120:	9c 93       	st	X, r25
    3122:	12 97       	sbiw	r26, 0x02	; 2
    3124:	f8 01       	movw	r30, r16
    3126:	85 8d       	ldd	r24, Z+29	; 0x1d
    3128:	96 8d       	ldd	r25, Z+30	; 0x1e
    312a:	a7 8d       	ldd	r26, Z+31	; 0x1f
    312c:	b0 a1       	ldd	r27, Z+32	; 0x20
    312e:	ed b7       	in	r30, 0x3d	; 61
    3130:	fe b7       	in	r31, 0x3e	; 62
    3132:	83 83       	std	Z+3, r24	; 0x03
    3134:	94 83       	std	Z+4, r25	; 0x04
    3136:	a5 83       	std	Z+5, r26	; 0x05
    3138:	b6 83       	std	Z+6, r27	; 0x06
    313a:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    313e:	0f 90       	pop	r0
    3140:	0f 90       	pop	r0
    3142:	ed b7       	in	r30, 0x3d	; 61
    3144:	fe b7       	in	r31, 0x3e	; 62
    3146:	31 96       	adiw	r30, 0x01	; 1
    3148:	87 ec       	ldi	r24, 0xC7	; 199
    314a:	94 e0       	ldi	r25, 0x04	; 4
    314c:	ad b7       	in	r26, 0x3d	; 61
    314e:	be b7       	in	r27, 0x3e	; 62
    3150:	11 96       	adiw	r26, 0x01	; 1
    3152:	8d 93       	st	X+, r24
    3154:	9c 93       	st	X, r25
    3156:	12 97       	sbiw	r26, 0x02	; 2
    3158:	d8 01       	movw	r26, r16
    315a:	95 96       	adiw	r26, 0x25	; 37
    315c:	8c 91       	ld	r24, X
    315e:	82 83       	std	Z+2, r24	; 0x02
    3160:	13 82       	std	Z+3, r1	; 0x03
    3162:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    3166:	ed b7       	in	r30, 0x3d	; 61
    3168:	fe b7       	in	r31, 0x3e	; 62
    316a:	31 96       	adiw	r30, 0x01	; 1
    316c:	86 e9       	ldi	r24, 0x96	; 150
    316e:	94 e0       	ldi	r25, 0x04	; 4
    3170:	ad b7       	in	r26, 0x3d	; 61
    3172:	be b7       	in	r27, 0x3e	; 62
    3174:	11 96       	adiw	r26, 0x01	; 1
    3176:	8d 93       	st	X+, r24
    3178:	9c 93       	st	X, r25
    317a:	12 97       	sbiw	r26, 0x02	; 2
    317c:	d8 01       	movw	r26, r16
    317e:	1f 96       	adiw	r26, 0x0f	; 15
    3180:	8c 91       	ld	r24, X
    3182:	82 83       	std	Z+2, r24	; 0x02
    3184:	13 82       	std	Z+3, r1	; 0x03
    3186:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    318a:	ed b7       	in	r30, 0x3d	; 61
    318c:	fe b7       	in	r31, 0x3e	; 62
    318e:	31 96       	adiw	r30, 0x01	; 1
    3190:	86 e6       	ldi	r24, 0x66	; 102
    3192:	94 e0       	ldi	r25, 0x04	; 4
    3194:	ad b7       	in	r26, 0x3d	; 61
    3196:	be b7       	in	r27, 0x3e	; 62
    3198:	11 96       	adiw	r26, 0x01	; 1
    319a:	8d 93       	st	X+, r24
    319c:	9c 93       	st	X, r25
    319e:	12 97       	sbiw	r26, 0x02	; 2
    31a0:	d8 01       	movw	r26, r16
    31a2:	50 96       	adiw	r26, 0x10	; 16
    31a4:	8c 91       	ld	r24, X
    31a6:	82 83       	std	Z+2, r24	; 0x02
    31a8:	13 82       	std	Z+3, r1	; 0x03
    31aa:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    31ae:	0f 92       	push	r0
    31b0:	0f 92       	push	r0
    31b2:	82 e3       	ldi	r24, 0x32	; 50
    31b4:	94 e0       	ldi	r25, 0x04	; 4
    31b6:	ed b7       	in	r30, 0x3d	; 61
    31b8:	fe b7       	in	r31, 0x3e	; 62
    31ba:	81 83       	std	Z+1, r24	; 0x01
    31bc:	92 83       	std	Z+2, r25	; 0x02
    31be:	f8 01       	movw	r30, r16
    31c0:	81 a1       	ldd	r24, Z+33	; 0x21
    31c2:	92 a1       	ldd	r25, Z+34	; 0x22
    31c4:	a3 a1       	ldd	r26, Z+35	; 0x23
    31c6:	b4 a1       	ldd	r27, Z+36	; 0x24
    31c8:	ed b7       	in	r30, 0x3d	; 61
    31ca:	fe b7       	in	r31, 0x3e	; 62
    31cc:	83 83       	std	Z+3, r24	; 0x03
    31ce:	94 83       	std	Z+4, r25	; 0x04
    31d0:	a5 83       	std	Z+5, r26	; 0x05
    31d2:	b6 83       	std	Z+6, r27	; 0x06
    31d4:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
    31d8:	8d b7       	in	r24, 0x3d	; 61
    31da:	9e b7       	in	r25, 0x3e	; 62
    31dc:	06 96       	adiw	r24, 0x06	; 6
    31de:	8d bf       	out	0x3d, r24	; 61
    31e0:	9e bf       	out	0x3e, r25	; 62
}
    31e2:	1f 91       	pop	r17
    31e4:	0f 91       	pop	r16
    31e6:	ff 90       	pop	r15
    31e8:	ef 90       	pop	r14
    31ea:	08 95       	ret

000031ec <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    31ec:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    31ee:	00 d0       	rcall	.+0      	; 0x31f0 <cfg_dump+0x4>
    31f0:	0f 92       	push	r0
    31f2:	ed b7       	in	r30, 0x3d	; 61
    31f4:	fe b7       	in	r31, 0x3e	; 62
    31f6:	31 96       	adiw	r30, 0x01	; 1
    31f8:	8c ef       	ldi	r24, 0xFC	; 252
    31fa:	96 e0       	ldi	r25, 0x06	; 6
    31fc:	ad b7       	in	r26, 0x3d	; 61
    31fe:	be b7       	in	r27, 0x3e	; 62
    3200:	11 96       	adiw	r26, 0x01	; 1
    3202:	8d 93       	st	X+, r24
    3204:	9c 93       	st	X, r25
    3206:	12 97       	sbiw	r26, 0x02	; 2
    3208:	80 91 16 24 	lds	r24, 0x2416
    320c:	82 83       	std	Z+2, r24	; 0x02
    320e:	13 82       	std	Z+3, r1	; 0x03
    3210:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	85 ed       	ldi	r24, 0xD5	; 213
    321a:	96 e0       	ldi	r25, 0x06	; 6
    321c:	ed b7       	in	r30, 0x3d	; 61
    321e:	fe b7       	in	r31, 0x3e	; 62
    3220:	81 83       	std	Z+1, r24	; 0x01
    3222:	92 83       	std	Z+2, r25	; 0x02
    3224:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    3228:	00 d0       	rcall	.+0      	; 0x322a <cfg_dump+0x3e>
    322a:	0f 92       	push	r0
    322c:	8b ea       	ldi	r24, 0xAB	; 171
    322e:	96 e0       	ldi	r25, 0x06	; 6
    3230:	ad b7       	in	r26, 0x3d	; 61
    3232:	be b7       	in	r27, 0x3e	; 62
    3234:	11 96       	adiw	r26, 0x01	; 1
    3236:	8d 93       	st	X+, r24
    3238:	9c 93       	st	X, r25
    323a:	12 97       	sbiw	r26, 0x02	; 2
    323c:	80 91 18 24 	lds	r24, 0x2418
    3240:	90 91 19 24 	lds	r25, 0x2419
    3244:	a0 91 1a 24 	lds	r26, 0x241A
    3248:	b0 91 1b 24 	lds	r27, 0x241B
    324c:	ed b7       	in	r30, 0x3d	; 61
    324e:	fe b7       	in	r31, 0x3e	; 62
    3250:	83 83       	std	Z+3, r24	; 0x03
    3252:	94 83       	std	Z+4, r25	; 0x04
    3254:	a5 83       	std	Z+5, r26	; 0x05
    3256:	b6 83       	std	Z+6, r27	; 0x06
    3258:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    325c:	81 e8       	ldi	r24, 0x81	; 129
    325e:	96 e0       	ldi	r25, 0x06	; 6
    3260:	ad b7       	in	r26, 0x3d	; 61
    3262:	be b7       	in	r27, 0x3e	; 62
    3264:	11 96       	adiw	r26, 0x01	; 1
    3266:	8d 93       	st	X+, r24
    3268:	9c 93       	st	X, r25
    326a:	12 97       	sbiw	r26, 0x02	; 2
    326c:	80 91 20 24 	lds	r24, 0x2420
    3270:	90 91 21 24 	lds	r25, 0x2421
    3274:	a0 91 22 24 	lds	r26, 0x2422
    3278:	b0 91 23 24 	lds	r27, 0x2423
    327c:	ed b7       	in	r30, 0x3d	; 61
    327e:	fe b7       	in	r31, 0x3e	; 62
    3280:	83 83       	std	Z+3, r24	; 0x03
    3282:	94 83       	std	Z+4, r25	; 0x04
    3284:	a5 83       	std	Z+5, r26	; 0x05
    3286:	b6 83       	std	Z+6, r27	; 0x06
    3288:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    328c:	86 e5       	ldi	r24, 0x56	; 86
    328e:	96 e0       	ldi	r25, 0x06	; 6
    3290:	ad b7       	in	r26, 0x3d	; 61
    3292:	be b7       	in	r27, 0x3e	; 62
    3294:	11 96       	adiw	r26, 0x01	; 1
    3296:	8d 93       	st	X+, r24
    3298:	9c 93       	st	X, r25
    329a:	12 97       	sbiw	r26, 0x02	; 2
    329c:	80 91 1c 24 	lds	r24, 0x241C
    32a0:	90 91 1d 24 	lds	r25, 0x241D
    32a4:	a0 91 1e 24 	lds	r26, 0x241E
    32a8:	b0 91 1f 24 	lds	r27, 0x241F
    32ac:	ed b7       	in	r30, 0x3d	; 61
    32ae:	fe b7       	in	r31, 0x3e	; 62
    32b0:	83 83       	std	Z+3, r24	; 0x03
    32b2:	94 83       	std	Z+4, r25	; 0x04
    32b4:	a5 83       	std	Z+5, r26	; 0x05
    32b6:	b6 83       	std	Z+6, r27	; 0x06
    32b8:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
    32bc:	10 e0       	ldi	r17, 0x00	; 0
    32be:	8d b7       	in	r24, 0x3d	; 61
    32c0:	9e b7       	in	r25, 0x3e	; 62
    32c2:	06 96       	adiw	r24, 0x06	; 6
    32c4:	8d bf       	out	0x3d, r24	; 61
    32c6:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
		_cfg_dump_axis(axis);
    32c8:	81 2f       	mov	r24, r17
    32ca:	0e 94 09 18 	call	0x3012	; 0x3012 <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    32ce:	1f 5f       	subi	r17, 0xFF	; 255
    32d0:	14 30       	cpi	r17, 0x04	; 4
    32d2:	d1 f7       	brne	.-12     	; 0x32c8 <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    32d4:	1f 91       	pop	r17
    32d6:	08 95       	ret

000032d8 <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    32d8:	80 e0       	ldi	r24, 0x00	; 0
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	66 e1       	ldi	r22, 0x16	; 22
    32de:	74 e2       	ldi	r23, 0x24	; 36
    32e0:	4e e6       	ldi	r20, 0x6E	; 110
    32e2:	50 e0       	ldi	r21, 0x00	; 0
    32e4:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <memcpy_to_eeprom_with_checksum>
}
    32e8:	08 95       	ret

000032ea <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    32f2:	84 36       	cpi	r24, 0x64	; 100
    32f4:	19 f0       	breq	.+6      	; 0x32fc <cfg_read+0x12>
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	0d c0       	rjmp	.+26     	; 0x3316 <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    32fc:	86 e1       	ldi	r24, 0x16	; 22
    32fe:	94 e2       	ldi	r25, 0x24	; 36
    3300:	60 e0       	ldi	r22, 0x00	; 0
    3302:	70 e0       	ldi	r23, 0x00	; 0
    3304:	4e e6       	ldi	r20, 0x6E	; 110
    3306:	50 e0       	ldi	r21, 0x00	; 0
    3308:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <memcpy_from_eeprom_with_checksum>
    330c:	00 97       	sbiw	r24, 0x00	; 0
    330e:	11 f0       	breq	.+4      	; 0x3314 <cfg_read+0x2a>
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    3316:	c9 01       	movw	r24, r18
    3318:	08 95       	ret

0000331a <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    331a:	cf 92       	push	r12
    331c:	df 92       	push	r13
    331e:	ef 92       	push	r14
    3320:	ff 92       	push	r15
    3322:	1f 93       	push	r17
    3324:	df 93       	push	r29
    3326:	cf 93       	push	r28
    3328:	0f 92       	push	r0
    332a:	0f 92       	push	r0
    332c:	cd b7       	in	r28, 0x3d	; 61
    332e:	de b7       	in	r29, 0x3e	; 62
    3330:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    3332:	19 82       	std	Y+1, r1	; 0x01
    3334:	1a 82       	std	Y+2, r1	; 0x02
    3336:	cc 24       	eor	r12, r12
    3338:	dd 24       	eor	r13, r13
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	2b c0       	rjmp	.+86     	; 0x3396 <cfg_parse+0x7c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
		if (c == '=') {							// handle separator
    3340:	9d 33       	cpi	r25, 0x3D	; 61
    3342:	49 f4       	brne	.+18     	; 0x3356 <cfg_parse+0x3c>
			text[j++] = 0;						// terminate tag at separator
    3344:	f7 01       	movw	r30, r14
    3346:	e2 0f       	add	r30, r18
    3348:	f1 1d       	adc	r31, r1
    334a:	10 82       	st	Z, r1
    334c:	2f 5f       	subi	r18, 0xFF	; 255
			val = &text[j];						// new string starts at value
    334e:	67 01       	movw	r12, r14
    3350:	c2 0e       	add	r12, r18
    3352:	d1 1c       	adc	r13, r1
    3354:	20 c0       	rjmp	.+64     	; 0x3396 <cfg_parse+0x7c>
		} else if ( (c == '-') || 				// pass special characters
    3356:	9d 32       	cpi	r25, 0x2D	; 45
    3358:	c9 f0       	breq	.+50     	; 0x338c <cfg_parse+0x72>
    335a:	9b 32       	cpi	r25, 0x2B	; 43
    335c:	b9 f0       	breq	.+46     	; 0x338c <cfg_parse+0x72>
    335e:	9e 32       	cpi	r25, 0x2E	; 46
    3360:	a9 f0       	breq	.+42     	; 0x338c <cfg_parse+0x72>
    3362:	9f 33       	cpi	r25, 0x3F	; 63
    3364:	99 f0       	breq	.+38     	; 0x338c <cfg_parse+0x72>
    3366:	98 32       	cpi	r25, 0x28	; 40
    3368:	89 f0       	breq	.+34     	; 0x338c <cfg_parse+0x72>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'a' && c <= 'z') {		// convert lower to upper
    336a:	89 2f       	mov	r24, r25
    336c:	81 56       	subi	r24, 0x61	; 97
    336e:	8a 31       	cpi	r24, 0x1A	; 26
    3370:	28 f4       	brcc	.+10     	; 0x337c <cfg_parse+0x62>
			text[j++] = c-'a'+'A';
    3372:	f7 01       	movw	r30, r14
    3374:	e2 0f       	add	r30, r18
    3376:	f1 1d       	adc	r31, r1
    3378:	90 52       	subi	r25, 0x20	; 32
    337a:	0b c0       	rjmp	.+22     	; 0x3392 <cfg_parse+0x78>
		} else if (c >= 'A' && c <= 'Z') {		// pass upper case letters
    337c:	89 2f       	mov	r24, r25
    337e:	81 54       	subi	r24, 0x41	; 65
    3380:	8a 31       	cpi	r24, 0x1A	; 26
    3382:	20 f0       	brcs	.+8      	; 0x338c <cfg_parse+0x72>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
    3384:	89 2f       	mov	r24, r25
    3386:	80 53       	subi	r24, 0x30	; 48
    3388:	8a 30       	cpi	r24, 0x0A	; 10
    338a:	28 f4       	brcc	.+10     	; 0x3396 <cfg_parse+0x7c>
			text[j++] = c;
    338c:	f7 01       	movw	r30, r14
    338e:	e2 0f       	add	r30, r18
    3390:	f1 1d       	adc	r31, r1
    3392:	90 83       	st	Z, r25
    3394:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
    3396:	f7 01       	movw	r30, r14
    3398:	e3 0f       	add	r30, r19
    339a:	f1 1d       	adc	r31, r1
    339c:	90 81       	ld	r25, Z
    339e:	3f 5f       	subi	r19, 0xFF	; 255
    33a0:	99 23       	and	r25, r25
    33a2:	71 f6       	brne	.-100    	; 0x3340 <cfg_parse+0x26>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// terminate line
    33a4:	f7 01       	movw	r30, r14
    33a6:	e2 0f       	add	r30, r18
    33a8:	f1 1d       	adc	r31, r1
    33aa:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    33ac:	2f 5f       	subi	r18, 0xFF	; 255
    33ae:	c7 01       	movw	r24, r14
    33b0:	82 0f       	add	r24, r18
    33b2:	91 1d       	adc	r25, r1
    33b4:	89 83       	std	Y+1, r24	; 0x01
    33b6:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    33b8:	10 92 17 24 	sts	0x2417, r1
	switch (text[0]) {
    33bc:	f7 01       	movw	r30, r14
    33be:	80 81       	ld	r24, Z
    33c0:	81 35       	cpi	r24, 0x51	; 81
    33c2:	d1 f0       	breq	.+52     	; 0x33f8 <cfg_parse+0xde>
    33c4:	82 35       	cpi	r24, 0x52	; 82
    33c6:	60 f4       	brcc	.+24     	; 0x33e0 <cfg_parse+0xc6>
    33c8:	81 34       	cpi	r24, 0x41	; 65
    33ca:	59 f1       	breq	.+86     	; 0x3422 <cfg_parse+0x108>
    33cc:	82 34       	cpi	r24, 0x42	; 66
    33ce:	28 f4       	brcc	.+10     	; 0x33da <cfg_parse+0xc0>
    33d0:	88 32       	cpi	r24, 0x28	; 40
    33d2:	11 f1       	breq	.+68     	; 0x3418 <cfg_parse+0xfe>
    33d4:	8f 33       	cpi	r24, 0x3F	; 63
    33d6:	39 f5       	brne	.+78     	; 0x3426 <cfg_parse+0x10c>
    33d8:	0c c0       	rjmp	.+24     	; 0x33f2 <cfg_parse+0xd8>
    33da:	8d 34       	cpi	r24, 0x4D	; 77
    33dc:	21 f5       	brne	.+72     	; 0x3426 <cfg_parse+0x10c>
    33de:	0e c0       	rjmp	.+28     	; 0x33fc <cfg_parse+0xe2>
    33e0:	89 35       	cpi	r24, 0x59	; 89
    33e2:	29 f0       	breq	.+10     	; 0x33ee <cfg_parse+0xd4>
    33e4:	8a 35       	cpi	r24, 0x5A	; 90
    33e6:	d9 f0       	breq	.+54     	; 0x341e <cfg_parse+0x104>
    33e8:	88 35       	cpi	r24, 0x58	; 88
    33ea:	e9 f4       	brne	.+58     	; 0x3426 <cfg_parse+0x10c>
    33ec:	1f c0       	rjmp	.+62     	; 0x342c <cfg_parse+0x112>
    33ee:	11 e0       	ldi	r17, 0x01	; 1
    33f0:	1e c0       	rjmp	.+60     	; 0x342e <cfg_parse+0x114>
		case '?': cfg_dump(); status (TG_OK); break;
    33f2:	0e 94 f6 18 	call	0x31ec	; 0x31ec <cfg_dump>
    33f6:	10 c0       	rjmp	.+32     	; 0x3418 <cfg_parse+0xfe>
		case '(': status (TG_OK);	break;			// ignore comment lines
		case 'Q': status (TG_QUIT); break;
    33f8:	83 e0       	ldi	r24, 0x03	; 3
    33fa:	16 c0       	rjmp	.+44     	; 0x3428 <cfg_parse+0x10e>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    33fc:	c6 01       	movw	r24, r12
    33fe:	be 01       	movw	r22, r28
    3400:	6f 5f       	subi	r22, 0xFF	; 255
    3402:	7f 4f       	sbci	r23, 0xFF	; 255
    3404:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <strtod>
    3408:	60 93 18 24 	sts	0x2418, r22
    340c:	70 93 19 24 	sts	0x2419, r23
    3410:	80 93 1a 24 	sts	0x241A, r24
    3414:	90 93 1b 24 	sts	0x241B, r25
				  status(TG_OK); 
    3418:	10 92 17 24 	sts	0x2417, r1
    341c:	07 c0       	rjmp	.+14     	; 0x342c <cfg_parse+0x112>
				  break;
    341e:	12 e0       	ldi	r17, 0x02	; 2
    3420:	06 c0       	rjmp	.+12     	; 0x342e <cfg_parse+0x114>

		case 'X': axis = X; break;
		case 'Y': axis = Y; break;
		case 'Z': axis = Z; break;
    3422:	13 e0       	ldi	r17, 0x03	; 3
    3424:	04 c0       	rjmp	.+8      	; 0x342e <cfg_parse+0x114>
		case 'A': axis = A; break;

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    3426:	89 e0       	ldi	r24, 0x09	; 9
    3428:	80 93 17 24 	sts	0x2417, r24
    342c:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    342e:	80 91 17 24 	lds	r24, 0x2417
    3432:	88 23       	and	r24, r24
    3434:	09 f0       	breq	.+2      	; 0x3438 <cfg_parse+0x11e>
    3436:	ee c0       	rjmp	.+476    	; 0x3614 <cfg_parse+0x2fa>
		status(TG_OK);							// pre-emptive setting
    3438:	10 92 17 24 	sts	0x2417, r1
		switch (text[1]) {
    343c:	f7 01       	movw	r30, r14
    343e:	81 81       	ldd	r24, Z+1	; 0x01
    3440:	8c 34       	cpi	r24, 0x4C	; 76
    3442:	09 f4       	brne	.+2      	; 0x3446 <cfg_parse+0x12c>
    3444:	b8 c0       	rjmp	.+368    	; 0x35b6 <cfg_parse+0x29c>
    3446:	8d 34       	cpi	r24, 0x4D	; 77
    3448:	30 f4       	brcc	.+12     	; 0x3456 <cfg_parse+0x13c>
    344a:	84 34       	cpi	r24, 0x44	; 68
    344c:	a9 f1       	breq	.+106    	; 0x34b8 <cfg_parse+0x19e>
    344e:	86 34       	cpi	r24, 0x46	; 70
    3450:	09 f0       	breq	.+2      	; 0x3454 <cfg_parse+0x13a>
    3452:	dd c0       	rjmp	.+442    	; 0x360e <cfg_parse+0x2f4>
    3454:	1d c0       	rjmp	.+58     	; 0x3490 <cfg_parse+0x176>
    3456:	80 35       	cpi	r24, 0x50	; 80
    3458:	09 f4       	brne	.+2      	; 0x345c <cfg_parse+0x142>
    345a:	47 c0       	rjmp	.+142    	; 0x34ea <cfg_parse+0x1d0>
    345c:	83 35       	cpi	r24, 0x53	; 83
    345e:	21 f0       	breq	.+8      	; 0x3468 <cfg_parse+0x14e>
    3460:	8d 34       	cpi	r24, 0x4D	; 77
    3462:	09 f0       	breq	.+2      	; 0x3466 <cfg_parse+0x14c>
    3464:	d4 c0       	rjmp	.+424    	; 0x360e <cfg_parse+0x2f4>
    3466:	58 c0       	rjmp	.+176    	; 0x3518 <cfg_parse+0x1fe>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    3468:	c6 01       	movw	r24, r12
    346a:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <atoi>
    346e:	21 2f       	mov	r18, r17
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	f9 01       	movw	r30, r18
    3474:	ee 0f       	add	r30, r30
    3476:	ff 1f       	adc	r31, r31
    3478:	e2 0f       	add	r30, r18
    347a:	f3 1f       	adc	r31, r19
    347c:	53 e0       	ldi	r21, 0x03	; 3
    347e:	ee 0f       	add	r30, r30
    3480:	ff 1f       	adc	r31, r31
    3482:	5a 95       	dec	r21
    3484:	e1 f7       	brne	.-8      	; 0x347e <cfg_parse+0x164>
    3486:	ea 5e       	subi	r30, 0xEA	; 234
    3488:	fb 4d       	sbci	r31, 0xDB	; 219
    348a:	81 8b       	std	Z+17, r24	; 0x11
    348c:	92 8b       	std	Z+18, r25	; 0x12
    348e:	c2 c0       	rjmp	.+388    	; 0x3614 <cfg_parse+0x2fa>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    3490:	c6 01       	movw	r24, r12
    3492:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <atoi>
    3496:	21 2f       	mov	r18, r17
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	f9 01       	movw	r30, r18
    349c:	ee 0f       	add	r30, r30
    349e:	ff 1f       	adc	r31, r31
    34a0:	e2 0f       	add	r30, r18
    34a2:	f3 1f       	adc	r31, r19
    34a4:	23 e0       	ldi	r18, 0x03	; 3
    34a6:	ee 0f       	add	r30, r30
    34a8:	ff 1f       	adc	r31, r31
    34aa:	2a 95       	dec	r18
    34ac:	e1 f7       	brne	.-8      	; 0x34a6 <cfg_parse+0x18c>
    34ae:	ea 5e       	subi	r30, 0xEA	; 234
    34b0:	fb 4d       	sbci	r31, 0xDB	; 219
    34b2:	83 8b       	std	Z+19, r24	; 0x13
    34b4:	94 8b       	std	Z+20, r25	; 0x14
    34b6:	ae c0       	rjmp	.+348    	; 0x3614 <cfg_parse+0x2fa>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    34b8:	c6 01       	movw	r24, r12
    34ba:	be 01       	movw	r22, r28
    34bc:	6f 5f       	subi	r22, 0xFF	; 255
    34be:	7f 4f       	sbci	r23, 0xFF	; 255
    34c0:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <strtod>
    34c4:	21 2f       	mov	r18, r17
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	f9 01       	movw	r30, r18
    34ca:	ee 0f       	add	r30, r30
    34cc:	ff 1f       	adc	r31, r31
    34ce:	e2 0f       	add	r30, r18
    34d0:	f3 1f       	adc	r31, r19
    34d2:	b3 e0       	ldi	r27, 0x03	; 3
    34d4:	ee 0f       	add	r30, r30
    34d6:	ff 1f       	adc	r31, r31
    34d8:	ba 95       	dec	r27
    34da:	e1 f7       	brne	.-8      	; 0x34d4 <cfg_parse+0x1ba>
    34dc:	ea 5e       	subi	r30, 0xEA	; 234
    34de:	fb 4d       	sbci	r31, 0xDB	; 219
    34e0:	65 8b       	std	Z+21, r22	; 0x15
    34e2:	76 8b       	std	Z+22, r23	; 0x16
    34e4:	87 8b       	std	Z+23, r24	; 0x17
    34e6:	90 8f       	std	Z+24, r25	; 0x18
    34e8:	95 c0       	rjmp	.+298    	; 0x3614 <cfg_parse+0x2fa>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    34ea:	c6 01       	movw	r24, r12
    34ec:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <atoi>
    34f0:	68 2f       	mov	r22, r24
    34f2:	81 2f       	mov	r24, r17
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	fc 01       	movw	r30, r24
    34f8:	ee 0f       	add	r30, r30
    34fa:	ff 1f       	adc	r31, r31
    34fc:	e8 0f       	add	r30, r24
    34fe:	f9 1f       	adc	r31, r25
    3500:	73 e0       	ldi	r23, 0x03	; 3
    3502:	ee 0f       	add	r30, r30
    3504:	ff 1f       	adc	r31, r31
    3506:	7a 95       	dec	r23
    3508:	e1 f7       	brne	.-8      	; 0x3502 <cfg_parse+0x1e8>
    350a:	ea 5e       	subi	r30, 0xEA	; 234
    350c:	fb 4d       	sbci	r31, 0xDB	; 219
    350e:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    3510:	81 2f       	mov	r24, r17
    3512:	0e 94 ac 24 	call	0x4958	; 0x4958 <st_set_polarity>
    3516:	7e c0       	rjmp	.+252    	; 0x3614 <cfg_parse+0x2fa>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    3518:	f7 01       	movw	r30, r14
    351a:	82 81       	ldd	r24, Z+2	; 0x02
    351c:	89 34       	cpi	r24, 0x49	; 73
    351e:	99 f4       	brne	.+38     	; 0x3546 <cfg_parse+0x22c>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    3520:	c6 01       	movw	r24, r12
    3522:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <atoi>
    3526:	21 2f       	mov	r18, r17
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	f9 01       	movw	r30, r18
    352c:	ee 0f       	add	r30, r30
    352e:	ff 1f       	adc	r31, r31
    3530:	e2 0f       	add	r30, r18
    3532:	f3 1f       	adc	r31, r19
    3534:	53 e0       	ldi	r21, 0x03	; 3
    3536:	ee 0f       	add	r30, r30
    3538:	ff 1f       	adc	r31, r31
    353a:	5a 95       	dec	r21
    353c:	e1 f7       	brne	.-8      	; 0x3536 <cfg_parse+0x21c>
    353e:	ea 5e       	subi	r30, 0xEA	; 234
    3540:	fb 4d       	sbci	r31, 0xDB	; 219
    3542:	86 87       	std	Z+14, r24	; 0x0e
    3544:	67 c0       	rjmp	.+206    	; 0x3614 <cfg_parse+0x2fa>
				} else if (text[3] == 'R') {
    3546:	f7 01       	movw	r30, r14
    3548:	83 81       	ldd	r24, Z+3	; 0x03
    354a:	82 35       	cpi	r24, 0x52	; 82
    354c:	c9 f4       	brne	.+50     	; 0x3580 <cfg_parse+0x266>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    354e:	c6 01       	movw	r24, r12
    3550:	be 01       	movw	r22, r28
    3552:	6f 5f       	subi	r22, 0xFF	; 255
    3554:	7f 4f       	sbci	r23, 0xFF	; 255
    3556:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <strtod>
    355a:	21 2f       	mov	r18, r17
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	f9 01       	movw	r30, r18
    3560:	ee 0f       	add	r30, r30
    3562:	ff 1f       	adc	r31, r31
    3564:	e2 0f       	add	r30, r18
    3566:	f3 1f       	adc	r31, r19
    3568:	13 e0       	ldi	r17, 0x03	; 3
    356a:	ee 0f       	add	r30, r30
    356c:	ff 1f       	adc	r31, r31
    356e:	1a 95       	dec	r17
    3570:	e1 f7       	brne	.-8      	; 0x356a <cfg_parse+0x250>
    3572:	ea 5e       	subi	r30, 0xEA	; 234
    3574:	fb 4d       	sbci	r31, 0xDB	; 219
    3576:	61 8f       	std	Z+25, r22	; 0x19
    3578:	72 8f       	std	Z+26, r23	; 0x1a
    357a:	83 8f       	std	Z+27, r24	; 0x1b
    357c:	94 8f       	std	Z+28, r25	; 0x1c
    357e:	4a c0       	rjmp	.+148    	; 0x3614 <cfg_parse+0x2fa>
				} else if (text[3] == 'T') {
    3580:	84 35       	cpi	r24, 0x54	; 84
    3582:	c9 f4       	brne	.+50     	; 0x35b6 <cfg_parse+0x29c>
					CFG(axis).mm_travel = strtod(val, &end); break;
    3584:	c6 01       	movw	r24, r12
    3586:	be 01       	movw	r22, r28
    3588:	6f 5f       	subi	r22, 0xFF	; 255
    358a:	7f 4f       	sbci	r23, 0xFF	; 255
    358c:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <strtod>
    3590:	21 2f       	mov	r18, r17
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	f9 01       	movw	r30, r18
    3596:	ee 0f       	add	r30, r30
    3598:	ff 1f       	adc	r31, r31
    359a:	e2 0f       	add	r30, r18
    359c:	f3 1f       	adc	r31, r19
    359e:	a3 e0       	ldi	r26, 0x03	; 3
    35a0:	ee 0f       	add	r30, r30
    35a2:	ff 1f       	adc	r31, r31
    35a4:	aa 95       	dec	r26
    35a6:	e1 f7       	brne	.-8      	; 0x35a0 <cfg_parse+0x286>
    35a8:	ea 5e       	subi	r30, 0xEA	; 234
    35aa:	fb 4d       	sbci	r31, 0xDB	; 219
    35ac:	65 8f       	std	Z+29, r22	; 0x1d
    35ae:	76 8f       	std	Z+30, r23	; 0x1e
    35b0:	87 8f       	std	Z+31, r24	; 0x1f
    35b2:	90 a3       	std	Z+32, r25	; 0x20
    35b4:	2f c0       	rjmp	.+94     	; 0x3614 <cfg_parse+0x2fa>
				}
			case 'L': 
				if (text[2] == 'O') {
    35b6:	f7 01       	movw	r30, r14
    35b8:	82 81       	ldd	r24, Z+2	; 0x02
    35ba:	8f 34       	cpi	r24, 0x4F	; 79
    35bc:	99 f4       	brne	.+38     	; 0x35e4 <cfg_parse+0x2ca>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    35be:	c6 01       	movw	r24, r12
    35c0:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <atoi>
    35c4:	21 2f       	mov	r18, r17
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	f9 01       	movw	r30, r18
    35ca:	ee 0f       	add	r30, r30
    35cc:	ff 1f       	adc	r31, r31
    35ce:	e2 0f       	add	r30, r18
    35d0:	f3 1f       	adc	r31, r19
    35d2:	53 e0       	ldi	r21, 0x03	; 3
    35d4:	ee 0f       	add	r30, r30
    35d6:	ff 1f       	adc	r31, r31
    35d8:	5a 95       	dec	r21
    35da:	e1 f7       	brne	.-8      	; 0x35d4 <cfg_parse+0x2ba>
    35dc:	ea 5e       	subi	r30, 0xEA	; 234
    35de:	fb 4d       	sbci	r31, 0xDB	; 219
    35e0:	87 87       	std	Z+15, r24	; 0x0f
    35e2:	18 c0       	rjmp	.+48     	; 0x3614 <cfg_parse+0x2fa>
				} else if (text[2] == 'I') {
    35e4:	89 34       	cpi	r24, 0x49	; 73
    35e6:	99 f4       	brne	.+38     	; 0x360e <cfg_parse+0x2f4>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    35e8:	c6 01       	movw	r24, r12
    35ea:	0e 94 5c 48 	call	0x90b8	; 0x90b8 <atoi>
    35ee:	21 2f       	mov	r18, r17
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	f9 01       	movw	r30, r18
    35f4:	ee 0f       	add	r30, r30
    35f6:	ff 1f       	adc	r31, r31
    35f8:	e2 0f       	add	r30, r18
    35fa:	f3 1f       	adc	r31, r19
    35fc:	23 e0       	ldi	r18, 0x03	; 3
    35fe:	ee 0f       	add	r30, r30
    3600:	ff 1f       	adc	r31, r31
    3602:	2a 95       	dec	r18
    3604:	e1 f7       	brne	.-8      	; 0x35fe <cfg_parse+0x2e4>
    3606:	ea 5e       	subi	r30, 0xEA	; 234
    3608:	fb 4d       	sbci	r31, 0xDB	; 219
    360a:	85 a3       	std	Z+37, r24	; 0x25
    360c:	03 c0       	rjmp	.+6      	; 0x3614 <cfg_parse+0x2fa>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    360e:	89 e0       	ldi	r24, 0x09	; 9
    3610:	80 93 17 24 	sts	0x2417, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    3614:	80 91 17 24 	lds	r24, 0x2417
    3618:	b7 01       	movw	r22, r14
    361a:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
}
    361e:	80 91 17 24 	lds	r24, 0x2417
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	0f 90       	pop	r0
    3626:	0f 90       	pop	r0
    3628:	cf 91       	pop	r28
    362a:	df 91       	pop	r29
    362c:	1f 91       	pop	r17
    362e:	ff 90       	pop	r15
    3630:	ef 90       	pop	r14
    3632:	df 90       	pop	r13
    3634:	cf 90       	pop	r12
    3636:	08 95       	ret

00003638 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3638:	ef 92       	push	r14
    363a:	ff 92       	push	r15
    363c:	0f 93       	push	r16
    363e:	1f 93       	push	r17
    3640:	df 93       	push	r29
    3642:	cf 93       	push	r28
    3644:	cd b7       	in	r28, 0x3d	; 61
    3646:	de b7       	in	r29, 0x3e	; 62
    3648:	a8 97       	sbiw	r28, 0x28	; 40
    364a:	cd bf       	out	0x3d, r28	; 61
    364c:	de bf       	out	0x3e, r29	; 62
    364e:	0b e4       	ldi	r16, 0x4B	; 75
    3650:	12 e0       	ldi	r17, 0x02	; 2
    3652:	a0 e0       	ldi	r26, 0x00	; 0
    3654:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    3656:	7e 01       	movw	r14, r28
    3658:	08 94       	sec
    365a:	e1 1c       	adc	r14, r1
    365c:	f1 1c       	adc	r15, r1
    365e:	02 c0       	rjmp	.+4      	; 0x3664 <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3660:	0f 5f       	subi	r16, 0xFF	; 255
    3662:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    3664:	f8 01       	movw	r30, r16
    3666:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    3668:	88 23       	and	r24, r24
    366a:	89 f4       	brne	.+34     	; 0x368e <cfg_test+0x56>
			text[j] = 0;
    366c:	ce 01       	movw	r24, r28
    366e:	01 96       	adiw	r24, 0x01	; 1
    3670:	a8 0f       	add	r26, r24
    3672:	b9 1f       	adc	r27, r25
    3674:	1c 92       	st	X, r1
			cfg_parse(text);
    3676:	0e 94 8d 19 	call	0x331a	; 0x331a <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    367a:	a8 96       	adiw	r28, 0x28	; 40
    367c:	cd bf       	out	0x3d, r28	; 61
    367e:	de bf       	out	0x3e, r29	; 62
    3680:	cf 91       	pop	r28
    3682:	df 91       	pop	r29
    3684:	1f 91       	pop	r17
    3686:	0f 91       	pop	r16
    3688:	ff 90       	pop	r15
    368a:	ef 90       	pop	r14
    368c:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    368e:	8d 30       	cpi	r24, 0x0D	; 13
    3690:	21 f0       	breq	.+8      	; 0x369a <cfg_test+0x62>
    3692:	8a 30       	cpi	r24, 0x0A	; 10
    3694:	11 f0       	breq	.+4      	; 0x369a <cfg_test+0x62>
    3696:	8b 33       	cpi	r24, 0x3B	; 59
    3698:	49 f4       	brne	.+18     	; 0x36ac <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    369a:	ae 0d       	add	r26, r14
    369c:	bf 1d       	adc	r27, r15
    369e:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    36a0:	c7 01       	movw	r24, r14
    36a2:	0e 94 8d 19 	call	0x331a	; 0x331a <cfg_parse>
    36a6:	a0 e0       	ldi	r26, 0x00	; 0
    36a8:	b0 e0       	ldi	r27, 0x00	; 0
    36aa:	da cf       	rjmp	.-76     	; 0x3660 <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    36ac:	81 32       	cpi	r24, 0x21	; 33
    36ae:	c0 f2       	brcs	.-80     	; 0x3660 <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    36b0:	f7 01       	movw	r30, r14
    36b2:	ea 0f       	add	r30, r26
    36b4:	fb 1f       	adc	r31, r27
    36b6:	80 83       	st	Z, r24
    36b8:	11 96       	adiw	r26, 0x01	; 1
    36ba:	d2 cf       	rjmp	.-92     	; 0x3660 <cfg_test+0x28>

000036bc <en_init>:


void en_init(void) 
{
	return;
}
    36bc:	08 95       	ret

000036be <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
    36be:	88 23       	and	r24, r24
    36c0:	b1 f0       	breq	.+44     	; 0x36ee <en_write+0x30>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    36c2:	e0 91 12 24 	lds	r30, 0x2412
    36c6:	f0 91 13 24 	lds	r31, 0x2413
    36ca:	80 e2       	ldi	r24, 0x20	; 32
    36cc:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    36ce:	e0 91 02 24 	lds	r30, 0x2402
    36d2:	f0 91 03 24 	lds	r31, 0x2403
    36d6:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    36d8:	e0 91 f2 23 	lds	r30, 0x23F2
    36dc:	f0 91 f3 23 	lds	r31, 0x23F3
    36e0:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    36e2:	e0 91 e2 23 	lds	r30, 0x23E2
    36e6:	f0 91 e3 23 	lds	r31, 0x23E3
    36ea:	85 83       	std	Z+5, r24	; 0x05
    36ec:	08 95       	ret
void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36ee:	e0 91 12 24 	lds	r30, 0x2412
    36f2:	f0 91 13 24 	lds	r31, 0x2413
    36f6:	80 e2       	ldi	r24, 0x20	; 32
    36f8:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36fa:	e0 91 02 24 	lds	r30, 0x2402
    36fe:	f0 91 03 24 	lds	r31, 0x2403
    3702:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    3704:	e0 91 f2 23 	lds	r30, 0x23F2
    3708:	f0 91 f3 23 	lds	r31, 0x23F3
    370c:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    370e:	e0 91 e2 23 	lds	r30, 0x23E2
    3712:	f0 91 e3 23 	lds	r31, 0x23E3
    3716:	86 83       	std	Z+6, r24	; 0x06
    3718:	08 95       	ret

0000371a <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    371a:	0f 93       	push	r16
    371c:	df 93       	push	r29
    371e:	cf 93       	push	r28
    3720:	0f 92       	push	r0
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    3726:	8b ec       	ldi	r24, 0xCB	; 203
    3728:	e0 e5       	ldi	r30, 0x50	; 80
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    372e:	88 e0       	ldi	r24, 0x08	; 8
    3730:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    3734:	80 91 51 00 	lds	r24, 0x0051
    3738:	83 ff       	sbrs	r24, 3
    373a:	fc cf       	rjmp	.-8      	; 0x3734 <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    373c:	82 ec       	ldi	r24, 0xC2	; 194
    373e:	e0 e5       	ldi	r30, 0x50	; 80
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    3744:	88 e1       	ldi	r24, 0x18	; 24
    3746:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    374a:	80 91 51 00 	lds	r24, 0x0051
    374e:	84 ff       	sbrs	r24, 4
    3750:	fc cf       	rjmp	.-8      	; 0x374a <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3752:	8f b7       	in	r24, 0x3f	; 63
    3754:	89 83       	std	Y+1, r24	; 0x01
    3756:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3758:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    375a:	24 e0       	ldi	r18, 0x04	; 4
    375c:	80 e4       	ldi	r24, 0x40	; 64
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	fc 01       	movw	r30, r24
    3762:	08 ed       	ldi	r16, 0xD8	; 216
    3764:	04 bf       	out	0x34, r16	; 52
    3766:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3768:	89 81       	ldd	r24, Y+1	; 0x01
    376a:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    376c:	80 91 50 00 	lds	r24, 0x0050
    3770:	8e 7f       	andi	r24, 0xFE	; 254
    3772:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    3776:	0f 90       	pop	r0
    3778:	cf 91       	pop	r28
    377a:	df 91       	pop	r29
    377c:	0f 91       	pop	r16
    377e:	08 95       	ret

00003780 <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    3780:	0e 94 8d 1b 	call	0x371a	; 0x371a <xmega_init_clocks>
}
    3784:	08 95       	ret

00003786 <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3786:	0f 93       	push	r16
    3788:	df 93       	push	r29
    378a:	cf 93       	push	r28
    378c:	0f 92       	push	r0
    378e:	cd b7       	in	r28, 0x3d	; 61
    3790:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3792:	2f b7       	in	r18, 0x3f	; 63
    3794:	29 83       	std	Y+1, r18	; 0x01
    3796:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3798:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    379a:	fc 01       	movw	r30, r24
    379c:	08 ed       	ldi	r16, 0xD8	; 216
    379e:	04 bf       	out	0x34, r16	; 52
    37a0:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	8f bf       	out	0x3f, r24	; 63
#endif
}
    37a6:	0f 90       	pop	r0
    37a8:	cf 91       	pop	r28
    37aa:	df 91       	pop	r29
    37ac:	0f 91       	pop	r16
    37ae:	08 95       	ret

000037b0 <mc_motion_stop>:
 * mc_motion_stop() - stop all current motions
 */

int mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    37b0:	10 92 80 21 	sts	0x2180, r1
	ma.arc_state = MC_STATE_OFF;
    37b4:	10 92 86 24 	sts	0x2486, r1
	return (TG_OK);
}
    37b8:	80 e0       	ldi	r24, 0x00	; 0
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	08 95       	ret

000037be <mc_go_home>:
 */

int mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    37be:	8c e0       	ldi	r24, 0x0C	; 12
    37c0:	e1 e8       	ldi	r30, 0x81	; 129
    37c2:	f1 e2       	ldi	r31, 0x21	; 33
    37c4:	df 01       	movw	r26, r30
    37c6:	1d 92       	st	X+, r1
    37c8:	8a 95       	dec	r24
    37ca:	e9 f7       	brne	.-6      	; 0x37c6 <mc_go_home+0x8>
	return (TG_OK);
}
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	08 95       	ret

000037d2 <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    37d2:	8c e0       	ldi	r24, 0x0C	; 12
    37d4:	e1 e8       	ldi	r30, 0x81	; 129
    37d6:	f1 e2       	ldi	r31, 0x21	; 33
    37d8:	df 01       	movw	r26, r30
    37da:	1d 92       	st	X+, r1
    37dc:	8a 95       	dec	r24
    37de:	e9 f7       	brne	.-6      	; 0x37da <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    37e0:	10 92 80 21 	sts	0x2180, r1
	ma.arc_state = MC_STATE_OFF;
    37e4:	10 92 86 24 	sts	0x2486, r1
}
    37e8:	08 95       	ret

000037ea <mc_line_continue>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continue() 
{
    37ea:	af 92       	push	r10
    37ec:	bf 92       	push	r11
    37ee:	cf 92       	push	r12
    37f0:	df 92       	push	r13
    37f2:	ef 92       	push	r14
    37f4:	ff 92       	push	r15
    37f6:	0f 93       	push	r16
    37f8:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    37fa:	80 91 80 21 	lds	r24, 0x2180
    37fe:	88 23       	and	r24, r24
    3800:	19 f4       	brne	.+6      	; 0x3808 <mc_line_continue+0x1e>
    3802:	22 e0       	ldi	r18, 0x02	; 2
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	30 c0       	rjmp	.+96     	; 0x3868 <mc_line_continue+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    3808:	82 e0       	ldi	r24, 0x02	; 2
    380a:	80 93 80 21 	sts	0x2180, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    380e:	0e 94 21 31 	call	0x6242	; 0x6242 <mv_test_move_buffer_full>
    3812:	88 23       	and	r24, r24
    3814:	19 f0       	breq	.+6      	; 0x381c <mc_line_continue+0x32>
    3816:	21 e0       	ldi	r18, 0x01	; 1
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	26 c0       	rjmp	.+76     	; 0x3868 <mc_line_continue+0x7e>
		return (TG_EAGAIN);
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    381c:	60 91 99 21 	lds	r22, 0x2199
    3820:	70 91 9a 21 	lds	r23, 0x219A
    3824:	80 91 9b 21 	lds	r24, 0x219B
    3828:	90 91 9c 21 	lds	r25, 0x219C
    382c:	20 91 9d 21 	lds	r18, 0x219D
    3830:	30 91 9e 21 	lds	r19, 0x219E
    3834:	40 91 9f 21 	lds	r20, 0x219F
    3838:	50 91 a0 21 	lds	r21, 0x21A0
    383c:	e0 90 a1 21 	lds	r14, 0x21A1
    3840:	f0 90 a2 21 	lds	r15, 0x21A2
    3844:	00 91 a3 21 	lds	r16, 0x21A3
    3848:	10 91 a4 21 	lds	r17, 0x21A4
    384c:	a0 90 a5 21 	lds	r10, 0x21A5
    3850:	b0 90 a6 21 	lds	r11, 0x21A6
    3854:	c0 90 a7 21 	lds	r12, 0x21A7
    3858:	d0 90 a8 21 	lds	r13, 0x21A8
    385c:	0e 94 4d 31 	call	0x629a	; 0x629a <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    3860:	10 92 80 21 	sts	0x2180, r1
    3864:	20 e0       	ldi	r18, 0x00	; 0
    3866:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3868:	c9 01       	movw	r24, r18
    386a:	1f 91       	pop	r17
    386c:	0f 91       	pop	r16
    386e:	ff 90       	pop	r15
    3870:	ef 90       	pop	r14
    3872:	df 90       	pop	r13
    3874:	cf 90       	pop	r12
    3876:	bf 90       	pop	r11
    3878:	af 90       	pop	r10
    387a:	08 95       	ret

0000387c <mc_dwell>:
 * NOTE: It's not necessary to set the target as this is set correctly in the Gcode. 
 */

int mc_dwell(double seconds) 
{
	mc.steps[X] = 0;
    387c:	10 92 99 21 	sts	0x2199, r1
    3880:	10 92 9a 21 	sts	0x219A, r1
    3884:	10 92 9b 21 	sts	0x219B, r1
    3888:	10 92 9c 21 	sts	0x219C, r1
	mc.steps[Y] = 0;
    388c:	10 92 9d 21 	sts	0x219D, r1
    3890:	10 92 9e 21 	sts	0x219E, r1
    3894:	10 92 9f 21 	sts	0x219F, r1
    3898:	10 92 a0 21 	sts	0x21A0, r1
	mc.steps[Z] = 0;
    389c:	10 92 a1 21 	sts	0x21A1, r1
    38a0:	10 92 a2 21 	sts	0x21A2, r1
    38a4:	10 92 a3 21 	sts	0x21A3, r1
    38a8:	10 92 a4 21 	sts	0x21A4, r1
	mc.mm_of_travel = 0;	// not actually used, but makes debug make more sense
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	40 e0       	ldi	r20, 0x00	; 0
    38b2:	50 e0       	ldi	r21, 0x00	; 0
    38b4:	20 93 a9 21 	sts	0x21A9, r18
    38b8:	30 93 aa 21 	sts	0x21AA, r19
    38bc:	40 93 ab 21 	sts	0x21AB, r20
    38c0:	50 93 ac 21 	sts	0x21AC, r21
	mc.microseconds = trunc(seconds*1000000);
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	34 e2       	ldi	r19, 0x24	; 36
    38c8:	44 e7       	ldi	r20, 0x74	; 116
    38ca:	59 e4       	ldi	r21, 0x49	; 73
    38cc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    38d0:	0e 94 57 43 	call	0x86ae	; 0x86ae <__fixunssfsi>
    38d4:	60 93 a5 21 	sts	0x21A5, r22
    38d8:	70 93 a6 21 	sts	0x21A6, r23
    38dc:	80 93 a7 21 	sts	0x21A7, r24
    38e0:	90 93 a8 21 	sts	0x21A8, r25
	mc.line_state = MC_STATE_NEW;
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	80 93 80 21 	sts	0x2180, r24
	return (mc_line_continue());
    38ea:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <mc_line_continue>
}
    38ee:	08 95       	ret

000038f0 <mc_line>:
/* 
 * mc_line() - queue a line move; non-blocking version
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    38f0:	2f 92       	push	r2
    38f2:	3f 92       	push	r3
    38f4:	4f 92       	push	r4
    38f6:	5f 92       	push	r5
    38f8:	6f 92       	push	r6
    38fa:	7f 92       	push	r7
    38fc:	8f 92       	push	r8
    38fe:	9f 92       	push	r9
    3900:	af 92       	push	r10
    3902:	bf 92       	push	r11
    3904:	cf 92       	push	r12
    3906:	df 92       	push	r13
    3908:	ef 92       	push	r14
    390a:	ff 92       	push	r15
    390c:	0f 93       	push	r16
    390e:	1f 93       	push	r17
    3910:	df 93       	push	r29
    3912:	cf 93       	push	r28
    3914:	cd b7       	in	r28, 0x3d	; 61
    3916:	de b7       	in	r29, 0x3e	; 62
    3918:	64 97       	sbiw	r28, 0x14	; 20
    391a:	cd bf       	out	0x3d, r28	; 61
    391c:	de bf       	out	0x3e, r29	; 62
    391e:	2d 87       	std	Y+13, r18	; 0x0d
    3920:	3e 87       	std	Y+14, r19	; 0x0e
    3922:	4f 87       	std	Y+15, r20	; 0x0f
    3924:	58 8b       	std	Y+16, r21	; 0x10
    3926:	a9 8a       	std	Y+17, r10	; 0x11
    3928:	ba 8a       	std	Y+18, r11	; 0x12
    392a:	cb 8a       	std	Y+19, r12	; 0x13
    392c:	dc 8a       	std	Y+20, r13	; 0x14
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    392e:	20 91 37 24 	lds	r18, 0x2437
    3932:	30 91 38 24 	lds	r19, 0x2438
    3936:	40 91 39 24 	lds	r20, 0x2439
    393a:	50 91 3a 24 	lds	r21, 0x243A
    393e:	29 87       	std	Y+9, r18	; 0x09
    3940:	3a 87       	std	Y+10, r19	; 0x0a
    3942:	4b 87       	std	Y+11, r20	; 0x0b
    3944:	5c 87       	std	Y+12, r21	; 0x0c
    3946:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    394a:	0e 94 75 45 	call	0x8aea	; 0x8aea <lround>
    394e:	2b 01       	movw	r4, r22
    3950:	3c 01       	movw	r6, r24
    3952:	40 92 8d 21 	sts	0x218D, r4
    3956:	50 92 8e 21 	sts	0x218E, r5
    395a:	60 92 8f 21 	sts	0x218F, r6
    395e:	70 92 90 21 	sts	0x2190, r7
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    3962:	80 91 4f 24 	lds	r24, 0x244F
    3966:	90 91 50 24 	lds	r25, 0x2450
    396a:	a0 91 51 24 	lds	r26, 0x2451
    396e:	b0 91 52 24 	lds	r27, 0x2452
    3972:	8d 83       	std	Y+5, r24	; 0x05
    3974:	9e 83       	std	Y+6, r25	; 0x06
    3976:	af 83       	std	Y+7, r26	; 0x07
    3978:	b8 87       	std	Y+8, r27	; 0x08
    397a:	6d 85       	ldd	r22, Y+13	; 0x0d
    397c:	7e 85       	ldd	r23, Y+14	; 0x0e
    397e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3980:	98 89       	ldd	r25, Y+16	; 0x10
    3982:	2d 81       	ldd	r18, Y+5	; 0x05
    3984:	3e 81       	ldd	r19, Y+6	; 0x06
    3986:	4f 81       	ldd	r20, Y+7	; 0x07
    3988:	58 85       	ldd	r21, Y+8	; 0x08
    398a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    398e:	0e 94 75 45 	call	0x8aea	; 0x8aea <lround>
    3992:	5b 01       	movw	r10, r22
    3994:	6c 01       	movw	r12, r24
    3996:	a0 92 91 21 	sts	0x2191, r10
    399a:	b0 92 92 21 	sts	0x2192, r11
    399e:	c0 92 93 21 	sts	0x2193, r12
    39a2:	d0 92 94 21 	sts	0x2194, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    39a6:	20 91 67 24 	lds	r18, 0x2467
    39aa:	30 91 68 24 	lds	r19, 0x2468
    39ae:	40 91 69 24 	lds	r20, 0x2469
    39b2:	50 91 6a 24 	lds	r21, 0x246A
    39b6:	29 83       	std	Y+1, r18	; 0x01
    39b8:	3a 83       	std	Y+2, r19	; 0x02
    39ba:	4b 83       	std	Y+3, r20	; 0x03
    39bc:	5c 83       	std	Y+4, r21	; 0x04
    39be:	c8 01       	movw	r24, r16
    39c0:	b7 01       	movw	r22, r14
    39c2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    39c6:	0e 94 75 45 	call	0x8aea	; 0x8aea <lround>
    39ca:	9b 01       	movw	r18, r22
    39cc:	ac 01       	movw	r20, r24
    39ce:	20 93 95 21 	sts	0x2195, r18
    39d2:	30 93 96 21 	sts	0x2196, r19
    39d6:	40 93 97 21 	sts	0x2197, r20
    39da:	50 93 98 21 	sts	0x2198, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    39de:	80 91 81 21 	lds	r24, 0x2181
    39e2:	90 91 82 21 	lds	r25, 0x2182
    39e6:	a0 91 83 21 	lds	r26, 0x2183
    39ea:	b0 91 84 21 	lds	r27, 0x2184
    39ee:	83 01       	movw	r16, r6
    39f0:	72 01       	movw	r14, r4
    39f2:	e8 1a       	sub	r14, r24
    39f4:	f9 0a       	sbc	r15, r25
    39f6:	0a 0b       	sbc	r16, r26
    39f8:	1b 0b       	sbc	r17, r27
    39fa:	e0 92 99 21 	sts	0x2199, r14
    39fe:	f0 92 9a 21 	sts	0x219A, r15
    3a02:	00 93 9b 21 	sts	0x219B, r16
    3a06:	10 93 9c 21 	sts	0x219C, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    3a0a:	80 91 85 21 	lds	r24, 0x2185
    3a0e:	90 91 86 21 	lds	r25, 0x2186
    3a12:	a0 91 87 21 	lds	r26, 0x2187
    3a16:	b0 91 88 21 	lds	r27, 0x2188
    3a1a:	a8 1a       	sub	r10, r24
    3a1c:	b9 0a       	sbc	r11, r25
    3a1e:	ca 0a       	sbc	r12, r26
    3a20:	db 0a       	sbc	r13, r27
    3a22:	a0 92 9d 21 	sts	0x219D, r10
    3a26:	b0 92 9e 21 	sts	0x219E, r11
    3a2a:	c0 92 9f 21 	sts	0x219F, r12
    3a2e:	d0 92 a0 21 	sts	0x21A0, r13
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    3a32:	80 91 89 21 	lds	r24, 0x2189
    3a36:	90 91 8a 21 	lds	r25, 0x218A
    3a3a:	a0 91 8b 21 	lds	r26, 0x218B
    3a3e:	b0 91 8c 21 	lds	r27, 0x218C
    3a42:	19 01       	movw	r2, r18
    3a44:	2a 01       	movw	r4, r20
    3a46:	28 1a       	sub	r2, r24
    3a48:	39 0a       	sbc	r3, r25
    3a4a:	4a 0a       	sbc	r4, r26
    3a4c:	5b 0a       	sbc	r5, r27
    3a4e:	20 92 a1 21 	sts	0x21A1, r2
    3a52:	30 92 a2 21 	sts	0x21A2, r3
    3a56:	40 92 a3 21 	sts	0x21A3, r4
    3a5a:	50 92 a4 21 	sts	0x21A4, r5

	if (invert_feed_rate) {
    3a5e:	89 28       	or	r8, r9
    3a60:	59 f0       	breq	.+22     	; 0x3a78 <mc_line+0x188>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3a62:	60 ec       	ldi	r22, 0xC0	; 192
    3a64:	71 ee       	ldi	r23, 0xE1	; 225
    3a66:	84 e6       	ldi	r24, 0x64	; 100
    3a68:	9c e4       	ldi	r25, 0x4C	; 76
    3a6a:	29 89       	ldd	r18, Y+17	; 0x11
    3a6c:	3a 89       	ldd	r19, Y+18	; 0x12
    3a6e:	4b 89       	ldd	r20, Y+19	; 0x13
    3a70:	5c 89       	ldd	r21, Y+20	; 0x14
    3a72:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    3a76:	4a c0       	rjmp	.+148    	; 0x3b0c <mc_line+0x21c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    3a78:	c8 01       	movw	r24, r16
    3a7a:	b7 01       	movw	r22, r14
    3a7c:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    3a80:	29 85       	ldd	r18, Y+9	; 0x09
    3a82:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a84:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a86:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a88:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    3a8c:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <square>
    3a90:	3b 01       	movw	r6, r22
    3a92:	4c 01       	movw	r8, r24
    3a94:	c6 01       	movw	r24, r12
    3a96:	b5 01       	movw	r22, r10
    3a98:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    3a9c:	2d 81       	ldd	r18, Y+5	; 0x05
    3a9e:	3e 81       	ldd	r19, Y+6	; 0x06
    3aa0:	4f 81       	ldd	r20, Y+7	; 0x07
    3aa2:	58 85       	ldd	r21, Y+8	; 0x08
    3aa4:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    3aa8:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <square>
    3aac:	5b 01       	movw	r10, r22
    3aae:	6c 01       	movw	r12, r24
    3ab0:	c2 01       	movw	r24, r4
    3ab2:	b1 01       	movw	r22, r2
    3ab4:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    3ab8:	29 81       	ldd	r18, Y+1	; 0x01
    3aba:	3a 81       	ldd	r19, Y+2	; 0x02
    3abc:	4b 81       	ldd	r20, Y+3	; 0x03
    3abe:	5c 81       	ldd	r21, Y+4	; 0x04
    3ac0:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    3ac4:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <square>
    3ac8:	7b 01       	movw	r14, r22
    3aca:	8c 01       	movw	r16, r24
    3acc:	c4 01       	movw	r24, r8
    3ace:	b3 01       	movw	r22, r6
    3ad0:	a6 01       	movw	r20, r12
    3ad2:	95 01       	movw	r18, r10
    3ad4:	0e 94 44 42 	call	0x8488	; 0x8488 <__addsf3>
    3ad8:	a8 01       	movw	r20, r16
    3ada:	97 01       	movw	r18, r14
    3adc:	0e 94 44 42 	call	0x8488	; 0x8488 <__addsf3>
    3ae0:	0e 94 12 46 	call	0x8c24	; 0x8c24 <sqrt>
    3ae4:	60 93 a9 21 	sts	0x21A9, r22
    3ae8:	70 93 aa 21 	sts	0x21AA, r23
    3aec:	80 93 ab 21 	sts	0x21AB, r24
    3af0:	90 93 ac 21 	sts	0x21AC, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3af4:	29 89       	ldd	r18, Y+17	; 0x11
    3af6:	3a 89       	ldd	r19, Y+18	; 0x12
    3af8:	4b 89       	ldd	r20, Y+19	; 0x13
    3afa:	5c 89       	ldd	r21, Y+20	; 0x14
    3afc:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	34 e2       	ldi	r19, 0x24	; 36
    3b04:	44 e7       	ldi	r20, 0x74	; 116
    3b06:	59 e4       	ldi	r21, 0x49	; 73
    3b08:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    3b0c:	0e 94 75 45 	call	0x8aea	; 0x8aea <lround>
    3b10:	60 93 a5 21 	sts	0x21A5, r22
    3b14:	70 93 a6 21 	sts	0x21A6, r23
    3b18:	80 93 a7 21 	sts	0x21A7, r24
    3b1c:	90 93 a8 21 	sts	0x21A8, r25
	}
	mc.line_state = MC_STATE_NEW;
    3b20:	81 e0       	ldi	r24, 0x01	; 1
    3b22:	80 93 80 21 	sts	0x2180, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3b26:	e1 e8       	ldi	r30, 0x81	; 129
    3b28:	f1 e2       	ldi	r31, 0x21	; 33
    3b2a:	df 01       	movw	r26, r30
    3b2c:	1c 96       	adiw	r26, 0x0c	; 12
    3b2e:	8c e0       	ldi	r24, 0x0C	; 12
    3b30:	0d 90       	ld	r0, X+
    3b32:	01 92       	st	Z+, r0
    3b34:	81 50       	subi	r24, 0x01	; 1
    3b36:	e1 f7       	brne	.-8      	; 0x3b30 <mc_line+0x240>
	return (mc_line_continue());
    3b38:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <mc_line_continue>
}
    3b3c:	64 96       	adiw	r28, 0x14	; 20
    3b3e:	cd bf       	out	0x3d, r28	; 61
    3b40:	de bf       	out	0x3e, r29	; 62
    3b42:	cf 91       	pop	r28
    3b44:	df 91       	pop	r29
    3b46:	1f 91       	pop	r17
    3b48:	0f 91       	pop	r16
    3b4a:	ff 90       	pop	r15
    3b4c:	ef 90       	pop	r14
    3b4e:	df 90       	pop	r13
    3b50:	cf 90       	pop	r12
    3b52:	bf 90       	pop	r11
    3b54:	af 90       	pop	r10
    3b56:	9f 90       	pop	r9
    3b58:	8f 90       	pop	r8
    3b5a:	7f 90       	pop	r7
    3b5c:	6f 90       	pop	r6
    3b5e:	5f 90       	pop	r5
    3b60:	4f 90       	pop	r4
    3b62:	3f 90       	pop	r3
    3b64:	2f 90       	pop	r2
    3b66:	08 95       	ret

00003b68 <mc_arc_continue>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continue() 
{
    3b68:	8f 92       	push	r8
    3b6a:	9f 92       	push	r9
    3b6c:	af 92       	push	r10
    3b6e:	bf 92       	push	r11
    3b70:	cf 92       	push	r12
    3b72:	df 92       	push	r13
    3b74:	ef 92       	push	r14
    3b76:	ff 92       	push	r15
    3b78:	0f 93       	push	r16
    3b7a:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3b7c:	80 91 86 24 	lds	r24, 0x2486
    3b80:	88 23       	and	r24, r24
    3b82:	19 f4       	brne	.+6      	; 0x3b8a <mc_arc_continue+0x22>
    3b84:	22 e0       	ldi	r18, 0x02	; 2
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	dd c0       	rjmp	.+442    	; 0x3d44 <mc_arc_continue+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3b8a:	81 30       	cpi	r24, 0x01	; 1
    3b8c:	09 f0       	breq	.+2      	; 0x3b90 <mc_arc_continue+0x28>
    3b8e:	ca c0       	rjmp	.+404    	; 0x3d24 <mc_arc_continue+0x1bc>
		ma.segment_counter=0;
    3b90:	10 92 89 24 	sts	0x2489, r1
    3b94:	10 92 8a 24 	sts	0x248A, r1
		ma.arc_state = MC_STATE_RUNNING;
    3b98:	82 e0       	ldi	r24, 0x02	; 2
    3b9a:	80 93 86 24 	sts	0x2486, r24
    3b9e:	c2 c0       	rjmp	.+388    	; 0x3d24 <mc_arc_continue+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3ba0:	0e 94 21 31 	call	0x6242	; 0x6242 <mv_test_move_buffer_full>
    3ba4:	88 23       	and	r24, r24
    3ba6:	19 f0       	breq	.+6      	; 0x3bae <mc_arc_continue+0x46>
    3ba8:	21 e0       	ldi	r18, 0x01	; 1
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	cb c0       	rjmp	.+406    	; 0x3d44 <mc_arc_continue+0x1dc>
			return (TG_EAGAIN);
		}
		ma.segment_counter++;
    3bae:	80 91 89 24 	lds	r24, 0x2489
    3bb2:	90 91 8a 24 	lds	r25, 0x248A
    3bb6:	01 96       	adiw	r24, 0x01	; 1
    3bb8:	80 93 89 24 	sts	0x2489, r24
    3bbc:	90 93 8a 24 	sts	0x248A, r25
		ma.theta += ma.theta_per_segment;
    3bc0:	60 91 ab 24 	lds	r22, 0x24AB
    3bc4:	70 91 ac 24 	lds	r23, 0x24AC
    3bc8:	80 91 ad 24 	lds	r24, 0x24AD
    3bcc:	90 91 ae 24 	lds	r25, 0x24AE
    3bd0:	20 91 b7 24 	lds	r18, 0x24B7
    3bd4:	30 91 b8 24 	lds	r19, 0x24B8
    3bd8:	40 91 b9 24 	lds	r20, 0x24B9
    3bdc:	50 91 ba 24 	lds	r21, 0x24BA
    3be0:	0e 94 44 42 	call	0x8488	; 0x8488 <__addsf3>
    3be4:	7b 01       	movw	r14, r22
    3be6:	8c 01       	movw	r16, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	d8 01       	movw	r26, r16
    3bec:	80 93 ab 24 	sts	0x24AB, r24
    3bf0:	90 93 ac 24 	sts	0x24AC, r25
    3bf4:	a0 93 ad 24 	sts	0x24AD, r26
    3bf8:	b0 93 ae 24 	sts	0x24AE, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3bfc:	b7 01       	movw	r22, r14
    3bfe:	c8 01       	movw	r24, r16
    3c00:	0e 94 08 46 	call	0x8c10	; 0x8c10 <sin>
    3c04:	80 90 af 24 	lds	r8, 0x24AF
    3c08:	90 90 b0 24 	lds	r9, 0x24B0
    3c0c:	a0 90 b1 24 	lds	r10, 0x24B1
    3c10:	b0 90 b2 24 	lds	r11, 0x24B2
    3c14:	c0 90 8d 24 	lds	r12, 0x248D
    3c18:	d0 90 8e 24 	lds	r13, 0x248E
    3c1c:	cc 0c       	add	r12, r12
    3c1e:	dd 1c       	adc	r13, r13
    3c20:	cc 0c       	add	r12, r12
    3c22:	dd 1c       	adc	r13, r13
    3c24:	26 e8       	ldi	r18, 0x86	; 134
    3c26:	34 e2       	ldi	r19, 0x24	; 36
    3c28:	c2 0e       	add	r12, r18
    3c2a:	d3 1e       	adc	r13, r19
    3c2c:	a5 01       	movw	r20, r10
    3c2e:	94 01       	movw	r18, r8
    3c30:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    3c34:	9b 01       	movw	r18, r22
    3c36:	ac 01       	movw	r20, r24
    3c38:	60 91 a3 24 	lds	r22, 0x24A3
    3c3c:	70 91 a4 24 	lds	r23, 0x24A4
    3c40:	80 91 a5 24 	lds	r24, 0x24A5
    3c44:	90 91 a6 24 	lds	r25, 0x24A6
    3c48:	0e 94 44 42 	call	0x8488	; 0x8488 <__addsf3>
    3c4c:	f6 01       	movw	r30, r12
    3c4e:	65 87       	std	Z+13, r22	; 0x0d
    3c50:	76 87       	std	Z+14, r23	; 0x0e
    3c52:	87 87       	std	Z+15, r24	; 0x0f
    3c54:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3c56:	b7 01       	movw	r22, r14
    3c58:	c8 01       	movw	r24, r16
    3c5a:	0e 94 e7 42 	call	0x85ce	; 0x85ce <cos>
    3c5e:	00 91 8f 24 	lds	r16, 0x248F
    3c62:	10 91 90 24 	lds	r17, 0x2490
    3c66:	00 0f       	add	r16, r16
    3c68:	11 1f       	adc	r17, r17
    3c6a:	00 0f       	add	r16, r16
    3c6c:	11 1f       	adc	r17, r17
    3c6e:	0a 57       	subi	r16, 0x7A	; 122
    3c70:	1b 4d       	sbci	r17, 0xDB	; 219
    3c72:	a5 01       	movw	r20, r10
    3c74:	94 01       	movw	r18, r8
    3c76:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    3c7a:	9b 01       	movw	r18, r22
    3c7c:	ac 01       	movw	r20, r24
    3c7e:	60 91 a7 24 	lds	r22, 0x24A7
    3c82:	70 91 a8 24 	lds	r23, 0x24A8
    3c86:	80 91 a9 24 	lds	r24, 0x24A9
    3c8a:	90 91 aa 24 	lds	r25, 0x24AA
    3c8e:	0e 94 44 42 	call	0x8488	; 0x8488 <__addsf3>
    3c92:	f8 01       	movw	r30, r16
    3c94:	65 87       	std	Z+13, r22	; 0x0d
    3c96:	76 87       	std	Z+14, r23	; 0x0e
    3c98:	87 87       	std	Z+15, r24	; 0x0f
    3c9a:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3c9c:	00 91 91 24 	lds	r16, 0x2491
    3ca0:	10 91 92 24 	lds	r17, 0x2492
    3ca4:	00 0f       	add	r16, r16
    3ca6:	11 1f       	adc	r17, r17
    3ca8:	00 0f       	add	r16, r16
    3caa:	11 1f       	adc	r17, r17
    3cac:	0a 57       	subi	r16, 0x7A	; 122
    3cae:	1b 4d       	sbci	r17, 0xDB	; 219
    3cb0:	f8 01       	movw	r30, r16
    3cb2:	65 85       	ldd	r22, Z+13	; 0x0d
    3cb4:	76 85       	ldd	r23, Z+14	; 0x0e
    3cb6:	87 85       	ldd	r24, Z+15	; 0x0f
    3cb8:	90 89       	ldd	r25, Z+16	; 0x10
    3cba:	20 91 bb 24 	lds	r18, 0x24BB
    3cbe:	30 91 bc 24 	lds	r19, 0x24BC
    3cc2:	40 91 bd 24 	lds	r20, 0x24BD
    3cc6:	50 91 be 24 	lds	r21, 0x24BE
    3cca:	0e 94 44 42 	call	0x8488	; 0x8488 <__addsf3>
    3cce:	f8 01       	movw	r30, r16
    3cd0:	65 87       	std	Z+13, r22	; 0x0d
    3cd2:	76 87       	std	Z+14, r23	; 0x0e
    3cd4:	87 87       	std	Z+15, r24	; 0x0f
    3cd6:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    3cd8:	60 91 93 24 	lds	r22, 0x2493
    3cdc:	70 91 94 24 	lds	r23, 0x2494
    3ce0:	80 91 95 24 	lds	r24, 0x2495
    3ce4:	90 91 96 24 	lds	r25, 0x2496
    3ce8:	20 91 97 24 	lds	r18, 0x2497
    3cec:	30 91 98 24 	lds	r19, 0x2498
    3cf0:	40 91 99 24 	lds	r20, 0x2499
    3cf4:	50 91 9a 24 	lds	r21, 0x249A
    3cf8:	e0 90 9b 24 	lds	r14, 0x249B
    3cfc:	f0 90 9c 24 	lds	r15, 0x249C
    3d00:	00 91 9d 24 	lds	r16, 0x249D
    3d04:	10 91 9e 24 	lds	r17, 0x249E
    3d08:	a0 90 b3 24 	lds	r10, 0x24B3
    3d0c:	b0 90 b4 24 	lds	r11, 0x24B4
    3d10:	c0 90 b5 24 	lds	r12, 0x24B5
    3d14:	d0 90 b6 24 	lds	r13, 0x24B6
    3d18:	80 90 8b 24 	lds	r8, 0x248B
    3d1c:	90 90 8c 24 	lds	r9, 0x248C
    3d20:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3d24:	20 91 89 24 	lds	r18, 0x2489
    3d28:	30 91 8a 24 	lds	r19, 0x248A
    3d2c:	80 91 87 24 	lds	r24, 0x2487
    3d30:	90 91 88 24 	lds	r25, 0x2488
    3d34:	82 17       	cp	r24, r18
    3d36:	93 07       	cpc	r25, r19
    3d38:	0c f0       	brlt	.+2      	; 0x3d3c <mc_arc_continue+0x1d4>
    3d3a:	32 cf       	rjmp	.-412    	; 0x3ba0 <mc_arc_continue+0x38>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3d3c:	10 92 86 24 	sts	0x2486, r1
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3d44:	c9 01       	movw	r24, r18
    3d46:	1f 91       	pop	r17
    3d48:	0f 91       	pop	r16
    3d4a:	ff 90       	pop	r15
    3d4c:	ef 90       	pop	r14
    3d4e:	df 90       	pop	r13
    3d50:	cf 90       	pop	r12
    3d52:	bf 90       	pop	r11
    3d54:	af 90       	pop	r10
    3d56:	9f 90       	pop	r9
    3d58:	8f 90       	pop	r8
    3d5a:	08 95       	ret

00003d5c <mc_arc>:
 */

int mc_arc(double theta, double angular_travel, double radius, 
		   double linear_travel, int axis_1, int axis_2, int axis_linear, 
		   double feed_rate, int invert_feed_rate)
{
    3d5c:	2f 92       	push	r2
    3d5e:	3f 92       	push	r3
    3d60:	4f 92       	push	r4
    3d62:	5f 92       	push	r5
    3d64:	6f 92       	push	r6
    3d66:	7f 92       	push	r7
    3d68:	8f 92       	push	r8
    3d6a:	9f 92       	push	r9
    3d6c:	af 92       	push	r10
    3d6e:	bf 92       	push	r11
    3d70:	cf 92       	push	r12
    3d72:	df 92       	push	r13
    3d74:	ef 92       	push	r14
    3d76:	ff 92       	push	r15
    3d78:	0f 93       	push	r16
    3d7a:	1f 93       	push	r17
    3d7c:	df 93       	push	r29
    3d7e:	cf 93       	push	r28
    3d80:	cd b7       	in	r28, 0x3d	; 61
    3d82:	de b7       	in	r29, 0x3e	; 62
    3d84:	28 97       	sbiw	r28, 0x08	; 8
    3d86:	cd bf       	out	0x3d, r28	; 61
    3d88:	de bf       	out	0x3e, r29	; 62
    3d8a:	69 83       	std	Y+1, r22	; 0x01
    3d8c:	7a 83       	std	Y+2, r23	; 0x02
    3d8e:	8b 83       	std	Y+3, r24	; 0x03
    3d90:	9c 83       	std	Y+4, r25	; 0x04
    3d92:	29 01       	movw	r4, r18
    3d94:	3a 01       	movw	r6, r20
    3d96:	ed 82       	std	Y+5, r14	; 0x05
    3d98:	fe 82       	std	Y+6, r15	; 0x06
    3d9a:	0f 83       	std	Y+7, r16	; 0x07
    3d9c:	18 87       	std	Y+8, r17	; 0x08
    3d9e:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3da0:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3da2:	60 93 ab 24 	sts	0x24AB, r22
    3da6:	70 93 ac 24 	sts	0x24AC, r23
    3daa:	80 93 ad 24 	sts	0x24AD, r24
    3dae:	90 93 ae 24 	sts	0x24AE, r25
	ma.radius = radius;
    3db2:	e0 92 af 24 	sts	0x24AF, r14
    3db6:	f0 92 b0 24 	sts	0x24B0, r15
    3dba:	00 93 b1 24 	sts	0x24B1, r16
    3dbe:	10 93 b2 24 	sts	0x24B2, r17
	ma.angular_travel = angular_travel;
    3dc2:	20 93 bf 24 	sts	0x24BF, r18
    3dc6:	30 93 c0 24 	sts	0x24C0, r19
    3dca:	40 93 c1 24 	sts	0x24C1, r20
    3dce:	50 93 c2 24 	sts	0x24C2, r21
	ma.linear_travel = linear_travel;
    3dd2:	a0 92 c3 24 	sts	0x24C3, r10
    3dd6:	b0 92 c4 24 	sts	0x24C4, r11
    3dda:	c0 92 c5 24 	sts	0x24C5, r12
    3dde:	d0 92 c6 24 	sts	0x24C6, r13
	ma.feed_rate = feed_rate;
    3de2:	8a a1       	ldd	r24, Y+34	; 0x22
    3de4:	9b a1       	ldd	r25, Y+35	; 0x23
    3de6:	ac a1       	ldd	r26, Y+36	; 0x24
    3de8:	bd a1       	ldd	r27, Y+37	; 0x25
    3dea:	80 93 b3 24 	sts	0x24B3, r24
    3dee:	90 93 b4 24 	sts	0x24B4, r25
    3df2:	a0 93 b5 24 	sts	0x24B5, r26
    3df6:	b0 93 b6 24 	sts	0x24B6, r27
	ma.invert_feed_rate = invert_feed_rate;
    3dfa:	ae a1       	ldd	r26, Y+38	; 0x26
    3dfc:	bf a1       	ldd	r27, Y+39	; 0x27
    3dfe:	a0 93 8b 24 	sts	0x248B, r26
    3e02:	b0 93 8c 24 	sts	0x248C, r27
	ma.axis_1 = axis_1;
    3e06:	80 92 8d 24 	sts	0x248D, r8
    3e0a:	90 92 8e 24 	sts	0x248E, r9
	ma.axis_2 = axis_2;
    3e0e:	20 92 8f 24 	sts	0x248F, r2
    3e12:	30 92 90 24 	sts	0x2490, r3
	ma.axis_linear = axis_linear;
    3e16:	e8 a1       	ldd	r30, Y+32	; 0x20
    3e18:	f9 a1       	ldd	r31, Y+33	; 0x21
    3e1a:	e0 93 91 24 	sts	0x2491, r30
    3e1e:	f0 93 92 24 	sts	0x2492, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3e22:	ca 01       	movw	r24, r20
    3e24:	b9 01       	movw	r22, r18
    3e26:	a8 01       	movw	r20, r16
    3e28:	97 01       	movw	r18, r14
    3e2a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    3e2e:	7b 01       	movw	r14, r22
    3e30:	8c 01       	movw	r16, r24
    3e32:	c6 01       	movw	r24, r12
    3e34:	b5 01       	movw	r22, r10
    3e36:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__fixsfsi>
    3e3a:	97 ff       	sbrs	r25, 7
    3e3c:	07 c0       	rjmp	.+14     	; 0x3e4c <mc_arc+0xf0>
    3e3e:	90 95       	com	r25
    3e40:	80 95       	com	r24
    3e42:	70 95       	com	r23
    3e44:	61 95       	neg	r22
    3e46:	7f 4f       	sbci	r23, 0xFF	; 255
    3e48:	8f 4f       	sbci	r24, 0xFF	; 255
    3e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e4c:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    3e50:	9b 01       	movw	r18, r22
    3e52:	ac 01       	movw	r20, r24
    3e54:	c8 01       	movw	r24, r16
    3e56:	b7 01       	movw	r22, r14
    3e58:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <hypot>
    3e5c:	7b 01       	movw	r14, r22
    3e5e:	8c 01       	movw	r16, r24
    3e60:	60 93 9f 24 	sts	0x249F, r22
    3e64:	70 93 a0 24 	sts	0x24A0, r23
    3e68:	80 93 a1 24 	sts	0x24A1, r24
    3e6c:	90 93 a2 24 	sts	0x24A2, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3e70:	2a e0       	ldi	r18, 0x0A	; 10
    3e72:	37 ed       	ldi	r19, 0xD7	; 215
    3e74:	43 e2       	ldi	r20, 0x23	; 35
    3e76:	5c e3       	ldi	r21, 0x3C	; 60
    3e78:	0e 94 e3 42 	call	0x85c6	; 0x85c6 <__cmpsf2>
    3e7c:	88 23       	and	r24, r24
    3e7e:	1c f4       	brge	.+6      	; 0x3e86 <mc_arc+0x12a>
    3e80:	20 e1       	ldi	r18, 0x10	; 16
    3e82:	30 e0       	ldi	r19, 0x00	; 0
    3e84:	fb c0       	rjmp	.+502    	; 0x407c <mc_arc+0x320>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3e86:	c8 01       	movw	r24, r16
    3e88:	b7 01       	movw	r22, r14
    3e8a:	20 91 18 24 	lds	r18, 0x2418
    3e8e:	30 91 19 24 	lds	r19, 0x2419
    3e92:	40 91 1a 24 	lds	r20, 0x241A
    3e96:	50 91 1b 24 	lds	r21, 0x241B
    3e9a:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    3e9e:	0e 94 d0 42 	call	0x85a0	; 0x85a0 <ceil>
    3ea2:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__fixsfsi>
    3ea6:	8b 01       	movw	r16, r22
    3ea8:	60 93 87 24 	sts	0x2487, r22
    3eac:	70 93 88 24 	sts	0x2488, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    3eb0:	8e a1       	ldd	r24, Y+38	; 0x26
    3eb2:	9f a1       	ldd	r25, Y+39	; 0x27
    3eb4:	89 2b       	or	r24, r25
    3eb6:	b9 f0       	breq	.+46     	; 0x3ee6 <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    3eb8:	b8 01       	movw	r22, r16
    3eba:	88 27       	eor	r24, r24
    3ebc:	77 fd       	sbrc	r23, 7
    3ebe:	80 95       	com	r24
    3ec0:	98 2f       	mov	r25, r24
    3ec2:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    3ec6:	9b 01       	movw	r18, r22
    3ec8:	ac 01       	movw	r20, r24
    3eca:	6a a1       	ldd	r22, Y+34	; 0x22
    3ecc:	7b a1       	ldd	r23, Y+35	; 0x23
    3ece:	8c a1       	ldd	r24, Y+36	; 0x24
    3ed0:	9d a1       	ldd	r25, Y+37	; 0x25
    3ed2:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    3ed6:	60 93 b3 24 	sts	0x24B3, r22
    3eda:	70 93 b4 24 	sts	0x24B4, r23
    3ede:	80 93 b5 24 	sts	0x24B5, r24
    3ee2:	90 93 b6 24 	sts	0x24B6, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    3ee6:	b8 01       	movw	r22, r16
    3ee8:	88 27       	eor	r24, r24
    3eea:	77 fd       	sbrc	r23, 7
    3eec:	80 95       	com	r24
    3eee:	98 2f       	mov	r25, r24
    3ef0:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    3ef4:	7b 01       	movw	r14, r22
    3ef6:	8c 01       	movw	r16, r24
    3ef8:	c3 01       	movw	r24, r6
    3efa:	b2 01       	movw	r22, r4
    3efc:	a8 01       	movw	r20, r16
    3efe:	97 01       	movw	r18, r14
    3f00:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    3f04:	60 93 b7 24 	sts	0x24B7, r22
    3f08:	70 93 b8 24 	sts	0x24B8, r23
    3f0c:	80 93 b9 24 	sts	0x24B9, r24
    3f10:	90 93 ba 24 	sts	0x24BA, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    3f14:	c6 01       	movw	r24, r12
    3f16:	b5 01       	movw	r22, r10
    3f18:	a8 01       	movw	r20, r16
    3f1a:	97 01       	movw	r18, r14
    3f1c:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    3f20:	60 93 bb 24 	sts	0x24BB, r22
    3f24:	70 93 bc 24 	sts	0x24BC, r23
    3f28:	80 93 bd 24 	sts	0x24BD, r24
    3f2c:	90 93 be 24 	sts	0x24BE, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    3f30:	69 81       	ldd	r22, Y+1	; 0x01
    3f32:	7a 81       	ldd	r23, Y+2	; 0x02
    3f34:	8b 81       	ldd	r24, Y+3	; 0x03
    3f36:	9c 81       	ldd	r25, Y+4	; 0x04
    3f38:	0e 94 08 46 	call	0x8c10	; 0x8c10 <sin>
    3f3c:	5b 01       	movw	r10, r22
    3f3e:	6c 01       	movw	r12, r24
    3f40:	f4 01       	movw	r30, r8
    3f42:	ee 0f       	add	r30, r30
    3f44:	ff 1f       	adc	r31, r31
    3f46:	ee 0f       	add	r30, r30
    3f48:	ff 1f       	adc	r31, r31
    3f4a:	e0 58       	subi	r30, 0x80	; 128
    3f4c:	fe 4d       	sbci	r31, 0xDE	; 222
    3f4e:	61 81       	ldd	r22, Z+1	; 0x01
    3f50:	72 81       	ldd	r23, Z+2	; 0x02
    3f52:	83 81       	ldd	r24, Z+3	; 0x03
    3f54:	94 81       	ldd	r25, Z+4	; 0x04
    3f56:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    3f5a:	f4 01       	movw	r30, r8
    3f5c:	ee 0f       	add	r30, r30
    3f5e:	ff 1f       	adc	r31, r31
    3f60:	e8 0d       	add	r30, r8
    3f62:	f9 1d       	adc	r31, r9
    3f64:	13 e0       	ldi	r17, 0x03	; 3
    3f66:	ee 0f       	add	r30, r30
    3f68:	ff 1f       	adc	r31, r31
    3f6a:	1a 95       	dec	r17
    3f6c:	e1 f7       	brne	.-8      	; 0x3f66 <mc_arc+0x20a>
    3f6e:	ea 5e       	subi	r30, 0xEA	; 234
    3f70:	fb 4d       	sbci	r31, 0xDB	; 219
    3f72:	21 a1       	ldd	r18, Z+33	; 0x21
    3f74:	32 a1       	ldd	r19, Z+34	; 0x22
    3f76:	43 a1       	ldd	r20, Z+35	; 0x23
    3f78:	54 a1       	ldd	r21, Z+36	; 0x24
    3f7a:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    3f7e:	7b 01       	movw	r14, r22
    3f80:	8c 01       	movw	r16, r24
    3f82:	c6 01       	movw	r24, r12
    3f84:	b5 01       	movw	r22, r10
    3f86:	2d 81       	ldd	r18, Y+5	; 0x05
    3f88:	3e 81       	ldd	r19, Y+6	; 0x06
    3f8a:	4f 81       	ldd	r20, Y+7	; 0x07
    3f8c:	58 85       	ldd	r21, Y+8	; 0x08
    3f8e:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    3f92:	9b 01       	movw	r18, r22
    3f94:	ac 01       	movw	r20, r24
    3f96:	c8 01       	movw	r24, r16
    3f98:	b7 01       	movw	r22, r14
    3f9a:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    3f9e:	60 93 a3 24 	sts	0x24A3, r22
    3fa2:	70 93 a4 24 	sts	0x24A4, r23
    3fa6:	80 93 a5 24 	sts	0x24A5, r24
    3faa:	90 93 a6 24 	sts	0x24A6, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    3fae:	69 81       	ldd	r22, Y+1	; 0x01
    3fb0:	7a 81       	ldd	r23, Y+2	; 0x02
    3fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fb6:	0e 94 e7 42 	call	0x85ce	; 0x85ce <cos>
    3fba:	5b 01       	movw	r10, r22
    3fbc:	6c 01       	movw	r12, r24
    3fbe:	f1 01       	movw	r30, r2
    3fc0:	ee 0f       	add	r30, r30
    3fc2:	ff 1f       	adc	r31, r31
    3fc4:	ee 0f       	add	r30, r30
    3fc6:	ff 1f       	adc	r31, r31
    3fc8:	e0 58       	subi	r30, 0x80	; 128
    3fca:	fe 4d       	sbci	r31, 0xDE	; 222
    3fcc:	61 81       	ldd	r22, Z+1	; 0x01
    3fce:	72 81       	ldd	r23, Z+2	; 0x02
    3fd0:	83 81       	ldd	r24, Z+3	; 0x03
    3fd2:	94 81       	ldd	r25, Z+4	; 0x04
    3fd4:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    3fd8:	f1 01       	movw	r30, r2
    3fda:	ee 0f       	add	r30, r30
    3fdc:	ff 1f       	adc	r31, r31
    3fde:	e2 0d       	add	r30, r2
    3fe0:	f3 1d       	adc	r31, r3
    3fe2:	53 e0       	ldi	r21, 0x03	; 3
    3fe4:	ee 0f       	add	r30, r30
    3fe6:	ff 1f       	adc	r31, r31
    3fe8:	5a 95       	dec	r21
    3fea:	e1 f7       	brne	.-8      	; 0x3fe4 <mc_arc+0x288>
    3fec:	ea 5e       	subi	r30, 0xEA	; 234
    3fee:	fb 4d       	sbci	r31, 0xDB	; 219
    3ff0:	21 a1       	ldd	r18, Z+33	; 0x21
    3ff2:	32 a1       	ldd	r19, Z+34	; 0x22
    3ff4:	43 a1       	ldd	r20, Z+35	; 0x23
    3ff6:	54 a1       	ldd	r21, Z+36	; 0x24
    3ff8:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    3ffc:	7b 01       	movw	r14, r22
    3ffe:	8c 01       	movw	r16, r24
    4000:	c6 01       	movw	r24, r12
    4002:	b5 01       	movw	r22, r10
    4004:	2d 81       	ldd	r18, Y+5	; 0x05
    4006:	3e 81       	ldd	r19, Y+6	; 0x06
    4008:	4f 81       	ldd	r20, Y+7	; 0x07
    400a:	58 85       	ldd	r21, Y+8	; 0x08
    400c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    4010:	9b 01       	movw	r18, r22
    4012:	ac 01       	movw	r20, r24
    4014:	c8 01       	movw	r24, r16
    4016:	b7 01       	movw	r22, r14
    4018:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    401c:	60 93 a7 24 	sts	0x24A7, r22
    4020:	70 93 a8 24 	sts	0x24A8, r23
    4024:	80 93 a9 24 	sts	0x24A9, r24
    4028:	90 93 aa 24 	sts	0x24AA, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    402c:	e8 a1       	ldd	r30, Y+32	; 0x20
    402e:	f9 a1       	ldd	r31, Y+33	; 0x21
    4030:	ee 0f       	add	r30, r30
    4032:	ff 1f       	adc	r31, r31
    4034:	ee 0f       	add	r30, r30
    4036:	ff 1f       	adc	r31, r31
    4038:	8f 01       	movw	r16, r30
    403a:	0a 57       	subi	r16, 0x7A	; 122
    403c:	1b 4d       	sbci	r17, 0xDB	; 219
    403e:	e0 58       	subi	r30, 0x80	; 128
    4040:	fe 4d       	sbci	r31, 0xDE	; 222
    4042:	61 81       	ldd	r22, Z+1	; 0x01
    4044:	72 81       	ldd	r23, Z+2	; 0x02
    4046:	83 81       	ldd	r24, Z+3	; 0x03
    4048:	94 81       	ldd	r25, Z+4	; 0x04
    404a:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    404e:	20 91 67 24 	lds	r18, 0x2467
    4052:	30 91 68 24 	lds	r19, 0x2468
    4056:	40 91 69 24 	lds	r20, 0x2469
    405a:	50 91 6a 24 	lds	r21, 0x246A
    405e:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    4062:	d8 01       	movw	r26, r16
    4064:	1d 96       	adiw	r26, 0x0d	; 13
    4066:	6d 93       	st	X+, r22
    4068:	7d 93       	st	X+, r23
    406a:	8d 93       	st	X+, r24
    406c:	9c 93       	st	X, r25
    406e:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	80 93 86 24 	sts	0x2486, r24
	return (mc_arc_continue());
    4076:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <mc_arc_continue>
    407a:	9c 01       	movw	r18, r24
}
    407c:	c9 01       	movw	r24, r18
    407e:	28 96       	adiw	r28, 0x08	; 8
    4080:	cd bf       	out	0x3d, r28	; 61
    4082:	de bf       	out	0x3e, r29	; 62
    4084:	cf 91       	pop	r28
    4086:	df 91       	pop	r29
    4088:	1f 91       	pop	r17
    408a:	0f 91       	pop	r16
    408c:	ff 90       	pop	r15
    408e:	ef 90       	pop	r14
    4090:	df 90       	pop	r13
    4092:	cf 90       	pop	r12
    4094:	bf 90       	pop	r11
    4096:	af 90       	pop	r10
    4098:	9f 90       	pop	r9
    409a:	8f 90       	pop	r8
    409c:	7f 90       	pop	r7
    409e:	6f 90       	pop	r6
    40a0:	5f 90       	pop	r5
    40a2:	4f 90       	pop	r4
    40a4:	3f 90       	pop	r3
    40a6:	2f 90       	pop	r2
    40a8:	08 95       	ret

000040aa <mc_arc_blocking>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc_blocking(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    40aa:	2f 92       	push	r2
    40ac:	3f 92       	push	r3
    40ae:	4f 92       	push	r4
    40b0:	5f 92       	push	r5
    40b2:	6f 92       	push	r6
    40b4:	7f 92       	push	r7
    40b6:	8f 92       	push	r8
    40b8:	9f 92       	push	r9
    40ba:	af 92       	push	r10
    40bc:	bf 92       	push	r11
    40be:	cf 92       	push	r12
    40c0:	df 92       	push	r13
    40c2:	ef 92       	push	r14
    40c4:	ff 92       	push	r15
    40c6:	0f 93       	push	r16
    40c8:	1f 93       	push	r17
    40ca:	df 93       	push	r29
    40cc:	cf 93       	push	r28
    40ce:	cd b7       	in	r28, 0x3d	; 61
    40d0:	de b7       	in	r29, 0x3e	; 62
    40d2:	28 97       	sbiw	r28, 0x08	; 8
    40d4:	cd bf       	out	0x3d, r28	; 61
    40d6:	de bf       	out	0x3e, r29	; 62
    40d8:	69 83       	std	Y+1, r22	; 0x01
    40da:	7a 83       	std	Y+2, r23	; 0x02
    40dc:	8b 83       	std	Y+3, r24	; 0x03
    40de:	9c 83       	std	Y+4, r25	; 0x04
    40e0:	29 01       	movw	r4, r18
    40e2:	3a 01       	movw	r6, r20
    40e4:	ed 82       	std	Y+5, r14	; 0x05
    40e6:	fe 82       	std	Y+6, r15	; 0x06
    40e8:	0f 83       	std	Y+7, r16	; 0x07
    40ea:	18 87       	std	Y+8, r17	; 0x08
    40ec:	2e 8c       	ldd	r2, Y+30	; 0x1e
    40ee:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    40f0:	60 93 ab 24 	sts	0x24AB, r22
    40f4:	70 93 ac 24 	sts	0x24AC, r23
    40f8:	80 93 ad 24 	sts	0x24AD, r24
    40fc:	90 93 ae 24 	sts	0x24AE, r25
	ma.radius = radius;
    4100:	e0 92 af 24 	sts	0x24AF, r14
    4104:	f0 92 b0 24 	sts	0x24B0, r15
    4108:	00 93 b1 24 	sts	0x24B1, r16
    410c:	10 93 b2 24 	sts	0x24B2, r17
	ma.angular_travel = angular_travel;
    4110:	20 93 bf 24 	sts	0x24BF, r18
    4114:	30 93 c0 24 	sts	0x24C0, r19
    4118:	40 93 c1 24 	sts	0x24C1, r20
    411c:	50 93 c2 24 	sts	0x24C2, r21
	ma.linear_travel = linear_travel;
    4120:	a0 92 c3 24 	sts	0x24C3, r10
    4124:	b0 92 c4 24 	sts	0x24C4, r11
    4128:	c0 92 c5 24 	sts	0x24C5, r12
    412c:	d0 92 c6 24 	sts	0x24C6, r13
	ma.feed_rate = feed_rate;
    4130:	8a a1       	ldd	r24, Y+34	; 0x22
    4132:	9b a1       	ldd	r25, Y+35	; 0x23
    4134:	ac a1       	ldd	r26, Y+36	; 0x24
    4136:	bd a1       	ldd	r27, Y+37	; 0x25
    4138:	80 93 b3 24 	sts	0x24B3, r24
    413c:	90 93 b4 24 	sts	0x24B4, r25
    4140:	a0 93 b5 24 	sts	0x24B5, r26
    4144:	b0 93 b6 24 	sts	0x24B6, r27
	ma.invert_feed_rate = invert_feed_rate;
    4148:	ae a1       	ldd	r26, Y+38	; 0x26
    414a:	bf a1       	ldd	r27, Y+39	; 0x27
    414c:	a0 93 8b 24 	sts	0x248B, r26
    4150:	b0 93 8c 24 	sts	0x248C, r27
	ma.axis_1 = axis_1;
    4154:	80 92 8d 24 	sts	0x248D, r8
    4158:	90 92 8e 24 	sts	0x248E, r9
	ma.axis_2 = axis_2;
    415c:	20 92 8f 24 	sts	0x248F, r2
    4160:	30 92 90 24 	sts	0x2490, r3
	ma.axis_linear = axis_linear;
    4164:	e8 a1       	ldd	r30, Y+32	; 0x20
    4166:	f9 a1       	ldd	r31, Y+33	; 0x21
    4168:	e0 93 91 24 	sts	0x2491, r30
    416c:	f0 93 92 24 	sts	0x2492, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    4170:	ca 01       	movw	r24, r20
    4172:	b9 01       	movw	r22, r18
    4174:	a8 01       	movw	r20, r16
    4176:	97 01       	movw	r18, r14
    4178:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    417c:	7b 01       	movw	r14, r22
    417e:	8c 01       	movw	r16, r24
    4180:	c6 01       	movw	r24, r12
    4182:	b5 01       	movw	r22, r10
    4184:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__fixsfsi>
    4188:	97 ff       	sbrs	r25, 7
    418a:	07 c0       	rjmp	.+14     	; 0x419a <mc_arc_blocking+0xf0>
    418c:	90 95       	com	r25
    418e:	80 95       	com	r24
    4190:	70 95       	com	r23
    4192:	61 95       	neg	r22
    4194:	7f 4f       	sbci	r23, 0xFF	; 255
    4196:	8f 4f       	sbci	r24, 0xFF	; 255
    4198:	9f 4f       	sbci	r25, 0xFF	; 255
    419a:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    419e:	9b 01       	movw	r18, r22
    41a0:	ac 01       	movw	r20, r24
    41a2:	c8 01       	movw	r24, r16
    41a4:	b7 01       	movw	r22, r14
    41a6:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <hypot>
    41aa:	7b 01       	movw	r14, r22
    41ac:	8c 01       	movw	r16, r24
    41ae:	60 93 9f 24 	sts	0x249F, r22
    41b2:	70 93 a0 24 	sts	0x24A0, r23
    41b6:	80 93 a1 24 	sts	0x24A1, r24
    41ba:	90 93 a2 24 	sts	0x24A2, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    41be:	2a e0       	ldi	r18, 0x0A	; 10
    41c0:	37 ed       	ldi	r19, 0xD7	; 215
    41c2:	43 e2       	ldi	r20, 0x23	; 35
    41c4:	5c e3       	ldi	r21, 0x3C	; 60
    41c6:	0e 94 e3 42 	call	0x85c6	; 0x85c6 <__cmpsf2>
    41ca:	88 23       	and	r24, r24
    41cc:	1c f4       	brge	.+6      	; 0x41d4 <mc_arc_blocking+0x12a>
    41ce:	20 e1       	ldi	r18, 0x10	; 16
    41d0:	30 e0       	ldi	r19, 0x00	; 0
    41d2:	c7 c1       	rjmp	.+910    	; 0x4562 <mc_arc_blocking+0x4b8>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    41d4:	c8 01       	movw	r24, r16
    41d6:	b7 01       	movw	r22, r14
    41d8:	20 91 18 24 	lds	r18, 0x2418
    41dc:	30 91 19 24 	lds	r19, 0x2419
    41e0:	40 91 1a 24 	lds	r20, 0x241A
    41e4:	50 91 1b 24 	lds	r21, 0x241B
    41e8:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    41ec:	0e 94 d0 42 	call	0x85a0	; 0x85a0 <ceil>
    41f0:	0e 94 52 43 	call	0x86a4	; 0x86a4 <__fixsfsi>
    41f4:	8b 01       	movw	r16, r22
    41f6:	60 93 87 24 	sts	0x2487, r22
    41fa:	70 93 88 24 	sts	0x2488, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    41fe:	2e a1       	ldd	r18, Y+38	; 0x26
    4200:	3f a1       	ldd	r19, Y+39	; 0x27
    4202:	23 2b       	or	r18, r19
    4204:	b9 f0       	breq	.+46     	; 0x4234 <mc_arc_blocking+0x18a>
		ma.feed_rate *= ma.segments; 
    4206:	b8 01       	movw	r22, r16
    4208:	88 27       	eor	r24, r24
    420a:	77 fd       	sbrc	r23, 7
    420c:	80 95       	com	r24
    420e:	98 2f       	mov	r25, r24
    4210:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    4214:	9b 01       	movw	r18, r22
    4216:	ac 01       	movw	r20, r24
    4218:	6a a1       	ldd	r22, Y+34	; 0x22
    421a:	7b a1       	ldd	r23, Y+35	; 0x23
    421c:	8c a1       	ldd	r24, Y+36	; 0x24
    421e:	9d a1       	ldd	r25, Y+37	; 0x25
    4220:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    4224:	60 93 b3 24 	sts	0x24B3, r22
    4228:	70 93 b4 24 	sts	0x24B4, r23
    422c:	80 93 b5 24 	sts	0x24B5, r24
    4230:	90 93 b6 24 	sts	0x24B6, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    4234:	b8 01       	movw	r22, r16
    4236:	88 27       	eor	r24, r24
    4238:	77 fd       	sbrc	r23, 7
    423a:	80 95       	com	r24
    423c:	98 2f       	mov	r25, r24
    423e:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    4242:	7b 01       	movw	r14, r22
    4244:	8c 01       	movw	r16, r24
    4246:	c3 01       	movw	r24, r6
    4248:	b2 01       	movw	r22, r4
    424a:	a8 01       	movw	r20, r16
    424c:	97 01       	movw	r18, r14
    424e:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    4252:	60 93 b7 24 	sts	0x24B7, r22
    4256:	70 93 b8 24 	sts	0x24B8, r23
    425a:	80 93 b9 24 	sts	0x24B9, r24
    425e:	90 93 ba 24 	sts	0x24BA, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    4262:	c6 01       	movw	r24, r12
    4264:	b5 01       	movw	r22, r10
    4266:	a8 01       	movw	r20, r16
    4268:	97 01       	movw	r18, r14
    426a:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    426e:	60 93 bb 24 	sts	0x24BB, r22
    4272:	70 93 bc 24 	sts	0x24BC, r23
    4276:	80 93 bd 24 	sts	0x24BD, r24
    427a:	90 93 be 24 	sts	0x24BE, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    427e:	69 81       	ldd	r22, Y+1	; 0x01
    4280:	7a 81       	ldd	r23, Y+2	; 0x02
    4282:	8b 81       	ldd	r24, Y+3	; 0x03
    4284:	9c 81       	ldd	r25, Y+4	; 0x04
    4286:	0e 94 08 46 	call	0x8c10	; 0x8c10 <sin>
    428a:	5b 01       	movw	r10, r22
    428c:	6c 01       	movw	r12, r24
    428e:	f4 01       	movw	r30, r8
    4290:	ee 0f       	add	r30, r30
    4292:	ff 1f       	adc	r31, r31
    4294:	ee 0f       	add	r30, r30
    4296:	ff 1f       	adc	r31, r31
    4298:	e0 58       	subi	r30, 0x80	; 128
    429a:	fe 4d       	sbci	r31, 0xDE	; 222
    429c:	61 81       	ldd	r22, Z+1	; 0x01
    429e:	72 81       	ldd	r23, Z+2	; 0x02
    42a0:	83 81       	ldd	r24, Z+3	; 0x03
    42a2:	94 81       	ldd	r25, Z+4	; 0x04
    42a4:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    42a8:	f4 01       	movw	r30, r8
    42aa:	ee 0f       	add	r30, r30
    42ac:	ff 1f       	adc	r31, r31
    42ae:	e8 0d       	add	r30, r8
    42b0:	f9 1d       	adc	r31, r9
    42b2:	13 e0       	ldi	r17, 0x03	; 3
    42b4:	ee 0f       	add	r30, r30
    42b6:	ff 1f       	adc	r31, r31
    42b8:	1a 95       	dec	r17
    42ba:	e1 f7       	brne	.-8      	; 0x42b4 <mc_arc_blocking+0x20a>
    42bc:	ea 5e       	subi	r30, 0xEA	; 234
    42be:	fb 4d       	sbci	r31, 0xDB	; 219
    42c0:	21 a1       	ldd	r18, Z+33	; 0x21
    42c2:	32 a1       	ldd	r19, Z+34	; 0x22
    42c4:	43 a1       	ldd	r20, Z+35	; 0x23
    42c6:	54 a1       	ldd	r21, Z+36	; 0x24
    42c8:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    42cc:	7b 01       	movw	r14, r22
    42ce:	8c 01       	movw	r16, r24
    42d0:	c6 01       	movw	r24, r12
    42d2:	b5 01       	movw	r22, r10
    42d4:	2d 81       	ldd	r18, Y+5	; 0x05
    42d6:	3e 81       	ldd	r19, Y+6	; 0x06
    42d8:	4f 81       	ldd	r20, Y+7	; 0x07
    42da:	58 85       	ldd	r21, Y+8	; 0x08
    42dc:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    42e0:	9b 01       	movw	r18, r22
    42e2:	ac 01       	movw	r20, r24
    42e4:	c8 01       	movw	r24, r16
    42e6:	b7 01       	movw	r22, r14
    42e8:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    42ec:	60 93 a3 24 	sts	0x24A3, r22
    42f0:	70 93 a4 24 	sts	0x24A4, r23
    42f4:	80 93 a5 24 	sts	0x24A5, r24
    42f8:	90 93 a6 24 	sts	0x24A6, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    42fc:	69 81       	ldd	r22, Y+1	; 0x01
    42fe:	7a 81       	ldd	r23, Y+2	; 0x02
    4300:	8b 81       	ldd	r24, Y+3	; 0x03
    4302:	9c 81       	ldd	r25, Y+4	; 0x04
    4304:	0e 94 e7 42 	call	0x85ce	; 0x85ce <cos>
    4308:	5b 01       	movw	r10, r22
    430a:	6c 01       	movw	r12, r24
    430c:	f1 01       	movw	r30, r2
    430e:	ee 0f       	add	r30, r30
    4310:	ff 1f       	adc	r31, r31
    4312:	ee 0f       	add	r30, r30
    4314:	ff 1f       	adc	r31, r31
    4316:	e0 58       	subi	r30, 0x80	; 128
    4318:	fe 4d       	sbci	r31, 0xDE	; 222
    431a:	61 81       	ldd	r22, Z+1	; 0x01
    431c:	72 81       	ldd	r23, Z+2	; 0x02
    431e:	83 81       	ldd	r24, Z+3	; 0x03
    4320:	94 81       	ldd	r25, Z+4	; 0x04
    4322:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    4326:	f1 01       	movw	r30, r2
    4328:	ee 0f       	add	r30, r30
    432a:	ff 1f       	adc	r31, r31
    432c:	e2 0d       	add	r30, r2
    432e:	f3 1d       	adc	r31, r3
    4330:	53 e0       	ldi	r21, 0x03	; 3
    4332:	ee 0f       	add	r30, r30
    4334:	ff 1f       	adc	r31, r31
    4336:	5a 95       	dec	r21
    4338:	e1 f7       	brne	.-8      	; 0x4332 <mc_arc_blocking+0x288>
    433a:	ea 5e       	subi	r30, 0xEA	; 234
    433c:	fb 4d       	sbci	r31, 0xDB	; 219
    433e:	21 a1       	ldd	r18, Z+33	; 0x21
    4340:	32 a1       	ldd	r19, Z+34	; 0x22
    4342:	43 a1       	ldd	r20, Z+35	; 0x23
    4344:	54 a1       	ldd	r21, Z+36	; 0x24
    4346:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    434a:	7b 01       	movw	r14, r22
    434c:	8c 01       	movw	r16, r24
    434e:	c6 01       	movw	r24, r12
    4350:	b5 01       	movw	r22, r10
    4352:	2d 81       	ldd	r18, Y+5	; 0x05
    4354:	3e 81       	ldd	r19, Y+6	; 0x06
    4356:	4f 81       	ldd	r20, Y+7	; 0x07
    4358:	58 85       	ldd	r21, Y+8	; 0x08
    435a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    435e:	9b 01       	movw	r18, r22
    4360:	ac 01       	movw	r20, r24
    4362:	c8 01       	movw	r24, r16
    4364:	b7 01       	movw	r22, r14
    4366:	0e 94 43 42 	call	0x8486	; 0x8486 <__subsf3>
    436a:	60 93 a7 24 	sts	0x24A7, r22
    436e:	70 93 a8 24 	sts	0x24A8, r23
    4372:	80 93 a9 24 	sts	0x24A9, r24
    4376:	90 93 aa 24 	sts	0x24AA, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    437a:	e8 a1       	ldd	r30, Y+32	; 0x20
    437c:	f9 a1       	ldd	r31, Y+33	; 0x21
    437e:	ee 0f       	add	r30, r30
    4380:	ff 1f       	adc	r31, r31
    4382:	ee 0f       	add	r30, r30
    4384:	ff 1f       	adc	r31, r31
    4386:	8f 01       	movw	r16, r30
    4388:	0a 57       	subi	r16, 0x7A	; 122
    438a:	1b 4d       	sbci	r17, 0xDB	; 219
    438c:	e0 58       	subi	r30, 0x80	; 128
    438e:	fe 4d       	sbci	r31, 0xDE	; 222
    4390:	61 81       	ldd	r22, Z+1	; 0x01
    4392:	72 81       	ldd	r23, Z+2	; 0x02
    4394:	83 81       	ldd	r24, Z+3	; 0x03
    4396:	94 81       	ldd	r25, Z+4	; 0x04
    4398:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    439c:	20 91 67 24 	lds	r18, 0x2467
    43a0:	30 91 68 24 	lds	r19, 0x2468
    43a4:	40 91 69 24 	lds	r20, 0x2469
    43a8:	50 91 6a 24 	lds	r21, 0x246A
    43ac:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    43b0:	d8 01       	movw	r26, r16
    43b2:	1d 96       	adiw	r26, 0x0d	; 13
    43b4:	6d 93       	st	X+, r22
    43b6:	7d 93       	st	X+, r23
    43b8:	8d 93       	st	X+, r24
    43ba:	9c 93       	st	X, r25
    43bc:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    43be:	10 92 89 24 	sts	0x2489, r1
    43c2:	10 92 8a 24 	sts	0x248A, r1
    43c6:	bf c0       	rjmp	.+382    	; 0x4546 <mc_arc_blocking+0x49c>
		ma.theta += ma.theta_per_segment;
    43c8:	60 91 ab 24 	lds	r22, 0x24AB
    43cc:	70 91 ac 24 	lds	r23, 0x24AC
    43d0:	80 91 ad 24 	lds	r24, 0x24AD
    43d4:	90 91 ae 24 	lds	r25, 0x24AE
    43d8:	20 91 b7 24 	lds	r18, 0x24B7
    43dc:	30 91 b8 24 	lds	r19, 0x24B8
    43e0:	40 91 b9 24 	lds	r20, 0x24B9
    43e4:	50 91 ba 24 	lds	r21, 0x24BA
    43e8:	0e 94 44 42 	call	0x8488	; 0x8488 <__addsf3>
    43ec:	7b 01       	movw	r14, r22
    43ee:	8c 01       	movw	r16, r24
    43f0:	cb 01       	movw	r24, r22
    43f2:	d8 01       	movw	r26, r16
    43f4:	80 93 ab 24 	sts	0x24AB, r24
    43f8:	90 93 ac 24 	sts	0x24AC, r25
    43fc:	a0 93 ad 24 	sts	0x24AD, r26
    4400:	b0 93 ae 24 	sts	0x24AE, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    4404:	b7 01       	movw	r22, r14
    4406:	c8 01       	movw	r24, r16
    4408:	0e 94 08 46 	call	0x8c10	; 0x8c10 <sin>
    440c:	80 90 af 24 	lds	r8, 0x24AF
    4410:	90 90 b0 24 	lds	r9, 0x24B0
    4414:	a0 90 b1 24 	lds	r10, 0x24B1
    4418:	b0 90 b2 24 	lds	r11, 0x24B2
    441c:	c0 90 8d 24 	lds	r12, 0x248D
    4420:	d0 90 8e 24 	lds	r13, 0x248E
    4424:	cc 0c       	add	r12, r12
    4426:	dd 1c       	adc	r13, r13
    4428:	cc 0c       	add	r12, r12
    442a:	dd 1c       	adc	r13, r13
    442c:	e6 e8       	ldi	r30, 0x86	; 134
    442e:	f4 e2       	ldi	r31, 0x24	; 36
    4430:	ce 0e       	add	r12, r30
    4432:	df 1e       	adc	r13, r31
    4434:	a5 01       	movw	r20, r10
    4436:	94 01       	movw	r18, r8
    4438:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    443c:	9b 01       	movw	r18, r22
    443e:	ac 01       	movw	r20, r24
    4440:	60 91 a3 24 	lds	r22, 0x24A3
    4444:	70 91 a4 24 	lds	r23, 0x24A4
    4448:	80 91 a5 24 	lds	r24, 0x24A5
    444c:	90 91 a6 24 	lds	r25, 0x24A6
    4450:	0e 94 44 42 	call	0x8488	; 0x8488 <__addsf3>
    4454:	d6 01       	movw	r26, r12
    4456:	1d 96       	adiw	r26, 0x0d	; 13
    4458:	6d 93       	st	X+, r22
    445a:	7d 93       	st	X+, r23
    445c:	8d 93       	st	X+, r24
    445e:	9c 93       	st	X, r25
    4460:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    4462:	b7 01       	movw	r22, r14
    4464:	c8 01       	movw	r24, r16
    4466:	0e 94 e7 42 	call	0x85ce	; 0x85ce <cos>
    446a:	00 91 8f 24 	lds	r16, 0x248F
    446e:	10 91 90 24 	lds	r17, 0x2490
    4472:	00 0f       	add	r16, r16
    4474:	11 1f       	adc	r17, r17
    4476:	00 0f       	add	r16, r16
    4478:	11 1f       	adc	r17, r17
    447a:	0a 57       	subi	r16, 0x7A	; 122
    447c:	1b 4d       	sbci	r17, 0xDB	; 219
    447e:	a5 01       	movw	r20, r10
    4480:	94 01       	movw	r18, r8
    4482:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    4486:	9b 01       	movw	r18, r22
    4488:	ac 01       	movw	r20, r24
    448a:	60 91 a7 24 	lds	r22, 0x24A7
    448e:	70 91 a8 24 	lds	r23, 0x24A8
    4492:	80 91 a9 24 	lds	r24, 0x24A9
    4496:	90 91 aa 24 	lds	r25, 0x24AA
    449a:	0e 94 44 42 	call	0x8488	; 0x8488 <__addsf3>
    449e:	f8 01       	movw	r30, r16
    44a0:	65 87       	std	Z+13, r22	; 0x0d
    44a2:	76 87       	std	Z+14, r23	; 0x0e
    44a4:	87 87       	std	Z+15, r24	; 0x0f
    44a6:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    44a8:	00 91 91 24 	lds	r16, 0x2491
    44ac:	10 91 92 24 	lds	r17, 0x2492
    44b0:	00 0f       	add	r16, r16
    44b2:	11 1f       	adc	r17, r17
    44b4:	00 0f       	add	r16, r16
    44b6:	11 1f       	adc	r17, r17
    44b8:	0a 57       	subi	r16, 0x7A	; 122
    44ba:	1b 4d       	sbci	r17, 0xDB	; 219
    44bc:	d8 01       	movw	r26, r16
    44be:	1d 96       	adiw	r26, 0x0d	; 13
    44c0:	6d 91       	ld	r22, X+
    44c2:	7d 91       	ld	r23, X+
    44c4:	8d 91       	ld	r24, X+
    44c6:	9c 91       	ld	r25, X
    44c8:	50 97       	sbiw	r26, 0x10	; 16
    44ca:	20 91 bb 24 	lds	r18, 0x24BB
    44ce:	30 91 bc 24 	lds	r19, 0x24BC
    44d2:	40 91 bd 24 	lds	r20, 0x24BD
    44d6:	50 91 be 24 	lds	r21, 0x24BE
    44da:	0e 94 44 42 	call	0x8488	; 0x8488 <__addsf3>
    44de:	f8 01       	movw	r30, r16
    44e0:	65 87       	std	Z+13, r22	; 0x0d
    44e2:	76 87       	std	Z+14, r23	; 0x0e
    44e4:	87 87       	std	Z+15, r24	; 0x0f
    44e6:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    44e8:	60 91 93 24 	lds	r22, 0x2493
    44ec:	70 91 94 24 	lds	r23, 0x2494
    44f0:	80 91 95 24 	lds	r24, 0x2495
    44f4:	90 91 96 24 	lds	r25, 0x2496
    44f8:	20 91 97 24 	lds	r18, 0x2497
    44fc:	30 91 98 24 	lds	r19, 0x2498
    4500:	40 91 99 24 	lds	r20, 0x2499
    4504:	50 91 9a 24 	lds	r21, 0x249A
    4508:	e0 90 9b 24 	lds	r14, 0x249B
    450c:	f0 90 9c 24 	lds	r15, 0x249C
    4510:	00 91 9d 24 	lds	r16, 0x249D
    4514:	10 91 9e 24 	lds	r17, 0x249E
    4518:	a0 90 b3 24 	lds	r10, 0x24B3
    451c:	b0 90 b4 24 	lds	r11, 0x24B4
    4520:	c0 90 b5 24 	lds	r12, 0x24B5
    4524:	d0 90 b6 24 	lds	r13, 0x24B6
    4528:	80 90 8b 24 	lds	r8, 0x248B
    452c:	90 90 8c 24 	lds	r9, 0x248C
    4530:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    4534:	80 91 89 24 	lds	r24, 0x2489
    4538:	90 91 8a 24 	lds	r25, 0x248A
    453c:	01 96       	adiw	r24, 0x01	; 1
    453e:	80 93 89 24 	sts	0x2489, r24
    4542:	90 93 8a 24 	sts	0x248A, r25
    4546:	20 91 89 24 	lds	r18, 0x2489
    454a:	30 91 8a 24 	lds	r19, 0x248A
    454e:	80 91 87 24 	lds	r24, 0x2487
    4552:	90 91 88 24 	lds	r25, 0x2488
    4556:	82 17       	cp	r24, r18
    4558:	93 07       	cpc	r25, r19
    455a:	0c f0       	brlt	.+2      	; 0x455e <mc_arc_blocking+0x4b4>
    455c:	35 cf       	rjmp	.-406    	; 0x43c8 <mc_arc_blocking+0x31e>
    455e:	20 e0       	ldi	r18, 0x00	; 0
    4560:	30 e0       	ldi	r19, 0x00	; 0
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    4562:	c9 01       	movw	r24, r18
    4564:	28 96       	adiw	r28, 0x08	; 8
    4566:	cd bf       	out	0x3d, r28	; 61
    4568:	de bf       	out	0x3e, r29	; 62
    456a:	cf 91       	pop	r28
    456c:	df 91       	pop	r29
    456e:	1f 91       	pop	r17
    4570:	0f 91       	pop	r16
    4572:	ff 90       	pop	r15
    4574:	ef 90       	pop	r14
    4576:	df 90       	pop	r13
    4578:	cf 90       	pop	r12
    457a:	bf 90       	pop	r11
    457c:	af 90       	pop	r10
    457e:	9f 90       	pop	r9
    4580:	8f 90       	pop	r8
    4582:	7f 90       	pop	r7
    4584:	6f 90       	pop	r6
    4586:	5f 90       	pop	r5
    4588:	4f 90       	pop	r4
    458a:	3f 90       	pop	r3
    458c:	2f 90       	pop	r2
    458e:	08 95       	ret

00004590 <mc_line_blocking>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line_blocking(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    4590:	2f 92       	push	r2
    4592:	3f 92       	push	r3
    4594:	4f 92       	push	r4
    4596:	5f 92       	push	r5
    4598:	6f 92       	push	r6
    459a:	7f 92       	push	r7
    459c:	8f 92       	push	r8
    459e:	9f 92       	push	r9
    45a0:	af 92       	push	r10
    45a2:	bf 92       	push	r11
    45a4:	cf 92       	push	r12
    45a6:	df 92       	push	r13
    45a8:	ef 92       	push	r14
    45aa:	ff 92       	push	r15
    45ac:	0f 93       	push	r16
    45ae:	1f 93       	push	r17
    45b0:	df 93       	push	r29
    45b2:	cf 93       	push	r28
    45b4:	cd b7       	in	r28, 0x3d	; 61
    45b6:	de b7       	in	r29, 0x3e	; 62
    45b8:	6c 97       	sbiw	r28, 0x1c	; 28
    45ba:	cd bf       	out	0x3d, r28	; 61
    45bc:	de bf       	out	0x3e, r29	; 62
    45be:	2d 8b       	std	Y+21, r18	; 0x15
    45c0:	3e 8b       	std	Y+22, r19	; 0x16
    45c2:	4f 8b       	std	Y+23, r20	; 0x17
    45c4:	58 8f       	std	Y+24, r21	; 0x18
    45c6:	a9 8e       	std	Y+25, r10	; 0x19
    45c8:	ba 8e       	std	Y+26, r11	; 0x1a
    45ca:	cb 8e       	std	Y+27, r12	; 0x1b
    45cc:	dc 8e       	std	Y+28, r13	; 0x1c
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    45ce:	20 91 37 24 	lds	r18, 0x2437
    45d2:	30 91 38 24 	lds	r19, 0x2438
    45d6:	40 91 39 24 	lds	r20, 0x2439
    45da:	50 91 3a 24 	lds	r21, 0x243A
    45de:	29 8b       	std	Y+17, r18	; 0x11
    45e0:	3a 8b       	std	Y+18, r19	; 0x12
    45e2:	4b 8b       	std	Y+19, r20	; 0x13
    45e4:	5c 8b       	std	Y+20, r21	; 0x14
    45e6:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    45ea:	0e 94 75 45 	call	0x8aea	; 0x8aea <lround>
    45ee:	2b 01       	movw	r4, r22
    45f0:	3c 01       	movw	r6, r24
    45f2:	40 92 8d 21 	sts	0x218D, r4
    45f6:	50 92 8e 21 	sts	0x218E, r5
    45fa:	60 92 8f 21 	sts	0x218F, r6
    45fe:	70 92 90 21 	sts	0x2190, r7
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    4602:	80 91 4f 24 	lds	r24, 0x244F
    4606:	90 91 50 24 	lds	r25, 0x2450
    460a:	a0 91 51 24 	lds	r26, 0x2451
    460e:	b0 91 52 24 	lds	r27, 0x2452
    4612:	8d 87       	std	Y+13, r24	; 0x0d
    4614:	9e 87       	std	Y+14, r25	; 0x0e
    4616:	af 87       	std	Y+15, r26	; 0x0f
    4618:	b8 8b       	std	Y+16, r27	; 0x10
    461a:	6d 89       	ldd	r22, Y+21	; 0x15
    461c:	7e 89       	ldd	r23, Y+22	; 0x16
    461e:	8f 89       	ldd	r24, Y+23	; 0x17
    4620:	98 8d       	ldd	r25, Y+24	; 0x18
    4622:	2d 85       	ldd	r18, Y+13	; 0x0d
    4624:	3e 85       	ldd	r19, Y+14	; 0x0e
    4626:	4f 85       	ldd	r20, Y+15	; 0x0f
    4628:	58 89       	ldd	r21, Y+16	; 0x10
    462a:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    462e:	0e 94 75 45 	call	0x8aea	; 0x8aea <lround>
    4632:	5b 01       	movw	r10, r22
    4634:	6c 01       	movw	r12, r24
    4636:	a0 92 91 21 	sts	0x2191, r10
    463a:	b0 92 92 21 	sts	0x2192, r11
    463e:	c0 92 93 21 	sts	0x2193, r12
    4642:	d0 92 94 21 	sts	0x2194, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    4646:	20 91 67 24 	lds	r18, 0x2467
    464a:	30 91 68 24 	lds	r19, 0x2468
    464e:	40 91 69 24 	lds	r20, 0x2469
    4652:	50 91 6a 24 	lds	r21, 0x246A
    4656:	29 87       	std	Y+9, r18	; 0x09
    4658:	3a 87       	std	Y+10, r19	; 0x0a
    465a:	4b 87       	std	Y+11, r20	; 0x0b
    465c:	5c 87       	std	Y+12, r21	; 0x0c
    465e:	c8 01       	movw	r24, r16
    4660:	b7 01       	movw	r22, r14
    4662:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    4666:	0e 94 75 45 	call	0x8aea	; 0x8aea <lround>
    466a:	9b 01       	movw	r18, r22
    466c:	ac 01       	movw	r20, r24
    466e:	20 93 95 21 	sts	0x2195, r18
    4672:	30 93 96 21 	sts	0x2196, r19
    4676:	40 93 97 21 	sts	0x2197, r20
    467a:	50 93 98 21 	sts	0x2198, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    467e:	80 91 81 21 	lds	r24, 0x2181
    4682:	90 91 82 21 	lds	r25, 0x2182
    4686:	a0 91 83 21 	lds	r26, 0x2183
    468a:	b0 91 84 21 	lds	r27, 0x2184
    468e:	83 01       	movw	r16, r6
    4690:	72 01       	movw	r14, r4
    4692:	e8 1a       	sub	r14, r24
    4694:	f9 0a       	sbc	r15, r25
    4696:	0a 0b       	sbc	r16, r26
    4698:	1b 0b       	sbc	r17, r27
    469a:	ed 82       	std	Y+5, r14	; 0x05
    469c:	fe 82       	std	Y+6, r15	; 0x06
    469e:	0f 83       	std	Y+7, r16	; 0x07
    46a0:	18 87       	std	Y+8, r17	; 0x08
    46a2:	e0 92 99 21 	sts	0x2199, r14
    46a6:	f0 92 9a 21 	sts	0x219A, r15
    46aa:	00 93 9b 21 	sts	0x219B, r16
    46ae:	10 93 9c 21 	sts	0x219C, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    46b2:	80 91 85 21 	lds	r24, 0x2185
    46b6:	90 91 86 21 	lds	r25, 0x2186
    46ba:	a0 91 87 21 	lds	r26, 0x2187
    46be:	b0 91 88 21 	lds	r27, 0x2188
    46c2:	86 01       	movw	r16, r12
    46c4:	75 01       	movw	r14, r10
    46c6:	e8 1a       	sub	r14, r24
    46c8:	f9 0a       	sbc	r15, r25
    46ca:	0a 0b       	sbc	r16, r26
    46cc:	1b 0b       	sbc	r17, r27
    46ce:	e9 82       	std	Y+1, r14	; 0x01
    46d0:	fa 82       	std	Y+2, r15	; 0x02
    46d2:	0b 83       	std	Y+3, r16	; 0x03
    46d4:	1c 83       	std	Y+4, r17	; 0x04
    46d6:	e0 92 9d 21 	sts	0x219D, r14
    46da:	f0 92 9e 21 	sts	0x219E, r15
    46de:	00 93 9f 21 	sts	0x219F, r16
    46e2:	10 93 a0 21 	sts	0x21A0, r17
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    46e6:	80 91 89 21 	lds	r24, 0x2189
    46ea:	90 91 8a 21 	lds	r25, 0x218A
    46ee:	a0 91 8b 21 	lds	r26, 0x218B
    46f2:	b0 91 8c 21 	lds	r27, 0x218C
    46f6:	19 01       	movw	r2, r18
    46f8:	2a 01       	movw	r4, r20
    46fa:	28 1a       	sub	r2, r24
    46fc:	39 0a       	sbc	r3, r25
    46fe:	4a 0a       	sbc	r4, r26
    4700:	5b 0a       	sbc	r5, r27
    4702:	20 92 a1 21 	sts	0x21A1, r2
    4706:	30 92 a2 21 	sts	0x21A2, r3
    470a:	40 92 a3 21 	sts	0x21A3, r4
    470e:	50 92 a4 21 	sts	0x21A4, r5

	if (invert_feed_rate) {
    4712:	89 28       	or	r8, r9
    4714:	59 f0       	breq	.+22     	; 0x472c <mc_line_blocking+0x19c>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    4716:	60 ec       	ldi	r22, 0xC0	; 192
    4718:	71 ee       	ldi	r23, 0xE1	; 225
    471a:	84 e6       	ldi	r24, 0x64	; 100
    471c:	9c e4       	ldi	r25, 0x4C	; 76
    471e:	29 8d       	ldd	r18, Y+25	; 0x19
    4720:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4722:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4724:	5c 8d       	ldd	r21, Y+28	; 0x1c
    4726:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    472a:	4e c0       	rjmp	.+156    	; 0x47c8 <mc_line_blocking+0x238>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    472c:	6d 81       	ldd	r22, Y+5	; 0x05
    472e:	7e 81       	ldd	r23, Y+6	; 0x06
    4730:	8f 81       	ldd	r24, Y+7	; 0x07
    4732:	98 85       	ldd	r25, Y+8	; 0x08
    4734:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    4738:	29 89       	ldd	r18, Y+17	; 0x11
    473a:	3a 89       	ldd	r19, Y+18	; 0x12
    473c:	4b 89       	ldd	r20, Y+19	; 0x13
    473e:	5c 89       	ldd	r21, Y+20	; 0x14
    4740:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    4744:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <square>
    4748:	3b 01       	movw	r6, r22
    474a:	4c 01       	movw	r8, r24
    474c:	69 81       	ldd	r22, Y+1	; 0x01
    474e:	7a 81       	ldd	r23, Y+2	; 0x02
    4750:	8b 81       	ldd	r24, Y+3	; 0x03
    4752:	9c 81       	ldd	r25, Y+4	; 0x04
    4754:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    4758:	2d 85       	ldd	r18, Y+13	; 0x0d
    475a:	3e 85       	ldd	r19, Y+14	; 0x0e
    475c:	4f 85       	ldd	r20, Y+15	; 0x0f
    475e:	58 89       	ldd	r21, Y+16	; 0x10
    4760:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    4764:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <square>
    4768:	5b 01       	movw	r10, r22
    476a:	6c 01       	movw	r12, r24
    476c:	c2 01       	movw	r24, r4
    476e:	b1 01       	movw	r22, r2
    4770:	0e 94 85 43 	call	0x870a	; 0x870a <__floatsisf>
    4774:	29 85       	ldd	r18, Y+9	; 0x09
    4776:	3a 85       	ldd	r19, Y+10	; 0x0a
    4778:	4b 85       	ldd	r20, Y+11	; 0x0b
    477a:	5c 85       	ldd	r21, Y+12	; 0x0c
    477c:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    4780:	0e 94 50 46 	call	0x8ca0	; 0x8ca0 <square>
    4784:	7b 01       	movw	r14, r22
    4786:	8c 01       	movw	r16, r24
    4788:	c4 01       	movw	r24, r8
    478a:	b3 01       	movw	r22, r6
    478c:	a6 01       	movw	r20, r12
    478e:	95 01       	movw	r18, r10
    4790:	0e 94 44 42 	call	0x8488	; 0x8488 <__addsf3>
    4794:	a8 01       	movw	r20, r16
    4796:	97 01       	movw	r18, r14
    4798:	0e 94 44 42 	call	0x8488	; 0x8488 <__addsf3>
    479c:	0e 94 12 46 	call	0x8c24	; 0x8c24 <sqrt>
    47a0:	60 93 a9 21 	sts	0x21A9, r22
    47a4:	70 93 aa 21 	sts	0x21AA, r23
    47a8:	80 93 ab 21 	sts	0x21AB, r24
    47ac:	90 93 ac 21 	sts	0x21AC, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    47b0:	29 8d       	ldd	r18, Y+25	; 0x19
    47b2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    47b4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    47b6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    47b8:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <__divsf3>
    47bc:	20 e0       	ldi	r18, 0x00	; 0
    47be:	34 e2       	ldi	r19, 0x24	; 36
    47c0:	44 e7       	ldi	r20, 0x74	; 116
    47c2:	59 e4       	ldi	r21, 0x49	; 73
    47c4:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    47c8:	0e 94 75 45 	call	0x8aea	; 0x8aea <lround>
    47cc:	60 93 a5 21 	sts	0x21A5, r22
    47d0:	70 93 a6 21 	sts	0x21A6, r23
    47d4:	80 93 a7 21 	sts	0x21A7, r24
    47d8:	90 93 a8 21 	sts	0x21A8, r25
	}
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    47dc:	a0 90 a5 21 	lds	r10, 0x21A5
    47e0:	b0 90 a6 21 	lds	r11, 0x21A6
    47e4:	c0 90 a7 21 	lds	r12, 0x21A7
    47e8:	d0 90 a8 21 	lds	r13, 0x21A8
    47ec:	6d 81       	ldd	r22, Y+5	; 0x05
    47ee:	7e 81       	ldd	r23, Y+6	; 0x06
    47f0:	8f 81       	ldd	r24, Y+7	; 0x07
    47f2:	98 85       	ldd	r25, Y+8	; 0x08
    47f4:	29 81       	ldd	r18, Y+1	; 0x01
    47f6:	3a 81       	ldd	r19, Y+2	; 0x02
    47f8:	4b 81       	ldd	r20, Y+3	; 0x03
    47fa:	5c 81       	ldd	r21, Y+4	; 0x04
    47fc:	82 01       	movw	r16, r4
    47fe:	71 01       	movw	r14, r2
    4800:	0e 94 4d 31 	call	0x629a	; 0x629a <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    4804:	e1 e8       	ldi	r30, 0x81	; 129
    4806:	f1 e2       	ldi	r31, 0x21	; 33
    4808:	df 01       	movw	r26, r30
    480a:	1c 96       	adiw	r26, 0x0c	; 12
    480c:	8c e0       	ldi	r24, 0x0C	; 12
    480e:	0d 90       	ld	r0, X+
    4810:	01 92       	st	Z+, r0
    4812:	81 50       	subi	r24, 0x01	; 1
    4814:	e1 f7       	brne	.-8      	; 0x480e <mc_line_blocking+0x27e>
	return (TG_OK);
}
    4816:	80 e0       	ldi	r24, 0x00	; 0
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	6c 96       	adiw	r28, 0x1c	; 28
    481c:	cd bf       	out	0x3d, r28	; 61
    481e:	de bf       	out	0x3e, r29	; 62
    4820:	cf 91       	pop	r28
    4822:	df 91       	pop	r29
    4824:	1f 91       	pop	r17
    4826:	0f 91       	pop	r16
    4828:	ff 90       	pop	r15
    482a:	ef 90       	pop	r14
    482c:	df 90       	pop	r13
    482e:	cf 90       	pop	r12
    4830:	bf 90       	pop	r11
    4832:	af 90       	pop	r10
    4834:	9f 90       	pop	r9
    4836:	8f 90       	pop	r8
    4838:	7f 90       	pop	r7
    483a:	6f 90       	pop	r6
    483c:	5f 90       	pop	r5
    483e:	4f 90       	pop	r4
    4840:	3f 90       	pop	r3
    4842:	2f 90       	pop	r2
    4844:	08 95       	ret

00004846 <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    4846:	e0 e6       	ldi	r30, 0x60	; 96
    4848:	f6 e0       	ldi	r31, 0x06	; 6
    484a:	80 e4       	ldi	r24, 0x40	; 64
    484c:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    484e:	80 e8       	ldi	r24, 0x80	; 128
    4850:	81 83       	std	Z+1, r24	; 0x01
}
    4852:	08 95       	ret

00004854 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    4854:	97 fd       	sbrc	r25, 7
    4856:	05 c0       	rjmp	.+10     	; 0x4862 <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    4858:	80 e8       	ldi	r24, 0x80	; 128
    485a:	e0 e6       	ldi	r30, 0x60	; 96
    485c:	f6 e0       	ldi	r31, 0x06	; 6
    485e:	85 83       	std	Z+5, r24	; 0x05
    4860:	04 c0       	rjmp	.+8      	; 0x486a <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    4862:	80 e8       	ldi	r24, 0x80	; 128
    4864:	e0 e6       	ldi	r30, 0x60	; 96
    4866:	f6 e0       	ldi	r31, 0x06	; 6
    4868:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    486a:	80 e4       	ldi	r24, 0x40	; 64
    486c:	e0 e6       	ldi	r30, 0x60	; 96
    486e:	f6 e0       	ldi	r31, 0x06	; 6
    4870:	85 83       	std	Z+5, r24	; 0x05
}
    4872:	08 95       	ret

00004874 <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    4874:	80 e4       	ldi	r24, 0x40	; 64
    4876:	e0 e6       	ldi	r30, 0x60	; 96
    4878:	f6 e0       	ldi	r31, 0x06	; 6
    487a:	86 83       	std	Z+6, r24	; 0x06
}
    487c:	08 95       	ret

0000487e <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    487e:	cf 93       	push	r28
    4880:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    4882:	10 92 d3 23 	sts	0x23D3, r1
	ax.exec_mutex = FALSE;
    4886:	10 92 d2 23 	sts	0x23D2, r1

	ax.a[X].port = &X_MOTOR_PORT;				// bind PORTs to structs
    488a:	80 e0       	ldi	r24, 0x00	; 0
    488c:	96 e0       	ldi	r25, 0x06	; 6
    488e:	80 93 e2 23 	sts	0x23E2, r24
    4892:	90 93 e3 23 	sts	0x23E3, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    4896:	80 ea       	ldi	r24, 0xA0	; 160
    4898:	96 e0       	ldi	r25, 0x06	; 6
    489a:	80 93 f2 23 	sts	0x23F2, r24
    489e:	90 93 f3 23 	sts	0x23F3, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    48a2:	80 e8       	ldi	r24, 0x80	; 128
    48a4:	96 e0       	ldi	r25, 0x06	; 6
    48a6:	80 93 02 24 	sts	0x2402, r24
    48aa:	90 93 03 24 	sts	0x2403, r25
	ax.a[A].port = &A_MOTOR_PORT;
    48ae:	80 e6       	ldi	r24, 0x60	; 96
    48b0:	96 e0       	ldi	r25, 0x06	; 6
    48b2:	80 93 12 24 	sts	0x2412, r24
    48b6:	90 93 13 24 	sts	0x2413, r25

	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
    48ba:	80 e0       	ldi	r24, 0x00	; 0
    48bc:	98 e0       	ldi	r25, 0x08	; 8
    48be:	80 93 e4 23 	sts	0x23E4, r24
    48c2:	90 93 e5 23 	sts	0x23E5, r25
	ax.a[Y].timer = &Y_TIMER;
    48c6:	80 e0       	ldi	r24, 0x00	; 0
    48c8:	99 e0       	ldi	r25, 0x09	; 9
    48ca:	80 93 f4 23 	sts	0x23F4, r24
    48ce:	90 93 f5 23 	sts	0x23F5, r25
	ax.a[Z].timer = &Z_TIMER;
    48d2:	80 e0       	ldi	r24, 0x00	; 0
    48d4:	9a e0       	ldi	r25, 0x0A	; 10
    48d6:	80 93 04 24 	sts	0x2404, r24
    48da:	90 93 05 24 	sts	0x2405, r25
	ax.a[A].timer = &A_TIMER;
    48de:	80 e0       	ldi	r24, 0x00	; 0
    48e0:	9b e0       	ldi	r25, 0x0B	; 11
    48e2:	80 93 14 24 	sts	0x2414, r24
    48e6:	90 93 15 24 	sts	0x2415, r25
    48ea:	c6 e2       	ldi	r28, 0x26	; 38
    48ec:	d4 e2       	ldi	r29, 0x24	; 36
    48ee:	a0 ee       	ldi	r26, 0xE0	; 224
    48f0:	b3 e2       	ldi	r27, 0x23	; 35

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    48f2:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    48f4:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    48f6:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    48f8:	88 81       	ld	r24, Y
    48fa:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    48fc:	12 96       	adiw	r26, 0x02	; 2
    48fe:	ed 91       	ld	r30, X+
    4900:	fc 91       	ld	r31, X
    4902:	13 97       	sbiw	r26, 0x03	; 3
    4904:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    4906:	12 96       	adiw	r26, 0x02	; 2
    4908:	ed 91       	ld	r30, X+
    490a:	fc 91       	ld	r31, X
    490c:	13 97       	sbiw	r26, 0x03	; 3
    490e:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
    4910:	12 96       	adiw	r26, 0x02	; 2
    4912:	ed 91       	ld	r30, X+
    4914:	fc 91       	ld	r31, X
    4916:	13 97       	sbiw	r26, 0x03	; 3
    4918:	84 81       	ldd	r24, Z+4	; 0x04
    491a:	88 61       	ori	r24, 0x18	; 24
    491c:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    491e:	12 96       	adiw	r26, 0x02	; 2
    4920:	ed 91       	ld	r30, X+
    4922:	fc 91       	ld	r31, X
    4924:	13 97       	sbiw	r26, 0x03	; 3
    4926:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    4928:	14 96       	adiw	r26, 0x04	; 4
    492a:	ed 91       	ld	r30, X+
    492c:	fc 91       	ld	r31, X
    492e:	15 97       	sbiw	r26, 0x05	; 5
    4930:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    4932:	14 96       	adiw	r26, 0x04	; 4
    4934:	ed 91       	ld	r30, X+
    4936:	fc 91       	ld	r31, X
    4938:	15 97       	sbiw	r26, 0x05	; 5
    493a:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    493c:	14 96       	adiw	r26, 0x04	; 4
    493e:	ed 91       	ld	r30, X+
    4940:	fc 91       	ld	r31, X
    4942:	15 97       	sbiw	r26, 0x05	; 5
    4944:	96 83       	std	Z+6, r25	; 0x06
    4946:	68 96       	adiw	r28, 0x18	; 24
    4948:	50 96       	adiw	r26, 0x10	; 16
	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    494a:	84 e2       	ldi	r24, 0x24	; 36
    494c:	c6 38       	cpi	r28, 0x86	; 134
    494e:	d8 07       	cpc	r29, r24
    4950:	99 f6       	brne	.-90     	; 0x48f8 <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    4952:	df 91       	pop	r29
    4954:	cf 91       	pop	r28
    4956:	08 95       	ret

00004958 <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    4958:	e8 2f       	mov	r30, r24
    495a:	f0 e0       	ldi	r31, 0x00	; 0
    495c:	84 e0       	ldi	r24, 0x04	; 4
    495e:	ee 0f       	add	r30, r30
    4960:	ff 1f       	adc	r31, r31
    4962:	8a 95       	dec	r24
    4964:	e1 f7       	brne	.-8      	; 0x495e <st_set_polarity+0x6>
    4966:	ee 52       	subi	r30, 0x2E	; 46
    4968:	fc 4d       	sbci	r31, 0xDC	; 220
    496a:	66 87       	std	Z+14, r22	; 0x0e
}
    496c:	08 95       	ret

0000496e <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X].step_counter = 0x00001000;
    496e:	26 ed       	ldi	r18, 0xD6	; 214
    4970:	33 e2       	ldi	r19, 0x23	; 35
    4972:	80 e0       	ldi	r24, 0x00	; 0
    4974:	90 e1       	ldi	r25, 0x10	; 16
    4976:	a0 e0       	ldi	r26, 0x00	; 0
    4978:	b0 e0       	ldi	r27, 0x00	; 0
    497a:	80 93 d6 23 	sts	0x23D6, r24
    497e:	90 93 d7 23 	sts	0x23D7, r25
    4982:	a0 93 d8 23 	sts	0x23D8, r26
    4986:	b0 93 d9 23 	sts	0x23D9, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    498a:	e0 91 e4 23 	lds	r30, 0x23E4
    498e:	f0 91 e5 23 	lds	r31, 0x23E5
    4992:	80 e0       	ldi	r24, 0x00	; 0
    4994:	90 e1       	ldi	r25, 0x10	; 16
    4996:	86 a3       	std	Z+38, r24	; 0x26
    4998:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    499a:	41 e0       	ldi	r20, 0x01	; 1
    499c:	40 83       	st	Z, r20

	ax.a[Y].step_counter = 0x00000800;
    499e:	80 e0       	ldi	r24, 0x00	; 0
    49a0:	98 e0       	ldi	r25, 0x08	; 8
    49a2:	a0 e0       	ldi	r26, 0x00	; 0
    49a4:	b0 e0       	ldi	r27, 0x00	; 0
    49a6:	80 93 e6 23 	sts	0x23E6, r24
    49aa:	90 93 e7 23 	sts	0x23E7, r25
    49ae:	a0 93 e8 23 	sts	0x23E8, r26
    49b2:	b0 93 e9 23 	sts	0x23E9, r27
	ax.a[Y].timer->PER = 0x2000;
    49b6:	e0 91 f4 23 	lds	r30, 0x23F4
    49ba:	f0 91 f5 23 	lds	r31, 0x23F5
    49be:	80 e0       	ldi	r24, 0x00	; 0
    49c0:	90 e2       	ldi	r25, 0x20	; 32
    49c2:	86 a3       	std	Z+38, r24	; 0x26
    49c4:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    49c6:	40 83       	st	Z, r20

	ax.a[Z].step_counter = 0x00000600;
    49c8:	80 e0       	ldi	r24, 0x00	; 0
    49ca:	96 e0       	ldi	r25, 0x06	; 6
    49cc:	a0 e0       	ldi	r26, 0x00	; 0
    49ce:	b0 e0       	ldi	r27, 0x00	; 0
    49d0:	80 93 f6 23 	sts	0x23F6, r24
    49d4:	90 93 f7 23 	sts	0x23F7, r25
    49d8:	a0 93 f8 23 	sts	0x23F8, r26
    49dc:	b0 93 f9 23 	sts	0x23F9, r27
	ax.a[Z].timer->PER = 0x3000;
    49e0:	e0 91 04 24 	lds	r30, 0x2404
    49e4:	f0 91 05 24 	lds	r31, 0x2405
    49e8:	80 e0       	ldi	r24, 0x00	; 0
    49ea:	90 e3       	ldi	r25, 0x30	; 48
    49ec:	86 a3       	std	Z+38, r24	; 0x26
    49ee:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    49f0:	40 83       	st	Z, r20

	ax.a[A].step_counter = 0x00000400;
    49f2:	80 e0       	ldi	r24, 0x00	; 0
    49f4:	94 e0       	ldi	r25, 0x04	; 4
    49f6:	a0 e0       	ldi	r26, 0x00	; 0
    49f8:	b0 e0       	ldi	r27, 0x00	; 0
    49fa:	80 93 06 24 	sts	0x2406, r24
    49fe:	90 93 07 24 	sts	0x2407, r25
    4a02:	a0 93 08 24 	sts	0x2408, r26
    4a06:	b0 93 09 24 	sts	0x2409, r27
	ax.a[A].timer->PER = 0x4000;
    4a0a:	d9 01       	movw	r26, r18
    4a0c:	de 96       	adiw	r26, 0x3e	; 62
    4a0e:	ed 91       	ld	r30, X+
    4a10:	fc 91       	ld	r31, X
    4a12:	df 97       	sbiw	r26, 0x3f	; 63
    4a14:	80 e0       	ldi	r24, 0x00	; 0
    4a16:	90 e4       	ldi	r25, 0x40	; 64
    4a18:	86 a3       	std	Z+38, r24	; 0x26
    4a1a:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    4a1c:	40 83       	st	Z, r20

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    4a1e:	23 50       	subi	r18, 0x03	; 3
    4a20:	30 40       	sbci	r19, 0x00	; 0
    4a22:	f9 01       	movw	r30, r18
    4a24:	80 81       	ld	r24, Z
    4a26:	8f 60       	ori	r24, 0x0F	; 15
    4a28:	80 83       	st	Z, r24
}
    4a2a:	08 95       	ret

00004a2c <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    4a2c:	f8 94       	cli
	mv_flush();									// flush the move buffer
    4a2e:	0e 94 42 31 	call	0x6284	; 0x6284 <mv_flush>
	sei();
    4a32:	78 94       	sei
}
    4a34:	08 95       	ret

00004a36 <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    4a36:	f8 94       	cli
	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    4a38:	e0 91 e4 23 	lds	r30, 0x23E4
    4a3c:	f0 91 e5 23 	lds	r31, 0x23E5
    4a40:	10 82       	st	Z, r1
    4a42:	e0 91 f4 23 	lds	r30, 0x23F4
    4a46:	f0 91 f5 23 	lds	r31, 0x23F5
    4a4a:	10 82       	st	Z, r1
    4a4c:	e0 91 04 24 	lds	r30, 0x2404
    4a50:	f0 91 05 24 	lds	r31, 0x2405
    4a54:	10 82       	st	Z, r1
    4a56:	e0 91 14 24 	lds	r30, 0x2414
    4a5a:	f0 91 15 24 	lds	r31, 0x2415
    4a5e:	10 82       	st	Z, r1
	}	
	mv_flush();									// flush the move buffer
    4a60:	0e 94 42 31 	call	0x6284	; 0x6284 <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    4a64:	10 92 d3 23 	sts	0x23D3, r1
	sei();
    4a68:	78 94       	sei
}
    4a6a:	08 95       	ret

00004a6c <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    4a6c:	cf 92       	push	r12
    4a6e:	df 92       	push	r13
    4a70:	ef 92       	push	r14
    4a72:	ff 92       	push	r15
    4a74:	0f 93       	push	r16
    4a76:	1f 93       	push	r17
    4a78:	cf 93       	push	r28
    4a7a:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    4a7c:	80 91 d2 23 	lds	r24, 0x23D2
    4a80:	88 23       	and	r24, r24
    4a82:	09 f0       	breq	.+2      	; 0x4a86 <st_execute_move+0x1a>
    4a84:	32 c1       	rjmp	.+612    	; 0x4cea <st_execute_move+0x27e>
		return;
	}
	ax.exec_mutex = TRUE;
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	80 93 d2 23 	sts	0x23D2, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    4a8c:	80 91 d3 23 	lds	r24, 0x23D3
    4a90:	88 23       	and	r24, r24
    4a92:	09 f0       	breq	.+2      	; 0x4a96 <st_execute_move+0x2a>
    4a94:	28 c1       	rjmp	.+592    	; 0x4ce6 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    4a96:	0e 94 ff 30 	call	0x61fe	; 0x61fe <mv_dequeue_move_buffer>
    4a9a:	80 93 d4 23 	sts	0x23D4, r24
    4a9e:	90 93 d5 23 	sts	0x23D5, r25
    4aa2:	89 2b       	or	r24, r25
    4aa4:	09 f4       	brne	.+2      	; 0x4aa8 <st_execute_move+0x3c>
    4aa6:	1f c1       	rjmp	.+574    	; 0x4ce6 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;
		return;
    4aa8:	66 ed       	ldi	r22, 0xD6	; 214
    4aaa:	73 e2       	ldi	r23, 0x23	; 35
    4aac:	00 e0       	ldi	r16, 0x00	; 0
    4aae:	10 e0       	ldi	r17, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4ab0:	94 e0       	ldi	r25, 0x04	; 4
    4ab2:	c9 2e       	mov	r12, r25
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4ab4:	82 e0       	ldi	r24, 0x02	; 2
    4ab6:	d8 2e       	mov	r13, r24
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
		ax.exec_mutex = FALSE;
		return;
    4ab8:	f0 2e       	mov	r15, r16
    4aba:	e1 2e       	mov	r14, r17
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    4abc:	db 01       	movw	r26, r22
    4abe:	1e 96       	adiw	r26, 0x0e	; 14
    4ac0:	ed 91       	ld	r30, X+
    4ac2:	fc 91       	ld	r31, X
    4ac4:	1f 97       	sbiw	r26, 0x0f	; 15
    4ac6:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    4ac8:	c0 91 d4 23 	lds	r28, 0x23D4
    4acc:	d0 91 d5 23 	lds	r29, 0x23D5
    4ad0:	c8 01       	movw	r24, r16
    4ad2:	fc 01       	movw	r30, r24
    4ad4:	b3 e0       	ldi	r27, 0x03	; 3
    4ad6:	ee 0f       	add	r30, r30
    4ad8:	ff 1f       	adc	r31, r31
    4ada:	ba 95       	dec	r27
    4adc:	e1 f7       	brne	.-8      	; 0x4ad6 <st_execute_move+0x6a>
    4ade:	88 0f       	add	r24, r24
    4ae0:	99 1f       	adc	r25, r25
    4ae2:	e8 0f       	add	r30, r24
    4ae4:	f9 1f       	adc	r31, r25
    4ae6:	ec 0f       	add	r30, r28
    4ae8:	fd 1f       	adc	r31, r29
    4aea:	80 81       	ld	r24, Z
    4aec:	91 81       	ldd	r25, Z+1	; 0x01
    4aee:	a2 81       	ldd	r26, Z+2	; 0x02
    4af0:	b3 81       	ldd	r27, Z+3	; 0x03
    4af2:	00 97       	sbiw	r24, 0x00	; 0
    4af4:	a1 05       	cpc	r26, r1
    4af6:	b1 05       	cpc	r27, r1
    4af8:	09 f4       	brne	.+2      	; 0x4afc <st_execute_move+0x90>
    4afa:	a6 c0       	rjmp	.+332    	; 0x4c48 <st_execute_move+0x1dc>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    4afc:	c8 01       	movw	r24, r16
    4afe:	9c 01       	movw	r18, r24
    4b00:	f3 e0       	ldi	r31, 0x03	; 3
    4b02:	22 0f       	add	r18, r18
    4b04:	33 1f       	adc	r19, r19
    4b06:	fa 95       	dec	r31
    4b08:	e1 f7       	brne	.-8      	; 0x4b02 <st_execute_move+0x96>
    4b0a:	88 0f       	add	r24, r24
    4b0c:	99 1f       	adc	r25, r25
    4b0e:	28 0f       	add	r18, r24
    4b10:	39 1f       	adc	r19, r25
    4b12:	c2 0f       	add	r28, r18
    4b14:	d3 1f       	adc	r29, r19
    4b16:	89 85       	ldd	r24, Y+9	; 0x09
    4b18:	fb 01       	movw	r30, r22
    4b1a:	83 87       	std	Z+11, r24	; 0x0b

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4b1c:	e0 91 d4 23 	lds	r30, 0x23D4
    4b20:	f0 91 d5 23 	lds	r31, 0x23D5
    4b24:	c8 01       	movw	r24, r16
    4b26:	9c 01       	movw	r18, r24
    4b28:	53 e0       	ldi	r21, 0x03	; 3
    4b2a:	22 0f       	add	r18, r18
    4b2c:	33 1f       	adc	r19, r19
    4b2e:	5a 95       	dec	r21
    4b30:	e1 f7       	brne	.-8      	; 0x4b2a <st_execute_move+0xbe>
    4b32:	88 0f       	add	r24, r24
    4b34:	99 1f       	adc	r25, r25
    4b36:	28 0f       	add	r18, r24
    4b38:	39 1f       	adc	r19, r25
    4b3a:	e2 0f       	add	r30, r18
    4b3c:	f3 1f       	adc	r31, r19
    4b3e:	90 85       	ldd	r25, Z+8	; 0x08
    4b40:	db 01       	movw	r26, r22
    4b42:	1a 96       	adiw	r26, 0x0a	; 10
    4b44:	8c 91       	ld	r24, X
    4b46:	1a 97       	sbiw	r26, 0x0a	; 10
    4b48:	1c 96       	adiw	r26, 0x0c	; 12
    4b4a:	ed 91       	ld	r30, X+
    4b4c:	fc 91       	ld	r31, X
    4b4e:	1d 97       	sbiw	r26, 0x0d	; 13
    4b50:	98 17       	cp	r25, r24
    4b52:	11 f0       	breq	.+4      	; 0x4b58 <st_execute_move+0xec>
    4b54:	d5 82       	std	Z+5, r13	; 0x05
    4b56:	01 c0       	rjmp	.+2      	; 0x4b5a <st_execute_move+0xee>
    4b58:	d6 82       	std	Z+6, r13	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    4b5a:	40 91 d4 23 	lds	r20, 0x23D4
    4b5e:	50 91 d5 23 	lds	r21, 0x23D5
    4b62:	8f 2d       	mov	r24, r15
    4b64:	9e 2d       	mov	r25, r14
    4b66:	fc 01       	movw	r30, r24
    4b68:	33 e0       	ldi	r19, 0x03	; 3
    4b6a:	ee 0f       	add	r30, r30
    4b6c:	ff 1f       	adc	r31, r31
    4b6e:	3a 95       	dec	r19
    4b70:	e1 f7       	brne	.-8      	; 0x4b6a <st_execute_move+0xfe>
    4b72:	88 0f       	add	r24, r24
    4b74:	99 1f       	adc	r25, r25
    4b76:	e8 0f       	add	r30, r24
    4b78:	f9 1f       	adc	r31, r25
    4b7a:	e4 0f       	add	r30, r20
    4b7c:	f5 1f       	adc	r31, r21
    4b7e:	80 81       	ld	r24, Z
    4b80:	91 81       	ldd	r25, Z+1	; 0x01
    4b82:	a2 81       	ldd	r26, Z+2	; 0x02
    4b84:	b3 81       	ldd	r27, Z+3	; 0x03
    4b86:	fb 01       	movw	r30, r22
    4b88:	80 83       	st	Z, r24
    4b8a:	91 83       	std	Z+1, r25	; 0x01
    4b8c:	a2 83       	std	Z+2, r26	; 0x02
    4b8e:	b3 83       	std	Z+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    4b90:	8f 2d       	mov	r24, r15
    4b92:	9e 2d       	mov	r25, r14
    4b94:	fc 01       	movw	r30, r24
    4b96:	b3 e0       	ldi	r27, 0x03	; 3
    4b98:	ee 0f       	add	r30, r30
    4b9a:	ff 1f       	adc	r31, r31
    4b9c:	ba 95       	dec	r27
    4b9e:	e1 f7       	brne	.-8      	; 0x4b98 <st_execute_move+0x12c>
    4ba0:	88 0f       	add	r24, r24
    4ba2:	99 1f       	adc	r25, r25
    4ba4:	e8 0f       	add	r30, r24
    4ba6:	f9 1f       	adc	r31, r25
    4ba8:	e4 0f       	add	r30, r20
    4baa:	f5 1f       	adc	r31, r21
    4bac:	86 81       	ldd	r24, Z+6	; 0x06
    4bae:	97 81       	ldd	r25, Z+7	; 0x07
    4bb0:	db 01       	movw	r26, r22
    4bb2:	16 96       	adiw	r26, 0x06	; 6
    4bb4:	8d 93       	st	X+, r24
    4bb6:	9c 93       	st	X, r25
    4bb8:	17 97       	sbiw	r26, 0x07	; 7
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    4bba:	8f 2d       	mov	r24, r15
    4bbc:	9e 2d       	mov	r25, r14
    4bbe:	fc 01       	movw	r30, r24
    4bc0:	33 e0       	ldi	r19, 0x03	; 3
    4bc2:	ee 0f       	add	r30, r30
    4bc4:	ff 1f       	adc	r31, r31
    4bc6:	3a 95       	dec	r19
    4bc8:	e1 f7       	brne	.-8      	; 0x4bc2 <st_execute_move+0x156>
    4bca:	88 0f       	add	r24, r24
    4bcc:	99 1f       	adc	r25, r25
    4bce:	e8 0f       	add	r30, r24
    4bd0:	f9 1f       	adc	r31, r25
    4bd2:	e4 0f       	add	r30, r20
    4bd4:	f5 1f       	adc	r31, r21
    4bd6:	86 81       	ldd	r24, Z+6	; 0x06
    4bd8:	97 81       	ldd	r25, Z+7	; 0x07
    4bda:	18 96       	adiw	r26, 0x08	; 8
    4bdc:	8d 93       	st	X+, r24
    4bde:	9c 93       	st	X, r25
    4be0:	19 97       	sbiw	r26, 0x09	; 9
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    4be2:	8f 2d       	mov	r24, r15
    4be4:	9e 2d       	mov	r25, r14
    4be6:	fc 01       	movw	r30, r24
    4be8:	33 e0       	ldi	r19, 0x03	; 3
    4bea:	ee 0f       	add	r30, r30
    4bec:	ff 1f       	adc	r31, r31
    4bee:	3a 95       	dec	r19
    4bf0:	e1 f7       	brne	.-8      	; 0x4bea <st_execute_move+0x17e>
    4bf2:	88 0f       	add	r24, r24
    4bf4:	99 1f       	adc	r25, r25
    4bf6:	e8 0f       	add	r30, r24
    4bf8:	f9 1f       	adc	r31, r25
    4bfa:	e4 0f       	add	r30, r20
    4bfc:	f5 1f       	adc	r31, r21
    4bfe:	84 81       	ldd	r24, Z+4	; 0x04
    4c00:	95 81       	ldd	r25, Z+5	; 0x05
    4c02:	14 96       	adiw	r26, 0x04	; 4
    4c04:	8d 93       	st	X+, r24
    4c06:	9c 93       	st	X, r25
    4c08:	15 97       	sbiw	r26, 0x05	; 5
		ax.a[i].timer->PER = ax.p->a[i].period;
    4c0a:	1e 96       	adiw	r26, 0x0e	; 14
    4c0c:	ed 91       	ld	r30, X+
    4c0e:	fc 91       	ld	r31, X
    4c10:	1f 97       	sbiw	r26, 0x0f	; 15
    4c12:	8f 2d       	mov	r24, r15
    4c14:	9e 2d       	mov	r25, r14
    4c16:	9c 01       	movw	r18, r24
    4c18:	b3 e0       	ldi	r27, 0x03	; 3
    4c1a:	22 0f       	add	r18, r18
    4c1c:	33 1f       	adc	r19, r19
    4c1e:	ba 95       	dec	r27
    4c20:	e1 f7       	brne	.-8      	; 0x4c1a <st_execute_move+0x1ae>
    4c22:	88 0f       	add	r24, r24
    4c24:	99 1f       	adc	r25, r25
    4c26:	28 0f       	add	r18, r24
    4c28:	39 1f       	adc	r19, r25
    4c2a:	42 0f       	add	r20, r18
    4c2c:	53 1f       	adc	r21, r19
    4c2e:	da 01       	movw	r26, r20
    4c30:	14 96       	adiw	r26, 0x04	; 4
    4c32:	8d 91       	ld	r24, X+
    4c34:	9c 91       	ld	r25, X
    4c36:	15 97       	sbiw	r26, 0x05	; 5
    4c38:	86 a3       	std	Z+38, r24	; 0x26
    4c3a:	97 a3       	std	Z+39, r25	; 0x27
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4c3c:	db 01       	movw	r26, r22
    4c3e:	1c 96       	adiw	r26, 0x0c	; 12
    4c40:	ed 91       	ld	r30, X+
    4c42:	fc 91       	ld	r31, X
    4c44:	1d 97       	sbiw	r26, 0x0d	; 13
    4c46:	c6 82       	std	Z+6, r12	; 0x06
    4c48:	0f 5f       	subi	r16, 0xFF	; 255
    4c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c4c:	60 5f       	subi	r22, 0xF0	; 240
    4c4e:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    4c50:	03 30       	cpi	r16, 0x03	; 3
    4c52:	11 05       	cpc	r17, r1
    4c54:	09 f0       	breq	.+2      	; 0x4c58 <st_execute_move+0x1ec>
    4c56:	30 cf       	rjmp	.-416    	; 0x4ab8 <st_execute_move+0x4c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4c58:	10 92 d3 23 	sts	0x23D3, r1
	if (ax.a[X].step_counter) { 
    4c5c:	80 91 d6 23 	lds	r24, 0x23D6
    4c60:	90 91 d7 23 	lds	r25, 0x23D7
    4c64:	a0 91 d8 23 	lds	r26, 0x23D8
    4c68:	b0 91 d9 23 	lds	r27, 0x23D9
    4c6c:	00 97       	sbiw	r24, 0x00	; 0
    4c6e:	a1 05       	cpc	r26, r1
    4c70:	b1 05       	cpc	r27, r1
    4c72:	59 f0       	breq	.+22     	; 0x4c8a <st_execute_move+0x21e>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    4c74:	e0 91 e4 23 	lds	r30, 0x23E4
    4c78:	f0 91 e5 23 	lds	r31, 0x23E5
    4c7c:	81 e0       	ldi	r24, 0x01	; 1
    4c7e:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4c80:	80 91 d3 23 	lds	r24, 0x23D3
    4c84:	88 60       	ori	r24, 0x08	; 8
    4c86:	80 93 d3 23 	sts	0x23D3, r24
	}
	if (ax.a[Y].step_counter) {
    4c8a:	80 91 e6 23 	lds	r24, 0x23E6
    4c8e:	90 91 e7 23 	lds	r25, 0x23E7
    4c92:	a0 91 e8 23 	lds	r26, 0x23E8
    4c96:	b0 91 e9 23 	lds	r27, 0x23E9
    4c9a:	00 97       	sbiw	r24, 0x00	; 0
    4c9c:	a1 05       	cpc	r26, r1
    4c9e:	b1 05       	cpc	r27, r1
    4ca0:	59 f0       	breq	.+22     	; 0x4cb8 <st_execute_move+0x24c>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    4ca2:	e0 91 f4 23 	lds	r30, 0x23F4
    4ca6:	f0 91 f5 23 	lds	r31, 0x23F5
    4caa:	81 e0       	ldi	r24, 0x01	; 1
    4cac:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4cae:	80 91 d3 23 	lds	r24, 0x23D3
    4cb2:	84 60       	ori	r24, 0x04	; 4
    4cb4:	80 93 d3 23 	sts	0x23D3, r24
	}
	if (ax.a[Z].step_counter) {
    4cb8:	80 91 f6 23 	lds	r24, 0x23F6
    4cbc:	90 91 f7 23 	lds	r25, 0x23F7
    4cc0:	a0 91 f8 23 	lds	r26, 0x23F8
    4cc4:	b0 91 f9 23 	lds	r27, 0x23F9
    4cc8:	00 97       	sbiw	r24, 0x00	; 0
    4cca:	a1 05       	cpc	r26, r1
    4ccc:	b1 05       	cpc	r27, r1
    4cce:	59 f0       	breq	.+22     	; 0x4ce6 <st_execute_move+0x27a>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4cd0:	e0 91 04 24 	lds	r30, 0x2404
    4cd4:	f0 91 05 24 	lds	r31, 0x2405
    4cd8:	81 e0       	ldi	r24, 0x01	; 1
    4cda:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4cdc:	80 91 d3 23 	lds	r24, 0x23D3
    4ce0:	82 60       	ori	r24, 0x02	; 2
    4ce2:	80 93 d3 23 	sts	0x23D3, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4ce6:	10 92 d2 23 	sts	0x23D2, r1
}
    4cea:	df 91       	pop	r29
    4cec:	cf 91       	pop	r28
    4cee:	1f 91       	pop	r17
    4cf0:	0f 91       	pop	r16
    4cf2:	ff 90       	pop	r15
    4cf4:	ef 90       	pop	r14
    4cf6:	df 90       	pop	r13
    4cf8:	cf 90       	pop	r12
    4cfa:	08 95       	ret

00004cfc <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4cfc:	10 92 d2 23 	sts	0x23D2, r1
	st_execute_move();		// recursively empty the move queue
    4d00:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <st_execute_move>
	return;
}
    4d04:	08 95       	ret

00004d06 <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    4d06:	1f 92       	push	r1
    4d08:	0f 92       	push	r0
    4d0a:	0f b6       	in	r0, 0x3f	; 63
    4d0c:	0f 92       	push	r0
    4d0e:	0b b6       	in	r0, 0x3b	; 59
    4d10:	0f 92       	push	r0
    4d12:	11 24       	eor	r1, r1
    4d14:	2f 93       	push	r18
    4d16:	3f 93       	push	r19
    4d18:	4f 93       	push	r20
    4d1a:	5f 93       	push	r21
    4d1c:	6f 93       	push	r22
    4d1e:	7f 93       	push	r23
    4d20:	8f 93       	push	r24
    4d22:	9f 93       	push	r25
    4d24:	af 93       	push	r26
    4d26:	bf 93       	push	r27
    4d28:	ef 93       	push	r30
    4d2a:	ff 93       	push	r31
	if (--ax.a[A].postscale_counter != 0) {
    4d2c:	80 91 0e 24 	lds	r24, 0x240E
    4d30:	90 91 0f 24 	lds	r25, 0x240F
    4d34:	01 97       	sbiw	r24, 0x01	; 1
    4d36:	80 93 0e 24 	sts	0x240E, r24
    4d3a:	90 93 0f 24 	sts	0x240F, r25
    4d3e:	89 2b       	or	r24, r25
    4d40:	a1 f5       	brne	.+104    	; 0x4daa <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4d42:	e0 e6       	ldi	r30, 0x60	; 96
    4d44:	f6 e0       	ldi	r31, 0x06	; 6
    4d46:	81 e0       	ldi	r24, 0x01	; 1
    4d48:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    4d4a:	80 91 06 24 	lds	r24, 0x2406
    4d4e:	90 91 07 24 	lds	r25, 0x2407
    4d52:	a0 91 08 24 	lds	r26, 0x2408
    4d56:	b0 91 09 24 	lds	r27, 0x2409
    4d5a:	01 97       	sbiw	r24, 0x01	; 1
    4d5c:	a1 09       	sbc	r26, r1
    4d5e:	b1 09       	sbc	r27, r1
    4d60:	80 93 06 24 	sts	0x2406, r24
    4d64:	90 93 07 24 	sts	0x2407, r25
    4d68:	a0 93 08 24 	sts	0x2408, r26
    4d6c:	b0 93 09 24 	sts	0x2409, r27
    4d70:	00 97       	sbiw	r24, 0x00	; 0
    4d72:	a1 05       	cpc	r26, r1
    4d74:	b1 05       	cpc	r27, r1
    4d76:	69 f4       	brne	.+26     	; 0x4d92 <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4d78:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4d7c:	84 e0       	ldi	r24, 0x04	; 4
    4d7e:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4d80:	80 91 d3 23 	lds	r24, 0x23D3
    4d84:	8e 7f       	andi	r24, 0xFE	; 254
    4d86:	80 93 d3 23 	sts	0x23D3, r24
		if (ax.active_axes == 0) {
    4d8a:	88 23       	and	r24, r24
    4d8c:	11 f4       	brne	.+4      	; 0x4d92 <__vector_108+0x8c>
			st_execute_move();
    4d8e:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    4d92:	80 91 0c 24 	lds	r24, 0x240C
    4d96:	90 91 0d 24 	lds	r25, 0x240D
    4d9a:	80 93 0e 24 	sts	0x240E, r24
    4d9e:	90 93 0f 24 	sts	0x240F, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4da2:	81 e0       	ldi	r24, 0x01	; 1
    4da4:	e0 e6       	ldi	r30, 0x60	; 96
    4da6:	f6 e0       	ldi	r31, 0x06	; 6
    4da8:	86 83       	std	Z+6, r24	; 0x06
}
    4daa:	ff 91       	pop	r31
    4dac:	ef 91       	pop	r30
    4dae:	bf 91       	pop	r27
    4db0:	af 91       	pop	r26
    4db2:	9f 91       	pop	r25
    4db4:	8f 91       	pop	r24
    4db6:	7f 91       	pop	r23
    4db8:	6f 91       	pop	r22
    4dba:	5f 91       	pop	r21
    4dbc:	4f 91       	pop	r20
    4dbe:	3f 91       	pop	r19
    4dc0:	2f 91       	pop	r18
    4dc2:	0f 90       	pop	r0
    4dc4:	0b be       	out	0x3b, r0	; 59
    4dc6:	0f 90       	pop	r0
    4dc8:	0f be       	out	0x3f, r0	; 63
    4dca:	0f 90       	pop	r0
    4dcc:	1f 90       	pop	r1
    4dce:	18 95       	reti

00004dd0 <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4dd0:	1f 92       	push	r1
    4dd2:	0f 92       	push	r0
    4dd4:	0f b6       	in	r0, 0x3f	; 63
    4dd6:	0f 92       	push	r0
    4dd8:	0b b6       	in	r0, 0x3b	; 59
    4dda:	0f 92       	push	r0
    4ddc:	11 24       	eor	r1, r1
    4dde:	2f 93       	push	r18
    4de0:	3f 93       	push	r19
    4de2:	4f 93       	push	r20
    4de4:	5f 93       	push	r21
    4de6:	6f 93       	push	r22
    4de8:	7f 93       	push	r23
    4dea:	8f 93       	push	r24
    4dec:	9f 93       	push	r25
    4dee:	af 93       	push	r26
    4df0:	bf 93       	push	r27
    4df2:	ef 93       	push	r30
    4df4:	ff 93       	push	r31
	if (--ax.a[Z].postscale_counter != 0) {
    4df6:	80 91 fe 23 	lds	r24, 0x23FE
    4dfa:	90 91 ff 23 	lds	r25, 0x23FF
    4dfe:	01 97       	sbiw	r24, 0x01	; 1
    4e00:	80 93 fe 23 	sts	0x23FE, r24
    4e04:	90 93 ff 23 	sts	0x23FF, r25
    4e08:	89 2b       	or	r24, r25
    4e0a:	a1 f5       	brne	.+104    	; 0x4e74 <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4e0c:	e0 e8       	ldi	r30, 0x80	; 128
    4e0e:	f6 e0       	ldi	r31, 0x06	; 6
    4e10:	81 e0       	ldi	r24, 0x01	; 1
    4e12:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    4e14:	80 91 f6 23 	lds	r24, 0x23F6
    4e18:	90 91 f7 23 	lds	r25, 0x23F7
    4e1c:	a0 91 f8 23 	lds	r26, 0x23F8
    4e20:	b0 91 f9 23 	lds	r27, 0x23F9
    4e24:	01 97       	sbiw	r24, 0x01	; 1
    4e26:	a1 09       	sbc	r26, r1
    4e28:	b1 09       	sbc	r27, r1
    4e2a:	80 93 f6 23 	sts	0x23F6, r24
    4e2e:	90 93 f7 23 	sts	0x23F7, r25
    4e32:	a0 93 f8 23 	sts	0x23F8, r26
    4e36:	b0 93 f9 23 	sts	0x23F9, r27
    4e3a:	00 97       	sbiw	r24, 0x00	; 0
    4e3c:	a1 05       	cpc	r26, r1
    4e3e:	b1 05       	cpc	r27, r1
    4e40:	69 f4       	brne	.+26     	; 0x4e5c <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4e42:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4e46:	84 e0       	ldi	r24, 0x04	; 4
    4e48:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4e4a:	80 91 d3 23 	lds	r24, 0x23D3
    4e4e:	8d 7f       	andi	r24, 0xFD	; 253
    4e50:	80 93 d3 23 	sts	0x23D3, r24
		if (ax.active_axes == 0) {
    4e54:	88 23       	and	r24, r24
    4e56:	11 f4       	brne	.+4      	; 0x4e5c <__vector_47+0x8c>
			st_execute_move();
    4e58:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    4e5c:	80 91 fc 23 	lds	r24, 0x23FC
    4e60:	90 91 fd 23 	lds	r25, 0x23FD
    4e64:	80 93 fe 23 	sts	0x23FE, r24
    4e68:	90 93 ff 23 	sts	0x23FF, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4e6c:	81 e0       	ldi	r24, 0x01	; 1
    4e6e:	e0 e8       	ldi	r30, 0x80	; 128
    4e70:	f6 e0       	ldi	r31, 0x06	; 6
    4e72:	86 83       	std	Z+6, r24	; 0x06
}
    4e74:	ff 91       	pop	r31
    4e76:	ef 91       	pop	r30
    4e78:	bf 91       	pop	r27
    4e7a:	af 91       	pop	r26
    4e7c:	9f 91       	pop	r25
    4e7e:	8f 91       	pop	r24
    4e80:	7f 91       	pop	r23
    4e82:	6f 91       	pop	r22
    4e84:	5f 91       	pop	r21
    4e86:	4f 91       	pop	r20
    4e88:	3f 91       	pop	r19
    4e8a:	2f 91       	pop	r18
    4e8c:	0f 90       	pop	r0
    4e8e:	0b be       	out	0x3b, r0	; 59
    4e90:	0f 90       	pop	r0
    4e92:	0f be       	out	0x3f, r0	; 63
    4e94:	0f 90       	pop	r0
    4e96:	1f 90       	pop	r1
    4e98:	18 95       	reti

00004e9a <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4e9a:	1f 92       	push	r1
    4e9c:	0f 92       	push	r0
    4e9e:	0f b6       	in	r0, 0x3f	; 63
    4ea0:	0f 92       	push	r0
    4ea2:	0b b6       	in	r0, 0x3b	; 59
    4ea4:	0f 92       	push	r0
    4ea6:	11 24       	eor	r1, r1
    4ea8:	2f 93       	push	r18
    4eaa:	3f 93       	push	r19
    4eac:	4f 93       	push	r20
    4eae:	5f 93       	push	r21
    4eb0:	6f 93       	push	r22
    4eb2:	7f 93       	push	r23
    4eb4:	8f 93       	push	r24
    4eb6:	9f 93       	push	r25
    4eb8:	af 93       	push	r26
    4eba:	bf 93       	push	r27
    4ebc:	ef 93       	push	r30
    4ebe:	ff 93       	push	r31
	if (--ax.a[Y].postscale_counter != 0) {
    4ec0:	80 91 ee 23 	lds	r24, 0x23EE
    4ec4:	90 91 ef 23 	lds	r25, 0x23EF
    4ec8:	01 97       	sbiw	r24, 0x01	; 1
    4eca:	80 93 ee 23 	sts	0x23EE, r24
    4ece:	90 93 ef 23 	sts	0x23EF, r25
    4ed2:	89 2b       	or	r24, r25
    4ed4:	a1 f5       	brne	.+104    	; 0x4f3e <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4ed6:	e0 ea       	ldi	r30, 0xA0	; 160
    4ed8:	f6 e0       	ldi	r31, 0x06	; 6
    4eda:	81 e0       	ldi	r24, 0x01	; 1
    4edc:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    4ede:	80 91 e6 23 	lds	r24, 0x23E6
    4ee2:	90 91 e7 23 	lds	r25, 0x23E7
    4ee6:	a0 91 e8 23 	lds	r26, 0x23E8
    4eea:	b0 91 e9 23 	lds	r27, 0x23E9
    4eee:	01 97       	sbiw	r24, 0x01	; 1
    4ef0:	a1 09       	sbc	r26, r1
    4ef2:	b1 09       	sbc	r27, r1
    4ef4:	80 93 e6 23 	sts	0x23E6, r24
    4ef8:	90 93 e7 23 	sts	0x23E7, r25
    4efc:	a0 93 e8 23 	sts	0x23E8, r26
    4f00:	b0 93 e9 23 	sts	0x23E9, r27
    4f04:	00 97       	sbiw	r24, 0x00	; 0
    4f06:	a1 05       	cpc	r26, r1
    4f08:	b1 05       	cpc	r27, r1
    4f0a:	69 f4       	brne	.+26     	; 0x4f26 <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4f0c:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4f10:	84 e0       	ldi	r24, 0x04	; 4
    4f12:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4f14:	80 91 d3 23 	lds	r24, 0x23D3
    4f18:	8b 7f       	andi	r24, 0xFB	; 251
    4f1a:	80 93 d3 23 	sts	0x23D3, r24
		if (ax.active_axes == 0) {
    4f1e:	88 23       	and	r24, r24
    4f20:	11 f4       	brne	.+4      	; 0x4f26 <__vector_77+0x8c>
			st_execute_move();
    4f22:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    4f26:	80 91 ec 23 	lds	r24, 0x23EC
    4f2a:	90 91 ed 23 	lds	r25, 0x23ED
    4f2e:	80 93 ee 23 	sts	0x23EE, r24
    4f32:	90 93 ef 23 	sts	0x23EF, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4f36:	81 e0       	ldi	r24, 0x01	; 1
    4f38:	e0 ea       	ldi	r30, 0xA0	; 160
    4f3a:	f6 e0       	ldi	r31, 0x06	; 6
    4f3c:	86 83       	std	Z+6, r24	; 0x06
}
    4f3e:	ff 91       	pop	r31
    4f40:	ef 91       	pop	r30
    4f42:	bf 91       	pop	r27
    4f44:	af 91       	pop	r26
    4f46:	9f 91       	pop	r25
    4f48:	8f 91       	pop	r24
    4f4a:	7f 91       	pop	r23
    4f4c:	6f 91       	pop	r22
    4f4e:	5f 91       	pop	r21
    4f50:	4f 91       	pop	r20
    4f52:	3f 91       	pop	r19
    4f54:	2f 91       	pop	r18
    4f56:	0f 90       	pop	r0
    4f58:	0b be       	out	0x3b, r0	; 59
    4f5a:	0f 90       	pop	r0
    4f5c:	0f be       	out	0x3f, r0	; 63
    4f5e:	0f 90       	pop	r0
    4f60:	1f 90       	pop	r1
    4f62:	18 95       	reti

00004f64 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4f64:	1f 92       	push	r1
    4f66:	0f 92       	push	r0
    4f68:	0f b6       	in	r0, 0x3f	; 63
    4f6a:	0f 92       	push	r0
    4f6c:	0b b6       	in	r0, 0x3b	; 59
    4f6e:	0f 92       	push	r0
    4f70:	11 24       	eor	r1, r1
    4f72:	2f 93       	push	r18
    4f74:	3f 93       	push	r19
    4f76:	4f 93       	push	r20
    4f78:	5f 93       	push	r21
    4f7a:	6f 93       	push	r22
    4f7c:	7f 93       	push	r23
    4f7e:	8f 93       	push	r24
    4f80:	9f 93       	push	r25
    4f82:	af 93       	push	r26
    4f84:	bf 93       	push	r27
    4f86:	ef 93       	push	r30
    4f88:	ff 93       	push	r31
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    4f8a:	80 91 de 23 	lds	r24, 0x23DE
    4f8e:	90 91 df 23 	lds	r25, 0x23DF
    4f92:	01 97       	sbiw	r24, 0x01	; 1
    4f94:	80 93 de 23 	sts	0x23DE, r24
    4f98:	90 93 df 23 	sts	0x23DF, r25
    4f9c:	89 2b       	or	r24, r25
    4f9e:	d1 f5       	brne	.+116    	; 0x5014 <__vector_14+0xb0>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    4fa0:	80 91 e1 23 	lds	r24, 0x23E1
    4fa4:	88 23       	and	r24, r24
    4fa6:	21 f4       	brne	.+8      	; 0x4fb0 <__vector_14+0x4c>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    4fa8:	81 e0       	ldi	r24, 0x01	; 1
    4faa:	e0 e0       	ldi	r30, 0x00	; 0
    4fac:	f6 e0       	ldi	r31, 0x06	; 6
    4fae:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    4fb0:	80 91 d6 23 	lds	r24, 0x23D6
    4fb4:	90 91 d7 23 	lds	r25, 0x23D7
    4fb8:	a0 91 d8 23 	lds	r26, 0x23D8
    4fbc:	b0 91 d9 23 	lds	r27, 0x23D9
    4fc0:	01 97       	sbiw	r24, 0x01	; 1
    4fc2:	a1 09       	sbc	r26, r1
    4fc4:	b1 09       	sbc	r27, r1
    4fc6:	80 93 d6 23 	sts	0x23D6, r24
    4fca:	90 93 d7 23 	sts	0x23D7, r25
    4fce:	a0 93 d8 23 	sts	0x23D8, r26
    4fd2:	b0 93 d9 23 	sts	0x23D9, r27
    4fd6:	00 97       	sbiw	r24, 0x00	; 0
    4fd8:	a1 05       	cpc	r26, r1
    4fda:	b1 05       	cpc	r27, r1
    4fdc:	79 f4       	brne	.+30     	; 0x4ffc <__vector_14+0x98>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    4fde:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4fe2:	84 e0       	ldi	r24, 0x04	; 4
    4fe4:	e0 e0       	ldi	r30, 0x00	; 0
    4fe6:	f6 e0       	ldi	r31, 0x06	; 6
    4fe8:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    4fea:	80 91 d3 23 	lds	r24, 0x23D3
    4fee:	87 7f       	andi	r24, 0xF7	; 247
    4ff0:	80 93 d3 23 	sts	0x23D3, r24
		if (ax.active_axes == 0) {				// if all axes are done
    4ff4:	88 23       	and	r24, r24
    4ff6:	11 f4       	brne	.+4      	; 0x4ffc <__vector_14+0x98>
			st_execute_move();					// ...run the next move
    4ff8:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    4ffc:	80 91 dc 23 	lds	r24, 0x23DC
    5000:	90 91 dd 23 	lds	r25, 0x23DD
    5004:	80 93 de 23 	sts	0x23DE, r24
    5008:	90 93 df 23 	sts	0x23DF, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    500c:	81 e0       	ldi	r24, 0x01	; 1
    500e:	e0 e0       	ldi	r30, 0x00	; 0
    5010:	f6 e0       	ldi	r31, 0x06	; 6
    5012:	86 83       	std	Z+6, r24	; 0x06
}
    5014:	ff 91       	pop	r31
    5016:	ef 91       	pop	r30
    5018:	bf 91       	pop	r27
    501a:	af 91       	pop	r26
    501c:	9f 91       	pop	r25
    501e:	8f 91       	pop	r24
    5020:	7f 91       	pop	r23
    5022:	6f 91       	pop	r22
    5024:	5f 91       	pop	r21
    5026:	4f 91       	pop	r20
    5028:	3f 91       	pop	r19
    502a:	2f 91       	pop	r18
    502c:	0f 90       	pop	r0
    502e:	0b be       	out	0x3b, r0	; 59
    5030:	0f 90       	pop	r0
    5032:	0f be       	out	0x3f, r0	; 63
    5034:	0f 90       	pop	r0
    5036:	1f 90       	pop	r1
    5038:	18 95       	reti

0000503a <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    503a:	e0 ea       	ldi	r30, 0xA0	; 160
    503c:	f0 e0       	ldi	r31, 0x00	; 0
    503e:	82 81       	ldd	r24, Z+2	; 0x02
    5040:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    5042:	98 ed       	ldi	r25, 0xD8	; 216
    5044:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    5046:	82 83       	std	Z+2, r24	; 0x02
}
    5048:	08 95       	ret

0000504a <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    504a:	e0 ea       	ldi	r30, 0xA0	; 160
    504c:	f0 e0       	ldi	r31, 0x00	; 0
    504e:	82 81       	ldd	r24, Z+2	; 0x02
    5050:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    5052:	98 ed       	ldi	r25, 0xD8	; 216
    5054:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    5056:	82 83       	std	Z+2, r24	; 0x02
}
    5058:	08 95       	ret

0000505a <xio_fget_ln>:
 *	dev		XIO device enumeration
 */

int xio_fget_ln(uint8_t dev, char *buf, uint8_t len)
{
	switch (dev) {
    505a:	81 30       	cpi	r24, 0x01	; 1
    505c:	61 f0       	breq	.+24     	; 0x5076 <xio_fget_ln+0x1c>
    505e:	81 30       	cpi	r24, 0x01	; 1
    5060:	28 f0       	brcs	.+10     	; 0x506c <xio_fget_ln+0x12>
    5062:	83 30       	cpi	r24, 0x03	; 3
    5064:	69 f0       	breq	.+26     	; 0x5080 <xio_fget_ln+0x26>
    5066:	21 e1       	ldi	r18, 0x11	; 17
    5068:	30 e0       	ldi	r19, 0x00	; 0
    506a:	0f c0       	rjmp	.+30     	; 0x508a <xio_fget_ln+0x30>
		case (XIO_DEV_RS485): return (xio_rs485_readln(buf, len));
    506c:	cb 01       	movw	r24, r22
    506e:	64 2f       	mov	r22, r20
    5070:	0e 94 13 36 	call	0x6c26	; 0x6c26 <xio_rs485_readln>
    5074:	09 c0       	rjmp	.+18     	; 0x5088 <xio_fget_ln+0x2e>
		case (XIO_DEV_USB): return (xio_usb_readln(buf, len));
    5076:	cb 01       	movw	r24, r22
    5078:	64 2f       	mov	r22, r20
    507a:	0e 94 67 2b 	call	0x56ce	; 0x56ce <xio_usb_readln>
    507e:	04 c0       	rjmp	.+8      	; 0x5088 <xio_fget_ln+0x2e>
//		case (XIO_DEV_AUX): return (xio_aux_readln(buf, len));
		case (XIO_DEV_PGM): return (xio_pgm_readln(buf, len));
    5080:	cb 01       	movw	r24, r22
    5082:	64 2f       	mov	r22, r20
    5084:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <xio_pgm_readln>
    5088:	9c 01       	movw	r18, r24
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    508a:	c9 01       	movw	r24, r18
    508c:	08 95       	ret

0000508e <xio_control>:
 * xio_control() - common entry point for device control functions
 */

int8_t xio_control(uint8_t dev, const uint16_t control, const int16_t arg)
{
	switch (dev) {
    508e:	81 30       	cpi	r24, 0x01	; 1
    5090:	59 f0       	breq	.+22     	; 0x50a8 <xio_control+0x1a>
    5092:	81 30       	cpi	r24, 0x01	; 1
    5094:	20 f0       	brcs	.+8      	; 0x509e <xio_control+0x10>
    5096:	83 30       	cpi	r24, 0x03	; 3
    5098:	61 f0       	breq	.+24     	; 0x50b2 <xio_control+0x24>
    509a:	81 e1       	ldi	r24, 0x11	; 17
    509c:	08 95       	ret
		case (XIO_DEV_RS485): return (xio_rs485_control(control, arg));
    509e:	cb 01       	movw	r24, r22
    50a0:	ba 01       	movw	r22, r20
    50a2:	0e 94 51 34 	call	0x68a2	; 0x68a2 <xio_rs485_control>
    50a6:	08 95       	ret
		case (XIO_DEV_USB): return (xio_usb_control(control, arg));
    50a8:	cb 01       	movw	r24, r22
    50aa:	ba 01       	movw	r22, r20
    50ac:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <xio_usb_control>
    50b0:	08 95       	ret
//		case (XIO_DEV_AUX): return (xio_aux_control(control, arg));
		case (XIO_DEV_PGM): return (xio_pgm_control(control, arg));
    50b2:	cb 01       	movw	r24, r22
    50b4:	ba 01       	movw	r22, r20
    50b6:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <xio_pgm_control>
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    50ba:	08 95       	ret

000050bc <xio_dev_init>:
 * xio_dev_init() - common entry point for device init functions
 */

int8_t xio_dev_init(uint8_t dev, const int16_t arg)
{
	switch (dev) {
    50bc:	81 30       	cpi	r24, 0x01	; 1
    50be:	51 f0       	breq	.+20     	; 0x50d4 <xio_dev_init+0x18>
    50c0:	81 30       	cpi	r24, 0x01	; 1
    50c2:	20 f0       	brcs	.+8      	; 0x50cc <xio_dev_init+0x10>
    50c4:	83 30       	cpi	r24, 0x03	; 3
    50c6:	59 f0       	breq	.+22     	; 0x50de <xio_dev_init+0x22>
    50c8:	81 e1       	ldi	r24, 0x11	; 17
    50ca:	08 95       	ret
		case (XIO_DEV_RS485): xio_rs485_init(arg); return (TG_OK);
    50cc:	cb 01       	movw	r24, r22
    50ce:	0e 94 96 33 	call	0x672c	; 0x672c <xio_rs485_init>
    50d2:	03 c0       	rjmp	.+6      	; 0x50da <xio_dev_init+0x1e>
		case (XIO_DEV_USB): xio_usb_init(arg); return (TG_OK);
    50d4:	cb 01       	movw	r24, r22
    50d6:	0e 94 c0 28 	call	0x5180	; 0x5180 <xio_usb_init>
    50da:	80 e0       	ldi	r24, 0x00	; 0
    50dc:	08 95       	ret
//		case (XIO_DEV_AUX): xio_aux_init(arg); return (TG_OK);
		case (XIO_DEV_PGM): xio_pgm_init(arg); return (TG_OK);
    50de:	cb 01       	movw	r24, r22
    50e0:	0e 94 82 2e 	call	0x5d04	; 0x5d04 <xio_pgm_init>
    50e4:	80 e0       	ldi	r24, 0x00	; 0
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    50e6:	08 95       	ret

000050e8 <xio_init>:
 *
 *	xio_init()
 */

void xio_init(void)
{	
    50e8:	ef 92       	push	r14
    50ea:	ff 92       	push	r15
    50ec:	0f 93       	push	r16
    50ee:	1f 93       	push	r17
    50f0:	df 93       	push	r29
    50f2:	cf 93       	push	r28
    50f4:	0f 92       	push	r0
    50f6:	cd b7       	in	r28, 0x3d	; 61
    50f8:	de b7       	in	r29, 0x3e	; 62
    50fa:	0b ef       	ldi	r16, 0xFB	; 251
    50fc:	1d e1       	ldi	r17, 0x1D	; 29
    50fe:	8e ed       	ldi	r24, 0xDE	; 222
    5100:	e8 2e       	mov	r14, r24
    5102:	84 e2       	ldi	r24, 0x24	; 36
    5104:	f8 2e       	mov	r15, r24
    5106:	90 e0       	ldi	r25, 0x00	; 0
	// initialize all USART-based devices
	for (uint8_t i=0; i < XIO_DEV_USART_MAX; i++) {
		xio_init_usart(i, &us[i], pgm_read_word(&controls[i]));
    5108:	f8 01       	movw	r30, r16
    510a:	45 91       	lpm	r20, Z+
    510c:	54 91       	lpm	r21, Z+
    510e:	89 2f       	mov	r24, r25
    5110:	b7 01       	movw	r22, r14
    5112:	99 83       	std	Y+1, r25	; 0x01
    5114:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <xio_init_usart>
 */

void xio_init(void)
{	
	// initialize all USART-based devices
	for (uint8_t i=0; i < XIO_DEV_USART_MAX; i++) {
    5118:	99 81       	ldd	r25, Y+1	; 0x01
    511a:	9f 5f       	subi	r25, 0xFF	; 255
    511c:	0e 5f       	subi	r16, 0xFE	; 254
    511e:	1f 4f       	sbci	r17, 0xFF	; 255
    5120:	26 e3       	ldi	r18, 0x36	; 54
    5122:	30 e0       	ldi	r19, 0x00	; 0
    5124:	e2 0e       	add	r14, r18
    5126:	f3 1e       	adc	r15, r19
    5128:	93 30       	cpi	r25, 0x03	; 3
    512a:	71 f7       	brne	.-36     	; 0x5108 <xio_init+0x20>

	// USB port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
//	xio_usb_init(XIO_LINEMODE | XIO_SEMICOLONS | XIO_BAUD_115200);

	// PGM file defaults are:	XIO_RD | XIO_BLOCK
	xio_pgm_init(XIO_ECHO | XIO_CRLF | XIO_LINEMODE);
    512c:	80 e0       	ldi	r24, 0x00	; 0
    512e:	95 e1       	ldi	r25, 0x15	; 21
    5130:	0e 94 82 2e 	call	0x5d04	; 0x5d04 <xio_pgm_init>
//	xio_pgm_init(XIO_LINEMODE);


	stddev = &dev_usb;				// stddev is a convenience
    5134:	80 e0       	ldi	r24, 0x00	; 0
    5136:	90 e2       	ldi	r25, 0x20	; 32
    5138:	80 93 84 24 	sts	0x2484, r24
    513c:	90 93 85 24 	sts	0x2485, r25
	stdin = &dev_usb;				// define the console device
    5140:	80 93 80 25 	sts	0x2580, r24
    5144:	90 93 81 25 	sts	0x2581, r25
	stdout = &dev_usb;				// ...
    5148:	80 93 82 25 	sts	0x2582, r24
    514c:	90 93 83 25 	sts	0x2583, r25
	stderr = &dev_usb;				// ...
    5150:	80 93 84 25 	sts	0x2584, r24
    5154:	90 93 85 25 	sts	0x2585, r25

	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    5158:	0f 92       	push	r0
    515a:	0f 92       	push	r0
    515c:	84 e2       	ldi	r24, 0x24	; 36
    515e:	97 e0       	ldi	r25, 0x07	; 7
    5160:	ed b7       	in	r30, 0x3d	; 61
    5162:	fe b7       	in	r31, 0x3e	; 62
    5164:	81 83       	std	Z+1, r24	; 0x01
    5166:	92 83       	std	Z+2, r25	; 0x02
    5168:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
}
    516c:	0f 90       	pop	r0
    516e:	0f 90       	pop	r0
    5170:	0f 90       	pop	r0
    5172:	cf 91       	pop	r28
    5174:	df 91       	pop	r29
    5176:	1f 91       	pop	r17
    5178:	0f 91       	pop	r16
    517a:	ff 90       	pop	r15
    517c:	ef 90       	pop	r14
    517e:	08 95       	ret

00005180 <xio_usb_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_usb_init(const uint16_t control)
{
    5180:	9c 01       	movw	r18, r24
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    5182:	e8 2f       	mov	r30, r24
    5184:	ef 70       	andi	r30, 0x0F	; 15

	// transfer control flags to internal flag bits
	f.flags = XIO_FLAG_USB_DEFS_gm;		// set flags to defaults & initial state
    5186:	87 e3       	ldi	r24, 0x37	; 55
    5188:	90 e0       	ldi	r25, 0x00	; 0
    518a:	80 93 ad 21 	sts	0x21AD, r24
    518e:	90 93 ae 21 	sts	0x21AE, r25
		f.flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		f.flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    5192:	26 ff       	sbrs	r18, 6
    5194:	06 c0       	rjmp	.+12     	; 0x51a2 <xio_usb_init+0x22>
		f.flags |= XIO_FLAG_BLOCK_bm;
    5196:	87 e3       	ldi	r24, 0x37	; 55
    5198:	90 e0       	ldi	r25, 0x00	; 0
    519a:	80 93 ad 21 	sts	0x21AD, r24
    519e:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOBLOCK) {
    51a2:	27 ff       	sbrs	r18, 7
    51a4:	06 c0       	rjmp	.+12     	; 0x51b2 <xio_usb_init+0x32>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    51a6:	83 e3       	ldi	r24, 0x33	; 51
    51a8:	90 e0       	ldi	r25, 0x00	; 0
    51aa:	80 93 ad 21 	sts	0x21AD, r24
    51ae:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_ECHO) {
    51b2:	30 ff       	sbrs	r19, 0
    51b4:	09 c0       	rjmp	.+18     	; 0x51c8 <xio_usb_init+0x48>
		f.flags |= XIO_FLAG_ECHO_bm;
    51b6:	80 91 ad 21 	lds	r24, 0x21AD
    51ba:	90 91 ae 21 	lds	r25, 0x21AE
    51be:	80 61       	ori	r24, 0x10	; 16
    51c0:	80 93 ad 21 	sts	0x21AD, r24
    51c4:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOECHO) {
    51c8:	31 ff       	sbrs	r19, 1
    51ca:	09 c0       	rjmp	.+18     	; 0x51de <xio_usb_init+0x5e>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    51cc:	80 91 ad 21 	lds	r24, 0x21AD
    51d0:	90 91 ae 21 	lds	r25, 0x21AE
    51d4:	8f 7e       	andi	r24, 0xEF	; 239
    51d6:	80 93 ad 21 	sts	0x21AD, r24
    51da:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_CRLF) {
    51de:	32 ff       	sbrs	r19, 2
    51e0:	09 c0       	rjmp	.+18     	; 0x51f4 <xio_usb_init+0x74>
		f.flags |= XIO_FLAG_CRLF_bm;
    51e2:	80 91 ad 21 	lds	r24, 0x21AD
    51e6:	90 91 ae 21 	lds	r25, 0x21AE
    51ea:	80 62       	ori	r24, 0x20	; 32
    51ec:	80 93 ad 21 	sts	0x21AD, r24
    51f0:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOCRLF) {
    51f4:	33 ff       	sbrs	r19, 3
    51f6:	09 c0       	rjmp	.+18     	; 0x520a <xio_usb_init+0x8a>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    51f8:	80 91 ad 21 	lds	r24, 0x21AD
    51fc:	90 91 ae 21 	lds	r25, 0x21AE
    5200:	8f 7d       	andi	r24, 0xDF	; 223
    5202:	80 93 ad 21 	sts	0x21AD, r24
    5206:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_LINEMODE) {
    520a:	34 ff       	sbrs	r19, 4
    520c:	09 c0       	rjmp	.+18     	; 0x5220 <xio_usb_init+0xa0>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    520e:	80 91 ad 21 	lds	r24, 0x21AD
    5212:	90 91 ae 21 	lds	r25, 0x21AE
    5216:	80 64       	ori	r24, 0x40	; 64
    5218:	80 93 ad 21 	sts	0x21AD, r24
    521c:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOLINEMODE) {
    5220:	35 ff       	sbrs	r19, 5
    5222:	09 c0       	rjmp	.+18     	; 0x5236 <xio_usb_init+0xb6>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    5224:	80 91 ad 21 	lds	r24, 0x21AD
    5228:	90 91 ae 21 	lds	r25, 0x21AE
    522c:	8f 7b       	andi	r24, 0xBF	; 191
    522e:	80 93 ad 21 	sts	0x21AD, r24
    5232:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_SEMICOLONS) {
    5236:	36 ff       	sbrs	r19, 6
    5238:	09 c0       	rjmp	.+18     	; 0x524c <xio_usb_init+0xcc>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    523a:	80 91 ad 21 	lds	r24, 0x21AD
    523e:	90 91 ae 21 	lds	r25, 0x21AE
    5242:	80 68       	ori	r24, 0x80	; 128
    5244:	80 93 ad 21 	sts	0x21AD, r24
    5248:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    524c:	37 ff       	sbrs	r19, 7
    524e:	09 c0       	rjmp	.+18     	; 0x5262 <xio_usb_init+0xe2>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5250:	80 91 ad 21 	lds	r24, 0x21AD
    5254:	90 91 ae 21 	lds	r25, 0x21AE
    5258:	8f 77       	andi	r24, 0x7F	; 127
    525a:	80 93 ad 21 	sts	0x21AD, r24
    525e:	90 93 ae 21 	sts	0x21AE, r25
	}

	// character signals and error returns
	f.sig = 0;
    5262:	10 92 b0 21 	sts	0x21B0, r1
	dev_usb.udata = &(f.sig);				// bind sig register to FILE struct
    5266:	80 eb       	ldi	r24, 0xB0	; 176
    5268:	91 e2       	ldi	r25, 0x21	; 33
    526a:	80 93 0c 20 	sts	0x200C, r24
    526e:	90 93 0d 20 	sts	0x200D, r25

	// setup internal RX/TX buffers
	f.rx_buf_head = 1;						// can't use location 0
    5272:	81 e0       	ldi	r24, 0x01	; 1
    5274:	80 93 b7 21 	sts	0x21B7, r24
	f.rx_buf_tail = 1;
    5278:	80 93 b6 21 	sts	0x21B6, r24
	f.tx_buf_head = 1;
    527c:	80 93 b9 21 	sts	0x21B9, r24
	f.tx_buf_tail = 1;
    5280:	80 93 b8 21 	sts	0x21B8, r24
	f.len = sizeof(f.buf);					// offset to zero
    5284:	82 e0       	ldi	r24, 0x02	; 2
    5286:	80 93 b3 21 	sts	0x21B3, r24

	f.usart = &USB_USART;					// bind USART structure
    528a:	80 ea       	ldi	r24, 0xA0	; 160
    528c:	98 e0       	ldi	r25, 0x08	; 8
    528e:	80 93 bb 21 	sts	0x21BB, r24
    5292:	90 93 bc 21 	sts	0x21BC, r25
	f.port = &USB_PORT;						// bind PORT structure
    5296:	80 e4       	ldi	r24, 0x40	; 64
    5298:	96 e0       	ldi	r25, 0x06	; 6
    529a:	80 93 bd 21 	sts	0x21BD, r24
    529e:	90 93 be 21 	sts	0x21BE, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    52a2:	ee 23       	and	r30, r30
    52a4:	09 f4       	brne	.+2      	; 0x52a8 <xio_usb_init+0x128>
    52a6:	e5 e0       	ldi	r30, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    52a8:	8e 2f       	mov	r24, r30
    52aa:	90 e0       	ldi	r25, 0x00	; 0
    52ac:	fc 01       	movw	r30, r24
    52ae:	ef 5f       	subi	r30, 0xFF	; 255
    52b0:	f1 4e       	sbci	r31, 0xE1	; 225
    52b2:	e4 91       	lpm	r30, Z+
    52b4:	a0 ea       	ldi	r26, 0xA0	; 160
    52b6:	b8 e0       	ldi	r27, 0x08	; 8
    52b8:	16 96       	adiw	r26, 0x06	; 6
    52ba:	ec 93       	st	X, r30
    52bc:	16 97       	sbiw	r26, 0x06	; 6
	f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    52be:	84 5f       	subi	r24, 0xF4	; 244
    52c0:	91 4e       	sbci	r25, 0xE1	; 225
    52c2:	fc 01       	movw	r30, r24
    52c4:	84 91       	lpm	r24, Z+
    52c6:	17 96       	adiw	r26, 0x07	; 7
    52c8:	8c 93       	st	X, r24
    52ca:	17 97       	sbiw	r26, 0x07	; 7
	f.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm; // enable tx and rx on USART
    52cc:	88 e1       	ldi	r24, 0x18	; 24
    52ce:	14 96       	adiw	r26, 0x04	; 4
    52d0:	8c 93       	st	X, r24
    52d2:	14 97       	sbiw	r26, 0x04	; 4
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    52d4:	81 e2       	ldi	r24, 0x21	; 33
    52d6:	13 96       	adiw	r26, 0x03	; 3
    52d8:	8c 93       	st	X, r24

	f.port->DIRCLR = USB_RX_bm;	 			// clr RX pin as input
    52da:	e0 e4       	ldi	r30, 0x40	; 64
    52dc:	f6 e0       	ldi	r31, 0x06	; 6
    52de:	84 e0       	ldi	r24, 0x04	; 4
    52e0:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_TX_bm; 			// set TX pin as output
    52e2:	88 e0       	ldi	r24, 0x08	; 8
    52e4:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_TX_bm;				// set TX HI as initial state
    52e6:	85 83       	std	Z+5, r24	; 0x05
	f.port->DIRCLR = USB_CTS_bm; 			// set CTS pin as input
    52e8:	81 e0       	ldi	r24, 0x01	; 1
    52ea:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_RTS_bm; 			// set RTS pin as output
    52ec:	82 e0       	ldi	r24, 0x02	; 2
    52ee:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
    52f0:	85 83       	std	Z+5, r24	; 0x05
//	f.port->OUTCLR = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
}
    52f2:	08 95       	ret

000052f4 <xio_usb_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_usb_control(const uint16_t control, const int16_t arg)
{
    52f4:	ac 01       	movw	r20, r24
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    52f6:	8f 70       	andi	r24, 0x0F	; 15
    52f8:	90 70       	andi	r25, 0x00	; 0
    52fa:	00 97       	sbiw	r24, 0x00	; 0
    52fc:	91 f0       	breq	.+36     	; 0x5322 <xio_usb_control+0x2e>
		f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    52fe:	a0 91 bb 21 	lds	r26, 0x21BB
    5302:	b0 91 bc 21 	lds	r27, 0x21BC
    5306:	9c 01       	movw	r18, r24
    5308:	2f 5f       	subi	r18, 0xFF	; 255
    530a:	31 4e       	sbci	r19, 0xE1	; 225
    530c:	f9 01       	movw	r30, r18
    530e:	24 91       	lpm	r18, Z+
    5310:	16 96       	adiw	r26, 0x06	; 6
    5312:	2c 93       	st	X, r18
    5314:	16 97       	sbiw	r26, 0x06	; 6
		f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    5316:	84 5f       	subi	r24, 0xF4	; 244
    5318:	91 4e       	sbci	r25, 0xE1	; 225
    531a:	fc 01       	movw	r30, r24
    531c:	84 91       	lpm	r24, Z+
    531e:	17 96       	adiw	r26, 0x07	; 7
    5320:	8c 93       	st	X, r24
	}
	if (control & XIO_BLOCK) {
    5322:	46 ff       	sbrs	r20, 6
    5324:	09 c0       	rjmp	.+18     	; 0x5338 <xio_usb_control+0x44>
		f.flags |= XIO_FLAG_BLOCK_bm;
    5326:	80 91 ad 21 	lds	r24, 0x21AD
    532a:	90 91 ae 21 	lds	r25, 0x21AE
    532e:	84 60       	ori	r24, 0x04	; 4
    5330:	80 93 ad 21 	sts	0x21AD, r24
    5334:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOBLOCK) {
    5338:	47 ff       	sbrs	r20, 7
    533a:	09 c0       	rjmp	.+18     	; 0x534e <xio_usb_control+0x5a>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    533c:	80 91 ad 21 	lds	r24, 0x21AD
    5340:	90 91 ae 21 	lds	r25, 0x21AE
    5344:	8b 7f       	andi	r24, 0xFB	; 251
    5346:	80 93 ad 21 	sts	0x21AD, r24
    534a:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_ECHO) {
    534e:	50 ff       	sbrs	r21, 0
    5350:	09 c0       	rjmp	.+18     	; 0x5364 <xio_usb_control+0x70>
		f.flags |= XIO_FLAG_ECHO_bm;
    5352:	80 91 ad 21 	lds	r24, 0x21AD
    5356:	90 91 ae 21 	lds	r25, 0x21AE
    535a:	80 61       	ori	r24, 0x10	; 16
    535c:	80 93 ad 21 	sts	0x21AD, r24
    5360:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOECHO) {
    5364:	51 ff       	sbrs	r21, 1
    5366:	09 c0       	rjmp	.+18     	; 0x537a <xio_usb_control+0x86>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    5368:	80 91 ad 21 	lds	r24, 0x21AD
    536c:	90 91 ae 21 	lds	r25, 0x21AE
    5370:	8f 7e       	andi	r24, 0xEF	; 239
    5372:	80 93 ad 21 	sts	0x21AD, r24
    5376:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_CRLF) {
    537a:	52 ff       	sbrs	r21, 2
    537c:	09 c0       	rjmp	.+18     	; 0x5390 <xio_usb_control+0x9c>
		f.flags |= XIO_FLAG_CRLF_bm;
    537e:	80 91 ad 21 	lds	r24, 0x21AD
    5382:	90 91 ae 21 	lds	r25, 0x21AE
    5386:	80 62       	ori	r24, 0x20	; 32
    5388:	80 93 ad 21 	sts	0x21AD, r24
    538c:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOCRLF) {
    5390:	53 ff       	sbrs	r21, 3
    5392:	09 c0       	rjmp	.+18     	; 0x53a6 <xio_usb_control+0xb2>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    5394:	80 91 ad 21 	lds	r24, 0x21AD
    5398:	90 91 ae 21 	lds	r25, 0x21AE
    539c:	8f 7d       	andi	r24, 0xDF	; 223
    539e:	80 93 ad 21 	sts	0x21AD, r24
    53a2:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_LINEMODE) {
    53a6:	54 ff       	sbrs	r21, 4
    53a8:	09 c0       	rjmp	.+18     	; 0x53bc <xio_usb_control+0xc8>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    53aa:	80 91 ad 21 	lds	r24, 0x21AD
    53ae:	90 91 ae 21 	lds	r25, 0x21AE
    53b2:	80 64       	ori	r24, 0x40	; 64
    53b4:	80 93 ad 21 	sts	0x21AD, r24
    53b8:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOLINEMODE) {
    53bc:	55 ff       	sbrs	r21, 5
    53be:	09 c0       	rjmp	.+18     	; 0x53d2 <xio_usb_control+0xde>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    53c0:	80 91 ad 21 	lds	r24, 0x21AD
    53c4:	90 91 ae 21 	lds	r25, 0x21AE
    53c8:	8f 7b       	andi	r24, 0xBF	; 191
    53ca:	80 93 ad 21 	sts	0x21AD, r24
    53ce:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_SEMICOLONS) {
    53d2:	56 ff       	sbrs	r21, 6
    53d4:	09 c0       	rjmp	.+18     	; 0x53e8 <xio_usb_control+0xf4>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    53d6:	80 91 ad 21 	lds	r24, 0x21AD
    53da:	90 91 ae 21 	lds	r25, 0x21AE
    53de:	80 68       	ori	r24, 0x80	; 128
    53e0:	80 93 ad 21 	sts	0x21AD, r24
    53e4:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    53e8:	57 ff       	sbrs	r21, 7
    53ea:	09 c0       	rjmp	.+18     	; 0x53fe <xio_usb_control+0x10a>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    53ec:	80 91 ad 21 	lds	r24, 0x21AD
    53f0:	90 91 ae 21 	lds	r25, 0x21AE
    53f4:	8f 77       	andi	r24, 0x7F	; 127
    53f6:	80 93 ad 21 	sts	0x21AD, r24
    53fa:	90 93 ae 21 	sts	0x21AE, r25
	}
	return (0);
}
    53fe:	80 e0       	ldi	r24, 0x00	; 0
    5400:	08 95       	ret

00005402 <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)		//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    5402:	1f 92       	push	r1
    5404:	0f 92       	push	r0
    5406:	0f b6       	in	r0, 0x3f	; 63
    5408:	0f 92       	push	r0
    540a:	0b b6       	in	r0, 0x3b	; 59
    540c:	0f 92       	push	r0
    540e:	11 24       	eor	r1, r1
    5410:	8f 93       	push	r24
    5412:	9f 93       	push	r25
    5414:	af 93       	push	r26
    5416:	bf 93       	push	r27
    5418:	ef 93       	push	r30
    541a:	ff 93       	push	r31
	if (f.tx_buf_head == f.tx_buf_tail) {			// buffer empty - disable ints
    541c:	90 91 b9 21 	lds	r25, 0x21B9
    5420:	80 91 b8 21 	lds	r24, 0x21B8
    5424:	98 17       	cp	r25, r24
    5426:	39 f4       	brne	.+14     	; 0x5436 <__vector_26+0x34>
		f.usart->CTRLA = USARTC0_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    5428:	e0 91 bb 21 	lds	r30, 0x21BB
    542c:	f0 91 bc 21 	lds	r31, 0x21BC
    5430:	80 e2       	ldi	r24, 0x20	; 32
    5432:	83 83       	std	Z+3, r24	; 0x03
    5434:	1e c0       	rjmp	.+60     	; 0x5472 <__vector_26+0x70>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(f.flags)) {
    5436:	80 91 ad 21 	lds	r24, 0x21AD
    543a:	90 91 ae 21 	lds	r25, 0x21AE
    543e:	93 fd       	sbrc	r25, 3
    5440:	18 c0       	rjmp	.+48     	; 0x5472 <__vector_26+0x70>
		if (--(f.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    5442:	80 91 b8 21 	lds	r24, 0x21B8
    5446:	81 50       	subi	r24, 0x01	; 1
    5448:	80 93 b8 21 	sts	0x21B8, r24
    544c:	80 91 b8 21 	lds	r24, 0x21B8
    5450:	88 23       	and	r24, r24
    5452:	19 f4       	brne	.+6      	; 0x545a <__vector_26+0x58>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    5454:	81 e1       	ldi	r24, 0x11	; 17
    5456:	80 93 b8 21 	sts	0x21B8, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];	// write char to TX DATA register
    545a:	e0 91 bb 21 	lds	r30, 0x21BB
    545e:	f0 91 bc 21 	lds	r31, 0x21BC
    5462:	a0 91 b8 21 	lds	r26, 0x21B8
    5466:	b0 e0       	ldi	r27, 0x00	; 0
    5468:	a3 55       	subi	r26, 0x53	; 83
    546a:	be 4d       	sbci	r27, 0xDE	; 222
    546c:	94 96       	adiw	r26, 0x24	; 36
    546e:	8c 91       	ld	r24, X
    5470:	80 83       	st	Z, r24
	}
}
    5472:	ff 91       	pop	r31
    5474:	ef 91       	pop	r30
    5476:	bf 91       	pop	r27
    5478:	af 91       	pop	r26
    547a:	9f 91       	pop	r25
    547c:	8f 91       	pop	r24
    547e:	0f 90       	pop	r0
    5480:	0b be       	out	0x3b, r0	; 59
    5482:	0f 90       	pop	r0
    5484:	0f be       	out	0x3f, r0	; 63
    5486:	0f 90       	pop	r0
    5488:	1f 90       	pop	r1
    548a:	18 95       	reti

0000548c <xio_usb_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
    548c:	48 2f       	mov	r20, r24
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    548e:	20 91 ad 21 	lds	r18, 0x21AD
    5492:	30 91 ae 21 	lds	r19, 0x21AE
    5496:	d9 01       	movw	r26, r18
    5498:	a4 70       	andi	r26, 0x04	; 4
    549a:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    549c:	b9 01       	movw	r22, r18
    549e:	60 72       	andi	r22, 0x20	; 32
    54a0:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
    54a2:	90 91 b9 21 	lds	r25, 0x21B9
    54a6:	91 50       	subi	r25, 0x01	; 1
    54a8:	c1 f4       	brne	.+48     	; 0x54da <xio_usb_putc+0x4e>
    54aa:	91 e1       	ldi	r25, 0x11	; 17
    54ac:	16 c0       	rjmp	.+44     	; 0x54da <xio_usb_putc+0x4e>
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    54ae:	10 97       	sbiw	r26, 0x00	; 0
    54b0:	61 f0       	breq	.+24     	; 0x54ca <xio_usb_putc+0x3e>
			sleep_mode();
    54b2:	80 91 48 00 	lds	r24, 0x0048
    54b6:	81 60       	ori	r24, 0x01	; 1
    54b8:	80 93 48 00 	sts	0x0048, r24
    54bc:	88 95       	sleep
    54be:	80 91 48 00 	lds	r24, 0x0048
    54c2:	8e 7f       	andi	r24, 0xFE	; 254
    54c4:	80 93 48 00 	sts	0x0048, r24
    54c8:	08 c0       	rjmp	.+16     	; 0x54da <xio_usb_putc+0x4e>
    54ca:	90 93 ba 21 	sts	0x21BA, r25
		} else {
			f.sig = XIO_SIG_EAGAIN;
    54ce:	81 e0       	ldi	r24, 0x01	; 1
    54d0:	80 93 b0 21 	sts	0x21B0, r24
    54d4:	2f ef       	ldi	r18, 0xFF	; 255
    54d6:	3f ef       	ldi	r19, 0xFF	; 255
    54d8:	54 c0       	rjmp	.+168    	; 0x5582 <xio_usb_putc+0xf6>
int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
    54da:	80 91 b8 21 	lds	r24, 0x21B8
    54de:	98 17       	cp	r25, r24
    54e0:	31 f3       	breq	.-52     	; 0x54ae <xio_usb_putc+0x22>
			f.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
    54e2:	90 93 b9 21 	sts	0x21B9, r25
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer
    54e6:	e0 91 b9 21 	lds	r30, 0x21B9
    54ea:	f0 e0       	ldi	r31, 0x00	; 0
    54ec:	e3 55       	subi	r30, 0x53	; 83
    54ee:	fe 4d       	sbci	r31, 0xDE	; 222
    54f0:	44 a3       	std	Z+36, r20	; 0x24

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    54f2:	61 15       	cp	r22, r1
    54f4:	71 05       	cpc	r23, r1
    54f6:	21 f0       	breq	.+8      	; 0x5500 <xio_usb_putc+0x74>
    54f8:	4a 30       	cpi	r20, 0x0A	; 10
    54fa:	11 f4       	brne	.+4      	; 0x5500 <xio_usb_putc+0x74>
    54fc:	4d e0       	ldi	r20, 0x0D	; 13
    54fe:	d1 cf       	rjmp	.-94     	; 0x54a2 <xio_usb_putc+0x16>
    5500:	90 93 ba 21 	sts	0x21BA, r25
		return xio_usb_putc('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (f.usart->STATUS & 0x20) {
    5504:	a0 91 bb 21 	lds	r26, 0x21BB
    5508:	b0 91 bc 21 	lds	r27, 0x21BC
    550c:	11 96       	adiw	r26, 0x01	; 1
    550e:	8c 91       	ld	r24, X
    5510:	11 97       	sbiw	r26, 0x01	; 1
    5512:	85 ff       	sbrs	r24, 5
    5514:	27 c0       	rjmp	.+78     	; 0x5564 <xio_usb_putc+0xd8>
		if (f.tx_buf_head == f.tx_buf_tail) {	// buf might be empty if IRQ got it
    5516:	90 91 b9 21 	lds	r25, 0x21B9
    551a:	80 91 b8 21 	lds	r24, 0x21B8
    551e:	98 17       	cp	r25, r24
    5520:	71 f1       	breq	.+92     	; 0x557e <xio_usb_putc+0xf2>
			return (0);
		}
		f.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    5522:	38 60       	ori	r19, 0x08	; 8
    5524:	20 93 ad 21 	sts	0x21AD, r18
    5528:	30 93 ae 21 	sts	0x21AE, r19
		if (--(f.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    552c:	80 91 b8 21 	lds	r24, 0x21B8
    5530:	81 50       	subi	r24, 0x01	; 1
    5532:	80 93 b8 21 	sts	0x21B8, r24
    5536:	80 91 b8 21 	lds	r24, 0x21B8
    553a:	88 23       	and	r24, r24
    553c:	19 f4       	brne	.+6      	; 0x5544 <xio_usb_putc+0xb8>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    553e:	81 e1       	ldi	r24, 0x11	; 17
    5540:	80 93 b8 21 	sts	0x21B8, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];// write char to TX DATA register
    5544:	e0 91 b8 21 	lds	r30, 0x21B8
    5548:	f0 e0       	ldi	r31, 0x00	; 0
    554a:	e3 55       	subi	r30, 0x53	; 83
    554c:	fe 4d       	sbci	r31, 0xDE	; 222
    554e:	84 a1       	ldd	r24, Z+36	; 0x24
    5550:	8c 93       	st	X, r24
		f.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    5552:	80 91 ad 21 	lds	r24, 0x21AD
    5556:	90 91 ae 21 	lds	r25, 0x21AE
    555a:	97 7f       	andi	r25, 0xF7	; 247
    555c:	80 93 ad 21 	sts	0x21AD, r24
    5560:	90 93 ae 21 	sts	0x21AE, r25
	}
	// enable interrupts regardless
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    5564:	e0 91 bb 21 	lds	r30, 0x21BB
    5568:	f0 91 bc 21 	lds	r31, 0x21BC
    556c:	81 e2       	ldi	r24, 0x21	; 33
    556e:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    5570:	80 91 a2 00 	lds	r24, 0x00A2
    5574:	81 60       	ori	r24, 0x01	; 1
    5576:	e0 ea       	ldi	r30, 0xA0	; 160
    5578:	f0 e0       	ldi	r31, 0x00	; 0
    557a:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    557c:	78 94       	sei
    557e:	20 e0       	ldi	r18, 0x00	; 0
    5580:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    5582:	c9 01       	movw	r24, r18
    5584:	08 95       	ret

00005586 <xio_usb_getc>:
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(f.flags)) {
    5586:	20 91 ad 21 	lds	r18, 0x21AD
    558a:	30 91 ae 21 	lds	r19, 0x21AE
    558e:	24 70       	andi	r18, 0x04	; 4
    5590:	30 70       	andi	r19, 0x00	; 0
    5592:	15 c0       	rjmp	.+42     	; 0x55be <xio_usb_getc+0x38>
    5594:	21 15       	cp	r18, r1
    5596:	31 05       	cpc	r19, r1
    5598:	61 f0       	breq	.+24     	; 0x55b2 <xio_usb_getc+0x2c>
			sleep_mode();
    559a:	80 91 48 00 	lds	r24, 0x0048
    559e:	81 60       	ori	r24, 0x01	; 1
    55a0:	80 93 48 00 	sts	0x0048, r24
    55a4:	88 95       	sleep
    55a6:	80 91 48 00 	lds	r24, 0x0048
    55aa:	8e 7f       	andi	r24, 0xFE	; 254
    55ac:	80 93 48 00 	sts	0x0048, r24
    55b0:	06 c0       	rjmp	.+12     	; 0x55be <xio_usb_getc+0x38>
		} else {
			f.sig = XIO_SIG_EAGAIN;
    55b2:	81 e0       	ldi	r24, 0x01	; 1
    55b4:	80 93 b0 21 	sts	0x21B0, r24
    55b8:	2f ef       	ldi	r18, 0xFF	; 255
    55ba:	3f ef       	ldi	r19, 0xFF	; 255
    55bc:	26 c0       	rjmp	.+76     	; 0x560a <xio_usb_getc+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
    55be:	90 91 b7 21 	lds	r25, 0x21B7
    55c2:	80 91 b6 21 	lds	r24, 0x21B6
    55c6:	98 17       	cp	r25, r24
    55c8:	29 f3       	breq	.-54     	; 0x5594 <xio_usb_getc+0xe>
		} else {
			f.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    55ca:	80 91 b6 21 	lds	r24, 0x21B6
    55ce:	81 50       	subi	r24, 0x01	; 1
    55d0:	80 93 b6 21 	sts	0x21B6, r24
    55d4:	80 91 b6 21 	lds	r24, 0x21B6
    55d8:	88 23       	and	r24, r24
    55da:	19 f4       	brne	.+6      	; 0x55e2 <xio_usb_getc+0x5c>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    55dc:	81 e1       	ldi	r24, 0x11	; 17
    55de:	80 93 b6 21 	sts	0x21B6, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    55e2:	e0 91 b6 21 	lds	r30, 0x21B6
    55e6:	f0 e0       	ldi	r31, 0x00	; 0
    55e8:	e3 55       	subi	r30, 0x53	; 83
    55ea:	fe 4d       	sbci	r31, 0xDE	; 222
    55ec:	82 89       	ldd	r24, Z+18	; 0x12
    55ee:	8f 77       	andi	r24, 0x7F	; 127
    55f0:	80 93 b1 21 	sts	0x21B1, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[f.c])))());
    55f4:	90 e0       	ldi	r25, 0x00	; 0
    55f6:	88 0f       	add	r24, r24
    55f8:	99 1f       	adc	r25, r25
    55fa:	80 5b       	subi	r24, 0xB0	; 176
    55fc:	97 4f       	sbci	r25, 0xF7	; 247
    55fe:	fc 01       	movw	r30, r24
    5600:	25 91       	lpm	r18, Z+
    5602:	34 91       	lpm	r19, Z+
    5604:	f9 01       	movw	r30, r18
    5606:	19 95       	eicall
    5608:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    560a:	c9 01       	movw	r24, r18
    560c:	08 95       	ret

0000560e <_getc_char>:

/* xio_usb_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    560e:	80 91 ad 21 	lds	r24, 0x21AD
    5612:	84 ff       	sbrs	r24, 4
    5614:	08 c0       	rjmp	.+16     	; 0x5626 <_getc_char+0x18>
    5616:	60 91 82 25 	lds	r22, 0x2582
    561a:	70 91 83 25 	lds	r23, 0x2583
    561e:	80 91 b1 21 	lds	r24, 0x21B1
    5622:	0e 94 46 2a 	call	0x548c	; 0x548c <xio_usb_putc>
	return(f.c);
}
    5626:	80 91 b1 21 	lds	r24, 0x21B1
    562a:	90 e0       	ldi	r25, 0x00	; 0
    562c:	08 95       	ret

0000562e <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(f.flags)) f.c = '\n';
    562e:	90 91 ad 21 	lds	r25, 0x21AD
    5632:	96 ff       	sbrs	r25, 6
    5634:	03 c0       	rjmp	.+6      	; 0x563c <_getc_NEWLINE+0xe>
    5636:	8a e0       	ldi	r24, 0x0A	; 10
    5638:	80 93 b1 21 	sts	0x21B1, r24
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    563c:	94 ff       	sbrs	r25, 4
    563e:	08 c0       	rjmp	.+16     	; 0x5650 <_getc_NEWLINE+0x22>
    5640:	60 91 82 25 	lds	r22, 0x2582
    5644:	70 91 83 25 	lds	r23, 0x2583
    5648:	80 91 b1 21 	lds	r24, 0x21B1
    564c:	0e 94 46 2a 	call	0x548c	; 0x548c <xio_usb_putc>
	return(f.c);
}
    5650:	80 91 b1 21 	lds	r24, 0x21B1
    5654:	90 e0       	ldi	r25, 0x00	; 0
    5656:	08 95       	ret

00005658 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(f.flags)) {
    5658:	80 91 ad 21 	lds	r24, 0x21AD
    565c:	87 ff       	sbrs	r24, 7
    565e:	03 c0       	rjmp	.+6      	; 0x5666 <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    5660:	0e 94 17 2b 	call	0x562e	; 0x562e <_getc_NEWLINE>
    5664:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    5666:	0e 94 07 2b 	call	0x560e	; 0x560e <_getc_char>
}
    566a:	08 95       	ret

0000566c <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	f.sig = XIO_SIG_DELETE;
    566c:	89 e0       	ldi	r24, 0x09	; 9
    566e:	80 93 b0 21 	sts	0x21B0, r24
	return(_FDEV_ERR);
}
    5672:	8f ef       	ldi	r24, 0xFF	; 255
    5674:	9f ef       	ldi	r25, 0xFF	; 255
    5676:	08 95       	ret

00005678 <_xio_usb_readchar>:
	}
}

int _xio_usb_readchar(char *buf, uint8_t len)
{
	if (f.rx_buf_head == f.rx_buf_tail) {		// RX ISR buffer empty
    5678:	90 91 b7 21 	lds	r25, 0x21B7
    567c:	80 91 b6 21 	lds	r24, 0x21B6
    5680:	98 17       	cp	r25, r24
    5682:	19 f4       	brne	.+6      	; 0x568a <_xio_usb_readchar+0x12>
    5684:	28 e0       	ldi	r18, 0x08	; 8
    5686:	30 e0       	ldi	r19, 0x00	; 0
    5688:	20 c0       	rjmp	.+64     	; 0x56ca <_xio_usb_readchar+0x52>
		return(TG_BUFFER_EMPTY);
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RX queue read pointer)
    568a:	80 91 b6 21 	lds	r24, 0x21B6
    568e:	81 50       	subi	r24, 0x01	; 1
    5690:	80 93 b6 21 	sts	0x21B6, r24
    5694:	80 91 b6 21 	lds	r24, 0x21B6
    5698:	88 23       	and	r24, r24
    569a:	19 f4       	brne	.+6      	; 0x56a2 <_xio_usb_readchar+0x2a>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    569c:	81 e1       	ldi	r24, 0x11	; 17
    569e:	80 93 b6 21 	sts	0x21B6, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    56a2:	e0 91 b6 21 	lds	r30, 0x21B6
    56a6:	f0 e0       	ldi	r31, 0x00	; 0
    56a8:	e3 55       	subi	r30, 0x53	; 83
    56aa:	fe 4d       	sbci	r31, 0xDE	; 222
    56ac:	82 89       	ldd	r24, Z+18	; 0x12
    56ae:	8f 77       	andi	r24, 0x7F	; 127
    56b0:	80 93 b1 21 	sts	0x21B1, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[f.c])))()); // dispatch on character
    56b4:	90 e0       	ldi	r25, 0x00	; 0
    56b6:	88 0f       	add	r24, r24
    56b8:	99 1f       	adc	r25, r25
    56ba:	80 5b       	subi	r24, 0xB0	; 176
    56bc:	98 4f       	sbci	r25, 0xF8	; 248
    56be:	fc 01       	movw	r30, r24
    56c0:	25 91       	lpm	r18, Z+
    56c2:	34 91       	lpm	r19, Z+
    56c4:	f9 01       	movw	r30, r18
    56c6:	19 95       	eicall
    56c8:	9c 01       	movw	r18, r24
}
    56ca:	c9 01       	movw	r24, r18
    56cc:	08 95       	ret

000056ce <xio_usb_readln>:
 *
 *	Note: LINEMODE flag in device struct is ignored. It's ALWAYS LINEMODE here.
 */

int xio_usb_readln(char *buf, uint8_t len)
{
    56ce:	1f 93       	push	r17
    56d0:	cf 93       	push	r28
    56d2:	df 93       	push	r29
    56d4:	ec 01       	movw	r28, r24
    56d6:	16 2f       	mov	r17, r22
//	uint8_t status = 0;

	if (!IN_LINE(f.flags)) {					// first time thru initializations
    56d8:	80 91 ad 21 	lds	r24, 0x21AD
    56dc:	90 91 ae 21 	lds	r25, 0x21AE
    56e0:	96 fd       	sbrc	r25, 6
    56e2:	11 c0       	rjmp	.+34     	; 0x5706 <xio_usb_readln+0x38>
		f.i = 0;								// zero buffer
    56e4:	10 92 b2 21 	sts	0x21B2, r1
		f.status = 0;							// reset status
    56e8:	10 92 af 21 	sts	0x21AF, r1
		f.len = len;							// save arg into struct 
    56ec:	60 93 b3 21 	sts	0x21B3, r22
		f.buf = buf;							// save arg into struct 
    56f0:	c0 93 b4 21 	sts	0x21B4, r28
    56f4:	d0 93 b5 21 	sts	0x21B5, r29
		f.sig = XIO_SIG_OK;						// reset signal register
    56f8:	10 92 b0 21 	sts	0x21B0, r1
		f.flags |= XIO_FLAG_IN_LINE_bm;			// yes, we are busy getting a line
    56fc:	90 64       	ori	r25, 0x40	; 64
    56fe:	80 93 ad 21 	sts	0x21AD, r24
    5702:	90 93 ae 21 	sts	0x21AE, r25
	}
	while (TRUE) { 
		switch (f.status = _xio_usb_readchar(buf, len)) {
    5706:	ce 01       	movw	r24, r28
    5708:	61 2f       	mov	r22, r17
    570a:	0e 94 3c 2b 	call	0x5678	; 0x5678 <_xio_usb_readchar>
    570e:	80 93 af 21 	sts	0x21AF, r24
    5712:	87 30       	cpi	r24, 0x07	; 7
    5714:	29 f0       	breq	.+10     	; 0x5720 <xio_usb_readln+0x52>
    5716:	88 30       	cpi	r24, 0x08	; 8
    5718:	31 f0       	breq	.+12     	; 0x5726 <xio_usb_readln+0x58>
    571a:	84 30       	cpi	r24, 0x04	; 4
    571c:	a1 f7       	brne	.-24     	; 0x5706 <xio_usb_readln+0x38>
    571e:	06 c0       	rjmp	.+12     	; 0x572c <xio_usb_readln+0x5e>
    5720:	27 e0       	ldi	r18, 0x07	; 7
    5722:	30 e0       	ldi	r19, 0x00	; 0
    5724:	05 c0       	rjmp	.+10     	; 0x5730 <xio_usb_readln+0x62>
    5726:	21 e0       	ldi	r18, 0x01	; 1
    5728:	30 e0       	ldi	r19, 0x00	; 0
    572a:	02 c0       	rjmp	.+4      	; 0x5730 <xio_usb_readln+0x62>
    572c:	20 e0       	ldi	r18, 0x00	; 0
    572e:	30 e0       	ldi	r19, 0x00	; 0
			case (TG_BUFFER_FULL): return (f.status); break;	// overrun error
			case (TG_EOL): return (TG_OK); break;				// got completed line
			case (TG_EAGAIN): break;							// loop
		}
	}
}
    5730:	c9 01       	movw	r24, r18
    5732:	df 91       	pop	r29
    5734:	cf 91       	pop	r28
    5736:	1f 91       	pop	r17
    5738:	08 95       	ret

0000573a <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (f.i > f.len) {							// trap buffer overflow
    573a:	90 91 b2 21 	lds	r25, 0x21B2
    573e:	20 91 b3 21 	lds	r18, 0x21B3
    5742:	e0 91 b4 21 	lds	r30, 0x21B4
    5746:	f0 91 b5 21 	lds	r31, 0x21B5
    574a:	29 17       	cp	r18, r25
    574c:	48 f4       	brcc	.+18     	; 0x5760 <_readln_char+0x26>
		f.sig = XIO_SIG_EOL;
    574e:	82 e0       	ldi	r24, 0x02	; 2
    5750:	80 93 b0 21 	sts	0x21B0, r24
		f.buf[f.len] = NUL;						// f.len is zero based
    5754:	e2 0f       	add	r30, r18
    5756:	f1 1d       	adc	r31, r1
    5758:	10 82       	st	Z, r1
    575a:	27 e0       	ldi	r18, 0x07	; 7
    575c:	30 e0       	ldi	r19, 0x00	; 0
    575e:	16 c0       	rjmp	.+44     	; 0x578c <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	f.buf[f.i++] = f.c;
    5760:	e9 0f       	add	r30, r25
    5762:	f1 1d       	adc	r31, r1
    5764:	80 91 b1 21 	lds	r24, 0x21B1
    5768:	80 83       	st	Z, r24
    576a:	9f 5f       	subi	r25, 0xFF	; 255
    576c:	90 93 b2 21 	sts	0x21B2, r25
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);// conditional echo
    5770:	80 91 ad 21 	lds	r24, 0x21AD
    5774:	84 ff       	sbrs	r24, 4
    5776:	08 c0       	rjmp	.+16     	; 0x5788 <_readln_char+0x4e>
    5778:	60 91 82 25 	lds	r22, 0x2582
    577c:	70 91 83 25 	lds	r23, 0x2583
    5780:	80 91 b1 21 	lds	r24, 0x21B1
    5784:	0e 94 46 2a 	call	0x548c	; 0x548c <xio_usb_putc>
    5788:	21 e0       	ldi	r18, 0x01	; 1
    578a:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_EAGAIN);							// line is still in process
}
    578c:	c9 01       	movw	r24, r18
    578e:	08 95       	ret

00005790 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	f.sig = XIO_SIG_EOL;
    5790:	82 e0       	ldi	r24, 0x02	; 2
    5792:	80 93 b0 21 	sts	0x21B0, r24
	f.buf[f.i] = NUL;
    5796:	80 91 b2 21 	lds	r24, 0x21B2
    579a:	e0 91 b4 21 	lds	r30, 0x21B4
    579e:	f0 91 b5 21 	lds	r31, 0x21B5
    57a2:	e8 0f       	add	r30, r24
    57a4:	f1 1d       	adc	r31, r1
    57a6:	10 82       	st	Z, r1
	f.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    57a8:	20 91 ad 21 	lds	r18, 0x21AD
    57ac:	30 91 ae 21 	lds	r19, 0x21AE
    57b0:	c9 01       	movw	r24, r18
    57b2:	9f 7b       	andi	r25, 0xBF	; 191
    57b4:	80 93 ad 21 	sts	0x21AD, r24
    57b8:	90 93 ae 21 	sts	0x21AE, r25
	if (ECHO(f.flags)) xio_usb_putc('\n',stdout);// echo a newline
    57bc:	24 ff       	sbrs	r18, 4
    57be:	07 c0       	rjmp	.+14     	; 0x57ce <_readln_NEWLINE+0x3e>
    57c0:	60 91 82 25 	lds	r22, 0x2582
    57c4:	70 91 83 25 	lds	r23, 0x2583
    57c8:	8a e0       	ldi	r24, 0x0A	; 10
    57ca:	0e 94 46 2a 	call	0x548c	; 0x548c <xio_usb_putc>
	return (TG_EOL);							// return for end-of-line
}
    57ce:	84 e0       	ldi	r24, 0x04	; 4
    57d0:	90 e0       	ldi	r25, 0x00	; 0
    57d2:	08 95       	ret

000057d4 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(f.flags)) {
    57d4:	80 91 ad 21 	lds	r24, 0x21AD
    57d8:	87 ff       	sbrs	r24, 7
    57da:	03 c0       	rjmp	.+6      	; 0x57e2 <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    57dc:	0e 94 c8 2b 	call	0x5790	; 0x5790 <_readln_NEWLINE>
    57e0:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    57e2:	0e 94 9d 2b 	call	0x573a	; 0x573a <_readln_char>
	}
}
    57e6:	08 95       	ret

000057e8 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--f.i >= 0) {
    57e8:	80 91 b2 21 	lds	r24, 0x21B2
    57ec:	81 50       	subi	r24, 0x01	; 1
    57ee:	80 93 b2 21 	sts	0x21B2, r24
		if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    57f2:	80 91 ad 21 	lds	r24, 0x21AD
    57f6:	84 ff       	sbrs	r24, 4
    57f8:	08 c0       	rjmp	.+16     	; 0x580a <_readln_DELETE+0x22>
    57fa:	60 91 82 25 	lds	r22, 0x2582
    57fe:	70 91 83 25 	lds	r23, 0x2583
    5802:	80 91 b1 21 	lds	r24, 0x21B1
    5806:	0e 94 46 2a 	call	0x548c	; 0x548c <xio_usb_putc>
	} else {
		f.i = 0;
	}
	return (TG_EAGAIN);							// line is still in process
}
    580a:	81 e0       	ldi	r24, 0x01	; 1
    580c:	90 e0       	ldi	r25, 0x00	; 0
    580e:	08 95       	ret

00005810 <_sig_KILL>:
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
	f.sig = XIO_SIG_KILL;
    5810:	84 e0       	ldi	r24, 0x04	; 4
    5812:	80 93 b0 21 	sts	0x21B0, r24
	return(_FDEV_ERR);
}
    5816:	8f ef       	ldi	r24, 0xFF	; 255
    5818:	9f ef       	ldi	r25, 0xFF	; 255
    581a:	08 95       	ret

0000581c <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
	f.sig = XIO_SIG_PAUSE;
    581c:	86 e0       	ldi	r24, 0x06	; 6
    581e:	80 93 b0 21 	sts	0x21B0, r24
	return(_FDEV_ERR);
}
    5822:	8f ef       	ldi	r24, 0xFF	; 255
    5824:	9f ef       	ldi	r25, 0xFF	; 255
    5826:	08 95       	ret

00005828 <_sig_RESUME>:

static int _sig_RESUME(void)
{
	f.sig = XIO_SIG_RESUME;
    5828:	87 e0       	ldi	r24, 0x07	; 7
    582a:	80 93 b0 21 	sts	0x21B0, r24
	return(_FDEV_ERR);
}
    582e:	8f ef       	ldi	r24, 0xFF	; 255
    5830:	9f ef       	ldi	r25, 0xFF	; 255
    5832:	08 95       	ret

00005834 <xio_usb_queue_RX_char>:
/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_usb_queue_RX_char(const char c)
{
    5834:	28 2f       	mov	r18, r24
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    5836:	83 30       	cpi	r24, 0x03	; 3
    5838:	31 f4       	brne	.+12     	; 0x5846 <xio_usb_queue_RX_char+0x12>
		f.sig = XIO_SIG_KILL;					// set signal value
    583a:	84 e0       	ldi	r24, 0x04	; 4
    583c:	80 93 b0 21 	sts	0x21B0, r24
		signal_etx();							// call app-specific signal handler
    5840:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <signal_etx>
    5844:	08 95       	ret
		return;
	}

	// normal path
	if ((--f.rx_buf_head) == 0) { 				// wrap condition
    5846:	80 91 b7 21 	lds	r24, 0x21B7
    584a:	81 50       	subi	r24, 0x01	; 1
    584c:	80 93 b7 21 	sts	0x21B7, r24
    5850:	80 91 b7 21 	lds	r24, 0x21B7
    5854:	88 23       	and	r24, r24
    5856:	19 f4       	brne	.+6      	; 0x585e <xio_usb_queue_RX_char+0x2a>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    5858:	81 e1       	ldi	r24, 0x11	; 17
    585a:	80 93 b7 21 	sts	0x21B7, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    585e:	90 91 b7 21 	lds	r25, 0x21B7
    5862:	80 91 b6 21 	lds	r24, 0x21B6
    5866:	98 17       	cp	r25, r24
    5868:	39 f0       	breq	.+14     	; 0x5878 <xio_usb_queue_RX_char+0x44>
		f.rx_buf[f.rx_buf_head] = c;			// FAKE INPUT DATA
    586a:	e0 91 b7 21 	lds	r30, 0x21B7
    586e:	f0 e0       	ldi	r31, 0x00	; 0
    5870:	e3 55       	subi	r30, 0x53	; 83
    5872:	fe 4d       	sbci	r31, 0xDE	; 222
    5874:	22 8b       	std	Z+18, r18	; 0x12
    5876:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    5878:	80 91 b7 21 	lds	r24, 0x21B7
    587c:	8f 5f       	subi	r24, 0xFF	; 255
    587e:	80 93 b7 21 	sts	0x21B7, r24
    5882:	80 91 b7 21 	lds	r24, 0x21B7
    5886:	82 31       	cpi	r24, 0x12	; 18
    5888:	18 f0       	brcs	.+6      	; 0x5890 <xio_usb_queue_RX_char+0x5c>
		f.rx_buf_head = 1;
    588a:	81 e0       	ldi	r24, 0x01	; 1
    588c:	80 93 b7 21 	sts	0x21B7, r24
    5890:	08 95       	ret

00005892 <xio_usb_queue_RX_string>:
/*
 * xio_usb_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_usb_queue_RX_string(char *buf)
{
    5892:	1f 93       	push	r17
    5894:	cf 93       	push	r28
    5896:	df 93       	push	r29
    5898:	ec 01       	movw	r28, r24
    589a:	10 e0       	ldi	r17, 0x00	; 0
    589c:	02 c0       	rjmp	.+4      	; 0x58a2 <xio_usb_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_usb_queue_RX_char(c);
    589e:	0e 94 1a 2c 	call	0x5834	; 0x5834 <xio_usb_queue_RX_char>
void xio_usb_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    58a2:	fe 01       	movw	r30, r28
    58a4:	e1 0f       	add	r30, r17
    58a6:	f1 1d       	adc	r31, r1
    58a8:	80 81       	ld	r24, Z
    58aa:	1f 5f       	subi	r17, 0xFF	; 255
    58ac:	88 23       	and	r24, r24
    58ae:	b9 f7       	brne	.-18     	; 0x589e <xio_usb_queue_RX_string+0xc>
		xio_usb_queue_RX_char(c);
	}
}
    58b0:	df 91       	pop	r29
    58b2:	cf 91       	pop	r28
    58b4:	1f 91       	pop	r17
    58b6:	08 95       	ret

000058b8 <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular buffers work
 */

ISR(USB_RX_ISR_vect)	//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    58b8:	1f 92       	push	r1
    58ba:	0f 92       	push	r0
    58bc:	0f b6       	in	r0, 0x3f	; 63
    58be:	0f 92       	push	r0
    58c0:	0b b6       	in	r0, 0x3b	; 59
    58c2:	0f 92       	push	r0
    58c4:	11 24       	eor	r1, r1
    58c6:	2f 93       	push	r18
    58c8:	3f 93       	push	r19
    58ca:	4f 93       	push	r20
    58cc:	5f 93       	push	r21
    58ce:	6f 93       	push	r22
    58d0:	7f 93       	push	r23
    58d2:	8f 93       	push	r24
    58d4:	9f 93       	push	r25
    58d6:	af 93       	push	r26
    58d8:	bf 93       	push	r27
    58da:	ef 93       	push	r30
    58dc:	ff 93       	push	r31
	uint8_t c = f.usart->DATA;					// can only read DATA once
    58de:	e0 91 bb 21 	lds	r30, 0x21BB
    58e2:	f0 91 bc 21 	lds	r31, 0x21BC
    58e6:	20 81       	ld	r18, Z

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    58e8:	23 30       	cpi	r18, 0x03	; 3
    58ea:	31 f4       	brne	.+12     	; 0x58f8 <__vector_25+0x40>
		f.sig = XIO_SIG_KILL;					// set signal value
    58ec:	84 e0       	ldi	r24, 0x04	; 4
    58ee:	80 93 b0 21 	sts	0x21B0, r24
		signal_etx();							// call app-specific signal handler
    58f2:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <signal_etx>
    58f6:	25 c0       	rjmp	.+74     	; 0x5942 <__vector_25+0x8a>
		return;
	}

	// normal character path
	if ((--f.rx_buf_head) == 0) { 				// advance buffer head with wrap
    58f8:	80 91 b7 21 	lds	r24, 0x21B7
    58fc:	81 50       	subi	r24, 0x01	; 1
    58fe:	80 93 b7 21 	sts	0x21B7, r24
    5902:	80 91 b7 21 	lds	r24, 0x21B7
    5906:	88 23       	and	r24, r24
    5908:	19 f4       	brne	.+6      	; 0x5910 <__vector_25+0x58>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    590a:	81 e1       	ldi	r24, 0x11	; 17
    590c:	80 93 b7 21 	sts	0x21B7, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    5910:	90 91 b7 21 	lds	r25, 0x21B7
    5914:	80 91 b6 21 	lds	r24, 0x21B6
    5918:	98 17       	cp	r25, r24
    591a:	39 f0       	breq	.+14     	; 0x592a <__vector_25+0x72>
		f.rx_buf[f.rx_buf_head] = c;
    591c:	e0 91 b7 21 	lds	r30, 0x21B7
    5920:	f0 e0       	ldi	r31, 0x00	; 0
    5922:	e3 55       	subi	r30, 0x53	; 83
    5924:	fe 4d       	sbci	r31, 0xDE	; 222
    5926:	22 8b       	std	Z+18, r18	; 0x12
    5928:	0c c0       	rjmp	.+24     	; 0x5942 <__vector_25+0x8a>
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    592a:	80 91 b7 21 	lds	r24, 0x21B7
    592e:	8f 5f       	subi	r24, 0xFF	; 255
    5930:	80 93 b7 21 	sts	0x21B7, r24
    5934:	80 91 b7 21 	lds	r24, 0x21B7
    5938:	82 31       	cpi	r24, 0x12	; 18
    593a:	18 f0       	brcs	.+6      	; 0x5942 <__vector_25+0x8a>
		f.rx_buf_head = 1;
    593c:	81 e0       	ldi	r24, 0x01	; 1
    593e:	80 93 b7 21 	sts	0x21B7, r24
	}
	// activate flow control here or before it gets to this level
}
    5942:	ff 91       	pop	r31
    5944:	ef 91       	pop	r30
    5946:	bf 91       	pop	r27
    5948:	af 91       	pop	r26
    594a:	9f 91       	pop	r25
    594c:	8f 91       	pop	r24
    594e:	7f 91       	pop	r23
    5950:	6f 91       	pop	r22
    5952:	5f 91       	pop	r21
    5954:	4f 91       	pop	r20
    5956:	3f 91       	pop	r19
    5958:	2f 91       	pop	r18
    595a:	0f 90       	pop	r0
    595c:	0b be       	out	0x3b, r0	; 59
    595e:	0f 90       	pop	r0
    5960:	0f be       	out	0x3f, r0	; 63
    5962:	0f 90       	pop	r0
    5964:	1f 90       	pop	r1
    5966:	18 95       	reti

00005968 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    5968:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    596a:	e0 ec       	ldi	r30, 0xC0	; 192
    596c:	f1 e0       	ldi	r31, 0x01	; 1
    596e:	80 91 cf 01 	lds	r24, 0x01CF
    5972:	87 fd       	sbrc	r24, 7
    5974:	fa cf       	rjmp	.-12     	; 0x596a <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    5976:	26 2f       	mov	r18, r22
    5978:	30 e0       	ldi	r19, 0x00	; 0
    597a:	2f 71       	andi	r18, 0x1F	; 31
    597c:	30 70       	andi	r19, 0x00	; 0
    597e:	89 2f       	mov	r24, r25
    5980:	90 e0       	ldi	r25, 0x00	; 0
    5982:	45 e0       	ldi	r20, 0x05	; 5
    5984:	88 0f       	add	r24, r24
    5986:	99 1f       	adc	r25, r25
    5988:	4a 95       	dec	r20
    598a:	e1 f7       	brne	.-8      	; 0x5984 <EEPROM_ReadByte+0x1c>
    598c:	28 2b       	or	r18, r24
    598e:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    5990:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5994:	83 2f       	mov	r24, r19
    5996:	8f 71       	andi	r24, 0x1F	; 31
    5998:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    599a:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    599c:	86 e0       	ldi	r24, 0x06	; 6
    599e:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    59a0:	ef 93       	push	r30
    59a2:	ff 93       	push	r31
    59a4:	0f 93       	push	r16
    59a6:	2f 93       	push	r18
    59a8:	eb ec       	ldi	r30, 0xCB	; 203
    59aa:	f1 e0       	ldi	r31, 0x01	; 1
    59ac:	08 ed       	ldi	r16, 0xD8	; 216
    59ae:	21 e0       	ldi	r18, 0x01	; 1
    59b0:	04 bf       	out	0x34, r16	; 52
    59b2:	20 83       	st	Z, r18
    59b4:	2f 91       	pop	r18
    59b6:	0f 91       	pop	r16
    59b8:	ff 91       	pop	r31
    59ba:	ef 91       	pop	r30

	return NVM.DATA0;
    59bc:	80 91 c4 01 	lds	r24, 0x01C4
}
    59c0:	08 95       	ret

000059c2 <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    59c2:	68 2f       	mov	r22, r24
    59c4:	6f 71       	andi	r22, 0x1F	; 31
    59c6:	55 e0       	ldi	r21, 0x05	; 5
    59c8:	96 95       	lsr	r25
    59ca:	87 95       	ror	r24
    59cc:	5a 95       	dec	r21
    59ce:	e1 f7       	brne	.-8      	; 0x59c8 <eeprom_get_char+0x6>
    59d0:	0e 94 b4 2c 	call	0x5968	; 0x5968 <EEPROM_ReadByte>
}
    59d4:	08 95       	ret

000059d6 <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    59d6:	8f 92       	push	r8
    59d8:	9f 92       	push	r9
    59da:	af 92       	push	r10
    59dc:	bf 92       	push	r11
    59de:	cf 92       	push	r12
    59e0:	df 92       	push	r13
    59e2:	ff 92       	push	r15
    59e4:	0f 93       	push	r16
    59e6:	1f 93       	push	r17
    59e8:	cf 93       	push	r28
    59ea:	df 93       	push	r29
    59ec:	4c 01       	movw	r8, r24
    59ee:	5b 01       	movw	r10, r22
    59f0:	6a 01       	movw	r12, r20
    59f2:	8b 01       	movw	r16, r22
    59f4:	ea 01       	movw	r28, r20
    59f6:	ff 24       	eor	r15, r15
    59f8:	18 c0       	rjmp	.+48     	; 0x5a2a <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    59fa:	c8 01       	movw	r24, r16
    59fc:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    5a00:	ff 20       	and	r15, r15
    5a02:	19 f0       	breq	.+6      	; 0x5a0a <memcpy_from_eeprom_with_checksum+0x34>
    5a04:	21 e0       	ldi	r18, 0x01	; 1
    5a06:	30 e0       	ldi	r19, 0x00	; 0
    5a08:	08 c0       	rjmp	.+16     	; 0x5a1a <memcpy_from_eeprom_with_checksum+0x44>
    5a0a:	2f 2d       	mov	r18, r15
    5a0c:	33 27       	eor	r19, r19
    5a0e:	27 fd       	sbrc	r18, 7
    5a10:	30 95       	com	r19
    5a12:	22 27       	eor	r18, r18
    5a14:	33 0f       	add	r19, r19
    5a16:	22 1f       	adc	r18, r18
    5a18:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    5a1a:	0f 5f       	subi	r16, 0xFF	; 255
    5a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    5a1e:	f8 2e       	mov	r15, r24
    5a20:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    5a22:	f4 01       	movw	r30, r8
    5a24:	81 93       	st	Z+, r24
    5a26:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    5a28:	21 97       	sbiw	r28, 0x01	; 1
    5a2a:	20 97       	sbiw	r28, 0x00	; 0
    5a2c:	31 f7       	brne	.-52     	; 0x59fa <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    5a2e:	c6 01       	movw	r24, r12
    5a30:	8a 0d       	add	r24, r10
    5a32:	9b 1d       	adc	r25, r11
    5a34:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <eeprom_get_char>
    5a38:	20 e0       	ldi	r18, 0x00	; 0
    5a3a:	30 e0       	ldi	r19, 0x00	; 0
    5a3c:	f8 16       	cp	r15, r24
    5a3e:	11 f4       	brne	.+4      	; 0x5a44 <memcpy_from_eeprom_with_checksum+0x6e>
    5a40:	21 e0       	ldi	r18, 0x01	; 1
    5a42:	30 e0       	ldi	r19, 0x00	; 0
}
    5a44:	c9 01       	movw	r24, r18
    5a46:	df 91       	pop	r29
    5a48:	cf 91       	pop	r28
    5a4a:	1f 91       	pop	r17
    5a4c:	0f 91       	pop	r16
    5a4e:	ff 90       	pop	r15
    5a50:	df 90       	pop	r13
    5a52:	cf 90       	pop	r12
    5a54:	bf 90       	pop	r11
    5a56:	af 90       	pop	r10
    5a58:	9f 90       	pop	r9
    5a5a:	8f 90       	pop	r8
    5a5c:	08 95       	ret

00005a5e <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a5e:	80 91 cf 01 	lds	r24, 0x01CF
    5a62:	87 fd       	sbrc	r24, 7
    5a64:	fc cf       	rjmp	.-8      	; 0x5a5e <EEPROM_WaitForNVM>
}
    5a66:	08 95       	ret

00005a68 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a68:	80 91 cf 01 	lds	r24, 0x01CF
    5a6c:	87 fd       	sbrc	r24, 7
    5a6e:	fc cf       	rjmp	.-8      	; 0x5a68 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    5a70:	80 91 cf 01 	lds	r24, 0x01CF
    5a74:	81 ff       	sbrs	r24, 1
    5a76:	12 c0       	rjmp	.+36     	; 0x5a9c <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    5a78:	86 e3       	ldi	r24, 0x36	; 54
    5a7a:	e0 ec       	ldi	r30, 0xC0	; 192
    5a7c:	f1 e0       	ldi	r31, 0x01	; 1
    5a7e:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    5a80:	ef 93       	push	r30
    5a82:	ff 93       	push	r31
    5a84:	0f 93       	push	r16
    5a86:	2f 93       	push	r18
    5a88:	eb ec       	ldi	r30, 0xCB	; 203
    5a8a:	f1 e0       	ldi	r31, 0x01	; 1
    5a8c:	08 ed       	ldi	r16, 0xD8	; 216
    5a8e:	21 e0       	ldi	r18, 0x01	; 1
    5a90:	04 bf       	out	0x34, r16	; 52
    5a92:	20 83       	st	Z, r18
    5a94:	2f 91       	pop	r18
    5a96:	0f 91       	pop	r16
    5a98:	ff 91       	pop	r31
    5a9a:	ef 91       	pop	r30
    5a9c:	08 95       	ret

00005a9e <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    5a9e:	df 92       	push	r13
    5aa0:	ef 92       	push	r14
    5aa2:	ff 92       	push	r15
    5aa4:	0f 93       	push	r16
    5aa6:	1f 93       	push	r17
    5aa8:	e8 2e       	mov	r14, r24
    5aaa:	06 2f       	mov	r16, r22
    5aac:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    5aae:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5ab2:	e0 ec       	ldi	r30, 0xC0	; 192
    5ab4:	f1 e0       	ldi	r31, 0x01	; 1
    5ab6:	83 e3       	ldi	r24, 0x33	; 51
    5ab8:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    5aba:	10 e0       	ldi	r17, 0x00	; 0
    5abc:	0f 71       	andi	r16, 0x1F	; 31
    5abe:	10 70       	andi	r17, 0x00	; 0
    5ac0:	ff 24       	eor	r15, r15
    5ac2:	75 e0       	ldi	r23, 0x05	; 5
    5ac4:	ee 0c       	add	r14, r14
    5ac6:	ff 1c       	adc	r15, r15
    5ac8:	7a 95       	dec	r23
    5aca:	e1 f7       	brne	.-8      	; 0x5ac4 <EEPROM_WriteByte+0x26>
    5acc:	0e 29       	or	r16, r14
    5ace:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    5ad0:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5ad2:	81 2f       	mov	r24, r17
    5ad4:	8f 71       	andi	r24, 0x1F	; 31
    5ad6:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5ad8:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5ada:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5adc:	85 e3       	ldi	r24, 0x35	; 53
    5ade:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5ae0:	ef 93       	push	r30
    5ae2:	ff 93       	push	r31
    5ae4:	0f 93       	push	r16
    5ae6:	2f 93       	push	r18
    5ae8:	eb ec       	ldi	r30, 0xCB	; 203
    5aea:	f1 e0       	ldi	r31, 0x01	; 1
    5aec:	08 ed       	ldi	r16, 0xD8	; 216
    5aee:	21 e0       	ldi	r18, 0x01	; 1
    5af0:	04 bf       	out	0x34, r16	; 52
    5af2:	20 83       	st	Z, r18
    5af4:	2f 91       	pop	r18
    5af6:	0f 91       	pop	r16
    5af8:	ff 91       	pop	r31
    5afa:	ef 91       	pop	r30
}
    5afc:	1f 91       	pop	r17
    5afe:	0f 91       	pop	r16
    5b00:	ff 90       	pop	r15
    5b02:	ef 90       	pop	r14
    5b04:	df 90       	pop	r13
    5b06:	08 95       	ret

00005b08 <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    5b08:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    5b0a:	68 2f       	mov	r22, r24
    5b0c:	6f 71       	andi	r22, 0x1F	; 31
    5b0e:	e5 e0       	ldi	r30, 0x05	; 5
    5b10:	96 95       	lsr	r25
    5b12:	87 95       	ror	r24
    5b14:	ea 95       	dec	r30
    5b16:	e1 f7       	brne	.-8      	; 0x5b10 <eeprom_put_char+0x8>
    5b18:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <EEPROM_WriteByte>
}
    5b1c:	08 95       	ret

00005b1e <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    5b1e:	8f 92       	push	r8
    5b20:	9f 92       	push	r9
    5b22:	af 92       	push	r10
    5b24:	bf 92       	push	r11
    5b26:	cf 92       	push	r12
    5b28:	df 92       	push	r13
    5b2a:	ef 92       	push	r14
    5b2c:	ff 92       	push	r15
    5b2e:	0f 93       	push	r16
    5b30:	df 93       	push	r29
    5b32:	cf 93       	push	r28
    5b34:	0f 92       	push	r0
    5b36:	0f 92       	push	r0
    5b38:	cd b7       	in	r28, 0x3d	; 61
    5b3a:	de b7       	in	r29, 0x3e	; 62
    5b3c:	5c 01       	movw	r10, r24
    5b3e:	6b 01       	movw	r12, r22
    5b40:	7a 01       	movw	r14, r20
    5b42:	4a 01       	movw	r8, r20
    5b44:	00 e0       	ldi	r16, 0x00	; 0
    5b46:	1e c0       	rjmp	.+60     	; 0x5b84 <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    5b48:	00 23       	and	r16, r16
    5b4a:	19 f0       	breq	.+6      	; 0x5b52 <memcpy_to_eeprom_with_checksum+0x34>
    5b4c:	21 e0       	ldi	r18, 0x01	; 1
    5b4e:	30 e0       	ldi	r19, 0x00	; 0
    5b50:	08 c0       	rjmp	.+16     	; 0x5b62 <memcpy_to_eeprom_with_checksum+0x44>
    5b52:	20 2f       	mov	r18, r16
    5b54:	33 27       	eor	r19, r19
    5b56:	27 fd       	sbrc	r18, 7
    5b58:	30 95       	com	r19
    5b5a:	22 27       	eor	r18, r18
    5b5c:	33 0f       	add	r19, r19
    5b5e:	22 1f       	adc	r18, r18
    5b60:	33 27       	eor	r19, r19
    checksum += *source;
    5b62:	f6 01       	movw	r30, r12
    5b64:	61 91       	ld	r22, Z+
    5b66:	6f 01       	movw	r12, r30
    5b68:	06 2f       	mov	r16, r22
    5b6a:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    5b6c:	9c 01       	movw	r18, r24
    5b6e:	2f 5f       	subi	r18, 0xFF	; 255
    5b70:	3f 4f       	sbci	r19, 0xFF	; 255
    5b72:	29 83       	std	Y+1, r18	; 0x01
    5b74:	3a 83       	std	Y+2, r19	; 0x02
    5b76:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    5b7a:	08 94       	sec
    5b7c:	81 08       	sbc	r8, r1
    5b7e:	91 08       	sbc	r9, r1
    5b80:	89 81       	ldd	r24, Y+1	; 0x01
    5b82:	9a 81       	ldd	r25, Y+2	; 0x02
    5b84:	81 14       	cp	r8, r1
    5b86:	91 04       	cpc	r9, r1
    5b88:	f9 f6       	brne	.-66     	; 0x5b48 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    5b8a:	c7 01       	movw	r24, r14
    5b8c:	8a 0d       	add	r24, r10
    5b8e:	9b 1d       	adc	r25, r11
    5b90:	60 2f       	mov	r22, r16
    5b92:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <eeprom_put_char>
}
    5b96:	0f 90       	pop	r0
    5b98:	0f 90       	pop	r0
    5b9a:	cf 91       	pop	r28
    5b9c:	df 91       	pop	r29
    5b9e:	0f 91       	pop	r16
    5ba0:	ff 90       	pop	r15
    5ba2:	ef 90       	pop	r14
    5ba4:	df 90       	pop	r13
    5ba6:	cf 90       	pop	r12
    5ba8:	bf 90       	pop	r11
    5baa:	af 90       	pop	r10
    5bac:	9f 90       	pop	r9
    5bae:	8f 90       	pop	r8
    5bb0:	08 95       	ret

00005bb2 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    5bb2:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5bb4:	e0 ec       	ldi	r30, 0xC0	; 192
    5bb6:	f1 e0       	ldi	r31, 0x01	; 1
    5bb8:	80 91 cf 01 	lds	r24, 0x01CF
    5bbc:	87 fd       	sbrc	r24, 7
    5bbe:	fa cf       	rjmp	.-12     	; 0x5bb4 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5bc0:	83 e3       	ldi	r24, 0x33	; 51
    5bc2:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    5bc4:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    5bc8:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5bca:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5bcc:	64 83       	std	Z+4, r22	; 0x04
}
    5bce:	08 95       	ret

00005bd0 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    5bd0:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5bd2:	e0 ec       	ldi	r30, 0xC0	; 192
    5bd4:	f1 e0       	ldi	r31, 0x01	; 1
    5bd6:	80 91 cf 01 	lds	r24, 0x01CF
    5bda:	87 fd       	sbrc	r24, 7
    5bdc:	fa cf       	rjmp	.-12     	; 0x5bd2 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5bde:	83 e3       	ldi	r24, 0x33	; 51
    5be0:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    5be2:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5be4:	12 82       	std	Z+2, r1	; 0x02
    5be6:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    5be8:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    5bec:	8d 91       	ld	r24, X+
    5bee:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    5bf0:	9f 5f       	subi	r25, 0xFF	; 255
    5bf2:	90 32       	cpi	r25, 0x20	; 32
    5bf4:	c9 f7       	brne	.-14     	; 0x5be8 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    5bf6:	08 95       	ret

00005bf8 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    5bf8:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5bfa:	e0 ec       	ldi	r30, 0xC0	; 192
    5bfc:	f1 e0       	ldi	r31, 0x01	; 1
    5bfe:	80 91 cf 01 	lds	r24, 0x01CF
    5c02:	87 fd       	sbrc	r24, 7
    5c04:	fa cf       	rjmp	.-12     	; 0x5bfa <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5c06:	89 2f       	mov	r24, r25
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	a5 e0       	ldi	r26, 0x05	; 5
    5c0c:	88 0f       	add	r24, r24
    5c0e:	99 1f       	adc	r25, r25
    5c10:	aa 95       	dec	r26
    5c12:	e1 f7       	brne	.-8      	; 0x5c0c <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5c14:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5c18:	89 2f       	mov	r24, r25
    5c1a:	8f 71       	andi	r24, 0x1F	; 31
    5c1c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5c1e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5c20:	85 e3       	ldi	r24, 0x35	; 53
    5c22:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5c24:	ef 93       	push	r30
    5c26:	ff 93       	push	r31
    5c28:	0f 93       	push	r16
    5c2a:	2f 93       	push	r18
    5c2c:	eb ec       	ldi	r30, 0xCB	; 203
    5c2e:	f1 e0       	ldi	r31, 0x01	; 1
    5c30:	08 ed       	ldi	r16, 0xD8	; 216
    5c32:	21 e0       	ldi	r18, 0x01	; 1
    5c34:	04 bf       	out	0x34, r16	; 52
    5c36:	20 83       	st	Z, r18
    5c38:	2f 91       	pop	r18
    5c3a:	0f 91       	pop	r16
    5c3c:	ff 91       	pop	r31
    5c3e:	ef 91       	pop	r30
}
    5c40:	08 95       	ret

00005c42 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    5c42:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5c44:	e0 ec       	ldi	r30, 0xC0	; 192
    5c46:	f1 e0       	ldi	r31, 0x01	; 1
    5c48:	80 91 cf 01 	lds	r24, 0x01CF
    5c4c:	87 fd       	sbrc	r24, 7
    5c4e:	fa cf       	rjmp	.-12     	; 0x5c44 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5c50:	89 2f       	mov	r24, r25
    5c52:	90 e0       	ldi	r25, 0x00	; 0
    5c54:	b5 e0       	ldi	r27, 0x05	; 5
    5c56:	88 0f       	add	r24, r24
    5c58:	99 1f       	adc	r25, r25
    5c5a:	ba 95       	dec	r27
    5c5c:	e1 f7       	brne	.-8      	; 0x5c56 <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5c5e:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5c62:	89 2f       	mov	r24, r25
    5c64:	8f 71       	andi	r24, 0x1F	; 31
    5c66:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5c68:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    5c6a:	82 e3       	ldi	r24, 0x32	; 50
    5c6c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5c6e:	ef 93       	push	r30
    5c70:	ff 93       	push	r31
    5c72:	0f 93       	push	r16
    5c74:	2f 93       	push	r18
    5c76:	eb ec       	ldi	r30, 0xCB	; 203
    5c78:	f1 e0       	ldi	r31, 0x01	; 1
    5c7a:	08 ed       	ldi	r16, 0xD8	; 216
    5c7c:	21 e0       	ldi	r18, 0x01	; 1
    5c7e:	04 bf       	out	0x34, r16	; 52
    5c80:	20 83       	st	Z, r18
    5c82:	2f 91       	pop	r18
    5c84:	0f 91       	pop	r16
    5c86:	ff 91       	pop	r31
    5c88:	ef 91       	pop	r30
}
    5c8a:	08 95       	ret

00005c8c <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    5c8c:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5c8e:	e0 ec       	ldi	r30, 0xC0	; 192
    5c90:	f1 e0       	ldi	r31, 0x01	; 1
    5c92:	80 91 cf 01 	lds	r24, 0x01CF
    5c96:	87 fd       	sbrc	r24, 7
    5c98:	fa cf       	rjmp	.-12     	; 0x5c8e <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5c9a:	89 2f       	mov	r24, r25
    5c9c:	90 e0       	ldi	r25, 0x00	; 0
    5c9e:	25 e0       	ldi	r18, 0x05	; 5
    5ca0:	88 0f       	add	r24, r24
    5ca2:	99 1f       	adc	r25, r25
    5ca4:	2a 95       	dec	r18
    5ca6:	e1 f7       	brne	.-8      	; 0x5ca0 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5ca8:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5cac:	89 2f       	mov	r24, r25
    5cae:	8f 71       	andi	r24, 0x1F	; 31
    5cb0:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5cb2:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    5cb4:	84 e3       	ldi	r24, 0x34	; 52
    5cb6:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5cb8:	ef 93       	push	r30
    5cba:	ff 93       	push	r31
    5cbc:	0f 93       	push	r16
    5cbe:	2f 93       	push	r18
    5cc0:	eb ec       	ldi	r30, 0xCB	; 203
    5cc2:	f1 e0       	ldi	r31, 0x01	; 1
    5cc4:	08 ed       	ldi	r16, 0xD8	; 216
    5cc6:	21 e0       	ldi	r18, 0x01	; 1
    5cc8:	04 bf       	out	0x34, r16	; 52
    5cca:	20 83       	st	Z, r18
    5ccc:	2f 91       	pop	r18
    5cce:	0f 91       	pop	r16
    5cd0:	ff 91       	pop	r31
    5cd2:	ef 91       	pop	r30
}
    5cd4:	08 95       	ret

00005cd6 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5cd6:	80 91 cf 01 	lds	r24, 0x01CF
    5cda:	87 fd       	sbrc	r24, 7
    5cdc:	fc cf       	rjmp	.-8      	; 0x5cd6 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    5cde:	80 e3       	ldi	r24, 0x30	; 48
    5ce0:	e0 ec       	ldi	r30, 0xC0	; 192
    5ce2:	f1 e0       	ldi	r31, 0x01	; 1
    5ce4:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5ce6:	ef 93       	push	r30
    5ce8:	ff 93       	push	r31
    5cea:	0f 93       	push	r16
    5cec:	2f 93       	push	r18
    5cee:	eb ec       	ldi	r30, 0xCB	; 203
    5cf0:	f1 e0       	ldi	r31, 0x01	; 1
    5cf2:	08 ed       	ldi	r16, 0xD8	; 216
    5cf4:	21 e0       	ldi	r18, 0x01	; 1
    5cf6:	04 bf       	out	0x34, r16	; 52
    5cf8:	20 83       	st	Z, r18
    5cfa:	2f 91       	pop	r18
    5cfc:	0f 91       	pop	r16
    5cfe:	ff 91       	pop	r31
    5d00:	ef 91       	pop	r30
}
    5d02:	08 95       	ret

00005d04 <xio_pgm_init>:
 *
 *  Control parameters are defaulted and may be set using xio_pgm_control()
 */

void xio_pgm_init(const uint16_t control)
{
    5d04:	9c 01       	movw	r18, r24
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;	// set flags to defaults & initial state
    5d06:	85 e0       	ldi	r24, 0x05	; 5
    5d08:	90 e0       	ldi	r25, 0x00	; 0
    5d0a:	80 93 e3 21 	sts	0x21E3, r24
    5d0e:	90 93 e4 21 	sts	0x21E4, r25
	if (control & XIO_WR) {				// this is actually an error. Ignore for now.
    5d12:	25 ff       	sbrs	r18, 5
    5d14:	06 c0       	rjmp	.+12     	; 0x5d22 <xio_pgm_init+0x1e>
		fpgm.flags |= XIO_FLAG_WR_bm;
    5d16:	87 e0       	ldi	r24, 0x07	; 7
    5d18:	90 e0       	ldi	r25, 0x00	; 0
    5d1a:	80 93 e3 21 	sts	0x21E3, r24
    5d1e:	90 93 e4 21 	sts	0x21E4, r25
	}
	if (control & XIO_NOBLOCK) {		// this is also technically a config error.
    5d22:	27 ff       	sbrs	r18, 7
    5d24:	09 c0       	rjmp	.+18     	; 0x5d38 <xio_pgm_init+0x34>
		fpgm.flags &= ~XIO_FLAG_BLOCK_bm;
    5d26:	80 91 e3 21 	lds	r24, 0x21E3
    5d2a:	90 91 e4 21 	lds	r25, 0x21E4
    5d2e:	8b 7f       	andi	r24, 0xFB	; 251
    5d30:	80 93 e3 21 	sts	0x21E3, r24
    5d34:	90 93 e4 21 	sts	0x21E4, r25
	}
	if (control & XIO_ECHO) {
    5d38:	30 ff       	sbrs	r19, 0
    5d3a:	09 c0       	rjmp	.+18     	; 0x5d4e <xio_pgm_init+0x4a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5d3c:	80 91 e3 21 	lds	r24, 0x21E3
    5d40:	90 91 e4 21 	lds	r25, 0x21E4
    5d44:	80 61       	ori	r24, 0x10	; 16
    5d46:	80 93 e3 21 	sts	0x21E3, r24
    5d4a:	90 93 e4 21 	sts	0x21E4, r25
	}
	if (control & XIO_NOECHO) {
    5d4e:	31 ff       	sbrs	r19, 1
    5d50:	09 c0       	rjmp	.+18     	; 0x5d64 <xio_pgm_init+0x60>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5d52:	80 91 e3 21 	lds	r24, 0x21E3
    5d56:	90 91 e4 21 	lds	r25, 0x21E4
    5d5a:	8f 7e       	andi	r24, 0xEF	; 239
    5d5c:	80 93 e3 21 	sts	0x21E3, r24
    5d60:	90 93 e4 21 	sts	0x21E4, r25
	}
	if (control & XIO_CRLF) {
    5d64:	32 ff       	sbrs	r19, 2
    5d66:	09 c0       	rjmp	.+18     	; 0x5d7a <xio_pgm_init+0x76>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5d68:	80 91 e3 21 	lds	r24, 0x21E3
    5d6c:	90 91 e4 21 	lds	r25, 0x21E4
    5d70:	80 62       	ori	r24, 0x20	; 32
    5d72:	80 93 e3 21 	sts	0x21E3, r24
    5d76:	90 93 e4 21 	sts	0x21E4, r25
	}
	if (control & XIO_NOCRLF) {
    5d7a:	33 ff       	sbrs	r19, 3
    5d7c:	09 c0       	rjmp	.+18     	; 0x5d90 <xio_pgm_init+0x8c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5d7e:	80 91 e3 21 	lds	r24, 0x21E3
    5d82:	90 91 e4 21 	lds	r25, 0x21E4
    5d86:	8f 7d       	andi	r24, 0xDF	; 223
    5d88:	80 93 e3 21 	sts	0x21E3, r24
    5d8c:	90 93 e4 21 	sts	0x21E4, r25
	}
	if (control & XIO_LINEMODE) {
    5d90:	34 ff       	sbrs	r19, 4
    5d92:	09 c0       	rjmp	.+18     	; 0x5da6 <xio_pgm_init+0xa2>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5d94:	80 91 e3 21 	lds	r24, 0x21E3
    5d98:	90 91 e4 21 	lds	r25, 0x21E4
    5d9c:	80 64       	ori	r24, 0x40	; 64
    5d9e:	80 93 e3 21 	sts	0x21E3, r24
    5da2:	90 93 e4 21 	sts	0x21E4, r25
	}
	if (control & XIO_NOLINEMODE) {
    5da6:	35 ff       	sbrs	r19, 5
    5da8:	09 c0       	rjmp	.+18     	; 0x5dbc <xio_pgm_init+0xb8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5daa:	80 91 e3 21 	lds	r24, 0x21E3
    5dae:	90 91 e4 21 	lds	r25, 0x21E4
    5db2:	8f 7b       	andi	r24, 0xBF	; 191
    5db4:	80 93 e3 21 	sts	0x21E3, r24
    5db8:	90 93 e4 21 	sts	0x21E4, r25
	}
	if (control & XIO_SEMICOLONS) {
    5dbc:	36 ff       	sbrs	r19, 6
    5dbe:	09 c0       	rjmp	.+18     	; 0x5dd2 <xio_pgm_init+0xce>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5dc0:	80 91 e3 21 	lds	r24, 0x21E3
    5dc4:	90 91 e4 21 	lds	r25, 0x21E4
    5dc8:	80 68       	ori	r24, 0x80	; 128
    5dca:	80 93 e3 21 	sts	0x21E3, r24
    5dce:	90 93 e4 21 	sts	0x21E4, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5dd2:	37 ff       	sbrs	r19, 7
    5dd4:	09 c0       	rjmp	.+18     	; 0x5de8 <xio_pgm_init+0xe4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5dd6:	80 91 e3 21 	lds	r24, 0x21E3
    5dda:	90 91 e4 21 	lds	r25, 0x21E4
    5dde:	8f 77       	andi	r24, 0x7F	; 127
    5de0:	80 93 e3 21 	sts	0x21E3, r24
    5de4:	90 93 e4 21 	sts	0x21E4, r25
	}
	fpgm.idx = 0;
    5de8:	10 92 ee 21 	sts	0x21EE, r1
    5dec:	10 92 ef 21 	sts	0x21EF, r1
	fpgm.sig = 0;
    5df0:	10 92 e6 21 	sts	0x21E6, r1
	dev_pgm.udata = &(fpgm.sig); 	// bind signals register to pgm FILE struct
    5df4:	86 ee       	ldi	r24, 0xE6	; 230
    5df6:	91 e2       	ldi	r25, 0x21	; 33
    5df8:	80 93 1a 20 	sts	0x201A, r24
    5dfc:	90 93 1b 20 	sts	0x201B, r25
	fpgm.len = sizeof(fpgm.buf);
    5e00:	82 e0       	ldi	r24, 0x02	; 2
    5e02:	80 93 e9 21 	sts	0x21E9, r24
}
    5e06:	08 95       	ret

00005e08 <xio_pgm_open>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

FILE * xio_pgm_open(const prog_char *addr)
{
	fpgm.flags &= XIO_FLAG_RESET_gm;			// reset the signaling bits
    5e08:	20 91 e3 21 	lds	r18, 0x21E3
    5e0c:	30 91 e4 21 	lds	r19, 0x21E4
    5e10:	3f 70       	andi	r19, 0x0F	; 15
    5e12:	20 93 e3 21 	sts	0x21E3, r18
    5e16:	30 93 e4 21 	sts	0x21E4, r19
	fpgm.pgmbase_P = (PROGMEM char *)addr;		// might want to range check this
    5e1a:	80 93 ec 21 	sts	0x21EC, r24
    5e1e:	90 93 ed 21 	sts	0x21ED, r25
	fpgm.idx = 0;
    5e22:	10 92 ee 21 	sts	0x21EE, r1
    5e26:	10 92 ef 21 	sts	0x21EF, r1
	return(&dev_pgm);
}
    5e2a:	8e e0       	ldi	r24, 0x0E	; 14
    5e2c:	90 e2       	ldi	r25, 0x20	; 32
    5e2e:	08 95       	ret

00005e30 <xio_pgm_control>:
 *	XIO_SEMICOLONS <null>		Treat semicolons as line breaks
 *	XIO_NOSEMICOLONS <null>	Y	Don't treat semicolons as line breaks
 */

int8_t xio_pgm_control(const uint16_t control, const int16_t arg)
{
    5e30:	9c 01       	movw	r18, r24
	// transfer control flags to internal flag bits
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;		// set flags to defaults & initial state
    5e32:	85 e0       	ldi	r24, 0x05	; 5
    5e34:	90 e0       	ldi	r25, 0x00	; 0
    5e36:	80 93 e3 21 	sts	0x21E3, r24
    5e3a:	90 93 e4 21 	sts	0x21E4, r25
	if (control & XIO_ECHO) {
    5e3e:	30 ff       	sbrs	r19, 0
    5e40:	06 c0       	rjmp	.+12     	; 0x5e4e <xio_pgm_control+0x1e>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5e42:	85 e1       	ldi	r24, 0x15	; 21
    5e44:	90 e0       	ldi	r25, 0x00	; 0
    5e46:	80 93 e3 21 	sts	0x21E3, r24
    5e4a:	90 93 e4 21 	sts	0x21E4, r25
	}
	if (control & XIO_NOECHO) {
    5e4e:	31 ff       	sbrs	r19, 1
    5e50:	09 c0       	rjmp	.+18     	; 0x5e64 <xio_pgm_control+0x34>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5e52:	80 91 e3 21 	lds	r24, 0x21E3
    5e56:	90 91 e4 21 	lds	r25, 0x21E4
    5e5a:	8f 7e       	andi	r24, 0xEF	; 239
    5e5c:	80 93 e3 21 	sts	0x21E3, r24
    5e60:	90 93 e4 21 	sts	0x21E4, r25
	}
	if (control & XIO_CRLF) {
    5e64:	32 ff       	sbrs	r19, 2
    5e66:	09 c0       	rjmp	.+18     	; 0x5e7a <xio_pgm_control+0x4a>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5e68:	80 91 e3 21 	lds	r24, 0x21E3
    5e6c:	90 91 e4 21 	lds	r25, 0x21E4
    5e70:	80 62       	ori	r24, 0x20	; 32
    5e72:	80 93 e3 21 	sts	0x21E3, r24
    5e76:	90 93 e4 21 	sts	0x21E4, r25
	}
	if (control & XIO_NOCRLF) {
    5e7a:	33 ff       	sbrs	r19, 3
    5e7c:	09 c0       	rjmp	.+18     	; 0x5e90 <xio_pgm_control+0x60>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5e7e:	80 91 e3 21 	lds	r24, 0x21E3
    5e82:	90 91 e4 21 	lds	r25, 0x21E4
    5e86:	8f 7d       	andi	r24, 0xDF	; 223
    5e88:	80 93 e3 21 	sts	0x21E3, r24
    5e8c:	90 93 e4 21 	sts	0x21E4, r25
	}
	if (control & XIO_LINEMODE) {
    5e90:	34 ff       	sbrs	r19, 4
    5e92:	09 c0       	rjmp	.+18     	; 0x5ea6 <xio_pgm_control+0x76>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5e94:	80 91 e3 21 	lds	r24, 0x21E3
    5e98:	90 91 e4 21 	lds	r25, 0x21E4
    5e9c:	80 64       	ori	r24, 0x40	; 64
    5e9e:	80 93 e3 21 	sts	0x21E3, r24
    5ea2:	90 93 e4 21 	sts	0x21E4, r25
	}
	if (control & XIO_NOLINEMODE) {
    5ea6:	35 ff       	sbrs	r19, 5
    5ea8:	09 c0       	rjmp	.+18     	; 0x5ebc <xio_pgm_control+0x8c>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5eaa:	80 91 e3 21 	lds	r24, 0x21E3
    5eae:	90 91 e4 21 	lds	r25, 0x21E4
    5eb2:	8f 7b       	andi	r24, 0xBF	; 191
    5eb4:	80 93 e3 21 	sts	0x21E3, r24
    5eb8:	90 93 e4 21 	sts	0x21E4, r25
	}
	if (control & XIO_SEMICOLONS) {
    5ebc:	36 ff       	sbrs	r19, 6
    5ebe:	09 c0       	rjmp	.+18     	; 0x5ed2 <xio_pgm_control+0xa2>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5ec0:	80 91 e3 21 	lds	r24, 0x21E3
    5ec4:	90 91 e4 21 	lds	r25, 0x21E4
    5ec8:	80 68       	ori	r24, 0x80	; 128
    5eca:	80 93 e3 21 	sts	0x21E3, r24
    5ece:	90 93 e4 21 	sts	0x21E4, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5ed2:	37 ff       	sbrs	r19, 7
    5ed4:	09 c0       	rjmp	.+18     	; 0x5ee8 <xio_pgm_control+0xb8>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5ed6:	80 91 e3 21 	lds	r24, 0x21E3
    5eda:	90 91 e4 21 	lds	r25, 0x21E4
    5ede:	8f 77       	andi	r24, 0x7F	; 127
    5ee0:	80 93 e3 21 	sts	0x21E3, r24
    5ee4:	90 93 e4 21 	sts	0x21E4, r25
	}
	return (0);
}
    5ee8:	80 e0       	ldi	r24, 0x00	; 0
    5eea:	08 95       	ret

00005eec <xio_pgm_putc>:
 */

int xio_pgm_putc(const char c, FILE *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    5eec:	8f ef       	ldi	r24, 0xFF	; 255
    5eee:	9f ef       	ldi	r25, 0xFF	; 255
    5ef0:	08 95       	ret

00005ef2 <xio_pgm_readln>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_pgm_readln(char *buf, uint8_t len)
{
    5ef2:	9c 01       	movw	r18, r24
	if (!(fpgm.pgmbase_P)) {					// return error if no file is open
    5ef4:	80 91 ec 21 	lds	r24, 0x21EC
    5ef8:	90 91 ed 21 	lds	r25, 0x21ED
    5efc:	89 2b       	or	r24, r25
    5efe:	19 f4       	brne	.+6      	; 0x5f06 <xio_pgm_readln+0x14>
    5f00:	22 e1       	ldi	r18, 0x12	; 18
    5f02:	30 e0       	ldi	r19, 0x00	; 0
    5f04:	17 c0       	rjmp	.+46     	; 0x5f34 <xio_pgm_readln+0x42>
		return (TG_FILE_NOT_OPEN);
	}
	fpgm.sig = XIO_SIG_OK;						// initialize signal
    5f06:	10 92 e6 21 	sts	0x21E6, r1
	if (fgets(buf, len, &dev_pgm) == NULL) {
    5f0a:	c9 01       	movw	r24, r18
    5f0c:	70 e0       	ldi	r23, 0x00	; 0
    5f0e:	4e e0       	ldi	r20, 0x0E	; 14
    5f10:	50 e2       	ldi	r21, 0x20	; 32
    5f12:	0e 94 95 49 	call	0x932a	; 0x932a <fgets>
    5f16:	89 2b       	or	r24, r25
    5f18:	19 f0       	breq	.+6      	; 0x5f20 <xio_pgm_readln+0x2e>
    5f1a:	20 e0       	ldi	r18, 0x00	; 0
    5f1c:	30 e0       	ldi	r19, 0x00	; 0
    5f1e:	0a c0       	rjmp	.+20     	; 0x5f34 <xio_pgm_readln+0x42>
		fpgm.pgmbase_P = NULL;
    5f20:	10 92 ec 21 	sts	0x21EC, r1
    5f24:	10 92 ed 21 	sts	0x21ED, r1
		clearerr(&dev_pgm);
    5f28:	8e e0       	ldi	r24, 0x0E	; 14
    5f2a:	90 e2       	ldi	r25, 0x20	; 32
    5f2c:	0e 94 90 49 	call	0x9320	; 0x9320 <clearerr>
    5f30:	25 e0       	ldi	r18, 0x05	; 5
    5f32:	30 e0       	ldi	r19, 0x00	; 0
		return (TG_EOF);
	}
	return (TG_OK);
}
    5f34:	c9 01       	movw	r24, r18
    5f36:	08 95       	ret

00005f38 <xio_pgm_getc>:
 *		- Note: putc should expand newlines to <cr><lf>
 */

int xio_pgm_getc(FILE *stream)
{
	if (fpgm.flags & XIO_FLAG_EOF_bm) {
    5f38:	40 91 e3 21 	lds	r20, 0x21E3
    5f3c:	50 91 e4 21 	lds	r21, 0x21E4
    5f40:	55 ff       	sbrs	r21, 5
    5f42:	06 c0       	rjmp	.+12     	; 0x5f50 <xio_pgm_getc+0x18>
		fpgm.sig = XIO_SIG_EOF;
    5f44:	83 e0       	ldi	r24, 0x03	; 3
    5f46:	80 93 e6 21 	sts	0x21E6, r24
    5f4a:	2e ef       	ldi	r18, 0xFE	; 254
    5f4c:	3f ef       	ldi	r19, 0xFF	; 255
    5f4e:	3f c0       	rjmp	.+126    	; 0x5fce <xio_pgm_getc+0x96>
		return (_FDEV_EOF);
	}
	if ((fpgm.c = pgm_read_byte(&fpgm.pgmbase_P[fpgm.idx])) == NUL) {
    5f50:	20 91 ee 21 	lds	r18, 0x21EE
    5f54:	30 91 ef 21 	lds	r19, 0x21EF
    5f58:	e0 91 ec 21 	lds	r30, 0x21EC
    5f5c:	f0 91 ed 21 	lds	r31, 0x21ED
    5f60:	e2 0f       	add	r30, r18
    5f62:	f3 1f       	adc	r31, r19
    5f64:	84 91       	lpm	r24, Z+
    5f66:	80 93 e7 21 	sts	0x21E7, r24
    5f6a:	88 23       	and	r24, r24
    5f6c:	29 f4       	brne	.+10     	; 0x5f78 <xio_pgm_getc+0x40>
		fpgm.flags |= XIO_FLAG_EOF_bm;
    5f6e:	50 62       	ori	r21, 0x20	; 32
    5f70:	40 93 e3 21 	sts	0x21E3, r20
    5f74:	50 93 e4 21 	sts	0x21E4, r21
	}
	++fpgm.idx;
    5f78:	2f 5f       	subi	r18, 0xFF	; 255
    5f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    5f7c:	20 93 ee 21 	sts	0x21EE, r18
    5f80:	30 93 ef 21 	sts	0x21EF, r19
	if (!LINEMODE(fpgm.flags)) {		// processing is simple if not LINEMODE
    5f84:	90 91 e3 21 	lds	r25, 0x21E3
    5f88:	96 fd       	sbrc	r25, 6
    5f8a:	07 c0       	rjmp	.+14     	; 0x5f9a <xio_pgm_getc+0x62>
		if (ECHO(fpgm.flags)) {
    5f8c:	94 ff       	sbrs	r25, 4
    5f8e:	1b c0       	rjmp	.+54     	; 0x5fc6 <xio_pgm_getc+0x8e>
			putchar(fpgm.c);
    5f90:	60 91 82 25 	lds	r22, 0x2582
    5f94:	70 91 83 25 	lds	r23, 0x2583
    5f98:	13 c0       	rjmp	.+38     	; 0x5fc0 <xio_pgm_getc+0x88>
		}
		return (fpgm.c);
	}
	// now do the LINEMODE stuff
	if (fpgm.c == NUL) {				// perform newline substitutions
    5f9a:	88 23       	and	r24, r24
    5f9c:	31 f0       	breq	.+12     	; 0x5faa <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if (fpgm.c == '\r') {
    5f9e:	8d 30       	cpi	r24, 0x0D	; 13
    5fa0:	21 f0       	breq	.+8      	; 0x5faa <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if ((SEMICOLONS(fpgm.flags)) && (fpgm.c == ';')) {
    5fa2:	97 ff       	sbrs	r25, 7
    5fa4:	05 c0       	rjmp	.+10     	; 0x5fb0 <xio_pgm_getc+0x78>
    5fa6:	8b 33       	cpi	r24, 0x3B	; 59
    5fa8:	19 f4       	brne	.+6      	; 0x5fb0 <xio_pgm_getc+0x78>
		fpgm.c = '\n';
    5faa:	8a e0       	ldi	r24, 0x0A	; 10
    5fac:	80 93 e7 21 	sts	0x21E7, r24
	}
	if (ECHO(fpgm.flags)) {
    5fb0:	94 ff       	sbrs	r25, 4
    5fb2:	09 c0       	rjmp	.+18     	; 0x5fc6 <xio_pgm_getc+0x8e>
		putchar(fpgm.c);
    5fb4:	60 91 82 25 	lds	r22, 0x2582
    5fb8:	70 91 83 25 	lds	r23, 0x2583
    5fbc:	80 91 e7 21 	lds	r24, 0x21E7
    5fc0:	90 e0       	ldi	r25, 0x00	; 0
    5fc2:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
	}
	return (fpgm.c);
    5fc6:	80 91 e7 21 	lds	r24, 0x21E7
    5fca:	28 2f       	mov	r18, r24
    5fcc:	30 e0       	ldi	r19, 0x00	; 0
}
    5fce:	c9 01       	movw	r24, r18
    5fd0:	08 95       	ret

00005fd2 <tg_reset_source>:
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    5fd2:	80 91 f4 21 	lds	r24, 0x21F4
    5fd6:	80 93 f3 21 	sts	0x21F3, r24
 */

void tg_reset_source()
{
	_tg_set_source(tg.default_src);
}
    5fda:	08 95       	ret

00005fdc <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    5fdc:	fc 01       	movw	r30, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    5fde:	80 91 f2 21 	lds	r24, 0x21F2
    5fe2:	88 23       	and	r24, r24
    5fe4:	79 f5       	brne	.+94     	; 0x6044 <__stack+0x45>
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
    5fe6:	90 81       	ld	r25, Z
    5fe8:	89 2f       	mov	r24, r25
    5fea:	81 56       	subi	r24, 0x61	; 97
    5fec:	8a 31       	cpi	r24, 0x1A	; 26
    5fee:	10 f4       	brcc	.+4      	; 0x5ff4 <tg_parser+0x18>
			buf[0] = buf[0]-'a'+'A';
    5ff0:	90 52       	subi	r25, 0x20	; 32
    5ff2:	90 83       	st	Z, r25
		}
		switch (buf[0]) {
    5ff4:	80 81       	ld	r24, Z
    5ff6:	86 34       	cpi	r24, 0x46	; 70
    5ff8:	b1 f0       	breq	.+44     	; 0x6026 <__stack+0x27>
    5ffa:	87 34       	cpi	r24, 0x47	; 71
    5ffc:	38 f4       	brcc	.+14     	; 0x600c <__stack+0xd>
    5ffe:	83 34       	cpi	r24, 0x43	; 67
    6000:	61 f0       	breq	.+24     	; 0x601a <__stack+0x1b>
    6002:	84 34       	cpi	r24, 0x44	; 68
    6004:	71 f0       	breq	.+28     	; 0x6022 <__stack+0x23>
    6006:	8f 33       	cpi	r24, 0x3F	; 63
    6008:	d9 f4       	brne	.+54     	; 0x6040 <__stack+0x41>
    600a:	07 c0       	rjmp	.+14     	; 0x601a <__stack+0x1b>
    600c:	87 34       	cpi	r24, 0x47	; 71
    600e:	19 f0       	breq	.+6      	; 0x6016 <__stack+0x17>
    6010:	8d 54       	subi	r24, 0x4D	; 77
    6012:	82 30       	cpi	r24, 0x02	; 2
    6014:	a8 f4       	brcc	.+42     	; 0x6040 <__stack+0x41>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    6016:	82 e0       	ldi	r24, 0x02	; 2
    6018:	01 c0       	rjmp	.+2      	; 0x601c <__stack+0x1d>
	if (tg.mode == TG_CONTROL_MODE) {
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
			buf[0] = buf[0]-'a'+'A';
		}
		switch (buf[0]) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    601a:	81 e0       	ldi	r24, 0x01	; 1
    601c:	80 93 f2 21 	sts	0x21F2, r24
    6020:	11 c0       	rjmp	.+34     	; 0x6044 <__stack+0x45>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    6022:	83 e0       	ldi	r24, 0x03	; 3
    6024:	fb cf       	rjmp	.-10     	; 0x601c <__stack+0x1d>
//	xio_pgm_open(PGMFILE(&square_circle_test100));
//	xio_pgm_open(PGMFILE(&spiral_test50a));
//	xio_pgm_open(PGMFILE(&spiral_test5));
//	xio_pgm_open(PGMFILE(&dwell_test2));

	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
    6026:	88 e8       	ldi	r24, 0x88	; 136
    6028:	97 e1       	ldi	r25, 0x17	; 23
    602a:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <xio_pgm_open>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    602e:	82 e0       	ldi	r24, 0x02	; 2
    6030:	80 93 f2 21 	sts	0x21F2, r24
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    6034:	83 e0       	ldi	r24, 0x03	; 3
    6036:	80 93 f3 21 	sts	0x21F3, r24
    603a:	20 e0       	ldi	r18, 0x00	; 0
    603c:	30 e0       	ldi	r19, 0x00	; 0
    603e:	1d c0       	rjmp	.+58     	; 0x607a <__stack+0x7b>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    6040:	10 92 f2 21 	sts	0x21F2, r1
			case 'F': return (_tg_test_file());
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    6044:	10 92 f1 21 	sts	0x21F1, r1
	switch (tg.mode) {
    6048:	80 91 f2 21 	lds	r24, 0x21F2
    604c:	82 30       	cpi	r24, 0x02	; 2
    604e:	41 f0       	breq	.+16     	; 0x6060 <__stack+0x61>
    6050:	83 30       	cpi	r24, 0x03	; 3
    6052:	51 f0       	breq	.+20     	; 0x6068 <__stack+0x69>
    6054:	81 30       	cpi	r24, 0x01	; 1
    6056:	69 f4       	brne	.+26     	; 0x6072 <__stack+0x73>
		case TG_CONFIG_MODE: tg.status = cfg_parse(buf); break;
    6058:	cf 01       	movw	r24, r30
    605a:	0e 94 8d 19 	call	0x331a	; 0x331a <cfg_parse>
    605e:	07 c0       	rjmp	.+14     	; 0x606e <__stack+0x6f>
		case TG_GCODE_MODE: tg.status = gc_gcode_parser(buf); break;
    6060:	cf 01       	movw	r24, r30
    6062:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <gc_gcode_parser>
    6066:	03 c0       	rjmp	.+6      	; 0x606e <__stack+0x6f>
		case TG_DIRECT_DRIVE_MODE: tg.status = dd_parser(buf); break;
    6068:	cf 01       	movw	r24, r30
    606a:	0e 94 f7 30 	call	0x61ee	; 0x61ee <dd_parser>
    606e:	80 93 f1 21 	sts	0x21F1, r24
	}
	return (tg.status);
    6072:	80 91 f1 21 	lds	r24, 0x21F1
    6076:	28 2f       	mov	r18, r24
    6078:	30 e0       	ldi	r19, 0x00	; 0
}
    607a:	c9 01       	movw	r24, r18
    607c:	08 95       	ret

0000607e <tg_controller>:
 */

void tg_controller()
{
	// top priority tasks
	st_execute_move();
    607e:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <st_execute_move>

	// medium priority tasks
	if ((tg.status = mc_line_continue()) == TG_EAGAIN) {	// line generator
    6082:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <mc_line_continue>
    6086:	80 93 f1 21 	sts	0x21F1, r24
    608a:	81 30       	cpi	r24, 0x01	; 1
    608c:	09 f4       	brne	.+2      	; 0x6090 <tg_controller+0x12>
    608e:	84 c0       	rjmp	.+264    	; 0x6198 <tg_controller+0x11a>
		return;
	}
	if ((tg.status = mc_arc_continue()) == TG_EAGAIN) {	 	// arc generator 
    6090:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <mc_arc_continue>
    6094:	80 93 f1 21 	sts	0x21F1, r24
    6098:	81 30       	cpi	r24, 0x01	; 1
    609a:	09 f4       	brne	.+2      	; 0x609e <tg_controller+0x20>
    609c:	7d c0       	rjmp	.+250    	; 0x6198 <tg_controller+0x11a>
 */

static int _tg_read_next_line()
{
	// read input line or return if not a completed line
	if ((tg.status = xio_fget_ln(tg.src, tg.dev[tg.src].buf, tg.dev[tg.src].len)) == TG_OK) {
    609e:	80 91 f3 21 	lds	r24, 0x21F3
    60a2:	48 2f       	mov	r20, r24
    60a4:	50 e0       	ldi	r21, 0x00	; 0
    60a6:	22 e5       	ldi	r18, 0x52	; 82
    60a8:	30 e0       	ldi	r19, 0x00	; 0
    60aa:	42 9f       	mul	r20, r18
    60ac:	b0 01       	movw	r22, r0
    60ae:	43 9f       	mul	r20, r19
    60b0:	70 0d       	add	r23, r0
    60b2:	52 9f       	mul	r21, r18
    60b4:	70 0d       	add	r23, r0
    60b6:	11 24       	eor	r1, r1
    60b8:	fb 01       	movw	r30, r22
    60ba:	e0 51       	subi	r30, 0x10	; 16
    60bc:	fe 4d       	sbci	r31, 0xDE	; 222
    60be:	68 50       	subi	r22, 0x08	; 8
    60c0:	7e 4d       	sbci	r23, 0xDE	; 222
    60c2:	47 81       	ldd	r20, Z+7	; 0x07
    60c4:	0e 94 2d 28 	call	0x505a	; 0x505a <xio_fget_ln>
    60c8:	80 93 f1 21 	sts	0x21F1, r24
    60cc:	88 23       	and	r24, r24
    60ce:	61 f4       	brne	.+24     	; 0x60e8 <tg_controller+0x6a>
		tg.status = tg_parser(tg.dev[tg.src].buf);	// dispatch to parser
    60d0:	80 91 f3 21 	lds	r24, 0x21F3
    60d4:	22 e5       	ldi	r18, 0x52	; 82
    60d6:	82 9f       	mul	r24, r18
    60d8:	c0 01       	movw	r24, r0
    60da:	11 24       	eor	r1, r1
    60dc:	88 50       	subi	r24, 0x08	; 8
    60de:	9e 4d       	sbci	r25, 0xDE	; 222
    60e0:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <tg_parser>
    60e4:	80 93 f1 21 	sts	0x21F1, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    60e8:	80 91 f1 21 	lds	r24, 0x21F1
    60ec:	83 30       	cpi	r24, 0x03	; 3
    60ee:	18 f4       	brcc	.+6      	; 0x60f6 <tg_controller+0x78>
    60f0:	81 30       	cpi	r24, 0x01	; 1
    60f2:	f0 f4       	brcc	.+60     	; 0x6130 <tg_controller+0xb2>
    60f4:	1b c0       	rjmp	.+54     	; 0x612c <tg_controller+0xae>
    60f6:	83 30       	cpi	r24, 0x03	; 3
    60f8:	19 f0       	breq	.+6      	; 0x6100 <tg_controller+0x82>
    60fa:	85 30       	cpi	r24, 0x05	; 5
    60fc:	b9 f4       	brne	.+46     	; 0x612c <tg_controller+0xae>
    60fe:	03 c0       	rjmp	.+6      	; 0x6106 <tg_controller+0x88>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    6100:	10 92 f2 21 	sts	0x21F2, r1
    6104:	13 c0       	rjmp	.+38     	; 0x612c <tg_controller+0xae>
			_tg_set_mode(TG_CONTROL_MODE);
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
    6106:	0f 92       	push	r0
    6108:	0f 92       	push	r0
    610a:	82 ea       	ldi	r24, 0xA2	; 162
    610c:	9b e1       	ldi	r25, 0x1B	; 27
    610e:	ed b7       	in	r30, 0x3d	; 61
    6110:	fe b7       	in	r31, 0x3e	; 62
    6112:	81 83       	std	Z+1, r24	; 0x01
    6114:	92 83       	std	Z+2, r25	; 0x02
    6116:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    611a:	80 91 f4 21 	lds	r24, 0x21F4
    611e:	80 93 f3 21 	sts	0x21F3, r24
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
			tg_reset_source();						// reset to default src
			tg.state = TG_READY_UNPROMPTED;
    6122:	10 92 f0 21 	sts	0x21F0, r1
    6126:	0f 90       	pop	r0
    6128:	0f 90       	pop	r0
    612a:	02 c0       	rjmp	.+4      	; 0x6130 <tg_controller+0xb2>
			break;
		}
		default: {
			tg.state = TG_READY_UNPROMPTED;			// traps various error returns
    612c:	10 92 f0 21 	sts	0x21F0, r1
	if ((tg.status = mc_arc_continue()) == TG_EAGAIN) {	 	// arc generator 
		return;
	}

	// low priority tasks
	if ((tg.status = _tg_read_next_line()) == TG_EAGAIN) {	// input line
    6130:	10 92 f1 21 	sts	0x21F1, r1
	tgModeStringDirect
};

void _tg_prompt()
{
	if (tg.state == TG_READY_UNPROMPTED) {
    6134:	80 91 f0 21 	lds	r24, 0x21F0
    6138:	88 23       	and	r24, r24
    613a:	71 f5       	brne	.+92     	; 0x6198 <tg_controller+0x11a>
		if (tg.dev[tg.src].flags && XIO_FLAG_PROMPTS_bm) {
    613c:	80 91 f3 21 	lds	r24, 0x21F3
    6140:	90 e0       	ldi	r25, 0x00	; 0
    6142:	22 e5       	ldi	r18, 0x52	; 82
    6144:	30 e0       	ldi	r19, 0x00	; 0
    6146:	82 9f       	mul	r24, r18
    6148:	f0 01       	movw	r30, r0
    614a:	83 9f       	mul	r24, r19
    614c:	f0 0d       	add	r31, r0
    614e:	92 9f       	mul	r25, r18
    6150:	f0 0d       	add	r31, r0
    6152:	11 24       	eor	r1, r1
    6154:	e0 51       	subi	r30, 0x10	; 16
    6156:	fe 4d       	sbci	r31, 0xDE	; 222
    6158:	86 81       	ldd	r24, Z+6	; 0x06
    615a:	88 23       	and	r24, r24
    615c:	d1 f0       	breq	.+52     	; 0x6192 <tg_controller+0x114>
			printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    615e:	80 91 f2 21 	lds	r24, 0x21F2
    6162:	e8 2f       	mov	r30, r24
    6164:	f0 e0       	ldi	r31, 0x00	; 0
    6166:	ee 0f       	add	r30, r30
    6168:	ff 1f       	adc	r31, r31
    616a:	e6 56       	subi	r30, 0x66	; 102
    616c:	f4 4e       	sbci	r31, 0xE4	; 228
    616e:	25 91       	lpm	r18, Z+
    6170:	34 91       	lpm	r19, Z+
    6172:	00 d0       	rcall	.+0      	; 0x6174 <tg_controller+0xf6>
    6174:	0f 92       	push	r0
    6176:	87 eb       	ldi	r24, 0xB7	; 183
    6178:	9b e1       	ldi	r25, 0x1B	; 27
    617a:	ed b7       	in	r30, 0x3d	; 61
    617c:	fe b7       	in	r31, 0x3e	; 62
    617e:	81 83       	std	Z+1, r24	; 0x01
    6180:	92 83       	std	Z+2, r25	; 0x02
    6182:	23 83       	std	Z+3, r18	; 0x03
    6184:	34 83       	std	Z+4, r19	; 0x04
    6186:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
    618a:	0f 90       	pop	r0
    618c:	0f 90       	pop	r0
    618e:	0f 90       	pop	r0
    6190:	0f 90       	pop	r0
		}
		tg.state = TG_READY_PROMPTED;
    6192:	81 e0       	ldi	r24, 0x01	; 1
    6194:	80 93 f0 21 	sts	0x21F0, r24
    6198:	08 95       	ret

0000619a <tg_init>:

void tg_init() 
{
	// initialize devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) { // don't bother with /dev/null
		tg.dev[i].flags = XIO_FLAG_PROMPTS_bm;
    619a:	91 e0       	ldi	r25, 0x01	; 1
    619c:	90 93 48 22 	sts	0x2248, r25
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    61a0:	80 e5       	ldi	r24, 0x50	; 80
    61a2:	80 93 49 22 	sts	0x2249, r24

void tg_init() 
{
	// initialize devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) { // don't bother with /dev/null
		tg.dev[i].flags = XIO_FLAG_PROMPTS_bm;
    61a6:	90 93 9a 22 	sts	0x229A, r25
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    61aa:	80 93 9b 22 	sts	0x229B, r24
    61ae:	80 93 ed 22 	sts	0x22ED, r24
	}
	tg.dev[XIO_DEV_PGM].flags = 0;			// no asterisks on file devices
    61b2:	10 92 ec 22 	sts	0x22EC, r1

	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
    61b6:	90 93 f4 21 	sts	0x21F4, r25
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    61ba:	90 93 f3 21 	sts	0x21F3, r25
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    61be:	10 92 f2 21 	sts	0x21F2, r1

	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
	_tg_set_source(tg.default_src);			// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode
	tg.state = TG_READY_UNPROMPTED;
    61c2:	10 92 f0 21 	sts	0x21F0, r1

	// version string
	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    61c6:	00 d0       	rcall	.+0      	; 0x61c8 <tg_init+0x2e>
    61c8:	0f 92       	push	r0
    61ca:	8f ec       	ldi	r24, 0xCF	; 207
    61cc:	9b e1       	ldi	r25, 0x1B	; 27
    61ce:	ed b7       	in	r30, 0x3d	; 61
    61d0:	fe b7       	in	r31, 0x3e	; 62
    61d2:	81 83       	std	Z+1, r24	; 0x01
    61d4:	92 83       	std	Z+2, r25	; 0x02
    61d6:	85 ec       	ldi	r24, 0xC5	; 197
    61d8:	9b e1       	ldi	r25, 0x1B	; 27
    61da:	83 83       	std	Z+3, r24	; 0x03
    61dc:	94 83       	std	Z+4, r25	; 0x04
    61de:	0e 94 f4 49 	call	0x93e8	; 0x93e8 <printf_P>
    61e2:	0f 90       	pop	r0
    61e4:	0f 90       	pop	r0
    61e6:	0f 90       	pop	r0
    61e8:	0f 90       	pop	r0
}
    61ea:	08 95       	ret

000061ec <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    61ec:	08 95       	ret

000061ee <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    61ee:	80 e0       	ldi	r24, 0x00	; 0
    61f0:	90 e0       	ldi	r25, 0x00	; 0
    61f2:	08 95       	ret

000061f4 <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    61f4:	10 92 3e 23 	sts	0x233E, r1
	mv.move_buffer_tail = 0;
    61f8:	10 92 3f 23 	sts	0x233F, r1
}
    61fc:	08 95       	ret

000061fe <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    61fe:	90 91 3e 23 	lds	r25, 0x233E
    6202:	80 91 3f 23 	lds	r24, 0x233F
    6206:	98 17       	cp	r25, r24
    6208:	19 f4       	brne	.+6      	; 0x6210 <mv_dequeue_move_buffer+0x12>
    620a:	20 e0       	ldi	r18, 0x00	; 0
    620c:	30 e0       	ldi	r19, 0x00	; 0
    620e:	17 c0       	rjmp	.+46     	; 0x623e <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    6210:	90 91 3f 23 	lds	r25, 0x233F
    6214:	8e e1       	ldi	r24, 0x1E	; 30
    6216:	98 9f       	mul	r25, r24
    6218:	90 01       	movw	r18, r0
    621a:	11 24       	eor	r1, r1
    621c:	2e 5b       	subi	r18, 0xBE	; 190
    621e:	3c 4d       	sbci	r19, 0xDC	; 220
    6220:	20 93 40 23 	sts	0x2340, r18
    6224:	30 93 41 23 	sts	0x2341, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    6228:	80 91 3f 23 	lds	r24, 0x233F
    622c:	8f 5f       	subi	r24, 0xFF	; 255
    622e:	80 93 3f 23 	sts	0x233F, r24
    6232:	80 91 3f 23 	lds	r24, 0x233F
    6236:	83 30       	cpi	r24, 0x03	; 3
    6238:	10 f0       	brcs	.+4      	; 0x623e <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    623a:	10 92 3f 23 	sts	0x233F, r1
	}
	return (mv.p); 
}
    623e:	c9 01       	movw	r24, r18
    6240:	08 95       	ret

00006242 <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    6242:	90 91 3e 23 	lds	r25, 0x233E
    6246:	9f 5f       	subi	r25, 0xFF	; 255
    6248:	93 30       	cpi	r25, 0x03	; 3
    624a:	08 f0       	brcs	.+2      	; 0x624e <mv_test_move_buffer_full+0xc>
    624c:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    624e:	80 91 3f 23 	lds	r24, 0x233F
    6252:	20 e0       	ldi	r18, 0x00	; 0
    6254:	89 17       	cp	r24, r25
    6256:	09 f4       	brne	.+2      	; 0x625a <mv_test_move_buffer_full+0x18>
    6258:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    625a:	82 2f       	mov	r24, r18
    625c:	08 95       	ret

0000625e <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    625e:	0b c0       	rjmp	.+22     	; 0x6276 <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    6260:	80 91 48 00 	lds	r24, 0x0048
    6264:	81 60       	ori	r24, 0x01	; 1
    6266:	80 93 48 00 	sts	0x0048, r24
    626a:	88 95       	sleep
    626c:	80 91 48 00 	lds	r24, 0x0048
    6270:	8e 7f       	andi	r24, 0xFE	; 254
    6272:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    6276:	90 91 3f 23 	lds	r25, 0x233F
    627a:	80 91 3e 23 	lds	r24, 0x233E
    627e:	98 17       	cp	r25, r24
    6280:	79 f7       	brne	.-34     	; 0x6260 <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    6282:	08 95       	ret

00006284 <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    6284:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    6286:	80 91 3e 23 	lds	r24, 0x233E
    628a:	80 93 3f 23 	sts	0x233F, r24
	mv.p = NULL;
    628e:	10 92 40 23 	sts	0x2340, r1
    6292:	10 92 41 23 	sts	0x2341, r1
	sei();
    6296:	78 94       	sei
}
    6298:	08 95       	ret

0000629a <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    629a:	2f 92       	push	r2
    629c:	3f 92       	push	r3
    629e:	4f 92       	push	r4
    62a0:	5f 92       	push	r5
    62a2:	6f 92       	push	r6
    62a4:	7f 92       	push	r7
    62a6:	8f 92       	push	r8
    62a8:	9f 92       	push	r9
    62aa:	af 92       	push	r10
    62ac:	bf 92       	push	r11
    62ae:	cf 92       	push	r12
    62b0:	df 92       	push	r13
    62b2:	ef 92       	push	r14
    62b4:	ff 92       	push	r15
    62b6:	0f 93       	push	r16
    62b8:	1f 93       	push	r17
    62ba:	df 93       	push	r29
    62bc:	cf 93       	push	r28
    62be:	cd b7       	in	r28, 0x3d	; 61
    62c0:	de b7       	in	r29, 0x3e	; 62
    62c2:	2b 97       	sbiw	r28, 0x0b	; 11
    62c4:	cd bf       	out	0x3d, r28	; 61
    62c6:	de bf       	out	0x3e, r29	; 62
    62c8:	3b 01       	movw	r6, r22
    62ca:	4c 01       	movw	r8, r24
    62cc:	19 01       	movw	r2, r18
    62ce:	2a 01       	movw	r4, r20
					// Using 64 bits is expensive! The division goes from ~640 
					// cycles at 32 bits to ~3800 cycles using 64 bits
	uint32_t ticks_per_step; // temp variable

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    62d0:	20 91 3e 23 	lds	r18, 0x233E
    62d4:	2f 5f       	subi	r18, 0xFF	; 255
    62d6:	29 87       	std	Y+9, r18	; 0x09
    62d8:	23 30       	cpi	r18, 0x03	; 3
    62da:	08 f0       	brcs	.+2      	; 0x62de <mv_queue_move_buffer+0x44>
    62dc:	19 86       	std	Y+9, r1	; 0x09
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    62de:	80 91 3f 23 	lds	r24, 0x233F
    62e2:	39 85       	ldd	r19, Y+9	; 0x09
    62e4:	83 17       	cp	r24, r19
    62e6:	11 f4       	brne	.+4      	; 0x62ec <mv_queue_move_buffer+0x52>
    62e8:	87 e0       	ldi	r24, 0x07	; 7
    62ea:	92 c1       	rjmp	.+804    	; 0x6610 <mv_queue_move_buffer+0x376>
		return (TG_BUFFER_FULL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    62ec:	e0 91 3e 23 	lds	r30, 0x233E
    62f0:	8e e1       	ldi	r24, 0x1E	; 30
    62f2:	e8 9f       	mul	r30, r24
    62f4:	f0 01       	movw	r30, r0
    62f6:	11 24       	eor	r1, r1
    62f8:	ee 5b       	subi	r30, 0xBE	; 190
    62fa:	fc 4d       	sbci	r31, 0xDC	; 220
    62fc:	e0 93 40 23 	sts	0x2340, r30
    6300:	f0 93 41 23 	sts	0x2341, r31
	memset(mv.p, 0, sizeof(struct mvMove));
    6304:	df 01       	movw	r26, r30
    6306:	1d 92       	st	X+, r1
    6308:	8a 95       	dec	r24
    630a:	e9 f7       	brne	.-6      	; 0x6306 <mv_queue_move_buffer+0x6c>
	mv.p->a[X].steps = steps_x;
    630c:	e0 91 40 23 	lds	r30, 0x2340
    6310:	f0 91 41 23 	lds	r31, 0x2341
    6314:	ea 87       	std	Y+10, r30	; 0x0a
    6316:	fb 87       	std	Y+11, r31	; 0x0b
    6318:	60 82       	st	Z, r6
    631a:	71 82       	std	Z+1, r7	; 0x01
    631c:	82 82       	std	Z+2, r8	; 0x02
    631e:	93 82       	std	Z+3, r9	; 0x03
	mv.p->a[Y].steps = steps_y;
    6320:	22 86       	std	Z+10, r2	; 0x0a
    6322:	33 86       	std	Z+11, r3	; 0x0b
    6324:	44 86       	std	Z+12, r4	; 0x0c
    6326:	55 86       	std	Z+13, r5	; 0x0d
	mv.p->a[Z].steps = steps_z;
    6328:	e4 8a       	std	Z+20, r14	; 0x14
    632a:	f5 8a       	std	Z+21, r15	; 0x15
    632c:	06 8b       	std	Z+22, r16	; 0x16
    632e:	17 8b       	std	Z+23, r17	; 0x17
	ticks = microseconds * TICKS_PER_MICROSECOND;
    6330:	a5 e0       	ldi	r26, 0x05	; 5
    6332:	aa 0c       	add	r10, r10
    6334:	bb 1c       	adc	r11, r11
    6336:	cc 1c       	adc	r12, r12
    6338:	dd 1c       	adc	r13, r13
    633a:	aa 95       	dec	r26
    633c:	d1 f7       	brne	.-12     	; 0x6332 <mv_queue_move_buffer+0x98>
    633e:	a6 01       	movw	r20, r12
    6340:	95 01       	movw	r18, r10
    6342:	60 e0       	ldi	r22, 0x00	; 0
    6344:	70 e0       	ldi	r23, 0x00	; 0
    6346:	80 e0       	ldi	r24, 0x00	; 0
    6348:	90 e0       	ldi	r25, 0x00	; 0
    634a:	a9 82       	std	Y+1, r10	; 0x01
    634c:	3a 83       	std	Y+2, r19	; 0x02
    634e:	4b 83       	std	Y+3, r20	; 0x03
    6350:	5c 83       	std	Y+4, r21	; 0x04
    6352:	6d 83       	std	Y+5, r22	; 0x05
    6354:	7e 83       	std	Y+6, r23	; 0x06
    6356:	8f 83       	std	Y+7, r24	; 0x07
    6358:	98 87       	std	Y+8, r25	; 0x08

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    635a:	61 14       	cp	r6, r1
    635c:	71 04       	cpc	r7, r1
    635e:	81 04       	cpc	r8, r1
    6360:	91 04       	cpc	r9, r1
    6362:	09 f0       	breq	.+2      	; 0x6366 <mv_queue_move_buffer+0xcc>
    6364:	4b c0       	rjmp	.+150    	; 0x63fc <mv_queue_move_buffer+0x162>
    6366:	21 14       	cp	r2, r1
    6368:	31 04       	cpc	r3, r1
    636a:	41 04       	cpc	r4, r1
    636c:	51 04       	cpc	r5, r1
    636e:	09 f0       	breq	.+2      	; 0x6372 <mv_queue_move_buffer+0xd8>
    6370:	45 c0       	rjmp	.+138    	; 0x63fc <mv_queue_move_buffer+0x162>
    6372:	e1 14       	cp	r14, r1
    6374:	f1 04       	cpc	r15, r1
    6376:	01 05       	cpc	r16, r1
    6378:	11 05       	cpc	r17, r1
    637a:	09 f0       	breq	.+2      	; 0x637e <mv_queue_move_buffer+0xe4>
    637c:	3f c0       	rjmp	.+126    	; 0x63fc <mv_queue_move_buffer+0x162>
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    637e:	81 e0       	ldi	r24, 0x01	; 1
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	a0 e0       	ldi	r26, 0x00	; 0
    6384:	b0 e0       	ldi	r27, 0x00	; 0
    6386:	80 83       	st	Z, r24
    6388:	91 83       	std	Z+1, r25	; 0x01
    638a:	a2 83       	std	Z+2, r26	; 0x02
    638c:	b3 83       	std	Z+3, r27	; 0x03
		mv.p->a[X].postscale = 1;
    638e:	81 e0       	ldi	r24, 0x01	; 1
    6390:	90 e0       	ldi	r25, 0x00	; 0
    6392:	86 83       	std	Z+6, r24	; 0x06
    6394:	97 83       	std	Z+7, r25	; 0x07
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
    6396:	60 e0       	ldi	r22, 0x00	; 0
    6398:	70 e0       	ldi	r23, 0x00	; 0
    639a:	80 e0       	ldi	r24, 0x00	; 0
    639c:	90 e0       	ldi	r25, 0x00	; 0
    639e:	aa 24       	eor	r10, r10
    63a0:	a3 94       	inc	r10
    63a2:	bb 24       	eor	r11, r11
    63a4:	cc 24       	eor	r12, r12
    63a6:	dd 24       	eor	r13, r13
    63a8:	ee 24       	eor	r14, r14
    63aa:	ff 24       	eor	r15, r15
    63ac:	00 e0       	ldi	r16, 0x00	; 0
    63ae:	10 e0       	ldi	r17, 0x00	; 0
    63b0:	0e 94 24 38 	call	0x7048	; 0x7048 <__udivdi3>
    63b4:	c9 01       	movw	r24, r18
    63b6:	da 01       	movw	r26, r20
    63b8:	9c 01       	movw	r18, r24
    63ba:	ad 01       	movw	r20, r26
    63bc:	10 c0       	rjmp	.+32     	; 0x63de <mv_queue_move_buffer+0x144>
		while (ticks_per_step & 0xFFFF0000) {
			ticks_per_step >>= 1;
    63be:	56 95       	lsr	r21
    63c0:	47 95       	ror	r20
    63c2:	37 95       	ror	r19
    63c4:	27 95       	ror	r18
			mv.p->a[X].postscale <<= 1;
    63c6:	aa 85       	ldd	r26, Y+10	; 0x0a
    63c8:	bb 85       	ldd	r27, Y+11	; 0x0b
    63ca:	16 96       	adiw	r26, 0x06	; 6
    63cc:	8d 91       	ld	r24, X+
    63ce:	9c 91       	ld	r25, X
    63d0:	17 97       	sbiw	r26, 0x07	; 7
    63d2:	88 0f       	add	r24, r24
    63d4:	99 1f       	adc	r25, r25
    63d6:	16 96       	adiw	r26, 0x06	; 6
    63d8:	8d 93       	st	X+, r24
    63da:	9c 93       	st	X, r25
    63dc:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
		while (ticks_per_step & 0xFFFF0000) {
    63de:	da 01       	movw	r26, r20
    63e0:	c9 01       	movw	r24, r18
    63e2:	80 70       	andi	r24, 0x00	; 0
    63e4:	90 70       	andi	r25, 0x00	; 0
    63e6:	00 97       	sbiw	r24, 0x00	; 0
    63e8:	a1 05       	cpc	r26, r1
    63ea:	b1 05       	cpc	r27, r1
    63ec:	41 f7       	brne	.-48     	; 0x63be <mv_queue_move_buffer+0x124>
			ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    63ee:	ea 85       	ldd	r30, Y+10	; 0x0a
    63f0:	fb 85       	ldd	r31, Y+11	; 0x0b
    63f2:	24 83       	std	Z+4, r18	; 0x04
    63f4:	35 83       	std	Z+5, r19	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    63f6:	81 e0       	ldi	r24, 0x01	; 1
    63f8:	81 87       	std	Z+9, r24	; 0x09
    63fa:	04 c1       	rjmp	.+520    	; 0x6604 <mv_queue_move_buffer+0x36a>
	mv.p->a[Y].steps = steps_y;
	mv.p->a[Z].steps = steps_z;
	ticks = microseconds * TICKS_PER_MICROSECOND;

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    63fc:	44 24       	eor	r4, r4
    63fe:	55 24       	eor	r5, r5
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    6400:	40 91 40 23 	lds	r20, 0x2340
    6404:	50 91 41 23 	lds	r21, 0x2341
    6408:	34 2c       	mov	r3, r4
    640a:	25 2c       	mov	r2, r5
    640c:	c2 01       	movw	r24, r4
    640e:	fc 01       	movw	r30, r24
    6410:	73 e0       	ldi	r23, 0x03	; 3
    6412:	ee 0f       	add	r30, r30
    6414:	ff 1f       	adc	r31, r31
    6416:	7a 95       	dec	r23
    6418:	e1 f7       	brne	.-8      	; 0x6412 <mv_queue_move_buffer+0x178>
    641a:	88 0f       	add	r24, r24
    641c:	99 1f       	adc	r25, r25
    641e:	e8 0f       	add	r30, r24
    6420:	f9 1f       	adc	r31, r25
    6422:	e4 0f       	add	r30, r20
    6424:	f5 1f       	adc	r31, r21
    6426:	80 81       	ld	r24, Z
    6428:	91 81       	ldd	r25, Z+1	; 0x01
    642a:	a2 81       	ldd	r26, Z+2	; 0x02
    642c:	b3 81       	ldd	r27, Z+3	; 0x03
    642e:	00 97       	sbiw	r24, 0x00	; 0
    6430:	a1 05       	cpc	r26, r1
    6432:	b1 05       	cpc	r27, r1
    6434:	09 f4       	brne	.+2      	; 0x6438 <mv_queue_move_buffer+0x19e>
    6436:	de c0       	rjmp	.+444    	; 0x65f4 <mv_queue_move_buffer+0x35a>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    6438:	b7 ff       	sbrs	r27, 7
    643a:	10 c0       	rjmp	.+32     	; 0x645c <mv_queue_move_buffer+0x1c2>
    643c:	c2 01       	movw	r24, r4
    643e:	fc 01       	movw	r30, r24
    6440:	33 e0       	ldi	r19, 0x03	; 3
    6442:	ee 0f       	add	r30, r30
    6444:	ff 1f       	adc	r31, r31
    6446:	3a 95       	dec	r19
    6448:	e1 f7       	brne	.-8      	; 0x6442 <mv_queue_move_buffer+0x1a8>
    644a:	88 0f       	add	r24, r24
    644c:	99 1f       	adc	r25, r25
    644e:	e8 0f       	add	r30, r24
    6450:	f9 1f       	adc	r31, r25
    6452:	e4 0f       	add	r30, r20
    6454:	f5 1f       	adc	r31, r21
    6456:	21 e0       	ldi	r18, 0x01	; 1
    6458:	20 87       	std	Z+8, r18	; 0x08
    645a:	0e c0       	rjmp	.+28     	; 0x6478 <mv_queue_move_buffer+0x1de>
    645c:	c2 01       	movw	r24, r4
    645e:	fc 01       	movw	r30, r24
    6460:	03 e0       	ldi	r16, 0x03	; 3
    6462:	ee 0f       	add	r30, r30
    6464:	ff 1f       	adc	r31, r31
    6466:	0a 95       	dec	r16
    6468:	e1 f7       	brne	.-8      	; 0x6462 <mv_queue_move_buffer+0x1c8>
    646a:	88 0f       	add	r24, r24
    646c:	99 1f       	adc	r25, r25
    646e:	e8 0f       	add	r30, r24
    6470:	f9 1f       	adc	r31, r25
    6472:	e4 0f       	add	r30, r20
    6474:	f5 1f       	adc	r31, r21
    6476:	10 86       	std	Z+8, r1	; 0x08
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    6478:	83 2d       	mov	r24, r3
    647a:	92 2d       	mov	r25, r2
    647c:	fc 01       	movw	r30, r24
    647e:	b3 e0       	ldi	r27, 0x03	; 3
    6480:	ee 0f       	add	r30, r30
    6482:	ff 1f       	adc	r31, r31
    6484:	ba 95       	dec	r27
    6486:	e1 f7       	brne	.-8      	; 0x6480 <mv_queue_move_buffer+0x1e6>
    6488:	88 0f       	add	r24, r24
    648a:	99 1f       	adc	r25, r25
    648c:	e8 0f       	add	r30, r24
    648e:	f9 1f       	adc	r31, r25
    6490:	e4 0f       	add	r30, r20
    6492:	f5 1f       	adc	r31, r21
    6494:	83 2d       	mov	r24, r3
    6496:	92 2d       	mov	r25, r2
    6498:	9c 01       	movw	r18, r24
    649a:	73 e0       	ldi	r23, 0x03	; 3
    649c:	22 0f       	add	r18, r18
    649e:	33 1f       	adc	r19, r19
    64a0:	7a 95       	dec	r23
    64a2:	e1 f7       	brne	.-8      	; 0x649c <mv_queue_move_buffer+0x202>
    64a4:	88 0f       	add	r24, r24
    64a6:	99 1f       	adc	r25, r25
    64a8:	28 0f       	add	r18, r24
    64aa:	39 1f       	adc	r19, r25
    64ac:	42 0f       	add	r20, r18
    64ae:	53 1f       	adc	r21, r19
    64b0:	da 01       	movw	r26, r20
    64b2:	2d 91       	ld	r18, X+
    64b4:	3d 91       	ld	r19, X+
    64b6:	4d 91       	ld	r20, X+
    64b8:	5c 91       	ld	r21, X
    64ba:	57 ff       	sbrs	r21, 7
    64bc:	07 c0       	rjmp	.+14     	; 0x64cc <mv_queue_move_buffer+0x232>
    64be:	50 95       	com	r21
    64c0:	40 95       	com	r20
    64c2:	30 95       	com	r19
    64c4:	21 95       	neg	r18
    64c6:	3f 4f       	sbci	r19, 0xFF	; 255
    64c8:	4f 4f       	sbci	r20, 0xFF	; 255
    64ca:	5f 4f       	sbci	r21, 0xFF	; 255
    64cc:	20 83       	st	Z, r18
    64ce:	31 83       	std	Z+1, r19	; 0x01
    64d0:	42 83       	std	Z+2, r20	; 0x02
    64d2:	53 83       	std	Z+3, r21	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    64d4:	e0 91 40 23 	lds	r30, 0x2340
    64d8:	f0 91 41 23 	lds	r31, 0x2341
    64dc:	ea 87       	std	Y+10, r30	; 0x0a
    64de:	fb 87       	std	Y+11, r31	; 0x0b
    64e0:	83 2d       	mov	r24, r3
    64e2:	92 2d       	mov	r25, r2
    64e4:	fc 01       	movw	r30, r24
    64e6:	03 e0       	ldi	r16, 0x03	; 3
    64e8:	ee 0f       	add	r30, r30
    64ea:	ff 1f       	adc	r31, r31
    64ec:	0a 95       	dec	r16
    64ee:	e1 f7       	brne	.-8      	; 0x64e8 <mv_queue_move_buffer+0x24e>
    64f0:	88 0f       	add	r24, r24
    64f2:	99 1f       	adc	r25, r25
    64f4:	e8 0f       	add	r30, r24
    64f6:	f9 1f       	adc	r31, r25
    64f8:	2a 85       	ldd	r18, Y+10	; 0x0a
    64fa:	3b 85       	ldd	r19, Y+11	; 0x0b
    64fc:	e2 0f       	add	r30, r18
    64fe:	f3 1f       	adc	r31, r19
    6500:	41 e0       	ldi	r20, 0x01	; 1
    6502:	50 e0       	ldi	r21, 0x00	; 0
    6504:	46 83       	std	Z+6, r20	; 0x06
    6506:	57 83       	std	Z+7, r21	; 0x07
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
    6508:	83 2d       	mov	r24, r3
    650a:	92 2d       	mov	r25, r2
    650c:	fc 01       	movw	r30, r24
    650e:	b3 e0       	ldi	r27, 0x03	; 3
    6510:	ee 0f       	add	r30, r30
    6512:	ff 1f       	adc	r31, r31
    6514:	ba 95       	dec	r27
    6516:	e1 f7       	brne	.-8      	; 0x6510 <mv_queue_move_buffer+0x276>
    6518:	88 0f       	add	r24, r24
    651a:	99 1f       	adc	r25, r25
    651c:	e8 0f       	add	r30, r24
    651e:	f9 1f       	adc	r31, r25
    6520:	e2 0f       	add	r30, r18
    6522:	f3 1f       	adc	r31, r19
    6524:	e0 80       	ld	r14, Z
    6526:	f1 80       	ldd	r15, Z+1	; 0x01
    6528:	02 81       	ldd	r16, Z+2	; 0x02
    652a:	13 81       	ldd	r17, Z+3	; 0x03
    652c:	37 01       	movw	r6, r14
    652e:	48 01       	movw	r8, r16
    6530:	99 0c       	add	r9, r9
    6532:	66 08       	sbc	r6, r6
    6534:	76 2c       	mov	r7, r6
    6536:	43 01       	movw	r8, r6
    6538:	29 81       	ldd	r18, Y+1	; 0x01
    653a:	3a 81       	ldd	r19, Y+2	; 0x02
    653c:	4b 81       	ldd	r20, Y+3	; 0x03
    653e:	5c 81       	ldd	r21, Y+4	; 0x04
    6540:	6d 81       	ldd	r22, Y+5	; 0x05
    6542:	7e 81       	ldd	r23, Y+6	; 0x06
    6544:	8f 81       	ldd	r24, Y+7	; 0x07
    6546:	98 85       	ldd	r25, Y+8	; 0x08
    6548:	57 01       	movw	r10, r14
    654a:	68 01       	movw	r12, r16
    654c:	e6 2c       	mov	r14, r6
    654e:	f6 2c       	mov	r15, r6
    6550:	06 2d       	mov	r16, r6
    6552:	16 2d       	mov	r17, r6
    6554:	0e 94 24 38 	call	0x7048	; 0x7048 <__udivdi3>
    6558:	c9 01       	movw	r24, r18
    655a:	da 01       	movw	r26, r20
    655c:	ac 01       	movw	r20, r24
    655e:	bd 01       	movw	r22, r26
    6560:	2c c0       	rjmp	.+88     	; 0x65ba <mv_queue_move_buffer+0x320>
				while (ticks_per_step & 0xFFFF0000) {
					ticks_per_step >>= 1;
    6562:	76 95       	lsr	r23
    6564:	67 95       	ror	r22
    6566:	57 95       	ror	r21
    6568:	47 95       	ror	r20
					mv.p->a[i].postscale <<= 1;
    656a:	83 2d       	mov	r24, r3
    656c:	92 2d       	mov	r25, r2
    656e:	dc 01       	movw	r26, r24
    6570:	33 e0       	ldi	r19, 0x03	; 3
    6572:	aa 0f       	add	r26, r26
    6574:	bb 1f       	adc	r27, r27
    6576:	3a 95       	dec	r19
    6578:	e1 f7       	brne	.-8      	; 0x6572 <mv_queue_move_buffer+0x2d8>
    657a:	88 0f       	add	r24, r24
    657c:	99 1f       	adc	r25, r25
    657e:	a8 0f       	add	r26, r24
    6580:	b9 1f       	adc	r27, r25
    6582:	8a 85       	ldd	r24, Y+10	; 0x0a
    6584:	9b 85       	ldd	r25, Y+11	; 0x0b
    6586:	a8 0f       	add	r26, r24
    6588:	b9 1f       	adc	r27, r25
    658a:	83 2d       	mov	r24, r3
    658c:	92 2d       	mov	r25, r2
    658e:	fc 01       	movw	r30, r24
    6590:	03 e0       	ldi	r16, 0x03	; 3
    6592:	ee 0f       	add	r30, r30
    6594:	ff 1f       	adc	r31, r31
    6596:	0a 95       	dec	r16
    6598:	e1 f7       	brne	.-8      	; 0x6592 <mv_queue_move_buffer+0x2f8>
    659a:	88 0f       	add	r24, r24
    659c:	99 1f       	adc	r25, r25
    659e:	e8 0f       	add	r30, r24
    65a0:	f9 1f       	adc	r31, r25
    65a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    65a4:	3b 85       	ldd	r19, Y+11	; 0x0b
    65a6:	e2 0f       	add	r30, r18
    65a8:	f3 1f       	adc	r31, r19
    65aa:	86 81       	ldd	r24, Z+6	; 0x06
    65ac:	97 81       	ldd	r25, Z+7	; 0x07
    65ae:	88 0f       	add	r24, r24
    65b0:	99 1f       	adc	r25, r25
    65b2:	16 96       	adiw	r26, 0x06	; 6
    65b4:	8d 93       	st	X+, r24
    65b6:	9c 93       	st	X, r25
    65b8:	17 97       	sbiw	r26, 0x07	; 7

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
				while (ticks_per_step & 0xFFFF0000) {
    65ba:	db 01       	movw	r26, r22
    65bc:	ca 01       	movw	r24, r20
    65be:	80 70       	andi	r24, 0x00	; 0
    65c0:	90 70       	andi	r25, 0x00	; 0
    65c2:	00 97       	sbiw	r24, 0x00	; 0
    65c4:	a1 05       	cpc	r26, r1
    65c6:	b1 05       	cpc	r27, r1
    65c8:	61 f6       	brne	.-104    	; 0x6562 <mv_queue_move_buffer+0x2c8>
					ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    65ca:	83 2d       	mov	r24, r3
    65cc:	92 2d       	mov	r25, r2
    65ce:	9c 01       	movw	r18, r24
    65d0:	73 e0       	ldi	r23, 0x03	; 3
    65d2:	22 0f       	add	r18, r18
    65d4:	33 1f       	adc	r19, r19
    65d6:	7a 95       	dec	r23
    65d8:	e1 f7       	brne	.-8      	; 0x65d2 <mv_queue_move_buffer+0x338>
    65da:	88 0f       	add	r24, r24
    65dc:	99 1f       	adc	r25, r25
    65de:	28 0f       	add	r18, r24
    65e0:	39 1f       	adc	r19, r25
    65e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    65e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    65e6:	82 0f       	add	r24, r18
    65e8:	93 1f       	adc	r25, r19
    65ea:	dc 01       	movw	r26, r24
    65ec:	14 96       	adiw	r26, 0x04	; 4
    65ee:	4d 93       	st	X+, r20
    65f0:	5c 93       	st	X, r21
    65f2:	15 97       	sbiw	r26, 0x05	; 5
    65f4:	08 94       	sec
    65f6:	41 1c       	adc	r4, r1
    65f8:	51 1c       	adc	r5, r1
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    65fa:	b3 e0       	ldi	r27, 0x03	; 3
    65fc:	4b 16       	cp	r4, r27
    65fe:	51 04       	cpc	r5, r1
    6600:	09 f0       	breq	.+2      	; 0x6604 <mv_queue_move_buffer+0x36a>
    6602:	fe ce       	rjmp	.-516    	; 0x6400 <mv_queue_move_buffer+0x166>
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    6604:	e9 85       	ldd	r30, Y+9	; 0x09
    6606:	e0 93 3e 23 	sts	0x233E, r30
	st_execute_move();
    660a:	0e 94 36 25 	call	0x4a6c	; 0x4a6c <st_execute_move>
    660e:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    6610:	2b 96       	adiw	r28, 0x0b	; 11
    6612:	cd bf       	out	0x3d, r28	; 61
    6614:	de bf       	out	0x3e, r29	; 62
    6616:	cf 91       	pop	r28
    6618:	df 91       	pop	r29
    661a:	1f 91       	pop	r17
    661c:	0f 91       	pop	r16
    661e:	ff 90       	pop	r15
    6620:	ef 90       	pop	r14
    6622:	df 90       	pop	r13
    6624:	cf 90       	pop	r12
    6626:	bf 90       	pop	r11
    6628:	af 90       	pop	r10
    662a:	9f 90       	pop	r9
    662c:	8f 90       	pop	r8
    662e:	7f 90       	pop	r7
    6630:	6f 90       	pop	r6
    6632:	5f 90       	pop	r5
    6634:	4f 90       	pop	r4
    6636:	3f 90       	pop	r3
    6638:	2f 90       	pop	r2
    663a:	08 95       	ret

0000663c <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    663c:	a2 ee       	ldi	r26, 0xE2	; 226
    663e:	b3 e2       	ldi	r27, 0x23	; 35
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    6640:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    6642:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    6644:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    6646:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    6648:	ed 91       	ld	r30, X+
    664a:	fc 91       	ld	r31, X
    664c:	11 97       	sbiw	r26, 0x01	; 1
    664e:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    6650:	ed 91       	ld	r30, X+
    6652:	fc 91       	ld	r31, X
    6654:	11 97       	sbiw	r26, 0x01	; 1
    6656:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    6658:	ed 91       	ld	r30, X+
    665a:	fc 91       	ld	r31, X
    665c:	11 97       	sbiw	r26, 0x01	; 1
    665e:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    6660:	ed 91       	ld	r30, X+
    6662:	fc 91       	ld	r31, X
    6664:	11 97       	sbiw	r26, 0x01	; 1
    6666:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    6668:	ed 91       	ld	r30, X+
    666a:	fc 91       	ld	r31, X
    666c:	11 97       	sbiw	r26, 0x01	; 1
    666e:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    6670:	ed 91       	ld	r30, X+
    6672:	fc 91       	ld	r31, X
    6674:	11 97       	sbiw	r26, 0x01	; 1
    6676:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    6678:	ed 91       	ld	r30, X+
    667a:	fc 91       	ld	r31, X
    667c:	11 97       	sbiw	r26, 0x01	; 1
    667e:	31 87       	std	Z+9, r19	; 0x09
    6680:	50 96       	adiw	r26, 0x10	; 16
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    6682:	44 e2       	ldi	r20, 0x24	; 36
    6684:	a2 32       	cpi	r26, 0x22	; 34
    6686:	b4 07       	cpc	r27, r20
    6688:	f9 f6       	brne	.-66     	; 0x6648 <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    668a:	08 95       	ret

0000668c <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    668c:	1f 92       	push	r1
    668e:	0f 92       	push	r0
    6690:	0f b6       	in	r0, 0x3f	; 63
    6692:	0f 92       	push	r0
    6694:	11 24       	eor	r1, r1
    6696:	0f 90       	pop	r0
    6698:	0f be       	out	0x3f, r0	; 63
    669a:	0f 90       	pop	r0
    669c:	1f 90       	pop	r1
    669e:	18 95       	reti

000066a0 <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    66a0:	1f 92       	push	r1
    66a2:	0f 92       	push	r0
    66a4:	0f b6       	in	r0, 0x3f	; 63
    66a6:	0f 92       	push	r0
    66a8:	11 24       	eor	r1, r1
    66aa:	0f 90       	pop	r0
    66ac:	0f be       	out	0x3f, r0	; 63
    66ae:	0f 90       	pop	r0
    66b0:	1f 90       	pop	r1
    66b2:	18 95       	reti

000066b4 <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    66b4:	1f 92       	push	r1
    66b6:	0f 92       	push	r0
    66b8:	0f b6       	in	r0, 0x3f	; 63
    66ba:	0f 92       	push	r0
    66bc:	11 24       	eor	r1, r1
    66be:	0f 90       	pop	r0
    66c0:	0f be       	out	0x3f, r0	; 63
    66c2:	0f 90       	pop	r0
    66c4:	1f 90       	pop	r1
    66c6:	18 95       	reti

000066c8 <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    66c8:	1f 92       	push	r1
    66ca:	0f 92       	push	r0
    66cc:	0f b6       	in	r0, 0x3f	; 63
    66ce:	0f 92       	push	r0
    66d0:	11 24       	eor	r1, r1
    66d2:	0f 90       	pop	r0
    66d4:	0f be       	out	0x3f, r0	; 63
    66d6:	0f 90       	pop	r0
    66d8:	1f 90       	pop	r1
    66da:	18 95       	reti

000066dc <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    66dc:	1f 92       	push	r1
    66de:	0f 92       	push	r0
    66e0:	0f b6       	in	r0, 0x3f	; 63
    66e2:	0f 92       	push	r0
    66e4:	11 24       	eor	r1, r1
    66e6:	0f 90       	pop	r0
    66e8:	0f be       	out	0x3f, r0	; 63
    66ea:	0f 90       	pop	r0
    66ec:	1f 90       	pop	r1
    66ee:	18 95       	reti

000066f0 <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    66f0:	1f 92       	push	r1
    66f2:	0f 92       	push	r0
    66f4:	0f b6       	in	r0, 0x3f	; 63
    66f6:	0f 92       	push	r0
    66f8:	11 24       	eor	r1, r1
    66fa:	0f 90       	pop	r0
    66fc:	0f be       	out	0x3f, r0	; 63
    66fe:	0f 90       	pop	r0
    6700:	1f 90       	pop	r1
    6702:	18 95       	reti

00006704 <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    6704:	1f 92       	push	r1
    6706:	0f 92       	push	r0
    6708:	0f b6       	in	r0, 0x3f	; 63
    670a:	0f 92       	push	r0
    670c:	11 24       	eor	r1, r1
    670e:	0f 90       	pop	r0
    6710:	0f be       	out	0x3f, r0	; 63
    6712:	0f 90       	pop	r0
    6714:	1f 90       	pop	r1
    6716:	18 95       	reti

00006718 <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    6718:	1f 92       	push	r1
    671a:	0f 92       	push	r0
    671c:	0f b6       	in	r0, 0x3f	; 63
    671e:	0f 92       	push	r0
    6720:	11 24       	eor	r1, r1
    6722:	0f 90       	pop	r0
    6724:	0f be       	out	0x3f, r0	; 63
    6726:	0f 90       	pop	r0
    6728:	1f 90       	pop	r1
    672a:	18 95       	reti

0000672c <xio_rs485_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_rs485_init(const uint16_t control)
{
    672c:	9c 01       	movw	r18, r24
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    672e:	e8 2f       	mov	r30, r24
    6730:	ef 70       	andi	r30, 0x0F	; 15

	// transfer control flags to internal flag bits
	fr.flags = XIO_FLAG_RS485_DEFS_gm;		// set flags to defaults & initial state
    6732:	87 e3       	ldi	r24, 0x37	; 55
    6734:	90 e0       	ldi	r25, 0x00	; 0
    6736:	80 93 9c 23 	sts	0x239C, r24
    673a:	90 93 9d 23 	sts	0x239D, r25
		fr.flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		fr.flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    673e:	26 ff       	sbrs	r18, 6
    6740:	06 c0       	rjmp	.+12     	; 0x674e <xio_rs485_init+0x22>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    6742:	87 e3       	ldi	r24, 0x37	; 55
    6744:	90 e0       	ldi	r25, 0x00	; 0
    6746:	80 93 9c 23 	sts	0x239C, r24
    674a:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_NOBLOCK) {
    674e:	27 ff       	sbrs	r18, 7
    6750:	06 c0       	rjmp	.+12     	; 0x675e <xio_rs485_init+0x32>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    6752:	83 e3       	ldi	r24, 0x33	; 51
    6754:	90 e0       	ldi	r25, 0x00	; 0
    6756:	80 93 9c 23 	sts	0x239C, r24
    675a:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_ECHO) {
    675e:	30 ff       	sbrs	r19, 0
    6760:	09 c0       	rjmp	.+18     	; 0x6774 <xio_rs485_init+0x48>
		fr.flags |= XIO_FLAG_ECHO_bm;
    6762:	80 91 9c 23 	lds	r24, 0x239C
    6766:	90 91 9d 23 	lds	r25, 0x239D
    676a:	80 61       	ori	r24, 0x10	; 16
    676c:	80 93 9c 23 	sts	0x239C, r24
    6770:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_NOECHO) {
    6774:	31 ff       	sbrs	r19, 1
    6776:	09 c0       	rjmp	.+18     	; 0x678a <xio_rs485_init+0x5e>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    6778:	80 91 9c 23 	lds	r24, 0x239C
    677c:	90 91 9d 23 	lds	r25, 0x239D
    6780:	8f 7e       	andi	r24, 0xEF	; 239
    6782:	80 93 9c 23 	sts	0x239C, r24
    6786:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_CRLF) {
    678a:	32 ff       	sbrs	r19, 2
    678c:	09 c0       	rjmp	.+18     	; 0x67a0 <xio_rs485_init+0x74>
		fr.flags |= XIO_FLAG_CRLF_bm;
    678e:	80 91 9c 23 	lds	r24, 0x239C
    6792:	90 91 9d 23 	lds	r25, 0x239D
    6796:	80 62       	ori	r24, 0x20	; 32
    6798:	80 93 9c 23 	sts	0x239C, r24
    679c:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_NOCRLF) {
    67a0:	33 ff       	sbrs	r19, 3
    67a2:	09 c0       	rjmp	.+18     	; 0x67b6 <xio_rs485_init+0x8a>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    67a4:	80 91 9c 23 	lds	r24, 0x239C
    67a8:	90 91 9d 23 	lds	r25, 0x239D
    67ac:	8f 7d       	andi	r24, 0xDF	; 223
    67ae:	80 93 9c 23 	sts	0x239C, r24
    67b2:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_LINEMODE) {
    67b6:	34 ff       	sbrs	r19, 4
    67b8:	09 c0       	rjmp	.+18     	; 0x67cc <xio_rs485_init+0xa0>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    67ba:	80 91 9c 23 	lds	r24, 0x239C
    67be:	90 91 9d 23 	lds	r25, 0x239D
    67c2:	80 64       	ori	r24, 0x40	; 64
    67c4:	80 93 9c 23 	sts	0x239C, r24
    67c8:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_NOLINEMODE) {
    67cc:	35 ff       	sbrs	r19, 5
    67ce:	09 c0       	rjmp	.+18     	; 0x67e2 <xio_rs485_init+0xb6>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    67d0:	80 91 9c 23 	lds	r24, 0x239C
    67d4:	90 91 9d 23 	lds	r25, 0x239D
    67d8:	8f 7b       	andi	r24, 0xBF	; 191
    67da:	80 93 9c 23 	sts	0x239C, r24
    67de:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_SEMICOLONS) {
    67e2:	36 ff       	sbrs	r19, 6
    67e4:	09 c0       	rjmp	.+18     	; 0x67f8 <xio_rs485_init+0xcc>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    67e6:	80 91 9c 23 	lds	r24, 0x239C
    67ea:	90 91 9d 23 	lds	r25, 0x239D
    67ee:	80 68       	ori	r24, 0x80	; 128
    67f0:	80 93 9c 23 	sts	0x239C, r24
    67f4:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    67f8:	37 ff       	sbrs	r19, 7
    67fa:	09 c0       	rjmp	.+18     	; 0x680e <xio_rs485_init+0xe2>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    67fc:	80 91 9c 23 	lds	r24, 0x239C
    6800:	90 91 9d 23 	lds	r25, 0x239D
    6804:	8f 77       	andi	r24, 0x7F	; 127
    6806:	80 93 9c 23 	sts	0x239C, r24
    680a:	90 93 9d 23 	sts	0x239D, r25
	}

	// character signals and error returns
	fr.sig = 0;
    680e:	10 92 9f 23 	sts	0x239F, r1
	dev_rs485.udata = &(fr.sig);				// bind sig register to FILE struct
    6812:	8f e9       	ldi	r24, 0x9F	; 159
    6814:	93 e2       	ldi	r25, 0x23	; 35
    6816:	80 93 28 20 	sts	0x2028, r24
    681a:	90 93 29 20 	sts	0x2029, r25

	// setup internal RX/TX buffers
	fr.rx_buf_head = 1;						// can't use location 0
    681e:	81 e0       	ldi	r24, 0x01	; 1
    6820:	80 93 a6 23 	sts	0x23A6, r24
	fr.rx_buf_tail = 1;
    6824:	80 93 a5 23 	sts	0x23A5, r24
	fr.tx_buf_head = 1;
    6828:	80 93 a8 23 	sts	0x23A8, r24
	fr.tx_buf_tail = 1;
    682c:	80 93 a7 23 	sts	0x23A7, r24
	fr.len = sizeof(fr.buf);					// offset to zero
    6830:	82 e0       	ldi	r24, 0x02	; 2
    6832:	80 93 a2 23 	sts	0x23A2, r24

	fr.usart = &RS485_USART;				// bind USART structure
    6836:	80 eb       	ldi	r24, 0xB0	; 176
    6838:	98 e0       	ldi	r25, 0x08	; 8
    683a:	80 93 aa 23 	sts	0x23AA, r24
    683e:	90 93 ab 23 	sts	0x23AB, r25
	fr.port = &RS485_PORT;					// bind PORT structure
    6842:	80 e4       	ldi	r24, 0x40	; 64
    6844:	96 e0       	ldi	r25, 0x06	; 6
    6846:	80 93 ac 23 	sts	0x23AC, r24
    684a:	90 93 ad 23 	sts	0x23AD, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    684e:	ee 23       	and	r30, r30
    6850:	09 f4       	brne	.+2      	; 0x6854 <xio_rs485_init+0x128>
    6852:	e5 e0       	ldi	r30, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    6854:	8e 2f       	mov	r24, r30
    6856:	90 e0       	ldi	r25, 0x00	; 0
    6858:	fc 01       	movw	r30, r24
    685a:	ef 5f       	subi	r30, 0xFF	; 255
    685c:	f1 4e       	sbci	r31, 0xE1	; 225
    685e:	e4 91       	lpm	r30, Z+
    6860:	a0 eb       	ldi	r26, 0xB0	; 176
    6862:	b8 e0       	ldi	r27, 0x08	; 8
    6864:	16 96       	adiw	r26, 0x06	; 6
    6866:	ec 93       	st	X, r30
    6868:	16 97       	sbiw	r26, 0x06	; 6
	fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    686a:	84 5f       	subi	r24, 0xF4	; 244
    686c:	91 4e       	sbci	r25, 0xE1	; 225
    686e:	fc 01       	movw	r30, r24
    6870:	84 91       	lpm	r24, Z+
    6872:	17 96       	adiw	r26, 0x07	; 7
    6874:	8c 93       	st	X, r24
    6876:	17 97       	sbiw	r26, 0x07	; 7
	fr.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx on USART
    6878:	88 e1       	ldi	r24, 0x18	; 24
    687a:	14 96       	adiw	r26, 0x04	; 4
    687c:	8c 93       	st	X, r24
    687e:	14 97       	sbiw	r26, 0x04	; 4
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    6880:	81 e2       	ldi	r24, 0x21	; 33
    6882:	13 96       	adiw	r26, 0x03	; 3
    6884:	8c 93       	st	X, r24

	fr.port->DIRCLR = RS485_RX_bm;	// clr RX pin as input
    6886:	e0 e4       	ldi	r30, 0x40	; 64
    6888:	f6 e0       	ldi	r31, 0x06	; 6
    688a:	80 e4       	ldi	r24, 0x40	; 64
    688c:	82 83       	std	Z+2, r24	; 0x02
	fr.port->DIRSET = RS485_TX_bm; 	// set TX pin as output
    688e:	80 e8       	ldi	r24, 0x80	; 128
    6890:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTSET = RS485_TX_bm;	// set TX HI as initial state
    6892:	85 83       	std	Z+5, r24	; 0x05
	fr.port->DIRSET = RS485_DE_bm; 	// Data Enable (TX) to output (TX enabled hi)
    6894:	90 e2       	ldi	r25, 0x20	; 32
    6896:	91 83       	std	Z+1, r25	; 0x01
	fr.port->DIRSET = RS485_RE_bm; 	// Recv Enable (RX) to output (RX enabled lo)
    6898:	80 e1       	ldi	r24, 0x10	; 16
    689a:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTCLR = RS485_DE_bm;	// DE lo initially (TX disabled)
    689c:	96 83       	std	Z+6, r25	; 0x06
	fr.port->OUTCLR = RS485_RE_bm; 	// RE lo initially (RX enabled)
    689e:	86 83       	std	Z+6, r24	; 0x06
}
    68a0:	08 95       	ret

000068a2 <xio_rs485_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_rs485_control(const uint16_t control, const int16_t arg)
{
    68a2:	ac 01       	movw	r20, r24
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    68a4:	8f 70       	andi	r24, 0x0F	; 15
    68a6:	90 70       	andi	r25, 0x00	; 0
    68a8:	00 97       	sbiw	r24, 0x00	; 0
    68aa:	91 f0       	breq	.+36     	; 0x68d0 <xio_rs485_control+0x2e>
		fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    68ac:	a0 91 aa 23 	lds	r26, 0x23AA
    68b0:	b0 91 ab 23 	lds	r27, 0x23AB
    68b4:	9c 01       	movw	r18, r24
    68b6:	2f 5f       	subi	r18, 0xFF	; 255
    68b8:	31 4e       	sbci	r19, 0xE1	; 225
    68ba:	f9 01       	movw	r30, r18
    68bc:	24 91       	lpm	r18, Z+
    68be:	16 96       	adiw	r26, 0x06	; 6
    68c0:	2c 93       	st	X, r18
    68c2:	16 97       	sbiw	r26, 0x06	; 6
		fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    68c4:	84 5f       	subi	r24, 0xF4	; 244
    68c6:	91 4e       	sbci	r25, 0xE1	; 225
    68c8:	fc 01       	movw	r30, r24
    68ca:	84 91       	lpm	r24, Z+
    68cc:	17 96       	adiw	r26, 0x07	; 7
    68ce:	8c 93       	st	X, r24
	}
	if (control & XIO_BLOCK) {
    68d0:	46 ff       	sbrs	r20, 6
    68d2:	09 c0       	rjmp	.+18     	; 0x68e6 <xio_rs485_control+0x44>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    68d4:	80 91 9c 23 	lds	r24, 0x239C
    68d8:	90 91 9d 23 	lds	r25, 0x239D
    68dc:	84 60       	ori	r24, 0x04	; 4
    68de:	80 93 9c 23 	sts	0x239C, r24
    68e2:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_NOBLOCK) {
    68e6:	47 ff       	sbrs	r20, 7
    68e8:	09 c0       	rjmp	.+18     	; 0x68fc <xio_rs485_control+0x5a>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    68ea:	80 91 9c 23 	lds	r24, 0x239C
    68ee:	90 91 9d 23 	lds	r25, 0x239D
    68f2:	8b 7f       	andi	r24, 0xFB	; 251
    68f4:	80 93 9c 23 	sts	0x239C, r24
    68f8:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_ECHO) {
    68fc:	50 ff       	sbrs	r21, 0
    68fe:	09 c0       	rjmp	.+18     	; 0x6912 <xio_rs485_control+0x70>
		fr.flags |= XIO_FLAG_ECHO_bm;
    6900:	80 91 9c 23 	lds	r24, 0x239C
    6904:	90 91 9d 23 	lds	r25, 0x239D
    6908:	80 61       	ori	r24, 0x10	; 16
    690a:	80 93 9c 23 	sts	0x239C, r24
    690e:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_NOECHO) {
    6912:	51 ff       	sbrs	r21, 1
    6914:	09 c0       	rjmp	.+18     	; 0x6928 <xio_rs485_control+0x86>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    6916:	80 91 9c 23 	lds	r24, 0x239C
    691a:	90 91 9d 23 	lds	r25, 0x239D
    691e:	8f 7e       	andi	r24, 0xEF	; 239
    6920:	80 93 9c 23 	sts	0x239C, r24
    6924:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_CRLF) {
    6928:	52 ff       	sbrs	r21, 2
    692a:	09 c0       	rjmp	.+18     	; 0x693e <xio_rs485_control+0x9c>
		fr.flags |= XIO_FLAG_CRLF_bm;
    692c:	80 91 9c 23 	lds	r24, 0x239C
    6930:	90 91 9d 23 	lds	r25, 0x239D
    6934:	80 62       	ori	r24, 0x20	; 32
    6936:	80 93 9c 23 	sts	0x239C, r24
    693a:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_NOCRLF) {
    693e:	53 ff       	sbrs	r21, 3
    6940:	09 c0       	rjmp	.+18     	; 0x6954 <xio_rs485_control+0xb2>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    6942:	80 91 9c 23 	lds	r24, 0x239C
    6946:	90 91 9d 23 	lds	r25, 0x239D
    694a:	8f 7d       	andi	r24, 0xDF	; 223
    694c:	80 93 9c 23 	sts	0x239C, r24
    6950:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_LINEMODE) {
    6954:	54 ff       	sbrs	r21, 4
    6956:	09 c0       	rjmp	.+18     	; 0x696a <xio_rs485_control+0xc8>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    6958:	80 91 9c 23 	lds	r24, 0x239C
    695c:	90 91 9d 23 	lds	r25, 0x239D
    6960:	80 64       	ori	r24, 0x40	; 64
    6962:	80 93 9c 23 	sts	0x239C, r24
    6966:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_NOLINEMODE) {
    696a:	55 ff       	sbrs	r21, 5
    696c:	09 c0       	rjmp	.+18     	; 0x6980 <xio_rs485_control+0xde>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    696e:	80 91 9c 23 	lds	r24, 0x239C
    6972:	90 91 9d 23 	lds	r25, 0x239D
    6976:	8f 7b       	andi	r24, 0xBF	; 191
    6978:	80 93 9c 23 	sts	0x239C, r24
    697c:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_SEMICOLONS) {
    6980:	56 ff       	sbrs	r21, 6
    6982:	09 c0       	rjmp	.+18     	; 0x6996 <xio_rs485_control+0xf4>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    6984:	80 91 9c 23 	lds	r24, 0x239C
    6988:	90 91 9d 23 	lds	r25, 0x239D
    698c:	80 68       	ori	r24, 0x80	; 128
    698e:	80 93 9c 23 	sts	0x239C, r24
    6992:	90 93 9d 23 	sts	0x239D, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    6996:	57 ff       	sbrs	r21, 7
    6998:	09 c0       	rjmp	.+18     	; 0x69ac <xio_rs485_control+0x10a>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    699a:	80 91 9c 23 	lds	r24, 0x239C
    699e:	90 91 9d 23 	lds	r25, 0x239D
    69a2:	8f 77       	andi	r24, 0x7F	; 127
    69a4:	80 93 9c 23 	sts	0x239C, r24
    69a8:	90 93 9d 23 	sts	0x239D, r25
	}
	return (0);
}
    69ac:	80 e0       	ldi	r24, 0x00	; 0
    69ae:	08 95       	ret

000069b0 <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC0 data register empty
{
    69b0:	1f 92       	push	r1
    69b2:	0f 92       	push	r0
    69b4:	0f b6       	in	r0, 0x3f	; 63
    69b6:	0f 92       	push	r0
    69b8:	0b b6       	in	r0, 0x3b	; 59
    69ba:	0f 92       	push	r0
    69bc:	11 24       	eor	r1, r1
    69be:	8f 93       	push	r24
    69c0:	9f 93       	push	r25
    69c2:	af 93       	push	r26
    69c4:	bf 93       	push	r27
    69c6:	ef 93       	push	r30
    69c8:	ff 93       	push	r31
	if (fr.tx_buf_head == fr.tx_buf_tail) {			// buffer empty - disable ints
    69ca:	90 91 a8 23 	lds	r25, 0x23A8
    69ce:	80 91 a7 23 	lds	r24, 0x23A7
    69d2:	98 17       	cp	r25, r24
    69d4:	39 f4       	brne	.+14     	; 0x69e4 <__vector_29+0x34>
		fr.usart->CTRLA = USART_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    69d6:	e0 91 aa 23 	lds	r30, 0x23AA
    69da:	f0 91 ab 23 	lds	r31, 0x23AB
    69de:	80 e2       	ldi	r24, 0x20	; 32
    69e0:	83 83       	std	Z+3, r24	; 0x03
    69e2:	1e c0       	rjmp	.+60     	; 0x6a20 <__vector_29+0x70>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(fr.flags)) {
    69e4:	80 91 9c 23 	lds	r24, 0x239C
    69e8:	90 91 9d 23 	lds	r25, 0x239D
    69ec:	93 fd       	sbrc	r25, 3
    69ee:	18 c0       	rjmp	.+48     	; 0x6a20 <__vector_29+0x70>
		if (--(fr.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    69f0:	80 91 a7 23 	lds	r24, 0x23A7
    69f4:	81 50       	subi	r24, 0x01	; 1
    69f6:	80 93 a7 23 	sts	0x23A7, r24
    69fa:	80 91 a7 23 	lds	r24, 0x23A7
    69fe:	88 23       	and	r24, r24
    6a00:	19 f4       	brne	.+6      	; 0x6a08 <__vector_29+0x58>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6a02:	81 e1       	ldi	r24, 0x11	; 17
    6a04:	80 93 a7 23 	sts	0x23A7, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];	// write char to TX DATA register
    6a08:	e0 91 aa 23 	lds	r30, 0x23AA
    6a0c:	f0 91 ab 23 	lds	r31, 0x23AB
    6a10:	a0 91 a7 23 	lds	r26, 0x23A7
    6a14:	b0 e0       	ldi	r27, 0x00	; 0
    6a16:	a4 56       	subi	r26, 0x64	; 100
    6a18:	bc 4d       	sbci	r27, 0xDC	; 220
    6a1a:	94 96       	adiw	r26, 0x24	; 36
    6a1c:	8c 91       	ld	r24, X
    6a1e:	80 83       	st	Z, r24
	}
}
    6a20:	ff 91       	pop	r31
    6a22:	ef 91       	pop	r30
    6a24:	bf 91       	pop	r27
    6a26:	af 91       	pop	r26
    6a28:	9f 91       	pop	r25
    6a2a:	8f 91       	pop	r24
    6a2c:	0f 90       	pop	r0
    6a2e:	0b be       	out	0x3b, r0	; 59
    6a30:	0f 90       	pop	r0
    6a32:	0f be       	out	0x3f, r0	; 63
    6a34:	0f 90       	pop	r0
    6a36:	1f 90       	pop	r1
    6a38:	18 95       	reti

00006a3a <xio_rs485_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_rs485_putc(const char c, FILE *stream)
{
    6a3a:	48 2f       	mov	r20, r24
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(fr.flags)) {
    6a3c:	20 91 9c 23 	lds	r18, 0x239C
    6a40:	30 91 9d 23 	lds	r19, 0x239D
    6a44:	d9 01       	movw	r26, r18
    6a46:	a4 70       	andi	r26, 0x04	; 4
    6a48:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	fr.tx_buf_head = fr.next_tx_buf_head;			// accept the next buffer head value
	fr.tx_buf[fr.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(fr.flags) && (c == '\n')) {			// detect LF and add a CR
    6a4a:	b9 01       	movw	r22, r18
    6a4c:	60 72       	andi	r22, 0x20	; 32
    6a4e:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_rs485_putc(const char c, FILE *stream)
{
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
    6a50:	90 91 a8 23 	lds	r25, 0x23A8
    6a54:	91 50       	subi	r25, 0x01	; 1
    6a56:	c1 f4       	brne	.+48     	; 0x6a88 <xio_rs485_putc+0x4e>
    6a58:	91 e1       	ldi	r25, 0x11	; 17
    6a5a:	16 c0       	rjmp	.+44     	; 0x6a88 <xio_rs485_putc+0x4e>
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(fr.flags)) {
    6a5c:	10 97       	sbiw	r26, 0x00	; 0
    6a5e:	61 f0       	breq	.+24     	; 0x6a78 <xio_rs485_putc+0x3e>
			sleep_mode();
    6a60:	80 91 48 00 	lds	r24, 0x0048
    6a64:	81 60       	ori	r24, 0x01	; 1
    6a66:	80 93 48 00 	sts	0x0048, r24
    6a6a:	88 95       	sleep
    6a6c:	80 91 48 00 	lds	r24, 0x0048
    6a70:	8e 7f       	andi	r24, 0xFE	; 254
    6a72:	80 93 48 00 	sts	0x0048, r24
    6a76:	08 c0       	rjmp	.+16     	; 0x6a88 <xio_rs485_putc+0x4e>
    6a78:	90 93 a9 23 	sts	0x23A9, r25
		} else {
			fr.sig = XIO_SIG_EAGAIN;
    6a7c:	81 e0       	ldi	r24, 0x01	; 1
    6a7e:	80 93 9f 23 	sts	0x239F, r24
    6a82:	2f ef       	ldi	r18, 0xFF	; 255
    6a84:	3f ef       	ldi	r19, 0xFF	; 255
    6a86:	54 c0       	rjmp	.+168    	; 0x6b30 <xio_rs485_putc+0xf6>
int xio_rs485_putc(const char c, FILE *stream)
{
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
    6a88:	80 91 a7 23 	lds	r24, 0x23A7
    6a8c:	98 17       	cp	r25, r24
    6a8e:	31 f3       	breq	.-52     	; 0x6a5c <xio_rs485_putc+0x22>
			fr.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	fr.tx_buf_head = fr.next_tx_buf_head;			// accept the next buffer head value
    6a90:	90 93 a8 23 	sts	0x23A8, r25
	fr.tx_buf[fr.tx_buf_head] = c;				// ...and write char to buffer
    6a94:	e0 91 a8 23 	lds	r30, 0x23A8
    6a98:	f0 e0       	ldi	r31, 0x00	; 0
    6a9a:	e4 56       	subi	r30, 0x64	; 100
    6a9c:	fc 4d       	sbci	r31, 0xDC	; 220
    6a9e:	44 a3       	std	Z+36, r20	; 0x24

	if (CRLF(fr.flags) && (c == '\n')) {			// detect LF and add a CR
    6aa0:	61 15       	cp	r22, r1
    6aa2:	71 05       	cpc	r23, r1
    6aa4:	21 f0       	breq	.+8      	; 0x6aae <xio_rs485_putc+0x74>
    6aa6:	4a 30       	cpi	r20, 0x0A	; 10
    6aa8:	11 f4       	brne	.+4      	; 0x6aae <xio_rs485_putc+0x74>
    6aaa:	4d e0       	ldi	r20, 0x0D	; 13
    6aac:	d1 cf       	rjmp	.-94     	; 0x6a50 <xio_rs485_putc+0x16>
    6aae:	90 93 a9 23 	sts	0x23A9, r25
		return xio_rs485_putc('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (fr.usart->STATUS & 0x20) {
    6ab2:	a0 91 aa 23 	lds	r26, 0x23AA
    6ab6:	b0 91 ab 23 	lds	r27, 0x23AB
    6aba:	11 96       	adiw	r26, 0x01	; 1
    6abc:	8c 91       	ld	r24, X
    6abe:	11 97       	sbiw	r26, 0x01	; 1
    6ac0:	85 ff       	sbrs	r24, 5
    6ac2:	27 c0       	rjmp	.+78     	; 0x6b12 <xio_rs485_putc+0xd8>
		if (fr.tx_buf_head == fr.tx_buf_tail) {	// buf might be empty if IRQ got it
    6ac4:	90 91 a8 23 	lds	r25, 0x23A8
    6ac8:	80 91 a7 23 	lds	r24, 0x23A7
    6acc:	98 17       	cp	r25, r24
    6ace:	71 f1       	breq	.+92     	; 0x6b2c <xio_rs485_putc+0xf2>
			return (0);
		}
		fr.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    6ad0:	38 60       	ori	r19, 0x08	; 8
    6ad2:	20 93 9c 23 	sts	0x239C, r18
    6ad6:	30 93 9d 23 	sts	0x239D, r19
		if (--(fr.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    6ada:	80 91 a7 23 	lds	r24, 0x23A7
    6ade:	81 50       	subi	r24, 0x01	; 1
    6ae0:	80 93 a7 23 	sts	0x23A7, r24
    6ae4:	80 91 a7 23 	lds	r24, 0x23A7
    6ae8:	88 23       	and	r24, r24
    6aea:	19 f4       	brne	.+6      	; 0x6af2 <xio_rs485_putc+0xb8>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6aec:	81 e1       	ldi	r24, 0x11	; 17
    6aee:	80 93 a7 23 	sts	0x23A7, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];// write char to TX DATA register
    6af2:	e0 91 a7 23 	lds	r30, 0x23A7
    6af6:	f0 e0       	ldi	r31, 0x00	; 0
    6af8:	e4 56       	subi	r30, 0x64	; 100
    6afa:	fc 4d       	sbci	r31, 0xDC	; 220
    6afc:	84 a1       	ldd	r24, Z+36	; 0x24
    6afe:	8c 93       	st	X, r24
		fr.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    6b00:	80 91 9c 23 	lds	r24, 0x239C
    6b04:	90 91 9d 23 	lds	r25, 0x239D
    6b08:	97 7f       	andi	r25, 0xF7	; 247
    6b0a:	80 93 9c 23 	sts	0x239C, r24
    6b0e:	90 93 9d 23 	sts	0x239D, r25
	}
	// enable interrupts regardless
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    6b12:	e0 91 aa 23 	lds	r30, 0x23AA
    6b16:	f0 91 ab 23 	lds	r31, 0x23AB
    6b1a:	81 e2       	ldi	r24, 0x21	; 33
    6b1c:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    6b1e:	80 91 a2 00 	lds	r24, 0x00A2
    6b22:	81 60       	ori	r24, 0x01	; 1
    6b24:	e0 ea       	ldi	r30, 0xA0	; 160
    6b26:	f0 e0       	ldi	r31, 0x00	; 0
    6b28:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    6b2a:	78 94       	sei
    6b2c:	20 e0       	ldi	r18, 0x00	; 0
    6b2e:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    6b30:	c9 01       	movw	r24, r18
    6b32:	08 95       	ret

00006b34 <xio_rs485_getc>:
 */

int xio_rs485_getc(FILE *stream)
{
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(fr.flags)) {
    6b34:	20 91 9c 23 	lds	r18, 0x239C
    6b38:	30 91 9d 23 	lds	r19, 0x239D
    6b3c:	24 70       	andi	r18, 0x04	; 4
    6b3e:	30 70       	andi	r19, 0x00	; 0
    6b40:	15 c0       	rjmp	.+42     	; 0x6b6c <xio_rs485_getc+0x38>
    6b42:	21 15       	cp	r18, r1
    6b44:	31 05       	cpc	r19, r1
    6b46:	61 f0       	breq	.+24     	; 0x6b60 <xio_rs485_getc+0x2c>
			sleep_mode();
    6b48:	80 91 48 00 	lds	r24, 0x0048
    6b4c:	81 60       	ori	r24, 0x01	; 1
    6b4e:	80 93 48 00 	sts	0x0048, r24
    6b52:	88 95       	sleep
    6b54:	80 91 48 00 	lds	r24, 0x0048
    6b58:	8e 7f       	andi	r24, 0xFE	; 254
    6b5a:	80 93 48 00 	sts	0x0048, r24
    6b5e:	06 c0       	rjmp	.+12     	; 0x6b6c <xio_rs485_getc+0x38>
		} else {
			fr.sig = XIO_SIG_EAGAIN;
    6b60:	81 e0       	ldi	r24, 0x01	; 1
    6b62:	80 93 9f 23 	sts	0x239F, r24
    6b66:	2f ef       	ldi	r18, 0xFF	; 255
    6b68:	3f ef       	ldi	r19, 0xFF	; 255
    6b6a:	26 c0       	rjmp	.+76     	; 0x6bb8 <xio_rs485_getc+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_rs485_getc(FILE *stream)
{
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
    6b6c:	90 91 a6 23 	lds	r25, 0x23A6
    6b70:	80 91 a5 23 	lds	r24, 0x23A5
    6b74:	98 17       	cp	r25, r24
    6b76:	29 f3       	breq	.-54     	; 0x6b42 <xio_rs485_getc+0xe>
		} else {
			fr.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    6b78:	80 91 a5 23 	lds	r24, 0x23A5
    6b7c:	81 50       	subi	r24, 0x01	; 1
    6b7e:	80 93 a5 23 	sts	0x23A5, r24
    6b82:	80 91 a5 23 	lds	r24, 0x23A5
    6b86:	88 23       	and	r24, r24
    6b88:	19 f4       	brne	.+6      	; 0x6b90 <xio_rs485_getc+0x5c>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6b8a:	81 e1       	ldi	r24, 0x11	; 17
    6b8c:	80 93 a5 23 	sts	0x23A5, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    6b90:	e0 91 a5 23 	lds	r30, 0x23A5
    6b94:	f0 e0       	ldi	r31, 0x00	; 0
    6b96:	e4 56       	subi	r30, 0x64	; 100
    6b98:	fc 4d       	sbci	r31, 0xDC	; 220
    6b9a:	82 89       	ldd	r24, Z+18	; 0x12
    6b9c:	8f 77       	andi	r24, 0x7F	; 127
    6b9e:	80 93 a0 23 	sts	0x23A0, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[fr.c])))());
    6ba2:	90 e0       	ldi	r25, 0x00	; 0
    6ba4:	88 0f       	add	r24, r24
    6ba6:	99 1f       	adc	r25, r25
    6ba8:	8d 51       	subi	r24, 0x1D	; 29
    6baa:	93 4e       	sbci	r25, 0xE3	; 227
    6bac:	fc 01       	movw	r30, r24
    6bae:	25 91       	lpm	r18, Z+
    6bb0:	34 91       	lpm	r19, Z+
    6bb2:	f9 01       	movw	r30, r18
    6bb4:	19 95       	eicall
    6bb6:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    6bb8:	c9 01       	movw	r24, r18
    6bba:	08 95       	ret

00006bbc <_getc_char>:

/* xio_rs485_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    6bbc:	80 91 9c 23 	lds	r24, 0x239C
    6bc0:	84 ff       	sbrs	r24, 4
    6bc2:	08 c0       	rjmp	.+16     	; 0x6bd4 <_getc_char+0x18>
    6bc4:	60 91 82 25 	lds	r22, 0x2582
    6bc8:	70 91 83 25 	lds	r23, 0x2583
    6bcc:	80 91 a0 23 	lds	r24, 0x23A0
    6bd0:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <xio_rs485_putc>
	return(fr.c);
}
    6bd4:	80 91 a0 23 	lds	r24, 0x23A0
    6bd8:	90 e0       	ldi	r25, 0x00	; 0
    6bda:	08 95       	ret

00006bdc <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(fr.flags)) fr.c = '\n';
    6bdc:	90 91 9c 23 	lds	r25, 0x239C
    6be0:	96 ff       	sbrs	r25, 6
    6be2:	03 c0       	rjmp	.+6      	; 0x6bea <_getc_NEWLINE+0xe>
    6be4:	8a e0       	ldi	r24, 0x0A	; 10
    6be6:	80 93 a0 23 	sts	0x23A0, r24
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    6bea:	94 ff       	sbrs	r25, 4
    6bec:	08 c0       	rjmp	.+16     	; 0x6bfe <_getc_NEWLINE+0x22>
    6bee:	60 91 82 25 	lds	r22, 0x2582
    6bf2:	70 91 83 25 	lds	r23, 0x2583
    6bf6:	80 91 a0 23 	lds	r24, 0x23A0
    6bfa:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <xio_rs485_putc>
	return(fr.c);
}
    6bfe:	80 91 a0 23 	lds	r24, 0x23A0
    6c02:	90 e0       	ldi	r25, 0x00	; 0
    6c04:	08 95       	ret

00006c06 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(fr.flags)) {
    6c06:	80 91 9c 23 	lds	r24, 0x239C
    6c0a:	87 ff       	sbrs	r24, 7
    6c0c:	03 c0       	rjmp	.+6      	; 0x6c14 <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    6c0e:	0e 94 ee 35 	call	0x6bdc	; 0x6bdc <_getc_NEWLINE>
    6c12:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    6c14:	0e 94 de 35 	call	0x6bbc	; 0x6bbc <_getc_char>
}
    6c18:	08 95       	ret

00006c1a <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	fr.sig = XIO_SIG_DELETE;
    6c1a:	89 e0       	ldi	r24, 0x09	; 9
    6c1c:	80 93 9f 23 	sts	0x239F, r24
	return(_FDEV_ERR);
}
    6c20:	8f ef       	ldi	r24, 0xFF	; 255
    6c22:	9f ef       	ldi	r25, 0xFF	; 255
    6c24:	08 95       	ret

00006c26 <xio_rs485_readln>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_rs485_readln(char *buf, uint8_t len)
{
	if (!IN_LINE(fr.flags)) {					// first time thru initializations
    6c26:	20 91 9c 23 	lds	r18, 0x239C
    6c2a:	30 91 9d 23 	lds	r19, 0x239D
    6c2e:	36 fd       	sbrc	r19, 6
    6c30:	0d c0       	rjmp	.+26     	; 0x6c4c <xio_rs485_readln+0x26>
		fr.i = 0;								// zero buffer
    6c32:	10 92 a1 23 	sts	0x23A1, r1
		fr.len = len;							// save arg into struct 
    6c36:	60 93 a2 23 	sts	0x23A2, r22
		fr.buf = buf;							// save arg into struct 
    6c3a:	80 93 a3 23 	sts	0x23A3, r24
    6c3e:	90 93 a4 23 	sts	0x23A4, r25
//		fr.sig = XIO_SIG_OK;					// no signal action
		fr.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    6c42:	30 64       	ori	r19, 0x40	; 64
    6c44:	20 93 9c 23 	sts	0x239C, r18
    6c48:	30 93 9d 23 	sts	0x239D, r19
	}
	if (fr.rx_buf_head == fr.rx_buf_tail) {		// RX ISR buffer empty
    6c4c:	90 91 a6 23 	lds	r25, 0x23A6
    6c50:	80 91 a5 23 	lds	r24, 0x23A5
    6c54:	98 17       	cp	r25, r24
    6c56:	19 f4       	brne	.+6      	; 0x6c5e <xio_rs485_readln+0x38>
    6c58:	21 e0       	ldi	r18, 0x01	; 1
    6c5a:	30 e0       	ldi	r19, 0x00	; 0
    6c5c:	20 c0       	rjmp	.+64     	; 0x6c9e <xio_rs485_readln+0x78>
//		fr.sig = XIO_SIG_WOULDBLOCK;
		return(TG_EAGAIN);
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    6c5e:	80 91 a5 23 	lds	r24, 0x23A5
    6c62:	81 50       	subi	r24, 0x01	; 1
    6c64:	80 93 a5 23 	sts	0x23A5, r24
    6c68:	80 91 a5 23 	lds	r24, 0x23A5
    6c6c:	88 23       	and	r24, r24
    6c6e:	19 f4       	brne	.+6      	; 0x6c76 <xio_rs485_readln+0x50>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6c70:	81 e1       	ldi	r24, 0x11	; 17
    6c72:	80 93 a5 23 	sts	0x23A5, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    6c76:	e0 91 a5 23 	lds	r30, 0x23A5
    6c7a:	f0 e0       	ldi	r31, 0x00	; 0
    6c7c:	e4 56       	subi	r30, 0x64	; 100
    6c7e:	fc 4d       	sbci	r31, 0xDC	; 220
    6c80:	82 89       	ldd	r24, Z+18	; 0x12
    6c82:	8f 77       	andi	r24, 0x7F	; 127
    6c84:	80 93 a0 23 	sts	0x23A0, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[fr.c])))()); // dispatch on character
    6c88:	90 e0       	ldi	r25, 0x00	; 0
    6c8a:	88 0f       	add	r24, r24
    6c8c:	99 1f       	adc	r25, r25
    6c8e:	8d 51       	subi	r24, 0x1D	; 29
    6c90:	94 4e       	sbci	r25, 0xE4	; 228
    6c92:	fc 01       	movw	r30, r24
    6c94:	25 91       	lpm	r18, Z+
    6c96:	34 91       	lpm	r19, Z+
    6c98:	f9 01       	movw	r30, r18
    6c9a:	19 95       	eicall
    6c9c:	9c 01       	movw	r18, r24
}
    6c9e:	c9 01       	movw	r24, r18
    6ca0:	08 95       	ret

00006ca2 <_readln_char>:

/* xio_rs485_readln helper routines */

static int _readln_char(void)
{
	if (fr.i > fr.len) {						// trap buffer overflow
    6ca2:	90 91 a1 23 	lds	r25, 0x23A1
    6ca6:	20 91 a2 23 	lds	r18, 0x23A2
    6caa:	e0 91 a3 23 	lds	r30, 0x23A3
    6cae:	f0 91 a4 23 	lds	r31, 0x23A4
    6cb2:	29 17       	cp	r18, r25
    6cb4:	48 f4       	brcc	.+18     	; 0x6cc8 <_readln_char+0x26>
		fr.sig = XIO_SIG_EOL;
    6cb6:	82 e0       	ldi	r24, 0x02	; 2
    6cb8:	80 93 9f 23 	sts	0x239F, r24
		fr.buf[fr.len] = NUL;					// fr.len is zero based
    6cbc:	e2 0f       	add	r30, r18
    6cbe:	f1 1d       	adc	r31, r1
    6cc0:	10 82       	st	Z, r1
    6cc2:	27 e0       	ldi	r18, 0x07	; 7
    6cc4:	30 e0       	ldi	r19, 0x00	; 0
    6cc6:	16 c0       	rjmp	.+44     	; 0x6cf4 <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	fr.buf[fr.i++] = fr.c;
    6cc8:	e9 0f       	add	r30, r25
    6cca:	f1 1d       	adc	r31, r1
    6ccc:	80 91 a0 23 	lds	r24, 0x23A0
    6cd0:	80 83       	st	Z, r24
    6cd2:	9f 5f       	subi	r25, 0xFF	; 255
    6cd4:	90 93 a1 23 	sts	0x23A1, r25
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);// conditional echo
    6cd8:	80 91 9c 23 	lds	r24, 0x239C
    6cdc:	84 ff       	sbrs	r24, 4
    6cde:	08 c0       	rjmp	.+16     	; 0x6cf0 <_readln_char+0x4e>
    6ce0:	60 91 82 25 	lds	r22, 0x2582
    6ce4:	70 91 83 25 	lds	r23, 0x2583
    6ce8:	80 91 a0 23 	lds	r24, 0x23A0
    6cec:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <xio_rs485_putc>
    6cf0:	21 e0       	ldi	r18, 0x01	; 1
    6cf2:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_EAGAIN);						// line is still in process
}
    6cf4:	c9 01       	movw	r24, r18
    6cf6:	08 95       	ret

00006cf8 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	fr.sig = XIO_SIG_EOL;
    6cf8:	82 e0       	ldi	r24, 0x02	; 2
    6cfa:	80 93 9f 23 	sts	0x239F, r24
	fr.buf[fr.i] = NUL;
    6cfe:	80 91 a1 23 	lds	r24, 0x23A1
    6d02:	e0 91 a3 23 	lds	r30, 0x23A3
    6d06:	f0 91 a4 23 	lds	r31, 0x23A4
    6d0a:	e8 0f       	add	r30, r24
    6d0c:	f1 1d       	adc	r31, r1
    6d0e:	10 82       	st	Z, r1
	fr.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    6d10:	20 91 9c 23 	lds	r18, 0x239C
    6d14:	30 91 9d 23 	lds	r19, 0x239D
    6d18:	c9 01       	movw	r24, r18
    6d1a:	9f 7b       	andi	r25, 0xBF	; 191
    6d1c:	80 93 9c 23 	sts	0x239C, r24
    6d20:	90 93 9d 23 	sts	0x239D, r25
	if (ECHO(fr.flags)) xio_rs485_putc('\n',stdout);// echo a newline
    6d24:	24 ff       	sbrs	r18, 4
    6d26:	07 c0       	rjmp	.+14     	; 0x6d36 <_readln_NEWLINE+0x3e>
    6d28:	60 91 82 25 	lds	r22, 0x2582
    6d2c:	70 91 83 25 	lds	r23, 0x2583
    6d30:	8a e0       	ldi	r24, 0x0A	; 10
    6d32:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <xio_rs485_putc>
	return 0;
//	return ((int)fr.line_func(fr.buf));			// call line handler function
}
    6d36:	80 e0       	ldi	r24, 0x00	; 0
    6d38:	90 e0       	ldi	r25, 0x00	; 0
    6d3a:	08 95       	ret

00006d3c <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(fr.flags)) {
    6d3c:	80 91 9c 23 	lds	r24, 0x239C
    6d40:	87 ff       	sbrs	r24, 7
    6d42:	03 c0       	rjmp	.+6      	; 0x6d4a <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    6d44:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <_readln_NEWLINE>
    6d48:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    6d4a:	0e 94 51 36 	call	0x6ca2	; 0x6ca2 <_readln_char>
	}
}
    6d4e:	08 95       	ret

00006d50 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--fr.i >= 0) {
    6d50:	80 91 a1 23 	lds	r24, 0x23A1
    6d54:	81 50       	subi	r24, 0x01	; 1
    6d56:	80 93 a1 23 	sts	0x23A1, r24
		if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    6d5a:	80 91 9c 23 	lds	r24, 0x239C
    6d5e:	84 ff       	sbrs	r24, 4
    6d60:	08 c0       	rjmp	.+16     	; 0x6d72 <_readln_DELETE+0x22>
    6d62:	60 91 82 25 	lds	r22, 0x2582
    6d66:	70 91 83 25 	lds	r23, 0x2583
    6d6a:	80 91 a0 23 	lds	r24, 0x23A0
    6d6e:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <xio_rs485_putc>
	} else {
		fr.i = 0;
	}
	return (TG_EAGAIN);							// line is still in process
}
    6d72:	81 e0       	ldi	r24, 0x01	; 1
    6d74:	90 e0       	ldi	r25, 0x00	; 0
    6d76:	08 95       	ret

00006d78 <_sig_KILL>:
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
	fr.sig = XIO_SIG_KILL;
    6d78:	84 e0       	ldi	r24, 0x04	; 4
    6d7a:	80 93 9f 23 	sts	0x239F, r24
	return(_FDEV_ERR);
}
    6d7e:	8f ef       	ldi	r24, 0xFF	; 255
    6d80:	9f ef       	ldi	r25, 0xFF	; 255
    6d82:	08 95       	ret

00006d84 <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
	fr.sig = XIO_SIG_PAUSE;
    6d84:	86 e0       	ldi	r24, 0x06	; 6
    6d86:	80 93 9f 23 	sts	0x239F, r24
	return(_FDEV_ERR);
}
    6d8a:	8f ef       	ldi	r24, 0xFF	; 255
    6d8c:	9f ef       	ldi	r25, 0xFF	; 255
    6d8e:	08 95       	ret

00006d90 <_sig_RESUME>:

static int _sig_RESUME(void)
{
	fr.sig = XIO_SIG_RESUME;
    6d90:	87 e0       	ldi	r24, 0x07	; 7
    6d92:	80 93 9f 23 	sts	0x239F, r24
	return(_FDEV_ERR);
}
    6d96:	8f ef       	ldi	r24, 0xFF	; 255
    6d98:	9f ef       	ldi	r25, 0xFF	; 255
    6d9a:	08 95       	ret

00006d9c <xio_rs485_queue_RX_char>:
/*
 * xio_rs485_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_rs485_queue_RX_char(const char c)
{
    6d9c:	28 2f       	mov	r18, r24
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6d9e:	83 30       	cpi	r24, 0x03	; 3
    6da0:	31 f4       	brne	.+12     	; 0x6dae <xio_rs485_queue_RX_char+0x12>
		fr.sig = XIO_SIG_KILL;					// set signal value
    6da2:	84 e0       	ldi	r24, 0x04	; 4
    6da4:	80 93 9f 23 	sts	0x239F, r24
		signal_etx();							// call app-specific signal handler
    6da8:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <signal_etx>
    6dac:	08 95       	ret
		return;
	}

	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// wrap condition
    6dae:	80 91 a6 23 	lds	r24, 0x23A6
    6db2:	81 50       	subi	r24, 0x01	; 1
    6db4:	80 93 a6 23 	sts	0x23A6, r24
    6db8:	80 91 a6 23 	lds	r24, 0x23A6
    6dbc:	88 23       	and	r24, r24
    6dbe:	19 f4       	brne	.+6      	; 0x6dc6 <xio_rs485_queue_RX_char+0x2a>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6dc0:	81 e1       	ldi	r24, 0x11	; 17
    6dc2:	80 93 a6 23 	sts	0x23A6, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    6dc6:	90 91 a6 23 	lds	r25, 0x23A6
    6dca:	80 91 a5 23 	lds	r24, 0x23A5
    6dce:	98 17       	cp	r25, r24
    6dd0:	39 f0       	breq	.+14     	; 0x6de0 <xio_rs485_queue_RX_char+0x44>
		fr.rx_buf[fr.rx_buf_head] = c;			// FAKE INPUT DATA
    6dd2:	e0 91 a6 23 	lds	r30, 0x23A6
    6dd6:	f0 e0       	ldi	r31, 0x00	; 0
    6dd8:	e4 56       	subi	r30, 0x64	; 100
    6dda:	fc 4d       	sbci	r31, 0xDC	; 220
    6ddc:	22 8b       	std	Z+18, r18	; 0x12
    6dde:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6de0:	80 91 a6 23 	lds	r24, 0x23A6
    6de4:	8f 5f       	subi	r24, 0xFF	; 255
    6de6:	80 93 a6 23 	sts	0x23A6, r24
    6dea:	80 91 a6 23 	lds	r24, 0x23A6
    6dee:	82 31       	cpi	r24, 0x12	; 18
    6df0:	18 f0       	brcs	.+6      	; 0x6df8 <xio_rs485_queue_RX_char+0x5c>
		fr.rx_buf_head = 1;
    6df2:	81 e0       	ldi	r24, 0x01	; 1
    6df4:	80 93 a6 23 	sts	0x23A6, r24
    6df8:	08 95       	ret

00006dfa <xio_rs485_queue_RX_string>:
/*
 * xio_rs485_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_rs485_queue_RX_string(char *buf)
{
    6dfa:	1f 93       	push	r17
    6dfc:	cf 93       	push	r28
    6dfe:	df 93       	push	r29
    6e00:	ec 01       	movw	r28, r24
    6e02:	10 e0       	ldi	r17, 0x00	; 0
    6e04:	02 c0       	rjmp	.+4      	; 0x6e0a <xio_rs485_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_rs485_queue_RX_char(c);
    6e06:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <xio_rs485_queue_RX_char>
void xio_rs485_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    6e0a:	fe 01       	movw	r30, r28
    6e0c:	e1 0f       	add	r30, r17
    6e0e:	f1 1d       	adc	r31, r1
    6e10:	80 81       	ld	r24, Z
    6e12:	1f 5f       	subi	r17, 0xFF	; 255
    6e14:	88 23       	and	r24, r24
    6e16:	b9 f7       	brne	.-18     	; 0x6e06 <xio_rs485_queue_RX_string+0xc>
		xio_rs485_queue_RX_char(c);
	}
}
    6e18:	df 91       	pop	r29
    6e1a:	cf 91       	pop	r28
    6e1c:	1f 91       	pop	r17
    6e1e:	08 95       	ret

00006e20 <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)		//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    6e20:	1f 92       	push	r1
    6e22:	0f 92       	push	r0
    6e24:	0f b6       	in	r0, 0x3f	; 63
    6e26:	0f 92       	push	r0
    6e28:	0b b6       	in	r0, 0x3b	; 59
    6e2a:	0f 92       	push	r0
    6e2c:	11 24       	eor	r1, r1
    6e2e:	2f 93       	push	r18
    6e30:	3f 93       	push	r19
    6e32:	4f 93       	push	r20
    6e34:	5f 93       	push	r21
    6e36:	6f 93       	push	r22
    6e38:	7f 93       	push	r23
    6e3a:	8f 93       	push	r24
    6e3c:	9f 93       	push	r25
    6e3e:	af 93       	push	r26
    6e40:	bf 93       	push	r27
    6e42:	ef 93       	push	r30
    6e44:	ff 93       	push	r31
	uint8_t c = fr.usart->DATA;					// can only read DATA once
    6e46:	e0 91 aa 23 	lds	r30, 0x23AA
    6e4a:	f0 91 ab 23 	lds	r31, 0x23AB
    6e4e:	20 81       	ld	r18, Z

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6e50:	23 30       	cpi	r18, 0x03	; 3
    6e52:	31 f4       	brne	.+12     	; 0x6e60 <__vector_28+0x40>
		fr.sig = XIO_SIG_KILL;					// set signal value
    6e54:	84 e0       	ldi	r24, 0x04	; 4
    6e56:	80 93 9f 23 	sts	0x239F, r24
		signal_etx();							// call app-specific signal handler
    6e5a:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <signal_etx>
    6e5e:	25 c0       	rjmp	.+74     	; 0x6eaa <__vector_28+0x8a>
		return;
	}

	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// advance buffer head with wrap
    6e60:	80 91 a6 23 	lds	r24, 0x23A6
    6e64:	81 50       	subi	r24, 0x01	; 1
    6e66:	80 93 a6 23 	sts	0x23A6, r24
    6e6a:	80 91 a6 23 	lds	r24, 0x23A6
    6e6e:	88 23       	and	r24, r24
    6e70:	19 f4       	brne	.+6      	; 0x6e78 <__vector_28+0x58>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6e72:	81 e1       	ldi	r24, 0x11	; 17
    6e74:	80 93 a6 23 	sts	0x23A6, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    6e78:	90 91 a6 23 	lds	r25, 0x23A6
    6e7c:	80 91 a5 23 	lds	r24, 0x23A5
    6e80:	98 17       	cp	r25, r24
    6e82:	39 f0       	breq	.+14     	; 0x6e92 <__vector_28+0x72>
		fr.rx_buf[fr.rx_buf_head] = c;			// (= USARTC0.DATA;)
    6e84:	e0 91 a6 23 	lds	r30, 0x23A6
    6e88:	f0 e0       	ldi	r31, 0x00	; 0
    6e8a:	e4 56       	subi	r30, 0x64	; 100
    6e8c:	fc 4d       	sbci	r31, 0xDC	; 220
    6e8e:	22 8b       	std	Z+18, r18	; 0x12
    6e90:	0c c0       	rjmp	.+24     	; 0x6eaa <__vector_28+0x8a>
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6e92:	80 91 a6 23 	lds	r24, 0x23A6
    6e96:	8f 5f       	subi	r24, 0xFF	; 255
    6e98:	80 93 a6 23 	sts	0x23A6, r24
    6e9c:	80 91 a6 23 	lds	r24, 0x23A6
    6ea0:	82 31       	cpi	r24, 0x12	; 18
    6ea2:	18 f0       	brcs	.+6      	; 0x6eaa <__vector_28+0x8a>
		fr.rx_buf_head = 1;
    6ea4:	81 e0       	ldi	r24, 0x01	; 1
    6ea6:	80 93 a6 23 	sts	0x23A6, r24
	}
	// activate flow control here or before it gets to this level
}
    6eaa:	ff 91       	pop	r31
    6eac:	ef 91       	pop	r30
    6eae:	bf 91       	pop	r27
    6eb0:	af 91       	pop	r26
    6eb2:	9f 91       	pop	r25
    6eb4:	8f 91       	pop	r24
    6eb6:	7f 91       	pop	r23
    6eb8:	6f 91       	pop	r22
    6eba:	5f 91       	pop	r21
    6ebc:	4f 91       	pop	r20
    6ebe:	3f 91       	pop	r19
    6ec0:	2f 91       	pop	r18
    6ec2:	0f 90       	pop	r0
    6ec4:	0b be       	out	0x3b, r0	; 59
    6ec6:	0f 90       	pop	r0
    6ec8:	0f be       	out	0x3f, r0	; 63
    6eca:	0f 90       	pop	r0
    6ecc:	1f 90       	pop	r1
    6ece:	18 95       	reti

00006ed0 <signal_etx>:
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx() {			// ^c
{
	tg_reset_source();					// return control to standard device
    6ed0:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <tg_reset_source>
	mc_motion_stop();					// stop computing and generating motions
    6ed4:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    6ed8:	0e 94 42 31 	call	0x6284	; 0x6284 <mv_flush>
	st_stop_steppers();					// stop the steppers
    6edc:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <st_stop_steppers>
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
*/
}
    6ee0:	08 95       	ret

00006ee2 <xio_init_usart>:
/* 
 *	xio_init_usart() - general purpose USART initialization (shared)
 */

void xio_init_usart(uint8_t dev, struct xioUSART *u, const uint16_t control)
{
    6ee2:	cf 93       	push	r28
    6ee4:	df 93       	push	r29
    6ee6:	28 2f       	mov	r18, r24
    6ee8:	eb 01       	movw	r28, r22
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    6eea:	64 2f       	mov	r22, r20
    6eec:	6f 70       	andi	r22, 0x0F	; 15

	// transfer control flags to internal flag bits
	if (control & XIO_RD) {
    6eee:	44 ff       	sbrs	r20, 4
    6ef0:	05 c0       	rjmp	.+10     	; 0x6efc <xio_init_usart+0x1a>
		u->flags |= XIO_FLAG_RD_bm;
    6ef2:	88 81       	ld	r24, Y
    6ef4:	99 81       	ldd	r25, Y+1	; 0x01
    6ef6:	81 60       	ori	r24, 0x01	; 1
    6ef8:	88 83       	st	Y, r24
    6efa:	99 83       	std	Y+1, r25	; 0x01
	}
	if (control & XIO_WR) {
    6efc:	45 ff       	sbrs	r20, 5
    6efe:	05 c0       	rjmp	.+10     	; 0x6f0a <xio_init_usart+0x28>
		u->flags |= XIO_FLAG_WR_bm;
    6f00:	88 81       	ld	r24, Y
    6f02:	99 81       	ldd	r25, Y+1	; 0x01
    6f04:	82 60       	ori	r24, 0x02	; 2
    6f06:	88 83       	st	Y, r24
    6f08:	99 83       	std	Y+1, r25	; 0x01
	}
	if (control & XIO_BLOCK) {
    6f0a:	46 ff       	sbrs	r20, 6
    6f0c:	05 c0       	rjmp	.+10     	; 0x6f18 <xio_init_usart+0x36>
		u->flags |= XIO_FLAG_BLOCK_bm;
    6f0e:	88 81       	ld	r24, Y
    6f10:	99 81       	ldd	r25, Y+1	; 0x01
    6f12:	84 60       	ori	r24, 0x04	; 4
    6f14:	88 83       	st	Y, r24
    6f16:	99 83       	std	Y+1, r25	; 0x01
	}
	if (control & XIO_NOBLOCK) {
    6f18:	47 ff       	sbrs	r20, 7
    6f1a:	05 c0       	rjmp	.+10     	; 0x6f26 <xio_init_usart+0x44>
		u->flags &= ~XIO_FLAG_BLOCK_bm;
    6f1c:	88 81       	ld	r24, Y
    6f1e:	99 81       	ldd	r25, Y+1	; 0x01
    6f20:	8b 7f       	andi	r24, 0xFB	; 251
    6f22:	88 83       	st	Y, r24
    6f24:	99 83       	std	Y+1, r25	; 0x01
	}
	if (control & XIO_ECHO) {
    6f26:	50 ff       	sbrs	r21, 0
    6f28:	05 c0       	rjmp	.+10     	; 0x6f34 <xio_init_usart+0x52>
		u->flags |= XIO_FLAG_ECHO_bm;
    6f2a:	88 81       	ld	r24, Y
    6f2c:	99 81       	ldd	r25, Y+1	; 0x01
    6f2e:	80 61       	ori	r24, 0x10	; 16
    6f30:	88 83       	st	Y, r24
    6f32:	99 83       	std	Y+1, r25	; 0x01
	}
	if (control & XIO_NOECHO) {
    6f34:	51 ff       	sbrs	r21, 1
    6f36:	05 c0       	rjmp	.+10     	; 0x6f42 <xio_init_usart+0x60>
		u->flags &= ~XIO_FLAG_ECHO_bm;
    6f38:	88 81       	ld	r24, Y
    6f3a:	99 81       	ldd	r25, Y+1	; 0x01
    6f3c:	8f 7e       	andi	r24, 0xEF	; 239
    6f3e:	88 83       	st	Y, r24
    6f40:	99 83       	std	Y+1, r25	; 0x01
	}
	if (control & XIO_CRLF) {
    6f42:	52 ff       	sbrs	r21, 2
    6f44:	05 c0       	rjmp	.+10     	; 0x6f50 <xio_init_usart+0x6e>
		u->flags |= XIO_FLAG_CRLF_bm;
    6f46:	88 81       	ld	r24, Y
    6f48:	99 81       	ldd	r25, Y+1	; 0x01
    6f4a:	80 62       	ori	r24, 0x20	; 32
    6f4c:	88 83       	st	Y, r24
    6f4e:	99 83       	std	Y+1, r25	; 0x01
	}
	if (control & XIO_NOCRLF) {
    6f50:	53 ff       	sbrs	r21, 3
    6f52:	05 c0       	rjmp	.+10     	; 0x6f5e <xio_init_usart+0x7c>
		u->flags &= ~XIO_FLAG_CRLF_bm;
    6f54:	88 81       	ld	r24, Y
    6f56:	99 81       	ldd	r25, Y+1	; 0x01
    6f58:	8f 7d       	andi	r24, 0xDF	; 223
    6f5a:	88 83       	st	Y, r24
    6f5c:	99 83       	std	Y+1, r25	; 0x01
	}
	if (control & XIO_LINEMODE) {
    6f5e:	54 ff       	sbrs	r21, 4
    6f60:	05 c0       	rjmp	.+10     	; 0x6f6c <xio_init_usart+0x8a>
		u->flags |= XIO_FLAG_LINEMODE_bm;
    6f62:	88 81       	ld	r24, Y
    6f64:	99 81       	ldd	r25, Y+1	; 0x01
    6f66:	80 64       	ori	r24, 0x40	; 64
    6f68:	88 83       	st	Y, r24
    6f6a:	99 83       	std	Y+1, r25	; 0x01
	}
	if (control & XIO_NOLINEMODE) {
    6f6c:	55 ff       	sbrs	r21, 5
    6f6e:	05 c0       	rjmp	.+10     	; 0x6f7a <xio_init_usart+0x98>
		u->flags &= ~XIO_FLAG_LINEMODE_bm;
    6f70:	88 81       	ld	r24, Y
    6f72:	99 81       	ldd	r25, Y+1	; 0x01
    6f74:	8f 7b       	andi	r24, 0xBF	; 191
    6f76:	88 83       	st	Y, r24
    6f78:	99 83       	std	Y+1, r25	; 0x01
	}
	if (control & XIO_SEMICOLONS) {
    6f7a:	56 ff       	sbrs	r21, 6
    6f7c:	05 c0       	rjmp	.+10     	; 0x6f88 <xio_init_usart+0xa6>
		u->flags |= XIO_FLAG_SEMICOLONS_bm;
    6f7e:	88 81       	ld	r24, Y
    6f80:	99 81       	ldd	r25, Y+1	; 0x01
    6f82:	80 68       	ori	r24, 0x80	; 128
    6f84:	88 83       	st	Y, r24
    6f86:	99 83       	std	Y+1, r25	; 0x01
	}
	if (control & XIO_NOSEMICOLONS) {
    6f88:	57 ff       	sbrs	r21, 7
    6f8a:	05 c0       	rjmp	.+10     	; 0x6f96 <xio_init_usart+0xb4>
		u->flags &= ~XIO_FLAG_SEMICOLONS_bm;
    6f8c:	88 81       	ld	r24, Y
    6f8e:	99 81       	ldd	r25, Y+1	; 0x01
    6f90:	8f 77       	andi	r24, 0x7F	; 127
    6f92:	88 83       	st	Y, r24
    6f94:	99 83       	std	Y+1, r25	; 0x01
	}

	// character signals and error returns
	u->sig = 0;
    6f96:	1b 82       	std	Y+3, r1	; 0x03
//	dev_usb.udata = &(u->sig);				// bind sig register to FILE struct

	// setup internal RX/TX buffers
	u->rx_buf_head = 1;						// can't use location 0
    6f98:	81 e0       	ldi	r24, 0x01	; 1
    6f9a:	8a 87       	std	Y+10, r24	; 0x0a
	u->rx_buf_tail = 1;
    6f9c:	89 87       	std	Y+9, r24	; 0x09
	u->tx_buf_head = 1;
    6f9e:	8c 87       	std	Y+12, r24	; 0x0c
	u->tx_buf_tail = 1;
    6fa0:	8b 87       	std	Y+11, r24	; 0x0b
//	u->len = sizeof(u->buf);				// offset to zero THIS IS WRONG. NO BUFFER YET

	// bind USART and PORT structures to xioUSART struct
	u->usart = (struct USART_struct *)pgm_read_word(&usart_addr[dev]);
    6fa2:	42 2f       	mov	r20, r18
    6fa4:	50 e0       	ldi	r21, 0x00	; 0
    6fa6:	9a 01       	movw	r18, r20
    6fa8:	22 0f       	add	r18, r18
    6faa:	33 1f       	adc	r19, r19
    6fac:	f9 01       	movw	r30, r18
    6fae:	ed 51       	subi	r30, 0x1D	; 29
    6fb0:	f2 4e       	sbci	r31, 0xE2	; 226
    6fb2:	85 91       	lpm	r24, Z+
    6fb4:	94 91       	lpm	r25, Z+
    6fb6:	8e 87       	std	Y+14, r24	; 0x0e
    6fb8:	9f 87       	std	Y+15, r25	; 0x0f
	u->port = (struct PORT_struct *)pgm_read_word(&port_addr[dev]);
    6fba:	f9 01       	movw	r30, r18
    6fbc:	e7 51       	subi	r30, 0x17	; 23
    6fbe:	f2 4e       	sbci	r31, 0xE2	; 226
    6fc0:	85 91       	lpm	r24, Z+
    6fc2:	94 91       	lpm	r25, Z+
    6fc4:	88 8b       	std	Y+16, r24	; 0x10
    6fc6:	99 8b       	std	Y+17, r25	; 0x11

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    6fc8:	66 23       	and	r22, r22
    6fca:	09 f4       	brne	.+2      	; 0x6fce <xio_init_usart+0xec>
    6fcc:	65 e0       	ldi	r22, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	u->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    6fce:	ae 85       	ldd	r26, Y+14	; 0x0e
    6fd0:	bf 85       	ldd	r27, Y+15	; 0x0f
    6fd2:	86 2f       	mov	r24, r22
    6fd4:	90 e0       	ldi	r25, 0x00	; 0
    6fd6:	fc 01       	movw	r30, r24
    6fd8:	ef 5f       	subi	r30, 0xFF	; 255
    6fda:	f1 4e       	sbci	r31, 0xE1	; 225
    6fdc:	e4 91       	lpm	r30, Z+
    6fde:	16 96       	adiw	r26, 0x06	; 6
    6fe0:	ec 93       	st	X, r30
	u->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    6fe2:	ae 85       	ldd	r26, Y+14	; 0x0e
    6fe4:	bf 85       	ldd	r27, Y+15	; 0x0f
    6fe6:	84 5f       	subi	r24, 0xF4	; 244
    6fe8:	91 4e       	sbci	r25, 0xE1	; 225
    6fea:	fc 01       	movw	r30, r24
    6fec:	84 91       	lpm	r24, Z+
    6fee:	17 96       	adiw	r26, 0x07	; 7
    6ff0:	8c 93       	st	X, r24
	u->usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm; // enable tx and rx on USART
    6ff2:	ee 85       	ldd	r30, Y+14	; 0x0e
    6ff4:	ff 85       	ldd	r31, Y+15	; 0x0f
    6ff6:	88 e1       	ldi	r24, 0x18	; 24
    6ff8:	84 83       	std	Z+4, r24	; 0x04
	u->usart->CTRLA = CTRLA_RXON_TXON;				// enable tx and rx interrupts
    6ffa:	ee 85       	ldd	r30, Y+14	; 0x0e
    6ffc:	ff 85       	ldd	r31, Y+15	; 0x0f
    6ffe:	81 e2       	ldi	r24, 0x21	; 33
    7000:	83 83       	std	Z+3, r24	; 0x03

	u->port->DIRCLR = (uint8_t)pgm_read_byte(&dirclr_bm[dev]);
    7002:	a8 89       	ldd	r26, Y+16	; 0x10
    7004:	b9 89       	ldd	r27, Y+17	; 0x11
    7006:	fa 01       	movw	r30, r20
    7008:	e1 51       	subi	r30, 0x11	; 17
    700a:	f2 4e       	sbci	r31, 0xE2	; 226
    700c:	e4 91       	lpm	r30, Z+
    700e:	12 96       	adiw	r26, 0x02	; 2
    7010:	ec 93       	st	X, r30
	u->port->DIRSET = (uint8_t)pgm_read_byte(&dirset_bm[dev]);
    7012:	a8 89       	ldd	r26, Y+16	; 0x10
    7014:	b9 89       	ldd	r27, Y+17	; 0x11
    7016:	fa 01       	movw	r30, r20
    7018:	ee 50       	subi	r30, 0x0E	; 14
    701a:	f2 4e       	sbci	r31, 0xE2	; 226
    701c:	e4 91       	lpm	r30, Z+
    701e:	11 96       	adiw	r26, 0x01	; 1
    7020:	ec 93       	st	X, r30
	u->port->OUTCLR = (uint8_t)pgm_read_byte(&outclr_bm[dev]);
    7022:	a8 89       	ldd	r26, Y+16	; 0x10
    7024:	b9 89       	ldd	r27, Y+17	; 0x11
    7026:	fa 01       	movw	r30, r20
    7028:	eb 50       	subi	r30, 0x0B	; 11
    702a:	f2 4e       	sbci	r31, 0xE2	; 226
    702c:	e4 91       	lpm	r30, Z+
    702e:	16 96       	adiw	r26, 0x06	; 6
    7030:	ec 93       	st	X, r30
	u->port->OUTSET = (uint8_t)pgm_read_byte(&outset_bm[dev]);
    7032:	a8 89       	ldd	r26, Y+16	; 0x10
    7034:	b9 89       	ldd	r27, Y+17	; 0x11
    7036:	48 50       	subi	r20, 0x08	; 8
    7038:	52 4e       	sbci	r21, 0xE2	; 226
    703a:	fa 01       	movw	r30, r20
    703c:	84 91       	lpm	r24, Z+
    703e:	15 96       	adiw	r26, 0x05	; 5
    7040:	8c 93       	st	X, r24
}
    7042:	df 91       	pop	r29
    7044:	cf 91       	pop	r28
    7046:	08 95       	ret

00007048 <__udivdi3>:
    7048:	ae e5       	ldi	r26, 0x5E	; 94
    704a:	b0 e0       	ldi	r27, 0x00	; 0
    704c:	ea e2       	ldi	r30, 0x2A	; 42
    704e:	f8 e3       	ldi	r31, 0x38	; 56
    7050:	0c 94 b7 46 	jmp	0x8d6e	; 0x8d6e <__prologue_saves__>
    7054:	a8 e0       	ldi	r26, 0x08	; 8
    7056:	4e 01       	movw	r8, r28
    7058:	08 94       	sec
    705a:	81 1c       	adc	r8, r1
    705c:	91 1c       	adc	r9, r1
    705e:	f4 01       	movw	r30, r8
    7060:	6a 2e       	mov	r6, r26
    7062:	11 92       	st	Z+, r1
    7064:	6a 94       	dec	r6
    7066:	e9 f7       	brne	.-6      	; 0x7062 <__udivdi3+0x1a>
    7068:	29 83       	std	Y+1, r18	; 0x01
    706a:	3a 83       	std	Y+2, r19	; 0x02
    706c:	4b 83       	std	Y+3, r20	; 0x03
    706e:	5c 83       	std	Y+4, r21	; 0x04
    7070:	6d 83       	std	Y+5, r22	; 0x05
    7072:	7e 83       	std	Y+6, r23	; 0x06
    7074:	8f 83       	std	Y+7, r24	; 0x07
    7076:	98 87       	std	Y+8, r25	; 0x08
    7078:	ce 01       	movw	r24, r28
    707a:	09 96       	adiw	r24, 0x09	; 9
    707c:	fc 01       	movw	r30, r24
    707e:	11 92       	st	Z+, r1
    7080:	aa 95       	dec	r26
    7082:	e9 f7       	brne	.-6      	; 0x707e <__udivdi3+0x36>
    7084:	a9 86       	std	Y+9, r10	; 0x09
    7086:	ba 86       	std	Y+10, r11	; 0x0a
    7088:	cb 86       	std	Y+11, r12	; 0x0b
    708a:	dc 86       	std	Y+12, r13	; 0x0c
    708c:	ed 86       	std	Y+13, r14	; 0x0d
    708e:	fe 86       	std	Y+14, r15	; 0x0e
    7090:	0f 87       	std	Y+15, r16	; 0x0f
    7092:	18 8b       	std	Y+16, r17	; 0x10
    7094:	29 84       	ldd	r2, Y+9	; 0x09
    7096:	3a 84       	ldd	r3, Y+10	; 0x0a
    7098:	4b 84       	ldd	r4, Y+11	; 0x0b
    709a:	5c 84       	ldd	r5, Y+12	; 0x0c
    709c:	ed 84       	ldd	r14, Y+13	; 0x0d
    709e:	fe 84       	ldd	r15, Y+14	; 0x0e
    70a0:	0f 85       	ldd	r16, Y+15	; 0x0f
    70a2:	18 89       	ldd	r17, Y+16	; 0x10
    70a4:	69 80       	ldd	r6, Y+1	; 0x01
    70a6:	7a 80       	ldd	r7, Y+2	; 0x02
    70a8:	8b 80       	ldd	r8, Y+3	; 0x03
    70aa:	9c 80       	ldd	r9, Y+4	; 0x04
    70ac:	6d a6       	std	Y+45, r6	; 0x2d
    70ae:	7e a6       	std	Y+46, r7	; 0x2e
    70b0:	8f a6       	std	Y+47, r8	; 0x2f
    70b2:	98 aa       	std	Y+48, r9	; 0x30
    70b4:	6d 80       	ldd	r6, Y+5	; 0x05
    70b6:	7e 80       	ldd	r7, Y+6	; 0x06
    70b8:	8f 80       	ldd	r8, Y+7	; 0x07
    70ba:	98 84       	ldd	r9, Y+8	; 0x08
    70bc:	e1 14       	cp	r14, r1
    70be:	f1 04       	cpc	r15, r1
    70c0:	01 05       	cpc	r16, r1
    70c2:	11 05       	cpc	r17, r1
    70c4:	09 f0       	breq	.+2      	; 0x70c8 <__udivdi3+0x80>
    70c6:	b3 c3       	rjmp	.+1894   	; 0x782e <__udivdi3+0x7e6>
    70c8:	62 14       	cp	r6, r2
    70ca:	73 04       	cpc	r7, r3
    70cc:	84 04       	cpc	r8, r4
    70ce:	95 04       	cpc	r9, r5
    70d0:	08 f0       	brcs	.+2      	; 0x70d4 <__udivdi3+0x8c>
    70d2:	3d c1       	rjmp	.+634    	; 0x734e <__udivdi3+0x306>
    70d4:	00 e0       	ldi	r16, 0x00	; 0
    70d6:	20 16       	cp	r2, r16
    70d8:	00 e0       	ldi	r16, 0x00	; 0
    70da:	30 06       	cpc	r3, r16
    70dc:	01 e0       	ldi	r16, 0x01	; 1
    70de:	40 06       	cpc	r4, r16
    70e0:	00 e0       	ldi	r16, 0x00	; 0
    70e2:	50 06       	cpc	r5, r16
    70e4:	88 f4       	brcc	.+34     	; 0x7108 <__udivdi3+0xc0>
    70e6:	1f ef       	ldi	r17, 0xFF	; 255
    70e8:	21 16       	cp	r2, r17
    70ea:	31 04       	cpc	r3, r1
    70ec:	41 04       	cpc	r4, r1
    70ee:	51 04       	cpc	r5, r1
    70f0:	39 f0       	breq	.+14     	; 0x7100 <__udivdi3+0xb8>
    70f2:	30 f0       	brcs	.+12     	; 0x7100 <__udivdi3+0xb8>
    70f4:	48 e0       	ldi	r20, 0x08	; 8
    70f6:	e4 2e       	mov	r14, r20
    70f8:	f1 2c       	mov	r15, r1
    70fa:	01 2d       	mov	r16, r1
    70fc:	11 2d       	mov	r17, r1
    70fe:	18 c0       	rjmp	.+48     	; 0x7130 <__udivdi3+0xe8>
    7100:	ee 24       	eor	r14, r14
    7102:	ff 24       	eor	r15, r15
    7104:	87 01       	movw	r16, r14
    7106:	14 c0       	rjmp	.+40     	; 0x7130 <__udivdi3+0xe8>
    7108:	20 e0       	ldi	r18, 0x00	; 0
    710a:	22 16       	cp	r2, r18
    710c:	20 e0       	ldi	r18, 0x00	; 0
    710e:	32 06       	cpc	r3, r18
    7110:	20 e0       	ldi	r18, 0x00	; 0
    7112:	42 06       	cpc	r4, r18
    7114:	21 e0       	ldi	r18, 0x01	; 1
    7116:	52 06       	cpc	r5, r18
    7118:	30 f0       	brcs	.+12     	; 0x7126 <__udivdi3+0xde>
    711a:	38 e1       	ldi	r19, 0x18	; 24
    711c:	e3 2e       	mov	r14, r19
    711e:	f1 2c       	mov	r15, r1
    7120:	01 2d       	mov	r16, r1
    7122:	11 2d       	mov	r17, r1
    7124:	05 c0       	rjmp	.+10     	; 0x7130 <__udivdi3+0xe8>
    7126:	20 e1       	ldi	r18, 0x10	; 16
    7128:	e2 2e       	mov	r14, r18
    712a:	f1 2c       	mov	r15, r1
    712c:	01 2d       	mov	r16, r1
    712e:	11 2d       	mov	r17, r1
    7130:	d2 01       	movw	r26, r4
    7132:	c1 01       	movw	r24, r2
    7134:	0e 2c       	mov	r0, r14
    7136:	04 c0       	rjmp	.+8      	; 0x7140 <__udivdi3+0xf8>
    7138:	b6 95       	lsr	r27
    713a:	a7 95       	ror	r26
    713c:	97 95       	ror	r25
    713e:	87 95       	ror	r24
    7140:	0a 94       	dec	r0
    7142:	d2 f7       	brpl	.-12     	; 0x7138 <__udivdi3+0xf0>
    7144:	86 5d       	subi	r24, 0xD6	; 214
    7146:	9f 4d       	sbci	r25, 0xDF	; 223
    7148:	dc 01       	movw	r26, r24
    714a:	2c 91       	ld	r18, X
    714c:	80 e2       	ldi	r24, 0x20	; 32
    714e:	90 e0       	ldi	r25, 0x00	; 0
    7150:	a0 e0       	ldi	r26, 0x00	; 0
    7152:	b0 e0       	ldi	r27, 0x00	; 0
    7154:	8e 19       	sub	r24, r14
    7156:	9f 09       	sbc	r25, r15
    7158:	a0 0b       	sbc	r26, r16
    715a:	b1 0b       	sbc	r27, r17
    715c:	7c 01       	movw	r14, r24
    715e:	8d 01       	movw	r16, r26
    7160:	e2 1a       	sub	r14, r18
    7162:	f1 08       	sbc	r15, r1
    7164:	01 09       	sbc	r16, r1
    7166:	11 09       	sbc	r17, r1
    7168:	e1 14       	cp	r14, r1
    716a:	f1 04       	cpc	r15, r1
    716c:	01 05       	cpc	r16, r1
    716e:	11 05       	cpc	r17, r1
    7170:	a1 f1       	breq	.+104    	; 0x71da <__udivdi3+0x192>
    7172:	0e 2c       	mov	r0, r14
    7174:	04 c0       	rjmp	.+8      	; 0x717e <__udivdi3+0x136>
    7176:	22 0c       	add	r2, r2
    7178:	33 1c       	adc	r3, r3
    717a:	44 1c       	adc	r4, r4
    717c:	55 1c       	adc	r5, r5
    717e:	0a 94       	dec	r0
    7180:	d2 f7       	brpl	.-12     	; 0x7176 <__udivdi3+0x12e>
    7182:	a4 01       	movw	r20, r8
    7184:	93 01       	movw	r18, r6
    7186:	0e 2c       	mov	r0, r14
    7188:	04 c0       	rjmp	.+8      	; 0x7192 <__udivdi3+0x14a>
    718a:	22 0f       	add	r18, r18
    718c:	33 1f       	adc	r19, r19
    718e:	44 1f       	adc	r20, r20
    7190:	55 1f       	adc	r21, r21
    7192:	0a 94       	dec	r0
    7194:	d2 f7       	brpl	.-12     	; 0x718a <__udivdi3+0x142>
    7196:	80 e2       	ldi	r24, 0x20	; 32
    7198:	90 e0       	ldi	r25, 0x00	; 0
    719a:	8e 19       	sub	r24, r14
    719c:	9f 09       	sbc	r25, r15
    719e:	6d a4       	ldd	r6, Y+45	; 0x2d
    71a0:	7e a4       	ldd	r7, Y+46	; 0x2e
    71a2:	8f a4       	ldd	r8, Y+47	; 0x2f
    71a4:	98 a8       	ldd	r9, Y+48	; 0x30
    71a6:	04 c0       	rjmp	.+8      	; 0x71b0 <__udivdi3+0x168>
    71a8:	96 94       	lsr	r9
    71aa:	87 94       	ror	r8
    71ac:	77 94       	ror	r7
    71ae:	67 94       	ror	r6
    71b0:	8a 95       	dec	r24
    71b2:	d2 f7       	brpl	.-12     	; 0x71a8 <__udivdi3+0x160>
    71b4:	62 2a       	or	r6, r18
    71b6:	73 2a       	or	r7, r19
    71b8:	84 2a       	or	r8, r20
    71ba:	95 2a       	or	r9, r21
    71bc:	ad a4       	ldd	r10, Y+45	; 0x2d
    71be:	be a4       	ldd	r11, Y+46	; 0x2e
    71c0:	cf a4       	ldd	r12, Y+47	; 0x2f
    71c2:	d8 a8       	ldd	r13, Y+48	; 0x30
    71c4:	04 c0       	rjmp	.+8      	; 0x71ce <__udivdi3+0x186>
    71c6:	aa 0c       	add	r10, r10
    71c8:	bb 1c       	adc	r11, r11
    71ca:	cc 1c       	adc	r12, r12
    71cc:	dd 1c       	adc	r13, r13
    71ce:	ea 94       	dec	r14
    71d0:	d2 f7       	brpl	.-12     	; 0x71c6 <__udivdi3+0x17e>
    71d2:	ad a6       	std	Y+45, r10	; 0x2d
    71d4:	be a6       	std	Y+46, r11	; 0x2e
    71d6:	cf a6       	std	Y+47, r12	; 0x2f
    71d8:	d8 aa       	std	Y+48, r13	; 0x30
    71da:	62 01       	movw	r12, r4
    71dc:	ee 24       	eor	r14, r14
    71de:	ff 24       	eor	r15, r15
    71e0:	cd aa       	std	Y+53, r12	; 0x35
    71e2:	de aa       	std	Y+54, r13	; 0x36
    71e4:	ef aa       	std	Y+55, r14	; 0x37
    71e6:	f8 ae       	std	Y+56, r15	; 0x38
    71e8:	92 01       	movw	r18, r4
    71ea:	81 01       	movw	r16, r2
    71ec:	20 70       	andi	r18, 0x00	; 0
    71ee:	30 70       	andi	r19, 0x00	; 0
    71f0:	09 af       	std	Y+57, r16	; 0x39
    71f2:	1a af       	std	Y+58, r17	; 0x3a
    71f4:	2b af       	std	Y+59, r18	; 0x3b
    71f6:	3c af       	std	Y+60, r19	; 0x3c
    71f8:	c4 01       	movw	r24, r8
    71fa:	b3 01       	movw	r22, r6
    71fc:	a7 01       	movw	r20, r14
    71fe:	96 01       	movw	r18, r12
    7200:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__udivmodsi4>
    7204:	7b 01       	movw	r14, r22
    7206:	8c 01       	movw	r16, r24
    7208:	c4 01       	movw	r24, r8
    720a:	b3 01       	movw	r22, r6
    720c:	2d a9       	ldd	r18, Y+53	; 0x35
    720e:	3e a9       	ldd	r19, Y+54	; 0x36
    7210:	4f a9       	ldd	r20, Y+55	; 0x37
    7212:	58 ad       	ldd	r21, Y+56	; 0x38
    7214:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__udivmodsi4>
    7218:	c9 01       	movw	r24, r18
    721a:	da 01       	movw	r26, r20
    721c:	3c 01       	movw	r6, r24
    721e:	4d 01       	movw	r8, r26
    7220:	c4 01       	movw	r24, r8
    7222:	b3 01       	movw	r22, r6
    7224:	29 ad       	ldd	r18, Y+57	; 0x39
    7226:	3a ad       	ldd	r19, Y+58	; 0x3a
    7228:	4b ad       	ldd	r20, Y+59	; 0x3b
    722a:	5c ad       	ldd	r21, Y+60	; 0x3c
    722c:	0e 94 76 46 	call	0x8cec	; 0x8cec <__mulsi3>
    7230:	9b 01       	movw	r18, r22
    7232:	ac 01       	movw	r20, r24
    7234:	87 01       	movw	r16, r14
    7236:	ff 24       	eor	r15, r15
    7238:	ee 24       	eor	r14, r14
    723a:	ad a4       	ldd	r10, Y+45	; 0x2d
    723c:	be a4       	ldd	r11, Y+46	; 0x2e
    723e:	cf a4       	ldd	r12, Y+47	; 0x2f
    7240:	d8 a8       	ldd	r13, Y+48	; 0x30
    7242:	c6 01       	movw	r24, r12
    7244:	aa 27       	eor	r26, r26
    7246:	bb 27       	eor	r27, r27
    7248:	57 01       	movw	r10, r14
    724a:	68 01       	movw	r12, r16
    724c:	a8 2a       	or	r10, r24
    724e:	b9 2a       	or	r11, r25
    7250:	ca 2a       	or	r12, r26
    7252:	db 2a       	or	r13, r27
    7254:	a2 16       	cp	r10, r18
    7256:	b3 06       	cpc	r11, r19
    7258:	c4 06       	cpc	r12, r20
    725a:	d5 06       	cpc	r13, r21
    725c:	e0 f4       	brcc	.+56     	; 0x7296 <__udivdi3+0x24e>
    725e:	08 94       	sec
    7260:	61 08       	sbc	r6, r1
    7262:	71 08       	sbc	r7, r1
    7264:	81 08       	sbc	r8, r1
    7266:	91 08       	sbc	r9, r1
    7268:	a2 0c       	add	r10, r2
    726a:	b3 1c       	adc	r11, r3
    726c:	c4 1c       	adc	r12, r4
    726e:	d5 1c       	adc	r13, r5
    7270:	a2 14       	cp	r10, r2
    7272:	b3 04       	cpc	r11, r3
    7274:	c4 04       	cpc	r12, r4
    7276:	d5 04       	cpc	r13, r5
    7278:	70 f0       	brcs	.+28     	; 0x7296 <__udivdi3+0x24e>
    727a:	a2 16       	cp	r10, r18
    727c:	b3 06       	cpc	r11, r19
    727e:	c4 06       	cpc	r12, r20
    7280:	d5 06       	cpc	r13, r21
    7282:	48 f4       	brcc	.+18     	; 0x7296 <__udivdi3+0x24e>
    7284:	08 94       	sec
    7286:	61 08       	sbc	r6, r1
    7288:	71 08       	sbc	r7, r1
    728a:	81 08       	sbc	r8, r1
    728c:	91 08       	sbc	r9, r1
    728e:	a2 0c       	add	r10, r2
    7290:	b3 1c       	adc	r11, r3
    7292:	c4 1c       	adc	r12, r4
    7294:	d5 1c       	adc	r13, r5
    7296:	a2 1a       	sub	r10, r18
    7298:	b3 0a       	sbc	r11, r19
    729a:	c4 0a       	sbc	r12, r20
    729c:	d5 0a       	sbc	r13, r21
    729e:	c6 01       	movw	r24, r12
    72a0:	b5 01       	movw	r22, r10
    72a2:	2d a9       	ldd	r18, Y+53	; 0x35
    72a4:	3e a9       	ldd	r19, Y+54	; 0x36
    72a6:	4f a9       	ldd	r20, Y+55	; 0x37
    72a8:	58 ad       	ldd	r21, Y+56	; 0x38
    72aa:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__udivmodsi4>
    72ae:	7b 01       	movw	r14, r22
    72b0:	8c 01       	movw	r16, r24
    72b2:	c6 01       	movw	r24, r12
    72b4:	b5 01       	movw	r22, r10
    72b6:	2d a9       	ldd	r18, Y+53	; 0x35
    72b8:	3e a9       	ldd	r19, Y+54	; 0x36
    72ba:	4f a9       	ldd	r20, Y+55	; 0x37
    72bc:	58 ad       	ldd	r21, Y+56	; 0x38
    72be:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__udivmodsi4>
    72c2:	c9 01       	movw	r24, r18
    72c4:	da 01       	movw	r26, r20
    72c6:	5c 01       	movw	r10, r24
    72c8:	6d 01       	movw	r12, r26
    72ca:	c6 01       	movw	r24, r12
    72cc:	b5 01       	movw	r22, r10
    72ce:	29 ad       	ldd	r18, Y+57	; 0x39
    72d0:	3a ad       	ldd	r19, Y+58	; 0x3a
    72d2:	4b ad       	ldd	r20, Y+59	; 0x3b
    72d4:	5c ad       	ldd	r21, Y+60	; 0x3c
    72d6:	0e 94 76 46 	call	0x8cec	; 0x8cec <__mulsi3>
    72da:	9b 01       	movw	r18, r22
    72dc:	ac 01       	movw	r20, r24
    72de:	87 01       	movw	r16, r14
    72e0:	ff 24       	eor	r15, r15
    72e2:	ee 24       	eor	r14, r14
    72e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    72e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    72e8:	af a5       	ldd	r26, Y+47	; 0x2f
    72ea:	b8 a9       	ldd	r27, Y+48	; 0x30
    72ec:	a0 70       	andi	r26, 0x00	; 0
    72ee:	b0 70       	andi	r27, 0x00	; 0
    72f0:	e8 2a       	or	r14, r24
    72f2:	f9 2a       	or	r15, r25
    72f4:	0a 2b       	or	r16, r26
    72f6:	1b 2b       	or	r17, r27
    72f8:	e2 16       	cp	r14, r18
    72fa:	f3 06       	cpc	r15, r19
    72fc:	04 07       	cpc	r16, r20
    72fe:	15 07       	cpc	r17, r21
    7300:	c0 f4       	brcc	.+48     	; 0x7332 <__udivdi3+0x2ea>
    7302:	08 94       	sec
    7304:	a1 08       	sbc	r10, r1
    7306:	b1 08       	sbc	r11, r1
    7308:	c1 08       	sbc	r12, r1
    730a:	d1 08       	sbc	r13, r1
    730c:	e2 0c       	add	r14, r2
    730e:	f3 1c       	adc	r15, r3
    7310:	04 1d       	adc	r16, r4
    7312:	15 1d       	adc	r17, r5
    7314:	e2 14       	cp	r14, r2
    7316:	f3 04       	cpc	r15, r3
    7318:	04 05       	cpc	r16, r4
    731a:	15 05       	cpc	r17, r5
    731c:	50 f0       	brcs	.+20     	; 0x7332 <__udivdi3+0x2ea>
    731e:	e2 16       	cp	r14, r18
    7320:	f3 06       	cpc	r15, r19
    7322:	04 07       	cpc	r16, r20
    7324:	15 07       	cpc	r17, r21
    7326:	28 f4       	brcc	.+10     	; 0x7332 <__udivdi3+0x2ea>
    7328:	08 94       	sec
    732a:	a1 08       	sbc	r10, r1
    732c:	b1 08       	sbc	r11, r1
    732e:	c1 08       	sbc	r12, r1
    7330:	d1 08       	sbc	r13, r1
    7332:	d3 01       	movw	r26, r6
    7334:	99 27       	eor	r25, r25
    7336:	88 27       	eor	r24, r24
    7338:	86 01       	movw	r16, r12
    733a:	75 01       	movw	r14, r10
    733c:	e8 2a       	or	r14, r24
    733e:	f9 2a       	or	r15, r25
    7340:	0a 2b       	or	r16, r26
    7342:	1b 2b       	or	r17, r27
    7344:	e9 aa       	std	Y+49, r14	; 0x31
    7346:	fa aa       	std	Y+50, r15	; 0x32
    7348:	0b ab       	std	Y+51, r16	; 0x33
    734a:	1c ab       	std	Y+52, r17	; 0x34
    734c:	cf c4       	rjmp	.+2462   	; 0x7cec <__udivdi3+0xca4>
    734e:	21 14       	cp	r2, r1
    7350:	31 04       	cpc	r3, r1
    7352:	41 04       	cpc	r4, r1
    7354:	51 04       	cpc	r5, r1
    7356:	71 f4       	brne	.+28     	; 0x7374 <__udivdi3+0x32c>
    7358:	61 e0       	ldi	r22, 0x01	; 1
    735a:	70 e0       	ldi	r23, 0x00	; 0
    735c:	80 e0       	ldi	r24, 0x00	; 0
    735e:	90 e0       	ldi	r25, 0x00	; 0
    7360:	20 e0       	ldi	r18, 0x00	; 0
    7362:	30 e0       	ldi	r19, 0x00	; 0
    7364:	40 e0       	ldi	r20, 0x00	; 0
    7366:	50 e0       	ldi	r21, 0x00	; 0
    7368:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__udivmodsi4>
    736c:	c9 01       	movw	r24, r18
    736e:	da 01       	movw	r26, r20
    7370:	1c 01       	movw	r2, r24
    7372:	2d 01       	movw	r4, r26
    7374:	00 e0       	ldi	r16, 0x00	; 0
    7376:	20 16       	cp	r2, r16
    7378:	00 e0       	ldi	r16, 0x00	; 0
    737a:	30 06       	cpc	r3, r16
    737c:	01 e0       	ldi	r16, 0x01	; 1
    737e:	40 06       	cpc	r4, r16
    7380:	00 e0       	ldi	r16, 0x00	; 0
    7382:	50 06       	cpc	r5, r16
    7384:	88 f4       	brcc	.+34     	; 0x73a8 <__udivdi3+0x360>
    7386:	1f ef       	ldi	r17, 0xFF	; 255
    7388:	21 16       	cp	r2, r17
    738a:	31 04       	cpc	r3, r1
    738c:	41 04       	cpc	r4, r1
    738e:	51 04       	cpc	r5, r1
    7390:	31 f0       	breq	.+12     	; 0x739e <__udivdi3+0x356>
    7392:	28 f0       	brcs	.+10     	; 0x739e <__udivdi3+0x356>
    7394:	48 e0       	ldi	r20, 0x08	; 8
    7396:	50 e0       	ldi	r21, 0x00	; 0
    7398:	60 e0       	ldi	r22, 0x00	; 0
    739a:	70 e0       	ldi	r23, 0x00	; 0
    739c:	17 c0       	rjmp	.+46     	; 0x73cc <__udivdi3+0x384>
    739e:	40 e0       	ldi	r20, 0x00	; 0
    73a0:	50 e0       	ldi	r21, 0x00	; 0
    73a2:	60 e0       	ldi	r22, 0x00	; 0
    73a4:	70 e0       	ldi	r23, 0x00	; 0
    73a6:	12 c0       	rjmp	.+36     	; 0x73cc <__udivdi3+0x384>
    73a8:	20 e0       	ldi	r18, 0x00	; 0
    73aa:	22 16       	cp	r2, r18
    73ac:	20 e0       	ldi	r18, 0x00	; 0
    73ae:	32 06       	cpc	r3, r18
    73b0:	20 e0       	ldi	r18, 0x00	; 0
    73b2:	42 06       	cpc	r4, r18
    73b4:	21 e0       	ldi	r18, 0x01	; 1
    73b6:	52 06       	cpc	r5, r18
    73b8:	28 f0       	brcs	.+10     	; 0x73c4 <__udivdi3+0x37c>
    73ba:	48 e1       	ldi	r20, 0x18	; 24
    73bc:	50 e0       	ldi	r21, 0x00	; 0
    73be:	60 e0       	ldi	r22, 0x00	; 0
    73c0:	70 e0       	ldi	r23, 0x00	; 0
    73c2:	04 c0       	rjmp	.+8      	; 0x73cc <__udivdi3+0x384>
    73c4:	40 e1       	ldi	r20, 0x10	; 16
    73c6:	50 e0       	ldi	r21, 0x00	; 0
    73c8:	60 e0       	ldi	r22, 0x00	; 0
    73ca:	70 e0       	ldi	r23, 0x00	; 0
    73cc:	d2 01       	movw	r26, r4
    73ce:	c1 01       	movw	r24, r2
    73d0:	04 2e       	mov	r0, r20
    73d2:	04 c0       	rjmp	.+8      	; 0x73dc <__udivdi3+0x394>
    73d4:	b6 95       	lsr	r27
    73d6:	a7 95       	ror	r26
    73d8:	97 95       	ror	r25
    73da:	87 95       	ror	r24
    73dc:	0a 94       	dec	r0
    73de:	d2 f7       	brpl	.-12     	; 0x73d4 <__udivdi3+0x38c>
    73e0:	86 5d       	subi	r24, 0xD6	; 214
    73e2:	9f 4d       	sbci	r25, 0xDF	; 223
    73e4:	dc 01       	movw	r26, r24
    73e6:	2c 91       	ld	r18, X
    73e8:	e0 e2       	ldi	r30, 0x20	; 32
    73ea:	ee 2e       	mov	r14, r30
    73ec:	f1 2c       	mov	r15, r1
    73ee:	01 2d       	mov	r16, r1
    73f0:	11 2d       	mov	r17, r1
    73f2:	d8 01       	movw	r26, r16
    73f4:	c7 01       	movw	r24, r14
    73f6:	84 1b       	sub	r24, r20
    73f8:	95 0b       	sbc	r25, r21
    73fa:	a6 0b       	sbc	r26, r22
    73fc:	b7 0b       	sbc	r27, r23
    73fe:	82 1b       	sub	r24, r18
    7400:	91 09       	sbc	r25, r1
    7402:	a1 09       	sbc	r26, r1
    7404:	b1 09       	sbc	r27, r1
    7406:	00 97       	sbiw	r24, 0x00	; 0
    7408:	a1 05       	cpc	r26, r1
    740a:	b1 05       	cpc	r27, r1
    740c:	61 f4       	brne	.+24     	; 0x7426 <__udivdi3+0x3de>
    740e:	64 01       	movw	r12, r8
    7410:	53 01       	movw	r10, r6
    7412:	a2 18       	sub	r10, r2
    7414:	b3 08       	sbc	r11, r3
    7416:	c4 08       	sbc	r12, r4
    7418:	d5 08       	sbc	r13, r5
    741a:	31 e0       	ldi	r19, 0x01	; 1
    741c:	63 2e       	mov	r6, r19
    741e:	71 2c       	mov	r7, r1
    7420:	81 2c       	mov	r8, r1
    7422:	91 2c       	mov	r9, r1
    7424:	1e c1       	rjmp	.+572    	; 0x7662 <__udivdi3+0x61a>
    7426:	6f 96       	adiw	r28, 0x1f	; 31
    7428:	8f af       	std	Y+63, r24	; 0x3f
    742a:	6f 97       	sbiw	r28, 0x1f	; 31
    742c:	08 2e       	mov	r0, r24
    742e:	04 c0       	rjmp	.+8      	; 0x7438 <__udivdi3+0x3f0>
    7430:	22 0c       	add	r2, r2
    7432:	33 1c       	adc	r3, r3
    7434:	44 1c       	adc	r4, r4
    7436:	55 1c       	adc	r5, r5
    7438:	0a 94       	dec	r0
    743a:	d2 f7       	brpl	.-12     	; 0x7430 <__udivdi3+0x3e8>
    743c:	ee 2d       	mov	r30, r14
    743e:	e8 1b       	sub	r30, r24
    7440:	64 01       	movw	r12, r8
    7442:	53 01       	movw	r10, r6
    7444:	0e 2e       	mov	r0, r30
    7446:	04 c0       	rjmp	.+8      	; 0x7450 <__udivdi3+0x408>
    7448:	d6 94       	lsr	r13
    744a:	c7 94       	ror	r12
    744c:	b7 94       	ror	r11
    744e:	a7 94       	ror	r10
    7450:	0a 94       	dec	r0
    7452:	d2 f7       	brpl	.-12     	; 0x7448 <__udivdi3+0x400>
    7454:	a4 01       	movw	r20, r8
    7456:	93 01       	movw	r18, r6
    7458:	6f 96       	adiw	r28, 0x1f	; 31
    745a:	0f ac       	ldd	r0, Y+63	; 0x3f
    745c:	6f 97       	sbiw	r28, 0x1f	; 31
    745e:	04 c0       	rjmp	.+8      	; 0x7468 <__udivdi3+0x420>
    7460:	22 0f       	add	r18, r18
    7462:	33 1f       	adc	r19, r19
    7464:	44 1f       	adc	r20, r20
    7466:	55 1f       	adc	r21, r21
    7468:	0a 94       	dec	r0
    746a:	d2 f7       	brpl	.-12     	; 0x7460 <__udivdi3+0x418>
    746c:	6d a4       	ldd	r6, Y+45	; 0x2d
    746e:	7e a4       	ldd	r7, Y+46	; 0x2e
    7470:	8f a4       	ldd	r8, Y+47	; 0x2f
    7472:	98 a8       	ldd	r9, Y+48	; 0x30
    7474:	0e 2e       	mov	r0, r30
    7476:	04 c0       	rjmp	.+8      	; 0x7480 <__udivdi3+0x438>
    7478:	96 94       	lsr	r9
    747a:	87 94       	ror	r8
    747c:	77 94       	ror	r7
    747e:	67 94       	ror	r6
    7480:	0a 94       	dec	r0
    7482:	d2 f7       	brpl	.-12     	; 0x7478 <__udivdi3+0x430>
    7484:	84 01       	movw	r16, r8
    7486:	73 01       	movw	r14, r6
    7488:	e2 2a       	or	r14, r18
    748a:	f3 2a       	or	r15, r19
    748c:	04 2b       	or	r16, r20
    748e:	15 2b       	or	r17, r21
    7490:	e9 a6       	std	Y+41, r14	; 0x29
    7492:	fa a6       	std	Y+42, r15	; 0x2a
    7494:	0b a7       	std	Y+43, r16	; 0x2b
    7496:	1c a7       	std	Y+44, r17	; 0x2c
    7498:	32 01       	movw	r6, r4
    749a:	88 24       	eor	r8, r8
    749c:	99 24       	eor	r9, r9
    749e:	92 01       	movw	r18, r4
    74a0:	81 01       	movw	r16, r2
    74a2:	20 70       	andi	r18, 0x00	; 0
    74a4:	30 70       	andi	r19, 0x00	; 0
    74a6:	21 96       	adiw	r28, 0x01	; 1
    74a8:	0c af       	std	Y+60, r16	; 0x3c
    74aa:	1d af       	std	Y+61, r17	; 0x3d
    74ac:	2e af       	std	Y+62, r18	; 0x3e
    74ae:	3f af       	std	Y+63, r19	; 0x3f
    74b0:	21 97       	sbiw	r28, 0x01	; 1
    74b2:	c6 01       	movw	r24, r12
    74b4:	b5 01       	movw	r22, r10
    74b6:	a4 01       	movw	r20, r8
    74b8:	93 01       	movw	r18, r6
    74ba:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__udivmodsi4>
    74be:	7b 01       	movw	r14, r22
    74c0:	8c 01       	movw	r16, r24
    74c2:	c6 01       	movw	r24, r12
    74c4:	b5 01       	movw	r22, r10
    74c6:	a4 01       	movw	r20, r8
    74c8:	93 01       	movw	r18, r6
    74ca:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__udivmodsi4>
    74ce:	c9 01       	movw	r24, r18
    74d0:	da 01       	movw	r26, r20
    74d2:	25 96       	adiw	r28, 0x05	; 5
    74d4:	8c af       	std	Y+60, r24	; 0x3c
    74d6:	9d af       	std	Y+61, r25	; 0x3d
    74d8:	ae af       	std	Y+62, r26	; 0x3e
    74da:	bf af       	std	Y+63, r27	; 0x3f
    74dc:	25 97       	sbiw	r28, 0x05	; 5
    74de:	bc 01       	movw	r22, r24
    74e0:	cd 01       	movw	r24, r26
    74e2:	21 96       	adiw	r28, 0x01	; 1
    74e4:	2c ad       	ldd	r18, Y+60	; 0x3c
    74e6:	3d ad       	ldd	r19, Y+61	; 0x3d
    74e8:	4e ad       	ldd	r20, Y+62	; 0x3e
    74ea:	5f ad       	ldd	r21, Y+63	; 0x3f
    74ec:	21 97       	sbiw	r28, 0x01	; 1
    74ee:	0e 94 76 46 	call	0x8cec	; 0x8cec <__mulsi3>
    74f2:	9b 01       	movw	r18, r22
    74f4:	ac 01       	movw	r20, r24
    74f6:	87 01       	movw	r16, r14
    74f8:	ff 24       	eor	r15, r15
    74fa:	ee 24       	eor	r14, r14
    74fc:	a9 a4       	ldd	r10, Y+41	; 0x29
    74fe:	ba a4       	ldd	r11, Y+42	; 0x2a
    7500:	cb a4       	ldd	r12, Y+43	; 0x2b
    7502:	dc a4       	ldd	r13, Y+44	; 0x2c
    7504:	c6 01       	movw	r24, r12
    7506:	aa 27       	eor	r26, r26
    7508:	bb 27       	eor	r27, r27
    750a:	5c 01       	movw	r10, r24
    750c:	6d 01       	movw	r12, r26
    750e:	ae 28       	or	r10, r14
    7510:	bf 28       	or	r11, r15
    7512:	c0 2a       	or	r12, r16
    7514:	d1 2a       	or	r13, r17
    7516:	a2 16       	cp	r10, r18
    7518:	b3 06       	cpc	r11, r19
    751a:	c4 06       	cpc	r12, r20
    751c:	d5 06       	cpc	r13, r21
    751e:	60 f5       	brcc	.+88     	; 0x7578 <__udivdi3+0x530>
    7520:	25 96       	adiw	r28, 0x05	; 5
    7522:	6c ad       	ldd	r22, Y+60	; 0x3c
    7524:	7d ad       	ldd	r23, Y+61	; 0x3d
    7526:	8e ad       	ldd	r24, Y+62	; 0x3e
    7528:	9f ad       	ldd	r25, Y+63	; 0x3f
    752a:	25 97       	sbiw	r28, 0x05	; 5
    752c:	61 50       	subi	r22, 0x01	; 1
    752e:	70 40       	sbci	r23, 0x00	; 0
    7530:	80 40       	sbci	r24, 0x00	; 0
    7532:	90 40       	sbci	r25, 0x00	; 0
    7534:	25 96       	adiw	r28, 0x05	; 5
    7536:	6c af       	std	Y+60, r22	; 0x3c
    7538:	7d af       	std	Y+61, r23	; 0x3d
    753a:	8e af       	std	Y+62, r24	; 0x3e
    753c:	9f af       	std	Y+63, r25	; 0x3f
    753e:	25 97       	sbiw	r28, 0x05	; 5
    7540:	a2 0c       	add	r10, r2
    7542:	b3 1c       	adc	r11, r3
    7544:	c4 1c       	adc	r12, r4
    7546:	d5 1c       	adc	r13, r5
    7548:	a2 14       	cp	r10, r2
    754a:	b3 04       	cpc	r11, r3
    754c:	c4 04       	cpc	r12, r4
    754e:	d5 04       	cpc	r13, r5
    7550:	98 f0       	brcs	.+38     	; 0x7578 <__udivdi3+0x530>
    7552:	a2 16       	cp	r10, r18
    7554:	b3 06       	cpc	r11, r19
    7556:	c4 06       	cpc	r12, r20
    7558:	d5 06       	cpc	r13, r21
    755a:	70 f4       	brcc	.+28     	; 0x7578 <__udivdi3+0x530>
    755c:	61 50       	subi	r22, 0x01	; 1
    755e:	70 40       	sbci	r23, 0x00	; 0
    7560:	80 40       	sbci	r24, 0x00	; 0
    7562:	90 40       	sbci	r25, 0x00	; 0
    7564:	25 96       	adiw	r28, 0x05	; 5
    7566:	6c af       	std	Y+60, r22	; 0x3c
    7568:	7d af       	std	Y+61, r23	; 0x3d
    756a:	8e af       	std	Y+62, r24	; 0x3e
    756c:	9f af       	std	Y+63, r25	; 0x3f
    756e:	25 97       	sbiw	r28, 0x05	; 5
    7570:	a2 0c       	add	r10, r2
    7572:	b3 1c       	adc	r11, r3
    7574:	c4 1c       	adc	r12, r4
    7576:	d5 1c       	adc	r13, r5
    7578:	a2 1a       	sub	r10, r18
    757a:	b3 0a       	sbc	r11, r19
    757c:	c4 0a       	sbc	r12, r20
    757e:	d5 0a       	sbc	r13, r21
    7580:	c6 01       	movw	r24, r12
    7582:	b5 01       	movw	r22, r10
    7584:	a4 01       	movw	r20, r8
    7586:	93 01       	movw	r18, r6
    7588:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__udivmodsi4>
    758c:	7b 01       	movw	r14, r22
    758e:	8c 01       	movw	r16, r24
    7590:	c6 01       	movw	r24, r12
    7592:	b5 01       	movw	r22, r10
    7594:	a4 01       	movw	r20, r8
    7596:	93 01       	movw	r18, r6
    7598:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__udivmodsi4>
    759c:	c9 01       	movw	r24, r18
    759e:	da 01       	movw	r26, r20
    75a0:	3c 01       	movw	r6, r24
    75a2:	4d 01       	movw	r8, r26
    75a4:	c4 01       	movw	r24, r8
    75a6:	b3 01       	movw	r22, r6
    75a8:	21 96       	adiw	r28, 0x01	; 1
    75aa:	2c ad       	ldd	r18, Y+60	; 0x3c
    75ac:	3d ad       	ldd	r19, Y+61	; 0x3d
    75ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    75b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    75b2:	21 97       	sbiw	r28, 0x01	; 1
    75b4:	0e 94 76 46 	call	0x8cec	; 0x8cec <__mulsi3>
    75b8:	9b 01       	movw	r18, r22
    75ba:	ac 01       	movw	r20, r24
    75bc:	87 01       	movw	r16, r14
    75be:	ff 24       	eor	r15, r15
    75c0:	ee 24       	eor	r14, r14
    75c2:	89 a5       	ldd	r24, Y+41	; 0x29
    75c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    75c6:	ab a5       	ldd	r26, Y+43	; 0x2b
    75c8:	bc a5       	ldd	r27, Y+44	; 0x2c
    75ca:	a0 70       	andi	r26, 0x00	; 0
    75cc:	b0 70       	andi	r27, 0x00	; 0
    75ce:	57 01       	movw	r10, r14
    75d0:	68 01       	movw	r12, r16
    75d2:	a8 2a       	or	r10, r24
    75d4:	b9 2a       	or	r11, r25
    75d6:	ca 2a       	or	r12, r26
    75d8:	db 2a       	or	r13, r27
    75da:	a2 16       	cp	r10, r18
    75dc:	b3 06       	cpc	r11, r19
    75de:	c4 06       	cpc	r12, r20
    75e0:	d5 06       	cpc	r13, r21
    75e2:	e0 f4       	brcc	.+56     	; 0x761c <__udivdi3+0x5d4>
    75e4:	08 94       	sec
    75e6:	61 08       	sbc	r6, r1
    75e8:	71 08       	sbc	r7, r1
    75ea:	81 08       	sbc	r8, r1
    75ec:	91 08       	sbc	r9, r1
    75ee:	a2 0c       	add	r10, r2
    75f0:	b3 1c       	adc	r11, r3
    75f2:	c4 1c       	adc	r12, r4
    75f4:	d5 1c       	adc	r13, r5
    75f6:	a2 14       	cp	r10, r2
    75f8:	b3 04       	cpc	r11, r3
    75fa:	c4 04       	cpc	r12, r4
    75fc:	d5 04       	cpc	r13, r5
    75fe:	70 f0       	brcs	.+28     	; 0x761c <__udivdi3+0x5d4>
    7600:	a2 16       	cp	r10, r18
    7602:	b3 06       	cpc	r11, r19
    7604:	c4 06       	cpc	r12, r20
    7606:	d5 06       	cpc	r13, r21
    7608:	48 f4       	brcc	.+18     	; 0x761c <__udivdi3+0x5d4>
    760a:	08 94       	sec
    760c:	61 08       	sbc	r6, r1
    760e:	71 08       	sbc	r7, r1
    7610:	81 08       	sbc	r8, r1
    7612:	91 08       	sbc	r9, r1
    7614:	a2 0c       	add	r10, r2
    7616:	b3 1c       	adc	r11, r3
    7618:	c4 1c       	adc	r12, r4
    761a:	d5 1c       	adc	r13, r5
    761c:	8d a5       	ldd	r24, Y+45	; 0x2d
    761e:	9e a5       	ldd	r25, Y+46	; 0x2e
    7620:	af a5       	ldd	r26, Y+47	; 0x2f
    7622:	b8 a9       	ldd	r27, Y+48	; 0x30
    7624:	6f 96       	adiw	r28, 0x1f	; 31
    7626:	0f ac       	ldd	r0, Y+63	; 0x3f
    7628:	6f 97       	sbiw	r28, 0x1f	; 31
    762a:	04 c0       	rjmp	.+8      	; 0x7634 <__udivdi3+0x5ec>
    762c:	88 0f       	add	r24, r24
    762e:	99 1f       	adc	r25, r25
    7630:	aa 1f       	adc	r26, r26
    7632:	bb 1f       	adc	r27, r27
    7634:	0a 94       	dec	r0
    7636:	d2 f7       	brpl	.-12     	; 0x762c <__udivdi3+0x5e4>
    7638:	8d a7       	std	Y+45, r24	; 0x2d
    763a:	9e a7       	std	Y+46, r25	; 0x2e
    763c:	af a7       	std	Y+47, r26	; 0x2f
    763e:	b8 ab       	std	Y+48, r27	; 0x30
    7640:	a2 1a       	sub	r10, r18
    7642:	b3 0a       	sbc	r11, r19
    7644:	c4 0a       	sbc	r12, r20
    7646:	d5 0a       	sbc	r13, r21
    7648:	25 96       	adiw	r28, 0x05	; 5
    764a:	ec ac       	ldd	r14, Y+60	; 0x3c
    764c:	fd ac       	ldd	r15, Y+61	; 0x3d
    764e:	0e ad       	ldd	r16, Y+62	; 0x3e
    7650:	1f ad       	ldd	r17, Y+63	; 0x3f
    7652:	25 97       	sbiw	r28, 0x05	; 5
    7654:	d7 01       	movw	r26, r14
    7656:	99 27       	eor	r25, r25
    7658:	88 27       	eor	r24, r24
    765a:	68 2a       	or	r6, r24
    765c:	79 2a       	or	r7, r25
    765e:	8a 2a       	or	r8, r26
    7660:	9b 2a       	or	r9, r27
    7662:	82 01       	movw	r16, r4
    7664:	22 27       	eor	r18, r18
    7666:	33 27       	eor	r19, r19
    7668:	29 96       	adiw	r28, 0x09	; 9
    766a:	0c af       	std	Y+60, r16	; 0x3c
    766c:	1d af       	std	Y+61, r17	; 0x3d
    766e:	2e af       	std	Y+62, r18	; 0x3e
    7670:	3f af       	std	Y+63, r19	; 0x3f
    7672:	29 97       	sbiw	r28, 0x09	; 9
    7674:	a2 01       	movw	r20, r4
    7676:	91 01       	movw	r18, r2
    7678:	40 70       	andi	r20, 0x00	; 0
    767a:	50 70       	andi	r21, 0x00	; 0
    767c:	2d 96       	adiw	r28, 0x0d	; 13
    767e:	2c af       	std	Y+60, r18	; 0x3c
    7680:	3d af       	std	Y+61, r19	; 0x3d
    7682:	4e af       	std	Y+62, r20	; 0x3e
    7684:	5f af       	std	Y+63, r21	; 0x3f
    7686:	2d 97       	sbiw	r28, 0x0d	; 13
    7688:	c6 01       	movw	r24, r12
    768a:	b5 01       	movw	r22, r10
    768c:	29 96       	adiw	r28, 0x09	; 9
    768e:	2c ad       	ldd	r18, Y+60	; 0x3c
    7690:	3d ad       	ldd	r19, Y+61	; 0x3d
    7692:	4e ad       	ldd	r20, Y+62	; 0x3e
    7694:	5f ad       	ldd	r21, Y+63	; 0x3f
    7696:	29 97       	sbiw	r28, 0x09	; 9
    7698:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__udivmodsi4>
    769c:	7b 01       	movw	r14, r22
    769e:	8c 01       	movw	r16, r24
    76a0:	c6 01       	movw	r24, r12
    76a2:	b5 01       	movw	r22, r10
    76a4:	29 96       	adiw	r28, 0x09	; 9
    76a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    76a8:	3d ad       	ldd	r19, Y+61	; 0x3d
    76aa:	4e ad       	ldd	r20, Y+62	; 0x3e
    76ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    76ae:	29 97       	sbiw	r28, 0x09	; 9
    76b0:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__udivmodsi4>
    76b4:	c9 01       	movw	r24, r18
    76b6:	da 01       	movw	r26, r20
    76b8:	61 96       	adiw	r28, 0x11	; 17
    76ba:	8c af       	std	Y+60, r24	; 0x3c
    76bc:	9d af       	std	Y+61, r25	; 0x3d
    76be:	ae af       	std	Y+62, r26	; 0x3e
    76c0:	bf af       	std	Y+63, r27	; 0x3f
    76c2:	61 97       	sbiw	r28, 0x11	; 17
    76c4:	bc 01       	movw	r22, r24
    76c6:	cd 01       	movw	r24, r26
    76c8:	2d 96       	adiw	r28, 0x0d	; 13
    76ca:	2c ad       	ldd	r18, Y+60	; 0x3c
    76cc:	3d ad       	ldd	r19, Y+61	; 0x3d
    76ce:	4e ad       	ldd	r20, Y+62	; 0x3e
    76d0:	5f ad       	ldd	r21, Y+63	; 0x3f
    76d2:	2d 97       	sbiw	r28, 0x0d	; 13
    76d4:	0e 94 76 46 	call	0x8cec	; 0x8cec <__mulsi3>
    76d8:	9b 01       	movw	r18, r22
    76da:	ac 01       	movw	r20, r24
    76dc:	87 01       	movw	r16, r14
    76de:	ff 24       	eor	r15, r15
    76e0:	ee 24       	eor	r14, r14
    76e2:	ad a4       	ldd	r10, Y+45	; 0x2d
    76e4:	be a4       	ldd	r11, Y+46	; 0x2e
    76e6:	cf a4       	ldd	r12, Y+47	; 0x2f
    76e8:	d8 a8       	ldd	r13, Y+48	; 0x30
    76ea:	c6 01       	movw	r24, r12
    76ec:	aa 27       	eor	r26, r26
    76ee:	bb 27       	eor	r27, r27
    76f0:	57 01       	movw	r10, r14
    76f2:	68 01       	movw	r12, r16
    76f4:	a8 2a       	or	r10, r24
    76f6:	b9 2a       	or	r11, r25
    76f8:	ca 2a       	or	r12, r26
    76fa:	db 2a       	or	r13, r27
    76fc:	a2 16       	cp	r10, r18
    76fe:	b3 06       	cpc	r11, r19
    7700:	c4 06       	cpc	r12, r20
    7702:	d5 06       	cpc	r13, r21
    7704:	60 f5       	brcc	.+88     	; 0x775e <__udivdi3+0x716>
    7706:	61 96       	adiw	r28, 0x11	; 17
    7708:	6c ad       	ldd	r22, Y+60	; 0x3c
    770a:	7d ad       	ldd	r23, Y+61	; 0x3d
    770c:	8e ad       	ldd	r24, Y+62	; 0x3e
    770e:	9f ad       	ldd	r25, Y+63	; 0x3f
    7710:	61 97       	sbiw	r28, 0x11	; 17
    7712:	61 50       	subi	r22, 0x01	; 1
    7714:	70 40       	sbci	r23, 0x00	; 0
    7716:	80 40       	sbci	r24, 0x00	; 0
    7718:	90 40       	sbci	r25, 0x00	; 0
    771a:	61 96       	adiw	r28, 0x11	; 17
    771c:	6c af       	std	Y+60, r22	; 0x3c
    771e:	7d af       	std	Y+61, r23	; 0x3d
    7720:	8e af       	std	Y+62, r24	; 0x3e
    7722:	9f af       	std	Y+63, r25	; 0x3f
    7724:	61 97       	sbiw	r28, 0x11	; 17
    7726:	a2 0c       	add	r10, r2
    7728:	b3 1c       	adc	r11, r3
    772a:	c4 1c       	adc	r12, r4
    772c:	d5 1c       	adc	r13, r5
    772e:	a2 14       	cp	r10, r2
    7730:	b3 04       	cpc	r11, r3
    7732:	c4 04       	cpc	r12, r4
    7734:	d5 04       	cpc	r13, r5
    7736:	98 f0       	brcs	.+38     	; 0x775e <__udivdi3+0x716>
    7738:	a2 16       	cp	r10, r18
    773a:	b3 06       	cpc	r11, r19
    773c:	c4 06       	cpc	r12, r20
    773e:	d5 06       	cpc	r13, r21
    7740:	70 f4       	brcc	.+28     	; 0x775e <__udivdi3+0x716>
    7742:	61 50       	subi	r22, 0x01	; 1
    7744:	70 40       	sbci	r23, 0x00	; 0
    7746:	80 40       	sbci	r24, 0x00	; 0
    7748:	90 40       	sbci	r25, 0x00	; 0
    774a:	61 96       	adiw	r28, 0x11	; 17
    774c:	6c af       	std	Y+60, r22	; 0x3c
    774e:	7d af       	std	Y+61, r23	; 0x3d
    7750:	8e af       	std	Y+62, r24	; 0x3e
    7752:	9f af       	std	Y+63, r25	; 0x3f
    7754:	61 97       	sbiw	r28, 0x11	; 17
    7756:	a2 0c       	add	r10, r2
    7758:	b3 1c       	adc	r11, r3
    775a:	c4 1c       	adc	r12, r4
    775c:	d5 1c       	adc	r13, r5
    775e:	a2 1a       	sub	r10, r18
    7760:	b3 0a       	sbc	r11, r19
    7762:	c4 0a       	sbc	r12, r20
    7764:	d5 0a       	sbc	r13, r21
    7766:	c6 01       	movw	r24, r12
    7768:	b5 01       	movw	r22, r10
    776a:	29 96       	adiw	r28, 0x09	; 9
    776c:	2c ad       	ldd	r18, Y+60	; 0x3c
    776e:	3d ad       	ldd	r19, Y+61	; 0x3d
    7770:	4e ad       	ldd	r20, Y+62	; 0x3e
    7772:	5f ad       	ldd	r21, Y+63	; 0x3f
    7774:	29 97       	sbiw	r28, 0x09	; 9
    7776:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__udivmodsi4>
    777a:	7b 01       	movw	r14, r22
    777c:	8c 01       	movw	r16, r24
    777e:	c6 01       	movw	r24, r12
    7780:	b5 01       	movw	r22, r10
    7782:	29 96       	adiw	r28, 0x09	; 9
    7784:	2c ad       	ldd	r18, Y+60	; 0x3c
    7786:	3d ad       	ldd	r19, Y+61	; 0x3d
    7788:	4e ad       	ldd	r20, Y+62	; 0x3e
    778a:	5f ad       	ldd	r21, Y+63	; 0x3f
    778c:	29 97       	sbiw	r28, 0x09	; 9
    778e:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__udivmodsi4>
    7792:	c9 01       	movw	r24, r18
    7794:	da 01       	movw	r26, r20
    7796:	5c 01       	movw	r10, r24
    7798:	6d 01       	movw	r12, r26
    779a:	c6 01       	movw	r24, r12
    779c:	b5 01       	movw	r22, r10
    779e:	2d 96       	adiw	r28, 0x0d	; 13
    77a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    77a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    77a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    77a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    77a8:	2d 97       	sbiw	r28, 0x0d	; 13
    77aa:	0e 94 76 46 	call	0x8cec	; 0x8cec <__mulsi3>
    77ae:	9b 01       	movw	r18, r22
    77b0:	ac 01       	movw	r20, r24
    77b2:	87 01       	movw	r16, r14
    77b4:	ff 24       	eor	r15, r15
    77b6:	ee 24       	eor	r14, r14
    77b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    77ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    77bc:	af a5       	ldd	r26, Y+47	; 0x2f
    77be:	b8 a9       	ldd	r27, Y+48	; 0x30
    77c0:	a0 70       	andi	r26, 0x00	; 0
    77c2:	b0 70       	andi	r27, 0x00	; 0
    77c4:	e8 2a       	or	r14, r24
    77c6:	f9 2a       	or	r15, r25
    77c8:	0a 2b       	or	r16, r26
    77ca:	1b 2b       	or	r17, r27
    77cc:	e2 16       	cp	r14, r18
    77ce:	f3 06       	cpc	r15, r19
    77d0:	04 07       	cpc	r16, r20
    77d2:	15 07       	cpc	r17, r21
    77d4:	c0 f4       	brcc	.+48     	; 0x7806 <__udivdi3+0x7be>
    77d6:	08 94       	sec
    77d8:	a1 08       	sbc	r10, r1
    77da:	b1 08       	sbc	r11, r1
    77dc:	c1 08       	sbc	r12, r1
    77de:	d1 08       	sbc	r13, r1
    77e0:	e2 0c       	add	r14, r2
    77e2:	f3 1c       	adc	r15, r3
    77e4:	04 1d       	adc	r16, r4
    77e6:	15 1d       	adc	r17, r5
    77e8:	e2 14       	cp	r14, r2
    77ea:	f3 04       	cpc	r15, r3
    77ec:	04 05       	cpc	r16, r4
    77ee:	15 05       	cpc	r17, r5
    77f0:	50 f0       	brcs	.+20     	; 0x7806 <__udivdi3+0x7be>
    77f2:	e2 16       	cp	r14, r18
    77f4:	f3 06       	cpc	r15, r19
    77f6:	04 07       	cpc	r16, r20
    77f8:	15 07       	cpc	r17, r21
    77fa:	28 f4       	brcc	.+10     	; 0x7806 <__udivdi3+0x7be>
    77fc:	08 94       	sec
    77fe:	a1 08       	sbc	r10, r1
    7800:	b1 08       	sbc	r11, r1
    7802:	c1 08       	sbc	r12, r1
    7804:	d1 08       	sbc	r13, r1
    7806:	61 96       	adiw	r28, 0x11	; 17
    7808:	ec ac       	ldd	r14, Y+60	; 0x3c
    780a:	fd ac       	ldd	r15, Y+61	; 0x3d
    780c:	0e ad       	ldd	r16, Y+62	; 0x3e
    780e:	1f ad       	ldd	r17, Y+63	; 0x3f
    7810:	61 97       	sbiw	r28, 0x11	; 17
    7812:	d7 01       	movw	r26, r14
    7814:	99 27       	eor	r25, r25
    7816:	88 27       	eor	r24, r24
    7818:	96 01       	movw	r18, r12
    781a:	85 01       	movw	r16, r10
    781c:	08 2b       	or	r16, r24
    781e:	19 2b       	or	r17, r25
    7820:	2a 2b       	or	r18, r26
    7822:	3b 2b       	or	r19, r27
    7824:	09 ab       	std	Y+49, r16	; 0x31
    7826:	1a ab       	std	Y+50, r17	; 0x32
    7828:	2b ab       	std	Y+51, r18	; 0x33
    782a:	3c ab       	std	Y+52, r19	; 0x34
    782c:	62 c2       	rjmp	.+1220   	; 0x7cf2 <__udivdi3+0xcaa>
    782e:	6e 14       	cp	r6, r14
    7830:	7f 04       	cpc	r7, r15
    7832:	80 06       	cpc	r8, r16
    7834:	91 06       	cpc	r9, r17
    7836:	08 f4       	brcc	.+2      	; 0x783a <__udivdi3+0x7f2>
    7838:	51 c2       	rjmp	.+1186   	; 0x7cdc <__udivdi3+0xc94>
    783a:	20 e0       	ldi	r18, 0x00	; 0
    783c:	e2 16       	cp	r14, r18
    783e:	20 e0       	ldi	r18, 0x00	; 0
    7840:	f2 06       	cpc	r15, r18
    7842:	21 e0       	ldi	r18, 0x01	; 1
    7844:	02 07       	cpc	r16, r18
    7846:	20 e0       	ldi	r18, 0x00	; 0
    7848:	12 07       	cpc	r17, r18
    784a:	88 f4       	brcc	.+34     	; 0x786e <__udivdi3+0x826>
    784c:	3f ef       	ldi	r19, 0xFF	; 255
    784e:	e3 16       	cp	r14, r19
    7850:	f1 04       	cpc	r15, r1
    7852:	01 05       	cpc	r16, r1
    7854:	11 05       	cpc	r17, r1
    7856:	31 f0       	breq	.+12     	; 0x7864 <__udivdi3+0x81c>
    7858:	28 f0       	brcs	.+10     	; 0x7864 <__udivdi3+0x81c>
    785a:	48 e0       	ldi	r20, 0x08	; 8
    785c:	50 e0       	ldi	r21, 0x00	; 0
    785e:	60 e0       	ldi	r22, 0x00	; 0
    7860:	70 e0       	ldi	r23, 0x00	; 0
    7862:	17 c0       	rjmp	.+46     	; 0x7892 <__udivdi3+0x84a>
    7864:	40 e0       	ldi	r20, 0x00	; 0
    7866:	50 e0       	ldi	r21, 0x00	; 0
    7868:	60 e0       	ldi	r22, 0x00	; 0
    786a:	70 e0       	ldi	r23, 0x00	; 0
    786c:	12 c0       	rjmp	.+36     	; 0x7892 <__udivdi3+0x84a>
    786e:	40 e0       	ldi	r20, 0x00	; 0
    7870:	e4 16       	cp	r14, r20
    7872:	40 e0       	ldi	r20, 0x00	; 0
    7874:	f4 06       	cpc	r15, r20
    7876:	40 e0       	ldi	r20, 0x00	; 0
    7878:	04 07       	cpc	r16, r20
    787a:	41 e0       	ldi	r20, 0x01	; 1
    787c:	14 07       	cpc	r17, r20
    787e:	28 f0       	brcs	.+10     	; 0x788a <__udivdi3+0x842>
    7880:	48 e1       	ldi	r20, 0x18	; 24
    7882:	50 e0       	ldi	r21, 0x00	; 0
    7884:	60 e0       	ldi	r22, 0x00	; 0
    7886:	70 e0       	ldi	r23, 0x00	; 0
    7888:	04 c0       	rjmp	.+8      	; 0x7892 <__udivdi3+0x84a>
    788a:	40 e1       	ldi	r20, 0x10	; 16
    788c:	50 e0       	ldi	r21, 0x00	; 0
    788e:	60 e0       	ldi	r22, 0x00	; 0
    7890:	70 e0       	ldi	r23, 0x00	; 0
    7892:	d8 01       	movw	r26, r16
    7894:	c7 01       	movw	r24, r14
    7896:	04 2e       	mov	r0, r20
    7898:	04 c0       	rjmp	.+8      	; 0x78a2 <__udivdi3+0x85a>
    789a:	b6 95       	lsr	r27
    789c:	a7 95       	ror	r26
    789e:	97 95       	ror	r25
    78a0:	87 95       	ror	r24
    78a2:	0a 94       	dec	r0
    78a4:	d2 f7       	brpl	.-12     	; 0x789a <__udivdi3+0x852>
    78a6:	86 5d       	subi	r24, 0xD6	; 214
    78a8:	9f 4d       	sbci	r25, 0xDF	; 223
    78aa:	dc 01       	movw	r26, r24
    78ac:	2c 91       	ld	r18, X
    78ae:	30 e2       	ldi	r19, 0x20	; 32
    78b0:	a3 2e       	mov	r10, r19
    78b2:	b1 2c       	mov	r11, r1
    78b4:	c1 2c       	mov	r12, r1
    78b6:	d1 2c       	mov	r13, r1
    78b8:	d6 01       	movw	r26, r12
    78ba:	c5 01       	movw	r24, r10
    78bc:	84 1b       	sub	r24, r20
    78be:	95 0b       	sbc	r25, r21
    78c0:	a6 0b       	sbc	r26, r22
    78c2:	b7 0b       	sbc	r27, r23
    78c4:	82 1b       	sub	r24, r18
    78c6:	91 09       	sbc	r25, r1
    78c8:	a1 09       	sbc	r26, r1
    78ca:	b1 09       	sbc	r27, r1
    78cc:	00 97       	sbiw	r24, 0x00	; 0
    78ce:	a1 05       	cpc	r26, r1
    78d0:	b1 05       	cpc	r27, r1
    78d2:	89 f4       	brne	.+34     	; 0x78f6 <__udivdi3+0x8ae>
    78d4:	e6 14       	cp	r14, r6
    78d6:	f7 04       	cpc	r15, r7
    78d8:	08 05       	cpc	r16, r8
    78da:	19 05       	cpc	r17, r9
    78dc:	08 f4       	brcc	.+2      	; 0x78e0 <__udivdi3+0x898>
    78de:	f2 c1       	rjmp	.+996    	; 0x7cc4 <__udivdi3+0xc7c>
    78e0:	6d a4       	ldd	r6, Y+45	; 0x2d
    78e2:	7e a4       	ldd	r7, Y+46	; 0x2e
    78e4:	8f a4       	ldd	r8, Y+47	; 0x2f
    78e6:	98 a8       	ldd	r9, Y+48	; 0x30
    78e8:	62 14       	cp	r6, r2
    78ea:	73 04       	cpc	r7, r3
    78ec:	84 04       	cpc	r8, r4
    78ee:	95 04       	cpc	r9, r5
    78f0:	08 f0       	brcs	.+2      	; 0x78f4 <__udivdi3+0x8ac>
    78f2:	e8 c1       	rjmp	.+976    	; 0x7cc4 <__udivdi3+0xc7c>
    78f4:	f3 c1       	rjmp	.+998    	; 0x7cdc <__udivdi3+0xc94>
    78f6:	6e 96       	adiw	r28, 0x1e	; 30
    78f8:	8f af       	std	Y+63, r24	; 0x3f
    78fa:	6e 97       	sbiw	r28, 0x1e	; 30
    78fc:	08 2e       	mov	r0, r24
    78fe:	04 c0       	rjmp	.+8      	; 0x7908 <__udivdi3+0x8c0>
    7900:	ee 0c       	add	r14, r14
    7902:	ff 1c       	adc	r15, r15
    7904:	00 1f       	adc	r16, r16
    7906:	11 1f       	adc	r17, r17
    7908:	0a 94       	dec	r0
    790a:	d2 f7       	brpl	.-12     	; 0x7900 <__udivdi3+0x8b8>
    790c:	6a 2d       	mov	r22, r10
    790e:	68 1b       	sub	r22, r24
    7910:	d2 01       	movw	r26, r4
    7912:	c1 01       	movw	r24, r2
    7914:	06 2e       	mov	r0, r22
    7916:	04 c0       	rjmp	.+8      	; 0x7920 <__udivdi3+0x8d8>
    7918:	b6 95       	lsr	r27
    791a:	a7 95       	ror	r26
    791c:	97 95       	ror	r25
    791e:	87 95       	ror	r24
    7920:	0a 94       	dec	r0
    7922:	d2 f7       	brpl	.-12     	; 0x7918 <__udivdi3+0x8d0>
    7924:	5c 01       	movw	r10, r24
    7926:	6d 01       	movw	r12, r26
    7928:	ae 28       	or	r10, r14
    792a:	bf 28       	or	r11, r15
    792c:	c0 2a       	or	r12, r16
    792e:	d1 2a       	or	r13, r17
    7930:	ad a2       	std	Y+37, r10	; 0x25
    7932:	be a2       	std	Y+38, r11	; 0x26
    7934:	cf a2       	std	Y+39, r12	; 0x27
    7936:	d8 a6       	std	Y+40, r13	; 0x28
    7938:	72 01       	movw	r14, r4
    793a:	61 01       	movw	r12, r2
    793c:	6e 96       	adiw	r28, 0x1e	; 30
    793e:	0f ac       	ldd	r0, Y+63	; 0x3f
    7940:	6e 97       	sbiw	r28, 0x1e	; 30
    7942:	04 c0       	rjmp	.+8      	; 0x794c <__udivdi3+0x904>
    7944:	cc 0c       	add	r12, r12
    7946:	dd 1c       	adc	r13, r13
    7948:	ee 1c       	adc	r14, r14
    794a:	ff 1c       	adc	r15, r15
    794c:	0a 94       	dec	r0
    794e:	d2 f7       	brpl	.-12     	; 0x7944 <__udivdi3+0x8fc>
    7950:	c9 a2       	std	Y+33, r12	; 0x21
    7952:	da a2       	std	Y+34, r13	; 0x22
    7954:	eb a2       	std	Y+35, r14	; 0x23
    7956:	fc a2       	std	Y+36, r15	; 0x24
    7958:	64 01       	movw	r12, r8
    795a:	53 01       	movw	r10, r6
    795c:	06 2e       	mov	r0, r22
    795e:	04 c0       	rjmp	.+8      	; 0x7968 <__udivdi3+0x920>
    7960:	d6 94       	lsr	r13
    7962:	c7 94       	ror	r12
    7964:	b7 94       	ror	r11
    7966:	a7 94       	ror	r10
    7968:	0a 94       	dec	r0
    796a:	d2 f7       	brpl	.-12     	; 0x7960 <__udivdi3+0x918>
    796c:	d4 01       	movw	r26, r8
    796e:	c3 01       	movw	r24, r6
    7970:	6e 96       	adiw	r28, 0x1e	; 30
    7972:	0f ac       	ldd	r0, Y+63	; 0x3f
    7974:	6e 97       	sbiw	r28, 0x1e	; 30
    7976:	04 c0       	rjmp	.+8      	; 0x7980 <__udivdi3+0x938>
    7978:	88 0f       	add	r24, r24
    797a:	99 1f       	adc	r25, r25
    797c:	aa 1f       	adc	r26, r26
    797e:	bb 1f       	adc	r27, r27
    7980:	0a 94       	dec	r0
    7982:	d2 f7       	brpl	.-12     	; 0x7978 <__udivdi3+0x930>
    7984:	ed a4       	ldd	r14, Y+45	; 0x2d
    7986:	fe a4       	ldd	r15, Y+46	; 0x2e
    7988:	0f a5       	ldd	r16, Y+47	; 0x2f
    798a:	18 a9       	ldd	r17, Y+48	; 0x30
    798c:	04 c0       	rjmp	.+8      	; 0x7996 <__udivdi3+0x94e>
    798e:	16 95       	lsr	r17
    7990:	07 95       	ror	r16
    7992:	f7 94       	ror	r15
    7994:	e7 94       	ror	r14
    7996:	6a 95       	dec	r22
    7998:	d2 f7       	brpl	.-12     	; 0x798e <__udivdi3+0x946>
    799a:	37 01       	movw	r6, r14
    799c:	48 01       	movw	r8, r16
    799e:	68 2a       	or	r6, r24
    79a0:	79 2a       	or	r7, r25
    79a2:	8a 2a       	or	r8, r26
    79a4:	9b 2a       	or	r9, r27
    79a6:	6d 8e       	std	Y+29, r6	; 0x1d
    79a8:	7e 8e       	std	Y+30, r7	; 0x1e
    79aa:	8f 8e       	std	Y+31, r8	; 0x1f
    79ac:	98 a2       	std	Y+32, r9	; 0x20
    79ae:	ed a0       	ldd	r14, Y+37	; 0x25
    79b0:	fe a0       	ldd	r15, Y+38	; 0x26
    79b2:	0f a1       	ldd	r16, Y+39	; 0x27
    79b4:	18 a5       	ldd	r17, Y+40	; 0x28
    79b6:	38 01       	movw	r6, r16
    79b8:	88 24       	eor	r8, r8
    79ba:	99 24       	eor	r9, r9
    79bc:	98 01       	movw	r18, r16
    79be:	87 01       	movw	r16, r14
    79c0:	20 70       	andi	r18, 0x00	; 0
    79c2:	30 70       	andi	r19, 0x00	; 0
    79c4:	65 96       	adiw	r28, 0x15	; 21
    79c6:	0c af       	std	Y+60, r16	; 0x3c
    79c8:	1d af       	std	Y+61, r17	; 0x3d
    79ca:	2e af       	std	Y+62, r18	; 0x3e
    79cc:	3f af       	std	Y+63, r19	; 0x3f
    79ce:	65 97       	sbiw	r28, 0x15	; 21
    79d0:	c6 01       	movw	r24, r12
    79d2:	b5 01       	movw	r22, r10
    79d4:	a4 01       	movw	r20, r8
    79d6:	93 01       	movw	r18, r6
    79d8:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__udivmodsi4>
    79dc:	7b 01       	movw	r14, r22
    79de:	8c 01       	movw	r16, r24
    79e0:	c6 01       	movw	r24, r12
    79e2:	b5 01       	movw	r22, r10
    79e4:	a4 01       	movw	r20, r8
    79e6:	93 01       	movw	r18, r6
    79e8:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__udivmodsi4>
    79ec:	c9 01       	movw	r24, r18
    79ee:	da 01       	movw	r26, r20
    79f0:	1c 01       	movw	r2, r24
    79f2:	2d 01       	movw	r4, r26
    79f4:	c2 01       	movw	r24, r4
    79f6:	b1 01       	movw	r22, r2
    79f8:	65 96       	adiw	r28, 0x15	; 21
    79fa:	2c ad       	ldd	r18, Y+60	; 0x3c
    79fc:	3d ad       	ldd	r19, Y+61	; 0x3d
    79fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    7a00:	5f ad       	ldd	r21, Y+63	; 0x3f
    7a02:	65 97       	sbiw	r28, 0x15	; 21
    7a04:	0e 94 76 46 	call	0x8cec	; 0x8cec <__mulsi3>
    7a08:	9b 01       	movw	r18, r22
    7a0a:	ac 01       	movw	r20, r24
    7a0c:	87 01       	movw	r16, r14
    7a0e:	ff 24       	eor	r15, r15
    7a10:	ee 24       	eor	r14, r14
    7a12:	ad 8c       	ldd	r10, Y+29	; 0x1d
    7a14:	be 8c       	ldd	r11, Y+30	; 0x1e
    7a16:	cf 8c       	ldd	r12, Y+31	; 0x1f
    7a18:	d8 a0       	ldd	r13, Y+32	; 0x20
    7a1a:	c6 01       	movw	r24, r12
    7a1c:	aa 27       	eor	r26, r26
    7a1e:	bb 27       	eor	r27, r27
    7a20:	57 01       	movw	r10, r14
    7a22:	68 01       	movw	r12, r16
    7a24:	a8 2a       	or	r10, r24
    7a26:	b9 2a       	or	r11, r25
    7a28:	ca 2a       	or	r12, r26
    7a2a:	db 2a       	or	r13, r27
    7a2c:	a2 16       	cp	r10, r18
    7a2e:	b3 06       	cpc	r11, r19
    7a30:	c4 06       	cpc	r12, r20
    7a32:	d5 06       	cpc	r13, r21
    7a34:	00 f5       	brcc	.+64     	; 0x7a76 <__udivdi3+0xa2e>
    7a36:	08 94       	sec
    7a38:	21 08       	sbc	r2, r1
    7a3a:	31 08       	sbc	r3, r1
    7a3c:	41 08       	sbc	r4, r1
    7a3e:	51 08       	sbc	r5, r1
    7a40:	ed a0       	ldd	r14, Y+37	; 0x25
    7a42:	fe a0       	ldd	r15, Y+38	; 0x26
    7a44:	0f a1       	ldd	r16, Y+39	; 0x27
    7a46:	18 a5       	ldd	r17, Y+40	; 0x28
    7a48:	ae 0c       	add	r10, r14
    7a4a:	bf 1c       	adc	r11, r15
    7a4c:	c0 1e       	adc	r12, r16
    7a4e:	d1 1e       	adc	r13, r17
    7a50:	ae 14       	cp	r10, r14
    7a52:	bf 04       	cpc	r11, r15
    7a54:	c0 06       	cpc	r12, r16
    7a56:	d1 06       	cpc	r13, r17
    7a58:	70 f0       	brcs	.+28     	; 0x7a76 <__udivdi3+0xa2e>
    7a5a:	a2 16       	cp	r10, r18
    7a5c:	b3 06       	cpc	r11, r19
    7a5e:	c4 06       	cpc	r12, r20
    7a60:	d5 06       	cpc	r13, r21
    7a62:	48 f4       	brcc	.+18     	; 0x7a76 <__udivdi3+0xa2e>
    7a64:	08 94       	sec
    7a66:	21 08       	sbc	r2, r1
    7a68:	31 08       	sbc	r3, r1
    7a6a:	41 08       	sbc	r4, r1
    7a6c:	51 08       	sbc	r5, r1
    7a6e:	ae 0c       	add	r10, r14
    7a70:	bf 1c       	adc	r11, r15
    7a72:	c0 1e       	adc	r12, r16
    7a74:	d1 1e       	adc	r13, r17
    7a76:	a2 1a       	sub	r10, r18
    7a78:	b3 0a       	sbc	r11, r19
    7a7a:	c4 0a       	sbc	r12, r20
    7a7c:	d5 0a       	sbc	r13, r21
    7a7e:	c6 01       	movw	r24, r12
    7a80:	b5 01       	movw	r22, r10
    7a82:	a4 01       	movw	r20, r8
    7a84:	93 01       	movw	r18, r6
    7a86:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__udivmodsi4>
    7a8a:	7b 01       	movw	r14, r22
    7a8c:	8c 01       	movw	r16, r24
    7a8e:	c6 01       	movw	r24, r12
    7a90:	b5 01       	movw	r22, r10
    7a92:	a4 01       	movw	r20, r8
    7a94:	93 01       	movw	r18, r6
    7a96:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <__udivmodsi4>
    7a9a:	c9 01       	movw	r24, r18
    7a9c:	da 01       	movw	r26, r20
    7a9e:	3c 01       	movw	r6, r24
    7aa0:	4d 01       	movw	r8, r26
    7aa2:	c4 01       	movw	r24, r8
    7aa4:	b3 01       	movw	r22, r6
    7aa6:	65 96       	adiw	r28, 0x15	; 21
    7aa8:	2c ad       	ldd	r18, Y+60	; 0x3c
    7aaa:	3d ad       	ldd	r19, Y+61	; 0x3d
    7aac:	4e ad       	ldd	r20, Y+62	; 0x3e
    7aae:	5f ad       	ldd	r21, Y+63	; 0x3f
    7ab0:	65 97       	sbiw	r28, 0x15	; 21
    7ab2:	0e 94 76 46 	call	0x8cec	; 0x8cec <__mulsi3>
    7ab6:	9b 01       	movw	r18, r22
    7ab8:	ac 01       	movw	r20, r24
    7aba:	87 01       	movw	r16, r14
    7abc:	ff 24       	eor	r15, r15
    7abe:	ee 24       	eor	r14, r14
    7ac0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7ac2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7ac4:	af 8d       	ldd	r26, Y+31	; 0x1f
    7ac6:	b8 a1       	ldd	r27, Y+32	; 0x20
    7ac8:	a0 70       	andi	r26, 0x00	; 0
    7aca:	b0 70       	andi	r27, 0x00	; 0
    7acc:	57 01       	movw	r10, r14
    7ace:	68 01       	movw	r12, r16
    7ad0:	a8 2a       	or	r10, r24
    7ad2:	b9 2a       	or	r11, r25
    7ad4:	ca 2a       	or	r12, r26
    7ad6:	db 2a       	or	r13, r27
    7ad8:	a2 16       	cp	r10, r18
    7ada:	b3 06       	cpc	r11, r19
    7adc:	c4 06       	cpc	r12, r20
    7ade:	d5 06       	cpc	r13, r21
    7ae0:	00 f5       	brcc	.+64     	; 0x7b22 <__udivdi3+0xada>
    7ae2:	08 94       	sec
    7ae4:	61 08       	sbc	r6, r1
    7ae6:	71 08       	sbc	r7, r1
    7ae8:	81 08       	sbc	r8, r1
    7aea:	91 08       	sbc	r9, r1
    7aec:	6d a1       	ldd	r22, Y+37	; 0x25
    7aee:	7e a1       	ldd	r23, Y+38	; 0x26
    7af0:	8f a1       	ldd	r24, Y+39	; 0x27
    7af2:	98 a5       	ldd	r25, Y+40	; 0x28
    7af4:	a6 0e       	add	r10, r22
    7af6:	b7 1e       	adc	r11, r23
    7af8:	c8 1e       	adc	r12, r24
    7afa:	d9 1e       	adc	r13, r25
    7afc:	a6 16       	cp	r10, r22
    7afe:	b7 06       	cpc	r11, r23
    7b00:	c8 06       	cpc	r12, r24
    7b02:	d9 06       	cpc	r13, r25
    7b04:	70 f0       	brcs	.+28     	; 0x7b22 <__udivdi3+0xada>
    7b06:	a2 16       	cp	r10, r18
    7b08:	b3 06       	cpc	r11, r19
    7b0a:	c4 06       	cpc	r12, r20
    7b0c:	d5 06       	cpc	r13, r21
    7b0e:	48 f4       	brcc	.+18     	; 0x7b22 <__udivdi3+0xada>
    7b10:	08 94       	sec
    7b12:	61 08       	sbc	r6, r1
    7b14:	71 08       	sbc	r7, r1
    7b16:	81 08       	sbc	r8, r1
    7b18:	91 08       	sbc	r9, r1
    7b1a:	a6 0e       	add	r10, r22
    7b1c:	b7 1e       	adc	r11, r23
    7b1e:	c8 1e       	adc	r12, r24
    7b20:	d9 1e       	adc	r13, r25
    7b22:	d6 01       	movw	r26, r12
    7b24:	c5 01       	movw	r24, r10
    7b26:	82 1b       	sub	r24, r18
    7b28:	93 0b       	sbc	r25, r19
    7b2a:	a4 0b       	sbc	r26, r20
    7b2c:	b5 0b       	sbc	r27, r21
    7b2e:	89 8f       	std	Y+25, r24	; 0x19
    7b30:	9a 8f       	std	Y+26, r25	; 0x1a
    7b32:	ab 8f       	std	Y+27, r26	; 0x1b
    7b34:	bc 8f       	std	Y+28, r27	; 0x1c
    7b36:	d1 01       	movw	r26, r2
    7b38:	99 27       	eor	r25, r25
    7b3a:	88 27       	eor	r24, r24
    7b3c:	64 01       	movw	r12, r8
    7b3e:	53 01       	movw	r10, r6
    7b40:	a8 2a       	or	r10, r24
    7b42:	b9 2a       	or	r11, r25
    7b44:	ca 2a       	or	r12, r26
    7b46:	db 2a       	or	r13, r27
    7b48:	a9 aa       	std	Y+49, r10	; 0x31
    7b4a:	ba aa       	std	Y+50, r11	; 0x32
    7b4c:	cb aa       	std	Y+51, r12	; 0x33
    7b4e:	dc aa       	std	Y+52, r13	; 0x34
    7b50:	86 01       	movw	r16, r12
    7b52:	75 01       	movw	r14, r10
    7b54:	2f ef       	ldi	r18, 0xFF	; 255
    7b56:	3f ef       	ldi	r19, 0xFF	; 255
    7b58:	40 e0       	ldi	r20, 0x00	; 0
    7b5a:	50 e0       	ldi	r21, 0x00	; 0
    7b5c:	e2 22       	and	r14, r18
    7b5e:	f3 22       	and	r15, r19
    7b60:	04 23       	and	r16, r20
    7b62:	15 23       	and	r17, r21
    7b64:	a6 01       	movw	r20, r12
    7b66:	66 27       	eor	r22, r22
    7b68:	77 27       	eor	r23, r23
    7b6a:	6d 96       	adiw	r28, 0x1d	; 29
    7b6c:	4c af       	std	Y+60, r20	; 0x3c
    7b6e:	5d af       	std	Y+61, r21	; 0x3d
    7b70:	6e af       	std	Y+62, r22	; 0x3e
    7b72:	7f af       	std	Y+63, r23	; 0x3f
    7b74:	6d 97       	sbiw	r28, 0x1d	; 29
    7b76:	a9 a0       	ldd	r10, Y+33	; 0x21
    7b78:	ba a0       	ldd	r11, Y+34	; 0x22
    7b7a:	cb a0       	ldd	r12, Y+35	; 0x23
    7b7c:	dc a0       	ldd	r13, Y+36	; 0x24
    7b7e:	6f ef       	ldi	r22, 0xFF	; 255
    7b80:	7f ef       	ldi	r23, 0xFF	; 255
    7b82:	80 e0       	ldi	r24, 0x00	; 0
    7b84:	90 e0       	ldi	r25, 0x00	; 0
    7b86:	a6 22       	and	r10, r22
    7b88:	b7 22       	and	r11, r23
    7b8a:	c8 22       	and	r12, r24
    7b8c:	d9 22       	and	r13, r25
    7b8e:	89 a1       	ldd	r24, Y+33	; 0x21
    7b90:	9a a1       	ldd	r25, Y+34	; 0x22
    7b92:	ab a1       	ldd	r26, Y+35	; 0x23
    7b94:	bc a1       	ldd	r27, Y+36	; 0x24
    7b96:	1d 01       	movw	r2, r26
    7b98:	44 24       	eor	r4, r4
    7b9a:	55 24       	eor	r5, r5
    7b9c:	c8 01       	movw	r24, r16
    7b9e:	b7 01       	movw	r22, r14
    7ba0:	a6 01       	movw	r20, r12
    7ba2:	95 01       	movw	r18, r10
    7ba4:	0e 94 76 46 	call	0x8cec	; 0x8cec <__mulsi3>
    7ba8:	69 96       	adiw	r28, 0x19	; 25
    7baa:	6c af       	std	Y+60, r22	; 0x3c
    7bac:	7d af       	std	Y+61, r23	; 0x3d
    7bae:	8e af       	std	Y+62, r24	; 0x3e
    7bb0:	9f af       	std	Y+63, r25	; 0x3f
    7bb2:	69 97       	sbiw	r28, 0x19	; 25
    7bb4:	c8 01       	movw	r24, r16
    7bb6:	b7 01       	movw	r22, r14
    7bb8:	a2 01       	movw	r20, r4
    7bba:	91 01       	movw	r18, r2
    7bbc:	0e 94 76 46 	call	0x8cec	; 0x8cec <__mulsi3>
    7bc0:	3b 01       	movw	r6, r22
    7bc2:	4c 01       	movw	r8, r24
    7bc4:	6d 96       	adiw	r28, 0x1d	; 29
    7bc6:	6c ad       	ldd	r22, Y+60	; 0x3c
    7bc8:	7d ad       	ldd	r23, Y+61	; 0x3d
    7bca:	8e ad       	ldd	r24, Y+62	; 0x3e
    7bcc:	9f ad       	ldd	r25, Y+63	; 0x3f
    7bce:	6d 97       	sbiw	r28, 0x1d	; 29
    7bd0:	a6 01       	movw	r20, r12
    7bd2:	95 01       	movw	r18, r10
    7bd4:	0e 94 76 46 	call	0x8cec	; 0x8cec <__mulsi3>
    7bd8:	7b 01       	movw	r14, r22
    7bda:	8c 01       	movw	r16, r24
    7bdc:	6d 96       	adiw	r28, 0x1d	; 29
    7bde:	6c ad       	ldd	r22, Y+60	; 0x3c
    7be0:	7d ad       	ldd	r23, Y+61	; 0x3d
    7be2:	8e ad       	ldd	r24, Y+62	; 0x3e
    7be4:	9f ad       	ldd	r25, Y+63	; 0x3f
    7be6:	6d 97       	sbiw	r28, 0x1d	; 29
    7be8:	a2 01       	movw	r20, r4
    7bea:	91 01       	movw	r18, r2
    7bec:	0e 94 76 46 	call	0x8cec	; 0x8cec <__mulsi3>
    7bf0:	5b 01       	movw	r10, r22
    7bf2:	6c 01       	movw	r12, r24
    7bf4:	a8 01       	movw	r20, r16
    7bf6:	97 01       	movw	r18, r14
    7bf8:	26 0d       	add	r18, r6
    7bfa:	37 1d       	adc	r19, r7
    7bfc:	48 1d       	adc	r20, r8
    7bfe:	59 1d       	adc	r21, r9
    7c00:	69 96       	adiw	r28, 0x19	; 25
    7c02:	6c ac       	ldd	r6, Y+60	; 0x3c
    7c04:	7d ac       	ldd	r7, Y+61	; 0x3d
    7c06:	8e ac       	ldd	r8, Y+62	; 0x3e
    7c08:	9f ac       	ldd	r9, Y+63	; 0x3f
    7c0a:	69 97       	sbiw	r28, 0x19	; 25
    7c0c:	c4 01       	movw	r24, r8
    7c0e:	aa 27       	eor	r26, r26
    7c10:	bb 27       	eor	r27, r27
    7c12:	28 0f       	add	r18, r24
    7c14:	39 1f       	adc	r19, r25
    7c16:	4a 1f       	adc	r20, r26
    7c18:	5b 1f       	adc	r21, r27
    7c1a:	2e 15       	cp	r18, r14
    7c1c:	3f 05       	cpc	r19, r15
    7c1e:	40 07       	cpc	r20, r16
    7c20:	51 07       	cpc	r21, r17
    7c22:	48 f4       	brcc	.+18     	; 0x7c36 <__udivdi3+0xbee>
    7c24:	e1 2c       	mov	r14, r1
    7c26:	f1 2c       	mov	r15, r1
    7c28:	61 e0       	ldi	r22, 0x01	; 1
    7c2a:	06 2f       	mov	r16, r22
    7c2c:	11 2d       	mov	r17, r1
    7c2e:	ae 0c       	add	r10, r14
    7c30:	bf 1c       	adc	r11, r15
    7c32:	c0 1e       	adc	r12, r16
    7c34:	d1 1e       	adc	r13, r17
    7c36:	ca 01       	movw	r24, r20
    7c38:	aa 27       	eor	r26, r26
    7c3a:	bb 27       	eor	r27, r27
    7c3c:	bc 01       	movw	r22, r24
    7c3e:	cd 01       	movw	r24, r26
    7c40:	6a 0d       	add	r22, r10
    7c42:	7b 1d       	adc	r23, r11
    7c44:	8c 1d       	adc	r24, r12
    7c46:	9d 1d       	adc	r25, r13
    7c48:	69 8c       	ldd	r6, Y+25	; 0x19
    7c4a:	7a 8c       	ldd	r7, Y+26	; 0x1a
    7c4c:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7c4e:	9c 8c       	ldd	r9, Y+28	; 0x1c
    7c50:	66 16       	cp	r6, r22
    7c52:	77 06       	cpc	r7, r23
    7c54:	88 06       	cpc	r8, r24
    7c56:	99 06       	cpc	r9, r25
    7c58:	40 f1       	brcs	.+80     	; 0x7caa <__udivdi3+0xc62>
    7c5a:	66 15       	cp	r22, r6
    7c5c:	77 05       	cpc	r23, r7
    7c5e:	88 05       	cpc	r24, r8
    7c60:	99 05       	cpc	r25, r9
    7c62:	09 f0       	breq	.+2      	; 0x7c66 <__udivdi3+0xc1e>
    7c64:	43 c0       	rjmp	.+134    	; 0x7cec <__udivdi3+0xca4>
    7c66:	d9 01       	movw	r26, r18
    7c68:	99 27       	eor	r25, r25
    7c6a:	88 27       	eor	r24, r24
    7c6c:	69 96       	adiw	r28, 0x19	; 25
    7c6e:	2c ad       	ldd	r18, Y+60	; 0x3c
    7c70:	3d ad       	ldd	r19, Y+61	; 0x3d
    7c72:	4e ad       	ldd	r20, Y+62	; 0x3e
    7c74:	5f ad       	ldd	r21, Y+63	; 0x3f
    7c76:	69 97       	sbiw	r28, 0x19	; 25
    7c78:	40 70       	andi	r20, 0x00	; 0
    7c7a:	50 70       	andi	r21, 0x00	; 0
    7c7c:	82 0f       	add	r24, r18
    7c7e:	93 1f       	adc	r25, r19
    7c80:	a4 1f       	adc	r26, r20
    7c82:	b5 1f       	adc	r27, r21
    7c84:	2d a5       	ldd	r18, Y+45	; 0x2d
    7c86:	3e a5       	ldd	r19, Y+46	; 0x2e
    7c88:	4f a5       	ldd	r20, Y+47	; 0x2f
    7c8a:	58 a9       	ldd	r21, Y+48	; 0x30
    7c8c:	6e 96       	adiw	r28, 0x1e	; 30
    7c8e:	0f ac       	ldd	r0, Y+63	; 0x3f
    7c90:	6e 97       	sbiw	r28, 0x1e	; 30
    7c92:	04 c0       	rjmp	.+8      	; 0x7c9c <__udivdi3+0xc54>
    7c94:	22 0f       	add	r18, r18
    7c96:	33 1f       	adc	r19, r19
    7c98:	44 1f       	adc	r20, r20
    7c9a:	55 1f       	adc	r21, r21
    7c9c:	0a 94       	dec	r0
    7c9e:	d2 f7       	brpl	.-12     	; 0x7c94 <__udivdi3+0xc4c>
    7ca0:	28 17       	cp	r18, r24
    7ca2:	39 07       	cpc	r19, r25
    7ca4:	4a 07       	cpc	r20, r26
    7ca6:	5b 07       	cpc	r21, r27
    7ca8:	08 f5       	brcc	.+66     	; 0x7cec <__udivdi3+0xca4>
    7caa:	09 a9       	ldd	r16, Y+49	; 0x31
    7cac:	1a a9       	ldd	r17, Y+50	; 0x32
    7cae:	2b a9       	ldd	r18, Y+51	; 0x33
    7cb0:	3c a9       	ldd	r19, Y+52	; 0x34
    7cb2:	01 50       	subi	r16, 0x01	; 1
    7cb4:	10 40       	sbci	r17, 0x00	; 0
    7cb6:	20 40       	sbci	r18, 0x00	; 0
    7cb8:	30 40       	sbci	r19, 0x00	; 0
    7cba:	09 ab       	std	Y+49, r16	; 0x31
    7cbc:	1a ab       	std	Y+50, r17	; 0x32
    7cbe:	2b ab       	std	Y+51, r18	; 0x33
    7cc0:	3c ab       	std	Y+52, r19	; 0x34
    7cc2:	14 c0       	rjmp	.+40     	; 0x7cec <__udivdi3+0xca4>
    7cc4:	66 24       	eor	r6, r6
    7cc6:	77 24       	eor	r7, r7
    7cc8:	43 01       	movw	r8, r6
    7cca:	21 e0       	ldi	r18, 0x01	; 1
    7ccc:	30 e0       	ldi	r19, 0x00	; 0
    7cce:	40 e0       	ldi	r20, 0x00	; 0
    7cd0:	50 e0       	ldi	r21, 0x00	; 0
    7cd2:	29 ab       	std	Y+49, r18	; 0x31
    7cd4:	3a ab       	std	Y+50, r19	; 0x32
    7cd6:	4b ab       	std	Y+51, r20	; 0x33
    7cd8:	5c ab       	std	Y+52, r21	; 0x34
    7cda:	0b c0       	rjmp	.+22     	; 0x7cf2 <__udivdi3+0xcaa>
    7cdc:	66 24       	eor	r6, r6
    7cde:	77 24       	eor	r7, r7
    7ce0:	43 01       	movw	r8, r6
    7ce2:	19 aa       	std	Y+49, r1	; 0x31
    7ce4:	1a aa       	std	Y+50, r1	; 0x32
    7ce6:	1b aa       	std	Y+51, r1	; 0x33
    7ce8:	1c aa       	std	Y+52, r1	; 0x34
    7cea:	03 c0       	rjmp	.+6      	; 0x7cf2 <__udivdi3+0xcaa>
    7cec:	66 24       	eor	r6, r6
    7cee:	77 24       	eor	r7, r7
    7cf0:	43 01       	movw	r8, r6
    7cf2:	fe 01       	movw	r30, r28
    7cf4:	71 96       	adiw	r30, 0x11	; 17
    7cf6:	88 e0       	ldi	r24, 0x08	; 8
    7cf8:	df 01       	movw	r26, r30
    7cfa:	1d 92       	st	X+, r1
    7cfc:	8a 95       	dec	r24
    7cfe:	e9 f7       	brne	.-6      	; 0x7cfa <__udivdi3+0xcb2>
    7d00:	a9 a8       	ldd	r10, Y+49	; 0x31
    7d02:	ba a8       	ldd	r11, Y+50	; 0x32
    7d04:	cb a8       	ldd	r12, Y+51	; 0x33
    7d06:	dc a8       	ldd	r13, Y+52	; 0x34
    7d08:	a9 8a       	std	Y+17, r10	; 0x11
    7d0a:	ba 8a       	std	Y+18, r11	; 0x12
    7d0c:	cb 8a       	std	Y+19, r12	; 0x13
    7d0e:	dc 8a       	std	Y+20, r13	; 0x14
    7d10:	6d 8a       	std	Y+21, r6	; 0x15
    7d12:	7e 8a       	std	Y+22, r7	; 0x16
    7d14:	8f 8a       	std	Y+23, r8	; 0x17
    7d16:	98 8e       	std	Y+24, r9	; 0x18
    7d18:	29 a9       	ldd	r18, Y+49	; 0x31
    7d1a:	3a 89       	ldd	r19, Y+18	; 0x12
    7d1c:	4b 89       	ldd	r20, Y+19	; 0x13
    7d1e:	5c 89       	ldd	r21, Y+20	; 0x14
    7d20:	66 2d       	mov	r22, r6
    7d22:	7e 89       	ldd	r23, Y+22	; 0x16
    7d24:	8f 89       	ldd	r24, Y+23	; 0x17
    7d26:	98 8d       	ldd	r25, Y+24	; 0x18
    7d28:	c2 5a       	subi	r28, 0xA2	; 162
    7d2a:	df 4f       	sbci	r29, 0xFF	; 255
    7d2c:	e2 e1       	ldi	r30, 0x12	; 18
    7d2e:	0c 94 d3 46 	jmp	0x8da6	; 0x8da6 <__epilogue_restores__>

00007d32 <vfprintf>:
    7d32:	2f 92       	push	r2
    7d34:	3f 92       	push	r3
    7d36:	4f 92       	push	r4
    7d38:	5f 92       	push	r5
    7d3a:	6f 92       	push	r6
    7d3c:	7f 92       	push	r7
    7d3e:	8f 92       	push	r8
    7d40:	9f 92       	push	r9
    7d42:	af 92       	push	r10
    7d44:	bf 92       	push	r11
    7d46:	cf 92       	push	r12
    7d48:	df 92       	push	r13
    7d4a:	ef 92       	push	r14
    7d4c:	ff 92       	push	r15
    7d4e:	0f 93       	push	r16
    7d50:	1f 93       	push	r17
    7d52:	df 93       	push	r29
    7d54:	cf 93       	push	r28
    7d56:	cd b7       	in	r28, 0x3d	; 61
    7d58:	de b7       	in	r29, 0x3e	; 62
    7d5a:	61 97       	sbiw	r28, 0x11	; 17
    7d5c:	cd bf       	out	0x3d, r28	; 61
    7d5e:	de bf       	out	0x3e, r29	; 62
    7d60:	3c 01       	movw	r6, r24
    7d62:	6e 87       	std	Y+14, r22	; 0x0e
    7d64:	7f 87       	std	Y+15, r23	; 0x0f
    7d66:	6a 01       	movw	r12, r20
    7d68:	fc 01       	movw	r30, r24
    7d6a:	16 82       	std	Z+6, r1	; 0x06
    7d6c:	17 82       	std	Z+7, r1	; 0x07
    7d6e:	83 81       	ldd	r24, Z+3	; 0x03
    7d70:	81 fd       	sbrc	r24, 1
    7d72:	03 c0       	rjmp	.+6      	; 0x7d7a <vfprintf+0x48>
    7d74:	6f ef       	ldi	r22, 0xFF	; 255
    7d76:	7f ef       	ldi	r23, 0xFF	; 255
    7d78:	6f c3       	rjmp	.+1758   	; 0x8458 <vfprintf+0x726>
    7d7a:	9e 01       	movw	r18, r28
    7d7c:	2f 5f       	subi	r18, 0xFF	; 255
    7d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    7d80:	28 8b       	std	Y+16, r18	; 0x10
    7d82:	39 8b       	std	Y+17, r19	; 0x11
    7d84:	f3 01       	movw	r30, r6
    7d86:	23 81       	ldd	r18, Z+3	; 0x03
    7d88:	ee 85       	ldd	r30, Y+14	; 0x0e
    7d8a:	ff 85       	ldd	r31, Y+15	; 0x0f
    7d8c:	23 fd       	sbrc	r18, 3
    7d8e:	85 91       	lpm	r24, Z+
    7d90:	23 ff       	sbrs	r18, 3
    7d92:	81 91       	ld	r24, Z+
    7d94:	ee 87       	std	Y+14, r30	; 0x0e
    7d96:	ff 87       	std	Y+15, r31	; 0x0f
    7d98:	88 23       	and	r24, r24
    7d9a:	09 f4       	brne	.+2      	; 0x7d9e <vfprintf+0x6c>
    7d9c:	5a c3       	rjmp	.+1716   	; 0x8452 <vfprintf+0x720>
    7d9e:	85 32       	cpi	r24, 0x25	; 37
    7da0:	51 f4       	brne	.+20     	; 0x7db6 <vfprintf+0x84>
    7da2:	ee 85       	ldd	r30, Y+14	; 0x0e
    7da4:	ff 85       	ldd	r31, Y+15	; 0x0f
    7da6:	23 fd       	sbrc	r18, 3
    7da8:	85 91       	lpm	r24, Z+
    7daa:	23 ff       	sbrs	r18, 3
    7dac:	81 91       	ld	r24, Z+
    7dae:	ee 87       	std	Y+14, r30	; 0x0e
    7db0:	ff 87       	std	Y+15, r31	; 0x0f
    7db2:	85 32       	cpi	r24, 0x25	; 37
    7db4:	29 f4       	brne	.+10     	; 0x7dc0 <vfprintf+0x8e>
    7db6:	90 e0       	ldi	r25, 0x00	; 0
    7db8:	b3 01       	movw	r22, r6
    7dba:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    7dbe:	e2 cf       	rjmp	.-60     	; 0x7d84 <vfprintf+0x52>
    7dc0:	98 2f       	mov	r25, r24
    7dc2:	10 e0       	ldi	r17, 0x00	; 0
    7dc4:	88 24       	eor	r8, r8
    7dc6:	99 24       	eor	r9, r9
    7dc8:	10 32       	cpi	r17, 0x20	; 32
    7dca:	b0 f4       	brcc	.+44     	; 0x7df8 <vfprintf+0xc6>
    7dcc:	9b 32       	cpi	r25, 0x2B	; 43
    7dce:	69 f0       	breq	.+26     	; 0x7dea <vfprintf+0xb8>
    7dd0:	9c 32       	cpi	r25, 0x2C	; 44
    7dd2:	28 f4       	brcc	.+10     	; 0x7dde <vfprintf+0xac>
    7dd4:	90 32       	cpi	r25, 0x20	; 32
    7dd6:	51 f0       	breq	.+20     	; 0x7dec <vfprintf+0xba>
    7dd8:	93 32       	cpi	r25, 0x23	; 35
    7dda:	71 f4       	brne	.+28     	; 0x7df8 <vfprintf+0xc6>
    7ddc:	0b c0       	rjmp	.+22     	; 0x7df4 <vfprintf+0xc2>
    7dde:	9d 32       	cpi	r25, 0x2D	; 45
    7de0:	39 f0       	breq	.+14     	; 0x7df0 <vfprintf+0xbe>
    7de2:	90 33       	cpi	r25, 0x30	; 48
    7de4:	49 f4       	brne	.+18     	; 0x7df8 <vfprintf+0xc6>
    7de6:	11 60       	ori	r17, 0x01	; 1
    7de8:	28 c0       	rjmp	.+80     	; 0x7e3a <vfprintf+0x108>
    7dea:	12 60       	ori	r17, 0x02	; 2
    7dec:	14 60       	ori	r17, 0x04	; 4
    7dee:	25 c0       	rjmp	.+74     	; 0x7e3a <vfprintf+0x108>
    7df0:	18 60       	ori	r17, 0x08	; 8
    7df2:	23 c0       	rjmp	.+70     	; 0x7e3a <vfprintf+0x108>
    7df4:	10 61       	ori	r17, 0x10	; 16
    7df6:	21 c0       	rjmp	.+66     	; 0x7e3a <vfprintf+0x108>
    7df8:	17 fd       	sbrc	r17, 7
    7dfa:	2a c0       	rjmp	.+84     	; 0x7e50 <vfprintf+0x11e>
    7dfc:	89 2f       	mov	r24, r25
    7dfe:	80 53       	subi	r24, 0x30	; 48
    7e00:	8a 30       	cpi	r24, 0x0A	; 10
    7e02:	78 f4       	brcc	.+30     	; 0x7e22 <vfprintf+0xf0>
    7e04:	16 ff       	sbrs	r17, 6
    7e06:	06 c0       	rjmp	.+12     	; 0x7e14 <vfprintf+0xe2>
    7e08:	fa e0       	ldi	r31, 0x0A	; 10
    7e0a:	9f 9e       	mul	r9, r31
    7e0c:	90 2c       	mov	r9, r0
    7e0e:	11 24       	eor	r1, r1
    7e10:	98 0e       	add	r9, r24
    7e12:	13 c0       	rjmp	.+38     	; 0x7e3a <vfprintf+0x108>
    7e14:	3a e0       	ldi	r19, 0x0A	; 10
    7e16:	83 9e       	mul	r8, r19
    7e18:	80 2c       	mov	r8, r0
    7e1a:	11 24       	eor	r1, r1
    7e1c:	88 0e       	add	r8, r24
    7e1e:	10 62       	ori	r17, 0x20	; 32
    7e20:	0c c0       	rjmp	.+24     	; 0x7e3a <vfprintf+0x108>
    7e22:	9e 32       	cpi	r25, 0x2E	; 46
    7e24:	21 f4       	brne	.+8      	; 0x7e2e <vfprintf+0xfc>
    7e26:	16 fd       	sbrc	r17, 6
    7e28:	14 c3       	rjmp	.+1576   	; 0x8452 <vfprintf+0x720>
    7e2a:	10 64       	ori	r17, 0x40	; 64
    7e2c:	06 c0       	rjmp	.+12     	; 0x7e3a <vfprintf+0x108>
    7e2e:	9c 36       	cpi	r25, 0x6C	; 108
    7e30:	11 f4       	brne	.+4      	; 0x7e36 <vfprintf+0x104>
    7e32:	10 68       	ori	r17, 0x80	; 128
    7e34:	02 c0       	rjmp	.+4      	; 0x7e3a <vfprintf+0x108>
    7e36:	98 36       	cpi	r25, 0x68	; 104
    7e38:	59 f4       	brne	.+22     	; 0x7e50 <vfprintf+0x11e>
    7e3a:	ee 85       	ldd	r30, Y+14	; 0x0e
    7e3c:	ff 85       	ldd	r31, Y+15	; 0x0f
    7e3e:	23 fd       	sbrc	r18, 3
    7e40:	95 91       	lpm	r25, Z+
    7e42:	23 ff       	sbrs	r18, 3
    7e44:	91 91       	ld	r25, Z+
    7e46:	ee 87       	std	Y+14, r30	; 0x0e
    7e48:	ff 87       	std	Y+15, r31	; 0x0f
    7e4a:	99 23       	and	r25, r25
    7e4c:	09 f0       	breq	.+2      	; 0x7e50 <vfprintf+0x11e>
    7e4e:	bc cf       	rjmp	.-136    	; 0x7dc8 <vfprintf+0x96>
    7e50:	89 2f       	mov	r24, r25
    7e52:	85 54       	subi	r24, 0x45	; 69
    7e54:	83 30       	cpi	r24, 0x03	; 3
    7e56:	20 f4       	brcc	.+8      	; 0x7e60 <vfprintf+0x12e>
    7e58:	81 2f       	mov	r24, r17
    7e5a:	80 61       	ori	r24, 0x10	; 16
    7e5c:	90 5e       	subi	r25, 0xE0	; 224
    7e5e:	07 c0       	rjmp	.+14     	; 0x7e6e <vfprintf+0x13c>
    7e60:	89 2f       	mov	r24, r25
    7e62:	85 56       	subi	r24, 0x65	; 101
    7e64:	83 30       	cpi	r24, 0x03	; 3
    7e66:	08 f0       	brcs	.+2      	; 0x7e6a <vfprintf+0x138>
    7e68:	9f c1       	rjmp	.+830    	; 0x81a8 <vfprintf+0x476>
    7e6a:	81 2f       	mov	r24, r17
    7e6c:	8f 7e       	andi	r24, 0xEF	; 239
    7e6e:	86 fd       	sbrc	r24, 6
    7e70:	02 c0       	rjmp	.+4      	; 0x7e76 <vfprintf+0x144>
    7e72:	76 e0       	ldi	r23, 0x06	; 6
    7e74:	97 2e       	mov	r9, r23
    7e76:	6f e3       	ldi	r22, 0x3F	; 63
    7e78:	f6 2e       	mov	r15, r22
    7e7a:	f8 22       	and	r15, r24
    7e7c:	95 36       	cpi	r25, 0x65	; 101
    7e7e:	19 f4       	brne	.+6      	; 0x7e86 <vfprintf+0x154>
    7e80:	f0 e4       	ldi	r31, 0x40	; 64
    7e82:	ff 2a       	or	r15, r31
    7e84:	07 c0       	rjmp	.+14     	; 0x7e94 <vfprintf+0x162>
    7e86:	96 36       	cpi	r25, 0x66	; 102
    7e88:	19 f4       	brne	.+6      	; 0x7e90 <vfprintf+0x15e>
    7e8a:	20 e8       	ldi	r18, 0x80	; 128
    7e8c:	f2 2a       	or	r15, r18
    7e8e:	02 c0       	rjmp	.+4      	; 0x7e94 <vfprintf+0x162>
    7e90:	91 10       	cpse	r9, r1
    7e92:	9a 94       	dec	r9
    7e94:	f7 fe       	sbrs	r15, 7
    7e96:	0a c0       	rjmp	.+20     	; 0x7eac <vfprintf+0x17a>
    7e98:	3b e3       	ldi	r19, 0x3B	; 59
    7e9a:	39 15       	cp	r19, r9
    7e9c:	18 f4       	brcc	.+6      	; 0x7ea4 <vfprintf+0x172>
    7e9e:	5c e3       	ldi	r21, 0x3C	; 60
    7ea0:	b5 2e       	mov	r11, r21
    7ea2:	02 c0       	rjmp	.+4      	; 0x7ea8 <vfprintf+0x176>
    7ea4:	b9 2c       	mov	r11, r9
    7ea6:	b3 94       	inc	r11
    7ea8:	27 e0       	ldi	r18, 0x07	; 7
    7eaa:	09 c0       	rjmp	.+18     	; 0x7ebe <vfprintf+0x18c>
    7eac:	47 e0       	ldi	r20, 0x07	; 7
    7eae:	49 15       	cp	r20, r9
    7eb0:	20 f4       	brcc	.+8      	; 0x7eba <vfprintf+0x188>
    7eb2:	bb 24       	eor	r11, r11
    7eb4:	47 e0       	ldi	r20, 0x07	; 7
    7eb6:	94 2e       	mov	r9, r20
    7eb8:	f7 cf       	rjmp	.-18     	; 0x7ea8 <vfprintf+0x176>
    7eba:	29 2d       	mov	r18, r9
    7ebc:	bb 24       	eor	r11, r11
    7ebe:	c6 01       	movw	r24, r12
    7ec0:	04 96       	adiw	r24, 0x04	; 4
    7ec2:	8c 87       	std	Y+12, r24	; 0x0c
    7ec4:	9d 87       	std	Y+13, r25	; 0x0d
    7ec6:	f6 01       	movw	r30, r12
    7ec8:	60 81       	ld	r22, Z
    7eca:	71 81       	ldd	r23, Z+1	; 0x01
    7ecc:	82 81       	ldd	r24, Z+2	; 0x02
    7ece:	93 81       	ldd	r25, Z+3	; 0x03
    7ed0:	ae 01       	movw	r20, r28
    7ed2:	4f 5f       	subi	r20, 0xFF	; 255
    7ed4:	5f 4f       	sbci	r21, 0xFF	; 255
    7ed6:	0b 2d       	mov	r16, r11
    7ed8:	0e 94 7a 48 	call	0x90f4	; 0x90f4 <__ftoa_engine>
    7edc:	6c 01       	movw	r12, r24
    7ede:	09 81       	ldd	r16, Y+1	; 0x01
    7ee0:	20 2e       	mov	r2, r16
    7ee2:	33 24       	eor	r3, r3
    7ee4:	00 ff       	sbrs	r16, 0
    7ee6:	04 c0       	rjmp	.+8      	; 0x7ef0 <vfprintf+0x1be>
    7ee8:	03 fd       	sbrc	r16, 3
    7eea:	02 c0       	rjmp	.+4      	; 0x7ef0 <vfprintf+0x1be>
    7eec:	1d e2       	ldi	r17, 0x2D	; 45
    7eee:	09 c0       	rjmp	.+18     	; 0x7f02 <vfprintf+0x1d0>
    7ef0:	f1 fe       	sbrs	r15, 1
    7ef2:	02 c0       	rjmp	.+4      	; 0x7ef8 <vfprintf+0x1c6>
    7ef4:	1b e2       	ldi	r17, 0x2B	; 43
    7ef6:	05 c0       	rjmp	.+10     	; 0x7f02 <vfprintf+0x1d0>
    7ef8:	f2 fc       	sbrc	r15, 2
    7efa:	02 c0       	rjmp	.+4      	; 0x7f00 <vfprintf+0x1ce>
    7efc:	10 e0       	ldi	r17, 0x00	; 0
    7efe:	01 c0       	rjmp	.+2      	; 0x7f02 <vfprintf+0x1d0>
    7f00:	10 e2       	ldi	r17, 0x20	; 32
    7f02:	c1 01       	movw	r24, r2
    7f04:	8c 70       	andi	r24, 0x0C	; 12
    7f06:	90 70       	andi	r25, 0x00	; 0
    7f08:	89 2b       	or	r24, r25
    7f0a:	b9 f1       	breq	.+110    	; 0x7f7a <vfprintf+0x248>
    7f0c:	11 23       	and	r17, r17
    7f0e:	11 f4       	brne	.+4      	; 0x7f14 <vfprintf+0x1e2>
    7f10:	83 e0       	ldi	r24, 0x03	; 3
    7f12:	01 c0       	rjmp	.+2      	; 0x7f16 <vfprintf+0x1e4>
    7f14:	84 e0       	ldi	r24, 0x04	; 4
    7f16:	88 15       	cp	r24, r8
    7f18:	10 f0       	brcs	.+4      	; 0x7f1e <vfprintf+0x1ec>
    7f1a:	88 24       	eor	r8, r8
    7f1c:	0a c0       	rjmp	.+20     	; 0x7f32 <vfprintf+0x200>
    7f1e:	88 1a       	sub	r8, r24
    7f20:	f3 fc       	sbrc	r15, 3
    7f22:	07 c0       	rjmp	.+14     	; 0x7f32 <vfprintf+0x200>
    7f24:	80 e2       	ldi	r24, 0x20	; 32
    7f26:	90 e0       	ldi	r25, 0x00	; 0
    7f28:	b3 01       	movw	r22, r6
    7f2a:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    7f2e:	8a 94       	dec	r8
    7f30:	c9 f7       	brne	.-14     	; 0x7f24 <vfprintf+0x1f2>
    7f32:	11 23       	and	r17, r17
    7f34:	29 f0       	breq	.+10     	; 0x7f40 <vfprintf+0x20e>
    7f36:	81 2f       	mov	r24, r17
    7f38:	90 e0       	ldi	r25, 0x00	; 0
    7f3a:	b3 01       	movw	r22, r6
    7f3c:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    7f40:	23 fe       	sbrs	r2, 3
    7f42:	03 c0       	rjmp	.+6      	; 0x7f4a <vfprintf+0x218>
    7f44:	03 e3       	ldi	r16, 0x33	; 51
    7f46:	12 e0       	ldi	r17, 0x02	; 2
    7f48:	0e c0       	rjmp	.+28     	; 0x7f66 <vfprintf+0x234>
    7f4a:	07 e3       	ldi	r16, 0x37	; 55
    7f4c:	12 e0       	ldi	r17, 0x02	; 2
    7f4e:	0b c0       	rjmp	.+22     	; 0x7f66 <vfprintf+0x234>
    7f50:	e1 14       	cp	r14, r1
    7f52:	f1 04       	cpc	r15, r1
    7f54:	09 f0       	breq	.+2      	; 0x7f58 <vfprintf+0x226>
    7f56:	80 52       	subi	r24, 0x20	; 32
    7f58:	90 e0       	ldi	r25, 0x00	; 0
    7f5a:	b3 01       	movw	r22, r6
    7f5c:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    7f60:	0f 5f       	subi	r16, 0xFF	; 255
    7f62:	1f 4f       	sbci	r17, 0xFF	; 255
    7f64:	05 c0       	rjmp	.+10     	; 0x7f70 <vfprintf+0x23e>
    7f66:	ef 2c       	mov	r14, r15
    7f68:	ff 24       	eor	r15, r15
    7f6a:	f0 e1       	ldi	r31, 0x10	; 16
    7f6c:	ef 22       	and	r14, r31
    7f6e:	ff 24       	eor	r15, r15
    7f70:	f8 01       	movw	r30, r16
    7f72:	84 91       	lpm	r24, Z+
    7f74:	88 23       	and	r24, r24
    7f76:	61 f7       	brne	.-40     	; 0x7f50 <vfprintf+0x21e>
    7f78:	14 c1       	rjmp	.+552    	; 0x81a2 <vfprintf+0x470>
    7f7a:	f7 fe       	sbrs	r15, 7
    7f7c:	12 c0       	rjmp	.+36     	; 0x7fa2 <vfprintf+0x270>
    7f7e:	bc 0c       	add	r11, r12
    7f80:	24 fe       	sbrs	r2, 4
    7f82:	04 c0       	rjmp	.+8      	; 0x7f8c <vfprintf+0x25a>
    7f84:	8a 81       	ldd	r24, Y+2	; 0x02
    7f86:	81 33       	cpi	r24, 0x31	; 49
    7f88:	09 f4       	brne	.+2      	; 0x7f8c <vfprintf+0x25a>
    7f8a:	ba 94       	dec	r11
    7f8c:	1b 14       	cp	r1, r11
    7f8e:	1c f0       	brlt	.+6      	; 0x7f96 <vfprintf+0x264>
    7f90:	bb 24       	eor	r11, r11
    7f92:	b3 94       	inc	r11
    7f94:	2d c0       	rjmp	.+90     	; 0x7ff0 <vfprintf+0x2be>
    7f96:	f8 e0       	ldi	r31, 0x08	; 8
    7f98:	fb 15       	cp	r31, r11
    7f9a:	50 f5       	brcc	.+84     	; 0x7ff0 <vfprintf+0x2be>
    7f9c:	38 e0       	ldi	r19, 0x08	; 8
    7f9e:	b3 2e       	mov	r11, r19
    7fa0:	27 c0       	rjmp	.+78     	; 0x7ff0 <vfprintf+0x2be>
    7fa2:	f6 fc       	sbrc	r15, 6
    7fa4:	25 c0       	rjmp	.+74     	; 0x7ff0 <vfprintf+0x2be>
    7fa6:	89 2d       	mov	r24, r9
    7fa8:	90 e0       	ldi	r25, 0x00	; 0
    7faa:	8c 15       	cp	r24, r12
    7fac:	9d 05       	cpc	r25, r13
    7fae:	4c f0       	brlt	.+18     	; 0x7fc2 <vfprintf+0x290>
    7fb0:	2c ef       	ldi	r18, 0xFC	; 252
    7fb2:	c2 16       	cp	r12, r18
    7fb4:	2f ef       	ldi	r18, 0xFF	; 255
    7fb6:	d2 06       	cpc	r13, r18
    7fb8:	24 f0       	brlt	.+8      	; 0x7fc2 <vfprintf+0x290>
    7fba:	30 e8       	ldi	r19, 0x80	; 128
    7fbc:	f3 2a       	or	r15, r19
    7fbe:	01 c0       	rjmp	.+2      	; 0x7fc2 <vfprintf+0x290>
    7fc0:	9a 94       	dec	r9
    7fc2:	99 20       	and	r9, r9
    7fc4:	49 f0       	breq	.+18     	; 0x7fd8 <vfprintf+0x2a6>
    7fc6:	e2 e0       	ldi	r30, 0x02	; 2
    7fc8:	f0 e0       	ldi	r31, 0x00	; 0
    7fca:	ec 0f       	add	r30, r28
    7fcc:	fd 1f       	adc	r31, r29
    7fce:	e9 0d       	add	r30, r9
    7fd0:	f1 1d       	adc	r31, r1
    7fd2:	80 81       	ld	r24, Z
    7fd4:	80 33       	cpi	r24, 0x30	; 48
    7fd6:	a1 f3       	breq	.-24     	; 0x7fc0 <vfprintf+0x28e>
    7fd8:	f7 fe       	sbrs	r15, 7
    7fda:	0a c0       	rjmp	.+20     	; 0x7ff0 <vfprintf+0x2be>
    7fdc:	b9 2c       	mov	r11, r9
    7fde:	b3 94       	inc	r11
    7fe0:	89 2d       	mov	r24, r9
    7fe2:	90 e0       	ldi	r25, 0x00	; 0
    7fe4:	c8 16       	cp	r12, r24
    7fe6:	d9 06       	cpc	r13, r25
    7fe8:	14 f0       	brlt	.+4      	; 0x7fee <vfprintf+0x2bc>
    7fea:	99 24       	eor	r9, r9
    7fec:	01 c0       	rjmp	.+2      	; 0x7ff0 <vfprintf+0x2be>
    7fee:	9c 18       	sub	r9, r12
    7ff0:	f7 fc       	sbrc	r15, 7
    7ff2:	03 c0       	rjmp	.+6      	; 0x7ffa <vfprintf+0x2c8>
    7ff4:	25 e0       	ldi	r18, 0x05	; 5
    7ff6:	30 e0       	ldi	r19, 0x00	; 0
    7ff8:	09 c0       	rjmp	.+18     	; 0x800c <vfprintf+0x2da>
    7ffa:	1c 14       	cp	r1, r12
    7ffc:	1d 04       	cpc	r1, r13
    7ffe:	1c f0       	brlt	.+6      	; 0x8006 <vfprintf+0x2d4>
    8000:	21 e0       	ldi	r18, 0x01	; 1
    8002:	30 e0       	ldi	r19, 0x00	; 0
    8004:	03 c0       	rjmp	.+6      	; 0x800c <vfprintf+0x2da>
    8006:	96 01       	movw	r18, r12
    8008:	2f 5f       	subi	r18, 0xFF	; 255
    800a:	3f 4f       	sbci	r19, 0xFF	; 255
    800c:	11 23       	and	r17, r17
    800e:	11 f0       	breq	.+4      	; 0x8014 <vfprintf+0x2e2>
    8010:	2f 5f       	subi	r18, 0xFF	; 255
    8012:	3f 4f       	sbci	r19, 0xFF	; 255
    8014:	99 20       	and	r9, r9
    8016:	29 f0       	breq	.+10     	; 0x8022 <vfprintf+0x2f0>
    8018:	89 2d       	mov	r24, r9
    801a:	90 e0       	ldi	r25, 0x00	; 0
    801c:	01 96       	adiw	r24, 0x01	; 1
    801e:	28 0f       	add	r18, r24
    8020:	39 1f       	adc	r19, r25
    8022:	88 2d       	mov	r24, r8
    8024:	90 e0       	ldi	r25, 0x00	; 0
    8026:	28 17       	cp	r18, r24
    8028:	39 07       	cpc	r19, r25
    802a:	14 f0       	brlt	.+4      	; 0x8030 <vfprintf+0x2fe>
    802c:	88 24       	eor	r8, r8
    802e:	01 c0       	rjmp	.+2      	; 0x8032 <vfprintf+0x300>
    8030:	82 1a       	sub	r8, r18
    8032:	4f 2c       	mov	r4, r15
    8034:	55 24       	eor	r5, r5
    8036:	c2 01       	movw	r24, r4
    8038:	89 70       	andi	r24, 0x09	; 9
    803a:	90 70       	andi	r25, 0x00	; 0
    803c:	89 2b       	or	r24, r25
    803e:	39 f0       	breq	.+14     	; 0x804e <vfprintf+0x31c>
    8040:	08 c0       	rjmp	.+16     	; 0x8052 <vfprintf+0x320>
    8042:	80 e2       	ldi	r24, 0x20	; 32
    8044:	90 e0       	ldi	r25, 0x00	; 0
    8046:	b3 01       	movw	r22, r6
    8048:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    804c:	8a 94       	dec	r8
    804e:	88 20       	and	r8, r8
    8050:	c1 f7       	brne	.-16     	; 0x8042 <vfprintf+0x310>
    8052:	11 23       	and	r17, r17
    8054:	29 f0       	breq	.+10     	; 0x8060 <vfprintf+0x32e>
    8056:	81 2f       	mov	r24, r17
    8058:	90 e0       	ldi	r25, 0x00	; 0
    805a:	b3 01       	movw	r22, r6
    805c:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    8060:	43 fe       	sbrs	r4, 3
    8062:	07 c0       	rjmp	.+14     	; 0x8072 <vfprintf+0x340>
    8064:	08 c0       	rjmp	.+16     	; 0x8076 <vfprintf+0x344>
    8066:	80 e3       	ldi	r24, 0x30	; 48
    8068:	90 e0       	ldi	r25, 0x00	; 0
    806a:	b3 01       	movw	r22, r6
    806c:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    8070:	8a 94       	dec	r8
    8072:	88 20       	and	r8, r8
    8074:	c1 f7       	brne	.-16     	; 0x8066 <vfprintf+0x334>
    8076:	f7 fe       	sbrs	r15, 7
    8078:	46 c0       	rjmp	.+140    	; 0x8106 <vfprintf+0x3d4>
    807a:	86 01       	movw	r16, r12
    807c:	d7 fe       	sbrs	r13, 7
    807e:	02 c0       	rjmp	.+4      	; 0x8084 <vfprintf+0x352>
    8080:	00 e0       	ldi	r16, 0x00	; 0
    8082:	10 e0       	ldi	r17, 0x00	; 0
    8084:	76 01       	movw	r14, r12
    8086:	08 94       	sec
    8088:	e1 1c       	adc	r14, r1
    808a:	f1 1c       	adc	r15, r1
    808c:	e0 1a       	sub	r14, r16
    808e:	f1 0a       	sbc	r15, r17
    8090:	41 e0       	ldi	r20, 0x01	; 1
    8092:	50 e0       	ldi	r21, 0x00	; 0
    8094:	4c 0f       	add	r20, r28
    8096:	5d 1f       	adc	r21, r29
    8098:	e4 0e       	add	r14, r20
    809a:	f5 1e       	adc	r15, r21
    809c:	26 01       	movw	r4, r12
    809e:	4b 18       	sub	r4, r11
    80a0:	51 08       	sbc	r5, r1
    80a2:	89 2d       	mov	r24, r9
    80a4:	90 e0       	ldi	r25, 0x00	; 0
    80a6:	aa 24       	eor	r10, r10
    80a8:	bb 24       	eor	r11, r11
    80aa:	a8 1a       	sub	r10, r24
    80ac:	b9 0a       	sbc	r11, r25
    80ae:	5f ef       	ldi	r21, 0xFF	; 255
    80b0:	0f 3f       	cpi	r16, 0xFF	; 255
    80b2:	15 07       	cpc	r17, r21
    80b4:	29 f4       	brne	.+10     	; 0x80c0 <vfprintf+0x38e>
    80b6:	8e e2       	ldi	r24, 0x2E	; 46
    80b8:	90 e0       	ldi	r25, 0x00	; 0
    80ba:	b3 01       	movw	r22, r6
    80bc:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    80c0:	c0 16       	cp	r12, r16
    80c2:	d1 06       	cpc	r13, r17
    80c4:	34 f0       	brlt	.+12     	; 0x80d2 <vfprintf+0x3a0>
    80c6:	40 16       	cp	r4, r16
    80c8:	51 06       	cpc	r5, r17
    80ca:	1c f4       	brge	.+6      	; 0x80d2 <vfprintf+0x3a0>
    80cc:	f7 01       	movw	r30, r14
    80ce:	80 81       	ld	r24, Z
    80d0:	01 c0       	rjmp	.+2      	; 0x80d4 <vfprintf+0x3a2>
    80d2:	80 e3       	ldi	r24, 0x30	; 48
    80d4:	01 50       	subi	r16, 0x01	; 1
    80d6:	10 40       	sbci	r17, 0x00	; 0
    80d8:	08 94       	sec
    80da:	e1 1c       	adc	r14, r1
    80dc:	f1 1c       	adc	r15, r1
    80de:	0a 15       	cp	r16, r10
    80e0:	1b 05       	cpc	r17, r11
    80e2:	2c f0       	brlt	.+10     	; 0x80ee <vfprintf+0x3bc>
    80e4:	90 e0       	ldi	r25, 0x00	; 0
    80e6:	b3 01       	movw	r22, r6
    80e8:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    80ec:	e0 cf       	rjmp	.-64     	; 0x80ae <vfprintf+0x37c>
    80ee:	0c 15       	cp	r16, r12
    80f0:	1d 05       	cpc	r17, r13
    80f2:	39 f4       	brne	.+14     	; 0x8102 <vfprintf+0x3d0>
    80f4:	9a 81       	ldd	r25, Y+2	; 0x02
    80f6:	96 33       	cpi	r25, 0x36	; 54
    80f8:	18 f4       	brcc	.+6      	; 0x8100 <vfprintf+0x3ce>
    80fa:	95 33       	cpi	r25, 0x35	; 53
    80fc:	11 f4       	brne	.+4      	; 0x8102 <vfprintf+0x3d0>
    80fe:	24 fe       	sbrs	r2, 4
    8100:	81 e3       	ldi	r24, 0x31	; 49
    8102:	90 e0       	ldi	r25, 0x00	; 0
    8104:	4b c0       	rjmp	.+150    	; 0x819c <vfprintf+0x46a>
    8106:	8a 81       	ldd	r24, Y+2	; 0x02
    8108:	81 33       	cpi	r24, 0x31	; 49
    810a:	09 f0       	breq	.+2      	; 0x810e <vfprintf+0x3dc>
    810c:	0f 7e       	andi	r16, 0xEF	; 239
    810e:	90 e0       	ldi	r25, 0x00	; 0
    8110:	b3 01       	movw	r22, r6
    8112:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    8116:	99 20       	and	r9, r9
    8118:	a1 f0       	breq	.+40     	; 0x8142 <vfprintf+0x410>
    811a:	8e e2       	ldi	r24, 0x2E	; 46
    811c:	90 e0       	ldi	r25, 0x00	; 0
    811e:	b3 01       	movw	r22, r6
    8120:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    8124:	12 e0       	ldi	r17, 0x02	; 2
    8126:	e1 e0       	ldi	r30, 0x01	; 1
    8128:	f0 e0       	ldi	r31, 0x00	; 0
    812a:	ec 0f       	add	r30, r28
    812c:	fd 1f       	adc	r31, r29
    812e:	e1 0f       	add	r30, r17
    8130:	f1 1d       	adc	r31, r1
    8132:	1f 5f       	subi	r17, 0xFF	; 255
    8134:	80 81       	ld	r24, Z
    8136:	90 e0       	ldi	r25, 0x00	; 0
    8138:	b3 01       	movw	r22, r6
    813a:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    813e:	9a 94       	dec	r9
    8140:	91 f7       	brne	.-28     	; 0x8126 <vfprintf+0x3f4>
    8142:	44 fc       	sbrc	r4, 4
    8144:	03 c0       	rjmp	.+6      	; 0x814c <vfprintf+0x41a>
    8146:	85 e6       	ldi	r24, 0x65	; 101
    8148:	90 e0       	ldi	r25, 0x00	; 0
    814a:	02 c0       	rjmp	.+4      	; 0x8150 <vfprintf+0x41e>
    814c:	85 e4       	ldi	r24, 0x45	; 69
    814e:	90 e0       	ldi	r25, 0x00	; 0
    8150:	b3 01       	movw	r22, r6
    8152:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    8156:	d7 fc       	sbrc	r13, 7
    8158:	05 c0       	rjmp	.+10     	; 0x8164 <vfprintf+0x432>
    815a:	c1 14       	cp	r12, r1
    815c:	d1 04       	cpc	r13, r1
    815e:	41 f4       	brne	.+16     	; 0x8170 <vfprintf+0x43e>
    8160:	04 ff       	sbrs	r16, 4
    8162:	06 c0       	rjmp	.+12     	; 0x8170 <vfprintf+0x43e>
    8164:	d0 94       	com	r13
    8166:	c1 94       	neg	r12
    8168:	d1 08       	sbc	r13, r1
    816a:	d3 94       	inc	r13
    816c:	8d e2       	ldi	r24, 0x2D	; 45
    816e:	01 c0       	rjmp	.+2      	; 0x8172 <vfprintf+0x440>
    8170:	8b e2       	ldi	r24, 0x2B	; 43
    8172:	90 e0       	ldi	r25, 0x00	; 0
    8174:	b3 01       	movw	r22, r6
    8176:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    817a:	80 e3       	ldi	r24, 0x30	; 48
    817c:	05 c0       	rjmp	.+10     	; 0x8188 <vfprintf+0x456>
    817e:	8f 5f       	subi	r24, 0xFF	; 255
    8180:	26 ef       	ldi	r18, 0xF6	; 246
    8182:	3f ef       	ldi	r19, 0xFF	; 255
    8184:	c2 0e       	add	r12, r18
    8186:	d3 1e       	adc	r13, r19
    8188:	3a e0       	ldi	r19, 0x0A	; 10
    818a:	c3 16       	cp	r12, r19
    818c:	d1 04       	cpc	r13, r1
    818e:	bc f7       	brge	.-18     	; 0x817e <vfprintf+0x44c>
    8190:	90 e0       	ldi	r25, 0x00	; 0
    8192:	b3 01       	movw	r22, r6
    8194:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    8198:	c6 01       	movw	r24, r12
    819a:	c0 96       	adiw	r24, 0x30	; 48
    819c:	b3 01       	movw	r22, r6
    819e:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    81a2:	cc 84       	ldd	r12, Y+12	; 0x0c
    81a4:	dd 84       	ldd	r13, Y+13	; 0x0d
    81a6:	52 c1       	rjmp	.+676    	; 0x844c <vfprintf+0x71a>
    81a8:	93 36       	cpi	r25, 0x63	; 99
    81aa:	31 f0       	breq	.+12     	; 0x81b8 <vfprintf+0x486>
    81ac:	93 37       	cpi	r25, 0x73	; 115
    81ae:	99 f0       	breq	.+38     	; 0x81d6 <vfprintf+0x4a4>
    81b0:	93 35       	cpi	r25, 0x53	; 83
    81b2:	09 f0       	breq	.+2      	; 0x81b6 <vfprintf+0x484>
    81b4:	59 c0       	rjmp	.+178    	; 0x8268 <vfprintf+0x536>
    81b6:	23 c0       	rjmp	.+70     	; 0x81fe <vfprintf+0x4cc>
    81b8:	f6 01       	movw	r30, r12
    81ba:	80 81       	ld	r24, Z
    81bc:	89 83       	std	Y+1, r24	; 0x01
    81be:	5e 01       	movw	r10, r28
    81c0:	08 94       	sec
    81c2:	a1 1c       	adc	r10, r1
    81c4:	b1 1c       	adc	r11, r1
    81c6:	22 e0       	ldi	r18, 0x02	; 2
    81c8:	30 e0       	ldi	r19, 0x00	; 0
    81ca:	c2 0e       	add	r12, r18
    81cc:	d3 1e       	adc	r13, r19
    81ce:	21 e0       	ldi	r18, 0x01	; 1
    81d0:	e2 2e       	mov	r14, r18
    81d2:	f1 2c       	mov	r15, r1
    81d4:	12 c0       	rjmp	.+36     	; 0x81fa <vfprintf+0x4c8>
    81d6:	f6 01       	movw	r30, r12
    81d8:	a0 80       	ld	r10, Z
    81da:	b1 80       	ldd	r11, Z+1	; 0x01
    81dc:	16 fd       	sbrc	r17, 6
    81de:	03 c0       	rjmp	.+6      	; 0x81e6 <vfprintf+0x4b4>
    81e0:	6f ef       	ldi	r22, 0xFF	; 255
    81e2:	7f ef       	ldi	r23, 0xFF	; 255
    81e4:	02 c0       	rjmp	.+4      	; 0x81ea <vfprintf+0x4b8>
    81e6:	69 2d       	mov	r22, r9
    81e8:	70 e0       	ldi	r23, 0x00	; 0
    81ea:	22 e0       	ldi	r18, 0x02	; 2
    81ec:	30 e0       	ldi	r19, 0x00	; 0
    81ee:	c2 0e       	add	r12, r18
    81f0:	d3 1e       	adc	r13, r19
    81f2:	c5 01       	movw	r24, r10
    81f4:	0e 94 7d 49 	call	0x92fa	; 0x92fa <strnlen>
    81f8:	7c 01       	movw	r14, r24
    81fa:	1f 77       	andi	r17, 0x7F	; 127
    81fc:	13 c0       	rjmp	.+38     	; 0x8224 <vfprintf+0x4f2>
    81fe:	f6 01       	movw	r30, r12
    8200:	a0 80       	ld	r10, Z
    8202:	b1 80       	ldd	r11, Z+1	; 0x01
    8204:	16 fd       	sbrc	r17, 6
    8206:	03 c0       	rjmp	.+6      	; 0x820e <vfprintf+0x4dc>
    8208:	6f ef       	ldi	r22, 0xFF	; 255
    820a:	7f ef       	ldi	r23, 0xFF	; 255
    820c:	02 c0       	rjmp	.+4      	; 0x8212 <vfprintf+0x4e0>
    820e:	69 2d       	mov	r22, r9
    8210:	70 e0       	ldi	r23, 0x00	; 0
    8212:	22 e0       	ldi	r18, 0x02	; 2
    8214:	30 e0       	ldi	r19, 0x00	; 0
    8216:	c2 0e       	add	r12, r18
    8218:	d3 1e       	adc	r13, r19
    821a:	c5 01       	movw	r24, r10
    821c:	0e 94 72 49 	call	0x92e4	; 0x92e4 <strnlen_P>
    8220:	7c 01       	movw	r14, r24
    8222:	10 68       	ori	r17, 0x80	; 128
    8224:	13 ff       	sbrs	r17, 3
    8226:	07 c0       	rjmp	.+14     	; 0x8236 <vfprintf+0x504>
    8228:	1b c0       	rjmp	.+54     	; 0x8260 <vfprintf+0x52e>
    822a:	80 e2       	ldi	r24, 0x20	; 32
    822c:	90 e0       	ldi	r25, 0x00	; 0
    822e:	b3 01       	movw	r22, r6
    8230:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    8234:	8a 94       	dec	r8
    8236:	88 2d       	mov	r24, r8
    8238:	90 e0       	ldi	r25, 0x00	; 0
    823a:	e8 16       	cp	r14, r24
    823c:	f9 06       	cpc	r15, r25
    823e:	a8 f3       	brcs	.-22     	; 0x822a <vfprintf+0x4f8>
    8240:	0f c0       	rjmp	.+30     	; 0x8260 <vfprintf+0x52e>
    8242:	f5 01       	movw	r30, r10
    8244:	17 fd       	sbrc	r17, 7
    8246:	85 91       	lpm	r24, Z+
    8248:	17 ff       	sbrs	r17, 7
    824a:	81 91       	ld	r24, Z+
    824c:	5f 01       	movw	r10, r30
    824e:	90 e0       	ldi	r25, 0x00	; 0
    8250:	b3 01       	movw	r22, r6
    8252:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    8256:	81 10       	cpse	r8, r1
    8258:	8a 94       	dec	r8
    825a:	08 94       	sec
    825c:	e1 08       	sbc	r14, r1
    825e:	f1 08       	sbc	r15, r1
    8260:	e1 14       	cp	r14, r1
    8262:	f1 04       	cpc	r15, r1
    8264:	71 f7       	brne	.-36     	; 0x8242 <vfprintf+0x510>
    8266:	f2 c0       	rjmp	.+484    	; 0x844c <vfprintf+0x71a>
    8268:	94 36       	cpi	r25, 0x64	; 100
    826a:	11 f0       	breq	.+4      	; 0x8270 <vfprintf+0x53e>
    826c:	99 36       	cpi	r25, 0x69	; 105
    826e:	89 f5       	brne	.+98     	; 0x82d2 <vfprintf+0x5a0>
    8270:	17 ff       	sbrs	r17, 7
    8272:	08 c0       	rjmp	.+16     	; 0x8284 <vfprintf+0x552>
    8274:	f6 01       	movw	r30, r12
    8276:	20 81       	ld	r18, Z
    8278:	31 81       	ldd	r19, Z+1	; 0x01
    827a:	42 81       	ldd	r20, Z+2	; 0x02
    827c:	53 81       	ldd	r21, Z+3	; 0x03
    827e:	84 e0       	ldi	r24, 0x04	; 4
    8280:	90 e0       	ldi	r25, 0x00	; 0
    8282:	0a c0       	rjmp	.+20     	; 0x8298 <vfprintf+0x566>
    8284:	f6 01       	movw	r30, r12
    8286:	80 81       	ld	r24, Z
    8288:	91 81       	ldd	r25, Z+1	; 0x01
    828a:	9c 01       	movw	r18, r24
    828c:	44 27       	eor	r20, r20
    828e:	37 fd       	sbrc	r19, 7
    8290:	40 95       	com	r20
    8292:	54 2f       	mov	r21, r20
    8294:	82 e0       	ldi	r24, 0x02	; 2
    8296:	90 e0       	ldi	r25, 0x00	; 0
    8298:	c8 0e       	add	r12, r24
    829a:	d9 1e       	adc	r13, r25
    829c:	9f e6       	ldi	r25, 0x6F	; 111
    829e:	f9 2e       	mov	r15, r25
    82a0:	f1 22       	and	r15, r17
    82a2:	57 ff       	sbrs	r21, 7
    82a4:	09 c0       	rjmp	.+18     	; 0x82b8 <vfprintf+0x586>
    82a6:	50 95       	com	r21
    82a8:	40 95       	com	r20
    82aa:	30 95       	com	r19
    82ac:	21 95       	neg	r18
    82ae:	3f 4f       	sbci	r19, 0xFF	; 255
    82b0:	4f 4f       	sbci	r20, 0xFF	; 255
    82b2:	5f 4f       	sbci	r21, 0xFF	; 255
    82b4:	90 e8       	ldi	r25, 0x80	; 128
    82b6:	f9 2a       	or	r15, r25
    82b8:	ca 01       	movw	r24, r20
    82ba:	b9 01       	movw	r22, r18
    82bc:	ae 01       	movw	r20, r28
    82be:	4f 5f       	subi	r20, 0xFF	; 255
    82c0:	5f 4f       	sbci	r21, 0xFF	; 255
    82c2:	2a e0       	ldi	r18, 0x0A	; 10
    82c4:	30 e0       	ldi	r19, 0x00	; 0
    82c6:	0e 94 17 4a 	call	0x942e	; 0x942e <__ultoa_invert>
    82ca:	e8 2e       	mov	r14, r24
    82cc:	e8 89       	ldd	r30, Y+16	; 0x10
    82ce:	ee 1a       	sub	r14, r30
    82d0:	41 c0       	rjmp	.+130    	; 0x8354 <vfprintf+0x622>
    82d2:	95 37       	cpi	r25, 0x75	; 117
    82d4:	21 f4       	brne	.+8      	; 0x82de <vfprintf+0x5ac>
    82d6:	1f 7e       	andi	r17, 0xEF	; 239
    82d8:	2a e0       	ldi	r18, 0x0A	; 10
    82da:	30 e0       	ldi	r19, 0x00	; 0
    82dc:	1c c0       	rjmp	.+56     	; 0x8316 <vfprintf+0x5e4>
    82de:	19 7f       	andi	r17, 0xF9	; 249
    82e0:	9f 36       	cpi	r25, 0x6F	; 111
    82e2:	61 f0       	breq	.+24     	; 0x82fc <vfprintf+0x5ca>
    82e4:	90 37       	cpi	r25, 0x70	; 112
    82e6:	20 f4       	brcc	.+8      	; 0x82f0 <vfprintf+0x5be>
    82e8:	98 35       	cpi	r25, 0x58	; 88
    82ea:	09 f0       	breq	.+2      	; 0x82ee <vfprintf+0x5bc>
    82ec:	b2 c0       	rjmp	.+356    	; 0x8452 <vfprintf+0x720>
    82ee:	0f c0       	rjmp	.+30     	; 0x830e <vfprintf+0x5dc>
    82f0:	90 37       	cpi	r25, 0x70	; 112
    82f2:	39 f0       	breq	.+14     	; 0x8302 <vfprintf+0x5d0>
    82f4:	98 37       	cpi	r25, 0x78	; 120
    82f6:	09 f0       	breq	.+2      	; 0x82fa <vfprintf+0x5c8>
    82f8:	ac c0       	rjmp	.+344    	; 0x8452 <vfprintf+0x720>
    82fa:	04 c0       	rjmp	.+8      	; 0x8304 <vfprintf+0x5d2>
    82fc:	28 e0       	ldi	r18, 0x08	; 8
    82fe:	30 e0       	ldi	r19, 0x00	; 0
    8300:	0a c0       	rjmp	.+20     	; 0x8316 <vfprintf+0x5e4>
    8302:	10 61       	ori	r17, 0x10	; 16
    8304:	14 fd       	sbrc	r17, 4
    8306:	14 60       	ori	r17, 0x04	; 4
    8308:	20 e1       	ldi	r18, 0x10	; 16
    830a:	30 e0       	ldi	r19, 0x00	; 0
    830c:	04 c0       	rjmp	.+8      	; 0x8316 <vfprintf+0x5e4>
    830e:	14 fd       	sbrc	r17, 4
    8310:	16 60       	ori	r17, 0x06	; 6
    8312:	20 e1       	ldi	r18, 0x10	; 16
    8314:	32 e0       	ldi	r19, 0x02	; 2
    8316:	17 ff       	sbrs	r17, 7
    8318:	08 c0       	rjmp	.+16     	; 0x832a <vfprintf+0x5f8>
    831a:	f6 01       	movw	r30, r12
    831c:	60 81       	ld	r22, Z
    831e:	71 81       	ldd	r23, Z+1	; 0x01
    8320:	82 81       	ldd	r24, Z+2	; 0x02
    8322:	93 81       	ldd	r25, Z+3	; 0x03
    8324:	44 e0       	ldi	r20, 0x04	; 4
    8326:	50 e0       	ldi	r21, 0x00	; 0
    8328:	08 c0       	rjmp	.+16     	; 0x833a <vfprintf+0x608>
    832a:	f6 01       	movw	r30, r12
    832c:	80 81       	ld	r24, Z
    832e:	91 81       	ldd	r25, Z+1	; 0x01
    8330:	bc 01       	movw	r22, r24
    8332:	80 e0       	ldi	r24, 0x00	; 0
    8334:	90 e0       	ldi	r25, 0x00	; 0
    8336:	42 e0       	ldi	r20, 0x02	; 2
    8338:	50 e0       	ldi	r21, 0x00	; 0
    833a:	c4 0e       	add	r12, r20
    833c:	d5 1e       	adc	r13, r21
    833e:	ae 01       	movw	r20, r28
    8340:	4f 5f       	subi	r20, 0xFF	; 255
    8342:	5f 4f       	sbci	r21, 0xFF	; 255
    8344:	0e 94 17 4a 	call	0x942e	; 0x942e <__ultoa_invert>
    8348:	e8 2e       	mov	r14, r24
    834a:	58 89       	ldd	r21, Y+16	; 0x10
    834c:	e5 1a       	sub	r14, r21
    834e:	8f e7       	ldi	r24, 0x7F	; 127
    8350:	f8 2e       	mov	r15, r24
    8352:	f1 22       	and	r15, r17
    8354:	f6 fe       	sbrs	r15, 6
    8356:	0b c0       	rjmp	.+22     	; 0x836e <vfprintf+0x63c>
    8358:	8e ef       	ldi	r24, 0xFE	; 254
    835a:	f8 22       	and	r15, r24
    835c:	e9 14       	cp	r14, r9
    835e:	38 f4       	brcc	.+14     	; 0x836e <vfprintf+0x63c>
    8360:	f4 fe       	sbrs	r15, 4
    8362:	07 c0       	rjmp	.+14     	; 0x8372 <vfprintf+0x640>
    8364:	f2 fc       	sbrc	r15, 2
    8366:	05 c0       	rjmp	.+10     	; 0x8372 <vfprintf+0x640>
    8368:	9f ee       	ldi	r25, 0xEF	; 239
    836a:	f9 22       	and	r15, r25
    836c:	02 c0       	rjmp	.+4      	; 0x8372 <vfprintf+0x640>
    836e:	1e 2d       	mov	r17, r14
    8370:	01 c0       	rjmp	.+2      	; 0x8374 <vfprintf+0x642>
    8372:	19 2d       	mov	r17, r9
    8374:	f4 fe       	sbrs	r15, 4
    8376:	0d c0       	rjmp	.+26     	; 0x8392 <vfprintf+0x660>
    8378:	fe 01       	movw	r30, r28
    837a:	ee 0d       	add	r30, r14
    837c:	f1 1d       	adc	r31, r1
    837e:	80 81       	ld	r24, Z
    8380:	80 33       	cpi	r24, 0x30	; 48
    8382:	19 f4       	brne	.+6      	; 0x838a <vfprintf+0x658>
    8384:	e9 ee       	ldi	r30, 0xE9	; 233
    8386:	fe 22       	and	r15, r30
    8388:	08 c0       	rjmp	.+16     	; 0x839a <vfprintf+0x668>
    838a:	1f 5f       	subi	r17, 0xFF	; 255
    838c:	f2 fe       	sbrs	r15, 2
    838e:	05 c0       	rjmp	.+10     	; 0x839a <vfprintf+0x668>
    8390:	03 c0       	rjmp	.+6      	; 0x8398 <vfprintf+0x666>
    8392:	8f 2d       	mov	r24, r15
    8394:	86 78       	andi	r24, 0x86	; 134
    8396:	09 f0       	breq	.+2      	; 0x839a <vfprintf+0x668>
    8398:	1f 5f       	subi	r17, 0xFF	; 255
    839a:	0f 2d       	mov	r16, r15
    839c:	f3 fc       	sbrc	r15, 3
    839e:	14 c0       	rjmp	.+40     	; 0x83c8 <vfprintf+0x696>
    83a0:	f0 fe       	sbrs	r15, 0
    83a2:	0f c0       	rjmp	.+30     	; 0x83c2 <vfprintf+0x690>
    83a4:	18 15       	cp	r17, r8
    83a6:	10 f0       	brcs	.+4      	; 0x83ac <vfprintf+0x67a>
    83a8:	9e 2c       	mov	r9, r14
    83aa:	0b c0       	rjmp	.+22     	; 0x83c2 <vfprintf+0x690>
    83ac:	9e 2c       	mov	r9, r14
    83ae:	98 0c       	add	r9, r8
    83b0:	91 1a       	sub	r9, r17
    83b2:	18 2d       	mov	r17, r8
    83b4:	06 c0       	rjmp	.+12     	; 0x83c2 <vfprintf+0x690>
    83b6:	80 e2       	ldi	r24, 0x20	; 32
    83b8:	90 e0       	ldi	r25, 0x00	; 0
    83ba:	b3 01       	movw	r22, r6
    83bc:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    83c0:	1f 5f       	subi	r17, 0xFF	; 255
    83c2:	18 15       	cp	r17, r8
    83c4:	c0 f3       	brcs	.-16     	; 0x83b6 <vfprintf+0x684>
    83c6:	04 c0       	rjmp	.+8      	; 0x83d0 <vfprintf+0x69e>
    83c8:	18 15       	cp	r17, r8
    83ca:	10 f4       	brcc	.+4      	; 0x83d0 <vfprintf+0x69e>
    83cc:	81 1a       	sub	r8, r17
    83ce:	01 c0       	rjmp	.+2      	; 0x83d2 <vfprintf+0x6a0>
    83d0:	88 24       	eor	r8, r8
    83d2:	04 ff       	sbrs	r16, 4
    83d4:	0f c0       	rjmp	.+30     	; 0x83f4 <vfprintf+0x6c2>
    83d6:	80 e3       	ldi	r24, 0x30	; 48
    83d8:	90 e0       	ldi	r25, 0x00	; 0
    83da:	b3 01       	movw	r22, r6
    83dc:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    83e0:	02 ff       	sbrs	r16, 2
    83e2:	1d c0       	rjmp	.+58     	; 0x841e <vfprintf+0x6ec>
    83e4:	01 fd       	sbrc	r16, 1
    83e6:	03 c0       	rjmp	.+6      	; 0x83ee <vfprintf+0x6bc>
    83e8:	88 e7       	ldi	r24, 0x78	; 120
    83ea:	90 e0       	ldi	r25, 0x00	; 0
    83ec:	0e c0       	rjmp	.+28     	; 0x840a <vfprintf+0x6d8>
    83ee:	88 e5       	ldi	r24, 0x58	; 88
    83f0:	90 e0       	ldi	r25, 0x00	; 0
    83f2:	0b c0       	rjmp	.+22     	; 0x840a <vfprintf+0x6d8>
    83f4:	80 2f       	mov	r24, r16
    83f6:	86 78       	andi	r24, 0x86	; 134
    83f8:	91 f0       	breq	.+36     	; 0x841e <vfprintf+0x6ec>
    83fa:	01 ff       	sbrs	r16, 1
    83fc:	02 c0       	rjmp	.+4      	; 0x8402 <vfprintf+0x6d0>
    83fe:	8b e2       	ldi	r24, 0x2B	; 43
    8400:	01 c0       	rjmp	.+2      	; 0x8404 <vfprintf+0x6d2>
    8402:	80 e2       	ldi	r24, 0x20	; 32
    8404:	f7 fc       	sbrc	r15, 7
    8406:	8d e2       	ldi	r24, 0x2D	; 45
    8408:	90 e0       	ldi	r25, 0x00	; 0
    840a:	b3 01       	movw	r22, r6
    840c:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    8410:	06 c0       	rjmp	.+12     	; 0x841e <vfprintf+0x6ec>
    8412:	80 e3       	ldi	r24, 0x30	; 48
    8414:	90 e0       	ldi	r25, 0x00	; 0
    8416:	b3 01       	movw	r22, r6
    8418:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    841c:	9a 94       	dec	r9
    841e:	e9 14       	cp	r14, r9
    8420:	c0 f3       	brcs	.-16     	; 0x8412 <vfprintf+0x6e0>
    8422:	ea 94       	dec	r14
    8424:	e1 e0       	ldi	r30, 0x01	; 1
    8426:	f0 e0       	ldi	r31, 0x00	; 0
    8428:	ec 0f       	add	r30, r28
    842a:	fd 1f       	adc	r31, r29
    842c:	ee 0d       	add	r30, r14
    842e:	f1 1d       	adc	r31, r1
    8430:	80 81       	ld	r24, Z
    8432:	90 e0       	ldi	r25, 0x00	; 0
    8434:	b3 01       	movw	r22, r6
    8436:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    843a:	ee 20       	and	r14, r14
    843c:	91 f7       	brne	.-28     	; 0x8422 <vfprintf+0x6f0>
    843e:	06 c0       	rjmp	.+12     	; 0x844c <vfprintf+0x71a>
    8440:	80 e2       	ldi	r24, 0x20	; 32
    8442:	90 e0       	ldi	r25, 0x00	; 0
    8444:	b3 01       	movw	r22, r6
    8446:	0e 94 c8 49 	call	0x9390	; 0x9390 <fputc>
    844a:	8a 94       	dec	r8
    844c:	88 20       	and	r8, r8
    844e:	c1 f7       	brne	.-16     	; 0x8440 <vfprintf+0x70e>
    8450:	99 cc       	rjmp	.-1742   	; 0x7d84 <vfprintf+0x52>
    8452:	f3 01       	movw	r30, r6
    8454:	66 81       	ldd	r22, Z+6	; 0x06
    8456:	77 81       	ldd	r23, Z+7	; 0x07
    8458:	cb 01       	movw	r24, r22
    845a:	61 96       	adiw	r28, 0x11	; 17
    845c:	cd bf       	out	0x3d, r28	; 61
    845e:	de bf       	out	0x3e, r29	; 62
    8460:	cf 91       	pop	r28
    8462:	df 91       	pop	r29
    8464:	1f 91       	pop	r17
    8466:	0f 91       	pop	r16
    8468:	ff 90       	pop	r15
    846a:	ef 90       	pop	r14
    846c:	df 90       	pop	r13
    846e:	cf 90       	pop	r12
    8470:	bf 90       	pop	r11
    8472:	af 90       	pop	r10
    8474:	9f 90       	pop	r9
    8476:	8f 90       	pop	r8
    8478:	7f 90       	pop	r7
    847a:	6f 90       	pop	r6
    847c:	5f 90       	pop	r5
    847e:	4f 90       	pop	r4
    8480:	3f 90       	pop	r3
    8482:	2f 90       	pop	r2
    8484:	08 95       	ret

00008486 <__subsf3>:
    8486:	50 58       	subi	r21, 0x80	; 128

00008488 <__addsf3>:
    8488:	bb 27       	eor	r27, r27
    848a:	aa 27       	eor	r26, r26
    848c:	0e d0       	rcall	.+28     	; 0x84aa <__addsf3x>
    848e:	29 c2       	rjmp	.+1106   	; 0x88e2 <__fp_round>
    8490:	f2 d1       	rcall	.+996    	; 0x8876 <__fp_pscA>
    8492:	30 f0       	brcs	.+12     	; 0x84a0 <__addsf3+0x18>
    8494:	f7 d1       	rcall	.+1006   	; 0x8884 <__fp_pscB>
    8496:	20 f0       	brcs	.+8      	; 0x84a0 <__addsf3+0x18>
    8498:	31 f4       	brne	.+12     	; 0x84a6 <__addsf3+0x1e>
    849a:	9f 3f       	cpi	r25, 0xFF	; 255
    849c:	11 f4       	brne	.+4      	; 0x84a2 <__addsf3+0x1a>
    849e:	1e f4       	brtc	.+6      	; 0x84a6 <__addsf3+0x1e>
    84a0:	c2 c1       	rjmp	.+900    	; 0x8826 <__fp_nan>
    84a2:	0e f4       	brtc	.+2      	; 0x84a6 <__addsf3+0x1e>
    84a4:	e0 95       	com	r30
    84a6:	e7 fb       	bst	r30, 7
    84a8:	8f c1       	rjmp	.+798    	; 0x87c8 <__fp_inf>

000084aa <__addsf3x>:
    84aa:	e9 2f       	mov	r30, r25
    84ac:	3c d2       	rcall	.+1144   	; 0x8926 <__fp_split3>
    84ae:	80 f3       	brcs	.-32     	; 0x8490 <__addsf3+0x8>
    84b0:	ba 17       	cp	r27, r26
    84b2:	62 07       	cpc	r22, r18
    84b4:	73 07       	cpc	r23, r19
    84b6:	84 07       	cpc	r24, r20
    84b8:	95 07       	cpc	r25, r21
    84ba:	18 f0       	brcs	.+6      	; 0x84c2 <__addsf3x+0x18>
    84bc:	71 f4       	brne	.+28     	; 0x84da <__addsf3x+0x30>
    84be:	9e f5       	brtc	.+102    	; 0x8526 <__addsf3x+0x7c>
    84c0:	6b c2       	rjmp	.+1238   	; 0x8998 <__fp_zero>
    84c2:	0e f4       	brtc	.+2      	; 0x84c6 <__addsf3x+0x1c>
    84c4:	e0 95       	com	r30
    84c6:	0b 2e       	mov	r0, r27
    84c8:	ba 2f       	mov	r27, r26
    84ca:	a0 2d       	mov	r26, r0
    84cc:	0b 01       	movw	r0, r22
    84ce:	b9 01       	movw	r22, r18
    84d0:	90 01       	movw	r18, r0
    84d2:	0c 01       	movw	r0, r24
    84d4:	ca 01       	movw	r24, r20
    84d6:	a0 01       	movw	r20, r0
    84d8:	11 24       	eor	r1, r1
    84da:	ff 27       	eor	r31, r31
    84dc:	59 1b       	sub	r21, r25
    84de:	99 f0       	breq	.+38     	; 0x8506 <__addsf3x+0x5c>
    84e0:	59 3f       	cpi	r21, 0xF9	; 249
    84e2:	50 f4       	brcc	.+20     	; 0x84f8 <__addsf3x+0x4e>
    84e4:	50 3e       	cpi	r21, 0xE0	; 224
    84e6:	68 f1       	brcs	.+90     	; 0x8542 <__addsf3x+0x98>
    84e8:	1a 16       	cp	r1, r26
    84ea:	f0 40       	sbci	r31, 0x00	; 0
    84ec:	a2 2f       	mov	r26, r18
    84ee:	23 2f       	mov	r18, r19
    84f0:	34 2f       	mov	r19, r20
    84f2:	44 27       	eor	r20, r20
    84f4:	58 5f       	subi	r21, 0xF8	; 248
    84f6:	f3 cf       	rjmp	.-26     	; 0x84de <__addsf3x+0x34>
    84f8:	46 95       	lsr	r20
    84fa:	37 95       	ror	r19
    84fc:	27 95       	ror	r18
    84fe:	a7 95       	ror	r26
    8500:	f0 40       	sbci	r31, 0x00	; 0
    8502:	53 95       	inc	r21
    8504:	c9 f7       	brne	.-14     	; 0x84f8 <__addsf3x+0x4e>
    8506:	7e f4       	brtc	.+30     	; 0x8526 <__addsf3x+0x7c>
    8508:	1f 16       	cp	r1, r31
    850a:	ba 0b       	sbc	r27, r26
    850c:	62 0b       	sbc	r22, r18
    850e:	73 0b       	sbc	r23, r19
    8510:	84 0b       	sbc	r24, r20
    8512:	ba f0       	brmi	.+46     	; 0x8542 <__addsf3x+0x98>
    8514:	91 50       	subi	r25, 0x01	; 1
    8516:	a1 f0       	breq	.+40     	; 0x8540 <__addsf3x+0x96>
    8518:	ff 0f       	add	r31, r31
    851a:	bb 1f       	adc	r27, r27
    851c:	66 1f       	adc	r22, r22
    851e:	77 1f       	adc	r23, r23
    8520:	88 1f       	adc	r24, r24
    8522:	c2 f7       	brpl	.-16     	; 0x8514 <__addsf3x+0x6a>
    8524:	0e c0       	rjmp	.+28     	; 0x8542 <__addsf3x+0x98>
    8526:	ba 0f       	add	r27, r26
    8528:	62 1f       	adc	r22, r18
    852a:	73 1f       	adc	r23, r19
    852c:	84 1f       	adc	r24, r20
    852e:	48 f4       	brcc	.+18     	; 0x8542 <__addsf3x+0x98>
    8530:	87 95       	ror	r24
    8532:	77 95       	ror	r23
    8534:	67 95       	ror	r22
    8536:	b7 95       	ror	r27
    8538:	f7 95       	ror	r31
    853a:	9e 3f       	cpi	r25, 0xFE	; 254
    853c:	08 f0       	brcs	.+2      	; 0x8540 <__addsf3x+0x96>
    853e:	b3 cf       	rjmp	.-154    	; 0x84a6 <__addsf3+0x1e>
    8540:	93 95       	inc	r25
    8542:	88 0f       	add	r24, r24
    8544:	08 f0       	brcs	.+2      	; 0x8548 <__addsf3x+0x9e>
    8546:	99 27       	eor	r25, r25
    8548:	ee 0f       	add	r30, r30
    854a:	97 95       	ror	r25
    854c:	87 95       	ror	r24
    854e:	08 95       	ret

00008550 <atan>:
    8550:	df 93       	push	r29
    8552:	dd 27       	eor	r29, r29
    8554:	b9 2f       	mov	r27, r25
    8556:	bf 77       	andi	r27, 0x7F	; 127
    8558:	40 e8       	ldi	r20, 0x80	; 128
    855a:	5f e3       	ldi	r21, 0x3F	; 63
    855c:	16 16       	cp	r1, r22
    855e:	17 06       	cpc	r1, r23
    8560:	48 07       	cpc	r20, r24
    8562:	5b 07       	cpc	r21, r27
    8564:	10 f4       	brcc	.+4      	; 0x856a <atan+0x1a>
    8566:	d9 2f       	mov	r29, r25
    8568:	83 d2       	rcall	.+1286   	; 0x8a70 <inverse>
    856a:	9f 93       	push	r25
    856c:	8f 93       	push	r24
    856e:	7f 93       	push	r23
    8570:	6f 93       	push	r22
    8572:	96 d3       	rcall	.+1836   	; 0x8ca0 <square>
    8574:	e8 ee       	ldi	r30, 0xE8	; 232
    8576:	f1 e0       	ldi	r31, 0x01	; 1
    8578:	59 d1       	rcall	.+690    	; 0x882c <__fp_powser>
    857a:	b3 d1       	rcall	.+870    	; 0x88e2 <__fp_round>
    857c:	2f 91       	pop	r18
    857e:	3f 91       	pop	r19
    8580:	4f 91       	pop	r20
    8582:	5f 91       	pop	r21
    8584:	ee d2       	rcall	.+1500   	; 0x8b62 <__mulsf3x>
    8586:	dd 23       	and	r29, r29
    8588:	49 f0       	breq	.+18     	; 0x859c <atan+0x4c>
    858a:	90 58       	subi	r25, 0x80	; 128
    858c:	a2 ea       	ldi	r26, 0xA2	; 162
    858e:	2a ed       	ldi	r18, 0xDA	; 218
    8590:	3f e0       	ldi	r19, 0x0F	; 15
    8592:	49 ec       	ldi	r20, 0xC9	; 201
    8594:	5f e3       	ldi	r21, 0x3F	; 63
    8596:	d0 78       	andi	r29, 0x80	; 128
    8598:	5d 27       	eor	r21, r29
    859a:	87 df       	rcall	.-242    	; 0x84aa <__addsf3x>
    859c:	df 91       	pop	r29
    859e:	a1 c1       	rjmp	.+834    	; 0x88e2 <__fp_round>

000085a0 <ceil>:
    85a0:	e4 d1       	rcall	.+968    	; 0x896a <__fp_trunc>
    85a2:	80 f0       	brcs	.+32     	; 0x85c4 <ceil+0x24>
    85a4:	9f 37       	cpi	r25, 0x7F	; 127
    85a6:	40 f4       	brcc	.+16     	; 0x85b8 <ceil+0x18>
    85a8:	91 11       	cpse	r25, r1
    85aa:	0e f4       	brtc	.+2      	; 0x85ae <ceil+0xe>
    85ac:	f6 c1       	rjmp	.+1004   	; 0x899a <__fp_szero>
    85ae:	60 e0       	ldi	r22, 0x00	; 0
    85b0:	70 e0       	ldi	r23, 0x00	; 0
    85b2:	80 e8       	ldi	r24, 0x80	; 128
    85b4:	9f e3       	ldi	r25, 0x3F	; 63
    85b6:	08 95       	ret
    85b8:	26 f0       	brts	.+8      	; 0x85c2 <ceil+0x22>
    85ba:	1b 16       	cp	r1, r27
    85bc:	61 1d       	adc	r22, r1
    85be:	71 1d       	adc	r23, r1
    85c0:	81 1d       	adc	r24, r1
    85c2:	08 c1       	rjmp	.+528    	; 0x87d4 <__fp_mintl>
    85c4:	22 c1       	rjmp	.+580    	; 0x880a <__fp_mpack>

000085c6 <__cmpsf2>:
    85c6:	dc d0       	rcall	.+440    	; 0x8780 <__fp_cmp>
    85c8:	08 f4       	brcc	.+2      	; 0x85cc <__cmpsf2+0x6>
    85ca:	81 e0       	ldi	r24, 0x01	; 1
    85cc:	08 95       	ret

000085ce <cos>:
    85ce:	62 d1       	rcall	.+708    	; 0x8894 <__fp_rempio2>
    85d0:	e3 95       	inc	r30
    85d2:	98 c1       	rjmp	.+816    	; 0x8904 <__fp_sinus>

000085d4 <__divsf3>:
    85d4:	0c d0       	rcall	.+24     	; 0x85ee <__divsf3x>
    85d6:	85 c1       	rjmp	.+778    	; 0x88e2 <__fp_round>
    85d8:	55 d1       	rcall	.+682    	; 0x8884 <__fp_pscB>
    85da:	40 f0       	brcs	.+16     	; 0x85ec <__divsf3+0x18>
    85dc:	4c d1       	rcall	.+664    	; 0x8876 <__fp_pscA>
    85de:	30 f0       	brcs	.+12     	; 0x85ec <__divsf3+0x18>
    85e0:	21 f4       	brne	.+8      	; 0x85ea <__divsf3+0x16>
    85e2:	5f 3f       	cpi	r21, 0xFF	; 255
    85e4:	19 f0       	breq	.+6      	; 0x85ec <__divsf3+0x18>
    85e6:	f0 c0       	rjmp	.+480    	; 0x87c8 <__fp_inf>
    85e8:	51 11       	cpse	r21, r1
    85ea:	d7 c1       	rjmp	.+942    	; 0x899a <__fp_szero>
    85ec:	1c c1       	rjmp	.+568    	; 0x8826 <__fp_nan>

000085ee <__divsf3x>:
    85ee:	9b d1       	rcall	.+822    	; 0x8926 <__fp_split3>
    85f0:	98 f3       	brcs	.-26     	; 0x85d8 <__divsf3+0x4>

000085f2 <__divsf3_pse>:
    85f2:	99 23       	and	r25, r25
    85f4:	c9 f3       	breq	.-14     	; 0x85e8 <__divsf3+0x14>
    85f6:	55 23       	and	r21, r21
    85f8:	b1 f3       	breq	.-20     	; 0x85e6 <__divsf3+0x12>
    85fa:	95 1b       	sub	r25, r21
    85fc:	55 0b       	sbc	r21, r21
    85fe:	bb 27       	eor	r27, r27
    8600:	aa 27       	eor	r26, r26
    8602:	62 17       	cp	r22, r18
    8604:	73 07       	cpc	r23, r19
    8606:	84 07       	cpc	r24, r20
    8608:	38 f0       	brcs	.+14     	; 0x8618 <__divsf3_pse+0x26>
    860a:	9f 5f       	subi	r25, 0xFF	; 255
    860c:	5f 4f       	sbci	r21, 0xFF	; 255
    860e:	22 0f       	add	r18, r18
    8610:	33 1f       	adc	r19, r19
    8612:	44 1f       	adc	r20, r20
    8614:	aa 1f       	adc	r26, r26
    8616:	a9 f3       	breq	.-22     	; 0x8602 <__divsf3_pse+0x10>
    8618:	33 d0       	rcall	.+102    	; 0x8680 <__divsf3_pse+0x8e>
    861a:	0e 2e       	mov	r0, r30
    861c:	3a f0       	brmi	.+14     	; 0x862c <__divsf3_pse+0x3a>
    861e:	e0 e8       	ldi	r30, 0x80	; 128
    8620:	30 d0       	rcall	.+96     	; 0x8682 <__divsf3_pse+0x90>
    8622:	91 50       	subi	r25, 0x01	; 1
    8624:	50 40       	sbci	r21, 0x00	; 0
    8626:	e6 95       	lsr	r30
    8628:	00 1c       	adc	r0, r0
    862a:	ca f7       	brpl	.-14     	; 0x861e <__divsf3_pse+0x2c>
    862c:	29 d0       	rcall	.+82     	; 0x8680 <__divsf3_pse+0x8e>
    862e:	fe 2f       	mov	r31, r30
    8630:	27 d0       	rcall	.+78     	; 0x8680 <__divsf3_pse+0x8e>
    8632:	66 0f       	add	r22, r22
    8634:	77 1f       	adc	r23, r23
    8636:	88 1f       	adc	r24, r24
    8638:	bb 1f       	adc	r27, r27
    863a:	26 17       	cp	r18, r22
    863c:	37 07       	cpc	r19, r23
    863e:	48 07       	cpc	r20, r24
    8640:	ab 07       	cpc	r26, r27
    8642:	b0 e8       	ldi	r27, 0x80	; 128
    8644:	09 f0       	breq	.+2      	; 0x8648 <__divsf3_pse+0x56>
    8646:	bb 0b       	sbc	r27, r27
    8648:	80 2d       	mov	r24, r0
    864a:	bf 01       	movw	r22, r30
    864c:	ff 27       	eor	r31, r31
    864e:	93 58       	subi	r25, 0x83	; 131
    8650:	5f 4f       	sbci	r21, 0xFF	; 255
    8652:	2a f0       	brmi	.+10     	; 0x865e <__divsf3_pse+0x6c>
    8654:	9e 3f       	cpi	r25, 0xFE	; 254
    8656:	51 05       	cpc	r21, r1
    8658:	68 f0       	brcs	.+26     	; 0x8674 <__divsf3_pse+0x82>
    865a:	b6 c0       	rjmp	.+364    	; 0x87c8 <__fp_inf>
    865c:	9e c1       	rjmp	.+828    	; 0x899a <__fp_szero>
    865e:	5f 3f       	cpi	r21, 0xFF	; 255
    8660:	ec f3       	brlt	.-6      	; 0x865c <__divsf3_pse+0x6a>
    8662:	98 3e       	cpi	r25, 0xE8	; 232
    8664:	dc f3       	brlt	.-10     	; 0x865c <__divsf3_pse+0x6a>
    8666:	86 95       	lsr	r24
    8668:	77 95       	ror	r23
    866a:	67 95       	ror	r22
    866c:	b7 95       	ror	r27
    866e:	f7 95       	ror	r31
    8670:	9f 5f       	subi	r25, 0xFF	; 255
    8672:	c9 f7       	brne	.-14     	; 0x8666 <__divsf3_pse+0x74>
    8674:	88 0f       	add	r24, r24
    8676:	91 1d       	adc	r25, r1
    8678:	96 95       	lsr	r25
    867a:	87 95       	ror	r24
    867c:	97 f9       	bld	r25, 7
    867e:	08 95       	ret
    8680:	e1 e0       	ldi	r30, 0x01	; 1
    8682:	66 0f       	add	r22, r22
    8684:	77 1f       	adc	r23, r23
    8686:	88 1f       	adc	r24, r24
    8688:	bb 1f       	adc	r27, r27
    868a:	62 17       	cp	r22, r18
    868c:	73 07       	cpc	r23, r19
    868e:	84 07       	cpc	r24, r20
    8690:	ba 07       	cpc	r27, r26
    8692:	20 f0       	brcs	.+8      	; 0x869c <__divsf3_pse+0xaa>
    8694:	62 1b       	sub	r22, r18
    8696:	73 0b       	sbc	r23, r19
    8698:	84 0b       	sbc	r24, r20
    869a:	ba 0b       	sbc	r27, r26
    869c:	ee 1f       	adc	r30, r30
    869e:	88 f7       	brcc	.-30     	; 0x8682 <__divsf3_pse+0x90>
    86a0:	e0 95       	com	r30
    86a2:	08 95       	ret

000086a4 <__fixsfsi>:
    86a4:	04 d0       	rcall	.+8      	; 0x86ae <__fixunssfsi>
    86a6:	68 94       	set
    86a8:	b1 11       	cpse	r27, r1
    86aa:	77 c1       	rjmp	.+750    	; 0x899a <__fp_szero>
    86ac:	08 95       	ret

000086ae <__fixunssfsi>:
    86ae:	43 d1       	rcall	.+646    	; 0x8936 <__fp_splitA>
    86b0:	88 f0       	brcs	.+34     	; 0x86d4 <__fixunssfsi+0x26>
    86b2:	9f 57       	subi	r25, 0x7F	; 127
    86b4:	90 f0       	brcs	.+36     	; 0x86da <__fixunssfsi+0x2c>
    86b6:	b9 2f       	mov	r27, r25
    86b8:	99 27       	eor	r25, r25
    86ba:	b7 51       	subi	r27, 0x17	; 23
    86bc:	a0 f0       	brcs	.+40     	; 0x86e6 <__fixunssfsi+0x38>
    86be:	d1 f0       	breq	.+52     	; 0x86f4 <__fixunssfsi+0x46>
    86c0:	66 0f       	add	r22, r22
    86c2:	77 1f       	adc	r23, r23
    86c4:	88 1f       	adc	r24, r24
    86c6:	99 1f       	adc	r25, r25
    86c8:	1a f0       	brmi	.+6      	; 0x86d0 <__fixunssfsi+0x22>
    86ca:	ba 95       	dec	r27
    86cc:	c9 f7       	brne	.-14     	; 0x86c0 <__fixunssfsi+0x12>
    86ce:	12 c0       	rjmp	.+36     	; 0x86f4 <__fixunssfsi+0x46>
    86d0:	b1 30       	cpi	r27, 0x01	; 1
    86d2:	81 f0       	breq	.+32     	; 0x86f4 <__fixunssfsi+0x46>
    86d4:	61 d1       	rcall	.+706    	; 0x8998 <__fp_zero>
    86d6:	b1 e0       	ldi	r27, 0x01	; 1
    86d8:	08 95       	ret
    86da:	5e c1       	rjmp	.+700    	; 0x8998 <__fp_zero>
    86dc:	67 2f       	mov	r22, r23
    86de:	78 2f       	mov	r23, r24
    86e0:	88 27       	eor	r24, r24
    86e2:	b8 5f       	subi	r27, 0xF8	; 248
    86e4:	39 f0       	breq	.+14     	; 0x86f4 <__fixunssfsi+0x46>
    86e6:	b9 3f       	cpi	r27, 0xF9	; 249
    86e8:	cc f3       	brlt	.-14     	; 0x86dc <__fixunssfsi+0x2e>
    86ea:	86 95       	lsr	r24
    86ec:	77 95       	ror	r23
    86ee:	67 95       	ror	r22
    86f0:	b3 95       	inc	r27
    86f2:	d9 f7       	brne	.-10     	; 0x86ea <__fixunssfsi+0x3c>
    86f4:	3e f4       	brtc	.+14     	; 0x8704 <__fixunssfsi+0x56>
    86f6:	90 95       	com	r25
    86f8:	80 95       	com	r24
    86fa:	70 95       	com	r23
    86fc:	61 95       	neg	r22
    86fe:	7f 4f       	sbci	r23, 0xFF	; 255
    8700:	8f 4f       	sbci	r24, 0xFF	; 255
    8702:	9f 4f       	sbci	r25, 0xFF	; 255
    8704:	08 95       	ret

00008706 <__floatunsisf>:
    8706:	e8 94       	clt
    8708:	09 c0       	rjmp	.+18     	; 0x871c <__floatsisf+0x12>

0000870a <__floatsisf>:
    870a:	97 fb       	bst	r25, 7
    870c:	3e f4       	brtc	.+14     	; 0x871c <__floatsisf+0x12>
    870e:	90 95       	com	r25
    8710:	80 95       	com	r24
    8712:	70 95       	com	r23
    8714:	61 95       	neg	r22
    8716:	7f 4f       	sbci	r23, 0xFF	; 255
    8718:	8f 4f       	sbci	r24, 0xFF	; 255
    871a:	9f 4f       	sbci	r25, 0xFF	; 255
    871c:	99 23       	and	r25, r25
    871e:	a9 f0       	breq	.+42     	; 0x874a <__floatsisf+0x40>
    8720:	f9 2f       	mov	r31, r25
    8722:	96 e9       	ldi	r25, 0x96	; 150
    8724:	bb 27       	eor	r27, r27
    8726:	93 95       	inc	r25
    8728:	f6 95       	lsr	r31
    872a:	87 95       	ror	r24
    872c:	77 95       	ror	r23
    872e:	67 95       	ror	r22
    8730:	b7 95       	ror	r27
    8732:	f1 11       	cpse	r31, r1
    8734:	f8 cf       	rjmp	.-16     	; 0x8726 <__floatsisf+0x1c>
    8736:	fa f4       	brpl	.+62     	; 0x8776 <__floatsisf+0x6c>
    8738:	bb 0f       	add	r27, r27
    873a:	11 f4       	brne	.+4      	; 0x8740 <__floatsisf+0x36>
    873c:	60 ff       	sbrs	r22, 0
    873e:	1b c0       	rjmp	.+54     	; 0x8776 <__floatsisf+0x6c>
    8740:	6f 5f       	subi	r22, 0xFF	; 255
    8742:	7f 4f       	sbci	r23, 0xFF	; 255
    8744:	8f 4f       	sbci	r24, 0xFF	; 255
    8746:	9f 4f       	sbci	r25, 0xFF	; 255
    8748:	16 c0       	rjmp	.+44     	; 0x8776 <__floatsisf+0x6c>
    874a:	88 23       	and	r24, r24
    874c:	11 f0       	breq	.+4      	; 0x8752 <__floatsisf+0x48>
    874e:	96 e9       	ldi	r25, 0x96	; 150
    8750:	11 c0       	rjmp	.+34     	; 0x8774 <__floatsisf+0x6a>
    8752:	77 23       	and	r23, r23
    8754:	21 f0       	breq	.+8      	; 0x875e <__floatsisf+0x54>
    8756:	9e e8       	ldi	r25, 0x8E	; 142
    8758:	87 2f       	mov	r24, r23
    875a:	76 2f       	mov	r23, r22
    875c:	05 c0       	rjmp	.+10     	; 0x8768 <__floatsisf+0x5e>
    875e:	66 23       	and	r22, r22
    8760:	71 f0       	breq	.+28     	; 0x877e <__floatsisf+0x74>
    8762:	96 e8       	ldi	r25, 0x86	; 134
    8764:	86 2f       	mov	r24, r22
    8766:	70 e0       	ldi	r23, 0x00	; 0
    8768:	60 e0       	ldi	r22, 0x00	; 0
    876a:	2a f0       	brmi	.+10     	; 0x8776 <__floatsisf+0x6c>
    876c:	9a 95       	dec	r25
    876e:	66 0f       	add	r22, r22
    8770:	77 1f       	adc	r23, r23
    8772:	88 1f       	adc	r24, r24
    8774:	da f7       	brpl	.-10     	; 0x876c <__floatsisf+0x62>
    8776:	88 0f       	add	r24, r24
    8778:	96 95       	lsr	r25
    877a:	87 95       	ror	r24
    877c:	97 f9       	bld	r25, 7
    877e:	08 95       	ret

00008780 <__fp_cmp>:
    8780:	99 0f       	add	r25, r25
    8782:	00 08       	sbc	r0, r0
    8784:	55 0f       	add	r21, r21
    8786:	aa 0b       	sbc	r26, r26
    8788:	e0 e8       	ldi	r30, 0x80	; 128
    878a:	fe ef       	ldi	r31, 0xFE	; 254
    878c:	16 16       	cp	r1, r22
    878e:	17 06       	cpc	r1, r23
    8790:	e8 07       	cpc	r30, r24
    8792:	f9 07       	cpc	r31, r25
    8794:	c0 f0       	brcs	.+48     	; 0x87c6 <__fp_cmp+0x46>
    8796:	12 16       	cp	r1, r18
    8798:	13 06       	cpc	r1, r19
    879a:	e4 07       	cpc	r30, r20
    879c:	f5 07       	cpc	r31, r21
    879e:	98 f0       	brcs	.+38     	; 0x87c6 <__fp_cmp+0x46>
    87a0:	62 1b       	sub	r22, r18
    87a2:	73 0b       	sbc	r23, r19
    87a4:	84 0b       	sbc	r24, r20
    87a6:	95 0b       	sbc	r25, r21
    87a8:	39 f4       	brne	.+14     	; 0x87b8 <__fp_cmp+0x38>
    87aa:	0a 26       	eor	r0, r26
    87ac:	61 f0       	breq	.+24     	; 0x87c6 <__fp_cmp+0x46>
    87ae:	23 2b       	or	r18, r19
    87b0:	24 2b       	or	r18, r20
    87b2:	25 2b       	or	r18, r21
    87b4:	21 f4       	brne	.+8      	; 0x87be <__fp_cmp+0x3e>
    87b6:	08 95       	ret
    87b8:	0a 26       	eor	r0, r26
    87ba:	09 f4       	brne	.+2      	; 0x87be <__fp_cmp+0x3e>
    87bc:	a1 40       	sbci	r26, 0x01	; 1
    87be:	a6 95       	lsr	r26
    87c0:	8f ef       	ldi	r24, 0xFF	; 255
    87c2:	81 1d       	adc	r24, r1
    87c4:	81 1d       	adc	r24, r1
    87c6:	08 95       	ret

000087c8 <__fp_inf>:
    87c8:	97 f9       	bld	r25, 7
    87ca:	9f 67       	ori	r25, 0x7F	; 127
    87cc:	80 e8       	ldi	r24, 0x80	; 128
    87ce:	70 e0       	ldi	r23, 0x00	; 0
    87d0:	60 e0       	ldi	r22, 0x00	; 0
    87d2:	08 95       	ret

000087d4 <__fp_mintl>:
    87d4:	88 23       	and	r24, r24
    87d6:	71 f4       	brne	.+28     	; 0x87f4 <__fp_mintl+0x20>
    87d8:	77 23       	and	r23, r23
    87da:	21 f0       	breq	.+8      	; 0x87e4 <__fp_mintl+0x10>
    87dc:	98 50       	subi	r25, 0x08	; 8
    87de:	87 2b       	or	r24, r23
    87e0:	76 2f       	mov	r23, r22
    87e2:	07 c0       	rjmp	.+14     	; 0x87f2 <__fp_mintl+0x1e>
    87e4:	66 23       	and	r22, r22
    87e6:	11 f4       	brne	.+4      	; 0x87ec <__fp_mintl+0x18>
    87e8:	99 27       	eor	r25, r25
    87ea:	0d c0       	rjmp	.+26     	; 0x8806 <__fp_mintl+0x32>
    87ec:	90 51       	subi	r25, 0x10	; 16
    87ee:	86 2b       	or	r24, r22
    87f0:	70 e0       	ldi	r23, 0x00	; 0
    87f2:	60 e0       	ldi	r22, 0x00	; 0
    87f4:	2a f0       	brmi	.+10     	; 0x8800 <__fp_mintl+0x2c>
    87f6:	9a 95       	dec	r25
    87f8:	66 0f       	add	r22, r22
    87fa:	77 1f       	adc	r23, r23
    87fc:	88 1f       	adc	r24, r24
    87fe:	da f7       	brpl	.-10     	; 0x87f6 <__fp_mintl+0x22>
    8800:	88 0f       	add	r24, r24
    8802:	96 95       	lsr	r25
    8804:	87 95       	ror	r24
    8806:	97 f9       	bld	r25, 7
    8808:	08 95       	ret

0000880a <__fp_mpack>:
    880a:	9f 3f       	cpi	r25, 0xFF	; 255
    880c:	31 f0       	breq	.+12     	; 0x881a <__fp_mpack_finite+0xc>

0000880e <__fp_mpack_finite>:
    880e:	91 50       	subi	r25, 0x01	; 1
    8810:	20 f4       	brcc	.+8      	; 0x881a <__fp_mpack_finite+0xc>
    8812:	87 95       	ror	r24
    8814:	77 95       	ror	r23
    8816:	67 95       	ror	r22
    8818:	b7 95       	ror	r27
    881a:	88 0f       	add	r24, r24
    881c:	91 1d       	adc	r25, r1
    881e:	96 95       	lsr	r25
    8820:	87 95       	ror	r24
    8822:	97 f9       	bld	r25, 7
    8824:	08 95       	ret

00008826 <__fp_nan>:
    8826:	9f ef       	ldi	r25, 0xFF	; 255
    8828:	80 ec       	ldi	r24, 0xC0	; 192
    882a:	08 95       	ret

0000882c <__fp_powser>:
    882c:	df 93       	push	r29
    882e:	cf 93       	push	r28
    8830:	1f 93       	push	r17
    8832:	0f 93       	push	r16
    8834:	ff 92       	push	r15
    8836:	ef 92       	push	r14
    8838:	df 92       	push	r13
    883a:	7b 01       	movw	r14, r22
    883c:	8c 01       	movw	r16, r24
    883e:	68 94       	set
    8840:	05 c0       	rjmp	.+10     	; 0x884c <__fp_powser+0x20>
    8842:	da 2e       	mov	r13, r26
    8844:	ef 01       	movw	r28, r30
    8846:	8d d1       	rcall	.+794    	; 0x8b62 <__mulsf3x>
    8848:	fe 01       	movw	r30, r28
    884a:	e8 94       	clt
    884c:	a5 91       	lpm	r26, Z+
    884e:	25 91       	lpm	r18, Z+
    8850:	35 91       	lpm	r19, Z+
    8852:	45 91       	lpm	r20, Z+
    8854:	55 91       	lpm	r21, Z+
    8856:	ae f3       	brts	.-22     	; 0x8842 <__fp_powser+0x16>
    8858:	ef 01       	movw	r28, r30
    885a:	27 de       	rcall	.-946    	; 0x84aa <__addsf3x>
    885c:	fe 01       	movw	r30, r28
    885e:	97 01       	movw	r18, r14
    8860:	a8 01       	movw	r20, r16
    8862:	da 94       	dec	r13
    8864:	79 f7       	brne	.-34     	; 0x8844 <__fp_powser+0x18>
    8866:	df 90       	pop	r13
    8868:	ef 90       	pop	r14
    886a:	ff 90       	pop	r15
    886c:	0f 91       	pop	r16
    886e:	1f 91       	pop	r17
    8870:	cf 91       	pop	r28
    8872:	df 91       	pop	r29
    8874:	08 95       	ret

00008876 <__fp_pscA>:
    8876:	00 24       	eor	r0, r0
    8878:	0a 94       	dec	r0
    887a:	16 16       	cp	r1, r22
    887c:	17 06       	cpc	r1, r23
    887e:	18 06       	cpc	r1, r24
    8880:	09 06       	cpc	r0, r25
    8882:	08 95       	ret

00008884 <__fp_pscB>:
    8884:	00 24       	eor	r0, r0
    8886:	0a 94       	dec	r0
    8888:	12 16       	cp	r1, r18
    888a:	13 06       	cpc	r1, r19
    888c:	14 06       	cpc	r1, r20
    888e:	05 06       	cpc	r0, r21
    8890:	08 95       	ret
    8892:	c9 cf       	rjmp	.-110    	; 0x8826 <__fp_nan>

00008894 <__fp_rempio2>:
    8894:	50 d0       	rcall	.+160    	; 0x8936 <__fp_splitA>
    8896:	e8 f3       	brcs	.-6      	; 0x8892 <__fp_pscB+0xe>
    8898:	e8 94       	clt
    889a:	e0 e0       	ldi	r30, 0x00	; 0
    889c:	bb 27       	eor	r27, r27
    889e:	9f 57       	subi	r25, 0x7F	; 127
    88a0:	f0 f0       	brcs	.+60     	; 0x88de <__fp_rempio2+0x4a>
    88a2:	2a ed       	ldi	r18, 0xDA	; 218
    88a4:	3f e0       	ldi	r19, 0x0F	; 15
    88a6:	49 ec       	ldi	r20, 0xC9	; 201
    88a8:	06 c0       	rjmp	.+12     	; 0x88b6 <__fp_rempio2+0x22>
    88aa:	ee 0f       	add	r30, r30
    88ac:	bb 0f       	add	r27, r27
    88ae:	66 1f       	adc	r22, r22
    88b0:	77 1f       	adc	r23, r23
    88b2:	88 1f       	adc	r24, r24
    88b4:	28 f0       	brcs	.+10     	; 0x88c0 <__fp_rempio2+0x2c>
    88b6:	b2 3a       	cpi	r27, 0xA2	; 162
    88b8:	62 07       	cpc	r22, r18
    88ba:	73 07       	cpc	r23, r19
    88bc:	84 07       	cpc	r24, r20
    88be:	28 f0       	brcs	.+10     	; 0x88ca <__fp_rempio2+0x36>
    88c0:	b2 5a       	subi	r27, 0xA2	; 162
    88c2:	62 0b       	sbc	r22, r18
    88c4:	73 0b       	sbc	r23, r19
    88c6:	84 0b       	sbc	r24, r20
    88c8:	e3 95       	inc	r30
    88ca:	9a 95       	dec	r25
    88cc:	72 f7       	brpl	.-36     	; 0x88aa <__fp_rempio2+0x16>
    88ce:	80 38       	cpi	r24, 0x80	; 128
    88d0:	30 f4       	brcc	.+12     	; 0x88de <__fp_rempio2+0x4a>
    88d2:	9a 95       	dec	r25
    88d4:	bb 0f       	add	r27, r27
    88d6:	66 1f       	adc	r22, r22
    88d8:	77 1f       	adc	r23, r23
    88da:	88 1f       	adc	r24, r24
    88dc:	d2 f7       	brpl	.-12     	; 0x88d2 <__fp_rempio2+0x3e>
    88de:	90 48       	sbci	r25, 0x80	; 128
    88e0:	96 cf       	rjmp	.-212    	; 0x880e <__fp_mpack_finite>

000088e2 <__fp_round>:
    88e2:	09 2e       	mov	r0, r25
    88e4:	03 94       	inc	r0
    88e6:	00 0c       	add	r0, r0
    88e8:	11 f4       	brne	.+4      	; 0x88ee <__fp_round+0xc>
    88ea:	88 23       	and	r24, r24
    88ec:	52 f0       	brmi	.+20     	; 0x8902 <__fp_round+0x20>
    88ee:	bb 0f       	add	r27, r27
    88f0:	40 f4       	brcc	.+16     	; 0x8902 <__fp_round+0x20>
    88f2:	bf 2b       	or	r27, r31
    88f4:	11 f4       	brne	.+4      	; 0x88fa <__fp_round+0x18>
    88f6:	60 ff       	sbrs	r22, 0
    88f8:	04 c0       	rjmp	.+8      	; 0x8902 <__fp_round+0x20>
    88fa:	6f 5f       	subi	r22, 0xFF	; 255
    88fc:	7f 4f       	sbci	r23, 0xFF	; 255
    88fe:	8f 4f       	sbci	r24, 0xFF	; 255
    8900:	9f 4f       	sbci	r25, 0xFF	; 255
    8902:	08 95       	ret

00008904 <__fp_sinus>:
    8904:	ef 93       	push	r30
    8906:	e0 ff       	sbrs	r30, 0
    8908:	06 c0       	rjmp	.+12     	; 0x8916 <__fp_sinus+0x12>
    890a:	a2 ea       	ldi	r26, 0xA2	; 162
    890c:	2a ed       	ldi	r18, 0xDA	; 218
    890e:	3f e0       	ldi	r19, 0x0F	; 15
    8910:	49 ec       	ldi	r20, 0xC9	; 201
    8912:	5f eb       	ldi	r21, 0xBF	; 191
    8914:	ca dd       	rcall	.-1132   	; 0x84aa <__addsf3x>
    8916:	e5 df       	rcall	.-54     	; 0x88e2 <__fp_round>
    8918:	0f 90       	pop	r0
    891a:	03 94       	inc	r0
    891c:	01 fc       	sbrc	r0, 1
    891e:	90 58       	subi	r25, 0x80	; 128
    8920:	e5 e1       	ldi	r30, 0x15	; 21
    8922:	f2 e0       	ldi	r31, 0x02	; 2
    8924:	d2 c1       	rjmp	.+932    	; 0x8cca <__fp_powsodd>

00008926 <__fp_split3>:
    8926:	57 fd       	sbrc	r21, 7
    8928:	90 58       	subi	r25, 0x80	; 128
    892a:	44 0f       	add	r20, r20
    892c:	55 1f       	adc	r21, r21
    892e:	59 f0       	breq	.+22     	; 0x8946 <__fp_splitA+0x10>
    8930:	5f 3f       	cpi	r21, 0xFF	; 255
    8932:	71 f0       	breq	.+28     	; 0x8950 <__fp_splitA+0x1a>
    8934:	47 95       	ror	r20

00008936 <__fp_splitA>:
    8936:	88 0f       	add	r24, r24
    8938:	97 fb       	bst	r25, 7
    893a:	99 1f       	adc	r25, r25
    893c:	61 f0       	breq	.+24     	; 0x8956 <__fp_splitA+0x20>
    893e:	9f 3f       	cpi	r25, 0xFF	; 255
    8940:	79 f0       	breq	.+30     	; 0x8960 <__fp_splitA+0x2a>
    8942:	87 95       	ror	r24
    8944:	08 95       	ret
    8946:	12 16       	cp	r1, r18
    8948:	13 06       	cpc	r1, r19
    894a:	14 06       	cpc	r1, r20
    894c:	55 1f       	adc	r21, r21
    894e:	f2 cf       	rjmp	.-28     	; 0x8934 <__fp_split3+0xe>
    8950:	46 95       	lsr	r20
    8952:	f1 df       	rcall	.-30     	; 0x8936 <__fp_splitA>
    8954:	08 c0       	rjmp	.+16     	; 0x8966 <__fp_splitA+0x30>
    8956:	16 16       	cp	r1, r22
    8958:	17 06       	cpc	r1, r23
    895a:	18 06       	cpc	r1, r24
    895c:	99 1f       	adc	r25, r25
    895e:	f1 cf       	rjmp	.-30     	; 0x8942 <__fp_splitA+0xc>
    8960:	86 95       	lsr	r24
    8962:	71 05       	cpc	r23, r1
    8964:	61 05       	cpc	r22, r1
    8966:	08 94       	sec
    8968:	08 95       	ret

0000896a <__fp_trunc>:
    896a:	e5 df       	rcall	.-54     	; 0x8936 <__fp_splitA>
    896c:	a0 f0       	brcs	.+40     	; 0x8996 <__fp_trunc+0x2c>
    896e:	be e7       	ldi	r27, 0x7E	; 126
    8970:	b9 17       	cp	r27, r25
    8972:	88 f4       	brcc	.+34     	; 0x8996 <__fp_trunc+0x2c>
    8974:	bb 27       	eor	r27, r27
    8976:	9f 38       	cpi	r25, 0x8F	; 143
    8978:	60 f4       	brcc	.+24     	; 0x8992 <__fp_trunc+0x28>
    897a:	16 16       	cp	r1, r22
    897c:	b1 1d       	adc	r27, r1
    897e:	67 2f       	mov	r22, r23
    8980:	78 2f       	mov	r23, r24
    8982:	88 27       	eor	r24, r24
    8984:	98 5f       	subi	r25, 0xF8	; 248
    8986:	f7 cf       	rjmp	.-18     	; 0x8976 <__fp_trunc+0xc>
    8988:	86 95       	lsr	r24
    898a:	77 95       	ror	r23
    898c:	67 95       	ror	r22
    898e:	b1 1d       	adc	r27, r1
    8990:	93 95       	inc	r25
    8992:	96 39       	cpi	r25, 0x96	; 150
    8994:	c8 f3       	brcs	.-14     	; 0x8988 <__fp_trunc+0x1e>
    8996:	08 95       	ret

00008998 <__fp_zero>:
    8998:	e8 94       	clt

0000899a <__fp_szero>:
    899a:	bb 27       	eor	r27, r27
    899c:	66 27       	eor	r22, r22
    899e:	77 27       	eor	r23, r23
    89a0:	cb 01       	movw	r24, r22
    89a2:	97 f9       	bld	r25, 7
    89a4:	08 95       	ret

000089a6 <__gesf2>:
    89a6:	ec de       	rcall	.-552    	; 0x8780 <__fp_cmp>
    89a8:	08 f4       	brcc	.+2      	; 0x89ac <__gesf2+0x6>
    89aa:	8f ef       	ldi	r24, 0xFF	; 255
    89ac:	08 95       	ret
    89ae:	63 df       	rcall	.-314    	; 0x8876 <__fp_pscA>
    89b0:	19 f0       	breq	.+6      	; 0x89b8 <__gesf2+0x12>
    89b2:	68 df       	rcall	.-304    	; 0x8884 <__fp_pscB>
    89b4:	09 f0       	breq	.+2      	; 0x89b8 <__gesf2+0x12>
    89b6:	37 cf       	rjmp	.-402    	; 0x8826 <__fp_nan>
    89b8:	07 cf       	rjmp	.-498    	; 0x87c8 <__fp_inf>
    89ba:	b9 01       	movw	r22, r18
    89bc:	ca 01       	movw	r24, r20
    89be:	25 cf       	rjmp	.-438    	; 0x880a <__fp_mpack>

000089c0 <hypot>:
    89c0:	9f 77       	andi	r25, 0x7F	; 127
    89c2:	5f 77       	andi	r21, 0x7F	; 127
    89c4:	b0 df       	rcall	.-160    	; 0x8926 <__fp_split3>
    89c6:	98 f3       	brcs	.-26     	; 0x89ae <__gesf2+0x8>
    89c8:	99 23       	and	r25, r25
    89ca:	b9 f3       	breq	.-18     	; 0x89ba <__gesf2+0x14>
    89cc:	55 23       	and	r21, r21
    89ce:	b9 f3       	breq	.-18     	; 0x89be <__gesf2+0x18>
    89d0:	ff 27       	eor	r31, r31
    89d2:	95 17       	cp	r25, r21
    89d4:	58 f4       	brcc	.+22     	; 0x89ec <hypot+0x2c>
    89d6:	e5 2f       	mov	r30, r21
    89d8:	e9 1b       	sub	r30, r25
    89da:	ed 30       	cpi	r30, 0x0D	; 13
    89dc:	70 f7       	brcc	.-36     	; 0x89ba <__gesf2+0x14>
    89de:	5e 3b       	cpi	r21, 0xBE	; 190
    89e0:	10 f0       	brcs	.+4      	; 0x89e6 <hypot+0x26>
    89e2:	f1 e4       	ldi	r31, 0x41	; 65
    89e4:	1c c0       	rjmp	.+56     	; 0x8a1e <hypot+0x5e>
    89e6:	90 34       	cpi	r25, 0x40	; 64
    89e8:	e0 f4       	brcc	.+56     	; 0x8a22 <hypot+0x62>
    89ea:	0a c0       	rjmp	.+20     	; 0x8a00 <hypot+0x40>
    89ec:	e9 2f       	mov	r30, r25
    89ee:	e5 1b       	sub	r30, r21
    89f0:	ed 30       	cpi	r30, 0x0D	; 13
    89f2:	28 f7       	brcc	.-54     	; 0x89be <__gesf2+0x18>
    89f4:	9e 3b       	cpi	r25, 0xBE	; 190
    89f6:	10 f0       	brcs	.+4      	; 0x89fc <hypot+0x3c>
    89f8:	f1 e4       	ldi	r31, 0x41	; 65
    89fa:	11 c0       	rjmp	.+34     	; 0x8a1e <hypot+0x5e>
    89fc:	50 34       	cpi	r21, 0x40	; 64
    89fe:	88 f4       	brcc	.+34     	; 0x8a22 <hypot+0x62>
    8a00:	f9 ea       	ldi	r31, 0xA9	; 169
    8a02:	88 23       	and	r24, r24
    8a04:	2a f0       	brmi	.+10     	; 0x8a10 <hypot+0x50>
    8a06:	9a 95       	dec	r25
    8a08:	66 0f       	add	r22, r22
    8a0a:	77 1f       	adc	r23, r23
    8a0c:	88 1f       	adc	r24, r24
    8a0e:	da f7       	brpl	.-10     	; 0x8a06 <hypot+0x46>
    8a10:	44 23       	and	r20, r20
    8a12:	2a f0       	brmi	.+10     	; 0x8a1e <hypot+0x5e>
    8a14:	5a 95       	dec	r21
    8a16:	22 0f       	add	r18, r18
    8a18:	33 1f       	adc	r19, r19
    8a1a:	44 1f       	adc	r20, r20
    8a1c:	da f7       	brpl	.-10     	; 0x8a14 <hypot+0x54>
    8a1e:	9f 1b       	sub	r25, r31
    8a20:	5f 1b       	sub	r21, r31
    8a22:	ff 93       	push	r31
    8a24:	1f 93       	push	r17
    8a26:	0f 93       	push	r16
    8a28:	ff 92       	push	r15
    8a2a:	ef 92       	push	r14
    8a2c:	79 01       	movw	r14, r18
    8a2e:	8a 01       	movw	r16, r20
    8a30:	bb 27       	eor	r27, r27
    8a32:	ab 2f       	mov	r26, r27
    8a34:	9b 01       	movw	r18, r22
    8a36:	ac 01       	movw	r20, r24
    8a38:	96 d0       	rcall	.+300    	; 0x8b66 <__mulsf3_pse>
    8a3a:	97 01       	movw	r18, r14
    8a3c:	a8 01       	movw	r20, r16
    8a3e:	bf 93       	push	r27
    8a40:	7b 01       	movw	r14, r22
    8a42:	8c 01       	movw	r16, r24
    8a44:	aa 27       	eor	r26, r26
    8a46:	ba 2f       	mov	r27, r26
    8a48:	b9 01       	movw	r22, r18
    8a4a:	ca 01       	movw	r24, r20
    8a4c:	8c d0       	rcall	.+280    	; 0x8b66 <__mulsf3_pse>
    8a4e:	af 91       	pop	r26
    8a50:	97 01       	movw	r18, r14
    8a52:	a8 01       	movw	r20, r16
    8a54:	ef 90       	pop	r14
    8a56:	ff 90       	pop	r15
    8a58:	0f 91       	pop	r16
    8a5a:	1f 91       	pop	r17
    8a5c:	26 dd       	rcall	.-1460   	; 0x84aa <__addsf3x>
    8a5e:	41 df       	rcall	.-382    	; 0x88e2 <__fp_round>
    8a60:	e1 d0       	rcall	.+450    	; 0x8c24 <sqrt>
    8a62:	4f 91       	pop	r20
    8a64:	40 ff       	sbrs	r20, 0
    8a66:	08 95       	ret
    8a68:	55 27       	eor	r21, r21
    8a6a:	47 fd       	sbrc	r20, 7
    8a6c:	50 95       	com	r21
    8a6e:	09 c0       	rjmp	.+18     	; 0x8a82 <ldexp>

00008a70 <inverse>:
    8a70:	9b 01       	movw	r18, r22
    8a72:	ac 01       	movw	r20, r24
    8a74:	60 e0       	ldi	r22, 0x00	; 0
    8a76:	70 e0       	ldi	r23, 0x00	; 0
    8a78:	80 e8       	ldi	r24, 0x80	; 128
    8a7a:	9f e3       	ldi	r25, 0x3F	; 63
    8a7c:	ab cd       	rjmp	.-1194   	; 0x85d4 <__divsf3>
    8a7e:	a4 ce       	rjmp	.-696    	; 0x87c8 <__fp_inf>
    8a80:	c4 ce       	rjmp	.-632    	; 0x880a <__fp_mpack>

00008a82 <ldexp>:
    8a82:	59 df       	rcall	.-334    	; 0x8936 <__fp_splitA>
    8a84:	e8 f3       	brcs	.-6      	; 0x8a80 <inverse+0x10>
    8a86:	99 23       	and	r25, r25
    8a88:	d9 f3       	breq	.-10     	; 0x8a80 <inverse+0x10>
    8a8a:	94 0f       	add	r25, r20
    8a8c:	51 1d       	adc	r21, r1
    8a8e:	bb f3       	brvs	.-18     	; 0x8a7e <inverse+0xe>
    8a90:	91 50       	subi	r25, 0x01	; 1
    8a92:	50 40       	sbci	r21, 0x00	; 0
    8a94:	94 f0       	brlt	.+36     	; 0x8aba <ldexp+0x38>
    8a96:	59 f0       	breq	.+22     	; 0x8aae <ldexp+0x2c>
    8a98:	88 23       	and	r24, r24
    8a9a:	32 f0       	brmi	.+12     	; 0x8aa8 <ldexp+0x26>
    8a9c:	66 0f       	add	r22, r22
    8a9e:	77 1f       	adc	r23, r23
    8aa0:	88 1f       	adc	r24, r24
    8aa2:	91 50       	subi	r25, 0x01	; 1
    8aa4:	50 40       	sbci	r21, 0x00	; 0
    8aa6:	c1 f7       	brne	.-16     	; 0x8a98 <ldexp+0x16>
    8aa8:	9e 3f       	cpi	r25, 0xFE	; 254
    8aaa:	51 05       	cpc	r21, r1
    8aac:	44 f7       	brge	.-48     	; 0x8a7e <inverse+0xe>
    8aae:	88 0f       	add	r24, r24
    8ab0:	91 1d       	adc	r25, r1
    8ab2:	96 95       	lsr	r25
    8ab4:	87 95       	ror	r24
    8ab6:	97 f9       	bld	r25, 7
    8ab8:	08 95       	ret
    8aba:	5f 3f       	cpi	r21, 0xFF	; 255
    8abc:	ac f0       	brlt	.+42     	; 0x8ae8 <ldexp+0x66>
    8abe:	98 3e       	cpi	r25, 0xE8	; 232
    8ac0:	9c f0       	brlt	.+38     	; 0x8ae8 <ldexp+0x66>
    8ac2:	bb 27       	eor	r27, r27
    8ac4:	86 95       	lsr	r24
    8ac6:	77 95       	ror	r23
    8ac8:	67 95       	ror	r22
    8aca:	b7 95       	ror	r27
    8acc:	08 f4       	brcc	.+2      	; 0x8ad0 <ldexp+0x4e>
    8ace:	b1 60       	ori	r27, 0x01	; 1
    8ad0:	93 95       	inc	r25
    8ad2:	c1 f7       	brne	.-16     	; 0x8ac4 <ldexp+0x42>
    8ad4:	bb 0f       	add	r27, r27
    8ad6:	58 f7       	brcc	.-42     	; 0x8aae <ldexp+0x2c>
    8ad8:	11 f4       	brne	.+4      	; 0x8ade <ldexp+0x5c>
    8ada:	60 ff       	sbrs	r22, 0
    8adc:	e8 cf       	rjmp	.-48     	; 0x8aae <ldexp+0x2c>
    8ade:	6f 5f       	subi	r22, 0xFF	; 255
    8ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    8ae2:	8f 4f       	sbci	r24, 0xFF	; 255
    8ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    8ae6:	e3 cf       	rjmp	.-58     	; 0x8aae <ldexp+0x2c>
    8ae8:	58 cf       	rjmp	.-336    	; 0x899a <__fp_szero>

00008aea <lround>:
    8aea:	25 df       	rcall	.-438    	; 0x8936 <__fp_splitA>
    8aec:	58 f1       	brcs	.+86     	; 0x8b44 <lround+0x5a>
    8aee:	9e 57       	subi	r25, 0x7E	; 126
    8af0:	58 f1       	brcs	.+86     	; 0x8b48 <lround+0x5e>
    8af2:	98 51       	subi	r25, 0x18	; 24
    8af4:	a0 f0       	brcs	.+40     	; 0x8b1e <lround+0x34>
    8af6:	e9 f0       	breq	.+58     	; 0x8b32 <lround+0x48>
    8af8:	98 30       	cpi	r25, 0x08	; 8
    8afa:	20 f5       	brcc	.+72     	; 0x8b44 <lround+0x5a>
    8afc:	09 2e       	mov	r0, r25
    8afe:	99 27       	eor	r25, r25
    8b00:	66 0f       	add	r22, r22
    8b02:	77 1f       	adc	r23, r23
    8b04:	88 1f       	adc	r24, r24
    8b06:	99 1f       	adc	r25, r25
    8b08:	0a 94       	dec	r0
    8b0a:	d1 f7       	brne	.-12     	; 0x8b00 <lround+0x16>
    8b0c:	12 c0       	rjmp	.+36     	; 0x8b32 <lround+0x48>
    8b0e:	06 2e       	mov	r0, r22
    8b10:	67 2f       	mov	r22, r23
    8b12:	78 2f       	mov	r23, r24
    8b14:	88 27       	eor	r24, r24
    8b16:	98 5f       	subi	r25, 0xF8	; 248
    8b18:	11 f4       	brne	.+4      	; 0x8b1e <lround+0x34>
    8b1a:	00 0c       	add	r0, r0
    8b1c:	07 c0       	rjmp	.+14     	; 0x8b2c <lround+0x42>
    8b1e:	99 3f       	cpi	r25, 0xF9	; 249
    8b20:	b4 f3       	brlt	.-20     	; 0x8b0e <lround+0x24>
    8b22:	86 95       	lsr	r24
    8b24:	77 95       	ror	r23
    8b26:	67 95       	ror	r22
    8b28:	93 95       	inc	r25
    8b2a:	d9 f7       	brne	.-10     	; 0x8b22 <lround+0x38>
    8b2c:	61 1d       	adc	r22, r1
    8b2e:	71 1d       	adc	r23, r1
    8b30:	81 1d       	adc	r24, r1
    8b32:	3e f4       	brtc	.+14     	; 0x8b42 <lround+0x58>
    8b34:	90 95       	com	r25
    8b36:	80 95       	com	r24
    8b38:	70 95       	com	r23
    8b3a:	61 95       	neg	r22
    8b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    8b3e:	8f 4f       	sbci	r24, 0xFF	; 255
    8b40:	9f 4f       	sbci	r25, 0xFF	; 255
    8b42:	08 95       	ret
    8b44:	68 94       	set
    8b46:	29 cf       	rjmp	.-430    	; 0x899a <__fp_szero>
    8b48:	27 cf       	rjmp	.-434    	; 0x8998 <__fp_zero>

00008b4a <__mulsf3>:
    8b4a:	0b d0       	rcall	.+22     	; 0x8b62 <__mulsf3x>
    8b4c:	ca ce       	rjmp	.-620    	; 0x88e2 <__fp_round>
    8b4e:	93 de       	rcall	.-730    	; 0x8876 <__fp_pscA>
    8b50:	28 f0       	brcs	.+10     	; 0x8b5c <__mulsf3+0x12>
    8b52:	98 de       	rcall	.-720    	; 0x8884 <__fp_pscB>
    8b54:	18 f0       	brcs	.+6      	; 0x8b5c <__mulsf3+0x12>
    8b56:	95 23       	and	r25, r21
    8b58:	09 f0       	breq	.+2      	; 0x8b5c <__mulsf3+0x12>
    8b5a:	36 ce       	rjmp	.-916    	; 0x87c8 <__fp_inf>
    8b5c:	64 ce       	rjmp	.-824    	; 0x8826 <__fp_nan>
    8b5e:	11 24       	eor	r1, r1
    8b60:	1c cf       	rjmp	.-456    	; 0x899a <__fp_szero>

00008b62 <__mulsf3x>:
    8b62:	e1 de       	rcall	.-574    	; 0x8926 <__fp_split3>
    8b64:	a0 f3       	brcs	.-24     	; 0x8b4e <__mulsf3+0x4>

00008b66 <__mulsf3_pse>:
    8b66:	95 9f       	mul	r25, r21
    8b68:	d1 f3       	breq	.-12     	; 0x8b5e <__mulsf3+0x14>
    8b6a:	95 0f       	add	r25, r21
    8b6c:	50 e0       	ldi	r21, 0x00	; 0
    8b6e:	55 1f       	adc	r21, r21
    8b70:	62 9f       	mul	r22, r18
    8b72:	f0 01       	movw	r30, r0
    8b74:	72 9f       	mul	r23, r18
    8b76:	bb 27       	eor	r27, r27
    8b78:	f0 0d       	add	r31, r0
    8b7a:	b1 1d       	adc	r27, r1
    8b7c:	63 9f       	mul	r22, r19
    8b7e:	aa 27       	eor	r26, r26
    8b80:	f0 0d       	add	r31, r0
    8b82:	b1 1d       	adc	r27, r1
    8b84:	aa 1f       	adc	r26, r26
    8b86:	64 9f       	mul	r22, r20
    8b88:	66 27       	eor	r22, r22
    8b8a:	b0 0d       	add	r27, r0
    8b8c:	a1 1d       	adc	r26, r1
    8b8e:	66 1f       	adc	r22, r22
    8b90:	82 9f       	mul	r24, r18
    8b92:	22 27       	eor	r18, r18
    8b94:	b0 0d       	add	r27, r0
    8b96:	a1 1d       	adc	r26, r1
    8b98:	62 1f       	adc	r22, r18
    8b9a:	73 9f       	mul	r23, r19
    8b9c:	b0 0d       	add	r27, r0
    8b9e:	a1 1d       	adc	r26, r1
    8ba0:	62 1f       	adc	r22, r18
    8ba2:	83 9f       	mul	r24, r19
    8ba4:	a0 0d       	add	r26, r0
    8ba6:	61 1d       	adc	r22, r1
    8ba8:	22 1f       	adc	r18, r18
    8baa:	74 9f       	mul	r23, r20
    8bac:	33 27       	eor	r19, r19
    8bae:	a0 0d       	add	r26, r0
    8bb0:	61 1d       	adc	r22, r1
    8bb2:	23 1f       	adc	r18, r19
    8bb4:	84 9f       	mul	r24, r20
    8bb6:	60 0d       	add	r22, r0
    8bb8:	21 1d       	adc	r18, r1
    8bba:	82 2f       	mov	r24, r18
    8bbc:	76 2f       	mov	r23, r22
    8bbe:	6a 2f       	mov	r22, r26
    8bc0:	11 24       	eor	r1, r1
    8bc2:	9f 57       	subi	r25, 0x7F	; 127
    8bc4:	50 40       	sbci	r21, 0x00	; 0
    8bc6:	8a f0       	brmi	.+34     	; 0x8bea <__mulsf3_pse+0x84>
    8bc8:	e1 f0       	breq	.+56     	; 0x8c02 <__mulsf3_pse+0x9c>
    8bca:	88 23       	and	r24, r24
    8bcc:	4a f0       	brmi	.+18     	; 0x8be0 <__mulsf3_pse+0x7a>
    8bce:	ee 0f       	add	r30, r30
    8bd0:	ff 1f       	adc	r31, r31
    8bd2:	bb 1f       	adc	r27, r27
    8bd4:	66 1f       	adc	r22, r22
    8bd6:	77 1f       	adc	r23, r23
    8bd8:	88 1f       	adc	r24, r24
    8bda:	91 50       	subi	r25, 0x01	; 1
    8bdc:	50 40       	sbci	r21, 0x00	; 0
    8bde:	a9 f7       	brne	.-22     	; 0x8bca <__mulsf3_pse+0x64>
    8be0:	9e 3f       	cpi	r25, 0xFE	; 254
    8be2:	51 05       	cpc	r21, r1
    8be4:	70 f0       	brcs	.+28     	; 0x8c02 <__mulsf3_pse+0x9c>
    8be6:	f0 cd       	rjmp	.-1056   	; 0x87c8 <__fp_inf>
    8be8:	d8 ce       	rjmp	.-592    	; 0x899a <__fp_szero>
    8bea:	5f 3f       	cpi	r21, 0xFF	; 255
    8bec:	ec f3       	brlt	.-6      	; 0x8be8 <__mulsf3_pse+0x82>
    8bee:	98 3e       	cpi	r25, 0xE8	; 232
    8bf0:	dc f3       	brlt	.-10     	; 0x8be8 <__mulsf3_pse+0x82>
    8bf2:	86 95       	lsr	r24
    8bf4:	77 95       	ror	r23
    8bf6:	67 95       	ror	r22
    8bf8:	b7 95       	ror	r27
    8bfa:	f7 95       	ror	r31
    8bfc:	e7 95       	ror	r30
    8bfe:	9f 5f       	subi	r25, 0xFF	; 255
    8c00:	c1 f7       	brne	.-16     	; 0x8bf2 <__mulsf3_pse+0x8c>
    8c02:	fe 2b       	or	r31, r30
    8c04:	88 0f       	add	r24, r24
    8c06:	91 1d       	adc	r25, r1
    8c08:	96 95       	lsr	r25
    8c0a:	87 95       	ror	r24
    8c0c:	97 f9       	bld	r25, 7
    8c0e:	08 95       	ret

00008c10 <sin>:
    8c10:	9f 93       	push	r25
    8c12:	40 de       	rcall	.-896    	; 0x8894 <__fp_rempio2>
    8c14:	0f 90       	pop	r0
    8c16:	07 fc       	sbrc	r0, 7
    8c18:	ee 5f       	subi	r30, 0xFE	; 254
    8c1a:	74 ce       	rjmp	.-792    	; 0x8904 <__fp_sinus>
    8c1c:	11 f4       	brne	.+4      	; 0x8c22 <sin+0x12>
    8c1e:	0e f4       	brtc	.+2      	; 0x8c22 <sin+0x12>
    8c20:	02 ce       	rjmp	.-1020   	; 0x8826 <__fp_nan>
    8c22:	f3 cd       	rjmp	.-1050   	; 0x880a <__fp_mpack>

00008c24 <sqrt>:
    8c24:	88 de       	rcall	.-752    	; 0x8936 <__fp_splitA>
    8c26:	d0 f3       	brcs	.-12     	; 0x8c1c <sin+0xc>
    8c28:	99 23       	and	r25, r25
    8c2a:	d9 f3       	breq	.-10     	; 0x8c22 <sin+0x12>
    8c2c:	ce f3       	brts	.-14     	; 0x8c20 <sin+0x10>
    8c2e:	9f 57       	subi	r25, 0x7F	; 127
    8c30:	55 0b       	sbc	r21, r21
    8c32:	87 ff       	sbrs	r24, 7
    8c34:	43 d0       	rcall	.+134    	; 0x8cbc <__fp_norm2>
    8c36:	00 24       	eor	r0, r0
    8c38:	a0 e6       	ldi	r26, 0x60	; 96
    8c3a:	40 ea       	ldi	r20, 0xA0	; 160
    8c3c:	90 01       	movw	r18, r0
    8c3e:	80 58       	subi	r24, 0x80	; 128
    8c40:	56 95       	lsr	r21
    8c42:	97 95       	ror	r25
    8c44:	28 f4       	brcc	.+10     	; 0x8c50 <sqrt+0x2c>
    8c46:	80 5c       	subi	r24, 0xC0	; 192
    8c48:	66 0f       	add	r22, r22
    8c4a:	77 1f       	adc	r23, r23
    8c4c:	88 1f       	adc	r24, r24
    8c4e:	20 f0       	brcs	.+8      	; 0x8c58 <sqrt+0x34>
    8c50:	26 17       	cp	r18, r22
    8c52:	37 07       	cpc	r19, r23
    8c54:	48 07       	cpc	r20, r24
    8c56:	30 f4       	brcc	.+12     	; 0x8c64 <sqrt+0x40>
    8c58:	62 1b       	sub	r22, r18
    8c5a:	73 0b       	sbc	r23, r19
    8c5c:	84 0b       	sbc	r24, r20
    8c5e:	20 29       	or	r18, r0
    8c60:	31 29       	or	r19, r1
    8c62:	4a 2b       	or	r20, r26
    8c64:	a6 95       	lsr	r26
    8c66:	17 94       	ror	r1
    8c68:	07 94       	ror	r0
    8c6a:	20 25       	eor	r18, r0
    8c6c:	31 25       	eor	r19, r1
    8c6e:	4a 27       	eor	r20, r26
    8c70:	58 f7       	brcc	.-42     	; 0x8c48 <sqrt+0x24>
    8c72:	66 0f       	add	r22, r22
    8c74:	77 1f       	adc	r23, r23
    8c76:	88 1f       	adc	r24, r24
    8c78:	20 f0       	brcs	.+8      	; 0x8c82 <sqrt+0x5e>
    8c7a:	26 17       	cp	r18, r22
    8c7c:	37 07       	cpc	r19, r23
    8c7e:	48 07       	cpc	r20, r24
    8c80:	30 f4       	brcc	.+12     	; 0x8c8e <sqrt+0x6a>
    8c82:	62 0b       	sbc	r22, r18
    8c84:	73 0b       	sbc	r23, r19
    8c86:	84 0b       	sbc	r24, r20
    8c88:	20 0d       	add	r18, r0
    8c8a:	31 1d       	adc	r19, r1
    8c8c:	41 1d       	adc	r20, r1
    8c8e:	a0 95       	com	r26
    8c90:	81 f7       	brne	.-32     	; 0x8c72 <sqrt+0x4e>
    8c92:	b9 01       	movw	r22, r18
    8c94:	84 2f       	mov	r24, r20
    8c96:	91 58       	subi	r25, 0x81	; 129
    8c98:	88 0f       	add	r24, r24
    8c9a:	96 95       	lsr	r25
    8c9c:	87 95       	ror	r24
    8c9e:	08 95       	ret

00008ca0 <square>:
    8ca0:	9b 01       	movw	r18, r22
    8ca2:	ac 01       	movw	r20, r24
    8ca4:	52 cf       	rjmp	.-348    	; 0x8b4a <__mulsf3>

00008ca6 <trunc>:
    8ca6:	61 de       	rcall	.-830    	; 0x896a <__fp_trunc>
    8ca8:	20 f0       	brcs	.+8      	; 0x8cb2 <trunc+0xc>
    8caa:	9f 37       	cpi	r25, 0x7F	; 127
    8cac:	08 f4       	brcc	.+2      	; 0x8cb0 <trunc+0xa>
    8cae:	75 ce       	rjmp	.-790    	; 0x899a <__fp_szero>
    8cb0:	91 cd       	rjmp	.-1246   	; 0x87d4 <__fp_mintl>
    8cb2:	ab cd       	rjmp	.-1194   	; 0x880a <__fp_mpack>

00008cb4 <__unordsf2>:
    8cb4:	65 dd       	rcall	.-1334   	; 0x8780 <__fp_cmp>
    8cb6:	88 0b       	sbc	r24, r24
    8cb8:	99 0b       	sbc	r25, r25
    8cba:	08 95       	ret

00008cbc <__fp_norm2>:
    8cbc:	91 50       	subi	r25, 0x01	; 1
    8cbe:	50 40       	sbci	r21, 0x00	; 0
    8cc0:	66 0f       	add	r22, r22
    8cc2:	77 1f       	adc	r23, r23
    8cc4:	88 1f       	adc	r24, r24
    8cc6:	d2 f7       	brpl	.-12     	; 0x8cbc <__fp_norm2>
    8cc8:	08 95       	ret

00008cca <__fp_powsodd>:
    8cca:	9f 93       	push	r25
    8ccc:	8f 93       	push	r24
    8cce:	7f 93       	push	r23
    8cd0:	6f 93       	push	r22
    8cd2:	ff 93       	push	r31
    8cd4:	ef 93       	push	r30
    8cd6:	9b 01       	movw	r18, r22
    8cd8:	ac 01       	movw	r20, r24
    8cda:	37 df       	rcall	.-402    	; 0x8b4a <__mulsf3>
    8cdc:	ef 91       	pop	r30
    8cde:	ff 91       	pop	r31
    8ce0:	a5 dd       	rcall	.-1206   	; 0x882c <__fp_powser>
    8ce2:	2f 91       	pop	r18
    8ce4:	3f 91       	pop	r19
    8ce6:	4f 91       	pop	r20
    8ce8:	5f 91       	pop	r21
    8cea:	2f cf       	rjmp	.-418    	; 0x8b4a <__mulsf3>

00008cec <__mulsi3>:
    8cec:	62 9f       	mul	r22, r18
    8cee:	d0 01       	movw	r26, r0
    8cf0:	73 9f       	mul	r23, r19
    8cf2:	f0 01       	movw	r30, r0
    8cf4:	82 9f       	mul	r24, r18
    8cf6:	e0 0d       	add	r30, r0
    8cf8:	f1 1d       	adc	r31, r1
    8cfa:	64 9f       	mul	r22, r20
    8cfc:	e0 0d       	add	r30, r0
    8cfe:	f1 1d       	adc	r31, r1
    8d00:	92 9f       	mul	r25, r18
    8d02:	f0 0d       	add	r31, r0
    8d04:	83 9f       	mul	r24, r19
    8d06:	f0 0d       	add	r31, r0
    8d08:	74 9f       	mul	r23, r20
    8d0a:	f0 0d       	add	r31, r0
    8d0c:	65 9f       	mul	r22, r21
    8d0e:	f0 0d       	add	r31, r0
    8d10:	99 27       	eor	r25, r25
    8d12:	72 9f       	mul	r23, r18
    8d14:	b0 0d       	add	r27, r0
    8d16:	e1 1d       	adc	r30, r1
    8d18:	f9 1f       	adc	r31, r25
    8d1a:	63 9f       	mul	r22, r19
    8d1c:	b0 0d       	add	r27, r0
    8d1e:	e1 1d       	adc	r30, r1
    8d20:	f9 1f       	adc	r31, r25
    8d22:	bd 01       	movw	r22, r26
    8d24:	cf 01       	movw	r24, r30
    8d26:	11 24       	eor	r1, r1
    8d28:	08 95       	ret

00008d2a <__udivmodsi4>:
    8d2a:	a1 e2       	ldi	r26, 0x21	; 33
    8d2c:	1a 2e       	mov	r1, r26
    8d2e:	aa 1b       	sub	r26, r26
    8d30:	bb 1b       	sub	r27, r27
    8d32:	fd 01       	movw	r30, r26
    8d34:	0d c0       	rjmp	.+26     	; 0x8d50 <__udivmodsi4_ep>

00008d36 <__udivmodsi4_loop>:
    8d36:	aa 1f       	adc	r26, r26
    8d38:	bb 1f       	adc	r27, r27
    8d3a:	ee 1f       	adc	r30, r30
    8d3c:	ff 1f       	adc	r31, r31
    8d3e:	a2 17       	cp	r26, r18
    8d40:	b3 07       	cpc	r27, r19
    8d42:	e4 07       	cpc	r30, r20
    8d44:	f5 07       	cpc	r31, r21
    8d46:	20 f0       	brcs	.+8      	; 0x8d50 <__udivmodsi4_ep>
    8d48:	a2 1b       	sub	r26, r18
    8d4a:	b3 0b       	sbc	r27, r19
    8d4c:	e4 0b       	sbc	r30, r20
    8d4e:	f5 0b       	sbc	r31, r21

00008d50 <__udivmodsi4_ep>:
    8d50:	66 1f       	adc	r22, r22
    8d52:	77 1f       	adc	r23, r23
    8d54:	88 1f       	adc	r24, r24
    8d56:	99 1f       	adc	r25, r25
    8d58:	1a 94       	dec	r1
    8d5a:	69 f7       	brne	.-38     	; 0x8d36 <__udivmodsi4_loop>
    8d5c:	60 95       	com	r22
    8d5e:	70 95       	com	r23
    8d60:	80 95       	com	r24
    8d62:	90 95       	com	r25
    8d64:	9b 01       	movw	r18, r22
    8d66:	ac 01       	movw	r20, r24
    8d68:	bd 01       	movw	r22, r26
    8d6a:	cf 01       	movw	r24, r30
    8d6c:	08 95       	ret

00008d6e <__prologue_saves__>:
    8d6e:	2f 92       	push	r2
    8d70:	3f 92       	push	r3
    8d72:	4f 92       	push	r4
    8d74:	5f 92       	push	r5
    8d76:	6f 92       	push	r6
    8d78:	7f 92       	push	r7
    8d7a:	8f 92       	push	r8
    8d7c:	9f 92       	push	r9
    8d7e:	af 92       	push	r10
    8d80:	bf 92       	push	r11
    8d82:	cf 92       	push	r12
    8d84:	df 92       	push	r13
    8d86:	ef 92       	push	r14
    8d88:	ff 92       	push	r15
    8d8a:	0f 93       	push	r16
    8d8c:	1f 93       	push	r17
    8d8e:	cf 93       	push	r28
    8d90:	df 93       	push	r29
    8d92:	cd b7       	in	r28, 0x3d	; 61
    8d94:	de b7       	in	r29, 0x3e	; 62
    8d96:	ca 1b       	sub	r28, r26
    8d98:	db 0b       	sbc	r29, r27
    8d9a:	0f b6       	in	r0, 0x3f	; 63
    8d9c:	f8 94       	cli
    8d9e:	de bf       	out	0x3e, r29	; 62
    8da0:	0f be       	out	0x3f, r0	; 63
    8da2:	cd bf       	out	0x3d, r28	; 61
    8da4:	19 94       	eijmp

00008da6 <__epilogue_restores__>:
    8da6:	2a 88       	ldd	r2, Y+18	; 0x12
    8da8:	39 88       	ldd	r3, Y+17	; 0x11
    8daa:	48 88       	ldd	r4, Y+16	; 0x10
    8dac:	5f 84       	ldd	r5, Y+15	; 0x0f
    8dae:	6e 84       	ldd	r6, Y+14	; 0x0e
    8db0:	7d 84       	ldd	r7, Y+13	; 0x0d
    8db2:	8c 84       	ldd	r8, Y+12	; 0x0c
    8db4:	9b 84       	ldd	r9, Y+11	; 0x0b
    8db6:	aa 84       	ldd	r10, Y+10	; 0x0a
    8db8:	b9 84       	ldd	r11, Y+9	; 0x09
    8dba:	c8 84       	ldd	r12, Y+8	; 0x08
    8dbc:	df 80       	ldd	r13, Y+7	; 0x07
    8dbe:	ee 80       	ldd	r14, Y+6	; 0x06
    8dc0:	fd 80       	ldd	r15, Y+5	; 0x05
    8dc2:	0c 81       	ldd	r16, Y+4	; 0x04
    8dc4:	1b 81       	ldd	r17, Y+3	; 0x03
    8dc6:	aa 81       	ldd	r26, Y+2	; 0x02
    8dc8:	b9 81       	ldd	r27, Y+1	; 0x01
    8dca:	ce 0f       	add	r28, r30
    8dcc:	d1 1d       	adc	r29, r1
    8dce:	0f b6       	in	r0, 0x3f	; 63
    8dd0:	f8 94       	cli
    8dd2:	de bf       	out	0x3e, r29	; 62
    8dd4:	0f be       	out	0x3f, r0	; 63
    8dd6:	cd bf       	out	0x3d, r28	; 61
    8dd8:	ed 01       	movw	r28, r26
    8dda:	08 95       	ret

00008ddc <strtod>:
    8ddc:	8f 92       	push	r8
    8dde:	9f 92       	push	r9
    8de0:	af 92       	push	r10
    8de2:	bf 92       	push	r11
    8de4:	cf 92       	push	r12
    8de6:	df 92       	push	r13
    8de8:	ef 92       	push	r14
    8dea:	ff 92       	push	r15
    8dec:	0f 93       	push	r16
    8dee:	1f 93       	push	r17
    8df0:	cf 93       	push	r28
    8df2:	df 93       	push	r29
    8df4:	ec 01       	movw	r28, r24
    8df6:	5b 01       	movw	r10, r22
    8df8:	61 15       	cp	r22, r1
    8dfa:	71 05       	cpc	r23, r1
    8dfc:	19 f0       	breq	.+6      	; 0x8e04 <strtod+0x28>
    8dfe:	fb 01       	movw	r30, r22
    8e00:	80 83       	st	Z, r24
    8e02:	91 83       	std	Z+1, r25	; 0x01
    8e04:	f9 90       	ld	r15, Y+
    8e06:	8f 2d       	mov	r24, r15
    8e08:	90 e0       	ldi	r25, 0x00	; 0
    8e0a:	0e 94 52 49 	call	0x92a4	; 0x92a4 <isspace>
    8e0e:	89 2b       	or	r24, r25
    8e10:	c9 f7       	brne	.-14     	; 0x8e04 <strtod+0x28>
    8e12:	fd e2       	ldi	r31, 0x2D	; 45
    8e14:	ff 16       	cp	r15, r31
    8e16:	21 f4       	brne	.+8      	; 0x8e20 <strtod+0x44>
    8e18:	f9 90       	ld	r15, Y+
    8e1a:	ee 24       	eor	r14, r14
    8e1c:	e3 94       	inc	r14
    8e1e:	05 c0       	rjmp	.+10     	; 0x8e2a <strtod+0x4e>
    8e20:	2b e2       	ldi	r18, 0x2B	; 43
    8e22:	f2 16       	cp	r15, r18
    8e24:	09 f4       	brne	.+2      	; 0x8e28 <strtod+0x4c>
    8e26:	f9 90       	ld	r15, Y+
    8e28:	ee 24       	eor	r14, r14
    8e2a:	8e 01       	movw	r16, r28
    8e2c:	01 50       	subi	r16, 0x01	; 1
    8e2e:	10 40       	sbci	r17, 0x00	; 0
    8e30:	c8 01       	movw	r24, r16
    8e32:	67 e1       	ldi	r22, 0x17	; 23
    8e34:	7e e1       	ldi	r23, 0x1E	; 30
    8e36:	43 e0       	ldi	r20, 0x03	; 3
    8e38:	50 e0       	ldi	r21, 0x00	; 0
    8e3a:	0e 94 5a 49 	call	0x92b4	; 0x92b4 <strncasecmp_P>
    8e3e:	89 2b       	or	r24, r25
    8e40:	01 f5       	brne	.+64     	; 0x8e82 <strtod+0xa6>
    8e42:	8e 01       	movw	r16, r28
    8e44:	0e 5f       	subi	r16, 0xFE	; 254
    8e46:	1f 4f       	sbci	r17, 0xFF	; 255
    8e48:	c8 01       	movw	r24, r16
    8e4a:	6a e1       	ldi	r22, 0x1A	; 26
    8e4c:	7e e1       	ldi	r23, 0x1E	; 30
    8e4e:	45 e0       	ldi	r20, 0x05	; 5
    8e50:	50 e0       	ldi	r21, 0x00	; 0
    8e52:	0e 94 5a 49 	call	0x92b4	; 0x92b4 <strncasecmp_P>
    8e56:	89 2b       	or	r24, r25
    8e58:	19 f4       	brne	.+6      	; 0x8e60 <strtod+0x84>
    8e5a:	8e 01       	movw	r16, r28
    8e5c:	09 5f       	subi	r16, 0xF9	; 249
    8e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    8e60:	a1 14       	cp	r10, r1
    8e62:	b1 04       	cpc	r11, r1
    8e64:	19 f0       	breq	.+6      	; 0x8e6c <strtod+0x90>
    8e66:	f5 01       	movw	r30, r10
    8e68:	00 83       	st	Z, r16
    8e6a:	11 83       	std	Z+1, r17	; 0x01
    8e6c:	e0 fc       	sbrc	r14, 0
    8e6e:	04 c0       	rjmp	.+8      	; 0x8e78 <strtod+0x9c>
    8e70:	70 e0       	ldi	r23, 0x00	; 0
    8e72:	90 e0       	ldi	r25, 0x00	; 0
    8e74:	80 e8       	ldi	r24, 0x80	; 128
    8e76:	14 c0       	rjmp	.+40     	; 0x8ea0 <strtod+0xc4>
    8e78:	70 e0       	ldi	r23, 0x00	; 0
    8e7a:	90 e0       	ldi	r25, 0x00	; 0
    8e7c:	80 e8       	ldi	r24, 0x80	; 128
    8e7e:	6f ef       	ldi	r22, 0xFF	; 255
    8e80:	08 c1       	rjmp	.+528    	; 0x9092 <strtod+0x2b6>
    8e82:	c8 01       	movw	r24, r16
    8e84:	6f e1       	ldi	r22, 0x1F	; 31
    8e86:	7e e1       	ldi	r23, 0x1E	; 30
    8e88:	43 e0       	ldi	r20, 0x03	; 3
    8e8a:	50 e0       	ldi	r21, 0x00	; 0
    8e8c:	0e 94 5a 49 	call	0x92b4	; 0x92b4 <strncasecmp_P>
    8e90:	89 2b       	or	r24, r25
    8e92:	69 f4       	brne	.+26     	; 0x8eae <strtod+0xd2>
    8e94:	a1 14       	cp	r10, r1
    8e96:	b1 04       	cpc	r11, r1
    8e98:	29 f4       	brne	.+10     	; 0x8ea4 <strtod+0xc8>
    8e9a:	70 e0       	ldi	r23, 0x00	; 0
    8e9c:	90 e0       	ldi	r25, 0x00	; 0
    8e9e:	80 ec       	ldi	r24, 0xC0	; 192
    8ea0:	6f e7       	ldi	r22, 0x7F	; 127
    8ea2:	f7 c0       	rjmp	.+494    	; 0x9092 <strtod+0x2b6>
    8ea4:	22 96       	adiw	r28, 0x02	; 2
    8ea6:	f5 01       	movw	r30, r10
    8ea8:	c0 83       	st	Z, r28
    8eaa:	d1 83       	std	Z+1, r29	; 0x01
    8eac:	f6 cf       	rjmp	.-20     	; 0x8e9a <strtod+0xbe>
    8eae:	88 24       	eor	r8, r8
    8eb0:	99 24       	eor	r9, r9
    8eb2:	40 e0       	ldi	r20, 0x00	; 0
    8eb4:	50 e0       	ldi	r21, 0x00	; 0
    8eb6:	60 e0       	ldi	r22, 0x00	; 0
    8eb8:	70 e0       	ldi	r23, 0x00	; 0
    8eba:	ef 2d       	mov	r30, r15
    8ebc:	e0 53       	subi	r30, 0x30	; 48
    8ebe:	ea 30       	cpi	r30, 0x0A	; 10
    8ec0:	a0 f5       	brcc	.+104    	; 0x8f2a <strtod+0x14e>
    8ec2:	f2 e0       	ldi	r31, 0x02	; 2
    8ec4:	ef 2a       	or	r14, r31
    8ec6:	8e 2d       	mov	r24, r14
    8ec8:	90 e0       	ldi	r25, 0x00	; 0
    8eca:	9c 01       	movw	r18, r24
    8ecc:	28 70       	andi	r18, 0x08	; 8
    8ece:	30 70       	andi	r19, 0x00	; 0
    8ed0:	e2 fe       	sbrs	r14, 2
    8ed2:	06 c0       	rjmp	.+12     	; 0x8ee0 <strtod+0x104>
    8ed4:	23 2b       	or	r18, r19
    8ed6:	79 f5       	brne	.+94     	; 0x8f36 <strtod+0x15a>
    8ed8:	08 94       	sec
    8eda:	81 1c       	adc	r8, r1
    8edc:	91 1c       	adc	r9, r1
    8ede:	2b c0       	rjmp	.+86     	; 0x8f36 <strtod+0x15a>
    8ee0:	23 2b       	or	r18, r19
    8ee2:	19 f0       	breq	.+6      	; 0x8eea <strtod+0x10e>
    8ee4:	08 94       	sec
    8ee6:	81 08       	sbc	r8, r1
    8ee8:	91 08       	sbc	r9, r1
    8eea:	db 01       	movw	r26, r22
    8eec:	ca 01       	movw	r24, r20
    8eee:	12 e0       	ldi	r17, 0x02	; 2
    8ef0:	88 0f       	add	r24, r24
    8ef2:	99 1f       	adc	r25, r25
    8ef4:	aa 1f       	adc	r26, r26
    8ef6:	bb 1f       	adc	r27, r27
    8ef8:	1a 95       	dec	r17
    8efa:	d1 f7       	brne	.-12     	; 0x8ef0 <strtod+0x114>
    8efc:	48 0f       	add	r20, r24
    8efe:	59 1f       	adc	r21, r25
    8f00:	6a 1f       	adc	r22, r26
    8f02:	7b 1f       	adc	r23, r27
    8f04:	44 0f       	add	r20, r20
    8f06:	55 1f       	adc	r21, r21
    8f08:	66 1f       	adc	r22, r22
    8f0a:	77 1f       	adc	r23, r23
    8f0c:	4e 0f       	add	r20, r30
    8f0e:	51 1d       	adc	r21, r1
    8f10:	61 1d       	adc	r22, r1
    8f12:	71 1d       	adc	r23, r1
    8f14:	48 39       	cpi	r20, 0x98	; 152
    8f16:	29 e9       	ldi	r18, 0x99	; 153
    8f18:	52 07       	cpc	r21, r18
    8f1a:	29 e9       	ldi	r18, 0x99	; 153
    8f1c:	62 07       	cpc	r22, r18
    8f1e:	29 e1       	ldi	r18, 0x19	; 25
    8f20:	72 07       	cpc	r23, r18
    8f22:	48 f0       	brcs	.+18     	; 0x8f36 <strtod+0x15a>
    8f24:	84 e0       	ldi	r24, 0x04	; 4
    8f26:	e8 2a       	or	r14, r24
    8f28:	06 c0       	rjmp	.+12     	; 0x8f36 <strtod+0x15a>
    8f2a:	ee 3f       	cpi	r30, 0xFE	; 254
    8f2c:	31 f4       	brne	.+12     	; 0x8f3a <strtod+0x15e>
    8f2e:	e3 fc       	sbrc	r14, 3
    8f30:	39 c0       	rjmp	.+114    	; 0x8fa4 <strtod+0x1c8>
    8f32:	98 e0       	ldi	r25, 0x08	; 8
    8f34:	e9 2a       	or	r14, r25
    8f36:	f9 90       	ld	r15, Y+
    8f38:	c0 cf       	rjmp	.-128    	; 0x8eba <strtod+0xde>
    8f3a:	e5 33       	cpi	r30, 0x35	; 53
    8f3c:	11 f0       	breq	.+4      	; 0x8f42 <strtod+0x166>
    8f3e:	e5 31       	cpi	r30, 0x15	; 21
    8f40:	89 f5       	brne	.+98     	; 0x8fa4 <strtod+0x1c8>
    8f42:	29 91       	ld	r18, Y+
    8f44:	2d 32       	cpi	r18, 0x2D	; 45
    8f46:	19 f4       	brne	.+6      	; 0x8f4e <strtod+0x172>
    8f48:	e0 e1       	ldi	r30, 0x10	; 16
    8f4a:	ee 2a       	or	r14, r30
    8f4c:	05 c0       	rjmp	.+10     	; 0x8f58 <strtod+0x17c>
    8f4e:	2b 32       	cpi	r18, 0x2B	; 43
    8f50:	19 f0       	breq	.+6      	; 0x8f58 <strtod+0x17c>
    8f52:	81 e0       	ldi	r24, 0x01	; 1
    8f54:	90 e0       	ldi	r25, 0x00	; 0
    8f56:	03 c0       	rjmp	.+6      	; 0x8f5e <strtod+0x182>
    8f58:	29 91       	ld	r18, Y+
    8f5a:	82 e0       	ldi	r24, 0x02	; 2
    8f5c:	90 e0       	ldi	r25, 0x00	; 0
    8f5e:	e2 2f       	mov	r30, r18
    8f60:	e0 53       	subi	r30, 0x30	; 48
    8f62:	ea 30       	cpi	r30, 0x0A	; 10
    8f64:	18 f0       	brcs	.+6      	; 0x8f6c <strtod+0x190>
    8f66:	c8 1b       	sub	r28, r24
    8f68:	d9 0b       	sbc	r29, r25
    8f6a:	1c c0       	rjmp	.+56     	; 0x8fa4 <strtod+0x1c8>
    8f6c:	20 e0       	ldi	r18, 0x00	; 0
    8f6e:	30 e0       	ldi	r19, 0x00	; 0
    8f70:	fc e0       	ldi	r31, 0x0C	; 12
    8f72:	20 38       	cpi	r18, 0x80	; 128
    8f74:	3f 07       	cpc	r19, r31
    8f76:	5c f4       	brge	.+22     	; 0x8f8e <strtod+0x1b2>
    8f78:	c9 01       	movw	r24, r18
    8f7a:	88 0f       	add	r24, r24
    8f7c:	99 1f       	adc	r25, r25
    8f7e:	88 0f       	add	r24, r24
    8f80:	99 1f       	adc	r25, r25
    8f82:	28 0f       	add	r18, r24
    8f84:	39 1f       	adc	r19, r25
    8f86:	22 0f       	add	r18, r18
    8f88:	33 1f       	adc	r19, r19
    8f8a:	2e 0f       	add	r18, r30
    8f8c:	31 1d       	adc	r19, r1
    8f8e:	e9 91       	ld	r30, Y+
    8f90:	e0 53       	subi	r30, 0x30	; 48
    8f92:	ea 30       	cpi	r30, 0x0A	; 10
    8f94:	68 f3       	brcs	.-38     	; 0x8f70 <strtod+0x194>
    8f96:	e4 fe       	sbrs	r14, 4
    8f98:	03 c0       	rjmp	.+6      	; 0x8fa0 <strtod+0x1c4>
    8f9a:	30 95       	com	r19
    8f9c:	21 95       	neg	r18
    8f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    8fa0:	82 0e       	add	r8, r18
    8fa2:	93 1e       	adc	r9, r19
    8fa4:	ce 2c       	mov	r12, r14
    8fa6:	dd 24       	eor	r13, r13
    8fa8:	e1 fe       	sbrs	r14, 1
    8faa:	07 c0       	rjmp	.+14     	; 0x8fba <strtod+0x1de>
    8fac:	a1 14       	cp	r10, r1
    8fae:	b1 04       	cpc	r11, r1
    8fb0:	21 f0       	breq	.+8      	; 0x8fba <strtod+0x1de>
    8fb2:	21 97       	sbiw	r28, 0x01	; 1
    8fb4:	f5 01       	movw	r30, r10
    8fb6:	c0 83       	st	Z, r28
    8fb8:	d1 83       	std	Z+1, r29	; 0x01
    8fba:	cb 01       	movw	r24, r22
    8fbc:	ba 01       	movw	r22, r20
    8fbe:	0e 94 83 43 	call	0x8706	; 0x8706 <__floatunsisf>
    8fc2:	7b 01       	movw	r14, r22
    8fc4:	8c 01       	movw	r16, r24
    8fc6:	f3 e0       	ldi	r31, 0x03	; 3
    8fc8:	cf 22       	and	r12, r31
    8fca:	dd 24       	eor	r13, r13
    8fcc:	23 e0       	ldi	r18, 0x03	; 3
    8fce:	c2 16       	cp	r12, r18
    8fd0:	d1 04       	cpc	r13, r1
    8fd2:	21 f4       	brne	.+8      	; 0x8fdc <strtod+0x200>
    8fd4:	17 fb       	bst	r17, 7
    8fd6:	10 95       	com	r17
    8fd8:	17 f9       	bld	r17, 7
    8fda:	10 95       	com	r17
    8fdc:	57 01       	movw	r10, r14
    8fde:	68 01       	movw	r12, r16
    8fe0:	c8 01       	movw	r24, r16
    8fe2:	b7 01       	movw	r22, r14
    8fe4:	20 e0       	ldi	r18, 0x00	; 0
    8fe6:	30 e0       	ldi	r19, 0x00	; 0
    8fe8:	40 e0       	ldi	r20, 0x00	; 0
    8fea:	50 e0       	ldi	r21, 0x00	; 0
    8fec:	0e 94 e3 42 	call	0x85c6	; 0x85c6 <__cmpsf2>
    8ff0:	88 23       	and	r24, r24
    8ff2:	09 f4       	brne	.+2      	; 0x8ff6 <strtod+0x21a>
    8ff4:	4a c0       	rjmp	.+148    	; 0x908a <strtod+0x2ae>
    8ff6:	97 fe       	sbrs	r9, 7
    8ff8:	0d c0       	rjmp	.+26     	; 0x9014 <strtod+0x238>
    8ffa:	26 e3       	ldi	r18, 0x36	; 54
    8ffc:	e2 2e       	mov	r14, r18
    8ffe:	2e e1       	ldi	r18, 0x1E	; 30
    9000:	f2 2e       	mov	r15, r18
    9002:	90 94       	com	r9
    9004:	81 94       	neg	r8
    9006:	91 08       	sbc	r9, r1
    9008:	93 94       	inc	r9
    900a:	c0 e2       	ldi	r28, 0x20	; 32
    900c:	d0 e0       	ldi	r29, 0x00	; 0
    900e:	00 e0       	ldi	r16, 0x00	; 0
    9010:	10 e0       	ldi	r17, 0x00	; 0
    9012:	12 c0       	rjmp	.+36     	; 0x9038 <strtod+0x25c>
    9014:	9e e4       	ldi	r25, 0x4E	; 78
    9016:	e9 2e       	mov	r14, r25
    9018:	9e e1       	ldi	r25, 0x1E	; 30
    901a:	f9 2e       	mov	r15, r25
    901c:	f6 cf       	rjmp	.-20     	; 0x900a <strtod+0x22e>
    901e:	f7 01       	movw	r30, r14
    9020:	25 91       	lpm	r18, Z+
    9022:	35 91       	lpm	r19, Z+
    9024:	45 91       	lpm	r20, Z+
    9026:	54 91       	lpm	r21, Z+
    9028:	c6 01       	movw	r24, r12
    902a:	b5 01       	movw	r22, r10
    902c:	0e 94 a5 45 	call	0x8b4a	; 0x8b4a <__mulsf3>
    9030:	5b 01       	movw	r10, r22
    9032:	6c 01       	movw	r12, r24
    9034:	8c 1a       	sub	r8, r28
    9036:	9d 0a       	sbc	r9, r29
    9038:	8c 16       	cp	r8, r28
    903a:	9d 06       	cpc	r9, r29
    903c:	84 f7       	brge	.-32     	; 0x901e <strtod+0x242>
    903e:	d5 95       	asr	r29
    9040:	c7 95       	ror	r28
    9042:	0f 5f       	subi	r16, 0xFF	; 255
    9044:	1f 4f       	sbci	r17, 0xFF	; 255
    9046:	06 30       	cpi	r16, 0x06	; 6
    9048:	11 05       	cpc	r17, r1
    904a:	29 f0       	breq	.+10     	; 0x9056 <strtod+0x27a>
    904c:	8c ef       	ldi	r24, 0xFC	; 252
    904e:	9f ef       	ldi	r25, 0xFF	; 255
    9050:	e8 0e       	add	r14, r24
    9052:	f9 1e       	adc	r15, r25
    9054:	f1 cf       	rjmp	.-30     	; 0x9038 <strtod+0x25c>
    9056:	c5 01       	movw	r24, r10
    9058:	d6 01       	movw	r26, r12
    905a:	7c 01       	movw	r14, r24
    905c:	8d 01       	movw	r16, r26
    905e:	8c 2d       	mov	r24, r12
    9060:	88 0f       	add	r24, r24
    9062:	8d 2d       	mov	r24, r13
    9064:	88 1f       	adc	r24, r24
    9066:	8f 3f       	cpi	r24, 0xFF	; 255
    9068:	51 f0       	breq	.+20     	; 0x907e <strtod+0x2a2>
    906a:	c6 01       	movw	r24, r12
    906c:	b5 01       	movw	r22, r10
    906e:	20 e0       	ldi	r18, 0x00	; 0
    9070:	30 e0       	ldi	r19, 0x00	; 0
    9072:	40 e0       	ldi	r20, 0x00	; 0
    9074:	50 e0       	ldi	r21, 0x00	; 0
    9076:	0e 94 e3 42 	call	0x85c6	; 0x85c6 <__cmpsf2>
    907a:	88 23       	and	r24, r24
    907c:	31 f4       	brne	.+12     	; 0x908a <strtod+0x2ae>
    907e:	82 e2       	ldi	r24, 0x22	; 34
    9080:	90 e0       	ldi	r25, 0x00	; 0
    9082:	80 93 86 25 	sts	0x2586, r24
    9086:	90 93 87 25 	sts	0x2587, r25
    908a:	7e 2d       	mov	r23, r14
    908c:	9f 2d       	mov	r25, r15
    908e:	80 2f       	mov	r24, r16
    9090:	61 2f       	mov	r22, r17
    9092:	27 2f       	mov	r18, r23
    9094:	39 2f       	mov	r19, r25
    9096:	48 2f       	mov	r20, r24
    9098:	56 2f       	mov	r21, r22
    909a:	b9 01       	movw	r22, r18
    909c:	ca 01       	movw	r24, r20
    909e:	df 91       	pop	r29
    90a0:	cf 91       	pop	r28
    90a2:	1f 91       	pop	r17
    90a4:	0f 91       	pop	r16
    90a6:	ff 90       	pop	r15
    90a8:	ef 90       	pop	r14
    90aa:	df 90       	pop	r13
    90ac:	cf 90       	pop	r12
    90ae:	bf 90       	pop	r11
    90b0:	af 90       	pop	r10
    90b2:	9f 90       	pop	r9
    90b4:	8f 90       	pop	r8
    90b6:	08 95       	ret

000090b8 <atoi>:
    90b8:	fc 01       	movw	r30, r24
    90ba:	88 27       	eor	r24, r24
    90bc:	99 27       	eor	r25, r25
    90be:	e8 94       	clt
    90c0:	21 91       	ld	r18, Z+
    90c2:	20 32       	cpi	r18, 0x20	; 32
    90c4:	e9 f3       	breq	.-6      	; 0x90c0 <atoi+0x8>
    90c6:	29 30       	cpi	r18, 0x09	; 9
    90c8:	10 f0       	brcs	.+4      	; 0x90ce <atoi+0x16>
    90ca:	2e 30       	cpi	r18, 0x0E	; 14
    90cc:	c8 f3       	brcs	.-14     	; 0x90c0 <atoi+0x8>
    90ce:	2b 32       	cpi	r18, 0x2B	; 43
    90d0:	41 f0       	breq	.+16     	; 0x90e2 <atoi+0x2a>
    90d2:	2d 32       	cpi	r18, 0x2D	; 45
    90d4:	39 f4       	brne	.+14     	; 0x90e4 <atoi+0x2c>
    90d6:	68 94       	set
    90d8:	04 c0       	rjmp	.+8      	; 0x90e2 <atoi+0x2a>
    90da:	0e 94 88 49 	call	0x9310	; 0x9310 <__mulhi_const_10>
    90de:	82 0f       	add	r24, r18
    90e0:	91 1d       	adc	r25, r1
    90e2:	21 91       	ld	r18, Z+
    90e4:	20 53       	subi	r18, 0x30	; 48
    90e6:	2a 30       	cpi	r18, 0x0A	; 10
    90e8:	c0 f3       	brcs	.-16     	; 0x90da <atoi+0x22>
    90ea:	1e f4       	brtc	.+6      	; 0x90f2 <atoi+0x3a>
    90ec:	90 95       	com	r25
    90ee:	81 95       	neg	r24
    90f0:	9f 4f       	sbci	r25, 0xFF	; 255
    90f2:	08 95       	ret

000090f4 <__ftoa_engine>:
    90f4:	28 30       	cpi	r18, 0x08	; 8
    90f6:	08 f0       	brcs	.+2      	; 0x90fa <__ftoa_engine+0x6>
    90f8:	27 e0       	ldi	r18, 0x07	; 7
    90fa:	33 27       	eor	r19, r19
    90fc:	da 01       	movw	r26, r20
    90fe:	99 0f       	add	r25, r25
    9100:	31 1d       	adc	r19, r1
    9102:	87 fd       	sbrc	r24, 7
    9104:	91 60       	ori	r25, 0x01	; 1
    9106:	00 96       	adiw	r24, 0x00	; 0
    9108:	61 05       	cpc	r22, r1
    910a:	71 05       	cpc	r23, r1
    910c:	39 f4       	brne	.+14     	; 0x911c <__ftoa_engine+0x28>
    910e:	32 60       	ori	r19, 0x02	; 2
    9110:	2e 5f       	subi	r18, 0xFE	; 254
    9112:	3d 93       	st	X+, r19
    9114:	30 e3       	ldi	r19, 0x30	; 48
    9116:	2a 95       	dec	r18
    9118:	e1 f7       	brne	.-8      	; 0x9112 <__ftoa_engine+0x1e>
    911a:	08 95       	ret
    911c:	9f 3f       	cpi	r25, 0xFF	; 255
    911e:	30 f0       	brcs	.+12     	; 0x912c <__ftoa_engine+0x38>
    9120:	80 38       	cpi	r24, 0x80	; 128
    9122:	71 05       	cpc	r23, r1
    9124:	61 05       	cpc	r22, r1
    9126:	09 f0       	breq	.+2      	; 0x912a <__ftoa_engine+0x36>
    9128:	3c 5f       	subi	r19, 0xFC	; 252
    912a:	3c 5f       	subi	r19, 0xFC	; 252
    912c:	3d 93       	st	X+, r19
    912e:	91 30       	cpi	r25, 0x01	; 1
    9130:	08 f0       	brcs	.+2      	; 0x9134 <__ftoa_engine+0x40>
    9132:	80 68       	ori	r24, 0x80	; 128
    9134:	91 1d       	adc	r25, r1
    9136:	df 93       	push	r29
    9138:	cf 93       	push	r28
    913a:	1f 93       	push	r17
    913c:	0f 93       	push	r16
    913e:	ff 92       	push	r15
    9140:	ef 92       	push	r14
    9142:	19 2f       	mov	r17, r25
    9144:	98 7f       	andi	r25, 0xF8	; 248
    9146:	96 95       	lsr	r25
    9148:	e9 2f       	mov	r30, r25
    914a:	96 95       	lsr	r25
    914c:	96 95       	lsr	r25
    914e:	e9 0f       	add	r30, r25
    9150:	ff 27       	eor	r31, r31
    9152:	e4 55       	subi	r30, 0x54	; 84
    9154:	f1 4e       	sbci	r31, 0xE1	; 225
    9156:	99 27       	eor	r25, r25
    9158:	33 27       	eor	r19, r19
    915a:	ee 24       	eor	r14, r14
    915c:	ff 24       	eor	r15, r15
    915e:	a7 01       	movw	r20, r14
    9160:	e7 01       	movw	r28, r14
    9162:	05 90       	lpm	r0, Z+
    9164:	08 94       	sec
    9166:	07 94       	ror	r0
    9168:	28 f4       	brcc	.+10     	; 0x9174 <__ftoa_engine+0x80>
    916a:	36 0f       	add	r19, r22
    916c:	e7 1e       	adc	r14, r23
    916e:	f8 1e       	adc	r15, r24
    9170:	49 1f       	adc	r20, r25
    9172:	51 1d       	adc	r21, r1
    9174:	66 0f       	add	r22, r22
    9176:	77 1f       	adc	r23, r23
    9178:	88 1f       	adc	r24, r24
    917a:	99 1f       	adc	r25, r25
    917c:	06 94       	lsr	r0
    917e:	a1 f7       	brne	.-24     	; 0x9168 <__ftoa_engine+0x74>
    9180:	05 90       	lpm	r0, Z+
    9182:	07 94       	ror	r0
    9184:	28 f4       	brcc	.+10     	; 0x9190 <__ftoa_engine+0x9c>
    9186:	e7 0e       	add	r14, r23
    9188:	f8 1e       	adc	r15, r24
    918a:	49 1f       	adc	r20, r25
    918c:	56 1f       	adc	r21, r22
    918e:	c1 1d       	adc	r28, r1
    9190:	77 0f       	add	r23, r23
    9192:	88 1f       	adc	r24, r24
    9194:	99 1f       	adc	r25, r25
    9196:	66 1f       	adc	r22, r22
    9198:	06 94       	lsr	r0
    919a:	a1 f7       	brne	.-24     	; 0x9184 <__ftoa_engine+0x90>
    919c:	05 90       	lpm	r0, Z+
    919e:	07 94       	ror	r0
    91a0:	28 f4       	brcc	.+10     	; 0x91ac <__ftoa_engine+0xb8>
    91a2:	f8 0e       	add	r15, r24
    91a4:	49 1f       	adc	r20, r25
    91a6:	56 1f       	adc	r21, r22
    91a8:	c7 1f       	adc	r28, r23
    91aa:	d1 1d       	adc	r29, r1
    91ac:	88 0f       	add	r24, r24
    91ae:	99 1f       	adc	r25, r25
    91b0:	66 1f       	adc	r22, r22
    91b2:	77 1f       	adc	r23, r23
    91b4:	06 94       	lsr	r0
    91b6:	a1 f7       	brne	.-24     	; 0x91a0 <__ftoa_engine+0xac>
    91b8:	05 90       	lpm	r0, Z+
    91ba:	07 94       	ror	r0
    91bc:	20 f4       	brcc	.+8      	; 0x91c6 <__ftoa_engine+0xd2>
    91be:	49 0f       	add	r20, r25
    91c0:	56 1f       	adc	r21, r22
    91c2:	c7 1f       	adc	r28, r23
    91c4:	d8 1f       	adc	r29, r24
    91c6:	99 0f       	add	r25, r25
    91c8:	66 1f       	adc	r22, r22
    91ca:	77 1f       	adc	r23, r23
    91cc:	88 1f       	adc	r24, r24
    91ce:	06 94       	lsr	r0
    91d0:	a9 f7       	brne	.-22     	; 0x91bc <__ftoa_engine+0xc8>
    91d2:	84 91       	lpm	r24, Z+
    91d4:	10 95       	com	r17
    91d6:	17 70       	andi	r17, 0x07	; 7
    91d8:	41 f0       	breq	.+16     	; 0x91ea <__ftoa_engine+0xf6>
    91da:	d6 95       	lsr	r29
    91dc:	c7 95       	ror	r28
    91de:	57 95       	ror	r21
    91e0:	47 95       	ror	r20
    91e2:	f7 94       	ror	r15
    91e4:	e7 94       	ror	r14
    91e6:	1a 95       	dec	r17
    91e8:	c1 f7       	brne	.-16     	; 0x91da <__ftoa_engine+0xe6>
    91ea:	e2 e5       	ldi	r30, 0x52	; 82
    91ec:	fe e1       	ldi	r31, 0x1E	; 30
    91ee:	68 94       	set
    91f0:	15 90       	lpm	r1, Z+
    91f2:	15 91       	lpm	r17, Z+
    91f4:	35 91       	lpm	r19, Z+
    91f6:	65 91       	lpm	r22, Z+
    91f8:	95 91       	lpm	r25, Z+
    91fa:	05 90       	lpm	r0, Z+
    91fc:	7f e2       	ldi	r23, 0x2F	; 47
    91fe:	73 95       	inc	r23
    9200:	e1 18       	sub	r14, r1
    9202:	f1 0a       	sbc	r15, r17
    9204:	43 0b       	sbc	r20, r19
    9206:	56 0b       	sbc	r21, r22
    9208:	c9 0b       	sbc	r28, r25
    920a:	d0 09       	sbc	r29, r0
    920c:	c0 f7       	brcc	.-16     	; 0x91fe <__ftoa_engine+0x10a>
    920e:	e1 0c       	add	r14, r1
    9210:	f1 1e       	adc	r15, r17
    9212:	43 1f       	adc	r20, r19
    9214:	56 1f       	adc	r21, r22
    9216:	c9 1f       	adc	r28, r25
    9218:	d0 1d       	adc	r29, r0
    921a:	7e f4       	brtc	.+30     	; 0x923a <__ftoa_engine+0x146>
    921c:	70 33       	cpi	r23, 0x30	; 48
    921e:	11 f4       	brne	.+4      	; 0x9224 <__ftoa_engine+0x130>
    9220:	8a 95       	dec	r24
    9222:	e6 cf       	rjmp	.-52     	; 0x91f0 <__ftoa_engine+0xfc>
    9224:	e8 94       	clt
    9226:	01 50       	subi	r16, 0x01	; 1
    9228:	30 f0       	brcs	.+12     	; 0x9236 <__ftoa_engine+0x142>
    922a:	08 0f       	add	r16, r24
    922c:	0a f4       	brpl	.+2      	; 0x9230 <__ftoa_engine+0x13c>
    922e:	00 27       	eor	r16, r16
    9230:	02 17       	cp	r16, r18
    9232:	08 f4       	brcc	.+2      	; 0x9236 <__ftoa_engine+0x142>
    9234:	20 2f       	mov	r18, r16
    9236:	23 95       	inc	r18
    9238:	02 2f       	mov	r16, r18
    923a:	7a 33       	cpi	r23, 0x3A	; 58
    923c:	28 f0       	brcs	.+10     	; 0x9248 <__ftoa_engine+0x154>
    923e:	79 e3       	ldi	r23, 0x39	; 57
    9240:	7d 93       	st	X+, r23
    9242:	2a 95       	dec	r18
    9244:	e9 f7       	brne	.-6      	; 0x9240 <__ftoa_engine+0x14c>
    9246:	10 c0       	rjmp	.+32     	; 0x9268 <__ftoa_engine+0x174>
    9248:	7d 93       	st	X+, r23
    924a:	2a 95       	dec	r18
    924c:	89 f6       	brne	.-94     	; 0x91f0 <__ftoa_engine+0xfc>
    924e:	06 94       	lsr	r0
    9250:	97 95       	ror	r25
    9252:	67 95       	ror	r22
    9254:	37 95       	ror	r19
    9256:	17 95       	ror	r17
    9258:	17 94       	ror	r1
    925a:	e1 18       	sub	r14, r1
    925c:	f1 0a       	sbc	r15, r17
    925e:	43 0b       	sbc	r20, r19
    9260:	56 0b       	sbc	r21, r22
    9262:	c9 0b       	sbc	r28, r25
    9264:	d0 09       	sbc	r29, r0
    9266:	98 f0       	brcs	.+38     	; 0x928e <__ftoa_engine+0x19a>
    9268:	23 95       	inc	r18
    926a:	7e 91       	ld	r23, -X
    926c:	73 95       	inc	r23
    926e:	7a 33       	cpi	r23, 0x3A	; 58
    9270:	08 f0       	brcs	.+2      	; 0x9274 <__ftoa_engine+0x180>
    9272:	70 e3       	ldi	r23, 0x30	; 48
    9274:	7c 93       	st	X, r23
    9276:	20 13       	cpse	r18, r16
    9278:	b8 f7       	brcc	.-18     	; 0x9268 <__ftoa_engine+0x174>
    927a:	7e 91       	ld	r23, -X
    927c:	70 61       	ori	r23, 0x10	; 16
    927e:	7d 93       	st	X+, r23
    9280:	30 f0       	brcs	.+12     	; 0x928e <__ftoa_engine+0x19a>
    9282:	83 95       	inc	r24
    9284:	71 e3       	ldi	r23, 0x31	; 49
    9286:	7d 93       	st	X+, r23
    9288:	70 e3       	ldi	r23, 0x30	; 48
    928a:	2a 95       	dec	r18
    928c:	e1 f7       	brne	.-8      	; 0x9286 <__ftoa_engine+0x192>
    928e:	11 24       	eor	r1, r1
    9290:	ef 90       	pop	r14
    9292:	ff 90       	pop	r15
    9294:	0f 91       	pop	r16
    9296:	1f 91       	pop	r17
    9298:	cf 91       	pop	r28
    929a:	df 91       	pop	r29
    929c:	99 27       	eor	r25, r25
    929e:	87 fd       	sbrc	r24, 7
    92a0:	90 95       	com	r25
    92a2:	08 95       	ret

000092a4 <isspace>:
    92a4:	91 11       	cpse	r25, r1
    92a6:	21 c1       	rjmp	.+578    	; 0x94ea <__ctype_isfalse>
    92a8:	80 32       	cpi	r24, 0x20	; 32
    92aa:	19 f0       	breq	.+6      	; 0x92b2 <isspace+0xe>
    92ac:	89 50       	subi	r24, 0x09	; 9
    92ae:	85 50       	subi	r24, 0x05	; 5
    92b0:	d0 f7       	brcc	.-12     	; 0x92a6 <isspace+0x2>
    92b2:	08 95       	ret

000092b4 <strncasecmp_P>:
    92b4:	fb 01       	movw	r30, r22
    92b6:	dc 01       	movw	r26, r24
    92b8:	41 50       	subi	r20, 0x01	; 1
    92ba:	50 40       	sbci	r21, 0x00	; 0
    92bc:	88 f0       	brcs	.+34     	; 0x92e0 <strncasecmp_P+0x2c>
    92be:	8d 91       	ld	r24, X+
    92c0:	81 34       	cpi	r24, 0x41	; 65
    92c2:	1c f0       	brlt	.+6      	; 0x92ca <strncasecmp_P+0x16>
    92c4:	8b 35       	cpi	r24, 0x5B	; 91
    92c6:	0c f4       	brge	.+2      	; 0x92ca <strncasecmp_P+0x16>
    92c8:	80 5e       	subi	r24, 0xE0	; 224
    92ca:	65 91       	lpm	r22, Z+
    92cc:	61 34       	cpi	r22, 0x41	; 65
    92ce:	1c f0       	brlt	.+6      	; 0x92d6 <strncasecmp_P+0x22>
    92d0:	6b 35       	cpi	r22, 0x5B	; 91
    92d2:	0c f4       	brge	.+2      	; 0x92d6 <strncasecmp_P+0x22>
    92d4:	60 5e       	subi	r22, 0xE0	; 224
    92d6:	86 1b       	sub	r24, r22
    92d8:	61 11       	cpse	r22, r1
    92da:	71 f3       	breq	.-36     	; 0x92b8 <strncasecmp_P+0x4>
    92dc:	99 0b       	sbc	r25, r25
    92de:	08 95       	ret
    92e0:	88 1b       	sub	r24, r24
    92e2:	fc cf       	rjmp	.-8      	; 0x92dc <strncasecmp_P+0x28>

000092e4 <strnlen_P>:
    92e4:	fc 01       	movw	r30, r24
    92e6:	05 90       	lpm	r0, Z+
    92e8:	61 50       	subi	r22, 0x01	; 1
    92ea:	70 40       	sbci	r23, 0x00	; 0
    92ec:	01 10       	cpse	r0, r1
    92ee:	d8 f7       	brcc	.-10     	; 0x92e6 <strnlen_P+0x2>
    92f0:	80 95       	com	r24
    92f2:	90 95       	com	r25
    92f4:	8e 0f       	add	r24, r30
    92f6:	9f 1f       	adc	r25, r31
    92f8:	08 95       	ret

000092fa <strnlen>:
    92fa:	fc 01       	movw	r30, r24
    92fc:	61 50       	subi	r22, 0x01	; 1
    92fe:	70 40       	sbci	r23, 0x00	; 0
    9300:	01 90       	ld	r0, Z+
    9302:	01 10       	cpse	r0, r1
    9304:	d8 f7       	brcc	.-10     	; 0x92fc <strnlen+0x2>
    9306:	80 95       	com	r24
    9308:	90 95       	com	r25
    930a:	8e 0f       	add	r24, r30
    930c:	9f 1f       	adc	r25, r31
    930e:	08 95       	ret

00009310 <__mulhi_const_10>:
    9310:	7a e0       	ldi	r23, 0x0A	; 10
    9312:	97 9f       	mul	r25, r23
    9314:	90 2d       	mov	r25, r0
    9316:	87 9f       	mul	r24, r23
    9318:	80 2d       	mov	r24, r0
    931a:	91 0d       	add	r25, r1
    931c:	11 24       	eor	r1, r1
    931e:	08 95       	ret

00009320 <clearerr>:
    9320:	fc 01       	movw	r30, r24
    9322:	83 81       	ldd	r24, Z+3	; 0x03
    9324:	8f 7c       	andi	r24, 0xCF	; 207
    9326:	83 83       	std	Z+3, r24	; 0x03
    9328:	08 95       	ret

0000932a <fgets>:
    932a:	cf 92       	push	r12
    932c:	df 92       	push	r13
    932e:	ef 92       	push	r14
    9330:	ff 92       	push	r15
    9332:	0f 93       	push	r16
    9334:	1f 93       	push	r17
    9336:	cf 93       	push	r28
    9338:	df 93       	push	r29
    933a:	7c 01       	movw	r14, r24
    933c:	6a 01       	movw	r12, r20
    933e:	fa 01       	movw	r30, r20
    9340:	83 81       	ldd	r24, Z+3	; 0x03
    9342:	80 ff       	sbrs	r24, 0
    9344:	19 c0       	rjmp	.+50     	; 0x9378 <fgets+0x4e>
    9346:	16 16       	cp	r1, r22
    9348:	17 06       	cpc	r1, r23
    934a:	b4 f4       	brge	.+44     	; 0x9378 <fgets+0x4e>
    934c:	eb 01       	movw	r28, r22
    934e:	21 97       	sbiw	r28, 0x01	; 1
    9350:	87 01       	movw	r16, r14
    9352:	0d c0       	rjmp	.+26     	; 0x936e <fgets+0x44>
    9354:	c6 01       	movw	r24, r12
    9356:	0e 94 78 4a 	call	0x94f0	; 0x94f0 <fgetc>
    935a:	ff ef       	ldi	r31, 0xFF	; 255
    935c:	8f 3f       	cpi	r24, 0xFF	; 255
    935e:	9f 07       	cpc	r25, r31
    9360:	59 f0       	breq	.+22     	; 0x9378 <fgets+0x4e>
    9362:	f8 01       	movw	r30, r16
    9364:	81 93       	st	Z+, r24
    9366:	8f 01       	movw	r16, r30
    9368:	0a 97       	sbiw	r24, 0x0a	; 10
    936a:	19 f0       	breq	.+6      	; 0x9372 <fgets+0x48>
    936c:	21 97       	sbiw	r28, 0x01	; 1
    936e:	20 97       	sbiw	r28, 0x00	; 0
    9370:	89 f7       	brne	.-30     	; 0x9354 <fgets+0x2a>
    9372:	f8 01       	movw	r30, r16
    9374:	10 82       	st	Z, r1
    9376:	02 c0       	rjmp	.+4      	; 0x937c <fgets+0x52>
    9378:	ee 24       	eor	r14, r14
    937a:	ff 24       	eor	r15, r15
    937c:	c7 01       	movw	r24, r14
    937e:	df 91       	pop	r29
    9380:	cf 91       	pop	r28
    9382:	1f 91       	pop	r17
    9384:	0f 91       	pop	r16
    9386:	ff 90       	pop	r15
    9388:	ef 90       	pop	r14
    938a:	df 90       	pop	r13
    938c:	cf 90       	pop	r12
    938e:	08 95       	ret

00009390 <fputc>:
    9390:	0f 93       	push	r16
    9392:	1f 93       	push	r17
    9394:	cf 93       	push	r28
    9396:	df 93       	push	r29
    9398:	8c 01       	movw	r16, r24
    939a:	eb 01       	movw	r28, r22
    939c:	8b 81       	ldd	r24, Y+3	; 0x03
    939e:	81 ff       	sbrs	r24, 1
    93a0:	1b c0       	rjmp	.+54     	; 0x93d8 <fputc+0x48>
    93a2:	82 ff       	sbrs	r24, 2
    93a4:	0d c0       	rjmp	.+26     	; 0x93c0 <fputc+0x30>
    93a6:	2e 81       	ldd	r18, Y+6	; 0x06
    93a8:	3f 81       	ldd	r19, Y+7	; 0x07
    93aa:	8c 81       	ldd	r24, Y+4	; 0x04
    93ac:	9d 81       	ldd	r25, Y+5	; 0x05
    93ae:	28 17       	cp	r18, r24
    93b0:	39 07       	cpc	r19, r25
    93b2:	64 f4       	brge	.+24     	; 0x93cc <fputc+0x3c>
    93b4:	e8 81       	ld	r30, Y
    93b6:	f9 81       	ldd	r31, Y+1	; 0x01
    93b8:	01 93       	st	Z+, r16
    93ba:	e8 83       	st	Y, r30
    93bc:	f9 83       	std	Y+1, r31	; 0x01
    93be:	06 c0       	rjmp	.+12     	; 0x93cc <fputc+0x3c>
    93c0:	e8 85       	ldd	r30, Y+8	; 0x08
    93c2:	f9 85       	ldd	r31, Y+9	; 0x09
    93c4:	80 2f       	mov	r24, r16
    93c6:	19 95       	eicall
    93c8:	89 2b       	or	r24, r25
    93ca:	31 f4       	brne	.+12     	; 0x93d8 <fputc+0x48>
    93cc:	8e 81       	ldd	r24, Y+6	; 0x06
    93ce:	9f 81       	ldd	r25, Y+7	; 0x07
    93d0:	01 96       	adiw	r24, 0x01	; 1
    93d2:	8e 83       	std	Y+6, r24	; 0x06
    93d4:	9f 83       	std	Y+7, r25	; 0x07
    93d6:	02 c0       	rjmp	.+4      	; 0x93dc <fputc+0x4c>
    93d8:	0f ef       	ldi	r16, 0xFF	; 255
    93da:	1f ef       	ldi	r17, 0xFF	; 255
    93dc:	c8 01       	movw	r24, r16
    93de:	df 91       	pop	r29
    93e0:	cf 91       	pop	r28
    93e2:	1f 91       	pop	r17
    93e4:	0f 91       	pop	r16
    93e6:	08 95       	ret

000093e8 <printf_P>:
    93e8:	df 93       	push	r29
    93ea:	cf 93       	push	r28
    93ec:	cd b7       	in	r28, 0x3d	; 61
    93ee:	de b7       	in	r29, 0x3e	; 62
    93f0:	fe 01       	movw	r30, r28
    93f2:	36 96       	adiw	r30, 0x06	; 6
    93f4:	61 91       	ld	r22, Z+
    93f6:	71 91       	ld	r23, Z+
    93f8:	a0 91 82 25 	lds	r26, 0x2582
    93fc:	b0 91 83 25 	lds	r27, 0x2583
    9400:	13 96       	adiw	r26, 0x03	; 3
    9402:	8c 91       	ld	r24, X
    9404:	13 97       	sbiw	r26, 0x03	; 3
    9406:	88 60       	ori	r24, 0x08	; 8
    9408:	13 96       	adiw	r26, 0x03	; 3
    940a:	8c 93       	st	X, r24
    940c:	80 91 82 25 	lds	r24, 0x2582
    9410:	90 91 83 25 	lds	r25, 0x2583
    9414:	af 01       	movw	r20, r30
    9416:	0e 94 99 3e 	call	0x7d32	; 0x7d32 <vfprintf>
    941a:	e0 91 82 25 	lds	r30, 0x2582
    941e:	f0 91 83 25 	lds	r31, 0x2583
    9422:	23 81       	ldd	r18, Z+3	; 0x03
    9424:	27 7f       	andi	r18, 0xF7	; 247
    9426:	23 83       	std	Z+3, r18	; 0x03
    9428:	cf 91       	pop	r28
    942a:	df 91       	pop	r29
    942c:	08 95       	ret

0000942e <__ultoa_invert>:
    942e:	fa 01       	movw	r30, r20
    9430:	aa 27       	eor	r26, r26
    9432:	28 30       	cpi	r18, 0x08	; 8
    9434:	51 f1       	breq	.+84     	; 0x948a <__ultoa_invert+0x5c>
    9436:	20 31       	cpi	r18, 0x10	; 16
    9438:	81 f1       	breq	.+96     	; 0x949a <__ultoa_invert+0x6c>
    943a:	e8 94       	clt
    943c:	6f 93       	push	r22
    943e:	6e 7f       	andi	r22, 0xFE	; 254
    9440:	6e 5f       	subi	r22, 0xFE	; 254
    9442:	7f 4f       	sbci	r23, 0xFF	; 255
    9444:	8f 4f       	sbci	r24, 0xFF	; 255
    9446:	9f 4f       	sbci	r25, 0xFF	; 255
    9448:	af 4f       	sbci	r26, 0xFF	; 255
    944a:	b1 e0       	ldi	r27, 0x01	; 1
    944c:	3e d0       	rcall	.+124    	; 0x94ca <__ultoa_invert+0x9c>
    944e:	b4 e0       	ldi	r27, 0x04	; 4
    9450:	3c d0       	rcall	.+120    	; 0x94ca <__ultoa_invert+0x9c>
    9452:	67 0f       	add	r22, r23
    9454:	78 1f       	adc	r23, r24
    9456:	89 1f       	adc	r24, r25
    9458:	9a 1f       	adc	r25, r26
    945a:	a1 1d       	adc	r26, r1
    945c:	68 0f       	add	r22, r24
    945e:	79 1f       	adc	r23, r25
    9460:	8a 1f       	adc	r24, r26
    9462:	91 1d       	adc	r25, r1
    9464:	a1 1d       	adc	r26, r1
    9466:	6a 0f       	add	r22, r26
    9468:	71 1d       	adc	r23, r1
    946a:	81 1d       	adc	r24, r1
    946c:	91 1d       	adc	r25, r1
    946e:	a1 1d       	adc	r26, r1
    9470:	20 d0       	rcall	.+64     	; 0x94b2 <__ultoa_invert+0x84>
    9472:	09 f4       	brne	.+2      	; 0x9476 <__ultoa_invert+0x48>
    9474:	68 94       	set
    9476:	3f 91       	pop	r19
    9478:	2a e0       	ldi	r18, 0x0A	; 10
    947a:	26 9f       	mul	r18, r22
    947c:	11 24       	eor	r1, r1
    947e:	30 19       	sub	r19, r0
    9480:	30 5d       	subi	r19, 0xD0	; 208
    9482:	31 93       	st	Z+, r19
    9484:	de f6       	brtc	.-74     	; 0x943c <__ultoa_invert+0xe>
    9486:	cf 01       	movw	r24, r30
    9488:	08 95       	ret
    948a:	46 2f       	mov	r20, r22
    948c:	47 70       	andi	r20, 0x07	; 7
    948e:	40 5d       	subi	r20, 0xD0	; 208
    9490:	41 93       	st	Z+, r20
    9492:	b3 e0       	ldi	r27, 0x03	; 3
    9494:	0f d0       	rcall	.+30     	; 0x94b4 <__ultoa_invert+0x86>
    9496:	c9 f7       	brne	.-14     	; 0x948a <__ultoa_invert+0x5c>
    9498:	f6 cf       	rjmp	.-20     	; 0x9486 <__ultoa_invert+0x58>
    949a:	46 2f       	mov	r20, r22
    949c:	4f 70       	andi	r20, 0x0F	; 15
    949e:	40 5d       	subi	r20, 0xD0	; 208
    94a0:	4a 33       	cpi	r20, 0x3A	; 58
    94a2:	18 f0       	brcs	.+6      	; 0x94aa <__ultoa_invert+0x7c>
    94a4:	49 5d       	subi	r20, 0xD9	; 217
    94a6:	31 fd       	sbrc	r19, 1
    94a8:	40 52       	subi	r20, 0x20	; 32
    94aa:	41 93       	st	Z+, r20
    94ac:	02 d0       	rcall	.+4      	; 0x94b2 <__ultoa_invert+0x84>
    94ae:	a9 f7       	brne	.-22     	; 0x949a <__ultoa_invert+0x6c>
    94b0:	ea cf       	rjmp	.-44     	; 0x9486 <__ultoa_invert+0x58>
    94b2:	b4 e0       	ldi	r27, 0x04	; 4
    94b4:	a6 95       	lsr	r26
    94b6:	97 95       	ror	r25
    94b8:	87 95       	ror	r24
    94ba:	77 95       	ror	r23
    94bc:	67 95       	ror	r22
    94be:	ba 95       	dec	r27
    94c0:	c9 f7       	brne	.-14     	; 0x94b4 <__ultoa_invert+0x86>
    94c2:	00 97       	sbiw	r24, 0x00	; 0
    94c4:	61 05       	cpc	r22, r1
    94c6:	71 05       	cpc	r23, r1
    94c8:	08 95       	ret
    94ca:	9b 01       	movw	r18, r22
    94cc:	ac 01       	movw	r20, r24
    94ce:	0a 2e       	mov	r0, r26
    94d0:	06 94       	lsr	r0
    94d2:	57 95       	ror	r21
    94d4:	47 95       	ror	r20
    94d6:	37 95       	ror	r19
    94d8:	27 95       	ror	r18
    94da:	ba 95       	dec	r27
    94dc:	c9 f7       	brne	.-14     	; 0x94d0 <__ultoa_invert+0xa2>
    94de:	62 0f       	add	r22, r18
    94e0:	73 1f       	adc	r23, r19
    94e2:	84 1f       	adc	r24, r20
    94e4:	95 1f       	adc	r25, r21
    94e6:	a0 1d       	adc	r26, r0
    94e8:	08 95       	ret

000094ea <__ctype_isfalse>:
    94ea:	99 27       	eor	r25, r25
    94ec:	88 27       	eor	r24, r24

000094ee <__ctype_istrue>:
    94ee:	08 95       	ret

000094f0 <fgetc>:
    94f0:	cf 93       	push	r28
    94f2:	df 93       	push	r29
    94f4:	ec 01       	movw	r28, r24
    94f6:	4b 81       	ldd	r20, Y+3	; 0x03
    94f8:	40 ff       	sbrs	r20, 0
    94fa:	1a c0       	rjmp	.+52     	; 0x9530 <fgetc+0x40>
    94fc:	46 ff       	sbrs	r20, 6
    94fe:	0a c0       	rjmp	.+20     	; 0x9514 <fgetc+0x24>
    9500:	4f 7b       	andi	r20, 0xBF	; 191
    9502:	4b 83       	std	Y+3, r20	; 0x03
    9504:	8e 81       	ldd	r24, Y+6	; 0x06
    9506:	9f 81       	ldd	r25, Y+7	; 0x07
    9508:	01 96       	adiw	r24, 0x01	; 1
    950a:	8e 83       	std	Y+6, r24	; 0x06
    950c:	9f 83       	std	Y+7, r25	; 0x07
    950e:	8a 81       	ldd	r24, Y+2	; 0x02
    9510:	28 2f       	mov	r18, r24
    9512:	2b c0       	rjmp	.+86     	; 0x956a <fgetc+0x7a>
    9514:	42 ff       	sbrs	r20, 2
    9516:	13 c0       	rjmp	.+38     	; 0x953e <fgetc+0x4e>
    9518:	e8 81       	ld	r30, Y
    951a:	f9 81       	ldd	r31, Y+1	; 0x01
    951c:	80 81       	ld	r24, Z
    951e:	28 2f       	mov	r18, r24
    9520:	33 27       	eor	r19, r19
    9522:	27 fd       	sbrc	r18, 7
    9524:	30 95       	com	r19
    9526:	21 15       	cp	r18, r1
    9528:	31 05       	cpc	r19, r1
    952a:	29 f4       	brne	.+10     	; 0x9536 <fgetc+0x46>
    952c:	40 62       	ori	r20, 0x20	; 32
    952e:	4b 83       	std	Y+3, r20	; 0x03
    9530:	2f ef       	ldi	r18, 0xFF	; 255
    9532:	3f ef       	ldi	r19, 0xFF	; 255
    9534:	1b c0       	rjmp	.+54     	; 0x956c <fgetc+0x7c>
    9536:	31 96       	adiw	r30, 0x01	; 1
    9538:	e8 83       	st	Y, r30
    953a:	f9 83       	std	Y+1, r31	; 0x01
    953c:	11 c0       	rjmp	.+34     	; 0x9560 <fgetc+0x70>
    953e:	ea 85       	ldd	r30, Y+10	; 0x0a
    9540:	fb 85       	ldd	r31, Y+11	; 0x0b
    9542:	ce 01       	movw	r24, r28
    9544:	19 95       	eicall
    9546:	9c 01       	movw	r18, r24
    9548:	97 ff       	sbrs	r25, 7
    954a:	0a c0       	rjmp	.+20     	; 0x9560 <fgetc+0x70>
    954c:	9b 81       	ldd	r25, Y+3	; 0x03
    954e:	2f 5f       	subi	r18, 0xFF	; 255
    9550:	3f 4f       	sbci	r19, 0xFF	; 255
    9552:	11 f0       	breq	.+4      	; 0x9558 <fgetc+0x68>
    9554:	80 e2       	ldi	r24, 0x20	; 32
    9556:	01 c0       	rjmp	.+2      	; 0x955a <fgetc+0x6a>
    9558:	80 e1       	ldi	r24, 0x10	; 16
    955a:	89 2b       	or	r24, r25
    955c:	8b 83       	std	Y+3, r24	; 0x03
    955e:	e8 cf       	rjmp	.-48     	; 0x9530 <fgetc+0x40>
    9560:	8e 81       	ldd	r24, Y+6	; 0x06
    9562:	9f 81       	ldd	r25, Y+7	; 0x07
    9564:	01 96       	adiw	r24, 0x01	; 1
    9566:	8e 83       	std	Y+6, r24	; 0x06
    9568:	9f 83       	std	Y+7, r25	; 0x07
    956a:	30 e0       	ldi	r19, 0x00	; 0
    956c:	c9 01       	movw	r24, r18
    956e:	df 91       	pop	r29
    9570:	cf 91       	pop	r28
    9572:	08 95       	ret

00009574 <_exit>:
    9574:	f8 94       	cli

00009576 <__stop_program>:
    9576:	ff cf       	rjmp	.-2      	; 0x9576 <__stop_program>
