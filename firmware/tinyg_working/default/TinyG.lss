
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009508  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00802000  00009508  0000959c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000431  0080212a  0080212a  000096c6  2**0
                  ALLOC
  3 .debug_aranges 00000340  00000000  00000000  000096c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000dc8  00000000  00000000  00009a06  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000c501  00000000  00000000  0000a7ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002b66  00000000  00000000  00016ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000519d  00000000  00000000  00019835  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000bf0  00000000  00000000  0001e9d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002471  00000000  00000000  0001f5c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003b08  00000000  00000000  00021a35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  0002553d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__ctors_end>
       4:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
       8:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
       c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      10:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      14:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      18:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      1c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      20:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      24:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      28:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      2c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      30:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      34:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      38:	0c 94 8b 26 	jmp	0x4d16	; 0x4d16 <__vector_14>
      3c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      40:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      44:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      48:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      4c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      50:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      54:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      58:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      5c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      60:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      64:	0c 94 de 28 	jmp	0x51bc	; 0x51bc <__vector_25>
      68:	0c 94 5c 29 	jmp	0x52b8	; 0x52b8 <__vector_26>
      6c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      70:	0c 94 38 35 	jmp	0x6a70	; 0x6a70 <__vector_28>
      74:	0c 94 b6 35 	jmp	0x6b6c	; 0x6b6c <__vector_29>
      78:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      7c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      80:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      84:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      88:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      8c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      90:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      94:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      98:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      9c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      a0:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      a4:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      a8:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      ac:	0c 94 14 33 	jmp	0x6628	; 0x6628 <__vector_43>
      b0:	0c 94 ec 32 	jmp	0x65d8	; 0x65d8 <__vector_44>
      b4:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      b8:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      bc:	0c 94 c1 25 	jmp	0x4b82	; 0x4b82 <__vector_47>
      c0:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      c4:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      c8:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      cc:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      d0:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      d4:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      d8:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      dc:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      e0:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      e4:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      e8:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      ec:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      f0:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      f4:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      f8:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
      fc:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     100:	0c 94 c4 32 	jmp	0x6588	; 0x6588 <__vector_64>
     104:	0c 94 9c 32 	jmp	0x6538	; 0x6538 <__vector_65>
     108:	0c 94 b4 33 	jmp	0x6768	; 0x6768 <__vector_66>
     10c:	0c 94 8c 33 	jmp	0x6718	; 0x6718 <__vector_67>
     110:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     114:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     118:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     11c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     120:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     124:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     128:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     12c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     130:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     134:	0c 94 26 26 	jmp	0x4c4c	; 0x4c4c <__vector_77>
     138:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     13c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     140:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     144:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     148:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     14c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     150:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     154:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     158:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     15c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     160:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     164:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     168:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     16c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     170:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     174:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     178:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     17c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     180:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     184:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     188:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     18c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     190:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     194:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     198:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     19c:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     1a0:	0c 94 64 33 	jmp	0x66c8	; 0x66c8 <__vector_104>
     1a4:	0c 94 3c 33 	jmp	0x6678	; 0x6678 <__vector_105>
     1a8:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     1ac:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     1b0:	0c 94 5c 25 	jmp	0x4ab8	; 0x4ab8 <__vector_108>
     1b4:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     1b8:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     1bc:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     1c0:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     1c4:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     1c8:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     1cc:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     1d0:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     1d4:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     1d8:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     1dc:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     1e0:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     1e4:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <cfgMsgXaxis>:
     23b:	58 00                                               X.

0000023d <cfgMsgYaxis>:
     23d:	59 00                                               Y.

0000023f <cfgMsgZaxis>:
     23f:	5a 00                                               Z.

00000241 <cfgMsgAaxis>:
     241:	41 00                                               A.

00000243 <cfgMsgs>:
     243:	3b 02 3d 02 3f 02 41 02                             ;.=.?.A.

0000024b <configs_P>:
     24b:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25b:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26b:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27b:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28b:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29b:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2ab:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bb:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2db:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2eb:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2fb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30b:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31b:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32b:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33b:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34b:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35b:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36b:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37b:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38b:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

00000399 <__c.3831>:
     399:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     3a9:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

000003b4 <__c.3828>:
     3b4:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     3c4:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

000003ce <__c.3825>:
     3ce:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     3de:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

000003e8 <__c.3822>:
     3e8:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     3f8:	74 3a 20 25 73 0a 00                                t: %s..

000003ff <__c.3819>:
     3ff:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     40f:	4d 6f 64 65 0a 00                                   Mode..

00000415 <__c.3816>:
     415:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     425:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

00000432 <__c.3748>:
     432:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     442:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     452:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     462:	29 0a 0a 00                                         )...

00000466 <__c.3746>:
     466:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     476:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     486:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000496 <__c.3744>:
     496:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     4a6:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4b6:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004c7 <__c.3742>:
     4c7:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     4d7:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4e7:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004f8 <__c.3740>:
     4f8:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     508:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     518:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     528:	6c 0a 00                                            l..

0000052b <__c.3738>:
     52b:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     53b:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     54b:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     55b:	6e 0a 00                                            n..

0000055e <__c.3736>:
     55e:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     56e:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     57e:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     58e:	74 65 70 73 29 0a 00                                teps)..

00000595 <__c.3734>:
     595:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     5a5:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     5b5:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     5c5:	70 0a 00                                            p..

000005c8 <__c.3732>:
     5c8:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     5d8:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     5e8:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     5f8:	73 74 65 70 73 29 0a 00                             steps)..

00000600 <__c.3730>:
     600:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     610:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     620:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     630:	73 74 65 70 73 29 0a 00                             steps)..

00000638 <__c.3725>:
     638:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     648:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

00000656 <__c.3711>:
     656:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     666:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     676:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000681 <__c.3709>:
     681:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     691:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     6a1:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000006ab <__c.3707>:
     6ab:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     6bb:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     6cb:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000006d5 <__c.3705>:
     6d5:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     6e5:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     6f5:	73 20 2d 2d 2d 0a 00                                s ---..

000006fc <__c.3703>:
     6fc:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     70c:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     71c:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000724 <bsel>:
     724:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

0000072f <bscale>:
     72f:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

0000073a <__c.3523>:
     73a:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     74a:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     75a:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000766 <readlnFuncs>:
     766:	1e 2b f3 2a f3 2a 65 2b f3 2a f3 2a f3 2a f3 2a     .+.*.*e+.*.*.*.*
     776:	51 2b f3 2a 1e 2b f3 2a f3 2a 1e 2b 80 2b 89 2b     Q+.*.+.*.*.+.+.+
     786:	f3 2a 77 2b f3 2a 6e 2b f3 2a f3 2a f3 2a f3 2a     .*w+.*n+.*.*.*.*
     796:	65 2b f3 2a f3 2a 65 2b f3 2a f3 2a f3 2a f3 2a     e+.*.*e+.*.*.*.*
     7a6:	f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a     .*.*.*.*.*.*.*.*
     7b6:	f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a     .*.*.*.*.*.*.*.*
     7c6:	f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a     .*.*.*.*.*.*.*.*
     7d6:	f3 2a f3 2a f3 2a 47 2b f3 2a f3 2a f3 2a f3 2a     .*.*.*G+.*.*.*.*
     7e6:	f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a     .*.*.*.*.*.*.*.*
     7f6:	f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a     .*.*.*.*.*.*.*.*
     806:	f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a     .*.*.*.*.*.*.*.*
     816:	f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a     .*.*.*.*.*.*.*.*
     826:	f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a     .*.*.*.*.*.*.*.*
     836:	f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a     .*.*.*.*.*.*.*.*
     846:	f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a     .*.*.*.*.*.*.*.*
     856:	f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a f3 2a 51 2b     .*.*.*.*.*.*.*Q+

00000866 <getcFuncs>:
     866:	72 2a 62 2a 62 2a 97 2a 62 2a 62 2a 62 2a 62 2a     r*b*b*.*b*b*b*b*
     876:	91 2a 62 2a 72 2a 62 2a 62 2a 72 2a a9 2a af 2a     .*b*r*b*b*r*.*.*
     886:	62 2a a3 2a 62 2a 9d 2a 62 2a 62 2a 62 2a 62 2a     b*.*b*.*b*b*b*b*
     896:	97 2a 62 2a 62 2a 97 2a 62 2a 62 2a 62 2a 62 2a     .*b*b*.*b*b*b*b*
     8a6:	62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a     b*b*b*b*b*b*b*b*
     8b6:	62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a     b*b*b*b*b*b*b*b*
     8c6:	62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a     b*b*b*b*b*b*b*b*
     8d6:	62 2a 62 2a 62 2a 87 2a 62 2a 62 2a 62 2a 62 2a     b*b*b*.*b*b*b*b*
     8e6:	62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a     b*b*b*b*b*b*b*b*
     8f6:	62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a     b*b*b*b*b*b*b*b*
     906:	62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a     b*b*b*b*b*b*b*b*
     916:	62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a     b*b*b*b*b*b*b*b*
     926:	62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a     b*b*b*b*b*b*b*b*
     936:	62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a     b*b*b*b*b*b*b*b*
     946:	62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a     b*b*b*b*b*b*b*b*
     956:	62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 62 2a 91 2a     b*b*b*b*b*b*b*.*

00000966 <square_test1>:
     966:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     976:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     986:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     996:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     9a6:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     9b6:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     9c6:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000009d4 <square_test2>:
     9d4:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     9e4:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     9f4:	78 30 20 79 30 00                                   x0 y0.

000009fa <square_test10>:
     9fa:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     a0a:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     a1a:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000a26 <circle_test10>:
     a26:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     a36:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     a46:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     a56:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     a66:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     a76:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     a86:	30 00                                               0.

00000a88 <square_circle_test10>:
     a88:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     a98:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     aa8:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     ab8:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     ac8:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     ad8:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     ae8:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     af8:	31 30 20 79 30 00                                   10 y0.

00000afe <square_circle_test100>:
     afe:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     b0e:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     b1e:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     b2e:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     b3e:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     b4e:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     b5e:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     b6e:	35 30 20 6a 30 00                                   50 j0.

00000b74 <spiral_test5>:
     b74:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     b84:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     b94:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     ba4:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     bb4:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     bc4:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     bd4:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     be4:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

00000bee <spiral_test50a>:
     bee:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     bfe:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

00000c0e <g0_test1>:
     c0e:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     c1e:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000c2e <g0_test2>:
     c2e:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     c3e:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     c4e:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     c5e:	79 30 20 7a 30 00                                   y0 z0.

00000c64 <g0_test3>:
     c64:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     c74:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     c84:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000c92 <radius_arc_test1>:
     c92:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     ca2:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     cb2:	72 35 30 0a 00                                      r50..

00000cb7 <radius_arc_test2>:
     cb7:	67 32 0a 00                                         g2..

00000cbb <zoetrope>:
     cbb:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     ccb:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     cdb:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     ceb:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     cfb:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     d0b:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     d1b:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     d2b:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     d3b:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     d4b:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     d5b:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     d6b:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     d7b:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     d8b:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     d9b:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     dab:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     dbb:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     dcb:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     ddb:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     deb:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     dfb:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     e0b:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     e1b:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     e2b:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     e3b:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     e4b:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     e5b:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     e6b:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     e7b:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     e8b:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     e9b:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     eab:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     ebb:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     ecb:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     edb:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     eeb:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
     efb:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
     f0b:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
     f1b:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
     f2b:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
     f3b:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
     f4b:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
     f5b:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
     f6b:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
     f7b:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
     f8b:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
     f9b:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
     fab:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
     fbb:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
     fcb:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
     fdb:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
     feb:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
     ffb:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
    100b:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
    101b:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
    102b:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
    103b:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
    104b:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
    105b:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
    106b:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
    107b:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
    108b:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
    109b:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
    10ab:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
    10bb:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
    10cb:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
    10db:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
    10eb:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    10fb:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    110b:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    111b:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    112b:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    113b:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    114b:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    115b:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    116b:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    117b:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    118b:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    119b:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    11ab:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    11bb:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    11cb:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    11db:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    11eb:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    11fb:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    120b:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    121b:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    122b:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    123b:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    124b:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    125b:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    126b:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    127b:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    128b:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    129b:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    12ab:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    12bb:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    12cb:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    12db:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    12eb:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    12fb:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    130b:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    131b:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    132b:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    133b:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    134b:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    135b:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    136b:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    137b:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    138b:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    139b:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    13ab:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    13bb:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    13cb:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    13db:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    13eb:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    13fb:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    140b:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    141b:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    142b:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    143b:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    144b:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    145b:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    146b:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    147b:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    148b:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    149b:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    14ab:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    14bb:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    14cb:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    14db:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    14eb:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    14fb:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    150b:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    151b:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    152b:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    153b:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    154b:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    155b:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    156b:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    157b:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    158b:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    159b:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    15ab:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    15bb:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    15cb:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    15db:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    15eb:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    15fb:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    160b:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    161b:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    162b:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    163b:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    164b:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    165b:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    166b:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

00001676 <contraptor_circle>:
    1676:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    1686:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    1696:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    16a6:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    16b6:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    16c6:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    16d6:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    16e6:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    16f6:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    1706:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    1716:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    1726:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    1736:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    1746:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    1756:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    1766:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    1776:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    1786:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    1796:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    17a6:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    17b6:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    17c6:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    17d6:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    17e6:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    17f6:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    1806:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    1816:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    1826:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    1836:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    1846:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    1856:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    1866:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    1876:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    1886:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    1896:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    18a6:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    18b6:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    18c6:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    18d6:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    18e6:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    18f6:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1906:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1916:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    1926:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    1936:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    1946:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    1956:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    1966:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    1976:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1986:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    1996:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    19a6:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    19b6:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    19c6:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    19d6:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    19e6:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    19f6:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1a06:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1a16:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1a26:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1a36:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1a46:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001a56 <tgModeStringControl>:
    1a56:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001a63 <tgModeStringConfig>:
    1a63:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001a6f <tgModeStringGCode>:
    1a6f:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

00001a7b <tgModeStringDirect>:
    1a7b:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

00001a88 <tgModeStrings>:
    1a88:	56 1a 63 1a 6f 1a 7b 1a                             V.c.o.{.

00001a90 <__c.3953>:
    1a90:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1aa0:	69 6c 65 0a 00                                      ile..

00001aa5 <__c.3945>:
    1aa5:	43 4f 4d 4d 41 4e 44 20 4f 56 45 52 52 55 4e 20     COMMAND OVERRUN 
    1ab5:	45 52 52 4f 52 2e 20 53 4c 4f 57 20 44 4f 57 4e     ERROR. SLOW DOWN
    1ac5:	21 0a 00                                            !..

00001ac8 <__c.3985>:
    1ac8:	0d 0a 45 6e 64 20 6f 66 20 66 69 6c 65 20 65 6e     ..End of file en
    1ad8:	63 6f 75 6e 74 65 72 65 64 0d 0a 00                 countered...

00001ae4 <__c.3929>:
    1ae4:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001af2 <__c.3924>:
    1af2:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001b00 <__c.3856>:
    1b00:	62 75 69 6c 64 20 32 30 30 00                       build 200.

00001b0a <__c.3854>:
    1b0a:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1b1a:	25 53 0a 00                                         %S..

00001b1e <readlnFuncs>:
    1b1e:	78 37 4d 37 4d 37 bf 37 4d 37 4d 37 4d 37 4d 37     x7M7M7.7M7M7M7M7
    1b2e:	ab 37 4d 37 78 37 4d 37 4d 37 78 37 da 37 e3 37     .7M7x7M7M7x7.7.7
    1b3e:	4d 37 d1 37 4d 37 c8 37 4d 37 4d 37 4d 37 4d 37     M7.7M7.7M7M7M7M7
    1b4e:	bf 37 4d 37 4d 37 bf 37 4d 37 4d 37 4d 37 4d 37     .7M7M7.7M7M7M7M7
    1b5e:	4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37     M7M7M7M7M7M7M7M7
    1b6e:	4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37     M7M7M7M7M7M7M7M7
    1b7e:	4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37     M7M7M7M7M7M7M7M7
    1b8e:	4d 37 4d 37 4d 37 a1 37 4d 37 4d 37 4d 37 4d 37     M7M7M7.7M7M7M7M7
    1b9e:	4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37     M7M7M7M7M7M7M7M7
    1bae:	4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37     M7M7M7M7M7M7M7M7
    1bbe:	4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37     M7M7M7M7M7M7M7M7
    1bce:	4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37     M7M7M7M7M7M7M7M7
    1bde:	4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37     M7M7M7M7M7M7M7M7
    1bee:	4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37     M7M7M7M7M7M7M7M7
    1bfe:	4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37     M7M7M7M7M7M7M7M7
    1c0e:	4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 4d 37 ab 37     M7M7M7M7M7M7M7.7

00001c1e <getcFuncs>:
    1c1e:	cc 36 bc 36 bc 36 f1 36 bc 36 bc 36 bc 36 bc 36     .6.6.6.6.6.6.6.6
    1c2e:	eb 36 bc 36 cc 36 bc 36 bc 36 cc 36 03 37 09 37     .6.6.6.6.6.6.7.7
    1c3e:	bc 36 fd 36 bc 36 f7 36 bc 36 bc 36 bc 36 bc 36     .6.6.6.6.6.6.6.6
    1c4e:	f1 36 bc 36 bc 36 f1 36 bc 36 bc 36 bc 36 bc 36     .6.6.6.6.6.6.6.6
    1c5e:	bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36     .6.6.6.6.6.6.6.6
    1c6e:	bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36     .6.6.6.6.6.6.6.6
    1c7e:	bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36     .6.6.6.6.6.6.6.6
    1c8e:	bc 36 bc 36 bc 36 e1 36 bc 36 bc 36 bc 36 bc 36     .6.6.6.6.6.6.6.6
    1c9e:	bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36     .6.6.6.6.6.6.6.6
    1cae:	bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36     .6.6.6.6.6.6.6.6
    1cbe:	bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36     .6.6.6.6.6.6.6.6
    1cce:	bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36     .6.6.6.6.6.6.6.6
    1cde:	bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36     .6.6.6.6.6.6.6.6
    1cee:	bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36     .6.6.6.6.6.6.6.6
    1cfe:	bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36     .6.6.6.6.6.6.6.6
    1d0e:	bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 bc 36 eb 36     .6.6.6.6.6.6.6.6

00001d1e <pstr_inf>:
    1d1e:	49 4e 46                                            INF

00001d21 <pstr_inity>:
    1d21:	49 4e 49 54 59                                      INITY

00001d26 <pstr_nan>:
    1d26:	4e 41 4e                                            NAN

00001d29 <pwr_m10>:
    1d29:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1d39:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001d41 <pwr_p10>:
    1d41:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1d51:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1d61:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1d71:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1d81:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1d91:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1da1:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1db1:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1dc1:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1dd1:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1de1:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1df1:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1e01:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1e11:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1e21:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1e31:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1e41:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1e51:	3d 27 00                                            ='.

00001e54 <__ctors_end>:
    1e54:	11 24       	eor	r1, r1
    1e56:	1f be       	out	0x3f, r1	; 63
    1e58:	cf ef       	ldi	r28, 0xFF	; 255
    1e5a:	df e5       	ldi	r29, 0x5F	; 95
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	00 e0       	ldi	r16, 0x00	; 0
    1e62:	0c bf       	out	0x3c, r16	; 60

00001e64 <__do_copy_data>:
    1e64:	11 e2       	ldi	r17, 0x21	; 33
    1e66:	a0 e0       	ldi	r26, 0x00	; 0
    1e68:	b0 e2       	ldi	r27, 0x20	; 32
    1e6a:	e8 e0       	ldi	r30, 0x08	; 8
    1e6c:	f5 e9       	ldi	r31, 0x95	; 149
    1e6e:	00 e0       	ldi	r16, 0x00	; 0
    1e70:	0b bf       	out	0x3b, r16	; 59
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <__do_copy_data+0x14>
    1e74:	07 90       	elpm	r0, Z+
    1e76:	0d 92       	st	X+, r0
    1e78:	aa 32       	cpi	r26, 0x2A	; 42
    1e7a:	b1 07       	cpc	r27, r17
    1e7c:	d9 f7       	brne	.-10     	; 0x1e74 <__do_copy_data+0x10>

00001e7e <__do_clear_bss>:
    1e7e:	15 e2       	ldi	r17, 0x25	; 37
    1e80:	aa e2       	ldi	r26, 0x2A	; 42
    1e82:	b1 e2       	ldi	r27, 0x21	; 33
    1e84:	01 c0       	rjmp	.+2      	; 0x1e88 <.do_clear_bss_start>

00001e86 <.do_clear_bss_loop>:
    1e86:	1d 92       	st	X+, r1

00001e88 <.do_clear_bss_start>:
    1e88:	ab 35       	cpi	r26, 0x5B	; 91
    1e8a:	b1 07       	cpc	r27, r17
    1e8c:	e1 f7       	brne	.-8      	; 0x1e86 <.do_clear_bss_loop>
    1e8e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <main>
    1e92:	0c 94 82 4a 	jmp	0x9504	; 0x9504 <_exit>

00001e96 <__bad_interrupt>:
    1e96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001e9a <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1e9a:	f8 94       	cli
	xmega_init();				// xmega setup
    1e9c:	0e 94 12 1b 	call	0x3624	; 0x3624 <xmega_init>
	xio_init();					// xmega io subsystem
    1ea0:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <xio_init>

	cfg_init();					// get config record from eeprom
    1ea4:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <cfg_init>
	st_init(); 					// stepper subsystem
    1ea8:	0e 94 a2 23 	call	0x4744	; 0x4744 <st_init>
	ls_init();					// limit switches
    1eac:	0e 94 74 32 	call	0x64e8	; 0x64e8 <ls_init>
	mv_init();					// move buffers
    1eb0:	0e 94 01 31 	call	0x6202	; 0x6202 <mv_init>
	mc_init();					// motion control subsystem
    1eb4:	0e 94 86 1b 	call	0x370c	; 0x370c <mc_init>
	spindle_init();				// spindle controller
    1eb8:	0e 94 86 23 	call	0x470c	; 0x470c <spindle_init>
	en_init();					// encoders
    1ebc:	0e 94 de 1a 	call	0x35bc	; 0x35bc <en_init>
	gc_init();					// gcode-parser
    1ec0:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <gc_init>
	dd_init();					// direct drive commands
    1ec4:	0e 94 fd 30 	call	0x61fa	; 0x61fa <dd_init>
	tg_init();					// tinyg parsers
    1ec8:	0e 94 cf 30 	call	0x619e	; 0x619e <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1ecc:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1ed0:	e0 ea       	ldi	r30, 0xA0	; 160
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 91 a2 00 	lds	r24, 0x00A2
    1ed8:	81 60       	ori	r24, 0x01	; 1
    1eda:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1edc:	80 91 a2 00 	lds	r24, 0x00A2
    1ee0:	82 60       	ori	r24, 0x02	; 2
    1ee2:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1ee4:	80 91 a2 00 	lds	r24, 0x00A2
    1ee8:	84 60       	ori	r24, 0x04	; 4
    1eea:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1eec:	78 94       	sei
//	xio_usb_queue_RX_string("f\n");
//	xio_usb_queue_RX_string("?\n");
//	xio_usb_queue_RX_string("g0x10y10z25\n");

	for(;;){
		tg_controller();
    1eee:	0e 94 98 30 	call	0x6130	; 0x6130 <tg_controller>
    1ef2:	fd cf       	rjmp	.-6      	; 0x1eee <main+0x54>

00001ef4 <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1ef4:	80 93 77 21 	sts	0x2177, r24
	gc.plane_axis_1 = axis_1;
    1ef8:	60 93 78 21 	sts	0x2178, r22
	gc.plane_axis_2 = axis_2;
    1efc:	40 93 79 21 	sts	0x2179, r20
}
    1f00:	08 95       	ret

00001f02 <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1f02:	ef 92       	push	r14
    1f04:	ff 92       	push	r15
    1f06:	0f 93       	push	r16
    1f08:	1f 93       	push	r17
    1f0a:	7b 01       	movw	r14, r22
    1f0c:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    1f0e:	80 91 37 21 	lds	r24, 0x2137
    1f12:	88 23       	and	r24, r24
    1f14:	51 f0       	breq	.+20     	; 0x1f2a <to_millimeters+0x28>
    1f16:	c8 01       	movw	r24, r16
    1f18:	b7 01       	movw	r22, r14
    1f1a:	25 e8       	ldi	r18, 0x85	; 133
    1f1c:	32 e4       	ldi	r19, 0x42	; 66
    1f1e:	41 e2       	ldi	r20, 0x21	; 33
    1f20:	5d e3       	ldi	r21, 0x3D	; 61
    1f22:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    1f26:	7b 01       	movw	r14, r22
    1f28:	8c 01       	movw	r16, r24
}
    1f2a:	b7 01       	movw	r22, r14
    1f2c:	c8 01       	movw	r24, r16
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	08 95       	ret

00001f38 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    1f38:	86 e5       	ldi	r24, 0x56	; 86
    1f3a:	ea e2       	ldi	r30, 0x2A	; 42
    1f3c:	f1 e2       	ldi	r31, 0x21	; 33
    1f3e:	df 01       	movw	r26, r30
    1f40:	1d 92       	st	X+, r1
    1f42:	8a 95       	dec	r24
    1f44:	e9 f7       	brne	.-6      	; 0x1f40 <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a0 e0       	ldi	r26, 0x00	; 0
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	80 93 3b 21 	sts	0x213B, r24
    1f52:	90 93 3c 21 	sts	0x213C, r25
    1f56:	a0 93 3d 21 	sts	0x213D, r26
    1f5a:	b0 93 3e 21 	sts	0x213E, r27
	gc.radius = 0;							// radius value
    1f5e:	80 93 3f 21 	sts	0x213F, r24
    1f62:	90 93 40 21 	sts	0x2140, r25
    1f66:	a0 93 41 21 	sts	0x2141, r26
    1f6a:	b0 93 42 21 	sts	0x2142, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    1f6e:	80 91 91 24 	lds	r24, 0x2491
    1f72:	90 91 92 24 	lds	r25, 0x2492
    1f76:	a0 91 93 24 	lds	r26, 0x2493
    1f7a:	b0 91 94 24 	lds	r27, 0x2494
    1f7e:	80 93 43 21 	sts	0x2143, r24
    1f82:	90 93 44 21 	sts	0x2144, r25
    1f86:	a0 93 45 21 	sts	0x2145, r26
    1f8a:	b0 93 46 21 	sts	0x2146, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    1f8e:	80 91 95 24 	lds	r24, 0x2495
    1f92:	90 91 96 24 	lds	r25, 0x2496
    1f96:	a0 91 97 24 	lds	r26, 0x2497
    1f9a:	b0 91 98 24 	lds	r27, 0x2498
    1f9e:	80 93 47 21 	sts	0x2147, r24
    1fa2:	90 93 48 21 	sts	0x2148, r25
    1fa6:	a0 93 49 21 	sts	0x2149, r26
    1faa:	b0 93 4a 21 	sts	0x214A, r27

	gc.absolute_mode = TRUE;
    1fae:	21 e0       	ldi	r18, 0x01	; 1
    1fb0:	20 93 38 21 	sts	0x2138, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	a0 e8       	ldi	r26, 0x80	; 128
    1fba:	bf eb       	ldi	r27, 0xBF	; 191
    1fbc:	80 93 4f 21 	sts	0x214F, r24
    1fc0:	90 93 50 21 	sts	0x2150, r25
    1fc4:	a0 93 51 21 	sts	0x2151, r26
    1fc8:	b0 93 52 21 	sts	0x2152, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    1fcc:	10 92 39 21 	sts	0x2139, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    1fd0:	10 92 7e 21 	sts	0x217E, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    1fd4:	10 92 7f 21 	sts	0x217F, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1fd8:	10 92 77 21 	sts	0x2177, r1
	gc.plane_axis_1 = axis_1;
    1fdc:	20 93 78 21 	sts	0x2178, r18
	gc.plane_axis_2 = axis_2;
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	80 93 79 21 	sts	0x2179, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X_AXIS, Y_AXIS, Z_AXIS);
}
    1fe6:	08 95       	ret

00001fe8 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    1fe8:	4f 92       	push	r4
    1fea:	5f 92       	push	r5
    1fec:	6f 92       	push	r6
    1fee:	7f 92       	push	r7
    1ff0:	8f 92       	push	r8
    1ff2:	9f 92       	push	r9
    1ff4:	af 92       	push	r10
    1ff6:	bf 92       	push	r11
    1ff8:	cf 92       	push	r12
    1ffa:	df 92       	push	r13
    1ffc:	ef 92       	push	r14
    1ffe:	ff 92       	push	r15
    2000:	0f 93       	push	r16
    2002:	1f 93       	push	r17
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	0f 92       	push	r0
    200a:	0f 92       	push	r0
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
    2010:	3b 01       	movw	r6, r22
    2012:	2a 01       	movw	r4, r20
    2014:	49 01       	movw	r8, r18
    2016:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    2018:	d8 01       	movw	r26, r16
    201a:	ed 91       	ld	r30, X+
    201c:	fc 91       	ld	r31, X
    201e:	e2 0f       	add	r30, r18
    2020:	f3 1f       	adc	r31, r19
    2022:	e0 81       	ld	r30, Z
    2024:	ee 23       	and	r30, r30
    2026:	41 f0       	breq	.+16     	; 0x2038 <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    2028:	dc 01       	movw	r26, r24
    202a:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    202c:	e1 54       	subi	r30, 0x41	; 65
    202e:	ea 31       	cpi	r30, 0x1A	; 26
    2030:	30 f0       	brcs	.+12     	; 0x203e <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    2032:	88 e0       	ldi	r24, 0x08	; 8
    2034:	80 93 2a 21 	sts	0x212A, r24
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	35 c0       	rjmp	.+106    	; 0x20a8 <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    203e:	f8 01       	movw	r30, r16
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	01 96       	adiw	r24, 0x01	; 1
    2046:	80 83       	st	Z, r24
    2048:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    204a:	89 01       	movw	r16, r18
    204c:	08 0f       	add	r16, r24
    204e:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    2050:	c8 01       	movw	r24, r16
    2052:	be 01       	movw	r22, r28
    2054:	6f 5f       	subi	r22, 0xFF	; 255
    2056:	7f 4f       	sbci	r23, 0xFF	; 255
    2058:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <strtod>
    205c:	6b 01       	movw	r12, r22
    205e:	7c 01       	movw	r14, r24
    2060:	d3 01       	movw	r26, r6
    2062:	6d 93       	st	X+, r22
    2064:	7d 93       	st	X+, r23
    2066:	8d 93       	st	X+, r24
    2068:	9c 93       	st	X, r25
    206a:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    206c:	89 81       	ldd	r24, Y+1	; 0x01
    206e:	9a 81       	ldd	r25, Y+2	; 0x02
    2070:	80 17       	cp	r24, r16
    2072:	91 07       	cpc	r25, r17
    2074:	11 f4       	brne	.+4      	; 0x207a <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    2076:	8c e0       	ldi	r24, 0x0C	; 12
    2078:	dd cf       	rjmp	.-70     	; 0x2034 <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    207a:	88 19       	sub	r24, r8
    207c:	99 09       	sbc	r25, r9
    207e:	f5 01       	movw	r30, r10
    2080:	80 83       	st	Z, r24
    2082:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    2084:	c7 01       	movw	r24, r14
    2086:	b6 01       	movw	r22, r12
    2088:	0e 94 1b 46 	call	0x8c36	; 0x8c36 <trunc>
    208c:	9b 01       	movw	r18, r22
    208e:	ac 01       	movw	r20, r24
    2090:	c7 01       	movw	r24, r14
    2092:	b6 01       	movw	r22, r12
    2094:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    2098:	d2 01       	movw	r26, r4
    209a:	6d 93       	st	X+, r22
    209c:	7d 93       	st	X+, r23
    209e:	8d 93       	st	X+, r24
    20a0:	9c 93       	st	X, r25
    20a2:	13 97       	sbiw	r26, 0x03	; 3
    20a4:	21 e0       	ldi	r18, 0x01	; 1
    20a6:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    20a8:	c9 01       	movw	r24, r18
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	1f 91       	pop	r17
    20b4:	0f 91       	pop	r16
    20b6:	ff 90       	pop	r15
    20b8:	ef 90       	pop	r14
    20ba:	df 90       	pop	r13
    20bc:	cf 90       	pop	r12
    20be:	bf 90       	pop	r11
    20c0:	af 90       	pop	r10
    20c2:	9f 90       	pop	r9
    20c4:	8f 90       	pop	r8
    20c6:	7f 90       	pop	r7
    20c8:	6f 90       	pop	r6
    20ca:	5f 90       	pop	r5
    20cc:	4f 90       	pop	r4
    20ce:	08 95       	ret

000020d0 <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    20d0:	af 92       	push	r10
    20d2:	bf 92       	push	r11
    20d4:	cf 92       	push	r12
    20d6:	df 92       	push	r13
    20d8:	ef 92       	push	r14
    20da:	ff 92       	push	r15
    20dc:	0f 93       	push	r16
    20de:	1f 93       	push	r17
    20e0:	79 01       	movw	r14, r18
    20e2:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    20e4:	5f 77       	andi	r21, 0x7F	; 127
    20e6:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    20ea:	0e 94 70 42 	call	0x84e0	; 0x84e0 <atan>
    20ee:	5b 01       	movw	r10, r22
    20f0:	6c 01       	movw	r12, r24

	if (y>0) {
    20f2:	c8 01       	movw	r24, r16
    20f4:	b7 01       	movw	r22, r14
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e0       	ldi	r20, 0x00	; 0
    20fc:	50 e0       	ldi	r21, 0x00	; 0
    20fe:	0e 94 9b 44 	call	0x8936	; 0x8936 <__gesf2>
    2102:	18 16       	cp	r1, r24
    2104:	cc f0       	brlt	.+50     	; 0x2138 <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    2106:	c6 01       	movw	r24, r12
    2108:	b5 01       	movw	r22, r10
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	50 e0       	ldi	r21, 0x00	; 0
    2112:	0e 94 9b 44 	call	0x8936	; 0x8936 <__gesf2>
    2116:	18 16       	cp	r1, r24
    2118:	2c f4       	brge	.+10     	; 0x2124 <theta+0x54>
	    {
			return(M_PI-theta);
    211a:	6b ed       	ldi	r22, 0xDB	; 219
    211c:	7f e0       	ldi	r23, 0x0F	; 15
    211e:	89 e4       	ldi	r24, 0x49	; 73
    2120:	90 e4       	ldi	r25, 0x40	; 64
    2122:	04 c0       	rjmp	.+8      	; 0x212c <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    2124:	6b ed       	ldi	r22, 0xDB	; 219
    2126:	7f e0       	ldi	r23, 0x0F	; 15
    2128:	89 e4       	ldi	r24, 0x49	; 73
    212a:	90 ec       	ldi	r25, 0xC0	; 192
    212c:	a6 01       	movw	r20, r12
    212e:	95 01       	movw	r18, r10
    2130:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    2134:	5b 01       	movw	r10, r22
    2136:	6c 01       	movw	r12, r24
		}
	}
}
    2138:	b5 01       	movw	r22, r10
    213a:	c6 01       	movw	r24, r12
    213c:	1f 91       	pop	r17
    213e:	0f 91       	pop	r16
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	df 90       	pop	r13
    2146:	cf 90       	pop	r12
    2148:	bf 90       	pop	r11
    214a:	af 90       	pop	r10
    214c:	08 95       	ret

0000214e <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    214e:	2f 92       	push	r2
    2150:	3f 92       	push	r3
    2152:	4f 92       	push	r4
    2154:	5f 92       	push	r5
    2156:	6f 92       	push	r6
    2158:	7f 92       	push	r7
    215a:	8f 92       	push	r8
    215c:	9f 92       	push	r9
    215e:	af 92       	push	r10
    2160:	bf 92       	push	r11
    2162:	cf 92       	push	r12
    2164:	df 92       	push	r13
    2166:	ef 92       	push	r14
    2168:	ff 92       	push	r15
    216a:	0f 93       	push	r16
    216c:	1f 93       	push	r17
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	68 97       	sbiw	r28, 0x18	; 24
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    217e:	19 82       	std	Y+1, r1	; 0x01
    2180:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    2182:	ef e5       	ldi	r30, 0x5F	; 95
    2184:	f1 e2       	ldi	r31, 0x21	; 33
    2186:	8c e0       	ldi	r24, 0x0C	; 12
    2188:	df 01       	movw	r26, r30
    218a:	28 2f       	mov	r18, r24
    218c:	1d 92       	st	X+, r1
    218e:	2a 95       	dec	r18
    2190:	e9 f7       	brne	.-6      	; 0x218c <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    2192:	3c 96       	adiw	r30, 0x0c	; 12
    2194:	df 01       	movw	r26, r30
    2196:	1d 92       	st	X+, r1
    2198:	8a 95       	dec	r24
    219a:	e9 f7       	brne	.-6      	; 0x2196 <gc_execute_block+0x48>

	gc.status = TG_OK;
    219c:	10 92 2a 21 	sts	0x212A, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    21a0:	10 92 3a 21 	sts	0x213A, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    21a4:	6e 01       	movw	r12, r28
    21a6:	08 94       	sec
    21a8:	c1 1c       	adc	r12, r1
    21aa:	d1 1c       	adc	r13, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    21ac:	ff 24       	eor	r15, r15
    21ae:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    21b0:	ba e0       	ldi	r27, 0x0A	; 10
    21b2:	bb 2e       	mov	r11, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    21b4:	a2 e0       	ldi	r26, 0x02	; 2
    21b6:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    21b8:	77 24       	eor	r7, r7
    21ba:	7a 94       	dec	r7
					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }
					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    21bc:	f4 e0       	ldi	r31, 0x04	; 4
    21be:	6f 2e       	mov	r6, r31
			case 'G':
				switch((int)gc.value) {
					case 0:  { gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
					case 1:  { gc.motion_mode = MOTION_MODE_LINEAR; break; }
					case 2:  { gc.motion_mode = MOTION_MODE_CW_ARC; break; }
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    21c0:	e3 e0       	ldi	r30, 0x03	; 3
    21c2:	ae 2e       	mov	r10, r30
    21c4:	02 c1       	rjmp	.+516    	; 0x23ca <gc_execute_block+0x27c>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    21c6:	80 91 2b 21 	lds	r24, 0x212B
    21ca:	8d 34       	cpi	r24, 0x4D	; 77
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <gc_execute_block+0x82>
    21ce:	b6 c0       	rjmp	.+364    	; 0x233c <gc_execute_block+0x1ee>
    21d0:	84 35       	cpi	r24, 0x54	; 84
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <gc_execute_block+0x88>
    21d4:	e8 c0       	rjmp	.+464    	; 0x23a6 <gc_execute_block+0x258>
    21d6:	87 34       	cpi	r24, 0x47	; 71
    21d8:	09 f0       	breq	.+2      	; 0x21dc <gc_execute_block+0x8e>
    21da:	f3 c0       	rjmp	.+486    	; 0x23c2 <gc_execute_block+0x274>
			case 'G':
				switch((int)gc.value) {
    21dc:	60 91 2c 21 	lds	r22, 0x212C
    21e0:	70 91 2d 21 	lds	r23, 0x212D
    21e4:	80 91 2e 21 	lds	r24, 0x212E
    21e8:	90 91 2f 21 	lds	r25, 0x212F
    21ec:	0e 94 1a 43 	call	0x8634	; 0x8634 <__fixsfsi>
    21f0:	65 31       	cpi	r22, 0x15	; 21
    21f2:	71 05       	cpc	r23, r1
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <gc_execute_block+0xaa>
    21f6:	87 c0       	rjmp	.+270    	; 0x2306 <gc_execute_block+0x1b8>
    21f8:	66 31       	cpi	r22, 0x16	; 22
    21fa:	71 05       	cpc	r23, r1
    21fc:	84 f5       	brge	.+96     	; 0x225e <gc_execute_block+0x110>
    21fe:	64 30       	cpi	r22, 0x04	; 4
    2200:	71 05       	cpc	r23, r1
    2202:	09 f4       	brne	.+2      	; 0x2206 <gc_execute_block+0xb8>
    2204:	65 c0       	rjmp	.+202    	; 0x22d0 <gc_execute_block+0x182>
    2206:	65 30       	cpi	r22, 0x05	; 5
    2208:	71 05       	cpc	r23, r1
    220a:	a4 f4       	brge	.+40     	; 0x2234 <gc_execute_block+0xe6>
    220c:	61 30       	cpi	r22, 0x01	; 1
    220e:	71 05       	cpc	r23, r1
    2210:	09 f4       	brne	.+2      	; 0x2214 <gc_execute_block+0xc6>
    2212:	55 c0       	rjmp	.+170    	; 0x22be <gc_execute_block+0x170>
    2214:	62 30       	cpi	r22, 0x02	; 2
    2216:	71 05       	cpc	r23, r1
    2218:	24 f4       	brge	.+8      	; 0x2222 <gc_execute_block+0xd4>
    221a:	67 2b       	or	r22, r23
    221c:	09 f4       	brne	.+2      	; 0x2220 <gc_execute_block+0xd2>
    221e:	4c c0       	rjmp	.+152    	; 0x22b8 <gc_execute_block+0x16a>
    2220:	bf c0       	rjmp	.+382    	; 0x23a0 <gc_execute_block+0x252>
    2222:	62 30       	cpi	r22, 0x02	; 2
    2224:	71 05       	cpc	r23, r1
    2226:	09 f4       	brne	.+2      	; 0x222a <gc_execute_block+0xdc>
    2228:	4d c0       	rjmp	.+154    	; 0x22c4 <gc_execute_block+0x176>
    222a:	63 30       	cpi	r22, 0x03	; 3
    222c:	71 05       	cpc	r23, r1
    222e:	09 f0       	breq	.+2      	; 0x2232 <gc_execute_block+0xe4>
    2230:	b7 c0       	rjmp	.+366    	; 0x23a0 <gc_execute_block+0x252>
    2232:	4b c0       	rjmp	.+150    	; 0x22ca <gc_execute_block+0x17c>
    2234:	62 31       	cpi	r22, 0x12	; 18
    2236:	71 05       	cpc	r23, r1
    2238:	09 f4       	brne	.+2      	; 0x223c <gc_execute_block+0xee>
    223a:	54 c0       	rjmp	.+168    	; 0x22e4 <gc_execute_block+0x196>
    223c:	63 31       	cpi	r22, 0x13	; 19
    223e:	71 05       	cpc	r23, r1
    2240:	2c f4       	brge	.+10     	; 0x224c <gc_execute_block+0xfe>
    2242:	61 31       	cpi	r22, 0x11	; 17
    2244:	71 05       	cpc	r23, r1
    2246:	09 f0       	breq	.+2      	; 0x224a <gc_execute_block+0xfc>
    2248:	ab c0       	rjmp	.+342    	; 0x23a0 <gc_execute_block+0x252>
    224a:	45 c0       	rjmp	.+138    	; 0x22d6 <gc_execute_block+0x188>
    224c:	63 31       	cpi	r22, 0x13	; 19
    224e:	71 05       	cpc	r23, r1
    2250:	09 f4       	brne	.+2      	; 0x2254 <gc_execute_block+0x106>
    2252:	4f c0       	rjmp	.+158    	; 0x22f2 <gc_execute_block+0x1a4>
    2254:	64 31       	cpi	r22, 0x14	; 20
    2256:	71 05       	cpc	r23, r1
    2258:	09 f0       	breq	.+2      	; 0x225c <gc_execute_block+0x10e>
    225a:	a2 c0       	rjmp	.+324    	; 0x23a0 <gc_execute_block+0x252>
    225c:	51 c0       	rjmp	.+162    	; 0x2300 <gc_execute_block+0x1b2>
    225e:	6a 35       	cpi	r22, 0x5A	; 90
    2260:	71 05       	cpc	r23, r1
    2262:	09 f4       	brne	.+2      	; 0x2266 <gc_execute_block+0x118>
    2264:	5c c0       	rjmp	.+184    	; 0x231e <gc_execute_block+0x1d0>
    2266:	6b 35       	cpi	r22, 0x5B	; 91
    2268:	71 05       	cpc	r23, r1
    226a:	ac f4       	brge	.+42     	; 0x2296 <gc_execute_block+0x148>
    226c:	6e 31       	cpi	r22, 0x1E	; 30
    226e:	71 05       	cpc	r23, r1
    2270:	09 f4       	brne	.+2      	; 0x2274 <gc_execute_block+0x126>
    2272:	4c c0       	rjmp	.+152    	; 0x230c <gc_execute_block+0x1be>
    2274:	6f 31       	cpi	r22, 0x1F	; 31
    2276:	71 05       	cpc	r23, r1
    2278:	2c f4       	brge	.+10     	; 0x2284 <gc_execute_block+0x136>
    227a:	6c 31       	cpi	r22, 0x1C	; 28
    227c:	71 05       	cpc	r23, r1
    227e:	09 f0       	breq	.+2      	; 0x2282 <gc_execute_block+0x134>
    2280:	8f c0       	rjmp	.+286    	; 0x23a0 <gc_execute_block+0x252>
    2282:	44 c0       	rjmp	.+136    	; 0x230c <gc_execute_block+0x1be>
    2284:	65 33       	cpi	r22, 0x35	; 53
    2286:	71 05       	cpc	r23, r1
    2288:	09 f4       	brne	.+2      	; 0x228c <gc_execute_block+0x13e>
    228a:	43 c0       	rjmp	.+134    	; 0x2312 <gc_execute_block+0x1c4>
    228c:	60 35       	cpi	r22, 0x50	; 80
    228e:	71 05       	cpc	r23, r1
    2290:	09 f0       	breq	.+2      	; 0x2294 <gc_execute_block+0x146>
    2292:	86 c0       	rjmp	.+268    	; 0x23a0 <gc_execute_block+0x252>
    2294:	41 c0       	rjmp	.+130    	; 0x2318 <gc_execute_block+0x1ca>
    2296:	6c 35       	cpi	r22, 0x5C	; 92
    2298:	71 05       	cpc	r23, r1
    229a:	09 f4       	brne	.+2      	; 0x229e <gc_execute_block+0x150>
    229c:	46 c0       	rjmp	.+140    	; 0x232a <gc_execute_block+0x1dc>
    229e:	6c 35       	cpi	r22, 0x5C	; 92
    22a0:	71 05       	cpc	r23, r1
    22a2:	0c f4       	brge	.+2      	; 0x22a6 <gc_execute_block+0x158>
    22a4:	3f c0       	rjmp	.+126    	; 0x2324 <gc_execute_block+0x1d6>
    22a6:	6d 35       	cpi	r22, 0x5D	; 93
    22a8:	71 05       	cpc	r23, r1
    22aa:	09 f4       	brne	.+2      	; 0x22ae <gc_execute_block+0x160>
    22ac:	41 c0       	rjmp	.+130    	; 0x2330 <gc_execute_block+0x1e2>
    22ae:	6e 35       	cpi	r22, 0x5E	; 94
    22b0:	71 05       	cpc	r23, r1
    22b2:	09 f0       	breq	.+2      	; 0x22b6 <gc_execute_block+0x168>
    22b4:	75 c0       	rjmp	.+234    	; 0x23a0 <gc_execute_block+0x252>
    22b6:	3f c0       	rjmp	.+126    	; 0x2336 <gc_execute_block+0x1e8>
					case 0:  { gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    22b8:	10 92 35 21 	sts	0x2135, r1
    22bc:	82 c0       	rjmp	.+260    	; 0x23c2 <gc_execute_block+0x274>
					case 1:  { gc.motion_mode = MOTION_MODE_LINEAR; break; }
    22be:	f0 92 35 21 	sts	0x2135, r15
    22c2:	7f c0       	rjmp	.+254    	; 0x23c2 <gc_execute_block+0x274>
					case 2:  { gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    22c4:	e0 92 35 21 	sts	0x2135, r14
    22c8:	7c c0       	rjmp	.+248    	; 0x23c2 <gc_execute_block+0x274>
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    22ca:	a0 92 35 21 	sts	0x2135, r10
    22ce:	79 c0       	rjmp	.+242    	; 0x23c2 <gc_execute_block+0x274>
					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    22d0:	f0 92 7f 21 	sts	0x217F, r15
    22d4:	76 c0       	rjmp	.+236    	; 0x23c2 <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22d6:	10 92 77 21 	sts	0x2177, r1
	gc.plane_axis_1 = axis_1;
    22da:	f0 92 78 21 	sts	0x2178, r15
	gc.plane_axis_2 = axis_2;
    22de:	e0 92 79 21 	sts	0x2179, r14
    22e2:	6f c0       	rjmp	.+222    	; 0x23c2 <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22e4:	10 92 77 21 	sts	0x2177, r1
	gc.plane_axis_1 = axis_1;
    22e8:	e0 92 78 21 	sts	0x2178, r14
	gc.plane_axis_2 = axis_2;
    22ec:	f0 92 79 21 	sts	0x2179, r15
    22f0:	68 c0       	rjmp	.+208    	; 0x23c2 <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22f2:	f0 92 77 21 	sts	0x2177, r15
	gc.plane_axis_1 = axis_1;
    22f6:	e0 92 78 21 	sts	0x2178, r14
	gc.plane_axis_2 = axis_2;
    22fa:	10 92 79 21 	sts	0x2179, r1
    22fe:	61 c0       	rjmp	.+194    	; 0x23c2 <gc_execute_block+0x274>
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
					case 17: { select_plane(X_AXIS, Y_AXIS, Z_AXIS); break; }
					case 18: { select_plane(X_AXIS, Z_AXIS, Y_AXIS); break; }
					case 19: { select_plane(Y_AXIS, Z_AXIS, X_AXIS); break; }
					case 20: { gc.inches_mode = TRUE; break; }
    2300:	f0 92 37 21 	sts	0x2137, r15
    2304:	5e c0       	rjmp	.+188    	; 0x23c2 <gc_execute_block+0x274>
					case 21: { gc.inches_mode = FALSE; break; }
    2306:	10 92 37 21 	sts	0x2137, r1
    230a:	5b c0       	rjmp	.+182    	; 0x23c2 <gc_execute_block+0x274>
					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    230c:	e0 92 7f 21 	sts	0x217F, r14
    2310:	58 c0       	rjmp	.+176    	; 0x23c2 <gc_execute_block+0x274>
					case 53: { gc.absolute_override = TRUE; break; }
    2312:	f0 92 7e 21 	sts	0x217E, r15
    2316:	55 c0       	rjmp	.+170    	; 0x23c2 <gc_execute_block+0x274>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2318:	60 92 35 21 	sts	0x2135, r6
    231c:	52 c0       	rjmp	.+164    	; 0x23c2 <gc_execute_block+0x274>
					case 90: { gc.absolute_mode = TRUE; break; }
    231e:	f0 92 38 21 	sts	0x2138, r15
    2322:	4f c0       	rjmp	.+158    	; 0x23c2 <gc_execute_block+0x274>
					case 91: { gc.absolute_mode = FALSE; break; }
    2324:	10 92 38 21 	sts	0x2138, r1
    2328:	4c c0       	rjmp	.+152    	; 0x23c2 <gc_execute_block+0x274>
					case 92: { gc.set_origin_mode = TRUE; break; }
    232a:	f0 92 3a 21 	sts	0x213A, r15
    232e:	49 c0       	rjmp	.+146    	; 0x23c2 <gc_execute_block+0x274>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    2330:	f0 92 36 21 	sts	0x2136, r15
    2334:	46 c0       	rjmp	.+140    	; 0x23c2 <gc_execute_block+0x274>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    2336:	10 92 36 21 	sts	0x2136, r1
    233a:	43 c0       	rjmp	.+134    	; 0x23c2 <gc_execute_block+0x274>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    233c:	60 91 2c 21 	lds	r22, 0x212C
    2340:	70 91 2d 21 	lds	r23, 0x212D
    2344:	80 91 2e 21 	lds	r24, 0x212E
    2348:	90 91 2f 21 	lds	r25, 0x212F
    234c:	0e 94 1a 43 	call	0x8634	; 0x8634 <__fixsfsi>
    2350:	63 30       	cpi	r22, 0x03	; 3
    2352:	71 05       	cpc	r23, r1
    2354:	e1 f0       	breq	.+56     	; 0x238e <gc_execute_block+0x240>
    2356:	64 30       	cpi	r22, 0x04	; 4
    2358:	71 05       	cpc	r23, r1
    235a:	34 f4       	brge	.+12     	; 0x2368 <gc_execute_block+0x21a>
    235c:	77 fd       	sbrc	r23, 7
    235e:	20 c0       	rjmp	.+64     	; 0x23a0 <gc_execute_block+0x252>
    2360:	62 30       	cpi	r22, 0x02	; 2
    2362:	71 05       	cpc	r23, r1
    2364:	74 f0       	brlt	.+28     	; 0x2382 <gc_execute_block+0x234>
    2366:	10 c0       	rjmp	.+32     	; 0x2388 <gc_execute_block+0x23a>
    2368:	65 30       	cpi	r22, 0x05	; 5
    236a:	71 05       	cpc	r23, r1
    236c:	b1 f0       	breq	.+44     	; 0x239a <gc_execute_block+0x24c>
    236e:	65 30       	cpi	r22, 0x05	; 5
    2370:	71 05       	cpc	r23, r1
    2372:	84 f0       	brlt	.+32     	; 0x2394 <gc_execute_block+0x246>
    2374:	6e 31       	cpi	r22, 0x1E	; 30
    2376:	71 05       	cpc	r23, r1
    2378:	39 f0       	breq	.+14     	; 0x2388 <gc_execute_block+0x23a>
    237a:	6c 33       	cpi	r22, 0x3C	; 60
    237c:	71 05       	cpc	r23, r1
    237e:	81 f4       	brne	.+32     	; 0x23a0 <gc_execute_block+0x252>
    2380:	03 c0       	rjmp	.+6      	; 0x2388 <gc_execute_block+0x23a>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    2382:	f0 92 34 21 	sts	0x2134, r15
    2386:	1d c0       	rjmp	.+58     	; 0x23c2 <gc_execute_block+0x274>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2388:	e0 92 34 21 	sts	0x2134, r14
    238c:	1a c0       	rjmp	.+52     	; 0x23c2 <gc_execute_block+0x274>
					case 3: gc.spindle_direction = 1; break;
    238e:	f0 92 7b 21 	sts	0x217B, r15
    2392:	17 c0       	rjmp	.+46     	; 0x23c2 <gc_execute_block+0x274>
					case 4: gc.spindle_direction = -1; break;
    2394:	70 92 7b 21 	sts	0x217B, r7
    2398:	14 c0       	rjmp	.+40     	; 0x23c2 <gc_execute_block+0x274>
					case 5: gc.spindle_direction = 0; break;
    239a:	10 92 7b 21 	sts	0x217B, r1
    239e:	11 c0       	rjmp	.+34     	; 0x23c2 <gc_execute_block+0x274>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    23a0:	b0 92 2a 21 	sts	0x212A, r11
    23a4:	0e c0       	rjmp	.+28     	; 0x23c2 <gc_execute_block+0x274>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    23a6:	60 91 2c 21 	lds	r22, 0x212C
    23aa:	70 91 2d 21 	lds	r23, 0x212D
    23ae:	80 91 2e 21 	lds	r24, 0x212E
    23b2:	90 91 2f 21 	lds	r25, 0x212F
    23b6:	0e 94 1b 46 	call	0x8c36	; 0x8c36 <trunc>
    23ba:	0e 94 1f 43 	call	0x863e	; 0x863e <__fixunssfsi>
    23be:	60 93 7a 21 	sts	0x217A, r22
		}
		if(gc.status) {
    23c2:	80 91 2a 21 	lds	r24, 0x212A
    23c6:	88 23       	and	r24, r24
    23c8:	69 f4       	brne	.+26     	; 0x23e4 <gc_execute_block+0x296>

	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    23ca:	8b e2       	ldi	r24, 0x2B	; 43
    23cc:	91 e2       	ldi	r25, 0x21	; 33
    23ce:	6c e2       	ldi	r22, 0x2C	; 44
    23d0:	71 e2       	ldi	r23, 0x21	; 33
    23d2:	40 e3       	ldi	r20, 0x30	; 48
    23d4:	51 e2       	ldi	r21, 0x21	; 33
    23d6:	94 01       	movw	r18, r8
    23d8:	86 01       	movw	r16, r12
    23da:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <_gc_next_statement>
    23de:	89 2b       	or	r24, r25
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <gc_execute_block+0x296>
    23e2:	f1 ce       	rjmp	.-542    	; 0x21c6 <gc_execute_block+0x78>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    23e4:	80 91 2a 21 	lds	r24, 0x212A
    23e8:	88 23       	and	r24, r24
    23ea:	09 f0       	breq	.+2      	; 0x23ee <gc_execute_block+0x2a0>
    23ec:	9d c3       	rjmp	.+1850   	; 0x2b28 <gc_execute_block+0x9da>
		return(gc.status); 
	}

	i = 0;
    23ee:	19 82       	std	Y+1, r1	; 0x01
    23f0:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    23f2:	eb e6       	ldi	r30, 0x6B	; 107
    23f4:	f1 e2       	ldi	r31, 0x21	; 33
    23f6:	8c e0       	ldi	r24, 0x0C	; 12
    23f8:	df 01       	movw	r26, r30
    23fa:	1d 92       	st	X+, r1
    23fc:	8a 95       	dec	r24
    23fe:	e9 f7       	brne	.-6      	; 0x23fa <gc_execute_block+0x2ac>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    2400:	df 01       	movw	r26, r30
    2402:	1c 97       	sbiw	r26, 0x0c	; 12
    2404:	78 97       	sbiw	r30, 0x18	; 24
    2406:	8c e0       	ldi	r24, 0x0C	; 12
    2408:	01 90       	ld	r0, Z+
    240a:	0d 92       	st	X+, r0
    240c:	81 50       	subi	r24, 0x01	; 1
    240e:	e1 f7       	brne	.-8      	; 0x2408 <gc_execute_block+0x2ba>
    2410:	c6 c0       	rjmp	.+396    	; 0x259e <gc_execute_block+0x450>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2412:	c0 90 2c 21 	lds	r12, 0x212C
    2416:	d0 90 2d 21 	lds	r13, 0x212D
    241a:	e0 90 2e 21 	lds	r14, 0x212E
    241e:	f0 90 2f 21 	lds	r15, 0x212F
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    2422:	80 91 37 21 	lds	r24, 0x2137
    2426:	88 23       	and	r24, r24
    2428:	19 f4       	brne	.+6      	; 0x2430 <gc_execute_block+0x2e2>
    242a:	a7 01       	movw	r20, r14
    242c:	96 01       	movw	r18, r12
    242e:	0a c0       	rjmp	.+20     	; 0x2444 <gc_execute_block+0x2f6>
    2430:	c7 01       	movw	r24, r14
    2432:	b6 01       	movw	r22, r12
    2434:	25 e8       	ldi	r18, 0x85	; 133
    2436:	32 e4       	ldi	r19, 0x42	; 66
    2438:	41 e2       	ldi	r20, 0x21	; 33
    243a:	5d e3       	ldi	r21, 0x3D	; 61
    243c:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    2440:	9b 01       	movw	r18, r22
    2442:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2444:	20 93 4b 21 	sts	0x214B, r18
    2448:	30 93 4c 21 	sts	0x214C, r19
    244c:	40 93 4d 21 	sts	0x214D, r20
    2450:	50 93 4e 21 	sts	0x214E, r21
		switch(gc.letter) {
    2454:	00 91 2b 21 	lds	r16, 0x212B
    2458:	00 35       	cpi	r16, 0x50	; 80
    245a:	09 f4       	brne	.+2      	; 0x245e <gc_execute_block+0x310>
    245c:	47 c0       	rjmp	.+142    	; 0x24ec <gc_execute_block+0x39e>
    245e:	01 35       	cpi	r16, 0x51	; 81
    2460:	58 f4       	brcc	.+22     	; 0x2478 <gc_execute_block+0x32a>
    2462:	06 34       	cpi	r16, 0x46	; 70
    2464:	c1 f0       	breq	.+48     	; 0x2496 <gc_execute_block+0x348>
    2466:	06 34       	cpi	r16, 0x46	; 70
    2468:	08 f4       	brcc	.+2      	; 0x246c <gc_execute_block+0x31e>
    246a:	9f c0       	rjmp	.+318    	; 0x25aa <gc_execute_block+0x45c>
    246c:	80 2f       	mov	r24, r16
    246e:	89 54       	subi	r24, 0x49	; 73
    2470:	83 30       	cpi	r24, 0x03	; 3
    2472:	08 f0       	brcs	.+2      	; 0x2476 <gc_execute_block+0x328>
    2474:	9a c0       	rjmp	.+308    	; 0x25aa <gc_execute_block+0x45c>
    2476:	2d c0       	rjmp	.+90     	; 0x24d2 <gc_execute_block+0x384>
    2478:	03 35       	cpi	r16, 0x53	; 83
    247a:	09 f4       	brne	.+2      	; 0x247e <gc_execute_block+0x330>
    247c:	4b c0       	rjmp	.+150    	; 0x2514 <gc_execute_block+0x3c6>
    247e:	04 35       	cpi	r16, 0x54	; 84
    2480:	20 f4       	brcc	.+8      	; 0x248a <gc_execute_block+0x33c>
    2482:	02 35       	cpi	r16, 0x52	; 82
    2484:	09 f0       	breq	.+2      	; 0x2488 <gc_execute_block+0x33a>
    2486:	91 c0       	rjmp	.+290    	; 0x25aa <gc_execute_block+0x45c>
    2488:	3a c0       	rjmp	.+116    	; 0x24fe <gc_execute_block+0x3b0>
    248a:	80 2f       	mov	r24, r16
    248c:	88 55       	subi	r24, 0x58	; 88
    248e:	83 30       	cpi	r24, 0x03	; 3
    2490:	08 f0       	brcs	.+2      	; 0x2494 <gc_execute_block+0x346>
    2492:	8b c0       	rjmp	.+278    	; 0x25aa <gc_execute_block+0x45c>
    2494:	48 c0       	rjmp	.+144    	; 0x2526 <gc_execute_block+0x3d8>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    2496:	80 91 36 21 	lds	r24, 0x2136
    249a:	88 23       	and	r24, r24
    249c:	49 f0       	breq	.+18     	; 0x24b0 <gc_execute_block+0x362>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    249e:	20 93 4f 21 	sts	0x214F, r18
    24a2:	30 93 50 21 	sts	0x2150, r19
    24a6:	40 93 51 21 	sts	0x2151, r20
    24aa:	50 93 52 21 	sts	0x2152, r21
    24ae:	7d c0       	rjmp	.+250    	; 0x25aa <gc_execute_block+0x45c>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    24b0:	ca 01       	movw	r24, r20
    24b2:	b9 01       	movw	r22, r18
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e7       	ldi	r20, 0x70	; 112
    24ba:	52 e4       	ldi	r21, 0x42	; 66
    24bc:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    24c0:	60 93 43 21 	sts	0x2143, r22
    24c4:	70 93 44 21 	sts	0x2144, r23
    24c8:	80 93 45 21 	sts	0x2145, r24
    24cc:	90 93 46 21 	sts	0x2146, r25
    24d0:	6c c0       	rjmp	.+216    	; 0x25aa <gc_execute_block+0x45c>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    24d2:	e0 2f       	mov	r30, r16
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	ee 0f       	add	r30, r30
    24d8:	ff 1f       	adc	r31, r31
    24da:	ee 0f       	add	r30, r30
    24dc:	ff 1f       	adc	r31, r31
    24de:	e9 5b       	subi	r30, 0xB9	; 185
    24e0:	ff 4d       	sbci	r31, 0xDF	; 223
    24e2:	20 83       	st	Z, r18
    24e4:	31 83       	std	Z+1, r19	; 0x01
    24e6:	42 83       	std	Z+2, r20	; 0x02
    24e8:	53 83       	std	Z+3, r21	; 0x03
    24ea:	5f c0       	rjmp	.+190    	; 0x25aa <gc_execute_block+0x45c>
			case 'P': gc.dwell_time = gc.value; break;
    24ec:	c0 92 3b 21 	sts	0x213B, r12
    24f0:	d0 92 3c 21 	sts	0x213C, r13
    24f4:	e0 92 3d 21 	sts	0x213D, r14
    24f8:	f0 92 3e 21 	sts	0x213E, r15
    24fc:	56 c0       	rjmp	.+172    	; 0x25aa <gc_execute_block+0x45c>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    24fe:	20 93 3f 21 	sts	0x213F, r18
    2502:	30 93 40 21 	sts	0x2140, r19
    2506:	40 93 41 21 	sts	0x2141, r20
    250a:	50 93 42 21 	sts	0x2142, r21
    250e:	70 92 39 21 	sts	0x2139, r7
    2512:	4b c0       	rjmp	.+150    	; 0x25aa <gc_execute_block+0x45c>
			case 'S': gc.spindle_speed = gc.value; break;
    2514:	c7 01       	movw	r24, r14
    2516:	b6 01       	movw	r22, r12
    2518:	0e 94 1a 43 	call	0x8634	; 0x8634 <__fixsfsi>
    251c:	60 93 7c 21 	sts	0x217C, r22
    2520:	70 93 7d 21 	sts	0x217D, r23
    2524:	42 c0       	rjmp	.+132    	; 0x25aa <gc_execute_block+0x45c>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    2526:	80 91 3a 21 	lds	r24, 0x213A
    252a:	88 23       	and	r24, r24
    252c:	69 f0       	breq	.+26     	; 0x2548 <gc_execute_block+0x3fa>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    252e:	e0 2f       	mov	r30, r16
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	ee 0f       	add	r30, r30
    2534:	ff 1f       	adc	r31, r31
    2536:	ee 0f       	add	r30, r30
    2538:	ff 1f       	adc	r31, r31
    253a:	e6 53       	subi	r30, 0x36	; 54
    253c:	f0 4e       	sbci	r31, 0xE0	; 224
    253e:	21 a7       	std	Z+41, r18	; 0x29
    2540:	32 a7       	std	Z+42, r19	; 0x2a
    2542:	43 a7       	std	Z+43, r20	; 0x2b
    2544:	54 a7       	std	Z+44, r21	; 0x2c
    2546:	31 c0       	rjmp	.+98     	; 0x25aa <gc_execute_block+0x45c>
				} else if (gc.absolute_mode || gc.absolute_override) {
    2548:	80 91 38 21 	lds	r24, 0x2138
    254c:	88 23       	and	r24, r24
    254e:	21 f4       	brne	.+8      	; 0x2558 <gc_execute_block+0x40a>
    2550:	80 91 7e 21 	lds	r24, 0x217E
    2554:	88 23       	and	r24, r24
    2556:	69 f0       	breq	.+26     	; 0x2572 <gc_execute_block+0x424>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    2558:	e0 2f       	mov	r30, r16
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	ee 0f       	add	r30, r30
    255e:	ff 1f       	adc	r31, r31
    2560:	ee 0f       	add	r30, r30
    2562:	ff 1f       	adc	r31, r31
    2564:	e6 53       	subi	r30, 0x36	; 54
    2566:	f0 4e       	sbci	r31, 0xE0	; 224
    2568:	25 ab       	std	Z+53, r18	; 0x35
    256a:	36 ab       	std	Z+54, r19	; 0x36
    256c:	47 ab       	std	Z+55, r20	; 0x37
    256e:	50 af       	std	Z+56, r21	; 0x38
    2570:	1c c0       	rjmp	.+56     	; 0x25aa <gc_execute_block+0x45c>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    2572:	10 e0       	ldi	r17, 0x00	; 0
    2574:	00 0f       	add	r16, r16
    2576:	11 1f       	adc	r17, r17
    2578:	00 0f       	add	r16, r16
    257a:	11 1f       	adc	r17, r17
    257c:	06 53       	subi	r16, 0x36	; 54
    257e:	10 4e       	sbci	r17, 0xE0	; 224
    2580:	f8 01       	movw	r30, r16
    2582:	65 a9       	ldd	r22, Z+53	; 0x35
    2584:	76 a9       	ldd	r23, Z+54	; 0x36
    2586:	87 a9       	ldd	r24, Z+55	; 0x37
    2588:	90 ad       	ldd	r25, Z+56	; 0x38
    258a:	0e 94 0c 42 	call	0x8418	; 0x8418 <__addsf3>
    258e:	d8 01       	movw	r26, r16
    2590:	d5 96       	adiw	r26, 0x35	; 53
    2592:	6d 93       	st	X+, r22
    2594:	7d 93       	st	X+, r23
    2596:	8d 93       	st	X+, r24
    2598:	9c 93       	st	X, r25
    259a:	d8 97       	sbiw	r26, 0x38	; 56
    259c:	06 c0       	rjmp	.+12     	; 0x25aa <gc_execute_block+0x45c>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    259e:	5e 01       	movw	r10, r28
    25a0:	08 94       	sec
    25a2:	a1 1c       	adc	r10, r1
    25a4:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    25a6:	77 24       	eor	r7, r7
    25a8:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    25aa:	8b e2       	ldi	r24, 0x2B	; 43
    25ac:	91 e2       	ldi	r25, 0x21	; 33
    25ae:	6c e2       	ldi	r22, 0x2C	; 44
    25b0:	71 e2       	ldi	r23, 0x21	; 33
    25b2:	40 e3       	ldi	r20, 0x30	; 48
    25b4:	51 e2       	ldi	r21, 0x21	; 33
    25b6:	94 01       	movw	r18, r8
    25b8:	85 01       	movw	r16, r10
    25ba:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <_gc_next_statement>
    25be:	89 2b       	or	r24, r25
    25c0:	09 f0       	breq	.+2      	; 0x25c4 <gc_execute_block+0x476>
    25c2:	27 cf       	rjmp	.-434    	; 0x2412 <gc_execute_block+0x2c4>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    25c4:	80 91 2a 21 	lds	r24, 0x212A
    25c8:	88 23       	and	r24, r24
    25ca:	09 f0       	breq	.+2      	; 0x25ce <gc_execute_block+0x480>
    25cc:	ad c2       	rjmp	.+1370   	; 0x2b28 <gc_execute_block+0x9da>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    25ce:	80 91 7b 21 	lds	r24, 0x217B
    25d2:	88 23       	and	r24, r24
    25d4:	71 f0       	breq	.+28     	; 0x25f2 <gc_execute_block+0x4a4>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    25d6:	40 91 7c 21 	lds	r20, 0x217C
    25da:	50 91 7d 21 	lds	r21, 0x217D
    25de:	66 27       	eor	r22, r22
    25e0:	57 fd       	sbrc	r21, 7
    25e2:	60 95       	com	r22
    25e4:	76 2f       	mov	r23, r22
    25e6:	99 27       	eor	r25, r25
    25e8:	87 fd       	sbrc	r24, 7
    25ea:	90 95       	com	r25
    25ec:	0e 94 8d 23 	call	0x471a	; 0x471a <spindle_run>
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <gc_execute_block+0x4a8>
	} else {
		spindle_stop();
    25f2:	0e 94 9d 23 	call	0x473a	; 0x473a <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    25f6:	80 91 7f 21 	lds	r24, 0x217F
    25fa:	81 30       	cpi	r24, 0x01	; 1
    25fc:	41 f0       	breq	.+16     	; 0x260e <gc_execute_block+0x4c0>
    25fe:	81 30       	cpi	r24, 0x01	; 1
    2600:	c8 f0       	brcs	.+50     	; 0x2634 <gc_execute_block+0x4e6>
    2602:	82 30       	cpi	r24, 0x02	; 2
    2604:	09 f0       	breq	.+2      	; 0x2608 <gc_execute_block+0x4ba>
    2606:	81 c2       	rjmp	.+1282   	; 0x2b0a <gc_execute_block+0x9bc>
    	case NEXT_ACTION_GO_HOME: mc_go_home(); break;
    2608:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <mc_go_home>
    260c:	7e c2       	rjmp	.+1276   	; 0x2b0a <gc_execute_block+0x9bc>
		case NEXT_ACTION_DWELL: mc_dwell(trunc(gc.dwell_time*1000)); break;
    260e:	60 91 3b 21 	lds	r22, 0x213B
    2612:	70 91 3c 21 	lds	r23, 0x213C
    2616:	80 91 3d 21 	lds	r24, 0x213D
    261a:	90 91 3e 21 	lds	r25, 0x213E
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	4a e7       	ldi	r20, 0x7A	; 122
    2624:	54 e4       	ldi	r21, 0x44	; 68
    2626:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    262a:	0e 94 1f 43 	call	0x863e	; 0x863e <__fixunssfsi>
    262e:	0e 94 2f 1b 	call	0x365e	; 0x365e <mc_dwell>
    2632:	6b c2       	rjmp	.+1238   	; 0x2b0a <gc_execute_block+0x9bc>
		case NEXT_ACTION_DEFAULT: 
 		switch (gc.motion_mode) {
    2634:	b0 91 35 21 	lds	r27, 0x2135
    2638:	b8 8f       	std	Y+24, r27	; 0x18
    263a:	b2 30       	cpi	r27, 0x02	; 2
    263c:	20 f0       	brcs	.+8      	; 0x2646 <gc_execute_block+0x4f8>
    263e:	b4 30       	cpi	r27, 0x04	; 4
    2640:	08 f0       	brcs	.+2      	; 0x2644 <gc_execute_block+0x4f6>
    2642:	63 c2       	rjmp	.+1222   	; 0x2b0a <gc_execute_block+0x9bc>
    2644:	31 c0       	rjmp	.+98     	; 0x26a8 <gc_execute_block+0x55a>
			case MOTION_MODE_CANCEL: break;
			case MOTION_MODE_RAPID_LINEAR:
			case MOTION_MODE_LINEAR:
				gc.status = mc_line_nonblock(gc.target[X_AXIS], 
    2646:	60 91 5f 21 	lds	r22, 0x215F
    264a:	70 91 60 21 	lds	r23, 0x2160
    264e:	80 91 61 21 	lds	r24, 0x2161
    2652:	90 91 62 21 	lds	r25, 0x2162
    2656:	20 91 63 21 	lds	r18, 0x2163
    265a:	30 91 64 21 	lds	r19, 0x2164
    265e:	40 91 65 21 	lds	r20, 0x2165
    2662:	50 91 66 21 	lds	r21, 0x2166
    2666:	e0 90 67 21 	lds	r14, 0x2167
    266a:	f0 90 68 21 	lds	r15, 0x2168
    266e:	00 91 69 21 	lds	r16, 0x2169
    2672:	10 91 6a 21 	lds	r17, 0x216A
    2676:	80 90 36 21 	lds	r8, 0x2136
    267a:	88 20       	and	r8, r8
    267c:	49 f0       	breq	.+18     	; 0x2690 <gc_execute_block+0x542>
    267e:	a0 90 4f 21 	lds	r10, 0x214F
    2682:	b0 90 50 21 	lds	r11, 0x2150
    2686:	c0 90 51 21 	lds	r12, 0x2151
    268a:	d0 90 52 21 	lds	r13, 0x2152
    268e:	08 c0       	rjmp	.+16     	; 0x26a0 <gc_execute_block+0x552>
    2690:	a0 90 43 21 	lds	r10, 0x2143
    2694:	b0 90 44 21 	lds	r11, 0x2144
    2698:	c0 90 45 21 	lds	r12, 0x2145
    269c:	d0 90 46 21 	lds	r13, 0x2146
    26a0:	99 24       	eor	r9, r9
    26a2:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <mc_line_nonblock>
    26a6:	16 c1       	rjmp	.+556    	; 0x28d4 <gc_execute_block+0x786>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    26a8:	80 91 39 21 	lds	r24, 0x2139
    26ac:	88 23       	and	r24, r24
    26ae:	09 f4       	brne	.+2      	; 0x26b2 <gc_execute_block+0x564>
    26b0:	e8 c0       	rjmp	.+464    	; 0x2882 <gc_execute_block+0x734>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    26b2:	e0 91 77 21 	lds	r30, 0x2177
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	ee 0f       	add	r30, r30
    26ba:	ff 1f       	adc	r31, r31
    26bc:	ee 0f       	add	r30, r30
    26be:	ff 1f       	adc	r31, r31
    26c0:	e6 5d       	subi	r30, 0xD6	; 214
    26c2:	fe 4d       	sbci	r31, 0xDE	; 222
    26c4:	65 a9       	ldd	r22, Z+53	; 0x35
    26c6:	76 a9       	ldd	r23, Z+54	; 0x36
    26c8:	87 a9       	ldd	r24, Z+55	; 0x37
    26ca:	90 ad       	ldd	r25, Z+56	; 0x38
    26cc:	21 a5       	ldd	r18, Z+41	; 0x29
    26ce:	32 a5       	ldd	r19, Z+42	; 0x2a
    26d0:	43 a5       	ldd	r20, Z+43	; 0x2b
    26d2:	54 a5       	ldd	r21, Z+44	; 0x2c
    26d4:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    26d8:	6f 83       	std	Y+7, r22	; 0x07
    26da:	78 87       	std	Y+8, r23	; 0x08
    26dc:	89 87       	std	Y+9, r24	; 0x09
    26de:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    26e0:	e0 91 78 21 	lds	r30, 0x2178
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	ee 0f       	add	r30, r30
    26e8:	ff 1f       	adc	r31, r31
    26ea:	ee 0f       	add	r30, r30
    26ec:	ff 1f       	adc	r31, r31
    26ee:	e6 5d       	subi	r30, 0xD6	; 214
    26f0:	fe 4d       	sbci	r31, 0xDE	; 222
    26f2:	65 a9       	ldd	r22, Z+53	; 0x35
    26f4:	76 a9       	ldd	r23, Z+54	; 0x36
    26f6:	87 a9       	ldd	r24, Z+55	; 0x37
    26f8:	90 ad       	ldd	r25, Z+56	; 0x38
    26fa:	21 a5       	ldd	r18, Z+41	; 0x29
    26fc:	32 a5       	ldd	r19, Z+42	; 0x2a
    26fe:	43 a5       	ldd	r20, Z+43	; 0x2b
    2700:	54 a5       	ldd	r21, Z+44	; 0x2c
    2702:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    2706:	1b 01       	movw	r2, r22
    2708:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    270a:	10 92 6b 21 	sts	0x216B, r1
    270e:	10 92 6c 21 	sts	0x216C, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    2712:	60 90 3f 21 	lds	r6, 0x213F
    2716:	70 90 40 21 	lds	r7, 0x2140
    271a:	80 90 41 21 	lds	r8, 0x2141
    271e:	90 90 42 21 	lds	r9, 0x2142
    2722:	c4 01       	movw	r24, r8
    2724:	b3 01       	movw	r22, r6
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e8       	ldi	r20, 0x80	; 128
    272c:	50 e4       	ldi	r21, 0x40	; 64
    272e:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    2732:	a4 01       	movw	r20, r8
    2734:	93 01       	movw	r18, r6
    2736:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    273a:	5b 01       	movw	r10, r22
    273c:	6c 01       	movw	r12, r24
    273e:	6f 81       	ldd	r22, Y+7	; 0x07
    2740:	78 85       	ldd	r23, Y+8	; 0x08
    2742:	89 85       	ldd	r24, Y+9	; 0x09
    2744:	9a 85       	ldd	r25, Y+10	; 0x0a
    2746:	9b 01       	movw	r18, r22
    2748:	ac 01       	movw	r20, r24
    274a:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    274e:	7b 01       	movw	r14, r22
    2750:	8c 01       	movw	r16, r24
    2752:	c2 01       	movw	r24, r4
    2754:	b1 01       	movw	r22, r2
    2756:	a2 01       	movw	r20, r4
    2758:	91 01       	movw	r18, r2
    275a:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    275e:	9b 01       	movw	r18, r22
    2760:	ac 01       	movw	r20, r24
    2762:	c8 01       	movw	r24, r16
    2764:	b7 01       	movw	r22, r14
    2766:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    276a:	9b 01       	movw	r18, r22
    276c:	ac 01       	movw	r20, r24
    276e:	c6 01       	movw	r24, r12
    2770:	b5 01       	movw	r22, r10
    2772:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    2776:	0e 94 da 45 	call	0x8bb4	; 0x8bb4 <sqrt>
    277a:	7b 01       	movw	r14, r22
    277c:	8c 01       	movw	r16, r24
    277e:	6f 81       	ldd	r22, Y+7	; 0x07
    2780:	78 85       	ldd	r23, Y+8	; 0x08
    2782:	89 85       	ldd	r24, Y+9	; 0x09
    2784:	9a 85       	ldd	r25, Y+10	; 0x0a
    2786:	a2 01       	movw	r20, r4
    2788:	91 01       	movw	r18, r2
    278a:	0e 94 a8 44 	call	0x8950	; 0x8950 <hypot>
    278e:	9b 01       	movw	r18, r22
    2790:	ac 01       	movw	r20, r24
    2792:	17 fb       	bst	r17, 7
    2794:	10 95       	com	r17
    2796:	17 f9       	bld	r17, 7
    2798:	10 95       	com	r17
    279a:	c8 01       	movw	r24, r16
    279c:	b7 01       	movw	r22, r14
    279e:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    27a2:	7b 01       	movw	r14, r22
    27a4:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    27a6:	a8 01       	movw	r20, r16
    27a8:	97 01       	movw	r18, r14
    27aa:	0e 94 22 46 	call	0x8c44	; 0x8c44 <__unordsf2>
    27ae:	88 23       	and	r24, r24
    27b0:	11 f0       	breq	.+4      	; 0x27b6 <gc_execute_block+0x668>
		FAIL(TG_FLOATING_POINT_ERROR); 
    27b2:	8d e0       	ldi	r24, 0x0D	; 13
    27b4:	8f c0       	rjmp	.+286    	; 0x28d4 <gc_execute_block+0x786>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    27b6:	e8 8d       	ldd	r30, Y+24	; 0x18
    27b8:	e3 30       	cpi	r30, 0x03	; 3
    27ba:	21 f4       	brne	.+8      	; 0x27c4 <gc_execute_block+0x676>
		h_x2_div_d = -h_x2_div_d;
    27bc:	17 fb       	bst	r17, 7
    27be:	10 95       	com	r17
    27c0:	17 f9       	bld	r17, 7
    27c2:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    27c4:	c4 01       	movw	r24, r8
    27c6:	b3 01       	movw	r22, r6
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	0e 94 ab 42 	call	0x8556	; 0x8556 <__cmpsf2>
    27d4:	88 23       	and	r24, r24
    27d6:	24 f4       	brge	.+8      	; 0x27e0 <gc_execute_block+0x692>
		h_x2_div_d = -h_x2_div_d; 
    27d8:	17 fb       	bst	r17, 7
    27da:	10 95       	com	r17
    27dc:	17 f9       	bld	r17, 7
    27de:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    27e0:	80 91 77 21 	lds	r24, 0x2177
    27e4:	c8 2e       	mov	r12, r24
    27e6:	dd 24       	eor	r13, r13
    27e8:	cc 0c       	add	r12, r12
    27ea:	dd 1c       	adc	r13, r13
    27ec:	cc 0c       	add	r12, r12
    27ee:	dd 1c       	adc	r13, r13
    27f0:	2b e6       	ldi	r18, 0x6B	; 107
    27f2:	31 e2       	ldi	r19, 0x21	; 33
    27f4:	c2 0e       	add	r12, r18
    27f6:	d3 1e       	adc	r13, r19
    27f8:	c2 01       	movw	r24, r4
    27fa:	b1 01       	movw	r22, r2
    27fc:	a8 01       	movw	r20, r16
    27fe:	97 01       	movw	r18, r14
    2800:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    2804:	9b 01       	movw	r18, r22
    2806:	ac 01       	movw	r20, r24
    2808:	6f 81       	ldd	r22, Y+7	; 0x07
    280a:	78 85       	ldd	r23, Y+8	; 0x08
    280c:	89 85       	ldd	r24, Y+9	; 0x09
    280e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2810:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	40 e0       	ldi	r20, 0x00	; 0
    281a:	5f e3       	ldi	r21, 0x3F	; 63
    281c:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    2820:	d6 01       	movw	r26, r12
    2822:	6d 93       	st	X+, r22
    2824:	7d 93       	st	X+, r23
    2826:	8d 93       	st	X+, r24
    2828:	9c 93       	st	X, r25
    282a:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    282c:	80 91 78 21 	lds	r24, 0x2178
    2830:	c8 2e       	mov	r12, r24
    2832:	dd 24       	eor	r13, r13
    2834:	cc 0c       	add	r12, r12
    2836:	dd 1c       	adc	r13, r13
    2838:	cc 0c       	add	r12, r12
    283a:	dd 1c       	adc	r13, r13
    283c:	eb e6       	ldi	r30, 0x6B	; 107
    283e:	f1 e2       	ldi	r31, 0x21	; 33
    2840:	ce 0e       	add	r12, r30
    2842:	df 1e       	adc	r13, r31
    2844:	6f 81       	ldd	r22, Y+7	; 0x07
    2846:	78 85       	ldd	r23, Y+8	; 0x08
    2848:	89 85       	ldd	r24, Y+9	; 0x09
    284a:	9a 85       	ldd	r25, Y+10	; 0x0a
    284c:	a8 01       	movw	r20, r16
    284e:	97 01       	movw	r18, r14
    2850:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    2854:	9b 01       	movw	r18, r22
    2856:	ac 01       	movw	r20, r24
    2858:	c2 01       	movw	r24, r4
    285a:	b1 01       	movw	r22, r2
    285c:	0e 94 0c 42 	call	0x8418	; 0x8418 <__addsf3>
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e0       	ldi	r20, 0x00	; 0
    2866:	5f e3       	ldi	r21, 0x3F	; 63
    2868:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    286c:	d6 01       	movw	r26, r12
    286e:	6d 93       	st	X+, r22
    2870:	7d 93       	st	X+, r23
    2872:	8d 93       	st	X+, r24
    2874:	9c 93       	st	X, r25
    2876:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    2878:	80 91 2a 21 	lds	r24, 0x212A
    287c:	88 23       	and	r24, r24
    287e:	09 f0       	breq	.+2      	; 0x2882 <gc_execute_block+0x734>
    2880:	44 c1       	rjmp	.+648    	; 0x2b0a <gc_execute_block+0x9bc>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    2882:	e0 91 77 21 	lds	r30, 0x2177
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	ee 0f       	add	r30, r30
    288a:	ff 1f       	adc	r31, r31
    288c:	ee 0f       	add	r30, r30
    288e:	ff 1f       	adc	r31, r31
    2890:	e5 59       	subi	r30, 0x95	; 149
    2892:	fe 4d       	sbci	r31, 0xDE	; 222
    2894:	60 81       	ld	r22, Z
    2896:	71 81       	ldd	r23, Z+1	; 0x01
    2898:	82 81       	ldd	r24, Z+2	; 0x02
    289a:	93 81       	ldd	r25, Z+3	; 0x03
    289c:	90 58       	subi	r25, 0x80	; 128
    289e:	e0 91 78 21 	lds	r30, 0x2178
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	ee 0f       	add	r30, r30
    28a6:	ff 1f       	adc	r31, r31
    28a8:	ee 0f       	add	r30, r30
    28aa:	ff 1f       	adc	r31, r31
    28ac:	e5 59       	subi	r30, 0x95	; 149
    28ae:	fe 4d       	sbci	r31, 0xDE	; 222
    28b0:	20 81       	ld	r18, Z
    28b2:	31 81       	ldd	r19, Z+1	; 0x01
    28b4:	42 81       	ldd	r20, Z+2	; 0x02
    28b6:	53 81       	ldd	r21, Z+3	; 0x03
    28b8:	50 58       	subi	r21, 0x80	; 128
    28ba:	0e 94 68 10 	call	0x20d0	; 0x20d0 <theta>
    28be:	6f 87       	std	Y+15, r22	; 0x0f
    28c0:	78 8b       	std	Y+16, r23	; 0x10
    28c2:	89 8b       	std	Y+17, r24	; 0x11
    28c4:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    28c6:	9b 01       	movw	r18, r22
    28c8:	ac 01       	movw	r20, r24
    28ca:	0e 94 22 46 	call	0x8c44	; 0x8c44 <__unordsf2>
    28ce:	88 23       	and	r24, r24
    28d0:	21 f0       	breq	.+8      	; 0x28da <gc_execute_block+0x78c>
		FAIL(TG_ARC_ERROR); 
    28d2:	8f e0       	ldi	r24, 0x0F	; 15
    28d4:	80 93 2a 21 	sts	0x212A, r24
    28d8:	18 c1       	rjmp	.+560    	; 0x2b0a <gc_execute_block+0x9bc>
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    28da:	e0 91 77 21 	lds	r30, 0x2177
    28de:	0e 2f       	mov	r16, r30
    28e0:	10 e0       	ldi	r17, 0x00	; 0
    28e2:	e0 91 78 21 	lds	r30, 0x2178
    28e6:	ce 2e       	mov	r12, r30
    28e8:	dd 24       	eor	r13, r13
    28ea:	00 0f       	add	r16, r16
    28ec:	11 1f       	adc	r17, r17
    28ee:	00 0f       	add	r16, r16
    28f0:	11 1f       	adc	r17, r17
    28f2:	06 5d       	subi	r16, 0xD6	; 214
    28f4:	1e 4d       	sbci	r17, 0xDE	; 222
    28f6:	f8 01       	movw	r30, r16
    28f8:	ef 5b       	subi	r30, 0xBF	; 191
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	d8 01       	movw	r26, r16
    28fe:	d5 96       	adiw	r26, 0x35	; 53
    2900:	6d 91       	ld	r22, X+
    2902:	7d 91       	ld	r23, X+
    2904:	8d 91       	ld	r24, X+
    2906:	9c 91       	ld	r25, X
    2908:	d8 97       	sbiw	r26, 0x38	; 56
    290a:	20 81       	ld	r18, Z
    290c:	31 81       	ldd	r19, Z+1	; 0x01
    290e:	42 81       	ldd	r20, Z+2	; 0x02
    2910:	53 81       	ldd	r21, Z+3	; 0x03
    2912:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    2916:	f8 01       	movw	r30, r16
    2918:	21 a5       	ldd	r18, Z+41	; 0x29
    291a:	32 a5       	ldd	r19, Z+42	; 0x2a
    291c:	43 a5       	ldd	r20, Z+43	; 0x2b
    291e:	54 a5       	ldd	r21, Z+44	; 0x2c
    2920:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    2924:	7b 01       	movw	r14, r22
    2926:	8c 01       	movw	r16, r24
    2928:	cc 0c       	add	r12, r12
    292a:	dd 1c       	adc	r13, r13
    292c:	cc 0c       	add	r12, r12
    292e:	dd 1c       	adc	r13, r13
    2930:	2a e2       	ldi	r18, 0x2A	; 42
    2932:	31 e2       	ldi	r19, 0x21	; 33
    2934:	c2 0e       	add	r12, r18
    2936:	d3 1e       	adc	r13, r19
    2938:	f6 01       	movw	r30, r12
    293a:	ef 5b       	subi	r30, 0xBF	; 191
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	d6 01       	movw	r26, r12
    2940:	d5 96       	adiw	r26, 0x35	; 53
    2942:	6d 91       	ld	r22, X+
    2944:	7d 91       	ld	r23, X+
    2946:	8d 91       	ld	r24, X+
    2948:	9c 91       	ld	r25, X
    294a:	d8 97       	sbiw	r26, 0x38	; 56
    294c:	20 81       	ld	r18, Z
    294e:	31 81       	ldd	r19, Z+1	; 0x01
    2950:	42 81       	ldd	r20, Z+2	; 0x02
    2952:	53 81       	ldd	r21, Z+3	; 0x03
    2954:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    2958:	f6 01       	movw	r30, r12
    295a:	21 a5       	ldd	r18, Z+41	; 0x29
    295c:	32 a5       	ldd	r19, Z+42	; 0x2a
    295e:	43 a5       	ldd	r20, Z+43	; 0x2b
    2960:	54 a5       	ldd	r21, Z+44	; 0x2c
    2962:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    2966:	9b 01       	movw	r18, r22
    2968:	ac 01       	movw	r20, r24
    296a:	c8 01       	movw	r24, r16
    296c:	b7 01       	movw	r22, r14
    296e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <theta>
    2972:	7b 01       	movw	r14, r22
    2974:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    2976:	a8 01       	movw	r20, r16
    2978:	97 01       	movw	r18, r14
    297a:	0e 94 22 46 	call	0x8c44	; 0x8c44 <__unordsf2>
    297e:	88 23       	and	r24, r24
    2980:	09 f0       	breq	.+2      	; 0x2984 <gc_execute_block+0x836>
    2982:	a7 cf       	rjmp	.-178    	; 0x28d2 <gc_execute_block+0x784>
		FAIL(TG_ARC_ERROR); 
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    2984:	c8 01       	movw	r24, r16
    2986:	b7 01       	movw	r22, r14
    2988:	2f 85       	ldd	r18, Y+15	; 0x0f
    298a:	38 89       	ldd	r19, Y+16	; 0x10
    298c:	49 89       	ldd	r20, Y+17	; 0x11
    298e:	5a 89       	ldd	r21, Y+18	; 0x12
    2990:	0e 94 ab 42 	call	0x8556	; 0x8556 <__cmpsf2>
    2994:	88 23       	and	r24, r24
    2996:	54 f4       	brge	.+20     	; 0x29ac <gc_execute_block+0x85e>
		theta_end += 2*M_PI;
    2998:	c8 01       	movw	r24, r16
    299a:	b7 01       	movw	r22, r14
    299c:	2b ed       	ldi	r18, 0xDB	; 219
    299e:	3f e0       	ldi	r19, 0x0F	; 15
    29a0:	49 ec       	ldi	r20, 0xC9	; 201
    29a2:	50 e4       	ldi	r21, 0x40	; 64
    29a4:	0e 94 0c 42 	call	0x8418	; 0x8418 <__addsf3>
    29a8:	7b 01       	movw	r14, r22
    29aa:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    29ac:	c8 01       	movw	r24, r16
    29ae:	b7 01       	movw	r22, r14
    29b0:	2f 85       	ldd	r18, Y+15	; 0x0f
    29b2:	38 89       	ldd	r19, Y+16	; 0x10
    29b4:	49 89       	ldd	r20, Y+17	; 0x11
    29b6:	5a 89       	ldd	r21, Y+18	; 0x12
    29b8:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    29bc:	6b 87       	std	Y+11, r22	; 0x0b
    29be:	7c 87       	std	Y+12, r23	; 0x0c
    29c0:	8d 87       	std	Y+13, r24	; 0x0d
    29c2:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    29c4:	80 91 35 21 	lds	r24, 0x2135
    29c8:	83 30       	cpi	r24, 0x03	; 3
    29ca:	71 f4       	brne	.+28     	; 0x29e8 <gc_execute_block+0x89a>
		angular_travel = angular_travel - 2*M_PI;
    29cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d4:	2b ed       	ldi	r18, 0xDB	; 219
    29d6:	3f e0       	ldi	r19, 0x0F	; 15
    29d8:	49 ec       	ldi	r20, 0xC9	; 201
    29da:	50 e4       	ldi	r21, 0x40	; 64
    29dc:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    29e0:	6b 87       	std	Y+11, r22	; 0x0b
    29e2:	7c 87       	std	Y+12, r23	; 0x0c
    29e4:	8d 87       	std	Y+13, r24	; 0x0d
    29e6:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    29e8:	80 91 77 21 	lds	r24, 0x2177
    29ec:	28 2f       	mov	r18, r24
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	2d 83       	std	Y+5, r18	; 0x05
    29f2:	3e 83       	std	Y+6, r19	; 0x06
    29f4:	f9 01       	movw	r30, r18
    29f6:	ee 0f       	add	r30, r30
    29f8:	ff 1f       	adc	r31, r31
    29fa:	ee 0f       	add	r30, r30
    29fc:	ff 1f       	adc	r31, r31
    29fe:	e5 59       	subi	r30, 0x95	; 149
    2a00:	fe 4d       	sbci	r31, 0xDE	; 222
    2a02:	e0 80       	ld	r14, Z
    2a04:	f1 80       	ldd	r15, Z+1	; 0x01
    2a06:	02 81       	ldd	r16, Z+2	; 0x02
    2a08:	13 81       	ldd	r17, Z+3	; 0x03
    2a0a:	80 91 78 21 	lds	r24, 0x2178
    2a0e:	a8 2f       	mov	r26, r24
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	ab 83       	std	Y+3, r26	; 0x03
    2a14:	bc 83       	std	Y+4, r27	; 0x04
    2a16:	fd 01       	movw	r30, r26
    2a18:	ee 0f       	add	r30, r30
    2a1a:	ff 1f       	adc	r31, r31
    2a1c:	ee 0f       	add	r30, r30
    2a1e:	ff 1f       	adc	r31, r31
    2a20:	e5 59       	subi	r30, 0x95	; 149
    2a22:	fe 4d       	sbci	r31, 0xDE	; 222
    2a24:	20 81       	ld	r18, Z
    2a26:	31 81       	ldd	r19, Z+1	; 0x01
    2a28:	42 81       	ldd	r20, Z+2	; 0x02
    2a2a:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    2a2c:	80 91 79 21 	lds	r24, 0x2179
    2a30:	28 2e       	mov	r2, r24
    2a32:	33 24       	eor	r3, r3
    2a34:	f1 01       	movw	r30, r2
    2a36:	ee 0f       	add	r30, r30
    2a38:	ff 1f       	adc	r31, r31
    2a3a:	ee 0f       	add	r30, r30
    2a3c:	ff 1f       	adc	r31, r31
    2a3e:	e6 5d       	subi	r30, 0xD6	; 214
    2a40:	fe 4d       	sbci	r31, 0xDE	; 222
    2a42:	85 a9       	ldd	r24, Z+53	; 0x35
    2a44:	96 a9       	ldd	r25, Z+54	; 0x36
    2a46:	a7 a9       	ldd	r26, Z+55	; 0x37
    2a48:	b0 ad       	ldd	r27, Z+56	; 0x38
    2a4a:	8c 8b       	std	Y+20, r24	; 0x14
    2a4c:	9d 8b       	std	Y+21, r25	; 0x15
    2a4e:	ae 8b       	std	Y+22, r26	; 0x16
    2a50:	bf 8b       	std	Y+23, r27	; 0x17
    2a52:	a1 a4       	ldd	r10, Z+41	; 0x29
    2a54:	b2 a4       	ldd	r11, Z+42	; 0x2a
    2a56:	c3 a4       	ldd	r12, Z+43	; 0x2b
    2a58:	d4 a4       	ldd	r13, Z+44	; 0x2c

	// Trace the arc
	gc.status = mc_arc_nonblock(theta_start, 
    2a5a:	90 91 36 21 	lds	r25, 0x2136
    2a5e:	9b 8b       	std	Y+19, r25	; 0x13
    2a60:	99 23       	and	r25, r25
    2a62:	49 f0       	breq	.+18     	; 0x2a76 <gc_execute_block+0x928>
    2a64:	40 90 4f 21 	lds	r4, 0x214F
    2a68:	50 90 50 21 	lds	r5, 0x2150
    2a6c:	60 90 51 21 	lds	r6, 0x2151
    2a70:	70 90 52 21 	lds	r7, 0x2152
    2a74:	08 c0       	rjmp	.+16     	; 0x2a86 <gc_execute_block+0x938>
    2a76:	40 90 43 21 	lds	r4, 0x2143
    2a7a:	50 90 44 21 	lds	r5, 0x2144
    2a7e:	60 90 45 21 	lds	r6, 0x2145
    2a82:	70 90 46 21 	lds	r7, 0x2146
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2a86:	c8 01       	movw	r24, r16
    2a88:	b7 01       	movw	r22, r14
    2a8a:	0e 94 a8 44 	call	0x8950	; 0x8950 <hypot>
    2a8e:	7b 01       	movw	r14, r22
    2a90:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc_nonblock(theta_start, 
    2a92:	ad b7       	in	r26, 0x3d	; 61
    2a94:	be b7       	in	r27, 0x3e	; 62
    2a96:	1a 97       	sbiw	r26, 0x0a	; 10
    2a98:	ad bf       	out	0x3d, r26	; 61
    2a9a:	be bf       	out	0x3e, r27	; 62
    2a9c:	8d b6       	in	r8, 0x3d	; 61
    2a9e:	9e b6       	in	r9, 0x3e	; 62
    2aa0:	08 94       	sec
    2aa2:	81 1c       	adc	r8, r1
    2aa4:	91 1c       	adc	r9, r1
    2aa6:	6c 89       	ldd	r22, Y+20	; 0x14
    2aa8:	7d 89       	ldd	r23, Y+21	; 0x15
    2aaa:	8e 89       	ldd	r24, Y+22	; 0x16
    2aac:	9f 89       	ldd	r25, Y+23	; 0x17
    2aae:	a6 01       	movw	r20, r12
    2ab0:	95 01       	movw	r18, r10
    2ab2:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    2ab6:	5b 01       	movw	r10, r22
    2ab8:	6c 01       	movw	r12, r24
    2aba:	2b 81       	ldd	r18, Y+3	; 0x03
    2abc:	3c 81       	ldd	r19, Y+4	; 0x04
    2abe:	f4 01       	movw	r30, r8
    2ac0:	20 83       	st	Z, r18
    2ac2:	31 83       	std	Z+1, r19	; 0x01
    2ac4:	22 82       	std	Z+2, r2	; 0x02
    2ac6:	33 82       	std	Z+3, r3	; 0x03
    2ac8:	d4 01       	movw	r26, r8
    2aca:	14 96       	adiw	r26, 0x04	; 4
    2acc:	4d 92       	st	X+, r4
    2ace:	5d 92       	st	X+, r5
    2ad0:	6d 92       	st	X+, r6
    2ad2:	7c 92       	st	X, r7
    2ad4:	17 97       	sbiw	r26, 0x07	; 7
    2ad6:	eb 89       	ldd	r30, Y+19	; 0x13
    2ad8:	18 96       	adiw	r26, 0x08	; 8
    2ada:	ec 93       	st	X, r30
    2adc:	18 97       	sbiw	r26, 0x08	; 8
    2ade:	19 96       	adiw	r26, 0x09	; 9
    2ae0:	1c 92       	st	X, r1
    2ae2:	6f 85       	ldd	r22, Y+15	; 0x0f
    2ae4:	78 89       	ldd	r23, Y+16	; 0x10
    2ae6:	89 89       	ldd	r24, Y+17	; 0x11
    2ae8:	9a 89       	ldd	r25, Y+18	; 0x12
    2aea:	2b 85       	ldd	r18, Y+11	; 0x0b
    2aec:	3c 85       	ldd	r19, Y+12	; 0x0c
    2aee:	4d 85       	ldd	r20, Y+13	; 0x0d
    2af0:	5e 85       	ldd	r21, Y+14	; 0x0e
    2af2:	8d 80       	ldd	r8, Y+5	; 0x05
    2af4:	9e 80       	ldd	r9, Y+6	; 0x06
    2af6:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <mc_arc_nonblock>
    2afa:	80 93 2a 21 	sts	0x212A, r24
    2afe:	2d b7       	in	r18, 0x3d	; 61
    2b00:	3e b7       	in	r19, 0x3e	; 62
    2b02:	26 5f       	subi	r18, 0xF6	; 246
    2b04:	3f 4f       	sbci	r19, 0xFF	; 255
    2b06:	2d bf       	out	0x3d, r18	; 61
    2b08:	3e bf       	out	0x3e, r19	; 62
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_CONTINUE)) {
    2b0a:	80 91 2a 21 	lds	r24, 0x212A
    2b0e:	88 23       	and	r24, r24
    2b10:	11 f0       	breq	.+4      	; 0x2b16 <gc_execute_block+0x9c8>
    2b12:	82 30       	cpi	r24, 0x02	; 2
    2b14:	49 f4       	brne	.+18     	; 0x2b28 <gc_execute_block+0x9da>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2b16:	e3 e5       	ldi	r30, 0x53	; 83
    2b18:	f1 e2       	ldi	r31, 0x21	; 33
    2b1a:	df 01       	movw	r26, r30
    2b1c:	1c 96       	adiw	r26, 0x0c	; 12
    2b1e:	9c e0       	ldi	r25, 0x0C	; 12
    2b20:	0d 90       	ld	r0, X+
    2b22:	01 92       	st	Z+, r0
    2b24:	91 50       	subi	r25, 0x01	; 1
    2b26:	e1 f7       	brne	.-8      	; 0x2b20 <gc_execute_block+0x9d2>
	};
	return(gc.status);
}
    2b28:	68 96       	adiw	r28, 0x18	; 24
    2b2a:	cd bf       	out	0x3d, r28	; 61
    2b2c:	de bf       	out	0x3e, r29	; 62
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	1f 91       	pop	r17
    2b34:	0f 91       	pop	r16
    2b36:	ff 90       	pop	r15
    2b38:	ef 90       	pop	r14
    2b3a:	df 90       	pop	r13
    2b3c:	cf 90       	pop	r12
    2b3e:	bf 90       	pop	r11
    2b40:	af 90       	pop	r10
    2b42:	9f 90       	pop	r9
    2b44:	8f 90       	pop	r8
    2b46:	7f 90       	pop	r7
    2b48:	6f 90       	pop	r6
    2b4a:	5f 90       	pop	r5
    2b4c:	4f 90       	pop	r4
    2b4e:	3f 90       	pop	r3
    2b50:	2f 90       	pop	r2
    2b52:	08 95       	ret

00002b54 <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2b54:	cf 93       	push	r28
    2b56:	df 93       	push	r29
    2b58:	ec 01       	movw	r28, r24
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	10 c0       	rjmp	.+32     	; 0x2b80 <gc_gcode_parser+0x2c>
	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
		if (c <= ' ' ) {					// throw away WS & ctrl chars
    2b60:	e1 32       	cpi	r30, 0x21	; 33
    2b62:	70 f0       	brcs	.+28     	; 0x2b80 <gc_gcode_parser+0x2c>
			continue;
		} else if (c >= 'a' && c <= 'z') {	// convert lower to upper
    2b64:	8e 2f       	mov	r24, r30
    2b66:	81 56       	subi	r24, 0x61	; 97
    2b68:	a9 2f       	mov	r26, r25
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	9f 5f       	subi	r25, 0xFF	; 255
    2b6e:	8a 31       	cpi	r24, 0x1A	; 26
    2b70:	20 f4       	brcc	.+8      	; 0x2b7a <gc_gcode_parser+0x26>
			block[j++] = c-'a'+'A';
    2b72:	ac 0f       	add	r26, r28
    2b74:	bd 1f       	adc	r27, r29
    2b76:	e0 52       	subi	r30, 0x20	; 32
    2b78:	02 c0       	rjmp	.+4      	; 0x2b7e <gc_gcode_parser+0x2a>
		} else {
			block[j++] = c;
    2b7a:	ac 0f       	add	r26, r28
    2b7c:	bd 1f       	adc	r27, r29
    2b7e:	ec 93       	st	X, r30

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
    2b80:	fe 01       	movw	r30, r28
    2b82:	e2 0f       	add	r30, r18
    2b84:	f1 1d       	adc	r31, r1
    2b86:	e0 81       	ld	r30, Z
    2b88:	2f 5f       	subi	r18, 0xFF	; 255
    2b8a:	ee 23       	and	r30, r30
    2b8c:	49 f7       	brne	.-46     	; 0x2b60 <gc_gcode_parser+0xc>
			block[j++] = c-'a'+'A';
		} else {
			block[j++] = c;
		}
	}
	block[j] = 0;
    2b8e:	fe 01       	movw	r30, r28
    2b90:	e9 0f       	add	r30, r25
    2b92:	f1 1d       	adc	r31, r1
    2b94:	10 82       	st	Z, r1
{
	_gc_normalize_gcode_block(block);
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    2b96:	88 81       	ld	r24, Y
    2b98:	88 32       	cpi	r24, 0x28	; 40
    2b9a:	61 f0       	breq	.+24     	; 0x2bb4 <gc_gcode_parser+0x60>
		return(TG_OK);
	}
	if (block[0] == 'Q') { 					// quit
    2b9c:	81 35       	cpi	r24, 0x51	; 81
    2b9e:	11 f4       	brne	.+4      	; 0x2ba4 <gc_gcode_parser+0x50>
    2ba0:	83 e0       	ldi	r24, 0x03	; 3
    2ba2:	09 c0       	rjmp	.+18     	; 0x2bb6 <gc_gcode_parser+0x62>
		return(TG_QUIT);
	} 
	if (block[0] == '/') { 					// ignore block delete
    2ba4:	8f 32       	cpi	r24, 0x2F	; 47
    2ba6:	31 f0       	breq	.+12     	; 0x2bb4 <gc_gcode_parser+0x60>
		return(TG_OK);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2ba8:	ce 01       	movw	r24, r28
    2baa:	0e 94 a7 10 	call	0x214e	; 0x214e <gc_execute_block>
    2bae:	80 93 2a 21 	sts	0x212A, r24
    2bb2:	01 c0       	rjmp	.+2      	; 0x2bb6 <gc_gcode_parser+0x62>
#ifdef __ECHO
	_gc_print_status(gc.status, block);
#endif
	return (gc.status);
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
}
    2bb6:	df 91       	pop	r29
    2bb8:	cf 91       	pop	r28
    2bba:	08 95       	ret

00002bbc <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2bbc:	cf 92       	push	r12
    2bbe:	df 92       	push	r13
    2bc0:	ef 92       	push	r14
    2bc2:	ff 92       	push	r15
    2bc4:	0f 93       	push	r16
    2bc6:	1f 93       	push	r17
    2bc8:	cf 93       	push	r28
    2bca:	df 93       	push	r29
    2bcc:	c9 e9       	ldi	r28, 0x99	; 153
    2bce:	d4 e2       	ldi	r29, 0x24	; 36
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (int i = X_AXIS; i <= A_AXIS; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2bd0:	68 81       	ld	r22, Y
    2bd2:	70 e0       	ldi	r23, 0x00	; 0
    2bd4:	88 27       	eor	r24, r24
    2bd6:	77 fd       	sbrc	r23, 7
    2bd8:	80 95       	com	r24
    2bda:	98 2f       	mov	r25, r24
    2bdc:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    2be0:	9b 01       	movw	r18, r22
    2be2:	ac 01       	movw	r20, r24
    2be4:	6f 81       	ldd	r22, Y+7	; 0x07
    2be6:	78 85       	ldd	r23, Y+8	; 0x08
    2be8:	89 85       	ldd	r24, Y+9	; 0x09
    2bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bec:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    2bf0:	9b 01       	movw	r18, r22
    2bf2:	ac 01       	movw	r20, r24
    2bf4:	60 e0       	ldi	r22, 0x00	; 0
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	84 eb       	ldi	r24, 0xB4	; 180
    2bfa:	93 e4       	ldi	r25, 0x43	; 67
    2bfc:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    2c00:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c02:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c04:	4d 85       	ldd	r20, Y+13	; 0x0d
    2c06:	5e 85       	ldd	r21, Y+14	; 0x0e
    2c08:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    2c0c:	6b 8b       	std	Y+19, r22	; 0x13
    2c0e:	7c 8b       	std	Y+20, r23	; 0x14
    2c10:	8d 8b       	std	Y+21, r24	; 0x15
    2c12:	9e 8b       	std	Y+22, r25	; 0x16
    2c14:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (int i = X_AXIS; i <= A_AXIS; i++) {
    2c16:	84 e2       	ldi	r24, 0x24	; 36
    2c18:	c9 3f       	cpi	r28, 0xF9	; 249
    2c1a:	d8 07       	cpc	r29, r24
    2c1c:	c9 f6       	brne	.-78     	; 0x2bd0 <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X_AXIS].feed_steps_sec * 
    2c1e:	00 91 99 24 	lds	r16, 0x2499
    2c22:	10 e0       	ldi	r17, 0x00	; 0
    2c24:	b8 01       	movw	r22, r16
    2c26:	88 27       	eor	r24, r24
    2c28:	77 fd       	sbrc	r23, 7
    2c2a:	80 95       	com	r24
    2c2c:	98 2f       	mov	r25, r24
    2c2e:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    2c32:	9b 01       	movw	r18, r22
    2c34:	ac 01       	movw	r20, r24
    2c36:	60 91 a0 24 	lds	r22, 0x24A0
    2c3a:	70 91 a1 24 	lds	r23, 0x24A1
    2c3e:	80 91 a2 24 	lds	r24, 0x24A2
    2c42:	90 91 a3 24 	lds	r25, 0x24A3
    2c46:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    2c4a:	9b 01       	movw	r18, r22
    2c4c:	ac 01       	movw	r20, r24
    2c4e:	60 e0       	ldi	r22, 0x00	; 0
    2c50:	70 e0       	ldi	r23, 0x00	; 0
    2c52:	84 eb       	ldi	r24, 0xB4	; 180
    2c54:	93 e4       	ldi	r25, 0x43	; 67
    2c56:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    2c5a:	6b 01       	movw	r12, r22
    2c5c:	7c 01       	movw	r14, r24
    2c5e:	80 91 9e 24 	lds	r24, 0x249E
    2c62:	90 91 9f 24 	lds	r25, 0x249F
    2c66:	08 9f       	mul	r16, r24
    2c68:	b0 01       	movw	r22, r0
    2c6a:	09 9f       	mul	r16, r25
    2c6c:	70 0d       	add	r23, r0
    2c6e:	18 9f       	mul	r17, r24
    2c70:	70 0d       	add	r23, r0
    2c72:	11 24       	eor	r1, r1
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	0e 94 4b 43 	call	0x8696	; 0x8696 <__floatunsisf>
    2c7c:	a7 01       	movw	r20, r14
    2c7e:	96 01       	movw	r18, r12
    2c80:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    2c84:	60 93 91 24 	sts	0x2491, r22
    2c88:	70 93 92 24 	sts	0x2492, r23
    2c8c:	80 93 93 24 	sts	0x2493, r24
    2c90:	90 93 94 24 	sts	0x2494, r25
							  cfg.a[X_AXIS].microstep) / 
							 (360/(cfg.a[X_AXIS].degree_per_step / 
							 	   cfg.a[X_AXIS].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X_AXIS].seek_steps_sec * 
    2c94:	80 91 9c 24 	lds	r24, 0x249C
    2c98:	90 91 9d 24 	lds	r25, 0x249D
    2c9c:	08 9f       	mul	r16, r24
    2c9e:	b0 01       	movw	r22, r0
    2ca0:	09 9f       	mul	r16, r25
    2ca2:	70 0d       	add	r23, r0
    2ca4:	18 9f       	mul	r17, r24
    2ca6:	70 0d       	add	r23, r0
    2ca8:	11 24       	eor	r1, r1
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	0e 94 4b 43 	call	0x8696	; 0x8696 <__floatunsisf>
    2cb2:	a7 01       	movw	r20, r14
    2cb4:	96 01       	movw	r18, r12
    2cb6:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    2cba:	60 93 95 24 	sts	0x2495, r22
    2cbe:	70 93 96 24 	sts	0x2496, r23
    2cc2:	80 93 97 24 	sts	0x2497, r24
    2cc6:	90 93 98 24 	sts	0x2498, r25
							  cfg.a[X_AXIS].microstep) / 
							 (360/(cfg.a[X_AXIS].degree_per_step / 
							 	   cfg.a[X_AXIS].microstep));
}
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	ff 90       	pop	r15
    2cd4:	ef 90       	pop	r14
    2cd6:	df 90       	pop	r13
    2cd8:	cf 90       	pop	r12
    2cda:	08 95       	ret

00002cdc <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = CONFIG_VERSION;
    2cdc:	eb e8       	ldi	r30, 0x8B	; 139
    2cde:	f4 e2       	ldi	r31, 0x24	; 36
    2ce0:	84 e6       	ldi	r24, 0x64	; 100
    2ce2:	80 93 8b 24 	sts	0x248B, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2ce6:	8a e0       	ldi	r24, 0x0A	; 10
    2ce8:	97 ed       	ldi	r25, 0xD7	; 215
    2cea:	a3 e2       	ldi	r26, 0x23	; 35
    2cec:	bc e3       	ldi	r27, 0x3C	; 60
    2cee:	80 93 8d 24 	sts	0x248D, r24
    2cf2:	90 93 8e 24 	sts	0x248E, r25
    2cf6:	a0 93 8f 24 	sts	0x248F, r26
    2cfa:	b0 93 90 24 	sts	0x2490, r27

	cfg.a[X_AXIS].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2cfe:	8c ed       	ldi	r24, 0xDC	; 220
    2d00:	95 e0       	ldi	r25, 0x05	; 5
    2d02:	80 93 9c 24 	sts	0x249C, r24
    2d06:	90 93 9d 24 	sts	0x249D, r25
	cfg.a[Y_AXIS].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2d0a:	80 93 b4 24 	sts	0x24B4, r24
    2d0e:	90 93 b5 24 	sts	0x24B5, r25
	cfg.a[Z_AXIS].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2d12:	80 93 cc 24 	sts	0x24CC, r24
    2d16:	90 93 cd 24 	sts	0x24CD, r25
	cfg.a[A_AXIS].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2d1a:	80 93 e4 24 	sts	0x24E4, r24
    2d1e:	90 93 e5 24 	sts	0x24E5, r25

	cfg.a[X_AXIS].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2d22:	80 93 9e 24 	sts	0x249E, r24
    2d26:	90 93 9f 24 	sts	0x249F, r25
	cfg.a[Y_AXIS].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2d2a:	80 93 b6 24 	sts	0x24B6, r24
    2d2e:	90 93 b7 24 	sts	0x24B7, r25
	cfg.a[Z_AXIS].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2d32:	80 93 ce 24 	sts	0x24CE, r24
    2d36:	90 93 cf 24 	sts	0x24CF, r25
	cfg.a[A_AXIS].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2d3a:	80 93 e6 24 	sts	0x24E6, r24
    2d3e:	90 93 e7 24 	sts	0x24E7, r25

	cfg.a[X_AXIS].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2d42:	86 e6       	ldi	r24, 0x66	; 102
    2d44:	96 e6       	ldi	r25, 0x66	; 102
    2d46:	a6 ee       	ldi	r26, 0xE6	; 230
    2d48:	bf e3       	ldi	r27, 0x3F	; 63
    2d4a:	80 93 a0 24 	sts	0x24A0, r24
    2d4e:	90 93 a1 24 	sts	0x24A1, r25
    2d52:	a0 93 a2 24 	sts	0x24A2, r26
    2d56:	b0 93 a3 24 	sts	0x24A3, r27
	cfg.a[Y_AXIS].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2d5a:	80 93 b8 24 	sts	0x24B8, r24
    2d5e:	90 93 b9 24 	sts	0x24B9, r25
    2d62:	a0 93 ba 24 	sts	0x24BA, r26
    2d66:	b0 93 bb 24 	sts	0x24BB, r27
	cfg.a[Z_AXIS].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2d6a:	80 93 d0 24 	sts	0x24D0, r24
    2d6e:	90 93 d1 24 	sts	0x24D1, r25
    2d72:	a0 93 d2 24 	sts	0x24D2, r26
    2d76:	b0 93 d3 24 	sts	0x24D3, r27
	cfg.a[A_AXIS].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2d7a:	80 93 e8 24 	sts	0x24E8, r24
    2d7e:	90 93 e9 24 	sts	0x24E9, r25
    2d82:	a0 93 ea 24 	sts	0x24EA, r26
    2d86:	b0 93 eb 24 	sts	0x24EB, r27

	cfg.a[X_AXIS].mm_per_rev = X_MM_PER_REVOLUTION;
    2d8a:	8c e5       	ldi	r24, 0x5C	; 92
    2d8c:	9f e8       	ldi	r25, 0x8F	; 143
    2d8e:	a2 ea       	ldi	r26, 0xA2	; 162
    2d90:	bf e3       	ldi	r27, 0x3F	; 63
    2d92:	80 93 a4 24 	sts	0x24A4, r24
    2d96:	90 93 a5 24 	sts	0x24A5, r25
    2d9a:	a0 93 a6 24 	sts	0x24A6, r26
    2d9e:	b0 93 a7 24 	sts	0x24A7, r27
	cfg.a[Y_AXIS].mm_per_rev = Y_MM_PER_REVOLUTION;
    2da2:	80 93 bc 24 	sts	0x24BC, r24
    2da6:	90 93 bd 24 	sts	0x24BD, r25
    2daa:	a0 93 be 24 	sts	0x24BE, r26
    2dae:	b0 93 bf 24 	sts	0x24BF, r27
	cfg.a[Z_AXIS].mm_per_rev = Z_MM_PER_REVOLUTION;
    2db2:	80 93 d4 24 	sts	0x24D4, r24
    2db6:	90 93 d5 24 	sts	0x24D5, r25
    2dba:	a0 93 d6 24 	sts	0x24D6, r26
    2dbe:	b0 93 d7 24 	sts	0x24D7, r27
	cfg.a[A_AXIS].mm_per_rev = A_MM_PER_REVOLUTION;
    2dc2:	80 93 ec 24 	sts	0x24EC, r24
    2dc6:	90 93 ed 24 	sts	0x24ED, r25
    2dca:	a0 93 ee 24 	sts	0x24EE, r26
    2dce:	b0 93 ef 24 	sts	0x24EF, r27
	
	cfg.a[X_AXIS].mm_travel = X_MM_TRAVEL;
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	a8 ec       	ldi	r26, 0xC8	; 200
    2dd8:	b3 e4       	ldi	r27, 0x43	; 67
    2dda:	80 93 a8 24 	sts	0x24A8, r24
    2dde:	90 93 a9 24 	sts	0x24A9, r25
    2de2:	a0 93 aa 24 	sts	0x24AA, r26
    2de6:	b0 93 ab 24 	sts	0x24AB, r27
	cfg.a[Y_AXIS].mm_travel = Y_MM_TRAVEL;
    2dea:	80 93 c0 24 	sts	0x24C0, r24
    2dee:	90 93 c1 24 	sts	0x24C1, r25
    2df2:	a0 93 c2 24 	sts	0x24C2, r26
    2df6:	b0 93 c3 24 	sts	0x24C3, r27
	cfg.a[Z_AXIS].mm_travel = Z_MM_TRAVEL;
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	a6 e9       	ldi	r26, 0x96	; 150
    2e00:	b3 e4       	ldi	r27, 0x43	; 67
    2e02:	80 93 d8 24 	sts	0x24D8, r24
    2e06:	90 93 d9 24 	sts	0x24D9, r25
    2e0a:	a0 93 da 24 	sts	0x24DA, r26
    2e0e:	b0 93 db 24 	sts	0x24DB, r27
	cfg.a[A_AXIS].mm_travel = A_MM_TRAVEL;
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	a0 e8       	ldi	r26, 0x80	; 128
    2e18:	bf eb       	ldi	r27, 0xBF	; 191
    2e1a:	80 93 f0 24 	sts	0x24F0, r24
    2e1e:	90 93 f1 24 	sts	0x24F1, r25
    2e22:	a0 93 f2 24 	sts	0x24F2, r26
    2e26:	b0 93 f3 24 	sts	0x24F3, r27
	
	cfg.a[X_AXIS].microstep = X_MICROSTEPS;
    2e2a:	88 e0       	ldi	r24, 0x08	; 8
    2e2c:	80 93 99 24 	sts	0x2499, r24
	cfg.a[Y_AXIS].microstep = Y_MICROSTEPS;
    2e30:	80 93 b1 24 	sts	0x24B1, r24
	cfg.a[Z_AXIS].microstep = Z_MICROSTEPS;
    2e34:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A_AXIS].microstep = A_MICROSTEPS;
    2e36:	80 93 e1 24 	sts	0x24E1, r24

	cfg.a[X_AXIS].polarity = X_POLARITY;
    2e3a:	10 92 9b 24 	sts	0x249B, r1
	cfg.a[Y_AXIS].polarity = Y_POLARITY;
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	80 93 b3 24 	sts	0x24B3, r24
	cfg.a[Z_AXIS].polarity = Z_POLARITY;
    2e44:	10 92 cb 24 	sts	0x24CB, r1
	cfg.a[A_AXIS].polarity = A_POLARITY;
    2e48:	10 92 e3 24 	sts	0x24E3, r1

	cfg.a[X_AXIS].limit_enable = X_LIMIT_ENABLE;
    2e4c:	80 93 b0 24 	sts	0x24B0, r24
	cfg.a[Y_AXIS].limit_enable = Y_LIMIT_ENABLE;
    2e50:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z_AXIS].limit_enable = Z_LIMIT_ENABLE;
    2e52:	80 93 e0 24 	sts	0x24E0, r24
	cfg.a[A_AXIS].limit_enable = A_LIMIT_ENABLE;
    2e56:	10 92 f8 24 	sts	0x24F8, r1

	cfg.a[X_AXIS].low_pwr_idle = X_LOW_POWER_IDLE;
    2e5a:	80 93 9a 24 	sts	0x249A, r24
	cfg.a[Y_AXIS].low_pwr_idle = Y_LOW_POWER_IDLE;
    2e5e:	80 93 b2 24 	sts	0x24B2, r24
	cfg.a[Z_AXIS].low_pwr_idle = Z_LOW_POWER_IDLE;
    2e62:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A_AXIS].low_pwr_idle = A_LOW_POWER_IDLE;
    2e64:	80 93 e2 24 	sts	0x24E2, r24

	_cfg_computed();		// generate computed values from the above
    2e68:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <_cfg_computed>
}
    2e6c:	08 95       	ret

00002e6e <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2e6e:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <cfg_reset>
}
    2e72:	08 95       	ret

00002e74 <_cfg_print_status>:
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    2e74:	87 30       	cpi	r24, 0x07	; 7
    2e76:	31 f1       	breq	.+76     	; 0x2ec4 <_cfg_print_status+0x50>
    2e78:	88 30       	cpi	r24, 0x08	; 8
    2e7a:	30 f4       	brcc	.+12     	; 0x2e88 <_cfg_print_status+0x14>
    2e7c:	82 30       	cpi	r24, 0x02	; 2
    2e7e:	59 f0       	breq	.+22     	; 0x2e96 <_cfg_print_status+0x22>
    2e80:	83 30       	cpi	r24, 0x03	; 3
    2e82:	09 f0       	breq	.+2      	; 0x2e86 <_cfg_print_status+0x12>
    2e84:	45 c0       	rjmp	.+138    	; 0x2f10 <_cfg_print_status+0x9c>
    2e86:	0c c0       	rjmp	.+24     	; 0x2ea0 <_cfg_print_status+0x2c>
    2e88:	8d 30       	cpi	r24, 0x0D	; 13
    2e8a:	09 f1       	breq	.+66     	; 0x2ece <_cfg_print_status+0x5a>
    2e8c:	8f 30       	cpi	r24, 0x0F	; 15
    2e8e:	81 f1       	breq	.+96     	; 0x2ef0 <_cfg_print_status+0x7c>
    2e90:	8c 30       	cpi	r24, 0x0C	; 12
    2e92:	f1 f5       	brne	.+124    	; 0x2f10 <_cfg_print_status+0x9c>
    2e94:	12 c0       	rjmp	.+36     	; 0x2eba <_cfg_print_status+0x46>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_CONTINUE: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    2e96:	00 d0       	rcall	.+0      	; 0x2e98 <_cfg_print_status+0x24>
    2e98:	0f 92       	push	r0
    2e9a:	85 e1       	ldi	r24, 0x15	; 21
    2e9c:	94 e0       	ldi	r25, 0x04	; 4
    2e9e:	1b c0       	rjmp	.+54     	; 0x2ed6 <_cfg_print_status+0x62>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    2ea0:	0f 92       	push	r0
    2ea2:	0f 92       	push	r0
    2ea4:	8f ef       	ldi	r24, 0xFF	; 255
    2ea6:	93 e0       	ldi	r25, 0x03	; 3
    2ea8:	ed b7       	in	r30, 0x3d	; 61
    2eaa:	fe b7       	in	r31, 0x3e	; 62
    2eac:	81 83       	std	Z+1, r24	; 0x01
    2eae:	92 83       	std	Z+2, r25	; 0x02
    2eb0:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
    2eb4:	0f 90       	pop	r0
    2eb6:	0f 90       	pop	r0
    2eb8:	08 95       	ret
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2eba:	00 d0       	rcall	.+0      	; 0x2ebc <_cfg_print_status+0x48>
    2ebc:	0f 92       	push	r0
    2ebe:	88 ee       	ldi	r24, 0xE8	; 232
    2ec0:	93 e0       	ldi	r25, 0x03	; 3
    2ec2:	09 c0       	rjmp	.+18     	; 0x2ed6 <_cfg_print_status+0x62>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    2ec4:	00 d0       	rcall	.+0      	; 0x2ec6 <_cfg_print_status+0x52>
    2ec6:	0f 92       	push	r0
    2ec8:	8e ec       	ldi	r24, 0xCE	; 206
    2eca:	93 e0       	ldi	r25, 0x03	; 3
    2ecc:	04 c0       	rjmp	.+8      	; 0x2ed6 <_cfg_print_status+0x62>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2ece:	00 d0       	rcall	.+0      	; 0x2ed0 <_cfg_print_status+0x5c>
    2ed0:	0f 92       	push	r0
    2ed2:	84 eb       	ldi	r24, 0xB4	; 180
    2ed4:	93 e0       	ldi	r25, 0x03	; 3
    2ed6:	ed b7       	in	r30, 0x3d	; 61
    2ed8:	fe b7       	in	r31, 0x3e	; 62
    2eda:	81 83       	std	Z+1, r24	; 0x01
    2edc:	92 83       	std	Z+2, r25	; 0x02
    2ede:	63 83       	std	Z+3, r22	; 0x03
    2ee0:	74 83       	std	Z+4, r23	; 0x04
    2ee2:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	08 95       	ret
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    2ef0:	00 d0       	rcall	.+0      	; 0x2ef2 <_cfg_print_status+0x7e>
    2ef2:	0f 92       	push	r0
    2ef4:	89 e9       	ldi	r24, 0x99	; 153
    2ef6:	93 e0       	ldi	r25, 0x03	; 3
    2ef8:	ed b7       	in	r30, 0x3d	; 61
    2efa:	fe b7       	in	r31, 0x3e	; 62
    2efc:	81 83       	std	Z+1, r24	; 0x01
    2efe:	92 83       	std	Z+2, r25	; 0x02
    2f00:	63 83       	std	Z+3, r22	; 0x03
    2f02:	74 83       	std	Z+4, r23	; 0x04
    2f04:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
    2f08:	0f 90       	pop	r0
    2f0a:	0f 90       	pop	r0
    2f0c:	0f 90       	pop	r0
    2f0e:	0f 90       	pop	r0
    2f10:	08 95       	ret

00002f12 <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    2f12:	ef 92       	push	r14
    2f14:	ff 92       	push	r15
    2f16:	0f 93       	push	r16
    2f18:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    2f1a:	e8 2e       	mov	r14, r24
    2f1c:	ff 24       	eor	r15, r15
    2f1e:	87 01       	movw	r16, r14
    2f20:	00 0f       	add	r16, r16
    2f22:	11 1f       	adc	r17, r17
    2f24:	f8 01       	movw	r30, r16
    2f26:	ed 5b       	subi	r30, 0xBD	; 189
    2f28:	fd 4f       	sbci	r31, 0xFD	; 253
    2f2a:	25 91       	lpm	r18, Z+
    2f2c:	34 91       	lpm	r19, Z+
    2f2e:	00 d0       	rcall	.+0      	; 0x2f30 <_cfg_dump_axis+0x1e>
    2f30:	0f 92       	push	r0
    2f32:	88 e3       	ldi	r24, 0x38	; 56
    2f34:	96 e0       	ldi	r25, 0x06	; 6
    2f36:	ad b7       	in	r26, 0x3d	; 61
    2f38:	be b7       	in	r27, 0x3e	; 62
    2f3a:	11 96       	adiw	r26, 0x01	; 1
    2f3c:	8d 93       	st	X+, r24
    2f3e:	9c 93       	st	X, r25
    2f40:	12 97       	sbiw	r26, 0x02	; 2
    2f42:	13 96       	adiw	r26, 0x03	; 3
    2f44:	2d 93       	st	X+, r18
    2f46:	3c 93       	st	X, r19
    2f48:	14 97       	sbiw	r26, 0x04	; 4
    2f4a:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	96 e0       	ldi	r25, 0x06	; 6
    2f52:	ed b7       	in	r30, 0x3d	; 61
    2f54:	fe b7       	in	r31, 0x3e	; 62
    2f56:	81 83       	std	Z+1, r24	; 0x01
    2f58:	92 83       	std	Z+2, r25	; 0x02
    2f5a:	0e 0d       	add	r16, r14
    2f5c:	1f 1d       	adc	r17, r15
    2f5e:	83 e0       	ldi	r24, 0x03	; 3
    2f60:	00 0f       	add	r16, r16
    2f62:	11 1f       	adc	r17, r17
    2f64:	8a 95       	dec	r24
    2f66:	e1 f7       	brne	.-8      	; 0x2f60 <_cfg_dump_axis+0x4e>
    2f68:	05 57       	subi	r16, 0x75	; 117
    2f6a:	1b 4d       	sbci	r17, 0xDB	; 219
    2f6c:	d8 01       	movw	r26, r16
    2f6e:	51 96       	adiw	r26, 0x11	; 17
    2f70:	8d 91       	ld	r24, X+
    2f72:	9c 91       	ld	r25, X
    2f74:	52 97       	sbiw	r26, 0x12	; 18
    2f76:	83 83       	std	Z+3, r24	; 0x03
    2f78:	94 83       	std	Z+4, r25	; 0x04
    2f7a:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    2f7e:	88 ec       	ldi	r24, 0xC8	; 200
    2f80:	95 e0       	ldi	r25, 0x05	; 5
    2f82:	ed b7       	in	r30, 0x3d	; 61
    2f84:	fe b7       	in	r31, 0x3e	; 62
    2f86:	81 83       	std	Z+1, r24	; 0x01
    2f88:	92 83       	std	Z+2, r25	; 0x02
    2f8a:	d8 01       	movw	r26, r16
    2f8c:	53 96       	adiw	r26, 0x13	; 19
    2f8e:	8d 91       	ld	r24, X+
    2f90:	9c 91       	ld	r25, X
    2f92:	54 97       	sbiw	r26, 0x14	; 20
    2f94:	83 83       	std	Z+3, r24	; 0x03
    2f96:	94 83       	std	Z+4, r25	; 0x04
    2f98:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    2f9c:	ed b7       	in	r30, 0x3d	; 61
    2f9e:	fe b7       	in	r31, 0x3e	; 62
    2fa0:	31 96       	adiw	r30, 0x01	; 1
    2fa2:	85 e9       	ldi	r24, 0x95	; 149
    2fa4:	95 e0       	ldi	r25, 0x05	; 5
    2fa6:	ad b7       	in	r26, 0x3d	; 61
    2fa8:	be b7       	in	r27, 0x3e	; 62
    2faa:	11 96       	adiw	r26, 0x01	; 1
    2fac:	8d 93       	st	X+, r24
    2fae:	9c 93       	st	X, r25
    2fb0:	12 97       	sbiw	r26, 0x02	; 2
    2fb2:	d8 01       	movw	r26, r16
    2fb4:	1e 96       	adiw	r26, 0x0e	; 14
    2fb6:	8c 91       	ld	r24, X
    2fb8:	82 83       	std	Z+2, r24	; 0x02
    2fba:	13 82       	std	Z+3, r1	; 0x03
    2fbc:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    2fc0:	0f 92       	push	r0
    2fc2:	0f 92       	push	r0
    2fc4:	8e e5       	ldi	r24, 0x5E	; 94
    2fc6:	95 e0       	ldi	r25, 0x05	; 5
    2fc8:	ed b7       	in	r30, 0x3d	; 61
    2fca:	fe b7       	in	r31, 0x3e	; 62
    2fcc:	81 83       	std	Z+1, r24	; 0x01
    2fce:	92 83       	std	Z+2, r25	; 0x02
    2fd0:	f8 01       	movw	r30, r16
    2fd2:	85 89       	ldd	r24, Z+21	; 0x15
    2fd4:	96 89       	ldd	r25, Z+22	; 0x16
    2fd6:	a7 89       	ldd	r26, Z+23	; 0x17
    2fd8:	b0 8d       	ldd	r27, Z+24	; 0x18
    2fda:	ed b7       	in	r30, 0x3d	; 61
    2fdc:	fe b7       	in	r31, 0x3e	; 62
    2fde:	83 83       	std	Z+3, r24	; 0x03
    2fe0:	94 83       	std	Z+4, r25	; 0x04
    2fe2:	a5 83       	std	Z+5, r26	; 0x05
    2fe4:	b6 83       	std	Z+6, r27	; 0x06
    2fe6:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    2fea:	8b e2       	ldi	r24, 0x2B	; 43
    2fec:	95 e0       	ldi	r25, 0x05	; 5
    2fee:	ad b7       	in	r26, 0x3d	; 61
    2ff0:	be b7       	in	r27, 0x3e	; 62
    2ff2:	11 96       	adiw	r26, 0x01	; 1
    2ff4:	8d 93       	st	X+, r24
    2ff6:	9c 93       	st	X, r25
    2ff8:	12 97       	sbiw	r26, 0x02	; 2
    2ffa:	f8 01       	movw	r30, r16
    2ffc:	81 8d       	ldd	r24, Z+25	; 0x19
    2ffe:	92 8d       	ldd	r25, Z+26	; 0x1a
    3000:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3002:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3004:	ed b7       	in	r30, 0x3d	; 61
    3006:	fe b7       	in	r31, 0x3e	; 62
    3008:	83 83       	std	Z+3, r24	; 0x03
    300a:	94 83       	std	Z+4, r25	; 0x04
    300c:	a5 83       	std	Z+5, r26	; 0x05
    300e:	b6 83       	std	Z+6, r27	; 0x06
    3010:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    3014:	88 ef       	ldi	r24, 0xF8	; 248
    3016:	94 e0       	ldi	r25, 0x04	; 4
    3018:	ad b7       	in	r26, 0x3d	; 61
    301a:	be b7       	in	r27, 0x3e	; 62
    301c:	11 96       	adiw	r26, 0x01	; 1
    301e:	8d 93       	st	X+, r24
    3020:	9c 93       	st	X, r25
    3022:	12 97       	sbiw	r26, 0x02	; 2
    3024:	f8 01       	movw	r30, r16
    3026:	85 8d       	ldd	r24, Z+29	; 0x1d
    3028:	96 8d       	ldd	r25, Z+30	; 0x1e
    302a:	a7 8d       	ldd	r26, Z+31	; 0x1f
    302c:	b0 a1       	ldd	r27, Z+32	; 0x20
    302e:	ed b7       	in	r30, 0x3d	; 61
    3030:	fe b7       	in	r31, 0x3e	; 62
    3032:	83 83       	std	Z+3, r24	; 0x03
    3034:	94 83       	std	Z+4, r25	; 0x04
    3036:	a5 83       	std	Z+5, r26	; 0x05
    3038:	b6 83       	std	Z+6, r27	; 0x06
    303a:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	ed b7       	in	r30, 0x3d	; 61
    3044:	fe b7       	in	r31, 0x3e	; 62
    3046:	31 96       	adiw	r30, 0x01	; 1
    3048:	87 ec       	ldi	r24, 0xC7	; 199
    304a:	94 e0       	ldi	r25, 0x04	; 4
    304c:	ad b7       	in	r26, 0x3d	; 61
    304e:	be b7       	in	r27, 0x3e	; 62
    3050:	11 96       	adiw	r26, 0x01	; 1
    3052:	8d 93       	st	X+, r24
    3054:	9c 93       	st	X, r25
    3056:	12 97       	sbiw	r26, 0x02	; 2
    3058:	d8 01       	movw	r26, r16
    305a:	95 96       	adiw	r26, 0x25	; 37
    305c:	8c 91       	ld	r24, X
    305e:	82 83       	std	Z+2, r24	; 0x02
    3060:	13 82       	std	Z+3, r1	; 0x03
    3062:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    3066:	ed b7       	in	r30, 0x3d	; 61
    3068:	fe b7       	in	r31, 0x3e	; 62
    306a:	31 96       	adiw	r30, 0x01	; 1
    306c:	86 e9       	ldi	r24, 0x96	; 150
    306e:	94 e0       	ldi	r25, 0x04	; 4
    3070:	ad b7       	in	r26, 0x3d	; 61
    3072:	be b7       	in	r27, 0x3e	; 62
    3074:	11 96       	adiw	r26, 0x01	; 1
    3076:	8d 93       	st	X+, r24
    3078:	9c 93       	st	X, r25
    307a:	12 97       	sbiw	r26, 0x02	; 2
    307c:	d8 01       	movw	r26, r16
    307e:	1f 96       	adiw	r26, 0x0f	; 15
    3080:	8c 91       	ld	r24, X
    3082:	82 83       	std	Z+2, r24	; 0x02
    3084:	13 82       	std	Z+3, r1	; 0x03
    3086:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    308a:	ed b7       	in	r30, 0x3d	; 61
    308c:	fe b7       	in	r31, 0x3e	; 62
    308e:	31 96       	adiw	r30, 0x01	; 1
    3090:	86 e6       	ldi	r24, 0x66	; 102
    3092:	94 e0       	ldi	r25, 0x04	; 4
    3094:	ad b7       	in	r26, 0x3d	; 61
    3096:	be b7       	in	r27, 0x3e	; 62
    3098:	11 96       	adiw	r26, 0x01	; 1
    309a:	8d 93       	st	X+, r24
    309c:	9c 93       	st	X, r25
    309e:	12 97       	sbiw	r26, 0x02	; 2
    30a0:	d8 01       	movw	r26, r16
    30a2:	50 96       	adiw	r26, 0x10	; 16
    30a4:	8c 91       	ld	r24, X
    30a6:	82 83       	std	Z+2, r24	; 0x02
    30a8:	13 82       	std	Z+3, r1	; 0x03
    30aa:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    30ae:	0f 92       	push	r0
    30b0:	0f 92       	push	r0
    30b2:	82 e3       	ldi	r24, 0x32	; 50
    30b4:	94 e0       	ldi	r25, 0x04	; 4
    30b6:	ed b7       	in	r30, 0x3d	; 61
    30b8:	fe b7       	in	r31, 0x3e	; 62
    30ba:	81 83       	std	Z+1, r24	; 0x01
    30bc:	92 83       	std	Z+2, r25	; 0x02
    30be:	f8 01       	movw	r30, r16
    30c0:	81 a1       	ldd	r24, Z+33	; 0x21
    30c2:	92 a1       	ldd	r25, Z+34	; 0x22
    30c4:	a3 a1       	ldd	r26, Z+35	; 0x23
    30c6:	b4 a1       	ldd	r27, Z+36	; 0x24
    30c8:	ed b7       	in	r30, 0x3d	; 61
    30ca:	fe b7       	in	r31, 0x3e	; 62
    30cc:	83 83       	std	Z+3, r24	; 0x03
    30ce:	94 83       	std	Z+4, r25	; 0x04
    30d0:	a5 83       	std	Z+5, r26	; 0x05
    30d2:	b6 83       	std	Z+6, r27	; 0x06
    30d4:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
    30d8:	8d b7       	in	r24, 0x3d	; 61
    30da:	9e b7       	in	r25, 0x3e	; 62
    30dc:	06 96       	adiw	r24, 0x06	; 6
    30de:	8d bf       	out	0x3d, r24	; 61
    30e0:	9e bf       	out	0x3e, r25	; 62
}
    30e2:	1f 91       	pop	r17
    30e4:	0f 91       	pop	r16
    30e6:	ff 90       	pop	r15
    30e8:	ef 90       	pop	r14
    30ea:	08 95       	ret

000030ec <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    30ec:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    30ee:	00 d0       	rcall	.+0      	; 0x30f0 <cfg_dump+0x4>
    30f0:	0f 92       	push	r0
    30f2:	ed b7       	in	r30, 0x3d	; 61
    30f4:	fe b7       	in	r31, 0x3e	; 62
    30f6:	31 96       	adiw	r30, 0x01	; 1
    30f8:	8c ef       	ldi	r24, 0xFC	; 252
    30fa:	96 e0       	ldi	r25, 0x06	; 6
    30fc:	ad b7       	in	r26, 0x3d	; 61
    30fe:	be b7       	in	r27, 0x3e	; 62
    3100:	11 96       	adiw	r26, 0x01	; 1
    3102:	8d 93       	st	X+, r24
    3104:	9c 93       	st	X, r25
    3106:	12 97       	sbiw	r26, 0x02	; 2
    3108:	80 91 8b 24 	lds	r24, 0x248B
    310c:	82 83       	std	Z+2, r24	; 0x02
    310e:	13 82       	std	Z+3, r1	; 0x03
    3110:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	85 ed       	ldi	r24, 0xD5	; 213
    311a:	96 e0       	ldi	r25, 0x06	; 6
    311c:	ed b7       	in	r30, 0x3d	; 61
    311e:	fe b7       	in	r31, 0x3e	; 62
    3120:	81 83       	std	Z+1, r24	; 0x01
    3122:	92 83       	std	Z+2, r25	; 0x02
    3124:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    3128:	00 d0       	rcall	.+0      	; 0x312a <cfg_dump+0x3e>
    312a:	0f 92       	push	r0
    312c:	8b ea       	ldi	r24, 0xAB	; 171
    312e:	96 e0       	ldi	r25, 0x06	; 6
    3130:	ad b7       	in	r26, 0x3d	; 61
    3132:	be b7       	in	r27, 0x3e	; 62
    3134:	11 96       	adiw	r26, 0x01	; 1
    3136:	8d 93       	st	X+, r24
    3138:	9c 93       	st	X, r25
    313a:	12 97       	sbiw	r26, 0x02	; 2
    313c:	80 91 8d 24 	lds	r24, 0x248D
    3140:	90 91 8e 24 	lds	r25, 0x248E
    3144:	a0 91 8f 24 	lds	r26, 0x248F
    3148:	b0 91 90 24 	lds	r27, 0x2490
    314c:	ed b7       	in	r30, 0x3d	; 61
    314e:	fe b7       	in	r31, 0x3e	; 62
    3150:	83 83       	std	Z+3, r24	; 0x03
    3152:	94 83       	std	Z+4, r25	; 0x04
    3154:	a5 83       	std	Z+5, r26	; 0x05
    3156:	b6 83       	std	Z+6, r27	; 0x06
    3158:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    315c:	81 e8       	ldi	r24, 0x81	; 129
    315e:	96 e0       	ldi	r25, 0x06	; 6
    3160:	ad b7       	in	r26, 0x3d	; 61
    3162:	be b7       	in	r27, 0x3e	; 62
    3164:	11 96       	adiw	r26, 0x01	; 1
    3166:	8d 93       	st	X+, r24
    3168:	9c 93       	st	X, r25
    316a:	12 97       	sbiw	r26, 0x02	; 2
    316c:	80 91 95 24 	lds	r24, 0x2495
    3170:	90 91 96 24 	lds	r25, 0x2496
    3174:	a0 91 97 24 	lds	r26, 0x2497
    3178:	b0 91 98 24 	lds	r27, 0x2498
    317c:	ed b7       	in	r30, 0x3d	; 61
    317e:	fe b7       	in	r31, 0x3e	; 62
    3180:	83 83       	std	Z+3, r24	; 0x03
    3182:	94 83       	std	Z+4, r25	; 0x04
    3184:	a5 83       	std	Z+5, r26	; 0x05
    3186:	b6 83       	std	Z+6, r27	; 0x06
    3188:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    318c:	86 e5       	ldi	r24, 0x56	; 86
    318e:	96 e0       	ldi	r25, 0x06	; 6
    3190:	ad b7       	in	r26, 0x3d	; 61
    3192:	be b7       	in	r27, 0x3e	; 62
    3194:	11 96       	adiw	r26, 0x01	; 1
    3196:	8d 93       	st	X+, r24
    3198:	9c 93       	st	X, r25
    319a:	12 97       	sbiw	r26, 0x02	; 2
    319c:	80 91 91 24 	lds	r24, 0x2491
    31a0:	90 91 92 24 	lds	r25, 0x2492
    31a4:	a0 91 93 24 	lds	r26, 0x2493
    31a8:	b0 91 94 24 	lds	r27, 0x2494
    31ac:	ed b7       	in	r30, 0x3d	; 61
    31ae:	fe b7       	in	r31, 0x3e	; 62
    31b0:	83 83       	std	Z+3, r24	; 0x03
    31b2:	94 83       	std	Z+4, r25	; 0x04
    31b4:	a5 83       	std	Z+5, r26	; 0x05
    31b6:	b6 83       	std	Z+6, r27	; 0x06
    31b8:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
    31bc:	10 e0       	ldi	r17, 0x00	; 0
    31be:	8d b7       	in	r24, 0x3d	; 61
    31c0:	9e b7       	in	r25, 0x3e	; 62
    31c2:	06 96       	adiw	r24, 0x06	; 6
    31c4:	8d bf       	out	0x3d, r24	; 61
    31c6:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis = 0; axis <= A_AXIS; axis++) {
		_cfg_dump_axis(axis);
    31c8:	81 2f       	mov	r24, r17
    31ca:	0e 94 89 17 	call	0x2f12	; 0x2f12 <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis = 0; axis <= A_AXIS; axis++) {
    31ce:	1f 5f       	subi	r17, 0xFF	; 255
    31d0:	14 30       	cpi	r17, 0x04	; 4
    31d2:	d1 f7       	brne	.-12     	; 0x31c8 <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    31d4:	1f 91       	pop	r17
    31d6:	08 95       	ret

000031d8 <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	6b e8       	ldi	r22, 0x8B	; 139
    31de:	74 e2       	ldi	r23, 0x24	; 36
    31e0:	4e e6       	ldi	r20, 0x6E	; 110
    31e2:	50 e0       	ldi	r21, 0x00	; 0
    31e4:	0e 94 6d 2c 	call	0x58da	; 0x58da <memcpy_to_eeprom_with_checksum>
}
    31e8:	08 95       	ret

000031ea <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	0e 94 bf 2b 	call	0x577e	; 0x577e <eeprom_get_char>

	if (version != CONFIG_VERSION) {		// Read config-record and check checksum
    31f2:	84 36       	cpi	r24, 0x64	; 100
    31f4:	19 f0       	breq	.+6      	; 0x31fc <cfg_read+0x12>
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	0d c0       	rjmp	.+26     	; 0x3216 <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    31fc:	8b e8       	ldi	r24, 0x8B	; 139
    31fe:	94 e2       	ldi	r25, 0x24	; 36
    3200:	60 e0       	ldi	r22, 0x00	; 0
    3202:	70 e0       	ldi	r23, 0x00	; 0
    3204:	4e e6       	ldi	r20, 0x6E	; 110
    3206:	50 e0       	ldi	r21, 0x00	; 0
    3208:	0e 94 c9 2b 	call	0x5792	; 0x5792 <memcpy_from_eeprom_with_checksum>
    320c:	00 97       	sbiw	r24, 0x00	; 0
    320e:	11 f0       	breq	.+4      	; 0x3214 <cfg_read+0x2a>
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    3216:	c9 01       	movw	r24, r18
    3218:	08 95       	ret

0000321a <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    321a:	cf 92       	push	r12
    321c:	df 92       	push	r13
    321e:	ef 92       	push	r14
    3220:	ff 92       	push	r15
    3222:	1f 93       	push	r17
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	0f 92       	push	r0
    322a:	0f 92       	push	r0
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
    3230:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    3232:	19 82       	std	Y+1, r1	; 0x01
    3234:	1a 82       	std	Y+2, r1	; 0x02
    3236:	cc 24       	eor	r12, r12
    3238:	dd 24       	eor	r13, r13
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	2b c0       	rjmp	.+86     	; 0x3296 <cfg_parse+0x7c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
		if (c == '=') {							// handle separator
    3240:	9d 33       	cpi	r25, 0x3D	; 61
    3242:	49 f4       	brne	.+18     	; 0x3256 <cfg_parse+0x3c>
			text[j++] = 0;						// terminate tag at separator
    3244:	f7 01       	movw	r30, r14
    3246:	e2 0f       	add	r30, r18
    3248:	f1 1d       	adc	r31, r1
    324a:	10 82       	st	Z, r1
    324c:	2f 5f       	subi	r18, 0xFF	; 255
			val = &text[j];						// new string starts at value
    324e:	67 01       	movw	r12, r14
    3250:	c2 0e       	add	r12, r18
    3252:	d1 1c       	adc	r13, r1
    3254:	20 c0       	rjmp	.+64     	; 0x3296 <cfg_parse+0x7c>
		} else if ( (c == '-') || 				// pass special characters
    3256:	9d 32       	cpi	r25, 0x2D	; 45
    3258:	c9 f0       	breq	.+50     	; 0x328c <cfg_parse+0x72>
    325a:	9b 32       	cpi	r25, 0x2B	; 43
    325c:	b9 f0       	breq	.+46     	; 0x328c <cfg_parse+0x72>
    325e:	9e 32       	cpi	r25, 0x2E	; 46
    3260:	a9 f0       	breq	.+42     	; 0x328c <cfg_parse+0x72>
    3262:	9f 33       	cpi	r25, 0x3F	; 63
    3264:	99 f0       	breq	.+38     	; 0x328c <cfg_parse+0x72>
    3266:	98 32       	cpi	r25, 0x28	; 40
    3268:	89 f0       	breq	.+34     	; 0x328c <cfg_parse+0x72>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'a' && c <= 'z') {		// convert lower to upper
    326a:	89 2f       	mov	r24, r25
    326c:	81 56       	subi	r24, 0x61	; 97
    326e:	8a 31       	cpi	r24, 0x1A	; 26
    3270:	28 f4       	brcc	.+10     	; 0x327c <cfg_parse+0x62>
			text[j++] = c-'a'+'A';
    3272:	f7 01       	movw	r30, r14
    3274:	e2 0f       	add	r30, r18
    3276:	f1 1d       	adc	r31, r1
    3278:	90 52       	subi	r25, 0x20	; 32
    327a:	0b c0       	rjmp	.+22     	; 0x3292 <cfg_parse+0x78>
		} else if (c >= 'A' && c <= 'Z') {		// pass upper case letters
    327c:	89 2f       	mov	r24, r25
    327e:	81 54       	subi	r24, 0x41	; 65
    3280:	8a 31       	cpi	r24, 0x1A	; 26
    3282:	20 f0       	brcs	.+8      	; 0x328c <cfg_parse+0x72>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
    3284:	89 2f       	mov	r24, r25
    3286:	80 53       	subi	r24, 0x30	; 48
    3288:	8a 30       	cpi	r24, 0x0A	; 10
    328a:	28 f4       	brcc	.+10     	; 0x3296 <cfg_parse+0x7c>
			text[j++] = c;
    328c:	f7 01       	movw	r30, r14
    328e:	e2 0f       	add	r30, r18
    3290:	f1 1d       	adc	r31, r1
    3292:	90 83       	st	Z, r25
    3294:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
    3296:	f7 01       	movw	r30, r14
    3298:	e3 0f       	add	r30, r19
    329a:	f1 1d       	adc	r31, r1
    329c:	90 81       	ld	r25, Z
    329e:	3f 5f       	subi	r19, 0xFF	; 255
    32a0:	99 23       	and	r25, r25
    32a2:	71 f6       	brne	.-100    	; 0x3240 <cfg_parse+0x26>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// terminate line
    32a4:	f7 01       	movw	r30, r14
    32a6:	e2 0f       	add	r30, r18
    32a8:	f1 1d       	adc	r31, r1
    32aa:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    32ac:	2f 5f       	subi	r18, 0xFF	; 255
    32ae:	c7 01       	movw	r24, r14
    32b0:	82 0f       	add	r24, r18
    32b2:	91 1d       	adc	r25, r1
    32b4:	89 83       	std	Y+1, r24	; 0x01
    32b6:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    32b8:	10 92 8c 24 	sts	0x248C, r1
	switch (text[0]) {
    32bc:	f7 01       	movw	r30, r14
    32be:	80 81       	ld	r24, Z
    32c0:	81 35       	cpi	r24, 0x51	; 81
    32c2:	d1 f0       	breq	.+52     	; 0x32f8 <cfg_parse+0xde>
    32c4:	82 35       	cpi	r24, 0x52	; 82
    32c6:	60 f4       	brcc	.+24     	; 0x32e0 <cfg_parse+0xc6>
    32c8:	81 34       	cpi	r24, 0x41	; 65
    32ca:	59 f1       	breq	.+86     	; 0x3322 <cfg_parse+0x108>
    32cc:	82 34       	cpi	r24, 0x42	; 66
    32ce:	28 f4       	brcc	.+10     	; 0x32da <cfg_parse+0xc0>
    32d0:	88 32       	cpi	r24, 0x28	; 40
    32d2:	11 f1       	breq	.+68     	; 0x3318 <cfg_parse+0xfe>
    32d4:	8f 33       	cpi	r24, 0x3F	; 63
    32d6:	39 f5       	brne	.+78     	; 0x3326 <cfg_parse+0x10c>
    32d8:	0c c0       	rjmp	.+24     	; 0x32f2 <cfg_parse+0xd8>
    32da:	8d 34       	cpi	r24, 0x4D	; 77
    32dc:	21 f5       	brne	.+72     	; 0x3326 <cfg_parse+0x10c>
    32de:	0e c0       	rjmp	.+28     	; 0x32fc <cfg_parse+0xe2>
    32e0:	89 35       	cpi	r24, 0x59	; 89
    32e2:	29 f0       	breq	.+10     	; 0x32ee <cfg_parse+0xd4>
    32e4:	8a 35       	cpi	r24, 0x5A	; 90
    32e6:	d9 f0       	breq	.+54     	; 0x331e <cfg_parse+0x104>
    32e8:	88 35       	cpi	r24, 0x58	; 88
    32ea:	e9 f4       	brne	.+58     	; 0x3326 <cfg_parse+0x10c>
    32ec:	1f c0       	rjmp	.+62     	; 0x332c <cfg_parse+0x112>
    32ee:	11 e0       	ldi	r17, 0x01	; 1
    32f0:	1e c0       	rjmp	.+60     	; 0x332e <cfg_parse+0x114>
		case '?': cfg_dump(); status (TG_OK); break;
    32f2:	0e 94 76 18 	call	0x30ec	; 0x30ec <cfg_dump>
    32f6:	10 c0       	rjmp	.+32     	; 0x3318 <cfg_parse+0xfe>
		case '(': status (TG_OK);	break;			// ignore comment lines
		case 'Q': status (TG_QUIT); break;
    32f8:	83 e0       	ldi	r24, 0x03	; 3
    32fa:	16 c0       	rjmp	.+44     	; 0x3328 <cfg_parse+0x10e>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    32fc:	c6 01       	movw	r24, r12
    32fe:	be 01       	movw	r22, r28
    3300:	6f 5f       	subi	r22, 0xFF	; 255
    3302:	7f 4f       	sbci	r23, 0xFF	; 255
    3304:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <strtod>
    3308:	60 93 8d 24 	sts	0x248D, r22
    330c:	70 93 8e 24 	sts	0x248E, r23
    3310:	80 93 8f 24 	sts	0x248F, r24
    3314:	90 93 90 24 	sts	0x2490, r25
				  status(TG_OK); 
    3318:	10 92 8c 24 	sts	0x248C, r1
    331c:	07 c0       	rjmp	.+14     	; 0x332c <cfg_parse+0x112>
				  break;
    331e:	12 e0       	ldi	r17, 0x02	; 2
    3320:	06 c0       	rjmp	.+12     	; 0x332e <cfg_parse+0x114>

		case 'X': axis = X_AXIS; break;
		case 'Y': axis = Y_AXIS; break;
		case 'Z': axis = Z_AXIS; break;
    3322:	13 e0       	ldi	r17, 0x03	; 3
    3324:	04 c0       	rjmp	.+8      	; 0x332e <cfg_parse+0x114>
		case 'A': axis = A_AXIS; break;

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    3326:	87 e0       	ldi	r24, 0x07	; 7
    3328:	80 93 8c 24 	sts	0x248C, r24
    332c:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    332e:	80 91 8c 24 	lds	r24, 0x248C
    3332:	88 23       	and	r24, r24
    3334:	09 f0       	breq	.+2      	; 0x3338 <cfg_parse+0x11e>
    3336:	ee c0       	rjmp	.+476    	; 0x3514 <cfg_parse+0x2fa>
		status(TG_OK);							// pre-emptive setting
    3338:	10 92 8c 24 	sts	0x248C, r1
		switch (text[1]) {
    333c:	f7 01       	movw	r30, r14
    333e:	81 81       	ldd	r24, Z+1	; 0x01
    3340:	8c 34       	cpi	r24, 0x4C	; 76
    3342:	09 f4       	brne	.+2      	; 0x3346 <cfg_parse+0x12c>
    3344:	b8 c0       	rjmp	.+368    	; 0x34b6 <cfg_parse+0x29c>
    3346:	8d 34       	cpi	r24, 0x4D	; 77
    3348:	30 f4       	brcc	.+12     	; 0x3356 <cfg_parse+0x13c>
    334a:	84 34       	cpi	r24, 0x44	; 68
    334c:	a9 f1       	breq	.+106    	; 0x33b8 <cfg_parse+0x19e>
    334e:	86 34       	cpi	r24, 0x46	; 70
    3350:	09 f0       	breq	.+2      	; 0x3354 <cfg_parse+0x13a>
    3352:	dd c0       	rjmp	.+442    	; 0x350e <cfg_parse+0x2f4>
    3354:	1d c0       	rjmp	.+58     	; 0x3390 <cfg_parse+0x176>
    3356:	80 35       	cpi	r24, 0x50	; 80
    3358:	09 f4       	brne	.+2      	; 0x335c <cfg_parse+0x142>
    335a:	47 c0       	rjmp	.+142    	; 0x33ea <cfg_parse+0x1d0>
    335c:	83 35       	cpi	r24, 0x53	; 83
    335e:	21 f0       	breq	.+8      	; 0x3368 <cfg_parse+0x14e>
    3360:	8d 34       	cpi	r24, 0x4D	; 77
    3362:	09 f0       	breq	.+2      	; 0x3366 <cfg_parse+0x14c>
    3364:	d4 c0       	rjmp	.+424    	; 0x350e <cfg_parse+0x2f4>
    3366:	58 c0       	rjmp	.+176    	; 0x3418 <cfg_parse+0x1fe>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    3368:	c6 01       	movw	r24, r12
    336a:	0e 94 24 48 	call	0x9048	; 0x9048 <atoi>
    336e:	21 2f       	mov	r18, r17
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	f9 01       	movw	r30, r18
    3374:	ee 0f       	add	r30, r30
    3376:	ff 1f       	adc	r31, r31
    3378:	e2 0f       	add	r30, r18
    337a:	f3 1f       	adc	r31, r19
    337c:	53 e0       	ldi	r21, 0x03	; 3
    337e:	ee 0f       	add	r30, r30
    3380:	ff 1f       	adc	r31, r31
    3382:	5a 95       	dec	r21
    3384:	e1 f7       	brne	.-8      	; 0x337e <cfg_parse+0x164>
    3386:	e5 57       	subi	r30, 0x75	; 117
    3388:	fb 4d       	sbci	r31, 0xDB	; 219
    338a:	81 8b       	std	Z+17, r24	; 0x11
    338c:	92 8b       	std	Z+18, r25	; 0x12
    338e:	c2 c0       	rjmp	.+388    	; 0x3514 <cfg_parse+0x2fa>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    3390:	c6 01       	movw	r24, r12
    3392:	0e 94 24 48 	call	0x9048	; 0x9048 <atoi>
    3396:	21 2f       	mov	r18, r17
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	f9 01       	movw	r30, r18
    339c:	ee 0f       	add	r30, r30
    339e:	ff 1f       	adc	r31, r31
    33a0:	e2 0f       	add	r30, r18
    33a2:	f3 1f       	adc	r31, r19
    33a4:	23 e0       	ldi	r18, 0x03	; 3
    33a6:	ee 0f       	add	r30, r30
    33a8:	ff 1f       	adc	r31, r31
    33aa:	2a 95       	dec	r18
    33ac:	e1 f7       	brne	.-8      	; 0x33a6 <cfg_parse+0x18c>
    33ae:	e5 57       	subi	r30, 0x75	; 117
    33b0:	fb 4d       	sbci	r31, 0xDB	; 219
    33b2:	83 8b       	std	Z+19, r24	; 0x13
    33b4:	94 8b       	std	Z+20, r25	; 0x14
    33b6:	ae c0       	rjmp	.+348    	; 0x3514 <cfg_parse+0x2fa>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    33b8:	c6 01       	movw	r24, r12
    33ba:	be 01       	movw	r22, r28
    33bc:	6f 5f       	subi	r22, 0xFF	; 255
    33be:	7f 4f       	sbci	r23, 0xFF	; 255
    33c0:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <strtod>
    33c4:	21 2f       	mov	r18, r17
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	f9 01       	movw	r30, r18
    33ca:	ee 0f       	add	r30, r30
    33cc:	ff 1f       	adc	r31, r31
    33ce:	e2 0f       	add	r30, r18
    33d0:	f3 1f       	adc	r31, r19
    33d2:	b3 e0       	ldi	r27, 0x03	; 3
    33d4:	ee 0f       	add	r30, r30
    33d6:	ff 1f       	adc	r31, r31
    33d8:	ba 95       	dec	r27
    33da:	e1 f7       	brne	.-8      	; 0x33d4 <cfg_parse+0x1ba>
    33dc:	e5 57       	subi	r30, 0x75	; 117
    33de:	fb 4d       	sbci	r31, 0xDB	; 219
    33e0:	65 8b       	std	Z+21, r22	; 0x15
    33e2:	76 8b       	std	Z+22, r23	; 0x16
    33e4:	87 8b       	std	Z+23, r24	; 0x17
    33e6:	90 8f       	std	Z+24, r25	; 0x18
    33e8:	95 c0       	rjmp	.+298    	; 0x3514 <cfg_parse+0x2fa>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    33ea:	c6 01       	movw	r24, r12
    33ec:	0e 94 24 48 	call	0x9048	; 0x9048 <atoi>
    33f0:	68 2f       	mov	r22, r24
    33f2:	81 2f       	mov	r24, r17
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	fc 01       	movw	r30, r24
    33f8:	ee 0f       	add	r30, r30
    33fa:	ff 1f       	adc	r31, r31
    33fc:	e8 0f       	add	r30, r24
    33fe:	f9 1f       	adc	r31, r25
    3400:	73 e0       	ldi	r23, 0x03	; 3
    3402:	ee 0f       	add	r30, r30
    3404:	ff 1f       	adc	r31, r31
    3406:	7a 95       	dec	r23
    3408:	e1 f7       	brne	.-8      	; 0x3402 <cfg_parse+0x1e8>
    340a:	e5 57       	subi	r30, 0x75	; 117
    340c:	fb 4d       	sbci	r31, 0xDB	; 219
    340e:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    3410:	81 2f       	mov	r24, r17
    3412:	0e 94 0f 24 	call	0x481e	; 0x481e <st_set_polarity>
    3416:	7e c0       	rjmp	.+252    	; 0x3514 <cfg_parse+0x2fa>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    3418:	f7 01       	movw	r30, r14
    341a:	82 81       	ldd	r24, Z+2	; 0x02
    341c:	89 34       	cpi	r24, 0x49	; 73
    341e:	99 f4       	brne	.+38     	; 0x3446 <cfg_parse+0x22c>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    3420:	c6 01       	movw	r24, r12
    3422:	0e 94 24 48 	call	0x9048	; 0x9048 <atoi>
    3426:	21 2f       	mov	r18, r17
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	f9 01       	movw	r30, r18
    342c:	ee 0f       	add	r30, r30
    342e:	ff 1f       	adc	r31, r31
    3430:	e2 0f       	add	r30, r18
    3432:	f3 1f       	adc	r31, r19
    3434:	53 e0       	ldi	r21, 0x03	; 3
    3436:	ee 0f       	add	r30, r30
    3438:	ff 1f       	adc	r31, r31
    343a:	5a 95       	dec	r21
    343c:	e1 f7       	brne	.-8      	; 0x3436 <cfg_parse+0x21c>
    343e:	e5 57       	subi	r30, 0x75	; 117
    3440:	fb 4d       	sbci	r31, 0xDB	; 219
    3442:	86 87       	std	Z+14, r24	; 0x0e
    3444:	67 c0       	rjmp	.+206    	; 0x3514 <cfg_parse+0x2fa>
				} else if (text[3] == 'R') {
    3446:	f7 01       	movw	r30, r14
    3448:	83 81       	ldd	r24, Z+3	; 0x03
    344a:	82 35       	cpi	r24, 0x52	; 82
    344c:	c9 f4       	brne	.+50     	; 0x3480 <cfg_parse+0x266>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    344e:	c6 01       	movw	r24, r12
    3450:	be 01       	movw	r22, r28
    3452:	6f 5f       	subi	r22, 0xFF	; 255
    3454:	7f 4f       	sbci	r23, 0xFF	; 255
    3456:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <strtod>
    345a:	21 2f       	mov	r18, r17
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	f9 01       	movw	r30, r18
    3460:	ee 0f       	add	r30, r30
    3462:	ff 1f       	adc	r31, r31
    3464:	e2 0f       	add	r30, r18
    3466:	f3 1f       	adc	r31, r19
    3468:	13 e0       	ldi	r17, 0x03	; 3
    346a:	ee 0f       	add	r30, r30
    346c:	ff 1f       	adc	r31, r31
    346e:	1a 95       	dec	r17
    3470:	e1 f7       	brne	.-8      	; 0x346a <cfg_parse+0x250>
    3472:	e5 57       	subi	r30, 0x75	; 117
    3474:	fb 4d       	sbci	r31, 0xDB	; 219
    3476:	61 8f       	std	Z+25, r22	; 0x19
    3478:	72 8f       	std	Z+26, r23	; 0x1a
    347a:	83 8f       	std	Z+27, r24	; 0x1b
    347c:	94 8f       	std	Z+28, r25	; 0x1c
    347e:	4a c0       	rjmp	.+148    	; 0x3514 <cfg_parse+0x2fa>
				} else if (text[3] == 'T') {
    3480:	84 35       	cpi	r24, 0x54	; 84
    3482:	c9 f4       	brne	.+50     	; 0x34b6 <cfg_parse+0x29c>
					CFG(axis).mm_travel = strtod(val, &end); break;
    3484:	c6 01       	movw	r24, r12
    3486:	be 01       	movw	r22, r28
    3488:	6f 5f       	subi	r22, 0xFF	; 255
    348a:	7f 4f       	sbci	r23, 0xFF	; 255
    348c:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <strtod>
    3490:	21 2f       	mov	r18, r17
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	f9 01       	movw	r30, r18
    3496:	ee 0f       	add	r30, r30
    3498:	ff 1f       	adc	r31, r31
    349a:	e2 0f       	add	r30, r18
    349c:	f3 1f       	adc	r31, r19
    349e:	a3 e0       	ldi	r26, 0x03	; 3
    34a0:	ee 0f       	add	r30, r30
    34a2:	ff 1f       	adc	r31, r31
    34a4:	aa 95       	dec	r26
    34a6:	e1 f7       	brne	.-8      	; 0x34a0 <cfg_parse+0x286>
    34a8:	e5 57       	subi	r30, 0x75	; 117
    34aa:	fb 4d       	sbci	r31, 0xDB	; 219
    34ac:	65 8f       	std	Z+29, r22	; 0x1d
    34ae:	76 8f       	std	Z+30, r23	; 0x1e
    34b0:	87 8f       	std	Z+31, r24	; 0x1f
    34b2:	90 a3       	std	Z+32, r25	; 0x20
    34b4:	2f c0       	rjmp	.+94     	; 0x3514 <cfg_parse+0x2fa>
				}
			case 'L': 
				if (text[2] == 'O') {
    34b6:	f7 01       	movw	r30, r14
    34b8:	82 81       	ldd	r24, Z+2	; 0x02
    34ba:	8f 34       	cpi	r24, 0x4F	; 79
    34bc:	99 f4       	brne	.+38     	; 0x34e4 <cfg_parse+0x2ca>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    34be:	c6 01       	movw	r24, r12
    34c0:	0e 94 24 48 	call	0x9048	; 0x9048 <atoi>
    34c4:	21 2f       	mov	r18, r17
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	f9 01       	movw	r30, r18
    34ca:	ee 0f       	add	r30, r30
    34cc:	ff 1f       	adc	r31, r31
    34ce:	e2 0f       	add	r30, r18
    34d0:	f3 1f       	adc	r31, r19
    34d2:	53 e0       	ldi	r21, 0x03	; 3
    34d4:	ee 0f       	add	r30, r30
    34d6:	ff 1f       	adc	r31, r31
    34d8:	5a 95       	dec	r21
    34da:	e1 f7       	brne	.-8      	; 0x34d4 <cfg_parse+0x2ba>
    34dc:	e5 57       	subi	r30, 0x75	; 117
    34de:	fb 4d       	sbci	r31, 0xDB	; 219
    34e0:	87 87       	std	Z+15, r24	; 0x0f
    34e2:	18 c0       	rjmp	.+48     	; 0x3514 <cfg_parse+0x2fa>
				} else if (text[2] == 'I') {
    34e4:	89 34       	cpi	r24, 0x49	; 73
    34e6:	99 f4       	brne	.+38     	; 0x350e <cfg_parse+0x2f4>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    34e8:	c6 01       	movw	r24, r12
    34ea:	0e 94 24 48 	call	0x9048	; 0x9048 <atoi>
    34ee:	21 2f       	mov	r18, r17
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	f9 01       	movw	r30, r18
    34f4:	ee 0f       	add	r30, r30
    34f6:	ff 1f       	adc	r31, r31
    34f8:	e2 0f       	add	r30, r18
    34fa:	f3 1f       	adc	r31, r19
    34fc:	23 e0       	ldi	r18, 0x03	; 3
    34fe:	ee 0f       	add	r30, r30
    3500:	ff 1f       	adc	r31, r31
    3502:	2a 95       	dec	r18
    3504:	e1 f7       	brne	.-8      	; 0x34fe <cfg_parse+0x2e4>
    3506:	e5 57       	subi	r30, 0x75	; 117
    3508:	fb 4d       	sbci	r31, 0xDB	; 219
    350a:	85 a3       	std	Z+37, r24	; 0x25
    350c:	03 c0       	rjmp	.+6      	; 0x3514 <cfg_parse+0x2fa>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    350e:	87 e0       	ldi	r24, 0x07	; 7
    3510:	80 93 8c 24 	sts	0x248C, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    3514:	80 91 8c 24 	lds	r24, 0x248C
    3518:	b7 01       	movw	r22, r14
    351a:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
}
    351e:	80 91 8c 24 	lds	r24, 0x248C
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	0f 90       	pop	r0
    3526:	0f 90       	pop	r0
    3528:	cf 91       	pop	r28
    352a:	df 91       	pop	r29
    352c:	1f 91       	pop	r17
    352e:	ff 90       	pop	r15
    3530:	ef 90       	pop	r14
    3532:	df 90       	pop	r13
    3534:	cf 90       	pop	r12
    3536:	08 95       	ret

00003538 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3538:	ef 92       	push	r14
    353a:	ff 92       	push	r15
    353c:	0f 93       	push	r16
    353e:	1f 93       	push	r17
    3540:	df 93       	push	r29
    3542:	cf 93       	push	r28
    3544:	cd b7       	in	r28, 0x3d	; 61
    3546:	de b7       	in	r29, 0x3e	; 62
    3548:	a8 97       	sbiw	r28, 0x28	; 40
    354a:	cd bf       	out	0x3d, r28	; 61
    354c:	de bf       	out	0x3e, r29	; 62
    354e:	0b e4       	ldi	r16, 0x4B	; 75
    3550:	12 e0       	ldi	r17, 0x02	; 2
    3552:	a0 e0       	ldi	r26, 0x00	; 0
    3554:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    3556:	7e 01       	movw	r14, r28
    3558:	08 94       	sec
    355a:	e1 1c       	adc	r14, r1
    355c:	f1 1c       	adc	r15, r1
    355e:	02 c0       	rjmp	.+4      	; 0x3564 <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3560:	0f 5f       	subi	r16, 0xFF	; 255
    3562:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    3564:	f8 01       	movw	r30, r16
    3566:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    3568:	88 23       	and	r24, r24
    356a:	89 f4       	brne	.+34     	; 0x358e <cfg_test+0x56>
			text[j] = 0;
    356c:	ce 01       	movw	r24, r28
    356e:	01 96       	adiw	r24, 0x01	; 1
    3570:	a8 0f       	add	r26, r24
    3572:	b9 1f       	adc	r27, r25
    3574:	1c 92       	st	X, r1
			cfg_parse(text);
    3576:	0e 94 0d 19 	call	0x321a	; 0x321a <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    357a:	a8 96       	adiw	r28, 0x28	; 40
    357c:	cd bf       	out	0x3d, r28	; 61
    357e:	de bf       	out	0x3e, r29	; 62
    3580:	cf 91       	pop	r28
    3582:	df 91       	pop	r29
    3584:	1f 91       	pop	r17
    3586:	0f 91       	pop	r16
    3588:	ff 90       	pop	r15
    358a:	ef 90       	pop	r14
    358c:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    358e:	8d 30       	cpi	r24, 0x0D	; 13
    3590:	21 f0       	breq	.+8      	; 0x359a <cfg_test+0x62>
    3592:	8a 30       	cpi	r24, 0x0A	; 10
    3594:	11 f0       	breq	.+4      	; 0x359a <cfg_test+0x62>
    3596:	8b 33       	cpi	r24, 0x3B	; 59
    3598:	49 f4       	brne	.+18     	; 0x35ac <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    359a:	ae 0d       	add	r26, r14
    359c:	bf 1d       	adc	r27, r15
    359e:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    35a0:	c7 01       	movw	r24, r14
    35a2:	0e 94 0d 19 	call	0x321a	; 0x321a <cfg_parse>
    35a6:	a0 e0       	ldi	r26, 0x00	; 0
    35a8:	b0 e0       	ldi	r27, 0x00	; 0
    35aa:	da cf       	rjmp	.-76     	; 0x3560 <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    35ac:	81 32       	cpi	r24, 0x21	; 33
    35ae:	c0 f2       	brcs	.-80     	; 0x3560 <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    35b0:	f7 01       	movw	r30, r14
    35b2:	ea 0f       	add	r30, r26
    35b4:	fb 1f       	adc	r31, r27
    35b6:	80 83       	st	Z, r24
    35b8:	11 96       	adiw	r26, 0x01	; 1
    35ba:	d2 cf       	rjmp	.-92     	; 0x3560 <cfg_test+0x28>

000035bc <en_init>:

#include "encoder.h"

void en_init(void) {

}
    35bc:	08 95       	ret

000035be <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    35be:	0f 93       	push	r16
    35c0:	df 93       	push	r29
    35c2:	cf 93       	push	r28
    35c4:	0f 92       	push	r0
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
	OSC.XOSCCTRL = 0x4B;	// 2-9 MHz crystal; 0.4-16 MHz XTAL w/16K CLK Start Up
    35ca:	8b e4       	ldi	r24, 0x4B	; 75
    35cc:	e0 e5       	ldi	r30, 0x50	; 80
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    35d2:	88 e0       	ldi	r24, 0x08	; 8
    35d4:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    35d8:	80 91 51 00 	lds	r24, 0x0051
    35dc:	83 ff       	sbrs	r24, 3
    35de:	fc cf       	rjmp	.-8      	; 0x35d8 <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC4;		// XOSC is PLL Source; 4x Factor (32 MHz) 
    35e0:	84 ec       	ldi	r24, 0xC4	; 196
    35e2:	e0 e5       	ldi	r30, 0x50	; 80
    35e4:	f0 e0       	ldi	r31, 0x00	; 0
    35e6:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    35e8:	88 e1       	ldi	r24, 0x18	; 24
    35ea:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    35ee:	80 91 51 00 	lds	r24, 0x0051
    35f2:	84 ff       	sbrs	r24, 4
    35f4:	fc cf       	rjmp	.-8      	; 0x35ee <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    35f6:	8f b7       	in	r24, 0x3f	; 63
    35f8:	89 83       	std	Y+1, r24	; 0x01
    35fa:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    35fc:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    35fe:	24 e0       	ldi	r18, 0x04	; 4
    3600:	80 e4       	ldi	r24, 0x40	; 64
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	fc 01       	movw	r30, r24
    3606:	08 ed       	ldi	r16, 0xD8	; 216
    3608:	04 bf       	out	0x34, r16	; 52
    360a:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    360c:	89 81       	ldd	r24, Y+1	; 0x01
    360e:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC4;		// XOSC is PLL Source; 4x Factor (32 MHz) 
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    3610:	80 91 50 00 	lds	r24, 0x0050
    3614:	8e 7f       	andi	r24, 0xFE	; 254
    3616:	80 93 50 00 	sts	0x0050, r24
}
    361a:	0f 90       	pop	r0
    361c:	cf 91       	pop	r28
    361e:	df 91       	pop	r29
    3620:	0f 91       	pop	r16
    3622:	08 95       	ret

00003624 <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    3624:	0e 94 df 1a 	call	0x35be	; 0x35be <xmega_init_clocks>
}
    3628:	08 95       	ret

0000362a <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    362a:	0f 93       	push	r16
    362c:	df 93       	push	r29
    362e:	cf 93       	push	r28
    3630:	0f 92       	push	r0
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3636:	2f b7       	in	r18, 0x3f	; 63
    3638:	29 83       	std	Y+1, r18	; 0x01
    363a:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    363c:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    363e:	fc 01       	movw	r30, r24
    3640:	08 ed       	ldi	r16, 0xD8	; 216
    3642:	04 bf       	out	0x34, r16	; 52
    3644:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3646:	89 81       	ldd	r24, Y+1	; 0x01
    3648:	8f bf       	out	0x3f, r24	; 63
#endif
}
    364a:	0f 90       	pop	r0
    364c:	cf 91       	pop	r28
    364e:	df 91       	pop	r29
    3650:	0f 91       	pop	r16
    3652:	08 95       	ret

00003654 <mc_motion_stop>:
 * mc_motion_stop() - stop all current motions
 */

void mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    3654:	10 92 80 21 	sts	0x2180, r1
	ma.arc_state = MC_STATE_OFF;
    3658:	10 92 fb 24 	sts	0x24FB, r1
}
    365c:	08 95       	ret

0000365e <mc_dwell>:
/* 
 * mc_dwell() 
 */

void mc_dwell(uint32_t milliseconds) 
{
    365e:	af 92       	push	r10
    3660:	bf 92       	push	r11
    3662:	cf 92       	push	r12
    3664:	df 92       	push	r13
    3666:	ef 92       	push	r14
    3668:	ff 92       	push	r15
    366a:	0f 93       	push	r16
    366c:	1f 93       	push	r17
//	mv_synchronize();
	_delay_ms(milliseconds);
    366e:	0e 94 4b 43 	call	0x8696	; 0x8696 <__floatunsisf>
    3672:	5b 01       	movw	r10, r22
    3674:	6c 01       	movw	r12, r24
   delays up to 6.5535 seconds (independent from CPU frequency).  The
   user will not be informed about decreased resolution.
 */
void
_delay_ms(double __ms)
{
    3676:	20 e0       	ldi	r18, 0x00	; 0
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	4a ef       	ldi	r20, 0xFA	; 250
    367c:	55 e4       	ldi	r21, 0x45	; 69
    367e:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    3682:	7b 01       	movw	r14, r22
    3684:	8c 01       	movw	r16, r24
	uint16_t __ticks;
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	40 e8       	ldi	r20, 0x80	; 128
    368c:	5f e3       	ldi	r21, 0x3F	; 63
    368e:	0e 94 ab 42 	call	0x8556	; 0x8556 <__cmpsf2>
    3692:	88 23       	and	r24, r24
    3694:	1c f4       	brge	.+6      	; 0x369c <mc_dwell+0x3e>
    3696:	61 e0       	ldi	r22, 0x01	; 1
    3698:	70 e0       	ldi	r23, 0x00	; 0
    369a:	24 c0       	rjmp	.+72     	; 0x36e4 <mc_dwell+0x86>
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    369c:	c8 01       	movw	r24, r16
    369e:	b7 01       	movw	r22, r14
    36a0:	20 e0       	ldi	r18, 0x00	; 0
    36a2:	3f ef       	ldi	r19, 0xFF	; 255
    36a4:	4f e7       	ldi	r20, 0x7F	; 127
    36a6:	57 e4       	ldi	r21, 0x47	; 71
    36a8:	0e 94 9b 44 	call	0x8936	; 0x8936 <__gesf2>
    36ac:	18 16       	cp	r1, r24
    36ae:	b4 f4       	brge	.+44     	; 0x36dc <mc_dwell+0x7e>
		__ticks = 1;
	else if (__tmp > 65535)
	{
    36b0:	c6 01       	movw	r24, r12
    36b2:	b5 01       	movw	r22, r10
    36b4:	20 e0       	ldi	r18, 0x00	; 0
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	40 e2       	ldi	r20, 0x20	; 32
    36ba:	51 e4       	ldi	r21, 0x41	; 65
    36bc:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    36c0:	0e 94 1f 43 	call	0x863e	; 0x863e <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    36c4:	80 e2       	ldi	r24, 0x20	; 32
    36c6:	93 e0       	ldi	r25, 0x03	; 3
    36c8:	05 c0       	rjmp	.+10     	; 0x36d4 <mc_dwell+0x76>
    36ca:	fc 01       	movw	r30, r24
    36cc:	31 97       	sbiw	r30, 0x01	; 1
    36ce:	f1 f7       	brne	.-4      	; 0x36cc <mc_dwell+0x6e>
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
    36d0:	61 50       	subi	r22, 0x01	; 1
    36d2:	70 40       	sbci	r23, 0x00	; 0
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
    36d4:	61 15       	cp	r22, r1
    36d6:	71 05       	cpc	r23, r1
    36d8:	c1 f7       	brne	.-16     	; 0x36ca <mc_dwell+0x6c>
    36da:	07 c0       	rjmp	.+14     	; 0x36ea <mc_dwell+0x8c>
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
	}
    36dc:	c8 01       	movw	r24, r16
    36de:	b7 01       	movw	r22, r14
    36e0:	0e 94 1f 43 	call	0x863e	; 0x863e <__fixunssfsi>
    36e4:	cb 01       	movw	r24, r22
    36e6:	01 97       	sbiw	r24, 0x01	; 1
    36e8:	f1 f7       	brne	.-4      	; 0x36e6 <mc_dwell+0x88>
}
    36ea:	1f 91       	pop	r17
    36ec:	0f 91       	pop	r16
    36ee:	ff 90       	pop	r15
    36f0:	ef 90       	pop	r14
    36f2:	df 90       	pop	r13
    36f4:	cf 90       	pop	r12
    36f6:	bf 90       	pop	r11
    36f8:	af 90       	pop	r10
    36fa:	08 95       	ret

000036fc <mc_go_home>:
 */

void mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    36fc:	8c e0       	ldi	r24, 0x0C	; 12
    36fe:	e1 e8       	ldi	r30, 0x81	; 129
    3700:	f1 e2       	ldi	r31, 0x21	; 33
    3702:	df 01       	movw	r26, r30
    3704:	1d 92       	st	X+, r1
    3706:	8a 95       	dec	r24
    3708:	e9 f7       	brne	.-6      	; 0x3704 <mc_go_home+0x8>
}
    370a:	08 95       	ret

0000370c <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    370c:	8c e0       	ldi	r24, 0x0C	; 12
    370e:	e1 e8       	ldi	r30, 0x81	; 129
    3710:	f1 e2       	ldi	r31, 0x21	; 33
    3712:	df 01       	movw	r26, r30
    3714:	1d 92       	st	X+, r1
    3716:	8a 95       	dec	r24
    3718:	e9 f7       	brne	.-6      	; 0x3714 <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    371a:	10 92 80 21 	sts	0x2180, r1
	ma.arc_state = MC_STATE_OFF;
    371e:	10 92 fb 24 	sts	0x24FB, r1
}
    3722:	08 95       	ret

00003724 <mc_line_continuation>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continuation() 
{
    3724:	af 92       	push	r10
    3726:	bf 92       	push	r11
    3728:	cf 92       	push	r12
    372a:	df 92       	push	r13
    372c:	ef 92       	push	r14
    372e:	ff 92       	push	r15
    3730:	0f 93       	push	r16
    3732:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    3734:	80 91 80 21 	lds	r24, 0x2180
    3738:	88 23       	and	r24, r24
    373a:	19 f4       	brne	.+6      	; 0x3742 <mc_line_continuation+0x1e>
    373c:	21 e0       	ldi	r18, 0x01	; 1
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	30 c0       	rjmp	.+96     	; 0x37a2 <mc_line_continuation+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    3742:	82 e0       	ldi	r24, 0x02	; 2
    3744:	80 93 80 21 	sts	0x2180, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    3748:	0e 94 28 31 	call	0x6250	; 0x6250 <mv_test_move_buffer_full>
    374c:	88 23       	and	r24, r24
    374e:	19 f0       	breq	.+6      	; 0x3756 <mc_line_continuation+0x32>
    3750:	22 e0       	ldi	r18, 0x02	; 2
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	26 c0       	rjmp	.+76     	; 0x37a2 <mc_line_continuation+0x7e>
		return (TG_CONTINUE);
	}
	mv_queue_move_buffer(mc.steps[X_AXIS], mc.steps[Y_AXIS], mc.steps[Z_AXIS], mc.microseconds); 
    3756:	60 91 99 21 	lds	r22, 0x2199
    375a:	70 91 9a 21 	lds	r23, 0x219A
    375e:	80 91 9b 21 	lds	r24, 0x219B
    3762:	90 91 9c 21 	lds	r25, 0x219C
    3766:	20 91 9d 21 	lds	r18, 0x219D
    376a:	30 91 9e 21 	lds	r19, 0x219E
    376e:	40 91 9f 21 	lds	r20, 0x219F
    3772:	50 91 a0 21 	lds	r21, 0x21A0
    3776:	e0 90 a1 21 	lds	r14, 0x21A1
    377a:	f0 90 a2 21 	lds	r15, 0x21A2
    377e:	00 91 a3 21 	lds	r16, 0x21A3
    3782:	10 91 a4 21 	lds	r17, 0x21A4
    3786:	a0 90 a5 21 	lds	r10, 0x21A5
    378a:	b0 90 a6 21 	lds	r11, 0x21A6
    378e:	c0 90 a7 21 	lds	r12, 0x21A7
    3792:	d0 90 a8 21 	lds	r13, 0x21A8
    3796:	0e 94 54 31 	call	0x62a8	; 0x62a8 <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    379a:	10 92 80 21 	sts	0x2180, r1
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    37a2:	c9 01       	movw	r24, r18
    37a4:	1f 91       	pop	r17
    37a6:	0f 91       	pop	r16
    37a8:	ff 90       	pop	r15
    37aa:	ef 90       	pop	r14
    37ac:	df 90       	pop	r13
    37ae:	cf 90       	pop	r12
    37b0:	bf 90       	pop	r11
    37b2:	af 90       	pop	r10
    37b4:	08 95       	ret

000037b6 <mc_line_nonblock>:
/* 
 * mc_line_nonblock() - mc_line with non-blocking behavior
 */

int mc_line_nonblock(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    37b6:	2f 92       	push	r2
    37b8:	3f 92       	push	r3
    37ba:	4f 92       	push	r4
    37bc:	5f 92       	push	r5
    37be:	6f 92       	push	r6
    37c0:	7f 92       	push	r7
    37c2:	8f 92       	push	r8
    37c4:	9f 92       	push	r9
    37c6:	af 92       	push	r10
    37c8:	bf 92       	push	r11
    37ca:	cf 92       	push	r12
    37cc:	df 92       	push	r13
    37ce:	ef 92       	push	r14
    37d0:	ff 92       	push	r15
    37d2:	0f 93       	push	r16
    37d4:	1f 93       	push	r17
    37d6:	df 93       	push	r29
    37d8:	cf 93       	push	r28
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62
    37de:	64 97       	sbiw	r28, 0x14	; 20
    37e0:	cd bf       	out	0x3d, r28	; 61
    37e2:	de bf       	out	0x3e, r29	; 62
    37e4:	2d 87       	std	Y+13, r18	; 0x0d
    37e6:	3e 87       	std	Y+14, r19	; 0x0e
    37e8:	4f 87       	std	Y+15, r20	; 0x0f
    37ea:	58 8b       	std	Y+16, r21	; 0x10
    37ec:	a9 8a       	std	Y+17, r10	; 0x11
    37ee:	ba 8a       	std	Y+18, r11	; 0x12
    37f0:	cb 8a       	std	Y+19, r12	; 0x13
    37f2:	dc 8a       	std	Y+20, r13	; 0x14
	mc.target[X_AXIS] = lround(x*CFG(X_AXIS).steps_per_mm);
    37f4:	20 91 ac 24 	lds	r18, 0x24AC
    37f8:	30 91 ad 24 	lds	r19, 0x24AD
    37fc:	40 91 ae 24 	lds	r20, 0x24AE
    3800:	50 91 af 24 	lds	r21, 0x24AF
    3804:	29 87       	std	Y+9, r18	; 0x09
    3806:	3a 87       	std	Y+10, r19	; 0x0a
    3808:	4b 87       	std	Y+11, r20	; 0x0b
    380a:	5c 87       	std	Y+12, r21	; 0x0c
    380c:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    3810:	0e 94 3d 45 	call	0x8a7a	; 0x8a7a <lround>
    3814:	2b 01       	movw	r4, r22
    3816:	3c 01       	movw	r6, r24
    3818:	40 92 8d 21 	sts	0x218D, r4
    381c:	50 92 8e 21 	sts	0x218E, r5
    3820:	60 92 8f 21 	sts	0x218F, r6
    3824:	70 92 90 21 	sts	0x2190, r7
	mc.target[Y_AXIS] = lround(y*CFG(Y_AXIS).steps_per_mm);
    3828:	80 91 c4 24 	lds	r24, 0x24C4
    382c:	90 91 c5 24 	lds	r25, 0x24C5
    3830:	a0 91 c6 24 	lds	r26, 0x24C6
    3834:	b0 91 c7 24 	lds	r27, 0x24C7
    3838:	8d 83       	std	Y+5, r24	; 0x05
    383a:	9e 83       	std	Y+6, r25	; 0x06
    383c:	af 83       	std	Y+7, r26	; 0x07
    383e:	b8 87       	std	Y+8, r27	; 0x08
    3840:	6d 85       	ldd	r22, Y+13	; 0x0d
    3842:	7e 85       	ldd	r23, Y+14	; 0x0e
    3844:	8f 85       	ldd	r24, Y+15	; 0x0f
    3846:	98 89       	ldd	r25, Y+16	; 0x10
    3848:	2d 81       	ldd	r18, Y+5	; 0x05
    384a:	3e 81       	ldd	r19, Y+6	; 0x06
    384c:	4f 81       	ldd	r20, Y+7	; 0x07
    384e:	58 85       	ldd	r21, Y+8	; 0x08
    3850:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    3854:	0e 94 3d 45 	call	0x8a7a	; 0x8a7a <lround>
    3858:	5b 01       	movw	r10, r22
    385a:	6c 01       	movw	r12, r24
    385c:	a0 92 91 21 	sts	0x2191, r10
    3860:	b0 92 92 21 	sts	0x2192, r11
    3864:	c0 92 93 21 	sts	0x2193, r12
    3868:	d0 92 94 21 	sts	0x2194, r13
	mc.target[Z_AXIS] = lround(z*CFG(Z_AXIS).steps_per_mm); 
    386c:	20 91 dc 24 	lds	r18, 0x24DC
    3870:	30 91 dd 24 	lds	r19, 0x24DD
    3874:	40 91 de 24 	lds	r20, 0x24DE
    3878:	50 91 df 24 	lds	r21, 0x24DF
    387c:	29 83       	std	Y+1, r18	; 0x01
    387e:	3a 83       	std	Y+2, r19	; 0x02
    3880:	4b 83       	std	Y+3, r20	; 0x03
    3882:	5c 83       	std	Y+4, r21	; 0x04
    3884:	c8 01       	movw	r24, r16
    3886:	b7 01       	movw	r22, r14
    3888:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    388c:	0e 94 3d 45 	call	0x8a7a	; 0x8a7a <lround>
    3890:	9b 01       	movw	r18, r22
    3892:	ac 01       	movw	r20, r24
    3894:	20 93 95 21 	sts	0x2195, r18
    3898:	30 93 96 21 	sts	0x2196, r19
    389c:	40 93 97 21 	sts	0x2197, r20
    38a0:	50 93 98 21 	sts	0x2198, r21

	mc.steps[X_AXIS] = mc.target[X_AXIS]-mc.position[X_AXIS];
    38a4:	80 91 81 21 	lds	r24, 0x2181
    38a8:	90 91 82 21 	lds	r25, 0x2182
    38ac:	a0 91 83 21 	lds	r26, 0x2183
    38b0:	b0 91 84 21 	lds	r27, 0x2184
    38b4:	83 01       	movw	r16, r6
    38b6:	72 01       	movw	r14, r4
    38b8:	e8 1a       	sub	r14, r24
    38ba:	f9 0a       	sbc	r15, r25
    38bc:	0a 0b       	sbc	r16, r26
    38be:	1b 0b       	sbc	r17, r27
    38c0:	e0 92 99 21 	sts	0x2199, r14
    38c4:	f0 92 9a 21 	sts	0x219A, r15
    38c8:	00 93 9b 21 	sts	0x219B, r16
    38cc:	10 93 9c 21 	sts	0x219C, r17
	mc.steps[Y_AXIS] = mc.target[Y_AXIS]-mc.position[Y_AXIS];
    38d0:	80 91 85 21 	lds	r24, 0x2185
    38d4:	90 91 86 21 	lds	r25, 0x2186
    38d8:	a0 91 87 21 	lds	r26, 0x2187
    38dc:	b0 91 88 21 	lds	r27, 0x2188
    38e0:	a8 1a       	sub	r10, r24
    38e2:	b9 0a       	sbc	r11, r25
    38e4:	ca 0a       	sbc	r12, r26
    38e6:	db 0a       	sbc	r13, r27
    38e8:	a0 92 9d 21 	sts	0x219D, r10
    38ec:	b0 92 9e 21 	sts	0x219E, r11
    38f0:	c0 92 9f 21 	sts	0x219F, r12
    38f4:	d0 92 a0 21 	sts	0x21A0, r13
	mc.steps[Z_AXIS] = mc.target[Z_AXIS]-mc.position[Z_AXIS];
    38f8:	80 91 89 21 	lds	r24, 0x2189
    38fc:	90 91 8a 21 	lds	r25, 0x218A
    3900:	a0 91 8b 21 	lds	r26, 0x218B
    3904:	b0 91 8c 21 	lds	r27, 0x218C
    3908:	19 01       	movw	r2, r18
    390a:	2a 01       	movw	r4, r20
    390c:	28 1a       	sub	r2, r24
    390e:	39 0a       	sbc	r3, r25
    3910:	4a 0a       	sbc	r4, r26
    3912:	5b 0a       	sbc	r5, r27
    3914:	20 92 a1 21 	sts	0x21A1, r2
    3918:	30 92 a2 21 	sts	0x21A2, r3
    391c:	40 92 a3 21 	sts	0x21A3, r4
    3920:	50 92 a4 21 	sts	0x21A4, r5

	if (invert_feed_rate) {
    3924:	89 28       	or	r8, r9
    3926:	59 f0       	breq	.+22     	; 0x393e <mc_line_nonblock+0x188>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3928:	60 ec       	ldi	r22, 0xC0	; 192
    392a:	71 ee       	ldi	r23, 0xE1	; 225
    392c:	84 e6       	ldi	r24, 0x64	; 100
    392e:	9c e4       	ldi	r25, 0x4C	; 76
    3930:	29 89       	ldd	r18, Y+17	; 0x11
    3932:	3a 89       	ldd	r19, Y+18	; 0x12
    3934:	4b 89       	ldd	r20, Y+19	; 0x13
    3936:	5c 89       	ldd	r21, Y+20	; 0x14
    3938:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    393c:	4a c0       	rjmp	.+148    	; 0x39d2 <mc_line_nonblock+0x21c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X_AXIS]/CFG(X_AXIS).steps_per_mm) + 
    393e:	c8 01       	movw	r24, r16
    3940:	b7 01       	movw	r22, r14
    3942:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    3946:	29 85       	ldd	r18, Y+9	; 0x09
    3948:	3a 85       	ldd	r19, Y+10	; 0x0a
    394a:	4b 85       	ldd	r20, Y+11	; 0x0b
    394c:	5c 85       	ldd	r21, Y+12	; 0x0c
    394e:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    3952:	0e 94 18 46 	call	0x8c30	; 0x8c30 <square>
    3956:	3b 01       	movw	r6, r22
    3958:	4c 01       	movw	r8, r24
    395a:	c6 01       	movw	r24, r12
    395c:	b5 01       	movw	r22, r10
    395e:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    3962:	2d 81       	ldd	r18, Y+5	; 0x05
    3964:	3e 81       	ldd	r19, Y+6	; 0x06
    3966:	4f 81       	ldd	r20, Y+7	; 0x07
    3968:	58 85       	ldd	r21, Y+8	; 0x08
    396a:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    396e:	0e 94 18 46 	call	0x8c30	; 0x8c30 <square>
    3972:	5b 01       	movw	r10, r22
    3974:	6c 01       	movw	r12, r24
    3976:	c2 01       	movw	r24, r4
    3978:	b1 01       	movw	r22, r2
    397a:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    397e:	29 81       	ldd	r18, Y+1	; 0x01
    3980:	3a 81       	ldd	r19, Y+2	; 0x02
    3982:	4b 81       	ldd	r20, Y+3	; 0x03
    3984:	5c 81       	ldd	r21, Y+4	; 0x04
    3986:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    398a:	0e 94 18 46 	call	0x8c30	; 0x8c30 <square>
    398e:	7b 01       	movw	r14, r22
    3990:	8c 01       	movw	r16, r24
    3992:	c4 01       	movw	r24, r8
    3994:	b3 01       	movw	r22, r6
    3996:	a6 01       	movw	r20, r12
    3998:	95 01       	movw	r18, r10
    399a:	0e 94 0c 42 	call	0x8418	; 0x8418 <__addsf3>
    399e:	a8 01       	movw	r20, r16
    39a0:	97 01       	movw	r18, r14
    39a2:	0e 94 0c 42 	call	0x8418	; 0x8418 <__addsf3>
    39a6:	0e 94 da 45 	call	0x8bb4	; 0x8bb4 <sqrt>
    39aa:	60 93 a9 21 	sts	0x21A9, r22
    39ae:	70 93 aa 21 	sts	0x21AA, r23
    39b2:	80 93 ab 21 	sts	0x21AB, r24
    39b6:	90 93 ac 21 	sts	0x21AC, r25
							   square(mc.steps[Y_AXIS]/CFG(Y_AXIS).steps_per_mm) + 
							   square(mc.steps[Z_AXIS]/CFG(Z_AXIS).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    39ba:	29 89       	ldd	r18, Y+17	; 0x11
    39bc:	3a 89       	ldd	r19, Y+18	; 0x12
    39be:	4b 89       	ldd	r20, Y+19	; 0x13
    39c0:	5c 89       	ldd	r21, Y+20	; 0x14
    39c2:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    39c6:	20 e0       	ldi	r18, 0x00	; 0
    39c8:	34 e2       	ldi	r19, 0x24	; 36
    39ca:	44 e7       	ldi	r20, 0x74	; 116
    39cc:	59 e4       	ldi	r21, 0x49	; 73
    39ce:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    39d2:	0e 94 3d 45 	call	0x8a7a	; 0x8a7a <lround>
    39d6:	60 93 a5 21 	sts	0x21A5, r22
    39da:	70 93 a6 21 	sts	0x21A6, r23
    39de:	80 93 a7 21 	sts	0x21A7, r24
    39e2:	90 93 a8 21 	sts	0x21A8, r25
	}
	mc.line_state = MC_STATE_NEW;
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	80 93 80 21 	sts	0x2180, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    39ec:	e1 e8       	ldi	r30, 0x81	; 129
    39ee:	f1 e2       	ldi	r31, 0x21	; 33
    39f0:	df 01       	movw	r26, r30
    39f2:	1c 96       	adiw	r26, 0x0c	; 12
    39f4:	8c e0       	ldi	r24, 0x0C	; 12
    39f6:	0d 90       	ld	r0, X+
    39f8:	01 92       	st	Z+, r0
    39fa:	81 50       	subi	r24, 0x01	; 1
    39fc:	e1 f7       	brne	.-8      	; 0x39f6 <mc_line_nonblock+0x240>
	return (mc_line_continuation());
    39fe:	0e 94 92 1b 	call	0x3724	; 0x3724 <mc_line_continuation>
}
    3a02:	64 96       	adiw	r28, 0x14	; 20
    3a04:	cd bf       	out	0x3d, r28	; 61
    3a06:	de bf       	out	0x3e, r29	; 62
    3a08:	cf 91       	pop	r28
    3a0a:	df 91       	pop	r29
    3a0c:	1f 91       	pop	r17
    3a0e:	0f 91       	pop	r16
    3a10:	ff 90       	pop	r15
    3a12:	ef 90       	pop	r14
    3a14:	df 90       	pop	r13
    3a16:	cf 90       	pop	r12
    3a18:	bf 90       	pop	r11
    3a1a:	af 90       	pop	r10
    3a1c:	9f 90       	pop	r9
    3a1e:	8f 90       	pop	r8
    3a20:	7f 90       	pop	r7
    3a22:	6f 90       	pop	r6
    3a24:	5f 90       	pop	r5
    3a26:	4f 90       	pop	r4
    3a28:	3f 90       	pop	r3
    3a2a:	2f 90       	pop	r2
    3a2c:	08 95       	ret

00003a2e <mc_line>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    3a2e:	2f 92       	push	r2
    3a30:	3f 92       	push	r3
    3a32:	4f 92       	push	r4
    3a34:	5f 92       	push	r5
    3a36:	6f 92       	push	r6
    3a38:	7f 92       	push	r7
    3a3a:	8f 92       	push	r8
    3a3c:	9f 92       	push	r9
    3a3e:	af 92       	push	r10
    3a40:	bf 92       	push	r11
    3a42:	cf 92       	push	r12
    3a44:	df 92       	push	r13
    3a46:	ef 92       	push	r14
    3a48:	ff 92       	push	r15
    3a4a:	0f 93       	push	r16
    3a4c:	1f 93       	push	r17
    3a4e:	df 93       	push	r29
    3a50:	cf 93       	push	r28
    3a52:	cd b7       	in	r28, 0x3d	; 61
    3a54:	de b7       	in	r29, 0x3e	; 62
    3a56:	6c 97       	sbiw	r28, 0x1c	; 28
    3a58:	cd bf       	out	0x3d, r28	; 61
    3a5a:	de bf       	out	0x3e, r29	; 62
    3a5c:	2d 8b       	std	Y+21, r18	; 0x15
    3a5e:	3e 8b       	std	Y+22, r19	; 0x16
    3a60:	4f 8b       	std	Y+23, r20	; 0x17
    3a62:	58 8f       	std	Y+24, r21	; 0x18
    3a64:	a9 8e       	std	Y+25, r10	; 0x19
    3a66:	ba 8e       	std	Y+26, r11	; 0x1a
    3a68:	cb 8e       	std	Y+27, r12	; 0x1b
    3a6a:	dc 8e       	std	Y+28, r13	; 0x1c
	mc.target[X_AXIS] = lround(x*CFG(X_AXIS).steps_per_mm);
    3a6c:	20 91 ac 24 	lds	r18, 0x24AC
    3a70:	30 91 ad 24 	lds	r19, 0x24AD
    3a74:	40 91 ae 24 	lds	r20, 0x24AE
    3a78:	50 91 af 24 	lds	r21, 0x24AF
    3a7c:	29 8b       	std	Y+17, r18	; 0x11
    3a7e:	3a 8b       	std	Y+18, r19	; 0x12
    3a80:	4b 8b       	std	Y+19, r20	; 0x13
    3a82:	5c 8b       	std	Y+20, r21	; 0x14
    3a84:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    3a88:	0e 94 3d 45 	call	0x8a7a	; 0x8a7a <lround>
    3a8c:	2b 01       	movw	r4, r22
    3a8e:	3c 01       	movw	r6, r24
    3a90:	40 92 8d 21 	sts	0x218D, r4
    3a94:	50 92 8e 21 	sts	0x218E, r5
    3a98:	60 92 8f 21 	sts	0x218F, r6
    3a9c:	70 92 90 21 	sts	0x2190, r7
	mc.target[Y_AXIS] = lround(y*CFG(Y_AXIS).steps_per_mm);
    3aa0:	80 91 c4 24 	lds	r24, 0x24C4
    3aa4:	90 91 c5 24 	lds	r25, 0x24C5
    3aa8:	a0 91 c6 24 	lds	r26, 0x24C6
    3aac:	b0 91 c7 24 	lds	r27, 0x24C7
    3ab0:	8d 87       	std	Y+13, r24	; 0x0d
    3ab2:	9e 87       	std	Y+14, r25	; 0x0e
    3ab4:	af 87       	std	Y+15, r26	; 0x0f
    3ab6:	b8 8b       	std	Y+16, r27	; 0x10
    3ab8:	6d 89       	ldd	r22, Y+21	; 0x15
    3aba:	7e 89       	ldd	r23, Y+22	; 0x16
    3abc:	8f 89       	ldd	r24, Y+23	; 0x17
    3abe:	98 8d       	ldd	r25, Y+24	; 0x18
    3ac0:	2d 85       	ldd	r18, Y+13	; 0x0d
    3ac2:	3e 85       	ldd	r19, Y+14	; 0x0e
    3ac4:	4f 85       	ldd	r20, Y+15	; 0x0f
    3ac6:	58 89       	ldd	r21, Y+16	; 0x10
    3ac8:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    3acc:	0e 94 3d 45 	call	0x8a7a	; 0x8a7a <lround>
    3ad0:	5b 01       	movw	r10, r22
    3ad2:	6c 01       	movw	r12, r24
    3ad4:	a0 92 91 21 	sts	0x2191, r10
    3ad8:	b0 92 92 21 	sts	0x2192, r11
    3adc:	c0 92 93 21 	sts	0x2193, r12
    3ae0:	d0 92 94 21 	sts	0x2194, r13
	mc.target[Z_AXIS] = lround(z*CFG(Z_AXIS).steps_per_mm); 
    3ae4:	20 91 dc 24 	lds	r18, 0x24DC
    3ae8:	30 91 dd 24 	lds	r19, 0x24DD
    3aec:	40 91 de 24 	lds	r20, 0x24DE
    3af0:	50 91 df 24 	lds	r21, 0x24DF
    3af4:	29 87       	std	Y+9, r18	; 0x09
    3af6:	3a 87       	std	Y+10, r19	; 0x0a
    3af8:	4b 87       	std	Y+11, r20	; 0x0b
    3afa:	5c 87       	std	Y+12, r21	; 0x0c
    3afc:	c8 01       	movw	r24, r16
    3afe:	b7 01       	movw	r22, r14
    3b00:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    3b04:	0e 94 3d 45 	call	0x8a7a	; 0x8a7a <lround>
    3b08:	9b 01       	movw	r18, r22
    3b0a:	ac 01       	movw	r20, r24
    3b0c:	20 93 95 21 	sts	0x2195, r18
    3b10:	30 93 96 21 	sts	0x2196, r19
    3b14:	40 93 97 21 	sts	0x2197, r20
    3b18:	50 93 98 21 	sts	0x2198, r21

	mc.steps[X_AXIS] = mc.target[X_AXIS]-mc.position[X_AXIS];
    3b1c:	80 91 81 21 	lds	r24, 0x2181
    3b20:	90 91 82 21 	lds	r25, 0x2182
    3b24:	a0 91 83 21 	lds	r26, 0x2183
    3b28:	b0 91 84 21 	lds	r27, 0x2184
    3b2c:	83 01       	movw	r16, r6
    3b2e:	72 01       	movw	r14, r4
    3b30:	e8 1a       	sub	r14, r24
    3b32:	f9 0a       	sbc	r15, r25
    3b34:	0a 0b       	sbc	r16, r26
    3b36:	1b 0b       	sbc	r17, r27
    3b38:	ed 82       	std	Y+5, r14	; 0x05
    3b3a:	fe 82       	std	Y+6, r15	; 0x06
    3b3c:	0f 83       	std	Y+7, r16	; 0x07
    3b3e:	18 87       	std	Y+8, r17	; 0x08
    3b40:	e0 92 99 21 	sts	0x2199, r14
    3b44:	f0 92 9a 21 	sts	0x219A, r15
    3b48:	00 93 9b 21 	sts	0x219B, r16
    3b4c:	10 93 9c 21 	sts	0x219C, r17
	mc.steps[Y_AXIS] = mc.target[Y_AXIS]-mc.position[Y_AXIS];
    3b50:	80 91 85 21 	lds	r24, 0x2185
    3b54:	90 91 86 21 	lds	r25, 0x2186
    3b58:	a0 91 87 21 	lds	r26, 0x2187
    3b5c:	b0 91 88 21 	lds	r27, 0x2188
    3b60:	86 01       	movw	r16, r12
    3b62:	75 01       	movw	r14, r10
    3b64:	e8 1a       	sub	r14, r24
    3b66:	f9 0a       	sbc	r15, r25
    3b68:	0a 0b       	sbc	r16, r26
    3b6a:	1b 0b       	sbc	r17, r27
    3b6c:	e9 82       	std	Y+1, r14	; 0x01
    3b6e:	fa 82       	std	Y+2, r15	; 0x02
    3b70:	0b 83       	std	Y+3, r16	; 0x03
    3b72:	1c 83       	std	Y+4, r17	; 0x04
    3b74:	e0 92 9d 21 	sts	0x219D, r14
    3b78:	f0 92 9e 21 	sts	0x219E, r15
    3b7c:	00 93 9f 21 	sts	0x219F, r16
    3b80:	10 93 a0 21 	sts	0x21A0, r17
	mc.steps[Z_AXIS] = mc.target[Z_AXIS]-mc.position[Z_AXIS];
    3b84:	80 91 89 21 	lds	r24, 0x2189
    3b88:	90 91 8a 21 	lds	r25, 0x218A
    3b8c:	a0 91 8b 21 	lds	r26, 0x218B
    3b90:	b0 91 8c 21 	lds	r27, 0x218C
    3b94:	19 01       	movw	r2, r18
    3b96:	2a 01       	movw	r4, r20
    3b98:	28 1a       	sub	r2, r24
    3b9a:	39 0a       	sbc	r3, r25
    3b9c:	4a 0a       	sbc	r4, r26
    3b9e:	5b 0a       	sbc	r5, r27
    3ba0:	20 92 a1 21 	sts	0x21A1, r2
    3ba4:	30 92 a2 21 	sts	0x21A2, r3
    3ba8:	40 92 a3 21 	sts	0x21A3, r4
    3bac:	50 92 a4 21 	sts	0x21A4, r5

	if (invert_feed_rate) {
    3bb0:	89 28       	or	r8, r9
    3bb2:	59 f0       	breq	.+22     	; 0x3bca <mc_line+0x19c>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3bb4:	60 ec       	ldi	r22, 0xC0	; 192
    3bb6:	71 ee       	ldi	r23, 0xE1	; 225
    3bb8:	84 e6       	ldi	r24, 0x64	; 100
    3bba:	9c e4       	ldi	r25, 0x4C	; 76
    3bbc:	29 8d       	ldd	r18, Y+25	; 0x19
    3bbe:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3bc0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3bc2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3bc4:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    3bc8:	4e c0       	rjmp	.+156    	; 0x3c66 <mc_line+0x238>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X_AXIS]/CFG(X_AXIS).steps_per_mm) + 
    3bca:	6d 81       	ldd	r22, Y+5	; 0x05
    3bcc:	7e 81       	ldd	r23, Y+6	; 0x06
    3bce:	8f 81       	ldd	r24, Y+7	; 0x07
    3bd0:	98 85       	ldd	r25, Y+8	; 0x08
    3bd2:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    3bd6:	29 89       	ldd	r18, Y+17	; 0x11
    3bd8:	3a 89       	ldd	r19, Y+18	; 0x12
    3bda:	4b 89       	ldd	r20, Y+19	; 0x13
    3bdc:	5c 89       	ldd	r21, Y+20	; 0x14
    3bde:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    3be2:	0e 94 18 46 	call	0x8c30	; 0x8c30 <square>
    3be6:	3b 01       	movw	r6, r22
    3be8:	4c 01       	movw	r8, r24
    3bea:	69 81       	ldd	r22, Y+1	; 0x01
    3bec:	7a 81       	ldd	r23, Y+2	; 0x02
    3bee:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    3bf2:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    3bf6:	2d 85       	ldd	r18, Y+13	; 0x0d
    3bf8:	3e 85       	ldd	r19, Y+14	; 0x0e
    3bfa:	4f 85       	ldd	r20, Y+15	; 0x0f
    3bfc:	58 89       	ldd	r21, Y+16	; 0x10
    3bfe:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    3c02:	0e 94 18 46 	call	0x8c30	; 0x8c30 <square>
    3c06:	5b 01       	movw	r10, r22
    3c08:	6c 01       	movw	r12, r24
    3c0a:	c2 01       	movw	r24, r4
    3c0c:	b1 01       	movw	r22, r2
    3c0e:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    3c12:	29 85       	ldd	r18, Y+9	; 0x09
    3c14:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c16:	4b 85       	ldd	r20, Y+11	; 0x0b
    3c18:	5c 85       	ldd	r21, Y+12	; 0x0c
    3c1a:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    3c1e:	0e 94 18 46 	call	0x8c30	; 0x8c30 <square>
    3c22:	7b 01       	movw	r14, r22
    3c24:	8c 01       	movw	r16, r24
    3c26:	c4 01       	movw	r24, r8
    3c28:	b3 01       	movw	r22, r6
    3c2a:	a6 01       	movw	r20, r12
    3c2c:	95 01       	movw	r18, r10
    3c2e:	0e 94 0c 42 	call	0x8418	; 0x8418 <__addsf3>
    3c32:	a8 01       	movw	r20, r16
    3c34:	97 01       	movw	r18, r14
    3c36:	0e 94 0c 42 	call	0x8418	; 0x8418 <__addsf3>
    3c3a:	0e 94 da 45 	call	0x8bb4	; 0x8bb4 <sqrt>
    3c3e:	60 93 a9 21 	sts	0x21A9, r22
    3c42:	70 93 aa 21 	sts	0x21AA, r23
    3c46:	80 93 ab 21 	sts	0x21AB, r24
    3c4a:	90 93 ac 21 	sts	0x21AC, r25
							   square(mc.steps[Y_AXIS]/CFG(Y_AXIS).steps_per_mm) + 
							   square(mc.steps[Z_AXIS]/CFG(Z_AXIS).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3c4e:	29 8d       	ldd	r18, Y+25	; 0x19
    3c50:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3c52:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3c54:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3c56:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	34 e2       	ldi	r19, 0x24	; 36
    3c5e:	44 e7       	ldi	r20, 0x74	; 116
    3c60:	59 e4       	ldi	r21, 0x49	; 73
    3c62:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    3c66:	0e 94 3d 45 	call	0x8a7a	; 0x8a7a <lround>
    3c6a:	60 93 a5 21 	sts	0x21A5, r22
    3c6e:	70 93 a6 21 	sts	0x21A6, r23
    3c72:	80 93 a7 21 	sts	0x21A7, r24
    3c76:	90 93 a8 21 	sts	0x21A8, r25
	}
    mv_queue_move_buffer(mc.steps[X_AXIS], mc.steps[Y_AXIS], mc.steps[Z_AXIS], mc.microseconds); 
    3c7a:	a0 90 a5 21 	lds	r10, 0x21A5
    3c7e:	b0 90 a6 21 	lds	r11, 0x21A6
    3c82:	c0 90 a7 21 	lds	r12, 0x21A7
    3c86:	d0 90 a8 21 	lds	r13, 0x21A8
    3c8a:	6d 81       	ldd	r22, Y+5	; 0x05
    3c8c:	7e 81       	ldd	r23, Y+6	; 0x06
    3c8e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c90:	98 85       	ldd	r25, Y+8	; 0x08
    3c92:	29 81       	ldd	r18, Y+1	; 0x01
    3c94:	3a 81       	ldd	r19, Y+2	; 0x02
    3c96:	4b 81       	ldd	r20, Y+3	; 0x03
    3c98:	5c 81       	ldd	r21, Y+4	; 0x04
    3c9a:	82 01       	movw	r16, r4
    3c9c:	71 01       	movw	r14, r2
    3c9e:	0e 94 54 31 	call	0x62a8	; 0x62a8 <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3ca2:	e1 e8       	ldi	r30, 0x81	; 129
    3ca4:	f1 e2       	ldi	r31, 0x21	; 33
    3ca6:	df 01       	movw	r26, r30
    3ca8:	1c 96       	adiw	r26, 0x0c	; 12
    3caa:	8c e0       	ldi	r24, 0x0C	; 12
    3cac:	0d 90       	ld	r0, X+
    3cae:	01 92       	st	Z+, r0
    3cb0:	81 50       	subi	r24, 0x01	; 1
    3cb2:	e1 f7       	brne	.-8      	; 0x3cac <mc_line+0x27e>
	return (TG_OK);
}
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	6c 96       	adiw	r28, 0x1c	; 28
    3cba:	cd bf       	out	0x3d, r28	; 61
    3cbc:	de bf       	out	0x3e, r29	; 62
    3cbe:	cf 91       	pop	r28
    3cc0:	df 91       	pop	r29
    3cc2:	1f 91       	pop	r17
    3cc4:	0f 91       	pop	r16
    3cc6:	ff 90       	pop	r15
    3cc8:	ef 90       	pop	r14
    3cca:	df 90       	pop	r13
    3ccc:	cf 90       	pop	r12
    3cce:	bf 90       	pop	r11
    3cd0:	af 90       	pop	r10
    3cd2:	9f 90       	pop	r9
    3cd4:	8f 90       	pop	r8
    3cd6:	7f 90       	pop	r7
    3cd8:	6f 90       	pop	r6
    3cda:	5f 90       	pop	r5
    3cdc:	4f 90       	pop	r4
    3cde:	3f 90       	pop	r3
    3ce0:	2f 90       	pop	r2
    3ce2:	08 95       	ret

00003ce4 <mc_arc_continuation>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continuation() 
{
    3ce4:	8f 92       	push	r8
    3ce6:	9f 92       	push	r9
    3ce8:	af 92       	push	r10
    3cea:	bf 92       	push	r11
    3cec:	cf 92       	push	r12
    3cee:	df 92       	push	r13
    3cf0:	ef 92       	push	r14
    3cf2:	ff 92       	push	r15
    3cf4:	0f 93       	push	r16
    3cf6:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3cf8:	80 91 fb 24 	lds	r24, 0x24FB
    3cfc:	88 23       	and	r24, r24
    3cfe:	19 f4       	brne	.+6      	; 0x3d06 <mc_arc_continuation+0x22>
    3d00:	21 e0       	ldi	r18, 0x01	; 1
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	dd c0       	rjmp	.+442    	; 0x3ec0 <mc_arc_continuation+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3d06:	81 30       	cpi	r24, 0x01	; 1
    3d08:	09 f0       	breq	.+2      	; 0x3d0c <mc_arc_continuation+0x28>
    3d0a:	ca c0       	rjmp	.+404    	; 0x3ea0 <mc_arc_continuation+0x1bc>
		ma.segment_counter=0;
    3d0c:	10 92 fe 24 	sts	0x24FE, r1
    3d10:	10 92 ff 24 	sts	0x24FF, r1
		ma.arc_state = MC_STATE_RUNNING;
    3d14:	82 e0       	ldi	r24, 0x02	; 2
    3d16:	80 93 fb 24 	sts	0x24FB, r24
    3d1a:	c2 c0       	rjmp	.+388    	; 0x3ea0 <mc_arc_continuation+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3d1c:	0e 94 28 31 	call	0x6250	; 0x6250 <mv_test_move_buffer_full>
    3d20:	88 23       	and	r24, r24
    3d22:	19 f0       	breq	.+6      	; 0x3d2a <mc_arc_continuation+0x46>
    3d24:	22 e0       	ldi	r18, 0x02	; 2
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	cb c0       	rjmp	.+406    	; 0x3ec0 <mc_arc_continuation+0x1dc>
			return (TG_CONTINUE);
		}
		ma.segment_counter++;
    3d2a:	80 91 fe 24 	lds	r24, 0x24FE
    3d2e:	90 91 ff 24 	lds	r25, 0x24FF
    3d32:	01 96       	adiw	r24, 0x01	; 1
    3d34:	80 93 fe 24 	sts	0x24FE, r24
    3d38:	90 93 ff 24 	sts	0x24FF, r25
		ma.theta += ma.theta_per_segment;
    3d3c:	60 91 20 25 	lds	r22, 0x2520
    3d40:	70 91 21 25 	lds	r23, 0x2521
    3d44:	80 91 22 25 	lds	r24, 0x2522
    3d48:	90 91 23 25 	lds	r25, 0x2523
    3d4c:	20 91 2c 25 	lds	r18, 0x252C
    3d50:	30 91 2d 25 	lds	r19, 0x252D
    3d54:	40 91 2e 25 	lds	r20, 0x252E
    3d58:	50 91 2f 25 	lds	r21, 0x252F
    3d5c:	0e 94 0c 42 	call	0x8418	; 0x8418 <__addsf3>
    3d60:	7b 01       	movw	r14, r22
    3d62:	8c 01       	movw	r16, r24
    3d64:	cb 01       	movw	r24, r22
    3d66:	d8 01       	movw	r26, r16
    3d68:	80 93 20 25 	sts	0x2520, r24
    3d6c:	90 93 21 25 	sts	0x2521, r25
    3d70:	a0 93 22 25 	sts	0x2522, r26
    3d74:	b0 93 23 25 	sts	0x2523, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3d78:	b7 01       	movw	r22, r14
    3d7a:	c8 01       	movw	r24, r16
    3d7c:	0e 94 d0 45 	call	0x8ba0	; 0x8ba0 <sin>
    3d80:	80 90 24 25 	lds	r8, 0x2524
    3d84:	90 90 25 25 	lds	r9, 0x2525
    3d88:	a0 90 26 25 	lds	r10, 0x2526
    3d8c:	b0 90 27 25 	lds	r11, 0x2527
    3d90:	c0 90 02 25 	lds	r12, 0x2502
    3d94:	d0 90 03 25 	lds	r13, 0x2503
    3d98:	cc 0c       	add	r12, r12
    3d9a:	dd 1c       	adc	r13, r13
    3d9c:	cc 0c       	add	r12, r12
    3d9e:	dd 1c       	adc	r13, r13
    3da0:	2b ef       	ldi	r18, 0xFB	; 251
    3da2:	34 e2       	ldi	r19, 0x24	; 36
    3da4:	c2 0e       	add	r12, r18
    3da6:	d3 1e       	adc	r13, r19
    3da8:	a5 01       	movw	r20, r10
    3daa:	94 01       	movw	r18, r8
    3dac:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    3db0:	9b 01       	movw	r18, r22
    3db2:	ac 01       	movw	r20, r24
    3db4:	60 91 18 25 	lds	r22, 0x2518
    3db8:	70 91 19 25 	lds	r23, 0x2519
    3dbc:	80 91 1a 25 	lds	r24, 0x251A
    3dc0:	90 91 1b 25 	lds	r25, 0x251B
    3dc4:	0e 94 0c 42 	call	0x8418	; 0x8418 <__addsf3>
    3dc8:	f6 01       	movw	r30, r12
    3dca:	65 87       	std	Z+13, r22	; 0x0d
    3dcc:	76 87       	std	Z+14, r23	; 0x0e
    3dce:	87 87       	std	Z+15, r24	; 0x0f
    3dd0:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3dd2:	b7 01       	movw	r22, r14
    3dd4:	c8 01       	movw	r24, r16
    3dd6:	0e 94 af 42 	call	0x855e	; 0x855e <cos>
    3dda:	00 91 04 25 	lds	r16, 0x2504
    3dde:	10 91 05 25 	lds	r17, 0x2505
    3de2:	00 0f       	add	r16, r16
    3de4:	11 1f       	adc	r17, r17
    3de6:	00 0f       	add	r16, r16
    3de8:	11 1f       	adc	r17, r17
    3dea:	05 50       	subi	r16, 0x05	; 5
    3dec:	1b 4d       	sbci	r17, 0xDB	; 219
    3dee:	a5 01       	movw	r20, r10
    3df0:	94 01       	movw	r18, r8
    3df2:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    3df6:	9b 01       	movw	r18, r22
    3df8:	ac 01       	movw	r20, r24
    3dfa:	60 91 1c 25 	lds	r22, 0x251C
    3dfe:	70 91 1d 25 	lds	r23, 0x251D
    3e02:	80 91 1e 25 	lds	r24, 0x251E
    3e06:	90 91 1f 25 	lds	r25, 0x251F
    3e0a:	0e 94 0c 42 	call	0x8418	; 0x8418 <__addsf3>
    3e0e:	f8 01       	movw	r30, r16
    3e10:	65 87       	std	Z+13, r22	; 0x0d
    3e12:	76 87       	std	Z+14, r23	; 0x0e
    3e14:	87 87       	std	Z+15, r24	; 0x0f
    3e16:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3e18:	00 91 06 25 	lds	r16, 0x2506
    3e1c:	10 91 07 25 	lds	r17, 0x2507
    3e20:	00 0f       	add	r16, r16
    3e22:	11 1f       	adc	r17, r17
    3e24:	00 0f       	add	r16, r16
    3e26:	11 1f       	adc	r17, r17
    3e28:	05 50       	subi	r16, 0x05	; 5
    3e2a:	1b 4d       	sbci	r17, 0xDB	; 219
    3e2c:	f8 01       	movw	r30, r16
    3e2e:	65 85       	ldd	r22, Z+13	; 0x0d
    3e30:	76 85       	ldd	r23, Z+14	; 0x0e
    3e32:	87 85       	ldd	r24, Z+15	; 0x0f
    3e34:	90 89       	ldd	r25, Z+16	; 0x10
    3e36:	20 91 30 25 	lds	r18, 0x2530
    3e3a:	30 91 31 25 	lds	r19, 0x2531
    3e3e:	40 91 32 25 	lds	r20, 0x2532
    3e42:	50 91 33 25 	lds	r21, 0x2533
    3e46:	0e 94 0c 42 	call	0x8418	; 0x8418 <__addsf3>
    3e4a:	f8 01       	movw	r30, r16
    3e4c:	65 87       	std	Z+13, r22	; 0x0d
    3e4e:	76 87       	std	Z+14, r23	; 0x0e
    3e50:	87 87       	std	Z+15, r24	; 0x0f
    3e52:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X_AXIS], 
    3e54:	60 91 08 25 	lds	r22, 0x2508
    3e58:	70 91 09 25 	lds	r23, 0x2509
    3e5c:	80 91 0a 25 	lds	r24, 0x250A
    3e60:	90 91 0b 25 	lds	r25, 0x250B
    3e64:	20 91 0c 25 	lds	r18, 0x250C
    3e68:	30 91 0d 25 	lds	r19, 0x250D
    3e6c:	40 91 0e 25 	lds	r20, 0x250E
    3e70:	50 91 0f 25 	lds	r21, 0x250F
    3e74:	e0 90 10 25 	lds	r14, 0x2510
    3e78:	f0 90 11 25 	lds	r15, 0x2511
    3e7c:	00 91 12 25 	lds	r16, 0x2512
    3e80:	10 91 13 25 	lds	r17, 0x2513
    3e84:	a0 90 28 25 	lds	r10, 0x2528
    3e88:	b0 90 29 25 	lds	r11, 0x2529
    3e8c:	c0 90 2a 25 	lds	r12, 0x252A
    3e90:	d0 90 2b 25 	lds	r13, 0x252B
    3e94:	80 90 00 25 	lds	r8, 0x2500
    3e98:	90 90 01 25 	lds	r9, 0x2501
    3e9c:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3ea0:	20 91 fe 24 	lds	r18, 0x24FE
    3ea4:	30 91 ff 24 	lds	r19, 0x24FF
    3ea8:	80 91 fc 24 	lds	r24, 0x24FC
    3eac:	90 91 fd 24 	lds	r25, 0x24FD
    3eb0:	82 17       	cp	r24, r18
    3eb2:	93 07       	cpc	r25, r19
    3eb4:	0c f0       	brlt	.+2      	; 0x3eb8 <mc_arc_continuation+0x1d4>
    3eb6:	32 cf       	rjmp	.-412    	; 0x3d1c <mc_arc_continuation+0x38>
				ma.dtarget[Y_AXIS], 
				ma.dtarget[Z_AXIS], 
				ma.feed_rate, 
				ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3eb8:	10 92 fb 24 	sts	0x24FB, r1
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3ec0:	c9 01       	movw	r24, r18
    3ec2:	1f 91       	pop	r17
    3ec4:	0f 91       	pop	r16
    3ec6:	ff 90       	pop	r15
    3ec8:	ef 90       	pop	r14
    3eca:	df 90       	pop	r13
    3ecc:	cf 90       	pop	r12
    3ece:	bf 90       	pop	r11
    3ed0:	af 90       	pop	r10
    3ed2:	9f 90       	pop	r9
    3ed4:	8f 90       	pop	r8
    3ed6:	08 95       	ret

00003ed8 <mc_arc_nonblock>:

int mc_arc_nonblock(double theta, double angular_travel, 
					double radius, double linear_travel, 
					int axis_1, int axis_2, int axis_linear, 
					double feed_rate, int invert_feed_rate)
{
    3ed8:	2f 92       	push	r2
    3eda:	3f 92       	push	r3
    3edc:	4f 92       	push	r4
    3ede:	5f 92       	push	r5
    3ee0:	6f 92       	push	r6
    3ee2:	7f 92       	push	r7
    3ee4:	8f 92       	push	r8
    3ee6:	9f 92       	push	r9
    3ee8:	af 92       	push	r10
    3eea:	bf 92       	push	r11
    3eec:	cf 92       	push	r12
    3eee:	df 92       	push	r13
    3ef0:	ef 92       	push	r14
    3ef2:	ff 92       	push	r15
    3ef4:	0f 93       	push	r16
    3ef6:	1f 93       	push	r17
    3ef8:	df 93       	push	r29
    3efa:	cf 93       	push	r28
    3efc:	cd b7       	in	r28, 0x3d	; 61
    3efe:	de b7       	in	r29, 0x3e	; 62
    3f00:	28 97       	sbiw	r28, 0x08	; 8
    3f02:	cd bf       	out	0x3d, r28	; 61
    3f04:	de bf       	out	0x3e, r29	; 62
    3f06:	69 83       	std	Y+1, r22	; 0x01
    3f08:	7a 83       	std	Y+2, r23	; 0x02
    3f0a:	8b 83       	std	Y+3, r24	; 0x03
    3f0c:	9c 83       	std	Y+4, r25	; 0x04
    3f0e:	29 01       	movw	r4, r18
    3f10:	3a 01       	movw	r6, r20
    3f12:	ed 82       	std	Y+5, r14	; 0x05
    3f14:	fe 82       	std	Y+6, r15	; 0x06
    3f16:	0f 83       	std	Y+7, r16	; 0x07
    3f18:	18 87       	std	Y+8, r17	; 0x08
    3f1a:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3f1c:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3f1e:	60 93 20 25 	sts	0x2520, r22
    3f22:	70 93 21 25 	sts	0x2521, r23
    3f26:	80 93 22 25 	sts	0x2522, r24
    3f2a:	90 93 23 25 	sts	0x2523, r25
	ma.radius = radius;
    3f2e:	e0 92 24 25 	sts	0x2524, r14
    3f32:	f0 92 25 25 	sts	0x2525, r15
    3f36:	00 93 26 25 	sts	0x2526, r16
    3f3a:	10 93 27 25 	sts	0x2527, r17
	ma.angular_travel = angular_travel;
    3f3e:	20 93 34 25 	sts	0x2534, r18
    3f42:	30 93 35 25 	sts	0x2535, r19
    3f46:	40 93 36 25 	sts	0x2536, r20
    3f4a:	50 93 37 25 	sts	0x2537, r21
	ma.linear_travel = linear_travel;
    3f4e:	a0 92 38 25 	sts	0x2538, r10
    3f52:	b0 92 39 25 	sts	0x2539, r11
    3f56:	c0 92 3a 25 	sts	0x253A, r12
    3f5a:	d0 92 3b 25 	sts	0x253B, r13
	ma.feed_rate = feed_rate;
    3f5e:	8a a1       	ldd	r24, Y+34	; 0x22
    3f60:	9b a1       	ldd	r25, Y+35	; 0x23
    3f62:	ac a1       	ldd	r26, Y+36	; 0x24
    3f64:	bd a1       	ldd	r27, Y+37	; 0x25
    3f66:	80 93 28 25 	sts	0x2528, r24
    3f6a:	90 93 29 25 	sts	0x2529, r25
    3f6e:	a0 93 2a 25 	sts	0x252A, r26
    3f72:	b0 93 2b 25 	sts	0x252B, r27
	ma.invert_feed_rate = invert_feed_rate;
    3f76:	ae a1       	ldd	r26, Y+38	; 0x26
    3f78:	bf a1       	ldd	r27, Y+39	; 0x27
    3f7a:	a0 93 00 25 	sts	0x2500, r26
    3f7e:	b0 93 01 25 	sts	0x2501, r27
	ma.axis_1 = axis_1;
    3f82:	80 92 02 25 	sts	0x2502, r8
    3f86:	90 92 03 25 	sts	0x2503, r9
	ma.axis_2 = axis_2;
    3f8a:	20 92 04 25 	sts	0x2504, r2
    3f8e:	30 92 05 25 	sts	0x2505, r3
	ma.axis_linear = axis_linear;
    3f92:	e8 a1       	ldd	r30, Y+32	; 0x20
    3f94:	f9 a1       	ldd	r31, Y+33	; 0x21
    3f96:	e0 93 06 25 	sts	0x2506, r30
    3f9a:	f0 93 07 25 	sts	0x2507, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3f9e:	ca 01       	movw	r24, r20
    3fa0:	b9 01       	movw	r22, r18
    3fa2:	a8 01       	movw	r20, r16
    3fa4:	97 01       	movw	r18, r14
    3fa6:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    3faa:	7b 01       	movw	r14, r22
    3fac:	8c 01       	movw	r16, r24
    3fae:	c6 01       	movw	r24, r12
    3fb0:	b5 01       	movw	r22, r10
    3fb2:	0e 94 1a 43 	call	0x8634	; 0x8634 <__fixsfsi>
    3fb6:	97 ff       	sbrs	r25, 7
    3fb8:	07 c0       	rjmp	.+14     	; 0x3fc8 <mc_arc_nonblock+0xf0>
    3fba:	90 95       	com	r25
    3fbc:	80 95       	com	r24
    3fbe:	70 95       	com	r23
    3fc0:	61 95       	neg	r22
    3fc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3fc4:	8f 4f       	sbci	r24, 0xFF	; 255
    3fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3fc8:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    3fcc:	9b 01       	movw	r18, r22
    3fce:	ac 01       	movw	r20, r24
    3fd0:	c8 01       	movw	r24, r16
    3fd2:	b7 01       	movw	r22, r14
    3fd4:	0e 94 a8 44 	call	0x8950	; 0x8950 <hypot>
    3fd8:	7b 01       	movw	r14, r22
    3fda:	8c 01       	movw	r16, r24
    3fdc:	60 93 14 25 	sts	0x2514, r22
    3fe0:	70 93 15 25 	sts	0x2515, r23
    3fe4:	80 93 16 25 	sts	0x2516, r24
    3fe8:	90 93 17 25 	sts	0x2517, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3fec:	2a e0       	ldi	r18, 0x0A	; 10
    3fee:	37 ed       	ldi	r19, 0xD7	; 215
    3ff0:	43 e2       	ldi	r20, 0x23	; 35
    3ff2:	5c e3       	ldi	r21, 0x3C	; 60
    3ff4:	0e 94 ab 42 	call	0x8556	; 0x8556 <__cmpsf2>
    3ff8:	88 23       	and	r24, r24
    3ffa:	1c f4       	brge	.+6      	; 0x4002 <mc_arc_nonblock+0x12a>
    3ffc:	2f e0       	ldi	r18, 0x0F	; 15
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	fb c0       	rjmp	.+502    	; 0x41f8 <mc_arc_nonblock+0x320>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    4002:	c8 01       	movw	r24, r16
    4004:	b7 01       	movw	r22, r14
    4006:	20 91 8d 24 	lds	r18, 0x248D
    400a:	30 91 8e 24 	lds	r19, 0x248E
    400e:	40 91 8f 24 	lds	r20, 0x248F
    4012:	50 91 90 24 	lds	r21, 0x2490
    4016:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    401a:	0e 94 98 42 	call	0x8530	; 0x8530 <ceil>
    401e:	0e 94 1a 43 	call	0x8634	; 0x8634 <__fixsfsi>
    4022:	8b 01       	movw	r16, r22
    4024:	60 93 fc 24 	sts	0x24FC, r22
    4028:	70 93 fd 24 	sts	0x24FD, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    402c:	8e a1       	ldd	r24, Y+38	; 0x26
    402e:	9f a1       	ldd	r25, Y+39	; 0x27
    4030:	89 2b       	or	r24, r25
    4032:	b9 f0       	breq	.+46     	; 0x4062 <mc_arc_nonblock+0x18a>
		ma.feed_rate *= ma.segments; 
    4034:	b8 01       	movw	r22, r16
    4036:	88 27       	eor	r24, r24
    4038:	77 fd       	sbrc	r23, 7
    403a:	80 95       	com	r24
    403c:	98 2f       	mov	r25, r24
    403e:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    4042:	9b 01       	movw	r18, r22
    4044:	ac 01       	movw	r20, r24
    4046:	6a a1       	ldd	r22, Y+34	; 0x22
    4048:	7b a1       	ldd	r23, Y+35	; 0x23
    404a:	8c a1       	ldd	r24, Y+36	; 0x24
    404c:	9d a1       	ldd	r25, Y+37	; 0x25
    404e:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    4052:	60 93 28 25 	sts	0x2528, r22
    4056:	70 93 29 25 	sts	0x2529, r23
    405a:	80 93 2a 25 	sts	0x252A, r24
    405e:	90 93 2b 25 	sts	0x252B, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    4062:	b8 01       	movw	r22, r16
    4064:	88 27       	eor	r24, r24
    4066:	77 fd       	sbrc	r23, 7
    4068:	80 95       	com	r24
    406a:	98 2f       	mov	r25, r24
    406c:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    4070:	7b 01       	movw	r14, r22
    4072:	8c 01       	movw	r16, r24
    4074:	c3 01       	movw	r24, r6
    4076:	b2 01       	movw	r22, r4
    4078:	a8 01       	movw	r20, r16
    407a:	97 01       	movw	r18, r14
    407c:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    4080:	60 93 2c 25 	sts	0x252C, r22
    4084:	70 93 2d 25 	sts	0x252D, r23
    4088:	80 93 2e 25 	sts	0x252E, r24
    408c:	90 93 2f 25 	sts	0x252F, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    4090:	c6 01       	movw	r24, r12
    4092:	b5 01       	movw	r22, r10
    4094:	a8 01       	movw	r20, r16
    4096:	97 01       	movw	r18, r14
    4098:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    409c:	60 93 30 25 	sts	0x2530, r22
    40a0:	70 93 31 25 	sts	0x2531, r23
    40a4:	80 93 32 25 	sts	0x2532, r24
    40a8:	90 93 33 25 	sts	0x2533, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    40ac:	69 81       	ldd	r22, Y+1	; 0x01
    40ae:	7a 81       	ldd	r23, Y+2	; 0x02
    40b0:	8b 81       	ldd	r24, Y+3	; 0x03
    40b2:	9c 81       	ldd	r25, Y+4	; 0x04
    40b4:	0e 94 d0 45 	call	0x8ba0	; 0x8ba0 <sin>
    40b8:	5b 01       	movw	r10, r22
    40ba:	6c 01       	movw	r12, r24
    40bc:	f4 01       	movw	r30, r8
    40be:	ee 0f       	add	r30, r30
    40c0:	ff 1f       	adc	r31, r31
    40c2:	ee 0f       	add	r30, r30
    40c4:	ff 1f       	adc	r31, r31
    40c6:	e0 58       	subi	r30, 0x80	; 128
    40c8:	fe 4d       	sbci	r31, 0xDE	; 222
    40ca:	61 81       	ldd	r22, Z+1	; 0x01
    40cc:	72 81       	ldd	r23, Z+2	; 0x02
    40ce:	83 81       	ldd	r24, Z+3	; 0x03
    40d0:	94 81       	ldd	r25, Z+4	; 0x04
    40d2:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    40d6:	f4 01       	movw	r30, r8
    40d8:	ee 0f       	add	r30, r30
    40da:	ff 1f       	adc	r31, r31
    40dc:	e8 0d       	add	r30, r8
    40de:	f9 1d       	adc	r31, r9
    40e0:	13 e0       	ldi	r17, 0x03	; 3
    40e2:	ee 0f       	add	r30, r30
    40e4:	ff 1f       	adc	r31, r31
    40e6:	1a 95       	dec	r17
    40e8:	e1 f7       	brne	.-8      	; 0x40e2 <mc_arc_nonblock+0x20a>
    40ea:	e5 57       	subi	r30, 0x75	; 117
    40ec:	fb 4d       	sbci	r31, 0xDB	; 219
    40ee:	21 a1       	ldd	r18, Z+33	; 0x21
    40f0:	32 a1       	ldd	r19, Z+34	; 0x22
    40f2:	43 a1       	ldd	r20, Z+35	; 0x23
    40f4:	54 a1       	ldd	r21, Z+36	; 0x24
    40f6:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    40fa:	7b 01       	movw	r14, r22
    40fc:	8c 01       	movw	r16, r24
    40fe:	c6 01       	movw	r24, r12
    4100:	b5 01       	movw	r22, r10
    4102:	2d 81       	ldd	r18, Y+5	; 0x05
    4104:	3e 81       	ldd	r19, Y+6	; 0x06
    4106:	4f 81       	ldd	r20, Y+7	; 0x07
    4108:	58 85       	ldd	r21, Y+8	; 0x08
    410a:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    410e:	9b 01       	movw	r18, r22
    4110:	ac 01       	movw	r20, r24
    4112:	c8 01       	movw	r24, r16
    4114:	b7 01       	movw	r22, r14
    4116:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    411a:	60 93 18 25 	sts	0x2518, r22
    411e:	70 93 19 25 	sts	0x2519, r23
    4122:	80 93 1a 25 	sts	0x251A, r24
    4126:	90 93 1b 25 	sts	0x251B, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    412a:	69 81       	ldd	r22, Y+1	; 0x01
    412c:	7a 81       	ldd	r23, Y+2	; 0x02
    412e:	8b 81       	ldd	r24, Y+3	; 0x03
    4130:	9c 81       	ldd	r25, Y+4	; 0x04
    4132:	0e 94 af 42 	call	0x855e	; 0x855e <cos>
    4136:	5b 01       	movw	r10, r22
    4138:	6c 01       	movw	r12, r24
    413a:	f1 01       	movw	r30, r2
    413c:	ee 0f       	add	r30, r30
    413e:	ff 1f       	adc	r31, r31
    4140:	ee 0f       	add	r30, r30
    4142:	ff 1f       	adc	r31, r31
    4144:	e0 58       	subi	r30, 0x80	; 128
    4146:	fe 4d       	sbci	r31, 0xDE	; 222
    4148:	61 81       	ldd	r22, Z+1	; 0x01
    414a:	72 81       	ldd	r23, Z+2	; 0x02
    414c:	83 81       	ldd	r24, Z+3	; 0x03
    414e:	94 81       	ldd	r25, Z+4	; 0x04
    4150:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    4154:	f1 01       	movw	r30, r2
    4156:	ee 0f       	add	r30, r30
    4158:	ff 1f       	adc	r31, r31
    415a:	e2 0d       	add	r30, r2
    415c:	f3 1d       	adc	r31, r3
    415e:	53 e0       	ldi	r21, 0x03	; 3
    4160:	ee 0f       	add	r30, r30
    4162:	ff 1f       	adc	r31, r31
    4164:	5a 95       	dec	r21
    4166:	e1 f7       	brne	.-8      	; 0x4160 <mc_arc_nonblock+0x288>
    4168:	e5 57       	subi	r30, 0x75	; 117
    416a:	fb 4d       	sbci	r31, 0xDB	; 219
    416c:	21 a1       	ldd	r18, Z+33	; 0x21
    416e:	32 a1       	ldd	r19, Z+34	; 0x22
    4170:	43 a1       	ldd	r20, Z+35	; 0x23
    4172:	54 a1       	ldd	r21, Z+36	; 0x24
    4174:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    4178:	7b 01       	movw	r14, r22
    417a:	8c 01       	movw	r16, r24
    417c:	c6 01       	movw	r24, r12
    417e:	b5 01       	movw	r22, r10
    4180:	2d 81       	ldd	r18, Y+5	; 0x05
    4182:	3e 81       	ldd	r19, Y+6	; 0x06
    4184:	4f 81       	ldd	r20, Y+7	; 0x07
    4186:	58 85       	ldd	r21, Y+8	; 0x08
    4188:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    418c:	9b 01       	movw	r18, r22
    418e:	ac 01       	movw	r20, r24
    4190:	c8 01       	movw	r24, r16
    4192:	b7 01       	movw	r22, r14
    4194:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    4198:	60 93 1c 25 	sts	0x251C, r22
    419c:	70 93 1d 25 	sts	0x251D, r23
    41a0:	80 93 1e 25 	sts	0x251E, r24
    41a4:	90 93 1f 25 	sts	0x251F, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
    41a8:	e8 a1       	ldd	r30, Y+32	; 0x20
    41aa:	f9 a1       	ldd	r31, Y+33	; 0x21
    41ac:	ee 0f       	add	r30, r30
    41ae:	ff 1f       	adc	r31, r31
    41b0:	ee 0f       	add	r30, r30
    41b2:	ff 1f       	adc	r31, r31
    41b4:	8f 01       	movw	r16, r30
    41b6:	05 50       	subi	r16, 0x05	; 5
    41b8:	1b 4d       	sbci	r17, 0xDB	; 219
    41ba:	e0 58       	subi	r30, 0x80	; 128
    41bc:	fe 4d       	sbci	r31, 0xDE	; 222
    41be:	61 81       	ldd	r22, Z+1	; 0x01
    41c0:	72 81       	ldd	r23, Z+2	; 0x02
    41c2:	83 81       	ldd	r24, Z+3	; 0x03
    41c4:	94 81       	ldd	r25, Z+4	; 0x04
    41c6:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    41ca:	20 91 dc 24 	lds	r18, 0x24DC
    41ce:	30 91 dd 24 	lds	r19, 0x24DD
    41d2:	40 91 de 24 	lds	r20, 0x24DE
    41d6:	50 91 df 24 	lds	r21, 0x24DF
    41da:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    41de:	d8 01       	movw	r26, r16
    41e0:	1d 96       	adiw	r26, 0x0d	; 13
    41e2:	6d 93       	st	X+, r22
    41e4:	7d 93       	st	X+, r23
    41e6:	8d 93       	st	X+, r24
    41e8:	9c 93       	st	X, r25
    41ea:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	80 93 fb 24 	sts	0x24FB, r24
	return (mc_arc_continuation());
    41f2:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <mc_arc_continuation>
    41f6:	9c 01       	movw	r18, r24
}
    41f8:	c9 01       	movw	r24, r18
    41fa:	28 96       	adiw	r28, 0x08	; 8
    41fc:	cd bf       	out	0x3d, r28	; 61
    41fe:	de bf       	out	0x3e, r29	; 62
    4200:	cf 91       	pop	r28
    4202:	df 91       	pop	r29
    4204:	1f 91       	pop	r17
    4206:	0f 91       	pop	r16
    4208:	ff 90       	pop	r15
    420a:	ef 90       	pop	r14
    420c:	df 90       	pop	r13
    420e:	cf 90       	pop	r12
    4210:	bf 90       	pop	r11
    4212:	af 90       	pop	r10
    4214:	9f 90       	pop	r9
    4216:	8f 90       	pop	r8
    4218:	7f 90       	pop	r7
    421a:	6f 90       	pop	r6
    421c:	5f 90       	pop	r5
    421e:	4f 90       	pop	r4
    4220:	3f 90       	pop	r3
    4222:	2f 90       	pop	r2
    4224:	08 95       	ret

00004226 <mc_arc>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    4226:	2f 92       	push	r2
    4228:	3f 92       	push	r3
    422a:	4f 92       	push	r4
    422c:	5f 92       	push	r5
    422e:	6f 92       	push	r6
    4230:	7f 92       	push	r7
    4232:	8f 92       	push	r8
    4234:	9f 92       	push	r9
    4236:	af 92       	push	r10
    4238:	bf 92       	push	r11
    423a:	cf 92       	push	r12
    423c:	df 92       	push	r13
    423e:	ef 92       	push	r14
    4240:	ff 92       	push	r15
    4242:	0f 93       	push	r16
    4244:	1f 93       	push	r17
    4246:	df 93       	push	r29
    4248:	cf 93       	push	r28
    424a:	cd b7       	in	r28, 0x3d	; 61
    424c:	de b7       	in	r29, 0x3e	; 62
    424e:	28 97       	sbiw	r28, 0x08	; 8
    4250:	cd bf       	out	0x3d, r28	; 61
    4252:	de bf       	out	0x3e, r29	; 62
    4254:	69 83       	std	Y+1, r22	; 0x01
    4256:	7a 83       	std	Y+2, r23	; 0x02
    4258:	8b 83       	std	Y+3, r24	; 0x03
    425a:	9c 83       	std	Y+4, r25	; 0x04
    425c:	29 01       	movw	r4, r18
    425e:	3a 01       	movw	r6, r20
    4260:	ed 82       	std	Y+5, r14	; 0x05
    4262:	fe 82       	std	Y+6, r15	; 0x06
    4264:	0f 83       	std	Y+7, r16	; 0x07
    4266:	18 87       	std	Y+8, r17	; 0x08
    4268:	2e 8c       	ldd	r2, Y+30	; 0x1e
    426a:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    426c:	60 93 20 25 	sts	0x2520, r22
    4270:	70 93 21 25 	sts	0x2521, r23
    4274:	80 93 22 25 	sts	0x2522, r24
    4278:	90 93 23 25 	sts	0x2523, r25
	ma.radius = radius;
    427c:	e0 92 24 25 	sts	0x2524, r14
    4280:	f0 92 25 25 	sts	0x2525, r15
    4284:	00 93 26 25 	sts	0x2526, r16
    4288:	10 93 27 25 	sts	0x2527, r17
	ma.angular_travel = angular_travel;
    428c:	20 93 34 25 	sts	0x2534, r18
    4290:	30 93 35 25 	sts	0x2535, r19
    4294:	40 93 36 25 	sts	0x2536, r20
    4298:	50 93 37 25 	sts	0x2537, r21
	ma.linear_travel = linear_travel;
    429c:	a0 92 38 25 	sts	0x2538, r10
    42a0:	b0 92 39 25 	sts	0x2539, r11
    42a4:	c0 92 3a 25 	sts	0x253A, r12
    42a8:	d0 92 3b 25 	sts	0x253B, r13
	ma.feed_rate = feed_rate;
    42ac:	8a a1       	ldd	r24, Y+34	; 0x22
    42ae:	9b a1       	ldd	r25, Y+35	; 0x23
    42b0:	ac a1       	ldd	r26, Y+36	; 0x24
    42b2:	bd a1       	ldd	r27, Y+37	; 0x25
    42b4:	80 93 28 25 	sts	0x2528, r24
    42b8:	90 93 29 25 	sts	0x2529, r25
    42bc:	a0 93 2a 25 	sts	0x252A, r26
    42c0:	b0 93 2b 25 	sts	0x252B, r27
	ma.invert_feed_rate = invert_feed_rate;
    42c4:	ae a1       	ldd	r26, Y+38	; 0x26
    42c6:	bf a1       	ldd	r27, Y+39	; 0x27
    42c8:	a0 93 00 25 	sts	0x2500, r26
    42cc:	b0 93 01 25 	sts	0x2501, r27
	ma.axis_1 = axis_1;
    42d0:	80 92 02 25 	sts	0x2502, r8
    42d4:	90 92 03 25 	sts	0x2503, r9
	ma.axis_2 = axis_2;
    42d8:	20 92 04 25 	sts	0x2504, r2
    42dc:	30 92 05 25 	sts	0x2505, r3
	ma.axis_linear = axis_linear;
    42e0:	e8 a1       	ldd	r30, Y+32	; 0x20
    42e2:	f9 a1       	ldd	r31, Y+33	; 0x21
    42e4:	e0 93 06 25 	sts	0x2506, r30
    42e8:	f0 93 07 25 	sts	0x2507, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    42ec:	ca 01       	movw	r24, r20
    42ee:	b9 01       	movw	r22, r18
    42f0:	a8 01       	movw	r20, r16
    42f2:	97 01       	movw	r18, r14
    42f4:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    42f8:	7b 01       	movw	r14, r22
    42fa:	8c 01       	movw	r16, r24
    42fc:	c6 01       	movw	r24, r12
    42fe:	b5 01       	movw	r22, r10
    4300:	0e 94 1a 43 	call	0x8634	; 0x8634 <__fixsfsi>
    4304:	97 ff       	sbrs	r25, 7
    4306:	07 c0       	rjmp	.+14     	; 0x4316 <mc_arc+0xf0>
    4308:	90 95       	com	r25
    430a:	80 95       	com	r24
    430c:	70 95       	com	r23
    430e:	61 95       	neg	r22
    4310:	7f 4f       	sbci	r23, 0xFF	; 255
    4312:	8f 4f       	sbci	r24, 0xFF	; 255
    4314:	9f 4f       	sbci	r25, 0xFF	; 255
    4316:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    431a:	9b 01       	movw	r18, r22
    431c:	ac 01       	movw	r20, r24
    431e:	c8 01       	movw	r24, r16
    4320:	b7 01       	movw	r22, r14
    4322:	0e 94 a8 44 	call	0x8950	; 0x8950 <hypot>
    4326:	7b 01       	movw	r14, r22
    4328:	8c 01       	movw	r16, r24
    432a:	60 93 14 25 	sts	0x2514, r22
    432e:	70 93 15 25 	sts	0x2515, r23
    4332:	80 93 16 25 	sts	0x2516, r24
    4336:	90 93 17 25 	sts	0x2517, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    433a:	2a e0       	ldi	r18, 0x0A	; 10
    433c:	37 ed       	ldi	r19, 0xD7	; 215
    433e:	43 e2       	ldi	r20, 0x23	; 35
    4340:	5c e3       	ldi	r21, 0x3C	; 60
    4342:	0e 94 ab 42 	call	0x8556	; 0x8556 <__cmpsf2>
    4346:	88 23       	and	r24, r24
    4348:	1c f4       	brge	.+6      	; 0x4350 <mc_arc+0x12a>
    434a:	2f e0       	ldi	r18, 0x0F	; 15
    434c:	30 e0       	ldi	r19, 0x00	; 0
    434e:	c7 c1       	rjmp	.+910    	; 0x46de <mc_arc+0x4b8>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    4350:	c8 01       	movw	r24, r16
    4352:	b7 01       	movw	r22, r14
    4354:	20 91 8d 24 	lds	r18, 0x248D
    4358:	30 91 8e 24 	lds	r19, 0x248E
    435c:	40 91 8f 24 	lds	r20, 0x248F
    4360:	50 91 90 24 	lds	r21, 0x2490
    4364:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    4368:	0e 94 98 42 	call	0x8530	; 0x8530 <ceil>
    436c:	0e 94 1a 43 	call	0x8634	; 0x8634 <__fixsfsi>
    4370:	8b 01       	movw	r16, r22
    4372:	60 93 fc 24 	sts	0x24FC, r22
    4376:	70 93 fd 24 	sts	0x24FD, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    437a:	2e a1       	ldd	r18, Y+38	; 0x26
    437c:	3f a1       	ldd	r19, Y+39	; 0x27
    437e:	23 2b       	or	r18, r19
    4380:	b9 f0       	breq	.+46     	; 0x43b0 <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    4382:	b8 01       	movw	r22, r16
    4384:	88 27       	eor	r24, r24
    4386:	77 fd       	sbrc	r23, 7
    4388:	80 95       	com	r24
    438a:	98 2f       	mov	r25, r24
    438c:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    4390:	9b 01       	movw	r18, r22
    4392:	ac 01       	movw	r20, r24
    4394:	6a a1       	ldd	r22, Y+34	; 0x22
    4396:	7b a1       	ldd	r23, Y+35	; 0x23
    4398:	8c a1       	ldd	r24, Y+36	; 0x24
    439a:	9d a1       	ldd	r25, Y+37	; 0x25
    439c:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    43a0:	60 93 28 25 	sts	0x2528, r22
    43a4:	70 93 29 25 	sts	0x2529, r23
    43a8:	80 93 2a 25 	sts	0x252A, r24
    43ac:	90 93 2b 25 	sts	0x252B, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    43b0:	b8 01       	movw	r22, r16
    43b2:	88 27       	eor	r24, r24
    43b4:	77 fd       	sbrc	r23, 7
    43b6:	80 95       	com	r24
    43b8:	98 2f       	mov	r25, r24
    43ba:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    43be:	7b 01       	movw	r14, r22
    43c0:	8c 01       	movw	r16, r24
    43c2:	c3 01       	movw	r24, r6
    43c4:	b2 01       	movw	r22, r4
    43c6:	a8 01       	movw	r20, r16
    43c8:	97 01       	movw	r18, r14
    43ca:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    43ce:	60 93 2c 25 	sts	0x252C, r22
    43d2:	70 93 2d 25 	sts	0x252D, r23
    43d6:	80 93 2e 25 	sts	0x252E, r24
    43da:	90 93 2f 25 	sts	0x252F, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    43de:	c6 01       	movw	r24, r12
    43e0:	b5 01       	movw	r22, r10
    43e2:	a8 01       	movw	r20, r16
    43e4:	97 01       	movw	r18, r14
    43e6:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    43ea:	60 93 30 25 	sts	0x2530, r22
    43ee:	70 93 31 25 	sts	0x2531, r23
    43f2:	80 93 32 25 	sts	0x2532, r24
    43f6:	90 93 33 25 	sts	0x2533, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    43fa:	69 81       	ldd	r22, Y+1	; 0x01
    43fc:	7a 81       	ldd	r23, Y+2	; 0x02
    43fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4400:	9c 81       	ldd	r25, Y+4	; 0x04
    4402:	0e 94 d0 45 	call	0x8ba0	; 0x8ba0 <sin>
    4406:	5b 01       	movw	r10, r22
    4408:	6c 01       	movw	r12, r24
    440a:	f4 01       	movw	r30, r8
    440c:	ee 0f       	add	r30, r30
    440e:	ff 1f       	adc	r31, r31
    4410:	ee 0f       	add	r30, r30
    4412:	ff 1f       	adc	r31, r31
    4414:	e0 58       	subi	r30, 0x80	; 128
    4416:	fe 4d       	sbci	r31, 0xDE	; 222
    4418:	61 81       	ldd	r22, Z+1	; 0x01
    441a:	72 81       	ldd	r23, Z+2	; 0x02
    441c:	83 81       	ldd	r24, Z+3	; 0x03
    441e:	94 81       	ldd	r25, Z+4	; 0x04
    4420:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    4424:	f4 01       	movw	r30, r8
    4426:	ee 0f       	add	r30, r30
    4428:	ff 1f       	adc	r31, r31
    442a:	e8 0d       	add	r30, r8
    442c:	f9 1d       	adc	r31, r9
    442e:	13 e0       	ldi	r17, 0x03	; 3
    4430:	ee 0f       	add	r30, r30
    4432:	ff 1f       	adc	r31, r31
    4434:	1a 95       	dec	r17
    4436:	e1 f7       	brne	.-8      	; 0x4430 <mc_arc+0x20a>
    4438:	e5 57       	subi	r30, 0x75	; 117
    443a:	fb 4d       	sbci	r31, 0xDB	; 219
    443c:	21 a1       	ldd	r18, Z+33	; 0x21
    443e:	32 a1       	ldd	r19, Z+34	; 0x22
    4440:	43 a1       	ldd	r20, Z+35	; 0x23
    4442:	54 a1       	ldd	r21, Z+36	; 0x24
    4444:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    4448:	7b 01       	movw	r14, r22
    444a:	8c 01       	movw	r16, r24
    444c:	c6 01       	movw	r24, r12
    444e:	b5 01       	movw	r22, r10
    4450:	2d 81       	ldd	r18, Y+5	; 0x05
    4452:	3e 81       	ldd	r19, Y+6	; 0x06
    4454:	4f 81       	ldd	r20, Y+7	; 0x07
    4456:	58 85       	ldd	r21, Y+8	; 0x08
    4458:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    445c:	9b 01       	movw	r18, r22
    445e:	ac 01       	movw	r20, r24
    4460:	c8 01       	movw	r24, r16
    4462:	b7 01       	movw	r22, r14
    4464:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    4468:	60 93 18 25 	sts	0x2518, r22
    446c:	70 93 19 25 	sts	0x2519, r23
    4470:	80 93 1a 25 	sts	0x251A, r24
    4474:	90 93 1b 25 	sts	0x251B, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    4478:	69 81       	ldd	r22, Y+1	; 0x01
    447a:	7a 81       	ldd	r23, Y+2	; 0x02
    447c:	8b 81       	ldd	r24, Y+3	; 0x03
    447e:	9c 81       	ldd	r25, Y+4	; 0x04
    4480:	0e 94 af 42 	call	0x855e	; 0x855e <cos>
    4484:	5b 01       	movw	r10, r22
    4486:	6c 01       	movw	r12, r24
    4488:	f1 01       	movw	r30, r2
    448a:	ee 0f       	add	r30, r30
    448c:	ff 1f       	adc	r31, r31
    448e:	ee 0f       	add	r30, r30
    4490:	ff 1f       	adc	r31, r31
    4492:	e0 58       	subi	r30, 0x80	; 128
    4494:	fe 4d       	sbci	r31, 0xDE	; 222
    4496:	61 81       	ldd	r22, Z+1	; 0x01
    4498:	72 81       	ldd	r23, Z+2	; 0x02
    449a:	83 81       	ldd	r24, Z+3	; 0x03
    449c:	94 81       	ldd	r25, Z+4	; 0x04
    449e:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    44a2:	f1 01       	movw	r30, r2
    44a4:	ee 0f       	add	r30, r30
    44a6:	ff 1f       	adc	r31, r31
    44a8:	e2 0d       	add	r30, r2
    44aa:	f3 1d       	adc	r31, r3
    44ac:	53 e0       	ldi	r21, 0x03	; 3
    44ae:	ee 0f       	add	r30, r30
    44b0:	ff 1f       	adc	r31, r31
    44b2:	5a 95       	dec	r21
    44b4:	e1 f7       	brne	.-8      	; 0x44ae <mc_arc+0x288>
    44b6:	e5 57       	subi	r30, 0x75	; 117
    44b8:	fb 4d       	sbci	r31, 0xDB	; 219
    44ba:	21 a1       	ldd	r18, Z+33	; 0x21
    44bc:	32 a1       	ldd	r19, Z+34	; 0x22
    44be:	43 a1       	ldd	r20, Z+35	; 0x23
    44c0:	54 a1       	ldd	r21, Z+36	; 0x24
    44c2:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    44c6:	7b 01       	movw	r14, r22
    44c8:	8c 01       	movw	r16, r24
    44ca:	c6 01       	movw	r24, r12
    44cc:	b5 01       	movw	r22, r10
    44ce:	2d 81       	ldd	r18, Y+5	; 0x05
    44d0:	3e 81       	ldd	r19, Y+6	; 0x06
    44d2:	4f 81       	ldd	r20, Y+7	; 0x07
    44d4:	58 85       	ldd	r21, Y+8	; 0x08
    44d6:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    44da:	9b 01       	movw	r18, r22
    44dc:	ac 01       	movw	r20, r24
    44de:	c8 01       	movw	r24, r16
    44e0:	b7 01       	movw	r22, r14
    44e2:	0e 94 0b 42 	call	0x8416	; 0x8416 <__subsf3>
    44e6:	60 93 1c 25 	sts	0x251C, r22
    44ea:	70 93 1d 25 	sts	0x251D, r23
    44ee:	80 93 1e 25 	sts	0x251E, r24
    44f2:	90 93 1f 25 	sts	0x251F, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
    44f6:	e8 a1       	ldd	r30, Y+32	; 0x20
    44f8:	f9 a1       	ldd	r31, Y+33	; 0x21
    44fa:	ee 0f       	add	r30, r30
    44fc:	ff 1f       	adc	r31, r31
    44fe:	ee 0f       	add	r30, r30
    4500:	ff 1f       	adc	r31, r31
    4502:	8f 01       	movw	r16, r30
    4504:	05 50       	subi	r16, 0x05	; 5
    4506:	1b 4d       	sbci	r17, 0xDB	; 219
    4508:	e0 58       	subi	r30, 0x80	; 128
    450a:	fe 4d       	sbci	r31, 0xDE	; 222
    450c:	61 81       	ldd	r22, Z+1	; 0x01
    450e:	72 81       	ldd	r23, Z+2	; 0x02
    4510:	83 81       	ldd	r24, Z+3	; 0x03
    4512:	94 81       	ldd	r25, Z+4	; 0x04
    4514:	0e 94 4d 43 	call	0x869a	; 0x869a <__floatsisf>
    4518:	20 91 dc 24 	lds	r18, 0x24DC
    451c:	30 91 dd 24 	lds	r19, 0x24DD
    4520:	40 91 de 24 	lds	r20, 0x24DE
    4524:	50 91 df 24 	lds	r21, 0x24DF
    4528:	0e 94 b2 42 	call	0x8564	; 0x8564 <__divsf3>
    452c:	d8 01       	movw	r26, r16
    452e:	1d 96       	adiw	r26, 0x0d	; 13
    4530:	6d 93       	st	X+, r22
    4532:	7d 93       	st	X+, r23
    4534:	8d 93       	st	X+, r24
    4536:	9c 93       	st	X, r25
    4538:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    453a:	10 92 fe 24 	sts	0x24FE, r1
    453e:	10 92 ff 24 	sts	0x24FF, r1
    4542:	bf c0       	rjmp	.+382    	; 0x46c2 <mc_arc+0x49c>
		ma.theta += ma.theta_per_segment;
    4544:	60 91 20 25 	lds	r22, 0x2520
    4548:	70 91 21 25 	lds	r23, 0x2521
    454c:	80 91 22 25 	lds	r24, 0x2522
    4550:	90 91 23 25 	lds	r25, 0x2523
    4554:	20 91 2c 25 	lds	r18, 0x252C
    4558:	30 91 2d 25 	lds	r19, 0x252D
    455c:	40 91 2e 25 	lds	r20, 0x252E
    4560:	50 91 2f 25 	lds	r21, 0x252F
    4564:	0e 94 0c 42 	call	0x8418	; 0x8418 <__addsf3>
    4568:	7b 01       	movw	r14, r22
    456a:	8c 01       	movw	r16, r24
    456c:	cb 01       	movw	r24, r22
    456e:	d8 01       	movw	r26, r16
    4570:	80 93 20 25 	sts	0x2520, r24
    4574:	90 93 21 25 	sts	0x2521, r25
    4578:	a0 93 22 25 	sts	0x2522, r26
    457c:	b0 93 23 25 	sts	0x2523, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    4580:	b7 01       	movw	r22, r14
    4582:	c8 01       	movw	r24, r16
    4584:	0e 94 d0 45 	call	0x8ba0	; 0x8ba0 <sin>
    4588:	80 90 24 25 	lds	r8, 0x2524
    458c:	90 90 25 25 	lds	r9, 0x2525
    4590:	a0 90 26 25 	lds	r10, 0x2526
    4594:	b0 90 27 25 	lds	r11, 0x2527
    4598:	c0 90 02 25 	lds	r12, 0x2502
    459c:	d0 90 03 25 	lds	r13, 0x2503
    45a0:	cc 0c       	add	r12, r12
    45a2:	dd 1c       	adc	r13, r13
    45a4:	cc 0c       	add	r12, r12
    45a6:	dd 1c       	adc	r13, r13
    45a8:	eb ef       	ldi	r30, 0xFB	; 251
    45aa:	f4 e2       	ldi	r31, 0x24	; 36
    45ac:	ce 0e       	add	r12, r30
    45ae:	df 1e       	adc	r13, r31
    45b0:	a5 01       	movw	r20, r10
    45b2:	94 01       	movw	r18, r8
    45b4:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    45b8:	9b 01       	movw	r18, r22
    45ba:	ac 01       	movw	r20, r24
    45bc:	60 91 18 25 	lds	r22, 0x2518
    45c0:	70 91 19 25 	lds	r23, 0x2519
    45c4:	80 91 1a 25 	lds	r24, 0x251A
    45c8:	90 91 1b 25 	lds	r25, 0x251B
    45cc:	0e 94 0c 42 	call	0x8418	; 0x8418 <__addsf3>
    45d0:	d6 01       	movw	r26, r12
    45d2:	1d 96       	adiw	r26, 0x0d	; 13
    45d4:	6d 93       	st	X+, r22
    45d6:	7d 93       	st	X+, r23
    45d8:	8d 93       	st	X+, r24
    45da:	9c 93       	st	X, r25
    45dc:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    45de:	b7 01       	movw	r22, r14
    45e0:	c8 01       	movw	r24, r16
    45e2:	0e 94 af 42 	call	0x855e	; 0x855e <cos>
    45e6:	00 91 04 25 	lds	r16, 0x2504
    45ea:	10 91 05 25 	lds	r17, 0x2505
    45ee:	00 0f       	add	r16, r16
    45f0:	11 1f       	adc	r17, r17
    45f2:	00 0f       	add	r16, r16
    45f4:	11 1f       	adc	r17, r17
    45f6:	05 50       	subi	r16, 0x05	; 5
    45f8:	1b 4d       	sbci	r17, 0xDB	; 219
    45fa:	a5 01       	movw	r20, r10
    45fc:	94 01       	movw	r18, r8
    45fe:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    4602:	9b 01       	movw	r18, r22
    4604:	ac 01       	movw	r20, r24
    4606:	60 91 1c 25 	lds	r22, 0x251C
    460a:	70 91 1d 25 	lds	r23, 0x251D
    460e:	80 91 1e 25 	lds	r24, 0x251E
    4612:	90 91 1f 25 	lds	r25, 0x251F
    4616:	0e 94 0c 42 	call	0x8418	; 0x8418 <__addsf3>
    461a:	f8 01       	movw	r30, r16
    461c:	65 87       	std	Z+13, r22	; 0x0d
    461e:	76 87       	std	Z+14, r23	; 0x0e
    4620:	87 87       	std	Z+15, r24	; 0x0f
    4622:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    4624:	00 91 06 25 	lds	r16, 0x2506
    4628:	10 91 07 25 	lds	r17, 0x2507
    462c:	00 0f       	add	r16, r16
    462e:	11 1f       	adc	r17, r17
    4630:	00 0f       	add	r16, r16
    4632:	11 1f       	adc	r17, r17
    4634:	05 50       	subi	r16, 0x05	; 5
    4636:	1b 4d       	sbci	r17, 0xDB	; 219
    4638:	d8 01       	movw	r26, r16
    463a:	1d 96       	adiw	r26, 0x0d	; 13
    463c:	6d 91       	ld	r22, X+
    463e:	7d 91       	ld	r23, X+
    4640:	8d 91       	ld	r24, X+
    4642:	9c 91       	ld	r25, X
    4644:	50 97       	sbiw	r26, 0x10	; 16
    4646:	20 91 30 25 	lds	r18, 0x2530
    464a:	30 91 31 25 	lds	r19, 0x2531
    464e:	40 91 32 25 	lds	r20, 0x2532
    4652:	50 91 33 25 	lds	r21, 0x2533
    4656:	0e 94 0c 42 	call	0x8418	; 0x8418 <__addsf3>
    465a:	f8 01       	movw	r30, r16
    465c:	65 87       	std	Z+13, r22	; 0x0d
    465e:	76 87       	std	Z+14, r23	; 0x0e
    4660:	87 87       	std	Z+15, r24	; 0x0f
    4662:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X_AXIS], 
    4664:	60 91 08 25 	lds	r22, 0x2508
    4668:	70 91 09 25 	lds	r23, 0x2509
    466c:	80 91 0a 25 	lds	r24, 0x250A
    4670:	90 91 0b 25 	lds	r25, 0x250B
    4674:	20 91 0c 25 	lds	r18, 0x250C
    4678:	30 91 0d 25 	lds	r19, 0x250D
    467c:	40 91 0e 25 	lds	r20, 0x250E
    4680:	50 91 0f 25 	lds	r21, 0x250F
    4684:	e0 90 10 25 	lds	r14, 0x2510
    4688:	f0 90 11 25 	lds	r15, 0x2511
    468c:	00 91 12 25 	lds	r16, 0x2512
    4690:	10 91 13 25 	lds	r17, 0x2513
    4694:	a0 90 28 25 	lds	r10, 0x2528
    4698:	b0 90 29 25 	lds	r11, 0x2529
    469c:	c0 90 2a 25 	lds	r12, 0x252A
    46a0:	d0 90 2b 25 	lds	r13, 0x252B
    46a4:	80 90 00 25 	lds	r8, 0x2500
    46a8:	90 90 01 25 	lds	r9, 0x2501
    46ac:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    46b0:	80 91 fe 24 	lds	r24, 0x24FE
    46b4:	90 91 ff 24 	lds	r25, 0x24FF
    46b8:	01 96       	adiw	r24, 0x01	; 1
    46ba:	80 93 fe 24 	sts	0x24FE, r24
    46be:	90 93 ff 24 	sts	0x24FF, r25
    46c2:	20 91 fe 24 	lds	r18, 0x24FE
    46c6:	30 91 ff 24 	lds	r19, 0x24FF
    46ca:	80 91 fc 24 	lds	r24, 0x24FC
    46ce:	90 91 fd 24 	lds	r25, 0x24FD
    46d2:	82 17       	cp	r24, r18
    46d4:	93 07       	cpc	r25, r19
    46d6:	0c f0       	brlt	.+2      	; 0x46da <mc_arc+0x4b4>
    46d8:	35 cf       	rjmp	.-406    	; 0x4544 <mc_arc+0x31e>
    46da:	20 e0       	ldi	r18, 0x00	; 0
    46dc:	30 e0       	ldi	r19, 0x00	; 0
				ma.dtarget[Z_AXIS], 
				ma.feed_rate, 
				ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    46de:	c9 01       	movw	r24, r18
    46e0:	28 96       	adiw	r28, 0x08	; 8
    46e2:	cd bf       	out	0x3d, r28	; 61
    46e4:	de bf       	out	0x3e, r29	; 62
    46e6:	cf 91       	pop	r28
    46e8:	df 91       	pop	r29
    46ea:	1f 91       	pop	r17
    46ec:	0f 91       	pop	r16
    46ee:	ff 90       	pop	r15
    46f0:	ef 90       	pop	r14
    46f2:	df 90       	pop	r13
    46f4:	cf 90       	pop	r12
    46f6:	bf 90       	pop	r11
    46f8:	af 90       	pop	r10
    46fa:	9f 90       	pop	r9
    46fc:	8f 90       	pop	r8
    46fe:	7f 90       	pop	r7
    4700:	6f 90       	pop	r6
    4702:	5f 90       	pop	r5
    4704:	4f 90       	pop	r4
    4706:	3f 90       	pop	r3
    4708:	2f 90       	pop	r2
    470a:	08 95       	ret

0000470c <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    470c:	e0 e6       	ldi	r30, 0x60	; 96
    470e:	f6 e0       	ldi	r31, 0x06	; 6
    4710:	80 e4       	ldi	r24, 0x40	; 64
    4712:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    4714:	80 e8       	ldi	r24, 0x80	; 128
    4716:	81 83       	std	Z+1, r24	; 0x01
}
    4718:	08 95       	ret

0000471a <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    471a:	97 fd       	sbrc	r25, 7
    471c:	05 c0       	rjmp	.+10     	; 0x4728 <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    471e:	80 e8       	ldi	r24, 0x80	; 128
    4720:	e0 e6       	ldi	r30, 0x60	; 96
    4722:	f6 e0       	ldi	r31, 0x06	; 6
    4724:	85 83       	std	Z+5, r24	; 0x05
    4726:	04 c0       	rjmp	.+8      	; 0x4730 <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    4728:	80 e8       	ldi	r24, 0x80	; 128
    472a:	e0 e6       	ldi	r30, 0x60	; 96
    472c:	f6 e0       	ldi	r31, 0x06	; 6
    472e:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    4730:	80 e4       	ldi	r24, 0x40	; 64
    4732:	e0 e6       	ldi	r30, 0x60	; 96
    4734:	f6 e0       	ldi	r31, 0x06	; 6
    4736:	85 83       	std	Z+5, r24	; 0x05
}
    4738:	08 95       	ret

0000473a <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    473a:	80 e4       	ldi	r24, 0x40	; 64
    473c:	e0 e6       	ldi	r30, 0x60	; 96
    473e:	f6 e0       	ldi	r31, 0x06	; 6
    4740:	86 83       	std	Z+6, r24	; 0x06
}
    4742:	08 95       	ret

00004744 <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    4744:	cf 93       	push	r28
    4746:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    4748:	10 92 4c 24 	sts	0x244C, r1
	ax.exec_mutex = FALSE;
    474c:	10 92 4b 24 	sts	0x244B, r1

	ax.a[X_AXIS].port = &X_MOTOR_PORT;				// bind PORTs to structs
    4750:	80 e0       	ldi	r24, 0x00	; 0
    4752:	96 e0       	ldi	r25, 0x06	; 6
    4754:	80 93 5a 24 	sts	0x245A, r24
    4758:	90 93 5b 24 	sts	0x245B, r25
	ax.a[Y_AXIS].port = &Y_MOTOR_PORT;
    475c:	80 ea       	ldi	r24, 0xA0	; 160
    475e:	96 e0       	ldi	r25, 0x06	; 6
    4760:	80 93 69 24 	sts	0x2469, r24
    4764:	90 93 6a 24 	sts	0x246A, r25
	ax.a[Z_AXIS].port = &Z_MOTOR_PORT;
    4768:	80 e8       	ldi	r24, 0x80	; 128
    476a:	96 e0       	ldi	r25, 0x06	; 6
    476c:	80 93 78 24 	sts	0x2478, r24
    4770:	90 93 79 24 	sts	0x2479, r25
	ax.a[A_AXIS].port = &A_MOTOR_PORT;
    4774:	80 e6       	ldi	r24, 0x60	; 96
    4776:	96 e0       	ldi	r25, 0x06	; 6
    4778:	80 93 87 24 	sts	0x2487, r24
    477c:	90 93 88 24 	sts	0x2488, r25

	ax.a[X_AXIS].timer = &X_TIMER;					// bind TIMERs to structs
    4780:	80 e0       	ldi	r24, 0x00	; 0
    4782:	98 e0       	ldi	r25, 0x08	; 8
    4784:	80 93 5c 24 	sts	0x245C, r24
    4788:	90 93 5d 24 	sts	0x245D, r25
	ax.a[Y_AXIS].timer = &Y_TIMER;
    478c:	80 e0       	ldi	r24, 0x00	; 0
    478e:	99 e0       	ldi	r25, 0x09	; 9
    4790:	80 93 6b 24 	sts	0x246B, r24
    4794:	90 93 6c 24 	sts	0x246C, r25
	ax.a[Z_AXIS].timer = &Z_TIMER;
    4798:	80 e0       	ldi	r24, 0x00	; 0
    479a:	9a e0       	ldi	r25, 0x0A	; 10
    479c:	80 93 7a 24 	sts	0x247A, r24
    47a0:	90 93 7b 24 	sts	0x247B, r25
	ax.a[A_AXIS].timer = &A_TIMER;
    47a4:	80 e0       	ldi	r24, 0x00	; 0
    47a6:	9b e0       	ldi	r25, 0x0B	; 11
    47a8:	80 93 89 24 	sts	0x2489, r24
    47ac:	90 93 8a 24 	sts	0x248A, r25
    47b0:	cb e9       	ldi	r28, 0x9B	; 155
    47b2:	d4 e2       	ldi	r29, 0x24	; 36
    47b4:	a9 e5       	ldi	r26, 0x59	; 89
    47b6:	b4 e2       	ldi	r27, 0x24	; 36

	for (uint8_t i=0; i <= A_AXIS; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    47b8:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    47ba:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    47bc:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y_AXIS].timer = &Y_TIMER;
	ax.a[Z_AXIS].timer = &Z_TIMER;
	ax.a[A_AXIS].timer = &A_TIMER;

	for (uint8_t i=0; i <= A_AXIS; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    47be:	88 81       	ld	r24, Y
    47c0:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    47c2:	11 96       	adiw	r26, 0x01	; 1
    47c4:	ed 91       	ld	r30, X+
    47c6:	fc 91       	ld	r31, X
    47c8:	12 97       	sbiw	r26, 0x02	; 2
    47ca:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    47cc:	11 96       	adiw	r26, 0x01	; 1
    47ce:	ed 91       	ld	r30, X+
    47d0:	fc 91       	ld	r31, X
    47d2:	12 97       	sbiw	r26, 0x02	; 2
    47d4:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
    47d6:	11 96       	adiw	r26, 0x01	; 1
    47d8:	ed 91       	ld	r30, X+
    47da:	fc 91       	ld	r31, X
    47dc:	12 97       	sbiw	r26, 0x02	; 2
    47de:	84 81       	ldd	r24, Z+4	; 0x04
    47e0:	88 61       	ori	r24, 0x18	; 24
    47e2:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    47e4:	11 96       	adiw	r26, 0x01	; 1
    47e6:	ed 91       	ld	r30, X+
    47e8:	fc 91       	ld	r31, X
    47ea:	12 97       	sbiw	r26, 0x02	; 2
    47ec:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    47ee:	13 96       	adiw	r26, 0x03	; 3
    47f0:	ed 91       	ld	r30, X+
    47f2:	fc 91       	ld	r31, X
    47f4:	14 97       	sbiw	r26, 0x04	; 4
    47f6:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    47f8:	13 96       	adiw	r26, 0x03	; 3
    47fa:	ed 91       	ld	r30, X+
    47fc:	fc 91       	ld	r31, X
    47fe:	14 97       	sbiw	r26, 0x04	; 4
    4800:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    4802:	13 96       	adiw	r26, 0x03	; 3
    4804:	ed 91       	ld	r30, X+
    4806:	fc 91       	ld	r31, X
    4808:	14 97       	sbiw	r26, 0x04	; 4
    480a:	96 83       	std	Z+6, r25	; 0x06
    480c:	68 96       	adiw	r28, 0x18	; 24
    480e:	1f 96       	adiw	r26, 0x0f	; 15
	ax.a[X_AXIS].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y_AXIS].timer = &Y_TIMER;
	ax.a[Z_AXIS].timer = &Z_TIMER;
	ax.a[A_AXIS].timer = &A_TIMER;

	for (uint8_t i=0; i <= A_AXIS; i++) {
    4810:	84 e2       	ldi	r24, 0x24	; 36
    4812:	cb 3f       	cpi	r28, 0xFB	; 251
    4814:	d8 07       	cpc	r29, r24
    4816:	99 f6       	brne	.-90     	; 0x47be <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    4818:	df 91       	pop	r29
    481a:	cf 91       	pop	r28
    481c:	08 95       	ret

0000481e <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	fc 01       	movw	r30, r24
    4822:	24 e0       	ldi	r18, 0x04	; 4
    4824:	ee 0f       	add	r30, r30
    4826:	ff 1f       	adc	r31, r31
    4828:	2a 95       	dec	r18
    482a:	e1 f7       	brne	.-8      	; 0x4824 <st_set_polarity+0x6>
    482c:	e8 1b       	sub	r30, r24
    482e:	f9 0b       	sbc	r31, r25
    4830:	e5 5b       	subi	r30, 0xB5	; 181
    4832:	fb 4d       	sbci	r31, 0xDB	; 219
    4834:	66 87       	std	Z+14, r22	; 0x0e
}
    4836:	08 95       	ret

00004838 <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X_AXIS].step_counter = 0x00001000;
    4838:	80 e0       	ldi	r24, 0x00	; 0
    483a:	90 e1       	ldi	r25, 0x10	; 16
    483c:	a0 e0       	ldi	r26, 0x00	; 0
    483e:	b0 e0       	ldi	r27, 0x00	; 0
    4840:	80 93 4f 24 	sts	0x244F, r24
    4844:	90 93 50 24 	sts	0x2450, r25
    4848:	a0 93 51 24 	sts	0x2451, r26
    484c:	b0 93 52 24 	sts	0x2452, r27
	ax.a[X_AXIS].timer->PER = 0x1000;					// step rate (period)
    4850:	e0 91 5c 24 	lds	r30, 0x245C
    4854:	f0 91 5d 24 	lds	r31, 0x245D
    4858:	80 e0       	ldi	r24, 0x00	; 0
    485a:	90 e1       	ldi	r25, 0x10	; 16
    485c:	86 a3       	std	Z+38, r24	; 0x26
    485e:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X_AXIS].timer->CTRLA = TC_CLK_ON;				// start clock
    4860:	21 e0       	ldi	r18, 0x01	; 1
    4862:	20 83       	st	Z, r18

	ax.a[Y_AXIS].step_counter = 0x00000800;
    4864:	80 e0       	ldi	r24, 0x00	; 0
    4866:	98 e0       	ldi	r25, 0x08	; 8
    4868:	a0 e0       	ldi	r26, 0x00	; 0
    486a:	b0 e0       	ldi	r27, 0x00	; 0
    486c:	80 93 5e 24 	sts	0x245E, r24
    4870:	90 93 5f 24 	sts	0x245F, r25
    4874:	a0 93 60 24 	sts	0x2460, r26
    4878:	b0 93 61 24 	sts	0x2461, r27
	ax.a[Y_AXIS].timer->PER = 0x2000;
    487c:	e0 91 6b 24 	lds	r30, 0x246B
    4880:	f0 91 6c 24 	lds	r31, 0x246C
    4884:	80 e0       	ldi	r24, 0x00	; 0
    4886:	90 e2       	ldi	r25, 0x20	; 32
    4888:	86 a3       	std	Z+38, r24	; 0x26
    488a:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y_AXIS].timer->CTRLA = TC_CLK_ON;
    488c:	20 83       	st	Z, r18

	ax.a[Z_AXIS].step_counter = 0x00000600;
    488e:	80 e0       	ldi	r24, 0x00	; 0
    4890:	96 e0       	ldi	r25, 0x06	; 6
    4892:	a0 e0       	ldi	r26, 0x00	; 0
    4894:	b0 e0       	ldi	r27, 0x00	; 0
    4896:	80 93 6d 24 	sts	0x246D, r24
    489a:	90 93 6e 24 	sts	0x246E, r25
    489e:	a0 93 6f 24 	sts	0x246F, r26
    48a2:	b0 93 70 24 	sts	0x2470, r27
	ax.a[Z_AXIS].timer->PER = 0x3000;
    48a6:	e0 91 7a 24 	lds	r30, 0x247A
    48aa:	f0 91 7b 24 	lds	r31, 0x247B
    48ae:	80 e0       	ldi	r24, 0x00	; 0
    48b0:	90 e3       	ldi	r25, 0x30	; 48
    48b2:	86 a3       	std	Z+38, r24	; 0x26
    48b4:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z_AXIS].timer->CTRLA = TC_CLK_ON;
    48b6:	20 83       	st	Z, r18

	ax.a[A_AXIS].step_counter = 0x00000400;
    48b8:	80 e0       	ldi	r24, 0x00	; 0
    48ba:	94 e0       	ldi	r25, 0x04	; 4
    48bc:	a0 e0       	ldi	r26, 0x00	; 0
    48be:	b0 e0       	ldi	r27, 0x00	; 0
    48c0:	80 93 7c 24 	sts	0x247C, r24
    48c4:	90 93 7d 24 	sts	0x247D, r25
    48c8:	a0 93 7e 24 	sts	0x247E, r26
    48cc:	b0 93 7f 24 	sts	0x247F, r27
	ax.a[A_AXIS].timer->PER = 0x4000;
    48d0:	e0 91 89 24 	lds	r30, 0x2489
    48d4:	f0 91 8a 24 	lds	r31, 0x248A
    48d8:	80 e0       	ldi	r24, 0x00	; 0
    48da:	90 e4       	ldi	r25, 0x40	; 64
    48dc:	86 a3       	std	Z+38, r24	; 0x26
    48de:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A_AXIS].timer->CTRLA = TC_CLK_ON;
    48e0:	20 83       	st	Z, r18

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    48e2:	ec e4       	ldi	r30, 0x4C	; 76
    48e4:	f4 e2       	ldi	r31, 0x24	; 36
    48e6:	80 81       	ld	r24, Z
    48e8:	8f 60       	ori	r24, 0x0F	; 15
    48ea:	80 83       	st	Z, r24
}
    48ec:	08 95       	ret

000048ee <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    48ee:	f8 94       	cli
	mv_flush();									// flush the move buffer
    48f0:	0e 94 49 31 	call	0x6292	; 0x6292 <mv_flush>
	sei();
    48f4:	78 94       	sei
}
    48f6:	08 95       	ret

000048f8 <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    48f8:	f8 94       	cli
	ax.a[X_AXIS].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    48fa:	e0 91 5c 24 	lds	r30, 0x245C
    48fe:	f0 91 5d 24 	lds	r31, 0x245D
    4902:	10 82       	st	Z, r1
	ax.a[Y_AXIS].timer->CTRLA = TC_CLK_OFF;
    4904:	e0 91 6b 24 	lds	r30, 0x246B
    4908:	f0 91 6c 24 	lds	r31, 0x246C
    490c:	10 82       	st	Z, r1
	ax.a[Z_AXIS].timer->CTRLA = TC_CLK_OFF;
    490e:	e0 91 7a 24 	lds	r30, 0x247A
    4912:	f0 91 7b 24 	lds	r31, 0x247B
    4916:	10 82       	st	Z, r1
	ax.a[A_AXIS].timer->CTRLA = TC_CLK_OFF;
    4918:	e0 91 89 24 	lds	r30, 0x2489
    491c:	f0 91 8a 24 	lds	r31, 0x248A
    4920:	10 82       	st	Z, r1
	
	mv_flush();									// flush the move buffer
    4922:	0e 94 49 31 	call	0x6292	; 0x6292 <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    4926:	10 92 4c 24 	sts	0x244C, r1
	sei();
    492a:	78 94       	sei
}
    492c:	08 95       	ret

0000492e <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    492e:	cf 93       	push	r28
    4930:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    4932:	80 91 4b 24 	lds	r24, 0x244B
    4936:	88 23       	and	r24, r24
    4938:	09 f0       	breq	.+2      	; 0x493c <st_execute_move+0xe>
    493a:	b6 c0       	rjmp	.+364    	; 0x4aa8 <st_execute_move+0x17a>
		return;
	}
	ax.exec_mutex = TRUE;
    493c:	81 e0       	ldi	r24, 0x01	; 1
    493e:	80 93 4b 24 	sts	0x244B, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    4942:	80 91 4c 24 	lds	r24, 0x244C
    4946:	88 23       	and	r24, r24
    4948:	09 f0       	breq	.+2      	; 0x494c <st_execute_move+0x1e>
    494a:	ac c0       	rjmp	.+344    	; 0x4aa4 <st_execute_move+0x176>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    494c:	0e 94 06 31 	call	0x620c	; 0x620c <mv_dequeue_move_buffer>
    4950:	80 93 4d 24 	sts	0x244D, r24
    4954:	90 93 4e 24 	sts	0x244E, r25
    4958:	89 2b       	or	r24, r25
    495a:	09 f4       	brne	.+2      	; 0x495e <st_execute_move+0x30>
    495c:	a3 c0       	rjmp	.+326    	; 0x4aa4 <st_execute_move+0x176>
		ax.exec_mutex = FALSE;
		return;
    495e:	cf e4       	ldi	r28, 0x4F	; 79
    4960:	d4 e2       	ldi	r29, 0x24	; 36
    4962:	20 e0       	ldi	r18, 0x00	; 0
    4964:	30 e0       	ldi	r19, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4966:	54 e0       	ldi	r21, 0x04	; 4
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
			continue;
		}
		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4968:	42 e0       	ldi	r20, 0x02	; 2
	_st_fake_move();
	return;
#endif

	for (i = X_AXIS; i <= Z_AXIS; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    496a:	ed 85       	ldd	r30, Y+13	; 0x0d
    496c:	fe 85       	ldd	r31, Y+14	; 0x0e
    496e:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    4970:	e0 91 4d 24 	lds	r30, 0x244D
    4974:	f0 91 4e 24 	lds	r31, 0x244E
    4978:	c9 01       	movw	r24, r18
    497a:	73 e0       	ldi	r23, 0x03	; 3
    497c:	88 0f       	add	r24, r24
    497e:	99 1f       	adc	r25, r25
    4980:	7a 95       	dec	r23
    4982:	e1 f7       	brne	.-8      	; 0x497c <st_execute_move+0x4e>
    4984:	82 0f       	add	r24, r18
    4986:	93 1f       	adc	r25, r19
    4988:	e8 0f       	add	r30, r24
    498a:	f9 1f       	adc	r31, r25
    498c:	80 81       	ld	r24, Z
    498e:	91 81       	ldd	r25, Z+1	; 0x01
    4990:	a2 81       	ldd	r26, Z+2	; 0x02
    4992:	b3 81       	ldd	r27, Z+3	; 0x03
    4994:	00 97       	sbiw	r24, 0x00	; 0
    4996:	a1 05       	cpc	r26, r1
    4998:	b1 05       	cpc	r27, r1
    499a:	b1 f1       	breq	.+108    	; 0x4a08 <st_execute_move+0xda>
			continue;
		}
		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    499c:	90 85       	ldd	r25, Z+8	; 0x08
    499e:	8a 85       	ldd	r24, Y+10	; 0x0a
    49a0:	eb 85       	ldd	r30, Y+11	; 0x0b
    49a2:	fc 85       	ldd	r31, Y+12	; 0x0c
    49a4:	98 17       	cp	r25, r24
    49a6:	11 f0       	breq	.+4      	; 0x49ac <st_execute_move+0x7e>
    49a8:	45 83       	std	Z+5, r20	; 0x05
    49aa:	01 c0       	rjmp	.+2      	; 0x49ae <st_execute_move+0x80>
    49ac:	46 83       	std	Z+6, r20	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    49ae:	e0 91 4d 24 	lds	r30, 0x244D
    49b2:	f0 91 4e 24 	lds	r31, 0x244E
    49b6:	c9 01       	movw	r24, r18
    49b8:	63 e0       	ldi	r22, 0x03	; 3
    49ba:	88 0f       	add	r24, r24
    49bc:	99 1f       	adc	r25, r25
    49be:	6a 95       	dec	r22
    49c0:	e1 f7       	brne	.-8      	; 0x49ba <st_execute_move+0x8c>
    49c2:	82 0f       	add	r24, r18
    49c4:	93 1f       	adc	r25, r19
    49c6:	e8 0f       	add	r30, r24
    49c8:	f9 1f       	adc	r31, r25
    49ca:	80 81       	ld	r24, Z
    49cc:	91 81       	ldd	r25, Z+1	; 0x01
    49ce:	a2 81       	ldd	r26, Z+2	; 0x02
    49d0:	b3 81       	ldd	r27, Z+3	; 0x03
    49d2:	88 83       	st	Y, r24
    49d4:	99 83       	std	Y+1, r25	; 0x01
    49d6:	aa 83       	std	Y+2, r26	; 0x02
    49d8:	bb 83       	std	Y+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    49da:	86 81       	ldd	r24, Z+6	; 0x06
    49dc:	97 81       	ldd	r25, Z+7	; 0x07
    49de:	8e 83       	std	Y+6, r24	; 0x06
    49e0:	9f 83       	std	Y+7, r25	; 0x07
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    49e2:	86 81       	ldd	r24, Z+6	; 0x06
    49e4:	97 81       	ldd	r25, Z+7	; 0x07
    49e6:	88 87       	std	Y+8, r24	; 0x08
    49e8:	99 87       	std	Y+9, r25	; 0x09
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    49ea:	84 81       	ldd	r24, Z+4	; 0x04
    49ec:	95 81       	ldd	r25, Z+5	; 0x05
    49ee:	8c 83       	std	Y+4, r24	; 0x04
    49f0:	9d 83       	std	Y+5, r25	; 0x05
		ax.a[i].timer->PER = ax.p->a[i].period;
    49f2:	ad 85       	ldd	r26, Y+13	; 0x0d
    49f4:	be 85       	ldd	r27, Y+14	; 0x0e
    49f6:	84 81       	ldd	r24, Z+4	; 0x04
    49f8:	95 81       	ldd	r25, Z+5	; 0x05
    49fa:	96 96       	adiw	r26, 0x26	; 38
    49fc:	8d 93       	st	X+, r24
    49fe:	9c 93       	st	X, r25
    4a00:	97 97       	sbiw	r26, 0x27	; 39
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4a02:	eb 85       	ldd	r30, Y+11	; 0x0b
    4a04:	fc 85       	ldd	r31, Y+12	; 0x0c
    4a06:	56 83       	std	Z+6, r21	; 0x06
    4a08:	2f 5f       	subi	r18, 0xFF	; 255
    4a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a0c:	2f 96       	adiw	r28, 0x0f	; 15
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i = X_AXIS; i <= Z_AXIS; i++) {
    4a0e:	23 30       	cpi	r18, 0x03	; 3
    4a10:	31 05       	cpc	r19, r1
    4a12:	09 f0       	breq	.+2      	; 0x4a16 <st_execute_move+0xe8>
    4a14:	aa cf       	rjmp	.-172    	; 0x496a <st_execute_move+0x3c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4a16:	10 92 4c 24 	sts	0x244C, r1
	if (ax.a[X_AXIS].step_counter) { 
    4a1a:	80 91 4f 24 	lds	r24, 0x244F
    4a1e:	90 91 50 24 	lds	r25, 0x2450
    4a22:	a0 91 51 24 	lds	r26, 0x2451
    4a26:	b0 91 52 24 	lds	r27, 0x2452
    4a2a:	00 97       	sbiw	r24, 0x00	; 0
    4a2c:	a1 05       	cpc	r26, r1
    4a2e:	b1 05       	cpc	r27, r1
    4a30:	59 f0       	breq	.+22     	; 0x4a48 <st_execute_move+0x11a>
		ax.a[X_AXIS].timer->CTRLA = TC_CLK_ON;
    4a32:	e0 91 5c 24 	lds	r30, 0x245C
    4a36:	f0 91 5d 24 	lds	r31, 0x245D
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
    4a3c:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4a3e:	80 91 4c 24 	lds	r24, 0x244C
    4a42:	88 60       	ori	r24, 0x08	; 8
    4a44:	80 93 4c 24 	sts	0x244C, r24
	}
	if (ax.a[Y_AXIS].step_counter) {
    4a48:	80 91 5e 24 	lds	r24, 0x245E
    4a4c:	90 91 5f 24 	lds	r25, 0x245F
    4a50:	a0 91 60 24 	lds	r26, 0x2460
    4a54:	b0 91 61 24 	lds	r27, 0x2461
    4a58:	00 97       	sbiw	r24, 0x00	; 0
    4a5a:	a1 05       	cpc	r26, r1
    4a5c:	b1 05       	cpc	r27, r1
    4a5e:	59 f0       	breq	.+22     	; 0x4a76 <st_execute_move+0x148>
		ax.a[Y_AXIS].timer->CTRLA = TC_CLK_ON;
    4a60:	e0 91 6b 24 	lds	r30, 0x246B
    4a64:	f0 91 6c 24 	lds	r31, 0x246C
    4a68:	81 e0       	ldi	r24, 0x01	; 1
    4a6a:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4a6c:	80 91 4c 24 	lds	r24, 0x244C
    4a70:	84 60       	ori	r24, 0x04	; 4
    4a72:	80 93 4c 24 	sts	0x244C, r24
	}
	if (ax.a[Z_AXIS].step_counter) {
    4a76:	80 91 6d 24 	lds	r24, 0x246D
    4a7a:	90 91 6e 24 	lds	r25, 0x246E
    4a7e:	a0 91 6f 24 	lds	r26, 0x246F
    4a82:	b0 91 70 24 	lds	r27, 0x2470
    4a86:	00 97       	sbiw	r24, 0x00	; 0
    4a88:	a1 05       	cpc	r26, r1
    4a8a:	b1 05       	cpc	r27, r1
    4a8c:	59 f0       	breq	.+22     	; 0x4aa4 <st_execute_move+0x176>
		ax.a[Z_AXIS].timer->CTRLA = TC_CLK_ON;
    4a8e:	e0 91 7a 24 	lds	r30, 0x247A
    4a92:	f0 91 7b 24 	lds	r31, 0x247B
    4a96:	81 e0       	ldi	r24, 0x01	; 1
    4a98:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4a9a:	80 91 4c 24 	lds	r24, 0x244C
    4a9e:	82 60       	ori	r24, 0x02	; 2
    4aa0:	80 93 4c 24 	sts	0x244C, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4aa4:	10 92 4b 24 	sts	0x244B, r1
}
    4aa8:	df 91       	pop	r29
    4aaa:	cf 91       	pop	r28
    4aac:	08 95       	ret

00004aae <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4aae:	10 92 4b 24 	sts	0x244B, r1
	st_execute_move();		// recursively empty the move queue
    4ab2:	0e 94 97 24 	call	0x492e	; 0x492e <st_execute_move>
	return;
}
    4ab6:	08 95       	ret

00004ab8 <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    4ab8:	1f 92       	push	r1
    4aba:	0f 92       	push	r0
    4abc:	0f b6       	in	r0, 0x3f	; 63
    4abe:	0f 92       	push	r0
    4ac0:	0b b6       	in	r0, 0x3b	; 59
    4ac2:	0f 92       	push	r0
    4ac4:	11 24       	eor	r1, r1
    4ac6:	2f 93       	push	r18
    4ac8:	3f 93       	push	r19
    4aca:	4f 93       	push	r20
    4acc:	5f 93       	push	r21
    4ace:	6f 93       	push	r22
    4ad0:	7f 93       	push	r23
    4ad2:	8f 93       	push	r24
    4ad4:	9f 93       	push	r25
    4ad6:	af 93       	push	r26
    4ad8:	bf 93       	push	r27
    4ada:	ef 93       	push	r30
    4adc:	ff 93       	push	r31
	if (--ax.a[A_AXIS].postscale_counter != 0) {
    4ade:	80 91 84 24 	lds	r24, 0x2484
    4ae2:	90 91 85 24 	lds	r25, 0x2485
    4ae6:	01 97       	sbiw	r24, 0x01	; 1
    4ae8:	80 93 84 24 	sts	0x2484, r24
    4aec:	90 93 85 24 	sts	0x2485, r25
    4af0:	89 2b       	or	r24, r25
    4af2:	a1 f5       	brne	.+104    	; 0x4b5c <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4af4:	e0 e6       	ldi	r30, 0x60	; 96
    4af6:	f6 e0       	ldi	r31, 0x06	; 6
    4af8:	81 e0       	ldi	r24, 0x01	; 1
    4afa:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A_AXIS].step_counter == 0) {
    4afc:	80 91 7c 24 	lds	r24, 0x247C
    4b00:	90 91 7d 24 	lds	r25, 0x247D
    4b04:	a0 91 7e 24 	lds	r26, 0x247E
    4b08:	b0 91 7f 24 	lds	r27, 0x247F
    4b0c:	01 97       	sbiw	r24, 0x01	; 1
    4b0e:	a1 09       	sbc	r26, r1
    4b10:	b1 09       	sbc	r27, r1
    4b12:	80 93 7c 24 	sts	0x247C, r24
    4b16:	90 93 7d 24 	sts	0x247D, r25
    4b1a:	a0 93 7e 24 	sts	0x247E, r26
    4b1e:	b0 93 7f 24 	sts	0x247F, r27
    4b22:	00 97       	sbiw	r24, 0x00	; 0
    4b24:	a1 05       	cpc	r26, r1
    4b26:	b1 05       	cpc	r27, r1
    4b28:	69 f4       	brne	.+26     	; 0x4b44 <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4b2a:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4b2e:	84 e0       	ldi	r24, 0x04	; 4
    4b30:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4b32:	80 91 4c 24 	lds	r24, 0x244C
    4b36:	8e 7f       	andi	r24, 0xFE	; 254
    4b38:	80 93 4c 24 	sts	0x244C, r24
		if (ax.active_axes == 0) {
    4b3c:	88 23       	and	r24, r24
    4b3e:	11 f4       	brne	.+4      	; 0x4b44 <__vector_108+0x8c>
			st_execute_move();
    4b40:	0e 94 97 24 	call	0x492e	; 0x492e <st_execute_move>
		}
	}
	ax.a[A_AXIS].postscale_counter = ax.a[A_AXIS].postscale_value;
    4b44:	80 91 82 24 	lds	r24, 0x2482
    4b48:	90 91 83 24 	lds	r25, 0x2483
    4b4c:	80 93 84 24 	sts	0x2484, r24
    4b50:	90 93 85 24 	sts	0x2485, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4b54:	81 e0       	ldi	r24, 0x01	; 1
    4b56:	e0 e6       	ldi	r30, 0x60	; 96
    4b58:	f6 e0       	ldi	r31, 0x06	; 6
    4b5a:	86 83       	std	Z+6, r24	; 0x06
}
    4b5c:	ff 91       	pop	r31
    4b5e:	ef 91       	pop	r30
    4b60:	bf 91       	pop	r27
    4b62:	af 91       	pop	r26
    4b64:	9f 91       	pop	r25
    4b66:	8f 91       	pop	r24
    4b68:	7f 91       	pop	r23
    4b6a:	6f 91       	pop	r22
    4b6c:	5f 91       	pop	r21
    4b6e:	4f 91       	pop	r20
    4b70:	3f 91       	pop	r19
    4b72:	2f 91       	pop	r18
    4b74:	0f 90       	pop	r0
    4b76:	0b be       	out	0x3b, r0	; 59
    4b78:	0f 90       	pop	r0
    4b7a:	0f be       	out	0x3f, r0	; 63
    4b7c:	0f 90       	pop	r0
    4b7e:	1f 90       	pop	r1
    4b80:	18 95       	reti

00004b82 <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4b82:	1f 92       	push	r1
    4b84:	0f 92       	push	r0
    4b86:	0f b6       	in	r0, 0x3f	; 63
    4b88:	0f 92       	push	r0
    4b8a:	0b b6       	in	r0, 0x3b	; 59
    4b8c:	0f 92       	push	r0
    4b8e:	11 24       	eor	r1, r1
    4b90:	2f 93       	push	r18
    4b92:	3f 93       	push	r19
    4b94:	4f 93       	push	r20
    4b96:	5f 93       	push	r21
    4b98:	6f 93       	push	r22
    4b9a:	7f 93       	push	r23
    4b9c:	8f 93       	push	r24
    4b9e:	9f 93       	push	r25
    4ba0:	af 93       	push	r26
    4ba2:	bf 93       	push	r27
    4ba4:	ef 93       	push	r30
    4ba6:	ff 93       	push	r31
	if (--ax.a[Z_AXIS].postscale_counter != 0) {
    4ba8:	80 91 75 24 	lds	r24, 0x2475
    4bac:	90 91 76 24 	lds	r25, 0x2476
    4bb0:	01 97       	sbiw	r24, 0x01	; 1
    4bb2:	80 93 75 24 	sts	0x2475, r24
    4bb6:	90 93 76 24 	sts	0x2476, r25
    4bba:	89 2b       	or	r24, r25
    4bbc:	a1 f5       	brne	.+104    	; 0x4c26 <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4bbe:	e0 e8       	ldi	r30, 0x80	; 128
    4bc0:	f6 e0       	ldi	r31, 0x06	; 6
    4bc2:	81 e0       	ldi	r24, 0x01	; 1
    4bc4:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z_AXIS].step_counter == 0) {
    4bc6:	80 91 6d 24 	lds	r24, 0x246D
    4bca:	90 91 6e 24 	lds	r25, 0x246E
    4bce:	a0 91 6f 24 	lds	r26, 0x246F
    4bd2:	b0 91 70 24 	lds	r27, 0x2470
    4bd6:	01 97       	sbiw	r24, 0x01	; 1
    4bd8:	a1 09       	sbc	r26, r1
    4bda:	b1 09       	sbc	r27, r1
    4bdc:	80 93 6d 24 	sts	0x246D, r24
    4be0:	90 93 6e 24 	sts	0x246E, r25
    4be4:	a0 93 6f 24 	sts	0x246F, r26
    4be8:	b0 93 70 24 	sts	0x2470, r27
    4bec:	00 97       	sbiw	r24, 0x00	; 0
    4bee:	a1 05       	cpc	r26, r1
    4bf0:	b1 05       	cpc	r27, r1
    4bf2:	69 f4       	brne	.+26     	; 0x4c0e <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4bf4:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4bf8:	84 e0       	ldi	r24, 0x04	; 4
    4bfa:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4bfc:	80 91 4c 24 	lds	r24, 0x244C
    4c00:	8d 7f       	andi	r24, 0xFD	; 253
    4c02:	80 93 4c 24 	sts	0x244C, r24
		if (ax.active_axes == 0) {
    4c06:	88 23       	and	r24, r24
    4c08:	11 f4       	brne	.+4      	; 0x4c0e <__vector_47+0x8c>
			st_execute_move();
    4c0a:	0e 94 97 24 	call	0x492e	; 0x492e <st_execute_move>
		}
	}
	ax.a[Z_AXIS].postscale_counter = ax.a[Z_AXIS].postscale_value;
    4c0e:	80 91 73 24 	lds	r24, 0x2473
    4c12:	90 91 74 24 	lds	r25, 0x2474
    4c16:	80 93 75 24 	sts	0x2475, r24
    4c1a:	90 93 76 24 	sts	0x2476, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4c1e:	81 e0       	ldi	r24, 0x01	; 1
    4c20:	e0 e8       	ldi	r30, 0x80	; 128
    4c22:	f6 e0       	ldi	r31, 0x06	; 6
    4c24:	86 83       	std	Z+6, r24	; 0x06
}
    4c26:	ff 91       	pop	r31
    4c28:	ef 91       	pop	r30
    4c2a:	bf 91       	pop	r27
    4c2c:	af 91       	pop	r26
    4c2e:	9f 91       	pop	r25
    4c30:	8f 91       	pop	r24
    4c32:	7f 91       	pop	r23
    4c34:	6f 91       	pop	r22
    4c36:	5f 91       	pop	r21
    4c38:	4f 91       	pop	r20
    4c3a:	3f 91       	pop	r19
    4c3c:	2f 91       	pop	r18
    4c3e:	0f 90       	pop	r0
    4c40:	0b be       	out	0x3b, r0	; 59
    4c42:	0f 90       	pop	r0
    4c44:	0f be       	out	0x3f, r0	; 63
    4c46:	0f 90       	pop	r0
    4c48:	1f 90       	pop	r1
    4c4a:	18 95       	reti

00004c4c <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4c4c:	1f 92       	push	r1
    4c4e:	0f 92       	push	r0
    4c50:	0f b6       	in	r0, 0x3f	; 63
    4c52:	0f 92       	push	r0
    4c54:	0b b6       	in	r0, 0x3b	; 59
    4c56:	0f 92       	push	r0
    4c58:	11 24       	eor	r1, r1
    4c5a:	2f 93       	push	r18
    4c5c:	3f 93       	push	r19
    4c5e:	4f 93       	push	r20
    4c60:	5f 93       	push	r21
    4c62:	6f 93       	push	r22
    4c64:	7f 93       	push	r23
    4c66:	8f 93       	push	r24
    4c68:	9f 93       	push	r25
    4c6a:	af 93       	push	r26
    4c6c:	bf 93       	push	r27
    4c6e:	ef 93       	push	r30
    4c70:	ff 93       	push	r31
	if (--ax.a[Y_AXIS].postscale_counter != 0) {
    4c72:	80 91 66 24 	lds	r24, 0x2466
    4c76:	90 91 67 24 	lds	r25, 0x2467
    4c7a:	01 97       	sbiw	r24, 0x01	; 1
    4c7c:	80 93 66 24 	sts	0x2466, r24
    4c80:	90 93 67 24 	sts	0x2467, r25
    4c84:	89 2b       	or	r24, r25
    4c86:	a1 f5       	brne	.+104    	; 0x4cf0 <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4c88:	e0 ea       	ldi	r30, 0xA0	; 160
    4c8a:	f6 e0       	ldi	r31, 0x06	; 6
    4c8c:	81 e0       	ldi	r24, 0x01	; 1
    4c8e:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y_AXIS].step_counter == 0) {
    4c90:	80 91 5e 24 	lds	r24, 0x245E
    4c94:	90 91 5f 24 	lds	r25, 0x245F
    4c98:	a0 91 60 24 	lds	r26, 0x2460
    4c9c:	b0 91 61 24 	lds	r27, 0x2461
    4ca0:	01 97       	sbiw	r24, 0x01	; 1
    4ca2:	a1 09       	sbc	r26, r1
    4ca4:	b1 09       	sbc	r27, r1
    4ca6:	80 93 5e 24 	sts	0x245E, r24
    4caa:	90 93 5f 24 	sts	0x245F, r25
    4cae:	a0 93 60 24 	sts	0x2460, r26
    4cb2:	b0 93 61 24 	sts	0x2461, r27
    4cb6:	00 97       	sbiw	r24, 0x00	; 0
    4cb8:	a1 05       	cpc	r26, r1
    4cba:	b1 05       	cpc	r27, r1
    4cbc:	69 f4       	brne	.+26     	; 0x4cd8 <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4cbe:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4cc2:	84 e0       	ldi	r24, 0x04	; 4
    4cc4:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4cc6:	80 91 4c 24 	lds	r24, 0x244C
    4cca:	8b 7f       	andi	r24, 0xFB	; 251
    4ccc:	80 93 4c 24 	sts	0x244C, r24
		if (ax.active_axes == 0) {
    4cd0:	88 23       	and	r24, r24
    4cd2:	11 f4       	brne	.+4      	; 0x4cd8 <__vector_77+0x8c>
			st_execute_move();
    4cd4:	0e 94 97 24 	call	0x492e	; 0x492e <st_execute_move>
		}
	}
	ax.a[Y_AXIS].postscale_counter = ax.a[Y_AXIS].postscale_value;
    4cd8:	80 91 64 24 	lds	r24, 0x2464
    4cdc:	90 91 65 24 	lds	r25, 0x2465
    4ce0:	80 93 66 24 	sts	0x2466, r24
    4ce4:	90 93 67 24 	sts	0x2467, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4ce8:	81 e0       	ldi	r24, 0x01	; 1
    4cea:	e0 ea       	ldi	r30, 0xA0	; 160
    4cec:	f6 e0       	ldi	r31, 0x06	; 6
    4cee:	86 83       	std	Z+6, r24	; 0x06
}
    4cf0:	ff 91       	pop	r31
    4cf2:	ef 91       	pop	r30
    4cf4:	bf 91       	pop	r27
    4cf6:	af 91       	pop	r26
    4cf8:	9f 91       	pop	r25
    4cfa:	8f 91       	pop	r24
    4cfc:	7f 91       	pop	r23
    4cfe:	6f 91       	pop	r22
    4d00:	5f 91       	pop	r21
    4d02:	4f 91       	pop	r20
    4d04:	3f 91       	pop	r19
    4d06:	2f 91       	pop	r18
    4d08:	0f 90       	pop	r0
    4d0a:	0b be       	out	0x3b, r0	; 59
    4d0c:	0f 90       	pop	r0
    4d0e:	0f be       	out	0x3f, r0	; 63
    4d10:	0f 90       	pop	r0
    4d12:	1f 90       	pop	r1
    4d14:	18 95       	reti

00004d16 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4d16:	1f 92       	push	r1
    4d18:	0f 92       	push	r0
    4d1a:	0f b6       	in	r0, 0x3f	; 63
    4d1c:	0f 92       	push	r0
    4d1e:	0b b6       	in	r0, 0x3b	; 59
    4d20:	0f 92       	push	r0
    4d22:	11 24       	eor	r1, r1
    4d24:	2f 93       	push	r18
    4d26:	3f 93       	push	r19
    4d28:	4f 93       	push	r20
    4d2a:	5f 93       	push	r21
    4d2c:	6f 93       	push	r22
    4d2e:	7f 93       	push	r23
    4d30:	8f 93       	push	r24
    4d32:	9f 93       	push	r25
    4d34:	af 93       	push	r26
    4d36:	bf 93       	push	r27
    4d38:	ef 93       	push	r30
    4d3a:	ff 93       	push	r31
	if (--ax.a[X_AXIS].postscale_counter != 0) {// get out fast, if you need to
    4d3c:	80 91 57 24 	lds	r24, 0x2457
    4d40:	90 91 58 24 	lds	r25, 0x2458
    4d44:	01 97       	sbiw	r24, 0x01	; 1
    4d46:	80 93 57 24 	sts	0x2457, r24
    4d4a:	90 93 58 24 	sts	0x2458, r25
    4d4e:	89 2b       	or	r24, r25
    4d50:	a1 f5       	brne	.+104    	; 0x4dba <__vector_14+0xa4>
		return;
	}
	X_MOTOR_PORT.OUTSET = STEP_BIT_bm;			// turn X step bit on
    4d52:	e0 e0       	ldi	r30, 0x00	; 0
    4d54:	f6 e0       	ldi	r31, 0x06	; 6
    4d56:	81 e0       	ldi	r24, 0x01	; 1
    4d58:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[X_AXIS].step_counter == 0) {		// end-of-move processing
    4d5a:	80 91 4f 24 	lds	r24, 0x244F
    4d5e:	90 91 50 24 	lds	r25, 0x2450
    4d62:	a0 91 51 24 	lds	r26, 0x2451
    4d66:	b0 91 52 24 	lds	r27, 0x2452
    4d6a:	01 97       	sbiw	r24, 0x01	; 1
    4d6c:	a1 09       	sbc	r26, r1
    4d6e:	b1 09       	sbc	r27, r1
    4d70:	80 93 4f 24 	sts	0x244F, r24
    4d74:	90 93 50 24 	sts	0x2450, r25
    4d78:	a0 93 51 24 	sts	0x2451, r26
    4d7c:	b0 93 52 24 	sts	0x2452, r27
    4d80:	00 97       	sbiw	r24, 0x00	; 0
    4d82:	a1 05       	cpc	r26, r1
    4d84:	b1 05       	cpc	r27, r1
    4d86:	69 f4       	brne	.+26     	; 0x4da2 <__vector_14+0x8c>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    4d88:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4d8c:	84 e0       	ldi	r24, 0x04	; 4
    4d8e:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    4d90:	80 91 4c 24 	lds	r24, 0x244C
    4d94:	87 7f       	andi	r24, 0xF7	; 247
    4d96:	80 93 4c 24 	sts	0x244C, r24
		if (ax.active_axes == 0) {				// if all axes are done
    4d9a:	88 23       	and	r24, r24
    4d9c:	11 f4       	brne	.+4      	; 0x4da2 <__vector_14+0x8c>
			st_execute_move();					// ...run the next move
    4d9e:	0e 94 97 24 	call	0x492e	; 0x492e <st_execute_move>
		}
	}
	ax.a[X_AXIS].postscale_counter = ax.a[X_AXIS].postscale_value;// reset post-scaler counter
    4da2:	80 91 55 24 	lds	r24, 0x2455
    4da6:	90 91 56 24 	lds	r25, 0x2456
    4daa:	80 93 57 24 	sts	0x2457, r24
    4dae:	90 93 58 24 	sts	0x2458, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    4db2:	81 e0       	ldi	r24, 0x01	; 1
    4db4:	e0 e0       	ldi	r30, 0x00	; 0
    4db6:	f6 e0       	ldi	r31, 0x06	; 6
    4db8:	86 83       	std	Z+6, r24	; 0x06
}
    4dba:	ff 91       	pop	r31
    4dbc:	ef 91       	pop	r30
    4dbe:	bf 91       	pop	r27
    4dc0:	af 91       	pop	r26
    4dc2:	9f 91       	pop	r25
    4dc4:	8f 91       	pop	r24
    4dc6:	7f 91       	pop	r23
    4dc8:	6f 91       	pop	r22
    4dca:	5f 91       	pop	r21
    4dcc:	4f 91       	pop	r20
    4dce:	3f 91       	pop	r19
    4dd0:	2f 91       	pop	r18
    4dd2:	0f 90       	pop	r0
    4dd4:	0b be       	out	0x3b, r0	; 59
    4dd6:	0f 90       	pop	r0
    4dd8:	0f be       	out	0x3f, r0	; 63
    4dda:	0f 90       	pop	r0
    4ddc:	1f 90       	pop	r1
    4dde:	18 95       	reti

00004de0 <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    4de0:	e0 ea       	ldi	r30, 0xA0	; 160
    4de2:	f0 e0       	ldi	r31, 0x00	; 0
    4de4:	82 81       	ldd	r24, Z+2	; 0x02
    4de6:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    4de8:	98 ed       	ldi	r25, 0xD8	; 216
    4dea:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4dec:	82 83       	std	Z+2, r24	; 0x02
}
    4dee:	08 95       	ret

00004df0 <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    4df0:	e0 ea       	ldi	r30, 0xA0	; 160
    4df2:	f0 e0       	ldi	r31, 0x00	; 0
    4df4:	82 81       	ldd	r24, Z+2	; 0x02
    4df6:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    4df8:	98 ed       	ldi	r25, 0xD8	; 216
    4dfa:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4dfc:	82 83       	std	Z+2, r24	; 0x02
}
    4dfe:	08 95       	ret

00004e00 <xio_null_signal>:
 */

int xio_null_signal(uint8_t sig)
{
	return (TG_NOOP);
}
    4e00:	81 e0       	ldi	r24, 0x01	; 1
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	08 95       	ret

00004e06 <xio_null_line>:
 */

int xio_null_line(char * buf)
{
	return (TG_OK);
}
    4e06:	80 e0       	ldi	r24, 0x00	; 0
    4e08:	90 e0       	ldi	r25, 0x00	; 0
    4e0a:	08 95       	ret

00004e0c <xio_fget_ln>:
 *	dev		XIO device enumeration
 */

int xio_fget_ln(uint8_t dev, char *buf, uint8_t len)
{
	switch (dev) {
    4e0c:	81 30       	cpi	r24, 0x01	; 1
    4e0e:	61 f0       	breq	.+24     	; 0x4e28 <xio_fget_ln+0x1c>
    4e10:	81 30       	cpi	r24, 0x01	; 1
    4e12:	38 f0       	brcs	.+14     	; 0x4e22 <xio_fget_ln+0x16>
    4e14:	82 30       	cpi	r24, 0x02	; 2
    4e16:	69 f0       	breq	.+26     	; 0x4e32 <xio_fget_ln+0x26>
    4e18:	84 30       	cpi	r24, 0x04	; 4
    4e1a:	81 f0       	breq	.+32     	; 0x4e3c <xio_fget_ln+0x30>
    4e1c:	20 e1       	ldi	r18, 0x10	; 16
    4e1e:	30 e0       	ldi	r19, 0x00	; 0
    4e20:	12 c0       	rjmp	.+36     	; 0x4e46 <xio_fget_ln+0x3a>
    4e22:	20 e0       	ldi	r18, 0x00	; 0
    4e24:	30 e0       	ldi	r19, 0x00	; 0
    4e26:	0f c0       	rjmp	.+30     	; 0x4e46 <xio_fget_ln+0x3a>
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): return (xio_usb_readln(buf, len));
    4e28:	cb 01       	movw	r24, r22
    4e2a:	64 2f       	mov	r22, r20
    4e2c:	0e 94 b5 2a 	call	0x556a	; 0x556a <xio_usb_readln>
    4e30:	09 c0       	rjmp	.+18     	; 0x4e44 <xio_fget_ln+0x38>
		case (XIO_DEV_RS485): return (xio_rs485_readln(buf, len));
    4e32:	cb 01       	movw	r24, r22
    4e34:	64 2f       	mov	r22, r20
    4e36:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <xio_rs485_readln>
    4e3a:	04 c0       	rjmp	.+8      	; 0x4e44 <xio_fget_ln+0x38>
//		case (XIO_DEV_AUX): return (xio_aux_readln(buf, len));
		case (XIO_DEV_PGM): return (xio_pgm_readln(buf, len));
    4e3c:	cb 01       	movw	r24, r22
    4e3e:	64 2f       	mov	r22, r20
    4e40:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <xio_pgm_readln>
    4e44:	9c 01       	movw	r18, r24
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4e46:	c9 01       	movw	r24, r18
    4e48:	08 95       	ret

00004e4a <xio_control>:
 * xio_control() - common entry point for device control functions
 */

int8_t xio_control(uint8_t dev, const uint16_t control, const int16_t arg)
{
	switch (dev) {
    4e4a:	81 30       	cpi	r24, 0x01	; 1
    4e4c:	51 f0       	breq	.+20     	; 0x4e62 <xio_control+0x18>
    4e4e:	81 30       	cpi	r24, 0x01	; 1
    4e50:	30 f0       	brcs	.+12     	; 0x4e5e <xio_control+0x14>
    4e52:	82 30       	cpi	r24, 0x02	; 2
    4e54:	59 f0       	breq	.+22     	; 0x4e6c <xio_control+0x22>
    4e56:	84 30       	cpi	r24, 0x04	; 4
    4e58:	71 f0       	breq	.+28     	; 0x4e76 <xio_control+0x2c>
    4e5a:	80 e1       	ldi	r24, 0x10	; 16
    4e5c:	08 95       	ret
    4e5e:	80 e0       	ldi	r24, 0x00	; 0
    4e60:	08 95       	ret
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): return (xio_usb_control(control, arg));
    4e62:	cb 01       	movw	r24, r22
    4e64:	ba 01       	movw	r22, r20
    4e66:	0e 94 49 28 	call	0x5092	; 0x5092 <xio_usb_control>
    4e6a:	08 95       	ret
		case (XIO_DEV_RS485): return (xio_rs485_control(control, arg));
    4e6c:	cb 01       	movw	r24, r22
    4e6e:	ba 01       	movw	r22, r20
    4e70:	0e 94 a3 34 	call	0x6946	; 0x6946 <xio_rs485_control>
    4e74:	08 95       	ret
//		case (XIO_DEV_AUX): return (xio_aux_control(control, arg));
		case (XIO_DEV_PGM): return (xio_pgm_control(control, arg));
    4e76:	cb 01       	movw	r24, r22
    4e78:	ba 01       	movw	r22, r20
    4e7a:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <xio_pgm_control>
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4e7e:	08 95       	ret

00004e80 <xio_dev_init>:
 * xio_dev_init() - common entry point for device init functions
 */

int8_t xio_dev_init(uint8_t dev, const int16_t arg)
{
	switch (dev) {
    4e80:	81 30       	cpi	r24, 0x01	; 1
    4e82:	41 f0       	breq	.+16     	; 0x4e94 <xio_dev_init+0x14>
    4e84:	81 30       	cpi	r24, 0x01	; 1
    4e86:	68 f0       	brcs	.+26     	; 0x4ea2 <xio_dev_init+0x22>
    4e88:	82 30       	cpi	r24, 0x02	; 2
    4e8a:	41 f0       	breq	.+16     	; 0x4e9c <xio_dev_init+0x1c>
    4e8c:	84 30       	cpi	r24, 0x04	; 4
    4e8e:	59 f0       	breq	.+22     	; 0x4ea6 <xio_dev_init+0x26>
    4e90:	80 e1       	ldi	r24, 0x10	; 16
    4e92:	08 95       	ret
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): xio_usb_init(arg); return (TG_OK);
    4e94:	cb 01       	movw	r24, r22
    4e96:	0e 94 83 27 	call	0x4f06	; 0x4f06 <xio_usb_init>
    4e9a:	03 c0       	rjmp	.+6      	; 0x4ea2 <xio_dev_init+0x22>
		case (XIO_DEV_RS485): xio_rs485_init(arg); return (TG_OK);
    4e9c:	cb 01       	movw	r24, r22
    4e9e:	0e 94 dc 33 	call	0x67b8	; 0x67b8 <xio_rs485_init>
    4ea2:	80 e0       	ldi	r24, 0x00	; 0
    4ea4:	08 95       	ret
//		case (XIO_DEV_AUX): xio_aux_init(arg); return (TG_OK);
		case (XIO_DEV_PGM): xio_pgm_init(arg); return (TG_OK);
    4ea6:	cb 01       	movw	r24, r22
    4ea8:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <xio_pgm_init>
    4eac:	80 e0       	ldi	r24, 0x00	; 0
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4eae:	08 95       	ret

00004eb0 <xio_init>:
 */

void xio_init(void)
{	
	// USB port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_SEMICOLONS | XIO_BAUD_115200);
    4eb0:	85 e0       	ldi	r24, 0x05	; 5
    4eb2:	90 e5       	ldi	r25, 0x50	; 80
    4eb4:	0e 94 83 27 	call	0x4f06	; 0x4f06 <xio_usb_init>

	// RS485 port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_BAUD_115200);
    4eb8:	85 e0       	ldi	r24, 0x05	; 5
    4eba:	90 e1       	ldi	r25, 0x10	; 16
    4ebc:	0e 94 83 27 	call	0x4f06	; 0x4f06 <xio_usb_init>

	// PGM file defaults are:	XIO_RD | XIO_BLOCK
//	xio_pgm_init(XIO_ECHO | XIO_CRLF | XIO_LINEMODE | XIO_SEMICOLONS);
	xio_pgm_init(XIO_LINEMODE);
    4ec0:	80 e0       	ldi	r24, 0x00	; 0
    4ec2:	90 e1       	ldi	r25, 0x10	; 16
    4ec4:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <xio_pgm_init>

	stddev = &dev_usb;				// stddev is a convenience
    4ec8:	80 e0       	ldi	r24, 0x00	; 0
    4eca:	90 e2       	ldi	r25, 0x20	; 32
    4ecc:	80 93 f9 24 	sts	0x24F9, r24
    4ed0:	90 93 fa 24 	sts	0x24FA, r25
	stdin = &dev_usb;				// define the console device
    4ed4:	80 93 53 25 	sts	0x2553, r24
    4ed8:	90 93 54 25 	sts	0x2554, r25
	stdout = &dev_usb;				// ...
    4edc:	80 93 55 25 	sts	0x2555, r24
    4ee0:	90 93 56 25 	sts	0x2556, r25
	stderr = &dev_usb;				// ...
    4ee4:	80 93 57 25 	sts	0x2557, r24
    4ee8:	90 93 58 25 	sts	0x2558, r25

	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    4eec:	0f 92       	push	r0
    4eee:	0f 92       	push	r0
    4ef0:	8a e3       	ldi	r24, 0x3A	; 58
    4ef2:	97 e0       	ldi	r25, 0x07	; 7
    4ef4:	ed b7       	in	r30, 0x3d	; 61
    4ef6:	fe b7       	in	r31, 0x3e	; 62
    4ef8:	81 83       	std	Z+1, r24	; 0x01
    4efa:	92 83       	std	Z+2, r25	; 0x02
    4efc:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
    4f00:	0f 90       	pop	r0
    4f02:	0f 90       	pop	r0
}
    4f04:	08 95       	ret

00004f06 <xio_usb_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_usb_init(const uint16_t control)
{
    4f06:	9c 01       	movw	r18, r24
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    4f08:	e8 2f       	mov	r30, r24
    4f0a:	ef 70       	andi	r30, 0x0F	; 15

	// transfer control flags to internal flag bits
	f.flags = XIO_FLAG_USB_DEFS_gm;		// set flags to defaults & initial state
    4f0c:	87 e3       	ldi	r24, 0x37	; 55
    4f0e:	90 e0       	ldi	r25, 0x00	; 0
    4f10:	80 93 ad 21 	sts	0x21AD, r24
    4f14:	90 93 ae 21 	sts	0x21AE, r25
		f.flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		f.flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    4f18:	26 ff       	sbrs	r18, 6
    4f1a:	06 c0       	rjmp	.+12     	; 0x4f28 <xio_usb_init+0x22>
		f.flags |= XIO_FLAG_BLOCK_bm;
    4f1c:	87 e3       	ldi	r24, 0x37	; 55
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	80 93 ad 21 	sts	0x21AD, r24
    4f24:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOBLOCK) {
    4f28:	27 ff       	sbrs	r18, 7
    4f2a:	06 c0       	rjmp	.+12     	; 0x4f38 <xio_usb_init+0x32>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    4f2c:	83 e3       	ldi	r24, 0x33	; 51
    4f2e:	90 e0       	ldi	r25, 0x00	; 0
    4f30:	80 93 ad 21 	sts	0x21AD, r24
    4f34:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_ECHO) {
    4f38:	30 ff       	sbrs	r19, 0
    4f3a:	09 c0       	rjmp	.+18     	; 0x4f4e <xio_usb_init+0x48>
		f.flags |= XIO_FLAG_ECHO_bm;
    4f3c:	80 91 ad 21 	lds	r24, 0x21AD
    4f40:	90 91 ae 21 	lds	r25, 0x21AE
    4f44:	80 61       	ori	r24, 0x10	; 16
    4f46:	80 93 ad 21 	sts	0x21AD, r24
    4f4a:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOECHO) {
    4f4e:	31 ff       	sbrs	r19, 1
    4f50:	09 c0       	rjmp	.+18     	; 0x4f64 <xio_usb_init+0x5e>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    4f52:	80 91 ad 21 	lds	r24, 0x21AD
    4f56:	90 91 ae 21 	lds	r25, 0x21AE
    4f5a:	8f 7e       	andi	r24, 0xEF	; 239
    4f5c:	80 93 ad 21 	sts	0x21AD, r24
    4f60:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_CRLF) {
    4f64:	32 ff       	sbrs	r19, 2
    4f66:	09 c0       	rjmp	.+18     	; 0x4f7a <xio_usb_init+0x74>
		f.flags |= XIO_FLAG_CRLF_bm;
    4f68:	80 91 ad 21 	lds	r24, 0x21AD
    4f6c:	90 91 ae 21 	lds	r25, 0x21AE
    4f70:	80 62       	ori	r24, 0x20	; 32
    4f72:	80 93 ad 21 	sts	0x21AD, r24
    4f76:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOCRLF) {
    4f7a:	33 ff       	sbrs	r19, 3
    4f7c:	09 c0       	rjmp	.+18     	; 0x4f90 <xio_usb_init+0x8a>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    4f7e:	80 91 ad 21 	lds	r24, 0x21AD
    4f82:	90 91 ae 21 	lds	r25, 0x21AE
    4f86:	8f 7d       	andi	r24, 0xDF	; 223
    4f88:	80 93 ad 21 	sts	0x21AD, r24
    4f8c:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_LINEMODE) {
    4f90:	34 ff       	sbrs	r19, 4
    4f92:	09 c0       	rjmp	.+18     	; 0x4fa6 <xio_usb_init+0xa0>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    4f94:	80 91 ad 21 	lds	r24, 0x21AD
    4f98:	90 91 ae 21 	lds	r25, 0x21AE
    4f9c:	80 64       	ori	r24, 0x40	; 64
    4f9e:	80 93 ad 21 	sts	0x21AD, r24
    4fa2:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOLINEMODE) {
    4fa6:	35 ff       	sbrs	r19, 5
    4fa8:	09 c0       	rjmp	.+18     	; 0x4fbc <xio_usb_init+0xb6>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    4faa:	80 91 ad 21 	lds	r24, 0x21AD
    4fae:	90 91 ae 21 	lds	r25, 0x21AE
    4fb2:	8f 7b       	andi	r24, 0xBF	; 191
    4fb4:	80 93 ad 21 	sts	0x21AD, r24
    4fb8:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_SEMICOLONS) {
    4fbc:	36 ff       	sbrs	r19, 6
    4fbe:	09 c0       	rjmp	.+18     	; 0x4fd2 <xio_usb_init+0xcc>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    4fc0:	80 91 ad 21 	lds	r24, 0x21AD
    4fc4:	90 91 ae 21 	lds	r25, 0x21AE
    4fc8:	80 68       	ori	r24, 0x80	; 128
    4fca:	80 93 ad 21 	sts	0x21AD, r24
    4fce:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    4fd2:	37 ff       	sbrs	r19, 7
    4fd4:	09 c0       	rjmp	.+18     	; 0x4fe8 <xio_usb_init+0xe2>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    4fd6:	80 91 ad 21 	lds	r24, 0x21AD
    4fda:	90 91 ae 21 	lds	r25, 0x21AE
    4fde:	8f 77       	andi	r24, 0x7F	; 127
    4fe0:	80 93 ad 21 	sts	0x21AD, r24
    4fe4:	90 93 ae 21 	sts	0x21AE, r25
	}

	// character signals and error returns
	f.sig = 0;
    4fe8:	10 92 af 21 	sts	0x21AF, r1
	dev_usb.udata = &(f.sig);				// bind sig register to FILE struct
    4fec:	8f ea       	ldi	r24, 0xAF	; 175
    4fee:	91 e2       	ldi	r25, 0x21	; 33
    4ff0:	80 93 0c 20 	sts	0x200C, r24
    4ff4:	90 93 0d 20 	sts	0x200D, r25

	// setup internal RX/TX buffers
	f.rx_buf_head = 1;						// can't use location 0
    4ff8:	81 e0       	ldi	r24, 0x01	; 1
    4ffa:	80 93 ba 21 	sts	0x21BA, r24
	f.rx_buf_tail = 1;
    4ffe:	80 93 b9 21 	sts	0x21B9, r24
	f.tx_buf_head = 1;
    5002:	80 93 bc 21 	sts	0x21BC, r24
	f.tx_buf_tail = 1;
    5006:	80 93 bb 21 	sts	0x21BB, r24
	f.len = sizeof(f.buf);					// offset to zero
    500a:	82 e0       	ldi	r24, 0x02	; 2
    500c:	80 93 b2 21 	sts	0x21B2, r24

	// bindings
	f.sig_func = &xio_null_signal;			// bind null signal handler
    5010:	80 e0       	ldi	r24, 0x00	; 0
    5012:	97 e2       	ldi	r25, 0x27	; 39
    5014:	80 93 b5 21 	sts	0x21B5, r24
    5018:	90 93 b6 21 	sts	0x21B6, r25
	f.line_func = &xio_null_line;			// bind null line handler
    501c:	83 e0       	ldi	r24, 0x03	; 3
    501e:	97 e2       	ldi	r25, 0x27	; 39
    5020:	80 93 b7 21 	sts	0x21B7, r24
    5024:	90 93 b8 21 	sts	0x21B8, r25

	f.usart = &USB_USART;					// bind USART structure
    5028:	80 ea       	ldi	r24, 0xA0	; 160
    502a:	98 e0       	ldi	r25, 0x08	; 8
    502c:	80 93 e2 21 	sts	0x21E2, r24
    5030:	90 93 e3 21 	sts	0x21E3, r25
	f.port = &USB_PORT;						// bind PORT structure
    5034:	80 e4       	ldi	r24, 0x40	; 64
    5036:	96 e0       	ldi	r25, 0x06	; 6
    5038:	80 93 e4 21 	sts	0x21E4, r24
    503c:	90 93 e5 21 	sts	0x21E5, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    5040:	ee 23       	and	r30, r30
    5042:	09 f4       	brne	.+2      	; 0x5046 <xio_usb_init+0x140>
    5044:	e5 e0       	ldi	r30, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    5046:	8e 2f       	mov	r24, r30
    5048:	90 e0       	ldi	r25, 0x00	; 0
    504a:	fc 01       	movw	r30, r24
    504c:	ec 5d       	subi	r30, 0xDC	; 220
    504e:	f8 4f       	sbci	r31, 0xF8	; 248
    5050:	e4 91       	lpm	r30, Z+
    5052:	a0 ea       	ldi	r26, 0xA0	; 160
    5054:	b8 e0       	ldi	r27, 0x08	; 8
    5056:	16 96       	adiw	r26, 0x06	; 6
    5058:	ec 93       	st	X, r30
    505a:	16 97       	sbiw	r26, 0x06	; 6
	f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    505c:	81 5d       	subi	r24, 0xD1	; 209
    505e:	98 4f       	sbci	r25, 0xF8	; 248
    5060:	fc 01       	movw	r30, r24
    5062:	84 91       	lpm	r24, Z+
    5064:	17 96       	adiw	r26, 0x07	; 7
    5066:	8c 93       	st	X, r24
    5068:	17 97       	sbiw	r26, 0x07	; 7
	f.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm; // enable tx and rx on USART
    506a:	88 e1       	ldi	r24, 0x18	; 24
    506c:	14 96       	adiw	r26, 0x04	; 4
    506e:	8c 93       	st	X, r24
    5070:	14 97       	sbiw	r26, 0x04	; 4
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    5072:	81 e2       	ldi	r24, 0x21	; 33
    5074:	13 96       	adiw	r26, 0x03	; 3
    5076:	8c 93       	st	X, r24

	f.port->DIRCLR = USB_RX_bm;	 			// clr RX pin as input
    5078:	e0 e4       	ldi	r30, 0x40	; 64
    507a:	f6 e0       	ldi	r31, 0x06	; 6
    507c:	84 e0       	ldi	r24, 0x04	; 4
    507e:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_TX_bm; 			// set TX pin as output
    5080:	88 e0       	ldi	r24, 0x08	; 8
    5082:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_TX_bm;				// set TX HI as initial state
    5084:	85 83       	std	Z+5, r24	; 0x05
	f.port->DIRCLR = USB_CTS_bm; 			// set CTS pin as input
    5086:	81 e0       	ldi	r24, 0x01	; 1
    5088:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_RTS_bm; 			// set RTS pin as output
    508a:	82 e0       	ldi	r24, 0x02	; 2
    508c:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
    508e:	85 83       	std	Z+5, r24	; 0x05
//	f.port->OUTCLR = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
}
    5090:	08 95       	ret

00005092 <xio_usb_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_usb_control(const uint16_t control, const int16_t arg)
{
    5092:	ac 01       	movw	r20, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    5094:	84 ff       	sbrs	r24, 4
    5096:	05 c0       	rjmp	.+10     	; 0x50a2 <xio_usb_control+0x10>
		f.sig_func = (fptr_int_uint8)arg;
    5098:	60 93 b5 21 	sts	0x21B5, r22
    509c:	70 93 b6 21 	sts	0x21B6, r23
    50a0:	8b c0       	rjmp	.+278    	; 0x51b8 <xio_usb_control+0x126>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    50a2:	85 ff       	sbrs	r24, 5
    50a4:	05 c0       	rjmp	.+10     	; 0x50b0 <xio_usb_control+0x1e>
		f.line_func = (fptr_int_char_p)arg;
    50a6:	60 93 b7 21 	sts	0x21B7, r22
    50aa:	70 93 b8 21 	sts	0x21B8, r23
    50ae:	84 c0       	rjmp	.+264    	; 0x51b8 <xio_usb_control+0x126>
		return (0);
	}
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    50b0:	8f 70       	andi	r24, 0x0F	; 15
    50b2:	90 70       	andi	r25, 0x00	; 0
    50b4:	00 97       	sbiw	r24, 0x00	; 0
    50b6:	91 f0       	breq	.+36     	; 0x50dc <xio_usb_control+0x4a>
		f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    50b8:	a0 91 e2 21 	lds	r26, 0x21E2
    50bc:	b0 91 e3 21 	lds	r27, 0x21E3
    50c0:	9c 01       	movw	r18, r24
    50c2:	2c 5d       	subi	r18, 0xDC	; 220
    50c4:	38 4f       	sbci	r19, 0xF8	; 248
    50c6:	f9 01       	movw	r30, r18
    50c8:	24 91       	lpm	r18, Z+
    50ca:	16 96       	adiw	r26, 0x06	; 6
    50cc:	2c 93       	st	X, r18
    50ce:	16 97       	sbiw	r26, 0x06	; 6
		f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    50d0:	81 5d       	subi	r24, 0xD1	; 209
    50d2:	98 4f       	sbci	r25, 0xF8	; 248
    50d4:	fc 01       	movw	r30, r24
    50d6:	84 91       	lpm	r24, Z+
    50d8:	17 96       	adiw	r26, 0x07	; 7
    50da:	8c 93       	st	X, r24
	}
	if (control & XIO_BLOCK) {
    50dc:	46 ff       	sbrs	r20, 6
    50de:	09 c0       	rjmp	.+18     	; 0x50f2 <xio_usb_control+0x60>
		f.flags |= XIO_FLAG_BLOCK_bm;
    50e0:	80 91 ad 21 	lds	r24, 0x21AD
    50e4:	90 91 ae 21 	lds	r25, 0x21AE
    50e8:	84 60       	ori	r24, 0x04	; 4
    50ea:	80 93 ad 21 	sts	0x21AD, r24
    50ee:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOBLOCK) {
    50f2:	47 ff       	sbrs	r20, 7
    50f4:	09 c0       	rjmp	.+18     	; 0x5108 <xio_usb_control+0x76>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    50f6:	80 91 ad 21 	lds	r24, 0x21AD
    50fa:	90 91 ae 21 	lds	r25, 0x21AE
    50fe:	8b 7f       	andi	r24, 0xFB	; 251
    5100:	80 93 ad 21 	sts	0x21AD, r24
    5104:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_ECHO) {
    5108:	50 ff       	sbrs	r21, 0
    510a:	09 c0       	rjmp	.+18     	; 0x511e <xio_usb_control+0x8c>
		f.flags |= XIO_FLAG_ECHO_bm;
    510c:	80 91 ad 21 	lds	r24, 0x21AD
    5110:	90 91 ae 21 	lds	r25, 0x21AE
    5114:	80 61       	ori	r24, 0x10	; 16
    5116:	80 93 ad 21 	sts	0x21AD, r24
    511a:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOECHO) {
    511e:	51 ff       	sbrs	r21, 1
    5120:	09 c0       	rjmp	.+18     	; 0x5134 <xio_usb_control+0xa2>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    5122:	80 91 ad 21 	lds	r24, 0x21AD
    5126:	90 91 ae 21 	lds	r25, 0x21AE
    512a:	8f 7e       	andi	r24, 0xEF	; 239
    512c:	80 93 ad 21 	sts	0x21AD, r24
    5130:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_CRLF) {
    5134:	52 ff       	sbrs	r21, 2
    5136:	09 c0       	rjmp	.+18     	; 0x514a <xio_usb_control+0xb8>
		f.flags |= XIO_FLAG_CRLF_bm;
    5138:	80 91 ad 21 	lds	r24, 0x21AD
    513c:	90 91 ae 21 	lds	r25, 0x21AE
    5140:	80 62       	ori	r24, 0x20	; 32
    5142:	80 93 ad 21 	sts	0x21AD, r24
    5146:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOCRLF) {
    514a:	53 ff       	sbrs	r21, 3
    514c:	09 c0       	rjmp	.+18     	; 0x5160 <xio_usb_control+0xce>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    514e:	80 91 ad 21 	lds	r24, 0x21AD
    5152:	90 91 ae 21 	lds	r25, 0x21AE
    5156:	8f 7d       	andi	r24, 0xDF	; 223
    5158:	80 93 ad 21 	sts	0x21AD, r24
    515c:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_LINEMODE) {
    5160:	54 ff       	sbrs	r21, 4
    5162:	09 c0       	rjmp	.+18     	; 0x5176 <xio_usb_control+0xe4>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    5164:	80 91 ad 21 	lds	r24, 0x21AD
    5168:	90 91 ae 21 	lds	r25, 0x21AE
    516c:	80 64       	ori	r24, 0x40	; 64
    516e:	80 93 ad 21 	sts	0x21AD, r24
    5172:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOLINEMODE) {
    5176:	55 ff       	sbrs	r21, 5
    5178:	09 c0       	rjmp	.+18     	; 0x518c <xio_usb_control+0xfa>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    517a:	80 91 ad 21 	lds	r24, 0x21AD
    517e:	90 91 ae 21 	lds	r25, 0x21AE
    5182:	8f 7b       	andi	r24, 0xBF	; 191
    5184:	80 93 ad 21 	sts	0x21AD, r24
    5188:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_SEMICOLONS) {
    518c:	56 ff       	sbrs	r21, 6
    518e:	09 c0       	rjmp	.+18     	; 0x51a2 <xio_usb_control+0x110>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    5190:	80 91 ad 21 	lds	r24, 0x21AD
    5194:	90 91 ae 21 	lds	r25, 0x21AE
    5198:	80 68       	ori	r24, 0x80	; 128
    519a:	80 93 ad 21 	sts	0x21AD, r24
    519e:	90 93 ae 21 	sts	0x21AE, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    51a2:	57 ff       	sbrs	r21, 7
    51a4:	09 c0       	rjmp	.+18     	; 0x51b8 <xio_usb_control+0x126>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    51a6:	80 91 ad 21 	lds	r24, 0x21AD
    51aa:	90 91 ae 21 	lds	r25, 0x21AE
    51ae:	8f 77       	andi	r24, 0x7F	; 127
    51b0:	80 93 ad 21 	sts	0x21AD, r24
    51b4:	90 93 ae 21 	sts	0x21AE, r25
	}
	return (0);
}
    51b8:	80 e0       	ldi	r24, 0x00	; 0
    51ba:	08 95       	ret

000051bc <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(USB_RX_ISR_vect)		//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    51bc:	1f 92       	push	r1
    51be:	0f 92       	push	r0
    51c0:	0f b6       	in	r0, 0x3f	; 63
    51c2:	0f 92       	push	r0
    51c4:	0b b6       	in	r0, 0x3b	; 59
    51c6:	0f 92       	push	r0
    51c8:	11 24       	eor	r1, r1
    51ca:	8f 93       	push	r24
    51cc:	9f 93       	push	r25
    51ce:	af 93       	push	r26
    51d0:	bf 93       	push	r27
    51d2:	ef 93       	push	r30
    51d4:	ff 93       	push	r31
	// normal path
	if ((--f.rx_buf_head) == 0) { 				// advance buffer head with wrap
    51d6:	80 91 ba 21 	lds	r24, 0x21BA
    51da:	81 50       	subi	r24, 0x01	; 1
    51dc:	80 93 ba 21 	sts	0x21BA, r24
    51e0:	80 91 ba 21 	lds	r24, 0x21BA
    51e4:	88 23       	and	r24, r24
    51e6:	19 f4       	brne	.+6      	; 0x51ee <__vector_25+0x32>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    51e8:	81 e1       	ldi	r24, 0x11	; 17
    51ea:	80 93 ba 21 	sts	0x21BA, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    51ee:	90 91 ba 21 	lds	r25, 0x21BA
    51f2:	80 91 b9 21 	lds	r24, 0x21B9
    51f6:	98 17       	cp	r25, r24
    51f8:	61 f0       	breq	.+24     	; 0x5212 <__vector_25+0x56>
		f.rx_buf[f.rx_buf_head] = f.usart->DATA;// (= USARTC0.DATA;)
    51fa:	e0 91 ba 21 	lds	r30, 0x21BA
    51fe:	f0 e0       	ldi	r31, 0x00	; 0
    5200:	a0 91 e2 21 	lds	r26, 0x21E2
    5204:	b0 91 e3 21 	lds	r27, 0x21E3
    5208:	8c 91       	ld	r24, X
    520a:	e3 55       	subi	r30, 0x53	; 83
    520c:	fe 4d       	sbci	r31, 0xDE	; 222
    520e:	81 8b       	std	Z+17, r24	; 0x11
    5210:	0c c0       	rjmp	.+24     	; 0x522a <__vector_25+0x6e>
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    5212:	80 91 ba 21 	lds	r24, 0x21BA
    5216:	8f 5f       	subi	r24, 0xFF	; 255
    5218:	80 93 ba 21 	sts	0x21BA, r24
    521c:	80 91 ba 21 	lds	r24, 0x21BA
    5220:	82 31       	cpi	r24, 0x12	; 18
    5222:	18 f0       	brcs	.+6      	; 0x522a <__vector_25+0x6e>
		f.rx_buf_head = 1;
    5224:	81 e0       	ldi	r24, 0x01	; 1
    5226:	80 93 ba 21 	sts	0x21BA, r24
	}
	// activate flow control here or before it gets to this level
}
    522a:	ff 91       	pop	r31
    522c:	ef 91       	pop	r30
    522e:	bf 91       	pop	r27
    5230:	af 91       	pop	r26
    5232:	9f 91       	pop	r25
    5234:	8f 91       	pop	r24
    5236:	0f 90       	pop	r0
    5238:	0b be       	out	0x3b, r0	; 59
    523a:	0f 90       	pop	r0
    523c:	0f be       	out	0x3f, r0	; 63
    523e:	0f 90       	pop	r0
    5240:	1f 90       	pop	r1
    5242:	18 95       	reti

00005244 <xio_usb_queue_RX_char>:
/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_usb_queue_RX_char(const char c)
{
    5244:	28 2f       	mov	r18, r24
	// normal path
	if ((--f.rx_buf_head) == 0) { 				// wrap condition
    5246:	80 91 ba 21 	lds	r24, 0x21BA
    524a:	81 50       	subi	r24, 0x01	; 1
    524c:	80 93 ba 21 	sts	0x21BA, r24
    5250:	80 91 ba 21 	lds	r24, 0x21BA
    5254:	88 23       	and	r24, r24
    5256:	19 f4       	brne	.+6      	; 0x525e <xio_usb_queue_RX_char+0x1a>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    5258:	81 e1       	ldi	r24, 0x11	; 17
    525a:	80 93 ba 21 	sts	0x21BA, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    525e:	90 91 ba 21 	lds	r25, 0x21BA
    5262:	80 91 b9 21 	lds	r24, 0x21B9
    5266:	98 17       	cp	r25, r24
    5268:	39 f0       	breq	.+14     	; 0x5278 <xio_usb_queue_RX_char+0x34>
		f.rx_buf[f.rx_buf_head] = c;			// FAKE INPUT DATA
    526a:	e0 91 ba 21 	lds	r30, 0x21BA
    526e:	f0 e0       	ldi	r31, 0x00	; 0
    5270:	e3 55       	subi	r30, 0x53	; 83
    5272:	fe 4d       	sbci	r31, 0xDE	; 222
    5274:	21 8b       	std	Z+17, r18	; 0x11
    5276:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    5278:	80 91 ba 21 	lds	r24, 0x21BA
    527c:	8f 5f       	subi	r24, 0xFF	; 255
    527e:	80 93 ba 21 	sts	0x21BA, r24
    5282:	80 91 ba 21 	lds	r24, 0x21BA
    5286:	82 31       	cpi	r24, 0x12	; 18
    5288:	18 f0       	brcs	.+6      	; 0x5290 <xio_usb_queue_RX_char+0x4c>
		f.rx_buf_head = 1;
    528a:	81 e0       	ldi	r24, 0x01	; 1
    528c:	80 93 ba 21 	sts	0x21BA, r24
    5290:	08 95       	ret

00005292 <xio_usb_queue_RX_string>:
/*
 * xio_usb_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_usb_queue_RX_string(char *buf)
{
    5292:	1f 93       	push	r17
    5294:	cf 93       	push	r28
    5296:	df 93       	push	r29
    5298:	ec 01       	movw	r28, r24
    529a:	10 e0       	ldi	r17, 0x00	; 0
    529c:	02 c0       	rjmp	.+4      	; 0x52a2 <xio_usb_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_usb_queue_RX_char(c);
    529e:	0e 94 22 29 	call	0x5244	; 0x5244 <xio_usb_queue_RX_char>
void xio_usb_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    52a2:	fe 01       	movw	r30, r28
    52a4:	e1 0f       	add	r30, r17
    52a6:	f1 1d       	adc	r31, r1
    52a8:	80 81       	ld	r24, Z
    52aa:	1f 5f       	subi	r17, 0xFF	; 255
    52ac:	88 23       	and	r24, r24
    52ae:	b9 f7       	brne	.-18     	; 0x529e <xio_usb_queue_RX_string+0xc>
		xio_usb_queue_RX_char(c);
	}
}
    52b0:	df 91       	pop	r29
    52b2:	cf 91       	pop	r28
    52b4:	1f 91       	pop	r17
    52b6:	08 95       	ret

000052b8 <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)		//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    52b8:	1f 92       	push	r1
    52ba:	0f 92       	push	r0
    52bc:	0f b6       	in	r0, 0x3f	; 63
    52be:	0f 92       	push	r0
    52c0:	0b b6       	in	r0, 0x3b	; 59
    52c2:	0f 92       	push	r0
    52c4:	11 24       	eor	r1, r1
    52c6:	8f 93       	push	r24
    52c8:	9f 93       	push	r25
    52ca:	af 93       	push	r26
    52cc:	bf 93       	push	r27
    52ce:	ef 93       	push	r30
    52d0:	ff 93       	push	r31
	if (f.tx_buf_head == f.tx_buf_tail) {			// buffer empty - disable ints
    52d2:	90 91 bc 21 	lds	r25, 0x21BC
    52d6:	80 91 bb 21 	lds	r24, 0x21BB
    52da:	98 17       	cp	r25, r24
    52dc:	39 f4       	brne	.+14     	; 0x52ec <__vector_26+0x34>
		f.usart->CTRLA = USARTC0_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    52de:	e0 91 e2 21 	lds	r30, 0x21E2
    52e2:	f0 91 e3 21 	lds	r31, 0x21E3
    52e6:	80 e2       	ldi	r24, 0x20	; 32
    52e8:	83 83       	std	Z+3, r24	; 0x03
    52ea:	1e c0       	rjmp	.+60     	; 0x5328 <__vector_26+0x70>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(f.flags)) {
    52ec:	80 91 ad 21 	lds	r24, 0x21AD
    52f0:	90 91 ae 21 	lds	r25, 0x21AE
    52f4:	93 fd       	sbrc	r25, 3
    52f6:	18 c0       	rjmp	.+48     	; 0x5328 <__vector_26+0x70>
		if (--(f.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    52f8:	80 91 bb 21 	lds	r24, 0x21BB
    52fc:	81 50       	subi	r24, 0x01	; 1
    52fe:	80 93 bb 21 	sts	0x21BB, r24
    5302:	80 91 bb 21 	lds	r24, 0x21BB
    5306:	88 23       	and	r24, r24
    5308:	19 f4       	brne	.+6      	; 0x5310 <__vector_26+0x58>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    530a:	81 e1       	ldi	r24, 0x11	; 17
    530c:	80 93 bb 21 	sts	0x21BB, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];	// write char to TX DATA register
    5310:	e0 91 e2 21 	lds	r30, 0x21E2
    5314:	f0 91 e3 21 	lds	r31, 0x21E3
    5318:	a0 91 bb 21 	lds	r26, 0x21BB
    531c:	b0 e0       	ldi	r27, 0x00	; 0
    531e:	a3 55       	subi	r26, 0x53	; 83
    5320:	be 4d       	sbci	r27, 0xDE	; 222
    5322:	93 96       	adiw	r26, 0x23	; 35
    5324:	8c 91       	ld	r24, X
    5326:	80 83       	st	Z, r24
	}
}
    5328:	ff 91       	pop	r31
    532a:	ef 91       	pop	r30
    532c:	bf 91       	pop	r27
    532e:	af 91       	pop	r26
    5330:	9f 91       	pop	r25
    5332:	8f 91       	pop	r24
    5334:	0f 90       	pop	r0
    5336:	0b be       	out	0x3b, r0	; 59
    5338:	0f 90       	pop	r0
    533a:	0f be       	out	0x3f, r0	; 63
    533c:	0f 90       	pop	r0
    533e:	1f 90       	pop	r1
    5340:	18 95       	reti

00005342 <xio_usb_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
    5342:	48 2f       	mov	r20, r24
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    5344:	20 91 ad 21 	lds	r18, 0x21AD
    5348:	30 91 ae 21 	lds	r19, 0x21AE
    534c:	d9 01       	movw	r26, r18
    534e:	a4 70       	andi	r26, 0x04	; 4
    5350:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    5352:	b9 01       	movw	r22, r18
    5354:	60 72       	andi	r22, 0x20	; 32
    5356:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
    5358:	90 91 bc 21 	lds	r25, 0x21BC
    535c:	91 50       	subi	r25, 0x01	; 1
    535e:	c1 f4       	brne	.+48     	; 0x5390 <xio_usb_putc+0x4e>
    5360:	91 e1       	ldi	r25, 0x11	; 17
    5362:	16 c0       	rjmp	.+44     	; 0x5390 <xio_usb_putc+0x4e>
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    5364:	10 97       	sbiw	r26, 0x00	; 0
    5366:	61 f0       	breq	.+24     	; 0x5380 <xio_usb_putc+0x3e>
			sleep_mode();
    5368:	80 91 48 00 	lds	r24, 0x0048
    536c:	81 60       	ori	r24, 0x01	; 1
    536e:	80 93 48 00 	sts	0x0048, r24
    5372:	88 95       	sleep
    5374:	80 91 48 00 	lds	r24, 0x0048
    5378:	8e 7f       	andi	r24, 0xFE	; 254
    537a:	80 93 48 00 	sts	0x0048, r24
    537e:	08 c0       	rjmp	.+16     	; 0x5390 <xio_usb_putc+0x4e>
    5380:	90 93 bd 21 	sts	0x21BD, r25
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    5384:	83 e0       	ldi	r24, 0x03	; 3
    5386:	80 93 af 21 	sts	0x21AF, r24
    538a:	2f ef       	ldi	r18, 0xFF	; 255
    538c:	3f ef       	ldi	r19, 0xFF	; 255
    538e:	54 c0       	rjmp	.+168    	; 0x5438 <xio_usb_putc+0xf6>
int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
    5390:	80 91 bb 21 	lds	r24, 0x21BB
    5394:	98 17       	cp	r25, r24
    5396:	31 f3       	breq	.-52     	; 0x5364 <xio_usb_putc+0x22>
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
    5398:	90 93 bc 21 	sts	0x21BC, r25
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer
    539c:	e0 91 bc 21 	lds	r30, 0x21BC
    53a0:	f0 e0       	ldi	r31, 0x00	; 0
    53a2:	e3 55       	subi	r30, 0x53	; 83
    53a4:	fe 4d       	sbci	r31, 0xDE	; 222
    53a6:	43 a3       	std	Z+35, r20	; 0x23

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    53a8:	61 15       	cp	r22, r1
    53aa:	71 05       	cpc	r23, r1
    53ac:	21 f0       	breq	.+8      	; 0x53b6 <xio_usb_putc+0x74>
    53ae:	4a 30       	cpi	r20, 0x0A	; 10
    53b0:	11 f4       	brne	.+4      	; 0x53b6 <xio_usb_putc+0x74>
    53b2:	4d e0       	ldi	r20, 0x0D	; 13
    53b4:	d1 cf       	rjmp	.-94     	; 0x5358 <xio_usb_putc+0x16>
    53b6:	90 93 bd 21 	sts	0x21BD, r25
		return xio_usb_putc('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (f.usart->STATUS & 0x20) {
    53ba:	a0 91 e2 21 	lds	r26, 0x21E2
    53be:	b0 91 e3 21 	lds	r27, 0x21E3
    53c2:	11 96       	adiw	r26, 0x01	; 1
    53c4:	8c 91       	ld	r24, X
    53c6:	11 97       	sbiw	r26, 0x01	; 1
    53c8:	85 ff       	sbrs	r24, 5
    53ca:	27 c0       	rjmp	.+78     	; 0x541a <xio_usb_putc+0xd8>
		if (f.tx_buf_head == f.tx_buf_tail) {	// buf might be empty if IRQ got it
    53cc:	90 91 bc 21 	lds	r25, 0x21BC
    53d0:	80 91 bb 21 	lds	r24, 0x21BB
    53d4:	98 17       	cp	r25, r24
    53d6:	71 f1       	breq	.+92     	; 0x5434 <xio_usb_putc+0xf2>
			return (0);
		}
		f.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    53d8:	38 60       	ori	r19, 0x08	; 8
    53da:	20 93 ad 21 	sts	0x21AD, r18
    53de:	30 93 ae 21 	sts	0x21AE, r19
		if (--(f.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    53e2:	80 91 bb 21 	lds	r24, 0x21BB
    53e6:	81 50       	subi	r24, 0x01	; 1
    53e8:	80 93 bb 21 	sts	0x21BB, r24
    53ec:	80 91 bb 21 	lds	r24, 0x21BB
    53f0:	88 23       	and	r24, r24
    53f2:	19 f4       	brne	.+6      	; 0x53fa <xio_usb_putc+0xb8>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    53f4:	81 e1       	ldi	r24, 0x11	; 17
    53f6:	80 93 bb 21 	sts	0x21BB, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];// write char to TX DATA register
    53fa:	e0 91 bb 21 	lds	r30, 0x21BB
    53fe:	f0 e0       	ldi	r31, 0x00	; 0
    5400:	e3 55       	subi	r30, 0x53	; 83
    5402:	fe 4d       	sbci	r31, 0xDE	; 222
    5404:	83 a1       	ldd	r24, Z+35	; 0x23
    5406:	8c 93       	st	X, r24
		f.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    5408:	80 91 ad 21 	lds	r24, 0x21AD
    540c:	90 91 ae 21 	lds	r25, 0x21AE
    5410:	97 7f       	andi	r25, 0xF7	; 247
    5412:	80 93 ad 21 	sts	0x21AD, r24
    5416:	90 93 ae 21 	sts	0x21AE, r25
	}
	// enable interrupts regardless
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    541a:	e0 91 e2 21 	lds	r30, 0x21E2
    541e:	f0 91 e3 21 	lds	r31, 0x21E3
    5422:	81 e2       	ldi	r24, 0x21	; 33
    5424:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    5426:	80 91 a2 00 	lds	r24, 0x00A2
    542a:	81 60       	ori	r24, 0x01	; 1
    542c:	e0 ea       	ldi	r30, 0xA0	; 160
    542e:	f0 e0       	ldi	r31, 0x00	; 0
    5430:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    5432:	78 94       	sei
    5434:	20 e0       	ldi	r18, 0x00	; 0
    5436:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    5438:	c9 01       	movw	r24, r18
    543a:	08 95       	ret

0000543c <xio_usb_getc>:
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(f.flags)) {
    543c:	20 91 ad 21 	lds	r18, 0x21AD
    5440:	30 91 ae 21 	lds	r19, 0x21AE
    5444:	24 70       	andi	r18, 0x04	; 4
    5446:	30 70       	andi	r19, 0x00	; 0
    5448:	15 c0       	rjmp	.+42     	; 0x5474 <xio_usb_getc+0x38>
    544a:	21 15       	cp	r18, r1
    544c:	31 05       	cpc	r19, r1
    544e:	61 f0       	breq	.+24     	; 0x5468 <xio_usb_getc+0x2c>
			sleep_mode();
    5450:	80 91 48 00 	lds	r24, 0x0048
    5454:	81 60       	ori	r24, 0x01	; 1
    5456:	80 93 48 00 	sts	0x0048, r24
    545a:	88 95       	sleep
    545c:	80 91 48 00 	lds	r24, 0x0048
    5460:	8e 7f       	andi	r24, 0xFE	; 254
    5462:	80 93 48 00 	sts	0x0048, r24
    5466:	06 c0       	rjmp	.+12     	; 0x5474 <xio_usb_getc+0x38>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    5468:	83 e0       	ldi	r24, 0x03	; 3
    546a:	80 93 af 21 	sts	0x21AF, r24
    546e:	2f ef       	ldi	r18, 0xFF	; 255
    5470:	3f ef       	ldi	r19, 0xFF	; 255
    5472:	26 c0       	rjmp	.+76     	; 0x54c0 <xio_usb_getc+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
    5474:	90 91 ba 21 	lds	r25, 0x21BA
    5478:	80 91 b9 21 	lds	r24, 0x21B9
    547c:	98 17       	cp	r25, r24
    547e:	29 f3       	breq	.-54     	; 0x544a <xio_usb_getc+0xe>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    5480:	80 91 b9 21 	lds	r24, 0x21B9
    5484:	81 50       	subi	r24, 0x01	; 1
    5486:	80 93 b9 21 	sts	0x21B9, r24
    548a:	80 91 b9 21 	lds	r24, 0x21B9
    548e:	88 23       	and	r24, r24
    5490:	19 f4       	brne	.+6      	; 0x5498 <xio_usb_getc+0x5c>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    5492:	81 e1       	ldi	r24, 0x11	; 17
    5494:	80 93 b9 21 	sts	0x21B9, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    5498:	e0 91 b9 21 	lds	r30, 0x21B9
    549c:	f0 e0       	ldi	r31, 0x00	; 0
    549e:	e3 55       	subi	r30, 0x53	; 83
    54a0:	fe 4d       	sbci	r31, 0xDE	; 222
    54a2:	81 89       	ldd	r24, Z+17	; 0x11
    54a4:	8f 77       	andi	r24, 0x7F	; 127
    54a6:	80 93 b0 21 	sts	0x21B0, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[f.c])))());
    54aa:	90 e0       	ldi	r25, 0x00	; 0
    54ac:	88 0f       	add	r24, r24
    54ae:	99 1f       	adc	r25, r25
    54b0:	8a 59       	subi	r24, 0x9A	; 154
    54b2:	97 4f       	sbci	r25, 0xF7	; 247
    54b4:	fc 01       	movw	r30, r24
    54b6:	25 91       	lpm	r18, Z+
    54b8:	34 91       	lpm	r19, Z+
    54ba:	f9 01       	movw	r30, r18
    54bc:	19 95       	eicall
    54be:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    54c0:	c9 01       	movw	r24, r18
    54c2:	08 95       	ret

000054c4 <_getc_char>:

/* xio_usb_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    54c4:	80 91 ad 21 	lds	r24, 0x21AD
    54c8:	84 ff       	sbrs	r24, 4
    54ca:	08 c0       	rjmp	.+16     	; 0x54dc <_getc_char+0x18>
    54cc:	60 91 55 25 	lds	r22, 0x2555
    54d0:	70 91 56 25 	lds	r23, 0x2556
    54d4:	80 91 b0 21 	lds	r24, 0x21B0
    54d8:	0e 94 a1 29 	call	0x5342	; 0x5342 <xio_usb_putc>
	return(f.c);
}
    54dc:	80 91 b0 21 	lds	r24, 0x21B0
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	08 95       	ret

000054e4 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(f.flags)) f.c = '\n';
    54e4:	90 91 ad 21 	lds	r25, 0x21AD
    54e8:	96 ff       	sbrs	r25, 6
    54ea:	03 c0       	rjmp	.+6      	; 0x54f2 <_getc_NEWLINE+0xe>
    54ec:	8a e0       	ldi	r24, 0x0A	; 10
    54ee:	80 93 b0 21 	sts	0x21B0, r24
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    54f2:	94 ff       	sbrs	r25, 4
    54f4:	08 c0       	rjmp	.+16     	; 0x5506 <_getc_NEWLINE+0x22>
    54f6:	60 91 55 25 	lds	r22, 0x2555
    54fa:	70 91 56 25 	lds	r23, 0x2556
    54fe:	80 91 b0 21 	lds	r24, 0x21B0
    5502:	0e 94 a1 29 	call	0x5342	; 0x5342 <xio_usb_putc>
	return(f.c);
}
    5506:	80 91 b0 21 	lds	r24, 0x21B0
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	08 95       	ret

0000550e <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(f.flags)) {
    550e:	80 91 ad 21 	lds	r24, 0x21AD
    5512:	87 ff       	sbrs	r24, 7
    5514:	03 c0       	rjmp	.+6      	; 0x551c <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    5516:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <_getc_NEWLINE>
    551a:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    551c:	0e 94 62 2a 	call	0x54c4	; 0x54c4 <_getc_char>
}
    5520:	08 95       	ret

00005522 <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	f.sig = XIO_SIG_DELETE;
    5522:	8a e0       	ldi	r24, 0x0A	; 10
    5524:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    5528:	8f ef       	ldi	r24, 0xFF	; 255
    552a:	9f ef       	ldi	r25, 0xFF	; 255
    552c:	08 95       	ret

0000552e <_getc_KILL>:

static int _getc_KILL(void)
{
	f.sig = XIO_SIG_KILL;
    552e:	84 e0       	ldi	r24, 0x04	; 4
    5530:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    5534:	8f ef       	ldi	r24, 0xFF	; 255
    5536:	9f ef       	ldi	r25, 0xFF	; 255
    5538:	08 95       	ret

0000553a <_getc_PAUSE>:

static int _getc_PAUSE(void)
{
	f.sig = XIO_SIG_PAUSE;
    553a:	86 e0       	ldi	r24, 0x06	; 6
    553c:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    5540:	8f ef       	ldi	r24, 0xFF	; 255
    5542:	9f ef       	ldi	r25, 0xFF	; 255
    5544:	08 95       	ret

00005546 <_getc_RESUME>:

static int _getc_RESUME(void)
{
	f.sig = XIO_SIG_RESUME;
    5546:	87 e0       	ldi	r24, 0x07	; 7
    5548:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    554c:	8f ef       	ldi	r24, 0xFF	; 255
    554e:	9f ef       	ldi	r25, 0xFF	; 255
    5550:	08 95       	ret

00005552 <_getc_SHIFTOUT>:

static int _getc_SHIFTOUT(void)
{
	f.sig = XIO_SIG_SHIFTOUT;
    5552:	88 e0       	ldi	r24, 0x08	; 8
    5554:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    5558:	8f ef       	ldi	r24, 0xFF	; 255
    555a:	9f ef       	ldi	r25, 0xFF	; 255
    555c:	08 95       	ret

0000555e <_getc_SHIFTIN>:

static int _getc_SHIFTIN(void)
{
	f.sig = XIO_SIG_SHIFTIN;
    555e:	89 e0       	ldi	r24, 0x09	; 9
    5560:	80 93 af 21 	sts	0x21AF, r24
	return(_FDEV_ERR);
}
    5564:	8f ef       	ldi	r24, 0xFF	; 255
    5566:	9f ef       	ldi	r25, 0xFF	; 255
    5568:	08 95       	ret

0000556a <xio_usb_readln>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_usb_readln(char *buf, uint8_t len)
{
	if (!IN_LINE(f.flags)) {					// first time thru initializations
    556a:	20 91 ad 21 	lds	r18, 0x21AD
    556e:	30 91 ae 21 	lds	r19, 0x21AE
    5572:	36 fd       	sbrc	r19, 6
    5574:	0d c0       	rjmp	.+26     	; 0x5590 <xio_usb_readln+0x26>
		f.i = 0;								// zero buffer
    5576:	10 92 b1 21 	sts	0x21B1, r1
		f.len = len;							// save arg into struct 
    557a:	60 93 b2 21 	sts	0x21B2, r22
		f.buf = buf;							// save arg into struct 
    557e:	80 93 b3 21 	sts	0x21B3, r24
    5582:	90 93 b4 21 	sts	0x21B4, r25
//		f.sig = XIO_SIG_OK;						// no signal action
		f.flags |= XIO_FLAG_IN_LINE_bm;			// yes, we are busy getting a line
    5586:	30 64       	ori	r19, 0x40	; 64
    5588:	20 93 ad 21 	sts	0x21AD, r18
    558c:	30 93 ae 21 	sts	0x21AE, r19
	}
	if (f.rx_buf_head == f.rx_buf_tail) {		// RX ISR buffer empty
    5590:	90 91 ba 21 	lds	r25, 0x21BA
    5594:	80 91 b9 21 	lds	r24, 0x21B9
    5598:	98 17       	cp	r25, r24
    559a:	19 f4       	brne	.+6      	; 0x55a2 <xio_usb_readln+0x38>
    559c:	22 e0       	ldi	r18, 0x02	; 2
    559e:	30 e0       	ldi	r19, 0x00	; 0
    55a0:	20 c0       	rjmp	.+64     	; 0x55e2 <xio_usb_readln+0x78>
//		f.sig = XIO_SIG_WOULDBLOCK;
		return(TG_CONTINUE);
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    55a2:	80 91 b9 21 	lds	r24, 0x21B9
    55a6:	81 50       	subi	r24, 0x01	; 1
    55a8:	80 93 b9 21 	sts	0x21B9, r24
    55ac:	80 91 b9 21 	lds	r24, 0x21B9
    55b0:	88 23       	and	r24, r24
    55b2:	19 f4       	brne	.+6      	; 0x55ba <xio_usb_readln+0x50>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    55b4:	81 e1       	ldi	r24, 0x11	; 17
    55b6:	80 93 b9 21 	sts	0x21B9, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    55ba:	e0 91 b9 21 	lds	r30, 0x21B9
    55be:	f0 e0       	ldi	r31, 0x00	; 0
    55c0:	e3 55       	subi	r30, 0x53	; 83
    55c2:	fe 4d       	sbci	r31, 0xDE	; 222
    55c4:	81 89       	ldd	r24, Z+17	; 0x11
    55c6:	8f 77       	andi	r24, 0x7F	; 127
    55c8:	80 93 b0 21 	sts	0x21B0, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[f.c])))()); // dispatch on character
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	88 0f       	add	r24, r24
    55d0:	99 1f       	adc	r25, r25
    55d2:	8a 59       	subi	r24, 0x9A	; 154
    55d4:	98 4f       	sbci	r25, 0xF8	; 248
    55d6:	fc 01       	movw	r30, r24
    55d8:	25 91       	lpm	r18, Z+
    55da:	34 91       	lpm	r19, Z+
    55dc:	f9 01       	movw	r30, r18
    55de:	19 95       	eicall
    55e0:	9c 01       	movw	r18, r24
}
    55e2:	c9 01       	movw	r24, r18
    55e4:	08 95       	ret

000055e6 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (f.i > f.len) {							// trap buffer overflow
    55e6:	90 91 b1 21 	lds	r25, 0x21B1
    55ea:	20 91 b2 21 	lds	r18, 0x21B2
    55ee:	e0 91 b3 21 	lds	r30, 0x21B3
    55f2:	f0 91 b4 21 	lds	r31, 0x21B4
    55f6:	29 17       	cp	r18, r25
    55f8:	48 f4       	brcc	.+18     	; 0x560c <_readln_char+0x26>
		f.sig = XIO_SIG_EOL;
    55fa:	81 e0       	ldi	r24, 0x01	; 1
    55fc:	80 93 af 21 	sts	0x21AF, r24
		f.buf[f.len] = NUL;						// f.len is zero based
    5600:	e2 0f       	add	r30, r18
    5602:	f1 1d       	adc	r31, r1
    5604:	10 82       	st	Z, r1
    5606:	26 e0       	ldi	r18, 0x06	; 6
    5608:	30 e0       	ldi	r19, 0x00	; 0
    560a:	16 c0       	rjmp	.+44     	; 0x5638 <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	f.buf[f.i++] = f.c;
    560c:	e9 0f       	add	r30, r25
    560e:	f1 1d       	adc	r31, r1
    5610:	80 91 b0 21 	lds	r24, 0x21B0
    5614:	80 83       	st	Z, r24
    5616:	9f 5f       	subi	r25, 0xFF	; 255
    5618:	90 93 b1 21 	sts	0x21B1, r25
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);// conditional echo
    561c:	80 91 ad 21 	lds	r24, 0x21AD
    5620:	84 ff       	sbrs	r24, 4
    5622:	08 c0       	rjmp	.+16     	; 0x5634 <_readln_char+0x4e>
    5624:	60 91 55 25 	lds	r22, 0x2555
    5628:	70 91 56 25 	lds	r23, 0x2556
    562c:	80 91 b0 21 	lds	r24, 0x21B0
    5630:	0e 94 a1 29 	call	0x5342	; 0x5342 <xio_usb_putc>
    5634:	22 e0       	ldi	r18, 0x02	; 2
    5636:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_CONTINUE);						// line is still in process
}
    5638:	c9 01       	movw	r24, r18
    563a:	08 95       	ret

0000563c <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	f.sig = XIO_SIG_EOL;
    563c:	81 e0       	ldi	r24, 0x01	; 1
    563e:	80 93 af 21 	sts	0x21AF, r24
	f.buf[f.i] = NUL;
    5642:	80 91 b1 21 	lds	r24, 0x21B1
    5646:	e0 91 b3 21 	lds	r30, 0x21B3
    564a:	f0 91 b4 21 	lds	r31, 0x21B4
    564e:	e8 0f       	add	r30, r24
    5650:	f1 1d       	adc	r31, r1
    5652:	10 82       	st	Z, r1
	f.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    5654:	20 91 ad 21 	lds	r18, 0x21AD
    5658:	30 91 ae 21 	lds	r19, 0x21AE
    565c:	c9 01       	movw	r24, r18
    565e:	9f 7b       	andi	r25, 0xBF	; 191
    5660:	80 93 ad 21 	sts	0x21AD, r24
    5664:	90 93 ae 21 	sts	0x21AE, r25
	if (ECHO(f.flags)) xio_usb_putc('\n',stdout);// echo a newline
    5668:	24 ff       	sbrs	r18, 4
    566a:	07 c0       	rjmp	.+14     	; 0x567a <_readln_NEWLINE+0x3e>
    566c:	60 91 55 25 	lds	r22, 0x2555
    5670:	70 91 56 25 	lds	r23, 0x2556
    5674:	8a e0       	ldi	r24, 0x0A	; 10
    5676:	0e 94 a1 29 	call	0x5342	; 0x5342 <xio_usb_putc>
	return ((int)f.line_func(f.buf));			// call line handler function
    567a:	e0 91 b7 21 	lds	r30, 0x21B7
    567e:	f0 91 b8 21 	lds	r31, 0x21B8
    5682:	80 91 b3 21 	lds	r24, 0x21B3
    5686:	90 91 b4 21 	lds	r25, 0x21B4
    568a:	19 95       	eicall
}
    568c:	08 95       	ret

0000568e <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(f.flags)) {
    568e:	80 91 ad 21 	lds	r24, 0x21AD
    5692:	87 ff       	sbrs	r24, 7
    5694:	03 c0       	rjmp	.+6      	; 0x569c <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    5696:	0e 94 1e 2b 	call	0x563c	; 0x563c <_readln_NEWLINE>
    569a:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    569c:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <_readln_char>
	}
}
    56a0:	08 95       	ret

000056a2 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--f.i >= 0) {
    56a2:	80 91 b1 21 	lds	r24, 0x21B1
    56a6:	81 50       	subi	r24, 0x01	; 1
    56a8:	80 93 b1 21 	sts	0x21B1, r24
		if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    56ac:	80 91 ad 21 	lds	r24, 0x21AD
    56b0:	84 ff       	sbrs	r24, 4
    56b2:	08 c0       	rjmp	.+16     	; 0x56c4 <_readln_DELETE+0x22>
    56b4:	60 91 55 25 	lds	r22, 0x2555
    56b8:	70 91 56 25 	lds	r23, 0x2556
    56bc:	80 91 b0 21 	lds	r24, 0x21B0
    56c0:	0e 94 a1 29 	call	0x5342	; 0x5342 <xio_usb_putc>
	} else {
		f.i = 0;
	}
	return (TG_CONTINUE);						// line is still in process
}
    56c4:	82 e0       	ldi	r24, 0x02	; 2
    56c6:	90 e0       	ldi	r25, 0x00	; 0
    56c8:	08 95       	ret

000056ca <_readln_KILL>:

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    56ca:	84 e0       	ldi	r24, 0x04	; 4
    56cc:	80 93 af 21 	sts	0x21AF, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    56d0:	e0 91 b5 21 	lds	r30, 0x21B5
    56d4:	f0 91 b6 21 	lds	r31, 0x21B6
    56d8:	19 95       	eicall
}

static int _readln_KILL(void)
{
	return _readln_SIG(XIO_SIG_KILL);
}
    56da:	08 95       	ret

000056dc <_readln_PAUSE>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    56dc:	86 e0       	ldi	r24, 0x06	; 6
    56de:	80 93 af 21 	sts	0x21AF, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    56e2:	e0 91 b5 21 	lds	r30, 0x21B5
    56e6:	f0 91 b6 21 	lds	r31, 0x21B6
    56ea:	19 95       	eicall
}

static int _readln_PAUSE(void)
{
	return _readln_SIG(XIO_SIG_PAUSE);
}
    56ec:	08 95       	ret

000056ee <_readln_RESUME>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    56ee:	87 e0       	ldi	r24, 0x07	; 7
    56f0:	80 93 af 21 	sts	0x21AF, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    56f4:	e0 91 b5 21 	lds	r30, 0x21B5
    56f8:	f0 91 b6 21 	lds	r31, 0x21B6
    56fc:	19 95       	eicall
}

static int _readln_RESUME(void)
{
	return _readln_SIG(XIO_SIG_RESUME);
}
    56fe:	08 95       	ret

00005700 <_readln_SHIFTOUT>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    5700:	88 e0       	ldi	r24, 0x08	; 8
    5702:	80 93 af 21 	sts	0x21AF, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    5706:	e0 91 b5 21 	lds	r30, 0x21B5
    570a:	f0 91 b6 21 	lds	r31, 0x21B6
    570e:	19 95       	eicall
}

static int _readln_SHIFTOUT(void)
{
	return _readln_SIG(XIO_SIG_SHIFTOUT);
}
    5710:	08 95       	ret

00005712 <_readln_SHIFTIN>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    5712:	89 e0       	ldi	r24, 0x09	; 9
    5714:	80 93 af 21 	sts	0x21AF, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    5718:	e0 91 b5 21 	lds	r30, 0x21B5
    571c:	f0 91 b6 21 	lds	r31, 0x21B6
    5720:	19 95       	eicall
}

static int _readln_SHIFTIN(void)
{
	return _readln_SIG(XIO_SIG_SHIFTIN);
}
    5722:	08 95       	ret

00005724 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    5724:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5726:	e0 ec       	ldi	r30, 0xC0	; 192
    5728:	f1 e0       	ldi	r31, 0x01	; 1
    572a:	80 91 cf 01 	lds	r24, 0x01CF
    572e:	87 fd       	sbrc	r24, 7
    5730:	fa cf       	rjmp	.-12     	; 0x5726 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    5732:	26 2f       	mov	r18, r22
    5734:	30 e0       	ldi	r19, 0x00	; 0
    5736:	2f 71       	andi	r18, 0x1F	; 31
    5738:	30 70       	andi	r19, 0x00	; 0
    573a:	89 2f       	mov	r24, r25
    573c:	90 e0       	ldi	r25, 0x00	; 0
    573e:	45 e0       	ldi	r20, 0x05	; 5
    5740:	88 0f       	add	r24, r24
    5742:	99 1f       	adc	r25, r25
    5744:	4a 95       	dec	r20
    5746:	e1 f7       	brne	.-8      	; 0x5740 <EEPROM_ReadByte+0x1c>
    5748:	28 2b       	or	r18, r24
    574a:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    574c:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5750:	83 2f       	mov	r24, r19
    5752:	8f 71       	andi	r24, 0x1F	; 31
    5754:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5756:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    5758:	86 e0       	ldi	r24, 0x06	; 6
    575a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    575c:	ef 93       	push	r30
    575e:	ff 93       	push	r31
    5760:	0f 93       	push	r16
    5762:	2f 93       	push	r18
    5764:	eb ec       	ldi	r30, 0xCB	; 203
    5766:	f1 e0       	ldi	r31, 0x01	; 1
    5768:	08 ed       	ldi	r16, 0xD8	; 216
    576a:	21 e0       	ldi	r18, 0x01	; 1
    576c:	04 bf       	out	0x34, r16	; 52
    576e:	20 83       	st	Z, r18
    5770:	2f 91       	pop	r18
    5772:	0f 91       	pop	r16
    5774:	ff 91       	pop	r31
    5776:	ef 91       	pop	r30

	return NVM.DATA0;
    5778:	80 91 c4 01 	lds	r24, 0x01C4
}
    577c:	08 95       	ret

0000577e <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    577e:	68 2f       	mov	r22, r24
    5780:	6f 71       	andi	r22, 0x1F	; 31
    5782:	55 e0       	ldi	r21, 0x05	; 5
    5784:	96 95       	lsr	r25
    5786:	87 95       	ror	r24
    5788:	5a 95       	dec	r21
    578a:	e1 f7       	brne	.-8      	; 0x5784 <eeprom_get_char+0x6>
    578c:	0e 94 92 2b 	call	0x5724	; 0x5724 <EEPROM_ReadByte>
}
    5790:	08 95       	ret

00005792 <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    5792:	8f 92       	push	r8
    5794:	9f 92       	push	r9
    5796:	af 92       	push	r10
    5798:	bf 92       	push	r11
    579a:	cf 92       	push	r12
    579c:	df 92       	push	r13
    579e:	ff 92       	push	r15
    57a0:	0f 93       	push	r16
    57a2:	1f 93       	push	r17
    57a4:	cf 93       	push	r28
    57a6:	df 93       	push	r29
    57a8:	4c 01       	movw	r8, r24
    57aa:	5b 01       	movw	r10, r22
    57ac:	6a 01       	movw	r12, r20
    57ae:	8b 01       	movw	r16, r22
    57b0:	ea 01       	movw	r28, r20
    57b2:	ff 24       	eor	r15, r15
    57b4:	18 c0       	rjmp	.+48     	; 0x57e6 <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    57b6:	c8 01       	movw	r24, r16
    57b8:	0e 94 bf 2b 	call	0x577e	; 0x577e <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    57bc:	ff 20       	and	r15, r15
    57be:	19 f0       	breq	.+6      	; 0x57c6 <memcpy_from_eeprom_with_checksum+0x34>
    57c0:	21 e0       	ldi	r18, 0x01	; 1
    57c2:	30 e0       	ldi	r19, 0x00	; 0
    57c4:	08 c0       	rjmp	.+16     	; 0x57d6 <memcpy_from_eeprom_with_checksum+0x44>
    57c6:	2f 2d       	mov	r18, r15
    57c8:	33 27       	eor	r19, r19
    57ca:	27 fd       	sbrc	r18, 7
    57cc:	30 95       	com	r19
    57ce:	22 27       	eor	r18, r18
    57d0:	33 0f       	add	r19, r19
    57d2:	22 1f       	adc	r18, r18
    57d4:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    57d6:	0f 5f       	subi	r16, 0xFF	; 255
    57d8:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    57da:	f8 2e       	mov	r15, r24
    57dc:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    57de:	f4 01       	movw	r30, r8
    57e0:	81 93       	st	Z+, r24
    57e2:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    57e4:	21 97       	sbiw	r28, 0x01	; 1
    57e6:	20 97       	sbiw	r28, 0x00	; 0
    57e8:	31 f7       	brne	.-52     	; 0x57b6 <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    57ea:	c6 01       	movw	r24, r12
    57ec:	8a 0d       	add	r24, r10
    57ee:	9b 1d       	adc	r25, r11
    57f0:	0e 94 bf 2b 	call	0x577e	; 0x577e <eeprom_get_char>
    57f4:	20 e0       	ldi	r18, 0x00	; 0
    57f6:	30 e0       	ldi	r19, 0x00	; 0
    57f8:	f8 16       	cp	r15, r24
    57fa:	11 f4       	brne	.+4      	; 0x5800 <memcpy_from_eeprom_with_checksum+0x6e>
    57fc:	21 e0       	ldi	r18, 0x01	; 1
    57fe:	30 e0       	ldi	r19, 0x00	; 0
}
    5800:	c9 01       	movw	r24, r18
    5802:	df 91       	pop	r29
    5804:	cf 91       	pop	r28
    5806:	1f 91       	pop	r17
    5808:	0f 91       	pop	r16
    580a:	ff 90       	pop	r15
    580c:	df 90       	pop	r13
    580e:	cf 90       	pop	r12
    5810:	bf 90       	pop	r11
    5812:	af 90       	pop	r10
    5814:	9f 90       	pop	r9
    5816:	8f 90       	pop	r8
    5818:	08 95       	ret

0000581a <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    581a:	80 91 cf 01 	lds	r24, 0x01CF
    581e:	87 fd       	sbrc	r24, 7
    5820:	fc cf       	rjmp	.-8      	; 0x581a <EEPROM_WaitForNVM>
}
    5822:	08 95       	ret

00005824 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5824:	80 91 cf 01 	lds	r24, 0x01CF
    5828:	87 fd       	sbrc	r24, 7
    582a:	fc cf       	rjmp	.-8      	; 0x5824 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    582c:	80 91 cf 01 	lds	r24, 0x01CF
    5830:	81 ff       	sbrs	r24, 1
    5832:	12 c0       	rjmp	.+36     	; 0x5858 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    5834:	86 e3       	ldi	r24, 0x36	; 54
    5836:	e0 ec       	ldi	r30, 0xC0	; 192
    5838:	f1 e0       	ldi	r31, 0x01	; 1
    583a:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    583c:	ef 93       	push	r30
    583e:	ff 93       	push	r31
    5840:	0f 93       	push	r16
    5842:	2f 93       	push	r18
    5844:	eb ec       	ldi	r30, 0xCB	; 203
    5846:	f1 e0       	ldi	r31, 0x01	; 1
    5848:	08 ed       	ldi	r16, 0xD8	; 216
    584a:	21 e0       	ldi	r18, 0x01	; 1
    584c:	04 bf       	out	0x34, r16	; 52
    584e:	20 83       	st	Z, r18
    5850:	2f 91       	pop	r18
    5852:	0f 91       	pop	r16
    5854:	ff 91       	pop	r31
    5856:	ef 91       	pop	r30
    5858:	08 95       	ret

0000585a <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    585a:	df 92       	push	r13
    585c:	ef 92       	push	r14
    585e:	ff 92       	push	r15
    5860:	0f 93       	push	r16
    5862:	1f 93       	push	r17
    5864:	e8 2e       	mov	r14, r24
    5866:	06 2f       	mov	r16, r22
    5868:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    586a:	0e 94 12 2c 	call	0x5824	; 0x5824 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    586e:	e0 ec       	ldi	r30, 0xC0	; 192
    5870:	f1 e0       	ldi	r31, 0x01	; 1
    5872:	83 e3       	ldi	r24, 0x33	; 51
    5874:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    5876:	10 e0       	ldi	r17, 0x00	; 0
    5878:	0f 71       	andi	r16, 0x1F	; 31
    587a:	10 70       	andi	r17, 0x00	; 0
    587c:	ff 24       	eor	r15, r15
    587e:	75 e0       	ldi	r23, 0x05	; 5
    5880:	ee 0c       	add	r14, r14
    5882:	ff 1c       	adc	r15, r15
    5884:	7a 95       	dec	r23
    5886:	e1 f7       	brne	.-8      	; 0x5880 <EEPROM_WriteByte+0x26>
    5888:	0e 29       	or	r16, r14
    588a:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    588c:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    588e:	81 2f       	mov	r24, r17
    5890:	8f 71       	andi	r24, 0x1F	; 31
    5892:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5894:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5896:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5898:	85 e3       	ldi	r24, 0x35	; 53
    589a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    589c:	ef 93       	push	r30
    589e:	ff 93       	push	r31
    58a0:	0f 93       	push	r16
    58a2:	2f 93       	push	r18
    58a4:	eb ec       	ldi	r30, 0xCB	; 203
    58a6:	f1 e0       	ldi	r31, 0x01	; 1
    58a8:	08 ed       	ldi	r16, 0xD8	; 216
    58aa:	21 e0       	ldi	r18, 0x01	; 1
    58ac:	04 bf       	out	0x34, r16	; 52
    58ae:	20 83       	st	Z, r18
    58b0:	2f 91       	pop	r18
    58b2:	0f 91       	pop	r16
    58b4:	ff 91       	pop	r31
    58b6:	ef 91       	pop	r30
}
    58b8:	1f 91       	pop	r17
    58ba:	0f 91       	pop	r16
    58bc:	ff 90       	pop	r15
    58be:	ef 90       	pop	r14
    58c0:	df 90       	pop	r13
    58c2:	08 95       	ret

000058c4 <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    58c4:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    58c6:	68 2f       	mov	r22, r24
    58c8:	6f 71       	andi	r22, 0x1F	; 31
    58ca:	e5 e0       	ldi	r30, 0x05	; 5
    58cc:	96 95       	lsr	r25
    58ce:	87 95       	ror	r24
    58d0:	ea 95       	dec	r30
    58d2:	e1 f7       	brne	.-8      	; 0x58cc <eeprom_put_char+0x8>
    58d4:	0e 94 2d 2c 	call	0x585a	; 0x585a <EEPROM_WriteByte>
}
    58d8:	08 95       	ret

000058da <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    58da:	8f 92       	push	r8
    58dc:	9f 92       	push	r9
    58de:	af 92       	push	r10
    58e0:	bf 92       	push	r11
    58e2:	cf 92       	push	r12
    58e4:	df 92       	push	r13
    58e6:	ef 92       	push	r14
    58e8:	ff 92       	push	r15
    58ea:	0f 93       	push	r16
    58ec:	df 93       	push	r29
    58ee:	cf 93       	push	r28
    58f0:	0f 92       	push	r0
    58f2:	0f 92       	push	r0
    58f4:	cd b7       	in	r28, 0x3d	; 61
    58f6:	de b7       	in	r29, 0x3e	; 62
    58f8:	5c 01       	movw	r10, r24
    58fa:	6b 01       	movw	r12, r22
    58fc:	7a 01       	movw	r14, r20
    58fe:	4a 01       	movw	r8, r20
    5900:	00 e0       	ldi	r16, 0x00	; 0
    5902:	1e c0       	rjmp	.+60     	; 0x5940 <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    5904:	00 23       	and	r16, r16
    5906:	19 f0       	breq	.+6      	; 0x590e <memcpy_to_eeprom_with_checksum+0x34>
    5908:	21 e0       	ldi	r18, 0x01	; 1
    590a:	30 e0       	ldi	r19, 0x00	; 0
    590c:	08 c0       	rjmp	.+16     	; 0x591e <memcpy_to_eeprom_with_checksum+0x44>
    590e:	20 2f       	mov	r18, r16
    5910:	33 27       	eor	r19, r19
    5912:	27 fd       	sbrc	r18, 7
    5914:	30 95       	com	r19
    5916:	22 27       	eor	r18, r18
    5918:	33 0f       	add	r19, r19
    591a:	22 1f       	adc	r18, r18
    591c:	33 27       	eor	r19, r19
    checksum += *source;
    591e:	f6 01       	movw	r30, r12
    5920:	61 91       	ld	r22, Z+
    5922:	6f 01       	movw	r12, r30
    5924:	06 2f       	mov	r16, r22
    5926:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    5928:	9c 01       	movw	r18, r24
    592a:	2f 5f       	subi	r18, 0xFF	; 255
    592c:	3f 4f       	sbci	r19, 0xFF	; 255
    592e:	29 83       	std	Y+1, r18	; 0x01
    5930:	3a 83       	std	Y+2, r19	; 0x02
    5932:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    5936:	08 94       	sec
    5938:	81 08       	sbc	r8, r1
    593a:	91 08       	sbc	r9, r1
    593c:	89 81       	ldd	r24, Y+1	; 0x01
    593e:	9a 81       	ldd	r25, Y+2	; 0x02
    5940:	81 14       	cp	r8, r1
    5942:	91 04       	cpc	r9, r1
    5944:	f9 f6       	brne	.-66     	; 0x5904 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    5946:	c7 01       	movw	r24, r14
    5948:	8a 0d       	add	r24, r10
    594a:	9b 1d       	adc	r25, r11
    594c:	60 2f       	mov	r22, r16
    594e:	0e 94 62 2c 	call	0x58c4	; 0x58c4 <eeprom_put_char>
}
    5952:	0f 90       	pop	r0
    5954:	0f 90       	pop	r0
    5956:	cf 91       	pop	r28
    5958:	df 91       	pop	r29
    595a:	0f 91       	pop	r16
    595c:	ff 90       	pop	r15
    595e:	ef 90       	pop	r14
    5960:	df 90       	pop	r13
    5962:	cf 90       	pop	r12
    5964:	bf 90       	pop	r11
    5966:	af 90       	pop	r10
    5968:	9f 90       	pop	r9
    596a:	8f 90       	pop	r8
    596c:	08 95       	ret

0000596e <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    596e:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5970:	e0 ec       	ldi	r30, 0xC0	; 192
    5972:	f1 e0       	ldi	r31, 0x01	; 1
    5974:	80 91 cf 01 	lds	r24, 0x01CF
    5978:	87 fd       	sbrc	r24, 7
    597a:	fa cf       	rjmp	.-12     	; 0x5970 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    597c:	83 e3       	ldi	r24, 0x33	; 51
    597e:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    5980:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    5984:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5986:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5988:	64 83       	std	Z+4, r22	; 0x04
}
    598a:	08 95       	ret

0000598c <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    598c:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    598e:	e0 ec       	ldi	r30, 0xC0	; 192
    5990:	f1 e0       	ldi	r31, 0x01	; 1
    5992:	80 91 cf 01 	lds	r24, 0x01CF
    5996:	87 fd       	sbrc	r24, 7
    5998:	fa cf       	rjmp	.-12     	; 0x598e <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    599a:	83 e3       	ldi	r24, 0x33	; 51
    599c:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    599e:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    59a0:	12 82       	std	Z+2, r1	; 0x02
    59a2:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    59a4:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    59a8:	8d 91       	ld	r24, X+
    59aa:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    59ac:	9f 5f       	subi	r25, 0xFF	; 255
    59ae:	90 32       	cpi	r25, 0x20	; 32
    59b0:	c9 f7       	brne	.-14     	; 0x59a4 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    59b2:	08 95       	ret

000059b4 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    59b4:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    59b6:	e0 ec       	ldi	r30, 0xC0	; 192
    59b8:	f1 e0       	ldi	r31, 0x01	; 1
    59ba:	80 91 cf 01 	lds	r24, 0x01CF
    59be:	87 fd       	sbrc	r24, 7
    59c0:	fa cf       	rjmp	.-12     	; 0x59b6 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    59c2:	89 2f       	mov	r24, r25
    59c4:	90 e0       	ldi	r25, 0x00	; 0
    59c6:	a5 e0       	ldi	r26, 0x05	; 5
    59c8:	88 0f       	add	r24, r24
    59ca:	99 1f       	adc	r25, r25
    59cc:	aa 95       	dec	r26
    59ce:	e1 f7       	brne	.-8      	; 0x59c8 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    59d0:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    59d4:	89 2f       	mov	r24, r25
    59d6:	8f 71       	andi	r24, 0x1F	; 31
    59d8:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    59da:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    59dc:	85 e3       	ldi	r24, 0x35	; 53
    59de:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    59e0:	ef 93       	push	r30
    59e2:	ff 93       	push	r31
    59e4:	0f 93       	push	r16
    59e6:	2f 93       	push	r18
    59e8:	eb ec       	ldi	r30, 0xCB	; 203
    59ea:	f1 e0       	ldi	r31, 0x01	; 1
    59ec:	08 ed       	ldi	r16, 0xD8	; 216
    59ee:	21 e0       	ldi	r18, 0x01	; 1
    59f0:	04 bf       	out	0x34, r16	; 52
    59f2:	20 83       	st	Z, r18
    59f4:	2f 91       	pop	r18
    59f6:	0f 91       	pop	r16
    59f8:	ff 91       	pop	r31
    59fa:	ef 91       	pop	r30
}
    59fc:	08 95       	ret

000059fe <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    59fe:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a00:	e0 ec       	ldi	r30, 0xC0	; 192
    5a02:	f1 e0       	ldi	r31, 0x01	; 1
    5a04:	80 91 cf 01 	lds	r24, 0x01CF
    5a08:	87 fd       	sbrc	r24, 7
    5a0a:	fa cf       	rjmp	.-12     	; 0x5a00 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5a0c:	89 2f       	mov	r24, r25
    5a0e:	90 e0       	ldi	r25, 0x00	; 0
    5a10:	b5 e0       	ldi	r27, 0x05	; 5
    5a12:	88 0f       	add	r24, r24
    5a14:	99 1f       	adc	r25, r25
    5a16:	ba 95       	dec	r27
    5a18:	e1 f7       	brne	.-8      	; 0x5a12 <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5a1a:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5a1e:	89 2f       	mov	r24, r25
    5a20:	8f 71       	andi	r24, 0x1F	; 31
    5a22:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5a24:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    5a26:	82 e3       	ldi	r24, 0x32	; 50
    5a28:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5a2a:	ef 93       	push	r30
    5a2c:	ff 93       	push	r31
    5a2e:	0f 93       	push	r16
    5a30:	2f 93       	push	r18
    5a32:	eb ec       	ldi	r30, 0xCB	; 203
    5a34:	f1 e0       	ldi	r31, 0x01	; 1
    5a36:	08 ed       	ldi	r16, 0xD8	; 216
    5a38:	21 e0       	ldi	r18, 0x01	; 1
    5a3a:	04 bf       	out	0x34, r16	; 52
    5a3c:	20 83       	st	Z, r18
    5a3e:	2f 91       	pop	r18
    5a40:	0f 91       	pop	r16
    5a42:	ff 91       	pop	r31
    5a44:	ef 91       	pop	r30
}
    5a46:	08 95       	ret

00005a48 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    5a48:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a4a:	e0 ec       	ldi	r30, 0xC0	; 192
    5a4c:	f1 e0       	ldi	r31, 0x01	; 1
    5a4e:	80 91 cf 01 	lds	r24, 0x01CF
    5a52:	87 fd       	sbrc	r24, 7
    5a54:	fa cf       	rjmp	.-12     	; 0x5a4a <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5a56:	89 2f       	mov	r24, r25
    5a58:	90 e0       	ldi	r25, 0x00	; 0
    5a5a:	25 e0       	ldi	r18, 0x05	; 5
    5a5c:	88 0f       	add	r24, r24
    5a5e:	99 1f       	adc	r25, r25
    5a60:	2a 95       	dec	r18
    5a62:	e1 f7       	brne	.-8      	; 0x5a5c <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5a64:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5a68:	89 2f       	mov	r24, r25
    5a6a:	8f 71       	andi	r24, 0x1F	; 31
    5a6c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5a6e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    5a70:	84 e3       	ldi	r24, 0x34	; 52
    5a72:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5a74:	ef 93       	push	r30
    5a76:	ff 93       	push	r31
    5a78:	0f 93       	push	r16
    5a7a:	2f 93       	push	r18
    5a7c:	eb ec       	ldi	r30, 0xCB	; 203
    5a7e:	f1 e0       	ldi	r31, 0x01	; 1
    5a80:	08 ed       	ldi	r16, 0xD8	; 216
    5a82:	21 e0       	ldi	r18, 0x01	; 1
    5a84:	04 bf       	out	0x34, r16	; 52
    5a86:	20 83       	st	Z, r18
    5a88:	2f 91       	pop	r18
    5a8a:	0f 91       	pop	r16
    5a8c:	ff 91       	pop	r31
    5a8e:	ef 91       	pop	r30
}
    5a90:	08 95       	ret

00005a92 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a92:	80 91 cf 01 	lds	r24, 0x01CF
    5a96:	87 fd       	sbrc	r24, 7
    5a98:	fc cf       	rjmp	.-8      	; 0x5a92 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    5a9a:	80 e3       	ldi	r24, 0x30	; 48
    5a9c:	e0 ec       	ldi	r30, 0xC0	; 192
    5a9e:	f1 e0       	ldi	r31, 0x01	; 1
    5aa0:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5aa2:	ef 93       	push	r30
    5aa4:	ff 93       	push	r31
    5aa6:	0f 93       	push	r16
    5aa8:	2f 93       	push	r18
    5aaa:	eb ec       	ldi	r30, 0xCB	; 203
    5aac:	f1 e0       	ldi	r31, 0x01	; 1
    5aae:	08 ed       	ldi	r16, 0xD8	; 216
    5ab0:	21 e0       	ldi	r18, 0x01	; 1
    5ab2:	04 bf       	out	0x34, r16	; 52
    5ab4:	20 83       	st	Z, r18
    5ab6:	2f 91       	pop	r18
    5ab8:	0f 91       	pop	r16
    5aba:	ff 91       	pop	r31
    5abc:	ef 91       	pop	r30
}
    5abe:	08 95       	ret

00005ac0 <xio_pgm_init>:
 *
 *  Control parameters are defaulted and may be set using xio_pgm_control()
 */

void xio_pgm_init(const uint16_t control)
{
    5ac0:	9c 01       	movw	r18, r24
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;	// set flags to defaults & initial state
    5ac2:	85 e0       	ldi	r24, 0x05	; 5
    5ac4:	90 e0       	ldi	r25, 0x00	; 0
    5ac6:	80 93 e6 21 	sts	0x21E6, r24
    5aca:	90 93 e7 21 	sts	0x21E7, r25
	if (control & XIO_WR) {				// this is actually an error. Ignore for now.
    5ace:	25 ff       	sbrs	r18, 5
    5ad0:	06 c0       	rjmp	.+12     	; 0x5ade <xio_pgm_init+0x1e>
		fpgm.flags |= XIO_FLAG_WR_bm;
    5ad2:	87 e0       	ldi	r24, 0x07	; 7
    5ad4:	90 e0       	ldi	r25, 0x00	; 0
    5ad6:	80 93 e6 21 	sts	0x21E6, r24
    5ada:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOBLOCK) {		// this is also technically a config error.
    5ade:	27 ff       	sbrs	r18, 7
    5ae0:	09 c0       	rjmp	.+18     	; 0x5af4 <xio_pgm_init+0x34>
		fpgm.flags &= ~XIO_FLAG_BLOCK_bm;
    5ae2:	80 91 e6 21 	lds	r24, 0x21E6
    5ae6:	90 91 e7 21 	lds	r25, 0x21E7
    5aea:	8b 7f       	andi	r24, 0xFB	; 251
    5aec:	80 93 e6 21 	sts	0x21E6, r24
    5af0:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_ECHO) {
    5af4:	30 ff       	sbrs	r19, 0
    5af6:	09 c0       	rjmp	.+18     	; 0x5b0a <xio_pgm_init+0x4a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5af8:	80 91 e6 21 	lds	r24, 0x21E6
    5afc:	90 91 e7 21 	lds	r25, 0x21E7
    5b00:	80 61       	ori	r24, 0x10	; 16
    5b02:	80 93 e6 21 	sts	0x21E6, r24
    5b06:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOECHO) {
    5b0a:	31 ff       	sbrs	r19, 1
    5b0c:	09 c0       	rjmp	.+18     	; 0x5b20 <xio_pgm_init+0x60>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5b0e:	80 91 e6 21 	lds	r24, 0x21E6
    5b12:	90 91 e7 21 	lds	r25, 0x21E7
    5b16:	8f 7e       	andi	r24, 0xEF	; 239
    5b18:	80 93 e6 21 	sts	0x21E6, r24
    5b1c:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_CRLF) {
    5b20:	32 ff       	sbrs	r19, 2
    5b22:	09 c0       	rjmp	.+18     	; 0x5b36 <xio_pgm_init+0x76>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5b24:	80 91 e6 21 	lds	r24, 0x21E6
    5b28:	90 91 e7 21 	lds	r25, 0x21E7
    5b2c:	80 62       	ori	r24, 0x20	; 32
    5b2e:	80 93 e6 21 	sts	0x21E6, r24
    5b32:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOCRLF) {
    5b36:	33 ff       	sbrs	r19, 3
    5b38:	09 c0       	rjmp	.+18     	; 0x5b4c <xio_pgm_init+0x8c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5b3a:	80 91 e6 21 	lds	r24, 0x21E6
    5b3e:	90 91 e7 21 	lds	r25, 0x21E7
    5b42:	8f 7d       	andi	r24, 0xDF	; 223
    5b44:	80 93 e6 21 	sts	0x21E6, r24
    5b48:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_LINEMODE) {
    5b4c:	34 ff       	sbrs	r19, 4
    5b4e:	09 c0       	rjmp	.+18     	; 0x5b62 <xio_pgm_init+0xa2>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5b50:	80 91 e6 21 	lds	r24, 0x21E6
    5b54:	90 91 e7 21 	lds	r25, 0x21E7
    5b58:	80 64       	ori	r24, 0x40	; 64
    5b5a:	80 93 e6 21 	sts	0x21E6, r24
    5b5e:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOLINEMODE) {
    5b62:	35 ff       	sbrs	r19, 5
    5b64:	09 c0       	rjmp	.+18     	; 0x5b78 <xio_pgm_init+0xb8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5b66:	80 91 e6 21 	lds	r24, 0x21E6
    5b6a:	90 91 e7 21 	lds	r25, 0x21E7
    5b6e:	8f 7b       	andi	r24, 0xBF	; 191
    5b70:	80 93 e6 21 	sts	0x21E6, r24
    5b74:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_SEMICOLONS) {
    5b78:	36 ff       	sbrs	r19, 6
    5b7a:	09 c0       	rjmp	.+18     	; 0x5b8e <xio_pgm_init+0xce>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5b7c:	80 91 e6 21 	lds	r24, 0x21E6
    5b80:	90 91 e7 21 	lds	r25, 0x21E7
    5b84:	80 68       	ori	r24, 0x80	; 128
    5b86:	80 93 e6 21 	sts	0x21E6, r24
    5b8a:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5b8e:	37 ff       	sbrs	r19, 7
    5b90:	09 c0       	rjmp	.+18     	; 0x5ba4 <xio_pgm_init+0xe4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5b92:	80 91 e6 21 	lds	r24, 0x21E6
    5b96:	90 91 e7 21 	lds	r25, 0x21E7
    5b9a:	8f 77       	andi	r24, 0x7F	; 127
    5b9c:	80 93 e6 21 	sts	0x21E6, r24
    5ba0:	90 93 e7 21 	sts	0x21E7, r25
	}

	fpgm.idx = 0;
    5ba4:	10 92 f4 21 	sts	0x21F4, r1
    5ba8:	10 92 f5 21 	sts	0x21F5, r1
	fpgm.sig = 0;
    5bac:	10 92 e8 21 	sts	0x21E8, r1
	dev_pgm.udata = &(fpgm.sig); 	// bind signals register to pgm FILE struct
    5bb0:	88 ee       	ldi	r24, 0xE8	; 232
    5bb2:	91 e2       	ldi	r25, 0x21	; 33
    5bb4:	80 93 1a 20 	sts	0x201A, r24
    5bb8:	90 93 1b 20 	sts	0x201B, r25
	fpgm.len = sizeof(fpgm.buf);
    5bbc:	82 e0       	ldi	r24, 0x02	; 2
    5bbe:	80 93 eb 21 	sts	0x21EB, r24

	fpgm.sig_func = &xio_null_signal;			// bind null signal handler
    5bc2:	80 e0       	ldi	r24, 0x00	; 0
    5bc4:	97 e2       	ldi	r25, 0x27	; 39
    5bc6:	80 93 ec 21 	sts	0x21EC, r24
    5bca:	90 93 ed 21 	sts	0x21ED, r25
	fpgm.line_func = &xio_null_line;			// bind null line handler
    5bce:	83 e0       	ldi	r24, 0x03	; 3
    5bd0:	97 e2       	ldi	r25, 0x27	; 39
    5bd2:	80 93 ee 21 	sts	0x21EE, r24
    5bd6:	90 93 ef 21 	sts	0x21EF, r25
}
    5bda:	08 95       	ret

00005bdc <xio_pgm_open>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

FILE * xio_pgm_open(const prog_char *addr)
{
	fpgm.flags &= XIO_FLAG_RESET_gm;			// reset the signaling bits
    5bdc:	20 91 e6 21 	lds	r18, 0x21E6
    5be0:	30 91 e7 21 	lds	r19, 0x21E7
    5be4:	3f 70       	andi	r19, 0x0F	; 15
    5be6:	20 93 e6 21 	sts	0x21E6, r18
    5bea:	30 93 e7 21 	sts	0x21E7, r19
	fpgm.pgmbase_P = (PROGMEM char *)addr;		// might want to range check this
    5bee:	80 93 f2 21 	sts	0x21F2, r24
    5bf2:	90 93 f3 21 	sts	0x21F3, r25
	fpgm.idx = 0;
    5bf6:	10 92 f4 21 	sts	0x21F4, r1
    5bfa:	10 92 f5 21 	sts	0x21F5, r1
	return(&dev_pgm);
}
    5bfe:	8e e0       	ldi	r24, 0x0E	; 14
    5c00:	90 e2       	ldi	r25, 0x20	; 32
    5c02:	08 95       	ret

00005c04 <xio_pgm_control>:
 *	XIO_SEMICOLONS <null>		Treat semicolons as line breaks
 *	XIO_NOSEMICOLONS <null>	Y	Don't treat semicolons as line breaks
 */

int8_t xio_pgm_control(const uint16_t control, const int16_t arg)
{
    5c04:	9c 01       	movw	r18, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    5c06:	84 ff       	sbrs	r24, 4
    5c08:	05 c0       	rjmp	.+10     	; 0x5c14 <xio_pgm_control+0x10>
		fpgm.sig_func = (fptr_int_uint8)arg;
    5c0a:	60 93 ec 21 	sts	0x21EC, r22
    5c0e:	70 93 ed 21 	sts	0x21ED, r23
    5c12:	62 c0       	rjmp	.+196    	; 0x5cd8 <xio_pgm_control+0xd4>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    5c14:	85 ff       	sbrs	r24, 5
    5c16:	05 c0       	rjmp	.+10     	; 0x5c22 <xio_pgm_control+0x1e>
		fpgm.line_func = (fptr_int_char_p)arg;
    5c18:	60 93 ee 21 	sts	0x21EE, r22
    5c1c:	70 93 ef 21 	sts	0x21EF, r23
    5c20:	5b c0       	rjmp	.+182    	; 0x5cd8 <xio_pgm_control+0xd4>
		return (0);
	}
	// transfer control flags to internal flag bits
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;		// set flags to defaults & initial state
    5c22:	85 e0       	ldi	r24, 0x05	; 5
    5c24:	90 e0       	ldi	r25, 0x00	; 0
    5c26:	80 93 e6 21 	sts	0x21E6, r24
    5c2a:	90 93 e7 21 	sts	0x21E7, r25
	if (control & XIO_ECHO) {
    5c2e:	30 ff       	sbrs	r19, 0
    5c30:	06 c0       	rjmp	.+12     	; 0x5c3e <xio_pgm_control+0x3a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5c32:	85 e1       	ldi	r24, 0x15	; 21
    5c34:	90 e0       	ldi	r25, 0x00	; 0
    5c36:	80 93 e6 21 	sts	0x21E6, r24
    5c3a:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOECHO) {
    5c3e:	31 ff       	sbrs	r19, 1
    5c40:	09 c0       	rjmp	.+18     	; 0x5c54 <xio_pgm_control+0x50>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5c42:	80 91 e6 21 	lds	r24, 0x21E6
    5c46:	90 91 e7 21 	lds	r25, 0x21E7
    5c4a:	8f 7e       	andi	r24, 0xEF	; 239
    5c4c:	80 93 e6 21 	sts	0x21E6, r24
    5c50:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_CRLF) {
    5c54:	32 ff       	sbrs	r19, 2
    5c56:	09 c0       	rjmp	.+18     	; 0x5c6a <xio_pgm_control+0x66>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5c58:	80 91 e6 21 	lds	r24, 0x21E6
    5c5c:	90 91 e7 21 	lds	r25, 0x21E7
    5c60:	80 62       	ori	r24, 0x20	; 32
    5c62:	80 93 e6 21 	sts	0x21E6, r24
    5c66:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOCRLF) {
    5c6a:	33 ff       	sbrs	r19, 3
    5c6c:	09 c0       	rjmp	.+18     	; 0x5c80 <xio_pgm_control+0x7c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5c6e:	80 91 e6 21 	lds	r24, 0x21E6
    5c72:	90 91 e7 21 	lds	r25, 0x21E7
    5c76:	8f 7d       	andi	r24, 0xDF	; 223
    5c78:	80 93 e6 21 	sts	0x21E6, r24
    5c7c:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_LINEMODE) {
    5c80:	34 ff       	sbrs	r19, 4
    5c82:	09 c0       	rjmp	.+18     	; 0x5c96 <xio_pgm_control+0x92>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5c84:	80 91 e6 21 	lds	r24, 0x21E6
    5c88:	90 91 e7 21 	lds	r25, 0x21E7
    5c8c:	80 64       	ori	r24, 0x40	; 64
    5c8e:	80 93 e6 21 	sts	0x21E6, r24
    5c92:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOLINEMODE) {
    5c96:	35 ff       	sbrs	r19, 5
    5c98:	09 c0       	rjmp	.+18     	; 0x5cac <xio_pgm_control+0xa8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5c9a:	80 91 e6 21 	lds	r24, 0x21E6
    5c9e:	90 91 e7 21 	lds	r25, 0x21E7
    5ca2:	8f 7b       	andi	r24, 0xBF	; 191
    5ca4:	80 93 e6 21 	sts	0x21E6, r24
    5ca8:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_SEMICOLONS) {
    5cac:	36 ff       	sbrs	r19, 6
    5cae:	09 c0       	rjmp	.+18     	; 0x5cc2 <xio_pgm_control+0xbe>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5cb0:	80 91 e6 21 	lds	r24, 0x21E6
    5cb4:	90 91 e7 21 	lds	r25, 0x21E7
    5cb8:	80 68       	ori	r24, 0x80	; 128
    5cba:	80 93 e6 21 	sts	0x21E6, r24
    5cbe:	90 93 e7 21 	sts	0x21E7, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5cc2:	37 ff       	sbrs	r19, 7
    5cc4:	09 c0       	rjmp	.+18     	; 0x5cd8 <xio_pgm_control+0xd4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5cc6:	80 91 e6 21 	lds	r24, 0x21E6
    5cca:	90 91 e7 21 	lds	r25, 0x21E7
    5cce:	8f 77       	andi	r24, 0x7F	; 127
    5cd0:	80 93 e6 21 	sts	0x21E6, r24
    5cd4:	90 93 e7 21 	sts	0x21E7, r25
	}
	return (0);
}
    5cd8:	80 e0       	ldi	r24, 0x00	; 0
    5cda:	08 95       	ret

00005cdc <xio_pgm_putc>:
 */

int xio_pgm_putc(const char c, FILE *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    5cdc:	8f ef       	ldi	r24, 0xFF	; 255
    5cde:	9f ef       	ldi	r25, 0xFF	; 255
    5ce0:	08 95       	ret

00005ce2 <xio_pgm_readln>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_pgm_readln(char *buf, uint8_t len)
{
    5ce2:	9c 01       	movw	r18, r24
	if (!(fpgm.pgmbase_P)) {					// return OK if no file is open
    5ce4:	80 91 f2 21 	lds	r24, 0x21F2
    5ce8:	90 91 f3 21 	lds	r25, 0x21F3
    5cec:	89 2b       	or	r24, r25
    5cee:	a9 f0       	breq	.+42     	; 0x5d1a <xio_pgm_readln+0x38>
		return (TG_OK);					 
	}
	fpgm.sig = XIO_SIG_OK;						// initialize signal
    5cf0:	10 92 e8 21 	sts	0x21E8, r1
	if (fgets(buf, len, &dev_pgm) == NULL) {
    5cf4:	c9 01       	movw	r24, r18
    5cf6:	70 e0       	ldi	r23, 0x00	; 0
    5cf8:	4e e0       	ldi	r20, 0x0E	; 14
    5cfa:	50 e2       	ldi	r21, 0x20	; 32
    5cfc:	0e 94 5d 49 	call	0x92ba	; 0x92ba <fgets>
    5d00:	89 2b       	or	r24, r25
    5d02:	59 f4       	brne	.+22     	; 0x5d1a <xio_pgm_readln+0x38>
		fpgm.pgmbase_P = NULL;
    5d04:	10 92 f2 21 	sts	0x21F2, r1
    5d08:	10 92 f3 21 	sts	0x21F3, r1
		clearerr(&dev_pgm);
    5d0c:	8e e0       	ldi	r24, 0x0E	; 14
    5d0e:	90 e2       	ldi	r25, 0x20	; 32
    5d10:	0e 94 58 49 	call	0x92b0	; 0x92b0 <clearerr>
    5d14:	24 e0       	ldi	r18, 0x04	; 4
    5d16:	30 e0       	ldi	r19, 0x00	; 0
    5d18:	02 c0       	rjmp	.+4      	; 0x5d1e <xio_pgm_readln+0x3c>
		return (TG_EOF);
    5d1a:	20 e0       	ldi	r18, 0x00	; 0
    5d1c:	30 e0       	ldi	r19, 0x00	; 0
//	return (fpgm.status);

	// return directly without dispatch through line function callback
//	fpgm.status = ((int)fpgm.line_func(buf));	// call line handler function
	return (TG_OK);
}
    5d1e:	c9 01       	movw	r24, r18
    5d20:	08 95       	ret

00005d22 <xio_pgm_getc>:
 *		- Note: putc should expand newlines to <cr><lf>
 */

int xio_pgm_getc(FILE *stream)
{
	if (fpgm.flags & XIO_FLAG_EOF_bm) {
    5d22:	40 91 e6 21 	lds	r20, 0x21E6
    5d26:	50 91 e7 21 	lds	r21, 0x21E7
    5d2a:	55 ff       	sbrs	r21, 5
    5d2c:	06 c0       	rjmp	.+12     	; 0x5d3a <xio_pgm_getc+0x18>
		fpgm.sig = XIO_SIG_EOF;
    5d2e:	82 e0       	ldi	r24, 0x02	; 2
    5d30:	80 93 e8 21 	sts	0x21E8, r24
    5d34:	2e ef       	ldi	r18, 0xFE	; 254
    5d36:	3f ef       	ldi	r19, 0xFF	; 255
    5d38:	3f c0       	rjmp	.+126    	; 0x5db8 <xio_pgm_getc+0x96>
		return (_FDEV_EOF);
	}
	if ((fpgm.c = pgm_read_byte(&fpgm.pgmbase_P[fpgm.idx])) == NUL) {
    5d3a:	20 91 f4 21 	lds	r18, 0x21F4
    5d3e:	30 91 f5 21 	lds	r19, 0x21F5
    5d42:	e0 91 f2 21 	lds	r30, 0x21F2
    5d46:	f0 91 f3 21 	lds	r31, 0x21F3
    5d4a:	e2 0f       	add	r30, r18
    5d4c:	f3 1f       	adc	r31, r19
    5d4e:	84 91       	lpm	r24, Z+
    5d50:	80 93 e9 21 	sts	0x21E9, r24
    5d54:	88 23       	and	r24, r24
    5d56:	29 f4       	brne	.+10     	; 0x5d62 <xio_pgm_getc+0x40>
		fpgm.flags |= XIO_FLAG_EOF_bm;
    5d58:	50 62       	ori	r21, 0x20	; 32
    5d5a:	40 93 e6 21 	sts	0x21E6, r20
    5d5e:	50 93 e7 21 	sts	0x21E7, r21
	}
	++fpgm.idx;
    5d62:	2f 5f       	subi	r18, 0xFF	; 255
    5d64:	3f 4f       	sbci	r19, 0xFF	; 255
    5d66:	20 93 f4 21 	sts	0x21F4, r18
    5d6a:	30 93 f5 21 	sts	0x21F5, r19
	if (!LINEMODE(fpgm.flags)) {		// processing is simple if not LINEMODE
    5d6e:	90 91 e6 21 	lds	r25, 0x21E6
    5d72:	96 fd       	sbrc	r25, 6
    5d74:	07 c0       	rjmp	.+14     	; 0x5d84 <xio_pgm_getc+0x62>
		if (ECHO(fpgm.flags)) {
    5d76:	94 ff       	sbrs	r25, 4
    5d78:	1b c0       	rjmp	.+54     	; 0x5db0 <xio_pgm_getc+0x8e>
			putchar(fpgm.c);
    5d7a:	60 91 55 25 	lds	r22, 0x2555
    5d7e:	70 91 56 25 	lds	r23, 0x2556
    5d82:	13 c0       	rjmp	.+38     	; 0x5daa <xio_pgm_getc+0x88>
		}
		return (fpgm.c);
	}
	// now do the LINEMODE stuff
	if (fpgm.c == NUL) {				// perform newline substitutions
    5d84:	88 23       	and	r24, r24
    5d86:	31 f0       	breq	.+12     	; 0x5d94 <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if (fpgm.c == '\r') {
    5d88:	8d 30       	cpi	r24, 0x0D	; 13
    5d8a:	21 f0       	breq	.+8      	; 0x5d94 <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if ((SEMICOLONS(fpgm.flags)) && (fpgm.c == ';')) {
    5d8c:	97 ff       	sbrs	r25, 7
    5d8e:	05 c0       	rjmp	.+10     	; 0x5d9a <xio_pgm_getc+0x78>
    5d90:	8b 33       	cpi	r24, 0x3B	; 59
    5d92:	19 f4       	brne	.+6      	; 0x5d9a <xio_pgm_getc+0x78>
		fpgm.c = '\n';
    5d94:	8a e0       	ldi	r24, 0x0A	; 10
    5d96:	80 93 e9 21 	sts	0x21E9, r24
	}
	if (ECHO(fpgm.flags)) {
    5d9a:	94 ff       	sbrs	r25, 4
    5d9c:	09 c0       	rjmp	.+18     	; 0x5db0 <xio_pgm_getc+0x8e>
		putchar(fpgm.c);
    5d9e:	60 91 55 25 	lds	r22, 0x2555
    5da2:	70 91 56 25 	lds	r23, 0x2556
    5da6:	80 91 e9 21 	lds	r24, 0x21E9
    5daa:	90 e0       	ldi	r25, 0x00	; 0
    5dac:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
	}
	return (fpgm.c);
    5db0:	80 91 e9 21 	lds	r24, 0x21E9
    5db4:	28 2f       	mov	r18, r24
    5db6:	30 e0       	ldi	r19, 0x00	; 0
}
    5db8:	c9 01       	movw	r24, r18
    5dba:	08 95       	ret

00005dbc <_tg_set_source>:
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.source = d;									// d = XIO device #. See xio.h
    5dbc:	80 93 fa 21 	sts	0x21FA, r24
	tg.prompts = TRUE;
    5dc0:	61 e0       	ldi	r22, 0x01	; 1
    5dc2:	60 93 fc 21 	sts	0x21FC, r22

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5dc6:	42 e0       	ldi	r20, 0x02	; 2
    5dc8:	40 93 52 22 	sts	0x2252, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5dcc:	2b e3       	ldi	r18, 0x3B	; 59
    5dce:	3f e2       	ldi	r19, 0x2F	; 47
    5dd0:	20 93 54 22 	sts	0x2254, r18
    5dd4:	30 93 55 22 	sts	0x2255, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5dd8:	90 e5       	ldi	r25, 0x50	; 80
    5dda:	90 93 53 22 	sts	0x2253, r25
	tg.source = d;									// d = XIO device #. See xio.h
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5dde:	40 93 a6 22 	sts	0x22A6, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5de2:	20 93 a8 22 	sts	0x22A8, r18
    5de6:	30 93 a9 22 	sts	0x22A9, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5dea:	90 93 a7 22 	sts	0x22A7, r25
	tg.source = d;									// d = XIO device #. See xio.h
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5dee:	40 93 fa 22 	sts	0x22FA, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5df2:	20 93 fc 22 	sts	0x22FC, r18
    5df6:	30 93 fd 22 	sts	0x22FD, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5dfa:	90 93 fb 22 	sts	0x22FB, r25
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
		tg.dev[i].poll_func = &_tg_poll_signal;
    5dfe:	20 93 50 23 	sts	0x2350, r18
    5e02:	30 93 51 23 	sts	0x2351, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5e06:	90 93 4f 23 	sts	0x234F, r25
	}
	tg.dev[XIO_DEV_PGM].state = TG_SRC_INACTIVE;	// program memory is an exception
    5e0a:	10 92 4e 23 	sts	0x234E, r1

	// make selected device active
	tg.dev[d].state = TG_SRC_ACTIVE;	
    5e0e:	48 2f       	mov	r20, r24
    5e10:	50 e0       	ldi	r21, 0x00	; 0
    5e12:	24 e5       	ldi	r18, 0x54	; 84
    5e14:	30 e0       	ldi	r19, 0x00	; 0
    5e16:	42 9f       	mul	r20, r18
    5e18:	f0 01       	movw	r30, r0
    5e1a:	43 9f       	mul	r20, r19
    5e1c:	f0 0d       	add	r31, r0
    5e1e:	52 9f       	mul	r21, r18
    5e20:	f0 0d       	add	r31, r0
    5e22:	11 24       	eor	r1, r1
    5e24:	e9 50       	subi	r30, 0x09	; 9
    5e26:	fe 4d       	sbci	r31, 0xDE	; 222
    5e28:	67 83       	std	Z+7, r22	; 0x07
	tg.dev[d].poll_func = &_tg_poll_active;
    5e2a:	2a e2       	ldi	r18, 0x2A	; 42
    5e2c:	30 e0       	ldi	r19, 0x00	; 0
    5e2e:	42 9f       	mul	r20, r18
    5e30:	f0 01       	movw	r30, r0
    5e32:	43 9f       	mul	r20, r19
    5e34:	f0 0d       	add	r31, r0
    5e36:	52 9f       	mul	r21, r18
    5e38:	f0 0d       	add	r31, r0
    5e3a:	11 24       	eor	r1, r1
    5e3c:	ee 0f       	add	r30, r30
    5e3e:	ff 1f       	adc	r31, r31
    5e40:	e7 50       	subi	r30, 0x07	; 7
    5e42:	fe 4d       	sbci	r31, 0xDE	; 222
    5e44:	25 e1       	ldi	r18, 0x15	; 21
    5e46:	30 e3       	ldi	r19, 0x30	; 48
    5e48:	27 83       	std	Z+7, r18	; 0x07
    5e4a:	30 87       	std	Z+8, r19	; 0x08
	if (d == XIO_DEV_PGM) {
    5e4c:	84 30       	cpi	r24, 0x04	; 4
    5e4e:	11 f4       	brne	.+4      	; 0x5e54 <_tg_set_source+0x98>
		tg.prompts = FALSE;							// no prompts for file input
    5e50:	10 92 fc 21 	sts	0x21FC, r1
    5e54:	08 95       	ret

00005e56 <tg_pause>:
}

void tg_pause()
{
	return;
}
    5e56:	08 95       	ret

00005e58 <tg_resume>:

void tg_resume()
{
	return;
}
    5e58:	08 95       	ret

00005e5a <tg_kill>:
	return (0);
}

void tg_kill()
{
	_tg_set_source(tg.source_default);	// return control to standard device
    5e5a:	80 91 fb 21 	lds	r24, 0x21FB
    5e5e:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <_tg_set_source>
	mc_motion_stop();					// stop computing and generating motions
    5e62:	0e 94 2a 1b 	call	0x3654	; 0x3654 <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    5e66:	0e 94 49 31 	call	0x6292	; 0x6292 <mv_flush>
	st_stop_steppers();					// stop the steppers
    5e6a:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <st_stop_steppers>
	return;
}
    5e6e:	08 95       	ret

00005e70 <tg_terminate>:

void tg_terminate()
{
	tg_kill();
    5e70:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <tg_kill>
	return;
}
    5e74:	08 95       	ret

00005e76 <_tg_poll_signal>:
 *	If a signal is received it's dispatched from the low-level line reader
 *	Any line that's read is ignored (tossed)
 */

static void _tg_poll_signal(uint8_t d)
{
    5e76:	48 2f       	mov	r20, r24
	if (tg.dev[d].state != TG_SRC_SIGNAL) {			// sanity check
    5e78:	28 2f       	mov	r18, r24
    5e7a:	30 e0       	ldi	r19, 0x00	; 0
    5e7c:	84 e5       	ldi	r24, 0x54	; 84
    5e7e:	90 e0       	ldi	r25, 0x00	; 0
    5e80:	28 9f       	mul	r18, r24
    5e82:	f0 01       	movw	r30, r0
    5e84:	29 9f       	mul	r18, r25
    5e86:	f0 0d       	add	r31, r0
    5e88:	38 9f       	mul	r19, r24
    5e8a:	f0 0d       	add	r31, r0
    5e8c:	11 24       	eor	r1, r1
    5e8e:	e9 50       	subi	r30, 0x09	; 9
    5e90:	fe 4d       	sbci	r31, 0xDE	; 222
    5e92:	87 81       	ldd	r24, Z+7	; 0x07
    5e94:	82 30       	cpi	r24, 0x02	; 2
    5e96:	a9 f4       	brne	.+42     	; 0x5ec2 <_tg_poll_signal+0x4c>
		return;
	}
	tg.status = xio_fget_ln(d, tg.dev[d].buf, tg.dev[d].len);
    5e98:	85 e1       	ldi	r24, 0x15	; 21
    5e9a:	90 e0       	ldi	r25, 0x00	; 0
    5e9c:	28 9f       	mul	r18, r24
    5e9e:	b0 01       	movw	r22, r0
    5ea0:	29 9f       	mul	r18, r25
    5ea2:	70 0d       	add	r23, r0
    5ea4:	38 9f       	mul	r19, r24
    5ea6:	70 0d       	add	r23, r0
    5ea8:	11 24       	eor	r1, r1
    5eaa:	66 0f       	add	r22, r22
    5eac:	77 1f       	adc	r23, r23
    5eae:	66 0f       	add	r22, r22
    5eb0:	77 1f       	adc	r23, r23
    5eb2:	6e 5f       	subi	r22, 0xFE	; 254
    5eb4:	7d 4d       	sbci	r23, 0xDD	; 221
    5eb6:	84 2f       	mov	r24, r20
    5eb8:	40 85       	ldd	r20, Z+8	; 0x08
    5eba:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <xio_fget_ln>
    5ebe:	80 93 f8 21 	sts	0x21F8, r24
    5ec2:	08 95       	ret

00005ec4 <_tg_prompt>:
	tgModeStringDirect
};

void _tg_prompt()
{
	if ((tg.prompts) && (tg.state == TG_STATE_READY_UNPROMPTED)) {
    5ec4:	80 91 fc 21 	lds	r24, 0x21FC
    5ec8:	88 23       	and	r24, r24
    5eca:	09 f1       	breq	.+66     	; 0x5f0e <_tg_prompt+0x4a>
    5ecc:	80 91 f7 21 	lds	r24, 0x21F7
    5ed0:	88 23       	and	r24, r24
    5ed2:	e9 f4       	brne	.+58     	; 0x5f0e <_tg_prompt+0x4a>
		printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5ed4:	80 91 f9 21 	lds	r24, 0x21F9
    5ed8:	e8 2f       	mov	r30, r24
    5eda:	f0 e0       	ldi	r31, 0x00	; 0
    5edc:	ee 0f       	add	r30, r30
    5ede:	ff 1f       	adc	r31, r31
    5ee0:	e8 57       	subi	r30, 0x78	; 120
    5ee2:	f5 4e       	sbci	r31, 0xE5	; 229
    5ee4:	25 91       	lpm	r18, Z+
    5ee6:	34 91       	lpm	r19, Z+
    5ee8:	00 d0       	rcall	.+0      	; 0x5eea <_tg_prompt+0x26>
    5eea:	0f 92       	push	r0
    5eec:	82 ef       	ldi	r24, 0xF2	; 242
    5eee:	9a e1       	ldi	r25, 0x1A	; 26
    5ef0:	ed b7       	in	r30, 0x3d	; 61
    5ef2:	fe b7       	in	r31, 0x3e	; 62
    5ef4:	81 83       	std	Z+1, r24	; 0x01
    5ef6:	92 83       	std	Z+2, r25	; 0x02
    5ef8:	23 83       	std	Z+3, r18	; 0x03
    5efa:	34 83       	std	Z+4, r19	; 0x04
    5efc:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
		tg.state = TG_STATE_READY_PROMPTED;
    5f00:	81 e0       	ldi	r24, 0x01	; 1
    5f02:	80 93 f7 21 	sts	0x21F7, r24
    5f06:	0f 90       	pop	r0
    5f08:	0f 90       	pop	r0
    5f0a:	0f 90       	pop	r0
    5f0c:	0f 90       	pop	r0
	}
	// bastardized prompts for file sources
	if ((!tg.prompts) && (tg.state == TG_STATE_READY_UNPROMPTED)) {
    5f0e:	80 91 fc 21 	lds	r24, 0x21FC
    5f12:	88 23       	and	r24, r24
    5f14:	f1 f4       	brne	.+60     	; 0x5f52 <_tg_prompt+0x8e>
    5f16:	80 91 f7 21 	lds	r24, 0x21F7
    5f1a:	88 23       	and	r24, r24
    5f1c:	d1 f4       	brne	.+52     	; 0x5f52 <_tg_prompt+0x8e>
		printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5f1e:	80 91 f9 21 	lds	r24, 0x21F9
    5f22:	e8 2f       	mov	r30, r24
    5f24:	f0 e0       	ldi	r31, 0x00	; 0
    5f26:	ee 0f       	add	r30, r30
    5f28:	ff 1f       	adc	r31, r31
    5f2a:	e8 57       	subi	r30, 0x78	; 120
    5f2c:	f5 4e       	sbci	r31, 0xE5	; 229
    5f2e:	25 91       	lpm	r18, Z+
    5f30:	34 91       	lpm	r19, Z+
    5f32:	00 d0       	rcall	.+0      	; 0x5f34 <_tg_prompt+0x70>
    5f34:	0f 92       	push	r0
    5f36:	84 ee       	ldi	r24, 0xE4	; 228
    5f38:	9a e1       	ldi	r25, 0x1A	; 26
    5f3a:	ed b7       	in	r30, 0x3d	; 61
    5f3c:	fe b7       	in	r31, 0x3e	; 62
    5f3e:	81 83       	std	Z+1, r24	; 0x01
    5f40:	92 83       	std	Z+2, r25	; 0x02
    5f42:	23 83       	std	Z+3, r18	; 0x03
    5f44:	34 83       	std	Z+4, r19	; 0x04
    5f46:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
    5f4a:	0f 90       	pop	r0
    5f4c:	0f 90       	pop	r0
    5f4e:	0f 90       	pop	r0
    5f50:	0f 90       	pop	r0
    5f52:	08 95       	ret

00005f54 <tg_signal>:
 * tg_signal() - default signal handler to bind to the line readers
 */

int tg_signal(uint8_t sig)
{
	switch (sig) {
    5f54:	84 30       	cpi	r24, 0x04	; 4
    5f56:	99 f0       	breq	.+38     	; 0x5f7e <tg_signal+0x2a>
    5f58:	85 30       	cpi	r24, 0x05	; 5
    5f5a:	89 f0       	breq	.+34     	; 0x5f7e <tg_signal+0x2a>
    5f5c:	82 30       	cpi	r24, 0x02	; 2
    5f5e:	89 f4       	brne	.+34     	; 0x5f82 <tg_signal+0x2e>
		case XIO_SIG_OK: break;
 		case XIO_SIG_EOL: break;

		case XIO_SIG_EOF:
			printf_P(PSTR("\r\nEnd of file encountered\r\n"));
    5f60:	0f 92       	push	r0
    5f62:	0f 92       	push	r0
    5f64:	88 ec       	ldi	r24, 0xC8	; 200
    5f66:	9a e1       	ldi	r25, 0x1A	; 26
    5f68:	ed b7       	in	r30, 0x3d	; 61
    5f6a:	fe b7       	in	r31, 0x3e	; 62
    5f6c:	81 83       	std	Z+1, r24	; 0x01
    5f6e:	92 83       	std	Z+2, r25	; 0x02
    5f70:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
			_tg_prompt();
    5f74:	0f 90       	pop	r0
    5f76:	0f 90       	pop	r0
    5f78:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <_tg_prompt>
    5f7c:	02 c0       	rjmp	.+4      	; 0x5f82 <tg_signal+0x2e>
	return;
}

void tg_terminate()
{
	tg_kill();
    5f7e:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <tg_kill>
		case XIO_SIG_SHIFTOUT: break;
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
}
    5f82:	80 e0       	ldi	r24, 0x00	; 0
    5f84:	90 e0       	ldi	r25, 0x00	; 0
    5f86:	08 95       	ret

00005f88 <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    5f88:	fc 01       	movw	r30, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    5f8a:	80 91 f9 21 	lds	r24, 0x21F9
    5f8e:	88 23       	and	r24, r24
    5f90:	79 f5       	brne	.+94     	; 0x5ff0 <tg_parser+0x68>
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
    5f92:	90 81       	ld	r25, Z
    5f94:	89 2f       	mov	r24, r25
    5f96:	81 56       	subi	r24, 0x61	; 97
    5f98:	8a 31       	cpi	r24, 0x1A	; 26
    5f9a:	10 f4       	brcc	.+4      	; 0x5fa0 <tg_parser+0x18>
			buf[0] = buf[0]-'a'+'A';
    5f9c:	90 52       	subi	r25, 0x20	; 32
    5f9e:	90 83       	st	Z, r25
		}
		switch (buf[0]) {
    5fa0:	80 81       	ld	r24, Z
    5fa2:	86 34       	cpi	r24, 0x46	; 70
    5fa4:	b1 f0       	breq	.+44     	; 0x5fd2 <tg_parser+0x4a>
    5fa6:	87 34       	cpi	r24, 0x47	; 71
    5fa8:	38 f4       	brcc	.+14     	; 0x5fb8 <tg_parser+0x30>
    5faa:	83 34       	cpi	r24, 0x43	; 67
    5fac:	61 f0       	breq	.+24     	; 0x5fc6 <tg_parser+0x3e>
    5fae:	84 34       	cpi	r24, 0x44	; 68
    5fb0:	71 f0       	breq	.+28     	; 0x5fce <tg_parser+0x46>
    5fb2:	8f 33       	cpi	r24, 0x3F	; 63
    5fb4:	d9 f4       	brne	.+54     	; 0x5fec <tg_parser+0x64>
    5fb6:	07 c0       	rjmp	.+14     	; 0x5fc6 <tg_parser+0x3e>
    5fb8:	87 34       	cpi	r24, 0x47	; 71
    5fba:	19 f0       	breq	.+6      	; 0x5fc2 <tg_parser+0x3a>
    5fbc:	8d 54       	subi	r24, 0x4D	; 77
    5fbe:	82 30       	cpi	r24, 0x02	; 2
    5fc0:	a8 f4       	brcc	.+42     	; 0x5fec <tg_parser+0x64>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5fc2:	82 e0       	ldi	r24, 0x02	; 2
    5fc4:	01 c0       	rjmp	.+2      	; 0x5fc8 <tg_parser+0x40>
	if (tg.mode == TG_CONTROL_MODE) {
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
			buf[0] = buf[0]-'a'+'A';
		}
		switch (buf[0]) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    5fc6:	81 e0       	ldi	r24, 0x01	; 1
    5fc8:	80 93 f9 21 	sts	0x21F9, r24
    5fcc:	11 c0       	rjmp	.+34     	; 0x5ff0 <tg_parser+0x68>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5fce:	83 e0       	ldi	r24, 0x03	; 3
    5fd0:	fb cf       	rjmp	.-10     	; 0x5fc8 <tg_parser+0x40>
//	xio_pgm_open(PGMFILE(&square_circle_test100));
//	xio_pgm_open(PGMFILE(&spiral_test50a));
//	xio_pgm_open(PGMFILE(&spiral_test5));

//	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
	xio_pgm_open(PGMFILE(&zoetrope));
    5fd2:	8b eb       	ldi	r24, 0xBB	; 187
    5fd4:	9c e0       	ldi	r25, 0x0C	; 12
    5fd6:	0e 94 ee 2d 	call	0x5bdc	; 0x5bdc <xio_pgm_open>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5fda:	82 e0       	ldi	r24, 0x02	; 2
    5fdc:	80 93 f9 21 	sts	0x21F9, r24
//	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
	xio_pgm_open(PGMFILE(&zoetrope));

	// set mode and source for file mode
	_tg_set_mode(TG_GCODE_MODE);
	_tg_set_source(XIO_DEV_PGM);
    5fe0:	84 e0       	ldi	r24, 0x04	; 4
    5fe2:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <_tg_set_source>
    5fe6:	20 e0       	ldi	r18, 0x00	; 0
    5fe8:	30 e0       	ldi	r19, 0x00	; 0
    5fea:	1d c0       	rjmp	.+58     	; 0x6026 <__stack+0x27>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5fec:	10 92 f9 21 	sts	0x21F9, r1
			case 'F': return (_tg_test_file());
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    5ff0:	10 92 f8 21 	sts	0x21F8, r1
	switch (tg.mode) {
    5ff4:	80 91 f9 21 	lds	r24, 0x21F9
    5ff8:	82 30       	cpi	r24, 0x02	; 2
    5ffa:	41 f0       	breq	.+16     	; 0x600c <__stack+0xd>
    5ffc:	83 30       	cpi	r24, 0x03	; 3
    5ffe:	51 f0       	breq	.+20     	; 0x6014 <__stack+0x15>
    6000:	81 30       	cpi	r24, 0x01	; 1
    6002:	69 f4       	brne	.+26     	; 0x601e <__stack+0x1f>
//		case TG_CONTROL_MODE: 
//			break;

		case TG_CONFIG_MODE:
			tg.status = cfg_parse(buf);
    6004:	cf 01       	movw	r24, r30
    6006:	0e 94 0d 19 	call	0x321a	; 0x321a <cfg_parse>
    600a:	07 c0       	rjmp	.+14     	; 0x601a <__stack+0x1b>
			break;

		case TG_GCODE_MODE: 
			tg.status = gc_gcode_parser(buf);
    600c:	cf 01       	movw	r24, r30
    600e:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <gc_gcode_parser>
    6012:	03 c0       	rjmp	.+6      	; 0x601a <__stack+0x1b>
			break;

		case TG_DIRECT_DRIVE_MODE:
			tg.status = dd_parser(buf);
    6014:	cf 01       	movw	r24, r30
    6016:	0e 94 fe 30 	call	0x61fc	; 0x61fc <dd_parser>
    601a:	80 93 f8 21 	sts	0x21F8, r24
			break;
	}
	return (tg.status);
    601e:	80 91 f8 21 	lds	r24, 0x21F8
    6022:	28 2f       	mov	r18, r24
    6024:	30 e0       	ldi	r19, 0x00	; 0
}
    6026:	c9 01       	movw	r24, r18
    6028:	08 95       	ret

0000602a <_tg_poll_active>:
/* 
 * _tg_poll_active() - Perform a non-blocking line read from active input device
 */

static void _tg_poll_active(uint8_t d)
{
    602a:	cf 93       	push	r28
    602c:	df 93       	push	r29
    602e:	48 2f       	mov	r20, r24
	if (tg.dev[d].state != TG_SRC_ACTIVE) {			// sanity check
    6030:	28 2f       	mov	r18, r24
    6032:	30 e0       	ldi	r19, 0x00	; 0
    6034:	84 e5       	ldi	r24, 0x54	; 84
    6036:	90 e0       	ldi	r25, 0x00	; 0
    6038:	28 9f       	mul	r18, r24
    603a:	f0 01       	movw	r30, r0
    603c:	29 9f       	mul	r18, r25
    603e:	f0 0d       	add	r31, r0
    6040:	38 9f       	mul	r19, r24
    6042:	f0 0d       	add	r31, r0
    6044:	11 24       	eor	r1, r1
    6046:	e9 50       	subi	r30, 0x09	; 9
    6048:	fe 4d       	sbci	r31, 0xDE	; 222
    604a:	97 81       	ldd	r25, Z+7	; 0x07
    604c:	91 30       	cpi	r25, 0x01	; 1
    604e:	09 f0       	breq	.+2      	; 0x6052 <_tg_poll_active+0x28>
    6050:	6c c0       	rjmp	.+216    	; 0x612a <_tg_poll_active+0x100>
		return;
	}

	// special handling for file sources
	if (tg.source == XIO_DEV_PGM) {
    6052:	80 91 fa 21 	lds	r24, 0x21FA
    6056:	84 30       	cpi	r24, 0x04	; 4
    6058:	39 f4       	brne	.+14     	; 0x6068 <_tg_poll_active+0x3e>
		if (tg.state == TG_STATE_READY_UNPROMPTED) {
    605a:	80 91 f7 21 	lds	r24, 0x21F7
    605e:	88 23       	and	r24, r24
    6060:	09 f0       	breq	.+2      	; 0x6064 <_tg_poll_active+0x3a>
    6062:	63 c0       	rjmp	.+198    	; 0x612a <_tg_poll_active+0x100>
			tg.state = TG_STATE_READY_PROMPTED; 	// issue "virtual prompt"
    6064:	90 93 f7 21 	sts	0x21F7, r25
			return;									// not ready for next line
		}
	}

	// read input line or return if not a completed line
	if ((tg.status = xio_fget_ln(d, tg.dev[d].buf, tg.dev[d].len)) == TG_OK) {
    6068:	85 e1       	ldi	r24, 0x15	; 21
    606a:	90 e0       	ldi	r25, 0x00	; 0
    606c:	28 9f       	mul	r18, r24
    606e:	e0 01       	movw	r28, r0
    6070:	29 9f       	mul	r18, r25
    6072:	d0 0d       	add	r29, r0
    6074:	38 9f       	mul	r19, r24
    6076:	d0 0d       	add	r29, r0
    6078:	11 24       	eor	r1, r1
    607a:	cc 0f       	add	r28, r28
    607c:	dd 1f       	adc	r29, r29
    607e:	cc 0f       	add	r28, r28
    6080:	dd 1f       	adc	r29, r29
    6082:	ce 5f       	subi	r28, 0xFE	; 254
    6084:	dd 4d       	sbci	r29, 0xDD	; 221
    6086:	84 e5       	ldi	r24, 0x54	; 84
    6088:	90 e0       	ldi	r25, 0x00	; 0
    608a:	28 9f       	mul	r18, r24
    608c:	f0 01       	movw	r30, r0
    608e:	29 9f       	mul	r18, r25
    6090:	f0 0d       	add	r31, r0
    6092:	38 9f       	mul	r19, r24
    6094:	f0 0d       	add	r31, r0
    6096:	11 24       	eor	r1, r1
    6098:	e9 50       	subi	r30, 0x09	; 9
    609a:	fe 4d       	sbci	r31, 0xDE	; 222
    609c:	84 2f       	mov	r24, r20
    609e:	be 01       	movw	r22, r28
    60a0:	40 85       	ldd	r20, Z+8	; 0x08
    60a2:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <xio_fget_ln>
    60a6:	80 93 f8 21 	sts	0x21F8, r24
    60aa:	88 23       	and	r24, r24
    60ac:	b1 f4       	brne	.+44     	; 0x60da <_tg_poll_active+0xb0>
		if (tg.state >= TG_STATE_READING_COMMAND) {
    60ae:	80 91 f7 21 	lds	r24, 0x21F7
    60b2:	82 30       	cpi	r24, 0x02	; 2
    60b4:	68 f0       	brcs	.+26     	; 0x60d0 <_tg_poll_active+0xa6>
			printf_P(PSTR("COMMAND OVERRUN ERROR. SLOW DOWN!\n"));
    60b6:	0f 92       	push	r0
    60b8:	0f 92       	push	r0
    60ba:	85 ea       	ldi	r24, 0xA5	; 165
    60bc:	9a e1       	ldi	r25, 0x1A	; 26
    60be:	ed b7       	in	r30, 0x3d	; 61
    60c0:	fe b7       	in	r31, 0x3e	; 62
    60c2:	81 83       	std	Z+1, r24	; 0x01
    60c4:	92 83       	std	Z+2, r25	; 0x02
    60c6:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
    60ca:	0f 90       	pop	r0
    60cc:	0f 90       	pop	r0
    60ce:	2d c0       	rjmp	.+90     	; 0x612a <_tg_poll_active+0x100>
			return;
		} 
		tg.status = tg_parser(tg.dev[d].buf);	// dispatch to parser
    60d0:	ce 01       	movw	r24, r28
    60d2:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <tg_parser>
    60d6:	80 93 f8 21 	sts	0x21F8, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_STATE_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    60da:	80 91 f8 21 	lds	r24, 0x21F8
    60de:	82 30       	cpi	r24, 0x02	; 2
    60e0:	61 f0       	breq	.+24     	; 0x60fa <_tg_poll_active+0xd0>
    60e2:	83 30       	cpi	r24, 0x03	; 3
    60e4:	28 f4       	brcc	.+10     	; 0x60f0 <_tg_poll_active+0xc6>
    60e6:	88 23       	and	r24, r24
    60e8:	f1 f0       	breq	.+60     	; 0x6126 <_tg_poll_active+0xfc>
    60ea:	81 30       	cpi	r24, 0x01	; 1
    60ec:	e1 f4       	brne	.+56     	; 0x6126 <_tg_poll_active+0xfc>
    60ee:	1d c0       	rjmp	.+58     	; 0x612a <_tg_poll_active+0x100>
    60f0:	83 30       	cpi	r24, 0x03	; 3
    60f2:	31 f0       	breq	.+12     	; 0x6100 <_tg_poll_active+0xd6>
    60f4:	84 30       	cpi	r24, 0x04	; 4
    60f6:	b9 f4       	brne	.+46     	; 0x6126 <_tg_poll_active+0xfc>
    60f8:	06 c0       	rjmp	.+12     	; 0x6106 <_tg_poll_active+0xdc>
		case TG_NOOP: {
			break;
		}

		case TG_CONTINUE: { 						// returned without a new line
			tg.state = TG_STATE_READING_COMMAND; 
    60fa:	80 93 f7 21 	sts	0x21F7, r24
    60fe:	15 c0       	rjmp	.+42     	; 0x612a <_tg_poll_active+0x100>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    6100:	10 92 f9 21 	sts	0x21F9, r1
    6104:	10 c0       	rjmp	.+32     	; 0x6126 <_tg_poll_active+0xfc>
			tg.state = TG_STATE_READY_UNPROMPTED;
			break;
		}
					  	
		case TG_EOF: {								// file devices only
			printf_P(PSTR("End of command file\n"));
    6106:	0f 92       	push	r0
    6108:	0f 92       	push	r0
    610a:	80 e9       	ldi	r24, 0x90	; 144
    610c:	9a e1       	ldi	r25, 0x1A	; 26
    610e:	ed b7       	in	r30, 0x3d	; 61
    6110:	fe b7       	in	r31, 0x3e	; 62
    6112:	81 83       	std	Z+1, r24	; 0x01
    6114:	92 83       	std	Z+2, r25	; 0x02
    6116:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
			_tg_set_source(tg.source_default);		// reset to default src
    611a:	0f 90       	pop	r0
    611c:	0f 90       	pop	r0
    611e:	80 91 fb 21 	lds	r24, 0x21FB
    6122:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <_tg_set_source>
			tg.state = TG_STATE_READY_UNPROMPTED;
			break;
		}
		default: {
			tg.state = TG_STATE_READY_UNPROMPTED;	// traps various error returns
    6126:	10 92 f7 21 	sts	0x21F7, r1
		}
	}
}
    612a:	df 91       	pop	r29
    612c:	cf 91       	pop	r28
    612e:	08 95       	ret

00006130 <tg_controller>:
 *	more to the point - a hack. If the flow of control gets much more complicated 
 *	it will make sense to replace this section with an event driven dispatcher.
 */

void tg_controller()
{
    6130:	cf 93       	push	r28
    6132:	df 93       	push	r29
//	uint8_t i = 1;

	_tg_prompt();		// Send a prompt - but only if controller is ready for input
    6134:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <_tg_prompt>

	if ((tg.status = mc_line_continuation()) == TG_OK) { // Run the line generator 
    6138:	0e 94 92 1b 	call	0x3724	; 0x3724 <mc_line_continuation>
    613c:	80 93 f8 21 	sts	0x21F8, r24
    6140:	88 23       	and	r24, r24
    6142:	31 f0       	breq	.+12     	; 0x6150 <tg_controller+0x20>
		tg.state = TG_STATE_READY_UNPROMPTED;
		return;
	}

	if ((tg.status = mc_arc_continuation()) == TG_OK) {	 // Run the arc generator 
    6144:	0e 94 72 1e 	call	0x3ce4	; 0x3ce4 <mc_arc_continuation>
    6148:	80 93 f8 21 	sts	0x21F8, r24
    614c:	88 23       	and	r24, r24
    614e:	19 f4       	brne	.+6      	; 0x6156 <tg_controller+0x26>
		tg.state = TG_STATE_READY_UNPROMPTED;
    6150:	10 92 f7 21 	sts	0x21F7, r1
    6154:	21 c0       	rjmp	.+66     	; 0x6198 <tg_controller+0x68>
		return;
	}

	for (tg.i=1; tg.i < XIO_DEV_MAX; tg.i++) {	// Scan all input devices 
    6156:	81 e0       	ldi	r24, 0x01	; 1
    6158:	80 93 fd 21 	sts	0x21FD, r24
		tg.dev[tg.i].poll_func(tg.i);			//   ...(except /dev/null)
    615c:	ca e2       	ldi	r28, 0x2A	; 42
    615e:	d0 e0       	ldi	r29, 0x00	; 0
    6160:	17 c0       	rjmp	.+46     	; 0x6190 <tg_controller+0x60>
    6162:	82 2f       	mov	r24, r18
    6164:	90 e0       	ldi	r25, 0x00	; 0
    6166:	8c 9f       	mul	r24, r28
    6168:	f0 01       	movw	r30, r0
    616a:	8d 9f       	mul	r24, r29
    616c:	f0 0d       	add	r31, r0
    616e:	9c 9f       	mul	r25, r28
    6170:	f0 0d       	add	r31, r0
    6172:	11 24       	eor	r1, r1
    6174:	ee 0f       	add	r30, r30
    6176:	ff 1f       	adc	r31, r31
    6178:	e7 50       	subi	r30, 0x07	; 7
    617a:	fe 4d       	sbci	r31, 0xDE	; 222
    617c:	07 80       	ldd	r0, Z+7	; 0x07
    617e:	f0 85       	ldd	r31, Z+8	; 0x08
    6180:	e0 2d       	mov	r30, r0
    6182:	82 2f       	mov	r24, r18
    6184:	19 95       	eicall
	if ((tg.status = mc_arc_continuation()) == TG_OK) {	 // Run the arc generator 
		tg.state = TG_STATE_READY_UNPROMPTED;
		return;
	}

	for (tg.i=1; tg.i < XIO_DEV_MAX; tg.i++) {	// Scan all input devices 
    6186:	80 91 fd 21 	lds	r24, 0x21FD
    618a:	8f 5f       	subi	r24, 0xFF	; 255
    618c:	80 93 fd 21 	sts	0x21FD, r24
    6190:	20 91 fd 21 	lds	r18, 0x21FD
    6194:	25 30       	cpi	r18, 0x05	; 5
    6196:	28 f3       	brcs	.-54     	; 0x6162 <tg_controller+0x32>
		tg.dev[tg.i].poll_func(tg.i);			//   ...(except /dev/null)
	}
}
    6198:	df 91       	pop	r29
    619a:	cf 91       	pop	r28
    619c:	08 95       	ret

0000619e <tg_init>:
/*
 * tg_init()
 */

void tg_init() 
{
    619e:	0f 93       	push	r16
    61a0:	1f 93       	push	r17
	xio_control(XIO_DEV_USB, XIO_SIG_FUNC, (int)&tg_signal); // bind sig handler
    61a2:	0a ea       	ldi	r16, 0xAA	; 170
    61a4:	1f e2       	ldi	r17, 0x2F	; 47
    61a6:	81 e0       	ldi	r24, 0x01	; 1
    61a8:	60 e1       	ldi	r22, 0x10	; 16
    61aa:	70 e0       	ldi	r23, 0x00	; 0
    61ac:	a8 01       	movw	r20, r16
    61ae:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <xio_control>
	xio_control(XIO_DEV_RS485, XIO_SIG_FUNC, (int)&tg_signal);
    61b2:	82 e0       	ldi	r24, 0x02	; 2
    61b4:	60 e1       	ldi	r22, 0x10	; 16
    61b6:	70 e0       	ldi	r23, 0x00	; 0
    61b8:	a8 01       	movw	r20, r16
    61ba:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <xio_control>
//	xio_control(XIO_DEV_AUX, XIO_SIG_FUNC, (int)&tg_signal);

	tg.source_default = XIO_DEV_USB; 
    61be:	81 e0       	ldi	r24, 0x01	; 1
    61c0:	80 93 fb 21 	sts	0x21FB, r24
	tg.state = TG_STATE_READY_UNPROMPTED;
    61c4:	10 92 f7 21 	sts	0x21F7, r1
	_tg_set_source(tg.source_default);		// set initial active source
    61c8:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <_tg_set_source>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    61cc:	10 92 f9 21 	sts	0x21F9, r1
	tg.source_default = XIO_DEV_USB; 
	tg.state = TG_STATE_READY_UNPROMPTED;
	_tg_set_source(tg.source_default);		// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode

	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    61d0:	00 d0       	rcall	.+0      	; 0x61d2 <tg_init+0x34>
    61d2:	0f 92       	push	r0
    61d4:	8a e0       	ldi	r24, 0x0A	; 10
    61d6:	9b e1       	ldi	r25, 0x1B	; 27
    61d8:	ed b7       	in	r30, 0x3d	; 61
    61da:	fe b7       	in	r31, 0x3e	; 62
    61dc:	81 83       	std	Z+1, r24	; 0x01
    61de:	92 83       	std	Z+2, r25	; 0x02
    61e0:	80 e0       	ldi	r24, 0x00	; 0
    61e2:	9b e1       	ldi	r25, 0x1B	; 27
    61e4:	83 83       	std	Z+3, r24	; 0x03
    61e6:	94 83       	std	Z+4, r25	; 0x04
    61e8:	0e 94 bc 49 	call	0x9378	; 0x9378 <printf_P>
    61ec:	0f 90       	pop	r0
    61ee:	0f 90       	pop	r0
    61f0:	0f 90       	pop	r0
    61f2:	0f 90       	pop	r0
}
    61f4:	1f 91       	pop	r17
    61f6:	0f 91       	pop	r16
    61f8:	08 95       	ret

000061fa <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    61fa:	08 95       	ret

000061fc <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    61fc:	80 e0       	ldi	r24, 0x00	; 0
    61fe:	90 e0       	ldi	r25, 0x00	; 0
    6200:	08 95       	ret

00006202 <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    6202:	10 92 a2 23 	sts	0x23A2, r1
	mv.move_buffer_tail = 0;
    6206:	10 92 a3 23 	sts	0x23A3, r1
}
    620a:	08 95       	ret

0000620c <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    620c:	90 91 a2 23 	lds	r25, 0x23A2
    6210:	80 91 a3 23 	lds	r24, 0x23A3
    6214:	98 17       	cp	r25, r24
    6216:	19 f4       	brne	.+6      	; 0x621e <mv_dequeue_move_buffer+0x12>
    6218:	20 e0       	ldi	r18, 0x00	; 0
    621a:	30 e0       	ldi	r19, 0x00	; 0
    621c:	17 c0       	rjmp	.+46     	; 0x624c <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    621e:	90 91 a3 23 	lds	r25, 0x23A3
    6222:	8b e1       	ldi	r24, 0x1B	; 27
    6224:	98 9f       	mul	r25, r24
    6226:	90 01       	movw	r18, r0
    6228:	11 24       	eor	r1, r1
    622a:	2a 55       	subi	r18, 0x5A	; 90
    622c:	3c 4d       	sbci	r19, 0xDC	; 220
    622e:	20 93 a4 23 	sts	0x23A4, r18
    6232:	30 93 a5 23 	sts	0x23A5, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    6236:	80 91 a3 23 	lds	r24, 0x23A3
    623a:	8f 5f       	subi	r24, 0xFF	; 255
    623c:	80 93 a3 23 	sts	0x23A3, r24
    6240:	80 91 a3 23 	lds	r24, 0x23A3
    6244:	84 30       	cpi	r24, 0x04	; 4
    6246:	10 f0       	brcs	.+4      	; 0x624c <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    6248:	10 92 a3 23 	sts	0x23A3, r1
	}
	return (mv.p); 
}
    624c:	c9 01       	movw	r24, r18
    624e:	08 95       	ret

00006250 <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    6250:	90 91 a2 23 	lds	r25, 0x23A2
    6254:	9f 5f       	subi	r25, 0xFF	; 255
    6256:	94 30       	cpi	r25, 0x04	; 4
    6258:	08 f0       	brcs	.+2      	; 0x625c <mv_test_move_buffer_full+0xc>
    625a:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    625c:	80 91 a3 23 	lds	r24, 0x23A3
    6260:	20 e0       	ldi	r18, 0x00	; 0
    6262:	89 17       	cp	r24, r25
    6264:	09 f4       	brne	.+2      	; 0x6268 <mv_test_move_buffer_full+0x18>
    6266:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    6268:	82 2f       	mov	r24, r18
    626a:	08 95       	ret

0000626c <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    626c:	0b c0       	rjmp	.+22     	; 0x6284 <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    626e:	80 91 48 00 	lds	r24, 0x0048
    6272:	81 60       	ori	r24, 0x01	; 1
    6274:	80 93 48 00 	sts	0x0048, r24
    6278:	88 95       	sleep
    627a:	80 91 48 00 	lds	r24, 0x0048
    627e:	8e 7f       	andi	r24, 0xFE	; 254
    6280:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    6284:	90 91 a3 23 	lds	r25, 0x23A3
    6288:	80 91 a2 23 	lds	r24, 0x23A2
    628c:	98 17       	cp	r25, r24
    628e:	79 f7       	brne	.-34     	; 0x626e <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    6290:	08 95       	ret

00006292 <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    6292:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    6294:	80 91 a2 23 	lds	r24, 0x23A2
    6298:	80 93 a3 23 	sts	0x23A3, r24
	mv.p = NULL;
    629c:	10 92 a4 23 	sts	0x23A4, r1
    62a0:	10 92 a5 23 	sts	0x23A5, r1
	sei();
    62a4:	78 94       	sei
}
    62a6:	08 95       	ret

000062a8 <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    62a8:	2f 92       	push	r2
    62aa:	4f 92       	push	r4
    62ac:	5f 92       	push	r5
    62ae:	6f 92       	push	r6
    62b0:	7f 92       	push	r7
    62b2:	8f 92       	push	r8
    62b4:	9f 92       	push	r9
    62b6:	af 92       	push	r10
    62b8:	bf 92       	push	r11
    62ba:	cf 92       	push	r12
    62bc:	df 92       	push	r13
    62be:	ef 92       	push	r14
    62c0:	ff 92       	push	r15
    62c2:	0f 93       	push	r16
    62c4:	1f 93       	push	r17
    62c6:	df 93       	push	r29
    62c8:	cf 93       	push	r28
    62ca:	cd b7       	in	r28, 0x3d	; 61
    62cc:	de b7       	in	r29, 0x3e	; 62
    62ce:	2e 97       	sbiw	r28, 0x0e	; 14
    62d0:	cd bf       	out	0x3d, r28	; 61
    62d2:	de bf       	out	0x3e, r29	; 62
    62d4:	3b 01       	movw	r6, r22
    62d6:	4c 01       	movw	r8, r24
					// Using 64 bits is expensive! The division goes from ~640 
					// cycles at 32 bits to ~3800 cycles using 64 bits
	uint32_t ticks_per_step; // temp variable

	// Bail on a zero length line (perhaps test for abs val < min line length)
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    62d8:	61 15       	cp	r22, r1
    62da:	71 05       	cpc	r23, r1
    62dc:	81 05       	cpc	r24, r1
    62de:	91 05       	cpc	r25, r1
    62e0:	61 f4       	brne	.+24     	; 0x62fa <mv_queue_move_buffer+0x52>
    62e2:	21 15       	cp	r18, r1
    62e4:	31 05       	cpc	r19, r1
    62e6:	41 05       	cpc	r20, r1
    62e8:	51 05       	cpc	r21, r1
    62ea:	39 f4       	brne	.+14     	; 0x62fa <mv_queue_move_buffer+0x52>
    62ec:	e1 14       	cp	r14, r1
    62ee:	f1 04       	cpc	r15, r1
    62f0:	01 05       	cpc	r16, r1
    62f2:	11 05       	cpc	r17, r1
    62f4:	11 f4       	brne	.+4      	; 0x62fa <mv_queue_move_buffer+0x52>
    62f6:	89 e0       	ldi	r24, 0x09	; 9
    62f8:	e2 c0       	rjmp	.+452    	; 0x64be <mv_queue_move_buffer+0x216>
		return (TG_ZERO_LENGTH_LINE);
	}

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    62fa:	20 90 a2 23 	lds	r2, 0x23A2
    62fe:	23 94       	inc	r2
    6300:	63 e0       	ldi	r22, 0x03	; 3
    6302:	62 15       	cp	r22, r2
    6304:	08 f4       	brcc	.+2      	; 0x6308 <mv_queue_move_buffer+0x60>
    6306:	22 24       	eor	r2, r2
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    6308:	80 91 a3 23 	lds	r24, 0x23A3
    630c:	82 15       	cp	r24, r2
    630e:	11 f4       	brne	.+4      	; 0x6314 <mv_queue_move_buffer+0x6c>
    6310:	86 e0       	ldi	r24, 0x06	; 6
    6312:	d5 c0       	rjmp	.+426    	; 0x64be <mv_queue_move_buffer+0x216>
		return (TG_BUFFER_FULL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    6314:	e0 91 a2 23 	lds	r30, 0x23A2
    6318:	8b e1       	ldi	r24, 0x1B	; 27
    631a:	e8 9f       	mul	r30, r24
    631c:	f0 01       	movw	r30, r0
    631e:	11 24       	eor	r1, r1
    6320:	ea 55       	subi	r30, 0x5A	; 90
    6322:	fc 4d       	sbci	r31, 0xDC	; 220
    6324:	e0 93 a4 23 	sts	0x23A4, r30
    6328:	f0 93 a5 23 	sts	0x23A5, r31
	mv.p->a[X_AXIS].steps = steps_x;
    632c:	60 82       	st	Z, r6
    632e:	71 82       	std	Z+1, r7	; 0x01
    6330:	82 82       	std	Z+2, r8	; 0x02
    6332:	93 82       	std	Z+3, r9	; 0x03
	mv.p->a[Y_AXIS].steps = steps_y;
    6334:	21 87       	std	Z+9, r18	; 0x09
    6336:	32 87       	std	Z+10, r19	; 0x0a
    6338:	43 87       	std	Z+11, r20	; 0x0b
    633a:	54 87       	std	Z+12, r21	; 0x0c
	mv.p->a[Z_AXIS].steps = steps_z;
    633c:	e2 8a       	std	Z+18, r14	; 0x12
    633e:	f3 8a       	std	Z+19, r15	; 0x13
    6340:	04 8b       	std	Z+20, r16	; 0x14
    6342:	15 8b       	std	Z+21, r17	; 0x15

	ticks = microseconds * TICKS_PER_MICROSECOND;
    6344:	65 e0       	ldi	r22, 0x05	; 5
    6346:	aa 0c       	add	r10, r10
    6348:	bb 1c       	adc	r11, r11
    634a:	cc 1c       	adc	r12, r12
    634c:	dd 1c       	adc	r13, r13
    634e:	6a 95       	dec	r22
    6350:	d1 f7       	brne	.-12     	; 0x6346 <mv_queue_move_buffer+0x9e>
    6352:	a6 01       	movw	r20, r12
    6354:	95 01       	movw	r18, r10
    6356:	60 e0       	ldi	r22, 0x00	; 0
    6358:	70 e0       	ldi	r23, 0x00	; 0
    635a:	80 e0       	ldi	r24, 0x00	; 0
    635c:	90 e0       	ldi	r25, 0x00	; 0
    635e:	ab 82       	std	Y+3, r10	; 0x03
    6360:	3c 83       	std	Y+4, r19	; 0x04
    6362:	4d 83       	std	Y+5, r20	; 0x05
    6364:	5e 83       	std	Y+6, r21	; 0x06
    6366:	6f 83       	std	Y+7, r22	; 0x07
    6368:	78 87       	std	Y+8, r23	; 0x08
    636a:	89 87       	std	Y+9, r24	; 0x09
    636c:	9a 87       	std	Y+10, r25	; 0x0a
    636e:	1d 86       	std	Y+13, r1	; 0x0d
    6370:	1e 86       	std	Y+14, r1	; 0x0e

	// load axis values
	for (i = X_AXIS; i <= Z_AXIS; i++) {

		if (mv.p->a[i].steps) { 				// skip axes with zero steps
    6372:	20 91 a4 23 	lds	r18, 0x23A4
    6376:	30 91 a5 23 	lds	r19, 0x23A5
    637a:	ed 85       	ldd	r30, Y+13	; 0x0d
    637c:	fe 85       	ldd	r31, Y+14	; 0x0e
    637e:	53 e0       	ldi	r21, 0x03	; 3
    6380:	ee 0f       	add	r30, r30
    6382:	ff 1f       	adc	r31, r31
    6384:	5a 95       	dec	r21
    6386:	e1 f7       	brne	.-8      	; 0x6380 <mv_queue_move_buffer+0xd8>
    6388:	4d 85       	ldd	r20, Y+13	; 0x0d
    638a:	5e 85       	ldd	r21, Y+14	; 0x0e
    638c:	e4 0f       	add	r30, r20
    638e:	f5 1f       	adc	r31, r21
    6390:	e2 0f       	add	r30, r18
    6392:	f3 1f       	adc	r31, r19
    6394:	80 81       	ld	r24, Z
    6396:	91 81       	ldd	r25, Z+1	; 0x01
    6398:	a2 81       	ldd	r26, Z+2	; 0x02
    639a:	b3 81       	ldd	r27, Z+3	; 0x03
    639c:	00 97       	sbiw	r24, 0x00	; 0
    639e:	a1 05       	cpc	r26, r1
    63a0:	b1 05       	cpc	r27, r1
    63a2:	09 f4       	brne	.+2      	; 0x63a6 <mv_queue_move_buffer+0xfe>
    63a4:	7f c0       	rjmp	.+254    	; 0x64a4 <mv_queue_move_buffer+0x1fc>

			// set direction: (polarity is corrected during execute move)
			(mv.p->a[i].steps < 0) ? 
    63a6:	b7 ff       	sbrs	r27, 7
    63a8:	03 c0       	rjmp	.+6      	; 0x63b0 <mv_queue_move_buffer+0x108>
    63aa:	51 e0       	ldi	r21, 0x01	; 1
    63ac:	50 87       	std	Z+8, r21	; 0x08
    63ae:	01 c0       	rjmp	.+2      	; 0x63b2 <mv_queue_move_buffer+0x10a>
    63b0:	10 86       	std	Z+8, r1	; 0x08
			(mv.p->a[i].direction = 1): 		// CCW = 1 
			(mv.p->a[i].direction = 0);			// CW = 0

			// set steps to absolute value
			mv.p->a[i].steps = labs(mv.p->a[i].steps);
    63b2:	ed 85       	ldd	r30, Y+13	; 0x0d
    63b4:	fe 85       	ldd	r31, Y+14	; 0x0e
    63b6:	43 e0       	ldi	r20, 0x03	; 3
    63b8:	ee 0f       	add	r30, r30
    63ba:	ff 1f       	adc	r31, r31
    63bc:	4a 95       	dec	r20
    63be:	e1 f7       	brne	.-8      	; 0x63b8 <mv_queue_move_buffer+0x110>
    63c0:	6d 85       	ldd	r22, Y+13	; 0x0d
    63c2:	7e 85       	ldd	r23, Y+14	; 0x0e
    63c4:	e6 0f       	add	r30, r22
    63c6:	f7 1f       	adc	r31, r23
    63c8:	e2 0f       	add	r30, r18
    63ca:	f3 1f       	adc	r31, r19
    63cc:	80 81       	ld	r24, Z
    63ce:	91 81       	ldd	r25, Z+1	; 0x01
    63d0:	a2 81       	ldd	r26, Z+2	; 0x02
    63d2:	b3 81       	ldd	r27, Z+3	; 0x03
    63d4:	b7 ff       	sbrs	r27, 7
    63d6:	07 c0       	rjmp	.+14     	; 0x63e6 <mv_queue_move_buffer+0x13e>
    63d8:	b0 95       	com	r27
    63da:	a0 95       	com	r26
    63dc:	90 95       	com	r25
    63de:	81 95       	neg	r24
    63e0:	9f 4f       	sbci	r25, 0xFF	; 255
    63e2:	af 4f       	sbci	r26, 0xFF	; 255
    63e4:	bf 4f       	sbci	r27, 0xFF	; 255
    63e6:	80 83       	st	Z, r24
    63e8:	91 83       	std	Z+1, r25	; 0x01
    63ea:	a2 83       	std	Z+2, r26	; 0x02
    63ec:	b3 83       	std	Z+3, r27	; 0x03

			// Normalize ticks_per_step by right shifting until the MSword = 0
			// Accumulate LSBs shifted out of ticks_per_step into postscale
			mv.p->a[i].postscale = 1;
    63ee:	80 91 a4 23 	lds	r24, 0x23A4
    63f2:	90 91 a5 23 	lds	r25, 0x23A5
    63f6:	89 83       	std	Y+1, r24	; 0x01
    63f8:	9a 83       	std	Y+2, r25	; 0x02
    63fa:	4d 84       	ldd	r4, Y+13	; 0x0d
    63fc:	5e 84       	ldd	r5, Y+14	; 0x0e
    63fe:	23 e0       	ldi	r18, 0x03	; 3
    6400:	44 0c       	add	r4, r4
    6402:	55 1c       	adc	r5, r5
    6404:	2a 95       	dec	r18
    6406:	e1 f7       	brne	.-8      	; 0x6400 <mv_queue_move_buffer+0x158>
    6408:	ed 85       	ldd	r30, Y+13	; 0x0d
    640a:	fe 85       	ldd	r31, Y+14	; 0x0e
    640c:	e4 0d       	add	r30, r4
    640e:	f5 1d       	adc	r31, r5
    6410:	e8 0f       	add	r30, r24
    6412:	f9 1f       	adc	r31, r25
    6414:	df 01       	movw	r26, r30
    6416:	16 96       	adiw	r26, 0x06	; 6
    6418:	ab 87       	std	Y+11, r26	; 0x0b
    641a:	bc 87       	std	Y+12, r27	; 0x0c
    641c:	21 e0       	ldi	r18, 0x01	; 1
    641e:	30 e0       	ldi	r19, 0x00	; 0
    6420:	26 83       	std	Z+6, r18	; 0x06
    6422:	37 83       	std	Z+7, r19	; 0x07
			ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
    6424:	e0 80       	ld	r14, Z
    6426:	f1 80       	ldd	r15, Z+1	; 0x01
    6428:	02 81       	ldd	r16, Z+2	; 0x02
    642a:	13 81       	ldd	r17, Z+3	; 0x03
    642c:	37 01       	movw	r6, r14
    642e:	48 01       	movw	r8, r16
    6430:	99 0c       	add	r9, r9
    6432:	66 08       	sbc	r6, r6
    6434:	76 2c       	mov	r7, r6
    6436:	43 01       	movw	r8, r6
    6438:	2b 81       	ldd	r18, Y+3	; 0x03
    643a:	3c 81       	ldd	r19, Y+4	; 0x04
    643c:	4d 81       	ldd	r20, Y+5	; 0x05
    643e:	5e 81       	ldd	r21, Y+6	; 0x06
    6440:	6f 81       	ldd	r22, Y+7	; 0x07
    6442:	78 85       	ldd	r23, Y+8	; 0x08
    6444:	89 85       	ldd	r24, Y+9	; 0x09
    6446:	9a 85       	ldd	r25, Y+10	; 0x0a
    6448:	57 01       	movw	r10, r14
    644a:	68 01       	movw	r12, r16
    644c:	e6 2c       	mov	r14, r6
    644e:	f6 2c       	mov	r15, r6
    6450:	06 2d       	mov	r16, r6
    6452:	16 2d       	mov	r17, r6
    6454:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <__udivdi3>
    6458:	c9 01       	movw	r24, r18
    645a:	da 01       	movw	r26, r20
    645c:	9c 01       	movw	r18, r24
    645e:	ad 01       	movw	r20, r26
    6460:	b2 01       	movw	r22, r4
			while (ticks_per_step & 0xFFFF0000) {
				ticks_per_step >>= 1;
				mv.p->a[i].postscale <<= 1;
    6462:	eb 85       	ldd	r30, Y+11	; 0x0b
    6464:	fc 85       	ldd	r31, Y+12	; 0x0c
    6466:	0a c0       	rjmp	.+20     	; 0x647c <mv_queue_move_buffer+0x1d4>
			// Normalize ticks_per_step by right shifting until the MSword = 0
			// Accumulate LSBs shifted out of ticks_per_step into postscale
			mv.p->a[i].postscale = 1;
			ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
			while (ticks_per_step & 0xFFFF0000) {
				ticks_per_step >>= 1;
    6468:	56 95       	lsr	r21
    646a:	47 95       	ror	r20
    646c:	37 95       	ror	r19
    646e:	27 95       	ror	r18
				mv.p->a[i].postscale <<= 1;
    6470:	80 81       	ld	r24, Z
    6472:	91 81       	ldd	r25, Z+1	; 0x01
    6474:	88 0f       	add	r24, r24
    6476:	99 1f       	adc	r25, r25
    6478:	80 83       	st	Z, r24
    647a:	91 83       	std	Z+1, r25	; 0x01

			// Normalize ticks_per_step by right shifting until the MSword = 0
			// Accumulate LSBs shifted out of ticks_per_step into postscale
			mv.p->a[i].postscale = 1;
			ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
			while (ticks_per_step & 0xFFFF0000) {
    647c:	da 01       	movw	r26, r20
    647e:	c9 01       	movw	r24, r18
    6480:	80 70       	andi	r24, 0x00	; 0
    6482:	90 70       	andi	r25, 0x00	; 0
    6484:	00 97       	sbiw	r24, 0x00	; 0
    6486:	a1 05       	cpc	r26, r1
    6488:	b1 05       	cpc	r27, r1
    648a:	71 f7       	brne	.-36     	; 0x6468 <mv_queue_move_buffer+0x1c0>
				ticks_per_step >>= 1;
				mv.p->a[i].postscale <<= 1;
			}
			mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    648c:	8d 85       	ldd	r24, Y+13	; 0x0d
    648e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6490:	68 0f       	add	r22, r24
    6492:	79 1f       	adc	r23, r25
    6494:	a9 81       	ldd	r26, Y+1	; 0x01
    6496:	ba 81       	ldd	r27, Y+2	; 0x02
    6498:	a6 0f       	add	r26, r22
    649a:	b7 1f       	adc	r27, r23
    649c:	14 96       	adiw	r26, 0x04	; 4
    649e:	2d 93       	st	X+, r18
    64a0:	3c 93       	st	X, r19
    64a2:	15 97       	sbiw	r26, 0x05	; 5
    64a4:	ed 85       	ldd	r30, Y+13	; 0x0d
    64a6:	fe 85       	ldd	r31, Y+14	; 0x0e
    64a8:	31 96       	adiw	r30, 0x01	; 1
    64aa:	ed 87       	std	Y+13, r30	; 0x0d
    64ac:	fe 87       	std	Y+14, r31	; 0x0e
	mv.p->a[Z_AXIS].steps = steps_z;

	ticks = microseconds * TICKS_PER_MICROSECOND;

	// load axis values
	for (i = X_AXIS; i <= Z_AXIS; i++) {
    64ae:	33 97       	sbiw	r30, 0x03	; 3
    64b0:	09 f0       	breq	.+2      	; 0x64b4 <mv_queue_move_buffer+0x20c>
    64b2:	5f cf       	rjmp	.-322    	; 0x6372 <mv_queue_move_buffer+0xca>
				mv.p->a[i].postscale <<= 1;
			}
			mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		}
	}
	mv.move_buffer_head = next_buffer_head;
    64b4:	20 92 a2 23 	sts	0x23A2, r2
	st_execute_move();
    64b8:	0e 94 97 24 	call	0x492e	; 0x492e <st_execute_move>
    64bc:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    64be:	2e 96       	adiw	r28, 0x0e	; 14
    64c0:	cd bf       	out	0x3d, r28	; 61
    64c2:	de bf       	out	0x3e, r29	; 62
    64c4:	cf 91       	pop	r28
    64c6:	df 91       	pop	r29
    64c8:	1f 91       	pop	r17
    64ca:	0f 91       	pop	r16
    64cc:	ff 90       	pop	r15
    64ce:	ef 90       	pop	r14
    64d0:	df 90       	pop	r13
    64d2:	cf 90       	pop	r12
    64d4:	bf 90       	pop	r11
    64d6:	af 90       	pop	r10
    64d8:	9f 90       	pop	r9
    64da:	8f 90       	pop	r8
    64dc:	7f 90       	pop	r7
    64de:	6f 90       	pop	r6
    64e0:	5f 90       	pop	r5
    64e2:	4f 90       	pop	r4
    64e4:	2f 90       	pop	r2
    64e6:	08 95       	ret

000064e8 <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    64e8:	aa e5       	ldi	r26, 0x5A	; 90
    64ea:	b4 e2       	ldi	r27, 0x24	; 36
	for (uint8_t i=0; i <= A_AXIS; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    64ec:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    64ee:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    64f0:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    64f2:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=0; i <= A_AXIS; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    64f4:	ed 91       	ld	r30, X+
    64f6:	fc 91       	ld	r31, X
    64f8:	11 97       	sbiw	r26, 0x01	; 1
    64fa:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    64fc:	ed 91       	ld	r30, X+
    64fe:	fc 91       	ld	r31, X
    6500:	11 97       	sbiw	r26, 0x01	; 1
    6502:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    6504:	ed 91       	ld	r30, X+
    6506:	fc 91       	ld	r31, X
    6508:	11 97       	sbiw	r26, 0x01	; 1
    650a:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    650c:	ed 91       	ld	r30, X+
    650e:	fc 91       	ld	r31, X
    6510:	11 97       	sbiw	r26, 0x01	; 1
    6512:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    6514:	ed 91       	ld	r30, X+
    6516:	fc 91       	ld	r31, X
    6518:	11 97       	sbiw	r26, 0x01	; 1
    651a:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    651c:	ed 91       	ld	r30, X+
    651e:	fc 91       	ld	r31, X
    6520:	11 97       	sbiw	r26, 0x01	; 1
    6522:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    6524:	ed 91       	ld	r30, X+
    6526:	fc 91       	ld	r31, X
    6528:	11 97       	sbiw	r26, 0x01	; 1
    652a:	31 87       	std	Z+9, r19	; 0x09
    652c:	1f 96       	adiw	r26, 0x0f	; 15
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=0; i <= A_AXIS; i++) {
    652e:	44 e2       	ldi	r20, 0x24	; 36
    6530:	a6 39       	cpi	r26, 0x96	; 150
    6532:	b4 07       	cpc	r27, r20
    6534:	f9 f6       	brne	.-66     	; 0x64f4 <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    6536:	08 95       	ret

00006538 <__vector_65>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    6538:	1f 92       	push	r1
    653a:	0f 92       	push	r0
    653c:	0f b6       	in	r0, 0x3f	; 63
    653e:	0f 92       	push	r0
    6540:	0b b6       	in	r0, 0x3b	; 59
    6542:	0f 92       	push	r0
    6544:	11 24       	eor	r1, r1
    6546:	2f 93       	push	r18
    6548:	3f 93       	push	r19
    654a:	4f 93       	push	r20
    654c:	5f 93       	push	r21
    654e:	6f 93       	push	r22
    6550:	7f 93       	push	r23
    6552:	8f 93       	push	r24
    6554:	9f 93       	push	r25
    6556:	af 93       	push	r26
    6558:	bf 93       	push	r27
    655a:	ef 93       	push	r30
    655c:	ff 93       	push	r31

void _ls_handler() {
	tg_kill();
    655e:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <tg_kill>
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    6562:	ff 91       	pop	r31
    6564:	ef 91       	pop	r30
    6566:	bf 91       	pop	r27
    6568:	af 91       	pop	r26
    656a:	9f 91       	pop	r25
    656c:	8f 91       	pop	r24
    656e:	7f 91       	pop	r23
    6570:	6f 91       	pop	r22
    6572:	5f 91       	pop	r21
    6574:	4f 91       	pop	r20
    6576:	3f 91       	pop	r19
    6578:	2f 91       	pop	r18
    657a:	0f 90       	pop	r0
    657c:	0b be       	out	0x3b, r0	; 59
    657e:	0f 90       	pop	r0
    6580:	0f be       	out	0x3f, r0	; 63
    6582:	0f 90       	pop	r0
    6584:	1f 90       	pop	r1
    6586:	18 95       	reti

00006588 <__vector_64>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    6588:	1f 92       	push	r1
    658a:	0f 92       	push	r0
    658c:	0f b6       	in	r0, 0x3f	; 63
    658e:	0f 92       	push	r0
    6590:	0b b6       	in	r0, 0x3b	; 59
    6592:	0f 92       	push	r0
    6594:	11 24       	eor	r1, r1
    6596:	2f 93       	push	r18
    6598:	3f 93       	push	r19
    659a:	4f 93       	push	r20
    659c:	5f 93       	push	r21
    659e:	6f 93       	push	r22
    65a0:	7f 93       	push	r23
    65a2:	8f 93       	push	r24
    65a4:	9f 93       	push	r25
    65a6:	af 93       	push	r26
    65a8:	bf 93       	push	r27
    65aa:	ef 93       	push	r30
    65ac:	ff 93       	push	r31
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    65ae:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <tg_kill>
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    65b2:	ff 91       	pop	r31
    65b4:	ef 91       	pop	r30
    65b6:	bf 91       	pop	r27
    65b8:	af 91       	pop	r26
    65ba:	9f 91       	pop	r25
    65bc:	8f 91       	pop	r24
    65be:	7f 91       	pop	r23
    65c0:	6f 91       	pop	r22
    65c2:	5f 91       	pop	r21
    65c4:	4f 91       	pop	r20
    65c6:	3f 91       	pop	r19
    65c8:	2f 91       	pop	r18
    65ca:	0f 90       	pop	r0
    65cc:	0b be       	out	0x3b, r0	; 59
    65ce:	0f 90       	pop	r0
    65d0:	0f be       	out	0x3f, r0	; 63
    65d2:	0f 90       	pop	r0
    65d4:	1f 90       	pop	r1
    65d6:	18 95       	reti

000065d8 <__vector_44>:
ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    65d8:	1f 92       	push	r1
    65da:	0f 92       	push	r0
    65dc:	0f b6       	in	r0, 0x3f	; 63
    65de:	0f 92       	push	r0
    65e0:	0b b6       	in	r0, 0x3b	; 59
    65e2:	0f 92       	push	r0
    65e4:	11 24       	eor	r1, r1
    65e6:	2f 93       	push	r18
    65e8:	3f 93       	push	r19
    65ea:	4f 93       	push	r20
    65ec:	5f 93       	push	r21
    65ee:	6f 93       	push	r22
    65f0:	7f 93       	push	r23
    65f2:	8f 93       	push	r24
    65f4:	9f 93       	push	r25
    65f6:	af 93       	push	r26
    65f8:	bf 93       	push	r27
    65fa:	ef 93       	push	r30
    65fc:	ff 93       	push	r31
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    65fe:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <tg_kill>
ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    6602:	ff 91       	pop	r31
    6604:	ef 91       	pop	r30
    6606:	bf 91       	pop	r27
    6608:	af 91       	pop	r26
    660a:	9f 91       	pop	r25
    660c:	8f 91       	pop	r24
    660e:	7f 91       	pop	r23
    6610:	6f 91       	pop	r22
    6612:	5f 91       	pop	r21
    6614:	4f 91       	pop	r20
    6616:	3f 91       	pop	r19
    6618:	2f 91       	pop	r18
    661a:	0f 90       	pop	r0
    661c:	0b be       	out	0x3b, r0	; 59
    661e:	0f 90       	pop	r0
    6620:	0f be       	out	0x3f, r0	; 63
    6622:	0f 90       	pop	r0
    6624:	1f 90       	pop	r1
    6626:	18 95       	reti

00006628 <__vector_43>:

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    6628:	1f 92       	push	r1
    662a:	0f 92       	push	r0
    662c:	0f b6       	in	r0, 0x3f	; 63
    662e:	0f 92       	push	r0
    6630:	0b b6       	in	r0, 0x3b	; 59
    6632:	0f 92       	push	r0
    6634:	11 24       	eor	r1, r1
    6636:	2f 93       	push	r18
    6638:	3f 93       	push	r19
    663a:	4f 93       	push	r20
    663c:	5f 93       	push	r21
    663e:	6f 93       	push	r22
    6640:	7f 93       	push	r23
    6642:	8f 93       	push	r24
    6644:	9f 93       	push	r25
    6646:	af 93       	push	r26
    6648:	bf 93       	push	r27
    664a:	ef 93       	push	r30
    664c:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    664e:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <tg_kill>

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    6652:	ff 91       	pop	r31
    6654:	ef 91       	pop	r30
    6656:	bf 91       	pop	r27
    6658:	af 91       	pop	r26
    665a:	9f 91       	pop	r25
    665c:	8f 91       	pop	r24
    665e:	7f 91       	pop	r23
    6660:	6f 91       	pop	r22
    6662:	5f 91       	pop	r21
    6664:	4f 91       	pop	r20
    6666:	3f 91       	pop	r19
    6668:	2f 91       	pop	r18
    666a:	0f 90       	pop	r0
    666c:	0b be       	out	0x3b, r0	; 59
    666e:	0f 90       	pop	r0
    6670:	0f be       	out	0x3f, r0	; 63
    6672:	0f 90       	pop	r0
    6674:	1f 90       	pop	r1
    6676:	18 95       	reti

00006678 <__vector_105>:
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    6678:	1f 92       	push	r1
    667a:	0f 92       	push	r0
    667c:	0f b6       	in	r0, 0x3f	; 63
    667e:	0f 92       	push	r0
    6680:	0b b6       	in	r0, 0x3b	; 59
    6682:	0f 92       	push	r0
    6684:	11 24       	eor	r1, r1
    6686:	2f 93       	push	r18
    6688:	3f 93       	push	r19
    668a:	4f 93       	push	r20
    668c:	5f 93       	push	r21
    668e:	6f 93       	push	r22
    6690:	7f 93       	push	r23
    6692:	8f 93       	push	r24
    6694:	9f 93       	push	r25
    6696:	af 93       	push	r26
    6698:	bf 93       	push	r27
    669a:	ef 93       	push	r30
    669c:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    669e:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <tg_kill>
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    66a2:	ff 91       	pop	r31
    66a4:	ef 91       	pop	r30
    66a6:	bf 91       	pop	r27
    66a8:	af 91       	pop	r26
    66aa:	9f 91       	pop	r25
    66ac:	8f 91       	pop	r24
    66ae:	7f 91       	pop	r23
    66b0:	6f 91       	pop	r22
    66b2:	5f 91       	pop	r21
    66b4:	4f 91       	pop	r20
    66b6:	3f 91       	pop	r19
    66b8:	2f 91       	pop	r18
    66ba:	0f 90       	pop	r0
    66bc:	0b be       	out	0x3b, r0	; 59
    66be:	0f 90       	pop	r0
    66c0:	0f be       	out	0x3f, r0	; 63
    66c2:	0f 90       	pop	r0
    66c4:	1f 90       	pop	r1
    66c6:	18 95       	reti

000066c8 <__vector_104>:
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    66c8:	1f 92       	push	r1
    66ca:	0f 92       	push	r0
    66cc:	0f b6       	in	r0, 0x3f	; 63
    66ce:	0f 92       	push	r0
    66d0:	0b b6       	in	r0, 0x3b	; 59
    66d2:	0f 92       	push	r0
    66d4:	11 24       	eor	r1, r1
    66d6:	2f 93       	push	r18
    66d8:	3f 93       	push	r19
    66da:	4f 93       	push	r20
    66dc:	5f 93       	push	r21
    66de:	6f 93       	push	r22
    66e0:	7f 93       	push	r23
    66e2:	8f 93       	push	r24
    66e4:	9f 93       	push	r25
    66e6:	af 93       	push	r26
    66e8:	bf 93       	push	r27
    66ea:	ef 93       	push	r30
    66ec:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    66ee:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <tg_kill>
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    66f2:	ff 91       	pop	r31
    66f4:	ef 91       	pop	r30
    66f6:	bf 91       	pop	r27
    66f8:	af 91       	pop	r26
    66fa:	9f 91       	pop	r25
    66fc:	8f 91       	pop	r24
    66fe:	7f 91       	pop	r23
    6700:	6f 91       	pop	r22
    6702:	5f 91       	pop	r21
    6704:	4f 91       	pop	r20
    6706:	3f 91       	pop	r19
    6708:	2f 91       	pop	r18
    670a:	0f 90       	pop	r0
    670c:	0b be       	out	0x3b, r0	; 59
    670e:	0f 90       	pop	r0
    6710:	0f be       	out	0x3f, r0	; 63
    6712:	0f 90       	pop	r0
    6714:	1f 90       	pop	r1
    6716:	18 95       	reti

00006718 <__vector_67>:
/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    6718:	1f 92       	push	r1
    671a:	0f 92       	push	r0
    671c:	0f b6       	in	r0, 0x3f	; 63
    671e:	0f 92       	push	r0
    6720:	0b b6       	in	r0, 0x3b	; 59
    6722:	0f 92       	push	r0
    6724:	11 24       	eor	r1, r1
    6726:	2f 93       	push	r18
    6728:	3f 93       	push	r19
    672a:	4f 93       	push	r20
    672c:	5f 93       	push	r21
    672e:	6f 93       	push	r22
    6730:	7f 93       	push	r23
    6732:	8f 93       	push	r24
    6734:	9f 93       	push	r25
    6736:	af 93       	push	r26
    6738:	bf 93       	push	r27
    673a:	ef 93       	push	r30
    673c:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    673e:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <tg_kill>
/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    6742:	ff 91       	pop	r31
    6744:	ef 91       	pop	r30
    6746:	bf 91       	pop	r27
    6748:	af 91       	pop	r26
    674a:	9f 91       	pop	r25
    674c:	8f 91       	pop	r24
    674e:	7f 91       	pop	r23
    6750:	6f 91       	pop	r22
    6752:	5f 91       	pop	r21
    6754:	4f 91       	pop	r20
    6756:	3f 91       	pop	r19
    6758:	2f 91       	pop	r18
    675a:	0f 90       	pop	r0
    675c:	0b be       	out	0x3b, r0	; 59
    675e:	0f 90       	pop	r0
    6760:	0f be       	out	0x3f, r0	; 63
    6762:	0f 90       	pop	r0
    6764:	1f 90       	pop	r1
    6766:	18 95       	reti

00006768 <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    6768:	1f 92       	push	r1
    676a:	0f 92       	push	r0
    676c:	0f b6       	in	r0, 0x3f	; 63
    676e:	0f 92       	push	r0
    6770:	0b b6       	in	r0, 0x3b	; 59
    6772:	0f 92       	push	r0
    6774:	11 24       	eor	r1, r1
    6776:	2f 93       	push	r18
    6778:	3f 93       	push	r19
    677a:	4f 93       	push	r20
    677c:	5f 93       	push	r21
    677e:	6f 93       	push	r22
    6780:	7f 93       	push	r23
    6782:	8f 93       	push	r24
    6784:	9f 93       	push	r25
    6786:	af 93       	push	r26
    6788:	bf 93       	push	r27
    678a:	ef 93       	push	r30
    678c:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    678e:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <tg_kill>

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    6792:	ff 91       	pop	r31
    6794:	ef 91       	pop	r30
    6796:	bf 91       	pop	r27
    6798:	af 91       	pop	r26
    679a:	9f 91       	pop	r25
    679c:	8f 91       	pop	r24
    679e:	7f 91       	pop	r23
    67a0:	6f 91       	pop	r22
    67a2:	5f 91       	pop	r21
    67a4:	4f 91       	pop	r20
    67a6:	3f 91       	pop	r19
    67a8:	2f 91       	pop	r18
    67aa:	0f 90       	pop	r0
    67ac:	0b be       	out	0x3b, r0	; 59
    67ae:	0f 90       	pop	r0
    67b0:	0f be       	out	0x3f, r0	; 63
    67b2:	0f 90       	pop	r0
    67b4:	1f 90       	pop	r1
    67b6:	18 95       	reti

000067b8 <xio_rs485_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_rs485_init(const uint16_t control)
{
    67b8:	9c 01       	movw	r18, r24
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    67ba:	e8 2f       	mov	r30, r24
    67bc:	ef 70       	andi	r30, 0x0F	; 15

	// transfer control flags to internal flag bits
	fr.flags = XIO_FLAG_RS485_DEFS_gm;		// set flags to defaults & initial state
    67be:	87 e3       	ldi	r24, 0x37	; 55
    67c0:	90 e0       	ldi	r25, 0x00	; 0
    67c2:	80 93 12 24 	sts	0x2412, r24
    67c6:	90 93 13 24 	sts	0x2413, r25
		fr.flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		fr.flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    67ca:	26 ff       	sbrs	r18, 6
    67cc:	06 c0       	rjmp	.+12     	; 0x67da <xio_rs485_init+0x22>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    67ce:	87 e3       	ldi	r24, 0x37	; 55
    67d0:	90 e0       	ldi	r25, 0x00	; 0
    67d2:	80 93 12 24 	sts	0x2412, r24
    67d6:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOBLOCK) {
    67da:	27 ff       	sbrs	r18, 7
    67dc:	06 c0       	rjmp	.+12     	; 0x67ea <xio_rs485_init+0x32>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    67de:	83 e3       	ldi	r24, 0x33	; 51
    67e0:	90 e0       	ldi	r25, 0x00	; 0
    67e2:	80 93 12 24 	sts	0x2412, r24
    67e6:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_ECHO) {
    67ea:	30 ff       	sbrs	r19, 0
    67ec:	09 c0       	rjmp	.+18     	; 0x6800 <xio_rs485_init+0x48>
		fr.flags |= XIO_FLAG_ECHO_bm;
    67ee:	80 91 12 24 	lds	r24, 0x2412
    67f2:	90 91 13 24 	lds	r25, 0x2413
    67f6:	80 61       	ori	r24, 0x10	; 16
    67f8:	80 93 12 24 	sts	0x2412, r24
    67fc:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOECHO) {
    6800:	31 ff       	sbrs	r19, 1
    6802:	09 c0       	rjmp	.+18     	; 0x6816 <xio_rs485_init+0x5e>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    6804:	80 91 12 24 	lds	r24, 0x2412
    6808:	90 91 13 24 	lds	r25, 0x2413
    680c:	8f 7e       	andi	r24, 0xEF	; 239
    680e:	80 93 12 24 	sts	0x2412, r24
    6812:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_CRLF) {
    6816:	32 ff       	sbrs	r19, 2
    6818:	09 c0       	rjmp	.+18     	; 0x682c <xio_rs485_init+0x74>
		fr.flags |= XIO_FLAG_CRLF_bm;
    681a:	80 91 12 24 	lds	r24, 0x2412
    681e:	90 91 13 24 	lds	r25, 0x2413
    6822:	80 62       	ori	r24, 0x20	; 32
    6824:	80 93 12 24 	sts	0x2412, r24
    6828:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOCRLF) {
    682c:	33 ff       	sbrs	r19, 3
    682e:	09 c0       	rjmp	.+18     	; 0x6842 <xio_rs485_init+0x8a>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    6830:	80 91 12 24 	lds	r24, 0x2412
    6834:	90 91 13 24 	lds	r25, 0x2413
    6838:	8f 7d       	andi	r24, 0xDF	; 223
    683a:	80 93 12 24 	sts	0x2412, r24
    683e:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_LINEMODE) {
    6842:	34 ff       	sbrs	r19, 4
    6844:	09 c0       	rjmp	.+18     	; 0x6858 <xio_rs485_init+0xa0>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    6846:	80 91 12 24 	lds	r24, 0x2412
    684a:	90 91 13 24 	lds	r25, 0x2413
    684e:	80 64       	ori	r24, 0x40	; 64
    6850:	80 93 12 24 	sts	0x2412, r24
    6854:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOLINEMODE) {
    6858:	35 ff       	sbrs	r19, 5
    685a:	09 c0       	rjmp	.+18     	; 0x686e <xio_rs485_init+0xb6>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    685c:	80 91 12 24 	lds	r24, 0x2412
    6860:	90 91 13 24 	lds	r25, 0x2413
    6864:	8f 7b       	andi	r24, 0xBF	; 191
    6866:	80 93 12 24 	sts	0x2412, r24
    686a:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_SEMICOLONS) {
    686e:	36 ff       	sbrs	r19, 6
    6870:	09 c0       	rjmp	.+18     	; 0x6884 <xio_rs485_init+0xcc>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    6872:	80 91 12 24 	lds	r24, 0x2412
    6876:	90 91 13 24 	lds	r25, 0x2413
    687a:	80 68       	ori	r24, 0x80	; 128
    687c:	80 93 12 24 	sts	0x2412, r24
    6880:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    6884:	37 ff       	sbrs	r19, 7
    6886:	09 c0       	rjmp	.+18     	; 0x689a <xio_rs485_init+0xe2>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    6888:	80 91 12 24 	lds	r24, 0x2412
    688c:	90 91 13 24 	lds	r25, 0x2413
    6890:	8f 77       	andi	r24, 0x7F	; 127
    6892:	80 93 12 24 	sts	0x2412, r24
    6896:	90 93 13 24 	sts	0x2413, r25
	}

	// character signals and error returns
	fr.sig = 0;
    689a:	10 92 14 24 	sts	0x2414, r1
	dev_rs485.udata = &(fr.sig);				// bind sig register to FILE struct
    689e:	84 e1       	ldi	r24, 0x14	; 20
    68a0:	94 e2       	ldi	r25, 0x24	; 36
    68a2:	80 93 28 20 	sts	0x2028, r24
    68a6:	90 93 29 20 	sts	0x2029, r25

	// setup internal RX/TX buffers
	fr.rx_buf_head = 1;						// can't use location 0
    68aa:	81 e0       	ldi	r24, 0x01	; 1
    68ac:	80 93 1f 24 	sts	0x241F, r24
	fr.rx_buf_tail = 1;
    68b0:	80 93 1e 24 	sts	0x241E, r24
	fr.tx_buf_head = 1;
    68b4:	80 93 21 24 	sts	0x2421, r24
	fr.tx_buf_tail = 1;
    68b8:	80 93 20 24 	sts	0x2420, r24
	fr.len = sizeof(fr.buf);					// offset to zero
    68bc:	82 e0       	ldi	r24, 0x02	; 2
    68be:	80 93 17 24 	sts	0x2417, r24

	// bindings
	fr.sig_func = &xio_null_signal;			// bind null signal handler
    68c2:	80 e0       	ldi	r24, 0x00	; 0
    68c4:	97 e2       	ldi	r25, 0x27	; 39
    68c6:	80 93 1a 24 	sts	0x241A, r24
    68ca:	90 93 1b 24 	sts	0x241B, r25
	fr.line_func = &xio_null_line;			// bind null line handler
    68ce:	83 e0       	ldi	r24, 0x03	; 3
    68d0:	97 e2       	ldi	r25, 0x27	; 39
    68d2:	80 93 1c 24 	sts	0x241C, r24
    68d6:	90 93 1d 24 	sts	0x241D, r25

	fr.usart = &RS485_USART;				// bind USART structure
    68da:	80 eb       	ldi	r24, 0xB0	; 176
    68dc:	98 e0       	ldi	r25, 0x08	; 8
    68de:	80 93 47 24 	sts	0x2447, r24
    68e2:	90 93 48 24 	sts	0x2448, r25
	fr.port = &RS485_PORT;					// bind PORT structure
    68e6:	80 e4       	ldi	r24, 0x40	; 64
    68e8:	96 e0       	ldi	r25, 0x06	; 6
    68ea:	80 93 49 24 	sts	0x2449, r24
    68ee:	90 93 4a 24 	sts	0x244A, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    68f2:	ee 23       	and	r30, r30
    68f4:	09 f4       	brne	.+2      	; 0x68f8 <xio_rs485_init+0x140>
    68f6:	e5 e0       	ldi	r30, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    68f8:	8e 2f       	mov	r24, r30
    68fa:	90 e0       	ldi	r25, 0x00	; 0
    68fc:	fc 01       	movw	r30, r24
    68fe:	ec 5d       	subi	r30, 0xDC	; 220
    6900:	f8 4f       	sbci	r31, 0xF8	; 248
    6902:	e4 91       	lpm	r30, Z+
    6904:	a0 eb       	ldi	r26, 0xB0	; 176
    6906:	b8 e0       	ldi	r27, 0x08	; 8
    6908:	16 96       	adiw	r26, 0x06	; 6
    690a:	ec 93       	st	X, r30
    690c:	16 97       	sbiw	r26, 0x06	; 6
	fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    690e:	81 5d       	subi	r24, 0xD1	; 209
    6910:	98 4f       	sbci	r25, 0xF8	; 248
    6912:	fc 01       	movw	r30, r24
    6914:	84 91       	lpm	r24, Z+
    6916:	17 96       	adiw	r26, 0x07	; 7
    6918:	8c 93       	st	X, r24
    691a:	17 97       	sbiw	r26, 0x07	; 7
	fr.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx on USART
    691c:	88 e1       	ldi	r24, 0x18	; 24
    691e:	14 96       	adiw	r26, 0x04	; 4
    6920:	8c 93       	st	X, r24
    6922:	14 97       	sbiw	r26, 0x04	; 4
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    6924:	81 e2       	ldi	r24, 0x21	; 33
    6926:	13 96       	adiw	r26, 0x03	; 3
    6928:	8c 93       	st	X, r24

	fr.port->DIRCLR = RS485_RX_bm;	// clr RX pin as input
    692a:	e0 e4       	ldi	r30, 0x40	; 64
    692c:	f6 e0       	ldi	r31, 0x06	; 6
    692e:	80 e4       	ldi	r24, 0x40	; 64
    6930:	82 83       	std	Z+2, r24	; 0x02
	fr.port->DIRSET = RS485_TX_bm; 	// set TX pin as output
    6932:	80 e8       	ldi	r24, 0x80	; 128
    6934:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTSET = RS485_TX_bm;	// set TX HI as initial state
    6936:	85 83       	std	Z+5, r24	; 0x05
	fr.port->DIRSET = RS485_DE_bm; 	// Data Enable (TX) to output (TX enabled hi)
    6938:	90 e2       	ldi	r25, 0x20	; 32
    693a:	91 83       	std	Z+1, r25	; 0x01
	fr.port->DIRSET = RS485_RE_bm; 	// Recv Enable (RX) to output (RX enabled lo)
    693c:	80 e1       	ldi	r24, 0x10	; 16
    693e:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTCLR = RS485_DE_bm;	// DE lo initially (TX disabled)
    6940:	96 83       	std	Z+6, r25	; 0x06
	fr.port->OUTCLR = RS485_RE_bm; 	// RE lo initially (RX enabled)
    6942:	86 83       	std	Z+6, r24	; 0x06
}
    6944:	08 95       	ret

00006946 <xio_rs485_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_rs485_control(const uint16_t control, const int16_t arg)
{
    6946:	ac 01       	movw	r20, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    6948:	84 ff       	sbrs	r24, 4
    694a:	05 c0       	rjmp	.+10     	; 0x6956 <xio_rs485_control+0x10>
		fr.sig_func = (fptr_int_uint8)arg;
    694c:	60 93 1a 24 	sts	0x241A, r22
    6950:	70 93 1b 24 	sts	0x241B, r23
    6954:	8b c0       	rjmp	.+278    	; 0x6a6c <xio_rs485_control+0x126>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    6956:	85 ff       	sbrs	r24, 5
    6958:	05 c0       	rjmp	.+10     	; 0x6964 <xio_rs485_control+0x1e>
		fr.line_func = (fptr_int_char_p)arg;
    695a:	60 93 1c 24 	sts	0x241C, r22
    695e:	70 93 1d 24 	sts	0x241D, r23
    6962:	84 c0       	rjmp	.+264    	; 0x6a6c <xio_rs485_control+0x126>
		return (0);
	}
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    6964:	8f 70       	andi	r24, 0x0F	; 15
    6966:	90 70       	andi	r25, 0x00	; 0
    6968:	00 97       	sbiw	r24, 0x00	; 0
    696a:	91 f0       	breq	.+36     	; 0x6990 <xio_rs485_control+0x4a>
		fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    696c:	a0 91 47 24 	lds	r26, 0x2447
    6970:	b0 91 48 24 	lds	r27, 0x2448
    6974:	9c 01       	movw	r18, r24
    6976:	2c 5d       	subi	r18, 0xDC	; 220
    6978:	38 4f       	sbci	r19, 0xF8	; 248
    697a:	f9 01       	movw	r30, r18
    697c:	24 91       	lpm	r18, Z+
    697e:	16 96       	adiw	r26, 0x06	; 6
    6980:	2c 93       	st	X, r18
    6982:	16 97       	sbiw	r26, 0x06	; 6
		fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    6984:	81 5d       	subi	r24, 0xD1	; 209
    6986:	98 4f       	sbci	r25, 0xF8	; 248
    6988:	fc 01       	movw	r30, r24
    698a:	84 91       	lpm	r24, Z+
    698c:	17 96       	adiw	r26, 0x07	; 7
    698e:	8c 93       	st	X, r24
	}
	if (control & XIO_BLOCK) {
    6990:	46 ff       	sbrs	r20, 6
    6992:	09 c0       	rjmp	.+18     	; 0x69a6 <xio_rs485_control+0x60>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    6994:	80 91 12 24 	lds	r24, 0x2412
    6998:	90 91 13 24 	lds	r25, 0x2413
    699c:	84 60       	ori	r24, 0x04	; 4
    699e:	80 93 12 24 	sts	0x2412, r24
    69a2:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOBLOCK) {
    69a6:	47 ff       	sbrs	r20, 7
    69a8:	09 c0       	rjmp	.+18     	; 0x69bc <xio_rs485_control+0x76>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    69aa:	80 91 12 24 	lds	r24, 0x2412
    69ae:	90 91 13 24 	lds	r25, 0x2413
    69b2:	8b 7f       	andi	r24, 0xFB	; 251
    69b4:	80 93 12 24 	sts	0x2412, r24
    69b8:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_ECHO) {
    69bc:	50 ff       	sbrs	r21, 0
    69be:	09 c0       	rjmp	.+18     	; 0x69d2 <xio_rs485_control+0x8c>
		fr.flags |= XIO_FLAG_ECHO_bm;
    69c0:	80 91 12 24 	lds	r24, 0x2412
    69c4:	90 91 13 24 	lds	r25, 0x2413
    69c8:	80 61       	ori	r24, 0x10	; 16
    69ca:	80 93 12 24 	sts	0x2412, r24
    69ce:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOECHO) {
    69d2:	51 ff       	sbrs	r21, 1
    69d4:	09 c0       	rjmp	.+18     	; 0x69e8 <xio_rs485_control+0xa2>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    69d6:	80 91 12 24 	lds	r24, 0x2412
    69da:	90 91 13 24 	lds	r25, 0x2413
    69de:	8f 7e       	andi	r24, 0xEF	; 239
    69e0:	80 93 12 24 	sts	0x2412, r24
    69e4:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_CRLF) {
    69e8:	52 ff       	sbrs	r21, 2
    69ea:	09 c0       	rjmp	.+18     	; 0x69fe <xio_rs485_control+0xb8>
		fr.flags |= XIO_FLAG_CRLF_bm;
    69ec:	80 91 12 24 	lds	r24, 0x2412
    69f0:	90 91 13 24 	lds	r25, 0x2413
    69f4:	80 62       	ori	r24, 0x20	; 32
    69f6:	80 93 12 24 	sts	0x2412, r24
    69fa:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOCRLF) {
    69fe:	53 ff       	sbrs	r21, 3
    6a00:	09 c0       	rjmp	.+18     	; 0x6a14 <xio_rs485_control+0xce>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    6a02:	80 91 12 24 	lds	r24, 0x2412
    6a06:	90 91 13 24 	lds	r25, 0x2413
    6a0a:	8f 7d       	andi	r24, 0xDF	; 223
    6a0c:	80 93 12 24 	sts	0x2412, r24
    6a10:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_LINEMODE) {
    6a14:	54 ff       	sbrs	r21, 4
    6a16:	09 c0       	rjmp	.+18     	; 0x6a2a <xio_rs485_control+0xe4>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    6a18:	80 91 12 24 	lds	r24, 0x2412
    6a1c:	90 91 13 24 	lds	r25, 0x2413
    6a20:	80 64       	ori	r24, 0x40	; 64
    6a22:	80 93 12 24 	sts	0x2412, r24
    6a26:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOLINEMODE) {
    6a2a:	55 ff       	sbrs	r21, 5
    6a2c:	09 c0       	rjmp	.+18     	; 0x6a40 <xio_rs485_control+0xfa>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    6a2e:	80 91 12 24 	lds	r24, 0x2412
    6a32:	90 91 13 24 	lds	r25, 0x2413
    6a36:	8f 7b       	andi	r24, 0xBF	; 191
    6a38:	80 93 12 24 	sts	0x2412, r24
    6a3c:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_SEMICOLONS) {
    6a40:	56 ff       	sbrs	r21, 6
    6a42:	09 c0       	rjmp	.+18     	; 0x6a56 <xio_rs485_control+0x110>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    6a44:	80 91 12 24 	lds	r24, 0x2412
    6a48:	90 91 13 24 	lds	r25, 0x2413
    6a4c:	80 68       	ori	r24, 0x80	; 128
    6a4e:	80 93 12 24 	sts	0x2412, r24
    6a52:	90 93 13 24 	sts	0x2413, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    6a56:	57 ff       	sbrs	r21, 7
    6a58:	09 c0       	rjmp	.+18     	; 0x6a6c <xio_rs485_control+0x126>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    6a5a:	80 91 12 24 	lds	r24, 0x2412
    6a5e:	90 91 13 24 	lds	r25, 0x2413
    6a62:	8f 77       	andi	r24, 0x7F	; 127
    6a64:	80 93 12 24 	sts	0x2412, r24
    6a68:	90 93 13 24 	sts	0x2413, r25
	}
	return (0);
}
    6a6c:	80 e0       	ldi	r24, 0x00	; 0
    6a6e:	08 95       	ret

00006a70 <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)		//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    6a70:	1f 92       	push	r1
    6a72:	0f 92       	push	r0
    6a74:	0f b6       	in	r0, 0x3f	; 63
    6a76:	0f 92       	push	r0
    6a78:	0b b6       	in	r0, 0x3b	; 59
    6a7a:	0f 92       	push	r0
    6a7c:	11 24       	eor	r1, r1
    6a7e:	8f 93       	push	r24
    6a80:	9f 93       	push	r25
    6a82:	af 93       	push	r26
    6a84:	bf 93       	push	r27
    6a86:	ef 93       	push	r30
    6a88:	ff 93       	push	r31
	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// advance buffer head with wrap
    6a8a:	80 91 1f 24 	lds	r24, 0x241F
    6a8e:	81 50       	subi	r24, 0x01	; 1
    6a90:	80 93 1f 24 	sts	0x241F, r24
    6a94:	80 91 1f 24 	lds	r24, 0x241F
    6a98:	88 23       	and	r24, r24
    6a9a:	19 f4       	brne	.+6      	; 0x6aa2 <__vector_28+0x32>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6a9c:	81 e1       	ldi	r24, 0x11	; 17
    6a9e:	80 93 1f 24 	sts	0x241F, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    6aa2:	90 91 1f 24 	lds	r25, 0x241F
    6aa6:	80 91 1e 24 	lds	r24, 0x241E
    6aaa:	98 17       	cp	r25, r24
    6aac:	61 f0       	breq	.+24     	; 0x6ac6 <__vector_28+0x56>
		fr.rx_buf[fr.rx_buf_head] = fr.usart->DATA;// (= USARTC0.DATA;)
    6aae:	e0 91 1f 24 	lds	r30, 0x241F
    6ab2:	f0 e0       	ldi	r31, 0x00	; 0
    6ab4:	a0 91 47 24 	lds	r26, 0x2447
    6ab8:	b0 91 48 24 	lds	r27, 0x2448
    6abc:	8c 91       	ld	r24, X
    6abe:	ee 5e       	subi	r30, 0xEE	; 238
    6ac0:	fb 4d       	sbci	r31, 0xDB	; 219
    6ac2:	81 8b       	std	Z+17, r24	; 0x11
    6ac4:	0c c0       	rjmp	.+24     	; 0x6ade <__vector_28+0x6e>
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6ac6:	80 91 1f 24 	lds	r24, 0x241F
    6aca:	8f 5f       	subi	r24, 0xFF	; 255
    6acc:	80 93 1f 24 	sts	0x241F, r24
    6ad0:	80 91 1f 24 	lds	r24, 0x241F
    6ad4:	82 31       	cpi	r24, 0x12	; 18
    6ad6:	18 f0       	brcs	.+6      	; 0x6ade <__vector_28+0x6e>
		fr.rx_buf_head = 1;
    6ad8:	81 e0       	ldi	r24, 0x01	; 1
    6ada:	80 93 1f 24 	sts	0x241F, r24
	}
	// activate flow control here or before it gets to this level
}
    6ade:	ff 91       	pop	r31
    6ae0:	ef 91       	pop	r30
    6ae2:	bf 91       	pop	r27
    6ae4:	af 91       	pop	r26
    6ae6:	9f 91       	pop	r25
    6ae8:	8f 91       	pop	r24
    6aea:	0f 90       	pop	r0
    6aec:	0b be       	out	0x3b, r0	; 59
    6aee:	0f 90       	pop	r0
    6af0:	0f be       	out	0x3f, r0	; 63
    6af2:	0f 90       	pop	r0
    6af4:	1f 90       	pop	r1
    6af6:	18 95       	reti

00006af8 <xio_rs485_queue_RX_char>:
/*
 * xio_rs485_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_rs485_queue_RX_char(const char c)
{
    6af8:	28 2f       	mov	r18, r24
	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// wrap condition
    6afa:	80 91 1f 24 	lds	r24, 0x241F
    6afe:	81 50       	subi	r24, 0x01	; 1
    6b00:	80 93 1f 24 	sts	0x241F, r24
    6b04:	80 91 1f 24 	lds	r24, 0x241F
    6b08:	88 23       	and	r24, r24
    6b0a:	19 f4       	brne	.+6      	; 0x6b12 <xio_rs485_queue_RX_char+0x1a>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6b0c:	81 e1       	ldi	r24, 0x11	; 17
    6b0e:	80 93 1f 24 	sts	0x241F, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    6b12:	90 91 1f 24 	lds	r25, 0x241F
    6b16:	80 91 1e 24 	lds	r24, 0x241E
    6b1a:	98 17       	cp	r25, r24
    6b1c:	39 f0       	breq	.+14     	; 0x6b2c <xio_rs485_queue_RX_char+0x34>
		fr.rx_buf[fr.rx_buf_head] = c;			// FAKE INPUT DATA
    6b1e:	e0 91 1f 24 	lds	r30, 0x241F
    6b22:	f0 e0       	ldi	r31, 0x00	; 0
    6b24:	ee 5e       	subi	r30, 0xEE	; 238
    6b26:	fb 4d       	sbci	r31, 0xDB	; 219
    6b28:	21 8b       	std	Z+17, r18	; 0x11
    6b2a:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6b2c:	80 91 1f 24 	lds	r24, 0x241F
    6b30:	8f 5f       	subi	r24, 0xFF	; 255
    6b32:	80 93 1f 24 	sts	0x241F, r24
    6b36:	80 91 1f 24 	lds	r24, 0x241F
    6b3a:	82 31       	cpi	r24, 0x12	; 18
    6b3c:	18 f0       	brcs	.+6      	; 0x6b44 <xio_rs485_queue_RX_char+0x4c>
		fr.rx_buf_head = 1;
    6b3e:	81 e0       	ldi	r24, 0x01	; 1
    6b40:	80 93 1f 24 	sts	0x241F, r24
    6b44:	08 95       	ret

00006b46 <xio_rs485_queue_RX_string>:
/*
 * xio_rs485_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_rs485_queue_RX_string(char *buf)
{
    6b46:	1f 93       	push	r17
    6b48:	cf 93       	push	r28
    6b4a:	df 93       	push	r29
    6b4c:	ec 01       	movw	r28, r24
    6b4e:	10 e0       	ldi	r17, 0x00	; 0
    6b50:	02 c0       	rjmp	.+4      	; 0x6b56 <xio_rs485_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_rs485_queue_RX_char(c);
    6b52:	0e 94 7c 35 	call	0x6af8	; 0x6af8 <xio_rs485_queue_RX_char>
void xio_rs485_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    6b56:	fe 01       	movw	r30, r28
    6b58:	e1 0f       	add	r30, r17
    6b5a:	f1 1d       	adc	r31, r1
    6b5c:	80 81       	ld	r24, Z
    6b5e:	1f 5f       	subi	r17, 0xFF	; 255
    6b60:	88 23       	and	r24, r24
    6b62:	b9 f7       	brne	.-18     	; 0x6b52 <xio_rs485_queue_RX_string+0xc>
		xio_rs485_queue_RX_char(c);
	}
}
    6b64:	df 91       	pop	r29
    6b66:	cf 91       	pop	r28
    6b68:	1f 91       	pop	r17
    6b6a:	08 95       	ret

00006b6c <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC0 data register empty
{
    6b6c:	1f 92       	push	r1
    6b6e:	0f 92       	push	r0
    6b70:	0f b6       	in	r0, 0x3f	; 63
    6b72:	0f 92       	push	r0
    6b74:	0b b6       	in	r0, 0x3b	; 59
    6b76:	0f 92       	push	r0
    6b78:	11 24       	eor	r1, r1
    6b7a:	8f 93       	push	r24
    6b7c:	9f 93       	push	r25
    6b7e:	af 93       	push	r26
    6b80:	bf 93       	push	r27
    6b82:	ef 93       	push	r30
    6b84:	ff 93       	push	r31
	if (fr.tx_buf_head == fr.tx_buf_tail) {			// buffer empty - disable ints
    6b86:	90 91 21 24 	lds	r25, 0x2421
    6b8a:	80 91 20 24 	lds	r24, 0x2420
    6b8e:	98 17       	cp	r25, r24
    6b90:	39 f4       	brne	.+14     	; 0x6ba0 <__vector_29+0x34>
		fr.usart->CTRLA = USART_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    6b92:	e0 91 47 24 	lds	r30, 0x2447
    6b96:	f0 91 48 24 	lds	r31, 0x2448
    6b9a:	80 e2       	ldi	r24, 0x20	; 32
    6b9c:	83 83       	std	Z+3, r24	; 0x03
    6b9e:	1e c0       	rjmp	.+60     	; 0x6bdc <__vector_29+0x70>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(fr.flags)) {
    6ba0:	80 91 12 24 	lds	r24, 0x2412
    6ba4:	90 91 13 24 	lds	r25, 0x2413
    6ba8:	93 fd       	sbrc	r25, 3
    6baa:	18 c0       	rjmp	.+48     	; 0x6bdc <__vector_29+0x70>
		if (--(fr.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    6bac:	80 91 20 24 	lds	r24, 0x2420
    6bb0:	81 50       	subi	r24, 0x01	; 1
    6bb2:	80 93 20 24 	sts	0x2420, r24
    6bb6:	80 91 20 24 	lds	r24, 0x2420
    6bba:	88 23       	and	r24, r24
    6bbc:	19 f4       	brne	.+6      	; 0x6bc4 <__vector_29+0x58>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6bbe:	81 e1       	ldi	r24, 0x11	; 17
    6bc0:	80 93 20 24 	sts	0x2420, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];	// write char to TX DATA register
    6bc4:	e0 91 47 24 	lds	r30, 0x2447
    6bc8:	f0 91 48 24 	lds	r31, 0x2448
    6bcc:	a0 91 20 24 	lds	r26, 0x2420
    6bd0:	b0 e0       	ldi	r27, 0x00	; 0
    6bd2:	ae 5e       	subi	r26, 0xEE	; 238
    6bd4:	bb 4d       	sbci	r27, 0xDB	; 219
    6bd6:	93 96       	adiw	r26, 0x23	; 35
    6bd8:	8c 91       	ld	r24, X
    6bda:	80 83       	st	Z, r24
	}
}
    6bdc:	ff 91       	pop	r31
    6bde:	ef 91       	pop	r30
    6be0:	bf 91       	pop	r27
    6be2:	af 91       	pop	r26
    6be4:	9f 91       	pop	r25
    6be6:	8f 91       	pop	r24
    6be8:	0f 90       	pop	r0
    6bea:	0b be       	out	0x3b, r0	; 59
    6bec:	0f 90       	pop	r0
    6bee:	0f be       	out	0x3f, r0	; 63
    6bf0:	0f 90       	pop	r0
    6bf2:	1f 90       	pop	r1
    6bf4:	18 95       	reti

00006bf6 <xio_rs485_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_rs485_putc(const char c, FILE *stream)
{
    6bf6:	48 2f       	mov	r20, r24
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(fr.flags)) {
    6bf8:	20 91 12 24 	lds	r18, 0x2412
    6bfc:	30 91 13 24 	lds	r19, 0x2413
    6c00:	d9 01       	movw	r26, r18
    6c02:	a4 70       	andi	r26, 0x04	; 4
    6c04:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	fr.tx_buf_head = fr.next_tx_buf_head;			// accept the next buffer head value
	fr.tx_buf[fr.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(fr.flags) && (c == '\n')) {			// detect LF and add a CR
    6c06:	b9 01       	movw	r22, r18
    6c08:	60 72       	andi	r22, 0x20	; 32
    6c0a:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_rs485_putc(const char c, FILE *stream)
{
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
    6c0c:	90 91 21 24 	lds	r25, 0x2421
    6c10:	91 50       	subi	r25, 0x01	; 1
    6c12:	c1 f4       	brne	.+48     	; 0x6c44 <xio_rs485_putc+0x4e>
    6c14:	91 e1       	ldi	r25, 0x11	; 17
    6c16:	16 c0       	rjmp	.+44     	; 0x6c44 <xio_rs485_putc+0x4e>
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(fr.flags)) {
    6c18:	10 97       	sbiw	r26, 0x00	; 0
    6c1a:	61 f0       	breq	.+24     	; 0x6c34 <xio_rs485_putc+0x3e>
			sleep_mode();
    6c1c:	80 91 48 00 	lds	r24, 0x0048
    6c20:	81 60       	ori	r24, 0x01	; 1
    6c22:	80 93 48 00 	sts	0x0048, r24
    6c26:	88 95       	sleep
    6c28:	80 91 48 00 	lds	r24, 0x0048
    6c2c:	8e 7f       	andi	r24, 0xFE	; 254
    6c2e:	80 93 48 00 	sts	0x0048, r24
    6c32:	08 c0       	rjmp	.+16     	; 0x6c44 <xio_rs485_putc+0x4e>
    6c34:	90 93 22 24 	sts	0x2422, r25
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
    6c38:	83 e0       	ldi	r24, 0x03	; 3
    6c3a:	80 93 14 24 	sts	0x2414, r24
    6c3e:	2f ef       	ldi	r18, 0xFF	; 255
    6c40:	3f ef       	ldi	r19, 0xFF	; 255
    6c42:	54 c0       	rjmp	.+168    	; 0x6cec <xio_rs485_putc+0xf6>
int xio_rs485_putc(const char c, FILE *stream)
{
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
    6c44:	80 91 20 24 	lds	r24, 0x2420
    6c48:	98 17       	cp	r25, r24
    6c4a:	31 f3       	breq	.-52     	; 0x6c18 <xio_rs485_putc+0x22>
			fr.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	fr.tx_buf_head = fr.next_tx_buf_head;			// accept the next buffer head value
    6c4c:	90 93 21 24 	sts	0x2421, r25
	fr.tx_buf[fr.tx_buf_head] = c;				// ...and write char to buffer
    6c50:	e0 91 21 24 	lds	r30, 0x2421
    6c54:	f0 e0       	ldi	r31, 0x00	; 0
    6c56:	ee 5e       	subi	r30, 0xEE	; 238
    6c58:	fb 4d       	sbci	r31, 0xDB	; 219
    6c5a:	43 a3       	std	Z+35, r20	; 0x23

	if (CRLF(fr.flags) && (c == '\n')) {			// detect LF and add a CR
    6c5c:	61 15       	cp	r22, r1
    6c5e:	71 05       	cpc	r23, r1
    6c60:	21 f0       	breq	.+8      	; 0x6c6a <xio_rs485_putc+0x74>
    6c62:	4a 30       	cpi	r20, 0x0A	; 10
    6c64:	11 f4       	brne	.+4      	; 0x6c6a <xio_rs485_putc+0x74>
    6c66:	4d e0       	ldi	r20, 0x0D	; 13
    6c68:	d1 cf       	rjmp	.-94     	; 0x6c0c <xio_rs485_putc+0x16>
    6c6a:	90 93 22 24 	sts	0x2422, r25
		return xio_rs485_putc('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (fr.usart->STATUS & 0x20) {
    6c6e:	a0 91 47 24 	lds	r26, 0x2447
    6c72:	b0 91 48 24 	lds	r27, 0x2448
    6c76:	11 96       	adiw	r26, 0x01	; 1
    6c78:	8c 91       	ld	r24, X
    6c7a:	11 97       	sbiw	r26, 0x01	; 1
    6c7c:	85 ff       	sbrs	r24, 5
    6c7e:	27 c0       	rjmp	.+78     	; 0x6cce <xio_rs485_putc+0xd8>
		if (fr.tx_buf_head == fr.tx_buf_tail) {	// buf might be empty if IRQ got it
    6c80:	90 91 21 24 	lds	r25, 0x2421
    6c84:	80 91 20 24 	lds	r24, 0x2420
    6c88:	98 17       	cp	r25, r24
    6c8a:	71 f1       	breq	.+92     	; 0x6ce8 <xio_rs485_putc+0xf2>
			return (0);
		}
		fr.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    6c8c:	38 60       	ori	r19, 0x08	; 8
    6c8e:	20 93 12 24 	sts	0x2412, r18
    6c92:	30 93 13 24 	sts	0x2413, r19
		if (--(fr.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    6c96:	80 91 20 24 	lds	r24, 0x2420
    6c9a:	81 50       	subi	r24, 0x01	; 1
    6c9c:	80 93 20 24 	sts	0x2420, r24
    6ca0:	80 91 20 24 	lds	r24, 0x2420
    6ca4:	88 23       	and	r24, r24
    6ca6:	19 f4       	brne	.+6      	; 0x6cae <xio_rs485_putc+0xb8>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6ca8:	81 e1       	ldi	r24, 0x11	; 17
    6caa:	80 93 20 24 	sts	0x2420, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];// write char to TX DATA register
    6cae:	e0 91 20 24 	lds	r30, 0x2420
    6cb2:	f0 e0       	ldi	r31, 0x00	; 0
    6cb4:	ee 5e       	subi	r30, 0xEE	; 238
    6cb6:	fb 4d       	sbci	r31, 0xDB	; 219
    6cb8:	83 a1       	ldd	r24, Z+35	; 0x23
    6cba:	8c 93       	st	X, r24
		fr.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    6cbc:	80 91 12 24 	lds	r24, 0x2412
    6cc0:	90 91 13 24 	lds	r25, 0x2413
    6cc4:	97 7f       	andi	r25, 0xF7	; 247
    6cc6:	80 93 12 24 	sts	0x2412, r24
    6cca:	90 93 13 24 	sts	0x2413, r25
	}
	// enable interrupts regardless
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    6cce:	e0 91 47 24 	lds	r30, 0x2447
    6cd2:	f0 91 48 24 	lds	r31, 0x2448
    6cd6:	81 e2       	ldi	r24, 0x21	; 33
    6cd8:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    6cda:	80 91 a2 00 	lds	r24, 0x00A2
    6cde:	81 60       	ori	r24, 0x01	; 1
    6ce0:	e0 ea       	ldi	r30, 0xA0	; 160
    6ce2:	f0 e0       	ldi	r31, 0x00	; 0
    6ce4:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    6ce6:	78 94       	sei
    6ce8:	20 e0       	ldi	r18, 0x00	; 0
    6cea:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    6cec:	c9 01       	movw	r24, r18
    6cee:	08 95       	ret

00006cf0 <xio_rs485_getc>:
 */

int xio_rs485_getc(FILE *stream)
{
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(fr.flags)) {
    6cf0:	20 91 12 24 	lds	r18, 0x2412
    6cf4:	30 91 13 24 	lds	r19, 0x2413
    6cf8:	24 70       	andi	r18, 0x04	; 4
    6cfa:	30 70       	andi	r19, 0x00	; 0
    6cfc:	15 c0       	rjmp	.+42     	; 0x6d28 <xio_rs485_getc+0x38>
    6cfe:	21 15       	cp	r18, r1
    6d00:	31 05       	cpc	r19, r1
    6d02:	61 f0       	breq	.+24     	; 0x6d1c <xio_rs485_getc+0x2c>
			sleep_mode();
    6d04:	80 91 48 00 	lds	r24, 0x0048
    6d08:	81 60       	ori	r24, 0x01	; 1
    6d0a:	80 93 48 00 	sts	0x0048, r24
    6d0e:	88 95       	sleep
    6d10:	80 91 48 00 	lds	r24, 0x0048
    6d14:	8e 7f       	andi	r24, 0xFE	; 254
    6d16:	80 93 48 00 	sts	0x0048, r24
    6d1a:	06 c0       	rjmp	.+12     	; 0x6d28 <xio_rs485_getc+0x38>
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
    6d1c:	83 e0       	ldi	r24, 0x03	; 3
    6d1e:	80 93 14 24 	sts	0x2414, r24
    6d22:	2f ef       	ldi	r18, 0xFF	; 255
    6d24:	3f ef       	ldi	r19, 0xFF	; 255
    6d26:	26 c0       	rjmp	.+76     	; 0x6d74 <xio_rs485_getc+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_rs485_getc(FILE *stream)
{
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
    6d28:	90 91 1f 24 	lds	r25, 0x241F
    6d2c:	80 91 1e 24 	lds	r24, 0x241E
    6d30:	98 17       	cp	r25, r24
    6d32:	29 f3       	breq	.-54     	; 0x6cfe <xio_rs485_getc+0xe>
		} else {
			fr.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    6d34:	80 91 1e 24 	lds	r24, 0x241E
    6d38:	81 50       	subi	r24, 0x01	; 1
    6d3a:	80 93 1e 24 	sts	0x241E, r24
    6d3e:	80 91 1e 24 	lds	r24, 0x241E
    6d42:	88 23       	and	r24, r24
    6d44:	19 f4       	brne	.+6      	; 0x6d4c <xio_rs485_getc+0x5c>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6d46:	81 e1       	ldi	r24, 0x11	; 17
    6d48:	80 93 1e 24 	sts	0x241E, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    6d4c:	e0 91 1e 24 	lds	r30, 0x241E
    6d50:	f0 e0       	ldi	r31, 0x00	; 0
    6d52:	ee 5e       	subi	r30, 0xEE	; 238
    6d54:	fb 4d       	sbci	r31, 0xDB	; 219
    6d56:	81 89       	ldd	r24, Z+17	; 0x11
    6d58:	8f 77       	andi	r24, 0x7F	; 127
    6d5a:	80 93 15 24 	sts	0x2415, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[fr.c])))());
    6d5e:	90 e0       	ldi	r25, 0x00	; 0
    6d60:	88 0f       	add	r24, r24
    6d62:	99 1f       	adc	r25, r25
    6d64:	82 5e       	subi	r24, 0xE2	; 226
    6d66:	93 4e       	sbci	r25, 0xE3	; 227
    6d68:	fc 01       	movw	r30, r24
    6d6a:	25 91       	lpm	r18, Z+
    6d6c:	34 91       	lpm	r19, Z+
    6d6e:	f9 01       	movw	r30, r18
    6d70:	19 95       	eicall
    6d72:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    6d74:	c9 01       	movw	r24, r18
    6d76:	08 95       	ret

00006d78 <_getc_char>:

/* xio_rs485_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    6d78:	80 91 12 24 	lds	r24, 0x2412
    6d7c:	84 ff       	sbrs	r24, 4
    6d7e:	08 c0       	rjmp	.+16     	; 0x6d90 <_getc_char+0x18>
    6d80:	60 91 55 25 	lds	r22, 0x2555
    6d84:	70 91 56 25 	lds	r23, 0x2556
    6d88:	80 91 15 24 	lds	r24, 0x2415
    6d8c:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <xio_rs485_putc>
	return(fr.c);
}
    6d90:	80 91 15 24 	lds	r24, 0x2415
    6d94:	90 e0       	ldi	r25, 0x00	; 0
    6d96:	08 95       	ret

00006d98 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(fr.flags)) fr.c = '\n';
    6d98:	90 91 12 24 	lds	r25, 0x2412
    6d9c:	96 ff       	sbrs	r25, 6
    6d9e:	03 c0       	rjmp	.+6      	; 0x6da6 <_getc_NEWLINE+0xe>
    6da0:	8a e0       	ldi	r24, 0x0A	; 10
    6da2:	80 93 15 24 	sts	0x2415, r24
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    6da6:	94 ff       	sbrs	r25, 4
    6da8:	08 c0       	rjmp	.+16     	; 0x6dba <_getc_NEWLINE+0x22>
    6daa:	60 91 55 25 	lds	r22, 0x2555
    6dae:	70 91 56 25 	lds	r23, 0x2556
    6db2:	80 91 15 24 	lds	r24, 0x2415
    6db6:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <xio_rs485_putc>
	return(fr.c);
}
    6dba:	80 91 15 24 	lds	r24, 0x2415
    6dbe:	90 e0       	ldi	r25, 0x00	; 0
    6dc0:	08 95       	ret

00006dc2 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(fr.flags)) {
    6dc2:	80 91 12 24 	lds	r24, 0x2412
    6dc6:	87 ff       	sbrs	r24, 7
    6dc8:	03 c0       	rjmp	.+6      	; 0x6dd0 <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    6dca:	0e 94 cc 36 	call	0x6d98	; 0x6d98 <_getc_NEWLINE>
    6dce:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    6dd0:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <_getc_char>
}
    6dd4:	08 95       	ret

00006dd6 <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	fr.sig = XIO_SIG_DELETE;
    6dd6:	8a e0       	ldi	r24, 0x0A	; 10
    6dd8:	80 93 14 24 	sts	0x2414, r24
	return(_FDEV_ERR);
}
    6ddc:	8f ef       	ldi	r24, 0xFF	; 255
    6dde:	9f ef       	ldi	r25, 0xFF	; 255
    6de0:	08 95       	ret

00006de2 <_getc_KILL>:

static int _getc_KILL(void)
{
	fr.sig = XIO_SIG_KILL;
    6de2:	84 e0       	ldi	r24, 0x04	; 4
    6de4:	80 93 14 24 	sts	0x2414, r24
	return(_FDEV_ERR);
}
    6de8:	8f ef       	ldi	r24, 0xFF	; 255
    6dea:	9f ef       	ldi	r25, 0xFF	; 255
    6dec:	08 95       	ret

00006dee <_getc_PAUSE>:

static int _getc_PAUSE(void)
{
	fr.sig = XIO_SIG_PAUSE;
    6dee:	86 e0       	ldi	r24, 0x06	; 6
    6df0:	80 93 14 24 	sts	0x2414, r24
	return(_FDEV_ERR);
}
    6df4:	8f ef       	ldi	r24, 0xFF	; 255
    6df6:	9f ef       	ldi	r25, 0xFF	; 255
    6df8:	08 95       	ret

00006dfa <_getc_RESUME>:

static int _getc_RESUME(void)
{
	fr.sig = XIO_SIG_RESUME;
    6dfa:	87 e0       	ldi	r24, 0x07	; 7
    6dfc:	80 93 14 24 	sts	0x2414, r24
	return(_FDEV_ERR);
}
    6e00:	8f ef       	ldi	r24, 0xFF	; 255
    6e02:	9f ef       	ldi	r25, 0xFF	; 255
    6e04:	08 95       	ret

00006e06 <_getc_SHIFTOUT>:

static int _getc_SHIFTOUT(void)
{
	fr.sig = XIO_SIG_SHIFTOUT;
    6e06:	88 e0       	ldi	r24, 0x08	; 8
    6e08:	80 93 14 24 	sts	0x2414, r24
	return(_FDEV_ERR);
}
    6e0c:	8f ef       	ldi	r24, 0xFF	; 255
    6e0e:	9f ef       	ldi	r25, 0xFF	; 255
    6e10:	08 95       	ret

00006e12 <_getc_SHIFTIN>:

static int _getc_SHIFTIN(void)
{
	fr.sig = XIO_SIG_SHIFTIN;
    6e12:	89 e0       	ldi	r24, 0x09	; 9
    6e14:	80 93 14 24 	sts	0x2414, r24
	return(_FDEV_ERR);
}
    6e18:	8f ef       	ldi	r24, 0xFF	; 255
    6e1a:	9f ef       	ldi	r25, 0xFF	; 255
    6e1c:	08 95       	ret

00006e1e <xio_rs485_readln>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_rs485_readln(char *buf, uint8_t len)
{
	if (!IN_LINE(fr.flags)) {					// first time thru initializations
    6e1e:	20 91 12 24 	lds	r18, 0x2412
    6e22:	30 91 13 24 	lds	r19, 0x2413
    6e26:	36 fd       	sbrc	r19, 6
    6e28:	0d c0       	rjmp	.+26     	; 0x6e44 <xio_rs485_readln+0x26>
		fr.i = 0;								// zero buffer
    6e2a:	10 92 16 24 	sts	0x2416, r1
		fr.len = len;							// save arg into struct 
    6e2e:	60 93 17 24 	sts	0x2417, r22
		fr.buf = buf;							// save arg into struct 
    6e32:	80 93 18 24 	sts	0x2418, r24
    6e36:	90 93 19 24 	sts	0x2419, r25
//		fr.sig = XIO_SIG_OK;					// no signal action
		fr.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    6e3a:	30 64       	ori	r19, 0x40	; 64
    6e3c:	20 93 12 24 	sts	0x2412, r18
    6e40:	30 93 13 24 	sts	0x2413, r19
	}
	if (fr.rx_buf_head == fr.rx_buf_tail) {		// RX ISR buffer empty
    6e44:	90 91 1f 24 	lds	r25, 0x241F
    6e48:	80 91 1e 24 	lds	r24, 0x241E
    6e4c:	98 17       	cp	r25, r24
    6e4e:	19 f4       	brne	.+6      	; 0x6e56 <xio_rs485_readln+0x38>
    6e50:	22 e0       	ldi	r18, 0x02	; 2
    6e52:	30 e0       	ldi	r19, 0x00	; 0
    6e54:	20 c0       	rjmp	.+64     	; 0x6e96 <xio_rs485_readln+0x78>
//		fr.sig = XIO_SIG_WOULDBLOCK;
		return(TG_CONTINUE);
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    6e56:	80 91 1e 24 	lds	r24, 0x241E
    6e5a:	81 50       	subi	r24, 0x01	; 1
    6e5c:	80 93 1e 24 	sts	0x241E, r24
    6e60:	80 91 1e 24 	lds	r24, 0x241E
    6e64:	88 23       	and	r24, r24
    6e66:	19 f4       	brne	.+6      	; 0x6e6e <xio_rs485_readln+0x50>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6e68:	81 e1       	ldi	r24, 0x11	; 17
    6e6a:	80 93 1e 24 	sts	0x241E, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    6e6e:	e0 91 1e 24 	lds	r30, 0x241E
    6e72:	f0 e0       	ldi	r31, 0x00	; 0
    6e74:	ee 5e       	subi	r30, 0xEE	; 238
    6e76:	fb 4d       	sbci	r31, 0xDB	; 219
    6e78:	81 89       	ldd	r24, Z+17	; 0x11
    6e7a:	8f 77       	andi	r24, 0x7F	; 127
    6e7c:	80 93 15 24 	sts	0x2415, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[fr.c])))()); // dispatch on character
    6e80:	90 e0       	ldi	r25, 0x00	; 0
    6e82:	88 0f       	add	r24, r24
    6e84:	99 1f       	adc	r25, r25
    6e86:	82 5e       	subi	r24, 0xE2	; 226
    6e88:	94 4e       	sbci	r25, 0xE4	; 228
    6e8a:	fc 01       	movw	r30, r24
    6e8c:	25 91       	lpm	r18, Z+
    6e8e:	34 91       	lpm	r19, Z+
    6e90:	f9 01       	movw	r30, r18
    6e92:	19 95       	eicall
    6e94:	9c 01       	movw	r18, r24
}
    6e96:	c9 01       	movw	r24, r18
    6e98:	08 95       	ret

00006e9a <_readln_char>:

/* xio_rs485_readln helper routines */

static int _readln_char(void)
{
	if (fr.i > fr.len) {						// trap buffer overflow
    6e9a:	90 91 16 24 	lds	r25, 0x2416
    6e9e:	20 91 17 24 	lds	r18, 0x2417
    6ea2:	e0 91 18 24 	lds	r30, 0x2418
    6ea6:	f0 91 19 24 	lds	r31, 0x2419
    6eaa:	29 17       	cp	r18, r25
    6eac:	48 f4       	brcc	.+18     	; 0x6ec0 <_readln_char+0x26>
		fr.sig = XIO_SIG_EOL;
    6eae:	81 e0       	ldi	r24, 0x01	; 1
    6eb0:	80 93 14 24 	sts	0x2414, r24
		fr.buf[fr.len] = NUL;					// fr.len is zero based
    6eb4:	e2 0f       	add	r30, r18
    6eb6:	f1 1d       	adc	r31, r1
    6eb8:	10 82       	st	Z, r1
    6eba:	26 e0       	ldi	r18, 0x06	; 6
    6ebc:	30 e0       	ldi	r19, 0x00	; 0
    6ebe:	16 c0       	rjmp	.+44     	; 0x6eec <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	fr.buf[fr.i++] = fr.c;
    6ec0:	e9 0f       	add	r30, r25
    6ec2:	f1 1d       	adc	r31, r1
    6ec4:	80 91 15 24 	lds	r24, 0x2415
    6ec8:	80 83       	st	Z, r24
    6eca:	9f 5f       	subi	r25, 0xFF	; 255
    6ecc:	90 93 16 24 	sts	0x2416, r25
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);// conditional echo
    6ed0:	80 91 12 24 	lds	r24, 0x2412
    6ed4:	84 ff       	sbrs	r24, 4
    6ed6:	08 c0       	rjmp	.+16     	; 0x6ee8 <_readln_char+0x4e>
    6ed8:	60 91 55 25 	lds	r22, 0x2555
    6edc:	70 91 56 25 	lds	r23, 0x2556
    6ee0:	80 91 15 24 	lds	r24, 0x2415
    6ee4:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <xio_rs485_putc>
    6ee8:	22 e0       	ldi	r18, 0x02	; 2
    6eea:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_CONTINUE);						// line is still in process
}
    6eec:	c9 01       	movw	r24, r18
    6eee:	08 95       	ret

00006ef0 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	fr.sig = XIO_SIG_EOL;
    6ef0:	81 e0       	ldi	r24, 0x01	; 1
    6ef2:	80 93 14 24 	sts	0x2414, r24
	fr.buf[fr.i] = NUL;
    6ef6:	80 91 16 24 	lds	r24, 0x2416
    6efa:	e0 91 18 24 	lds	r30, 0x2418
    6efe:	f0 91 19 24 	lds	r31, 0x2419
    6f02:	e8 0f       	add	r30, r24
    6f04:	f1 1d       	adc	r31, r1
    6f06:	10 82       	st	Z, r1
	fr.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    6f08:	20 91 12 24 	lds	r18, 0x2412
    6f0c:	30 91 13 24 	lds	r19, 0x2413
    6f10:	c9 01       	movw	r24, r18
    6f12:	9f 7b       	andi	r25, 0xBF	; 191
    6f14:	80 93 12 24 	sts	0x2412, r24
    6f18:	90 93 13 24 	sts	0x2413, r25
	if (ECHO(fr.flags)) xio_rs485_putc('\n',stdout);// echo a newline
    6f1c:	24 ff       	sbrs	r18, 4
    6f1e:	07 c0       	rjmp	.+14     	; 0x6f2e <_readln_NEWLINE+0x3e>
    6f20:	60 91 55 25 	lds	r22, 0x2555
    6f24:	70 91 56 25 	lds	r23, 0x2556
    6f28:	8a e0       	ldi	r24, 0x0A	; 10
    6f2a:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <xio_rs485_putc>
	return ((int)fr.line_func(fr.buf));			// call line handler function
    6f2e:	e0 91 1c 24 	lds	r30, 0x241C
    6f32:	f0 91 1d 24 	lds	r31, 0x241D
    6f36:	80 91 18 24 	lds	r24, 0x2418
    6f3a:	90 91 19 24 	lds	r25, 0x2419
    6f3e:	19 95       	eicall
}
    6f40:	08 95       	ret

00006f42 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(fr.flags)) {
    6f42:	80 91 12 24 	lds	r24, 0x2412
    6f46:	87 ff       	sbrs	r24, 7
    6f48:	03 c0       	rjmp	.+6      	; 0x6f50 <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    6f4a:	0e 94 78 37 	call	0x6ef0	; 0x6ef0 <_readln_NEWLINE>
    6f4e:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    6f50:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <_readln_char>
	}
}
    6f54:	08 95       	ret

00006f56 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--fr.i >= 0) {
    6f56:	80 91 16 24 	lds	r24, 0x2416
    6f5a:	81 50       	subi	r24, 0x01	; 1
    6f5c:	80 93 16 24 	sts	0x2416, r24
		if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    6f60:	80 91 12 24 	lds	r24, 0x2412
    6f64:	84 ff       	sbrs	r24, 4
    6f66:	08 c0       	rjmp	.+16     	; 0x6f78 <_readln_DELETE+0x22>
    6f68:	60 91 55 25 	lds	r22, 0x2555
    6f6c:	70 91 56 25 	lds	r23, 0x2556
    6f70:	80 91 15 24 	lds	r24, 0x2415
    6f74:	0e 94 fb 35 	call	0x6bf6	; 0x6bf6 <xio_rs485_putc>
	} else {
		fr.i = 0;
	}
	return (TG_CONTINUE);						// line is still in process
}
    6f78:	82 e0       	ldi	r24, 0x02	; 2
    6f7a:	90 e0       	ldi	r25, 0x00	; 0
    6f7c:	08 95       	ret

00006f7e <_readln_KILL>:

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    6f7e:	84 e0       	ldi	r24, 0x04	; 4
    6f80:	80 93 14 24 	sts	0x2414, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    6f84:	e0 91 1a 24 	lds	r30, 0x241A
    6f88:	f0 91 1b 24 	lds	r31, 0x241B
    6f8c:	19 95       	eicall
}

static int _readln_KILL(void)
{
	return _readln_SIG(XIO_SIG_KILL);
}
    6f8e:	08 95       	ret

00006f90 <_readln_PAUSE>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    6f90:	86 e0       	ldi	r24, 0x06	; 6
    6f92:	80 93 14 24 	sts	0x2414, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    6f96:	e0 91 1a 24 	lds	r30, 0x241A
    6f9a:	f0 91 1b 24 	lds	r31, 0x241B
    6f9e:	19 95       	eicall
}

static int _readln_PAUSE(void)
{
	return _readln_SIG(XIO_SIG_PAUSE);
}
    6fa0:	08 95       	ret

00006fa2 <_readln_RESUME>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    6fa2:	87 e0       	ldi	r24, 0x07	; 7
    6fa4:	80 93 14 24 	sts	0x2414, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    6fa8:	e0 91 1a 24 	lds	r30, 0x241A
    6fac:	f0 91 1b 24 	lds	r31, 0x241B
    6fb0:	19 95       	eicall
}

static int _readln_RESUME(void)
{
	return _readln_SIG(XIO_SIG_RESUME);
}
    6fb2:	08 95       	ret

00006fb4 <_readln_SHIFTOUT>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    6fb4:	88 e0       	ldi	r24, 0x08	; 8
    6fb6:	80 93 14 24 	sts	0x2414, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    6fba:	e0 91 1a 24 	lds	r30, 0x241A
    6fbe:	f0 91 1b 24 	lds	r31, 0x241B
    6fc2:	19 95       	eicall
}

static int _readln_SHIFTOUT(void)
{
	return _readln_SIG(XIO_SIG_SHIFTOUT);
}
    6fc4:	08 95       	ret

00006fc6 <_readln_SHIFTIN>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	fr.sig = sig;
    6fc6:	89 e0       	ldi	r24, 0x09	; 9
    6fc8:	80 93 14 24 	sts	0x2414, r24
	return ((int)fr.sig_func(sig));				// call signal handler function	
    6fcc:	e0 91 1a 24 	lds	r30, 0x241A
    6fd0:	f0 91 1b 24 	lds	r31, 0x241B
    6fd4:	19 95       	eicall
}

static int _readln_SHIFTIN(void)
{
	return _readln_SIG(XIO_SIG_SHIFTIN);
}
    6fd6:	08 95       	ret

00006fd8 <__udivdi3>:
    6fd8:	ae e5       	ldi	r26, 0x5E	; 94
    6fda:	b0 e0       	ldi	r27, 0x00	; 0
    6fdc:	e2 ef       	ldi	r30, 0xF2	; 242
    6fde:	f7 e3       	ldi	r31, 0x37	; 55
    6fe0:	0c 94 7f 46 	jmp	0x8cfe	; 0x8cfe <__prologue_saves__>
    6fe4:	a8 e0       	ldi	r26, 0x08	; 8
    6fe6:	4e 01       	movw	r8, r28
    6fe8:	08 94       	sec
    6fea:	81 1c       	adc	r8, r1
    6fec:	91 1c       	adc	r9, r1
    6fee:	f4 01       	movw	r30, r8
    6ff0:	6a 2e       	mov	r6, r26
    6ff2:	11 92       	st	Z+, r1
    6ff4:	6a 94       	dec	r6
    6ff6:	e9 f7       	brne	.-6      	; 0x6ff2 <__udivdi3+0x1a>
    6ff8:	29 83       	std	Y+1, r18	; 0x01
    6ffa:	3a 83       	std	Y+2, r19	; 0x02
    6ffc:	4b 83       	std	Y+3, r20	; 0x03
    6ffe:	5c 83       	std	Y+4, r21	; 0x04
    7000:	6d 83       	std	Y+5, r22	; 0x05
    7002:	7e 83       	std	Y+6, r23	; 0x06
    7004:	8f 83       	std	Y+7, r24	; 0x07
    7006:	98 87       	std	Y+8, r25	; 0x08
    7008:	ce 01       	movw	r24, r28
    700a:	09 96       	adiw	r24, 0x09	; 9
    700c:	fc 01       	movw	r30, r24
    700e:	11 92       	st	Z+, r1
    7010:	aa 95       	dec	r26
    7012:	e9 f7       	brne	.-6      	; 0x700e <__udivdi3+0x36>
    7014:	a9 86       	std	Y+9, r10	; 0x09
    7016:	ba 86       	std	Y+10, r11	; 0x0a
    7018:	cb 86       	std	Y+11, r12	; 0x0b
    701a:	dc 86       	std	Y+12, r13	; 0x0c
    701c:	ed 86       	std	Y+13, r14	; 0x0d
    701e:	fe 86       	std	Y+14, r15	; 0x0e
    7020:	0f 87       	std	Y+15, r16	; 0x0f
    7022:	18 8b       	std	Y+16, r17	; 0x10
    7024:	29 84       	ldd	r2, Y+9	; 0x09
    7026:	3a 84       	ldd	r3, Y+10	; 0x0a
    7028:	4b 84       	ldd	r4, Y+11	; 0x0b
    702a:	5c 84       	ldd	r5, Y+12	; 0x0c
    702c:	ed 84       	ldd	r14, Y+13	; 0x0d
    702e:	fe 84       	ldd	r15, Y+14	; 0x0e
    7030:	0f 85       	ldd	r16, Y+15	; 0x0f
    7032:	18 89       	ldd	r17, Y+16	; 0x10
    7034:	69 80       	ldd	r6, Y+1	; 0x01
    7036:	7a 80       	ldd	r7, Y+2	; 0x02
    7038:	8b 80       	ldd	r8, Y+3	; 0x03
    703a:	9c 80       	ldd	r9, Y+4	; 0x04
    703c:	6d a6       	std	Y+45, r6	; 0x2d
    703e:	7e a6       	std	Y+46, r7	; 0x2e
    7040:	8f a6       	std	Y+47, r8	; 0x2f
    7042:	98 aa       	std	Y+48, r9	; 0x30
    7044:	6d 80       	ldd	r6, Y+5	; 0x05
    7046:	7e 80       	ldd	r7, Y+6	; 0x06
    7048:	8f 80       	ldd	r8, Y+7	; 0x07
    704a:	98 84       	ldd	r9, Y+8	; 0x08
    704c:	e1 14       	cp	r14, r1
    704e:	f1 04       	cpc	r15, r1
    7050:	01 05       	cpc	r16, r1
    7052:	11 05       	cpc	r17, r1
    7054:	09 f0       	breq	.+2      	; 0x7058 <__udivdi3+0x80>
    7056:	b3 c3       	rjmp	.+1894   	; 0x77be <__udivdi3+0x7e6>
    7058:	62 14       	cp	r6, r2
    705a:	73 04       	cpc	r7, r3
    705c:	84 04       	cpc	r8, r4
    705e:	95 04       	cpc	r9, r5
    7060:	08 f0       	brcs	.+2      	; 0x7064 <__udivdi3+0x8c>
    7062:	3d c1       	rjmp	.+634    	; 0x72de <__udivdi3+0x306>
    7064:	00 e0       	ldi	r16, 0x00	; 0
    7066:	20 16       	cp	r2, r16
    7068:	00 e0       	ldi	r16, 0x00	; 0
    706a:	30 06       	cpc	r3, r16
    706c:	01 e0       	ldi	r16, 0x01	; 1
    706e:	40 06       	cpc	r4, r16
    7070:	00 e0       	ldi	r16, 0x00	; 0
    7072:	50 06       	cpc	r5, r16
    7074:	88 f4       	brcc	.+34     	; 0x7098 <__udivdi3+0xc0>
    7076:	1f ef       	ldi	r17, 0xFF	; 255
    7078:	21 16       	cp	r2, r17
    707a:	31 04       	cpc	r3, r1
    707c:	41 04       	cpc	r4, r1
    707e:	51 04       	cpc	r5, r1
    7080:	39 f0       	breq	.+14     	; 0x7090 <__udivdi3+0xb8>
    7082:	30 f0       	brcs	.+12     	; 0x7090 <__udivdi3+0xb8>
    7084:	48 e0       	ldi	r20, 0x08	; 8
    7086:	e4 2e       	mov	r14, r20
    7088:	f1 2c       	mov	r15, r1
    708a:	01 2d       	mov	r16, r1
    708c:	11 2d       	mov	r17, r1
    708e:	18 c0       	rjmp	.+48     	; 0x70c0 <__udivdi3+0xe8>
    7090:	ee 24       	eor	r14, r14
    7092:	ff 24       	eor	r15, r15
    7094:	87 01       	movw	r16, r14
    7096:	14 c0       	rjmp	.+40     	; 0x70c0 <__udivdi3+0xe8>
    7098:	20 e0       	ldi	r18, 0x00	; 0
    709a:	22 16       	cp	r2, r18
    709c:	20 e0       	ldi	r18, 0x00	; 0
    709e:	32 06       	cpc	r3, r18
    70a0:	20 e0       	ldi	r18, 0x00	; 0
    70a2:	42 06       	cpc	r4, r18
    70a4:	21 e0       	ldi	r18, 0x01	; 1
    70a6:	52 06       	cpc	r5, r18
    70a8:	30 f0       	brcs	.+12     	; 0x70b6 <__udivdi3+0xde>
    70aa:	38 e1       	ldi	r19, 0x18	; 24
    70ac:	e3 2e       	mov	r14, r19
    70ae:	f1 2c       	mov	r15, r1
    70b0:	01 2d       	mov	r16, r1
    70b2:	11 2d       	mov	r17, r1
    70b4:	05 c0       	rjmp	.+10     	; 0x70c0 <__udivdi3+0xe8>
    70b6:	20 e1       	ldi	r18, 0x10	; 16
    70b8:	e2 2e       	mov	r14, r18
    70ba:	f1 2c       	mov	r15, r1
    70bc:	01 2d       	mov	r16, r1
    70be:	11 2d       	mov	r17, r1
    70c0:	d2 01       	movw	r26, r4
    70c2:	c1 01       	movw	r24, r2
    70c4:	0e 2c       	mov	r0, r14
    70c6:	04 c0       	rjmp	.+8      	; 0x70d0 <__udivdi3+0xf8>
    70c8:	b6 95       	lsr	r27
    70ca:	a7 95       	ror	r26
    70cc:	97 95       	ror	r25
    70ce:	87 95       	ror	r24
    70d0:	0a 94       	dec	r0
    70d2:	d2 f7       	brpl	.-12     	; 0x70c8 <__udivdi3+0xf0>
    70d4:	86 5d       	subi	r24, 0xD6	; 214
    70d6:	9f 4d       	sbci	r25, 0xDF	; 223
    70d8:	dc 01       	movw	r26, r24
    70da:	2c 91       	ld	r18, X
    70dc:	80 e2       	ldi	r24, 0x20	; 32
    70de:	90 e0       	ldi	r25, 0x00	; 0
    70e0:	a0 e0       	ldi	r26, 0x00	; 0
    70e2:	b0 e0       	ldi	r27, 0x00	; 0
    70e4:	8e 19       	sub	r24, r14
    70e6:	9f 09       	sbc	r25, r15
    70e8:	a0 0b       	sbc	r26, r16
    70ea:	b1 0b       	sbc	r27, r17
    70ec:	7c 01       	movw	r14, r24
    70ee:	8d 01       	movw	r16, r26
    70f0:	e2 1a       	sub	r14, r18
    70f2:	f1 08       	sbc	r15, r1
    70f4:	01 09       	sbc	r16, r1
    70f6:	11 09       	sbc	r17, r1
    70f8:	e1 14       	cp	r14, r1
    70fa:	f1 04       	cpc	r15, r1
    70fc:	01 05       	cpc	r16, r1
    70fe:	11 05       	cpc	r17, r1
    7100:	a1 f1       	breq	.+104    	; 0x716a <__udivdi3+0x192>
    7102:	0e 2c       	mov	r0, r14
    7104:	04 c0       	rjmp	.+8      	; 0x710e <__udivdi3+0x136>
    7106:	22 0c       	add	r2, r2
    7108:	33 1c       	adc	r3, r3
    710a:	44 1c       	adc	r4, r4
    710c:	55 1c       	adc	r5, r5
    710e:	0a 94       	dec	r0
    7110:	d2 f7       	brpl	.-12     	; 0x7106 <__udivdi3+0x12e>
    7112:	a4 01       	movw	r20, r8
    7114:	93 01       	movw	r18, r6
    7116:	0e 2c       	mov	r0, r14
    7118:	04 c0       	rjmp	.+8      	; 0x7122 <__udivdi3+0x14a>
    711a:	22 0f       	add	r18, r18
    711c:	33 1f       	adc	r19, r19
    711e:	44 1f       	adc	r20, r20
    7120:	55 1f       	adc	r21, r21
    7122:	0a 94       	dec	r0
    7124:	d2 f7       	brpl	.-12     	; 0x711a <__udivdi3+0x142>
    7126:	80 e2       	ldi	r24, 0x20	; 32
    7128:	90 e0       	ldi	r25, 0x00	; 0
    712a:	8e 19       	sub	r24, r14
    712c:	9f 09       	sbc	r25, r15
    712e:	6d a4       	ldd	r6, Y+45	; 0x2d
    7130:	7e a4       	ldd	r7, Y+46	; 0x2e
    7132:	8f a4       	ldd	r8, Y+47	; 0x2f
    7134:	98 a8       	ldd	r9, Y+48	; 0x30
    7136:	04 c0       	rjmp	.+8      	; 0x7140 <__udivdi3+0x168>
    7138:	96 94       	lsr	r9
    713a:	87 94       	ror	r8
    713c:	77 94       	ror	r7
    713e:	67 94       	ror	r6
    7140:	8a 95       	dec	r24
    7142:	d2 f7       	brpl	.-12     	; 0x7138 <__udivdi3+0x160>
    7144:	62 2a       	or	r6, r18
    7146:	73 2a       	or	r7, r19
    7148:	84 2a       	or	r8, r20
    714a:	95 2a       	or	r9, r21
    714c:	ad a4       	ldd	r10, Y+45	; 0x2d
    714e:	be a4       	ldd	r11, Y+46	; 0x2e
    7150:	cf a4       	ldd	r12, Y+47	; 0x2f
    7152:	d8 a8       	ldd	r13, Y+48	; 0x30
    7154:	04 c0       	rjmp	.+8      	; 0x715e <__udivdi3+0x186>
    7156:	aa 0c       	add	r10, r10
    7158:	bb 1c       	adc	r11, r11
    715a:	cc 1c       	adc	r12, r12
    715c:	dd 1c       	adc	r13, r13
    715e:	ea 94       	dec	r14
    7160:	d2 f7       	brpl	.-12     	; 0x7156 <__udivdi3+0x17e>
    7162:	ad a6       	std	Y+45, r10	; 0x2d
    7164:	be a6       	std	Y+46, r11	; 0x2e
    7166:	cf a6       	std	Y+47, r12	; 0x2f
    7168:	d8 aa       	std	Y+48, r13	; 0x30
    716a:	62 01       	movw	r12, r4
    716c:	ee 24       	eor	r14, r14
    716e:	ff 24       	eor	r15, r15
    7170:	cd aa       	std	Y+53, r12	; 0x35
    7172:	de aa       	std	Y+54, r13	; 0x36
    7174:	ef aa       	std	Y+55, r14	; 0x37
    7176:	f8 ae       	std	Y+56, r15	; 0x38
    7178:	92 01       	movw	r18, r4
    717a:	81 01       	movw	r16, r2
    717c:	20 70       	andi	r18, 0x00	; 0
    717e:	30 70       	andi	r19, 0x00	; 0
    7180:	09 af       	std	Y+57, r16	; 0x39
    7182:	1a af       	std	Y+58, r17	; 0x3a
    7184:	2b af       	std	Y+59, r18	; 0x3b
    7186:	3c af       	std	Y+60, r19	; 0x3c
    7188:	c4 01       	movw	r24, r8
    718a:	b3 01       	movw	r22, r6
    718c:	a7 01       	movw	r20, r14
    718e:	96 01       	movw	r18, r12
    7190:	0e 94 5d 46 	call	0x8cba	; 0x8cba <__udivmodsi4>
    7194:	7b 01       	movw	r14, r22
    7196:	8c 01       	movw	r16, r24
    7198:	c4 01       	movw	r24, r8
    719a:	b3 01       	movw	r22, r6
    719c:	2d a9       	ldd	r18, Y+53	; 0x35
    719e:	3e a9       	ldd	r19, Y+54	; 0x36
    71a0:	4f a9       	ldd	r20, Y+55	; 0x37
    71a2:	58 ad       	ldd	r21, Y+56	; 0x38
    71a4:	0e 94 5d 46 	call	0x8cba	; 0x8cba <__udivmodsi4>
    71a8:	c9 01       	movw	r24, r18
    71aa:	da 01       	movw	r26, r20
    71ac:	3c 01       	movw	r6, r24
    71ae:	4d 01       	movw	r8, r26
    71b0:	c4 01       	movw	r24, r8
    71b2:	b3 01       	movw	r22, r6
    71b4:	29 ad       	ldd	r18, Y+57	; 0x39
    71b6:	3a ad       	ldd	r19, Y+58	; 0x3a
    71b8:	4b ad       	ldd	r20, Y+59	; 0x3b
    71ba:	5c ad       	ldd	r21, Y+60	; 0x3c
    71bc:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <__mulsi3>
    71c0:	9b 01       	movw	r18, r22
    71c2:	ac 01       	movw	r20, r24
    71c4:	87 01       	movw	r16, r14
    71c6:	ff 24       	eor	r15, r15
    71c8:	ee 24       	eor	r14, r14
    71ca:	ad a4       	ldd	r10, Y+45	; 0x2d
    71cc:	be a4       	ldd	r11, Y+46	; 0x2e
    71ce:	cf a4       	ldd	r12, Y+47	; 0x2f
    71d0:	d8 a8       	ldd	r13, Y+48	; 0x30
    71d2:	c6 01       	movw	r24, r12
    71d4:	aa 27       	eor	r26, r26
    71d6:	bb 27       	eor	r27, r27
    71d8:	57 01       	movw	r10, r14
    71da:	68 01       	movw	r12, r16
    71dc:	a8 2a       	or	r10, r24
    71de:	b9 2a       	or	r11, r25
    71e0:	ca 2a       	or	r12, r26
    71e2:	db 2a       	or	r13, r27
    71e4:	a2 16       	cp	r10, r18
    71e6:	b3 06       	cpc	r11, r19
    71e8:	c4 06       	cpc	r12, r20
    71ea:	d5 06       	cpc	r13, r21
    71ec:	e0 f4       	brcc	.+56     	; 0x7226 <__udivdi3+0x24e>
    71ee:	08 94       	sec
    71f0:	61 08       	sbc	r6, r1
    71f2:	71 08       	sbc	r7, r1
    71f4:	81 08       	sbc	r8, r1
    71f6:	91 08       	sbc	r9, r1
    71f8:	a2 0c       	add	r10, r2
    71fa:	b3 1c       	adc	r11, r3
    71fc:	c4 1c       	adc	r12, r4
    71fe:	d5 1c       	adc	r13, r5
    7200:	a2 14       	cp	r10, r2
    7202:	b3 04       	cpc	r11, r3
    7204:	c4 04       	cpc	r12, r4
    7206:	d5 04       	cpc	r13, r5
    7208:	70 f0       	brcs	.+28     	; 0x7226 <__udivdi3+0x24e>
    720a:	a2 16       	cp	r10, r18
    720c:	b3 06       	cpc	r11, r19
    720e:	c4 06       	cpc	r12, r20
    7210:	d5 06       	cpc	r13, r21
    7212:	48 f4       	brcc	.+18     	; 0x7226 <__udivdi3+0x24e>
    7214:	08 94       	sec
    7216:	61 08       	sbc	r6, r1
    7218:	71 08       	sbc	r7, r1
    721a:	81 08       	sbc	r8, r1
    721c:	91 08       	sbc	r9, r1
    721e:	a2 0c       	add	r10, r2
    7220:	b3 1c       	adc	r11, r3
    7222:	c4 1c       	adc	r12, r4
    7224:	d5 1c       	adc	r13, r5
    7226:	a2 1a       	sub	r10, r18
    7228:	b3 0a       	sbc	r11, r19
    722a:	c4 0a       	sbc	r12, r20
    722c:	d5 0a       	sbc	r13, r21
    722e:	c6 01       	movw	r24, r12
    7230:	b5 01       	movw	r22, r10
    7232:	2d a9       	ldd	r18, Y+53	; 0x35
    7234:	3e a9       	ldd	r19, Y+54	; 0x36
    7236:	4f a9       	ldd	r20, Y+55	; 0x37
    7238:	58 ad       	ldd	r21, Y+56	; 0x38
    723a:	0e 94 5d 46 	call	0x8cba	; 0x8cba <__udivmodsi4>
    723e:	7b 01       	movw	r14, r22
    7240:	8c 01       	movw	r16, r24
    7242:	c6 01       	movw	r24, r12
    7244:	b5 01       	movw	r22, r10
    7246:	2d a9       	ldd	r18, Y+53	; 0x35
    7248:	3e a9       	ldd	r19, Y+54	; 0x36
    724a:	4f a9       	ldd	r20, Y+55	; 0x37
    724c:	58 ad       	ldd	r21, Y+56	; 0x38
    724e:	0e 94 5d 46 	call	0x8cba	; 0x8cba <__udivmodsi4>
    7252:	c9 01       	movw	r24, r18
    7254:	da 01       	movw	r26, r20
    7256:	5c 01       	movw	r10, r24
    7258:	6d 01       	movw	r12, r26
    725a:	c6 01       	movw	r24, r12
    725c:	b5 01       	movw	r22, r10
    725e:	29 ad       	ldd	r18, Y+57	; 0x39
    7260:	3a ad       	ldd	r19, Y+58	; 0x3a
    7262:	4b ad       	ldd	r20, Y+59	; 0x3b
    7264:	5c ad       	ldd	r21, Y+60	; 0x3c
    7266:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <__mulsi3>
    726a:	9b 01       	movw	r18, r22
    726c:	ac 01       	movw	r20, r24
    726e:	87 01       	movw	r16, r14
    7270:	ff 24       	eor	r15, r15
    7272:	ee 24       	eor	r14, r14
    7274:	8d a5       	ldd	r24, Y+45	; 0x2d
    7276:	9e a5       	ldd	r25, Y+46	; 0x2e
    7278:	af a5       	ldd	r26, Y+47	; 0x2f
    727a:	b8 a9       	ldd	r27, Y+48	; 0x30
    727c:	a0 70       	andi	r26, 0x00	; 0
    727e:	b0 70       	andi	r27, 0x00	; 0
    7280:	e8 2a       	or	r14, r24
    7282:	f9 2a       	or	r15, r25
    7284:	0a 2b       	or	r16, r26
    7286:	1b 2b       	or	r17, r27
    7288:	e2 16       	cp	r14, r18
    728a:	f3 06       	cpc	r15, r19
    728c:	04 07       	cpc	r16, r20
    728e:	15 07       	cpc	r17, r21
    7290:	c0 f4       	brcc	.+48     	; 0x72c2 <__udivdi3+0x2ea>
    7292:	08 94       	sec
    7294:	a1 08       	sbc	r10, r1
    7296:	b1 08       	sbc	r11, r1
    7298:	c1 08       	sbc	r12, r1
    729a:	d1 08       	sbc	r13, r1
    729c:	e2 0c       	add	r14, r2
    729e:	f3 1c       	adc	r15, r3
    72a0:	04 1d       	adc	r16, r4
    72a2:	15 1d       	adc	r17, r5
    72a4:	e2 14       	cp	r14, r2
    72a6:	f3 04       	cpc	r15, r3
    72a8:	04 05       	cpc	r16, r4
    72aa:	15 05       	cpc	r17, r5
    72ac:	50 f0       	brcs	.+20     	; 0x72c2 <__udivdi3+0x2ea>
    72ae:	e2 16       	cp	r14, r18
    72b0:	f3 06       	cpc	r15, r19
    72b2:	04 07       	cpc	r16, r20
    72b4:	15 07       	cpc	r17, r21
    72b6:	28 f4       	brcc	.+10     	; 0x72c2 <__udivdi3+0x2ea>
    72b8:	08 94       	sec
    72ba:	a1 08       	sbc	r10, r1
    72bc:	b1 08       	sbc	r11, r1
    72be:	c1 08       	sbc	r12, r1
    72c0:	d1 08       	sbc	r13, r1
    72c2:	d3 01       	movw	r26, r6
    72c4:	99 27       	eor	r25, r25
    72c6:	88 27       	eor	r24, r24
    72c8:	86 01       	movw	r16, r12
    72ca:	75 01       	movw	r14, r10
    72cc:	e8 2a       	or	r14, r24
    72ce:	f9 2a       	or	r15, r25
    72d0:	0a 2b       	or	r16, r26
    72d2:	1b 2b       	or	r17, r27
    72d4:	e9 aa       	std	Y+49, r14	; 0x31
    72d6:	fa aa       	std	Y+50, r15	; 0x32
    72d8:	0b ab       	std	Y+51, r16	; 0x33
    72da:	1c ab       	std	Y+52, r17	; 0x34
    72dc:	cf c4       	rjmp	.+2462   	; 0x7c7c <__udivdi3+0xca4>
    72de:	21 14       	cp	r2, r1
    72e0:	31 04       	cpc	r3, r1
    72e2:	41 04       	cpc	r4, r1
    72e4:	51 04       	cpc	r5, r1
    72e6:	71 f4       	brne	.+28     	; 0x7304 <__udivdi3+0x32c>
    72e8:	61 e0       	ldi	r22, 0x01	; 1
    72ea:	70 e0       	ldi	r23, 0x00	; 0
    72ec:	80 e0       	ldi	r24, 0x00	; 0
    72ee:	90 e0       	ldi	r25, 0x00	; 0
    72f0:	20 e0       	ldi	r18, 0x00	; 0
    72f2:	30 e0       	ldi	r19, 0x00	; 0
    72f4:	40 e0       	ldi	r20, 0x00	; 0
    72f6:	50 e0       	ldi	r21, 0x00	; 0
    72f8:	0e 94 5d 46 	call	0x8cba	; 0x8cba <__udivmodsi4>
    72fc:	c9 01       	movw	r24, r18
    72fe:	da 01       	movw	r26, r20
    7300:	1c 01       	movw	r2, r24
    7302:	2d 01       	movw	r4, r26
    7304:	00 e0       	ldi	r16, 0x00	; 0
    7306:	20 16       	cp	r2, r16
    7308:	00 e0       	ldi	r16, 0x00	; 0
    730a:	30 06       	cpc	r3, r16
    730c:	01 e0       	ldi	r16, 0x01	; 1
    730e:	40 06       	cpc	r4, r16
    7310:	00 e0       	ldi	r16, 0x00	; 0
    7312:	50 06       	cpc	r5, r16
    7314:	88 f4       	brcc	.+34     	; 0x7338 <__udivdi3+0x360>
    7316:	1f ef       	ldi	r17, 0xFF	; 255
    7318:	21 16       	cp	r2, r17
    731a:	31 04       	cpc	r3, r1
    731c:	41 04       	cpc	r4, r1
    731e:	51 04       	cpc	r5, r1
    7320:	31 f0       	breq	.+12     	; 0x732e <__udivdi3+0x356>
    7322:	28 f0       	brcs	.+10     	; 0x732e <__udivdi3+0x356>
    7324:	48 e0       	ldi	r20, 0x08	; 8
    7326:	50 e0       	ldi	r21, 0x00	; 0
    7328:	60 e0       	ldi	r22, 0x00	; 0
    732a:	70 e0       	ldi	r23, 0x00	; 0
    732c:	17 c0       	rjmp	.+46     	; 0x735c <__udivdi3+0x384>
    732e:	40 e0       	ldi	r20, 0x00	; 0
    7330:	50 e0       	ldi	r21, 0x00	; 0
    7332:	60 e0       	ldi	r22, 0x00	; 0
    7334:	70 e0       	ldi	r23, 0x00	; 0
    7336:	12 c0       	rjmp	.+36     	; 0x735c <__udivdi3+0x384>
    7338:	20 e0       	ldi	r18, 0x00	; 0
    733a:	22 16       	cp	r2, r18
    733c:	20 e0       	ldi	r18, 0x00	; 0
    733e:	32 06       	cpc	r3, r18
    7340:	20 e0       	ldi	r18, 0x00	; 0
    7342:	42 06       	cpc	r4, r18
    7344:	21 e0       	ldi	r18, 0x01	; 1
    7346:	52 06       	cpc	r5, r18
    7348:	28 f0       	brcs	.+10     	; 0x7354 <__udivdi3+0x37c>
    734a:	48 e1       	ldi	r20, 0x18	; 24
    734c:	50 e0       	ldi	r21, 0x00	; 0
    734e:	60 e0       	ldi	r22, 0x00	; 0
    7350:	70 e0       	ldi	r23, 0x00	; 0
    7352:	04 c0       	rjmp	.+8      	; 0x735c <__udivdi3+0x384>
    7354:	40 e1       	ldi	r20, 0x10	; 16
    7356:	50 e0       	ldi	r21, 0x00	; 0
    7358:	60 e0       	ldi	r22, 0x00	; 0
    735a:	70 e0       	ldi	r23, 0x00	; 0
    735c:	d2 01       	movw	r26, r4
    735e:	c1 01       	movw	r24, r2
    7360:	04 2e       	mov	r0, r20
    7362:	04 c0       	rjmp	.+8      	; 0x736c <__udivdi3+0x394>
    7364:	b6 95       	lsr	r27
    7366:	a7 95       	ror	r26
    7368:	97 95       	ror	r25
    736a:	87 95       	ror	r24
    736c:	0a 94       	dec	r0
    736e:	d2 f7       	brpl	.-12     	; 0x7364 <__udivdi3+0x38c>
    7370:	86 5d       	subi	r24, 0xD6	; 214
    7372:	9f 4d       	sbci	r25, 0xDF	; 223
    7374:	dc 01       	movw	r26, r24
    7376:	2c 91       	ld	r18, X
    7378:	e0 e2       	ldi	r30, 0x20	; 32
    737a:	ee 2e       	mov	r14, r30
    737c:	f1 2c       	mov	r15, r1
    737e:	01 2d       	mov	r16, r1
    7380:	11 2d       	mov	r17, r1
    7382:	d8 01       	movw	r26, r16
    7384:	c7 01       	movw	r24, r14
    7386:	84 1b       	sub	r24, r20
    7388:	95 0b       	sbc	r25, r21
    738a:	a6 0b       	sbc	r26, r22
    738c:	b7 0b       	sbc	r27, r23
    738e:	82 1b       	sub	r24, r18
    7390:	91 09       	sbc	r25, r1
    7392:	a1 09       	sbc	r26, r1
    7394:	b1 09       	sbc	r27, r1
    7396:	00 97       	sbiw	r24, 0x00	; 0
    7398:	a1 05       	cpc	r26, r1
    739a:	b1 05       	cpc	r27, r1
    739c:	61 f4       	brne	.+24     	; 0x73b6 <__udivdi3+0x3de>
    739e:	64 01       	movw	r12, r8
    73a0:	53 01       	movw	r10, r6
    73a2:	a2 18       	sub	r10, r2
    73a4:	b3 08       	sbc	r11, r3
    73a6:	c4 08       	sbc	r12, r4
    73a8:	d5 08       	sbc	r13, r5
    73aa:	31 e0       	ldi	r19, 0x01	; 1
    73ac:	63 2e       	mov	r6, r19
    73ae:	71 2c       	mov	r7, r1
    73b0:	81 2c       	mov	r8, r1
    73b2:	91 2c       	mov	r9, r1
    73b4:	1e c1       	rjmp	.+572    	; 0x75f2 <__udivdi3+0x61a>
    73b6:	6f 96       	adiw	r28, 0x1f	; 31
    73b8:	8f af       	std	Y+63, r24	; 0x3f
    73ba:	6f 97       	sbiw	r28, 0x1f	; 31
    73bc:	08 2e       	mov	r0, r24
    73be:	04 c0       	rjmp	.+8      	; 0x73c8 <__udivdi3+0x3f0>
    73c0:	22 0c       	add	r2, r2
    73c2:	33 1c       	adc	r3, r3
    73c4:	44 1c       	adc	r4, r4
    73c6:	55 1c       	adc	r5, r5
    73c8:	0a 94       	dec	r0
    73ca:	d2 f7       	brpl	.-12     	; 0x73c0 <__udivdi3+0x3e8>
    73cc:	ee 2d       	mov	r30, r14
    73ce:	e8 1b       	sub	r30, r24
    73d0:	64 01       	movw	r12, r8
    73d2:	53 01       	movw	r10, r6
    73d4:	0e 2e       	mov	r0, r30
    73d6:	04 c0       	rjmp	.+8      	; 0x73e0 <__udivdi3+0x408>
    73d8:	d6 94       	lsr	r13
    73da:	c7 94       	ror	r12
    73dc:	b7 94       	ror	r11
    73de:	a7 94       	ror	r10
    73e0:	0a 94       	dec	r0
    73e2:	d2 f7       	brpl	.-12     	; 0x73d8 <__udivdi3+0x400>
    73e4:	a4 01       	movw	r20, r8
    73e6:	93 01       	movw	r18, r6
    73e8:	6f 96       	adiw	r28, 0x1f	; 31
    73ea:	0f ac       	ldd	r0, Y+63	; 0x3f
    73ec:	6f 97       	sbiw	r28, 0x1f	; 31
    73ee:	04 c0       	rjmp	.+8      	; 0x73f8 <__udivdi3+0x420>
    73f0:	22 0f       	add	r18, r18
    73f2:	33 1f       	adc	r19, r19
    73f4:	44 1f       	adc	r20, r20
    73f6:	55 1f       	adc	r21, r21
    73f8:	0a 94       	dec	r0
    73fa:	d2 f7       	brpl	.-12     	; 0x73f0 <__udivdi3+0x418>
    73fc:	6d a4       	ldd	r6, Y+45	; 0x2d
    73fe:	7e a4       	ldd	r7, Y+46	; 0x2e
    7400:	8f a4       	ldd	r8, Y+47	; 0x2f
    7402:	98 a8       	ldd	r9, Y+48	; 0x30
    7404:	0e 2e       	mov	r0, r30
    7406:	04 c0       	rjmp	.+8      	; 0x7410 <__udivdi3+0x438>
    7408:	96 94       	lsr	r9
    740a:	87 94       	ror	r8
    740c:	77 94       	ror	r7
    740e:	67 94       	ror	r6
    7410:	0a 94       	dec	r0
    7412:	d2 f7       	brpl	.-12     	; 0x7408 <__udivdi3+0x430>
    7414:	84 01       	movw	r16, r8
    7416:	73 01       	movw	r14, r6
    7418:	e2 2a       	or	r14, r18
    741a:	f3 2a       	or	r15, r19
    741c:	04 2b       	or	r16, r20
    741e:	15 2b       	or	r17, r21
    7420:	e9 a6       	std	Y+41, r14	; 0x29
    7422:	fa a6       	std	Y+42, r15	; 0x2a
    7424:	0b a7       	std	Y+43, r16	; 0x2b
    7426:	1c a7       	std	Y+44, r17	; 0x2c
    7428:	32 01       	movw	r6, r4
    742a:	88 24       	eor	r8, r8
    742c:	99 24       	eor	r9, r9
    742e:	92 01       	movw	r18, r4
    7430:	81 01       	movw	r16, r2
    7432:	20 70       	andi	r18, 0x00	; 0
    7434:	30 70       	andi	r19, 0x00	; 0
    7436:	21 96       	adiw	r28, 0x01	; 1
    7438:	0c af       	std	Y+60, r16	; 0x3c
    743a:	1d af       	std	Y+61, r17	; 0x3d
    743c:	2e af       	std	Y+62, r18	; 0x3e
    743e:	3f af       	std	Y+63, r19	; 0x3f
    7440:	21 97       	sbiw	r28, 0x01	; 1
    7442:	c6 01       	movw	r24, r12
    7444:	b5 01       	movw	r22, r10
    7446:	a4 01       	movw	r20, r8
    7448:	93 01       	movw	r18, r6
    744a:	0e 94 5d 46 	call	0x8cba	; 0x8cba <__udivmodsi4>
    744e:	7b 01       	movw	r14, r22
    7450:	8c 01       	movw	r16, r24
    7452:	c6 01       	movw	r24, r12
    7454:	b5 01       	movw	r22, r10
    7456:	a4 01       	movw	r20, r8
    7458:	93 01       	movw	r18, r6
    745a:	0e 94 5d 46 	call	0x8cba	; 0x8cba <__udivmodsi4>
    745e:	c9 01       	movw	r24, r18
    7460:	da 01       	movw	r26, r20
    7462:	25 96       	adiw	r28, 0x05	; 5
    7464:	8c af       	std	Y+60, r24	; 0x3c
    7466:	9d af       	std	Y+61, r25	; 0x3d
    7468:	ae af       	std	Y+62, r26	; 0x3e
    746a:	bf af       	std	Y+63, r27	; 0x3f
    746c:	25 97       	sbiw	r28, 0x05	; 5
    746e:	bc 01       	movw	r22, r24
    7470:	cd 01       	movw	r24, r26
    7472:	21 96       	adiw	r28, 0x01	; 1
    7474:	2c ad       	ldd	r18, Y+60	; 0x3c
    7476:	3d ad       	ldd	r19, Y+61	; 0x3d
    7478:	4e ad       	ldd	r20, Y+62	; 0x3e
    747a:	5f ad       	ldd	r21, Y+63	; 0x3f
    747c:	21 97       	sbiw	r28, 0x01	; 1
    747e:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <__mulsi3>
    7482:	9b 01       	movw	r18, r22
    7484:	ac 01       	movw	r20, r24
    7486:	87 01       	movw	r16, r14
    7488:	ff 24       	eor	r15, r15
    748a:	ee 24       	eor	r14, r14
    748c:	a9 a4       	ldd	r10, Y+41	; 0x29
    748e:	ba a4       	ldd	r11, Y+42	; 0x2a
    7490:	cb a4       	ldd	r12, Y+43	; 0x2b
    7492:	dc a4       	ldd	r13, Y+44	; 0x2c
    7494:	c6 01       	movw	r24, r12
    7496:	aa 27       	eor	r26, r26
    7498:	bb 27       	eor	r27, r27
    749a:	5c 01       	movw	r10, r24
    749c:	6d 01       	movw	r12, r26
    749e:	ae 28       	or	r10, r14
    74a0:	bf 28       	or	r11, r15
    74a2:	c0 2a       	or	r12, r16
    74a4:	d1 2a       	or	r13, r17
    74a6:	a2 16       	cp	r10, r18
    74a8:	b3 06       	cpc	r11, r19
    74aa:	c4 06       	cpc	r12, r20
    74ac:	d5 06       	cpc	r13, r21
    74ae:	60 f5       	brcc	.+88     	; 0x7508 <__udivdi3+0x530>
    74b0:	25 96       	adiw	r28, 0x05	; 5
    74b2:	6c ad       	ldd	r22, Y+60	; 0x3c
    74b4:	7d ad       	ldd	r23, Y+61	; 0x3d
    74b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    74b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    74ba:	25 97       	sbiw	r28, 0x05	; 5
    74bc:	61 50       	subi	r22, 0x01	; 1
    74be:	70 40       	sbci	r23, 0x00	; 0
    74c0:	80 40       	sbci	r24, 0x00	; 0
    74c2:	90 40       	sbci	r25, 0x00	; 0
    74c4:	25 96       	adiw	r28, 0x05	; 5
    74c6:	6c af       	std	Y+60, r22	; 0x3c
    74c8:	7d af       	std	Y+61, r23	; 0x3d
    74ca:	8e af       	std	Y+62, r24	; 0x3e
    74cc:	9f af       	std	Y+63, r25	; 0x3f
    74ce:	25 97       	sbiw	r28, 0x05	; 5
    74d0:	a2 0c       	add	r10, r2
    74d2:	b3 1c       	adc	r11, r3
    74d4:	c4 1c       	adc	r12, r4
    74d6:	d5 1c       	adc	r13, r5
    74d8:	a2 14       	cp	r10, r2
    74da:	b3 04       	cpc	r11, r3
    74dc:	c4 04       	cpc	r12, r4
    74de:	d5 04       	cpc	r13, r5
    74e0:	98 f0       	brcs	.+38     	; 0x7508 <__udivdi3+0x530>
    74e2:	a2 16       	cp	r10, r18
    74e4:	b3 06       	cpc	r11, r19
    74e6:	c4 06       	cpc	r12, r20
    74e8:	d5 06       	cpc	r13, r21
    74ea:	70 f4       	brcc	.+28     	; 0x7508 <__udivdi3+0x530>
    74ec:	61 50       	subi	r22, 0x01	; 1
    74ee:	70 40       	sbci	r23, 0x00	; 0
    74f0:	80 40       	sbci	r24, 0x00	; 0
    74f2:	90 40       	sbci	r25, 0x00	; 0
    74f4:	25 96       	adiw	r28, 0x05	; 5
    74f6:	6c af       	std	Y+60, r22	; 0x3c
    74f8:	7d af       	std	Y+61, r23	; 0x3d
    74fa:	8e af       	std	Y+62, r24	; 0x3e
    74fc:	9f af       	std	Y+63, r25	; 0x3f
    74fe:	25 97       	sbiw	r28, 0x05	; 5
    7500:	a2 0c       	add	r10, r2
    7502:	b3 1c       	adc	r11, r3
    7504:	c4 1c       	adc	r12, r4
    7506:	d5 1c       	adc	r13, r5
    7508:	a2 1a       	sub	r10, r18
    750a:	b3 0a       	sbc	r11, r19
    750c:	c4 0a       	sbc	r12, r20
    750e:	d5 0a       	sbc	r13, r21
    7510:	c6 01       	movw	r24, r12
    7512:	b5 01       	movw	r22, r10
    7514:	a4 01       	movw	r20, r8
    7516:	93 01       	movw	r18, r6
    7518:	0e 94 5d 46 	call	0x8cba	; 0x8cba <__udivmodsi4>
    751c:	7b 01       	movw	r14, r22
    751e:	8c 01       	movw	r16, r24
    7520:	c6 01       	movw	r24, r12
    7522:	b5 01       	movw	r22, r10
    7524:	a4 01       	movw	r20, r8
    7526:	93 01       	movw	r18, r6
    7528:	0e 94 5d 46 	call	0x8cba	; 0x8cba <__udivmodsi4>
    752c:	c9 01       	movw	r24, r18
    752e:	da 01       	movw	r26, r20
    7530:	3c 01       	movw	r6, r24
    7532:	4d 01       	movw	r8, r26
    7534:	c4 01       	movw	r24, r8
    7536:	b3 01       	movw	r22, r6
    7538:	21 96       	adiw	r28, 0x01	; 1
    753a:	2c ad       	ldd	r18, Y+60	; 0x3c
    753c:	3d ad       	ldd	r19, Y+61	; 0x3d
    753e:	4e ad       	ldd	r20, Y+62	; 0x3e
    7540:	5f ad       	ldd	r21, Y+63	; 0x3f
    7542:	21 97       	sbiw	r28, 0x01	; 1
    7544:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <__mulsi3>
    7548:	9b 01       	movw	r18, r22
    754a:	ac 01       	movw	r20, r24
    754c:	87 01       	movw	r16, r14
    754e:	ff 24       	eor	r15, r15
    7550:	ee 24       	eor	r14, r14
    7552:	89 a5       	ldd	r24, Y+41	; 0x29
    7554:	9a a5       	ldd	r25, Y+42	; 0x2a
    7556:	ab a5       	ldd	r26, Y+43	; 0x2b
    7558:	bc a5       	ldd	r27, Y+44	; 0x2c
    755a:	a0 70       	andi	r26, 0x00	; 0
    755c:	b0 70       	andi	r27, 0x00	; 0
    755e:	57 01       	movw	r10, r14
    7560:	68 01       	movw	r12, r16
    7562:	a8 2a       	or	r10, r24
    7564:	b9 2a       	or	r11, r25
    7566:	ca 2a       	or	r12, r26
    7568:	db 2a       	or	r13, r27
    756a:	a2 16       	cp	r10, r18
    756c:	b3 06       	cpc	r11, r19
    756e:	c4 06       	cpc	r12, r20
    7570:	d5 06       	cpc	r13, r21
    7572:	e0 f4       	brcc	.+56     	; 0x75ac <__udivdi3+0x5d4>
    7574:	08 94       	sec
    7576:	61 08       	sbc	r6, r1
    7578:	71 08       	sbc	r7, r1
    757a:	81 08       	sbc	r8, r1
    757c:	91 08       	sbc	r9, r1
    757e:	a2 0c       	add	r10, r2
    7580:	b3 1c       	adc	r11, r3
    7582:	c4 1c       	adc	r12, r4
    7584:	d5 1c       	adc	r13, r5
    7586:	a2 14       	cp	r10, r2
    7588:	b3 04       	cpc	r11, r3
    758a:	c4 04       	cpc	r12, r4
    758c:	d5 04       	cpc	r13, r5
    758e:	70 f0       	brcs	.+28     	; 0x75ac <__udivdi3+0x5d4>
    7590:	a2 16       	cp	r10, r18
    7592:	b3 06       	cpc	r11, r19
    7594:	c4 06       	cpc	r12, r20
    7596:	d5 06       	cpc	r13, r21
    7598:	48 f4       	brcc	.+18     	; 0x75ac <__udivdi3+0x5d4>
    759a:	08 94       	sec
    759c:	61 08       	sbc	r6, r1
    759e:	71 08       	sbc	r7, r1
    75a0:	81 08       	sbc	r8, r1
    75a2:	91 08       	sbc	r9, r1
    75a4:	a2 0c       	add	r10, r2
    75a6:	b3 1c       	adc	r11, r3
    75a8:	c4 1c       	adc	r12, r4
    75aa:	d5 1c       	adc	r13, r5
    75ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    75ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    75b0:	af a5       	ldd	r26, Y+47	; 0x2f
    75b2:	b8 a9       	ldd	r27, Y+48	; 0x30
    75b4:	6f 96       	adiw	r28, 0x1f	; 31
    75b6:	0f ac       	ldd	r0, Y+63	; 0x3f
    75b8:	6f 97       	sbiw	r28, 0x1f	; 31
    75ba:	04 c0       	rjmp	.+8      	; 0x75c4 <__udivdi3+0x5ec>
    75bc:	88 0f       	add	r24, r24
    75be:	99 1f       	adc	r25, r25
    75c0:	aa 1f       	adc	r26, r26
    75c2:	bb 1f       	adc	r27, r27
    75c4:	0a 94       	dec	r0
    75c6:	d2 f7       	brpl	.-12     	; 0x75bc <__udivdi3+0x5e4>
    75c8:	8d a7       	std	Y+45, r24	; 0x2d
    75ca:	9e a7       	std	Y+46, r25	; 0x2e
    75cc:	af a7       	std	Y+47, r26	; 0x2f
    75ce:	b8 ab       	std	Y+48, r27	; 0x30
    75d0:	a2 1a       	sub	r10, r18
    75d2:	b3 0a       	sbc	r11, r19
    75d4:	c4 0a       	sbc	r12, r20
    75d6:	d5 0a       	sbc	r13, r21
    75d8:	25 96       	adiw	r28, 0x05	; 5
    75da:	ec ac       	ldd	r14, Y+60	; 0x3c
    75dc:	fd ac       	ldd	r15, Y+61	; 0x3d
    75de:	0e ad       	ldd	r16, Y+62	; 0x3e
    75e0:	1f ad       	ldd	r17, Y+63	; 0x3f
    75e2:	25 97       	sbiw	r28, 0x05	; 5
    75e4:	d7 01       	movw	r26, r14
    75e6:	99 27       	eor	r25, r25
    75e8:	88 27       	eor	r24, r24
    75ea:	68 2a       	or	r6, r24
    75ec:	79 2a       	or	r7, r25
    75ee:	8a 2a       	or	r8, r26
    75f0:	9b 2a       	or	r9, r27
    75f2:	82 01       	movw	r16, r4
    75f4:	22 27       	eor	r18, r18
    75f6:	33 27       	eor	r19, r19
    75f8:	29 96       	adiw	r28, 0x09	; 9
    75fa:	0c af       	std	Y+60, r16	; 0x3c
    75fc:	1d af       	std	Y+61, r17	; 0x3d
    75fe:	2e af       	std	Y+62, r18	; 0x3e
    7600:	3f af       	std	Y+63, r19	; 0x3f
    7602:	29 97       	sbiw	r28, 0x09	; 9
    7604:	a2 01       	movw	r20, r4
    7606:	91 01       	movw	r18, r2
    7608:	40 70       	andi	r20, 0x00	; 0
    760a:	50 70       	andi	r21, 0x00	; 0
    760c:	2d 96       	adiw	r28, 0x0d	; 13
    760e:	2c af       	std	Y+60, r18	; 0x3c
    7610:	3d af       	std	Y+61, r19	; 0x3d
    7612:	4e af       	std	Y+62, r20	; 0x3e
    7614:	5f af       	std	Y+63, r21	; 0x3f
    7616:	2d 97       	sbiw	r28, 0x0d	; 13
    7618:	c6 01       	movw	r24, r12
    761a:	b5 01       	movw	r22, r10
    761c:	29 96       	adiw	r28, 0x09	; 9
    761e:	2c ad       	ldd	r18, Y+60	; 0x3c
    7620:	3d ad       	ldd	r19, Y+61	; 0x3d
    7622:	4e ad       	ldd	r20, Y+62	; 0x3e
    7624:	5f ad       	ldd	r21, Y+63	; 0x3f
    7626:	29 97       	sbiw	r28, 0x09	; 9
    7628:	0e 94 5d 46 	call	0x8cba	; 0x8cba <__udivmodsi4>
    762c:	7b 01       	movw	r14, r22
    762e:	8c 01       	movw	r16, r24
    7630:	c6 01       	movw	r24, r12
    7632:	b5 01       	movw	r22, r10
    7634:	29 96       	adiw	r28, 0x09	; 9
    7636:	2c ad       	ldd	r18, Y+60	; 0x3c
    7638:	3d ad       	ldd	r19, Y+61	; 0x3d
    763a:	4e ad       	ldd	r20, Y+62	; 0x3e
    763c:	5f ad       	ldd	r21, Y+63	; 0x3f
    763e:	29 97       	sbiw	r28, 0x09	; 9
    7640:	0e 94 5d 46 	call	0x8cba	; 0x8cba <__udivmodsi4>
    7644:	c9 01       	movw	r24, r18
    7646:	da 01       	movw	r26, r20
    7648:	61 96       	adiw	r28, 0x11	; 17
    764a:	8c af       	std	Y+60, r24	; 0x3c
    764c:	9d af       	std	Y+61, r25	; 0x3d
    764e:	ae af       	std	Y+62, r26	; 0x3e
    7650:	bf af       	std	Y+63, r27	; 0x3f
    7652:	61 97       	sbiw	r28, 0x11	; 17
    7654:	bc 01       	movw	r22, r24
    7656:	cd 01       	movw	r24, r26
    7658:	2d 96       	adiw	r28, 0x0d	; 13
    765a:	2c ad       	ldd	r18, Y+60	; 0x3c
    765c:	3d ad       	ldd	r19, Y+61	; 0x3d
    765e:	4e ad       	ldd	r20, Y+62	; 0x3e
    7660:	5f ad       	ldd	r21, Y+63	; 0x3f
    7662:	2d 97       	sbiw	r28, 0x0d	; 13
    7664:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <__mulsi3>
    7668:	9b 01       	movw	r18, r22
    766a:	ac 01       	movw	r20, r24
    766c:	87 01       	movw	r16, r14
    766e:	ff 24       	eor	r15, r15
    7670:	ee 24       	eor	r14, r14
    7672:	ad a4       	ldd	r10, Y+45	; 0x2d
    7674:	be a4       	ldd	r11, Y+46	; 0x2e
    7676:	cf a4       	ldd	r12, Y+47	; 0x2f
    7678:	d8 a8       	ldd	r13, Y+48	; 0x30
    767a:	c6 01       	movw	r24, r12
    767c:	aa 27       	eor	r26, r26
    767e:	bb 27       	eor	r27, r27
    7680:	57 01       	movw	r10, r14
    7682:	68 01       	movw	r12, r16
    7684:	a8 2a       	or	r10, r24
    7686:	b9 2a       	or	r11, r25
    7688:	ca 2a       	or	r12, r26
    768a:	db 2a       	or	r13, r27
    768c:	a2 16       	cp	r10, r18
    768e:	b3 06       	cpc	r11, r19
    7690:	c4 06       	cpc	r12, r20
    7692:	d5 06       	cpc	r13, r21
    7694:	60 f5       	brcc	.+88     	; 0x76ee <__udivdi3+0x716>
    7696:	61 96       	adiw	r28, 0x11	; 17
    7698:	6c ad       	ldd	r22, Y+60	; 0x3c
    769a:	7d ad       	ldd	r23, Y+61	; 0x3d
    769c:	8e ad       	ldd	r24, Y+62	; 0x3e
    769e:	9f ad       	ldd	r25, Y+63	; 0x3f
    76a0:	61 97       	sbiw	r28, 0x11	; 17
    76a2:	61 50       	subi	r22, 0x01	; 1
    76a4:	70 40       	sbci	r23, 0x00	; 0
    76a6:	80 40       	sbci	r24, 0x00	; 0
    76a8:	90 40       	sbci	r25, 0x00	; 0
    76aa:	61 96       	adiw	r28, 0x11	; 17
    76ac:	6c af       	std	Y+60, r22	; 0x3c
    76ae:	7d af       	std	Y+61, r23	; 0x3d
    76b0:	8e af       	std	Y+62, r24	; 0x3e
    76b2:	9f af       	std	Y+63, r25	; 0x3f
    76b4:	61 97       	sbiw	r28, 0x11	; 17
    76b6:	a2 0c       	add	r10, r2
    76b8:	b3 1c       	adc	r11, r3
    76ba:	c4 1c       	adc	r12, r4
    76bc:	d5 1c       	adc	r13, r5
    76be:	a2 14       	cp	r10, r2
    76c0:	b3 04       	cpc	r11, r3
    76c2:	c4 04       	cpc	r12, r4
    76c4:	d5 04       	cpc	r13, r5
    76c6:	98 f0       	brcs	.+38     	; 0x76ee <__udivdi3+0x716>
    76c8:	a2 16       	cp	r10, r18
    76ca:	b3 06       	cpc	r11, r19
    76cc:	c4 06       	cpc	r12, r20
    76ce:	d5 06       	cpc	r13, r21
    76d0:	70 f4       	brcc	.+28     	; 0x76ee <__udivdi3+0x716>
    76d2:	61 50       	subi	r22, 0x01	; 1
    76d4:	70 40       	sbci	r23, 0x00	; 0
    76d6:	80 40       	sbci	r24, 0x00	; 0
    76d8:	90 40       	sbci	r25, 0x00	; 0
    76da:	61 96       	adiw	r28, 0x11	; 17
    76dc:	6c af       	std	Y+60, r22	; 0x3c
    76de:	7d af       	std	Y+61, r23	; 0x3d
    76e0:	8e af       	std	Y+62, r24	; 0x3e
    76e2:	9f af       	std	Y+63, r25	; 0x3f
    76e4:	61 97       	sbiw	r28, 0x11	; 17
    76e6:	a2 0c       	add	r10, r2
    76e8:	b3 1c       	adc	r11, r3
    76ea:	c4 1c       	adc	r12, r4
    76ec:	d5 1c       	adc	r13, r5
    76ee:	a2 1a       	sub	r10, r18
    76f0:	b3 0a       	sbc	r11, r19
    76f2:	c4 0a       	sbc	r12, r20
    76f4:	d5 0a       	sbc	r13, r21
    76f6:	c6 01       	movw	r24, r12
    76f8:	b5 01       	movw	r22, r10
    76fa:	29 96       	adiw	r28, 0x09	; 9
    76fc:	2c ad       	ldd	r18, Y+60	; 0x3c
    76fe:	3d ad       	ldd	r19, Y+61	; 0x3d
    7700:	4e ad       	ldd	r20, Y+62	; 0x3e
    7702:	5f ad       	ldd	r21, Y+63	; 0x3f
    7704:	29 97       	sbiw	r28, 0x09	; 9
    7706:	0e 94 5d 46 	call	0x8cba	; 0x8cba <__udivmodsi4>
    770a:	7b 01       	movw	r14, r22
    770c:	8c 01       	movw	r16, r24
    770e:	c6 01       	movw	r24, r12
    7710:	b5 01       	movw	r22, r10
    7712:	29 96       	adiw	r28, 0x09	; 9
    7714:	2c ad       	ldd	r18, Y+60	; 0x3c
    7716:	3d ad       	ldd	r19, Y+61	; 0x3d
    7718:	4e ad       	ldd	r20, Y+62	; 0x3e
    771a:	5f ad       	ldd	r21, Y+63	; 0x3f
    771c:	29 97       	sbiw	r28, 0x09	; 9
    771e:	0e 94 5d 46 	call	0x8cba	; 0x8cba <__udivmodsi4>
    7722:	c9 01       	movw	r24, r18
    7724:	da 01       	movw	r26, r20
    7726:	5c 01       	movw	r10, r24
    7728:	6d 01       	movw	r12, r26
    772a:	c6 01       	movw	r24, r12
    772c:	b5 01       	movw	r22, r10
    772e:	2d 96       	adiw	r28, 0x0d	; 13
    7730:	2c ad       	ldd	r18, Y+60	; 0x3c
    7732:	3d ad       	ldd	r19, Y+61	; 0x3d
    7734:	4e ad       	ldd	r20, Y+62	; 0x3e
    7736:	5f ad       	ldd	r21, Y+63	; 0x3f
    7738:	2d 97       	sbiw	r28, 0x0d	; 13
    773a:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <__mulsi3>
    773e:	9b 01       	movw	r18, r22
    7740:	ac 01       	movw	r20, r24
    7742:	87 01       	movw	r16, r14
    7744:	ff 24       	eor	r15, r15
    7746:	ee 24       	eor	r14, r14
    7748:	8d a5       	ldd	r24, Y+45	; 0x2d
    774a:	9e a5       	ldd	r25, Y+46	; 0x2e
    774c:	af a5       	ldd	r26, Y+47	; 0x2f
    774e:	b8 a9       	ldd	r27, Y+48	; 0x30
    7750:	a0 70       	andi	r26, 0x00	; 0
    7752:	b0 70       	andi	r27, 0x00	; 0
    7754:	e8 2a       	or	r14, r24
    7756:	f9 2a       	or	r15, r25
    7758:	0a 2b       	or	r16, r26
    775a:	1b 2b       	or	r17, r27
    775c:	e2 16       	cp	r14, r18
    775e:	f3 06       	cpc	r15, r19
    7760:	04 07       	cpc	r16, r20
    7762:	15 07       	cpc	r17, r21
    7764:	c0 f4       	brcc	.+48     	; 0x7796 <__udivdi3+0x7be>
    7766:	08 94       	sec
    7768:	a1 08       	sbc	r10, r1
    776a:	b1 08       	sbc	r11, r1
    776c:	c1 08       	sbc	r12, r1
    776e:	d1 08       	sbc	r13, r1
    7770:	e2 0c       	add	r14, r2
    7772:	f3 1c       	adc	r15, r3
    7774:	04 1d       	adc	r16, r4
    7776:	15 1d       	adc	r17, r5
    7778:	e2 14       	cp	r14, r2
    777a:	f3 04       	cpc	r15, r3
    777c:	04 05       	cpc	r16, r4
    777e:	15 05       	cpc	r17, r5
    7780:	50 f0       	brcs	.+20     	; 0x7796 <__udivdi3+0x7be>
    7782:	e2 16       	cp	r14, r18
    7784:	f3 06       	cpc	r15, r19
    7786:	04 07       	cpc	r16, r20
    7788:	15 07       	cpc	r17, r21
    778a:	28 f4       	brcc	.+10     	; 0x7796 <__udivdi3+0x7be>
    778c:	08 94       	sec
    778e:	a1 08       	sbc	r10, r1
    7790:	b1 08       	sbc	r11, r1
    7792:	c1 08       	sbc	r12, r1
    7794:	d1 08       	sbc	r13, r1
    7796:	61 96       	adiw	r28, 0x11	; 17
    7798:	ec ac       	ldd	r14, Y+60	; 0x3c
    779a:	fd ac       	ldd	r15, Y+61	; 0x3d
    779c:	0e ad       	ldd	r16, Y+62	; 0x3e
    779e:	1f ad       	ldd	r17, Y+63	; 0x3f
    77a0:	61 97       	sbiw	r28, 0x11	; 17
    77a2:	d7 01       	movw	r26, r14
    77a4:	99 27       	eor	r25, r25
    77a6:	88 27       	eor	r24, r24
    77a8:	96 01       	movw	r18, r12
    77aa:	85 01       	movw	r16, r10
    77ac:	08 2b       	or	r16, r24
    77ae:	19 2b       	or	r17, r25
    77b0:	2a 2b       	or	r18, r26
    77b2:	3b 2b       	or	r19, r27
    77b4:	09 ab       	std	Y+49, r16	; 0x31
    77b6:	1a ab       	std	Y+50, r17	; 0x32
    77b8:	2b ab       	std	Y+51, r18	; 0x33
    77ba:	3c ab       	std	Y+52, r19	; 0x34
    77bc:	62 c2       	rjmp	.+1220   	; 0x7c82 <__udivdi3+0xcaa>
    77be:	6e 14       	cp	r6, r14
    77c0:	7f 04       	cpc	r7, r15
    77c2:	80 06       	cpc	r8, r16
    77c4:	91 06       	cpc	r9, r17
    77c6:	08 f4       	brcc	.+2      	; 0x77ca <__udivdi3+0x7f2>
    77c8:	51 c2       	rjmp	.+1186   	; 0x7c6c <__udivdi3+0xc94>
    77ca:	20 e0       	ldi	r18, 0x00	; 0
    77cc:	e2 16       	cp	r14, r18
    77ce:	20 e0       	ldi	r18, 0x00	; 0
    77d0:	f2 06       	cpc	r15, r18
    77d2:	21 e0       	ldi	r18, 0x01	; 1
    77d4:	02 07       	cpc	r16, r18
    77d6:	20 e0       	ldi	r18, 0x00	; 0
    77d8:	12 07       	cpc	r17, r18
    77da:	88 f4       	brcc	.+34     	; 0x77fe <__udivdi3+0x826>
    77dc:	3f ef       	ldi	r19, 0xFF	; 255
    77de:	e3 16       	cp	r14, r19
    77e0:	f1 04       	cpc	r15, r1
    77e2:	01 05       	cpc	r16, r1
    77e4:	11 05       	cpc	r17, r1
    77e6:	31 f0       	breq	.+12     	; 0x77f4 <__udivdi3+0x81c>
    77e8:	28 f0       	brcs	.+10     	; 0x77f4 <__udivdi3+0x81c>
    77ea:	48 e0       	ldi	r20, 0x08	; 8
    77ec:	50 e0       	ldi	r21, 0x00	; 0
    77ee:	60 e0       	ldi	r22, 0x00	; 0
    77f0:	70 e0       	ldi	r23, 0x00	; 0
    77f2:	17 c0       	rjmp	.+46     	; 0x7822 <__udivdi3+0x84a>
    77f4:	40 e0       	ldi	r20, 0x00	; 0
    77f6:	50 e0       	ldi	r21, 0x00	; 0
    77f8:	60 e0       	ldi	r22, 0x00	; 0
    77fa:	70 e0       	ldi	r23, 0x00	; 0
    77fc:	12 c0       	rjmp	.+36     	; 0x7822 <__udivdi3+0x84a>
    77fe:	40 e0       	ldi	r20, 0x00	; 0
    7800:	e4 16       	cp	r14, r20
    7802:	40 e0       	ldi	r20, 0x00	; 0
    7804:	f4 06       	cpc	r15, r20
    7806:	40 e0       	ldi	r20, 0x00	; 0
    7808:	04 07       	cpc	r16, r20
    780a:	41 e0       	ldi	r20, 0x01	; 1
    780c:	14 07       	cpc	r17, r20
    780e:	28 f0       	brcs	.+10     	; 0x781a <__udivdi3+0x842>
    7810:	48 e1       	ldi	r20, 0x18	; 24
    7812:	50 e0       	ldi	r21, 0x00	; 0
    7814:	60 e0       	ldi	r22, 0x00	; 0
    7816:	70 e0       	ldi	r23, 0x00	; 0
    7818:	04 c0       	rjmp	.+8      	; 0x7822 <__udivdi3+0x84a>
    781a:	40 e1       	ldi	r20, 0x10	; 16
    781c:	50 e0       	ldi	r21, 0x00	; 0
    781e:	60 e0       	ldi	r22, 0x00	; 0
    7820:	70 e0       	ldi	r23, 0x00	; 0
    7822:	d8 01       	movw	r26, r16
    7824:	c7 01       	movw	r24, r14
    7826:	04 2e       	mov	r0, r20
    7828:	04 c0       	rjmp	.+8      	; 0x7832 <__udivdi3+0x85a>
    782a:	b6 95       	lsr	r27
    782c:	a7 95       	ror	r26
    782e:	97 95       	ror	r25
    7830:	87 95       	ror	r24
    7832:	0a 94       	dec	r0
    7834:	d2 f7       	brpl	.-12     	; 0x782a <__udivdi3+0x852>
    7836:	86 5d       	subi	r24, 0xD6	; 214
    7838:	9f 4d       	sbci	r25, 0xDF	; 223
    783a:	dc 01       	movw	r26, r24
    783c:	2c 91       	ld	r18, X
    783e:	30 e2       	ldi	r19, 0x20	; 32
    7840:	a3 2e       	mov	r10, r19
    7842:	b1 2c       	mov	r11, r1
    7844:	c1 2c       	mov	r12, r1
    7846:	d1 2c       	mov	r13, r1
    7848:	d6 01       	movw	r26, r12
    784a:	c5 01       	movw	r24, r10
    784c:	84 1b       	sub	r24, r20
    784e:	95 0b       	sbc	r25, r21
    7850:	a6 0b       	sbc	r26, r22
    7852:	b7 0b       	sbc	r27, r23
    7854:	82 1b       	sub	r24, r18
    7856:	91 09       	sbc	r25, r1
    7858:	a1 09       	sbc	r26, r1
    785a:	b1 09       	sbc	r27, r1
    785c:	00 97       	sbiw	r24, 0x00	; 0
    785e:	a1 05       	cpc	r26, r1
    7860:	b1 05       	cpc	r27, r1
    7862:	89 f4       	brne	.+34     	; 0x7886 <__udivdi3+0x8ae>
    7864:	e6 14       	cp	r14, r6
    7866:	f7 04       	cpc	r15, r7
    7868:	08 05       	cpc	r16, r8
    786a:	19 05       	cpc	r17, r9
    786c:	08 f4       	brcc	.+2      	; 0x7870 <__udivdi3+0x898>
    786e:	f2 c1       	rjmp	.+996    	; 0x7c54 <__udivdi3+0xc7c>
    7870:	6d a4       	ldd	r6, Y+45	; 0x2d
    7872:	7e a4       	ldd	r7, Y+46	; 0x2e
    7874:	8f a4       	ldd	r8, Y+47	; 0x2f
    7876:	98 a8       	ldd	r9, Y+48	; 0x30
    7878:	62 14       	cp	r6, r2
    787a:	73 04       	cpc	r7, r3
    787c:	84 04       	cpc	r8, r4
    787e:	95 04       	cpc	r9, r5
    7880:	08 f0       	brcs	.+2      	; 0x7884 <__udivdi3+0x8ac>
    7882:	e8 c1       	rjmp	.+976    	; 0x7c54 <__udivdi3+0xc7c>
    7884:	f3 c1       	rjmp	.+998    	; 0x7c6c <__udivdi3+0xc94>
    7886:	6e 96       	adiw	r28, 0x1e	; 30
    7888:	8f af       	std	Y+63, r24	; 0x3f
    788a:	6e 97       	sbiw	r28, 0x1e	; 30
    788c:	08 2e       	mov	r0, r24
    788e:	04 c0       	rjmp	.+8      	; 0x7898 <__udivdi3+0x8c0>
    7890:	ee 0c       	add	r14, r14
    7892:	ff 1c       	adc	r15, r15
    7894:	00 1f       	adc	r16, r16
    7896:	11 1f       	adc	r17, r17
    7898:	0a 94       	dec	r0
    789a:	d2 f7       	brpl	.-12     	; 0x7890 <__udivdi3+0x8b8>
    789c:	6a 2d       	mov	r22, r10
    789e:	68 1b       	sub	r22, r24
    78a0:	d2 01       	movw	r26, r4
    78a2:	c1 01       	movw	r24, r2
    78a4:	06 2e       	mov	r0, r22
    78a6:	04 c0       	rjmp	.+8      	; 0x78b0 <__udivdi3+0x8d8>
    78a8:	b6 95       	lsr	r27
    78aa:	a7 95       	ror	r26
    78ac:	97 95       	ror	r25
    78ae:	87 95       	ror	r24
    78b0:	0a 94       	dec	r0
    78b2:	d2 f7       	brpl	.-12     	; 0x78a8 <__udivdi3+0x8d0>
    78b4:	5c 01       	movw	r10, r24
    78b6:	6d 01       	movw	r12, r26
    78b8:	ae 28       	or	r10, r14
    78ba:	bf 28       	or	r11, r15
    78bc:	c0 2a       	or	r12, r16
    78be:	d1 2a       	or	r13, r17
    78c0:	ad a2       	std	Y+37, r10	; 0x25
    78c2:	be a2       	std	Y+38, r11	; 0x26
    78c4:	cf a2       	std	Y+39, r12	; 0x27
    78c6:	d8 a6       	std	Y+40, r13	; 0x28
    78c8:	72 01       	movw	r14, r4
    78ca:	61 01       	movw	r12, r2
    78cc:	6e 96       	adiw	r28, 0x1e	; 30
    78ce:	0f ac       	ldd	r0, Y+63	; 0x3f
    78d0:	6e 97       	sbiw	r28, 0x1e	; 30
    78d2:	04 c0       	rjmp	.+8      	; 0x78dc <__udivdi3+0x904>
    78d4:	cc 0c       	add	r12, r12
    78d6:	dd 1c       	adc	r13, r13
    78d8:	ee 1c       	adc	r14, r14
    78da:	ff 1c       	adc	r15, r15
    78dc:	0a 94       	dec	r0
    78de:	d2 f7       	brpl	.-12     	; 0x78d4 <__udivdi3+0x8fc>
    78e0:	c9 a2       	std	Y+33, r12	; 0x21
    78e2:	da a2       	std	Y+34, r13	; 0x22
    78e4:	eb a2       	std	Y+35, r14	; 0x23
    78e6:	fc a2       	std	Y+36, r15	; 0x24
    78e8:	64 01       	movw	r12, r8
    78ea:	53 01       	movw	r10, r6
    78ec:	06 2e       	mov	r0, r22
    78ee:	04 c0       	rjmp	.+8      	; 0x78f8 <__udivdi3+0x920>
    78f0:	d6 94       	lsr	r13
    78f2:	c7 94       	ror	r12
    78f4:	b7 94       	ror	r11
    78f6:	a7 94       	ror	r10
    78f8:	0a 94       	dec	r0
    78fa:	d2 f7       	brpl	.-12     	; 0x78f0 <__udivdi3+0x918>
    78fc:	d4 01       	movw	r26, r8
    78fe:	c3 01       	movw	r24, r6
    7900:	6e 96       	adiw	r28, 0x1e	; 30
    7902:	0f ac       	ldd	r0, Y+63	; 0x3f
    7904:	6e 97       	sbiw	r28, 0x1e	; 30
    7906:	04 c0       	rjmp	.+8      	; 0x7910 <__udivdi3+0x938>
    7908:	88 0f       	add	r24, r24
    790a:	99 1f       	adc	r25, r25
    790c:	aa 1f       	adc	r26, r26
    790e:	bb 1f       	adc	r27, r27
    7910:	0a 94       	dec	r0
    7912:	d2 f7       	brpl	.-12     	; 0x7908 <__udivdi3+0x930>
    7914:	ed a4       	ldd	r14, Y+45	; 0x2d
    7916:	fe a4       	ldd	r15, Y+46	; 0x2e
    7918:	0f a5       	ldd	r16, Y+47	; 0x2f
    791a:	18 a9       	ldd	r17, Y+48	; 0x30
    791c:	04 c0       	rjmp	.+8      	; 0x7926 <__udivdi3+0x94e>
    791e:	16 95       	lsr	r17
    7920:	07 95       	ror	r16
    7922:	f7 94       	ror	r15
    7924:	e7 94       	ror	r14
    7926:	6a 95       	dec	r22
    7928:	d2 f7       	brpl	.-12     	; 0x791e <__udivdi3+0x946>
    792a:	37 01       	movw	r6, r14
    792c:	48 01       	movw	r8, r16
    792e:	68 2a       	or	r6, r24
    7930:	79 2a       	or	r7, r25
    7932:	8a 2a       	or	r8, r26
    7934:	9b 2a       	or	r9, r27
    7936:	6d 8e       	std	Y+29, r6	; 0x1d
    7938:	7e 8e       	std	Y+30, r7	; 0x1e
    793a:	8f 8e       	std	Y+31, r8	; 0x1f
    793c:	98 a2       	std	Y+32, r9	; 0x20
    793e:	ed a0       	ldd	r14, Y+37	; 0x25
    7940:	fe a0       	ldd	r15, Y+38	; 0x26
    7942:	0f a1       	ldd	r16, Y+39	; 0x27
    7944:	18 a5       	ldd	r17, Y+40	; 0x28
    7946:	38 01       	movw	r6, r16
    7948:	88 24       	eor	r8, r8
    794a:	99 24       	eor	r9, r9
    794c:	98 01       	movw	r18, r16
    794e:	87 01       	movw	r16, r14
    7950:	20 70       	andi	r18, 0x00	; 0
    7952:	30 70       	andi	r19, 0x00	; 0
    7954:	65 96       	adiw	r28, 0x15	; 21
    7956:	0c af       	std	Y+60, r16	; 0x3c
    7958:	1d af       	std	Y+61, r17	; 0x3d
    795a:	2e af       	std	Y+62, r18	; 0x3e
    795c:	3f af       	std	Y+63, r19	; 0x3f
    795e:	65 97       	sbiw	r28, 0x15	; 21
    7960:	c6 01       	movw	r24, r12
    7962:	b5 01       	movw	r22, r10
    7964:	a4 01       	movw	r20, r8
    7966:	93 01       	movw	r18, r6
    7968:	0e 94 5d 46 	call	0x8cba	; 0x8cba <__udivmodsi4>
    796c:	7b 01       	movw	r14, r22
    796e:	8c 01       	movw	r16, r24
    7970:	c6 01       	movw	r24, r12
    7972:	b5 01       	movw	r22, r10
    7974:	a4 01       	movw	r20, r8
    7976:	93 01       	movw	r18, r6
    7978:	0e 94 5d 46 	call	0x8cba	; 0x8cba <__udivmodsi4>
    797c:	c9 01       	movw	r24, r18
    797e:	da 01       	movw	r26, r20
    7980:	1c 01       	movw	r2, r24
    7982:	2d 01       	movw	r4, r26
    7984:	c2 01       	movw	r24, r4
    7986:	b1 01       	movw	r22, r2
    7988:	65 96       	adiw	r28, 0x15	; 21
    798a:	2c ad       	ldd	r18, Y+60	; 0x3c
    798c:	3d ad       	ldd	r19, Y+61	; 0x3d
    798e:	4e ad       	ldd	r20, Y+62	; 0x3e
    7990:	5f ad       	ldd	r21, Y+63	; 0x3f
    7992:	65 97       	sbiw	r28, 0x15	; 21
    7994:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <__mulsi3>
    7998:	9b 01       	movw	r18, r22
    799a:	ac 01       	movw	r20, r24
    799c:	87 01       	movw	r16, r14
    799e:	ff 24       	eor	r15, r15
    79a0:	ee 24       	eor	r14, r14
    79a2:	ad 8c       	ldd	r10, Y+29	; 0x1d
    79a4:	be 8c       	ldd	r11, Y+30	; 0x1e
    79a6:	cf 8c       	ldd	r12, Y+31	; 0x1f
    79a8:	d8 a0       	ldd	r13, Y+32	; 0x20
    79aa:	c6 01       	movw	r24, r12
    79ac:	aa 27       	eor	r26, r26
    79ae:	bb 27       	eor	r27, r27
    79b0:	57 01       	movw	r10, r14
    79b2:	68 01       	movw	r12, r16
    79b4:	a8 2a       	or	r10, r24
    79b6:	b9 2a       	or	r11, r25
    79b8:	ca 2a       	or	r12, r26
    79ba:	db 2a       	or	r13, r27
    79bc:	a2 16       	cp	r10, r18
    79be:	b3 06       	cpc	r11, r19
    79c0:	c4 06       	cpc	r12, r20
    79c2:	d5 06       	cpc	r13, r21
    79c4:	00 f5       	brcc	.+64     	; 0x7a06 <__udivdi3+0xa2e>
    79c6:	08 94       	sec
    79c8:	21 08       	sbc	r2, r1
    79ca:	31 08       	sbc	r3, r1
    79cc:	41 08       	sbc	r4, r1
    79ce:	51 08       	sbc	r5, r1
    79d0:	ed a0       	ldd	r14, Y+37	; 0x25
    79d2:	fe a0       	ldd	r15, Y+38	; 0x26
    79d4:	0f a1       	ldd	r16, Y+39	; 0x27
    79d6:	18 a5       	ldd	r17, Y+40	; 0x28
    79d8:	ae 0c       	add	r10, r14
    79da:	bf 1c       	adc	r11, r15
    79dc:	c0 1e       	adc	r12, r16
    79de:	d1 1e       	adc	r13, r17
    79e0:	ae 14       	cp	r10, r14
    79e2:	bf 04       	cpc	r11, r15
    79e4:	c0 06       	cpc	r12, r16
    79e6:	d1 06       	cpc	r13, r17
    79e8:	70 f0       	brcs	.+28     	; 0x7a06 <__udivdi3+0xa2e>
    79ea:	a2 16       	cp	r10, r18
    79ec:	b3 06       	cpc	r11, r19
    79ee:	c4 06       	cpc	r12, r20
    79f0:	d5 06       	cpc	r13, r21
    79f2:	48 f4       	brcc	.+18     	; 0x7a06 <__udivdi3+0xa2e>
    79f4:	08 94       	sec
    79f6:	21 08       	sbc	r2, r1
    79f8:	31 08       	sbc	r3, r1
    79fa:	41 08       	sbc	r4, r1
    79fc:	51 08       	sbc	r5, r1
    79fe:	ae 0c       	add	r10, r14
    7a00:	bf 1c       	adc	r11, r15
    7a02:	c0 1e       	adc	r12, r16
    7a04:	d1 1e       	adc	r13, r17
    7a06:	a2 1a       	sub	r10, r18
    7a08:	b3 0a       	sbc	r11, r19
    7a0a:	c4 0a       	sbc	r12, r20
    7a0c:	d5 0a       	sbc	r13, r21
    7a0e:	c6 01       	movw	r24, r12
    7a10:	b5 01       	movw	r22, r10
    7a12:	a4 01       	movw	r20, r8
    7a14:	93 01       	movw	r18, r6
    7a16:	0e 94 5d 46 	call	0x8cba	; 0x8cba <__udivmodsi4>
    7a1a:	7b 01       	movw	r14, r22
    7a1c:	8c 01       	movw	r16, r24
    7a1e:	c6 01       	movw	r24, r12
    7a20:	b5 01       	movw	r22, r10
    7a22:	a4 01       	movw	r20, r8
    7a24:	93 01       	movw	r18, r6
    7a26:	0e 94 5d 46 	call	0x8cba	; 0x8cba <__udivmodsi4>
    7a2a:	c9 01       	movw	r24, r18
    7a2c:	da 01       	movw	r26, r20
    7a2e:	3c 01       	movw	r6, r24
    7a30:	4d 01       	movw	r8, r26
    7a32:	c4 01       	movw	r24, r8
    7a34:	b3 01       	movw	r22, r6
    7a36:	65 96       	adiw	r28, 0x15	; 21
    7a38:	2c ad       	ldd	r18, Y+60	; 0x3c
    7a3a:	3d ad       	ldd	r19, Y+61	; 0x3d
    7a3c:	4e ad       	ldd	r20, Y+62	; 0x3e
    7a3e:	5f ad       	ldd	r21, Y+63	; 0x3f
    7a40:	65 97       	sbiw	r28, 0x15	; 21
    7a42:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <__mulsi3>
    7a46:	9b 01       	movw	r18, r22
    7a48:	ac 01       	movw	r20, r24
    7a4a:	87 01       	movw	r16, r14
    7a4c:	ff 24       	eor	r15, r15
    7a4e:	ee 24       	eor	r14, r14
    7a50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7a52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7a54:	af 8d       	ldd	r26, Y+31	; 0x1f
    7a56:	b8 a1       	ldd	r27, Y+32	; 0x20
    7a58:	a0 70       	andi	r26, 0x00	; 0
    7a5a:	b0 70       	andi	r27, 0x00	; 0
    7a5c:	57 01       	movw	r10, r14
    7a5e:	68 01       	movw	r12, r16
    7a60:	a8 2a       	or	r10, r24
    7a62:	b9 2a       	or	r11, r25
    7a64:	ca 2a       	or	r12, r26
    7a66:	db 2a       	or	r13, r27
    7a68:	a2 16       	cp	r10, r18
    7a6a:	b3 06       	cpc	r11, r19
    7a6c:	c4 06       	cpc	r12, r20
    7a6e:	d5 06       	cpc	r13, r21
    7a70:	00 f5       	brcc	.+64     	; 0x7ab2 <__udivdi3+0xada>
    7a72:	08 94       	sec
    7a74:	61 08       	sbc	r6, r1
    7a76:	71 08       	sbc	r7, r1
    7a78:	81 08       	sbc	r8, r1
    7a7a:	91 08       	sbc	r9, r1
    7a7c:	6d a1       	ldd	r22, Y+37	; 0x25
    7a7e:	7e a1       	ldd	r23, Y+38	; 0x26
    7a80:	8f a1       	ldd	r24, Y+39	; 0x27
    7a82:	98 a5       	ldd	r25, Y+40	; 0x28
    7a84:	a6 0e       	add	r10, r22
    7a86:	b7 1e       	adc	r11, r23
    7a88:	c8 1e       	adc	r12, r24
    7a8a:	d9 1e       	adc	r13, r25
    7a8c:	a6 16       	cp	r10, r22
    7a8e:	b7 06       	cpc	r11, r23
    7a90:	c8 06       	cpc	r12, r24
    7a92:	d9 06       	cpc	r13, r25
    7a94:	70 f0       	brcs	.+28     	; 0x7ab2 <__udivdi3+0xada>
    7a96:	a2 16       	cp	r10, r18
    7a98:	b3 06       	cpc	r11, r19
    7a9a:	c4 06       	cpc	r12, r20
    7a9c:	d5 06       	cpc	r13, r21
    7a9e:	48 f4       	brcc	.+18     	; 0x7ab2 <__udivdi3+0xada>
    7aa0:	08 94       	sec
    7aa2:	61 08       	sbc	r6, r1
    7aa4:	71 08       	sbc	r7, r1
    7aa6:	81 08       	sbc	r8, r1
    7aa8:	91 08       	sbc	r9, r1
    7aaa:	a6 0e       	add	r10, r22
    7aac:	b7 1e       	adc	r11, r23
    7aae:	c8 1e       	adc	r12, r24
    7ab0:	d9 1e       	adc	r13, r25
    7ab2:	d6 01       	movw	r26, r12
    7ab4:	c5 01       	movw	r24, r10
    7ab6:	82 1b       	sub	r24, r18
    7ab8:	93 0b       	sbc	r25, r19
    7aba:	a4 0b       	sbc	r26, r20
    7abc:	b5 0b       	sbc	r27, r21
    7abe:	89 8f       	std	Y+25, r24	; 0x19
    7ac0:	9a 8f       	std	Y+26, r25	; 0x1a
    7ac2:	ab 8f       	std	Y+27, r26	; 0x1b
    7ac4:	bc 8f       	std	Y+28, r27	; 0x1c
    7ac6:	d1 01       	movw	r26, r2
    7ac8:	99 27       	eor	r25, r25
    7aca:	88 27       	eor	r24, r24
    7acc:	64 01       	movw	r12, r8
    7ace:	53 01       	movw	r10, r6
    7ad0:	a8 2a       	or	r10, r24
    7ad2:	b9 2a       	or	r11, r25
    7ad4:	ca 2a       	or	r12, r26
    7ad6:	db 2a       	or	r13, r27
    7ad8:	a9 aa       	std	Y+49, r10	; 0x31
    7ada:	ba aa       	std	Y+50, r11	; 0x32
    7adc:	cb aa       	std	Y+51, r12	; 0x33
    7ade:	dc aa       	std	Y+52, r13	; 0x34
    7ae0:	86 01       	movw	r16, r12
    7ae2:	75 01       	movw	r14, r10
    7ae4:	2f ef       	ldi	r18, 0xFF	; 255
    7ae6:	3f ef       	ldi	r19, 0xFF	; 255
    7ae8:	40 e0       	ldi	r20, 0x00	; 0
    7aea:	50 e0       	ldi	r21, 0x00	; 0
    7aec:	e2 22       	and	r14, r18
    7aee:	f3 22       	and	r15, r19
    7af0:	04 23       	and	r16, r20
    7af2:	15 23       	and	r17, r21
    7af4:	a6 01       	movw	r20, r12
    7af6:	66 27       	eor	r22, r22
    7af8:	77 27       	eor	r23, r23
    7afa:	6d 96       	adiw	r28, 0x1d	; 29
    7afc:	4c af       	std	Y+60, r20	; 0x3c
    7afe:	5d af       	std	Y+61, r21	; 0x3d
    7b00:	6e af       	std	Y+62, r22	; 0x3e
    7b02:	7f af       	std	Y+63, r23	; 0x3f
    7b04:	6d 97       	sbiw	r28, 0x1d	; 29
    7b06:	a9 a0       	ldd	r10, Y+33	; 0x21
    7b08:	ba a0       	ldd	r11, Y+34	; 0x22
    7b0a:	cb a0       	ldd	r12, Y+35	; 0x23
    7b0c:	dc a0       	ldd	r13, Y+36	; 0x24
    7b0e:	6f ef       	ldi	r22, 0xFF	; 255
    7b10:	7f ef       	ldi	r23, 0xFF	; 255
    7b12:	80 e0       	ldi	r24, 0x00	; 0
    7b14:	90 e0       	ldi	r25, 0x00	; 0
    7b16:	a6 22       	and	r10, r22
    7b18:	b7 22       	and	r11, r23
    7b1a:	c8 22       	and	r12, r24
    7b1c:	d9 22       	and	r13, r25
    7b1e:	89 a1       	ldd	r24, Y+33	; 0x21
    7b20:	9a a1       	ldd	r25, Y+34	; 0x22
    7b22:	ab a1       	ldd	r26, Y+35	; 0x23
    7b24:	bc a1       	ldd	r27, Y+36	; 0x24
    7b26:	1d 01       	movw	r2, r26
    7b28:	44 24       	eor	r4, r4
    7b2a:	55 24       	eor	r5, r5
    7b2c:	c8 01       	movw	r24, r16
    7b2e:	b7 01       	movw	r22, r14
    7b30:	a6 01       	movw	r20, r12
    7b32:	95 01       	movw	r18, r10
    7b34:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <__mulsi3>
    7b38:	69 96       	adiw	r28, 0x19	; 25
    7b3a:	6c af       	std	Y+60, r22	; 0x3c
    7b3c:	7d af       	std	Y+61, r23	; 0x3d
    7b3e:	8e af       	std	Y+62, r24	; 0x3e
    7b40:	9f af       	std	Y+63, r25	; 0x3f
    7b42:	69 97       	sbiw	r28, 0x19	; 25
    7b44:	c8 01       	movw	r24, r16
    7b46:	b7 01       	movw	r22, r14
    7b48:	a2 01       	movw	r20, r4
    7b4a:	91 01       	movw	r18, r2
    7b4c:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <__mulsi3>
    7b50:	3b 01       	movw	r6, r22
    7b52:	4c 01       	movw	r8, r24
    7b54:	6d 96       	adiw	r28, 0x1d	; 29
    7b56:	6c ad       	ldd	r22, Y+60	; 0x3c
    7b58:	7d ad       	ldd	r23, Y+61	; 0x3d
    7b5a:	8e ad       	ldd	r24, Y+62	; 0x3e
    7b5c:	9f ad       	ldd	r25, Y+63	; 0x3f
    7b5e:	6d 97       	sbiw	r28, 0x1d	; 29
    7b60:	a6 01       	movw	r20, r12
    7b62:	95 01       	movw	r18, r10
    7b64:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <__mulsi3>
    7b68:	7b 01       	movw	r14, r22
    7b6a:	8c 01       	movw	r16, r24
    7b6c:	6d 96       	adiw	r28, 0x1d	; 29
    7b6e:	6c ad       	ldd	r22, Y+60	; 0x3c
    7b70:	7d ad       	ldd	r23, Y+61	; 0x3d
    7b72:	8e ad       	ldd	r24, Y+62	; 0x3e
    7b74:	9f ad       	ldd	r25, Y+63	; 0x3f
    7b76:	6d 97       	sbiw	r28, 0x1d	; 29
    7b78:	a2 01       	movw	r20, r4
    7b7a:	91 01       	movw	r18, r2
    7b7c:	0e 94 3e 46 	call	0x8c7c	; 0x8c7c <__mulsi3>
    7b80:	5b 01       	movw	r10, r22
    7b82:	6c 01       	movw	r12, r24
    7b84:	a8 01       	movw	r20, r16
    7b86:	97 01       	movw	r18, r14
    7b88:	26 0d       	add	r18, r6
    7b8a:	37 1d       	adc	r19, r7
    7b8c:	48 1d       	adc	r20, r8
    7b8e:	59 1d       	adc	r21, r9
    7b90:	69 96       	adiw	r28, 0x19	; 25
    7b92:	6c ac       	ldd	r6, Y+60	; 0x3c
    7b94:	7d ac       	ldd	r7, Y+61	; 0x3d
    7b96:	8e ac       	ldd	r8, Y+62	; 0x3e
    7b98:	9f ac       	ldd	r9, Y+63	; 0x3f
    7b9a:	69 97       	sbiw	r28, 0x19	; 25
    7b9c:	c4 01       	movw	r24, r8
    7b9e:	aa 27       	eor	r26, r26
    7ba0:	bb 27       	eor	r27, r27
    7ba2:	28 0f       	add	r18, r24
    7ba4:	39 1f       	adc	r19, r25
    7ba6:	4a 1f       	adc	r20, r26
    7ba8:	5b 1f       	adc	r21, r27
    7baa:	2e 15       	cp	r18, r14
    7bac:	3f 05       	cpc	r19, r15
    7bae:	40 07       	cpc	r20, r16
    7bb0:	51 07       	cpc	r21, r17
    7bb2:	48 f4       	brcc	.+18     	; 0x7bc6 <__udivdi3+0xbee>
    7bb4:	e1 2c       	mov	r14, r1
    7bb6:	f1 2c       	mov	r15, r1
    7bb8:	61 e0       	ldi	r22, 0x01	; 1
    7bba:	06 2f       	mov	r16, r22
    7bbc:	11 2d       	mov	r17, r1
    7bbe:	ae 0c       	add	r10, r14
    7bc0:	bf 1c       	adc	r11, r15
    7bc2:	c0 1e       	adc	r12, r16
    7bc4:	d1 1e       	adc	r13, r17
    7bc6:	ca 01       	movw	r24, r20
    7bc8:	aa 27       	eor	r26, r26
    7bca:	bb 27       	eor	r27, r27
    7bcc:	bc 01       	movw	r22, r24
    7bce:	cd 01       	movw	r24, r26
    7bd0:	6a 0d       	add	r22, r10
    7bd2:	7b 1d       	adc	r23, r11
    7bd4:	8c 1d       	adc	r24, r12
    7bd6:	9d 1d       	adc	r25, r13
    7bd8:	69 8c       	ldd	r6, Y+25	; 0x19
    7bda:	7a 8c       	ldd	r7, Y+26	; 0x1a
    7bdc:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7bde:	9c 8c       	ldd	r9, Y+28	; 0x1c
    7be0:	66 16       	cp	r6, r22
    7be2:	77 06       	cpc	r7, r23
    7be4:	88 06       	cpc	r8, r24
    7be6:	99 06       	cpc	r9, r25
    7be8:	40 f1       	brcs	.+80     	; 0x7c3a <__udivdi3+0xc62>
    7bea:	66 15       	cp	r22, r6
    7bec:	77 05       	cpc	r23, r7
    7bee:	88 05       	cpc	r24, r8
    7bf0:	99 05       	cpc	r25, r9
    7bf2:	09 f0       	breq	.+2      	; 0x7bf6 <__udivdi3+0xc1e>
    7bf4:	43 c0       	rjmp	.+134    	; 0x7c7c <__udivdi3+0xca4>
    7bf6:	d9 01       	movw	r26, r18
    7bf8:	99 27       	eor	r25, r25
    7bfa:	88 27       	eor	r24, r24
    7bfc:	69 96       	adiw	r28, 0x19	; 25
    7bfe:	2c ad       	ldd	r18, Y+60	; 0x3c
    7c00:	3d ad       	ldd	r19, Y+61	; 0x3d
    7c02:	4e ad       	ldd	r20, Y+62	; 0x3e
    7c04:	5f ad       	ldd	r21, Y+63	; 0x3f
    7c06:	69 97       	sbiw	r28, 0x19	; 25
    7c08:	40 70       	andi	r20, 0x00	; 0
    7c0a:	50 70       	andi	r21, 0x00	; 0
    7c0c:	82 0f       	add	r24, r18
    7c0e:	93 1f       	adc	r25, r19
    7c10:	a4 1f       	adc	r26, r20
    7c12:	b5 1f       	adc	r27, r21
    7c14:	2d a5       	ldd	r18, Y+45	; 0x2d
    7c16:	3e a5       	ldd	r19, Y+46	; 0x2e
    7c18:	4f a5       	ldd	r20, Y+47	; 0x2f
    7c1a:	58 a9       	ldd	r21, Y+48	; 0x30
    7c1c:	6e 96       	adiw	r28, 0x1e	; 30
    7c1e:	0f ac       	ldd	r0, Y+63	; 0x3f
    7c20:	6e 97       	sbiw	r28, 0x1e	; 30
    7c22:	04 c0       	rjmp	.+8      	; 0x7c2c <__udivdi3+0xc54>
    7c24:	22 0f       	add	r18, r18
    7c26:	33 1f       	adc	r19, r19
    7c28:	44 1f       	adc	r20, r20
    7c2a:	55 1f       	adc	r21, r21
    7c2c:	0a 94       	dec	r0
    7c2e:	d2 f7       	brpl	.-12     	; 0x7c24 <__udivdi3+0xc4c>
    7c30:	28 17       	cp	r18, r24
    7c32:	39 07       	cpc	r19, r25
    7c34:	4a 07       	cpc	r20, r26
    7c36:	5b 07       	cpc	r21, r27
    7c38:	08 f5       	brcc	.+66     	; 0x7c7c <__udivdi3+0xca4>
    7c3a:	09 a9       	ldd	r16, Y+49	; 0x31
    7c3c:	1a a9       	ldd	r17, Y+50	; 0x32
    7c3e:	2b a9       	ldd	r18, Y+51	; 0x33
    7c40:	3c a9       	ldd	r19, Y+52	; 0x34
    7c42:	01 50       	subi	r16, 0x01	; 1
    7c44:	10 40       	sbci	r17, 0x00	; 0
    7c46:	20 40       	sbci	r18, 0x00	; 0
    7c48:	30 40       	sbci	r19, 0x00	; 0
    7c4a:	09 ab       	std	Y+49, r16	; 0x31
    7c4c:	1a ab       	std	Y+50, r17	; 0x32
    7c4e:	2b ab       	std	Y+51, r18	; 0x33
    7c50:	3c ab       	std	Y+52, r19	; 0x34
    7c52:	14 c0       	rjmp	.+40     	; 0x7c7c <__udivdi3+0xca4>
    7c54:	66 24       	eor	r6, r6
    7c56:	77 24       	eor	r7, r7
    7c58:	43 01       	movw	r8, r6
    7c5a:	21 e0       	ldi	r18, 0x01	; 1
    7c5c:	30 e0       	ldi	r19, 0x00	; 0
    7c5e:	40 e0       	ldi	r20, 0x00	; 0
    7c60:	50 e0       	ldi	r21, 0x00	; 0
    7c62:	29 ab       	std	Y+49, r18	; 0x31
    7c64:	3a ab       	std	Y+50, r19	; 0x32
    7c66:	4b ab       	std	Y+51, r20	; 0x33
    7c68:	5c ab       	std	Y+52, r21	; 0x34
    7c6a:	0b c0       	rjmp	.+22     	; 0x7c82 <__udivdi3+0xcaa>
    7c6c:	66 24       	eor	r6, r6
    7c6e:	77 24       	eor	r7, r7
    7c70:	43 01       	movw	r8, r6
    7c72:	19 aa       	std	Y+49, r1	; 0x31
    7c74:	1a aa       	std	Y+50, r1	; 0x32
    7c76:	1b aa       	std	Y+51, r1	; 0x33
    7c78:	1c aa       	std	Y+52, r1	; 0x34
    7c7a:	03 c0       	rjmp	.+6      	; 0x7c82 <__udivdi3+0xcaa>
    7c7c:	66 24       	eor	r6, r6
    7c7e:	77 24       	eor	r7, r7
    7c80:	43 01       	movw	r8, r6
    7c82:	fe 01       	movw	r30, r28
    7c84:	71 96       	adiw	r30, 0x11	; 17
    7c86:	88 e0       	ldi	r24, 0x08	; 8
    7c88:	df 01       	movw	r26, r30
    7c8a:	1d 92       	st	X+, r1
    7c8c:	8a 95       	dec	r24
    7c8e:	e9 f7       	brne	.-6      	; 0x7c8a <__udivdi3+0xcb2>
    7c90:	a9 a8       	ldd	r10, Y+49	; 0x31
    7c92:	ba a8       	ldd	r11, Y+50	; 0x32
    7c94:	cb a8       	ldd	r12, Y+51	; 0x33
    7c96:	dc a8       	ldd	r13, Y+52	; 0x34
    7c98:	a9 8a       	std	Y+17, r10	; 0x11
    7c9a:	ba 8a       	std	Y+18, r11	; 0x12
    7c9c:	cb 8a       	std	Y+19, r12	; 0x13
    7c9e:	dc 8a       	std	Y+20, r13	; 0x14
    7ca0:	6d 8a       	std	Y+21, r6	; 0x15
    7ca2:	7e 8a       	std	Y+22, r7	; 0x16
    7ca4:	8f 8a       	std	Y+23, r8	; 0x17
    7ca6:	98 8e       	std	Y+24, r9	; 0x18
    7ca8:	29 a9       	ldd	r18, Y+49	; 0x31
    7caa:	3a 89       	ldd	r19, Y+18	; 0x12
    7cac:	4b 89       	ldd	r20, Y+19	; 0x13
    7cae:	5c 89       	ldd	r21, Y+20	; 0x14
    7cb0:	66 2d       	mov	r22, r6
    7cb2:	7e 89       	ldd	r23, Y+22	; 0x16
    7cb4:	8f 89       	ldd	r24, Y+23	; 0x17
    7cb6:	98 8d       	ldd	r25, Y+24	; 0x18
    7cb8:	c2 5a       	subi	r28, 0xA2	; 162
    7cba:	df 4f       	sbci	r29, 0xFF	; 255
    7cbc:	e2 e1       	ldi	r30, 0x12	; 18
    7cbe:	0c 94 9b 46 	jmp	0x8d36	; 0x8d36 <__epilogue_restores__>

00007cc2 <vfprintf>:
    7cc2:	2f 92       	push	r2
    7cc4:	3f 92       	push	r3
    7cc6:	4f 92       	push	r4
    7cc8:	5f 92       	push	r5
    7cca:	6f 92       	push	r6
    7ccc:	7f 92       	push	r7
    7cce:	8f 92       	push	r8
    7cd0:	9f 92       	push	r9
    7cd2:	af 92       	push	r10
    7cd4:	bf 92       	push	r11
    7cd6:	cf 92       	push	r12
    7cd8:	df 92       	push	r13
    7cda:	ef 92       	push	r14
    7cdc:	ff 92       	push	r15
    7cde:	0f 93       	push	r16
    7ce0:	1f 93       	push	r17
    7ce2:	df 93       	push	r29
    7ce4:	cf 93       	push	r28
    7ce6:	cd b7       	in	r28, 0x3d	; 61
    7ce8:	de b7       	in	r29, 0x3e	; 62
    7cea:	61 97       	sbiw	r28, 0x11	; 17
    7cec:	cd bf       	out	0x3d, r28	; 61
    7cee:	de bf       	out	0x3e, r29	; 62
    7cf0:	3c 01       	movw	r6, r24
    7cf2:	6e 87       	std	Y+14, r22	; 0x0e
    7cf4:	7f 87       	std	Y+15, r23	; 0x0f
    7cf6:	6a 01       	movw	r12, r20
    7cf8:	fc 01       	movw	r30, r24
    7cfa:	16 82       	std	Z+6, r1	; 0x06
    7cfc:	17 82       	std	Z+7, r1	; 0x07
    7cfe:	83 81       	ldd	r24, Z+3	; 0x03
    7d00:	81 fd       	sbrc	r24, 1
    7d02:	03 c0       	rjmp	.+6      	; 0x7d0a <vfprintf+0x48>
    7d04:	6f ef       	ldi	r22, 0xFF	; 255
    7d06:	7f ef       	ldi	r23, 0xFF	; 255
    7d08:	6f c3       	rjmp	.+1758   	; 0x83e8 <vfprintf+0x726>
    7d0a:	9e 01       	movw	r18, r28
    7d0c:	2f 5f       	subi	r18, 0xFF	; 255
    7d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    7d10:	28 8b       	std	Y+16, r18	; 0x10
    7d12:	39 8b       	std	Y+17, r19	; 0x11
    7d14:	f3 01       	movw	r30, r6
    7d16:	23 81       	ldd	r18, Z+3	; 0x03
    7d18:	ee 85       	ldd	r30, Y+14	; 0x0e
    7d1a:	ff 85       	ldd	r31, Y+15	; 0x0f
    7d1c:	23 fd       	sbrc	r18, 3
    7d1e:	85 91       	lpm	r24, Z+
    7d20:	23 ff       	sbrs	r18, 3
    7d22:	81 91       	ld	r24, Z+
    7d24:	ee 87       	std	Y+14, r30	; 0x0e
    7d26:	ff 87       	std	Y+15, r31	; 0x0f
    7d28:	88 23       	and	r24, r24
    7d2a:	09 f4       	brne	.+2      	; 0x7d2e <vfprintf+0x6c>
    7d2c:	5a c3       	rjmp	.+1716   	; 0x83e2 <vfprintf+0x720>
    7d2e:	85 32       	cpi	r24, 0x25	; 37
    7d30:	51 f4       	brne	.+20     	; 0x7d46 <vfprintf+0x84>
    7d32:	ee 85       	ldd	r30, Y+14	; 0x0e
    7d34:	ff 85       	ldd	r31, Y+15	; 0x0f
    7d36:	23 fd       	sbrc	r18, 3
    7d38:	85 91       	lpm	r24, Z+
    7d3a:	23 ff       	sbrs	r18, 3
    7d3c:	81 91       	ld	r24, Z+
    7d3e:	ee 87       	std	Y+14, r30	; 0x0e
    7d40:	ff 87       	std	Y+15, r31	; 0x0f
    7d42:	85 32       	cpi	r24, 0x25	; 37
    7d44:	29 f4       	brne	.+10     	; 0x7d50 <vfprintf+0x8e>
    7d46:	90 e0       	ldi	r25, 0x00	; 0
    7d48:	b3 01       	movw	r22, r6
    7d4a:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    7d4e:	e2 cf       	rjmp	.-60     	; 0x7d14 <vfprintf+0x52>
    7d50:	98 2f       	mov	r25, r24
    7d52:	10 e0       	ldi	r17, 0x00	; 0
    7d54:	88 24       	eor	r8, r8
    7d56:	99 24       	eor	r9, r9
    7d58:	10 32       	cpi	r17, 0x20	; 32
    7d5a:	b0 f4       	brcc	.+44     	; 0x7d88 <vfprintf+0xc6>
    7d5c:	9b 32       	cpi	r25, 0x2B	; 43
    7d5e:	69 f0       	breq	.+26     	; 0x7d7a <vfprintf+0xb8>
    7d60:	9c 32       	cpi	r25, 0x2C	; 44
    7d62:	28 f4       	brcc	.+10     	; 0x7d6e <vfprintf+0xac>
    7d64:	90 32       	cpi	r25, 0x20	; 32
    7d66:	51 f0       	breq	.+20     	; 0x7d7c <vfprintf+0xba>
    7d68:	93 32       	cpi	r25, 0x23	; 35
    7d6a:	71 f4       	brne	.+28     	; 0x7d88 <vfprintf+0xc6>
    7d6c:	0b c0       	rjmp	.+22     	; 0x7d84 <vfprintf+0xc2>
    7d6e:	9d 32       	cpi	r25, 0x2D	; 45
    7d70:	39 f0       	breq	.+14     	; 0x7d80 <vfprintf+0xbe>
    7d72:	90 33       	cpi	r25, 0x30	; 48
    7d74:	49 f4       	brne	.+18     	; 0x7d88 <vfprintf+0xc6>
    7d76:	11 60       	ori	r17, 0x01	; 1
    7d78:	28 c0       	rjmp	.+80     	; 0x7dca <vfprintf+0x108>
    7d7a:	12 60       	ori	r17, 0x02	; 2
    7d7c:	14 60       	ori	r17, 0x04	; 4
    7d7e:	25 c0       	rjmp	.+74     	; 0x7dca <vfprintf+0x108>
    7d80:	18 60       	ori	r17, 0x08	; 8
    7d82:	23 c0       	rjmp	.+70     	; 0x7dca <vfprintf+0x108>
    7d84:	10 61       	ori	r17, 0x10	; 16
    7d86:	21 c0       	rjmp	.+66     	; 0x7dca <vfprintf+0x108>
    7d88:	17 fd       	sbrc	r17, 7
    7d8a:	2a c0       	rjmp	.+84     	; 0x7de0 <vfprintf+0x11e>
    7d8c:	89 2f       	mov	r24, r25
    7d8e:	80 53       	subi	r24, 0x30	; 48
    7d90:	8a 30       	cpi	r24, 0x0A	; 10
    7d92:	78 f4       	brcc	.+30     	; 0x7db2 <vfprintf+0xf0>
    7d94:	16 ff       	sbrs	r17, 6
    7d96:	06 c0       	rjmp	.+12     	; 0x7da4 <vfprintf+0xe2>
    7d98:	fa e0       	ldi	r31, 0x0A	; 10
    7d9a:	9f 9e       	mul	r9, r31
    7d9c:	90 2c       	mov	r9, r0
    7d9e:	11 24       	eor	r1, r1
    7da0:	98 0e       	add	r9, r24
    7da2:	13 c0       	rjmp	.+38     	; 0x7dca <vfprintf+0x108>
    7da4:	3a e0       	ldi	r19, 0x0A	; 10
    7da6:	83 9e       	mul	r8, r19
    7da8:	80 2c       	mov	r8, r0
    7daa:	11 24       	eor	r1, r1
    7dac:	88 0e       	add	r8, r24
    7dae:	10 62       	ori	r17, 0x20	; 32
    7db0:	0c c0       	rjmp	.+24     	; 0x7dca <vfprintf+0x108>
    7db2:	9e 32       	cpi	r25, 0x2E	; 46
    7db4:	21 f4       	brne	.+8      	; 0x7dbe <vfprintf+0xfc>
    7db6:	16 fd       	sbrc	r17, 6
    7db8:	14 c3       	rjmp	.+1576   	; 0x83e2 <vfprintf+0x720>
    7dba:	10 64       	ori	r17, 0x40	; 64
    7dbc:	06 c0       	rjmp	.+12     	; 0x7dca <vfprintf+0x108>
    7dbe:	9c 36       	cpi	r25, 0x6C	; 108
    7dc0:	11 f4       	brne	.+4      	; 0x7dc6 <vfprintf+0x104>
    7dc2:	10 68       	ori	r17, 0x80	; 128
    7dc4:	02 c0       	rjmp	.+4      	; 0x7dca <vfprintf+0x108>
    7dc6:	98 36       	cpi	r25, 0x68	; 104
    7dc8:	59 f4       	brne	.+22     	; 0x7de0 <vfprintf+0x11e>
    7dca:	ee 85       	ldd	r30, Y+14	; 0x0e
    7dcc:	ff 85       	ldd	r31, Y+15	; 0x0f
    7dce:	23 fd       	sbrc	r18, 3
    7dd0:	95 91       	lpm	r25, Z+
    7dd2:	23 ff       	sbrs	r18, 3
    7dd4:	91 91       	ld	r25, Z+
    7dd6:	ee 87       	std	Y+14, r30	; 0x0e
    7dd8:	ff 87       	std	Y+15, r31	; 0x0f
    7dda:	99 23       	and	r25, r25
    7ddc:	09 f0       	breq	.+2      	; 0x7de0 <vfprintf+0x11e>
    7dde:	bc cf       	rjmp	.-136    	; 0x7d58 <vfprintf+0x96>
    7de0:	89 2f       	mov	r24, r25
    7de2:	85 54       	subi	r24, 0x45	; 69
    7de4:	83 30       	cpi	r24, 0x03	; 3
    7de6:	20 f4       	brcc	.+8      	; 0x7df0 <vfprintf+0x12e>
    7de8:	81 2f       	mov	r24, r17
    7dea:	80 61       	ori	r24, 0x10	; 16
    7dec:	90 5e       	subi	r25, 0xE0	; 224
    7dee:	07 c0       	rjmp	.+14     	; 0x7dfe <vfprintf+0x13c>
    7df0:	89 2f       	mov	r24, r25
    7df2:	85 56       	subi	r24, 0x65	; 101
    7df4:	83 30       	cpi	r24, 0x03	; 3
    7df6:	08 f0       	brcs	.+2      	; 0x7dfa <vfprintf+0x138>
    7df8:	9f c1       	rjmp	.+830    	; 0x8138 <vfprintf+0x476>
    7dfa:	81 2f       	mov	r24, r17
    7dfc:	8f 7e       	andi	r24, 0xEF	; 239
    7dfe:	86 fd       	sbrc	r24, 6
    7e00:	02 c0       	rjmp	.+4      	; 0x7e06 <vfprintf+0x144>
    7e02:	76 e0       	ldi	r23, 0x06	; 6
    7e04:	97 2e       	mov	r9, r23
    7e06:	6f e3       	ldi	r22, 0x3F	; 63
    7e08:	f6 2e       	mov	r15, r22
    7e0a:	f8 22       	and	r15, r24
    7e0c:	95 36       	cpi	r25, 0x65	; 101
    7e0e:	19 f4       	brne	.+6      	; 0x7e16 <vfprintf+0x154>
    7e10:	f0 e4       	ldi	r31, 0x40	; 64
    7e12:	ff 2a       	or	r15, r31
    7e14:	07 c0       	rjmp	.+14     	; 0x7e24 <vfprintf+0x162>
    7e16:	96 36       	cpi	r25, 0x66	; 102
    7e18:	19 f4       	brne	.+6      	; 0x7e20 <vfprintf+0x15e>
    7e1a:	20 e8       	ldi	r18, 0x80	; 128
    7e1c:	f2 2a       	or	r15, r18
    7e1e:	02 c0       	rjmp	.+4      	; 0x7e24 <vfprintf+0x162>
    7e20:	91 10       	cpse	r9, r1
    7e22:	9a 94       	dec	r9
    7e24:	f7 fe       	sbrs	r15, 7
    7e26:	0a c0       	rjmp	.+20     	; 0x7e3c <vfprintf+0x17a>
    7e28:	3b e3       	ldi	r19, 0x3B	; 59
    7e2a:	39 15       	cp	r19, r9
    7e2c:	18 f4       	brcc	.+6      	; 0x7e34 <vfprintf+0x172>
    7e2e:	5c e3       	ldi	r21, 0x3C	; 60
    7e30:	b5 2e       	mov	r11, r21
    7e32:	02 c0       	rjmp	.+4      	; 0x7e38 <vfprintf+0x176>
    7e34:	b9 2c       	mov	r11, r9
    7e36:	b3 94       	inc	r11
    7e38:	27 e0       	ldi	r18, 0x07	; 7
    7e3a:	09 c0       	rjmp	.+18     	; 0x7e4e <vfprintf+0x18c>
    7e3c:	47 e0       	ldi	r20, 0x07	; 7
    7e3e:	49 15       	cp	r20, r9
    7e40:	20 f4       	brcc	.+8      	; 0x7e4a <vfprintf+0x188>
    7e42:	bb 24       	eor	r11, r11
    7e44:	47 e0       	ldi	r20, 0x07	; 7
    7e46:	94 2e       	mov	r9, r20
    7e48:	f7 cf       	rjmp	.-18     	; 0x7e38 <vfprintf+0x176>
    7e4a:	29 2d       	mov	r18, r9
    7e4c:	bb 24       	eor	r11, r11
    7e4e:	c6 01       	movw	r24, r12
    7e50:	04 96       	adiw	r24, 0x04	; 4
    7e52:	8c 87       	std	Y+12, r24	; 0x0c
    7e54:	9d 87       	std	Y+13, r25	; 0x0d
    7e56:	f6 01       	movw	r30, r12
    7e58:	60 81       	ld	r22, Z
    7e5a:	71 81       	ldd	r23, Z+1	; 0x01
    7e5c:	82 81       	ldd	r24, Z+2	; 0x02
    7e5e:	93 81       	ldd	r25, Z+3	; 0x03
    7e60:	ae 01       	movw	r20, r28
    7e62:	4f 5f       	subi	r20, 0xFF	; 255
    7e64:	5f 4f       	sbci	r21, 0xFF	; 255
    7e66:	0b 2d       	mov	r16, r11
    7e68:	0e 94 42 48 	call	0x9084	; 0x9084 <__ftoa_engine>
    7e6c:	6c 01       	movw	r12, r24
    7e6e:	09 81       	ldd	r16, Y+1	; 0x01
    7e70:	20 2e       	mov	r2, r16
    7e72:	33 24       	eor	r3, r3
    7e74:	00 ff       	sbrs	r16, 0
    7e76:	04 c0       	rjmp	.+8      	; 0x7e80 <vfprintf+0x1be>
    7e78:	03 fd       	sbrc	r16, 3
    7e7a:	02 c0       	rjmp	.+4      	; 0x7e80 <vfprintf+0x1be>
    7e7c:	1d e2       	ldi	r17, 0x2D	; 45
    7e7e:	09 c0       	rjmp	.+18     	; 0x7e92 <vfprintf+0x1d0>
    7e80:	f1 fe       	sbrs	r15, 1
    7e82:	02 c0       	rjmp	.+4      	; 0x7e88 <vfprintf+0x1c6>
    7e84:	1b e2       	ldi	r17, 0x2B	; 43
    7e86:	05 c0       	rjmp	.+10     	; 0x7e92 <vfprintf+0x1d0>
    7e88:	f2 fc       	sbrc	r15, 2
    7e8a:	02 c0       	rjmp	.+4      	; 0x7e90 <vfprintf+0x1ce>
    7e8c:	10 e0       	ldi	r17, 0x00	; 0
    7e8e:	01 c0       	rjmp	.+2      	; 0x7e92 <vfprintf+0x1d0>
    7e90:	10 e2       	ldi	r17, 0x20	; 32
    7e92:	c1 01       	movw	r24, r2
    7e94:	8c 70       	andi	r24, 0x0C	; 12
    7e96:	90 70       	andi	r25, 0x00	; 0
    7e98:	89 2b       	or	r24, r25
    7e9a:	b9 f1       	breq	.+110    	; 0x7f0a <vfprintf+0x248>
    7e9c:	11 23       	and	r17, r17
    7e9e:	11 f4       	brne	.+4      	; 0x7ea4 <vfprintf+0x1e2>
    7ea0:	83 e0       	ldi	r24, 0x03	; 3
    7ea2:	01 c0       	rjmp	.+2      	; 0x7ea6 <vfprintf+0x1e4>
    7ea4:	84 e0       	ldi	r24, 0x04	; 4
    7ea6:	88 15       	cp	r24, r8
    7ea8:	10 f0       	brcs	.+4      	; 0x7eae <vfprintf+0x1ec>
    7eaa:	88 24       	eor	r8, r8
    7eac:	0a c0       	rjmp	.+20     	; 0x7ec2 <vfprintf+0x200>
    7eae:	88 1a       	sub	r8, r24
    7eb0:	f3 fc       	sbrc	r15, 3
    7eb2:	07 c0       	rjmp	.+14     	; 0x7ec2 <vfprintf+0x200>
    7eb4:	80 e2       	ldi	r24, 0x20	; 32
    7eb6:	90 e0       	ldi	r25, 0x00	; 0
    7eb8:	b3 01       	movw	r22, r6
    7eba:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    7ebe:	8a 94       	dec	r8
    7ec0:	c9 f7       	brne	.-14     	; 0x7eb4 <vfprintf+0x1f2>
    7ec2:	11 23       	and	r17, r17
    7ec4:	29 f0       	breq	.+10     	; 0x7ed0 <vfprintf+0x20e>
    7ec6:	81 2f       	mov	r24, r17
    7ec8:	90 e0       	ldi	r25, 0x00	; 0
    7eca:	b3 01       	movw	r22, r6
    7ecc:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    7ed0:	23 fe       	sbrs	r2, 3
    7ed2:	03 c0       	rjmp	.+6      	; 0x7eda <vfprintf+0x218>
    7ed4:	03 e3       	ldi	r16, 0x33	; 51
    7ed6:	12 e0       	ldi	r17, 0x02	; 2
    7ed8:	0e c0       	rjmp	.+28     	; 0x7ef6 <vfprintf+0x234>
    7eda:	07 e3       	ldi	r16, 0x37	; 55
    7edc:	12 e0       	ldi	r17, 0x02	; 2
    7ede:	0b c0       	rjmp	.+22     	; 0x7ef6 <vfprintf+0x234>
    7ee0:	e1 14       	cp	r14, r1
    7ee2:	f1 04       	cpc	r15, r1
    7ee4:	09 f0       	breq	.+2      	; 0x7ee8 <vfprintf+0x226>
    7ee6:	80 52       	subi	r24, 0x20	; 32
    7ee8:	90 e0       	ldi	r25, 0x00	; 0
    7eea:	b3 01       	movw	r22, r6
    7eec:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    7ef0:	0f 5f       	subi	r16, 0xFF	; 255
    7ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    7ef4:	05 c0       	rjmp	.+10     	; 0x7f00 <vfprintf+0x23e>
    7ef6:	ef 2c       	mov	r14, r15
    7ef8:	ff 24       	eor	r15, r15
    7efa:	f0 e1       	ldi	r31, 0x10	; 16
    7efc:	ef 22       	and	r14, r31
    7efe:	ff 24       	eor	r15, r15
    7f00:	f8 01       	movw	r30, r16
    7f02:	84 91       	lpm	r24, Z+
    7f04:	88 23       	and	r24, r24
    7f06:	61 f7       	brne	.-40     	; 0x7ee0 <vfprintf+0x21e>
    7f08:	14 c1       	rjmp	.+552    	; 0x8132 <vfprintf+0x470>
    7f0a:	f7 fe       	sbrs	r15, 7
    7f0c:	12 c0       	rjmp	.+36     	; 0x7f32 <vfprintf+0x270>
    7f0e:	bc 0c       	add	r11, r12
    7f10:	24 fe       	sbrs	r2, 4
    7f12:	04 c0       	rjmp	.+8      	; 0x7f1c <vfprintf+0x25a>
    7f14:	8a 81       	ldd	r24, Y+2	; 0x02
    7f16:	81 33       	cpi	r24, 0x31	; 49
    7f18:	09 f4       	brne	.+2      	; 0x7f1c <vfprintf+0x25a>
    7f1a:	ba 94       	dec	r11
    7f1c:	1b 14       	cp	r1, r11
    7f1e:	1c f0       	brlt	.+6      	; 0x7f26 <vfprintf+0x264>
    7f20:	bb 24       	eor	r11, r11
    7f22:	b3 94       	inc	r11
    7f24:	2d c0       	rjmp	.+90     	; 0x7f80 <vfprintf+0x2be>
    7f26:	f8 e0       	ldi	r31, 0x08	; 8
    7f28:	fb 15       	cp	r31, r11
    7f2a:	50 f5       	brcc	.+84     	; 0x7f80 <vfprintf+0x2be>
    7f2c:	38 e0       	ldi	r19, 0x08	; 8
    7f2e:	b3 2e       	mov	r11, r19
    7f30:	27 c0       	rjmp	.+78     	; 0x7f80 <vfprintf+0x2be>
    7f32:	f6 fc       	sbrc	r15, 6
    7f34:	25 c0       	rjmp	.+74     	; 0x7f80 <vfprintf+0x2be>
    7f36:	89 2d       	mov	r24, r9
    7f38:	90 e0       	ldi	r25, 0x00	; 0
    7f3a:	8c 15       	cp	r24, r12
    7f3c:	9d 05       	cpc	r25, r13
    7f3e:	4c f0       	brlt	.+18     	; 0x7f52 <vfprintf+0x290>
    7f40:	2c ef       	ldi	r18, 0xFC	; 252
    7f42:	c2 16       	cp	r12, r18
    7f44:	2f ef       	ldi	r18, 0xFF	; 255
    7f46:	d2 06       	cpc	r13, r18
    7f48:	24 f0       	brlt	.+8      	; 0x7f52 <vfprintf+0x290>
    7f4a:	30 e8       	ldi	r19, 0x80	; 128
    7f4c:	f3 2a       	or	r15, r19
    7f4e:	01 c0       	rjmp	.+2      	; 0x7f52 <vfprintf+0x290>
    7f50:	9a 94       	dec	r9
    7f52:	99 20       	and	r9, r9
    7f54:	49 f0       	breq	.+18     	; 0x7f68 <vfprintf+0x2a6>
    7f56:	e2 e0       	ldi	r30, 0x02	; 2
    7f58:	f0 e0       	ldi	r31, 0x00	; 0
    7f5a:	ec 0f       	add	r30, r28
    7f5c:	fd 1f       	adc	r31, r29
    7f5e:	e9 0d       	add	r30, r9
    7f60:	f1 1d       	adc	r31, r1
    7f62:	80 81       	ld	r24, Z
    7f64:	80 33       	cpi	r24, 0x30	; 48
    7f66:	a1 f3       	breq	.-24     	; 0x7f50 <vfprintf+0x28e>
    7f68:	f7 fe       	sbrs	r15, 7
    7f6a:	0a c0       	rjmp	.+20     	; 0x7f80 <vfprintf+0x2be>
    7f6c:	b9 2c       	mov	r11, r9
    7f6e:	b3 94       	inc	r11
    7f70:	89 2d       	mov	r24, r9
    7f72:	90 e0       	ldi	r25, 0x00	; 0
    7f74:	c8 16       	cp	r12, r24
    7f76:	d9 06       	cpc	r13, r25
    7f78:	14 f0       	brlt	.+4      	; 0x7f7e <vfprintf+0x2bc>
    7f7a:	99 24       	eor	r9, r9
    7f7c:	01 c0       	rjmp	.+2      	; 0x7f80 <vfprintf+0x2be>
    7f7e:	9c 18       	sub	r9, r12
    7f80:	f7 fc       	sbrc	r15, 7
    7f82:	03 c0       	rjmp	.+6      	; 0x7f8a <vfprintf+0x2c8>
    7f84:	25 e0       	ldi	r18, 0x05	; 5
    7f86:	30 e0       	ldi	r19, 0x00	; 0
    7f88:	09 c0       	rjmp	.+18     	; 0x7f9c <vfprintf+0x2da>
    7f8a:	1c 14       	cp	r1, r12
    7f8c:	1d 04       	cpc	r1, r13
    7f8e:	1c f0       	brlt	.+6      	; 0x7f96 <vfprintf+0x2d4>
    7f90:	21 e0       	ldi	r18, 0x01	; 1
    7f92:	30 e0       	ldi	r19, 0x00	; 0
    7f94:	03 c0       	rjmp	.+6      	; 0x7f9c <vfprintf+0x2da>
    7f96:	96 01       	movw	r18, r12
    7f98:	2f 5f       	subi	r18, 0xFF	; 255
    7f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    7f9c:	11 23       	and	r17, r17
    7f9e:	11 f0       	breq	.+4      	; 0x7fa4 <vfprintf+0x2e2>
    7fa0:	2f 5f       	subi	r18, 0xFF	; 255
    7fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    7fa4:	99 20       	and	r9, r9
    7fa6:	29 f0       	breq	.+10     	; 0x7fb2 <vfprintf+0x2f0>
    7fa8:	89 2d       	mov	r24, r9
    7faa:	90 e0       	ldi	r25, 0x00	; 0
    7fac:	01 96       	adiw	r24, 0x01	; 1
    7fae:	28 0f       	add	r18, r24
    7fb0:	39 1f       	adc	r19, r25
    7fb2:	88 2d       	mov	r24, r8
    7fb4:	90 e0       	ldi	r25, 0x00	; 0
    7fb6:	28 17       	cp	r18, r24
    7fb8:	39 07       	cpc	r19, r25
    7fba:	14 f0       	brlt	.+4      	; 0x7fc0 <vfprintf+0x2fe>
    7fbc:	88 24       	eor	r8, r8
    7fbe:	01 c0       	rjmp	.+2      	; 0x7fc2 <vfprintf+0x300>
    7fc0:	82 1a       	sub	r8, r18
    7fc2:	4f 2c       	mov	r4, r15
    7fc4:	55 24       	eor	r5, r5
    7fc6:	c2 01       	movw	r24, r4
    7fc8:	89 70       	andi	r24, 0x09	; 9
    7fca:	90 70       	andi	r25, 0x00	; 0
    7fcc:	89 2b       	or	r24, r25
    7fce:	39 f0       	breq	.+14     	; 0x7fde <vfprintf+0x31c>
    7fd0:	08 c0       	rjmp	.+16     	; 0x7fe2 <vfprintf+0x320>
    7fd2:	80 e2       	ldi	r24, 0x20	; 32
    7fd4:	90 e0       	ldi	r25, 0x00	; 0
    7fd6:	b3 01       	movw	r22, r6
    7fd8:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    7fdc:	8a 94       	dec	r8
    7fde:	88 20       	and	r8, r8
    7fe0:	c1 f7       	brne	.-16     	; 0x7fd2 <vfprintf+0x310>
    7fe2:	11 23       	and	r17, r17
    7fe4:	29 f0       	breq	.+10     	; 0x7ff0 <vfprintf+0x32e>
    7fe6:	81 2f       	mov	r24, r17
    7fe8:	90 e0       	ldi	r25, 0x00	; 0
    7fea:	b3 01       	movw	r22, r6
    7fec:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    7ff0:	43 fe       	sbrs	r4, 3
    7ff2:	07 c0       	rjmp	.+14     	; 0x8002 <vfprintf+0x340>
    7ff4:	08 c0       	rjmp	.+16     	; 0x8006 <vfprintf+0x344>
    7ff6:	80 e3       	ldi	r24, 0x30	; 48
    7ff8:	90 e0       	ldi	r25, 0x00	; 0
    7ffa:	b3 01       	movw	r22, r6
    7ffc:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    8000:	8a 94       	dec	r8
    8002:	88 20       	and	r8, r8
    8004:	c1 f7       	brne	.-16     	; 0x7ff6 <vfprintf+0x334>
    8006:	f7 fe       	sbrs	r15, 7
    8008:	46 c0       	rjmp	.+140    	; 0x8096 <vfprintf+0x3d4>
    800a:	86 01       	movw	r16, r12
    800c:	d7 fe       	sbrs	r13, 7
    800e:	02 c0       	rjmp	.+4      	; 0x8014 <vfprintf+0x352>
    8010:	00 e0       	ldi	r16, 0x00	; 0
    8012:	10 e0       	ldi	r17, 0x00	; 0
    8014:	76 01       	movw	r14, r12
    8016:	08 94       	sec
    8018:	e1 1c       	adc	r14, r1
    801a:	f1 1c       	adc	r15, r1
    801c:	e0 1a       	sub	r14, r16
    801e:	f1 0a       	sbc	r15, r17
    8020:	41 e0       	ldi	r20, 0x01	; 1
    8022:	50 e0       	ldi	r21, 0x00	; 0
    8024:	4c 0f       	add	r20, r28
    8026:	5d 1f       	adc	r21, r29
    8028:	e4 0e       	add	r14, r20
    802a:	f5 1e       	adc	r15, r21
    802c:	26 01       	movw	r4, r12
    802e:	4b 18       	sub	r4, r11
    8030:	51 08       	sbc	r5, r1
    8032:	89 2d       	mov	r24, r9
    8034:	90 e0       	ldi	r25, 0x00	; 0
    8036:	aa 24       	eor	r10, r10
    8038:	bb 24       	eor	r11, r11
    803a:	a8 1a       	sub	r10, r24
    803c:	b9 0a       	sbc	r11, r25
    803e:	5f ef       	ldi	r21, 0xFF	; 255
    8040:	0f 3f       	cpi	r16, 0xFF	; 255
    8042:	15 07       	cpc	r17, r21
    8044:	29 f4       	brne	.+10     	; 0x8050 <vfprintf+0x38e>
    8046:	8e e2       	ldi	r24, 0x2E	; 46
    8048:	90 e0       	ldi	r25, 0x00	; 0
    804a:	b3 01       	movw	r22, r6
    804c:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    8050:	c0 16       	cp	r12, r16
    8052:	d1 06       	cpc	r13, r17
    8054:	34 f0       	brlt	.+12     	; 0x8062 <vfprintf+0x3a0>
    8056:	40 16       	cp	r4, r16
    8058:	51 06       	cpc	r5, r17
    805a:	1c f4       	brge	.+6      	; 0x8062 <vfprintf+0x3a0>
    805c:	f7 01       	movw	r30, r14
    805e:	80 81       	ld	r24, Z
    8060:	01 c0       	rjmp	.+2      	; 0x8064 <vfprintf+0x3a2>
    8062:	80 e3       	ldi	r24, 0x30	; 48
    8064:	01 50       	subi	r16, 0x01	; 1
    8066:	10 40       	sbci	r17, 0x00	; 0
    8068:	08 94       	sec
    806a:	e1 1c       	adc	r14, r1
    806c:	f1 1c       	adc	r15, r1
    806e:	0a 15       	cp	r16, r10
    8070:	1b 05       	cpc	r17, r11
    8072:	2c f0       	brlt	.+10     	; 0x807e <vfprintf+0x3bc>
    8074:	90 e0       	ldi	r25, 0x00	; 0
    8076:	b3 01       	movw	r22, r6
    8078:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    807c:	e0 cf       	rjmp	.-64     	; 0x803e <vfprintf+0x37c>
    807e:	0c 15       	cp	r16, r12
    8080:	1d 05       	cpc	r17, r13
    8082:	39 f4       	brne	.+14     	; 0x8092 <vfprintf+0x3d0>
    8084:	9a 81       	ldd	r25, Y+2	; 0x02
    8086:	96 33       	cpi	r25, 0x36	; 54
    8088:	18 f4       	brcc	.+6      	; 0x8090 <vfprintf+0x3ce>
    808a:	95 33       	cpi	r25, 0x35	; 53
    808c:	11 f4       	brne	.+4      	; 0x8092 <vfprintf+0x3d0>
    808e:	24 fe       	sbrs	r2, 4
    8090:	81 e3       	ldi	r24, 0x31	; 49
    8092:	90 e0       	ldi	r25, 0x00	; 0
    8094:	4b c0       	rjmp	.+150    	; 0x812c <vfprintf+0x46a>
    8096:	8a 81       	ldd	r24, Y+2	; 0x02
    8098:	81 33       	cpi	r24, 0x31	; 49
    809a:	09 f0       	breq	.+2      	; 0x809e <vfprintf+0x3dc>
    809c:	0f 7e       	andi	r16, 0xEF	; 239
    809e:	90 e0       	ldi	r25, 0x00	; 0
    80a0:	b3 01       	movw	r22, r6
    80a2:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    80a6:	99 20       	and	r9, r9
    80a8:	a1 f0       	breq	.+40     	; 0x80d2 <vfprintf+0x410>
    80aa:	8e e2       	ldi	r24, 0x2E	; 46
    80ac:	90 e0       	ldi	r25, 0x00	; 0
    80ae:	b3 01       	movw	r22, r6
    80b0:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    80b4:	12 e0       	ldi	r17, 0x02	; 2
    80b6:	e1 e0       	ldi	r30, 0x01	; 1
    80b8:	f0 e0       	ldi	r31, 0x00	; 0
    80ba:	ec 0f       	add	r30, r28
    80bc:	fd 1f       	adc	r31, r29
    80be:	e1 0f       	add	r30, r17
    80c0:	f1 1d       	adc	r31, r1
    80c2:	1f 5f       	subi	r17, 0xFF	; 255
    80c4:	80 81       	ld	r24, Z
    80c6:	90 e0       	ldi	r25, 0x00	; 0
    80c8:	b3 01       	movw	r22, r6
    80ca:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    80ce:	9a 94       	dec	r9
    80d0:	91 f7       	brne	.-28     	; 0x80b6 <vfprintf+0x3f4>
    80d2:	44 fc       	sbrc	r4, 4
    80d4:	03 c0       	rjmp	.+6      	; 0x80dc <vfprintf+0x41a>
    80d6:	85 e6       	ldi	r24, 0x65	; 101
    80d8:	90 e0       	ldi	r25, 0x00	; 0
    80da:	02 c0       	rjmp	.+4      	; 0x80e0 <vfprintf+0x41e>
    80dc:	85 e4       	ldi	r24, 0x45	; 69
    80de:	90 e0       	ldi	r25, 0x00	; 0
    80e0:	b3 01       	movw	r22, r6
    80e2:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    80e6:	d7 fc       	sbrc	r13, 7
    80e8:	05 c0       	rjmp	.+10     	; 0x80f4 <vfprintf+0x432>
    80ea:	c1 14       	cp	r12, r1
    80ec:	d1 04       	cpc	r13, r1
    80ee:	41 f4       	brne	.+16     	; 0x8100 <vfprintf+0x43e>
    80f0:	04 ff       	sbrs	r16, 4
    80f2:	06 c0       	rjmp	.+12     	; 0x8100 <vfprintf+0x43e>
    80f4:	d0 94       	com	r13
    80f6:	c1 94       	neg	r12
    80f8:	d1 08       	sbc	r13, r1
    80fa:	d3 94       	inc	r13
    80fc:	8d e2       	ldi	r24, 0x2D	; 45
    80fe:	01 c0       	rjmp	.+2      	; 0x8102 <vfprintf+0x440>
    8100:	8b e2       	ldi	r24, 0x2B	; 43
    8102:	90 e0       	ldi	r25, 0x00	; 0
    8104:	b3 01       	movw	r22, r6
    8106:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    810a:	80 e3       	ldi	r24, 0x30	; 48
    810c:	05 c0       	rjmp	.+10     	; 0x8118 <vfprintf+0x456>
    810e:	8f 5f       	subi	r24, 0xFF	; 255
    8110:	26 ef       	ldi	r18, 0xF6	; 246
    8112:	3f ef       	ldi	r19, 0xFF	; 255
    8114:	c2 0e       	add	r12, r18
    8116:	d3 1e       	adc	r13, r19
    8118:	3a e0       	ldi	r19, 0x0A	; 10
    811a:	c3 16       	cp	r12, r19
    811c:	d1 04       	cpc	r13, r1
    811e:	bc f7       	brge	.-18     	; 0x810e <vfprintf+0x44c>
    8120:	90 e0       	ldi	r25, 0x00	; 0
    8122:	b3 01       	movw	r22, r6
    8124:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    8128:	c6 01       	movw	r24, r12
    812a:	c0 96       	adiw	r24, 0x30	; 48
    812c:	b3 01       	movw	r22, r6
    812e:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    8132:	cc 84       	ldd	r12, Y+12	; 0x0c
    8134:	dd 84       	ldd	r13, Y+13	; 0x0d
    8136:	52 c1       	rjmp	.+676    	; 0x83dc <vfprintf+0x71a>
    8138:	93 36       	cpi	r25, 0x63	; 99
    813a:	31 f0       	breq	.+12     	; 0x8148 <vfprintf+0x486>
    813c:	93 37       	cpi	r25, 0x73	; 115
    813e:	99 f0       	breq	.+38     	; 0x8166 <vfprintf+0x4a4>
    8140:	93 35       	cpi	r25, 0x53	; 83
    8142:	09 f0       	breq	.+2      	; 0x8146 <vfprintf+0x484>
    8144:	59 c0       	rjmp	.+178    	; 0x81f8 <vfprintf+0x536>
    8146:	23 c0       	rjmp	.+70     	; 0x818e <vfprintf+0x4cc>
    8148:	f6 01       	movw	r30, r12
    814a:	80 81       	ld	r24, Z
    814c:	89 83       	std	Y+1, r24	; 0x01
    814e:	5e 01       	movw	r10, r28
    8150:	08 94       	sec
    8152:	a1 1c       	adc	r10, r1
    8154:	b1 1c       	adc	r11, r1
    8156:	22 e0       	ldi	r18, 0x02	; 2
    8158:	30 e0       	ldi	r19, 0x00	; 0
    815a:	c2 0e       	add	r12, r18
    815c:	d3 1e       	adc	r13, r19
    815e:	21 e0       	ldi	r18, 0x01	; 1
    8160:	e2 2e       	mov	r14, r18
    8162:	f1 2c       	mov	r15, r1
    8164:	12 c0       	rjmp	.+36     	; 0x818a <vfprintf+0x4c8>
    8166:	f6 01       	movw	r30, r12
    8168:	a0 80       	ld	r10, Z
    816a:	b1 80       	ldd	r11, Z+1	; 0x01
    816c:	16 fd       	sbrc	r17, 6
    816e:	03 c0       	rjmp	.+6      	; 0x8176 <vfprintf+0x4b4>
    8170:	6f ef       	ldi	r22, 0xFF	; 255
    8172:	7f ef       	ldi	r23, 0xFF	; 255
    8174:	02 c0       	rjmp	.+4      	; 0x817a <vfprintf+0x4b8>
    8176:	69 2d       	mov	r22, r9
    8178:	70 e0       	ldi	r23, 0x00	; 0
    817a:	22 e0       	ldi	r18, 0x02	; 2
    817c:	30 e0       	ldi	r19, 0x00	; 0
    817e:	c2 0e       	add	r12, r18
    8180:	d3 1e       	adc	r13, r19
    8182:	c5 01       	movw	r24, r10
    8184:	0e 94 45 49 	call	0x928a	; 0x928a <strnlen>
    8188:	7c 01       	movw	r14, r24
    818a:	1f 77       	andi	r17, 0x7F	; 127
    818c:	13 c0       	rjmp	.+38     	; 0x81b4 <vfprintf+0x4f2>
    818e:	f6 01       	movw	r30, r12
    8190:	a0 80       	ld	r10, Z
    8192:	b1 80       	ldd	r11, Z+1	; 0x01
    8194:	16 fd       	sbrc	r17, 6
    8196:	03 c0       	rjmp	.+6      	; 0x819e <vfprintf+0x4dc>
    8198:	6f ef       	ldi	r22, 0xFF	; 255
    819a:	7f ef       	ldi	r23, 0xFF	; 255
    819c:	02 c0       	rjmp	.+4      	; 0x81a2 <vfprintf+0x4e0>
    819e:	69 2d       	mov	r22, r9
    81a0:	70 e0       	ldi	r23, 0x00	; 0
    81a2:	22 e0       	ldi	r18, 0x02	; 2
    81a4:	30 e0       	ldi	r19, 0x00	; 0
    81a6:	c2 0e       	add	r12, r18
    81a8:	d3 1e       	adc	r13, r19
    81aa:	c5 01       	movw	r24, r10
    81ac:	0e 94 3a 49 	call	0x9274	; 0x9274 <strnlen_P>
    81b0:	7c 01       	movw	r14, r24
    81b2:	10 68       	ori	r17, 0x80	; 128
    81b4:	13 ff       	sbrs	r17, 3
    81b6:	07 c0       	rjmp	.+14     	; 0x81c6 <vfprintf+0x504>
    81b8:	1b c0       	rjmp	.+54     	; 0x81f0 <vfprintf+0x52e>
    81ba:	80 e2       	ldi	r24, 0x20	; 32
    81bc:	90 e0       	ldi	r25, 0x00	; 0
    81be:	b3 01       	movw	r22, r6
    81c0:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    81c4:	8a 94       	dec	r8
    81c6:	88 2d       	mov	r24, r8
    81c8:	90 e0       	ldi	r25, 0x00	; 0
    81ca:	e8 16       	cp	r14, r24
    81cc:	f9 06       	cpc	r15, r25
    81ce:	a8 f3       	brcs	.-22     	; 0x81ba <vfprintf+0x4f8>
    81d0:	0f c0       	rjmp	.+30     	; 0x81f0 <vfprintf+0x52e>
    81d2:	f5 01       	movw	r30, r10
    81d4:	17 fd       	sbrc	r17, 7
    81d6:	85 91       	lpm	r24, Z+
    81d8:	17 ff       	sbrs	r17, 7
    81da:	81 91       	ld	r24, Z+
    81dc:	5f 01       	movw	r10, r30
    81de:	90 e0       	ldi	r25, 0x00	; 0
    81e0:	b3 01       	movw	r22, r6
    81e2:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    81e6:	81 10       	cpse	r8, r1
    81e8:	8a 94       	dec	r8
    81ea:	08 94       	sec
    81ec:	e1 08       	sbc	r14, r1
    81ee:	f1 08       	sbc	r15, r1
    81f0:	e1 14       	cp	r14, r1
    81f2:	f1 04       	cpc	r15, r1
    81f4:	71 f7       	brne	.-36     	; 0x81d2 <vfprintf+0x510>
    81f6:	f2 c0       	rjmp	.+484    	; 0x83dc <vfprintf+0x71a>
    81f8:	94 36       	cpi	r25, 0x64	; 100
    81fa:	11 f0       	breq	.+4      	; 0x8200 <vfprintf+0x53e>
    81fc:	99 36       	cpi	r25, 0x69	; 105
    81fe:	89 f5       	brne	.+98     	; 0x8262 <vfprintf+0x5a0>
    8200:	17 ff       	sbrs	r17, 7
    8202:	08 c0       	rjmp	.+16     	; 0x8214 <vfprintf+0x552>
    8204:	f6 01       	movw	r30, r12
    8206:	20 81       	ld	r18, Z
    8208:	31 81       	ldd	r19, Z+1	; 0x01
    820a:	42 81       	ldd	r20, Z+2	; 0x02
    820c:	53 81       	ldd	r21, Z+3	; 0x03
    820e:	84 e0       	ldi	r24, 0x04	; 4
    8210:	90 e0       	ldi	r25, 0x00	; 0
    8212:	0a c0       	rjmp	.+20     	; 0x8228 <vfprintf+0x566>
    8214:	f6 01       	movw	r30, r12
    8216:	80 81       	ld	r24, Z
    8218:	91 81       	ldd	r25, Z+1	; 0x01
    821a:	9c 01       	movw	r18, r24
    821c:	44 27       	eor	r20, r20
    821e:	37 fd       	sbrc	r19, 7
    8220:	40 95       	com	r20
    8222:	54 2f       	mov	r21, r20
    8224:	82 e0       	ldi	r24, 0x02	; 2
    8226:	90 e0       	ldi	r25, 0x00	; 0
    8228:	c8 0e       	add	r12, r24
    822a:	d9 1e       	adc	r13, r25
    822c:	9f e6       	ldi	r25, 0x6F	; 111
    822e:	f9 2e       	mov	r15, r25
    8230:	f1 22       	and	r15, r17
    8232:	57 ff       	sbrs	r21, 7
    8234:	09 c0       	rjmp	.+18     	; 0x8248 <vfprintf+0x586>
    8236:	50 95       	com	r21
    8238:	40 95       	com	r20
    823a:	30 95       	com	r19
    823c:	21 95       	neg	r18
    823e:	3f 4f       	sbci	r19, 0xFF	; 255
    8240:	4f 4f       	sbci	r20, 0xFF	; 255
    8242:	5f 4f       	sbci	r21, 0xFF	; 255
    8244:	90 e8       	ldi	r25, 0x80	; 128
    8246:	f9 2a       	or	r15, r25
    8248:	ca 01       	movw	r24, r20
    824a:	b9 01       	movw	r22, r18
    824c:	ae 01       	movw	r20, r28
    824e:	4f 5f       	subi	r20, 0xFF	; 255
    8250:	5f 4f       	sbci	r21, 0xFF	; 255
    8252:	2a e0       	ldi	r18, 0x0A	; 10
    8254:	30 e0       	ldi	r19, 0x00	; 0
    8256:	0e 94 df 49 	call	0x93be	; 0x93be <__ultoa_invert>
    825a:	e8 2e       	mov	r14, r24
    825c:	e8 89       	ldd	r30, Y+16	; 0x10
    825e:	ee 1a       	sub	r14, r30
    8260:	41 c0       	rjmp	.+130    	; 0x82e4 <vfprintf+0x622>
    8262:	95 37       	cpi	r25, 0x75	; 117
    8264:	21 f4       	brne	.+8      	; 0x826e <vfprintf+0x5ac>
    8266:	1f 7e       	andi	r17, 0xEF	; 239
    8268:	2a e0       	ldi	r18, 0x0A	; 10
    826a:	30 e0       	ldi	r19, 0x00	; 0
    826c:	1c c0       	rjmp	.+56     	; 0x82a6 <vfprintf+0x5e4>
    826e:	19 7f       	andi	r17, 0xF9	; 249
    8270:	9f 36       	cpi	r25, 0x6F	; 111
    8272:	61 f0       	breq	.+24     	; 0x828c <vfprintf+0x5ca>
    8274:	90 37       	cpi	r25, 0x70	; 112
    8276:	20 f4       	brcc	.+8      	; 0x8280 <vfprintf+0x5be>
    8278:	98 35       	cpi	r25, 0x58	; 88
    827a:	09 f0       	breq	.+2      	; 0x827e <vfprintf+0x5bc>
    827c:	b2 c0       	rjmp	.+356    	; 0x83e2 <vfprintf+0x720>
    827e:	0f c0       	rjmp	.+30     	; 0x829e <vfprintf+0x5dc>
    8280:	90 37       	cpi	r25, 0x70	; 112
    8282:	39 f0       	breq	.+14     	; 0x8292 <vfprintf+0x5d0>
    8284:	98 37       	cpi	r25, 0x78	; 120
    8286:	09 f0       	breq	.+2      	; 0x828a <vfprintf+0x5c8>
    8288:	ac c0       	rjmp	.+344    	; 0x83e2 <vfprintf+0x720>
    828a:	04 c0       	rjmp	.+8      	; 0x8294 <vfprintf+0x5d2>
    828c:	28 e0       	ldi	r18, 0x08	; 8
    828e:	30 e0       	ldi	r19, 0x00	; 0
    8290:	0a c0       	rjmp	.+20     	; 0x82a6 <vfprintf+0x5e4>
    8292:	10 61       	ori	r17, 0x10	; 16
    8294:	14 fd       	sbrc	r17, 4
    8296:	14 60       	ori	r17, 0x04	; 4
    8298:	20 e1       	ldi	r18, 0x10	; 16
    829a:	30 e0       	ldi	r19, 0x00	; 0
    829c:	04 c0       	rjmp	.+8      	; 0x82a6 <vfprintf+0x5e4>
    829e:	14 fd       	sbrc	r17, 4
    82a0:	16 60       	ori	r17, 0x06	; 6
    82a2:	20 e1       	ldi	r18, 0x10	; 16
    82a4:	32 e0       	ldi	r19, 0x02	; 2
    82a6:	17 ff       	sbrs	r17, 7
    82a8:	08 c0       	rjmp	.+16     	; 0x82ba <vfprintf+0x5f8>
    82aa:	f6 01       	movw	r30, r12
    82ac:	60 81       	ld	r22, Z
    82ae:	71 81       	ldd	r23, Z+1	; 0x01
    82b0:	82 81       	ldd	r24, Z+2	; 0x02
    82b2:	93 81       	ldd	r25, Z+3	; 0x03
    82b4:	44 e0       	ldi	r20, 0x04	; 4
    82b6:	50 e0       	ldi	r21, 0x00	; 0
    82b8:	08 c0       	rjmp	.+16     	; 0x82ca <vfprintf+0x608>
    82ba:	f6 01       	movw	r30, r12
    82bc:	80 81       	ld	r24, Z
    82be:	91 81       	ldd	r25, Z+1	; 0x01
    82c0:	bc 01       	movw	r22, r24
    82c2:	80 e0       	ldi	r24, 0x00	; 0
    82c4:	90 e0       	ldi	r25, 0x00	; 0
    82c6:	42 e0       	ldi	r20, 0x02	; 2
    82c8:	50 e0       	ldi	r21, 0x00	; 0
    82ca:	c4 0e       	add	r12, r20
    82cc:	d5 1e       	adc	r13, r21
    82ce:	ae 01       	movw	r20, r28
    82d0:	4f 5f       	subi	r20, 0xFF	; 255
    82d2:	5f 4f       	sbci	r21, 0xFF	; 255
    82d4:	0e 94 df 49 	call	0x93be	; 0x93be <__ultoa_invert>
    82d8:	e8 2e       	mov	r14, r24
    82da:	58 89       	ldd	r21, Y+16	; 0x10
    82dc:	e5 1a       	sub	r14, r21
    82de:	8f e7       	ldi	r24, 0x7F	; 127
    82e0:	f8 2e       	mov	r15, r24
    82e2:	f1 22       	and	r15, r17
    82e4:	f6 fe       	sbrs	r15, 6
    82e6:	0b c0       	rjmp	.+22     	; 0x82fe <vfprintf+0x63c>
    82e8:	8e ef       	ldi	r24, 0xFE	; 254
    82ea:	f8 22       	and	r15, r24
    82ec:	e9 14       	cp	r14, r9
    82ee:	38 f4       	brcc	.+14     	; 0x82fe <vfprintf+0x63c>
    82f0:	f4 fe       	sbrs	r15, 4
    82f2:	07 c0       	rjmp	.+14     	; 0x8302 <vfprintf+0x640>
    82f4:	f2 fc       	sbrc	r15, 2
    82f6:	05 c0       	rjmp	.+10     	; 0x8302 <vfprintf+0x640>
    82f8:	9f ee       	ldi	r25, 0xEF	; 239
    82fa:	f9 22       	and	r15, r25
    82fc:	02 c0       	rjmp	.+4      	; 0x8302 <vfprintf+0x640>
    82fe:	1e 2d       	mov	r17, r14
    8300:	01 c0       	rjmp	.+2      	; 0x8304 <vfprintf+0x642>
    8302:	19 2d       	mov	r17, r9
    8304:	f4 fe       	sbrs	r15, 4
    8306:	0d c0       	rjmp	.+26     	; 0x8322 <vfprintf+0x660>
    8308:	fe 01       	movw	r30, r28
    830a:	ee 0d       	add	r30, r14
    830c:	f1 1d       	adc	r31, r1
    830e:	80 81       	ld	r24, Z
    8310:	80 33       	cpi	r24, 0x30	; 48
    8312:	19 f4       	brne	.+6      	; 0x831a <vfprintf+0x658>
    8314:	e9 ee       	ldi	r30, 0xE9	; 233
    8316:	fe 22       	and	r15, r30
    8318:	08 c0       	rjmp	.+16     	; 0x832a <vfprintf+0x668>
    831a:	1f 5f       	subi	r17, 0xFF	; 255
    831c:	f2 fe       	sbrs	r15, 2
    831e:	05 c0       	rjmp	.+10     	; 0x832a <vfprintf+0x668>
    8320:	03 c0       	rjmp	.+6      	; 0x8328 <vfprintf+0x666>
    8322:	8f 2d       	mov	r24, r15
    8324:	86 78       	andi	r24, 0x86	; 134
    8326:	09 f0       	breq	.+2      	; 0x832a <vfprintf+0x668>
    8328:	1f 5f       	subi	r17, 0xFF	; 255
    832a:	0f 2d       	mov	r16, r15
    832c:	f3 fc       	sbrc	r15, 3
    832e:	14 c0       	rjmp	.+40     	; 0x8358 <vfprintf+0x696>
    8330:	f0 fe       	sbrs	r15, 0
    8332:	0f c0       	rjmp	.+30     	; 0x8352 <vfprintf+0x690>
    8334:	18 15       	cp	r17, r8
    8336:	10 f0       	brcs	.+4      	; 0x833c <vfprintf+0x67a>
    8338:	9e 2c       	mov	r9, r14
    833a:	0b c0       	rjmp	.+22     	; 0x8352 <vfprintf+0x690>
    833c:	9e 2c       	mov	r9, r14
    833e:	98 0c       	add	r9, r8
    8340:	91 1a       	sub	r9, r17
    8342:	18 2d       	mov	r17, r8
    8344:	06 c0       	rjmp	.+12     	; 0x8352 <vfprintf+0x690>
    8346:	80 e2       	ldi	r24, 0x20	; 32
    8348:	90 e0       	ldi	r25, 0x00	; 0
    834a:	b3 01       	movw	r22, r6
    834c:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    8350:	1f 5f       	subi	r17, 0xFF	; 255
    8352:	18 15       	cp	r17, r8
    8354:	c0 f3       	brcs	.-16     	; 0x8346 <vfprintf+0x684>
    8356:	04 c0       	rjmp	.+8      	; 0x8360 <vfprintf+0x69e>
    8358:	18 15       	cp	r17, r8
    835a:	10 f4       	brcc	.+4      	; 0x8360 <vfprintf+0x69e>
    835c:	81 1a       	sub	r8, r17
    835e:	01 c0       	rjmp	.+2      	; 0x8362 <vfprintf+0x6a0>
    8360:	88 24       	eor	r8, r8
    8362:	04 ff       	sbrs	r16, 4
    8364:	0f c0       	rjmp	.+30     	; 0x8384 <vfprintf+0x6c2>
    8366:	80 e3       	ldi	r24, 0x30	; 48
    8368:	90 e0       	ldi	r25, 0x00	; 0
    836a:	b3 01       	movw	r22, r6
    836c:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    8370:	02 ff       	sbrs	r16, 2
    8372:	1d c0       	rjmp	.+58     	; 0x83ae <vfprintf+0x6ec>
    8374:	01 fd       	sbrc	r16, 1
    8376:	03 c0       	rjmp	.+6      	; 0x837e <vfprintf+0x6bc>
    8378:	88 e7       	ldi	r24, 0x78	; 120
    837a:	90 e0       	ldi	r25, 0x00	; 0
    837c:	0e c0       	rjmp	.+28     	; 0x839a <vfprintf+0x6d8>
    837e:	88 e5       	ldi	r24, 0x58	; 88
    8380:	90 e0       	ldi	r25, 0x00	; 0
    8382:	0b c0       	rjmp	.+22     	; 0x839a <vfprintf+0x6d8>
    8384:	80 2f       	mov	r24, r16
    8386:	86 78       	andi	r24, 0x86	; 134
    8388:	91 f0       	breq	.+36     	; 0x83ae <vfprintf+0x6ec>
    838a:	01 ff       	sbrs	r16, 1
    838c:	02 c0       	rjmp	.+4      	; 0x8392 <vfprintf+0x6d0>
    838e:	8b e2       	ldi	r24, 0x2B	; 43
    8390:	01 c0       	rjmp	.+2      	; 0x8394 <vfprintf+0x6d2>
    8392:	80 e2       	ldi	r24, 0x20	; 32
    8394:	f7 fc       	sbrc	r15, 7
    8396:	8d e2       	ldi	r24, 0x2D	; 45
    8398:	90 e0       	ldi	r25, 0x00	; 0
    839a:	b3 01       	movw	r22, r6
    839c:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    83a0:	06 c0       	rjmp	.+12     	; 0x83ae <vfprintf+0x6ec>
    83a2:	80 e3       	ldi	r24, 0x30	; 48
    83a4:	90 e0       	ldi	r25, 0x00	; 0
    83a6:	b3 01       	movw	r22, r6
    83a8:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    83ac:	9a 94       	dec	r9
    83ae:	e9 14       	cp	r14, r9
    83b0:	c0 f3       	brcs	.-16     	; 0x83a2 <vfprintf+0x6e0>
    83b2:	ea 94       	dec	r14
    83b4:	e1 e0       	ldi	r30, 0x01	; 1
    83b6:	f0 e0       	ldi	r31, 0x00	; 0
    83b8:	ec 0f       	add	r30, r28
    83ba:	fd 1f       	adc	r31, r29
    83bc:	ee 0d       	add	r30, r14
    83be:	f1 1d       	adc	r31, r1
    83c0:	80 81       	ld	r24, Z
    83c2:	90 e0       	ldi	r25, 0x00	; 0
    83c4:	b3 01       	movw	r22, r6
    83c6:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    83ca:	ee 20       	and	r14, r14
    83cc:	91 f7       	brne	.-28     	; 0x83b2 <vfprintf+0x6f0>
    83ce:	06 c0       	rjmp	.+12     	; 0x83dc <vfprintf+0x71a>
    83d0:	80 e2       	ldi	r24, 0x20	; 32
    83d2:	90 e0       	ldi	r25, 0x00	; 0
    83d4:	b3 01       	movw	r22, r6
    83d6:	0e 94 90 49 	call	0x9320	; 0x9320 <fputc>
    83da:	8a 94       	dec	r8
    83dc:	88 20       	and	r8, r8
    83de:	c1 f7       	brne	.-16     	; 0x83d0 <vfprintf+0x70e>
    83e0:	99 cc       	rjmp	.-1742   	; 0x7d14 <vfprintf+0x52>
    83e2:	f3 01       	movw	r30, r6
    83e4:	66 81       	ldd	r22, Z+6	; 0x06
    83e6:	77 81       	ldd	r23, Z+7	; 0x07
    83e8:	cb 01       	movw	r24, r22
    83ea:	61 96       	adiw	r28, 0x11	; 17
    83ec:	cd bf       	out	0x3d, r28	; 61
    83ee:	de bf       	out	0x3e, r29	; 62
    83f0:	cf 91       	pop	r28
    83f2:	df 91       	pop	r29
    83f4:	1f 91       	pop	r17
    83f6:	0f 91       	pop	r16
    83f8:	ff 90       	pop	r15
    83fa:	ef 90       	pop	r14
    83fc:	df 90       	pop	r13
    83fe:	cf 90       	pop	r12
    8400:	bf 90       	pop	r11
    8402:	af 90       	pop	r10
    8404:	9f 90       	pop	r9
    8406:	8f 90       	pop	r8
    8408:	7f 90       	pop	r7
    840a:	6f 90       	pop	r6
    840c:	5f 90       	pop	r5
    840e:	4f 90       	pop	r4
    8410:	3f 90       	pop	r3
    8412:	2f 90       	pop	r2
    8414:	08 95       	ret

00008416 <__subsf3>:
    8416:	50 58       	subi	r21, 0x80	; 128

00008418 <__addsf3>:
    8418:	bb 27       	eor	r27, r27
    841a:	aa 27       	eor	r26, r26
    841c:	0e d0       	rcall	.+28     	; 0x843a <__addsf3x>
    841e:	29 c2       	rjmp	.+1106   	; 0x8872 <__fp_round>
    8420:	f2 d1       	rcall	.+996    	; 0x8806 <__fp_pscA>
    8422:	30 f0       	brcs	.+12     	; 0x8430 <__addsf3+0x18>
    8424:	f7 d1       	rcall	.+1006   	; 0x8814 <__fp_pscB>
    8426:	20 f0       	brcs	.+8      	; 0x8430 <__addsf3+0x18>
    8428:	31 f4       	brne	.+12     	; 0x8436 <__addsf3+0x1e>
    842a:	9f 3f       	cpi	r25, 0xFF	; 255
    842c:	11 f4       	brne	.+4      	; 0x8432 <__addsf3+0x1a>
    842e:	1e f4       	brtc	.+6      	; 0x8436 <__addsf3+0x1e>
    8430:	c2 c1       	rjmp	.+900    	; 0x87b6 <__fp_nan>
    8432:	0e f4       	brtc	.+2      	; 0x8436 <__addsf3+0x1e>
    8434:	e0 95       	com	r30
    8436:	e7 fb       	bst	r30, 7
    8438:	8f c1       	rjmp	.+798    	; 0x8758 <__fp_inf>

0000843a <__addsf3x>:
    843a:	e9 2f       	mov	r30, r25
    843c:	3c d2       	rcall	.+1144   	; 0x88b6 <__fp_split3>
    843e:	80 f3       	brcs	.-32     	; 0x8420 <__addsf3+0x8>
    8440:	ba 17       	cp	r27, r26
    8442:	62 07       	cpc	r22, r18
    8444:	73 07       	cpc	r23, r19
    8446:	84 07       	cpc	r24, r20
    8448:	95 07       	cpc	r25, r21
    844a:	18 f0       	brcs	.+6      	; 0x8452 <__addsf3x+0x18>
    844c:	71 f4       	brne	.+28     	; 0x846a <__addsf3x+0x30>
    844e:	9e f5       	brtc	.+102    	; 0x84b6 <__addsf3x+0x7c>
    8450:	6b c2       	rjmp	.+1238   	; 0x8928 <__fp_zero>
    8452:	0e f4       	brtc	.+2      	; 0x8456 <__addsf3x+0x1c>
    8454:	e0 95       	com	r30
    8456:	0b 2e       	mov	r0, r27
    8458:	ba 2f       	mov	r27, r26
    845a:	a0 2d       	mov	r26, r0
    845c:	0b 01       	movw	r0, r22
    845e:	b9 01       	movw	r22, r18
    8460:	90 01       	movw	r18, r0
    8462:	0c 01       	movw	r0, r24
    8464:	ca 01       	movw	r24, r20
    8466:	a0 01       	movw	r20, r0
    8468:	11 24       	eor	r1, r1
    846a:	ff 27       	eor	r31, r31
    846c:	59 1b       	sub	r21, r25
    846e:	99 f0       	breq	.+38     	; 0x8496 <__addsf3x+0x5c>
    8470:	59 3f       	cpi	r21, 0xF9	; 249
    8472:	50 f4       	brcc	.+20     	; 0x8488 <__addsf3x+0x4e>
    8474:	50 3e       	cpi	r21, 0xE0	; 224
    8476:	68 f1       	brcs	.+90     	; 0x84d2 <__addsf3x+0x98>
    8478:	1a 16       	cp	r1, r26
    847a:	f0 40       	sbci	r31, 0x00	; 0
    847c:	a2 2f       	mov	r26, r18
    847e:	23 2f       	mov	r18, r19
    8480:	34 2f       	mov	r19, r20
    8482:	44 27       	eor	r20, r20
    8484:	58 5f       	subi	r21, 0xF8	; 248
    8486:	f3 cf       	rjmp	.-26     	; 0x846e <__addsf3x+0x34>
    8488:	46 95       	lsr	r20
    848a:	37 95       	ror	r19
    848c:	27 95       	ror	r18
    848e:	a7 95       	ror	r26
    8490:	f0 40       	sbci	r31, 0x00	; 0
    8492:	53 95       	inc	r21
    8494:	c9 f7       	brne	.-14     	; 0x8488 <__addsf3x+0x4e>
    8496:	7e f4       	brtc	.+30     	; 0x84b6 <__addsf3x+0x7c>
    8498:	1f 16       	cp	r1, r31
    849a:	ba 0b       	sbc	r27, r26
    849c:	62 0b       	sbc	r22, r18
    849e:	73 0b       	sbc	r23, r19
    84a0:	84 0b       	sbc	r24, r20
    84a2:	ba f0       	brmi	.+46     	; 0x84d2 <__addsf3x+0x98>
    84a4:	91 50       	subi	r25, 0x01	; 1
    84a6:	a1 f0       	breq	.+40     	; 0x84d0 <__addsf3x+0x96>
    84a8:	ff 0f       	add	r31, r31
    84aa:	bb 1f       	adc	r27, r27
    84ac:	66 1f       	adc	r22, r22
    84ae:	77 1f       	adc	r23, r23
    84b0:	88 1f       	adc	r24, r24
    84b2:	c2 f7       	brpl	.-16     	; 0x84a4 <__addsf3x+0x6a>
    84b4:	0e c0       	rjmp	.+28     	; 0x84d2 <__addsf3x+0x98>
    84b6:	ba 0f       	add	r27, r26
    84b8:	62 1f       	adc	r22, r18
    84ba:	73 1f       	adc	r23, r19
    84bc:	84 1f       	adc	r24, r20
    84be:	48 f4       	brcc	.+18     	; 0x84d2 <__addsf3x+0x98>
    84c0:	87 95       	ror	r24
    84c2:	77 95       	ror	r23
    84c4:	67 95       	ror	r22
    84c6:	b7 95       	ror	r27
    84c8:	f7 95       	ror	r31
    84ca:	9e 3f       	cpi	r25, 0xFE	; 254
    84cc:	08 f0       	brcs	.+2      	; 0x84d0 <__addsf3x+0x96>
    84ce:	b3 cf       	rjmp	.-154    	; 0x8436 <__addsf3+0x1e>
    84d0:	93 95       	inc	r25
    84d2:	88 0f       	add	r24, r24
    84d4:	08 f0       	brcs	.+2      	; 0x84d8 <__addsf3x+0x9e>
    84d6:	99 27       	eor	r25, r25
    84d8:	ee 0f       	add	r30, r30
    84da:	97 95       	ror	r25
    84dc:	87 95       	ror	r24
    84de:	08 95       	ret

000084e0 <atan>:
    84e0:	df 93       	push	r29
    84e2:	dd 27       	eor	r29, r29
    84e4:	b9 2f       	mov	r27, r25
    84e6:	bf 77       	andi	r27, 0x7F	; 127
    84e8:	40 e8       	ldi	r20, 0x80	; 128
    84ea:	5f e3       	ldi	r21, 0x3F	; 63
    84ec:	16 16       	cp	r1, r22
    84ee:	17 06       	cpc	r1, r23
    84f0:	48 07       	cpc	r20, r24
    84f2:	5b 07       	cpc	r21, r27
    84f4:	10 f4       	brcc	.+4      	; 0x84fa <atan+0x1a>
    84f6:	d9 2f       	mov	r29, r25
    84f8:	83 d2       	rcall	.+1286   	; 0x8a00 <inverse>
    84fa:	9f 93       	push	r25
    84fc:	8f 93       	push	r24
    84fe:	7f 93       	push	r23
    8500:	6f 93       	push	r22
    8502:	96 d3       	rcall	.+1836   	; 0x8c30 <square>
    8504:	e8 ee       	ldi	r30, 0xE8	; 232
    8506:	f1 e0       	ldi	r31, 0x01	; 1
    8508:	59 d1       	rcall	.+690    	; 0x87bc <__fp_powser>
    850a:	b3 d1       	rcall	.+870    	; 0x8872 <__fp_round>
    850c:	2f 91       	pop	r18
    850e:	3f 91       	pop	r19
    8510:	4f 91       	pop	r20
    8512:	5f 91       	pop	r21
    8514:	ee d2       	rcall	.+1500   	; 0x8af2 <__mulsf3x>
    8516:	dd 23       	and	r29, r29
    8518:	49 f0       	breq	.+18     	; 0x852c <atan+0x4c>
    851a:	90 58       	subi	r25, 0x80	; 128
    851c:	a2 ea       	ldi	r26, 0xA2	; 162
    851e:	2a ed       	ldi	r18, 0xDA	; 218
    8520:	3f e0       	ldi	r19, 0x0F	; 15
    8522:	49 ec       	ldi	r20, 0xC9	; 201
    8524:	5f e3       	ldi	r21, 0x3F	; 63
    8526:	d0 78       	andi	r29, 0x80	; 128
    8528:	5d 27       	eor	r21, r29
    852a:	87 df       	rcall	.-242    	; 0x843a <__addsf3x>
    852c:	df 91       	pop	r29
    852e:	a1 c1       	rjmp	.+834    	; 0x8872 <__fp_round>

00008530 <ceil>:
    8530:	e4 d1       	rcall	.+968    	; 0x88fa <__fp_trunc>
    8532:	80 f0       	brcs	.+32     	; 0x8554 <ceil+0x24>
    8534:	9f 37       	cpi	r25, 0x7F	; 127
    8536:	40 f4       	brcc	.+16     	; 0x8548 <ceil+0x18>
    8538:	91 11       	cpse	r25, r1
    853a:	0e f4       	brtc	.+2      	; 0x853e <ceil+0xe>
    853c:	f6 c1       	rjmp	.+1004   	; 0x892a <__fp_szero>
    853e:	60 e0       	ldi	r22, 0x00	; 0
    8540:	70 e0       	ldi	r23, 0x00	; 0
    8542:	80 e8       	ldi	r24, 0x80	; 128
    8544:	9f e3       	ldi	r25, 0x3F	; 63
    8546:	08 95       	ret
    8548:	26 f0       	brts	.+8      	; 0x8552 <ceil+0x22>
    854a:	1b 16       	cp	r1, r27
    854c:	61 1d       	adc	r22, r1
    854e:	71 1d       	adc	r23, r1
    8550:	81 1d       	adc	r24, r1
    8552:	08 c1       	rjmp	.+528    	; 0x8764 <__fp_mintl>
    8554:	22 c1       	rjmp	.+580    	; 0x879a <__fp_mpack>

00008556 <__cmpsf2>:
    8556:	dc d0       	rcall	.+440    	; 0x8710 <__fp_cmp>
    8558:	08 f4       	brcc	.+2      	; 0x855c <__cmpsf2+0x6>
    855a:	81 e0       	ldi	r24, 0x01	; 1
    855c:	08 95       	ret

0000855e <cos>:
    855e:	62 d1       	rcall	.+708    	; 0x8824 <__fp_rempio2>
    8560:	e3 95       	inc	r30
    8562:	98 c1       	rjmp	.+816    	; 0x8894 <__fp_sinus>

00008564 <__divsf3>:
    8564:	0c d0       	rcall	.+24     	; 0x857e <__divsf3x>
    8566:	85 c1       	rjmp	.+778    	; 0x8872 <__fp_round>
    8568:	55 d1       	rcall	.+682    	; 0x8814 <__fp_pscB>
    856a:	40 f0       	brcs	.+16     	; 0x857c <__divsf3+0x18>
    856c:	4c d1       	rcall	.+664    	; 0x8806 <__fp_pscA>
    856e:	30 f0       	brcs	.+12     	; 0x857c <__divsf3+0x18>
    8570:	21 f4       	brne	.+8      	; 0x857a <__divsf3+0x16>
    8572:	5f 3f       	cpi	r21, 0xFF	; 255
    8574:	19 f0       	breq	.+6      	; 0x857c <__divsf3+0x18>
    8576:	f0 c0       	rjmp	.+480    	; 0x8758 <__fp_inf>
    8578:	51 11       	cpse	r21, r1
    857a:	d7 c1       	rjmp	.+942    	; 0x892a <__fp_szero>
    857c:	1c c1       	rjmp	.+568    	; 0x87b6 <__fp_nan>

0000857e <__divsf3x>:
    857e:	9b d1       	rcall	.+822    	; 0x88b6 <__fp_split3>
    8580:	98 f3       	brcs	.-26     	; 0x8568 <__divsf3+0x4>

00008582 <__divsf3_pse>:
    8582:	99 23       	and	r25, r25
    8584:	c9 f3       	breq	.-14     	; 0x8578 <__divsf3+0x14>
    8586:	55 23       	and	r21, r21
    8588:	b1 f3       	breq	.-20     	; 0x8576 <__divsf3+0x12>
    858a:	95 1b       	sub	r25, r21
    858c:	55 0b       	sbc	r21, r21
    858e:	bb 27       	eor	r27, r27
    8590:	aa 27       	eor	r26, r26
    8592:	62 17       	cp	r22, r18
    8594:	73 07       	cpc	r23, r19
    8596:	84 07       	cpc	r24, r20
    8598:	38 f0       	brcs	.+14     	; 0x85a8 <__divsf3_pse+0x26>
    859a:	9f 5f       	subi	r25, 0xFF	; 255
    859c:	5f 4f       	sbci	r21, 0xFF	; 255
    859e:	22 0f       	add	r18, r18
    85a0:	33 1f       	adc	r19, r19
    85a2:	44 1f       	adc	r20, r20
    85a4:	aa 1f       	adc	r26, r26
    85a6:	a9 f3       	breq	.-22     	; 0x8592 <__divsf3_pse+0x10>
    85a8:	33 d0       	rcall	.+102    	; 0x8610 <__divsf3_pse+0x8e>
    85aa:	0e 2e       	mov	r0, r30
    85ac:	3a f0       	brmi	.+14     	; 0x85bc <__divsf3_pse+0x3a>
    85ae:	e0 e8       	ldi	r30, 0x80	; 128
    85b0:	30 d0       	rcall	.+96     	; 0x8612 <__divsf3_pse+0x90>
    85b2:	91 50       	subi	r25, 0x01	; 1
    85b4:	50 40       	sbci	r21, 0x00	; 0
    85b6:	e6 95       	lsr	r30
    85b8:	00 1c       	adc	r0, r0
    85ba:	ca f7       	brpl	.-14     	; 0x85ae <__divsf3_pse+0x2c>
    85bc:	29 d0       	rcall	.+82     	; 0x8610 <__divsf3_pse+0x8e>
    85be:	fe 2f       	mov	r31, r30
    85c0:	27 d0       	rcall	.+78     	; 0x8610 <__divsf3_pse+0x8e>
    85c2:	66 0f       	add	r22, r22
    85c4:	77 1f       	adc	r23, r23
    85c6:	88 1f       	adc	r24, r24
    85c8:	bb 1f       	adc	r27, r27
    85ca:	26 17       	cp	r18, r22
    85cc:	37 07       	cpc	r19, r23
    85ce:	48 07       	cpc	r20, r24
    85d0:	ab 07       	cpc	r26, r27
    85d2:	b0 e8       	ldi	r27, 0x80	; 128
    85d4:	09 f0       	breq	.+2      	; 0x85d8 <__divsf3_pse+0x56>
    85d6:	bb 0b       	sbc	r27, r27
    85d8:	80 2d       	mov	r24, r0
    85da:	bf 01       	movw	r22, r30
    85dc:	ff 27       	eor	r31, r31
    85de:	93 58       	subi	r25, 0x83	; 131
    85e0:	5f 4f       	sbci	r21, 0xFF	; 255
    85e2:	2a f0       	brmi	.+10     	; 0x85ee <__divsf3_pse+0x6c>
    85e4:	9e 3f       	cpi	r25, 0xFE	; 254
    85e6:	51 05       	cpc	r21, r1
    85e8:	68 f0       	brcs	.+26     	; 0x8604 <__divsf3_pse+0x82>
    85ea:	b6 c0       	rjmp	.+364    	; 0x8758 <__fp_inf>
    85ec:	9e c1       	rjmp	.+828    	; 0x892a <__fp_szero>
    85ee:	5f 3f       	cpi	r21, 0xFF	; 255
    85f0:	ec f3       	brlt	.-6      	; 0x85ec <__divsf3_pse+0x6a>
    85f2:	98 3e       	cpi	r25, 0xE8	; 232
    85f4:	dc f3       	brlt	.-10     	; 0x85ec <__divsf3_pse+0x6a>
    85f6:	86 95       	lsr	r24
    85f8:	77 95       	ror	r23
    85fa:	67 95       	ror	r22
    85fc:	b7 95       	ror	r27
    85fe:	f7 95       	ror	r31
    8600:	9f 5f       	subi	r25, 0xFF	; 255
    8602:	c9 f7       	brne	.-14     	; 0x85f6 <__divsf3_pse+0x74>
    8604:	88 0f       	add	r24, r24
    8606:	91 1d       	adc	r25, r1
    8608:	96 95       	lsr	r25
    860a:	87 95       	ror	r24
    860c:	97 f9       	bld	r25, 7
    860e:	08 95       	ret
    8610:	e1 e0       	ldi	r30, 0x01	; 1
    8612:	66 0f       	add	r22, r22
    8614:	77 1f       	adc	r23, r23
    8616:	88 1f       	adc	r24, r24
    8618:	bb 1f       	adc	r27, r27
    861a:	62 17       	cp	r22, r18
    861c:	73 07       	cpc	r23, r19
    861e:	84 07       	cpc	r24, r20
    8620:	ba 07       	cpc	r27, r26
    8622:	20 f0       	brcs	.+8      	; 0x862c <__divsf3_pse+0xaa>
    8624:	62 1b       	sub	r22, r18
    8626:	73 0b       	sbc	r23, r19
    8628:	84 0b       	sbc	r24, r20
    862a:	ba 0b       	sbc	r27, r26
    862c:	ee 1f       	adc	r30, r30
    862e:	88 f7       	brcc	.-30     	; 0x8612 <__divsf3_pse+0x90>
    8630:	e0 95       	com	r30
    8632:	08 95       	ret

00008634 <__fixsfsi>:
    8634:	04 d0       	rcall	.+8      	; 0x863e <__fixunssfsi>
    8636:	68 94       	set
    8638:	b1 11       	cpse	r27, r1
    863a:	77 c1       	rjmp	.+750    	; 0x892a <__fp_szero>
    863c:	08 95       	ret

0000863e <__fixunssfsi>:
    863e:	43 d1       	rcall	.+646    	; 0x88c6 <__fp_splitA>
    8640:	88 f0       	brcs	.+34     	; 0x8664 <__fixunssfsi+0x26>
    8642:	9f 57       	subi	r25, 0x7F	; 127
    8644:	90 f0       	brcs	.+36     	; 0x866a <__fixunssfsi+0x2c>
    8646:	b9 2f       	mov	r27, r25
    8648:	99 27       	eor	r25, r25
    864a:	b7 51       	subi	r27, 0x17	; 23
    864c:	a0 f0       	brcs	.+40     	; 0x8676 <__fixunssfsi+0x38>
    864e:	d1 f0       	breq	.+52     	; 0x8684 <__fixunssfsi+0x46>
    8650:	66 0f       	add	r22, r22
    8652:	77 1f       	adc	r23, r23
    8654:	88 1f       	adc	r24, r24
    8656:	99 1f       	adc	r25, r25
    8658:	1a f0       	brmi	.+6      	; 0x8660 <__fixunssfsi+0x22>
    865a:	ba 95       	dec	r27
    865c:	c9 f7       	brne	.-14     	; 0x8650 <__fixunssfsi+0x12>
    865e:	12 c0       	rjmp	.+36     	; 0x8684 <__fixunssfsi+0x46>
    8660:	b1 30       	cpi	r27, 0x01	; 1
    8662:	81 f0       	breq	.+32     	; 0x8684 <__fixunssfsi+0x46>
    8664:	61 d1       	rcall	.+706    	; 0x8928 <__fp_zero>
    8666:	b1 e0       	ldi	r27, 0x01	; 1
    8668:	08 95       	ret
    866a:	5e c1       	rjmp	.+700    	; 0x8928 <__fp_zero>
    866c:	67 2f       	mov	r22, r23
    866e:	78 2f       	mov	r23, r24
    8670:	88 27       	eor	r24, r24
    8672:	b8 5f       	subi	r27, 0xF8	; 248
    8674:	39 f0       	breq	.+14     	; 0x8684 <__fixunssfsi+0x46>
    8676:	b9 3f       	cpi	r27, 0xF9	; 249
    8678:	cc f3       	brlt	.-14     	; 0x866c <__fixunssfsi+0x2e>
    867a:	86 95       	lsr	r24
    867c:	77 95       	ror	r23
    867e:	67 95       	ror	r22
    8680:	b3 95       	inc	r27
    8682:	d9 f7       	brne	.-10     	; 0x867a <__fixunssfsi+0x3c>
    8684:	3e f4       	brtc	.+14     	; 0x8694 <__fixunssfsi+0x56>
    8686:	90 95       	com	r25
    8688:	80 95       	com	r24
    868a:	70 95       	com	r23
    868c:	61 95       	neg	r22
    868e:	7f 4f       	sbci	r23, 0xFF	; 255
    8690:	8f 4f       	sbci	r24, 0xFF	; 255
    8692:	9f 4f       	sbci	r25, 0xFF	; 255
    8694:	08 95       	ret

00008696 <__floatunsisf>:
    8696:	e8 94       	clt
    8698:	09 c0       	rjmp	.+18     	; 0x86ac <__floatsisf+0x12>

0000869a <__floatsisf>:
    869a:	97 fb       	bst	r25, 7
    869c:	3e f4       	brtc	.+14     	; 0x86ac <__floatsisf+0x12>
    869e:	90 95       	com	r25
    86a0:	80 95       	com	r24
    86a2:	70 95       	com	r23
    86a4:	61 95       	neg	r22
    86a6:	7f 4f       	sbci	r23, 0xFF	; 255
    86a8:	8f 4f       	sbci	r24, 0xFF	; 255
    86aa:	9f 4f       	sbci	r25, 0xFF	; 255
    86ac:	99 23       	and	r25, r25
    86ae:	a9 f0       	breq	.+42     	; 0x86da <__floatsisf+0x40>
    86b0:	f9 2f       	mov	r31, r25
    86b2:	96 e9       	ldi	r25, 0x96	; 150
    86b4:	bb 27       	eor	r27, r27
    86b6:	93 95       	inc	r25
    86b8:	f6 95       	lsr	r31
    86ba:	87 95       	ror	r24
    86bc:	77 95       	ror	r23
    86be:	67 95       	ror	r22
    86c0:	b7 95       	ror	r27
    86c2:	f1 11       	cpse	r31, r1
    86c4:	f8 cf       	rjmp	.-16     	; 0x86b6 <__floatsisf+0x1c>
    86c6:	fa f4       	brpl	.+62     	; 0x8706 <__floatsisf+0x6c>
    86c8:	bb 0f       	add	r27, r27
    86ca:	11 f4       	brne	.+4      	; 0x86d0 <__floatsisf+0x36>
    86cc:	60 ff       	sbrs	r22, 0
    86ce:	1b c0       	rjmp	.+54     	; 0x8706 <__floatsisf+0x6c>
    86d0:	6f 5f       	subi	r22, 0xFF	; 255
    86d2:	7f 4f       	sbci	r23, 0xFF	; 255
    86d4:	8f 4f       	sbci	r24, 0xFF	; 255
    86d6:	9f 4f       	sbci	r25, 0xFF	; 255
    86d8:	16 c0       	rjmp	.+44     	; 0x8706 <__floatsisf+0x6c>
    86da:	88 23       	and	r24, r24
    86dc:	11 f0       	breq	.+4      	; 0x86e2 <__floatsisf+0x48>
    86de:	96 e9       	ldi	r25, 0x96	; 150
    86e0:	11 c0       	rjmp	.+34     	; 0x8704 <__floatsisf+0x6a>
    86e2:	77 23       	and	r23, r23
    86e4:	21 f0       	breq	.+8      	; 0x86ee <__floatsisf+0x54>
    86e6:	9e e8       	ldi	r25, 0x8E	; 142
    86e8:	87 2f       	mov	r24, r23
    86ea:	76 2f       	mov	r23, r22
    86ec:	05 c0       	rjmp	.+10     	; 0x86f8 <__floatsisf+0x5e>
    86ee:	66 23       	and	r22, r22
    86f0:	71 f0       	breq	.+28     	; 0x870e <__floatsisf+0x74>
    86f2:	96 e8       	ldi	r25, 0x86	; 134
    86f4:	86 2f       	mov	r24, r22
    86f6:	70 e0       	ldi	r23, 0x00	; 0
    86f8:	60 e0       	ldi	r22, 0x00	; 0
    86fa:	2a f0       	brmi	.+10     	; 0x8706 <__floatsisf+0x6c>
    86fc:	9a 95       	dec	r25
    86fe:	66 0f       	add	r22, r22
    8700:	77 1f       	adc	r23, r23
    8702:	88 1f       	adc	r24, r24
    8704:	da f7       	brpl	.-10     	; 0x86fc <__floatsisf+0x62>
    8706:	88 0f       	add	r24, r24
    8708:	96 95       	lsr	r25
    870a:	87 95       	ror	r24
    870c:	97 f9       	bld	r25, 7
    870e:	08 95       	ret

00008710 <__fp_cmp>:
    8710:	99 0f       	add	r25, r25
    8712:	00 08       	sbc	r0, r0
    8714:	55 0f       	add	r21, r21
    8716:	aa 0b       	sbc	r26, r26
    8718:	e0 e8       	ldi	r30, 0x80	; 128
    871a:	fe ef       	ldi	r31, 0xFE	; 254
    871c:	16 16       	cp	r1, r22
    871e:	17 06       	cpc	r1, r23
    8720:	e8 07       	cpc	r30, r24
    8722:	f9 07       	cpc	r31, r25
    8724:	c0 f0       	brcs	.+48     	; 0x8756 <__fp_cmp+0x46>
    8726:	12 16       	cp	r1, r18
    8728:	13 06       	cpc	r1, r19
    872a:	e4 07       	cpc	r30, r20
    872c:	f5 07       	cpc	r31, r21
    872e:	98 f0       	brcs	.+38     	; 0x8756 <__fp_cmp+0x46>
    8730:	62 1b       	sub	r22, r18
    8732:	73 0b       	sbc	r23, r19
    8734:	84 0b       	sbc	r24, r20
    8736:	95 0b       	sbc	r25, r21
    8738:	39 f4       	brne	.+14     	; 0x8748 <__fp_cmp+0x38>
    873a:	0a 26       	eor	r0, r26
    873c:	61 f0       	breq	.+24     	; 0x8756 <__fp_cmp+0x46>
    873e:	23 2b       	or	r18, r19
    8740:	24 2b       	or	r18, r20
    8742:	25 2b       	or	r18, r21
    8744:	21 f4       	brne	.+8      	; 0x874e <__fp_cmp+0x3e>
    8746:	08 95       	ret
    8748:	0a 26       	eor	r0, r26
    874a:	09 f4       	brne	.+2      	; 0x874e <__fp_cmp+0x3e>
    874c:	a1 40       	sbci	r26, 0x01	; 1
    874e:	a6 95       	lsr	r26
    8750:	8f ef       	ldi	r24, 0xFF	; 255
    8752:	81 1d       	adc	r24, r1
    8754:	81 1d       	adc	r24, r1
    8756:	08 95       	ret

00008758 <__fp_inf>:
    8758:	97 f9       	bld	r25, 7
    875a:	9f 67       	ori	r25, 0x7F	; 127
    875c:	80 e8       	ldi	r24, 0x80	; 128
    875e:	70 e0       	ldi	r23, 0x00	; 0
    8760:	60 e0       	ldi	r22, 0x00	; 0
    8762:	08 95       	ret

00008764 <__fp_mintl>:
    8764:	88 23       	and	r24, r24
    8766:	71 f4       	brne	.+28     	; 0x8784 <__fp_mintl+0x20>
    8768:	77 23       	and	r23, r23
    876a:	21 f0       	breq	.+8      	; 0x8774 <__fp_mintl+0x10>
    876c:	98 50       	subi	r25, 0x08	; 8
    876e:	87 2b       	or	r24, r23
    8770:	76 2f       	mov	r23, r22
    8772:	07 c0       	rjmp	.+14     	; 0x8782 <__fp_mintl+0x1e>
    8774:	66 23       	and	r22, r22
    8776:	11 f4       	brne	.+4      	; 0x877c <__fp_mintl+0x18>
    8778:	99 27       	eor	r25, r25
    877a:	0d c0       	rjmp	.+26     	; 0x8796 <__fp_mintl+0x32>
    877c:	90 51       	subi	r25, 0x10	; 16
    877e:	86 2b       	or	r24, r22
    8780:	70 e0       	ldi	r23, 0x00	; 0
    8782:	60 e0       	ldi	r22, 0x00	; 0
    8784:	2a f0       	brmi	.+10     	; 0x8790 <__fp_mintl+0x2c>
    8786:	9a 95       	dec	r25
    8788:	66 0f       	add	r22, r22
    878a:	77 1f       	adc	r23, r23
    878c:	88 1f       	adc	r24, r24
    878e:	da f7       	brpl	.-10     	; 0x8786 <__fp_mintl+0x22>
    8790:	88 0f       	add	r24, r24
    8792:	96 95       	lsr	r25
    8794:	87 95       	ror	r24
    8796:	97 f9       	bld	r25, 7
    8798:	08 95       	ret

0000879a <__fp_mpack>:
    879a:	9f 3f       	cpi	r25, 0xFF	; 255
    879c:	31 f0       	breq	.+12     	; 0x87aa <__fp_mpack_finite+0xc>

0000879e <__fp_mpack_finite>:
    879e:	91 50       	subi	r25, 0x01	; 1
    87a0:	20 f4       	brcc	.+8      	; 0x87aa <__fp_mpack_finite+0xc>
    87a2:	87 95       	ror	r24
    87a4:	77 95       	ror	r23
    87a6:	67 95       	ror	r22
    87a8:	b7 95       	ror	r27
    87aa:	88 0f       	add	r24, r24
    87ac:	91 1d       	adc	r25, r1
    87ae:	96 95       	lsr	r25
    87b0:	87 95       	ror	r24
    87b2:	97 f9       	bld	r25, 7
    87b4:	08 95       	ret

000087b6 <__fp_nan>:
    87b6:	9f ef       	ldi	r25, 0xFF	; 255
    87b8:	80 ec       	ldi	r24, 0xC0	; 192
    87ba:	08 95       	ret

000087bc <__fp_powser>:
    87bc:	df 93       	push	r29
    87be:	cf 93       	push	r28
    87c0:	1f 93       	push	r17
    87c2:	0f 93       	push	r16
    87c4:	ff 92       	push	r15
    87c6:	ef 92       	push	r14
    87c8:	df 92       	push	r13
    87ca:	7b 01       	movw	r14, r22
    87cc:	8c 01       	movw	r16, r24
    87ce:	68 94       	set
    87d0:	05 c0       	rjmp	.+10     	; 0x87dc <__fp_powser+0x20>
    87d2:	da 2e       	mov	r13, r26
    87d4:	ef 01       	movw	r28, r30
    87d6:	8d d1       	rcall	.+794    	; 0x8af2 <__mulsf3x>
    87d8:	fe 01       	movw	r30, r28
    87da:	e8 94       	clt
    87dc:	a5 91       	lpm	r26, Z+
    87de:	25 91       	lpm	r18, Z+
    87e0:	35 91       	lpm	r19, Z+
    87e2:	45 91       	lpm	r20, Z+
    87e4:	55 91       	lpm	r21, Z+
    87e6:	ae f3       	brts	.-22     	; 0x87d2 <__fp_powser+0x16>
    87e8:	ef 01       	movw	r28, r30
    87ea:	27 de       	rcall	.-946    	; 0x843a <__addsf3x>
    87ec:	fe 01       	movw	r30, r28
    87ee:	97 01       	movw	r18, r14
    87f0:	a8 01       	movw	r20, r16
    87f2:	da 94       	dec	r13
    87f4:	79 f7       	brne	.-34     	; 0x87d4 <__fp_powser+0x18>
    87f6:	df 90       	pop	r13
    87f8:	ef 90       	pop	r14
    87fa:	ff 90       	pop	r15
    87fc:	0f 91       	pop	r16
    87fe:	1f 91       	pop	r17
    8800:	cf 91       	pop	r28
    8802:	df 91       	pop	r29
    8804:	08 95       	ret

00008806 <__fp_pscA>:
    8806:	00 24       	eor	r0, r0
    8808:	0a 94       	dec	r0
    880a:	16 16       	cp	r1, r22
    880c:	17 06       	cpc	r1, r23
    880e:	18 06       	cpc	r1, r24
    8810:	09 06       	cpc	r0, r25
    8812:	08 95       	ret

00008814 <__fp_pscB>:
    8814:	00 24       	eor	r0, r0
    8816:	0a 94       	dec	r0
    8818:	12 16       	cp	r1, r18
    881a:	13 06       	cpc	r1, r19
    881c:	14 06       	cpc	r1, r20
    881e:	05 06       	cpc	r0, r21
    8820:	08 95       	ret
    8822:	c9 cf       	rjmp	.-110    	; 0x87b6 <__fp_nan>

00008824 <__fp_rempio2>:
    8824:	50 d0       	rcall	.+160    	; 0x88c6 <__fp_splitA>
    8826:	e8 f3       	brcs	.-6      	; 0x8822 <__fp_pscB+0xe>
    8828:	e8 94       	clt
    882a:	e0 e0       	ldi	r30, 0x00	; 0
    882c:	bb 27       	eor	r27, r27
    882e:	9f 57       	subi	r25, 0x7F	; 127
    8830:	f0 f0       	brcs	.+60     	; 0x886e <__fp_rempio2+0x4a>
    8832:	2a ed       	ldi	r18, 0xDA	; 218
    8834:	3f e0       	ldi	r19, 0x0F	; 15
    8836:	49 ec       	ldi	r20, 0xC9	; 201
    8838:	06 c0       	rjmp	.+12     	; 0x8846 <__fp_rempio2+0x22>
    883a:	ee 0f       	add	r30, r30
    883c:	bb 0f       	add	r27, r27
    883e:	66 1f       	adc	r22, r22
    8840:	77 1f       	adc	r23, r23
    8842:	88 1f       	adc	r24, r24
    8844:	28 f0       	brcs	.+10     	; 0x8850 <__fp_rempio2+0x2c>
    8846:	b2 3a       	cpi	r27, 0xA2	; 162
    8848:	62 07       	cpc	r22, r18
    884a:	73 07       	cpc	r23, r19
    884c:	84 07       	cpc	r24, r20
    884e:	28 f0       	brcs	.+10     	; 0x885a <__fp_rempio2+0x36>
    8850:	b2 5a       	subi	r27, 0xA2	; 162
    8852:	62 0b       	sbc	r22, r18
    8854:	73 0b       	sbc	r23, r19
    8856:	84 0b       	sbc	r24, r20
    8858:	e3 95       	inc	r30
    885a:	9a 95       	dec	r25
    885c:	72 f7       	brpl	.-36     	; 0x883a <__fp_rempio2+0x16>
    885e:	80 38       	cpi	r24, 0x80	; 128
    8860:	30 f4       	brcc	.+12     	; 0x886e <__fp_rempio2+0x4a>
    8862:	9a 95       	dec	r25
    8864:	bb 0f       	add	r27, r27
    8866:	66 1f       	adc	r22, r22
    8868:	77 1f       	adc	r23, r23
    886a:	88 1f       	adc	r24, r24
    886c:	d2 f7       	brpl	.-12     	; 0x8862 <__fp_rempio2+0x3e>
    886e:	90 48       	sbci	r25, 0x80	; 128
    8870:	96 cf       	rjmp	.-212    	; 0x879e <__fp_mpack_finite>

00008872 <__fp_round>:
    8872:	09 2e       	mov	r0, r25
    8874:	03 94       	inc	r0
    8876:	00 0c       	add	r0, r0
    8878:	11 f4       	brne	.+4      	; 0x887e <__fp_round+0xc>
    887a:	88 23       	and	r24, r24
    887c:	52 f0       	brmi	.+20     	; 0x8892 <__fp_round+0x20>
    887e:	bb 0f       	add	r27, r27
    8880:	40 f4       	brcc	.+16     	; 0x8892 <__fp_round+0x20>
    8882:	bf 2b       	or	r27, r31
    8884:	11 f4       	brne	.+4      	; 0x888a <__fp_round+0x18>
    8886:	60 ff       	sbrs	r22, 0
    8888:	04 c0       	rjmp	.+8      	; 0x8892 <__fp_round+0x20>
    888a:	6f 5f       	subi	r22, 0xFF	; 255
    888c:	7f 4f       	sbci	r23, 0xFF	; 255
    888e:	8f 4f       	sbci	r24, 0xFF	; 255
    8890:	9f 4f       	sbci	r25, 0xFF	; 255
    8892:	08 95       	ret

00008894 <__fp_sinus>:
    8894:	ef 93       	push	r30
    8896:	e0 ff       	sbrs	r30, 0
    8898:	06 c0       	rjmp	.+12     	; 0x88a6 <__fp_sinus+0x12>
    889a:	a2 ea       	ldi	r26, 0xA2	; 162
    889c:	2a ed       	ldi	r18, 0xDA	; 218
    889e:	3f e0       	ldi	r19, 0x0F	; 15
    88a0:	49 ec       	ldi	r20, 0xC9	; 201
    88a2:	5f eb       	ldi	r21, 0xBF	; 191
    88a4:	ca dd       	rcall	.-1132   	; 0x843a <__addsf3x>
    88a6:	e5 df       	rcall	.-54     	; 0x8872 <__fp_round>
    88a8:	0f 90       	pop	r0
    88aa:	03 94       	inc	r0
    88ac:	01 fc       	sbrc	r0, 1
    88ae:	90 58       	subi	r25, 0x80	; 128
    88b0:	e5 e1       	ldi	r30, 0x15	; 21
    88b2:	f2 e0       	ldi	r31, 0x02	; 2
    88b4:	d2 c1       	rjmp	.+932    	; 0x8c5a <__fp_powsodd>

000088b6 <__fp_split3>:
    88b6:	57 fd       	sbrc	r21, 7
    88b8:	90 58       	subi	r25, 0x80	; 128
    88ba:	44 0f       	add	r20, r20
    88bc:	55 1f       	adc	r21, r21
    88be:	59 f0       	breq	.+22     	; 0x88d6 <__fp_splitA+0x10>
    88c0:	5f 3f       	cpi	r21, 0xFF	; 255
    88c2:	71 f0       	breq	.+28     	; 0x88e0 <__fp_splitA+0x1a>
    88c4:	47 95       	ror	r20

000088c6 <__fp_splitA>:
    88c6:	88 0f       	add	r24, r24
    88c8:	97 fb       	bst	r25, 7
    88ca:	99 1f       	adc	r25, r25
    88cc:	61 f0       	breq	.+24     	; 0x88e6 <__fp_splitA+0x20>
    88ce:	9f 3f       	cpi	r25, 0xFF	; 255
    88d0:	79 f0       	breq	.+30     	; 0x88f0 <__fp_splitA+0x2a>
    88d2:	87 95       	ror	r24
    88d4:	08 95       	ret
    88d6:	12 16       	cp	r1, r18
    88d8:	13 06       	cpc	r1, r19
    88da:	14 06       	cpc	r1, r20
    88dc:	55 1f       	adc	r21, r21
    88de:	f2 cf       	rjmp	.-28     	; 0x88c4 <__fp_split3+0xe>
    88e0:	46 95       	lsr	r20
    88e2:	f1 df       	rcall	.-30     	; 0x88c6 <__fp_splitA>
    88e4:	08 c0       	rjmp	.+16     	; 0x88f6 <__fp_splitA+0x30>
    88e6:	16 16       	cp	r1, r22
    88e8:	17 06       	cpc	r1, r23
    88ea:	18 06       	cpc	r1, r24
    88ec:	99 1f       	adc	r25, r25
    88ee:	f1 cf       	rjmp	.-30     	; 0x88d2 <__fp_splitA+0xc>
    88f0:	86 95       	lsr	r24
    88f2:	71 05       	cpc	r23, r1
    88f4:	61 05       	cpc	r22, r1
    88f6:	08 94       	sec
    88f8:	08 95       	ret

000088fa <__fp_trunc>:
    88fa:	e5 df       	rcall	.-54     	; 0x88c6 <__fp_splitA>
    88fc:	a0 f0       	brcs	.+40     	; 0x8926 <__fp_trunc+0x2c>
    88fe:	be e7       	ldi	r27, 0x7E	; 126
    8900:	b9 17       	cp	r27, r25
    8902:	88 f4       	brcc	.+34     	; 0x8926 <__fp_trunc+0x2c>
    8904:	bb 27       	eor	r27, r27
    8906:	9f 38       	cpi	r25, 0x8F	; 143
    8908:	60 f4       	brcc	.+24     	; 0x8922 <__fp_trunc+0x28>
    890a:	16 16       	cp	r1, r22
    890c:	b1 1d       	adc	r27, r1
    890e:	67 2f       	mov	r22, r23
    8910:	78 2f       	mov	r23, r24
    8912:	88 27       	eor	r24, r24
    8914:	98 5f       	subi	r25, 0xF8	; 248
    8916:	f7 cf       	rjmp	.-18     	; 0x8906 <__fp_trunc+0xc>
    8918:	86 95       	lsr	r24
    891a:	77 95       	ror	r23
    891c:	67 95       	ror	r22
    891e:	b1 1d       	adc	r27, r1
    8920:	93 95       	inc	r25
    8922:	96 39       	cpi	r25, 0x96	; 150
    8924:	c8 f3       	brcs	.-14     	; 0x8918 <__fp_trunc+0x1e>
    8926:	08 95       	ret

00008928 <__fp_zero>:
    8928:	e8 94       	clt

0000892a <__fp_szero>:
    892a:	bb 27       	eor	r27, r27
    892c:	66 27       	eor	r22, r22
    892e:	77 27       	eor	r23, r23
    8930:	cb 01       	movw	r24, r22
    8932:	97 f9       	bld	r25, 7
    8934:	08 95       	ret

00008936 <__gesf2>:
    8936:	ec de       	rcall	.-552    	; 0x8710 <__fp_cmp>
    8938:	08 f4       	brcc	.+2      	; 0x893c <__gesf2+0x6>
    893a:	8f ef       	ldi	r24, 0xFF	; 255
    893c:	08 95       	ret
    893e:	63 df       	rcall	.-314    	; 0x8806 <__fp_pscA>
    8940:	19 f0       	breq	.+6      	; 0x8948 <__gesf2+0x12>
    8942:	68 df       	rcall	.-304    	; 0x8814 <__fp_pscB>
    8944:	09 f0       	breq	.+2      	; 0x8948 <__gesf2+0x12>
    8946:	37 cf       	rjmp	.-402    	; 0x87b6 <__fp_nan>
    8948:	07 cf       	rjmp	.-498    	; 0x8758 <__fp_inf>
    894a:	b9 01       	movw	r22, r18
    894c:	ca 01       	movw	r24, r20
    894e:	25 cf       	rjmp	.-438    	; 0x879a <__fp_mpack>

00008950 <hypot>:
    8950:	9f 77       	andi	r25, 0x7F	; 127
    8952:	5f 77       	andi	r21, 0x7F	; 127
    8954:	b0 df       	rcall	.-160    	; 0x88b6 <__fp_split3>
    8956:	98 f3       	brcs	.-26     	; 0x893e <__gesf2+0x8>
    8958:	99 23       	and	r25, r25
    895a:	b9 f3       	breq	.-18     	; 0x894a <__gesf2+0x14>
    895c:	55 23       	and	r21, r21
    895e:	b9 f3       	breq	.-18     	; 0x894e <__gesf2+0x18>
    8960:	ff 27       	eor	r31, r31
    8962:	95 17       	cp	r25, r21
    8964:	58 f4       	brcc	.+22     	; 0x897c <hypot+0x2c>
    8966:	e5 2f       	mov	r30, r21
    8968:	e9 1b       	sub	r30, r25
    896a:	ed 30       	cpi	r30, 0x0D	; 13
    896c:	70 f7       	brcc	.-36     	; 0x894a <__gesf2+0x14>
    896e:	5e 3b       	cpi	r21, 0xBE	; 190
    8970:	10 f0       	brcs	.+4      	; 0x8976 <hypot+0x26>
    8972:	f1 e4       	ldi	r31, 0x41	; 65
    8974:	1c c0       	rjmp	.+56     	; 0x89ae <hypot+0x5e>
    8976:	90 34       	cpi	r25, 0x40	; 64
    8978:	e0 f4       	brcc	.+56     	; 0x89b2 <hypot+0x62>
    897a:	0a c0       	rjmp	.+20     	; 0x8990 <hypot+0x40>
    897c:	e9 2f       	mov	r30, r25
    897e:	e5 1b       	sub	r30, r21
    8980:	ed 30       	cpi	r30, 0x0D	; 13
    8982:	28 f7       	brcc	.-54     	; 0x894e <__gesf2+0x18>
    8984:	9e 3b       	cpi	r25, 0xBE	; 190
    8986:	10 f0       	brcs	.+4      	; 0x898c <hypot+0x3c>
    8988:	f1 e4       	ldi	r31, 0x41	; 65
    898a:	11 c0       	rjmp	.+34     	; 0x89ae <hypot+0x5e>
    898c:	50 34       	cpi	r21, 0x40	; 64
    898e:	88 f4       	brcc	.+34     	; 0x89b2 <hypot+0x62>
    8990:	f9 ea       	ldi	r31, 0xA9	; 169
    8992:	88 23       	and	r24, r24
    8994:	2a f0       	brmi	.+10     	; 0x89a0 <hypot+0x50>
    8996:	9a 95       	dec	r25
    8998:	66 0f       	add	r22, r22
    899a:	77 1f       	adc	r23, r23
    899c:	88 1f       	adc	r24, r24
    899e:	da f7       	brpl	.-10     	; 0x8996 <hypot+0x46>
    89a0:	44 23       	and	r20, r20
    89a2:	2a f0       	brmi	.+10     	; 0x89ae <hypot+0x5e>
    89a4:	5a 95       	dec	r21
    89a6:	22 0f       	add	r18, r18
    89a8:	33 1f       	adc	r19, r19
    89aa:	44 1f       	adc	r20, r20
    89ac:	da f7       	brpl	.-10     	; 0x89a4 <hypot+0x54>
    89ae:	9f 1b       	sub	r25, r31
    89b0:	5f 1b       	sub	r21, r31
    89b2:	ff 93       	push	r31
    89b4:	1f 93       	push	r17
    89b6:	0f 93       	push	r16
    89b8:	ff 92       	push	r15
    89ba:	ef 92       	push	r14
    89bc:	79 01       	movw	r14, r18
    89be:	8a 01       	movw	r16, r20
    89c0:	bb 27       	eor	r27, r27
    89c2:	ab 2f       	mov	r26, r27
    89c4:	9b 01       	movw	r18, r22
    89c6:	ac 01       	movw	r20, r24
    89c8:	96 d0       	rcall	.+300    	; 0x8af6 <__mulsf3_pse>
    89ca:	97 01       	movw	r18, r14
    89cc:	a8 01       	movw	r20, r16
    89ce:	bf 93       	push	r27
    89d0:	7b 01       	movw	r14, r22
    89d2:	8c 01       	movw	r16, r24
    89d4:	aa 27       	eor	r26, r26
    89d6:	ba 2f       	mov	r27, r26
    89d8:	b9 01       	movw	r22, r18
    89da:	ca 01       	movw	r24, r20
    89dc:	8c d0       	rcall	.+280    	; 0x8af6 <__mulsf3_pse>
    89de:	af 91       	pop	r26
    89e0:	97 01       	movw	r18, r14
    89e2:	a8 01       	movw	r20, r16
    89e4:	ef 90       	pop	r14
    89e6:	ff 90       	pop	r15
    89e8:	0f 91       	pop	r16
    89ea:	1f 91       	pop	r17
    89ec:	26 dd       	rcall	.-1460   	; 0x843a <__addsf3x>
    89ee:	41 df       	rcall	.-382    	; 0x8872 <__fp_round>
    89f0:	e1 d0       	rcall	.+450    	; 0x8bb4 <sqrt>
    89f2:	4f 91       	pop	r20
    89f4:	40 ff       	sbrs	r20, 0
    89f6:	08 95       	ret
    89f8:	55 27       	eor	r21, r21
    89fa:	47 fd       	sbrc	r20, 7
    89fc:	50 95       	com	r21
    89fe:	09 c0       	rjmp	.+18     	; 0x8a12 <ldexp>

00008a00 <inverse>:
    8a00:	9b 01       	movw	r18, r22
    8a02:	ac 01       	movw	r20, r24
    8a04:	60 e0       	ldi	r22, 0x00	; 0
    8a06:	70 e0       	ldi	r23, 0x00	; 0
    8a08:	80 e8       	ldi	r24, 0x80	; 128
    8a0a:	9f e3       	ldi	r25, 0x3F	; 63
    8a0c:	ab cd       	rjmp	.-1194   	; 0x8564 <__divsf3>
    8a0e:	a4 ce       	rjmp	.-696    	; 0x8758 <__fp_inf>
    8a10:	c4 ce       	rjmp	.-632    	; 0x879a <__fp_mpack>

00008a12 <ldexp>:
    8a12:	59 df       	rcall	.-334    	; 0x88c6 <__fp_splitA>
    8a14:	e8 f3       	brcs	.-6      	; 0x8a10 <inverse+0x10>
    8a16:	99 23       	and	r25, r25
    8a18:	d9 f3       	breq	.-10     	; 0x8a10 <inverse+0x10>
    8a1a:	94 0f       	add	r25, r20
    8a1c:	51 1d       	adc	r21, r1
    8a1e:	bb f3       	brvs	.-18     	; 0x8a0e <inverse+0xe>
    8a20:	91 50       	subi	r25, 0x01	; 1
    8a22:	50 40       	sbci	r21, 0x00	; 0
    8a24:	94 f0       	brlt	.+36     	; 0x8a4a <ldexp+0x38>
    8a26:	59 f0       	breq	.+22     	; 0x8a3e <ldexp+0x2c>
    8a28:	88 23       	and	r24, r24
    8a2a:	32 f0       	brmi	.+12     	; 0x8a38 <ldexp+0x26>
    8a2c:	66 0f       	add	r22, r22
    8a2e:	77 1f       	adc	r23, r23
    8a30:	88 1f       	adc	r24, r24
    8a32:	91 50       	subi	r25, 0x01	; 1
    8a34:	50 40       	sbci	r21, 0x00	; 0
    8a36:	c1 f7       	brne	.-16     	; 0x8a28 <ldexp+0x16>
    8a38:	9e 3f       	cpi	r25, 0xFE	; 254
    8a3a:	51 05       	cpc	r21, r1
    8a3c:	44 f7       	brge	.-48     	; 0x8a0e <inverse+0xe>
    8a3e:	88 0f       	add	r24, r24
    8a40:	91 1d       	adc	r25, r1
    8a42:	96 95       	lsr	r25
    8a44:	87 95       	ror	r24
    8a46:	97 f9       	bld	r25, 7
    8a48:	08 95       	ret
    8a4a:	5f 3f       	cpi	r21, 0xFF	; 255
    8a4c:	ac f0       	brlt	.+42     	; 0x8a78 <ldexp+0x66>
    8a4e:	98 3e       	cpi	r25, 0xE8	; 232
    8a50:	9c f0       	brlt	.+38     	; 0x8a78 <ldexp+0x66>
    8a52:	bb 27       	eor	r27, r27
    8a54:	86 95       	lsr	r24
    8a56:	77 95       	ror	r23
    8a58:	67 95       	ror	r22
    8a5a:	b7 95       	ror	r27
    8a5c:	08 f4       	brcc	.+2      	; 0x8a60 <ldexp+0x4e>
    8a5e:	b1 60       	ori	r27, 0x01	; 1
    8a60:	93 95       	inc	r25
    8a62:	c1 f7       	brne	.-16     	; 0x8a54 <ldexp+0x42>
    8a64:	bb 0f       	add	r27, r27
    8a66:	58 f7       	brcc	.-42     	; 0x8a3e <ldexp+0x2c>
    8a68:	11 f4       	brne	.+4      	; 0x8a6e <ldexp+0x5c>
    8a6a:	60 ff       	sbrs	r22, 0
    8a6c:	e8 cf       	rjmp	.-48     	; 0x8a3e <ldexp+0x2c>
    8a6e:	6f 5f       	subi	r22, 0xFF	; 255
    8a70:	7f 4f       	sbci	r23, 0xFF	; 255
    8a72:	8f 4f       	sbci	r24, 0xFF	; 255
    8a74:	9f 4f       	sbci	r25, 0xFF	; 255
    8a76:	e3 cf       	rjmp	.-58     	; 0x8a3e <ldexp+0x2c>
    8a78:	58 cf       	rjmp	.-336    	; 0x892a <__fp_szero>

00008a7a <lround>:
    8a7a:	25 df       	rcall	.-438    	; 0x88c6 <__fp_splitA>
    8a7c:	58 f1       	brcs	.+86     	; 0x8ad4 <lround+0x5a>
    8a7e:	9e 57       	subi	r25, 0x7E	; 126
    8a80:	58 f1       	brcs	.+86     	; 0x8ad8 <lround+0x5e>
    8a82:	98 51       	subi	r25, 0x18	; 24
    8a84:	a0 f0       	brcs	.+40     	; 0x8aae <lround+0x34>
    8a86:	e9 f0       	breq	.+58     	; 0x8ac2 <lround+0x48>
    8a88:	98 30       	cpi	r25, 0x08	; 8
    8a8a:	20 f5       	brcc	.+72     	; 0x8ad4 <lround+0x5a>
    8a8c:	09 2e       	mov	r0, r25
    8a8e:	99 27       	eor	r25, r25
    8a90:	66 0f       	add	r22, r22
    8a92:	77 1f       	adc	r23, r23
    8a94:	88 1f       	adc	r24, r24
    8a96:	99 1f       	adc	r25, r25
    8a98:	0a 94       	dec	r0
    8a9a:	d1 f7       	brne	.-12     	; 0x8a90 <lround+0x16>
    8a9c:	12 c0       	rjmp	.+36     	; 0x8ac2 <lround+0x48>
    8a9e:	06 2e       	mov	r0, r22
    8aa0:	67 2f       	mov	r22, r23
    8aa2:	78 2f       	mov	r23, r24
    8aa4:	88 27       	eor	r24, r24
    8aa6:	98 5f       	subi	r25, 0xF8	; 248
    8aa8:	11 f4       	brne	.+4      	; 0x8aae <lround+0x34>
    8aaa:	00 0c       	add	r0, r0
    8aac:	07 c0       	rjmp	.+14     	; 0x8abc <lround+0x42>
    8aae:	99 3f       	cpi	r25, 0xF9	; 249
    8ab0:	b4 f3       	brlt	.-20     	; 0x8a9e <lround+0x24>
    8ab2:	86 95       	lsr	r24
    8ab4:	77 95       	ror	r23
    8ab6:	67 95       	ror	r22
    8ab8:	93 95       	inc	r25
    8aba:	d9 f7       	brne	.-10     	; 0x8ab2 <lround+0x38>
    8abc:	61 1d       	adc	r22, r1
    8abe:	71 1d       	adc	r23, r1
    8ac0:	81 1d       	adc	r24, r1
    8ac2:	3e f4       	brtc	.+14     	; 0x8ad2 <lround+0x58>
    8ac4:	90 95       	com	r25
    8ac6:	80 95       	com	r24
    8ac8:	70 95       	com	r23
    8aca:	61 95       	neg	r22
    8acc:	7f 4f       	sbci	r23, 0xFF	; 255
    8ace:	8f 4f       	sbci	r24, 0xFF	; 255
    8ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    8ad2:	08 95       	ret
    8ad4:	68 94       	set
    8ad6:	29 cf       	rjmp	.-430    	; 0x892a <__fp_szero>
    8ad8:	27 cf       	rjmp	.-434    	; 0x8928 <__fp_zero>

00008ada <__mulsf3>:
    8ada:	0b d0       	rcall	.+22     	; 0x8af2 <__mulsf3x>
    8adc:	ca ce       	rjmp	.-620    	; 0x8872 <__fp_round>
    8ade:	93 de       	rcall	.-730    	; 0x8806 <__fp_pscA>
    8ae0:	28 f0       	brcs	.+10     	; 0x8aec <__mulsf3+0x12>
    8ae2:	98 de       	rcall	.-720    	; 0x8814 <__fp_pscB>
    8ae4:	18 f0       	brcs	.+6      	; 0x8aec <__mulsf3+0x12>
    8ae6:	95 23       	and	r25, r21
    8ae8:	09 f0       	breq	.+2      	; 0x8aec <__mulsf3+0x12>
    8aea:	36 ce       	rjmp	.-916    	; 0x8758 <__fp_inf>
    8aec:	64 ce       	rjmp	.-824    	; 0x87b6 <__fp_nan>
    8aee:	11 24       	eor	r1, r1
    8af0:	1c cf       	rjmp	.-456    	; 0x892a <__fp_szero>

00008af2 <__mulsf3x>:
    8af2:	e1 de       	rcall	.-574    	; 0x88b6 <__fp_split3>
    8af4:	a0 f3       	brcs	.-24     	; 0x8ade <__mulsf3+0x4>

00008af6 <__mulsf3_pse>:
    8af6:	95 9f       	mul	r25, r21
    8af8:	d1 f3       	breq	.-12     	; 0x8aee <__mulsf3+0x14>
    8afa:	95 0f       	add	r25, r21
    8afc:	50 e0       	ldi	r21, 0x00	; 0
    8afe:	55 1f       	adc	r21, r21
    8b00:	62 9f       	mul	r22, r18
    8b02:	f0 01       	movw	r30, r0
    8b04:	72 9f       	mul	r23, r18
    8b06:	bb 27       	eor	r27, r27
    8b08:	f0 0d       	add	r31, r0
    8b0a:	b1 1d       	adc	r27, r1
    8b0c:	63 9f       	mul	r22, r19
    8b0e:	aa 27       	eor	r26, r26
    8b10:	f0 0d       	add	r31, r0
    8b12:	b1 1d       	adc	r27, r1
    8b14:	aa 1f       	adc	r26, r26
    8b16:	64 9f       	mul	r22, r20
    8b18:	66 27       	eor	r22, r22
    8b1a:	b0 0d       	add	r27, r0
    8b1c:	a1 1d       	adc	r26, r1
    8b1e:	66 1f       	adc	r22, r22
    8b20:	82 9f       	mul	r24, r18
    8b22:	22 27       	eor	r18, r18
    8b24:	b0 0d       	add	r27, r0
    8b26:	a1 1d       	adc	r26, r1
    8b28:	62 1f       	adc	r22, r18
    8b2a:	73 9f       	mul	r23, r19
    8b2c:	b0 0d       	add	r27, r0
    8b2e:	a1 1d       	adc	r26, r1
    8b30:	62 1f       	adc	r22, r18
    8b32:	83 9f       	mul	r24, r19
    8b34:	a0 0d       	add	r26, r0
    8b36:	61 1d       	adc	r22, r1
    8b38:	22 1f       	adc	r18, r18
    8b3a:	74 9f       	mul	r23, r20
    8b3c:	33 27       	eor	r19, r19
    8b3e:	a0 0d       	add	r26, r0
    8b40:	61 1d       	adc	r22, r1
    8b42:	23 1f       	adc	r18, r19
    8b44:	84 9f       	mul	r24, r20
    8b46:	60 0d       	add	r22, r0
    8b48:	21 1d       	adc	r18, r1
    8b4a:	82 2f       	mov	r24, r18
    8b4c:	76 2f       	mov	r23, r22
    8b4e:	6a 2f       	mov	r22, r26
    8b50:	11 24       	eor	r1, r1
    8b52:	9f 57       	subi	r25, 0x7F	; 127
    8b54:	50 40       	sbci	r21, 0x00	; 0
    8b56:	8a f0       	brmi	.+34     	; 0x8b7a <__mulsf3_pse+0x84>
    8b58:	e1 f0       	breq	.+56     	; 0x8b92 <__mulsf3_pse+0x9c>
    8b5a:	88 23       	and	r24, r24
    8b5c:	4a f0       	brmi	.+18     	; 0x8b70 <__mulsf3_pse+0x7a>
    8b5e:	ee 0f       	add	r30, r30
    8b60:	ff 1f       	adc	r31, r31
    8b62:	bb 1f       	adc	r27, r27
    8b64:	66 1f       	adc	r22, r22
    8b66:	77 1f       	adc	r23, r23
    8b68:	88 1f       	adc	r24, r24
    8b6a:	91 50       	subi	r25, 0x01	; 1
    8b6c:	50 40       	sbci	r21, 0x00	; 0
    8b6e:	a9 f7       	brne	.-22     	; 0x8b5a <__mulsf3_pse+0x64>
    8b70:	9e 3f       	cpi	r25, 0xFE	; 254
    8b72:	51 05       	cpc	r21, r1
    8b74:	70 f0       	brcs	.+28     	; 0x8b92 <__mulsf3_pse+0x9c>
    8b76:	f0 cd       	rjmp	.-1056   	; 0x8758 <__fp_inf>
    8b78:	d8 ce       	rjmp	.-592    	; 0x892a <__fp_szero>
    8b7a:	5f 3f       	cpi	r21, 0xFF	; 255
    8b7c:	ec f3       	brlt	.-6      	; 0x8b78 <__mulsf3_pse+0x82>
    8b7e:	98 3e       	cpi	r25, 0xE8	; 232
    8b80:	dc f3       	brlt	.-10     	; 0x8b78 <__mulsf3_pse+0x82>
    8b82:	86 95       	lsr	r24
    8b84:	77 95       	ror	r23
    8b86:	67 95       	ror	r22
    8b88:	b7 95       	ror	r27
    8b8a:	f7 95       	ror	r31
    8b8c:	e7 95       	ror	r30
    8b8e:	9f 5f       	subi	r25, 0xFF	; 255
    8b90:	c1 f7       	brne	.-16     	; 0x8b82 <__mulsf3_pse+0x8c>
    8b92:	fe 2b       	or	r31, r30
    8b94:	88 0f       	add	r24, r24
    8b96:	91 1d       	adc	r25, r1
    8b98:	96 95       	lsr	r25
    8b9a:	87 95       	ror	r24
    8b9c:	97 f9       	bld	r25, 7
    8b9e:	08 95       	ret

00008ba0 <sin>:
    8ba0:	9f 93       	push	r25
    8ba2:	40 de       	rcall	.-896    	; 0x8824 <__fp_rempio2>
    8ba4:	0f 90       	pop	r0
    8ba6:	07 fc       	sbrc	r0, 7
    8ba8:	ee 5f       	subi	r30, 0xFE	; 254
    8baa:	74 ce       	rjmp	.-792    	; 0x8894 <__fp_sinus>
    8bac:	11 f4       	brne	.+4      	; 0x8bb2 <sin+0x12>
    8bae:	0e f4       	brtc	.+2      	; 0x8bb2 <sin+0x12>
    8bb0:	02 ce       	rjmp	.-1020   	; 0x87b6 <__fp_nan>
    8bb2:	f3 cd       	rjmp	.-1050   	; 0x879a <__fp_mpack>

00008bb4 <sqrt>:
    8bb4:	88 de       	rcall	.-752    	; 0x88c6 <__fp_splitA>
    8bb6:	d0 f3       	brcs	.-12     	; 0x8bac <sin+0xc>
    8bb8:	99 23       	and	r25, r25
    8bba:	d9 f3       	breq	.-10     	; 0x8bb2 <sin+0x12>
    8bbc:	ce f3       	brts	.-14     	; 0x8bb0 <sin+0x10>
    8bbe:	9f 57       	subi	r25, 0x7F	; 127
    8bc0:	55 0b       	sbc	r21, r21
    8bc2:	87 ff       	sbrs	r24, 7
    8bc4:	43 d0       	rcall	.+134    	; 0x8c4c <__fp_norm2>
    8bc6:	00 24       	eor	r0, r0
    8bc8:	a0 e6       	ldi	r26, 0x60	; 96
    8bca:	40 ea       	ldi	r20, 0xA0	; 160
    8bcc:	90 01       	movw	r18, r0
    8bce:	80 58       	subi	r24, 0x80	; 128
    8bd0:	56 95       	lsr	r21
    8bd2:	97 95       	ror	r25
    8bd4:	28 f4       	brcc	.+10     	; 0x8be0 <sqrt+0x2c>
    8bd6:	80 5c       	subi	r24, 0xC0	; 192
    8bd8:	66 0f       	add	r22, r22
    8bda:	77 1f       	adc	r23, r23
    8bdc:	88 1f       	adc	r24, r24
    8bde:	20 f0       	brcs	.+8      	; 0x8be8 <sqrt+0x34>
    8be0:	26 17       	cp	r18, r22
    8be2:	37 07       	cpc	r19, r23
    8be4:	48 07       	cpc	r20, r24
    8be6:	30 f4       	brcc	.+12     	; 0x8bf4 <sqrt+0x40>
    8be8:	62 1b       	sub	r22, r18
    8bea:	73 0b       	sbc	r23, r19
    8bec:	84 0b       	sbc	r24, r20
    8bee:	20 29       	or	r18, r0
    8bf0:	31 29       	or	r19, r1
    8bf2:	4a 2b       	or	r20, r26
    8bf4:	a6 95       	lsr	r26
    8bf6:	17 94       	ror	r1
    8bf8:	07 94       	ror	r0
    8bfa:	20 25       	eor	r18, r0
    8bfc:	31 25       	eor	r19, r1
    8bfe:	4a 27       	eor	r20, r26
    8c00:	58 f7       	brcc	.-42     	; 0x8bd8 <sqrt+0x24>
    8c02:	66 0f       	add	r22, r22
    8c04:	77 1f       	adc	r23, r23
    8c06:	88 1f       	adc	r24, r24
    8c08:	20 f0       	brcs	.+8      	; 0x8c12 <sqrt+0x5e>
    8c0a:	26 17       	cp	r18, r22
    8c0c:	37 07       	cpc	r19, r23
    8c0e:	48 07       	cpc	r20, r24
    8c10:	30 f4       	brcc	.+12     	; 0x8c1e <sqrt+0x6a>
    8c12:	62 0b       	sbc	r22, r18
    8c14:	73 0b       	sbc	r23, r19
    8c16:	84 0b       	sbc	r24, r20
    8c18:	20 0d       	add	r18, r0
    8c1a:	31 1d       	adc	r19, r1
    8c1c:	41 1d       	adc	r20, r1
    8c1e:	a0 95       	com	r26
    8c20:	81 f7       	brne	.-32     	; 0x8c02 <sqrt+0x4e>
    8c22:	b9 01       	movw	r22, r18
    8c24:	84 2f       	mov	r24, r20
    8c26:	91 58       	subi	r25, 0x81	; 129
    8c28:	88 0f       	add	r24, r24
    8c2a:	96 95       	lsr	r25
    8c2c:	87 95       	ror	r24
    8c2e:	08 95       	ret

00008c30 <square>:
    8c30:	9b 01       	movw	r18, r22
    8c32:	ac 01       	movw	r20, r24
    8c34:	52 cf       	rjmp	.-348    	; 0x8ada <__mulsf3>

00008c36 <trunc>:
    8c36:	61 de       	rcall	.-830    	; 0x88fa <__fp_trunc>
    8c38:	20 f0       	brcs	.+8      	; 0x8c42 <trunc+0xc>
    8c3a:	9f 37       	cpi	r25, 0x7F	; 127
    8c3c:	08 f4       	brcc	.+2      	; 0x8c40 <trunc+0xa>
    8c3e:	75 ce       	rjmp	.-790    	; 0x892a <__fp_szero>
    8c40:	91 cd       	rjmp	.-1246   	; 0x8764 <__fp_mintl>
    8c42:	ab cd       	rjmp	.-1194   	; 0x879a <__fp_mpack>

00008c44 <__unordsf2>:
    8c44:	65 dd       	rcall	.-1334   	; 0x8710 <__fp_cmp>
    8c46:	88 0b       	sbc	r24, r24
    8c48:	99 0b       	sbc	r25, r25
    8c4a:	08 95       	ret

00008c4c <__fp_norm2>:
    8c4c:	91 50       	subi	r25, 0x01	; 1
    8c4e:	50 40       	sbci	r21, 0x00	; 0
    8c50:	66 0f       	add	r22, r22
    8c52:	77 1f       	adc	r23, r23
    8c54:	88 1f       	adc	r24, r24
    8c56:	d2 f7       	brpl	.-12     	; 0x8c4c <__fp_norm2>
    8c58:	08 95       	ret

00008c5a <__fp_powsodd>:
    8c5a:	9f 93       	push	r25
    8c5c:	8f 93       	push	r24
    8c5e:	7f 93       	push	r23
    8c60:	6f 93       	push	r22
    8c62:	ff 93       	push	r31
    8c64:	ef 93       	push	r30
    8c66:	9b 01       	movw	r18, r22
    8c68:	ac 01       	movw	r20, r24
    8c6a:	37 df       	rcall	.-402    	; 0x8ada <__mulsf3>
    8c6c:	ef 91       	pop	r30
    8c6e:	ff 91       	pop	r31
    8c70:	a5 dd       	rcall	.-1206   	; 0x87bc <__fp_powser>
    8c72:	2f 91       	pop	r18
    8c74:	3f 91       	pop	r19
    8c76:	4f 91       	pop	r20
    8c78:	5f 91       	pop	r21
    8c7a:	2f cf       	rjmp	.-418    	; 0x8ada <__mulsf3>

00008c7c <__mulsi3>:
    8c7c:	62 9f       	mul	r22, r18
    8c7e:	d0 01       	movw	r26, r0
    8c80:	73 9f       	mul	r23, r19
    8c82:	f0 01       	movw	r30, r0
    8c84:	82 9f       	mul	r24, r18
    8c86:	e0 0d       	add	r30, r0
    8c88:	f1 1d       	adc	r31, r1
    8c8a:	64 9f       	mul	r22, r20
    8c8c:	e0 0d       	add	r30, r0
    8c8e:	f1 1d       	adc	r31, r1
    8c90:	92 9f       	mul	r25, r18
    8c92:	f0 0d       	add	r31, r0
    8c94:	83 9f       	mul	r24, r19
    8c96:	f0 0d       	add	r31, r0
    8c98:	74 9f       	mul	r23, r20
    8c9a:	f0 0d       	add	r31, r0
    8c9c:	65 9f       	mul	r22, r21
    8c9e:	f0 0d       	add	r31, r0
    8ca0:	99 27       	eor	r25, r25
    8ca2:	72 9f       	mul	r23, r18
    8ca4:	b0 0d       	add	r27, r0
    8ca6:	e1 1d       	adc	r30, r1
    8ca8:	f9 1f       	adc	r31, r25
    8caa:	63 9f       	mul	r22, r19
    8cac:	b0 0d       	add	r27, r0
    8cae:	e1 1d       	adc	r30, r1
    8cb0:	f9 1f       	adc	r31, r25
    8cb2:	bd 01       	movw	r22, r26
    8cb4:	cf 01       	movw	r24, r30
    8cb6:	11 24       	eor	r1, r1
    8cb8:	08 95       	ret

00008cba <__udivmodsi4>:
    8cba:	a1 e2       	ldi	r26, 0x21	; 33
    8cbc:	1a 2e       	mov	r1, r26
    8cbe:	aa 1b       	sub	r26, r26
    8cc0:	bb 1b       	sub	r27, r27
    8cc2:	fd 01       	movw	r30, r26
    8cc4:	0d c0       	rjmp	.+26     	; 0x8ce0 <__udivmodsi4_ep>

00008cc6 <__udivmodsi4_loop>:
    8cc6:	aa 1f       	adc	r26, r26
    8cc8:	bb 1f       	adc	r27, r27
    8cca:	ee 1f       	adc	r30, r30
    8ccc:	ff 1f       	adc	r31, r31
    8cce:	a2 17       	cp	r26, r18
    8cd0:	b3 07       	cpc	r27, r19
    8cd2:	e4 07       	cpc	r30, r20
    8cd4:	f5 07       	cpc	r31, r21
    8cd6:	20 f0       	brcs	.+8      	; 0x8ce0 <__udivmodsi4_ep>
    8cd8:	a2 1b       	sub	r26, r18
    8cda:	b3 0b       	sbc	r27, r19
    8cdc:	e4 0b       	sbc	r30, r20
    8cde:	f5 0b       	sbc	r31, r21

00008ce0 <__udivmodsi4_ep>:
    8ce0:	66 1f       	adc	r22, r22
    8ce2:	77 1f       	adc	r23, r23
    8ce4:	88 1f       	adc	r24, r24
    8ce6:	99 1f       	adc	r25, r25
    8ce8:	1a 94       	dec	r1
    8cea:	69 f7       	brne	.-38     	; 0x8cc6 <__udivmodsi4_loop>
    8cec:	60 95       	com	r22
    8cee:	70 95       	com	r23
    8cf0:	80 95       	com	r24
    8cf2:	90 95       	com	r25
    8cf4:	9b 01       	movw	r18, r22
    8cf6:	ac 01       	movw	r20, r24
    8cf8:	bd 01       	movw	r22, r26
    8cfa:	cf 01       	movw	r24, r30
    8cfc:	08 95       	ret

00008cfe <__prologue_saves__>:
    8cfe:	2f 92       	push	r2
    8d00:	3f 92       	push	r3
    8d02:	4f 92       	push	r4
    8d04:	5f 92       	push	r5
    8d06:	6f 92       	push	r6
    8d08:	7f 92       	push	r7
    8d0a:	8f 92       	push	r8
    8d0c:	9f 92       	push	r9
    8d0e:	af 92       	push	r10
    8d10:	bf 92       	push	r11
    8d12:	cf 92       	push	r12
    8d14:	df 92       	push	r13
    8d16:	ef 92       	push	r14
    8d18:	ff 92       	push	r15
    8d1a:	0f 93       	push	r16
    8d1c:	1f 93       	push	r17
    8d1e:	cf 93       	push	r28
    8d20:	df 93       	push	r29
    8d22:	cd b7       	in	r28, 0x3d	; 61
    8d24:	de b7       	in	r29, 0x3e	; 62
    8d26:	ca 1b       	sub	r28, r26
    8d28:	db 0b       	sbc	r29, r27
    8d2a:	0f b6       	in	r0, 0x3f	; 63
    8d2c:	f8 94       	cli
    8d2e:	de bf       	out	0x3e, r29	; 62
    8d30:	0f be       	out	0x3f, r0	; 63
    8d32:	cd bf       	out	0x3d, r28	; 61
    8d34:	19 94       	eijmp

00008d36 <__epilogue_restores__>:
    8d36:	2a 88       	ldd	r2, Y+18	; 0x12
    8d38:	39 88       	ldd	r3, Y+17	; 0x11
    8d3a:	48 88       	ldd	r4, Y+16	; 0x10
    8d3c:	5f 84       	ldd	r5, Y+15	; 0x0f
    8d3e:	6e 84       	ldd	r6, Y+14	; 0x0e
    8d40:	7d 84       	ldd	r7, Y+13	; 0x0d
    8d42:	8c 84       	ldd	r8, Y+12	; 0x0c
    8d44:	9b 84       	ldd	r9, Y+11	; 0x0b
    8d46:	aa 84       	ldd	r10, Y+10	; 0x0a
    8d48:	b9 84       	ldd	r11, Y+9	; 0x09
    8d4a:	c8 84       	ldd	r12, Y+8	; 0x08
    8d4c:	df 80       	ldd	r13, Y+7	; 0x07
    8d4e:	ee 80       	ldd	r14, Y+6	; 0x06
    8d50:	fd 80       	ldd	r15, Y+5	; 0x05
    8d52:	0c 81       	ldd	r16, Y+4	; 0x04
    8d54:	1b 81       	ldd	r17, Y+3	; 0x03
    8d56:	aa 81       	ldd	r26, Y+2	; 0x02
    8d58:	b9 81       	ldd	r27, Y+1	; 0x01
    8d5a:	ce 0f       	add	r28, r30
    8d5c:	d1 1d       	adc	r29, r1
    8d5e:	0f b6       	in	r0, 0x3f	; 63
    8d60:	f8 94       	cli
    8d62:	de bf       	out	0x3e, r29	; 62
    8d64:	0f be       	out	0x3f, r0	; 63
    8d66:	cd bf       	out	0x3d, r28	; 61
    8d68:	ed 01       	movw	r28, r26
    8d6a:	08 95       	ret

00008d6c <strtod>:
    8d6c:	8f 92       	push	r8
    8d6e:	9f 92       	push	r9
    8d70:	af 92       	push	r10
    8d72:	bf 92       	push	r11
    8d74:	cf 92       	push	r12
    8d76:	df 92       	push	r13
    8d78:	ef 92       	push	r14
    8d7a:	ff 92       	push	r15
    8d7c:	0f 93       	push	r16
    8d7e:	1f 93       	push	r17
    8d80:	cf 93       	push	r28
    8d82:	df 93       	push	r29
    8d84:	ec 01       	movw	r28, r24
    8d86:	5b 01       	movw	r10, r22
    8d88:	61 15       	cp	r22, r1
    8d8a:	71 05       	cpc	r23, r1
    8d8c:	19 f0       	breq	.+6      	; 0x8d94 <strtod+0x28>
    8d8e:	fb 01       	movw	r30, r22
    8d90:	80 83       	st	Z, r24
    8d92:	91 83       	std	Z+1, r25	; 0x01
    8d94:	f9 90       	ld	r15, Y+
    8d96:	8f 2d       	mov	r24, r15
    8d98:	90 e0       	ldi	r25, 0x00	; 0
    8d9a:	0e 94 1a 49 	call	0x9234	; 0x9234 <isspace>
    8d9e:	89 2b       	or	r24, r25
    8da0:	c9 f7       	brne	.-14     	; 0x8d94 <strtod+0x28>
    8da2:	fd e2       	ldi	r31, 0x2D	; 45
    8da4:	ff 16       	cp	r15, r31
    8da6:	21 f4       	brne	.+8      	; 0x8db0 <strtod+0x44>
    8da8:	f9 90       	ld	r15, Y+
    8daa:	ee 24       	eor	r14, r14
    8dac:	e3 94       	inc	r14
    8dae:	05 c0       	rjmp	.+10     	; 0x8dba <strtod+0x4e>
    8db0:	2b e2       	ldi	r18, 0x2B	; 43
    8db2:	f2 16       	cp	r15, r18
    8db4:	09 f4       	brne	.+2      	; 0x8db8 <strtod+0x4c>
    8db6:	f9 90       	ld	r15, Y+
    8db8:	ee 24       	eor	r14, r14
    8dba:	8e 01       	movw	r16, r28
    8dbc:	01 50       	subi	r16, 0x01	; 1
    8dbe:	10 40       	sbci	r17, 0x00	; 0
    8dc0:	c8 01       	movw	r24, r16
    8dc2:	6e e1       	ldi	r22, 0x1E	; 30
    8dc4:	7d e1       	ldi	r23, 0x1D	; 29
    8dc6:	43 e0       	ldi	r20, 0x03	; 3
    8dc8:	50 e0       	ldi	r21, 0x00	; 0
    8dca:	0e 94 22 49 	call	0x9244	; 0x9244 <strncasecmp_P>
    8dce:	89 2b       	or	r24, r25
    8dd0:	01 f5       	brne	.+64     	; 0x8e12 <strtod+0xa6>
    8dd2:	8e 01       	movw	r16, r28
    8dd4:	0e 5f       	subi	r16, 0xFE	; 254
    8dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    8dd8:	c8 01       	movw	r24, r16
    8dda:	61 e2       	ldi	r22, 0x21	; 33
    8ddc:	7d e1       	ldi	r23, 0x1D	; 29
    8dde:	45 e0       	ldi	r20, 0x05	; 5
    8de0:	50 e0       	ldi	r21, 0x00	; 0
    8de2:	0e 94 22 49 	call	0x9244	; 0x9244 <strncasecmp_P>
    8de6:	89 2b       	or	r24, r25
    8de8:	19 f4       	brne	.+6      	; 0x8df0 <strtod+0x84>
    8dea:	8e 01       	movw	r16, r28
    8dec:	09 5f       	subi	r16, 0xF9	; 249
    8dee:	1f 4f       	sbci	r17, 0xFF	; 255
    8df0:	a1 14       	cp	r10, r1
    8df2:	b1 04       	cpc	r11, r1
    8df4:	19 f0       	breq	.+6      	; 0x8dfc <strtod+0x90>
    8df6:	f5 01       	movw	r30, r10
    8df8:	00 83       	st	Z, r16
    8dfa:	11 83       	std	Z+1, r17	; 0x01
    8dfc:	e0 fc       	sbrc	r14, 0
    8dfe:	04 c0       	rjmp	.+8      	; 0x8e08 <strtod+0x9c>
    8e00:	70 e0       	ldi	r23, 0x00	; 0
    8e02:	90 e0       	ldi	r25, 0x00	; 0
    8e04:	80 e8       	ldi	r24, 0x80	; 128
    8e06:	14 c0       	rjmp	.+40     	; 0x8e30 <strtod+0xc4>
    8e08:	70 e0       	ldi	r23, 0x00	; 0
    8e0a:	90 e0       	ldi	r25, 0x00	; 0
    8e0c:	80 e8       	ldi	r24, 0x80	; 128
    8e0e:	6f ef       	ldi	r22, 0xFF	; 255
    8e10:	08 c1       	rjmp	.+528    	; 0x9022 <strtod+0x2b6>
    8e12:	c8 01       	movw	r24, r16
    8e14:	66 e2       	ldi	r22, 0x26	; 38
    8e16:	7d e1       	ldi	r23, 0x1D	; 29
    8e18:	43 e0       	ldi	r20, 0x03	; 3
    8e1a:	50 e0       	ldi	r21, 0x00	; 0
    8e1c:	0e 94 22 49 	call	0x9244	; 0x9244 <strncasecmp_P>
    8e20:	89 2b       	or	r24, r25
    8e22:	69 f4       	brne	.+26     	; 0x8e3e <strtod+0xd2>
    8e24:	a1 14       	cp	r10, r1
    8e26:	b1 04       	cpc	r11, r1
    8e28:	29 f4       	brne	.+10     	; 0x8e34 <strtod+0xc8>
    8e2a:	70 e0       	ldi	r23, 0x00	; 0
    8e2c:	90 e0       	ldi	r25, 0x00	; 0
    8e2e:	80 ec       	ldi	r24, 0xC0	; 192
    8e30:	6f e7       	ldi	r22, 0x7F	; 127
    8e32:	f7 c0       	rjmp	.+494    	; 0x9022 <strtod+0x2b6>
    8e34:	22 96       	adiw	r28, 0x02	; 2
    8e36:	f5 01       	movw	r30, r10
    8e38:	c0 83       	st	Z, r28
    8e3a:	d1 83       	std	Z+1, r29	; 0x01
    8e3c:	f6 cf       	rjmp	.-20     	; 0x8e2a <strtod+0xbe>
    8e3e:	88 24       	eor	r8, r8
    8e40:	99 24       	eor	r9, r9
    8e42:	40 e0       	ldi	r20, 0x00	; 0
    8e44:	50 e0       	ldi	r21, 0x00	; 0
    8e46:	60 e0       	ldi	r22, 0x00	; 0
    8e48:	70 e0       	ldi	r23, 0x00	; 0
    8e4a:	ef 2d       	mov	r30, r15
    8e4c:	e0 53       	subi	r30, 0x30	; 48
    8e4e:	ea 30       	cpi	r30, 0x0A	; 10
    8e50:	a0 f5       	brcc	.+104    	; 0x8eba <strtod+0x14e>
    8e52:	f2 e0       	ldi	r31, 0x02	; 2
    8e54:	ef 2a       	or	r14, r31
    8e56:	8e 2d       	mov	r24, r14
    8e58:	90 e0       	ldi	r25, 0x00	; 0
    8e5a:	9c 01       	movw	r18, r24
    8e5c:	28 70       	andi	r18, 0x08	; 8
    8e5e:	30 70       	andi	r19, 0x00	; 0
    8e60:	e2 fe       	sbrs	r14, 2
    8e62:	06 c0       	rjmp	.+12     	; 0x8e70 <strtod+0x104>
    8e64:	23 2b       	or	r18, r19
    8e66:	79 f5       	brne	.+94     	; 0x8ec6 <strtod+0x15a>
    8e68:	08 94       	sec
    8e6a:	81 1c       	adc	r8, r1
    8e6c:	91 1c       	adc	r9, r1
    8e6e:	2b c0       	rjmp	.+86     	; 0x8ec6 <strtod+0x15a>
    8e70:	23 2b       	or	r18, r19
    8e72:	19 f0       	breq	.+6      	; 0x8e7a <strtod+0x10e>
    8e74:	08 94       	sec
    8e76:	81 08       	sbc	r8, r1
    8e78:	91 08       	sbc	r9, r1
    8e7a:	db 01       	movw	r26, r22
    8e7c:	ca 01       	movw	r24, r20
    8e7e:	12 e0       	ldi	r17, 0x02	; 2
    8e80:	88 0f       	add	r24, r24
    8e82:	99 1f       	adc	r25, r25
    8e84:	aa 1f       	adc	r26, r26
    8e86:	bb 1f       	adc	r27, r27
    8e88:	1a 95       	dec	r17
    8e8a:	d1 f7       	brne	.-12     	; 0x8e80 <strtod+0x114>
    8e8c:	48 0f       	add	r20, r24
    8e8e:	59 1f       	adc	r21, r25
    8e90:	6a 1f       	adc	r22, r26
    8e92:	7b 1f       	adc	r23, r27
    8e94:	44 0f       	add	r20, r20
    8e96:	55 1f       	adc	r21, r21
    8e98:	66 1f       	adc	r22, r22
    8e9a:	77 1f       	adc	r23, r23
    8e9c:	4e 0f       	add	r20, r30
    8e9e:	51 1d       	adc	r21, r1
    8ea0:	61 1d       	adc	r22, r1
    8ea2:	71 1d       	adc	r23, r1
    8ea4:	48 39       	cpi	r20, 0x98	; 152
    8ea6:	29 e9       	ldi	r18, 0x99	; 153
    8ea8:	52 07       	cpc	r21, r18
    8eaa:	29 e9       	ldi	r18, 0x99	; 153
    8eac:	62 07       	cpc	r22, r18
    8eae:	29 e1       	ldi	r18, 0x19	; 25
    8eb0:	72 07       	cpc	r23, r18
    8eb2:	48 f0       	brcs	.+18     	; 0x8ec6 <strtod+0x15a>
    8eb4:	84 e0       	ldi	r24, 0x04	; 4
    8eb6:	e8 2a       	or	r14, r24
    8eb8:	06 c0       	rjmp	.+12     	; 0x8ec6 <strtod+0x15a>
    8eba:	ee 3f       	cpi	r30, 0xFE	; 254
    8ebc:	31 f4       	brne	.+12     	; 0x8eca <strtod+0x15e>
    8ebe:	e3 fc       	sbrc	r14, 3
    8ec0:	39 c0       	rjmp	.+114    	; 0x8f34 <strtod+0x1c8>
    8ec2:	98 e0       	ldi	r25, 0x08	; 8
    8ec4:	e9 2a       	or	r14, r25
    8ec6:	f9 90       	ld	r15, Y+
    8ec8:	c0 cf       	rjmp	.-128    	; 0x8e4a <strtod+0xde>
    8eca:	e5 33       	cpi	r30, 0x35	; 53
    8ecc:	11 f0       	breq	.+4      	; 0x8ed2 <strtod+0x166>
    8ece:	e5 31       	cpi	r30, 0x15	; 21
    8ed0:	89 f5       	brne	.+98     	; 0x8f34 <strtod+0x1c8>
    8ed2:	29 91       	ld	r18, Y+
    8ed4:	2d 32       	cpi	r18, 0x2D	; 45
    8ed6:	19 f4       	brne	.+6      	; 0x8ede <strtod+0x172>
    8ed8:	e0 e1       	ldi	r30, 0x10	; 16
    8eda:	ee 2a       	or	r14, r30
    8edc:	05 c0       	rjmp	.+10     	; 0x8ee8 <strtod+0x17c>
    8ede:	2b 32       	cpi	r18, 0x2B	; 43
    8ee0:	19 f0       	breq	.+6      	; 0x8ee8 <strtod+0x17c>
    8ee2:	81 e0       	ldi	r24, 0x01	; 1
    8ee4:	90 e0       	ldi	r25, 0x00	; 0
    8ee6:	03 c0       	rjmp	.+6      	; 0x8eee <strtod+0x182>
    8ee8:	29 91       	ld	r18, Y+
    8eea:	82 e0       	ldi	r24, 0x02	; 2
    8eec:	90 e0       	ldi	r25, 0x00	; 0
    8eee:	e2 2f       	mov	r30, r18
    8ef0:	e0 53       	subi	r30, 0x30	; 48
    8ef2:	ea 30       	cpi	r30, 0x0A	; 10
    8ef4:	18 f0       	brcs	.+6      	; 0x8efc <strtod+0x190>
    8ef6:	c8 1b       	sub	r28, r24
    8ef8:	d9 0b       	sbc	r29, r25
    8efa:	1c c0       	rjmp	.+56     	; 0x8f34 <strtod+0x1c8>
    8efc:	20 e0       	ldi	r18, 0x00	; 0
    8efe:	30 e0       	ldi	r19, 0x00	; 0
    8f00:	fc e0       	ldi	r31, 0x0C	; 12
    8f02:	20 38       	cpi	r18, 0x80	; 128
    8f04:	3f 07       	cpc	r19, r31
    8f06:	5c f4       	brge	.+22     	; 0x8f1e <strtod+0x1b2>
    8f08:	c9 01       	movw	r24, r18
    8f0a:	88 0f       	add	r24, r24
    8f0c:	99 1f       	adc	r25, r25
    8f0e:	88 0f       	add	r24, r24
    8f10:	99 1f       	adc	r25, r25
    8f12:	28 0f       	add	r18, r24
    8f14:	39 1f       	adc	r19, r25
    8f16:	22 0f       	add	r18, r18
    8f18:	33 1f       	adc	r19, r19
    8f1a:	2e 0f       	add	r18, r30
    8f1c:	31 1d       	adc	r19, r1
    8f1e:	e9 91       	ld	r30, Y+
    8f20:	e0 53       	subi	r30, 0x30	; 48
    8f22:	ea 30       	cpi	r30, 0x0A	; 10
    8f24:	68 f3       	brcs	.-38     	; 0x8f00 <strtod+0x194>
    8f26:	e4 fe       	sbrs	r14, 4
    8f28:	03 c0       	rjmp	.+6      	; 0x8f30 <strtod+0x1c4>
    8f2a:	30 95       	com	r19
    8f2c:	21 95       	neg	r18
    8f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    8f30:	82 0e       	add	r8, r18
    8f32:	93 1e       	adc	r9, r19
    8f34:	ce 2c       	mov	r12, r14
    8f36:	dd 24       	eor	r13, r13
    8f38:	e1 fe       	sbrs	r14, 1
    8f3a:	07 c0       	rjmp	.+14     	; 0x8f4a <strtod+0x1de>
    8f3c:	a1 14       	cp	r10, r1
    8f3e:	b1 04       	cpc	r11, r1
    8f40:	21 f0       	breq	.+8      	; 0x8f4a <strtod+0x1de>
    8f42:	21 97       	sbiw	r28, 0x01	; 1
    8f44:	f5 01       	movw	r30, r10
    8f46:	c0 83       	st	Z, r28
    8f48:	d1 83       	std	Z+1, r29	; 0x01
    8f4a:	cb 01       	movw	r24, r22
    8f4c:	ba 01       	movw	r22, r20
    8f4e:	0e 94 4b 43 	call	0x8696	; 0x8696 <__floatunsisf>
    8f52:	7b 01       	movw	r14, r22
    8f54:	8c 01       	movw	r16, r24
    8f56:	f3 e0       	ldi	r31, 0x03	; 3
    8f58:	cf 22       	and	r12, r31
    8f5a:	dd 24       	eor	r13, r13
    8f5c:	23 e0       	ldi	r18, 0x03	; 3
    8f5e:	c2 16       	cp	r12, r18
    8f60:	d1 04       	cpc	r13, r1
    8f62:	21 f4       	brne	.+8      	; 0x8f6c <strtod+0x200>
    8f64:	17 fb       	bst	r17, 7
    8f66:	10 95       	com	r17
    8f68:	17 f9       	bld	r17, 7
    8f6a:	10 95       	com	r17
    8f6c:	57 01       	movw	r10, r14
    8f6e:	68 01       	movw	r12, r16
    8f70:	c8 01       	movw	r24, r16
    8f72:	b7 01       	movw	r22, r14
    8f74:	20 e0       	ldi	r18, 0x00	; 0
    8f76:	30 e0       	ldi	r19, 0x00	; 0
    8f78:	40 e0       	ldi	r20, 0x00	; 0
    8f7a:	50 e0       	ldi	r21, 0x00	; 0
    8f7c:	0e 94 ab 42 	call	0x8556	; 0x8556 <__cmpsf2>
    8f80:	88 23       	and	r24, r24
    8f82:	09 f4       	brne	.+2      	; 0x8f86 <strtod+0x21a>
    8f84:	4a c0       	rjmp	.+148    	; 0x901a <strtod+0x2ae>
    8f86:	97 fe       	sbrs	r9, 7
    8f88:	0d c0       	rjmp	.+26     	; 0x8fa4 <strtod+0x238>
    8f8a:	2d e3       	ldi	r18, 0x3D	; 61
    8f8c:	e2 2e       	mov	r14, r18
    8f8e:	2d e1       	ldi	r18, 0x1D	; 29
    8f90:	f2 2e       	mov	r15, r18
    8f92:	90 94       	com	r9
    8f94:	81 94       	neg	r8
    8f96:	91 08       	sbc	r9, r1
    8f98:	93 94       	inc	r9
    8f9a:	c0 e2       	ldi	r28, 0x20	; 32
    8f9c:	d0 e0       	ldi	r29, 0x00	; 0
    8f9e:	00 e0       	ldi	r16, 0x00	; 0
    8fa0:	10 e0       	ldi	r17, 0x00	; 0
    8fa2:	12 c0       	rjmp	.+36     	; 0x8fc8 <strtod+0x25c>
    8fa4:	95 e5       	ldi	r25, 0x55	; 85
    8fa6:	e9 2e       	mov	r14, r25
    8fa8:	9d e1       	ldi	r25, 0x1D	; 29
    8faa:	f9 2e       	mov	r15, r25
    8fac:	f6 cf       	rjmp	.-20     	; 0x8f9a <strtod+0x22e>
    8fae:	f7 01       	movw	r30, r14
    8fb0:	25 91       	lpm	r18, Z+
    8fb2:	35 91       	lpm	r19, Z+
    8fb4:	45 91       	lpm	r20, Z+
    8fb6:	54 91       	lpm	r21, Z+
    8fb8:	c6 01       	movw	r24, r12
    8fba:	b5 01       	movw	r22, r10
    8fbc:	0e 94 6d 45 	call	0x8ada	; 0x8ada <__mulsf3>
    8fc0:	5b 01       	movw	r10, r22
    8fc2:	6c 01       	movw	r12, r24
    8fc4:	8c 1a       	sub	r8, r28
    8fc6:	9d 0a       	sbc	r9, r29
    8fc8:	8c 16       	cp	r8, r28
    8fca:	9d 06       	cpc	r9, r29
    8fcc:	84 f7       	brge	.-32     	; 0x8fae <strtod+0x242>
    8fce:	d5 95       	asr	r29
    8fd0:	c7 95       	ror	r28
    8fd2:	0f 5f       	subi	r16, 0xFF	; 255
    8fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    8fd6:	06 30       	cpi	r16, 0x06	; 6
    8fd8:	11 05       	cpc	r17, r1
    8fda:	29 f0       	breq	.+10     	; 0x8fe6 <strtod+0x27a>
    8fdc:	8c ef       	ldi	r24, 0xFC	; 252
    8fde:	9f ef       	ldi	r25, 0xFF	; 255
    8fe0:	e8 0e       	add	r14, r24
    8fe2:	f9 1e       	adc	r15, r25
    8fe4:	f1 cf       	rjmp	.-30     	; 0x8fc8 <strtod+0x25c>
    8fe6:	c5 01       	movw	r24, r10
    8fe8:	d6 01       	movw	r26, r12
    8fea:	7c 01       	movw	r14, r24
    8fec:	8d 01       	movw	r16, r26
    8fee:	8c 2d       	mov	r24, r12
    8ff0:	88 0f       	add	r24, r24
    8ff2:	8d 2d       	mov	r24, r13
    8ff4:	88 1f       	adc	r24, r24
    8ff6:	8f 3f       	cpi	r24, 0xFF	; 255
    8ff8:	51 f0       	breq	.+20     	; 0x900e <strtod+0x2a2>
    8ffa:	c6 01       	movw	r24, r12
    8ffc:	b5 01       	movw	r22, r10
    8ffe:	20 e0       	ldi	r18, 0x00	; 0
    9000:	30 e0       	ldi	r19, 0x00	; 0
    9002:	40 e0       	ldi	r20, 0x00	; 0
    9004:	50 e0       	ldi	r21, 0x00	; 0
    9006:	0e 94 ab 42 	call	0x8556	; 0x8556 <__cmpsf2>
    900a:	88 23       	and	r24, r24
    900c:	31 f4       	brne	.+12     	; 0x901a <strtod+0x2ae>
    900e:	82 e2       	ldi	r24, 0x22	; 34
    9010:	90 e0       	ldi	r25, 0x00	; 0
    9012:	80 93 59 25 	sts	0x2559, r24
    9016:	90 93 5a 25 	sts	0x255A, r25
    901a:	7e 2d       	mov	r23, r14
    901c:	9f 2d       	mov	r25, r15
    901e:	80 2f       	mov	r24, r16
    9020:	61 2f       	mov	r22, r17
    9022:	27 2f       	mov	r18, r23
    9024:	39 2f       	mov	r19, r25
    9026:	48 2f       	mov	r20, r24
    9028:	56 2f       	mov	r21, r22
    902a:	b9 01       	movw	r22, r18
    902c:	ca 01       	movw	r24, r20
    902e:	df 91       	pop	r29
    9030:	cf 91       	pop	r28
    9032:	1f 91       	pop	r17
    9034:	0f 91       	pop	r16
    9036:	ff 90       	pop	r15
    9038:	ef 90       	pop	r14
    903a:	df 90       	pop	r13
    903c:	cf 90       	pop	r12
    903e:	bf 90       	pop	r11
    9040:	af 90       	pop	r10
    9042:	9f 90       	pop	r9
    9044:	8f 90       	pop	r8
    9046:	08 95       	ret

00009048 <atoi>:
    9048:	fc 01       	movw	r30, r24
    904a:	88 27       	eor	r24, r24
    904c:	99 27       	eor	r25, r25
    904e:	e8 94       	clt
    9050:	21 91       	ld	r18, Z+
    9052:	20 32       	cpi	r18, 0x20	; 32
    9054:	e9 f3       	breq	.-6      	; 0x9050 <atoi+0x8>
    9056:	29 30       	cpi	r18, 0x09	; 9
    9058:	10 f0       	brcs	.+4      	; 0x905e <atoi+0x16>
    905a:	2e 30       	cpi	r18, 0x0E	; 14
    905c:	c8 f3       	brcs	.-14     	; 0x9050 <atoi+0x8>
    905e:	2b 32       	cpi	r18, 0x2B	; 43
    9060:	41 f0       	breq	.+16     	; 0x9072 <atoi+0x2a>
    9062:	2d 32       	cpi	r18, 0x2D	; 45
    9064:	39 f4       	brne	.+14     	; 0x9074 <atoi+0x2c>
    9066:	68 94       	set
    9068:	04 c0       	rjmp	.+8      	; 0x9072 <atoi+0x2a>
    906a:	0e 94 50 49 	call	0x92a0	; 0x92a0 <__mulhi_const_10>
    906e:	82 0f       	add	r24, r18
    9070:	91 1d       	adc	r25, r1
    9072:	21 91       	ld	r18, Z+
    9074:	20 53       	subi	r18, 0x30	; 48
    9076:	2a 30       	cpi	r18, 0x0A	; 10
    9078:	c0 f3       	brcs	.-16     	; 0x906a <atoi+0x22>
    907a:	1e f4       	brtc	.+6      	; 0x9082 <atoi+0x3a>
    907c:	90 95       	com	r25
    907e:	81 95       	neg	r24
    9080:	9f 4f       	sbci	r25, 0xFF	; 255
    9082:	08 95       	ret

00009084 <__ftoa_engine>:
    9084:	28 30       	cpi	r18, 0x08	; 8
    9086:	08 f0       	brcs	.+2      	; 0x908a <__ftoa_engine+0x6>
    9088:	27 e0       	ldi	r18, 0x07	; 7
    908a:	33 27       	eor	r19, r19
    908c:	da 01       	movw	r26, r20
    908e:	99 0f       	add	r25, r25
    9090:	31 1d       	adc	r19, r1
    9092:	87 fd       	sbrc	r24, 7
    9094:	91 60       	ori	r25, 0x01	; 1
    9096:	00 96       	adiw	r24, 0x00	; 0
    9098:	61 05       	cpc	r22, r1
    909a:	71 05       	cpc	r23, r1
    909c:	39 f4       	brne	.+14     	; 0x90ac <__ftoa_engine+0x28>
    909e:	32 60       	ori	r19, 0x02	; 2
    90a0:	2e 5f       	subi	r18, 0xFE	; 254
    90a2:	3d 93       	st	X+, r19
    90a4:	30 e3       	ldi	r19, 0x30	; 48
    90a6:	2a 95       	dec	r18
    90a8:	e1 f7       	brne	.-8      	; 0x90a2 <__ftoa_engine+0x1e>
    90aa:	08 95       	ret
    90ac:	9f 3f       	cpi	r25, 0xFF	; 255
    90ae:	30 f0       	brcs	.+12     	; 0x90bc <__ftoa_engine+0x38>
    90b0:	80 38       	cpi	r24, 0x80	; 128
    90b2:	71 05       	cpc	r23, r1
    90b4:	61 05       	cpc	r22, r1
    90b6:	09 f0       	breq	.+2      	; 0x90ba <__ftoa_engine+0x36>
    90b8:	3c 5f       	subi	r19, 0xFC	; 252
    90ba:	3c 5f       	subi	r19, 0xFC	; 252
    90bc:	3d 93       	st	X+, r19
    90be:	91 30       	cpi	r25, 0x01	; 1
    90c0:	08 f0       	brcs	.+2      	; 0x90c4 <__ftoa_engine+0x40>
    90c2:	80 68       	ori	r24, 0x80	; 128
    90c4:	91 1d       	adc	r25, r1
    90c6:	df 93       	push	r29
    90c8:	cf 93       	push	r28
    90ca:	1f 93       	push	r17
    90cc:	0f 93       	push	r16
    90ce:	ff 92       	push	r15
    90d0:	ef 92       	push	r14
    90d2:	19 2f       	mov	r17, r25
    90d4:	98 7f       	andi	r25, 0xF8	; 248
    90d6:	96 95       	lsr	r25
    90d8:	e9 2f       	mov	r30, r25
    90da:	96 95       	lsr	r25
    90dc:	96 95       	lsr	r25
    90de:	e9 0f       	add	r30, r25
    90e0:	ff 27       	eor	r31, r31
    90e2:	ed 54       	subi	r30, 0x4D	; 77
    90e4:	f2 4e       	sbci	r31, 0xE2	; 226
    90e6:	99 27       	eor	r25, r25
    90e8:	33 27       	eor	r19, r19
    90ea:	ee 24       	eor	r14, r14
    90ec:	ff 24       	eor	r15, r15
    90ee:	a7 01       	movw	r20, r14
    90f0:	e7 01       	movw	r28, r14
    90f2:	05 90       	lpm	r0, Z+
    90f4:	08 94       	sec
    90f6:	07 94       	ror	r0
    90f8:	28 f4       	brcc	.+10     	; 0x9104 <__ftoa_engine+0x80>
    90fa:	36 0f       	add	r19, r22
    90fc:	e7 1e       	adc	r14, r23
    90fe:	f8 1e       	adc	r15, r24
    9100:	49 1f       	adc	r20, r25
    9102:	51 1d       	adc	r21, r1
    9104:	66 0f       	add	r22, r22
    9106:	77 1f       	adc	r23, r23
    9108:	88 1f       	adc	r24, r24
    910a:	99 1f       	adc	r25, r25
    910c:	06 94       	lsr	r0
    910e:	a1 f7       	brne	.-24     	; 0x90f8 <__ftoa_engine+0x74>
    9110:	05 90       	lpm	r0, Z+
    9112:	07 94       	ror	r0
    9114:	28 f4       	brcc	.+10     	; 0x9120 <__ftoa_engine+0x9c>
    9116:	e7 0e       	add	r14, r23
    9118:	f8 1e       	adc	r15, r24
    911a:	49 1f       	adc	r20, r25
    911c:	56 1f       	adc	r21, r22
    911e:	c1 1d       	adc	r28, r1
    9120:	77 0f       	add	r23, r23
    9122:	88 1f       	adc	r24, r24
    9124:	99 1f       	adc	r25, r25
    9126:	66 1f       	adc	r22, r22
    9128:	06 94       	lsr	r0
    912a:	a1 f7       	brne	.-24     	; 0x9114 <__ftoa_engine+0x90>
    912c:	05 90       	lpm	r0, Z+
    912e:	07 94       	ror	r0
    9130:	28 f4       	brcc	.+10     	; 0x913c <__ftoa_engine+0xb8>
    9132:	f8 0e       	add	r15, r24
    9134:	49 1f       	adc	r20, r25
    9136:	56 1f       	adc	r21, r22
    9138:	c7 1f       	adc	r28, r23
    913a:	d1 1d       	adc	r29, r1
    913c:	88 0f       	add	r24, r24
    913e:	99 1f       	adc	r25, r25
    9140:	66 1f       	adc	r22, r22
    9142:	77 1f       	adc	r23, r23
    9144:	06 94       	lsr	r0
    9146:	a1 f7       	brne	.-24     	; 0x9130 <__ftoa_engine+0xac>
    9148:	05 90       	lpm	r0, Z+
    914a:	07 94       	ror	r0
    914c:	20 f4       	brcc	.+8      	; 0x9156 <__ftoa_engine+0xd2>
    914e:	49 0f       	add	r20, r25
    9150:	56 1f       	adc	r21, r22
    9152:	c7 1f       	adc	r28, r23
    9154:	d8 1f       	adc	r29, r24
    9156:	99 0f       	add	r25, r25
    9158:	66 1f       	adc	r22, r22
    915a:	77 1f       	adc	r23, r23
    915c:	88 1f       	adc	r24, r24
    915e:	06 94       	lsr	r0
    9160:	a9 f7       	brne	.-22     	; 0x914c <__ftoa_engine+0xc8>
    9162:	84 91       	lpm	r24, Z+
    9164:	10 95       	com	r17
    9166:	17 70       	andi	r17, 0x07	; 7
    9168:	41 f0       	breq	.+16     	; 0x917a <__ftoa_engine+0xf6>
    916a:	d6 95       	lsr	r29
    916c:	c7 95       	ror	r28
    916e:	57 95       	ror	r21
    9170:	47 95       	ror	r20
    9172:	f7 94       	ror	r15
    9174:	e7 94       	ror	r14
    9176:	1a 95       	dec	r17
    9178:	c1 f7       	brne	.-16     	; 0x916a <__ftoa_engine+0xe6>
    917a:	e9 e5       	ldi	r30, 0x59	; 89
    917c:	fd e1       	ldi	r31, 0x1D	; 29
    917e:	68 94       	set
    9180:	15 90       	lpm	r1, Z+
    9182:	15 91       	lpm	r17, Z+
    9184:	35 91       	lpm	r19, Z+
    9186:	65 91       	lpm	r22, Z+
    9188:	95 91       	lpm	r25, Z+
    918a:	05 90       	lpm	r0, Z+
    918c:	7f e2       	ldi	r23, 0x2F	; 47
    918e:	73 95       	inc	r23
    9190:	e1 18       	sub	r14, r1
    9192:	f1 0a       	sbc	r15, r17
    9194:	43 0b       	sbc	r20, r19
    9196:	56 0b       	sbc	r21, r22
    9198:	c9 0b       	sbc	r28, r25
    919a:	d0 09       	sbc	r29, r0
    919c:	c0 f7       	brcc	.-16     	; 0x918e <__ftoa_engine+0x10a>
    919e:	e1 0c       	add	r14, r1
    91a0:	f1 1e       	adc	r15, r17
    91a2:	43 1f       	adc	r20, r19
    91a4:	56 1f       	adc	r21, r22
    91a6:	c9 1f       	adc	r28, r25
    91a8:	d0 1d       	adc	r29, r0
    91aa:	7e f4       	brtc	.+30     	; 0x91ca <__ftoa_engine+0x146>
    91ac:	70 33       	cpi	r23, 0x30	; 48
    91ae:	11 f4       	brne	.+4      	; 0x91b4 <__ftoa_engine+0x130>
    91b0:	8a 95       	dec	r24
    91b2:	e6 cf       	rjmp	.-52     	; 0x9180 <__ftoa_engine+0xfc>
    91b4:	e8 94       	clt
    91b6:	01 50       	subi	r16, 0x01	; 1
    91b8:	30 f0       	brcs	.+12     	; 0x91c6 <__ftoa_engine+0x142>
    91ba:	08 0f       	add	r16, r24
    91bc:	0a f4       	brpl	.+2      	; 0x91c0 <__ftoa_engine+0x13c>
    91be:	00 27       	eor	r16, r16
    91c0:	02 17       	cp	r16, r18
    91c2:	08 f4       	brcc	.+2      	; 0x91c6 <__ftoa_engine+0x142>
    91c4:	20 2f       	mov	r18, r16
    91c6:	23 95       	inc	r18
    91c8:	02 2f       	mov	r16, r18
    91ca:	7a 33       	cpi	r23, 0x3A	; 58
    91cc:	28 f0       	brcs	.+10     	; 0x91d8 <__ftoa_engine+0x154>
    91ce:	79 e3       	ldi	r23, 0x39	; 57
    91d0:	7d 93       	st	X+, r23
    91d2:	2a 95       	dec	r18
    91d4:	e9 f7       	brne	.-6      	; 0x91d0 <__ftoa_engine+0x14c>
    91d6:	10 c0       	rjmp	.+32     	; 0x91f8 <__ftoa_engine+0x174>
    91d8:	7d 93       	st	X+, r23
    91da:	2a 95       	dec	r18
    91dc:	89 f6       	brne	.-94     	; 0x9180 <__ftoa_engine+0xfc>
    91de:	06 94       	lsr	r0
    91e0:	97 95       	ror	r25
    91e2:	67 95       	ror	r22
    91e4:	37 95       	ror	r19
    91e6:	17 95       	ror	r17
    91e8:	17 94       	ror	r1
    91ea:	e1 18       	sub	r14, r1
    91ec:	f1 0a       	sbc	r15, r17
    91ee:	43 0b       	sbc	r20, r19
    91f0:	56 0b       	sbc	r21, r22
    91f2:	c9 0b       	sbc	r28, r25
    91f4:	d0 09       	sbc	r29, r0
    91f6:	98 f0       	brcs	.+38     	; 0x921e <__ftoa_engine+0x19a>
    91f8:	23 95       	inc	r18
    91fa:	7e 91       	ld	r23, -X
    91fc:	73 95       	inc	r23
    91fe:	7a 33       	cpi	r23, 0x3A	; 58
    9200:	08 f0       	brcs	.+2      	; 0x9204 <__ftoa_engine+0x180>
    9202:	70 e3       	ldi	r23, 0x30	; 48
    9204:	7c 93       	st	X, r23
    9206:	20 13       	cpse	r18, r16
    9208:	b8 f7       	brcc	.-18     	; 0x91f8 <__ftoa_engine+0x174>
    920a:	7e 91       	ld	r23, -X
    920c:	70 61       	ori	r23, 0x10	; 16
    920e:	7d 93       	st	X+, r23
    9210:	30 f0       	brcs	.+12     	; 0x921e <__ftoa_engine+0x19a>
    9212:	83 95       	inc	r24
    9214:	71 e3       	ldi	r23, 0x31	; 49
    9216:	7d 93       	st	X+, r23
    9218:	70 e3       	ldi	r23, 0x30	; 48
    921a:	2a 95       	dec	r18
    921c:	e1 f7       	brne	.-8      	; 0x9216 <__ftoa_engine+0x192>
    921e:	11 24       	eor	r1, r1
    9220:	ef 90       	pop	r14
    9222:	ff 90       	pop	r15
    9224:	0f 91       	pop	r16
    9226:	1f 91       	pop	r17
    9228:	cf 91       	pop	r28
    922a:	df 91       	pop	r29
    922c:	99 27       	eor	r25, r25
    922e:	87 fd       	sbrc	r24, 7
    9230:	90 95       	com	r25
    9232:	08 95       	ret

00009234 <isspace>:
    9234:	91 11       	cpse	r25, r1
    9236:	21 c1       	rjmp	.+578    	; 0x947a <__ctype_isfalse>
    9238:	80 32       	cpi	r24, 0x20	; 32
    923a:	19 f0       	breq	.+6      	; 0x9242 <isspace+0xe>
    923c:	89 50       	subi	r24, 0x09	; 9
    923e:	85 50       	subi	r24, 0x05	; 5
    9240:	d0 f7       	brcc	.-12     	; 0x9236 <isspace+0x2>
    9242:	08 95       	ret

00009244 <strncasecmp_P>:
    9244:	fb 01       	movw	r30, r22
    9246:	dc 01       	movw	r26, r24
    9248:	41 50       	subi	r20, 0x01	; 1
    924a:	50 40       	sbci	r21, 0x00	; 0
    924c:	88 f0       	brcs	.+34     	; 0x9270 <strncasecmp_P+0x2c>
    924e:	8d 91       	ld	r24, X+
    9250:	81 34       	cpi	r24, 0x41	; 65
    9252:	1c f0       	brlt	.+6      	; 0x925a <strncasecmp_P+0x16>
    9254:	8b 35       	cpi	r24, 0x5B	; 91
    9256:	0c f4       	brge	.+2      	; 0x925a <strncasecmp_P+0x16>
    9258:	80 5e       	subi	r24, 0xE0	; 224
    925a:	65 91       	lpm	r22, Z+
    925c:	61 34       	cpi	r22, 0x41	; 65
    925e:	1c f0       	brlt	.+6      	; 0x9266 <strncasecmp_P+0x22>
    9260:	6b 35       	cpi	r22, 0x5B	; 91
    9262:	0c f4       	brge	.+2      	; 0x9266 <strncasecmp_P+0x22>
    9264:	60 5e       	subi	r22, 0xE0	; 224
    9266:	86 1b       	sub	r24, r22
    9268:	61 11       	cpse	r22, r1
    926a:	71 f3       	breq	.-36     	; 0x9248 <strncasecmp_P+0x4>
    926c:	99 0b       	sbc	r25, r25
    926e:	08 95       	ret
    9270:	88 1b       	sub	r24, r24
    9272:	fc cf       	rjmp	.-8      	; 0x926c <strncasecmp_P+0x28>

00009274 <strnlen_P>:
    9274:	fc 01       	movw	r30, r24
    9276:	05 90       	lpm	r0, Z+
    9278:	61 50       	subi	r22, 0x01	; 1
    927a:	70 40       	sbci	r23, 0x00	; 0
    927c:	01 10       	cpse	r0, r1
    927e:	d8 f7       	brcc	.-10     	; 0x9276 <strnlen_P+0x2>
    9280:	80 95       	com	r24
    9282:	90 95       	com	r25
    9284:	8e 0f       	add	r24, r30
    9286:	9f 1f       	adc	r25, r31
    9288:	08 95       	ret

0000928a <strnlen>:
    928a:	fc 01       	movw	r30, r24
    928c:	61 50       	subi	r22, 0x01	; 1
    928e:	70 40       	sbci	r23, 0x00	; 0
    9290:	01 90       	ld	r0, Z+
    9292:	01 10       	cpse	r0, r1
    9294:	d8 f7       	brcc	.-10     	; 0x928c <strnlen+0x2>
    9296:	80 95       	com	r24
    9298:	90 95       	com	r25
    929a:	8e 0f       	add	r24, r30
    929c:	9f 1f       	adc	r25, r31
    929e:	08 95       	ret

000092a0 <__mulhi_const_10>:
    92a0:	7a e0       	ldi	r23, 0x0A	; 10
    92a2:	97 9f       	mul	r25, r23
    92a4:	90 2d       	mov	r25, r0
    92a6:	87 9f       	mul	r24, r23
    92a8:	80 2d       	mov	r24, r0
    92aa:	91 0d       	add	r25, r1
    92ac:	11 24       	eor	r1, r1
    92ae:	08 95       	ret

000092b0 <clearerr>:
    92b0:	fc 01       	movw	r30, r24
    92b2:	83 81       	ldd	r24, Z+3	; 0x03
    92b4:	8f 7c       	andi	r24, 0xCF	; 207
    92b6:	83 83       	std	Z+3, r24	; 0x03
    92b8:	08 95       	ret

000092ba <fgets>:
    92ba:	cf 92       	push	r12
    92bc:	df 92       	push	r13
    92be:	ef 92       	push	r14
    92c0:	ff 92       	push	r15
    92c2:	0f 93       	push	r16
    92c4:	1f 93       	push	r17
    92c6:	cf 93       	push	r28
    92c8:	df 93       	push	r29
    92ca:	7c 01       	movw	r14, r24
    92cc:	6a 01       	movw	r12, r20
    92ce:	fa 01       	movw	r30, r20
    92d0:	83 81       	ldd	r24, Z+3	; 0x03
    92d2:	80 ff       	sbrs	r24, 0
    92d4:	19 c0       	rjmp	.+50     	; 0x9308 <fgets+0x4e>
    92d6:	16 16       	cp	r1, r22
    92d8:	17 06       	cpc	r1, r23
    92da:	b4 f4       	brge	.+44     	; 0x9308 <fgets+0x4e>
    92dc:	eb 01       	movw	r28, r22
    92de:	21 97       	sbiw	r28, 0x01	; 1
    92e0:	87 01       	movw	r16, r14
    92e2:	0d c0       	rjmp	.+26     	; 0x92fe <fgets+0x44>
    92e4:	c6 01       	movw	r24, r12
    92e6:	0e 94 40 4a 	call	0x9480	; 0x9480 <fgetc>
    92ea:	ff ef       	ldi	r31, 0xFF	; 255
    92ec:	8f 3f       	cpi	r24, 0xFF	; 255
    92ee:	9f 07       	cpc	r25, r31
    92f0:	59 f0       	breq	.+22     	; 0x9308 <fgets+0x4e>
    92f2:	f8 01       	movw	r30, r16
    92f4:	81 93       	st	Z+, r24
    92f6:	8f 01       	movw	r16, r30
    92f8:	0a 97       	sbiw	r24, 0x0a	; 10
    92fa:	19 f0       	breq	.+6      	; 0x9302 <fgets+0x48>
    92fc:	21 97       	sbiw	r28, 0x01	; 1
    92fe:	20 97       	sbiw	r28, 0x00	; 0
    9300:	89 f7       	brne	.-30     	; 0x92e4 <fgets+0x2a>
    9302:	f8 01       	movw	r30, r16
    9304:	10 82       	st	Z, r1
    9306:	02 c0       	rjmp	.+4      	; 0x930c <fgets+0x52>
    9308:	ee 24       	eor	r14, r14
    930a:	ff 24       	eor	r15, r15
    930c:	c7 01       	movw	r24, r14
    930e:	df 91       	pop	r29
    9310:	cf 91       	pop	r28
    9312:	1f 91       	pop	r17
    9314:	0f 91       	pop	r16
    9316:	ff 90       	pop	r15
    9318:	ef 90       	pop	r14
    931a:	df 90       	pop	r13
    931c:	cf 90       	pop	r12
    931e:	08 95       	ret

00009320 <fputc>:
    9320:	0f 93       	push	r16
    9322:	1f 93       	push	r17
    9324:	cf 93       	push	r28
    9326:	df 93       	push	r29
    9328:	8c 01       	movw	r16, r24
    932a:	eb 01       	movw	r28, r22
    932c:	8b 81       	ldd	r24, Y+3	; 0x03
    932e:	81 ff       	sbrs	r24, 1
    9330:	1b c0       	rjmp	.+54     	; 0x9368 <fputc+0x48>
    9332:	82 ff       	sbrs	r24, 2
    9334:	0d c0       	rjmp	.+26     	; 0x9350 <fputc+0x30>
    9336:	2e 81       	ldd	r18, Y+6	; 0x06
    9338:	3f 81       	ldd	r19, Y+7	; 0x07
    933a:	8c 81       	ldd	r24, Y+4	; 0x04
    933c:	9d 81       	ldd	r25, Y+5	; 0x05
    933e:	28 17       	cp	r18, r24
    9340:	39 07       	cpc	r19, r25
    9342:	64 f4       	brge	.+24     	; 0x935c <fputc+0x3c>
    9344:	e8 81       	ld	r30, Y
    9346:	f9 81       	ldd	r31, Y+1	; 0x01
    9348:	01 93       	st	Z+, r16
    934a:	e8 83       	st	Y, r30
    934c:	f9 83       	std	Y+1, r31	; 0x01
    934e:	06 c0       	rjmp	.+12     	; 0x935c <fputc+0x3c>
    9350:	e8 85       	ldd	r30, Y+8	; 0x08
    9352:	f9 85       	ldd	r31, Y+9	; 0x09
    9354:	80 2f       	mov	r24, r16
    9356:	19 95       	eicall
    9358:	89 2b       	or	r24, r25
    935a:	31 f4       	brne	.+12     	; 0x9368 <fputc+0x48>
    935c:	8e 81       	ldd	r24, Y+6	; 0x06
    935e:	9f 81       	ldd	r25, Y+7	; 0x07
    9360:	01 96       	adiw	r24, 0x01	; 1
    9362:	8e 83       	std	Y+6, r24	; 0x06
    9364:	9f 83       	std	Y+7, r25	; 0x07
    9366:	02 c0       	rjmp	.+4      	; 0x936c <fputc+0x4c>
    9368:	0f ef       	ldi	r16, 0xFF	; 255
    936a:	1f ef       	ldi	r17, 0xFF	; 255
    936c:	c8 01       	movw	r24, r16
    936e:	df 91       	pop	r29
    9370:	cf 91       	pop	r28
    9372:	1f 91       	pop	r17
    9374:	0f 91       	pop	r16
    9376:	08 95       	ret

00009378 <printf_P>:
    9378:	df 93       	push	r29
    937a:	cf 93       	push	r28
    937c:	cd b7       	in	r28, 0x3d	; 61
    937e:	de b7       	in	r29, 0x3e	; 62
    9380:	fe 01       	movw	r30, r28
    9382:	36 96       	adiw	r30, 0x06	; 6
    9384:	61 91       	ld	r22, Z+
    9386:	71 91       	ld	r23, Z+
    9388:	a0 91 55 25 	lds	r26, 0x2555
    938c:	b0 91 56 25 	lds	r27, 0x2556
    9390:	13 96       	adiw	r26, 0x03	; 3
    9392:	8c 91       	ld	r24, X
    9394:	13 97       	sbiw	r26, 0x03	; 3
    9396:	88 60       	ori	r24, 0x08	; 8
    9398:	13 96       	adiw	r26, 0x03	; 3
    939a:	8c 93       	st	X, r24
    939c:	80 91 55 25 	lds	r24, 0x2555
    93a0:	90 91 56 25 	lds	r25, 0x2556
    93a4:	af 01       	movw	r20, r30
    93a6:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <vfprintf>
    93aa:	e0 91 55 25 	lds	r30, 0x2555
    93ae:	f0 91 56 25 	lds	r31, 0x2556
    93b2:	23 81       	ldd	r18, Z+3	; 0x03
    93b4:	27 7f       	andi	r18, 0xF7	; 247
    93b6:	23 83       	std	Z+3, r18	; 0x03
    93b8:	cf 91       	pop	r28
    93ba:	df 91       	pop	r29
    93bc:	08 95       	ret

000093be <__ultoa_invert>:
    93be:	fa 01       	movw	r30, r20
    93c0:	aa 27       	eor	r26, r26
    93c2:	28 30       	cpi	r18, 0x08	; 8
    93c4:	51 f1       	breq	.+84     	; 0x941a <__ultoa_invert+0x5c>
    93c6:	20 31       	cpi	r18, 0x10	; 16
    93c8:	81 f1       	breq	.+96     	; 0x942a <__ultoa_invert+0x6c>
    93ca:	e8 94       	clt
    93cc:	6f 93       	push	r22
    93ce:	6e 7f       	andi	r22, 0xFE	; 254
    93d0:	6e 5f       	subi	r22, 0xFE	; 254
    93d2:	7f 4f       	sbci	r23, 0xFF	; 255
    93d4:	8f 4f       	sbci	r24, 0xFF	; 255
    93d6:	9f 4f       	sbci	r25, 0xFF	; 255
    93d8:	af 4f       	sbci	r26, 0xFF	; 255
    93da:	b1 e0       	ldi	r27, 0x01	; 1
    93dc:	3e d0       	rcall	.+124    	; 0x945a <__ultoa_invert+0x9c>
    93de:	b4 e0       	ldi	r27, 0x04	; 4
    93e0:	3c d0       	rcall	.+120    	; 0x945a <__ultoa_invert+0x9c>
    93e2:	67 0f       	add	r22, r23
    93e4:	78 1f       	adc	r23, r24
    93e6:	89 1f       	adc	r24, r25
    93e8:	9a 1f       	adc	r25, r26
    93ea:	a1 1d       	adc	r26, r1
    93ec:	68 0f       	add	r22, r24
    93ee:	79 1f       	adc	r23, r25
    93f0:	8a 1f       	adc	r24, r26
    93f2:	91 1d       	adc	r25, r1
    93f4:	a1 1d       	adc	r26, r1
    93f6:	6a 0f       	add	r22, r26
    93f8:	71 1d       	adc	r23, r1
    93fa:	81 1d       	adc	r24, r1
    93fc:	91 1d       	adc	r25, r1
    93fe:	a1 1d       	adc	r26, r1
    9400:	20 d0       	rcall	.+64     	; 0x9442 <__ultoa_invert+0x84>
    9402:	09 f4       	brne	.+2      	; 0x9406 <__ultoa_invert+0x48>
    9404:	68 94       	set
    9406:	3f 91       	pop	r19
    9408:	2a e0       	ldi	r18, 0x0A	; 10
    940a:	26 9f       	mul	r18, r22
    940c:	11 24       	eor	r1, r1
    940e:	30 19       	sub	r19, r0
    9410:	30 5d       	subi	r19, 0xD0	; 208
    9412:	31 93       	st	Z+, r19
    9414:	de f6       	brtc	.-74     	; 0x93cc <__ultoa_invert+0xe>
    9416:	cf 01       	movw	r24, r30
    9418:	08 95       	ret
    941a:	46 2f       	mov	r20, r22
    941c:	47 70       	andi	r20, 0x07	; 7
    941e:	40 5d       	subi	r20, 0xD0	; 208
    9420:	41 93       	st	Z+, r20
    9422:	b3 e0       	ldi	r27, 0x03	; 3
    9424:	0f d0       	rcall	.+30     	; 0x9444 <__ultoa_invert+0x86>
    9426:	c9 f7       	brne	.-14     	; 0x941a <__ultoa_invert+0x5c>
    9428:	f6 cf       	rjmp	.-20     	; 0x9416 <__ultoa_invert+0x58>
    942a:	46 2f       	mov	r20, r22
    942c:	4f 70       	andi	r20, 0x0F	; 15
    942e:	40 5d       	subi	r20, 0xD0	; 208
    9430:	4a 33       	cpi	r20, 0x3A	; 58
    9432:	18 f0       	brcs	.+6      	; 0x943a <__ultoa_invert+0x7c>
    9434:	49 5d       	subi	r20, 0xD9	; 217
    9436:	31 fd       	sbrc	r19, 1
    9438:	40 52       	subi	r20, 0x20	; 32
    943a:	41 93       	st	Z+, r20
    943c:	02 d0       	rcall	.+4      	; 0x9442 <__ultoa_invert+0x84>
    943e:	a9 f7       	brne	.-22     	; 0x942a <__ultoa_invert+0x6c>
    9440:	ea cf       	rjmp	.-44     	; 0x9416 <__ultoa_invert+0x58>
    9442:	b4 e0       	ldi	r27, 0x04	; 4
    9444:	a6 95       	lsr	r26
    9446:	97 95       	ror	r25
    9448:	87 95       	ror	r24
    944a:	77 95       	ror	r23
    944c:	67 95       	ror	r22
    944e:	ba 95       	dec	r27
    9450:	c9 f7       	brne	.-14     	; 0x9444 <__ultoa_invert+0x86>
    9452:	00 97       	sbiw	r24, 0x00	; 0
    9454:	61 05       	cpc	r22, r1
    9456:	71 05       	cpc	r23, r1
    9458:	08 95       	ret
    945a:	9b 01       	movw	r18, r22
    945c:	ac 01       	movw	r20, r24
    945e:	0a 2e       	mov	r0, r26
    9460:	06 94       	lsr	r0
    9462:	57 95       	ror	r21
    9464:	47 95       	ror	r20
    9466:	37 95       	ror	r19
    9468:	27 95       	ror	r18
    946a:	ba 95       	dec	r27
    946c:	c9 f7       	brne	.-14     	; 0x9460 <__ultoa_invert+0xa2>
    946e:	62 0f       	add	r22, r18
    9470:	73 1f       	adc	r23, r19
    9472:	84 1f       	adc	r24, r20
    9474:	95 1f       	adc	r25, r21
    9476:	a0 1d       	adc	r26, r0
    9478:	08 95       	ret

0000947a <__ctype_isfalse>:
    947a:	99 27       	eor	r25, r25
    947c:	88 27       	eor	r24, r24

0000947e <__ctype_istrue>:
    947e:	08 95       	ret

00009480 <fgetc>:
    9480:	cf 93       	push	r28
    9482:	df 93       	push	r29
    9484:	ec 01       	movw	r28, r24
    9486:	4b 81       	ldd	r20, Y+3	; 0x03
    9488:	40 ff       	sbrs	r20, 0
    948a:	1a c0       	rjmp	.+52     	; 0x94c0 <fgetc+0x40>
    948c:	46 ff       	sbrs	r20, 6
    948e:	0a c0       	rjmp	.+20     	; 0x94a4 <fgetc+0x24>
    9490:	4f 7b       	andi	r20, 0xBF	; 191
    9492:	4b 83       	std	Y+3, r20	; 0x03
    9494:	8e 81       	ldd	r24, Y+6	; 0x06
    9496:	9f 81       	ldd	r25, Y+7	; 0x07
    9498:	01 96       	adiw	r24, 0x01	; 1
    949a:	8e 83       	std	Y+6, r24	; 0x06
    949c:	9f 83       	std	Y+7, r25	; 0x07
    949e:	8a 81       	ldd	r24, Y+2	; 0x02
    94a0:	28 2f       	mov	r18, r24
    94a2:	2b c0       	rjmp	.+86     	; 0x94fa <fgetc+0x7a>
    94a4:	42 ff       	sbrs	r20, 2
    94a6:	13 c0       	rjmp	.+38     	; 0x94ce <fgetc+0x4e>
    94a8:	e8 81       	ld	r30, Y
    94aa:	f9 81       	ldd	r31, Y+1	; 0x01
    94ac:	80 81       	ld	r24, Z
    94ae:	28 2f       	mov	r18, r24
    94b0:	33 27       	eor	r19, r19
    94b2:	27 fd       	sbrc	r18, 7
    94b4:	30 95       	com	r19
    94b6:	21 15       	cp	r18, r1
    94b8:	31 05       	cpc	r19, r1
    94ba:	29 f4       	brne	.+10     	; 0x94c6 <fgetc+0x46>
    94bc:	40 62       	ori	r20, 0x20	; 32
    94be:	4b 83       	std	Y+3, r20	; 0x03
    94c0:	2f ef       	ldi	r18, 0xFF	; 255
    94c2:	3f ef       	ldi	r19, 0xFF	; 255
    94c4:	1b c0       	rjmp	.+54     	; 0x94fc <fgetc+0x7c>
    94c6:	31 96       	adiw	r30, 0x01	; 1
    94c8:	e8 83       	st	Y, r30
    94ca:	f9 83       	std	Y+1, r31	; 0x01
    94cc:	11 c0       	rjmp	.+34     	; 0x94f0 <fgetc+0x70>
    94ce:	ea 85       	ldd	r30, Y+10	; 0x0a
    94d0:	fb 85       	ldd	r31, Y+11	; 0x0b
    94d2:	ce 01       	movw	r24, r28
    94d4:	19 95       	eicall
    94d6:	9c 01       	movw	r18, r24
    94d8:	97 ff       	sbrs	r25, 7
    94da:	0a c0       	rjmp	.+20     	; 0x94f0 <fgetc+0x70>
    94dc:	9b 81       	ldd	r25, Y+3	; 0x03
    94de:	2f 5f       	subi	r18, 0xFF	; 255
    94e0:	3f 4f       	sbci	r19, 0xFF	; 255
    94e2:	11 f0       	breq	.+4      	; 0x94e8 <fgetc+0x68>
    94e4:	80 e2       	ldi	r24, 0x20	; 32
    94e6:	01 c0       	rjmp	.+2      	; 0x94ea <fgetc+0x6a>
    94e8:	80 e1       	ldi	r24, 0x10	; 16
    94ea:	89 2b       	or	r24, r25
    94ec:	8b 83       	std	Y+3, r24	; 0x03
    94ee:	e8 cf       	rjmp	.-48     	; 0x94c0 <fgetc+0x40>
    94f0:	8e 81       	ldd	r24, Y+6	; 0x06
    94f2:	9f 81       	ldd	r25, Y+7	; 0x07
    94f4:	01 96       	adiw	r24, 0x01	; 1
    94f6:	8e 83       	std	Y+6, r24	; 0x06
    94f8:	9f 83       	std	Y+7, r25	; 0x07
    94fa:	30 e0       	ldi	r19, 0x00	; 0
    94fc:	c9 01       	movw	r24, r18
    94fe:	df 91       	pop	r29
    9500:	cf 91       	pop	r28
    9502:	08 95       	ret

00009504 <_exit>:
    9504:	f8 94       	cli

00009506 <__stop_program>:
    9506:	ff cf       	rjmp	.-2      	; 0x9506 <__stop_program>
