
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ba2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00802000  0000ba2e  0000bac2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000592  00802100  00802100  0000bbc2  2**0
                  ALLOC
  3 .debug_aranges 00000300  00000000  00000000  0000bbc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000cfb  00000000  00000000  0000bec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ca8c  00000000  00000000  0000cbbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002708  00000000  00000000  00019649  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004b3f  00000000  00000000  0001bd51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000aa0  00000000  00000000  00020890  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000023d9  00000000  00000000  00021330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b1e  00000000  00000000  00023709  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00025227  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <__ctors_end>
       4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
       8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
       c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      10:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      14:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      18:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      1c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      20:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      24:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      28:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      2c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      30:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      34:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      38:	0c 94 a3 30 	jmp	0x6146	; 0x6146 <__vector_14>
      3c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      40:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      44:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      48:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      4c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      50:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      54:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      58:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      5c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      60:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      64:	0c 94 f0 42 	jmp	0x85e0	; 0x85e0 <__vector_25>
      68:	0c 94 bd 43 	jmp	0x877a	; 0x877a <__vector_26>
      6c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      70:	0c 94 0c 47 	jmp	0x8e18	; 0x8e18 <__vector_28>
      74:	0c 94 d9 47 	jmp	0x8fb2	; 0x8fb2 <__vector_29>
      78:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      7c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      80:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      84:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      88:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      8c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      90:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      94:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      98:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      9c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      a0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      a4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      a8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      ac:	0c 94 31 41 	jmp	0x8262	; 0x8262 <__vector_43>
      b0:	0c 94 61 41 	jmp	0x82c2	; 0x82c2 <__vector_44>
      b4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      b8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      bc:	0c 94 a5 31 	jmp	0x634a	; 0x634a <__vector_47>
      c0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      c4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      c8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      cc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      d0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      d4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      d8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      dc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      e0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      e4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      e8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      ec:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      f0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      f4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      f8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      fc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     100:	0c 94 91 41 	jmp	0x8322	; 0x8322 <__vector_64>
     104:	0c 94 c1 41 	jmp	0x8382	; 0x8382 <__vector_65>
     108:	0c 94 71 40 	jmp	0x80e2	; 0x80e2 <__vector_66>
     10c:	0c 94 a1 40 	jmp	0x8142	; 0x8142 <__vector_67>
     110:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     114:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     118:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     11c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     120:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     124:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     128:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     12c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     130:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     134:	0c 94 26 31 	jmp	0x624c	; 0x624c <__vector_77>
     138:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     13c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     140:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     144:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     148:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     14c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     150:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     154:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     158:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     15c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     160:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     164:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     168:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     16c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     170:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     174:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     178:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     17c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     180:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     184:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     188:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     18c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     190:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     194:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     198:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     19c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1a0:	0c 94 d1 40 	jmp	0x81a2	; 0x81a2 <__vector_104>
     1a4:	0c 94 01 41 	jmp	0x8202	; 0x8202 <__vector_105>
     1a8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1ac:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1b0:	0c 94 24 32 	jmp	0x6448	; 0x6448 <__vector_108>
     1b4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1b8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1bc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1c0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1c4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1c8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1cc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1d0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1d4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1d8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1dc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1e0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1e4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <cfgMsgXaxis>:
     23b:	58 00                                               X.

0000023d <cfgMsgYaxis>:
     23d:	59 00                                               Y.

0000023f <cfgMsgZaxis>:
     23f:	5a 00                                               Z.

00000241 <cfgMsgAaxis>:
     241:	41 00                                               A.

00000243 <cfgMsgs>:
     243:	3b 02 3d 02 3f 02 41 02                             ;.=.?.A.

0000024b <__c.3776>:
     24b:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     25b:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     26b:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000276 <__c.3774>:
     276:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     286:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     296:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000002a0 <__c.3772>:
     2a0:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     2b0:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     2c0:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000002ca <__c.3770>:
     2ca:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     2da:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     2ea:	73 20 2d 2d 2d 0a 00                                s ---..

000002f1 <__c.3768>:
     2f1:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     301:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     311:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000319 <__c.3813>:
     319:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     329:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     339:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     349:	29 0a 0a 00                                         )...

0000034d <__c.3811>:
     34d:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     35d:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     36d:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

0000037d <__c.3809>:
     37d:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     38d:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     39d:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000003ae <__c.3807>:
     3ae:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     3be:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     3ce:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000003df <__c.3805>:
     3df:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     3ef:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     3ff:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     40f:	6c 0a 00                                            l..

00000412 <__c.3803>:
     412:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     422:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     432:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     442:	6e 0a 00                                            n..

00000445 <__c.3801>:
     445:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     455:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     465:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     475:	74 65 70 73 29 0a 00                                teps)..

0000047c <__c.3799>:
     47c:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     48c:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     49c:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     4ac:	70 0a 00                                            p..

000004af <__c.3797>:
     4af:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     4bf:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     4cf:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     4df:	73 74 65 70 73 29 0a 00                             steps)..

000004e7 <__c.3795>:
     4e7:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     4f7:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     507:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     517:	73 74 65 70 73 29 0a 00                             steps)..

0000051f <__c.3790>:
     51f:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     52f:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

0000053d <__c.3927>:
     53d:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     54d:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

00000558 <__c.3924>:
     558:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     568:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

00000572 <__c.3921>:
     572:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     582:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

0000058c <__c.3918>:
     58c:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     59c:	74 3a 20 25 73 0a 00                                t: %s..

000005a3 <__c.3915>:
     5a3:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     5b3:	4d 6f 64 65 0a 00                                   Mode..

000005b9 <__c.3912>:
     5b9:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     5c9:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

000005d6 <configs_P>:
     5d6:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     5e6:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     5f6:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     606:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     616:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     626:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     636:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     646:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     656:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     666:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     676:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     686:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     696:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     6a6:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     6b6:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     6c6:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     6d6:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     6e6:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     6f6:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     706:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     716:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

00000724 <__c.3641>:
     724:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     734:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     744:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000750 <square_test1>:
     750:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     760:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     770:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     780:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     790:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     7a0:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     7b0:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000007be <square_test2>:
     7be:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     7ce:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     7de:	78 30 20 79 30 00                                   x0 y0.

000007e4 <square_test10>:
     7e4:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     7f4:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     804:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000810 <circle_test10>:
     810:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     820:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     830:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     840:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     850:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     860:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     870:	30 00                                               0.

00000872 <square_circle_test10>:
     872:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     882:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     892:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     8a2:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     8b2:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     8c2:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     8d2:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     8e2:	31 30 20 79 30 00                                   10 y0.

000008e8 <square_circle_test100>:
     8e8:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     8f8:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     908:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     918:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     928:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     938:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     948:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     958:	35 30 20 6a 30 00                                   50 j0.

0000095e <spiral_test5>:
     95e:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     96e:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     97e:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     98e:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     99e:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     9ae:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     9be:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     9ce:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

000009d8 <spiral_test50a>:
     9d8:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     9e8:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

000009f8 <dwell_test1>:
     9f8:	67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30 20     g0 x10.g4 p1.g0 
     a08:	78 32 30 0a 67 34 20 70 31 0a 67 30 20 78 31 30     x20.g4 p1.g0 x10
     a18:	0a 67 34 20 70 31 0a 67 30 20 78 30 30 0a 67 34     .g4 p1.g0 x00.g4
     a28:	20 70 31 0a 67 30 20 78 31 30 0a 67 34 20 70 31      p1.g0 x10.g4 p1
     a38:	0a 67 30 20 78 32 30 0a 67 34 20 70 31 0a 67 30     .g0 x20.g4 p1.g0
     a48:	20 78 31 30 0a 67 34 20 70 31 0a 67 30 20 78 30      x10.g4 p1.g0 x0
     a58:	0a 67 34 20 70 31 0a 67 30 20 78 31 30 0a 67 34     .g4 p1.g0 x10.g4
     a68:	20 70 31 0a 67 30 20 78 32 30 0a 67 34 20 70 31      p1.g0 x20.g4 p1
     a78:	0a 67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30     .g0 x10.g4 p1.g0
     a88:	20 78 30 00                                          x0.

00000a8c <dwell_test2>:
     a8c:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     a9c:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     aac:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     abc:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     acc:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     adc:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     aec:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     afc:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     b0c:	20 70 31 0a 67 30 20 78 30 00                        p1.g0 x0.

00000b16 <dwell_testMax>:
     b16:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000b20 <g0_test1>:
     b20:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     b30:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000b40 <g0_test2>:
     b40:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     b50:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     b60:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     b70:	79 30 20 7a 30 00                                   y0 z0.

00000b76 <g0_test3>:
     b76:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     b86:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     b96:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000ba4 <radius_arc_test1>:
     ba4:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     bb4:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     bc4:	72 35 30 0a 00                                      r50..

00000bc9 <radius_arc_test2>:
     bc9:	67 32 0a 00                                         g2..

00000bcd <zoetrope>:
     bcd:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     bdd:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     bed:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     bfd:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     c0d:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     c1d:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     c2d:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     c3d:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     c4d:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     c5d:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     c6d:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     c7d:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     c8d:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     c9d:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     cad:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     cbd:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     ccd:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     cdd:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     ced:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     cfd:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     d0d:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     d1d:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     d2d:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     d3d:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     d4d:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     d5d:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     d6d:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     d7d:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     d8d:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     d9d:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     dad:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     dbd:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     dcd:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     ddd:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     ded:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     dfd:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
     e0d:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
     e1d:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
     e2d:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
     e3d:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
     e4d:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
     e5d:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
     e6d:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
     e7d:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
     e8d:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
     e9d:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
     ead:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
     ebd:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
     ecd:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
     edd:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
     eed:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
     efd:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
     f0d:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
     f1d:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
     f2d:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
     f3d:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
     f4d:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
     f5d:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
     f6d:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
     f7d:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
     f8d:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
     f9d:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
     fad:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
     fbd:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
     fcd:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
     fdd:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
     fed:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
     ffd:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    100d:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    101d:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    102d:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    103d:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    104d:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    105d:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    106d:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    107d:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    108d:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    109d:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    10ad:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    10bd:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    10cd:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    10dd:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    10ed:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    10fd:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    110d:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    111d:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    112d:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    113d:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    114d:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    115d:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    116d:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    117d:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    118d:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    119d:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    11ad:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    11bd:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    11cd:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    11dd:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    11ed:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    11fd:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    120d:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    121d:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    122d:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    123d:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    124d:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    125d:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    126d:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    127d:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    128d:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    129d:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    12ad:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    12bd:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    12cd:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    12dd:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    12ed:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    12fd:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    130d:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    131d:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    132d:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    133d:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    134d:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    135d:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    136d:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    137d:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    138d:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    139d:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    13ad:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    13bd:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    13cd:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    13dd:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    13ed:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    13fd:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    140d:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    141d:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    142d:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    143d:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    144d:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    145d:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    146d:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    147d:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    148d:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    149d:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    14ad:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    14bd:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    14cd:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    14dd:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    14ed:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    14fd:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    150d:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    151d:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    152d:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    153d:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    154d:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    155d:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    156d:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    157d:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

00001588 <contraptor_circle>:
    1588:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    1598:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    15a8:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    15b8:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    15c8:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    15d8:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    15e8:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    15f8:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    1608:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    1618:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    1628:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    1638:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    1648:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    1658:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    1668:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    1678:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    1688:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    1698:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    16a8:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    16b8:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    16c8:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    16d8:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    16e8:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    16f8:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    1708:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    1718:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    1728:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    1738:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    1748:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    1758:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    1768:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    1778:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    1788:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    1798:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    17a8:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    17b8:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    17c8:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    17d8:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    17e8:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    17f8:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    1808:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1818:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1828:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    1838:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    1848:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    1858:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    1868:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    1878:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    1888:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1898:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    18a8:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    18b8:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    18c8:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    18d8:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    18e8:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    18f8:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    1908:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1918:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1928:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1938:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1948:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1958:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001968 <__c.3808>:
    1968:	62 75 69 6c 64 20 32 30 33 00                       build 203.

00001972 <__c.3806>:
    1972:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1982:	25 53 0a 00                                         %S..

00001986 <__c.3836>:
    1986:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1996:	69 6c 65 0a 00                                      ile..

0000199b <tgModeStringControl>:
    199b:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

000019a8 <tgModeStringConfig>:
    19a8:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

000019b4 <tgModeStringGCode>:
    19b4:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

000019c0 <tgModeStringDirect>:
    19c0:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

000019cd <tgModeStrings>:
    19cd:	9b 19 a8 19 b4 19 c0 19                             ........

000019d5 <__c.3919>:
    19d5:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

000019e3 <bsel>:
    19e3:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

000019ee <bscale>:
    19ee:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

000019f9 <getcFuncs>:
    19f9:	48 45 2c 45 2c 45 e8 46 2c 45 2c 45 2c 45 2c 45     HE,E,E.F,E,E,E,E
    1a09:	8d 45 2c 45 48 45 2c 45 2c 45 48 45 2c 45 2c 45     .E,EHE,E,EHE,E,E
    1a19:	2c 45 00 47 2c 45 f4 46 2c 45 2c 45 2c 45 2c 45     ,E.G,E.F,E,E,E,E
    1a29:	e8 46 2c 45 2c 45 e8 46 2c 45 2c 45 2c 45 2c 45     .F,E,E.F,E,E,E,E
    1a39:	2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45     ,E,E,E,E,E,E,E,E
    1a49:	2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45     ,E,E,E,E,E,E,E,E
    1a59:	2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45     ,E,E,E,E,E,E,E,E
    1a69:	2c 45 2c 45 2c 45 6f 45 2c 45 2c 45 2c 45 2c 45     ,E,E,EoE,E,E,E,E
    1a79:	2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45     ,E,E,E,E,E,E,E,E
    1a89:	2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45     ,E,E,E,E,E,E,E,E
    1a99:	2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45     ,E,E,E,E,E,E,E,E
    1aa9:	2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45     ,E,E,E,E,E,E,E,E
    1ab9:	2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45     ,E,E,E,E,E,E,E,E
    1ac9:	2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45     ,E,E,E,E,E,E,E,E
    1ad9:	2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45     ,E,E,E,E,E,E,E,E
    1ae9:	2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 2c 45 8d 45     ,E,E,E,E,E,E,E.E

00001af9 <readlnFuncs>:
    1af9:	7e 46 38 46 38 46 e8 46 38 46 38 46 38 46 38 46     ~F8F8F.F8F8F8F8F
    1b09:	c9 46 38 46 7e 46 38 46 38 46 7e 46 38 46 38 46     .F8F~F8F8F~F8F8F
    1b19:	38 46 00 47 38 46 f4 46 38 46 38 46 38 46 38 46     8F.G8F.F8F8F8F8F
    1b29:	e8 46 38 46 38 46 e8 46 38 46 38 46 38 46 38 46     .F8F8F.F8F8F8F8F
    1b39:	38 46 38 46 38 46 38 46 38 46 38 46 38 46 38 46     8F8F8F8F8F8F8F8F
    1b49:	38 46 38 46 38 46 38 46 38 46 38 46 38 46 38 46     8F8F8F8F8F8F8F8F
    1b59:	38 46 38 46 38 46 38 46 38 46 38 46 38 46 38 46     8F8F8F8F8F8F8F8F
    1b69:	38 46 38 46 38 46 ab 46 38 46 38 46 38 46 38 46     8F8F8F.F8F8F8F8F
    1b79:	38 46 38 46 38 46 38 46 38 46 38 46 38 46 38 46     8F8F8F8F8F8F8F8F
    1b89:	38 46 38 46 38 46 38 46 38 46 38 46 38 46 38 46     8F8F8F8F8F8F8F8F
    1b99:	38 46 38 46 38 46 38 46 38 46 38 46 38 46 38 46     8F8F8F8F8F8F8F8F
    1ba9:	38 46 38 46 38 46 38 46 38 46 38 46 38 46 38 46     8F8F8F8F8F8F8F8F
    1bb9:	38 46 38 46 38 46 38 46 38 46 38 46 38 46 38 46     8F8F8F8F8F8F8F8F
    1bc9:	38 46 38 46 38 46 38 46 38 46 38 46 38 46 38 46     8F8F8F8F8F8F8F8F
    1bd9:	38 46 38 46 38 46 38 46 38 46 38 46 38 46 38 46     8F8F8F8F8F8F8F8F
    1be9:	38 46 38 46 38 46 38 46 38 46 38 46 38 46 c9 46     8F8F8F8F8F8F8F.F

00001bf9 <getcFuncs>:
    1bf9:	64 49 48 49 48 49 c5 4a 48 49 48 49 48 49 48 49     dIHIHI.JHIHIHIHI
    1c09:	a9 49 48 49 64 49 48 49 48 49 64 49 48 49 48 49     .IHIdIHIHIdIHIHI
    1c19:	48 49 dd 4a 48 49 d1 4a 48 49 48 49 48 49 48 49     HI.JHI.JHIHIHIHI
    1c29:	c5 4a 48 49 48 49 c5 4a 48 49 48 49 48 49 48 49     .JHIHI.JHIHIHIHI
    1c39:	48 49 48 49 48 49 48 49 48 49 48 49 48 49 48 49     HIHIHIHIHIHIHIHI
    1c49:	48 49 48 49 48 49 48 49 48 49 48 49 48 49 48 49     HIHIHIHIHIHIHIHI
    1c59:	48 49 48 49 48 49 48 49 48 49 48 49 48 49 48 49     HIHIHIHIHIHIHIHI
    1c69:	48 49 48 49 48 49 8b 49 48 49 48 49 48 49 48 49     HIHIHI.IHIHIHIHI
    1c79:	48 49 48 49 48 49 48 49 48 49 48 49 48 49 48 49     HIHIHIHIHIHIHIHI
    1c89:	48 49 48 49 48 49 48 49 48 49 48 49 48 49 48 49     HIHIHIHIHIHIHIHI
    1c99:	48 49 48 49 48 49 48 49 48 49 48 49 48 49 48 49     HIHIHIHIHIHIHIHI
    1ca9:	48 49 48 49 48 49 48 49 48 49 48 49 48 49 48 49     HIHIHIHIHIHIHIHI
    1cb9:	48 49 48 49 48 49 48 49 48 49 48 49 48 49 48 49     HIHIHIHIHIHIHIHI
    1cc9:	48 49 48 49 48 49 48 49 48 49 48 49 48 49 48 49     HIHIHIHIHIHIHIHI
    1cd9:	48 49 48 49 48 49 48 49 48 49 48 49 48 49 48 49     HIHIHIHIHIHIHIHI
    1ce9:	48 49 48 49 48 49 48 49 48 49 48 49 48 49 a9 49     HIHIHIHIHIHIHI.I

00001cf9 <readlnFuncs>:
    1cf9:	5b 4a 15 4a 15 4a c5 4a 15 4a 15 4a 15 4a 15 4a     [J.J.J.J.J.J.J.J
    1d09:	a6 4a 15 4a 5b 4a 15 4a 15 4a 5b 4a 15 4a 15 4a     .J.J[J.J.J[J.J.J
    1d19:	15 4a dd 4a 15 4a d1 4a 15 4a 15 4a 15 4a 15 4a     .J.J.J.J.J.J.J.J
    1d29:	c5 4a 15 4a 15 4a c5 4a 15 4a 15 4a 15 4a 15 4a     .J.J.J.J.J.J.J.J
    1d39:	15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a     .J.J.J.J.J.J.J.J
    1d49:	15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a     .J.J.J.J.J.J.J.J
    1d59:	15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a     .J.J.J.J.J.J.J.J
    1d69:	15 4a 15 4a 15 4a 88 4a 15 4a 15 4a 15 4a 15 4a     .J.J.J.J.J.J.J.J
    1d79:	15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a     .J.J.J.J.J.J.J.J
    1d89:	15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a     .J.J.J.J.J.J.J.J
    1d99:	15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a     .J.J.J.J.J.J.J.J
    1da9:	15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a     .J.J.J.J.J.J.J.J
    1db9:	15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a     .J.J.J.J.J.J.J.J
    1dc9:	15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a     .J.J.J.J.J.J.J.J
    1dd9:	15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a     .J.J.J.J.J.J.J.J
    1de9:	15 4a 15 4a 15 4a 15 4a 15 4a 15 4a 15 4a a6 4a     .J.J.J.J.J.J.J.J

00001df9 <pstr_inf>:
    1df9:	49 4e 46                                            INF

00001dfc <pstr_inity>:
    1dfc:	49 4e 49 54 59                                      INITY

00001e01 <pstr_nan>:
    1e01:	4e 41 4e                                            NAN

00001e04 <pwr_m10>:
    1e04:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1e14:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001e1c <pwr_p10>:
    1e1c:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1e2c:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1e3c:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1e4c:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1e5c:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1e6c:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1e7c:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1e8c:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1e9c:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1eac:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1ebc:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1ecc:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1edc:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1eec:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1efc:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1f0c:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1f1c:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1f2c:	3d 27                                               ='

00001f2e <__ctors_end>:
    1f2e:	11 24       	eor	r1, r1
    1f30:	1f be       	out	0x3f, r1	; 63
    1f32:	cf ef       	ldi	r28, 0xFF	; 255
    1f34:	df e5       	ldi	r29, 0x5F	; 95
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	00 e0       	ldi	r16, 0x00	; 0
    1f3c:	0c bf       	out	0x3c, r16	; 60

00001f3e <__do_copy_data>:
    1f3e:	11 e2       	ldi	r17, 0x21	; 33
    1f40:	a0 e0       	ldi	r26, 0x00	; 0
    1f42:	b0 e2       	ldi	r27, 0x20	; 32
    1f44:	ee e2       	ldi	r30, 0x2E	; 46
    1f46:	fa eb       	ldi	r31, 0xBA	; 186
    1f48:	00 e0       	ldi	r16, 0x00	; 0
    1f4a:	0b bf       	out	0x3b, r16	; 59
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <__do_copy_data+0x14>
    1f4e:	07 90       	elpm	r0, Z+
    1f50:	0d 92       	st	X+, r0
    1f52:	a0 30       	cpi	r26, 0x00	; 0
    1f54:	b1 07       	cpc	r27, r17
    1f56:	d9 f7       	brne	.-10     	; 0x1f4e <__do_copy_data+0x10>

00001f58 <__do_clear_bss>:
    1f58:	16 e2       	ldi	r17, 0x26	; 38
    1f5a:	a0 e0       	ldi	r26, 0x00	; 0
    1f5c:	b1 e2       	ldi	r27, 0x21	; 33
    1f5e:	01 c0       	rjmp	.+2      	; 0x1f62 <.do_clear_bss_start>

00001f60 <.do_clear_bss_loop>:
    1f60:	1d 92       	st	X+, r1

00001f62 <.do_clear_bss_start>:
    1f62:	a2 39       	cpi	r26, 0x92	; 146
    1f64:	b1 07       	cpc	r27, r17
    1f66:	e1 f7       	brne	.-8      	; 0x1f60 <.do_clear_bss_loop>
    1f68:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <main>
    1f6c:	0c 94 15 5d 	jmp	0xba2a	; 0xba2a <_exit>

00001f70 <__bad_interrupt>:
    1f70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001f74 <main>:
#include "encoder.h"
#include "gcode.h"


int main(void) 
{
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
	/* These inits are order dependent */
	cli();
    1f7c:	f8 94       	cli
	xmega_init();				// xmega setup
    1f7e:	0e 94 0b 23 	call	0x4616	; 0x4616 <xmega_init>
	xio_init();					// xmega io subsystem
    1f82:	0e 94 89 35 	call	0x6b12	; 0x6b12 <xio_init>

	cfg_init();					// get config record from eeprom
    1f86:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <cfg_init>
	st_init(); 					// stepper subsystem
    1f8a:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <st_init>
	ls_init();					// limit switches
    1f8e:	0e 94 e1 3f 	call	0x7fc2	; 0x7fc2 <ls_init>
	mv_init();					// move buffers
    1f92:	0e 94 70 3c 	call	0x78e0	; 0x78e0 <mv_init>
	mc_init();					// motion control subsystem
    1f96:	0e 94 71 23 	call	0x46e2	; 0x46e2 <mc_init>
	spindle_init();				// spindle controller
    1f9a:	0e 94 76 2f 	call	0x5eec	; 0x5eec <spindle_init>
	en_init();					// encoders
    1f9e:	0e 94 ba 22 	call	0x4574	; 0x4574 <en_init>
	gc_init();					// gcode-parser
    1fa2:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <gc_init>
	dd_init();					// direct drive commands
    1fa6:	0e 94 5a 3c 	call	0x78b4	; 0x78b4 <dd_init>
	tg_init();					// tinyg parsers
    1faa:	0e 94 35 3a 	call	0x746a	; 0x746a <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1fae:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1fb2:	a0 ea       	ldi	r26, 0xA0	; 160
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e0 ea       	ldi	r30, 0xA0	; 160
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	81 60       	ori	r24, 0x01	; 1
    1fbe:	12 96       	adiw	r26, 0x02	; 2
    1fc0:	8c 93       	st	X, r24
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1fc2:	a0 ea       	ldi	r26, 0xA0	; 160
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e0 ea       	ldi	r30, 0xA0	; 160
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	82 60       	ori	r24, 0x02	; 2
    1fce:	12 96       	adiw	r26, 0x02	; 2
    1fd0:	8c 93       	st	X, r24
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1fd2:	a0 ea       	ldi	r26, 0xA0	; 160
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e0 ea       	ldi	r30, 0xA0	; 160
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	84 60       	ori	r24, 0x04	; 4
    1fde:	12 96       	adiw	r26, 0x02	; 2
    1fe0:	8c 93       	st	X, r24
	sei();						// enable global interrupts
    1fe2:	78 94       	sei
//	xio_usb_queue_RX_string("f\n");
//	xio_usb_queue_RX_string("?\n");
//	xio_usb_queue_RX_string("g0x10y10z25\n");

	for(;;){
		tg_controller();
    1fe4:	0e 94 8c 3a 	call	0x7518	; 0x7518 <tg_controller>
    1fe8:	fd cf       	rjmp	.-6      	; 0x1fe4 <main+0x70>

00001fea <gc_init>:

/* 
 * gc_init() 
 */

void gc_init() {
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	91 e2       	ldi	r25, 0x21	; 33
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	70 e0       	ldi	r23, 0x00	; 0
    1ffa:	46 e5       	ldi	r20, 0x56	; 86
    1ffc:	50 e0       	ldi	r21, 0x00	; 0
    1ffe:	0e 94 4b 5c 	call	0xb896	; 0xb896 <memset>
  	gc.dwell_time = 0; 						// was 'p' 
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	a0 e0       	ldi	r26, 0x00	; 0
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	80 93 11 21 	sts	0x2111, r24
    200e:	90 93 12 21 	sts	0x2112, r25
    2012:	a0 93 13 21 	sts	0x2113, r26
    2016:	b0 93 14 21 	sts	0x2114, r27
	gc.radius = 0;							// radius value
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	a0 e0       	ldi	r26, 0x00	; 0
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	80 93 15 21 	sts	0x2115, r24
    2026:	90 93 16 21 	sts	0x2116, r25
    202a:	a0 93 17 21 	sts	0x2117, r26
    202e:	b0 93 18 21 	sts	0x2118, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    2032:	80 91 79 23 	lds	r24, 0x2379
    2036:	90 91 7a 23 	lds	r25, 0x237A
    203a:	a0 91 7b 23 	lds	r26, 0x237B
    203e:	b0 91 7c 23 	lds	r27, 0x237C
    2042:	80 93 19 21 	sts	0x2119, r24
    2046:	90 93 1a 21 	sts	0x211A, r25
    204a:	a0 93 1b 21 	sts	0x211B, r26
    204e:	b0 93 1c 21 	sts	0x211C, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    2052:	80 91 7d 23 	lds	r24, 0x237D
    2056:	90 91 7e 23 	lds	r25, 0x237E
    205a:	a0 91 7f 23 	lds	r26, 0x237F
    205e:	b0 91 80 23 	lds	r27, 0x2380
    2062:	80 93 1d 21 	sts	0x211D, r24
    2066:	90 93 1e 21 	sts	0x211E, r25
    206a:	a0 93 1f 21 	sts	0x211F, r26
    206e:	b0 93 20 21 	sts	0x2120, r27

	gc.absolute_mode = TRUE;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	80 93 0e 21 	sts	0x210E, r24
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	a0 e8       	ldi	r26, 0x80	; 128
    207e:	bf eb       	ldi	r27, 0xBF	; 191
    2080:	80 93 25 21 	sts	0x2125, r24
    2084:	90 93 26 21 	sts	0x2126, r25
    2088:	a0 93 27 21 	sts	0x2127, r26
    208c:	b0 93 28 21 	sts	0x2128, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    2090:	10 92 0f 21 	sts	0x210F, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    2094:	10 92 54 21 	sts	0x2154, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    2098:	10 92 55 21 	sts	0x2155, r1

	select_plane(X, Y, Z);
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	61 e0       	ldi	r22, 0x01	; 1
    20a0:	42 e0       	ldi	r20, 0x02	; 2
    20a2:	0e 94 df 10 	call	0x21be	; 0x21be <select_plane>
}
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <gc_gcode_parser+0x6>
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	89 83       	std	Y+1, r24	; 0x01
    20b8:	9a 83       	std	Y+2, r25	; 0x02
	_gc_normalize_gcode_block(block);
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	9a 81       	ldd	r25, Y+2	; 0x02
    20be:	0e 94 87 10 	call	0x210e	; 0x210e <_gc_normalize_gcode_block>
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    20c2:	e9 81       	ldd	r30, Y+1	; 0x01
    20c4:	fa 81       	ldd	r31, Y+2	; 0x02
    20c6:	80 81       	ld	r24, Z
    20c8:	88 32       	cpi	r24, 0x28	; 40
    20ca:	11 f4       	brne	.+4      	; 0x20d0 <gc_gcode_parser+0x24>
		return(TG_OK);
    20cc:	1b 82       	std	Y+3, r1	; 0x03
    20ce:	18 c0       	rjmp	.+48     	; 0x2100 <gc_gcode_parser+0x54>
	}
	if (block[0] == 'Q') { 					// quit
    20d0:	e9 81       	ldd	r30, Y+1	; 0x01
    20d2:	fa 81       	ldd	r31, Y+2	; 0x02
    20d4:	80 81       	ld	r24, Z
    20d6:	81 35       	cpi	r24, 0x51	; 81
    20d8:	19 f4       	brne	.+6      	; 0x20e0 <gc_gcode_parser+0x34>
		return(TG_QUIT);
    20da:	83 e0       	ldi	r24, 0x03	; 3
    20dc:	8b 83       	std	Y+3, r24	; 0x03
    20de:	10 c0       	rjmp	.+32     	; 0x2100 <gc_gcode_parser+0x54>
	} 
	if (block[0] == '/') { 					// ignore block delete
    20e0:	e9 81       	ldd	r30, Y+1	; 0x01
    20e2:	fa 81       	ldd	r31, Y+2	; 0x02
    20e4:	80 81       	ld	r24, Z
    20e6:	8f 32       	cpi	r24, 0x2F	; 47
    20e8:	11 f4       	brne	.+4      	; 0x20ee <gc_gcode_parser+0x42>
		return(TG_OK);
    20ea:	1b 82       	std	Y+3, r1	; 0x03
    20ec:	09 c0       	rjmp	.+18     	; 0x2100 <gc_gcode_parser+0x54>
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	9a 81       	ldd	r25, Y+2	; 0x02
    20f2:	0e 94 76 12 	call	0x24ec	; 0x24ec <gc_execute_block>
    20f6:	80 93 00 21 	sts	0x2100, r24
#ifdef __ECHO
	_gc_print_status(gc.status, block);
#endif
	return (gc.status);
    20fa:	80 91 00 21 	lds	r24, 0x2100
    20fe:	8b 83       	std	Y+3, r24	; 0x03
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2102:	23 96       	adiw	r28, 0x03	; 3
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <_gc_normalize_gcode_block>:

/*
 * _gc_normalize_gcode_block() - normalize a block (line) of gcode in place
 */

char *_gc_normalize_gcode_block(char *block) {
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	00 d0       	rcall	.+0      	; 0x2114 <_gc_normalize_gcode_block+0x6>
    2114:	00 d0       	rcall	.+0      	; 0x2116 <_gc_normalize_gcode_block+0x8>
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	8c 83       	std	Y+4, r24	; 0x04
    211c:	9d 83       	std	Y+5, r25	; 0x05

	char c;
	uint8_t i = 0; 		// index for incoming characters
    211e:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t j = 0;		// index for normalized characters
    2120:	19 82       	std	Y+1, r1	; 0x01
    2122:	25 c0       	rjmp	.+74     	; 0x216e <_gc_normalize_gcode_block+0x60>

	while ((c = block[i++]) != NUL) {
		if (c <= ' ' ) {					// throw away WS & ctrl chars
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	81 32       	cpi	r24, 0x21	; 33
    2128:	10 f1       	brcs	.+68     	; 0x216e <_gc_normalize_gcode_block+0x60>
			continue;
		} else if (c >= 'a' && c <= 'z') {	// convert lower to upper
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	81 36       	cpi	r24, 0x61	; 97
    212e:	90 f0       	brcs	.+36     	; 0x2154 <_gc_normalize_gcode_block+0x46>
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	8b 37       	cpi	r24, 0x7B	; 123
    2134:	78 f4       	brcc	.+30     	; 0x2154 <_gc_normalize_gcode_block+0x46>
			block[j++] = c-'a'+'A';
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	8c 81       	ldd	r24, Y+4	; 0x04
    213e:	9d 81       	ldd	r25, Y+5	; 0x05
    2140:	fc 01       	movw	r30, r24
    2142:	e2 0f       	add	r30, r18
    2144:	f3 1f       	adc	r31, r19
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	80 52       	subi	r24, 0x20	; 32
    214a:	80 83       	st	Z, r24
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	8f 5f       	subi	r24, 0xFF	; 255
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	0d c0       	rjmp	.+26     	; 0x216e <_gc_normalize_gcode_block+0x60>
		} else {
			block[j++] = c;
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	8c 81       	ldd	r24, Y+4	; 0x04
    215c:	9d 81       	ldd	r25, Y+5	; 0x05
    215e:	fc 01       	movw	r30, r24
    2160:	e2 0f       	add	r30, r18
    2162:	f3 1f       	adc	r31, r19
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	80 83       	st	Z, r24
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	8f 5f       	subi	r24, 0xFF	; 255
    216c:	89 83       	std	Y+1, r24	; 0x01

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	8c 81       	ldd	r24, Y+4	; 0x04
    2176:	9d 81       	ldd	r25, Y+5	; 0x05
    2178:	fc 01       	movw	r30, r24
    217a:	e2 0f       	add	r30, r18
    217c:	f3 1f       	adc	r31, r19
    217e:	80 81       	ld	r24, Z
    2180:	8b 83       	std	Y+3, r24	; 0x03
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	8e 83       	std	Y+6, r24	; 0x06
    2186:	8e 81       	ldd	r24, Y+6	; 0x06
    2188:	88 23       	and	r24, r24
    218a:	11 f0       	breq	.+4      	; 0x2190 <_gc_normalize_gcode_block+0x82>
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	8e 83       	std	Y+6, r24	; 0x06
    2190:	8e 81       	ldd	r24, Y+6	; 0x06
    2192:	9a 81       	ldd	r25, Y+2	; 0x02
    2194:	9f 5f       	subi	r25, 0xFF	; 255
    2196:	9a 83       	std	Y+2, r25	; 0x02
    2198:	88 23       	and	r24, r24
    219a:	21 f6       	brne	.-120    	; 0x2124 <_gc_normalize_gcode_block+0x16>
			block[j++] = c-'a'+'A';
		} else {
			block[j++] = c;
		}
	}
	block[j] = 0;
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	28 2f       	mov	r18, r24
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	8c 81       	ldd	r24, Y+4	; 0x04
    21a4:	9d 81       	ldd	r25, Y+5	; 0x05
    21a6:	fc 01       	movw	r30, r24
    21a8:	e2 0f       	add	r30, r18
    21aa:	f3 1f       	adc	r31, r19
    21ac:	10 82       	st	Z, r1
	return block;
    21ae:	8c 81       	ldd	r24, Y+4	; 0x04
    21b0:	9d 81       	ldd	r25, Y+5	; 0x05
}
    21b2:	26 96       	adiw	r28, 0x06	; 6
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <select_plane>:
/* 
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	00 d0       	rcall	.+0      	; 0x21c4 <select_plane+0x6>
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	89 83       	std	Y+1, r24	; 0x01
    21ca:	6a 83       	std	Y+2, r22	; 0x02
    21cc:	4b 83       	std	Y+3, r20	; 0x03
	gc.plane_axis_0 = axis_0;
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	80 93 4d 21 	sts	0x214D, r24
	gc.plane_axis_1 = axis_1;
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	80 93 4e 21 	sts	0x214E, r24
	gc.plane_axis_2 = axis_2;
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	80 93 4f 21 	sts	0x214F, r24
}
    21e0:	23 96       	adiw	r28, 0x03	; 3
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	de bf       	out	0x3e, r29	; 62
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	28 97       	sbiw	r28, 0x08	; 8
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	69 83       	std	Y+1, r22	; 0x01
    21fc:	7a 83       	std	Y+2, r23	; 0x02
    21fe:	8b 83       	std	Y+3, r24	; 0x03
    2200:	9c 83       	std	Y+4, r25	; 0x04
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    2202:	80 91 0d 21 	lds	r24, 0x210D
    2206:	88 23       	and	r24, r24
    2208:	89 f0       	breq	.+34     	; 0x222c <to_millimeters+0x40>
    220a:	69 81       	ldd	r22, Y+1	; 0x01
    220c:	7a 81       	ldd	r23, Y+2	; 0x02
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	9c 81       	ldd	r25, Y+4	; 0x04
    2212:	25 e8       	ldi	r18, 0x85	; 133
    2214:	32 e4       	ldi	r19, 0x42	; 66
    2216:	41 e2       	ldi	r20, 0x21	; 33
    2218:	5d e3       	ldi	r21, 0x3D	; 61
    221a:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	8d 83       	std	Y+5, r24	; 0x05
    2224:	9e 83       	std	Y+6, r25	; 0x06
    2226:	af 83       	std	Y+7, r26	; 0x07
    2228:	b8 87       	std	Y+8, r27	; 0x08
    222a:	08 c0       	rjmp	.+16     	; 0x223c <to_millimeters+0x50>
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	9a 81       	ldd	r25, Y+2	; 0x02
    2230:	ab 81       	ldd	r26, Y+3	; 0x03
    2232:	bc 81       	ldd	r27, Y+4	; 0x04
    2234:	8d 83       	std	Y+5, r24	; 0x05
    2236:	9e 83       	std	Y+6, r25	; 0x06
    2238:	af 83       	std	Y+7, r26	; 0x07
    223a:	b8 87       	std	Y+8, r27	; 0x08
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	9e 81       	ldd	r25, Y+6	; 0x06
    2240:	af 81       	ldd	r26, Y+7	; 0x07
    2242:	b8 85       	ldd	r27, Y+8	; 0x08
}
    2244:	bc 01       	movw	r22, r24
    2246:	cd 01       	movw	r24, r26
    2248:	28 96       	adiw	r28, 0x08	; 8
    224a:	cd bf       	out	0x3d, r28	; 61
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	60 97       	sbiw	r28, 0x10	; 16
    225e:	cd bf       	out	0x3d, r28	; 61
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	6d 83       	std	Y+5, r22	; 0x05
    2264:	7e 83       	std	Y+6, r23	; 0x06
    2266:	8f 83       	std	Y+7, r24	; 0x07
    2268:	98 87       	std	Y+8, r25	; 0x08
    226a:	29 87       	std	Y+9, r18	; 0x09
    226c:	3a 87       	std	Y+10, r19	; 0x0a
    226e:	4b 87       	std	Y+11, r20	; 0x0b
    2270:	5c 87       	std	Y+12, r21	; 0x0c
	double theta = atan(x/fabs(y));
    2272:	89 85       	ldd	r24, Y+9	; 0x09
    2274:	9a 85       	ldd	r25, Y+10	; 0x0a
    2276:	ab 85       	ldd	r26, Y+11	; 0x0b
    2278:	bc 85       	ldd	r27, Y+12	; 0x0c
    227a:	9c 01       	movw	r18, r24
    227c:	ad 01       	movw	r20, r26
    227e:	5f 77       	andi	r21, 0x7F	; 127
    2280:	6d 81       	ldd	r22, Y+5	; 0x05
    2282:	7e 81       	ldd	r23, Y+6	; 0x06
    2284:	8f 81       	ldd	r24, Y+7	; 0x07
    2286:	98 85       	ldd	r25, Y+8	; 0x08
    2288:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	bc 01       	movw	r22, r24
    2292:	cd 01       	movw	r24, r26
    2294:	0e 94 6d 55 	call	0xaada	; 0xaada <atan>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	9a 83       	std	Y+2, r25	; 0x02
    22a0:	ab 83       	std	Y+3, r26	; 0x03
    22a2:	bc 83       	std	Y+4, r27	; 0x04

	if (y>0) {
    22a4:	69 85       	ldd	r22, Y+9	; 0x09
    22a6:	7a 85       	ldd	r23, Y+10	; 0x0a
    22a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    22aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	0e 94 98 57 	call	0xaf30	; 0xaf30 <__gesf2>
    22b8:	18 16       	cp	r1, r24
    22ba:	4c f4       	brge	.+18     	; 0x22ce <theta+0x7a>
		return(theta);
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	9a 81       	ldd	r25, Y+2	; 0x02
    22c0:	ab 81       	ldd	r26, Y+3	; 0x03
    22c2:	bc 81       	ldd	r27, Y+4	; 0x04
    22c4:	8d 87       	std	Y+13, r24	; 0x0d
    22c6:	9e 87       	std	Y+14, r25	; 0x0e
    22c8:	af 87       	std	Y+15, r26	; 0x0f
    22ca:	b8 8b       	std	Y+16, r27	; 0x10
    22cc:	2d c0       	rjmp	.+90     	; 0x2328 <theta+0xd4>
	} else {
		if (theta>0) 
    22ce:	69 81       	ldd	r22, Y+1	; 0x01
    22d0:	7a 81       	ldd	r23, Y+2	; 0x02
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	9c 81       	ldd	r25, Y+4	; 0x04
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e0       	ldi	r20, 0x00	; 0
    22dc:	50 e0       	ldi	r21, 0x00	; 0
    22de:	0e 94 98 57 	call	0xaf30	; 0xaf30 <__gesf2>
    22e2:	18 16       	cp	r1, r24
    22e4:	8c f4       	brge	.+34     	; 0x2308 <theta+0xb4>
	    {
			return(M_PI-theta);
    22e6:	6b ed       	ldi	r22, 0xDB	; 219
    22e8:	7f e0       	ldi	r23, 0x0F	; 15
    22ea:	89 e4       	ldi	r24, 0x49	; 73
    22ec:	90 e4       	ldi	r25, 0x40	; 64
    22ee:	29 81       	ldd	r18, Y+1	; 0x01
    22f0:	3a 81       	ldd	r19, Y+2	; 0x02
    22f2:	4b 81       	ldd	r20, Y+3	; 0x03
    22f4:	5c 81       	ldd	r21, Y+4	; 0x04
    22f6:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	8d 87       	std	Y+13, r24	; 0x0d
    2300:	9e 87       	std	Y+14, r25	; 0x0e
    2302:	af 87       	std	Y+15, r26	; 0x0f
    2304:	b8 8b       	std	Y+16, r27	; 0x10
    2306:	10 c0       	rjmp	.+32     	; 0x2328 <theta+0xd4>
    	} else {
			return(-M_PI-theta);
    2308:	6b ed       	ldi	r22, 0xDB	; 219
    230a:	7f e0       	ldi	r23, 0x0F	; 15
    230c:	89 e4       	ldi	r24, 0x49	; 73
    230e:	90 ec       	ldi	r25, 0xC0	; 192
    2310:	29 81       	ldd	r18, Y+1	; 0x01
    2312:	3a 81       	ldd	r19, Y+2	; 0x02
    2314:	4b 81       	ldd	r20, Y+3	; 0x03
    2316:	5c 81       	ldd	r21, Y+4	; 0x04
    2318:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	8d 87       	std	Y+13, r24	; 0x0d
    2322:	9e 87       	std	Y+14, r25	; 0x0e
    2324:	af 87       	std	Y+15, r26	; 0x0f
    2326:	b8 8b       	std	Y+16, r27	; 0x10
    2328:	8d 85       	ldd	r24, Y+13	; 0x0d
    232a:	9e 85       	ldd	r25, Y+14	; 0x0e
    232c:	af 85       	ldd	r26, Y+15	; 0x0f
    232e:	b8 89       	ldd	r27, Y+16	; 0x10
		}
	}
}
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	60 96       	adiw	r28, 0x10	; 16
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    2340:	ef 92       	push	r14
    2342:	ff 92       	push	r15
    2344:	0f 93       	push	r16
    2346:	1f 93       	push	r17
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	2c 97       	sbiw	r28, 0x0c	; 12
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	9a 83       	std	Y+2, r25	; 0x02
    235a:	6b 83       	std	Y+3, r22	; 0x03
    235c:	7c 83       	std	Y+4, r23	; 0x04
    235e:	4d 83       	std	Y+5, r20	; 0x05
    2360:	5e 83       	std	Y+6, r21	; 0x06
    2362:	2f 83       	std	Y+7, r18	; 0x07
    2364:	38 87       	std	Y+8, r19	; 0x08
    2366:	09 87       	std	Y+9, r16	; 0x09
    2368:	1a 87       	std	Y+10, r17	; 0x0a
	if (buf[*i] == 0) {
    236a:	e9 85       	ldd	r30, Y+9	; 0x09
    236c:	fa 85       	ldd	r31, Y+10	; 0x0a
    236e:	80 81       	ld	r24, Z
    2370:	91 81       	ldd	r25, Z+1	; 0x01
    2372:	9c 01       	movw	r18, r24
    2374:	8f 81       	ldd	r24, Y+7	; 0x07
    2376:	98 85       	ldd	r25, Y+8	; 0x08
    2378:	fc 01       	movw	r30, r24
    237a:	e2 0f       	add	r30, r18
    237c:	f3 1f       	adc	r31, r19
    237e:	80 81       	ld	r24, Z
    2380:	88 23       	and	r24, r24
    2382:	19 f4       	brne	.+6      	; 0x238a <_gc_next_statement+0x4a>
		return(FALSE); // No more statements
    2384:	1b 86       	std	Y+11, r1	; 0x0b
    2386:	1c 86       	std	Y+12, r1	; 0x0c
    2388:	57 c0       	rjmp	.+174    	; 0x2438 <_gc_next_statement+0xf8>
	}
  
	*letter = buf[*i];
    238a:	e9 85       	ldd	r30, Y+9	; 0x09
    238c:	fa 85       	ldd	r31, Y+10	; 0x0a
    238e:	80 81       	ld	r24, Z
    2390:	91 81       	ldd	r25, Z+1	; 0x01
    2392:	9c 01       	movw	r18, r24
    2394:	8f 81       	ldd	r24, Y+7	; 0x07
    2396:	98 85       	ldd	r25, Y+8	; 0x08
    2398:	fc 01       	movw	r30, r24
    239a:	e2 0f       	add	r30, r18
    239c:	f3 1f       	adc	r31, r19
    239e:	80 81       	ld	r24, Z
    23a0:	e9 81       	ldd	r30, Y+1	; 0x01
    23a2:	fa 81       	ldd	r31, Y+2	; 0x02
    23a4:	80 83       	st	Z, r24
	if((*letter < 'A') || (*letter > 'Z')) {
    23a6:	e9 81       	ldd	r30, Y+1	; 0x01
    23a8:	fa 81       	ldd	r31, Y+2	; 0x02
    23aa:	80 81       	ld	r24, Z
    23ac:	81 34       	cpi	r24, 0x41	; 65
    23ae:	28 f0       	brcs	.+10     	; 0x23ba <_gc_next_statement+0x7a>
    23b0:	e9 81       	ldd	r30, Y+1	; 0x01
    23b2:	fa 81       	ldd	r31, Y+2	; 0x02
    23b4:	80 81       	ld	r24, Z
    23b6:	8b 35       	cpi	r24, 0x5B	; 91
    23b8:	30 f0       	brcs	.+12     	; 0x23c6 <_gc_next_statement+0x86>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    23ba:	8a e0       	ldi	r24, 0x0A	; 10
    23bc:	80 93 00 21 	sts	0x2100, r24
		return(FALSE);
    23c0:	1b 86       	std	Y+11, r1	; 0x0b
    23c2:	1c 86       	std	Y+12, r1	; 0x0c
    23c4:	39 c0       	rjmp	.+114    	; 0x2438 <_gc_next_statement+0xf8>
	}
	(*i)++;
    23c6:	e9 85       	ldd	r30, Y+9	; 0x09
    23c8:	fa 85       	ldd	r31, Y+10	; 0x0a
    23ca:	80 81       	ld	r24, Z
    23cc:	91 81       	ldd	r25, Z+1	; 0x01
    23ce:	01 96       	adiw	r24, 0x01	; 1
    23d0:	e9 85       	ldd	r30, Y+9	; 0x09
    23d2:	fa 85       	ldd	r31, Y+10	; 0x0a
    23d4:	80 83       	st	Z, r24
    23d6:	91 83       	std	Z+1, r25	; 0x01
	if (!_gc_read_double(buf, i, value_ptr)) {
    23d8:	8f 81       	ldd	r24, Y+7	; 0x07
    23da:	98 85       	ldd	r25, Y+8	; 0x08
    23dc:	29 85       	ldd	r18, Y+9	; 0x09
    23de:	3a 85       	ldd	r19, Y+10	; 0x0a
    23e0:	4b 81       	ldd	r20, Y+3	; 0x03
    23e2:	5c 81       	ldd	r21, Y+4	; 0x04
    23e4:	b9 01       	movw	r22, r18
    23e6:	0e 94 28 12 	call	0x2450	; 0x2450 <_gc_read_double>
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	19 f4       	brne	.+6      	; 0x23f4 <_gc_next_statement+0xb4>
		return(FALSE);
    23ee:	1b 86       	std	Y+11, r1	; 0x0b
    23f0:	1c 86       	std	Y+12, r1	; 0x0c
    23f2:	22 c0       	rjmp	.+68     	; 0x2438 <_gc_next_statement+0xf8>
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    23f4:	eb 81       	ldd	r30, Y+3	; 0x03
    23f6:	fc 81       	ldd	r31, Y+4	; 0x04
    23f8:	e0 80       	ld	r14, Z
    23fa:	f1 80       	ldd	r15, Z+1	; 0x01
    23fc:	02 81       	ldd	r16, Z+2	; 0x02
    23fe:	13 81       	ldd	r17, Z+3	; 0x03
    2400:	eb 81       	ldd	r30, Y+3	; 0x03
    2402:	fc 81       	ldd	r31, Y+4	; 0x04
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	a2 81       	ldd	r26, Z+2	; 0x02
    240a:	b3 81       	ldd	r27, Z+3	; 0x03
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	0e 94 18 59 	call	0xb230	; 0xb230 <trunc>
    2414:	9b 01       	movw	r18, r22
    2416:	ac 01       	movw	r20, r24
    2418:	c8 01       	movw	r24, r16
    241a:	b7 01       	movw	r22, r14
    241c:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	ed 81       	ldd	r30, Y+5	; 0x05
    2426:	fe 81       	ldd	r31, Y+6	; 0x06
    2428:	80 83       	st	Z, r24
    242a:	91 83       	std	Z+1, r25	; 0x01
    242c:	a2 83       	std	Z+2, r26	; 0x02
    242e:	b3 83       	std	Z+3, r27	; 0x03
	return(TRUE);
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	8b 87       	std	Y+11, r24	; 0x0b
    2436:	9c 87       	std	Y+12, r25	; 0x0c
    2438:	8b 85       	ldd	r24, Y+11	; 0x0b
    243a:	9c 85       	ldd	r25, Y+12	; 0x0c
}
    243c:	2c 96       	adiw	r28, 0x0c	; 12
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	1f 91       	pop	r17
    2448:	0f 91       	pop	r16
    244a:	ff 90       	pop	r15
    244c:	ef 90       	pop	r14
    244e:	08 95       	ret

00002450 <_gc_read_double>:
 *	i			index into string array (position on the line)
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	2c 97       	sbiw	r28, 0x0c	; 12
    245a:	cd bf       	out	0x3d, r28	; 61
    245c:	de bf       	out	0x3e, r29	; 62
    245e:	8d 83       	std	Y+5, r24	; 0x05
    2460:	9e 83       	std	Y+6, r25	; 0x06
    2462:	6f 83       	std	Y+7, r22	; 0x07
    2464:	78 87       	std	Y+8, r23	; 0x08
    2466:	49 87       	std	Y+9, r20	; 0x09
    2468:	5a 87       	std	Y+10, r21	; 0x0a
	char *start = buf + *i;
    246a:	ef 81       	ldd	r30, Y+7	; 0x07
    246c:	f8 85       	ldd	r31, Y+8	; 0x08
    246e:	80 81       	ld	r24, Z
    2470:	91 81       	ldd	r25, Z+1	; 0x01
    2472:	9c 01       	movw	r18, r24
    2474:	8d 81       	ldd	r24, Y+5	; 0x05
    2476:	9e 81       	ldd	r25, Y+6	; 0x06
    2478:	82 0f       	add	r24, r18
    247a:	93 1f       	adc	r25, r19
    247c:	89 83       	std	Y+1, r24	; 0x01
    247e:	9a 83       	std	Y+2, r25	; 0x02
	char *end;
  
	*double_ptr = strtod(start, &end);
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	9a 81       	ldd	r25, Y+2	; 0x02
    2484:	9e 01       	movw	r18, r28
    2486:	2d 5f       	subi	r18, 0xFD	; 253
    2488:	3f 4f       	sbci	r19, 0xFF	; 255
    248a:	b9 01       	movw	r22, r18
    248c:	0e 94 b3 59 	call	0xb366	; 0xb366 <strtod>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	e9 85       	ldd	r30, Y+9	; 0x09
    2496:	fa 85       	ldd	r31, Y+10	; 0x0a
    2498:	80 83       	st	Z, r24
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	a2 83       	std	Z+2, r26	; 0x02
    249e:	b3 83       	std	Z+3, r27	; 0x03
	if(end == start) { 
    24a0:	2b 81       	ldd	r18, Y+3	; 0x03
    24a2:	3c 81       	ldd	r19, Y+4	; 0x04
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	9a 81       	ldd	r25, Y+2	; 0x02
    24a8:	28 17       	cp	r18, r24
    24aa:	39 07       	cpc	r19, r25
    24ac:	31 f4       	brne	.+12     	; 0x24ba <_gc_read_double+0x6a>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    24ae:	8d e0       	ldi	r24, 0x0D	; 13
    24b0:	80 93 00 21 	sts	0x2100, r24
		return(FALSE); 
    24b4:	1b 86       	std	Y+11, r1	; 0x0b
    24b6:	1c 86       	std	Y+12, r1	; 0x0c
    24b8:	11 c0       	rjmp	.+34     	; 0x24dc <_gc_read_double+0x8c>
	};
	*i = end - buf;
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	9c 81       	ldd	r25, Y+4	; 0x04
    24be:	9c 01       	movw	r18, r24
    24c0:	8d 81       	ldd	r24, Y+5	; 0x05
    24c2:	9e 81       	ldd	r25, Y+6	; 0x06
    24c4:	a9 01       	movw	r20, r18
    24c6:	48 1b       	sub	r20, r24
    24c8:	59 0b       	sbc	r21, r25
    24ca:	ca 01       	movw	r24, r20
    24cc:	ef 81       	ldd	r30, Y+7	; 0x07
    24ce:	f8 85       	ldd	r31, Y+8	; 0x08
    24d0:	80 83       	st	Z, r24
    24d2:	91 83       	std	Z+1, r25	; 0x01
	return(TRUE);
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	8b 87       	std	Y+11, r24	; 0x0b
    24da:	9c 87       	std	Y+12, r25	; 0x0c
    24dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    24de:	9c 85       	ldd	r25, Y+12	; 0x0c
}
    24e0:	2c 96       	adiw	r28, 0x0c	; 12
    24e2:	cd bf       	out	0x3d, r28	; 61
    24e4:	de bf       	out	0x3e, r29	; 62
    24e6:	cf 91       	pop	r28
    24e8:	df 91       	pop	r29
    24ea:	08 95       	ret

000024ec <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    24ec:	8f 92       	push	r8
    24ee:	9f 92       	push	r9
    24f0:	af 92       	push	r10
    24f2:	bf 92       	push	r11
    24f4:	cf 92       	push	r12
    24f6:	df 92       	push	r13
    24f8:	ef 92       	push	r14
    24fa:	ff 92       	push	r15
    24fc:	0f 93       	push	r16
    24fe:	1f 93       	push	r17
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	a1 97       	sbiw	r28, 0x21	; 33
    250a:	cd bf       	out	0x3d, r28	; 61
    250c:	de bf       	out	0x3e, r29	; 62
    250e:	8b 83       	std	Y+3, r24	; 0x03
    2510:	9c 83       	std	Y+4, r25	; 0x04
	int i = 0;  				// index into Gcode block buffer (buf)
    2512:	19 82       	std	Y+1, r1	; 0x01
    2514:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    2516:	85 e3       	ldi	r24, 0x35	; 53
    2518:	91 e2       	ldi	r25, 0x21	; 33
    251a:	60 e0       	ldi	r22, 0x00	; 0
    251c:	70 e0       	ldi	r23, 0x00	; 0
    251e:	4c e0       	ldi	r20, 0x0C	; 12
    2520:	50 e0       	ldi	r21, 0x00	; 0
    2522:	0e 94 4b 5c 	call	0xb896	; 0xb896 <memset>
	clear_vector(gc.offset);
    2526:	81 e4       	ldi	r24, 0x41	; 65
    2528:	91 e2       	ldi	r25, 0x21	; 33
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	70 e0       	ldi	r23, 0x00	; 0
    252e:	4c e0       	ldi	r20, 0x0C	; 12
    2530:	50 e0       	ldi	r21, 0x00	; 0
    2532:	0e 94 4b 5c 	call	0xb896	; 0xb896 <memset>

	gc.status = TG_OK;
    2536:	10 92 00 21 	sts	0x2100, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    253a:	10 92 10 21 	sts	0x2110, r1
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set
    253e:	10 92 55 21 	sts	0x2155, r1
    2542:	87 c1       	rjmp	.+782    	; 0x2852 <gc_execute_block+0x366>

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    2544:	80 91 01 21 	lds	r24, 0x2101
    2548:	28 2f       	mov	r18, r24
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	28 a3       	std	Y+32, r18	; 0x20
    254e:	39 a3       	std	Y+33, r19	; 0x21
    2550:	88 a1       	ldd	r24, Y+32	; 0x20
    2552:	99 a1       	ldd	r25, Y+33	; 0x21
    2554:	8d 34       	cpi	r24, 0x4D	; 77
    2556:	91 05       	cpc	r25, r1
    2558:	09 f4       	brne	.+2      	; 0x255c <gc_execute_block+0x70>
    255a:	11 c1       	rjmp	.+546    	; 0x277e <gc_execute_block+0x292>
    255c:	a8 a1       	ldd	r26, Y+32	; 0x20
    255e:	b9 a1       	ldd	r27, Y+33	; 0x21
    2560:	a4 35       	cpi	r26, 0x54	; 84
    2562:	b1 05       	cpc	r27, r1
    2564:	09 f4       	brne	.+2      	; 0x2568 <gc_execute_block+0x7c>
    2566:	5b c1       	rjmp	.+694    	; 0x281e <gc_execute_block+0x332>
    2568:	28 a1       	ldd	r18, Y+32	; 0x20
    256a:	39 a1       	ldd	r19, Y+33	; 0x21
    256c:	27 34       	cpi	r18, 0x47	; 71
    256e:	31 05       	cpc	r19, r1
    2570:	09 f0       	breq	.+2      	; 0x2574 <gc_execute_block+0x88>
    2572:	6b c1       	rjmp	.+726    	; 0x284a <gc_execute_block+0x35e>
			case 'G':
				switch((int)gc.value) {
    2574:	80 91 02 21 	lds	r24, 0x2102
    2578:	90 91 03 21 	lds	r25, 0x2103
    257c:	a0 91 04 21 	lds	r26, 0x2104
    2580:	b0 91 05 21 	lds	r27, 0x2105
    2584:	bc 01       	movw	r22, r24
    2586:	cd 01       	movw	r24, r26
    2588:	0e 94 17 56 	call	0xac2e	; 0xac2e <__fixsfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	8e 8f       	std	Y+30, r24	; 0x1e
    2592:	9f 8f       	std	Y+31, r25	; 0x1f
    2594:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2596:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2598:	85 31       	cpi	r24, 0x15	; 21
    259a:	91 05       	cpc	r25, r1
    259c:	09 f4       	brne	.+2      	; 0x25a0 <gc_execute_block+0xb4>
    259e:	c6 c0       	rjmp	.+396    	; 0x272c <gc_execute_block+0x240>
    25a0:	ae 8d       	ldd	r26, Y+30	; 0x1e
    25a2:	bf 8d       	ldd	r27, Y+31	; 0x1f
    25a4:	a6 31       	cpi	r26, 0x16	; 22
    25a6:	b1 05       	cpc	r27, r1
    25a8:	0c f0       	brlt	.+2      	; 0x25ac <gc_execute_block+0xc0>
    25aa:	48 c0       	rjmp	.+144    	; 0x263c <gc_execute_block+0x150>
    25ac:	2e 8d       	ldd	r18, Y+30	; 0x1e
    25ae:	3f 8d       	ldd	r19, Y+31	; 0x1f
    25b0:	24 30       	cpi	r18, 0x04	; 4
    25b2:	31 05       	cpc	r19, r1
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <gc_execute_block+0xcc>
    25b6:	a0 c0       	rjmp	.+320    	; 0x26f8 <gc_execute_block+0x20c>
    25b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25bc:	85 30       	cpi	r24, 0x05	; 5
    25be:	91 05       	cpc	r25, r1
    25c0:	f4 f4       	brge	.+60     	; 0x25fe <gc_execute_block+0x112>
    25c2:	ae 8d       	ldd	r26, Y+30	; 0x1e
    25c4:	bf 8d       	ldd	r27, Y+31	; 0x1f
    25c6:	a1 30       	cpi	r26, 0x01	; 1
    25c8:	b1 05       	cpc	r27, r1
    25ca:	09 f4       	brne	.+2      	; 0x25ce <gc_execute_block+0xe2>
    25cc:	80 c0       	rjmp	.+256    	; 0x26ce <gc_execute_block+0x1e2>
    25ce:	2e 8d       	ldd	r18, Y+30	; 0x1e
    25d0:	3f 8d       	ldd	r19, Y+31	; 0x1f
    25d2:	22 30       	cpi	r18, 0x02	; 2
    25d4:	31 05       	cpc	r19, r1
    25d6:	34 f4       	brge	.+12     	; 0x25e4 <gc_execute_block+0xf8>
    25d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25da:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	09 f4       	brne	.+2      	; 0x25e2 <gc_execute_block+0xf6>
    25e0:	70 c0       	rjmp	.+224    	; 0x26c2 <gc_execute_block+0x1d6>
    25e2:	c9 c0       	rjmp	.+402    	; 0x2776 <gc_execute_block+0x28a>
    25e4:	ae 8d       	ldd	r26, Y+30	; 0x1e
    25e6:	bf 8d       	ldd	r27, Y+31	; 0x1f
    25e8:	a2 30       	cpi	r26, 0x02	; 2
    25ea:	b1 05       	cpc	r27, r1
    25ec:	09 f4       	brne	.+2      	; 0x25f0 <gc_execute_block+0x104>
    25ee:	76 c0       	rjmp	.+236    	; 0x26dc <gc_execute_block+0x1f0>
    25f0:	2e 8d       	ldd	r18, Y+30	; 0x1e
    25f2:	3f 8d       	ldd	r19, Y+31	; 0x1f
    25f4:	23 30       	cpi	r18, 0x03	; 3
    25f6:	31 05       	cpc	r19, r1
    25f8:	09 f4       	brne	.+2      	; 0x25fc <gc_execute_block+0x110>
    25fa:	77 c0       	rjmp	.+238    	; 0x26ea <gc_execute_block+0x1fe>
    25fc:	bc c0       	rjmp	.+376    	; 0x2776 <gc_execute_block+0x28a>
    25fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2600:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2602:	82 31       	cpi	r24, 0x12	; 18
    2604:	91 05       	cpc	r25, r1
    2606:	09 f4       	brne	.+2      	; 0x260a <gc_execute_block+0x11e>
    2608:	81 c0       	rjmp	.+258    	; 0x270c <gc_execute_block+0x220>
    260a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    260c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    260e:	a3 31       	cpi	r26, 0x13	; 19
    2610:	b1 05       	cpc	r27, r1
    2612:	3c f4       	brge	.+14     	; 0x2622 <gc_execute_block+0x136>
    2614:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2616:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2618:	21 31       	cpi	r18, 0x11	; 17
    261a:	31 05       	cpc	r19, r1
    261c:	09 f4       	brne	.+2      	; 0x2620 <gc_execute_block+0x134>
    261e:	70 c0       	rjmp	.+224    	; 0x2700 <gc_execute_block+0x214>
    2620:	aa c0       	rjmp	.+340    	; 0x2776 <gc_execute_block+0x28a>
    2622:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2624:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2626:	83 31       	cpi	r24, 0x13	; 19
    2628:	91 05       	cpc	r25, r1
    262a:	09 f4       	brne	.+2      	; 0x262e <gc_execute_block+0x142>
    262c:	75 c0       	rjmp	.+234    	; 0x2718 <gc_execute_block+0x22c>
    262e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2630:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2632:	a4 31       	cpi	r26, 0x14	; 20
    2634:	b1 05       	cpc	r27, r1
    2636:	09 f4       	brne	.+2      	; 0x263a <gc_execute_block+0x14e>
    2638:	75 c0       	rjmp	.+234    	; 0x2724 <gc_execute_block+0x238>
    263a:	9d c0       	rjmp	.+314    	; 0x2776 <gc_execute_block+0x28a>
    263c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    263e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2640:	2a 35       	cpi	r18, 0x5A	; 90
    2642:	31 05       	cpc	r19, r1
    2644:	09 f4       	brne	.+2      	; 0x2648 <gc_execute_block+0x15c>
    2646:	85 c0       	rjmp	.+266    	; 0x2752 <gc_execute_block+0x266>
    2648:	8e 8d       	ldd	r24, Y+30	; 0x1e
    264a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    264c:	8b 35       	cpi	r24, 0x5B	; 91
    264e:	91 05       	cpc	r25, r1
    2650:	fc f4       	brge	.+62     	; 0x2690 <gc_execute_block+0x1a4>
    2652:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2654:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2656:	ae 31       	cpi	r26, 0x1E	; 30
    2658:	b1 05       	cpc	r27, r1
    265a:	09 f4       	brne	.+2      	; 0x265e <gc_execute_block+0x172>
    265c:	6e c0       	rjmp	.+220    	; 0x273a <gc_execute_block+0x24e>
    265e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2660:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2662:	2f 31       	cpi	r18, 0x1F	; 31
    2664:	31 05       	cpc	r19, r1
    2666:	3c f4       	brge	.+14     	; 0x2676 <gc_execute_block+0x18a>
    2668:	8e 8d       	ldd	r24, Y+30	; 0x1e
    266a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    266c:	8c 31       	cpi	r24, 0x1C	; 28
    266e:	91 05       	cpc	r25, r1
    2670:	09 f4       	brne	.+2      	; 0x2674 <gc_execute_block+0x188>
    2672:	5f c0       	rjmp	.+190    	; 0x2732 <gc_execute_block+0x246>
    2674:	80 c0       	rjmp	.+256    	; 0x2776 <gc_execute_block+0x28a>
    2676:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2678:	bf 8d       	ldd	r27, Y+31	; 0x1f
    267a:	a5 33       	cpi	r26, 0x35	; 53
    267c:	b1 05       	cpc	r27, r1
    267e:	09 f4       	brne	.+2      	; 0x2682 <gc_execute_block+0x196>
    2680:	60 c0       	rjmp	.+192    	; 0x2742 <gc_execute_block+0x256>
    2682:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2684:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2686:	20 35       	cpi	r18, 0x50	; 80
    2688:	31 05       	cpc	r19, r1
    268a:	09 f4       	brne	.+2      	; 0x268e <gc_execute_block+0x1a2>
    268c:	5e c0       	rjmp	.+188    	; 0x274a <gc_execute_block+0x25e>
    268e:	73 c0       	rjmp	.+230    	; 0x2776 <gc_execute_block+0x28a>
    2690:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2692:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2694:	8c 35       	cpi	r24, 0x5C	; 92
    2696:	91 05       	cpc	r25, r1
    2698:	09 f4       	brne	.+2      	; 0x269c <gc_execute_block+0x1b0>
    269a:	62 c0       	rjmp	.+196    	; 0x2760 <gc_execute_block+0x274>
    269c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    269e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    26a0:	ac 35       	cpi	r26, 0x5C	; 92
    26a2:	b1 05       	cpc	r27, r1
    26a4:	0c f4       	brge	.+2      	; 0x26a8 <gc_execute_block+0x1bc>
    26a6:	59 c0       	rjmp	.+178    	; 0x275a <gc_execute_block+0x26e>
    26a8:	2e 8d       	ldd	r18, Y+30	; 0x1e
    26aa:	3f 8d       	ldd	r19, Y+31	; 0x1f
    26ac:	2d 35       	cpi	r18, 0x5D	; 93
    26ae:	31 05       	cpc	r19, r1
    26b0:	09 f4       	brne	.+2      	; 0x26b4 <gc_execute_block+0x1c8>
    26b2:	5a c0       	rjmp	.+180    	; 0x2768 <gc_execute_block+0x27c>
    26b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26b8:	8e 35       	cpi	r24, 0x5E	; 94
    26ba:	91 05       	cpc	r25, r1
    26bc:	09 f4       	brne	.+2      	; 0x26c0 <gc_execute_block+0x1d4>
    26be:	58 c0       	rjmp	.+176    	; 0x2770 <gc_execute_block+0x284>
    26c0:	5a c0       	rjmp	.+180    	; 0x2776 <gc_execute_block+0x28a>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	80 93 55 21 	sts	0x2155, r24
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    26c8:	10 92 0b 21 	sts	0x210B, r1
    26cc:	be c0       	rjmp	.+380    	; 0x284a <gc_execute_block+0x35e>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	80 93 55 21 	sts	0x2155, r24
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	80 93 0b 21 	sts	0x210B, r24
    26da:	b7 c0       	rjmp	.+366    	; 0x284a <gc_execute_block+0x35e>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	80 93 55 21 	sts	0x2155, r24
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    26e2:	82 e0       	ldi	r24, 0x02	; 2
    26e4:	80 93 0b 21 	sts	0x210B, r24
    26e8:	b0 c0       	rjmp	.+352    	; 0x284a <gc_execute_block+0x35e>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	80 93 55 21 	sts	0x2155, r24
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    26f0:	83 e0       	ldi	r24, 0x03	; 3
    26f2:	80 93 0b 21 	sts	0x210B, r24
    26f6:	a9 c0       	rjmp	.+338    	; 0x284a <gc_execute_block+0x35e>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    26f8:	82 e0       	ldi	r24, 0x02	; 2
    26fa:	80 93 55 21 	sts	0x2155, r24
    26fe:	a5 c0       	rjmp	.+330    	; 0x284a <gc_execute_block+0x35e>

					case 17: { select_plane(X, Y, Z); break; }
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	61 e0       	ldi	r22, 0x01	; 1
    2704:	42 e0       	ldi	r20, 0x02	; 2
    2706:	0e 94 df 10 	call	0x21be	; 0x21be <select_plane>
    270a:	9f c0       	rjmp	.+318    	; 0x284a <gc_execute_block+0x35e>
					case 18: { select_plane(X, Z, Y); break; }
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	62 e0       	ldi	r22, 0x02	; 2
    2710:	41 e0       	ldi	r20, 0x01	; 1
    2712:	0e 94 df 10 	call	0x21be	; 0x21be <select_plane>
    2716:	99 c0       	rjmp	.+306    	; 0x284a <gc_execute_block+0x35e>
					case 19: { select_plane(Y, Z, X); break; }
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	62 e0       	ldi	r22, 0x02	; 2
    271c:	40 e0       	ldi	r20, 0x00	; 0
    271e:	0e 94 df 10 	call	0x21be	; 0x21be <select_plane>
    2722:	93 c0       	rjmp	.+294    	; 0x284a <gc_execute_block+0x35e>

					case 20: { gc.inches_mode = TRUE; break; }
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	80 93 0d 21 	sts	0x210D, r24
    272a:	8f c0       	rjmp	.+286    	; 0x284a <gc_execute_block+0x35e>
					case 21: { gc.inches_mode = FALSE; break; }
    272c:	10 92 0d 21 	sts	0x210D, r1
    2730:	8c c0       	rjmp	.+280    	; 0x284a <gc_execute_block+0x35e>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    2732:	83 e0       	ldi	r24, 0x03	; 3
    2734:	80 93 55 21 	sts	0x2155, r24
    2738:	88 c0       	rjmp	.+272    	; 0x284a <gc_execute_block+0x35e>
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    273a:	83 e0       	ldi	r24, 0x03	; 3
    273c:	80 93 55 21 	sts	0x2155, r24
    2740:	84 c0       	rjmp	.+264    	; 0x284a <gc_execute_block+0x35e>

					case 53: { gc.absolute_override = TRUE; break; }
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	80 93 54 21 	sts	0x2154, r24
    2748:	80 c0       	rjmp	.+256    	; 0x284a <gc_execute_block+0x35e>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    274a:	84 e0       	ldi	r24, 0x04	; 4
    274c:	80 93 0b 21 	sts	0x210B, r24
    2750:	7c c0       	rjmp	.+248    	; 0x284a <gc_execute_block+0x35e>
					case 90: { gc.absolute_mode = TRUE; break; }
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	80 93 0e 21 	sts	0x210E, r24
    2758:	78 c0       	rjmp	.+240    	; 0x284a <gc_execute_block+0x35e>
					case 91: { gc.absolute_mode = FALSE; break; }
    275a:	10 92 0e 21 	sts	0x210E, r1
    275e:	75 c0       	rjmp	.+234    	; 0x284a <gc_execute_block+0x35e>
					case 92: { gc.set_origin_mode = TRUE; break; }
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	80 93 10 21 	sts	0x2110, r24
    2766:	71 c0       	rjmp	.+226    	; 0x284a <gc_execute_block+0x35e>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	80 93 0c 21 	sts	0x210C, r24
    276e:	6d c0       	rjmp	.+218    	; 0x284a <gc_execute_block+0x35e>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    2770:	10 92 0c 21 	sts	0x210C, r1
    2774:	6a c0       	rjmp	.+212    	; 0x284a <gc_execute_block+0x35e>

					default: FAIL(TG_UNSUPPORTED_STATEMENT);
    2776:	8c e0       	ldi	r24, 0x0C	; 12
    2778:	80 93 00 21 	sts	0x2100, r24
    277c:	66 c0       	rjmp	.+204    	; 0x284a <gc_execute_block+0x35e>
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    277e:	80 91 02 21 	lds	r24, 0x2102
    2782:	90 91 03 21 	lds	r25, 0x2103
    2786:	a0 91 04 21 	lds	r26, 0x2104
    278a:	b0 91 05 21 	lds	r27, 0x2105
    278e:	bc 01       	movw	r22, r24
    2790:	cd 01       	movw	r24, r26
    2792:	0e 94 17 56 	call	0xac2e	; 0xac2e <__fixsfsi>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	8c 8f       	std	Y+28, r24	; 0x1c
    279c:	9d 8f       	std	Y+29, r25	; 0x1d
    279e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    27a0:	bd 8d       	ldd	r27, Y+29	; 0x1d
    27a2:	a3 30       	cpi	r26, 0x03	; 3
    27a4:	b1 05       	cpc	r27, r1
    27a6:	61 f1       	breq	.+88     	; 0x2800 <gc_execute_block+0x314>
    27a8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    27aa:	3d 8d       	ldd	r19, Y+29	; 0x1d
    27ac:	24 30       	cpi	r18, 0x04	; 4
    27ae:	31 05       	cpc	r19, r1
    27b0:	54 f4       	brge	.+20     	; 0x27c6 <gc_execute_block+0x2da>
    27b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27b4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27b6:	99 23       	and	r25, r25
    27b8:	74 f1       	brlt	.+92     	; 0x2816 <gc_execute_block+0x32a>
    27ba:	ac 8d       	ldd	r26, Y+28	; 0x1c
    27bc:	bd 8d       	ldd	r27, Y+29	; 0x1d
    27be:	a2 30       	cpi	r26, 0x02	; 2
    27c0:	b1 05       	cpc	r27, r1
    27c2:	b4 f0       	brlt	.+44     	; 0x27f0 <gc_execute_block+0x304>
    27c4:	19 c0       	rjmp	.+50     	; 0x27f8 <gc_execute_block+0x30c>
    27c6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    27c8:	3d 8d       	ldd	r19, Y+29	; 0x1d
    27ca:	25 30       	cpi	r18, 0x05	; 5
    27cc:	31 05       	cpc	r19, r1
    27ce:	01 f1       	breq	.+64     	; 0x2810 <gc_execute_block+0x324>
    27d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27d2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27d4:	85 30       	cpi	r24, 0x05	; 5
    27d6:	91 05       	cpc	r25, r1
    27d8:	bc f0       	brlt	.+46     	; 0x2808 <gc_execute_block+0x31c>
    27da:	ac 8d       	ldd	r26, Y+28	; 0x1c
    27dc:	bd 8d       	ldd	r27, Y+29	; 0x1d
    27de:	ae 31       	cpi	r26, 0x1E	; 30
    27e0:	b1 05       	cpc	r27, r1
    27e2:	51 f0       	breq	.+20     	; 0x27f8 <gc_execute_block+0x30c>
    27e4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    27e6:	3d 8d       	ldd	r19, Y+29	; 0x1d
    27e8:	2c 33       	cpi	r18, 0x3C	; 60
    27ea:	31 05       	cpc	r19, r1
    27ec:	29 f0       	breq	.+10     	; 0x27f8 <gc_execute_block+0x30c>
    27ee:	13 c0       	rjmp	.+38     	; 0x2816 <gc_execute_block+0x32a>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	80 93 0a 21 	sts	0x210A, r24
    27f6:	29 c0       	rjmp	.+82     	; 0x284a <gc_execute_block+0x35e>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    27f8:	82 e0       	ldi	r24, 0x02	; 2
    27fa:	80 93 0a 21 	sts	0x210A, r24
    27fe:	25 c0       	rjmp	.+74     	; 0x284a <gc_execute_block+0x35e>
					case 3: gc.spindle_direction = 1; break;
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	80 93 51 21 	sts	0x2151, r24
    2806:	21 c0       	rjmp	.+66     	; 0x284a <gc_execute_block+0x35e>
					case 4: gc.spindle_direction = -1; break;
    2808:	8f ef       	ldi	r24, 0xFF	; 255
    280a:	80 93 51 21 	sts	0x2151, r24
    280e:	1d c0       	rjmp	.+58     	; 0x284a <gc_execute_block+0x35e>
					case 5: gc.spindle_direction = 0; break;
    2810:	10 92 51 21 	sts	0x2151, r1
    2814:	1a c0       	rjmp	.+52     	; 0x284a <gc_execute_block+0x35e>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    2816:	8c e0       	ldi	r24, 0x0C	; 12
    2818:	80 93 00 21 	sts	0x2100, r24
    281c:	16 c0       	rjmp	.+44     	; 0x284a <gc_execute_block+0x35e>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    281e:	80 91 02 21 	lds	r24, 0x2102
    2822:	90 91 03 21 	lds	r25, 0x2103
    2826:	a0 91 04 21 	lds	r26, 0x2104
    282a:	b0 91 05 21 	lds	r27, 0x2105
    282e:	bc 01       	movw	r22, r24
    2830:	cd 01       	movw	r24, r26
    2832:	0e 94 18 59 	call	0xb230	; 0xb230 <trunc>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	bc 01       	movw	r22, r24
    283c:	cd 01       	movw	r24, r26
    283e:	0e 94 1c 56 	call	0xac38	; 0xac38 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	80 93 50 21 	sts	0x2150, r24
		}
		if(gc.status) {
    284a:	80 91 00 21 	lds	r24, 0x2100
    284e:	88 23       	and	r24, r24
    2850:	91 f4       	brne	.+36     	; 0x2876 <gc_execute_block+0x38a>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	91 e2       	ldi	r25, 0x21	; 33
    2856:	22 e0       	ldi	r18, 0x02	; 2
    2858:	31 e2       	ldi	r19, 0x21	; 33
    285a:	46 e0       	ldi	r20, 0x06	; 6
    285c:	51 e2       	ldi	r21, 0x21	; 33
    285e:	eb 81       	ldd	r30, Y+3	; 0x03
    2860:	fc 81       	ldd	r31, Y+4	; 0x04
    2862:	b9 01       	movw	r22, r18
    2864:	9f 01       	movw	r18, r30
    2866:	fe 01       	movw	r30, r28
    2868:	31 96       	adiw	r30, 0x01	; 1
    286a:	8f 01       	movw	r16, r30
    286c:	0e 94 a0 11 	call	0x2340	; 0x2340 <_gc_next_statement>
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	09 f0       	breq	.+2      	; 0x2876 <gc_execute_block+0x38a>
    2874:	67 ce       	rjmp	.-818    	; 0x2544 <gc_execute_block+0x58>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    2876:	80 91 00 21 	lds	r24, 0x2100
    287a:	88 23       	and	r24, r24
    287c:	21 f0       	breq	.+8      	; 0x2886 <gc_execute_block+0x39a>
		return(gc.status); 
    287e:	30 91 00 21 	lds	r19, 0x2100
    2882:	3b 8f       	std	Y+27, r19	; 0x1b
    2884:	4f c2       	rjmp	.+1182   	; 0x2d24 <gc_execute_block+0x838>
	}

	i = 0;
    2886:	19 82       	std	Y+1, r1	; 0x01
    2888:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    288a:	81 e4       	ldi	r24, 0x41	; 65
    288c:	91 e2       	ldi	r25, 0x21	; 33
    288e:	60 e0       	ldi	r22, 0x00	; 0
    2890:	70 e0       	ldi	r23, 0x00	; 0
    2892:	4c e0       	ldi	r20, 0x0C	; 12
    2894:	50 e0       	ldi	r21, 0x00	; 0
    2896:	0e 94 4b 5c 	call	0xb896	; 0xb896 <memset>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    289a:	85 e3       	ldi	r24, 0x35	; 53
    289c:	91 e2       	ldi	r25, 0x21	; 33
    289e:	29 e2       	ldi	r18, 0x29	; 41
    28a0:	31 e2       	ldi	r19, 0x21	; 33
    28a2:	b9 01       	movw	r22, r18
    28a4:	4c e0       	ldi	r20, 0x0C	; 12
    28a6:	50 e0       	ldi	r21, 0x00	; 0
    28a8:	0e 94 42 5c 	call	0xb884	; 0xb884 <memcpy>
    28ac:	4c c1       	rjmp	.+664    	; 0x2b46 <gc_execute_block+0x65a>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    28ae:	80 91 02 21 	lds	r24, 0x2102
    28b2:	90 91 03 21 	lds	r25, 0x2103
    28b6:	a0 91 04 21 	lds	r26, 0x2104
    28ba:	b0 91 05 21 	lds	r27, 0x2105
    28be:	bc 01       	movw	r22, r24
    28c0:	cd 01       	movw	r24, r26
    28c2:	0e 94 f6 10 	call	0x21ec	; 0x21ec <to_millimeters>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	80 93 21 21 	sts	0x2121, r24
    28ce:	90 93 22 21 	sts	0x2122, r25
    28d2:	a0 93 23 21 	sts	0x2123, r26
    28d6:	b0 93 24 21 	sts	0x2124, r27
		switch(gc.letter) {
    28da:	80 91 01 21 	lds	r24, 0x2101
    28de:	a8 2f       	mov	r26, r24
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	a9 8f       	std	Y+25, r26	; 0x19
    28e4:	ba 8f       	std	Y+26, r27	; 0x1a
    28e6:	29 8d       	ldd	r18, Y+25	; 0x19
    28e8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    28ea:	20 35       	cpi	r18, 0x50	; 80
    28ec:	31 05       	cpc	r19, r1
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <gc_execute_block+0x406>
    28f0:	7e c0       	rjmp	.+252    	; 0x29ee <gc_execute_block+0x502>
    28f2:	89 8d       	ldd	r24, Y+25	; 0x19
    28f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28f6:	81 35       	cpi	r24, 0x51	; 81
    28f8:	91 05       	cpc	r25, r1
    28fa:	a4 f4       	brge	.+40     	; 0x2924 <gc_execute_block+0x438>
    28fc:	a9 8d       	ldd	r26, Y+25	; 0x19
    28fe:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2900:	a6 34       	cpi	r26, 0x46	; 70
    2902:	b1 05       	cpc	r27, r1
    2904:	51 f1       	breq	.+84     	; 0x295a <gc_execute_block+0x46e>
    2906:	29 8d       	ldd	r18, Y+25	; 0x19
    2908:	3a 8d       	ldd	r19, Y+26	; 0x1a
    290a:	26 34       	cpi	r18, 0x46	; 70
    290c:	31 05       	cpc	r19, r1
    290e:	0c f4       	brge	.+2      	; 0x2912 <gc_execute_block+0x426>
    2910:	1a c1       	rjmp	.+564    	; 0x2b46 <gc_execute_block+0x65a>
    2912:	89 8d       	ldd	r24, Y+25	; 0x19
    2914:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2916:	89 54       	subi	r24, 0x49	; 73
    2918:	90 40       	sbci	r25, 0x00	; 0
    291a:	83 30       	cpi	r24, 0x03	; 3
    291c:	91 05       	cpc	r25, r1
    291e:	08 f0       	brcs	.+2      	; 0x2922 <gc_execute_block+0x436>
    2920:	12 c1       	rjmp	.+548    	; 0x2b46 <gc_execute_block+0x65a>
    2922:	4b c0       	rjmp	.+150    	; 0x29ba <gc_execute_block+0x4ce>
    2924:	89 8d       	ldd	r24, Y+25	; 0x19
    2926:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2928:	83 35       	cpi	r24, 0x53	; 83
    292a:	91 05       	cpc	r25, r1
    292c:	09 f4       	brne	.+2      	; 0x2930 <gc_execute_block+0x444>
    292e:	84 c0       	rjmp	.+264    	; 0x2a38 <gc_execute_block+0x54c>
    2930:	a9 8d       	ldd	r26, Y+25	; 0x19
    2932:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2934:	a4 35       	cpi	r26, 0x54	; 84
    2936:	b1 05       	cpc	r27, r1
    2938:	3c f4       	brge	.+14     	; 0x2948 <gc_execute_block+0x45c>
    293a:	29 8d       	ldd	r18, Y+25	; 0x19
    293c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    293e:	22 35       	cpi	r18, 0x52	; 82
    2940:	31 05       	cpc	r19, r1
    2942:	09 f4       	brne	.+2      	; 0x2946 <gc_execute_block+0x45a>
    2944:	65 c0       	rjmp	.+202    	; 0x2a10 <gc_execute_block+0x524>
    2946:	ff c0       	rjmp	.+510    	; 0x2b46 <gc_execute_block+0x65a>
    2948:	89 8d       	ldd	r24, Y+25	; 0x19
    294a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    294c:	88 55       	subi	r24, 0x58	; 88
    294e:	90 40       	sbci	r25, 0x00	; 0
    2950:	83 30       	cpi	r24, 0x03	; 3
    2952:	91 05       	cpc	r25, r1
    2954:	08 f0       	brcs	.+2      	; 0x2958 <gc_execute_block+0x46c>
    2956:	f7 c0       	rjmp	.+494    	; 0x2b46 <gc_execute_block+0x65a>
    2958:	82 c0       	rjmp	.+260    	; 0x2a5e <gc_execute_block+0x572>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    295a:	80 91 0c 21 	lds	r24, 0x210C
    295e:	88 23       	and	r24, r24
    2960:	89 f0       	breq	.+34     	; 0x2984 <gc_execute_block+0x498>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    2962:	80 91 21 21 	lds	r24, 0x2121
    2966:	90 91 22 21 	lds	r25, 0x2122
    296a:	a0 91 23 21 	lds	r26, 0x2123
    296e:	b0 91 24 21 	lds	r27, 0x2124
    2972:	80 93 25 21 	sts	0x2125, r24
    2976:	90 93 26 21 	sts	0x2126, r25
    297a:	a0 93 27 21 	sts	0x2127, r26
    297e:	b0 93 28 21 	sts	0x2128, r27
    2982:	e1 c0       	rjmp	.+450    	; 0x2b46 <gc_execute_block+0x65a>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    2984:	80 91 21 21 	lds	r24, 0x2121
    2988:	90 91 22 21 	lds	r25, 0x2122
    298c:	a0 91 23 21 	lds	r26, 0x2123
    2990:	b0 91 24 21 	lds	r27, 0x2124
    2994:	bc 01       	movw	r22, r24
    2996:	cd 01       	movw	r24, r26
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	40 e7       	ldi	r20, 0x70	; 112
    299e:	52 e4       	ldi	r21, 0x42	; 66
    29a0:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	80 93 19 21 	sts	0x2119, r24
    29ac:	90 93 1a 21 	sts	0x211A, r25
    29b0:	a0 93 1b 21 	sts	0x211B, r26
    29b4:	b0 93 1c 21 	sts	0x211C, r27
    29b8:	c6 c0       	rjmp	.+396    	; 0x2b46 <gc_execute_block+0x65a>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    29ba:	80 91 01 21 	lds	r24, 0x2101
    29be:	88 2f       	mov	r24, r24
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	89 54       	subi	r24, 0x49	; 73
    29c4:	90 40       	sbci	r25, 0x00	; 0
    29c6:	20 91 21 21 	lds	r18, 0x2121
    29ca:	30 91 22 21 	lds	r19, 0x2122
    29ce:	40 91 23 21 	lds	r20, 0x2123
    29d2:	50 91 24 21 	lds	r21, 0x2124
    29d6:	88 0f       	add	r24, r24
    29d8:	99 1f       	adc	r25, r25
    29da:	88 0f       	add	r24, r24
    29dc:	99 1f       	adc	r25, r25
    29de:	fc 01       	movw	r30, r24
    29e0:	ef 5b       	subi	r30, 0xBF	; 191
    29e2:	fe 4d       	sbci	r31, 0xDE	; 222
    29e4:	20 83       	st	Z, r18
    29e6:	31 83       	std	Z+1, r19	; 0x01
    29e8:	42 83       	std	Z+2, r20	; 0x02
    29ea:	53 83       	std	Z+3, r21	; 0x03
    29ec:	ac c0       	rjmp	.+344    	; 0x2b46 <gc_execute_block+0x65a>
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
    29ee:	80 91 02 21 	lds	r24, 0x2102
    29f2:	90 91 03 21 	lds	r25, 0x2103
    29f6:	a0 91 04 21 	lds	r26, 0x2104
    29fa:	b0 91 05 21 	lds	r27, 0x2105
    29fe:	80 93 11 21 	sts	0x2111, r24
    2a02:	90 93 12 21 	sts	0x2112, r25
    2a06:	a0 93 13 21 	sts	0x2113, r26
    2a0a:	b0 93 14 21 	sts	0x2114, r27
    2a0e:	9b c0       	rjmp	.+310    	; 0x2b46 <gc_execute_block+0x65a>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    2a10:	80 91 21 21 	lds	r24, 0x2121
    2a14:	90 91 22 21 	lds	r25, 0x2122
    2a18:	a0 91 23 21 	lds	r26, 0x2123
    2a1c:	b0 91 24 21 	lds	r27, 0x2124
    2a20:	80 93 15 21 	sts	0x2115, r24
    2a24:	90 93 16 21 	sts	0x2116, r25
    2a28:	a0 93 17 21 	sts	0x2117, r26
    2a2c:	b0 93 18 21 	sts	0x2118, r27
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	80 93 0f 21 	sts	0x210F, r24
    2a36:	87 c0       	rjmp	.+270    	; 0x2b46 <gc_execute_block+0x65a>
			case 'S': gc.spindle_speed = gc.value; break;
    2a38:	80 91 02 21 	lds	r24, 0x2102
    2a3c:	90 91 03 21 	lds	r25, 0x2103
    2a40:	a0 91 04 21 	lds	r26, 0x2104
    2a44:	b0 91 05 21 	lds	r27, 0x2105
    2a48:	bc 01       	movw	r22, r24
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	0e 94 17 56 	call	0xac2e	; 0xac2e <__fixsfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	80 93 52 21 	sts	0x2152, r24
    2a58:	90 93 53 21 	sts	0x2153, r25
    2a5c:	74 c0       	rjmp	.+232    	; 0x2b46 <gc_execute_block+0x65a>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    2a5e:	80 91 10 21 	lds	r24, 0x2110
    2a62:	88 23       	and	r24, r24
    2a64:	d1 f0       	breq	.+52     	; 0x2a9a <gc_execute_block+0x5ae>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    2a66:	80 91 01 21 	lds	r24, 0x2101
    2a6a:	88 2f       	mov	r24, r24
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	88 55       	subi	r24, 0x58	; 88
    2a70:	90 40       	sbci	r25, 0x00	; 0
    2a72:	20 91 21 21 	lds	r18, 0x2121
    2a76:	30 91 22 21 	lds	r19, 0x2122
    2a7a:	40 91 23 21 	lds	r20, 0x2123
    2a7e:	50 91 24 21 	lds	r21, 0x2124
    2a82:	88 0f       	add	r24, r24
    2a84:	99 1f       	adc	r25, r25
    2a86:	88 0f       	add	r24, r24
    2a88:	99 1f       	adc	r25, r25
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	e7 5d       	subi	r30, 0xD7	; 215
    2a8e:	fe 4d       	sbci	r31, 0xDE	; 222
    2a90:	20 83       	st	Z, r18
    2a92:	31 83       	std	Z+1, r19	; 0x01
    2a94:	42 83       	std	Z+2, r20	; 0x02
    2a96:	53 83       	std	Z+3, r21	; 0x03
    2a98:	56 c0       	rjmp	.+172    	; 0x2b46 <gc_execute_block+0x65a>
				} else if (gc.absolute_mode || gc.absolute_override) {
    2a9a:	80 91 0e 21 	lds	r24, 0x210E
    2a9e:	88 23       	and	r24, r24
    2aa0:	21 f4       	brne	.+8      	; 0x2aaa <gc_execute_block+0x5be>
    2aa2:	80 91 54 21 	lds	r24, 0x2154
    2aa6:	88 23       	and	r24, r24
    2aa8:	d1 f0       	breq	.+52     	; 0x2ade <gc_execute_block+0x5f2>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    2aaa:	80 91 01 21 	lds	r24, 0x2101
    2aae:	88 2f       	mov	r24, r24
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	88 55       	subi	r24, 0x58	; 88
    2ab4:	90 40       	sbci	r25, 0x00	; 0
    2ab6:	20 91 21 21 	lds	r18, 0x2121
    2aba:	30 91 22 21 	lds	r19, 0x2122
    2abe:	40 91 23 21 	lds	r20, 0x2123
    2ac2:	50 91 24 21 	lds	r21, 0x2124
    2ac6:	88 0f       	add	r24, r24
    2ac8:	99 1f       	adc	r25, r25
    2aca:	88 0f       	add	r24, r24
    2acc:	99 1f       	adc	r25, r25
    2ace:	fc 01       	movw	r30, r24
    2ad0:	eb 5c       	subi	r30, 0xCB	; 203
    2ad2:	fe 4d       	sbci	r31, 0xDE	; 222
    2ad4:	20 83       	st	Z, r18
    2ad6:	31 83       	std	Z+1, r19	; 0x01
    2ad8:	42 83       	std	Z+2, r20	; 0x02
    2ada:	53 83       	std	Z+3, r21	; 0x03
    2adc:	34 c0       	rjmp	.+104    	; 0x2b46 <gc_execute_block+0x65a>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    2ade:	80 91 01 21 	lds	r24, 0x2101
    2ae2:	88 2f       	mov	r24, r24
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	8c 01       	movw	r16, r24
    2ae8:	08 55       	subi	r16, 0x58	; 88
    2aea:	10 40       	sbci	r17, 0x00	; 0
    2aec:	80 91 01 21 	lds	r24, 0x2101
    2af0:	88 2f       	mov	r24, r24
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	88 55       	subi	r24, 0x58	; 88
    2af6:	90 40       	sbci	r25, 0x00	; 0
    2af8:	88 0f       	add	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	88 0f       	add	r24, r24
    2afe:	99 1f       	adc	r25, r25
    2b00:	fc 01       	movw	r30, r24
    2b02:	eb 5c       	subi	r30, 0xCB	; 203
    2b04:	fe 4d       	sbci	r31, 0xDE	; 222
    2b06:	80 81       	ld	r24, Z
    2b08:	91 81       	ldd	r25, Z+1	; 0x01
    2b0a:	a2 81       	ldd	r26, Z+2	; 0x02
    2b0c:	b3 81       	ldd	r27, Z+3	; 0x03
    2b0e:	20 91 21 21 	lds	r18, 0x2121
    2b12:	30 91 22 21 	lds	r19, 0x2122
    2b16:	40 91 23 21 	lds	r20, 0x2123
    2b1a:	50 91 24 21 	lds	r21, 0x2124
    2b1e:	bc 01       	movw	r22, r24
    2b20:	cd 01       	movw	r24, r26
    2b22:	0e 94 09 55 	call	0xaa12	; 0xaa12 <__addsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	9c 01       	movw	r18, r24
    2b2c:	ad 01       	movw	r20, r26
    2b2e:	c8 01       	movw	r24, r16
    2b30:	88 0f       	add	r24, r24
    2b32:	99 1f       	adc	r25, r25
    2b34:	88 0f       	add	r24, r24
    2b36:	99 1f       	adc	r25, r25
    2b38:	fc 01       	movw	r30, r24
    2b3a:	eb 5c       	subi	r30, 0xCB	; 203
    2b3c:	fe 4d       	sbci	r31, 0xDE	; 222
    2b3e:	20 83       	st	Z, r18
    2b40:	31 83       	std	Z+1, r19	; 0x01
    2b42:	42 83       	std	Z+2, r20	; 0x02
    2b44:	53 83       	std	Z+3, r21	; 0x03
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	91 e2       	ldi	r25, 0x21	; 33
    2b4a:	22 e0       	ldi	r18, 0x02	; 2
    2b4c:	31 e2       	ldi	r19, 0x21	; 33
    2b4e:	46 e0       	ldi	r20, 0x06	; 6
    2b50:	51 e2       	ldi	r21, 0x21	; 33
    2b52:	eb 81       	ldd	r30, Y+3	; 0x03
    2b54:	fc 81       	ldd	r31, Y+4	; 0x04
    2b56:	b9 01       	movw	r22, r18
    2b58:	9f 01       	movw	r18, r30
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	31 96       	adiw	r30, 0x01	; 1
    2b5e:	8f 01       	movw	r16, r30
    2b60:	0e 94 a0 11 	call	0x2340	; 0x2340 <_gc_next_statement>
    2b64:	00 97       	sbiw	r24, 0x00	; 0
    2b66:	09 f0       	breq	.+2      	; 0x2b6a <gc_execute_block+0x67e>
    2b68:	a2 ce       	rjmp	.-700    	; 0x28ae <gc_execute_block+0x3c2>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    2b6a:	80 91 00 21 	lds	r24, 0x2100
    2b6e:	88 23       	and	r24, r24
    2b70:	21 f0       	breq	.+8      	; 0x2b7a <gc_execute_block+0x68e>
		return(gc.status); 
    2b72:	30 91 00 21 	lds	r19, 0x2100
    2b76:	3b 8f       	std	Y+27, r19	; 0x1b
    2b78:	d5 c0       	rjmp	.+426    	; 0x2d24 <gc_execute_block+0x838>
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    2b7a:	80 91 51 21 	lds	r24, 0x2151
    2b7e:	88 23       	and	r24, r24
    2b80:	a9 f0       	breq	.+42     	; 0x2bac <gc_execute_block+0x6c0>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    2b82:	80 91 51 21 	lds	r24, 0x2151
    2b86:	68 2f       	mov	r22, r24
    2b88:	77 27       	eor	r23, r23
    2b8a:	67 fd       	sbrc	r22, 7
    2b8c:	70 95       	com	r23
    2b8e:	80 91 52 21 	lds	r24, 0x2152
    2b92:	90 91 53 21 	lds	r25, 0x2153
    2b96:	9c 01       	movw	r18, r24
    2b98:	44 27       	eor	r20, r20
    2b9a:	37 fd       	sbrc	r19, 7
    2b9c:	40 95       	com	r20
    2b9e:	54 2f       	mov	r21, r20
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	ba 01       	movw	r22, r20
    2ba4:	a9 01       	movw	r20, r18
    2ba6:	0e 94 85 2f 	call	0x5f0a	; 0x5f0a <spindle_run>
    2baa:	02 c0       	rjmp	.+4      	; 0x2bb0 <gc_execute_block+0x6c4>
	} else {
		spindle_stop();
    2bac:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    2bb0:	80 91 55 21 	lds	r24, 0x2155
    2bb4:	a8 2f       	mov	r26, r24
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	af 8b       	std	Y+23, r26	; 0x17
    2bba:	b8 8f       	std	Y+24, r27	; 0x18
    2bbc:	2f 89       	ldd	r18, Y+23	; 0x17
    2bbe:	38 8d       	ldd	r19, Y+24	; 0x18
    2bc0:	21 30       	cpi	r18, 0x01	; 1
    2bc2:	31 05       	cpc	r19, r1
    2bc4:	29 f1       	breq	.+74     	; 0x2c10 <gc_execute_block+0x724>
    2bc6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bca:	82 30       	cpi	r24, 0x02	; 2
    2bcc:	91 05       	cpc	r25, r1
    2bce:	0c f4       	brge	.+2      	; 0x2bd2 <gc_execute_block+0x6e6>
    2bd0:	95 c0       	rjmp	.+298    	; 0x2cfc <gc_execute_block+0x810>
    2bd2:	af 89       	ldd	r26, Y+23	; 0x17
    2bd4:	b8 8d       	ldd	r27, Y+24	; 0x18
    2bd6:	a2 30       	cpi	r26, 0x02	; 2
    2bd8:	b1 05       	cpc	r27, r1
    2bda:	59 f0       	breq	.+22     	; 0x2bf2 <gc_execute_block+0x706>
    2bdc:	2f 89       	ldd	r18, Y+23	; 0x17
    2bde:	38 8d       	ldd	r19, Y+24	; 0x18
    2be0:	23 30       	cpi	r18, 0x03	; 3
    2be2:	31 05       	cpc	r19, r1
    2be4:	09 f0       	breq	.+2      	; 0x2be8 <gc_execute_block+0x6fc>
    2be6:	8a c0       	rjmp	.+276    	; 0x2cfc <gc_execute_block+0x810>
		case NEXT_ACTION_DEFAULT: {				// nothing to do here
			break;
		}

		case NEXT_ACTION_GO_HOME: { 
			gc.status = mc_go_home(); 
    2be8:	0e 94 65 2f 	call	0x5eca	; 0x5eca <mc_go_home>
    2bec:	80 93 00 21 	sts	0x2100, r24
    2bf0:	85 c0       	rjmp	.+266    	; 0x2cfc <gc_execute_block+0x810>
			break;
		}

		case NEXT_ACTION_DWELL: {
			gc.status = mc_dwell(gc.dwell_time); 
    2bf2:	80 91 11 21 	lds	r24, 0x2111
    2bf6:	90 91 12 21 	lds	r25, 0x2112
    2bfa:	a0 91 13 21 	lds	r26, 0x2113
    2bfe:	b0 91 14 21 	lds	r27, 0x2114
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <mc_dwell>
    2c0a:	80 93 00 21 	sts	0x2100, r24
    2c0e:	76 c0       	rjmp	.+236    	; 0x2cfc <gc_execute_block+0x810>
			break;
		}

		case NEXT_ACTION_MOTION: {
			switch (gc.motion_mode) {
    2c10:	80 91 0b 21 	lds	r24, 0x210B
    2c14:	a8 2f       	mov	r26, r24
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	ad 8b       	std	Y+21, r26	; 0x15
    2c1a:	be 8b       	std	Y+22, r27	; 0x16
    2c1c:	2d 89       	ldd	r18, Y+21	; 0x15
    2c1e:	3e 89       	ldd	r19, Y+22	; 0x16
    2c20:	24 30       	cpi	r18, 0x04	; 4
    2c22:	31 05       	cpc	r19, r1
    2c24:	0c f0       	brlt	.+2      	; 0x2c28 <gc_execute_block+0x73c>
    2c26:	6a c0       	rjmp	.+212    	; 0x2cfc <gc_execute_block+0x810>
    2c28:	8d 89       	ldd	r24, Y+21	; 0x15
    2c2a:	9e 89       	ldd	r25, Y+22	; 0x16
    2c2c:	82 30       	cpi	r24, 0x02	; 2
    2c2e:	91 05       	cpc	r25, r1
    2c30:	0c f0       	brlt	.+2      	; 0x2c34 <gc_execute_block+0x748>
    2c32:	60 c0       	rjmp	.+192    	; 0x2cf4 <gc_execute_block+0x808>
    2c34:	ad 89       	ldd	r26, Y+21	; 0x15
    2c36:	be 89       	ldd	r27, Y+22	; 0x16
    2c38:	bb 23       	and	r27, r27
    2c3a:	0c f4       	brge	.+2      	; 0x2c3e <gc_execute_block+0x752>
    2c3c:	5f c0       	rjmp	.+190    	; 0x2cfc <gc_execute_block+0x810>
				case MOTION_MODE_CANCEL: {
					break;
				}

				case MOTION_MODE_RAPID_LINEAR: case MOTION_MODE_LINEAR: {
					gc.status = mc_line(gc.target[X], gc.target[Y], gc.target[Z],
    2c3e:	80 91 35 21 	lds	r24, 0x2135
    2c42:	90 91 36 21 	lds	r25, 0x2136
    2c46:	a0 91 37 21 	lds	r26, 0x2137
    2c4a:	b0 91 38 21 	lds	r27, 0x2138
    2c4e:	89 8b       	std	Y+17, r24	; 0x11
    2c50:	9a 8b       	std	Y+18, r25	; 0x12
    2c52:	ab 8b       	std	Y+19, r26	; 0x13
    2c54:	bc 8b       	std	Y+20, r27	; 0x14
    2c56:	80 91 39 21 	lds	r24, 0x2139
    2c5a:	90 91 3a 21 	lds	r25, 0x213A
    2c5e:	a0 91 3b 21 	lds	r26, 0x213B
    2c62:	b0 91 3c 21 	lds	r27, 0x213C
    2c66:	8d 87       	std	Y+13, r24	; 0x0d
    2c68:	9e 87       	std	Y+14, r25	; 0x0e
    2c6a:	af 87       	std	Y+15, r26	; 0x0f
    2c6c:	b8 8b       	std	Y+16, r27	; 0x10
    2c6e:	80 91 3d 21 	lds	r24, 0x213D
    2c72:	90 91 3e 21 	lds	r25, 0x213E
    2c76:	a0 91 3f 21 	lds	r26, 0x213F
    2c7a:	b0 91 40 21 	lds	r27, 0x2140
    2c7e:	89 87       	std	Y+9, r24	; 0x09
    2c80:	9a 87       	std	Y+10, r25	; 0x0a
    2c82:	ab 87       	std	Y+11, r26	; 0x0b
    2c84:	bc 87       	std	Y+12, r27	; 0x0c
    2c86:	80 91 0c 21 	lds	r24, 0x210C
    2c8a:	88 23       	and	r24, r24
    2c8c:	69 f0       	breq	.+26     	; 0x2ca8 <gc_execute_block+0x7bc>
    2c8e:	80 91 25 21 	lds	r24, 0x2125
    2c92:	90 91 26 21 	lds	r25, 0x2126
    2c96:	a0 91 27 21 	lds	r26, 0x2127
    2c9a:	b0 91 28 21 	lds	r27, 0x2128
    2c9e:	8d 83       	std	Y+5, r24	; 0x05
    2ca0:	9e 83       	std	Y+6, r25	; 0x06
    2ca2:	af 83       	std	Y+7, r26	; 0x07
    2ca4:	b8 87       	std	Y+8, r27	; 0x08
    2ca6:	0c c0       	rjmp	.+24     	; 0x2cc0 <gc_execute_block+0x7d4>
    2ca8:	80 91 19 21 	lds	r24, 0x2119
    2cac:	90 91 1a 21 	lds	r25, 0x211A
    2cb0:	a0 91 1b 21 	lds	r26, 0x211B
    2cb4:	b0 91 1c 21 	lds	r27, 0x211C
    2cb8:	8d 83       	std	Y+5, r24	; 0x05
    2cba:	9e 83       	std	Y+6, r25	; 0x06
    2cbc:	af 83       	std	Y+7, r26	; 0x07
    2cbe:	b8 87       	std	Y+8, r27	; 0x08
    2cc0:	80 91 0c 21 	lds	r24, 0x210C
    2cc4:	e8 2f       	mov	r30, r24
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	69 89       	ldd	r22, Y+17	; 0x11
    2cca:	7a 89       	ldd	r23, Y+18	; 0x12
    2ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cce:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd0:	2d 85       	ldd	r18, Y+13	; 0x0d
    2cd2:	3e 85       	ldd	r19, Y+14	; 0x0e
    2cd4:	4f 85       	ldd	r20, Y+15	; 0x0f
    2cd6:	58 89       	ldd	r21, Y+16	; 0x10
    2cd8:	e9 84       	ldd	r14, Y+9	; 0x09
    2cda:	fa 84       	ldd	r15, Y+10	; 0x0a
    2cdc:	0b 85       	ldd	r16, Y+11	; 0x0b
    2cde:	1c 85       	ldd	r17, Y+12	; 0x0c
    2ce0:	ad 80       	ldd	r10, Y+5	; 0x05
    2ce2:	be 80       	ldd	r11, Y+6	; 0x06
    2ce4:	cf 80       	ldd	r12, Y+7	; 0x07
    2ce6:	d8 84       	ldd	r13, Y+8	; 0x08
    2ce8:	4f 01       	movw	r8, r30
    2cea:	0e 94 7e 25 	call	0x4afc	; 0x4afc <mc_line>
    2cee:	80 93 00 21 	sts	0x2100, r24
    2cf2:	04 c0       	rjmp	.+8      	; 0x2cfc <gc_execute_block+0x810>
										gc.inverse_feed_rate_mode); 
					break;
				}

				case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC: {
					gc.status = _gc_compute_arc(); 
    2cf4:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <_gc_compute_arc>
    2cf8:	80 93 00 21 	sts	0x2100, r24
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_EAGAIN)) {
    2cfc:	80 91 00 21 	lds	r24, 0x2100
    2d00:	88 23       	and	r24, r24
    2d02:	21 f0       	breq	.+8      	; 0x2d0c <gc_execute_block+0x820>
    2d04:	80 91 00 21 	lds	r24, 0x2100
    2d08:	81 30       	cpi	r24, 0x01	; 1
    2d0a:	49 f4       	brne	.+18     	; 0x2d1e <gc_execute_block+0x832>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2d0c:	89 e2       	ldi	r24, 0x29	; 41
    2d0e:	91 e2       	ldi	r25, 0x21	; 33
    2d10:	25 e3       	ldi	r18, 0x35	; 53
    2d12:	31 e2       	ldi	r19, 0x21	; 33
    2d14:	b9 01       	movw	r22, r18
    2d16:	4c e0       	ldi	r20, 0x0C	; 12
    2d18:	50 e0       	ldi	r21, 0x00	; 0
    2d1a:	0e 94 42 5c 	call	0xb884	; 0xb884 <memcpy>
	};
	return(gc.status);
    2d1e:	90 91 00 21 	lds	r25, 0x2100
    2d22:	9b 8f       	std	Y+27, r25	; 0x1b
    2d24:	8b 8d       	ldd	r24, Y+27	; 0x1b
}
    2d26:	a1 96       	adiw	r28, 0x21	; 33
    2d28:	cd bf       	out	0x3d, r28	; 61
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	cf 91       	pop	r28
    2d2e:	df 91       	pop	r29
    2d30:	1f 91       	pop	r17
    2d32:	0f 91       	pop	r16
    2d34:	ff 90       	pop	r15
    2d36:	ef 90       	pop	r14
    2d38:	df 90       	pop	r13
    2d3a:	cf 90       	pop	r12
    2d3c:	bf 90       	pop	r11
    2d3e:	af 90       	pop	r10
    2d40:	9f 90       	pop	r9
    2d42:	8f 90       	pop	r8
    2d44:	08 95       	ret

00002d46 <_gc_compute_arc>:
/*
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
    2d46:	df 93       	push	r29
    2d48:	cf 93       	push	r28
    2d4a:	0f 92       	push	r0
    2d4c:	0f 92       	push	r0
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
	if (gc.radius_mode) {
    2d52:	80 91 0f 21 	lds	r24, 0x210F
    2d56:	88 23       	and	r24, r24
    2d58:	59 f0       	breq	.+22     	; 0x2d70 <_gc_compute_arc+0x2a>
		if ((_gc_compute_radius_arc() != TG_OK)) {
    2d5a:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <_gc_compute_radius_arc>
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	39 f0       	breq	.+14     	; 0x2d70 <_gc_compute_arc+0x2a>
			return (gc.status);
    2d62:	80 91 00 21 	lds	r24, 0x2100
    2d66:	28 2f       	mov	r18, r24
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	29 83       	std	Y+1, r18	; 0x01
    2d6c:	3a 83       	std	Y+2, r19	; 0x02
    2d6e:	04 c0       	rjmp	.+8      	; 0x2d78 <_gc_compute_arc+0x32>
		}
	}
	return (_gc_compute_center_arc());
    2d70:	0e 94 52 18 	call	0x30a4	; 0x30a4 <_gc_compute_center_arc>
    2d74:	89 83       	std	Y+1, r24	; 0x01
    2d76:	9a 83       	std	Y+2, r25	; 0x02
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	cf 91       	pop	r28
    2d82:	df 91       	pop	r29
    2d84:	08 95       	ret

00002d86 <_gc_compute_radius_arc>:
 *
 * Compute arc center (offset) from radius. Used to prep for computing an center arc
 */

int _gc_compute_radius_arc()
{
    2d86:	af 92       	push	r10
    2d88:	bf 92       	push	r11
    2d8a:	cf 92       	push	r12
    2d8c:	df 92       	push	r13
    2d8e:	ef 92       	push	r14
    2d90:	ff 92       	push	r15
    2d92:	0f 93       	push	r16
    2d94:	1f 93       	push	r17
    2d96:	df 93       	push	r29
    2d98:	cf 93       	push	r28
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	2e 97       	sbiw	r28, 0x0e	; 14
    2da0:	cd bf       	out	0x3d, r28	; 61
    2da2:	de bf       	out	0x3e, r29	; 62
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    2da4:	80 91 4d 21 	lds	r24, 0x214D
    2da8:	88 2f       	mov	r24, r24
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	88 0f       	add	r24, r24
    2dae:	99 1f       	adc	r25, r25
    2db0:	88 0f       	add	r24, r24
    2db2:	99 1f       	adc	r25, r25
    2db4:	fc 01       	movw	r30, r24
    2db6:	eb 5c       	subi	r30, 0xCB	; 203
    2db8:	fe 4d       	sbci	r31, 0xDE	; 222
    2dba:	e0 80       	ld	r14, Z
    2dbc:	f1 80       	ldd	r15, Z+1	; 0x01
    2dbe:	02 81       	ldd	r16, Z+2	; 0x02
    2dc0:	13 81       	ldd	r17, Z+3	; 0x03
    2dc2:	80 91 4d 21 	lds	r24, 0x214D
    2dc6:	88 2f       	mov	r24, r24
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	88 0f       	add	r24, r24
    2dcc:	99 1f       	adc	r25, r25
    2dce:	88 0f       	add	r24, r24
    2dd0:	99 1f       	adc	r25, r25
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	e7 5d       	subi	r30, 0xD7	; 215
    2dd6:	fe 4d       	sbci	r31, 0xDE	; 222
    2dd8:	20 81       	ld	r18, Z
    2dda:	31 81       	ldd	r19, Z+1	; 0x01
    2ddc:	42 81       	ldd	r20, Z+2	; 0x02
    2dde:	53 81       	ldd	r21, Z+3	; 0x03
    2de0:	c8 01       	movw	r24, r16
    2de2:	b7 01       	movw	r22, r14
    2de4:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	89 87       	std	Y+9, r24	; 0x09
    2dee:	9a 87       	std	Y+10, r25	; 0x0a
    2df0:	ab 87       	std	Y+11, r26	; 0x0b
    2df2:	bc 87       	std	Y+12, r27	; 0x0c
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    2df4:	80 91 4e 21 	lds	r24, 0x214E
    2df8:	88 2f       	mov	r24, r24
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	88 0f       	add	r24, r24
    2dfe:	99 1f       	adc	r25, r25
    2e00:	88 0f       	add	r24, r24
    2e02:	99 1f       	adc	r25, r25
    2e04:	fc 01       	movw	r30, r24
    2e06:	eb 5c       	subi	r30, 0xCB	; 203
    2e08:	fe 4d       	sbci	r31, 0xDE	; 222
    2e0a:	e0 80       	ld	r14, Z
    2e0c:	f1 80       	ldd	r15, Z+1	; 0x01
    2e0e:	02 81       	ldd	r16, Z+2	; 0x02
    2e10:	13 81       	ldd	r17, Z+3	; 0x03
    2e12:	80 91 4e 21 	lds	r24, 0x214E
    2e16:	88 2f       	mov	r24, r24
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	88 0f       	add	r24, r24
    2e1c:	99 1f       	adc	r25, r25
    2e1e:	88 0f       	add	r24, r24
    2e20:	99 1f       	adc	r25, r25
    2e22:	fc 01       	movw	r30, r24
    2e24:	e7 5d       	subi	r30, 0xD7	; 215
    2e26:	fe 4d       	sbci	r31, 0xDE	; 222
    2e28:	20 81       	ld	r18, Z
    2e2a:	31 81       	ldd	r19, Z+1	; 0x01
    2e2c:	42 81       	ldd	r20, Z+2	; 0x02
    2e2e:	53 81       	ldd	r21, Z+3	; 0x03
    2e30:	c8 01       	movw	r24, r16
    2e32:	b7 01       	movw	r22, r14
    2e34:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	8d 83       	std	Y+5, r24	; 0x05
    2e3e:	9e 83       	std	Y+6, r25	; 0x06
    2e40:	af 83       	std	Y+7, r26	; 0x07
    2e42:	b8 87       	std	Y+8, r27	; 0x08
        
	clear_vector(&gc.offset);
    2e44:	81 e4       	ldi	r24, 0x41	; 65
    2e46:	91 e2       	ldi	r25, 0x21	; 33
    2e48:	60 e0       	ldi	r22, 0x00	; 0
    2e4a:	70 e0       	ldi	r23, 0x00	; 0
    2e4c:	42 e0       	ldi	r20, 0x02	; 2
    2e4e:	50 e0       	ldi	r21, 0x00	; 0
    2e50:	0e 94 4b 5c 	call	0xb896	; 0xb896 <memset>
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    2e54:	80 91 15 21 	lds	r24, 0x2115
    2e58:	90 91 16 21 	lds	r25, 0x2116
    2e5c:	a0 91 17 21 	lds	r26, 0x2117
    2e60:	b0 91 18 21 	lds	r27, 0x2118
    2e64:	bc 01       	movw	r22, r24
    2e66:	cd 01       	movw	r24, r26
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e8       	ldi	r20, 0x80	; 128
    2e6e:	50 e4       	ldi	r21, 0x40	; 64
    2e70:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	20 91 15 21 	lds	r18, 0x2115
    2e7c:	30 91 16 21 	lds	r19, 0x2116
    2e80:	40 91 17 21 	lds	r20, 0x2117
    2e84:	50 91 18 21 	lds	r21, 0x2118
    2e88:	bc 01       	movw	r22, r24
    2e8a:	cd 01       	movw	r24, r26
    2e8c:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	5c 01       	movw	r10, r24
    2e96:	6d 01       	movw	r12, r26
    2e98:	69 85       	ldd	r22, Y+9	; 0x09
    2e9a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2e9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ea0:	29 85       	ldd	r18, Y+9	; 0x09
    2ea2:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ea4:	4b 85       	ldd	r20, Y+11	; 0x0b
    2ea6:	5c 85       	ldd	r21, Y+12	; 0x0c
    2ea8:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	7c 01       	movw	r14, r24
    2eb2:	8d 01       	movw	r16, r26
    2eb4:	6d 81       	ldd	r22, Y+5	; 0x05
    2eb6:	7e 81       	ldd	r23, Y+6	; 0x06
    2eb8:	8f 81       	ldd	r24, Y+7	; 0x07
    2eba:	98 85       	ldd	r25, Y+8	; 0x08
    2ebc:	2d 81       	ldd	r18, Y+5	; 0x05
    2ebe:	3e 81       	ldd	r19, Y+6	; 0x06
    2ec0:	4f 81       	ldd	r20, Y+7	; 0x07
    2ec2:	58 85       	ldd	r21, Y+8	; 0x08
    2ec4:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	9c 01       	movw	r18, r24
    2ece:	ad 01       	movw	r20, r26
    2ed0:	c8 01       	movw	r24, r16
    2ed2:	b7 01       	movw	r22, r14
    2ed4:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	9c 01       	movw	r18, r24
    2ede:	ad 01       	movw	r20, r26
    2ee0:	c6 01       	movw	r24, r12
    2ee2:	b5 01       	movw	r22, r10
    2ee4:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	bc 01       	movw	r22, r24
    2eee:	cd 01       	movw	r24, r26
    2ef0:	0e 94 d7 58 	call	0xb1ae	; 0xb1ae <sqrt>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	7c 01       	movw	r14, r24
    2efa:	8d 01       	movw	r16, r26
    2efc:	17 fb       	bst	r17, 7
    2efe:	10 95       	com	r17
    2f00:	17 f9       	bld	r17, 7
    2f02:	10 95       	com	r17
    2f04:	89 85       	ldd	r24, Y+9	; 0x09
    2f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f08:	ab 85       	ldd	r26, Y+11	; 0x0b
    2f0a:	bc 85       	ldd	r27, Y+12	; 0x0c
    2f0c:	2d 81       	ldd	r18, Y+5	; 0x05
    2f0e:	3e 81       	ldd	r19, Y+6	; 0x06
    2f10:	4f 81       	ldd	r20, Y+7	; 0x07
    2f12:	58 85       	ldd	r21, Y+8	; 0x08
    2f14:	bc 01       	movw	r22, r24
    2f16:	cd 01       	movw	r24, r26
    2f18:	0e 94 a5 57 	call	0xaf4a	; 0xaf4a <hypot>
    2f1c:	9b 01       	movw	r18, r22
    2f1e:	ac 01       	movw	r20, r24
    2f20:	c8 01       	movw	r24, r16
    2f22:	b7 01       	movw	r22, r14
    2f24:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	89 83       	std	Y+1, r24	; 0x01
    2f2e:	9a 83       	std	Y+2, r25	; 0x02
    2f30:	ab 83       	std	Y+3, r26	; 0x03
    2f32:	bc 83       	std	Y+4, r27	; 0x04

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    2f34:	69 81       	ldd	r22, Y+1	; 0x01
    2f36:	7a 81       	ldd	r23, Y+2	; 0x02
    2f38:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3c:	29 81       	ldd	r18, Y+1	; 0x01
    2f3e:	3a 81       	ldd	r19, Y+2	; 0x02
    2f40:	4b 81       	ldd	r20, Y+3	; 0x03
    2f42:	5c 81       	ldd	r21, Y+4	; 0x04
    2f44:	0e 94 1f 59 	call	0xb23e	; 0xb23e <__unordsf2>
    2f48:	88 23       	and	r24, r24
    2f4a:	51 f0       	breq	.+20     	; 0x2f60 <_gc_compute_radius_arc+0x1da>
		FAIL(TG_FLOATING_POINT_ERROR); 
    2f4c:	8e e0       	ldi	r24, 0x0E	; 14
    2f4e:	80 93 00 21 	sts	0x2100, r24
		return(gc.status); 
    2f52:	80 91 00 21 	lds	r24, 0x2100
    2f56:	28 2f       	mov	r18, r24
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	2d 87       	std	Y+13, r18	; 0x0d
    2f5c:	3e 87       	std	Y+14, r19	; 0x0e
    2f5e:	92 c0       	rjmp	.+292    	; 0x3084 <_gc_compute_radius_arc+0x2fe>
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2f60:	80 91 0b 21 	lds	r24, 0x210B
    2f64:	83 30       	cpi	r24, 0x03	; 3
    2f66:	49 f4       	brne	.+18     	; 0x2f7a <_gc_compute_radius_arc+0x1f4>
		h_x2_div_d = -h_x2_div_d;
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6c:	ab 81       	ldd	r26, Y+3	; 0x03
    2f6e:	bc 81       	ldd	r27, Y+4	; 0x04
    2f70:	b0 58       	subi	r27, 0x80	; 128
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	9a 83       	std	Y+2, r25	; 0x02
    2f76:	ab 83       	std	Y+3, r26	; 0x03
    2f78:	bc 83       	std	Y+4, r27	; 0x04
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    2f7a:	80 91 15 21 	lds	r24, 0x2115
    2f7e:	90 91 16 21 	lds	r25, 0x2116
    2f82:	a0 91 17 21 	lds	r26, 0x2117
    2f86:	b0 91 18 21 	lds	r27, 0x2118
    2f8a:	bc 01       	movw	r22, r24
    2f8c:	cd 01       	movw	r24, r26
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	40 e0       	ldi	r20, 0x00	; 0
    2f94:	50 e0       	ldi	r21, 0x00	; 0
    2f96:	0e 94 a8 55 	call	0xab50	; 0xab50 <__cmpsf2>
    2f9a:	88 23       	and	r24, r24
    2f9c:	4c f4       	brge	.+18     	; 0x2fb0 <_gc_compute_radius_arc+0x22a>
		h_x2_div_d = -h_x2_div_d; 
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa2:	ab 81       	ldd	r26, Y+3	; 0x03
    2fa4:	bc 81       	ldd	r27, Y+4	; 0x04
    2fa6:	b0 58       	subi	r27, 0x80	; 128
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	9a 83       	std	Y+2, r25	; 0x02
    2fac:	ab 83       	std	Y+3, r26	; 0x03
    2fae:	bc 83       	std	Y+4, r27	; 0x04
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    2fb0:	80 91 4d 21 	lds	r24, 0x214D
    2fb4:	08 2f       	mov	r16, r24
    2fb6:	10 e0       	ldi	r17, 0x00	; 0
    2fb8:	6d 81       	ldd	r22, Y+5	; 0x05
    2fba:	7e 81       	ldd	r23, Y+6	; 0x06
    2fbc:	8f 81       	ldd	r24, Y+7	; 0x07
    2fbe:	98 85       	ldd	r25, Y+8	; 0x08
    2fc0:	29 81       	ldd	r18, Y+1	; 0x01
    2fc2:	3a 81       	ldd	r19, Y+2	; 0x02
    2fc4:	4b 81       	ldd	r20, Y+3	; 0x03
    2fc6:	5c 81       	ldd	r21, Y+4	; 0x04
    2fc8:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	9c 01       	movw	r18, r24
    2fd2:	ad 01       	movw	r20, r26
    2fd4:	69 85       	ldd	r22, Y+9	; 0x09
    2fd6:	7a 85       	ldd	r23, Y+10	; 0x0a
    2fd8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fda:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fdc:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	bc 01       	movw	r22, r24
    2fe6:	cd 01       	movw	r24, r26
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e0       	ldi	r20, 0x00	; 0
    2fee:	50 e4       	ldi	r21, 0x40	; 64
    2ff0:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	9c 01       	movw	r18, r24
    2ffa:	ad 01       	movw	r20, r26
    2ffc:	c8 01       	movw	r24, r16
    2ffe:	88 0f       	add	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	88 0f       	add	r24, r24
    3004:	99 1f       	adc	r25, r25
    3006:	fc 01       	movw	r30, r24
    3008:	ef 5b       	subi	r30, 0xBF	; 191
    300a:	fe 4d       	sbci	r31, 0xDE	; 222
    300c:	20 83       	st	Z, r18
    300e:	31 83       	std	Z+1, r19	; 0x01
    3010:	42 83       	std	Z+2, r20	; 0x02
    3012:	53 83       	std	Z+3, r21	; 0x03
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    3014:	80 91 4e 21 	lds	r24, 0x214E
    3018:	08 2f       	mov	r16, r24
    301a:	10 e0       	ldi	r17, 0x00	; 0
    301c:	69 85       	ldd	r22, Y+9	; 0x09
    301e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3020:	8b 85       	ldd	r24, Y+11	; 0x0b
    3022:	9c 85       	ldd	r25, Y+12	; 0x0c
    3024:	29 81       	ldd	r18, Y+1	; 0x01
    3026:	3a 81       	ldd	r19, Y+2	; 0x02
    3028:	4b 81       	ldd	r20, Y+3	; 0x03
    302a:	5c 81       	ldd	r21, Y+4	; 0x04
    302c:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	bc 01       	movw	r22, r24
    3036:	cd 01       	movw	r24, r26
    3038:	2d 81       	ldd	r18, Y+5	; 0x05
    303a:	3e 81       	ldd	r19, Y+6	; 0x06
    303c:	4f 81       	ldd	r20, Y+7	; 0x07
    303e:	58 85       	ldd	r21, Y+8	; 0x08
    3040:	0e 94 09 55 	call	0xaa12	; 0xaa12 <__addsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	bc 01       	movw	r22, r24
    304a:	cd 01       	movw	r24, r26
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	40 e0       	ldi	r20, 0x00	; 0
    3052:	50 e4       	ldi	r21, 0x40	; 64
    3054:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	9c 01       	movw	r18, r24
    305e:	ad 01       	movw	r20, r26
    3060:	c8 01       	movw	r24, r16
    3062:	88 0f       	add	r24, r24
    3064:	99 1f       	adc	r25, r25
    3066:	88 0f       	add	r24, r24
    3068:	99 1f       	adc	r25, r25
    306a:	fc 01       	movw	r30, r24
    306c:	ef 5b       	subi	r30, 0xBF	; 191
    306e:	fe 4d       	sbci	r31, 0xDE	; 222
    3070:	20 83       	st	Z, r18
    3072:	31 83       	std	Z+1, r19	; 0x01
    3074:	42 83       	std	Z+2, r20	; 0x02
    3076:	53 83       	std	Z+3, r21	; 0x03
	return (gc.status);
    3078:	80 91 00 21 	lds	r24, 0x2100
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	2d 87       	std	Y+13, r18	; 0x0d
    3082:	3e 87       	std	Y+14, r19	; 0x0e
    3084:	8d 85       	ldd	r24, Y+13	; 0x0d
    3086:	9e 85       	ldd	r25, Y+14	; 0x0e
} 
    3088:	2e 96       	adiw	r28, 0x0e	; 14
    308a:	cd bf       	out	0x3d, r28	; 61
    308c:	de bf       	out	0x3e, r29	; 62
    308e:	cf 91       	pop	r28
    3090:	df 91       	pop	r29
    3092:	1f 91       	pop	r17
    3094:	0f 91       	pop	r16
    3096:	ff 90       	pop	r15
    3098:	ef 90       	pop	r14
    309a:	df 90       	pop	r13
    309c:	cf 90       	pop	r12
    309e:	bf 90       	pop	r11
    30a0:	af 90       	pop	r10
    30a2:	08 95       	ret

000030a4 <_gc_compute_center_arc>:
 *
 * Compute the arc move given I and J (arc center point - found in offset vector).
 */

int _gc_compute_center_arc()
{
    30a4:	6f 92       	push	r6
    30a6:	7f 92       	push	r7
    30a8:	8f 92       	push	r8
    30aa:	9f 92       	push	r9
    30ac:	af 92       	push	r10
    30ae:	bf 92       	push	r11
    30b0:	cf 92       	push	r12
    30b2:	df 92       	push	r13
    30b4:	ef 92       	push	r14
    30b6:	ff 92       	push	r15
    30b8:	0f 93       	push	r16
    30ba:	1f 93       	push	r17
    30bc:	df 93       	push	r29
    30be:	cf 93       	push	r28
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    30c4:	a0 97       	sbiw	r28, 0x20	; 32
    30c6:	cd bf       	out	0x3d, r28	; 61
    30c8:	de bf       	out	0x3e, r29	; 62
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    30ca:	80 91 4d 21 	lds	r24, 0x214D
    30ce:	88 2f       	mov	r24, r24
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	88 0f       	add	r24, r24
    30d4:	99 1f       	adc	r25, r25
    30d6:	88 0f       	add	r24, r24
    30d8:	99 1f       	adc	r25, r25
    30da:	fc 01       	movw	r30, r24
    30dc:	ef 5b       	subi	r30, 0xBF	; 191
    30de:	fe 4d       	sbci	r31, 0xDE	; 222
    30e0:	80 81       	ld	r24, Z
    30e2:	91 81       	ldd	r25, Z+1	; 0x01
    30e4:	a2 81       	ldd	r26, Z+2	; 0x02
    30e6:	b3 81       	ldd	r27, Z+3	; 0x03
    30e8:	7c 01       	movw	r14, r24
    30ea:	8d 01       	movw	r16, r26
    30ec:	17 fb       	bst	r17, 7
    30ee:	10 95       	com	r17
    30f0:	17 f9       	bld	r17, 7
    30f2:	10 95       	com	r17
    30f4:	80 91 4e 21 	lds	r24, 0x214E
    30f8:	88 2f       	mov	r24, r24
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	88 0f       	add	r24, r24
    30fe:	99 1f       	adc	r25, r25
    3100:	88 0f       	add	r24, r24
    3102:	99 1f       	adc	r25, r25
    3104:	fc 01       	movw	r30, r24
    3106:	ef 5b       	subi	r30, 0xBF	; 191
    3108:	fe 4d       	sbci	r31, 0xDE	; 222
    310a:	80 81       	ld	r24, Z
    310c:	91 81       	ldd	r25, Z+1	; 0x01
    310e:	a2 81       	ldd	r26, Z+2	; 0x02
    3110:	b3 81       	ldd	r27, Z+3	; 0x03
    3112:	9c 01       	movw	r18, r24
    3114:	ad 01       	movw	r20, r26
    3116:	50 58       	subi	r21, 0x80	; 128
    3118:	c8 01       	movw	r24, r16
    311a:	b7 01       	movw	r22, r14
    311c:	0e 94 2a 11 	call	0x2254	; 0x2254 <theta>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	89 8b       	std	Y+17, r24	; 0x11
    3126:	9a 8b       	std	Y+18, r25	; 0x12
    3128:	ab 8b       	std	Y+19, r26	; 0x13
    312a:	bc 8b       	std	Y+20, r27	; 0x14
	if(isnan(theta_start)) { 
    312c:	69 89       	ldd	r22, Y+17	; 0x11
    312e:	7a 89       	ldd	r23, Y+18	; 0x12
    3130:	8b 89       	ldd	r24, Y+19	; 0x13
    3132:	9c 89       	ldd	r25, Y+20	; 0x14
    3134:	29 89       	ldd	r18, Y+17	; 0x11
    3136:	3a 89       	ldd	r19, Y+18	; 0x12
    3138:	4b 89       	ldd	r20, Y+19	; 0x13
    313a:	5c 89       	ldd	r21, Y+20	; 0x14
    313c:	0e 94 1f 59 	call	0xb23e	; 0xb23e <__unordsf2>
    3140:	88 23       	and	r24, r24
    3142:	51 f0       	breq	.+20     	; 0x3158 <_gc_compute_center_arc+0xb4>
		FAIL(TG_ARC_ERROR); 
    3144:	80 e1       	ldi	r24, 0x10	; 16
    3146:	80 93 00 21 	sts	0x2100, r24
		return(gc.status); 
    314a:	80 91 00 21 	lds	r24, 0x2100
    314e:	68 2e       	mov	r6, r24
    3150:	77 24       	eor	r7, r7
    3152:	6f 8e       	std	Y+31, r6	; 0x1f
    3154:	78 a2       	std	Y+32, r7	; 0x20
    3156:	9c c1       	rjmp	.+824    	; 0x3490 <_gc_compute_center_arc+0x3ec>
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    3158:	80 91 4d 21 	lds	r24, 0x214D
    315c:	88 2f       	mov	r24, r24
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	88 0f       	add	r24, r24
    3162:	99 1f       	adc	r25, r25
    3164:	88 0f       	add	r24, r24
    3166:	99 1f       	adc	r25, r25
    3168:	fc 01       	movw	r30, r24
    316a:	eb 5c       	subi	r30, 0xCB	; 203
    316c:	fe 4d       	sbci	r31, 0xDE	; 222
    316e:	e0 80       	ld	r14, Z
    3170:	f1 80       	ldd	r15, Z+1	; 0x01
    3172:	02 81       	ldd	r16, Z+2	; 0x02
    3174:	13 81       	ldd	r17, Z+3	; 0x03
    3176:	80 91 4d 21 	lds	r24, 0x214D
    317a:	88 2f       	mov	r24, r24
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	88 0f       	add	r24, r24
    3180:	99 1f       	adc	r25, r25
    3182:	88 0f       	add	r24, r24
    3184:	99 1f       	adc	r25, r25
    3186:	fc 01       	movw	r30, r24
    3188:	ef 5b       	subi	r30, 0xBF	; 191
    318a:	fe 4d       	sbci	r31, 0xDE	; 222
    318c:	20 81       	ld	r18, Z
    318e:	31 81       	ldd	r19, Z+1	; 0x01
    3190:	42 81       	ldd	r20, Z+2	; 0x02
    3192:	53 81       	ldd	r21, Z+3	; 0x03
    3194:	c8 01       	movw	r24, r16
    3196:	b7 01       	movw	r22, r14
    3198:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	7c 01       	movw	r14, r24
    31a2:	8d 01       	movw	r16, r26
    31a4:	80 91 4d 21 	lds	r24, 0x214D
    31a8:	88 2f       	mov	r24, r24
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	88 0f       	add	r24, r24
    31ae:	99 1f       	adc	r25, r25
    31b0:	88 0f       	add	r24, r24
    31b2:	99 1f       	adc	r25, r25
    31b4:	fc 01       	movw	r30, r24
    31b6:	e7 5d       	subi	r30, 0xD7	; 215
    31b8:	fe 4d       	sbci	r31, 0xDE	; 222
    31ba:	20 81       	ld	r18, Z
    31bc:	31 81       	ldd	r19, Z+1	; 0x01
    31be:	42 81       	ldd	r20, Z+2	; 0x02
    31c0:	53 81       	ldd	r21, Z+3	; 0x03
    31c2:	c8 01       	movw	r24, r16
    31c4:	b7 01       	movw	r22, r14
    31c6:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	5c 01       	movw	r10, r24
    31d0:	6d 01       	movw	r12, r26
    31d2:	80 91 4e 21 	lds	r24, 0x214E
    31d6:	88 2f       	mov	r24, r24
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	88 0f       	add	r24, r24
    31dc:	99 1f       	adc	r25, r25
    31de:	88 0f       	add	r24, r24
    31e0:	99 1f       	adc	r25, r25
    31e2:	fc 01       	movw	r30, r24
    31e4:	eb 5c       	subi	r30, 0xCB	; 203
    31e6:	fe 4d       	sbci	r31, 0xDE	; 222
    31e8:	e0 80       	ld	r14, Z
    31ea:	f1 80       	ldd	r15, Z+1	; 0x01
    31ec:	02 81       	ldd	r16, Z+2	; 0x02
    31ee:	13 81       	ldd	r17, Z+3	; 0x03
    31f0:	80 91 4e 21 	lds	r24, 0x214E
    31f4:	88 2f       	mov	r24, r24
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	88 0f       	add	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	88 0f       	add	r24, r24
    31fe:	99 1f       	adc	r25, r25
    3200:	fc 01       	movw	r30, r24
    3202:	ef 5b       	subi	r30, 0xBF	; 191
    3204:	fe 4d       	sbci	r31, 0xDE	; 222
    3206:	20 81       	ld	r18, Z
    3208:	31 81       	ldd	r19, Z+1	; 0x01
    320a:	42 81       	ldd	r20, Z+2	; 0x02
    320c:	53 81       	ldd	r21, Z+3	; 0x03
    320e:	c8 01       	movw	r24, r16
    3210:	b7 01       	movw	r22, r14
    3212:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	7c 01       	movw	r14, r24
    321c:	8d 01       	movw	r16, r26
    321e:	80 91 4e 21 	lds	r24, 0x214E
    3222:	88 2f       	mov	r24, r24
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	88 0f       	add	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	88 0f       	add	r24, r24
    322c:	99 1f       	adc	r25, r25
    322e:	fc 01       	movw	r30, r24
    3230:	e7 5d       	subi	r30, 0xD7	; 215
    3232:	fe 4d       	sbci	r31, 0xDE	; 222
    3234:	20 81       	ld	r18, Z
    3236:	31 81       	ldd	r19, Z+1	; 0x01
    3238:	42 81       	ldd	r20, Z+2	; 0x02
    323a:	53 81       	ldd	r21, Z+3	; 0x03
    323c:	c8 01       	movw	r24, r16
    323e:	b7 01       	movw	r22, r14
    3240:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	9c 01       	movw	r18, r24
    324a:	ad 01       	movw	r20, r26
    324c:	c6 01       	movw	r24, r12
    324e:	b5 01       	movw	r22, r10
    3250:	0e 94 2a 11 	call	0x2254	; 0x2254 <theta>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	8d 87       	std	Y+13, r24	; 0x0d
    325a:	9e 87       	std	Y+14, r25	; 0x0e
    325c:	af 87       	std	Y+15, r26	; 0x0f
    325e:	b8 8b       	std	Y+16, r27	; 0x10
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    3260:	6d 85       	ldd	r22, Y+13	; 0x0d
    3262:	7e 85       	ldd	r23, Y+14	; 0x0e
    3264:	8f 85       	ldd	r24, Y+15	; 0x0f
    3266:	98 89       	ldd	r25, Y+16	; 0x10
    3268:	2d 85       	ldd	r18, Y+13	; 0x0d
    326a:	3e 85       	ldd	r19, Y+14	; 0x0e
    326c:	4f 85       	ldd	r20, Y+15	; 0x0f
    326e:	58 89       	ldd	r21, Y+16	; 0x10
    3270:	0e 94 1f 59 	call	0xb23e	; 0xb23e <__unordsf2>
    3274:	88 23       	and	r24, r24
    3276:	51 f0       	breq	.+20     	; 0x328c <_gc_compute_center_arc+0x1e8>
		FAIL(TG_ARC_ERROR); 
    3278:	80 e1       	ldi	r24, 0x10	; 16
    327a:	80 93 00 21 	sts	0x2100, r24
		return(gc.status); 
    327e:	80 91 00 21 	lds	r24, 0x2100
    3282:	88 2e       	mov	r8, r24
    3284:	99 24       	eor	r9, r9
    3286:	8f 8e       	std	Y+31, r8	; 0x1f
    3288:	98 a2       	std	Y+32, r9	; 0x20
    328a:	02 c1       	rjmp	.+516    	; 0x3490 <_gc_compute_center_arc+0x3ec>
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    328c:	6d 85       	ldd	r22, Y+13	; 0x0d
    328e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3290:	8f 85       	ldd	r24, Y+15	; 0x0f
    3292:	98 89       	ldd	r25, Y+16	; 0x10
    3294:	29 89       	ldd	r18, Y+17	; 0x11
    3296:	3a 89       	ldd	r19, Y+18	; 0x12
    3298:	4b 89       	ldd	r20, Y+19	; 0x13
    329a:	5c 89       	ldd	r21, Y+20	; 0x14
    329c:	0e 94 a8 55 	call	0xab50	; 0xab50 <__cmpsf2>
    32a0:	88 23       	and	r24, r24
    32a2:	84 f4       	brge	.+32     	; 0x32c4 <_gc_compute_center_arc+0x220>
		theta_end += 2*M_PI;
    32a4:	6d 85       	ldd	r22, Y+13	; 0x0d
    32a6:	7e 85       	ldd	r23, Y+14	; 0x0e
    32a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    32aa:	98 89       	ldd	r25, Y+16	; 0x10
    32ac:	2b ed       	ldi	r18, 0xDB	; 219
    32ae:	3f e0       	ldi	r19, 0x0F	; 15
    32b0:	49 ec       	ldi	r20, 0xC9	; 201
    32b2:	50 e4       	ldi	r21, 0x40	; 64
    32b4:	0e 94 09 55 	call	0xaa12	; 0xaa12 <__addsf3>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	8d 87       	std	Y+13, r24	; 0x0d
    32be:	9e 87       	std	Y+14, r25	; 0x0e
    32c0:	af 87       	std	Y+15, r26	; 0x0f
    32c2:	b8 8b       	std	Y+16, r27	; 0x10
	}
	angular_travel = theta_end - theta_start;
    32c4:	6d 85       	ldd	r22, Y+13	; 0x0d
    32c6:	7e 85       	ldd	r23, Y+14	; 0x0e
    32c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ca:	98 89       	ldd	r25, Y+16	; 0x10
    32cc:	29 89       	ldd	r18, Y+17	; 0x11
    32ce:	3a 89       	ldd	r19, Y+18	; 0x12
    32d0:	4b 89       	ldd	r20, Y+19	; 0x13
    32d2:	5c 89       	ldd	r21, Y+20	; 0x14
    32d4:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	89 87       	std	Y+9, r24	; 0x09
    32de:	9a 87       	std	Y+10, r25	; 0x0a
    32e0:	ab 87       	std	Y+11, r26	; 0x0b
    32e2:	bc 87       	std	Y+12, r27	; 0x0c

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    32e4:	80 91 0b 21 	lds	r24, 0x210B
    32e8:	83 30       	cpi	r24, 0x03	; 3
    32ea:	81 f4       	brne	.+32     	; 0x330c <_gc_compute_center_arc+0x268>
		angular_travel = angular_travel - 2*M_PI;
    32ec:	69 85       	ldd	r22, Y+9	; 0x09
    32ee:	7a 85       	ldd	r23, Y+10	; 0x0a
    32f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    32f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    32f4:	2b ed       	ldi	r18, 0xDB	; 219
    32f6:	3f e0       	ldi	r19, 0x0F	; 15
    32f8:	49 ec       	ldi	r20, 0xC9	; 201
    32fa:	50 e4       	ldi	r21, 0x40	; 64
    32fc:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	89 87       	std	Y+9, r24	; 0x09
    3306:	9a 87       	std	Y+10, r25	; 0x0a
    3308:	ab 87       	std	Y+11, r26	; 0x0b
    330a:	bc 87       	std	Y+12, r27	; 0x0c
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    330c:	80 91 4d 21 	lds	r24, 0x214D
    3310:	88 2f       	mov	r24, r24
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	88 0f       	add	r24, r24
    3316:	99 1f       	adc	r25, r25
    3318:	88 0f       	add	r24, r24
    331a:	99 1f       	adc	r25, r25
    331c:	fc 01       	movw	r30, r24
    331e:	ef 5b       	subi	r30, 0xBF	; 191
    3320:	fe 4d       	sbci	r31, 0xDE	; 222
    3322:	e0 80       	ld	r14, Z
    3324:	f1 80       	ldd	r15, Z+1	; 0x01
    3326:	02 81       	ldd	r16, Z+2	; 0x02
    3328:	13 81       	ldd	r17, Z+3	; 0x03
    332a:	80 91 4e 21 	lds	r24, 0x214E
    332e:	88 2f       	mov	r24, r24
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	88 0f       	add	r24, r24
    3338:	99 1f       	adc	r25, r25
    333a:	fc 01       	movw	r30, r24
    333c:	ef 5b       	subi	r30, 0xBF	; 191
    333e:	fe 4d       	sbci	r31, 0xDE	; 222
    3340:	20 81       	ld	r18, Z
    3342:	31 81       	ldd	r19, Z+1	; 0x01
    3344:	42 81       	ldd	r20, Z+2	; 0x02
    3346:	53 81       	ldd	r21, Z+3	; 0x03
    3348:	c8 01       	movw	r24, r16
    334a:	b7 01       	movw	r22, r14
    334c:	0e 94 a5 57 	call	0xaf4a	; 0xaf4a <hypot>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	8d 83       	std	Y+5, r24	; 0x05
    3356:	9e 83       	std	Y+6, r25	; 0x06
    3358:	af 83       	std	Y+7, r26	; 0x07
    335a:	b8 87       	std	Y+8, r27	; 0x08

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    335c:	80 91 4f 21 	lds	r24, 0x214F
    3360:	88 2f       	mov	r24, r24
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	88 0f       	add	r24, r24
    3366:	99 1f       	adc	r25, r25
    3368:	88 0f       	add	r24, r24
    336a:	99 1f       	adc	r25, r25
    336c:	fc 01       	movw	r30, r24
    336e:	eb 5c       	subi	r30, 0xCB	; 203
    3370:	fe 4d       	sbci	r31, 0xDE	; 222
    3372:	e0 80       	ld	r14, Z
    3374:	f1 80       	ldd	r15, Z+1	; 0x01
    3376:	02 81       	ldd	r16, Z+2	; 0x02
    3378:	13 81       	ldd	r17, Z+3	; 0x03
    337a:	80 91 4f 21 	lds	r24, 0x214F
    337e:	88 2f       	mov	r24, r24
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	88 0f       	add	r24, r24
    3384:	99 1f       	adc	r25, r25
    3386:	88 0f       	add	r24, r24
    3388:	99 1f       	adc	r25, r25
    338a:	fc 01       	movw	r30, r24
    338c:	e7 5d       	subi	r30, 0xD7	; 215
    338e:	fe 4d       	sbci	r31, 0xDE	; 222
    3390:	20 81       	ld	r18, Z
    3392:	31 81       	ldd	r19, Z+1	; 0x01
    3394:	42 81       	ldd	r20, Z+2	; 0x02
    3396:	53 81       	ldd	r21, Z+3	; 0x03
    3398:	c8 01       	movw	r24, r16
    339a:	b7 01       	movw	r22, r14
    339c:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	89 83       	std	Y+1, r24	; 0x01
    33a6:	9a 83       	std	Y+2, r25	; 0x02
    33a8:	ab 83       	std	Y+3, r26	; 0x03
    33aa:	bc 83       	std	Y+4, r27	; 0x04

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    33ac:	80 91 4d 21 	lds	r24, 0x214D
    33b0:	28 2f       	mov	r18, r24
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	2d 8f       	std	Y+29, r18	; 0x1d
    33b6:	3e 8f       	std	Y+30, r19	; 0x1e
    33b8:	80 91 4e 21 	lds	r24, 0x214E
    33bc:	a8 2f       	mov	r26, r24
    33be:	b0 e0       	ldi	r27, 0x00	; 0
    33c0:	ab 8f       	std	Y+27, r26	; 0x1b
    33c2:	bc 8f       	std	Y+28, r27	; 0x1c
    33c4:	80 91 4f 21 	lds	r24, 0x214F
    33c8:	68 2e       	mov	r6, r24
    33ca:	77 24       	eor	r7, r7
    33cc:	69 8e       	std	Y+25, r6	; 0x19
    33ce:	7a 8e       	std	Y+26, r7	; 0x1a
    33d0:	80 91 0c 21 	lds	r24, 0x210C
    33d4:	88 23       	and	r24, r24
    33d6:	69 f0       	breq	.+26     	; 0x33f2 <_gc_compute_center_arc+0x34e>
    33d8:	80 91 25 21 	lds	r24, 0x2125
    33dc:	90 91 26 21 	lds	r25, 0x2126
    33e0:	a0 91 27 21 	lds	r26, 0x2127
    33e4:	b0 91 28 21 	lds	r27, 0x2128
    33e8:	8d 8b       	std	Y+21, r24	; 0x15
    33ea:	9e 8b       	std	Y+22, r25	; 0x16
    33ec:	af 8b       	std	Y+23, r26	; 0x17
    33ee:	b8 8f       	std	Y+24, r27	; 0x18
    33f0:	0c c0       	rjmp	.+24     	; 0x340a <_gc_compute_center_arc+0x366>
    33f2:	60 90 19 21 	lds	r6, 0x2119
    33f6:	70 90 1a 21 	lds	r7, 0x211A
    33fa:	80 90 1b 21 	lds	r8, 0x211B
    33fe:	90 90 1c 21 	lds	r9, 0x211C
    3402:	6d 8a       	std	Y+21, r6	; 0x15
    3404:	7e 8a       	std	Y+22, r7	; 0x16
    3406:	8f 8a       	std	Y+23, r8	; 0x17
    3408:	98 8e       	std	Y+24, r9	; 0x18
    340a:	80 91 0c 21 	lds	r24, 0x210C
    340e:	68 2f       	mov	r22, r24
    3410:	70 e0       	ldi	r23, 0x00	; 0
    3412:	2d b7       	in	r18, 0x3d	; 61
    3414:	3e b7       	in	r19, 0x3e	; 62
    3416:	2a 50       	subi	r18, 0x0A	; 10
    3418:	30 40       	sbci	r19, 0x00	; 0
    341a:	2d bf       	out	0x3d, r18	; 61
    341c:	3e bf       	out	0x3e, r19	; 62
    341e:	ed b7       	in	r30, 0x3d	; 61
    3420:	fe b7       	in	r31, 0x3e	; 62
    3422:	31 96       	adiw	r30, 0x01	; 1
    3424:	89 89       	ldd	r24, Y+17	; 0x11
    3426:	9a 89       	ldd	r25, Y+18	; 0x12
    3428:	ab 89       	ldd	r26, Y+19	; 0x13
    342a:	bc 89       	ldd	r27, Y+20	; 0x14
    342c:	29 85       	ldd	r18, Y+9	; 0x09
    342e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3430:	4b 85       	ldd	r20, Y+11	; 0x0b
    3432:	5c 85       	ldd	r21, Y+12	; 0x0c
    3434:	ed 80       	ldd	r14, Y+5	; 0x05
    3436:	fe 80       	ldd	r15, Y+6	; 0x06
    3438:	0f 81       	ldd	r16, Y+7	; 0x07
    343a:	18 85       	ldd	r17, Y+8	; 0x08
    343c:	a9 80       	ldd	r10, Y+1	; 0x01
    343e:	ba 80       	ldd	r11, Y+2	; 0x02
    3440:	cb 80       	ldd	r12, Y+3	; 0x03
    3442:	dc 80       	ldd	r13, Y+4	; 0x04
    3444:	6b 8c       	ldd	r6, Y+27	; 0x1b
    3446:	7c 8c       	ldd	r7, Y+28	; 0x1c
    3448:	60 82       	st	Z, r6
    344a:	71 82       	std	Z+1, r7	; 0x01
    344c:	89 8c       	ldd	r8, Y+25	; 0x19
    344e:	9a 8c       	ldd	r9, Y+26	; 0x1a
    3450:	82 82       	std	Z+2, r8	; 0x02
    3452:	93 82       	std	Z+3, r9	; 0x03
    3454:	6d 88       	ldd	r6, Y+21	; 0x15
    3456:	7e 88       	ldd	r7, Y+22	; 0x16
    3458:	8f 88       	ldd	r8, Y+23	; 0x17
    345a:	98 8c       	ldd	r9, Y+24	; 0x18
    345c:	64 82       	std	Z+4, r6	; 0x04
    345e:	75 82       	std	Z+5, r7	; 0x05
    3460:	86 82       	std	Z+6, r8	; 0x06
    3462:	97 82       	std	Z+7, r9	; 0x07
    3464:	60 87       	std	Z+8, r22	; 0x08
    3466:	71 87       	std	Z+9, r23	; 0x09
    3468:	bc 01       	movw	r22, r24
    346a:	cd 01       	movw	r24, r26
    346c:	8d 8c       	ldd	r8, Y+29	; 0x1d
    346e:	9e 8c       	ldd	r9, Y+30	; 0x1e
    3470:	0e 94 36 2b 	call	0x566c	; 0x566c <mc_arc>
    3474:	2d b7       	in	r18, 0x3d	; 61
    3476:	3e b7       	in	r19, 0x3e	; 62
    3478:	26 5f       	subi	r18, 0xF6	; 246
    347a:	3f 4f       	sbci	r19, 0xFF	; 255
    347c:	2d bf       	out	0x3d, r18	; 61
    347e:	3e bf       	out	0x3e, r19	; 62
    3480:	80 93 00 21 	sts	0x2100, r24
	// has completed the arc. So the endpoint should be passed to the generator and
	// executed there.
//	gc.status = mc_line(gc.target[X_AXIS], gc.target[Y_AXIS], gc.target[Z_AXIS], 
//					   (gc.inverse_feed_rate_mode) ? gc.inverse_feed_rate : 
//						gc.feed_rate, gc.inverse_feed_rate_mode);
	return (gc.status);
    3484:	80 91 00 21 	lds	r24, 0x2100
    3488:	a8 2f       	mov	r26, r24
    348a:	b0 e0       	ldi	r27, 0x00	; 0
    348c:	af 8f       	std	Y+31, r26	; 0x1f
    348e:	b8 a3       	std	Y+32, r27	; 0x20
    3490:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3492:	98 a1       	ldd	r25, Y+32	; 0x20
}
    3494:	a0 96       	adiw	r28, 0x20	; 32
    3496:	cd bf       	out	0x3d, r28	; 61
    3498:	de bf       	out	0x3e, r29	; 62
    349a:	cf 91       	pop	r28
    349c:	df 91       	pop	r29
    349e:	1f 91       	pop	r17
    34a0:	0f 91       	pop	r16
    34a2:	ff 90       	pop	r15
    34a4:	ef 90       	pop	r14
    34a6:	df 90       	pop	r13
    34a8:	cf 90       	pop	r12
    34aa:	bf 90       	pop	r11
    34ac:	af 90       	pop	r10
    34ae:	9f 90       	pop	r9
    34b0:	8f 90       	pop	r8
    34b2:	7f 90       	pop	r7
    34b4:	6f 90       	pop	r6
    34b6:	08 95       	ret

000034b8 <cfg_init>:
/* 
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
    34b8:	df 93       	push	r29
    34ba:	cf 93       	push	r28
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
	cfg_reset();
    34c0:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <cfg_reset>
}
    34c4:	cf 91       	pop	r28
    34c6:	df 91       	pop	r29
    34c8:	08 95       	ret

000034ca <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    34ca:	0f 93       	push	r16
    34cc:	1f 93       	push	r17
    34ce:	df 93       	push	r29
    34d0:	cf 93       	push	r28
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
    34d6:	2f 97       	sbiw	r28, 0x0f	; 15
    34d8:	cd bf       	out	0x3d, r28	; 61
    34da:	de bf       	out	0x3e, r29	; 62
    34dc:	89 87       	std	Y+9, r24	; 0x09
    34de:	9a 87       	std	Y+10, r25	; 0x0a
	char c;
	char *val = 0;				// pointer to normalized value 
    34e0:	1c 82       	std	Y+4, r1	; 0x04
    34e2:	1d 82       	std	Y+5, r1	; 0x05
	char *end = 0;				// pointer to end of value
    34e4:	1f 82       	std	Y+7, r1	; 0x07
    34e6:	18 86       	std	Y+8, r1	; 0x08
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
    34e8:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t j = 0;				// buffer write index
    34ea:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t	axis = 0;			// axis index
    34ec:	19 82       	std	Y+1, r1	; 0x01
    34ee:	72 c0       	rjmp	.+228    	; 0x35d4 <cfg_parse+0x10a>

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
		if (c == '=') {							// handle separator
    34f0:	8e 81       	ldd	r24, Y+6	; 0x06
    34f2:	8d 33       	cpi	r24, 0x3D	; 61
    34f4:	b1 f4       	brne	.+44     	; 0x3522 <cfg_parse+0x58>
			text[j++] = 0;						// terminate tag at separator
    34f6:	8a 81       	ldd	r24, Y+2	; 0x02
    34f8:	28 2f       	mov	r18, r24
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	89 85       	ldd	r24, Y+9	; 0x09
    34fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3500:	fc 01       	movw	r30, r24
    3502:	e2 0f       	add	r30, r18
    3504:	f3 1f       	adc	r31, r19
    3506:	10 82       	st	Z, r1
    3508:	8a 81       	ldd	r24, Y+2	; 0x02
    350a:	8f 5f       	subi	r24, 0xFF	; 255
    350c:	8a 83       	std	Y+2, r24	; 0x02
			val = &text[j];						// new string starts at value
    350e:	8a 81       	ldd	r24, Y+2	; 0x02
    3510:	28 2f       	mov	r18, r24
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	89 85       	ldd	r24, Y+9	; 0x09
    3516:	9a 85       	ldd	r25, Y+10	; 0x0a
    3518:	82 0f       	add	r24, r18
    351a:	93 1f       	adc	r25, r19
    351c:	8c 83       	std	Y+4, r24	; 0x04
    351e:	9d 83       	std	Y+5, r25	; 0x05
    3520:	59 c0       	rjmp	.+178    	; 0x35d4 <cfg_parse+0x10a>
		} else if ( (c == '-') || 				// pass special characters
    3522:	8e 81       	ldd	r24, Y+6	; 0x06
    3524:	8d 32       	cpi	r24, 0x2D	; 45
    3526:	61 f0       	breq	.+24     	; 0x3540 <cfg_parse+0x76>
    3528:	8e 81       	ldd	r24, Y+6	; 0x06
    352a:	8b 32       	cpi	r24, 0x2B	; 43
    352c:	49 f0       	breq	.+18     	; 0x3540 <cfg_parse+0x76>
    352e:	8e 81       	ldd	r24, Y+6	; 0x06
    3530:	8e 32       	cpi	r24, 0x2E	; 46
    3532:	31 f0       	breq	.+12     	; 0x3540 <cfg_parse+0x76>
    3534:	8e 81       	ldd	r24, Y+6	; 0x06
    3536:	8f 33       	cpi	r24, 0x3F	; 63
    3538:	19 f0       	breq	.+6      	; 0x3540 <cfg_parse+0x76>
    353a:	8e 81       	ldd	r24, Y+6	; 0x06
    353c:	88 32       	cpi	r24, 0x28	; 40
    353e:	71 f4       	brne	.+28     	; 0x355c <cfg_parse+0x92>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
    3540:	8a 81       	ldd	r24, Y+2	; 0x02
    3542:	28 2f       	mov	r18, r24
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	89 85       	ldd	r24, Y+9	; 0x09
    3548:	9a 85       	ldd	r25, Y+10	; 0x0a
    354a:	fc 01       	movw	r30, r24
    354c:	e2 0f       	add	r30, r18
    354e:	f3 1f       	adc	r31, r19
    3550:	8e 81       	ldd	r24, Y+6	; 0x06
    3552:	80 83       	st	Z, r24
    3554:	8a 81       	ldd	r24, Y+2	; 0x02
    3556:	8f 5f       	subi	r24, 0xFF	; 255
    3558:	8a 83       	std	Y+2, r24	; 0x02
    355a:	3c c0       	rjmp	.+120    	; 0x35d4 <cfg_parse+0x10a>
		} else if (c >= 'a' && c <= 'z') {		// convert lower to upper
    355c:	8e 81       	ldd	r24, Y+6	; 0x06
    355e:	81 36       	cpi	r24, 0x61	; 97
    3560:	90 f0       	brcs	.+36     	; 0x3586 <cfg_parse+0xbc>
    3562:	8e 81       	ldd	r24, Y+6	; 0x06
    3564:	8b 37       	cpi	r24, 0x7B	; 123
    3566:	78 f4       	brcc	.+30     	; 0x3586 <cfg_parse+0xbc>
			text[j++] = c-'a'+'A';
    3568:	8a 81       	ldd	r24, Y+2	; 0x02
    356a:	28 2f       	mov	r18, r24
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	89 85       	ldd	r24, Y+9	; 0x09
    3570:	9a 85       	ldd	r25, Y+10	; 0x0a
    3572:	fc 01       	movw	r30, r24
    3574:	e2 0f       	add	r30, r18
    3576:	f3 1f       	adc	r31, r19
    3578:	8e 81       	ldd	r24, Y+6	; 0x06
    357a:	80 52       	subi	r24, 0x20	; 32
    357c:	80 83       	st	Z, r24
    357e:	8a 81       	ldd	r24, Y+2	; 0x02
    3580:	8f 5f       	subi	r24, 0xFF	; 255
    3582:	8a 83       	std	Y+2, r24	; 0x02
    3584:	27 c0       	rjmp	.+78     	; 0x35d4 <cfg_parse+0x10a>
		} else if (c >= 'A' && c <= 'Z') {		// pass upper case letters
    3586:	8e 81       	ldd	r24, Y+6	; 0x06
    3588:	81 34       	cpi	r24, 0x41	; 65
    358a:	88 f0       	brcs	.+34     	; 0x35ae <cfg_parse+0xe4>
    358c:	8e 81       	ldd	r24, Y+6	; 0x06
    358e:	8b 35       	cpi	r24, 0x5B	; 91
    3590:	70 f4       	brcc	.+28     	; 0x35ae <cfg_parse+0xe4>
			text[j++] = c;
    3592:	8a 81       	ldd	r24, Y+2	; 0x02
    3594:	28 2f       	mov	r18, r24
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	89 85       	ldd	r24, Y+9	; 0x09
    359a:	9a 85       	ldd	r25, Y+10	; 0x0a
    359c:	fc 01       	movw	r30, r24
    359e:	e2 0f       	add	r30, r18
    35a0:	f3 1f       	adc	r31, r19
    35a2:	8e 81       	ldd	r24, Y+6	; 0x06
    35a4:	80 83       	st	Z, r24
    35a6:	8a 81       	ldd	r24, Y+2	; 0x02
    35a8:	8f 5f       	subi	r24, 0xFF	; 255
    35aa:	8a 83       	std	Y+2, r24	; 0x02
    35ac:	13 c0       	rjmp	.+38     	; 0x35d4 <cfg_parse+0x10a>
		} else if (c >= '0' && c <= '9') {		// pass numbers
    35ae:	8e 81       	ldd	r24, Y+6	; 0x06
    35b0:	80 33       	cpi	r24, 0x30	; 48
    35b2:	80 f0       	brcs	.+32     	; 0x35d4 <cfg_parse+0x10a>
    35b4:	8e 81       	ldd	r24, Y+6	; 0x06
    35b6:	8a 33       	cpi	r24, 0x3A	; 58
    35b8:	68 f4       	brcc	.+26     	; 0x35d4 <cfg_parse+0x10a>
			text[j++] = c;
    35ba:	8a 81       	ldd	r24, Y+2	; 0x02
    35bc:	28 2f       	mov	r18, r24
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	89 85       	ldd	r24, Y+9	; 0x09
    35c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c4:	fc 01       	movw	r30, r24
    35c6:	e2 0f       	add	r30, r18
    35c8:	f3 1f       	adc	r31, r19
    35ca:	8e 81       	ldd	r24, Y+6	; 0x06
    35cc:	80 83       	st	Z, r24
    35ce:	8a 81       	ldd	r24, Y+2	; 0x02
    35d0:	8f 5f       	subi	r24, 0xFF	; 255
    35d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
    35d4:	8b 81       	ldd	r24, Y+3	; 0x03
    35d6:	28 2f       	mov	r18, r24
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	89 85       	ldd	r24, Y+9	; 0x09
    35dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35de:	fc 01       	movw	r30, r24
    35e0:	e2 0f       	add	r30, r18
    35e2:	f3 1f       	adc	r31, r19
    35e4:	80 81       	ld	r24, Z
    35e6:	8e 83       	std	Y+6, r24	; 0x06
    35e8:	2e 81       	ldd	r18, Y+6	; 0x06
    35ea:	2f 87       	std	Y+15, r18	; 0x0f
    35ec:	3f 85       	ldd	r19, Y+15	; 0x0f
    35ee:	33 23       	and	r19, r19
    35f0:	11 f0       	breq	.+4      	; 0x35f6 <cfg_parse+0x12c>
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	8f 87       	std	Y+15, r24	; 0x0f
    35f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    35f8:	9b 81       	ldd	r25, Y+3	; 0x03
    35fa:	9f 5f       	subi	r25, 0xFF	; 255
    35fc:	9b 83       	std	Y+3, r25	; 0x03
    35fe:	88 23       	and	r24, r24
    3600:	09 f0       	breq	.+2      	; 0x3604 <cfg_parse+0x13a>
    3602:	76 cf       	rjmp	.-276    	; 0x34f0 <cfg_parse+0x26>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// terminate line
    3604:	8a 81       	ldd	r24, Y+2	; 0x02
    3606:	28 2f       	mov	r18, r24
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	89 85       	ldd	r24, Y+9	; 0x09
    360c:	9a 85       	ldd	r25, Y+10	; 0x0a
    360e:	fc 01       	movw	r30, r24
    3610:	e2 0f       	add	r30, r18
    3612:	f3 1f       	adc	r31, r19
    3614:	10 82       	st	Z, r1
    3616:	8a 81       	ldd	r24, Y+2	; 0x02
    3618:	8f 5f       	subi	r24, 0xFF	; 255
    361a:	8a 83       	std	Y+2, r24	; 0x02
	end = &text[j];								// needed for string-to-double
    361c:	8a 81       	ldd	r24, Y+2	; 0x02
    361e:	28 2f       	mov	r18, r24
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	89 85       	ldd	r24, Y+9	; 0x09
    3624:	9a 85       	ldd	r25, Y+10	; 0x0a
    3626:	82 0f       	add	r24, r18
    3628:	93 1f       	adc	r25, r19
    362a:	8f 83       	std	Y+7, r24	; 0x07
    362c:	98 87       	std	Y+8, r25	; 0x08

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    362e:	10 92 74 23 	sts	0x2374, r1
	switch (text[0]) {
    3632:	e9 85       	ldd	r30, Y+9	; 0x09
    3634:	fa 85       	ldd	r31, Y+10	; 0x0a
    3636:	80 81       	ld	r24, Z
    3638:	28 2f       	mov	r18, r24
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	2d 87       	std	Y+13, r18	; 0x0d
    363e:	3e 87       	std	Y+14, r19	; 0x0e
    3640:	8d 85       	ldd	r24, Y+13	; 0x0d
    3642:	9e 85       	ldd	r25, Y+14	; 0x0e
    3644:	81 35       	cpi	r24, 0x51	; 81
    3646:	91 05       	cpc	r25, r1
    3648:	c9 f1       	breq	.+114    	; 0x36bc <cfg_parse+0x1f2>
    364a:	2d 85       	ldd	r18, Y+13	; 0x0d
    364c:	3e 85       	ldd	r19, Y+14	; 0x0e
    364e:	22 35       	cpi	r18, 0x52	; 82
    3650:	31 05       	cpc	r19, r1
    3652:	e4 f4       	brge	.+56     	; 0x368c <cfg_parse+0x1c2>
    3654:	8d 85       	ldd	r24, Y+13	; 0x0d
    3656:	9e 85       	ldd	r25, Y+14	; 0x0e
    3658:	81 34       	cpi	r24, 0x41	; 65
    365a:	91 05       	cpc	r25, r1
    365c:	09 f4       	brne	.+2      	; 0x3660 <cfg_parse+0x196>
    365e:	4f c0       	rjmp	.+158    	; 0x36fe <cfg_parse+0x234>
    3660:	2d 85       	ldd	r18, Y+13	; 0x0d
    3662:	3e 85       	ldd	r19, Y+14	; 0x0e
    3664:	22 34       	cpi	r18, 0x42	; 66
    3666:	31 05       	cpc	r19, r1
    3668:	5c f4       	brge	.+22     	; 0x3680 <cfg_parse+0x1b6>
    366a:	8d 85       	ldd	r24, Y+13	; 0x0d
    366c:	9e 85       	ldd	r25, Y+14	; 0x0e
    366e:	88 32       	cpi	r24, 0x28	; 40
    3670:	91 05       	cpc	r25, r1
    3672:	09 f1       	breq	.+66     	; 0x36b6 <cfg_parse+0x1ec>
    3674:	2d 85       	ldd	r18, Y+13	; 0x0d
    3676:	3e 85       	ldd	r19, Y+14	; 0x0e
    3678:	2f 33       	cpi	r18, 0x3F	; 63
    367a:	31 05       	cpc	r19, r1
    367c:	b9 f0       	breq	.+46     	; 0x36ac <cfg_parse+0x1e2>
    367e:	42 c0       	rjmp	.+132    	; 0x3704 <cfg_parse+0x23a>
    3680:	8d 85       	ldd	r24, Y+13	; 0x0d
    3682:	9e 85       	ldd	r25, Y+14	; 0x0e
    3684:	8d 34       	cpi	r24, 0x4D	; 77
    3686:	91 05       	cpc	r25, r1
    3688:	e9 f0       	breq	.+58     	; 0x36c4 <cfg_parse+0x1fa>
    368a:	3c c0       	rjmp	.+120    	; 0x3704 <cfg_parse+0x23a>
    368c:	2d 85       	ldd	r18, Y+13	; 0x0d
    368e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3690:	29 35       	cpi	r18, 0x59	; 89
    3692:	31 05       	cpc	r19, r1
    3694:	71 f1       	breq	.+92     	; 0x36f2 <cfg_parse+0x228>
    3696:	8d 85       	ldd	r24, Y+13	; 0x0d
    3698:	9e 85       	ldd	r25, Y+14	; 0x0e
    369a:	8a 35       	cpi	r24, 0x5A	; 90
    369c:	91 05       	cpc	r25, r1
    369e:	61 f1       	breq	.+88     	; 0x36f8 <cfg_parse+0x22e>
    36a0:	2d 85       	ldd	r18, Y+13	; 0x0d
    36a2:	3e 85       	ldd	r19, Y+14	; 0x0e
    36a4:	28 35       	cpi	r18, 0x58	; 88
    36a6:	31 05       	cpc	r19, r1
    36a8:	11 f1       	breq	.+68     	; 0x36ee <cfg_parse+0x224>
    36aa:	2c c0       	rjmp	.+88     	; 0x3704 <cfg_parse+0x23a>
		case '?': cfg_dump(); status (TG_OK); break;
    36ac:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <cfg_dump>
    36b0:	10 92 74 23 	sts	0x2374, r1
    36b4:	2a c0       	rjmp	.+84     	; 0x370a <cfg_parse+0x240>
		case '(': status (TG_OK);	break;			// ignore comment lines
    36b6:	10 92 74 23 	sts	0x2374, r1
    36ba:	27 c0       	rjmp	.+78     	; 0x370a <cfg_parse+0x240>
		case 'Q': status (TG_QUIT); break;
    36bc:	83 e0       	ldi	r24, 0x03	; 3
    36be:	80 93 74 23 	sts	0x2374, r24
    36c2:	23 c0       	rjmp	.+70     	; 0x370a <cfg_parse+0x240>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    36c4:	8c 81       	ldd	r24, Y+4	; 0x04
    36c6:	9d 81       	ldd	r25, Y+5	; 0x05
    36c8:	9e 01       	movw	r18, r28
    36ca:	29 5f       	subi	r18, 0xF9	; 249
    36cc:	3f 4f       	sbci	r19, 0xFF	; 255
    36ce:	b9 01       	movw	r22, r18
    36d0:	0e 94 b3 59 	call	0xb366	; 0xb366 <strtod>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	80 93 75 23 	sts	0x2375, r24
    36dc:	90 93 76 23 	sts	0x2376, r25
    36e0:	a0 93 77 23 	sts	0x2377, r26
    36e4:	b0 93 78 23 	sts	0x2378, r27
				  status(TG_OK); 
    36e8:	10 92 74 23 	sts	0x2374, r1
    36ec:	0e c0       	rjmp	.+28     	; 0x370a <cfg_parse+0x240>
				  break;

		case 'X': axis = X; break;
    36ee:	19 82       	std	Y+1, r1	; 0x01
    36f0:	0c c0       	rjmp	.+24     	; 0x370a <cfg_parse+0x240>
		case 'Y': axis = Y; break;
    36f2:	81 e0       	ldi	r24, 0x01	; 1
    36f4:	89 83       	std	Y+1, r24	; 0x01
    36f6:	09 c0       	rjmp	.+18     	; 0x370a <cfg_parse+0x240>
		case 'Z': axis = Z; break;
    36f8:	82 e0       	ldi	r24, 0x02	; 2
    36fa:	89 83       	std	Y+1, r24	; 0x01
    36fc:	06 c0       	rjmp	.+12     	; 0x370a <cfg_parse+0x240>
		case 'A': axis = A; break;
    36fe:	83 e0       	ldi	r24, 0x03	; 3
    3700:	89 83       	std	Y+1, r24	; 0x01
    3702:	03 c0       	rjmp	.+6      	; 0x370a <cfg_parse+0x240>

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    3704:	89 e0       	ldi	r24, 0x09	; 9
    3706:	80 93 74 23 	sts	0x2374, r24
	}
	if (cfg.status == TG_OK) {
    370a:	80 91 74 23 	lds	r24, 0x2374
    370e:	88 23       	and	r24, r24
    3710:	09 f0       	breq	.+2      	; 0x3714 <cfg_parse+0x24a>
    3712:	62 c1       	rjmp	.+708    	; 0x39d8 <cfg_parse+0x50e>
		status(TG_OK);							// pre-emptive setting
    3714:	10 92 74 23 	sts	0x2374, r1
		switch (text[1]) {
    3718:	89 85       	ldd	r24, Y+9	; 0x09
    371a:	9a 85       	ldd	r25, Y+10	; 0x0a
    371c:	fc 01       	movw	r30, r24
    371e:	31 96       	adiw	r30, 0x01	; 1
    3720:	80 81       	ld	r24, Z
    3722:	28 2f       	mov	r18, r24
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	2b 87       	std	Y+11, r18	; 0x0b
    3728:	3c 87       	std	Y+12, r19	; 0x0c
    372a:	8b 85       	ldd	r24, Y+11	; 0x0b
    372c:	9c 85       	ldd	r25, Y+12	; 0x0c
    372e:	8c 34       	cpi	r24, 0x4C	; 76
    3730:	91 05       	cpc	r25, r1
    3732:	09 f4       	brne	.+2      	; 0x3736 <cfg_parse+0x26c>
    3734:	10 c1       	rjmp	.+544    	; 0x3956 <cfg_parse+0x48c>
    3736:	2b 85       	ldd	r18, Y+11	; 0x0b
    3738:	3c 85       	ldd	r19, Y+12	; 0x0c
    373a:	2d 34       	cpi	r18, 0x4D	; 77
    373c:	31 05       	cpc	r19, r1
    373e:	64 f4       	brge	.+24     	; 0x3758 <cfg_parse+0x28e>
    3740:	8b 85       	ldd	r24, Y+11	; 0x0b
    3742:	9c 85       	ldd	r25, Y+12	; 0x0c
    3744:	84 34       	cpi	r24, 0x44	; 68
    3746:	91 05       	cpc	r25, r1
    3748:	09 f4       	brne	.+2      	; 0x374c <cfg_parse+0x282>
    374a:	4a c0       	rjmp	.+148    	; 0x37e0 <cfg_parse+0x316>
    374c:	2b 85       	ldd	r18, Y+11	; 0x0b
    374e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3750:	26 34       	cpi	r18, 0x46	; 70
    3752:	31 05       	cpc	r19, r1
    3754:	61 f1       	breq	.+88     	; 0x37ae <cfg_parse+0x2e4>
    3756:	3d c1       	rjmp	.+634    	; 0x39d2 <cfg_parse+0x508>
    3758:	8b 85       	ldd	r24, Y+11	; 0x0b
    375a:	9c 85       	ldd	r25, Y+12	; 0x0c
    375c:	80 35       	cpi	r24, 0x50	; 80
    375e:	91 05       	cpc	r25, r1
    3760:	09 f4       	brne	.+2      	; 0x3764 <cfg_parse+0x29a>
    3762:	5e c0       	rjmp	.+188    	; 0x3820 <cfg_parse+0x356>
    3764:	2b 85       	ldd	r18, Y+11	; 0x0b
    3766:	3c 85       	ldd	r19, Y+12	; 0x0c
    3768:	23 35       	cpi	r18, 0x53	; 83
    376a:	31 05       	cpc	r19, r1
    376c:	39 f0       	breq	.+14     	; 0x377c <cfg_parse+0x2b2>
    376e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3770:	9c 85       	ldd	r25, Y+12	; 0x0c
    3772:	8d 34       	cpi	r24, 0x4D	; 77
    3774:	91 05       	cpc	r25, r1
    3776:	09 f4       	brne	.+2      	; 0x377a <cfg_parse+0x2b0>
    3778:	81 c0       	rjmp	.+258    	; 0x387c <cfg_parse+0x3b2>
    377a:	2b c1       	rjmp	.+598    	; 0x39d2 <cfg_parse+0x508>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    377c:	89 81       	ldd	r24, Y+1	; 0x01
    377e:	08 2f       	mov	r16, r24
    3780:	10 e0       	ldi	r17, 0x00	; 0
    3782:	8c 81       	ldd	r24, Y+4	; 0x04
    3784:	9d 81       	ldd	r25, Y+5	; 0x05
    3786:	0e 94 21 5b 	call	0xb642	; 0xb642 <atoi>
    378a:	9c 01       	movw	r18, r24
    378c:	c8 01       	movw	r24, r16
    378e:	88 0f       	add	r24, r24
    3790:	99 1f       	adc	r25, r25
    3792:	80 0f       	add	r24, r16
    3794:	91 1f       	adc	r25, r17
    3796:	88 0f       	add	r24, r24
    3798:	99 1f       	adc	r25, r25
    379a:	88 0f       	add	r24, r24
    379c:	99 1f       	adc	r25, r25
    379e:	88 0f       	add	r24, r24
    37a0:	99 1f       	adc	r25, r25
    37a2:	fc 01       	movw	r30, r24
    37a4:	ec 57       	subi	r30, 0x7C	; 124
    37a6:	fc 4d       	sbci	r31, 0xDC	; 220
    37a8:	20 83       	st	Z, r18
    37aa:	31 83       	std	Z+1, r19	; 0x01
    37ac:	15 c1       	rjmp	.+554    	; 0x39d8 <cfg_parse+0x50e>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    37ae:	89 81       	ldd	r24, Y+1	; 0x01
    37b0:	08 2f       	mov	r16, r24
    37b2:	10 e0       	ldi	r17, 0x00	; 0
    37b4:	8c 81       	ldd	r24, Y+4	; 0x04
    37b6:	9d 81       	ldd	r25, Y+5	; 0x05
    37b8:	0e 94 21 5b 	call	0xb642	; 0xb642 <atoi>
    37bc:	9c 01       	movw	r18, r24
    37be:	c8 01       	movw	r24, r16
    37c0:	88 0f       	add	r24, r24
    37c2:	99 1f       	adc	r25, r25
    37c4:	80 0f       	add	r24, r16
    37c6:	91 1f       	adc	r25, r17
    37c8:	88 0f       	add	r24, r24
    37ca:	99 1f       	adc	r25, r25
    37cc:	88 0f       	add	r24, r24
    37ce:	99 1f       	adc	r25, r25
    37d0:	88 0f       	add	r24, r24
    37d2:	99 1f       	adc	r25, r25
    37d4:	fc 01       	movw	r30, r24
    37d6:	ea 57       	subi	r30, 0x7A	; 122
    37d8:	fc 4d       	sbci	r31, 0xDC	; 220
    37da:	20 83       	st	Z, r18
    37dc:	31 83       	std	Z+1, r19	; 0x01
    37de:	fc c0       	rjmp	.+504    	; 0x39d8 <cfg_parse+0x50e>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    37e0:	89 81       	ldd	r24, Y+1	; 0x01
    37e2:	08 2f       	mov	r16, r24
    37e4:	10 e0       	ldi	r17, 0x00	; 0
    37e6:	8c 81       	ldd	r24, Y+4	; 0x04
    37e8:	9d 81       	ldd	r25, Y+5	; 0x05
    37ea:	9e 01       	movw	r18, r28
    37ec:	29 5f       	subi	r18, 0xF9	; 249
    37ee:	3f 4f       	sbci	r19, 0xFF	; 255
    37f0:	b9 01       	movw	r22, r18
    37f2:	0e 94 b3 59 	call	0xb366	; 0xb366 <strtod>
    37f6:	9b 01       	movw	r18, r22
    37f8:	ac 01       	movw	r20, r24
    37fa:	c8 01       	movw	r24, r16
    37fc:	88 0f       	add	r24, r24
    37fe:	99 1f       	adc	r25, r25
    3800:	80 0f       	add	r24, r16
    3802:	91 1f       	adc	r25, r17
    3804:	88 0f       	add	r24, r24
    3806:	99 1f       	adc	r25, r25
    3808:	88 0f       	add	r24, r24
    380a:	99 1f       	adc	r25, r25
    380c:	88 0f       	add	r24, r24
    380e:	99 1f       	adc	r25, r25
    3810:	fc 01       	movw	r30, r24
    3812:	e8 57       	subi	r30, 0x78	; 120
    3814:	fc 4d       	sbci	r31, 0xDC	; 220
    3816:	20 83       	st	Z, r18
    3818:	31 83       	std	Z+1, r19	; 0x01
    381a:	42 83       	std	Z+2, r20	; 0x02
    381c:	53 83       	std	Z+3, r21	; 0x03
    381e:	dc c0       	rjmp	.+440    	; 0x39d8 <cfg_parse+0x50e>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	08 2f       	mov	r16, r24
    3824:	10 e0       	ldi	r17, 0x00	; 0
    3826:	8c 81       	ldd	r24, Y+4	; 0x04
    3828:	9d 81       	ldd	r25, Y+5	; 0x05
    382a:	0e 94 21 5b 	call	0xb642	; 0xb642 <atoi>
    382e:	28 2f       	mov	r18, r24
    3830:	c8 01       	movw	r24, r16
    3832:	88 0f       	add	r24, r24
    3834:	99 1f       	adc	r25, r25
    3836:	80 0f       	add	r24, r16
    3838:	91 1f       	adc	r25, r17
    383a:	88 0f       	add	r24, r24
    383c:	99 1f       	adc	r25, r25
    383e:	88 0f       	add	r24, r24
    3840:	99 1f       	adc	r25, r25
    3842:	88 0f       	add	r24, r24
    3844:	99 1f       	adc	r25, r25
    3846:	fc 01       	movw	r30, r24
    3848:	ed 57       	subi	r30, 0x7D	; 125
    384a:	fc 4d       	sbci	r31, 0xDC	; 220
    384c:	20 83       	st	Z, r18
					  st_set_polarity(axis, CFG(axis).polarity);
    384e:	89 81       	ldd	r24, Y+1	; 0x01
    3850:	28 2f       	mov	r18, r24
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	c9 01       	movw	r24, r18
    3856:	88 0f       	add	r24, r24
    3858:	99 1f       	adc	r25, r25
    385a:	82 0f       	add	r24, r18
    385c:	93 1f       	adc	r25, r19
    385e:	88 0f       	add	r24, r24
    3860:	99 1f       	adc	r25, r25
    3862:	88 0f       	add	r24, r24
    3864:	99 1f       	adc	r25, r25
    3866:	88 0f       	add	r24, r24
    3868:	99 1f       	adc	r25, r25
    386a:	fc 01       	movw	r30, r24
    386c:	ed 57       	subi	r30, 0x7D	; 125
    386e:	fc 4d       	sbci	r31, 0xDC	; 220
    3870:	90 81       	ld	r25, Z
    3872:	89 81       	ldd	r24, Y+1	; 0x01
    3874:	69 2f       	mov	r22, r25
    3876:	0e 94 9c 34 	call	0x6938	; 0x6938 <st_set_polarity>
    387a:	ae c0       	rjmp	.+348    	; 0x39d8 <cfg_parse+0x50e>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    387c:	89 85       	ldd	r24, Y+9	; 0x09
    387e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3880:	fc 01       	movw	r30, r24
    3882:	32 96       	adiw	r30, 0x02	; 2
    3884:	80 81       	ld	r24, Z
    3886:	89 34       	cpi	r24, 0x49	; 73
    3888:	c1 f4       	brne	.+48     	; 0x38ba <cfg_parse+0x3f0>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    388a:	89 81       	ldd	r24, Y+1	; 0x01
    388c:	08 2f       	mov	r16, r24
    388e:	10 e0       	ldi	r17, 0x00	; 0
    3890:	8c 81       	ldd	r24, Y+4	; 0x04
    3892:	9d 81       	ldd	r25, Y+5	; 0x05
    3894:	0e 94 21 5b 	call	0xb642	; 0xb642 <atoi>
    3898:	28 2f       	mov	r18, r24
    389a:	c8 01       	movw	r24, r16
    389c:	88 0f       	add	r24, r24
    389e:	99 1f       	adc	r25, r25
    38a0:	80 0f       	add	r24, r16
    38a2:	91 1f       	adc	r25, r17
    38a4:	88 0f       	add	r24, r24
    38a6:	99 1f       	adc	r25, r25
    38a8:	88 0f       	add	r24, r24
    38aa:	99 1f       	adc	r25, r25
    38ac:	88 0f       	add	r24, r24
    38ae:	99 1f       	adc	r25, r25
    38b0:	fc 01       	movw	r30, r24
    38b2:	ef 57       	subi	r30, 0x7F	; 127
    38b4:	fc 4d       	sbci	r31, 0xDC	; 220
    38b6:	20 83       	st	Z, r18
    38b8:	8f c0       	rjmp	.+286    	; 0x39d8 <cfg_parse+0x50e>
				} else if (text[3] == 'R') {
    38ba:	89 85       	ldd	r24, Y+9	; 0x09
    38bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    38be:	fc 01       	movw	r30, r24
    38c0:	33 96       	adiw	r30, 0x03	; 3
    38c2:	80 81       	ld	r24, Z
    38c4:	82 35       	cpi	r24, 0x52	; 82
    38c6:	01 f5       	brne	.+64     	; 0x3908 <cfg_parse+0x43e>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    38c8:	89 81       	ldd	r24, Y+1	; 0x01
    38ca:	08 2f       	mov	r16, r24
    38cc:	10 e0       	ldi	r17, 0x00	; 0
    38ce:	8c 81       	ldd	r24, Y+4	; 0x04
    38d0:	9d 81       	ldd	r25, Y+5	; 0x05
    38d2:	9e 01       	movw	r18, r28
    38d4:	29 5f       	subi	r18, 0xF9	; 249
    38d6:	3f 4f       	sbci	r19, 0xFF	; 255
    38d8:	b9 01       	movw	r22, r18
    38da:	0e 94 b3 59 	call	0xb366	; 0xb366 <strtod>
    38de:	9b 01       	movw	r18, r22
    38e0:	ac 01       	movw	r20, r24
    38e2:	c8 01       	movw	r24, r16
    38e4:	88 0f       	add	r24, r24
    38e6:	99 1f       	adc	r25, r25
    38e8:	80 0f       	add	r24, r16
    38ea:	91 1f       	adc	r25, r17
    38ec:	88 0f       	add	r24, r24
    38ee:	99 1f       	adc	r25, r25
    38f0:	88 0f       	add	r24, r24
    38f2:	99 1f       	adc	r25, r25
    38f4:	88 0f       	add	r24, r24
    38f6:	99 1f       	adc	r25, r25
    38f8:	fc 01       	movw	r30, r24
    38fa:	e4 57       	subi	r30, 0x74	; 116
    38fc:	fc 4d       	sbci	r31, 0xDC	; 220
    38fe:	20 83       	st	Z, r18
    3900:	31 83       	std	Z+1, r19	; 0x01
    3902:	42 83       	std	Z+2, r20	; 0x02
    3904:	53 83       	std	Z+3, r21	; 0x03
    3906:	68 c0       	rjmp	.+208    	; 0x39d8 <cfg_parse+0x50e>
				} else if (text[3] == 'T') {
    3908:	89 85       	ldd	r24, Y+9	; 0x09
    390a:	9a 85       	ldd	r25, Y+10	; 0x0a
    390c:	fc 01       	movw	r30, r24
    390e:	33 96       	adiw	r30, 0x03	; 3
    3910:	80 81       	ld	r24, Z
    3912:	84 35       	cpi	r24, 0x54	; 84
    3914:	01 f5       	brne	.+64     	; 0x3956 <cfg_parse+0x48c>
					CFG(axis).mm_travel = strtod(val, &end); break;
    3916:	89 81       	ldd	r24, Y+1	; 0x01
    3918:	08 2f       	mov	r16, r24
    391a:	10 e0       	ldi	r17, 0x00	; 0
    391c:	8c 81       	ldd	r24, Y+4	; 0x04
    391e:	9d 81       	ldd	r25, Y+5	; 0x05
    3920:	9e 01       	movw	r18, r28
    3922:	29 5f       	subi	r18, 0xF9	; 249
    3924:	3f 4f       	sbci	r19, 0xFF	; 255
    3926:	b9 01       	movw	r22, r18
    3928:	0e 94 b3 59 	call	0xb366	; 0xb366 <strtod>
    392c:	9b 01       	movw	r18, r22
    392e:	ac 01       	movw	r20, r24
    3930:	c8 01       	movw	r24, r16
    3932:	88 0f       	add	r24, r24
    3934:	99 1f       	adc	r25, r25
    3936:	80 0f       	add	r24, r16
    3938:	91 1f       	adc	r25, r17
    393a:	88 0f       	add	r24, r24
    393c:	99 1f       	adc	r25, r25
    393e:	88 0f       	add	r24, r24
    3940:	99 1f       	adc	r25, r25
    3942:	88 0f       	add	r24, r24
    3944:	99 1f       	adc	r25, r25
    3946:	fc 01       	movw	r30, r24
    3948:	e0 57       	subi	r30, 0x70	; 112
    394a:	fc 4d       	sbci	r31, 0xDC	; 220
    394c:	20 83       	st	Z, r18
    394e:	31 83       	std	Z+1, r19	; 0x01
    3950:	42 83       	std	Z+2, r20	; 0x02
    3952:	53 83       	std	Z+3, r21	; 0x03
    3954:	41 c0       	rjmp	.+130    	; 0x39d8 <cfg_parse+0x50e>
				}
			case 'L': 
				if (text[2] == 'O') {
    3956:	89 85       	ldd	r24, Y+9	; 0x09
    3958:	9a 85       	ldd	r25, Y+10	; 0x0a
    395a:	fc 01       	movw	r30, r24
    395c:	32 96       	adiw	r30, 0x02	; 2
    395e:	80 81       	ld	r24, Z
    3960:	8f 34       	cpi	r24, 0x4F	; 79
    3962:	c1 f4       	brne	.+48     	; 0x3994 <cfg_parse+0x4ca>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    3964:	89 81       	ldd	r24, Y+1	; 0x01
    3966:	08 2f       	mov	r16, r24
    3968:	10 e0       	ldi	r17, 0x00	; 0
    396a:	8c 81       	ldd	r24, Y+4	; 0x04
    396c:	9d 81       	ldd	r25, Y+5	; 0x05
    396e:	0e 94 21 5b 	call	0xb642	; 0xb642 <atoi>
    3972:	28 2f       	mov	r18, r24
    3974:	c8 01       	movw	r24, r16
    3976:	88 0f       	add	r24, r24
    3978:	99 1f       	adc	r25, r25
    397a:	80 0f       	add	r24, r16
    397c:	91 1f       	adc	r25, r17
    397e:	88 0f       	add	r24, r24
    3980:	99 1f       	adc	r25, r25
    3982:	88 0f       	add	r24, r24
    3984:	99 1f       	adc	r25, r25
    3986:	88 0f       	add	r24, r24
    3988:	99 1f       	adc	r25, r25
    398a:	fc 01       	movw	r30, r24
    398c:	ee 57       	subi	r30, 0x7E	; 126
    398e:	fc 4d       	sbci	r31, 0xDC	; 220
    3990:	20 83       	st	Z, r18
    3992:	22 c0       	rjmp	.+68     	; 0x39d8 <cfg_parse+0x50e>
				} else if (text[2] == 'I') {
    3994:	89 85       	ldd	r24, Y+9	; 0x09
    3996:	9a 85       	ldd	r25, Y+10	; 0x0a
    3998:	fc 01       	movw	r30, r24
    399a:	32 96       	adiw	r30, 0x02	; 2
    399c:	80 81       	ld	r24, Z
    399e:	89 34       	cpi	r24, 0x49	; 73
    39a0:	c1 f4       	brne	.+48     	; 0x39d2 <cfg_parse+0x508>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    39a2:	89 81       	ldd	r24, Y+1	; 0x01
    39a4:	08 2f       	mov	r16, r24
    39a6:	10 e0       	ldi	r17, 0x00	; 0
    39a8:	8c 81       	ldd	r24, Y+4	; 0x04
    39aa:	9d 81       	ldd	r25, Y+5	; 0x05
    39ac:	0e 94 21 5b 	call	0xb642	; 0xb642 <atoi>
    39b0:	28 2f       	mov	r18, r24
    39b2:	c8 01       	movw	r24, r16
    39b4:	88 0f       	add	r24, r24
    39b6:	99 1f       	adc	r25, r25
    39b8:	80 0f       	add	r24, r16
    39ba:	91 1f       	adc	r25, r17
    39bc:	88 0f       	add	r24, r24
    39be:	99 1f       	adc	r25, r25
    39c0:	88 0f       	add	r24, r24
    39c2:	99 1f       	adc	r25, r25
    39c4:	88 0f       	add	r24, r24
    39c6:	99 1f       	adc	r25, r25
    39c8:	fc 01       	movw	r30, r24
    39ca:	e8 56       	subi	r30, 0x68	; 104
    39cc:	fc 4d       	sbci	r31, 0xDC	; 220
    39ce:	20 83       	st	Z, r18
    39d0:	03 c0       	rjmp	.+6      	; 0x39d8 <cfg_parse+0x50e>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    39d2:	89 e0       	ldi	r24, 0x09	; 9
    39d4:	80 93 74 23 	sts	0x2374, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    39d8:	80 91 74 23 	lds	r24, 0x2374
    39dc:	29 85       	ldd	r18, Y+9	; 0x09
    39de:	3a 85       	ldd	r19, Y+10	; 0x0a
    39e0:	b9 01       	movw	r22, r18
    39e2:	0e 94 b0 21 	call	0x4360	; 0x4360 <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
    39e6:	80 91 74 23 	lds	r24, 0x2374
    39ea:	88 2f       	mov	r24, r24
    39ec:	90 e0       	ldi	r25, 0x00	; 0
}
    39ee:	2f 96       	adiw	r28, 0x0f	; 15
    39f0:	cd bf       	out	0x3d, r28	; 61
    39f2:	de bf       	out	0x3e, r29	; 62
    39f4:	cf 91       	pop	r28
    39f6:	df 91       	pop	r29
    39f8:	1f 91       	pop	r17
    39fa:	0f 91       	pop	r16
    39fc:	08 95       	ret

000039fe <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    39fe:	df 93       	push	r29
    3a00:	cf 93       	push	r28
    3a02:	0f 92       	push	r0
    3a04:	cd b7       	in	r28, 0x3d	; 61
    3a06:	de b7       	in	r29, 0x3e	; 62
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    3a08:	21 ef       	ldi	r18, 0xF1	; 241
    3a0a:	32 e0       	ldi	r19, 0x02	; 2
    3a0c:	80 91 73 23 	lds	r24, 0x2373
    3a10:	88 2f       	mov	r24, r24
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	00 d0       	rcall	.+0      	; 0x3a16 <cfg_dump+0x18>
    3a16:	0f 92       	push	r0
    3a18:	ed b7       	in	r30, 0x3d	; 61
    3a1a:	fe b7       	in	r31, 0x3e	; 62
    3a1c:	31 96       	adiw	r30, 0x01	; 1
    3a1e:	20 83       	st	Z, r18
    3a20:	31 83       	std	Z+1, r19	; 0x01
    3a22:	82 83       	std	Z+2, r24	; 0x02
    3a24:	93 83       	std	Z+3, r25	; 0x03
    3a26:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    3a2a:	0f 90       	pop	r0
    3a2c:	0f 90       	pop	r0
    3a2e:	0f 90       	pop	r0
    3a30:	0f 90       	pop	r0
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    3a32:	8a ec       	ldi	r24, 0xCA	; 202
    3a34:	92 e0       	ldi	r25, 0x02	; 2
    3a36:	0f 92       	push	r0
    3a38:	0f 92       	push	r0
    3a3a:	ed b7       	in	r30, 0x3d	; 61
    3a3c:	fe b7       	in	r31, 0x3e	; 62
    3a3e:	31 96       	adiw	r30, 0x01	; 1
    3a40:	80 83       	st	Z, r24
    3a42:	91 83       	std	Z+1, r25	; 0x01
    3a44:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    3a48:	0f 90       	pop	r0
    3a4a:	0f 90       	pop	r0
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    3a4c:	20 ea       	ldi	r18, 0xA0	; 160
    3a4e:	32 e0       	ldi	r19, 0x02	; 2
    3a50:	80 91 75 23 	lds	r24, 0x2375
    3a54:	90 91 76 23 	lds	r25, 0x2376
    3a58:	a0 91 77 23 	lds	r26, 0x2377
    3a5c:	b0 91 78 23 	lds	r27, 0x2378
    3a60:	00 d0       	rcall	.+0      	; 0x3a62 <cfg_dump+0x64>
    3a62:	00 d0       	rcall	.+0      	; 0x3a64 <cfg_dump+0x66>
    3a64:	ed b7       	in	r30, 0x3d	; 61
    3a66:	fe b7       	in	r31, 0x3e	; 62
    3a68:	31 96       	adiw	r30, 0x01	; 1
    3a6a:	20 83       	st	Z, r18
    3a6c:	31 83       	std	Z+1, r19	; 0x01
    3a6e:	82 83       	std	Z+2, r24	; 0x02
    3a70:	93 83       	std	Z+3, r25	; 0x03
    3a72:	a4 83       	std	Z+4, r26	; 0x04
    3a74:	b5 83       	std	Z+5, r27	; 0x05
    3a76:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    3a7a:	8d b7       	in	r24, 0x3d	; 61
    3a7c:	9e b7       	in	r25, 0x3e	; 62
    3a7e:	06 96       	adiw	r24, 0x06	; 6
    3a80:	8d bf       	out	0x3d, r24	; 61
    3a82:	9e bf       	out	0x3e, r25	; 62
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    3a84:	26 e7       	ldi	r18, 0x76	; 118
    3a86:	32 e0       	ldi	r19, 0x02	; 2
    3a88:	80 91 7d 23 	lds	r24, 0x237D
    3a8c:	90 91 7e 23 	lds	r25, 0x237E
    3a90:	a0 91 7f 23 	lds	r26, 0x237F
    3a94:	b0 91 80 23 	lds	r27, 0x2380
    3a98:	00 d0       	rcall	.+0      	; 0x3a9a <cfg_dump+0x9c>
    3a9a:	00 d0       	rcall	.+0      	; 0x3a9c <cfg_dump+0x9e>
    3a9c:	ed b7       	in	r30, 0x3d	; 61
    3a9e:	fe b7       	in	r31, 0x3e	; 62
    3aa0:	31 96       	adiw	r30, 0x01	; 1
    3aa2:	20 83       	st	Z, r18
    3aa4:	31 83       	std	Z+1, r19	; 0x01
    3aa6:	82 83       	std	Z+2, r24	; 0x02
    3aa8:	93 83       	std	Z+3, r25	; 0x03
    3aaa:	a4 83       	std	Z+4, r26	; 0x04
    3aac:	b5 83       	std	Z+5, r27	; 0x05
    3aae:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    3ab2:	8d b7       	in	r24, 0x3d	; 61
    3ab4:	9e b7       	in	r25, 0x3e	; 62
    3ab6:	06 96       	adiw	r24, 0x06	; 6
    3ab8:	8d bf       	out	0x3d, r24	; 61
    3aba:	9e bf       	out	0x3e, r25	; 62
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    3abc:	2b e4       	ldi	r18, 0x4B	; 75
    3abe:	32 e0       	ldi	r19, 0x02	; 2
    3ac0:	80 91 79 23 	lds	r24, 0x2379
    3ac4:	90 91 7a 23 	lds	r25, 0x237A
    3ac8:	a0 91 7b 23 	lds	r26, 0x237B
    3acc:	b0 91 7c 23 	lds	r27, 0x237C
    3ad0:	00 d0       	rcall	.+0      	; 0x3ad2 <cfg_dump+0xd4>
    3ad2:	00 d0       	rcall	.+0      	; 0x3ad4 <cfg_dump+0xd6>
    3ad4:	ed b7       	in	r30, 0x3d	; 61
    3ad6:	fe b7       	in	r31, 0x3e	; 62
    3ad8:	31 96       	adiw	r30, 0x01	; 1
    3ada:	20 83       	st	Z, r18
    3adc:	31 83       	std	Z+1, r19	; 0x01
    3ade:	82 83       	std	Z+2, r24	; 0x02
    3ae0:	93 83       	std	Z+3, r25	; 0x03
    3ae2:	a4 83       	std	Z+4, r26	; 0x04
    3ae4:	b5 83       	std	Z+5, r27	; 0x05
    3ae6:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    3aea:	8d b7       	in	r24, 0x3d	; 61
    3aec:	9e b7       	in	r25, 0x3e	; 62
    3aee:	06 96       	adiw	r24, 0x06	; 6
    3af0:	8d bf       	out	0x3d, r24	; 61
    3af2:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
    3af4:	19 82       	std	Y+1, r1	; 0x01
    3af6:	06 c0       	rjmp	.+12     	; 0x3b04 <cfg_dump+0x106>
		_cfg_dump_axis(axis);
    3af8:	89 81       	ldd	r24, Y+1	; 0x01
    3afa:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    3afe:	89 81       	ldd	r24, Y+1	; 0x01
    3b00:	8f 5f       	subi	r24, 0xFF	; 255
    3b02:	89 83       	std	Y+1, r24	; 0x01
    3b04:	89 81       	ldd	r24, Y+1	; 0x01
    3b06:	84 30       	cpi	r24, 0x04	; 4
    3b08:	b8 f3       	brcs	.-18     	; 0x3af8 <cfg_dump+0xfa>
		_cfg_dump_axis(axis);
	}
}
    3b0a:	0f 90       	pop	r0
    3b0c:	cf 91       	pop	r28
    3b0e:	df 91       	pop	r29
    3b10:	08 95       	ret

00003b12 <_cfg_dump_axis>:

void _cfg_dump_axis(uint8_t	axis)
{
    3b12:	df 93       	push	r29
    3b14:	cf 93       	push	r28
    3b16:	cd b7       	in	r28, 0x3d	; 61
    3b18:	de b7       	in	r29, 0x3e	; 62
    3b1a:	25 97       	sbiw	r28, 0x05	; 5
    3b1c:	cd bf       	out	0x3d, r28	; 61
    3b1e:	de bf       	out	0x3e, r29	; 62
    3b20:	8d 83       	std	Y+5, r24	; 0x05
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    3b22:	2f e1       	ldi	r18, 0x1F	; 31
    3b24:	35 e0       	ldi	r19, 0x05	; 5
    3b26:	8d 81       	ldd	r24, Y+5	; 0x05
    3b28:	88 2f       	mov	r24, r24
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	88 0f       	add	r24, r24
    3b2e:	99 1f       	adc	r25, r25
    3b30:	8d 5b       	subi	r24, 0xBD	; 189
    3b32:	9d 4f       	sbci	r25, 0xFD	; 253
    3b34:	8b 83       	std	Y+3, r24	; 0x03
    3b36:	9c 83       	std	Y+4, r25	; 0x04
    3b38:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b3c:	fc 01       	movw	r30, r24
    3b3e:	85 91       	lpm	r24, Z+
    3b40:	94 91       	lpm	r25, Z+
    3b42:	89 83       	std	Y+1, r24	; 0x01
    3b44:	9a 83       	std	Y+2, r25	; 0x02
    3b46:	eb 83       	std	Y+3, r30	; 0x03
    3b48:	fc 83       	std	Y+4, r31	; 0x04
    3b4a:	89 81       	ldd	r24, Y+1	; 0x01
    3b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b4e:	00 d0       	rcall	.+0      	; 0x3b50 <_cfg_dump_axis+0x3e>
    3b50:	0f 92       	push	r0
    3b52:	ed b7       	in	r30, 0x3d	; 61
    3b54:	fe b7       	in	r31, 0x3e	; 62
    3b56:	31 96       	adiw	r30, 0x01	; 1
    3b58:	20 83       	st	Z, r18
    3b5a:	31 83       	std	Z+1, r19	; 0x01
    3b5c:	82 83       	std	Z+2, r24	; 0x02
    3b5e:	93 83       	std	Z+3, r25	; 0x03
    3b60:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    3b64:	0f 90       	pop	r0
    3b66:	0f 90       	pop	r0
    3b68:	0f 90       	pop	r0
    3b6a:	0f 90       	pop	r0
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    3b6c:	47 ee       	ldi	r20, 0xE7	; 231
    3b6e:	54 e0       	ldi	r21, 0x04	; 4
    3b70:	8d 81       	ldd	r24, Y+5	; 0x05
    3b72:	28 2f       	mov	r18, r24
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	c9 01       	movw	r24, r18
    3b78:	88 0f       	add	r24, r24
    3b7a:	99 1f       	adc	r25, r25
    3b7c:	82 0f       	add	r24, r18
    3b7e:	93 1f       	adc	r25, r19
    3b80:	88 0f       	add	r24, r24
    3b82:	99 1f       	adc	r25, r25
    3b84:	88 0f       	add	r24, r24
    3b86:	99 1f       	adc	r25, r25
    3b88:	88 0f       	add	r24, r24
    3b8a:	99 1f       	adc	r25, r25
    3b8c:	fc 01       	movw	r30, r24
    3b8e:	ec 57       	subi	r30, 0x7C	; 124
    3b90:	fc 4d       	sbci	r31, 0xDC	; 220
    3b92:	80 81       	ld	r24, Z
    3b94:	91 81       	ldd	r25, Z+1	; 0x01
    3b96:	00 d0       	rcall	.+0      	; 0x3b98 <_cfg_dump_axis+0x86>
    3b98:	0f 92       	push	r0
    3b9a:	ed b7       	in	r30, 0x3d	; 61
    3b9c:	fe b7       	in	r31, 0x3e	; 62
    3b9e:	31 96       	adiw	r30, 0x01	; 1
    3ba0:	40 83       	st	Z, r20
    3ba2:	51 83       	std	Z+1, r21	; 0x01
    3ba4:	82 83       	std	Z+2, r24	; 0x02
    3ba6:	93 83       	std	Z+3, r25	; 0x03
    3ba8:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    3bac:	0f 90       	pop	r0
    3bae:	0f 90       	pop	r0
    3bb0:	0f 90       	pop	r0
    3bb2:	0f 90       	pop	r0
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    3bb4:	4f ea       	ldi	r20, 0xAF	; 175
    3bb6:	54 e0       	ldi	r21, 0x04	; 4
    3bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bba:	28 2f       	mov	r18, r24
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	c9 01       	movw	r24, r18
    3bc0:	88 0f       	add	r24, r24
    3bc2:	99 1f       	adc	r25, r25
    3bc4:	82 0f       	add	r24, r18
    3bc6:	93 1f       	adc	r25, r19
    3bc8:	88 0f       	add	r24, r24
    3bca:	99 1f       	adc	r25, r25
    3bcc:	88 0f       	add	r24, r24
    3bce:	99 1f       	adc	r25, r25
    3bd0:	88 0f       	add	r24, r24
    3bd2:	99 1f       	adc	r25, r25
    3bd4:	fc 01       	movw	r30, r24
    3bd6:	ea 57       	subi	r30, 0x7A	; 122
    3bd8:	fc 4d       	sbci	r31, 0xDC	; 220
    3bda:	80 81       	ld	r24, Z
    3bdc:	91 81       	ldd	r25, Z+1	; 0x01
    3bde:	00 d0       	rcall	.+0      	; 0x3be0 <_cfg_dump_axis+0xce>
    3be0:	0f 92       	push	r0
    3be2:	ed b7       	in	r30, 0x3d	; 61
    3be4:	fe b7       	in	r31, 0x3e	; 62
    3be6:	31 96       	adiw	r30, 0x01	; 1
    3be8:	40 83       	st	Z, r20
    3bea:	51 83       	std	Z+1, r21	; 0x01
    3bec:	82 83       	std	Z+2, r24	; 0x02
    3bee:	93 83       	std	Z+3, r25	; 0x03
    3bf0:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	0f 90       	pop	r0
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    3bfc:	4c e7       	ldi	r20, 0x7C	; 124
    3bfe:	54 e0       	ldi	r21, 0x04	; 4
    3c00:	8d 81       	ldd	r24, Y+5	; 0x05
    3c02:	28 2f       	mov	r18, r24
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	c9 01       	movw	r24, r18
    3c08:	88 0f       	add	r24, r24
    3c0a:	99 1f       	adc	r25, r25
    3c0c:	82 0f       	add	r24, r18
    3c0e:	93 1f       	adc	r25, r19
    3c10:	88 0f       	add	r24, r24
    3c12:	99 1f       	adc	r25, r25
    3c14:	88 0f       	add	r24, r24
    3c16:	99 1f       	adc	r25, r25
    3c18:	88 0f       	add	r24, r24
    3c1a:	99 1f       	adc	r25, r25
    3c1c:	fc 01       	movw	r30, r24
    3c1e:	ef 57       	subi	r30, 0x7F	; 127
    3c20:	fc 4d       	sbci	r31, 0xDC	; 220
    3c22:	80 81       	ld	r24, Z
    3c24:	88 2f       	mov	r24, r24
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	00 d0       	rcall	.+0      	; 0x3c2a <_cfg_dump_axis+0x118>
    3c2a:	0f 92       	push	r0
    3c2c:	ed b7       	in	r30, 0x3d	; 61
    3c2e:	fe b7       	in	r31, 0x3e	; 62
    3c30:	31 96       	adiw	r30, 0x01	; 1
    3c32:	40 83       	st	Z, r20
    3c34:	51 83       	std	Z+1, r21	; 0x01
    3c36:	82 83       	std	Z+2, r24	; 0x02
    3c38:	93 83       	std	Z+3, r25	; 0x03
    3c3a:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    3c3e:	0f 90       	pop	r0
    3c40:	0f 90       	pop	r0
    3c42:	0f 90       	pop	r0
    3c44:	0f 90       	pop	r0
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    3c46:	45 e4       	ldi	r20, 0x45	; 69
    3c48:	54 e0       	ldi	r21, 0x04	; 4
    3c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c4c:	28 2f       	mov	r18, r24
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	c9 01       	movw	r24, r18
    3c52:	88 0f       	add	r24, r24
    3c54:	99 1f       	adc	r25, r25
    3c56:	82 0f       	add	r24, r18
    3c58:	93 1f       	adc	r25, r19
    3c5a:	88 0f       	add	r24, r24
    3c5c:	99 1f       	adc	r25, r25
    3c5e:	88 0f       	add	r24, r24
    3c60:	99 1f       	adc	r25, r25
    3c62:	88 0f       	add	r24, r24
    3c64:	99 1f       	adc	r25, r25
    3c66:	fc 01       	movw	r30, r24
    3c68:	e8 57       	subi	r30, 0x78	; 120
    3c6a:	fc 4d       	sbci	r31, 0xDC	; 220
    3c6c:	80 81       	ld	r24, Z
    3c6e:	91 81       	ldd	r25, Z+1	; 0x01
    3c70:	a2 81       	ldd	r26, Z+2	; 0x02
    3c72:	b3 81       	ldd	r27, Z+3	; 0x03
    3c74:	00 d0       	rcall	.+0      	; 0x3c76 <_cfg_dump_axis+0x164>
    3c76:	00 d0       	rcall	.+0      	; 0x3c78 <_cfg_dump_axis+0x166>
    3c78:	ed b7       	in	r30, 0x3d	; 61
    3c7a:	fe b7       	in	r31, 0x3e	; 62
    3c7c:	31 96       	adiw	r30, 0x01	; 1
    3c7e:	40 83       	st	Z, r20
    3c80:	51 83       	std	Z+1, r21	; 0x01
    3c82:	82 83       	std	Z+2, r24	; 0x02
    3c84:	93 83       	std	Z+3, r25	; 0x03
    3c86:	a4 83       	std	Z+4, r26	; 0x04
    3c88:	b5 83       	std	Z+5, r27	; 0x05
    3c8a:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    3c8e:	8d b7       	in	r24, 0x3d	; 61
    3c90:	9e b7       	in	r25, 0x3e	; 62
    3c92:	06 96       	adiw	r24, 0x06	; 6
    3c94:	8d bf       	out	0x3d, r24	; 61
    3c96:	9e bf       	out	0x3e, r25	; 62
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    3c98:	42 e1       	ldi	r20, 0x12	; 18
    3c9a:	54 e0       	ldi	r21, 0x04	; 4
    3c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c9e:	28 2f       	mov	r18, r24
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	c9 01       	movw	r24, r18
    3ca4:	88 0f       	add	r24, r24
    3ca6:	99 1f       	adc	r25, r25
    3ca8:	82 0f       	add	r24, r18
    3caa:	93 1f       	adc	r25, r19
    3cac:	88 0f       	add	r24, r24
    3cae:	99 1f       	adc	r25, r25
    3cb0:	88 0f       	add	r24, r24
    3cb2:	99 1f       	adc	r25, r25
    3cb4:	88 0f       	add	r24, r24
    3cb6:	99 1f       	adc	r25, r25
    3cb8:	fc 01       	movw	r30, r24
    3cba:	e4 57       	subi	r30, 0x74	; 116
    3cbc:	fc 4d       	sbci	r31, 0xDC	; 220
    3cbe:	80 81       	ld	r24, Z
    3cc0:	91 81       	ldd	r25, Z+1	; 0x01
    3cc2:	a2 81       	ldd	r26, Z+2	; 0x02
    3cc4:	b3 81       	ldd	r27, Z+3	; 0x03
    3cc6:	00 d0       	rcall	.+0      	; 0x3cc8 <_cfg_dump_axis+0x1b6>
    3cc8:	00 d0       	rcall	.+0      	; 0x3cca <_cfg_dump_axis+0x1b8>
    3cca:	ed b7       	in	r30, 0x3d	; 61
    3ccc:	fe b7       	in	r31, 0x3e	; 62
    3cce:	31 96       	adiw	r30, 0x01	; 1
    3cd0:	40 83       	st	Z, r20
    3cd2:	51 83       	std	Z+1, r21	; 0x01
    3cd4:	82 83       	std	Z+2, r24	; 0x02
    3cd6:	93 83       	std	Z+3, r25	; 0x03
    3cd8:	a4 83       	std	Z+4, r26	; 0x04
    3cda:	b5 83       	std	Z+5, r27	; 0x05
    3cdc:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    3ce0:	8d b7       	in	r24, 0x3d	; 61
    3ce2:	9e b7       	in	r25, 0x3e	; 62
    3ce4:	06 96       	adiw	r24, 0x06	; 6
    3ce6:	8d bf       	out	0x3d, r24	; 61
    3ce8:	9e bf       	out	0x3e, r25	; 62
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    3cea:	4f ed       	ldi	r20, 0xDF	; 223
    3cec:	53 e0       	ldi	r21, 0x03	; 3
    3cee:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf0:	28 2f       	mov	r18, r24
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	c9 01       	movw	r24, r18
    3cf6:	88 0f       	add	r24, r24
    3cf8:	99 1f       	adc	r25, r25
    3cfa:	82 0f       	add	r24, r18
    3cfc:	93 1f       	adc	r25, r19
    3cfe:	88 0f       	add	r24, r24
    3d00:	99 1f       	adc	r25, r25
    3d02:	88 0f       	add	r24, r24
    3d04:	99 1f       	adc	r25, r25
    3d06:	88 0f       	add	r24, r24
    3d08:	99 1f       	adc	r25, r25
    3d0a:	fc 01       	movw	r30, r24
    3d0c:	e0 57       	subi	r30, 0x70	; 112
    3d0e:	fc 4d       	sbci	r31, 0xDC	; 220
    3d10:	80 81       	ld	r24, Z
    3d12:	91 81       	ldd	r25, Z+1	; 0x01
    3d14:	a2 81       	ldd	r26, Z+2	; 0x02
    3d16:	b3 81       	ldd	r27, Z+3	; 0x03
    3d18:	00 d0       	rcall	.+0      	; 0x3d1a <_cfg_dump_axis+0x208>
    3d1a:	00 d0       	rcall	.+0      	; 0x3d1c <_cfg_dump_axis+0x20a>
    3d1c:	ed b7       	in	r30, 0x3d	; 61
    3d1e:	fe b7       	in	r31, 0x3e	; 62
    3d20:	31 96       	adiw	r30, 0x01	; 1
    3d22:	40 83       	st	Z, r20
    3d24:	51 83       	std	Z+1, r21	; 0x01
    3d26:	82 83       	std	Z+2, r24	; 0x02
    3d28:	93 83       	std	Z+3, r25	; 0x03
    3d2a:	a4 83       	std	Z+4, r26	; 0x04
    3d2c:	b5 83       	std	Z+5, r27	; 0x05
    3d2e:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    3d32:	8d b7       	in	r24, 0x3d	; 61
    3d34:	9e b7       	in	r25, 0x3e	; 62
    3d36:	06 96       	adiw	r24, 0x06	; 6
    3d38:	8d bf       	out	0x3d, r24	; 61
    3d3a:	9e bf       	out	0x3e, r25	; 62
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    3d3c:	4e ea       	ldi	r20, 0xAE	; 174
    3d3e:	53 e0       	ldi	r21, 0x03	; 3
    3d40:	8d 81       	ldd	r24, Y+5	; 0x05
    3d42:	28 2f       	mov	r18, r24
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	c9 01       	movw	r24, r18
    3d48:	88 0f       	add	r24, r24
    3d4a:	99 1f       	adc	r25, r25
    3d4c:	82 0f       	add	r24, r18
    3d4e:	93 1f       	adc	r25, r19
    3d50:	88 0f       	add	r24, r24
    3d52:	99 1f       	adc	r25, r25
    3d54:	88 0f       	add	r24, r24
    3d56:	99 1f       	adc	r25, r25
    3d58:	88 0f       	add	r24, r24
    3d5a:	99 1f       	adc	r25, r25
    3d5c:	fc 01       	movw	r30, r24
    3d5e:	e8 56       	subi	r30, 0x68	; 104
    3d60:	fc 4d       	sbci	r31, 0xDC	; 220
    3d62:	80 81       	ld	r24, Z
    3d64:	88 2f       	mov	r24, r24
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	00 d0       	rcall	.+0      	; 0x3d6a <_cfg_dump_axis+0x258>
    3d6a:	0f 92       	push	r0
    3d6c:	ed b7       	in	r30, 0x3d	; 61
    3d6e:	fe b7       	in	r31, 0x3e	; 62
    3d70:	31 96       	adiw	r30, 0x01	; 1
    3d72:	40 83       	st	Z, r20
    3d74:	51 83       	std	Z+1, r21	; 0x01
    3d76:	82 83       	std	Z+2, r24	; 0x02
    3d78:	93 83       	std	Z+3, r25	; 0x03
    3d7a:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    3d7e:	0f 90       	pop	r0
    3d80:	0f 90       	pop	r0
    3d82:	0f 90       	pop	r0
    3d84:	0f 90       	pop	r0
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    3d86:	4d e7       	ldi	r20, 0x7D	; 125
    3d88:	53 e0       	ldi	r21, 0x03	; 3
    3d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d8c:	28 2f       	mov	r18, r24
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	c9 01       	movw	r24, r18
    3d92:	88 0f       	add	r24, r24
    3d94:	99 1f       	adc	r25, r25
    3d96:	82 0f       	add	r24, r18
    3d98:	93 1f       	adc	r25, r19
    3d9a:	88 0f       	add	r24, r24
    3d9c:	99 1f       	adc	r25, r25
    3d9e:	88 0f       	add	r24, r24
    3da0:	99 1f       	adc	r25, r25
    3da2:	88 0f       	add	r24, r24
    3da4:	99 1f       	adc	r25, r25
    3da6:	fc 01       	movw	r30, r24
    3da8:	ee 57       	subi	r30, 0x7E	; 126
    3daa:	fc 4d       	sbci	r31, 0xDC	; 220
    3dac:	80 81       	ld	r24, Z
    3dae:	88 2f       	mov	r24, r24
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	00 d0       	rcall	.+0      	; 0x3db4 <_cfg_dump_axis+0x2a2>
    3db4:	0f 92       	push	r0
    3db6:	ed b7       	in	r30, 0x3d	; 61
    3db8:	fe b7       	in	r31, 0x3e	; 62
    3dba:	31 96       	adiw	r30, 0x01	; 1
    3dbc:	40 83       	st	Z, r20
    3dbe:	51 83       	std	Z+1, r21	; 0x01
    3dc0:	82 83       	std	Z+2, r24	; 0x02
    3dc2:	93 83       	std	Z+3, r25	; 0x03
    3dc4:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    3dc8:	0f 90       	pop	r0
    3dca:	0f 90       	pop	r0
    3dcc:	0f 90       	pop	r0
    3dce:	0f 90       	pop	r0
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    3dd0:	4d e4       	ldi	r20, 0x4D	; 77
    3dd2:	53 e0       	ldi	r21, 0x03	; 3
    3dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd6:	28 2f       	mov	r18, r24
    3dd8:	30 e0       	ldi	r19, 0x00	; 0
    3dda:	c9 01       	movw	r24, r18
    3ddc:	88 0f       	add	r24, r24
    3dde:	99 1f       	adc	r25, r25
    3de0:	82 0f       	add	r24, r18
    3de2:	93 1f       	adc	r25, r19
    3de4:	88 0f       	add	r24, r24
    3de6:	99 1f       	adc	r25, r25
    3de8:	88 0f       	add	r24, r24
    3dea:	99 1f       	adc	r25, r25
    3dec:	88 0f       	add	r24, r24
    3dee:	99 1f       	adc	r25, r25
    3df0:	fc 01       	movw	r30, r24
    3df2:	ed 57       	subi	r30, 0x7D	; 125
    3df4:	fc 4d       	sbci	r31, 0xDC	; 220
    3df6:	80 81       	ld	r24, Z
    3df8:	88 2f       	mov	r24, r24
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	00 d0       	rcall	.+0      	; 0x3dfe <_cfg_dump_axis+0x2ec>
    3dfe:	0f 92       	push	r0
    3e00:	ed b7       	in	r30, 0x3d	; 61
    3e02:	fe b7       	in	r31, 0x3e	; 62
    3e04:	31 96       	adiw	r30, 0x01	; 1
    3e06:	40 83       	st	Z, r20
    3e08:	51 83       	std	Z+1, r21	; 0x01
    3e0a:	82 83       	std	Z+2, r24	; 0x02
    3e0c:	93 83       	std	Z+3, r25	; 0x03
    3e0e:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	0f 90       	pop	r0
    3e18:	0f 90       	pop	r0
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    3e1a:	49 e1       	ldi	r20, 0x19	; 25
    3e1c:	53 e0       	ldi	r21, 0x03	; 3
    3e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e20:	28 2f       	mov	r18, r24
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	c9 01       	movw	r24, r18
    3e26:	88 0f       	add	r24, r24
    3e28:	99 1f       	adc	r25, r25
    3e2a:	82 0f       	add	r24, r18
    3e2c:	93 1f       	adc	r25, r19
    3e2e:	88 0f       	add	r24, r24
    3e30:	99 1f       	adc	r25, r25
    3e32:	88 0f       	add	r24, r24
    3e34:	99 1f       	adc	r25, r25
    3e36:	88 0f       	add	r24, r24
    3e38:	99 1f       	adc	r25, r25
    3e3a:	fc 01       	movw	r30, r24
    3e3c:	ec 56       	subi	r30, 0x6C	; 108
    3e3e:	fc 4d       	sbci	r31, 0xDC	; 220
    3e40:	80 81       	ld	r24, Z
    3e42:	91 81       	ldd	r25, Z+1	; 0x01
    3e44:	a2 81       	ldd	r26, Z+2	; 0x02
    3e46:	b3 81       	ldd	r27, Z+3	; 0x03
    3e48:	00 d0       	rcall	.+0      	; 0x3e4a <_cfg_dump_axis+0x338>
    3e4a:	00 d0       	rcall	.+0      	; 0x3e4c <_cfg_dump_axis+0x33a>
    3e4c:	ed b7       	in	r30, 0x3d	; 61
    3e4e:	fe b7       	in	r31, 0x3e	; 62
    3e50:	31 96       	adiw	r30, 0x01	; 1
    3e52:	40 83       	st	Z, r20
    3e54:	51 83       	std	Z+1, r21	; 0x01
    3e56:	82 83       	std	Z+2, r24	; 0x02
    3e58:	93 83       	std	Z+3, r25	; 0x03
    3e5a:	a4 83       	std	Z+4, r26	; 0x04
    3e5c:	b5 83       	std	Z+5, r27	; 0x05
    3e5e:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    3e62:	8d b7       	in	r24, 0x3d	; 61
    3e64:	9e b7       	in	r25, 0x3e	; 62
    3e66:	06 96       	adiw	r24, 0x06	; 6
    3e68:	8d bf       	out	0x3d, r24	; 61
    3e6a:	9e bf       	out	0x3e, r25	; 62
}
    3e6c:	25 96       	adiw	r28, 0x05	; 5
    3e6e:	cd bf       	out	0x3d, r28	; 61
    3e70:	de bf       	out	0x3e, r29	; 62
    3e72:	cf 91       	pop	r28
    3e74:	df 91       	pop	r29
    3e76:	08 95       	ret

00003e78 <cfg_reset>:
/* 
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
    3e78:	df 93       	push	r29
    3e7a:	cf 93       	push	r28
    3e7c:	cd b7       	in	r28, 0x3d	; 61
    3e7e:	de b7       	in	r29, 0x3e	; 62
	cfg.config_version = EEPROM_DATA_VERSION;
    3e80:	84 e6       	ldi	r24, 0x64	; 100
    3e82:	80 93 73 23 	sts	0x2373, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    3e86:	8a e0       	ldi	r24, 0x0A	; 10
    3e88:	97 ed       	ldi	r25, 0xD7	; 215
    3e8a:	a3 e2       	ldi	r26, 0x23	; 35
    3e8c:	bc e3       	ldi	r27, 0x3C	; 60
    3e8e:	80 93 75 23 	sts	0x2375, r24
    3e92:	90 93 76 23 	sts	0x2376, r25
    3e96:	a0 93 77 23 	sts	0x2377, r26
    3e9a:	b0 93 78 23 	sts	0x2378, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    3e9e:	8c ed       	ldi	r24, 0xDC	; 220
    3ea0:	95 e0       	ldi	r25, 0x05	; 5
    3ea2:	80 93 84 23 	sts	0x2384, r24
    3ea6:	90 93 85 23 	sts	0x2385, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    3eaa:	8c ed       	ldi	r24, 0xDC	; 220
    3eac:	95 e0       	ldi	r25, 0x05	; 5
    3eae:	80 93 9c 23 	sts	0x239C, r24
    3eb2:	90 93 9d 23 	sts	0x239D, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    3eb6:	8c ed       	ldi	r24, 0xDC	; 220
    3eb8:	95 e0       	ldi	r25, 0x05	; 5
    3eba:	80 93 b4 23 	sts	0x23B4, r24
    3ebe:	90 93 b5 23 	sts	0x23B5, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    3ec2:	8c ed       	ldi	r24, 0xDC	; 220
    3ec4:	95 e0       	ldi	r25, 0x05	; 5
    3ec6:	80 93 cc 23 	sts	0x23CC, r24
    3eca:	90 93 cd 23 	sts	0x23CD, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    3ece:	8c ed       	ldi	r24, 0xDC	; 220
    3ed0:	95 e0       	ldi	r25, 0x05	; 5
    3ed2:	80 93 86 23 	sts	0x2386, r24
    3ed6:	90 93 87 23 	sts	0x2387, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    3eda:	8c ed       	ldi	r24, 0xDC	; 220
    3edc:	95 e0       	ldi	r25, 0x05	; 5
    3ede:	80 93 9e 23 	sts	0x239E, r24
    3ee2:	90 93 9f 23 	sts	0x239F, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    3ee6:	8c ed       	ldi	r24, 0xDC	; 220
    3ee8:	95 e0       	ldi	r25, 0x05	; 5
    3eea:	80 93 b6 23 	sts	0x23B6, r24
    3eee:	90 93 b7 23 	sts	0x23B7, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    3ef2:	8c ed       	ldi	r24, 0xDC	; 220
    3ef4:	95 e0       	ldi	r25, 0x05	; 5
    3ef6:	80 93 ce 23 	sts	0x23CE, r24
    3efa:	90 93 cf 23 	sts	0x23CF, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    3efe:	86 e6       	ldi	r24, 0x66	; 102
    3f00:	96 e6       	ldi	r25, 0x66	; 102
    3f02:	a6 ee       	ldi	r26, 0xE6	; 230
    3f04:	bf e3       	ldi	r27, 0x3F	; 63
    3f06:	80 93 88 23 	sts	0x2388, r24
    3f0a:	90 93 89 23 	sts	0x2389, r25
    3f0e:	a0 93 8a 23 	sts	0x238A, r26
    3f12:	b0 93 8b 23 	sts	0x238B, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    3f16:	86 e6       	ldi	r24, 0x66	; 102
    3f18:	96 e6       	ldi	r25, 0x66	; 102
    3f1a:	a6 ee       	ldi	r26, 0xE6	; 230
    3f1c:	bf e3       	ldi	r27, 0x3F	; 63
    3f1e:	80 93 a0 23 	sts	0x23A0, r24
    3f22:	90 93 a1 23 	sts	0x23A1, r25
    3f26:	a0 93 a2 23 	sts	0x23A2, r26
    3f2a:	b0 93 a3 23 	sts	0x23A3, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    3f2e:	86 e6       	ldi	r24, 0x66	; 102
    3f30:	96 e6       	ldi	r25, 0x66	; 102
    3f32:	a6 ee       	ldi	r26, 0xE6	; 230
    3f34:	bf e3       	ldi	r27, 0x3F	; 63
    3f36:	80 93 b8 23 	sts	0x23B8, r24
    3f3a:	90 93 b9 23 	sts	0x23B9, r25
    3f3e:	a0 93 ba 23 	sts	0x23BA, r26
    3f42:	b0 93 bb 23 	sts	0x23BB, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    3f46:	86 e6       	ldi	r24, 0x66	; 102
    3f48:	96 e6       	ldi	r25, 0x66	; 102
    3f4a:	a6 ee       	ldi	r26, 0xE6	; 230
    3f4c:	bf e3       	ldi	r27, 0x3F	; 63
    3f4e:	80 93 d0 23 	sts	0x23D0, r24
    3f52:	90 93 d1 23 	sts	0x23D1, r25
    3f56:	a0 93 d2 23 	sts	0x23D2, r26
    3f5a:	b0 93 d3 23 	sts	0x23D3, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    3f5e:	8c e5       	ldi	r24, 0x5C	; 92
    3f60:	9f e8       	ldi	r25, 0x8F	; 143
    3f62:	a2 ea       	ldi	r26, 0xA2	; 162
    3f64:	bf e3       	ldi	r27, 0x3F	; 63
    3f66:	80 93 8c 23 	sts	0x238C, r24
    3f6a:	90 93 8d 23 	sts	0x238D, r25
    3f6e:	a0 93 8e 23 	sts	0x238E, r26
    3f72:	b0 93 8f 23 	sts	0x238F, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    3f76:	8c e5       	ldi	r24, 0x5C	; 92
    3f78:	9f e8       	ldi	r25, 0x8F	; 143
    3f7a:	a2 ea       	ldi	r26, 0xA2	; 162
    3f7c:	bf e3       	ldi	r27, 0x3F	; 63
    3f7e:	80 93 a4 23 	sts	0x23A4, r24
    3f82:	90 93 a5 23 	sts	0x23A5, r25
    3f86:	a0 93 a6 23 	sts	0x23A6, r26
    3f8a:	b0 93 a7 23 	sts	0x23A7, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    3f8e:	8c e5       	ldi	r24, 0x5C	; 92
    3f90:	9f e8       	ldi	r25, 0x8F	; 143
    3f92:	a2 ea       	ldi	r26, 0xA2	; 162
    3f94:	bf e3       	ldi	r27, 0x3F	; 63
    3f96:	80 93 bc 23 	sts	0x23BC, r24
    3f9a:	90 93 bd 23 	sts	0x23BD, r25
    3f9e:	a0 93 be 23 	sts	0x23BE, r26
    3fa2:	b0 93 bf 23 	sts	0x23BF, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    3fa6:	8c e5       	ldi	r24, 0x5C	; 92
    3fa8:	9f e8       	ldi	r25, 0x8F	; 143
    3faa:	a2 ea       	ldi	r26, 0xA2	; 162
    3fac:	bf e3       	ldi	r27, 0x3F	; 63
    3fae:	80 93 d4 23 	sts	0x23D4, r24
    3fb2:	90 93 d5 23 	sts	0x23D5, r25
    3fb6:	a0 93 d6 23 	sts	0x23D6, r26
    3fba:	b0 93 d7 23 	sts	0x23D7, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    3fbe:	80 e0       	ldi	r24, 0x00	; 0
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	a8 ec       	ldi	r26, 0xC8	; 200
    3fc4:	b3 e4       	ldi	r27, 0x43	; 67
    3fc6:	80 93 90 23 	sts	0x2390, r24
    3fca:	90 93 91 23 	sts	0x2391, r25
    3fce:	a0 93 92 23 	sts	0x2392, r26
    3fd2:	b0 93 93 23 	sts	0x2393, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    3fd6:	80 e0       	ldi	r24, 0x00	; 0
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	a8 ec       	ldi	r26, 0xC8	; 200
    3fdc:	b3 e4       	ldi	r27, 0x43	; 67
    3fde:	80 93 a8 23 	sts	0x23A8, r24
    3fe2:	90 93 a9 23 	sts	0x23A9, r25
    3fe6:	a0 93 aa 23 	sts	0x23AA, r26
    3fea:	b0 93 ab 23 	sts	0x23AB, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    3fee:	80 e0       	ldi	r24, 0x00	; 0
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	a6 e9       	ldi	r26, 0x96	; 150
    3ff4:	b3 e4       	ldi	r27, 0x43	; 67
    3ff6:	80 93 c0 23 	sts	0x23C0, r24
    3ffa:	90 93 c1 23 	sts	0x23C1, r25
    3ffe:	a0 93 c2 23 	sts	0x23C2, r26
    4002:	b0 93 c3 23 	sts	0x23C3, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    4006:	80 e0       	ldi	r24, 0x00	; 0
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	a0 e8       	ldi	r26, 0x80	; 128
    400c:	bf eb       	ldi	r27, 0xBF	; 191
    400e:	80 93 d8 23 	sts	0x23D8, r24
    4012:	90 93 d9 23 	sts	0x23D9, r25
    4016:	a0 93 da 23 	sts	0x23DA, r26
    401a:	b0 93 db 23 	sts	0x23DB, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    401e:	88 e0       	ldi	r24, 0x08	; 8
    4020:	80 93 81 23 	sts	0x2381, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    4024:	88 e0       	ldi	r24, 0x08	; 8
    4026:	80 93 99 23 	sts	0x2399, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    402a:	88 e0       	ldi	r24, 0x08	; 8
    402c:	80 93 b1 23 	sts	0x23B1, r24
	cfg.a[A].microstep = A_MICROSTEPS;
    4030:	88 e0       	ldi	r24, 0x08	; 8
    4032:	80 93 c9 23 	sts	0x23C9, r24

	cfg.a[X].polarity = X_POLARITY;
    4036:	10 92 83 23 	sts	0x2383, r1
	cfg.a[Y].polarity = Y_POLARITY;
    403a:	81 e0       	ldi	r24, 0x01	; 1
    403c:	80 93 9b 23 	sts	0x239B, r24
	cfg.a[Z].polarity = Z_POLARITY;
    4040:	10 92 b3 23 	sts	0x23B3, r1
	cfg.a[A].polarity = A_POLARITY;
    4044:	10 92 cb 23 	sts	0x23CB, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    4048:	81 e0       	ldi	r24, 0x01	; 1
    404a:	80 93 98 23 	sts	0x2398, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    404e:	81 e0       	ldi	r24, 0x01	; 1
    4050:	80 93 b0 23 	sts	0x23B0, r24
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    4054:	81 e0       	ldi	r24, 0x01	; 1
    4056:	80 93 c8 23 	sts	0x23C8, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    405a:	10 92 e0 23 	sts	0x23E0, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    405e:	81 e0       	ldi	r24, 0x01	; 1
    4060:	80 93 82 23 	sts	0x2382, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    4064:	81 e0       	ldi	r24, 0x01	; 1
    4066:	80 93 9a 23 	sts	0x239A, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	80 93 b2 23 	sts	0x23B2, r24
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	80 93 ca 23 	sts	0x23CA, r24

	_cfg_computed();		// generate computed values from the above
    4076:	0e 94 40 20 	call	0x4080	; 0x4080 <_cfg_computed>
}
    407a:	cf 91       	pop	r28
    407c:	df 91       	pop	r29
    407e:	08 95       	ret

00004080 <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    4080:	af 92       	push	r10
    4082:	bf 92       	push	r11
    4084:	cf 92       	push	r12
    4086:	df 92       	push	r13
    4088:	ef 92       	push	r14
    408a:	ff 92       	push	r15
    408c:	0f 93       	push	r16
    408e:	1f 93       	push	r17
    4090:	df 93       	push	r29
    4092:	cf 93       	push	r28
    4094:	0f 92       	push	r0
    4096:	cd b7       	in	r28, 0x3d	; 61
    4098:	de b7       	in	r29, 0x3e	; 62
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    409a:	19 82       	std	Y+1, r1	; 0x01
    409c:	7a c0       	rjmp	.+244    	; 0x4192 <_cfg_computed+0x112>
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    409e:	89 81       	ldd	r24, Y+1	; 0x01
    40a0:	c8 2e       	mov	r12, r24
    40a2:	dd 24       	eor	r13, r13
    40a4:	89 81       	ldd	r24, Y+1	; 0x01
    40a6:	28 2f       	mov	r18, r24
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	c9 01       	movw	r24, r18
    40ac:	88 0f       	add	r24, r24
    40ae:	99 1f       	adc	r25, r25
    40b0:	82 0f       	add	r24, r18
    40b2:	93 1f       	adc	r25, r19
    40b4:	88 0f       	add	r24, r24
    40b6:	99 1f       	adc	r25, r25
    40b8:	88 0f       	add	r24, r24
    40ba:	99 1f       	adc	r25, r25
    40bc:	88 0f       	add	r24, r24
    40be:	99 1f       	adc	r25, r25
    40c0:	fc 01       	movw	r30, r24
    40c2:	e8 57       	subi	r30, 0x78	; 120
    40c4:	fc 4d       	sbci	r31, 0xDC	; 220
    40c6:	e0 80       	ld	r14, Z
    40c8:	f1 80       	ldd	r15, Z+1	; 0x01
    40ca:	02 81       	ldd	r16, Z+2	; 0x02
    40cc:	13 81       	ldd	r17, Z+3	; 0x03
    40ce:	89 81       	ldd	r24, Y+1	; 0x01
    40d0:	28 2f       	mov	r18, r24
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	c9 01       	movw	r24, r18
    40d6:	88 0f       	add	r24, r24
    40d8:	99 1f       	adc	r25, r25
    40da:	82 0f       	add	r24, r18
    40dc:	93 1f       	adc	r25, r19
    40de:	88 0f       	add	r24, r24
    40e0:	99 1f       	adc	r25, r25
    40e2:	88 0f       	add	r24, r24
    40e4:	99 1f       	adc	r25, r25
    40e6:	88 0f       	add	r24, r24
    40e8:	99 1f       	adc	r25, r25
    40ea:	fc 01       	movw	r30, r24
    40ec:	ef 57       	subi	r30, 0x7F	; 127
    40ee:	fc 4d       	sbci	r31, 0xDC	; 220
    40f0:	80 81       	ld	r24, Z
    40f2:	88 2f       	mov	r24, r24
    40f4:	90 e0       	ldi	r25, 0x00	; 0
    40f6:	aa 27       	eor	r26, r26
    40f8:	97 fd       	sbrc	r25, 7
    40fa:	a0 95       	com	r26
    40fc:	ba 2f       	mov	r27, r26
    40fe:	bc 01       	movw	r22, r24
    4100:	cd 01       	movw	r24, r26
    4102:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    4106:	9b 01       	movw	r18, r22
    4108:	ac 01       	movw	r20, r24
    410a:	c8 01       	movw	r24, r16
    410c:	b7 01       	movw	r22, r14
    410e:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    4112:	dc 01       	movw	r26, r24
    4114:	cb 01       	movw	r24, r22
    4116:	9c 01       	movw	r18, r24
    4118:	ad 01       	movw	r20, r26
    411a:	60 e0       	ldi	r22, 0x00	; 0
    411c:	70 e0       	ldi	r23, 0x00	; 0
    411e:	84 eb       	ldi	r24, 0xB4	; 180
    4120:	93 e4       	ldi	r25, 0x43	; 67
    4122:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    4126:	dc 01       	movw	r26, r24
    4128:	cb 01       	movw	r24, r22
    412a:	7c 01       	movw	r14, r24
    412c:	8d 01       	movw	r16, r26
    412e:	89 81       	ldd	r24, Y+1	; 0x01
    4130:	28 2f       	mov	r18, r24
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	c9 01       	movw	r24, r18
    4136:	88 0f       	add	r24, r24
    4138:	99 1f       	adc	r25, r25
    413a:	82 0f       	add	r24, r18
    413c:	93 1f       	adc	r25, r19
    413e:	88 0f       	add	r24, r24
    4140:	99 1f       	adc	r25, r25
    4142:	88 0f       	add	r24, r24
    4144:	99 1f       	adc	r25, r25
    4146:	88 0f       	add	r24, r24
    4148:	99 1f       	adc	r25, r25
    414a:	fc 01       	movw	r30, r24
    414c:	e4 57       	subi	r30, 0x74	; 116
    414e:	fc 4d       	sbci	r31, 0xDC	; 220
    4150:	20 81       	ld	r18, Z
    4152:	31 81       	ldd	r19, Z+1	; 0x01
    4154:	42 81       	ldd	r20, Z+2	; 0x02
    4156:	53 81       	ldd	r21, Z+3	; 0x03
    4158:	c8 01       	movw	r24, r16
    415a:	b7 01       	movw	r22, r14
    415c:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	9c 01       	movw	r18, r24
    4166:	ad 01       	movw	r20, r26
    4168:	c6 01       	movw	r24, r12
    416a:	88 0f       	add	r24, r24
    416c:	99 1f       	adc	r25, r25
    416e:	8c 0d       	add	r24, r12
    4170:	9d 1d       	adc	r25, r13
    4172:	88 0f       	add	r24, r24
    4174:	99 1f       	adc	r25, r25
    4176:	88 0f       	add	r24, r24
    4178:	99 1f       	adc	r25, r25
    417a:	88 0f       	add	r24, r24
    417c:	99 1f       	adc	r25, r25
    417e:	fc 01       	movw	r30, r24
    4180:	ec 56       	subi	r30, 0x6C	; 108
    4182:	fc 4d       	sbci	r31, 0xDC	; 220
    4184:	20 83       	st	Z, r18
    4186:	31 83       	std	Z+1, r19	; 0x01
    4188:	42 83       	std	Z+2, r20	; 0x02
    418a:	53 83       	std	Z+3, r21	; 0x03
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    418c:	89 81       	ldd	r24, Y+1	; 0x01
    418e:	8f 5f       	subi	r24, 0xFF	; 255
    4190:	89 83       	std	Y+1, r24	; 0x01
    4192:	89 81       	ldd	r24, Y+1	; 0x01
    4194:	84 30       	cpi	r24, 0x04	; 4
    4196:	08 f4       	brcc	.+2      	; 0x419a <_cfg_computed+0x11a>
    4198:	82 cf       	rjmp	.-252    	; 0x409e <_cfg_computed+0x1e>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    419a:	20 91 86 23 	lds	r18, 0x2386
    419e:	30 91 87 23 	lds	r19, 0x2387
    41a2:	80 91 81 23 	lds	r24, 0x2381
    41a6:	88 2f       	mov	r24, r24
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	ac 01       	movw	r20, r24
    41ac:	24 9f       	mul	r18, r20
    41ae:	c0 01       	movw	r24, r0
    41b0:	25 9f       	mul	r18, r21
    41b2:	90 0d       	add	r25, r0
    41b4:	34 9f       	mul	r19, r20
    41b6:	90 0d       	add	r25, r0
    41b8:	11 24       	eor	r1, r1
    41ba:	cc 01       	movw	r24, r24
    41bc:	a0 e0       	ldi	r26, 0x00	; 0
    41be:	b0 e0       	ldi	r27, 0x00	; 0
    41c0:	bc 01       	movw	r22, r24
    41c2:	cd 01       	movw	r24, r26
    41c4:	0e 94 48 56 	call	0xac90	; 0xac90 <__floatunsisf>
    41c8:	5b 01       	movw	r10, r22
    41ca:	6c 01       	movw	r12, r24
    41cc:	e0 90 88 23 	lds	r14, 0x2388
    41d0:	f0 90 89 23 	lds	r15, 0x2389
    41d4:	00 91 8a 23 	lds	r16, 0x238A
    41d8:	10 91 8b 23 	lds	r17, 0x238B
    41dc:	80 91 81 23 	lds	r24, 0x2381
    41e0:	88 2f       	mov	r24, r24
    41e2:	90 e0       	ldi	r25, 0x00	; 0
    41e4:	aa 27       	eor	r26, r26
    41e6:	97 fd       	sbrc	r25, 7
    41e8:	a0 95       	com	r26
    41ea:	ba 2f       	mov	r27, r26
    41ec:	bc 01       	movw	r22, r24
    41ee:	cd 01       	movw	r24, r26
    41f0:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    41f4:	9b 01       	movw	r18, r22
    41f6:	ac 01       	movw	r20, r24
    41f8:	c8 01       	movw	r24, r16
    41fa:	b7 01       	movw	r22, r14
    41fc:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    4200:	dc 01       	movw	r26, r24
    4202:	cb 01       	movw	r24, r22
    4204:	9c 01       	movw	r18, r24
    4206:	ad 01       	movw	r20, r26
    4208:	60 e0       	ldi	r22, 0x00	; 0
    420a:	70 e0       	ldi	r23, 0x00	; 0
    420c:	84 eb       	ldi	r24, 0xB4	; 180
    420e:	93 e4       	ldi	r25, 0x43	; 67
    4210:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    4214:	dc 01       	movw	r26, r24
    4216:	cb 01       	movw	r24, r22
    4218:	9c 01       	movw	r18, r24
    421a:	ad 01       	movw	r20, r26
    421c:	c6 01       	movw	r24, r12
    421e:	b5 01       	movw	r22, r10
    4220:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    4224:	dc 01       	movw	r26, r24
    4226:	cb 01       	movw	r24, r22
    4228:	80 93 79 23 	sts	0x2379, r24
    422c:	90 93 7a 23 	sts	0x237A, r25
    4230:	a0 93 7b 23 	sts	0x237B, r26
    4234:	b0 93 7c 23 	sts	0x237C, r27
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    4238:	20 91 84 23 	lds	r18, 0x2384
    423c:	30 91 85 23 	lds	r19, 0x2385
    4240:	80 91 81 23 	lds	r24, 0x2381
    4244:	88 2f       	mov	r24, r24
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	ac 01       	movw	r20, r24
    424a:	24 9f       	mul	r18, r20
    424c:	c0 01       	movw	r24, r0
    424e:	25 9f       	mul	r18, r21
    4250:	90 0d       	add	r25, r0
    4252:	34 9f       	mul	r19, r20
    4254:	90 0d       	add	r25, r0
    4256:	11 24       	eor	r1, r1
    4258:	cc 01       	movw	r24, r24
    425a:	a0 e0       	ldi	r26, 0x00	; 0
    425c:	b0 e0       	ldi	r27, 0x00	; 0
    425e:	bc 01       	movw	r22, r24
    4260:	cd 01       	movw	r24, r26
    4262:	0e 94 48 56 	call	0xac90	; 0xac90 <__floatunsisf>
    4266:	5b 01       	movw	r10, r22
    4268:	6c 01       	movw	r12, r24
    426a:	e0 90 88 23 	lds	r14, 0x2388
    426e:	f0 90 89 23 	lds	r15, 0x2389
    4272:	00 91 8a 23 	lds	r16, 0x238A
    4276:	10 91 8b 23 	lds	r17, 0x238B
    427a:	80 91 81 23 	lds	r24, 0x2381
    427e:	88 2f       	mov	r24, r24
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	aa 27       	eor	r26, r26
    4284:	97 fd       	sbrc	r25, 7
    4286:	a0 95       	com	r26
    4288:	ba 2f       	mov	r27, r26
    428a:	bc 01       	movw	r22, r24
    428c:	cd 01       	movw	r24, r26
    428e:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    4292:	9b 01       	movw	r18, r22
    4294:	ac 01       	movw	r20, r24
    4296:	c8 01       	movw	r24, r16
    4298:	b7 01       	movw	r22, r14
    429a:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    429e:	dc 01       	movw	r26, r24
    42a0:	cb 01       	movw	r24, r22
    42a2:	9c 01       	movw	r18, r24
    42a4:	ad 01       	movw	r20, r26
    42a6:	60 e0       	ldi	r22, 0x00	; 0
    42a8:	70 e0       	ldi	r23, 0x00	; 0
    42aa:	84 eb       	ldi	r24, 0xB4	; 180
    42ac:	93 e4       	ldi	r25, 0x43	; 67
    42ae:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    42b2:	dc 01       	movw	r26, r24
    42b4:	cb 01       	movw	r24, r22
    42b6:	9c 01       	movw	r18, r24
    42b8:	ad 01       	movw	r20, r26
    42ba:	c6 01       	movw	r24, r12
    42bc:	b5 01       	movw	r22, r10
    42be:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    42c2:	dc 01       	movw	r26, r24
    42c4:	cb 01       	movw	r24, r22
    42c6:	80 93 7d 23 	sts	0x237D, r24
    42ca:	90 93 7e 23 	sts	0x237E, r25
    42ce:	a0 93 7f 23 	sts	0x237F, r26
    42d2:	b0 93 80 23 	sts	0x2380, r27
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    42d6:	0f 90       	pop	r0
    42d8:	cf 91       	pop	r28
    42da:	df 91       	pop	r29
    42dc:	1f 91       	pop	r17
    42de:	0f 91       	pop	r16
    42e0:	ff 90       	pop	r15
    42e2:	ef 90       	pop	r14
    42e4:	df 90       	pop	r13
    42e6:	cf 90       	pop	r12
    42e8:	bf 90       	pop	r11
    42ea:	af 90       	pop	r10
    42ec:	08 95       	ret

000042ee <cfg_read>:
/* 
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
    42ee:	df 93       	push	r29
    42f0:	cf 93       	push	r28
    42f2:	00 d0       	rcall	.+0      	; 0x42f4 <cfg_read+0x6>
    42f4:	cd b7       	in	r28, 0x3d	; 61
    42f6:	de b7       	in	r29, 0x3e	; 62
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    42f8:	80 e0       	ldi	r24, 0x00	; 0
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <eeprom_get_char>
    4300:	89 83       	std	Y+1, r24	; 0x01

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    4302:	89 81       	ldd	r24, Y+1	; 0x01
    4304:	84 36       	cpi	r24, 0x64	; 100
    4306:	19 f0       	breq	.+6      	; 0x430e <cfg_read+0x20>
		return(FALSE); 
    4308:	1a 82       	std	Y+2, r1	; 0x02
    430a:	1b 82       	std	Y+3, r1	; 0x03
    430c:	11 c0       	rjmp	.+34     	; 0x4330 <cfg_read+0x42>
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    430e:	83 e7       	ldi	r24, 0x73	; 115
    4310:	93 e2       	ldi	r25, 0x23	; 35
    4312:	60 e0       	ldi	r22, 0x00	; 0
    4314:	70 e0       	ldi	r23, 0x00	; 0
    4316:	4e e6       	ldi	r20, 0x6E	; 110
    4318:	50 e0       	ldi	r21, 0x00	; 0
    431a:	0e 94 f1 37 	call	0x6fe2	; 0x6fe2 <memcpy_from_eeprom_with_checksum>
    431e:	00 97       	sbiw	r24, 0x00	; 0
    4320:	19 f4       	brne	.+6      	; 0x4328 <cfg_read+0x3a>
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
    4322:	1a 82       	std	Y+2, r1	; 0x02
    4324:	1b 82       	std	Y+3, r1	; 0x03
    4326:	04 c0       	rjmp	.+8      	; 0x4330 <cfg_read+0x42>
  	}
  	return(TRUE);
    4328:	81 e0       	ldi	r24, 0x01	; 1
    432a:	90 e0       	ldi	r25, 0x00	; 0
    432c:	8a 83       	std	Y+2, r24	; 0x02
    432e:	9b 83       	std	Y+3, r25	; 0x03
    4330:	8a 81       	ldd	r24, Y+2	; 0x02
    4332:	9b 81       	ldd	r25, Y+3	; 0x03
}
    4334:	23 96       	adiw	r28, 0x03	; 3
    4336:	cd bf       	out	0x3d, r28	; 61
    4338:	de bf       	out	0x3e, r29	; 62
    433a:	cf 91       	pop	r28
    433c:	df 91       	pop	r29
    433e:	08 95       	ret

00004340 <cfg_write>:
/* 
 * cfg_write() - write config struct to program ROM 
 */

void cfg_write()
{
    4340:	df 93       	push	r29
    4342:	cf 93       	push	r28
    4344:	cd b7       	in	r28, 0x3d	; 61
    4346:	de b7       	in	r29, 0x3e	; 62
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    4348:	23 e7       	ldi	r18, 0x73	; 115
    434a:	33 e2       	ldi	r19, 0x23	; 35
    434c:	80 e0       	ldi	r24, 0x00	; 0
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	b9 01       	movw	r22, r18
    4352:	4e e6       	ldi	r20, 0x6E	; 110
    4354:	50 e0       	ldi	r21, 0x00	; 0
    4356:	0e 94 a2 37 	call	0x6f44	; 0x6f44 <memcpy_to_eeprom_with_checksum>
}
    435a:	cf 91       	pop	r28
    435c:	df 91       	pop	r29
    435e:	08 95       	ret

00004360 <_cfg_print_status>:
/*
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
    4360:	df 93       	push	r29
    4362:	cf 93       	push	r28
    4364:	cd b7       	in	r28, 0x3d	; 61
    4366:	de b7       	in	r29, 0x3e	; 62
    4368:	25 97       	sbiw	r28, 0x05	; 5
    436a:	cd bf       	out	0x3d, r28	; 61
    436c:	de bf       	out	0x3e, r29	; 62
    436e:	89 83       	std	Y+1, r24	; 0x01
    4370:	6a 83       	std	Y+2, r22	; 0x02
    4372:	7b 83       	std	Y+3, r23	; 0x03
	switch(status_code) {
    4374:	89 81       	ldd	r24, Y+1	; 0x01
    4376:	28 2f       	mov	r18, r24
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	2c 83       	std	Y+4, r18	; 0x04
    437c:	3d 83       	std	Y+5, r19	; 0x05
    437e:	8c 81       	ldd	r24, Y+4	; 0x04
    4380:	9d 81       	ldd	r25, Y+5	; 0x05
    4382:	89 30       	cpi	r24, 0x09	; 9
    4384:	91 05       	cpc	r25, r1
    4386:	09 f4       	brne	.+2      	; 0x438a <_cfg_print_status+0x2a>
    4388:	58 c0       	rjmp	.+176    	; 0x443a <_cfg_print_status+0xda>
    438a:	2c 81       	ldd	r18, Y+4	; 0x04
    438c:	3d 81       	ldd	r19, Y+5	; 0x05
    438e:	2a 30       	cpi	r18, 0x0A	; 10
    4390:	31 05       	cpc	r19, r1
    4392:	5c f4       	brge	.+22     	; 0x43aa <_cfg_print_status+0x4a>
    4394:	8c 81       	ldd	r24, Y+4	; 0x04
    4396:	9d 81       	ldd	r25, Y+5	; 0x05
    4398:	81 30       	cpi	r24, 0x01	; 1
    439a:	91 05       	cpc	r25, r1
    439c:	c1 f0       	breq	.+48     	; 0x43ce <_cfg_print_status+0x6e>
    439e:	2c 81       	ldd	r18, Y+4	; 0x04
    43a0:	3d 81       	ldd	r19, Y+5	; 0x05
    43a2:	23 30       	cpi	r18, 0x03	; 3
    43a4:	31 05       	cpc	r19, r1
    43a6:	39 f1       	breq	.+78     	; 0x43f6 <_cfg_print_status+0x96>
    43a8:	83 c0       	rjmp	.+262    	; 0x44b0 <_cfg_print_status+0x150>
    43aa:	8c 81       	ldd	r24, Y+4	; 0x04
    43ac:	9d 81       	ldd	r25, Y+5	; 0x05
    43ae:	8e 30       	cpi	r24, 0x0E	; 14
    43b0:	91 05       	cpc	r25, r1
    43b2:	09 f4       	brne	.+2      	; 0x43b6 <_cfg_print_status+0x56>
    43b4:	56 c0       	rjmp	.+172    	; 0x4462 <_cfg_print_status+0x102>
    43b6:	2c 81       	ldd	r18, Y+4	; 0x04
    43b8:	3d 81       	ldd	r19, Y+5	; 0x05
    43ba:	20 31       	cpi	r18, 0x10	; 16
    43bc:	31 05       	cpc	r19, r1
    43be:	09 f4       	brne	.+2      	; 0x43c2 <_cfg_print_status+0x62>
    43c0:	64 c0       	rjmp	.+200    	; 0x448a <_cfg_print_status+0x12a>
    43c2:	8c 81       	ldd	r24, Y+4	; 0x04
    43c4:	9d 81       	ldd	r25, Y+5	; 0x05
    43c6:	8d 30       	cpi	r24, 0x0D	; 13
    43c8:	91 05       	cpc	r25, r1
    43ca:	19 f1       	breq	.+70     	; 0x4412 <_cfg_print_status+0xb2>
    43cc:	71 c0       	rjmp	.+226    	; 0x44b0 <_cfg_print_status+0x150>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_EAGAIN: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    43ce:	89 eb       	ldi	r24, 0xB9	; 185
    43d0:	95 e0       	ldi	r25, 0x05	; 5
    43d2:	00 d0       	rcall	.+0      	; 0x43d4 <_cfg_print_status+0x74>
    43d4:	0f 92       	push	r0
    43d6:	ed b7       	in	r30, 0x3d	; 61
    43d8:	fe b7       	in	r31, 0x3e	; 62
    43da:	31 96       	adiw	r30, 0x01	; 1
    43dc:	80 83       	st	Z, r24
    43de:	91 83       	std	Z+1, r25	; 0x01
    43e0:	8a 81       	ldd	r24, Y+2	; 0x02
    43e2:	9b 81       	ldd	r25, Y+3	; 0x03
    43e4:	82 83       	std	Z+2, r24	; 0x02
    43e6:	93 83       	std	Z+3, r25	; 0x03
    43e8:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    43ec:	0f 90       	pop	r0
    43ee:	0f 90       	pop	r0
    43f0:	0f 90       	pop	r0
    43f2:	0f 90       	pop	r0
    43f4:	5d c0       	rjmp	.+186    	; 0x44b0 <_cfg_print_status+0x150>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    43f6:	83 ea       	ldi	r24, 0xA3	; 163
    43f8:	95 e0       	ldi	r25, 0x05	; 5
    43fa:	0f 92       	push	r0
    43fc:	0f 92       	push	r0
    43fe:	ed b7       	in	r30, 0x3d	; 61
    4400:	fe b7       	in	r31, 0x3e	; 62
    4402:	31 96       	adiw	r30, 0x01	; 1
    4404:	80 83       	st	Z, r24
    4406:	91 83       	std	Z+1, r25	; 0x01
    4408:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    440c:	0f 90       	pop	r0
    440e:	0f 90       	pop	r0
    4410:	4f c0       	rjmp	.+158    	; 0x44b0 <_cfg_print_status+0x150>
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    4412:	8c e8       	ldi	r24, 0x8C	; 140
    4414:	95 e0       	ldi	r25, 0x05	; 5
    4416:	00 d0       	rcall	.+0      	; 0x4418 <_cfg_print_status+0xb8>
    4418:	0f 92       	push	r0
    441a:	ed b7       	in	r30, 0x3d	; 61
    441c:	fe b7       	in	r31, 0x3e	; 62
    441e:	31 96       	adiw	r30, 0x01	; 1
    4420:	80 83       	st	Z, r24
    4422:	91 83       	std	Z+1, r25	; 0x01
    4424:	8a 81       	ldd	r24, Y+2	; 0x02
    4426:	9b 81       	ldd	r25, Y+3	; 0x03
    4428:	82 83       	std	Z+2, r24	; 0x02
    442a:	93 83       	std	Z+3, r25	; 0x03
    442c:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    4430:	0f 90       	pop	r0
    4432:	0f 90       	pop	r0
    4434:	0f 90       	pop	r0
    4436:	0f 90       	pop	r0
    4438:	3b c0       	rjmp	.+118    	; 0x44b0 <_cfg_print_status+0x150>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    443a:	82 e7       	ldi	r24, 0x72	; 114
    443c:	95 e0       	ldi	r25, 0x05	; 5
    443e:	00 d0       	rcall	.+0      	; 0x4440 <_cfg_print_status+0xe0>
    4440:	0f 92       	push	r0
    4442:	ed b7       	in	r30, 0x3d	; 61
    4444:	fe b7       	in	r31, 0x3e	; 62
    4446:	31 96       	adiw	r30, 0x01	; 1
    4448:	80 83       	st	Z, r24
    444a:	91 83       	std	Z+1, r25	; 0x01
    444c:	8a 81       	ldd	r24, Y+2	; 0x02
    444e:	9b 81       	ldd	r25, Y+3	; 0x03
    4450:	82 83       	std	Z+2, r24	; 0x02
    4452:	93 83       	std	Z+3, r25	; 0x03
    4454:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    4458:	0f 90       	pop	r0
    445a:	0f 90       	pop	r0
    445c:	0f 90       	pop	r0
    445e:	0f 90       	pop	r0
    4460:	27 c0       	rjmp	.+78     	; 0x44b0 <_cfg_print_status+0x150>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    4462:	88 e5       	ldi	r24, 0x58	; 88
    4464:	95 e0       	ldi	r25, 0x05	; 5
    4466:	00 d0       	rcall	.+0      	; 0x4468 <_cfg_print_status+0x108>
    4468:	0f 92       	push	r0
    446a:	ed b7       	in	r30, 0x3d	; 61
    446c:	fe b7       	in	r31, 0x3e	; 62
    446e:	31 96       	adiw	r30, 0x01	; 1
    4470:	80 83       	st	Z, r24
    4472:	91 83       	std	Z+1, r25	; 0x01
    4474:	8a 81       	ldd	r24, Y+2	; 0x02
    4476:	9b 81       	ldd	r25, Y+3	; 0x03
    4478:	82 83       	std	Z+2, r24	; 0x02
    447a:	93 83       	std	Z+3, r25	; 0x03
    447c:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    4480:	0f 90       	pop	r0
    4482:	0f 90       	pop	r0
    4484:	0f 90       	pop	r0
    4486:	0f 90       	pop	r0
    4488:	13 c0       	rjmp	.+38     	; 0x44b0 <_cfg_print_status+0x150>
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    448a:	8d e3       	ldi	r24, 0x3D	; 61
    448c:	95 e0       	ldi	r25, 0x05	; 5
    448e:	00 d0       	rcall	.+0      	; 0x4490 <_cfg_print_status+0x130>
    4490:	0f 92       	push	r0
    4492:	ed b7       	in	r30, 0x3d	; 61
    4494:	fe b7       	in	r31, 0x3e	; 62
    4496:	31 96       	adiw	r30, 0x01	; 1
    4498:	80 83       	st	Z, r24
    449a:	91 83       	std	Z+1, r25	; 0x01
    449c:	8a 81       	ldd	r24, Y+2	; 0x02
    449e:	9b 81       	ldd	r25, Y+3	; 0x03
    44a0:	82 83       	std	Z+2, r24	; 0x02
    44a2:	93 83       	std	Z+3, r25	; 0x03
    44a4:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    44a8:	0f 90       	pop	r0
    44aa:	0f 90       	pop	r0
    44ac:	0f 90       	pop	r0
    44ae:	0f 90       	pop	r0
			break;
	}
	return;
}
    44b0:	25 96       	adiw	r28, 0x05	; 5
    44b2:	cd bf       	out	0x3d, r28	; 61
    44b4:	de bf       	out	0x3e, r29	; 62
    44b6:	cf 91       	pop	r28
    44b8:	df 91       	pop	r29
    44ba:	08 95       	ret

000044bc <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    44bc:	df 93       	push	r29
    44be:	cf 93       	push	r28
    44c0:	cd b7       	in	r28, 0x3d	; 61
    44c2:	de b7       	in	r29, 0x3e	; 62
    44c4:	e0 97       	sbiw	r28, 0x30	; 48
    44c6:	cd bf       	out	0x3d, r28	; 61
    44c8:	de bf       	out	0x3e, r29	; 62
	char text[40];
	int i = 0;					// ROM buffer index (int allows for > 256 chars)
    44ca:	1f 82       	std	Y+7, r1	; 0x07
    44cc:	18 86       	std	Y+8, r1	; 0x08
	int j = 0;					// RAM buffer index (text)
    44ce:	1d 82       	std	Y+5, r1	; 0x05
    44d0:	1e 82       	std	Y+6, r1	; 0x06
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    44d2:	8f 81       	ldd	r24, Y+7	; 0x07
    44d4:	98 85       	ldd	r25, Y+8	; 0x08
    44d6:	8a 52       	subi	r24, 0x2A	; 42
    44d8:	9a 4f       	sbci	r25, 0xFA	; 250
    44da:	8a 83       	std	Y+2, r24	; 0x02
    44dc:	9b 83       	std	Y+3, r25	; 0x03
    44de:	8f 81       	ldd	r24, Y+7	; 0x07
    44e0:	98 85       	ldd	r25, Y+8	; 0x08
    44e2:	01 96       	adiw	r24, 0x01	; 1
    44e4:	8f 83       	std	Y+7, r24	; 0x07
    44e6:	98 87       	std	Y+8, r25	; 0x08
    44e8:	ea 81       	ldd	r30, Y+2	; 0x02
    44ea:	fb 81       	ldd	r31, Y+3	; 0x03
    44ec:	84 91       	lpm	r24, Z+
    44ee:	89 83       	std	Y+1, r24	; 0x01
    44f0:	89 81       	ldd	r24, Y+1	; 0x01
    44f2:	8c 83       	std	Y+4, r24	; 0x04
		if (c == 0) {									// last line
    44f4:	8c 81       	ldd	r24, Y+4	; 0x04
    44f6:	88 23       	and	r24, r24
    44f8:	91 f4       	brne	.+36     	; 0x451e <cfg_test+0x62>
			text[j] = 0;
    44fa:	2d 81       	ldd	r18, Y+5	; 0x05
    44fc:	3e 81       	ldd	r19, Y+6	; 0x06
    44fe:	ce 01       	movw	r24, r28
    4500:	09 96       	adiw	r24, 0x09	; 9
    4502:	fc 01       	movw	r30, r24
    4504:	e2 0f       	add	r30, r18
    4506:	f3 1f       	adc	r31, r19
    4508:	10 82       	st	Z, r1
			cfg_parse(text);
    450a:	ce 01       	movw	r24, r28
    450c:	09 96       	adiw	r24, 0x09	; 9
    450e:	0e 94 65 1a 	call	0x34ca	; 0x34ca <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    4512:	e0 96       	adiw	r28, 0x30	; 48
    4514:	cd bf       	out	0x3d, r28	; 61
    4516:	de bf       	out	0x3e, r29	; 62
    4518:	cf 91       	pop	r28
    451a:	df 91       	pop	r29
    451c:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    451e:	8c 81       	ldd	r24, Y+4	; 0x04
    4520:	8d 30       	cpi	r24, 0x0D	; 13
    4522:	31 f0       	breq	.+12     	; 0x4530 <cfg_test+0x74>
    4524:	8c 81       	ldd	r24, Y+4	; 0x04
    4526:	8a 30       	cpi	r24, 0x0A	; 10
    4528:	19 f0       	breq	.+6      	; 0x4530 <cfg_test+0x74>
    452a:	8c 81       	ldd	r24, Y+4	; 0x04
    452c:	8b 33       	cpi	r24, 0x3B	; 59
    452e:	79 f4       	brne	.+30     	; 0x454e <cfg_test+0x92>
			text[j] = 0;							// terminate the string
    4530:	2d 81       	ldd	r18, Y+5	; 0x05
    4532:	3e 81       	ldd	r19, Y+6	; 0x06
    4534:	ce 01       	movw	r24, r28
    4536:	09 96       	adiw	r24, 0x09	; 9
    4538:	fc 01       	movw	r30, r24
    453a:	e2 0f       	add	r30, r18
    453c:	f3 1f       	adc	r31, r19
    453e:	10 82       	st	Z, r1
			cfg_parse(text);						// parse line 
    4540:	ce 01       	movw	r24, r28
    4542:	09 96       	adiw	r24, 0x09	; 9
    4544:	0e 94 65 1a 	call	0x34ca	; 0x34ca <cfg_parse>
			j = 0;			
    4548:	1d 82       	std	Y+5, r1	; 0x05
    454a:	1e 82       	std	Y+6, r1	; 0x06
    454c:	c2 cf       	rjmp	.-124    	; 0x44d2 <cfg_test+0x16>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    454e:	8c 81       	ldd	r24, Y+4	; 0x04
    4550:	81 32       	cpi	r24, 0x21	; 33
    4552:	08 f4       	brcc	.+2      	; 0x4556 <cfg_test+0x9a>
    4554:	be cf       	rjmp	.-132    	; 0x44d2 <cfg_test+0x16>
		} else {
			text[j++] = c;							// put characters into line
    4556:	2d 81       	ldd	r18, Y+5	; 0x05
    4558:	3e 81       	ldd	r19, Y+6	; 0x06
    455a:	ce 01       	movw	r24, r28
    455c:	09 96       	adiw	r24, 0x09	; 9
    455e:	fc 01       	movw	r30, r24
    4560:	e2 0f       	add	r30, r18
    4562:	f3 1f       	adc	r31, r19
    4564:	8c 81       	ldd	r24, Y+4	; 0x04
    4566:	80 83       	st	Z, r24
    4568:	8d 81       	ldd	r24, Y+5	; 0x05
    456a:	9e 81       	ldd	r25, Y+6	; 0x06
    456c:	01 96       	adiw	r24, 0x01	; 1
    456e:	8d 83       	std	Y+5, r24	; 0x05
    4570:	9e 83       	std	Y+6, r25	; 0x06
    4572:	af cf       	rjmp	.-162    	; 0x44d2 <cfg_test+0x16>

00004574 <en_init>:
#include "encoder.h"
#include "hardware.h"


void en_init(void) 
{
    4574:	df 93       	push	r29
    4576:	cf 93       	push	r28
    4578:	cd b7       	in	r28, 0x3d	; 61
    457a:	de b7       	in	r29, 0x3e	; 62
	return;
}
    457c:	cf 91       	pop	r28
    457e:	df 91       	pop	r29
    4580:	08 95       	ret

00004582 <en_write>:
 * This is a hack to hide the fact that we've scattered the encode output
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
    4582:	df 93       	push	r29
    4584:	cf 93       	push	r28
    4586:	0f 92       	push	r0
    4588:	cd b7       	in	r28, 0x3d	; 61
    458a:	de b7       	in	r29, 0x3e	; 62
    458c:	89 83       	std	Y+1, r24	; 0x01
	if (b && 0x01) { 								// b0 is on A axis
    458e:	89 81       	ldd	r24, Y+1	; 0x01
    4590:	88 23       	and	r24, r24
    4592:	39 f0       	breq	.+14     	; 0x45a2 <en_write+0x20>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    4594:	e0 91 6f 23 	lds	r30, 0x236F
    4598:	f0 91 70 23 	lds	r31, 0x2370
    459c:	80 e2       	ldi	r24, 0x20	; 32
    459e:	85 83       	std	Z+5, r24	; 0x05
    45a0:	06 c0       	rjmp	.+12     	; 0x45ae <en_write+0x2c>
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    45a2:	e0 91 6f 23 	lds	r30, 0x236F
    45a6:	f0 91 70 23 	lds	r31, 0x2370
    45aa:	80 e2       	ldi	r24, 0x20	; 32
    45ac:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
    45ae:	89 81       	ldd	r24, Y+1	; 0x01
    45b0:	88 23       	and	r24, r24
    45b2:	39 f0       	breq	.+14     	; 0x45c2 <en_write+0x40>
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    45b4:	e0 91 5f 23 	lds	r30, 0x235F
    45b8:	f0 91 60 23 	lds	r31, 0x2360
    45bc:	80 e2       	ldi	r24, 0x20	; 32
    45be:	85 83       	std	Z+5, r24	; 0x05
    45c0:	06 c0       	rjmp	.+12     	; 0x45ce <en_write+0x4c>
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    45c2:	e0 91 5f 23 	lds	r30, 0x235F
    45c6:	f0 91 60 23 	lds	r31, 0x2360
    45ca:	80 e2       	ldi	r24, 0x20	; 32
    45cc:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
    45ce:	89 81       	ldd	r24, Y+1	; 0x01
    45d0:	88 23       	and	r24, r24
    45d2:	39 f0       	breq	.+14     	; 0x45e2 <en_write+0x60>
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    45d4:	e0 91 4f 23 	lds	r30, 0x234F
    45d8:	f0 91 50 23 	lds	r31, 0x2350
    45dc:	80 e2       	ldi	r24, 0x20	; 32
    45de:	85 83       	std	Z+5, r24	; 0x05
    45e0:	06 c0       	rjmp	.+12     	; 0x45ee <en_write+0x6c>
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    45e2:	e0 91 4f 23 	lds	r30, 0x234F
    45e6:	f0 91 50 23 	lds	r31, 0x2350
    45ea:	80 e2       	ldi	r24, 0x20	; 32
    45ec:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
    45ee:	89 81       	ldd	r24, Y+1	; 0x01
    45f0:	88 23       	and	r24, r24
    45f2:	39 f0       	breq	.+14     	; 0x4602 <en_write+0x80>
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    45f4:	e0 91 3f 23 	lds	r30, 0x233F
    45f8:	f0 91 40 23 	lds	r31, 0x2340
    45fc:	80 e2       	ldi	r24, 0x20	; 32
    45fe:	85 83       	std	Z+5, r24	; 0x05
    4600:	06 c0       	rjmp	.+12     	; 0x460e <en_write+0x8c>
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    4602:	e0 91 3f 23 	lds	r30, 0x233F
    4606:	f0 91 40 23 	lds	r31, 0x2340
    460a:	80 e2       	ldi	r24, 0x20	; 32
    460c:	86 83       	std	Z+6, r24	; 0x06
	}
}
    460e:	0f 90       	pop	r0
    4610:	cf 91       	pop	r28
    4612:	df 91       	pop	r29
    4614:	08 95       	ret

00004616 <xmega_init>:

/*
 * xmega_init()
 */

void xmega_init(void) {
    4616:	df 93       	push	r29
    4618:	cf 93       	push	r28
    461a:	cd b7       	in	r28, 0x3d	; 61
    461c:	de b7       	in	r29, 0x3e	; 62
	xmega_init_clocks();
    461e:	0e 94 14 23 	call	0x4628	; 0x4628 <xmega_init_clocks>
}
    4622:	cf 91       	pop	r28
    4624:	df 91       	pop	r29
    4626:	08 95       	ret

00004628 <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    4628:	df 93       	push	r29
    462a:	cf 93       	push	r28
    462c:	cd b7       	in	r28, 0x3d	; 61
    462e:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    4630:	e0 e5       	ldi	r30, 0x50	; 80
    4632:	f0 e0       	ldi	r31, 0x00	; 0
    4634:	8b ec       	ldi	r24, 0xCB	; 203
    4636:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    4638:	e0 e5       	ldi	r30, 0x50	; 80
    463a:	f0 e0       	ldi	r31, 0x00	; 0
    463c:	88 e0       	ldi	r24, 0x08	; 8
    463e:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    4640:	e0 e5       	ldi	r30, 0x50	; 80
    4642:	f0 e0       	ldi	r31, 0x00	; 0
    4644:	81 81       	ldd	r24, Z+1	; 0x01
    4646:	88 2f       	mov	r24, r24
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	88 70       	andi	r24, 0x08	; 8
    464c:	90 70       	andi	r25, 0x00	; 0
    464e:	00 97       	sbiw	r24, 0x00	; 0
    4650:	b9 f3       	breq	.-18     	; 0x4640 <xmega_init_clocks+0x18>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    4652:	e0 e5       	ldi	r30, 0x50	; 80
    4654:	f0 e0       	ldi	r31, 0x00	; 0
    4656:	82 ec       	ldi	r24, 0xC2	; 194
    4658:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    465a:	e0 e5       	ldi	r30, 0x50	; 80
    465c:	f0 e0       	ldi	r31, 0x00	; 0
    465e:	88 e1       	ldi	r24, 0x18	; 24
    4660:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    4662:	e0 e5       	ldi	r30, 0x50	; 80
    4664:	f0 e0       	ldi	r31, 0x00	; 0
    4666:	81 81       	ldd	r24, Z+1	; 0x01
    4668:	88 2f       	mov	r24, r24
    466a:	90 e0       	ldi	r25, 0x00	; 0
    466c:	80 71       	andi	r24, 0x10	; 16
    466e:	90 70       	andi	r25, 0x00	; 0
    4670:	00 97       	sbiw	r24, 0x00	; 0
    4672:	b9 f3       	breq	.-18     	; 0x4662 <xmega_init_clocks+0x3a>
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
    4674:	80 e4       	ldi	r24, 0x40	; 64
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	64 e0       	ldi	r22, 0x04	; 4
    467a:	0e 94 49 23 	call	0x4692	; 0x4692 <CCPWrite>
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    467e:	a0 e5       	ldi	r26, 0x50	; 80
    4680:	b0 e0       	ldi	r27, 0x00	; 0
    4682:	e0 e5       	ldi	r30, 0x50	; 80
    4684:	f0 e0       	ldi	r31, 0x00	; 0
    4686:	80 81       	ld	r24, Z
    4688:	8e 7f       	andi	r24, 0xFE	; 254
    468a:	8c 93       	st	X, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    468c:	cf 91       	pop	r28
    468e:	df 91       	pop	r29
    4690:	08 95       	ret

00004692 <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    4692:	0f 93       	push	r16
    4694:	df 93       	push	r29
    4696:	cf 93       	push	r28
    4698:	00 d0       	rcall	.+0      	; 0x469a <CCPWrite+0x8>
    469a:	00 d0       	rcall	.+0      	; 0x469c <CCPWrite+0xa>
    469c:	cd b7       	in	r28, 0x3d	; 61
    469e:	de b7       	in	r29, 0x3e	; 62
    46a0:	8c 83       	std	Y+4, r24	; 0x04
    46a2:	9d 83       	std	Y+5, r25	; 0x05
    46a4:	6e 83       	std	Y+6, r22	; 0x06

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    46a6:	ef e3       	ldi	r30, 0x3F	; 63
    46a8:	f0 e0       	ldi	r31, 0x00	; 0
    46aa:	80 81       	ld	r24, Z
    46ac:	8b 83       	std	Y+3, r24	; 0x03
    46ae:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
    46b0:	8c 81       	ldd	r24, Y+4	; 0x04
    46b2:	9d 81       	ldd	r25, Y+5	; 0x05
    46b4:	89 83       	std	Y+1, r24	; 0x01
    46b6:	9a 83       	std	Y+2, r25	; 0x02
#ifdef RAMPZ
	RAMPZ = 0;
    46b8:	eb e3       	ldi	r30, 0x3B	; 59
    46ba:	f0 e0       	ldi	r31, 0x00	; 0
    46bc:	10 82       	st	Z, r1
#endif
	asm volatile(
    46be:	89 81       	ldd	r24, Y+1	; 0x01
    46c0:	9a 81       	ldd	r25, Y+2	; 0x02
    46c2:	2e 81       	ldd	r18, Y+6	; 0x06
    46c4:	fc 01       	movw	r30, r24
    46c6:	08 ed       	ldi	r16, 0xD8	; 216
    46c8:	04 bf       	out	0x34, r16	; 52
    46ca:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    46cc:	ef e3       	ldi	r30, 0x3F	; 63
    46ce:	f0 e0       	ldi	r31, 0x00	; 0
    46d0:	8b 81       	ldd	r24, Y+3	; 0x03
    46d2:	80 83       	st	Z, r24
#endif
}
    46d4:	26 96       	adiw	r28, 0x06	; 6
    46d6:	cd bf       	out	0x3d, r28	; 61
    46d8:	de bf       	out	0x3e, r29	; 62
    46da:	cf 91       	pop	r28
    46dc:	df 91       	pop	r29
    46de:	0f 91       	pop	r16
    46e0:	08 95       	ret

000046e2 <mc_init>:
/* 
 * mc_init() 
 */

void mc_init()
{
    46e2:	df 93       	push	r29
    46e4:	cf 93       	push	r28
    46e6:	cd b7       	in	r28, 0x3d	; 61
    46e8:	de b7       	in	r29, 0x3e	; 62
	clear_vector(mc.position);		// zero robot position
    46ea:	87 e5       	ldi	r24, 0x57	; 87
    46ec:	91 e2       	ldi	r25, 0x21	; 33
    46ee:	60 e0       	ldi	r22, 0x00	; 0
    46f0:	70 e0       	ldi	r23, 0x00	; 0
    46f2:	4c e0       	ldi	r20, 0x0C	; 12
    46f4:	50 e0       	ldi	r21, 0x00	; 0
    46f6:	0e 94 4b 5c 	call	0xb896	; 0xb896 <memset>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    46fa:	10 92 56 21 	sts	0x2156, r1
	ma.arc_state = MC_STATE_OFF;
    46fe:	10 92 e3 23 	sts	0x23E3, r1
}
    4702:	cf 91       	pop	r28
    4704:	df 91       	pop	r29
    4706:	08 95       	ret

00004708 <mc_motion_stop>:
/* 
 * mc_motion_stop() - stop all current motions
 */

int mc_motion_stop()
{
    4708:	df 93       	push	r29
    470a:	cf 93       	push	r28
    470c:	cd b7       	in	r28, 0x3d	; 61
    470e:	de b7       	in	r29, 0x3e	; 62
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    4710:	10 92 56 21 	sts	0x2156, r1
	ma.arc_state = MC_STATE_OFF;
    4714:	10 92 e3 23 	sts	0x23E3, r1
	return (TG_OK);
    4718:	80 e0       	ldi	r24, 0x00	; 0
    471a:	90 e0       	ldi	r25, 0x00	; 0
}
    471c:	cf 91       	pop	r28
    471e:	df 91       	pop	r29
    4720:	08 95       	ret

00004722 <mc_line_blocking>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line_blocking(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    4722:	8f 92       	push	r8
    4724:	9f 92       	push	r9
    4726:	af 92       	push	r10
    4728:	bf 92       	push	r11
    472a:	cf 92       	push	r12
    472c:	df 92       	push	r13
    472e:	ef 92       	push	r14
    4730:	ff 92       	push	r15
    4732:	0f 93       	push	r16
    4734:	1f 93       	push	r17
    4736:	df 93       	push	r29
    4738:	cf 93       	push	r28
    473a:	cd b7       	in	r28, 0x3d	; 61
    473c:	de b7       	in	r29, 0x3e	; 62
    473e:	62 97       	sbiw	r28, 0x12	; 18
    4740:	cd bf       	out	0x3d, r28	; 61
    4742:	de bf       	out	0x3e, r29	; 62
    4744:	69 83       	std	Y+1, r22	; 0x01
    4746:	7a 83       	std	Y+2, r23	; 0x02
    4748:	8b 83       	std	Y+3, r24	; 0x03
    474a:	9c 83       	std	Y+4, r25	; 0x04
    474c:	2d 83       	std	Y+5, r18	; 0x05
    474e:	3e 83       	std	Y+6, r19	; 0x06
    4750:	4f 83       	std	Y+7, r20	; 0x07
    4752:	58 87       	std	Y+8, r21	; 0x08
    4754:	e9 86       	std	Y+9, r14	; 0x09
    4756:	fa 86       	std	Y+10, r15	; 0x0a
    4758:	0b 87       	std	Y+11, r16	; 0x0b
    475a:	1c 87       	std	Y+12, r17	; 0x0c
    475c:	ad 86       	std	Y+13, r10	; 0x0d
    475e:	be 86       	std	Y+14, r11	; 0x0e
    4760:	cf 86       	std	Y+15, r12	; 0x0f
    4762:	d8 8a       	std	Y+16, r13	; 0x10
    4764:	89 8a       	std	Y+17, r8	; 0x11
    4766:	9a 8a       	std	Y+18, r9	; 0x12
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    4768:	80 91 94 23 	lds	r24, 0x2394
    476c:	90 91 95 23 	lds	r25, 0x2395
    4770:	a0 91 96 23 	lds	r26, 0x2396
    4774:	b0 91 97 23 	lds	r27, 0x2397
    4778:	bc 01       	movw	r22, r24
    477a:	cd 01       	movw	r24, r26
    477c:	29 81       	ldd	r18, Y+1	; 0x01
    477e:	3a 81       	ldd	r19, Y+2	; 0x02
    4780:	4b 81       	ldd	r20, Y+3	; 0x03
    4782:	5c 81       	ldd	r21, Y+4	; 0x04
    4784:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    4788:	dc 01       	movw	r26, r24
    478a:	cb 01       	movw	r24, r22
    478c:	bc 01       	movw	r22, r24
    478e:	cd 01       	movw	r24, r26
    4790:	0e 94 3a 58 	call	0xb074	; 0xb074 <lround>
    4794:	dc 01       	movw	r26, r24
    4796:	cb 01       	movw	r24, r22
    4798:	80 93 63 21 	sts	0x2163, r24
    479c:	90 93 64 21 	sts	0x2164, r25
    47a0:	a0 93 65 21 	sts	0x2165, r26
    47a4:	b0 93 66 21 	sts	0x2166, r27
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    47a8:	80 91 ac 23 	lds	r24, 0x23AC
    47ac:	90 91 ad 23 	lds	r25, 0x23AD
    47b0:	a0 91 ae 23 	lds	r26, 0x23AE
    47b4:	b0 91 af 23 	lds	r27, 0x23AF
    47b8:	bc 01       	movw	r22, r24
    47ba:	cd 01       	movw	r24, r26
    47bc:	2d 81       	ldd	r18, Y+5	; 0x05
    47be:	3e 81       	ldd	r19, Y+6	; 0x06
    47c0:	4f 81       	ldd	r20, Y+7	; 0x07
    47c2:	58 85       	ldd	r21, Y+8	; 0x08
    47c4:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    47c8:	dc 01       	movw	r26, r24
    47ca:	cb 01       	movw	r24, r22
    47cc:	bc 01       	movw	r22, r24
    47ce:	cd 01       	movw	r24, r26
    47d0:	0e 94 3a 58 	call	0xb074	; 0xb074 <lround>
    47d4:	dc 01       	movw	r26, r24
    47d6:	cb 01       	movw	r24, r22
    47d8:	80 93 67 21 	sts	0x2167, r24
    47dc:	90 93 68 21 	sts	0x2168, r25
    47e0:	a0 93 69 21 	sts	0x2169, r26
    47e4:	b0 93 6a 21 	sts	0x216A, r27
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    47e8:	80 91 c4 23 	lds	r24, 0x23C4
    47ec:	90 91 c5 23 	lds	r25, 0x23C5
    47f0:	a0 91 c6 23 	lds	r26, 0x23C6
    47f4:	b0 91 c7 23 	lds	r27, 0x23C7
    47f8:	bc 01       	movw	r22, r24
    47fa:	cd 01       	movw	r24, r26
    47fc:	29 85       	ldd	r18, Y+9	; 0x09
    47fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    4800:	4b 85       	ldd	r20, Y+11	; 0x0b
    4802:	5c 85       	ldd	r21, Y+12	; 0x0c
    4804:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    4808:	dc 01       	movw	r26, r24
    480a:	cb 01       	movw	r24, r22
    480c:	bc 01       	movw	r22, r24
    480e:	cd 01       	movw	r24, r26
    4810:	0e 94 3a 58 	call	0xb074	; 0xb074 <lround>
    4814:	dc 01       	movw	r26, r24
    4816:	cb 01       	movw	r24, r22
    4818:	80 93 6b 21 	sts	0x216B, r24
    481c:	90 93 6c 21 	sts	0x216C, r25
    4820:	a0 93 6d 21 	sts	0x216D, r26
    4824:	b0 93 6e 21 	sts	0x216E, r27

	mc.steps[X] = mc.target[X]-mc.position[X];
    4828:	20 91 63 21 	lds	r18, 0x2163
    482c:	30 91 64 21 	lds	r19, 0x2164
    4830:	40 91 65 21 	lds	r20, 0x2165
    4834:	50 91 66 21 	lds	r21, 0x2166
    4838:	80 91 57 21 	lds	r24, 0x2157
    483c:	90 91 58 21 	lds	r25, 0x2158
    4840:	a0 91 59 21 	lds	r26, 0x2159
    4844:	b0 91 5a 21 	lds	r27, 0x215A
    4848:	79 01       	movw	r14, r18
    484a:	8a 01       	movw	r16, r20
    484c:	e8 1a       	sub	r14, r24
    484e:	f9 0a       	sbc	r15, r25
    4850:	0a 0b       	sbc	r16, r26
    4852:	1b 0b       	sbc	r17, r27
    4854:	d8 01       	movw	r26, r16
    4856:	c7 01       	movw	r24, r14
    4858:	80 93 6f 21 	sts	0x216F, r24
    485c:	90 93 70 21 	sts	0x2170, r25
    4860:	a0 93 71 21 	sts	0x2171, r26
    4864:	b0 93 72 21 	sts	0x2172, r27
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    4868:	20 91 67 21 	lds	r18, 0x2167
    486c:	30 91 68 21 	lds	r19, 0x2168
    4870:	40 91 69 21 	lds	r20, 0x2169
    4874:	50 91 6a 21 	lds	r21, 0x216A
    4878:	80 91 5b 21 	lds	r24, 0x215B
    487c:	90 91 5c 21 	lds	r25, 0x215C
    4880:	a0 91 5d 21 	lds	r26, 0x215D
    4884:	b0 91 5e 21 	lds	r27, 0x215E
    4888:	79 01       	movw	r14, r18
    488a:	8a 01       	movw	r16, r20
    488c:	e8 1a       	sub	r14, r24
    488e:	f9 0a       	sbc	r15, r25
    4890:	0a 0b       	sbc	r16, r26
    4892:	1b 0b       	sbc	r17, r27
    4894:	d8 01       	movw	r26, r16
    4896:	c7 01       	movw	r24, r14
    4898:	80 93 73 21 	sts	0x2173, r24
    489c:	90 93 74 21 	sts	0x2174, r25
    48a0:	a0 93 75 21 	sts	0x2175, r26
    48a4:	b0 93 76 21 	sts	0x2176, r27
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    48a8:	20 91 6b 21 	lds	r18, 0x216B
    48ac:	30 91 6c 21 	lds	r19, 0x216C
    48b0:	40 91 6d 21 	lds	r20, 0x216D
    48b4:	50 91 6e 21 	lds	r21, 0x216E
    48b8:	80 91 5f 21 	lds	r24, 0x215F
    48bc:	90 91 60 21 	lds	r25, 0x2160
    48c0:	a0 91 61 21 	lds	r26, 0x2161
    48c4:	b0 91 62 21 	lds	r27, 0x2162
    48c8:	79 01       	movw	r14, r18
    48ca:	8a 01       	movw	r16, r20
    48cc:	e8 1a       	sub	r14, r24
    48ce:	f9 0a       	sbc	r15, r25
    48d0:	0a 0b       	sbc	r16, r26
    48d2:	1b 0b       	sbc	r17, r27
    48d4:	d8 01       	movw	r26, r16
    48d6:	c7 01       	movw	r24, r14
    48d8:	80 93 77 21 	sts	0x2177, r24
    48dc:	90 93 78 21 	sts	0x2178, r25
    48e0:	a0 93 79 21 	sts	0x2179, r26
    48e4:	b0 93 7a 21 	sts	0x217A, r27

	if (invert_feed_rate) {
    48e8:	89 89       	ldd	r24, Y+17	; 0x11
    48ea:	9a 89       	ldd	r25, Y+18	; 0x12
    48ec:	00 97       	sbiw	r24, 0x00	; 0
    48ee:	d9 f0       	breq	.+54     	; 0x4926 <mc_line_blocking+0x204>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    48f0:	60 ec       	ldi	r22, 0xC0	; 192
    48f2:	71 ee       	ldi	r23, 0xE1	; 225
    48f4:	84 e6       	ldi	r24, 0x64	; 100
    48f6:	9c e4       	ldi	r25, 0x4C	; 76
    48f8:	2d 85       	ldd	r18, Y+13	; 0x0d
    48fa:	3e 85       	ldd	r19, Y+14	; 0x0e
    48fc:	4f 85       	ldd	r20, Y+15	; 0x0f
    48fe:	58 89       	ldd	r21, Y+16	; 0x10
    4900:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    4904:	dc 01       	movw	r26, r24
    4906:	cb 01       	movw	r24, r22
    4908:	bc 01       	movw	r22, r24
    490a:	cd 01       	movw	r24, r26
    490c:	0e 94 3a 58 	call	0xb074	; 0xb074 <lround>
    4910:	dc 01       	movw	r26, r24
    4912:	cb 01       	movw	r24, r22
    4914:	80 93 7b 21 	sts	0x217B, r24
    4918:	90 93 7c 21 	sts	0x217C, r25
    491c:	a0 93 7d 21 	sts	0x217D, r26
    4920:	b0 93 7e 21 	sts	0x217E, r27
    4924:	ac c0       	rjmp	.+344    	; 0x4a7e <mc_line_blocking+0x35c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    4926:	80 91 6f 21 	lds	r24, 0x216F
    492a:	90 91 70 21 	lds	r25, 0x2170
    492e:	a0 91 71 21 	lds	r26, 0x2171
    4932:	b0 91 72 21 	lds	r27, 0x2172
    4936:	bc 01       	movw	r22, r24
    4938:	cd 01       	movw	r24, r26
    493a:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    493e:	dc 01       	movw	r26, r24
    4940:	cb 01       	movw	r24, r22
    4942:	20 91 94 23 	lds	r18, 0x2394
    4946:	30 91 95 23 	lds	r19, 0x2395
    494a:	40 91 96 23 	lds	r20, 0x2396
    494e:	50 91 97 23 	lds	r21, 0x2397
    4952:	bc 01       	movw	r22, r24
    4954:	cd 01       	movw	r24, r26
    4956:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    495a:	dc 01       	movw	r26, r24
    495c:	cb 01       	movw	r24, r22
    495e:	bc 01       	movw	r22, r24
    4960:	cd 01       	movw	r24, r26
    4962:	0e 94 15 59 	call	0xb22a	; 0xb22a <square>
    4966:	7b 01       	movw	r14, r22
    4968:	8c 01       	movw	r16, r24
    496a:	80 91 73 21 	lds	r24, 0x2173
    496e:	90 91 74 21 	lds	r25, 0x2174
    4972:	a0 91 75 21 	lds	r26, 0x2175
    4976:	b0 91 76 21 	lds	r27, 0x2176
    497a:	bc 01       	movw	r22, r24
    497c:	cd 01       	movw	r24, r26
    497e:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    4982:	dc 01       	movw	r26, r24
    4984:	cb 01       	movw	r24, r22
    4986:	20 91 ac 23 	lds	r18, 0x23AC
    498a:	30 91 ad 23 	lds	r19, 0x23AD
    498e:	40 91 ae 23 	lds	r20, 0x23AE
    4992:	50 91 af 23 	lds	r21, 0x23AF
    4996:	bc 01       	movw	r22, r24
    4998:	cd 01       	movw	r24, r26
    499a:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    499e:	dc 01       	movw	r26, r24
    49a0:	cb 01       	movw	r24, r22
    49a2:	bc 01       	movw	r22, r24
    49a4:	cd 01       	movw	r24, r26
    49a6:	0e 94 15 59 	call	0xb22a	; 0xb22a <square>
    49aa:	9b 01       	movw	r18, r22
    49ac:	ac 01       	movw	r20, r24
    49ae:	c8 01       	movw	r24, r16
    49b0:	b7 01       	movw	r22, r14
    49b2:	0e 94 09 55 	call	0xaa12	; 0xaa12 <__addsf3>
    49b6:	dc 01       	movw	r26, r24
    49b8:	cb 01       	movw	r24, r22
    49ba:	7c 01       	movw	r14, r24
    49bc:	8d 01       	movw	r16, r26
    49be:	80 91 77 21 	lds	r24, 0x2177
    49c2:	90 91 78 21 	lds	r25, 0x2178
    49c6:	a0 91 79 21 	lds	r26, 0x2179
    49ca:	b0 91 7a 21 	lds	r27, 0x217A
    49ce:	bc 01       	movw	r22, r24
    49d0:	cd 01       	movw	r24, r26
    49d2:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    49d6:	dc 01       	movw	r26, r24
    49d8:	cb 01       	movw	r24, r22
    49da:	20 91 c4 23 	lds	r18, 0x23C4
    49de:	30 91 c5 23 	lds	r19, 0x23C5
    49e2:	40 91 c6 23 	lds	r20, 0x23C6
    49e6:	50 91 c7 23 	lds	r21, 0x23C7
    49ea:	bc 01       	movw	r22, r24
    49ec:	cd 01       	movw	r24, r26
    49ee:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    49f2:	dc 01       	movw	r26, r24
    49f4:	cb 01       	movw	r24, r22
    49f6:	bc 01       	movw	r22, r24
    49f8:	cd 01       	movw	r24, r26
    49fa:	0e 94 15 59 	call	0xb22a	; 0xb22a <square>
    49fe:	9b 01       	movw	r18, r22
    4a00:	ac 01       	movw	r20, r24
    4a02:	c8 01       	movw	r24, r16
    4a04:	b7 01       	movw	r22, r14
    4a06:	0e 94 09 55 	call	0xaa12	; 0xaa12 <__addsf3>
    4a0a:	dc 01       	movw	r26, r24
    4a0c:	cb 01       	movw	r24, r22
    4a0e:	bc 01       	movw	r22, r24
    4a10:	cd 01       	movw	r24, r26
    4a12:	0e 94 d7 58 	call	0xb1ae	; 0xb1ae <sqrt>
    4a16:	dc 01       	movw	r26, r24
    4a18:	cb 01       	movw	r24, r22
    4a1a:	80 93 7f 21 	sts	0x217F, r24
    4a1e:	90 93 80 21 	sts	0x2180, r25
    4a22:	a0 93 81 21 	sts	0x2181, r26
    4a26:	b0 93 82 21 	sts	0x2182, r27
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    4a2a:	80 91 7f 21 	lds	r24, 0x217F
    4a2e:	90 91 80 21 	lds	r25, 0x2180
    4a32:	a0 91 81 21 	lds	r26, 0x2181
    4a36:	b0 91 82 21 	lds	r27, 0x2182
    4a3a:	bc 01       	movw	r22, r24
    4a3c:	cd 01       	movw	r24, r26
    4a3e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4a40:	3e 85       	ldd	r19, Y+14	; 0x0e
    4a42:	4f 85       	ldd	r20, Y+15	; 0x0f
    4a44:	58 89       	ldd	r21, Y+16	; 0x10
    4a46:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    4a4a:	dc 01       	movw	r26, r24
    4a4c:	cb 01       	movw	r24, r22
    4a4e:	bc 01       	movw	r22, r24
    4a50:	cd 01       	movw	r24, r26
    4a52:	20 e0       	ldi	r18, 0x00	; 0
    4a54:	34 e2       	ldi	r19, 0x24	; 36
    4a56:	44 e7       	ldi	r20, 0x74	; 116
    4a58:	59 e4       	ldi	r21, 0x49	; 73
    4a5a:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    4a5e:	dc 01       	movw	r26, r24
    4a60:	cb 01       	movw	r24, r22
    4a62:	bc 01       	movw	r22, r24
    4a64:	cd 01       	movw	r24, r26
    4a66:	0e 94 3a 58 	call	0xb074	; 0xb074 <lround>
    4a6a:	dc 01       	movw	r26, r24
    4a6c:	cb 01       	movw	r24, r22
    4a6e:	80 93 7b 21 	sts	0x217B, r24
    4a72:	90 93 7c 21 	sts	0x217C, r25
    4a76:	a0 93 7d 21 	sts	0x217D, r26
    4a7a:	b0 93 7e 21 	sts	0x217E, r27
	}
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    4a7e:	80 91 6f 21 	lds	r24, 0x216F
    4a82:	90 91 70 21 	lds	r25, 0x2170
    4a86:	a0 91 71 21 	lds	r26, 0x2171
    4a8a:	b0 91 72 21 	lds	r27, 0x2172
    4a8e:	20 91 73 21 	lds	r18, 0x2173
    4a92:	30 91 74 21 	lds	r19, 0x2174
    4a96:	40 91 75 21 	lds	r20, 0x2175
    4a9a:	50 91 76 21 	lds	r21, 0x2176
    4a9e:	e0 90 77 21 	lds	r14, 0x2177
    4aa2:	f0 90 78 21 	lds	r15, 0x2178
    4aa6:	00 91 79 21 	lds	r16, 0x2179
    4aaa:	10 91 7a 21 	lds	r17, 0x217A
    4aae:	a0 90 7b 21 	lds	r10, 0x217B
    4ab2:	b0 90 7c 21 	lds	r11, 0x217C
    4ab6:	c0 90 7d 21 	lds	r12, 0x217D
    4aba:	d0 90 7e 21 	lds	r13, 0x217E
    4abe:	bc 01       	movw	r22, r24
    4ac0:	cd 01       	movw	r24, r26
    4ac2:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    4ac6:	87 e5       	ldi	r24, 0x57	; 87
    4ac8:	91 e2       	ldi	r25, 0x21	; 33
    4aca:	23 e6       	ldi	r18, 0x63	; 99
    4acc:	31 e2       	ldi	r19, 0x21	; 33
    4ace:	b9 01       	movw	r22, r18
    4ad0:	4c e0       	ldi	r20, 0x0C	; 12
    4ad2:	50 e0       	ldi	r21, 0x00	; 0
    4ad4:	0e 94 42 5c 	call	0xb884	; 0xb884 <memcpy>
	return (TG_OK);
    4ad8:	80 e0       	ldi	r24, 0x00	; 0
    4ada:	90 e0       	ldi	r25, 0x00	; 0
}
    4adc:	62 96       	adiw	r28, 0x12	; 18
    4ade:	cd bf       	out	0x3d, r28	; 61
    4ae0:	de bf       	out	0x3e, r29	; 62
    4ae2:	cf 91       	pop	r28
    4ae4:	df 91       	pop	r29
    4ae6:	1f 91       	pop	r17
    4ae8:	0f 91       	pop	r16
    4aea:	ff 90       	pop	r15
    4aec:	ef 90       	pop	r14
    4aee:	df 90       	pop	r13
    4af0:	cf 90       	pop	r12
    4af2:	bf 90       	pop	r11
    4af4:	af 90       	pop	r10
    4af6:	9f 90       	pop	r9
    4af8:	8f 90       	pop	r8
    4afa:	08 95       	ret

00004afc <mc_line>:
/* 
 * mc_line() - queue a line move; non-blocking version
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    4afc:	8f 92       	push	r8
    4afe:	9f 92       	push	r9
    4b00:	af 92       	push	r10
    4b02:	bf 92       	push	r11
    4b04:	cf 92       	push	r12
    4b06:	df 92       	push	r13
    4b08:	ef 92       	push	r14
    4b0a:	ff 92       	push	r15
    4b0c:	0f 93       	push	r16
    4b0e:	1f 93       	push	r17
    4b10:	df 93       	push	r29
    4b12:	cf 93       	push	r28
    4b14:	cd b7       	in	r28, 0x3d	; 61
    4b16:	de b7       	in	r29, 0x3e	; 62
    4b18:	62 97       	sbiw	r28, 0x12	; 18
    4b1a:	cd bf       	out	0x3d, r28	; 61
    4b1c:	de bf       	out	0x3e, r29	; 62
    4b1e:	69 83       	std	Y+1, r22	; 0x01
    4b20:	7a 83       	std	Y+2, r23	; 0x02
    4b22:	8b 83       	std	Y+3, r24	; 0x03
    4b24:	9c 83       	std	Y+4, r25	; 0x04
    4b26:	2d 83       	std	Y+5, r18	; 0x05
    4b28:	3e 83       	std	Y+6, r19	; 0x06
    4b2a:	4f 83       	std	Y+7, r20	; 0x07
    4b2c:	58 87       	std	Y+8, r21	; 0x08
    4b2e:	e9 86       	std	Y+9, r14	; 0x09
    4b30:	fa 86       	std	Y+10, r15	; 0x0a
    4b32:	0b 87       	std	Y+11, r16	; 0x0b
    4b34:	1c 87       	std	Y+12, r17	; 0x0c
    4b36:	ad 86       	std	Y+13, r10	; 0x0d
    4b38:	be 86       	std	Y+14, r11	; 0x0e
    4b3a:	cf 86       	std	Y+15, r12	; 0x0f
    4b3c:	d8 8a       	std	Y+16, r13	; 0x10
    4b3e:	89 8a       	std	Y+17, r8	; 0x11
    4b40:	9a 8a       	std	Y+18, r9	; 0x12
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    4b42:	80 91 94 23 	lds	r24, 0x2394
    4b46:	90 91 95 23 	lds	r25, 0x2395
    4b4a:	a0 91 96 23 	lds	r26, 0x2396
    4b4e:	b0 91 97 23 	lds	r27, 0x2397
    4b52:	bc 01       	movw	r22, r24
    4b54:	cd 01       	movw	r24, r26
    4b56:	29 81       	ldd	r18, Y+1	; 0x01
    4b58:	3a 81       	ldd	r19, Y+2	; 0x02
    4b5a:	4b 81       	ldd	r20, Y+3	; 0x03
    4b5c:	5c 81       	ldd	r21, Y+4	; 0x04
    4b5e:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    4b62:	dc 01       	movw	r26, r24
    4b64:	cb 01       	movw	r24, r22
    4b66:	bc 01       	movw	r22, r24
    4b68:	cd 01       	movw	r24, r26
    4b6a:	0e 94 3a 58 	call	0xb074	; 0xb074 <lround>
    4b6e:	dc 01       	movw	r26, r24
    4b70:	cb 01       	movw	r24, r22
    4b72:	80 93 63 21 	sts	0x2163, r24
    4b76:	90 93 64 21 	sts	0x2164, r25
    4b7a:	a0 93 65 21 	sts	0x2165, r26
    4b7e:	b0 93 66 21 	sts	0x2166, r27
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    4b82:	80 91 ac 23 	lds	r24, 0x23AC
    4b86:	90 91 ad 23 	lds	r25, 0x23AD
    4b8a:	a0 91 ae 23 	lds	r26, 0x23AE
    4b8e:	b0 91 af 23 	lds	r27, 0x23AF
    4b92:	bc 01       	movw	r22, r24
    4b94:	cd 01       	movw	r24, r26
    4b96:	2d 81       	ldd	r18, Y+5	; 0x05
    4b98:	3e 81       	ldd	r19, Y+6	; 0x06
    4b9a:	4f 81       	ldd	r20, Y+7	; 0x07
    4b9c:	58 85       	ldd	r21, Y+8	; 0x08
    4b9e:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    4ba2:	dc 01       	movw	r26, r24
    4ba4:	cb 01       	movw	r24, r22
    4ba6:	bc 01       	movw	r22, r24
    4ba8:	cd 01       	movw	r24, r26
    4baa:	0e 94 3a 58 	call	0xb074	; 0xb074 <lround>
    4bae:	dc 01       	movw	r26, r24
    4bb0:	cb 01       	movw	r24, r22
    4bb2:	80 93 67 21 	sts	0x2167, r24
    4bb6:	90 93 68 21 	sts	0x2168, r25
    4bba:	a0 93 69 21 	sts	0x2169, r26
    4bbe:	b0 93 6a 21 	sts	0x216A, r27
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    4bc2:	80 91 c4 23 	lds	r24, 0x23C4
    4bc6:	90 91 c5 23 	lds	r25, 0x23C5
    4bca:	a0 91 c6 23 	lds	r26, 0x23C6
    4bce:	b0 91 c7 23 	lds	r27, 0x23C7
    4bd2:	bc 01       	movw	r22, r24
    4bd4:	cd 01       	movw	r24, r26
    4bd6:	29 85       	ldd	r18, Y+9	; 0x09
    4bd8:	3a 85       	ldd	r19, Y+10	; 0x0a
    4bda:	4b 85       	ldd	r20, Y+11	; 0x0b
    4bdc:	5c 85       	ldd	r21, Y+12	; 0x0c
    4bde:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    4be2:	dc 01       	movw	r26, r24
    4be4:	cb 01       	movw	r24, r22
    4be6:	bc 01       	movw	r22, r24
    4be8:	cd 01       	movw	r24, r26
    4bea:	0e 94 3a 58 	call	0xb074	; 0xb074 <lround>
    4bee:	dc 01       	movw	r26, r24
    4bf0:	cb 01       	movw	r24, r22
    4bf2:	80 93 6b 21 	sts	0x216B, r24
    4bf6:	90 93 6c 21 	sts	0x216C, r25
    4bfa:	a0 93 6d 21 	sts	0x216D, r26
    4bfe:	b0 93 6e 21 	sts	0x216E, r27

	mc.steps[X] = mc.target[X]-mc.position[X];
    4c02:	20 91 63 21 	lds	r18, 0x2163
    4c06:	30 91 64 21 	lds	r19, 0x2164
    4c0a:	40 91 65 21 	lds	r20, 0x2165
    4c0e:	50 91 66 21 	lds	r21, 0x2166
    4c12:	80 91 57 21 	lds	r24, 0x2157
    4c16:	90 91 58 21 	lds	r25, 0x2158
    4c1a:	a0 91 59 21 	lds	r26, 0x2159
    4c1e:	b0 91 5a 21 	lds	r27, 0x215A
    4c22:	79 01       	movw	r14, r18
    4c24:	8a 01       	movw	r16, r20
    4c26:	e8 1a       	sub	r14, r24
    4c28:	f9 0a       	sbc	r15, r25
    4c2a:	0a 0b       	sbc	r16, r26
    4c2c:	1b 0b       	sbc	r17, r27
    4c2e:	d8 01       	movw	r26, r16
    4c30:	c7 01       	movw	r24, r14
    4c32:	80 93 6f 21 	sts	0x216F, r24
    4c36:	90 93 70 21 	sts	0x2170, r25
    4c3a:	a0 93 71 21 	sts	0x2171, r26
    4c3e:	b0 93 72 21 	sts	0x2172, r27
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    4c42:	20 91 67 21 	lds	r18, 0x2167
    4c46:	30 91 68 21 	lds	r19, 0x2168
    4c4a:	40 91 69 21 	lds	r20, 0x2169
    4c4e:	50 91 6a 21 	lds	r21, 0x216A
    4c52:	80 91 5b 21 	lds	r24, 0x215B
    4c56:	90 91 5c 21 	lds	r25, 0x215C
    4c5a:	a0 91 5d 21 	lds	r26, 0x215D
    4c5e:	b0 91 5e 21 	lds	r27, 0x215E
    4c62:	79 01       	movw	r14, r18
    4c64:	8a 01       	movw	r16, r20
    4c66:	e8 1a       	sub	r14, r24
    4c68:	f9 0a       	sbc	r15, r25
    4c6a:	0a 0b       	sbc	r16, r26
    4c6c:	1b 0b       	sbc	r17, r27
    4c6e:	d8 01       	movw	r26, r16
    4c70:	c7 01       	movw	r24, r14
    4c72:	80 93 73 21 	sts	0x2173, r24
    4c76:	90 93 74 21 	sts	0x2174, r25
    4c7a:	a0 93 75 21 	sts	0x2175, r26
    4c7e:	b0 93 76 21 	sts	0x2176, r27
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    4c82:	20 91 6b 21 	lds	r18, 0x216B
    4c86:	30 91 6c 21 	lds	r19, 0x216C
    4c8a:	40 91 6d 21 	lds	r20, 0x216D
    4c8e:	50 91 6e 21 	lds	r21, 0x216E
    4c92:	80 91 5f 21 	lds	r24, 0x215F
    4c96:	90 91 60 21 	lds	r25, 0x2160
    4c9a:	a0 91 61 21 	lds	r26, 0x2161
    4c9e:	b0 91 62 21 	lds	r27, 0x2162
    4ca2:	79 01       	movw	r14, r18
    4ca4:	8a 01       	movw	r16, r20
    4ca6:	e8 1a       	sub	r14, r24
    4ca8:	f9 0a       	sbc	r15, r25
    4caa:	0a 0b       	sbc	r16, r26
    4cac:	1b 0b       	sbc	r17, r27
    4cae:	d8 01       	movw	r26, r16
    4cb0:	c7 01       	movw	r24, r14
    4cb2:	80 93 77 21 	sts	0x2177, r24
    4cb6:	90 93 78 21 	sts	0x2178, r25
    4cba:	a0 93 79 21 	sts	0x2179, r26
    4cbe:	b0 93 7a 21 	sts	0x217A, r27

	if (invert_feed_rate) {
    4cc2:	89 89       	ldd	r24, Y+17	; 0x11
    4cc4:	9a 89       	ldd	r25, Y+18	; 0x12
    4cc6:	00 97       	sbiw	r24, 0x00	; 0
    4cc8:	d9 f0       	breq	.+54     	; 0x4d00 <mc_line+0x204>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    4cca:	60 ec       	ldi	r22, 0xC0	; 192
    4ccc:	71 ee       	ldi	r23, 0xE1	; 225
    4cce:	84 e6       	ldi	r24, 0x64	; 100
    4cd0:	9c e4       	ldi	r25, 0x4C	; 76
    4cd2:	2d 85       	ldd	r18, Y+13	; 0x0d
    4cd4:	3e 85       	ldd	r19, Y+14	; 0x0e
    4cd6:	4f 85       	ldd	r20, Y+15	; 0x0f
    4cd8:	58 89       	ldd	r21, Y+16	; 0x10
    4cda:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    4cde:	dc 01       	movw	r26, r24
    4ce0:	cb 01       	movw	r24, r22
    4ce2:	bc 01       	movw	r22, r24
    4ce4:	cd 01       	movw	r24, r26
    4ce6:	0e 94 3a 58 	call	0xb074	; 0xb074 <lround>
    4cea:	dc 01       	movw	r26, r24
    4cec:	cb 01       	movw	r24, r22
    4cee:	80 93 7b 21 	sts	0x217B, r24
    4cf2:	90 93 7c 21 	sts	0x217C, r25
    4cf6:	a0 93 7d 21 	sts	0x217D, r26
    4cfa:	b0 93 7e 21 	sts	0x217E, r27
    4cfe:	ac c0       	rjmp	.+344    	; 0x4e58 <mc_line+0x35c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    4d00:	80 91 6f 21 	lds	r24, 0x216F
    4d04:	90 91 70 21 	lds	r25, 0x2170
    4d08:	a0 91 71 21 	lds	r26, 0x2171
    4d0c:	b0 91 72 21 	lds	r27, 0x2172
    4d10:	bc 01       	movw	r22, r24
    4d12:	cd 01       	movw	r24, r26
    4d14:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    4d18:	dc 01       	movw	r26, r24
    4d1a:	cb 01       	movw	r24, r22
    4d1c:	20 91 94 23 	lds	r18, 0x2394
    4d20:	30 91 95 23 	lds	r19, 0x2395
    4d24:	40 91 96 23 	lds	r20, 0x2396
    4d28:	50 91 97 23 	lds	r21, 0x2397
    4d2c:	bc 01       	movw	r22, r24
    4d2e:	cd 01       	movw	r24, r26
    4d30:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    4d34:	dc 01       	movw	r26, r24
    4d36:	cb 01       	movw	r24, r22
    4d38:	bc 01       	movw	r22, r24
    4d3a:	cd 01       	movw	r24, r26
    4d3c:	0e 94 15 59 	call	0xb22a	; 0xb22a <square>
    4d40:	7b 01       	movw	r14, r22
    4d42:	8c 01       	movw	r16, r24
    4d44:	80 91 73 21 	lds	r24, 0x2173
    4d48:	90 91 74 21 	lds	r25, 0x2174
    4d4c:	a0 91 75 21 	lds	r26, 0x2175
    4d50:	b0 91 76 21 	lds	r27, 0x2176
    4d54:	bc 01       	movw	r22, r24
    4d56:	cd 01       	movw	r24, r26
    4d58:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    4d5c:	dc 01       	movw	r26, r24
    4d5e:	cb 01       	movw	r24, r22
    4d60:	20 91 ac 23 	lds	r18, 0x23AC
    4d64:	30 91 ad 23 	lds	r19, 0x23AD
    4d68:	40 91 ae 23 	lds	r20, 0x23AE
    4d6c:	50 91 af 23 	lds	r21, 0x23AF
    4d70:	bc 01       	movw	r22, r24
    4d72:	cd 01       	movw	r24, r26
    4d74:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    4d78:	dc 01       	movw	r26, r24
    4d7a:	cb 01       	movw	r24, r22
    4d7c:	bc 01       	movw	r22, r24
    4d7e:	cd 01       	movw	r24, r26
    4d80:	0e 94 15 59 	call	0xb22a	; 0xb22a <square>
    4d84:	9b 01       	movw	r18, r22
    4d86:	ac 01       	movw	r20, r24
    4d88:	c8 01       	movw	r24, r16
    4d8a:	b7 01       	movw	r22, r14
    4d8c:	0e 94 09 55 	call	0xaa12	; 0xaa12 <__addsf3>
    4d90:	dc 01       	movw	r26, r24
    4d92:	cb 01       	movw	r24, r22
    4d94:	7c 01       	movw	r14, r24
    4d96:	8d 01       	movw	r16, r26
    4d98:	80 91 77 21 	lds	r24, 0x2177
    4d9c:	90 91 78 21 	lds	r25, 0x2178
    4da0:	a0 91 79 21 	lds	r26, 0x2179
    4da4:	b0 91 7a 21 	lds	r27, 0x217A
    4da8:	bc 01       	movw	r22, r24
    4daa:	cd 01       	movw	r24, r26
    4dac:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    4db0:	dc 01       	movw	r26, r24
    4db2:	cb 01       	movw	r24, r22
    4db4:	20 91 c4 23 	lds	r18, 0x23C4
    4db8:	30 91 c5 23 	lds	r19, 0x23C5
    4dbc:	40 91 c6 23 	lds	r20, 0x23C6
    4dc0:	50 91 c7 23 	lds	r21, 0x23C7
    4dc4:	bc 01       	movw	r22, r24
    4dc6:	cd 01       	movw	r24, r26
    4dc8:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    4dcc:	dc 01       	movw	r26, r24
    4dce:	cb 01       	movw	r24, r22
    4dd0:	bc 01       	movw	r22, r24
    4dd2:	cd 01       	movw	r24, r26
    4dd4:	0e 94 15 59 	call	0xb22a	; 0xb22a <square>
    4dd8:	9b 01       	movw	r18, r22
    4dda:	ac 01       	movw	r20, r24
    4ddc:	c8 01       	movw	r24, r16
    4dde:	b7 01       	movw	r22, r14
    4de0:	0e 94 09 55 	call	0xaa12	; 0xaa12 <__addsf3>
    4de4:	dc 01       	movw	r26, r24
    4de6:	cb 01       	movw	r24, r22
    4de8:	bc 01       	movw	r22, r24
    4dea:	cd 01       	movw	r24, r26
    4dec:	0e 94 d7 58 	call	0xb1ae	; 0xb1ae <sqrt>
    4df0:	dc 01       	movw	r26, r24
    4df2:	cb 01       	movw	r24, r22
    4df4:	80 93 7f 21 	sts	0x217F, r24
    4df8:	90 93 80 21 	sts	0x2180, r25
    4dfc:	a0 93 81 21 	sts	0x2181, r26
    4e00:	b0 93 82 21 	sts	0x2182, r27
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    4e04:	80 91 7f 21 	lds	r24, 0x217F
    4e08:	90 91 80 21 	lds	r25, 0x2180
    4e0c:	a0 91 81 21 	lds	r26, 0x2181
    4e10:	b0 91 82 21 	lds	r27, 0x2182
    4e14:	bc 01       	movw	r22, r24
    4e16:	cd 01       	movw	r24, r26
    4e18:	2d 85       	ldd	r18, Y+13	; 0x0d
    4e1a:	3e 85       	ldd	r19, Y+14	; 0x0e
    4e1c:	4f 85       	ldd	r20, Y+15	; 0x0f
    4e1e:	58 89       	ldd	r21, Y+16	; 0x10
    4e20:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    4e24:	dc 01       	movw	r26, r24
    4e26:	cb 01       	movw	r24, r22
    4e28:	bc 01       	movw	r22, r24
    4e2a:	cd 01       	movw	r24, r26
    4e2c:	20 e0       	ldi	r18, 0x00	; 0
    4e2e:	34 e2       	ldi	r19, 0x24	; 36
    4e30:	44 e7       	ldi	r20, 0x74	; 116
    4e32:	59 e4       	ldi	r21, 0x49	; 73
    4e34:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    4e38:	dc 01       	movw	r26, r24
    4e3a:	cb 01       	movw	r24, r22
    4e3c:	bc 01       	movw	r22, r24
    4e3e:	cd 01       	movw	r24, r26
    4e40:	0e 94 3a 58 	call	0xb074	; 0xb074 <lround>
    4e44:	dc 01       	movw	r26, r24
    4e46:	cb 01       	movw	r24, r22
    4e48:	80 93 7b 21 	sts	0x217B, r24
    4e4c:	90 93 7c 21 	sts	0x217C, r25
    4e50:	a0 93 7d 21 	sts	0x217D, r26
    4e54:	b0 93 7e 21 	sts	0x217E, r27
	}
	mc.line_state = MC_STATE_NEW;
    4e58:	81 e0       	ldi	r24, 0x01	; 1
    4e5a:	80 93 56 21 	sts	0x2156, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    4e5e:	87 e5       	ldi	r24, 0x57	; 87
    4e60:	91 e2       	ldi	r25, 0x21	; 33
    4e62:	23 e6       	ldi	r18, 0x63	; 99
    4e64:	31 e2       	ldi	r19, 0x21	; 33
    4e66:	b9 01       	movw	r22, r18
    4e68:	4c e0       	ldi	r20, 0x0C	; 12
    4e6a:	50 e0       	ldi	r21, 0x00	; 0
    4e6c:	0e 94 42 5c 	call	0xb884	; 0xb884 <memcpy>
	return (mc_line_continue());
    4e70:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <mc_line_continue>
}
    4e74:	62 96       	adiw	r28, 0x12	; 18
    4e76:	cd bf       	out	0x3d, r28	; 61
    4e78:	de bf       	out	0x3e, r29	; 62
    4e7a:	cf 91       	pop	r28
    4e7c:	df 91       	pop	r29
    4e7e:	1f 91       	pop	r17
    4e80:	0f 91       	pop	r16
    4e82:	ff 90       	pop	r15
    4e84:	ef 90       	pop	r14
    4e86:	df 90       	pop	r13
    4e88:	cf 90       	pop	r12
    4e8a:	bf 90       	pop	r11
    4e8c:	af 90       	pop	r10
    4e8e:	9f 90       	pop	r9
    4e90:	8f 90       	pop	r8
    4e92:	08 95       	ret

00004e94 <mc_line_continue>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continue() 
{
    4e94:	af 92       	push	r10
    4e96:	bf 92       	push	r11
    4e98:	cf 92       	push	r12
    4e9a:	df 92       	push	r13
    4e9c:	ef 92       	push	r14
    4e9e:	ff 92       	push	r15
    4ea0:	0f 93       	push	r16
    4ea2:	1f 93       	push	r17
    4ea4:	df 93       	push	r29
    4ea6:	cf 93       	push	r28
    4ea8:	0f 92       	push	r0
    4eaa:	0f 92       	push	r0
    4eac:	cd b7       	in	r28, 0x3d	; 61
    4eae:	de b7       	in	r29, 0x3e	; 62
	if (mc.line_state == MC_STATE_OFF) {
    4eb0:	80 91 56 21 	lds	r24, 0x2156
    4eb4:	88 23       	and	r24, r24
    4eb6:	29 f4       	brne	.+10     	; 0x4ec2 <mc_line_continue+0x2e>
		return (TG_NOOP);				// return NULL for non-started line
    4eb8:	82 e0       	ldi	r24, 0x02	; 2
    4eba:	90 e0       	ldi	r25, 0x00	; 0
    4ebc:	89 83       	std	Y+1, r24	; 0x01
    4ebe:	9a 83       	std	Y+2, r25	; 0x02
    4ec0:	34 c0       	rjmp	.+104    	; 0x4f2a <mc_line_continue+0x96>
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    4ec2:	82 e0       	ldi	r24, 0x02	; 2
    4ec4:	80 93 56 21 	sts	0x2156, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    4ec8:	0e 94 96 3f 	call	0x7f2c	; 0x7f2c <mv_test_move_buffer_full>
    4ecc:	88 23       	and	r24, r24
    4ece:	29 f0       	breq	.+10     	; 0x4eda <mc_line_continue+0x46>
		return (TG_EAGAIN);
    4ed0:	81 e0       	ldi	r24, 0x01	; 1
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	89 83       	std	Y+1, r24	; 0x01
    4ed6:	9a 83       	std	Y+2, r25	; 0x02
    4ed8:	28 c0       	rjmp	.+80     	; 0x4f2a <mc_line_continue+0x96>
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    4eda:	80 91 6f 21 	lds	r24, 0x216F
    4ede:	90 91 70 21 	lds	r25, 0x2170
    4ee2:	a0 91 71 21 	lds	r26, 0x2171
    4ee6:	b0 91 72 21 	lds	r27, 0x2172
    4eea:	20 91 73 21 	lds	r18, 0x2173
    4eee:	30 91 74 21 	lds	r19, 0x2174
    4ef2:	40 91 75 21 	lds	r20, 0x2175
    4ef6:	50 91 76 21 	lds	r21, 0x2176
    4efa:	e0 90 77 21 	lds	r14, 0x2177
    4efe:	f0 90 78 21 	lds	r15, 0x2178
    4f02:	00 91 79 21 	lds	r16, 0x2179
    4f06:	10 91 7a 21 	lds	r17, 0x217A
    4f0a:	a0 90 7b 21 	lds	r10, 0x217B
    4f0e:	b0 90 7c 21 	lds	r11, 0x217C
    4f12:	c0 90 7d 21 	lds	r12, 0x217D
    4f16:	d0 90 7e 21 	lds	r13, 0x217E
    4f1a:	bc 01       	movw	r22, r24
    4f1c:	cd 01       	movw	r24, r26
    4f1e:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    4f22:	10 92 56 21 	sts	0x2156, r1
	return (TG_OK);
    4f26:	19 82       	std	Y+1, r1	; 0x01
    4f28:	1a 82       	std	Y+2, r1	; 0x02
    4f2a:	89 81       	ldd	r24, Y+1	; 0x01
    4f2c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4f2e:	0f 90       	pop	r0
    4f30:	0f 90       	pop	r0
    4f32:	cf 91       	pop	r28
    4f34:	df 91       	pop	r29
    4f36:	1f 91       	pop	r17
    4f38:	0f 91       	pop	r16
    4f3a:	ff 90       	pop	r15
    4f3c:	ef 90       	pop	r14
    4f3e:	df 90       	pop	r13
    4f40:	cf 90       	pop	r12
    4f42:	bf 90       	pop	r11
    4f44:	af 90       	pop	r10
    4f46:	08 95       	ret

00004f48 <mc_arc_blocking>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc_blocking(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    4f48:	8f 92       	push	r8
    4f4a:	9f 92       	push	r9
    4f4c:	af 92       	push	r10
    4f4e:	bf 92       	push	r11
    4f50:	cf 92       	push	r12
    4f52:	df 92       	push	r13
    4f54:	ef 92       	push	r14
    4f56:	ff 92       	push	r15
    4f58:	0f 93       	push	r16
    4f5a:	1f 93       	push	r17
    4f5c:	df 93       	push	r29
    4f5e:	cf 93       	push	r28
    4f60:	cd b7       	in	r28, 0x3d	; 61
    4f62:	de b7       	in	r29, 0x3e	; 62
    4f64:	6c 97       	sbiw	r28, 0x1c	; 28
    4f66:	cd bf       	out	0x3d, r28	; 61
    4f68:	de bf       	out	0x3e, r29	; 62
    4f6a:	69 83       	std	Y+1, r22	; 0x01
    4f6c:	7a 83       	std	Y+2, r23	; 0x02
    4f6e:	8b 83       	std	Y+3, r24	; 0x03
    4f70:	9c 83       	std	Y+4, r25	; 0x04
    4f72:	2d 83       	std	Y+5, r18	; 0x05
    4f74:	3e 83       	std	Y+6, r19	; 0x06
    4f76:	4f 83       	std	Y+7, r20	; 0x07
    4f78:	58 87       	std	Y+8, r21	; 0x08
    4f7a:	e9 86       	std	Y+9, r14	; 0x09
    4f7c:	fa 86       	std	Y+10, r15	; 0x0a
    4f7e:	0b 87       	std	Y+11, r16	; 0x0b
    4f80:	1c 87       	std	Y+12, r17	; 0x0c
    4f82:	ad 86       	std	Y+13, r10	; 0x0d
    4f84:	be 86       	std	Y+14, r11	; 0x0e
    4f86:	cf 86       	std	Y+15, r12	; 0x0f
    4f88:	d8 8a       	std	Y+16, r13	; 0x10
    4f8a:	89 8a       	std	Y+17, r8	; 0x11
    4f8c:	9a 8a       	std	Y+18, r9	; 0x12
	// load the arc struct
	ma.theta = theta;
    4f8e:	89 81       	ldd	r24, Y+1	; 0x01
    4f90:	9a 81       	ldd	r25, Y+2	; 0x02
    4f92:	ab 81       	ldd	r26, Y+3	; 0x03
    4f94:	bc 81       	ldd	r27, Y+4	; 0x04
    4f96:	80 93 08 24 	sts	0x2408, r24
    4f9a:	90 93 09 24 	sts	0x2409, r25
    4f9e:	a0 93 0a 24 	sts	0x240A, r26
    4fa2:	b0 93 0b 24 	sts	0x240B, r27
	ma.radius = radius;
    4fa6:	89 85       	ldd	r24, Y+9	; 0x09
    4fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4faa:	ab 85       	ldd	r26, Y+11	; 0x0b
    4fac:	bc 85       	ldd	r27, Y+12	; 0x0c
    4fae:	80 93 0c 24 	sts	0x240C, r24
    4fb2:	90 93 0d 24 	sts	0x240D, r25
    4fb6:	a0 93 0e 24 	sts	0x240E, r26
    4fba:	b0 93 0f 24 	sts	0x240F, r27
	ma.angular_travel = angular_travel;
    4fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    4fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    4fc2:	af 81       	ldd	r26, Y+7	; 0x07
    4fc4:	b8 85       	ldd	r27, Y+8	; 0x08
    4fc6:	80 93 1c 24 	sts	0x241C, r24
    4fca:	90 93 1d 24 	sts	0x241D, r25
    4fce:	a0 93 1e 24 	sts	0x241E, r26
    4fd2:	b0 93 1f 24 	sts	0x241F, r27
	ma.linear_travel = linear_travel;
    4fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fda:	af 85       	ldd	r26, Y+15	; 0x0f
    4fdc:	b8 89       	ldd	r27, Y+16	; 0x10
    4fde:	80 93 20 24 	sts	0x2420, r24
    4fe2:	90 93 21 24 	sts	0x2421, r25
    4fe6:	a0 93 22 24 	sts	0x2422, r26
    4fea:	b0 93 23 24 	sts	0x2423, r27
	ma.feed_rate = feed_rate;
    4fee:	88 a9       	ldd	r24, Y+48	; 0x30
    4ff0:	99 a9       	ldd	r25, Y+49	; 0x31
    4ff2:	aa a9       	ldd	r26, Y+50	; 0x32
    4ff4:	bb a9       	ldd	r27, Y+51	; 0x33
    4ff6:	80 93 10 24 	sts	0x2410, r24
    4ffa:	90 93 11 24 	sts	0x2411, r25
    4ffe:	a0 93 12 24 	sts	0x2412, r26
    5002:	b0 93 13 24 	sts	0x2413, r27
	ma.invert_feed_rate = invert_feed_rate;
    5006:	8c a9       	ldd	r24, Y+52	; 0x34
    5008:	9d a9       	ldd	r25, Y+53	; 0x35
    500a:	80 93 e8 23 	sts	0x23E8, r24
    500e:	90 93 e9 23 	sts	0x23E9, r25
	ma.axis_1 = axis_1;
    5012:	89 89       	ldd	r24, Y+17	; 0x11
    5014:	9a 89       	ldd	r25, Y+18	; 0x12
    5016:	80 93 ea 23 	sts	0x23EA, r24
    501a:	90 93 eb 23 	sts	0x23EB, r25
	ma.axis_2 = axis_2;
    501e:	8c a5       	ldd	r24, Y+44	; 0x2c
    5020:	9d a5       	ldd	r25, Y+45	; 0x2d
    5022:	80 93 ec 23 	sts	0x23EC, r24
    5026:	90 93 ed 23 	sts	0x23ED, r25
	ma.axis_linear = axis_linear;
    502a:	8e a5       	ldd	r24, Y+46	; 0x2e
    502c:	9f a5       	ldd	r25, Y+47	; 0x2f
    502e:	80 93 ee 23 	sts	0x23EE, r24
    5032:	90 93 ef 23 	sts	0x23EF, r25
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    5036:	80 91 1c 24 	lds	r24, 0x241C
    503a:	90 91 1d 24 	lds	r25, 0x241D
    503e:	a0 91 1e 24 	lds	r26, 0x241E
    5042:	b0 91 1f 24 	lds	r27, 0x241F
    5046:	20 91 0c 24 	lds	r18, 0x240C
    504a:	30 91 0d 24 	lds	r19, 0x240D
    504e:	40 91 0e 24 	lds	r20, 0x240E
    5052:	50 91 0f 24 	lds	r21, 0x240F
    5056:	bc 01       	movw	r22, r24
    5058:	cd 01       	movw	r24, r26
    505a:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    505e:	dc 01       	movw	r26, r24
    5060:	cb 01       	movw	r24, r22
    5062:	89 8f       	std	Y+25, r24	; 0x19
    5064:	9a 8f       	std	Y+26, r25	; 0x1a
    5066:	ab 8f       	std	Y+27, r26	; 0x1b
    5068:	bc 8f       	std	Y+28, r27	; 0x1c
    506a:	80 91 20 24 	lds	r24, 0x2420
    506e:	90 91 21 24 	lds	r25, 0x2421
    5072:	a0 91 22 24 	lds	r26, 0x2422
    5076:	b0 91 23 24 	lds	r27, 0x2423
    507a:	bc 01       	movw	r22, r24
    507c:	cd 01       	movw	r24, r26
    507e:	0e 94 17 56 	call	0xac2e	; 0xac2e <__fixsfsi>
    5082:	dc 01       	movw	r26, r24
    5084:	cb 01       	movw	r24, r22
    5086:	8d 8b       	std	Y+21, r24	; 0x15
    5088:	9e 8b       	std	Y+22, r25	; 0x16
    508a:	af 8b       	std	Y+23, r26	; 0x17
    508c:	b8 8f       	std	Y+24, r27	; 0x18
    508e:	8d 89       	ldd	r24, Y+21	; 0x15
    5090:	9e 89       	ldd	r25, Y+22	; 0x16
    5092:	af 89       	ldd	r26, Y+23	; 0x17
    5094:	b8 8d       	ldd	r27, Y+24	; 0x18
    5096:	bb 23       	and	r27, r27
    5098:	7c f4       	brge	.+30     	; 0x50b8 <mc_arc_blocking+0x170>
    509a:	8d 89       	ldd	r24, Y+21	; 0x15
    509c:	9e 89       	ldd	r25, Y+22	; 0x16
    509e:	af 89       	ldd	r26, Y+23	; 0x17
    50a0:	b8 8d       	ldd	r27, Y+24	; 0x18
    50a2:	b0 95       	com	r27
    50a4:	a0 95       	com	r26
    50a6:	90 95       	com	r25
    50a8:	81 95       	neg	r24
    50aa:	9f 4f       	sbci	r25, 0xFF	; 255
    50ac:	af 4f       	sbci	r26, 0xFF	; 255
    50ae:	bf 4f       	sbci	r27, 0xFF	; 255
    50b0:	8d 8b       	std	Y+21, r24	; 0x15
    50b2:	9e 8b       	std	Y+22, r25	; 0x16
    50b4:	af 8b       	std	Y+23, r26	; 0x17
    50b6:	b8 8f       	std	Y+24, r27	; 0x18
    50b8:	6d 89       	ldd	r22, Y+21	; 0x15
    50ba:	7e 89       	ldd	r23, Y+22	; 0x16
    50bc:	8f 89       	ldd	r24, Y+23	; 0x17
    50be:	98 8d       	ldd	r25, Y+24	; 0x18
    50c0:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    50c4:	9b 01       	movw	r18, r22
    50c6:	ac 01       	movw	r20, r24
    50c8:	69 8d       	ldd	r22, Y+25	; 0x19
    50ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    50cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50d0:	0e 94 a5 57 	call	0xaf4a	; 0xaf4a <hypot>
    50d4:	dc 01       	movw	r26, r24
    50d6:	cb 01       	movw	r24, r22
    50d8:	80 93 fc 23 	sts	0x23FC, r24
    50dc:	90 93 fd 23 	sts	0x23FD, r25
    50e0:	a0 93 fe 23 	sts	0x23FE, r26
    50e4:	b0 93 ff 23 	sts	0x23FF, r27
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    50e8:	80 91 fc 23 	lds	r24, 0x23FC
    50ec:	90 91 fd 23 	lds	r25, 0x23FD
    50f0:	a0 91 fe 23 	lds	r26, 0x23FE
    50f4:	b0 91 ff 23 	lds	r27, 0x23FF
    50f8:	bc 01       	movw	r22, r24
    50fa:	cd 01       	movw	r24, r26
    50fc:	2a e0       	ldi	r18, 0x0A	; 10
    50fe:	37 ed       	ldi	r19, 0xD7	; 215
    5100:	43 e2       	ldi	r20, 0x23	; 35
    5102:	5c e3       	ldi	r21, 0x3C	; 60
    5104:	0e 94 a8 55 	call	0xab50	; 0xab50 <__cmpsf2>
    5108:	88 23       	and	r24, r24
    510a:	2c f4       	brge	.+10     	; 0x5116 <mc_arc_blocking+0x1ce>
		return (TG_ARC_ERROR);						// arc specification error
    510c:	a0 e1       	ldi	r26, 0x10	; 16
    510e:	b0 e0       	ldi	r27, 0x00	; 0
    5110:	ab 8b       	std	Y+19, r26	; 0x13
    5112:	bc 8b       	std	Y+20, r27	; 0x14
    5114:	99 c2       	rjmp	.+1330   	; 0x5648 <mc_arc_blocking+0x700>
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    5116:	80 91 fc 23 	lds	r24, 0x23FC
    511a:	90 91 fd 23 	lds	r25, 0x23FD
    511e:	a0 91 fe 23 	lds	r26, 0x23FE
    5122:	b0 91 ff 23 	lds	r27, 0x23FF
    5126:	20 91 75 23 	lds	r18, 0x2375
    512a:	30 91 76 23 	lds	r19, 0x2376
    512e:	40 91 77 23 	lds	r20, 0x2377
    5132:	50 91 78 23 	lds	r21, 0x2378
    5136:	bc 01       	movw	r22, r24
    5138:	cd 01       	movw	r24, r26
    513a:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    513e:	dc 01       	movw	r26, r24
    5140:	cb 01       	movw	r24, r22
    5142:	bc 01       	movw	r22, r24
    5144:	cd 01       	movw	r24, r26
    5146:	0e 94 95 55 	call	0xab2a	; 0xab2a <ceil>
    514a:	dc 01       	movw	r26, r24
    514c:	cb 01       	movw	r24, r22
    514e:	bc 01       	movw	r22, r24
    5150:	cd 01       	movw	r24, r26
    5152:	0e 94 17 56 	call	0xac2e	; 0xac2e <__fixsfsi>
    5156:	dc 01       	movw	r26, r24
    5158:	cb 01       	movw	r24, r22
    515a:	80 93 e4 23 	sts	0x23E4, r24
    515e:	90 93 e5 23 	sts	0x23E5, r25
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    5162:	80 91 e8 23 	lds	r24, 0x23E8
    5166:	90 91 e9 23 	lds	r25, 0x23E9
    516a:	00 97       	sbiw	r24, 0x00	; 0
    516c:	21 f1       	breq	.+72     	; 0x51b6 <mc_arc_blocking+0x26e>
		ma.feed_rate *= ma.segments; 
    516e:	e0 90 10 24 	lds	r14, 0x2410
    5172:	f0 90 11 24 	lds	r15, 0x2411
    5176:	00 91 12 24 	lds	r16, 0x2412
    517a:	10 91 13 24 	lds	r17, 0x2413
    517e:	80 91 e4 23 	lds	r24, 0x23E4
    5182:	90 91 e5 23 	lds	r25, 0x23E5
    5186:	aa 27       	eor	r26, r26
    5188:	97 fd       	sbrc	r25, 7
    518a:	a0 95       	com	r26
    518c:	ba 2f       	mov	r27, r26
    518e:	bc 01       	movw	r22, r24
    5190:	cd 01       	movw	r24, r26
    5192:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    5196:	9b 01       	movw	r18, r22
    5198:	ac 01       	movw	r20, r24
    519a:	c8 01       	movw	r24, r16
    519c:	b7 01       	movw	r22, r14
    519e:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    51a2:	dc 01       	movw	r26, r24
    51a4:	cb 01       	movw	r24, r22
    51a6:	80 93 10 24 	sts	0x2410, r24
    51aa:	90 93 11 24 	sts	0x2411, r25
    51ae:	a0 93 12 24 	sts	0x2412, r26
    51b2:	b0 93 13 24 	sts	0x2413, r27
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    51b6:	e0 90 1c 24 	lds	r14, 0x241C
    51ba:	f0 90 1d 24 	lds	r15, 0x241D
    51be:	00 91 1e 24 	lds	r16, 0x241E
    51c2:	10 91 1f 24 	lds	r17, 0x241F
    51c6:	80 91 e4 23 	lds	r24, 0x23E4
    51ca:	90 91 e5 23 	lds	r25, 0x23E5
    51ce:	aa 27       	eor	r26, r26
    51d0:	97 fd       	sbrc	r25, 7
    51d2:	a0 95       	com	r26
    51d4:	ba 2f       	mov	r27, r26
    51d6:	bc 01       	movw	r22, r24
    51d8:	cd 01       	movw	r24, r26
    51da:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    51de:	9b 01       	movw	r18, r22
    51e0:	ac 01       	movw	r20, r24
    51e2:	c8 01       	movw	r24, r16
    51e4:	b7 01       	movw	r22, r14
    51e6:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    51ea:	dc 01       	movw	r26, r24
    51ec:	cb 01       	movw	r24, r22
    51ee:	80 93 14 24 	sts	0x2414, r24
    51f2:	90 93 15 24 	sts	0x2415, r25
    51f6:	a0 93 16 24 	sts	0x2416, r26
    51fa:	b0 93 17 24 	sts	0x2417, r27
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    51fe:	e0 90 20 24 	lds	r14, 0x2420
    5202:	f0 90 21 24 	lds	r15, 0x2421
    5206:	00 91 22 24 	lds	r16, 0x2422
    520a:	10 91 23 24 	lds	r17, 0x2423
    520e:	80 91 e4 23 	lds	r24, 0x23E4
    5212:	90 91 e5 23 	lds	r25, 0x23E5
    5216:	aa 27       	eor	r26, r26
    5218:	97 fd       	sbrc	r25, 7
    521a:	a0 95       	com	r26
    521c:	ba 2f       	mov	r27, r26
    521e:	bc 01       	movw	r22, r24
    5220:	cd 01       	movw	r24, r26
    5222:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    5226:	9b 01       	movw	r18, r22
    5228:	ac 01       	movw	r20, r24
    522a:	c8 01       	movw	r24, r16
    522c:	b7 01       	movw	r22, r14
    522e:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    5232:	dc 01       	movw	r26, r24
    5234:	cb 01       	movw	r24, r22
    5236:	80 93 18 24 	sts	0x2418, r24
    523a:	90 93 19 24 	sts	0x2419, r25
    523e:	a0 93 1a 24 	sts	0x241A, r26
    5242:	b0 93 1b 24 	sts	0x241B, r27
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    5246:	80 91 ea 23 	lds	r24, 0x23EA
    524a:	90 91 eb 23 	lds	r25, 0x23EB
    524e:	88 0f       	add	r24, r24
    5250:	99 1f       	adc	r25, r25
    5252:	88 0f       	add	r24, r24
    5254:	99 1f       	adc	r25, r25
    5256:	fc 01       	movw	r30, r24
    5258:	e9 5a       	subi	r30, 0xA9	; 169
    525a:	fe 4d       	sbci	r31, 0xDE	; 222
    525c:	80 81       	ld	r24, Z
    525e:	91 81       	ldd	r25, Z+1	; 0x01
    5260:	a2 81       	ldd	r26, Z+2	; 0x02
    5262:	b3 81       	ldd	r27, Z+3	; 0x03
    5264:	bc 01       	movw	r22, r24
    5266:	cd 01       	movw	r24, r26
    5268:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    526c:	7b 01       	movw	r14, r22
    526e:	8c 01       	movw	r16, r24
    5270:	20 91 ea 23 	lds	r18, 0x23EA
    5274:	30 91 eb 23 	lds	r19, 0x23EB
    5278:	c9 01       	movw	r24, r18
    527a:	88 0f       	add	r24, r24
    527c:	99 1f       	adc	r25, r25
    527e:	82 0f       	add	r24, r18
    5280:	93 1f       	adc	r25, r19
    5282:	88 0f       	add	r24, r24
    5284:	99 1f       	adc	r25, r25
    5286:	88 0f       	add	r24, r24
    5288:	99 1f       	adc	r25, r25
    528a:	88 0f       	add	r24, r24
    528c:	99 1f       	adc	r25, r25
    528e:	fc 01       	movw	r30, r24
    5290:	ec 56       	subi	r30, 0x6C	; 108
    5292:	fc 4d       	sbci	r31, 0xDC	; 220
    5294:	20 81       	ld	r18, Z
    5296:	31 81       	ldd	r19, Z+1	; 0x01
    5298:	42 81       	ldd	r20, Z+2	; 0x02
    529a:	53 81       	ldd	r21, Z+3	; 0x03
    529c:	c8 01       	movw	r24, r16
    529e:	b7 01       	movw	r22, r14
    52a0:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    52a4:	dc 01       	movw	r26, r24
    52a6:	cb 01       	movw	r24, r22
    52a8:	7c 01       	movw	r14, r24
    52aa:	8d 01       	movw	r16, r26
    52ac:	80 91 08 24 	lds	r24, 0x2408
    52b0:	90 91 09 24 	lds	r25, 0x2409
    52b4:	a0 91 0a 24 	lds	r26, 0x240A
    52b8:	b0 91 0b 24 	lds	r27, 0x240B
    52bc:	bc 01       	movw	r22, r24
    52be:	cd 01       	movw	r24, r26
    52c0:	0e 94 cd 58 	call	0xb19a	; 0xb19a <sin>
    52c4:	dc 01       	movw	r26, r24
    52c6:	cb 01       	movw	r24, r22
    52c8:	20 91 0c 24 	lds	r18, 0x240C
    52cc:	30 91 0d 24 	lds	r19, 0x240D
    52d0:	40 91 0e 24 	lds	r20, 0x240E
    52d4:	50 91 0f 24 	lds	r21, 0x240F
    52d8:	bc 01       	movw	r22, r24
    52da:	cd 01       	movw	r24, r26
    52dc:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    52e0:	dc 01       	movw	r26, r24
    52e2:	cb 01       	movw	r24, r22
    52e4:	9c 01       	movw	r18, r24
    52e6:	ad 01       	movw	r20, r26
    52e8:	c8 01       	movw	r24, r16
    52ea:	b7 01       	movw	r22, r14
    52ec:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    52f0:	dc 01       	movw	r26, r24
    52f2:	cb 01       	movw	r24, r22
    52f4:	80 93 00 24 	sts	0x2400, r24
    52f8:	90 93 01 24 	sts	0x2401, r25
    52fc:	a0 93 02 24 	sts	0x2402, r26
    5300:	b0 93 03 24 	sts	0x2403, r27
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    5304:	80 91 ec 23 	lds	r24, 0x23EC
    5308:	90 91 ed 23 	lds	r25, 0x23ED
    530c:	88 0f       	add	r24, r24
    530e:	99 1f       	adc	r25, r25
    5310:	88 0f       	add	r24, r24
    5312:	99 1f       	adc	r25, r25
    5314:	fc 01       	movw	r30, r24
    5316:	e9 5a       	subi	r30, 0xA9	; 169
    5318:	fe 4d       	sbci	r31, 0xDE	; 222
    531a:	80 81       	ld	r24, Z
    531c:	91 81       	ldd	r25, Z+1	; 0x01
    531e:	a2 81       	ldd	r26, Z+2	; 0x02
    5320:	b3 81       	ldd	r27, Z+3	; 0x03
    5322:	bc 01       	movw	r22, r24
    5324:	cd 01       	movw	r24, r26
    5326:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    532a:	7b 01       	movw	r14, r22
    532c:	8c 01       	movw	r16, r24
    532e:	20 91 ec 23 	lds	r18, 0x23EC
    5332:	30 91 ed 23 	lds	r19, 0x23ED
    5336:	c9 01       	movw	r24, r18
    5338:	88 0f       	add	r24, r24
    533a:	99 1f       	adc	r25, r25
    533c:	82 0f       	add	r24, r18
    533e:	93 1f       	adc	r25, r19
    5340:	88 0f       	add	r24, r24
    5342:	99 1f       	adc	r25, r25
    5344:	88 0f       	add	r24, r24
    5346:	99 1f       	adc	r25, r25
    5348:	88 0f       	add	r24, r24
    534a:	99 1f       	adc	r25, r25
    534c:	fc 01       	movw	r30, r24
    534e:	ec 56       	subi	r30, 0x6C	; 108
    5350:	fc 4d       	sbci	r31, 0xDC	; 220
    5352:	20 81       	ld	r18, Z
    5354:	31 81       	ldd	r19, Z+1	; 0x01
    5356:	42 81       	ldd	r20, Z+2	; 0x02
    5358:	53 81       	ldd	r21, Z+3	; 0x03
    535a:	c8 01       	movw	r24, r16
    535c:	b7 01       	movw	r22, r14
    535e:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    5362:	dc 01       	movw	r26, r24
    5364:	cb 01       	movw	r24, r22
    5366:	7c 01       	movw	r14, r24
    5368:	8d 01       	movw	r16, r26
    536a:	80 91 08 24 	lds	r24, 0x2408
    536e:	90 91 09 24 	lds	r25, 0x2409
    5372:	a0 91 0a 24 	lds	r26, 0x240A
    5376:	b0 91 0b 24 	lds	r27, 0x240B
    537a:	bc 01       	movw	r22, r24
    537c:	cd 01       	movw	r24, r26
    537e:	0e 94 ac 55 	call	0xab58	; 0xab58 <cos>
    5382:	dc 01       	movw	r26, r24
    5384:	cb 01       	movw	r24, r22
    5386:	20 91 0c 24 	lds	r18, 0x240C
    538a:	30 91 0d 24 	lds	r19, 0x240D
    538e:	40 91 0e 24 	lds	r20, 0x240E
    5392:	50 91 0f 24 	lds	r21, 0x240F
    5396:	bc 01       	movw	r22, r24
    5398:	cd 01       	movw	r24, r26
    539a:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    539e:	dc 01       	movw	r26, r24
    53a0:	cb 01       	movw	r24, r22
    53a2:	9c 01       	movw	r18, r24
    53a4:	ad 01       	movw	r20, r26
    53a6:	c8 01       	movw	r24, r16
    53a8:	b7 01       	movw	r22, r14
    53aa:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    53ae:	dc 01       	movw	r26, r24
    53b0:	cb 01       	movw	r24, r22
    53b2:	80 93 04 24 	sts	0x2404, r24
    53b6:	90 93 05 24 	sts	0x2405, r25
    53ba:	a0 93 06 24 	sts	0x2406, r26
    53be:	b0 93 07 24 	sts	0x2407, r27

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    53c2:	00 91 ee 23 	lds	r16, 0x23EE
    53c6:	10 91 ef 23 	lds	r17, 0x23EF
    53ca:	80 91 ee 23 	lds	r24, 0x23EE
    53ce:	90 91 ef 23 	lds	r25, 0x23EF
    53d2:	88 0f       	add	r24, r24
    53d4:	99 1f       	adc	r25, r25
    53d6:	88 0f       	add	r24, r24
    53d8:	99 1f       	adc	r25, r25
    53da:	fc 01       	movw	r30, r24
    53dc:	e9 5a       	subi	r30, 0xA9	; 169
    53de:	fe 4d       	sbci	r31, 0xDE	; 222
    53e0:	80 81       	ld	r24, Z
    53e2:	91 81       	ldd	r25, Z+1	; 0x01
    53e4:	a2 81       	ldd	r26, Z+2	; 0x02
    53e6:	b3 81       	ldd	r27, Z+3	; 0x03
    53e8:	bc 01       	movw	r22, r24
    53ea:	cd 01       	movw	r24, r26
    53ec:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    53f0:	dc 01       	movw	r26, r24
    53f2:	cb 01       	movw	r24, r22
    53f4:	20 91 c4 23 	lds	r18, 0x23C4
    53f8:	30 91 c5 23 	lds	r19, 0x23C5
    53fc:	40 91 c6 23 	lds	r20, 0x23C6
    5400:	50 91 c7 23 	lds	r21, 0x23C7
    5404:	bc 01       	movw	r22, r24
    5406:	cd 01       	movw	r24, r26
    5408:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    540c:	dc 01       	movw	r26, r24
    540e:	cb 01       	movw	r24, r22
    5410:	9c 01       	movw	r18, r24
    5412:	ad 01       	movw	r20, r26
    5414:	c8 01       	movw	r24, r16
    5416:	88 0f       	add	r24, r24
    5418:	99 1f       	adc	r25, r25
    541a:	88 0f       	add	r24, r24
    541c:	99 1f       	adc	r25, r25
    541e:	fc 01       	movw	r30, r24
    5420:	e0 51       	subi	r30, 0x10	; 16
    5422:	fc 4d       	sbci	r31, 0xDC	; 220
    5424:	20 83       	st	Z, r18
    5426:	31 83       	std	Z+1, r19	; 0x01
    5428:	42 83       	std	Z+2, r20	; 0x02
    542a:	53 83       	std	Z+3, r21	; 0x03
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    542c:	10 92 e6 23 	sts	0x23E6, r1
    5430:	10 92 e7 23 	sts	0x23E7, r1
    5434:	fb c0       	rjmp	.+502    	; 0x562c <mc_arc_blocking+0x6e4>
		ma.theta += ma.theta_per_segment;
    5436:	80 91 08 24 	lds	r24, 0x2408
    543a:	90 91 09 24 	lds	r25, 0x2409
    543e:	a0 91 0a 24 	lds	r26, 0x240A
    5442:	b0 91 0b 24 	lds	r27, 0x240B
    5446:	20 91 14 24 	lds	r18, 0x2414
    544a:	30 91 15 24 	lds	r19, 0x2415
    544e:	40 91 16 24 	lds	r20, 0x2416
    5452:	50 91 17 24 	lds	r21, 0x2417
    5456:	bc 01       	movw	r22, r24
    5458:	cd 01       	movw	r24, r26
    545a:	0e 94 09 55 	call	0xaa12	; 0xaa12 <__addsf3>
    545e:	dc 01       	movw	r26, r24
    5460:	cb 01       	movw	r24, r22
    5462:	80 93 08 24 	sts	0x2408, r24
    5466:	90 93 09 24 	sts	0x2409, r25
    546a:	a0 93 0a 24 	sts	0x240A, r26
    546e:	b0 93 0b 24 	sts	0x240B, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    5472:	c0 90 ea 23 	lds	r12, 0x23EA
    5476:	d0 90 eb 23 	lds	r13, 0x23EB
    547a:	e0 90 00 24 	lds	r14, 0x2400
    547e:	f0 90 01 24 	lds	r15, 0x2401
    5482:	00 91 02 24 	lds	r16, 0x2402
    5486:	10 91 03 24 	lds	r17, 0x2403
    548a:	80 91 08 24 	lds	r24, 0x2408
    548e:	90 91 09 24 	lds	r25, 0x2409
    5492:	a0 91 0a 24 	lds	r26, 0x240A
    5496:	b0 91 0b 24 	lds	r27, 0x240B
    549a:	bc 01       	movw	r22, r24
    549c:	cd 01       	movw	r24, r26
    549e:	0e 94 cd 58 	call	0xb19a	; 0xb19a <sin>
    54a2:	dc 01       	movw	r26, r24
    54a4:	cb 01       	movw	r24, r22
    54a6:	20 91 0c 24 	lds	r18, 0x240C
    54aa:	30 91 0d 24 	lds	r19, 0x240D
    54ae:	40 91 0e 24 	lds	r20, 0x240E
    54b2:	50 91 0f 24 	lds	r21, 0x240F
    54b6:	bc 01       	movw	r22, r24
    54b8:	cd 01       	movw	r24, r26
    54ba:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    54be:	dc 01       	movw	r26, r24
    54c0:	cb 01       	movw	r24, r22
    54c2:	9c 01       	movw	r18, r24
    54c4:	ad 01       	movw	r20, r26
    54c6:	c8 01       	movw	r24, r16
    54c8:	b7 01       	movw	r22, r14
    54ca:	0e 94 09 55 	call	0xaa12	; 0xaa12 <__addsf3>
    54ce:	dc 01       	movw	r26, r24
    54d0:	cb 01       	movw	r24, r22
    54d2:	9c 01       	movw	r18, r24
    54d4:	ad 01       	movw	r20, r26
    54d6:	c6 01       	movw	r24, r12
    54d8:	88 0f       	add	r24, r24
    54da:	99 1f       	adc	r25, r25
    54dc:	88 0f       	add	r24, r24
    54de:	99 1f       	adc	r25, r25
    54e0:	fc 01       	movw	r30, r24
    54e2:	e0 51       	subi	r30, 0x10	; 16
    54e4:	fc 4d       	sbci	r31, 0xDC	; 220
    54e6:	20 83       	st	Z, r18
    54e8:	31 83       	std	Z+1, r19	; 0x01
    54ea:	42 83       	std	Z+2, r20	; 0x02
    54ec:	53 83       	std	Z+3, r21	; 0x03
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    54ee:	c0 90 ec 23 	lds	r12, 0x23EC
    54f2:	d0 90 ed 23 	lds	r13, 0x23ED
    54f6:	e0 90 04 24 	lds	r14, 0x2404
    54fa:	f0 90 05 24 	lds	r15, 0x2405
    54fe:	00 91 06 24 	lds	r16, 0x2406
    5502:	10 91 07 24 	lds	r17, 0x2407
    5506:	80 91 08 24 	lds	r24, 0x2408
    550a:	90 91 09 24 	lds	r25, 0x2409
    550e:	a0 91 0a 24 	lds	r26, 0x240A
    5512:	b0 91 0b 24 	lds	r27, 0x240B
    5516:	bc 01       	movw	r22, r24
    5518:	cd 01       	movw	r24, r26
    551a:	0e 94 ac 55 	call	0xab58	; 0xab58 <cos>
    551e:	dc 01       	movw	r26, r24
    5520:	cb 01       	movw	r24, r22
    5522:	20 91 0c 24 	lds	r18, 0x240C
    5526:	30 91 0d 24 	lds	r19, 0x240D
    552a:	40 91 0e 24 	lds	r20, 0x240E
    552e:	50 91 0f 24 	lds	r21, 0x240F
    5532:	bc 01       	movw	r22, r24
    5534:	cd 01       	movw	r24, r26
    5536:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    553a:	dc 01       	movw	r26, r24
    553c:	cb 01       	movw	r24, r22
    553e:	9c 01       	movw	r18, r24
    5540:	ad 01       	movw	r20, r26
    5542:	c8 01       	movw	r24, r16
    5544:	b7 01       	movw	r22, r14
    5546:	0e 94 09 55 	call	0xaa12	; 0xaa12 <__addsf3>
    554a:	dc 01       	movw	r26, r24
    554c:	cb 01       	movw	r24, r22
    554e:	9c 01       	movw	r18, r24
    5550:	ad 01       	movw	r20, r26
    5552:	c6 01       	movw	r24, r12
    5554:	88 0f       	add	r24, r24
    5556:	99 1f       	adc	r25, r25
    5558:	88 0f       	add	r24, r24
    555a:	99 1f       	adc	r25, r25
    555c:	fc 01       	movw	r30, r24
    555e:	e0 51       	subi	r30, 0x10	; 16
    5560:	fc 4d       	sbci	r31, 0xDC	; 220
    5562:	20 83       	st	Z, r18
    5564:	31 83       	std	Z+1, r19	; 0x01
    5566:	42 83       	std	Z+2, r20	; 0x02
    5568:	53 83       	std	Z+3, r21	; 0x03
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    556a:	00 91 ee 23 	lds	r16, 0x23EE
    556e:	10 91 ef 23 	lds	r17, 0x23EF
    5572:	80 91 ee 23 	lds	r24, 0x23EE
    5576:	90 91 ef 23 	lds	r25, 0x23EF
    557a:	88 0f       	add	r24, r24
    557c:	99 1f       	adc	r25, r25
    557e:	88 0f       	add	r24, r24
    5580:	99 1f       	adc	r25, r25
    5582:	fc 01       	movw	r30, r24
    5584:	e0 51       	subi	r30, 0x10	; 16
    5586:	fc 4d       	sbci	r31, 0xDC	; 220
    5588:	80 81       	ld	r24, Z
    558a:	91 81       	ldd	r25, Z+1	; 0x01
    558c:	a2 81       	ldd	r26, Z+2	; 0x02
    558e:	b3 81       	ldd	r27, Z+3	; 0x03
    5590:	20 91 18 24 	lds	r18, 0x2418
    5594:	30 91 19 24 	lds	r19, 0x2419
    5598:	40 91 1a 24 	lds	r20, 0x241A
    559c:	50 91 1b 24 	lds	r21, 0x241B
    55a0:	bc 01       	movw	r22, r24
    55a2:	cd 01       	movw	r24, r26
    55a4:	0e 94 09 55 	call	0xaa12	; 0xaa12 <__addsf3>
    55a8:	dc 01       	movw	r26, r24
    55aa:	cb 01       	movw	r24, r22
    55ac:	9c 01       	movw	r18, r24
    55ae:	ad 01       	movw	r20, r26
    55b0:	c8 01       	movw	r24, r16
    55b2:	88 0f       	add	r24, r24
    55b4:	99 1f       	adc	r25, r25
    55b6:	88 0f       	add	r24, r24
    55b8:	99 1f       	adc	r25, r25
    55ba:	fc 01       	movw	r30, r24
    55bc:	e0 51       	subi	r30, 0x10	; 16
    55be:	fc 4d       	sbci	r31, 0xDC	; 220
    55c0:	20 83       	st	Z, r18
    55c2:	31 83       	std	Z+1, r19	; 0x01
    55c4:	42 83       	std	Z+2, r20	; 0x02
    55c6:	53 83       	std	Z+3, r21	; 0x03
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    55c8:	80 91 f0 23 	lds	r24, 0x23F0
    55cc:	90 91 f1 23 	lds	r25, 0x23F1
    55d0:	a0 91 f2 23 	lds	r26, 0x23F2
    55d4:	b0 91 f3 23 	lds	r27, 0x23F3
    55d8:	20 91 f4 23 	lds	r18, 0x23F4
    55dc:	30 91 f5 23 	lds	r19, 0x23F5
    55e0:	40 91 f6 23 	lds	r20, 0x23F6
    55e4:	50 91 f7 23 	lds	r21, 0x23F7
    55e8:	e0 90 f8 23 	lds	r14, 0x23F8
    55ec:	f0 90 f9 23 	lds	r15, 0x23F9
    55f0:	00 91 fa 23 	lds	r16, 0x23FA
    55f4:	10 91 fb 23 	lds	r17, 0x23FB
    55f8:	a0 90 10 24 	lds	r10, 0x2410
    55fc:	b0 90 11 24 	lds	r11, 0x2411
    5600:	c0 90 12 24 	lds	r12, 0x2412
    5604:	d0 90 13 24 	lds	r13, 0x2413
    5608:	e0 91 e8 23 	lds	r30, 0x23E8
    560c:	f0 91 e9 23 	lds	r31, 0x23E9
    5610:	bc 01       	movw	r22, r24
    5612:	cd 01       	movw	r24, r26
    5614:	4f 01       	movw	r8, r30
    5616:	0e 94 7e 25 	call	0x4afc	; 0x4afc <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    561a:	80 91 e6 23 	lds	r24, 0x23E6
    561e:	90 91 e7 23 	lds	r25, 0x23E7
    5622:	01 96       	adiw	r24, 0x01	; 1
    5624:	80 93 e6 23 	sts	0x23E6, r24
    5628:	90 93 e7 23 	sts	0x23E7, r25
    562c:	20 91 e6 23 	lds	r18, 0x23E6
    5630:	30 91 e7 23 	lds	r19, 0x23E7
    5634:	80 91 e4 23 	lds	r24, 0x23E4
    5638:	90 91 e5 23 	lds	r25, 0x23E5
    563c:	82 17       	cp	r24, r18
    563e:	93 07       	cpc	r25, r19
    5640:	0c f0       	brlt	.+2      	; 0x5644 <mc_arc_blocking+0x6fc>
    5642:	f9 ce       	rjmp	.-526    	; 0x5436 <mc_arc_blocking+0x4ee>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
    5644:	1b 8a       	std	Y+19, r1	; 0x13
    5646:	1c 8a       	std	Y+20, r1	; 0x14
    5648:	8b 89       	ldd	r24, Y+19	; 0x13
    564a:	9c 89       	ldd	r25, Y+20	; 0x14
}
    564c:	6c 96       	adiw	r28, 0x1c	; 28
    564e:	cd bf       	out	0x3d, r28	; 61
    5650:	de bf       	out	0x3e, r29	; 62
    5652:	cf 91       	pop	r28
    5654:	df 91       	pop	r29
    5656:	1f 91       	pop	r17
    5658:	0f 91       	pop	r16
    565a:	ff 90       	pop	r15
    565c:	ef 90       	pop	r14
    565e:	df 90       	pop	r13
    5660:	cf 90       	pop	r12
    5662:	bf 90       	pop	r11
    5664:	af 90       	pop	r10
    5666:	9f 90       	pop	r9
    5668:	8f 90       	pop	r8
    566a:	08 95       	ret

0000566c <mc_arc>:
 */

int mc_arc(double theta, double angular_travel, double radius, 
		   double linear_travel, int axis_1, int axis_2, int axis_linear, 
		   double feed_rate, int invert_feed_rate)
{
    566c:	8f 92       	push	r8
    566e:	9f 92       	push	r9
    5670:	af 92       	push	r10
    5672:	bf 92       	push	r11
    5674:	cf 92       	push	r12
    5676:	df 92       	push	r13
    5678:	ef 92       	push	r14
    567a:	ff 92       	push	r15
    567c:	0f 93       	push	r16
    567e:	1f 93       	push	r17
    5680:	df 93       	push	r29
    5682:	cf 93       	push	r28
    5684:	cd b7       	in	r28, 0x3d	; 61
    5686:	de b7       	in	r29, 0x3e	; 62
    5688:	6c 97       	sbiw	r28, 0x1c	; 28
    568a:	cd bf       	out	0x3d, r28	; 61
    568c:	de bf       	out	0x3e, r29	; 62
    568e:	69 83       	std	Y+1, r22	; 0x01
    5690:	7a 83       	std	Y+2, r23	; 0x02
    5692:	8b 83       	std	Y+3, r24	; 0x03
    5694:	9c 83       	std	Y+4, r25	; 0x04
    5696:	2d 83       	std	Y+5, r18	; 0x05
    5698:	3e 83       	std	Y+6, r19	; 0x06
    569a:	4f 83       	std	Y+7, r20	; 0x07
    569c:	58 87       	std	Y+8, r21	; 0x08
    569e:	e9 86       	std	Y+9, r14	; 0x09
    56a0:	fa 86       	std	Y+10, r15	; 0x0a
    56a2:	0b 87       	std	Y+11, r16	; 0x0b
    56a4:	1c 87       	std	Y+12, r17	; 0x0c
    56a6:	ad 86       	std	Y+13, r10	; 0x0d
    56a8:	be 86       	std	Y+14, r11	; 0x0e
    56aa:	cf 86       	std	Y+15, r12	; 0x0f
    56ac:	d8 8a       	std	Y+16, r13	; 0x10
    56ae:	89 8a       	std	Y+17, r8	; 0x11
    56b0:	9a 8a       	std	Y+18, r9	; 0x12
	// load the arc struct
	ma.theta = theta;
    56b2:	89 81       	ldd	r24, Y+1	; 0x01
    56b4:	9a 81       	ldd	r25, Y+2	; 0x02
    56b6:	ab 81       	ldd	r26, Y+3	; 0x03
    56b8:	bc 81       	ldd	r27, Y+4	; 0x04
    56ba:	80 93 08 24 	sts	0x2408, r24
    56be:	90 93 09 24 	sts	0x2409, r25
    56c2:	a0 93 0a 24 	sts	0x240A, r26
    56c6:	b0 93 0b 24 	sts	0x240B, r27
	ma.radius = radius;
    56ca:	89 85       	ldd	r24, Y+9	; 0x09
    56cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    56ce:	ab 85       	ldd	r26, Y+11	; 0x0b
    56d0:	bc 85       	ldd	r27, Y+12	; 0x0c
    56d2:	80 93 0c 24 	sts	0x240C, r24
    56d6:	90 93 0d 24 	sts	0x240D, r25
    56da:	a0 93 0e 24 	sts	0x240E, r26
    56de:	b0 93 0f 24 	sts	0x240F, r27
	ma.angular_travel = angular_travel;
    56e2:	8d 81       	ldd	r24, Y+5	; 0x05
    56e4:	9e 81       	ldd	r25, Y+6	; 0x06
    56e6:	af 81       	ldd	r26, Y+7	; 0x07
    56e8:	b8 85       	ldd	r27, Y+8	; 0x08
    56ea:	80 93 1c 24 	sts	0x241C, r24
    56ee:	90 93 1d 24 	sts	0x241D, r25
    56f2:	a0 93 1e 24 	sts	0x241E, r26
    56f6:	b0 93 1f 24 	sts	0x241F, r27
	ma.linear_travel = linear_travel;
    56fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    56fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    56fe:	af 85       	ldd	r26, Y+15	; 0x0f
    5700:	b8 89       	ldd	r27, Y+16	; 0x10
    5702:	80 93 20 24 	sts	0x2420, r24
    5706:	90 93 21 24 	sts	0x2421, r25
    570a:	a0 93 22 24 	sts	0x2422, r26
    570e:	b0 93 23 24 	sts	0x2423, r27
	ma.feed_rate = feed_rate;
    5712:	88 a9       	ldd	r24, Y+48	; 0x30
    5714:	99 a9       	ldd	r25, Y+49	; 0x31
    5716:	aa a9       	ldd	r26, Y+50	; 0x32
    5718:	bb a9       	ldd	r27, Y+51	; 0x33
    571a:	80 93 10 24 	sts	0x2410, r24
    571e:	90 93 11 24 	sts	0x2411, r25
    5722:	a0 93 12 24 	sts	0x2412, r26
    5726:	b0 93 13 24 	sts	0x2413, r27
	ma.invert_feed_rate = invert_feed_rate;
    572a:	8c a9       	ldd	r24, Y+52	; 0x34
    572c:	9d a9       	ldd	r25, Y+53	; 0x35
    572e:	80 93 e8 23 	sts	0x23E8, r24
    5732:	90 93 e9 23 	sts	0x23E9, r25
	ma.axis_1 = axis_1;
    5736:	89 89       	ldd	r24, Y+17	; 0x11
    5738:	9a 89       	ldd	r25, Y+18	; 0x12
    573a:	80 93 ea 23 	sts	0x23EA, r24
    573e:	90 93 eb 23 	sts	0x23EB, r25
	ma.axis_2 = axis_2;
    5742:	8c a5       	ldd	r24, Y+44	; 0x2c
    5744:	9d a5       	ldd	r25, Y+45	; 0x2d
    5746:	80 93 ec 23 	sts	0x23EC, r24
    574a:	90 93 ed 23 	sts	0x23ED, r25
	ma.axis_linear = axis_linear;
    574e:	8e a5       	ldd	r24, Y+46	; 0x2e
    5750:	9f a5       	ldd	r25, Y+47	; 0x2f
    5752:	80 93 ee 23 	sts	0x23EE, r24
    5756:	90 93 ef 23 	sts	0x23EF, r25
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    575a:	80 91 1c 24 	lds	r24, 0x241C
    575e:	90 91 1d 24 	lds	r25, 0x241D
    5762:	a0 91 1e 24 	lds	r26, 0x241E
    5766:	b0 91 1f 24 	lds	r27, 0x241F
    576a:	20 91 0c 24 	lds	r18, 0x240C
    576e:	30 91 0d 24 	lds	r19, 0x240D
    5772:	40 91 0e 24 	lds	r20, 0x240E
    5776:	50 91 0f 24 	lds	r21, 0x240F
    577a:	bc 01       	movw	r22, r24
    577c:	cd 01       	movw	r24, r26
    577e:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    5782:	dc 01       	movw	r26, r24
    5784:	cb 01       	movw	r24, r22
    5786:	89 8f       	std	Y+25, r24	; 0x19
    5788:	9a 8f       	std	Y+26, r25	; 0x1a
    578a:	ab 8f       	std	Y+27, r26	; 0x1b
    578c:	bc 8f       	std	Y+28, r27	; 0x1c
    578e:	80 91 20 24 	lds	r24, 0x2420
    5792:	90 91 21 24 	lds	r25, 0x2421
    5796:	a0 91 22 24 	lds	r26, 0x2422
    579a:	b0 91 23 24 	lds	r27, 0x2423
    579e:	bc 01       	movw	r22, r24
    57a0:	cd 01       	movw	r24, r26
    57a2:	0e 94 17 56 	call	0xac2e	; 0xac2e <__fixsfsi>
    57a6:	dc 01       	movw	r26, r24
    57a8:	cb 01       	movw	r24, r22
    57aa:	8d 8b       	std	Y+21, r24	; 0x15
    57ac:	9e 8b       	std	Y+22, r25	; 0x16
    57ae:	af 8b       	std	Y+23, r26	; 0x17
    57b0:	b8 8f       	std	Y+24, r27	; 0x18
    57b2:	8d 89       	ldd	r24, Y+21	; 0x15
    57b4:	9e 89       	ldd	r25, Y+22	; 0x16
    57b6:	af 89       	ldd	r26, Y+23	; 0x17
    57b8:	b8 8d       	ldd	r27, Y+24	; 0x18
    57ba:	bb 23       	and	r27, r27
    57bc:	7c f4       	brge	.+30     	; 0x57dc <mc_arc+0x170>
    57be:	8d 89       	ldd	r24, Y+21	; 0x15
    57c0:	9e 89       	ldd	r25, Y+22	; 0x16
    57c2:	af 89       	ldd	r26, Y+23	; 0x17
    57c4:	b8 8d       	ldd	r27, Y+24	; 0x18
    57c6:	b0 95       	com	r27
    57c8:	a0 95       	com	r26
    57ca:	90 95       	com	r25
    57cc:	81 95       	neg	r24
    57ce:	9f 4f       	sbci	r25, 0xFF	; 255
    57d0:	af 4f       	sbci	r26, 0xFF	; 255
    57d2:	bf 4f       	sbci	r27, 0xFF	; 255
    57d4:	8d 8b       	std	Y+21, r24	; 0x15
    57d6:	9e 8b       	std	Y+22, r25	; 0x16
    57d8:	af 8b       	std	Y+23, r26	; 0x17
    57da:	b8 8f       	std	Y+24, r27	; 0x18
    57dc:	6d 89       	ldd	r22, Y+21	; 0x15
    57de:	7e 89       	ldd	r23, Y+22	; 0x16
    57e0:	8f 89       	ldd	r24, Y+23	; 0x17
    57e2:	98 8d       	ldd	r25, Y+24	; 0x18
    57e4:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    57e8:	9b 01       	movw	r18, r22
    57ea:	ac 01       	movw	r20, r24
    57ec:	69 8d       	ldd	r22, Y+25	; 0x19
    57ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57f4:	0e 94 a5 57 	call	0xaf4a	; 0xaf4a <hypot>
    57f8:	dc 01       	movw	r26, r24
    57fa:	cb 01       	movw	r24, r22
    57fc:	80 93 fc 23 	sts	0x23FC, r24
    5800:	90 93 fd 23 	sts	0x23FD, r25
    5804:	a0 93 fe 23 	sts	0x23FE, r26
    5808:	b0 93 ff 23 	sts	0x23FF, r27
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    580c:	80 91 fc 23 	lds	r24, 0x23FC
    5810:	90 91 fd 23 	lds	r25, 0x23FD
    5814:	a0 91 fe 23 	lds	r26, 0x23FE
    5818:	b0 91 ff 23 	lds	r27, 0x23FF
    581c:	bc 01       	movw	r22, r24
    581e:	cd 01       	movw	r24, r26
    5820:	2a e0       	ldi	r18, 0x0A	; 10
    5822:	37 ed       	ldi	r19, 0xD7	; 215
    5824:	43 e2       	ldi	r20, 0x23	; 35
    5826:	5c e3       	ldi	r21, 0x3C	; 60
    5828:	0e 94 a8 55 	call	0xab50	; 0xab50 <__cmpsf2>
    582c:	88 23       	and	r24, r24
    582e:	2c f4       	brge	.+10     	; 0x583a <mc_arc+0x1ce>
		return (TG_ARC_ERROR);						// arc specification error
    5830:	a0 e1       	ldi	r26, 0x10	; 16
    5832:	b0 e0       	ldi	r27, 0x00	; 0
    5834:	ab 8b       	std	Y+19, r26	; 0x13
    5836:	bc 8b       	std	Y+20, r27	; 0x14
    5838:	92 c1       	rjmp	.+804    	; 0x5b5e <mc_arc+0x4f2>
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    583a:	80 91 fc 23 	lds	r24, 0x23FC
    583e:	90 91 fd 23 	lds	r25, 0x23FD
    5842:	a0 91 fe 23 	lds	r26, 0x23FE
    5846:	b0 91 ff 23 	lds	r27, 0x23FF
    584a:	20 91 75 23 	lds	r18, 0x2375
    584e:	30 91 76 23 	lds	r19, 0x2376
    5852:	40 91 77 23 	lds	r20, 0x2377
    5856:	50 91 78 23 	lds	r21, 0x2378
    585a:	bc 01       	movw	r22, r24
    585c:	cd 01       	movw	r24, r26
    585e:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    5862:	dc 01       	movw	r26, r24
    5864:	cb 01       	movw	r24, r22
    5866:	bc 01       	movw	r22, r24
    5868:	cd 01       	movw	r24, r26
    586a:	0e 94 95 55 	call	0xab2a	; 0xab2a <ceil>
    586e:	dc 01       	movw	r26, r24
    5870:	cb 01       	movw	r24, r22
    5872:	bc 01       	movw	r22, r24
    5874:	cd 01       	movw	r24, r26
    5876:	0e 94 17 56 	call	0xac2e	; 0xac2e <__fixsfsi>
    587a:	dc 01       	movw	r26, r24
    587c:	cb 01       	movw	r24, r22
    587e:	80 93 e4 23 	sts	0x23E4, r24
    5882:	90 93 e5 23 	sts	0x23E5, r25
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    5886:	80 91 e8 23 	lds	r24, 0x23E8
    588a:	90 91 e9 23 	lds	r25, 0x23E9
    588e:	00 97       	sbiw	r24, 0x00	; 0
    5890:	21 f1       	breq	.+72     	; 0x58da <mc_arc+0x26e>
		ma.feed_rate *= ma.segments; 
    5892:	e0 90 10 24 	lds	r14, 0x2410
    5896:	f0 90 11 24 	lds	r15, 0x2411
    589a:	00 91 12 24 	lds	r16, 0x2412
    589e:	10 91 13 24 	lds	r17, 0x2413
    58a2:	80 91 e4 23 	lds	r24, 0x23E4
    58a6:	90 91 e5 23 	lds	r25, 0x23E5
    58aa:	aa 27       	eor	r26, r26
    58ac:	97 fd       	sbrc	r25, 7
    58ae:	a0 95       	com	r26
    58b0:	ba 2f       	mov	r27, r26
    58b2:	bc 01       	movw	r22, r24
    58b4:	cd 01       	movw	r24, r26
    58b6:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    58ba:	9b 01       	movw	r18, r22
    58bc:	ac 01       	movw	r20, r24
    58be:	c8 01       	movw	r24, r16
    58c0:	b7 01       	movw	r22, r14
    58c2:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    58c6:	dc 01       	movw	r26, r24
    58c8:	cb 01       	movw	r24, r22
    58ca:	80 93 10 24 	sts	0x2410, r24
    58ce:	90 93 11 24 	sts	0x2411, r25
    58d2:	a0 93 12 24 	sts	0x2412, r26
    58d6:	b0 93 13 24 	sts	0x2413, r27
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    58da:	e0 90 1c 24 	lds	r14, 0x241C
    58de:	f0 90 1d 24 	lds	r15, 0x241D
    58e2:	00 91 1e 24 	lds	r16, 0x241E
    58e6:	10 91 1f 24 	lds	r17, 0x241F
    58ea:	80 91 e4 23 	lds	r24, 0x23E4
    58ee:	90 91 e5 23 	lds	r25, 0x23E5
    58f2:	aa 27       	eor	r26, r26
    58f4:	97 fd       	sbrc	r25, 7
    58f6:	a0 95       	com	r26
    58f8:	ba 2f       	mov	r27, r26
    58fa:	bc 01       	movw	r22, r24
    58fc:	cd 01       	movw	r24, r26
    58fe:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    5902:	9b 01       	movw	r18, r22
    5904:	ac 01       	movw	r20, r24
    5906:	c8 01       	movw	r24, r16
    5908:	b7 01       	movw	r22, r14
    590a:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    590e:	dc 01       	movw	r26, r24
    5910:	cb 01       	movw	r24, r22
    5912:	80 93 14 24 	sts	0x2414, r24
    5916:	90 93 15 24 	sts	0x2415, r25
    591a:	a0 93 16 24 	sts	0x2416, r26
    591e:	b0 93 17 24 	sts	0x2417, r27
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    5922:	e0 90 20 24 	lds	r14, 0x2420
    5926:	f0 90 21 24 	lds	r15, 0x2421
    592a:	00 91 22 24 	lds	r16, 0x2422
    592e:	10 91 23 24 	lds	r17, 0x2423
    5932:	80 91 e4 23 	lds	r24, 0x23E4
    5936:	90 91 e5 23 	lds	r25, 0x23E5
    593a:	aa 27       	eor	r26, r26
    593c:	97 fd       	sbrc	r25, 7
    593e:	a0 95       	com	r26
    5940:	ba 2f       	mov	r27, r26
    5942:	bc 01       	movw	r22, r24
    5944:	cd 01       	movw	r24, r26
    5946:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    594a:	9b 01       	movw	r18, r22
    594c:	ac 01       	movw	r20, r24
    594e:	c8 01       	movw	r24, r16
    5950:	b7 01       	movw	r22, r14
    5952:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    5956:	dc 01       	movw	r26, r24
    5958:	cb 01       	movw	r24, r22
    595a:	80 93 18 24 	sts	0x2418, r24
    595e:	90 93 19 24 	sts	0x2419, r25
    5962:	a0 93 1a 24 	sts	0x241A, r26
    5966:	b0 93 1b 24 	sts	0x241B, r27
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    596a:	80 91 ea 23 	lds	r24, 0x23EA
    596e:	90 91 eb 23 	lds	r25, 0x23EB
    5972:	88 0f       	add	r24, r24
    5974:	99 1f       	adc	r25, r25
    5976:	88 0f       	add	r24, r24
    5978:	99 1f       	adc	r25, r25
    597a:	fc 01       	movw	r30, r24
    597c:	e9 5a       	subi	r30, 0xA9	; 169
    597e:	fe 4d       	sbci	r31, 0xDE	; 222
    5980:	80 81       	ld	r24, Z
    5982:	91 81       	ldd	r25, Z+1	; 0x01
    5984:	a2 81       	ldd	r26, Z+2	; 0x02
    5986:	b3 81       	ldd	r27, Z+3	; 0x03
    5988:	bc 01       	movw	r22, r24
    598a:	cd 01       	movw	r24, r26
    598c:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    5990:	7b 01       	movw	r14, r22
    5992:	8c 01       	movw	r16, r24
    5994:	20 91 ea 23 	lds	r18, 0x23EA
    5998:	30 91 eb 23 	lds	r19, 0x23EB
    599c:	c9 01       	movw	r24, r18
    599e:	88 0f       	add	r24, r24
    59a0:	99 1f       	adc	r25, r25
    59a2:	82 0f       	add	r24, r18
    59a4:	93 1f       	adc	r25, r19
    59a6:	88 0f       	add	r24, r24
    59a8:	99 1f       	adc	r25, r25
    59aa:	88 0f       	add	r24, r24
    59ac:	99 1f       	adc	r25, r25
    59ae:	88 0f       	add	r24, r24
    59b0:	99 1f       	adc	r25, r25
    59b2:	fc 01       	movw	r30, r24
    59b4:	ec 56       	subi	r30, 0x6C	; 108
    59b6:	fc 4d       	sbci	r31, 0xDC	; 220
    59b8:	20 81       	ld	r18, Z
    59ba:	31 81       	ldd	r19, Z+1	; 0x01
    59bc:	42 81       	ldd	r20, Z+2	; 0x02
    59be:	53 81       	ldd	r21, Z+3	; 0x03
    59c0:	c8 01       	movw	r24, r16
    59c2:	b7 01       	movw	r22, r14
    59c4:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    59c8:	dc 01       	movw	r26, r24
    59ca:	cb 01       	movw	r24, r22
    59cc:	7c 01       	movw	r14, r24
    59ce:	8d 01       	movw	r16, r26
    59d0:	80 91 08 24 	lds	r24, 0x2408
    59d4:	90 91 09 24 	lds	r25, 0x2409
    59d8:	a0 91 0a 24 	lds	r26, 0x240A
    59dc:	b0 91 0b 24 	lds	r27, 0x240B
    59e0:	bc 01       	movw	r22, r24
    59e2:	cd 01       	movw	r24, r26
    59e4:	0e 94 cd 58 	call	0xb19a	; 0xb19a <sin>
    59e8:	dc 01       	movw	r26, r24
    59ea:	cb 01       	movw	r24, r22
    59ec:	20 91 0c 24 	lds	r18, 0x240C
    59f0:	30 91 0d 24 	lds	r19, 0x240D
    59f4:	40 91 0e 24 	lds	r20, 0x240E
    59f8:	50 91 0f 24 	lds	r21, 0x240F
    59fc:	bc 01       	movw	r22, r24
    59fe:	cd 01       	movw	r24, r26
    5a00:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    5a04:	dc 01       	movw	r26, r24
    5a06:	cb 01       	movw	r24, r22
    5a08:	9c 01       	movw	r18, r24
    5a0a:	ad 01       	movw	r20, r26
    5a0c:	c8 01       	movw	r24, r16
    5a0e:	b7 01       	movw	r22, r14
    5a10:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    5a14:	dc 01       	movw	r26, r24
    5a16:	cb 01       	movw	r24, r22
    5a18:	80 93 00 24 	sts	0x2400, r24
    5a1c:	90 93 01 24 	sts	0x2401, r25
    5a20:	a0 93 02 24 	sts	0x2402, r26
    5a24:	b0 93 03 24 	sts	0x2403, r27
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    5a28:	80 91 ec 23 	lds	r24, 0x23EC
    5a2c:	90 91 ed 23 	lds	r25, 0x23ED
    5a30:	88 0f       	add	r24, r24
    5a32:	99 1f       	adc	r25, r25
    5a34:	88 0f       	add	r24, r24
    5a36:	99 1f       	adc	r25, r25
    5a38:	fc 01       	movw	r30, r24
    5a3a:	e9 5a       	subi	r30, 0xA9	; 169
    5a3c:	fe 4d       	sbci	r31, 0xDE	; 222
    5a3e:	80 81       	ld	r24, Z
    5a40:	91 81       	ldd	r25, Z+1	; 0x01
    5a42:	a2 81       	ldd	r26, Z+2	; 0x02
    5a44:	b3 81       	ldd	r27, Z+3	; 0x03
    5a46:	bc 01       	movw	r22, r24
    5a48:	cd 01       	movw	r24, r26
    5a4a:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    5a4e:	7b 01       	movw	r14, r22
    5a50:	8c 01       	movw	r16, r24
    5a52:	20 91 ec 23 	lds	r18, 0x23EC
    5a56:	30 91 ed 23 	lds	r19, 0x23ED
    5a5a:	c9 01       	movw	r24, r18
    5a5c:	88 0f       	add	r24, r24
    5a5e:	99 1f       	adc	r25, r25
    5a60:	82 0f       	add	r24, r18
    5a62:	93 1f       	adc	r25, r19
    5a64:	88 0f       	add	r24, r24
    5a66:	99 1f       	adc	r25, r25
    5a68:	88 0f       	add	r24, r24
    5a6a:	99 1f       	adc	r25, r25
    5a6c:	88 0f       	add	r24, r24
    5a6e:	99 1f       	adc	r25, r25
    5a70:	fc 01       	movw	r30, r24
    5a72:	ec 56       	subi	r30, 0x6C	; 108
    5a74:	fc 4d       	sbci	r31, 0xDC	; 220
    5a76:	20 81       	ld	r18, Z
    5a78:	31 81       	ldd	r19, Z+1	; 0x01
    5a7a:	42 81       	ldd	r20, Z+2	; 0x02
    5a7c:	53 81       	ldd	r21, Z+3	; 0x03
    5a7e:	c8 01       	movw	r24, r16
    5a80:	b7 01       	movw	r22, r14
    5a82:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    5a86:	dc 01       	movw	r26, r24
    5a88:	cb 01       	movw	r24, r22
    5a8a:	7c 01       	movw	r14, r24
    5a8c:	8d 01       	movw	r16, r26
    5a8e:	80 91 08 24 	lds	r24, 0x2408
    5a92:	90 91 09 24 	lds	r25, 0x2409
    5a96:	a0 91 0a 24 	lds	r26, 0x240A
    5a9a:	b0 91 0b 24 	lds	r27, 0x240B
    5a9e:	bc 01       	movw	r22, r24
    5aa0:	cd 01       	movw	r24, r26
    5aa2:	0e 94 ac 55 	call	0xab58	; 0xab58 <cos>
    5aa6:	dc 01       	movw	r26, r24
    5aa8:	cb 01       	movw	r24, r22
    5aaa:	20 91 0c 24 	lds	r18, 0x240C
    5aae:	30 91 0d 24 	lds	r19, 0x240D
    5ab2:	40 91 0e 24 	lds	r20, 0x240E
    5ab6:	50 91 0f 24 	lds	r21, 0x240F
    5aba:	bc 01       	movw	r22, r24
    5abc:	cd 01       	movw	r24, r26
    5abe:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    5ac2:	dc 01       	movw	r26, r24
    5ac4:	cb 01       	movw	r24, r22
    5ac6:	9c 01       	movw	r18, r24
    5ac8:	ad 01       	movw	r20, r26
    5aca:	c8 01       	movw	r24, r16
    5acc:	b7 01       	movw	r22, r14
    5ace:	0e 94 08 55 	call	0xaa10	; 0xaa10 <__subsf3>
    5ad2:	dc 01       	movw	r26, r24
    5ad4:	cb 01       	movw	r24, r22
    5ad6:	80 93 04 24 	sts	0x2404, r24
    5ada:	90 93 05 24 	sts	0x2405, r25
    5ade:	a0 93 06 24 	sts	0x2406, r26
    5ae2:	b0 93 07 24 	sts	0x2407, r27

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    5ae6:	00 91 ee 23 	lds	r16, 0x23EE
    5aea:	10 91 ef 23 	lds	r17, 0x23EF
    5aee:	80 91 ee 23 	lds	r24, 0x23EE
    5af2:	90 91 ef 23 	lds	r25, 0x23EF
    5af6:	88 0f       	add	r24, r24
    5af8:	99 1f       	adc	r25, r25
    5afa:	88 0f       	add	r24, r24
    5afc:	99 1f       	adc	r25, r25
    5afe:	fc 01       	movw	r30, r24
    5b00:	e9 5a       	subi	r30, 0xA9	; 169
    5b02:	fe 4d       	sbci	r31, 0xDE	; 222
    5b04:	80 81       	ld	r24, Z
    5b06:	91 81       	ldd	r25, Z+1	; 0x01
    5b08:	a2 81       	ldd	r26, Z+2	; 0x02
    5b0a:	b3 81       	ldd	r27, Z+3	; 0x03
    5b0c:	bc 01       	movw	r22, r24
    5b0e:	cd 01       	movw	r24, r26
    5b10:	0e 94 4a 56 	call	0xac94	; 0xac94 <__floatsisf>
    5b14:	dc 01       	movw	r26, r24
    5b16:	cb 01       	movw	r24, r22
    5b18:	20 91 c4 23 	lds	r18, 0x23C4
    5b1c:	30 91 c5 23 	lds	r19, 0x23C5
    5b20:	40 91 c6 23 	lds	r20, 0x23C6
    5b24:	50 91 c7 23 	lds	r21, 0x23C7
    5b28:	bc 01       	movw	r22, r24
    5b2a:	cd 01       	movw	r24, r26
    5b2c:	0e 94 af 55 	call	0xab5e	; 0xab5e <__divsf3>
    5b30:	dc 01       	movw	r26, r24
    5b32:	cb 01       	movw	r24, r22
    5b34:	9c 01       	movw	r18, r24
    5b36:	ad 01       	movw	r20, r26
    5b38:	c8 01       	movw	r24, r16
    5b3a:	88 0f       	add	r24, r24
    5b3c:	99 1f       	adc	r25, r25
    5b3e:	88 0f       	add	r24, r24
    5b40:	99 1f       	adc	r25, r25
    5b42:	fc 01       	movw	r30, r24
    5b44:	e0 51       	subi	r30, 0x10	; 16
    5b46:	fc 4d       	sbci	r31, 0xDC	; 220
    5b48:	20 83       	st	Z, r18
    5b4a:	31 83       	std	Z+1, r19	; 0x01
    5b4c:	42 83       	std	Z+2, r20	; 0x02
    5b4e:	53 83       	std	Z+3, r21	; 0x03
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    5b50:	81 e0       	ldi	r24, 0x01	; 1
    5b52:	80 93 e3 23 	sts	0x23E3, r24
	return (mc_arc_continue());
    5b56:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <mc_arc_continue>
    5b5a:	8b 8b       	std	Y+19, r24	; 0x13
    5b5c:	9c 8b       	std	Y+20, r25	; 0x14
    5b5e:	8b 89       	ldd	r24, Y+19	; 0x13
    5b60:	9c 89       	ldd	r25, Y+20	; 0x14
}
    5b62:	6c 96       	adiw	r28, 0x1c	; 28
    5b64:	cd bf       	out	0x3d, r28	; 61
    5b66:	de bf       	out	0x3e, r29	; 62
    5b68:	cf 91       	pop	r28
    5b6a:	df 91       	pop	r29
    5b6c:	1f 91       	pop	r17
    5b6e:	0f 91       	pop	r16
    5b70:	ff 90       	pop	r15
    5b72:	ef 90       	pop	r14
    5b74:	df 90       	pop	r13
    5b76:	cf 90       	pop	r12
    5b78:	bf 90       	pop	r11
    5b7a:	af 90       	pop	r10
    5b7c:	9f 90       	pop	r9
    5b7e:	8f 90       	pop	r8
    5b80:	08 95       	ret

00005b82 <mc_arc_continue>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continue() 
{
    5b82:	8f 92       	push	r8
    5b84:	9f 92       	push	r9
    5b86:	af 92       	push	r10
    5b88:	bf 92       	push	r11
    5b8a:	cf 92       	push	r12
    5b8c:	df 92       	push	r13
    5b8e:	ef 92       	push	r14
    5b90:	ff 92       	push	r15
    5b92:	0f 93       	push	r16
    5b94:	1f 93       	push	r17
    5b96:	df 93       	push	r29
    5b98:	cf 93       	push	r28
    5b9a:	0f 92       	push	r0
    5b9c:	0f 92       	push	r0
    5b9e:	cd b7       	in	r28, 0x3d	; 61
    5ba0:	de b7       	in	r29, 0x3e	; 62
	if (ma.arc_state == MC_STATE_OFF) {
    5ba2:	80 91 e3 23 	lds	r24, 0x23E3
    5ba6:	88 23       	and	r24, r24
    5ba8:	29 f4       	brne	.+10     	; 0x5bb4 <mc_arc_continue+0x32>
		return (TG_NOOP);						// return NULL for non-started arc
    5baa:	82 e0       	ldi	r24, 0x02	; 2
    5bac:	90 e0       	ldi	r25, 0x00	; 0
    5bae:	89 83       	std	Y+1, r24	; 0x01
    5bb0:	9a 83       	std	Y+2, r25	; 0x02
    5bb2:	21 c1       	rjmp	.+578    	; 0x5df6 <mc_arc_continue+0x274>
	} else if (ma.arc_state == MC_STATE_NEW) {
    5bb4:	80 91 e3 23 	lds	r24, 0x23E3
    5bb8:	81 30       	cpi	r24, 0x01	; 1
    5bba:	09 f0       	breq	.+2      	; 0x5bbe <mc_arc_continue+0x3c>
    5bbc:	0c c1       	rjmp	.+536    	; 0x5dd6 <mc_arc_continue+0x254>
		ma.segment_counter=0;
    5bbe:	10 92 e6 23 	sts	0x23E6, r1
    5bc2:	10 92 e7 23 	sts	0x23E7, r1
		ma.arc_state = MC_STATE_RUNNING;
    5bc6:	82 e0       	ldi	r24, 0x02	; 2
    5bc8:	80 93 e3 23 	sts	0x23E3, r24
    5bcc:	04 c1       	rjmp	.+520    	; 0x5dd6 <mc_arc_continue+0x254>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    5bce:	0e 94 96 3f 	call	0x7f2c	; 0x7f2c <mv_test_move_buffer_full>
    5bd2:	88 23       	and	r24, r24
    5bd4:	29 f0       	breq	.+10     	; 0x5be0 <mc_arc_continue+0x5e>
			return (TG_EAGAIN);
    5bd6:	81 e0       	ldi	r24, 0x01	; 1
    5bd8:	90 e0       	ldi	r25, 0x00	; 0
    5bda:	89 83       	std	Y+1, r24	; 0x01
    5bdc:	9a 83       	std	Y+2, r25	; 0x02
    5bde:	0b c1       	rjmp	.+534    	; 0x5df6 <mc_arc_continue+0x274>
		}
		ma.segment_counter++;
    5be0:	80 91 e6 23 	lds	r24, 0x23E6
    5be4:	90 91 e7 23 	lds	r25, 0x23E7
    5be8:	01 96       	adiw	r24, 0x01	; 1
    5bea:	80 93 e6 23 	sts	0x23E6, r24
    5bee:	90 93 e7 23 	sts	0x23E7, r25
		ma.theta += ma.theta_per_segment;
    5bf2:	80 91 08 24 	lds	r24, 0x2408
    5bf6:	90 91 09 24 	lds	r25, 0x2409
    5bfa:	a0 91 0a 24 	lds	r26, 0x240A
    5bfe:	b0 91 0b 24 	lds	r27, 0x240B
    5c02:	20 91 14 24 	lds	r18, 0x2414
    5c06:	30 91 15 24 	lds	r19, 0x2415
    5c0a:	40 91 16 24 	lds	r20, 0x2416
    5c0e:	50 91 17 24 	lds	r21, 0x2417
    5c12:	bc 01       	movw	r22, r24
    5c14:	cd 01       	movw	r24, r26
    5c16:	0e 94 09 55 	call	0xaa12	; 0xaa12 <__addsf3>
    5c1a:	dc 01       	movw	r26, r24
    5c1c:	cb 01       	movw	r24, r22
    5c1e:	80 93 08 24 	sts	0x2408, r24
    5c22:	90 93 09 24 	sts	0x2409, r25
    5c26:	a0 93 0a 24 	sts	0x240A, r26
    5c2a:	b0 93 0b 24 	sts	0x240B, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    5c2e:	c0 90 ea 23 	lds	r12, 0x23EA
    5c32:	d0 90 eb 23 	lds	r13, 0x23EB
    5c36:	e0 90 00 24 	lds	r14, 0x2400
    5c3a:	f0 90 01 24 	lds	r15, 0x2401
    5c3e:	00 91 02 24 	lds	r16, 0x2402
    5c42:	10 91 03 24 	lds	r17, 0x2403
    5c46:	80 91 08 24 	lds	r24, 0x2408
    5c4a:	90 91 09 24 	lds	r25, 0x2409
    5c4e:	a0 91 0a 24 	lds	r26, 0x240A
    5c52:	b0 91 0b 24 	lds	r27, 0x240B
    5c56:	bc 01       	movw	r22, r24
    5c58:	cd 01       	movw	r24, r26
    5c5a:	0e 94 cd 58 	call	0xb19a	; 0xb19a <sin>
    5c5e:	dc 01       	movw	r26, r24
    5c60:	cb 01       	movw	r24, r22
    5c62:	20 91 0c 24 	lds	r18, 0x240C
    5c66:	30 91 0d 24 	lds	r19, 0x240D
    5c6a:	40 91 0e 24 	lds	r20, 0x240E
    5c6e:	50 91 0f 24 	lds	r21, 0x240F
    5c72:	bc 01       	movw	r22, r24
    5c74:	cd 01       	movw	r24, r26
    5c76:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    5c7a:	dc 01       	movw	r26, r24
    5c7c:	cb 01       	movw	r24, r22
    5c7e:	9c 01       	movw	r18, r24
    5c80:	ad 01       	movw	r20, r26
    5c82:	c8 01       	movw	r24, r16
    5c84:	b7 01       	movw	r22, r14
    5c86:	0e 94 09 55 	call	0xaa12	; 0xaa12 <__addsf3>
    5c8a:	dc 01       	movw	r26, r24
    5c8c:	cb 01       	movw	r24, r22
    5c8e:	9c 01       	movw	r18, r24
    5c90:	ad 01       	movw	r20, r26
    5c92:	c6 01       	movw	r24, r12
    5c94:	88 0f       	add	r24, r24
    5c96:	99 1f       	adc	r25, r25
    5c98:	88 0f       	add	r24, r24
    5c9a:	99 1f       	adc	r25, r25
    5c9c:	fc 01       	movw	r30, r24
    5c9e:	e0 51       	subi	r30, 0x10	; 16
    5ca0:	fc 4d       	sbci	r31, 0xDC	; 220
    5ca2:	20 83       	st	Z, r18
    5ca4:	31 83       	std	Z+1, r19	; 0x01
    5ca6:	42 83       	std	Z+2, r20	; 0x02
    5ca8:	53 83       	std	Z+3, r21	; 0x03
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    5caa:	c0 90 ec 23 	lds	r12, 0x23EC
    5cae:	d0 90 ed 23 	lds	r13, 0x23ED
    5cb2:	e0 90 04 24 	lds	r14, 0x2404
    5cb6:	f0 90 05 24 	lds	r15, 0x2405
    5cba:	00 91 06 24 	lds	r16, 0x2406
    5cbe:	10 91 07 24 	lds	r17, 0x2407
    5cc2:	80 91 08 24 	lds	r24, 0x2408
    5cc6:	90 91 09 24 	lds	r25, 0x2409
    5cca:	a0 91 0a 24 	lds	r26, 0x240A
    5cce:	b0 91 0b 24 	lds	r27, 0x240B
    5cd2:	bc 01       	movw	r22, r24
    5cd4:	cd 01       	movw	r24, r26
    5cd6:	0e 94 ac 55 	call	0xab58	; 0xab58 <cos>
    5cda:	dc 01       	movw	r26, r24
    5cdc:	cb 01       	movw	r24, r22
    5cde:	20 91 0c 24 	lds	r18, 0x240C
    5ce2:	30 91 0d 24 	lds	r19, 0x240D
    5ce6:	40 91 0e 24 	lds	r20, 0x240E
    5cea:	50 91 0f 24 	lds	r21, 0x240F
    5cee:	bc 01       	movw	r22, r24
    5cf0:	cd 01       	movw	r24, r26
    5cf2:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    5cf6:	dc 01       	movw	r26, r24
    5cf8:	cb 01       	movw	r24, r22
    5cfa:	9c 01       	movw	r18, r24
    5cfc:	ad 01       	movw	r20, r26
    5cfe:	c8 01       	movw	r24, r16
    5d00:	b7 01       	movw	r22, r14
    5d02:	0e 94 09 55 	call	0xaa12	; 0xaa12 <__addsf3>
    5d06:	dc 01       	movw	r26, r24
    5d08:	cb 01       	movw	r24, r22
    5d0a:	9c 01       	movw	r18, r24
    5d0c:	ad 01       	movw	r20, r26
    5d0e:	c6 01       	movw	r24, r12
    5d10:	88 0f       	add	r24, r24
    5d12:	99 1f       	adc	r25, r25
    5d14:	88 0f       	add	r24, r24
    5d16:	99 1f       	adc	r25, r25
    5d18:	fc 01       	movw	r30, r24
    5d1a:	e0 51       	subi	r30, 0x10	; 16
    5d1c:	fc 4d       	sbci	r31, 0xDC	; 220
    5d1e:	20 83       	st	Z, r18
    5d20:	31 83       	std	Z+1, r19	; 0x01
    5d22:	42 83       	std	Z+2, r20	; 0x02
    5d24:	53 83       	std	Z+3, r21	; 0x03
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    5d26:	00 91 ee 23 	lds	r16, 0x23EE
    5d2a:	10 91 ef 23 	lds	r17, 0x23EF
    5d2e:	80 91 ee 23 	lds	r24, 0x23EE
    5d32:	90 91 ef 23 	lds	r25, 0x23EF
    5d36:	88 0f       	add	r24, r24
    5d38:	99 1f       	adc	r25, r25
    5d3a:	88 0f       	add	r24, r24
    5d3c:	99 1f       	adc	r25, r25
    5d3e:	fc 01       	movw	r30, r24
    5d40:	e0 51       	subi	r30, 0x10	; 16
    5d42:	fc 4d       	sbci	r31, 0xDC	; 220
    5d44:	80 81       	ld	r24, Z
    5d46:	91 81       	ldd	r25, Z+1	; 0x01
    5d48:	a2 81       	ldd	r26, Z+2	; 0x02
    5d4a:	b3 81       	ldd	r27, Z+3	; 0x03
    5d4c:	20 91 18 24 	lds	r18, 0x2418
    5d50:	30 91 19 24 	lds	r19, 0x2419
    5d54:	40 91 1a 24 	lds	r20, 0x241A
    5d58:	50 91 1b 24 	lds	r21, 0x241B
    5d5c:	bc 01       	movw	r22, r24
    5d5e:	cd 01       	movw	r24, r26
    5d60:	0e 94 09 55 	call	0xaa12	; 0xaa12 <__addsf3>
    5d64:	dc 01       	movw	r26, r24
    5d66:	cb 01       	movw	r24, r22
    5d68:	9c 01       	movw	r18, r24
    5d6a:	ad 01       	movw	r20, r26
    5d6c:	c8 01       	movw	r24, r16
    5d6e:	88 0f       	add	r24, r24
    5d70:	99 1f       	adc	r25, r25
    5d72:	88 0f       	add	r24, r24
    5d74:	99 1f       	adc	r25, r25
    5d76:	fc 01       	movw	r30, r24
    5d78:	e0 51       	subi	r30, 0x10	; 16
    5d7a:	fc 4d       	sbci	r31, 0xDC	; 220
    5d7c:	20 83       	st	Z, r18
    5d7e:	31 83       	std	Z+1, r19	; 0x01
    5d80:	42 83       	std	Z+2, r20	; 0x02
    5d82:	53 83       	std	Z+3, r21	; 0x03
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    5d84:	80 91 f0 23 	lds	r24, 0x23F0
    5d88:	90 91 f1 23 	lds	r25, 0x23F1
    5d8c:	a0 91 f2 23 	lds	r26, 0x23F2
    5d90:	b0 91 f3 23 	lds	r27, 0x23F3
    5d94:	20 91 f4 23 	lds	r18, 0x23F4
    5d98:	30 91 f5 23 	lds	r19, 0x23F5
    5d9c:	40 91 f6 23 	lds	r20, 0x23F6
    5da0:	50 91 f7 23 	lds	r21, 0x23F7
    5da4:	e0 90 f8 23 	lds	r14, 0x23F8
    5da8:	f0 90 f9 23 	lds	r15, 0x23F9
    5dac:	00 91 fa 23 	lds	r16, 0x23FA
    5db0:	10 91 fb 23 	lds	r17, 0x23FB
    5db4:	a0 90 10 24 	lds	r10, 0x2410
    5db8:	b0 90 11 24 	lds	r11, 0x2411
    5dbc:	c0 90 12 24 	lds	r12, 0x2412
    5dc0:	d0 90 13 24 	lds	r13, 0x2413
    5dc4:	e0 91 e8 23 	lds	r30, 0x23E8
    5dc8:	f0 91 e9 23 	lds	r31, 0x23E9
    5dcc:	bc 01       	movw	r22, r24
    5dce:	cd 01       	movw	r24, r26
    5dd0:	4f 01       	movw	r8, r30
    5dd2:	0e 94 7e 25 	call	0x4afc	; 0x4afc <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    5dd6:	20 91 e6 23 	lds	r18, 0x23E6
    5dda:	30 91 e7 23 	lds	r19, 0x23E7
    5dde:	80 91 e4 23 	lds	r24, 0x23E4
    5de2:	90 91 e5 23 	lds	r25, 0x23E5
    5de6:	82 17       	cp	r24, r18
    5de8:	93 07       	cpc	r25, r19
    5dea:	0c f0       	brlt	.+2      	; 0x5dee <mc_arc_continue+0x26c>
    5dec:	f0 ce       	rjmp	.-544    	; 0x5bce <mc_arc_continue+0x4c>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    5dee:	10 92 e3 23 	sts	0x23E3, r1
	return (TG_OK);
    5df2:	19 82       	std	Y+1, r1	; 0x01
    5df4:	1a 82       	std	Y+2, r1	; 0x02
    5df6:	89 81       	ldd	r24, Y+1	; 0x01
    5df8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5dfa:	0f 90       	pop	r0
    5dfc:	0f 90       	pop	r0
    5dfe:	cf 91       	pop	r28
    5e00:	df 91       	pop	r29
    5e02:	1f 91       	pop	r17
    5e04:	0f 91       	pop	r16
    5e06:	ff 90       	pop	r15
    5e08:	ef 90       	pop	r14
    5e0a:	df 90       	pop	r13
    5e0c:	cf 90       	pop	r12
    5e0e:	bf 90       	pop	r11
    5e10:	af 90       	pop	r10
    5e12:	9f 90       	pop	r9
    5e14:	8f 90       	pop	r8
    5e16:	08 95       	ret

00005e18 <mc_dwell>:
 *
 * NOTE: It's not necessary to set the target as this is set correctly in the Gcode. 
 */

int mc_dwell(double seconds) 
{
    5e18:	df 93       	push	r29
    5e1a:	cf 93       	push	r28
    5e1c:	00 d0       	rcall	.+0      	; 0x5e1e <mc_dwell+0x6>
    5e1e:	0f 92       	push	r0
    5e20:	cd b7       	in	r28, 0x3d	; 61
    5e22:	de b7       	in	r29, 0x3e	; 62
    5e24:	69 83       	std	Y+1, r22	; 0x01
    5e26:	7a 83       	std	Y+2, r23	; 0x02
    5e28:	8b 83       	std	Y+3, r24	; 0x03
    5e2a:	9c 83       	std	Y+4, r25	; 0x04
	mc.steps[X] = 0;
    5e2c:	10 92 6f 21 	sts	0x216F, r1
    5e30:	10 92 70 21 	sts	0x2170, r1
    5e34:	10 92 71 21 	sts	0x2171, r1
    5e38:	10 92 72 21 	sts	0x2172, r1
	mc.steps[Y] = 0;
    5e3c:	10 92 73 21 	sts	0x2173, r1
    5e40:	10 92 74 21 	sts	0x2174, r1
    5e44:	10 92 75 21 	sts	0x2175, r1
    5e48:	10 92 76 21 	sts	0x2176, r1
	mc.steps[Z] = 0;
    5e4c:	10 92 77 21 	sts	0x2177, r1
    5e50:	10 92 78 21 	sts	0x2178, r1
    5e54:	10 92 79 21 	sts	0x2179, r1
    5e58:	10 92 7a 21 	sts	0x217A, r1
	mc.mm_of_travel = 0;	// not actually used, but makes debug make more sense
    5e5c:	80 e0       	ldi	r24, 0x00	; 0
    5e5e:	90 e0       	ldi	r25, 0x00	; 0
    5e60:	a0 e0       	ldi	r26, 0x00	; 0
    5e62:	b0 e0       	ldi	r27, 0x00	; 0
    5e64:	80 93 7f 21 	sts	0x217F, r24
    5e68:	90 93 80 21 	sts	0x2180, r25
    5e6c:	a0 93 81 21 	sts	0x2181, r26
    5e70:	b0 93 82 21 	sts	0x2182, r27
	mc.microseconds = trunc(seconds*1000000);
    5e74:	69 81       	ldd	r22, Y+1	; 0x01
    5e76:	7a 81       	ldd	r23, Y+2	; 0x02
    5e78:	8b 81       	ldd	r24, Y+3	; 0x03
    5e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    5e7c:	20 e0       	ldi	r18, 0x00	; 0
    5e7e:	34 e2       	ldi	r19, 0x24	; 36
    5e80:	44 e7       	ldi	r20, 0x74	; 116
    5e82:	59 e4       	ldi	r21, 0x49	; 73
    5e84:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    5e88:	dc 01       	movw	r26, r24
    5e8a:	cb 01       	movw	r24, r22
    5e8c:	bc 01       	movw	r22, r24
    5e8e:	cd 01       	movw	r24, r26
    5e90:	0e 94 18 59 	call	0xb230	; 0xb230 <trunc>
    5e94:	dc 01       	movw	r26, r24
    5e96:	cb 01       	movw	r24, r22
    5e98:	bc 01       	movw	r22, r24
    5e9a:	cd 01       	movw	r24, r26
    5e9c:	0e 94 1c 56 	call	0xac38	; 0xac38 <__fixunssfsi>
    5ea0:	dc 01       	movw	r26, r24
    5ea2:	cb 01       	movw	r24, r22
    5ea4:	80 93 7b 21 	sts	0x217B, r24
    5ea8:	90 93 7c 21 	sts	0x217C, r25
    5eac:	a0 93 7d 21 	sts	0x217D, r26
    5eb0:	b0 93 7e 21 	sts	0x217E, r27
	mc.line_state = MC_STATE_NEW;
    5eb4:	81 e0       	ldi	r24, 0x01	; 1
    5eb6:	80 93 56 21 	sts	0x2156, r24
	return (mc_line_continue());
    5eba:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <mc_line_continue>
}
    5ebe:	24 96       	adiw	r28, 0x04	; 4
    5ec0:	cd bf       	out	0x3d, r28	; 61
    5ec2:	de bf       	out	0x3e, r29	; 62
    5ec4:	cf 91       	pop	r28
    5ec6:	df 91       	pop	r29
    5ec8:	08 95       	ret

00005eca <mc_go_home>:
/* 
 * mc_go_home()  (st_go_home is NOT IMPLEMENTED)
 */

int mc_go_home()
{
    5eca:	df 93       	push	r29
    5ecc:	cf 93       	push	r28
    5ece:	cd b7       	in	r28, 0x3d	; 61
    5ed0:	de b7       	in	r29, 0x3e	; 62
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    5ed2:	87 e5       	ldi	r24, 0x57	; 87
    5ed4:	91 e2       	ldi	r25, 0x21	; 33
    5ed6:	60 e0       	ldi	r22, 0x00	; 0
    5ed8:	70 e0       	ldi	r23, 0x00	; 0
    5eda:	4c e0       	ldi	r20, 0x0C	; 12
    5edc:	50 e0       	ldi	r21, 0x00	; 0
    5ede:	0e 94 4b 5c 	call	0xb896	; 0xb896 <memset>
	return (TG_OK);
    5ee2:	80 e0       	ldi	r24, 0x00	; 0
    5ee4:	90 e0       	ldi	r25, 0x00	; 0
}
    5ee6:	cf 91       	pop	r28
    5ee8:	df 91       	pop	r29
    5eea:	08 95       	ret

00005eec <spindle_init>:
 *	These should have been initially set as A axis max/min limit inputs
 *	See config.h for settings
 */

void spindle_init()
{
    5eec:	df 93       	push	r29
    5eee:	cf 93       	push	r28
    5ef0:	cd b7       	in	r28, 0x3d	; 61
    5ef2:	de b7       	in	r29, 0x3e	; 62
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    5ef4:	e0 e6       	ldi	r30, 0x60	; 96
    5ef6:	f6 e0       	ldi	r31, 0x06	; 6
    5ef8:	80 e4       	ldi	r24, 0x40	; 64
    5efa:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    5efc:	e0 e6       	ldi	r30, 0x60	; 96
    5efe:	f6 e0       	ldi	r31, 0x06	; 6
    5f00:	80 e8       	ldi	r24, 0x80	; 128
    5f02:	81 83       	std	Z+1, r24	; 0x01
}
    5f04:	cf 91       	pop	r28
    5f06:	df 91       	pop	r29
    5f08:	08 95       	ret

00005f0a <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
    5f0a:	df 93       	push	r29
    5f0c:	cf 93       	push	r28
    5f0e:	00 d0       	rcall	.+0      	; 0x5f10 <spindle_run+0x6>
    5f10:	00 d0       	rcall	.+0      	; 0x5f12 <spindle_run+0x8>
    5f12:	cd b7       	in	r28, 0x3d	; 61
    5f14:	de b7       	in	r29, 0x3e	; 62
    5f16:	89 83       	std	Y+1, r24	; 0x01
    5f18:	9a 83       	std	Y+2, r25	; 0x02
    5f1a:	4b 83       	std	Y+3, r20	; 0x03
    5f1c:	5c 83       	std	Y+4, r21	; 0x04
    5f1e:	6d 83       	std	Y+5, r22	; 0x05
    5f20:	7e 83       	std	Y+6, r23	; 0x06
	if(direction >= 0) {
    5f22:	89 81       	ldd	r24, Y+1	; 0x01
    5f24:	9a 81       	ldd	r25, Y+2	; 0x02
    5f26:	99 23       	and	r25, r25
    5f28:	2c f0       	brlt	.+10     	; 0x5f34 <spindle_run+0x2a>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    5f2a:	e0 e6       	ldi	r30, 0x60	; 96
    5f2c:	f6 e0       	ldi	r31, 0x06	; 6
    5f2e:	80 e8       	ldi	r24, 0x80	; 128
    5f30:	85 83       	std	Z+5, r24	; 0x05
    5f32:	04 c0       	rjmp	.+8      	; 0x5f3c <spindle_run+0x32>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    5f34:	e0 e6       	ldi	r30, 0x60	; 96
    5f36:	f6 e0       	ldi	r31, 0x06	; 6
    5f38:	80 e8       	ldi	r24, 0x80	; 128
    5f3a:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    5f3c:	e0 e6       	ldi	r30, 0x60	; 96
    5f3e:	f6 e0       	ldi	r31, 0x06	; 6
    5f40:	80 e4       	ldi	r24, 0x40	; 64
    5f42:	85 83       	std	Z+5, r24	; 0x05
}
    5f44:	26 96       	adiw	r28, 0x06	; 6
    5f46:	cd bf       	out	0x3d, r28	; 61
    5f48:	de bf       	out	0x3e, r29	; 62
    5f4a:	cf 91       	pop	r28
    5f4c:	df 91       	pop	r29
    5f4e:	08 95       	ret

00005f50 <spindle_stop>:

void spindle_stop()
{
    5f50:	df 93       	push	r29
    5f52:	cf 93       	push	r28
    5f54:	cd b7       	in	r28, 0x3d	; 61
    5f56:	de b7       	in	r29, 0x3e	; 62
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    5f58:	e0 e6       	ldi	r30, 0x60	; 96
    5f5a:	f6 e0       	ldi	r31, 0x06	; 6
    5f5c:	80 e4       	ldi	r24, 0x40	; 64
    5f5e:	86 83       	std	Z+6, r24	; 0x06
}
    5f60:	cf 91       	pop	r28
    5f62:	df 91       	pop	r29
    5f64:	08 95       	ret

00005f66 <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    5f66:	df 93       	push	r29
    5f68:	cf 93       	push	r28
    5f6a:	0f 92       	push	r0
    5f6c:	cd b7       	in	r28, 0x3d	; 61
    5f6e:	de b7       	in	r29, 0x3e	; 62
	ax.active_axes = 0;								// clear all active bits
    5f70:	10 92 30 23 	sts	0x2330, r1
	ax.exec_mutex = FALSE;
    5f74:	10 92 2f 23 	sts	0x232F, r1

	ax.a[X].port = &X_MOTOR_PORT;				// bind PORTs to structs
    5f78:	80 e0       	ldi	r24, 0x00	; 0
    5f7a:	96 e0       	ldi	r25, 0x06	; 6
    5f7c:	80 93 3f 23 	sts	0x233F, r24
    5f80:	90 93 40 23 	sts	0x2340, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    5f84:	80 ea       	ldi	r24, 0xA0	; 160
    5f86:	96 e0       	ldi	r25, 0x06	; 6
    5f88:	80 93 4f 23 	sts	0x234F, r24
    5f8c:	90 93 50 23 	sts	0x2350, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    5f90:	80 e8       	ldi	r24, 0x80	; 128
    5f92:	96 e0       	ldi	r25, 0x06	; 6
    5f94:	80 93 5f 23 	sts	0x235F, r24
    5f98:	90 93 60 23 	sts	0x2360, r25
	ax.a[A].port = &A_MOTOR_PORT;
    5f9c:	80 e6       	ldi	r24, 0x60	; 96
    5f9e:	96 e0       	ldi	r25, 0x06	; 6
    5fa0:	80 93 6f 23 	sts	0x236F, r24
    5fa4:	90 93 70 23 	sts	0x2370, r25

	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
    5fa8:	80 e0       	ldi	r24, 0x00	; 0
    5faa:	98 e0       	ldi	r25, 0x08	; 8
    5fac:	80 93 41 23 	sts	0x2341, r24
    5fb0:	90 93 42 23 	sts	0x2342, r25
	ax.a[Y].timer = &Y_TIMER;
    5fb4:	80 e0       	ldi	r24, 0x00	; 0
    5fb6:	99 e0       	ldi	r25, 0x09	; 9
    5fb8:	80 93 51 23 	sts	0x2351, r24
    5fbc:	90 93 52 23 	sts	0x2352, r25
	ax.a[Z].timer = &Z_TIMER;
    5fc0:	80 e0       	ldi	r24, 0x00	; 0
    5fc2:	9a e0       	ldi	r25, 0x0A	; 10
    5fc4:	80 93 61 23 	sts	0x2361, r24
    5fc8:	90 93 62 23 	sts	0x2362, r25
	ax.a[A].timer = &A_TIMER;
    5fcc:	80 e0       	ldi	r24, 0x00	; 0
    5fce:	9b e0       	ldi	r25, 0x0B	; 11
    5fd0:	80 93 71 23 	sts	0x2371, r24
    5fd4:	90 93 72 23 	sts	0x2372, r25

	for (uint8_t i=X; i<=A; i++) {
    5fd8:	19 82       	std	Y+1, r1	; 0x01
    5fda:	ad c0       	rjmp	.+346    	; 0x6136 <__stack+0x137>
		ax.a[i].polarity = cfg.a[i].polarity;
    5fdc:	89 81       	ldd	r24, Y+1	; 0x01
    5fde:	48 2f       	mov	r20, r24
    5fe0:	50 e0       	ldi	r21, 0x00	; 0
    5fe2:	89 81       	ldd	r24, Y+1	; 0x01
    5fe4:	28 2f       	mov	r18, r24
    5fe6:	30 e0       	ldi	r19, 0x00	; 0
    5fe8:	c9 01       	movw	r24, r18
    5fea:	88 0f       	add	r24, r24
    5fec:	99 1f       	adc	r25, r25
    5fee:	82 0f       	add	r24, r18
    5ff0:	93 1f       	adc	r25, r19
    5ff2:	88 0f       	add	r24, r24
    5ff4:	99 1f       	adc	r25, r25
    5ff6:	88 0f       	add	r24, r24
    5ff8:	99 1f       	adc	r25, r25
    5ffa:	88 0f       	add	r24, r24
    5ffc:	99 1f       	adc	r25, r25
    5ffe:	fc 01       	movw	r30, r24
    6000:	ed 57       	subi	r30, 0x7D	; 125
    6002:	fc 4d       	sbci	r31, 0xDC	; 220
    6004:	20 81       	ld	r18, Z
    6006:	ca 01       	movw	r24, r20
    6008:	82 95       	swap	r24
    600a:	92 95       	swap	r25
    600c:	90 7f       	andi	r25, 0xF0	; 240
    600e:	98 27       	eor	r25, r24
    6010:	80 7f       	andi	r24, 0xF0	; 240
    6012:	98 27       	eor	r25, r24
    6014:	fc 01       	movw	r30, r24
    6016:	e3 5c       	subi	r30, 0xC3	; 195
    6018:	fc 4d       	sbci	r31, 0xDC	; 220
    601a:	20 83       	st	Z, r18

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    601c:	89 81       	ldd	r24, Y+1	; 0x01
    601e:	88 2f       	mov	r24, r24
    6020:	90 e0       	ldi	r25, 0x00	; 0
    6022:	01 96       	adiw	r24, 0x01	; 1
    6024:	82 95       	swap	r24
    6026:	92 95       	swap	r25
    6028:	90 7f       	andi	r25, 0xF0	; 240
    602a:	98 27       	eor	r25, r24
    602c:	80 7f       	andi	r24, 0xF0	; 240
    602e:	98 27       	eor	r25, r24
    6030:	fc 01       	movw	r30, r24
    6032:	e1 5d       	subi	r30, 0xD1	; 209
    6034:	fc 4d       	sbci	r31, 0xDC	; 220
    6036:	01 90       	ld	r0, Z+
    6038:	f0 81       	ld	r31, Z
    603a:	e0 2d       	mov	r30, r0
    603c:	8f e3       	ldi	r24, 0x3F	; 63
    603e:	80 83       	st	Z, r24
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    6040:	89 81       	ldd	r24, Y+1	; 0x01
    6042:	88 2f       	mov	r24, r24
    6044:	90 e0       	ldi	r25, 0x00	; 0
    6046:	01 96       	adiw	r24, 0x01	; 1
    6048:	82 95       	swap	r24
    604a:	92 95       	swap	r25
    604c:	90 7f       	andi	r25, 0xF0	; 240
    604e:	98 27       	eor	r25, r24
    6050:	80 7f       	andi	r24, 0xF0	; 240
    6052:	98 27       	eor	r25, r24
    6054:	fc 01       	movw	r30, r24
    6056:	e1 5d       	subi	r30, 0xD1	; 209
    6058:	fc 4d       	sbci	r31, 0xDC	; 220
    605a:	01 90       	ld	r0, Z+
    605c:	f0 81       	ld	r31, Z
    605e:	e0 2d       	mov	r30, r0
    6060:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
    6062:	89 81       	ldd	r24, Y+1	; 0x01
    6064:	88 2f       	mov	r24, r24
    6066:	90 e0       	ldi	r25, 0x00	; 0
    6068:	01 96       	adiw	r24, 0x01	; 1
    606a:	82 95       	swap	r24
    606c:	92 95       	swap	r25
    606e:	90 7f       	andi	r25, 0xF0	; 240
    6070:	98 27       	eor	r25, r24
    6072:	80 7f       	andi	r24, 0xF0	; 240
    6074:	98 27       	eor	r25, r24
    6076:	fc 01       	movw	r30, r24
    6078:	e1 5d       	subi	r30, 0xD1	; 209
    607a:	fc 4d       	sbci	r31, 0xDC	; 220
    607c:	a0 81       	ld	r26, Z
    607e:	b1 81       	ldd	r27, Z+1	; 0x01
    6080:	89 81       	ldd	r24, Y+1	; 0x01
    6082:	88 2f       	mov	r24, r24
    6084:	90 e0       	ldi	r25, 0x00	; 0
    6086:	01 96       	adiw	r24, 0x01	; 1
    6088:	82 95       	swap	r24
    608a:	92 95       	swap	r25
    608c:	90 7f       	andi	r25, 0xF0	; 240
    608e:	98 27       	eor	r25, r24
    6090:	80 7f       	andi	r24, 0xF0	; 240
    6092:	98 27       	eor	r25, r24
    6094:	fc 01       	movw	r30, r24
    6096:	e1 5d       	subi	r30, 0xD1	; 209
    6098:	fc 4d       	sbci	r31, 0xDC	; 220
    609a:	01 90       	ld	r0, Z+
    609c:	f0 81       	ld	r31, Z
    609e:	e0 2d       	mov	r30, r0
    60a0:	84 81       	ldd	r24, Z+4	; 0x04
    60a2:	88 61       	ori	r24, 0x18	; 24
    60a4:	14 96       	adiw	r26, 0x04	; 4
    60a6:	8c 93       	st	X, r24
    60a8:	14 97       	sbiw	r26, 0x04	; 4
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    60aa:	89 81       	ldd	r24, Y+1	; 0x01
    60ac:	88 2f       	mov	r24, r24
    60ae:	90 e0       	ldi	r25, 0x00	; 0
    60b0:	01 96       	adiw	r24, 0x01	; 1
    60b2:	82 95       	swap	r24
    60b4:	92 95       	swap	r25
    60b6:	90 7f       	andi	r25, 0xF0	; 240
    60b8:	98 27       	eor	r25, r24
    60ba:	80 7f       	andi	r24, 0xF0	; 240
    60bc:	98 27       	eor	r25, r24
    60be:	fc 01       	movw	r30, r24
    60c0:	e1 5d       	subi	r30, 0xD1	; 209
    60c2:	fc 4d       	sbci	r31, 0xDC	; 220
    60c4:	01 90       	ld	r0, Z+
    60c6:	f0 81       	ld	r31, Z
    60c8:	e0 2d       	mov	r30, r0
    60ca:	84 e0       	ldi	r24, 0x04	; 4
    60cc:	85 83       	std	Z+5, r24	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    60ce:	89 81       	ldd	r24, Y+1	; 0x01
    60d0:	88 2f       	mov	r24, r24
    60d2:	90 e0       	ldi	r25, 0x00	; 0
    60d4:	82 95       	swap	r24
    60d6:	92 95       	swap	r25
    60d8:	90 7f       	andi	r25, 0xF0	; 240
    60da:	98 27       	eor	r25, r24
    60dc:	80 7f       	andi	r24, 0xF0	; 240
    60de:	98 27       	eor	r25, r24
    60e0:	fc 01       	movw	r30, r24
    60e2:	ef 5b       	subi	r30, 0xBF	; 191
    60e4:	fc 4d       	sbci	r31, 0xDC	; 220
    60e6:	01 90       	ld	r0, Z+
    60e8:	f0 81       	ld	r31, Z
    60ea:	e0 2d       	mov	r30, r0
    60ec:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    60ee:	89 81       	ldd	r24, Y+1	; 0x01
    60f0:	88 2f       	mov	r24, r24
    60f2:	90 e0       	ldi	r25, 0x00	; 0
    60f4:	82 95       	swap	r24
    60f6:	92 95       	swap	r25
    60f8:	90 7f       	andi	r25, 0xF0	; 240
    60fa:	98 27       	eor	r25, r24
    60fc:	80 7f       	andi	r24, 0xF0	; 240
    60fe:	98 27       	eor	r25, r24
    6100:	fc 01       	movw	r30, r24
    6102:	ef 5b       	subi	r30, 0xBF	; 191
    6104:	fc 4d       	sbci	r31, 0xDC	; 220
    6106:	01 90       	ld	r0, Z+
    6108:	f0 81       	ld	r31, Z
    610a:	e0 2d       	mov	r30, r0
    610c:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    610e:	89 81       	ldd	r24, Y+1	; 0x01
    6110:	88 2f       	mov	r24, r24
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	82 95       	swap	r24
    6116:	92 95       	swap	r25
    6118:	90 7f       	andi	r25, 0xF0	; 240
    611a:	98 27       	eor	r25, r24
    611c:	80 7f       	andi	r24, 0xF0	; 240
    611e:	98 27       	eor	r25, r24
    6120:	fc 01       	movw	r30, r24
    6122:	ef 5b       	subi	r30, 0xBF	; 191
    6124:	fc 4d       	sbci	r31, 0xDC	; 220
    6126:	01 90       	ld	r0, Z+
    6128:	f0 81       	ld	r31, Z
    612a:	e0 2d       	mov	r30, r0
    612c:	83 e0       	ldi	r24, 0x03	; 3
    612e:	86 83       	std	Z+6, r24	; 0x06
	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    6130:	89 81       	ldd	r24, Y+1	; 0x01
    6132:	8f 5f       	subi	r24, 0xFF	; 255
    6134:	89 83       	std	Y+1, r24	; 0x01
    6136:	89 81       	ldd	r24, Y+1	; 0x01
    6138:	84 30       	cpi	r24, 0x04	; 4
    613a:	08 f4       	brcc	.+2      	; 0x613e <__stack+0x13f>
    613c:	4f cf       	rjmp	.-354    	; 0x5fdc <st_init+0x76>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    613e:	0f 90       	pop	r0
    6140:	cf 91       	pop	r28
    6142:	df 91       	pop	r29
    6144:	08 95       	ret

00006146 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    6146:	1f 92       	push	r1
    6148:	0f 92       	push	r0
    614a:	0f b6       	in	r0, 0x3f	; 63
    614c:	0f 92       	push	r0
    614e:	00 90 3b 00 	lds	r0, 0x003B
    6152:	0f 92       	push	r0
    6154:	11 24       	eor	r1, r1
    6156:	2f 93       	push	r18
    6158:	3f 93       	push	r19
    615a:	4f 93       	push	r20
    615c:	5f 93       	push	r21
    615e:	6f 93       	push	r22
    6160:	7f 93       	push	r23
    6162:	8f 93       	push	r24
    6164:	9f 93       	push	r25
    6166:	af 93       	push	r26
    6168:	bf 93       	push	r27
    616a:	ef 93       	push	r30
    616c:	ff 93       	push	r31
    616e:	df 93       	push	r29
    6170:	cf 93       	push	r28
    6172:	cd b7       	in	r28, 0x3d	; 61
    6174:	de b7       	in	r29, 0x3e	; 62
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    6176:	80 91 3b 23 	lds	r24, 0x233B
    617a:	90 91 3c 23 	lds	r25, 0x233C
    617e:	01 97       	sbiw	r24, 0x01	; 1
    6180:	80 93 3b 23 	sts	0x233B, r24
    6184:	90 93 3c 23 	sts	0x233C, r25
    6188:	80 91 3b 23 	lds	r24, 0x233B
    618c:	90 91 3c 23 	lds	r25, 0x233C
    6190:	00 97       	sbiw	r24, 0x00	; 0
    6192:	09 f0       	breq	.+2      	; 0x6196 <__vector_14+0x50>
    6194:	45 c0       	rjmp	.+138    	; 0x6220 <__vector_14+0xda>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    6196:	80 91 3e 23 	lds	r24, 0x233E
    619a:	88 23       	and	r24, r24
    619c:	21 f4       	brne	.+8      	; 0x61a6 <__vector_14+0x60>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    619e:	e0 e0       	ldi	r30, 0x00	; 0
    61a0:	f6 e0       	ldi	r31, 0x06	; 6
    61a2:	81 e0       	ldi	r24, 0x01	; 1
    61a4:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    61a6:	80 91 33 23 	lds	r24, 0x2333
    61aa:	90 91 34 23 	lds	r25, 0x2334
    61ae:	a0 91 35 23 	lds	r26, 0x2335
    61b2:	b0 91 36 23 	lds	r27, 0x2336
    61b6:	01 97       	sbiw	r24, 0x01	; 1
    61b8:	a1 09       	sbc	r26, r1
    61ba:	b1 09       	sbc	r27, r1
    61bc:	80 93 33 23 	sts	0x2333, r24
    61c0:	90 93 34 23 	sts	0x2334, r25
    61c4:	a0 93 35 23 	sts	0x2335, r26
    61c8:	b0 93 36 23 	sts	0x2336, r27
    61cc:	80 91 33 23 	lds	r24, 0x2333
    61d0:	90 91 34 23 	lds	r25, 0x2334
    61d4:	a0 91 35 23 	lds	r26, 0x2335
    61d8:	b0 91 36 23 	lds	r27, 0x2336
    61dc:	00 97       	sbiw	r24, 0x00	; 0
    61de:	a1 05       	cpc	r26, r1
    61e0:	b1 05       	cpc	r27, r1
    61e2:	91 f4       	brne	.+36     	; 0x6208 <__vector_14+0xc2>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    61e4:	e0 e0       	ldi	r30, 0x00	; 0
    61e6:	f8 e0       	ldi	r31, 0x08	; 8
    61e8:	10 82       	st	Z, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    61ea:	e0 e0       	ldi	r30, 0x00	; 0
    61ec:	f6 e0       	ldi	r31, 0x06	; 6
    61ee:	84 e0       	ldi	r24, 0x04	; 4
    61f0:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    61f2:	80 91 30 23 	lds	r24, 0x2330
    61f6:	87 7f       	andi	r24, 0xF7	; 247
    61f8:	80 93 30 23 	sts	0x2330, r24
		if (ax.active_axes == 0) {				// if all axes are done
    61fc:	80 91 30 23 	lds	r24, 0x2330
    6200:	88 23       	and	r24, r24
    6202:	11 f4       	brne	.+4      	; 0x6208 <__vector_14+0xc2>
			st_execute_move();					// ...run the next move
    6204:	0e 94 a3 32 	call	0x6546	; 0x6546 <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    6208:	80 91 39 23 	lds	r24, 0x2339
    620c:	90 91 3a 23 	lds	r25, 0x233A
    6210:	80 93 3b 23 	sts	0x233B, r24
    6214:	90 93 3c 23 	sts	0x233C, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    6218:	e0 e0       	ldi	r30, 0x00	; 0
    621a:	f6 e0       	ldi	r31, 0x06	; 6
    621c:	81 e0       	ldi	r24, 0x01	; 1
    621e:	86 83       	std	Z+6, r24	; 0x06
}
    6220:	cf 91       	pop	r28
    6222:	df 91       	pop	r29
    6224:	ff 91       	pop	r31
    6226:	ef 91       	pop	r30
    6228:	bf 91       	pop	r27
    622a:	af 91       	pop	r26
    622c:	9f 91       	pop	r25
    622e:	8f 91       	pop	r24
    6230:	7f 91       	pop	r23
    6232:	6f 91       	pop	r22
    6234:	5f 91       	pop	r21
    6236:	4f 91       	pop	r20
    6238:	3f 91       	pop	r19
    623a:	2f 91       	pop	r18
    623c:	0f 90       	pop	r0
    623e:	00 92 3b 00 	sts	0x003B, r0
    6242:	0f 90       	pop	r0
    6244:	0f be       	out	0x3f, r0	; 63
    6246:	0f 90       	pop	r0
    6248:	1f 90       	pop	r1
    624a:	18 95       	reti

0000624c <__vector_77>:

ISR(Y_TIMER_ISR_vect)
{
    624c:	1f 92       	push	r1
    624e:	0f 92       	push	r0
    6250:	0f b6       	in	r0, 0x3f	; 63
    6252:	0f 92       	push	r0
    6254:	00 90 3b 00 	lds	r0, 0x003B
    6258:	0f 92       	push	r0
    625a:	11 24       	eor	r1, r1
    625c:	2f 93       	push	r18
    625e:	3f 93       	push	r19
    6260:	4f 93       	push	r20
    6262:	5f 93       	push	r21
    6264:	6f 93       	push	r22
    6266:	7f 93       	push	r23
    6268:	8f 93       	push	r24
    626a:	9f 93       	push	r25
    626c:	af 93       	push	r26
    626e:	bf 93       	push	r27
    6270:	ef 93       	push	r30
    6272:	ff 93       	push	r31
    6274:	df 93       	push	r29
    6276:	cf 93       	push	r28
    6278:	cd b7       	in	r28, 0x3d	; 61
    627a:	de b7       	in	r29, 0x3e	; 62
	if (--ax.a[Y].postscale_counter != 0) {
    627c:	80 91 4b 23 	lds	r24, 0x234B
    6280:	90 91 4c 23 	lds	r25, 0x234C
    6284:	01 97       	sbiw	r24, 0x01	; 1
    6286:	80 93 4b 23 	sts	0x234B, r24
    628a:	90 93 4c 23 	sts	0x234C, r25
    628e:	80 91 4b 23 	lds	r24, 0x234B
    6292:	90 91 4c 23 	lds	r25, 0x234C
    6296:	00 97       	sbiw	r24, 0x00	; 0
    6298:	09 f0       	breq	.+2      	; 0x629c <__vector_77+0x50>
    629a:	41 c0       	rjmp	.+130    	; 0x631e <__vector_77+0xd2>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    629c:	e0 ea       	ldi	r30, 0xA0	; 160
    629e:	f6 e0       	ldi	r31, 0x06	; 6
    62a0:	81 e0       	ldi	r24, 0x01	; 1
    62a2:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    62a4:	80 91 43 23 	lds	r24, 0x2343
    62a8:	90 91 44 23 	lds	r25, 0x2344
    62ac:	a0 91 45 23 	lds	r26, 0x2345
    62b0:	b0 91 46 23 	lds	r27, 0x2346
    62b4:	01 97       	sbiw	r24, 0x01	; 1
    62b6:	a1 09       	sbc	r26, r1
    62b8:	b1 09       	sbc	r27, r1
    62ba:	80 93 43 23 	sts	0x2343, r24
    62be:	90 93 44 23 	sts	0x2344, r25
    62c2:	a0 93 45 23 	sts	0x2345, r26
    62c6:	b0 93 46 23 	sts	0x2346, r27
    62ca:	80 91 43 23 	lds	r24, 0x2343
    62ce:	90 91 44 23 	lds	r25, 0x2344
    62d2:	a0 91 45 23 	lds	r26, 0x2345
    62d6:	b0 91 46 23 	lds	r27, 0x2346
    62da:	00 97       	sbiw	r24, 0x00	; 0
    62dc:	a1 05       	cpc	r26, r1
    62de:	b1 05       	cpc	r27, r1
    62e0:	91 f4       	brne	.+36     	; 0x6306 <__vector_77+0xba>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    62e2:	e0 e0       	ldi	r30, 0x00	; 0
    62e4:	f9 e0       	ldi	r31, 0x09	; 9
    62e6:	10 82       	st	Z, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    62e8:	e0 ea       	ldi	r30, 0xA0	; 160
    62ea:	f6 e0       	ldi	r31, 0x06	; 6
    62ec:	84 e0       	ldi	r24, 0x04	; 4
    62ee:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    62f0:	80 91 30 23 	lds	r24, 0x2330
    62f4:	8b 7f       	andi	r24, 0xFB	; 251
    62f6:	80 93 30 23 	sts	0x2330, r24
		if (ax.active_axes == 0) {
    62fa:	80 91 30 23 	lds	r24, 0x2330
    62fe:	88 23       	and	r24, r24
    6300:	11 f4       	brne	.+4      	; 0x6306 <__vector_77+0xba>
			st_execute_move();
    6302:	0e 94 a3 32 	call	0x6546	; 0x6546 <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    6306:	80 91 49 23 	lds	r24, 0x2349
    630a:	90 91 4a 23 	lds	r25, 0x234A
    630e:	80 93 4b 23 	sts	0x234B, r24
    6312:	90 93 4c 23 	sts	0x234C, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    6316:	e0 ea       	ldi	r30, 0xA0	; 160
    6318:	f6 e0       	ldi	r31, 0x06	; 6
    631a:	81 e0       	ldi	r24, 0x01	; 1
    631c:	86 83       	std	Z+6, r24	; 0x06
}
    631e:	cf 91       	pop	r28
    6320:	df 91       	pop	r29
    6322:	ff 91       	pop	r31
    6324:	ef 91       	pop	r30
    6326:	bf 91       	pop	r27
    6328:	af 91       	pop	r26
    632a:	9f 91       	pop	r25
    632c:	8f 91       	pop	r24
    632e:	7f 91       	pop	r23
    6330:	6f 91       	pop	r22
    6332:	5f 91       	pop	r21
    6334:	4f 91       	pop	r20
    6336:	3f 91       	pop	r19
    6338:	2f 91       	pop	r18
    633a:	0f 90       	pop	r0
    633c:	00 92 3b 00 	sts	0x003B, r0
    6340:	0f 90       	pop	r0
    6342:	0f be       	out	0x3f, r0	; 63
    6344:	0f 90       	pop	r0
    6346:	1f 90       	pop	r1
    6348:	18 95       	reti

0000634a <__vector_47>:

ISR(Z_TIMER_ISR_vect)
{
    634a:	1f 92       	push	r1
    634c:	0f 92       	push	r0
    634e:	0f b6       	in	r0, 0x3f	; 63
    6350:	0f 92       	push	r0
    6352:	00 90 3b 00 	lds	r0, 0x003B
    6356:	0f 92       	push	r0
    6358:	11 24       	eor	r1, r1
    635a:	2f 93       	push	r18
    635c:	3f 93       	push	r19
    635e:	4f 93       	push	r20
    6360:	5f 93       	push	r21
    6362:	6f 93       	push	r22
    6364:	7f 93       	push	r23
    6366:	8f 93       	push	r24
    6368:	9f 93       	push	r25
    636a:	af 93       	push	r26
    636c:	bf 93       	push	r27
    636e:	ef 93       	push	r30
    6370:	ff 93       	push	r31
    6372:	df 93       	push	r29
    6374:	cf 93       	push	r28
    6376:	cd b7       	in	r28, 0x3d	; 61
    6378:	de b7       	in	r29, 0x3e	; 62
	if (--ax.a[Z].postscale_counter != 0) {
    637a:	80 91 5b 23 	lds	r24, 0x235B
    637e:	90 91 5c 23 	lds	r25, 0x235C
    6382:	01 97       	sbiw	r24, 0x01	; 1
    6384:	80 93 5b 23 	sts	0x235B, r24
    6388:	90 93 5c 23 	sts	0x235C, r25
    638c:	80 91 5b 23 	lds	r24, 0x235B
    6390:	90 91 5c 23 	lds	r25, 0x235C
    6394:	00 97       	sbiw	r24, 0x00	; 0
    6396:	09 f0       	breq	.+2      	; 0x639a <__vector_47+0x50>
    6398:	41 c0       	rjmp	.+130    	; 0x641c <__vector_47+0xd2>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    639a:	e0 e8       	ldi	r30, 0x80	; 128
    639c:	f6 e0       	ldi	r31, 0x06	; 6
    639e:	81 e0       	ldi	r24, 0x01	; 1
    63a0:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    63a2:	80 91 53 23 	lds	r24, 0x2353
    63a6:	90 91 54 23 	lds	r25, 0x2354
    63aa:	a0 91 55 23 	lds	r26, 0x2355
    63ae:	b0 91 56 23 	lds	r27, 0x2356
    63b2:	01 97       	sbiw	r24, 0x01	; 1
    63b4:	a1 09       	sbc	r26, r1
    63b6:	b1 09       	sbc	r27, r1
    63b8:	80 93 53 23 	sts	0x2353, r24
    63bc:	90 93 54 23 	sts	0x2354, r25
    63c0:	a0 93 55 23 	sts	0x2355, r26
    63c4:	b0 93 56 23 	sts	0x2356, r27
    63c8:	80 91 53 23 	lds	r24, 0x2353
    63cc:	90 91 54 23 	lds	r25, 0x2354
    63d0:	a0 91 55 23 	lds	r26, 0x2355
    63d4:	b0 91 56 23 	lds	r27, 0x2356
    63d8:	00 97       	sbiw	r24, 0x00	; 0
    63da:	a1 05       	cpc	r26, r1
    63dc:	b1 05       	cpc	r27, r1
    63de:	91 f4       	brne	.+36     	; 0x6404 <__vector_47+0xba>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    63e0:	e0 e0       	ldi	r30, 0x00	; 0
    63e2:	fa e0       	ldi	r31, 0x0A	; 10
    63e4:	10 82       	st	Z, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    63e6:	e0 e8       	ldi	r30, 0x80	; 128
    63e8:	f6 e0       	ldi	r31, 0x06	; 6
    63ea:	84 e0       	ldi	r24, 0x04	; 4
    63ec:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    63ee:	80 91 30 23 	lds	r24, 0x2330
    63f2:	8d 7f       	andi	r24, 0xFD	; 253
    63f4:	80 93 30 23 	sts	0x2330, r24
		if (ax.active_axes == 0) {
    63f8:	80 91 30 23 	lds	r24, 0x2330
    63fc:	88 23       	and	r24, r24
    63fe:	11 f4       	brne	.+4      	; 0x6404 <__vector_47+0xba>
			st_execute_move();
    6400:	0e 94 a3 32 	call	0x6546	; 0x6546 <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    6404:	80 91 59 23 	lds	r24, 0x2359
    6408:	90 91 5a 23 	lds	r25, 0x235A
    640c:	80 93 5b 23 	sts	0x235B, r24
    6410:	90 93 5c 23 	sts	0x235C, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    6414:	e0 e8       	ldi	r30, 0x80	; 128
    6416:	f6 e0       	ldi	r31, 0x06	; 6
    6418:	81 e0       	ldi	r24, 0x01	; 1
    641a:	86 83       	std	Z+6, r24	; 0x06
}
    641c:	cf 91       	pop	r28
    641e:	df 91       	pop	r29
    6420:	ff 91       	pop	r31
    6422:	ef 91       	pop	r30
    6424:	bf 91       	pop	r27
    6426:	af 91       	pop	r26
    6428:	9f 91       	pop	r25
    642a:	8f 91       	pop	r24
    642c:	7f 91       	pop	r23
    642e:	6f 91       	pop	r22
    6430:	5f 91       	pop	r21
    6432:	4f 91       	pop	r20
    6434:	3f 91       	pop	r19
    6436:	2f 91       	pop	r18
    6438:	0f 90       	pop	r0
    643a:	00 92 3b 00 	sts	0x003B, r0
    643e:	0f 90       	pop	r0
    6440:	0f be       	out	0x3f, r0	; 63
    6442:	0f 90       	pop	r0
    6444:	1f 90       	pop	r1
    6446:	18 95       	reti

00006448 <__vector_108>:

ISR(A_TIMER_ISR_vect)
{
    6448:	1f 92       	push	r1
    644a:	0f 92       	push	r0
    644c:	0f b6       	in	r0, 0x3f	; 63
    644e:	0f 92       	push	r0
    6450:	00 90 3b 00 	lds	r0, 0x003B
    6454:	0f 92       	push	r0
    6456:	11 24       	eor	r1, r1
    6458:	2f 93       	push	r18
    645a:	3f 93       	push	r19
    645c:	4f 93       	push	r20
    645e:	5f 93       	push	r21
    6460:	6f 93       	push	r22
    6462:	7f 93       	push	r23
    6464:	8f 93       	push	r24
    6466:	9f 93       	push	r25
    6468:	af 93       	push	r26
    646a:	bf 93       	push	r27
    646c:	ef 93       	push	r30
    646e:	ff 93       	push	r31
    6470:	df 93       	push	r29
    6472:	cf 93       	push	r28
    6474:	cd b7       	in	r28, 0x3d	; 61
    6476:	de b7       	in	r29, 0x3e	; 62
	if (--ax.a[A].postscale_counter != 0) {
    6478:	80 91 6b 23 	lds	r24, 0x236B
    647c:	90 91 6c 23 	lds	r25, 0x236C
    6480:	01 97       	sbiw	r24, 0x01	; 1
    6482:	80 93 6b 23 	sts	0x236B, r24
    6486:	90 93 6c 23 	sts	0x236C, r25
    648a:	80 91 6b 23 	lds	r24, 0x236B
    648e:	90 91 6c 23 	lds	r25, 0x236C
    6492:	00 97       	sbiw	r24, 0x00	; 0
    6494:	09 f0       	breq	.+2      	; 0x6498 <__vector_108+0x50>
    6496:	41 c0       	rjmp	.+130    	; 0x651a <__vector_108+0xd2>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    6498:	e0 e6       	ldi	r30, 0x60	; 96
    649a:	f6 e0       	ldi	r31, 0x06	; 6
    649c:	81 e0       	ldi	r24, 0x01	; 1
    649e:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    64a0:	80 91 63 23 	lds	r24, 0x2363
    64a4:	90 91 64 23 	lds	r25, 0x2364
    64a8:	a0 91 65 23 	lds	r26, 0x2365
    64ac:	b0 91 66 23 	lds	r27, 0x2366
    64b0:	01 97       	sbiw	r24, 0x01	; 1
    64b2:	a1 09       	sbc	r26, r1
    64b4:	b1 09       	sbc	r27, r1
    64b6:	80 93 63 23 	sts	0x2363, r24
    64ba:	90 93 64 23 	sts	0x2364, r25
    64be:	a0 93 65 23 	sts	0x2365, r26
    64c2:	b0 93 66 23 	sts	0x2366, r27
    64c6:	80 91 63 23 	lds	r24, 0x2363
    64ca:	90 91 64 23 	lds	r25, 0x2364
    64ce:	a0 91 65 23 	lds	r26, 0x2365
    64d2:	b0 91 66 23 	lds	r27, 0x2366
    64d6:	00 97       	sbiw	r24, 0x00	; 0
    64d8:	a1 05       	cpc	r26, r1
    64da:	b1 05       	cpc	r27, r1
    64dc:	91 f4       	brne	.+36     	; 0x6502 <__vector_108+0xba>
		A_TIMER.CTRLA = TC_CLK_OFF;
    64de:	e0 e0       	ldi	r30, 0x00	; 0
    64e0:	fb e0       	ldi	r31, 0x0B	; 11
    64e2:	10 82       	st	Z, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    64e4:	e0 e6       	ldi	r30, 0x60	; 96
    64e6:	f6 e0       	ldi	r31, 0x06	; 6
    64e8:	84 e0       	ldi	r24, 0x04	; 4
    64ea:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    64ec:	80 91 30 23 	lds	r24, 0x2330
    64f0:	8e 7f       	andi	r24, 0xFE	; 254
    64f2:	80 93 30 23 	sts	0x2330, r24
		if (ax.active_axes == 0) {
    64f6:	80 91 30 23 	lds	r24, 0x2330
    64fa:	88 23       	and	r24, r24
    64fc:	11 f4       	brne	.+4      	; 0x6502 <__vector_108+0xba>
			st_execute_move();
    64fe:	0e 94 a3 32 	call	0x6546	; 0x6546 <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    6502:	80 91 69 23 	lds	r24, 0x2369
    6506:	90 91 6a 23 	lds	r25, 0x236A
    650a:	80 93 6b 23 	sts	0x236B, r24
    650e:	90 93 6c 23 	sts	0x236C, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    6512:	e0 e6       	ldi	r30, 0x60	; 96
    6514:	f6 e0       	ldi	r31, 0x06	; 6
    6516:	81 e0       	ldi	r24, 0x01	; 1
    6518:	86 83       	std	Z+6, r24	; 0x06
}
    651a:	cf 91       	pop	r28
    651c:	df 91       	pop	r29
    651e:	ff 91       	pop	r31
    6520:	ef 91       	pop	r30
    6522:	bf 91       	pop	r27
    6524:	af 91       	pop	r26
    6526:	9f 91       	pop	r25
    6528:	8f 91       	pop	r24
    652a:	7f 91       	pop	r23
    652c:	6f 91       	pop	r22
    652e:	5f 91       	pop	r21
    6530:	4f 91       	pop	r20
    6532:	3f 91       	pop	r19
    6534:	2f 91       	pop	r18
    6536:	0f 90       	pop	r0
    6538:	00 92 3b 00 	sts	0x003B, r0
    653c:	0f 90       	pop	r0
    653e:	0f be       	out	0x3f, r0	; 63
    6540:	0f 90       	pop	r0
    6542:	1f 90       	pop	r1
    6544:	18 95       	reti

00006546 <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    6546:	df 93       	push	r29
    6548:	cf 93       	push	r28
    654a:	0f 92       	push	r0
    654c:	cd b7       	in	r28, 0x3d	; 61
    654e:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    6550:	80 91 2f 23 	lds	r24, 0x232F
    6554:	88 23       	and	r24, r24
    6556:	09 f0       	breq	.+2      	; 0x655a <st_execute_move+0x14>
    6558:	e0 c1       	rjmp	.+960    	; 0x691a <st_execute_move+0x3d4>
		return;
	}
	ax.exec_mutex = TRUE;
    655a:	81 e0       	ldi	r24, 0x01	; 1
    655c:	80 93 2f 23 	sts	0x232F, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    6560:	80 91 30 23 	lds	r24, 0x2330
    6564:	88 23       	and	r24, r24
    6566:	19 f0       	breq	.+6      	; 0x656e <st_execute_move+0x28>
		ax.exec_mutex = FALSE;	
    6568:	10 92 2f 23 	sts	0x232F, r1
    656c:	d6 c1       	rjmp	.+940    	; 0x691a <st_execute_move+0x3d4>
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    656e:	0e 94 57 3f 	call	0x7eae	; 0x7eae <mv_dequeue_move_buffer>
    6572:	80 93 31 23 	sts	0x2331, r24
    6576:	90 93 32 23 	sts	0x2332, r25
    657a:	80 91 31 23 	lds	r24, 0x2331
    657e:	90 91 32 23 	lds	r25, 0x2332
    6582:	00 97       	sbiw	r24, 0x00	; 0
    6584:	19 f4       	brne	.+6      	; 0x658c <st_execute_move+0x46>
		ax.exec_mutex = FALSE;
    6586:	10 92 2f 23 	sts	0x232F, r1
    658a:	c7 c1       	rjmp	.+910    	; 0x691a <st_execute_move+0x3d4>
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    658c:	19 82       	std	Y+1, r1	; 0x01
    658e:	78 c1       	rjmp	.+752    	; 0x6880 <st_execute_move+0x33a>
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    6590:	89 81       	ldd	r24, Y+1	; 0x01
    6592:	88 2f       	mov	r24, r24
    6594:	90 e0       	ldi	r25, 0x00	; 0
    6596:	82 95       	swap	r24
    6598:	92 95       	swap	r25
    659a:	90 7f       	andi	r25, 0xF0	; 240
    659c:	98 27       	eor	r25, r24
    659e:	80 7f       	andi	r24, 0xF0	; 240
    65a0:	98 27       	eor	r25, r24
    65a2:	fc 01       	movw	r30, r24
    65a4:	ef 5b       	subi	r30, 0xBF	; 191
    65a6:	fc 4d       	sbci	r31, 0xDC	; 220
    65a8:	01 90       	ld	r0, Z+
    65aa:	f0 81       	ld	r31, Z
    65ac:	e0 2d       	mov	r30, r0
    65ae:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    65b0:	40 91 31 23 	lds	r20, 0x2331
    65b4:	50 91 32 23 	lds	r21, 0x2332
    65b8:	89 81       	ldd	r24, Y+1	; 0x01
    65ba:	88 2f       	mov	r24, r24
    65bc:	90 e0       	ldi	r25, 0x00	; 0
    65be:	88 0f       	add	r24, r24
    65c0:	99 1f       	adc	r25, r25
    65c2:	9c 01       	movw	r18, r24
    65c4:	22 0f       	add	r18, r18
    65c6:	33 1f       	adc	r19, r19
    65c8:	22 0f       	add	r18, r18
    65ca:	33 1f       	adc	r19, r19
    65cc:	82 0f       	add	r24, r18
    65ce:	93 1f       	adc	r25, r19
    65d0:	fa 01       	movw	r30, r20
    65d2:	e8 0f       	add	r30, r24
    65d4:	f9 1f       	adc	r31, r25
    65d6:	80 81       	ld	r24, Z
    65d8:	91 81       	ldd	r25, Z+1	; 0x01
    65da:	a2 81       	ldd	r26, Z+2	; 0x02
    65dc:	b3 81       	ldd	r27, Z+3	; 0x03
    65de:	00 97       	sbiw	r24, 0x00	; 0
    65e0:	a1 05       	cpc	r26, r1
    65e2:	b1 05       	cpc	r27, r1
    65e4:	09 f4       	brne	.+2      	; 0x65e8 <st_execute_move+0xa2>
    65e6:	49 c1       	rjmp	.+658    	; 0x687a <st_execute_move+0x334>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    65e8:	89 81       	ldd	r24, Y+1	; 0x01
    65ea:	68 2f       	mov	r22, r24
    65ec:	70 e0       	ldi	r23, 0x00	; 0
    65ee:	40 91 31 23 	lds	r20, 0x2331
    65f2:	50 91 32 23 	lds	r21, 0x2332
    65f6:	89 81       	ldd	r24, Y+1	; 0x01
    65f8:	88 2f       	mov	r24, r24
    65fa:	90 e0       	ldi	r25, 0x00	; 0
    65fc:	88 0f       	add	r24, r24
    65fe:	99 1f       	adc	r25, r25
    6600:	9c 01       	movw	r18, r24
    6602:	22 0f       	add	r18, r18
    6604:	33 1f       	adc	r19, r19
    6606:	22 0f       	add	r18, r18
    6608:	33 1f       	adc	r19, r19
    660a:	82 0f       	add	r24, r18
    660c:	93 1f       	adc	r25, r19
    660e:	84 0f       	add	r24, r20
    6610:	95 1f       	adc	r25, r21
    6612:	fc 01       	movw	r30, r24
    6614:	39 96       	adiw	r30, 0x09	; 9
    6616:	20 81       	ld	r18, Z
    6618:	cb 01       	movw	r24, r22
    661a:	82 95       	swap	r24
    661c:	92 95       	swap	r25
    661e:	90 7f       	andi	r25, 0xF0	; 240
    6620:	98 27       	eor	r25, r24
    6622:	80 7f       	andi	r24, 0xF0	; 240
    6624:	98 27       	eor	r25, r24
    6626:	fc 01       	movw	r30, r24
    6628:	e2 5c       	subi	r30, 0xC2	; 194
    662a:	fc 4d       	sbci	r31, 0xDC	; 220
    662c:	20 83       	st	Z, r18

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    662e:	40 91 31 23 	lds	r20, 0x2331
    6632:	50 91 32 23 	lds	r21, 0x2332
    6636:	89 81       	ldd	r24, Y+1	; 0x01
    6638:	88 2f       	mov	r24, r24
    663a:	90 e0       	ldi	r25, 0x00	; 0
    663c:	88 0f       	add	r24, r24
    663e:	99 1f       	adc	r25, r25
    6640:	9c 01       	movw	r18, r24
    6642:	22 0f       	add	r18, r18
    6644:	33 1f       	adc	r19, r19
    6646:	22 0f       	add	r18, r18
    6648:	33 1f       	adc	r19, r19
    664a:	82 0f       	add	r24, r18
    664c:	93 1f       	adc	r25, r19
    664e:	84 0f       	add	r24, r20
    6650:	95 1f       	adc	r25, r21
    6652:	fc 01       	movw	r30, r24
    6654:	38 96       	adiw	r30, 0x08	; 8
    6656:	20 81       	ld	r18, Z
    6658:	89 81       	ldd	r24, Y+1	; 0x01
    665a:	88 2f       	mov	r24, r24
    665c:	90 e0       	ldi	r25, 0x00	; 0
    665e:	82 95       	swap	r24
    6660:	92 95       	swap	r25
    6662:	90 7f       	andi	r25, 0xF0	; 240
    6664:	98 27       	eor	r25, r24
    6666:	80 7f       	andi	r24, 0xF0	; 240
    6668:	98 27       	eor	r25, r24
    666a:	fc 01       	movw	r30, r24
    666c:	e3 5c       	subi	r30, 0xC3	; 195
    666e:	fc 4d       	sbci	r31, 0xDC	; 220
    6670:	80 81       	ld	r24, Z
    6672:	28 17       	cp	r18, r24
    6674:	99 f0       	breq	.+38     	; 0x669c <st_execute_move+0x156>
    6676:	89 81       	ldd	r24, Y+1	; 0x01
    6678:	88 2f       	mov	r24, r24
    667a:	90 e0       	ldi	r25, 0x00	; 0
    667c:	01 96       	adiw	r24, 0x01	; 1
    667e:	82 95       	swap	r24
    6680:	92 95       	swap	r25
    6682:	90 7f       	andi	r25, 0xF0	; 240
    6684:	98 27       	eor	r25, r24
    6686:	80 7f       	andi	r24, 0xF0	; 240
    6688:	98 27       	eor	r25, r24
    668a:	fc 01       	movw	r30, r24
    668c:	e1 5d       	subi	r30, 0xD1	; 209
    668e:	fc 4d       	sbci	r31, 0xDC	; 220
    6690:	01 90       	ld	r0, Z+
    6692:	f0 81       	ld	r31, Z
    6694:	e0 2d       	mov	r30, r0
    6696:	82 e0       	ldi	r24, 0x02	; 2
    6698:	85 83       	std	Z+5, r24	; 0x05
    669a:	12 c0       	rjmp	.+36     	; 0x66c0 <st_execute_move+0x17a>
    669c:	89 81       	ldd	r24, Y+1	; 0x01
    669e:	88 2f       	mov	r24, r24
    66a0:	90 e0       	ldi	r25, 0x00	; 0
    66a2:	01 96       	adiw	r24, 0x01	; 1
    66a4:	82 95       	swap	r24
    66a6:	92 95       	swap	r25
    66a8:	90 7f       	andi	r25, 0xF0	; 240
    66aa:	98 27       	eor	r25, r24
    66ac:	80 7f       	andi	r24, 0xF0	; 240
    66ae:	98 27       	eor	r25, r24
    66b0:	fc 01       	movw	r30, r24
    66b2:	e1 5d       	subi	r30, 0xD1	; 209
    66b4:	fc 4d       	sbci	r31, 0xDC	; 220
    66b6:	01 90       	ld	r0, Z+
    66b8:	f0 81       	ld	r31, Z
    66ba:	e0 2d       	mov	r30, r0
    66bc:	82 e0       	ldi	r24, 0x02	; 2
    66be:	86 83       	std	Z+6, r24	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    66c0:	89 81       	ldd	r24, Y+1	; 0x01
    66c2:	68 2f       	mov	r22, r24
    66c4:	70 e0       	ldi	r23, 0x00	; 0
    66c6:	40 91 31 23 	lds	r20, 0x2331
    66ca:	50 91 32 23 	lds	r21, 0x2332
    66ce:	89 81       	ldd	r24, Y+1	; 0x01
    66d0:	88 2f       	mov	r24, r24
    66d2:	90 e0       	ldi	r25, 0x00	; 0
    66d4:	88 0f       	add	r24, r24
    66d6:	99 1f       	adc	r25, r25
    66d8:	9c 01       	movw	r18, r24
    66da:	22 0f       	add	r18, r18
    66dc:	33 1f       	adc	r19, r19
    66de:	22 0f       	add	r18, r18
    66e0:	33 1f       	adc	r19, r19
    66e2:	82 0f       	add	r24, r18
    66e4:	93 1f       	adc	r25, r19
    66e6:	fa 01       	movw	r30, r20
    66e8:	e8 0f       	add	r30, r24
    66ea:	f9 1f       	adc	r31, r25
    66ec:	80 81       	ld	r24, Z
    66ee:	91 81       	ldd	r25, Z+1	; 0x01
    66f0:	a2 81       	ldd	r26, Z+2	; 0x02
    66f2:	b3 81       	ldd	r27, Z+3	; 0x03
    66f4:	9c 01       	movw	r18, r24
    66f6:	ad 01       	movw	r20, r26
    66f8:	cb 01       	movw	r24, r22
    66fa:	88 0f       	add	r24, r24
    66fc:	99 1f       	adc	r25, r25
    66fe:	88 0f       	add	r24, r24
    6700:	99 1f       	adc	r25, r25
    6702:	01 96       	adiw	r24, 0x01	; 1
    6704:	88 0f       	add	r24, r24
    6706:	99 1f       	adc	r25, r25
    6708:	88 0f       	add	r24, r24
    670a:	99 1f       	adc	r25, r25
    670c:	fc 01       	movw	r30, r24
    670e:	e1 5d       	subi	r30, 0xD1	; 209
    6710:	fc 4d       	sbci	r31, 0xDC	; 220
    6712:	20 83       	st	Z, r18
    6714:	31 83       	std	Z+1, r19	; 0x01
    6716:	42 83       	std	Z+2, r20	; 0x02
    6718:	53 83       	std	Z+3, r21	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    671a:	89 81       	ldd	r24, Y+1	; 0x01
    671c:	68 2f       	mov	r22, r24
    671e:	70 e0       	ldi	r23, 0x00	; 0
    6720:	40 91 31 23 	lds	r20, 0x2331
    6724:	50 91 32 23 	lds	r21, 0x2332
    6728:	89 81       	ldd	r24, Y+1	; 0x01
    672a:	88 2f       	mov	r24, r24
    672c:	90 e0       	ldi	r25, 0x00	; 0
    672e:	88 0f       	add	r24, r24
    6730:	99 1f       	adc	r25, r25
    6732:	9c 01       	movw	r18, r24
    6734:	22 0f       	add	r18, r18
    6736:	33 1f       	adc	r19, r19
    6738:	22 0f       	add	r18, r18
    673a:	33 1f       	adc	r19, r19
    673c:	82 0f       	add	r24, r18
    673e:	93 1f       	adc	r25, r19
    6740:	84 0f       	add	r24, r20
    6742:	95 1f       	adc	r25, r21
    6744:	fc 01       	movw	r30, r24
    6746:	36 96       	adiw	r30, 0x06	; 6
    6748:	20 81       	ld	r18, Z
    674a:	31 81       	ldd	r19, Z+1	; 0x01
    674c:	cb 01       	movw	r24, r22
    674e:	82 95       	swap	r24
    6750:	92 95       	swap	r25
    6752:	90 7f       	andi	r25, 0xF0	; 240
    6754:	98 27       	eor	r25, r24
    6756:	80 7f       	andi	r24, 0xF0	; 240
    6758:	98 27       	eor	r25, r24
    675a:	fc 01       	movw	r30, r24
    675c:	e7 5c       	subi	r30, 0xC7	; 199
    675e:	fc 4d       	sbci	r31, 0xDC	; 220
    6760:	20 83       	st	Z, r18
    6762:	31 83       	std	Z+1, r19	; 0x01
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    6764:	89 81       	ldd	r24, Y+1	; 0x01
    6766:	68 2f       	mov	r22, r24
    6768:	70 e0       	ldi	r23, 0x00	; 0
    676a:	40 91 31 23 	lds	r20, 0x2331
    676e:	50 91 32 23 	lds	r21, 0x2332
    6772:	89 81       	ldd	r24, Y+1	; 0x01
    6774:	88 2f       	mov	r24, r24
    6776:	90 e0       	ldi	r25, 0x00	; 0
    6778:	88 0f       	add	r24, r24
    677a:	99 1f       	adc	r25, r25
    677c:	9c 01       	movw	r18, r24
    677e:	22 0f       	add	r18, r18
    6780:	33 1f       	adc	r19, r19
    6782:	22 0f       	add	r18, r18
    6784:	33 1f       	adc	r19, r19
    6786:	82 0f       	add	r24, r18
    6788:	93 1f       	adc	r25, r19
    678a:	84 0f       	add	r24, r20
    678c:	95 1f       	adc	r25, r21
    678e:	fc 01       	movw	r30, r24
    6790:	36 96       	adiw	r30, 0x06	; 6
    6792:	20 81       	ld	r18, Z
    6794:	31 81       	ldd	r19, Z+1	; 0x01
    6796:	cb 01       	movw	r24, r22
    6798:	88 0f       	add	r24, r24
    679a:	99 1f       	adc	r25, r25
    679c:	01 96       	adiw	r24, 0x01	; 1
    679e:	88 0f       	add	r24, r24
    67a0:	99 1f       	adc	r25, r25
    67a2:	01 96       	adiw	r24, 0x01	; 1
    67a4:	88 0f       	add	r24, r24
    67a6:	99 1f       	adc	r25, r25
    67a8:	88 0f       	add	r24, r24
    67aa:	99 1f       	adc	r25, r25
    67ac:	fc 01       	movw	r30, r24
    67ae:	e1 5d       	subi	r30, 0xD1	; 209
    67b0:	fc 4d       	sbci	r31, 0xDC	; 220
    67b2:	20 83       	st	Z, r18
    67b4:	31 83       	std	Z+1, r19	; 0x01
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    67b6:	89 81       	ldd	r24, Y+1	; 0x01
    67b8:	68 2f       	mov	r22, r24
    67ba:	70 e0       	ldi	r23, 0x00	; 0
    67bc:	40 91 31 23 	lds	r20, 0x2331
    67c0:	50 91 32 23 	lds	r21, 0x2332
    67c4:	89 81       	ldd	r24, Y+1	; 0x01
    67c6:	88 2f       	mov	r24, r24
    67c8:	90 e0       	ldi	r25, 0x00	; 0
    67ca:	88 0f       	add	r24, r24
    67cc:	99 1f       	adc	r25, r25
    67ce:	9c 01       	movw	r18, r24
    67d0:	22 0f       	add	r18, r18
    67d2:	33 1f       	adc	r19, r19
    67d4:	22 0f       	add	r18, r18
    67d6:	33 1f       	adc	r19, r19
    67d8:	82 0f       	add	r24, r18
    67da:	93 1f       	adc	r25, r19
    67dc:	84 0f       	add	r24, r20
    67de:	95 1f       	adc	r25, r21
    67e0:	fc 01       	movw	r30, r24
    67e2:	34 96       	adiw	r30, 0x04	; 4
    67e4:	20 81       	ld	r18, Z
    67e6:	31 81       	ldd	r19, Z+1	; 0x01
    67e8:	cb 01       	movw	r24, r22
    67ea:	88 0f       	add	r24, r24
    67ec:	99 1f       	adc	r25, r25
    67ee:	01 96       	adiw	r24, 0x01	; 1
    67f0:	88 0f       	add	r24, r24
    67f2:	99 1f       	adc	r25, r25
    67f4:	88 0f       	add	r24, r24
    67f6:	99 1f       	adc	r25, r25
    67f8:	88 0f       	add	r24, r24
    67fa:	99 1f       	adc	r25, r25
    67fc:	fc 01       	movw	r30, r24
    67fe:	e1 5d       	subi	r30, 0xD1	; 209
    6800:	fc 4d       	sbci	r31, 0xDC	; 220
    6802:	20 83       	st	Z, r18
    6804:	31 83       	std	Z+1, r19	; 0x01
		ax.a[i].timer->PER = ax.p->a[i].period;
    6806:	89 81       	ldd	r24, Y+1	; 0x01
    6808:	88 2f       	mov	r24, r24
    680a:	90 e0       	ldi	r25, 0x00	; 0
    680c:	82 95       	swap	r24
    680e:	92 95       	swap	r25
    6810:	90 7f       	andi	r25, 0xF0	; 240
    6812:	98 27       	eor	r25, r24
    6814:	80 7f       	andi	r24, 0xF0	; 240
    6816:	98 27       	eor	r25, r24
    6818:	fc 01       	movw	r30, r24
    681a:	ef 5b       	subi	r30, 0xBF	; 191
    681c:	fc 4d       	sbci	r31, 0xDC	; 220
    681e:	a0 81       	ld	r26, Z
    6820:	b1 81       	ldd	r27, Z+1	; 0x01
    6822:	40 91 31 23 	lds	r20, 0x2331
    6826:	50 91 32 23 	lds	r21, 0x2332
    682a:	89 81       	ldd	r24, Y+1	; 0x01
    682c:	88 2f       	mov	r24, r24
    682e:	90 e0       	ldi	r25, 0x00	; 0
    6830:	88 0f       	add	r24, r24
    6832:	99 1f       	adc	r25, r25
    6834:	9c 01       	movw	r18, r24
    6836:	22 0f       	add	r18, r18
    6838:	33 1f       	adc	r19, r19
    683a:	22 0f       	add	r18, r18
    683c:	33 1f       	adc	r19, r19
    683e:	82 0f       	add	r24, r18
    6840:	93 1f       	adc	r25, r19
    6842:	84 0f       	add	r24, r20
    6844:	95 1f       	adc	r25, r21
    6846:	fc 01       	movw	r30, r24
    6848:	34 96       	adiw	r30, 0x04	; 4
    684a:	80 81       	ld	r24, Z
    684c:	91 81       	ldd	r25, Z+1	; 0x01
    684e:	96 96       	adiw	r26, 0x26	; 38
    6850:	8d 93       	st	X+, r24
    6852:	9c 93       	st	X, r25
    6854:	97 97       	sbiw	r26, 0x27	; 39
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    6856:	89 81       	ldd	r24, Y+1	; 0x01
    6858:	88 2f       	mov	r24, r24
    685a:	90 e0       	ldi	r25, 0x00	; 0
    685c:	01 96       	adiw	r24, 0x01	; 1
    685e:	82 95       	swap	r24
    6860:	92 95       	swap	r25
    6862:	90 7f       	andi	r25, 0xF0	; 240
    6864:	98 27       	eor	r25, r24
    6866:	80 7f       	andi	r24, 0xF0	; 240
    6868:	98 27       	eor	r25, r24
    686a:	fc 01       	movw	r30, r24
    686c:	e1 5d       	subi	r30, 0xD1	; 209
    686e:	fc 4d       	sbci	r31, 0xDC	; 220
    6870:	01 90       	ld	r0, Z+
    6872:	f0 81       	ld	r31, Z
    6874:	e0 2d       	mov	r30, r0
    6876:	84 e0       	ldi	r24, 0x04	; 4
    6878:	86 83       	std	Z+6, r24	; 0x06
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    687a:	89 81       	ldd	r24, Y+1	; 0x01
    687c:	8f 5f       	subi	r24, 0xFF	; 255
    687e:	89 83       	std	Y+1, r24	; 0x01
    6880:	89 81       	ldd	r24, Y+1	; 0x01
    6882:	83 30       	cpi	r24, 0x03	; 3
    6884:	08 f4       	brcc	.+2      	; 0x6888 <st_execute_move+0x342>
    6886:	84 ce       	rjmp	.-760    	; 0x6590 <st_execute_move+0x4a>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    6888:	10 92 30 23 	sts	0x2330, r1
	if (ax.a[X].step_counter) { 
    688c:	80 91 33 23 	lds	r24, 0x2333
    6890:	90 91 34 23 	lds	r25, 0x2334
    6894:	a0 91 35 23 	lds	r26, 0x2335
    6898:	b0 91 36 23 	lds	r27, 0x2336
    689c:	00 97       	sbiw	r24, 0x00	; 0
    689e:	a1 05       	cpc	r26, r1
    68a0:	b1 05       	cpc	r27, r1
    68a2:	59 f0       	breq	.+22     	; 0x68ba <st_execute_move+0x374>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    68a4:	e0 91 41 23 	lds	r30, 0x2341
    68a8:	f0 91 42 23 	lds	r31, 0x2342
    68ac:	81 e0       	ldi	r24, 0x01	; 1
    68ae:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    68b0:	80 91 30 23 	lds	r24, 0x2330
    68b4:	88 60       	ori	r24, 0x08	; 8
    68b6:	80 93 30 23 	sts	0x2330, r24
	}
	if (ax.a[Y].step_counter) {
    68ba:	80 91 43 23 	lds	r24, 0x2343
    68be:	90 91 44 23 	lds	r25, 0x2344
    68c2:	a0 91 45 23 	lds	r26, 0x2345
    68c6:	b0 91 46 23 	lds	r27, 0x2346
    68ca:	00 97       	sbiw	r24, 0x00	; 0
    68cc:	a1 05       	cpc	r26, r1
    68ce:	b1 05       	cpc	r27, r1
    68d0:	59 f0       	breq	.+22     	; 0x68e8 <st_execute_move+0x3a2>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    68d2:	e0 91 51 23 	lds	r30, 0x2351
    68d6:	f0 91 52 23 	lds	r31, 0x2352
    68da:	81 e0       	ldi	r24, 0x01	; 1
    68dc:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    68de:	80 91 30 23 	lds	r24, 0x2330
    68e2:	84 60       	ori	r24, 0x04	; 4
    68e4:	80 93 30 23 	sts	0x2330, r24
	}
	if (ax.a[Z].step_counter) {
    68e8:	80 91 53 23 	lds	r24, 0x2353
    68ec:	90 91 54 23 	lds	r25, 0x2354
    68f0:	a0 91 55 23 	lds	r26, 0x2355
    68f4:	b0 91 56 23 	lds	r27, 0x2356
    68f8:	00 97       	sbiw	r24, 0x00	; 0
    68fa:	a1 05       	cpc	r26, r1
    68fc:	b1 05       	cpc	r27, r1
    68fe:	59 f0       	breq	.+22     	; 0x6916 <st_execute_move+0x3d0>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    6900:	e0 91 61 23 	lds	r30, 0x2361
    6904:	f0 91 62 23 	lds	r31, 0x2362
    6908:	81 e0       	ldi	r24, 0x01	; 1
    690a:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    690c:	80 91 30 23 	lds	r24, 0x2330
    6910:	82 60       	ori	r24, 0x02	; 2
    6912:	80 93 30 23 	sts	0x2330, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    6916:	10 92 2f 23 	sts	0x232F, r1
}
    691a:	0f 90       	pop	r0
    691c:	cf 91       	pop	r28
    691e:	df 91       	pop	r29
    6920:	08 95       	ret

00006922 <_st_fake_move>:
/* 
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
    6922:	df 93       	push	r29
    6924:	cf 93       	push	r28
    6926:	cd b7       	in	r28, 0x3d	; 61
    6928:	de b7       	in	r29, 0x3e	; 62
	ax.exec_mutex = FALSE;
    692a:	10 92 2f 23 	sts	0x232F, r1
	st_execute_move();		// recursively empty the move queue
    692e:	0e 94 a3 32 	call	0x6546	; 0x6546 <st_execute_move>
	return;
}
    6932:	cf 91       	pop	r28
    6934:	df 91       	pop	r29
    6936:	08 95       	ret

00006938 <st_set_polarity>:
/* 
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
    6938:	df 93       	push	r29
    693a:	cf 93       	push	r28
    693c:	0f 92       	push	r0
    693e:	0f 92       	push	r0
    6940:	cd b7       	in	r28, 0x3d	; 61
    6942:	de b7       	in	r29, 0x3e	; 62
    6944:	89 83       	std	Y+1, r24	; 0x01
    6946:	6a 83       	std	Y+2, r22	; 0x02
	ax.a[axis].polarity = polarity;
    6948:	89 81       	ldd	r24, Y+1	; 0x01
    694a:	88 2f       	mov	r24, r24
    694c:	90 e0       	ldi	r25, 0x00	; 0
    694e:	82 95       	swap	r24
    6950:	92 95       	swap	r25
    6952:	90 7f       	andi	r25, 0xF0	; 240
    6954:	98 27       	eor	r25, r24
    6956:	80 7f       	andi	r24, 0xF0	; 240
    6958:	98 27       	eor	r25, r24
    695a:	fc 01       	movw	r30, r24
    695c:	e3 5c       	subi	r30, 0xC3	; 195
    695e:	fc 4d       	sbci	r31, 0xDC	; 220
    6960:	8a 81       	ldd	r24, Y+2	; 0x02
    6962:	80 83       	st	Z, r24
}
    6964:	0f 90       	pop	r0
    6966:	0f 90       	pop	r0
    6968:	cf 91       	pop	r28
    696a:	df 91       	pop	r29
    696c:	08 95       	ret

0000696e <st_stop_steppers>:
/* 
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
    696e:	df 93       	push	r29
    6970:	cf 93       	push	r28
    6972:	0f 92       	push	r0
    6974:	cd b7       	in	r28, 0x3d	; 61
    6976:	de b7       	in	r29, 0x3e	; 62
	cli();										// stop interrupts
    6978:	f8 94       	cli
	for (uint8_t i=X; i<=A; i++) {
    697a:	19 82       	std	Y+1, r1	; 0x01
    697c:	13 c0       	rjmp	.+38     	; 0x69a4 <st_stop_steppers+0x36>
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    697e:	89 81       	ldd	r24, Y+1	; 0x01
    6980:	88 2f       	mov	r24, r24
    6982:	90 e0       	ldi	r25, 0x00	; 0
    6984:	82 95       	swap	r24
    6986:	92 95       	swap	r25
    6988:	90 7f       	andi	r25, 0xF0	; 240
    698a:	98 27       	eor	r25, r24
    698c:	80 7f       	andi	r24, 0xF0	; 240
    698e:	98 27       	eor	r25, r24
    6990:	fc 01       	movw	r30, r24
    6992:	ef 5b       	subi	r30, 0xBF	; 191
    6994:	fc 4d       	sbci	r31, 0xDC	; 220
    6996:	01 90       	ld	r0, Z+
    6998:	f0 81       	ld	r31, Z
    699a:	e0 2d       	mov	r30, r0
    699c:	10 82       	st	Z, r1
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
	for (uint8_t i=X; i<=A; i++) {
    699e:	89 81       	ldd	r24, Y+1	; 0x01
    69a0:	8f 5f       	subi	r24, 0xFF	; 255
    69a2:	89 83       	std	Y+1, r24	; 0x01
    69a4:	89 81       	ldd	r24, Y+1	; 0x01
    69a6:	84 30       	cpi	r24, 0x04	; 4
    69a8:	50 f3       	brcs	.-44     	; 0x697e <st_stop_steppers+0x10>
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
	}	
	mv_flush();									// flush the move buffer
    69aa:	0e 94 d0 3f 	call	0x7fa0	; 0x7fa0 <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    69ae:	10 92 30 23 	sts	0x2330, r1
	sei();
    69b2:	78 94       	sei
}
    69b4:	0f 90       	pop	r0
    69b6:	cf 91       	pop	r28
    69b8:	df 91       	pop	r29
    69ba:	08 95       	ret

000069bc <st_terminate>:
/* 
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
    69bc:	df 93       	push	r29
    69be:	cf 93       	push	r28
    69c0:	cd b7       	in	r28, 0x3d	; 61
    69c2:	de b7       	in	r29, 0x3e	; 62
	cli();
    69c4:	f8 94       	cli
	mv_flush();									// flush the move buffer
    69c6:	0e 94 d0 3f 	call	0x7fa0	; 0x7fa0 <mv_flush>
	sei();
    69ca:	78 94       	sei
}
    69cc:	cf 91       	pop	r28
    69ce:	df 91       	pop	r29
    69d0:	08 95       	ret

000069d2 <st_motor_test>:

/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
    69d2:	df 93       	push	r29
    69d4:	cf 93       	push	r28
    69d6:	cd b7       	in	r28, 0x3d	; 61
    69d8:	de b7       	in	r29, 0x3e	; 62
	ax.a[X].step_counter = 0x00001000;
    69da:	80 e0       	ldi	r24, 0x00	; 0
    69dc:	90 e1       	ldi	r25, 0x10	; 16
    69de:	a0 e0       	ldi	r26, 0x00	; 0
    69e0:	b0 e0       	ldi	r27, 0x00	; 0
    69e2:	80 93 33 23 	sts	0x2333, r24
    69e6:	90 93 34 23 	sts	0x2334, r25
    69ea:	a0 93 35 23 	sts	0x2335, r26
    69ee:	b0 93 36 23 	sts	0x2336, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    69f2:	e0 91 41 23 	lds	r30, 0x2341
    69f6:	f0 91 42 23 	lds	r31, 0x2342
    69fa:	80 e0       	ldi	r24, 0x00	; 0
    69fc:	90 e1       	ldi	r25, 0x10	; 16
    69fe:	86 a3       	std	Z+38, r24	; 0x26
    6a00:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    6a02:	e0 91 41 23 	lds	r30, 0x2341
    6a06:	f0 91 42 23 	lds	r31, 0x2342
    6a0a:	81 e0       	ldi	r24, 0x01	; 1
    6a0c:	80 83       	st	Z, r24

	ax.a[Y].step_counter = 0x00000800;
    6a0e:	80 e0       	ldi	r24, 0x00	; 0
    6a10:	98 e0       	ldi	r25, 0x08	; 8
    6a12:	a0 e0       	ldi	r26, 0x00	; 0
    6a14:	b0 e0       	ldi	r27, 0x00	; 0
    6a16:	80 93 43 23 	sts	0x2343, r24
    6a1a:	90 93 44 23 	sts	0x2344, r25
    6a1e:	a0 93 45 23 	sts	0x2345, r26
    6a22:	b0 93 46 23 	sts	0x2346, r27
	ax.a[Y].timer->PER = 0x2000;
    6a26:	e0 91 51 23 	lds	r30, 0x2351
    6a2a:	f0 91 52 23 	lds	r31, 0x2352
    6a2e:	80 e0       	ldi	r24, 0x00	; 0
    6a30:	90 e2       	ldi	r25, 0x20	; 32
    6a32:	86 a3       	std	Z+38, r24	; 0x26
    6a34:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    6a36:	e0 91 51 23 	lds	r30, 0x2351
    6a3a:	f0 91 52 23 	lds	r31, 0x2352
    6a3e:	81 e0       	ldi	r24, 0x01	; 1
    6a40:	80 83       	st	Z, r24

	ax.a[Z].step_counter = 0x00000600;
    6a42:	80 e0       	ldi	r24, 0x00	; 0
    6a44:	96 e0       	ldi	r25, 0x06	; 6
    6a46:	a0 e0       	ldi	r26, 0x00	; 0
    6a48:	b0 e0       	ldi	r27, 0x00	; 0
    6a4a:	80 93 53 23 	sts	0x2353, r24
    6a4e:	90 93 54 23 	sts	0x2354, r25
    6a52:	a0 93 55 23 	sts	0x2355, r26
    6a56:	b0 93 56 23 	sts	0x2356, r27
	ax.a[Z].timer->PER = 0x3000;
    6a5a:	e0 91 61 23 	lds	r30, 0x2361
    6a5e:	f0 91 62 23 	lds	r31, 0x2362
    6a62:	80 e0       	ldi	r24, 0x00	; 0
    6a64:	90 e3       	ldi	r25, 0x30	; 48
    6a66:	86 a3       	std	Z+38, r24	; 0x26
    6a68:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    6a6a:	e0 91 61 23 	lds	r30, 0x2361
    6a6e:	f0 91 62 23 	lds	r31, 0x2362
    6a72:	81 e0       	ldi	r24, 0x01	; 1
    6a74:	80 83       	st	Z, r24

	ax.a[A].step_counter = 0x00000400;
    6a76:	80 e0       	ldi	r24, 0x00	; 0
    6a78:	94 e0       	ldi	r25, 0x04	; 4
    6a7a:	a0 e0       	ldi	r26, 0x00	; 0
    6a7c:	b0 e0       	ldi	r27, 0x00	; 0
    6a7e:	80 93 63 23 	sts	0x2363, r24
    6a82:	90 93 64 23 	sts	0x2364, r25
    6a86:	a0 93 65 23 	sts	0x2365, r26
    6a8a:	b0 93 66 23 	sts	0x2366, r27
	ax.a[A].timer->PER = 0x4000;
    6a8e:	e0 91 71 23 	lds	r30, 0x2371
    6a92:	f0 91 72 23 	lds	r31, 0x2372
    6a96:	80 e0       	ldi	r24, 0x00	; 0
    6a98:	90 e4       	ldi	r25, 0x40	; 64
    6a9a:	86 a3       	std	Z+38, r24	; 0x26
    6a9c:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    6a9e:	e0 91 71 23 	lds	r30, 0x2371
    6aa2:	f0 91 72 23 	lds	r31, 0x2372
    6aa6:	81 e0       	ldi	r24, 0x01	; 1
    6aa8:	80 83       	st	Z, r24

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    6aaa:	80 91 30 23 	lds	r24, 0x2330
    6aae:	8f 60       	ori	r24, 0x0F	; 15
    6ab0:	80 93 30 23 	sts	0x2330, r24
}
    6ab4:	cf 91       	pop	r28
    6ab6:	df 91       	pop	r29
    6ab8:	08 95       	ret

00006aba <PMIC_SetVectorLocationToBoot>:
 *  The function writes the correct signature to the Configuration
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
    6aba:	df 93       	push	r29
    6abc:	cf 93       	push	r28
    6abe:	0f 92       	push	r0
    6ac0:	cd b7       	in	r28, 0x3d	; 61
    6ac2:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    6ac4:	e0 ea       	ldi	r30, 0xA0	; 160
    6ac6:	f0 e0       	ldi	r31, 0x00	; 0
    6ac8:	82 81       	ldd	r24, Z+2	; 0x02
    6aca:	80 64       	ori	r24, 0x40	; 64
    6acc:	89 83       	std	Y+1, r24	; 0x01
	CCP = CCP_IOREG_gc;
    6ace:	e4 e3       	ldi	r30, 0x34	; 52
    6ad0:	f0 e0       	ldi	r31, 0x00	; 0
    6ad2:	88 ed       	ldi	r24, 0xD8	; 216
    6ad4:	80 83       	st	Z, r24
	PMIC.CTRL = temp;
    6ad6:	e0 ea       	ldi	r30, 0xA0	; 160
    6ad8:	f0 e0       	ldi	r31, 0x00	; 0
    6ada:	89 81       	ldd	r24, Y+1	; 0x01
    6adc:	82 83       	std	Z+2, r24	; 0x02
}
    6ade:	0f 90       	pop	r0
    6ae0:	cf 91       	pop	r28
    6ae2:	df 91       	pop	r29
    6ae4:	08 95       	ret

00006ae6 <PMIC_SetVectorLocationToApplication>:
 *  The function writes the correct signature to the Configuration
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
    6ae6:	df 93       	push	r29
    6ae8:	cf 93       	push	r28
    6aea:	0f 92       	push	r0
    6aec:	cd b7       	in	r28, 0x3d	; 61
    6aee:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    6af0:	e0 ea       	ldi	r30, 0xA0	; 160
    6af2:	f0 e0       	ldi	r31, 0x00	; 0
    6af4:	82 81       	ldd	r24, Z+2	; 0x02
    6af6:	8f 7b       	andi	r24, 0xBF	; 191
    6af8:	89 83       	std	Y+1, r24	; 0x01
	CCP = CCP_IOREG_gc;
    6afa:	e4 e3       	ldi	r30, 0x34	; 52
    6afc:	f0 e0       	ldi	r31, 0x00	; 0
    6afe:	88 ed       	ldi	r24, 0xD8	; 216
    6b00:	80 83       	st	Z, r24
	PMIC.CTRL = temp;
    6b02:	e0 ea       	ldi	r30, 0xA0	; 160
    6b04:	f0 e0       	ldi	r31, 0x00	; 0
    6b06:	89 81       	ldd	r24, Y+1	; 0x01
    6b08:	82 83       	std	Z+2, r24	; 0x02
}
    6b0a:	0f 90       	pop	r0
    6b0c:	cf 91       	pop	r28
    6b0e:	df 91       	pop	r29
    6b10:	08 95       	ret

00006b12 <xio_init>:
/*
 *	xio_init() - initialize all active XIO devices
 */

void xio_init(void)
{	
    6b12:	af 92       	push	r10
    6b14:	cf 92       	push	r12
    6b16:	ef 92       	push	r14
    6b18:	0f 93       	push	r16
    6b1a:	df 93       	push	r29
    6b1c:	cf 93       	push	r28
    6b1e:	0f 92       	push	r0
    6b20:	cd b7       	in	r28, 0x3d	; 61
    6b22:	de b7       	in	r29, 0x3e	; 62
	uint8_t i=0;
    6b24:	19 82       	std	Y+1, r1	; 0x01

	// RS485
	i = XIO_DEV_RS485;
    6b26:	19 82       	std	Y+1, r1	; 0x01
	memset (&ds[i], 0, sizeof(struct xioDEVICE));
    6b28:	89 81       	ldd	r24, Y+1	; 0x01
    6b2a:	28 2f       	mov	r18, r24
    6b2c:	30 e0       	ldi	r19, 0x00	; 0
    6b2e:	84 e6       	ldi	r24, 0x64	; 100
    6b30:	90 e0       	ldi	r25, 0x00	; 0
    6b32:	ac 01       	movw	r20, r24
    6b34:	24 9f       	mul	r18, r20
    6b36:	c0 01       	movw	r24, r0
    6b38:	25 9f       	mul	r18, r21
    6b3a:	90 0d       	add	r25, r0
    6b3c:	34 9f       	mul	r19, r20
    6b3e:	90 0d       	add	r25, r0
    6b40:	11 24       	eor	r1, r1
    6b42:	85 55       	subi	r24, 0x55	; 85
    6b44:	9b 4d       	sbci	r25, 0xDB	; 219
    6b46:	60 e0       	ldi	r22, 0x00	; 0
    6b48:	70 e0       	ldi	r23, 0x00	; 0
    6b4a:	44 e6       	ldi	r20, 0x64	; 100
    6b4c:	50 e0       	ldi	r21, 0x00	; 0
    6b4e:	0e 94 4b 5c 	call	0xb896	; 0xb896 <memset>
	ds[i].xio = &us[i];								// bind USART extended struct
    6b52:	89 81       	ldd	r24, Y+1	; 0x01
    6b54:	48 2f       	mov	r20, r24
    6b56:	50 e0       	ldi	r21, 0x00	; 0
    6b58:	89 81       	ldd	r24, Y+1	; 0x01
    6b5a:	28 2f       	mov	r18, r24
    6b5c:	30 e0       	ldi	r19, 0x00	; 0
    6b5e:	8d e2       	ldi	r24, 0x2D	; 45
    6b60:	90 e0       	ldi	r25, 0x00	; 0
    6b62:	bc 01       	movw	r22, r24
    6b64:	26 9f       	mul	r18, r22
    6b66:	c0 01       	movw	r24, r0
    6b68:	27 9f       	mul	r18, r23
    6b6a:	90 0d       	add	r25, r0
    6b6c:	36 9f       	mul	r19, r22
    6b6e:	90 0d       	add	r25, r0
    6b70:	11 24       	eor	r1, r1
    6b72:	9c 01       	movw	r18, r24
    6b74:	2c 5d       	subi	r18, 0xDC	; 220
    6b76:	3b 4d       	sbci	r19, 0xDB	; 219
    6b78:	84 e6       	ldi	r24, 0x64	; 100
    6b7a:	90 e0       	ldi	r25, 0x00	; 0
    6b7c:	bc 01       	movw	r22, r24
    6b7e:	46 9f       	mul	r20, r22
    6b80:	c0 01       	movw	r24, r0
    6b82:	47 9f       	mul	r20, r23
    6b84:	90 0d       	add	r25, r0
    6b86:	56 9f       	mul	r21, r22
    6b88:	90 0d       	add	r25, r0
    6b8a:	11 24       	eor	r1, r1
    6b8c:	fc 01       	movw	r30, r24
    6b8e:	e5 54       	subi	r30, 0x45	; 69
    6b90:	fb 4d       	sbci	r31, 0xDB	; 219
    6b92:	20 83       	st	Z, r18
    6b94:	31 83       	std	Z+1, r19	; 0x01
	ds[i].size = sizeof(ds[i].buf);
    6b96:	89 81       	ldd	r24, Y+1	; 0x01
    6b98:	28 2f       	mov	r18, r24
    6b9a:	30 e0       	ldi	r19, 0x00	; 0
    6b9c:	84 e6       	ldi	r24, 0x64	; 100
    6b9e:	90 e0       	ldi	r25, 0x00	; 0
    6ba0:	ac 01       	movw	r20, r24
    6ba2:	24 9f       	mul	r18, r20
    6ba4:	c0 01       	movw	r24, r0
    6ba6:	25 9f       	mul	r18, r21
    6ba8:	90 0d       	add	r25, r0
    6baa:	34 9f       	mul	r19, r20
    6bac:	90 0d       	add	r25, r0
    6bae:	11 24       	eor	r1, r1
    6bb0:	fc 01       	movw	r30, r24
    6bb2:	ee 54       	subi	r30, 0x4E	; 78
    6bb4:	fb 4d       	sbci	r31, 0xDB	; 219
    6bb6:	80 e5       	ldi	r24, 0x50	; 80
    6bb8:	80 83       	st	Z, r24
	xio_init_usart(i, RS485_INIT_bm, &RS485_USART, &RS485_PORT, 
    6bba:	89 81       	ldd	r24, Y+1	; 0x01
    6bbc:	65 e3       	ldi	r22, 0x35	; 53
    6bbe:	75 e1       	ldi	r23, 0x15	; 21
    6bc0:	40 eb       	ldi	r20, 0xB0	; 176
    6bc2:	58 e0       	ldi	r21, 0x08	; 8
    6bc4:	20 e4       	ldi	r18, 0x40	; 64
    6bc6:	36 e0       	ldi	r19, 0x06	; 6
    6bc8:	00 e4       	ldi	r16, 0x40	; 64
    6bca:	0f 2e       	mov	r0, r31
    6bcc:	f0 eb       	ldi	r31, 0xB0	; 176
    6bce:	ef 2e       	mov	r14, r31
    6bd0:	f0 2d       	mov	r31, r0
    6bd2:	0f 2e       	mov	r0, r31
    6bd4:	f0 e3       	ldi	r31, 0x30	; 48
    6bd6:	cf 2e       	mov	r12, r31
    6bd8:	f0 2d       	mov	r31, r0
    6bda:	0f 2e       	mov	r0, r31
    6bdc:	f0 e8       	ldi	r31, 0x80	; 128
    6bde:	af 2e       	mov	r10, r31
    6be0:	f0 2d       	mov	r31, r0
    6be2:	0e 94 1c 42 	call	0x8438	; 0x8438 <xio_init_usart>
				   RS485_DIRCLR_bm,RS485_DIRSET_bm,RS485_OUTCLR_bm,RS485_OUTSET_bm);
//	ds[i].dev_flags = &xio_set_control_flags_rs485;
	ds[i].dev_putc = &xio_putc_rs485;
    6be6:	89 81       	ldd	r24, Y+1	; 0x01
    6be8:	28 2f       	mov	r18, r24
    6bea:	30 e0       	ldi	r19, 0x00	; 0
    6bec:	49 e2       	ldi	r20, 0x29	; 41
    6bee:	58 e4       	ldi	r21, 0x48	; 72
    6bf0:	84 e6       	ldi	r24, 0x64	; 100
    6bf2:	90 e0       	ldi	r25, 0x00	; 0
    6bf4:	bc 01       	movw	r22, r24
    6bf6:	26 9f       	mul	r18, r22
    6bf8:	c0 01       	movw	r24, r0
    6bfa:	27 9f       	mul	r18, r23
    6bfc:	90 0d       	add	r25, r0
    6bfe:	36 9f       	mul	r19, r22
    6c00:	90 0d       	add	r25, r0
    6c02:	11 24       	eor	r1, r1
    6c04:	fc 01       	movw	r30, r24
    6c06:	eb 54       	subi	r30, 0x4B	; 75
    6c08:	fb 4d       	sbci	r31, 0xDB	; 219
    6c0a:	40 83       	st	Z, r20
    6c0c:	51 83       	std	Z+1, r21	; 0x01


//	FILE __files[i] = FDEV_SETUP_STREAM(xio_putc_rs485, xio_getc_rs485, _FDEV_SETUP_RW);

	// USB
	i = XIO_DEV_USB;
    6c0e:	81 e0       	ldi	r24, 0x01	; 1
    6c10:	89 83       	std	Y+1, r24	; 0x01
	memset (&ds[i], 0, sizeof(struct xioDEVICE));
    6c12:	89 81       	ldd	r24, Y+1	; 0x01
    6c14:	28 2f       	mov	r18, r24
    6c16:	30 e0       	ldi	r19, 0x00	; 0
    6c18:	84 e6       	ldi	r24, 0x64	; 100
    6c1a:	90 e0       	ldi	r25, 0x00	; 0
    6c1c:	ac 01       	movw	r20, r24
    6c1e:	24 9f       	mul	r18, r20
    6c20:	c0 01       	movw	r24, r0
    6c22:	25 9f       	mul	r18, r21
    6c24:	90 0d       	add	r25, r0
    6c26:	34 9f       	mul	r19, r20
    6c28:	90 0d       	add	r25, r0
    6c2a:	11 24       	eor	r1, r1
    6c2c:	85 55       	subi	r24, 0x55	; 85
    6c2e:	9b 4d       	sbci	r25, 0xDB	; 219
    6c30:	60 e0       	ldi	r22, 0x00	; 0
    6c32:	70 e0       	ldi	r23, 0x00	; 0
    6c34:	44 e6       	ldi	r20, 0x64	; 100
    6c36:	50 e0       	ldi	r21, 0x00	; 0
    6c38:	0e 94 4b 5c 	call	0xb896	; 0xb896 <memset>
	ds[i].xio = &us[i];								// bind USART extended struct
    6c3c:	89 81       	ldd	r24, Y+1	; 0x01
    6c3e:	48 2f       	mov	r20, r24
    6c40:	50 e0       	ldi	r21, 0x00	; 0
    6c42:	89 81       	ldd	r24, Y+1	; 0x01
    6c44:	28 2f       	mov	r18, r24
    6c46:	30 e0       	ldi	r19, 0x00	; 0
    6c48:	8d e2       	ldi	r24, 0x2D	; 45
    6c4a:	90 e0       	ldi	r25, 0x00	; 0
    6c4c:	bc 01       	movw	r22, r24
    6c4e:	26 9f       	mul	r18, r22
    6c50:	c0 01       	movw	r24, r0
    6c52:	27 9f       	mul	r18, r23
    6c54:	90 0d       	add	r25, r0
    6c56:	36 9f       	mul	r19, r22
    6c58:	90 0d       	add	r25, r0
    6c5a:	11 24       	eor	r1, r1
    6c5c:	9c 01       	movw	r18, r24
    6c5e:	2c 5d       	subi	r18, 0xDC	; 220
    6c60:	3b 4d       	sbci	r19, 0xDB	; 219
    6c62:	84 e6       	ldi	r24, 0x64	; 100
    6c64:	90 e0       	ldi	r25, 0x00	; 0
    6c66:	bc 01       	movw	r22, r24
    6c68:	46 9f       	mul	r20, r22
    6c6a:	c0 01       	movw	r24, r0
    6c6c:	47 9f       	mul	r20, r23
    6c6e:	90 0d       	add	r25, r0
    6c70:	56 9f       	mul	r21, r22
    6c72:	90 0d       	add	r25, r0
    6c74:	11 24       	eor	r1, r1
    6c76:	fc 01       	movw	r30, r24
    6c78:	e5 54       	subi	r30, 0x45	; 69
    6c7a:	fb 4d       	sbci	r31, 0xDB	; 219
    6c7c:	20 83       	st	Z, r18
    6c7e:	31 83       	std	Z+1, r19	; 0x01
	ds[i].size = sizeof(ds[i].buf);
    6c80:	89 81       	ldd	r24, Y+1	; 0x01
    6c82:	28 2f       	mov	r18, r24
    6c84:	30 e0       	ldi	r19, 0x00	; 0
    6c86:	84 e6       	ldi	r24, 0x64	; 100
    6c88:	90 e0       	ldi	r25, 0x00	; 0
    6c8a:	ac 01       	movw	r20, r24
    6c8c:	24 9f       	mul	r18, r20
    6c8e:	c0 01       	movw	r24, r0
    6c90:	25 9f       	mul	r18, r21
    6c92:	90 0d       	add	r25, r0
    6c94:	34 9f       	mul	r19, r20
    6c96:	90 0d       	add	r25, r0
    6c98:	11 24       	eor	r1, r1
    6c9a:	fc 01       	movw	r30, r24
    6c9c:	ee 54       	subi	r30, 0x4E	; 78
    6c9e:	fb 4d       	sbci	r31, 0xDB	; 219
    6ca0:	80 e5       	ldi	r24, 0x50	; 80
    6ca2:	80 83       	st	Z, r24
	xio_init_usart(i, USB_INIT_bm, &USB_USART, &USB_PORT, 
    6ca4:	89 81       	ldd	r24, Y+1	; 0x01
    6ca6:	65 e3       	ldi	r22, 0x35	; 53
    6ca8:	75 e5       	ldi	r23, 0x55	; 85
    6caa:	40 ea       	ldi	r20, 0xA0	; 160
    6cac:	58 e0       	ldi	r21, 0x08	; 8
    6cae:	20 e4       	ldi	r18, 0x40	; 64
    6cb0:	36 e0       	ldi	r19, 0x06	; 6
    6cb2:	05 e0       	ldi	r16, 0x05	; 5
    6cb4:	0f 2e       	mov	r0, r31
    6cb6:	fa e0       	ldi	r31, 0x0A	; 10
    6cb8:	ef 2e       	mov	r14, r31
    6cba:	f0 2d       	mov	r31, r0
    6cbc:	cc 24       	eor	r12, r12
    6cbe:	0f 2e       	mov	r0, r31
    6cc0:	fa e0       	ldi	r31, 0x0A	; 10
    6cc2:	af 2e       	mov	r10, r31
    6cc4:	f0 2d       	mov	r31, r0
    6cc6:	0e 94 1c 42 	call	0x8438	; 0x8438 <xio_init_usart>
//	stddev = &dev_usb;				// stddev is a convenience
//	stdin = &dev_usb;				// define the console device
//	stdout = &dev_usb;				// ...
//	stderr = &dev_usb;				// ...

	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    6cca:	84 e2       	ldi	r24, 0x24	; 36
    6ccc:	97 e0       	ldi	r25, 0x07	; 7
    6cce:	0f 92       	push	r0
    6cd0:	0f 92       	push	r0
    6cd2:	ed b7       	in	r30, 0x3d	; 61
    6cd4:	fe b7       	in	r31, 0x3e	; 62
    6cd6:	31 96       	adiw	r30, 0x01	; 1
    6cd8:	80 83       	st	Z, r24
    6cda:	91 83       	std	Z+1, r25	; 0x01
    6cdc:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    6ce0:	0f 90       	pop	r0
    6ce2:	0f 90       	pop	r0
}
    6ce4:	0f 90       	pop	r0
    6ce6:	cf 91       	pop	r28
    6ce8:	df 91       	pop	r29
    6cea:	0f 91       	pop	r16
    6cec:	ef 90       	pop	r14
    6cee:	cf 90       	pop	r12
    6cf0:	af 90       	pop	r10
    6cf2:	08 95       	ret

00006cf4 <xio_set_control_flags>:
/*
 * xio_set_control_flags()
 */

void xio_set_control_flags(const uint8_t dev, const uint16_t control)
{
    6cf4:	df 93       	push	r29
    6cf6:	cf 93       	push	r28
    6cf8:	cd b7       	in	r28, 0x3d	; 61
    6cfa:	de b7       	in	r29, 0x3e	; 62
    6cfc:	25 97       	sbiw	r28, 0x05	; 5
    6cfe:	cd bf       	out	0x3d, r28	; 61
    6d00:	de bf       	out	0x3e, r29	; 62
    6d02:	8b 83       	std	Y+3, r24	; 0x03
    6d04:	6c 83       	std	Y+4, r22	; 0x04
    6d06:	7d 83       	std	Y+5, r23	; 0x05
	struct xioDEVICE *d = &ds[dev];
    6d08:	8b 81       	ldd	r24, Y+3	; 0x03
    6d0a:	28 2f       	mov	r18, r24
    6d0c:	30 e0       	ldi	r19, 0x00	; 0
    6d0e:	84 e6       	ldi	r24, 0x64	; 100
    6d10:	90 e0       	ldi	r25, 0x00	; 0
    6d12:	ac 01       	movw	r20, r24
    6d14:	24 9f       	mul	r18, r20
    6d16:	c0 01       	movw	r24, r0
    6d18:	25 9f       	mul	r18, r21
    6d1a:	90 0d       	add	r25, r0
    6d1c:	34 9f       	mul	r19, r20
    6d1e:	90 0d       	add	r25, r0
    6d20:	11 24       	eor	r1, r1
    6d22:	85 55       	subi	r24, 0x55	; 85
    6d24:	9b 4d       	sbci	r25, 0xDB	; 219
    6d26:	89 83       	std	Y+1, r24	; 0x01
    6d28:	9a 83       	std	Y+2, r25	; 0x02

	if (control & XIO_RD) {
    6d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    6d2c:	9d 81       	ldd	r25, Y+5	; 0x05
    6d2e:	80 71       	andi	r24, 0x10	; 16
    6d30:	90 70       	andi	r25, 0x00	; 0
    6d32:	00 97       	sbiw	r24, 0x00	; 0
    6d34:	49 f0       	breq	.+18     	; 0x6d48 <xio_set_control_flags+0x54>
		d->flags |= XIO_FLAG_RD_bm;
    6d36:	e9 81       	ldd	r30, Y+1	; 0x01
    6d38:	fa 81       	ldd	r31, Y+2	; 0x02
    6d3a:	80 81       	ld	r24, Z
    6d3c:	91 81       	ldd	r25, Z+1	; 0x01
    6d3e:	81 60       	ori	r24, 0x01	; 1
    6d40:	e9 81       	ldd	r30, Y+1	; 0x01
    6d42:	fa 81       	ldd	r31, Y+2	; 0x02
    6d44:	80 83       	st	Z, r24
    6d46:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_WR) {
    6d48:	8c 81       	ldd	r24, Y+4	; 0x04
    6d4a:	9d 81       	ldd	r25, Y+5	; 0x05
    6d4c:	80 72       	andi	r24, 0x20	; 32
    6d4e:	90 70       	andi	r25, 0x00	; 0
    6d50:	00 97       	sbiw	r24, 0x00	; 0
    6d52:	49 f0       	breq	.+18     	; 0x6d66 <xio_set_control_flags+0x72>
		d->flags |= XIO_FLAG_WR_bm;
    6d54:	e9 81       	ldd	r30, Y+1	; 0x01
    6d56:	fa 81       	ldd	r31, Y+2	; 0x02
    6d58:	80 81       	ld	r24, Z
    6d5a:	91 81       	ldd	r25, Z+1	; 0x01
    6d5c:	82 60       	ori	r24, 0x02	; 2
    6d5e:	e9 81       	ldd	r30, Y+1	; 0x01
    6d60:	fa 81       	ldd	r31, Y+2	; 0x02
    6d62:	80 83       	st	Z, r24
    6d64:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_BLOCK) {
    6d66:	8c 81       	ldd	r24, Y+4	; 0x04
    6d68:	9d 81       	ldd	r25, Y+5	; 0x05
    6d6a:	80 74       	andi	r24, 0x40	; 64
    6d6c:	90 70       	andi	r25, 0x00	; 0
    6d6e:	00 97       	sbiw	r24, 0x00	; 0
    6d70:	49 f0       	breq	.+18     	; 0x6d84 <xio_set_control_flags+0x90>
		d->flags |= XIO_FLAG_BLOCK_bm;
    6d72:	e9 81       	ldd	r30, Y+1	; 0x01
    6d74:	fa 81       	ldd	r31, Y+2	; 0x02
    6d76:	80 81       	ld	r24, Z
    6d78:	91 81       	ldd	r25, Z+1	; 0x01
    6d7a:	84 60       	ori	r24, 0x04	; 4
    6d7c:	e9 81       	ldd	r30, Y+1	; 0x01
    6d7e:	fa 81       	ldd	r31, Y+2	; 0x02
    6d80:	80 83       	st	Z, r24
    6d82:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOBLOCK) {
    6d84:	8c 81       	ldd	r24, Y+4	; 0x04
    6d86:	9d 81       	ldd	r25, Y+5	; 0x05
    6d88:	80 78       	andi	r24, 0x80	; 128
    6d8a:	90 70       	andi	r25, 0x00	; 0
    6d8c:	00 97       	sbiw	r24, 0x00	; 0
    6d8e:	49 f0       	breq	.+18     	; 0x6da2 <xio_set_control_flags+0xae>
		d->flags &= ~XIO_FLAG_BLOCK_bm;
    6d90:	e9 81       	ldd	r30, Y+1	; 0x01
    6d92:	fa 81       	ldd	r31, Y+2	; 0x02
    6d94:	80 81       	ld	r24, Z
    6d96:	91 81       	ldd	r25, Z+1	; 0x01
    6d98:	8b 7f       	andi	r24, 0xFB	; 251
    6d9a:	e9 81       	ldd	r30, Y+1	; 0x01
    6d9c:	fa 81       	ldd	r31, Y+2	; 0x02
    6d9e:	80 83       	st	Z, r24
    6da0:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_ECHO) {
    6da2:	8c 81       	ldd	r24, Y+4	; 0x04
    6da4:	9d 81       	ldd	r25, Y+5	; 0x05
    6da6:	80 70       	andi	r24, 0x00	; 0
    6da8:	91 70       	andi	r25, 0x01	; 1
    6daa:	00 97       	sbiw	r24, 0x00	; 0
    6dac:	49 f0       	breq	.+18     	; 0x6dc0 <xio_set_control_flags+0xcc>
		d->flags |= XIO_FLAG_ECHO_bm;
    6dae:	e9 81       	ldd	r30, Y+1	; 0x01
    6db0:	fa 81       	ldd	r31, Y+2	; 0x02
    6db2:	80 81       	ld	r24, Z
    6db4:	91 81       	ldd	r25, Z+1	; 0x01
    6db6:	80 61       	ori	r24, 0x10	; 16
    6db8:	e9 81       	ldd	r30, Y+1	; 0x01
    6dba:	fa 81       	ldd	r31, Y+2	; 0x02
    6dbc:	80 83       	st	Z, r24
    6dbe:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOECHO) {
    6dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    6dc2:	9d 81       	ldd	r25, Y+5	; 0x05
    6dc4:	80 70       	andi	r24, 0x00	; 0
    6dc6:	92 70       	andi	r25, 0x02	; 2
    6dc8:	00 97       	sbiw	r24, 0x00	; 0
    6dca:	49 f0       	breq	.+18     	; 0x6dde <xio_set_control_flags+0xea>
		d->flags &= ~XIO_FLAG_ECHO_bm;
    6dcc:	e9 81       	ldd	r30, Y+1	; 0x01
    6dce:	fa 81       	ldd	r31, Y+2	; 0x02
    6dd0:	80 81       	ld	r24, Z
    6dd2:	91 81       	ldd	r25, Z+1	; 0x01
    6dd4:	8f 7e       	andi	r24, 0xEF	; 239
    6dd6:	e9 81       	ldd	r30, Y+1	; 0x01
    6dd8:	fa 81       	ldd	r31, Y+2	; 0x02
    6dda:	80 83       	st	Z, r24
    6ddc:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_CRLF) {
    6dde:	8c 81       	ldd	r24, Y+4	; 0x04
    6de0:	9d 81       	ldd	r25, Y+5	; 0x05
    6de2:	80 70       	andi	r24, 0x00	; 0
    6de4:	94 70       	andi	r25, 0x04	; 4
    6de6:	00 97       	sbiw	r24, 0x00	; 0
    6de8:	49 f0       	breq	.+18     	; 0x6dfc <xio_set_control_flags+0x108>
		d->flags |= XIO_FLAG_CRLF_bm;
    6dea:	e9 81       	ldd	r30, Y+1	; 0x01
    6dec:	fa 81       	ldd	r31, Y+2	; 0x02
    6dee:	80 81       	ld	r24, Z
    6df0:	91 81       	ldd	r25, Z+1	; 0x01
    6df2:	80 62       	ori	r24, 0x20	; 32
    6df4:	e9 81       	ldd	r30, Y+1	; 0x01
    6df6:	fa 81       	ldd	r31, Y+2	; 0x02
    6df8:	80 83       	st	Z, r24
    6dfa:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOCRLF) {
    6dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    6dfe:	9d 81       	ldd	r25, Y+5	; 0x05
    6e00:	80 70       	andi	r24, 0x00	; 0
    6e02:	98 70       	andi	r25, 0x08	; 8
    6e04:	00 97       	sbiw	r24, 0x00	; 0
    6e06:	49 f0       	breq	.+18     	; 0x6e1a <xio_set_control_flags+0x126>
		d->flags &= ~XIO_FLAG_CRLF_bm;
    6e08:	e9 81       	ldd	r30, Y+1	; 0x01
    6e0a:	fa 81       	ldd	r31, Y+2	; 0x02
    6e0c:	80 81       	ld	r24, Z
    6e0e:	91 81       	ldd	r25, Z+1	; 0x01
    6e10:	8f 7d       	andi	r24, 0xDF	; 223
    6e12:	e9 81       	ldd	r30, Y+1	; 0x01
    6e14:	fa 81       	ldd	r31, Y+2	; 0x02
    6e16:	80 83       	st	Z, r24
    6e18:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_LINEMODE) {
    6e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    6e1c:	9d 81       	ldd	r25, Y+5	; 0x05
    6e1e:	80 70       	andi	r24, 0x00	; 0
    6e20:	90 71       	andi	r25, 0x10	; 16
    6e22:	00 97       	sbiw	r24, 0x00	; 0
    6e24:	49 f0       	breq	.+18     	; 0x6e38 <xio_set_control_flags+0x144>
		d->flags |= XIO_FLAG_LINEMODE_bm;
    6e26:	e9 81       	ldd	r30, Y+1	; 0x01
    6e28:	fa 81       	ldd	r31, Y+2	; 0x02
    6e2a:	80 81       	ld	r24, Z
    6e2c:	91 81       	ldd	r25, Z+1	; 0x01
    6e2e:	80 64       	ori	r24, 0x40	; 64
    6e30:	e9 81       	ldd	r30, Y+1	; 0x01
    6e32:	fa 81       	ldd	r31, Y+2	; 0x02
    6e34:	80 83       	st	Z, r24
    6e36:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOLINEMODE) {
    6e38:	8c 81       	ldd	r24, Y+4	; 0x04
    6e3a:	9d 81       	ldd	r25, Y+5	; 0x05
    6e3c:	80 70       	andi	r24, 0x00	; 0
    6e3e:	90 72       	andi	r25, 0x20	; 32
    6e40:	00 97       	sbiw	r24, 0x00	; 0
    6e42:	49 f0       	breq	.+18     	; 0x6e56 <xio_set_control_flags+0x162>
		d->flags &= ~XIO_FLAG_LINEMODE_bm;
    6e44:	e9 81       	ldd	r30, Y+1	; 0x01
    6e46:	fa 81       	ldd	r31, Y+2	; 0x02
    6e48:	80 81       	ld	r24, Z
    6e4a:	91 81       	ldd	r25, Z+1	; 0x01
    6e4c:	8f 7b       	andi	r24, 0xBF	; 191
    6e4e:	e9 81       	ldd	r30, Y+1	; 0x01
    6e50:	fa 81       	ldd	r31, Y+2	; 0x02
    6e52:	80 83       	st	Z, r24
    6e54:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_SEMICOLONS) {
    6e56:	8c 81       	ldd	r24, Y+4	; 0x04
    6e58:	9d 81       	ldd	r25, Y+5	; 0x05
    6e5a:	80 70       	andi	r24, 0x00	; 0
    6e5c:	90 74       	andi	r25, 0x40	; 64
    6e5e:	00 97       	sbiw	r24, 0x00	; 0
    6e60:	49 f0       	breq	.+18     	; 0x6e74 <xio_set_control_flags+0x180>
		d->flags |= XIO_FLAG_SEMICOLONS_bm;
    6e62:	e9 81       	ldd	r30, Y+1	; 0x01
    6e64:	fa 81       	ldd	r31, Y+2	; 0x02
    6e66:	80 81       	ld	r24, Z
    6e68:	91 81       	ldd	r25, Z+1	; 0x01
    6e6a:	80 68       	ori	r24, 0x80	; 128
    6e6c:	e9 81       	ldd	r30, Y+1	; 0x01
    6e6e:	fa 81       	ldd	r31, Y+2	; 0x02
    6e70:	80 83       	st	Z, r24
    6e72:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOSEMICOLONS) {
    6e74:	8c 81       	ldd	r24, Y+4	; 0x04
    6e76:	9d 81       	ldd	r25, Y+5	; 0x05
    6e78:	99 23       	and	r25, r25
    6e7a:	4c f4       	brge	.+18     	; 0x6e8e <xio_set_control_flags+0x19a>
		d->flags &= ~XIO_FLAG_SEMICOLONS_bm;
    6e7c:	e9 81       	ldd	r30, Y+1	; 0x01
    6e7e:	fa 81       	ldd	r31, Y+2	; 0x02
    6e80:	80 81       	ld	r24, Z
    6e82:	91 81       	ldd	r25, Z+1	; 0x01
    6e84:	8f 77       	andi	r24, 0x7F	; 127
    6e86:	e9 81       	ldd	r30, Y+1	; 0x01
    6e88:	fa 81       	ldd	r31, Y+2	; 0x02
    6e8a:	80 83       	st	Z, r24
    6e8c:	91 83       	std	Z+1, r25	; 0x01
	}
}
    6e8e:	25 96       	adiw	r28, 0x05	; 5
    6e90:	cd bf       	out	0x3d, r28	; 61
    6e92:	de bf       	out	0x3e, r29	; 62
    6e94:	cf 91       	pop	r28
    6e96:	df 91       	pop	r29
    6e98:	08 95       	ret

00006e9a <xio_fget_ln>:
 *	len		length of text buffer in 1 offset form: e.g. use 80 instead of 79
 *	dev		XIO device enumeration
 */

int xio_fget_ln(uint8_t dev, char *buf, uint8_t len)
{
    6e9a:	df 93       	push	r29
    6e9c:	cf 93       	push	r28
    6e9e:	00 d0       	rcall	.+0      	; 0x6ea0 <xio_fget_ln+0x6>
    6ea0:	0f 92       	push	r0
    6ea2:	cd b7       	in	r28, 0x3d	; 61
    6ea4:	de b7       	in	r29, 0x3e	; 62
    6ea6:	89 83       	std	Y+1, r24	; 0x01
    6ea8:	6a 83       	std	Y+2, r22	; 0x02
    6eaa:	7b 83       	std	Y+3, r23	; 0x03
    6eac:	4c 83       	std	Y+4, r20	; 0x04
//		case (XIO_DEV_AUX): return (xio_aux_readln(buf, len));
		case (XIO_DEV_PGM): return (xio_pgm_readln(buf, len));
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
*/
	return (TG_ERROR);		// never should hit this
    6eae:	86 e0       	ldi	r24, 0x06	; 6
    6eb0:	90 e0       	ldi	r25, 0x00	; 0
}
    6eb2:	24 96       	adiw	r28, 0x04	; 4
    6eb4:	cd bf       	out	0x3d, r28	; 61
    6eb6:	de bf       	out	0x3e, r29	; 62
    6eb8:	cf 91       	pop	r28
    6eba:	df 91       	pop	r29
    6ebc:	08 95       	ret

00006ebe <eeprom_get_char>:
#include "xmega_eeprom.h"

/****** Functions from Grbl eeprom.c ******/

char eeprom_get_char( unsigned int addr )
{
    6ebe:	df 93       	push	r29
    6ec0:	cf 93       	push	r28
    6ec2:	00 d0       	rcall	.+0      	; 0x6ec4 <eeprom_get_char+0x6>
    6ec4:	0f 92       	push	r0
    6ec6:	cd b7       	in	r28, 0x3d	; 61
    6ec8:	de b7       	in	r29, 0x3e	; 62
    6eca:	8b 83       	std	Y+3, r24	; 0x03
    6ecc:	9c 83       	std	Y+4, r25	; 0x04
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
    6ece:	8b 81       	ldd	r24, Y+3	; 0x03
    6ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    6ed2:	96 95       	lsr	r25
    6ed4:	87 95       	ror	r24
    6ed6:	92 95       	swap	r25
    6ed8:	82 95       	swap	r24
    6eda:	8f 70       	andi	r24, 0x0F	; 15
    6edc:	89 27       	eor	r24, r25
    6ede:	9f 70       	andi	r25, 0x0F	; 15
    6ee0:	89 27       	eor	r24, r25
    6ee2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
    6ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    6ee6:	8f 71       	andi	r24, 0x1F	; 31
    6ee8:	89 83       	std	Y+1, r24	; 0x01
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    6eea:	8a 81       	ldd	r24, Y+2	; 0x02
    6eec:	69 81       	ldd	r22, Y+1	; 0x01
    6eee:	0e 94 9a 38 	call	0x7134	; 0x7134 <EEPROM_ReadByte>
}
    6ef2:	24 96       	adiw	r28, 0x04	; 4
    6ef4:	cd bf       	out	0x3d, r28	; 61
    6ef6:	de bf       	out	0x3e, r29	; 62
    6ef8:	cf 91       	pop	r28
    6efa:	df 91       	pop	r29
    6efc:	08 95       	ret

00006efe <eeprom_put_char>:

void eeprom_put_char( unsigned int addr, char value )
{
    6efe:	df 93       	push	r29
    6f00:	cf 93       	push	r28
    6f02:	cd b7       	in	r28, 0x3d	; 61
    6f04:	de b7       	in	r29, 0x3e	; 62
    6f06:	25 97       	sbiw	r28, 0x05	; 5
    6f08:	cd bf       	out	0x3d, r28	; 61
    6f0a:	de bf       	out	0x3e, r29	; 62
    6f0c:	8b 83       	std	Y+3, r24	; 0x03
    6f0e:	9c 83       	std	Y+4, r25	; 0x04
    6f10:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
    6f12:	8b 81       	ldd	r24, Y+3	; 0x03
    6f14:	9c 81       	ldd	r25, Y+4	; 0x04
    6f16:	96 95       	lsr	r25
    6f18:	87 95       	ror	r24
    6f1a:	92 95       	swap	r25
    6f1c:	82 95       	swap	r24
    6f1e:	8f 70       	andi	r24, 0x0F	; 15
    6f20:	89 27       	eor	r24, r25
    6f22:	9f 70       	andi	r25, 0x0F	; 15
    6f24:	89 27       	eor	r24, r25
    6f26:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
    6f28:	8b 81       	ldd	r24, Y+3	; 0x03
    6f2a:	8f 71       	andi	r24, 0x1F	; 31
    6f2c:	89 83       	std	Y+1, r24	; 0x01

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    6f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    6f30:	69 81       	ldd	r22, Y+1	; 0x01
    6f32:	4d 81       	ldd	r20, Y+5	; 0x05
    6f34:	0e 94 4a 38 	call	0x7094	; 0x7094 <EEPROM_WriteByte>
}
    6f38:	25 96       	adiw	r28, 0x05	; 5
    6f3a:	cd bf       	out	0x3d, r28	; 61
    6f3c:	de bf       	out	0x3e, r29	; 62
    6f3e:	cf 91       	pop	r28
    6f40:	df 91       	pop	r29
    6f42:	08 95       	ret

00006f44 <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    6f44:	df 93       	push	r29
    6f46:	cf 93       	push	r28
    6f48:	cd b7       	in	r28, 0x3d	; 61
    6f4a:	de b7       	in	r29, 0x3e	; 62
    6f4c:	29 97       	sbiw	r28, 0x09	; 9
    6f4e:	cd bf       	out	0x3d, r28	; 61
    6f50:	de bf       	out	0x3e, r29	; 62
    6f52:	8a 83       	std	Y+2, r24	; 0x02
    6f54:	9b 83       	std	Y+3, r25	; 0x03
    6f56:	6c 83       	std	Y+4, r22	; 0x04
    6f58:	7d 83       	std	Y+5, r23	; 0x05
    6f5a:	4e 83       	std	Y+6, r20	; 0x06
    6f5c:	5f 83       	std	Y+7, r21	; 0x07
  unsigned char checksum = 0;
    6f5e:	19 82       	std	Y+1, r1	; 0x01
    6f60:	31 c0       	rjmp	.+98     	; 0x6fc4 <memcpy_to_eeprom_with_checksum+0x80>
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    6f62:	89 81       	ldd	r24, Y+1	; 0x01
    6f64:	88 2f       	mov	r24, r24
    6f66:	90 e0       	ldi	r25, 0x00	; 0
    6f68:	88 0f       	add	r24, r24
    6f6a:	99 1f       	adc	r25, r25
    6f6c:	00 97       	sbiw	r24, 0x00	; 0
    6f6e:	19 f4       	brne	.+6      	; 0x6f76 <memcpy_to_eeprom_with_checksum+0x32>
    6f70:	89 81       	ldd	r24, Y+1	; 0x01
    6f72:	88 23       	and	r24, r24
    6f74:	2c f4       	brge	.+10     	; 0x6f80 <memcpy_to_eeprom_with_checksum+0x3c>
    6f76:	81 e0       	ldi	r24, 0x01	; 1
    6f78:	90 e0       	ldi	r25, 0x00	; 0
    6f7a:	88 87       	std	Y+8, r24	; 0x08
    6f7c:	99 87       	std	Y+9, r25	; 0x09
    6f7e:	02 c0       	rjmp	.+4      	; 0x6f84 <memcpy_to_eeprom_with_checksum+0x40>
    6f80:	18 86       	std	Y+8, r1	; 0x08
    6f82:	19 86       	std	Y+9, r1	; 0x09
    6f84:	98 85       	ldd	r25, Y+8	; 0x08
    6f86:	99 83       	std	Y+1, r25	; 0x01
    checksum += *source;
    6f88:	ec 81       	ldd	r30, Y+4	; 0x04
    6f8a:	fd 81       	ldd	r31, Y+5	; 0x05
    6f8c:	90 81       	ld	r25, Z
    6f8e:	89 81       	ldd	r24, Y+1	; 0x01
    6f90:	89 0f       	add	r24, r25
    6f92:	89 83       	std	Y+1, r24	; 0x01
    eeprom_put_char(destination++, *(source++)); 
    6f94:	2a 81       	ldd	r18, Y+2	; 0x02
    6f96:	3b 81       	ldd	r19, Y+3	; 0x03
    6f98:	8a 81       	ldd	r24, Y+2	; 0x02
    6f9a:	9b 81       	ldd	r25, Y+3	; 0x03
    6f9c:	01 96       	adiw	r24, 0x01	; 1
    6f9e:	8a 83       	std	Y+2, r24	; 0x02
    6fa0:	9b 83       	std	Y+3, r25	; 0x03
    6fa2:	ec 81       	ldd	r30, Y+4	; 0x04
    6fa4:	fd 81       	ldd	r31, Y+5	; 0x05
    6fa6:	40 81       	ld	r20, Z
    6fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    6faa:	9d 81       	ldd	r25, Y+5	; 0x05
    6fac:	01 96       	adiw	r24, 0x01	; 1
    6fae:	8c 83       	std	Y+4, r24	; 0x04
    6fb0:	9d 83       	std	Y+5, r25	; 0x05
    6fb2:	c9 01       	movw	r24, r18
    6fb4:	64 2f       	mov	r22, r20
    6fb6:	0e 94 7f 37 	call	0x6efe	; 0x6efe <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    6fba:	8e 81       	ldd	r24, Y+6	; 0x06
    6fbc:	9f 81       	ldd	r25, Y+7	; 0x07
    6fbe:	01 97       	sbiw	r24, 0x01	; 1
    6fc0:	8e 83       	std	Y+6, r24	; 0x06
    6fc2:	9f 83       	std	Y+7, r25	; 0x07
    6fc4:	8e 81       	ldd	r24, Y+6	; 0x06
    6fc6:	9f 81       	ldd	r25, Y+7	; 0x07
    6fc8:	00 97       	sbiw	r24, 0x00	; 0
    6fca:	59 f6       	brne	.-106    	; 0x6f62 <memcpy_to_eeprom_with_checksum+0x1e>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    6fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    6fce:	9b 81       	ldd	r25, Y+3	; 0x03
    6fd0:	69 81       	ldd	r22, Y+1	; 0x01
    6fd2:	0e 94 7f 37 	call	0x6efe	; 0x6efe <eeprom_put_char>
}
    6fd6:	29 96       	adiw	r28, 0x09	; 9
    6fd8:	cd bf       	out	0x3d, r28	; 61
    6fda:	de bf       	out	0x3e, r29	; 62
    6fdc:	cf 91       	pop	r28
    6fde:	df 91       	pop	r29
    6fe0:	08 95       	ret

00006fe2 <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    6fe2:	df 93       	push	r29
    6fe4:	cf 93       	push	r28
    6fe6:	cd b7       	in	r28, 0x3d	; 61
    6fe8:	de b7       	in	r29, 0x3e	; 62
    6fea:	2c 97       	sbiw	r28, 0x0c	; 12
    6fec:	cd bf       	out	0x3d, r28	; 61
    6fee:	de bf       	out	0x3e, r29	; 62
    6ff0:	8b 83       	std	Y+3, r24	; 0x03
    6ff2:	9c 83       	std	Y+4, r25	; 0x04
    6ff4:	6d 83       	std	Y+5, r22	; 0x05
    6ff6:	7e 83       	std	Y+6, r23	; 0x06
    6ff8:	4f 83       	std	Y+7, r20	; 0x07
    6ffa:	58 87       	std	Y+8, r21	; 0x08
  unsigned char data, checksum = 0;
    6ffc:	19 82       	std	Y+1, r1	; 0x01
    6ffe:	30 c0       	rjmp	.+96     	; 0x7060 <memcpy_from_eeprom_with_checksum+0x7e>
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    7000:	2d 81       	ldd	r18, Y+5	; 0x05
    7002:	3e 81       	ldd	r19, Y+6	; 0x06
    7004:	8d 81       	ldd	r24, Y+5	; 0x05
    7006:	9e 81       	ldd	r25, Y+6	; 0x06
    7008:	01 96       	adiw	r24, 0x01	; 1
    700a:	8d 83       	std	Y+5, r24	; 0x05
    700c:	9e 83       	std	Y+6, r25	; 0x06
    700e:	c9 01       	movw	r24, r18
    7010:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <eeprom_get_char>
    7014:	8a 83       	std	Y+2, r24	; 0x02
    checksum = (checksum << 1) || (checksum >> 7);
    7016:	89 81       	ldd	r24, Y+1	; 0x01
    7018:	88 2f       	mov	r24, r24
    701a:	90 e0       	ldi	r25, 0x00	; 0
    701c:	88 0f       	add	r24, r24
    701e:	99 1f       	adc	r25, r25
    7020:	00 97       	sbiw	r24, 0x00	; 0
    7022:	19 f4       	brne	.+6      	; 0x702a <memcpy_from_eeprom_with_checksum+0x48>
    7024:	89 81       	ldd	r24, Y+1	; 0x01
    7026:	88 23       	and	r24, r24
    7028:	2c f4       	brge	.+10     	; 0x7034 <memcpy_from_eeprom_with_checksum+0x52>
    702a:	81 e0       	ldi	r24, 0x01	; 1
    702c:	90 e0       	ldi	r25, 0x00	; 0
    702e:	8b 87       	std	Y+11, r24	; 0x0b
    7030:	9c 87       	std	Y+12, r25	; 0x0c
    7032:	02 c0       	rjmp	.+4      	; 0x7038 <memcpy_from_eeprom_with_checksum+0x56>
    7034:	1b 86       	std	Y+11, r1	; 0x0b
    7036:	1c 86       	std	Y+12, r1	; 0x0c
    7038:	9b 85       	ldd	r25, Y+11	; 0x0b
    703a:	99 83       	std	Y+1, r25	; 0x01
    checksum += data;    
    703c:	99 81       	ldd	r25, Y+1	; 0x01
    703e:	8a 81       	ldd	r24, Y+2	; 0x02
    7040:	89 0f       	add	r24, r25
    7042:	89 83       	std	Y+1, r24	; 0x01
    *(destination++) = data; 
    7044:	eb 81       	ldd	r30, Y+3	; 0x03
    7046:	fc 81       	ldd	r31, Y+4	; 0x04
    7048:	8a 81       	ldd	r24, Y+2	; 0x02
    704a:	80 83       	st	Z, r24
    704c:	8b 81       	ldd	r24, Y+3	; 0x03
    704e:	9c 81       	ldd	r25, Y+4	; 0x04
    7050:	01 96       	adiw	r24, 0x01	; 1
    7052:	8b 83       	std	Y+3, r24	; 0x03
    7054:	9c 83       	std	Y+4, r25	; 0x04
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    7056:	8f 81       	ldd	r24, Y+7	; 0x07
    7058:	98 85       	ldd	r25, Y+8	; 0x08
    705a:	01 97       	sbiw	r24, 0x01	; 1
    705c:	8f 83       	std	Y+7, r24	; 0x07
    705e:	98 87       	std	Y+8, r25	; 0x08
    7060:	8f 81       	ldd	r24, Y+7	; 0x07
    7062:	98 85       	ldd	r25, Y+8	; 0x08
    7064:	00 97       	sbiw	r24, 0x00	; 0
    7066:	61 f6       	brne	.-104    	; 0x7000 <memcpy_from_eeprom_with_checksum+0x1e>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    7068:	8d 81       	ldd	r24, Y+5	; 0x05
    706a:	9e 81       	ldd	r25, Y+6	; 0x06
    706c:	0e 94 5f 37 	call	0x6ebe	; 0x6ebe <eeprom_get_char>
    7070:	98 2f       	mov	r25, r24
    7072:	19 86       	std	Y+9, r1	; 0x09
    7074:	1a 86       	std	Y+10, r1	; 0x0a
    7076:	89 81       	ldd	r24, Y+1	; 0x01
    7078:	98 17       	cp	r25, r24
    707a:	21 f4       	brne	.+8      	; 0x7084 <memcpy_from_eeprom_with_checksum+0xa2>
    707c:	81 e0       	ldi	r24, 0x01	; 1
    707e:	90 e0       	ldi	r25, 0x00	; 0
    7080:	89 87       	std	Y+9, r24	; 0x09
    7082:	9a 87       	std	Y+10, r25	; 0x0a
    7084:	89 85       	ldd	r24, Y+9	; 0x09
    7086:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    7088:	2c 96       	adiw	r28, 0x0c	; 12
    708a:	cd bf       	out	0x3d, r28	; 61
    708c:	de bf       	out	0x3e, r29	; 62
    708e:	cf 91       	pop	r28
    7090:	df 91       	pop	r29
    7092:	08 95       	ret

00007094 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    7094:	df 93       	push	r29
    7096:	cf 93       	push	r28
    7098:	cd b7       	in	r28, 0x3d	; 61
    709a:	de b7       	in	r29, 0x3e	; 62
    709c:	25 97       	sbiw	r28, 0x05	; 5
    709e:	cd bf       	out	0x3d, r28	; 61
    70a0:	de bf       	out	0x3e, r29	; 62
    70a2:	8b 83       	std	Y+3, r24	; 0x03
    70a4:	6c 83       	std	Y+4, r22	; 0x04
    70a6:	4d 83       	std	Y+5, r20	; 0x05
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    70a8:	0e 94 ef 38 	call	0x71de	; 0x71de <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    70ac:	e0 ec       	ldi	r30, 0xC0	; 192
    70ae:	f1 e0       	ldi	r31, 0x01	; 1
    70b0:	83 e3       	ldi	r24, 0x33	; 51
    70b2:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    70b4:	8b 81       	ldd	r24, Y+3	; 0x03
    70b6:	88 2f       	mov	r24, r24
    70b8:	90 e0       	ldi	r25, 0x00	; 0
    70ba:	88 0f       	add	r24, r24
    70bc:	99 1f       	adc	r25, r25
    70be:	82 95       	swap	r24
    70c0:	92 95       	swap	r25
    70c2:	90 7f       	andi	r25, 0xF0	; 240
    70c4:	98 27       	eor	r25, r24
    70c6:	80 7f       	andi	r24, 0xF0	; 240
    70c8:	98 27       	eor	r25, r24
    70ca:	9c 01       	movw	r18, r24
    70cc:	8c 81       	ldd	r24, Y+4	; 0x04
    70ce:	88 2f       	mov	r24, r24
    70d0:	90 e0       	ldi	r25, 0x00	; 0
    70d2:	8f 71       	andi	r24, 0x1F	; 31
    70d4:	90 70       	andi	r25, 0x00	; 0
    70d6:	82 2b       	or	r24, r18
    70d8:	93 2b       	or	r25, r19
    70da:	89 83       	std	Y+1, r24	; 0x01
    70dc:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    70de:	e0 ec       	ldi	r30, 0xC0	; 192
    70e0:	f1 e0       	ldi	r31, 0x01	; 1
    70e2:	89 81       	ldd	r24, Y+1	; 0x01
    70e4:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    70e6:	e0 ec       	ldi	r30, 0xC0	; 192
    70e8:	f1 e0       	ldi	r31, 0x01	; 1
    70ea:	89 81       	ldd	r24, Y+1	; 0x01
    70ec:	9a 81       	ldd	r25, Y+2	; 0x02
    70ee:	89 2f       	mov	r24, r25
    70f0:	99 27       	eor	r25, r25
    70f2:	8f 71       	andi	r24, 0x1F	; 31
    70f4:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    70f6:	e0 ec       	ldi	r30, 0xC0	; 192
    70f8:	f1 e0       	ldi	r31, 0x01	; 1
    70fa:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    70fc:	e0 ec       	ldi	r30, 0xC0	; 192
    70fe:	f1 e0       	ldi	r31, 0x01	; 1
    7100:	8d 81       	ldd	r24, Y+5	; 0x05
    7102:	84 83       	std	Z+4, r24	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    7104:	e0 ec       	ldi	r30, 0xC0	; 192
    7106:	f1 e0       	ldi	r31, 0x01	; 1
    7108:	85 e3       	ldi	r24, 0x35	; 53
    710a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    710c:	ef 93       	push	r30
    710e:	ff 93       	push	r31
    7110:	0f 93       	push	r16
    7112:	2f 93       	push	r18
    7114:	eb ec       	ldi	r30, 0xCB	; 203
    7116:	f1 e0       	ldi	r31, 0x01	; 1
    7118:	08 ed       	ldi	r16, 0xD8	; 216
    711a:	21 e0       	ldi	r18, 0x01	; 1
    711c:	04 bf       	out	0x34, r16	; 52
    711e:	20 83       	st	Z, r18
    7120:	2f 91       	pop	r18
    7122:	0f 91       	pop	r16
    7124:	ff 91       	pop	r31
    7126:	ef 91       	pop	r30
}
    7128:	25 96       	adiw	r28, 0x05	; 5
    712a:	cd bf       	out	0x3d, r28	; 61
    712c:	de bf       	out	0x3e, r29	; 62
    712e:	cf 91       	pop	r28
    7130:	df 91       	pop	r29
    7132:	08 95       	ret

00007134 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    7134:	df 93       	push	r29
    7136:	cf 93       	push	r28
    7138:	00 d0       	rcall	.+0      	; 0x713a <EEPROM_ReadByte+0x6>
    713a:	0f 92       	push	r0
    713c:	cd b7       	in	r28, 0x3d	; 61
    713e:	de b7       	in	r29, 0x3e	; 62
    7140:	8b 83       	std	Y+3, r24	; 0x03
    7142:	6c 83       	std	Y+4, r22	; 0x04
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    7144:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <EEPROM_WaitForNVM>

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    7148:	8b 81       	ldd	r24, Y+3	; 0x03
    714a:	88 2f       	mov	r24, r24
    714c:	90 e0       	ldi	r25, 0x00	; 0
    714e:	88 0f       	add	r24, r24
    7150:	99 1f       	adc	r25, r25
    7152:	82 95       	swap	r24
    7154:	92 95       	swap	r25
    7156:	90 7f       	andi	r25, 0xF0	; 240
    7158:	98 27       	eor	r25, r24
    715a:	80 7f       	andi	r24, 0xF0	; 240
    715c:	98 27       	eor	r25, r24
    715e:	9c 01       	movw	r18, r24
    7160:	8c 81       	ldd	r24, Y+4	; 0x04
    7162:	88 2f       	mov	r24, r24
    7164:	90 e0       	ldi	r25, 0x00	; 0
    7166:	8f 71       	andi	r24, 0x1F	; 31
    7168:	90 70       	andi	r25, 0x00	; 0
    716a:	82 2b       	or	r24, r18
    716c:	93 2b       	or	r25, r19
    716e:	89 83       	std	Y+1, r24	; 0x01
    7170:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    7172:	e0 ec       	ldi	r30, 0xC0	; 192
    7174:	f1 e0       	ldi	r31, 0x01	; 1
    7176:	89 81       	ldd	r24, Y+1	; 0x01
    7178:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    717a:	e0 ec       	ldi	r30, 0xC0	; 192
    717c:	f1 e0       	ldi	r31, 0x01	; 1
    717e:	89 81       	ldd	r24, Y+1	; 0x01
    7180:	9a 81       	ldd	r25, Y+2	; 0x02
    7182:	89 2f       	mov	r24, r25
    7184:	99 27       	eor	r25, r25
    7186:	8f 71       	andi	r24, 0x1F	; 31
    7188:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    718a:	e0 ec       	ldi	r30, 0xC0	; 192
    718c:	f1 e0       	ldi	r31, 0x01	; 1
    718e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    7190:	e0 ec       	ldi	r30, 0xC0	; 192
    7192:	f1 e0       	ldi	r31, 0x01	; 1
    7194:	86 e0       	ldi	r24, 0x06	; 6
    7196:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    7198:	ef 93       	push	r30
    719a:	ff 93       	push	r31
    719c:	0f 93       	push	r16
    719e:	2f 93       	push	r18
    71a0:	eb ec       	ldi	r30, 0xCB	; 203
    71a2:	f1 e0       	ldi	r31, 0x01	; 1
    71a4:	08 ed       	ldi	r16, 0xD8	; 216
    71a6:	21 e0       	ldi	r18, 0x01	; 1
    71a8:	04 bf       	out	0x34, r16	; 52
    71aa:	20 83       	st	Z, r18
    71ac:	2f 91       	pop	r18
    71ae:	0f 91       	pop	r16
    71b0:	ff 91       	pop	r31
    71b2:	ef 91       	pop	r30

	return NVM.DATA0;
    71b4:	e0 ec       	ldi	r30, 0xC0	; 192
    71b6:	f1 e0       	ldi	r31, 0x01	; 1
    71b8:	84 81       	ldd	r24, Z+4	; 0x04
}
    71ba:	24 96       	adiw	r28, 0x04	; 4
    71bc:	cd bf       	out	0x3d, r28	; 61
    71be:	de bf       	out	0x3e, r29	; 62
    71c0:	cf 91       	pop	r28
    71c2:	df 91       	pop	r29
    71c4:	08 95       	ret

000071c6 <EEPROM_WaitForNVM>:
 *  including EEPROM. Use this function before any EEPROM accesses,
 *  if you are not certain that any previous operations are finished yet,
 *  like an EEPROM write.
 */
void EEPROM_WaitForNVM( void )
{
    71c6:	df 93       	push	r29
    71c8:	cf 93       	push	r28
    71ca:	cd b7       	in	r28, 0x3d	; 61
    71cc:	de b7       	in	r29, 0x3e	; 62
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    71ce:	e0 ec       	ldi	r30, 0xC0	; 192
    71d0:	f1 e0       	ldi	r31, 0x01	; 1
    71d2:	87 85       	ldd	r24, Z+15	; 0x0f
    71d4:	88 23       	and	r24, r24
    71d6:	dc f3       	brlt	.-10     	; 0x71ce <EEPROM_WaitForNVM+0x8>
}
    71d8:	cf 91       	pop	r28
    71da:	df 91       	pop	r29
    71dc:	08 95       	ret

000071de <EEPROM_FlushBuffer>:
 *  This function also works for memory mapped EEPROM access.
 *
 *  \note The EEPROM write operations will automatically flush the buffer for you.
 */
void EEPROM_FlushBuffer( void )
{
    71de:	df 93       	push	r29
    71e0:	cf 93       	push	r28
    71e2:	cd b7       	in	r28, 0x3d	; 61
    71e4:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    71e6:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <EEPROM_WaitForNVM>

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    71ea:	e0 ec       	ldi	r30, 0xC0	; 192
    71ec:	f1 e0       	ldi	r31, 0x01	; 1
    71ee:	87 85       	ldd	r24, Z+15	; 0x0f
    71f0:	88 2f       	mov	r24, r24
    71f2:	90 e0       	ldi	r25, 0x00	; 0
    71f4:	82 70       	andi	r24, 0x02	; 2
    71f6:	90 70       	andi	r25, 0x00	; 0
    71f8:	00 97       	sbiw	r24, 0x00	; 0
    71fa:	91 f0       	breq	.+36     	; 0x7220 <EEPROM_FlushBuffer+0x42>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    71fc:	e0 ec       	ldi	r30, 0xC0	; 192
    71fe:	f1 e0       	ldi	r31, 0x01	; 1
    7200:	86 e3       	ldi	r24, 0x36	; 54
    7202:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    7204:	ef 93       	push	r30
    7206:	ff 93       	push	r31
    7208:	0f 93       	push	r16
    720a:	2f 93       	push	r18
    720c:	eb ec       	ldi	r30, 0xCB	; 203
    720e:	f1 e0       	ldi	r31, 0x01	; 1
    7210:	08 ed       	ldi	r16, 0xD8	; 216
    7212:	21 e0       	ldi	r18, 0x01	; 1
    7214:	04 bf       	out	0x34, r16	; 52
    7216:	20 83       	st	Z, r18
    7218:	2f 91       	pop	r18
    721a:	0f 91       	pop	r16
    721c:	ff 91       	pop	r31
    721e:	ef 91       	pop	r30
	}
}
    7220:	cf 91       	pop	r28
    7222:	df 91       	pop	r29
    7224:	08 95       	ret

00007226 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    7226:	df 93       	push	r29
    7228:	cf 93       	push	r28
    722a:	0f 92       	push	r0
    722c:	0f 92       	push	r0
    722e:	cd b7       	in	r28, 0x3d	; 61
    7230:	de b7       	in	r29, 0x3e	; 62
    7232:	89 83       	std	Y+1, r24	; 0x01
    7234:	6a 83       	std	Y+2, r22	; 0x02
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
    7236:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    723a:	e0 ec       	ldi	r30, 0xC0	; 192
    723c:	f1 e0       	ldi	r31, 0x01	; 1
    723e:	83 e3       	ldi	r24, 0x33	; 51
    7240:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    7242:	e0 ec       	ldi	r30, 0xC0	; 192
    7244:	f1 e0       	ldi	r31, 0x01	; 1
    7246:	89 81       	ldd	r24, Y+1	; 0x01
    7248:	80 83       	st	Z, r24
	NVM.ADDR1 = 0x00;
    724a:	e0 ec       	ldi	r30, 0xC0	; 192
    724c:	f1 e0       	ldi	r31, 0x01	; 1
    724e:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    7250:	e0 ec       	ldi	r30, 0xC0	; 192
    7252:	f1 e0       	ldi	r31, 0x01	; 1
    7254:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    7256:	e0 ec       	ldi	r30, 0xC0	; 192
    7258:	f1 e0       	ldi	r31, 0x01	; 1
    725a:	8a 81       	ldd	r24, Y+2	; 0x02
    725c:	84 83       	std	Z+4, r24	; 0x04
}
    725e:	0f 90       	pop	r0
    7260:	0f 90       	pop	r0
    7262:	cf 91       	pop	r28
    7264:	df 91       	pop	r29
    7266:	08 95       	ret

00007268 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    7268:	df 93       	push	r29
    726a:	cf 93       	push	r28
    726c:	00 d0       	rcall	.+0      	; 0x726e <EEPROM_LoadPage+0x6>
    726e:	cd b7       	in	r28, 0x3d	; 61
    7270:	de b7       	in	r29, 0x3e	; 62
    7272:	8a 83       	std	Y+2, r24	; 0x02
    7274:	9b 83       	std	Y+3, r25	; 0x03
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    7276:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    727a:	e0 ec       	ldi	r30, 0xC0	; 192
    727c:	f1 e0       	ldi	r31, 0x01	; 1
    727e:	83 e3       	ldi	r24, 0x33	; 51
    7280:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    7282:	e0 ec       	ldi	r30, 0xC0	; 192
    7284:	f1 e0       	ldi	r31, 0x01	; 1
    7286:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    7288:	e0 ec       	ldi	r30, 0xC0	; 192
    728a:	f1 e0       	ldi	r31, 0x01	; 1
    728c:	12 82       	std	Z+2, r1	; 0x02

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    728e:	19 82       	std	Y+1, r1	; 0x01
    7290:	14 c0       	rjmp	.+40     	; 0x72ba <EEPROM_LoadPage+0x52>
		NVM.ADDR0 = i;
    7292:	e0 ec       	ldi	r30, 0xC0	; 192
    7294:	f1 e0       	ldi	r31, 0x01	; 1
    7296:	89 81       	ldd	r24, Y+1	; 0x01
    7298:	80 83       	st	Z, r24
		NVM.DATA0 = *values;
    729a:	a0 ec       	ldi	r26, 0xC0	; 192
    729c:	b1 e0       	ldi	r27, 0x01	; 1
    729e:	ea 81       	ldd	r30, Y+2	; 0x02
    72a0:	fb 81       	ldd	r31, Y+3	; 0x03
    72a2:	80 81       	ld	r24, Z
    72a4:	14 96       	adiw	r26, 0x04	; 4
    72a6:	8c 93       	st	X, r24
    72a8:	14 97       	sbiw	r26, 0x04	; 4
		++values;
    72aa:	8a 81       	ldd	r24, Y+2	; 0x02
    72ac:	9b 81       	ldd	r25, Y+3	; 0x03
    72ae:	01 96       	adiw	r24, 0x01	; 1
    72b0:	8a 83       	std	Y+2, r24	; 0x02
    72b2:	9b 83       	std	Y+3, r25	; 0x03
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    72b4:	89 81       	ldd	r24, Y+1	; 0x01
    72b6:	8f 5f       	subi	r24, 0xFF	; 255
    72b8:	89 83       	std	Y+1, r24	; 0x01
    72ba:	89 81       	ldd	r24, Y+1	; 0x01
    72bc:	80 32       	cpi	r24, 0x20	; 32
    72be:	48 f3       	brcs	.-46     	; 0x7292 <EEPROM_LoadPage+0x2a>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    72c0:	23 96       	adiw	r28, 0x03	; 3
    72c2:	cd bf       	out	0x3d, r28	; 61
    72c4:	de bf       	out	0x3e, r29	; 62
    72c6:	cf 91       	pop	r28
    72c8:	df 91       	pop	r29
    72ca:	08 95       	ret

000072cc <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    72cc:	df 93       	push	r29
    72ce:	cf 93       	push	r28
    72d0:	00 d0       	rcall	.+0      	; 0x72d2 <EEPROM_AtomicWritePage+0x6>
    72d2:	cd b7       	in	r28, 0x3d	; 61
    72d4:	de b7       	in	r29, 0x3e	; 62
    72d6:	8b 83       	std	Y+3, r24	; 0x03
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    72d8:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    72dc:	8b 81       	ldd	r24, Y+3	; 0x03
    72de:	88 2f       	mov	r24, r24
    72e0:	90 e0       	ldi	r25, 0x00	; 0
    72e2:	88 0f       	add	r24, r24
    72e4:	99 1f       	adc	r25, r25
    72e6:	82 95       	swap	r24
    72e8:	92 95       	swap	r25
    72ea:	90 7f       	andi	r25, 0xF0	; 240
    72ec:	98 27       	eor	r25, r24
    72ee:	80 7f       	andi	r24, 0xF0	; 240
    72f0:	98 27       	eor	r25, r24
    72f2:	89 83       	std	Y+1, r24	; 0x01
    72f4:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    72f6:	e0 ec       	ldi	r30, 0xC0	; 192
    72f8:	f1 e0       	ldi	r31, 0x01	; 1
    72fa:	89 81       	ldd	r24, Y+1	; 0x01
    72fc:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    72fe:	e0 ec       	ldi	r30, 0xC0	; 192
    7300:	f1 e0       	ldi	r31, 0x01	; 1
    7302:	89 81       	ldd	r24, Y+1	; 0x01
    7304:	9a 81       	ldd	r25, Y+2	; 0x02
    7306:	89 2f       	mov	r24, r25
    7308:	99 27       	eor	r25, r25
    730a:	8f 71       	andi	r24, 0x1F	; 31
    730c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    730e:	e0 ec       	ldi	r30, 0xC0	; 192
    7310:	f1 e0       	ldi	r31, 0x01	; 1
    7312:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    7314:	e0 ec       	ldi	r30, 0xC0	; 192
    7316:	f1 e0       	ldi	r31, 0x01	; 1
    7318:	85 e3       	ldi	r24, 0x35	; 53
    731a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    731c:	ef 93       	push	r30
    731e:	ff 93       	push	r31
    7320:	0f 93       	push	r16
    7322:	2f 93       	push	r18
    7324:	eb ec       	ldi	r30, 0xCB	; 203
    7326:	f1 e0       	ldi	r31, 0x01	; 1
    7328:	08 ed       	ldi	r16, 0xD8	; 216
    732a:	21 e0       	ldi	r18, 0x01	; 1
    732c:	04 bf       	out	0x34, r16	; 52
    732e:	20 83       	st	Z, r18
    7330:	2f 91       	pop	r18
    7332:	0f 91       	pop	r16
    7334:	ff 91       	pop	r31
    7336:	ef 91       	pop	r30
}
    7338:	23 96       	adiw	r28, 0x03	; 3
    733a:	cd bf       	out	0x3d, r28	; 61
    733c:	de bf       	out	0x3e, r29	; 62
    733e:	cf 91       	pop	r28
    7340:	df 91       	pop	r29
    7342:	08 95       	ret

00007344 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    7344:	df 93       	push	r29
    7346:	cf 93       	push	r28
    7348:	00 d0       	rcall	.+0      	; 0x734a <EEPROM_ErasePage+0x6>
    734a:	cd b7       	in	r28, 0x3d	; 61
    734c:	de b7       	in	r29, 0x3e	; 62
    734e:	8b 83       	std	Y+3, r24	; 0x03
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    7350:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    7354:	8b 81       	ldd	r24, Y+3	; 0x03
    7356:	88 2f       	mov	r24, r24
    7358:	90 e0       	ldi	r25, 0x00	; 0
    735a:	88 0f       	add	r24, r24
    735c:	99 1f       	adc	r25, r25
    735e:	82 95       	swap	r24
    7360:	92 95       	swap	r25
    7362:	90 7f       	andi	r25, 0xF0	; 240
    7364:	98 27       	eor	r25, r24
    7366:	80 7f       	andi	r24, 0xF0	; 240
    7368:	98 27       	eor	r25, r24
    736a:	89 83       	std	Y+1, r24	; 0x01
    736c:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    736e:	e0 ec       	ldi	r30, 0xC0	; 192
    7370:	f1 e0       	ldi	r31, 0x01	; 1
    7372:	89 81       	ldd	r24, Y+1	; 0x01
    7374:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    7376:	e0 ec       	ldi	r30, 0xC0	; 192
    7378:	f1 e0       	ldi	r31, 0x01	; 1
    737a:	89 81       	ldd	r24, Y+1	; 0x01
    737c:	9a 81       	ldd	r25, Y+2	; 0x02
    737e:	89 2f       	mov	r24, r25
    7380:	99 27       	eor	r25, r25
    7382:	8f 71       	andi	r24, 0x1F	; 31
    7384:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    7386:	e0 ec       	ldi	r30, 0xC0	; 192
    7388:	f1 e0       	ldi	r31, 0x01	; 1
    738a:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    738c:	e0 ec       	ldi	r30, 0xC0	; 192
    738e:	f1 e0       	ldi	r31, 0x01	; 1
    7390:	82 e3       	ldi	r24, 0x32	; 50
    7392:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    7394:	ef 93       	push	r30
    7396:	ff 93       	push	r31
    7398:	0f 93       	push	r16
    739a:	2f 93       	push	r18
    739c:	eb ec       	ldi	r30, 0xCB	; 203
    739e:	f1 e0       	ldi	r31, 0x01	; 1
    73a0:	08 ed       	ldi	r16, 0xD8	; 216
    73a2:	21 e0       	ldi	r18, 0x01	; 1
    73a4:	04 bf       	out	0x34, r16	; 52
    73a6:	20 83       	st	Z, r18
    73a8:	2f 91       	pop	r18
    73aa:	0f 91       	pop	r16
    73ac:	ff 91       	pop	r31
    73ae:	ef 91       	pop	r30
}
    73b0:	23 96       	adiw	r28, 0x03	; 3
    73b2:	cd bf       	out	0x3d, r28	; 61
    73b4:	de bf       	out	0x3e, r29	; 62
    73b6:	cf 91       	pop	r28
    73b8:	df 91       	pop	r29
    73ba:	08 95       	ret

000073bc <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    73bc:	df 93       	push	r29
    73be:	cf 93       	push	r28
    73c0:	00 d0       	rcall	.+0      	; 0x73c2 <EEPROM_SplitWritePage+0x6>
    73c2:	cd b7       	in	r28, 0x3d	; 61
    73c4:	de b7       	in	r29, 0x3e	; 62
    73c6:	8b 83       	std	Y+3, r24	; 0x03
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    73c8:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    73cc:	8b 81       	ldd	r24, Y+3	; 0x03
    73ce:	88 2f       	mov	r24, r24
    73d0:	90 e0       	ldi	r25, 0x00	; 0
    73d2:	88 0f       	add	r24, r24
    73d4:	99 1f       	adc	r25, r25
    73d6:	82 95       	swap	r24
    73d8:	92 95       	swap	r25
    73da:	90 7f       	andi	r25, 0xF0	; 240
    73dc:	98 27       	eor	r25, r24
    73de:	80 7f       	andi	r24, 0xF0	; 240
    73e0:	98 27       	eor	r25, r24
    73e2:	89 83       	std	Y+1, r24	; 0x01
    73e4:	9a 83       	std	Y+2, r25	; 0x02

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    73e6:	e0 ec       	ldi	r30, 0xC0	; 192
    73e8:	f1 e0       	ldi	r31, 0x01	; 1
    73ea:	89 81       	ldd	r24, Y+1	; 0x01
    73ec:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    73ee:	e0 ec       	ldi	r30, 0xC0	; 192
    73f0:	f1 e0       	ldi	r31, 0x01	; 1
    73f2:	89 81       	ldd	r24, Y+1	; 0x01
    73f4:	9a 81       	ldd	r25, Y+2	; 0x02
    73f6:	89 2f       	mov	r24, r25
    73f8:	99 27       	eor	r25, r25
    73fa:	8f 71       	andi	r24, 0x1F	; 31
    73fc:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    73fe:	e0 ec       	ldi	r30, 0xC0	; 192
    7400:	f1 e0       	ldi	r31, 0x01	; 1
    7402:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    7404:	e0 ec       	ldi	r30, 0xC0	; 192
    7406:	f1 e0       	ldi	r31, 0x01	; 1
    7408:	84 e3       	ldi	r24, 0x34	; 52
    740a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    740c:	ef 93       	push	r30
    740e:	ff 93       	push	r31
    7410:	0f 93       	push	r16
    7412:	2f 93       	push	r18
    7414:	eb ec       	ldi	r30, 0xCB	; 203
    7416:	f1 e0       	ldi	r31, 0x01	; 1
    7418:	08 ed       	ldi	r16, 0xD8	; 216
    741a:	21 e0       	ldi	r18, 0x01	; 1
    741c:	04 bf       	out	0x34, r16	; 52
    741e:	20 83       	st	Z, r18
    7420:	2f 91       	pop	r18
    7422:	0f 91       	pop	r16
    7424:	ff 91       	pop	r31
    7426:	ef 91       	pop	r30
}
    7428:	23 96       	adiw	r28, 0x03	; 3
    742a:	cd bf       	out	0x3d, r28	; 61
    742c:	de bf       	out	0x3e, r29	; 62
    742e:	cf 91       	pop	r28
    7430:	df 91       	pop	r29
    7432:	08 95       	ret

00007434 <EEPROM_EraseAll>:
/* Erase entire EEPROM memory.
 *
 *  This function erases the entire EEPROM memory block to 0xFF.
 */
void EEPROM_EraseAll( void )
{
    7434:	df 93       	push	r29
    7436:	cf 93       	push	r28
    7438:	cd b7       	in	r28, 0x3d	; 61
    743a:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    743c:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <EEPROM_WaitForNVM>

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    7440:	e0 ec       	ldi	r30, 0xC0	; 192
    7442:	f1 e0       	ldi	r31, 0x01	; 1
    7444:	80 e3       	ldi	r24, 0x30	; 48
    7446:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    7448:	ef 93       	push	r30
    744a:	ff 93       	push	r31
    744c:	0f 93       	push	r16
    744e:	2f 93       	push	r18
    7450:	eb ec       	ldi	r30, 0xCB	; 203
    7452:	f1 e0       	ldi	r31, 0x01	; 1
    7454:	08 ed       	ldi	r16, 0xD8	; 216
    7456:	21 e0       	ldi	r18, 0x01	; 1
    7458:	04 bf       	out	0x34, r16	; 52
    745a:	20 83       	st	Z, r18
    745c:	2f 91       	pop	r18
    745e:	0f 91       	pop	r16
    7460:	ff 91       	pop	r31
    7462:	ef 91       	pop	r30
}
    7464:	cf 91       	pop	r28
    7466:	df 91       	pop	r29
    7468:	08 95       	ret

0000746a <tg_init>:
/*
 * tg_init()
 */

void tg_init() 
{
    746a:	df 93       	push	r29
    746c:	cf 93       	push	r28
    746e:	0f 92       	push	r0
    7470:	cd b7       	in	r28, 0x3d	; 61
    7472:	de b7       	in	r29, 0x3e	; 62
	// initialize devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) { // don't bother with /dev/null
    7474:	81 e0       	ldi	r24, 0x01	; 1
    7476:	89 83       	std	Y+1, r24	; 0x01
    7478:	27 c0       	rjmp	.+78     	; 0x74c8 <tg_init+0x5e>
		tg.dev[i].flags = XIO_APP_PROMPTS_bm;
    747a:	89 81       	ldd	r24, Y+1	; 0x01
    747c:	28 2f       	mov	r18, r24
    747e:	30 e0       	ldi	r19, 0x00	; 0
    7480:	82 e5       	ldi	r24, 0x52	; 82
    7482:	90 e0       	ldi	r25, 0x00	; 0
    7484:	ac 01       	movw	r20, r24
    7486:	24 9f       	mul	r18, r20
    7488:	c0 01       	movw	r24, r0
    748a:	25 9f       	mul	r18, r21
    748c:	90 0d       	add	r25, r0
    748e:	34 9f       	mul	r19, r20
    7490:	90 0d       	add	r25, r0
    7492:	11 24       	eor	r1, r1
    7494:	fc 01       	movw	r30, r24
    7496:	e7 57       	subi	r30, 0x77	; 119
    7498:	fe 4d       	sbci	r31, 0xDE	; 222
    749a:	81 e0       	ldi	r24, 0x01	; 1
    749c:	80 83       	st	Z, r24
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    749e:	89 81       	ldd	r24, Y+1	; 0x01
    74a0:	28 2f       	mov	r18, r24
    74a2:	30 e0       	ldi	r19, 0x00	; 0
    74a4:	82 e5       	ldi	r24, 0x52	; 82
    74a6:	90 e0       	ldi	r25, 0x00	; 0
    74a8:	ac 01       	movw	r20, r24
    74aa:	24 9f       	mul	r18, r20
    74ac:	c0 01       	movw	r24, r0
    74ae:	25 9f       	mul	r18, r21
    74b0:	90 0d       	add	r25, r0
    74b2:	34 9f       	mul	r19, r20
    74b4:	90 0d       	add	r25, r0
    74b6:	11 24       	eor	r1, r1
    74b8:	fc 01       	movw	r30, r24
    74ba:	e6 57       	subi	r30, 0x76	; 118
    74bc:	fe 4d       	sbci	r31, 0xDE	; 222
    74be:	80 e5       	ldi	r24, 0x50	; 80
    74c0:	80 83       	st	Z, r24
 */

void tg_init() 
{
	// initialize devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) { // don't bother with /dev/null
    74c2:	89 81       	ldd	r24, Y+1	; 0x01
    74c4:	8f 5f       	subi	r24, 0xFF	; 255
    74c6:	89 83       	std	Y+1, r24	; 0x01
    74c8:	89 81       	ldd	r24, Y+1	; 0x01
    74ca:	84 30       	cpi	r24, 0x04	; 4
    74cc:	b0 f2       	brcs	.-84     	; 0x747a <tg_init+0x10>
		tg.dev[i].flags = XIO_APP_PROMPTS_bm;
		tg.dev[i].len = sizeof(tg.dev[i].buf);
	}
	tg.dev[XIO_DEV_PGM].flags = 0;			// no asterisks on file devices
    74ce:	10 92 7f 22 	sts	0x227F, r1

	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
    74d2:	81 e0       	ldi	r24, 0x01	; 1
    74d4:	80 93 87 21 	sts	0x2187, r24
	_tg_set_source(tg.default_src);			// set initial active source
    74d8:	80 91 87 21 	lds	r24, 0x2187
    74dc:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <_tg_set_source>
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode
    74e0:	80 e0       	ldi	r24, 0x00	; 0
    74e2:	0e 94 d8 3b 	call	0x77b0	; 0x77b0 <_tg_set_mode>
	tg.state = TG_READY_UNPROMPTED;
    74e6:	10 92 83 21 	sts	0x2183, r1

	// version string
	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    74ea:	82 e7       	ldi	r24, 0x72	; 114
    74ec:	99 e1       	ldi	r25, 0x19	; 25
    74ee:	28 e6       	ldi	r18, 0x68	; 104
    74f0:	39 e1       	ldi	r19, 0x19	; 25
    74f2:	00 d0       	rcall	.+0      	; 0x74f4 <tg_init+0x8a>
    74f4:	0f 92       	push	r0
    74f6:	ed b7       	in	r30, 0x3d	; 61
    74f8:	fe b7       	in	r31, 0x3e	; 62
    74fa:	31 96       	adiw	r30, 0x01	; 1
    74fc:	80 83       	st	Z, r24
    74fe:	91 83       	std	Z+1, r25	; 0x01
    7500:	22 83       	std	Z+2, r18	; 0x02
    7502:	33 83       	std	Z+3, r19	; 0x03
    7504:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    7508:	0f 90       	pop	r0
    750a:	0f 90       	pop	r0
    750c:	0f 90       	pop	r0
    750e:	0f 90       	pop	r0
}
    7510:	0f 90       	pop	r0
    7512:	cf 91       	pop	r28
    7514:	df 91       	pop	r29
    7516:	08 95       	ret

00007518 <tg_controller>:
/* 
 * tg_controller() - top-level controller.
 */

void tg_controller()
{
    7518:	df 93       	push	r29
    751a:	cf 93       	push	r28
    751c:	cd b7       	in	r28, 0x3d	; 61
    751e:	de b7       	in	r29, 0x3e	; 62
	// top priority tasks
	st_execute_move();
    7520:	0e 94 a3 32 	call	0x6546	; 0x6546 <st_execute_move>

	// medium priority tasks
	if ((tg.status = mc_line_continue()) == TG_EAGAIN) {	// line generator
    7524:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <mc_line_continue>
    7528:	80 93 84 21 	sts	0x2184, r24
    752c:	80 91 84 21 	lds	r24, 0x2184
    7530:	81 30       	cpi	r24, 0x01	; 1
    7532:	91 f0       	breq	.+36     	; 0x7558 <tg_controller+0x40>
		return;
	}
	if ((tg.status = mc_arc_continue()) == TG_EAGAIN) {	 	// arc generator 
    7534:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <mc_arc_continue>
    7538:	80 93 84 21 	sts	0x2184, r24
    753c:	80 91 84 21 	lds	r24, 0x2184
    7540:	81 30       	cpi	r24, 0x01	; 1
    7542:	51 f0       	breq	.+20     	; 0x7558 <tg_controller+0x40>
		return;
	}

	// low priority tasks
	if ((tg.status = _tg_read_next_line()) == TG_EAGAIN) {	// input line
    7544:	0e 94 af 3a 	call	0x755e	; 0x755e <_tg_read_next_line>
    7548:	80 93 84 21 	sts	0x2184, r24
    754c:	80 91 84 21 	lds	r24, 0x2184
    7550:	81 30       	cpi	r24, 0x01	; 1
    7552:	11 f0       	breq	.+4      	; 0x7558 <tg_controller+0x40>
		return;
	}
	_tg_prompt();		// Send a prompt - but only if controller is ready for input
    7554:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <_tg_prompt>
}
    7558:	cf 91       	pop	r28
    755a:	df 91       	pop	r29
    755c:	08 95       	ret

0000755e <_tg_read_next_line>:
/* 
 * _tg_read_next_line() - Perform a non-blocking line read from active input device
 */

static int _tg_read_next_line()
{
    755e:	df 93       	push	r29
    7560:	cf 93       	push	r28
    7562:	0f 92       	push	r0
    7564:	0f 92       	push	r0
    7566:	cd b7       	in	r28, 0x3d	; 61
    7568:	de b7       	in	r29, 0x3e	; 62
	// read input line or return if not a completed line
	if ((tg.status = xio_fget_ln(tg.src, tg.dev[tg.src].buf, tg.dev[tg.src].len)) == TG_OK) {
    756a:	60 91 86 21 	lds	r22, 0x2186
    756e:	80 91 86 21 	lds	r24, 0x2186
    7572:	28 2f       	mov	r18, r24
    7574:	30 e0       	ldi	r19, 0x00	; 0
    7576:	82 e5       	ldi	r24, 0x52	; 82
    7578:	90 e0       	ldi	r25, 0x00	; 0
    757a:	ac 01       	movw	r20, r24
    757c:	24 9f       	mul	r18, r20
    757e:	c0 01       	movw	r24, r0
    7580:	25 9f       	mul	r18, r21
    7582:	90 0d       	add	r25, r0
    7584:	34 9f       	mul	r19, r20
    7586:	90 0d       	add	r25, r0
    7588:	11 24       	eor	r1, r1
    758a:	08 96       	adiw	r24, 0x08	; 8
    758c:	ac 01       	movw	r20, r24
    758e:	4d 57       	subi	r20, 0x7D	; 125
    7590:	5e 4d       	sbci	r21, 0xDE	; 222
    7592:	80 91 86 21 	lds	r24, 0x2186
    7596:	28 2f       	mov	r18, r24
    7598:	30 e0       	ldi	r19, 0x00	; 0
    759a:	82 e5       	ldi	r24, 0x52	; 82
    759c:	90 e0       	ldi	r25, 0x00	; 0
    759e:	fc 01       	movw	r30, r24
    75a0:	2e 9f       	mul	r18, r30
    75a2:	c0 01       	movw	r24, r0
    75a4:	2f 9f       	mul	r18, r31
    75a6:	90 0d       	add	r25, r0
    75a8:	3e 9f       	mul	r19, r30
    75aa:	90 0d       	add	r25, r0
    75ac:	11 24       	eor	r1, r1
    75ae:	fc 01       	movw	r30, r24
    75b0:	e6 57       	subi	r30, 0x76	; 118
    75b2:	fe 4d       	sbci	r31, 0xDE	; 222
    75b4:	90 81       	ld	r25, Z
    75b6:	86 2f       	mov	r24, r22
    75b8:	ba 01       	movw	r22, r20
    75ba:	49 2f       	mov	r20, r25
    75bc:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <xio_fget_ln>
    75c0:	80 93 84 21 	sts	0x2184, r24
    75c4:	80 91 84 21 	lds	r24, 0x2184
    75c8:	88 23       	and	r24, r24
    75ca:	a9 f4       	brne	.+42     	; 0x75f6 <_tg_read_next_line+0x98>
		tg.status = tg_parser(tg.dev[tg.src].buf);	// dispatch to parser
    75cc:	80 91 86 21 	lds	r24, 0x2186
    75d0:	28 2f       	mov	r18, r24
    75d2:	30 e0       	ldi	r19, 0x00	; 0
    75d4:	82 e5       	ldi	r24, 0x52	; 82
    75d6:	90 e0       	ldi	r25, 0x00	; 0
    75d8:	ac 01       	movw	r20, r24
    75da:	24 9f       	mul	r18, r20
    75dc:	c0 01       	movw	r24, r0
    75de:	25 9f       	mul	r18, r21
    75e0:	90 0d       	add	r25, r0
    75e2:	34 9f       	mul	r19, r20
    75e4:	90 0d       	add	r25, r0
    75e6:	11 24       	eor	r1, r1
    75e8:	08 96       	adiw	r24, 0x08	; 8
    75ea:	8d 57       	subi	r24, 0x7D	; 125
    75ec:	9e 4d       	sbci	r25, 0xDE	; 222
    75ee:	0e 94 3f 3b 	call	0x767e	; 0x767e <tg_parser>
    75f2:	80 93 84 21 	sts	0x2184, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    75f6:	80 91 84 21 	lds	r24, 0x2184
    75fa:	e8 2f       	mov	r30, r24
    75fc:	f0 e0       	ldi	r31, 0x00	; 0
    75fe:	e9 83       	std	Y+1, r30	; 0x01
    7600:	fa 83       	std	Y+2, r31	; 0x02
    7602:	29 81       	ldd	r18, Y+1	; 0x01
    7604:	3a 81       	ldd	r19, Y+2	; 0x02
    7606:	23 30       	cpi	r18, 0x03	; 3
    7608:	31 05       	cpc	r19, r1
    760a:	54 f4       	brge	.+20     	; 0x7620 <_tg_read_next_line+0xc2>
    760c:	49 81       	ldd	r20, Y+1	; 0x01
    760e:	5a 81       	ldd	r21, Y+2	; 0x02
    7610:	41 30       	cpi	r20, 0x01	; 1
    7612:	51 05       	cpc	r21, r1
    7614:	6c f5       	brge	.+90     	; 0x7670 <_tg_read_next_line+0x112>
    7616:	89 81       	ldd	r24, Y+1	; 0x01
    7618:	9a 81       	ldd	r25, Y+2	; 0x02
    761a:	00 97       	sbiw	r24, 0x00	; 0
    761c:	61 f0       	breq	.+24     	; 0x7636 <_tg_read_next_line+0xd8>
    761e:	26 c0       	rjmp	.+76     	; 0x766c <_tg_read_next_line+0x10e>
    7620:	e9 81       	ldd	r30, Y+1	; 0x01
    7622:	fa 81       	ldd	r31, Y+2	; 0x02
    7624:	e3 30       	cpi	r30, 0x03	; 3
    7626:	f1 05       	cpc	r31, r1
    7628:	49 f0       	breq	.+18     	; 0x763c <_tg_read_next_line+0xde>
    762a:	29 81       	ldd	r18, Y+1	; 0x01
    762c:	3a 81       	ldd	r19, Y+2	; 0x02
    762e:	25 30       	cpi	r18, 0x05	; 5
    7630:	31 05       	cpc	r19, r1
    7632:	51 f0       	breq	.+20     	; 0x7648 <_tg_read_next_line+0xea>
    7634:	1b c0       	rjmp	.+54     	; 0x766c <_tg_read_next_line+0x10e>

		case TG_EAGAIN: case TG_NOOP: break;		// no change of state

		case TG_OK: {								// finished a line OK
			tg.state = TG_READY_UNPROMPTED; 		// ready for next input line
    7636:	10 92 83 21 	sts	0x2183, r1
    763a:	1a c0       	rjmp	.+52     	; 0x7670 <_tg_read_next_line+0x112>
			break;
		}
		case TG_QUIT: {								// Quit returned from parser
			_tg_set_mode(TG_CONTROL_MODE);
    763c:	80 e0       	ldi	r24, 0x00	; 0
    763e:	0e 94 d8 3b 	call	0x77b0	; 0x77b0 <_tg_set_mode>
			tg.state = TG_READY_UNPROMPTED;
    7642:	10 92 83 21 	sts	0x2183, r1
    7646:	14 c0       	rjmp	.+40     	; 0x7670 <_tg_read_next_line+0x112>
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
    7648:	86 e8       	ldi	r24, 0x86	; 134
    764a:	99 e1       	ldi	r25, 0x19	; 25
    764c:	0f 92       	push	r0
    764e:	0f 92       	push	r0
    7650:	ed b7       	in	r30, 0x3d	; 61
    7652:	fe b7       	in	r31, 0x3e	; 62
    7654:	31 96       	adiw	r30, 0x01	; 1
    7656:	80 83       	st	Z, r24
    7658:	91 83       	std	Z+1, r25	; 0x01
    765a:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    765e:	0f 90       	pop	r0
    7660:	0f 90       	pop	r0
			tg_reset_source();						// reset to default src
    7662:	0e 94 f2 3b 	call	0x77e4	; 0x77e4 <tg_reset_source>
			tg.state = TG_READY_UNPROMPTED;
    7666:	10 92 83 21 	sts	0x2183, r1
    766a:	02 c0       	rjmp	.+4      	; 0x7670 <_tg_read_next_line+0x112>
			break;
		}
		default: {
			tg.state = TG_READY_UNPROMPTED;			// traps various error returns
    766c:	10 92 83 21 	sts	0x2183, r1
		}
	}
	return (TG_OK);
    7670:	80 e0       	ldi	r24, 0x00	; 0
    7672:	90 e0       	ldi	r25, 0x00	; 0
}
    7674:	0f 90       	pop	r0
    7676:	0f 90       	pop	r0
    7678:	cf 91       	pop	r28
    767a:	df 91       	pop	r29
    767c:	08 95       	ret

0000767e <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    767e:	df 93       	push	r29
    7680:	cf 93       	push	r28
    7682:	cd b7       	in	r28, 0x3d	; 61
    7684:	de b7       	in	r29, 0x3e	; 62
    7686:	28 97       	sbiw	r28, 0x08	; 8
    7688:	cd bf       	out	0x3d, r28	; 61
    768a:	de bf       	out	0x3e, r29	; 62
    768c:	89 83       	std	Y+1, r24	; 0x01
    768e:	9a 83       	std	Y+2, r25	; 0x02
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    7690:	80 91 85 21 	lds	r24, 0x2185
    7694:	88 23       	and	r24, r24
    7696:	09 f0       	breq	.+2      	; 0x769a <tg_parser+0x1c>
    7698:	52 c0       	rjmp	.+164    	; 0x773e <tg_parser+0xc0>
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
    769a:	e9 81       	ldd	r30, Y+1	; 0x01
    769c:	fa 81       	ldd	r31, Y+2	; 0x02
    769e:	80 81       	ld	r24, Z
    76a0:	81 36       	cpi	r24, 0x61	; 97
    76a2:	60 f0       	brcs	.+24     	; 0x76bc <tg_parser+0x3e>
    76a4:	e9 81       	ldd	r30, Y+1	; 0x01
    76a6:	fa 81       	ldd	r31, Y+2	; 0x02
    76a8:	80 81       	ld	r24, Z
    76aa:	8b 37       	cpi	r24, 0x7B	; 123
    76ac:	38 f4       	brcc	.+14     	; 0x76bc <tg_parser+0x3e>
			buf[0] = buf[0]-'a'+'A';
    76ae:	e9 81       	ldd	r30, Y+1	; 0x01
    76b0:	fa 81       	ldd	r31, Y+2	; 0x02
    76b2:	80 81       	ld	r24, Z
    76b4:	80 52       	subi	r24, 0x20	; 32
    76b6:	e9 81       	ldd	r30, Y+1	; 0x01
    76b8:	fa 81       	ldd	r31, Y+2	; 0x02
    76ba:	80 83       	st	Z, r24
		}
		switch (buf[0]) {
    76bc:	e9 81       	ldd	r30, Y+1	; 0x01
    76be:	fa 81       	ldd	r31, Y+2	; 0x02
    76c0:	80 81       	ld	r24, Z
    76c2:	28 2f       	mov	r18, r24
    76c4:	30 e0       	ldi	r19, 0x00	; 0
    76c6:	2f 83       	std	Y+7, r18	; 0x07
    76c8:	38 87       	std	Y+8, r19	; 0x08
    76ca:	8f 81       	ldd	r24, Y+7	; 0x07
    76cc:	98 85       	ldd	r25, Y+8	; 0x08
    76ce:	86 34       	cpi	r24, 0x46	; 70
    76d0:	91 05       	cpc	r25, r1
    76d2:	69 f1       	breq	.+90     	; 0x772e <tg_parser+0xb0>
    76d4:	2f 81       	ldd	r18, Y+7	; 0x07
    76d6:	38 85       	ldd	r19, Y+8	; 0x08
    76d8:	27 34       	cpi	r18, 0x47	; 71
    76da:	31 05       	cpc	r19, r1
    76dc:	84 f4       	brge	.+32     	; 0x76fe <tg_parser+0x80>
    76de:	8f 81       	ldd	r24, Y+7	; 0x07
    76e0:	98 85       	ldd	r25, Y+8	; 0x08
    76e2:	83 34       	cpi	r24, 0x43	; 67
    76e4:	91 05       	cpc	r25, r1
    76e6:	d9 f0       	breq	.+54     	; 0x771e <tg_parser+0xa0>
    76e8:	2f 81       	ldd	r18, Y+7	; 0x07
    76ea:	38 85       	ldd	r19, Y+8	; 0x08
    76ec:	24 34       	cpi	r18, 0x44	; 68
    76ee:	31 05       	cpc	r19, r1
    76f0:	d1 f0       	breq	.+52     	; 0x7726 <tg_parser+0xa8>
    76f2:	8f 81       	ldd	r24, Y+7	; 0x07
    76f4:	98 85       	ldd	r25, Y+8	; 0x08
    76f6:	8f 33       	cpi	r24, 0x3F	; 63
    76f8:	91 05       	cpc	r25, r1
    76fa:	89 f0       	breq	.+34     	; 0x771e <tg_parser+0xa0>
    76fc:	1d c0       	rjmp	.+58     	; 0x7738 <tg_parser+0xba>
    76fe:	2f 81       	ldd	r18, Y+7	; 0x07
    7700:	38 85       	ldd	r19, Y+8	; 0x08
    7702:	27 34       	cpi	r18, 0x47	; 71
    7704:	31 05       	cpc	r19, r1
    7706:	39 f0       	breq	.+14     	; 0x7716 <tg_parser+0x98>
    7708:	8f 81       	ldd	r24, Y+7	; 0x07
    770a:	98 85       	ldd	r25, Y+8	; 0x08
    770c:	8d 54       	subi	r24, 0x4D	; 77
    770e:	90 40       	sbci	r25, 0x00	; 0
    7710:	82 30       	cpi	r24, 0x02	; 2
    7712:	91 05       	cpc	r25, r1
    7714:	88 f4       	brcc	.+34     	; 0x7738 <tg_parser+0xba>
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    7716:	82 e0       	ldi	r24, 0x02	; 2
    7718:	0e 94 d8 3b 	call	0x77b0	; 0x77b0 <_tg_set_mode>
    771c:	10 c0       	rjmp	.+32     	; 0x773e <tg_parser+0xc0>
			case 'C': case '?': _tg_set_mode(TG_CONFIG_MODE); break;
    771e:	81 e0       	ldi	r24, 0x01	; 1
    7720:	0e 94 d8 3b 	call	0x77b0	; 0x77b0 <_tg_set_mode>
    7724:	0c c0       	rjmp	.+24     	; 0x773e <tg_parser+0xc0>
			case 'D': _tg_set_mode(TG_DIRECT_DRIVE_MODE); break;
    7726:	83 e0       	ldi	r24, 0x03	; 3
    7728:	0e 94 d8 3b 	call	0x77b0	; 0x77b0 <_tg_set_mode>
    772c:	08 c0       	rjmp	.+16     	; 0x773e <tg_parser+0xc0>
			case 'F': return (_tg_test_file());
    772e:	0e 94 4b 3c 	call	0x7896	; 0x7896 <_tg_test_file>
    7732:	8d 83       	std	Y+5, r24	; 0x05
    7734:	9e 83       	std	Y+6, r25	; 0x06
    7736:	34 c0       	rjmp	.+104    	; 0x77a0 <tg_parser+0x122>
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
    7738:	80 e0       	ldi	r24, 0x00	; 0
    773a:	0e 94 d8 3b 	call	0x77b0	; 0x77b0 <_tg_set_mode>
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    773e:	10 92 84 21 	sts	0x2184, r1
	switch (tg.mode) {
    7742:	80 91 85 21 	lds	r24, 0x2185
    7746:	28 2f       	mov	r18, r24
    7748:	30 e0       	ldi	r19, 0x00	; 0
    774a:	2b 83       	std	Y+3, r18	; 0x03
    774c:	3c 83       	std	Y+4, r19	; 0x04
    774e:	8b 81       	ldd	r24, Y+3	; 0x03
    7750:	9c 81       	ldd	r25, Y+4	; 0x04
    7752:	82 30       	cpi	r24, 0x02	; 2
    7754:	91 05       	cpc	r25, r1
    7756:	89 f0       	breq	.+34     	; 0x777a <tg_parser+0xfc>
    7758:	2b 81       	ldd	r18, Y+3	; 0x03
    775a:	3c 81       	ldd	r19, Y+4	; 0x04
    775c:	23 30       	cpi	r18, 0x03	; 3
    775e:	31 05       	cpc	r19, r1
    7760:	99 f0       	breq	.+38     	; 0x7788 <tg_parser+0x10a>
    7762:	8b 81       	ldd	r24, Y+3	; 0x03
    7764:	9c 81       	ldd	r25, Y+4	; 0x04
    7766:	81 30       	cpi	r24, 0x01	; 1
    7768:	91 05       	cpc	r25, r1
    776a:	a1 f4       	brne	.+40     	; 0x7794 <tg_parser+0x116>
		case TG_CONFIG_MODE: tg.status = cfg_parse(buf); break;
    776c:	89 81       	ldd	r24, Y+1	; 0x01
    776e:	9a 81       	ldd	r25, Y+2	; 0x02
    7770:	0e 94 65 1a 	call	0x34ca	; 0x34ca <cfg_parse>
    7774:	80 93 84 21 	sts	0x2184, r24
    7778:	0d c0       	rjmp	.+26     	; 0x7794 <tg_parser+0x116>
		case TG_GCODE_MODE: tg.status = gc_gcode_parser(buf); break;
    777a:	89 81       	ldd	r24, Y+1	; 0x01
    777c:	9a 81       	ldd	r25, Y+2	; 0x02
    777e:	0e 94 56 10 	call	0x20ac	; 0x20ac <gc_gcode_parser>
    7782:	80 93 84 21 	sts	0x2184, r24
    7786:	06 c0       	rjmp	.+12     	; 0x7794 <tg_parser+0x116>
		case TG_DIRECT_DRIVE_MODE: tg.status = dd_parser(buf); break;
    7788:	89 81       	ldd	r24, Y+1	; 0x01
    778a:	9a 81       	ldd	r25, Y+2	; 0x02
    778c:	0e 94 61 3c 	call	0x78c2	; 0x78c2 <dd_parser>
    7790:	80 93 84 21 	sts	0x2184, r24
	}
	return (tg.status);
    7794:	80 91 84 21 	lds	r24, 0x2184
    7798:	28 2f       	mov	r18, r24
    779a:	30 e0       	ldi	r19, 0x00	; 0
    779c:	2d 83       	std	Y+5, r18	; 0x05
    779e:	3e 83       	std	Y+6, r19	; 0x06
    77a0:	8d 81       	ldd	r24, Y+5	; 0x05
    77a2:	9e 81       	ldd	r25, Y+6	; 0x06
}
    77a4:	28 96       	adiw	r28, 0x08	; 8
    77a6:	cd bf       	out	0x3d, r28	; 61
    77a8:	de bf       	out	0x3e, r29	; 62
    77aa:	cf 91       	pop	r28
    77ac:	df 91       	pop	r29
    77ae:	08 95       	ret

000077b0 <_tg_set_mode>:
/*
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
    77b0:	df 93       	push	r29
    77b2:	cf 93       	push	r28
    77b4:	0f 92       	push	r0
    77b6:	cd b7       	in	r28, 0x3d	; 61
    77b8:	de b7       	in	r29, 0x3e	; 62
    77ba:	89 83       	std	Y+1, r24	; 0x01
	tg.mode = mode;
    77bc:	89 81       	ldd	r24, Y+1	; 0x01
    77be:	80 93 85 21 	sts	0x2185, r24
}
    77c2:	0f 90       	pop	r0
    77c4:	cf 91       	pop	r28
    77c6:	df 91       	pop	r29
    77c8:	08 95       	ret

000077ca <_tg_set_source>:
 *	expanded to also set the stdout/stderr console device so the prompt and
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
    77ca:	df 93       	push	r29
    77cc:	cf 93       	push	r28
    77ce:	0f 92       	push	r0
    77d0:	cd b7       	in	r28, 0x3d	; 61
    77d2:	de b7       	in	r29, 0x3e	; 62
    77d4:	89 83       	std	Y+1, r24	; 0x01
	tg.src = d;									// d = XIO device #. See xio.h
    77d6:	89 81       	ldd	r24, Y+1	; 0x01
    77d8:	80 93 86 21 	sts	0x2186, r24
}
    77dc:	0f 90       	pop	r0
    77de:	cf 91       	pop	r28
    77e0:	df 91       	pop	r29
    77e2:	08 95       	ret

000077e4 <tg_reset_source>:
/*
 * tg_reset_source()  Reset source to default input device
 */

void tg_reset_source()
{
    77e4:	df 93       	push	r29
    77e6:	cf 93       	push	r28
    77e8:	cd b7       	in	r28, 0x3d	; 61
    77ea:	de b7       	in	r29, 0x3e	; 62
	_tg_set_source(tg.default_src);
    77ec:	80 91 87 21 	lds	r24, 0x2187
    77f0:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <_tg_set_source>
}
    77f4:	cf 91       	pop	r28
    77f6:	df 91       	pop	r29
    77f8:	08 95       	ret

000077fa <_tg_prompt>:
	tgModeStringGCode,
	tgModeStringDirect
};

void _tg_prompt()
{
    77fa:	df 93       	push	r29
    77fc:	cf 93       	push	r28
    77fe:	00 d0       	rcall	.+0      	; 0x7800 <_tg_prompt+0x6>
    7800:	0f 92       	push	r0
    7802:	cd b7       	in	r28, 0x3d	; 61
    7804:	de b7       	in	r29, 0x3e	; 62
	if (tg.state == TG_READY_UNPROMPTED) {
    7806:	80 91 83 21 	lds	r24, 0x2183
    780a:	88 23       	and	r24, r24
    780c:	09 f0       	breq	.+2      	; 0x7810 <_tg_prompt+0x16>
    780e:	3d c0       	rjmp	.+122    	; 0x788a <_tg_prompt+0x90>
		if (tg.dev[tg.src].flags && XIO_APP_PROMPTS_bm) {
    7810:	80 91 86 21 	lds	r24, 0x2186
    7814:	28 2f       	mov	r18, r24
    7816:	30 e0       	ldi	r19, 0x00	; 0
    7818:	82 e5       	ldi	r24, 0x52	; 82
    781a:	90 e0       	ldi	r25, 0x00	; 0
    781c:	ac 01       	movw	r20, r24
    781e:	24 9f       	mul	r18, r20
    7820:	c0 01       	movw	r24, r0
    7822:	25 9f       	mul	r18, r21
    7824:	90 0d       	add	r25, r0
    7826:	34 9f       	mul	r19, r20
    7828:	90 0d       	add	r25, r0
    782a:	11 24       	eor	r1, r1
    782c:	fc 01       	movw	r30, r24
    782e:	e7 57       	subi	r30, 0x77	; 119
    7830:	fe 4d       	sbci	r31, 0xDE	; 222
    7832:	80 81       	ld	r24, Z
    7834:	88 23       	and	r24, r24
    7836:	31 f1       	breq	.+76     	; 0x7884 <_tg_prompt+0x8a>
			printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    7838:	25 ed       	ldi	r18, 0xD5	; 213
    783a:	39 e1       	ldi	r19, 0x19	; 25
    783c:	80 91 85 21 	lds	r24, 0x2185
    7840:	88 2f       	mov	r24, r24
    7842:	90 e0       	ldi	r25, 0x00	; 0
    7844:	88 0f       	add	r24, r24
    7846:	99 1f       	adc	r25, r25
    7848:	83 53       	subi	r24, 0x33	; 51
    784a:	96 4e       	sbci	r25, 0xE6	; 230
    784c:	8b 83       	std	Y+3, r24	; 0x03
    784e:	9c 83       	std	Y+4, r25	; 0x04
    7850:	8b 81       	ldd	r24, Y+3	; 0x03
    7852:	9c 81       	ldd	r25, Y+4	; 0x04
    7854:	fc 01       	movw	r30, r24
    7856:	85 91       	lpm	r24, Z+
    7858:	94 91       	lpm	r25, Z+
    785a:	89 83       	std	Y+1, r24	; 0x01
    785c:	9a 83       	std	Y+2, r25	; 0x02
    785e:	eb 83       	std	Y+3, r30	; 0x03
    7860:	fc 83       	std	Y+4, r31	; 0x04
    7862:	89 81       	ldd	r24, Y+1	; 0x01
    7864:	9a 81       	ldd	r25, Y+2	; 0x02
    7866:	00 d0       	rcall	.+0      	; 0x7868 <_tg_prompt+0x6e>
    7868:	0f 92       	push	r0
    786a:	ed b7       	in	r30, 0x3d	; 61
    786c:	fe b7       	in	r31, 0x3e	; 62
    786e:	31 96       	adiw	r30, 0x01	; 1
    7870:	20 83       	st	Z, r18
    7872:	31 83       	std	Z+1, r19	; 0x01
    7874:	82 83       	std	Z+2, r24	; 0x02
    7876:	93 83       	std	Z+3, r25	; 0x03
    7878:	0e 94 91 5c 	call	0xb922	; 0xb922 <printf_P>
    787c:	0f 90       	pop	r0
    787e:	0f 90       	pop	r0
    7880:	0f 90       	pop	r0
    7882:	0f 90       	pop	r0
		}
		tg.state = TG_READY_PROMPTED;
    7884:	81 e0       	ldi	r24, 0x01	; 1
    7886:	80 93 83 21 	sts	0x2183, r24
	}
}
    788a:	24 96       	adiw	r28, 0x04	; 4
    788c:	cd bf       	out	0x3d, r28	; 61
    788e:	de bf       	out	0x3e, r29	; 62
    7890:	cf 91       	pop	r28
    7892:	df 91       	pop	r29
    7894:	08 95       	ret

00007896 <_tg_test_file>:
 * This is a shoirtcut for now. Ultimately the file handle, mode and device 
 * should be provided as args.
 */

int _tg_test_file()
{
    7896:	df 93       	push	r29
    7898:	cf 93       	push	r28
    789a:	cd b7       	in	r28, 0x3d	; 61
    789c:	de b7       	in	r29, 0x3e	; 62

//	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
//	xio_pgm_open(PGMFILE(&zoetrope));			// crazy noisy zoetrope file

	// set mode and source for file mode
	_tg_set_mode(TG_GCODE_MODE);
    789e:	82 e0       	ldi	r24, 0x02	; 2
    78a0:	0e 94 d8 3b 	call	0x77b0	; 0x77b0 <_tg_set_mode>
	_tg_set_source(XIO_DEV_PGM);
    78a4:	83 e0       	ldi	r24, 0x03	; 3
    78a6:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <_tg_set_source>
	return (TG_OK);
    78aa:	80 e0       	ldi	r24, 0x00	; 0
    78ac:	90 e0       	ldi	r25, 0x00	; 0
}
    78ae:	cf 91       	pop	r28
    78b0:	df 91       	pop	r29
    78b2:	08 95       	ret

000078b4 <dd_init>:
/* 
 * dd_init() - initialize direct drive system 
 */

void dd_init() 
{
    78b4:	df 93       	push	r29
    78b6:	cf 93       	push	r28
    78b8:	cd b7       	in	r28, 0x3d	; 61
    78ba:	de b7       	in	r29, 0x3e	; 62
//	cfg_reset();
}
    78bc:	cf 91       	pop	r28
    78be:	df 91       	pop	r29
    78c0:	08 95       	ret

000078c2 <dd_parser>:
/* 
 * dd_parser() - parse a direct drive command 
 */

int dd_parser(char *text)
{
    78c2:	df 93       	push	r29
    78c4:	cf 93       	push	r28
    78c6:	0f 92       	push	r0
    78c8:	0f 92       	push	r0
    78ca:	cd b7       	in	r28, 0x3d	; 61
    78cc:	de b7       	in	r29, 0x3e	; 62
    78ce:	89 83       	std	Y+1, r24	; 0x01
    78d0:	9a 83       	std	Y+2, r25	; 0x02
				CFG(axis).limit_enable = (uint8_t)atoi(val); return(0);
			}
		default: return (1);	// error
	}
*/
	return (0);
    78d2:	80 e0       	ldi	r24, 0x00	; 0
    78d4:	90 e0       	ldi	r25, 0x00	; 0
}
    78d6:	0f 90       	pop	r0
    78d8:	0f 90       	pop	r0
    78da:	cf 91       	pop	r28
    78dc:	df 91       	pop	r29
    78de:	08 95       	ret

000078e0 <mv_init>:
/* 
 * mv_init() - initialize move buffers
 */

void mv_init()
{
    78e0:	df 93       	push	r29
    78e2:	cf 93       	push	r28
    78e4:	cd b7       	in	r28, 0x3d	; 61
    78e6:	de b7       	in	r29, 0x3e	; 62
	mv.move_buffer_head = 0;
    78e8:	10 92 d1 22 	sts	0x22D1, r1
	mv.move_buffer_tail = 0;
    78ec:	10 92 d2 22 	sts	0x22D2, r1
}
    78f0:	cf 91       	pop	r28
    78f2:	df 91       	pop	r29
    78f4:	08 95       	ret

000078f6 <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    78f6:	2f 92       	push	r2
    78f8:	3f 92       	push	r3
    78fa:	4f 92       	push	r4
    78fc:	5f 92       	push	r5
    78fe:	6f 92       	push	r6
    7900:	7f 92       	push	r7
    7902:	8f 92       	push	r8
    7904:	9f 92       	push	r9
    7906:	af 92       	push	r10
    7908:	bf 92       	push	r11
    790a:	cf 92       	push	r12
    790c:	df 92       	push	r13
    790e:	ef 92       	push	r14
    7910:	ff 92       	push	r15
    7912:	0f 93       	push	r16
    7914:	1f 93       	push	r17
    7916:	df 93       	push	r29
    7918:	cf 93       	push	r28
    791a:	cd b7       	in	r28, 0x3d	; 61
    791c:	de b7       	in	r29, 0x3e	; 62
    791e:	a7 97       	sbiw	r28, 0x27	; 39
    7920:	cd bf       	out	0x3d, r28	; 61
    7922:	de bf       	out	0x3e, r29	; 62
    7924:	6f 87       	std	Y+15, r22	; 0x0f
    7926:	78 8b       	std	Y+16, r23	; 0x10
    7928:	89 8b       	std	Y+17, r24	; 0x11
    792a:	9a 8b       	std	Y+18, r25	; 0x12
    792c:	2b 8b       	std	Y+19, r18	; 0x13
    792e:	3c 8b       	std	Y+20, r19	; 0x14
    7930:	4d 8b       	std	Y+21, r20	; 0x15
    7932:	5e 8b       	std	Y+22, r21	; 0x16
    7934:	ef 8a       	std	Y+23, r14	; 0x17
    7936:	f8 8e       	std	Y+24, r15	; 0x18
    7938:	09 8f       	std	Y+25, r16	; 0x19
    793a:	1a 8f       	std	Y+26, r17	; 0x1a
    793c:	ab 8e       	std	Y+27, r10	; 0x1b
    793e:	bc 8e       	std	Y+28, r11	; 0x1c
    7940:	cd 8e       	std	Y+29, r12	; 0x1d
    7942:	de 8e       	std	Y+30, r13	; 0x1e
					// Using 64 bits is expensive! The division goes from ~640 
					// cycles at 32 bits to ~3800 cycles using 64 bits
	uint32_t ticks_per_step; // temp variable

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    7944:	80 91 d1 22 	lds	r24, 0x22D1
    7948:	8f 5f       	subi	r24, 0xFF	; 255
    794a:	8e 87       	std	Y+14, r24	; 0x0e
    794c:	8e 85       	ldd	r24, Y+14	; 0x0e
    794e:	83 30       	cpi	r24, 0x03	; 3
    7950:	08 f0       	brcs	.+2      	; 0x7954 <mv_queue_move_buffer+0x5e>
		next_buffer_head = 0;					 // wrap condition
    7952:	1e 86       	std	Y+14, r1	; 0x0e
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    7954:	90 91 d2 22 	lds	r25, 0x22D2
    7958:	8e 85       	ldd	r24, Y+14	; 0x0e
    795a:	98 17       	cp	r25, r24
    795c:	19 f4       	brne	.+6      	; 0x7964 <mv_queue_move_buffer+0x6e>
		return (TG_BUFFER_FULL);
    795e:	27 e0       	ldi	r18, 0x07	; 7
    7960:	2f a3       	std	Y+39, r18	; 0x27
    7962:	8e c2       	rjmp	.+1308   	; 0x7e80 <mv_queue_move_buffer+0x58a>
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    7964:	80 91 d1 22 	lds	r24, 0x22D1
    7968:	28 2f       	mov	r18, r24
    796a:	30 e0       	ldi	r19, 0x00	; 0
    796c:	c9 01       	movw	r24, r18
    796e:	88 0f       	add	r24, r24
    7970:	99 1f       	adc	r25, r25
    7972:	82 0f       	add	r24, r18
    7974:	93 1f       	adc	r25, r19
    7976:	9c 01       	movw	r18, r24
    7978:	22 0f       	add	r18, r18
    797a:	33 1f       	adc	r19, r19
    797c:	22 0f       	add	r18, r18
    797e:	33 1f       	adc	r19, r19
    7980:	82 0f       	add	r24, r18
    7982:	93 1f       	adc	r25, r19
    7984:	88 0f       	add	r24, r24
    7986:	99 1f       	adc	r25, r25
    7988:	8b 52       	subi	r24, 0x2B	; 43
    798a:	9d 4d       	sbci	r25, 0xDD	; 221
    798c:	80 93 d3 22 	sts	0x22D3, r24
    7990:	90 93 d4 22 	sts	0x22D4, r25
	memset(mv.p, 0, sizeof(struct mvMove));
    7994:	80 91 d3 22 	lds	r24, 0x22D3
    7998:	90 91 d4 22 	lds	r25, 0x22D4
    799c:	60 e0       	ldi	r22, 0x00	; 0
    799e:	70 e0       	ldi	r23, 0x00	; 0
    79a0:	4e e1       	ldi	r20, 0x1E	; 30
    79a2:	50 e0       	ldi	r21, 0x00	; 0
    79a4:	0e 94 4b 5c 	call	0xb896	; 0xb896 <memset>
	mv.p->a[X].steps = steps_x;
    79a8:	e0 91 d3 22 	lds	r30, 0x22D3
    79ac:	f0 91 d4 22 	lds	r31, 0x22D4
    79b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    79b2:	98 89       	ldd	r25, Y+16	; 0x10
    79b4:	a9 89       	ldd	r26, Y+17	; 0x11
    79b6:	ba 89       	ldd	r27, Y+18	; 0x12
    79b8:	80 83       	st	Z, r24
    79ba:	91 83       	std	Z+1, r25	; 0x01
    79bc:	a2 83       	std	Z+2, r26	; 0x02
    79be:	b3 83       	std	Z+3, r27	; 0x03
	mv.p->a[Y].steps = steps_y;
    79c0:	e0 91 d3 22 	lds	r30, 0x22D3
    79c4:	f0 91 d4 22 	lds	r31, 0x22D4
    79c8:	8b 89       	ldd	r24, Y+19	; 0x13
    79ca:	9c 89       	ldd	r25, Y+20	; 0x14
    79cc:	ad 89       	ldd	r26, Y+21	; 0x15
    79ce:	be 89       	ldd	r27, Y+22	; 0x16
    79d0:	82 87       	std	Z+10, r24	; 0x0a
    79d2:	93 87       	std	Z+11, r25	; 0x0b
    79d4:	a4 87       	std	Z+12, r26	; 0x0c
    79d6:	b5 87       	std	Z+13, r27	; 0x0d
	mv.p->a[Z].steps = steps_z;
    79d8:	e0 91 d3 22 	lds	r30, 0x22D3
    79dc:	f0 91 d4 22 	lds	r31, 0x22D4
    79e0:	8f 89       	ldd	r24, Y+23	; 0x17
    79e2:	98 8d       	ldd	r25, Y+24	; 0x18
    79e4:	a9 8d       	ldd	r26, Y+25	; 0x19
    79e6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    79e8:	84 8b       	std	Z+20, r24	; 0x14
    79ea:	95 8b       	std	Z+21, r25	; 0x15
    79ec:	a6 8b       	std	Z+22, r26	; 0x16
    79ee:	b7 8b       	std	Z+23, r27	; 0x17
	ticks = microseconds * TICKS_PER_MICROSECOND;
    79f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    79f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    79f4:	ad 8d       	ldd	r26, Y+29	; 0x1d
    79f6:	be 8d       	ldd	r27, Y+30	; 0x1e
    79f8:	88 0f       	add	r24, r24
    79fa:	99 1f       	adc	r25, r25
    79fc:	aa 1f       	adc	r26, r26
    79fe:	bb 1f       	adc	r27, r27
    7a00:	88 0f       	add	r24, r24
    7a02:	99 1f       	adc	r25, r25
    7a04:	aa 1f       	adc	r26, r26
    7a06:	bb 1f       	adc	r27, r27
    7a08:	88 0f       	add	r24, r24
    7a0a:	99 1f       	adc	r25, r25
    7a0c:	aa 1f       	adc	r26, r26
    7a0e:	bb 1f       	adc	r27, r27
    7a10:	88 0f       	add	r24, r24
    7a12:	99 1f       	adc	r25, r25
    7a14:	aa 1f       	adc	r26, r26
    7a16:	bb 1f       	adc	r27, r27
    7a18:	88 0f       	add	r24, r24
    7a1a:	99 1f       	adc	r25, r25
    7a1c:	aa 1f       	adc	r26, r26
    7a1e:	bb 1f       	adc	r27, r27
    7a20:	9c 01       	movw	r18, r24
    7a22:	ad 01       	movw	r20, r26
    7a24:	60 e0       	ldi	r22, 0x00	; 0
    7a26:	70 e0       	ldi	r23, 0x00	; 0
    7a28:	80 e0       	ldi	r24, 0x00	; 0
    7a2a:	90 e0       	ldi	r25, 0x00	; 0
    7a2c:	2d 83       	std	Y+5, r18	; 0x05
    7a2e:	3e 83       	std	Y+6, r19	; 0x06
    7a30:	4f 83       	std	Y+7, r20	; 0x07
    7a32:	58 87       	std	Y+8, r21	; 0x08
    7a34:	69 87       	std	Y+9, r22	; 0x09
    7a36:	7a 87       	std	Y+10, r23	; 0x0a
    7a38:	8b 87       	std	Y+11, r24	; 0x0b
    7a3a:	9c 87       	std	Y+12, r25	; 0x0c

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    7a3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    7a3e:	98 89       	ldd	r25, Y+16	; 0x10
    7a40:	a9 89       	ldd	r26, Y+17	; 0x11
    7a42:	ba 89       	ldd	r27, Y+18	; 0x12
    7a44:	00 97       	sbiw	r24, 0x00	; 0
    7a46:	a1 05       	cpc	r26, r1
    7a48:	b1 05       	cpc	r27, r1
    7a4a:	09 f0       	breq	.+2      	; 0x7a4e <mv_queue_move_buffer+0x158>
    7a4c:	96 c0       	rjmp	.+300    	; 0x7b7a <mv_queue_move_buffer+0x284>
    7a4e:	8b 89       	ldd	r24, Y+19	; 0x13
    7a50:	9c 89       	ldd	r25, Y+20	; 0x14
    7a52:	ad 89       	ldd	r26, Y+21	; 0x15
    7a54:	be 89       	ldd	r27, Y+22	; 0x16
    7a56:	00 97       	sbiw	r24, 0x00	; 0
    7a58:	a1 05       	cpc	r26, r1
    7a5a:	b1 05       	cpc	r27, r1
    7a5c:	09 f0       	breq	.+2      	; 0x7a60 <mv_queue_move_buffer+0x16a>
    7a5e:	8d c0       	rjmp	.+282    	; 0x7b7a <mv_queue_move_buffer+0x284>
    7a60:	8f 89       	ldd	r24, Y+23	; 0x17
    7a62:	98 8d       	ldd	r25, Y+24	; 0x18
    7a64:	a9 8d       	ldd	r26, Y+25	; 0x19
    7a66:	ba 8d       	ldd	r27, Y+26	; 0x1a
    7a68:	00 97       	sbiw	r24, 0x00	; 0
    7a6a:	a1 05       	cpc	r26, r1
    7a6c:	b1 05       	cpc	r27, r1
    7a6e:	09 f0       	breq	.+2      	; 0x7a72 <mv_queue_move_buffer+0x17c>
    7a70:	84 c0       	rjmp	.+264    	; 0x7b7a <mv_queue_move_buffer+0x284>
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    7a72:	e0 91 d3 22 	lds	r30, 0x22D3
    7a76:	f0 91 d4 22 	lds	r31, 0x22D4
    7a7a:	81 e0       	ldi	r24, 0x01	; 1
    7a7c:	90 e0       	ldi	r25, 0x00	; 0
    7a7e:	a0 e0       	ldi	r26, 0x00	; 0
    7a80:	b0 e0       	ldi	r27, 0x00	; 0
    7a82:	80 83       	st	Z, r24
    7a84:	91 83       	std	Z+1, r25	; 0x01
    7a86:	a2 83       	std	Z+2, r26	; 0x02
    7a88:	b3 83       	std	Z+3, r27	; 0x03
		mv.p->a[X].postscale = 1;
    7a8a:	e0 91 d3 22 	lds	r30, 0x22D3
    7a8e:	f0 91 d4 22 	lds	r31, 0x22D4
    7a92:	81 e0       	ldi	r24, 0x01	; 1
    7a94:	90 e0       	ldi	r25, 0x00	; 0
    7a96:	86 83       	std	Z+6, r24	; 0x06
    7a98:	97 83       	std	Z+7, r25	; 0x07
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
    7a9a:	e0 91 d3 22 	lds	r30, 0x22D3
    7a9e:	f0 91 d4 22 	lds	r31, 0x22D4
    7aa2:	20 81       	ld	r18, Z
    7aa4:	31 81       	ldd	r19, Z+1	; 0x01
    7aa6:	42 81       	ldd	r20, Z+2	; 0x02
    7aa8:	53 81       	ldd	r21, Z+3	; 0x03
    7aaa:	da 01       	movw	r26, r20
    7aac:	c9 01       	movw	r24, r18
    7aae:	bb 0f       	add	r27, r27
    7ab0:	88 0b       	sbc	r24, r24
    7ab2:	98 2f       	mov	r25, r24
    7ab4:	dc 01       	movw	r26, r24
    7ab6:	19 01       	movw	r2, r18
    7ab8:	2a 01       	movw	r4, r20
    7aba:	68 2e       	mov	r6, r24
    7abc:	78 2e       	mov	r7, r24
    7abe:	88 2e       	mov	r8, r24
    7ac0:	98 2e       	mov	r9, r24
    7ac2:	2d 81       	ldd	r18, Y+5	; 0x05
    7ac4:	3e 81       	ldd	r19, Y+6	; 0x06
    7ac6:	4f 81       	ldd	r20, Y+7	; 0x07
    7ac8:	58 85       	ldd	r21, Y+8	; 0x08
    7aca:	69 85       	ldd	r22, Y+9	; 0x09
    7acc:	7a 85       	ldd	r23, Y+10	; 0x0a
    7ace:	8b 85       	ldd	r24, Y+11	; 0x0b
    7ad0:	9c 85       	ldd	r25, Y+12	; 0x0c
    7ad2:	a2 2c       	mov	r10, r2
    7ad4:	b3 2c       	mov	r11, r3
    7ad6:	c4 2c       	mov	r12, r4
    7ad8:	d5 2c       	mov	r13, r5
    7ada:	e6 2c       	mov	r14, r6
    7adc:	f7 2c       	mov	r15, r7
    7ade:	08 2d       	mov	r16, r8
    7ae0:	19 2d       	mov	r17, r9
    7ae2:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <__udivdi3>
    7ae6:	a2 2e       	mov	r10, r18
    7ae8:	b3 2e       	mov	r11, r19
    7aea:	c4 2e       	mov	r12, r20
    7aec:	d5 2e       	mov	r13, r21
    7aee:	e6 2e       	mov	r14, r22
    7af0:	f7 2e       	mov	r15, r23
    7af2:	08 2f       	mov	r16, r24
    7af4:	19 2f       	mov	r17, r25
    7af6:	2a 2d       	mov	r18, r10
    7af8:	3b 2d       	mov	r19, r11
    7afa:	4c 2d       	mov	r20, r12
    7afc:	5d 2d       	mov	r21, r13
    7afe:	6e 2d       	mov	r22, r14
    7b00:	7f 2d       	mov	r23, r15
    7b02:	80 2f       	mov	r24, r16
    7b04:	91 2f       	mov	r25, r17
    7b06:	29 83       	std	Y+1, r18	; 0x01
    7b08:	3a 83       	std	Y+2, r19	; 0x02
    7b0a:	4b 83       	std	Y+3, r20	; 0x03
    7b0c:	5c 83       	std	Y+4, r21	; 0x04
    7b0e:	1c c0       	rjmp	.+56     	; 0x7b48 <mv_queue_move_buffer+0x252>
		while (ticks_per_step & 0xFFFF0000) {
			ticks_per_step >>= 1;
    7b10:	89 81       	ldd	r24, Y+1	; 0x01
    7b12:	9a 81       	ldd	r25, Y+2	; 0x02
    7b14:	ab 81       	ldd	r26, Y+3	; 0x03
    7b16:	bc 81       	ldd	r27, Y+4	; 0x04
    7b18:	b6 95       	lsr	r27
    7b1a:	a7 95       	ror	r26
    7b1c:	97 95       	ror	r25
    7b1e:	87 95       	ror	r24
    7b20:	89 83       	std	Y+1, r24	; 0x01
    7b22:	9a 83       	std	Y+2, r25	; 0x02
    7b24:	ab 83       	std	Y+3, r26	; 0x03
    7b26:	bc 83       	std	Y+4, r27	; 0x04
			mv.p->a[X].postscale <<= 1;
    7b28:	a0 91 d3 22 	lds	r26, 0x22D3
    7b2c:	b0 91 d4 22 	lds	r27, 0x22D4
    7b30:	e0 91 d3 22 	lds	r30, 0x22D3
    7b34:	f0 91 d4 22 	lds	r31, 0x22D4
    7b38:	86 81       	ldd	r24, Z+6	; 0x06
    7b3a:	97 81       	ldd	r25, Z+7	; 0x07
    7b3c:	88 0f       	add	r24, r24
    7b3e:	99 1f       	adc	r25, r25
    7b40:	16 96       	adiw	r26, 0x06	; 6
    7b42:	8d 93       	st	X+, r24
    7b44:	9c 93       	st	X, r25
    7b46:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
		while (ticks_per_step & 0xFFFF0000) {
    7b48:	89 81       	ldd	r24, Y+1	; 0x01
    7b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    7b4c:	ab 81       	ldd	r26, Y+3	; 0x03
    7b4e:	bc 81       	ldd	r27, Y+4	; 0x04
    7b50:	80 70       	andi	r24, 0x00	; 0
    7b52:	90 70       	andi	r25, 0x00	; 0
    7b54:	00 97       	sbiw	r24, 0x00	; 0
    7b56:	a1 05       	cpc	r26, r1
    7b58:	b1 05       	cpc	r27, r1
    7b5a:	d1 f6       	brne	.-76     	; 0x7b10 <mv_queue_move_buffer+0x21a>
			ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    7b5c:	e0 91 d3 22 	lds	r30, 0x22D3
    7b60:	f0 91 d4 22 	lds	r31, 0x22D4
    7b64:	89 81       	ldd	r24, Y+1	; 0x01
    7b66:	9a 81       	ldd	r25, Y+2	; 0x02
    7b68:	84 83       	std	Z+4, r24	; 0x04
    7b6a:	95 83       	std	Z+5, r25	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    7b6c:	e0 91 d3 22 	lds	r30, 0x22D3
    7b70:	f0 91 d4 22 	lds	r31, 0x22D4
    7b74:	81 e0       	ldi	r24, 0x01	; 1
    7b76:	81 87       	std	Z+9, r24	; 0x09
    7b78:	7d c1       	rjmp	.+762    	; 0x7e74 <mv_queue_move_buffer+0x57e>

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    7b7a:	1d 86       	std	Y+13, r1	; 0x0d
    7b7c:	77 c1       	rjmp	.+750    	; 0x7e6c <mv_queue_move_buffer+0x576>
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    7b7e:	40 91 d3 22 	lds	r20, 0x22D3
    7b82:	50 91 d4 22 	lds	r21, 0x22D4
    7b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    7b88:	88 2f       	mov	r24, r24
    7b8a:	90 e0       	ldi	r25, 0x00	; 0
    7b8c:	88 0f       	add	r24, r24
    7b8e:	99 1f       	adc	r25, r25
    7b90:	9c 01       	movw	r18, r24
    7b92:	22 0f       	add	r18, r18
    7b94:	33 1f       	adc	r19, r19
    7b96:	22 0f       	add	r18, r18
    7b98:	33 1f       	adc	r19, r19
    7b9a:	82 0f       	add	r24, r18
    7b9c:	93 1f       	adc	r25, r19
    7b9e:	fa 01       	movw	r30, r20
    7ba0:	e8 0f       	add	r30, r24
    7ba2:	f9 1f       	adc	r31, r25
    7ba4:	80 81       	ld	r24, Z
    7ba6:	91 81       	ldd	r25, Z+1	; 0x01
    7ba8:	a2 81       	ldd	r26, Z+2	; 0x02
    7baa:	b3 81       	ldd	r27, Z+3	; 0x03
    7bac:	00 97       	sbiw	r24, 0x00	; 0
    7bae:	a1 05       	cpc	r26, r1
    7bb0:	b1 05       	cpc	r27, r1
    7bb2:	09 f4       	brne	.+2      	; 0x7bb6 <mv_queue_move_buffer+0x2c0>
    7bb4:	58 c1       	rjmp	.+688    	; 0x7e66 <mv_queue_move_buffer+0x570>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    7bb6:	40 91 d3 22 	lds	r20, 0x22D3
    7bba:	50 91 d4 22 	lds	r21, 0x22D4
    7bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    7bc0:	88 2f       	mov	r24, r24
    7bc2:	90 e0       	ldi	r25, 0x00	; 0
    7bc4:	88 0f       	add	r24, r24
    7bc6:	99 1f       	adc	r25, r25
    7bc8:	9c 01       	movw	r18, r24
    7bca:	22 0f       	add	r18, r18
    7bcc:	33 1f       	adc	r19, r19
    7bce:	22 0f       	add	r18, r18
    7bd0:	33 1f       	adc	r19, r19
    7bd2:	82 0f       	add	r24, r18
    7bd4:	93 1f       	adc	r25, r19
    7bd6:	fa 01       	movw	r30, r20
    7bd8:	e8 0f       	add	r30, r24
    7bda:	f9 1f       	adc	r31, r25
    7bdc:	80 81       	ld	r24, Z
    7bde:	91 81       	ldd	r25, Z+1	; 0x01
    7be0:	a2 81       	ldd	r26, Z+2	; 0x02
    7be2:	b3 81       	ldd	r27, Z+3	; 0x03
    7be4:	bb 23       	and	r27, r27
    7be6:	bc f4       	brge	.+46     	; 0x7c16 <mv_queue_move_buffer+0x320>
    7be8:	40 91 d3 22 	lds	r20, 0x22D3
    7bec:	50 91 d4 22 	lds	r21, 0x22D4
    7bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    7bf2:	88 2f       	mov	r24, r24
    7bf4:	90 e0       	ldi	r25, 0x00	; 0
    7bf6:	88 0f       	add	r24, r24
    7bf8:	99 1f       	adc	r25, r25
    7bfa:	9c 01       	movw	r18, r24
    7bfc:	22 0f       	add	r18, r18
    7bfe:	33 1f       	adc	r19, r19
    7c00:	22 0f       	add	r18, r18
    7c02:	33 1f       	adc	r19, r19
    7c04:	82 0f       	add	r24, r18
    7c06:	93 1f       	adc	r25, r19
    7c08:	84 0f       	add	r24, r20
    7c0a:	95 1f       	adc	r25, r21
    7c0c:	fc 01       	movw	r30, r24
    7c0e:	38 96       	adiw	r30, 0x08	; 8
    7c10:	81 e0       	ldi	r24, 0x01	; 1
    7c12:	80 83       	st	Z, r24
    7c14:	15 c0       	rjmp	.+42     	; 0x7c40 <mv_queue_move_buffer+0x34a>
    7c16:	40 91 d3 22 	lds	r20, 0x22D3
    7c1a:	50 91 d4 22 	lds	r21, 0x22D4
    7c1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7c20:	88 2f       	mov	r24, r24
    7c22:	90 e0       	ldi	r25, 0x00	; 0
    7c24:	88 0f       	add	r24, r24
    7c26:	99 1f       	adc	r25, r25
    7c28:	9c 01       	movw	r18, r24
    7c2a:	22 0f       	add	r18, r18
    7c2c:	33 1f       	adc	r19, r19
    7c2e:	22 0f       	add	r18, r18
    7c30:	33 1f       	adc	r19, r19
    7c32:	82 0f       	add	r24, r18
    7c34:	93 1f       	adc	r25, r19
    7c36:	84 0f       	add	r24, r20
    7c38:	95 1f       	adc	r25, r21
    7c3a:	fc 01       	movw	r30, r24
    7c3c:	38 96       	adiw	r30, 0x08	; 8
    7c3e:	10 82       	st	Z, r1
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    7c40:	80 91 d3 22 	lds	r24, 0x22D3
    7c44:	90 91 d4 22 	lds	r25, 0x22D4
    7c48:	8d a3       	std	Y+37, r24	; 0x25
    7c4a:	9e a3       	std	Y+38, r25	; 0x26
    7c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    7c4e:	a8 2f       	mov	r26, r24
    7c50:	b0 e0       	ldi	r27, 0x00	; 0
    7c52:	ab a3       	std	Y+35, r26	; 0x23
    7c54:	bc a3       	std	Y+36, r27	; 0x24
    7c56:	40 91 d3 22 	lds	r20, 0x22D3
    7c5a:	50 91 d4 22 	lds	r21, 0x22D4
    7c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7c60:	88 2f       	mov	r24, r24
    7c62:	90 e0       	ldi	r25, 0x00	; 0
    7c64:	88 0f       	add	r24, r24
    7c66:	99 1f       	adc	r25, r25
    7c68:	9c 01       	movw	r18, r24
    7c6a:	22 0f       	add	r18, r18
    7c6c:	33 1f       	adc	r19, r19
    7c6e:	22 0f       	add	r18, r18
    7c70:	33 1f       	adc	r19, r19
    7c72:	82 0f       	add	r24, r18
    7c74:	93 1f       	adc	r25, r19
    7c76:	fa 01       	movw	r30, r20
    7c78:	e8 0f       	add	r30, r24
    7c7a:	f9 1f       	adc	r31, r25
    7c7c:	80 81       	ld	r24, Z
    7c7e:	91 81       	ldd	r25, Z+1	; 0x01
    7c80:	a2 81       	ldd	r26, Z+2	; 0x02
    7c82:	b3 81       	ldd	r27, Z+3	; 0x03
    7c84:	8f 8f       	std	Y+31, r24	; 0x1f
    7c86:	98 a3       	std	Y+32, r25	; 0x20
    7c88:	a9 a3       	std	Y+33, r26	; 0x21
    7c8a:	ba a3       	std	Y+34, r27	; 0x22
    7c8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7c8e:	98 a1       	ldd	r25, Y+32	; 0x20
    7c90:	a9 a1       	ldd	r26, Y+33	; 0x21
    7c92:	ba a1       	ldd	r27, Y+34	; 0x22
    7c94:	bb 23       	and	r27, r27
    7c96:	7c f4       	brge	.+30     	; 0x7cb6 <mv_queue_move_buffer+0x3c0>
    7c98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7c9a:	98 a1       	ldd	r25, Y+32	; 0x20
    7c9c:	a9 a1       	ldd	r26, Y+33	; 0x21
    7c9e:	ba a1       	ldd	r27, Y+34	; 0x22
    7ca0:	b0 95       	com	r27
    7ca2:	a0 95       	com	r26
    7ca4:	90 95       	com	r25
    7ca6:	81 95       	neg	r24
    7ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    7caa:	af 4f       	sbci	r26, 0xFF	; 255
    7cac:	bf 4f       	sbci	r27, 0xFF	; 255
    7cae:	8f 8f       	std	Y+31, r24	; 0x1f
    7cb0:	98 a3       	std	Y+32, r25	; 0x20
    7cb2:	a9 a3       	std	Y+33, r26	; 0x21
    7cb4:	ba a3       	std	Y+34, r27	; 0x22
    7cb6:	8b a1       	ldd	r24, Y+35	; 0x23
    7cb8:	9c a1       	ldd	r25, Y+36	; 0x24
    7cba:	88 0f       	add	r24, r24
    7cbc:	99 1f       	adc	r25, r25
    7cbe:	9c 01       	movw	r18, r24
    7cc0:	22 0f       	add	r18, r18
    7cc2:	33 1f       	adc	r19, r19
    7cc4:	22 0f       	add	r18, r18
    7cc6:	33 1f       	adc	r19, r19
    7cc8:	82 0f       	add	r24, r18
    7cca:	93 1f       	adc	r25, r19
    7ccc:	ed a1       	ldd	r30, Y+37	; 0x25
    7cce:	fe a1       	ldd	r31, Y+38	; 0x26
    7cd0:	e8 0f       	add	r30, r24
    7cd2:	f9 1f       	adc	r31, r25
    7cd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7cd6:	98 a1       	ldd	r25, Y+32	; 0x20
    7cd8:	a9 a1       	ldd	r26, Y+33	; 0x21
    7cda:	ba a1       	ldd	r27, Y+34	; 0x22
    7cdc:	80 83       	st	Z, r24
    7cde:	91 83       	std	Z+1, r25	; 0x01
    7ce0:	a2 83       	std	Z+2, r26	; 0x02
    7ce2:	b3 83       	std	Z+3, r27	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    7ce4:	40 91 d3 22 	lds	r20, 0x22D3
    7ce8:	50 91 d4 22 	lds	r21, 0x22D4
    7cec:	8d 85       	ldd	r24, Y+13	; 0x0d
    7cee:	88 2f       	mov	r24, r24
    7cf0:	90 e0       	ldi	r25, 0x00	; 0
    7cf2:	88 0f       	add	r24, r24
    7cf4:	99 1f       	adc	r25, r25
    7cf6:	9c 01       	movw	r18, r24
    7cf8:	22 0f       	add	r18, r18
    7cfa:	33 1f       	adc	r19, r19
    7cfc:	22 0f       	add	r18, r18
    7cfe:	33 1f       	adc	r19, r19
    7d00:	82 0f       	add	r24, r18
    7d02:	93 1f       	adc	r25, r19
    7d04:	84 0f       	add	r24, r20
    7d06:	95 1f       	adc	r25, r21
    7d08:	fc 01       	movw	r30, r24
    7d0a:	36 96       	adiw	r30, 0x06	; 6
    7d0c:	81 e0       	ldi	r24, 0x01	; 1
    7d0e:	90 e0       	ldi	r25, 0x00	; 0
    7d10:	80 83       	st	Z, r24
    7d12:	91 83       	std	Z+1, r25	; 0x01
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
    7d14:	40 91 d3 22 	lds	r20, 0x22D3
    7d18:	50 91 d4 22 	lds	r21, 0x22D4
    7d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    7d1e:	88 2f       	mov	r24, r24
    7d20:	90 e0       	ldi	r25, 0x00	; 0
    7d22:	88 0f       	add	r24, r24
    7d24:	99 1f       	adc	r25, r25
    7d26:	9c 01       	movw	r18, r24
    7d28:	22 0f       	add	r18, r18
    7d2a:	33 1f       	adc	r19, r19
    7d2c:	22 0f       	add	r18, r18
    7d2e:	33 1f       	adc	r19, r19
    7d30:	82 0f       	add	r24, r18
    7d32:	93 1f       	adc	r25, r19
    7d34:	fa 01       	movw	r30, r20
    7d36:	e8 0f       	add	r30, r24
    7d38:	f9 1f       	adc	r31, r25
    7d3a:	20 81       	ld	r18, Z
    7d3c:	31 81       	ldd	r19, Z+1	; 0x01
    7d3e:	42 81       	ldd	r20, Z+2	; 0x02
    7d40:	53 81       	ldd	r21, Z+3	; 0x03
    7d42:	da 01       	movw	r26, r20
    7d44:	c9 01       	movw	r24, r18
    7d46:	bb 0f       	add	r27, r27
    7d48:	88 0b       	sbc	r24, r24
    7d4a:	98 2f       	mov	r25, r24
    7d4c:	dc 01       	movw	r26, r24
    7d4e:	19 01       	movw	r2, r18
    7d50:	2a 01       	movw	r4, r20
    7d52:	68 2e       	mov	r6, r24
    7d54:	78 2e       	mov	r7, r24
    7d56:	88 2e       	mov	r8, r24
    7d58:	98 2e       	mov	r9, r24
    7d5a:	2d 81       	ldd	r18, Y+5	; 0x05
    7d5c:	3e 81       	ldd	r19, Y+6	; 0x06
    7d5e:	4f 81       	ldd	r20, Y+7	; 0x07
    7d60:	58 85       	ldd	r21, Y+8	; 0x08
    7d62:	69 85       	ldd	r22, Y+9	; 0x09
    7d64:	7a 85       	ldd	r23, Y+10	; 0x0a
    7d66:	8b 85       	ldd	r24, Y+11	; 0x0b
    7d68:	9c 85       	ldd	r25, Y+12	; 0x0c
    7d6a:	a2 2c       	mov	r10, r2
    7d6c:	b3 2c       	mov	r11, r3
    7d6e:	c4 2c       	mov	r12, r4
    7d70:	d5 2c       	mov	r13, r5
    7d72:	e6 2c       	mov	r14, r6
    7d74:	f7 2c       	mov	r15, r7
    7d76:	08 2d       	mov	r16, r8
    7d78:	19 2d       	mov	r17, r9
    7d7a:	0e 94 e9 4a 	call	0x95d2	; 0x95d2 <__udivdi3>
    7d7e:	a2 2e       	mov	r10, r18
    7d80:	b3 2e       	mov	r11, r19
    7d82:	c4 2e       	mov	r12, r20
    7d84:	d5 2e       	mov	r13, r21
    7d86:	e6 2e       	mov	r14, r22
    7d88:	f7 2e       	mov	r15, r23
    7d8a:	08 2f       	mov	r16, r24
    7d8c:	19 2f       	mov	r17, r25
    7d8e:	2a 2d       	mov	r18, r10
    7d90:	3b 2d       	mov	r19, r11
    7d92:	4c 2d       	mov	r20, r12
    7d94:	5d 2d       	mov	r21, r13
    7d96:	6e 2d       	mov	r22, r14
    7d98:	7f 2d       	mov	r23, r15
    7d9a:	80 2f       	mov	r24, r16
    7d9c:	91 2f       	mov	r25, r17
    7d9e:	29 83       	std	Y+1, r18	; 0x01
    7da0:	3a 83       	std	Y+2, r19	; 0x02
    7da2:	4b 83       	std	Y+3, r20	; 0x03
    7da4:	5c 83       	std	Y+4, r21	; 0x04
    7da6:	3c c0       	rjmp	.+120    	; 0x7e20 <mv_queue_move_buffer+0x52a>
				while (ticks_per_step & 0xFFFF0000) {
					ticks_per_step >>= 1;
    7da8:	89 81       	ldd	r24, Y+1	; 0x01
    7daa:	9a 81       	ldd	r25, Y+2	; 0x02
    7dac:	ab 81       	ldd	r26, Y+3	; 0x03
    7dae:	bc 81       	ldd	r27, Y+4	; 0x04
    7db0:	b6 95       	lsr	r27
    7db2:	a7 95       	ror	r26
    7db4:	97 95       	ror	r25
    7db6:	87 95       	ror	r24
    7db8:	89 83       	std	Y+1, r24	; 0x01
    7dba:	9a 83       	std	Y+2, r25	; 0x02
    7dbc:	ab 83       	std	Y+3, r26	; 0x03
    7dbe:	bc 83       	std	Y+4, r27	; 0x04
					mv.p->a[i].postscale <<= 1;
    7dc0:	60 91 d3 22 	lds	r22, 0x22D3
    7dc4:	70 91 d4 22 	lds	r23, 0x22D4
    7dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    7dca:	a8 2f       	mov	r26, r24
    7dcc:	b0 e0       	ldi	r27, 0x00	; 0
    7dce:	40 91 d3 22 	lds	r20, 0x22D3
    7dd2:	50 91 d4 22 	lds	r21, 0x22D4
    7dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    7dd8:	88 2f       	mov	r24, r24
    7dda:	90 e0       	ldi	r25, 0x00	; 0
    7ddc:	88 0f       	add	r24, r24
    7dde:	99 1f       	adc	r25, r25
    7de0:	9c 01       	movw	r18, r24
    7de2:	22 0f       	add	r18, r18
    7de4:	33 1f       	adc	r19, r19
    7de6:	22 0f       	add	r18, r18
    7de8:	33 1f       	adc	r19, r19
    7dea:	82 0f       	add	r24, r18
    7dec:	93 1f       	adc	r25, r19
    7dee:	84 0f       	add	r24, r20
    7df0:	95 1f       	adc	r25, r21
    7df2:	fc 01       	movw	r30, r24
    7df4:	36 96       	adiw	r30, 0x06	; 6
    7df6:	80 81       	ld	r24, Z
    7df8:	91 81       	ldd	r25, Z+1	; 0x01
    7dfa:	ac 01       	movw	r20, r24
    7dfc:	44 0f       	add	r20, r20
    7dfe:	55 1f       	adc	r21, r21
    7e00:	cd 01       	movw	r24, r26
    7e02:	88 0f       	add	r24, r24
    7e04:	99 1f       	adc	r25, r25
    7e06:	9c 01       	movw	r18, r24
    7e08:	22 0f       	add	r18, r18
    7e0a:	33 1f       	adc	r19, r19
    7e0c:	22 0f       	add	r18, r18
    7e0e:	33 1f       	adc	r19, r19
    7e10:	82 0f       	add	r24, r18
    7e12:	93 1f       	adc	r25, r19
    7e14:	86 0f       	add	r24, r22
    7e16:	97 1f       	adc	r25, r23
    7e18:	fc 01       	movw	r30, r24
    7e1a:	36 96       	adiw	r30, 0x06	; 6
    7e1c:	40 83       	st	Z, r20
    7e1e:	51 83       	std	Z+1, r21	; 0x01

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
				while (ticks_per_step & 0xFFFF0000) {
    7e20:	89 81       	ldd	r24, Y+1	; 0x01
    7e22:	9a 81       	ldd	r25, Y+2	; 0x02
    7e24:	ab 81       	ldd	r26, Y+3	; 0x03
    7e26:	bc 81       	ldd	r27, Y+4	; 0x04
    7e28:	80 70       	andi	r24, 0x00	; 0
    7e2a:	90 70       	andi	r25, 0x00	; 0
    7e2c:	00 97       	sbiw	r24, 0x00	; 0
    7e2e:	a1 05       	cpc	r26, r1
    7e30:	b1 05       	cpc	r27, r1
    7e32:	09 f0       	breq	.+2      	; 0x7e36 <mv_queue_move_buffer+0x540>
    7e34:	b9 cf       	rjmp	.-142    	; 0x7da8 <mv_queue_move_buffer+0x4b2>
					ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    7e36:	40 91 d3 22 	lds	r20, 0x22D3
    7e3a:	50 91 d4 22 	lds	r21, 0x22D4
    7e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7e40:	88 2f       	mov	r24, r24
    7e42:	90 e0       	ldi	r25, 0x00	; 0
    7e44:	69 81       	ldd	r22, Y+1	; 0x01
    7e46:	7a 81       	ldd	r23, Y+2	; 0x02
    7e48:	88 0f       	add	r24, r24
    7e4a:	99 1f       	adc	r25, r25
    7e4c:	9c 01       	movw	r18, r24
    7e4e:	22 0f       	add	r18, r18
    7e50:	33 1f       	adc	r19, r19
    7e52:	22 0f       	add	r18, r18
    7e54:	33 1f       	adc	r19, r19
    7e56:	82 0f       	add	r24, r18
    7e58:	93 1f       	adc	r25, r19
    7e5a:	84 0f       	add	r24, r20
    7e5c:	95 1f       	adc	r25, r21
    7e5e:	fc 01       	movw	r30, r24
    7e60:	34 96       	adiw	r30, 0x04	; 4
    7e62:	60 83       	st	Z, r22
    7e64:	71 83       	std	Z+1, r23	; 0x01
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    7e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    7e68:	8f 5f       	subi	r24, 0xFF	; 255
    7e6a:	8d 87       	std	Y+13, r24	; 0x0d
    7e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    7e6e:	83 30       	cpi	r24, 0x03	; 3
    7e70:	08 f4       	brcc	.+2      	; 0x7e74 <mv_queue_move_buffer+0x57e>
    7e72:	85 ce       	rjmp	.-758    	; 0x7b7e <mv_queue_move_buffer+0x288>
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    7e74:	8e 85       	ldd	r24, Y+14	; 0x0e
    7e76:	80 93 d1 22 	sts	0x22D1, r24
	st_execute_move();
    7e7a:	0e 94 a3 32 	call	0x6546	; 0x6546 <st_execute_move>
	return (TG_OK);
    7e7e:	1f a2       	std	Y+39, r1	; 0x27
    7e80:	8f a1       	ldd	r24, Y+39	; 0x27
}
    7e82:	a7 96       	adiw	r28, 0x27	; 39
    7e84:	cd bf       	out	0x3d, r28	; 61
    7e86:	de bf       	out	0x3e, r29	; 62
    7e88:	cf 91       	pop	r28
    7e8a:	df 91       	pop	r29
    7e8c:	1f 91       	pop	r17
    7e8e:	0f 91       	pop	r16
    7e90:	ff 90       	pop	r15
    7e92:	ef 90       	pop	r14
    7e94:	df 90       	pop	r13
    7e96:	cf 90       	pop	r12
    7e98:	bf 90       	pop	r11
    7e9a:	af 90       	pop	r10
    7e9c:	9f 90       	pop	r9
    7e9e:	8f 90       	pop	r8
    7ea0:	7f 90       	pop	r7
    7ea2:	6f 90       	pop	r6
    7ea4:	5f 90       	pop	r5
    7ea6:	4f 90       	pop	r4
    7ea8:	3f 90       	pop	r3
    7eaa:	2f 90       	pop	r2
    7eac:	08 95       	ret

00007eae <mv_dequeue_move_buffer>:
/* 
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
    7eae:	df 93       	push	r29
    7eb0:	cf 93       	push	r28
    7eb2:	0f 92       	push	r0
    7eb4:	0f 92       	push	r0
    7eb6:	cd b7       	in	r28, 0x3d	; 61
    7eb8:	de b7       	in	r29, 0x3e	; 62
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    7eba:	90 91 d1 22 	lds	r25, 0x22D1
    7ebe:	80 91 d2 22 	lds	r24, 0x22D2
    7ec2:	98 17       	cp	r25, r24
    7ec4:	19 f4       	brne	.+6      	; 0x7ecc <mv_dequeue_move_buffer+0x1e>
		return (NULL);
    7ec6:	19 82       	std	Y+1, r1	; 0x01
    7ec8:	1a 82       	std	Y+2, r1	; 0x02
    7eca:	29 c0       	rjmp	.+82     	; 0x7f1e <mv_dequeue_move_buffer+0x70>
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    7ecc:	80 91 d2 22 	lds	r24, 0x22D2
    7ed0:	28 2f       	mov	r18, r24
    7ed2:	30 e0       	ldi	r19, 0x00	; 0
    7ed4:	c9 01       	movw	r24, r18
    7ed6:	88 0f       	add	r24, r24
    7ed8:	99 1f       	adc	r25, r25
    7eda:	82 0f       	add	r24, r18
    7edc:	93 1f       	adc	r25, r19
    7ede:	9c 01       	movw	r18, r24
    7ee0:	22 0f       	add	r18, r18
    7ee2:	33 1f       	adc	r19, r19
    7ee4:	22 0f       	add	r18, r18
    7ee6:	33 1f       	adc	r19, r19
    7ee8:	82 0f       	add	r24, r18
    7eea:	93 1f       	adc	r25, r19
    7eec:	88 0f       	add	r24, r24
    7eee:	99 1f       	adc	r25, r25
    7ef0:	8b 52       	subi	r24, 0x2B	; 43
    7ef2:	9d 4d       	sbci	r25, 0xDD	; 221
    7ef4:	80 93 d3 22 	sts	0x22D3, r24
    7ef8:	90 93 d4 22 	sts	0x22D4, r25
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    7efc:	80 91 d2 22 	lds	r24, 0x22D2
    7f00:	8f 5f       	subi	r24, 0xFF	; 255
    7f02:	80 93 d2 22 	sts	0x22D2, r24
    7f06:	80 91 d2 22 	lds	r24, 0x22D2
    7f0a:	83 30       	cpi	r24, 0x03	; 3
    7f0c:	10 f0       	brcs	.+4      	; 0x7f12 <mv_dequeue_move_buffer+0x64>
		mv.move_buffer_tail = 0;
    7f0e:	10 92 d2 22 	sts	0x22D2, r1
	}
	return (mv.p); 
    7f12:	80 91 d3 22 	lds	r24, 0x22D3
    7f16:	90 91 d4 22 	lds	r25, 0x22D4
    7f1a:	89 83       	std	Y+1, r24	; 0x01
    7f1c:	9a 83       	std	Y+2, r25	; 0x02
    7f1e:	89 81       	ldd	r24, Y+1	; 0x01
    7f20:	9a 81       	ldd	r25, Y+2	; 0x02
}
    7f22:	0f 90       	pop	r0
    7f24:	0f 90       	pop	r0
    7f26:	cf 91       	pop	r28
    7f28:	df 91       	pop	r29
    7f2a:	08 95       	ret

00007f2c <mv_test_move_buffer_full>:
 *		  buffer between the not-full result and the subsequent write. 
 *		  Be careful about changing this condition.
 */

uint8_t mv_test_move_buffer_full() 
{
    7f2c:	df 93       	push	r29
    7f2e:	cf 93       	push	r28
    7f30:	0f 92       	push	r0
    7f32:	0f 92       	push	r0
    7f34:	cd b7       	in	r28, 0x3d	; 61
    7f36:	de b7       	in	r29, 0x3e	; 62
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    7f38:	80 91 d1 22 	lds	r24, 0x22D1
    7f3c:	8f 5f       	subi	r24, 0xFF	; 255
    7f3e:	89 83       	std	Y+1, r24	; 0x01
    7f40:	89 81       	ldd	r24, Y+1	; 0x01
    7f42:	83 30       	cpi	r24, 0x03	; 3
    7f44:	08 f0       	brcs	.+2      	; 0x7f48 <mv_test_move_buffer_full+0x1c>
		next_buffer_head = 0;					  // wrap condition
    7f46:	19 82       	std	Y+1, r1	; 0x01
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    7f48:	90 91 d2 22 	lds	r25, 0x22D2
    7f4c:	89 81       	ldd	r24, Y+1	; 0x01
    7f4e:	98 17       	cp	r25, r24
    7f50:	19 f4       	brne	.+6      	; 0x7f58 <mv_test_move_buffer_full+0x2c>
		return (TRUE);
    7f52:	81 e0       	ldi	r24, 0x01	; 1
    7f54:	8a 83       	std	Y+2, r24	; 0x02
    7f56:	01 c0       	rjmp	.+2      	; 0x7f5a <mv_test_move_buffer_full+0x2e>
	};
	return (FALSE);
    7f58:	1a 82       	std	Y+2, r1	; 0x02
    7f5a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    7f5c:	0f 90       	pop	r0
    7f5e:	0f 90       	pop	r0
    7f60:	cf 91       	pop	r28
    7f62:	df 91       	pop	r29
    7f64:	08 95       	ret

00007f66 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    7f66:	df 93       	push	r29
    7f68:	cf 93       	push	r28
    7f6a:	cd b7       	in	r28, 0x3d	; 61
    7f6c:	de b7       	in	r29, 0x3e	; 62
    7f6e:	0f c0       	rjmp	.+30     	; 0x7f8e <mv_synchronize+0x28>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    7f70:	a8 e4       	ldi	r26, 0x48	; 72
    7f72:	b0 e0       	ldi	r27, 0x00	; 0
    7f74:	e8 e4       	ldi	r30, 0x48	; 72
    7f76:	f0 e0       	ldi	r31, 0x00	; 0
    7f78:	80 81       	ld	r24, Z
    7f7a:	81 60       	ori	r24, 0x01	; 1
    7f7c:	8c 93       	st	X, r24
    7f7e:	88 95       	sleep
    7f80:	a8 e4       	ldi	r26, 0x48	; 72
    7f82:	b0 e0       	ldi	r27, 0x00	; 0
    7f84:	e8 e4       	ldi	r30, 0x48	; 72
    7f86:	f0 e0       	ldi	r31, 0x00	; 0
    7f88:	80 81       	ld	r24, Z
    7f8a:	8e 7f       	andi	r24, 0xFE	; 254
    7f8c:	8c 93       	st	X, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    7f8e:	90 91 d2 22 	lds	r25, 0x22D2
    7f92:	80 91 d1 22 	lds	r24, 0x22D1
    7f96:	98 17       	cp	r25, r24
    7f98:	59 f7       	brne	.-42     	; 0x7f70 <mv_synchronize+0xa>
		sleep_mode();
	}    
}
    7f9a:	cf 91       	pop	r28
    7f9c:	df 91       	pop	r29
    7f9e:	08 95       	ret

00007fa0 <mv_flush>:
/* 
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
    7fa0:	df 93       	push	r29
    7fa2:	cf 93       	push	r28
    7fa4:	cd b7       	in	r28, 0x3d	; 61
    7fa6:	de b7       	in	r29, 0x3e	; 62
	cli();
    7fa8:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    7faa:	80 91 d1 22 	lds	r24, 0x22D1
    7fae:	80 93 d2 22 	sts	0x22D2, r24
	mv.p = NULL;
    7fb2:	10 92 d3 22 	sts	0x22D3, r1
    7fb6:	10 92 d4 22 	sts	0x22D4, r1
	sei();
    7fba:	78 94       	sei
}
    7fbc:	cf 91       	pop	r28
    7fbe:	df 91       	pop	r29
    7fc0:	08 95       	ret

00007fc2 <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    7fc2:	df 93       	push	r29
    7fc4:	cf 93       	push	r28
    7fc6:	0f 92       	push	r0
    7fc8:	cd b7       	in	r28, 0x3d	; 61
    7fca:	de b7       	in	r29, 0x3e	; 62
	for (uint8_t i=X; i<=A; i++) {
    7fcc:	19 82       	std	Y+1, r1	; 0x01
    7fce:	81 c0       	rjmp	.+258    	; 0x80d2 <ls_init+0x110>
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    7fd0:	89 81       	ldd	r24, Y+1	; 0x01
    7fd2:	88 2f       	mov	r24, r24
    7fd4:	90 e0       	ldi	r25, 0x00	; 0
    7fd6:	01 96       	adiw	r24, 0x01	; 1
    7fd8:	82 95       	swap	r24
    7fda:	92 95       	swap	r25
    7fdc:	90 7f       	andi	r25, 0xF0	; 240
    7fde:	98 27       	eor	r25, r24
    7fe0:	80 7f       	andi	r24, 0xF0	; 240
    7fe2:	98 27       	eor	r25, r24
    7fe4:	fc 01       	movw	r30, r24
    7fe6:	e1 5d       	subi	r30, 0xD1	; 209
    7fe8:	fc 4d       	sbci	r31, 0xDC	; 220
    7fea:	01 90       	ld	r0, Z+
    7fec:	f0 81       	ld	r31, Z
    7fee:	e0 2d       	mov	r30, r0
    7ff0:	80 e4       	ldi	r24, 0x40	; 64
    7ff2:	82 83       	std	Z+2, r24	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    7ff4:	89 81       	ldd	r24, Y+1	; 0x01
    7ff6:	88 2f       	mov	r24, r24
    7ff8:	90 e0       	ldi	r25, 0x00	; 0
    7ffa:	01 96       	adiw	r24, 0x01	; 1
    7ffc:	82 95       	swap	r24
    7ffe:	92 95       	swap	r25
    8000:	90 7f       	andi	r25, 0xF0	; 240
    8002:	98 27       	eor	r25, r24
    8004:	80 7f       	andi	r24, 0xF0	; 240
    8006:	98 27       	eor	r25, r24
    8008:	fc 01       	movw	r30, r24
    800a:	e1 5d       	subi	r30, 0xD1	; 209
    800c:	fc 4d       	sbci	r31, 0xDC	; 220
    800e:	01 90       	ld	r0, Z+
    8010:	f0 81       	ld	r31, Z
    8012:	e0 2d       	mov	r30, r0
    8014:	80 e8       	ldi	r24, 0x80	; 128
    8016:	82 83       	std	Z+2, r24	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    8018:	89 81       	ldd	r24, Y+1	; 0x01
    801a:	88 2f       	mov	r24, r24
    801c:	90 e0       	ldi	r25, 0x00	; 0
    801e:	01 96       	adiw	r24, 0x01	; 1
    8020:	82 95       	swap	r24
    8022:	92 95       	swap	r25
    8024:	90 7f       	andi	r25, 0xF0	; 240
    8026:	98 27       	eor	r25, r24
    8028:	80 7f       	andi	r24, 0xF0	; 240
    802a:	98 27       	eor	r25, r24
    802c:	fc 01       	movw	r30, r24
    802e:	e1 5d       	subi	r30, 0xD1	; 209
    8030:	fc 4d       	sbci	r31, 0xDC	; 220
    8032:	01 90       	ld	r0, Z+
    8034:	f0 81       	ld	r31, Z
    8036:	e0 2d       	mov	r30, r0
    8038:	89 e1       	ldi	r24, 0x19	; 25
    803a:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    803c:	89 81       	ldd	r24, Y+1	; 0x01
    803e:	88 2f       	mov	r24, r24
    8040:	90 e0       	ldi	r25, 0x00	; 0
    8042:	01 96       	adiw	r24, 0x01	; 1
    8044:	82 95       	swap	r24
    8046:	92 95       	swap	r25
    8048:	90 7f       	andi	r25, 0xF0	; 240
    804a:	98 27       	eor	r25, r24
    804c:	80 7f       	andi	r24, 0xF0	; 240
    804e:	98 27       	eor	r25, r24
    8050:	fc 01       	movw	r30, r24
    8052:	e1 5d       	subi	r30, 0xD1	; 209
    8054:	fc 4d       	sbci	r31, 0xDC	; 220
    8056:	01 90       	ld	r0, Z+
    8058:	f0 81       	ld	r31, Z
    805a:	e0 2d       	mov	r30, r0
    805c:	89 e1       	ldi	r24, 0x19	; 25
    805e:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    8060:	89 81       	ldd	r24, Y+1	; 0x01
    8062:	88 2f       	mov	r24, r24
    8064:	90 e0       	ldi	r25, 0x00	; 0
    8066:	01 96       	adiw	r24, 0x01	; 1
    8068:	82 95       	swap	r24
    806a:	92 95       	swap	r25
    806c:	90 7f       	andi	r25, 0xF0	; 240
    806e:	98 27       	eor	r25, r24
    8070:	80 7f       	andi	r24, 0xF0	; 240
    8072:	98 27       	eor	r25, r24
    8074:	fc 01       	movw	r30, r24
    8076:	e1 5d       	subi	r30, 0xD1	; 209
    8078:	fc 4d       	sbci	r31, 0xDC	; 220
    807a:	01 90       	ld	r0, Z+
    807c:	f0 81       	ld	r31, Z
    807e:	e0 2d       	mov	r30, r0
    8080:	80 e4       	ldi	r24, 0x40	; 64
    8082:	82 87       	std	Z+10, r24	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    8084:	89 81       	ldd	r24, Y+1	; 0x01
    8086:	88 2f       	mov	r24, r24
    8088:	90 e0       	ldi	r25, 0x00	; 0
    808a:	01 96       	adiw	r24, 0x01	; 1
    808c:	82 95       	swap	r24
    808e:	92 95       	swap	r25
    8090:	90 7f       	andi	r25, 0xF0	; 240
    8092:	98 27       	eor	r25, r24
    8094:	80 7f       	andi	r24, 0xF0	; 240
    8096:	98 27       	eor	r25, r24
    8098:	fc 01       	movw	r30, r24
    809a:	e1 5d       	subi	r30, 0xD1	; 209
    809c:	fc 4d       	sbci	r31, 0xDC	; 220
    809e:	01 90       	ld	r0, Z+
    80a0:	f0 81       	ld	r31, Z
    80a2:	e0 2d       	mov	r30, r0
    80a4:	80 e8       	ldi	r24, 0x80	; 128
    80a6:	83 87       	std	Z+11, r24	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    80a8:	89 81       	ldd	r24, Y+1	; 0x01
    80aa:	88 2f       	mov	r24, r24
    80ac:	90 e0       	ldi	r25, 0x00	; 0
    80ae:	01 96       	adiw	r24, 0x01	; 1
    80b0:	82 95       	swap	r24
    80b2:	92 95       	swap	r25
    80b4:	90 7f       	andi	r25, 0xF0	; 240
    80b6:	98 27       	eor	r25, r24
    80b8:	80 7f       	andi	r24, 0xF0	; 240
    80ba:	98 27       	eor	r25, r24
    80bc:	fc 01       	movw	r30, r24
    80be:	e1 5d       	subi	r30, 0xD1	; 209
    80c0:	fc 4d       	sbci	r31, 0xDC	; 220
    80c2:	01 90       	ld	r0, Z+
    80c4:	f0 81       	ld	r31, Z
    80c6:	e0 2d       	mov	r30, r0
    80c8:	8a e0       	ldi	r24, 0x0A	; 10
    80ca:	81 87       	std	Z+9, r24	; 0x09
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    80cc:	89 81       	ldd	r24, Y+1	; 0x01
    80ce:	8f 5f       	subi	r24, 0xFF	; 255
    80d0:	89 83       	std	Y+1, r24	; 0x01
    80d2:	89 81       	ldd	r24, Y+1	; 0x01
    80d4:	84 30       	cpi	r24, 0x04	; 4
    80d6:	08 f4       	brcc	.+2      	; 0x80da <ls_init+0x118>
    80d8:	7b cf       	rjmp	.-266    	; 0x7fd0 <ls_init+0xe>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    80da:	0f 90       	pop	r0
    80dc:	cf 91       	pop	r28
    80de:	df 91       	pop	r29
    80e0:	08 95       	ret

000080e2 <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    80e2:	1f 92       	push	r1
    80e4:	0f 92       	push	r0
    80e6:	0f b6       	in	r0, 0x3f	; 63
    80e8:	0f 92       	push	r0
    80ea:	00 90 3b 00 	lds	r0, 0x003B
    80ee:	0f 92       	push	r0
    80f0:	11 24       	eor	r1, r1
    80f2:	2f 93       	push	r18
    80f4:	3f 93       	push	r19
    80f6:	4f 93       	push	r20
    80f8:	5f 93       	push	r21
    80fa:	6f 93       	push	r22
    80fc:	7f 93       	push	r23
    80fe:	8f 93       	push	r24
    8100:	9f 93       	push	r25
    8102:	af 93       	push	r26
    8104:	bf 93       	push	r27
    8106:	ef 93       	push	r30
    8108:	ff 93       	push	r31
    810a:	df 93       	push	r29
    810c:	cf 93       	push	r28
    810e:	cd b7       	in	r28, 0x3d	; 61
    8110:	de b7       	in	r29, 0x3e	; 62
    8112:	0e 94 f1 41 	call	0x83e2	; 0x83e2 <_ls_handler>
    8116:	cf 91       	pop	r28
    8118:	df 91       	pop	r29
    811a:	ff 91       	pop	r31
    811c:	ef 91       	pop	r30
    811e:	bf 91       	pop	r27
    8120:	af 91       	pop	r26
    8122:	9f 91       	pop	r25
    8124:	8f 91       	pop	r24
    8126:	7f 91       	pop	r23
    8128:	6f 91       	pop	r22
    812a:	5f 91       	pop	r21
    812c:	4f 91       	pop	r20
    812e:	3f 91       	pop	r19
    8130:	2f 91       	pop	r18
    8132:	0f 90       	pop	r0
    8134:	00 92 3b 00 	sts	0x003B, r0
    8138:	0f 90       	pop	r0
    813a:	0f be       	out	0x3f, r0	; 63
    813c:	0f 90       	pop	r0
    813e:	1f 90       	pop	r1
    8140:	18 95       	reti

00008142 <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    8142:	1f 92       	push	r1
    8144:	0f 92       	push	r0
    8146:	0f b6       	in	r0, 0x3f	; 63
    8148:	0f 92       	push	r0
    814a:	00 90 3b 00 	lds	r0, 0x003B
    814e:	0f 92       	push	r0
    8150:	11 24       	eor	r1, r1
    8152:	2f 93       	push	r18
    8154:	3f 93       	push	r19
    8156:	4f 93       	push	r20
    8158:	5f 93       	push	r21
    815a:	6f 93       	push	r22
    815c:	7f 93       	push	r23
    815e:	8f 93       	push	r24
    8160:	9f 93       	push	r25
    8162:	af 93       	push	r26
    8164:	bf 93       	push	r27
    8166:	ef 93       	push	r30
    8168:	ff 93       	push	r31
    816a:	df 93       	push	r29
    816c:	cf 93       	push	r28
    816e:	cd b7       	in	r28, 0x3d	; 61
    8170:	de b7       	in	r29, 0x3e	; 62
    8172:	0e 94 f1 41 	call	0x83e2	; 0x83e2 <_ls_handler>
    8176:	cf 91       	pop	r28
    8178:	df 91       	pop	r29
    817a:	ff 91       	pop	r31
    817c:	ef 91       	pop	r30
    817e:	bf 91       	pop	r27
    8180:	af 91       	pop	r26
    8182:	9f 91       	pop	r25
    8184:	8f 91       	pop	r24
    8186:	7f 91       	pop	r23
    8188:	6f 91       	pop	r22
    818a:	5f 91       	pop	r21
    818c:	4f 91       	pop	r20
    818e:	3f 91       	pop	r19
    8190:	2f 91       	pop	r18
    8192:	0f 90       	pop	r0
    8194:	00 92 3b 00 	sts	0x003B, r0
    8198:	0f 90       	pop	r0
    819a:	0f be       	out	0x3f, r0	; 63
    819c:	0f 90       	pop	r0
    819e:	1f 90       	pop	r1
    81a0:	18 95       	reti

000081a2 <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    81a2:	1f 92       	push	r1
    81a4:	0f 92       	push	r0
    81a6:	0f b6       	in	r0, 0x3f	; 63
    81a8:	0f 92       	push	r0
    81aa:	00 90 3b 00 	lds	r0, 0x003B
    81ae:	0f 92       	push	r0
    81b0:	11 24       	eor	r1, r1
    81b2:	2f 93       	push	r18
    81b4:	3f 93       	push	r19
    81b6:	4f 93       	push	r20
    81b8:	5f 93       	push	r21
    81ba:	6f 93       	push	r22
    81bc:	7f 93       	push	r23
    81be:	8f 93       	push	r24
    81c0:	9f 93       	push	r25
    81c2:	af 93       	push	r26
    81c4:	bf 93       	push	r27
    81c6:	ef 93       	push	r30
    81c8:	ff 93       	push	r31
    81ca:	df 93       	push	r29
    81cc:	cf 93       	push	r28
    81ce:	cd b7       	in	r28, 0x3d	; 61
    81d0:	de b7       	in	r29, 0x3e	; 62
    81d2:	0e 94 f1 41 	call	0x83e2	; 0x83e2 <_ls_handler>
    81d6:	cf 91       	pop	r28
    81d8:	df 91       	pop	r29
    81da:	ff 91       	pop	r31
    81dc:	ef 91       	pop	r30
    81de:	bf 91       	pop	r27
    81e0:	af 91       	pop	r26
    81e2:	9f 91       	pop	r25
    81e4:	8f 91       	pop	r24
    81e6:	7f 91       	pop	r23
    81e8:	6f 91       	pop	r22
    81ea:	5f 91       	pop	r21
    81ec:	4f 91       	pop	r20
    81ee:	3f 91       	pop	r19
    81f0:	2f 91       	pop	r18
    81f2:	0f 90       	pop	r0
    81f4:	00 92 3b 00 	sts	0x003B, r0
    81f8:	0f 90       	pop	r0
    81fa:	0f be       	out	0x3f, r0	; 63
    81fc:	0f 90       	pop	r0
    81fe:	1f 90       	pop	r1
    8200:	18 95       	reti

00008202 <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    8202:	1f 92       	push	r1
    8204:	0f 92       	push	r0
    8206:	0f b6       	in	r0, 0x3f	; 63
    8208:	0f 92       	push	r0
    820a:	00 90 3b 00 	lds	r0, 0x003B
    820e:	0f 92       	push	r0
    8210:	11 24       	eor	r1, r1
    8212:	2f 93       	push	r18
    8214:	3f 93       	push	r19
    8216:	4f 93       	push	r20
    8218:	5f 93       	push	r21
    821a:	6f 93       	push	r22
    821c:	7f 93       	push	r23
    821e:	8f 93       	push	r24
    8220:	9f 93       	push	r25
    8222:	af 93       	push	r26
    8224:	bf 93       	push	r27
    8226:	ef 93       	push	r30
    8228:	ff 93       	push	r31
    822a:	df 93       	push	r29
    822c:	cf 93       	push	r28
    822e:	cd b7       	in	r28, 0x3d	; 61
    8230:	de b7       	in	r29, 0x3e	; 62
    8232:	0e 94 f1 41 	call	0x83e2	; 0x83e2 <_ls_handler>
    8236:	cf 91       	pop	r28
    8238:	df 91       	pop	r29
    823a:	ff 91       	pop	r31
    823c:	ef 91       	pop	r30
    823e:	bf 91       	pop	r27
    8240:	af 91       	pop	r26
    8242:	9f 91       	pop	r25
    8244:	8f 91       	pop	r24
    8246:	7f 91       	pop	r23
    8248:	6f 91       	pop	r22
    824a:	5f 91       	pop	r21
    824c:	4f 91       	pop	r20
    824e:	3f 91       	pop	r19
    8250:	2f 91       	pop	r18
    8252:	0f 90       	pop	r0
    8254:	00 92 3b 00 	sts	0x003B, r0
    8258:	0f 90       	pop	r0
    825a:	0f be       	out	0x3f, r0	; 63
    825c:	0f 90       	pop	r0
    825e:	1f 90       	pop	r1
    8260:	18 95       	reti

00008262 <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    8262:	1f 92       	push	r1
    8264:	0f 92       	push	r0
    8266:	0f b6       	in	r0, 0x3f	; 63
    8268:	0f 92       	push	r0
    826a:	00 90 3b 00 	lds	r0, 0x003B
    826e:	0f 92       	push	r0
    8270:	11 24       	eor	r1, r1
    8272:	2f 93       	push	r18
    8274:	3f 93       	push	r19
    8276:	4f 93       	push	r20
    8278:	5f 93       	push	r21
    827a:	6f 93       	push	r22
    827c:	7f 93       	push	r23
    827e:	8f 93       	push	r24
    8280:	9f 93       	push	r25
    8282:	af 93       	push	r26
    8284:	bf 93       	push	r27
    8286:	ef 93       	push	r30
    8288:	ff 93       	push	r31
    828a:	df 93       	push	r29
    828c:	cf 93       	push	r28
    828e:	cd b7       	in	r28, 0x3d	; 61
    8290:	de b7       	in	r29, 0x3e	; 62
    8292:	0e 94 f1 41 	call	0x83e2	; 0x83e2 <_ls_handler>
    8296:	cf 91       	pop	r28
    8298:	df 91       	pop	r29
    829a:	ff 91       	pop	r31
    829c:	ef 91       	pop	r30
    829e:	bf 91       	pop	r27
    82a0:	af 91       	pop	r26
    82a2:	9f 91       	pop	r25
    82a4:	8f 91       	pop	r24
    82a6:	7f 91       	pop	r23
    82a8:	6f 91       	pop	r22
    82aa:	5f 91       	pop	r21
    82ac:	4f 91       	pop	r20
    82ae:	3f 91       	pop	r19
    82b0:	2f 91       	pop	r18
    82b2:	0f 90       	pop	r0
    82b4:	00 92 3b 00 	sts	0x003B, r0
    82b8:	0f 90       	pop	r0
    82ba:	0f be       	out	0x3f, r0	; 63
    82bc:	0f 90       	pop	r0
    82be:	1f 90       	pop	r1
    82c0:	18 95       	reti

000082c2 <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    82c2:	1f 92       	push	r1
    82c4:	0f 92       	push	r0
    82c6:	0f b6       	in	r0, 0x3f	; 63
    82c8:	0f 92       	push	r0
    82ca:	00 90 3b 00 	lds	r0, 0x003B
    82ce:	0f 92       	push	r0
    82d0:	11 24       	eor	r1, r1
    82d2:	2f 93       	push	r18
    82d4:	3f 93       	push	r19
    82d6:	4f 93       	push	r20
    82d8:	5f 93       	push	r21
    82da:	6f 93       	push	r22
    82dc:	7f 93       	push	r23
    82de:	8f 93       	push	r24
    82e0:	9f 93       	push	r25
    82e2:	af 93       	push	r26
    82e4:	bf 93       	push	r27
    82e6:	ef 93       	push	r30
    82e8:	ff 93       	push	r31
    82ea:	df 93       	push	r29
    82ec:	cf 93       	push	r28
    82ee:	cd b7       	in	r28, 0x3d	; 61
    82f0:	de b7       	in	r29, 0x3e	; 62
    82f2:	0e 94 f1 41 	call	0x83e2	; 0x83e2 <_ls_handler>
    82f6:	cf 91       	pop	r28
    82f8:	df 91       	pop	r29
    82fa:	ff 91       	pop	r31
    82fc:	ef 91       	pop	r30
    82fe:	bf 91       	pop	r27
    8300:	af 91       	pop	r26
    8302:	9f 91       	pop	r25
    8304:	8f 91       	pop	r24
    8306:	7f 91       	pop	r23
    8308:	6f 91       	pop	r22
    830a:	5f 91       	pop	r21
    830c:	4f 91       	pop	r20
    830e:	3f 91       	pop	r19
    8310:	2f 91       	pop	r18
    8312:	0f 90       	pop	r0
    8314:	00 92 3b 00 	sts	0x003B, r0
    8318:	0f 90       	pop	r0
    831a:	0f be       	out	0x3f, r0	; 63
    831c:	0f 90       	pop	r0
    831e:	1f 90       	pop	r1
    8320:	18 95       	reti

00008322 <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    8322:	1f 92       	push	r1
    8324:	0f 92       	push	r0
    8326:	0f b6       	in	r0, 0x3f	; 63
    8328:	0f 92       	push	r0
    832a:	00 90 3b 00 	lds	r0, 0x003B
    832e:	0f 92       	push	r0
    8330:	11 24       	eor	r1, r1
    8332:	2f 93       	push	r18
    8334:	3f 93       	push	r19
    8336:	4f 93       	push	r20
    8338:	5f 93       	push	r21
    833a:	6f 93       	push	r22
    833c:	7f 93       	push	r23
    833e:	8f 93       	push	r24
    8340:	9f 93       	push	r25
    8342:	af 93       	push	r26
    8344:	bf 93       	push	r27
    8346:	ef 93       	push	r30
    8348:	ff 93       	push	r31
    834a:	df 93       	push	r29
    834c:	cf 93       	push	r28
    834e:	cd b7       	in	r28, 0x3d	; 61
    8350:	de b7       	in	r29, 0x3e	; 62
    8352:	0e 94 f1 41 	call	0x83e2	; 0x83e2 <_ls_handler>
    8356:	cf 91       	pop	r28
    8358:	df 91       	pop	r29
    835a:	ff 91       	pop	r31
    835c:	ef 91       	pop	r30
    835e:	bf 91       	pop	r27
    8360:	af 91       	pop	r26
    8362:	9f 91       	pop	r25
    8364:	8f 91       	pop	r24
    8366:	7f 91       	pop	r23
    8368:	6f 91       	pop	r22
    836a:	5f 91       	pop	r21
    836c:	4f 91       	pop	r20
    836e:	3f 91       	pop	r19
    8370:	2f 91       	pop	r18
    8372:	0f 90       	pop	r0
    8374:	00 92 3b 00 	sts	0x003B, r0
    8378:	0f 90       	pop	r0
    837a:	0f be       	out	0x3f, r0	; 63
    837c:	0f 90       	pop	r0
    837e:	1f 90       	pop	r1
    8380:	18 95       	reti

00008382 <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    8382:	1f 92       	push	r1
    8384:	0f 92       	push	r0
    8386:	0f b6       	in	r0, 0x3f	; 63
    8388:	0f 92       	push	r0
    838a:	00 90 3b 00 	lds	r0, 0x003B
    838e:	0f 92       	push	r0
    8390:	11 24       	eor	r1, r1
    8392:	2f 93       	push	r18
    8394:	3f 93       	push	r19
    8396:	4f 93       	push	r20
    8398:	5f 93       	push	r21
    839a:	6f 93       	push	r22
    839c:	7f 93       	push	r23
    839e:	8f 93       	push	r24
    83a0:	9f 93       	push	r25
    83a2:	af 93       	push	r26
    83a4:	bf 93       	push	r27
    83a6:	ef 93       	push	r30
    83a8:	ff 93       	push	r31
    83aa:	df 93       	push	r29
    83ac:	cf 93       	push	r28
    83ae:	cd b7       	in	r28, 0x3d	; 61
    83b0:	de b7       	in	r29, 0x3e	; 62
    83b2:	0e 94 f1 41 	call	0x83e2	; 0x83e2 <_ls_handler>
    83b6:	cf 91       	pop	r28
    83b8:	df 91       	pop	r29
    83ba:	ff 91       	pop	r31
    83bc:	ef 91       	pop	r30
    83be:	bf 91       	pop	r27
    83c0:	af 91       	pop	r26
    83c2:	9f 91       	pop	r25
    83c4:	8f 91       	pop	r24
    83c6:	7f 91       	pop	r23
    83c8:	6f 91       	pop	r22
    83ca:	5f 91       	pop	r21
    83cc:	4f 91       	pop	r20
    83ce:	3f 91       	pop	r19
    83d0:	2f 91       	pop	r18
    83d2:	0f 90       	pop	r0
    83d4:	00 92 3b 00 	sts	0x003B, r0
    83d8:	0f 90       	pop	r0
    83da:	0f be       	out	0x3f, r0	; 63
    83dc:	0f 90       	pop	r0
    83de:	1f 90       	pop	r1
    83e0:	18 95       	reti

000083e2 <_ls_handler>:

void _ls_handler() {
    83e2:	df 93       	push	r29
    83e4:	cf 93       	push	r28
    83e6:	cd b7       	in	r28, 0x3d	; 61
    83e8:	de b7       	in	r29, 0x3e	; 62
//	tg_kill();
	return;
}
    83ea:	cf 91       	pop	r28
    83ec:	df 91       	pop	r29
    83ee:	08 95       	ret

000083f0 <signal_etx>:

/*
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx() {			// ^c
    83f0:	df 93       	push	r29
    83f2:	cf 93       	push	r28
    83f4:	cd b7       	in	r28, 0x3d	; 61
    83f6:	de b7       	in	r29, 0x3e	; 62
{
	tg_reset_source();					// return control to standard device
    83f8:	0e 94 f2 3b 	call	0x77e4	; 0x77e4 <tg_reset_source>
	mc_motion_stop();					// stop computing and generating motions
    83fc:	0e 94 84 23 	call	0x4708	; 0x4708 <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    8400:	0e 94 d0 3f 	call	0x7fa0	; 0x7fa0 <mv_flush>
	st_stop_steppers();					// stop the steppers
    8404:	0e 94 b7 34 	call	0x696e	; 0x696e <st_stop_steppers>
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
*/
}
    8408:	cf 91       	pop	r28
    840a:	df 91       	pop	r29
    840c:	08 95       	ret

0000840e <tg_resume.1635>:
{
	return;
}

void tg_resume()
{
    840e:	df 93       	push	r29
    8410:	cf 93       	push	r28
    8412:	cd b7       	in	r28, 0x3d	; 61
    8414:	de b7       	in	r29, 0x3e	; 62
	return;
}
    8416:	cf 91       	pop	r28
    8418:	df 91       	pop	r29
    841a:	08 95       	ret

0000841c <tg_pause.1633>:
//	tg_kill();
	return;
}

void tg_pause()
{
    841c:	df 93       	push	r29
    841e:	cf 93       	push	r28
    8420:	cd b7       	in	r28, 0x3d	; 61
    8422:	de b7       	in	r29, 0x3e	; 62
	return;
}
    8424:	cf 91       	pop	r28
    8426:	df 91       	pop	r29
    8428:	08 95       	ret

0000842a <tg_terminate.1631>:
	st_stop_steppers();					// stop the steppers
	return;
}

void tg_terminate()
{
    842a:	df 93       	push	r29
    842c:	cf 93       	push	r28
    842e:	cd b7       	in	r28, 0x3d	; 61
    8430:	de b7       	in	r29, 0x3e	; 62
//	tg_kill();
	return;
}
    8432:	cf 91       	pop	r28
    8434:	df 91       	pop	r29
    8436:	08 95       	ret

00008438 <xio_init_usart>:
					const struct PORT_struct *port_addr,
					const uint8_t dirclr, 
					const uint8_t dirset, 
					const uint8_t outclr, 
					const uint8_t outset) 
{
    8438:	af 92       	push	r10
    843a:	cf 92       	push	r12
    843c:	ef 92       	push	r14
    843e:	0f 93       	push	r16
    8440:	df 93       	push	r29
    8442:	cf 93       	push	r28
    8444:	cd b7       	in	r28, 0x3d	; 61
    8446:	de b7       	in	r29, 0x3e	; 62
    8448:	2e 97       	sbiw	r28, 0x0e	; 14
    844a:	cd bf       	out	0x3d, r28	; 61
    844c:	de bf       	out	0x3e, r29	; 62
    844e:	8c 83       	std	Y+4, r24	; 0x04
    8450:	6d 83       	std	Y+5, r22	; 0x05
    8452:	7e 83       	std	Y+6, r23	; 0x06
    8454:	4f 83       	std	Y+7, r20	; 0x07
    8456:	58 87       	std	Y+8, r21	; 0x08
    8458:	29 87       	std	Y+9, r18	; 0x09
    845a:	3a 87       	std	Y+10, r19	; 0x0a
    845c:	0b 87       	std	Y+11, r16	; 0x0b
    845e:	ec 86       	std	Y+12, r14	; 0x0c
    8460:	cd 86       	std	Y+13, r12	; 0x0d
    8462:	ae 86       	std	Y+14, r10	; 0x0e
//	struct xioUSART *u = (struct xioUSART *)ds[dev].xio; // cast for FILEs
	struct xioUSART *u = ds[dev].xio;
    8464:	8c 81       	ldd	r24, Y+4	; 0x04
    8466:	28 2f       	mov	r18, r24
    8468:	30 e0       	ldi	r19, 0x00	; 0
    846a:	84 e6       	ldi	r24, 0x64	; 100
    846c:	90 e0       	ldi	r25, 0x00	; 0
    846e:	ac 01       	movw	r20, r24
    8470:	24 9f       	mul	r18, r20
    8472:	c0 01       	movw	r24, r0
    8474:	25 9f       	mul	r18, r21
    8476:	90 0d       	add	r25, r0
    8478:	34 9f       	mul	r19, r20
    847a:	90 0d       	add	r25, r0
    847c:	11 24       	eor	r1, r1
    847e:	fc 01       	movw	r30, r24
    8480:	e5 54       	subi	r30, 0x45	; 69
    8482:	fb 4d       	sbci	r31, 0xDB	; 219
    8484:	80 81       	ld	r24, Z
    8486:	91 81       	ldd	r25, Z+1	; 0x01
    8488:	8a 83       	std	Y+2, r24	; 0x02
    848a:	9b 83       	std	Y+3, r25	; 0x03

	// bind USART and PORT structures - do this first
	u->usart = (struct USART_struct *)usart_addr;
    848c:	8f 81       	ldd	r24, Y+7	; 0x07
    848e:	98 85       	ldd	r25, Y+8	; 0x08
    8490:	ea 81       	ldd	r30, Y+2	; 0x02
    8492:	fb 81       	ldd	r31, Y+3	; 0x03
    8494:	85 83       	std	Z+5, r24	; 0x05
    8496:	96 83       	std	Z+6, r25	; 0x06
	u->port = (struct PORT_struct *)port_addr;
    8498:	89 85       	ldd	r24, Y+9	; 0x09
    849a:	9a 85       	ldd	r25, Y+10	; 0x0a
    849c:	ea 81       	ldd	r30, Y+2	; 0x02
    849e:	fb 81       	ldd	r31, Y+3	; 0x03
    84a0:	87 83       	std	Z+7, r24	; 0x07
    84a2:	90 87       	std	Z+8, r25	; 0x08

	// set flags
	xio_set_control_flags(dev, control);
    84a4:	2d 81       	ldd	r18, Y+5	; 0x05
    84a6:	3e 81       	ldd	r19, Y+6	; 0x06
    84a8:	8c 81       	ldd	r24, Y+4	; 0x04
    84aa:	b9 01       	movw	r22, r18
    84ac:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <xio_set_control_flags>

	// setup internal RX/TX buffers
	u->rx_buf_head = 1;						// can't use location 0
    84b0:	ea 81       	ldd	r30, Y+2	; 0x02
    84b2:	fb 81       	ldd	r31, Y+3	; 0x03
    84b4:	81 e0       	ldi	r24, 0x01	; 1
    84b6:	81 83       	std	Z+1, r24	; 0x01
	u->rx_buf_tail = 1;
    84b8:	ea 81       	ldd	r30, Y+2	; 0x02
    84ba:	fb 81       	ldd	r31, Y+3	; 0x03
    84bc:	81 e0       	ldi	r24, 0x01	; 1
    84be:	80 83       	st	Z, r24
	u->tx_buf_head = 1;
    84c0:	ea 81       	ldd	r30, Y+2	; 0x02
    84c2:	fb 81       	ldd	r31, Y+3	; 0x03
    84c4:	81 e0       	ldi	r24, 0x01	; 1
    84c6:	83 83       	std	Z+3, r24	; 0x03
	u->tx_buf_tail = 1;
    84c8:	ea 81       	ldd	r30, Y+2	; 0x02
    84ca:	fb 81       	ldd	r31, Y+3	; 0x03
    84cc:	81 e0       	ldi	r24, 0x01	; 1
    84ce:	82 83       	std	Z+2, r24	; 0x02

	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    84d0:	8d 81       	ldd	r24, Y+5	; 0x05
    84d2:	8f 70       	andi	r24, 0x0F	; 15
    84d4:	89 83       	std	Y+1, r24	; 0x01
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
    84d6:	89 81       	ldd	r24, Y+1	; 0x01
    84d8:	88 23       	and	r24, r24
    84da:	11 f4       	brne	.+4      	; 0x84e0 <xio_init_usart+0xa8>
    84dc:	85 e0       	ldi	r24, 0x05	; 5
    84de:	89 83       	std	Y+1, r24	; 0x01
	xio_set_baud_usart(dev, baud);					// usart must be bound first
    84e0:	8c 81       	ldd	r24, Y+4	; 0x04
    84e2:	69 81       	ldd	r22, Y+1	; 0x01
    84e4:	0e 94 a8 42 	call	0x8550	; 0x8550 <xio_set_baud_usart>

	u->usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm; // enable tx and rx on USART
    84e8:	ea 81       	ldd	r30, Y+2	; 0x02
    84ea:	fb 81       	ldd	r31, Y+3	; 0x03
    84ec:	05 80       	ldd	r0, Z+5	; 0x05
    84ee:	f6 81       	ldd	r31, Z+6	; 0x06
    84f0:	e0 2d       	mov	r30, r0
    84f2:	88 e1       	ldi	r24, 0x18	; 24
    84f4:	84 83       	std	Z+4, r24	; 0x04
	u->usart->CTRLA = CTRLA_RXON_TXON;				// enable tx and rx interrupts
    84f6:	ea 81       	ldd	r30, Y+2	; 0x02
    84f8:	fb 81       	ldd	r31, Y+3	; 0x03
    84fa:	05 80       	ldd	r0, Z+5	; 0x05
    84fc:	f6 81       	ldd	r31, Z+6	; 0x06
    84fe:	e0 2d       	mov	r30, r0
    8500:	81 e2       	ldi	r24, 0x21	; 33
    8502:	83 83       	std	Z+3, r24	; 0x03

	u->port->DIRCLR = dirclr;
    8504:	ea 81       	ldd	r30, Y+2	; 0x02
    8506:	fb 81       	ldd	r31, Y+3	; 0x03
    8508:	07 80       	ldd	r0, Z+7	; 0x07
    850a:	f0 85       	ldd	r31, Z+8	; 0x08
    850c:	e0 2d       	mov	r30, r0
    850e:	8b 85       	ldd	r24, Y+11	; 0x0b
    8510:	82 83       	std	Z+2, r24	; 0x02
	u->port->DIRSET = dirset;
    8512:	ea 81       	ldd	r30, Y+2	; 0x02
    8514:	fb 81       	ldd	r31, Y+3	; 0x03
    8516:	07 80       	ldd	r0, Z+7	; 0x07
    8518:	f0 85       	ldd	r31, Z+8	; 0x08
    851a:	e0 2d       	mov	r30, r0
    851c:	8c 85       	ldd	r24, Y+12	; 0x0c
    851e:	81 83       	std	Z+1, r24	; 0x01
	u->port->OUTCLR = outclr;
    8520:	ea 81       	ldd	r30, Y+2	; 0x02
    8522:	fb 81       	ldd	r31, Y+3	; 0x03
    8524:	07 80       	ldd	r0, Z+7	; 0x07
    8526:	f0 85       	ldd	r31, Z+8	; 0x08
    8528:	e0 2d       	mov	r30, r0
    852a:	8d 85       	ldd	r24, Y+13	; 0x0d
    852c:	86 83       	std	Z+6, r24	; 0x06
	u->port->OUTSET = outset;
    852e:	ea 81       	ldd	r30, Y+2	; 0x02
    8530:	fb 81       	ldd	r31, Y+3	; 0x03
    8532:	07 80       	ldd	r0, Z+7	; 0x07
    8534:	f0 85       	ldd	r31, Z+8	; 0x08
    8536:	e0 2d       	mov	r30, r0
    8538:	8e 85       	ldd	r24, Y+14	; 0x0e
    853a:	85 83       	std	Z+5, r24	; 0x05
}
    853c:	2e 96       	adiw	r28, 0x0e	; 14
    853e:	cd bf       	out	0x3d, r28	; 61
    8540:	de bf       	out	0x3e, r29	; 62
    8542:	cf 91       	pop	r28
    8544:	df 91       	pop	r29
    8546:	0f 91       	pop	r16
    8548:	ef 90       	pop	r14
    854a:	cf 90       	pop	r12
    854c:	af 90       	pop	r10
    854e:	08 95       	ret

00008550 <xio_set_baud_usart>:

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
    8550:	df 93       	push	r29
    8552:	cf 93       	push	r28
    8554:	cd b7       	in	r28, 0x3d	; 61
    8556:	de b7       	in	r29, 0x3e	; 62
    8558:	2a 97       	sbiw	r28, 0x0a	; 10
    855a:	cd bf       	out	0x3d, r28	; 61
    855c:	de bf       	out	0x3e, r29	; 62
    855e:	89 87       	std	Y+9, r24	; 0x09
    8560:	6a 87       	std	Y+10, r22	; 0x0a
	struct xioUSART *u = ds[dev].xio;
    8562:	89 85       	ldd	r24, Y+9	; 0x09
    8564:	28 2f       	mov	r18, r24
    8566:	30 e0       	ldi	r19, 0x00	; 0
    8568:	84 e6       	ldi	r24, 0x64	; 100
    856a:	90 e0       	ldi	r25, 0x00	; 0
    856c:	ac 01       	movw	r20, r24
    856e:	24 9f       	mul	r18, r20
    8570:	c0 01       	movw	r24, r0
    8572:	25 9f       	mul	r18, r21
    8574:	90 0d       	add	r25, r0
    8576:	34 9f       	mul	r19, r20
    8578:	90 0d       	add	r25, r0
    857a:	11 24       	eor	r1, r1
    857c:	fc 01       	movw	r30, r24
    857e:	e5 54       	subi	r30, 0x45	; 69
    8580:	fb 4d       	sbci	r31, 0xDB	; 219
    8582:	80 81       	ld	r24, Z
    8584:	91 81       	ldd	r25, Z+1	; 0x01
    8586:	8f 83       	std	Y+7, r24	; 0x07
    8588:	98 87       	std	Y+8, r25	; 0x08

	u->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    858a:	ef 81       	ldd	r30, Y+7	; 0x07
    858c:	f8 85       	ldd	r31, Y+8	; 0x08
    858e:	a5 81       	ldd	r26, Z+5	; 0x05
    8590:	b6 81       	ldd	r27, Z+6	; 0x06
    8592:	8a 85       	ldd	r24, Y+10	; 0x0a
    8594:	88 2f       	mov	r24, r24
    8596:	90 e0       	ldi	r25, 0x00	; 0
    8598:	8d 51       	subi	r24, 0x1D	; 29
    859a:	96 4e       	sbci	r25, 0xE6	; 230
    859c:	8d 83       	std	Y+5, r24	; 0x05
    859e:	9e 83       	std	Y+6, r25	; 0x06
    85a0:	ed 81       	ldd	r30, Y+5	; 0x05
    85a2:	fe 81       	ldd	r31, Y+6	; 0x06
    85a4:	84 91       	lpm	r24, Z+
    85a6:	8c 83       	std	Y+4, r24	; 0x04
    85a8:	8c 81       	ldd	r24, Y+4	; 0x04
    85aa:	16 96       	adiw	r26, 0x06	; 6
    85ac:	8c 93       	st	X, r24
	u->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    85ae:	ef 81       	ldd	r30, Y+7	; 0x07
    85b0:	f8 85       	ldd	r31, Y+8	; 0x08
    85b2:	a5 81       	ldd	r26, Z+5	; 0x05
    85b4:	b6 81       	ldd	r27, Z+6	; 0x06
    85b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    85b8:	88 2f       	mov	r24, r24
    85ba:	90 e0       	ldi	r25, 0x00	; 0
    85bc:	82 51       	subi	r24, 0x12	; 18
    85be:	96 4e       	sbci	r25, 0xE6	; 230
    85c0:	8a 83       	std	Y+2, r24	; 0x02
    85c2:	9b 83       	std	Y+3, r25	; 0x03
    85c4:	ea 81       	ldd	r30, Y+2	; 0x02
    85c6:	fb 81       	ldd	r31, Y+3	; 0x03
    85c8:	84 91       	lpm	r24, Z+
    85ca:	89 83       	std	Y+1, r24	; 0x01
    85cc:	89 81       	ldd	r24, Y+1	; 0x01
    85ce:	17 96       	adiw	r26, 0x07	; 7
    85d0:	8c 93       	st	X, r24
    85d2:	17 97       	sbiw	r26, 0x07	; 7
}
    85d4:	2a 96       	adiw	r28, 0x0a	; 10
    85d6:	cd bf       	out	0x3d, r28	; 61
    85d8:	de bf       	out	0x3e, r29	; 62
    85da:	cf 91       	pop	r28
    85dc:	df 91       	pop	r29
    85de:	08 95       	ret

000085e0 <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular buffers work
 */

ISR(USB_RX_ISR_vect)	//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    85e0:	1f 92       	push	r1
    85e2:	0f 92       	push	r0
    85e4:	0f b6       	in	r0, 0x3f	; 63
    85e6:	0f 92       	push	r0
    85e8:	00 90 3b 00 	lds	r0, 0x003B
    85ec:	0f 92       	push	r0
    85ee:	11 24       	eor	r1, r1
    85f0:	2f 93       	push	r18
    85f2:	3f 93       	push	r19
    85f4:	4f 93       	push	r20
    85f6:	5f 93       	push	r21
    85f8:	6f 93       	push	r22
    85fa:	7f 93       	push	r23
    85fc:	8f 93       	push	r24
    85fe:	9f 93       	push	r25
    8600:	af 93       	push	r26
    8602:	bf 93       	push	r27
    8604:	ef 93       	push	r30
    8606:	ff 93       	push	r31
    8608:	df 93       	push	r29
    860a:	cf 93       	push	r28
    860c:	0f 92       	push	r0
    860e:	cd b7       	in	r28, 0x3d	; 61
    8610:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = USBx.usart->DATA;				// can only read DATA once
    8612:	e0 91 56 24 	lds	r30, 0x2456
    8616:	f0 91 57 24 	lds	r31, 0x2457
    861a:	80 81       	ld	r24, Z
    861c:	89 83       	std	Y+1, r24	; 0x01

	// trap signals - do not insert character into RX queue
	if (c == ETX) {								// trap ^c signal
    861e:	89 81       	ldd	r24, Y+1	; 0x01
    8620:	83 30       	cpi	r24, 0x03	; 3
    8622:	31 f4       	brne	.+12     	; 0x8630 <__vector_25+0x50>
		USB.sig = XIO_SIG_KILL;					// set signal value
    8624:	84 e0       	ldi	r24, 0x04	; 4
    8626:	80 93 13 25 	sts	0x2513, r24
		signal_etx();							// call app-specific signal handler
    862a:	0e 94 f8 41 	call	0x83f0	; 0x83f0 <signal_etx>
    862e:	28 c0       	rjmp	.+80     	; 0x8680 <__vector_25+0xa0>
		return;
	}

	// normal character path
	if ((--USBx.rx_buf_head) == 0) { 			// advance buffer head with wrap
    8630:	80 91 52 24 	lds	r24, 0x2452
    8634:	81 50       	subi	r24, 0x01	; 1
    8636:	80 93 52 24 	sts	0x2452, r24
    863a:	80 91 52 24 	lds	r24, 0x2452
    863e:	88 23       	and	r24, r24
    8640:	19 f4       	brne	.+6      	; 0x8648 <__vector_25+0x68>
		USBx.rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    8642:	81 e1       	ldi	r24, 0x11	; 17
    8644:	80 93 52 24 	sts	0x2452, r24
	}
	if (USBx.rx_buf_head != USBx.rx_buf_tail) {	// write char unless buffer full
    8648:	90 91 52 24 	lds	r25, 0x2452
    864c:	80 91 51 24 	lds	r24, 0x2451
    8650:	98 17       	cp	r25, r24
    8652:	51 f0       	breq	.+20     	; 0x8668 <__vector_25+0x88>
		USBx.rx_buf[USBx.rx_buf_head] = c;
    8654:	80 91 52 24 	lds	r24, 0x2452
    8658:	88 2f       	mov	r24, r24
    865a:	90 e0       	ldi	r25, 0x00	; 0
    865c:	fc 01       	movw	r30, r24
    865e:	e6 5a       	subi	r30, 0xA6	; 166
    8660:	fb 4d       	sbci	r31, 0xDB	; 219
    8662:	89 81       	ldd	r24, Y+1	; 0x01
    8664:	80 83       	st	Z, r24
    8666:	0c c0       	rjmp	.+24     	; 0x8680 <__vector_25+0xa0>
		return;
	}
	// buffer-full handling
	if ((++USBx.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    8668:	80 91 52 24 	lds	r24, 0x2452
    866c:	8f 5f       	subi	r24, 0xFF	; 255
    866e:	80 93 52 24 	sts	0x2452, r24
    8672:	80 91 52 24 	lds	r24, 0x2452
    8676:	82 31       	cpi	r24, 0x12	; 18
    8678:	18 f0       	brcs	.+6      	; 0x8680 <__vector_25+0xa0>
		USBx.rx_buf_head = 1;
    867a:	81 e0       	ldi	r24, 0x01	; 1
    867c:	80 93 52 24 	sts	0x2452, r24
	}
	// activate flow control here or before it gets to this level
}
    8680:	0f 90       	pop	r0
    8682:	cf 91       	pop	r28
    8684:	df 91       	pop	r29
    8686:	ff 91       	pop	r31
    8688:	ef 91       	pop	r30
    868a:	bf 91       	pop	r27
    868c:	af 91       	pop	r26
    868e:	9f 91       	pop	r25
    8690:	8f 91       	pop	r24
    8692:	7f 91       	pop	r23
    8694:	6f 91       	pop	r22
    8696:	5f 91       	pop	r21
    8698:	4f 91       	pop	r20
    869a:	3f 91       	pop	r19
    869c:	2f 91       	pop	r18
    869e:	0f 90       	pop	r0
    86a0:	00 92 3b 00 	sts	0x003B, r0
    86a4:	0f 90       	pop	r0
    86a6:	0f be       	out	0x3f, r0	; 63
    86a8:	0f 90       	pop	r0
    86aa:	1f 90       	pop	r1
    86ac:	18 95       	reti

000086ae <xio_usb_queue_RX_char>:
/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_usb_queue_RX_char(const char c)
{
    86ae:	df 93       	push	r29
    86b0:	cf 93       	push	r28
    86b2:	0f 92       	push	r0
    86b4:	cd b7       	in	r28, 0x3d	; 61
    86b6:	de b7       	in	r29, 0x3e	; 62
    86b8:	89 83       	std	Y+1, r24	; 0x01
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    86ba:	89 81       	ldd	r24, Y+1	; 0x01
    86bc:	83 30       	cpi	r24, 0x03	; 3
    86be:	31 f4       	brne	.+12     	; 0x86cc <xio_usb_queue_RX_char+0x1e>
		USB.sig = XIO_SIG_KILL;					// set signal value
    86c0:	84 e0       	ldi	r24, 0x04	; 4
    86c2:	80 93 13 25 	sts	0x2513, r24
		signal_etx();							// call app-specific signal handler
    86c6:	0e 94 f8 41 	call	0x83f0	; 0x83f0 <signal_etx>
    86ca:	28 c0       	rjmp	.+80     	; 0x871c <xio_usb_queue_RX_char+0x6e>
		return;
	}

	// normal path
	if ((--USBx.rx_buf_head) == 0) { 			// wrap condition
    86cc:	80 91 52 24 	lds	r24, 0x2452
    86d0:	81 50       	subi	r24, 0x01	; 1
    86d2:	80 93 52 24 	sts	0x2452, r24
    86d6:	80 91 52 24 	lds	r24, 0x2452
    86da:	88 23       	and	r24, r24
    86dc:	19 f4       	brne	.+6      	; 0x86e4 <xio_usb_queue_RX_char+0x36>
		USBx.rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    86de:	81 e1       	ldi	r24, 0x11	; 17
    86e0:	80 93 52 24 	sts	0x2452, r24
	}
	if (USBx.rx_buf_head != USBx.rx_buf_tail) {	// write char unless buffer full
    86e4:	90 91 52 24 	lds	r25, 0x2452
    86e8:	80 91 51 24 	lds	r24, 0x2451
    86ec:	98 17       	cp	r25, r24
    86ee:	51 f0       	breq	.+20     	; 0x8704 <xio_usb_queue_RX_char+0x56>
		USBx.rx_buf[USBx.rx_buf_head] = c;		// FAKE INPUT DATA
    86f0:	80 91 52 24 	lds	r24, 0x2452
    86f4:	88 2f       	mov	r24, r24
    86f6:	90 e0       	ldi	r25, 0x00	; 0
    86f8:	fc 01       	movw	r30, r24
    86fa:	e6 5a       	subi	r30, 0xA6	; 166
    86fc:	fb 4d       	sbci	r31, 0xDB	; 219
    86fe:	89 81       	ldd	r24, Y+1	; 0x01
    8700:	80 83       	st	Z, r24
    8702:	0c c0       	rjmp	.+24     	; 0x871c <xio_usb_queue_RX_char+0x6e>
		return;
	}
	// buffer-full handling
	if ((++USBx.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    8704:	80 91 52 24 	lds	r24, 0x2452
    8708:	8f 5f       	subi	r24, 0xFF	; 255
    870a:	80 93 52 24 	sts	0x2452, r24
    870e:	80 91 52 24 	lds	r24, 0x2452
    8712:	82 31       	cpi	r24, 0x12	; 18
    8714:	18 f0       	brcs	.+6      	; 0x871c <xio_usb_queue_RX_char+0x6e>
		USBx.rx_buf_head = 1;
    8716:	81 e0       	ldi	r24, 0x01	; 1
    8718:	80 93 52 24 	sts	0x2452, r24
	}
}
    871c:	0f 90       	pop	r0
    871e:	cf 91       	pop	r28
    8720:	df 91       	pop	r29
    8722:	08 95       	ret

00008724 <xio_usb_queue_RX_string>:
/*
 * xio_usb_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_usb_queue_RX_string(char *buf)
{
    8724:	df 93       	push	r29
    8726:	cf 93       	push	r28
    8728:	cd b7       	in	r28, 0x3d	; 61
    872a:	de b7       	in	r29, 0x3e	; 62
    872c:	25 97       	sbiw	r28, 0x05	; 5
    872e:	cd bf       	out	0x3d, r28	; 61
    8730:	de bf       	out	0x3e, r29	; 62
    8732:	8b 83       	std	Y+3, r24	; 0x03
    8734:	9c 83       	std	Y+4, r25	; 0x04
	char c;
	uint8_t i=0;
    8736:	19 82       	std	Y+1, r1	; 0x01
    8738:	03 c0       	rjmp	.+6      	; 0x8740 <xio_usb_queue_RX_string+0x1c>

	while ((c = buf[i++]) != NUL) {
		xio_usb_queue_RX_char(c);
    873a:	8a 81       	ldd	r24, Y+2	; 0x02
    873c:	0e 94 57 43 	call	0x86ae	; 0x86ae <xio_usb_queue_RX_char>
void xio_usb_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    8740:	89 81       	ldd	r24, Y+1	; 0x01
    8742:	28 2f       	mov	r18, r24
    8744:	30 e0       	ldi	r19, 0x00	; 0
    8746:	8b 81       	ldd	r24, Y+3	; 0x03
    8748:	9c 81       	ldd	r25, Y+4	; 0x04
    874a:	fc 01       	movw	r30, r24
    874c:	e2 0f       	add	r30, r18
    874e:	f3 1f       	adc	r31, r19
    8750:	80 81       	ld	r24, Z
    8752:	8a 83       	std	Y+2, r24	; 0x02
    8754:	8a 81       	ldd	r24, Y+2	; 0x02
    8756:	8d 83       	std	Y+5, r24	; 0x05
    8758:	8d 81       	ldd	r24, Y+5	; 0x05
    875a:	88 23       	and	r24, r24
    875c:	11 f0       	breq	.+4      	; 0x8762 <xio_usb_queue_RX_string+0x3e>
    875e:	81 e0       	ldi	r24, 0x01	; 1
    8760:	8d 83       	std	Y+5, r24	; 0x05
    8762:	8d 81       	ldd	r24, Y+5	; 0x05
    8764:	99 81       	ldd	r25, Y+1	; 0x01
    8766:	9f 5f       	subi	r25, 0xFF	; 255
    8768:	99 83       	std	Y+1, r25	; 0x01
    876a:	88 23       	and	r24, r24
    876c:	31 f7       	brne	.-52     	; 0x873a <xio_usb_queue_RX_string+0x16>
		xio_usb_queue_RX_char(c);
	}
}
    876e:	25 96       	adiw	r28, 0x05	; 5
    8770:	cd bf       	out	0x3d, r28	; 61
    8772:	de bf       	out	0x3e, r29	; 62
    8774:	cf 91       	pop	r28
    8776:	df 91       	pop	r29
    8778:	08 95       	ret

0000877a <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)	//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    877a:	1f 92       	push	r1
    877c:	0f 92       	push	r0
    877e:	0f b6       	in	r0, 0x3f	; 63
    8780:	0f 92       	push	r0
    8782:	00 90 3b 00 	lds	r0, 0x003B
    8786:	0f 92       	push	r0
    8788:	11 24       	eor	r1, r1
    878a:	8f 93       	push	r24
    878c:	9f 93       	push	r25
    878e:	af 93       	push	r26
    8790:	bf 93       	push	r27
    8792:	ef 93       	push	r30
    8794:	ff 93       	push	r31
    8796:	df 93       	push	r29
    8798:	cf 93       	push	r28
    879a:	cd b7       	in	r28, 0x3d	; 61
    879c:	de b7       	in	r29, 0x3e	; 62
	if (USBx.tx_buf_head == USBx.tx_buf_tail) {	// buffer empty - disable ints
    879e:	90 91 54 24 	lds	r25, 0x2454
    87a2:	80 91 53 24 	lds	r24, 0x2453
    87a6:	98 17       	cp	r25, r24
    87a8:	39 f4       	brne	.+14     	; 0x87b8 <__vector_26+0x3e>
		USBx.usart->CTRLA = CTRLA_RXON_TXOFF;	// won't work if you just &= it
    87aa:	e0 91 56 24 	lds	r30, 0x2456
    87ae:	f0 91 57 24 	lds	r31, 0x2457
    87b2:	80 e2       	ldi	r24, 0x20	; 32
    87b4:	83 83       	std	Z+3, r24	; 0x03
    87b6:	21 c0       	rjmp	.+66     	; 0x87fa <__vector_26+0x80>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(USB.flags)) {
    87b8:	80 91 0f 25 	lds	r24, 0x250F
    87bc:	90 91 10 25 	lds	r25, 0x2510
    87c0:	80 70       	andi	r24, 0x00	; 0
    87c2:	98 70       	andi	r25, 0x08	; 8
    87c4:	00 97       	sbiw	r24, 0x00	; 0
    87c6:	c9 f4       	brne	.+50     	; 0x87fa <__vector_26+0x80>
		if (--(USBx.tx_buf_tail) == 0) {		// advance tail and wrap 
    87c8:	80 91 53 24 	lds	r24, 0x2453
    87cc:	81 50       	subi	r24, 0x01	; 1
    87ce:	80 93 53 24 	sts	0x2453, r24
    87d2:	80 91 53 24 	lds	r24, 0x2453
    87d6:	88 23       	and	r24, r24
    87d8:	19 f4       	brne	.+6      	; 0x87e0 <__vector_26+0x66>
			USBx.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one err (OBOE)
    87da:	81 e1       	ldi	r24, 0x11	; 17
    87dc:	80 93 53 24 	sts	0x2453, r24
		}
		USBx.usart->DATA = USBx.tx_buf[USBx.tx_buf_tail]; // write to TX DATA reg
    87e0:	a0 91 56 24 	lds	r26, 0x2456
    87e4:	b0 91 57 24 	lds	r27, 0x2457
    87e8:	80 91 53 24 	lds	r24, 0x2453
    87ec:	88 2f       	mov	r24, r24
    87ee:	90 e0       	ldi	r25, 0x00	; 0
    87f0:	fc 01       	movw	r30, r24
    87f2:	e4 59       	subi	r30, 0x94	; 148
    87f4:	fb 4d       	sbci	r31, 0xDB	; 219
    87f6:	80 81       	ld	r24, Z
    87f8:	8c 93       	st	X, r24
	}
}
    87fa:	cf 91       	pop	r28
    87fc:	df 91       	pop	r29
    87fe:	ff 91       	pop	r31
    8800:	ef 91       	pop	r30
    8802:	bf 91       	pop	r27
    8804:	af 91       	pop	r26
    8806:	9f 91       	pop	r25
    8808:	8f 91       	pop	r24
    880a:	0f 90       	pop	r0
    880c:	00 92 3b 00 	sts	0x003B, r0
    8810:	0f 90       	pop	r0
    8812:	0f be       	out	0x3f, r0	; 63
    8814:	0f 90       	pop	r0
    8816:	1f 90       	pop	r1
    8818:	18 95       	reti

0000881a <xio_putc_usb>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_usb(const char c, FILE *stream)
{
    881a:	df 93       	push	r29
    881c:	cf 93       	push	r28
    881e:	cd b7       	in	r28, 0x3d	; 61
    8820:	de b7       	in	r29, 0x3e	; 62
    8822:	25 97       	sbiw	r28, 0x05	; 5
    8824:	cd bf       	out	0x3d, r28	; 61
    8826:	de bf       	out	0x3e, r29	; 62
    8828:	89 83       	std	Y+1, r24	; 0x01
    882a:	6a 83       	std	Y+2, r22	; 0x02
    882c:	7b 83       	std	Y+3, r23	; 0x03
	if ((USBx.next_tx_buf_head = USBx.tx_buf_head-1) == 0) { // advance head and wrap
    882e:	80 91 54 24 	lds	r24, 0x2454
    8832:	81 50       	subi	r24, 0x01	; 1
    8834:	80 93 55 24 	sts	0x2455, r24
    8838:	80 91 55 24 	lds	r24, 0x2455
    883c:	88 23       	and	r24, r24
    883e:	21 f5       	brne	.+72     	; 0x8888 <xio_putc_usb+0x6e>
		USBx.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one
    8840:	81 e1       	ldi	r24, 0x11	; 17
    8842:	80 93 55 24 	sts	0x2455, r24
    8846:	20 c0       	rjmp	.+64     	; 0x8888 <xio_putc_usb+0x6e>
	}
	while(USBx.next_tx_buf_head == USBx.tx_buf_tail) {   // buf full. sleep or return
		if (BLOCKING(USB.flags)) {
    8848:	80 91 0f 25 	lds	r24, 0x250F
    884c:	90 91 10 25 	lds	r25, 0x2510
    8850:	84 70       	andi	r24, 0x04	; 4
    8852:	90 70       	andi	r25, 0x00	; 0
    8854:	00 97       	sbiw	r24, 0x00	; 0
    8856:	81 f0       	breq	.+32     	; 0x8878 <xio_putc_usb+0x5e>
			sleep_mode();
    8858:	a8 e4       	ldi	r26, 0x48	; 72
    885a:	b0 e0       	ldi	r27, 0x00	; 0
    885c:	e8 e4       	ldi	r30, 0x48	; 72
    885e:	f0 e0       	ldi	r31, 0x00	; 0
    8860:	80 81       	ld	r24, Z
    8862:	81 60       	ori	r24, 0x01	; 1
    8864:	8c 93       	st	X, r24
    8866:	88 95       	sleep
    8868:	a8 e4       	ldi	r26, 0x48	; 72
    886a:	b0 e0       	ldi	r27, 0x00	; 0
    886c:	e8 e4       	ldi	r30, 0x48	; 72
    886e:	f0 e0       	ldi	r31, 0x00	; 0
    8870:	80 81       	ld	r24, Z
    8872:	8e 7f       	andi	r24, 0xFE	; 254
    8874:	8c 93       	st	X, r24
    8876:	08 c0       	rjmp	.+16     	; 0x8888 <xio_putc_usb+0x6e>
		} else {
			USB.sig = XIO_SIG_EAGAIN;
    8878:	81 e0       	ldi	r24, 0x01	; 1
    887a:	80 93 13 25 	sts	0x2513, r24
			return(_FDEV_ERR);
    887e:	8f ef       	ldi	r24, 0xFF	; 255
    8880:	9f ef       	ldi	r25, 0xFF	; 255
    8882:	8c 83       	std	Y+4, r24	; 0x04
    8884:	9d 83       	std	Y+5, r25	; 0x05
    8886:	78 c0       	rjmp	.+240    	; 0x8978 <xio_putc_usb+0x15e>
int xio_putc_usb(const char c, FILE *stream)
{
	if ((USBx.next_tx_buf_head = USBx.tx_buf_head-1) == 0) { // advance head and wrap
		USBx.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one
	}
	while(USBx.next_tx_buf_head == USBx.tx_buf_tail) {   // buf full. sleep or return
    8888:	90 91 55 24 	lds	r25, 0x2455
    888c:	80 91 53 24 	lds	r24, 0x2453
    8890:	98 17       	cp	r25, r24
    8892:	d1 f2       	breq	.-76     	; 0x8848 <xio_putc_usb+0x2e>
			USB.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	USBx.tx_buf_head = USBx.next_tx_buf_head;	// accept the next buffer head value
    8894:	80 91 55 24 	lds	r24, 0x2455
    8898:	80 93 54 24 	sts	0x2454, r24
	USBx.tx_buf[USBx.tx_buf_head] = c;			// ...and write char to buffer
    889c:	80 91 54 24 	lds	r24, 0x2454
    88a0:	88 2f       	mov	r24, r24
    88a2:	90 e0       	ldi	r25, 0x00	; 0
    88a4:	fc 01       	movw	r30, r24
    88a6:	e4 59       	subi	r30, 0x94	; 148
    88a8:	fb 4d       	sbci	r31, 0xDB	; 219
    88aa:	89 81       	ldd	r24, Y+1	; 0x01
    88ac:	80 83       	st	Z, r24

	if (CRLF(USB.flags) && (c == '\n')) {		// detect LF and add a CR
    88ae:	80 91 0f 25 	lds	r24, 0x250F
    88b2:	90 91 10 25 	lds	r25, 0x2510
    88b6:	80 72       	andi	r24, 0x20	; 32
    88b8:	90 70       	andi	r25, 0x00	; 0
    88ba:	00 97       	sbiw	r24, 0x00	; 0
    88bc:	61 f0       	breq	.+24     	; 0x88d6 <xio_putc_usb+0xbc>
    88be:	89 81       	ldd	r24, Y+1	; 0x01
    88c0:	8a 30       	cpi	r24, 0x0A	; 10
    88c2:	49 f4       	brne	.+18     	; 0x88d6 <xio_putc_usb+0xbc>
		return xio_putc_usb('\r', stream);		// recursion.
    88c4:	2a 81       	ldd	r18, Y+2	; 0x02
    88c6:	3b 81       	ldd	r19, Y+3	; 0x03
    88c8:	8d e0       	ldi	r24, 0x0D	; 13
    88ca:	b9 01       	movw	r22, r18
    88cc:	0e 94 0d 44 	call	0x881a	; 0x881a <xio_putc_usb>
    88d0:	8c 83       	std	Y+4, r24	; 0x04
    88d2:	9d 83       	std	Y+5, r25	; 0x05
    88d4:	51 c0       	rjmp	.+162    	; 0x8978 <xio_putc_usb+0x15e>
	}

	// dequeue the buffer if DATA register is ready
	if (USBx.usart->STATUS & 0x20) {
    88d6:	e0 91 56 24 	lds	r30, 0x2456
    88da:	f0 91 57 24 	lds	r31, 0x2457
    88de:	81 81       	ldd	r24, Z+1	; 0x01
    88e0:	88 2f       	mov	r24, r24
    88e2:	90 e0       	ldi	r25, 0x00	; 0
    88e4:	80 72       	andi	r24, 0x20	; 32
    88e6:	90 70       	andi	r25, 0x00	; 0
    88e8:	00 97       	sbiw	r24, 0x00	; 0
    88ea:	a1 f1       	breq	.+104    	; 0x8954 <xio_putc_usb+0x13a>
		if (USBx.tx_buf_head == USBx.tx_buf_tail) {	// buf might be empty if IRQ got it
    88ec:	90 91 54 24 	lds	r25, 0x2454
    88f0:	80 91 53 24 	lds	r24, 0x2453
    88f4:	98 17       	cp	r25, r24
    88f6:	19 f4       	brne	.+6      	; 0x88fe <xio_putc_usb+0xe4>
			return (0);
    88f8:	1c 82       	std	Y+4, r1	; 0x04
    88fa:	1d 82       	std	Y+5, r1	; 0x05
    88fc:	3d c0       	rjmp	.+122    	; 0x8978 <xio_putc_usb+0x15e>
		}
		USB.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    88fe:	80 91 0f 25 	lds	r24, 0x250F
    8902:	90 91 10 25 	lds	r25, 0x2510
    8906:	98 60       	ori	r25, 0x08	; 8
    8908:	80 93 0f 25 	sts	0x250F, r24
    890c:	90 93 10 25 	sts	0x2510, r25
		if (--(USBx.tx_buf_tail) == 0) {		// advance tail and wrap if needed
    8910:	80 91 53 24 	lds	r24, 0x2453
    8914:	81 50       	subi	r24, 0x01	; 1
    8916:	80 93 53 24 	sts	0x2453, r24
    891a:	80 91 53 24 	lds	r24, 0x2453
    891e:	88 23       	and	r24, r24
    8920:	19 f4       	brne	.+6      	; 0x8928 <xio_putc_usb+0x10e>
			USBx.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one error (OBOE)
    8922:	81 e1       	ldi	r24, 0x11	; 17
    8924:	80 93 53 24 	sts	0x2453, r24
		}
		USBx.usart->DATA = USBx.tx_buf[USBx.tx_buf_tail];// write char to TX DATA reg
    8928:	a0 91 56 24 	lds	r26, 0x2456
    892c:	b0 91 57 24 	lds	r27, 0x2457
    8930:	80 91 53 24 	lds	r24, 0x2453
    8934:	88 2f       	mov	r24, r24
    8936:	90 e0       	ldi	r25, 0x00	; 0
    8938:	fc 01       	movw	r30, r24
    893a:	e4 59       	subi	r30, 0x94	; 148
    893c:	fb 4d       	sbci	r31, 0xDB	; 219
    893e:	80 81       	ld	r24, Z
    8940:	8c 93       	st	X, r24
		USB.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    8942:	80 91 0f 25 	lds	r24, 0x250F
    8946:	90 91 10 25 	lds	r25, 0x2510
    894a:	97 7f       	andi	r25, 0xF7	; 247
    894c:	80 93 0f 25 	sts	0x250F, r24
    8950:	90 93 10 25 	sts	0x2510, r25
	}
	// enable interrupts regardless
	USBx.usart->CTRLA = CTRLA_RXON_TXON;		// doesn't work if you just |= it
    8954:	e0 91 56 24 	lds	r30, 0x2456
    8958:	f0 91 57 24 	lds	r31, 0x2457
    895c:	81 e2       	ldi	r24, 0x21	; 33
    895e:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    8960:	a0 ea       	ldi	r26, 0xA0	; 160
    8962:	b0 e0       	ldi	r27, 0x00	; 0
    8964:	e0 ea       	ldi	r30, 0xA0	; 160
    8966:	f0 e0       	ldi	r31, 0x00	; 0
    8968:	82 81       	ldd	r24, Z+2	; 0x02
    896a:	81 60       	ori	r24, 0x01	; 1
    896c:	12 96       	adiw	r26, 0x02	; 2
    896e:	8c 93       	st	X, r24
    8970:	12 97       	sbiw	r26, 0x02	; 2
	sei();										// enable global interrupts
    8972:	78 94       	sei

	return (0);	// 0 = OK
    8974:	1c 82       	std	Y+4, r1	; 0x04
    8976:	1d 82       	std	Y+5, r1	; 0x05
    8978:	8c 81       	ldd	r24, Y+4	; 0x04
    897a:	9d 81       	ldd	r25, Y+5	; 0x05
}
    897c:	25 96       	adiw	r28, 0x05	; 5
    897e:	cd bf       	out	0x3d, r28	; 61
    8980:	de bf       	out	0x3e, r29	; 62
    8982:	cf 91       	pop	r28
    8984:	df 91       	pop	r29
    8986:	08 95       	ret

00008988 <xio_getc_usb>:
 *		- special characters such as EOL and control chars are handled by the
 *		  character helper routines. See them for behaviors
 */

int xio_getc_usb(FILE *stream)
{
    8988:	df 93       	push	r29
    898a:	cf 93       	push	r28
    898c:	cd b7       	in	r28, 0x3d	; 61
    898e:	de b7       	in	r29, 0x3e	; 62
    8990:	28 97       	sbiw	r28, 0x08	; 8
    8992:	cd bf       	out	0x3d, r28	; 61
    8994:	de bf       	out	0x3e, r29	; 62
    8996:	8d 83       	std	Y+5, r24	; 0x05
    8998:	9e 83       	std	Y+6, r25	; 0x06
    899a:	20 c0       	rjmp	.+64     	; 0x89dc <xio_getc_usb+0x54>
	while (USBx.rx_buf_head == USBx.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(USB.flags)) {
    899c:	80 91 0f 25 	lds	r24, 0x250F
    89a0:	90 91 10 25 	lds	r25, 0x2510
    89a4:	84 70       	andi	r24, 0x04	; 4
    89a6:	90 70       	andi	r25, 0x00	; 0
    89a8:	00 97       	sbiw	r24, 0x00	; 0
    89aa:	81 f0       	breq	.+32     	; 0x89cc <xio_getc_usb+0x44>
			sleep_mode();
    89ac:	a8 e4       	ldi	r26, 0x48	; 72
    89ae:	b0 e0       	ldi	r27, 0x00	; 0
    89b0:	e8 e4       	ldi	r30, 0x48	; 72
    89b2:	f0 e0       	ldi	r31, 0x00	; 0
    89b4:	80 81       	ld	r24, Z
    89b6:	81 60       	ori	r24, 0x01	; 1
    89b8:	8c 93       	st	X, r24
    89ba:	88 95       	sleep
    89bc:	a8 e4       	ldi	r26, 0x48	; 72
    89be:	b0 e0       	ldi	r27, 0x00	; 0
    89c0:	e8 e4       	ldi	r30, 0x48	; 72
    89c2:	f0 e0       	ldi	r31, 0x00	; 0
    89c4:	80 81       	ld	r24, Z
    89c6:	8e 7f       	andi	r24, 0xFE	; 254
    89c8:	8c 93       	st	X, r24
    89ca:	08 c0       	rjmp	.+16     	; 0x89dc <xio_getc_usb+0x54>
		} else {
			USB.sig = XIO_SIG_EAGAIN;
    89cc:	81 e0       	ldi	r24, 0x01	; 1
    89ce:	80 93 13 25 	sts	0x2513, r24
			return(_FDEV_ERR);
    89d2:	8f ef       	ldi	r24, 0xFF	; 255
    89d4:	9f ef       	ldi	r25, 0xFF	; 255
    89d6:	8f 83       	std	Y+7, r24	; 0x07
    89d8:	98 87       	std	Y+8, r25	; 0x08
    89da:	36 c0       	rjmp	.+108    	; 0x8a48 <xio_getc_usb+0xc0>
 *		  character helper routines. See them for behaviors
 */

int xio_getc_usb(FILE *stream)
{
	while (USBx.rx_buf_head == USBx.rx_buf_tail) {	// RX ISR buffer empty
    89dc:	90 91 52 24 	lds	r25, 0x2452
    89e0:	80 91 51 24 	lds	r24, 0x2451
    89e4:	98 17       	cp	r25, r24
    89e6:	d1 f2       	breq	.-76     	; 0x899c <xio_getc_usb+0x14>
		} else {
			USB.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(USBx.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    89e8:	80 91 51 24 	lds	r24, 0x2451
    89ec:	81 50       	subi	r24, 0x01	; 1
    89ee:	80 93 51 24 	sts	0x2451, r24
    89f2:	80 91 51 24 	lds	r24, 0x2451
    89f6:	88 23       	and	r24, r24
    89f8:	19 f4       	brne	.+6      	; 0x8a00 <xio_getc_usb+0x78>
		USBx.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    89fa:	81 e1       	ldi	r24, 0x11	; 17
    89fc:	80 93 51 24 	sts	0x2451, r24
	}
	USB.c = (USBx.rx_buf[USBx.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    8a00:	80 91 51 24 	lds	r24, 0x2451
    8a04:	88 2f       	mov	r24, r24
    8a06:	90 e0       	ldi	r25, 0x00	; 0
    8a08:	fc 01       	movw	r30, r24
    8a0a:	e6 5a       	subi	r30, 0xA6	; 166
    8a0c:	fb 4d       	sbci	r31, 0xDB	; 219
    8a0e:	80 81       	ld	r24, Z
    8a10:	8f 77       	andi	r24, 0x7F	; 127
    8a12:	80 93 14 25 	sts	0x2514, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[USB.c])))());
    8a16:	80 91 14 25 	lds	r24, 0x2514
    8a1a:	88 2f       	mov	r24, r24
    8a1c:	90 e0       	ldi	r25, 0x00	; 0
    8a1e:	88 0f       	add	r24, r24
    8a20:	99 1f       	adc	r25, r25
    8a22:	87 50       	subi	r24, 0x07	; 7
    8a24:	96 4e       	sbci	r25, 0xE6	; 230
    8a26:	8b 83       	std	Y+3, r24	; 0x03
    8a28:	9c 83       	std	Y+4, r25	; 0x04
    8a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    8a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    8a2e:	fc 01       	movw	r30, r24
    8a30:	85 91       	lpm	r24, Z+
    8a32:	94 91       	lpm	r25, Z+
    8a34:	89 83       	std	Y+1, r24	; 0x01
    8a36:	9a 83       	std	Y+2, r25	; 0x02
    8a38:	eb 83       	std	Y+3, r30	; 0x03
    8a3a:	fc 83       	std	Y+4, r31	; 0x04
    8a3c:	89 81       	ldd	r24, Y+1	; 0x01
    8a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    8a40:	fc 01       	movw	r30, r24
    8a42:	19 95       	eicall
    8a44:	8f 83       	std	Y+7, r24	; 0x07
    8a46:	98 87       	std	Y+8, r25	; 0x08
    8a48:	8f 81       	ldd	r24, Y+7	; 0x07
    8a4a:	98 85       	ldd	r25, Y+8	; 0x08
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    8a4c:	28 96       	adiw	r28, 0x08	; 8
    8a4e:	cd bf       	out	0x3d, r28	; 61
    8a50:	de bf       	out	0x3e, r29	; 62
    8a52:	cf 91       	pop	r28
    8a54:	df 91       	pop	r29
    8a56:	08 95       	ret

00008a58 <_getc_char>:

/* xio_usb_getc helper routines */

static int _getc_char(void)
{
    8a58:	df 93       	push	r29
    8a5a:	cf 93       	push	r28
    8a5c:	cd b7       	in	r28, 0x3d	; 61
    8a5e:	de b7       	in	r29, 0x3e	; 62
	if (ECHO(USB.flags)) xio_putc_usb(USB.c, stdout);
    8a60:	80 91 0f 25 	lds	r24, 0x250F
    8a64:	90 91 10 25 	lds	r25, 0x2510
    8a68:	80 71       	andi	r24, 0x10	; 16
    8a6a:	90 70       	andi	r25, 0x00	; 0
    8a6c:	00 97       	sbiw	r24, 0x00	; 0
    8a6e:	49 f0       	breq	.+18     	; 0x8a82 <_getc_char+0x2a>
    8a70:	80 91 14 25 	lds	r24, 0x2514
    8a74:	20 91 8c 26 	lds	r18, 0x268C
    8a78:	30 91 8d 26 	lds	r19, 0x268D
    8a7c:	b9 01       	movw	r22, r18
    8a7e:	0e 94 0d 44 	call	0x881a	; 0x881a <xio_putc_usb>
	return(USB.c);
    8a82:	80 91 14 25 	lds	r24, 0x2514
    8a86:	88 2f       	mov	r24, r24
    8a88:	90 e0       	ldi	r25, 0x00	; 0
}
    8a8a:	cf 91       	pop	r28
    8a8c:	df 91       	pop	r29
    8a8e:	08 95       	ret

00008a90 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
    8a90:	df 93       	push	r29
    8a92:	cf 93       	push	r28
    8a94:	cd b7       	in	r28, 0x3d	; 61
    8a96:	de b7       	in	r29, 0x3e	; 62
	if (LINEMODE(USB.flags)) USB.c = '\n';
    8a98:	80 91 0f 25 	lds	r24, 0x250F
    8a9c:	90 91 10 25 	lds	r25, 0x2510
    8aa0:	80 74       	andi	r24, 0x40	; 64
    8aa2:	90 70       	andi	r25, 0x00	; 0
    8aa4:	00 97       	sbiw	r24, 0x00	; 0
    8aa6:	19 f0       	breq	.+6      	; 0x8aae <_getc_NEWLINE+0x1e>
    8aa8:	8a e0       	ldi	r24, 0x0A	; 10
    8aaa:	80 93 14 25 	sts	0x2514, r24
	if (ECHO(USB.flags)) xio_putc_usb(USB.c, stdout);
    8aae:	80 91 0f 25 	lds	r24, 0x250F
    8ab2:	90 91 10 25 	lds	r25, 0x2510
    8ab6:	80 71       	andi	r24, 0x10	; 16
    8ab8:	90 70       	andi	r25, 0x00	; 0
    8aba:	00 97       	sbiw	r24, 0x00	; 0
    8abc:	49 f0       	breq	.+18     	; 0x8ad0 <_getc_NEWLINE+0x40>
    8abe:	80 91 14 25 	lds	r24, 0x2514
    8ac2:	20 91 8c 26 	lds	r18, 0x268C
    8ac6:	30 91 8d 26 	lds	r19, 0x268D
    8aca:	b9 01       	movw	r22, r18
    8acc:	0e 94 0d 44 	call	0x881a	; 0x881a <xio_putc_usb>
	return(USB.c);
    8ad0:	80 91 14 25 	lds	r24, 0x2514
    8ad4:	88 2f       	mov	r24, r24
    8ad6:	90 e0       	ldi	r25, 0x00	; 0
}
    8ad8:	cf 91       	pop	r28
    8ada:	df 91       	pop	r29
    8adc:	08 95       	ret

00008ade <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
    8ade:	df 93       	push	r29
    8ae0:	cf 93       	push	r28
    8ae2:	0f 92       	push	r0
    8ae4:	0f 92       	push	r0
    8ae6:	cd b7       	in	r28, 0x3d	; 61
    8ae8:	de b7       	in	r29, 0x3e	; 62
	if (SEMICOLONS(USB.flags)) {
    8aea:	80 91 0f 25 	lds	r24, 0x250F
    8aee:	90 91 10 25 	lds	r25, 0x2510
    8af2:	80 78       	andi	r24, 0x80	; 128
    8af4:	90 70       	andi	r25, 0x00	; 0
    8af6:	00 97       	sbiw	r24, 0x00	; 0
    8af8:	29 f0       	breq	.+10     	; 0x8b04 <_getc_SEMICOLON+0x26>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    8afa:	0e 94 48 45 	call	0x8a90	; 0x8a90 <_getc_NEWLINE>
    8afe:	89 83       	std	Y+1, r24	; 0x01
    8b00:	9a 83       	std	Y+2, r25	; 0x02
    8b02:	04 c0       	rjmp	.+8      	; 0x8b0c <_getc_SEMICOLON+0x2e>
	} 
	return (_getc_char());					// else treat as any other character
    8b04:	0e 94 2c 45 	call	0x8a58	; 0x8a58 <_getc_char>
    8b08:	89 83       	std	Y+1, r24	; 0x01
    8b0a:	9a 83       	std	Y+2, r25	; 0x02
    8b0c:	89 81       	ldd	r24, Y+1	; 0x01
    8b0e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    8b10:	0f 90       	pop	r0
    8b12:	0f 90       	pop	r0
    8b14:	cf 91       	pop	r28
    8b16:	df 91       	pop	r29
    8b18:	08 95       	ret

00008b1a <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
    8b1a:	df 93       	push	r29
    8b1c:	cf 93       	push	r28
    8b1e:	cd b7       	in	r28, 0x3d	; 61
    8b20:	de b7       	in	r29, 0x3e	; 62
	USB.sig = XIO_SIG_DELETE;
    8b22:	89 e0       	ldi	r24, 0x09	; 9
    8b24:	80 93 13 25 	sts	0x2513, r24
	return(_FDEV_ERR);
    8b28:	8f ef       	ldi	r24, 0xFF	; 255
    8b2a:	9f ef       	ldi	r25, 0xFF	; 255
}
    8b2c:	cf 91       	pop	r28
    8b2e:	df 91       	pop	r29
    8b30:	08 95       	ret

00008b32 <xio_readln_usb>:
 *
 *	Note: LINEMODE flag in device struct is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_usb()
{
    8b32:	df 93       	push	r29
    8b34:	cf 93       	push	r28
    8b36:	00 d0       	rcall	.+0      	; 0x8b38 <xio_readln_usb+0x6>
    8b38:	0f 92       	push	r0
    8b3a:	cd b7       	in	r28, 0x3d	; 61
    8b3c:	de b7       	in	r29, 0x3e	; 62
//	uint8_t status = 0;

	if (!IN_LINE(USB.flags)) {					// first time thru initializations
    8b3e:	80 91 0f 25 	lds	r24, 0x250F
    8b42:	90 91 10 25 	lds	r25, 0x2510
    8b46:	80 70       	andi	r24, 0x00	; 0
    8b48:	90 74       	andi	r25, 0x40	; 64
    8b4a:	00 97       	sbiw	r24, 0x00	; 0
    8b4c:	79 f4       	brne	.+30     	; 0x8b6c <xio_readln_usb+0x3a>
		USB.len = 0;							// zero buffer
    8b4e:	10 92 15 25 	sts	0x2515, r1
		USB.status = 0;
    8b52:	10 92 12 25 	sts	0x2512, r1
		USB.sig = XIO_SIG_OK;					// reset signal register
    8b56:	10 92 13 25 	sts	0x2513, r1
		USB.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    8b5a:	80 91 0f 25 	lds	r24, 0x250F
    8b5e:	90 91 10 25 	lds	r25, 0x2510
    8b62:	90 64       	ori	r25, 0x40	; 64
    8b64:	80 93 0f 25 	sts	0x250F, r24
    8b68:	90 93 10 25 	sts	0x2510, r25
	}
	while (TRUE) { 
		switch (USB.status = _xio_usb_readchar(USB.buf, USB.size)) {
    8b6c:	20 91 16 25 	lds	r18, 0x2516
    8b70:	83 e2       	ldi	r24, 0x23	; 35
    8b72:	95 e2       	ldi	r25, 0x25	; 37
    8b74:	62 2f       	mov	r22, r18
    8b76:	0e 94 eb 45 	call	0x8bd6	; 0x8bd6 <_xio_usb_readchar>
    8b7a:	80 93 12 25 	sts	0x2512, r24
    8b7e:	80 91 12 25 	lds	r24, 0x2512
    8b82:	28 2f       	mov	r18, r24
    8b84:	30 e0       	ldi	r19, 0x00	; 0
    8b86:	2b 83       	std	Y+3, r18	; 0x03
    8b88:	3c 83       	std	Y+4, r19	; 0x04
    8b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    8b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    8b8e:	87 30       	cpi	r24, 0x07	; 7
    8b90:	91 05       	cpc	r25, r1
    8b92:	81 f0       	breq	.+32     	; 0x8bb4 <xio_readln_usb+0x82>
    8b94:	2b 81       	ldd	r18, Y+3	; 0x03
    8b96:	3c 81       	ldd	r19, Y+4	; 0x04
    8b98:	28 30       	cpi	r18, 0x08	; 8
    8b9a:	31 05       	cpc	r19, r1
    8b9c:	31 f0       	breq	.+12     	; 0x8baa <xio_readln_usb+0x78>
    8b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    8ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    8ba2:	84 30       	cpi	r24, 0x04	; 4
    8ba4:	91 05       	cpc	r25, r1
    8ba6:	69 f0       	breq	.+26     	; 0x8bc2 <xio_readln_usb+0x90>
    8ba8:	e1 cf       	rjmp	.-62     	; 0x8b6c <xio_readln_usb+0x3a>
			case (TG_BUFFER_EMPTY): return (TG_EAGAIN); break;	// empty condition
    8baa:	21 e0       	ldi	r18, 0x01	; 1
    8bac:	30 e0       	ldi	r19, 0x00	; 0
    8bae:	29 83       	std	Y+1, r18	; 0x01
    8bb0:	3a 83       	std	Y+2, r19	; 0x02
    8bb2:	09 c0       	rjmp	.+18     	; 0x8bc6 <xio_readln_usb+0x94>
			case (TG_BUFFER_FULL): return (USB.status); break;	// overrun error
    8bb4:	80 91 12 25 	lds	r24, 0x2512
    8bb8:	28 2f       	mov	r18, r24
    8bba:	30 e0       	ldi	r19, 0x00	; 0
    8bbc:	29 83       	std	Y+1, r18	; 0x01
    8bbe:	3a 83       	std	Y+2, r19	; 0x02
    8bc0:	02 c0       	rjmp	.+4      	; 0x8bc6 <xio_readln_usb+0x94>
			case (TG_EOL): return (TG_OK); break;				// got completed line
    8bc2:	19 82       	std	Y+1, r1	; 0x01
    8bc4:	1a 82       	std	Y+2, r1	; 0x02
			case (TG_EAGAIN): break;							// loop
		}
	}
    8bc6:	89 81       	ldd	r24, Y+1	; 0x01
    8bc8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    8bca:	24 96       	adiw	r28, 0x04	; 4
    8bcc:	cd bf       	out	0x3d, r28	; 61
    8bce:	de bf       	out	0x3e, r29	; 62
    8bd0:	cf 91       	pop	r28
    8bd2:	df 91       	pop	r29
    8bd4:	08 95       	ret

00008bd6 <_xio_usb_readchar>:

int _xio_usb_readchar(char *buf, uint8_t len)
{
    8bd6:	df 93       	push	r29
    8bd8:	cf 93       	push	r28
    8bda:	cd b7       	in	r28, 0x3d	; 61
    8bdc:	de b7       	in	r29, 0x3e	; 62
    8bde:	29 97       	sbiw	r28, 0x09	; 9
    8be0:	cd bf       	out	0x3d, r28	; 61
    8be2:	de bf       	out	0x3e, r29	; 62
    8be4:	8d 83       	std	Y+5, r24	; 0x05
    8be6:	9e 83       	std	Y+6, r25	; 0x06
    8be8:	6f 83       	std	Y+7, r22	; 0x07
	if (USBx.rx_buf_head == USBx.rx_buf_tail) {	// RX ISR buffer empty
    8bea:	90 91 52 24 	lds	r25, 0x2452
    8bee:	80 91 51 24 	lds	r24, 0x2451
    8bf2:	98 17       	cp	r25, r24
    8bf4:	29 f4       	brne	.+10     	; 0x8c00 <_xio_usb_readchar+0x2a>
		return(TG_BUFFER_EMPTY);
    8bf6:	88 e0       	ldi	r24, 0x08	; 8
    8bf8:	90 e0       	ldi	r25, 0x00	; 0
    8bfa:	88 87       	std	Y+8, r24	; 0x08
    8bfc:	99 87       	std	Y+9, r25	; 0x09
    8bfe:	30 c0       	rjmp	.+96     	; 0x8c60 <_xio_usb_readchar+0x8a>
	}
	if (--(USBx.rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
    8c00:	80 91 51 24 	lds	r24, 0x2451
    8c04:	81 50       	subi	r24, 0x01	; 1
    8c06:	80 93 51 24 	sts	0x2451, r24
    8c0a:	80 91 51 24 	lds	r24, 0x2451
    8c0e:	88 23       	and	r24, r24
    8c10:	19 f4       	brne	.+6      	; 0x8c18 <_xio_usb_readchar+0x42>
		USBx.rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    8c12:	81 e1       	ldi	r24, 0x11	; 17
    8c14:	80 93 51 24 	sts	0x2451, r24
	}
	USB.c = (USBx.rx_buf[USBx.rx_buf_tail] & 0x007F); // get char from RX Q & mask MSB
    8c18:	80 91 51 24 	lds	r24, 0x2451
    8c1c:	88 2f       	mov	r24, r24
    8c1e:	90 e0       	ldi	r25, 0x00	; 0
    8c20:	fc 01       	movw	r30, r24
    8c22:	e6 5a       	subi	r30, 0xA6	; 166
    8c24:	fb 4d       	sbci	r31, 0xDB	; 219
    8c26:	80 81       	ld	r24, Z
    8c28:	8f 77       	andi	r24, 0x7F	; 127
    8c2a:	80 93 14 25 	sts	0x2514, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[USB.c])))()); // dispatch char
    8c2e:	80 91 14 25 	lds	r24, 0x2514
    8c32:	88 2f       	mov	r24, r24
    8c34:	90 e0       	ldi	r25, 0x00	; 0
    8c36:	88 0f       	add	r24, r24
    8c38:	99 1f       	adc	r25, r25
    8c3a:	87 50       	subi	r24, 0x07	; 7
    8c3c:	95 4e       	sbci	r25, 0xE5	; 229
    8c3e:	8b 83       	std	Y+3, r24	; 0x03
    8c40:	9c 83       	std	Y+4, r25	; 0x04
    8c42:	8b 81       	ldd	r24, Y+3	; 0x03
    8c44:	9c 81       	ldd	r25, Y+4	; 0x04
    8c46:	fc 01       	movw	r30, r24
    8c48:	85 91       	lpm	r24, Z+
    8c4a:	94 91       	lpm	r25, Z+
    8c4c:	89 83       	std	Y+1, r24	; 0x01
    8c4e:	9a 83       	std	Y+2, r25	; 0x02
    8c50:	eb 83       	std	Y+3, r30	; 0x03
    8c52:	fc 83       	std	Y+4, r31	; 0x04
    8c54:	89 81       	ldd	r24, Y+1	; 0x01
    8c56:	9a 81       	ldd	r25, Y+2	; 0x02
    8c58:	fc 01       	movw	r30, r24
    8c5a:	19 95       	eicall
    8c5c:	88 87       	std	Y+8, r24	; 0x08
    8c5e:	99 87       	std	Y+9, r25	; 0x09
    8c60:	88 85       	ldd	r24, Y+8	; 0x08
    8c62:	99 85       	ldd	r25, Y+9	; 0x09
}
    8c64:	29 96       	adiw	r28, 0x09	; 9
    8c66:	cd bf       	out	0x3d, r28	; 61
    8c68:	de bf       	out	0x3e, r29	; 62
    8c6a:	cf 91       	pop	r28
    8c6c:	df 91       	pop	r29
    8c6e:	08 95       	ret

00008c70 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
    8c70:	df 93       	push	r29
    8c72:	cf 93       	push	r28
    8c74:	0f 92       	push	r0
    8c76:	0f 92       	push	r0
    8c78:	cd b7       	in	r28, 0x3d	; 61
    8c7a:	de b7       	in	r29, 0x3e	; 62
	if (USB.len > USB.size) {						// trap buffer overflow
    8c7c:	90 91 15 25 	lds	r25, 0x2515
    8c80:	80 91 16 25 	lds	r24, 0x2516
    8c84:	89 17       	cp	r24, r25
    8c86:	80 f4       	brcc	.+32     	; 0x8ca8 <_readln_char+0x38>
		USB.sig = XIO_SIG_EOL;
    8c88:	82 e0       	ldi	r24, 0x02	; 2
    8c8a:	80 93 13 25 	sts	0x2513, r24
		USB.buf[USB.size] = NUL;					// size is zero based
    8c8e:	80 91 16 25 	lds	r24, 0x2516
    8c92:	88 2f       	mov	r24, r24
    8c94:	90 e0       	ldi	r25, 0x00	; 0
    8c96:	fc 01       	movw	r30, r24
    8c98:	ed 5d       	subi	r30, 0xDD	; 221
    8c9a:	fa 4d       	sbci	r31, 0xDA	; 218
    8c9c:	10 82       	st	Z, r1
		return (TG_BUFFER_FULL);
    8c9e:	87 e0       	ldi	r24, 0x07	; 7
    8ca0:	90 e0       	ldi	r25, 0x00	; 0
    8ca2:	89 83       	std	Y+1, r24	; 0x01
    8ca4:	9a 83       	std	Y+2, r25	; 0x02
    8ca6:	23 c0       	rjmp	.+70     	; 0x8cee <_readln_char+0x7e>
	}
	USB.buf[USB.len++] = USB.c;
    8ca8:	30 91 15 25 	lds	r19, 0x2515
    8cac:	83 2f       	mov	r24, r19
    8cae:	90 e0       	ldi	r25, 0x00	; 0
    8cb0:	20 91 14 25 	lds	r18, 0x2514
    8cb4:	fc 01       	movw	r30, r24
    8cb6:	ed 5d       	subi	r30, 0xDD	; 221
    8cb8:	fa 4d       	sbci	r31, 0xDA	; 218
    8cba:	20 83       	st	Z, r18
    8cbc:	83 2f       	mov	r24, r19
    8cbe:	8f 5f       	subi	r24, 0xFF	; 255
    8cc0:	80 93 15 25 	sts	0x2515, r24
	if (ECHO(USB.flags)) xio_putc_usb(USB.c, stdout);// conditional echo
    8cc4:	80 91 0f 25 	lds	r24, 0x250F
    8cc8:	90 91 10 25 	lds	r25, 0x2510
    8ccc:	80 71       	andi	r24, 0x10	; 16
    8cce:	90 70       	andi	r25, 0x00	; 0
    8cd0:	00 97       	sbiw	r24, 0x00	; 0
    8cd2:	49 f0       	breq	.+18     	; 0x8ce6 <_readln_char+0x76>
    8cd4:	80 91 14 25 	lds	r24, 0x2514
    8cd8:	20 91 8c 26 	lds	r18, 0x268C
    8cdc:	30 91 8d 26 	lds	r19, 0x268D
    8ce0:	b9 01       	movw	r22, r18
    8ce2:	0e 94 0d 44 	call	0x881a	; 0x881a <xio_putc_usb>
	return (TG_EAGAIN);							// line is still in process
    8ce6:	81 e0       	ldi	r24, 0x01	; 1
    8ce8:	90 e0       	ldi	r25, 0x00	; 0
    8cea:	89 83       	std	Y+1, r24	; 0x01
    8cec:	9a 83       	std	Y+2, r25	; 0x02
    8cee:	89 81       	ldd	r24, Y+1	; 0x01
    8cf0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    8cf2:	0f 90       	pop	r0
    8cf4:	0f 90       	pop	r0
    8cf6:	cf 91       	pop	r28
    8cf8:	df 91       	pop	r29
    8cfa:	08 95       	ret

00008cfc <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
    8cfc:	df 93       	push	r29
    8cfe:	cf 93       	push	r28
    8d00:	cd b7       	in	r28, 0x3d	; 61
    8d02:	de b7       	in	r29, 0x3e	; 62
	USB.sig = XIO_SIG_EOL;
    8d04:	82 e0       	ldi	r24, 0x02	; 2
    8d06:	80 93 13 25 	sts	0x2513, r24
	USB.buf[USB.len] = NUL;
    8d0a:	80 91 15 25 	lds	r24, 0x2515
    8d0e:	88 2f       	mov	r24, r24
    8d10:	90 e0       	ldi	r25, 0x00	; 0
    8d12:	fc 01       	movw	r30, r24
    8d14:	ed 5d       	subi	r30, 0xDD	; 221
    8d16:	fa 4d       	sbci	r31, 0xDA	; 218
    8d18:	10 82       	st	Z, r1
	USB.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    8d1a:	80 91 0f 25 	lds	r24, 0x250F
    8d1e:	90 91 10 25 	lds	r25, 0x2510
    8d22:	9f 7b       	andi	r25, 0xBF	; 191
    8d24:	80 93 0f 25 	sts	0x250F, r24
    8d28:	90 93 10 25 	sts	0x2510, r25
	if (ECHO(USB.flags)) xio_putc_usb('\n',stdout);// echo a newline
    8d2c:	80 91 0f 25 	lds	r24, 0x250F
    8d30:	90 91 10 25 	lds	r25, 0x2510
    8d34:	80 71       	andi	r24, 0x10	; 16
    8d36:	90 70       	andi	r25, 0x00	; 0
    8d38:	00 97       	sbiw	r24, 0x00	; 0
    8d3a:	41 f0       	breq	.+16     	; 0x8d4c <_readln_NEWLINE+0x50>
    8d3c:	20 91 8c 26 	lds	r18, 0x268C
    8d40:	30 91 8d 26 	lds	r19, 0x268D
    8d44:	8a e0       	ldi	r24, 0x0A	; 10
    8d46:	b9 01       	movw	r22, r18
    8d48:	0e 94 0d 44 	call	0x881a	; 0x881a <xio_putc_usb>
	return (TG_EOL);							// return for end-of-line
    8d4c:	84 e0       	ldi	r24, 0x04	; 4
    8d4e:	90 e0       	ldi	r25, 0x00	; 0
}
    8d50:	cf 91       	pop	r28
    8d52:	df 91       	pop	r29
    8d54:	08 95       	ret

00008d56 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
    8d56:	df 93       	push	r29
    8d58:	cf 93       	push	r28
    8d5a:	0f 92       	push	r0
    8d5c:	0f 92       	push	r0
    8d5e:	cd b7       	in	r28, 0x3d	; 61
    8d60:	de b7       	in	r29, 0x3e	; 62
	if (SEMICOLONS(USB.flags)) {
    8d62:	80 91 0f 25 	lds	r24, 0x250F
    8d66:	90 91 10 25 	lds	r25, 0x2510
    8d6a:	80 78       	andi	r24, 0x80	; 128
    8d6c:	90 70       	andi	r25, 0x00	; 0
    8d6e:	00 97       	sbiw	r24, 0x00	; 0
    8d70:	29 f0       	breq	.+10     	; 0x8d7c <_readln_SEMICOLON+0x26>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    8d72:	0e 94 7e 46 	call	0x8cfc	; 0x8cfc <_readln_NEWLINE>
    8d76:	89 83       	std	Y+1, r24	; 0x01
    8d78:	9a 83       	std	Y+2, r25	; 0x02
    8d7a:	04 c0       	rjmp	.+8      	; 0x8d84 <_readln_SEMICOLON+0x2e>
	} else {
		return (_readln_char());				// else treat as any other character
    8d7c:	0e 94 38 46 	call	0x8c70	; 0x8c70 <_readln_char>
    8d80:	89 83       	std	Y+1, r24	; 0x01
    8d82:	9a 83       	std	Y+2, r25	; 0x02
    8d84:	89 81       	ldd	r24, Y+1	; 0x01
    8d86:	9a 81       	ldd	r25, Y+2	; 0x02
	}
}
    8d88:	0f 90       	pop	r0
    8d8a:	0f 90       	pop	r0
    8d8c:	cf 91       	pop	r28
    8d8e:	df 91       	pop	r29
    8d90:	08 95       	ret

00008d92 <_readln_DELETE>:

static int _readln_DELETE(void)
{
    8d92:	df 93       	push	r29
    8d94:	cf 93       	push	r28
    8d96:	cd b7       	in	r28, 0x3d	; 61
    8d98:	de b7       	in	r29, 0x3e	; 62
	if (--USB.len >= 0) {
    8d9a:	80 91 15 25 	lds	r24, 0x2515
    8d9e:	81 50       	subi	r24, 0x01	; 1
    8da0:	80 93 15 25 	sts	0x2515, r24
		if (ECHO(USB.flags)) xio_putc_usb(USB.c, stdout);
    8da4:	80 91 0f 25 	lds	r24, 0x250F
    8da8:	90 91 10 25 	lds	r25, 0x2510
    8dac:	80 71       	andi	r24, 0x10	; 16
    8dae:	90 70       	andi	r25, 0x00	; 0
    8db0:	00 97       	sbiw	r24, 0x00	; 0
    8db2:	49 f0       	breq	.+18     	; 0x8dc6 <_readln_DELETE+0x34>
    8db4:	80 91 14 25 	lds	r24, 0x2514
    8db8:	20 91 8c 26 	lds	r18, 0x268C
    8dbc:	30 91 8d 26 	lds	r19, 0x268D
    8dc0:	b9 01       	movw	r22, r18
    8dc2:	0e 94 0d 44 	call	0x881a	; 0x881a <xio_putc_usb>
	} else {
		USB.len = 0;
	}
	return (TG_EAGAIN);							// line is still in process
    8dc6:	81 e0       	ldi	r24, 0x01	; 1
    8dc8:	90 e0       	ldi	r25, 0x00	; 0
}
    8dca:	cf 91       	pop	r28
    8dcc:	df 91       	pop	r29
    8dce:	08 95       	ret

00008dd0 <_sig_KILL>:
/*
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
    8dd0:	df 93       	push	r29
    8dd2:	cf 93       	push	r28
    8dd4:	cd b7       	in	r28, 0x3d	; 61
    8dd6:	de b7       	in	r29, 0x3e	; 62
	USB.sig = XIO_SIG_KILL;
    8dd8:	84 e0       	ldi	r24, 0x04	; 4
    8dda:	80 93 13 25 	sts	0x2513, r24
	return(_FDEV_ERR);
    8dde:	8f ef       	ldi	r24, 0xFF	; 255
    8de0:	9f ef       	ldi	r25, 0xFF	; 255
}
    8de2:	cf 91       	pop	r28
    8de4:	df 91       	pop	r29
    8de6:	08 95       	ret

00008de8 <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
    8de8:	df 93       	push	r29
    8dea:	cf 93       	push	r28
    8dec:	cd b7       	in	r28, 0x3d	; 61
    8dee:	de b7       	in	r29, 0x3e	; 62
	USB.sig = XIO_SIG_PAUSE;
    8df0:	86 e0       	ldi	r24, 0x06	; 6
    8df2:	80 93 13 25 	sts	0x2513, r24
	return(_FDEV_ERR);
    8df6:	8f ef       	ldi	r24, 0xFF	; 255
    8df8:	9f ef       	ldi	r25, 0xFF	; 255
}
    8dfa:	cf 91       	pop	r28
    8dfc:	df 91       	pop	r29
    8dfe:	08 95       	ret

00008e00 <_sig_RESUME>:

static int _sig_RESUME(void)
{
    8e00:	df 93       	push	r29
    8e02:	cf 93       	push	r28
    8e04:	cd b7       	in	r28, 0x3d	; 61
    8e06:	de b7       	in	r29, 0x3e	; 62
	USB.sig = XIO_SIG_RESUME;
    8e08:	87 e0       	ldi	r24, 0x07	; 7
    8e0a:	80 93 13 25 	sts	0x2513, r24
	return(_FDEV_ERR);
    8e0e:	8f ef       	ldi	r24, 0xFF	; 255
    8e10:	9f ef       	ldi	r25, 0xFF	; 255
}
    8e12:	cf 91       	pop	r28
    8e14:	df 91       	pop	r29
    8e16:	08 95       	ret

00008e18 <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)	//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    8e18:	1f 92       	push	r1
    8e1a:	0f 92       	push	r0
    8e1c:	0f b6       	in	r0, 0x3f	; 63
    8e1e:	0f 92       	push	r0
    8e20:	00 90 3b 00 	lds	r0, 0x003B
    8e24:	0f 92       	push	r0
    8e26:	11 24       	eor	r1, r1
    8e28:	2f 93       	push	r18
    8e2a:	3f 93       	push	r19
    8e2c:	4f 93       	push	r20
    8e2e:	5f 93       	push	r21
    8e30:	6f 93       	push	r22
    8e32:	7f 93       	push	r23
    8e34:	8f 93       	push	r24
    8e36:	9f 93       	push	r25
    8e38:	af 93       	push	r26
    8e3a:	bf 93       	push	r27
    8e3c:	ef 93       	push	r30
    8e3e:	ff 93       	push	r31
    8e40:	df 93       	push	r29
    8e42:	cf 93       	push	r28
    8e44:	0f 92       	push	r0
    8e46:	cd b7       	in	r28, 0x3d	; 61
    8e48:	de b7       	in	r29, 0x3e	; 62
	uint8_t c = RSx.usart->DATA;				// can only read DATA once
    8e4a:	e0 91 29 24 	lds	r30, 0x2429
    8e4e:	f0 91 2a 24 	lds	r31, 0x242A
    8e52:	80 81       	ld	r24, Z
    8e54:	89 83       	std	Y+1, r24	; 0x01

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    8e56:	89 81       	ldd	r24, Y+1	; 0x01
    8e58:	83 30       	cpi	r24, 0x03	; 3
    8e5a:	31 f4       	brne	.+12     	; 0x8e68 <__vector_28+0x50>
		RS.sig = XIO_SIG_KILL;					// set signal value
    8e5c:	84 e0       	ldi	r24, 0x04	; 4
    8e5e:	80 93 af 24 	sts	0x24AF, r24
		signal_etx();							// call app-specific signal handler
    8e62:	0e 94 f8 41 	call	0x83f0	; 0x83f0 <signal_etx>
    8e66:	28 c0       	rjmp	.+80     	; 0x8eb8 <__vector_28+0xa0>
		return;
	}

	// normal path
	if ((--RSx.rx_buf_head) == 0) { 			// advance buffer head with wrap
    8e68:	80 91 25 24 	lds	r24, 0x2425
    8e6c:	81 50       	subi	r24, 0x01	; 1
    8e6e:	80 93 25 24 	sts	0x2425, r24
    8e72:	80 91 25 24 	lds	r24, 0x2425
    8e76:	88 23       	and	r24, r24
    8e78:	19 f4       	brne	.+6      	; 0x8e80 <__vector_28+0x68>
		RSx.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    8e7a:	81 e1       	ldi	r24, 0x11	; 17
    8e7c:	80 93 25 24 	sts	0x2425, r24
	}
	if (RSx.rx_buf_head != RSx.rx_buf_tail) {	// write char unless buffer full
    8e80:	90 91 25 24 	lds	r25, 0x2425
    8e84:	80 91 24 24 	lds	r24, 0x2424
    8e88:	98 17       	cp	r25, r24
    8e8a:	51 f0       	breq	.+20     	; 0x8ea0 <__vector_28+0x88>
		RSx.rx_buf[RSx.rx_buf_head] = c;		// (= USARTC0.DATA;)
    8e8c:	80 91 25 24 	lds	r24, 0x2425
    8e90:	88 2f       	mov	r24, r24
    8e92:	90 e0       	ldi	r25, 0x00	; 0
    8e94:	fc 01       	movw	r30, r24
    8e96:	e3 5d       	subi	r30, 0xD3	; 211
    8e98:	fb 4d       	sbci	r31, 0xDB	; 219
    8e9a:	89 81       	ldd	r24, Y+1	; 0x01
    8e9c:	80 83       	st	Z, r24
    8e9e:	0c c0       	rjmp	.+24     	; 0x8eb8 <__vector_28+0xa0>
		return;
	}
	// buffer-full handling
	if ((++RSx.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    8ea0:	80 91 25 24 	lds	r24, 0x2425
    8ea4:	8f 5f       	subi	r24, 0xFF	; 255
    8ea6:	80 93 25 24 	sts	0x2425, r24
    8eaa:	80 91 25 24 	lds	r24, 0x2425
    8eae:	82 31       	cpi	r24, 0x12	; 18
    8eb0:	18 f0       	brcs	.+6      	; 0x8eb8 <__vector_28+0xa0>
		RSx.rx_buf_head = 1;
    8eb2:	81 e0       	ldi	r24, 0x01	; 1
    8eb4:	80 93 25 24 	sts	0x2425, r24
	}
	// activate flow control here or before it gets to this level
}
    8eb8:	0f 90       	pop	r0
    8eba:	cf 91       	pop	r28
    8ebc:	df 91       	pop	r29
    8ebe:	ff 91       	pop	r31
    8ec0:	ef 91       	pop	r30
    8ec2:	bf 91       	pop	r27
    8ec4:	af 91       	pop	r26
    8ec6:	9f 91       	pop	r25
    8ec8:	8f 91       	pop	r24
    8eca:	7f 91       	pop	r23
    8ecc:	6f 91       	pop	r22
    8ece:	5f 91       	pop	r21
    8ed0:	4f 91       	pop	r20
    8ed2:	3f 91       	pop	r19
    8ed4:	2f 91       	pop	r18
    8ed6:	0f 90       	pop	r0
    8ed8:	00 92 3b 00 	sts	0x003B, r0
    8edc:	0f 90       	pop	r0
    8ede:	0f be       	out	0x3f, r0	; 63
    8ee0:	0f 90       	pop	r0
    8ee2:	1f 90       	pop	r1
    8ee4:	18 95       	reti

00008ee6 <xio_rs485_queue_RX_char>:
/*
 * xio_rs485_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_rs485_queue_RX_char(const char c)
{
    8ee6:	df 93       	push	r29
    8ee8:	cf 93       	push	r28
    8eea:	0f 92       	push	r0
    8eec:	cd b7       	in	r28, 0x3d	; 61
    8eee:	de b7       	in	r29, 0x3e	; 62
    8ef0:	89 83       	std	Y+1, r24	; 0x01
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    8ef2:	89 81       	ldd	r24, Y+1	; 0x01
    8ef4:	83 30       	cpi	r24, 0x03	; 3
    8ef6:	31 f4       	brne	.+12     	; 0x8f04 <xio_rs485_queue_RX_char+0x1e>
		RS.sig = XIO_SIG_KILL;					// set signal value
    8ef8:	84 e0       	ldi	r24, 0x04	; 4
    8efa:	80 93 af 24 	sts	0x24AF, r24
		signal_etx();							// call app-specific signal handler
    8efe:	0e 94 f8 41 	call	0x83f0	; 0x83f0 <signal_etx>
    8f02:	28 c0       	rjmp	.+80     	; 0x8f54 <xio_rs485_queue_RX_char+0x6e>
		return;
	}

	// normal path
	if ((--RSx.rx_buf_head) == 0) { 			// wrap condition
    8f04:	80 91 25 24 	lds	r24, 0x2425
    8f08:	81 50       	subi	r24, 0x01	; 1
    8f0a:	80 93 25 24 	sts	0x2425, r24
    8f0e:	80 91 25 24 	lds	r24, 0x2425
    8f12:	88 23       	and	r24, r24
    8f14:	19 f4       	brne	.+6      	; 0x8f1c <xio_rs485_queue_RX_char+0x36>
		RSx.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    8f16:	81 e1       	ldi	r24, 0x11	; 17
    8f18:	80 93 25 24 	sts	0x2425, r24
	}
	if (RSx.rx_buf_head != RSx.rx_buf_tail) {	// write char unless buffer full
    8f1c:	90 91 25 24 	lds	r25, 0x2425
    8f20:	80 91 24 24 	lds	r24, 0x2424
    8f24:	98 17       	cp	r25, r24
    8f26:	51 f0       	breq	.+20     	; 0x8f3c <xio_rs485_queue_RX_char+0x56>
		RSx.rx_buf[RSx.rx_buf_head] = c;		// FAKE INPUT DATA
    8f28:	80 91 25 24 	lds	r24, 0x2425
    8f2c:	88 2f       	mov	r24, r24
    8f2e:	90 e0       	ldi	r25, 0x00	; 0
    8f30:	fc 01       	movw	r30, r24
    8f32:	e3 5d       	subi	r30, 0xD3	; 211
    8f34:	fb 4d       	sbci	r31, 0xDB	; 219
    8f36:	89 81       	ldd	r24, Y+1	; 0x01
    8f38:	80 83       	st	Z, r24
    8f3a:	0c c0       	rjmp	.+24     	; 0x8f54 <xio_rs485_queue_RX_char+0x6e>
		return;
	}
	// buffer-full handling
	if ((++RSx.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    8f3c:	80 91 25 24 	lds	r24, 0x2425
    8f40:	8f 5f       	subi	r24, 0xFF	; 255
    8f42:	80 93 25 24 	sts	0x2425, r24
    8f46:	80 91 25 24 	lds	r24, 0x2425
    8f4a:	82 31       	cpi	r24, 0x12	; 18
    8f4c:	18 f0       	brcs	.+6      	; 0x8f54 <xio_rs485_queue_RX_char+0x6e>
		RSx.rx_buf_head = 1;
    8f4e:	81 e0       	ldi	r24, 0x01	; 1
    8f50:	80 93 25 24 	sts	0x2425, r24
	}
}
    8f54:	0f 90       	pop	r0
    8f56:	cf 91       	pop	r28
    8f58:	df 91       	pop	r29
    8f5a:	08 95       	ret

00008f5c <xio_rs485_queue_RX_string>:
/*
 * xio_rs485_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_rs485_queue_RX_string(char *buf)
{
    8f5c:	df 93       	push	r29
    8f5e:	cf 93       	push	r28
    8f60:	cd b7       	in	r28, 0x3d	; 61
    8f62:	de b7       	in	r29, 0x3e	; 62
    8f64:	25 97       	sbiw	r28, 0x05	; 5
    8f66:	cd bf       	out	0x3d, r28	; 61
    8f68:	de bf       	out	0x3e, r29	; 62
    8f6a:	8b 83       	std	Y+3, r24	; 0x03
    8f6c:	9c 83       	std	Y+4, r25	; 0x04
	char c;
	uint8_t i=0;
    8f6e:	19 82       	std	Y+1, r1	; 0x01
    8f70:	03 c0       	rjmp	.+6      	; 0x8f78 <xio_rs485_queue_RX_string+0x1c>

	while ((c = buf[i++]) != NUL) {
		xio_rs485_queue_RX_char(c);
    8f72:	8a 81       	ldd	r24, Y+2	; 0x02
    8f74:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <xio_rs485_queue_RX_char>
void xio_rs485_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    8f78:	89 81       	ldd	r24, Y+1	; 0x01
    8f7a:	28 2f       	mov	r18, r24
    8f7c:	30 e0       	ldi	r19, 0x00	; 0
    8f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    8f80:	9c 81       	ldd	r25, Y+4	; 0x04
    8f82:	fc 01       	movw	r30, r24
    8f84:	e2 0f       	add	r30, r18
    8f86:	f3 1f       	adc	r31, r19
    8f88:	80 81       	ld	r24, Z
    8f8a:	8a 83       	std	Y+2, r24	; 0x02
    8f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    8f8e:	8d 83       	std	Y+5, r24	; 0x05
    8f90:	8d 81       	ldd	r24, Y+5	; 0x05
    8f92:	88 23       	and	r24, r24
    8f94:	11 f0       	breq	.+4      	; 0x8f9a <xio_rs485_queue_RX_string+0x3e>
    8f96:	81 e0       	ldi	r24, 0x01	; 1
    8f98:	8d 83       	std	Y+5, r24	; 0x05
    8f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    8f9c:	99 81       	ldd	r25, Y+1	; 0x01
    8f9e:	9f 5f       	subi	r25, 0xFF	; 255
    8fa0:	99 83       	std	Y+1, r25	; 0x01
    8fa2:	88 23       	and	r24, r24
    8fa4:	31 f7       	brne	.-52     	; 0x8f72 <xio_rs485_queue_RX_string+0x16>
		xio_rs485_queue_RX_char(c);
	}
}
    8fa6:	25 96       	adiw	r28, 0x05	; 5
    8fa8:	cd bf       	out	0x3d, r28	; 61
    8faa:	de bf       	out	0x3e, r29	; 62
    8fac:	cf 91       	pop	r28
    8fae:	df 91       	pop	r29
    8fb0:	08 95       	ret

00008fb2 <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC0 data register empty
{
    8fb2:	1f 92       	push	r1
    8fb4:	0f 92       	push	r0
    8fb6:	0f b6       	in	r0, 0x3f	; 63
    8fb8:	0f 92       	push	r0
    8fba:	00 90 3b 00 	lds	r0, 0x003B
    8fbe:	0f 92       	push	r0
    8fc0:	11 24       	eor	r1, r1
    8fc2:	8f 93       	push	r24
    8fc4:	9f 93       	push	r25
    8fc6:	af 93       	push	r26
    8fc8:	bf 93       	push	r27
    8fca:	ef 93       	push	r30
    8fcc:	ff 93       	push	r31
    8fce:	df 93       	push	r29
    8fd0:	cf 93       	push	r28
    8fd2:	cd b7       	in	r28, 0x3d	; 61
    8fd4:	de b7       	in	r29, 0x3e	; 62
	if (RSx.tx_buf_head == RSx.tx_buf_tail) {	// buffer empty - disable ints
    8fd6:	90 91 27 24 	lds	r25, 0x2427
    8fda:	80 91 26 24 	lds	r24, 0x2426
    8fde:	98 17       	cp	r25, r24
    8fe0:	39 f4       	brne	.+14     	; 0x8ff0 <__vector_29+0x3e>
		RSx.usart->CTRLA = CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    8fe2:	e0 91 29 24 	lds	r30, 0x2429
    8fe6:	f0 91 2a 24 	lds	r31, 0x242A
    8fea:	80 e2       	ldi	r24, 0x20	; 32
    8fec:	83 83       	std	Z+3, r24	; 0x03
    8fee:	21 c0       	rjmp	.+66     	; 0x9032 <__vector_29+0x80>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(RS.flags)) {
    8ff0:	80 91 ab 24 	lds	r24, 0x24AB
    8ff4:	90 91 ac 24 	lds	r25, 0x24AC
    8ff8:	80 70       	andi	r24, 0x00	; 0
    8ffa:	98 70       	andi	r25, 0x08	; 8
    8ffc:	00 97       	sbiw	r24, 0x00	; 0
    8ffe:	c9 f4       	brne	.+50     	; 0x9032 <__vector_29+0x80>
		if (--(RSx.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    9000:	80 91 26 24 	lds	r24, 0x2426
    9004:	81 50       	subi	r24, 0x01	; 1
    9006:	80 93 26 24 	sts	0x2426, r24
    900a:	80 91 26 24 	lds	r24, 0x2426
    900e:	88 23       	and	r24, r24
    9010:	19 f4       	brne	.+6      	; 0x9018 <__vector_29+0x66>
			RSx.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    9012:	81 e1       	ldi	r24, 0x11	; 17
    9014:	80 93 26 24 	sts	0x2426, r24
		}
		RSx.usart->DATA = RSx.tx_buf[RSx.tx_buf_tail];	// write char to TX DATA reg
    9018:	a0 91 29 24 	lds	r26, 0x2429
    901c:	b0 91 2a 24 	lds	r27, 0x242A
    9020:	80 91 26 24 	lds	r24, 0x2426
    9024:	88 2f       	mov	r24, r24
    9026:	90 e0       	ldi	r25, 0x00	; 0
    9028:	fc 01       	movw	r30, r24
    902a:	e1 5c       	subi	r30, 0xC1	; 193
    902c:	fb 4d       	sbci	r31, 0xDB	; 219
    902e:	80 81       	ld	r24, Z
    9030:	8c 93       	st	X, r24
	}
}
    9032:	cf 91       	pop	r28
    9034:	df 91       	pop	r29
    9036:	ff 91       	pop	r31
    9038:	ef 91       	pop	r30
    903a:	bf 91       	pop	r27
    903c:	af 91       	pop	r26
    903e:	9f 91       	pop	r25
    9040:	8f 91       	pop	r24
    9042:	0f 90       	pop	r0
    9044:	00 92 3b 00 	sts	0x003B, r0
    9048:	0f 90       	pop	r0
    904a:	0f be       	out	0x3f, r0	; 63
    904c:	0f 90       	pop	r0
    904e:	1f 90       	pop	r1
    9050:	18 95       	reti

00009052 <xio_putc_rs485>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_rs485(const char c, FILE *stream)
{
    9052:	df 93       	push	r29
    9054:	cf 93       	push	r28
    9056:	cd b7       	in	r28, 0x3d	; 61
    9058:	de b7       	in	r29, 0x3e	; 62
    905a:	25 97       	sbiw	r28, 0x05	; 5
    905c:	cd bf       	out	0x3d, r28	; 61
    905e:	de bf       	out	0x3e, r29	; 62
    9060:	89 83       	std	Y+1, r24	; 0x01
    9062:	6a 83       	std	Y+2, r22	; 0x02
    9064:	7b 83       	std	Y+3, r23	; 0x03
	if ((RSx.next_tx_buf_head = RSx.tx_buf_head-1) == 0) { // advance head w/wrap
    9066:	80 91 27 24 	lds	r24, 0x2427
    906a:	81 50       	subi	r24, 0x01	; 1
    906c:	80 93 28 24 	sts	0x2428, r24
    9070:	80 91 28 24 	lds	r24, 0x2428
    9074:	88 23       	and	r24, r24
    9076:	21 f5       	brne	.+72     	; 0x90c0 <xio_putc_rs485+0x6e>
		RSx.next_tx_buf_head = TX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    9078:	81 e1       	ldi	r24, 0x11	; 17
    907a:	80 93 28 24 	sts	0x2428, r24
    907e:	20 c0       	rjmp	.+64     	; 0x90c0 <xio_putc_rs485+0x6e>
	}
	while(RSx.next_tx_buf_head == RSx.tx_buf_tail) { // TX buffer full. sleep or ret
		if (BLOCKING(RS.flags)) {
    9080:	80 91 ab 24 	lds	r24, 0x24AB
    9084:	90 91 ac 24 	lds	r25, 0x24AC
    9088:	84 70       	andi	r24, 0x04	; 4
    908a:	90 70       	andi	r25, 0x00	; 0
    908c:	00 97       	sbiw	r24, 0x00	; 0
    908e:	81 f0       	breq	.+32     	; 0x90b0 <xio_putc_rs485+0x5e>
			sleep_mode();
    9090:	a8 e4       	ldi	r26, 0x48	; 72
    9092:	b0 e0       	ldi	r27, 0x00	; 0
    9094:	e8 e4       	ldi	r30, 0x48	; 72
    9096:	f0 e0       	ldi	r31, 0x00	; 0
    9098:	80 81       	ld	r24, Z
    909a:	81 60       	ori	r24, 0x01	; 1
    909c:	8c 93       	st	X, r24
    909e:	88 95       	sleep
    90a0:	a8 e4       	ldi	r26, 0x48	; 72
    90a2:	b0 e0       	ldi	r27, 0x00	; 0
    90a4:	e8 e4       	ldi	r30, 0x48	; 72
    90a6:	f0 e0       	ldi	r31, 0x00	; 0
    90a8:	80 81       	ld	r24, Z
    90aa:	8e 7f       	andi	r24, 0xFE	; 254
    90ac:	8c 93       	st	X, r24
    90ae:	08 c0       	rjmp	.+16     	; 0x90c0 <xio_putc_rs485+0x6e>
		} else {
			RS.sig = XIO_SIG_EAGAIN;
    90b0:	81 e0       	ldi	r24, 0x01	; 1
    90b2:	80 93 af 24 	sts	0x24AF, r24
			return(_FDEV_ERR);
    90b6:	8f ef       	ldi	r24, 0xFF	; 255
    90b8:	9f ef       	ldi	r25, 0xFF	; 255
    90ba:	8c 83       	std	Y+4, r24	; 0x04
    90bc:	9d 83       	std	Y+5, r25	; 0x05
    90be:	78 c0       	rjmp	.+240    	; 0x91b0 <xio_putc_rs485+0x15e>
int xio_putc_rs485(const char c, FILE *stream)
{
	if ((RSx.next_tx_buf_head = RSx.tx_buf_head-1) == 0) { // advance head w/wrap
		RSx.next_tx_buf_head = TX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
	}
	while(RSx.next_tx_buf_head == RSx.tx_buf_tail) { // TX buffer full. sleep or ret
    90c0:	90 91 28 24 	lds	r25, 0x2428
    90c4:	80 91 26 24 	lds	r24, 0x2426
    90c8:	98 17       	cp	r25, r24
    90ca:	d1 f2       	breq	.-76     	; 0x9080 <xio_putc_rs485+0x2e>
			RS.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	RSx.tx_buf_head = RSx.next_tx_buf_head;			// accept next buffer head value
    90cc:	80 91 28 24 	lds	r24, 0x2428
    90d0:	80 93 27 24 	sts	0x2427, r24
	RSx.tx_buf[RSx.tx_buf_head] = c;				// ...and write char to buffer
    90d4:	80 91 27 24 	lds	r24, 0x2427
    90d8:	88 2f       	mov	r24, r24
    90da:	90 e0       	ldi	r25, 0x00	; 0
    90dc:	fc 01       	movw	r30, r24
    90de:	e1 5c       	subi	r30, 0xC1	; 193
    90e0:	fb 4d       	sbci	r31, 0xDB	; 219
    90e2:	89 81       	ldd	r24, Y+1	; 0x01
    90e4:	80 83       	st	Z, r24

	if (CRLF(RS.flags) && (c == '\n')) {			// detect LF and add a CR
    90e6:	80 91 ab 24 	lds	r24, 0x24AB
    90ea:	90 91 ac 24 	lds	r25, 0x24AC
    90ee:	80 72       	andi	r24, 0x20	; 32
    90f0:	90 70       	andi	r25, 0x00	; 0
    90f2:	00 97       	sbiw	r24, 0x00	; 0
    90f4:	61 f0       	breq	.+24     	; 0x910e <xio_putc_rs485+0xbc>
    90f6:	89 81       	ldd	r24, Y+1	; 0x01
    90f8:	8a 30       	cpi	r24, 0x0A	; 10
    90fa:	49 f4       	brne	.+18     	; 0x910e <xio_putc_rs485+0xbc>
		return xio_putc_rs485('\r', stream);		// recursion.
    90fc:	2a 81       	ldd	r18, Y+2	; 0x02
    90fe:	3b 81       	ldd	r19, Y+3	; 0x03
    9100:	8d e0       	ldi	r24, 0x0D	; 13
    9102:	b9 01       	movw	r22, r18
    9104:	0e 94 29 48 	call	0x9052	; 0x9052 <xio_putc_rs485>
    9108:	8c 83       	std	Y+4, r24	; 0x04
    910a:	9d 83       	std	Y+5, r25	; 0x05
    910c:	51 c0       	rjmp	.+162    	; 0x91b0 <xio_putc_rs485+0x15e>
	}

	// dequeue the buffer if DATA register is ready
	if (RSx.usart->STATUS & 0x20) {
    910e:	e0 91 29 24 	lds	r30, 0x2429
    9112:	f0 91 2a 24 	lds	r31, 0x242A
    9116:	81 81       	ldd	r24, Z+1	; 0x01
    9118:	88 2f       	mov	r24, r24
    911a:	90 e0       	ldi	r25, 0x00	; 0
    911c:	80 72       	andi	r24, 0x20	; 32
    911e:	90 70       	andi	r25, 0x00	; 0
    9120:	00 97       	sbiw	r24, 0x00	; 0
    9122:	a1 f1       	breq	.+104    	; 0x918c <xio_putc_rs485+0x13a>
		if (RSx.tx_buf_head == RSx.tx_buf_tail) {	// buf may be empty if IRQ got it
    9124:	90 91 27 24 	lds	r25, 0x2427
    9128:	80 91 26 24 	lds	r24, 0x2426
    912c:	98 17       	cp	r25, r24
    912e:	19 f4       	brne	.+6      	; 0x9136 <xio_putc_rs485+0xe4>
			return (0);
    9130:	1c 82       	std	Y+4, r1	; 0x04
    9132:	1d 82       	std	Y+5, r1	; 0x05
    9134:	3d c0       	rjmp	.+122    	; 0x91b0 <xio_putc_rs485+0x15e>
		}
		RS.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    9136:	80 91 ab 24 	lds	r24, 0x24AB
    913a:	90 91 ac 24 	lds	r25, 0x24AC
    913e:	98 60       	ori	r25, 0x08	; 8
    9140:	80 93 ab 24 	sts	0x24AB, r24
    9144:	90 93 ac 24 	sts	0x24AC, r25
		if (--(RSx.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    9148:	80 91 26 24 	lds	r24, 0x2426
    914c:	81 50       	subi	r24, 0x01	; 1
    914e:	80 93 26 24 	sts	0x2426, r24
    9152:	80 91 26 24 	lds	r24, 0x2426
    9156:	88 23       	and	r24, r24
    9158:	19 f4       	brne	.+6      	; 0x9160 <xio_putc_rs485+0x10e>
			RSx.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    915a:	81 e1       	ldi	r24, 0x11	; 17
    915c:	80 93 26 24 	sts	0x2426, r24
		}
		RSx.usart->DATA = RSx.tx_buf[RSx.tx_buf_tail];// write char to TX DATA reg
    9160:	a0 91 29 24 	lds	r26, 0x2429
    9164:	b0 91 2a 24 	lds	r27, 0x242A
    9168:	80 91 26 24 	lds	r24, 0x2426
    916c:	88 2f       	mov	r24, r24
    916e:	90 e0       	ldi	r25, 0x00	; 0
    9170:	fc 01       	movw	r30, r24
    9172:	e1 5c       	subi	r30, 0xC1	; 193
    9174:	fb 4d       	sbci	r31, 0xDB	; 219
    9176:	80 81       	ld	r24, Z
    9178:	8c 93       	st	X, r24
		RS.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    917a:	80 91 ab 24 	lds	r24, 0x24AB
    917e:	90 91 ac 24 	lds	r25, 0x24AC
    9182:	97 7f       	andi	r25, 0xF7	; 247
    9184:	80 93 ab 24 	sts	0x24AB, r24
    9188:	90 93 ac 24 	sts	0x24AC, r25
	}
	// enable interrupts regardless
	RSx.usart->CTRLA = CTRLA_RXON_TXON;			// won't work if you just |= it
    918c:	e0 91 29 24 	lds	r30, 0x2429
    9190:	f0 91 2a 24 	lds	r31, 0x242A
    9194:	81 e2       	ldi	r24, 0x21	; 33
    9196:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    9198:	a0 ea       	ldi	r26, 0xA0	; 160
    919a:	b0 e0       	ldi	r27, 0x00	; 0
    919c:	e0 ea       	ldi	r30, 0xA0	; 160
    919e:	f0 e0       	ldi	r31, 0x00	; 0
    91a0:	82 81       	ldd	r24, Z+2	; 0x02
    91a2:	81 60       	ori	r24, 0x01	; 1
    91a4:	12 96       	adiw	r26, 0x02	; 2
    91a6:	8c 93       	st	X, r24
    91a8:	12 97       	sbiw	r26, 0x02	; 2
	sei();										// enable global interrupts
    91aa:	78 94       	sei

	return (0);	// 0 = OK
    91ac:	1c 82       	std	Y+4, r1	; 0x04
    91ae:	1d 82       	std	Y+5, r1	; 0x05
    91b0:	8c 81       	ldd	r24, Y+4	; 0x04
    91b2:	9d 81       	ldd	r25, Y+5	; 0x05
}
    91b4:	25 96       	adiw	r28, 0x05	; 5
    91b6:	cd bf       	out	0x3d, r28	; 61
    91b8:	de bf       	out	0x3e, r29	; 62
    91ba:	cf 91       	pop	r28
    91bc:	df 91       	pop	r29
    91be:	08 95       	ret

000091c0 <xio_getc_rs485>:
 *		- special characters such as EOL and control chars are handled by the
 *		  character helper routines. See them for behaviors
 */

int xio_getc_rs485(FILE *stream)
{
    91c0:	df 93       	push	r29
    91c2:	cf 93       	push	r28
    91c4:	cd b7       	in	r28, 0x3d	; 61
    91c6:	de b7       	in	r29, 0x3e	; 62
    91c8:	28 97       	sbiw	r28, 0x08	; 8
    91ca:	cd bf       	out	0x3d, r28	; 61
    91cc:	de bf       	out	0x3e, r29	; 62
    91ce:	8d 83       	std	Y+5, r24	; 0x05
    91d0:	9e 83       	std	Y+6, r25	; 0x06
    91d2:	20 c0       	rjmp	.+64     	; 0x9214 <xio_getc_rs485+0x54>
	while (RSx.rx_buf_head == RSx.rx_buf_tail) {// RX ISR buffer empty
		if (BLOCKING(RS.flags)) {
    91d4:	80 91 ab 24 	lds	r24, 0x24AB
    91d8:	90 91 ac 24 	lds	r25, 0x24AC
    91dc:	84 70       	andi	r24, 0x04	; 4
    91de:	90 70       	andi	r25, 0x00	; 0
    91e0:	00 97       	sbiw	r24, 0x00	; 0
    91e2:	81 f0       	breq	.+32     	; 0x9204 <xio_getc_rs485+0x44>
			sleep_mode();
    91e4:	a8 e4       	ldi	r26, 0x48	; 72
    91e6:	b0 e0       	ldi	r27, 0x00	; 0
    91e8:	e8 e4       	ldi	r30, 0x48	; 72
    91ea:	f0 e0       	ldi	r31, 0x00	; 0
    91ec:	80 81       	ld	r24, Z
    91ee:	81 60       	ori	r24, 0x01	; 1
    91f0:	8c 93       	st	X, r24
    91f2:	88 95       	sleep
    91f4:	a8 e4       	ldi	r26, 0x48	; 72
    91f6:	b0 e0       	ldi	r27, 0x00	; 0
    91f8:	e8 e4       	ldi	r30, 0x48	; 72
    91fa:	f0 e0       	ldi	r31, 0x00	; 0
    91fc:	80 81       	ld	r24, Z
    91fe:	8e 7f       	andi	r24, 0xFE	; 254
    9200:	8c 93       	st	X, r24
    9202:	08 c0       	rjmp	.+16     	; 0x9214 <xio_getc_rs485+0x54>
		} else {
			RS.sig = XIO_SIG_EAGAIN;
    9204:	81 e0       	ldi	r24, 0x01	; 1
    9206:	80 93 af 24 	sts	0x24AF, r24
			return(_FDEV_ERR);
    920a:	8f ef       	ldi	r24, 0xFF	; 255
    920c:	9f ef       	ldi	r25, 0xFF	; 255
    920e:	8f 83       	std	Y+7, r24	; 0x07
    9210:	98 87       	std	Y+8, r25	; 0x08
    9212:	36 c0       	rjmp	.+108    	; 0x9280 <xio_getc_rs485+0xc0>
 *		  character helper routines. See them for behaviors
 */

int xio_getc_rs485(FILE *stream)
{
	while (RSx.rx_buf_head == RSx.rx_buf_tail) {// RX ISR buffer empty
    9214:	90 91 25 24 	lds	r25, 0x2425
    9218:	80 91 24 24 	lds	r24, 0x2424
    921c:	98 17       	cp	r25, r24
    921e:	d1 f2       	breq	.-76     	; 0x91d4 <xio_getc_rs485+0x14>
		} else {
			RS.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(RSx.rx_buf_tail) == 0) {				// advance RX tail (RXQ read ptr)
    9220:	80 91 24 24 	lds	r24, 0x2424
    9224:	81 50       	subi	r24, 0x01	; 1
    9226:	80 93 24 24 	sts	0x2424, r24
    922a:	80 91 24 24 	lds	r24, 0x2424
    922e:	88 23       	and	r24, r24
    9230:	19 f4       	brne	.+6      	; 0x9238 <xio_getc_rs485+0x78>
		RSx.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    9232:	81 e1       	ldi	r24, 0x11	; 17
    9234:	80 93 24 24 	sts	0x2424, r24
	}
	RS.c = (RSx.rx_buf[RSx.rx_buf_tail] & 0x007F);	// get char from RX & mask MSB
    9238:	80 91 24 24 	lds	r24, 0x2424
    923c:	88 2f       	mov	r24, r24
    923e:	90 e0       	ldi	r25, 0x00	; 0
    9240:	fc 01       	movw	r30, r24
    9242:	e3 5d       	subi	r30, 0xD3	; 211
    9244:	fb 4d       	sbci	r31, 0xDB	; 219
    9246:	80 81       	ld	r24, Z
    9248:	8f 77       	andi	r24, 0x7F	; 127
    924a:	80 93 b0 24 	sts	0x24B0, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[RS.c])))());
    924e:	80 91 b0 24 	lds	r24, 0x24B0
    9252:	88 2f       	mov	r24, r24
    9254:	90 e0       	ldi	r25, 0x00	; 0
    9256:	88 0f       	add	r24, r24
    9258:	99 1f       	adc	r25, r25
    925a:	87 50       	subi	r24, 0x07	; 7
    925c:	94 4e       	sbci	r25, 0xE4	; 228
    925e:	8b 83       	std	Y+3, r24	; 0x03
    9260:	9c 83       	std	Y+4, r25	; 0x04
    9262:	8b 81       	ldd	r24, Y+3	; 0x03
    9264:	9c 81       	ldd	r25, Y+4	; 0x04
    9266:	fc 01       	movw	r30, r24
    9268:	85 91       	lpm	r24, Z+
    926a:	94 91       	lpm	r25, Z+
    926c:	89 83       	std	Y+1, r24	; 0x01
    926e:	9a 83       	std	Y+2, r25	; 0x02
    9270:	eb 83       	std	Y+3, r30	; 0x03
    9272:	fc 83       	std	Y+4, r31	; 0x04
    9274:	89 81       	ldd	r24, Y+1	; 0x01
    9276:	9a 81       	ldd	r25, Y+2	; 0x02
    9278:	fc 01       	movw	r30, r24
    927a:	19 95       	eicall
    927c:	8f 83       	std	Y+7, r24	; 0x07
    927e:	98 87       	std	Y+8, r25	; 0x08
    9280:	8f 81       	ldd	r24, Y+7	; 0x07
    9282:	98 85       	ldd	r25, Y+8	; 0x08
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    9284:	28 96       	adiw	r28, 0x08	; 8
    9286:	cd bf       	out	0x3d, r28	; 61
    9288:	de bf       	out	0x3e, r29	; 62
    928a:	cf 91       	pop	r28
    928c:	df 91       	pop	r29
    928e:	08 95       	ret

00009290 <_getc_char>:

/* xio_rs485_getc helper routines */

static int _getc_char(void)
{
    9290:	df 93       	push	r29
    9292:	cf 93       	push	r28
    9294:	cd b7       	in	r28, 0x3d	; 61
    9296:	de b7       	in	r29, 0x3e	; 62
	if (ECHO(RS.flags)) xio_putc_rs485(RS.c, stdout);
    9298:	80 91 ab 24 	lds	r24, 0x24AB
    929c:	90 91 ac 24 	lds	r25, 0x24AC
    92a0:	80 71       	andi	r24, 0x10	; 16
    92a2:	90 70       	andi	r25, 0x00	; 0
    92a4:	00 97       	sbiw	r24, 0x00	; 0
    92a6:	49 f0       	breq	.+18     	; 0x92ba <_getc_char+0x2a>
    92a8:	80 91 b0 24 	lds	r24, 0x24B0
    92ac:	20 91 8c 26 	lds	r18, 0x268C
    92b0:	30 91 8d 26 	lds	r19, 0x268D
    92b4:	b9 01       	movw	r22, r18
    92b6:	0e 94 29 48 	call	0x9052	; 0x9052 <xio_putc_rs485>
	return(RS.c);
    92ba:	80 91 b0 24 	lds	r24, 0x24B0
    92be:	88 2f       	mov	r24, r24
    92c0:	90 e0       	ldi	r25, 0x00	; 0
}
    92c2:	cf 91       	pop	r28
    92c4:	df 91       	pop	r29
    92c6:	08 95       	ret

000092c8 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
    92c8:	df 93       	push	r29
    92ca:	cf 93       	push	r28
    92cc:	cd b7       	in	r28, 0x3d	; 61
    92ce:	de b7       	in	r29, 0x3e	; 62
	if (LINEMODE(RS.flags)) RS.c = '\n';
    92d0:	80 91 ab 24 	lds	r24, 0x24AB
    92d4:	90 91 ac 24 	lds	r25, 0x24AC
    92d8:	80 74       	andi	r24, 0x40	; 64
    92da:	90 70       	andi	r25, 0x00	; 0
    92dc:	00 97       	sbiw	r24, 0x00	; 0
    92de:	19 f0       	breq	.+6      	; 0x92e6 <_getc_NEWLINE+0x1e>
    92e0:	8a e0       	ldi	r24, 0x0A	; 10
    92e2:	80 93 b0 24 	sts	0x24B0, r24
	if (ECHO(RS.flags)) xio_putc_rs485(RS.c, stdout);
    92e6:	80 91 ab 24 	lds	r24, 0x24AB
    92ea:	90 91 ac 24 	lds	r25, 0x24AC
    92ee:	80 71       	andi	r24, 0x10	; 16
    92f0:	90 70       	andi	r25, 0x00	; 0
    92f2:	00 97       	sbiw	r24, 0x00	; 0
    92f4:	49 f0       	breq	.+18     	; 0x9308 <_getc_NEWLINE+0x40>
    92f6:	80 91 b0 24 	lds	r24, 0x24B0
    92fa:	20 91 8c 26 	lds	r18, 0x268C
    92fe:	30 91 8d 26 	lds	r19, 0x268D
    9302:	b9 01       	movw	r22, r18
    9304:	0e 94 29 48 	call	0x9052	; 0x9052 <xio_putc_rs485>
	return(RS.c);
    9308:	80 91 b0 24 	lds	r24, 0x24B0
    930c:	88 2f       	mov	r24, r24
    930e:	90 e0       	ldi	r25, 0x00	; 0
}
    9310:	cf 91       	pop	r28
    9312:	df 91       	pop	r29
    9314:	08 95       	ret

00009316 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
    9316:	df 93       	push	r29
    9318:	cf 93       	push	r28
    931a:	0f 92       	push	r0
    931c:	0f 92       	push	r0
    931e:	cd b7       	in	r28, 0x3d	; 61
    9320:	de b7       	in	r29, 0x3e	; 62
	if (SEMICOLONS(RS.flags)) {
    9322:	80 91 ab 24 	lds	r24, 0x24AB
    9326:	90 91 ac 24 	lds	r25, 0x24AC
    932a:	80 78       	andi	r24, 0x80	; 128
    932c:	90 70       	andi	r25, 0x00	; 0
    932e:	00 97       	sbiw	r24, 0x00	; 0
    9330:	29 f0       	breq	.+10     	; 0x933c <_getc_SEMICOLON+0x26>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    9332:	0e 94 64 49 	call	0x92c8	; 0x92c8 <_getc_NEWLINE>
    9336:	89 83       	std	Y+1, r24	; 0x01
    9338:	9a 83       	std	Y+2, r25	; 0x02
    933a:	04 c0       	rjmp	.+8      	; 0x9344 <_getc_SEMICOLON+0x2e>
	} 
	return (_getc_char());					// else treat as any other character
    933c:	0e 94 48 49 	call	0x9290	; 0x9290 <_getc_char>
    9340:	89 83       	std	Y+1, r24	; 0x01
    9342:	9a 83       	std	Y+2, r25	; 0x02
    9344:	89 81       	ldd	r24, Y+1	; 0x01
    9346:	9a 81       	ldd	r25, Y+2	; 0x02
}
    9348:	0f 90       	pop	r0
    934a:	0f 90       	pop	r0
    934c:	cf 91       	pop	r28
    934e:	df 91       	pop	r29
    9350:	08 95       	ret

00009352 <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
    9352:	df 93       	push	r29
    9354:	cf 93       	push	r28
    9356:	cd b7       	in	r28, 0x3d	; 61
    9358:	de b7       	in	r29, 0x3e	; 62
	RS.sig = XIO_SIG_DELETE;
    935a:	89 e0       	ldi	r24, 0x09	; 9
    935c:	80 93 af 24 	sts	0x24AF, r24
	return(_FDEV_ERR);
    9360:	8f ef       	ldi	r24, 0xFF	; 255
    9362:	9f ef       	ldi	r25, 0xFF	; 255
}
    9364:	cf 91       	pop	r28
    9366:	df 91       	pop	r29
    9368:	08 95       	ret

0000936a <xio_readln_rs485>:
 *
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_rs485()
{
    936a:	df 93       	push	r29
    936c:	cf 93       	push	r28
    936e:	00 d0       	rcall	.+0      	; 0x9370 <xio_readln_rs485+0x6>
    9370:	00 d0       	rcall	.+0      	; 0x9372 <xio_readln_rs485+0x8>
    9372:	cd b7       	in	r28, 0x3d	; 61
    9374:	de b7       	in	r29, 0x3e	; 62
	if (!IN_LINE(RS.flags)) {					// first time thru initializations
    9376:	80 91 ab 24 	lds	r24, 0x24AB
    937a:	90 91 ac 24 	lds	r25, 0x24AC
    937e:	80 70       	andi	r24, 0x00	; 0
    9380:	90 74       	andi	r25, 0x40	; 64
    9382:	00 97       	sbiw	r24, 0x00	; 0
    9384:	79 f4       	brne	.+30     	; 0x93a4 <xio_readln_rs485+0x3a>
		RS.len = 0;								// zero buffer
    9386:	10 92 b1 24 	sts	0x24B1, r1
		RS.status = 0;
    938a:	10 92 ae 24 	sts	0x24AE, r1
		RS.sig = XIO_SIG_OK;					// no signal action
    938e:	10 92 af 24 	sts	0x24AF, r1
		RS.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    9392:	80 91 ab 24 	lds	r24, 0x24AB
    9396:	90 91 ac 24 	lds	r25, 0x24AC
    939a:	90 64       	ori	r25, 0x40	; 64
    939c:	80 93 ab 24 	sts	0x24AB, r24
    93a0:	90 93 ac 24 	sts	0x24AC, r25
	}
	if (RSx.rx_buf_head == RSx.rx_buf_tail) {	// RX ISR buffer empty
    93a4:	90 91 25 24 	lds	r25, 0x2425
    93a8:	80 91 24 24 	lds	r24, 0x2424
    93ac:	98 17       	cp	r25, r24
    93ae:	29 f4       	brne	.+10     	; 0x93ba <xio_readln_rs485+0x50>
//		RS.sig = XIO_SIG_WOULDBLOCK;
		return(TG_EAGAIN);
    93b0:	81 e0       	ldi	r24, 0x01	; 1
    93b2:	90 e0       	ldi	r25, 0x00	; 0
    93b4:	8d 83       	std	Y+5, r24	; 0x05
    93b6:	9e 83       	std	Y+6, r25	; 0x06
    93b8:	30 c0       	rjmp	.+96     	; 0x941a <xio_readln_rs485+0xb0>
	}
	if (--(RSx.rx_buf_tail) == 0) {				// advance RX tail (RXQ read ptr)
    93ba:	80 91 24 24 	lds	r24, 0x2424
    93be:	81 50       	subi	r24, 0x01	; 1
    93c0:	80 93 24 24 	sts	0x2424, r24
    93c4:	80 91 24 24 	lds	r24, 0x2424
    93c8:	88 23       	and	r24, r24
    93ca:	19 f4       	brne	.+6      	; 0x93d2 <xio_readln_rs485+0x68>
		RSx.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    93cc:	81 e1       	ldi	r24, 0x11	; 17
    93ce:	80 93 24 24 	sts	0x2424, r24
	}
	RS.c = (RSx.rx_buf[RSx.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    93d2:	80 91 24 24 	lds	r24, 0x2424
    93d6:	88 2f       	mov	r24, r24
    93d8:	90 e0       	ldi	r25, 0x00	; 0
    93da:	fc 01       	movw	r30, r24
    93dc:	e3 5d       	subi	r30, 0xD3	; 211
    93de:	fb 4d       	sbci	r31, 0xDB	; 219
    93e0:	80 81       	ld	r24, Z
    93e2:	8f 77       	andi	r24, 0x7F	; 127
    93e4:	80 93 b0 24 	sts	0x24B0, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[RS.c])))()); // dispatch char
    93e8:	80 91 b0 24 	lds	r24, 0x24B0
    93ec:	88 2f       	mov	r24, r24
    93ee:	90 e0       	ldi	r25, 0x00	; 0
    93f0:	88 0f       	add	r24, r24
    93f2:	99 1f       	adc	r25, r25
    93f4:	87 50       	subi	r24, 0x07	; 7
    93f6:	93 4e       	sbci	r25, 0xE3	; 227
    93f8:	8b 83       	std	Y+3, r24	; 0x03
    93fa:	9c 83       	std	Y+4, r25	; 0x04
    93fc:	8b 81       	ldd	r24, Y+3	; 0x03
    93fe:	9c 81       	ldd	r25, Y+4	; 0x04
    9400:	fc 01       	movw	r30, r24
    9402:	85 91       	lpm	r24, Z+
    9404:	94 91       	lpm	r25, Z+
    9406:	89 83       	std	Y+1, r24	; 0x01
    9408:	9a 83       	std	Y+2, r25	; 0x02
    940a:	eb 83       	std	Y+3, r30	; 0x03
    940c:	fc 83       	std	Y+4, r31	; 0x04
    940e:	89 81       	ldd	r24, Y+1	; 0x01
    9410:	9a 81       	ldd	r25, Y+2	; 0x02
    9412:	fc 01       	movw	r30, r24
    9414:	19 95       	eicall
    9416:	8d 83       	std	Y+5, r24	; 0x05
    9418:	9e 83       	std	Y+6, r25	; 0x06
    941a:	8d 81       	ldd	r24, Y+5	; 0x05
    941c:	9e 81       	ldd	r25, Y+6	; 0x06
}
    941e:	26 96       	adiw	r28, 0x06	; 6
    9420:	cd bf       	out	0x3d, r28	; 61
    9422:	de bf       	out	0x3e, r29	; 62
    9424:	cf 91       	pop	r28
    9426:	df 91       	pop	r29
    9428:	08 95       	ret

0000942a <_readln_char>:

/* xio_rs485_readln helper routines */

static int _readln_char(void)
{
    942a:	df 93       	push	r29
    942c:	cf 93       	push	r28
    942e:	0f 92       	push	r0
    9430:	0f 92       	push	r0
    9432:	cd b7       	in	r28, 0x3d	; 61
    9434:	de b7       	in	r29, 0x3e	; 62
	if (RS.len > RS.size) {						// trap buffer overflow
    9436:	90 91 b1 24 	lds	r25, 0x24B1
    943a:	80 91 b2 24 	lds	r24, 0x24B2
    943e:	89 17       	cp	r24, r25
    9440:	80 f4       	brcc	.+32     	; 0x9462 <_readln_char+0x38>
		RS.sig = XIO_SIG_EOL;
    9442:	82 e0       	ldi	r24, 0x02	; 2
    9444:	80 93 af 24 	sts	0x24AF, r24
		RS.buf[RS.size] = NUL;					// RS.len is zero based
    9448:	80 91 b2 24 	lds	r24, 0x24B2
    944c:	88 2f       	mov	r24, r24
    944e:	90 e0       	ldi	r25, 0x00	; 0
    9450:	fc 01       	movw	r30, r24
    9452:	e1 54       	subi	r30, 0x41	; 65
    9454:	fb 4d       	sbci	r31, 0xDB	; 219
    9456:	10 82       	st	Z, r1
		return (TG_BUFFER_FULL);
    9458:	87 e0       	ldi	r24, 0x07	; 7
    945a:	90 e0       	ldi	r25, 0x00	; 0
    945c:	89 83       	std	Y+1, r24	; 0x01
    945e:	9a 83       	std	Y+2, r25	; 0x02
    9460:	23 c0       	rjmp	.+70     	; 0x94a8 <_readln_char+0x7e>
	}
	RS.buf[RS.len++] = RS.c;
    9462:	30 91 b1 24 	lds	r19, 0x24B1
    9466:	83 2f       	mov	r24, r19
    9468:	90 e0       	ldi	r25, 0x00	; 0
    946a:	20 91 b0 24 	lds	r18, 0x24B0
    946e:	fc 01       	movw	r30, r24
    9470:	e1 54       	subi	r30, 0x41	; 65
    9472:	fb 4d       	sbci	r31, 0xDB	; 219
    9474:	20 83       	st	Z, r18
    9476:	83 2f       	mov	r24, r19
    9478:	8f 5f       	subi	r24, 0xFF	; 255
    947a:	80 93 b1 24 	sts	0x24B1, r24
	if (ECHO(RS.flags)) xio_putc_rs485(RS.c, stdout);// conditional echo
    947e:	80 91 ab 24 	lds	r24, 0x24AB
    9482:	90 91 ac 24 	lds	r25, 0x24AC
    9486:	80 71       	andi	r24, 0x10	; 16
    9488:	90 70       	andi	r25, 0x00	; 0
    948a:	00 97       	sbiw	r24, 0x00	; 0
    948c:	49 f0       	breq	.+18     	; 0x94a0 <_readln_char+0x76>
    948e:	80 91 b0 24 	lds	r24, 0x24B0
    9492:	20 91 8c 26 	lds	r18, 0x268C
    9496:	30 91 8d 26 	lds	r19, 0x268D
    949a:	b9 01       	movw	r22, r18
    949c:	0e 94 29 48 	call	0x9052	; 0x9052 <xio_putc_rs485>
	return (TG_EAGAIN);						// line is still in process
    94a0:	81 e0       	ldi	r24, 0x01	; 1
    94a2:	90 e0       	ldi	r25, 0x00	; 0
    94a4:	89 83       	std	Y+1, r24	; 0x01
    94a6:	9a 83       	std	Y+2, r25	; 0x02
    94a8:	89 81       	ldd	r24, Y+1	; 0x01
    94aa:	9a 81       	ldd	r25, Y+2	; 0x02
}
    94ac:	0f 90       	pop	r0
    94ae:	0f 90       	pop	r0
    94b0:	cf 91       	pop	r28
    94b2:	df 91       	pop	r29
    94b4:	08 95       	ret

000094b6 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles valid newline char
{
    94b6:	df 93       	push	r29
    94b8:	cf 93       	push	r28
    94ba:	cd b7       	in	r28, 0x3d	; 61
    94bc:	de b7       	in	r29, 0x3e	; 62
	RS.sig = XIO_SIG_EOL;
    94be:	82 e0       	ldi	r24, 0x02	; 2
    94c0:	80 93 af 24 	sts	0x24AF, r24
	RS.buf[RS.len] = NUL;
    94c4:	80 91 b1 24 	lds	r24, 0x24B1
    94c8:	88 2f       	mov	r24, r24
    94ca:	90 e0       	ldi	r25, 0x00	; 0
    94cc:	fc 01       	movw	r30, r24
    94ce:	e1 54       	subi	r30, 0x41	; 65
    94d0:	fb 4d       	sbci	r31, 0xDB	; 219
    94d2:	10 82       	st	Z, r1
	RS.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    94d4:	80 91 ab 24 	lds	r24, 0x24AB
    94d8:	90 91 ac 24 	lds	r25, 0x24AC
    94dc:	9f 7b       	andi	r25, 0xBF	; 191
    94de:	80 93 ab 24 	sts	0x24AB, r24
    94e2:	90 93 ac 24 	sts	0x24AC, r25
	if (ECHO(RS.flags)) xio_putc_rs485('\n',stdout);// echo a newline
    94e6:	80 91 ab 24 	lds	r24, 0x24AB
    94ea:	90 91 ac 24 	lds	r25, 0x24AC
    94ee:	80 71       	andi	r24, 0x10	; 16
    94f0:	90 70       	andi	r25, 0x00	; 0
    94f2:	00 97       	sbiw	r24, 0x00	; 0
    94f4:	41 f0       	breq	.+16     	; 0x9506 <_readln_NEWLINE+0x50>
    94f6:	20 91 8c 26 	lds	r18, 0x268C
    94fa:	30 91 8d 26 	lds	r19, 0x268D
    94fe:	8a e0       	ldi	r24, 0x0A	; 10
    9500:	b9 01       	movw	r22, r18
    9502:	0e 94 29 48 	call	0x9052	; 0x9052 <xio_putc_rs485>
	return 0;
    9506:	80 e0       	ldi	r24, 0x00	; 0
    9508:	90 e0       	ldi	r25, 0x00	; 0
}
    950a:	cf 91       	pop	r28
    950c:	df 91       	pop	r29
    950e:	08 95       	ret

00009510 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
    9510:	df 93       	push	r29
    9512:	cf 93       	push	r28
    9514:	0f 92       	push	r0
    9516:	0f 92       	push	r0
    9518:	cd b7       	in	r28, 0x3d	; 61
    951a:	de b7       	in	r29, 0x3e	; 62
	if (SEMICOLONS(RS.flags)) {
    951c:	80 91 ab 24 	lds	r24, 0x24AB
    9520:	90 91 ac 24 	lds	r25, 0x24AC
    9524:	80 78       	andi	r24, 0x80	; 128
    9526:	90 70       	andi	r25, 0x00	; 0
    9528:	00 97       	sbiw	r24, 0x00	; 0
    952a:	29 f0       	breq	.+10     	; 0x9536 <_readln_SEMICOLON+0x26>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    952c:	0e 94 5b 4a 	call	0x94b6	; 0x94b6 <_readln_NEWLINE>
    9530:	89 83       	std	Y+1, r24	; 0x01
    9532:	9a 83       	std	Y+2, r25	; 0x02
    9534:	04 c0       	rjmp	.+8      	; 0x953e <_readln_SEMICOLON+0x2e>
	} else {
		return (_readln_char());				// else treat as any other character
    9536:	0e 94 15 4a 	call	0x942a	; 0x942a <_readln_char>
    953a:	89 83       	std	Y+1, r24	; 0x01
    953c:	9a 83       	std	Y+2, r25	; 0x02
    953e:	89 81       	ldd	r24, Y+1	; 0x01
    9540:	9a 81       	ldd	r25, Y+2	; 0x02
	}
}
    9542:	0f 90       	pop	r0
    9544:	0f 90       	pop	r0
    9546:	cf 91       	pop	r28
    9548:	df 91       	pop	r29
    954a:	08 95       	ret

0000954c <_readln_DELETE>:

static int _readln_DELETE(void)
{
    954c:	df 93       	push	r29
    954e:	cf 93       	push	r28
    9550:	cd b7       	in	r28, 0x3d	; 61
    9552:	de b7       	in	r29, 0x3e	; 62
	if (--RS.len >= 0) {
    9554:	80 91 b1 24 	lds	r24, 0x24B1
    9558:	81 50       	subi	r24, 0x01	; 1
    955a:	80 93 b1 24 	sts	0x24B1, r24
		if (ECHO(RS.flags)) xio_putc_rs485(RS.c, stdout);
    955e:	80 91 ab 24 	lds	r24, 0x24AB
    9562:	90 91 ac 24 	lds	r25, 0x24AC
    9566:	80 71       	andi	r24, 0x10	; 16
    9568:	90 70       	andi	r25, 0x00	; 0
    956a:	00 97       	sbiw	r24, 0x00	; 0
    956c:	49 f0       	breq	.+18     	; 0x9580 <_readln_DELETE+0x34>
    956e:	80 91 b0 24 	lds	r24, 0x24B0
    9572:	20 91 8c 26 	lds	r18, 0x268C
    9576:	30 91 8d 26 	lds	r19, 0x268D
    957a:	b9 01       	movw	r22, r18
    957c:	0e 94 29 48 	call	0x9052	; 0x9052 <xio_putc_rs485>
	} else {
		RS.len = 0;
	}
	return (TG_EAGAIN);							// line is still in process
    9580:	81 e0       	ldi	r24, 0x01	; 1
    9582:	90 e0       	ldi	r25, 0x00	; 0
}
    9584:	cf 91       	pop	r28
    9586:	df 91       	pop	r29
    9588:	08 95       	ret

0000958a <_sig_KILL>:
/*
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
    958a:	df 93       	push	r29
    958c:	cf 93       	push	r28
    958e:	cd b7       	in	r28, 0x3d	; 61
    9590:	de b7       	in	r29, 0x3e	; 62
	RS.sig = XIO_SIG_KILL;
    9592:	84 e0       	ldi	r24, 0x04	; 4
    9594:	80 93 af 24 	sts	0x24AF, r24
	return(_FDEV_ERR);
    9598:	8f ef       	ldi	r24, 0xFF	; 255
    959a:	9f ef       	ldi	r25, 0xFF	; 255
}
    959c:	cf 91       	pop	r28
    959e:	df 91       	pop	r29
    95a0:	08 95       	ret

000095a2 <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
    95a2:	df 93       	push	r29
    95a4:	cf 93       	push	r28
    95a6:	cd b7       	in	r28, 0x3d	; 61
    95a8:	de b7       	in	r29, 0x3e	; 62
	RS.sig = XIO_SIG_PAUSE;
    95aa:	86 e0       	ldi	r24, 0x06	; 6
    95ac:	80 93 af 24 	sts	0x24AF, r24
	return(_FDEV_ERR);
    95b0:	8f ef       	ldi	r24, 0xFF	; 255
    95b2:	9f ef       	ldi	r25, 0xFF	; 255
}
    95b4:	cf 91       	pop	r28
    95b6:	df 91       	pop	r29
    95b8:	08 95       	ret

000095ba <_sig_RESUME>:

static int _sig_RESUME(void)
{
    95ba:	df 93       	push	r29
    95bc:	cf 93       	push	r28
    95be:	cd b7       	in	r28, 0x3d	; 61
    95c0:	de b7       	in	r29, 0x3e	; 62
	RS.sig = XIO_SIG_RESUME;
    95c2:	87 e0       	ldi	r24, 0x07	; 7
    95c4:	80 93 af 24 	sts	0x24AF, r24
	return(_FDEV_ERR);
    95c8:	8f ef       	ldi	r24, 0xFF	; 255
    95ca:	9f ef       	ldi	r25, 0xFF	; 255
}
    95cc:	cf 91       	pop	r28
    95ce:	df 91       	pop	r29
    95d0:	08 95       	ret

000095d2 <__udivdi3>:
    95d2:	ae e5       	ldi	r26, 0x5E	; 94
    95d4:	b0 e0       	ldi	r27, 0x00	; 0
    95d6:	ef ee       	ldi	r30, 0xEF	; 239
    95d8:	fa e4       	ldi	r31, 0x4A	; 74
    95da:	0c 94 7c 59 	jmp	0xb2f8	; 0xb2f8 <__prologue_saves__>
    95de:	a8 e0       	ldi	r26, 0x08	; 8
    95e0:	4e 01       	movw	r8, r28
    95e2:	08 94       	sec
    95e4:	81 1c       	adc	r8, r1
    95e6:	91 1c       	adc	r9, r1
    95e8:	f4 01       	movw	r30, r8
    95ea:	6a 2e       	mov	r6, r26
    95ec:	11 92       	st	Z+, r1
    95ee:	6a 94       	dec	r6
    95f0:	e9 f7       	brne	.-6      	; 0x95ec <__udivdi3+0x1a>
    95f2:	29 83       	std	Y+1, r18	; 0x01
    95f4:	3a 83       	std	Y+2, r19	; 0x02
    95f6:	4b 83       	std	Y+3, r20	; 0x03
    95f8:	5c 83       	std	Y+4, r21	; 0x04
    95fa:	6d 83       	std	Y+5, r22	; 0x05
    95fc:	7e 83       	std	Y+6, r23	; 0x06
    95fe:	8f 83       	std	Y+7, r24	; 0x07
    9600:	98 87       	std	Y+8, r25	; 0x08
    9602:	ce 01       	movw	r24, r28
    9604:	09 96       	adiw	r24, 0x09	; 9
    9606:	fc 01       	movw	r30, r24
    9608:	11 92       	st	Z+, r1
    960a:	aa 95       	dec	r26
    960c:	e9 f7       	brne	.-6      	; 0x9608 <__udivdi3+0x36>
    960e:	a9 86       	std	Y+9, r10	; 0x09
    9610:	ba 86       	std	Y+10, r11	; 0x0a
    9612:	cb 86       	std	Y+11, r12	; 0x0b
    9614:	dc 86       	std	Y+12, r13	; 0x0c
    9616:	ed 86       	std	Y+13, r14	; 0x0d
    9618:	fe 86       	std	Y+14, r15	; 0x0e
    961a:	0f 87       	std	Y+15, r16	; 0x0f
    961c:	18 8b       	std	Y+16, r17	; 0x10
    961e:	29 84       	ldd	r2, Y+9	; 0x09
    9620:	3a 84       	ldd	r3, Y+10	; 0x0a
    9622:	4b 84       	ldd	r4, Y+11	; 0x0b
    9624:	5c 84       	ldd	r5, Y+12	; 0x0c
    9626:	ed 84       	ldd	r14, Y+13	; 0x0d
    9628:	fe 84       	ldd	r15, Y+14	; 0x0e
    962a:	0f 85       	ldd	r16, Y+15	; 0x0f
    962c:	18 89       	ldd	r17, Y+16	; 0x10
    962e:	69 80       	ldd	r6, Y+1	; 0x01
    9630:	7a 80       	ldd	r7, Y+2	; 0x02
    9632:	8b 80       	ldd	r8, Y+3	; 0x03
    9634:	9c 80       	ldd	r9, Y+4	; 0x04
    9636:	6d a6       	std	Y+45, r6	; 0x2d
    9638:	7e a6       	std	Y+46, r7	; 0x2e
    963a:	8f a6       	std	Y+47, r8	; 0x2f
    963c:	98 aa       	std	Y+48, r9	; 0x30
    963e:	6d 80       	ldd	r6, Y+5	; 0x05
    9640:	7e 80       	ldd	r7, Y+6	; 0x06
    9642:	8f 80       	ldd	r8, Y+7	; 0x07
    9644:	98 84       	ldd	r9, Y+8	; 0x08
    9646:	e1 14       	cp	r14, r1
    9648:	f1 04       	cpc	r15, r1
    964a:	01 05       	cpc	r16, r1
    964c:	11 05       	cpc	r17, r1
    964e:	09 f0       	breq	.+2      	; 0x9652 <__udivdi3+0x80>
    9650:	b3 c3       	rjmp	.+1894   	; 0x9db8 <__udivdi3+0x7e6>
    9652:	62 14       	cp	r6, r2
    9654:	73 04       	cpc	r7, r3
    9656:	84 04       	cpc	r8, r4
    9658:	95 04       	cpc	r9, r5
    965a:	08 f0       	brcs	.+2      	; 0x965e <__udivdi3+0x8c>
    965c:	3d c1       	rjmp	.+634    	; 0x98d8 <__udivdi3+0x306>
    965e:	00 e0       	ldi	r16, 0x00	; 0
    9660:	20 16       	cp	r2, r16
    9662:	00 e0       	ldi	r16, 0x00	; 0
    9664:	30 06       	cpc	r3, r16
    9666:	01 e0       	ldi	r16, 0x01	; 1
    9668:	40 06       	cpc	r4, r16
    966a:	00 e0       	ldi	r16, 0x00	; 0
    966c:	50 06       	cpc	r5, r16
    966e:	88 f4       	brcc	.+34     	; 0x9692 <__udivdi3+0xc0>
    9670:	1f ef       	ldi	r17, 0xFF	; 255
    9672:	21 16       	cp	r2, r17
    9674:	31 04       	cpc	r3, r1
    9676:	41 04       	cpc	r4, r1
    9678:	51 04       	cpc	r5, r1
    967a:	39 f0       	breq	.+14     	; 0x968a <__udivdi3+0xb8>
    967c:	30 f0       	brcs	.+12     	; 0x968a <__udivdi3+0xb8>
    967e:	48 e0       	ldi	r20, 0x08	; 8
    9680:	e4 2e       	mov	r14, r20
    9682:	f1 2c       	mov	r15, r1
    9684:	01 2d       	mov	r16, r1
    9686:	11 2d       	mov	r17, r1
    9688:	18 c0       	rjmp	.+48     	; 0x96ba <__udivdi3+0xe8>
    968a:	ee 24       	eor	r14, r14
    968c:	ff 24       	eor	r15, r15
    968e:	87 01       	movw	r16, r14
    9690:	14 c0       	rjmp	.+40     	; 0x96ba <__udivdi3+0xe8>
    9692:	20 e0       	ldi	r18, 0x00	; 0
    9694:	22 16       	cp	r2, r18
    9696:	20 e0       	ldi	r18, 0x00	; 0
    9698:	32 06       	cpc	r3, r18
    969a:	20 e0       	ldi	r18, 0x00	; 0
    969c:	42 06       	cpc	r4, r18
    969e:	21 e0       	ldi	r18, 0x01	; 1
    96a0:	52 06       	cpc	r5, r18
    96a2:	30 f0       	brcs	.+12     	; 0x96b0 <__udivdi3+0xde>
    96a4:	38 e1       	ldi	r19, 0x18	; 24
    96a6:	e3 2e       	mov	r14, r19
    96a8:	f1 2c       	mov	r15, r1
    96aa:	01 2d       	mov	r16, r1
    96ac:	11 2d       	mov	r17, r1
    96ae:	05 c0       	rjmp	.+10     	; 0x96ba <__udivdi3+0xe8>
    96b0:	20 e1       	ldi	r18, 0x10	; 16
    96b2:	e2 2e       	mov	r14, r18
    96b4:	f1 2c       	mov	r15, r1
    96b6:	01 2d       	mov	r16, r1
    96b8:	11 2d       	mov	r17, r1
    96ba:	d2 01       	movw	r26, r4
    96bc:	c1 01       	movw	r24, r2
    96be:	0e 2c       	mov	r0, r14
    96c0:	04 c0       	rjmp	.+8      	; 0x96ca <__udivdi3+0xf8>
    96c2:	b6 95       	lsr	r27
    96c4:	a7 95       	ror	r26
    96c6:	97 95       	ror	r25
    96c8:	87 95       	ror	r24
    96ca:	0a 94       	dec	r0
    96cc:	d2 f7       	brpl	.-12     	; 0x96c2 <__udivdi3+0xf0>
    96ce:	80 50       	subi	r24, 0x00	; 0
    96d0:	90 4e       	sbci	r25, 0xE0	; 224
    96d2:	dc 01       	movw	r26, r24
    96d4:	2c 91       	ld	r18, X
    96d6:	80 e2       	ldi	r24, 0x20	; 32
    96d8:	90 e0       	ldi	r25, 0x00	; 0
    96da:	a0 e0       	ldi	r26, 0x00	; 0
    96dc:	b0 e0       	ldi	r27, 0x00	; 0
    96de:	8e 19       	sub	r24, r14
    96e0:	9f 09       	sbc	r25, r15
    96e2:	a0 0b       	sbc	r26, r16
    96e4:	b1 0b       	sbc	r27, r17
    96e6:	7c 01       	movw	r14, r24
    96e8:	8d 01       	movw	r16, r26
    96ea:	e2 1a       	sub	r14, r18
    96ec:	f1 08       	sbc	r15, r1
    96ee:	01 09       	sbc	r16, r1
    96f0:	11 09       	sbc	r17, r1
    96f2:	e1 14       	cp	r14, r1
    96f4:	f1 04       	cpc	r15, r1
    96f6:	01 05       	cpc	r16, r1
    96f8:	11 05       	cpc	r17, r1
    96fa:	a1 f1       	breq	.+104    	; 0x9764 <__udivdi3+0x192>
    96fc:	0e 2c       	mov	r0, r14
    96fe:	04 c0       	rjmp	.+8      	; 0x9708 <__udivdi3+0x136>
    9700:	22 0c       	add	r2, r2
    9702:	33 1c       	adc	r3, r3
    9704:	44 1c       	adc	r4, r4
    9706:	55 1c       	adc	r5, r5
    9708:	0a 94       	dec	r0
    970a:	d2 f7       	brpl	.-12     	; 0x9700 <__udivdi3+0x12e>
    970c:	a4 01       	movw	r20, r8
    970e:	93 01       	movw	r18, r6
    9710:	0e 2c       	mov	r0, r14
    9712:	04 c0       	rjmp	.+8      	; 0x971c <__udivdi3+0x14a>
    9714:	22 0f       	add	r18, r18
    9716:	33 1f       	adc	r19, r19
    9718:	44 1f       	adc	r20, r20
    971a:	55 1f       	adc	r21, r21
    971c:	0a 94       	dec	r0
    971e:	d2 f7       	brpl	.-12     	; 0x9714 <__udivdi3+0x142>
    9720:	80 e2       	ldi	r24, 0x20	; 32
    9722:	90 e0       	ldi	r25, 0x00	; 0
    9724:	8e 19       	sub	r24, r14
    9726:	9f 09       	sbc	r25, r15
    9728:	6d a4       	ldd	r6, Y+45	; 0x2d
    972a:	7e a4       	ldd	r7, Y+46	; 0x2e
    972c:	8f a4       	ldd	r8, Y+47	; 0x2f
    972e:	98 a8       	ldd	r9, Y+48	; 0x30
    9730:	04 c0       	rjmp	.+8      	; 0x973a <__udivdi3+0x168>
    9732:	96 94       	lsr	r9
    9734:	87 94       	ror	r8
    9736:	77 94       	ror	r7
    9738:	67 94       	ror	r6
    973a:	8a 95       	dec	r24
    973c:	d2 f7       	brpl	.-12     	; 0x9732 <__udivdi3+0x160>
    973e:	62 2a       	or	r6, r18
    9740:	73 2a       	or	r7, r19
    9742:	84 2a       	or	r8, r20
    9744:	95 2a       	or	r9, r21
    9746:	ad a4       	ldd	r10, Y+45	; 0x2d
    9748:	be a4       	ldd	r11, Y+46	; 0x2e
    974a:	cf a4       	ldd	r12, Y+47	; 0x2f
    974c:	d8 a8       	ldd	r13, Y+48	; 0x30
    974e:	04 c0       	rjmp	.+8      	; 0x9758 <__udivdi3+0x186>
    9750:	aa 0c       	add	r10, r10
    9752:	bb 1c       	adc	r11, r11
    9754:	cc 1c       	adc	r12, r12
    9756:	dd 1c       	adc	r13, r13
    9758:	ea 94       	dec	r14
    975a:	d2 f7       	brpl	.-12     	; 0x9750 <__udivdi3+0x17e>
    975c:	ad a6       	std	Y+45, r10	; 0x2d
    975e:	be a6       	std	Y+46, r11	; 0x2e
    9760:	cf a6       	std	Y+47, r12	; 0x2f
    9762:	d8 aa       	std	Y+48, r13	; 0x30
    9764:	62 01       	movw	r12, r4
    9766:	ee 24       	eor	r14, r14
    9768:	ff 24       	eor	r15, r15
    976a:	cd aa       	std	Y+53, r12	; 0x35
    976c:	de aa       	std	Y+54, r13	; 0x36
    976e:	ef aa       	std	Y+55, r14	; 0x37
    9770:	f8 ae       	std	Y+56, r15	; 0x38
    9772:	92 01       	movw	r18, r4
    9774:	81 01       	movw	r16, r2
    9776:	20 70       	andi	r18, 0x00	; 0
    9778:	30 70       	andi	r19, 0x00	; 0
    977a:	09 af       	std	Y+57, r16	; 0x39
    977c:	1a af       	std	Y+58, r17	; 0x3a
    977e:	2b af       	std	Y+59, r18	; 0x3b
    9780:	3c af       	std	Y+60, r19	; 0x3c
    9782:	c4 01       	movw	r24, r8
    9784:	b3 01       	movw	r22, r6
    9786:	a7 01       	movw	r20, r14
    9788:	96 01       	movw	r18, r12
    978a:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <__udivmodsi4>
    978e:	7b 01       	movw	r14, r22
    9790:	8c 01       	movw	r16, r24
    9792:	c4 01       	movw	r24, r8
    9794:	b3 01       	movw	r22, r6
    9796:	2d a9       	ldd	r18, Y+53	; 0x35
    9798:	3e a9       	ldd	r19, Y+54	; 0x36
    979a:	4f a9       	ldd	r20, Y+55	; 0x37
    979c:	58 ad       	ldd	r21, Y+56	; 0x38
    979e:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <__udivmodsi4>
    97a2:	c9 01       	movw	r24, r18
    97a4:	da 01       	movw	r26, r20
    97a6:	3c 01       	movw	r6, r24
    97a8:	4d 01       	movw	r8, r26
    97aa:	c4 01       	movw	r24, r8
    97ac:	b3 01       	movw	r22, r6
    97ae:	29 ad       	ldd	r18, Y+57	; 0x39
    97b0:	3a ad       	ldd	r19, Y+58	; 0x3a
    97b2:	4b ad       	ldd	r20, Y+59	; 0x3b
    97b4:	5c ad       	ldd	r21, Y+60	; 0x3c
    97b6:	0e 94 3b 59 	call	0xb276	; 0xb276 <__mulsi3>
    97ba:	9b 01       	movw	r18, r22
    97bc:	ac 01       	movw	r20, r24
    97be:	87 01       	movw	r16, r14
    97c0:	ff 24       	eor	r15, r15
    97c2:	ee 24       	eor	r14, r14
    97c4:	ad a4       	ldd	r10, Y+45	; 0x2d
    97c6:	be a4       	ldd	r11, Y+46	; 0x2e
    97c8:	cf a4       	ldd	r12, Y+47	; 0x2f
    97ca:	d8 a8       	ldd	r13, Y+48	; 0x30
    97cc:	c6 01       	movw	r24, r12
    97ce:	aa 27       	eor	r26, r26
    97d0:	bb 27       	eor	r27, r27
    97d2:	57 01       	movw	r10, r14
    97d4:	68 01       	movw	r12, r16
    97d6:	a8 2a       	or	r10, r24
    97d8:	b9 2a       	or	r11, r25
    97da:	ca 2a       	or	r12, r26
    97dc:	db 2a       	or	r13, r27
    97de:	a2 16       	cp	r10, r18
    97e0:	b3 06       	cpc	r11, r19
    97e2:	c4 06       	cpc	r12, r20
    97e4:	d5 06       	cpc	r13, r21
    97e6:	e0 f4       	brcc	.+56     	; 0x9820 <__udivdi3+0x24e>
    97e8:	08 94       	sec
    97ea:	61 08       	sbc	r6, r1
    97ec:	71 08       	sbc	r7, r1
    97ee:	81 08       	sbc	r8, r1
    97f0:	91 08       	sbc	r9, r1
    97f2:	a2 0c       	add	r10, r2
    97f4:	b3 1c       	adc	r11, r3
    97f6:	c4 1c       	adc	r12, r4
    97f8:	d5 1c       	adc	r13, r5
    97fa:	a2 14       	cp	r10, r2
    97fc:	b3 04       	cpc	r11, r3
    97fe:	c4 04       	cpc	r12, r4
    9800:	d5 04       	cpc	r13, r5
    9802:	70 f0       	brcs	.+28     	; 0x9820 <__udivdi3+0x24e>
    9804:	a2 16       	cp	r10, r18
    9806:	b3 06       	cpc	r11, r19
    9808:	c4 06       	cpc	r12, r20
    980a:	d5 06       	cpc	r13, r21
    980c:	48 f4       	brcc	.+18     	; 0x9820 <__udivdi3+0x24e>
    980e:	08 94       	sec
    9810:	61 08       	sbc	r6, r1
    9812:	71 08       	sbc	r7, r1
    9814:	81 08       	sbc	r8, r1
    9816:	91 08       	sbc	r9, r1
    9818:	a2 0c       	add	r10, r2
    981a:	b3 1c       	adc	r11, r3
    981c:	c4 1c       	adc	r12, r4
    981e:	d5 1c       	adc	r13, r5
    9820:	a2 1a       	sub	r10, r18
    9822:	b3 0a       	sbc	r11, r19
    9824:	c4 0a       	sbc	r12, r20
    9826:	d5 0a       	sbc	r13, r21
    9828:	c6 01       	movw	r24, r12
    982a:	b5 01       	movw	r22, r10
    982c:	2d a9       	ldd	r18, Y+53	; 0x35
    982e:	3e a9       	ldd	r19, Y+54	; 0x36
    9830:	4f a9       	ldd	r20, Y+55	; 0x37
    9832:	58 ad       	ldd	r21, Y+56	; 0x38
    9834:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <__udivmodsi4>
    9838:	7b 01       	movw	r14, r22
    983a:	8c 01       	movw	r16, r24
    983c:	c6 01       	movw	r24, r12
    983e:	b5 01       	movw	r22, r10
    9840:	2d a9       	ldd	r18, Y+53	; 0x35
    9842:	3e a9       	ldd	r19, Y+54	; 0x36
    9844:	4f a9       	ldd	r20, Y+55	; 0x37
    9846:	58 ad       	ldd	r21, Y+56	; 0x38
    9848:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <__udivmodsi4>
    984c:	c9 01       	movw	r24, r18
    984e:	da 01       	movw	r26, r20
    9850:	5c 01       	movw	r10, r24
    9852:	6d 01       	movw	r12, r26
    9854:	c6 01       	movw	r24, r12
    9856:	b5 01       	movw	r22, r10
    9858:	29 ad       	ldd	r18, Y+57	; 0x39
    985a:	3a ad       	ldd	r19, Y+58	; 0x3a
    985c:	4b ad       	ldd	r20, Y+59	; 0x3b
    985e:	5c ad       	ldd	r21, Y+60	; 0x3c
    9860:	0e 94 3b 59 	call	0xb276	; 0xb276 <__mulsi3>
    9864:	9b 01       	movw	r18, r22
    9866:	ac 01       	movw	r20, r24
    9868:	87 01       	movw	r16, r14
    986a:	ff 24       	eor	r15, r15
    986c:	ee 24       	eor	r14, r14
    986e:	8d a5       	ldd	r24, Y+45	; 0x2d
    9870:	9e a5       	ldd	r25, Y+46	; 0x2e
    9872:	af a5       	ldd	r26, Y+47	; 0x2f
    9874:	b8 a9       	ldd	r27, Y+48	; 0x30
    9876:	a0 70       	andi	r26, 0x00	; 0
    9878:	b0 70       	andi	r27, 0x00	; 0
    987a:	e8 2a       	or	r14, r24
    987c:	f9 2a       	or	r15, r25
    987e:	0a 2b       	or	r16, r26
    9880:	1b 2b       	or	r17, r27
    9882:	e2 16       	cp	r14, r18
    9884:	f3 06       	cpc	r15, r19
    9886:	04 07       	cpc	r16, r20
    9888:	15 07       	cpc	r17, r21
    988a:	c0 f4       	brcc	.+48     	; 0x98bc <__udivdi3+0x2ea>
    988c:	08 94       	sec
    988e:	a1 08       	sbc	r10, r1
    9890:	b1 08       	sbc	r11, r1
    9892:	c1 08       	sbc	r12, r1
    9894:	d1 08       	sbc	r13, r1
    9896:	e2 0c       	add	r14, r2
    9898:	f3 1c       	adc	r15, r3
    989a:	04 1d       	adc	r16, r4
    989c:	15 1d       	adc	r17, r5
    989e:	e2 14       	cp	r14, r2
    98a0:	f3 04       	cpc	r15, r3
    98a2:	04 05       	cpc	r16, r4
    98a4:	15 05       	cpc	r17, r5
    98a6:	50 f0       	brcs	.+20     	; 0x98bc <__udivdi3+0x2ea>
    98a8:	e2 16       	cp	r14, r18
    98aa:	f3 06       	cpc	r15, r19
    98ac:	04 07       	cpc	r16, r20
    98ae:	15 07       	cpc	r17, r21
    98b0:	28 f4       	brcc	.+10     	; 0x98bc <__udivdi3+0x2ea>
    98b2:	08 94       	sec
    98b4:	a1 08       	sbc	r10, r1
    98b6:	b1 08       	sbc	r11, r1
    98b8:	c1 08       	sbc	r12, r1
    98ba:	d1 08       	sbc	r13, r1
    98bc:	d3 01       	movw	r26, r6
    98be:	99 27       	eor	r25, r25
    98c0:	88 27       	eor	r24, r24
    98c2:	86 01       	movw	r16, r12
    98c4:	75 01       	movw	r14, r10
    98c6:	e8 2a       	or	r14, r24
    98c8:	f9 2a       	or	r15, r25
    98ca:	0a 2b       	or	r16, r26
    98cc:	1b 2b       	or	r17, r27
    98ce:	e9 aa       	std	Y+49, r14	; 0x31
    98d0:	fa aa       	std	Y+50, r15	; 0x32
    98d2:	0b ab       	std	Y+51, r16	; 0x33
    98d4:	1c ab       	std	Y+52, r17	; 0x34
    98d6:	cf c4       	rjmp	.+2462   	; 0xa276 <__udivdi3+0xca4>
    98d8:	21 14       	cp	r2, r1
    98da:	31 04       	cpc	r3, r1
    98dc:	41 04       	cpc	r4, r1
    98de:	51 04       	cpc	r5, r1
    98e0:	71 f4       	brne	.+28     	; 0x98fe <__udivdi3+0x32c>
    98e2:	61 e0       	ldi	r22, 0x01	; 1
    98e4:	70 e0       	ldi	r23, 0x00	; 0
    98e6:	80 e0       	ldi	r24, 0x00	; 0
    98e8:	90 e0       	ldi	r25, 0x00	; 0
    98ea:	20 e0       	ldi	r18, 0x00	; 0
    98ec:	30 e0       	ldi	r19, 0x00	; 0
    98ee:	40 e0       	ldi	r20, 0x00	; 0
    98f0:	50 e0       	ldi	r21, 0x00	; 0
    98f2:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <__udivmodsi4>
    98f6:	c9 01       	movw	r24, r18
    98f8:	da 01       	movw	r26, r20
    98fa:	1c 01       	movw	r2, r24
    98fc:	2d 01       	movw	r4, r26
    98fe:	00 e0       	ldi	r16, 0x00	; 0
    9900:	20 16       	cp	r2, r16
    9902:	00 e0       	ldi	r16, 0x00	; 0
    9904:	30 06       	cpc	r3, r16
    9906:	01 e0       	ldi	r16, 0x01	; 1
    9908:	40 06       	cpc	r4, r16
    990a:	00 e0       	ldi	r16, 0x00	; 0
    990c:	50 06       	cpc	r5, r16
    990e:	88 f4       	brcc	.+34     	; 0x9932 <__udivdi3+0x360>
    9910:	1f ef       	ldi	r17, 0xFF	; 255
    9912:	21 16       	cp	r2, r17
    9914:	31 04       	cpc	r3, r1
    9916:	41 04       	cpc	r4, r1
    9918:	51 04       	cpc	r5, r1
    991a:	31 f0       	breq	.+12     	; 0x9928 <__udivdi3+0x356>
    991c:	28 f0       	brcs	.+10     	; 0x9928 <__udivdi3+0x356>
    991e:	48 e0       	ldi	r20, 0x08	; 8
    9920:	50 e0       	ldi	r21, 0x00	; 0
    9922:	60 e0       	ldi	r22, 0x00	; 0
    9924:	70 e0       	ldi	r23, 0x00	; 0
    9926:	17 c0       	rjmp	.+46     	; 0x9956 <__udivdi3+0x384>
    9928:	40 e0       	ldi	r20, 0x00	; 0
    992a:	50 e0       	ldi	r21, 0x00	; 0
    992c:	60 e0       	ldi	r22, 0x00	; 0
    992e:	70 e0       	ldi	r23, 0x00	; 0
    9930:	12 c0       	rjmp	.+36     	; 0x9956 <__udivdi3+0x384>
    9932:	20 e0       	ldi	r18, 0x00	; 0
    9934:	22 16       	cp	r2, r18
    9936:	20 e0       	ldi	r18, 0x00	; 0
    9938:	32 06       	cpc	r3, r18
    993a:	20 e0       	ldi	r18, 0x00	; 0
    993c:	42 06       	cpc	r4, r18
    993e:	21 e0       	ldi	r18, 0x01	; 1
    9940:	52 06       	cpc	r5, r18
    9942:	28 f0       	brcs	.+10     	; 0x994e <__udivdi3+0x37c>
    9944:	48 e1       	ldi	r20, 0x18	; 24
    9946:	50 e0       	ldi	r21, 0x00	; 0
    9948:	60 e0       	ldi	r22, 0x00	; 0
    994a:	70 e0       	ldi	r23, 0x00	; 0
    994c:	04 c0       	rjmp	.+8      	; 0x9956 <__udivdi3+0x384>
    994e:	40 e1       	ldi	r20, 0x10	; 16
    9950:	50 e0       	ldi	r21, 0x00	; 0
    9952:	60 e0       	ldi	r22, 0x00	; 0
    9954:	70 e0       	ldi	r23, 0x00	; 0
    9956:	d2 01       	movw	r26, r4
    9958:	c1 01       	movw	r24, r2
    995a:	04 2e       	mov	r0, r20
    995c:	04 c0       	rjmp	.+8      	; 0x9966 <__udivdi3+0x394>
    995e:	b6 95       	lsr	r27
    9960:	a7 95       	ror	r26
    9962:	97 95       	ror	r25
    9964:	87 95       	ror	r24
    9966:	0a 94       	dec	r0
    9968:	d2 f7       	brpl	.-12     	; 0x995e <__udivdi3+0x38c>
    996a:	80 50       	subi	r24, 0x00	; 0
    996c:	90 4e       	sbci	r25, 0xE0	; 224
    996e:	dc 01       	movw	r26, r24
    9970:	2c 91       	ld	r18, X
    9972:	e0 e2       	ldi	r30, 0x20	; 32
    9974:	ee 2e       	mov	r14, r30
    9976:	f1 2c       	mov	r15, r1
    9978:	01 2d       	mov	r16, r1
    997a:	11 2d       	mov	r17, r1
    997c:	d8 01       	movw	r26, r16
    997e:	c7 01       	movw	r24, r14
    9980:	84 1b       	sub	r24, r20
    9982:	95 0b       	sbc	r25, r21
    9984:	a6 0b       	sbc	r26, r22
    9986:	b7 0b       	sbc	r27, r23
    9988:	82 1b       	sub	r24, r18
    998a:	91 09       	sbc	r25, r1
    998c:	a1 09       	sbc	r26, r1
    998e:	b1 09       	sbc	r27, r1
    9990:	00 97       	sbiw	r24, 0x00	; 0
    9992:	a1 05       	cpc	r26, r1
    9994:	b1 05       	cpc	r27, r1
    9996:	61 f4       	brne	.+24     	; 0x99b0 <__udivdi3+0x3de>
    9998:	64 01       	movw	r12, r8
    999a:	53 01       	movw	r10, r6
    999c:	a2 18       	sub	r10, r2
    999e:	b3 08       	sbc	r11, r3
    99a0:	c4 08       	sbc	r12, r4
    99a2:	d5 08       	sbc	r13, r5
    99a4:	31 e0       	ldi	r19, 0x01	; 1
    99a6:	63 2e       	mov	r6, r19
    99a8:	71 2c       	mov	r7, r1
    99aa:	81 2c       	mov	r8, r1
    99ac:	91 2c       	mov	r9, r1
    99ae:	1e c1       	rjmp	.+572    	; 0x9bec <__udivdi3+0x61a>
    99b0:	6f 96       	adiw	r28, 0x1f	; 31
    99b2:	8f af       	std	Y+63, r24	; 0x3f
    99b4:	6f 97       	sbiw	r28, 0x1f	; 31
    99b6:	08 2e       	mov	r0, r24
    99b8:	04 c0       	rjmp	.+8      	; 0x99c2 <__udivdi3+0x3f0>
    99ba:	22 0c       	add	r2, r2
    99bc:	33 1c       	adc	r3, r3
    99be:	44 1c       	adc	r4, r4
    99c0:	55 1c       	adc	r5, r5
    99c2:	0a 94       	dec	r0
    99c4:	d2 f7       	brpl	.-12     	; 0x99ba <__udivdi3+0x3e8>
    99c6:	ee 2d       	mov	r30, r14
    99c8:	e8 1b       	sub	r30, r24
    99ca:	64 01       	movw	r12, r8
    99cc:	53 01       	movw	r10, r6
    99ce:	0e 2e       	mov	r0, r30
    99d0:	04 c0       	rjmp	.+8      	; 0x99da <__udivdi3+0x408>
    99d2:	d6 94       	lsr	r13
    99d4:	c7 94       	ror	r12
    99d6:	b7 94       	ror	r11
    99d8:	a7 94       	ror	r10
    99da:	0a 94       	dec	r0
    99dc:	d2 f7       	brpl	.-12     	; 0x99d2 <__udivdi3+0x400>
    99de:	a4 01       	movw	r20, r8
    99e0:	93 01       	movw	r18, r6
    99e2:	6f 96       	adiw	r28, 0x1f	; 31
    99e4:	0f ac       	ldd	r0, Y+63	; 0x3f
    99e6:	6f 97       	sbiw	r28, 0x1f	; 31
    99e8:	04 c0       	rjmp	.+8      	; 0x99f2 <__udivdi3+0x420>
    99ea:	22 0f       	add	r18, r18
    99ec:	33 1f       	adc	r19, r19
    99ee:	44 1f       	adc	r20, r20
    99f0:	55 1f       	adc	r21, r21
    99f2:	0a 94       	dec	r0
    99f4:	d2 f7       	brpl	.-12     	; 0x99ea <__udivdi3+0x418>
    99f6:	6d a4       	ldd	r6, Y+45	; 0x2d
    99f8:	7e a4       	ldd	r7, Y+46	; 0x2e
    99fa:	8f a4       	ldd	r8, Y+47	; 0x2f
    99fc:	98 a8       	ldd	r9, Y+48	; 0x30
    99fe:	0e 2e       	mov	r0, r30
    9a00:	04 c0       	rjmp	.+8      	; 0x9a0a <__udivdi3+0x438>
    9a02:	96 94       	lsr	r9
    9a04:	87 94       	ror	r8
    9a06:	77 94       	ror	r7
    9a08:	67 94       	ror	r6
    9a0a:	0a 94       	dec	r0
    9a0c:	d2 f7       	brpl	.-12     	; 0x9a02 <__udivdi3+0x430>
    9a0e:	84 01       	movw	r16, r8
    9a10:	73 01       	movw	r14, r6
    9a12:	e2 2a       	or	r14, r18
    9a14:	f3 2a       	or	r15, r19
    9a16:	04 2b       	or	r16, r20
    9a18:	15 2b       	or	r17, r21
    9a1a:	e9 a6       	std	Y+41, r14	; 0x29
    9a1c:	fa a6       	std	Y+42, r15	; 0x2a
    9a1e:	0b a7       	std	Y+43, r16	; 0x2b
    9a20:	1c a7       	std	Y+44, r17	; 0x2c
    9a22:	32 01       	movw	r6, r4
    9a24:	88 24       	eor	r8, r8
    9a26:	99 24       	eor	r9, r9
    9a28:	92 01       	movw	r18, r4
    9a2a:	81 01       	movw	r16, r2
    9a2c:	20 70       	andi	r18, 0x00	; 0
    9a2e:	30 70       	andi	r19, 0x00	; 0
    9a30:	21 96       	adiw	r28, 0x01	; 1
    9a32:	0c af       	std	Y+60, r16	; 0x3c
    9a34:	1d af       	std	Y+61, r17	; 0x3d
    9a36:	2e af       	std	Y+62, r18	; 0x3e
    9a38:	3f af       	std	Y+63, r19	; 0x3f
    9a3a:	21 97       	sbiw	r28, 0x01	; 1
    9a3c:	c6 01       	movw	r24, r12
    9a3e:	b5 01       	movw	r22, r10
    9a40:	a4 01       	movw	r20, r8
    9a42:	93 01       	movw	r18, r6
    9a44:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <__udivmodsi4>
    9a48:	7b 01       	movw	r14, r22
    9a4a:	8c 01       	movw	r16, r24
    9a4c:	c6 01       	movw	r24, r12
    9a4e:	b5 01       	movw	r22, r10
    9a50:	a4 01       	movw	r20, r8
    9a52:	93 01       	movw	r18, r6
    9a54:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <__udivmodsi4>
    9a58:	c9 01       	movw	r24, r18
    9a5a:	da 01       	movw	r26, r20
    9a5c:	25 96       	adiw	r28, 0x05	; 5
    9a5e:	8c af       	std	Y+60, r24	; 0x3c
    9a60:	9d af       	std	Y+61, r25	; 0x3d
    9a62:	ae af       	std	Y+62, r26	; 0x3e
    9a64:	bf af       	std	Y+63, r27	; 0x3f
    9a66:	25 97       	sbiw	r28, 0x05	; 5
    9a68:	bc 01       	movw	r22, r24
    9a6a:	cd 01       	movw	r24, r26
    9a6c:	21 96       	adiw	r28, 0x01	; 1
    9a6e:	2c ad       	ldd	r18, Y+60	; 0x3c
    9a70:	3d ad       	ldd	r19, Y+61	; 0x3d
    9a72:	4e ad       	ldd	r20, Y+62	; 0x3e
    9a74:	5f ad       	ldd	r21, Y+63	; 0x3f
    9a76:	21 97       	sbiw	r28, 0x01	; 1
    9a78:	0e 94 3b 59 	call	0xb276	; 0xb276 <__mulsi3>
    9a7c:	9b 01       	movw	r18, r22
    9a7e:	ac 01       	movw	r20, r24
    9a80:	87 01       	movw	r16, r14
    9a82:	ff 24       	eor	r15, r15
    9a84:	ee 24       	eor	r14, r14
    9a86:	a9 a4       	ldd	r10, Y+41	; 0x29
    9a88:	ba a4       	ldd	r11, Y+42	; 0x2a
    9a8a:	cb a4       	ldd	r12, Y+43	; 0x2b
    9a8c:	dc a4       	ldd	r13, Y+44	; 0x2c
    9a8e:	c6 01       	movw	r24, r12
    9a90:	aa 27       	eor	r26, r26
    9a92:	bb 27       	eor	r27, r27
    9a94:	5c 01       	movw	r10, r24
    9a96:	6d 01       	movw	r12, r26
    9a98:	ae 28       	or	r10, r14
    9a9a:	bf 28       	or	r11, r15
    9a9c:	c0 2a       	or	r12, r16
    9a9e:	d1 2a       	or	r13, r17
    9aa0:	a2 16       	cp	r10, r18
    9aa2:	b3 06       	cpc	r11, r19
    9aa4:	c4 06       	cpc	r12, r20
    9aa6:	d5 06       	cpc	r13, r21
    9aa8:	60 f5       	brcc	.+88     	; 0x9b02 <__udivdi3+0x530>
    9aaa:	25 96       	adiw	r28, 0x05	; 5
    9aac:	6c ad       	ldd	r22, Y+60	; 0x3c
    9aae:	7d ad       	ldd	r23, Y+61	; 0x3d
    9ab0:	8e ad       	ldd	r24, Y+62	; 0x3e
    9ab2:	9f ad       	ldd	r25, Y+63	; 0x3f
    9ab4:	25 97       	sbiw	r28, 0x05	; 5
    9ab6:	61 50       	subi	r22, 0x01	; 1
    9ab8:	70 40       	sbci	r23, 0x00	; 0
    9aba:	80 40       	sbci	r24, 0x00	; 0
    9abc:	90 40       	sbci	r25, 0x00	; 0
    9abe:	25 96       	adiw	r28, 0x05	; 5
    9ac0:	6c af       	std	Y+60, r22	; 0x3c
    9ac2:	7d af       	std	Y+61, r23	; 0x3d
    9ac4:	8e af       	std	Y+62, r24	; 0x3e
    9ac6:	9f af       	std	Y+63, r25	; 0x3f
    9ac8:	25 97       	sbiw	r28, 0x05	; 5
    9aca:	a2 0c       	add	r10, r2
    9acc:	b3 1c       	adc	r11, r3
    9ace:	c4 1c       	adc	r12, r4
    9ad0:	d5 1c       	adc	r13, r5
    9ad2:	a2 14       	cp	r10, r2
    9ad4:	b3 04       	cpc	r11, r3
    9ad6:	c4 04       	cpc	r12, r4
    9ad8:	d5 04       	cpc	r13, r5
    9ada:	98 f0       	brcs	.+38     	; 0x9b02 <__udivdi3+0x530>
    9adc:	a2 16       	cp	r10, r18
    9ade:	b3 06       	cpc	r11, r19
    9ae0:	c4 06       	cpc	r12, r20
    9ae2:	d5 06       	cpc	r13, r21
    9ae4:	70 f4       	brcc	.+28     	; 0x9b02 <__udivdi3+0x530>
    9ae6:	61 50       	subi	r22, 0x01	; 1
    9ae8:	70 40       	sbci	r23, 0x00	; 0
    9aea:	80 40       	sbci	r24, 0x00	; 0
    9aec:	90 40       	sbci	r25, 0x00	; 0
    9aee:	25 96       	adiw	r28, 0x05	; 5
    9af0:	6c af       	std	Y+60, r22	; 0x3c
    9af2:	7d af       	std	Y+61, r23	; 0x3d
    9af4:	8e af       	std	Y+62, r24	; 0x3e
    9af6:	9f af       	std	Y+63, r25	; 0x3f
    9af8:	25 97       	sbiw	r28, 0x05	; 5
    9afa:	a2 0c       	add	r10, r2
    9afc:	b3 1c       	adc	r11, r3
    9afe:	c4 1c       	adc	r12, r4
    9b00:	d5 1c       	adc	r13, r5
    9b02:	a2 1a       	sub	r10, r18
    9b04:	b3 0a       	sbc	r11, r19
    9b06:	c4 0a       	sbc	r12, r20
    9b08:	d5 0a       	sbc	r13, r21
    9b0a:	c6 01       	movw	r24, r12
    9b0c:	b5 01       	movw	r22, r10
    9b0e:	a4 01       	movw	r20, r8
    9b10:	93 01       	movw	r18, r6
    9b12:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <__udivmodsi4>
    9b16:	7b 01       	movw	r14, r22
    9b18:	8c 01       	movw	r16, r24
    9b1a:	c6 01       	movw	r24, r12
    9b1c:	b5 01       	movw	r22, r10
    9b1e:	a4 01       	movw	r20, r8
    9b20:	93 01       	movw	r18, r6
    9b22:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <__udivmodsi4>
    9b26:	c9 01       	movw	r24, r18
    9b28:	da 01       	movw	r26, r20
    9b2a:	3c 01       	movw	r6, r24
    9b2c:	4d 01       	movw	r8, r26
    9b2e:	c4 01       	movw	r24, r8
    9b30:	b3 01       	movw	r22, r6
    9b32:	21 96       	adiw	r28, 0x01	; 1
    9b34:	2c ad       	ldd	r18, Y+60	; 0x3c
    9b36:	3d ad       	ldd	r19, Y+61	; 0x3d
    9b38:	4e ad       	ldd	r20, Y+62	; 0x3e
    9b3a:	5f ad       	ldd	r21, Y+63	; 0x3f
    9b3c:	21 97       	sbiw	r28, 0x01	; 1
    9b3e:	0e 94 3b 59 	call	0xb276	; 0xb276 <__mulsi3>
    9b42:	9b 01       	movw	r18, r22
    9b44:	ac 01       	movw	r20, r24
    9b46:	87 01       	movw	r16, r14
    9b48:	ff 24       	eor	r15, r15
    9b4a:	ee 24       	eor	r14, r14
    9b4c:	89 a5       	ldd	r24, Y+41	; 0x29
    9b4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    9b50:	ab a5       	ldd	r26, Y+43	; 0x2b
    9b52:	bc a5       	ldd	r27, Y+44	; 0x2c
    9b54:	a0 70       	andi	r26, 0x00	; 0
    9b56:	b0 70       	andi	r27, 0x00	; 0
    9b58:	57 01       	movw	r10, r14
    9b5a:	68 01       	movw	r12, r16
    9b5c:	a8 2a       	or	r10, r24
    9b5e:	b9 2a       	or	r11, r25
    9b60:	ca 2a       	or	r12, r26
    9b62:	db 2a       	or	r13, r27
    9b64:	a2 16       	cp	r10, r18
    9b66:	b3 06       	cpc	r11, r19
    9b68:	c4 06       	cpc	r12, r20
    9b6a:	d5 06       	cpc	r13, r21
    9b6c:	e0 f4       	brcc	.+56     	; 0x9ba6 <__udivdi3+0x5d4>
    9b6e:	08 94       	sec
    9b70:	61 08       	sbc	r6, r1
    9b72:	71 08       	sbc	r7, r1
    9b74:	81 08       	sbc	r8, r1
    9b76:	91 08       	sbc	r9, r1
    9b78:	a2 0c       	add	r10, r2
    9b7a:	b3 1c       	adc	r11, r3
    9b7c:	c4 1c       	adc	r12, r4
    9b7e:	d5 1c       	adc	r13, r5
    9b80:	a2 14       	cp	r10, r2
    9b82:	b3 04       	cpc	r11, r3
    9b84:	c4 04       	cpc	r12, r4
    9b86:	d5 04       	cpc	r13, r5
    9b88:	70 f0       	brcs	.+28     	; 0x9ba6 <__udivdi3+0x5d4>
    9b8a:	a2 16       	cp	r10, r18
    9b8c:	b3 06       	cpc	r11, r19
    9b8e:	c4 06       	cpc	r12, r20
    9b90:	d5 06       	cpc	r13, r21
    9b92:	48 f4       	brcc	.+18     	; 0x9ba6 <__udivdi3+0x5d4>
    9b94:	08 94       	sec
    9b96:	61 08       	sbc	r6, r1
    9b98:	71 08       	sbc	r7, r1
    9b9a:	81 08       	sbc	r8, r1
    9b9c:	91 08       	sbc	r9, r1
    9b9e:	a2 0c       	add	r10, r2
    9ba0:	b3 1c       	adc	r11, r3
    9ba2:	c4 1c       	adc	r12, r4
    9ba4:	d5 1c       	adc	r13, r5
    9ba6:	8d a5       	ldd	r24, Y+45	; 0x2d
    9ba8:	9e a5       	ldd	r25, Y+46	; 0x2e
    9baa:	af a5       	ldd	r26, Y+47	; 0x2f
    9bac:	b8 a9       	ldd	r27, Y+48	; 0x30
    9bae:	6f 96       	adiw	r28, 0x1f	; 31
    9bb0:	0f ac       	ldd	r0, Y+63	; 0x3f
    9bb2:	6f 97       	sbiw	r28, 0x1f	; 31
    9bb4:	04 c0       	rjmp	.+8      	; 0x9bbe <__udivdi3+0x5ec>
    9bb6:	88 0f       	add	r24, r24
    9bb8:	99 1f       	adc	r25, r25
    9bba:	aa 1f       	adc	r26, r26
    9bbc:	bb 1f       	adc	r27, r27
    9bbe:	0a 94       	dec	r0
    9bc0:	d2 f7       	brpl	.-12     	; 0x9bb6 <__udivdi3+0x5e4>
    9bc2:	8d a7       	std	Y+45, r24	; 0x2d
    9bc4:	9e a7       	std	Y+46, r25	; 0x2e
    9bc6:	af a7       	std	Y+47, r26	; 0x2f
    9bc8:	b8 ab       	std	Y+48, r27	; 0x30
    9bca:	a2 1a       	sub	r10, r18
    9bcc:	b3 0a       	sbc	r11, r19
    9bce:	c4 0a       	sbc	r12, r20
    9bd0:	d5 0a       	sbc	r13, r21
    9bd2:	25 96       	adiw	r28, 0x05	; 5
    9bd4:	ec ac       	ldd	r14, Y+60	; 0x3c
    9bd6:	fd ac       	ldd	r15, Y+61	; 0x3d
    9bd8:	0e ad       	ldd	r16, Y+62	; 0x3e
    9bda:	1f ad       	ldd	r17, Y+63	; 0x3f
    9bdc:	25 97       	sbiw	r28, 0x05	; 5
    9bde:	d7 01       	movw	r26, r14
    9be0:	99 27       	eor	r25, r25
    9be2:	88 27       	eor	r24, r24
    9be4:	68 2a       	or	r6, r24
    9be6:	79 2a       	or	r7, r25
    9be8:	8a 2a       	or	r8, r26
    9bea:	9b 2a       	or	r9, r27
    9bec:	82 01       	movw	r16, r4
    9bee:	22 27       	eor	r18, r18
    9bf0:	33 27       	eor	r19, r19
    9bf2:	29 96       	adiw	r28, 0x09	; 9
    9bf4:	0c af       	std	Y+60, r16	; 0x3c
    9bf6:	1d af       	std	Y+61, r17	; 0x3d
    9bf8:	2e af       	std	Y+62, r18	; 0x3e
    9bfa:	3f af       	std	Y+63, r19	; 0x3f
    9bfc:	29 97       	sbiw	r28, 0x09	; 9
    9bfe:	a2 01       	movw	r20, r4
    9c00:	91 01       	movw	r18, r2
    9c02:	40 70       	andi	r20, 0x00	; 0
    9c04:	50 70       	andi	r21, 0x00	; 0
    9c06:	2d 96       	adiw	r28, 0x0d	; 13
    9c08:	2c af       	std	Y+60, r18	; 0x3c
    9c0a:	3d af       	std	Y+61, r19	; 0x3d
    9c0c:	4e af       	std	Y+62, r20	; 0x3e
    9c0e:	5f af       	std	Y+63, r21	; 0x3f
    9c10:	2d 97       	sbiw	r28, 0x0d	; 13
    9c12:	c6 01       	movw	r24, r12
    9c14:	b5 01       	movw	r22, r10
    9c16:	29 96       	adiw	r28, 0x09	; 9
    9c18:	2c ad       	ldd	r18, Y+60	; 0x3c
    9c1a:	3d ad       	ldd	r19, Y+61	; 0x3d
    9c1c:	4e ad       	ldd	r20, Y+62	; 0x3e
    9c1e:	5f ad       	ldd	r21, Y+63	; 0x3f
    9c20:	29 97       	sbiw	r28, 0x09	; 9
    9c22:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <__udivmodsi4>
    9c26:	7b 01       	movw	r14, r22
    9c28:	8c 01       	movw	r16, r24
    9c2a:	c6 01       	movw	r24, r12
    9c2c:	b5 01       	movw	r22, r10
    9c2e:	29 96       	adiw	r28, 0x09	; 9
    9c30:	2c ad       	ldd	r18, Y+60	; 0x3c
    9c32:	3d ad       	ldd	r19, Y+61	; 0x3d
    9c34:	4e ad       	ldd	r20, Y+62	; 0x3e
    9c36:	5f ad       	ldd	r21, Y+63	; 0x3f
    9c38:	29 97       	sbiw	r28, 0x09	; 9
    9c3a:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <__udivmodsi4>
    9c3e:	c9 01       	movw	r24, r18
    9c40:	da 01       	movw	r26, r20
    9c42:	61 96       	adiw	r28, 0x11	; 17
    9c44:	8c af       	std	Y+60, r24	; 0x3c
    9c46:	9d af       	std	Y+61, r25	; 0x3d
    9c48:	ae af       	std	Y+62, r26	; 0x3e
    9c4a:	bf af       	std	Y+63, r27	; 0x3f
    9c4c:	61 97       	sbiw	r28, 0x11	; 17
    9c4e:	bc 01       	movw	r22, r24
    9c50:	cd 01       	movw	r24, r26
    9c52:	2d 96       	adiw	r28, 0x0d	; 13
    9c54:	2c ad       	ldd	r18, Y+60	; 0x3c
    9c56:	3d ad       	ldd	r19, Y+61	; 0x3d
    9c58:	4e ad       	ldd	r20, Y+62	; 0x3e
    9c5a:	5f ad       	ldd	r21, Y+63	; 0x3f
    9c5c:	2d 97       	sbiw	r28, 0x0d	; 13
    9c5e:	0e 94 3b 59 	call	0xb276	; 0xb276 <__mulsi3>
    9c62:	9b 01       	movw	r18, r22
    9c64:	ac 01       	movw	r20, r24
    9c66:	87 01       	movw	r16, r14
    9c68:	ff 24       	eor	r15, r15
    9c6a:	ee 24       	eor	r14, r14
    9c6c:	ad a4       	ldd	r10, Y+45	; 0x2d
    9c6e:	be a4       	ldd	r11, Y+46	; 0x2e
    9c70:	cf a4       	ldd	r12, Y+47	; 0x2f
    9c72:	d8 a8       	ldd	r13, Y+48	; 0x30
    9c74:	c6 01       	movw	r24, r12
    9c76:	aa 27       	eor	r26, r26
    9c78:	bb 27       	eor	r27, r27
    9c7a:	57 01       	movw	r10, r14
    9c7c:	68 01       	movw	r12, r16
    9c7e:	a8 2a       	or	r10, r24
    9c80:	b9 2a       	or	r11, r25
    9c82:	ca 2a       	or	r12, r26
    9c84:	db 2a       	or	r13, r27
    9c86:	a2 16       	cp	r10, r18
    9c88:	b3 06       	cpc	r11, r19
    9c8a:	c4 06       	cpc	r12, r20
    9c8c:	d5 06       	cpc	r13, r21
    9c8e:	60 f5       	brcc	.+88     	; 0x9ce8 <__udivdi3+0x716>
    9c90:	61 96       	adiw	r28, 0x11	; 17
    9c92:	6c ad       	ldd	r22, Y+60	; 0x3c
    9c94:	7d ad       	ldd	r23, Y+61	; 0x3d
    9c96:	8e ad       	ldd	r24, Y+62	; 0x3e
    9c98:	9f ad       	ldd	r25, Y+63	; 0x3f
    9c9a:	61 97       	sbiw	r28, 0x11	; 17
    9c9c:	61 50       	subi	r22, 0x01	; 1
    9c9e:	70 40       	sbci	r23, 0x00	; 0
    9ca0:	80 40       	sbci	r24, 0x00	; 0
    9ca2:	90 40       	sbci	r25, 0x00	; 0
    9ca4:	61 96       	adiw	r28, 0x11	; 17
    9ca6:	6c af       	std	Y+60, r22	; 0x3c
    9ca8:	7d af       	std	Y+61, r23	; 0x3d
    9caa:	8e af       	std	Y+62, r24	; 0x3e
    9cac:	9f af       	std	Y+63, r25	; 0x3f
    9cae:	61 97       	sbiw	r28, 0x11	; 17
    9cb0:	a2 0c       	add	r10, r2
    9cb2:	b3 1c       	adc	r11, r3
    9cb4:	c4 1c       	adc	r12, r4
    9cb6:	d5 1c       	adc	r13, r5
    9cb8:	a2 14       	cp	r10, r2
    9cba:	b3 04       	cpc	r11, r3
    9cbc:	c4 04       	cpc	r12, r4
    9cbe:	d5 04       	cpc	r13, r5
    9cc0:	98 f0       	brcs	.+38     	; 0x9ce8 <__udivdi3+0x716>
    9cc2:	a2 16       	cp	r10, r18
    9cc4:	b3 06       	cpc	r11, r19
    9cc6:	c4 06       	cpc	r12, r20
    9cc8:	d5 06       	cpc	r13, r21
    9cca:	70 f4       	brcc	.+28     	; 0x9ce8 <__udivdi3+0x716>
    9ccc:	61 50       	subi	r22, 0x01	; 1
    9cce:	70 40       	sbci	r23, 0x00	; 0
    9cd0:	80 40       	sbci	r24, 0x00	; 0
    9cd2:	90 40       	sbci	r25, 0x00	; 0
    9cd4:	61 96       	adiw	r28, 0x11	; 17
    9cd6:	6c af       	std	Y+60, r22	; 0x3c
    9cd8:	7d af       	std	Y+61, r23	; 0x3d
    9cda:	8e af       	std	Y+62, r24	; 0x3e
    9cdc:	9f af       	std	Y+63, r25	; 0x3f
    9cde:	61 97       	sbiw	r28, 0x11	; 17
    9ce0:	a2 0c       	add	r10, r2
    9ce2:	b3 1c       	adc	r11, r3
    9ce4:	c4 1c       	adc	r12, r4
    9ce6:	d5 1c       	adc	r13, r5
    9ce8:	a2 1a       	sub	r10, r18
    9cea:	b3 0a       	sbc	r11, r19
    9cec:	c4 0a       	sbc	r12, r20
    9cee:	d5 0a       	sbc	r13, r21
    9cf0:	c6 01       	movw	r24, r12
    9cf2:	b5 01       	movw	r22, r10
    9cf4:	29 96       	adiw	r28, 0x09	; 9
    9cf6:	2c ad       	ldd	r18, Y+60	; 0x3c
    9cf8:	3d ad       	ldd	r19, Y+61	; 0x3d
    9cfa:	4e ad       	ldd	r20, Y+62	; 0x3e
    9cfc:	5f ad       	ldd	r21, Y+63	; 0x3f
    9cfe:	29 97       	sbiw	r28, 0x09	; 9
    9d00:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <__udivmodsi4>
    9d04:	7b 01       	movw	r14, r22
    9d06:	8c 01       	movw	r16, r24
    9d08:	c6 01       	movw	r24, r12
    9d0a:	b5 01       	movw	r22, r10
    9d0c:	29 96       	adiw	r28, 0x09	; 9
    9d0e:	2c ad       	ldd	r18, Y+60	; 0x3c
    9d10:	3d ad       	ldd	r19, Y+61	; 0x3d
    9d12:	4e ad       	ldd	r20, Y+62	; 0x3e
    9d14:	5f ad       	ldd	r21, Y+63	; 0x3f
    9d16:	29 97       	sbiw	r28, 0x09	; 9
    9d18:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <__udivmodsi4>
    9d1c:	c9 01       	movw	r24, r18
    9d1e:	da 01       	movw	r26, r20
    9d20:	5c 01       	movw	r10, r24
    9d22:	6d 01       	movw	r12, r26
    9d24:	c6 01       	movw	r24, r12
    9d26:	b5 01       	movw	r22, r10
    9d28:	2d 96       	adiw	r28, 0x0d	; 13
    9d2a:	2c ad       	ldd	r18, Y+60	; 0x3c
    9d2c:	3d ad       	ldd	r19, Y+61	; 0x3d
    9d2e:	4e ad       	ldd	r20, Y+62	; 0x3e
    9d30:	5f ad       	ldd	r21, Y+63	; 0x3f
    9d32:	2d 97       	sbiw	r28, 0x0d	; 13
    9d34:	0e 94 3b 59 	call	0xb276	; 0xb276 <__mulsi3>
    9d38:	9b 01       	movw	r18, r22
    9d3a:	ac 01       	movw	r20, r24
    9d3c:	87 01       	movw	r16, r14
    9d3e:	ff 24       	eor	r15, r15
    9d40:	ee 24       	eor	r14, r14
    9d42:	8d a5       	ldd	r24, Y+45	; 0x2d
    9d44:	9e a5       	ldd	r25, Y+46	; 0x2e
    9d46:	af a5       	ldd	r26, Y+47	; 0x2f
    9d48:	b8 a9       	ldd	r27, Y+48	; 0x30
    9d4a:	a0 70       	andi	r26, 0x00	; 0
    9d4c:	b0 70       	andi	r27, 0x00	; 0
    9d4e:	e8 2a       	or	r14, r24
    9d50:	f9 2a       	or	r15, r25
    9d52:	0a 2b       	or	r16, r26
    9d54:	1b 2b       	or	r17, r27
    9d56:	e2 16       	cp	r14, r18
    9d58:	f3 06       	cpc	r15, r19
    9d5a:	04 07       	cpc	r16, r20
    9d5c:	15 07       	cpc	r17, r21
    9d5e:	c0 f4       	brcc	.+48     	; 0x9d90 <__udivdi3+0x7be>
    9d60:	08 94       	sec
    9d62:	a1 08       	sbc	r10, r1
    9d64:	b1 08       	sbc	r11, r1
    9d66:	c1 08       	sbc	r12, r1
    9d68:	d1 08       	sbc	r13, r1
    9d6a:	e2 0c       	add	r14, r2
    9d6c:	f3 1c       	adc	r15, r3
    9d6e:	04 1d       	adc	r16, r4
    9d70:	15 1d       	adc	r17, r5
    9d72:	e2 14       	cp	r14, r2
    9d74:	f3 04       	cpc	r15, r3
    9d76:	04 05       	cpc	r16, r4
    9d78:	15 05       	cpc	r17, r5
    9d7a:	50 f0       	brcs	.+20     	; 0x9d90 <__udivdi3+0x7be>
    9d7c:	e2 16       	cp	r14, r18
    9d7e:	f3 06       	cpc	r15, r19
    9d80:	04 07       	cpc	r16, r20
    9d82:	15 07       	cpc	r17, r21
    9d84:	28 f4       	brcc	.+10     	; 0x9d90 <__udivdi3+0x7be>
    9d86:	08 94       	sec
    9d88:	a1 08       	sbc	r10, r1
    9d8a:	b1 08       	sbc	r11, r1
    9d8c:	c1 08       	sbc	r12, r1
    9d8e:	d1 08       	sbc	r13, r1
    9d90:	61 96       	adiw	r28, 0x11	; 17
    9d92:	ec ac       	ldd	r14, Y+60	; 0x3c
    9d94:	fd ac       	ldd	r15, Y+61	; 0x3d
    9d96:	0e ad       	ldd	r16, Y+62	; 0x3e
    9d98:	1f ad       	ldd	r17, Y+63	; 0x3f
    9d9a:	61 97       	sbiw	r28, 0x11	; 17
    9d9c:	d7 01       	movw	r26, r14
    9d9e:	99 27       	eor	r25, r25
    9da0:	88 27       	eor	r24, r24
    9da2:	96 01       	movw	r18, r12
    9da4:	85 01       	movw	r16, r10
    9da6:	08 2b       	or	r16, r24
    9da8:	19 2b       	or	r17, r25
    9daa:	2a 2b       	or	r18, r26
    9dac:	3b 2b       	or	r19, r27
    9dae:	09 ab       	std	Y+49, r16	; 0x31
    9db0:	1a ab       	std	Y+50, r17	; 0x32
    9db2:	2b ab       	std	Y+51, r18	; 0x33
    9db4:	3c ab       	std	Y+52, r19	; 0x34
    9db6:	62 c2       	rjmp	.+1220   	; 0xa27c <__udivdi3+0xcaa>
    9db8:	6e 14       	cp	r6, r14
    9dba:	7f 04       	cpc	r7, r15
    9dbc:	80 06       	cpc	r8, r16
    9dbe:	91 06       	cpc	r9, r17
    9dc0:	08 f4       	brcc	.+2      	; 0x9dc4 <__udivdi3+0x7f2>
    9dc2:	51 c2       	rjmp	.+1186   	; 0xa266 <__udivdi3+0xc94>
    9dc4:	20 e0       	ldi	r18, 0x00	; 0
    9dc6:	e2 16       	cp	r14, r18
    9dc8:	20 e0       	ldi	r18, 0x00	; 0
    9dca:	f2 06       	cpc	r15, r18
    9dcc:	21 e0       	ldi	r18, 0x01	; 1
    9dce:	02 07       	cpc	r16, r18
    9dd0:	20 e0       	ldi	r18, 0x00	; 0
    9dd2:	12 07       	cpc	r17, r18
    9dd4:	88 f4       	brcc	.+34     	; 0x9df8 <__udivdi3+0x826>
    9dd6:	3f ef       	ldi	r19, 0xFF	; 255
    9dd8:	e3 16       	cp	r14, r19
    9dda:	f1 04       	cpc	r15, r1
    9ddc:	01 05       	cpc	r16, r1
    9dde:	11 05       	cpc	r17, r1
    9de0:	31 f0       	breq	.+12     	; 0x9dee <__udivdi3+0x81c>
    9de2:	28 f0       	brcs	.+10     	; 0x9dee <__udivdi3+0x81c>
    9de4:	48 e0       	ldi	r20, 0x08	; 8
    9de6:	50 e0       	ldi	r21, 0x00	; 0
    9de8:	60 e0       	ldi	r22, 0x00	; 0
    9dea:	70 e0       	ldi	r23, 0x00	; 0
    9dec:	17 c0       	rjmp	.+46     	; 0x9e1c <__udivdi3+0x84a>
    9dee:	40 e0       	ldi	r20, 0x00	; 0
    9df0:	50 e0       	ldi	r21, 0x00	; 0
    9df2:	60 e0       	ldi	r22, 0x00	; 0
    9df4:	70 e0       	ldi	r23, 0x00	; 0
    9df6:	12 c0       	rjmp	.+36     	; 0x9e1c <__udivdi3+0x84a>
    9df8:	40 e0       	ldi	r20, 0x00	; 0
    9dfa:	e4 16       	cp	r14, r20
    9dfc:	40 e0       	ldi	r20, 0x00	; 0
    9dfe:	f4 06       	cpc	r15, r20
    9e00:	40 e0       	ldi	r20, 0x00	; 0
    9e02:	04 07       	cpc	r16, r20
    9e04:	41 e0       	ldi	r20, 0x01	; 1
    9e06:	14 07       	cpc	r17, r20
    9e08:	28 f0       	brcs	.+10     	; 0x9e14 <__udivdi3+0x842>
    9e0a:	48 e1       	ldi	r20, 0x18	; 24
    9e0c:	50 e0       	ldi	r21, 0x00	; 0
    9e0e:	60 e0       	ldi	r22, 0x00	; 0
    9e10:	70 e0       	ldi	r23, 0x00	; 0
    9e12:	04 c0       	rjmp	.+8      	; 0x9e1c <__udivdi3+0x84a>
    9e14:	40 e1       	ldi	r20, 0x10	; 16
    9e16:	50 e0       	ldi	r21, 0x00	; 0
    9e18:	60 e0       	ldi	r22, 0x00	; 0
    9e1a:	70 e0       	ldi	r23, 0x00	; 0
    9e1c:	d8 01       	movw	r26, r16
    9e1e:	c7 01       	movw	r24, r14
    9e20:	04 2e       	mov	r0, r20
    9e22:	04 c0       	rjmp	.+8      	; 0x9e2c <__udivdi3+0x85a>
    9e24:	b6 95       	lsr	r27
    9e26:	a7 95       	ror	r26
    9e28:	97 95       	ror	r25
    9e2a:	87 95       	ror	r24
    9e2c:	0a 94       	dec	r0
    9e2e:	d2 f7       	brpl	.-12     	; 0x9e24 <__udivdi3+0x852>
    9e30:	80 50       	subi	r24, 0x00	; 0
    9e32:	90 4e       	sbci	r25, 0xE0	; 224
    9e34:	dc 01       	movw	r26, r24
    9e36:	2c 91       	ld	r18, X
    9e38:	30 e2       	ldi	r19, 0x20	; 32
    9e3a:	a3 2e       	mov	r10, r19
    9e3c:	b1 2c       	mov	r11, r1
    9e3e:	c1 2c       	mov	r12, r1
    9e40:	d1 2c       	mov	r13, r1
    9e42:	d6 01       	movw	r26, r12
    9e44:	c5 01       	movw	r24, r10
    9e46:	84 1b       	sub	r24, r20
    9e48:	95 0b       	sbc	r25, r21
    9e4a:	a6 0b       	sbc	r26, r22
    9e4c:	b7 0b       	sbc	r27, r23
    9e4e:	82 1b       	sub	r24, r18
    9e50:	91 09       	sbc	r25, r1
    9e52:	a1 09       	sbc	r26, r1
    9e54:	b1 09       	sbc	r27, r1
    9e56:	00 97       	sbiw	r24, 0x00	; 0
    9e58:	a1 05       	cpc	r26, r1
    9e5a:	b1 05       	cpc	r27, r1
    9e5c:	89 f4       	brne	.+34     	; 0x9e80 <__udivdi3+0x8ae>
    9e5e:	e6 14       	cp	r14, r6
    9e60:	f7 04       	cpc	r15, r7
    9e62:	08 05       	cpc	r16, r8
    9e64:	19 05       	cpc	r17, r9
    9e66:	08 f4       	brcc	.+2      	; 0x9e6a <__udivdi3+0x898>
    9e68:	f2 c1       	rjmp	.+996    	; 0xa24e <__udivdi3+0xc7c>
    9e6a:	6d a4       	ldd	r6, Y+45	; 0x2d
    9e6c:	7e a4       	ldd	r7, Y+46	; 0x2e
    9e6e:	8f a4       	ldd	r8, Y+47	; 0x2f
    9e70:	98 a8       	ldd	r9, Y+48	; 0x30
    9e72:	62 14       	cp	r6, r2
    9e74:	73 04       	cpc	r7, r3
    9e76:	84 04       	cpc	r8, r4
    9e78:	95 04       	cpc	r9, r5
    9e7a:	08 f0       	brcs	.+2      	; 0x9e7e <__udivdi3+0x8ac>
    9e7c:	e8 c1       	rjmp	.+976    	; 0xa24e <__udivdi3+0xc7c>
    9e7e:	f3 c1       	rjmp	.+998    	; 0xa266 <__udivdi3+0xc94>
    9e80:	6e 96       	adiw	r28, 0x1e	; 30
    9e82:	8f af       	std	Y+63, r24	; 0x3f
    9e84:	6e 97       	sbiw	r28, 0x1e	; 30
    9e86:	08 2e       	mov	r0, r24
    9e88:	04 c0       	rjmp	.+8      	; 0x9e92 <__udivdi3+0x8c0>
    9e8a:	ee 0c       	add	r14, r14
    9e8c:	ff 1c       	adc	r15, r15
    9e8e:	00 1f       	adc	r16, r16
    9e90:	11 1f       	adc	r17, r17
    9e92:	0a 94       	dec	r0
    9e94:	d2 f7       	brpl	.-12     	; 0x9e8a <__udivdi3+0x8b8>
    9e96:	6a 2d       	mov	r22, r10
    9e98:	68 1b       	sub	r22, r24
    9e9a:	d2 01       	movw	r26, r4
    9e9c:	c1 01       	movw	r24, r2
    9e9e:	06 2e       	mov	r0, r22
    9ea0:	04 c0       	rjmp	.+8      	; 0x9eaa <__udivdi3+0x8d8>
    9ea2:	b6 95       	lsr	r27
    9ea4:	a7 95       	ror	r26
    9ea6:	97 95       	ror	r25
    9ea8:	87 95       	ror	r24
    9eaa:	0a 94       	dec	r0
    9eac:	d2 f7       	brpl	.-12     	; 0x9ea2 <__udivdi3+0x8d0>
    9eae:	5c 01       	movw	r10, r24
    9eb0:	6d 01       	movw	r12, r26
    9eb2:	ae 28       	or	r10, r14
    9eb4:	bf 28       	or	r11, r15
    9eb6:	c0 2a       	or	r12, r16
    9eb8:	d1 2a       	or	r13, r17
    9eba:	ad a2       	std	Y+37, r10	; 0x25
    9ebc:	be a2       	std	Y+38, r11	; 0x26
    9ebe:	cf a2       	std	Y+39, r12	; 0x27
    9ec0:	d8 a6       	std	Y+40, r13	; 0x28
    9ec2:	72 01       	movw	r14, r4
    9ec4:	61 01       	movw	r12, r2
    9ec6:	6e 96       	adiw	r28, 0x1e	; 30
    9ec8:	0f ac       	ldd	r0, Y+63	; 0x3f
    9eca:	6e 97       	sbiw	r28, 0x1e	; 30
    9ecc:	04 c0       	rjmp	.+8      	; 0x9ed6 <__udivdi3+0x904>
    9ece:	cc 0c       	add	r12, r12
    9ed0:	dd 1c       	adc	r13, r13
    9ed2:	ee 1c       	adc	r14, r14
    9ed4:	ff 1c       	adc	r15, r15
    9ed6:	0a 94       	dec	r0
    9ed8:	d2 f7       	brpl	.-12     	; 0x9ece <__udivdi3+0x8fc>
    9eda:	c9 a2       	std	Y+33, r12	; 0x21
    9edc:	da a2       	std	Y+34, r13	; 0x22
    9ede:	eb a2       	std	Y+35, r14	; 0x23
    9ee0:	fc a2       	std	Y+36, r15	; 0x24
    9ee2:	64 01       	movw	r12, r8
    9ee4:	53 01       	movw	r10, r6
    9ee6:	06 2e       	mov	r0, r22
    9ee8:	04 c0       	rjmp	.+8      	; 0x9ef2 <__udivdi3+0x920>
    9eea:	d6 94       	lsr	r13
    9eec:	c7 94       	ror	r12
    9eee:	b7 94       	ror	r11
    9ef0:	a7 94       	ror	r10
    9ef2:	0a 94       	dec	r0
    9ef4:	d2 f7       	brpl	.-12     	; 0x9eea <__udivdi3+0x918>
    9ef6:	d4 01       	movw	r26, r8
    9ef8:	c3 01       	movw	r24, r6
    9efa:	6e 96       	adiw	r28, 0x1e	; 30
    9efc:	0f ac       	ldd	r0, Y+63	; 0x3f
    9efe:	6e 97       	sbiw	r28, 0x1e	; 30
    9f00:	04 c0       	rjmp	.+8      	; 0x9f0a <__udivdi3+0x938>
    9f02:	88 0f       	add	r24, r24
    9f04:	99 1f       	adc	r25, r25
    9f06:	aa 1f       	adc	r26, r26
    9f08:	bb 1f       	adc	r27, r27
    9f0a:	0a 94       	dec	r0
    9f0c:	d2 f7       	brpl	.-12     	; 0x9f02 <__udivdi3+0x930>
    9f0e:	ed a4       	ldd	r14, Y+45	; 0x2d
    9f10:	fe a4       	ldd	r15, Y+46	; 0x2e
    9f12:	0f a5       	ldd	r16, Y+47	; 0x2f
    9f14:	18 a9       	ldd	r17, Y+48	; 0x30
    9f16:	04 c0       	rjmp	.+8      	; 0x9f20 <__udivdi3+0x94e>
    9f18:	16 95       	lsr	r17
    9f1a:	07 95       	ror	r16
    9f1c:	f7 94       	ror	r15
    9f1e:	e7 94       	ror	r14
    9f20:	6a 95       	dec	r22
    9f22:	d2 f7       	brpl	.-12     	; 0x9f18 <__udivdi3+0x946>
    9f24:	37 01       	movw	r6, r14
    9f26:	48 01       	movw	r8, r16
    9f28:	68 2a       	or	r6, r24
    9f2a:	79 2a       	or	r7, r25
    9f2c:	8a 2a       	or	r8, r26
    9f2e:	9b 2a       	or	r9, r27
    9f30:	6d 8e       	std	Y+29, r6	; 0x1d
    9f32:	7e 8e       	std	Y+30, r7	; 0x1e
    9f34:	8f 8e       	std	Y+31, r8	; 0x1f
    9f36:	98 a2       	std	Y+32, r9	; 0x20
    9f38:	ed a0       	ldd	r14, Y+37	; 0x25
    9f3a:	fe a0       	ldd	r15, Y+38	; 0x26
    9f3c:	0f a1       	ldd	r16, Y+39	; 0x27
    9f3e:	18 a5       	ldd	r17, Y+40	; 0x28
    9f40:	38 01       	movw	r6, r16
    9f42:	88 24       	eor	r8, r8
    9f44:	99 24       	eor	r9, r9
    9f46:	98 01       	movw	r18, r16
    9f48:	87 01       	movw	r16, r14
    9f4a:	20 70       	andi	r18, 0x00	; 0
    9f4c:	30 70       	andi	r19, 0x00	; 0
    9f4e:	65 96       	adiw	r28, 0x15	; 21
    9f50:	0c af       	std	Y+60, r16	; 0x3c
    9f52:	1d af       	std	Y+61, r17	; 0x3d
    9f54:	2e af       	std	Y+62, r18	; 0x3e
    9f56:	3f af       	std	Y+63, r19	; 0x3f
    9f58:	65 97       	sbiw	r28, 0x15	; 21
    9f5a:	c6 01       	movw	r24, r12
    9f5c:	b5 01       	movw	r22, r10
    9f5e:	a4 01       	movw	r20, r8
    9f60:	93 01       	movw	r18, r6
    9f62:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <__udivmodsi4>
    9f66:	7b 01       	movw	r14, r22
    9f68:	8c 01       	movw	r16, r24
    9f6a:	c6 01       	movw	r24, r12
    9f6c:	b5 01       	movw	r22, r10
    9f6e:	a4 01       	movw	r20, r8
    9f70:	93 01       	movw	r18, r6
    9f72:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <__udivmodsi4>
    9f76:	c9 01       	movw	r24, r18
    9f78:	da 01       	movw	r26, r20
    9f7a:	1c 01       	movw	r2, r24
    9f7c:	2d 01       	movw	r4, r26
    9f7e:	c2 01       	movw	r24, r4
    9f80:	b1 01       	movw	r22, r2
    9f82:	65 96       	adiw	r28, 0x15	; 21
    9f84:	2c ad       	ldd	r18, Y+60	; 0x3c
    9f86:	3d ad       	ldd	r19, Y+61	; 0x3d
    9f88:	4e ad       	ldd	r20, Y+62	; 0x3e
    9f8a:	5f ad       	ldd	r21, Y+63	; 0x3f
    9f8c:	65 97       	sbiw	r28, 0x15	; 21
    9f8e:	0e 94 3b 59 	call	0xb276	; 0xb276 <__mulsi3>
    9f92:	9b 01       	movw	r18, r22
    9f94:	ac 01       	movw	r20, r24
    9f96:	87 01       	movw	r16, r14
    9f98:	ff 24       	eor	r15, r15
    9f9a:	ee 24       	eor	r14, r14
    9f9c:	ad 8c       	ldd	r10, Y+29	; 0x1d
    9f9e:	be 8c       	ldd	r11, Y+30	; 0x1e
    9fa0:	cf 8c       	ldd	r12, Y+31	; 0x1f
    9fa2:	d8 a0       	ldd	r13, Y+32	; 0x20
    9fa4:	c6 01       	movw	r24, r12
    9fa6:	aa 27       	eor	r26, r26
    9fa8:	bb 27       	eor	r27, r27
    9faa:	57 01       	movw	r10, r14
    9fac:	68 01       	movw	r12, r16
    9fae:	a8 2a       	or	r10, r24
    9fb0:	b9 2a       	or	r11, r25
    9fb2:	ca 2a       	or	r12, r26
    9fb4:	db 2a       	or	r13, r27
    9fb6:	a2 16       	cp	r10, r18
    9fb8:	b3 06       	cpc	r11, r19
    9fba:	c4 06       	cpc	r12, r20
    9fbc:	d5 06       	cpc	r13, r21
    9fbe:	00 f5       	brcc	.+64     	; 0xa000 <__udivdi3+0xa2e>
    9fc0:	08 94       	sec
    9fc2:	21 08       	sbc	r2, r1
    9fc4:	31 08       	sbc	r3, r1
    9fc6:	41 08       	sbc	r4, r1
    9fc8:	51 08       	sbc	r5, r1
    9fca:	ed a0       	ldd	r14, Y+37	; 0x25
    9fcc:	fe a0       	ldd	r15, Y+38	; 0x26
    9fce:	0f a1       	ldd	r16, Y+39	; 0x27
    9fd0:	18 a5       	ldd	r17, Y+40	; 0x28
    9fd2:	ae 0c       	add	r10, r14
    9fd4:	bf 1c       	adc	r11, r15
    9fd6:	c0 1e       	adc	r12, r16
    9fd8:	d1 1e       	adc	r13, r17
    9fda:	ae 14       	cp	r10, r14
    9fdc:	bf 04       	cpc	r11, r15
    9fde:	c0 06       	cpc	r12, r16
    9fe0:	d1 06       	cpc	r13, r17
    9fe2:	70 f0       	brcs	.+28     	; 0xa000 <__udivdi3+0xa2e>
    9fe4:	a2 16       	cp	r10, r18
    9fe6:	b3 06       	cpc	r11, r19
    9fe8:	c4 06       	cpc	r12, r20
    9fea:	d5 06       	cpc	r13, r21
    9fec:	48 f4       	brcc	.+18     	; 0xa000 <__udivdi3+0xa2e>
    9fee:	08 94       	sec
    9ff0:	21 08       	sbc	r2, r1
    9ff2:	31 08       	sbc	r3, r1
    9ff4:	41 08       	sbc	r4, r1
    9ff6:	51 08       	sbc	r5, r1
    9ff8:	ae 0c       	add	r10, r14
    9ffa:	bf 1c       	adc	r11, r15
    9ffc:	c0 1e       	adc	r12, r16
    9ffe:	d1 1e       	adc	r13, r17
    a000:	a2 1a       	sub	r10, r18
    a002:	b3 0a       	sbc	r11, r19
    a004:	c4 0a       	sbc	r12, r20
    a006:	d5 0a       	sbc	r13, r21
    a008:	c6 01       	movw	r24, r12
    a00a:	b5 01       	movw	r22, r10
    a00c:	a4 01       	movw	r20, r8
    a00e:	93 01       	movw	r18, r6
    a010:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <__udivmodsi4>
    a014:	7b 01       	movw	r14, r22
    a016:	8c 01       	movw	r16, r24
    a018:	c6 01       	movw	r24, r12
    a01a:	b5 01       	movw	r22, r10
    a01c:	a4 01       	movw	r20, r8
    a01e:	93 01       	movw	r18, r6
    a020:	0e 94 5a 59 	call	0xb2b4	; 0xb2b4 <__udivmodsi4>
    a024:	c9 01       	movw	r24, r18
    a026:	da 01       	movw	r26, r20
    a028:	3c 01       	movw	r6, r24
    a02a:	4d 01       	movw	r8, r26
    a02c:	c4 01       	movw	r24, r8
    a02e:	b3 01       	movw	r22, r6
    a030:	65 96       	adiw	r28, 0x15	; 21
    a032:	2c ad       	ldd	r18, Y+60	; 0x3c
    a034:	3d ad       	ldd	r19, Y+61	; 0x3d
    a036:	4e ad       	ldd	r20, Y+62	; 0x3e
    a038:	5f ad       	ldd	r21, Y+63	; 0x3f
    a03a:	65 97       	sbiw	r28, 0x15	; 21
    a03c:	0e 94 3b 59 	call	0xb276	; 0xb276 <__mulsi3>
    a040:	9b 01       	movw	r18, r22
    a042:	ac 01       	movw	r20, r24
    a044:	87 01       	movw	r16, r14
    a046:	ff 24       	eor	r15, r15
    a048:	ee 24       	eor	r14, r14
    a04a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    a04c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    a04e:	af 8d       	ldd	r26, Y+31	; 0x1f
    a050:	b8 a1       	ldd	r27, Y+32	; 0x20
    a052:	a0 70       	andi	r26, 0x00	; 0
    a054:	b0 70       	andi	r27, 0x00	; 0
    a056:	57 01       	movw	r10, r14
    a058:	68 01       	movw	r12, r16
    a05a:	a8 2a       	or	r10, r24
    a05c:	b9 2a       	or	r11, r25
    a05e:	ca 2a       	or	r12, r26
    a060:	db 2a       	or	r13, r27
    a062:	a2 16       	cp	r10, r18
    a064:	b3 06       	cpc	r11, r19
    a066:	c4 06       	cpc	r12, r20
    a068:	d5 06       	cpc	r13, r21
    a06a:	00 f5       	brcc	.+64     	; 0xa0ac <__udivdi3+0xada>
    a06c:	08 94       	sec
    a06e:	61 08       	sbc	r6, r1
    a070:	71 08       	sbc	r7, r1
    a072:	81 08       	sbc	r8, r1
    a074:	91 08       	sbc	r9, r1
    a076:	6d a1       	ldd	r22, Y+37	; 0x25
    a078:	7e a1       	ldd	r23, Y+38	; 0x26
    a07a:	8f a1       	ldd	r24, Y+39	; 0x27
    a07c:	98 a5       	ldd	r25, Y+40	; 0x28
    a07e:	a6 0e       	add	r10, r22
    a080:	b7 1e       	adc	r11, r23
    a082:	c8 1e       	adc	r12, r24
    a084:	d9 1e       	adc	r13, r25
    a086:	a6 16       	cp	r10, r22
    a088:	b7 06       	cpc	r11, r23
    a08a:	c8 06       	cpc	r12, r24
    a08c:	d9 06       	cpc	r13, r25
    a08e:	70 f0       	brcs	.+28     	; 0xa0ac <__udivdi3+0xada>
    a090:	a2 16       	cp	r10, r18
    a092:	b3 06       	cpc	r11, r19
    a094:	c4 06       	cpc	r12, r20
    a096:	d5 06       	cpc	r13, r21
    a098:	48 f4       	brcc	.+18     	; 0xa0ac <__udivdi3+0xada>
    a09a:	08 94       	sec
    a09c:	61 08       	sbc	r6, r1
    a09e:	71 08       	sbc	r7, r1
    a0a0:	81 08       	sbc	r8, r1
    a0a2:	91 08       	sbc	r9, r1
    a0a4:	a6 0e       	add	r10, r22
    a0a6:	b7 1e       	adc	r11, r23
    a0a8:	c8 1e       	adc	r12, r24
    a0aa:	d9 1e       	adc	r13, r25
    a0ac:	d6 01       	movw	r26, r12
    a0ae:	c5 01       	movw	r24, r10
    a0b0:	82 1b       	sub	r24, r18
    a0b2:	93 0b       	sbc	r25, r19
    a0b4:	a4 0b       	sbc	r26, r20
    a0b6:	b5 0b       	sbc	r27, r21
    a0b8:	89 8f       	std	Y+25, r24	; 0x19
    a0ba:	9a 8f       	std	Y+26, r25	; 0x1a
    a0bc:	ab 8f       	std	Y+27, r26	; 0x1b
    a0be:	bc 8f       	std	Y+28, r27	; 0x1c
    a0c0:	d1 01       	movw	r26, r2
    a0c2:	99 27       	eor	r25, r25
    a0c4:	88 27       	eor	r24, r24
    a0c6:	64 01       	movw	r12, r8
    a0c8:	53 01       	movw	r10, r6
    a0ca:	a8 2a       	or	r10, r24
    a0cc:	b9 2a       	or	r11, r25
    a0ce:	ca 2a       	or	r12, r26
    a0d0:	db 2a       	or	r13, r27
    a0d2:	a9 aa       	std	Y+49, r10	; 0x31
    a0d4:	ba aa       	std	Y+50, r11	; 0x32
    a0d6:	cb aa       	std	Y+51, r12	; 0x33
    a0d8:	dc aa       	std	Y+52, r13	; 0x34
    a0da:	86 01       	movw	r16, r12
    a0dc:	75 01       	movw	r14, r10
    a0de:	2f ef       	ldi	r18, 0xFF	; 255
    a0e0:	3f ef       	ldi	r19, 0xFF	; 255
    a0e2:	40 e0       	ldi	r20, 0x00	; 0
    a0e4:	50 e0       	ldi	r21, 0x00	; 0
    a0e6:	e2 22       	and	r14, r18
    a0e8:	f3 22       	and	r15, r19
    a0ea:	04 23       	and	r16, r20
    a0ec:	15 23       	and	r17, r21
    a0ee:	a6 01       	movw	r20, r12
    a0f0:	66 27       	eor	r22, r22
    a0f2:	77 27       	eor	r23, r23
    a0f4:	6d 96       	adiw	r28, 0x1d	; 29
    a0f6:	4c af       	std	Y+60, r20	; 0x3c
    a0f8:	5d af       	std	Y+61, r21	; 0x3d
    a0fa:	6e af       	std	Y+62, r22	; 0x3e
    a0fc:	7f af       	std	Y+63, r23	; 0x3f
    a0fe:	6d 97       	sbiw	r28, 0x1d	; 29
    a100:	a9 a0       	ldd	r10, Y+33	; 0x21
    a102:	ba a0       	ldd	r11, Y+34	; 0x22
    a104:	cb a0       	ldd	r12, Y+35	; 0x23
    a106:	dc a0       	ldd	r13, Y+36	; 0x24
    a108:	6f ef       	ldi	r22, 0xFF	; 255
    a10a:	7f ef       	ldi	r23, 0xFF	; 255
    a10c:	80 e0       	ldi	r24, 0x00	; 0
    a10e:	90 e0       	ldi	r25, 0x00	; 0
    a110:	a6 22       	and	r10, r22
    a112:	b7 22       	and	r11, r23
    a114:	c8 22       	and	r12, r24
    a116:	d9 22       	and	r13, r25
    a118:	89 a1       	ldd	r24, Y+33	; 0x21
    a11a:	9a a1       	ldd	r25, Y+34	; 0x22
    a11c:	ab a1       	ldd	r26, Y+35	; 0x23
    a11e:	bc a1       	ldd	r27, Y+36	; 0x24
    a120:	1d 01       	movw	r2, r26
    a122:	44 24       	eor	r4, r4
    a124:	55 24       	eor	r5, r5
    a126:	c8 01       	movw	r24, r16
    a128:	b7 01       	movw	r22, r14
    a12a:	a6 01       	movw	r20, r12
    a12c:	95 01       	movw	r18, r10
    a12e:	0e 94 3b 59 	call	0xb276	; 0xb276 <__mulsi3>
    a132:	69 96       	adiw	r28, 0x19	; 25
    a134:	6c af       	std	Y+60, r22	; 0x3c
    a136:	7d af       	std	Y+61, r23	; 0x3d
    a138:	8e af       	std	Y+62, r24	; 0x3e
    a13a:	9f af       	std	Y+63, r25	; 0x3f
    a13c:	69 97       	sbiw	r28, 0x19	; 25
    a13e:	c8 01       	movw	r24, r16
    a140:	b7 01       	movw	r22, r14
    a142:	a2 01       	movw	r20, r4
    a144:	91 01       	movw	r18, r2
    a146:	0e 94 3b 59 	call	0xb276	; 0xb276 <__mulsi3>
    a14a:	3b 01       	movw	r6, r22
    a14c:	4c 01       	movw	r8, r24
    a14e:	6d 96       	adiw	r28, 0x1d	; 29
    a150:	6c ad       	ldd	r22, Y+60	; 0x3c
    a152:	7d ad       	ldd	r23, Y+61	; 0x3d
    a154:	8e ad       	ldd	r24, Y+62	; 0x3e
    a156:	9f ad       	ldd	r25, Y+63	; 0x3f
    a158:	6d 97       	sbiw	r28, 0x1d	; 29
    a15a:	a6 01       	movw	r20, r12
    a15c:	95 01       	movw	r18, r10
    a15e:	0e 94 3b 59 	call	0xb276	; 0xb276 <__mulsi3>
    a162:	7b 01       	movw	r14, r22
    a164:	8c 01       	movw	r16, r24
    a166:	6d 96       	adiw	r28, 0x1d	; 29
    a168:	6c ad       	ldd	r22, Y+60	; 0x3c
    a16a:	7d ad       	ldd	r23, Y+61	; 0x3d
    a16c:	8e ad       	ldd	r24, Y+62	; 0x3e
    a16e:	9f ad       	ldd	r25, Y+63	; 0x3f
    a170:	6d 97       	sbiw	r28, 0x1d	; 29
    a172:	a2 01       	movw	r20, r4
    a174:	91 01       	movw	r18, r2
    a176:	0e 94 3b 59 	call	0xb276	; 0xb276 <__mulsi3>
    a17a:	5b 01       	movw	r10, r22
    a17c:	6c 01       	movw	r12, r24
    a17e:	a8 01       	movw	r20, r16
    a180:	97 01       	movw	r18, r14
    a182:	26 0d       	add	r18, r6
    a184:	37 1d       	adc	r19, r7
    a186:	48 1d       	adc	r20, r8
    a188:	59 1d       	adc	r21, r9
    a18a:	69 96       	adiw	r28, 0x19	; 25
    a18c:	6c ac       	ldd	r6, Y+60	; 0x3c
    a18e:	7d ac       	ldd	r7, Y+61	; 0x3d
    a190:	8e ac       	ldd	r8, Y+62	; 0x3e
    a192:	9f ac       	ldd	r9, Y+63	; 0x3f
    a194:	69 97       	sbiw	r28, 0x19	; 25
    a196:	c4 01       	movw	r24, r8
    a198:	aa 27       	eor	r26, r26
    a19a:	bb 27       	eor	r27, r27
    a19c:	28 0f       	add	r18, r24
    a19e:	39 1f       	adc	r19, r25
    a1a0:	4a 1f       	adc	r20, r26
    a1a2:	5b 1f       	adc	r21, r27
    a1a4:	2e 15       	cp	r18, r14
    a1a6:	3f 05       	cpc	r19, r15
    a1a8:	40 07       	cpc	r20, r16
    a1aa:	51 07       	cpc	r21, r17
    a1ac:	48 f4       	brcc	.+18     	; 0xa1c0 <__udivdi3+0xbee>
    a1ae:	e1 2c       	mov	r14, r1
    a1b0:	f1 2c       	mov	r15, r1
    a1b2:	61 e0       	ldi	r22, 0x01	; 1
    a1b4:	06 2f       	mov	r16, r22
    a1b6:	11 2d       	mov	r17, r1
    a1b8:	ae 0c       	add	r10, r14
    a1ba:	bf 1c       	adc	r11, r15
    a1bc:	c0 1e       	adc	r12, r16
    a1be:	d1 1e       	adc	r13, r17
    a1c0:	ca 01       	movw	r24, r20
    a1c2:	aa 27       	eor	r26, r26
    a1c4:	bb 27       	eor	r27, r27
    a1c6:	bc 01       	movw	r22, r24
    a1c8:	cd 01       	movw	r24, r26
    a1ca:	6a 0d       	add	r22, r10
    a1cc:	7b 1d       	adc	r23, r11
    a1ce:	8c 1d       	adc	r24, r12
    a1d0:	9d 1d       	adc	r25, r13
    a1d2:	69 8c       	ldd	r6, Y+25	; 0x19
    a1d4:	7a 8c       	ldd	r7, Y+26	; 0x1a
    a1d6:	8b 8c       	ldd	r8, Y+27	; 0x1b
    a1d8:	9c 8c       	ldd	r9, Y+28	; 0x1c
    a1da:	66 16       	cp	r6, r22
    a1dc:	77 06       	cpc	r7, r23
    a1de:	88 06       	cpc	r8, r24
    a1e0:	99 06       	cpc	r9, r25
    a1e2:	40 f1       	brcs	.+80     	; 0xa234 <__udivdi3+0xc62>
    a1e4:	66 15       	cp	r22, r6
    a1e6:	77 05       	cpc	r23, r7
    a1e8:	88 05       	cpc	r24, r8
    a1ea:	99 05       	cpc	r25, r9
    a1ec:	09 f0       	breq	.+2      	; 0xa1f0 <__udivdi3+0xc1e>
    a1ee:	43 c0       	rjmp	.+134    	; 0xa276 <__udivdi3+0xca4>
    a1f0:	d9 01       	movw	r26, r18
    a1f2:	99 27       	eor	r25, r25
    a1f4:	88 27       	eor	r24, r24
    a1f6:	69 96       	adiw	r28, 0x19	; 25
    a1f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    a1fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    a1fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    a1fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    a200:	69 97       	sbiw	r28, 0x19	; 25
    a202:	40 70       	andi	r20, 0x00	; 0
    a204:	50 70       	andi	r21, 0x00	; 0
    a206:	82 0f       	add	r24, r18
    a208:	93 1f       	adc	r25, r19
    a20a:	a4 1f       	adc	r26, r20
    a20c:	b5 1f       	adc	r27, r21
    a20e:	2d a5       	ldd	r18, Y+45	; 0x2d
    a210:	3e a5       	ldd	r19, Y+46	; 0x2e
    a212:	4f a5       	ldd	r20, Y+47	; 0x2f
    a214:	58 a9       	ldd	r21, Y+48	; 0x30
    a216:	6e 96       	adiw	r28, 0x1e	; 30
    a218:	0f ac       	ldd	r0, Y+63	; 0x3f
    a21a:	6e 97       	sbiw	r28, 0x1e	; 30
    a21c:	04 c0       	rjmp	.+8      	; 0xa226 <__udivdi3+0xc54>
    a21e:	22 0f       	add	r18, r18
    a220:	33 1f       	adc	r19, r19
    a222:	44 1f       	adc	r20, r20
    a224:	55 1f       	adc	r21, r21
    a226:	0a 94       	dec	r0
    a228:	d2 f7       	brpl	.-12     	; 0xa21e <__udivdi3+0xc4c>
    a22a:	28 17       	cp	r18, r24
    a22c:	39 07       	cpc	r19, r25
    a22e:	4a 07       	cpc	r20, r26
    a230:	5b 07       	cpc	r21, r27
    a232:	08 f5       	brcc	.+66     	; 0xa276 <__udivdi3+0xca4>
    a234:	09 a9       	ldd	r16, Y+49	; 0x31
    a236:	1a a9       	ldd	r17, Y+50	; 0x32
    a238:	2b a9       	ldd	r18, Y+51	; 0x33
    a23a:	3c a9       	ldd	r19, Y+52	; 0x34
    a23c:	01 50       	subi	r16, 0x01	; 1
    a23e:	10 40       	sbci	r17, 0x00	; 0
    a240:	20 40       	sbci	r18, 0x00	; 0
    a242:	30 40       	sbci	r19, 0x00	; 0
    a244:	09 ab       	std	Y+49, r16	; 0x31
    a246:	1a ab       	std	Y+50, r17	; 0x32
    a248:	2b ab       	std	Y+51, r18	; 0x33
    a24a:	3c ab       	std	Y+52, r19	; 0x34
    a24c:	14 c0       	rjmp	.+40     	; 0xa276 <__udivdi3+0xca4>
    a24e:	66 24       	eor	r6, r6
    a250:	77 24       	eor	r7, r7
    a252:	43 01       	movw	r8, r6
    a254:	21 e0       	ldi	r18, 0x01	; 1
    a256:	30 e0       	ldi	r19, 0x00	; 0
    a258:	40 e0       	ldi	r20, 0x00	; 0
    a25a:	50 e0       	ldi	r21, 0x00	; 0
    a25c:	29 ab       	std	Y+49, r18	; 0x31
    a25e:	3a ab       	std	Y+50, r19	; 0x32
    a260:	4b ab       	std	Y+51, r20	; 0x33
    a262:	5c ab       	std	Y+52, r21	; 0x34
    a264:	0b c0       	rjmp	.+22     	; 0xa27c <__udivdi3+0xcaa>
    a266:	66 24       	eor	r6, r6
    a268:	77 24       	eor	r7, r7
    a26a:	43 01       	movw	r8, r6
    a26c:	19 aa       	std	Y+49, r1	; 0x31
    a26e:	1a aa       	std	Y+50, r1	; 0x32
    a270:	1b aa       	std	Y+51, r1	; 0x33
    a272:	1c aa       	std	Y+52, r1	; 0x34
    a274:	03 c0       	rjmp	.+6      	; 0xa27c <__udivdi3+0xcaa>
    a276:	66 24       	eor	r6, r6
    a278:	77 24       	eor	r7, r7
    a27a:	43 01       	movw	r8, r6
    a27c:	fe 01       	movw	r30, r28
    a27e:	71 96       	adiw	r30, 0x11	; 17
    a280:	88 e0       	ldi	r24, 0x08	; 8
    a282:	df 01       	movw	r26, r30
    a284:	1d 92       	st	X+, r1
    a286:	8a 95       	dec	r24
    a288:	e9 f7       	brne	.-6      	; 0xa284 <__udivdi3+0xcb2>
    a28a:	a9 a8       	ldd	r10, Y+49	; 0x31
    a28c:	ba a8       	ldd	r11, Y+50	; 0x32
    a28e:	cb a8       	ldd	r12, Y+51	; 0x33
    a290:	dc a8       	ldd	r13, Y+52	; 0x34
    a292:	a9 8a       	std	Y+17, r10	; 0x11
    a294:	ba 8a       	std	Y+18, r11	; 0x12
    a296:	cb 8a       	std	Y+19, r12	; 0x13
    a298:	dc 8a       	std	Y+20, r13	; 0x14
    a29a:	6d 8a       	std	Y+21, r6	; 0x15
    a29c:	7e 8a       	std	Y+22, r7	; 0x16
    a29e:	8f 8a       	std	Y+23, r8	; 0x17
    a2a0:	98 8e       	std	Y+24, r9	; 0x18
    a2a2:	29 a9       	ldd	r18, Y+49	; 0x31
    a2a4:	3a 89       	ldd	r19, Y+18	; 0x12
    a2a6:	4b 89       	ldd	r20, Y+19	; 0x13
    a2a8:	5c 89       	ldd	r21, Y+20	; 0x14
    a2aa:	66 2d       	mov	r22, r6
    a2ac:	7e 89       	ldd	r23, Y+22	; 0x16
    a2ae:	8f 89       	ldd	r24, Y+23	; 0x17
    a2b0:	98 8d       	ldd	r25, Y+24	; 0x18
    a2b2:	c2 5a       	subi	r28, 0xA2	; 162
    a2b4:	df 4f       	sbci	r29, 0xFF	; 255
    a2b6:	e2 e1       	ldi	r30, 0x12	; 18
    a2b8:	0c 94 98 59 	jmp	0xb330	; 0xb330 <__epilogue_restores__>

0000a2bc <vfprintf>:
    a2bc:	2f 92       	push	r2
    a2be:	3f 92       	push	r3
    a2c0:	4f 92       	push	r4
    a2c2:	5f 92       	push	r5
    a2c4:	6f 92       	push	r6
    a2c6:	7f 92       	push	r7
    a2c8:	8f 92       	push	r8
    a2ca:	9f 92       	push	r9
    a2cc:	af 92       	push	r10
    a2ce:	bf 92       	push	r11
    a2d0:	cf 92       	push	r12
    a2d2:	df 92       	push	r13
    a2d4:	ef 92       	push	r14
    a2d6:	ff 92       	push	r15
    a2d8:	0f 93       	push	r16
    a2da:	1f 93       	push	r17
    a2dc:	df 93       	push	r29
    a2de:	cf 93       	push	r28
    a2e0:	cd b7       	in	r28, 0x3d	; 61
    a2e2:	de b7       	in	r29, 0x3e	; 62
    a2e4:	61 97       	sbiw	r28, 0x11	; 17
    a2e6:	cd bf       	out	0x3d, r28	; 61
    a2e8:	de bf       	out	0x3e, r29	; 62
    a2ea:	3c 01       	movw	r6, r24
    a2ec:	6e 87       	std	Y+14, r22	; 0x0e
    a2ee:	7f 87       	std	Y+15, r23	; 0x0f
    a2f0:	6a 01       	movw	r12, r20
    a2f2:	fc 01       	movw	r30, r24
    a2f4:	16 82       	std	Z+6, r1	; 0x06
    a2f6:	17 82       	std	Z+7, r1	; 0x07
    a2f8:	83 81       	ldd	r24, Z+3	; 0x03
    a2fa:	81 fd       	sbrc	r24, 1
    a2fc:	03 c0       	rjmp	.+6      	; 0xa304 <vfprintf+0x48>
    a2fe:	6f ef       	ldi	r22, 0xFF	; 255
    a300:	7f ef       	ldi	r23, 0xFF	; 255
    a302:	6f c3       	rjmp	.+1758   	; 0xa9e2 <vfprintf+0x726>
    a304:	9e 01       	movw	r18, r28
    a306:	2f 5f       	subi	r18, 0xFF	; 255
    a308:	3f 4f       	sbci	r19, 0xFF	; 255
    a30a:	28 8b       	std	Y+16, r18	; 0x10
    a30c:	39 8b       	std	Y+17, r19	; 0x11
    a30e:	f3 01       	movw	r30, r6
    a310:	23 81       	ldd	r18, Z+3	; 0x03
    a312:	ee 85       	ldd	r30, Y+14	; 0x0e
    a314:	ff 85       	ldd	r31, Y+15	; 0x0f
    a316:	23 fd       	sbrc	r18, 3
    a318:	85 91       	lpm	r24, Z+
    a31a:	23 ff       	sbrs	r18, 3
    a31c:	81 91       	ld	r24, Z+
    a31e:	ee 87       	std	Y+14, r30	; 0x0e
    a320:	ff 87       	std	Y+15, r31	; 0x0f
    a322:	88 23       	and	r24, r24
    a324:	09 f4       	brne	.+2      	; 0xa328 <vfprintf+0x6c>
    a326:	5a c3       	rjmp	.+1716   	; 0xa9dc <vfprintf+0x720>
    a328:	85 32       	cpi	r24, 0x25	; 37
    a32a:	51 f4       	brne	.+20     	; 0xa340 <vfprintf+0x84>
    a32c:	ee 85       	ldd	r30, Y+14	; 0x0e
    a32e:	ff 85       	ldd	r31, Y+15	; 0x0f
    a330:	23 fd       	sbrc	r18, 3
    a332:	85 91       	lpm	r24, Z+
    a334:	23 ff       	sbrs	r18, 3
    a336:	81 91       	ld	r24, Z+
    a338:	ee 87       	std	Y+14, r30	; 0x0e
    a33a:	ff 87       	std	Y+15, r31	; 0x0f
    a33c:	85 32       	cpi	r24, 0x25	; 37
    a33e:	29 f4       	brne	.+10     	; 0xa34a <vfprintf+0x8e>
    a340:	90 e0       	ldi	r25, 0x00	; 0
    a342:	b3 01       	movw	r22, r6
    a344:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a348:	e2 cf       	rjmp	.-60     	; 0xa30e <vfprintf+0x52>
    a34a:	98 2f       	mov	r25, r24
    a34c:	10 e0       	ldi	r17, 0x00	; 0
    a34e:	88 24       	eor	r8, r8
    a350:	99 24       	eor	r9, r9
    a352:	10 32       	cpi	r17, 0x20	; 32
    a354:	b0 f4       	brcc	.+44     	; 0xa382 <vfprintf+0xc6>
    a356:	9b 32       	cpi	r25, 0x2B	; 43
    a358:	69 f0       	breq	.+26     	; 0xa374 <vfprintf+0xb8>
    a35a:	9c 32       	cpi	r25, 0x2C	; 44
    a35c:	28 f4       	brcc	.+10     	; 0xa368 <vfprintf+0xac>
    a35e:	90 32       	cpi	r25, 0x20	; 32
    a360:	51 f0       	breq	.+20     	; 0xa376 <vfprintf+0xba>
    a362:	93 32       	cpi	r25, 0x23	; 35
    a364:	71 f4       	brne	.+28     	; 0xa382 <vfprintf+0xc6>
    a366:	0b c0       	rjmp	.+22     	; 0xa37e <vfprintf+0xc2>
    a368:	9d 32       	cpi	r25, 0x2D	; 45
    a36a:	39 f0       	breq	.+14     	; 0xa37a <vfprintf+0xbe>
    a36c:	90 33       	cpi	r25, 0x30	; 48
    a36e:	49 f4       	brne	.+18     	; 0xa382 <vfprintf+0xc6>
    a370:	11 60       	ori	r17, 0x01	; 1
    a372:	28 c0       	rjmp	.+80     	; 0xa3c4 <vfprintf+0x108>
    a374:	12 60       	ori	r17, 0x02	; 2
    a376:	14 60       	ori	r17, 0x04	; 4
    a378:	25 c0       	rjmp	.+74     	; 0xa3c4 <vfprintf+0x108>
    a37a:	18 60       	ori	r17, 0x08	; 8
    a37c:	23 c0       	rjmp	.+70     	; 0xa3c4 <vfprintf+0x108>
    a37e:	10 61       	ori	r17, 0x10	; 16
    a380:	21 c0       	rjmp	.+66     	; 0xa3c4 <vfprintf+0x108>
    a382:	17 fd       	sbrc	r17, 7
    a384:	2a c0       	rjmp	.+84     	; 0xa3da <vfprintf+0x11e>
    a386:	89 2f       	mov	r24, r25
    a388:	80 53       	subi	r24, 0x30	; 48
    a38a:	8a 30       	cpi	r24, 0x0A	; 10
    a38c:	78 f4       	brcc	.+30     	; 0xa3ac <vfprintf+0xf0>
    a38e:	16 ff       	sbrs	r17, 6
    a390:	06 c0       	rjmp	.+12     	; 0xa39e <vfprintf+0xe2>
    a392:	fa e0       	ldi	r31, 0x0A	; 10
    a394:	9f 9e       	mul	r9, r31
    a396:	90 2c       	mov	r9, r0
    a398:	11 24       	eor	r1, r1
    a39a:	98 0e       	add	r9, r24
    a39c:	13 c0       	rjmp	.+38     	; 0xa3c4 <vfprintf+0x108>
    a39e:	3a e0       	ldi	r19, 0x0A	; 10
    a3a0:	83 9e       	mul	r8, r19
    a3a2:	80 2c       	mov	r8, r0
    a3a4:	11 24       	eor	r1, r1
    a3a6:	88 0e       	add	r8, r24
    a3a8:	10 62       	ori	r17, 0x20	; 32
    a3aa:	0c c0       	rjmp	.+24     	; 0xa3c4 <vfprintf+0x108>
    a3ac:	9e 32       	cpi	r25, 0x2E	; 46
    a3ae:	21 f4       	brne	.+8      	; 0xa3b8 <vfprintf+0xfc>
    a3b0:	16 fd       	sbrc	r17, 6
    a3b2:	14 c3       	rjmp	.+1576   	; 0xa9dc <vfprintf+0x720>
    a3b4:	10 64       	ori	r17, 0x40	; 64
    a3b6:	06 c0       	rjmp	.+12     	; 0xa3c4 <vfprintf+0x108>
    a3b8:	9c 36       	cpi	r25, 0x6C	; 108
    a3ba:	11 f4       	brne	.+4      	; 0xa3c0 <vfprintf+0x104>
    a3bc:	10 68       	ori	r17, 0x80	; 128
    a3be:	02 c0       	rjmp	.+4      	; 0xa3c4 <vfprintf+0x108>
    a3c0:	98 36       	cpi	r25, 0x68	; 104
    a3c2:	59 f4       	brne	.+22     	; 0xa3da <vfprintf+0x11e>
    a3c4:	ee 85       	ldd	r30, Y+14	; 0x0e
    a3c6:	ff 85       	ldd	r31, Y+15	; 0x0f
    a3c8:	23 fd       	sbrc	r18, 3
    a3ca:	95 91       	lpm	r25, Z+
    a3cc:	23 ff       	sbrs	r18, 3
    a3ce:	91 91       	ld	r25, Z+
    a3d0:	ee 87       	std	Y+14, r30	; 0x0e
    a3d2:	ff 87       	std	Y+15, r31	; 0x0f
    a3d4:	99 23       	and	r25, r25
    a3d6:	09 f0       	breq	.+2      	; 0xa3da <vfprintf+0x11e>
    a3d8:	bc cf       	rjmp	.-136    	; 0xa352 <vfprintf+0x96>
    a3da:	89 2f       	mov	r24, r25
    a3dc:	85 54       	subi	r24, 0x45	; 69
    a3de:	83 30       	cpi	r24, 0x03	; 3
    a3e0:	20 f4       	brcc	.+8      	; 0xa3ea <vfprintf+0x12e>
    a3e2:	81 2f       	mov	r24, r17
    a3e4:	80 61       	ori	r24, 0x10	; 16
    a3e6:	90 5e       	subi	r25, 0xE0	; 224
    a3e8:	07 c0       	rjmp	.+14     	; 0xa3f8 <vfprintf+0x13c>
    a3ea:	89 2f       	mov	r24, r25
    a3ec:	85 56       	subi	r24, 0x65	; 101
    a3ee:	83 30       	cpi	r24, 0x03	; 3
    a3f0:	08 f0       	brcs	.+2      	; 0xa3f4 <vfprintf+0x138>
    a3f2:	9f c1       	rjmp	.+830    	; 0xa732 <vfprintf+0x476>
    a3f4:	81 2f       	mov	r24, r17
    a3f6:	8f 7e       	andi	r24, 0xEF	; 239
    a3f8:	86 fd       	sbrc	r24, 6
    a3fa:	02 c0       	rjmp	.+4      	; 0xa400 <vfprintf+0x144>
    a3fc:	76 e0       	ldi	r23, 0x06	; 6
    a3fe:	97 2e       	mov	r9, r23
    a400:	6f e3       	ldi	r22, 0x3F	; 63
    a402:	f6 2e       	mov	r15, r22
    a404:	f8 22       	and	r15, r24
    a406:	95 36       	cpi	r25, 0x65	; 101
    a408:	19 f4       	brne	.+6      	; 0xa410 <vfprintf+0x154>
    a40a:	f0 e4       	ldi	r31, 0x40	; 64
    a40c:	ff 2a       	or	r15, r31
    a40e:	07 c0       	rjmp	.+14     	; 0xa41e <vfprintf+0x162>
    a410:	96 36       	cpi	r25, 0x66	; 102
    a412:	19 f4       	brne	.+6      	; 0xa41a <vfprintf+0x15e>
    a414:	20 e8       	ldi	r18, 0x80	; 128
    a416:	f2 2a       	or	r15, r18
    a418:	02 c0       	rjmp	.+4      	; 0xa41e <vfprintf+0x162>
    a41a:	91 10       	cpse	r9, r1
    a41c:	9a 94       	dec	r9
    a41e:	f7 fe       	sbrs	r15, 7
    a420:	0a c0       	rjmp	.+20     	; 0xa436 <vfprintf+0x17a>
    a422:	3b e3       	ldi	r19, 0x3B	; 59
    a424:	39 15       	cp	r19, r9
    a426:	18 f4       	brcc	.+6      	; 0xa42e <vfprintf+0x172>
    a428:	5c e3       	ldi	r21, 0x3C	; 60
    a42a:	b5 2e       	mov	r11, r21
    a42c:	02 c0       	rjmp	.+4      	; 0xa432 <vfprintf+0x176>
    a42e:	b9 2c       	mov	r11, r9
    a430:	b3 94       	inc	r11
    a432:	27 e0       	ldi	r18, 0x07	; 7
    a434:	09 c0       	rjmp	.+18     	; 0xa448 <vfprintf+0x18c>
    a436:	47 e0       	ldi	r20, 0x07	; 7
    a438:	49 15       	cp	r20, r9
    a43a:	20 f4       	brcc	.+8      	; 0xa444 <vfprintf+0x188>
    a43c:	bb 24       	eor	r11, r11
    a43e:	47 e0       	ldi	r20, 0x07	; 7
    a440:	94 2e       	mov	r9, r20
    a442:	f7 cf       	rjmp	.-18     	; 0xa432 <vfprintf+0x176>
    a444:	29 2d       	mov	r18, r9
    a446:	bb 24       	eor	r11, r11
    a448:	c6 01       	movw	r24, r12
    a44a:	04 96       	adiw	r24, 0x04	; 4
    a44c:	8c 87       	std	Y+12, r24	; 0x0c
    a44e:	9d 87       	std	Y+13, r25	; 0x0d
    a450:	f6 01       	movw	r30, r12
    a452:	60 81       	ld	r22, Z
    a454:	71 81       	ldd	r23, Z+1	; 0x01
    a456:	82 81       	ldd	r24, Z+2	; 0x02
    a458:	93 81       	ldd	r25, Z+3	; 0x03
    a45a:	ae 01       	movw	r20, r28
    a45c:	4f 5f       	subi	r20, 0xFF	; 255
    a45e:	5f 4f       	sbci	r21, 0xFF	; 255
    a460:	0b 2d       	mov	r16, r11
    a462:	0e 94 3f 5b 	call	0xb67e	; 0xb67e <__ftoa_engine>
    a466:	6c 01       	movw	r12, r24
    a468:	09 81       	ldd	r16, Y+1	; 0x01
    a46a:	20 2e       	mov	r2, r16
    a46c:	33 24       	eor	r3, r3
    a46e:	00 ff       	sbrs	r16, 0
    a470:	04 c0       	rjmp	.+8      	; 0xa47a <vfprintf+0x1be>
    a472:	03 fd       	sbrc	r16, 3
    a474:	02 c0       	rjmp	.+4      	; 0xa47a <vfprintf+0x1be>
    a476:	1d e2       	ldi	r17, 0x2D	; 45
    a478:	09 c0       	rjmp	.+18     	; 0xa48c <vfprintf+0x1d0>
    a47a:	f1 fe       	sbrs	r15, 1
    a47c:	02 c0       	rjmp	.+4      	; 0xa482 <vfprintf+0x1c6>
    a47e:	1b e2       	ldi	r17, 0x2B	; 43
    a480:	05 c0       	rjmp	.+10     	; 0xa48c <vfprintf+0x1d0>
    a482:	f2 fc       	sbrc	r15, 2
    a484:	02 c0       	rjmp	.+4      	; 0xa48a <vfprintf+0x1ce>
    a486:	10 e0       	ldi	r17, 0x00	; 0
    a488:	01 c0       	rjmp	.+2      	; 0xa48c <vfprintf+0x1d0>
    a48a:	10 e2       	ldi	r17, 0x20	; 32
    a48c:	c1 01       	movw	r24, r2
    a48e:	8c 70       	andi	r24, 0x0C	; 12
    a490:	90 70       	andi	r25, 0x00	; 0
    a492:	89 2b       	or	r24, r25
    a494:	b9 f1       	breq	.+110    	; 0xa504 <vfprintf+0x248>
    a496:	11 23       	and	r17, r17
    a498:	11 f4       	brne	.+4      	; 0xa49e <vfprintf+0x1e2>
    a49a:	83 e0       	ldi	r24, 0x03	; 3
    a49c:	01 c0       	rjmp	.+2      	; 0xa4a0 <vfprintf+0x1e4>
    a49e:	84 e0       	ldi	r24, 0x04	; 4
    a4a0:	88 15       	cp	r24, r8
    a4a2:	10 f0       	brcs	.+4      	; 0xa4a8 <vfprintf+0x1ec>
    a4a4:	88 24       	eor	r8, r8
    a4a6:	0a c0       	rjmp	.+20     	; 0xa4bc <vfprintf+0x200>
    a4a8:	88 1a       	sub	r8, r24
    a4aa:	f3 fc       	sbrc	r15, 3
    a4ac:	07 c0       	rjmp	.+14     	; 0xa4bc <vfprintf+0x200>
    a4ae:	80 e2       	ldi	r24, 0x20	; 32
    a4b0:	90 e0       	ldi	r25, 0x00	; 0
    a4b2:	b3 01       	movw	r22, r6
    a4b4:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a4b8:	8a 94       	dec	r8
    a4ba:	c9 f7       	brne	.-14     	; 0xa4ae <vfprintf+0x1f2>
    a4bc:	11 23       	and	r17, r17
    a4be:	29 f0       	breq	.+10     	; 0xa4ca <vfprintf+0x20e>
    a4c0:	81 2f       	mov	r24, r17
    a4c2:	90 e0       	ldi	r25, 0x00	; 0
    a4c4:	b3 01       	movw	r22, r6
    a4c6:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a4ca:	23 fe       	sbrs	r2, 3
    a4cc:	03 c0       	rjmp	.+6      	; 0xa4d4 <vfprintf+0x218>
    a4ce:	03 e3       	ldi	r16, 0x33	; 51
    a4d0:	12 e0       	ldi	r17, 0x02	; 2
    a4d2:	0e c0       	rjmp	.+28     	; 0xa4f0 <vfprintf+0x234>
    a4d4:	07 e3       	ldi	r16, 0x37	; 55
    a4d6:	12 e0       	ldi	r17, 0x02	; 2
    a4d8:	0b c0       	rjmp	.+22     	; 0xa4f0 <vfprintf+0x234>
    a4da:	e1 14       	cp	r14, r1
    a4dc:	f1 04       	cpc	r15, r1
    a4de:	09 f0       	breq	.+2      	; 0xa4e2 <vfprintf+0x226>
    a4e0:	80 52       	subi	r24, 0x20	; 32
    a4e2:	90 e0       	ldi	r25, 0x00	; 0
    a4e4:	b3 01       	movw	r22, r6
    a4e6:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a4ea:	0f 5f       	subi	r16, 0xFF	; 255
    a4ec:	1f 4f       	sbci	r17, 0xFF	; 255
    a4ee:	05 c0       	rjmp	.+10     	; 0xa4fa <vfprintf+0x23e>
    a4f0:	ef 2c       	mov	r14, r15
    a4f2:	ff 24       	eor	r15, r15
    a4f4:	f0 e1       	ldi	r31, 0x10	; 16
    a4f6:	ef 22       	and	r14, r31
    a4f8:	ff 24       	eor	r15, r15
    a4fa:	f8 01       	movw	r30, r16
    a4fc:	84 91       	lpm	r24, Z+
    a4fe:	88 23       	and	r24, r24
    a500:	61 f7       	brne	.-40     	; 0xa4da <vfprintf+0x21e>
    a502:	14 c1       	rjmp	.+552    	; 0xa72c <vfprintf+0x470>
    a504:	f7 fe       	sbrs	r15, 7
    a506:	12 c0       	rjmp	.+36     	; 0xa52c <vfprintf+0x270>
    a508:	bc 0c       	add	r11, r12
    a50a:	24 fe       	sbrs	r2, 4
    a50c:	04 c0       	rjmp	.+8      	; 0xa516 <vfprintf+0x25a>
    a50e:	8a 81       	ldd	r24, Y+2	; 0x02
    a510:	81 33       	cpi	r24, 0x31	; 49
    a512:	09 f4       	brne	.+2      	; 0xa516 <vfprintf+0x25a>
    a514:	ba 94       	dec	r11
    a516:	1b 14       	cp	r1, r11
    a518:	1c f0       	brlt	.+6      	; 0xa520 <vfprintf+0x264>
    a51a:	bb 24       	eor	r11, r11
    a51c:	b3 94       	inc	r11
    a51e:	2d c0       	rjmp	.+90     	; 0xa57a <vfprintf+0x2be>
    a520:	f8 e0       	ldi	r31, 0x08	; 8
    a522:	fb 15       	cp	r31, r11
    a524:	50 f5       	brcc	.+84     	; 0xa57a <vfprintf+0x2be>
    a526:	38 e0       	ldi	r19, 0x08	; 8
    a528:	b3 2e       	mov	r11, r19
    a52a:	27 c0       	rjmp	.+78     	; 0xa57a <vfprintf+0x2be>
    a52c:	f6 fc       	sbrc	r15, 6
    a52e:	25 c0       	rjmp	.+74     	; 0xa57a <vfprintf+0x2be>
    a530:	89 2d       	mov	r24, r9
    a532:	90 e0       	ldi	r25, 0x00	; 0
    a534:	8c 15       	cp	r24, r12
    a536:	9d 05       	cpc	r25, r13
    a538:	4c f0       	brlt	.+18     	; 0xa54c <vfprintf+0x290>
    a53a:	2c ef       	ldi	r18, 0xFC	; 252
    a53c:	c2 16       	cp	r12, r18
    a53e:	2f ef       	ldi	r18, 0xFF	; 255
    a540:	d2 06       	cpc	r13, r18
    a542:	24 f0       	brlt	.+8      	; 0xa54c <vfprintf+0x290>
    a544:	30 e8       	ldi	r19, 0x80	; 128
    a546:	f3 2a       	or	r15, r19
    a548:	01 c0       	rjmp	.+2      	; 0xa54c <vfprintf+0x290>
    a54a:	9a 94       	dec	r9
    a54c:	99 20       	and	r9, r9
    a54e:	49 f0       	breq	.+18     	; 0xa562 <vfprintf+0x2a6>
    a550:	e2 e0       	ldi	r30, 0x02	; 2
    a552:	f0 e0       	ldi	r31, 0x00	; 0
    a554:	ec 0f       	add	r30, r28
    a556:	fd 1f       	adc	r31, r29
    a558:	e9 0d       	add	r30, r9
    a55a:	f1 1d       	adc	r31, r1
    a55c:	80 81       	ld	r24, Z
    a55e:	80 33       	cpi	r24, 0x30	; 48
    a560:	a1 f3       	breq	.-24     	; 0xa54a <vfprintf+0x28e>
    a562:	f7 fe       	sbrs	r15, 7
    a564:	0a c0       	rjmp	.+20     	; 0xa57a <vfprintf+0x2be>
    a566:	b9 2c       	mov	r11, r9
    a568:	b3 94       	inc	r11
    a56a:	89 2d       	mov	r24, r9
    a56c:	90 e0       	ldi	r25, 0x00	; 0
    a56e:	c8 16       	cp	r12, r24
    a570:	d9 06       	cpc	r13, r25
    a572:	14 f0       	brlt	.+4      	; 0xa578 <vfprintf+0x2bc>
    a574:	99 24       	eor	r9, r9
    a576:	01 c0       	rjmp	.+2      	; 0xa57a <vfprintf+0x2be>
    a578:	9c 18       	sub	r9, r12
    a57a:	f7 fc       	sbrc	r15, 7
    a57c:	03 c0       	rjmp	.+6      	; 0xa584 <vfprintf+0x2c8>
    a57e:	25 e0       	ldi	r18, 0x05	; 5
    a580:	30 e0       	ldi	r19, 0x00	; 0
    a582:	09 c0       	rjmp	.+18     	; 0xa596 <vfprintf+0x2da>
    a584:	1c 14       	cp	r1, r12
    a586:	1d 04       	cpc	r1, r13
    a588:	1c f0       	brlt	.+6      	; 0xa590 <vfprintf+0x2d4>
    a58a:	21 e0       	ldi	r18, 0x01	; 1
    a58c:	30 e0       	ldi	r19, 0x00	; 0
    a58e:	03 c0       	rjmp	.+6      	; 0xa596 <vfprintf+0x2da>
    a590:	96 01       	movw	r18, r12
    a592:	2f 5f       	subi	r18, 0xFF	; 255
    a594:	3f 4f       	sbci	r19, 0xFF	; 255
    a596:	11 23       	and	r17, r17
    a598:	11 f0       	breq	.+4      	; 0xa59e <vfprintf+0x2e2>
    a59a:	2f 5f       	subi	r18, 0xFF	; 255
    a59c:	3f 4f       	sbci	r19, 0xFF	; 255
    a59e:	99 20       	and	r9, r9
    a5a0:	29 f0       	breq	.+10     	; 0xa5ac <vfprintf+0x2f0>
    a5a2:	89 2d       	mov	r24, r9
    a5a4:	90 e0       	ldi	r25, 0x00	; 0
    a5a6:	01 96       	adiw	r24, 0x01	; 1
    a5a8:	28 0f       	add	r18, r24
    a5aa:	39 1f       	adc	r19, r25
    a5ac:	88 2d       	mov	r24, r8
    a5ae:	90 e0       	ldi	r25, 0x00	; 0
    a5b0:	28 17       	cp	r18, r24
    a5b2:	39 07       	cpc	r19, r25
    a5b4:	14 f0       	brlt	.+4      	; 0xa5ba <vfprintf+0x2fe>
    a5b6:	88 24       	eor	r8, r8
    a5b8:	01 c0       	rjmp	.+2      	; 0xa5bc <vfprintf+0x300>
    a5ba:	82 1a       	sub	r8, r18
    a5bc:	4f 2c       	mov	r4, r15
    a5be:	55 24       	eor	r5, r5
    a5c0:	c2 01       	movw	r24, r4
    a5c2:	89 70       	andi	r24, 0x09	; 9
    a5c4:	90 70       	andi	r25, 0x00	; 0
    a5c6:	89 2b       	or	r24, r25
    a5c8:	39 f0       	breq	.+14     	; 0xa5d8 <vfprintf+0x31c>
    a5ca:	08 c0       	rjmp	.+16     	; 0xa5dc <vfprintf+0x320>
    a5cc:	80 e2       	ldi	r24, 0x20	; 32
    a5ce:	90 e0       	ldi	r25, 0x00	; 0
    a5d0:	b3 01       	movw	r22, r6
    a5d2:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a5d6:	8a 94       	dec	r8
    a5d8:	88 20       	and	r8, r8
    a5da:	c1 f7       	brne	.-16     	; 0xa5cc <vfprintf+0x310>
    a5dc:	11 23       	and	r17, r17
    a5de:	29 f0       	breq	.+10     	; 0xa5ea <vfprintf+0x32e>
    a5e0:	81 2f       	mov	r24, r17
    a5e2:	90 e0       	ldi	r25, 0x00	; 0
    a5e4:	b3 01       	movw	r22, r6
    a5e6:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a5ea:	43 fe       	sbrs	r4, 3
    a5ec:	07 c0       	rjmp	.+14     	; 0xa5fc <vfprintf+0x340>
    a5ee:	08 c0       	rjmp	.+16     	; 0xa600 <vfprintf+0x344>
    a5f0:	80 e3       	ldi	r24, 0x30	; 48
    a5f2:	90 e0       	ldi	r25, 0x00	; 0
    a5f4:	b3 01       	movw	r22, r6
    a5f6:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a5fa:	8a 94       	dec	r8
    a5fc:	88 20       	and	r8, r8
    a5fe:	c1 f7       	brne	.-16     	; 0xa5f0 <vfprintf+0x334>
    a600:	f7 fe       	sbrs	r15, 7
    a602:	46 c0       	rjmp	.+140    	; 0xa690 <vfprintf+0x3d4>
    a604:	86 01       	movw	r16, r12
    a606:	d7 fe       	sbrs	r13, 7
    a608:	02 c0       	rjmp	.+4      	; 0xa60e <vfprintf+0x352>
    a60a:	00 e0       	ldi	r16, 0x00	; 0
    a60c:	10 e0       	ldi	r17, 0x00	; 0
    a60e:	76 01       	movw	r14, r12
    a610:	08 94       	sec
    a612:	e1 1c       	adc	r14, r1
    a614:	f1 1c       	adc	r15, r1
    a616:	e0 1a       	sub	r14, r16
    a618:	f1 0a       	sbc	r15, r17
    a61a:	41 e0       	ldi	r20, 0x01	; 1
    a61c:	50 e0       	ldi	r21, 0x00	; 0
    a61e:	4c 0f       	add	r20, r28
    a620:	5d 1f       	adc	r21, r29
    a622:	e4 0e       	add	r14, r20
    a624:	f5 1e       	adc	r15, r21
    a626:	26 01       	movw	r4, r12
    a628:	4b 18       	sub	r4, r11
    a62a:	51 08       	sbc	r5, r1
    a62c:	89 2d       	mov	r24, r9
    a62e:	90 e0       	ldi	r25, 0x00	; 0
    a630:	aa 24       	eor	r10, r10
    a632:	bb 24       	eor	r11, r11
    a634:	a8 1a       	sub	r10, r24
    a636:	b9 0a       	sbc	r11, r25
    a638:	5f ef       	ldi	r21, 0xFF	; 255
    a63a:	0f 3f       	cpi	r16, 0xFF	; 255
    a63c:	15 07       	cpc	r17, r21
    a63e:	29 f4       	brne	.+10     	; 0xa64a <vfprintf+0x38e>
    a640:	8e e2       	ldi	r24, 0x2E	; 46
    a642:	90 e0       	ldi	r25, 0x00	; 0
    a644:	b3 01       	movw	r22, r6
    a646:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a64a:	c0 16       	cp	r12, r16
    a64c:	d1 06       	cpc	r13, r17
    a64e:	34 f0       	brlt	.+12     	; 0xa65c <vfprintf+0x3a0>
    a650:	40 16       	cp	r4, r16
    a652:	51 06       	cpc	r5, r17
    a654:	1c f4       	brge	.+6      	; 0xa65c <vfprintf+0x3a0>
    a656:	f7 01       	movw	r30, r14
    a658:	80 81       	ld	r24, Z
    a65a:	01 c0       	rjmp	.+2      	; 0xa65e <vfprintf+0x3a2>
    a65c:	80 e3       	ldi	r24, 0x30	; 48
    a65e:	01 50       	subi	r16, 0x01	; 1
    a660:	10 40       	sbci	r17, 0x00	; 0
    a662:	08 94       	sec
    a664:	e1 1c       	adc	r14, r1
    a666:	f1 1c       	adc	r15, r1
    a668:	0a 15       	cp	r16, r10
    a66a:	1b 05       	cpc	r17, r11
    a66c:	2c f0       	brlt	.+10     	; 0xa678 <vfprintf+0x3bc>
    a66e:	90 e0       	ldi	r25, 0x00	; 0
    a670:	b3 01       	movw	r22, r6
    a672:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a676:	e0 cf       	rjmp	.-64     	; 0xa638 <vfprintf+0x37c>
    a678:	0c 15       	cp	r16, r12
    a67a:	1d 05       	cpc	r17, r13
    a67c:	39 f4       	brne	.+14     	; 0xa68c <vfprintf+0x3d0>
    a67e:	9a 81       	ldd	r25, Y+2	; 0x02
    a680:	96 33       	cpi	r25, 0x36	; 54
    a682:	18 f4       	brcc	.+6      	; 0xa68a <vfprintf+0x3ce>
    a684:	95 33       	cpi	r25, 0x35	; 53
    a686:	11 f4       	brne	.+4      	; 0xa68c <vfprintf+0x3d0>
    a688:	24 fe       	sbrs	r2, 4
    a68a:	81 e3       	ldi	r24, 0x31	; 49
    a68c:	90 e0       	ldi	r25, 0x00	; 0
    a68e:	4b c0       	rjmp	.+150    	; 0xa726 <vfprintf+0x46a>
    a690:	8a 81       	ldd	r24, Y+2	; 0x02
    a692:	81 33       	cpi	r24, 0x31	; 49
    a694:	09 f0       	breq	.+2      	; 0xa698 <vfprintf+0x3dc>
    a696:	0f 7e       	andi	r16, 0xEF	; 239
    a698:	90 e0       	ldi	r25, 0x00	; 0
    a69a:	b3 01       	movw	r22, r6
    a69c:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a6a0:	99 20       	and	r9, r9
    a6a2:	a1 f0       	breq	.+40     	; 0xa6cc <vfprintf+0x410>
    a6a4:	8e e2       	ldi	r24, 0x2E	; 46
    a6a6:	90 e0       	ldi	r25, 0x00	; 0
    a6a8:	b3 01       	movw	r22, r6
    a6aa:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a6ae:	12 e0       	ldi	r17, 0x02	; 2
    a6b0:	e1 e0       	ldi	r30, 0x01	; 1
    a6b2:	f0 e0       	ldi	r31, 0x00	; 0
    a6b4:	ec 0f       	add	r30, r28
    a6b6:	fd 1f       	adc	r31, r29
    a6b8:	e1 0f       	add	r30, r17
    a6ba:	f1 1d       	adc	r31, r1
    a6bc:	1f 5f       	subi	r17, 0xFF	; 255
    a6be:	80 81       	ld	r24, Z
    a6c0:	90 e0       	ldi	r25, 0x00	; 0
    a6c2:	b3 01       	movw	r22, r6
    a6c4:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a6c8:	9a 94       	dec	r9
    a6ca:	91 f7       	brne	.-28     	; 0xa6b0 <vfprintf+0x3f4>
    a6cc:	44 fc       	sbrc	r4, 4
    a6ce:	03 c0       	rjmp	.+6      	; 0xa6d6 <vfprintf+0x41a>
    a6d0:	85 e6       	ldi	r24, 0x65	; 101
    a6d2:	90 e0       	ldi	r25, 0x00	; 0
    a6d4:	02 c0       	rjmp	.+4      	; 0xa6da <vfprintf+0x41e>
    a6d6:	85 e4       	ldi	r24, 0x45	; 69
    a6d8:	90 e0       	ldi	r25, 0x00	; 0
    a6da:	b3 01       	movw	r22, r6
    a6dc:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a6e0:	d7 fc       	sbrc	r13, 7
    a6e2:	05 c0       	rjmp	.+10     	; 0xa6ee <vfprintf+0x432>
    a6e4:	c1 14       	cp	r12, r1
    a6e6:	d1 04       	cpc	r13, r1
    a6e8:	41 f4       	brne	.+16     	; 0xa6fa <vfprintf+0x43e>
    a6ea:	04 ff       	sbrs	r16, 4
    a6ec:	06 c0       	rjmp	.+12     	; 0xa6fa <vfprintf+0x43e>
    a6ee:	d0 94       	com	r13
    a6f0:	c1 94       	neg	r12
    a6f2:	d1 08       	sbc	r13, r1
    a6f4:	d3 94       	inc	r13
    a6f6:	8d e2       	ldi	r24, 0x2D	; 45
    a6f8:	01 c0       	rjmp	.+2      	; 0xa6fc <vfprintf+0x440>
    a6fa:	8b e2       	ldi	r24, 0x2B	; 43
    a6fc:	90 e0       	ldi	r25, 0x00	; 0
    a6fe:	b3 01       	movw	r22, r6
    a700:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a704:	80 e3       	ldi	r24, 0x30	; 48
    a706:	05 c0       	rjmp	.+10     	; 0xa712 <vfprintf+0x456>
    a708:	8f 5f       	subi	r24, 0xFF	; 255
    a70a:	26 ef       	ldi	r18, 0xF6	; 246
    a70c:	3f ef       	ldi	r19, 0xFF	; 255
    a70e:	c2 0e       	add	r12, r18
    a710:	d3 1e       	adc	r13, r19
    a712:	3a e0       	ldi	r19, 0x0A	; 10
    a714:	c3 16       	cp	r12, r19
    a716:	d1 04       	cpc	r13, r1
    a718:	bc f7       	brge	.-18     	; 0xa708 <vfprintf+0x44c>
    a71a:	90 e0       	ldi	r25, 0x00	; 0
    a71c:	b3 01       	movw	r22, r6
    a71e:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a722:	c6 01       	movw	r24, r12
    a724:	c0 96       	adiw	r24, 0x30	; 48
    a726:	b3 01       	movw	r22, r6
    a728:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a72c:	cc 84       	ldd	r12, Y+12	; 0x0c
    a72e:	dd 84       	ldd	r13, Y+13	; 0x0d
    a730:	52 c1       	rjmp	.+676    	; 0xa9d6 <vfprintf+0x71a>
    a732:	93 36       	cpi	r25, 0x63	; 99
    a734:	31 f0       	breq	.+12     	; 0xa742 <vfprintf+0x486>
    a736:	93 37       	cpi	r25, 0x73	; 115
    a738:	99 f0       	breq	.+38     	; 0xa760 <vfprintf+0x4a4>
    a73a:	93 35       	cpi	r25, 0x53	; 83
    a73c:	09 f0       	breq	.+2      	; 0xa740 <vfprintf+0x484>
    a73e:	59 c0       	rjmp	.+178    	; 0xa7f2 <vfprintf+0x536>
    a740:	23 c0       	rjmp	.+70     	; 0xa788 <vfprintf+0x4cc>
    a742:	f6 01       	movw	r30, r12
    a744:	80 81       	ld	r24, Z
    a746:	89 83       	std	Y+1, r24	; 0x01
    a748:	5e 01       	movw	r10, r28
    a74a:	08 94       	sec
    a74c:	a1 1c       	adc	r10, r1
    a74e:	b1 1c       	adc	r11, r1
    a750:	22 e0       	ldi	r18, 0x02	; 2
    a752:	30 e0       	ldi	r19, 0x00	; 0
    a754:	c2 0e       	add	r12, r18
    a756:	d3 1e       	adc	r13, r19
    a758:	21 e0       	ldi	r18, 0x01	; 1
    a75a:	e2 2e       	mov	r14, r18
    a75c:	f1 2c       	mov	r15, r1
    a75e:	12 c0       	rjmp	.+36     	; 0xa784 <vfprintf+0x4c8>
    a760:	f6 01       	movw	r30, r12
    a762:	a0 80       	ld	r10, Z
    a764:	b1 80       	ldd	r11, Z+1	; 0x01
    a766:	16 fd       	sbrc	r17, 6
    a768:	03 c0       	rjmp	.+6      	; 0xa770 <vfprintf+0x4b4>
    a76a:	6f ef       	ldi	r22, 0xFF	; 255
    a76c:	7f ef       	ldi	r23, 0xFF	; 255
    a76e:	02 c0       	rjmp	.+4      	; 0xa774 <vfprintf+0x4b8>
    a770:	69 2d       	mov	r22, r9
    a772:	70 e0       	ldi	r23, 0x00	; 0
    a774:	22 e0       	ldi	r18, 0x02	; 2
    a776:	30 e0       	ldi	r19, 0x00	; 0
    a778:	c2 0e       	add	r12, r18
    a77a:	d3 1e       	adc	r13, r19
    a77c:	c5 01       	movw	r24, r10
    a77e:	0e 94 52 5c 	call	0xb8a4	; 0xb8a4 <strnlen>
    a782:	7c 01       	movw	r14, r24
    a784:	1f 77       	andi	r17, 0x7F	; 127
    a786:	13 c0       	rjmp	.+38     	; 0xa7ae <vfprintf+0x4f2>
    a788:	f6 01       	movw	r30, r12
    a78a:	a0 80       	ld	r10, Z
    a78c:	b1 80       	ldd	r11, Z+1	; 0x01
    a78e:	16 fd       	sbrc	r17, 6
    a790:	03 c0       	rjmp	.+6      	; 0xa798 <vfprintf+0x4dc>
    a792:	6f ef       	ldi	r22, 0xFF	; 255
    a794:	7f ef       	ldi	r23, 0xFF	; 255
    a796:	02 c0       	rjmp	.+4      	; 0xa79c <vfprintf+0x4e0>
    a798:	69 2d       	mov	r22, r9
    a79a:	70 e0       	ldi	r23, 0x00	; 0
    a79c:	22 e0       	ldi	r18, 0x02	; 2
    a79e:	30 e0       	ldi	r19, 0x00	; 0
    a7a0:	c2 0e       	add	r12, r18
    a7a2:	d3 1e       	adc	r13, r19
    a7a4:	c5 01       	movw	r24, r10
    a7a6:	0e 94 37 5c 	call	0xb86e	; 0xb86e <strnlen_P>
    a7aa:	7c 01       	movw	r14, r24
    a7ac:	10 68       	ori	r17, 0x80	; 128
    a7ae:	13 ff       	sbrs	r17, 3
    a7b0:	07 c0       	rjmp	.+14     	; 0xa7c0 <vfprintf+0x504>
    a7b2:	1b c0       	rjmp	.+54     	; 0xa7ea <vfprintf+0x52e>
    a7b4:	80 e2       	ldi	r24, 0x20	; 32
    a7b6:	90 e0       	ldi	r25, 0x00	; 0
    a7b8:	b3 01       	movw	r22, r6
    a7ba:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a7be:	8a 94       	dec	r8
    a7c0:	88 2d       	mov	r24, r8
    a7c2:	90 e0       	ldi	r25, 0x00	; 0
    a7c4:	e8 16       	cp	r14, r24
    a7c6:	f9 06       	cpc	r15, r25
    a7c8:	a8 f3       	brcs	.-22     	; 0xa7b4 <vfprintf+0x4f8>
    a7ca:	0f c0       	rjmp	.+30     	; 0xa7ea <vfprintf+0x52e>
    a7cc:	f5 01       	movw	r30, r10
    a7ce:	17 fd       	sbrc	r17, 7
    a7d0:	85 91       	lpm	r24, Z+
    a7d2:	17 ff       	sbrs	r17, 7
    a7d4:	81 91       	ld	r24, Z+
    a7d6:	5f 01       	movw	r10, r30
    a7d8:	90 e0       	ldi	r25, 0x00	; 0
    a7da:	b3 01       	movw	r22, r6
    a7dc:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a7e0:	81 10       	cpse	r8, r1
    a7e2:	8a 94       	dec	r8
    a7e4:	08 94       	sec
    a7e6:	e1 08       	sbc	r14, r1
    a7e8:	f1 08       	sbc	r15, r1
    a7ea:	e1 14       	cp	r14, r1
    a7ec:	f1 04       	cpc	r15, r1
    a7ee:	71 f7       	brne	.-36     	; 0xa7cc <vfprintf+0x510>
    a7f0:	f2 c0       	rjmp	.+484    	; 0xa9d6 <vfprintf+0x71a>
    a7f2:	94 36       	cpi	r25, 0x64	; 100
    a7f4:	11 f0       	breq	.+4      	; 0xa7fa <vfprintf+0x53e>
    a7f6:	99 36       	cpi	r25, 0x69	; 105
    a7f8:	89 f5       	brne	.+98     	; 0xa85c <vfprintf+0x5a0>
    a7fa:	17 ff       	sbrs	r17, 7
    a7fc:	08 c0       	rjmp	.+16     	; 0xa80e <vfprintf+0x552>
    a7fe:	f6 01       	movw	r30, r12
    a800:	20 81       	ld	r18, Z
    a802:	31 81       	ldd	r19, Z+1	; 0x01
    a804:	42 81       	ldd	r20, Z+2	; 0x02
    a806:	53 81       	ldd	r21, Z+3	; 0x03
    a808:	84 e0       	ldi	r24, 0x04	; 4
    a80a:	90 e0       	ldi	r25, 0x00	; 0
    a80c:	0a c0       	rjmp	.+20     	; 0xa822 <vfprintf+0x566>
    a80e:	f6 01       	movw	r30, r12
    a810:	80 81       	ld	r24, Z
    a812:	91 81       	ldd	r25, Z+1	; 0x01
    a814:	9c 01       	movw	r18, r24
    a816:	44 27       	eor	r20, r20
    a818:	37 fd       	sbrc	r19, 7
    a81a:	40 95       	com	r20
    a81c:	54 2f       	mov	r21, r20
    a81e:	82 e0       	ldi	r24, 0x02	; 2
    a820:	90 e0       	ldi	r25, 0x00	; 0
    a822:	c8 0e       	add	r12, r24
    a824:	d9 1e       	adc	r13, r25
    a826:	9f e6       	ldi	r25, 0x6F	; 111
    a828:	f9 2e       	mov	r15, r25
    a82a:	f1 22       	and	r15, r17
    a82c:	57 ff       	sbrs	r21, 7
    a82e:	09 c0       	rjmp	.+18     	; 0xa842 <vfprintf+0x586>
    a830:	50 95       	com	r21
    a832:	40 95       	com	r20
    a834:	30 95       	com	r19
    a836:	21 95       	neg	r18
    a838:	3f 4f       	sbci	r19, 0xFF	; 255
    a83a:	4f 4f       	sbci	r20, 0xFF	; 255
    a83c:	5f 4f       	sbci	r21, 0xFF	; 255
    a83e:	90 e8       	ldi	r25, 0x80	; 128
    a840:	f9 2a       	or	r15, r25
    a842:	ca 01       	movw	r24, r20
    a844:	b9 01       	movw	r22, r18
    a846:	ae 01       	movw	r20, r28
    a848:	4f 5f       	subi	r20, 0xFF	; 255
    a84a:	5f 4f       	sbci	r21, 0xFF	; 255
    a84c:	2a e0       	ldi	r18, 0x0A	; 10
    a84e:	30 e0       	ldi	r19, 0x00	; 0
    a850:	0e 94 b4 5c 	call	0xb968	; 0xb968 <__ultoa_invert>
    a854:	e8 2e       	mov	r14, r24
    a856:	e8 89       	ldd	r30, Y+16	; 0x10
    a858:	ee 1a       	sub	r14, r30
    a85a:	41 c0       	rjmp	.+130    	; 0xa8de <vfprintf+0x622>
    a85c:	95 37       	cpi	r25, 0x75	; 117
    a85e:	21 f4       	brne	.+8      	; 0xa868 <vfprintf+0x5ac>
    a860:	1f 7e       	andi	r17, 0xEF	; 239
    a862:	2a e0       	ldi	r18, 0x0A	; 10
    a864:	30 e0       	ldi	r19, 0x00	; 0
    a866:	1c c0       	rjmp	.+56     	; 0xa8a0 <vfprintf+0x5e4>
    a868:	19 7f       	andi	r17, 0xF9	; 249
    a86a:	9f 36       	cpi	r25, 0x6F	; 111
    a86c:	61 f0       	breq	.+24     	; 0xa886 <vfprintf+0x5ca>
    a86e:	90 37       	cpi	r25, 0x70	; 112
    a870:	20 f4       	brcc	.+8      	; 0xa87a <vfprintf+0x5be>
    a872:	98 35       	cpi	r25, 0x58	; 88
    a874:	09 f0       	breq	.+2      	; 0xa878 <vfprintf+0x5bc>
    a876:	b2 c0       	rjmp	.+356    	; 0xa9dc <vfprintf+0x720>
    a878:	0f c0       	rjmp	.+30     	; 0xa898 <vfprintf+0x5dc>
    a87a:	90 37       	cpi	r25, 0x70	; 112
    a87c:	39 f0       	breq	.+14     	; 0xa88c <vfprintf+0x5d0>
    a87e:	98 37       	cpi	r25, 0x78	; 120
    a880:	09 f0       	breq	.+2      	; 0xa884 <vfprintf+0x5c8>
    a882:	ac c0       	rjmp	.+344    	; 0xa9dc <vfprintf+0x720>
    a884:	04 c0       	rjmp	.+8      	; 0xa88e <vfprintf+0x5d2>
    a886:	28 e0       	ldi	r18, 0x08	; 8
    a888:	30 e0       	ldi	r19, 0x00	; 0
    a88a:	0a c0       	rjmp	.+20     	; 0xa8a0 <vfprintf+0x5e4>
    a88c:	10 61       	ori	r17, 0x10	; 16
    a88e:	14 fd       	sbrc	r17, 4
    a890:	14 60       	ori	r17, 0x04	; 4
    a892:	20 e1       	ldi	r18, 0x10	; 16
    a894:	30 e0       	ldi	r19, 0x00	; 0
    a896:	04 c0       	rjmp	.+8      	; 0xa8a0 <vfprintf+0x5e4>
    a898:	14 fd       	sbrc	r17, 4
    a89a:	16 60       	ori	r17, 0x06	; 6
    a89c:	20 e1       	ldi	r18, 0x10	; 16
    a89e:	32 e0       	ldi	r19, 0x02	; 2
    a8a0:	17 ff       	sbrs	r17, 7
    a8a2:	08 c0       	rjmp	.+16     	; 0xa8b4 <vfprintf+0x5f8>
    a8a4:	f6 01       	movw	r30, r12
    a8a6:	60 81       	ld	r22, Z
    a8a8:	71 81       	ldd	r23, Z+1	; 0x01
    a8aa:	82 81       	ldd	r24, Z+2	; 0x02
    a8ac:	93 81       	ldd	r25, Z+3	; 0x03
    a8ae:	44 e0       	ldi	r20, 0x04	; 4
    a8b0:	50 e0       	ldi	r21, 0x00	; 0
    a8b2:	08 c0       	rjmp	.+16     	; 0xa8c4 <vfprintf+0x608>
    a8b4:	f6 01       	movw	r30, r12
    a8b6:	80 81       	ld	r24, Z
    a8b8:	91 81       	ldd	r25, Z+1	; 0x01
    a8ba:	bc 01       	movw	r22, r24
    a8bc:	80 e0       	ldi	r24, 0x00	; 0
    a8be:	90 e0       	ldi	r25, 0x00	; 0
    a8c0:	42 e0       	ldi	r20, 0x02	; 2
    a8c2:	50 e0       	ldi	r21, 0x00	; 0
    a8c4:	c4 0e       	add	r12, r20
    a8c6:	d5 1e       	adc	r13, r21
    a8c8:	ae 01       	movw	r20, r28
    a8ca:	4f 5f       	subi	r20, 0xFF	; 255
    a8cc:	5f 4f       	sbci	r21, 0xFF	; 255
    a8ce:	0e 94 b4 5c 	call	0xb968	; 0xb968 <__ultoa_invert>
    a8d2:	e8 2e       	mov	r14, r24
    a8d4:	58 89       	ldd	r21, Y+16	; 0x10
    a8d6:	e5 1a       	sub	r14, r21
    a8d8:	8f e7       	ldi	r24, 0x7F	; 127
    a8da:	f8 2e       	mov	r15, r24
    a8dc:	f1 22       	and	r15, r17
    a8de:	f6 fe       	sbrs	r15, 6
    a8e0:	0b c0       	rjmp	.+22     	; 0xa8f8 <vfprintf+0x63c>
    a8e2:	8e ef       	ldi	r24, 0xFE	; 254
    a8e4:	f8 22       	and	r15, r24
    a8e6:	e9 14       	cp	r14, r9
    a8e8:	38 f4       	brcc	.+14     	; 0xa8f8 <vfprintf+0x63c>
    a8ea:	f4 fe       	sbrs	r15, 4
    a8ec:	07 c0       	rjmp	.+14     	; 0xa8fc <vfprintf+0x640>
    a8ee:	f2 fc       	sbrc	r15, 2
    a8f0:	05 c0       	rjmp	.+10     	; 0xa8fc <vfprintf+0x640>
    a8f2:	9f ee       	ldi	r25, 0xEF	; 239
    a8f4:	f9 22       	and	r15, r25
    a8f6:	02 c0       	rjmp	.+4      	; 0xa8fc <vfprintf+0x640>
    a8f8:	1e 2d       	mov	r17, r14
    a8fa:	01 c0       	rjmp	.+2      	; 0xa8fe <vfprintf+0x642>
    a8fc:	19 2d       	mov	r17, r9
    a8fe:	f4 fe       	sbrs	r15, 4
    a900:	0d c0       	rjmp	.+26     	; 0xa91c <vfprintf+0x660>
    a902:	fe 01       	movw	r30, r28
    a904:	ee 0d       	add	r30, r14
    a906:	f1 1d       	adc	r31, r1
    a908:	80 81       	ld	r24, Z
    a90a:	80 33       	cpi	r24, 0x30	; 48
    a90c:	19 f4       	brne	.+6      	; 0xa914 <vfprintf+0x658>
    a90e:	e9 ee       	ldi	r30, 0xE9	; 233
    a910:	fe 22       	and	r15, r30
    a912:	08 c0       	rjmp	.+16     	; 0xa924 <vfprintf+0x668>
    a914:	1f 5f       	subi	r17, 0xFF	; 255
    a916:	f2 fe       	sbrs	r15, 2
    a918:	05 c0       	rjmp	.+10     	; 0xa924 <vfprintf+0x668>
    a91a:	03 c0       	rjmp	.+6      	; 0xa922 <vfprintf+0x666>
    a91c:	8f 2d       	mov	r24, r15
    a91e:	86 78       	andi	r24, 0x86	; 134
    a920:	09 f0       	breq	.+2      	; 0xa924 <vfprintf+0x668>
    a922:	1f 5f       	subi	r17, 0xFF	; 255
    a924:	0f 2d       	mov	r16, r15
    a926:	f3 fc       	sbrc	r15, 3
    a928:	14 c0       	rjmp	.+40     	; 0xa952 <vfprintf+0x696>
    a92a:	f0 fe       	sbrs	r15, 0
    a92c:	0f c0       	rjmp	.+30     	; 0xa94c <vfprintf+0x690>
    a92e:	18 15       	cp	r17, r8
    a930:	10 f0       	brcs	.+4      	; 0xa936 <vfprintf+0x67a>
    a932:	9e 2c       	mov	r9, r14
    a934:	0b c0       	rjmp	.+22     	; 0xa94c <vfprintf+0x690>
    a936:	9e 2c       	mov	r9, r14
    a938:	98 0c       	add	r9, r8
    a93a:	91 1a       	sub	r9, r17
    a93c:	18 2d       	mov	r17, r8
    a93e:	06 c0       	rjmp	.+12     	; 0xa94c <vfprintf+0x690>
    a940:	80 e2       	ldi	r24, 0x20	; 32
    a942:	90 e0       	ldi	r25, 0x00	; 0
    a944:	b3 01       	movw	r22, r6
    a946:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a94a:	1f 5f       	subi	r17, 0xFF	; 255
    a94c:	18 15       	cp	r17, r8
    a94e:	c0 f3       	brcs	.-16     	; 0xa940 <vfprintf+0x684>
    a950:	04 c0       	rjmp	.+8      	; 0xa95a <vfprintf+0x69e>
    a952:	18 15       	cp	r17, r8
    a954:	10 f4       	brcc	.+4      	; 0xa95a <vfprintf+0x69e>
    a956:	81 1a       	sub	r8, r17
    a958:	01 c0       	rjmp	.+2      	; 0xa95c <vfprintf+0x6a0>
    a95a:	88 24       	eor	r8, r8
    a95c:	04 ff       	sbrs	r16, 4
    a95e:	0f c0       	rjmp	.+30     	; 0xa97e <vfprintf+0x6c2>
    a960:	80 e3       	ldi	r24, 0x30	; 48
    a962:	90 e0       	ldi	r25, 0x00	; 0
    a964:	b3 01       	movw	r22, r6
    a966:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a96a:	02 ff       	sbrs	r16, 2
    a96c:	1d c0       	rjmp	.+58     	; 0xa9a8 <vfprintf+0x6ec>
    a96e:	01 fd       	sbrc	r16, 1
    a970:	03 c0       	rjmp	.+6      	; 0xa978 <vfprintf+0x6bc>
    a972:	88 e7       	ldi	r24, 0x78	; 120
    a974:	90 e0       	ldi	r25, 0x00	; 0
    a976:	0e c0       	rjmp	.+28     	; 0xa994 <vfprintf+0x6d8>
    a978:	88 e5       	ldi	r24, 0x58	; 88
    a97a:	90 e0       	ldi	r25, 0x00	; 0
    a97c:	0b c0       	rjmp	.+22     	; 0xa994 <vfprintf+0x6d8>
    a97e:	80 2f       	mov	r24, r16
    a980:	86 78       	andi	r24, 0x86	; 134
    a982:	91 f0       	breq	.+36     	; 0xa9a8 <vfprintf+0x6ec>
    a984:	01 ff       	sbrs	r16, 1
    a986:	02 c0       	rjmp	.+4      	; 0xa98c <vfprintf+0x6d0>
    a988:	8b e2       	ldi	r24, 0x2B	; 43
    a98a:	01 c0       	rjmp	.+2      	; 0xa98e <vfprintf+0x6d2>
    a98c:	80 e2       	ldi	r24, 0x20	; 32
    a98e:	f7 fc       	sbrc	r15, 7
    a990:	8d e2       	ldi	r24, 0x2D	; 45
    a992:	90 e0       	ldi	r25, 0x00	; 0
    a994:	b3 01       	movw	r22, r6
    a996:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a99a:	06 c0       	rjmp	.+12     	; 0xa9a8 <vfprintf+0x6ec>
    a99c:	80 e3       	ldi	r24, 0x30	; 48
    a99e:	90 e0       	ldi	r25, 0x00	; 0
    a9a0:	b3 01       	movw	r22, r6
    a9a2:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a9a6:	9a 94       	dec	r9
    a9a8:	e9 14       	cp	r14, r9
    a9aa:	c0 f3       	brcs	.-16     	; 0xa99c <vfprintf+0x6e0>
    a9ac:	ea 94       	dec	r14
    a9ae:	e1 e0       	ldi	r30, 0x01	; 1
    a9b0:	f0 e0       	ldi	r31, 0x00	; 0
    a9b2:	ec 0f       	add	r30, r28
    a9b4:	fd 1f       	adc	r31, r29
    a9b6:	ee 0d       	add	r30, r14
    a9b8:	f1 1d       	adc	r31, r1
    a9ba:	80 81       	ld	r24, Z
    a9bc:	90 e0       	ldi	r25, 0x00	; 0
    a9be:	b3 01       	movw	r22, r6
    a9c0:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a9c4:	ee 20       	and	r14, r14
    a9c6:	91 f7       	brne	.-28     	; 0xa9ac <vfprintf+0x6f0>
    a9c8:	06 c0       	rjmp	.+12     	; 0xa9d6 <vfprintf+0x71a>
    a9ca:	80 e2       	ldi	r24, 0x20	; 32
    a9cc:	90 e0       	ldi	r25, 0x00	; 0
    a9ce:	b3 01       	movw	r22, r6
    a9d0:	0e 94 65 5c 	call	0xb8ca	; 0xb8ca <fputc>
    a9d4:	8a 94       	dec	r8
    a9d6:	88 20       	and	r8, r8
    a9d8:	c1 f7       	brne	.-16     	; 0xa9ca <vfprintf+0x70e>
    a9da:	99 cc       	rjmp	.-1742   	; 0xa30e <vfprintf+0x52>
    a9dc:	f3 01       	movw	r30, r6
    a9de:	66 81       	ldd	r22, Z+6	; 0x06
    a9e0:	77 81       	ldd	r23, Z+7	; 0x07
    a9e2:	cb 01       	movw	r24, r22
    a9e4:	61 96       	adiw	r28, 0x11	; 17
    a9e6:	cd bf       	out	0x3d, r28	; 61
    a9e8:	de bf       	out	0x3e, r29	; 62
    a9ea:	cf 91       	pop	r28
    a9ec:	df 91       	pop	r29
    a9ee:	1f 91       	pop	r17
    a9f0:	0f 91       	pop	r16
    a9f2:	ff 90       	pop	r15
    a9f4:	ef 90       	pop	r14
    a9f6:	df 90       	pop	r13
    a9f8:	cf 90       	pop	r12
    a9fa:	bf 90       	pop	r11
    a9fc:	af 90       	pop	r10
    a9fe:	9f 90       	pop	r9
    aa00:	8f 90       	pop	r8
    aa02:	7f 90       	pop	r7
    aa04:	6f 90       	pop	r6
    aa06:	5f 90       	pop	r5
    aa08:	4f 90       	pop	r4
    aa0a:	3f 90       	pop	r3
    aa0c:	2f 90       	pop	r2
    aa0e:	08 95       	ret

0000aa10 <__subsf3>:
    aa10:	50 58       	subi	r21, 0x80	; 128

0000aa12 <__addsf3>:
    aa12:	bb 27       	eor	r27, r27
    aa14:	aa 27       	eor	r26, r26
    aa16:	0e d0       	rcall	.+28     	; 0xaa34 <__addsf3x>
    aa18:	29 c2       	rjmp	.+1106   	; 0xae6c <__fp_round>
    aa1a:	f2 d1       	rcall	.+996    	; 0xae00 <__fp_pscA>
    aa1c:	30 f0       	brcs	.+12     	; 0xaa2a <__addsf3+0x18>
    aa1e:	f7 d1       	rcall	.+1006   	; 0xae0e <__fp_pscB>
    aa20:	20 f0       	brcs	.+8      	; 0xaa2a <__addsf3+0x18>
    aa22:	31 f4       	brne	.+12     	; 0xaa30 <__addsf3+0x1e>
    aa24:	9f 3f       	cpi	r25, 0xFF	; 255
    aa26:	11 f4       	brne	.+4      	; 0xaa2c <__addsf3+0x1a>
    aa28:	1e f4       	brtc	.+6      	; 0xaa30 <__addsf3+0x1e>
    aa2a:	c2 c1       	rjmp	.+900    	; 0xadb0 <__fp_nan>
    aa2c:	0e f4       	brtc	.+2      	; 0xaa30 <__addsf3+0x1e>
    aa2e:	e0 95       	com	r30
    aa30:	e7 fb       	bst	r30, 7
    aa32:	8f c1       	rjmp	.+798    	; 0xad52 <__fp_inf>

0000aa34 <__addsf3x>:
    aa34:	e9 2f       	mov	r30, r25
    aa36:	3c d2       	rcall	.+1144   	; 0xaeb0 <__fp_split3>
    aa38:	80 f3       	brcs	.-32     	; 0xaa1a <__addsf3+0x8>
    aa3a:	ba 17       	cp	r27, r26
    aa3c:	62 07       	cpc	r22, r18
    aa3e:	73 07       	cpc	r23, r19
    aa40:	84 07       	cpc	r24, r20
    aa42:	95 07       	cpc	r25, r21
    aa44:	18 f0       	brcs	.+6      	; 0xaa4c <__addsf3x+0x18>
    aa46:	71 f4       	brne	.+28     	; 0xaa64 <__addsf3x+0x30>
    aa48:	9e f5       	brtc	.+102    	; 0xaab0 <__addsf3x+0x7c>
    aa4a:	6b c2       	rjmp	.+1238   	; 0xaf22 <__fp_zero>
    aa4c:	0e f4       	brtc	.+2      	; 0xaa50 <__addsf3x+0x1c>
    aa4e:	e0 95       	com	r30
    aa50:	0b 2e       	mov	r0, r27
    aa52:	ba 2f       	mov	r27, r26
    aa54:	a0 2d       	mov	r26, r0
    aa56:	0b 01       	movw	r0, r22
    aa58:	b9 01       	movw	r22, r18
    aa5a:	90 01       	movw	r18, r0
    aa5c:	0c 01       	movw	r0, r24
    aa5e:	ca 01       	movw	r24, r20
    aa60:	a0 01       	movw	r20, r0
    aa62:	11 24       	eor	r1, r1
    aa64:	ff 27       	eor	r31, r31
    aa66:	59 1b       	sub	r21, r25
    aa68:	99 f0       	breq	.+38     	; 0xaa90 <__addsf3x+0x5c>
    aa6a:	59 3f       	cpi	r21, 0xF9	; 249
    aa6c:	50 f4       	brcc	.+20     	; 0xaa82 <__addsf3x+0x4e>
    aa6e:	50 3e       	cpi	r21, 0xE0	; 224
    aa70:	68 f1       	brcs	.+90     	; 0xaacc <__addsf3x+0x98>
    aa72:	1a 16       	cp	r1, r26
    aa74:	f0 40       	sbci	r31, 0x00	; 0
    aa76:	a2 2f       	mov	r26, r18
    aa78:	23 2f       	mov	r18, r19
    aa7a:	34 2f       	mov	r19, r20
    aa7c:	44 27       	eor	r20, r20
    aa7e:	58 5f       	subi	r21, 0xF8	; 248
    aa80:	f3 cf       	rjmp	.-26     	; 0xaa68 <__addsf3x+0x34>
    aa82:	46 95       	lsr	r20
    aa84:	37 95       	ror	r19
    aa86:	27 95       	ror	r18
    aa88:	a7 95       	ror	r26
    aa8a:	f0 40       	sbci	r31, 0x00	; 0
    aa8c:	53 95       	inc	r21
    aa8e:	c9 f7       	brne	.-14     	; 0xaa82 <__addsf3x+0x4e>
    aa90:	7e f4       	brtc	.+30     	; 0xaab0 <__addsf3x+0x7c>
    aa92:	1f 16       	cp	r1, r31
    aa94:	ba 0b       	sbc	r27, r26
    aa96:	62 0b       	sbc	r22, r18
    aa98:	73 0b       	sbc	r23, r19
    aa9a:	84 0b       	sbc	r24, r20
    aa9c:	ba f0       	brmi	.+46     	; 0xaacc <__addsf3x+0x98>
    aa9e:	91 50       	subi	r25, 0x01	; 1
    aaa0:	a1 f0       	breq	.+40     	; 0xaaca <__addsf3x+0x96>
    aaa2:	ff 0f       	add	r31, r31
    aaa4:	bb 1f       	adc	r27, r27
    aaa6:	66 1f       	adc	r22, r22
    aaa8:	77 1f       	adc	r23, r23
    aaaa:	88 1f       	adc	r24, r24
    aaac:	c2 f7       	brpl	.-16     	; 0xaa9e <__addsf3x+0x6a>
    aaae:	0e c0       	rjmp	.+28     	; 0xaacc <__addsf3x+0x98>
    aab0:	ba 0f       	add	r27, r26
    aab2:	62 1f       	adc	r22, r18
    aab4:	73 1f       	adc	r23, r19
    aab6:	84 1f       	adc	r24, r20
    aab8:	48 f4       	brcc	.+18     	; 0xaacc <__addsf3x+0x98>
    aaba:	87 95       	ror	r24
    aabc:	77 95       	ror	r23
    aabe:	67 95       	ror	r22
    aac0:	b7 95       	ror	r27
    aac2:	f7 95       	ror	r31
    aac4:	9e 3f       	cpi	r25, 0xFE	; 254
    aac6:	08 f0       	brcs	.+2      	; 0xaaca <__addsf3x+0x96>
    aac8:	b3 cf       	rjmp	.-154    	; 0xaa30 <__addsf3+0x1e>
    aaca:	93 95       	inc	r25
    aacc:	88 0f       	add	r24, r24
    aace:	08 f0       	brcs	.+2      	; 0xaad2 <__addsf3x+0x9e>
    aad0:	99 27       	eor	r25, r25
    aad2:	ee 0f       	add	r30, r30
    aad4:	97 95       	ror	r25
    aad6:	87 95       	ror	r24
    aad8:	08 95       	ret

0000aada <atan>:
    aada:	df 93       	push	r29
    aadc:	dd 27       	eor	r29, r29
    aade:	b9 2f       	mov	r27, r25
    aae0:	bf 77       	andi	r27, 0x7F	; 127
    aae2:	40 e8       	ldi	r20, 0x80	; 128
    aae4:	5f e3       	ldi	r21, 0x3F	; 63
    aae6:	16 16       	cp	r1, r22
    aae8:	17 06       	cpc	r1, r23
    aaea:	48 07       	cpc	r20, r24
    aaec:	5b 07       	cpc	r21, r27
    aaee:	10 f4       	brcc	.+4      	; 0xaaf4 <atan+0x1a>
    aaf0:	d9 2f       	mov	r29, r25
    aaf2:	83 d2       	rcall	.+1286   	; 0xaffa <inverse>
    aaf4:	9f 93       	push	r25
    aaf6:	8f 93       	push	r24
    aaf8:	7f 93       	push	r23
    aafa:	6f 93       	push	r22
    aafc:	96 d3       	rcall	.+1836   	; 0xb22a <square>
    aafe:	e8 ee       	ldi	r30, 0xE8	; 232
    ab00:	f1 e0       	ldi	r31, 0x01	; 1
    ab02:	59 d1       	rcall	.+690    	; 0xadb6 <__fp_powser>
    ab04:	b3 d1       	rcall	.+870    	; 0xae6c <__fp_round>
    ab06:	2f 91       	pop	r18
    ab08:	3f 91       	pop	r19
    ab0a:	4f 91       	pop	r20
    ab0c:	5f 91       	pop	r21
    ab0e:	ee d2       	rcall	.+1500   	; 0xb0ec <__mulsf3x>
    ab10:	dd 23       	and	r29, r29
    ab12:	49 f0       	breq	.+18     	; 0xab26 <atan+0x4c>
    ab14:	90 58       	subi	r25, 0x80	; 128
    ab16:	a2 ea       	ldi	r26, 0xA2	; 162
    ab18:	2a ed       	ldi	r18, 0xDA	; 218
    ab1a:	3f e0       	ldi	r19, 0x0F	; 15
    ab1c:	49 ec       	ldi	r20, 0xC9	; 201
    ab1e:	5f e3       	ldi	r21, 0x3F	; 63
    ab20:	d0 78       	andi	r29, 0x80	; 128
    ab22:	5d 27       	eor	r21, r29
    ab24:	87 df       	rcall	.-242    	; 0xaa34 <__addsf3x>
    ab26:	df 91       	pop	r29
    ab28:	a1 c1       	rjmp	.+834    	; 0xae6c <__fp_round>

0000ab2a <ceil>:
    ab2a:	e4 d1       	rcall	.+968    	; 0xaef4 <__fp_trunc>
    ab2c:	80 f0       	brcs	.+32     	; 0xab4e <ceil+0x24>
    ab2e:	9f 37       	cpi	r25, 0x7F	; 127
    ab30:	40 f4       	brcc	.+16     	; 0xab42 <ceil+0x18>
    ab32:	91 11       	cpse	r25, r1
    ab34:	0e f4       	brtc	.+2      	; 0xab38 <ceil+0xe>
    ab36:	f6 c1       	rjmp	.+1004   	; 0xaf24 <__fp_szero>
    ab38:	60 e0       	ldi	r22, 0x00	; 0
    ab3a:	70 e0       	ldi	r23, 0x00	; 0
    ab3c:	80 e8       	ldi	r24, 0x80	; 128
    ab3e:	9f e3       	ldi	r25, 0x3F	; 63
    ab40:	08 95       	ret
    ab42:	26 f0       	brts	.+8      	; 0xab4c <ceil+0x22>
    ab44:	1b 16       	cp	r1, r27
    ab46:	61 1d       	adc	r22, r1
    ab48:	71 1d       	adc	r23, r1
    ab4a:	81 1d       	adc	r24, r1
    ab4c:	08 c1       	rjmp	.+528    	; 0xad5e <__fp_mintl>
    ab4e:	22 c1       	rjmp	.+580    	; 0xad94 <__fp_mpack>

0000ab50 <__cmpsf2>:
    ab50:	dc d0       	rcall	.+440    	; 0xad0a <__fp_cmp>
    ab52:	08 f4       	brcc	.+2      	; 0xab56 <__cmpsf2+0x6>
    ab54:	81 e0       	ldi	r24, 0x01	; 1
    ab56:	08 95       	ret

0000ab58 <cos>:
    ab58:	62 d1       	rcall	.+708    	; 0xae1e <__fp_rempio2>
    ab5a:	e3 95       	inc	r30
    ab5c:	98 c1       	rjmp	.+816    	; 0xae8e <__fp_sinus>

0000ab5e <__divsf3>:
    ab5e:	0c d0       	rcall	.+24     	; 0xab78 <__divsf3x>
    ab60:	85 c1       	rjmp	.+778    	; 0xae6c <__fp_round>
    ab62:	55 d1       	rcall	.+682    	; 0xae0e <__fp_pscB>
    ab64:	40 f0       	brcs	.+16     	; 0xab76 <__divsf3+0x18>
    ab66:	4c d1       	rcall	.+664    	; 0xae00 <__fp_pscA>
    ab68:	30 f0       	brcs	.+12     	; 0xab76 <__divsf3+0x18>
    ab6a:	21 f4       	brne	.+8      	; 0xab74 <__divsf3+0x16>
    ab6c:	5f 3f       	cpi	r21, 0xFF	; 255
    ab6e:	19 f0       	breq	.+6      	; 0xab76 <__divsf3+0x18>
    ab70:	f0 c0       	rjmp	.+480    	; 0xad52 <__fp_inf>
    ab72:	51 11       	cpse	r21, r1
    ab74:	d7 c1       	rjmp	.+942    	; 0xaf24 <__fp_szero>
    ab76:	1c c1       	rjmp	.+568    	; 0xadb0 <__fp_nan>

0000ab78 <__divsf3x>:
    ab78:	9b d1       	rcall	.+822    	; 0xaeb0 <__fp_split3>
    ab7a:	98 f3       	brcs	.-26     	; 0xab62 <__divsf3+0x4>

0000ab7c <__divsf3_pse>:
    ab7c:	99 23       	and	r25, r25
    ab7e:	c9 f3       	breq	.-14     	; 0xab72 <__divsf3+0x14>
    ab80:	55 23       	and	r21, r21
    ab82:	b1 f3       	breq	.-20     	; 0xab70 <__divsf3+0x12>
    ab84:	95 1b       	sub	r25, r21
    ab86:	55 0b       	sbc	r21, r21
    ab88:	bb 27       	eor	r27, r27
    ab8a:	aa 27       	eor	r26, r26
    ab8c:	62 17       	cp	r22, r18
    ab8e:	73 07       	cpc	r23, r19
    ab90:	84 07       	cpc	r24, r20
    ab92:	38 f0       	brcs	.+14     	; 0xaba2 <__divsf3_pse+0x26>
    ab94:	9f 5f       	subi	r25, 0xFF	; 255
    ab96:	5f 4f       	sbci	r21, 0xFF	; 255
    ab98:	22 0f       	add	r18, r18
    ab9a:	33 1f       	adc	r19, r19
    ab9c:	44 1f       	adc	r20, r20
    ab9e:	aa 1f       	adc	r26, r26
    aba0:	a9 f3       	breq	.-22     	; 0xab8c <__divsf3_pse+0x10>
    aba2:	33 d0       	rcall	.+102    	; 0xac0a <__divsf3_pse+0x8e>
    aba4:	0e 2e       	mov	r0, r30
    aba6:	3a f0       	brmi	.+14     	; 0xabb6 <__divsf3_pse+0x3a>
    aba8:	e0 e8       	ldi	r30, 0x80	; 128
    abaa:	30 d0       	rcall	.+96     	; 0xac0c <__divsf3_pse+0x90>
    abac:	91 50       	subi	r25, 0x01	; 1
    abae:	50 40       	sbci	r21, 0x00	; 0
    abb0:	e6 95       	lsr	r30
    abb2:	00 1c       	adc	r0, r0
    abb4:	ca f7       	brpl	.-14     	; 0xaba8 <__divsf3_pse+0x2c>
    abb6:	29 d0       	rcall	.+82     	; 0xac0a <__divsf3_pse+0x8e>
    abb8:	fe 2f       	mov	r31, r30
    abba:	27 d0       	rcall	.+78     	; 0xac0a <__divsf3_pse+0x8e>
    abbc:	66 0f       	add	r22, r22
    abbe:	77 1f       	adc	r23, r23
    abc0:	88 1f       	adc	r24, r24
    abc2:	bb 1f       	adc	r27, r27
    abc4:	26 17       	cp	r18, r22
    abc6:	37 07       	cpc	r19, r23
    abc8:	48 07       	cpc	r20, r24
    abca:	ab 07       	cpc	r26, r27
    abcc:	b0 e8       	ldi	r27, 0x80	; 128
    abce:	09 f0       	breq	.+2      	; 0xabd2 <__divsf3_pse+0x56>
    abd0:	bb 0b       	sbc	r27, r27
    abd2:	80 2d       	mov	r24, r0
    abd4:	bf 01       	movw	r22, r30
    abd6:	ff 27       	eor	r31, r31
    abd8:	93 58       	subi	r25, 0x83	; 131
    abda:	5f 4f       	sbci	r21, 0xFF	; 255
    abdc:	2a f0       	brmi	.+10     	; 0xabe8 <__divsf3_pse+0x6c>
    abde:	9e 3f       	cpi	r25, 0xFE	; 254
    abe0:	51 05       	cpc	r21, r1
    abe2:	68 f0       	brcs	.+26     	; 0xabfe <__divsf3_pse+0x82>
    abe4:	b6 c0       	rjmp	.+364    	; 0xad52 <__fp_inf>
    abe6:	9e c1       	rjmp	.+828    	; 0xaf24 <__fp_szero>
    abe8:	5f 3f       	cpi	r21, 0xFF	; 255
    abea:	ec f3       	brlt	.-6      	; 0xabe6 <__divsf3_pse+0x6a>
    abec:	98 3e       	cpi	r25, 0xE8	; 232
    abee:	dc f3       	brlt	.-10     	; 0xabe6 <__divsf3_pse+0x6a>
    abf0:	86 95       	lsr	r24
    abf2:	77 95       	ror	r23
    abf4:	67 95       	ror	r22
    abf6:	b7 95       	ror	r27
    abf8:	f7 95       	ror	r31
    abfa:	9f 5f       	subi	r25, 0xFF	; 255
    abfc:	c9 f7       	brne	.-14     	; 0xabf0 <__divsf3_pse+0x74>
    abfe:	88 0f       	add	r24, r24
    ac00:	91 1d       	adc	r25, r1
    ac02:	96 95       	lsr	r25
    ac04:	87 95       	ror	r24
    ac06:	97 f9       	bld	r25, 7
    ac08:	08 95       	ret
    ac0a:	e1 e0       	ldi	r30, 0x01	; 1
    ac0c:	66 0f       	add	r22, r22
    ac0e:	77 1f       	adc	r23, r23
    ac10:	88 1f       	adc	r24, r24
    ac12:	bb 1f       	adc	r27, r27
    ac14:	62 17       	cp	r22, r18
    ac16:	73 07       	cpc	r23, r19
    ac18:	84 07       	cpc	r24, r20
    ac1a:	ba 07       	cpc	r27, r26
    ac1c:	20 f0       	brcs	.+8      	; 0xac26 <__divsf3_pse+0xaa>
    ac1e:	62 1b       	sub	r22, r18
    ac20:	73 0b       	sbc	r23, r19
    ac22:	84 0b       	sbc	r24, r20
    ac24:	ba 0b       	sbc	r27, r26
    ac26:	ee 1f       	adc	r30, r30
    ac28:	88 f7       	brcc	.-30     	; 0xac0c <__divsf3_pse+0x90>
    ac2a:	e0 95       	com	r30
    ac2c:	08 95       	ret

0000ac2e <__fixsfsi>:
    ac2e:	04 d0       	rcall	.+8      	; 0xac38 <__fixunssfsi>
    ac30:	68 94       	set
    ac32:	b1 11       	cpse	r27, r1
    ac34:	77 c1       	rjmp	.+750    	; 0xaf24 <__fp_szero>
    ac36:	08 95       	ret

0000ac38 <__fixunssfsi>:
    ac38:	43 d1       	rcall	.+646    	; 0xaec0 <__fp_splitA>
    ac3a:	88 f0       	brcs	.+34     	; 0xac5e <__fixunssfsi+0x26>
    ac3c:	9f 57       	subi	r25, 0x7F	; 127
    ac3e:	90 f0       	brcs	.+36     	; 0xac64 <__fixunssfsi+0x2c>
    ac40:	b9 2f       	mov	r27, r25
    ac42:	99 27       	eor	r25, r25
    ac44:	b7 51       	subi	r27, 0x17	; 23
    ac46:	a0 f0       	brcs	.+40     	; 0xac70 <__fixunssfsi+0x38>
    ac48:	d1 f0       	breq	.+52     	; 0xac7e <__fixunssfsi+0x46>
    ac4a:	66 0f       	add	r22, r22
    ac4c:	77 1f       	adc	r23, r23
    ac4e:	88 1f       	adc	r24, r24
    ac50:	99 1f       	adc	r25, r25
    ac52:	1a f0       	brmi	.+6      	; 0xac5a <__fixunssfsi+0x22>
    ac54:	ba 95       	dec	r27
    ac56:	c9 f7       	brne	.-14     	; 0xac4a <__fixunssfsi+0x12>
    ac58:	12 c0       	rjmp	.+36     	; 0xac7e <__fixunssfsi+0x46>
    ac5a:	b1 30       	cpi	r27, 0x01	; 1
    ac5c:	81 f0       	breq	.+32     	; 0xac7e <__fixunssfsi+0x46>
    ac5e:	61 d1       	rcall	.+706    	; 0xaf22 <__fp_zero>
    ac60:	b1 e0       	ldi	r27, 0x01	; 1
    ac62:	08 95       	ret
    ac64:	5e c1       	rjmp	.+700    	; 0xaf22 <__fp_zero>
    ac66:	67 2f       	mov	r22, r23
    ac68:	78 2f       	mov	r23, r24
    ac6a:	88 27       	eor	r24, r24
    ac6c:	b8 5f       	subi	r27, 0xF8	; 248
    ac6e:	39 f0       	breq	.+14     	; 0xac7e <__fixunssfsi+0x46>
    ac70:	b9 3f       	cpi	r27, 0xF9	; 249
    ac72:	cc f3       	brlt	.-14     	; 0xac66 <__fixunssfsi+0x2e>
    ac74:	86 95       	lsr	r24
    ac76:	77 95       	ror	r23
    ac78:	67 95       	ror	r22
    ac7a:	b3 95       	inc	r27
    ac7c:	d9 f7       	brne	.-10     	; 0xac74 <__fixunssfsi+0x3c>
    ac7e:	3e f4       	brtc	.+14     	; 0xac8e <__fixunssfsi+0x56>
    ac80:	90 95       	com	r25
    ac82:	80 95       	com	r24
    ac84:	70 95       	com	r23
    ac86:	61 95       	neg	r22
    ac88:	7f 4f       	sbci	r23, 0xFF	; 255
    ac8a:	8f 4f       	sbci	r24, 0xFF	; 255
    ac8c:	9f 4f       	sbci	r25, 0xFF	; 255
    ac8e:	08 95       	ret

0000ac90 <__floatunsisf>:
    ac90:	e8 94       	clt
    ac92:	09 c0       	rjmp	.+18     	; 0xaca6 <__floatsisf+0x12>

0000ac94 <__floatsisf>:
    ac94:	97 fb       	bst	r25, 7
    ac96:	3e f4       	brtc	.+14     	; 0xaca6 <__floatsisf+0x12>
    ac98:	90 95       	com	r25
    ac9a:	80 95       	com	r24
    ac9c:	70 95       	com	r23
    ac9e:	61 95       	neg	r22
    aca0:	7f 4f       	sbci	r23, 0xFF	; 255
    aca2:	8f 4f       	sbci	r24, 0xFF	; 255
    aca4:	9f 4f       	sbci	r25, 0xFF	; 255
    aca6:	99 23       	and	r25, r25
    aca8:	a9 f0       	breq	.+42     	; 0xacd4 <__floatsisf+0x40>
    acaa:	f9 2f       	mov	r31, r25
    acac:	96 e9       	ldi	r25, 0x96	; 150
    acae:	bb 27       	eor	r27, r27
    acb0:	93 95       	inc	r25
    acb2:	f6 95       	lsr	r31
    acb4:	87 95       	ror	r24
    acb6:	77 95       	ror	r23
    acb8:	67 95       	ror	r22
    acba:	b7 95       	ror	r27
    acbc:	f1 11       	cpse	r31, r1
    acbe:	f8 cf       	rjmp	.-16     	; 0xacb0 <__floatsisf+0x1c>
    acc0:	fa f4       	brpl	.+62     	; 0xad00 <__floatsisf+0x6c>
    acc2:	bb 0f       	add	r27, r27
    acc4:	11 f4       	brne	.+4      	; 0xacca <__floatsisf+0x36>
    acc6:	60 ff       	sbrs	r22, 0
    acc8:	1b c0       	rjmp	.+54     	; 0xad00 <__floatsisf+0x6c>
    acca:	6f 5f       	subi	r22, 0xFF	; 255
    accc:	7f 4f       	sbci	r23, 0xFF	; 255
    acce:	8f 4f       	sbci	r24, 0xFF	; 255
    acd0:	9f 4f       	sbci	r25, 0xFF	; 255
    acd2:	16 c0       	rjmp	.+44     	; 0xad00 <__floatsisf+0x6c>
    acd4:	88 23       	and	r24, r24
    acd6:	11 f0       	breq	.+4      	; 0xacdc <__floatsisf+0x48>
    acd8:	96 e9       	ldi	r25, 0x96	; 150
    acda:	11 c0       	rjmp	.+34     	; 0xacfe <__floatsisf+0x6a>
    acdc:	77 23       	and	r23, r23
    acde:	21 f0       	breq	.+8      	; 0xace8 <__floatsisf+0x54>
    ace0:	9e e8       	ldi	r25, 0x8E	; 142
    ace2:	87 2f       	mov	r24, r23
    ace4:	76 2f       	mov	r23, r22
    ace6:	05 c0       	rjmp	.+10     	; 0xacf2 <__floatsisf+0x5e>
    ace8:	66 23       	and	r22, r22
    acea:	71 f0       	breq	.+28     	; 0xad08 <__floatsisf+0x74>
    acec:	96 e8       	ldi	r25, 0x86	; 134
    acee:	86 2f       	mov	r24, r22
    acf0:	70 e0       	ldi	r23, 0x00	; 0
    acf2:	60 e0       	ldi	r22, 0x00	; 0
    acf4:	2a f0       	brmi	.+10     	; 0xad00 <__floatsisf+0x6c>
    acf6:	9a 95       	dec	r25
    acf8:	66 0f       	add	r22, r22
    acfa:	77 1f       	adc	r23, r23
    acfc:	88 1f       	adc	r24, r24
    acfe:	da f7       	brpl	.-10     	; 0xacf6 <__floatsisf+0x62>
    ad00:	88 0f       	add	r24, r24
    ad02:	96 95       	lsr	r25
    ad04:	87 95       	ror	r24
    ad06:	97 f9       	bld	r25, 7
    ad08:	08 95       	ret

0000ad0a <__fp_cmp>:
    ad0a:	99 0f       	add	r25, r25
    ad0c:	00 08       	sbc	r0, r0
    ad0e:	55 0f       	add	r21, r21
    ad10:	aa 0b       	sbc	r26, r26
    ad12:	e0 e8       	ldi	r30, 0x80	; 128
    ad14:	fe ef       	ldi	r31, 0xFE	; 254
    ad16:	16 16       	cp	r1, r22
    ad18:	17 06       	cpc	r1, r23
    ad1a:	e8 07       	cpc	r30, r24
    ad1c:	f9 07       	cpc	r31, r25
    ad1e:	c0 f0       	brcs	.+48     	; 0xad50 <__fp_cmp+0x46>
    ad20:	12 16       	cp	r1, r18
    ad22:	13 06       	cpc	r1, r19
    ad24:	e4 07       	cpc	r30, r20
    ad26:	f5 07       	cpc	r31, r21
    ad28:	98 f0       	brcs	.+38     	; 0xad50 <__fp_cmp+0x46>
    ad2a:	62 1b       	sub	r22, r18
    ad2c:	73 0b       	sbc	r23, r19
    ad2e:	84 0b       	sbc	r24, r20
    ad30:	95 0b       	sbc	r25, r21
    ad32:	39 f4       	brne	.+14     	; 0xad42 <__fp_cmp+0x38>
    ad34:	0a 26       	eor	r0, r26
    ad36:	61 f0       	breq	.+24     	; 0xad50 <__fp_cmp+0x46>
    ad38:	23 2b       	or	r18, r19
    ad3a:	24 2b       	or	r18, r20
    ad3c:	25 2b       	or	r18, r21
    ad3e:	21 f4       	brne	.+8      	; 0xad48 <__fp_cmp+0x3e>
    ad40:	08 95       	ret
    ad42:	0a 26       	eor	r0, r26
    ad44:	09 f4       	brne	.+2      	; 0xad48 <__fp_cmp+0x3e>
    ad46:	a1 40       	sbci	r26, 0x01	; 1
    ad48:	a6 95       	lsr	r26
    ad4a:	8f ef       	ldi	r24, 0xFF	; 255
    ad4c:	81 1d       	adc	r24, r1
    ad4e:	81 1d       	adc	r24, r1
    ad50:	08 95       	ret

0000ad52 <__fp_inf>:
    ad52:	97 f9       	bld	r25, 7
    ad54:	9f 67       	ori	r25, 0x7F	; 127
    ad56:	80 e8       	ldi	r24, 0x80	; 128
    ad58:	70 e0       	ldi	r23, 0x00	; 0
    ad5a:	60 e0       	ldi	r22, 0x00	; 0
    ad5c:	08 95       	ret

0000ad5e <__fp_mintl>:
    ad5e:	88 23       	and	r24, r24
    ad60:	71 f4       	brne	.+28     	; 0xad7e <__fp_mintl+0x20>
    ad62:	77 23       	and	r23, r23
    ad64:	21 f0       	breq	.+8      	; 0xad6e <__fp_mintl+0x10>
    ad66:	98 50       	subi	r25, 0x08	; 8
    ad68:	87 2b       	or	r24, r23
    ad6a:	76 2f       	mov	r23, r22
    ad6c:	07 c0       	rjmp	.+14     	; 0xad7c <__fp_mintl+0x1e>
    ad6e:	66 23       	and	r22, r22
    ad70:	11 f4       	brne	.+4      	; 0xad76 <__fp_mintl+0x18>
    ad72:	99 27       	eor	r25, r25
    ad74:	0d c0       	rjmp	.+26     	; 0xad90 <__fp_mintl+0x32>
    ad76:	90 51       	subi	r25, 0x10	; 16
    ad78:	86 2b       	or	r24, r22
    ad7a:	70 e0       	ldi	r23, 0x00	; 0
    ad7c:	60 e0       	ldi	r22, 0x00	; 0
    ad7e:	2a f0       	brmi	.+10     	; 0xad8a <__fp_mintl+0x2c>
    ad80:	9a 95       	dec	r25
    ad82:	66 0f       	add	r22, r22
    ad84:	77 1f       	adc	r23, r23
    ad86:	88 1f       	adc	r24, r24
    ad88:	da f7       	brpl	.-10     	; 0xad80 <__fp_mintl+0x22>
    ad8a:	88 0f       	add	r24, r24
    ad8c:	96 95       	lsr	r25
    ad8e:	87 95       	ror	r24
    ad90:	97 f9       	bld	r25, 7
    ad92:	08 95       	ret

0000ad94 <__fp_mpack>:
    ad94:	9f 3f       	cpi	r25, 0xFF	; 255
    ad96:	31 f0       	breq	.+12     	; 0xada4 <__fp_mpack_finite+0xc>

0000ad98 <__fp_mpack_finite>:
    ad98:	91 50       	subi	r25, 0x01	; 1
    ad9a:	20 f4       	brcc	.+8      	; 0xada4 <__fp_mpack_finite+0xc>
    ad9c:	87 95       	ror	r24
    ad9e:	77 95       	ror	r23
    ada0:	67 95       	ror	r22
    ada2:	b7 95       	ror	r27
    ada4:	88 0f       	add	r24, r24
    ada6:	91 1d       	adc	r25, r1
    ada8:	96 95       	lsr	r25
    adaa:	87 95       	ror	r24
    adac:	97 f9       	bld	r25, 7
    adae:	08 95       	ret

0000adb0 <__fp_nan>:
    adb0:	9f ef       	ldi	r25, 0xFF	; 255
    adb2:	80 ec       	ldi	r24, 0xC0	; 192
    adb4:	08 95       	ret

0000adb6 <__fp_powser>:
    adb6:	df 93       	push	r29
    adb8:	cf 93       	push	r28
    adba:	1f 93       	push	r17
    adbc:	0f 93       	push	r16
    adbe:	ff 92       	push	r15
    adc0:	ef 92       	push	r14
    adc2:	df 92       	push	r13
    adc4:	7b 01       	movw	r14, r22
    adc6:	8c 01       	movw	r16, r24
    adc8:	68 94       	set
    adca:	05 c0       	rjmp	.+10     	; 0xadd6 <__fp_powser+0x20>
    adcc:	da 2e       	mov	r13, r26
    adce:	ef 01       	movw	r28, r30
    add0:	8d d1       	rcall	.+794    	; 0xb0ec <__mulsf3x>
    add2:	fe 01       	movw	r30, r28
    add4:	e8 94       	clt
    add6:	a5 91       	lpm	r26, Z+
    add8:	25 91       	lpm	r18, Z+
    adda:	35 91       	lpm	r19, Z+
    addc:	45 91       	lpm	r20, Z+
    adde:	55 91       	lpm	r21, Z+
    ade0:	ae f3       	brts	.-22     	; 0xadcc <__fp_powser+0x16>
    ade2:	ef 01       	movw	r28, r30
    ade4:	27 de       	rcall	.-946    	; 0xaa34 <__addsf3x>
    ade6:	fe 01       	movw	r30, r28
    ade8:	97 01       	movw	r18, r14
    adea:	a8 01       	movw	r20, r16
    adec:	da 94       	dec	r13
    adee:	79 f7       	brne	.-34     	; 0xadce <__fp_powser+0x18>
    adf0:	df 90       	pop	r13
    adf2:	ef 90       	pop	r14
    adf4:	ff 90       	pop	r15
    adf6:	0f 91       	pop	r16
    adf8:	1f 91       	pop	r17
    adfa:	cf 91       	pop	r28
    adfc:	df 91       	pop	r29
    adfe:	08 95       	ret

0000ae00 <__fp_pscA>:
    ae00:	00 24       	eor	r0, r0
    ae02:	0a 94       	dec	r0
    ae04:	16 16       	cp	r1, r22
    ae06:	17 06       	cpc	r1, r23
    ae08:	18 06       	cpc	r1, r24
    ae0a:	09 06       	cpc	r0, r25
    ae0c:	08 95       	ret

0000ae0e <__fp_pscB>:
    ae0e:	00 24       	eor	r0, r0
    ae10:	0a 94       	dec	r0
    ae12:	12 16       	cp	r1, r18
    ae14:	13 06       	cpc	r1, r19
    ae16:	14 06       	cpc	r1, r20
    ae18:	05 06       	cpc	r0, r21
    ae1a:	08 95       	ret
    ae1c:	c9 cf       	rjmp	.-110    	; 0xadb0 <__fp_nan>

0000ae1e <__fp_rempio2>:
    ae1e:	50 d0       	rcall	.+160    	; 0xaec0 <__fp_splitA>
    ae20:	e8 f3       	brcs	.-6      	; 0xae1c <__fp_pscB+0xe>
    ae22:	e8 94       	clt
    ae24:	e0 e0       	ldi	r30, 0x00	; 0
    ae26:	bb 27       	eor	r27, r27
    ae28:	9f 57       	subi	r25, 0x7F	; 127
    ae2a:	f0 f0       	brcs	.+60     	; 0xae68 <__fp_rempio2+0x4a>
    ae2c:	2a ed       	ldi	r18, 0xDA	; 218
    ae2e:	3f e0       	ldi	r19, 0x0F	; 15
    ae30:	49 ec       	ldi	r20, 0xC9	; 201
    ae32:	06 c0       	rjmp	.+12     	; 0xae40 <__fp_rempio2+0x22>
    ae34:	ee 0f       	add	r30, r30
    ae36:	bb 0f       	add	r27, r27
    ae38:	66 1f       	adc	r22, r22
    ae3a:	77 1f       	adc	r23, r23
    ae3c:	88 1f       	adc	r24, r24
    ae3e:	28 f0       	brcs	.+10     	; 0xae4a <__fp_rempio2+0x2c>
    ae40:	b2 3a       	cpi	r27, 0xA2	; 162
    ae42:	62 07       	cpc	r22, r18
    ae44:	73 07       	cpc	r23, r19
    ae46:	84 07       	cpc	r24, r20
    ae48:	28 f0       	brcs	.+10     	; 0xae54 <__fp_rempio2+0x36>
    ae4a:	b2 5a       	subi	r27, 0xA2	; 162
    ae4c:	62 0b       	sbc	r22, r18
    ae4e:	73 0b       	sbc	r23, r19
    ae50:	84 0b       	sbc	r24, r20
    ae52:	e3 95       	inc	r30
    ae54:	9a 95       	dec	r25
    ae56:	72 f7       	brpl	.-36     	; 0xae34 <__fp_rempio2+0x16>
    ae58:	80 38       	cpi	r24, 0x80	; 128
    ae5a:	30 f4       	brcc	.+12     	; 0xae68 <__fp_rempio2+0x4a>
    ae5c:	9a 95       	dec	r25
    ae5e:	bb 0f       	add	r27, r27
    ae60:	66 1f       	adc	r22, r22
    ae62:	77 1f       	adc	r23, r23
    ae64:	88 1f       	adc	r24, r24
    ae66:	d2 f7       	brpl	.-12     	; 0xae5c <__fp_rempio2+0x3e>
    ae68:	90 48       	sbci	r25, 0x80	; 128
    ae6a:	96 cf       	rjmp	.-212    	; 0xad98 <__fp_mpack_finite>

0000ae6c <__fp_round>:
    ae6c:	09 2e       	mov	r0, r25
    ae6e:	03 94       	inc	r0
    ae70:	00 0c       	add	r0, r0
    ae72:	11 f4       	brne	.+4      	; 0xae78 <__fp_round+0xc>
    ae74:	88 23       	and	r24, r24
    ae76:	52 f0       	brmi	.+20     	; 0xae8c <__fp_round+0x20>
    ae78:	bb 0f       	add	r27, r27
    ae7a:	40 f4       	brcc	.+16     	; 0xae8c <__fp_round+0x20>
    ae7c:	bf 2b       	or	r27, r31
    ae7e:	11 f4       	brne	.+4      	; 0xae84 <__fp_round+0x18>
    ae80:	60 ff       	sbrs	r22, 0
    ae82:	04 c0       	rjmp	.+8      	; 0xae8c <__fp_round+0x20>
    ae84:	6f 5f       	subi	r22, 0xFF	; 255
    ae86:	7f 4f       	sbci	r23, 0xFF	; 255
    ae88:	8f 4f       	sbci	r24, 0xFF	; 255
    ae8a:	9f 4f       	sbci	r25, 0xFF	; 255
    ae8c:	08 95       	ret

0000ae8e <__fp_sinus>:
    ae8e:	ef 93       	push	r30
    ae90:	e0 ff       	sbrs	r30, 0
    ae92:	06 c0       	rjmp	.+12     	; 0xaea0 <__fp_sinus+0x12>
    ae94:	a2 ea       	ldi	r26, 0xA2	; 162
    ae96:	2a ed       	ldi	r18, 0xDA	; 218
    ae98:	3f e0       	ldi	r19, 0x0F	; 15
    ae9a:	49 ec       	ldi	r20, 0xC9	; 201
    ae9c:	5f eb       	ldi	r21, 0xBF	; 191
    ae9e:	ca dd       	rcall	.-1132   	; 0xaa34 <__addsf3x>
    aea0:	e5 df       	rcall	.-54     	; 0xae6c <__fp_round>
    aea2:	0f 90       	pop	r0
    aea4:	03 94       	inc	r0
    aea6:	01 fc       	sbrc	r0, 1
    aea8:	90 58       	subi	r25, 0x80	; 128
    aeaa:	e5 e1       	ldi	r30, 0x15	; 21
    aeac:	f2 e0       	ldi	r31, 0x02	; 2
    aeae:	d2 c1       	rjmp	.+932    	; 0xb254 <__fp_powsodd>

0000aeb0 <__fp_split3>:
    aeb0:	57 fd       	sbrc	r21, 7
    aeb2:	90 58       	subi	r25, 0x80	; 128
    aeb4:	44 0f       	add	r20, r20
    aeb6:	55 1f       	adc	r21, r21
    aeb8:	59 f0       	breq	.+22     	; 0xaed0 <__fp_splitA+0x10>
    aeba:	5f 3f       	cpi	r21, 0xFF	; 255
    aebc:	71 f0       	breq	.+28     	; 0xaeda <__fp_splitA+0x1a>
    aebe:	47 95       	ror	r20

0000aec0 <__fp_splitA>:
    aec0:	88 0f       	add	r24, r24
    aec2:	97 fb       	bst	r25, 7
    aec4:	99 1f       	adc	r25, r25
    aec6:	61 f0       	breq	.+24     	; 0xaee0 <__fp_splitA+0x20>
    aec8:	9f 3f       	cpi	r25, 0xFF	; 255
    aeca:	79 f0       	breq	.+30     	; 0xaeea <__fp_splitA+0x2a>
    aecc:	87 95       	ror	r24
    aece:	08 95       	ret
    aed0:	12 16       	cp	r1, r18
    aed2:	13 06       	cpc	r1, r19
    aed4:	14 06       	cpc	r1, r20
    aed6:	55 1f       	adc	r21, r21
    aed8:	f2 cf       	rjmp	.-28     	; 0xaebe <__fp_split3+0xe>
    aeda:	46 95       	lsr	r20
    aedc:	f1 df       	rcall	.-30     	; 0xaec0 <__fp_splitA>
    aede:	08 c0       	rjmp	.+16     	; 0xaef0 <__fp_splitA+0x30>
    aee0:	16 16       	cp	r1, r22
    aee2:	17 06       	cpc	r1, r23
    aee4:	18 06       	cpc	r1, r24
    aee6:	99 1f       	adc	r25, r25
    aee8:	f1 cf       	rjmp	.-30     	; 0xaecc <__fp_splitA+0xc>
    aeea:	86 95       	lsr	r24
    aeec:	71 05       	cpc	r23, r1
    aeee:	61 05       	cpc	r22, r1
    aef0:	08 94       	sec
    aef2:	08 95       	ret

0000aef4 <__fp_trunc>:
    aef4:	e5 df       	rcall	.-54     	; 0xaec0 <__fp_splitA>
    aef6:	a0 f0       	brcs	.+40     	; 0xaf20 <__fp_trunc+0x2c>
    aef8:	be e7       	ldi	r27, 0x7E	; 126
    aefa:	b9 17       	cp	r27, r25
    aefc:	88 f4       	brcc	.+34     	; 0xaf20 <__fp_trunc+0x2c>
    aefe:	bb 27       	eor	r27, r27
    af00:	9f 38       	cpi	r25, 0x8F	; 143
    af02:	60 f4       	brcc	.+24     	; 0xaf1c <__fp_trunc+0x28>
    af04:	16 16       	cp	r1, r22
    af06:	b1 1d       	adc	r27, r1
    af08:	67 2f       	mov	r22, r23
    af0a:	78 2f       	mov	r23, r24
    af0c:	88 27       	eor	r24, r24
    af0e:	98 5f       	subi	r25, 0xF8	; 248
    af10:	f7 cf       	rjmp	.-18     	; 0xaf00 <__fp_trunc+0xc>
    af12:	86 95       	lsr	r24
    af14:	77 95       	ror	r23
    af16:	67 95       	ror	r22
    af18:	b1 1d       	adc	r27, r1
    af1a:	93 95       	inc	r25
    af1c:	96 39       	cpi	r25, 0x96	; 150
    af1e:	c8 f3       	brcs	.-14     	; 0xaf12 <__fp_trunc+0x1e>
    af20:	08 95       	ret

0000af22 <__fp_zero>:
    af22:	e8 94       	clt

0000af24 <__fp_szero>:
    af24:	bb 27       	eor	r27, r27
    af26:	66 27       	eor	r22, r22
    af28:	77 27       	eor	r23, r23
    af2a:	cb 01       	movw	r24, r22
    af2c:	97 f9       	bld	r25, 7
    af2e:	08 95       	ret

0000af30 <__gesf2>:
    af30:	ec de       	rcall	.-552    	; 0xad0a <__fp_cmp>
    af32:	08 f4       	brcc	.+2      	; 0xaf36 <__gesf2+0x6>
    af34:	8f ef       	ldi	r24, 0xFF	; 255
    af36:	08 95       	ret
    af38:	63 df       	rcall	.-314    	; 0xae00 <__fp_pscA>
    af3a:	19 f0       	breq	.+6      	; 0xaf42 <__gesf2+0x12>
    af3c:	68 df       	rcall	.-304    	; 0xae0e <__fp_pscB>
    af3e:	09 f0       	breq	.+2      	; 0xaf42 <__gesf2+0x12>
    af40:	37 cf       	rjmp	.-402    	; 0xadb0 <__fp_nan>
    af42:	07 cf       	rjmp	.-498    	; 0xad52 <__fp_inf>
    af44:	b9 01       	movw	r22, r18
    af46:	ca 01       	movw	r24, r20
    af48:	25 cf       	rjmp	.-438    	; 0xad94 <__fp_mpack>

0000af4a <hypot>:
    af4a:	9f 77       	andi	r25, 0x7F	; 127
    af4c:	5f 77       	andi	r21, 0x7F	; 127
    af4e:	b0 df       	rcall	.-160    	; 0xaeb0 <__fp_split3>
    af50:	98 f3       	brcs	.-26     	; 0xaf38 <__gesf2+0x8>
    af52:	99 23       	and	r25, r25
    af54:	b9 f3       	breq	.-18     	; 0xaf44 <__gesf2+0x14>
    af56:	55 23       	and	r21, r21
    af58:	b9 f3       	breq	.-18     	; 0xaf48 <__gesf2+0x18>
    af5a:	ff 27       	eor	r31, r31
    af5c:	95 17       	cp	r25, r21
    af5e:	58 f4       	brcc	.+22     	; 0xaf76 <hypot+0x2c>
    af60:	e5 2f       	mov	r30, r21
    af62:	e9 1b       	sub	r30, r25
    af64:	ed 30       	cpi	r30, 0x0D	; 13
    af66:	70 f7       	brcc	.-36     	; 0xaf44 <__gesf2+0x14>
    af68:	5e 3b       	cpi	r21, 0xBE	; 190
    af6a:	10 f0       	brcs	.+4      	; 0xaf70 <hypot+0x26>
    af6c:	f1 e4       	ldi	r31, 0x41	; 65
    af6e:	1c c0       	rjmp	.+56     	; 0xafa8 <hypot+0x5e>
    af70:	90 34       	cpi	r25, 0x40	; 64
    af72:	e0 f4       	brcc	.+56     	; 0xafac <hypot+0x62>
    af74:	0a c0       	rjmp	.+20     	; 0xaf8a <hypot+0x40>
    af76:	e9 2f       	mov	r30, r25
    af78:	e5 1b       	sub	r30, r21
    af7a:	ed 30       	cpi	r30, 0x0D	; 13
    af7c:	28 f7       	brcc	.-54     	; 0xaf48 <__gesf2+0x18>
    af7e:	9e 3b       	cpi	r25, 0xBE	; 190
    af80:	10 f0       	brcs	.+4      	; 0xaf86 <hypot+0x3c>
    af82:	f1 e4       	ldi	r31, 0x41	; 65
    af84:	11 c0       	rjmp	.+34     	; 0xafa8 <hypot+0x5e>
    af86:	50 34       	cpi	r21, 0x40	; 64
    af88:	88 f4       	brcc	.+34     	; 0xafac <hypot+0x62>
    af8a:	f9 ea       	ldi	r31, 0xA9	; 169
    af8c:	88 23       	and	r24, r24
    af8e:	2a f0       	brmi	.+10     	; 0xaf9a <hypot+0x50>
    af90:	9a 95       	dec	r25
    af92:	66 0f       	add	r22, r22
    af94:	77 1f       	adc	r23, r23
    af96:	88 1f       	adc	r24, r24
    af98:	da f7       	brpl	.-10     	; 0xaf90 <hypot+0x46>
    af9a:	44 23       	and	r20, r20
    af9c:	2a f0       	brmi	.+10     	; 0xafa8 <hypot+0x5e>
    af9e:	5a 95       	dec	r21
    afa0:	22 0f       	add	r18, r18
    afa2:	33 1f       	adc	r19, r19
    afa4:	44 1f       	adc	r20, r20
    afa6:	da f7       	brpl	.-10     	; 0xaf9e <hypot+0x54>
    afa8:	9f 1b       	sub	r25, r31
    afaa:	5f 1b       	sub	r21, r31
    afac:	ff 93       	push	r31
    afae:	1f 93       	push	r17
    afb0:	0f 93       	push	r16
    afb2:	ff 92       	push	r15
    afb4:	ef 92       	push	r14
    afb6:	79 01       	movw	r14, r18
    afb8:	8a 01       	movw	r16, r20
    afba:	bb 27       	eor	r27, r27
    afbc:	ab 2f       	mov	r26, r27
    afbe:	9b 01       	movw	r18, r22
    afc0:	ac 01       	movw	r20, r24
    afc2:	96 d0       	rcall	.+300    	; 0xb0f0 <__mulsf3_pse>
    afc4:	97 01       	movw	r18, r14
    afc6:	a8 01       	movw	r20, r16
    afc8:	bf 93       	push	r27
    afca:	7b 01       	movw	r14, r22
    afcc:	8c 01       	movw	r16, r24
    afce:	aa 27       	eor	r26, r26
    afd0:	ba 2f       	mov	r27, r26
    afd2:	b9 01       	movw	r22, r18
    afd4:	ca 01       	movw	r24, r20
    afd6:	8c d0       	rcall	.+280    	; 0xb0f0 <__mulsf3_pse>
    afd8:	af 91       	pop	r26
    afda:	97 01       	movw	r18, r14
    afdc:	a8 01       	movw	r20, r16
    afde:	ef 90       	pop	r14
    afe0:	ff 90       	pop	r15
    afe2:	0f 91       	pop	r16
    afe4:	1f 91       	pop	r17
    afe6:	26 dd       	rcall	.-1460   	; 0xaa34 <__addsf3x>
    afe8:	41 df       	rcall	.-382    	; 0xae6c <__fp_round>
    afea:	e1 d0       	rcall	.+450    	; 0xb1ae <sqrt>
    afec:	4f 91       	pop	r20
    afee:	40 ff       	sbrs	r20, 0
    aff0:	08 95       	ret
    aff2:	55 27       	eor	r21, r21
    aff4:	47 fd       	sbrc	r20, 7
    aff6:	50 95       	com	r21
    aff8:	09 c0       	rjmp	.+18     	; 0xb00c <ldexp>

0000affa <inverse>:
    affa:	9b 01       	movw	r18, r22
    affc:	ac 01       	movw	r20, r24
    affe:	60 e0       	ldi	r22, 0x00	; 0
    b000:	70 e0       	ldi	r23, 0x00	; 0
    b002:	80 e8       	ldi	r24, 0x80	; 128
    b004:	9f e3       	ldi	r25, 0x3F	; 63
    b006:	ab cd       	rjmp	.-1194   	; 0xab5e <__divsf3>
    b008:	a4 ce       	rjmp	.-696    	; 0xad52 <__fp_inf>
    b00a:	c4 ce       	rjmp	.-632    	; 0xad94 <__fp_mpack>

0000b00c <ldexp>:
    b00c:	59 df       	rcall	.-334    	; 0xaec0 <__fp_splitA>
    b00e:	e8 f3       	brcs	.-6      	; 0xb00a <inverse+0x10>
    b010:	99 23       	and	r25, r25
    b012:	d9 f3       	breq	.-10     	; 0xb00a <inverse+0x10>
    b014:	94 0f       	add	r25, r20
    b016:	51 1d       	adc	r21, r1
    b018:	bb f3       	brvs	.-18     	; 0xb008 <inverse+0xe>
    b01a:	91 50       	subi	r25, 0x01	; 1
    b01c:	50 40       	sbci	r21, 0x00	; 0
    b01e:	94 f0       	brlt	.+36     	; 0xb044 <ldexp+0x38>
    b020:	59 f0       	breq	.+22     	; 0xb038 <ldexp+0x2c>
    b022:	88 23       	and	r24, r24
    b024:	32 f0       	brmi	.+12     	; 0xb032 <ldexp+0x26>
    b026:	66 0f       	add	r22, r22
    b028:	77 1f       	adc	r23, r23
    b02a:	88 1f       	adc	r24, r24
    b02c:	91 50       	subi	r25, 0x01	; 1
    b02e:	50 40       	sbci	r21, 0x00	; 0
    b030:	c1 f7       	brne	.-16     	; 0xb022 <ldexp+0x16>
    b032:	9e 3f       	cpi	r25, 0xFE	; 254
    b034:	51 05       	cpc	r21, r1
    b036:	44 f7       	brge	.-48     	; 0xb008 <inverse+0xe>
    b038:	88 0f       	add	r24, r24
    b03a:	91 1d       	adc	r25, r1
    b03c:	96 95       	lsr	r25
    b03e:	87 95       	ror	r24
    b040:	97 f9       	bld	r25, 7
    b042:	08 95       	ret
    b044:	5f 3f       	cpi	r21, 0xFF	; 255
    b046:	ac f0       	brlt	.+42     	; 0xb072 <ldexp+0x66>
    b048:	98 3e       	cpi	r25, 0xE8	; 232
    b04a:	9c f0       	brlt	.+38     	; 0xb072 <ldexp+0x66>
    b04c:	bb 27       	eor	r27, r27
    b04e:	86 95       	lsr	r24
    b050:	77 95       	ror	r23
    b052:	67 95       	ror	r22
    b054:	b7 95       	ror	r27
    b056:	08 f4       	brcc	.+2      	; 0xb05a <ldexp+0x4e>
    b058:	b1 60       	ori	r27, 0x01	; 1
    b05a:	93 95       	inc	r25
    b05c:	c1 f7       	brne	.-16     	; 0xb04e <ldexp+0x42>
    b05e:	bb 0f       	add	r27, r27
    b060:	58 f7       	brcc	.-42     	; 0xb038 <ldexp+0x2c>
    b062:	11 f4       	brne	.+4      	; 0xb068 <ldexp+0x5c>
    b064:	60 ff       	sbrs	r22, 0
    b066:	e8 cf       	rjmp	.-48     	; 0xb038 <ldexp+0x2c>
    b068:	6f 5f       	subi	r22, 0xFF	; 255
    b06a:	7f 4f       	sbci	r23, 0xFF	; 255
    b06c:	8f 4f       	sbci	r24, 0xFF	; 255
    b06e:	9f 4f       	sbci	r25, 0xFF	; 255
    b070:	e3 cf       	rjmp	.-58     	; 0xb038 <ldexp+0x2c>
    b072:	58 cf       	rjmp	.-336    	; 0xaf24 <__fp_szero>

0000b074 <lround>:
    b074:	25 df       	rcall	.-438    	; 0xaec0 <__fp_splitA>
    b076:	58 f1       	brcs	.+86     	; 0xb0ce <lround+0x5a>
    b078:	9e 57       	subi	r25, 0x7E	; 126
    b07a:	58 f1       	brcs	.+86     	; 0xb0d2 <lround+0x5e>
    b07c:	98 51       	subi	r25, 0x18	; 24
    b07e:	a0 f0       	brcs	.+40     	; 0xb0a8 <lround+0x34>
    b080:	e9 f0       	breq	.+58     	; 0xb0bc <lround+0x48>
    b082:	98 30       	cpi	r25, 0x08	; 8
    b084:	20 f5       	brcc	.+72     	; 0xb0ce <lround+0x5a>
    b086:	09 2e       	mov	r0, r25
    b088:	99 27       	eor	r25, r25
    b08a:	66 0f       	add	r22, r22
    b08c:	77 1f       	adc	r23, r23
    b08e:	88 1f       	adc	r24, r24
    b090:	99 1f       	adc	r25, r25
    b092:	0a 94       	dec	r0
    b094:	d1 f7       	brne	.-12     	; 0xb08a <lround+0x16>
    b096:	12 c0       	rjmp	.+36     	; 0xb0bc <lround+0x48>
    b098:	06 2e       	mov	r0, r22
    b09a:	67 2f       	mov	r22, r23
    b09c:	78 2f       	mov	r23, r24
    b09e:	88 27       	eor	r24, r24
    b0a0:	98 5f       	subi	r25, 0xF8	; 248
    b0a2:	11 f4       	brne	.+4      	; 0xb0a8 <lround+0x34>
    b0a4:	00 0c       	add	r0, r0
    b0a6:	07 c0       	rjmp	.+14     	; 0xb0b6 <lround+0x42>
    b0a8:	99 3f       	cpi	r25, 0xF9	; 249
    b0aa:	b4 f3       	brlt	.-20     	; 0xb098 <lround+0x24>
    b0ac:	86 95       	lsr	r24
    b0ae:	77 95       	ror	r23
    b0b0:	67 95       	ror	r22
    b0b2:	93 95       	inc	r25
    b0b4:	d9 f7       	brne	.-10     	; 0xb0ac <lround+0x38>
    b0b6:	61 1d       	adc	r22, r1
    b0b8:	71 1d       	adc	r23, r1
    b0ba:	81 1d       	adc	r24, r1
    b0bc:	3e f4       	brtc	.+14     	; 0xb0cc <lround+0x58>
    b0be:	90 95       	com	r25
    b0c0:	80 95       	com	r24
    b0c2:	70 95       	com	r23
    b0c4:	61 95       	neg	r22
    b0c6:	7f 4f       	sbci	r23, 0xFF	; 255
    b0c8:	8f 4f       	sbci	r24, 0xFF	; 255
    b0ca:	9f 4f       	sbci	r25, 0xFF	; 255
    b0cc:	08 95       	ret
    b0ce:	68 94       	set
    b0d0:	29 cf       	rjmp	.-430    	; 0xaf24 <__fp_szero>
    b0d2:	27 cf       	rjmp	.-434    	; 0xaf22 <__fp_zero>

0000b0d4 <__mulsf3>:
    b0d4:	0b d0       	rcall	.+22     	; 0xb0ec <__mulsf3x>
    b0d6:	ca ce       	rjmp	.-620    	; 0xae6c <__fp_round>
    b0d8:	93 de       	rcall	.-730    	; 0xae00 <__fp_pscA>
    b0da:	28 f0       	brcs	.+10     	; 0xb0e6 <__mulsf3+0x12>
    b0dc:	98 de       	rcall	.-720    	; 0xae0e <__fp_pscB>
    b0de:	18 f0       	brcs	.+6      	; 0xb0e6 <__mulsf3+0x12>
    b0e0:	95 23       	and	r25, r21
    b0e2:	09 f0       	breq	.+2      	; 0xb0e6 <__mulsf3+0x12>
    b0e4:	36 ce       	rjmp	.-916    	; 0xad52 <__fp_inf>
    b0e6:	64 ce       	rjmp	.-824    	; 0xadb0 <__fp_nan>
    b0e8:	11 24       	eor	r1, r1
    b0ea:	1c cf       	rjmp	.-456    	; 0xaf24 <__fp_szero>

0000b0ec <__mulsf3x>:
    b0ec:	e1 de       	rcall	.-574    	; 0xaeb0 <__fp_split3>
    b0ee:	a0 f3       	brcs	.-24     	; 0xb0d8 <__mulsf3+0x4>

0000b0f0 <__mulsf3_pse>:
    b0f0:	95 9f       	mul	r25, r21
    b0f2:	d1 f3       	breq	.-12     	; 0xb0e8 <__mulsf3+0x14>
    b0f4:	95 0f       	add	r25, r21
    b0f6:	50 e0       	ldi	r21, 0x00	; 0
    b0f8:	55 1f       	adc	r21, r21
    b0fa:	62 9f       	mul	r22, r18
    b0fc:	f0 01       	movw	r30, r0
    b0fe:	72 9f       	mul	r23, r18
    b100:	bb 27       	eor	r27, r27
    b102:	f0 0d       	add	r31, r0
    b104:	b1 1d       	adc	r27, r1
    b106:	63 9f       	mul	r22, r19
    b108:	aa 27       	eor	r26, r26
    b10a:	f0 0d       	add	r31, r0
    b10c:	b1 1d       	adc	r27, r1
    b10e:	aa 1f       	adc	r26, r26
    b110:	64 9f       	mul	r22, r20
    b112:	66 27       	eor	r22, r22
    b114:	b0 0d       	add	r27, r0
    b116:	a1 1d       	adc	r26, r1
    b118:	66 1f       	adc	r22, r22
    b11a:	82 9f       	mul	r24, r18
    b11c:	22 27       	eor	r18, r18
    b11e:	b0 0d       	add	r27, r0
    b120:	a1 1d       	adc	r26, r1
    b122:	62 1f       	adc	r22, r18
    b124:	73 9f       	mul	r23, r19
    b126:	b0 0d       	add	r27, r0
    b128:	a1 1d       	adc	r26, r1
    b12a:	62 1f       	adc	r22, r18
    b12c:	83 9f       	mul	r24, r19
    b12e:	a0 0d       	add	r26, r0
    b130:	61 1d       	adc	r22, r1
    b132:	22 1f       	adc	r18, r18
    b134:	74 9f       	mul	r23, r20
    b136:	33 27       	eor	r19, r19
    b138:	a0 0d       	add	r26, r0
    b13a:	61 1d       	adc	r22, r1
    b13c:	23 1f       	adc	r18, r19
    b13e:	84 9f       	mul	r24, r20
    b140:	60 0d       	add	r22, r0
    b142:	21 1d       	adc	r18, r1
    b144:	82 2f       	mov	r24, r18
    b146:	76 2f       	mov	r23, r22
    b148:	6a 2f       	mov	r22, r26
    b14a:	11 24       	eor	r1, r1
    b14c:	9f 57       	subi	r25, 0x7F	; 127
    b14e:	50 40       	sbci	r21, 0x00	; 0
    b150:	8a f0       	brmi	.+34     	; 0xb174 <__mulsf3_pse+0x84>
    b152:	e1 f0       	breq	.+56     	; 0xb18c <__mulsf3_pse+0x9c>
    b154:	88 23       	and	r24, r24
    b156:	4a f0       	brmi	.+18     	; 0xb16a <__mulsf3_pse+0x7a>
    b158:	ee 0f       	add	r30, r30
    b15a:	ff 1f       	adc	r31, r31
    b15c:	bb 1f       	adc	r27, r27
    b15e:	66 1f       	adc	r22, r22
    b160:	77 1f       	adc	r23, r23
    b162:	88 1f       	adc	r24, r24
    b164:	91 50       	subi	r25, 0x01	; 1
    b166:	50 40       	sbci	r21, 0x00	; 0
    b168:	a9 f7       	brne	.-22     	; 0xb154 <__mulsf3_pse+0x64>
    b16a:	9e 3f       	cpi	r25, 0xFE	; 254
    b16c:	51 05       	cpc	r21, r1
    b16e:	70 f0       	brcs	.+28     	; 0xb18c <__mulsf3_pse+0x9c>
    b170:	f0 cd       	rjmp	.-1056   	; 0xad52 <__fp_inf>
    b172:	d8 ce       	rjmp	.-592    	; 0xaf24 <__fp_szero>
    b174:	5f 3f       	cpi	r21, 0xFF	; 255
    b176:	ec f3       	brlt	.-6      	; 0xb172 <__mulsf3_pse+0x82>
    b178:	98 3e       	cpi	r25, 0xE8	; 232
    b17a:	dc f3       	brlt	.-10     	; 0xb172 <__mulsf3_pse+0x82>
    b17c:	86 95       	lsr	r24
    b17e:	77 95       	ror	r23
    b180:	67 95       	ror	r22
    b182:	b7 95       	ror	r27
    b184:	f7 95       	ror	r31
    b186:	e7 95       	ror	r30
    b188:	9f 5f       	subi	r25, 0xFF	; 255
    b18a:	c1 f7       	brne	.-16     	; 0xb17c <__mulsf3_pse+0x8c>
    b18c:	fe 2b       	or	r31, r30
    b18e:	88 0f       	add	r24, r24
    b190:	91 1d       	adc	r25, r1
    b192:	96 95       	lsr	r25
    b194:	87 95       	ror	r24
    b196:	97 f9       	bld	r25, 7
    b198:	08 95       	ret

0000b19a <sin>:
    b19a:	9f 93       	push	r25
    b19c:	40 de       	rcall	.-896    	; 0xae1e <__fp_rempio2>
    b19e:	0f 90       	pop	r0
    b1a0:	07 fc       	sbrc	r0, 7
    b1a2:	ee 5f       	subi	r30, 0xFE	; 254
    b1a4:	74 ce       	rjmp	.-792    	; 0xae8e <__fp_sinus>
    b1a6:	11 f4       	brne	.+4      	; 0xb1ac <sin+0x12>
    b1a8:	0e f4       	brtc	.+2      	; 0xb1ac <sin+0x12>
    b1aa:	02 ce       	rjmp	.-1020   	; 0xadb0 <__fp_nan>
    b1ac:	f3 cd       	rjmp	.-1050   	; 0xad94 <__fp_mpack>

0000b1ae <sqrt>:
    b1ae:	88 de       	rcall	.-752    	; 0xaec0 <__fp_splitA>
    b1b0:	d0 f3       	brcs	.-12     	; 0xb1a6 <sin+0xc>
    b1b2:	99 23       	and	r25, r25
    b1b4:	d9 f3       	breq	.-10     	; 0xb1ac <sin+0x12>
    b1b6:	ce f3       	brts	.-14     	; 0xb1aa <sin+0x10>
    b1b8:	9f 57       	subi	r25, 0x7F	; 127
    b1ba:	55 0b       	sbc	r21, r21
    b1bc:	87 ff       	sbrs	r24, 7
    b1be:	43 d0       	rcall	.+134    	; 0xb246 <__fp_norm2>
    b1c0:	00 24       	eor	r0, r0
    b1c2:	a0 e6       	ldi	r26, 0x60	; 96
    b1c4:	40 ea       	ldi	r20, 0xA0	; 160
    b1c6:	90 01       	movw	r18, r0
    b1c8:	80 58       	subi	r24, 0x80	; 128
    b1ca:	56 95       	lsr	r21
    b1cc:	97 95       	ror	r25
    b1ce:	28 f4       	brcc	.+10     	; 0xb1da <sqrt+0x2c>
    b1d0:	80 5c       	subi	r24, 0xC0	; 192
    b1d2:	66 0f       	add	r22, r22
    b1d4:	77 1f       	adc	r23, r23
    b1d6:	88 1f       	adc	r24, r24
    b1d8:	20 f0       	brcs	.+8      	; 0xb1e2 <sqrt+0x34>
    b1da:	26 17       	cp	r18, r22
    b1dc:	37 07       	cpc	r19, r23
    b1de:	48 07       	cpc	r20, r24
    b1e0:	30 f4       	brcc	.+12     	; 0xb1ee <sqrt+0x40>
    b1e2:	62 1b       	sub	r22, r18
    b1e4:	73 0b       	sbc	r23, r19
    b1e6:	84 0b       	sbc	r24, r20
    b1e8:	20 29       	or	r18, r0
    b1ea:	31 29       	or	r19, r1
    b1ec:	4a 2b       	or	r20, r26
    b1ee:	a6 95       	lsr	r26
    b1f0:	17 94       	ror	r1
    b1f2:	07 94       	ror	r0
    b1f4:	20 25       	eor	r18, r0
    b1f6:	31 25       	eor	r19, r1
    b1f8:	4a 27       	eor	r20, r26
    b1fa:	58 f7       	brcc	.-42     	; 0xb1d2 <sqrt+0x24>
    b1fc:	66 0f       	add	r22, r22
    b1fe:	77 1f       	adc	r23, r23
    b200:	88 1f       	adc	r24, r24
    b202:	20 f0       	brcs	.+8      	; 0xb20c <sqrt+0x5e>
    b204:	26 17       	cp	r18, r22
    b206:	37 07       	cpc	r19, r23
    b208:	48 07       	cpc	r20, r24
    b20a:	30 f4       	brcc	.+12     	; 0xb218 <sqrt+0x6a>
    b20c:	62 0b       	sbc	r22, r18
    b20e:	73 0b       	sbc	r23, r19
    b210:	84 0b       	sbc	r24, r20
    b212:	20 0d       	add	r18, r0
    b214:	31 1d       	adc	r19, r1
    b216:	41 1d       	adc	r20, r1
    b218:	a0 95       	com	r26
    b21a:	81 f7       	brne	.-32     	; 0xb1fc <sqrt+0x4e>
    b21c:	b9 01       	movw	r22, r18
    b21e:	84 2f       	mov	r24, r20
    b220:	91 58       	subi	r25, 0x81	; 129
    b222:	88 0f       	add	r24, r24
    b224:	96 95       	lsr	r25
    b226:	87 95       	ror	r24
    b228:	08 95       	ret

0000b22a <square>:
    b22a:	9b 01       	movw	r18, r22
    b22c:	ac 01       	movw	r20, r24
    b22e:	52 cf       	rjmp	.-348    	; 0xb0d4 <__mulsf3>

0000b230 <trunc>:
    b230:	61 de       	rcall	.-830    	; 0xaef4 <__fp_trunc>
    b232:	20 f0       	brcs	.+8      	; 0xb23c <trunc+0xc>
    b234:	9f 37       	cpi	r25, 0x7F	; 127
    b236:	08 f4       	brcc	.+2      	; 0xb23a <trunc+0xa>
    b238:	75 ce       	rjmp	.-790    	; 0xaf24 <__fp_szero>
    b23a:	91 cd       	rjmp	.-1246   	; 0xad5e <__fp_mintl>
    b23c:	ab cd       	rjmp	.-1194   	; 0xad94 <__fp_mpack>

0000b23e <__unordsf2>:
    b23e:	65 dd       	rcall	.-1334   	; 0xad0a <__fp_cmp>
    b240:	88 0b       	sbc	r24, r24
    b242:	99 0b       	sbc	r25, r25
    b244:	08 95       	ret

0000b246 <__fp_norm2>:
    b246:	91 50       	subi	r25, 0x01	; 1
    b248:	50 40       	sbci	r21, 0x00	; 0
    b24a:	66 0f       	add	r22, r22
    b24c:	77 1f       	adc	r23, r23
    b24e:	88 1f       	adc	r24, r24
    b250:	d2 f7       	brpl	.-12     	; 0xb246 <__fp_norm2>
    b252:	08 95       	ret

0000b254 <__fp_powsodd>:
    b254:	9f 93       	push	r25
    b256:	8f 93       	push	r24
    b258:	7f 93       	push	r23
    b25a:	6f 93       	push	r22
    b25c:	ff 93       	push	r31
    b25e:	ef 93       	push	r30
    b260:	9b 01       	movw	r18, r22
    b262:	ac 01       	movw	r20, r24
    b264:	37 df       	rcall	.-402    	; 0xb0d4 <__mulsf3>
    b266:	ef 91       	pop	r30
    b268:	ff 91       	pop	r31
    b26a:	a5 dd       	rcall	.-1206   	; 0xadb6 <__fp_powser>
    b26c:	2f 91       	pop	r18
    b26e:	3f 91       	pop	r19
    b270:	4f 91       	pop	r20
    b272:	5f 91       	pop	r21
    b274:	2f cf       	rjmp	.-418    	; 0xb0d4 <__mulsf3>

0000b276 <__mulsi3>:
    b276:	62 9f       	mul	r22, r18
    b278:	d0 01       	movw	r26, r0
    b27a:	73 9f       	mul	r23, r19
    b27c:	f0 01       	movw	r30, r0
    b27e:	82 9f       	mul	r24, r18
    b280:	e0 0d       	add	r30, r0
    b282:	f1 1d       	adc	r31, r1
    b284:	64 9f       	mul	r22, r20
    b286:	e0 0d       	add	r30, r0
    b288:	f1 1d       	adc	r31, r1
    b28a:	92 9f       	mul	r25, r18
    b28c:	f0 0d       	add	r31, r0
    b28e:	83 9f       	mul	r24, r19
    b290:	f0 0d       	add	r31, r0
    b292:	74 9f       	mul	r23, r20
    b294:	f0 0d       	add	r31, r0
    b296:	65 9f       	mul	r22, r21
    b298:	f0 0d       	add	r31, r0
    b29a:	99 27       	eor	r25, r25
    b29c:	72 9f       	mul	r23, r18
    b29e:	b0 0d       	add	r27, r0
    b2a0:	e1 1d       	adc	r30, r1
    b2a2:	f9 1f       	adc	r31, r25
    b2a4:	63 9f       	mul	r22, r19
    b2a6:	b0 0d       	add	r27, r0
    b2a8:	e1 1d       	adc	r30, r1
    b2aa:	f9 1f       	adc	r31, r25
    b2ac:	bd 01       	movw	r22, r26
    b2ae:	cf 01       	movw	r24, r30
    b2b0:	11 24       	eor	r1, r1
    b2b2:	08 95       	ret

0000b2b4 <__udivmodsi4>:
    b2b4:	a1 e2       	ldi	r26, 0x21	; 33
    b2b6:	1a 2e       	mov	r1, r26
    b2b8:	aa 1b       	sub	r26, r26
    b2ba:	bb 1b       	sub	r27, r27
    b2bc:	fd 01       	movw	r30, r26
    b2be:	0d c0       	rjmp	.+26     	; 0xb2da <__udivmodsi4_ep>

0000b2c0 <__udivmodsi4_loop>:
    b2c0:	aa 1f       	adc	r26, r26
    b2c2:	bb 1f       	adc	r27, r27
    b2c4:	ee 1f       	adc	r30, r30
    b2c6:	ff 1f       	adc	r31, r31
    b2c8:	a2 17       	cp	r26, r18
    b2ca:	b3 07       	cpc	r27, r19
    b2cc:	e4 07       	cpc	r30, r20
    b2ce:	f5 07       	cpc	r31, r21
    b2d0:	20 f0       	brcs	.+8      	; 0xb2da <__udivmodsi4_ep>
    b2d2:	a2 1b       	sub	r26, r18
    b2d4:	b3 0b       	sbc	r27, r19
    b2d6:	e4 0b       	sbc	r30, r20
    b2d8:	f5 0b       	sbc	r31, r21

0000b2da <__udivmodsi4_ep>:
    b2da:	66 1f       	adc	r22, r22
    b2dc:	77 1f       	adc	r23, r23
    b2de:	88 1f       	adc	r24, r24
    b2e0:	99 1f       	adc	r25, r25
    b2e2:	1a 94       	dec	r1
    b2e4:	69 f7       	brne	.-38     	; 0xb2c0 <__udivmodsi4_loop>
    b2e6:	60 95       	com	r22
    b2e8:	70 95       	com	r23
    b2ea:	80 95       	com	r24
    b2ec:	90 95       	com	r25
    b2ee:	9b 01       	movw	r18, r22
    b2f0:	ac 01       	movw	r20, r24
    b2f2:	bd 01       	movw	r22, r26
    b2f4:	cf 01       	movw	r24, r30
    b2f6:	08 95       	ret

0000b2f8 <__prologue_saves__>:
    b2f8:	2f 92       	push	r2
    b2fa:	3f 92       	push	r3
    b2fc:	4f 92       	push	r4
    b2fe:	5f 92       	push	r5
    b300:	6f 92       	push	r6
    b302:	7f 92       	push	r7
    b304:	8f 92       	push	r8
    b306:	9f 92       	push	r9
    b308:	af 92       	push	r10
    b30a:	bf 92       	push	r11
    b30c:	cf 92       	push	r12
    b30e:	df 92       	push	r13
    b310:	ef 92       	push	r14
    b312:	ff 92       	push	r15
    b314:	0f 93       	push	r16
    b316:	1f 93       	push	r17
    b318:	cf 93       	push	r28
    b31a:	df 93       	push	r29
    b31c:	cd b7       	in	r28, 0x3d	; 61
    b31e:	de b7       	in	r29, 0x3e	; 62
    b320:	ca 1b       	sub	r28, r26
    b322:	db 0b       	sbc	r29, r27
    b324:	0f b6       	in	r0, 0x3f	; 63
    b326:	f8 94       	cli
    b328:	de bf       	out	0x3e, r29	; 62
    b32a:	0f be       	out	0x3f, r0	; 63
    b32c:	cd bf       	out	0x3d, r28	; 61
    b32e:	19 94       	eijmp

0000b330 <__epilogue_restores__>:
    b330:	2a 88       	ldd	r2, Y+18	; 0x12
    b332:	39 88       	ldd	r3, Y+17	; 0x11
    b334:	48 88       	ldd	r4, Y+16	; 0x10
    b336:	5f 84       	ldd	r5, Y+15	; 0x0f
    b338:	6e 84       	ldd	r6, Y+14	; 0x0e
    b33a:	7d 84       	ldd	r7, Y+13	; 0x0d
    b33c:	8c 84       	ldd	r8, Y+12	; 0x0c
    b33e:	9b 84       	ldd	r9, Y+11	; 0x0b
    b340:	aa 84       	ldd	r10, Y+10	; 0x0a
    b342:	b9 84       	ldd	r11, Y+9	; 0x09
    b344:	c8 84       	ldd	r12, Y+8	; 0x08
    b346:	df 80       	ldd	r13, Y+7	; 0x07
    b348:	ee 80       	ldd	r14, Y+6	; 0x06
    b34a:	fd 80       	ldd	r15, Y+5	; 0x05
    b34c:	0c 81       	ldd	r16, Y+4	; 0x04
    b34e:	1b 81       	ldd	r17, Y+3	; 0x03
    b350:	aa 81       	ldd	r26, Y+2	; 0x02
    b352:	b9 81       	ldd	r27, Y+1	; 0x01
    b354:	ce 0f       	add	r28, r30
    b356:	d1 1d       	adc	r29, r1
    b358:	0f b6       	in	r0, 0x3f	; 63
    b35a:	f8 94       	cli
    b35c:	de bf       	out	0x3e, r29	; 62
    b35e:	0f be       	out	0x3f, r0	; 63
    b360:	cd bf       	out	0x3d, r28	; 61
    b362:	ed 01       	movw	r28, r26
    b364:	08 95       	ret

0000b366 <strtod>:
    b366:	8f 92       	push	r8
    b368:	9f 92       	push	r9
    b36a:	af 92       	push	r10
    b36c:	bf 92       	push	r11
    b36e:	cf 92       	push	r12
    b370:	df 92       	push	r13
    b372:	ef 92       	push	r14
    b374:	ff 92       	push	r15
    b376:	0f 93       	push	r16
    b378:	1f 93       	push	r17
    b37a:	cf 93       	push	r28
    b37c:	df 93       	push	r29
    b37e:	ec 01       	movw	r28, r24
    b380:	5b 01       	movw	r10, r22
    b382:	61 15       	cp	r22, r1
    b384:	71 05       	cpc	r23, r1
    b386:	19 f0       	breq	.+6      	; 0xb38e <strtod+0x28>
    b388:	fb 01       	movw	r30, r22
    b38a:	80 83       	st	Z, r24
    b38c:	91 83       	std	Z+1, r25	; 0x01
    b38e:	f9 90       	ld	r15, Y+
    b390:	8f 2d       	mov	r24, r15
    b392:	90 e0       	ldi	r25, 0x00	; 0
    b394:	0e 94 17 5c 	call	0xb82e	; 0xb82e <isspace>
    b398:	89 2b       	or	r24, r25
    b39a:	c9 f7       	brne	.-14     	; 0xb38e <strtod+0x28>
    b39c:	fd e2       	ldi	r31, 0x2D	; 45
    b39e:	ff 16       	cp	r15, r31
    b3a0:	21 f4       	brne	.+8      	; 0xb3aa <strtod+0x44>
    b3a2:	f9 90       	ld	r15, Y+
    b3a4:	ee 24       	eor	r14, r14
    b3a6:	e3 94       	inc	r14
    b3a8:	05 c0       	rjmp	.+10     	; 0xb3b4 <strtod+0x4e>
    b3aa:	2b e2       	ldi	r18, 0x2B	; 43
    b3ac:	f2 16       	cp	r15, r18
    b3ae:	09 f4       	brne	.+2      	; 0xb3b2 <strtod+0x4c>
    b3b0:	f9 90       	ld	r15, Y+
    b3b2:	ee 24       	eor	r14, r14
    b3b4:	8e 01       	movw	r16, r28
    b3b6:	01 50       	subi	r16, 0x01	; 1
    b3b8:	10 40       	sbci	r17, 0x00	; 0
    b3ba:	c8 01       	movw	r24, r16
    b3bc:	69 ef       	ldi	r22, 0xF9	; 249
    b3be:	7d e1       	ldi	r23, 0x1D	; 29
    b3c0:	43 e0       	ldi	r20, 0x03	; 3
    b3c2:	50 e0       	ldi	r21, 0x00	; 0
    b3c4:	0e 94 1f 5c 	call	0xb83e	; 0xb83e <strncasecmp_P>
    b3c8:	89 2b       	or	r24, r25
    b3ca:	01 f5       	brne	.+64     	; 0xb40c <strtod+0xa6>
    b3cc:	8e 01       	movw	r16, r28
    b3ce:	0e 5f       	subi	r16, 0xFE	; 254
    b3d0:	1f 4f       	sbci	r17, 0xFF	; 255
    b3d2:	c8 01       	movw	r24, r16
    b3d4:	6c ef       	ldi	r22, 0xFC	; 252
    b3d6:	7d e1       	ldi	r23, 0x1D	; 29
    b3d8:	45 e0       	ldi	r20, 0x05	; 5
    b3da:	50 e0       	ldi	r21, 0x00	; 0
    b3dc:	0e 94 1f 5c 	call	0xb83e	; 0xb83e <strncasecmp_P>
    b3e0:	89 2b       	or	r24, r25
    b3e2:	19 f4       	brne	.+6      	; 0xb3ea <strtod+0x84>
    b3e4:	8e 01       	movw	r16, r28
    b3e6:	09 5f       	subi	r16, 0xF9	; 249
    b3e8:	1f 4f       	sbci	r17, 0xFF	; 255
    b3ea:	a1 14       	cp	r10, r1
    b3ec:	b1 04       	cpc	r11, r1
    b3ee:	19 f0       	breq	.+6      	; 0xb3f6 <strtod+0x90>
    b3f0:	f5 01       	movw	r30, r10
    b3f2:	00 83       	st	Z, r16
    b3f4:	11 83       	std	Z+1, r17	; 0x01
    b3f6:	e0 fc       	sbrc	r14, 0
    b3f8:	04 c0       	rjmp	.+8      	; 0xb402 <strtod+0x9c>
    b3fa:	70 e0       	ldi	r23, 0x00	; 0
    b3fc:	90 e0       	ldi	r25, 0x00	; 0
    b3fe:	80 e8       	ldi	r24, 0x80	; 128
    b400:	14 c0       	rjmp	.+40     	; 0xb42a <strtod+0xc4>
    b402:	70 e0       	ldi	r23, 0x00	; 0
    b404:	90 e0       	ldi	r25, 0x00	; 0
    b406:	80 e8       	ldi	r24, 0x80	; 128
    b408:	6f ef       	ldi	r22, 0xFF	; 255
    b40a:	08 c1       	rjmp	.+528    	; 0xb61c <strtod+0x2b6>
    b40c:	c8 01       	movw	r24, r16
    b40e:	61 e0       	ldi	r22, 0x01	; 1
    b410:	7e e1       	ldi	r23, 0x1E	; 30
    b412:	43 e0       	ldi	r20, 0x03	; 3
    b414:	50 e0       	ldi	r21, 0x00	; 0
    b416:	0e 94 1f 5c 	call	0xb83e	; 0xb83e <strncasecmp_P>
    b41a:	89 2b       	or	r24, r25
    b41c:	69 f4       	brne	.+26     	; 0xb438 <strtod+0xd2>
    b41e:	a1 14       	cp	r10, r1
    b420:	b1 04       	cpc	r11, r1
    b422:	29 f4       	brne	.+10     	; 0xb42e <strtod+0xc8>
    b424:	70 e0       	ldi	r23, 0x00	; 0
    b426:	90 e0       	ldi	r25, 0x00	; 0
    b428:	80 ec       	ldi	r24, 0xC0	; 192
    b42a:	6f e7       	ldi	r22, 0x7F	; 127
    b42c:	f7 c0       	rjmp	.+494    	; 0xb61c <strtod+0x2b6>
    b42e:	22 96       	adiw	r28, 0x02	; 2
    b430:	f5 01       	movw	r30, r10
    b432:	c0 83       	st	Z, r28
    b434:	d1 83       	std	Z+1, r29	; 0x01
    b436:	f6 cf       	rjmp	.-20     	; 0xb424 <strtod+0xbe>
    b438:	88 24       	eor	r8, r8
    b43a:	99 24       	eor	r9, r9
    b43c:	40 e0       	ldi	r20, 0x00	; 0
    b43e:	50 e0       	ldi	r21, 0x00	; 0
    b440:	60 e0       	ldi	r22, 0x00	; 0
    b442:	70 e0       	ldi	r23, 0x00	; 0
    b444:	ef 2d       	mov	r30, r15
    b446:	e0 53       	subi	r30, 0x30	; 48
    b448:	ea 30       	cpi	r30, 0x0A	; 10
    b44a:	a0 f5       	brcc	.+104    	; 0xb4b4 <strtod+0x14e>
    b44c:	f2 e0       	ldi	r31, 0x02	; 2
    b44e:	ef 2a       	or	r14, r31
    b450:	8e 2d       	mov	r24, r14
    b452:	90 e0       	ldi	r25, 0x00	; 0
    b454:	9c 01       	movw	r18, r24
    b456:	28 70       	andi	r18, 0x08	; 8
    b458:	30 70       	andi	r19, 0x00	; 0
    b45a:	e2 fe       	sbrs	r14, 2
    b45c:	06 c0       	rjmp	.+12     	; 0xb46a <strtod+0x104>
    b45e:	23 2b       	or	r18, r19
    b460:	79 f5       	brne	.+94     	; 0xb4c0 <strtod+0x15a>
    b462:	08 94       	sec
    b464:	81 1c       	adc	r8, r1
    b466:	91 1c       	adc	r9, r1
    b468:	2b c0       	rjmp	.+86     	; 0xb4c0 <strtod+0x15a>
    b46a:	23 2b       	or	r18, r19
    b46c:	19 f0       	breq	.+6      	; 0xb474 <strtod+0x10e>
    b46e:	08 94       	sec
    b470:	81 08       	sbc	r8, r1
    b472:	91 08       	sbc	r9, r1
    b474:	db 01       	movw	r26, r22
    b476:	ca 01       	movw	r24, r20
    b478:	12 e0       	ldi	r17, 0x02	; 2
    b47a:	88 0f       	add	r24, r24
    b47c:	99 1f       	adc	r25, r25
    b47e:	aa 1f       	adc	r26, r26
    b480:	bb 1f       	adc	r27, r27
    b482:	1a 95       	dec	r17
    b484:	d1 f7       	brne	.-12     	; 0xb47a <strtod+0x114>
    b486:	48 0f       	add	r20, r24
    b488:	59 1f       	adc	r21, r25
    b48a:	6a 1f       	adc	r22, r26
    b48c:	7b 1f       	adc	r23, r27
    b48e:	44 0f       	add	r20, r20
    b490:	55 1f       	adc	r21, r21
    b492:	66 1f       	adc	r22, r22
    b494:	77 1f       	adc	r23, r23
    b496:	4e 0f       	add	r20, r30
    b498:	51 1d       	adc	r21, r1
    b49a:	61 1d       	adc	r22, r1
    b49c:	71 1d       	adc	r23, r1
    b49e:	48 39       	cpi	r20, 0x98	; 152
    b4a0:	29 e9       	ldi	r18, 0x99	; 153
    b4a2:	52 07       	cpc	r21, r18
    b4a4:	29 e9       	ldi	r18, 0x99	; 153
    b4a6:	62 07       	cpc	r22, r18
    b4a8:	29 e1       	ldi	r18, 0x19	; 25
    b4aa:	72 07       	cpc	r23, r18
    b4ac:	48 f0       	brcs	.+18     	; 0xb4c0 <strtod+0x15a>
    b4ae:	84 e0       	ldi	r24, 0x04	; 4
    b4b0:	e8 2a       	or	r14, r24
    b4b2:	06 c0       	rjmp	.+12     	; 0xb4c0 <strtod+0x15a>
    b4b4:	ee 3f       	cpi	r30, 0xFE	; 254
    b4b6:	31 f4       	brne	.+12     	; 0xb4c4 <strtod+0x15e>
    b4b8:	e3 fc       	sbrc	r14, 3
    b4ba:	39 c0       	rjmp	.+114    	; 0xb52e <strtod+0x1c8>
    b4bc:	98 e0       	ldi	r25, 0x08	; 8
    b4be:	e9 2a       	or	r14, r25
    b4c0:	f9 90       	ld	r15, Y+
    b4c2:	c0 cf       	rjmp	.-128    	; 0xb444 <strtod+0xde>
    b4c4:	e5 33       	cpi	r30, 0x35	; 53
    b4c6:	11 f0       	breq	.+4      	; 0xb4cc <strtod+0x166>
    b4c8:	e5 31       	cpi	r30, 0x15	; 21
    b4ca:	89 f5       	brne	.+98     	; 0xb52e <strtod+0x1c8>
    b4cc:	29 91       	ld	r18, Y+
    b4ce:	2d 32       	cpi	r18, 0x2D	; 45
    b4d0:	19 f4       	brne	.+6      	; 0xb4d8 <strtod+0x172>
    b4d2:	e0 e1       	ldi	r30, 0x10	; 16
    b4d4:	ee 2a       	or	r14, r30
    b4d6:	05 c0       	rjmp	.+10     	; 0xb4e2 <strtod+0x17c>
    b4d8:	2b 32       	cpi	r18, 0x2B	; 43
    b4da:	19 f0       	breq	.+6      	; 0xb4e2 <strtod+0x17c>
    b4dc:	81 e0       	ldi	r24, 0x01	; 1
    b4de:	90 e0       	ldi	r25, 0x00	; 0
    b4e0:	03 c0       	rjmp	.+6      	; 0xb4e8 <strtod+0x182>
    b4e2:	29 91       	ld	r18, Y+
    b4e4:	82 e0       	ldi	r24, 0x02	; 2
    b4e6:	90 e0       	ldi	r25, 0x00	; 0
    b4e8:	e2 2f       	mov	r30, r18
    b4ea:	e0 53       	subi	r30, 0x30	; 48
    b4ec:	ea 30       	cpi	r30, 0x0A	; 10
    b4ee:	18 f0       	brcs	.+6      	; 0xb4f6 <strtod+0x190>
    b4f0:	c8 1b       	sub	r28, r24
    b4f2:	d9 0b       	sbc	r29, r25
    b4f4:	1c c0       	rjmp	.+56     	; 0xb52e <strtod+0x1c8>
    b4f6:	20 e0       	ldi	r18, 0x00	; 0
    b4f8:	30 e0       	ldi	r19, 0x00	; 0
    b4fa:	fc e0       	ldi	r31, 0x0C	; 12
    b4fc:	20 38       	cpi	r18, 0x80	; 128
    b4fe:	3f 07       	cpc	r19, r31
    b500:	5c f4       	brge	.+22     	; 0xb518 <strtod+0x1b2>
    b502:	c9 01       	movw	r24, r18
    b504:	88 0f       	add	r24, r24
    b506:	99 1f       	adc	r25, r25
    b508:	88 0f       	add	r24, r24
    b50a:	99 1f       	adc	r25, r25
    b50c:	28 0f       	add	r18, r24
    b50e:	39 1f       	adc	r19, r25
    b510:	22 0f       	add	r18, r18
    b512:	33 1f       	adc	r19, r19
    b514:	2e 0f       	add	r18, r30
    b516:	31 1d       	adc	r19, r1
    b518:	e9 91       	ld	r30, Y+
    b51a:	e0 53       	subi	r30, 0x30	; 48
    b51c:	ea 30       	cpi	r30, 0x0A	; 10
    b51e:	68 f3       	brcs	.-38     	; 0xb4fa <strtod+0x194>
    b520:	e4 fe       	sbrs	r14, 4
    b522:	03 c0       	rjmp	.+6      	; 0xb52a <strtod+0x1c4>
    b524:	30 95       	com	r19
    b526:	21 95       	neg	r18
    b528:	3f 4f       	sbci	r19, 0xFF	; 255
    b52a:	82 0e       	add	r8, r18
    b52c:	93 1e       	adc	r9, r19
    b52e:	ce 2c       	mov	r12, r14
    b530:	dd 24       	eor	r13, r13
    b532:	e1 fe       	sbrs	r14, 1
    b534:	07 c0       	rjmp	.+14     	; 0xb544 <strtod+0x1de>
    b536:	a1 14       	cp	r10, r1
    b538:	b1 04       	cpc	r11, r1
    b53a:	21 f0       	breq	.+8      	; 0xb544 <strtod+0x1de>
    b53c:	21 97       	sbiw	r28, 0x01	; 1
    b53e:	f5 01       	movw	r30, r10
    b540:	c0 83       	st	Z, r28
    b542:	d1 83       	std	Z+1, r29	; 0x01
    b544:	cb 01       	movw	r24, r22
    b546:	ba 01       	movw	r22, r20
    b548:	0e 94 48 56 	call	0xac90	; 0xac90 <__floatunsisf>
    b54c:	7b 01       	movw	r14, r22
    b54e:	8c 01       	movw	r16, r24
    b550:	f3 e0       	ldi	r31, 0x03	; 3
    b552:	cf 22       	and	r12, r31
    b554:	dd 24       	eor	r13, r13
    b556:	23 e0       	ldi	r18, 0x03	; 3
    b558:	c2 16       	cp	r12, r18
    b55a:	d1 04       	cpc	r13, r1
    b55c:	21 f4       	brne	.+8      	; 0xb566 <strtod+0x200>
    b55e:	17 fb       	bst	r17, 7
    b560:	10 95       	com	r17
    b562:	17 f9       	bld	r17, 7
    b564:	10 95       	com	r17
    b566:	57 01       	movw	r10, r14
    b568:	68 01       	movw	r12, r16
    b56a:	c8 01       	movw	r24, r16
    b56c:	b7 01       	movw	r22, r14
    b56e:	20 e0       	ldi	r18, 0x00	; 0
    b570:	30 e0       	ldi	r19, 0x00	; 0
    b572:	40 e0       	ldi	r20, 0x00	; 0
    b574:	50 e0       	ldi	r21, 0x00	; 0
    b576:	0e 94 a8 55 	call	0xab50	; 0xab50 <__cmpsf2>
    b57a:	88 23       	and	r24, r24
    b57c:	09 f4       	brne	.+2      	; 0xb580 <strtod+0x21a>
    b57e:	4a c0       	rjmp	.+148    	; 0xb614 <strtod+0x2ae>
    b580:	97 fe       	sbrs	r9, 7
    b582:	0d c0       	rjmp	.+26     	; 0xb59e <strtod+0x238>
    b584:	28 e1       	ldi	r18, 0x18	; 24
    b586:	e2 2e       	mov	r14, r18
    b588:	2e e1       	ldi	r18, 0x1E	; 30
    b58a:	f2 2e       	mov	r15, r18
    b58c:	90 94       	com	r9
    b58e:	81 94       	neg	r8
    b590:	91 08       	sbc	r9, r1
    b592:	93 94       	inc	r9
    b594:	c0 e2       	ldi	r28, 0x20	; 32
    b596:	d0 e0       	ldi	r29, 0x00	; 0
    b598:	00 e0       	ldi	r16, 0x00	; 0
    b59a:	10 e0       	ldi	r17, 0x00	; 0
    b59c:	12 c0       	rjmp	.+36     	; 0xb5c2 <strtod+0x25c>
    b59e:	90 e3       	ldi	r25, 0x30	; 48
    b5a0:	e9 2e       	mov	r14, r25
    b5a2:	9e e1       	ldi	r25, 0x1E	; 30
    b5a4:	f9 2e       	mov	r15, r25
    b5a6:	f6 cf       	rjmp	.-20     	; 0xb594 <strtod+0x22e>
    b5a8:	f7 01       	movw	r30, r14
    b5aa:	25 91       	lpm	r18, Z+
    b5ac:	35 91       	lpm	r19, Z+
    b5ae:	45 91       	lpm	r20, Z+
    b5b0:	54 91       	lpm	r21, Z+
    b5b2:	c6 01       	movw	r24, r12
    b5b4:	b5 01       	movw	r22, r10
    b5b6:	0e 94 6a 58 	call	0xb0d4	; 0xb0d4 <__mulsf3>
    b5ba:	5b 01       	movw	r10, r22
    b5bc:	6c 01       	movw	r12, r24
    b5be:	8c 1a       	sub	r8, r28
    b5c0:	9d 0a       	sbc	r9, r29
    b5c2:	8c 16       	cp	r8, r28
    b5c4:	9d 06       	cpc	r9, r29
    b5c6:	84 f7       	brge	.-32     	; 0xb5a8 <strtod+0x242>
    b5c8:	d5 95       	asr	r29
    b5ca:	c7 95       	ror	r28
    b5cc:	0f 5f       	subi	r16, 0xFF	; 255
    b5ce:	1f 4f       	sbci	r17, 0xFF	; 255
    b5d0:	06 30       	cpi	r16, 0x06	; 6
    b5d2:	11 05       	cpc	r17, r1
    b5d4:	29 f0       	breq	.+10     	; 0xb5e0 <strtod+0x27a>
    b5d6:	8c ef       	ldi	r24, 0xFC	; 252
    b5d8:	9f ef       	ldi	r25, 0xFF	; 255
    b5da:	e8 0e       	add	r14, r24
    b5dc:	f9 1e       	adc	r15, r25
    b5de:	f1 cf       	rjmp	.-30     	; 0xb5c2 <strtod+0x25c>
    b5e0:	c5 01       	movw	r24, r10
    b5e2:	d6 01       	movw	r26, r12
    b5e4:	7c 01       	movw	r14, r24
    b5e6:	8d 01       	movw	r16, r26
    b5e8:	8c 2d       	mov	r24, r12
    b5ea:	88 0f       	add	r24, r24
    b5ec:	8d 2d       	mov	r24, r13
    b5ee:	88 1f       	adc	r24, r24
    b5f0:	8f 3f       	cpi	r24, 0xFF	; 255
    b5f2:	51 f0       	breq	.+20     	; 0xb608 <strtod+0x2a2>
    b5f4:	c6 01       	movw	r24, r12
    b5f6:	b5 01       	movw	r22, r10
    b5f8:	20 e0       	ldi	r18, 0x00	; 0
    b5fa:	30 e0       	ldi	r19, 0x00	; 0
    b5fc:	40 e0       	ldi	r20, 0x00	; 0
    b5fe:	50 e0       	ldi	r21, 0x00	; 0
    b600:	0e 94 a8 55 	call	0xab50	; 0xab50 <__cmpsf2>
    b604:	88 23       	and	r24, r24
    b606:	31 f4       	brne	.+12     	; 0xb614 <strtod+0x2ae>
    b608:	82 e2       	ldi	r24, 0x22	; 34
    b60a:	90 e0       	ldi	r25, 0x00	; 0
    b60c:	80 93 90 26 	sts	0x2690, r24
    b610:	90 93 91 26 	sts	0x2691, r25
    b614:	7e 2d       	mov	r23, r14
    b616:	9f 2d       	mov	r25, r15
    b618:	80 2f       	mov	r24, r16
    b61a:	61 2f       	mov	r22, r17
    b61c:	27 2f       	mov	r18, r23
    b61e:	39 2f       	mov	r19, r25
    b620:	48 2f       	mov	r20, r24
    b622:	56 2f       	mov	r21, r22
    b624:	b9 01       	movw	r22, r18
    b626:	ca 01       	movw	r24, r20
    b628:	df 91       	pop	r29
    b62a:	cf 91       	pop	r28
    b62c:	1f 91       	pop	r17
    b62e:	0f 91       	pop	r16
    b630:	ff 90       	pop	r15
    b632:	ef 90       	pop	r14
    b634:	df 90       	pop	r13
    b636:	cf 90       	pop	r12
    b638:	bf 90       	pop	r11
    b63a:	af 90       	pop	r10
    b63c:	9f 90       	pop	r9
    b63e:	8f 90       	pop	r8
    b640:	08 95       	ret

0000b642 <atoi>:
    b642:	fc 01       	movw	r30, r24
    b644:	88 27       	eor	r24, r24
    b646:	99 27       	eor	r25, r25
    b648:	e8 94       	clt
    b64a:	21 91       	ld	r18, Z+
    b64c:	20 32       	cpi	r18, 0x20	; 32
    b64e:	e9 f3       	breq	.-6      	; 0xb64a <atoi+0x8>
    b650:	29 30       	cpi	r18, 0x09	; 9
    b652:	10 f0       	brcs	.+4      	; 0xb658 <atoi+0x16>
    b654:	2e 30       	cpi	r18, 0x0E	; 14
    b656:	c8 f3       	brcs	.-14     	; 0xb64a <atoi+0x8>
    b658:	2b 32       	cpi	r18, 0x2B	; 43
    b65a:	41 f0       	breq	.+16     	; 0xb66c <atoi+0x2a>
    b65c:	2d 32       	cpi	r18, 0x2D	; 45
    b65e:	39 f4       	brne	.+14     	; 0xb66e <atoi+0x2c>
    b660:	68 94       	set
    b662:	04 c0       	rjmp	.+8      	; 0xb66c <atoi+0x2a>
    b664:	0e 94 5d 5c 	call	0xb8ba	; 0xb8ba <__mulhi_const_10>
    b668:	82 0f       	add	r24, r18
    b66a:	91 1d       	adc	r25, r1
    b66c:	21 91       	ld	r18, Z+
    b66e:	20 53       	subi	r18, 0x30	; 48
    b670:	2a 30       	cpi	r18, 0x0A	; 10
    b672:	c0 f3       	brcs	.-16     	; 0xb664 <atoi+0x22>
    b674:	1e f4       	brtc	.+6      	; 0xb67c <atoi+0x3a>
    b676:	90 95       	com	r25
    b678:	81 95       	neg	r24
    b67a:	9f 4f       	sbci	r25, 0xFF	; 255
    b67c:	08 95       	ret

0000b67e <__ftoa_engine>:
    b67e:	28 30       	cpi	r18, 0x08	; 8
    b680:	08 f0       	brcs	.+2      	; 0xb684 <__ftoa_engine+0x6>
    b682:	27 e0       	ldi	r18, 0x07	; 7
    b684:	33 27       	eor	r19, r19
    b686:	da 01       	movw	r26, r20
    b688:	99 0f       	add	r25, r25
    b68a:	31 1d       	adc	r19, r1
    b68c:	87 fd       	sbrc	r24, 7
    b68e:	91 60       	ori	r25, 0x01	; 1
    b690:	00 96       	adiw	r24, 0x00	; 0
    b692:	61 05       	cpc	r22, r1
    b694:	71 05       	cpc	r23, r1
    b696:	39 f4       	brne	.+14     	; 0xb6a6 <__ftoa_engine+0x28>
    b698:	32 60       	ori	r19, 0x02	; 2
    b69a:	2e 5f       	subi	r18, 0xFE	; 254
    b69c:	3d 93       	st	X+, r19
    b69e:	30 e3       	ldi	r19, 0x30	; 48
    b6a0:	2a 95       	dec	r18
    b6a2:	e1 f7       	brne	.-8      	; 0xb69c <__ftoa_engine+0x1e>
    b6a4:	08 95       	ret
    b6a6:	9f 3f       	cpi	r25, 0xFF	; 255
    b6a8:	30 f0       	brcs	.+12     	; 0xb6b6 <__ftoa_engine+0x38>
    b6aa:	80 38       	cpi	r24, 0x80	; 128
    b6ac:	71 05       	cpc	r23, r1
    b6ae:	61 05       	cpc	r22, r1
    b6b0:	09 f0       	breq	.+2      	; 0xb6b4 <__ftoa_engine+0x36>
    b6b2:	3c 5f       	subi	r19, 0xFC	; 252
    b6b4:	3c 5f       	subi	r19, 0xFC	; 252
    b6b6:	3d 93       	st	X+, r19
    b6b8:	91 30       	cpi	r25, 0x01	; 1
    b6ba:	08 f0       	brcs	.+2      	; 0xb6be <__ftoa_engine+0x40>
    b6bc:	80 68       	ori	r24, 0x80	; 128
    b6be:	91 1d       	adc	r25, r1
    b6c0:	df 93       	push	r29
    b6c2:	cf 93       	push	r28
    b6c4:	1f 93       	push	r17
    b6c6:	0f 93       	push	r16
    b6c8:	ff 92       	push	r15
    b6ca:	ef 92       	push	r14
    b6cc:	19 2f       	mov	r17, r25
    b6ce:	98 7f       	andi	r25, 0xF8	; 248
    b6d0:	96 95       	lsr	r25
    b6d2:	e9 2f       	mov	r30, r25
    b6d4:	96 95       	lsr	r25
    b6d6:	96 95       	lsr	r25
    b6d8:	e9 0f       	add	r30, r25
    b6da:	ff 27       	eor	r31, r31
    b6dc:	e2 57       	subi	r30, 0x72	; 114
    b6de:	f1 4e       	sbci	r31, 0xE1	; 225
    b6e0:	99 27       	eor	r25, r25
    b6e2:	33 27       	eor	r19, r19
    b6e4:	ee 24       	eor	r14, r14
    b6e6:	ff 24       	eor	r15, r15
    b6e8:	a7 01       	movw	r20, r14
    b6ea:	e7 01       	movw	r28, r14
    b6ec:	05 90       	lpm	r0, Z+
    b6ee:	08 94       	sec
    b6f0:	07 94       	ror	r0
    b6f2:	28 f4       	brcc	.+10     	; 0xb6fe <__ftoa_engine+0x80>
    b6f4:	36 0f       	add	r19, r22
    b6f6:	e7 1e       	adc	r14, r23
    b6f8:	f8 1e       	adc	r15, r24
    b6fa:	49 1f       	adc	r20, r25
    b6fc:	51 1d       	adc	r21, r1
    b6fe:	66 0f       	add	r22, r22
    b700:	77 1f       	adc	r23, r23
    b702:	88 1f       	adc	r24, r24
    b704:	99 1f       	adc	r25, r25
    b706:	06 94       	lsr	r0
    b708:	a1 f7       	brne	.-24     	; 0xb6f2 <__ftoa_engine+0x74>
    b70a:	05 90       	lpm	r0, Z+
    b70c:	07 94       	ror	r0
    b70e:	28 f4       	brcc	.+10     	; 0xb71a <__ftoa_engine+0x9c>
    b710:	e7 0e       	add	r14, r23
    b712:	f8 1e       	adc	r15, r24
    b714:	49 1f       	adc	r20, r25
    b716:	56 1f       	adc	r21, r22
    b718:	c1 1d       	adc	r28, r1
    b71a:	77 0f       	add	r23, r23
    b71c:	88 1f       	adc	r24, r24
    b71e:	99 1f       	adc	r25, r25
    b720:	66 1f       	adc	r22, r22
    b722:	06 94       	lsr	r0
    b724:	a1 f7       	brne	.-24     	; 0xb70e <__ftoa_engine+0x90>
    b726:	05 90       	lpm	r0, Z+
    b728:	07 94       	ror	r0
    b72a:	28 f4       	brcc	.+10     	; 0xb736 <__ftoa_engine+0xb8>
    b72c:	f8 0e       	add	r15, r24
    b72e:	49 1f       	adc	r20, r25
    b730:	56 1f       	adc	r21, r22
    b732:	c7 1f       	adc	r28, r23
    b734:	d1 1d       	adc	r29, r1
    b736:	88 0f       	add	r24, r24
    b738:	99 1f       	adc	r25, r25
    b73a:	66 1f       	adc	r22, r22
    b73c:	77 1f       	adc	r23, r23
    b73e:	06 94       	lsr	r0
    b740:	a1 f7       	brne	.-24     	; 0xb72a <__ftoa_engine+0xac>
    b742:	05 90       	lpm	r0, Z+
    b744:	07 94       	ror	r0
    b746:	20 f4       	brcc	.+8      	; 0xb750 <__ftoa_engine+0xd2>
    b748:	49 0f       	add	r20, r25
    b74a:	56 1f       	adc	r21, r22
    b74c:	c7 1f       	adc	r28, r23
    b74e:	d8 1f       	adc	r29, r24
    b750:	99 0f       	add	r25, r25
    b752:	66 1f       	adc	r22, r22
    b754:	77 1f       	adc	r23, r23
    b756:	88 1f       	adc	r24, r24
    b758:	06 94       	lsr	r0
    b75a:	a9 f7       	brne	.-22     	; 0xb746 <__ftoa_engine+0xc8>
    b75c:	84 91       	lpm	r24, Z+
    b75e:	10 95       	com	r17
    b760:	17 70       	andi	r17, 0x07	; 7
    b762:	41 f0       	breq	.+16     	; 0xb774 <__ftoa_engine+0xf6>
    b764:	d6 95       	lsr	r29
    b766:	c7 95       	ror	r28
    b768:	57 95       	ror	r21
    b76a:	47 95       	ror	r20
    b76c:	f7 94       	ror	r15
    b76e:	e7 94       	ror	r14
    b770:	1a 95       	dec	r17
    b772:	c1 f7       	brne	.-16     	; 0xb764 <__ftoa_engine+0xe6>
    b774:	e4 e3       	ldi	r30, 0x34	; 52
    b776:	fe e1       	ldi	r31, 0x1E	; 30
    b778:	68 94       	set
    b77a:	15 90       	lpm	r1, Z+
    b77c:	15 91       	lpm	r17, Z+
    b77e:	35 91       	lpm	r19, Z+
    b780:	65 91       	lpm	r22, Z+
    b782:	95 91       	lpm	r25, Z+
    b784:	05 90       	lpm	r0, Z+
    b786:	7f e2       	ldi	r23, 0x2F	; 47
    b788:	73 95       	inc	r23
    b78a:	e1 18       	sub	r14, r1
    b78c:	f1 0a       	sbc	r15, r17
    b78e:	43 0b       	sbc	r20, r19
    b790:	56 0b       	sbc	r21, r22
    b792:	c9 0b       	sbc	r28, r25
    b794:	d0 09       	sbc	r29, r0
    b796:	c0 f7       	brcc	.-16     	; 0xb788 <__ftoa_engine+0x10a>
    b798:	e1 0c       	add	r14, r1
    b79a:	f1 1e       	adc	r15, r17
    b79c:	43 1f       	adc	r20, r19
    b79e:	56 1f       	adc	r21, r22
    b7a0:	c9 1f       	adc	r28, r25
    b7a2:	d0 1d       	adc	r29, r0
    b7a4:	7e f4       	brtc	.+30     	; 0xb7c4 <__ftoa_engine+0x146>
    b7a6:	70 33       	cpi	r23, 0x30	; 48
    b7a8:	11 f4       	brne	.+4      	; 0xb7ae <__ftoa_engine+0x130>
    b7aa:	8a 95       	dec	r24
    b7ac:	e6 cf       	rjmp	.-52     	; 0xb77a <__ftoa_engine+0xfc>
    b7ae:	e8 94       	clt
    b7b0:	01 50       	subi	r16, 0x01	; 1
    b7b2:	30 f0       	brcs	.+12     	; 0xb7c0 <__ftoa_engine+0x142>
    b7b4:	08 0f       	add	r16, r24
    b7b6:	0a f4       	brpl	.+2      	; 0xb7ba <__ftoa_engine+0x13c>
    b7b8:	00 27       	eor	r16, r16
    b7ba:	02 17       	cp	r16, r18
    b7bc:	08 f4       	brcc	.+2      	; 0xb7c0 <__ftoa_engine+0x142>
    b7be:	20 2f       	mov	r18, r16
    b7c0:	23 95       	inc	r18
    b7c2:	02 2f       	mov	r16, r18
    b7c4:	7a 33       	cpi	r23, 0x3A	; 58
    b7c6:	28 f0       	brcs	.+10     	; 0xb7d2 <__ftoa_engine+0x154>
    b7c8:	79 e3       	ldi	r23, 0x39	; 57
    b7ca:	7d 93       	st	X+, r23
    b7cc:	2a 95       	dec	r18
    b7ce:	e9 f7       	brne	.-6      	; 0xb7ca <__ftoa_engine+0x14c>
    b7d0:	10 c0       	rjmp	.+32     	; 0xb7f2 <__ftoa_engine+0x174>
    b7d2:	7d 93       	st	X+, r23
    b7d4:	2a 95       	dec	r18
    b7d6:	89 f6       	brne	.-94     	; 0xb77a <__ftoa_engine+0xfc>
    b7d8:	06 94       	lsr	r0
    b7da:	97 95       	ror	r25
    b7dc:	67 95       	ror	r22
    b7de:	37 95       	ror	r19
    b7e0:	17 95       	ror	r17
    b7e2:	17 94       	ror	r1
    b7e4:	e1 18       	sub	r14, r1
    b7e6:	f1 0a       	sbc	r15, r17
    b7e8:	43 0b       	sbc	r20, r19
    b7ea:	56 0b       	sbc	r21, r22
    b7ec:	c9 0b       	sbc	r28, r25
    b7ee:	d0 09       	sbc	r29, r0
    b7f0:	98 f0       	brcs	.+38     	; 0xb818 <__ftoa_engine+0x19a>
    b7f2:	23 95       	inc	r18
    b7f4:	7e 91       	ld	r23, -X
    b7f6:	73 95       	inc	r23
    b7f8:	7a 33       	cpi	r23, 0x3A	; 58
    b7fa:	08 f0       	brcs	.+2      	; 0xb7fe <__ftoa_engine+0x180>
    b7fc:	70 e3       	ldi	r23, 0x30	; 48
    b7fe:	7c 93       	st	X, r23
    b800:	20 13       	cpse	r18, r16
    b802:	b8 f7       	brcc	.-18     	; 0xb7f2 <__ftoa_engine+0x174>
    b804:	7e 91       	ld	r23, -X
    b806:	70 61       	ori	r23, 0x10	; 16
    b808:	7d 93       	st	X+, r23
    b80a:	30 f0       	brcs	.+12     	; 0xb818 <__ftoa_engine+0x19a>
    b80c:	83 95       	inc	r24
    b80e:	71 e3       	ldi	r23, 0x31	; 49
    b810:	7d 93       	st	X+, r23
    b812:	70 e3       	ldi	r23, 0x30	; 48
    b814:	2a 95       	dec	r18
    b816:	e1 f7       	brne	.-8      	; 0xb810 <__ftoa_engine+0x192>
    b818:	11 24       	eor	r1, r1
    b81a:	ef 90       	pop	r14
    b81c:	ff 90       	pop	r15
    b81e:	0f 91       	pop	r16
    b820:	1f 91       	pop	r17
    b822:	cf 91       	pop	r28
    b824:	df 91       	pop	r29
    b826:	99 27       	eor	r25, r25
    b828:	87 fd       	sbrc	r24, 7
    b82a:	90 95       	com	r25
    b82c:	08 95       	ret

0000b82e <isspace>:
    b82e:	91 11       	cpse	r25, r1
    b830:	f9 c0       	rjmp	.+498    	; 0xba24 <__ctype_isfalse>
    b832:	80 32       	cpi	r24, 0x20	; 32
    b834:	19 f0       	breq	.+6      	; 0xb83c <isspace+0xe>
    b836:	89 50       	subi	r24, 0x09	; 9
    b838:	85 50       	subi	r24, 0x05	; 5
    b83a:	d0 f7       	brcc	.-12     	; 0xb830 <isspace+0x2>
    b83c:	08 95       	ret

0000b83e <strncasecmp_P>:
    b83e:	fb 01       	movw	r30, r22
    b840:	dc 01       	movw	r26, r24
    b842:	41 50       	subi	r20, 0x01	; 1
    b844:	50 40       	sbci	r21, 0x00	; 0
    b846:	88 f0       	brcs	.+34     	; 0xb86a <strncasecmp_P+0x2c>
    b848:	8d 91       	ld	r24, X+
    b84a:	81 34       	cpi	r24, 0x41	; 65
    b84c:	1c f0       	brlt	.+6      	; 0xb854 <strncasecmp_P+0x16>
    b84e:	8b 35       	cpi	r24, 0x5B	; 91
    b850:	0c f4       	brge	.+2      	; 0xb854 <strncasecmp_P+0x16>
    b852:	80 5e       	subi	r24, 0xE0	; 224
    b854:	65 91       	lpm	r22, Z+
    b856:	61 34       	cpi	r22, 0x41	; 65
    b858:	1c f0       	brlt	.+6      	; 0xb860 <strncasecmp_P+0x22>
    b85a:	6b 35       	cpi	r22, 0x5B	; 91
    b85c:	0c f4       	brge	.+2      	; 0xb860 <strncasecmp_P+0x22>
    b85e:	60 5e       	subi	r22, 0xE0	; 224
    b860:	86 1b       	sub	r24, r22
    b862:	61 11       	cpse	r22, r1
    b864:	71 f3       	breq	.-36     	; 0xb842 <strncasecmp_P+0x4>
    b866:	99 0b       	sbc	r25, r25
    b868:	08 95       	ret
    b86a:	88 1b       	sub	r24, r24
    b86c:	fc cf       	rjmp	.-8      	; 0xb866 <strncasecmp_P+0x28>

0000b86e <strnlen_P>:
    b86e:	fc 01       	movw	r30, r24
    b870:	05 90       	lpm	r0, Z+
    b872:	61 50       	subi	r22, 0x01	; 1
    b874:	70 40       	sbci	r23, 0x00	; 0
    b876:	01 10       	cpse	r0, r1
    b878:	d8 f7       	brcc	.-10     	; 0xb870 <strnlen_P+0x2>
    b87a:	80 95       	com	r24
    b87c:	90 95       	com	r25
    b87e:	8e 0f       	add	r24, r30
    b880:	9f 1f       	adc	r25, r31
    b882:	08 95       	ret

0000b884 <memcpy>:
    b884:	fb 01       	movw	r30, r22
    b886:	dc 01       	movw	r26, r24
    b888:	02 c0       	rjmp	.+4      	; 0xb88e <memcpy+0xa>
    b88a:	01 90       	ld	r0, Z+
    b88c:	0d 92       	st	X+, r0
    b88e:	41 50       	subi	r20, 0x01	; 1
    b890:	50 40       	sbci	r21, 0x00	; 0
    b892:	d8 f7       	brcc	.-10     	; 0xb88a <memcpy+0x6>
    b894:	08 95       	ret

0000b896 <memset>:
    b896:	dc 01       	movw	r26, r24
    b898:	01 c0       	rjmp	.+2      	; 0xb89c <memset+0x6>
    b89a:	6d 93       	st	X+, r22
    b89c:	41 50       	subi	r20, 0x01	; 1
    b89e:	50 40       	sbci	r21, 0x00	; 0
    b8a0:	e0 f7       	brcc	.-8      	; 0xb89a <memset+0x4>
    b8a2:	08 95       	ret

0000b8a4 <strnlen>:
    b8a4:	fc 01       	movw	r30, r24
    b8a6:	61 50       	subi	r22, 0x01	; 1
    b8a8:	70 40       	sbci	r23, 0x00	; 0
    b8aa:	01 90       	ld	r0, Z+
    b8ac:	01 10       	cpse	r0, r1
    b8ae:	d8 f7       	brcc	.-10     	; 0xb8a6 <strnlen+0x2>
    b8b0:	80 95       	com	r24
    b8b2:	90 95       	com	r25
    b8b4:	8e 0f       	add	r24, r30
    b8b6:	9f 1f       	adc	r25, r31
    b8b8:	08 95       	ret

0000b8ba <__mulhi_const_10>:
    b8ba:	7a e0       	ldi	r23, 0x0A	; 10
    b8bc:	97 9f       	mul	r25, r23
    b8be:	90 2d       	mov	r25, r0
    b8c0:	87 9f       	mul	r24, r23
    b8c2:	80 2d       	mov	r24, r0
    b8c4:	91 0d       	add	r25, r1
    b8c6:	11 24       	eor	r1, r1
    b8c8:	08 95       	ret

0000b8ca <fputc>:
    b8ca:	0f 93       	push	r16
    b8cc:	1f 93       	push	r17
    b8ce:	cf 93       	push	r28
    b8d0:	df 93       	push	r29
    b8d2:	8c 01       	movw	r16, r24
    b8d4:	eb 01       	movw	r28, r22
    b8d6:	8b 81       	ldd	r24, Y+3	; 0x03
    b8d8:	81 ff       	sbrs	r24, 1
    b8da:	1b c0       	rjmp	.+54     	; 0xb912 <fputc+0x48>
    b8dc:	82 ff       	sbrs	r24, 2
    b8de:	0d c0       	rjmp	.+26     	; 0xb8fa <fputc+0x30>
    b8e0:	2e 81       	ldd	r18, Y+6	; 0x06
    b8e2:	3f 81       	ldd	r19, Y+7	; 0x07
    b8e4:	8c 81       	ldd	r24, Y+4	; 0x04
    b8e6:	9d 81       	ldd	r25, Y+5	; 0x05
    b8e8:	28 17       	cp	r18, r24
    b8ea:	39 07       	cpc	r19, r25
    b8ec:	64 f4       	brge	.+24     	; 0xb906 <fputc+0x3c>
    b8ee:	e8 81       	ld	r30, Y
    b8f0:	f9 81       	ldd	r31, Y+1	; 0x01
    b8f2:	01 93       	st	Z+, r16
    b8f4:	e8 83       	st	Y, r30
    b8f6:	f9 83       	std	Y+1, r31	; 0x01
    b8f8:	06 c0       	rjmp	.+12     	; 0xb906 <fputc+0x3c>
    b8fa:	e8 85       	ldd	r30, Y+8	; 0x08
    b8fc:	f9 85       	ldd	r31, Y+9	; 0x09
    b8fe:	80 2f       	mov	r24, r16
    b900:	19 95       	eicall
    b902:	89 2b       	or	r24, r25
    b904:	31 f4       	brne	.+12     	; 0xb912 <fputc+0x48>
    b906:	8e 81       	ldd	r24, Y+6	; 0x06
    b908:	9f 81       	ldd	r25, Y+7	; 0x07
    b90a:	01 96       	adiw	r24, 0x01	; 1
    b90c:	8e 83       	std	Y+6, r24	; 0x06
    b90e:	9f 83       	std	Y+7, r25	; 0x07
    b910:	02 c0       	rjmp	.+4      	; 0xb916 <fputc+0x4c>
    b912:	0f ef       	ldi	r16, 0xFF	; 255
    b914:	1f ef       	ldi	r17, 0xFF	; 255
    b916:	c8 01       	movw	r24, r16
    b918:	df 91       	pop	r29
    b91a:	cf 91       	pop	r28
    b91c:	1f 91       	pop	r17
    b91e:	0f 91       	pop	r16
    b920:	08 95       	ret

0000b922 <printf_P>:
    b922:	df 93       	push	r29
    b924:	cf 93       	push	r28
    b926:	cd b7       	in	r28, 0x3d	; 61
    b928:	de b7       	in	r29, 0x3e	; 62
    b92a:	fe 01       	movw	r30, r28
    b92c:	36 96       	adiw	r30, 0x06	; 6
    b92e:	61 91       	ld	r22, Z+
    b930:	71 91       	ld	r23, Z+
    b932:	a0 91 8c 26 	lds	r26, 0x268C
    b936:	b0 91 8d 26 	lds	r27, 0x268D
    b93a:	13 96       	adiw	r26, 0x03	; 3
    b93c:	8c 91       	ld	r24, X
    b93e:	13 97       	sbiw	r26, 0x03	; 3
    b940:	88 60       	ori	r24, 0x08	; 8
    b942:	13 96       	adiw	r26, 0x03	; 3
    b944:	8c 93       	st	X, r24
    b946:	80 91 8c 26 	lds	r24, 0x268C
    b94a:	90 91 8d 26 	lds	r25, 0x268D
    b94e:	af 01       	movw	r20, r30
    b950:	0e 94 5e 51 	call	0xa2bc	; 0xa2bc <vfprintf>
    b954:	e0 91 8c 26 	lds	r30, 0x268C
    b958:	f0 91 8d 26 	lds	r31, 0x268D
    b95c:	23 81       	ldd	r18, Z+3	; 0x03
    b95e:	27 7f       	andi	r18, 0xF7	; 247
    b960:	23 83       	std	Z+3, r18	; 0x03
    b962:	cf 91       	pop	r28
    b964:	df 91       	pop	r29
    b966:	08 95       	ret

0000b968 <__ultoa_invert>:
    b968:	fa 01       	movw	r30, r20
    b96a:	aa 27       	eor	r26, r26
    b96c:	28 30       	cpi	r18, 0x08	; 8
    b96e:	51 f1       	breq	.+84     	; 0xb9c4 <__ultoa_invert+0x5c>
    b970:	20 31       	cpi	r18, 0x10	; 16
    b972:	81 f1       	breq	.+96     	; 0xb9d4 <__ultoa_invert+0x6c>
    b974:	e8 94       	clt
    b976:	6f 93       	push	r22
    b978:	6e 7f       	andi	r22, 0xFE	; 254
    b97a:	6e 5f       	subi	r22, 0xFE	; 254
    b97c:	7f 4f       	sbci	r23, 0xFF	; 255
    b97e:	8f 4f       	sbci	r24, 0xFF	; 255
    b980:	9f 4f       	sbci	r25, 0xFF	; 255
    b982:	af 4f       	sbci	r26, 0xFF	; 255
    b984:	b1 e0       	ldi	r27, 0x01	; 1
    b986:	3e d0       	rcall	.+124    	; 0xba04 <__ultoa_invert+0x9c>
    b988:	b4 e0       	ldi	r27, 0x04	; 4
    b98a:	3c d0       	rcall	.+120    	; 0xba04 <__ultoa_invert+0x9c>
    b98c:	67 0f       	add	r22, r23
    b98e:	78 1f       	adc	r23, r24
    b990:	89 1f       	adc	r24, r25
    b992:	9a 1f       	adc	r25, r26
    b994:	a1 1d       	adc	r26, r1
    b996:	68 0f       	add	r22, r24
    b998:	79 1f       	adc	r23, r25
    b99a:	8a 1f       	adc	r24, r26
    b99c:	91 1d       	adc	r25, r1
    b99e:	a1 1d       	adc	r26, r1
    b9a0:	6a 0f       	add	r22, r26
    b9a2:	71 1d       	adc	r23, r1
    b9a4:	81 1d       	adc	r24, r1
    b9a6:	91 1d       	adc	r25, r1
    b9a8:	a1 1d       	adc	r26, r1
    b9aa:	20 d0       	rcall	.+64     	; 0xb9ec <__ultoa_invert+0x84>
    b9ac:	09 f4       	brne	.+2      	; 0xb9b0 <__ultoa_invert+0x48>
    b9ae:	68 94       	set
    b9b0:	3f 91       	pop	r19
    b9b2:	2a e0       	ldi	r18, 0x0A	; 10
    b9b4:	26 9f       	mul	r18, r22
    b9b6:	11 24       	eor	r1, r1
    b9b8:	30 19       	sub	r19, r0
    b9ba:	30 5d       	subi	r19, 0xD0	; 208
    b9bc:	31 93       	st	Z+, r19
    b9be:	de f6       	brtc	.-74     	; 0xb976 <__ultoa_invert+0xe>
    b9c0:	cf 01       	movw	r24, r30
    b9c2:	08 95       	ret
    b9c4:	46 2f       	mov	r20, r22
    b9c6:	47 70       	andi	r20, 0x07	; 7
    b9c8:	40 5d       	subi	r20, 0xD0	; 208
    b9ca:	41 93       	st	Z+, r20
    b9cc:	b3 e0       	ldi	r27, 0x03	; 3
    b9ce:	0f d0       	rcall	.+30     	; 0xb9ee <__ultoa_invert+0x86>
    b9d0:	c9 f7       	brne	.-14     	; 0xb9c4 <__ultoa_invert+0x5c>
    b9d2:	f6 cf       	rjmp	.-20     	; 0xb9c0 <__ultoa_invert+0x58>
    b9d4:	46 2f       	mov	r20, r22
    b9d6:	4f 70       	andi	r20, 0x0F	; 15
    b9d8:	40 5d       	subi	r20, 0xD0	; 208
    b9da:	4a 33       	cpi	r20, 0x3A	; 58
    b9dc:	18 f0       	brcs	.+6      	; 0xb9e4 <__ultoa_invert+0x7c>
    b9de:	49 5d       	subi	r20, 0xD9	; 217
    b9e0:	31 fd       	sbrc	r19, 1
    b9e2:	40 52       	subi	r20, 0x20	; 32
    b9e4:	41 93       	st	Z+, r20
    b9e6:	02 d0       	rcall	.+4      	; 0xb9ec <__ultoa_invert+0x84>
    b9e8:	a9 f7       	brne	.-22     	; 0xb9d4 <__ultoa_invert+0x6c>
    b9ea:	ea cf       	rjmp	.-44     	; 0xb9c0 <__ultoa_invert+0x58>
    b9ec:	b4 e0       	ldi	r27, 0x04	; 4
    b9ee:	a6 95       	lsr	r26
    b9f0:	97 95       	ror	r25
    b9f2:	87 95       	ror	r24
    b9f4:	77 95       	ror	r23
    b9f6:	67 95       	ror	r22
    b9f8:	ba 95       	dec	r27
    b9fa:	c9 f7       	brne	.-14     	; 0xb9ee <__ultoa_invert+0x86>
    b9fc:	00 97       	sbiw	r24, 0x00	; 0
    b9fe:	61 05       	cpc	r22, r1
    ba00:	71 05       	cpc	r23, r1
    ba02:	08 95       	ret
    ba04:	9b 01       	movw	r18, r22
    ba06:	ac 01       	movw	r20, r24
    ba08:	0a 2e       	mov	r0, r26
    ba0a:	06 94       	lsr	r0
    ba0c:	57 95       	ror	r21
    ba0e:	47 95       	ror	r20
    ba10:	37 95       	ror	r19
    ba12:	27 95       	ror	r18
    ba14:	ba 95       	dec	r27
    ba16:	c9 f7       	brne	.-14     	; 0xba0a <__ultoa_invert+0xa2>
    ba18:	62 0f       	add	r22, r18
    ba1a:	73 1f       	adc	r23, r19
    ba1c:	84 1f       	adc	r24, r20
    ba1e:	95 1f       	adc	r25, r21
    ba20:	a0 1d       	adc	r26, r0
    ba22:	08 95       	ret

0000ba24 <__ctype_isfalse>:
    ba24:	99 27       	eor	r25, r25
    ba26:	88 27       	eor	r24, r24

0000ba28 <__ctype_istrue>:
    ba28:	08 95       	ret

0000ba2a <_exit>:
    ba2a:	f8 94       	cli

0000ba2c <__stop_program>:
    ba2c:	ff cf       	rjmp	.-2      	; 0xba2c <__stop_program>
