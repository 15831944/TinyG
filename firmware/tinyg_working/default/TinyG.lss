
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000953a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001cc  00802000  0000953a  000095ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003bc  008021cc  008021cc  0000979a  2**0
                  ALLOC
  3 .debug_aranges 00000380  00000000  00000000  0000979a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e96  00000000  00000000  00009b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000d44f  00000000  00000000  0000a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002dbb  00000000  00000000  00017dff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000527c  00000000  00000000  0001abba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ae0  00000000  00000000  0001fe38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000024e1  00000000  00000000  00020918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003baf  00000000  00000000  00022df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  000269a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__ctors_end>
       4:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
       8:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
       c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      10:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      14:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      18:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      1c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      20:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      24:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      28:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      2c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      30:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      34:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      38:	0c 94 b1 27 	jmp	0x4f62	; 0x4f62 <__vector_14>
      3c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      40:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      44:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      48:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      4c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      50:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      54:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      58:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      5c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      60:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      64:	0c 94 3a 2c 	jmp	0x5874	; 0x5874 <__vector_25>
      68:	0c 94 df 29 	jmp	0x53be	; 0x53be <__vector_26>
      6c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      70:	0c 94 ee 36 	jmp	0x6ddc	; 0x6ddc <__vector_28>
      74:	0c 94 b6 34 	jmp	0x696c	; 0x696c <__vector_29>
      78:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      7c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      80:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      84:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      88:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      8c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      90:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      94:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      98:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      9c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      a0:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      a4:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      a8:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      ac:	0c 94 4c 33 	jmp	0x6698	; 0x6698 <__vector_43>
      b0:	0c 94 56 33 	jmp	0x66ac	; 0x66ac <__vector_44>
      b4:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      b8:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      bc:	0c 94 e7 26 	jmp	0x4dce	; 0x4dce <__vector_47>
      c0:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      c4:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      c8:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      cc:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      d0:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      d4:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      d8:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      dc:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      e0:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      e4:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      e8:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      ec:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      f0:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      f4:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      f8:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
      fc:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     100:	0c 94 60 33 	jmp	0x66c0	; 0x66c0 <__vector_64>
     104:	0c 94 6a 33 	jmp	0x66d4	; 0x66d4 <__vector_65>
     108:	0c 94 24 33 	jmp	0x6648	; 0x6648 <__vector_66>
     10c:	0c 94 2e 33 	jmp	0x665c	; 0x665c <__vector_67>
     110:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     114:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     118:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     11c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     120:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     124:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     128:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     12c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     130:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     134:	0c 94 4c 27 	jmp	0x4e98	; 0x4e98 <__vector_77>
     138:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     13c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     140:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     144:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     148:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     14c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     150:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     154:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     158:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     15c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     160:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     164:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     168:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     16c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     170:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     174:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     178:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     17c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     180:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     184:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     188:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     18c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     190:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     194:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     198:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     19c:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     1a0:	0c 94 38 33 	jmp	0x6670	; 0x6670 <__vector_104>
     1a4:	0c 94 42 33 	jmp	0x6684	; 0x6684 <__vector_105>
     1a8:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     1ac:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     1b0:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__vector_108>
     1b4:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     1b8:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     1bc:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     1c0:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     1c4:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     1c8:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     1cc:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     1d0:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     1d4:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     1d8:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     1dc:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     1e0:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     1e4:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <cfgMsgXaxis>:
     23b:	58 00                                               X.

0000023d <cfgMsgYaxis>:
     23d:	59 00                                               Y.

0000023f <cfgMsgZaxis>:
     23f:	5a 00                                               Z.

00000241 <cfgMsgAaxis>:
     241:	41 00                                               A.

00000243 <cfgMsgs>:
     243:	3b 02 3d 02 3f 02 41 02                             ;.=.?.A.

0000024b <configs_P>:
     24b:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25b:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26b:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27b:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28b:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29b:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2ab:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bb:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2db:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2eb:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2fb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30b:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31b:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32b:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33b:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34b:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35b:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36b:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37b:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38b:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

00000399 <__c.3833>:
     399:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     3a9:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

000003b4 <__c.3830>:
     3b4:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     3c4:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

000003ce <__c.3827>:
     3ce:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     3de:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

000003e8 <__c.3824>:
     3e8:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     3f8:	74 3a 20 25 73 0a 00                                t: %s..

000003ff <__c.3821>:
     3ff:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     40f:	4d 6f 64 65 0a 00                                   Mode..

00000415 <__c.3818>:
     415:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     425:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

00000432 <__c.3750>:
     432:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     442:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     452:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     462:	29 0a 0a 00                                         )...

00000466 <__c.3748>:
     466:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     476:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     486:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000496 <__c.3746>:
     496:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     4a6:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4b6:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004c7 <__c.3744>:
     4c7:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     4d7:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4e7:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004f8 <__c.3742>:
     4f8:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     508:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     518:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     528:	6c 0a 00                                            l..

0000052b <__c.3740>:
     52b:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     53b:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     54b:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     55b:	6e 0a 00                                            n..

0000055e <__c.3738>:
     55e:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     56e:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     57e:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     58e:	74 65 70 73 29 0a 00                                teps)..

00000595 <__c.3736>:
     595:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     5a5:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     5b5:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     5c5:	70 0a 00                                            p..

000005c8 <__c.3734>:
     5c8:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     5d8:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     5e8:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     5f8:	73 74 65 70 73 29 0a 00                             steps)..

00000600 <__c.3732>:
     600:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     610:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     620:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     630:	73 74 65 70 73 29 0a 00                             steps)..

00000638 <__c.3727>:
     638:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     648:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

00000656 <__c.3713>:
     656:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     666:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     676:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000681 <__c.3711>:
     681:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     691:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     6a1:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000006ab <__c.3709>:
     6ab:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     6bb:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     6cb:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000006d5 <__c.3707>:
     6d5:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     6e5:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     6f5:	73 20 2d 2d 2d 0a 00                                s ---..

000006fc <__c.3705>:
     6fc:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     70c:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     71c:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000724 <__c.3529>:
     724:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     734:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     744:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000750 <readlnFuncs>:
     750:	a6 2b 7b 2b 7b 2b e6 2b 7b 2b 7b 2b 7b 2b 7b 2b     .+{+{+.+{+{+{+{+
     760:	d2 2b 7b 2b a6 2b 7b 2b 7b 2b a6 2b 7b 2b 7b 2b     .+{+.+{+{+.+{+{+
     770:	7b 2b f2 2b 7b 2b ec 2b 7b 2b 7b 2b 7b 2b 7b 2b     {+.+{+.+{+{+{+{+
     780:	e6 2b 7b 2b 7b 2b e6 2b 7b 2b 7b 2b 7b 2b 7b 2b     .+{+{+.+{+{+{+{+
     790:	7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b     {+{+{+{+{+{+{+{+
     7a0:	7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b     {+{+{+{+{+{+{+{+
     7b0:	7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b     {+{+{+{+{+{+{+{+
     7c0:	7b 2b 7b 2b 7b 2b c8 2b 7b 2b 7b 2b 7b 2b 7b 2b     {+{+{+.+{+{+{+{+
     7d0:	7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b     {+{+{+{+{+{+{+{+
     7e0:	7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b     {+{+{+{+{+{+{+{+
     7f0:	7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b     {+{+{+{+{+{+{+{+
     800:	7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b     {+{+{+{+{+{+{+{+
     810:	7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b     {+{+{+{+{+{+{+{+
     820:	7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b     {+{+{+{+{+{+{+{+
     830:	7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b     {+{+{+{+{+{+{+{+
     840:	7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b 7b 2b d2 2b     {+{+{+{+{+{+{+.+

00000850 <getcFuncs>:
     850:	f5 2a e5 2a e5 2a e6 2b e5 2a e5 2a e5 2a e5 2a     .*.*.*.+.*.*.*.*
     860:	14 2b e5 2a f5 2a e5 2a e5 2a f5 2a e5 2a e5 2a     .+.*.*.*.*.*.*.*
     870:	e5 2a f2 2b e5 2a ec 2b e5 2a e5 2a e5 2a e5 2a     .*.+.*.+.*.*.*.*
     880:	e6 2b e5 2a e5 2a e6 2b e5 2a e5 2a e5 2a e5 2a     .+.*.*.+.*.*.*.*
     890:	e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a     .*.*.*.*.*.*.*.*
     8a0:	e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a     .*.*.*.*.*.*.*.*
     8b0:	e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a     .*.*.*.*.*.*.*.*
     8c0:	e5 2a e5 2a e5 2a 0a 2b e5 2a e5 2a e5 2a e5 2a     .*.*.*.+.*.*.*.*
     8d0:	e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a     .*.*.*.*.*.*.*.*
     8e0:	e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a     .*.*.*.*.*.*.*.*
     8f0:	e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a     .*.*.*.*.*.*.*.*
     900:	e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a     .*.*.*.*.*.*.*.*
     910:	e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a     .*.*.*.*.*.*.*.*
     920:	e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a     .*.*.*.*.*.*.*.*
     930:	e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a     .*.*.*.*.*.*.*.*
     940:	e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a e5 2a 14 2b     .*.*.*.*.*.*.*.+

00000950 <square_test1>:
     950:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     960:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     970:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     980:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     990:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     9a0:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     9b0:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000009be <square_test2>:
     9be:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     9ce:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     9de:	78 30 20 79 30 00                                   x0 y0.

000009e4 <square_test10>:
     9e4:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     9f4:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     a04:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000a10 <circle_test10>:
     a10:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     a20:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     a30:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     a40:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     a50:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     a60:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     a70:	30 00                                               0.

00000a72 <square_circle_test10>:
     a72:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     a82:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     a92:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     aa2:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     ab2:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     ac2:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     ad2:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     ae2:	31 30 20 79 30 00                                   10 y0.

00000ae8 <square_circle_test100>:
     ae8:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     af8:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     b08:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     b18:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     b28:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     b38:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     b48:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     b58:	35 30 20 6a 30 00                                   50 j0.

00000b5e <spiral_test5>:
     b5e:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     b6e:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     b7e:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     b8e:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     b9e:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     bae:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     bbe:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     bce:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

00000bd8 <spiral_test50a>:
     bd8:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     be8:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

00000bf8 <dwell_test1>:
     bf8:	67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30 20     g0 x10.g4 p1.g0 
     c08:	78 32 30 0a 67 34 20 70 31 0a 67 30 20 78 31 30     x20.g4 p1.g0 x10
     c18:	0a 67 34 20 70 31 0a 67 30 20 78 30 30 0a 67 34     .g4 p1.g0 x00.g4
     c28:	20 70 31 0a 67 30 20 78 31 30 0a 67 34 20 70 31      p1.g0 x10.g4 p1
     c38:	0a 67 30 20 78 32 30 0a 67 34 20 70 31 0a 67 30     .g0 x20.g4 p1.g0
     c48:	20 78 31 30 0a 67 34 20 70 31 0a 67 30 20 78 30      x10.g4 p1.g0 x0
     c58:	0a 67 34 20 70 31 0a 67 30 20 78 31 30 0a 67 34     .g4 p1.g0 x10.g4
     c68:	20 70 31 0a 67 30 20 78 32 30 0a 67 34 20 70 31      p1.g0 x20.g4 p1
     c78:	0a 67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30     .g0 x10.g4 p1.g0
     c88:	20 78 30 00                                          x0.

00000c8c <dwell_test2>:
     c8c:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     c9c:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     cac:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     cbc:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     ccc:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     cdc:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     cec:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     cfc:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     d0c:	20 70 31 0a 67 30 20 78 30 00                        p1.g0 x0.

00000d16 <dwell_testMax>:
     d16:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000d20 <g0_test1>:
     d20:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     d30:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000d40 <g0_test2>:
     d40:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     d50:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     d60:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     d70:	79 30 20 7a 30 00                                   y0 z0.

00000d76 <g0_test3>:
     d76:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     d86:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     d96:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000da4 <radius_arc_test1>:
     da4:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     db4:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     dc4:	72 35 30 0a 00                                      r50..

00000dc9 <radius_arc_test2>:
     dc9:	67 32 0a 00                                         g2..

00000dcd <zoetrope>:
     dcd:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     ddd:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     ded:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     dfd:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     e0d:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     e1d:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     e2d:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     e3d:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     e4d:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     e5d:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     e6d:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     e7d:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     e8d:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     e9d:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     ead:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     ebd:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     ecd:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     edd:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     eed:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     efd:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     f0d:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     f1d:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     f2d:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     f3d:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     f4d:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     f5d:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     f6d:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     f7d:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     f8d:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     f9d:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     fad:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     fbd:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     fcd:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     fdd:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     fed:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     ffd:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
    100d:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
    101d:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
    102d:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
    103d:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
    104d:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
    105d:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
    106d:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
    107d:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
    108d:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
    109d:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
    10ad:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
    10bd:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
    10cd:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
    10dd:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
    10ed:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
    10fd:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
    110d:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
    111d:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
    112d:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
    113d:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
    114d:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
    115d:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
    116d:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
    117d:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
    118d:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
    119d:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
    11ad:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
    11bd:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
    11cd:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
    11dd:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
    11ed:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
    11fd:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    120d:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    121d:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    122d:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    123d:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    124d:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    125d:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    126d:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    127d:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    128d:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    129d:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    12ad:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    12bd:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    12cd:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    12dd:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    12ed:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    12fd:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    130d:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    131d:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    132d:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    133d:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    134d:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    135d:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    136d:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    137d:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    138d:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    139d:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    13ad:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    13bd:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    13cd:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    13dd:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    13ed:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    13fd:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    140d:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    141d:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    142d:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    143d:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    144d:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    145d:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    146d:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    147d:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    148d:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    149d:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    14ad:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    14bd:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    14cd:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    14dd:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    14ed:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    14fd:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    150d:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    151d:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    152d:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    153d:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    154d:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    155d:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    156d:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    157d:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    158d:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    159d:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    15ad:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    15bd:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    15cd:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    15dd:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    15ed:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    15fd:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    160d:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    161d:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    162d:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    163d:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    164d:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    165d:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    166d:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    167d:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    168d:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    169d:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    16ad:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    16bd:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    16cd:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    16dd:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    16ed:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    16fd:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    170d:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    171d:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    172d:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    173d:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    174d:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    175d:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    176d:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    177d:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

00001788 <contraptor_circle>:
    1788:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    1798:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    17a8:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    17b8:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    17c8:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    17d8:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    17e8:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    17f8:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    1808:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    1818:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    1828:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    1838:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    1848:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    1858:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    1868:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    1878:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    1888:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    1898:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    18a8:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    18b8:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    18c8:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    18d8:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    18e8:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    18f8:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    1908:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    1918:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    1928:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    1938:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    1948:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    1958:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    1968:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    1978:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    1988:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    1998:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    19a8:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    19b8:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    19c8:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    19d8:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    19e8:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    19f8:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    1a08:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1a18:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1a28:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    1a38:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    1a48:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    1a58:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    1a68:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    1a78:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    1a88:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1a98:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    1aa8:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    1ab8:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    1ac8:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    1ad8:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    1ae8:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    1af8:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    1b08:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1b18:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1b28:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1b38:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1b48:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1b58:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001b68 <tgModeStringControl>:
    1b68:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001b75 <tgModeStringConfig>:
    1b75:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001b81 <tgModeStringGCode>:
    1b81:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

00001b8d <tgModeStringDirect>:
    1b8d:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

00001b9a <tgModeStrings>:
    1b9a:	68 1b 75 1b 81 1b 8d 1b                             h.u.....

00001ba2 <__c.3851>:
    1ba2:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1bb2:	69 6c 65 0a 00                                      ile..

00001bb7 <__c.3912>:
    1bb7:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001bc5 <__c.3830>:
    1bc5:	62 75 69 6c 64 20 32 30 33 00                       build 203.

00001bcf <__c.3828>:
    1bcf:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1bdf:	25 53 0a 00                                         %S..

00001be3 <readlnFuncs>:
    1be3:	5a 36 2f 36 2f 36 9a 36 2f 36 2f 36 2f 36 2f 36     Z6/6/6.6/6/6/6/6
    1bf3:	86 36 2f 36 5a 36 2f 36 2f 36 5a 36 2f 36 2f 36     .6/6Z6/6/6Z6/6/6
    1c03:	2f 36 a6 36 2f 36 a0 36 2f 36 2f 36 2f 36 2f 36     /6.6/6.6/6/6/6/6
    1c13:	9a 36 2f 36 2f 36 9a 36 2f 36 2f 36 2f 36 2f 36     .6/6/6.6/6/6/6/6
    1c23:	2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36     /6/6/6/6/6/6/6/6
    1c33:	2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36     /6/6/6/6/6/6/6/6
    1c43:	2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36     /6/6/6/6/6/6/6/6
    1c53:	2f 36 2f 36 2f 36 7c 36 2f 36 2f 36 2f 36 2f 36     /6/6/6|6/6/6/6/6
    1c63:	2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36     /6/6/6/6/6/6/6/6
    1c73:	2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36     /6/6/6/6/6/6/6/6
    1c83:	2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36     /6/6/6/6/6/6/6/6
    1c93:	2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36     /6/6/6/6/6/6/6/6
    1ca3:	2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36     /6/6/6/6/6/6/6/6
    1cb3:	2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36     /6/6/6/6/6/6/6/6
    1cc3:	2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36     /6/6/6/6/6/6/6/6
    1cd3:	2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 2f 36 86 36     /6/6/6/6/6/6/6.6

00001ce3 <getcFuncs>:
    1ce3:	cc 35 bc 35 bc 35 9a 36 bc 35 bc 35 bc 35 bc 35     .5.5.5.6.5.5.5.5
    1cf3:	eb 35 bc 35 cc 35 bc 35 bc 35 cc 35 bc 35 bc 35     .5.5.5.5.5.5.5.5
    1d03:	bc 35 a6 36 bc 35 a0 36 bc 35 bc 35 bc 35 bc 35     .5.6.5.6.5.5.5.5
    1d13:	9a 36 bc 35 bc 35 9a 36 bc 35 bc 35 bc 35 bc 35     .6.5.5.6.5.5.5.5
    1d23:	bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35     .5.5.5.5.5.5.5.5
    1d33:	bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35     .5.5.5.5.5.5.5.5
    1d43:	bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35     .5.5.5.5.5.5.5.5
    1d53:	bc 35 bc 35 bc 35 e1 35 bc 35 bc 35 bc 35 bc 35     .5.5.5.5.5.5.5.5
    1d63:	bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35     .5.5.5.5.5.5.5.5
    1d73:	bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35     .5.5.5.5.5.5.5.5
    1d83:	bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35     .5.5.5.5.5.5.5.5
    1d93:	bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35     .5.5.5.5.5.5.5.5
    1da3:	bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35     .5.5.5.5.5.5.5.5
    1db3:	bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35     .5.5.5.5.5.5.5.5
    1dc3:	bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35     .5.5.5.5.5.5.5.5
    1dd3:	bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 bc 35 eb 35     .5.5.5.5.5.5.5.5

00001de3 <usart_addr>:
    1de3:	00 00 b0 08 a0 08 a0 08                             ........

00001deb <port_addr>:
    1deb:	00 00 40 06 40 06 40 06                             ..@.@.@.

00001df3 <pin_rx_bm>:
    1df3:	40 04 04                                            @..

00001df6 <pin_tx_bm>:
    1df6:	80 08 08                                            ...

00001df9 <pin_ct0_bm>:
    1df9:	10 01 01                                            ...

00001dfc <pin_ct1_bm>:
    1dfc:	20 02 02                                             ..

00001dff <bsel>:
    1dff:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

00001e0a <bscale>:
    1e0a:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

00001e15 <pstr_inf>:
    1e15:	49 4e 46                                            INF

00001e18 <pstr_inity>:
    1e18:	49 4e 49 54 59                                      INITY

00001e1d <pstr_nan>:
    1e1d:	4e 41 4e                                            NAN

00001e20 <pwr_m10>:
    1e20:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1e30:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001e38 <pwr_p10>:
    1e38:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1e48:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1e58:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1e68:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1e78:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1e88:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1e98:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1ea8:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1eb8:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1ec8:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1ed8:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1ee8:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1ef8:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1f08:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1f18:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1f28:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1f38:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1f48:	3d 27                                               ='

00001f4a <__ctors_end>:
    1f4a:	11 24       	eor	r1, r1
    1f4c:	1f be       	out	0x3f, r1	; 63
    1f4e:	cf ef       	ldi	r28, 0xFF	; 255
    1f50:	df e5       	ldi	r29, 0x5F	; 95
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	00 e0       	ldi	r16, 0x00	; 0
    1f58:	0c bf       	out	0x3c, r16	; 60

00001f5a <__do_copy_data>:
    1f5a:	11 e2       	ldi	r17, 0x21	; 33
    1f5c:	a0 e0       	ldi	r26, 0x00	; 0
    1f5e:	b0 e2       	ldi	r27, 0x20	; 32
    1f60:	ea e3       	ldi	r30, 0x3A	; 58
    1f62:	f5 e9       	ldi	r31, 0x95	; 149
    1f64:	00 e0       	ldi	r16, 0x00	; 0
    1f66:	0b bf       	out	0x3b, r16	; 59
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <__do_copy_data+0x14>
    1f6a:	07 90       	elpm	r0, Z+
    1f6c:	0d 92       	st	X+, r0
    1f6e:	ac 3c       	cpi	r26, 0xCC	; 204
    1f70:	b1 07       	cpc	r27, r17
    1f72:	d9 f7       	brne	.-10     	; 0x1f6a <__do_copy_data+0x10>

00001f74 <__do_clear_bss>:
    1f74:	15 e2       	ldi	r17, 0x25	; 37
    1f76:	ac ec       	ldi	r26, 0xCC	; 204
    1f78:	b1 e2       	ldi	r27, 0x21	; 33
    1f7a:	01 c0       	rjmp	.+2      	; 0x1f7e <.do_clear_bss_start>

00001f7c <.do_clear_bss_loop>:
    1f7c:	1d 92       	st	X+, r1

00001f7e <.do_clear_bss_start>:
    1f7e:	a8 38       	cpi	r26, 0x88	; 136
    1f80:	b1 07       	cpc	r27, r17
    1f82:	e1 f7       	brne	.-8      	; 0x1f7c <.do_clear_bss_loop>
    1f84:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <main>
    1f88:	0c 94 9b 4a 	jmp	0x9536	; 0x9536 <_exit>

00001f8c <__bad_interrupt>:
    1f8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001f90 <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1f90:	f8 94       	cli
	xmega_init();				// xmega setup
    1f92:	0e 94 bf 1b 	call	0x377e	; 0x377e <xmega_init>
	xio_init();					// xmega io subsystem
    1f96:	0e 94 73 28 	call	0x50e6	; 0x50e6 <xio_init>

	cfg_init();					// get config record from eeprom
    1f9a:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <cfg_init>
	st_init(); 					// stepper subsystem
    1f9e:	0e 94 3e 24 	call	0x487c	; 0x487c <st_init>
	ls_init();					// limit switches
    1fa2:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <ls_init>
	mv_init();					// move buffers
    1fa6:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <mv_init>
	mc_init();					// motion control subsystem
    1faa:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <mc_init>
	spindle_init();				// spindle controller
    1fae:	0e 94 22 24 	call	0x4844	; 0x4844 <spindle_init>
	en_init();					// encoders
    1fb2:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <en_init>
	gc_init();					// gcode-parser
    1fb6:	0e 94 17 10 	call	0x202e	; 0x202e <gc_init>
	dd_init();					// direct drive commands
    1fba:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <dd_init>
	tg_init();					// tinyg parsers
    1fbe:	0e 94 ab 30 	call	0x6156	; 0x6156 <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1fc2:	0e 94 24 28 	call	0x5048	; 0x5048 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1fc6:	e0 ea       	ldi	r30, 0xA0	; 160
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 91 a2 00 	lds	r24, 0x00A2
    1fce:	81 60       	ori	r24, 0x01	; 1
    1fd0:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1fd2:	80 91 a2 00 	lds	r24, 0x00A2
    1fd6:	82 60       	ori	r24, 0x02	; 2
    1fd8:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1fda:	80 91 a2 00 	lds	r24, 0x00A2
    1fde:	84 60       	ori	r24, 0x04	; 4
    1fe0:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1fe2:	78 94       	sei
//	xio_usb_queue_RX_string("f\n");
//	xio_usb_queue_RX_string("?\n");
//	xio_usb_queue_RX_string("g0x10y10z25\n");

	for(;;){
		tg_controller();
    1fe4:	0e 94 1d 30 	call	0x603a	; 0x603a <tg_controller>
    1fe8:	fd cf       	rjmp	.-6      	; 0x1fe4 <main+0x54>

00001fea <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1fea:	80 93 19 22 	sts	0x2219, r24
	gc.plane_axis_1 = axis_1;
    1fee:	60 93 1a 22 	sts	0x221A, r22
	gc.plane_axis_2 = axis_2;
    1ff2:	40 93 1b 22 	sts	0x221B, r20
}
    1ff6:	08 95       	ret

00001ff8 <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1ff8:	ef 92       	push	r14
    1ffa:	ff 92       	push	r15
    1ffc:	0f 93       	push	r16
    1ffe:	1f 93       	push	r17
    2000:	7b 01       	movw	r14, r22
    2002:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    2004:	80 91 d9 21 	lds	r24, 0x21D9
    2008:	88 23       	and	r24, r24
    200a:	51 f0       	breq	.+20     	; 0x2020 <to_millimeters+0x28>
    200c:	c8 01       	movw	r24, r16
    200e:	b7 01       	movw	r22, r14
    2010:	25 e8       	ldi	r18, 0x85	; 133
    2012:	32 e4       	ldi	r19, 0x42	; 66
    2014:	41 e2       	ldi	r20, 0x21	; 33
    2016:	5d e3       	ldi	r21, 0x3D	; 61
    2018:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    201c:	7b 01       	movw	r14, r22
    201e:	8c 01       	movw	r16, r24
}
    2020:	b7 01       	movw	r22, r14
    2022:	c8 01       	movw	r24, r16
    2024:	1f 91       	pop	r17
    2026:	0f 91       	pop	r16
    2028:	ff 90       	pop	r15
    202a:	ef 90       	pop	r14
    202c:	08 95       	ret

0000202e <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    202e:	86 e5       	ldi	r24, 0x56	; 86
    2030:	ec ec       	ldi	r30, 0xCC	; 204
    2032:	f1 e2       	ldi	r31, 0x21	; 33
    2034:	df 01       	movw	r26, r30
    2036:	1d 92       	st	X+, r1
    2038:	8a 95       	dec	r24
    203a:	e9 f7       	brne	.-6      	; 0x2036 <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	a0 e0       	ldi	r26, 0x00	; 0
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	80 93 dd 21 	sts	0x21DD, r24
    2048:	90 93 de 21 	sts	0x21DE, r25
    204c:	a0 93 df 21 	sts	0x21DF, r26
    2050:	b0 93 e0 21 	sts	0x21E0, r27
	gc.radius = 0;							// radius value
    2054:	80 93 e1 21 	sts	0x21E1, r24
    2058:	90 93 e2 21 	sts	0x21E2, r25
    205c:	a0 93 e3 21 	sts	0x21E3, r26
    2060:	b0 93 e4 21 	sts	0x21E4, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    2064:	80 91 be 24 	lds	r24, 0x24BE
    2068:	90 91 bf 24 	lds	r25, 0x24BF
    206c:	a0 91 c0 24 	lds	r26, 0x24C0
    2070:	b0 91 c1 24 	lds	r27, 0x24C1
    2074:	80 93 e5 21 	sts	0x21E5, r24
    2078:	90 93 e6 21 	sts	0x21E6, r25
    207c:	a0 93 e7 21 	sts	0x21E7, r26
    2080:	b0 93 e8 21 	sts	0x21E8, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    2084:	80 91 c2 24 	lds	r24, 0x24C2
    2088:	90 91 c3 24 	lds	r25, 0x24C3
    208c:	a0 91 c4 24 	lds	r26, 0x24C4
    2090:	b0 91 c5 24 	lds	r27, 0x24C5
    2094:	80 93 e9 21 	sts	0x21E9, r24
    2098:	90 93 ea 21 	sts	0x21EA, r25
    209c:	a0 93 eb 21 	sts	0x21EB, r26
    20a0:	b0 93 ec 21 	sts	0x21EC, r27

	gc.absolute_mode = TRUE;
    20a4:	21 e0       	ldi	r18, 0x01	; 1
    20a6:	20 93 da 21 	sts	0x21DA, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	a0 e8       	ldi	r26, 0x80	; 128
    20b0:	bf eb       	ldi	r27, 0xBF	; 191
    20b2:	80 93 f1 21 	sts	0x21F1, r24
    20b6:	90 93 f2 21 	sts	0x21F2, r25
    20ba:	a0 93 f3 21 	sts	0x21F3, r26
    20be:	b0 93 f4 21 	sts	0x21F4, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    20c2:	10 92 db 21 	sts	0x21DB, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    20c6:	10 92 20 22 	sts	0x2220, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    20ca:	10 92 21 22 	sts	0x2221, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    20ce:	10 92 19 22 	sts	0x2219, r1
	gc.plane_axis_1 = axis_1;
    20d2:	20 93 1a 22 	sts	0x221A, r18
	gc.plane_axis_2 = axis_2;
    20d6:	82 e0       	ldi	r24, 0x02	; 2
    20d8:	80 93 1b 22 	sts	0x221B, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X, Y, Z);
}
    20dc:	08 95       	ret

000020de <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    20de:	4f 92       	push	r4
    20e0:	5f 92       	push	r5
    20e2:	6f 92       	push	r6
    20e4:	7f 92       	push	r7
    20e6:	8f 92       	push	r8
    20e8:	9f 92       	push	r9
    20ea:	af 92       	push	r10
    20ec:	bf 92       	push	r11
    20ee:	cf 92       	push	r12
    20f0:	df 92       	push	r13
    20f2:	ef 92       	push	r14
    20f4:	ff 92       	push	r15
    20f6:	0f 93       	push	r16
    20f8:	1f 93       	push	r17
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	0f 92       	push	r0
    2100:	0f 92       	push	r0
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	3b 01       	movw	r6, r22
    2108:	2a 01       	movw	r4, r20
    210a:	49 01       	movw	r8, r18
    210c:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    210e:	d8 01       	movw	r26, r16
    2110:	ed 91       	ld	r30, X+
    2112:	fc 91       	ld	r31, X
    2114:	e2 0f       	add	r30, r18
    2116:	f3 1f       	adc	r31, r19
    2118:	e0 81       	ld	r30, Z
    211a:	ee 23       	and	r30, r30
    211c:	41 f0       	breq	.+16     	; 0x212e <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    211e:	dc 01       	movw	r26, r24
    2120:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    2122:	e1 54       	subi	r30, 0x41	; 65
    2124:	ea 31       	cpi	r30, 0x1A	; 26
    2126:	30 f0       	brcs	.+12     	; 0x2134 <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    2128:	8a e0       	ldi	r24, 0x0A	; 10
    212a:	80 93 cc 21 	sts	0x21CC, r24
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	35 c0       	rjmp	.+106    	; 0x219e <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    2134:	f8 01       	movw	r30, r16
    2136:	80 81       	ld	r24, Z
    2138:	91 81       	ldd	r25, Z+1	; 0x01
    213a:	01 96       	adiw	r24, 0x01	; 1
    213c:	80 83       	st	Z, r24
    213e:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    2140:	89 01       	movw	r16, r18
    2142:	08 0f       	add	r16, r24
    2144:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    2146:	c8 01       	movw	r24, r16
    2148:	be 01       	movw	r22, r28
    214a:	6f 5f       	subi	r22, 0xFF	; 255
    214c:	7f 4f       	sbci	r23, 0xFF	; 255
    214e:	0e 94 cf 46 	call	0x8d9e	; 0x8d9e <strtod>
    2152:	6b 01       	movw	r12, r22
    2154:	7c 01       	movw	r14, r24
    2156:	d3 01       	movw	r26, r6
    2158:	6d 93       	st	X+, r22
    215a:	7d 93       	st	X+, r23
    215c:	8d 93       	st	X+, r24
    215e:	9c 93       	st	X, r25
    2160:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	80 17       	cp	r24, r16
    2168:	91 07       	cpc	r25, r17
    216a:	11 f4       	brne	.+4      	; 0x2170 <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    216c:	8d e0       	ldi	r24, 0x0D	; 13
    216e:	dd cf       	rjmp	.-70     	; 0x212a <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    2170:	88 19       	sub	r24, r8
    2172:	99 09       	sbc	r25, r9
    2174:	f5 01       	movw	r30, r10
    2176:	80 83       	st	Z, r24
    2178:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    217a:	c7 01       	movw	r24, r14
    217c:	b6 01       	movw	r22, r12
    217e:	0e 94 34 46 	call	0x8c68	; 0x8c68 <trunc>
    2182:	9b 01       	movw	r18, r22
    2184:	ac 01       	movw	r20, r24
    2186:	c7 01       	movw	r24, r14
    2188:	b6 01       	movw	r22, r12
    218a:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    218e:	d2 01       	movw	r26, r4
    2190:	6d 93       	st	X+, r22
    2192:	7d 93       	st	X+, r23
    2194:	8d 93       	st	X+, r24
    2196:	9c 93       	st	X, r25
    2198:	13 97       	sbiw	r26, 0x03	; 3
    219a:	21 e0       	ldi	r18, 0x01	; 1
    219c:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    219e:	c9 01       	movw	r24, r18
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	1f 91       	pop	r17
    21aa:	0f 91       	pop	r16
    21ac:	ff 90       	pop	r15
    21ae:	ef 90       	pop	r14
    21b0:	df 90       	pop	r13
    21b2:	cf 90       	pop	r12
    21b4:	bf 90       	pop	r11
    21b6:	af 90       	pop	r10
    21b8:	9f 90       	pop	r9
    21ba:	8f 90       	pop	r8
    21bc:	7f 90       	pop	r7
    21be:	6f 90       	pop	r6
    21c0:	5f 90       	pop	r5
    21c2:	4f 90       	pop	r4
    21c4:	08 95       	ret

000021c6 <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    21c6:	af 92       	push	r10
    21c8:	bf 92       	push	r11
    21ca:	cf 92       	push	r12
    21cc:	df 92       	push	r13
    21ce:	ef 92       	push	r14
    21d0:	ff 92       	push	r15
    21d2:	0f 93       	push	r16
    21d4:	1f 93       	push	r17
    21d6:	79 01       	movw	r14, r18
    21d8:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    21da:	5f 77       	andi	r21, 0x7F	; 127
    21dc:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    21e0:	0e 94 89 42 	call	0x8512	; 0x8512 <atan>
    21e4:	5b 01       	movw	r10, r22
    21e6:	6c 01       	movw	r12, r24

	if (y>0) {
    21e8:	c8 01       	movw	r24, r16
    21ea:	b7 01       	movw	r22, r14
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	50 e0       	ldi	r21, 0x00	; 0
    21f4:	0e 94 b4 44 	call	0x8968	; 0x8968 <__gesf2>
    21f8:	18 16       	cp	r1, r24
    21fa:	cc f0       	brlt	.+50     	; 0x222e <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    21fc:	c6 01       	movw	r24, r12
    21fe:	b5 01       	movw	r22, r10
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e0       	ldi	r20, 0x00	; 0
    2206:	50 e0       	ldi	r21, 0x00	; 0
    2208:	0e 94 b4 44 	call	0x8968	; 0x8968 <__gesf2>
    220c:	18 16       	cp	r1, r24
    220e:	2c f4       	brge	.+10     	; 0x221a <theta+0x54>
	    {
			return(M_PI-theta);
    2210:	6b ed       	ldi	r22, 0xDB	; 219
    2212:	7f e0       	ldi	r23, 0x0F	; 15
    2214:	89 e4       	ldi	r24, 0x49	; 73
    2216:	90 e4       	ldi	r25, 0x40	; 64
    2218:	04 c0       	rjmp	.+8      	; 0x2222 <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    221a:	6b ed       	ldi	r22, 0xDB	; 219
    221c:	7f e0       	ldi	r23, 0x0F	; 15
    221e:	89 e4       	ldi	r24, 0x49	; 73
    2220:	90 ec       	ldi	r25, 0xC0	; 192
    2222:	a6 01       	movw	r20, r12
    2224:	95 01       	movw	r18, r10
    2226:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    222a:	5b 01       	movw	r10, r22
    222c:	6c 01       	movw	r12, r24
		}
	}
}
    222e:	b5 01       	movw	r22, r10
    2230:	c6 01       	movw	r24, r12
    2232:	1f 91       	pop	r17
    2234:	0f 91       	pop	r16
    2236:	ff 90       	pop	r15
    2238:	ef 90       	pop	r14
    223a:	df 90       	pop	r13
    223c:	cf 90       	pop	r12
    223e:	bf 90       	pop	r11
    2240:	af 90       	pop	r10
    2242:	08 95       	ret

00002244 <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    2244:	2f 92       	push	r2
    2246:	3f 92       	push	r3
    2248:	4f 92       	push	r4
    224a:	5f 92       	push	r5
    224c:	6f 92       	push	r6
    224e:	7f 92       	push	r7
    2250:	8f 92       	push	r8
    2252:	9f 92       	push	r9
    2254:	af 92       	push	r10
    2256:	bf 92       	push	r11
    2258:	cf 92       	push	r12
    225a:	df 92       	push	r13
    225c:	ef 92       	push	r14
    225e:	ff 92       	push	r15
    2260:	0f 93       	push	r16
    2262:	1f 93       	push	r17
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	68 97       	sbiw	r28, 0x18	; 24
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	de bf       	out	0x3e, r29	; 62
    2272:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    2274:	19 82       	std	Y+1, r1	; 0x01
    2276:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    2278:	e1 e0       	ldi	r30, 0x01	; 1
    227a:	f2 e2       	ldi	r31, 0x22	; 34
    227c:	8c e0       	ldi	r24, 0x0C	; 12
    227e:	df 01       	movw	r26, r30
    2280:	28 2f       	mov	r18, r24
    2282:	1d 92       	st	X+, r1
    2284:	2a 95       	dec	r18
    2286:	e9 f7       	brne	.-6      	; 0x2282 <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    2288:	3c 96       	adiw	r30, 0x0c	; 12
    228a:	df 01       	movw	r26, r30
    228c:	1d 92       	st	X+, r1
    228e:	8a 95       	dec	r24
    2290:	e9 f7       	brne	.-6      	; 0x228c <gc_execute_block+0x48>

	gc.status = TG_OK;
    2292:	10 92 cc 21 	sts	0x21CC, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    2296:	10 92 dc 21 	sts	0x21DC, r1
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set
    229a:	10 92 21 22 	sts	0x2221, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    229e:	5e 01       	movw	r10, r28
    22a0:	08 94       	sec
    22a2:	a1 1c       	adc	r10, r1
    22a4:	b1 1c       	adc	r11, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    22a6:	ff 24       	eor	r15, r15
    22a8:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    22aa:	bc e0       	ldi	r27, 0x0C	; 12
    22ac:	cb 2e       	mov	r12, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    22ae:	a2 e0       	ldi	r26, 0x02	; 2
    22b0:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    22b2:	77 24       	eor	r7, r7
    22b4:	7a 94       	dec	r7

					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    22b6:	f3 e0       	ldi	r31, 0x03	; 3
    22b8:	df 2e       	mov	r13, r31

					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    22ba:	e4 e0       	ldi	r30, 0x04	; 4
    22bc:	6e 2e       	mov	r6, r30
    22be:	0a c1       	rjmp	.+532    	; 0x24d4 <gc_execute_block+0x290>
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    22c0:	80 91 cd 21 	lds	r24, 0x21CD
    22c4:	8d 34       	cpi	r24, 0x4D	; 77
    22c6:	09 f4       	brne	.+2      	; 0x22ca <gc_execute_block+0x86>
    22c8:	be c0       	rjmp	.+380    	; 0x2446 <gc_execute_block+0x202>
    22ca:	84 35       	cpi	r24, 0x54	; 84
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <gc_execute_block+0x8c>
    22ce:	f0 c0       	rjmp	.+480    	; 0x24b0 <gc_execute_block+0x26c>
    22d0:	87 34       	cpi	r24, 0x47	; 71
    22d2:	09 f0       	breq	.+2      	; 0x22d6 <gc_execute_block+0x92>
    22d4:	fb c0       	rjmp	.+502    	; 0x24cc <gc_execute_block+0x288>
			case 'G':
				switch((int)gc.value) {
    22d6:	60 91 ce 21 	lds	r22, 0x21CE
    22da:	70 91 cf 21 	lds	r23, 0x21CF
    22de:	80 91 d0 21 	lds	r24, 0x21D0
    22e2:	90 91 d1 21 	lds	r25, 0x21D1
    22e6:	0e 94 33 43 	call	0x8666	; 0x8666 <__fixsfsi>
    22ea:	65 31       	cpi	r22, 0x15	; 21
    22ec:	71 05       	cpc	r23, r1
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <gc_execute_block+0xae>
    22f0:	8f c0       	rjmp	.+286    	; 0x2410 <gc_execute_block+0x1cc>
    22f2:	66 31       	cpi	r22, 0x16	; 22
    22f4:	71 05       	cpc	r23, r1
    22f6:	84 f5       	brge	.+96     	; 0x2358 <gc_execute_block+0x114>
    22f8:	64 30       	cpi	r22, 0x04	; 4
    22fa:	71 05       	cpc	r23, r1
    22fc:	09 f4       	brne	.+2      	; 0x2300 <gc_execute_block+0xbc>
    22fe:	6d c0       	rjmp	.+218    	; 0x23da <gc_execute_block+0x196>
    2300:	65 30       	cpi	r22, 0x05	; 5
    2302:	71 05       	cpc	r23, r1
    2304:	a4 f4       	brge	.+40     	; 0x232e <gc_execute_block+0xea>
    2306:	61 30       	cpi	r22, 0x01	; 1
    2308:	71 05       	cpc	r23, r1
    230a:	09 f4       	brne	.+2      	; 0x230e <gc_execute_block+0xca>
    230c:	57 c0       	rjmp	.+174    	; 0x23bc <gc_execute_block+0x178>
    230e:	62 30       	cpi	r22, 0x02	; 2
    2310:	71 05       	cpc	r23, r1
    2312:	24 f4       	brge	.+8      	; 0x231c <gc_execute_block+0xd8>
    2314:	67 2b       	or	r22, r23
    2316:	09 f4       	brne	.+2      	; 0x231a <gc_execute_block+0xd6>
    2318:	4c c0       	rjmp	.+152    	; 0x23b2 <gc_execute_block+0x16e>
    231a:	c7 c0       	rjmp	.+398    	; 0x24aa <gc_execute_block+0x266>
    231c:	62 30       	cpi	r22, 0x02	; 2
    231e:	71 05       	cpc	r23, r1
    2320:	09 f4       	brne	.+2      	; 0x2324 <gc_execute_block+0xe0>
    2322:	51 c0       	rjmp	.+162    	; 0x23c6 <gc_execute_block+0x182>
    2324:	63 30       	cpi	r22, 0x03	; 3
    2326:	71 05       	cpc	r23, r1
    2328:	09 f0       	breq	.+2      	; 0x232c <gc_execute_block+0xe8>
    232a:	bf c0       	rjmp	.+382    	; 0x24aa <gc_execute_block+0x266>
    232c:	51 c0       	rjmp	.+162    	; 0x23d0 <gc_execute_block+0x18c>
    232e:	62 31       	cpi	r22, 0x12	; 18
    2330:	71 05       	cpc	r23, r1
    2332:	09 f4       	brne	.+2      	; 0x2336 <gc_execute_block+0xf2>
    2334:	5c c0       	rjmp	.+184    	; 0x23ee <gc_execute_block+0x1aa>
    2336:	63 31       	cpi	r22, 0x13	; 19
    2338:	71 05       	cpc	r23, r1
    233a:	2c f4       	brge	.+10     	; 0x2346 <gc_execute_block+0x102>
    233c:	61 31       	cpi	r22, 0x11	; 17
    233e:	71 05       	cpc	r23, r1
    2340:	09 f0       	breq	.+2      	; 0x2344 <gc_execute_block+0x100>
    2342:	b3 c0       	rjmp	.+358    	; 0x24aa <gc_execute_block+0x266>
    2344:	4d c0       	rjmp	.+154    	; 0x23e0 <gc_execute_block+0x19c>
    2346:	63 31       	cpi	r22, 0x13	; 19
    2348:	71 05       	cpc	r23, r1
    234a:	09 f4       	brne	.+2      	; 0x234e <gc_execute_block+0x10a>
    234c:	57 c0       	rjmp	.+174    	; 0x23fc <gc_execute_block+0x1b8>
    234e:	64 31       	cpi	r22, 0x14	; 20
    2350:	71 05       	cpc	r23, r1
    2352:	09 f0       	breq	.+2      	; 0x2356 <gc_execute_block+0x112>
    2354:	aa c0       	rjmp	.+340    	; 0x24aa <gc_execute_block+0x266>
    2356:	59 c0       	rjmp	.+178    	; 0x240a <gc_execute_block+0x1c6>
    2358:	6a 35       	cpi	r22, 0x5A	; 90
    235a:	71 05       	cpc	r23, r1
    235c:	09 f4       	brne	.+2      	; 0x2360 <gc_execute_block+0x11c>
    235e:	64 c0       	rjmp	.+200    	; 0x2428 <gc_execute_block+0x1e4>
    2360:	6b 35       	cpi	r22, 0x5B	; 91
    2362:	71 05       	cpc	r23, r1
    2364:	ac f4       	brge	.+42     	; 0x2390 <gc_execute_block+0x14c>
    2366:	6e 31       	cpi	r22, 0x1E	; 30
    2368:	71 05       	cpc	r23, r1
    236a:	09 f4       	brne	.+2      	; 0x236e <gc_execute_block+0x12a>
    236c:	54 c0       	rjmp	.+168    	; 0x2416 <gc_execute_block+0x1d2>
    236e:	6f 31       	cpi	r22, 0x1F	; 31
    2370:	71 05       	cpc	r23, r1
    2372:	2c f4       	brge	.+10     	; 0x237e <gc_execute_block+0x13a>
    2374:	6c 31       	cpi	r22, 0x1C	; 28
    2376:	71 05       	cpc	r23, r1
    2378:	09 f0       	breq	.+2      	; 0x237c <gc_execute_block+0x138>
    237a:	97 c0       	rjmp	.+302    	; 0x24aa <gc_execute_block+0x266>
    237c:	4c c0       	rjmp	.+152    	; 0x2416 <gc_execute_block+0x1d2>
    237e:	65 33       	cpi	r22, 0x35	; 53
    2380:	71 05       	cpc	r23, r1
    2382:	09 f4       	brne	.+2      	; 0x2386 <gc_execute_block+0x142>
    2384:	4b c0       	rjmp	.+150    	; 0x241c <gc_execute_block+0x1d8>
    2386:	60 35       	cpi	r22, 0x50	; 80
    2388:	71 05       	cpc	r23, r1
    238a:	09 f0       	breq	.+2      	; 0x238e <gc_execute_block+0x14a>
    238c:	8e c0       	rjmp	.+284    	; 0x24aa <gc_execute_block+0x266>
    238e:	49 c0       	rjmp	.+146    	; 0x2422 <gc_execute_block+0x1de>
    2390:	6c 35       	cpi	r22, 0x5C	; 92
    2392:	71 05       	cpc	r23, r1
    2394:	09 f4       	brne	.+2      	; 0x2398 <gc_execute_block+0x154>
    2396:	4e c0       	rjmp	.+156    	; 0x2434 <gc_execute_block+0x1f0>
    2398:	6c 35       	cpi	r22, 0x5C	; 92
    239a:	71 05       	cpc	r23, r1
    239c:	0c f4       	brge	.+2      	; 0x23a0 <gc_execute_block+0x15c>
    239e:	47 c0       	rjmp	.+142    	; 0x242e <gc_execute_block+0x1ea>
    23a0:	6d 35       	cpi	r22, 0x5D	; 93
    23a2:	71 05       	cpc	r23, r1
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <gc_execute_block+0x164>
    23a6:	49 c0       	rjmp	.+146    	; 0x243a <gc_execute_block+0x1f6>
    23a8:	6e 35       	cpi	r22, 0x5E	; 94
    23aa:	71 05       	cpc	r23, r1
    23ac:	09 f0       	breq	.+2      	; 0x23b0 <gc_execute_block+0x16c>
    23ae:	7d c0       	rjmp	.+250    	; 0x24aa <gc_execute_block+0x266>
    23b0:	47 c0       	rjmp	.+142    	; 0x2440 <gc_execute_block+0x1fc>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    23b2:	f0 92 21 22 	sts	0x2221, r15
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    23b6:	10 92 d7 21 	sts	0x21D7, r1
    23ba:	88 c0       	rjmp	.+272    	; 0x24cc <gc_execute_block+0x288>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    23bc:	f0 92 21 22 	sts	0x2221, r15
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    23c0:	f0 92 d7 21 	sts	0x21D7, r15
    23c4:	83 c0       	rjmp	.+262    	; 0x24cc <gc_execute_block+0x288>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    23c6:	f0 92 21 22 	sts	0x2221, r15
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    23ca:	e0 92 d7 21 	sts	0x21D7, r14
    23ce:	7e c0       	rjmp	.+252    	; 0x24cc <gc_execute_block+0x288>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    23d0:	f0 92 21 22 	sts	0x2221, r15
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    23d4:	d0 92 d7 21 	sts	0x21D7, r13
    23d8:	79 c0       	rjmp	.+242    	; 0x24cc <gc_execute_block+0x288>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    23da:	e0 92 21 22 	sts	0x2221, r14
    23de:	76 c0       	rjmp	.+236    	; 0x24cc <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23e0:	10 92 19 22 	sts	0x2219, r1
	gc.plane_axis_1 = axis_1;
    23e4:	f0 92 1a 22 	sts	0x221A, r15
	gc.plane_axis_2 = axis_2;
    23e8:	e0 92 1b 22 	sts	0x221B, r14
    23ec:	6f c0       	rjmp	.+222    	; 0x24cc <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23ee:	10 92 19 22 	sts	0x2219, r1
	gc.plane_axis_1 = axis_1;
    23f2:	e0 92 1a 22 	sts	0x221A, r14
	gc.plane_axis_2 = axis_2;
    23f6:	f0 92 1b 22 	sts	0x221B, r15
    23fa:	68 c0       	rjmp	.+208    	; 0x24cc <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23fc:	f0 92 19 22 	sts	0x2219, r15
	gc.plane_axis_1 = axis_1;
    2400:	e0 92 1a 22 	sts	0x221A, r14
	gc.plane_axis_2 = axis_2;
    2404:	10 92 1b 22 	sts	0x221B, r1
    2408:	61 c0       	rjmp	.+194    	; 0x24cc <gc_execute_block+0x288>

					case 17: { select_plane(X, Y, Z); break; }
					case 18: { select_plane(X, Z, Y); break; }
					case 19: { select_plane(Y, Z, X); break; }

					case 20: { gc.inches_mode = TRUE; break; }
    240a:	f0 92 d9 21 	sts	0x21D9, r15
    240e:	5e c0       	rjmp	.+188    	; 0x24cc <gc_execute_block+0x288>
					case 21: { gc.inches_mode = FALSE; break; }
    2410:	10 92 d9 21 	sts	0x21D9, r1
    2414:	5b c0       	rjmp	.+182    	; 0x24cc <gc_execute_block+0x288>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    2416:	d0 92 21 22 	sts	0x2221, r13
    241a:	58 c0       	rjmp	.+176    	; 0x24cc <gc_execute_block+0x288>

					case 53: { gc.absolute_override = TRUE; break; }
    241c:	f0 92 20 22 	sts	0x2220, r15
    2420:	55 c0       	rjmp	.+170    	; 0x24cc <gc_execute_block+0x288>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2422:	60 92 d7 21 	sts	0x21D7, r6
    2426:	52 c0       	rjmp	.+164    	; 0x24cc <gc_execute_block+0x288>
					case 90: { gc.absolute_mode = TRUE; break; }
    2428:	f0 92 da 21 	sts	0x21DA, r15
    242c:	4f c0       	rjmp	.+158    	; 0x24cc <gc_execute_block+0x288>
					case 91: { gc.absolute_mode = FALSE; break; }
    242e:	10 92 da 21 	sts	0x21DA, r1
    2432:	4c c0       	rjmp	.+152    	; 0x24cc <gc_execute_block+0x288>
					case 92: { gc.set_origin_mode = TRUE; break; }
    2434:	f0 92 dc 21 	sts	0x21DC, r15
    2438:	49 c0       	rjmp	.+146    	; 0x24cc <gc_execute_block+0x288>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    243a:	f0 92 d8 21 	sts	0x21D8, r15
    243e:	46 c0       	rjmp	.+140    	; 0x24cc <gc_execute_block+0x288>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    2440:	10 92 d8 21 	sts	0x21D8, r1
    2444:	43 c0       	rjmp	.+134    	; 0x24cc <gc_execute_block+0x288>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    2446:	60 91 ce 21 	lds	r22, 0x21CE
    244a:	70 91 cf 21 	lds	r23, 0x21CF
    244e:	80 91 d0 21 	lds	r24, 0x21D0
    2452:	90 91 d1 21 	lds	r25, 0x21D1
    2456:	0e 94 33 43 	call	0x8666	; 0x8666 <__fixsfsi>
    245a:	63 30       	cpi	r22, 0x03	; 3
    245c:	71 05       	cpc	r23, r1
    245e:	e1 f0       	breq	.+56     	; 0x2498 <gc_execute_block+0x254>
    2460:	64 30       	cpi	r22, 0x04	; 4
    2462:	71 05       	cpc	r23, r1
    2464:	34 f4       	brge	.+12     	; 0x2472 <gc_execute_block+0x22e>
    2466:	77 fd       	sbrc	r23, 7
    2468:	20 c0       	rjmp	.+64     	; 0x24aa <gc_execute_block+0x266>
    246a:	62 30       	cpi	r22, 0x02	; 2
    246c:	71 05       	cpc	r23, r1
    246e:	74 f0       	brlt	.+28     	; 0x248c <gc_execute_block+0x248>
    2470:	10 c0       	rjmp	.+32     	; 0x2492 <gc_execute_block+0x24e>
    2472:	65 30       	cpi	r22, 0x05	; 5
    2474:	71 05       	cpc	r23, r1
    2476:	b1 f0       	breq	.+44     	; 0x24a4 <gc_execute_block+0x260>
    2478:	65 30       	cpi	r22, 0x05	; 5
    247a:	71 05       	cpc	r23, r1
    247c:	84 f0       	brlt	.+32     	; 0x249e <gc_execute_block+0x25a>
    247e:	6e 31       	cpi	r22, 0x1E	; 30
    2480:	71 05       	cpc	r23, r1
    2482:	39 f0       	breq	.+14     	; 0x2492 <gc_execute_block+0x24e>
    2484:	6c 33       	cpi	r22, 0x3C	; 60
    2486:	71 05       	cpc	r23, r1
    2488:	81 f4       	brne	.+32     	; 0x24aa <gc_execute_block+0x266>
    248a:	03 c0       	rjmp	.+6      	; 0x2492 <gc_execute_block+0x24e>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    248c:	f0 92 d6 21 	sts	0x21D6, r15
    2490:	1d c0       	rjmp	.+58     	; 0x24cc <gc_execute_block+0x288>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2492:	e0 92 d6 21 	sts	0x21D6, r14
    2496:	1a c0       	rjmp	.+52     	; 0x24cc <gc_execute_block+0x288>
					case 3: gc.spindle_direction = 1; break;
    2498:	f0 92 1d 22 	sts	0x221D, r15
    249c:	17 c0       	rjmp	.+46     	; 0x24cc <gc_execute_block+0x288>
					case 4: gc.spindle_direction = -1; break;
    249e:	70 92 1d 22 	sts	0x221D, r7
    24a2:	14 c0       	rjmp	.+40     	; 0x24cc <gc_execute_block+0x288>
					case 5: gc.spindle_direction = 0; break;
    24a4:	10 92 1d 22 	sts	0x221D, r1
    24a8:	11 c0       	rjmp	.+34     	; 0x24cc <gc_execute_block+0x288>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    24aa:	c0 92 cc 21 	sts	0x21CC, r12
    24ae:	0e c0       	rjmp	.+28     	; 0x24cc <gc_execute_block+0x288>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    24b0:	60 91 ce 21 	lds	r22, 0x21CE
    24b4:	70 91 cf 21 	lds	r23, 0x21CF
    24b8:	80 91 d0 21 	lds	r24, 0x21D0
    24bc:	90 91 d1 21 	lds	r25, 0x21D1
    24c0:	0e 94 34 46 	call	0x8c68	; 0x8c68 <trunc>
    24c4:	0e 94 38 43 	call	0x8670	; 0x8670 <__fixunssfsi>
    24c8:	60 93 1c 22 	sts	0x221C, r22
		}
		if(gc.status) {
    24cc:	80 91 cc 21 	lds	r24, 0x21CC
    24d0:	88 23       	and	r24, r24
    24d2:	69 f4       	brne	.+26     	; 0x24ee <gc_execute_block+0x2aa>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    24d4:	8d ec       	ldi	r24, 0xCD	; 205
    24d6:	91 e2       	ldi	r25, 0x21	; 33
    24d8:	6e ec       	ldi	r22, 0xCE	; 206
    24da:	71 e2       	ldi	r23, 0x21	; 33
    24dc:	42 ed       	ldi	r20, 0xD2	; 210
    24de:	51 e2       	ldi	r21, 0x21	; 33
    24e0:	94 01       	movw	r18, r8
    24e2:	85 01       	movw	r16, r10
    24e4:	0e 94 6f 10 	call	0x20de	; 0x20de <_gc_next_statement>
    24e8:	89 2b       	or	r24, r25
    24ea:	09 f0       	breq	.+2      	; 0x24ee <gc_execute_block+0x2aa>
    24ec:	e9 ce       	rjmp	.-558    	; 0x22c0 <gc_execute_block+0x7c>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    24ee:	80 91 cc 21 	lds	r24, 0x21CC
    24f2:	88 23       	and	r24, r24
    24f4:	09 f0       	breq	.+2      	; 0x24f8 <gc_execute_block+0x2b4>
    24f6:	97 c3       	rjmp	.+1838   	; 0x2c26 <gc_execute_block+0x9e2>
		return(gc.status); 
	}

	i = 0;
    24f8:	19 82       	std	Y+1, r1	; 0x01
    24fa:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    24fc:	ed e0       	ldi	r30, 0x0D	; 13
    24fe:	f2 e2       	ldi	r31, 0x22	; 34
    2500:	8c e0       	ldi	r24, 0x0C	; 12
    2502:	df 01       	movw	r26, r30
    2504:	1d 92       	st	X+, r1
    2506:	8a 95       	dec	r24
    2508:	e9 f7       	brne	.-6      	; 0x2504 <gc_execute_block+0x2c0>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    250a:	df 01       	movw	r26, r30
    250c:	1c 97       	sbiw	r26, 0x0c	; 12
    250e:	78 97       	sbiw	r30, 0x18	; 24
    2510:	8c e0       	ldi	r24, 0x0C	; 12
    2512:	01 90       	ld	r0, Z+
    2514:	0d 92       	st	X+, r0
    2516:	81 50       	subi	r24, 0x01	; 1
    2518:	e1 f7       	brne	.-8      	; 0x2512 <gc_execute_block+0x2ce>
    251a:	c6 c0       	rjmp	.+396    	; 0x26a8 <gc_execute_block+0x464>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    251c:	c0 90 ce 21 	lds	r12, 0x21CE
    2520:	d0 90 cf 21 	lds	r13, 0x21CF
    2524:	e0 90 d0 21 	lds	r14, 0x21D0
    2528:	f0 90 d1 21 	lds	r15, 0x21D1
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    252c:	80 91 d9 21 	lds	r24, 0x21D9
    2530:	88 23       	and	r24, r24
    2532:	19 f4       	brne	.+6      	; 0x253a <gc_execute_block+0x2f6>
    2534:	a7 01       	movw	r20, r14
    2536:	96 01       	movw	r18, r12
    2538:	0a c0       	rjmp	.+20     	; 0x254e <gc_execute_block+0x30a>
    253a:	c7 01       	movw	r24, r14
    253c:	b6 01       	movw	r22, r12
    253e:	25 e8       	ldi	r18, 0x85	; 133
    2540:	32 e4       	ldi	r19, 0x42	; 66
    2542:	41 e2       	ldi	r20, 0x21	; 33
    2544:	5d e3       	ldi	r21, 0x3D	; 61
    2546:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    254a:	9b 01       	movw	r18, r22
    254c:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    254e:	20 93 ed 21 	sts	0x21ED, r18
    2552:	30 93 ee 21 	sts	0x21EE, r19
    2556:	40 93 ef 21 	sts	0x21EF, r20
    255a:	50 93 f0 21 	sts	0x21F0, r21
		switch(gc.letter) {
    255e:	00 91 cd 21 	lds	r16, 0x21CD
    2562:	00 35       	cpi	r16, 0x50	; 80
    2564:	09 f4       	brne	.+2      	; 0x2568 <gc_execute_block+0x324>
    2566:	47 c0       	rjmp	.+142    	; 0x25f6 <gc_execute_block+0x3b2>
    2568:	01 35       	cpi	r16, 0x51	; 81
    256a:	58 f4       	brcc	.+22     	; 0x2582 <gc_execute_block+0x33e>
    256c:	06 34       	cpi	r16, 0x46	; 70
    256e:	c1 f0       	breq	.+48     	; 0x25a0 <gc_execute_block+0x35c>
    2570:	06 34       	cpi	r16, 0x46	; 70
    2572:	08 f4       	brcc	.+2      	; 0x2576 <gc_execute_block+0x332>
    2574:	9f c0       	rjmp	.+318    	; 0x26b4 <gc_execute_block+0x470>
    2576:	80 2f       	mov	r24, r16
    2578:	89 54       	subi	r24, 0x49	; 73
    257a:	83 30       	cpi	r24, 0x03	; 3
    257c:	08 f0       	brcs	.+2      	; 0x2580 <gc_execute_block+0x33c>
    257e:	9a c0       	rjmp	.+308    	; 0x26b4 <gc_execute_block+0x470>
    2580:	2d c0       	rjmp	.+90     	; 0x25dc <gc_execute_block+0x398>
    2582:	03 35       	cpi	r16, 0x53	; 83
    2584:	09 f4       	brne	.+2      	; 0x2588 <gc_execute_block+0x344>
    2586:	4b c0       	rjmp	.+150    	; 0x261e <gc_execute_block+0x3da>
    2588:	04 35       	cpi	r16, 0x54	; 84
    258a:	20 f4       	brcc	.+8      	; 0x2594 <gc_execute_block+0x350>
    258c:	02 35       	cpi	r16, 0x52	; 82
    258e:	09 f0       	breq	.+2      	; 0x2592 <gc_execute_block+0x34e>
    2590:	91 c0       	rjmp	.+290    	; 0x26b4 <gc_execute_block+0x470>
    2592:	3a c0       	rjmp	.+116    	; 0x2608 <gc_execute_block+0x3c4>
    2594:	80 2f       	mov	r24, r16
    2596:	88 55       	subi	r24, 0x58	; 88
    2598:	83 30       	cpi	r24, 0x03	; 3
    259a:	08 f0       	brcs	.+2      	; 0x259e <gc_execute_block+0x35a>
    259c:	8b c0       	rjmp	.+278    	; 0x26b4 <gc_execute_block+0x470>
    259e:	48 c0       	rjmp	.+144    	; 0x2630 <gc_execute_block+0x3ec>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    25a0:	80 91 d8 21 	lds	r24, 0x21D8
    25a4:	88 23       	and	r24, r24
    25a6:	49 f0       	breq	.+18     	; 0x25ba <gc_execute_block+0x376>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    25a8:	20 93 f1 21 	sts	0x21F1, r18
    25ac:	30 93 f2 21 	sts	0x21F2, r19
    25b0:	40 93 f3 21 	sts	0x21F3, r20
    25b4:	50 93 f4 21 	sts	0x21F4, r21
    25b8:	7d c0       	rjmp	.+250    	; 0x26b4 <gc_execute_block+0x470>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    25ba:	ca 01       	movw	r24, r20
    25bc:	b9 01       	movw	r22, r18
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e7       	ldi	r20, 0x70	; 112
    25c4:	52 e4       	ldi	r21, 0x42	; 66
    25c6:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    25ca:	60 93 e5 21 	sts	0x21E5, r22
    25ce:	70 93 e6 21 	sts	0x21E6, r23
    25d2:	80 93 e7 21 	sts	0x21E7, r24
    25d6:	90 93 e8 21 	sts	0x21E8, r25
    25da:	6c c0       	rjmp	.+216    	; 0x26b4 <gc_execute_block+0x470>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    25dc:	e0 2f       	mov	r30, r16
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	ee 0f       	add	r30, r30
    25e2:	ff 1f       	adc	r31, r31
    25e4:	ee 0f       	add	r30, r30
    25e6:	ff 1f       	adc	r31, r31
    25e8:	e7 51       	subi	r30, 0x17	; 23
    25ea:	ff 4d       	sbci	r31, 0xDF	; 223
    25ec:	20 83       	st	Z, r18
    25ee:	31 83       	std	Z+1, r19	; 0x01
    25f0:	42 83       	std	Z+2, r20	; 0x02
    25f2:	53 83       	std	Z+3, r21	; 0x03
    25f4:	5f c0       	rjmp	.+190    	; 0x26b4 <gc_execute_block+0x470>
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
    25f6:	c0 92 dd 21 	sts	0x21DD, r12
    25fa:	d0 92 de 21 	sts	0x21DE, r13
    25fe:	e0 92 df 21 	sts	0x21DF, r14
    2602:	f0 92 e0 21 	sts	0x21E0, r15
    2606:	56 c0       	rjmp	.+172    	; 0x26b4 <gc_execute_block+0x470>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    2608:	20 93 e1 21 	sts	0x21E1, r18
    260c:	30 93 e2 21 	sts	0x21E2, r19
    2610:	40 93 e3 21 	sts	0x21E3, r20
    2614:	50 93 e4 21 	sts	0x21E4, r21
    2618:	70 92 db 21 	sts	0x21DB, r7
    261c:	4b c0       	rjmp	.+150    	; 0x26b4 <gc_execute_block+0x470>
			case 'S': gc.spindle_speed = gc.value; break;
    261e:	c7 01       	movw	r24, r14
    2620:	b6 01       	movw	r22, r12
    2622:	0e 94 33 43 	call	0x8666	; 0x8666 <__fixsfsi>
    2626:	60 93 1e 22 	sts	0x221E, r22
    262a:	70 93 1f 22 	sts	0x221F, r23
    262e:	42 c0       	rjmp	.+132    	; 0x26b4 <gc_execute_block+0x470>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    2630:	80 91 dc 21 	lds	r24, 0x21DC
    2634:	88 23       	and	r24, r24
    2636:	69 f0       	breq	.+26     	; 0x2652 <gc_execute_block+0x40e>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    2638:	e0 2f       	mov	r30, r16
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	ee 0f       	add	r30, r30
    263e:	ff 1f       	adc	r31, r31
    2640:	ee 0f       	add	r30, r30
    2642:	ff 1f       	adc	r31, r31
    2644:	e4 59       	subi	r30, 0x94	; 148
    2646:	ff 4d       	sbci	r31, 0xDF	; 223
    2648:	21 a7       	std	Z+41, r18	; 0x29
    264a:	32 a7       	std	Z+42, r19	; 0x2a
    264c:	43 a7       	std	Z+43, r20	; 0x2b
    264e:	54 a7       	std	Z+44, r21	; 0x2c
    2650:	31 c0       	rjmp	.+98     	; 0x26b4 <gc_execute_block+0x470>
				} else if (gc.absolute_mode || gc.absolute_override) {
    2652:	80 91 da 21 	lds	r24, 0x21DA
    2656:	88 23       	and	r24, r24
    2658:	21 f4       	brne	.+8      	; 0x2662 <gc_execute_block+0x41e>
    265a:	80 91 20 22 	lds	r24, 0x2220
    265e:	88 23       	and	r24, r24
    2660:	69 f0       	breq	.+26     	; 0x267c <gc_execute_block+0x438>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    2662:	e0 2f       	mov	r30, r16
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	ee 0f       	add	r30, r30
    2668:	ff 1f       	adc	r31, r31
    266a:	ee 0f       	add	r30, r30
    266c:	ff 1f       	adc	r31, r31
    266e:	e4 59       	subi	r30, 0x94	; 148
    2670:	ff 4d       	sbci	r31, 0xDF	; 223
    2672:	25 ab       	std	Z+53, r18	; 0x35
    2674:	36 ab       	std	Z+54, r19	; 0x36
    2676:	47 ab       	std	Z+55, r20	; 0x37
    2678:	50 af       	std	Z+56, r21	; 0x38
    267a:	1c c0       	rjmp	.+56     	; 0x26b4 <gc_execute_block+0x470>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    267c:	10 e0       	ldi	r17, 0x00	; 0
    267e:	00 0f       	add	r16, r16
    2680:	11 1f       	adc	r17, r17
    2682:	00 0f       	add	r16, r16
    2684:	11 1f       	adc	r17, r17
    2686:	04 59       	subi	r16, 0x94	; 148
    2688:	1f 4d       	sbci	r17, 0xDF	; 223
    268a:	f8 01       	movw	r30, r16
    268c:	65 a9       	ldd	r22, Z+53	; 0x35
    268e:	76 a9       	ldd	r23, Z+54	; 0x36
    2690:	87 a9       	ldd	r24, Z+55	; 0x37
    2692:	90 ad       	ldd	r25, Z+56	; 0x38
    2694:	0e 94 25 42 	call	0x844a	; 0x844a <__addsf3>
    2698:	d8 01       	movw	r26, r16
    269a:	d5 96       	adiw	r26, 0x35	; 53
    269c:	6d 93       	st	X+, r22
    269e:	7d 93       	st	X+, r23
    26a0:	8d 93       	st	X+, r24
    26a2:	9c 93       	st	X, r25
    26a4:	d8 97       	sbiw	r26, 0x38	; 56
    26a6:	06 c0       	rjmp	.+12     	; 0x26b4 <gc_execute_block+0x470>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    26a8:	5e 01       	movw	r10, r28
    26aa:	08 94       	sec
    26ac:	a1 1c       	adc	r10, r1
    26ae:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    26b0:	77 24       	eor	r7, r7
    26b2:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    26b4:	8d ec       	ldi	r24, 0xCD	; 205
    26b6:	91 e2       	ldi	r25, 0x21	; 33
    26b8:	6e ec       	ldi	r22, 0xCE	; 206
    26ba:	71 e2       	ldi	r23, 0x21	; 33
    26bc:	42 ed       	ldi	r20, 0xD2	; 210
    26be:	51 e2       	ldi	r21, 0x21	; 33
    26c0:	94 01       	movw	r18, r8
    26c2:	85 01       	movw	r16, r10
    26c4:	0e 94 6f 10 	call	0x20de	; 0x20de <_gc_next_statement>
    26c8:	89 2b       	or	r24, r25
    26ca:	09 f0       	breq	.+2      	; 0x26ce <gc_execute_block+0x48a>
    26cc:	27 cf       	rjmp	.-434    	; 0x251c <gc_execute_block+0x2d8>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    26ce:	80 91 cc 21 	lds	r24, 0x21CC
    26d2:	88 23       	and	r24, r24
    26d4:	09 f0       	breq	.+2      	; 0x26d8 <gc_execute_block+0x494>
    26d6:	a7 c2       	rjmp	.+1358   	; 0x2c26 <gc_execute_block+0x9e2>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    26d8:	80 91 1d 22 	lds	r24, 0x221D
    26dc:	88 23       	and	r24, r24
    26de:	71 f0       	breq	.+28     	; 0x26fc <gc_execute_block+0x4b8>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    26e0:	40 91 1e 22 	lds	r20, 0x221E
    26e4:	50 91 1f 22 	lds	r21, 0x221F
    26e8:	66 27       	eor	r22, r22
    26ea:	57 fd       	sbrc	r21, 7
    26ec:	60 95       	com	r22
    26ee:	76 2f       	mov	r23, r22
    26f0:	99 27       	eor	r25, r25
    26f2:	87 fd       	sbrc	r24, 7
    26f4:	90 95       	com	r25
    26f6:	0e 94 29 24 	call	0x4852	; 0x4852 <spindle_run>
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <gc_execute_block+0x4bc>
	} else {
		spindle_stop();
    26fc:	0e 94 39 24 	call	0x4872	; 0x4872 <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    2700:	80 91 21 22 	lds	r24, 0x2221
    2704:	82 30       	cpi	r24, 0x02	; 2
    2706:	49 f0       	breq	.+18     	; 0x271a <gc_execute_block+0x4d6>
    2708:	83 30       	cpi	r24, 0x03	; 3
    270a:	21 f0       	breq	.+8      	; 0x2714 <gc_execute_block+0x4d0>
    270c:	81 30       	cpi	r24, 0x01	; 1
    270e:	09 f0       	breq	.+2      	; 0x2712 <gc_execute_block+0x4ce>
    2710:	7d c2       	rjmp	.+1274   	; 0x2c0c <gc_execute_block+0x9c8>
    2712:	0e c0       	rjmp	.+28     	; 0x2730 <gc_execute_block+0x4ec>
		case NEXT_ACTION_DEFAULT: {				// nothing to do here
			break;
		}

		case NEXT_ACTION_GO_HOME: { 
			gc.status = mc_go_home(); 
    2714:	0e 94 de 1b 	call	0x37bc	; 0x37bc <mc_go_home>
    2718:	77 c2       	rjmp	.+1262   	; 0x2c08 <gc_execute_block+0x9c4>
			break;
		}

		case NEXT_ACTION_DWELL: {
			gc.status = mc_dwell(gc.dwell_time); 
    271a:	60 91 dd 21 	lds	r22, 0x21DD
    271e:	70 91 de 21 	lds	r23, 0x21DE
    2722:	80 91 df 21 	lds	r24, 0x21DF
    2726:	90 91 e0 21 	lds	r25, 0x21E0
    272a:	0e 94 3d 1c 	call	0x387a	; 0x387a <mc_dwell>
    272e:	6c c2       	rjmp	.+1240   	; 0x2c08 <gc_execute_block+0x9c4>
			break;
		}

		case NEXT_ACTION_MOTION: {
			switch (gc.motion_mode) {
    2730:	b0 91 d7 21 	lds	r27, 0x21D7
    2734:	b8 8f       	std	Y+24, r27	; 0x18
    2736:	b2 30       	cpi	r27, 0x02	; 2
    2738:	20 f0       	brcs	.+8      	; 0x2742 <gc_execute_block+0x4fe>
    273a:	b4 30       	cpi	r27, 0x04	; 4
    273c:	08 f0       	brcs	.+2      	; 0x2740 <gc_execute_block+0x4fc>
    273e:	66 c2       	rjmp	.+1228   	; 0x2c0c <gc_execute_block+0x9c8>
    2740:	31 c0       	rjmp	.+98     	; 0x27a4 <gc_execute_block+0x560>
				case MOTION_MODE_CANCEL: {
					break;
				}

				case MOTION_MODE_RAPID_LINEAR: case MOTION_MODE_LINEAR: {
					gc.status = mc_line(gc.target[X], gc.target[Y], gc.target[Z],
    2742:	60 91 01 22 	lds	r22, 0x2201
    2746:	70 91 02 22 	lds	r23, 0x2202
    274a:	80 91 03 22 	lds	r24, 0x2203
    274e:	90 91 04 22 	lds	r25, 0x2204
    2752:	20 91 05 22 	lds	r18, 0x2205
    2756:	30 91 06 22 	lds	r19, 0x2206
    275a:	40 91 07 22 	lds	r20, 0x2207
    275e:	50 91 08 22 	lds	r21, 0x2208
    2762:	e0 90 09 22 	lds	r14, 0x2209
    2766:	f0 90 0a 22 	lds	r15, 0x220A
    276a:	00 91 0b 22 	lds	r16, 0x220B
    276e:	10 91 0c 22 	lds	r17, 0x220C
    2772:	80 90 d8 21 	lds	r8, 0x21D8
    2776:	88 20       	and	r8, r8
    2778:	49 f0       	breq	.+18     	; 0x278c <gc_execute_block+0x548>
    277a:	a0 90 f1 21 	lds	r10, 0x21F1
    277e:	b0 90 f2 21 	lds	r11, 0x21F2
    2782:	c0 90 f3 21 	lds	r12, 0x21F3
    2786:	d0 90 f4 21 	lds	r13, 0x21F4
    278a:	08 c0       	rjmp	.+16     	; 0x279c <gc_execute_block+0x558>
    278c:	a0 90 e5 21 	lds	r10, 0x21E5
    2790:	b0 90 e6 21 	lds	r11, 0x21E6
    2794:	c0 90 e7 21 	lds	r12, 0x21E7
    2798:	d0 90 e8 21 	lds	r13, 0x21E8
    279c:	99 24       	eor	r9, r9
    279e:	0e 94 77 1c 	call	0x38ee	; 0x38ee <mc_line>
    27a2:	32 c2       	rjmp	.+1124   	; 0x2c08 <gc_execute_block+0x9c4>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    27a4:	80 91 db 21 	lds	r24, 0x21DB
    27a8:	88 23       	and	r24, r24
    27aa:	09 f4       	brne	.+2      	; 0x27ae <gc_execute_block+0x56a>
    27ac:	ec c0       	rjmp	.+472    	; 0x2986 <gc_execute_block+0x742>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    27ae:	e0 91 19 22 	lds	r30, 0x2219
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	ee 0f       	add	r30, r30
    27b6:	ff 1f       	adc	r31, r31
    27b8:	ee 0f       	add	r30, r30
    27ba:	ff 1f       	adc	r31, r31
    27bc:	e4 53       	subi	r30, 0x34	; 52
    27be:	fe 4d       	sbci	r31, 0xDE	; 222
    27c0:	65 a9       	ldd	r22, Z+53	; 0x35
    27c2:	76 a9       	ldd	r23, Z+54	; 0x36
    27c4:	87 a9       	ldd	r24, Z+55	; 0x37
    27c6:	90 ad       	ldd	r25, Z+56	; 0x38
    27c8:	21 a5       	ldd	r18, Z+41	; 0x29
    27ca:	32 a5       	ldd	r19, Z+42	; 0x2a
    27cc:	43 a5       	ldd	r20, Z+43	; 0x2b
    27ce:	54 a5       	ldd	r21, Z+44	; 0x2c
    27d0:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    27d4:	6f 83       	std	Y+7, r22	; 0x07
    27d6:	78 87       	std	Y+8, r23	; 0x08
    27d8:	89 87       	std	Y+9, r24	; 0x09
    27da:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    27dc:	e0 91 1a 22 	lds	r30, 0x221A
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	ee 0f       	add	r30, r30
    27e4:	ff 1f       	adc	r31, r31
    27e6:	ee 0f       	add	r30, r30
    27e8:	ff 1f       	adc	r31, r31
    27ea:	e4 53       	subi	r30, 0x34	; 52
    27ec:	fe 4d       	sbci	r31, 0xDE	; 222
    27ee:	65 a9       	ldd	r22, Z+53	; 0x35
    27f0:	76 a9       	ldd	r23, Z+54	; 0x36
    27f2:	87 a9       	ldd	r24, Z+55	; 0x37
    27f4:	90 ad       	ldd	r25, Z+56	; 0x38
    27f6:	21 a5       	ldd	r18, Z+41	; 0x29
    27f8:	32 a5       	ldd	r19, Z+42	; 0x2a
    27fa:	43 a5       	ldd	r20, Z+43	; 0x2b
    27fc:	54 a5       	ldd	r21, Z+44	; 0x2c
    27fe:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    2802:	1b 01       	movw	r2, r22
    2804:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    2806:	10 92 0d 22 	sts	0x220D, r1
    280a:	10 92 0e 22 	sts	0x220E, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    280e:	60 90 e1 21 	lds	r6, 0x21E1
    2812:	70 90 e2 21 	lds	r7, 0x21E2
    2816:	80 90 e3 21 	lds	r8, 0x21E3
    281a:	90 90 e4 21 	lds	r9, 0x21E4
    281e:	c4 01       	movw	r24, r8
    2820:	b3 01       	movw	r22, r6
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e8       	ldi	r20, 0x80	; 128
    2828:	50 e4       	ldi	r21, 0x40	; 64
    282a:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    282e:	a4 01       	movw	r20, r8
    2830:	93 01       	movw	r18, r6
    2832:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    2836:	5b 01       	movw	r10, r22
    2838:	6c 01       	movw	r12, r24
    283a:	6f 81       	ldd	r22, Y+7	; 0x07
    283c:	78 85       	ldd	r23, Y+8	; 0x08
    283e:	89 85       	ldd	r24, Y+9	; 0x09
    2840:	9a 85       	ldd	r25, Y+10	; 0x0a
    2842:	9b 01       	movw	r18, r22
    2844:	ac 01       	movw	r20, r24
    2846:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    284a:	7b 01       	movw	r14, r22
    284c:	8c 01       	movw	r16, r24
    284e:	c2 01       	movw	r24, r4
    2850:	b1 01       	movw	r22, r2
    2852:	a2 01       	movw	r20, r4
    2854:	91 01       	movw	r18, r2
    2856:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    285a:	9b 01       	movw	r18, r22
    285c:	ac 01       	movw	r20, r24
    285e:	c8 01       	movw	r24, r16
    2860:	b7 01       	movw	r22, r14
    2862:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    2866:	9b 01       	movw	r18, r22
    2868:	ac 01       	movw	r20, r24
    286a:	c6 01       	movw	r24, r12
    286c:	b5 01       	movw	r22, r10
    286e:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    2872:	0e 94 f3 45 	call	0x8be6	; 0x8be6 <sqrt>
    2876:	7b 01       	movw	r14, r22
    2878:	8c 01       	movw	r16, r24
    287a:	6f 81       	ldd	r22, Y+7	; 0x07
    287c:	78 85       	ldd	r23, Y+8	; 0x08
    287e:	89 85       	ldd	r24, Y+9	; 0x09
    2880:	9a 85       	ldd	r25, Y+10	; 0x0a
    2882:	a2 01       	movw	r20, r4
    2884:	91 01       	movw	r18, r2
    2886:	0e 94 c1 44 	call	0x8982	; 0x8982 <hypot>
    288a:	9b 01       	movw	r18, r22
    288c:	ac 01       	movw	r20, r24
    288e:	17 fb       	bst	r17, 7
    2890:	10 95       	com	r17
    2892:	17 f9       	bld	r17, 7
    2894:	10 95       	com	r17
    2896:	c8 01       	movw	r24, r16
    2898:	b7 01       	movw	r22, r14
    289a:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    289e:	7b 01       	movw	r14, r22
    28a0:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    28a2:	a8 01       	movw	r20, r16
    28a4:	97 01       	movw	r18, r14
    28a6:	0e 94 3b 46 	call	0x8c76	; 0x8c76 <__unordsf2>
    28aa:	88 23       	and	r24, r24
    28ac:	21 f0       	breq	.+8      	; 0x28b6 <gc_execute_block+0x672>
		FAIL(TG_FLOATING_POINT_ERROR); 
    28ae:	8e e0       	ldi	r24, 0x0E	; 14
    28b0:	80 93 cc 21 	sts	0x21CC, r24
    28b4:	65 c0       	rjmp	.+202    	; 0x2980 <gc_execute_block+0x73c>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    28b6:	e8 8d       	ldd	r30, Y+24	; 0x18
    28b8:	e3 30       	cpi	r30, 0x03	; 3
    28ba:	21 f4       	brne	.+8      	; 0x28c4 <gc_execute_block+0x680>
		h_x2_div_d = -h_x2_div_d;
    28bc:	17 fb       	bst	r17, 7
    28be:	10 95       	com	r17
    28c0:	17 f9       	bld	r17, 7
    28c2:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    28c4:	c4 01       	movw	r24, r8
    28c6:	b3 01       	movw	r22, r6
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e0       	ldi	r20, 0x00	; 0
    28ce:	50 e0       	ldi	r21, 0x00	; 0
    28d0:	0e 94 c4 42 	call	0x8588	; 0x8588 <__cmpsf2>
    28d4:	88 23       	and	r24, r24
    28d6:	24 f4       	brge	.+8      	; 0x28e0 <gc_execute_block+0x69c>
		h_x2_div_d = -h_x2_div_d; 
    28d8:	17 fb       	bst	r17, 7
    28da:	10 95       	com	r17
    28dc:	17 f9       	bld	r17, 7
    28de:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    28e0:	80 91 19 22 	lds	r24, 0x2219
    28e4:	c8 2e       	mov	r12, r24
    28e6:	dd 24       	eor	r13, r13
    28e8:	cc 0c       	add	r12, r12
    28ea:	dd 1c       	adc	r13, r13
    28ec:	cc 0c       	add	r12, r12
    28ee:	dd 1c       	adc	r13, r13
    28f0:	2d e0       	ldi	r18, 0x0D	; 13
    28f2:	32 e2       	ldi	r19, 0x22	; 34
    28f4:	c2 0e       	add	r12, r18
    28f6:	d3 1e       	adc	r13, r19
    28f8:	c2 01       	movw	r24, r4
    28fa:	b1 01       	movw	r22, r2
    28fc:	a8 01       	movw	r20, r16
    28fe:	97 01       	movw	r18, r14
    2900:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    2904:	9b 01       	movw	r18, r22
    2906:	ac 01       	movw	r20, r24
    2908:	6f 81       	ldd	r22, Y+7	; 0x07
    290a:	78 85       	ldd	r23, Y+8	; 0x08
    290c:	89 85       	ldd	r24, Y+9	; 0x09
    290e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2910:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	5f e3       	ldi	r21, 0x3F	; 63
    291c:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    2920:	d6 01       	movw	r26, r12
    2922:	6d 93       	st	X+, r22
    2924:	7d 93       	st	X+, r23
    2926:	8d 93       	st	X+, r24
    2928:	9c 93       	st	X, r25
    292a:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    292c:	80 91 1a 22 	lds	r24, 0x221A
    2930:	c8 2e       	mov	r12, r24
    2932:	dd 24       	eor	r13, r13
    2934:	cc 0c       	add	r12, r12
    2936:	dd 1c       	adc	r13, r13
    2938:	cc 0c       	add	r12, r12
    293a:	dd 1c       	adc	r13, r13
    293c:	ed e0       	ldi	r30, 0x0D	; 13
    293e:	f2 e2       	ldi	r31, 0x22	; 34
    2940:	ce 0e       	add	r12, r30
    2942:	df 1e       	adc	r13, r31
    2944:	6f 81       	ldd	r22, Y+7	; 0x07
    2946:	78 85       	ldd	r23, Y+8	; 0x08
    2948:	89 85       	ldd	r24, Y+9	; 0x09
    294a:	9a 85       	ldd	r25, Y+10	; 0x0a
    294c:	a8 01       	movw	r20, r16
    294e:	97 01       	movw	r18, r14
    2950:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    2954:	9b 01       	movw	r18, r22
    2956:	ac 01       	movw	r20, r24
    2958:	c2 01       	movw	r24, r4
    295a:	b1 01       	movw	r22, r2
    295c:	0e 94 25 42 	call	0x844a	; 0x844a <__addsf3>
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e0       	ldi	r20, 0x00	; 0
    2966:	5f e3       	ldi	r21, 0x3F	; 63
    2968:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    296c:	d6 01       	movw	r26, r12
    296e:	6d 93       	st	X+, r22
    2970:	7d 93       	st	X+, r23
    2972:	8d 93       	st	X+, r24
    2974:	9c 93       	st	X, r25
    2976:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    2978:	80 91 cc 21 	lds	r24, 0x21CC
    297c:	88 23       	and	r24, r24
    297e:	19 f0       	breq	.+6      	; 0x2986 <gc_execute_block+0x742>
			return (gc.status);
    2980:	80 91 cc 21 	lds	r24, 0x21CC
    2984:	41 c1       	rjmp	.+642    	; 0x2c08 <gc_execute_block+0x9c4>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    2986:	e0 91 19 22 	lds	r30, 0x2219
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	ee 0f       	add	r30, r30
    298e:	ff 1f       	adc	r31, r31
    2990:	ee 0f       	add	r30, r30
    2992:	ff 1f       	adc	r31, r31
    2994:	e3 5f       	subi	r30, 0xF3	; 243
    2996:	fd 4d       	sbci	r31, 0xDD	; 221
    2998:	60 81       	ld	r22, Z
    299a:	71 81       	ldd	r23, Z+1	; 0x01
    299c:	82 81       	ldd	r24, Z+2	; 0x02
    299e:	93 81       	ldd	r25, Z+3	; 0x03
    29a0:	90 58       	subi	r25, 0x80	; 128
    29a2:	e0 91 1a 22 	lds	r30, 0x221A
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	ee 0f       	add	r30, r30
    29aa:	ff 1f       	adc	r31, r31
    29ac:	ee 0f       	add	r30, r30
    29ae:	ff 1f       	adc	r31, r31
    29b0:	e3 5f       	subi	r30, 0xF3	; 243
    29b2:	fd 4d       	sbci	r31, 0xDD	; 221
    29b4:	20 81       	ld	r18, Z
    29b6:	31 81       	ldd	r19, Z+1	; 0x01
    29b8:	42 81       	ldd	r20, Z+2	; 0x02
    29ba:	53 81       	ldd	r21, Z+3	; 0x03
    29bc:	50 58       	subi	r21, 0x80	; 128
    29be:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <theta>
    29c2:	6f 87       	std	Y+15, r22	; 0x0f
    29c4:	78 8b       	std	Y+16, r23	; 0x10
    29c6:	89 8b       	std	Y+17, r24	; 0x11
    29c8:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    29ca:	9b 01       	movw	r18, r22
    29cc:	ac 01       	movw	r20, r24
    29ce:	0e 94 3b 46 	call	0x8c76	; 0x8c76 <__unordsf2>
    29d2:	88 23       	and	r24, r24
    29d4:	09 f0       	breq	.+2      	; 0x29d8 <gc_execute_block+0x794>
    29d6:	54 c0       	rjmp	.+168    	; 0x2a80 <gc_execute_block+0x83c>
		FAIL(TG_ARC_ERROR); 
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    29d8:	e0 91 19 22 	lds	r30, 0x2219
    29dc:	0e 2f       	mov	r16, r30
    29de:	10 e0       	ldi	r17, 0x00	; 0
    29e0:	e0 91 1a 22 	lds	r30, 0x221A
    29e4:	ce 2e       	mov	r12, r30
    29e6:	dd 24       	eor	r13, r13
    29e8:	00 0f       	add	r16, r16
    29ea:	11 1f       	adc	r17, r17
    29ec:	00 0f       	add	r16, r16
    29ee:	11 1f       	adc	r17, r17
    29f0:	04 53       	subi	r16, 0x34	; 52
    29f2:	1e 4d       	sbci	r17, 0xDE	; 222
    29f4:	f8 01       	movw	r30, r16
    29f6:	ef 5b       	subi	r30, 0xBF	; 191
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	d8 01       	movw	r26, r16
    29fc:	d5 96       	adiw	r26, 0x35	; 53
    29fe:	6d 91       	ld	r22, X+
    2a00:	7d 91       	ld	r23, X+
    2a02:	8d 91       	ld	r24, X+
    2a04:	9c 91       	ld	r25, X
    2a06:	d8 97       	sbiw	r26, 0x38	; 56
    2a08:	20 81       	ld	r18, Z
    2a0a:	31 81       	ldd	r19, Z+1	; 0x01
    2a0c:	42 81       	ldd	r20, Z+2	; 0x02
    2a0e:	53 81       	ldd	r21, Z+3	; 0x03
    2a10:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    2a14:	f8 01       	movw	r30, r16
    2a16:	21 a5       	ldd	r18, Z+41	; 0x29
    2a18:	32 a5       	ldd	r19, Z+42	; 0x2a
    2a1a:	43 a5       	ldd	r20, Z+43	; 0x2b
    2a1c:	54 a5       	ldd	r21, Z+44	; 0x2c
    2a1e:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    2a22:	7b 01       	movw	r14, r22
    2a24:	8c 01       	movw	r16, r24
    2a26:	cc 0c       	add	r12, r12
    2a28:	dd 1c       	adc	r13, r13
    2a2a:	cc 0c       	add	r12, r12
    2a2c:	dd 1c       	adc	r13, r13
    2a2e:	2c ec       	ldi	r18, 0xCC	; 204
    2a30:	31 e2       	ldi	r19, 0x21	; 33
    2a32:	c2 0e       	add	r12, r18
    2a34:	d3 1e       	adc	r13, r19
    2a36:	f6 01       	movw	r30, r12
    2a38:	ef 5b       	subi	r30, 0xBF	; 191
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	d6 01       	movw	r26, r12
    2a3e:	d5 96       	adiw	r26, 0x35	; 53
    2a40:	6d 91       	ld	r22, X+
    2a42:	7d 91       	ld	r23, X+
    2a44:	8d 91       	ld	r24, X+
    2a46:	9c 91       	ld	r25, X
    2a48:	d8 97       	sbiw	r26, 0x38	; 56
    2a4a:	20 81       	ld	r18, Z
    2a4c:	31 81       	ldd	r19, Z+1	; 0x01
    2a4e:	42 81       	ldd	r20, Z+2	; 0x02
    2a50:	53 81       	ldd	r21, Z+3	; 0x03
    2a52:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    2a56:	f6 01       	movw	r30, r12
    2a58:	21 a5       	ldd	r18, Z+41	; 0x29
    2a5a:	32 a5       	ldd	r19, Z+42	; 0x2a
    2a5c:	43 a5       	ldd	r20, Z+43	; 0x2b
    2a5e:	54 a5       	ldd	r21, Z+44	; 0x2c
    2a60:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    2a64:	9b 01       	movw	r18, r22
    2a66:	ac 01       	movw	r20, r24
    2a68:	c8 01       	movw	r24, r16
    2a6a:	b7 01       	movw	r22, r14
    2a6c:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <theta>
    2a70:	7b 01       	movw	r14, r22
    2a72:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    2a74:	a8 01       	movw	r20, r16
    2a76:	97 01       	movw	r18, r14
    2a78:	0e 94 3b 46 	call	0x8c76	; 0x8c76 <__unordsf2>
    2a7c:	88 23       	and	r24, r24
    2a7e:	19 f0       	breq	.+6      	; 0x2a86 <gc_execute_block+0x842>
		FAIL(TG_ARC_ERROR); 
    2a80:	80 e1       	ldi	r24, 0x10	; 16
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	c1 c0       	rjmp	.+386    	; 0x2c08 <gc_execute_block+0x9c4>
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    2a86:	c8 01       	movw	r24, r16
    2a88:	b7 01       	movw	r22, r14
    2a8a:	2f 85       	ldd	r18, Y+15	; 0x0f
    2a8c:	38 89       	ldd	r19, Y+16	; 0x10
    2a8e:	49 89       	ldd	r20, Y+17	; 0x11
    2a90:	5a 89       	ldd	r21, Y+18	; 0x12
    2a92:	0e 94 c4 42 	call	0x8588	; 0x8588 <__cmpsf2>
    2a96:	88 23       	and	r24, r24
    2a98:	54 f4       	brge	.+20     	; 0x2aae <gc_execute_block+0x86a>
		theta_end += 2*M_PI;
    2a9a:	c8 01       	movw	r24, r16
    2a9c:	b7 01       	movw	r22, r14
    2a9e:	2b ed       	ldi	r18, 0xDB	; 219
    2aa0:	3f e0       	ldi	r19, 0x0F	; 15
    2aa2:	49 ec       	ldi	r20, 0xC9	; 201
    2aa4:	50 e4       	ldi	r21, 0x40	; 64
    2aa6:	0e 94 25 42 	call	0x844a	; 0x844a <__addsf3>
    2aaa:	7b 01       	movw	r14, r22
    2aac:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    2aae:	c8 01       	movw	r24, r16
    2ab0:	b7 01       	movw	r22, r14
    2ab2:	2f 85       	ldd	r18, Y+15	; 0x0f
    2ab4:	38 89       	ldd	r19, Y+16	; 0x10
    2ab6:	49 89       	ldd	r20, Y+17	; 0x11
    2ab8:	5a 89       	ldd	r21, Y+18	; 0x12
    2aba:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    2abe:	6b 87       	std	Y+11, r22	; 0x0b
    2ac0:	7c 87       	std	Y+12, r23	; 0x0c
    2ac2:	8d 87       	std	Y+13, r24	; 0x0d
    2ac4:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2ac6:	80 91 d7 21 	lds	r24, 0x21D7
    2aca:	83 30       	cpi	r24, 0x03	; 3
    2acc:	71 f4       	brne	.+28     	; 0x2aea <gc_execute_block+0x8a6>
		angular_travel = angular_travel - 2*M_PI;
    2ace:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad6:	2b ed       	ldi	r18, 0xDB	; 219
    2ad8:	3f e0       	ldi	r19, 0x0F	; 15
    2ada:	49 ec       	ldi	r20, 0xC9	; 201
    2adc:	50 e4       	ldi	r21, 0x40	; 64
    2ade:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    2ae2:	6b 87       	std	Y+11, r22	; 0x0b
    2ae4:	7c 87       	std	Y+12, r23	; 0x0c
    2ae6:	8d 87       	std	Y+13, r24	; 0x0d
    2ae8:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2aea:	80 91 19 22 	lds	r24, 0x2219
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	2d 83       	std	Y+5, r18	; 0x05
    2af4:	3e 83       	std	Y+6, r19	; 0x06
    2af6:	f9 01       	movw	r30, r18
    2af8:	ee 0f       	add	r30, r30
    2afa:	ff 1f       	adc	r31, r31
    2afc:	ee 0f       	add	r30, r30
    2afe:	ff 1f       	adc	r31, r31
    2b00:	e3 5f       	subi	r30, 0xF3	; 243
    2b02:	fd 4d       	sbci	r31, 0xDD	; 221
    2b04:	e0 80       	ld	r14, Z
    2b06:	f1 80       	ldd	r15, Z+1	; 0x01
    2b08:	02 81       	ldd	r16, Z+2	; 0x02
    2b0a:	13 81       	ldd	r17, Z+3	; 0x03
    2b0c:	80 91 1a 22 	lds	r24, 0x221A
    2b10:	a8 2f       	mov	r26, r24
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	ab 83       	std	Y+3, r26	; 0x03
    2b16:	bc 83       	std	Y+4, r27	; 0x04
    2b18:	fd 01       	movw	r30, r26
    2b1a:	ee 0f       	add	r30, r30
    2b1c:	ff 1f       	adc	r31, r31
    2b1e:	ee 0f       	add	r30, r30
    2b20:	ff 1f       	adc	r31, r31
    2b22:	e3 5f       	subi	r30, 0xF3	; 243
    2b24:	fd 4d       	sbci	r31, 0xDD	; 221
    2b26:	20 81       	ld	r18, Z
    2b28:	31 81       	ldd	r19, Z+1	; 0x01
    2b2a:	42 81       	ldd	r20, Z+2	; 0x02
    2b2c:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    2b2e:	80 91 1b 22 	lds	r24, 0x221B
    2b32:	28 2e       	mov	r2, r24
    2b34:	33 24       	eor	r3, r3
    2b36:	f1 01       	movw	r30, r2
    2b38:	ee 0f       	add	r30, r30
    2b3a:	ff 1f       	adc	r31, r31
    2b3c:	ee 0f       	add	r30, r30
    2b3e:	ff 1f       	adc	r31, r31
    2b40:	e4 53       	subi	r30, 0x34	; 52
    2b42:	fe 4d       	sbci	r31, 0xDE	; 222
    2b44:	85 a9       	ldd	r24, Z+53	; 0x35
    2b46:	96 a9       	ldd	r25, Z+54	; 0x36
    2b48:	a7 a9       	ldd	r26, Z+55	; 0x37
    2b4a:	b0 ad       	ldd	r27, Z+56	; 0x38
    2b4c:	8c 8b       	std	Y+20, r24	; 0x14
    2b4e:	9d 8b       	std	Y+21, r25	; 0x15
    2b50:	ae 8b       	std	Y+22, r26	; 0x16
    2b52:	bf 8b       	std	Y+23, r27	; 0x17
    2b54:	a1 a4       	ldd	r10, Z+41	; 0x29
    2b56:	b2 a4       	ldd	r11, Z+42	; 0x2a
    2b58:	c3 a4       	ldd	r12, Z+43	; 0x2b
    2b5a:	d4 a4       	ldd	r13, Z+44	; 0x2c

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2b5c:	90 91 d8 21 	lds	r25, 0x21D8
    2b60:	9b 8b       	std	Y+19, r25	; 0x13
    2b62:	99 23       	and	r25, r25
    2b64:	49 f0       	breq	.+18     	; 0x2b78 <gc_execute_block+0x934>
    2b66:	40 90 f1 21 	lds	r4, 0x21F1
    2b6a:	50 90 f2 21 	lds	r5, 0x21F2
    2b6e:	60 90 f3 21 	lds	r6, 0x21F3
    2b72:	70 90 f4 21 	lds	r7, 0x21F4
    2b76:	08 c0       	rjmp	.+16     	; 0x2b88 <gc_execute_block+0x944>
    2b78:	40 90 e5 21 	lds	r4, 0x21E5
    2b7c:	50 90 e6 21 	lds	r5, 0x21E6
    2b80:	60 90 e7 21 	lds	r6, 0x21E7
    2b84:	70 90 e8 21 	lds	r7, 0x21E8
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2b88:	c8 01       	movw	r24, r16
    2b8a:	b7 01       	movw	r22, r14
    2b8c:	0e 94 c1 44 	call	0x8982	; 0x8982 <hypot>
    2b90:	7b 01       	movw	r14, r22
    2b92:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2b94:	ad b7       	in	r26, 0x3d	; 61
    2b96:	be b7       	in	r27, 0x3e	; 62
    2b98:	1a 97       	sbiw	r26, 0x0a	; 10
    2b9a:	ad bf       	out	0x3d, r26	; 61
    2b9c:	be bf       	out	0x3e, r27	; 62
    2b9e:	8d b6       	in	r8, 0x3d	; 61
    2ba0:	9e b6       	in	r9, 0x3e	; 62
    2ba2:	08 94       	sec
    2ba4:	81 1c       	adc	r8, r1
    2ba6:	91 1c       	adc	r9, r1
    2ba8:	6c 89       	ldd	r22, Y+20	; 0x14
    2baa:	7d 89       	ldd	r23, Y+21	; 0x15
    2bac:	8e 89       	ldd	r24, Y+22	; 0x16
    2bae:	9f 89       	ldd	r25, Y+23	; 0x17
    2bb0:	a6 01       	movw	r20, r12
    2bb2:	95 01       	movw	r18, r10
    2bb4:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    2bb8:	5b 01       	movw	r10, r22
    2bba:	6c 01       	movw	r12, r24
    2bbc:	2b 81       	ldd	r18, Y+3	; 0x03
    2bbe:	3c 81       	ldd	r19, Y+4	; 0x04
    2bc0:	f4 01       	movw	r30, r8
    2bc2:	20 83       	st	Z, r18
    2bc4:	31 83       	std	Z+1, r19	; 0x01
    2bc6:	22 82       	std	Z+2, r2	; 0x02
    2bc8:	33 82       	std	Z+3, r3	; 0x03
    2bca:	d4 01       	movw	r26, r8
    2bcc:	14 96       	adiw	r26, 0x04	; 4
    2bce:	4d 92       	st	X+, r4
    2bd0:	5d 92       	st	X+, r5
    2bd2:	6d 92       	st	X+, r6
    2bd4:	7c 92       	st	X, r7
    2bd6:	17 97       	sbiw	r26, 0x07	; 7
    2bd8:	eb 89       	ldd	r30, Y+19	; 0x13
    2bda:	18 96       	adiw	r26, 0x08	; 8
    2bdc:	ec 93       	st	X, r30
    2bde:	18 97       	sbiw	r26, 0x08	; 8
    2be0:	19 96       	adiw	r26, 0x09	; 9
    2be2:	1c 92       	st	X, r1
    2be4:	6f 85       	ldd	r22, Y+15	; 0x0f
    2be6:	78 89       	ldd	r23, Y+16	; 0x10
    2be8:	89 89       	ldd	r24, Y+17	; 0x11
    2bea:	9a 89       	ldd	r25, Y+18	; 0x12
    2bec:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bee:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bf0:	4d 85       	ldd	r20, Y+13	; 0x0d
    2bf2:	5e 85       	ldd	r21, Y+14	; 0x0e
    2bf4:	8d 80       	ldd	r8, Y+5	; 0x05
    2bf6:	9e 80       	ldd	r9, Y+6	; 0x06
    2bf8:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <mc_arc>
	// has completed the arc. So the endpoint should be passed to the generator and
	// executed there.
//	gc.status = mc_line(gc.target[X_AXIS], gc.target[Y_AXIS], gc.target[Z_AXIS], 
//					   (gc.inverse_feed_rate_mode) ? gc.inverse_feed_rate : 
//						gc.feed_rate, gc.inverse_feed_rate_mode);
	return (gc.status);
    2bfc:	2d b7       	in	r18, 0x3d	; 61
    2bfe:	3e b7       	in	r19, 0x3e	; 62
    2c00:	26 5f       	subi	r18, 0xF6	; 246
    2c02:	3f 4f       	sbci	r19, 0xFF	; 255
    2c04:	2d bf       	out	0x3d, r18	; 61
    2c06:	3e bf       	out	0x3e, r19	; 62
										gc.inverse_feed_rate_mode); 
					break;
				}

				case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC: {
					gc.status = _gc_compute_arc(); 
    2c08:	80 93 cc 21 	sts	0x21CC, r24
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_EAGAIN)) {
    2c0c:	80 91 cc 21 	lds	r24, 0x21CC
    2c10:	82 30       	cpi	r24, 0x02	; 2
    2c12:	48 f4       	brcc	.+18     	; 0x2c26 <gc_execute_block+0x9e2>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2c14:	e5 ef       	ldi	r30, 0xF5	; 245
    2c16:	f1 e2       	ldi	r31, 0x21	; 33
    2c18:	df 01       	movw	r26, r30
    2c1a:	1c 96       	adiw	r26, 0x0c	; 12
    2c1c:	9c e0       	ldi	r25, 0x0C	; 12
    2c1e:	0d 90       	ld	r0, X+
    2c20:	01 92       	st	Z+, r0
    2c22:	91 50       	subi	r25, 0x01	; 1
    2c24:	e1 f7       	brne	.-8      	; 0x2c1e <gc_execute_block+0x9da>
	};
	return(gc.status);
}
    2c26:	68 96       	adiw	r28, 0x18	; 24
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	de bf       	out	0x3e, r29	; 62
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	1f 91       	pop	r17
    2c32:	0f 91       	pop	r16
    2c34:	ff 90       	pop	r15
    2c36:	ef 90       	pop	r14
    2c38:	df 90       	pop	r13
    2c3a:	cf 90       	pop	r12
    2c3c:	bf 90       	pop	r11
    2c3e:	af 90       	pop	r10
    2c40:	9f 90       	pop	r9
    2c42:	8f 90       	pop	r8
    2c44:	7f 90       	pop	r7
    2c46:	6f 90       	pop	r6
    2c48:	5f 90       	pop	r5
    2c4a:	4f 90       	pop	r4
    2c4c:	3f 90       	pop	r3
    2c4e:	2f 90       	pop	r2
    2c50:	08 95       	ret

00002c52 <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2c52:	cf 93       	push	r28
    2c54:	df 93       	push	r29
    2c56:	ec 01       	movw	r28, r24
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	10 c0       	rjmp	.+32     	; 0x2c7e <gc_gcode_parser+0x2c>
	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
		if (c <= ' ' ) {					// throw away WS & ctrl chars
    2c5e:	e1 32       	cpi	r30, 0x21	; 33
    2c60:	70 f0       	brcs	.+28     	; 0x2c7e <gc_gcode_parser+0x2c>
			continue;
		} else if (c >= 'a' && c <= 'z') {	// convert lower to upper
    2c62:	8e 2f       	mov	r24, r30
    2c64:	81 56       	subi	r24, 0x61	; 97
    2c66:	a9 2f       	mov	r26, r25
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	9f 5f       	subi	r25, 0xFF	; 255
    2c6c:	8a 31       	cpi	r24, 0x1A	; 26
    2c6e:	20 f4       	brcc	.+8      	; 0x2c78 <gc_gcode_parser+0x26>
			block[j++] = c-'a'+'A';
    2c70:	ac 0f       	add	r26, r28
    2c72:	bd 1f       	adc	r27, r29
    2c74:	e0 52       	subi	r30, 0x20	; 32
    2c76:	02 c0       	rjmp	.+4      	; 0x2c7c <gc_gcode_parser+0x2a>
		} else {
			block[j++] = c;
    2c78:	ac 0f       	add	r26, r28
    2c7a:	bd 1f       	adc	r27, r29
    2c7c:	ec 93       	st	X, r30

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
    2c7e:	fe 01       	movw	r30, r28
    2c80:	e2 0f       	add	r30, r18
    2c82:	f1 1d       	adc	r31, r1
    2c84:	e0 81       	ld	r30, Z
    2c86:	2f 5f       	subi	r18, 0xFF	; 255
    2c88:	ee 23       	and	r30, r30
    2c8a:	49 f7       	brne	.-46     	; 0x2c5e <gc_gcode_parser+0xc>
			block[j++] = c-'a'+'A';
		} else {
			block[j++] = c;
		}
	}
	block[j] = 0;
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	e9 0f       	add	r30, r25
    2c90:	f1 1d       	adc	r31, r1
    2c92:	10 82       	st	Z, r1
{
	_gc_normalize_gcode_block(block);
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    2c94:	88 81       	ld	r24, Y
    2c96:	88 32       	cpi	r24, 0x28	; 40
    2c98:	61 f0       	breq	.+24     	; 0x2cb2 <gc_gcode_parser+0x60>
		return(TG_OK);
	}
	if (block[0] == 'Q') { 					// quit
    2c9a:	81 35       	cpi	r24, 0x51	; 81
    2c9c:	11 f4       	brne	.+4      	; 0x2ca2 <gc_gcode_parser+0x50>
    2c9e:	83 e0       	ldi	r24, 0x03	; 3
    2ca0:	09 c0       	rjmp	.+18     	; 0x2cb4 <gc_gcode_parser+0x62>
		return(TG_QUIT);
	} 
	if (block[0] == '/') { 					// ignore block delete
    2ca2:	8f 32       	cpi	r24, 0x2F	; 47
    2ca4:	31 f0       	breq	.+12     	; 0x2cb2 <gc_gcode_parser+0x60>
		return(TG_OK);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2ca6:	ce 01       	movw	r24, r28
    2ca8:	0e 94 22 11 	call	0x2244	; 0x2244 <gc_execute_block>
    2cac:	80 93 cc 21 	sts	0x21CC, r24
    2cb0:	01 c0       	rjmp	.+2      	; 0x2cb4 <gc_gcode_parser+0x62>
#ifdef __ECHO
	_gc_print_status(gc.status, block);
#endif
	return (gc.status);
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
}
    2cb4:	df 91       	pop	r29
    2cb6:	cf 91       	pop	r28
    2cb8:	08 95       	ret

00002cba <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2cba:	cf 92       	push	r12
    2cbc:	df 92       	push	r13
    2cbe:	ef 92       	push	r14
    2cc0:	ff 92       	push	r15
    2cc2:	0f 93       	push	r16
    2cc4:	1f 93       	push	r17
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	c6 ec       	ldi	r28, 0xC6	; 198
    2ccc:	d4 e2       	ldi	r29, 0x24	; 36
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2cce:	68 81       	ld	r22, Y
    2cd0:	70 e0       	ldi	r23, 0x00	; 0
    2cd2:	88 27       	eor	r24, r24
    2cd4:	77 fd       	sbrc	r23, 7
    2cd6:	80 95       	com	r24
    2cd8:	98 2f       	mov	r25, r24
    2cda:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    2cde:	9b 01       	movw	r18, r22
    2ce0:	ac 01       	movw	r20, r24
    2ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce4:	78 85       	ldd	r23, Y+8	; 0x08
    2ce6:	89 85       	ldd	r24, Y+9	; 0x09
    2ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cea:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    2cee:	9b 01       	movw	r18, r22
    2cf0:	ac 01       	movw	r20, r24
    2cf2:	60 e0       	ldi	r22, 0x00	; 0
    2cf4:	70 e0       	ldi	r23, 0x00	; 0
    2cf6:	84 eb       	ldi	r24, 0xB4	; 180
    2cf8:	93 e4       	ldi	r25, 0x43	; 67
    2cfa:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    2cfe:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d00:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d02:	4d 85       	ldd	r20, Y+13	; 0x0d
    2d04:	5e 85       	ldd	r21, Y+14	; 0x0e
    2d06:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    2d0a:	6b 8b       	std	Y+19, r22	; 0x13
    2d0c:	7c 8b       	std	Y+20, r23	; 0x14
    2d0e:	8d 8b       	std	Y+21, r24	; 0x15
    2d10:	9e 8b       	std	Y+22, r25	; 0x16
    2d12:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    2d14:	85 e2       	ldi	r24, 0x25	; 37
    2d16:	c6 32       	cpi	r28, 0x26	; 38
    2d18:	d8 07       	cpc	r29, r24
    2d1a:	c9 f6       	brne	.-78     	; 0x2cce <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    2d1c:	00 91 c6 24 	lds	r16, 0x24C6
    2d20:	10 e0       	ldi	r17, 0x00	; 0
    2d22:	b8 01       	movw	r22, r16
    2d24:	88 27       	eor	r24, r24
    2d26:	77 fd       	sbrc	r23, 7
    2d28:	80 95       	com	r24
    2d2a:	98 2f       	mov	r25, r24
    2d2c:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    2d30:	9b 01       	movw	r18, r22
    2d32:	ac 01       	movw	r20, r24
    2d34:	60 91 cd 24 	lds	r22, 0x24CD
    2d38:	70 91 ce 24 	lds	r23, 0x24CE
    2d3c:	80 91 cf 24 	lds	r24, 0x24CF
    2d40:	90 91 d0 24 	lds	r25, 0x24D0
    2d44:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    2d48:	9b 01       	movw	r18, r22
    2d4a:	ac 01       	movw	r20, r24
    2d4c:	60 e0       	ldi	r22, 0x00	; 0
    2d4e:	70 e0       	ldi	r23, 0x00	; 0
    2d50:	84 eb       	ldi	r24, 0xB4	; 180
    2d52:	93 e4       	ldi	r25, 0x43	; 67
    2d54:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    2d58:	6b 01       	movw	r12, r22
    2d5a:	7c 01       	movw	r14, r24
    2d5c:	80 91 cb 24 	lds	r24, 0x24CB
    2d60:	90 91 cc 24 	lds	r25, 0x24CC
    2d64:	08 9f       	mul	r16, r24
    2d66:	b0 01       	movw	r22, r0
    2d68:	09 9f       	mul	r16, r25
    2d6a:	70 0d       	add	r23, r0
    2d6c:	18 9f       	mul	r17, r24
    2d6e:	70 0d       	add	r23, r0
    2d70:	11 24       	eor	r1, r1
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	0e 94 64 43 	call	0x86c8	; 0x86c8 <__floatunsisf>
    2d7a:	a7 01       	movw	r20, r14
    2d7c:	96 01       	movw	r18, r12
    2d7e:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    2d82:	60 93 be 24 	sts	0x24BE, r22
    2d86:	70 93 bf 24 	sts	0x24BF, r23
    2d8a:	80 93 c0 24 	sts	0x24C0, r24
    2d8e:	90 93 c1 24 	sts	0x24C1, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    2d92:	80 91 c9 24 	lds	r24, 0x24C9
    2d96:	90 91 ca 24 	lds	r25, 0x24CA
    2d9a:	08 9f       	mul	r16, r24
    2d9c:	b0 01       	movw	r22, r0
    2d9e:	09 9f       	mul	r16, r25
    2da0:	70 0d       	add	r23, r0
    2da2:	18 9f       	mul	r17, r24
    2da4:	70 0d       	add	r23, r0
    2da6:	11 24       	eor	r1, r1
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	0e 94 64 43 	call	0x86c8	; 0x86c8 <__floatunsisf>
    2db0:	a7 01       	movw	r20, r14
    2db2:	96 01       	movw	r18, r12
    2db4:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    2db8:	60 93 c2 24 	sts	0x24C2, r22
    2dbc:	70 93 c3 24 	sts	0x24C3, r23
    2dc0:	80 93 c4 24 	sts	0x24C4, r24
    2dc4:	90 93 c5 24 	sts	0x24C5, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    2dc8:	df 91       	pop	r29
    2dca:	cf 91       	pop	r28
    2dcc:	1f 91       	pop	r17
    2dce:	0f 91       	pop	r16
    2dd0:	ff 90       	pop	r15
    2dd2:	ef 90       	pop	r14
    2dd4:	df 90       	pop	r13
    2dd6:	cf 90       	pop	r12
    2dd8:	08 95       	ret

00002dda <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    2dda:	e8 eb       	ldi	r30, 0xB8	; 184
    2ddc:	f4 e2       	ldi	r31, 0x24	; 36
    2dde:	84 e6       	ldi	r24, 0x64	; 100
    2de0:	80 93 b8 24 	sts	0x24B8, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2de4:	8a e0       	ldi	r24, 0x0A	; 10
    2de6:	97 ed       	ldi	r25, 0xD7	; 215
    2de8:	a3 e2       	ldi	r26, 0x23	; 35
    2dea:	bc e3       	ldi	r27, 0x3C	; 60
    2dec:	80 93 ba 24 	sts	0x24BA, r24
    2df0:	90 93 bb 24 	sts	0x24BB, r25
    2df4:	a0 93 bc 24 	sts	0x24BC, r26
    2df8:	b0 93 bd 24 	sts	0x24BD, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2dfc:	8c ed       	ldi	r24, 0xDC	; 220
    2dfe:	95 e0       	ldi	r25, 0x05	; 5
    2e00:	80 93 c9 24 	sts	0x24C9, r24
    2e04:	90 93 ca 24 	sts	0x24CA, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2e08:	80 93 e1 24 	sts	0x24E1, r24
    2e0c:	90 93 e2 24 	sts	0x24E2, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2e10:	80 93 f9 24 	sts	0x24F9, r24
    2e14:	90 93 fa 24 	sts	0x24FA, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2e18:	80 93 11 25 	sts	0x2511, r24
    2e1c:	90 93 12 25 	sts	0x2512, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2e20:	80 93 cb 24 	sts	0x24CB, r24
    2e24:	90 93 cc 24 	sts	0x24CC, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2e28:	80 93 e3 24 	sts	0x24E3, r24
    2e2c:	90 93 e4 24 	sts	0x24E4, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2e30:	80 93 fb 24 	sts	0x24FB, r24
    2e34:	90 93 fc 24 	sts	0x24FC, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2e38:	80 93 13 25 	sts	0x2513, r24
    2e3c:	90 93 14 25 	sts	0x2514, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2e40:	86 e6       	ldi	r24, 0x66	; 102
    2e42:	96 e6       	ldi	r25, 0x66	; 102
    2e44:	a6 ee       	ldi	r26, 0xE6	; 230
    2e46:	bf e3       	ldi	r27, 0x3F	; 63
    2e48:	80 93 cd 24 	sts	0x24CD, r24
    2e4c:	90 93 ce 24 	sts	0x24CE, r25
    2e50:	a0 93 cf 24 	sts	0x24CF, r26
    2e54:	b0 93 d0 24 	sts	0x24D0, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2e58:	80 93 e5 24 	sts	0x24E5, r24
    2e5c:	90 93 e6 24 	sts	0x24E6, r25
    2e60:	a0 93 e7 24 	sts	0x24E7, r26
    2e64:	b0 93 e8 24 	sts	0x24E8, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2e68:	80 93 fd 24 	sts	0x24FD, r24
    2e6c:	90 93 fe 24 	sts	0x24FE, r25
    2e70:	a0 93 ff 24 	sts	0x24FF, r26
    2e74:	b0 93 00 25 	sts	0x2500, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2e78:	80 93 15 25 	sts	0x2515, r24
    2e7c:	90 93 16 25 	sts	0x2516, r25
    2e80:	a0 93 17 25 	sts	0x2517, r26
    2e84:	b0 93 18 25 	sts	0x2518, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    2e88:	8c e5       	ldi	r24, 0x5C	; 92
    2e8a:	9f e8       	ldi	r25, 0x8F	; 143
    2e8c:	a2 ea       	ldi	r26, 0xA2	; 162
    2e8e:	bf e3       	ldi	r27, 0x3F	; 63
    2e90:	80 93 d1 24 	sts	0x24D1, r24
    2e94:	90 93 d2 24 	sts	0x24D2, r25
    2e98:	a0 93 d3 24 	sts	0x24D3, r26
    2e9c:	b0 93 d4 24 	sts	0x24D4, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    2ea0:	80 93 e9 24 	sts	0x24E9, r24
    2ea4:	90 93 ea 24 	sts	0x24EA, r25
    2ea8:	a0 93 eb 24 	sts	0x24EB, r26
    2eac:	b0 93 ec 24 	sts	0x24EC, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    2eb0:	80 93 01 25 	sts	0x2501, r24
    2eb4:	90 93 02 25 	sts	0x2502, r25
    2eb8:	a0 93 03 25 	sts	0x2503, r26
    2ebc:	b0 93 04 25 	sts	0x2504, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    2ec0:	80 93 19 25 	sts	0x2519, r24
    2ec4:	90 93 1a 25 	sts	0x251A, r25
    2ec8:	a0 93 1b 25 	sts	0x251B, r26
    2ecc:	b0 93 1c 25 	sts	0x251C, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	a8 ec       	ldi	r26, 0xC8	; 200
    2ed6:	b3 e4       	ldi	r27, 0x43	; 67
    2ed8:	80 93 d5 24 	sts	0x24D5, r24
    2edc:	90 93 d6 24 	sts	0x24D6, r25
    2ee0:	a0 93 d7 24 	sts	0x24D7, r26
    2ee4:	b0 93 d8 24 	sts	0x24D8, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    2ee8:	80 93 ed 24 	sts	0x24ED, r24
    2eec:	90 93 ee 24 	sts	0x24EE, r25
    2ef0:	a0 93 ef 24 	sts	0x24EF, r26
    2ef4:	b0 93 f0 24 	sts	0x24F0, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	a6 e9       	ldi	r26, 0x96	; 150
    2efe:	b3 e4       	ldi	r27, 0x43	; 67
    2f00:	80 93 05 25 	sts	0x2505, r24
    2f04:	90 93 06 25 	sts	0x2506, r25
    2f08:	a0 93 07 25 	sts	0x2507, r26
    2f0c:	b0 93 08 25 	sts	0x2508, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	a0 e8       	ldi	r26, 0x80	; 128
    2f16:	bf eb       	ldi	r27, 0xBF	; 191
    2f18:	80 93 1d 25 	sts	0x251D, r24
    2f1c:	90 93 1e 25 	sts	0x251E, r25
    2f20:	a0 93 1f 25 	sts	0x251F, r26
    2f24:	b0 93 20 25 	sts	0x2520, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    2f28:	88 e0       	ldi	r24, 0x08	; 8
    2f2a:	80 93 c6 24 	sts	0x24C6, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    2f2e:	80 93 de 24 	sts	0x24DE, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    2f32:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A].microstep = A_MICROSTEPS;
    2f34:	80 93 0e 25 	sts	0x250E, r24

	cfg.a[X].polarity = X_POLARITY;
    2f38:	10 92 c8 24 	sts	0x24C8, r1
	cfg.a[Y].polarity = Y_POLARITY;
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	80 93 e0 24 	sts	0x24E0, r24
	cfg.a[Z].polarity = Z_POLARITY;
    2f42:	10 92 f8 24 	sts	0x24F8, r1
	cfg.a[A].polarity = A_POLARITY;
    2f46:	10 92 10 25 	sts	0x2510, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    2f4a:	80 93 dd 24 	sts	0x24DD, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    2f4e:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    2f50:	80 93 0d 25 	sts	0x250D, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    2f54:	10 92 25 25 	sts	0x2525, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    2f58:	80 93 c7 24 	sts	0x24C7, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    2f5c:	80 93 df 24 	sts	0x24DF, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    2f60:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    2f62:	80 93 0f 25 	sts	0x250F, r24

	_cfg_computed();		// generate computed values from the above
    2f66:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_cfg_computed>
}
    2f6a:	08 95       	ret

00002f6c <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2f6c:	0e 94 ed 16 	call	0x2dda	; 0x2dda <cfg_reset>
}
    2f70:	08 95       	ret

00002f72 <_cfg_print_status>:
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    2f72:	89 30       	cpi	r24, 0x09	; 9
    2f74:	31 f1       	breq	.+76     	; 0x2fc2 <_cfg_print_status+0x50>
    2f76:	8a 30       	cpi	r24, 0x0A	; 10
    2f78:	30 f4       	brcc	.+12     	; 0x2f86 <_cfg_print_status+0x14>
    2f7a:	81 30       	cpi	r24, 0x01	; 1
    2f7c:	59 f0       	breq	.+22     	; 0x2f94 <_cfg_print_status+0x22>
    2f7e:	83 30       	cpi	r24, 0x03	; 3
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <_cfg_print_status+0x12>
    2f82:	45 c0       	rjmp	.+138    	; 0x300e <_cfg_print_status+0x9c>
    2f84:	0c c0       	rjmp	.+24     	; 0x2f9e <_cfg_print_status+0x2c>
    2f86:	8e 30       	cpi	r24, 0x0E	; 14
    2f88:	09 f1       	breq	.+66     	; 0x2fcc <_cfg_print_status+0x5a>
    2f8a:	80 31       	cpi	r24, 0x10	; 16
    2f8c:	81 f1       	breq	.+96     	; 0x2fee <_cfg_print_status+0x7c>
    2f8e:	8d 30       	cpi	r24, 0x0D	; 13
    2f90:	f1 f5       	brne	.+124    	; 0x300e <_cfg_print_status+0x9c>
    2f92:	12 c0       	rjmp	.+36     	; 0x2fb8 <_cfg_print_status+0x46>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_EAGAIN: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    2f94:	00 d0       	rcall	.+0      	; 0x2f96 <_cfg_print_status+0x24>
    2f96:	0f 92       	push	r0
    2f98:	85 e1       	ldi	r24, 0x15	; 21
    2f9a:	94 e0       	ldi	r25, 0x04	; 4
    2f9c:	1b c0       	rjmp	.+54     	; 0x2fd4 <_cfg_print_status+0x62>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    2f9e:	0f 92       	push	r0
    2fa0:	0f 92       	push	r0
    2fa2:	8f ef       	ldi	r24, 0xFF	; 255
    2fa4:	93 e0       	ldi	r25, 0x03	; 3
    2fa6:	ed b7       	in	r30, 0x3d	; 61
    2fa8:	fe b7       	in	r31, 0x3e	; 62
    2faa:	81 83       	std	Z+1, r24	; 0x01
    2fac:	92 83       	std	Z+2, r25	; 0x02
    2fae:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	08 95       	ret
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2fb8:	00 d0       	rcall	.+0      	; 0x2fba <_cfg_print_status+0x48>
    2fba:	0f 92       	push	r0
    2fbc:	88 ee       	ldi	r24, 0xE8	; 232
    2fbe:	93 e0       	ldi	r25, 0x03	; 3
    2fc0:	09 c0       	rjmp	.+18     	; 0x2fd4 <_cfg_print_status+0x62>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    2fc2:	00 d0       	rcall	.+0      	; 0x2fc4 <_cfg_print_status+0x52>
    2fc4:	0f 92       	push	r0
    2fc6:	8e ec       	ldi	r24, 0xCE	; 206
    2fc8:	93 e0       	ldi	r25, 0x03	; 3
    2fca:	04 c0       	rjmp	.+8      	; 0x2fd4 <_cfg_print_status+0x62>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <_cfg_print_status+0x5c>
    2fce:	0f 92       	push	r0
    2fd0:	84 eb       	ldi	r24, 0xB4	; 180
    2fd2:	93 e0       	ldi	r25, 0x03	; 3
    2fd4:	ed b7       	in	r30, 0x3d	; 61
    2fd6:	fe b7       	in	r31, 0x3e	; 62
    2fd8:	81 83       	std	Z+1, r24	; 0x01
    2fda:	92 83       	std	Z+2, r25	; 0x02
    2fdc:	63 83       	std	Z+3, r22	; 0x03
    2fde:	74 83       	std	Z+4, r23	; 0x04
    2fe0:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	08 95       	ret
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    2fee:	00 d0       	rcall	.+0      	; 0x2ff0 <_cfg_print_status+0x7e>
    2ff0:	0f 92       	push	r0
    2ff2:	89 e9       	ldi	r24, 0x99	; 153
    2ff4:	93 e0       	ldi	r25, 0x03	; 3
    2ff6:	ed b7       	in	r30, 0x3d	; 61
    2ff8:	fe b7       	in	r31, 0x3e	; 62
    2ffa:	81 83       	std	Z+1, r24	; 0x01
    2ffc:	92 83       	std	Z+2, r25	; 0x02
    2ffe:	63 83       	std	Z+3, r22	; 0x03
    3000:	74 83       	std	Z+4, r23	; 0x04
    3002:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
    3006:	0f 90       	pop	r0
    3008:	0f 90       	pop	r0
    300a:	0f 90       	pop	r0
    300c:	0f 90       	pop	r0
    300e:	08 95       	ret

00003010 <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    3010:	ef 92       	push	r14
    3012:	ff 92       	push	r15
    3014:	0f 93       	push	r16
    3016:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    3018:	e8 2e       	mov	r14, r24
    301a:	ff 24       	eor	r15, r15
    301c:	87 01       	movw	r16, r14
    301e:	00 0f       	add	r16, r16
    3020:	11 1f       	adc	r17, r17
    3022:	f8 01       	movw	r30, r16
    3024:	ed 5b       	subi	r30, 0xBD	; 189
    3026:	fd 4f       	sbci	r31, 0xFD	; 253
    3028:	25 91       	lpm	r18, Z+
    302a:	34 91       	lpm	r19, Z+
    302c:	00 d0       	rcall	.+0      	; 0x302e <_cfg_dump_axis+0x1e>
    302e:	0f 92       	push	r0
    3030:	88 e3       	ldi	r24, 0x38	; 56
    3032:	96 e0       	ldi	r25, 0x06	; 6
    3034:	ad b7       	in	r26, 0x3d	; 61
    3036:	be b7       	in	r27, 0x3e	; 62
    3038:	11 96       	adiw	r26, 0x01	; 1
    303a:	8d 93       	st	X+, r24
    303c:	9c 93       	st	X, r25
    303e:	12 97       	sbiw	r26, 0x02	; 2
    3040:	13 96       	adiw	r26, 0x03	; 3
    3042:	2d 93       	st	X+, r18
    3044:	3c 93       	st	X, r19
    3046:	14 97       	sbiw	r26, 0x04	; 4
    3048:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	96 e0       	ldi	r25, 0x06	; 6
    3050:	ed b7       	in	r30, 0x3d	; 61
    3052:	fe b7       	in	r31, 0x3e	; 62
    3054:	81 83       	std	Z+1, r24	; 0x01
    3056:	92 83       	std	Z+2, r25	; 0x02
    3058:	0e 0d       	add	r16, r14
    305a:	1f 1d       	adc	r17, r15
    305c:	83 e0       	ldi	r24, 0x03	; 3
    305e:	00 0f       	add	r16, r16
    3060:	11 1f       	adc	r17, r17
    3062:	8a 95       	dec	r24
    3064:	e1 f7       	brne	.-8      	; 0x305e <_cfg_dump_axis+0x4e>
    3066:	08 54       	subi	r16, 0x48	; 72
    3068:	1b 4d       	sbci	r17, 0xDB	; 219
    306a:	d8 01       	movw	r26, r16
    306c:	51 96       	adiw	r26, 0x11	; 17
    306e:	8d 91       	ld	r24, X+
    3070:	9c 91       	ld	r25, X
    3072:	52 97       	sbiw	r26, 0x12	; 18
    3074:	83 83       	std	Z+3, r24	; 0x03
    3076:	94 83       	std	Z+4, r25	; 0x04
    3078:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    307c:	88 ec       	ldi	r24, 0xC8	; 200
    307e:	95 e0       	ldi	r25, 0x05	; 5
    3080:	ed b7       	in	r30, 0x3d	; 61
    3082:	fe b7       	in	r31, 0x3e	; 62
    3084:	81 83       	std	Z+1, r24	; 0x01
    3086:	92 83       	std	Z+2, r25	; 0x02
    3088:	d8 01       	movw	r26, r16
    308a:	53 96       	adiw	r26, 0x13	; 19
    308c:	8d 91       	ld	r24, X+
    308e:	9c 91       	ld	r25, X
    3090:	54 97       	sbiw	r26, 0x14	; 20
    3092:	83 83       	std	Z+3, r24	; 0x03
    3094:	94 83       	std	Z+4, r25	; 0x04
    3096:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    309a:	ed b7       	in	r30, 0x3d	; 61
    309c:	fe b7       	in	r31, 0x3e	; 62
    309e:	31 96       	adiw	r30, 0x01	; 1
    30a0:	85 e9       	ldi	r24, 0x95	; 149
    30a2:	95 e0       	ldi	r25, 0x05	; 5
    30a4:	ad b7       	in	r26, 0x3d	; 61
    30a6:	be b7       	in	r27, 0x3e	; 62
    30a8:	11 96       	adiw	r26, 0x01	; 1
    30aa:	8d 93       	st	X+, r24
    30ac:	9c 93       	st	X, r25
    30ae:	12 97       	sbiw	r26, 0x02	; 2
    30b0:	d8 01       	movw	r26, r16
    30b2:	1e 96       	adiw	r26, 0x0e	; 14
    30b4:	8c 91       	ld	r24, X
    30b6:	82 83       	std	Z+2, r24	; 0x02
    30b8:	13 82       	std	Z+3, r1	; 0x03
    30ba:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    30be:	0f 92       	push	r0
    30c0:	0f 92       	push	r0
    30c2:	8e e5       	ldi	r24, 0x5E	; 94
    30c4:	95 e0       	ldi	r25, 0x05	; 5
    30c6:	ed b7       	in	r30, 0x3d	; 61
    30c8:	fe b7       	in	r31, 0x3e	; 62
    30ca:	81 83       	std	Z+1, r24	; 0x01
    30cc:	92 83       	std	Z+2, r25	; 0x02
    30ce:	f8 01       	movw	r30, r16
    30d0:	85 89       	ldd	r24, Z+21	; 0x15
    30d2:	96 89       	ldd	r25, Z+22	; 0x16
    30d4:	a7 89       	ldd	r26, Z+23	; 0x17
    30d6:	b0 8d       	ldd	r27, Z+24	; 0x18
    30d8:	ed b7       	in	r30, 0x3d	; 61
    30da:	fe b7       	in	r31, 0x3e	; 62
    30dc:	83 83       	std	Z+3, r24	; 0x03
    30de:	94 83       	std	Z+4, r25	; 0x04
    30e0:	a5 83       	std	Z+5, r26	; 0x05
    30e2:	b6 83       	std	Z+6, r27	; 0x06
    30e4:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    30e8:	8b e2       	ldi	r24, 0x2B	; 43
    30ea:	95 e0       	ldi	r25, 0x05	; 5
    30ec:	ad b7       	in	r26, 0x3d	; 61
    30ee:	be b7       	in	r27, 0x3e	; 62
    30f0:	11 96       	adiw	r26, 0x01	; 1
    30f2:	8d 93       	st	X+, r24
    30f4:	9c 93       	st	X, r25
    30f6:	12 97       	sbiw	r26, 0x02	; 2
    30f8:	f8 01       	movw	r30, r16
    30fa:	81 8d       	ldd	r24, Z+25	; 0x19
    30fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    30fe:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3100:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3102:	ed b7       	in	r30, 0x3d	; 61
    3104:	fe b7       	in	r31, 0x3e	; 62
    3106:	83 83       	std	Z+3, r24	; 0x03
    3108:	94 83       	std	Z+4, r25	; 0x04
    310a:	a5 83       	std	Z+5, r26	; 0x05
    310c:	b6 83       	std	Z+6, r27	; 0x06
    310e:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    3112:	88 ef       	ldi	r24, 0xF8	; 248
    3114:	94 e0       	ldi	r25, 0x04	; 4
    3116:	ad b7       	in	r26, 0x3d	; 61
    3118:	be b7       	in	r27, 0x3e	; 62
    311a:	11 96       	adiw	r26, 0x01	; 1
    311c:	8d 93       	st	X+, r24
    311e:	9c 93       	st	X, r25
    3120:	12 97       	sbiw	r26, 0x02	; 2
    3122:	f8 01       	movw	r30, r16
    3124:	85 8d       	ldd	r24, Z+29	; 0x1d
    3126:	96 8d       	ldd	r25, Z+30	; 0x1e
    3128:	a7 8d       	ldd	r26, Z+31	; 0x1f
    312a:	b0 a1       	ldd	r27, Z+32	; 0x20
    312c:	ed b7       	in	r30, 0x3d	; 61
    312e:	fe b7       	in	r31, 0x3e	; 62
    3130:	83 83       	std	Z+3, r24	; 0x03
    3132:	94 83       	std	Z+4, r25	; 0x04
    3134:	a5 83       	std	Z+5, r26	; 0x05
    3136:	b6 83       	std	Z+6, r27	; 0x06
    3138:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    313c:	0f 90       	pop	r0
    313e:	0f 90       	pop	r0
    3140:	ed b7       	in	r30, 0x3d	; 61
    3142:	fe b7       	in	r31, 0x3e	; 62
    3144:	31 96       	adiw	r30, 0x01	; 1
    3146:	87 ec       	ldi	r24, 0xC7	; 199
    3148:	94 e0       	ldi	r25, 0x04	; 4
    314a:	ad b7       	in	r26, 0x3d	; 61
    314c:	be b7       	in	r27, 0x3e	; 62
    314e:	11 96       	adiw	r26, 0x01	; 1
    3150:	8d 93       	st	X+, r24
    3152:	9c 93       	st	X, r25
    3154:	12 97       	sbiw	r26, 0x02	; 2
    3156:	d8 01       	movw	r26, r16
    3158:	95 96       	adiw	r26, 0x25	; 37
    315a:	8c 91       	ld	r24, X
    315c:	82 83       	std	Z+2, r24	; 0x02
    315e:	13 82       	std	Z+3, r1	; 0x03
    3160:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    3164:	ed b7       	in	r30, 0x3d	; 61
    3166:	fe b7       	in	r31, 0x3e	; 62
    3168:	31 96       	adiw	r30, 0x01	; 1
    316a:	86 e9       	ldi	r24, 0x96	; 150
    316c:	94 e0       	ldi	r25, 0x04	; 4
    316e:	ad b7       	in	r26, 0x3d	; 61
    3170:	be b7       	in	r27, 0x3e	; 62
    3172:	11 96       	adiw	r26, 0x01	; 1
    3174:	8d 93       	st	X+, r24
    3176:	9c 93       	st	X, r25
    3178:	12 97       	sbiw	r26, 0x02	; 2
    317a:	d8 01       	movw	r26, r16
    317c:	1f 96       	adiw	r26, 0x0f	; 15
    317e:	8c 91       	ld	r24, X
    3180:	82 83       	std	Z+2, r24	; 0x02
    3182:	13 82       	std	Z+3, r1	; 0x03
    3184:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    3188:	ed b7       	in	r30, 0x3d	; 61
    318a:	fe b7       	in	r31, 0x3e	; 62
    318c:	31 96       	adiw	r30, 0x01	; 1
    318e:	86 e6       	ldi	r24, 0x66	; 102
    3190:	94 e0       	ldi	r25, 0x04	; 4
    3192:	ad b7       	in	r26, 0x3d	; 61
    3194:	be b7       	in	r27, 0x3e	; 62
    3196:	11 96       	adiw	r26, 0x01	; 1
    3198:	8d 93       	st	X+, r24
    319a:	9c 93       	st	X, r25
    319c:	12 97       	sbiw	r26, 0x02	; 2
    319e:	d8 01       	movw	r26, r16
    31a0:	50 96       	adiw	r26, 0x10	; 16
    31a2:	8c 91       	ld	r24, X
    31a4:	82 83       	std	Z+2, r24	; 0x02
    31a6:	13 82       	std	Z+3, r1	; 0x03
    31a8:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    31ac:	0f 92       	push	r0
    31ae:	0f 92       	push	r0
    31b0:	82 e3       	ldi	r24, 0x32	; 50
    31b2:	94 e0       	ldi	r25, 0x04	; 4
    31b4:	ed b7       	in	r30, 0x3d	; 61
    31b6:	fe b7       	in	r31, 0x3e	; 62
    31b8:	81 83       	std	Z+1, r24	; 0x01
    31ba:	92 83       	std	Z+2, r25	; 0x02
    31bc:	f8 01       	movw	r30, r16
    31be:	81 a1       	ldd	r24, Z+33	; 0x21
    31c0:	92 a1       	ldd	r25, Z+34	; 0x22
    31c2:	a3 a1       	ldd	r26, Z+35	; 0x23
    31c4:	b4 a1       	ldd	r27, Z+36	; 0x24
    31c6:	ed b7       	in	r30, 0x3d	; 61
    31c8:	fe b7       	in	r31, 0x3e	; 62
    31ca:	83 83       	std	Z+3, r24	; 0x03
    31cc:	94 83       	std	Z+4, r25	; 0x04
    31ce:	a5 83       	std	Z+5, r26	; 0x05
    31d0:	b6 83       	std	Z+6, r27	; 0x06
    31d2:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
    31d6:	8d b7       	in	r24, 0x3d	; 61
    31d8:	9e b7       	in	r25, 0x3e	; 62
    31da:	06 96       	adiw	r24, 0x06	; 6
    31dc:	8d bf       	out	0x3d, r24	; 61
    31de:	9e bf       	out	0x3e, r25	; 62
}
    31e0:	1f 91       	pop	r17
    31e2:	0f 91       	pop	r16
    31e4:	ff 90       	pop	r15
    31e6:	ef 90       	pop	r14
    31e8:	08 95       	ret

000031ea <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    31ea:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    31ec:	00 d0       	rcall	.+0      	; 0x31ee <cfg_dump+0x4>
    31ee:	0f 92       	push	r0
    31f0:	ed b7       	in	r30, 0x3d	; 61
    31f2:	fe b7       	in	r31, 0x3e	; 62
    31f4:	31 96       	adiw	r30, 0x01	; 1
    31f6:	8c ef       	ldi	r24, 0xFC	; 252
    31f8:	96 e0       	ldi	r25, 0x06	; 6
    31fa:	ad b7       	in	r26, 0x3d	; 61
    31fc:	be b7       	in	r27, 0x3e	; 62
    31fe:	11 96       	adiw	r26, 0x01	; 1
    3200:	8d 93       	st	X+, r24
    3202:	9c 93       	st	X, r25
    3204:	12 97       	sbiw	r26, 0x02	; 2
    3206:	80 91 b8 24 	lds	r24, 0x24B8
    320a:	82 83       	std	Z+2, r24	; 0x02
    320c:	13 82       	std	Z+3, r1	; 0x03
    320e:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    3212:	0f 90       	pop	r0
    3214:	0f 90       	pop	r0
    3216:	85 ed       	ldi	r24, 0xD5	; 213
    3218:	96 e0       	ldi	r25, 0x06	; 6
    321a:	ed b7       	in	r30, 0x3d	; 61
    321c:	fe b7       	in	r31, 0x3e	; 62
    321e:	81 83       	std	Z+1, r24	; 0x01
    3220:	92 83       	std	Z+2, r25	; 0x02
    3222:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    3226:	00 d0       	rcall	.+0      	; 0x3228 <cfg_dump+0x3e>
    3228:	0f 92       	push	r0
    322a:	8b ea       	ldi	r24, 0xAB	; 171
    322c:	96 e0       	ldi	r25, 0x06	; 6
    322e:	ad b7       	in	r26, 0x3d	; 61
    3230:	be b7       	in	r27, 0x3e	; 62
    3232:	11 96       	adiw	r26, 0x01	; 1
    3234:	8d 93       	st	X+, r24
    3236:	9c 93       	st	X, r25
    3238:	12 97       	sbiw	r26, 0x02	; 2
    323a:	80 91 ba 24 	lds	r24, 0x24BA
    323e:	90 91 bb 24 	lds	r25, 0x24BB
    3242:	a0 91 bc 24 	lds	r26, 0x24BC
    3246:	b0 91 bd 24 	lds	r27, 0x24BD
    324a:	ed b7       	in	r30, 0x3d	; 61
    324c:	fe b7       	in	r31, 0x3e	; 62
    324e:	83 83       	std	Z+3, r24	; 0x03
    3250:	94 83       	std	Z+4, r25	; 0x04
    3252:	a5 83       	std	Z+5, r26	; 0x05
    3254:	b6 83       	std	Z+6, r27	; 0x06
    3256:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    325a:	81 e8       	ldi	r24, 0x81	; 129
    325c:	96 e0       	ldi	r25, 0x06	; 6
    325e:	ad b7       	in	r26, 0x3d	; 61
    3260:	be b7       	in	r27, 0x3e	; 62
    3262:	11 96       	adiw	r26, 0x01	; 1
    3264:	8d 93       	st	X+, r24
    3266:	9c 93       	st	X, r25
    3268:	12 97       	sbiw	r26, 0x02	; 2
    326a:	80 91 c2 24 	lds	r24, 0x24C2
    326e:	90 91 c3 24 	lds	r25, 0x24C3
    3272:	a0 91 c4 24 	lds	r26, 0x24C4
    3276:	b0 91 c5 24 	lds	r27, 0x24C5
    327a:	ed b7       	in	r30, 0x3d	; 61
    327c:	fe b7       	in	r31, 0x3e	; 62
    327e:	83 83       	std	Z+3, r24	; 0x03
    3280:	94 83       	std	Z+4, r25	; 0x04
    3282:	a5 83       	std	Z+5, r26	; 0x05
    3284:	b6 83       	std	Z+6, r27	; 0x06
    3286:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    328a:	86 e5       	ldi	r24, 0x56	; 86
    328c:	96 e0       	ldi	r25, 0x06	; 6
    328e:	ad b7       	in	r26, 0x3d	; 61
    3290:	be b7       	in	r27, 0x3e	; 62
    3292:	11 96       	adiw	r26, 0x01	; 1
    3294:	8d 93       	st	X+, r24
    3296:	9c 93       	st	X, r25
    3298:	12 97       	sbiw	r26, 0x02	; 2
    329a:	80 91 be 24 	lds	r24, 0x24BE
    329e:	90 91 bf 24 	lds	r25, 0x24BF
    32a2:	a0 91 c0 24 	lds	r26, 0x24C0
    32a6:	b0 91 c1 24 	lds	r27, 0x24C1
    32aa:	ed b7       	in	r30, 0x3d	; 61
    32ac:	fe b7       	in	r31, 0x3e	; 62
    32ae:	83 83       	std	Z+3, r24	; 0x03
    32b0:	94 83       	std	Z+4, r25	; 0x04
    32b2:	a5 83       	std	Z+5, r26	; 0x05
    32b4:	b6 83       	std	Z+6, r27	; 0x06
    32b6:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
    32ba:	10 e0       	ldi	r17, 0x00	; 0
    32bc:	8d b7       	in	r24, 0x3d	; 61
    32be:	9e b7       	in	r25, 0x3e	; 62
    32c0:	06 96       	adiw	r24, 0x06	; 6
    32c2:	8d bf       	out	0x3d, r24	; 61
    32c4:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
		_cfg_dump_axis(axis);
    32c6:	81 2f       	mov	r24, r17
    32c8:	0e 94 08 18 	call	0x3010	; 0x3010 <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    32cc:	1f 5f       	subi	r17, 0xFF	; 255
    32ce:	14 30       	cpi	r17, 0x04	; 4
    32d0:	d1 f7       	brne	.-12     	; 0x32c6 <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    32d2:	1f 91       	pop	r17
    32d4:	08 95       	ret

000032d6 <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	68 eb       	ldi	r22, 0xB8	; 184
    32dc:	74 e2       	ldi	r23, 0x24	; 36
    32de:	4e e6       	ldi	r20, 0x6E	; 110
    32e0:	50 e0       	ldi	r21, 0x00	; 0
    32e2:	0e 94 6d 2d 	call	0x5ada	; 0x5ada <memcpy_to_eeprom_with_checksum>
}
    32e6:	08 95       	ret

000032e8 <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	0e 94 bf 2c 	call	0x597e	; 0x597e <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    32f0:	84 36       	cpi	r24, 0x64	; 100
    32f2:	19 f0       	breq	.+6      	; 0x32fa <cfg_read+0x12>
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	0d c0       	rjmp	.+26     	; 0x3314 <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    32fa:	88 eb       	ldi	r24, 0xB8	; 184
    32fc:	94 e2       	ldi	r25, 0x24	; 36
    32fe:	60 e0       	ldi	r22, 0x00	; 0
    3300:	70 e0       	ldi	r23, 0x00	; 0
    3302:	4e e6       	ldi	r20, 0x6E	; 110
    3304:	50 e0       	ldi	r21, 0x00	; 0
    3306:	0e 94 c9 2c 	call	0x5992	; 0x5992 <memcpy_from_eeprom_with_checksum>
    330a:	00 97       	sbiw	r24, 0x00	; 0
    330c:	11 f0       	breq	.+4      	; 0x3312 <cfg_read+0x2a>
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    3314:	c9 01       	movw	r24, r18
    3316:	08 95       	ret

00003318 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    3318:	cf 92       	push	r12
    331a:	df 92       	push	r13
    331c:	ef 92       	push	r14
    331e:	ff 92       	push	r15
    3320:	1f 93       	push	r17
    3322:	df 93       	push	r29
    3324:	cf 93       	push	r28
    3326:	0f 92       	push	r0
    3328:	0f 92       	push	r0
    332a:	cd b7       	in	r28, 0x3d	; 61
    332c:	de b7       	in	r29, 0x3e	; 62
    332e:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    3330:	19 82       	std	Y+1, r1	; 0x01
    3332:	1a 82       	std	Y+2, r1	; 0x02
    3334:	cc 24       	eor	r12, r12
    3336:	dd 24       	eor	r13, r13
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	2b c0       	rjmp	.+86     	; 0x3394 <cfg_parse+0x7c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
		if (c == '=') {							// handle separator
    333e:	9d 33       	cpi	r25, 0x3D	; 61
    3340:	49 f4       	brne	.+18     	; 0x3354 <cfg_parse+0x3c>
			text[j++] = 0;						// terminate tag at separator
    3342:	f7 01       	movw	r30, r14
    3344:	e2 0f       	add	r30, r18
    3346:	f1 1d       	adc	r31, r1
    3348:	10 82       	st	Z, r1
    334a:	2f 5f       	subi	r18, 0xFF	; 255
			val = &text[j];						// new string starts at value
    334c:	67 01       	movw	r12, r14
    334e:	c2 0e       	add	r12, r18
    3350:	d1 1c       	adc	r13, r1
    3352:	20 c0       	rjmp	.+64     	; 0x3394 <cfg_parse+0x7c>
		} else if ( (c == '-') || 				// pass special characters
    3354:	9d 32       	cpi	r25, 0x2D	; 45
    3356:	c9 f0       	breq	.+50     	; 0x338a <cfg_parse+0x72>
    3358:	9b 32       	cpi	r25, 0x2B	; 43
    335a:	b9 f0       	breq	.+46     	; 0x338a <cfg_parse+0x72>
    335c:	9e 32       	cpi	r25, 0x2E	; 46
    335e:	a9 f0       	breq	.+42     	; 0x338a <cfg_parse+0x72>
    3360:	9f 33       	cpi	r25, 0x3F	; 63
    3362:	99 f0       	breq	.+38     	; 0x338a <cfg_parse+0x72>
    3364:	98 32       	cpi	r25, 0x28	; 40
    3366:	89 f0       	breq	.+34     	; 0x338a <cfg_parse+0x72>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'a' && c <= 'z') {		// convert lower to upper
    3368:	89 2f       	mov	r24, r25
    336a:	81 56       	subi	r24, 0x61	; 97
    336c:	8a 31       	cpi	r24, 0x1A	; 26
    336e:	28 f4       	brcc	.+10     	; 0x337a <cfg_parse+0x62>
			text[j++] = c-'a'+'A';
    3370:	f7 01       	movw	r30, r14
    3372:	e2 0f       	add	r30, r18
    3374:	f1 1d       	adc	r31, r1
    3376:	90 52       	subi	r25, 0x20	; 32
    3378:	0b c0       	rjmp	.+22     	; 0x3390 <cfg_parse+0x78>
		} else if (c >= 'A' && c <= 'Z') {		// pass upper case letters
    337a:	89 2f       	mov	r24, r25
    337c:	81 54       	subi	r24, 0x41	; 65
    337e:	8a 31       	cpi	r24, 0x1A	; 26
    3380:	20 f0       	brcs	.+8      	; 0x338a <cfg_parse+0x72>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
    3382:	89 2f       	mov	r24, r25
    3384:	80 53       	subi	r24, 0x30	; 48
    3386:	8a 30       	cpi	r24, 0x0A	; 10
    3388:	28 f4       	brcc	.+10     	; 0x3394 <cfg_parse+0x7c>
			text[j++] = c;
    338a:	f7 01       	movw	r30, r14
    338c:	e2 0f       	add	r30, r18
    338e:	f1 1d       	adc	r31, r1
    3390:	90 83       	st	Z, r25
    3392:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
    3394:	f7 01       	movw	r30, r14
    3396:	e3 0f       	add	r30, r19
    3398:	f1 1d       	adc	r31, r1
    339a:	90 81       	ld	r25, Z
    339c:	3f 5f       	subi	r19, 0xFF	; 255
    339e:	99 23       	and	r25, r25
    33a0:	71 f6       	brne	.-100    	; 0x333e <cfg_parse+0x26>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// terminate line
    33a2:	f7 01       	movw	r30, r14
    33a4:	e2 0f       	add	r30, r18
    33a6:	f1 1d       	adc	r31, r1
    33a8:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    33aa:	2f 5f       	subi	r18, 0xFF	; 255
    33ac:	c7 01       	movw	r24, r14
    33ae:	82 0f       	add	r24, r18
    33b0:	91 1d       	adc	r25, r1
    33b2:	89 83       	std	Y+1, r24	; 0x01
    33b4:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    33b6:	10 92 b9 24 	sts	0x24B9, r1
	switch (text[0]) {
    33ba:	f7 01       	movw	r30, r14
    33bc:	80 81       	ld	r24, Z
    33be:	81 35       	cpi	r24, 0x51	; 81
    33c0:	d1 f0       	breq	.+52     	; 0x33f6 <cfg_parse+0xde>
    33c2:	82 35       	cpi	r24, 0x52	; 82
    33c4:	60 f4       	brcc	.+24     	; 0x33de <cfg_parse+0xc6>
    33c6:	81 34       	cpi	r24, 0x41	; 65
    33c8:	59 f1       	breq	.+86     	; 0x3420 <cfg_parse+0x108>
    33ca:	82 34       	cpi	r24, 0x42	; 66
    33cc:	28 f4       	brcc	.+10     	; 0x33d8 <cfg_parse+0xc0>
    33ce:	88 32       	cpi	r24, 0x28	; 40
    33d0:	11 f1       	breq	.+68     	; 0x3416 <cfg_parse+0xfe>
    33d2:	8f 33       	cpi	r24, 0x3F	; 63
    33d4:	39 f5       	brne	.+78     	; 0x3424 <cfg_parse+0x10c>
    33d6:	0c c0       	rjmp	.+24     	; 0x33f0 <cfg_parse+0xd8>
    33d8:	8d 34       	cpi	r24, 0x4D	; 77
    33da:	21 f5       	brne	.+72     	; 0x3424 <cfg_parse+0x10c>
    33dc:	0e c0       	rjmp	.+28     	; 0x33fa <cfg_parse+0xe2>
    33de:	89 35       	cpi	r24, 0x59	; 89
    33e0:	29 f0       	breq	.+10     	; 0x33ec <cfg_parse+0xd4>
    33e2:	8a 35       	cpi	r24, 0x5A	; 90
    33e4:	d9 f0       	breq	.+54     	; 0x341c <cfg_parse+0x104>
    33e6:	88 35       	cpi	r24, 0x58	; 88
    33e8:	e9 f4       	brne	.+58     	; 0x3424 <cfg_parse+0x10c>
    33ea:	1f c0       	rjmp	.+62     	; 0x342a <cfg_parse+0x112>
    33ec:	11 e0       	ldi	r17, 0x01	; 1
    33ee:	1e c0       	rjmp	.+60     	; 0x342c <cfg_parse+0x114>
		case '?': cfg_dump(); status (TG_OK); break;
    33f0:	0e 94 f5 18 	call	0x31ea	; 0x31ea <cfg_dump>
    33f4:	10 c0       	rjmp	.+32     	; 0x3416 <cfg_parse+0xfe>
		case '(': status (TG_OK);	break;			// ignore comment lines
		case 'Q': status (TG_QUIT); break;
    33f6:	83 e0       	ldi	r24, 0x03	; 3
    33f8:	16 c0       	rjmp	.+44     	; 0x3426 <cfg_parse+0x10e>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    33fa:	c6 01       	movw	r24, r12
    33fc:	be 01       	movw	r22, r28
    33fe:	6f 5f       	subi	r22, 0xFF	; 255
    3400:	7f 4f       	sbci	r23, 0xFF	; 255
    3402:	0e 94 cf 46 	call	0x8d9e	; 0x8d9e <strtod>
    3406:	60 93 ba 24 	sts	0x24BA, r22
    340a:	70 93 bb 24 	sts	0x24BB, r23
    340e:	80 93 bc 24 	sts	0x24BC, r24
    3412:	90 93 bd 24 	sts	0x24BD, r25
				  status(TG_OK); 
    3416:	10 92 b9 24 	sts	0x24B9, r1
    341a:	07 c0       	rjmp	.+14     	; 0x342a <cfg_parse+0x112>
				  break;
    341c:	12 e0       	ldi	r17, 0x02	; 2
    341e:	06 c0       	rjmp	.+12     	; 0x342c <cfg_parse+0x114>

		case 'X': axis = X; break;
		case 'Y': axis = Y; break;
		case 'Z': axis = Z; break;
    3420:	13 e0       	ldi	r17, 0x03	; 3
    3422:	04 c0       	rjmp	.+8      	; 0x342c <cfg_parse+0x114>
		case 'A': axis = A; break;

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    3424:	89 e0       	ldi	r24, 0x09	; 9
    3426:	80 93 b9 24 	sts	0x24B9, r24
    342a:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    342c:	80 91 b9 24 	lds	r24, 0x24B9
    3430:	88 23       	and	r24, r24
    3432:	09 f0       	breq	.+2      	; 0x3436 <cfg_parse+0x11e>
    3434:	ee c0       	rjmp	.+476    	; 0x3612 <cfg_parse+0x2fa>
		status(TG_OK);							// pre-emptive setting
    3436:	10 92 b9 24 	sts	0x24B9, r1
		switch (text[1]) {
    343a:	f7 01       	movw	r30, r14
    343c:	81 81       	ldd	r24, Z+1	; 0x01
    343e:	8c 34       	cpi	r24, 0x4C	; 76
    3440:	09 f4       	brne	.+2      	; 0x3444 <cfg_parse+0x12c>
    3442:	b8 c0       	rjmp	.+368    	; 0x35b4 <cfg_parse+0x29c>
    3444:	8d 34       	cpi	r24, 0x4D	; 77
    3446:	30 f4       	brcc	.+12     	; 0x3454 <cfg_parse+0x13c>
    3448:	84 34       	cpi	r24, 0x44	; 68
    344a:	a9 f1       	breq	.+106    	; 0x34b6 <cfg_parse+0x19e>
    344c:	86 34       	cpi	r24, 0x46	; 70
    344e:	09 f0       	breq	.+2      	; 0x3452 <cfg_parse+0x13a>
    3450:	dd c0       	rjmp	.+442    	; 0x360c <cfg_parse+0x2f4>
    3452:	1d c0       	rjmp	.+58     	; 0x348e <cfg_parse+0x176>
    3454:	80 35       	cpi	r24, 0x50	; 80
    3456:	09 f4       	brne	.+2      	; 0x345a <cfg_parse+0x142>
    3458:	47 c0       	rjmp	.+142    	; 0x34e8 <cfg_parse+0x1d0>
    345a:	83 35       	cpi	r24, 0x53	; 83
    345c:	21 f0       	breq	.+8      	; 0x3466 <cfg_parse+0x14e>
    345e:	8d 34       	cpi	r24, 0x4D	; 77
    3460:	09 f0       	breq	.+2      	; 0x3464 <cfg_parse+0x14c>
    3462:	d4 c0       	rjmp	.+424    	; 0x360c <cfg_parse+0x2f4>
    3464:	58 c0       	rjmp	.+176    	; 0x3516 <cfg_parse+0x1fe>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    3466:	c6 01       	movw	r24, r12
    3468:	0e 94 3d 48 	call	0x907a	; 0x907a <atoi>
    346c:	21 2f       	mov	r18, r17
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	f9 01       	movw	r30, r18
    3472:	ee 0f       	add	r30, r30
    3474:	ff 1f       	adc	r31, r31
    3476:	e2 0f       	add	r30, r18
    3478:	f3 1f       	adc	r31, r19
    347a:	53 e0       	ldi	r21, 0x03	; 3
    347c:	ee 0f       	add	r30, r30
    347e:	ff 1f       	adc	r31, r31
    3480:	5a 95       	dec	r21
    3482:	e1 f7       	brne	.-8      	; 0x347c <cfg_parse+0x164>
    3484:	e8 54       	subi	r30, 0x48	; 72
    3486:	fb 4d       	sbci	r31, 0xDB	; 219
    3488:	81 8b       	std	Z+17, r24	; 0x11
    348a:	92 8b       	std	Z+18, r25	; 0x12
    348c:	c2 c0       	rjmp	.+388    	; 0x3612 <cfg_parse+0x2fa>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    348e:	c6 01       	movw	r24, r12
    3490:	0e 94 3d 48 	call	0x907a	; 0x907a <atoi>
    3494:	21 2f       	mov	r18, r17
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	f9 01       	movw	r30, r18
    349a:	ee 0f       	add	r30, r30
    349c:	ff 1f       	adc	r31, r31
    349e:	e2 0f       	add	r30, r18
    34a0:	f3 1f       	adc	r31, r19
    34a2:	23 e0       	ldi	r18, 0x03	; 3
    34a4:	ee 0f       	add	r30, r30
    34a6:	ff 1f       	adc	r31, r31
    34a8:	2a 95       	dec	r18
    34aa:	e1 f7       	brne	.-8      	; 0x34a4 <cfg_parse+0x18c>
    34ac:	e8 54       	subi	r30, 0x48	; 72
    34ae:	fb 4d       	sbci	r31, 0xDB	; 219
    34b0:	83 8b       	std	Z+19, r24	; 0x13
    34b2:	94 8b       	std	Z+20, r25	; 0x14
    34b4:	ae c0       	rjmp	.+348    	; 0x3612 <cfg_parse+0x2fa>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    34b6:	c6 01       	movw	r24, r12
    34b8:	be 01       	movw	r22, r28
    34ba:	6f 5f       	subi	r22, 0xFF	; 255
    34bc:	7f 4f       	sbci	r23, 0xFF	; 255
    34be:	0e 94 cf 46 	call	0x8d9e	; 0x8d9e <strtod>
    34c2:	21 2f       	mov	r18, r17
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	f9 01       	movw	r30, r18
    34c8:	ee 0f       	add	r30, r30
    34ca:	ff 1f       	adc	r31, r31
    34cc:	e2 0f       	add	r30, r18
    34ce:	f3 1f       	adc	r31, r19
    34d0:	b3 e0       	ldi	r27, 0x03	; 3
    34d2:	ee 0f       	add	r30, r30
    34d4:	ff 1f       	adc	r31, r31
    34d6:	ba 95       	dec	r27
    34d8:	e1 f7       	brne	.-8      	; 0x34d2 <cfg_parse+0x1ba>
    34da:	e8 54       	subi	r30, 0x48	; 72
    34dc:	fb 4d       	sbci	r31, 0xDB	; 219
    34de:	65 8b       	std	Z+21, r22	; 0x15
    34e0:	76 8b       	std	Z+22, r23	; 0x16
    34e2:	87 8b       	std	Z+23, r24	; 0x17
    34e4:	90 8f       	std	Z+24, r25	; 0x18
    34e6:	95 c0       	rjmp	.+298    	; 0x3612 <cfg_parse+0x2fa>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    34e8:	c6 01       	movw	r24, r12
    34ea:	0e 94 3d 48 	call	0x907a	; 0x907a <atoi>
    34ee:	68 2f       	mov	r22, r24
    34f0:	81 2f       	mov	r24, r17
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	fc 01       	movw	r30, r24
    34f6:	ee 0f       	add	r30, r30
    34f8:	ff 1f       	adc	r31, r31
    34fa:	e8 0f       	add	r30, r24
    34fc:	f9 1f       	adc	r31, r25
    34fe:	73 e0       	ldi	r23, 0x03	; 3
    3500:	ee 0f       	add	r30, r30
    3502:	ff 1f       	adc	r31, r31
    3504:	7a 95       	dec	r23
    3506:	e1 f7       	brne	.-8      	; 0x3500 <cfg_parse+0x1e8>
    3508:	e8 54       	subi	r30, 0x48	; 72
    350a:	fb 4d       	sbci	r31, 0xDB	; 219
    350c:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    350e:	81 2f       	mov	r24, r17
    3510:	0e 94 ab 24 	call	0x4956	; 0x4956 <st_set_polarity>
    3514:	7e c0       	rjmp	.+252    	; 0x3612 <cfg_parse+0x2fa>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    3516:	f7 01       	movw	r30, r14
    3518:	82 81       	ldd	r24, Z+2	; 0x02
    351a:	89 34       	cpi	r24, 0x49	; 73
    351c:	99 f4       	brne	.+38     	; 0x3544 <cfg_parse+0x22c>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    351e:	c6 01       	movw	r24, r12
    3520:	0e 94 3d 48 	call	0x907a	; 0x907a <atoi>
    3524:	21 2f       	mov	r18, r17
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	f9 01       	movw	r30, r18
    352a:	ee 0f       	add	r30, r30
    352c:	ff 1f       	adc	r31, r31
    352e:	e2 0f       	add	r30, r18
    3530:	f3 1f       	adc	r31, r19
    3532:	53 e0       	ldi	r21, 0x03	; 3
    3534:	ee 0f       	add	r30, r30
    3536:	ff 1f       	adc	r31, r31
    3538:	5a 95       	dec	r21
    353a:	e1 f7       	brne	.-8      	; 0x3534 <cfg_parse+0x21c>
    353c:	e8 54       	subi	r30, 0x48	; 72
    353e:	fb 4d       	sbci	r31, 0xDB	; 219
    3540:	86 87       	std	Z+14, r24	; 0x0e
    3542:	67 c0       	rjmp	.+206    	; 0x3612 <cfg_parse+0x2fa>
				} else if (text[3] == 'R') {
    3544:	f7 01       	movw	r30, r14
    3546:	83 81       	ldd	r24, Z+3	; 0x03
    3548:	82 35       	cpi	r24, 0x52	; 82
    354a:	c9 f4       	brne	.+50     	; 0x357e <cfg_parse+0x266>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    354c:	c6 01       	movw	r24, r12
    354e:	be 01       	movw	r22, r28
    3550:	6f 5f       	subi	r22, 0xFF	; 255
    3552:	7f 4f       	sbci	r23, 0xFF	; 255
    3554:	0e 94 cf 46 	call	0x8d9e	; 0x8d9e <strtod>
    3558:	21 2f       	mov	r18, r17
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	f9 01       	movw	r30, r18
    355e:	ee 0f       	add	r30, r30
    3560:	ff 1f       	adc	r31, r31
    3562:	e2 0f       	add	r30, r18
    3564:	f3 1f       	adc	r31, r19
    3566:	13 e0       	ldi	r17, 0x03	; 3
    3568:	ee 0f       	add	r30, r30
    356a:	ff 1f       	adc	r31, r31
    356c:	1a 95       	dec	r17
    356e:	e1 f7       	brne	.-8      	; 0x3568 <cfg_parse+0x250>
    3570:	e8 54       	subi	r30, 0x48	; 72
    3572:	fb 4d       	sbci	r31, 0xDB	; 219
    3574:	61 8f       	std	Z+25, r22	; 0x19
    3576:	72 8f       	std	Z+26, r23	; 0x1a
    3578:	83 8f       	std	Z+27, r24	; 0x1b
    357a:	94 8f       	std	Z+28, r25	; 0x1c
    357c:	4a c0       	rjmp	.+148    	; 0x3612 <cfg_parse+0x2fa>
				} else if (text[3] == 'T') {
    357e:	84 35       	cpi	r24, 0x54	; 84
    3580:	c9 f4       	brne	.+50     	; 0x35b4 <cfg_parse+0x29c>
					CFG(axis).mm_travel = strtod(val, &end); break;
    3582:	c6 01       	movw	r24, r12
    3584:	be 01       	movw	r22, r28
    3586:	6f 5f       	subi	r22, 0xFF	; 255
    3588:	7f 4f       	sbci	r23, 0xFF	; 255
    358a:	0e 94 cf 46 	call	0x8d9e	; 0x8d9e <strtod>
    358e:	21 2f       	mov	r18, r17
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	f9 01       	movw	r30, r18
    3594:	ee 0f       	add	r30, r30
    3596:	ff 1f       	adc	r31, r31
    3598:	e2 0f       	add	r30, r18
    359a:	f3 1f       	adc	r31, r19
    359c:	a3 e0       	ldi	r26, 0x03	; 3
    359e:	ee 0f       	add	r30, r30
    35a0:	ff 1f       	adc	r31, r31
    35a2:	aa 95       	dec	r26
    35a4:	e1 f7       	brne	.-8      	; 0x359e <cfg_parse+0x286>
    35a6:	e8 54       	subi	r30, 0x48	; 72
    35a8:	fb 4d       	sbci	r31, 0xDB	; 219
    35aa:	65 8f       	std	Z+29, r22	; 0x1d
    35ac:	76 8f       	std	Z+30, r23	; 0x1e
    35ae:	87 8f       	std	Z+31, r24	; 0x1f
    35b0:	90 a3       	std	Z+32, r25	; 0x20
    35b2:	2f c0       	rjmp	.+94     	; 0x3612 <cfg_parse+0x2fa>
				}
			case 'L': 
				if (text[2] == 'O') {
    35b4:	f7 01       	movw	r30, r14
    35b6:	82 81       	ldd	r24, Z+2	; 0x02
    35b8:	8f 34       	cpi	r24, 0x4F	; 79
    35ba:	99 f4       	brne	.+38     	; 0x35e2 <cfg_parse+0x2ca>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    35bc:	c6 01       	movw	r24, r12
    35be:	0e 94 3d 48 	call	0x907a	; 0x907a <atoi>
    35c2:	21 2f       	mov	r18, r17
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	f9 01       	movw	r30, r18
    35c8:	ee 0f       	add	r30, r30
    35ca:	ff 1f       	adc	r31, r31
    35cc:	e2 0f       	add	r30, r18
    35ce:	f3 1f       	adc	r31, r19
    35d0:	53 e0       	ldi	r21, 0x03	; 3
    35d2:	ee 0f       	add	r30, r30
    35d4:	ff 1f       	adc	r31, r31
    35d6:	5a 95       	dec	r21
    35d8:	e1 f7       	brne	.-8      	; 0x35d2 <cfg_parse+0x2ba>
    35da:	e8 54       	subi	r30, 0x48	; 72
    35dc:	fb 4d       	sbci	r31, 0xDB	; 219
    35de:	87 87       	std	Z+15, r24	; 0x0f
    35e0:	18 c0       	rjmp	.+48     	; 0x3612 <cfg_parse+0x2fa>
				} else if (text[2] == 'I') {
    35e2:	89 34       	cpi	r24, 0x49	; 73
    35e4:	99 f4       	brne	.+38     	; 0x360c <cfg_parse+0x2f4>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    35e6:	c6 01       	movw	r24, r12
    35e8:	0e 94 3d 48 	call	0x907a	; 0x907a <atoi>
    35ec:	21 2f       	mov	r18, r17
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	f9 01       	movw	r30, r18
    35f2:	ee 0f       	add	r30, r30
    35f4:	ff 1f       	adc	r31, r31
    35f6:	e2 0f       	add	r30, r18
    35f8:	f3 1f       	adc	r31, r19
    35fa:	23 e0       	ldi	r18, 0x03	; 3
    35fc:	ee 0f       	add	r30, r30
    35fe:	ff 1f       	adc	r31, r31
    3600:	2a 95       	dec	r18
    3602:	e1 f7       	brne	.-8      	; 0x35fc <cfg_parse+0x2e4>
    3604:	e8 54       	subi	r30, 0x48	; 72
    3606:	fb 4d       	sbci	r31, 0xDB	; 219
    3608:	85 a3       	std	Z+37, r24	; 0x25
    360a:	03 c0       	rjmp	.+6      	; 0x3612 <cfg_parse+0x2fa>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    360c:	89 e0       	ldi	r24, 0x09	; 9
    360e:	80 93 b9 24 	sts	0x24B9, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    3612:	80 91 b9 24 	lds	r24, 0x24B9
    3616:	b7 01       	movw	r22, r14
    3618:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
}
    361c:	80 91 b9 24 	lds	r24, 0x24B9
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	0f 90       	pop	r0
    3624:	0f 90       	pop	r0
    3626:	cf 91       	pop	r28
    3628:	df 91       	pop	r29
    362a:	1f 91       	pop	r17
    362c:	ff 90       	pop	r15
    362e:	ef 90       	pop	r14
    3630:	df 90       	pop	r13
    3632:	cf 90       	pop	r12
    3634:	08 95       	ret

00003636 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3636:	ef 92       	push	r14
    3638:	ff 92       	push	r15
    363a:	0f 93       	push	r16
    363c:	1f 93       	push	r17
    363e:	df 93       	push	r29
    3640:	cf 93       	push	r28
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
    3646:	a8 97       	sbiw	r28, 0x28	; 40
    3648:	cd bf       	out	0x3d, r28	; 61
    364a:	de bf       	out	0x3e, r29	; 62
    364c:	0b e4       	ldi	r16, 0x4B	; 75
    364e:	12 e0       	ldi	r17, 0x02	; 2
    3650:	a0 e0       	ldi	r26, 0x00	; 0
    3652:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    3654:	7e 01       	movw	r14, r28
    3656:	08 94       	sec
    3658:	e1 1c       	adc	r14, r1
    365a:	f1 1c       	adc	r15, r1
    365c:	02 c0       	rjmp	.+4      	; 0x3662 <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    365e:	0f 5f       	subi	r16, 0xFF	; 255
    3660:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    3662:	f8 01       	movw	r30, r16
    3664:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    3666:	88 23       	and	r24, r24
    3668:	89 f4       	brne	.+34     	; 0x368c <cfg_test+0x56>
			text[j] = 0;
    366a:	ce 01       	movw	r24, r28
    366c:	01 96       	adiw	r24, 0x01	; 1
    366e:	a8 0f       	add	r26, r24
    3670:	b9 1f       	adc	r27, r25
    3672:	1c 92       	st	X, r1
			cfg_parse(text);
    3674:	0e 94 8c 19 	call	0x3318	; 0x3318 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    3678:	a8 96       	adiw	r28, 0x28	; 40
    367a:	cd bf       	out	0x3d, r28	; 61
    367c:	de bf       	out	0x3e, r29	; 62
    367e:	cf 91       	pop	r28
    3680:	df 91       	pop	r29
    3682:	1f 91       	pop	r17
    3684:	0f 91       	pop	r16
    3686:	ff 90       	pop	r15
    3688:	ef 90       	pop	r14
    368a:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    368c:	8d 30       	cpi	r24, 0x0D	; 13
    368e:	21 f0       	breq	.+8      	; 0x3698 <cfg_test+0x62>
    3690:	8a 30       	cpi	r24, 0x0A	; 10
    3692:	11 f0       	breq	.+4      	; 0x3698 <cfg_test+0x62>
    3694:	8b 33       	cpi	r24, 0x3B	; 59
    3696:	49 f4       	brne	.+18     	; 0x36aa <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    3698:	ae 0d       	add	r26, r14
    369a:	bf 1d       	adc	r27, r15
    369c:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    369e:	c7 01       	movw	r24, r14
    36a0:	0e 94 8c 19 	call	0x3318	; 0x3318 <cfg_parse>
    36a4:	a0 e0       	ldi	r26, 0x00	; 0
    36a6:	b0 e0       	ldi	r27, 0x00	; 0
    36a8:	da cf       	rjmp	.-76     	; 0x365e <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    36aa:	81 32       	cpi	r24, 0x21	; 33
    36ac:	c0 f2       	brcs	.-80     	; 0x365e <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    36ae:	f7 01       	movw	r30, r14
    36b0:	ea 0f       	add	r30, r26
    36b2:	fb 1f       	adc	r31, r27
    36b4:	80 83       	st	Z, r24
    36b6:	11 96       	adiw	r26, 0x01	; 1
    36b8:	d2 cf       	rjmp	.-92     	; 0x365e <cfg_test+0x28>

000036ba <en_init>:


void en_init(void) 
{
	return;
}
    36ba:	08 95       	ret

000036bc <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
    36bc:	88 23       	and	r24, r24
    36be:	b1 f0       	breq	.+44     	; 0x36ec <en_write+0x30>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    36c0:	e0 91 b4 24 	lds	r30, 0x24B4
    36c4:	f0 91 b5 24 	lds	r31, 0x24B5
    36c8:	80 e2       	ldi	r24, 0x20	; 32
    36ca:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    36cc:	e0 91 a4 24 	lds	r30, 0x24A4
    36d0:	f0 91 a5 24 	lds	r31, 0x24A5
    36d4:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    36d6:	e0 91 94 24 	lds	r30, 0x2494
    36da:	f0 91 95 24 	lds	r31, 0x2495
    36de:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    36e0:	e0 91 84 24 	lds	r30, 0x2484
    36e4:	f0 91 85 24 	lds	r31, 0x2485
    36e8:	85 83       	std	Z+5, r24	; 0x05
    36ea:	08 95       	ret
void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36ec:	e0 91 b4 24 	lds	r30, 0x24B4
    36f0:	f0 91 b5 24 	lds	r31, 0x24B5
    36f4:	80 e2       	ldi	r24, 0x20	; 32
    36f6:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36f8:	e0 91 a4 24 	lds	r30, 0x24A4
    36fc:	f0 91 a5 24 	lds	r31, 0x24A5
    3700:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    3702:	e0 91 94 24 	lds	r30, 0x2494
    3706:	f0 91 95 24 	lds	r31, 0x2495
    370a:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    370c:	e0 91 84 24 	lds	r30, 0x2484
    3710:	f0 91 85 24 	lds	r31, 0x2485
    3714:	86 83       	std	Z+6, r24	; 0x06
    3716:	08 95       	ret

00003718 <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    3718:	0f 93       	push	r16
    371a:	df 93       	push	r29
    371c:	cf 93       	push	r28
    371e:	0f 92       	push	r0
    3720:	cd b7       	in	r28, 0x3d	; 61
    3722:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    3724:	8b ec       	ldi	r24, 0xCB	; 203
    3726:	e0 e5       	ldi	r30, 0x50	; 80
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    372c:	88 e0       	ldi	r24, 0x08	; 8
    372e:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    3732:	80 91 51 00 	lds	r24, 0x0051
    3736:	83 ff       	sbrs	r24, 3
    3738:	fc cf       	rjmp	.-8      	; 0x3732 <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    373a:	82 ec       	ldi	r24, 0xC2	; 194
    373c:	e0 e5       	ldi	r30, 0x50	; 80
    373e:	f0 e0       	ldi	r31, 0x00	; 0
    3740:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    3742:	88 e1       	ldi	r24, 0x18	; 24
    3744:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    3748:	80 91 51 00 	lds	r24, 0x0051
    374c:	84 ff       	sbrs	r24, 4
    374e:	fc cf       	rjmp	.-8      	; 0x3748 <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3750:	8f b7       	in	r24, 0x3f	; 63
    3752:	89 83       	std	Y+1, r24	; 0x01
    3754:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3756:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3758:	24 e0       	ldi	r18, 0x04	; 4
    375a:	80 e4       	ldi	r24, 0x40	; 64
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	fc 01       	movw	r30, r24
    3760:	08 ed       	ldi	r16, 0xD8	; 216
    3762:	04 bf       	out	0x34, r16	; 52
    3764:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3766:	89 81       	ldd	r24, Y+1	; 0x01
    3768:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    376a:	80 91 50 00 	lds	r24, 0x0050
    376e:	8e 7f       	andi	r24, 0xFE	; 254
    3770:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    3774:	0f 90       	pop	r0
    3776:	cf 91       	pop	r28
    3778:	df 91       	pop	r29
    377a:	0f 91       	pop	r16
    377c:	08 95       	ret

0000377e <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    377e:	0e 94 8c 1b 	call	0x3718	; 0x3718 <xmega_init_clocks>
}
    3782:	08 95       	ret

00003784 <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3784:	0f 93       	push	r16
    3786:	df 93       	push	r29
    3788:	cf 93       	push	r28
    378a:	0f 92       	push	r0
    378c:	cd b7       	in	r28, 0x3d	; 61
    378e:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3790:	2f b7       	in	r18, 0x3f	; 63
    3792:	29 83       	std	Y+1, r18	; 0x01
    3794:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3796:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3798:	fc 01       	movw	r30, r24
    379a:	08 ed       	ldi	r16, 0xD8	; 216
    379c:	04 bf       	out	0x34, r16	; 52
    379e:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	8f bf       	out	0x3f, r24	; 63
#endif
}
    37a4:	0f 90       	pop	r0
    37a6:	cf 91       	pop	r28
    37a8:	df 91       	pop	r29
    37aa:	0f 91       	pop	r16
    37ac:	08 95       	ret

000037ae <mc_motion_stop>:
 * mc_motion_stop() - stop all current motions
 */

int mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    37ae:	10 92 22 22 	sts	0x2222, r1
	ma.arc_state = MC_STATE_OFF;
    37b2:	10 92 28 25 	sts	0x2528, r1
	return (TG_OK);
}
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	08 95       	ret

000037bc <mc_go_home>:
 */

int mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    37bc:	8c e0       	ldi	r24, 0x0C	; 12
    37be:	e3 e2       	ldi	r30, 0x23	; 35
    37c0:	f2 e2       	ldi	r31, 0x22	; 34
    37c2:	df 01       	movw	r26, r30
    37c4:	1d 92       	st	X+, r1
    37c6:	8a 95       	dec	r24
    37c8:	e9 f7       	brne	.-6      	; 0x37c4 <mc_go_home+0x8>
	return (TG_OK);
}
    37ca:	80 e0       	ldi	r24, 0x00	; 0
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	08 95       	ret

000037d0 <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    37d0:	8c e0       	ldi	r24, 0x0C	; 12
    37d2:	e3 e2       	ldi	r30, 0x23	; 35
    37d4:	f2 e2       	ldi	r31, 0x22	; 34
    37d6:	df 01       	movw	r26, r30
    37d8:	1d 92       	st	X+, r1
    37da:	8a 95       	dec	r24
    37dc:	e9 f7       	brne	.-6      	; 0x37d8 <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    37de:	10 92 22 22 	sts	0x2222, r1
	ma.arc_state = MC_STATE_OFF;
    37e2:	10 92 28 25 	sts	0x2528, r1
}
    37e6:	08 95       	ret

000037e8 <mc_line_continue>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continue() 
{
    37e8:	af 92       	push	r10
    37ea:	bf 92       	push	r11
    37ec:	cf 92       	push	r12
    37ee:	df 92       	push	r13
    37f0:	ef 92       	push	r14
    37f2:	ff 92       	push	r15
    37f4:	0f 93       	push	r16
    37f6:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    37f8:	80 91 22 22 	lds	r24, 0x2222
    37fc:	88 23       	and	r24, r24
    37fe:	19 f4       	brne	.+6      	; 0x3806 <mc_line_continue+0x1e>
    3800:	22 e0       	ldi	r18, 0x02	; 2
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	30 c0       	rjmp	.+96     	; 0x3866 <mc_line_continue+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    3806:	82 e0       	ldi	r24, 0x02	; 2
    3808:	80 93 22 22 	sts	0x2222, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    380c:	0e 94 ff 30 	call	0x61fe	; 0x61fe <mv_test_move_buffer_full>
    3810:	88 23       	and	r24, r24
    3812:	19 f0       	breq	.+6      	; 0x381a <mc_line_continue+0x32>
    3814:	21 e0       	ldi	r18, 0x01	; 1
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	26 c0       	rjmp	.+76     	; 0x3866 <mc_line_continue+0x7e>
		return (TG_EAGAIN);
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    381a:	60 91 3b 22 	lds	r22, 0x223B
    381e:	70 91 3c 22 	lds	r23, 0x223C
    3822:	80 91 3d 22 	lds	r24, 0x223D
    3826:	90 91 3e 22 	lds	r25, 0x223E
    382a:	20 91 3f 22 	lds	r18, 0x223F
    382e:	30 91 40 22 	lds	r19, 0x2240
    3832:	40 91 41 22 	lds	r20, 0x2241
    3836:	50 91 42 22 	lds	r21, 0x2242
    383a:	e0 90 43 22 	lds	r14, 0x2243
    383e:	f0 90 44 22 	lds	r15, 0x2244
    3842:	00 91 45 22 	lds	r16, 0x2245
    3846:	10 91 46 22 	lds	r17, 0x2246
    384a:	a0 90 47 22 	lds	r10, 0x2247
    384e:	b0 90 48 22 	lds	r11, 0x2248
    3852:	c0 90 49 22 	lds	r12, 0x2249
    3856:	d0 90 4a 22 	lds	r13, 0x224A
    385a:	0e 94 2b 31 	call	0x6256	; 0x6256 <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    385e:	10 92 22 22 	sts	0x2222, r1
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3866:	c9 01       	movw	r24, r18
    3868:	1f 91       	pop	r17
    386a:	0f 91       	pop	r16
    386c:	ff 90       	pop	r15
    386e:	ef 90       	pop	r14
    3870:	df 90       	pop	r13
    3872:	cf 90       	pop	r12
    3874:	bf 90       	pop	r11
    3876:	af 90       	pop	r10
    3878:	08 95       	ret

0000387a <mc_dwell>:
 * NOTE: It's not necessary to set the target as this is set correctly in the Gcode. 
 */

int mc_dwell(double seconds) 
{
	mc.steps[X] = 0;
    387a:	10 92 3b 22 	sts	0x223B, r1
    387e:	10 92 3c 22 	sts	0x223C, r1
    3882:	10 92 3d 22 	sts	0x223D, r1
    3886:	10 92 3e 22 	sts	0x223E, r1
	mc.steps[Y] = 0;
    388a:	10 92 3f 22 	sts	0x223F, r1
    388e:	10 92 40 22 	sts	0x2240, r1
    3892:	10 92 41 22 	sts	0x2241, r1
    3896:	10 92 42 22 	sts	0x2242, r1
	mc.steps[Z] = 0;
    389a:	10 92 43 22 	sts	0x2243, r1
    389e:	10 92 44 22 	sts	0x2244, r1
    38a2:	10 92 45 22 	sts	0x2245, r1
    38a6:	10 92 46 22 	sts	0x2246, r1
	mc.mm_of_travel = 0;	// not actually used, but makes debug make more sense
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	40 e0       	ldi	r20, 0x00	; 0
    38b0:	50 e0       	ldi	r21, 0x00	; 0
    38b2:	20 93 4b 22 	sts	0x224B, r18
    38b6:	30 93 4c 22 	sts	0x224C, r19
    38ba:	40 93 4d 22 	sts	0x224D, r20
    38be:	50 93 4e 22 	sts	0x224E, r21
	mc.microseconds = trunc(seconds*1000000);
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	34 e2       	ldi	r19, 0x24	; 36
    38c6:	44 e7       	ldi	r20, 0x74	; 116
    38c8:	59 e4       	ldi	r21, 0x49	; 73
    38ca:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    38ce:	0e 94 38 43 	call	0x8670	; 0x8670 <__fixunssfsi>
    38d2:	60 93 47 22 	sts	0x2247, r22
    38d6:	70 93 48 22 	sts	0x2248, r23
    38da:	80 93 49 22 	sts	0x2249, r24
    38de:	90 93 4a 22 	sts	0x224A, r25
	mc.line_state = MC_STATE_NEW;
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	80 93 22 22 	sts	0x2222, r24
	return (mc_line_continue());
    38e8:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <mc_line_continue>
}
    38ec:	08 95       	ret

000038ee <mc_line>:
/* 
 * mc_line() - queue a line move; non-blocking version
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    38ee:	2f 92       	push	r2
    38f0:	3f 92       	push	r3
    38f2:	4f 92       	push	r4
    38f4:	5f 92       	push	r5
    38f6:	6f 92       	push	r6
    38f8:	7f 92       	push	r7
    38fa:	8f 92       	push	r8
    38fc:	9f 92       	push	r9
    38fe:	af 92       	push	r10
    3900:	bf 92       	push	r11
    3902:	cf 92       	push	r12
    3904:	df 92       	push	r13
    3906:	ef 92       	push	r14
    3908:	ff 92       	push	r15
    390a:	0f 93       	push	r16
    390c:	1f 93       	push	r17
    390e:	df 93       	push	r29
    3910:	cf 93       	push	r28
    3912:	cd b7       	in	r28, 0x3d	; 61
    3914:	de b7       	in	r29, 0x3e	; 62
    3916:	64 97       	sbiw	r28, 0x14	; 20
    3918:	cd bf       	out	0x3d, r28	; 61
    391a:	de bf       	out	0x3e, r29	; 62
    391c:	2d 87       	std	Y+13, r18	; 0x0d
    391e:	3e 87       	std	Y+14, r19	; 0x0e
    3920:	4f 87       	std	Y+15, r20	; 0x0f
    3922:	58 8b       	std	Y+16, r21	; 0x10
    3924:	a9 8a       	std	Y+17, r10	; 0x11
    3926:	ba 8a       	std	Y+18, r11	; 0x12
    3928:	cb 8a       	std	Y+19, r12	; 0x13
    392a:	dc 8a       	std	Y+20, r13	; 0x14
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    392c:	20 91 d9 24 	lds	r18, 0x24D9
    3930:	30 91 da 24 	lds	r19, 0x24DA
    3934:	40 91 db 24 	lds	r20, 0x24DB
    3938:	50 91 dc 24 	lds	r21, 0x24DC
    393c:	29 87       	std	Y+9, r18	; 0x09
    393e:	3a 87       	std	Y+10, r19	; 0x0a
    3940:	4b 87       	std	Y+11, r20	; 0x0b
    3942:	5c 87       	std	Y+12, r21	; 0x0c
    3944:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    3948:	0e 94 56 45 	call	0x8aac	; 0x8aac <lround>
    394c:	2b 01       	movw	r4, r22
    394e:	3c 01       	movw	r6, r24
    3950:	40 92 2f 22 	sts	0x222F, r4
    3954:	50 92 30 22 	sts	0x2230, r5
    3958:	60 92 31 22 	sts	0x2231, r6
    395c:	70 92 32 22 	sts	0x2232, r7
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    3960:	80 91 f1 24 	lds	r24, 0x24F1
    3964:	90 91 f2 24 	lds	r25, 0x24F2
    3968:	a0 91 f3 24 	lds	r26, 0x24F3
    396c:	b0 91 f4 24 	lds	r27, 0x24F4
    3970:	8d 83       	std	Y+5, r24	; 0x05
    3972:	9e 83       	std	Y+6, r25	; 0x06
    3974:	af 83       	std	Y+7, r26	; 0x07
    3976:	b8 87       	std	Y+8, r27	; 0x08
    3978:	6d 85       	ldd	r22, Y+13	; 0x0d
    397a:	7e 85       	ldd	r23, Y+14	; 0x0e
    397c:	8f 85       	ldd	r24, Y+15	; 0x0f
    397e:	98 89       	ldd	r25, Y+16	; 0x10
    3980:	2d 81       	ldd	r18, Y+5	; 0x05
    3982:	3e 81       	ldd	r19, Y+6	; 0x06
    3984:	4f 81       	ldd	r20, Y+7	; 0x07
    3986:	58 85       	ldd	r21, Y+8	; 0x08
    3988:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    398c:	0e 94 56 45 	call	0x8aac	; 0x8aac <lround>
    3990:	5b 01       	movw	r10, r22
    3992:	6c 01       	movw	r12, r24
    3994:	a0 92 33 22 	sts	0x2233, r10
    3998:	b0 92 34 22 	sts	0x2234, r11
    399c:	c0 92 35 22 	sts	0x2235, r12
    39a0:	d0 92 36 22 	sts	0x2236, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    39a4:	20 91 09 25 	lds	r18, 0x2509
    39a8:	30 91 0a 25 	lds	r19, 0x250A
    39ac:	40 91 0b 25 	lds	r20, 0x250B
    39b0:	50 91 0c 25 	lds	r21, 0x250C
    39b4:	29 83       	std	Y+1, r18	; 0x01
    39b6:	3a 83       	std	Y+2, r19	; 0x02
    39b8:	4b 83       	std	Y+3, r20	; 0x03
    39ba:	5c 83       	std	Y+4, r21	; 0x04
    39bc:	c8 01       	movw	r24, r16
    39be:	b7 01       	movw	r22, r14
    39c0:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    39c4:	0e 94 56 45 	call	0x8aac	; 0x8aac <lround>
    39c8:	9b 01       	movw	r18, r22
    39ca:	ac 01       	movw	r20, r24
    39cc:	20 93 37 22 	sts	0x2237, r18
    39d0:	30 93 38 22 	sts	0x2238, r19
    39d4:	40 93 39 22 	sts	0x2239, r20
    39d8:	50 93 3a 22 	sts	0x223A, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    39dc:	80 91 23 22 	lds	r24, 0x2223
    39e0:	90 91 24 22 	lds	r25, 0x2224
    39e4:	a0 91 25 22 	lds	r26, 0x2225
    39e8:	b0 91 26 22 	lds	r27, 0x2226
    39ec:	83 01       	movw	r16, r6
    39ee:	72 01       	movw	r14, r4
    39f0:	e8 1a       	sub	r14, r24
    39f2:	f9 0a       	sbc	r15, r25
    39f4:	0a 0b       	sbc	r16, r26
    39f6:	1b 0b       	sbc	r17, r27
    39f8:	e0 92 3b 22 	sts	0x223B, r14
    39fc:	f0 92 3c 22 	sts	0x223C, r15
    3a00:	00 93 3d 22 	sts	0x223D, r16
    3a04:	10 93 3e 22 	sts	0x223E, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    3a08:	80 91 27 22 	lds	r24, 0x2227
    3a0c:	90 91 28 22 	lds	r25, 0x2228
    3a10:	a0 91 29 22 	lds	r26, 0x2229
    3a14:	b0 91 2a 22 	lds	r27, 0x222A
    3a18:	a8 1a       	sub	r10, r24
    3a1a:	b9 0a       	sbc	r11, r25
    3a1c:	ca 0a       	sbc	r12, r26
    3a1e:	db 0a       	sbc	r13, r27
    3a20:	a0 92 3f 22 	sts	0x223F, r10
    3a24:	b0 92 40 22 	sts	0x2240, r11
    3a28:	c0 92 41 22 	sts	0x2241, r12
    3a2c:	d0 92 42 22 	sts	0x2242, r13
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    3a30:	80 91 2b 22 	lds	r24, 0x222B
    3a34:	90 91 2c 22 	lds	r25, 0x222C
    3a38:	a0 91 2d 22 	lds	r26, 0x222D
    3a3c:	b0 91 2e 22 	lds	r27, 0x222E
    3a40:	19 01       	movw	r2, r18
    3a42:	2a 01       	movw	r4, r20
    3a44:	28 1a       	sub	r2, r24
    3a46:	39 0a       	sbc	r3, r25
    3a48:	4a 0a       	sbc	r4, r26
    3a4a:	5b 0a       	sbc	r5, r27
    3a4c:	20 92 43 22 	sts	0x2243, r2
    3a50:	30 92 44 22 	sts	0x2244, r3
    3a54:	40 92 45 22 	sts	0x2245, r4
    3a58:	50 92 46 22 	sts	0x2246, r5

	if (invert_feed_rate) {
    3a5c:	89 28       	or	r8, r9
    3a5e:	59 f0       	breq	.+22     	; 0x3a76 <mc_line+0x188>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3a60:	60 ec       	ldi	r22, 0xC0	; 192
    3a62:	71 ee       	ldi	r23, 0xE1	; 225
    3a64:	84 e6       	ldi	r24, 0x64	; 100
    3a66:	9c e4       	ldi	r25, 0x4C	; 76
    3a68:	29 89       	ldd	r18, Y+17	; 0x11
    3a6a:	3a 89       	ldd	r19, Y+18	; 0x12
    3a6c:	4b 89       	ldd	r20, Y+19	; 0x13
    3a6e:	5c 89       	ldd	r21, Y+20	; 0x14
    3a70:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    3a74:	4a c0       	rjmp	.+148    	; 0x3b0a <mc_line+0x21c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    3a76:	c8 01       	movw	r24, r16
    3a78:	b7 01       	movw	r22, r14
    3a7a:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    3a7e:	29 85       	ldd	r18, Y+9	; 0x09
    3a80:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a82:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a84:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a86:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    3a8a:	0e 94 31 46 	call	0x8c62	; 0x8c62 <square>
    3a8e:	3b 01       	movw	r6, r22
    3a90:	4c 01       	movw	r8, r24
    3a92:	c6 01       	movw	r24, r12
    3a94:	b5 01       	movw	r22, r10
    3a96:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    3a9a:	2d 81       	ldd	r18, Y+5	; 0x05
    3a9c:	3e 81       	ldd	r19, Y+6	; 0x06
    3a9e:	4f 81       	ldd	r20, Y+7	; 0x07
    3aa0:	58 85       	ldd	r21, Y+8	; 0x08
    3aa2:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    3aa6:	0e 94 31 46 	call	0x8c62	; 0x8c62 <square>
    3aaa:	5b 01       	movw	r10, r22
    3aac:	6c 01       	movw	r12, r24
    3aae:	c2 01       	movw	r24, r4
    3ab0:	b1 01       	movw	r22, r2
    3ab2:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    3ab6:	29 81       	ldd	r18, Y+1	; 0x01
    3ab8:	3a 81       	ldd	r19, Y+2	; 0x02
    3aba:	4b 81       	ldd	r20, Y+3	; 0x03
    3abc:	5c 81       	ldd	r21, Y+4	; 0x04
    3abe:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    3ac2:	0e 94 31 46 	call	0x8c62	; 0x8c62 <square>
    3ac6:	7b 01       	movw	r14, r22
    3ac8:	8c 01       	movw	r16, r24
    3aca:	c4 01       	movw	r24, r8
    3acc:	b3 01       	movw	r22, r6
    3ace:	a6 01       	movw	r20, r12
    3ad0:	95 01       	movw	r18, r10
    3ad2:	0e 94 25 42 	call	0x844a	; 0x844a <__addsf3>
    3ad6:	a8 01       	movw	r20, r16
    3ad8:	97 01       	movw	r18, r14
    3ada:	0e 94 25 42 	call	0x844a	; 0x844a <__addsf3>
    3ade:	0e 94 f3 45 	call	0x8be6	; 0x8be6 <sqrt>
    3ae2:	60 93 4b 22 	sts	0x224B, r22
    3ae6:	70 93 4c 22 	sts	0x224C, r23
    3aea:	80 93 4d 22 	sts	0x224D, r24
    3aee:	90 93 4e 22 	sts	0x224E, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3af2:	29 89       	ldd	r18, Y+17	; 0x11
    3af4:	3a 89       	ldd	r19, Y+18	; 0x12
    3af6:	4b 89       	ldd	r20, Y+19	; 0x13
    3af8:	5c 89       	ldd	r21, Y+20	; 0x14
    3afa:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    3afe:	20 e0       	ldi	r18, 0x00	; 0
    3b00:	34 e2       	ldi	r19, 0x24	; 36
    3b02:	44 e7       	ldi	r20, 0x74	; 116
    3b04:	59 e4       	ldi	r21, 0x49	; 73
    3b06:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    3b0a:	0e 94 56 45 	call	0x8aac	; 0x8aac <lround>
    3b0e:	60 93 47 22 	sts	0x2247, r22
    3b12:	70 93 48 22 	sts	0x2248, r23
    3b16:	80 93 49 22 	sts	0x2249, r24
    3b1a:	90 93 4a 22 	sts	0x224A, r25
	}
	mc.line_state = MC_STATE_NEW;
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	80 93 22 22 	sts	0x2222, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3b24:	e3 e2       	ldi	r30, 0x23	; 35
    3b26:	f2 e2       	ldi	r31, 0x22	; 34
    3b28:	df 01       	movw	r26, r30
    3b2a:	1c 96       	adiw	r26, 0x0c	; 12
    3b2c:	8c e0       	ldi	r24, 0x0C	; 12
    3b2e:	0d 90       	ld	r0, X+
    3b30:	01 92       	st	Z+, r0
    3b32:	81 50       	subi	r24, 0x01	; 1
    3b34:	e1 f7       	brne	.-8      	; 0x3b2e <mc_line+0x240>
	return (mc_line_continue());
    3b36:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <mc_line_continue>
}
    3b3a:	64 96       	adiw	r28, 0x14	; 20
    3b3c:	cd bf       	out	0x3d, r28	; 61
    3b3e:	de bf       	out	0x3e, r29	; 62
    3b40:	cf 91       	pop	r28
    3b42:	df 91       	pop	r29
    3b44:	1f 91       	pop	r17
    3b46:	0f 91       	pop	r16
    3b48:	ff 90       	pop	r15
    3b4a:	ef 90       	pop	r14
    3b4c:	df 90       	pop	r13
    3b4e:	cf 90       	pop	r12
    3b50:	bf 90       	pop	r11
    3b52:	af 90       	pop	r10
    3b54:	9f 90       	pop	r9
    3b56:	8f 90       	pop	r8
    3b58:	7f 90       	pop	r7
    3b5a:	6f 90       	pop	r6
    3b5c:	5f 90       	pop	r5
    3b5e:	4f 90       	pop	r4
    3b60:	3f 90       	pop	r3
    3b62:	2f 90       	pop	r2
    3b64:	08 95       	ret

00003b66 <mc_arc_continue>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continue() 
{
    3b66:	8f 92       	push	r8
    3b68:	9f 92       	push	r9
    3b6a:	af 92       	push	r10
    3b6c:	bf 92       	push	r11
    3b6e:	cf 92       	push	r12
    3b70:	df 92       	push	r13
    3b72:	ef 92       	push	r14
    3b74:	ff 92       	push	r15
    3b76:	0f 93       	push	r16
    3b78:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3b7a:	80 91 28 25 	lds	r24, 0x2528
    3b7e:	88 23       	and	r24, r24
    3b80:	19 f4       	brne	.+6      	; 0x3b88 <mc_arc_continue+0x22>
    3b82:	22 e0       	ldi	r18, 0x02	; 2
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	dd c0       	rjmp	.+442    	; 0x3d42 <mc_arc_continue+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3b88:	81 30       	cpi	r24, 0x01	; 1
    3b8a:	09 f0       	breq	.+2      	; 0x3b8e <mc_arc_continue+0x28>
    3b8c:	ca c0       	rjmp	.+404    	; 0x3d22 <mc_arc_continue+0x1bc>
		ma.segment_counter=0;
    3b8e:	10 92 2b 25 	sts	0x252B, r1
    3b92:	10 92 2c 25 	sts	0x252C, r1
		ma.arc_state = MC_STATE_RUNNING;
    3b96:	82 e0       	ldi	r24, 0x02	; 2
    3b98:	80 93 28 25 	sts	0x2528, r24
    3b9c:	c2 c0       	rjmp	.+388    	; 0x3d22 <mc_arc_continue+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3b9e:	0e 94 ff 30 	call	0x61fe	; 0x61fe <mv_test_move_buffer_full>
    3ba2:	88 23       	and	r24, r24
    3ba4:	19 f0       	breq	.+6      	; 0x3bac <mc_arc_continue+0x46>
    3ba6:	21 e0       	ldi	r18, 0x01	; 1
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	cb c0       	rjmp	.+406    	; 0x3d42 <mc_arc_continue+0x1dc>
			return (TG_EAGAIN);
		}
		ma.segment_counter++;
    3bac:	80 91 2b 25 	lds	r24, 0x252B
    3bb0:	90 91 2c 25 	lds	r25, 0x252C
    3bb4:	01 96       	adiw	r24, 0x01	; 1
    3bb6:	80 93 2b 25 	sts	0x252B, r24
    3bba:	90 93 2c 25 	sts	0x252C, r25
		ma.theta += ma.theta_per_segment;
    3bbe:	60 91 4d 25 	lds	r22, 0x254D
    3bc2:	70 91 4e 25 	lds	r23, 0x254E
    3bc6:	80 91 4f 25 	lds	r24, 0x254F
    3bca:	90 91 50 25 	lds	r25, 0x2550
    3bce:	20 91 59 25 	lds	r18, 0x2559
    3bd2:	30 91 5a 25 	lds	r19, 0x255A
    3bd6:	40 91 5b 25 	lds	r20, 0x255B
    3bda:	50 91 5c 25 	lds	r21, 0x255C
    3bde:	0e 94 25 42 	call	0x844a	; 0x844a <__addsf3>
    3be2:	7b 01       	movw	r14, r22
    3be4:	8c 01       	movw	r16, r24
    3be6:	cb 01       	movw	r24, r22
    3be8:	d8 01       	movw	r26, r16
    3bea:	80 93 4d 25 	sts	0x254D, r24
    3bee:	90 93 4e 25 	sts	0x254E, r25
    3bf2:	a0 93 4f 25 	sts	0x254F, r26
    3bf6:	b0 93 50 25 	sts	0x2550, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3bfa:	b7 01       	movw	r22, r14
    3bfc:	c8 01       	movw	r24, r16
    3bfe:	0e 94 e9 45 	call	0x8bd2	; 0x8bd2 <sin>
    3c02:	80 90 51 25 	lds	r8, 0x2551
    3c06:	90 90 52 25 	lds	r9, 0x2552
    3c0a:	a0 90 53 25 	lds	r10, 0x2553
    3c0e:	b0 90 54 25 	lds	r11, 0x2554
    3c12:	c0 90 2f 25 	lds	r12, 0x252F
    3c16:	d0 90 30 25 	lds	r13, 0x2530
    3c1a:	cc 0c       	add	r12, r12
    3c1c:	dd 1c       	adc	r13, r13
    3c1e:	cc 0c       	add	r12, r12
    3c20:	dd 1c       	adc	r13, r13
    3c22:	28 e2       	ldi	r18, 0x28	; 40
    3c24:	35 e2       	ldi	r19, 0x25	; 37
    3c26:	c2 0e       	add	r12, r18
    3c28:	d3 1e       	adc	r13, r19
    3c2a:	a5 01       	movw	r20, r10
    3c2c:	94 01       	movw	r18, r8
    3c2e:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    3c32:	9b 01       	movw	r18, r22
    3c34:	ac 01       	movw	r20, r24
    3c36:	60 91 45 25 	lds	r22, 0x2545
    3c3a:	70 91 46 25 	lds	r23, 0x2546
    3c3e:	80 91 47 25 	lds	r24, 0x2547
    3c42:	90 91 48 25 	lds	r25, 0x2548
    3c46:	0e 94 25 42 	call	0x844a	; 0x844a <__addsf3>
    3c4a:	f6 01       	movw	r30, r12
    3c4c:	65 87       	std	Z+13, r22	; 0x0d
    3c4e:	76 87       	std	Z+14, r23	; 0x0e
    3c50:	87 87       	std	Z+15, r24	; 0x0f
    3c52:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3c54:	b7 01       	movw	r22, r14
    3c56:	c8 01       	movw	r24, r16
    3c58:	0e 94 c8 42 	call	0x8590	; 0x8590 <cos>
    3c5c:	00 91 31 25 	lds	r16, 0x2531
    3c60:	10 91 32 25 	lds	r17, 0x2532
    3c64:	00 0f       	add	r16, r16
    3c66:	11 1f       	adc	r17, r17
    3c68:	00 0f       	add	r16, r16
    3c6a:	11 1f       	adc	r17, r17
    3c6c:	08 5d       	subi	r16, 0xD8	; 216
    3c6e:	1a 4d       	sbci	r17, 0xDA	; 218
    3c70:	a5 01       	movw	r20, r10
    3c72:	94 01       	movw	r18, r8
    3c74:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    3c78:	9b 01       	movw	r18, r22
    3c7a:	ac 01       	movw	r20, r24
    3c7c:	60 91 49 25 	lds	r22, 0x2549
    3c80:	70 91 4a 25 	lds	r23, 0x254A
    3c84:	80 91 4b 25 	lds	r24, 0x254B
    3c88:	90 91 4c 25 	lds	r25, 0x254C
    3c8c:	0e 94 25 42 	call	0x844a	; 0x844a <__addsf3>
    3c90:	f8 01       	movw	r30, r16
    3c92:	65 87       	std	Z+13, r22	; 0x0d
    3c94:	76 87       	std	Z+14, r23	; 0x0e
    3c96:	87 87       	std	Z+15, r24	; 0x0f
    3c98:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3c9a:	00 91 33 25 	lds	r16, 0x2533
    3c9e:	10 91 34 25 	lds	r17, 0x2534
    3ca2:	00 0f       	add	r16, r16
    3ca4:	11 1f       	adc	r17, r17
    3ca6:	00 0f       	add	r16, r16
    3ca8:	11 1f       	adc	r17, r17
    3caa:	08 5d       	subi	r16, 0xD8	; 216
    3cac:	1a 4d       	sbci	r17, 0xDA	; 218
    3cae:	f8 01       	movw	r30, r16
    3cb0:	65 85       	ldd	r22, Z+13	; 0x0d
    3cb2:	76 85       	ldd	r23, Z+14	; 0x0e
    3cb4:	87 85       	ldd	r24, Z+15	; 0x0f
    3cb6:	90 89       	ldd	r25, Z+16	; 0x10
    3cb8:	20 91 5d 25 	lds	r18, 0x255D
    3cbc:	30 91 5e 25 	lds	r19, 0x255E
    3cc0:	40 91 5f 25 	lds	r20, 0x255F
    3cc4:	50 91 60 25 	lds	r21, 0x2560
    3cc8:	0e 94 25 42 	call	0x844a	; 0x844a <__addsf3>
    3ccc:	f8 01       	movw	r30, r16
    3cce:	65 87       	std	Z+13, r22	; 0x0d
    3cd0:	76 87       	std	Z+14, r23	; 0x0e
    3cd2:	87 87       	std	Z+15, r24	; 0x0f
    3cd4:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    3cd6:	60 91 35 25 	lds	r22, 0x2535
    3cda:	70 91 36 25 	lds	r23, 0x2536
    3cde:	80 91 37 25 	lds	r24, 0x2537
    3ce2:	90 91 38 25 	lds	r25, 0x2538
    3ce6:	20 91 39 25 	lds	r18, 0x2539
    3cea:	30 91 3a 25 	lds	r19, 0x253A
    3cee:	40 91 3b 25 	lds	r20, 0x253B
    3cf2:	50 91 3c 25 	lds	r21, 0x253C
    3cf6:	e0 90 3d 25 	lds	r14, 0x253D
    3cfa:	f0 90 3e 25 	lds	r15, 0x253E
    3cfe:	00 91 3f 25 	lds	r16, 0x253F
    3d02:	10 91 40 25 	lds	r17, 0x2540
    3d06:	a0 90 55 25 	lds	r10, 0x2555
    3d0a:	b0 90 56 25 	lds	r11, 0x2556
    3d0e:	c0 90 57 25 	lds	r12, 0x2557
    3d12:	d0 90 58 25 	lds	r13, 0x2558
    3d16:	80 90 2d 25 	lds	r8, 0x252D
    3d1a:	90 90 2e 25 	lds	r9, 0x252E
    3d1e:	0e 94 77 1c 	call	0x38ee	; 0x38ee <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3d22:	20 91 2b 25 	lds	r18, 0x252B
    3d26:	30 91 2c 25 	lds	r19, 0x252C
    3d2a:	80 91 29 25 	lds	r24, 0x2529
    3d2e:	90 91 2a 25 	lds	r25, 0x252A
    3d32:	82 17       	cp	r24, r18
    3d34:	93 07       	cpc	r25, r19
    3d36:	0c f0       	brlt	.+2      	; 0x3d3a <mc_arc_continue+0x1d4>
    3d38:	32 cf       	rjmp	.-412    	; 0x3b9e <mc_arc_continue+0x38>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3d3a:	10 92 28 25 	sts	0x2528, r1
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3d42:	c9 01       	movw	r24, r18
    3d44:	1f 91       	pop	r17
    3d46:	0f 91       	pop	r16
    3d48:	ff 90       	pop	r15
    3d4a:	ef 90       	pop	r14
    3d4c:	df 90       	pop	r13
    3d4e:	cf 90       	pop	r12
    3d50:	bf 90       	pop	r11
    3d52:	af 90       	pop	r10
    3d54:	9f 90       	pop	r9
    3d56:	8f 90       	pop	r8
    3d58:	08 95       	ret

00003d5a <mc_arc>:
 */

int mc_arc(double theta, double angular_travel, double radius, 
		   double linear_travel, int axis_1, int axis_2, int axis_linear, 
		   double feed_rate, int invert_feed_rate)
{
    3d5a:	2f 92       	push	r2
    3d5c:	3f 92       	push	r3
    3d5e:	4f 92       	push	r4
    3d60:	5f 92       	push	r5
    3d62:	6f 92       	push	r6
    3d64:	7f 92       	push	r7
    3d66:	8f 92       	push	r8
    3d68:	9f 92       	push	r9
    3d6a:	af 92       	push	r10
    3d6c:	bf 92       	push	r11
    3d6e:	cf 92       	push	r12
    3d70:	df 92       	push	r13
    3d72:	ef 92       	push	r14
    3d74:	ff 92       	push	r15
    3d76:	0f 93       	push	r16
    3d78:	1f 93       	push	r17
    3d7a:	df 93       	push	r29
    3d7c:	cf 93       	push	r28
    3d7e:	cd b7       	in	r28, 0x3d	; 61
    3d80:	de b7       	in	r29, 0x3e	; 62
    3d82:	28 97       	sbiw	r28, 0x08	; 8
    3d84:	cd bf       	out	0x3d, r28	; 61
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	69 83       	std	Y+1, r22	; 0x01
    3d8a:	7a 83       	std	Y+2, r23	; 0x02
    3d8c:	8b 83       	std	Y+3, r24	; 0x03
    3d8e:	9c 83       	std	Y+4, r25	; 0x04
    3d90:	29 01       	movw	r4, r18
    3d92:	3a 01       	movw	r6, r20
    3d94:	ed 82       	std	Y+5, r14	; 0x05
    3d96:	fe 82       	std	Y+6, r15	; 0x06
    3d98:	0f 83       	std	Y+7, r16	; 0x07
    3d9a:	18 87       	std	Y+8, r17	; 0x08
    3d9c:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3d9e:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3da0:	60 93 4d 25 	sts	0x254D, r22
    3da4:	70 93 4e 25 	sts	0x254E, r23
    3da8:	80 93 4f 25 	sts	0x254F, r24
    3dac:	90 93 50 25 	sts	0x2550, r25
	ma.radius = radius;
    3db0:	e0 92 51 25 	sts	0x2551, r14
    3db4:	f0 92 52 25 	sts	0x2552, r15
    3db8:	00 93 53 25 	sts	0x2553, r16
    3dbc:	10 93 54 25 	sts	0x2554, r17
	ma.angular_travel = angular_travel;
    3dc0:	20 93 61 25 	sts	0x2561, r18
    3dc4:	30 93 62 25 	sts	0x2562, r19
    3dc8:	40 93 63 25 	sts	0x2563, r20
    3dcc:	50 93 64 25 	sts	0x2564, r21
	ma.linear_travel = linear_travel;
    3dd0:	a0 92 65 25 	sts	0x2565, r10
    3dd4:	b0 92 66 25 	sts	0x2566, r11
    3dd8:	c0 92 67 25 	sts	0x2567, r12
    3ddc:	d0 92 68 25 	sts	0x2568, r13
	ma.feed_rate = feed_rate;
    3de0:	8a a1       	ldd	r24, Y+34	; 0x22
    3de2:	9b a1       	ldd	r25, Y+35	; 0x23
    3de4:	ac a1       	ldd	r26, Y+36	; 0x24
    3de6:	bd a1       	ldd	r27, Y+37	; 0x25
    3de8:	80 93 55 25 	sts	0x2555, r24
    3dec:	90 93 56 25 	sts	0x2556, r25
    3df0:	a0 93 57 25 	sts	0x2557, r26
    3df4:	b0 93 58 25 	sts	0x2558, r27
	ma.invert_feed_rate = invert_feed_rate;
    3df8:	ae a1       	ldd	r26, Y+38	; 0x26
    3dfa:	bf a1       	ldd	r27, Y+39	; 0x27
    3dfc:	a0 93 2d 25 	sts	0x252D, r26
    3e00:	b0 93 2e 25 	sts	0x252E, r27
	ma.axis_1 = axis_1;
    3e04:	80 92 2f 25 	sts	0x252F, r8
    3e08:	90 92 30 25 	sts	0x2530, r9
	ma.axis_2 = axis_2;
    3e0c:	20 92 31 25 	sts	0x2531, r2
    3e10:	30 92 32 25 	sts	0x2532, r3
	ma.axis_linear = axis_linear;
    3e14:	e8 a1       	ldd	r30, Y+32	; 0x20
    3e16:	f9 a1       	ldd	r31, Y+33	; 0x21
    3e18:	e0 93 33 25 	sts	0x2533, r30
    3e1c:	f0 93 34 25 	sts	0x2534, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3e20:	ca 01       	movw	r24, r20
    3e22:	b9 01       	movw	r22, r18
    3e24:	a8 01       	movw	r20, r16
    3e26:	97 01       	movw	r18, r14
    3e28:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    3e2c:	7b 01       	movw	r14, r22
    3e2e:	8c 01       	movw	r16, r24
    3e30:	c6 01       	movw	r24, r12
    3e32:	b5 01       	movw	r22, r10
    3e34:	0e 94 33 43 	call	0x8666	; 0x8666 <__fixsfsi>
    3e38:	97 ff       	sbrs	r25, 7
    3e3a:	07 c0       	rjmp	.+14     	; 0x3e4a <mc_arc+0xf0>
    3e3c:	90 95       	com	r25
    3e3e:	80 95       	com	r24
    3e40:	70 95       	com	r23
    3e42:	61 95       	neg	r22
    3e44:	7f 4f       	sbci	r23, 0xFF	; 255
    3e46:	8f 4f       	sbci	r24, 0xFF	; 255
    3e48:	9f 4f       	sbci	r25, 0xFF	; 255
    3e4a:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    3e4e:	9b 01       	movw	r18, r22
    3e50:	ac 01       	movw	r20, r24
    3e52:	c8 01       	movw	r24, r16
    3e54:	b7 01       	movw	r22, r14
    3e56:	0e 94 c1 44 	call	0x8982	; 0x8982 <hypot>
    3e5a:	7b 01       	movw	r14, r22
    3e5c:	8c 01       	movw	r16, r24
    3e5e:	60 93 41 25 	sts	0x2541, r22
    3e62:	70 93 42 25 	sts	0x2542, r23
    3e66:	80 93 43 25 	sts	0x2543, r24
    3e6a:	90 93 44 25 	sts	0x2544, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3e6e:	2a e0       	ldi	r18, 0x0A	; 10
    3e70:	37 ed       	ldi	r19, 0xD7	; 215
    3e72:	43 e2       	ldi	r20, 0x23	; 35
    3e74:	5c e3       	ldi	r21, 0x3C	; 60
    3e76:	0e 94 c4 42 	call	0x8588	; 0x8588 <__cmpsf2>
    3e7a:	88 23       	and	r24, r24
    3e7c:	1c f4       	brge	.+6      	; 0x3e84 <mc_arc+0x12a>
    3e7e:	20 e1       	ldi	r18, 0x10	; 16
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	fb c0       	rjmp	.+502    	; 0x407a <mc_arc+0x320>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3e84:	c8 01       	movw	r24, r16
    3e86:	b7 01       	movw	r22, r14
    3e88:	20 91 ba 24 	lds	r18, 0x24BA
    3e8c:	30 91 bb 24 	lds	r19, 0x24BB
    3e90:	40 91 bc 24 	lds	r20, 0x24BC
    3e94:	50 91 bd 24 	lds	r21, 0x24BD
    3e98:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    3e9c:	0e 94 b1 42 	call	0x8562	; 0x8562 <ceil>
    3ea0:	0e 94 33 43 	call	0x8666	; 0x8666 <__fixsfsi>
    3ea4:	8b 01       	movw	r16, r22
    3ea6:	60 93 29 25 	sts	0x2529, r22
    3eaa:	70 93 2a 25 	sts	0x252A, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    3eae:	8e a1       	ldd	r24, Y+38	; 0x26
    3eb0:	9f a1       	ldd	r25, Y+39	; 0x27
    3eb2:	89 2b       	or	r24, r25
    3eb4:	b9 f0       	breq	.+46     	; 0x3ee4 <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    3eb6:	b8 01       	movw	r22, r16
    3eb8:	88 27       	eor	r24, r24
    3eba:	77 fd       	sbrc	r23, 7
    3ebc:	80 95       	com	r24
    3ebe:	98 2f       	mov	r25, r24
    3ec0:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    3ec4:	9b 01       	movw	r18, r22
    3ec6:	ac 01       	movw	r20, r24
    3ec8:	6a a1       	ldd	r22, Y+34	; 0x22
    3eca:	7b a1       	ldd	r23, Y+35	; 0x23
    3ecc:	8c a1       	ldd	r24, Y+36	; 0x24
    3ece:	9d a1       	ldd	r25, Y+37	; 0x25
    3ed0:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    3ed4:	60 93 55 25 	sts	0x2555, r22
    3ed8:	70 93 56 25 	sts	0x2556, r23
    3edc:	80 93 57 25 	sts	0x2557, r24
    3ee0:	90 93 58 25 	sts	0x2558, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    3ee4:	b8 01       	movw	r22, r16
    3ee6:	88 27       	eor	r24, r24
    3ee8:	77 fd       	sbrc	r23, 7
    3eea:	80 95       	com	r24
    3eec:	98 2f       	mov	r25, r24
    3eee:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    3ef2:	7b 01       	movw	r14, r22
    3ef4:	8c 01       	movw	r16, r24
    3ef6:	c3 01       	movw	r24, r6
    3ef8:	b2 01       	movw	r22, r4
    3efa:	a8 01       	movw	r20, r16
    3efc:	97 01       	movw	r18, r14
    3efe:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    3f02:	60 93 59 25 	sts	0x2559, r22
    3f06:	70 93 5a 25 	sts	0x255A, r23
    3f0a:	80 93 5b 25 	sts	0x255B, r24
    3f0e:	90 93 5c 25 	sts	0x255C, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    3f12:	c6 01       	movw	r24, r12
    3f14:	b5 01       	movw	r22, r10
    3f16:	a8 01       	movw	r20, r16
    3f18:	97 01       	movw	r18, r14
    3f1a:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    3f1e:	60 93 5d 25 	sts	0x255D, r22
    3f22:	70 93 5e 25 	sts	0x255E, r23
    3f26:	80 93 5f 25 	sts	0x255F, r24
    3f2a:	90 93 60 25 	sts	0x2560, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    3f2e:	69 81       	ldd	r22, Y+1	; 0x01
    3f30:	7a 81       	ldd	r23, Y+2	; 0x02
    3f32:	8b 81       	ldd	r24, Y+3	; 0x03
    3f34:	9c 81       	ldd	r25, Y+4	; 0x04
    3f36:	0e 94 e9 45 	call	0x8bd2	; 0x8bd2 <sin>
    3f3a:	5b 01       	movw	r10, r22
    3f3c:	6c 01       	movw	r12, r24
    3f3e:	f4 01       	movw	r30, r8
    3f40:	ee 0f       	add	r30, r30
    3f42:	ff 1f       	adc	r31, r31
    3f44:	ee 0f       	add	r30, r30
    3f46:	ff 1f       	adc	r31, r31
    3f48:	ee 5d       	subi	r30, 0xDE	; 222
    3f4a:	fd 4d       	sbci	r31, 0xDD	; 221
    3f4c:	61 81       	ldd	r22, Z+1	; 0x01
    3f4e:	72 81       	ldd	r23, Z+2	; 0x02
    3f50:	83 81       	ldd	r24, Z+3	; 0x03
    3f52:	94 81       	ldd	r25, Z+4	; 0x04
    3f54:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    3f58:	f4 01       	movw	r30, r8
    3f5a:	ee 0f       	add	r30, r30
    3f5c:	ff 1f       	adc	r31, r31
    3f5e:	e8 0d       	add	r30, r8
    3f60:	f9 1d       	adc	r31, r9
    3f62:	13 e0       	ldi	r17, 0x03	; 3
    3f64:	ee 0f       	add	r30, r30
    3f66:	ff 1f       	adc	r31, r31
    3f68:	1a 95       	dec	r17
    3f6a:	e1 f7       	brne	.-8      	; 0x3f64 <mc_arc+0x20a>
    3f6c:	e8 54       	subi	r30, 0x48	; 72
    3f6e:	fb 4d       	sbci	r31, 0xDB	; 219
    3f70:	21 a1       	ldd	r18, Z+33	; 0x21
    3f72:	32 a1       	ldd	r19, Z+34	; 0x22
    3f74:	43 a1       	ldd	r20, Z+35	; 0x23
    3f76:	54 a1       	ldd	r21, Z+36	; 0x24
    3f78:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    3f7c:	7b 01       	movw	r14, r22
    3f7e:	8c 01       	movw	r16, r24
    3f80:	c6 01       	movw	r24, r12
    3f82:	b5 01       	movw	r22, r10
    3f84:	2d 81       	ldd	r18, Y+5	; 0x05
    3f86:	3e 81       	ldd	r19, Y+6	; 0x06
    3f88:	4f 81       	ldd	r20, Y+7	; 0x07
    3f8a:	58 85       	ldd	r21, Y+8	; 0x08
    3f8c:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    3f90:	9b 01       	movw	r18, r22
    3f92:	ac 01       	movw	r20, r24
    3f94:	c8 01       	movw	r24, r16
    3f96:	b7 01       	movw	r22, r14
    3f98:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    3f9c:	60 93 45 25 	sts	0x2545, r22
    3fa0:	70 93 46 25 	sts	0x2546, r23
    3fa4:	80 93 47 25 	sts	0x2547, r24
    3fa8:	90 93 48 25 	sts	0x2548, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    3fac:	69 81       	ldd	r22, Y+1	; 0x01
    3fae:	7a 81       	ldd	r23, Y+2	; 0x02
    3fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    3fb4:	0e 94 c8 42 	call	0x8590	; 0x8590 <cos>
    3fb8:	5b 01       	movw	r10, r22
    3fba:	6c 01       	movw	r12, r24
    3fbc:	f1 01       	movw	r30, r2
    3fbe:	ee 0f       	add	r30, r30
    3fc0:	ff 1f       	adc	r31, r31
    3fc2:	ee 0f       	add	r30, r30
    3fc4:	ff 1f       	adc	r31, r31
    3fc6:	ee 5d       	subi	r30, 0xDE	; 222
    3fc8:	fd 4d       	sbci	r31, 0xDD	; 221
    3fca:	61 81       	ldd	r22, Z+1	; 0x01
    3fcc:	72 81       	ldd	r23, Z+2	; 0x02
    3fce:	83 81       	ldd	r24, Z+3	; 0x03
    3fd0:	94 81       	ldd	r25, Z+4	; 0x04
    3fd2:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    3fd6:	f1 01       	movw	r30, r2
    3fd8:	ee 0f       	add	r30, r30
    3fda:	ff 1f       	adc	r31, r31
    3fdc:	e2 0d       	add	r30, r2
    3fde:	f3 1d       	adc	r31, r3
    3fe0:	53 e0       	ldi	r21, 0x03	; 3
    3fe2:	ee 0f       	add	r30, r30
    3fe4:	ff 1f       	adc	r31, r31
    3fe6:	5a 95       	dec	r21
    3fe8:	e1 f7       	brne	.-8      	; 0x3fe2 <mc_arc+0x288>
    3fea:	e8 54       	subi	r30, 0x48	; 72
    3fec:	fb 4d       	sbci	r31, 0xDB	; 219
    3fee:	21 a1       	ldd	r18, Z+33	; 0x21
    3ff0:	32 a1       	ldd	r19, Z+34	; 0x22
    3ff2:	43 a1       	ldd	r20, Z+35	; 0x23
    3ff4:	54 a1       	ldd	r21, Z+36	; 0x24
    3ff6:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    3ffa:	7b 01       	movw	r14, r22
    3ffc:	8c 01       	movw	r16, r24
    3ffe:	c6 01       	movw	r24, r12
    4000:	b5 01       	movw	r22, r10
    4002:	2d 81       	ldd	r18, Y+5	; 0x05
    4004:	3e 81       	ldd	r19, Y+6	; 0x06
    4006:	4f 81       	ldd	r20, Y+7	; 0x07
    4008:	58 85       	ldd	r21, Y+8	; 0x08
    400a:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    400e:	9b 01       	movw	r18, r22
    4010:	ac 01       	movw	r20, r24
    4012:	c8 01       	movw	r24, r16
    4014:	b7 01       	movw	r22, r14
    4016:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    401a:	60 93 49 25 	sts	0x2549, r22
    401e:	70 93 4a 25 	sts	0x254A, r23
    4022:	80 93 4b 25 	sts	0x254B, r24
    4026:	90 93 4c 25 	sts	0x254C, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    402a:	e8 a1       	ldd	r30, Y+32	; 0x20
    402c:	f9 a1       	ldd	r31, Y+33	; 0x21
    402e:	ee 0f       	add	r30, r30
    4030:	ff 1f       	adc	r31, r31
    4032:	ee 0f       	add	r30, r30
    4034:	ff 1f       	adc	r31, r31
    4036:	8f 01       	movw	r16, r30
    4038:	08 5d       	subi	r16, 0xD8	; 216
    403a:	1a 4d       	sbci	r17, 0xDA	; 218
    403c:	ee 5d       	subi	r30, 0xDE	; 222
    403e:	fd 4d       	sbci	r31, 0xDD	; 221
    4040:	61 81       	ldd	r22, Z+1	; 0x01
    4042:	72 81       	ldd	r23, Z+2	; 0x02
    4044:	83 81       	ldd	r24, Z+3	; 0x03
    4046:	94 81       	ldd	r25, Z+4	; 0x04
    4048:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    404c:	20 91 09 25 	lds	r18, 0x2509
    4050:	30 91 0a 25 	lds	r19, 0x250A
    4054:	40 91 0b 25 	lds	r20, 0x250B
    4058:	50 91 0c 25 	lds	r21, 0x250C
    405c:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    4060:	d8 01       	movw	r26, r16
    4062:	1d 96       	adiw	r26, 0x0d	; 13
    4064:	6d 93       	st	X+, r22
    4066:	7d 93       	st	X+, r23
    4068:	8d 93       	st	X+, r24
    406a:	9c 93       	st	X, r25
    406c:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	80 93 28 25 	sts	0x2528, r24
	return (mc_arc_continue());
    4074:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <mc_arc_continue>
    4078:	9c 01       	movw	r18, r24
}
    407a:	c9 01       	movw	r24, r18
    407c:	28 96       	adiw	r28, 0x08	; 8
    407e:	cd bf       	out	0x3d, r28	; 61
    4080:	de bf       	out	0x3e, r29	; 62
    4082:	cf 91       	pop	r28
    4084:	df 91       	pop	r29
    4086:	1f 91       	pop	r17
    4088:	0f 91       	pop	r16
    408a:	ff 90       	pop	r15
    408c:	ef 90       	pop	r14
    408e:	df 90       	pop	r13
    4090:	cf 90       	pop	r12
    4092:	bf 90       	pop	r11
    4094:	af 90       	pop	r10
    4096:	9f 90       	pop	r9
    4098:	8f 90       	pop	r8
    409a:	7f 90       	pop	r7
    409c:	6f 90       	pop	r6
    409e:	5f 90       	pop	r5
    40a0:	4f 90       	pop	r4
    40a2:	3f 90       	pop	r3
    40a4:	2f 90       	pop	r2
    40a6:	08 95       	ret

000040a8 <mc_arc_blocking>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc_blocking(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    40a8:	2f 92       	push	r2
    40aa:	3f 92       	push	r3
    40ac:	4f 92       	push	r4
    40ae:	5f 92       	push	r5
    40b0:	6f 92       	push	r6
    40b2:	7f 92       	push	r7
    40b4:	8f 92       	push	r8
    40b6:	9f 92       	push	r9
    40b8:	af 92       	push	r10
    40ba:	bf 92       	push	r11
    40bc:	cf 92       	push	r12
    40be:	df 92       	push	r13
    40c0:	ef 92       	push	r14
    40c2:	ff 92       	push	r15
    40c4:	0f 93       	push	r16
    40c6:	1f 93       	push	r17
    40c8:	df 93       	push	r29
    40ca:	cf 93       	push	r28
    40cc:	cd b7       	in	r28, 0x3d	; 61
    40ce:	de b7       	in	r29, 0x3e	; 62
    40d0:	28 97       	sbiw	r28, 0x08	; 8
    40d2:	cd bf       	out	0x3d, r28	; 61
    40d4:	de bf       	out	0x3e, r29	; 62
    40d6:	69 83       	std	Y+1, r22	; 0x01
    40d8:	7a 83       	std	Y+2, r23	; 0x02
    40da:	8b 83       	std	Y+3, r24	; 0x03
    40dc:	9c 83       	std	Y+4, r25	; 0x04
    40de:	29 01       	movw	r4, r18
    40e0:	3a 01       	movw	r6, r20
    40e2:	ed 82       	std	Y+5, r14	; 0x05
    40e4:	fe 82       	std	Y+6, r15	; 0x06
    40e6:	0f 83       	std	Y+7, r16	; 0x07
    40e8:	18 87       	std	Y+8, r17	; 0x08
    40ea:	2e 8c       	ldd	r2, Y+30	; 0x1e
    40ec:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    40ee:	60 93 4d 25 	sts	0x254D, r22
    40f2:	70 93 4e 25 	sts	0x254E, r23
    40f6:	80 93 4f 25 	sts	0x254F, r24
    40fa:	90 93 50 25 	sts	0x2550, r25
	ma.radius = radius;
    40fe:	e0 92 51 25 	sts	0x2551, r14
    4102:	f0 92 52 25 	sts	0x2552, r15
    4106:	00 93 53 25 	sts	0x2553, r16
    410a:	10 93 54 25 	sts	0x2554, r17
	ma.angular_travel = angular_travel;
    410e:	20 93 61 25 	sts	0x2561, r18
    4112:	30 93 62 25 	sts	0x2562, r19
    4116:	40 93 63 25 	sts	0x2563, r20
    411a:	50 93 64 25 	sts	0x2564, r21
	ma.linear_travel = linear_travel;
    411e:	a0 92 65 25 	sts	0x2565, r10
    4122:	b0 92 66 25 	sts	0x2566, r11
    4126:	c0 92 67 25 	sts	0x2567, r12
    412a:	d0 92 68 25 	sts	0x2568, r13
	ma.feed_rate = feed_rate;
    412e:	8a a1       	ldd	r24, Y+34	; 0x22
    4130:	9b a1       	ldd	r25, Y+35	; 0x23
    4132:	ac a1       	ldd	r26, Y+36	; 0x24
    4134:	bd a1       	ldd	r27, Y+37	; 0x25
    4136:	80 93 55 25 	sts	0x2555, r24
    413a:	90 93 56 25 	sts	0x2556, r25
    413e:	a0 93 57 25 	sts	0x2557, r26
    4142:	b0 93 58 25 	sts	0x2558, r27
	ma.invert_feed_rate = invert_feed_rate;
    4146:	ae a1       	ldd	r26, Y+38	; 0x26
    4148:	bf a1       	ldd	r27, Y+39	; 0x27
    414a:	a0 93 2d 25 	sts	0x252D, r26
    414e:	b0 93 2e 25 	sts	0x252E, r27
	ma.axis_1 = axis_1;
    4152:	80 92 2f 25 	sts	0x252F, r8
    4156:	90 92 30 25 	sts	0x2530, r9
	ma.axis_2 = axis_2;
    415a:	20 92 31 25 	sts	0x2531, r2
    415e:	30 92 32 25 	sts	0x2532, r3
	ma.axis_linear = axis_linear;
    4162:	e8 a1       	ldd	r30, Y+32	; 0x20
    4164:	f9 a1       	ldd	r31, Y+33	; 0x21
    4166:	e0 93 33 25 	sts	0x2533, r30
    416a:	f0 93 34 25 	sts	0x2534, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    416e:	ca 01       	movw	r24, r20
    4170:	b9 01       	movw	r22, r18
    4172:	a8 01       	movw	r20, r16
    4174:	97 01       	movw	r18, r14
    4176:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    417a:	7b 01       	movw	r14, r22
    417c:	8c 01       	movw	r16, r24
    417e:	c6 01       	movw	r24, r12
    4180:	b5 01       	movw	r22, r10
    4182:	0e 94 33 43 	call	0x8666	; 0x8666 <__fixsfsi>
    4186:	97 ff       	sbrs	r25, 7
    4188:	07 c0       	rjmp	.+14     	; 0x4198 <mc_arc_blocking+0xf0>
    418a:	90 95       	com	r25
    418c:	80 95       	com	r24
    418e:	70 95       	com	r23
    4190:	61 95       	neg	r22
    4192:	7f 4f       	sbci	r23, 0xFF	; 255
    4194:	8f 4f       	sbci	r24, 0xFF	; 255
    4196:	9f 4f       	sbci	r25, 0xFF	; 255
    4198:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    419c:	9b 01       	movw	r18, r22
    419e:	ac 01       	movw	r20, r24
    41a0:	c8 01       	movw	r24, r16
    41a2:	b7 01       	movw	r22, r14
    41a4:	0e 94 c1 44 	call	0x8982	; 0x8982 <hypot>
    41a8:	7b 01       	movw	r14, r22
    41aa:	8c 01       	movw	r16, r24
    41ac:	60 93 41 25 	sts	0x2541, r22
    41b0:	70 93 42 25 	sts	0x2542, r23
    41b4:	80 93 43 25 	sts	0x2543, r24
    41b8:	90 93 44 25 	sts	0x2544, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    41bc:	2a e0       	ldi	r18, 0x0A	; 10
    41be:	37 ed       	ldi	r19, 0xD7	; 215
    41c0:	43 e2       	ldi	r20, 0x23	; 35
    41c2:	5c e3       	ldi	r21, 0x3C	; 60
    41c4:	0e 94 c4 42 	call	0x8588	; 0x8588 <__cmpsf2>
    41c8:	88 23       	and	r24, r24
    41ca:	1c f4       	brge	.+6      	; 0x41d2 <mc_arc_blocking+0x12a>
    41cc:	20 e1       	ldi	r18, 0x10	; 16
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	c7 c1       	rjmp	.+910    	; 0x4560 <mc_arc_blocking+0x4b8>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    41d2:	c8 01       	movw	r24, r16
    41d4:	b7 01       	movw	r22, r14
    41d6:	20 91 ba 24 	lds	r18, 0x24BA
    41da:	30 91 bb 24 	lds	r19, 0x24BB
    41de:	40 91 bc 24 	lds	r20, 0x24BC
    41e2:	50 91 bd 24 	lds	r21, 0x24BD
    41e6:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    41ea:	0e 94 b1 42 	call	0x8562	; 0x8562 <ceil>
    41ee:	0e 94 33 43 	call	0x8666	; 0x8666 <__fixsfsi>
    41f2:	8b 01       	movw	r16, r22
    41f4:	60 93 29 25 	sts	0x2529, r22
    41f8:	70 93 2a 25 	sts	0x252A, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    41fc:	2e a1       	ldd	r18, Y+38	; 0x26
    41fe:	3f a1       	ldd	r19, Y+39	; 0x27
    4200:	23 2b       	or	r18, r19
    4202:	b9 f0       	breq	.+46     	; 0x4232 <mc_arc_blocking+0x18a>
		ma.feed_rate *= ma.segments; 
    4204:	b8 01       	movw	r22, r16
    4206:	88 27       	eor	r24, r24
    4208:	77 fd       	sbrc	r23, 7
    420a:	80 95       	com	r24
    420c:	98 2f       	mov	r25, r24
    420e:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    4212:	9b 01       	movw	r18, r22
    4214:	ac 01       	movw	r20, r24
    4216:	6a a1       	ldd	r22, Y+34	; 0x22
    4218:	7b a1       	ldd	r23, Y+35	; 0x23
    421a:	8c a1       	ldd	r24, Y+36	; 0x24
    421c:	9d a1       	ldd	r25, Y+37	; 0x25
    421e:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    4222:	60 93 55 25 	sts	0x2555, r22
    4226:	70 93 56 25 	sts	0x2556, r23
    422a:	80 93 57 25 	sts	0x2557, r24
    422e:	90 93 58 25 	sts	0x2558, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    4232:	b8 01       	movw	r22, r16
    4234:	88 27       	eor	r24, r24
    4236:	77 fd       	sbrc	r23, 7
    4238:	80 95       	com	r24
    423a:	98 2f       	mov	r25, r24
    423c:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    4240:	7b 01       	movw	r14, r22
    4242:	8c 01       	movw	r16, r24
    4244:	c3 01       	movw	r24, r6
    4246:	b2 01       	movw	r22, r4
    4248:	a8 01       	movw	r20, r16
    424a:	97 01       	movw	r18, r14
    424c:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    4250:	60 93 59 25 	sts	0x2559, r22
    4254:	70 93 5a 25 	sts	0x255A, r23
    4258:	80 93 5b 25 	sts	0x255B, r24
    425c:	90 93 5c 25 	sts	0x255C, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    4260:	c6 01       	movw	r24, r12
    4262:	b5 01       	movw	r22, r10
    4264:	a8 01       	movw	r20, r16
    4266:	97 01       	movw	r18, r14
    4268:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    426c:	60 93 5d 25 	sts	0x255D, r22
    4270:	70 93 5e 25 	sts	0x255E, r23
    4274:	80 93 5f 25 	sts	0x255F, r24
    4278:	90 93 60 25 	sts	0x2560, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    427c:	69 81       	ldd	r22, Y+1	; 0x01
    427e:	7a 81       	ldd	r23, Y+2	; 0x02
    4280:	8b 81       	ldd	r24, Y+3	; 0x03
    4282:	9c 81       	ldd	r25, Y+4	; 0x04
    4284:	0e 94 e9 45 	call	0x8bd2	; 0x8bd2 <sin>
    4288:	5b 01       	movw	r10, r22
    428a:	6c 01       	movw	r12, r24
    428c:	f4 01       	movw	r30, r8
    428e:	ee 0f       	add	r30, r30
    4290:	ff 1f       	adc	r31, r31
    4292:	ee 0f       	add	r30, r30
    4294:	ff 1f       	adc	r31, r31
    4296:	ee 5d       	subi	r30, 0xDE	; 222
    4298:	fd 4d       	sbci	r31, 0xDD	; 221
    429a:	61 81       	ldd	r22, Z+1	; 0x01
    429c:	72 81       	ldd	r23, Z+2	; 0x02
    429e:	83 81       	ldd	r24, Z+3	; 0x03
    42a0:	94 81       	ldd	r25, Z+4	; 0x04
    42a2:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    42a6:	f4 01       	movw	r30, r8
    42a8:	ee 0f       	add	r30, r30
    42aa:	ff 1f       	adc	r31, r31
    42ac:	e8 0d       	add	r30, r8
    42ae:	f9 1d       	adc	r31, r9
    42b0:	13 e0       	ldi	r17, 0x03	; 3
    42b2:	ee 0f       	add	r30, r30
    42b4:	ff 1f       	adc	r31, r31
    42b6:	1a 95       	dec	r17
    42b8:	e1 f7       	brne	.-8      	; 0x42b2 <mc_arc_blocking+0x20a>
    42ba:	e8 54       	subi	r30, 0x48	; 72
    42bc:	fb 4d       	sbci	r31, 0xDB	; 219
    42be:	21 a1       	ldd	r18, Z+33	; 0x21
    42c0:	32 a1       	ldd	r19, Z+34	; 0x22
    42c2:	43 a1       	ldd	r20, Z+35	; 0x23
    42c4:	54 a1       	ldd	r21, Z+36	; 0x24
    42c6:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    42ca:	7b 01       	movw	r14, r22
    42cc:	8c 01       	movw	r16, r24
    42ce:	c6 01       	movw	r24, r12
    42d0:	b5 01       	movw	r22, r10
    42d2:	2d 81       	ldd	r18, Y+5	; 0x05
    42d4:	3e 81       	ldd	r19, Y+6	; 0x06
    42d6:	4f 81       	ldd	r20, Y+7	; 0x07
    42d8:	58 85       	ldd	r21, Y+8	; 0x08
    42da:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    42de:	9b 01       	movw	r18, r22
    42e0:	ac 01       	movw	r20, r24
    42e2:	c8 01       	movw	r24, r16
    42e4:	b7 01       	movw	r22, r14
    42e6:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    42ea:	60 93 45 25 	sts	0x2545, r22
    42ee:	70 93 46 25 	sts	0x2546, r23
    42f2:	80 93 47 25 	sts	0x2547, r24
    42f6:	90 93 48 25 	sts	0x2548, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    42fa:	69 81       	ldd	r22, Y+1	; 0x01
    42fc:	7a 81       	ldd	r23, Y+2	; 0x02
    42fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4300:	9c 81       	ldd	r25, Y+4	; 0x04
    4302:	0e 94 c8 42 	call	0x8590	; 0x8590 <cos>
    4306:	5b 01       	movw	r10, r22
    4308:	6c 01       	movw	r12, r24
    430a:	f1 01       	movw	r30, r2
    430c:	ee 0f       	add	r30, r30
    430e:	ff 1f       	adc	r31, r31
    4310:	ee 0f       	add	r30, r30
    4312:	ff 1f       	adc	r31, r31
    4314:	ee 5d       	subi	r30, 0xDE	; 222
    4316:	fd 4d       	sbci	r31, 0xDD	; 221
    4318:	61 81       	ldd	r22, Z+1	; 0x01
    431a:	72 81       	ldd	r23, Z+2	; 0x02
    431c:	83 81       	ldd	r24, Z+3	; 0x03
    431e:	94 81       	ldd	r25, Z+4	; 0x04
    4320:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    4324:	f1 01       	movw	r30, r2
    4326:	ee 0f       	add	r30, r30
    4328:	ff 1f       	adc	r31, r31
    432a:	e2 0d       	add	r30, r2
    432c:	f3 1d       	adc	r31, r3
    432e:	53 e0       	ldi	r21, 0x03	; 3
    4330:	ee 0f       	add	r30, r30
    4332:	ff 1f       	adc	r31, r31
    4334:	5a 95       	dec	r21
    4336:	e1 f7       	brne	.-8      	; 0x4330 <mc_arc_blocking+0x288>
    4338:	e8 54       	subi	r30, 0x48	; 72
    433a:	fb 4d       	sbci	r31, 0xDB	; 219
    433c:	21 a1       	ldd	r18, Z+33	; 0x21
    433e:	32 a1       	ldd	r19, Z+34	; 0x22
    4340:	43 a1       	ldd	r20, Z+35	; 0x23
    4342:	54 a1       	ldd	r21, Z+36	; 0x24
    4344:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    4348:	7b 01       	movw	r14, r22
    434a:	8c 01       	movw	r16, r24
    434c:	c6 01       	movw	r24, r12
    434e:	b5 01       	movw	r22, r10
    4350:	2d 81       	ldd	r18, Y+5	; 0x05
    4352:	3e 81       	ldd	r19, Y+6	; 0x06
    4354:	4f 81       	ldd	r20, Y+7	; 0x07
    4356:	58 85       	ldd	r21, Y+8	; 0x08
    4358:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    435c:	9b 01       	movw	r18, r22
    435e:	ac 01       	movw	r20, r24
    4360:	c8 01       	movw	r24, r16
    4362:	b7 01       	movw	r22, r14
    4364:	0e 94 24 42 	call	0x8448	; 0x8448 <__subsf3>
    4368:	60 93 49 25 	sts	0x2549, r22
    436c:	70 93 4a 25 	sts	0x254A, r23
    4370:	80 93 4b 25 	sts	0x254B, r24
    4374:	90 93 4c 25 	sts	0x254C, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    4378:	e8 a1       	ldd	r30, Y+32	; 0x20
    437a:	f9 a1       	ldd	r31, Y+33	; 0x21
    437c:	ee 0f       	add	r30, r30
    437e:	ff 1f       	adc	r31, r31
    4380:	ee 0f       	add	r30, r30
    4382:	ff 1f       	adc	r31, r31
    4384:	8f 01       	movw	r16, r30
    4386:	08 5d       	subi	r16, 0xD8	; 216
    4388:	1a 4d       	sbci	r17, 0xDA	; 218
    438a:	ee 5d       	subi	r30, 0xDE	; 222
    438c:	fd 4d       	sbci	r31, 0xDD	; 221
    438e:	61 81       	ldd	r22, Z+1	; 0x01
    4390:	72 81       	ldd	r23, Z+2	; 0x02
    4392:	83 81       	ldd	r24, Z+3	; 0x03
    4394:	94 81       	ldd	r25, Z+4	; 0x04
    4396:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    439a:	20 91 09 25 	lds	r18, 0x2509
    439e:	30 91 0a 25 	lds	r19, 0x250A
    43a2:	40 91 0b 25 	lds	r20, 0x250B
    43a6:	50 91 0c 25 	lds	r21, 0x250C
    43aa:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    43ae:	d8 01       	movw	r26, r16
    43b0:	1d 96       	adiw	r26, 0x0d	; 13
    43b2:	6d 93       	st	X+, r22
    43b4:	7d 93       	st	X+, r23
    43b6:	8d 93       	st	X+, r24
    43b8:	9c 93       	st	X, r25
    43ba:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    43bc:	10 92 2b 25 	sts	0x252B, r1
    43c0:	10 92 2c 25 	sts	0x252C, r1
    43c4:	bf c0       	rjmp	.+382    	; 0x4544 <mc_arc_blocking+0x49c>
		ma.theta += ma.theta_per_segment;
    43c6:	60 91 4d 25 	lds	r22, 0x254D
    43ca:	70 91 4e 25 	lds	r23, 0x254E
    43ce:	80 91 4f 25 	lds	r24, 0x254F
    43d2:	90 91 50 25 	lds	r25, 0x2550
    43d6:	20 91 59 25 	lds	r18, 0x2559
    43da:	30 91 5a 25 	lds	r19, 0x255A
    43de:	40 91 5b 25 	lds	r20, 0x255B
    43e2:	50 91 5c 25 	lds	r21, 0x255C
    43e6:	0e 94 25 42 	call	0x844a	; 0x844a <__addsf3>
    43ea:	7b 01       	movw	r14, r22
    43ec:	8c 01       	movw	r16, r24
    43ee:	cb 01       	movw	r24, r22
    43f0:	d8 01       	movw	r26, r16
    43f2:	80 93 4d 25 	sts	0x254D, r24
    43f6:	90 93 4e 25 	sts	0x254E, r25
    43fa:	a0 93 4f 25 	sts	0x254F, r26
    43fe:	b0 93 50 25 	sts	0x2550, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    4402:	b7 01       	movw	r22, r14
    4404:	c8 01       	movw	r24, r16
    4406:	0e 94 e9 45 	call	0x8bd2	; 0x8bd2 <sin>
    440a:	80 90 51 25 	lds	r8, 0x2551
    440e:	90 90 52 25 	lds	r9, 0x2552
    4412:	a0 90 53 25 	lds	r10, 0x2553
    4416:	b0 90 54 25 	lds	r11, 0x2554
    441a:	c0 90 2f 25 	lds	r12, 0x252F
    441e:	d0 90 30 25 	lds	r13, 0x2530
    4422:	cc 0c       	add	r12, r12
    4424:	dd 1c       	adc	r13, r13
    4426:	cc 0c       	add	r12, r12
    4428:	dd 1c       	adc	r13, r13
    442a:	e8 e2       	ldi	r30, 0x28	; 40
    442c:	f5 e2       	ldi	r31, 0x25	; 37
    442e:	ce 0e       	add	r12, r30
    4430:	df 1e       	adc	r13, r31
    4432:	a5 01       	movw	r20, r10
    4434:	94 01       	movw	r18, r8
    4436:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    443a:	9b 01       	movw	r18, r22
    443c:	ac 01       	movw	r20, r24
    443e:	60 91 45 25 	lds	r22, 0x2545
    4442:	70 91 46 25 	lds	r23, 0x2546
    4446:	80 91 47 25 	lds	r24, 0x2547
    444a:	90 91 48 25 	lds	r25, 0x2548
    444e:	0e 94 25 42 	call	0x844a	; 0x844a <__addsf3>
    4452:	d6 01       	movw	r26, r12
    4454:	1d 96       	adiw	r26, 0x0d	; 13
    4456:	6d 93       	st	X+, r22
    4458:	7d 93       	st	X+, r23
    445a:	8d 93       	st	X+, r24
    445c:	9c 93       	st	X, r25
    445e:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    4460:	b7 01       	movw	r22, r14
    4462:	c8 01       	movw	r24, r16
    4464:	0e 94 c8 42 	call	0x8590	; 0x8590 <cos>
    4468:	00 91 31 25 	lds	r16, 0x2531
    446c:	10 91 32 25 	lds	r17, 0x2532
    4470:	00 0f       	add	r16, r16
    4472:	11 1f       	adc	r17, r17
    4474:	00 0f       	add	r16, r16
    4476:	11 1f       	adc	r17, r17
    4478:	08 5d       	subi	r16, 0xD8	; 216
    447a:	1a 4d       	sbci	r17, 0xDA	; 218
    447c:	a5 01       	movw	r20, r10
    447e:	94 01       	movw	r18, r8
    4480:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    4484:	9b 01       	movw	r18, r22
    4486:	ac 01       	movw	r20, r24
    4488:	60 91 49 25 	lds	r22, 0x2549
    448c:	70 91 4a 25 	lds	r23, 0x254A
    4490:	80 91 4b 25 	lds	r24, 0x254B
    4494:	90 91 4c 25 	lds	r25, 0x254C
    4498:	0e 94 25 42 	call	0x844a	; 0x844a <__addsf3>
    449c:	f8 01       	movw	r30, r16
    449e:	65 87       	std	Z+13, r22	; 0x0d
    44a0:	76 87       	std	Z+14, r23	; 0x0e
    44a2:	87 87       	std	Z+15, r24	; 0x0f
    44a4:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    44a6:	00 91 33 25 	lds	r16, 0x2533
    44aa:	10 91 34 25 	lds	r17, 0x2534
    44ae:	00 0f       	add	r16, r16
    44b0:	11 1f       	adc	r17, r17
    44b2:	00 0f       	add	r16, r16
    44b4:	11 1f       	adc	r17, r17
    44b6:	08 5d       	subi	r16, 0xD8	; 216
    44b8:	1a 4d       	sbci	r17, 0xDA	; 218
    44ba:	d8 01       	movw	r26, r16
    44bc:	1d 96       	adiw	r26, 0x0d	; 13
    44be:	6d 91       	ld	r22, X+
    44c0:	7d 91       	ld	r23, X+
    44c2:	8d 91       	ld	r24, X+
    44c4:	9c 91       	ld	r25, X
    44c6:	50 97       	sbiw	r26, 0x10	; 16
    44c8:	20 91 5d 25 	lds	r18, 0x255D
    44cc:	30 91 5e 25 	lds	r19, 0x255E
    44d0:	40 91 5f 25 	lds	r20, 0x255F
    44d4:	50 91 60 25 	lds	r21, 0x2560
    44d8:	0e 94 25 42 	call	0x844a	; 0x844a <__addsf3>
    44dc:	f8 01       	movw	r30, r16
    44de:	65 87       	std	Z+13, r22	; 0x0d
    44e0:	76 87       	std	Z+14, r23	; 0x0e
    44e2:	87 87       	std	Z+15, r24	; 0x0f
    44e4:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    44e6:	60 91 35 25 	lds	r22, 0x2535
    44ea:	70 91 36 25 	lds	r23, 0x2536
    44ee:	80 91 37 25 	lds	r24, 0x2537
    44f2:	90 91 38 25 	lds	r25, 0x2538
    44f6:	20 91 39 25 	lds	r18, 0x2539
    44fa:	30 91 3a 25 	lds	r19, 0x253A
    44fe:	40 91 3b 25 	lds	r20, 0x253B
    4502:	50 91 3c 25 	lds	r21, 0x253C
    4506:	e0 90 3d 25 	lds	r14, 0x253D
    450a:	f0 90 3e 25 	lds	r15, 0x253E
    450e:	00 91 3f 25 	lds	r16, 0x253F
    4512:	10 91 40 25 	lds	r17, 0x2540
    4516:	a0 90 55 25 	lds	r10, 0x2555
    451a:	b0 90 56 25 	lds	r11, 0x2556
    451e:	c0 90 57 25 	lds	r12, 0x2557
    4522:	d0 90 58 25 	lds	r13, 0x2558
    4526:	80 90 2d 25 	lds	r8, 0x252D
    452a:	90 90 2e 25 	lds	r9, 0x252E
    452e:	0e 94 77 1c 	call	0x38ee	; 0x38ee <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    4532:	80 91 2b 25 	lds	r24, 0x252B
    4536:	90 91 2c 25 	lds	r25, 0x252C
    453a:	01 96       	adiw	r24, 0x01	; 1
    453c:	80 93 2b 25 	sts	0x252B, r24
    4540:	90 93 2c 25 	sts	0x252C, r25
    4544:	20 91 2b 25 	lds	r18, 0x252B
    4548:	30 91 2c 25 	lds	r19, 0x252C
    454c:	80 91 29 25 	lds	r24, 0x2529
    4550:	90 91 2a 25 	lds	r25, 0x252A
    4554:	82 17       	cp	r24, r18
    4556:	93 07       	cpc	r25, r19
    4558:	0c f0       	brlt	.+2      	; 0x455c <mc_arc_blocking+0x4b4>
    455a:	35 cf       	rjmp	.-406    	; 0x43c6 <mc_arc_blocking+0x31e>
    455c:	20 e0       	ldi	r18, 0x00	; 0
    455e:	30 e0       	ldi	r19, 0x00	; 0
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    4560:	c9 01       	movw	r24, r18
    4562:	28 96       	adiw	r28, 0x08	; 8
    4564:	cd bf       	out	0x3d, r28	; 61
    4566:	de bf       	out	0x3e, r29	; 62
    4568:	cf 91       	pop	r28
    456a:	df 91       	pop	r29
    456c:	1f 91       	pop	r17
    456e:	0f 91       	pop	r16
    4570:	ff 90       	pop	r15
    4572:	ef 90       	pop	r14
    4574:	df 90       	pop	r13
    4576:	cf 90       	pop	r12
    4578:	bf 90       	pop	r11
    457a:	af 90       	pop	r10
    457c:	9f 90       	pop	r9
    457e:	8f 90       	pop	r8
    4580:	7f 90       	pop	r7
    4582:	6f 90       	pop	r6
    4584:	5f 90       	pop	r5
    4586:	4f 90       	pop	r4
    4588:	3f 90       	pop	r3
    458a:	2f 90       	pop	r2
    458c:	08 95       	ret

0000458e <mc_line_blocking>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line_blocking(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    458e:	2f 92       	push	r2
    4590:	3f 92       	push	r3
    4592:	4f 92       	push	r4
    4594:	5f 92       	push	r5
    4596:	6f 92       	push	r6
    4598:	7f 92       	push	r7
    459a:	8f 92       	push	r8
    459c:	9f 92       	push	r9
    459e:	af 92       	push	r10
    45a0:	bf 92       	push	r11
    45a2:	cf 92       	push	r12
    45a4:	df 92       	push	r13
    45a6:	ef 92       	push	r14
    45a8:	ff 92       	push	r15
    45aa:	0f 93       	push	r16
    45ac:	1f 93       	push	r17
    45ae:	df 93       	push	r29
    45b0:	cf 93       	push	r28
    45b2:	cd b7       	in	r28, 0x3d	; 61
    45b4:	de b7       	in	r29, 0x3e	; 62
    45b6:	6c 97       	sbiw	r28, 0x1c	; 28
    45b8:	cd bf       	out	0x3d, r28	; 61
    45ba:	de bf       	out	0x3e, r29	; 62
    45bc:	2d 8b       	std	Y+21, r18	; 0x15
    45be:	3e 8b       	std	Y+22, r19	; 0x16
    45c0:	4f 8b       	std	Y+23, r20	; 0x17
    45c2:	58 8f       	std	Y+24, r21	; 0x18
    45c4:	a9 8e       	std	Y+25, r10	; 0x19
    45c6:	ba 8e       	std	Y+26, r11	; 0x1a
    45c8:	cb 8e       	std	Y+27, r12	; 0x1b
    45ca:	dc 8e       	std	Y+28, r13	; 0x1c
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    45cc:	20 91 d9 24 	lds	r18, 0x24D9
    45d0:	30 91 da 24 	lds	r19, 0x24DA
    45d4:	40 91 db 24 	lds	r20, 0x24DB
    45d8:	50 91 dc 24 	lds	r21, 0x24DC
    45dc:	29 8b       	std	Y+17, r18	; 0x11
    45de:	3a 8b       	std	Y+18, r19	; 0x12
    45e0:	4b 8b       	std	Y+19, r20	; 0x13
    45e2:	5c 8b       	std	Y+20, r21	; 0x14
    45e4:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    45e8:	0e 94 56 45 	call	0x8aac	; 0x8aac <lround>
    45ec:	2b 01       	movw	r4, r22
    45ee:	3c 01       	movw	r6, r24
    45f0:	40 92 2f 22 	sts	0x222F, r4
    45f4:	50 92 30 22 	sts	0x2230, r5
    45f8:	60 92 31 22 	sts	0x2231, r6
    45fc:	70 92 32 22 	sts	0x2232, r7
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    4600:	80 91 f1 24 	lds	r24, 0x24F1
    4604:	90 91 f2 24 	lds	r25, 0x24F2
    4608:	a0 91 f3 24 	lds	r26, 0x24F3
    460c:	b0 91 f4 24 	lds	r27, 0x24F4
    4610:	8d 87       	std	Y+13, r24	; 0x0d
    4612:	9e 87       	std	Y+14, r25	; 0x0e
    4614:	af 87       	std	Y+15, r26	; 0x0f
    4616:	b8 8b       	std	Y+16, r27	; 0x10
    4618:	6d 89       	ldd	r22, Y+21	; 0x15
    461a:	7e 89       	ldd	r23, Y+22	; 0x16
    461c:	8f 89       	ldd	r24, Y+23	; 0x17
    461e:	98 8d       	ldd	r25, Y+24	; 0x18
    4620:	2d 85       	ldd	r18, Y+13	; 0x0d
    4622:	3e 85       	ldd	r19, Y+14	; 0x0e
    4624:	4f 85       	ldd	r20, Y+15	; 0x0f
    4626:	58 89       	ldd	r21, Y+16	; 0x10
    4628:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    462c:	0e 94 56 45 	call	0x8aac	; 0x8aac <lround>
    4630:	5b 01       	movw	r10, r22
    4632:	6c 01       	movw	r12, r24
    4634:	a0 92 33 22 	sts	0x2233, r10
    4638:	b0 92 34 22 	sts	0x2234, r11
    463c:	c0 92 35 22 	sts	0x2235, r12
    4640:	d0 92 36 22 	sts	0x2236, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    4644:	20 91 09 25 	lds	r18, 0x2509
    4648:	30 91 0a 25 	lds	r19, 0x250A
    464c:	40 91 0b 25 	lds	r20, 0x250B
    4650:	50 91 0c 25 	lds	r21, 0x250C
    4654:	29 87       	std	Y+9, r18	; 0x09
    4656:	3a 87       	std	Y+10, r19	; 0x0a
    4658:	4b 87       	std	Y+11, r20	; 0x0b
    465a:	5c 87       	std	Y+12, r21	; 0x0c
    465c:	c8 01       	movw	r24, r16
    465e:	b7 01       	movw	r22, r14
    4660:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    4664:	0e 94 56 45 	call	0x8aac	; 0x8aac <lround>
    4668:	9b 01       	movw	r18, r22
    466a:	ac 01       	movw	r20, r24
    466c:	20 93 37 22 	sts	0x2237, r18
    4670:	30 93 38 22 	sts	0x2238, r19
    4674:	40 93 39 22 	sts	0x2239, r20
    4678:	50 93 3a 22 	sts	0x223A, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    467c:	80 91 23 22 	lds	r24, 0x2223
    4680:	90 91 24 22 	lds	r25, 0x2224
    4684:	a0 91 25 22 	lds	r26, 0x2225
    4688:	b0 91 26 22 	lds	r27, 0x2226
    468c:	83 01       	movw	r16, r6
    468e:	72 01       	movw	r14, r4
    4690:	e8 1a       	sub	r14, r24
    4692:	f9 0a       	sbc	r15, r25
    4694:	0a 0b       	sbc	r16, r26
    4696:	1b 0b       	sbc	r17, r27
    4698:	ed 82       	std	Y+5, r14	; 0x05
    469a:	fe 82       	std	Y+6, r15	; 0x06
    469c:	0f 83       	std	Y+7, r16	; 0x07
    469e:	18 87       	std	Y+8, r17	; 0x08
    46a0:	e0 92 3b 22 	sts	0x223B, r14
    46a4:	f0 92 3c 22 	sts	0x223C, r15
    46a8:	00 93 3d 22 	sts	0x223D, r16
    46ac:	10 93 3e 22 	sts	0x223E, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    46b0:	80 91 27 22 	lds	r24, 0x2227
    46b4:	90 91 28 22 	lds	r25, 0x2228
    46b8:	a0 91 29 22 	lds	r26, 0x2229
    46bc:	b0 91 2a 22 	lds	r27, 0x222A
    46c0:	86 01       	movw	r16, r12
    46c2:	75 01       	movw	r14, r10
    46c4:	e8 1a       	sub	r14, r24
    46c6:	f9 0a       	sbc	r15, r25
    46c8:	0a 0b       	sbc	r16, r26
    46ca:	1b 0b       	sbc	r17, r27
    46cc:	e9 82       	std	Y+1, r14	; 0x01
    46ce:	fa 82       	std	Y+2, r15	; 0x02
    46d0:	0b 83       	std	Y+3, r16	; 0x03
    46d2:	1c 83       	std	Y+4, r17	; 0x04
    46d4:	e0 92 3f 22 	sts	0x223F, r14
    46d8:	f0 92 40 22 	sts	0x2240, r15
    46dc:	00 93 41 22 	sts	0x2241, r16
    46e0:	10 93 42 22 	sts	0x2242, r17
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    46e4:	80 91 2b 22 	lds	r24, 0x222B
    46e8:	90 91 2c 22 	lds	r25, 0x222C
    46ec:	a0 91 2d 22 	lds	r26, 0x222D
    46f0:	b0 91 2e 22 	lds	r27, 0x222E
    46f4:	19 01       	movw	r2, r18
    46f6:	2a 01       	movw	r4, r20
    46f8:	28 1a       	sub	r2, r24
    46fa:	39 0a       	sbc	r3, r25
    46fc:	4a 0a       	sbc	r4, r26
    46fe:	5b 0a       	sbc	r5, r27
    4700:	20 92 43 22 	sts	0x2243, r2
    4704:	30 92 44 22 	sts	0x2244, r3
    4708:	40 92 45 22 	sts	0x2245, r4
    470c:	50 92 46 22 	sts	0x2246, r5

	if (invert_feed_rate) {
    4710:	89 28       	or	r8, r9
    4712:	59 f0       	breq	.+22     	; 0x472a <mc_line_blocking+0x19c>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    4714:	60 ec       	ldi	r22, 0xC0	; 192
    4716:	71 ee       	ldi	r23, 0xE1	; 225
    4718:	84 e6       	ldi	r24, 0x64	; 100
    471a:	9c e4       	ldi	r25, 0x4C	; 76
    471c:	29 8d       	ldd	r18, Y+25	; 0x19
    471e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4720:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4722:	5c 8d       	ldd	r21, Y+28	; 0x1c
    4724:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    4728:	4e c0       	rjmp	.+156    	; 0x47c6 <mc_line_blocking+0x238>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    472a:	6d 81       	ldd	r22, Y+5	; 0x05
    472c:	7e 81       	ldd	r23, Y+6	; 0x06
    472e:	8f 81       	ldd	r24, Y+7	; 0x07
    4730:	98 85       	ldd	r25, Y+8	; 0x08
    4732:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    4736:	29 89       	ldd	r18, Y+17	; 0x11
    4738:	3a 89       	ldd	r19, Y+18	; 0x12
    473a:	4b 89       	ldd	r20, Y+19	; 0x13
    473c:	5c 89       	ldd	r21, Y+20	; 0x14
    473e:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    4742:	0e 94 31 46 	call	0x8c62	; 0x8c62 <square>
    4746:	3b 01       	movw	r6, r22
    4748:	4c 01       	movw	r8, r24
    474a:	69 81       	ldd	r22, Y+1	; 0x01
    474c:	7a 81       	ldd	r23, Y+2	; 0x02
    474e:	8b 81       	ldd	r24, Y+3	; 0x03
    4750:	9c 81       	ldd	r25, Y+4	; 0x04
    4752:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    4756:	2d 85       	ldd	r18, Y+13	; 0x0d
    4758:	3e 85       	ldd	r19, Y+14	; 0x0e
    475a:	4f 85       	ldd	r20, Y+15	; 0x0f
    475c:	58 89       	ldd	r21, Y+16	; 0x10
    475e:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    4762:	0e 94 31 46 	call	0x8c62	; 0x8c62 <square>
    4766:	5b 01       	movw	r10, r22
    4768:	6c 01       	movw	r12, r24
    476a:	c2 01       	movw	r24, r4
    476c:	b1 01       	movw	r22, r2
    476e:	0e 94 66 43 	call	0x86cc	; 0x86cc <__floatsisf>
    4772:	29 85       	ldd	r18, Y+9	; 0x09
    4774:	3a 85       	ldd	r19, Y+10	; 0x0a
    4776:	4b 85       	ldd	r20, Y+11	; 0x0b
    4778:	5c 85       	ldd	r21, Y+12	; 0x0c
    477a:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    477e:	0e 94 31 46 	call	0x8c62	; 0x8c62 <square>
    4782:	7b 01       	movw	r14, r22
    4784:	8c 01       	movw	r16, r24
    4786:	c4 01       	movw	r24, r8
    4788:	b3 01       	movw	r22, r6
    478a:	a6 01       	movw	r20, r12
    478c:	95 01       	movw	r18, r10
    478e:	0e 94 25 42 	call	0x844a	; 0x844a <__addsf3>
    4792:	a8 01       	movw	r20, r16
    4794:	97 01       	movw	r18, r14
    4796:	0e 94 25 42 	call	0x844a	; 0x844a <__addsf3>
    479a:	0e 94 f3 45 	call	0x8be6	; 0x8be6 <sqrt>
    479e:	60 93 4b 22 	sts	0x224B, r22
    47a2:	70 93 4c 22 	sts	0x224C, r23
    47a6:	80 93 4d 22 	sts	0x224D, r24
    47aa:	90 93 4e 22 	sts	0x224E, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    47ae:	29 8d       	ldd	r18, Y+25	; 0x19
    47b0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    47b2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    47b4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    47b6:	0e 94 cb 42 	call	0x8596	; 0x8596 <__divsf3>
    47ba:	20 e0       	ldi	r18, 0x00	; 0
    47bc:	34 e2       	ldi	r19, 0x24	; 36
    47be:	44 e7       	ldi	r20, 0x74	; 116
    47c0:	59 e4       	ldi	r21, 0x49	; 73
    47c2:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    47c6:	0e 94 56 45 	call	0x8aac	; 0x8aac <lround>
    47ca:	60 93 47 22 	sts	0x2247, r22
    47ce:	70 93 48 22 	sts	0x2248, r23
    47d2:	80 93 49 22 	sts	0x2249, r24
    47d6:	90 93 4a 22 	sts	0x224A, r25
	}
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    47da:	a0 90 47 22 	lds	r10, 0x2247
    47de:	b0 90 48 22 	lds	r11, 0x2248
    47e2:	c0 90 49 22 	lds	r12, 0x2249
    47e6:	d0 90 4a 22 	lds	r13, 0x224A
    47ea:	6d 81       	ldd	r22, Y+5	; 0x05
    47ec:	7e 81       	ldd	r23, Y+6	; 0x06
    47ee:	8f 81       	ldd	r24, Y+7	; 0x07
    47f0:	98 85       	ldd	r25, Y+8	; 0x08
    47f2:	29 81       	ldd	r18, Y+1	; 0x01
    47f4:	3a 81       	ldd	r19, Y+2	; 0x02
    47f6:	4b 81       	ldd	r20, Y+3	; 0x03
    47f8:	5c 81       	ldd	r21, Y+4	; 0x04
    47fa:	82 01       	movw	r16, r4
    47fc:	71 01       	movw	r14, r2
    47fe:	0e 94 2b 31 	call	0x6256	; 0x6256 <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    4802:	e3 e2       	ldi	r30, 0x23	; 35
    4804:	f2 e2       	ldi	r31, 0x22	; 34
    4806:	df 01       	movw	r26, r30
    4808:	1c 96       	adiw	r26, 0x0c	; 12
    480a:	8c e0       	ldi	r24, 0x0C	; 12
    480c:	0d 90       	ld	r0, X+
    480e:	01 92       	st	Z+, r0
    4810:	81 50       	subi	r24, 0x01	; 1
    4812:	e1 f7       	brne	.-8      	; 0x480c <mc_line_blocking+0x27e>
	return (TG_OK);
}
    4814:	80 e0       	ldi	r24, 0x00	; 0
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	6c 96       	adiw	r28, 0x1c	; 28
    481a:	cd bf       	out	0x3d, r28	; 61
    481c:	de bf       	out	0x3e, r29	; 62
    481e:	cf 91       	pop	r28
    4820:	df 91       	pop	r29
    4822:	1f 91       	pop	r17
    4824:	0f 91       	pop	r16
    4826:	ff 90       	pop	r15
    4828:	ef 90       	pop	r14
    482a:	df 90       	pop	r13
    482c:	cf 90       	pop	r12
    482e:	bf 90       	pop	r11
    4830:	af 90       	pop	r10
    4832:	9f 90       	pop	r9
    4834:	8f 90       	pop	r8
    4836:	7f 90       	pop	r7
    4838:	6f 90       	pop	r6
    483a:	5f 90       	pop	r5
    483c:	4f 90       	pop	r4
    483e:	3f 90       	pop	r3
    4840:	2f 90       	pop	r2
    4842:	08 95       	ret

00004844 <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    4844:	e0 e6       	ldi	r30, 0x60	; 96
    4846:	f6 e0       	ldi	r31, 0x06	; 6
    4848:	80 e4       	ldi	r24, 0x40	; 64
    484a:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    484c:	80 e8       	ldi	r24, 0x80	; 128
    484e:	81 83       	std	Z+1, r24	; 0x01
}
    4850:	08 95       	ret

00004852 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    4852:	97 fd       	sbrc	r25, 7
    4854:	05 c0       	rjmp	.+10     	; 0x4860 <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    4856:	80 e8       	ldi	r24, 0x80	; 128
    4858:	e0 e6       	ldi	r30, 0x60	; 96
    485a:	f6 e0       	ldi	r31, 0x06	; 6
    485c:	85 83       	std	Z+5, r24	; 0x05
    485e:	04 c0       	rjmp	.+8      	; 0x4868 <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    4860:	80 e8       	ldi	r24, 0x80	; 128
    4862:	e0 e6       	ldi	r30, 0x60	; 96
    4864:	f6 e0       	ldi	r31, 0x06	; 6
    4866:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    4868:	80 e4       	ldi	r24, 0x40	; 64
    486a:	e0 e6       	ldi	r30, 0x60	; 96
    486c:	f6 e0       	ldi	r31, 0x06	; 6
    486e:	85 83       	std	Z+5, r24	; 0x05
}
    4870:	08 95       	ret

00004872 <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    4872:	80 e4       	ldi	r24, 0x40	; 64
    4874:	e0 e6       	ldi	r30, 0x60	; 96
    4876:	f6 e0       	ldi	r31, 0x06	; 6
    4878:	86 83       	std	Z+6, r24	; 0x06
}
    487a:	08 95       	ret

0000487c <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    487c:	cf 93       	push	r28
    487e:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    4880:	10 92 75 24 	sts	0x2475, r1
	ax.exec_mutex = FALSE;
    4884:	10 92 74 24 	sts	0x2474, r1

	ax.a[X].port = &X_MOTOR_PORT;				// bind PORTs to structs
    4888:	80 e0       	ldi	r24, 0x00	; 0
    488a:	96 e0       	ldi	r25, 0x06	; 6
    488c:	80 93 84 24 	sts	0x2484, r24
    4890:	90 93 85 24 	sts	0x2485, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    4894:	80 ea       	ldi	r24, 0xA0	; 160
    4896:	96 e0       	ldi	r25, 0x06	; 6
    4898:	80 93 94 24 	sts	0x2494, r24
    489c:	90 93 95 24 	sts	0x2495, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    48a0:	80 e8       	ldi	r24, 0x80	; 128
    48a2:	96 e0       	ldi	r25, 0x06	; 6
    48a4:	80 93 a4 24 	sts	0x24A4, r24
    48a8:	90 93 a5 24 	sts	0x24A5, r25
	ax.a[A].port = &A_MOTOR_PORT;
    48ac:	80 e6       	ldi	r24, 0x60	; 96
    48ae:	96 e0       	ldi	r25, 0x06	; 6
    48b0:	80 93 b4 24 	sts	0x24B4, r24
    48b4:	90 93 b5 24 	sts	0x24B5, r25

	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
    48b8:	80 e0       	ldi	r24, 0x00	; 0
    48ba:	98 e0       	ldi	r25, 0x08	; 8
    48bc:	80 93 86 24 	sts	0x2486, r24
    48c0:	90 93 87 24 	sts	0x2487, r25
	ax.a[Y].timer = &Y_TIMER;
    48c4:	80 e0       	ldi	r24, 0x00	; 0
    48c6:	99 e0       	ldi	r25, 0x09	; 9
    48c8:	80 93 96 24 	sts	0x2496, r24
    48cc:	90 93 97 24 	sts	0x2497, r25
	ax.a[Z].timer = &Z_TIMER;
    48d0:	80 e0       	ldi	r24, 0x00	; 0
    48d2:	9a e0       	ldi	r25, 0x0A	; 10
    48d4:	80 93 a6 24 	sts	0x24A6, r24
    48d8:	90 93 a7 24 	sts	0x24A7, r25
	ax.a[A].timer = &A_TIMER;
    48dc:	80 e0       	ldi	r24, 0x00	; 0
    48de:	9b e0       	ldi	r25, 0x0B	; 11
    48e0:	80 93 b6 24 	sts	0x24B6, r24
    48e4:	90 93 b7 24 	sts	0x24B7, r25
    48e8:	c8 ec       	ldi	r28, 0xC8	; 200
    48ea:	d4 e2       	ldi	r29, 0x24	; 36
    48ec:	a2 e8       	ldi	r26, 0x82	; 130
    48ee:	b4 e2       	ldi	r27, 0x24	; 36

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    48f0:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    48f2:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    48f4:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    48f6:	88 81       	ld	r24, Y
    48f8:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    48fa:	12 96       	adiw	r26, 0x02	; 2
    48fc:	ed 91       	ld	r30, X+
    48fe:	fc 91       	ld	r31, X
    4900:	13 97       	sbiw	r26, 0x03	; 3
    4902:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    4904:	12 96       	adiw	r26, 0x02	; 2
    4906:	ed 91       	ld	r30, X+
    4908:	fc 91       	ld	r31, X
    490a:	13 97       	sbiw	r26, 0x03	; 3
    490c:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
    490e:	12 96       	adiw	r26, 0x02	; 2
    4910:	ed 91       	ld	r30, X+
    4912:	fc 91       	ld	r31, X
    4914:	13 97       	sbiw	r26, 0x03	; 3
    4916:	84 81       	ldd	r24, Z+4	; 0x04
    4918:	88 61       	ori	r24, 0x18	; 24
    491a:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    491c:	12 96       	adiw	r26, 0x02	; 2
    491e:	ed 91       	ld	r30, X+
    4920:	fc 91       	ld	r31, X
    4922:	13 97       	sbiw	r26, 0x03	; 3
    4924:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    4926:	14 96       	adiw	r26, 0x04	; 4
    4928:	ed 91       	ld	r30, X+
    492a:	fc 91       	ld	r31, X
    492c:	15 97       	sbiw	r26, 0x05	; 5
    492e:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    4930:	14 96       	adiw	r26, 0x04	; 4
    4932:	ed 91       	ld	r30, X+
    4934:	fc 91       	ld	r31, X
    4936:	15 97       	sbiw	r26, 0x05	; 5
    4938:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    493a:	14 96       	adiw	r26, 0x04	; 4
    493c:	ed 91       	ld	r30, X+
    493e:	fc 91       	ld	r31, X
    4940:	15 97       	sbiw	r26, 0x05	; 5
    4942:	96 83       	std	Z+6, r25	; 0x06
    4944:	68 96       	adiw	r28, 0x18	; 24
    4946:	50 96       	adiw	r26, 0x10	; 16
	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    4948:	85 e2       	ldi	r24, 0x25	; 37
    494a:	c8 32       	cpi	r28, 0x28	; 40
    494c:	d8 07       	cpc	r29, r24
    494e:	99 f6       	brne	.-90     	; 0x48f6 <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    4950:	df 91       	pop	r29
    4952:	cf 91       	pop	r28
    4954:	08 95       	ret

00004956 <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    4956:	e8 2f       	mov	r30, r24
    4958:	f0 e0       	ldi	r31, 0x00	; 0
    495a:	84 e0       	ldi	r24, 0x04	; 4
    495c:	ee 0f       	add	r30, r30
    495e:	ff 1f       	adc	r31, r31
    4960:	8a 95       	dec	r24
    4962:	e1 f7       	brne	.-8      	; 0x495c <st_set_polarity+0x6>
    4964:	ec 58       	subi	r30, 0x8C	; 140
    4966:	fb 4d       	sbci	r31, 0xDB	; 219
    4968:	66 87       	std	Z+14, r22	; 0x0e
}
    496a:	08 95       	ret

0000496c <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X].step_counter = 0x00001000;
    496c:	28 e7       	ldi	r18, 0x78	; 120
    496e:	34 e2       	ldi	r19, 0x24	; 36
    4970:	80 e0       	ldi	r24, 0x00	; 0
    4972:	90 e1       	ldi	r25, 0x10	; 16
    4974:	a0 e0       	ldi	r26, 0x00	; 0
    4976:	b0 e0       	ldi	r27, 0x00	; 0
    4978:	80 93 78 24 	sts	0x2478, r24
    497c:	90 93 79 24 	sts	0x2479, r25
    4980:	a0 93 7a 24 	sts	0x247A, r26
    4984:	b0 93 7b 24 	sts	0x247B, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    4988:	e0 91 86 24 	lds	r30, 0x2486
    498c:	f0 91 87 24 	lds	r31, 0x2487
    4990:	80 e0       	ldi	r24, 0x00	; 0
    4992:	90 e1       	ldi	r25, 0x10	; 16
    4994:	86 a3       	std	Z+38, r24	; 0x26
    4996:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    4998:	41 e0       	ldi	r20, 0x01	; 1
    499a:	40 83       	st	Z, r20

	ax.a[Y].step_counter = 0x00000800;
    499c:	80 e0       	ldi	r24, 0x00	; 0
    499e:	98 e0       	ldi	r25, 0x08	; 8
    49a0:	a0 e0       	ldi	r26, 0x00	; 0
    49a2:	b0 e0       	ldi	r27, 0x00	; 0
    49a4:	80 93 88 24 	sts	0x2488, r24
    49a8:	90 93 89 24 	sts	0x2489, r25
    49ac:	a0 93 8a 24 	sts	0x248A, r26
    49b0:	b0 93 8b 24 	sts	0x248B, r27
	ax.a[Y].timer->PER = 0x2000;
    49b4:	e0 91 96 24 	lds	r30, 0x2496
    49b8:	f0 91 97 24 	lds	r31, 0x2497
    49bc:	80 e0       	ldi	r24, 0x00	; 0
    49be:	90 e2       	ldi	r25, 0x20	; 32
    49c0:	86 a3       	std	Z+38, r24	; 0x26
    49c2:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    49c4:	40 83       	st	Z, r20

	ax.a[Z].step_counter = 0x00000600;
    49c6:	80 e0       	ldi	r24, 0x00	; 0
    49c8:	96 e0       	ldi	r25, 0x06	; 6
    49ca:	a0 e0       	ldi	r26, 0x00	; 0
    49cc:	b0 e0       	ldi	r27, 0x00	; 0
    49ce:	80 93 98 24 	sts	0x2498, r24
    49d2:	90 93 99 24 	sts	0x2499, r25
    49d6:	a0 93 9a 24 	sts	0x249A, r26
    49da:	b0 93 9b 24 	sts	0x249B, r27
	ax.a[Z].timer->PER = 0x3000;
    49de:	e0 91 a6 24 	lds	r30, 0x24A6
    49e2:	f0 91 a7 24 	lds	r31, 0x24A7
    49e6:	80 e0       	ldi	r24, 0x00	; 0
    49e8:	90 e3       	ldi	r25, 0x30	; 48
    49ea:	86 a3       	std	Z+38, r24	; 0x26
    49ec:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    49ee:	40 83       	st	Z, r20

	ax.a[A].step_counter = 0x00000400;
    49f0:	80 e0       	ldi	r24, 0x00	; 0
    49f2:	94 e0       	ldi	r25, 0x04	; 4
    49f4:	a0 e0       	ldi	r26, 0x00	; 0
    49f6:	b0 e0       	ldi	r27, 0x00	; 0
    49f8:	80 93 a8 24 	sts	0x24A8, r24
    49fc:	90 93 a9 24 	sts	0x24A9, r25
    4a00:	a0 93 aa 24 	sts	0x24AA, r26
    4a04:	b0 93 ab 24 	sts	0x24AB, r27
	ax.a[A].timer->PER = 0x4000;
    4a08:	d9 01       	movw	r26, r18
    4a0a:	de 96       	adiw	r26, 0x3e	; 62
    4a0c:	ed 91       	ld	r30, X+
    4a0e:	fc 91       	ld	r31, X
    4a10:	df 97       	sbiw	r26, 0x3f	; 63
    4a12:	80 e0       	ldi	r24, 0x00	; 0
    4a14:	90 e4       	ldi	r25, 0x40	; 64
    4a16:	86 a3       	std	Z+38, r24	; 0x26
    4a18:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    4a1a:	40 83       	st	Z, r20

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    4a1c:	23 50       	subi	r18, 0x03	; 3
    4a1e:	30 40       	sbci	r19, 0x00	; 0
    4a20:	f9 01       	movw	r30, r18
    4a22:	80 81       	ld	r24, Z
    4a24:	8f 60       	ori	r24, 0x0F	; 15
    4a26:	80 83       	st	Z, r24
}
    4a28:	08 95       	ret

00004a2a <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    4a2a:	f8 94       	cli
	mv_flush();									// flush the move buffer
    4a2c:	0e 94 20 31 	call	0x6240	; 0x6240 <mv_flush>
	sei();
    4a30:	78 94       	sei
}
    4a32:	08 95       	ret

00004a34 <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    4a34:	f8 94       	cli
	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    4a36:	e0 91 86 24 	lds	r30, 0x2486
    4a3a:	f0 91 87 24 	lds	r31, 0x2487
    4a3e:	10 82       	st	Z, r1
    4a40:	e0 91 96 24 	lds	r30, 0x2496
    4a44:	f0 91 97 24 	lds	r31, 0x2497
    4a48:	10 82       	st	Z, r1
    4a4a:	e0 91 a6 24 	lds	r30, 0x24A6
    4a4e:	f0 91 a7 24 	lds	r31, 0x24A7
    4a52:	10 82       	st	Z, r1
    4a54:	e0 91 b6 24 	lds	r30, 0x24B6
    4a58:	f0 91 b7 24 	lds	r31, 0x24B7
    4a5c:	10 82       	st	Z, r1
	}	
	mv_flush();									// flush the move buffer
    4a5e:	0e 94 20 31 	call	0x6240	; 0x6240 <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    4a62:	10 92 75 24 	sts	0x2475, r1
	sei();
    4a66:	78 94       	sei
}
    4a68:	08 95       	ret

00004a6a <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    4a6a:	cf 92       	push	r12
    4a6c:	df 92       	push	r13
    4a6e:	ef 92       	push	r14
    4a70:	ff 92       	push	r15
    4a72:	0f 93       	push	r16
    4a74:	1f 93       	push	r17
    4a76:	cf 93       	push	r28
    4a78:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    4a7a:	80 91 74 24 	lds	r24, 0x2474
    4a7e:	88 23       	and	r24, r24
    4a80:	09 f0       	breq	.+2      	; 0x4a84 <st_execute_move+0x1a>
    4a82:	32 c1       	rjmp	.+612    	; 0x4ce8 <st_execute_move+0x27e>
		return;
	}
	ax.exec_mutex = TRUE;
    4a84:	81 e0       	ldi	r24, 0x01	; 1
    4a86:	80 93 74 24 	sts	0x2474, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    4a8a:	80 91 75 24 	lds	r24, 0x2475
    4a8e:	88 23       	and	r24, r24
    4a90:	09 f0       	breq	.+2      	; 0x4a94 <st_execute_move+0x2a>
    4a92:	28 c1       	rjmp	.+592    	; 0x4ce4 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    4a94:	0e 94 dd 30 	call	0x61ba	; 0x61ba <mv_dequeue_move_buffer>
    4a98:	80 93 76 24 	sts	0x2476, r24
    4a9c:	90 93 77 24 	sts	0x2477, r25
    4aa0:	89 2b       	or	r24, r25
    4aa2:	09 f4       	brne	.+2      	; 0x4aa6 <st_execute_move+0x3c>
    4aa4:	1f c1       	rjmp	.+574    	; 0x4ce4 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;
		return;
    4aa6:	68 e7       	ldi	r22, 0x78	; 120
    4aa8:	74 e2       	ldi	r23, 0x24	; 36
    4aaa:	00 e0       	ldi	r16, 0x00	; 0
    4aac:	10 e0       	ldi	r17, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4aae:	94 e0       	ldi	r25, 0x04	; 4
    4ab0:	c9 2e       	mov	r12, r25
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4ab2:	82 e0       	ldi	r24, 0x02	; 2
    4ab4:	d8 2e       	mov	r13, r24
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
		ax.exec_mutex = FALSE;
		return;
    4ab6:	f0 2e       	mov	r15, r16
    4ab8:	e1 2e       	mov	r14, r17
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    4aba:	db 01       	movw	r26, r22
    4abc:	1e 96       	adiw	r26, 0x0e	; 14
    4abe:	ed 91       	ld	r30, X+
    4ac0:	fc 91       	ld	r31, X
    4ac2:	1f 97       	sbiw	r26, 0x0f	; 15
    4ac4:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    4ac6:	c0 91 76 24 	lds	r28, 0x2476
    4aca:	d0 91 77 24 	lds	r29, 0x2477
    4ace:	c8 01       	movw	r24, r16
    4ad0:	fc 01       	movw	r30, r24
    4ad2:	b3 e0       	ldi	r27, 0x03	; 3
    4ad4:	ee 0f       	add	r30, r30
    4ad6:	ff 1f       	adc	r31, r31
    4ad8:	ba 95       	dec	r27
    4ada:	e1 f7       	brne	.-8      	; 0x4ad4 <st_execute_move+0x6a>
    4adc:	88 0f       	add	r24, r24
    4ade:	99 1f       	adc	r25, r25
    4ae0:	e8 0f       	add	r30, r24
    4ae2:	f9 1f       	adc	r31, r25
    4ae4:	ec 0f       	add	r30, r28
    4ae6:	fd 1f       	adc	r31, r29
    4ae8:	80 81       	ld	r24, Z
    4aea:	91 81       	ldd	r25, Z+1	; 0x01
    4aec:	a2 81       	ldd	r26, Z+2	; 0x02
    4aee:	b3 81       	ldd	r27, Z+3	; 0x03
    4af0:	00 97       	sbiw	r24, 0x00	; 0
    4af2:	a1 05       	cpc	r26, r1
    4af4:	b1 05       	cpc	r27, r1
    4af6:	09 f4       	brne	.+2      	; 0x4afa <st_execute_move+0x90>
    4af8:	a6 c0       	rjmp	.+332    	; 0x4c46 <st_execute_move+0x1dc>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    4afa:	c8 01       	movw	r24, r16
    4afc:	9c 01       	movw	r18, r24
    4afe:	f3 e0       	ldi	r31, 0x03	; 3
    4b00:	22 0f       	add	r18, r18
    4b02:	33 1f       	adc	r19, r19
    4b04:	fa 95       	dec	r31
    4b06:	e1 f7       	brne	.-8      	; 0x4b00 <st_execute_move+0x96>
    4b08:	88 0f       	add	r24, r24
    4b0a:	99 1f       	adc	r25, r25
    4b0c:	28 0f       	add	r18, r24
    4b0e:	39 1f       	adc	r19, r25
    4b10:	c2 0f       	add	r28, r18
    4b12:	d3 1f       	adc	r29, r19
    4b14:	89 85       	ldd	r24, Y+9	; 0x09
    4b16:	fb 01       	movw	r30, r22
    4b18:	83 87       	std	Z+11, r24	; 0x0b

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4b1a:	e0 91 76 24 	lds	r30, 0x2476
    4b1e:	f0 91 77 24 	lds	r31, 0x2477
    4b22:	c8 01       	movw	r24, r16
    4b24:	9c 01       	movw	r18, r24
    4b26:	53 e0       	ldi	r21, 0x03	; 3
    4b28:	22 0f       	add	r18, r18
    4b2a:	33 1f       	adc	r19, r19
    4b2c:	5a 95       	dec	r21
    4b2e:	e1 f7       	brne	.-8      	; 0x4b28 <st_execute_move+0xbe>
    4b30:	88 0f       	add	r24, r24
    4b32:	99 1f       	adc	r25, r25
    4b34:	28 0f       	add	r18, r24
    4b36:	39 1f       	adc	r19, r25
    4b38:	e2 0f       	add	r30, r18
    4b3a:	f3 1f       	adc	r31, r19
    4b3c:	90 85       	ldd	r25, Z+8	; 0x08
    4b3e:	db 01       	movw	r26, r22
    4b40:	1a 96       	adiw	r26, 0x0a	; 10
    4b42:	8c 91       	ld	r24, X
    4b44:	1a 97       	sbiw	r26, 0x0a	; 10
    4b46:	1c 96       	adiw	r26, 0x0c	; 12
    4b48:	ed 91       	ld	r30, X+
    4b4a:	fc 91       	ld	r31, X
    4b4c:	1d 97       	sbiw	r26, 0x0d	; 13
    4b4e:	98 17       	cp	r25, r24
    4b50:	11 f0       	breq	.+4      	; 0x4b56 <st_execute_move+0xec>
    4b52:	d5 82       	std	Z+5, r13	; 0x05
    4b54:	01 c0       	rjmp	.+2      	; 0x4b58 <st_execute_move+0xee>
    4b56:	d6 82       	std	Z+6, r13	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    4b58:	40 91 76 24 	lds	r20, 0x2476
    4b5c:	50 91 77 24 	lds	r21, 0x2477
    4b60:	8f 2d       	mov	r24, r15
    4b62:	9e 2d       	mov	r25, r14
    4b64:	fc 01       	movw	r30, r24
    4b66:	33 e0       	ldi	r19, 0x03	; 3
    4b68:	ee 0f       	add	r30, r30
    4b6a:	ff 1f       	adc	r31, r31
    4b6c:	3a 95       	dec	r19
    4b6e:	e1 f7       	brne	.-8      	; 0x4b68 <st_execute_move+0xfe>
    4b70:	88 0f       	add	r24, r24
    4b72:	99 1f       	adc	r25, r25
    4b74:	e8 0f       	add	r30, r24
    4b76:	f9 1f       	adc	r31, r25
    4b78:	e4 0f       	add	r30, r20
    4b7a:	f5 1f       	adc	r31, r21
    4b7c:	80 81       	ld	r24, Z
    4b7e:	91 81       	ldd	r25, Z+1	; 0x01
    4b80:	a2 81       	ldd	r26, Z+2	; 0x02
    4b82:	b3 81       	ldd	r27, Z+3	; 0x03
    4b84:	fb 01       	movw	r30, r22
    4b86:	80 83       	st	Z, r24
    4b88:	91 83       	std	Z+1, r25	; 0x01
    4b8a:	a2 83       	std	Z+2, r26	; 0x02
    4b8c:	b3 83       	std	Z+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    4b8e:	8f 2d       	mov	r24, r15
    4b90:	9e 2d       	mov	r25, r14
    4b92:	fc 01       	movw	r30, r24
    4b94:	b3 e0       	ldi	r27, 0x03	; 3
    4b96:	ee 0f       	add	r30, r30
    4b98:	ff 1f       	adc	r31, r31
    4b9a:	ba 95       	dec	r27
    4b9c:	e1 f7       	brne	.-8      	; 0x4b96 <st_execute_move+0x12c>
    4b9e:	88 0f       	add	r24, r24
    4ba0:	99 1f       	adc	r25, r25
    4ba2:	e8 0f       	add	r30, r24
    4ba4:	f9 1f       	adc	r31, r25
    4ba6:	e4 0f       	add	r30, r20
    4ba8:	f5 1f       	adc	r31, r21
    4baa:	86 81       	ldd	r24, Z+6	; 0x06
    4bac:	97 81       	ldd	r25, Z+7	; 0x07
    4bae:	db 01       	movw	r26, r22
    4bb0:	16 96       	adiw	r26, 0x06	; 6
    4bb2:	8d 93       	st	X+, r24
    4bb4:	9c 93       	st	X, r25
    4bb6:	17 97       	sbiw	r26, 0x07	; 7
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    4bb8:	8f 2d       	mov	r24, r15
    4bba:	9e 2d       	mov	r25, r14
    4bbc:	fc 01       	movw	r30, r24
    4bbe:	33 e0       	ldi	r19, 0x03	; 3
    4bc0:	ee 0f       	add	r30, r30
    4bc2:	ff 1f       	adc	r31, r31
    4bc4:	3a 95       	dec	r19
    4bc6:	e1 f7       	brne	.-8      	; 0x4bc0 <st_execute_move+0x156>
    4bc8:	88 0f       	add	r24, r24
    4bca:	99 1f       	adc	r25, r25
    4bcc:	e8 0f       	add	r30, r24
    4bce:	f9 1f       	adc	r31, r25
    4bd0:	e4 0f       	add	r30, r20
    4bd2:	f5 1f       	adc	r31, r21
    4bd4:	86 81       	ldd	r24, Z+6	; 0x06
    4bd6:	97 81       	ldd	r25, Z+7	; 0x07
    4bd8:	18 96       	adiw	r26, 0x08	; 8
    4bda:	8d 93       	st	X+, r24
    4bdc:	9c 93       	st	X, r25
    4bde:	19 97       	sbiw	r26, 0x09	; 9
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    4be0:	8f 2d       	mov	r24, r15
    4be2:	9e 2d       	mov	r25, r14
    4be4:	fc 01       	movw	r30, r24
    4be6:	33 e0       	ldi	r19, 0x03	; 3
    4be8:	ee 0f       	add	r30, r30
    4bea:	ff 1f       	adc	r31, r31
    4bec:	3a 95       	dec	r19
    4bee:	e1 f7       	brne	.-8      	; 0x4be8 <st_execute_move+0x17e>
    4bf0:	88 0f       	add	r24, r24
    4bf2:	99 1f       	adc	r25, r25
    4bf4:	e8 0f       	add	r30, r24
    4bf6:	f9 1f       	adc	r31, r25
    4bf8:	e4 0f       	add	r30, r20
    4bfa:	f5 1f       	adc	r31, r21
    4bfc:	84 81       	ldd	r24, Z+4	; 0x04
    4bfe:	95 81       	ldd	r25, Z+5	; 0x05
    4c00:	14 96       	adiw	r26, 0x04	; 4
    4c02:	8d 93       	st	X+, r24
    4c04:	9c 93       	st	X, r25
    4c06:	15 97       	sbiw	r26, 0x05	; 5
		ax.a[i].timer->PER = ax.p->a[i].period;
    4c08:	1e 96       	adiw	r26, 0x0e	; 14
    4c0a:	ed 91       	ld	r30, X+
    4c0c:	fc 91       	ld	r31, X
    4c0e:	1f 97       	sbiw	r26, 0x0f	; 15
    4c10:	8f 2d       	mov	r24, r15
    4c12:	9e 2d       	mov	r25, r14
    4c14:	9c 01       	movw	r18, r24
    4c16:	b3 e0       	ldi	r27, 0x03	; 3
    4c18:	22 0f       	add	r18, r18
    4c1a:	33 1f       	adc	r19, r19
    4c1c:	ba 95       	dec	r27
    4c1e:	e1 f7       	brne	.-8      	; 0x4c18 <st_execute_move+0x1ae>
    4c20:	88 0f       	add	r24, r24
    4c22:	99 1f       	adc	r25, r25
    4c24:	28 0f       	add	r18, r24
    4c26:	39 1f       	adc	r19, r25
    4c28:	42 0f       	add	r20, r18
    4c2a:	53 1f       	adc	r21, r19
    4c2c:	da 01       	movw	r26, r20
    4c2e:	14 96       	adiw	r26, 0x04	; 4
    4c30:	8d 91       	ld	r24, X+
    4c32:	9c 91       	ld	r25, X
    4c34:	15 97       	sbiw	r26, 0x05	; 5
    4c36:	86 a3       	std	Z+38, r24	; 0x26
    4c38:	97 a3       	std	Z+39, r25	; 0x27
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4c3a:	db 01       	movw	r26, r22
    4c3c:	1c 96       	adiw	r26, 0x0c	; 12
    4c3e:	ed 91       	ld	r30, X+
    4c40:	fc 91       	ld	r31, X
    4c42:	1d 97       	sbiw	r26, 0x0d	; 13
    4c44:	c6 82       	std	Z+6, r12	; 0x06
    4c46:	0f 5f       	subi	r16, 0xFF	; 255
    4c48:	1f 4f       	sbci	r17, 0xFF	; 255
    4c4a:	60 5f       	subi	r22, 0xF0	; 240
    4c4c:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    4c4e:	03 30       	cpi	r16, 0x03	; 3
    4c50:	11 05       	cpc	r17, r1
    4c52:	09 f0       	breq	.+2      	; 0x4c56 <st_execute_move+0x1ec>
    4c54:	30 cf       	rjmp	.-416    	; 0x4ab6 <st_execute_move+0x4c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4c56:	10 92 75 24 	sts	0x2475, r1
	if (ax.a[X].step_counter) { 
    4c5a:	80 91 78 24 	lds	r24, 0x2478
    4c5e:	90 91 79 24 	lds	r25, 0x2479
    4c62:	a0 91 7a 24 	lds	r26, 0x247A
    4c66:	b0 91 7b 24 	lds	r27, 0x247B
    4c6a:	00 97       	sbiw	r24, 0x00	; 0
    4c6c:	a1 05       	cpc	r26, r1
    4c6e:	b1 05       	cpc	r27, r1
    4c70:	59 f0       	breq	.+22     	; 0x4c88 <st_execute_move+0x21e>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    4c72:	e0 91 86 24 	lds	r30, 0x2486
    4c76:	f0 91 87 24 	lds	r31, 0x2487
    4c7a:	81 e0       	ldi	r24, 0x01	; 1
    4c7c:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4c7e:	80 91 75 24 	lds	r24, 0x2475
    4c82:	88 60       	ori	r24, 0x08	; 8
    4c84:	80 93 75 24 	sts	0x2475, r24
	}
	if (ax.a[Y].step_counter) {
    4c88:	80 91 88 24 	lds	r24, 0x2488
    4c8c:	90 91 89 24 	lds	r25, 0x2489
    4c90:	a0 91 8a 24 	lds	r26, 0x248A
    4c94:	b0 91 8b 24 	lds	r27, 0x248B
    4c98:	00 97       	sbiw	r24, 0x00	; 0
    4c9a:	a1 05       	cpc	r26, r1
    4c9c:	b1 05       	cpc	r27, r1
    4c9e:	59 f0       	breq	.+22     	; 0x4cb6 <st_execute_move+0x24c>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    4ca0:	e0 91 96 24 	lds	r30, 0x2496
    4ca4:	f0 91 97 24 	lds	r31, 0x2497
    4ca8:	81 e0       	ldi	r24, 0x01	; 1
    4caa:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4cac:	80 91 75 24 	lds	r24, 0x2475
    4cb0:	84 60       	ori	r24, 0x04	; 4
    4cb2:	80 93 75 24 	sts	0x2475, r24
	}
	if (ax.a[Z].step_counter) {
    4cb6:	80 91 98 24 	lds	r24, 0x2498
    4cba:	90 91 99 24 	lds	r25, 0x2499
    4cbe:	a0 91 9a 24 	lds	r26, 0x249A
    4cc2:	b0 91 9b 24 	lds	r27, 0x249B
    4cc6:	00 97       	sbiw	r24, 0x00	; 0
    4cc8:	a1 05       	cpc	r26, r1
    4cca:	b1 05       	cpc	r27, r1
    4ccc:	59 f0       	breq	.+22     	; 0x4ce4 <st_execute_move+0x27a>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4cce:	e0 91 a6 24 	lds	r30, 0x24A6
    4cd2:	f0 91 a7 24 	lds	r31, 0x24A7
    4cd6:	81 e0       	ldi	r24, 0x01	; 1
    4cd8:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4cda:	80 91 75 24 	lds	r24, 0x2475
    4cde:	82 60       	ori	r24, 0x02	; 2
    4ce0:	80 93 75 24 	sts	0x2475, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4ce4:	10 92 74 24 	sts	0x2474, r1
}
    4ce8:	df 91       	pop	r29
    4cea:	cf 91       	pop	r28
    4cec:	1f 91       	pop	r17
    4cee:	0f 91       	pop	r16
    4cf0:	ff 90       	pop	r15
    4cf2:	ef 90       	pop	r14
    4cf4:	df 90       	pop	r13
    4cf6:	cf 90       	pop	r12
    4cf8:	08 95       	ret

00004cfa <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4cfa:	10 92 74 24 	sts	0x2474, r1
	st_execute_move();		// recursively empty the move queue
    4cfe:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <st_execute_move>
	return;
}
    4d02:	08 95       	ret

00004d04 <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    4d04:	1f 92       	push	r1
    4d06:	0f 92       	push	r0
    4d08:	0f b6       	in	r0, 0x3f	; 63
    4d0a:	0f 92       	push	r0
    4d0c:	0b b6       	in	r0, 0x3b	; 59
    4d0e:	0f 92       	push	r0
    4d10:	11 24       	eor	r1, r1
    4d12:	2f 93       	push	r18
    4d14:	3f 93       	push	r19
    4d16:	4f 93       	push	r20
    4d18:	5f 93       	push	r21
    4d1a:	6f 93       	push	r22
    4d1c:	7f 93       	push	r23
    4d1e:	8f 93       	push	r24
    4d20:	9f 93       	push	r25
    4d22:	af 93       	push	r26
    4d24:	bf 93       	push	r27
    4d26:	ef 93       	push	r30
    4d28:	ff 93       	push	r31
	if (--ax.a[A].postscale_counter != 0) {
    4d2a:	80 91 b0 24 	lds	r24, 0x24B0
    4d2e:	90 91 b1 24 	lds	r25, 0x24B1
    4d32:	01 97       	sbiw	r24, 0x01	; 1
    4d34:	80 93 b0 24 	sts	0x24B0, r24
    4d38:	90 93 b1 24 	sts	0x24B1, r25
    4d3c:	89 2b       	or	r24, r25
    4d3e:	a1 f5       	brne	.+104    	; 0x4da8 <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4d40:	e0 e6       	ldi	r30, 0x60	; 96
    4d42:	f6 e0       	ldi	r31, 0x06	; 6
    4d44:	81 e0       	ldi	r24, 0x01	; 1
    4d46:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    4d48:	80 91 a8 24 	lds	r24, 0x24A8
    4d4c:	90 91 a9 24 	lds	r25, 0x24A9
    4d50:	a0 91 aa 24 	lds	r26, 0x24AA
    4d54:	b0 91 ab 24 	lds	r27, 0x24AB
    4d58:	01 97       	sbiw	r24, 0x01	; 1
    4d5a:	a1 09       	sbc	r26, r1
    4d5c:	b1 09       	sbc	r27, r1
    4d5e:	80 93 a8 24 	sts	0x24A8, r24
    4d62:	90 93 a9 24 	sts	0x24A9, r25
    4d66:	a0 93 aa 24 	sts	0x24AA, r26
    4d6a:	b0 93 ab 24 	sts	0x24AB, r27
    4d6e:	00 97       	sbiw	r24, 0x00	; 0
    4d70:	a1 05       	cpc	r26, r1
    4d72:	b1 05       	cpc	r27, r1
    4d74:	69 f4       	brne	.+26     	; 0x4d90 <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4d76:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4d7a:	84 e0       	ldi	r24, 0x04	; 4
    4d7c:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4d7e:	80 91 75 24 	lds	r24, 0x2475
    4d82:	8e 7f       	andi	r24, 0xFE	; 254
    4d84:	80 93 75 24 	sts	0x2475, r24
		if (ax.active_axes == 0) {
    4d88:	88 23       	and	r24, r24
    4d8a:	11 f4       	brne	.+4      	; 0x4d90 <__vector_108+0x8c>
			st_execute_move();
    4d8c:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    4d90:	80 91 ae 24 	lds	r24, 0x24AE
    4d94:	90 91 af 24 	lds	r25, 0x24AF
    4d98:	80 93 b0 24 	sts	0x24B0, r24
    4d9c:	90 93 b1 24 	sts	0x24B1, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4da0:	81 e0       	ldi	r24, 0x01	; 1
    4da2:	e0 e6       	ldi	r30, 0x60	; 96
    4da4:	f6 e0       	ldi	r31, 0x06	; 6
    4da6:	86 83       	std	Z+6, r24	; 0x06
}
    4da8:	ff 91       	pop	r31
    4daa:	ef 91       	pop	r30
    4dac:	bf 91       	pop	r27
    4dae:	af 91       	pop	r26
    4db0:	9f 91       	pop	r25
    4db2:	8f 91       	pop	r24
    4db4:	7f 91       	pop	r23
    4db6:	6f 91       	pop	r22
    4db8:	5f 91       	pop	r21
    4dba:	4f 91       	pop	r20
    4dbc:	3f 91       	pop	r19
    4dbe:	2f 91       	pop	r18
    4dc0:	0f 90       	pop	r0
    4dc2:	0b be       	out	0x3b, r0	; 59
    4dc4:	0f 90       	pop	r0
    4dc6:	0f be       	out	0x3f, r0	; 63
    4dc8:	0f 90       	pop	r0
    4dca:	1f 90       	pop	r1
    4dcc:	18 95       	reti

00004dce <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4dce:	1f 92       	push	r1
    4dd0:	0f 92       	push	r0
    4dd2:	0f b6       	in	r0, 0x3f	; 63
    4dd4:	0f 92       	push	r0
    4dd6:	0b b6       	in	r0, 0x3b	; 59
    4dd8:	0f 92       	push	r0
    4dda:	11 24       	eor	r1, r1
    4ddc:	2f 93       	push	r18
    4dde:	3f 93       	push	r19
    4de0:	4f 93       	push	r20
    4de2:	5f 93       	push	r21
    4de4:	6f 93       	push	r22
    4de6:	7f 93       	push	r23
    4de8:	8f 93       	push	r24
    4dea:	9f 93       	push	r25
    4dec:	af 93       	push	r26
    4dee:	bf 93       	push	r27
    4df0:	ef 93       	push	r30
    4df2:	ff 93       	push	r31
	if (--ax.a[Z].postscale_counter != 0) {
    4df4:	80 91 a0 24 	lds	r24, 0x24A0
    4df8:	90 91 a1 24 	lds	r25, 0x24A1
    4dfc:	01 97       	sbiw	r24, 0x01	; 1
    4dfe:	80 93 a0 24 	sts	0x24A0, r24
    4e02:	90 93 a1 24 	sts	0x24A1, r25
    4e06:	89 2b       	or	r24, r25
    4e08:	a1 f5       	brne	.+104    	; 0x4e72 <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4e0a:	e0 e8       	ldi	r30, 0x80	; 128
    4e0c:	f6 e0       	ldi	r31, 0x06	; 6
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
    4e10:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    4e12:	80 91 98 24 	lds	r24, 0x2498
    4e16:	90 91 99 24 	lds	r25, 0x2499
    4e1a:	a0 91 9a 24 	lds	r26, 0x249A
    4e1e:	b0 91 9b 24 	lds	r27, 0x249B
    4e22:	01 97       	sbiw	r24, 0x01	; 1
    4e24:	a1 09       	sbc	r26, r1
    4e26:	b1 09       	sbc	r27, r1
    4e28:	80 93 98 24 	sts	0x2498, r24
    4e2c:	90 93 99 24 	sts	0x2499, r25
    4e30:	a0 93 9a 24 	sts	0x249A, r26
    4e34:	b0 93 9b 24 	sts	0x249B, r27
    4e38:	00 97       	sbiw	r24, 0x00	; 0
    4e3a:	a1 05       	cpc	r26, r1
    4e3c:	b1 05       	cpc	r27, r1
    4e3e:	69 f4       	brne	.+26     	; 0x4e5a <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4e40:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4e44:	84 e0       	ldi	r24, 0x04	; 4
    4e46:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4e48:	80 91 75 24 	lds	r24, 0x2475
    4e4c:	8d 7f       	andi	r24, 0xFD	; 253
    4e4e:	80 93 75 24 	sts	0x2475, r24
		if (ax.active_axes == 0) {
    4e52:	88 23       	and	r24, r24
    4e54:	11 f4       	brne	.+4      	; 0x4e5a <__vector_47+0x8c>
			st_execute_move();
    4e56:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    4e5a:	80 91 9e 24 	lds	r24, 0x249E
    4e5e:	90 91 9f 24 	lds	r25, 0x249F
    4e62:	80 93 a0 24 	sts	0x24A0, r24
    4e66:	90 93 a1 24 	sts	0x24A1, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4e6a:	81 e0       	ldi	r24, 0x01	; 1
    4e6c:	e0 e8       	ldi	r30, 0x80	; 128
    4e6e:	f6 e0       	ldi	r31, 0x06	; 6
    4e70:	86 83       	std	Z+6, r24	; 0x06
}
    4e72:	ff 91       	pop	r31
    4e74:	ef 91       	pop	r30
    4e76:	bf 91       	pop	r27
    4e78:	af 91       	pop	r26
    4e7a:	9f 91       	pop	r25
    4e7c:	8f 91       	pop	r24
    4e7e:	7f 91       	pop	r23
    4e80:	6f 91       	pop	r22
    4e82:	5f 91       	pop	r21
    4e84:	4f 91       	pop	r20
    4e86:	3f 91       	pop	r19
    4e88:	2f 91       	pop	r18
    4e8a:	0f 90       	pop	r0
    4e8c:	0b be       	out	0x3b, r0	; 59
    4e8e:	0f 90       	pop	r0
    4e90:	0f be       	out	0x3f, r0	; 63
    4e92:	0f 90       	pop	r0
    4e94:	1f 90       	pop	r1
    4e96:	18 95       	reti

00004e98 <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4e98:	1f 92       	push	r1
    4e9a:	0f 92       	push	r0
    4e9c:	0f b6       	in	r0, 0x3f	; 63
    4e9e:	0f 92       	push	r0
    4ea0:	0b b6       	in	r0, 0x3b	; 59
    4ea2:	0f 92       	push	r0
    4ea4:	11 24       	eor	r1, r1
    4ea6:	2f 93       	push	r18
    4ea8:	3f 93       	push	r19
    4eaa:	4f 93       	push	r20
    4eac:	5f 93       	push	r21
    4eae:	6f 93       	push	r22
    4eb0:	7f 93       	push	r23
    4eb2:	8f 93       	push	r24
    4eb4:	9f 93       	push	r25
    4eb6:	af 93       	push	r26
    4eb8:	bf 93       	push	r27
    4eba:	ef 93       	push	r30
    4ebc:	ff 93       	push	r31
	if (--ax.a[Y].postscale_counter != 0) {
    4ebe:	80 91 90 24 	lds	r24, 0x2490
    4ec2:	90 91 91 24 	lds	r25, 0x2491
    4ec6:	01 97       	sbiw	r24, 0x01	; 1
    4ec8:	80 93 90 24 	sts	0x2490, r24
    4ecc:	90 93 91 24 	sts	0x2491, r25
    4ed0:	89 2b       	or	r24, r25
    4ed2:	a1 f5       	brne	.+104    	; 0x4f3c <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4ed4:	e0 ea       	ldi	r30, 0xA0	; 160
    4ed6:	f6 e0       	ldi	r31, 0x06	; 6
    4ed8:	81 e0       	ldi	r24, 0x01	; 1
    4eda:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    4edc:	80 91 88 24 	lds	r24, 0x2488
    4ee0:	90 91 89 24 	lds	r25, 0x2489
    4ee4:	a0 91 8a 24 	lds	r26, 0x248A
    4ee8:	b0 91 8b 24 	lds	r27, 0x248B
    4eec:	01 97       	sbiw	r24, 0x01	; 1
    4eee:	a1 09       	sbc	r26, r1
    4ef0:	b1 09       	sbc	r27, r1
    4ef2:	80 93 88 24 	sts	0x2488, r24
    4ef6:	90 93 89 24 	sts	0x2489, r25
    4efa:	a0 93 8a 24 	sts	0x248A, r26
    4efe:	b0 93 8b 24 	sts	0x248B, r27
    4f02:	00 97       	sbiw	r24, 0x00	; 0
    4f04:	a1 05       	cpc	r26, r1
    4f06:	b1 05       	cpc	r27, r1
    4f08:	69 f4       	brne	.+26     	; 0x4f24 <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4f0a:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4f0e:	84 e0       	ldi	r24, 0x04	; 4
    4f10:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4f12:	80 91 75 24 	lds	r24, 0x2475
    4f16:	8b 7f       	andi	r24, 0xFB	; 251
    4f18:	80 93 75 24 	sts	0x2475, r24
		if (ax.active_axes == 0) {
    4f1c:	88 23       	and	r24, r24
    4f1e:	11 f4       	brne	.+4      	; 0x4f24 <__vector_77+0x8c>
			st_execute_move();
    4f20:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    4f24:	80 91 8e 24 	lds	r24, 0x248E
    4f28:	90 91 8f 24 	lds	r25, 0x248F
    4f2c:	80 93 90 24 	sts	0x2490, r24
    4f30:	90 93 91 24 	sts	0x2491, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4f34:	81 e0       	ldi	r24, 0x01	; 1
    4f36:	e0 ea       	ldi	r30, 0xA0	; 160
    4f38:	f6 e0       	ldi	r31, 0x06	; 6
    4f3a:	86 83       	std	Z+6, r24	; 0x06
}
    4f3c:	ff 91       	pop	r31
    4f3e:	ef 91       	pop	r30
    4f40:	bf 91       	pop	r27
    4f42:	af 91       	pop	r26
    4f44:	9f 91       	pop	r25
    4f46:	8f 91       	pop	r24
    4f48:	7f 91       	pop	r23
    4f4a:	6f 91       	pop	r22
    4f4c:	5f 91       	pop	r21
    4f4e:	4f 91       	pop	r20
    4f50:	3f 91       	pop	r19
    4f52:	2f 91       	pop	r18
    4f54:	0f 90       	pop	r0
    4f56:	0b be       	out	0x3b, r0	; 59
    4f58:	0f 90       	pop	r0
    4f5a:	0f be       	out	0x3f, r0	; 63
    4f5c:	0f 90       	pop	r0
    4f5e:	1f 90       	pop	r1
    4f60:	18 95       	reti

00004f62 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4f62:	1f 92       	push	r1
    4f64:	0f 92       	push	r0
    4f66:	0f b6       	in	r0, 0x3f	; 63
    4f68:	0f 92       	push	r0
    4f6a:	0b b6       	in	r0, 0x3b	; 59
    4f6c:	0f 92       	push	r0
    4f6e:	11 24       	eor	r1, r1
    4f70:	2f 93       	push	r18
    4f72:	3f 93       	push	r19
    4f74:	4f 93       	push	r20
    4f76:	5f 93       	push	r21
    4f78:	6f 93       	push	r22
    4f7a:	7f 93       	push	r23
    4f7c:	8f 93       	push	r24
    4f7e:	9f 93       	push	r25
    4f80:	af 93       	push	r26
    4f82:	bf 93       	push	r27
    4f84:	ef 93       	push	r30
    4f86:	ff 93       	push	r31
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    4f88:	80 91 80 24 	lds	r24, 0x2480
    4f8c:	90 91 81 24 	lds	r25, 0x2481
    4f90:	01 97       	sbiw	r24, 0x01	; 1
    4f92:	80 93 80 24 	sts	0x2480, r24
    4f96:	90 93 81 24 	sts	0x2481, r25
    4f9a:	89 2b       	or	r24, r25
    4f9c:	d1 f5       	brne	.+116    	; 0x5012 <__vector_14+0xb0>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    4f9e:	80 91 83 24 	lds	r24, 0x2483
    4fa2:	88 23       	and	r24, r24
    4fa4:	21 f4       	brne	.+8      	; 0x4fae <__vector_14+0x4c>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    4fa6:	81 e0       	ldi	r24, 0x01	; 1
    4fa8:	e0 e0       	ldi	r30, 0x00	; 0
    4faa:	f6 e0       	ldi	r31, 0x06	; 6
    4fac:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    4fae:	80 91 78 24 	lds	r24, 0x2478
    4fb2:	90 91 79 24 	lds	r25, 0x2479
    4fb6:	a0 91 7a 24 	lds	r26, 0x247A
    4fba:	b0 91 7b 24 	lds	r27, 0x247B
    4fbe:	01 97       	sbiw	r24, 0x01	; 1
    4fc0:	a1 09       	sbc	r26, r1
    4fc2:	b1 09       	sbc	r27, r1
    4fc4:	80 93 78 24 	sts	0x2478, r24
    4fc8:	90 93 79 24 	sts	0x2479, r25
    4fcc:	a0 93 7a 24 	sts	0x247A, r26
    4fd0:	b0 93 7b 24 	sts	0x247B, r27
    4fd4:	00 97       	sbiw	r24, 0x00	; 0
    4fd6:	a1 05       	cpc	r26, r1
    4fd8:	b1 05       	cpc	r27, r1
    4fda:	79 f4       	brne	.+30     	; 0x4ffa <__vector_14+0x98>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    4fdc:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4fe0:	84 e0       	ldi	r24, 0x04	; 4
    4fe2:	e0 e0       	ldi	r30, 0x00	; 0
    4fe4:	f6 e0       	ldi	r31, 0x06	; 6
    4fe6:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    4fe8:	80 91 75 24 	lds	r24, 0x2475
    4fec:	87 7f       	andi	r24, 0xF7	; 247
    4fee:	80 93 75 24 	sts	0x2475, r24
		if (ax.active_axes == 0) {				// if all axes are done
    4ff2:	88 23       	and	r24, r24
    4ff4:	11 f4       	brne	.+4      	; 0x4ffa <__vector_14+0x98>
			st_execute_move();					// ...run the next move
    4ff6:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    4ffa:	80 91 7e 24 	lds	r24, 0x247E
    4ffe:	90 91 7f 24 	lds	r25, 0x247F
    5002:	80 93 80 24 	sts	0x2480, r24
    5006:	90 93 81 24 	sts	0x2481, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    500a:	81 e0       	ldi	r24, 0x01	; 1
    500c:	e0 e0       	ldi	r30, 0x00	; 0
    500e:	f6 e0       	ldi	r31, 0x06	; 6
    5010:	86 83       	std	Z+6, r24	; 0x06
}
    5012:	ff 91       	pop	r31
    5014:	ef 91       	pop	r30
    5016:	bf 91       	pop	r27
    5018:	af 91       	pop	r26
    501a:	9f 91       	pop	r25
    501c:	8f 91       	pop	r24
    501e:	7f 91       	pop	r23
    5020:	6f 91       	pop	r22
    5022:	5f 91       	pop	r21
    5024:	4f 91       	pop	r20
    5026:	3f 91       	pop	r19
    5028:	2f 91       	pop	r18
    502a:	0f 90       	pop	r0
    502c:	0b be       	out	0x3b, r0	; 59
    502e:	0f 90       	pop	r0
    5030:	0f be       	out	0x3f, r0	; 63
    5032:	0f 90       	pop	r0
    5034:	1f 90       	pop	r1
    5036:	18 95       	reti

00005038 <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    5038:	e0 ea       	ldi	r30, 0xA0	; 160
    503a:	f0 e0       	ldi	r31, 0x00	; 0
    503c:	82 81       	ldd	r24, Z+2	; 0x02
    503e:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    5040:	98 ed       	ldi	r25, 0xD8	; 216
    5042:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    5044:	82 83       	std	Z+2, r24	; 0x02
}
    5046:	08 95       	ret

00005048 <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    5048:	e0 ea       	ldi	r30, 0xA0	; 160
    504a:	f0 e0       	ldi	r31, 0x00	; 0
    504c:	82 81       	ldd	r24, Z+2	; 0x02
    504e:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    5050:	98 ed       	ldi	r25, 0xD8	; 216
    5052:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    5054:	82 83       	std	Z+2, r24	; 0x02
}
    5056:	08 95       	ret

00005058 <xio_fget_ln>:
 *	dev		XIO device enumeration
 */

int xio_fget_ln(uint8_t dev, char *buf, uint8_t len)
{
	switch (dev) {
    5058:	81 30       	cpi	r24, 0x01	; 1
    505a:	61 f0       	breq	.+24     	; 0x5074 <xio_fget_ln+0x1c>
    505c:	81 30       	cpi	r24, 0x01	; 1
    505e:	28 f0       	brcs	.+10     	; 0x506a <xio_fget_ln+0x12>
    5060:	83 30       	cpi	r24, 0x03	; 3
    5062:	69 f0       	breq	.+26     	; 0x507e <xio_fget_ln+0x26>
    5064:	21 e1       	ldi	r18, 0x11	; 17
    5066:	30 e0       	ldi	r19, 0x00	; 0
    5068:	0f c0       	rjmp	.+30     	; 0x5088 <xio_fget_ln+0x30>
		case (XIO_DEV_RS485): return (xio_rs485_readln(buf, len));
    506a:	cb 01       	movw	r24, r22
    506c:	64 2f       	mov	r22, r20
    506e:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <xio_rs485_readln>
    5072:	09 c0       	rjmp	.+18     	; 0x5086 <xio_fget_ln+0x2e>
		case (XIO_DEV_USB): return (xio_usb_readln(buf, len));
    5074:	cb 01       	movw	r24, r22
    5076:	64 2f       	mov	r22, r20
    5078:	0e 94 45 2b 	call	0x568a	; 0x568a <xio_usb_readln>
    507c:	04 c0       	rjmp	.+8      	; 0x5086 <xio_fget_ln+0x2e>
//		case (XIO_DEV_AUX): return (xio_aux_readln(buf, len));
		case (XIO_DEV_PGM): return (xio_pgm_readln(buf, len));
    507e:	cb 01       	movw	r24, r22
    5080:	64 2f       	mov	r22, r20
    5082:	0e 94 57 2f 	call	0x5eae	; 0x5eae <xio_pgm_readln>
    5086:	9c 01       	movw	r18, r24
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    5088:	c9 01       	movw	r24, r18
    508a:	08 95       	ret

0000508c <xio_control>:
 * xio_control() - common entry point for device control functions
 */

int8_t xio_control(uint8_t dev, const uint16_t control, const int16_t arg)
{
	switch (dev) {
    508c:	81 30       	cpi	r24, 0x01	; 1
    508e:	59 f0       	breq	.+22     	; 0x50a6 <xio_control+0x1a>
    5090:	81 30       	cpi	r24, 0x01	; 1
    5092:	20 f0       	brcs	.+8      	; 0x509c <xio_control+0x10>
    5094:	83 30       	cpi	r24, 0x03	; 3
    5096:	61 f0       	breq	.+24     	; 0x50b0 <xio_control+0x24>
    5098:	81 e1       	ldi	r24, 0x11	; 17
    509a:	08 95       	ret
		case (XIO_DEV_RS485): return (xio_rs485_control(control, arg));
    509c:	cb 01       	movw	r24, r22
    509e:	ba 01       	movw	r22, r20
    50a0:	0e 94 2f 34 	call	0x685e	; 0x685e <xio_rs485_control>
    50a4:	08 95       	ret
		case (XIO_DEV_USB): return (xio_usb_control(control, arg));
    50a6:	cb 01       	movw	r24, r22
    50a8:	ba 01       	movw	r22, r20
    50aa:	0e 94 58 29 	call	0x52b0	; 0x52b0 <xio_usb_control>
    50ae:	08 95       	ret
//		case (XIO_DEV_AUX): return (xio_aux_control(control, arg));
		case (XIO_DEV_PGM): return (xio_pgm_control(control, arg));
    50b0:	cb 01       	movw	r24, r22
    50b2:	ba 01       	movw	r22, r20
    50b4:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <xio_pgm_control>
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    50b8:	08 95       	ret

000050ba <xio_dev_init>:
 * xio_dev_init() - common entry point for device init functions
 */

int8_t xio_dev_init(uint8_t dev, const int16_t arg)
{
	switch (dev) {
    50ba:	81 30       	cpi	r24, 0x01	; 1
    50bc:	51 f0       	breq	.+20     	; 0x50d2 <xio_dev_init+0x18>
    50be:	81 30       	cpi	r24, 0x01	; 1
    50c0:	20 f0       	brcs	.+8      	; 0x50ca <xio_dev_init+0x10>
    50c2:	83 30       	cpi	r24, 0x03	; 3
    50c4:	59 f0       	breq	.+22     	; 0x50dc <xio_dev_init+0x22>
    50c6:	81 e1       	ldi	r24, 0x11	; 17
    50c8:	08 95       	ret
		case (XIO_DEV_RS485): xio_rs485_init(arg); return (TG_OK);
    50ca:	cb 01       	movw	r24, r22
    50cc:	0e 94 74 33 	call	0x66e8	; 0x66e8 <xio_rs485_init>
    50d0:	03 c0       	rjmp	.+6      	; 0x50d8 <xio_dev_init+0x1e>
		case (XIO_DEV_USB): xio_usb_init(arg); return (TG_OK);
    50d2:	cb 01       	movw	r24, r22
    50d4:	0e 94 9e 28 	call	0x513c	; 0x513c <xio_usb_init>
    50d8:	80 e0       	ldi	r24, 0x00	; 0
    50da:	08 95       	ret
//		case (XIO_DEV_AUX): xio_aux_init(arg); return (TG_OK);
		case (XIO_DEV_PGM): xio_pgm_init(arg); return (TG_OK);
    50dc:	cb 01       	movw	r24, r22
    50de:	0e 94 60 2e 	call	0x5cc0	; 0x5cc0 <xio_pgm_init>
    50e2:	80 e0       	ldi	r24, 0x00	; 0
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    50e4:	08 95       	ret

000050e6 <xio_init>:
 */

void xio_init(void)
{	
	// RS485 port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_BAUD_115200);
    50e6:	85 e0       	ldi	r24, 0x05	; 5
    50e8:	90 e1       	ldi	r25, 0x10	; 16
    50ea:	0e 94 9e 28 	call	0x513c	; 0x513c <xio_usb_init>

	// USB port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_SEMICOLONS | XIO_BAUD_115200);
    50ee:	85 e0       	ldi	r24, 0x05	; 5
    50f0:	90 e5       	ldi	r25, 0x50	; 80
    50f2:	0e 94 9e 28 	call	0x513c	; 0x513c <xio_usb_init>

	// PGM file defaults are:	XIO_RD | XIO_BLOCK
//	xio_pgm_init(XIO_ECHO | XIO_CRLF | XIO_LINEMODE | XIO_SEMICOLONS);
	xio_pgm_init(XIO_ECHO | XIO_CRLF | XIO_LINEMODE);
    50f6:	80 e0       	ldi	r24, 0x00	; 0
    50f8:	95 e1       	ldi	r25, 0x15	; 21
    50fa:	0e 94 60 2e 	call	0x5cc0	; 0x5cc0 <xio_pgm_init>
//	xio_pgm_init(XIO_LINEMODE);

	stddev = &dev_usb;				// stddev is a convenience
    50fe:	80 e0       	ldi	r24, 0x00	; 0
    5100:	90 e2       	ldi	r25, 0x20	; 32
    5102:	80 93 26 25 	sts	0x2526, r24
    5106:	90 93 27 25 	sts	0x2527, r25
	stdin = &dev_usb;				// define the console device
    510a:	80 93 80 25 	sts	0x2580, r24
    510e:	90 93 81 25 	sts	0x2581, r25
	stdout = &dev_usb;				// ...
    5112:	80 93 82 25 	sts	0x2582, r24
    5116:	90 93 83 25 	sts	0x2583, r25
	stderr = &dev_usb;				// ...
    511a:	80 93 84 25 	sts	0x2584, r24
    511e:	90 93 85 25 	sts	0x2585, r25

	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    5122:	0f 92       	push	r0
    5124:	0f 92       	push	r0
    5126:	84 e2       	ldi	r24, 0x24	; 36
    5128:	97 e0       	ldi	r25, 0x07	; 7
    512a:	ed b7       	in	r30, 0x3d	; 61
    512c:	fe b7       	in	r31, 0x3e	; 62
    512e:	81 83       	std	Z+1, r24	; 0x01
    5130:	92 83       	std	Z+2, r25	; 0x02
    5132:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
    5136:	0f 90       	pop	r0
    5138:	0f 90       	pop	r0
}
    513a:	08 95       	ret

0000513c <xio_usb_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_usb_init(const uint16_t control)
{
    513c:	9c 01       	movw	r18, r24
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    513e:	e8 2f       	mov	r30, r24
    5140:	ef 70       	andi	r30, 0x0F	; 15

	// transfer control flags to internal flag bits
	f.flags = XIO_FLAG_USB_DEFS_gm;		// set flags to defaults & initial state
    5142:	87 e3       	ldi	r24, 0x37	; 55
    5144:	90 e0       	ldi	r25, 0x00	; 0
    5146:	80 93 4f 22 	sts	0x224F, r24
    514a:	90 93 50 22 	sts	0x2250, r25
		f.flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		f.flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    514e:	26 ff       	sbrs	r18, 6
    5150:	06 c0       	rjmp	.+12     	; 0x515e <xio_usb_init+0x22>
		f.flags |= XIO_FLAG_BLOCK_bm;
    5152:	87 e3       	ldi	r24, 0x37	; 55
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	80 93 4f 22 	sts	0x224F, r24
    515a:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_NOBLOCK) {
    515e:	27 ff       	sbrs	r18, 7
    5160:	06 c0       	rjmp	.+12     	; 0x516e <xio_usb_init+0x32>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    5162:	83 e3       	ldi	r24, 0x33	; 51
    5164:	90 e0       	ldi	r25, 0x00	; 0
    5166:	80 93 4f 22 	sts	0x224F, r24
    516a:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_ECHO) {
    516e:	30 ff       	sbrs	r19, 0
    5170:	09 c0       	rjmp	.+18     	; 0x5184 <xio_usb_init+0x48>
		f.flags |= XIO_FLAG_ECHO_bm;
    5172:	80 91 4f 22 	lds	r24, 0x224F
    5176:	90 91 50 22 	lds	r25, 0x2250
    517a:	80 61       	ori	r24, 0x10	; 16
    517c:	80 93 4f 22 	sts	0x224F, r24
    5180:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_NOECHO) {
    5184:	31 ff       	sbrs	r19, 1
    5186:	09 c0       	rjmp	.+18     	; 0x519a <xio_usb_init+0x5e>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    5188:	80 91 4f 22 	lds	r24, 0x224F
    518c:	90 91 50 22 	lds	r25, 0x2250
    5190:	8f 7e       	andi	r24, 0xEF	; 239
    5192:	80 93 4f 22 	sts	0x224F, r24
    5196:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_CRLF) {
    519a:	32 ff       	sbrs	r19, 2
    519c:	09 c0       	rjmp	.+18     	; 0x51b0 <xio_usb_init+0x74>
		f.flags |= XIO_FLAG_CRLF_bm;
    519e:	80 91 4f 22 	lds	r24, 0x224F
    51a2:	90 91 50 22 	lds	r25, 0x2250
    51a6:	80 62       	ori	r24, 0x20	; 32
    51a8:	80 93 4f 22 	sts	0x224F, r24
    51ac:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_NOCRLF) {
    51b0:	33 ff       	sbrs	r19, 3
    51b2:	09 c0       	rjmp	.+18     	; 0x51c6 <xio_usb_init+0x8a>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    51b4:	80 91 4f 22 	lds	r24, 0x224F
    51b8:	90 91 50 22 	lds	r25, 0x2250
    51bc:	8f 7d       	andi	r24, 0xDF	; 223
    51be:	80 93 4f 22 	sts	0x224F, r24
    51c2:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_LINEMODE) {
    51c6:	34 ff       	sbrs	r19, 4
    51c8:	09 c0       	rjmp	.+18     	; 0x51dc <xio_usb_init+0xa0>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    51ca:	80 91 4f 22 	lds	r24, 0x224F
    51ce:	90 91 50 22 	lds	r25, 0x2250
    51d2:	80 64       	ori	r24, 0x40	; 64
    51d4:	80 93 4f 22 	sts	0x224F, r24
    51d8:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_NOLINEMODE) {
    51dc:	35 ff       	sbrs	r19, 5
    51de:	09 c0       	rjmp	.+18     	; 0x51f2 <xio_usb_init+0xb6>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    51e0:	80 91 4f 22 	lds	r24, 0x224F
    51e4:	90 91 50 22 	lds	r25, 0x2250
    51e8:	8f 7b       	andi	r24, 0xBF	; 191
    51ea:	80 93 4f 22 	sts	0x224F, r24
    51ee:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_SEMICOLONS) {
    51f2:	36 ff       	sbrs	r19, 6
    51f4:	09 c0       	rjmp	.+18     	; 0x5208 <xio_usb_init+0xcc>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    51f6:	80 91 4f 22 	lds	r24, 0x224F
    51fa:	90 91 50 22 	lds	r25, 0x2250
    51fe:	80 68       	ori	r24, 0x80	; 128
    5200:	80 93 4f 22 	sts	0x224F, r24
    5204:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5208:	37 ff       	sbrs	r19, 7
    520a:	09 c0       	rjmp	.+18     	; 0x521e <xio_usb_init+0xe2>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    520c:	80 91 4f 22 	lds	r24, 0x224F
    5210:	90 91 50 22 	lds	r25, 0x2250
    5214:	8f 77       	andi	r24, 0x7F	; 127
    5216:	80 93 4f 22 	sts	0x224F, r24
    521a:	90 93 50 22 	sts	0x2250, r25
	}

	// character signals and error returns
	f.sig = 0;
    521e:	10 92 52 22 	sts	0x2252, r1
	dev_usb.udata = &(f.sig);				// bind sig register to FILE struct
    5222:	82 e5       	ldi	r24, 0x52	; 82
    5224:	92 e2       	ldi	r25, 0x22	; 34
    5226:	80 93 0c 20 	sts	0x200C, r24
    522a:	90 93 0d 20 	sts	0x200D, r25

	// setup internal RX/TX buffers
	f.rx_buf_head = 1;						// can't use location 0
    522e:	81 e0       	ldi	r24, 0x01	; 1
    5230:	80 93 59 22 	sts	0x2259, r24
	f.rx_buf_tail = 1;
    5234:	80 93 58 22 	sts	0x2258, r24
	f.tx_buf_head = 1;
    5238:	80 93 5b 22 	sts	0x225B, r24
	f.tx_buf_tail = 1;
    523c:	80 93 5a 22 	sts	0x225A, r24
	f.len = sizeof(f.buf);					// offset to zero
    5240:	82 e0       	ldi	r24, 0x02	; 2
    5242:	80 93 55 22 	sts	0x2255, r24

	f.usart = &USB_USART;					// bind USART structure
    5246:	80 ea       	ldi	r24, 0xA0	; 160
    5248:	98 e0       	ldi	r25, 0x08	; 8
    524a:	80 93 5d 22 	sts	0x225D, r24
    524e:	90 93 5e 22 	sts	0x225E, r25
	f.port = &USB_PORT;						// bind PORT structure
    5252:	80 e4       	ldi	r24, 0x40	; 64
    5254:	96 e0       	ldi	r25, 0x06	; 6
    5256:	80 93 5f 22 	sts	0x225F, r24
    525a:	90 93 60 22 	sts	0x2260, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    525e:	ee 23       	and	r30, r30
    5260:	09 f4       	brne	.+2      	; 0x5264 <xio_usb_init+0x128>
    5262:	e5 e0       	ldi	r30, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    5264:	8e 2f       	mov	r24, r30
    5266:	90 e0       	ldi	r25, 0x00	; 0
    5268:	fc 01       	movw	r30, r24
    526a:	e1 50       	subi	r30, 0x01	; 1
    526c:	f2 4e       	sbci	r31, 0xE2	; 226
    526e:	e4 91       	lpm	r30, Z+
    5270:	a0 ea       	ldi	r26, 0xA0	; 160
    5272:	b8 e0       	ldi	r27, 0x08	; 8
    5274:	16 96       	adiw	r26, 0x06	; 6
    5276:	ec 93       	st	X, r30
    5278:	16 97       	sbiw	r26, 0x06	; 6
	f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    527a:	86 5f       	subi	r24, 0xF6	; 246
    527c:	91 4e       	sbci	r25, 0xE1	; 225
    527e:	fc 01       	movw	r30, r24
    5280:	84 91       	lpm	r24, Z+
    5282:	17 96       	adiw	r26, 0x07	; 7
    5284:	8c 93       	st	X, r24
    5286:	17 97       	sbiw	r26, 0x07	; 7
	f.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm; // enable tx and rx on USART
    5288:	88 e1       	ldi	r24, 0x18	; 24
    528a:	14 96       	adiw	r26, 0x04	; 4
    528c:	8c 93       	st	X, r24
    528e:	14 97       	sbiw	r26, 0x04	; 4
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    5290:	81 e2       	ldi	r24, 0x21	; 33
    5292:	13 96       	adiw	r26, 0x03	; 3
    5294:	8c 93       	st	X, r24

	f.port->DIRCLR = USB_RX_bm;	 			// clr RX pin as input
    5296:	e0 e4       	ldi	r30, 0x40	; 64
    5298:	f6 e0       	ldi	r31, 0x06	; 6
    529a:	84 e0       	ldi	r24, 0x04	; 4
    529c:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_TX_bm; 			// set TX pin as output
    529e:	88 e0       	ldi	r24, 0x08	; 8
    52a0:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_TX_bm;				// set TX HI as initial state
    52a2:	85 83       	std	Z+5, r24	; 0x05
	f.port->DIRCLR = USB_CTS_bm; 			// set CTS pin as input
    52a4:	81 e0       	ldi	r24, 0x01	; 1
    52a6:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_RTS_bm; 			// set RTS pin as output
    52a8:	82 e0       	ldi	r24, 0x02	; 2
    52aa:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
    52ac:	85 83       	std	Z+5, r24	; 0x05
//	f.port->OUTCLR = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
}
    52ae:	08 95       	ret

000052b0 <xio_usb_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_usb_control(const uint16_t control, const int16_t arg)
{
    52b0:	ac 01       	movw	r20, r24
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    52b2:	8f 70       	andi	r24, 0x0F	; 15
    52b4:	90 70       	andi	r25, 0x00	; 0
    52b6:	00 97       	sbiw	r24, 0x00	; 0
    52b8:	91 f0       	breq	.+36     	; 0x52de <xio_usb_control+0x2e>
		f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    52ba:	a0 91 5d 22 	lds	r26, 0x225D
    52be:	b0 91 5e 22 	lds	r27, 0x225E
    52c2:	9c 01       	movw	r18, r24
    52c4:	21 50       	subi	r18, 0x01	; 1
    52c6:	32 4e       	sbci	r19, 0xE2	; 226
    52c8:	f9 01       	movw	r30, r18
    52ca:	24 91       	lpm	r18, Z+
    52cc:	16 96       	adiw	r26, 0x06	; 6
    52ce:	2c 93       	st	X, r18
    52d0:	16 97       	sbiw	r26, 0x06	; 6
		f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    52d2:	86 5f       	subi	r24, 0xF6	; 246
    52d4:	91 4e       	sbci	r25, 0xE1	; 225
    52d6:	fc 01       	movw	r30, r24
    52d8:	84 91       	lpm	r24, Z+
    52da:	17 96       	adiw	r26, 0x07	; 7
    52dc:	8c 93       	st	X, r24
	}
	if (control & XIO_BLOCK) {
    52de:	46 ff       	sbrs	r20, 6
    52e0:	09 c0       	rjmp	.+18     	; 0x52f4 <xio_usb_control+0x44>
		f.flags |= XIO_FLAG_BLOCK_bm;
    52e2:	80 91 4f 22 	lds	r24, 0x224F
    52e6:	90 91 50 22 	lds	r25, 0x2250
    52ea:	84 60       	ori	r24, 0x04	; 4
    52ec:	80 93 4f 22 	sts	0x224F, r24
    52f0:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_NOBLOCK) {
    52f4:	47 ff       	sbrs	r20, 7
    52f6:	09 c0       	rjmp	.+18     	; 0x530a <xio_usb_control+0x5a>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    52f8:	80 91 4f 22 	lds	r24, 0x224F
    52fc:	90 91 50 22 	lds	r25, 0x2250
    5300:	8b 7f       	andi	r24, 0xFB	; 251
    5302:	80 93 4f 22 	sts	0x224F, r24
    5306:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_ECHO) {
    530a:	50 ff       	sbrs	r21, 0
    530c:	09 c0       	rjmp	.+18     	; 0x5320 <xio_usb_control+0x70>
		f.flags |= XIO_FLAG_ECHO_bm;
    530e:	80 91 4f 22 	lds	r24, 0x224F
    5312:	90 91 50 22 	lds	r25, 0x2250
    5316:	80 61       	ori	r24, 0x10	; 16
    5318:	80 93 4f 22 	sts	0x224F, r24
    531c:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_NOECHO) {
    5320:	51 ff       	sbrs	r21, 1
    5322:	09 c0       	rjmp	.+18     	; 0x5336 <xio_usb_control+0x86>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    5324:	80 91 4f 22 	lds	r24, 0x224F
    5328:	90 91 50 22 	lds	r25, 0x2250
    532c:	8f 7e       	andi	r24, 0xEF	; 239
    532e:	80 93 4f 22 	sts	0x224F, r24
    5332:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_CRLF) {
    5336:	52 ff       	sbrs	r21, 2
    5338:	09 c0       	rjmp	.+18     	; 0x534c <xio_usb_control+0x9c>
		f.flags |= XIO_FLAG_CRLF_bm;
    533a:	80 91 4f 22 	lds	r24, 0x224F
    533e:	90 91 50 22 	lds	r25, 0x2250
    5342:	80 62       	ori	r24, 0x20	; 32
    5344:	80 93 4f 22 	sts	0x224F, r24
    5348:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_NOCRLF) {
    534c:	53 ff       	sbrs	r21, 3
    534e:	09 c0       	rjmp	.+18     	; 0x5362 <xio_usb_control+0xb2>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    5350:	80 91 4f 22 	lds	r24, 0x224F
    5354:	90 91 50 22 	lds	r25, 0x2250
    5358:	8f 7d       	andi	r24, 0xDF	; 223
    535a:	80 93 4f 22 	sts	0x224F, r24
    535e:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_LINEMODE) {
    5362:	54 ff       	sbrs	r21, 4
    5364:	09 c0       	rjmp	.+18     	; 0x5378 <xio_usb_control+0xc8>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    5366:	80 91 4f 22 	lds	r24, 0x224F
    536a:	90 91 50 22 	lds	r25, 0x2250
    536e:	80 64       	ori	r24, 0x40	; 64
    5370:	80 93 4f 22 	sts	0x224F, r24
    5374:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_NOLINEMODE) {
    5378:	55 ff       	sbrs	r21, 5
    537a:	09 c0       	rjmp	.+18     	; 0x538e <xio_usb_control+0xde>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    537c:	80 91 4f 22 	lds	r24, 0x224F
    5380:	90 91 50 22 	lds	r25, 0x2250
    5384:	8f 7b       	andi	r24, 0xBF	; 191
    5386:	80 93 4f 22 	sts	0x224F, r24
    538a:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_SEMICOLONS) {
    538e:	56 ff       	sbrs	r21, 6
    5390:	09 c0       	rjmp	.+18     	; 0x53a4 <xio_usb_control+0xf4>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    5392:	80 91 4f 22 	lds	r24, 0x224F
    5396:	90 91 50 22 	lds	r25, 0x2250
    539a:	80 68       	ori	r24, 0x80	; 128
    539c:	80 93 4f 22 	sts	0x224F, r24
    53a0:	90 93 50 22 	sts	0x2250, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    53a4:	57 ff       	sbrs	r21, 7
    53a6:	09 c0       	rjmp	.+18     	; 0x53ba <xio_usb_control+0x10a>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    53a8:	80 91 4f 22 	lds	r24, 0x224F
    53ac:	90 91 50 22 	lds	r25, 0x2250
    53b0:	8f 77       	andi	r24, 0x7F	; 127
    53b2:	80 93 4f 22 	sts	0x224F, r24
    53b6:	90 93 50 22 	sts	0x2250, r25
	}
	return (0);
}
    53ba:	80 e0       	ldi	r24, 0x00	; 0
    53bc:	08 95       	ret

000053be <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)		//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    53be:	1f 92       	push	r1
    53c0:	0f 92       	push	r0
    53c2:	0f b6       	in	r0, 0x3f	; 63
    53c4:	0f 92       	push	r0
    53c6:	0b b6       	in	r0, 0x3b	; 59
    53c8:	0f 92       	push	r0
    53ca:	11 24       	eor	r1, r1
    53cc:	8f 93       	push	r24
    53ce:	9f 93       	push	r25
    53d0:	af 93       	push	r26
    53d2:	bf 93       	push	r27
    53d4:	ef 93       	push	r30
    53d6:	ff 93       	push	r31
	if (f.tx_buf_head == f.tx_buf_tail) {			// buffer empty - disable ints
    53d8:	90 91 5b 22 	lds	r25, 0x225B
    53dc:	80 91 5a 22 	lds	r24, 0x225A
    53e0:	98 17       	cp	r25, r24
    53e2:	39 f4       	brne	.+14     	; 0x53f2 <__vector_26+0x34>
		f.usart->CTRLA = USARTC0_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    53e4:	e0 91 5d 22 	lds	r30, 0x225D
    53e8:	f0 91 5e 22 	lds	r31, 0x225E
    53ec:	80 e2       	ldi	r24, 0x20	; 32
    53ee:	83 83       	std	Z+3, r24	; 0x03
    53f0:	1e c0       	rjmp	.+60     	; 0x542e <__vector_26+0x70>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(f.flags)) {
    53f2:	80 91 4f 22 	lds	r24, 0x224F
    53f6:	90 91 50 22 	lds	r25, 0x2250
    53fa:	93 fd       	sbrc	r25, 3
    53fc:	18 c0       	rjmp	.+48     	; 0x542e <__vector_26+0x70>
		if (--(f.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    53fe:	80 91 5a 22 	lds	r24, 0x225A
    5402:	81 50       	subi	r24, 0x01	; 1
    5404:	80 93 5a 22 	sts	0x225A, r24
    5408:	80 91 5a 22 	lds	r24, 0x225A
    540c:	88 23       	and	r24, r24
    540e:	19 f4       	brne	.+6      	; 0x5416 <__vector_26+0x58>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    5410:	81 e1       	ldi	r24, 0x11	; 17
    5412:	80 93 5a 22 	sts	0x225A, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];	// write char to TX DATA register
    5416:	e0 91 5d 22 	lds	r30, 0x225D
    541a:	f0 91 5e 22 	lds	r31, 0x225E
    541e:	a0 91 5a 22 	lds	r26, 0x225A
    5422:	b0 e0       	ldi	r27, 0x00	; 0
    5424:	a1 5b       	subi	r26, 0xB1	; 177
    5426:	bd 4d       	sbci	r27, 0xDD	; 221
    5428:	94 96       	adiw	r26, 0x24	; 36
    542a:	8c 91       	ld	r24, X
    542c:	80 83       	st	Z, r24
	}
}
    542e:	ff 91       	pop	r31
    5430:	ef 91       	pop	r30
    5432:	bf 91       	pop	r27
    5434:	af 91       	pop	r26
    5436:	9f 91       	pop	r25
    5438:	8f 91       	pop	r24
    543a:	0f 90       	pop	r0
    543c:	0b be       	out	0x3b, r0	; 59
    543e:	0f 90       	pop	r0
    5440:	0f be       	out	0x3f, r0	; 63
    5442:	0f 90       	pop	r0
    5444:	1f 90       	pop	r1
    5446:	18 95       	reti

00005448 <xio_usb_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
    5448:	48 2f       	mov	r20, r24
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    544a:	20 91 4f 22 	lds	r18, 0x224F
    544e:	30 91 50 22 	lds	r19, 0x2250
    5452:	d9 01       	movw	r26, r18
    5454:	a4 70       	andi	r26, 0x04	; 4
    5456:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    5458:	b9 01       	movw	r22, r18
    545a:	60 72       	andi	r22, 0x20	; 32
    545c:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
    545e:	90 91 5b 22 	lds	r25, 0x225B
    5462:	91 50       	subi	r25, 0x01	; 1
    5464:	c1 f4       	brne	.+48     	; 0x5496 <xio_usb_putc+0x4e>
    5466:	91 e1       	ldi	r25, 0x11	; 17
    5468:	16 c0       	rjmp	.+44     	; 0x5496 <xio_usb_putc+0x4e>
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    546a:	10 97       	sbiw	r26, 0x00	; 0
    546c:	61 f0       	breq	.+24     	; 0x5486 <xio_usb_putc+0x3e>
			sleep_mode();
    546e:	80 91 48 00 	lds	r24, 0x0048
    5472:	81 60       	ori	r24, 0x01	; 1
    5474:	80 93 48 00 	sts	0x0048, r24
    5478:	88 95       	sleep
    547a:	80 91 48 00 	lds	r24, 0x0048
    547e:	8e 7f       	andi	r24, 0xFE	; 254
    5480:	80 93 48 00 	sts	0x0048, r24
    5484:	08 c0       	rjmp	.+16     	; 0x5496 <xio_usb_putc+0x4e>
    5486:	90 93 5c 22 	sts	0x225C, r25
		} else {
			f.sig = XIO_SIG_EAGAIN;
    548a:	81 e0       	ldi	r24, 0x01	; 1
    548c:	80 93 52 22 	sts	0x2252, r24
    5490:	2f ef       	ldi	r18, 0xFF	; 255
    5492:	3f ef       	ldi	r19, 0xFF	; 255
    5494:	54 c0       	rjmp	.+168    	; 0x553e <xio_usb_putc+0xf6>
int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
    5496:	80 91 5a 22 	lds	r24, 0x225A
    549a:	98 17       	cp	r25, r24
    549c:	31 f3       	breq	.-52     	; 0x546a <xio_usb_putc+0x22>
			f.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
    549e:	90 93 5b 22 	sts	0x225B, r25
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer
    54a2:	e0 91 5b 22 	lds	r30, 0x225B
    54a6:	f0 e0       	ldi	r31, 0x00	; 0
    54a8:	e1 5b       	subi	r30, 0xB1	; 177
    54aa:	fd 4d       	sbci	r31, 0xDD	; 221
    54ac:	44 a3       	std	Z+36, r20	; 0x24

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    54ae:	61 15       	cp	r22, r1
    54b0:	71 05       	cpc	r23, r1
    54b2:	21 f0       	breq	.+8      	; 0x54bc <xio_usb_putc+0x74>
    54b4:	4a 30       	cpi	r20, 0x0A	; 10
    54b6:	11 f4       	brne	.+4      	; 0x54bc <xio_usb_putc+0x74>
    54b8:	4d e0       	ldi	r20, 0x0D	; 13
    54ba:	d1 cf       	rjmp	.-94     	; 0x545e <xio_usb_putc+0x16>
    54bc:	90 93 5c 22 	sts	0x225C, r25
		return xio_usb_putc('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (f.usart->STATUS & 0x20) {
    54c0:	a0 91 5d 22 	lds	r26, 0x225D
    54c4:	b0 91 5e 22 	lds	r27, 0x225E
    54c8:	11 96       	adiw	r26, 0x01	; 1
    54ca:	8c 91       	ld	r24, X
    54cc:	11 97       	sbiw	r26, 0x01	; 1
    54ce:	85 ff       	sbrs	r24, 5
    54d0:	27 c0       	rjmp	.+78     	; 0x5520 <xio_usb_putc+0xd8>
		if (f.tx_buf_head == f.tx_buf_tail) {	// buf might be empty if IRQ got it
    54d2:	90 91 5b 22 	lds	r25, 0x225B
    54d6:	80 91 5a 22 	lds	r24, 0x225A
    54da:	98 17       	cp	r25, r24
    54dc:	71 f1       	breq	.+92     	; 0x553a <xio_usb_putc+0xf2>
			return (0);
		}
		f.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    54de:	38 60       	ori	r19, 0x08	; 8
    54e0:	20 93 4f 22 	sts	0x224F, r18
    54e4:	30 93 50 22 	sts	0x2250, r19
		if (--(f.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    54e8:	80 91 5a 22 	lds	r24, 0x225A
    54ec:	81 50       	subi	r24, 0x01	; 1
    54ee:	80 93 5a 22 	sts	0x225A, r24
    54f2:	80 91 5a 22 	lds	r24, 0x225A
    54f6:	88 23       	and	r24, r24
    54f8:	19 f4       	brne	.+6      	; 0x5500 <xio_usb_putc+0xb8>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    54fa:	81 e1       	ldi	r24, 0x11	; 17
    54fc:	80 93 5a 22 	sts	0x225A, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];// write char to TX DATA register
    5500:	e0 91 5a 22 	lds	r30, 0x225A
    5504:	f0 e0       	ldi	r31, 0x00	; 0
    5506:	e1 5b       	subi	r30, 0xB1	; 177
    5508:	fd 4d       	sbci	r31, 0xDD	; 221
    550a:	84 a1       	ldd	r24, Z+36	; 0x24
    550c:	8c 93       	st	X, r24
		f.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    550e:	80 91 4f 22 	lds	r24, 0x224F
    5512:	90 91 50 22 	lds	r25, 0x2250
    5516:	97 7f       	andi	r25, 0xF7	; 247
    5518:	80 93 4f 22 	sts	0x224F, r24
    551c:	90 93 50 22 	sts	0x2250, r25
	}
	// enable interrupts regardless
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    5520:	e0 91 5d 22 	lds	r30, 0x225D
    5524:	f0 91 5e 22 	lds	r31, 0x225E
    5528:	81 e2       	ldi	r24, 0x21	; 33
    552a:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    552c:	80 91 a2 00 	lds	r24, 0x00A2
    5530:	81 60       	ori	r24, 0x01	; 1
    5532:	e0 ea       	ldi	r30, 0xA0	; 160
    5534:	f0 e0       	ldi	r31, 0x00	; 0
    5536:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    5538:	78 94       	sei
    553a:	20 e0       	ldi	r18, 0x00	; 0
    553c:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    553e:	c9 01       	movw	r24, r18
    5540:	08 95       	ret

00005542 <xio_usb_getc>:
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(f.flags)) {
    5542:	20 91 4f 22 	lds	r18, 0x224F
    5546:	30 91 50 22 	lds	r19, 0x2250
    554a:	24 70       	andi	r18, 0x04	; 4
    554c:	30 70       	andi	r19, 0x00	; 0
    554e:	15 c0       	rjmp	.+42     	; 0x557a <xio_usb_getc+0x38>
    5550:	21 15       	cp	r18, r1
    5552:	31 05       	cpc	r19, r1
    5554:	61 f0       	breq	.+24     	; 0x556e <xio_usb_getc+0x2c>
			sleep_mode();
    5556:	80 91 48 00 	lds	r24, 0x0048
    555a:	81 60       	ori	r24, 0x01	; 1
    555c:	80 93 48 00 	sts	0x0048, r24
    5560:	88 95       	sleep
    5562:	80 91 48 00 	lds	r24, 0x0048
    5566:	8e 7f       	andi	r24, 0xFE	; 254
    5568:	80 93 48 00 	sts	0x0048, r24
    556c:	06 c0       	rjmp	.+12     	; 0x557a <xio_usb_getc+0x38>
		} else {
			f.sig = XIO_SIG_EAGAIN;
    556e:	81 e0       	ldi	r24, 0x01	; 1
    5570:	80 93 52 22 	sts	0x2252, r24
    5574:	2f ef       	ldi	r18, 0xFF	; 255
    5576:	3f ef       	ldi	r19, 0xFF	; 255
    5578:	26 c0       	rjmp	.+76     	; 0x55c6 <xio_usb_getc+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
    557a:	90 91 59 22 	lds	r25, 0x2259
    557e:	80 91 58 22 	lds	r24, 0x2258
    5582:	98 17       	cp	r25, r24
    5584:	29 f3       	breq	.-54     	; 0x5550 <xio_usb_getc+0xe>
		} else {
			f.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    5586:	80 91 58 22 	lds	r24, 0x2258
    558a:	81 50       	subi	r24, 0x01	; 1
    558c:	80 93 58 22 	sts	0x2258, r24
    5590:	80 91 58 22 	lds	r24, 0x2258
    5594:	88 23       	and	r24, r24
    5596:	19 f4       	brne	.+6      	; 0x559e <xio_usb_getc+0x5c>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    5598:	81 e1       	ldi	r24, 0x11	; 17
    559a:	80 93 58 22 	sts	0x2258, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    559e:	e0 91 58 22 	lds	r30, 0x2258
    55a2:	f0 e0       	ldi	r31, 0x00	; 0
    55a4:	e1 5b       	subi	r30, 0xB1	; 177
    55a6:	fd 4d       	sbci	r31, 0xDD	; 221
    55a8:	82 89       	ldd	r24, Z+18	; 0x12
    55aa:	8f 77       	andi	r24, 0x7F	; 127
    55ac:	80 93 53 22 	sts	0x2253, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[f.c])))());
    55b0:	90 e0       	ldi	r25, 0x00	; 0
    55b2:	88 0f       	add	r24, r24
    55b4:	99 1f       	adc	r25, r25
    55b6:	80 5b       	subi	r24, 0xB0	; 176
    55b8:	97 4f       	sbci	r25, 0xF7	; 247
    55ba:	fc 01       	movw	r30, r24
    55bc:	25 91       	lpm	r18, Z+
    55be:	34 91       	lpm	r19, Z+
    55c0:	f9 01       	movw	r30, r18
    55c2:	19 95       	eicall
    55c4:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    55c6:	c9 01       	movw	r24, r18
    55c8:	08 95       	ret

000055ca <_getc_char>:

/* xio_usb_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    55ca:	80 91 4f 22 	lds	r24, 0x224F
    55ce:	84 ff       	sbrs	r24, 4
    55d0:	08 c0       	rjmp	.+16     	; 0x55e2 <_getc_char+0x18>
    55d2:	60 91 82 25 	lds	r22, 0x2582
    55d6:	70 91 83 25 	lds	r23, 0x2583
    55da:	80 91 53 22 	lds	r24, 0x2253
    55de:	0e 94 24 2a 	call	0x5448	; 0x5448 <xio_usb_putc>
	return(f.c);
}
    55e2:	80 91 53 22 	lds	r24, 0x2253
    55e6:	90 e0       	ldi	r25, 0x00	; 0
    55e8:	08 95       	ret

000055ea <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(f.flags)) f.c = '\n';
    55ea:	90 91 4f 22 	lds	r25, 0x224F
    55ee:	96 ff       	sbrs	r25, 6
    55f0:	03 c0       	rjmp	.+6      	; 0x55f8 <_getc_NEWLINE+0xe>
    55f2:	8a e0       	ldi	r24, 0x0A	; 10
    55f4:	80 93 53 22 	sts	0x2253, r24
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    55f8:	94 ff       	sbrs	r25, 4
    55fa:	08 c0       	rjmp	.+16     	; 0x560c <_getc_NEWLINE+0x22>
    55fc:	60 91 82 25 	lds	r22, 0x2582
    5600:	70 91 83 25 	lds	r23, 0x2583
    5604:	80 91 53 22 	lds	r24, 0x2253
    5608:	0e 94 24 2a 	call	0x5448	; 0x5448 <xio_usb_putc>
	return(f.c);
}
    560c:	80 91 53 22 	lds	r24, 0x2253
    5610:	90 e0       	ldi	r25, 0x00	; 0
    5612:	08 95       	ret

00005614 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(f.flags)) {
    5614:	80 91 4f 22 	lds	r24, 0x224F
    5618:	87 ff       	sbrs	r24, 7
    561a:	03 c0       	rjmp	.+6      	; 0x5622 <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    561c:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <_getc_NEWLINE>
    5620:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    5622:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <_getc_char>
}
    5626:	08 95       	ret

00005628 <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	f.sig = XIO_SIG_DELETE;
    5628:	89 e0       	ldi	r24, 0x09	; 9
    562a:	80 93 52 22 	sts	0x2252, r24
	return(_FDEV_ERR);
}
    562e:	8f ef       	ldi	r24, 0xFF	; 255
    5630:	9f ef       	ldi	r25, 0xFF	; 255
    5632:	08 95       	ret

00005634 <_xio_usb_readchar>:
	}
}

int _xio_usb_readchar(char *buf, uint8_t len)
{
	if (f.rx_buf_head == f.rx_buf_tail) {		// RX ISR buffer empty
    5634:	90 91 59 22 	lds	r25, 0x2259
    5638:	80 91 58 22 	lds	r24, 0x2258
    563c:	98 17       	cp	r25, r24
    563e:	19 f4       	brne	.+6      	; 0x5646 <_xio_usb_readchar+0x12>
    5640:	28 e0       	ldi	r18, 0x08	; 8
    5642:	30 e0       	ldi	r19, 0x00	; 0
    5644:	20 c0       	rjmp	.+64     	; 0x5686 <_xio_usb_readchar+0x52>
		return(TG_BUFFER_EMPTY);
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RX queue read pointer)
    5646:	80 91 58 22 	lds	r24, 0x2258
    564a:	81 50       	subi	r24, 0x01	; 1
    564c:	80 93 58 22 	sts	0x2258, r24
    5650:	80 91 58 22 	lds	r24, 0x2258
    5654:	88 23       	and	r24, r24
    5656:	19 f4       	brne	.+6      	; 0x565e <_xio_usb_readchar+0x2a>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    5658:	81 e1       	ldi	r24, 0x11	; 17
    565a:	80 93 58 22 	sts	0x2258, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    565e:	e0 91 58 22 	lds	r30, 0x2258
    5662:	f0 e0       	ldi	r31, 0x00	; 0
    5664:	e1 5b       	subi	r30, 0xB1	; 177
    5666:	fd 4d       	sbci	r31, 0xDD	; 221
    5668:	82 89       	ldd	r24, Z+18	; 0x12
    566a:	8f 77       	andi	r24, 0x7F	; 127
    566c:	80 93 53 22 	sts	0x2253, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[f.c])))()); // dispatch on character
    5670:	90 e0       	ldi	r25, 0x00	; 0
    5672:	88 0f       	add	r24, r24
    5674:	99 1f       	adc	r25, r25
    5676:	80 5b       	subi	r24, 0xB0	; 176
    5678:	98 4f       	sbci	r25, 0xF8	; 248
    567a:	fc 01       	movw	r30, r24
    567c:	25 91       	lpm	r18, Z+
    567e:	34 91       	lpm	r19, Z+
    5680:	f9 01       	movw	r30, r18
    5682:	19 95       	eicall
    5684:	9c 01       	movw	r18, r24
}
    5686:	c9 01       	movw	r24, r18
    5688:	08 95       	ret

0000568a <xio_usb_readln>:
 *
 *	Note: LINEMODE flag in device struct is ignored. It's ALWAYS LINEMODE here.
 */

int xio_usb_readln(char *buf, uint8_t len)
{
    568a:	1f 93       	push	r17
    568c:	cf 93       	push	r28
    568e:	df 93       	push	r29
    5690:	ec 01       	movw	r28, r24
    5692:	16 2f       	mov	r17, r22
//	uint8_t status = 0;

	if (!IN_LINE(f.flags)) {					// first time thru initializations
    5694:	80 91 4f 22 	lds	r24, 0x224F
    5698:	90 91 50 22 	lds	r25, 0x2250
    569c:	96 fd       	sbrc	r25, 6
    569e:	11 c0       	rjmp	.+34     	; 0x56c2 <xio_usb_readln+0x38>
		f.i = 0;								// zero buffer
    56a0:	10 92 54 22 	sts	0x2254, r1
		f.status = 0;							// reset status
    56a4:	10 92 51 22 	sts	0x2251, r1
		f.len = len;							// save arg into struct 
    56a8:	60 93 55 22 	sts	0x2255, r22
		f.buf = buf;							// save arg into struct 
    56ac:	c0 93 56 22 	sts	0x2256, r28
    56b0:	d0 93 57 22 	sts	0x2257, r29
		f.sig = XIO_SIG_OK;						// reset signal register
    56b4:	10 92 52 22 	sts	0x2252, r1
		f.flags |= XIO_FLAG_IN_LINE_bm;			// yes, we are busy getting a line
    56b8:	90 64       	ori	r25, 0x40	; 64
    56ba:	80 93 4f 22 	sts	0x224F, r24
    56be:	90 93 50 22 	sts	0x2250, r25
	}
	while (TRUE) { 
		switch (f.status = _xio_usb_readchar(buf, len)) {
    56c2:	ce 01       	movw	r24, r28
    56c4:	61 2f       	mov	r22, r17
    56c6:	0e 94 1a 2b 	call	0x5634	; 0x5634 <_xio_usb_readchar>
    56ca:	80 93 51 22 	sts	0x2251, r24
    56ce:	87 30       	cpi	r24, 0x07	; 7
    56d0:	29 f0       	breq	.+10     	; 0x56dc <xio_usb_readln+0x52>
    56d2:	88 30       	cpi	r24, 0x08	; 8
    56d4:	31 f0       	breq	.+12     	; 0x56e2 <xio_usb_readln+0x58>
    56d6:	84 30       	cpi	r24, 0x04	; 4
    56d8:	a1 f7       	brne	.-24     	; 0x56c2 <xio_usb_readln+0x38>
    56da:	06 c0       	rjmp	.+12     	; 0x56e8 <xio_usb_readln+0x5e>
    56dc:	27 e0       	ldi	r18, 0x07	; 7
    56de:	30 e0       	ldi	r19, 0x00	; 0
    56e0:	05 c0       	rjmp	.+10     	; 0x56ec <xio_usb_readln+0x62>
    56e2:	21 e0       	ldi	r18, 0x01	; 1
    56e4:	30 e0       	ldi	r19, 0x00	; 0
    56e6:	02 c0       	rjmp	.+4      	; 0x56ec <xio_usb_readln+0x62>
    56e8:	20 e0       	ldi	r18, 0x00	; 0
    56ea:	30 e0       	ldi	r19, 0x00	; 0
			case (TG_BUFFER_FULL): return (f.status); break;	// overrun error
			case (TG_EOL): return (TG_OK); break;				// got completed line
			case (TG_EAGAIN): break;							// loop
		}
	}
}
    56ec:	c9 01       	movw	r24, r18
    56ee:	df 91       	pop	r29
    56f0:	cf 91       	pop	r28
    56f2:	1f 91       	pop	r17
    56f4:	08 95       	ret

000056f6 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (f.i > f.len) {							// trap buffer overflow
    56f6:	90 91 54 22 	lds	r25, 0x2254
    56fa:	20 91 55 22 	lds	r18, 0x2255
    56fe:	e0 91 56 22 	lds	r30, 0x2256
    5702:	f0 91 57 22 	lds	r31, 0x2257
    5706:	29 17       	cp	r18, r25
    5708:	48 f4       	brcc	.+18     	; 0x571c <_readln_char+0x26>
		f.sig = XIO_SIG_EOL;
    570a:	82 e0       	ldi	r24, 0x02	; 2
    570c:	80 93 52 22 	sts	0x2252, r24
		f.buf[f.len] = NUL;						// f.len is zero based
    5710:	e2 0f       	add	r30, r18
    5712:	f1 1d       	adc	r31, r1
    5714:	10 82       	st	Z, r1
    5716:	27 e0       	ldi	r18, 0x07	; 7
    5718:	30 e0       	ldi	r19, 0x00	; 0
    571a:	16 c0       	rjmp	.+44     	; 0x5748 <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	f.buf[f.i++] = f.c;
    571c:	e9 0f       	add	r30, r25
    571e:	f1 1d       	adc	r31, r1
    5720:	80 91 53 22 	lds	r24, 0x2253
    5724:	80 83       	st	Z, r24
    5726:	9f 5f       	subi	r25, 0xFF	; 255
    5728:	90 93 54 22 	sts	0x2254, r25
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);// conditional echo
    572c:	80 91 4f 22 	lds	r24, 0x224F
    5730:	84 ff       	sbrs	r24, 4
    5732:	08 c0       	rjmp	.+16     	; 0x5744 <_readln_char+0x4e>
    5734:	60 91 82 25 	lds	r22, 0x2582
    5738:	70 91 83 25 	lds	r23, 0x2583
    573c:	80 91 53 22 	lds	r24, 0x2253
    5740:	0e 94 24 2a 	call	0x5448	; 0x5448 <xio_usb_putc>
    5744:	21 e0       	ldi	r18, 0x01	; 1
    5746:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_EAGAIN);							// line is still in process
}
    5748:	c9 01       	movw	r24, r18
    574a:	08 95       	ret

0000574c <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	f.sig = XIO_SIG_EOL;
    574c:	82 e0       	ldi	r24, 0x02	; 2
    574e:	80 93 52 22 	sts	0x2252, r24
	f.buf[f.i] = NUL;
    5752:	80 91 54 22 	lds	r24, 0x2254
    5756:	e0 91 56 22 	lds	r30, 0x2256
    575a:	f0 91 57 22 	lds	r31, 0x2257
    575e:	e8 0f       	add	r30, r24
    5760:	f1 1d       	adc	r31, r1
    5762:	10 82       	st	Z, r1
	f.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    5764:	20 91 4f 22 	lds	r18, 0x224F
    5768:	30 91 50 22 	lds	r19, 0x2250
    576c:	c9 01       	movw	r24, r18
    576e:	9f 7b       	andi	r25, 0xBF	; 191
    5770:	80 93 4f 22 	sts	0x224F, r24
    5774:	90 93 50 22 	sts	0x2250, r25
	if (ECHO(f.flags)) xio_usb_putc('\n',stdout);// echo a newline
    5778:	24 ff       	sbrs	r18, 4
    577a:	07 c0       	rjmp	.+14     	; 0x578a <_readln_NEWLINE+0x3e>
    577c:	60 91 82 25 	lds	r22, 0x2582
    5780:	70 91 83 25 	lds	r23, 0x2583
    5784:	8a e0       	ldi	r24, 0x0A	; 10
    5786:	0e 94 24 2a 	call	0x5448	; 0x5448 <xio_usb_putc>
	return (TG_EOL);							// return for end-of-line
}
    578a:	84 e0       	ldi	r24, 0x04	; 4
    578c:	90 e0       	ldi	r25, 0x00	; 0
    578e:	08 95       	ret

00005790 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(f.flags)) {
    5790:	80 91 4f 22 	lds	r24, 0x224F
    5794:	87 ff       	sbrs	r24, 7
    5796:	03 c0       	rjmp	.+6      	; 0x579e <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    5798:	0e 94 a6 2b 	call	0x574c	; 0x574c <_readln_NEWLINE>
    579c:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    579e:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <_readln_char>
	}
}
    57a2:	08 95       	ret

000057a4 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--f.i >= 0) {
    57a4:	80 91 54 22 	lds	r24, 0x2254
    57a8:	81 50       	subi	r24, 0x01	; 1
    57aa:	80 93 54 22 	sts	0x2254, r24
		if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    57ae:	80 91 4f 22 	lds	r24, 0x224F
    57b2:	84 ff       	sbrs	r24, 4
    57b4:	08 c0       	rjmp	.+16     	; 0x57c6 <_readln_DELETE+0x22>
    57b6:	60 91 82 25 	lds	r22, 0x2582
    57ba:	70 91 83 25 	lds	r23, 0x2583
    57be:	80 91 53 22 	lds	r24, 0x2253
    57c2:	0e 94 24 2a 	call	0x5448	; 0x5448 <xio_usb_putc>
	} else {
		f.i = 0;
	}
	return (TG_EAGAIN);							// line is still in process
}
    57c6:	81 e0       	ldi	r24, 0x01	; 1
    57c8:	90 e0       	ldi	r25, 0x00	; 0
    57ca:	08 95       	ret

000057cc <_sig_KILL>:
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
	f.sig = XIO_SIG_KILL;
    57cc:	84 e0       	ldi	r24, 0x04	; 4
    57ce:	80 93 52 22 	sts	0x2252, r24
	return(_FDEV_ERR);
}
    57d2:	8f ef       	ldi	r24, 0xFF	; 255
    57d4:	9f ef       	ldi	r25, 0xFF	; 255
    57d6:	08 95       	ret

000057d8 <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
	f.sig = XIO_SIG_PAUSE;
    57d8:	86 e0       	ldi	r24, 0x06	; 6
    57da:	80 93 52 22 	sts	0x2252, r24
	return(_FDEV_ERR);
}
    57de:	8f ef       	ldi	r24, 0xFF	; 255
    57e0:	9f ef       	ldi	r25, 0xFF	; 255
    57e2:	08 95       	ret

000057e4 <_sig_RESUME>:

static int _sig_RESUME(void)
{
	f.sig = XIO_SIG_RESUME;
    57e4:	87 e0       	ldi	r24, 0x07	; 7
    57e6:	80 93 52 22 	sts	0x2252, r24
	return(_FDEV_ERR);
}
    57ea:	8f ef       	ldi	r24, 0xFF	; 255
    57ec:	9f ef       	ldi	r25, 0xFF	; 255
    57ee:	08 95       	ret

000057f0 <xio_usb_queue_RX_char>:
/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_usb_queue_RX_char(const char c)
{
    57f0:	28 2f       	mov	r18, r24
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    57f2:	83 30       	cpi	r24, 0x03	; 3
    57f4:	31 f4       	brne	.+12     	; 0x5802 <xio_usb_queue_RX_char+0x12>
		f.sig = XIO_SIG_KILL;					// set signal value
    57f6:	84 e0       	ldi	r24, 0x04	; 4
    57f8:	80 93 52 22 	sts	0x2252, r24
		signal_etx();							// call app-specific signal handler
    57fc:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <signal_etx>
    5800:	08 95       	ret
		return;
	}

	// normal path
	if ((--f.rx_buf_head) == 0) { 				// wrap condition
    5802:	80 91 59 22 	lds	r24, 0x2259
    5806:	81 50       	subi	r24, 0x01	; 1
    5808:	80 93 59 22 	sts	0x2259, r24
    580c:	80 91 59 22 	lds	r24, 0x2259
    5810:	88 23       	and	r24, r24
    5812:	19 f4       	brne	.+6      	; 0x581a <xio_usb_queue_RX_char+0x2a>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    5814:	81 e1       	ldi	r24, 0x11	; 17
    5816:	80 93 59 22 	sts	0x2259, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    581a:	90 91 59 22 	lds	r25, 0x2259
    581e:	80 91 58 22 	lds	r24, 0x2258
    5822:	98 17       	cp	r25, r24
    5824:	39 f0       	breq	.+14     	; 0x5834 <xio_usb_queue_RX_char+0x44>
		f.rx_buf[f.rx_buf_head] = c;			// FAKE INPUT DATA
    5826:	e0 91 59 22 	lds	r30, 0x2259
    582a:	f0 e0       	ldi	r31, 0x00	; 0
    582c:	e1 5b       	subi	r30, 0xB1	; 177
    582e:	fd 4d       	sbci	r31, 0xDD	; 221
    5830:	22 8b       	std	Z+18, r18	; 0x12
    5832:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    5834:	80 91 59 22 	lds	r24, 0x2259
    5838:	8f 5f       	subi	r24, 0xFF	; 255
    583a:	80 93 59 22 	sts	0x2259, r24
    583e:	80 91 59 22 	lds	r24, 0x2259
    5842:	82 31       	cpi	r24, 0x12	; 18
    5844:	18 f0       	brcs	.+6      	; 0x584c <xio_usb_queue_RX_char+0x5c>
		f.rx_buf_head = 1;
    5846:	81 e0       	ldi	r24, 0x01	; 1
    5848:	80 93 59 22 	sts	0x2259, r24
    584c:	08 95       	ret

0000584e <xio_usb_queue_RX_string>:
/*
 * xio_usb_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_usb_queue_RX_string(char *buf)
{
    584e:	1f 93       	push	r17
    5850:	cf 93       	push	r28
    5852:	df 93       	push	r29
    5854:	ec 01       	movw	r28, r24
    5856:	10 e0       	ldi	r17, 0x00	; 0
    5858:	02 c0       	rjmp	.+4      	; 0x585e <xio_usb_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_usb_queue_RX_char(c);
    585a:	0e 94 f8 2b 	call	0x57f0	; 0x57f0 <xio_usb_queue_RX_char>
void xio_usb_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    585e:	fe 01       	movw	r30, r28
    5860:	e1 0f       	add	r30, r17
    5862:	f1 1d       	adc	r31, r1
    5864:	80 81       	ld	r24, Z
    5866:	1f 5f       	subi	r17, 0xFF	; 255
    5868:	88 23       	and	r24, r24
    586a:	b9 f7       	brne	.-18     	; 0x585a <xio_usb_queue_RX_string+0xc>
		xio_usb_queue_RX_char(c);
	}
}
    586c:	df 91       	pop	r29
    586e:	cf 91       	pop	r28
    5870:	1f 91       	pop	r17
    5872:	08 95       	ret

00005874 <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular buffers work
 */

ISR(USB_RX_ISR_vect)	//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    5874:	1f 92       	push	r1
    5876:	0f 92       	push	r0
    5878:	0f b6       	in	r0, 0x3f	; 63
    587a:	0f 92       	push	r0
    587c:	0b b6       	in	r0, 0x3b	; 59
    587e:	0f 92       	push	r0
    5880:	11 24       	eor	r1, r1
    5882:	2f 93       	push	r18
    5884:	3f 93       	push	r19
    5886:	4f 93       	push	r20
    5888:	5f 93       	push	r21
    588a:	6f 93       	push	r22
    588c:	7f 93       	push	r23
    588e:	8f 93       	push	r24
    5890:	9f 93       	push	r25
    5892:	af 93       	push	r26
    5894:	bf 93       	push	r27
    5896:	ef 93       	push	r30
    5898:	ff 93       	push	r31
	uint8_t c = f.usart->DATA;					// can only read DATA once
    589a:	e0 91 5d 22 	lds	r30, 0x225D
    589e:	f0 91 5e 22 	lds	r31, 0x225E
    58a2:	20 81       	ld	r18, Z

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    58a4:	23 30       	cpi	r18, 0x03	; 3
    58a6:	31 f4       	brne	.+12     	; 0x58b4 <__vector_25+0x40>
		f.sig = XIO_SIG_KILL;					// set signal value
    58a8:	84 e0       	ldi	r24, 0x04	; 4
    58aa:	80 93 52 22 	sts	0x2252, r24
		signal_etx();							// call app-specific signal handler
    58ae:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <signal_etx>
    58b2:	25 c0       	rjmp	.+74     	; 0x58fe <__vector_25+0x8a>
		return;
	}

	// normal character path
	if ((--f.rx_buf_head) == 0) { 				// advance buffer head with wrap
    58b4:	80 91 59 22 	lds	r24, 0x2259
    58b8:	81 50       	subi	r24, 0x01	; 1
    58ba:	80 93 59 22 	sts	0x2259, r24
    58be:	80 91 59 22 	lds	r24, 0x2259
    58c2:	88 23       	and	r24, r24
    58c4:	19 f4       	brne	.+6      	; 0x58cc <__vector_25+0x58>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    58c6:	81 e1       	ldi	r24, 0x11	; 17
    58c8:	80 93 59 22 	sts	0x2259, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    58cc:	90 91 59 22 	lds	r25, 0x2259
    58d0:	80 91 58 22 	lds	r24, 0x2258
    58d4:	98 17       	cp	r25, r24
    58d6:	39 f0       	breq	.+14     	; 0x58e6 <__vector_25+0x72>
		f.rx_buf[f.rx_buf_head] = c;
    58d8:	e0 91 59 22 	lds	r30, 0x2259
    58dc:	f0 e0       	ldi	r31, 0x00	; 0
    58de:	e1 5b       	subi	r30, 0xB1	; 177
    58e0:	fd 4d       	sbci	r31, 0xDD	; 221
    58e2:	22 8b       	std	Z+18, r18	; 0x12
    58e4:	0c c0       	rjmp	.+24     	; 0x58fe <__vector_25+0x8a>
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    58e6:	80 91 59 22 	lds	r24, 0x2259
    58ea:	8f 5f       	subi	r24, 0xFF	; 255
    58ec:	80 93 59 22 	sts	0x2259, r24
    58f0:	80 91 59 22 	lds	r24, 0x2259
    58f4:	82 31       	cpi	r24, 0x12	; 18
    58f6:	18 f0       	brcs	.+6      	; 0x58fe <__vector_25+0x8a>
		f.rx_buf_head = 1;
    58f8:	81 e0       	ldi	r24, 0x01	; 1
    58fa:	80 93 59 22 	sts	0x2259, r24
	}
	// activate flow control here or before it gets to this level
}
    58fe:	ff 91       	pop	r31
    5900:	ef 91       	pop	r30
    5902:	bf 91       	pop	r27
    5904:	af 91       	pop	r26
    5906:	9f 91       	pop	r25
    5908:	8f 91       	pop	r24
    590a:	7f 91       	pop	r23
    590c:	6f 91       	pop	r22
    590e:	5f 91       	pop	r21
    5910:	4f 91       	pop	r20
    5912:	3f 91       	pop	r19
    5914:	2f 91       	pop	r18
    5916:	0f 90       	pop	r0
    5918:	0b be       	out	0x3b, r0	; 59
    591a:	0f 90       	pop	r0
    591c:	0f be       	out	0x3f, r0	; 63
    591e:	0f 90       	pop	r0
    5920:	1f 90       	pop	r1
    5922:	18 95       	reti

00005924 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    5924:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5926:	e0 ec       	ldi	r30, 0xC0	; 192
    5928:	f1 e0       	ldi	r31, 0x01	; 1
    592a:	80 91 cf 01 	lds	r24, 0x01CF
    592e:	87 fd       	sbrc	r24, 7
    5930:	fa cf       	rjmp	.-12     	; 0x5926 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    5932:	26 2f       	mov	r18, r22
    5934:	30 e0       	ldi	r19, 0x00	; 0
    5936:	2f 71       	andi	r18, 0x1F	; 31
    5938:	30 70       	andi	r19, 0x00	; 0
    593a:	89 2f       	mov	r24, r25
    593c:	90 e0       	ldi	r25, 0x00	; 0
    593e:	45 e0       	ldi	r20, 0x05	; 5
    5940:	88 0f       	add	r24, r24
    5942:	99 1f       	adc	r25, r25
    5944:	4a 95       	dec	r20
    5946:	e1 f7       	brne	.-8      	; 0x5940 <EEPROM_ReadByte+0x1c>
    5948:	28 2b       	or	r18, r24
    594a:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    594c:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5950:	83 2f       	mov	r24, r19
    5952:	8f 71       	andi	r24, 0x1F	; 31
    5954:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5956:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    5958:	86 e0       	ldi	r24, 0x06	; 6
    595a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    595c:	ef 93       	push	r30
    595e:	ff 93       	push	r31
    5960:	0f 93       	push	r16
    5962:	2f 93       	push	r18
    5964:	eb ec       	ldi	r30, 0xCB	; 203
    5966:	f1 e0       	ldi	r31, 0x01	; 1
    5968:	08 ed       	ldi	r16, 0xD8	; 216
    596a:	21 e0       	ldi	r18, 0x01	; 1
    596c:	04 bf       	out	0x34, r16	; 52
    596e:	20 83       	st	Z, r18
    5970:	2f 91       	pop	r18
    5972:	0f 91       	pop	r16
    5974:	ff 91       	pop	r31
    5976:	ef 91       	pop	r30

	return NVM.DATA0;
    5978:	80 91 c4 01 	lds	r24, 0x01C4
}
    597c:	08 95       	ret

0000597e <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    597e:	68 2f       	mov	r22, r24
    5980:	6f 71       	andi	r22, 0x1F	; 31
    5982:	55 e0       	ldi	r21, 0x05	; 5
    5984:	96 95       	lsr	r25
    5986:	87 95       	ror	r24
    5988:	5a 95       	dec	r21
    598a:	e1 f7       	brne	.-8      	; 0x5984 <eeprom_get_char+0x6>
    598c:	0e 94 92 2c 	call	0x5924	; 0x5924 <EEPROM_ReadByte>
}
    5990:	08 95       	ret

00005992 <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    5992:	8f 92       	push	r8
    5994:	9f 92       	push	r9
    5996:	af 92       	push	r10
    5998:	bf 92       	push	r11
    599a:	cf 92       	push	r12
    599c:	df 92       	push	r13
    599e:	ff 92       	push	r15
    59a0:	0f 93       	push	r16
    59a2:	1f 93       	push	r17
    59a4:	cf 93       	push	r28
    59a6:	df 93       	push	r29
    59a8:	4c 01       	movw	r8, r24
    59aa:	5b 01       	movw	r10, r22
    59ac:	6a 01       	movw	r12, r20
    59ae:	8b 01       	movw	r16, r22
    59b0:	ea 01       	movw	r28, r20
    59b2:	ff 24       	eor	r15, r15
    59b4:	18 c0       	rjmp	.+48     	; 0x59e6 <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    59b6:	c8 01       	movw	r24, r16
    59b8:	0e 94 bf 2c 	call	0x597e	; 0x597e <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    59bc:	ff 20       	and	r15, r15
    59be:	19 f0       	breq	.+6      	; 0x59c6 <memcpy_from_eeprom_with_checksum+0x34>
    59c0:	21 e0       	ldi	r18, 0x01	; 1
    59c2:	30 e0       	ldi	r19, 0x00	; 0
    59c4:	08 c0       	rjmp	.+16     	; 0x59d6 <memcpy_from_eeprom_with_checksum+0x44>
    59c6:	2f 2d       	mov	r18, r15
    59c8:	33 27       	eor	r19, r19
    59ca:	27 fd       	sbrc	r18, 7
    59cc:	30 95       	com	r19
    59ce:	22 27       	eor	r18, r18
    59d0:	33 0f       	add	r19, r19
    59d2:	22 1f       	adc	r18, r18
    59d4:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    59d6:	0f 5f       	subi	r16, 0xFF	; 255
    59d8:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    59da:	f8 2e       	mov	r15, r24
    59dc:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    59de:	f4 01       	movw	r30, r8
    59e0:	81 93       	st	Z+, r24
    59e2:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    59e4:	21 97       	sbiw	r28, 0x01	; 1
    59e6:	20 97       	sbiw	r28, 0x00	; 0
    59e8:	31 f7       	brne	.-52     	; 0x59b6 <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    59ea:	c6 01       	movw	r24, r12
    59ec:	8a 0d       	add	r24, r10
    59ee:	9b 1d       	adc	r25, r11
    59f0:	0e 94 bf 2c 	call	0x597e	; 0x597e <eeprom_get_char>
    59f4:	20 e0       	ldi	r18, 0x00	; 0
    59f6:	30 e0       	ldi	r19, 0x00	; 0
    59f8:	f8 16       	cp	r15, r24
    59fa:	11 f4       	brne	.+4      	; 0x5a00 <memcpy_from_eeprom_with_checksum+0x6e>
    59fc:	21 e0       	ldi	r18, 0x01	; 1
    59fe:	30 e0       	ldi	r19, 0x00	; 0
}
    5a00:	c9 01       	movw	r24, r18
    5a02:	df 91       	pop	r29
    5a04:	cf 91       	pop	r28
    5a06:	1f 91       	pop	r17
    5a08:	0f 91       	pop	r16
    5a0a:	ff 90       	pop	r15
    5a0c:	df 90       	pop	r13
    5a0e:	cf 90       	pop	r12
    5a10:	bf 90       	pop	r11
    5a12:	af 90       	pop	r10
    5a14:	9f 90       	pop	r9
    5a16:	8f 90       	pop	r8
    5a18:	08 95       	ret

00005a1a <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a1a:	80 91 cf 01 	lds	r24, 0x01CF
    5a1e:	87 fd       	sbrc	r24, 7
    5a20:	fc cf       	rjmp	.-8      	; 0x5a1a <EEPROM_WaitForNVM>
}
    5a22:	08 95       	ret

00005a24 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a24:	80 91 cf 01 	lds	r24, 0x01CF
    5a28:	87 fd       	sbrc	r24, 7
    5a2a:	fc cf       	rjmp	.-8      	; 0x5a24 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    5a2c:	80 91 cf 01 	lds	r24, 0x01CF
    5a30:	81 ff       	sbrs	r24, 1
    5a32:	12 c0       	rjmp	.+36     	; 0x5a58 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    5a34:	86 e3       	ldi	r24, 0x36	; 54
    5a36:	e0 ec       	ldi	r30, 0xC0	; 192
    5a38:	f1 e0       	ldi	r31, 0x01	; 1
    5a3a:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    5a3c:	ef 93       	push	r30
    5a3e:	ff 93       	push	r31
    5a40:	0f 93       	push	r16
    5a42:	2f 93       	push	r18
    5a44:	eb ec       	ldi	r30, 0xCB	; 203
    5a46:	f1 e0       	ldi	r31, 0x01	; 1
    5a48:	08 ed       	ldi	r16, 0xD8	; 216
    5a4a:	21 e0       	ldi	r18, 0x01	; 1
    5a4c:	04 bf       	out	0x34, r16	; 52
    5a4e:	20 83       	st	Z, r18
    5a50:	2f 91       	pop	r18
    5a52:	0f 91       	pop	r16
    5a54:	ff 91       	pop	r31
    5a56:	ef 91       	pop	r30
    5a58:	08 95       	ret

00005a5a <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    5a5a:	df 92       	push	r13
    5a5c:	ef 92       	push	r14
    5a5e:	ff 92       	push	r15
    5a60:	0f 93       	push	r16
    5a62:	1f 93       	push	r17
    5a64:	e8 2e       	mov	r14, r24
    5a66:	06 2f       	mov	r16, r22
    5a68:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    5a6a:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5a6e:	e0 ec       	ldi	r30, 0xC0	; 192
    5a70:	f1 e0       	ldi	r31, 0x01	; 1
    5a72:	83 e3       	ldi	r24, 0x33	; 51
    5a74:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    5a76:	10 e0       	ldi	r17, 0x00	; 0
    5a78:	0f 71       	andi	r16, 0x1F	; 31
    5a7a:	10 70       	andi	r17, 0x00	; 0
    5a7c:	ff 24       	eor	r15, r15
    5a7e:	75 e0       	ldi	r23, 0x05	; 5
    5a80:	ee 0c       	add	r14, r14
    5a82:	ff 1c       	adc	r15, r15
    5a84:	7a 95       	dec	r23
    5a86:	e1 f7       	brne	.-8      	; 0x5a80 <EEPROM_WriteByte+0x26>
    5a88:	0e 29       	or	r16, r14
    5a8a:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    5a8c:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5a8e:	81 2f       	mov	r24, r17
    5a90:	8f 71       	andi	r24, 0x1F	; 31
    5a92:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5a94:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5a96:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5a98:	85 e3       	ldi	r24, 0x35	; 53
    5a9a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5a9c:	ef 93       	push	r30
    5a9e:	ff 93       	push	r31
    5aa0:	0f 93       	push	r16
    5aa2:	2f 93       	push	r18
    5aa4:	eb ec       	ldi	r30, 0xCB	; 203
    5aa6:	f1 e0       	ldi	r31, 0x01	; 1
    5aa8:	08 ed       	ldi	r16, 0xD8	; 216
    5aaa:	21 e0       	ldi	r18, 0x01	; 1
    5aac:	04 bf       	out	0x34, r16	; 52
    5aae:	20 83       	st	Z, r18
    5ab0:	2f 91       	pop	r18
    5ab2:	0f 91       	pop	r16
    5ab4:	ff 91       	pop	r31
    5ab6:	ef 91       	pop	r30
}
    5ab8:	1f 91       	pop	r17
    5aba:	0f 91       	pop	r16
    5abc:	ff 90       	pop	r15
    5abe:	ef 90       	pop	r14
    5ac0:	df 90       	pop	r13
    5ac2:	08 95       	ret

00005ac4 <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    5ac4:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    5ac6:	68 2f       	mov	r22, r24
    5ac8:	6f 71       	andi	r22, 0x1F	; 31
    5aca:	e5 e0       	ldi	r30, 0x05	; 5
    5acc:	96 95       	lsr	r25
    5ace:	87 95       	ror	r24
    5ad0:	ea 95       	dec	r30
    5ad2:	e1 f7       	brne	.-8      	; 0x5acc <eeprom_put_char+0x8>
    5ad4:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <EEPROM_WriteByte>
}
    5ad8:	08 95       	ret

00005ada <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    5ada:	8f 92       	push	r8
    5adc:	9f 92       	push	r9
    5ade:	af 92       	push	r10
    5ae0:	bf 92       	push	r11
    5ae2:	cf 92       	push	r12
    5ae4:	df 92       	push	r13
    5ae6:	ef 92       	push	r14
    5ae8:	ff 92       	push	r15
    5aea:	0f 93       	push	r16
    5aec:	df 93       	push	r29
    5aee:	cf 93       	push	r28
    5af0:	0f 92       	push	r0
    5af2:	0f 92       	push	r0
    5af4:	cd b7       	in	r28, 0x3d	; 61
    5af6:	de b7       	in	r29, 0x3e	; 62
    5af8:	5c 01       	movw	r10, r24
    5afa:	6b 01       	movw	r12, r22
    5afc:	7a 01       	movw	r14, r20
    5afe:	4a 01       	movw	r8, r20
    5b00:	00 e0       	ldi	r16, 0x00	; 0
    5b02:	1e c0       	rjmp	.+60     	; 0x5b40 <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    5b04:	00 23       	and	r16, r16
    5b06:	19 f0       	breq	.+6      	; 0x5b0e <memcpy_to_eeprom_with_checksum+0x34>
    5b08:	21 e0       	ldi	r18, 0x01	; 1
    5b0a:	30 e0       	ldi	r19, 0x00	; 0
    5b0c:	08 c0       	rjmp	.+16     	; 0x5b1e <memcpy_to_eeprom_with_checksum+0x44>
    5b0e:	20 2f       	mov	r18, r16
    5b10:	33 27       	eor	r19, r19
    5b12:	27 fd       	sbrc	r18, 7
    5b14:	30 95       	com	r19
    5b16:	22 27       	eor	r18, r18
    5b18:	33 0f       	add	r19, r19
    5b1a:	22 1f       	adc	r18, r18
    5b1c:	33 27       	eor	r19, r19
    checksum += *source;
    5b1e:	f6 01       	movw	r30, r12
    5b20:	61 91       	ld	r22, Z+
    5b22:	6f 01       	movw	r12, r30
    5b24:	06 2f       	mov	r16, r22
    5b26:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    5b28:	9c 01       	movw	r18, r24
    5b2a:	2f 5f       	subi	r18, 0xFF	; 255
    5b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    5b2e:	29 83       	std	Y+1, r18	; 0x01
    5b30:	3a 83       	std	Y+2, r19	; 0x02
    5b32:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    5b36:	08 94       	sec
    5b38:	81 08       	sbc	r8, r1
    5b3a:	91 08       	sbc	r9, r1
    5b3c:	89 81       	ldd	r24, Y+1	; 0x01
    5b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b40:	81 14       	cp	r8, r1
    5b42:	91 04       	cpc	r9, r1
    5b44:	f9 f6       	brne	.-66     	; 0x5b04 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    5b46:	c7 01       	movw	r24, r14
    5b48:	8a 0d       	add	r24, r10
    5b4a:	9b 1d       	adc	r25, r11
    5b4c:	60 2f       	mov	r22, r16
    5b4e:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <eeprom_put_char>
}
    5b52:	0f 90       	pop	r0
    5b54:	0f 90       	pop	r0
    5b56:	cf 91       	pop	r28
    5b58:	df 91       	pop	r29
    5b5a:	0f 91       	pop	r16
    5b5c:	ff 90       	pop	r15
    5b5e:	ef 90       	pop	r14
    5b60:	df 90       	pop	r13
    5b62:	cf 90       	pop	r12
    5b64:	bf 90       	pop	r11
    5b66:	af 90       	pop	r10
    5b68:	9f 90       	pop	r9
    5b6a:	8f 90       	pop	r8
    5b6c:	08 95       	ret

00005b6e <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    5b6e:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5b70:	e0 ec       	ldi	r30, 0xC0	; 192
    5b72:	f1 e0       	ldi	r31, 0x01	; 1
    5b74:	80 91 cf 01 	lds	r24, 0x01CF
    5b78:	87 fd       	sbrc	r24, 7
    5b7a:	fa cf       	rjmp	.-12     	; 0x5b70 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5b7c:	83 e3       	ldi	r24, 0x33	; 51
    5b7e:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    5b80:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    5b84:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5b86:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5b88:	64 83       	std	Z+4, r22	; 0x04
}
    5b8a:	08 95       	ret

00005b8c <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    5b8c:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5b8e:	e0 ec       	ldi	r30, 0xC0	; 192
    5b90:	f1 e0       	ldi	r31, 0x01	; 1
    5b92:	80 91 cf 01 	lds	r24, 0x01CF
    5b96:	87 fd       	sbrc	r24, 7
    5b98:	fa cf       	rjmp	.-12     	; 0x5b8e <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5b9a:	83 e3       	ldi	r24, 0x33	; 51
    5b9c:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    5b9e:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5ba0:	12 82       	std	Z+2, r1	; 0x02
    5ba2:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    5ba4:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    5ba8:	8d 91       	ld	r24, X+
    5baa:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    5bac:	9f 5f       	subi	r25, 0xFF	; 255
    5bae:	90 32       	cpi	r25, 0x20	; 32
    5bb0:	c9 f7       	brne	.-14     	; 0x5ba4 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    5bb2:	08 95       	ret

00005bb4 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    5bb4:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5bb6:	e0 ec       	ldi	r30, 0xC0	; 192
    5bb8:	f1 e0       	ldi	r31, 0x01	; 1
    5bba:	80 91 cf 01 	lds	r24, 0x01CF
    5bbe:	87 fd       	sbrc	r24, 7
    5bc0:	fa cf       	rjmp	.-12     	; 0x5bb6 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5bc2:	89 2f       	mov	r24, r25
    5bc4:	90 e0       	ldi	r25, 0x00	; 0
    5bc6:	a5 e0       	ldi	r26, 0x05	; 5
    5bc8:	88 0f       	add	r24, r24
    5bca:	99 1f       	adc	r25, r25
    5bcc:	aa 95       	dec	r26
    5bce:	e1 f7       	brne	.-8      	; 0x5bc8 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5bd0:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5bd4:	89 2f       	mov	r24, r25
    5bd6:	8f 71       	andi	r24, 0x1F	; 31
    5bd8:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5bda:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5bdc:	85 e3       	ldi	r24, 0x35	; 53
    5bde:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5be0:	ef 93       	push	r30
    5be2:	ff 93       	push	r31
    5be4:	0f 93       	push	r16
    5be6:	2f 93       	push	r18
    5be8:	eb ec       	ldi	r30, 0xCB	; 203
    5bea:	f1 e0       	ldi	r31, 0x01	; 1
    5bec:	08 ed       	ldi	r16, 0xD8	; 216
    5bee:	21 e0       	ldi	r18, 0x01	; 1
    5bf0:	04 bf       	out	0x34, r16	; 52
    5bf2:	20 83       	st	Z, r18
    5bf4:	2f 91       	pop	r18
    5bf6:	0f 91       	pop	r16
    5bf8:	ff 91       	pop	r31
    5bfa:	ef 91       	pop	r30
}
    5bfc:	08 95       	ret

00005bfe <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    5bfe:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5c00:	e0 ec       	ldi	r30, 0xC0	; 192
    5c02:	f1 e0       	ldi	r31, 0x01	; 1
    5c04:	80 91 cf 01 	lds	r24, 0x01CF
    5c08:	87 fd       	sbrc	r24, 7
    5c0a:	fa cf       	rjmp	.-12     	; 0x5c00 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5c0c:	89 2f       	mov	r24, r25
    5c0e:	90 e0       	ldi	r25, 0x00	; 0
    5c10:	b5 e0       	ldi	r27, 0x05	; 5
    5c12:	88 0f       	add	r24, r24
    5c14:	99 1f       	adc	r25, r25
    5c16:	ba 95       	dec	r27
    5c18:	e1 f7       	brne	.-8      	; 0x5c12 <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5c1a:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5c1e:	89 2f       	mov	r24, r25
    5c20:	8f 71       	andi	r24, 0x1F	; 31
    5c22:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5c24:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    5c26:	82 e3       	ldi	r24, 0x32	; 50
    5c28:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5c2a:	ef 93       	push	r30
    5c2c:	ff 93       	push	r31
    5c2e:	0f 93       	push	r16
    5c30:	2f 93       	push	r18
    5c32:	eb ec       	ldi	r30, 0xCB	; 203
    5c34:	f1 e0       	ldi	r31, 0x01	; 1
    5c36:	08 ed       	ldi	r16, 0xD8	; 216
    5c38:	21 e0       	ldi	r18, 0x01	; 1
    5c3a:	04 bf       	out	0x34, r16	; 52
    5c3c:	20 83       	st	Z, r18
    5c3e:	2f 91       	pop	r18
    5c40:	0f 91       	pop	r16
    5c42:	ff 91       	pop	r31
    5c44:	ef 91       	pop	r30
}
    5c46:	08 95       	ret

00005c48 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    5c48:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5c4a:	e0 ec       	ldi	r30, 0xC0	; 192
    5c4c:	f1 e0       	ldi	r31, 0x01	; 1
    5c4e:	80 91 cf 01 	lds	r24, 0x01CF
    5c52:	87 fd       	sbrc	r24, 7
    5c54:	fa cf       	rjmp	.-12     	; 0x5c4a <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5c56:	89 2f       	mov	r24, r25
    5c58:	90 e0       	ldi	r25, 0x00	; 0
    5c5a:	25 e0       	ldi	r18, 0x05	; 5
    5c5c:	88 0f       	add	r24, r24
    5c5e:	99 1f       	adc	r25, r25
    5c60:	2a 95       	dec	r18
    5c62:	e1 f7       	brne	.-8      	; 0x5c5c <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5c64:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5c68:	89 2f       	mov	r24, r25
    5c6a:	8f 71       	andi	r24, 0x1F	; 31
    5c6c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5c6e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    5c70:	84 e3       	ldi	r24, 0x34	; 52
    5c72:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5c74:	ef 93       	push	r30
    5c76:	ff 93       	push	r31
    5c78:	0f 93       	push	r16
    5c7a:	2f 93       	push	r18
    5c7c:	eb ec       	ldi	r30, 0xCB	; 203
    5c7e:	f1 e0       	ldi	r31, 0x01	; 1
    5c80:	08 ed       	ldi	r16, 0xD8	; 216
    5c82:	21 e0       	ldi	r18, 0x01	; 1
    5c84:	04 bf       	out	0x34, r16	; 52
    5c86:	20 83       	st	Z, r18
    5c88:	2f 91       	pop	r18
    5c8a:	0f 91       	pop	r16
    5c8c:	ff 91       	pop	r31
    5c8e:	ef 91       	pop	r30
}
    5c90:	08 95       	ret

00005c92 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5c92:	80 91 cf 01 	lds	r24, 0x01CF
    5c96:	87 fd       	sbrc	r24, 7
    5c98:	fc cf       	rjmp	.-8      	; 0x5c92 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    5c9a:	80 e3       	ldi	r24, 0x30	; 48
    5c9c:	e0 ec       	ldi	r30, 0xC0	; 192
    5c9e:	f1 e0       	ldi	r31, 0x01	; 1
    5ca0:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5ca2:	ef 93       	push	r30
    5ca4:	ff 93       	push	r31
    5ca6:	0f 93       	push	r16
    5ca8:	2f 93       	push	r18
    5caa:	eb ec       	ldi	r30, 0xCB	; 203
    5cac:	f1 e0       	ldi	r31, 0x01	; 1
    5cae:	08 ed       	ldi	r16, 0xD8	; 216
    5cb0:	21 e0       	ldi	r18, 0x01	; 1
    5cb2:	04 bf       	out	0x34, r16	; 52
    5cb4:	20 83       	st	Z, r18
    5cb6:	2f 91       	pop	r18
    5cb8:	0f 91       	pop	r16
    5cba:	ff 91       	pop	r31
    5cbc:	ef 91       	pop	r30
}
    5cbe:	08 95       	ret

00005cc0 <xio_pgm_init>:
 *
 *  Control parameters are defaulted and may be set using xio_pgm_control()
 */

void xio_pgm_init(const uint16_t control)
{
    5cc0:	9c 01       	movw	r18, r24
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;	// set flags to defaults & initial state
    5cc2:	85 e0       	ldi	r24, 0x05	; 5
    5cc4:	90 e0       	ldi	r25, 0x00	; 0
    5cc6:	80 93 85 22 	sts	0x2285, r24
    5cca:	90 93 86 22 	sts	0x2286, r25
	if (control & XIO_WR) {				// this is actually an error. Ignore for now.
    5cce:	25 ff       	sbrs	r18, 5
    5cd0:	06 c0       	rjmp	.+12     	; 0x5cde <xio_pgm_init+0x1e>
		fpgm.flags |= XIO_FLAG_WR_bm;
    5cd2:	87 e0       	ldi	r24, 0x07	; 7
    5cd4:	90 e0       	ldi	r25, 0x00	; 0
    5cd6:	80 93 85 22 	sts	0x2285, r24
    5cda:	90 93 86 22 	sts	0x2286, r25
	}
	if (control & XIO_NOBLOCK) {		// this is also technically a config error.
    5cde:	27 ff       	sbrs	r18, 7
    5ce0:	09 c0       	rjmp	.+18     	; 0x5cf4 <xio_pgm_init+0x34>
		fpgm.flags &= ~XIO_FLAG_BLOCK_bm;
    5ce2:	80 91 85 22 	lds	r24, 0x2285
    5ce6:	90 91 86 22 	lds	r25, 0x2286
    5cea:	8b 7f       	andi	r24, 0xFB	; 251
    5cec:	80 93 85 22 	sts	0x2285, r24
    5cf0:	90 93 86 22 	sts	0x2286, r25
	}
	if (control & XIO_ECHO) {
    5cf4:	30 ff       	sbrs	r19, 0
    5cf6:	09 c0       	rjmp	.+18     	; 0x5d0a <xio_pgm_init+0x4a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5cf8:	80 91 85 22 	lds	r24, 0x2285
    5cfc:	90 91 86 22 	lds	r25, 0x2286
    5d00:	80 61       	ori	r24, 0x10	; 16
    5d02:	80 93 85 22 	sts	0x2285, r24
    5d06:	90 93 86 22 	sts	0x2286, r25
	}
	if (control & XIO_NOECHO) {
    5d0a:	31 ff       	sbrs	r19, 1
    5d0c:	09 c0       	rjmp	.+18     	; 0x5d20 <xio_pgm_init+0x60>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5d0e:	80 91 85 22 	lds	r24, 0x2285
    5d12:	90 91 86 22 	lds	r25, 0x2286
    5d16:	8f 7e       	andi	r24, 0xEF	; 239
    5d18:	80 93 85 22 	sts	0x2285, r24
    5d1c:	90 93 86 22 	sts	0x2286, r25
	}
	if (control & XIO_CRLF) {
    5d20:	32 ff       	sbrs	r19, 2
    5d22:	09 c0       	rjmp	.+18     	; 0x5d36 <xio_pgm_init+0x76>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5d24:	80 91 85 22 	lds	r24, 0x2285
    5d28:	90 91 86 22 	lds	r25, 0x2286
    5d2c:	80 62       	ori	r24, 0x20	; 32
    5d2e:	80 93 85 22 	sts	0x2285, r24
    5d32:	90 93 86 22 	sts	0x2286, r25
	}
	if (control & XIO_NOCRLF) {
    5d36:	33 ff       	sbrs	r19, 3
    5d38:	09 c0       	rjmp	.+18     	; 0x5d4c <xio_pgm_init+0x8c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5d3a:	80 91 85 22 	lds	r24, 0x2285
    5d3e:	90 91 86 22 	lds	r25, 0x2286
    5d42:	8f 7d       	andi	r24, 0xDF	; 223
    5d44:	80 93 85 22 	sts	0x2285, r24
    5d48:	90 93 86 22 	sts	0x2286, r25
	}
	if (control & XIO_LINEMODE) {
    5d4c:	34 ff       	sbrs	r19, 4
    5d4e:	09 c0       	rjmp	.+18     	; 0x5d62 <xio_pgm_init+0xa2>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5d50:	80 91 85 22 	lds	r24, 0x2285
    5d54:	90 91 86 22 	lds	r25, 0x2286
    5d58:	80 64       	ori	r24, 0x40	; 64
    5d5a:	80 93 85 22 	sts	0x2285, r24
    5d5e:	90 93 86 22 	sts	0x2286, r25
	}
	if (control & XIO_NOLINEMODE) {
    5d62:	35 ff       	sbrs	r19, 5
    5d64:	09 c0       	rjmp	.+18     	; 0x5d78 <xio_pgm_init+0xb8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5d66:	80 91 85 22 	lds	r24, 0x2285
    5d6a:	90 91 86 22 	lds	r25, 0x2286
    5d6e:	8f 7b       	andi	r24, 0xBF	; 191
    5d70:	80 93 85 22 	sts	0x2285, r24
    5d74:	90 93 86 22 	sts	0x2286, r25
	}
	if (control & XIO_SEMICOLONS) {
    5d78:	36 ff       	sbrs	r19, 6
    5d7a:	09 c0       	rjmp	.+18     	; 0x5d8e <xio_pgm_init+0xce>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5d7c:	80 91 85 22 	lds	r24, 0x2285
    5d80:	90 91 86 22 	lds	r25, 0x2286
    5d84:	80 68       	ori	r24, 0x80	; 128
    5d86:	80 93 85 22 	sts	0x2285, r24
    5d8a:	90 93 86 22 	sts	0x2286, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5d8e:	37 ff       	sbrs	r19, 7
    5d90:	09 c0       	rjmp	.+18     	; 0x5da4 <xio_pgm_init+0xe4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5d92:	80 91 85 22 	lds	r24, 0x2285
    5d96:	90 91 86 22 	lds	r25, 0x2286
    5d9a:	8f 77       	andi	r24, 0x7F	; 127
    5d9c:	80 93 85 22 	sts	0x2285, r24
    5da0:	90 93 86 22 	sts	0x2286, r25
	}
	fpgm.idx = 0;
    5da4:	10 92 90 22 	sts	0x2290, r1
    5da8:	10 92 91 22 	sts	0x2291, r1
	fpgm.sig = 0;
    5dac:	10 92 88 22 	sts	0x2288, r1
	dev_pgm.udata = &(fpgm.sig); 	// bind signals register to pgm FILE struct
    5db0:	88 e8       	ldi	r24, 0x88	; 136
    5db2:	92 e2       	ldi	r25, 0x22	; 34
    5db4:	80 93 1a 20 	sts	0x201A, r24
    5db8:	90 93 1b 20 	sts	0x201B, r25
	fpgm.len = sizeof(fpgm.buf);
    5dbc:	82 e0       	ldi	r24, 0x02	; 2
    5dbe:	80 93 8b 22 	sts	0x228B, r24
}
    5dc2:	08 95       	ret

00005dc4 <xio_pgm_open>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

FILE * xio_pgm_open(const prog_char *addr)
{
	fpgm.flags &= XIO_FLAG_RESET_gm;			// reset the signaling bits
    5dc4:	20 91 85 22 	lds	r18, 0x2285
    5dc8:	30 91 86 22 	lds	r19, 0x2286
    5dcc:	3f 70       	andi	r19, 0x0F	; 15
    5dce:	20 93 85 22 	sts	0x2285, r18
    5dd2:	30 93 86 22 	sts	0x2286, r19
	fpgm.pgmbase_P = (PROGMEM char *)addr;		// might want to range check this
    5dd6:	80 93 8e 22 	sts	0x228E, r24
    5dda:	90 93 8f 22 	sts	0x228F, r25
	fpgm.idx = 0;
    5dde:	10 92 90 22 	sts	0x2290, r1
    5de2:	10 92 91 22 	sts	0x2291, r1
	return(&dev_pgm);
}
    5de6:	8e e0       	ldi	r24, 0x0E	; 14
    5de8:	90 e2       	ldi	r25, 0x20	; 32
    5dea:	08 95       	ret

00005dec <xio_pgm_control>:
 *	XIO_SEMICOLONS <null>		Treat semicolons as line breaks
 *	XIO_NOSEMICOLONS <null>	Y	Don't treat semicolons as line breaks
 */

int8_t xio_pgm_control(const uint16_t control, const int16_t arg)
{
    5dec:	9c 01       	movw	r18, r24
	// transfer control flags to internal flag bits
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;		// set flags to defaults & initial state
    5dee:	85 e0       	ldi	r24, 0x05	; 5
    5df0:	90 e0       	ldi	r25, 0x00	; 0
    5df2:	80 93 85 22 	sts	0x2285, r24
    5df6:	90 93 86 22 	sts	0x2286, r25
	if (control & XIO_ECHO) {
    5dfa:	30 ff       	sbrs	r19, 0
    5dfc:	06 c0       	rjmp	.+12     	; 0x5e0a <xio_pgm_control+0x1e>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5dfe:	85 e1       	ldi	r24, 0x15	; 21
    5e00:	90 e0       	ldi	r25, 0x00	; 0
    5e02:	80 93 85 22 	sts	0x2285, r24
    5e06:	90 93 86 22 	sts	0x2286, r25
	}
	if (control & XIO_NOECHO) {
    5e0a:	31 ff       	sbrs	r19, 1
    5e0c:	09 c0       	rjmp	.+18     	; 0x5e20 <xio_pgm_control+0x34>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5e0e:	80 91 85 22 	lds	r24, 0x2285
    5e12:	90 91 86 22 	lds	r25, 0x2286
    5e16:	8f 7e       	andi	r24, 0xEF	; 239
    5e18:	80 93 85 22 	sts	0x2285, r24
    5e1c:	90 93 86 22 	sts	0x2286, r25
	}
	if (control & XIO_CRLF) {
    5e20:	32 ff       	sbrs	r19, 2
    5e22:	09 c0       	rjmp	.+18     	; 0x5e36 <xio_pgm_control+0x4a>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5e24:	80 91 85 22 	lds	r24, 0x2285
    5e28:	90 91 86 22 	lds	r25, 0x2286
    5e2c:	80 62       	ori	r24, 0x20	; 32
    5e2e:	80 93 85 22 	sts	0x2285, r24
    5e32:	90 93 86 22 	sts	0x2286, r25
	}
	if (control & XIO_NOCRLF) {
    5e36:	33 ff       	sbrs	r19, 3
    5e38:	09 c0       	rjmp	.+18     	; 0x5e4c <xio_pgm_control+0x60>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5e3a:	80 91 85 22 	lds	r24, 0x2285
    5e3e:	90 91 86 22 	lds	r25, 0x2286
    5e42:	8f 7d       	andi	r24, 0xDF	; 223
    5e44:	80 93 85 22 	sts	0x2285, r24
    5e48:	90 93 86 22 	sts	0x2286, r25
	}
	if (control & XIO_LINEMODE) {
    5e4c:	34 ff       	sbrs	r19, 4
    5e4e:	09 c0       	rjmp	.+18     	; 0x5e62 <xio_pgm_control+0x76>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5e50:	80 91 85 22 	lds	r24, 0x2285
    5e54:	90 91 86 22 	lds	r25, 0x2286
    5e58:	80 64       	ori	r24, 0x40	; 64
    5e5a:	80 93 85 22 	sts	0x2285, r24
    5e5e:	90 93 86 22 	sts	0x2286, r25
	}
	if (control & XIO_NOLINEMODE) {
    5e62:	35 ff       	sbrs	r19, 5
    5e64:	09 c0       	rjmp	.+18     	; 0x5e78 <xio_pgm_control+0x8c>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5e66:	80 91 85 22 	lds	r24, 0x2285
    5e6a:	90 91 86 22 	lds	r25, 0x2286
    5e6e:	8f 7b       	andi	r24, 0xBF	; 191
    5e70:	80 93 85 22 	sts	0x2285, r24
    5e74:	90 93 86 22 	sts	0x2286, r25
	}
	if (control & XIO_SEMICOLONS) {
    5e78:	36 ff       	sbrs	r19, 6
    5e7a:	09 c0       	rjmp	.+18     	; 0x5e8e <xio_pgm_control+0xa2>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5e7c:	80 91 85 22 	lds	r24, 0x2285
    5e80:	90 91 86 22 	lds	r25, 0x2286
    5e84:	80 68       	ori	r24, 0x80	; 128
    5e86:	80 93 85 22 	sts	0x2285, r24
    5e8a:	90 93 86 22 	sts	0x2286, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5e8e:	37 ff       	sbrs	r19, 7
    5e90:	09 c0       	rjmp	.+18     	; 0x5ea4 <xio_pgm_control+0xb8>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5e92:	80 91 85 22 	lds	r24, 0x2285
    5e96:	90 91 86 22 	lds	r25, 0x2286
    5e9a:	8f 77       	andi	r24, 0x7F	; 127
    5e9c:	80 93 85 22 	sts	0x2285, r24
    5ea0:	90 93 86 22 	sts	0x2286, r25
	}
	return (0);
}
    5ea4:	80 e0       	ldi	r24, 0x00	; 0
    5ea6:	08 95       	ret

00005ea8 <xio_pgm_putc>:
 */

int xio_pgm_putc(const char c, FILE *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    5ea8:	8f ef       	ldi	r24, 0xFF	; 255
    5eaa:	9f ef       	ldi	r25, 0xFF	; 255
    5eac:	08 95       	ret

00005eae <xio_pgm_readln>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_pgm_readln(char *buf, uint8_t len)
{
    5eae:	9c 01       	movw	r18, r24
	if (!(fpgm.pgmbase_P)) {					// return error if no file is open
    5eb0:	80 91 8e 22 	lds	r24, 0x228E
    5eb4:	90 91 8f 22 	lds	r25, 0x228F
    5eb8:	89 2b       	or	r24, r25
    5eba:	19 f4       	brne	.+6      	; 0x5ec2 <xio_pgm_readln+0x14>
    5ebc:	22 e1       	ldi	r18, 0x12	; 18
    5ebe:	30 e0       	ldi	r19, 0x00	; 0
    5ec0:	17 c0       	rjmp	.+46     	; 0x5ef0 <xio_pgm_readln+0x42>
		return (TG_FILE_NOT_OPEN);
	}
	fpgm.sig = XIO_SIG_OK;						// initialize signal
    5ec2:	10 92 88 22 	sts	0x2288, r1
	if (fgets(buf, len, &dev_pgm) == NULL) {
    5ec6:	c9 01       	movw	r24, r18
    5ec8:	70 e0       	ldi	r23, 0x00	; 0
    5eca:	4e e0       	ldi	r20, 0x0E	; 14
    5ecc:	50 e2       	ldi	r21, 0x20	; 32
    5ece:	0e 94 76 49 	call	0x92ec	; 0x92ec <fgets>
    5ed2:	89 2b       	or	r24, r25
    5ed4:	19 f0       	breq	.+6      	; 0x5edc <xio_pgm_readln+0x2e>
    5ed6:	20 e0       	ldi	r18, 0x00	; 0
    5ed8:	30 e0       	ldi	r19, 0x00	; 0
    5eda:	0a c0       	rjmp	.+20     	; 0x5ef0 <xio_pgm_readln+0x42>
		fpgm.pgmbase_P = NULL;
    5edc:	10 92 8e 22 	sts	0x228E, r1
    5ee0:	10 92 8f 22 	sts	0x228F, r1
		clearerr(&dev_pgm);
    5ee4:	8e e0       	ldi	r24, 0x0E	; 14
    5ee6:	90 e2       	ldi	r25, 0x20	; 32
    5ee8:	0e 94 71 49 	call	0x92e2	; 0x92e2 <clearerr>
    5eec:	25 e0       	ldi	r18, 0x05	; 5
    5eee:	30 e0       	ldi	r19, 0x00	; 0
		return (TG_EOF);
	}
	return (TG_OK);
}
    5ef0:	c9 01       	movw	r24, r18
    5ef2:	08 95       	ret

00005ef4 <xio_pgm_getc>:
 *		- Note: putc should expand newlines to <cr><lf>
 */

int xio_pgm_getc(FILE *stream)
{
	if (fpgm.flags & XIO_FLAG_EOF_bm) {
    5ef4:	40 91 85 22 	lds	r20, 0x2285
    5ef8:	50 91 86 22 	lds	r21, 0x2286
    5efc:	55 ff       	sbrs	r21, 5
    5efe:	06 c0       	rjmp	.+12     	; 0x5f0c <xio_pgm_getc+0x18>
		fpgm.sig = XIO_SIG_EOF;
    5f00:	83 e0       	ldi	r24, 0x03	; 3
    5f02:	80 93 88 22 	sts	0x2288, r24
    5f06:	2e ef       	ldi	r18, 0xFE	; 254
    5f08:	3f ef       	ldi	r19, 0xFF	; 255
    5f0a:	3f c0       	rjmp	.+126    	; 0x5f8a <xio_pgm_getc+0x96>
		return (_FDEV_EOF);
	}
	if ((fpgm.c = pgm_read_byte(&fpgm.pgmbase_P[fpgm.idx])) == NUL) {
    5f0c:	20 91 90 22 	lds	r18, 0x2290
    5f10:	30 91 91 22 	lds	r19, 0x2291
    5f14:	e0 91 8e 22 	lds	r30, 0x228E
    5f18:	f0 91 8f 22 	lds	r31, 0x228F
    5f1c:	e2 0f       	add	r30, r18
    5f1e:	f3 1f       	adc	r31, r19
    5f20:	84 91       	lpm	r24, Z+
    5f22:	80 93 89 22 	sts	0x2289, r24
    5f26:	88 23       	and	r24, r24
    5f28:	29 f4       	brne	.+10     	; 0x5f34 <xio_pgm_getc+0x40>
		fpgm.flags |= XIO_FLAG_EOF_bm;
    5f2a:	50 62       	ori	r21, 0x20	; 32
    5f2c:	40 93 85 22 	sts	0x2285, r20
    5f30:	50 93 86 22 	sts	0x2286, r21
	}
	++fpgm.idx;
    5f34:	2f 5f       	subi	r18, 0xFF	; 255
    5f36:	3f 4f       	sbci	r19, 0xFF	; 255
    5f38:	20 93 90 22 	sts	0x2290, r18
    5f3c:	30 93 91 22 	sts	0x2291, r19
	if (!LINEMODE(fpgm.flags)) {		// processing is simple if not LINEMODE
    5f40:	90 91 85 22 	lds	r25, 0x2285
    5f44:	96 fd       	sbrc	r25, 6
    5f46:	07 c0       	rjmp	.+14     	; 0x5f56 <xio_pgm_getc+0x62>
		if (ECHO(fpgm.flags)) {
    5f48:	94 ff       	sbrs	r25, 4
    5f4a:	1b c0       	rjmp	.+54     	; 0x5f82 <xio_pgm_getc+0x8e>
			putchar(fpgm.c);
    5f4c:	60 91 82 25 	lds	r22, 0x2582
    5f50:	70 91 83 25 	lds	r23, 0x2583
    5f54:	13 c0       	rjmp	.+38     	; 0x5f7c <xio_pgm_getc+0x88>
		}
		return (fpgm.c);
	}
	// now do the LINEMODE stuff
	if (fpgm.c == NUL) {				// perform newline substitutions
    5f56:	88 23       	and	r24, r24
    5f58:	31 f0       	breq	.+12     	; 0x5f66 <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if (fpgm.c == '\r') {
    5f5a:	8d 30       	cpi	r24, 0x0D	; 13
    5f5c:	21 f0       	breq	.+8      	; 0x5f66 <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if ((SEMICOLONS(fpgm.flags)) && (fpgm.c == ';')) {
    5f5e:	97 ff       	sbrs	r25, 7
    5f60:	05 c0       	rjmp	.+10     	; 0x5f6c <xio_pgm_getc+0x78>
    5f62:	8b 33       	cpi	r24, 0x3B	; 59
    5f64:	19 f4       	brne	.+6      	; 0x5f6c <xio_pgm_getc+0x78>
		fpgm.c = '\n';
    5f66:	8a e0       	ldi	r24, 0x0A	; 10
    5f68:	80 93 89 22 	sts	0x2289, r24
	}
	if (ECHO(fpgm.flags)) {
    5f6c:	94 ff       	sbrs	r25, 4
    5f6e:	09 c0       	rjmp	.+18     	; 0x5f82 <xio_pgm_getc+0x8e>
		putchar(fpgm.c);
    5f70:	60 91 82 25 	lds	r22, 0x2582
    5f74:	70 91 83 25 	lds	r23, 0x2583
    5f78:	80 91 89 22 	lds	r24, 0x2289
    5f7c:	90 e0       	ldi	r25, 0x00	; 0
    5f7e:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
	}
	return (fpgm.c);
    5f82:	80 91 89 22 	lds	r24, 0x2289
    5f86:	28 2f       	mov	r18, r24
    5f88:	30 e0       	ldi	r19, 0x00	; 0
}
    5f8a:	c9 01       	movw	r24, r18
    5f8c:	08 95       	ret

00005f8e <tg_reset_source>:
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    5f8e:	80 91 96 22 	lds	r24, 0x2296
    5f92:	80 93 95 22 	sts	0x2295, r24
 */

void tg_reset_source()
{
	_tg_set_source(tg.default_src);
}
    5f96:	08 95       	ret

00005f98 <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    5f98:	fc 01       	movw	r30, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    5f9a:	80 91 94 22 	lds	r24, 0x2294
    5f9e:	88 23       	and	r24, r24
    5fa0:	79 f5       	brne	.+94     	; 0x6000 <__stack+0x1>
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
    5fa2:	90 81       	ld	r25, Z
    5fa4:	89 2f       	mov	r24, r25
    5fa6:	81 56       	subi	r24, 0x61	; 97
    5fa8:	8a 31       	cpi	r24, 0x1A	; 26
    5faa:	10 f4       	brcc	.+4      	; 0x5fb0 <tg_parser+0x18>
			buf[0] = buf[0]-'a'+'A';
    5fac:	90 52       	subi	r25, 0x20	; 32
    5fae:	90 83       	st	Z, r25
		}
		switch (buf[0]) {
    5fb0:	80 81       	ld	r24, Z
    5fb2:	86 34       	cpi	r24, 0x46	; 70
    5fb4:	b1 f0       	breq	.+44     	; 0x5fe2 <tg_parser+0x4a>
    5fb6:	87 34       	cpi	r24, 0x47	; 71
    5fb8:	38 f4       	brcc	.+14     	; 0x5fc8 <tg_parser+0x30>
    5fba:	83 34       	cpi	r24, 0x43	; 67
    5fbc:	61 f0       	breq	.+24     	; 0x5fd6 <tg_parser+0x3e>
    5fbe:	84 34       	cpi	r24, 0x44	; 68
    5fc0:	71 f0       	breq	.+28     	; 0x5fde <tg_parser+0x46>
    5fc2:	8f 33       	cpi	r24, 0x3F	; 63
    5fc4:	d9 f4       	brne	.+54     	; 0x5ffc <tg_parser+0x64>
    5fc6:	07 c0       	rjmp	.+14     	; 0x5fd6 <tg_parser+0x3e>
    5fc8:	87 34       	cpi	r24, 0x47	; 71
    5fca:	19 f0       	breq	.+6      	; 0x5fd2 <tg_parser+0x3a>
    5fcc:	8d 54       	subi	r24, 0x4D	; 77
    5fce:	82 30       	cpi	r24, 0x02	; 2
    5fd0:	a8 f4       	brcc	.+42     	; 0x5ffc <tg_parser+0x64>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5fd2:	82 e0       	ldi	r24, 0x02	; 2
    5fd4:	01 c0       	rjmp	.+2      	; 0x5fd8 <tg_parser+0x40>
	if (tg.mode == TG_CONTROL_MODE) {
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
			buf[0] = buf[0]-'a'+'A';
		}
		switch (buf[0]) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    5fd6:	81 e0       	ldi	r24, 0x01	; 1
    5fd8:	80 93 94 22 	sts	0x2294, r24
    5fdc:	11 c0       	rjmp	.+34     	; 0x6000 <__stack+0x1>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5fde:	83 e0       	ldi	r24, 0x03	; 3
    5fe0:	fb cf       	rjmp	.-10     	; 0x5fd8 <tg_parser+0x40>
//	xio_pgm_open(PGMFILE(&square_circle_test100));
//	xio_pgm_open(PGMFILE(&spiral_test50a));
//	xio_pgm_open(PGMFILE(&spiral_test5));
//	xio_pgm_open(PGMFILE(&dwell_test2));

	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
    5fe2:	88 e8       	ldi	r24, 0x88	; 136
    5fe4:	97 e1       	ldi	r25, 0x17	; 23
    5fe6:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <xio_pgm_open>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5fea:	82 e0       	ldi	r24, 0x02	; 2
    5fec:	80 93 94 22 	sts	0x2294, r24
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    5ff0:	83 e0       	ldi	r24, 0x03	; 3
    5ff2:	80 93 95 22 	sts	0x2295, r24
    5ff6:	20 e0       	ldi	r18, 0x00	; 0
    5ff8:	30 e0       	ldi	r19, 0x00	; 0
    5ffa:	1d c0       	rjmp	.+58     	; 0x6036 <__stack+0x37>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5ffc:	10 92 94 22 	sts	0x2294, r1
			case 'F': return (_tg_test_file());
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    6000:	10 92 93 22 	sts	0x2293, r1
	switch (tg.mode) {
    6004:	80 91 94 22 	lds	r24, 0x2294
    6008:	82 30       	cpi	r24, 0x02	; 2
    600a:	41 f0       	breq	.+16     	; 0x601c <__stack+0x1d>
    600c:	83 30       	cpi	r24, 0x03	; 3
    600e:	51 f0       	breq	.+20     	; 0x6024 <__stack+0x25>
    6010:	81 30       	cpi	r24, 0x01	; 1
    6012:	69 f4       	brne	.+26     	; 0x602e <__stack+0x2f>
		case TG_CONFIG_MODE: tg.status = cfg_parse(buf); break;
    6014:	cf 01       	movw	r24, r30
    6016:	0e 94 8c 19 	call	0x3318	; 0x3318 <cfg_parse>
    601a:	07 c0       	rjmp	.+14     	; 0x602a <__stack+0x2b>
		case TG_GCODE_MODE: tg.status = gc_gcode_parser(buf); break;
    601c:	cf 01       	movw	r24, r30
    601e:	0e 94 29 16 	call	0x2c52	; 0x2c52 <gc_gcode_parser>
    6022:	03 c0       	rjmp	.+6      	; 0x602a <__stack+0x2b>
		case TG_DIRECT_DRIVE_MODE: tg.status = dd_parser(buf); break;
    6024:	cf 01       	movw	r24, r30
    6026:	0e 94 d5 30 	call	0x61aa	; 0x61aa <dd_parser>
    602a:	80 93 93 22 	sts	0x2293, r24
	}
	return (tg.status);
    602e:	80 91 93 22 	lds	r24, 0x2293
    6032:	28 2f       	mov	r18, r24
    6034:	30 e0       	ldi	r19, 0x00	; 0
}
    6036:	c9 01       	movw	r24, r18
    6038:	08 95       	ret

0000603a <tg_controller>:
 */

void tg_controller()
{
	// top priority tasks
	st_execute_move();
    603a:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <st_execute_move>

	// medium priority tasks
	if ((tg.status = mc_line_continue()) == TG_EAGAIN) {	// line generator
    603e:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <mc_line_continue>
    6042:	80 93 93 22 	sts	0x2293, r24
    6046:	81 30       	cpi	r24, 0x01	; 1
    6048:	09 f4       	brne	.+2      	; 0x604c <tg_controller+0x12>
    604a:	84 c0       	rjmp	.+264    	; 0x6154 <tg_controller+0x11a>
		return;
	}
	if ((tg.status = mc_arc_continue()) == TG_EAGAIN) {	 	// arc generator 
    604c:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <mc_arc_continue>
    6050:	80 93 93 22 	sts	0x2293, r24
    6054:	81 30       	cpi	r24, 0x01	; 1
    6056:	09 f4       	brne	.+2      	; 0x605a <tg_controller+0x20>
    6058:	7d c0       	rjmp	.+250    	; 0x6154 <tg_controller+0x11a>
 */

static int _tg_read_next_line()
{
	// read input line or return if not a completed line
	if ((tg.status = xio_fget_ln(tg.src, tg.dev[tg.src].buf, tg.dev[tg.src].len)) == TG_OK) {
    605a:	80 91 95 22 	lds	r24, 0x2295
    605e:	48 2f       	mov	r20, r24
    6060:	50 e0       	ldi	r21, 0x00	; 0
    6062:	22 e5       	ldi	r18, 0x52	; 82
    6064:	30 e0       	ldi	r19, 0x00	; 0
    6066:	42 9f       	mul	r20, r18
    6068:	b0 01       	movw	r22, r0
    606a:	43 9f       	mul	r20, r19
    606c:	70 0d       	add	r23, r0
    606e:	52 9f       	mul	r21, r18
    6070:	70 0d       	add	r23, r0
    6072:	11 24       	eor	r1, r1
    6074:	fb 01       	movw	r30, r22
    6076:	ee 56       	subi	r30, 0x6E	; 110
    6078:	fd 4d       	sbci	r31, 0xDD	; 221
    607a:	66 56       	subi	r22, 0x66	; 102
    607c:	7d 4d       	sbci	r23, 0xDD	; 221
    607e:	47 81       	ldd	r20, Z+7	; 0x07
    6080:	0e 94 2c 28 	call	0x5058	; 0x5058 <xio_fget_ln>
    6084:	80 93 93 22 	sts	0x2293, r24
    6088:	88 23       	and	r24, r24
    608a:	61 f4       	brne	.+24     	; 0x60a4 <tg_controller+0x6a>
		tg.status = tg_parser(tg.dev[tg.src].buf);	// dispatch to parser
    608c:	80 91 95 22 	lds	r24, 0x2295
    6090:	22 e5       	ldi	r18, 0x52	; 82
    6092:	82 9f       	mul	r24, r18
    6094:	c0 01       	movw	r24, r0
    6096:	11 24       	eor	r1, r1
    6098:	86 56       	subi	r24, 0x66	; 102
    609a:	9d 4d       	sbci	r25, 0xDD	; 221
    609c:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <tg_parser>
    60a0:	80 93 93 22 	sts	0x2293, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    60a4:	80 91 93 22 	lds	r24, 0x2293
    60a8:	83 30       	cpi	r24, 0x03	; 3
    60aa:	18 f4       	brcc	.+6      	; 0x60b2 <tg_controller+0x78>
    60ac:	81 30       	cpi	r24, 0x01	; 1
    60ae:	f0 f4       	brcc	.+60     	; 0x60ec <tg_controller+0xb2>
    60b0:	1b c0       	rjmp	.+54     	; 0x60e8 <tg_controller+0xae>
    60b2:	83 30       	cpi	r24, 0x03	; 3
    60b4:	19 f0       	breq	.+6      	; 0x60bc <tg_controller+0x82>
    60b6:	85 30       	cpi	r24, 0x05	; 5
    60b8:	b9 f4       	brne	.+46     	; 0x60e8 <tg_controller+0xae>
    60ba:	03 c0       	rjmp	.+6      	; 0x60c2 <tg_controller+0x88>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    60bc:	10 92 94 22 	sts	0x2294, r1
    60c0:	13 c0       	rjmp	.+38     	; 0x60e8 <tg_controller+0xae>
			_tg_set_mode(TG_CONTROL_MODE);
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
    60c2:	0f 92       	push	r0
    60c4:	0f 92       	push	r0
    60c6:	82 ea       	ldi	r24, 0xA2	; 162
    60c8:	9b e1       	ldi	r25, 0x1B	; 27
    60ca:	ed b7       	in	r30, 0x3d	; 61
    60cc:	fe b7       	in	r31, 0x3e	; 62
    60ce:	81 83       	std	Z+1, r24	; 0x01
    60d0:	92 83       	std	Z+2, r25	; 0x02
    60d2:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    60d6:	80 91 96 22 	lds	r24, 0x2296
    60da:	80 93 95 22 	sts	0x2295, r24
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
			tg_reset_source();						// reset to default src
			tg.state = TG_READY_UNPROMPTED;
    60de:	10 92 92 22 	sts	0x2292, r1
    60e2:	0f 90       	pop	r0
    60e4:	0f 90       	pop	r0
    60e6:	02 c0       	rjmp	.+4      	; 0x60ec <tg_controller+0xb2>
			break;
		}
		default: {
			tg.state = TG_READY_UNPROMPTED;			// traps various error returns
    60e8:	10 92 92 22 	sts	0x2292, r1
	if ((tg.status = mc_arc_continue()) == TG_EAGAIN) {	 	// arc generator 
		return;
	}

	// low priority tasks
	if ((tg.status = _tg_read_next_line()) == TG_EAGAIN) {	// input line
    60ec:	10 92 93 22 	sts	0x2293, r1
	tgModeStringDirect
};

void _tg_prompt()
{
	if (tg.state == TG_READY_UNPROMPTED) {
    60f0:	80 91 92 22 	lds	r24, 0x2292
    60f4:	88 23       	and	r24, r24
    60f6:	71 f5       	brne	.+92     	; 0x6154 <tg_controller+0x11a>
		if (tg.dev[tg.src].flags && XIO_FLAG_PROMPTS_bm) {
    60f8:	80 91 95 22 	lds	r24, 0x2295
    60fc:	90 e0       	ldi	r25, 0x00	; 0
    60fe:	22 e5       	ldi	r18, 0x52	; 82
    6100:	30 e0       	ldi	r19, 0x00	; 0
    6102:	82 9f       	mul	r24, r18
    6104:	f0 01       	movw	r30, r0
    6106:	83 9f       	mul	r24, r19
    6108:	f0 0d       	add	r31, r0
    610a:	92 9f       	mul	r25, r18
    610c:	f0 0d       	add	r31, r0
    610e:	11 24       	eor	r1, r1
    6110:	ee 56       	subi	r30, 0x6E	; 110
    6112:	fd 4d       	sbci	r31, 0xDD	; 221
    6114:	86 81       	ldd	r24, Z+6	; 0x06
    6116:	88 23       	and	r24, r24
    6118:	d1 f0       	breq	.+52     	; 0x614e <tg_controller+0x114>
			printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    611a:	80 91 94 22 	lds	r24, 0x2294
    611e:	e8 2f       	mov	r30, r24
    6120:	f0 e0       	ldi	r31, 0x00	; 0
    6122:	ee 0f       	add	r30, r30
    6124:	ff 1f       	adc	r31, r31
    6126:	e6 56       	subi	r30, 0x66	; 102
    6128:	f4 4e       	sbci	r31, 0xE4	; 228
    612a:	25 91       	lpm	r18, Z+
    612c:	34 91       	lpm	r19, Z+
    612e:	00 d0       	rcall	.+0      	; 0x6130 <tg_controller+0xf6>
    6130:	0f 92       	push	r0
    6132:	87 eb       	ldi	r24, 0xB7	; 183
    6134:	9b e1       	ldi	r25, 0x1B	; 27
    6136:	ed b7       	in	r30, 0x3d	; 61
    6138:	fe b7       	in	r31, 0x3e	; 62
    613a:	81 83       	std	Z+1, r24	; 0x01
    613c:	92 83       	std	Z+2, r25	; 0x02
    613e:	23 83       	std	Z+3, r18	; 0x03
    6140:	34 83       	std	Z+4, r19	; 0x04
    6142:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
    6146:	0f 90       	pop	r0
    6148:	0f 90       	pop	r0
    614a:	0f 90       	pop	r0
    614c:	0f 90       	pop	r0
		}
		tg.state = TG_READY_PROMPTED;
    614e:	81 e0       	ldi	r24, 0x01	; 1
    6150:	80 93 92 22 	sts	0x2292, r24
    6154:	08 95       	ret

00006156 <tg_init>:

void tg_init() 
{
	// initialize devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) { // don't bother with /dev/null
		tg.dev[i].flags = XIO_FLAG_PROMPTS_bm;
    6156:	91 e0       	ldi	r25, 0x01	; 1
    6158:	90 93 ea 22 	sts	0x22EA, r25
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    615c:	80 e5       	ldi	r24, 0x50	; 80
    615e:	80 93 eb 22 	sts	0x22EB, r24

void tg_init() 
{
	// initialize devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) { // don't bother with /dev/null
		tg.dev[i].flags = XIO_FLAG_PROMPTS_bm;
    6162:	90 93 3c 23 	sts	0x233C, r25
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    6166:	80 93 3d 23 	sts	0x233D, r24
    616a:	80 93 8f 23 	sts	0x238F, r24
	}
	tg.dev[XIO_DEV_PGM].flags = 0;			// no asterisks on file devices
    616e:	10 92 8e 23 	sts	0x238E, r1

	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
    6172:	90 93 96 22 	sts	0x2296, r25
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    6176:	90 93 95 22 	sts	0x2295, r25
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    617a:	10 92 94 22 	sts	0x2294, r1

	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
	_tg_set_source(tg.default_src);			// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode
	tg.state = TG_READY_UNPROMPTED;
    617e:	10 92 92 22 	sts	0x2292, r1

	// version string
	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    6182:	00 d0       	rcall	.+0      	; 0x6184 <tg_init+0x2e>
    6184:	0f 92       	push	r0
    6186:	8f ec       	ldi	r24, 0xCF	; 207
    6188:	9b e1       	ldi	r25, 0x1B	; 27
    618a:	ed b7       	in	r30, 0x3d	; 61
    618c:	fe b7       	in	r31, 0x3e	; 62
    618e:	81 83       	std	Z+1, r24	; 0x01
    6190:	92 83       	std	Z+2, r25	; 0x02
    6192:	85 ec       	ldi	r24, 0xC5	; 197
    6194:	9b e1       	ldi	r25, 0x1B	; 27
    6196:	83 83       	std	Z+3, r24	; 0x03
    6198:	94 83       	std	Z+4, r25	; 0x04
    619a:	0e 94 d5 49 	call	0x93aa	; 0x93aa <printf_P>
    619e:	0f 90       	pop	r0
    61a0:	0f 90       	pop	r0
    61a2:	0f 90       	pop	r0
    61a4:	0f 90       	pop	r0
}
    61a6:	08 95       	ret

000061a8 <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    61a8:	08 95       	ret

000061aa <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    61aa:	80 e0       	ldi	r24, 0x00	; 0
    61ac:	90 e0       	ldi	r25, 0x00	; 0
    61ae:	08 95       	ret

000061b0 <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    61b0:	10 92 e0 23 	sts	0x23E0, r1
	mv.move_buffer_tail = 0;
    61b4:	10 92 e1 23 	sts	0x23E1, r1
}
    61b8:	08 95       	ret

000061ba <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    61ba:	90 91 e0 23 	lds	r25, 0x23E0
    61be:	80 91 e1 23 	lds	r24, 0x23E1
    61c2:	98 17       	cp	r25, r24
    61c4:	19 f4       	brne	.+6      	; 0x61cc <mv_dequeue_move_buffer+0x12>
    61c6:	20 e0       	ldi	r18, 0x00	; 0
    61c8:	30 e0       	ldi	r19, 0x00	; 0
    61ca:	17 c0       	rjmp	.+46     	; 0x61fa <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    61cc:	90 91 e1 23 	lds	r25, 0x23E1
    61d0:	8e e1       	ldi	r24, 0x1E	; 30
    61d2:	98 9f       	mul	r25, r24
    61d4:	90 01       	movw	r18, r0
    61d6:	11 24       	eor	r1, r1
    61d8:	2c 51       	subi	r18, 0x1C	; 28
    61da:	3c 4d       	sbci	r19, 0xDC	; 220
    61dc:	20 93 e2 23 	sts	0x23E2, r18
    61e0:	30 93 e3 23 	sts	0x23E3, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    61e4:	80 91 e1 23 	lds	r24, 0x23E1
    61e8:	8f 5f       	subi	r24, 0xFF	; 255
    61ea:	80 93 e1 23 	sts	0x23E1, r24
    61ee:	80 91 e1 23 	lds	r24, 0x23E1
    61f2:	83 30       	cpi	r24, 0x03	; 3
    61f4:	10 f0       	brcs	.+4      	; 0x61fa <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    61f6:	10 92 e1 23 	sts	0x23E1, r1
	}
	return (mv.p); 
}
    61fa:	c9 01       	movw	r24, r18
    61fc:	08 95       	ret

000061fe <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    61fe:	90 91 e0 23 	lds	r25, 0x23E0
    6202:	9f 5f       	subi	r25, 0xFF	; 255
    6204:	93 30       	cpi	r25, 0x03	; 3
    6206:	08 f0       	brcs	.+2      	; 0x620a <mv_test_move_buffer_full+0xc>
    6208:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    620a:	80 91 e1 23 	lds	r24, 0x23E1
    620e:	20 e0       	ldi	r18, 0x00	; 0
    6210:	89 17       	cp	r24, r25
    6212:	09 f4       	brne	.+2      	; 0x6216 <mv_test_move_buffer_full+0x18>
    6214:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    6216:	82 2f       	mov	r24, r18
    6218:	08 95       	ret

0000621a <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    621a:	0b c0       	rjmp	.+22     	; 0x6232 <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    621c:	80 91 48 00 	lds	r24, 0x0048
    6220:	81 60       	ori	r24, 0x01	; 1
    6222:	80 93 48 00 	sts	0x0048, r24
    6226:	88 95       	sleep
    6228:	80 91 48 00 	lds	r24, 0x0048
    622c:	8e 7f       	andi	r24, 0xFE	; 254
    622e:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    6232:	90 91 e1 23 	lds	r25, 0x23E1
    6236:	80 91 e0 23 	lds	r24, 0x23E0
    623a:	98 17       	cp	r25, r24
    623c:	79 f7       	brne	.-34     	; 0x621c <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    623e:	08 95       	ret

00006240 <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    6240:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    6242:	80 91 e0 23 	lds	r24, 0x23E0
    6246:	80 93 e1 23 	sts	0x23E1, r24
	mv.p = NULL;
    624a:	10 92 e2 23 	sts	0x23E2, r1
    624e:	10 92 e3 23 	sts	0x23E3, r1
	sei();
    6252:	78 94       	sei
}
    6254:	08 95       	ret

00006256 <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    6256:	2f 92       	push	r2
    6258:	3f 92       	push	r3
    625a:	4f 92       	push	r4
    625c:	5f 92       	push	r5
    625e:	6f 92       	push	r6
    6260:	7f 92       	push	r7
    6262:	8f 92       	push	r8
    6264:	9f 92       	push	r9
    6266:	af 92       	push	r10
    6268:	bf 92       	push	r11
    626a:	cf 92       	push	r12
    626c:	df 92       	push	r13
    626e:	ef 92       	push	r14
    6270:	ff 92       	push	r15
    6272:	0f 93       	push	r16
    6274:	1f 93       	push	r17
    6276:	df 93       	push	r29
    6278:	cf 93       	push	r28
    627a:	cd b7       	in	r28, 0x3d	; 61
    627c:	de b7       	in	r29, 0x3e	; 62
    627e:	2b 97       	sbiw	r28, 0x0b	; 11
    6280:	cd bf       	out	0x3d, r28	; 61
    6282:	de bf       	out	0x3e, r29	; 62
    6284:	3b 01       	movw	r6, r22
    6286:	4c 01       	movw	r8, r24
    6288:	19 01       	movw	r2, r18
    628a:	2a 01       	movw	r4, r20
					// Using 64 bits is expensive! The division goes from ~640 
					// cycles at 32 bits to ~3800 cycles using 64 bits
	uint32_t ticks_per_step; // temp variable

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    628c:	20 91 e0 23 	lds	r18, 0x23E0
    6290:	2f 5f       	subi	r18, 0xFF	; 255
    6292:	29 87       	std	Y+9, r18	; 0x09
    6294:	23 30       	cpi	r18, 0x03	; 3
    6296:	08 f0       	brcs	.+2      	; 0x629a <mv_queue_move_buffer+0x44>
    6298:	19 86       	std	Y+9, r1	; 0x09
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    629a:	80 91 e1 23 	lds	r24, 0x23E1
    629e:	39 85       	ldd	r19, Y+9	; 0x09
    62a0:	83 17       	cp	r24, r19
    62a2:	11 f4       	brne	.+4      	; 0x62a8 <mv_queue_move_buffer+0x52>
    62a4:	87 e0       	ldi	r24, 0x07	; 7
    62a6:	92 c1       	rjmp	.+804    	; 0x65cc <mv_queue_move_buffer+0x376>
		return (TG_BUFFER_FULL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    62a8:	e0 91 e0 23 	lds	r30, 0x23E0
    62ac:	8e e1       	ldi	r24, 0x1E	; 30
    62ae:	e8 9f       	mul	r30, r24
    62b0:	f0 01       	movw	r30, r0
    62b2:	11 24       	eor	r1, r1
    62b4:	ec 51       	subi	r30, 0x1C	; 28
    62b6:	fc 4d       	sbci	r31, 0xDC	; 220
    62b8:	e0 93 e2 23 	sts	0x23E2, r30
    62bc:	f0 93 e3 23 	sts	0x23E3, r31
	memset(mv.p, 0, sizeof(struct mvMove));
    62c0:	df 01       	movw	r26, r30
    62c2:	1d 92       	st	X+, r1
    62c4:	8a 95       	dec	r24
    62c6:	e9 f7       	brne	.-6      	; 0x62c2 <mv_queue_move_buffer+0x6c>
	mv.p->a[X].steps = steps_x;
    62c8:	e0 91 e2 23 	lds	r30, 0x23E2
    62cc:	f0 91 e3 23 	lds	r31, 0x23E3
    62d0:	ea 87       	std	Y+10, r30	; 0x0a
    62d2:	fb 87       	std	Y+11, r31	; 0x0b
    62d4:	60 82       	st	Z, r6
    62d6:	71 82       	std	Z+1, r7	; 0x01
    62d8:	82 82       	std	Z+2, r8	; 0x02
    62da:	93 82       	std	Z+3, r9	; 0x03
	mv.p->a[Y].steps = steps_y;
    62dc:	22 86       	std	Z+10, r2	; 0x0a
    62de:	33 86       	std	Z+11, r3	; 0x0b
    62e0:	44 86       	std	Z+12, r4	; 0x0c
    62e2:	55 86       	std	Z+13, r5	; 0x0d
	mv.p->a[Z].steps = steps_z;
    62e4:	e4 8a       	std	Z+20, r14	; 0x14
    62e6:	f5 8a       	std	Z+21, r15	; 0x15
    62e8:	06 8b       	std	Z+22, r16	; 0x16
    62ea:	17 8b       	std	Z+23, r17	; 0x17
	ticks = microseconds * TICKS_PER_MICROSECOND;
    62ec:	a5 e0       	ldi	r26, 0x05	; 5
    62ee:	aa 0c       	add	r10, r10
    62f0:	bb 1c       	adc	r11, r11
    62f2:	cc 1c       	adc	r12, r12
    62f4:	dd 1c       	adc	r13, r13
    62f6:	aa 95       	dec	r26
    62f8:	d1 f7       	brne	.-12     	; 0x62ee <mv_queue_move_buffer+0x98>
    62fa:	a6 01       	movw	r20, r12
    62fc:	95 01       	movw	r18, r10
    62fe:	60 e0       	ldi	r22, 0x00	; 0
    6300:	70 e0       	ldi	r23, 0x00	; 0
    6302:	80 e0       	ldi	r24, 0x00	; 0
    6304:	90 e0       	ldi	r25, 0x00	; 0
    6306:	a9 82       	std	Y+1, r10	; 0x01
    6308:	3a 83       	std	Y+2, r19	; 0x02
    630a:	4b 83       	std	Y+3, r20	; 0x03
    630c:	5c 83       	std	Y+4, r21	; 0x04
    630e:	6d 83       	std	Y+5, r22	; 0x05
    6310:	7e 83       	std	Y+6, r23	; 0x06
    6312:	8f 83       	std	Y+7, r24	; 0x07
    6314:	98 87       	std	Y+8, r25	; 0x08

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    6316:	61 14       	cp	r6, r1
    6318:	71 04       	cpc	r7, r1
    631a:	81 04       	cpc	r8, r1
    631c:	91 04       	cpc	r9, r1
    631e:	09 f0       	breq	.+2      	; 0x6322 <mv_queue_move_buffer+0xcc>
    6320:	4b c0       	rjmp	.+150    	; 0x63b8 <mv_queue_move_buffer+0x162>
    6322:	21 14       	cp	r2, r1
    6324:	31 04       	cpc	r3, r1
    6326:	41 04       	cpc	r4, r1
    6328:	51 04       	cpc	r5, r1
    632a:	09 f0       	breq	.+2      	; 0x632e <mv_queue_move_buffer+0xd8>
    632c:	45 c0       	rjmp	.+138    	; 0x63b8 <mv_queue_move_buffer+0x162>
    632e:	e1 14       	cp	r14, r1
    6330:	f1 04       	cpc	r15, r1
    6332:	01 05       	cpc	r16, r1
    6334:	11 05       	cpc	r17, r1
    6336:	09 f0       	breq	.+2      	; 0x633a <mv_queue_move_buffer+0xe4>
    6338:	3f c0       	rjmp	.+126    	; 0x63b8 <mv_queue_move_buffer+0x162>
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    633a:	81 e0       	ldi	r24, 0x01	; 1
    633c:	90 e0       	ldi	r25, 0x00	; 0
    633e:	a0 e0       	ldi	r26, 0x00	; 0
    6340:	b0 e0       	ldi	r27, 0x00	; 0
    6342:	80 83       	st	Z, r24
    6344:	91 83       	std	Z+1, r25	; 0x01
    6346:	a2 83       	std	Z+2, r26	; 0x02
    6348:	b3 83       	std	Z+3, r27	; 0x03
		mv.p->a[X].postscale = 1;
    634a:	81 e0       	ldi	r24, 0x01	; 1
    634c:	90 e0       	ldi	r25, 0x00	; 0
    634e:	86 83       	std	Z+6, r24	; 0x06
    6350:	97 83       	std	Z+7, r25	; 0x07
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
    6352:	60 e0       	ldi	r22, 0x00	; 0
    6354:	70 e0       	ldi	r23, 0x00	; 0
    6356:	80 e0       	ldi	r24, 0x00	; 0
    6358:	90 e0       	ldi	r25, 0x00	; 0
    635a:	aa 24       	eor	r10, r10
    635c:	a3 94       	inc	r10
    635e:	bb 24       	eor	r11, r11
    6360:	cc 24       	eor	r12, r12
    6362:	dd 24       	eor	r13, r13
    6364:	ee 24       	eor	r14, r14
    6366:	ff 24       	eor	r15, r15
    6368:	00 e0       	ldi	r16, 0x00	; 0
    636a:	10 e0       	ldi	r17, 0x00	; 0
    636c:	0e 94 05 38 	call	0x700a	; 0x700a <__udivdi3>
    6370:	c9 01       	movw	r24, r18
    6372:	da 01       	movw	r26, r20
    6374:	9c 01       	movw	r18, r24
    6376:	ad 01       	movw	r20, r26
    6378:	10 c0       	rjmp	.+32     	; 0x639a <mv_queue_move_buffer+0x144>
		while (ticks_per_step & 0xFFFF0000) {
			ticks_per_step >>= 1;
    637a:	56 95       	lsr	r21
    637c:	47 95       	ror	r20
    637e:	37 95       	ror	r19
    6380:	27 95       	ror	r18
			mv.p->a[X].postscale <<= 1;
    6382:	aa 85       	ldd	r26, Y+10	; 0x0a
    6384:	bb 85       	ldd	r27, Y+11	; 0x0b
    6386:	16 96       	adiw	r26, 0x06	; 6
    6388:	8d 91       	ld	r24, X+
    638a:	9c 91       	ld	r25, X
    638c:	17 97       	sbiw	r26, 0x07	; 7
    638e:	88 0f       	add	r24, r24
    6390:	99 1f       	adc	r25, r25
    6392:	16 96       	adiw	r26, 0x06	; 6
    6394:	8d 93       	st	X+, r24
    6396:	9c 93       	st	X, r25
    6398:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
		while (ticks_per_step & 0xFFFF0000) {
    639a:	da 01       	movw	r26, r20
    639c:	c9 01       	movw	r24, r18
    639e:	80 70       	andi	r24, 0x00	; 0
    63a0:	90 70       	andi	r25, 0x00	; 0
    63a2:	00 97       	sbiw	r24, 0x00	; 0
    63a4:	a1 05       	cpc	r26, r1
    63a6:	b1 05       	cpc	r27, r1
    63a8:	41 f7       	brne	.-48     	; 0x637a <mv_queue_move_buffer+0x124>
			ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    63aa:	ea 85       	ldd	r30, Y+10	; 0x0a
    63ac:	fb 85       	ldd	r31, Y+11	; 0x0b
    63ae:	24 83       	std	Z+4, r18	; 0x04
    63b0:	35 83       	std	Z+5, r19	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    63b2:	81 e0       	ldi	r24, 0x01	; 1
    63b4:	81 87       	std	Z+9, r24	; 0x09
    63b6:	04 c1       	rjmp	.+520    	; 0x65c0 <mv_queue_move_buffer+0x36a>
	mv.p->a[Y].steps = steps_y;
	mv.p->a[Z].steps = steps_z;
	ticks = microseconds * TICKS_PER_MICROSECOND;

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    63b8:	44 24       	eor	r4, r4
    63ba:	55 24       	eor	r5, r5
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    63bc:	40 91 e2 23 	lds	r20, 0x23E2
    63c0:	50 91 e3 23 	lds	r21, 0x23E3
    63c4:	34 2c       	mov	r3, r4
    63c6:	25 2c       	mov	r2, r5
    63c8:	c2 01       	movw	r24, r4
    63ca:	fc 01       	movw	r30, r24
    63cc:	73 e0       	ldi	r23, 0x03	; 3
    63ce:	ee 0f       	add	r30, r30
    63d0:	ff 1f       	adc	r31, r31
    63d2:	7a 95       	dec	r23
    63d4:	e1 f7       	brne	.-8      	; 0x63ce <mv_queue_move_buffer+0x178>
    63d6:	88 0f       	add	r24, r24
    63d8:	99 1f       	adc	r25, r25
    63da:	e8 0f       	add	r30, r24
    63dc:	f9 1f       	adc	r31, r25
    63de:	e4 0f       	add	r30, r20
    63e0:	f5 1f       	adc	r31, r21
    63e2:	80 81       	ld	r24, Z
    63e4:	91 81       	ldd	r25, Z+1	; 0x01
    63e6:	a2 81       	ldd	r26, Z+2	; 0x02
    63e8:	b3 81       	ldd	r27, Z+3	; 0x03
    63ea:	00 97       	sbiw	r24, 0x00	; 0
    63ec:	a1 05       	cpc	r26, r1
    63ee:	b1 05       	cpc	r27, r1
    63f0:	09 f4       	brne	.+2      	; 0x63f4 <mv_queue_move_buffer+0x19e>
    63f2:	de c0       	rjmp	.+444    	; 0x65b0 <mv_queue_move_buffer+0x35a>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    63f4:	b7 ff       	sbrs	r27, 7
    63f6:	10 c0       	rjmp	.+32     	; 0x6418 <mv_queue_move_buffer+0x1c2>
    63f8:	c2 01       	movw	r24, r4
    63fa:	fc 01       	movw	r30, r24
    63fc:	33 e0       	ldi	r19, 0x03	; 3
    63fe:	ee 0f       	add	r30, r30
    6400:	ff 1f       	adc	r31, r31
    6402:	3a 95       	dec	r19
    6404:	e1 f7       	brne	.-8      	; 0x63fe <mv_queue_move_buffer+0x1a8>
    6406:	88 0f       	add	r24, r24
    6408:	99 1f       	adc	r25, r25
    640a:	e8 0f       	add	r30, r24
    640c:	f9 1f       	adc	r31, r25
    640e:	e4 0f       	add	r30, r20
    6410:	f5 1f       	adc	r31, r21
    6412:	21 e0       	ldi	r18, 0x01	; 1
    6414:	20 87       	std	Z+8, r18	; 0x08
    6416:	0e c0       	rjmp	.+28     	; 0x6434 <mv_queue_move_buffer+0x1de>
    6418:	c2 01       	movw	r24, r4
    641a:	fc 01       	movw	r30, r24
    641c:	03 e0       	ldi	r16, 0x03	; 3
    641e:	ee 0f       	add	r30, r30
    6420:	ff 1f       	adc	r31, r31
    6422:	0a 95       	dec	r16
    6424:	e1 f7       	brne	.-8      	; 0x641e <mv_queue_move_buffer+0x1c8>
    6426:	88 0f       	add	r24, r24
    6428:	99 1f       	adc	r25, r25
    642a:	e8 0f       	add	r30, r24
    642c:	f9 1f       	adc	r31, r25
    642e:	e4 0f       	add	r30, r20
    6430:	f5 1f       	adc	r31, r21
    6432:	10 86       	std	Z+8, r1	; 0x08
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    6434:	83 2d       	mov	r24, r3
    6436:	92 2d       	mov	r25, r2
    6438:	fc 01       	movw	r30, r24
    643a:	b3 e0       	ldi	r27, 0x03	; 3
    643c:	ee 0f       	add	r30, r30
    643e:	ff 1f       	adc	r31, r31
    6440:	ba 95       	dec	r27
    6442:	e1 f7       	brne	.-8      	; 0x643c <mv_queue_move_buffer+0x1e6>
    6444:	88 0f       	add	r24, r24
    6446:	99 1f       	adc	r25, r25
    6448:	e8 0f       	add	r30, r24
    644a:	f9 1f       	adc	r31, r25
    644c:	e4 0f       	add	r30, r20
    644e:	f5 1f       	adc	r31, r21
    6450:	83 2d       	mov	r24, r3
    6452:	92 2d       	mov	r25, r2
    6454:	9c 01       	movw	r18, r24
    6456:	73 e0       	ldi	r23, 0x03	; 3
    6458:	22 0f       	add	r18, r18
    645a:	33 1f       	adc	r19, r19
    645c:	7a 95       	dec	r23
    645e:	e1 f7       	brne	.-8      	; 0x6458 <mv_queue_move_buffer+0x202>
    6460:	88 0f       	add	r24, r24
    6462:	99 1f       	adc	r25, r25
    6464:	28 0f       	add	r18, r24
    6466:	39 1f       	adc	r19, r25
    6468:	42 0f       	add	r20, r18
    646a:	53 1f       	adc	r21, r19
    646c:	da 01       	movw	r26, r20
    646e:	2d 91       	ld	r18, X+
    6470:	3d 91       	ld	r19, X+
    6472:	4d 91       	ld	r20, X+
    6474:	5c 91       	ld	r21, X
    6476:	57 ff       	sbrs	r21, 7
    6478:	07 c0       	rjmp	.+14     	; 0x6488 <mv_queue_move_buffer+0x232>
    647a:	50 95       	com	r21
    647c:	40 95       	com	r20
    647e:	30 95       	com	r19
    6480:	21 95       	neg	r18
    6482:	3f 4f       	sbci	r19, 0xFF	; 255
    6484:	4f 4f       	sbci	r20, 0xFF	; 255
    6486:	5f 4f       	sbci	r21, 0xFF	; 255
    6488:	20 83       	st	Z, r18
    648a:	31 83       	std	Z+1, r19	; 0x01
    648c:	42 83       	std	Z+2, r20	; 0x02
    648e:	53 83       	std	Z+3, r21	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    6490:	e0 91 e2 23 	lds	r30, 0x23E2
    6494:	f0 91 e3 23 	lds	r31, 0x23E3
    6498:	ea 87       	std	Y+10, r30	; 0x0a
    649a:	fb 87       	std	Y+11, r31	; 0x0b
    649c:	83 2d       	mov	r24, r3
    649e:	92 2d       	mov	r25, r2
    64a0:	fc 01       	movw	r30, r24
    64a2:	03 e0       	ldi	r16, 0x03	; 3
    64a4:	ee 0f       	add	r30, r30
    64a6:	ff 1f       	adc	r31, r31
    64a8:	0a 95       	dec	r16
    64aa:	e1 f7       	brne	.-8      	; 0x64a4 <mv_queue_move_buffer+0x24e>
    64ac:	88 0f       	add	r24, r24
    64ae:	99 1f       	adc	r25, r25
    64b0:	e8 0f       	add	r30, r24
    64b2:	f9 1f       	adc	r31, r25
    64b4:	2a 85       	ldd	r18, Y+10	; 0x0a
    64b6:	3b 85       	ldd	r19, Y+11	; 0x0b
    64b8:	e2 0f       	add	r30, r18
    64ba:	f3 1f       	adc	r31, r19
    64bc:	41 e0       	ldi	r20, 0x01	; 1
    64be:	50 e0       	ldi	r21, 0x00	; 0
    64c0:	46 83       	std	Z+6, r20	; 0x06
    64c2:	57 83       	std	Z+7, r21	; 0x07
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
    64c4:	83 2d       	mov	r24, r3
    64c6:	92 2d       	mov	r25, r2
    64c8:	fc 01       	movw	r30, r24
    64ca:	b3 e0       	ldi	r27, 0x03	; 3
    64cc:	ee 0f       	add	r30, r30
    64ce:	ff 1f       	adc	r31, r31
    64d0:	ba 95       	dec	r27
    64d2:	e1 f7       	brne	.-8      	; 0x64cc <mv_queue_move_buffer+0x276>
    64d4:	88 0f       	add	r24, r24
    64d6:	99 1f       	adc	r25, r25
    64d8:	e8 0f       	add	r30, r24
    64da:	f9 1f       	adc	r31, r25
    64dc:	e2 0f       	add	r30, r18
    64de:	f3 1f       	adc	r31, r19
    64e0:	e0 80       	ld	r14, Z
    64e2:	f1 80       	ldd	r15, Z+1	; 0x01
    64e4:	02 81       	ldd	r16, Z+2	; 0x02
    64e6:	13 81       	ldd	r17, Z+3	; 0x03
    64e8:	37 01       	movw	r6, r14
    64ea:	48 01       	movw	r8, r16
    64ec:	99 0c       	add	r9, r9
    64ee:	66 08       	sbc	r6, r6
    64f0:	76 2c       	mov	r7, r6
    64f2:	43 01       	movw	r8, r6
    64f4:	29 81       	ldd	r18, Y+1	; 0x01
    64f6:	3a 81       	ldd	r19, Y+2	; 0x02
    64f8:	4b 81       	ldd	r20, Y+3	; 0x03
    64fa:	5c 81       	ldd	r21, Y+4	; 0x04
    64fc:	6d 81       	ldd	r22, Y+5	; 0x05
    64fe:	7e 81       	ldd	r23, Y+6	; 0x06
    6500:	8f 81       	ldd	r24, Y+7	; 0x07
    6502:	98 85       	ldd	r25, Y+8	; 0x08
    6504:	57 01       	movw	r10, r14
    6506:	68 01       	movw	r12, r16
    6508:	e6 2c       	mov	r14, r6
    650a:	f6 2c       	mov	r15, r6
    650c:	06 2d       	mov	r16, r6
    650e:	16 2d       	mov	r17, r6
    6510:	0e 94 05 38 	call	0x700a	; 0x700a <__udivdi3>
    6514:	c9 01       	movw	r24, r18
    6516:	da 01       	movw	r26, r20
    6518:	ac 01       	movw	r20, r24
    651a:	bd 01       	movw	r22, r26
    651c:	2c c0       	rjmp	.+88     	; 0x6576 <mv_queue_move_buffer+0x320>
				while (ticks_per_step & 0xFFFF0000) {
					ticks_per_step >>= 1;
    651e:	76 95       	lsr	r23
    6520:	67 95       	ror	r22
    6522:	57 95       	ror	r21
    6524:	47 95       	ror	r20
					mv.p->a[i].postscale <<= 1;
    6526:	83 2d       	mov	r24, r3
    6528:	92 2d       	mov	r25, r2
    652a:	dc 01       	movw	r26, r24
    652c:	33 e0       	ldi	r19, 0x03	; 3
    652e:	aa 0f       	add	r26, r26
    6530:	bb 1f       	adc	r27, r27
    6532:	3a 95       	dec	r19
    6534:	e1 f7       	brne	.-8      	; 0x652e <mv_queue_move_buffer+0x2d8>
    6536:	88 0f       	add	r24, r24
    6538:	99 1f       	adc	r25, r25
    653a:	a8 0f       	add	r26, r24
    653c:	b9 1f       	adc	r27, r25
    653e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6540:	9b 85       	ldd	r25, Y+11	; 0x0b
    6542:	a8 0f       	add	r26, r24
    6544:	b9 1f       	adc	r27, r25
    6546:	83 2d       	mov	r24, r3
    6548:	92 2d       	mov	r25, r2
    654a:	fc 01       	movw	r30, r24
    654c:	03 e0       	ldi	r16, 0x03	; 3
    654e:	ee 0f       	add	r30, r30
    6550:	ff 1f       	adc	r31, r31
    6552:	0a 95       	dec	r16
    6554:	e1 f7       	brne	.-8      	; 0x654e <mv_queue_move_buffer+0x2f8>
    6556:	88 0f       	add	r24, r24
    6558:	99 1f       	adc	r25, r25
    655a:	e8 0f       	add	r30, r24
    655c:	f9 1f       	adc	r31, r25
    655e:	2a 85       	ldd	r18, Y+10	; 0x0a
    6560:	3b 85       	ldd	r19, Y+11	; 0x0b
    6562:	e2 0f       	add	r30, r18
    6564:	f3 1f       	adc	r31, r19
    6566:	86 81       	ldd	r24, Z+6	; 0x06
    6568:	97 81       	ldd	r25, Z+7	; 0x07
    656a:	88 0f       	add	r24, r24
    656c:	99 1f       	adc	r25, r25
    656e:	16 96       	adiw	r26, 0x06	; 6
    6570:	8d 93       	st	X+, r24
    6572:	9c 93       	st	X, r25
    6574:	17 97       	sbiw	r26, 0x07	; 7

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
				while (ticks_per_step & 0xFFFF0000) {
    6576:	db 01       	movw	r26, r22
    6578:	ca 01       	movw	r24, r20
    657a:	80 70       	andi	r24, 0x00	; 0
    657c:	90 70       	andi	r25, 0x00	; 0
    657e:	00 97       	sbiw	r24, 0x00	; 0
    6580:	a1 05       	cpc	r26, r1
    6582:	b1 05       	cpc	r27, r1
    6584:	61 f6       	brne	.-104    	; 0x651e <mv_queue_move_buffer+0x2c8>
					ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    6586:	83 2d       	mov	r24, r3
    6588:	92 2d       	mov	r25, r2
    658a:	9c 01       	movw	r18, r24
    658c:	73 e0       	ldi	r23, 0x03	; 3
    658e:	22 0f       	add	r18, r18
    6590:	33 1f       	adc	r19, r19
    6592:	7a 95       	dec	r23
    6594:	e1 f7       	brne	.-8      	; 0x658e <mv_queue_move_buffer+0x338>
    6596:	88 0f       	add	r24, r24
    6598:	99 1f       	adc	r25, r25
    659a:	28 0f       	add	r18, r24
    659c:	39 1f       	adc	r19, r25
    659e:	8a 85       	ldd	r24, Y+10	; 0x0a
    65a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    65a2:	82 0f       	add	r24, r18
    65a4:	93 1f       	adc	r25, r19
    65a6:	dc 01       	movw	r26, r24
    65a8:	14 96       	adiw	r26, 0x04	; 4
    65aa:	4d 93       	st	X+, r20
    65ac:	5c 93       	st	X, r21
    65ae:	15 97       	sbiw	r26, 0x05	; 5
    65b0:	08 94       	sec
    65b2:	41 1c       	adc	r4, r1
    65b4:	51 1c       	adc	r5, r1
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    65b6:	b3 e0       	ldi	r27, 0x03	; 3
    65b8:	4b 16       	cp	r4, r27
    65ba:	51 04       	cpc	r5, r1
    65bc:	09 f0       	breq	.+2      	; 0x65c0 <mv_queue_move_buffer+0x36a>
    65be:	fe ce       	rjmp	.-516    	; 0x63bc <mv_queue_move_buffer+0x166>
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    65c0:	e9 85       	ldd	r30, Y+9	; 0x09
    65c2:	e0 93 e0 23 	sts	0x23E0, r30
	st_execute_move();
    65c6:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <st_execute_move>
    65ca:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    65cc:	2b 96       	adiw	r28, 0x0b	; 11
    65ce:	cd bf       	out	0x3d, r28	; 61
    65d0:	de bf       	out	0x3e, r29	; 62
    65d2:	cf 91       	pop	r28
    65d4:	df 91       	pop	r29
    65d6:	1f 91       	pop	r17
    65d8:	0f 91       	pop	r16
    65da:	ff 90       	pop	r15
    65dc:	ef 90       	pop	r14
    65de:	df 90       	pop	r13
    65e0:	cf 90       	pop	r12
    65e2:	bf 90       	pop	r11
    65e4:	af 90       	pop	r10
    65e6:	9f 90       	pop	r9
    65e8:	8f 90       	pop	r8
    65ea:	7f 90       	pop	r7
    65ec:	6f 90       	pop	r6
    65ee:	5f 90       	pop	r5
    65f0:	4f 90       	pop	r4
    65f2:	3f 90       	pop	r3
    65f4:	2f 90       	pop	r2
    65f6:	08 95       	ret

000065f8 <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    65f8:	a4 e8       	ldi	r26, 0x84	; 132
    65fa:	b4 e2       	ldi	r27, 0x24	; 36
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    65fc:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    65fe:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    6600:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    6602:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    6604:	ed 91       	ld	r30, X+
    6606:	fc 91       	ld	r31, X
    6608:	11 97       	sbiw	r26, 0x01	; 1
    660a:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    660c:	ed 91       	ld	r30, X+
    660e:	fc 91       	ld	r31, X
    6610:	11 97       	sbiw	r26, 0x01	; 1
    6612:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    6614:	ed 91       	ld	r30, X+
    6616:	fc 91       	ld	r31, X
    6618:	11 97       	sbiw	r26, 0x01	; 1
    661a:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    661c:	ed 91       	ld	r30, X+
    661e:	fc 91       	ld	r31, X
    6620:	11 97       	sbiw	r26, 0x01	; 1
    6622:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    6624:	ed 91       	ld	r30, X+
    6626:	fc 91       	ld	r31, X
    6628:	11 97       	sbiw	r26, 0x01	; 1
    662a:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    662c:	ed 91       	ld	r30, X+
    662e:	fc 91       	ld	r31, X
    6630:	11 97       	sbiw	r26, 0x01	; 1
    6632:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    6634:	ed 91       	ld	r30, X+
    6636:	fc 91       	ld	r31, X
    6638:	11 97       	sbiw	r26, 0x01	; 1
    663a:	31 87       	std	Z+9, r19	; 0x09
    663c:	50 96       	adiw	r26, 0x10	; 16
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    663e:	44 e2       	ldi	r20, 0x24	; 36
    6640:	a4 3c       	cpi	r26, 0xC4	; 196
    6642:	b4 07       	cpc	r27, r20
    6644:	f9 f6       	brne	.-66     	; 0x6604 <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    6646:	08 95       	ret

00006648 <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    6648:	1f 92       	push	r1
    664a:	0f 92       	push	r0
    664c:	0f b6       	in	r0, 0x3f	; 63
    664e:	0f 92       	push	r0
    6650:	11 24       	eor	r1, r1
    6652:	0f 90       	pop	r0
    6654:	0f be       	out	0x3f, r0	; 63
    6656:	0f 90       	pop	r0
    6658:	1f 90       	pop	r1
    665a:	18 95       	reti

0000665c <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    665c:	1f 92       	push	r1
    665e:	0f 92       	push	r0
    6660:	0f b6       	in	r0, 0x3f	; 63
    6662:	0f 92       	push	r0
    6664:	11 24       	eor	r1, r1
    6666:	0f 90       	pop	r0
    6668:	0f be       	out	0x3f, r0	; 63
    666a:	0f 90       	pop	r0
    666c:	1f 90       	pop	r1
    666e:	18 95       	reti

00006670 <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    6670:	1f 92       	push	r1
    6672:	0f 92       	push	r0
    6674:	0f b6       	in	r0, 0x3f	; 63
    6676:	0f 92       	push	r0
    6678:	11 24       	eor	r1, r1
    667a:	0f 90       	pop	r0
    667c:	0f be       	out	0x3f, r0	; 63
    667e:	0f 90       	pop	r0
    6680:	1f 90       	pop	r1
    6682:	18 95       	reti

00006684 <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    6684:	1f 92       	push	r1
    6686:	0f 92       	push	r0
    6688:	0f b6       	in	r0, 0x3f	; 63
    668a:	0f 92       	push	r0
    668c:	11 24       	eor	r1, r1
    668e:	0f 90       	pop	r0
    6690:	0f be       	out	0x3f, r0	; 63
    6692:	0f 90       	pop	r0
    6694:	1f 90       	pop	r1
    6696:	18 95       	reti

00006698 <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    6698:	1f 92       	push	r1
    669a:	0f 92       	push	r0
    669c:	0f b6       	in	r0, 0x3f	; 63
    669e:	0f 92       	push	r0
    66a0:	11 24       	eor	r1, r1
    66a2:	0f 90       	pop	r0
    66a4:	0f be       	out	0x3f, r0	; 63
    66a6:	0f 90       	pop	r0
    66a8:	1f 90       	pop	r1
    66aa:	18 95       	reti

000066ac <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    66ac:	1f 92       	push	r1
    66ae:	0f 92       	push	r0
    66b0:	0f b6       	in	r0, 0x3f	; 63
    66b2:	0f 92       	push	r0
    66b4:	11 24       	eor	r1, r1
    66b6:	0f 90       	pop	r0
    66b8:	0f be       	out	0x3f, r0	; 63
    66ba:	0f 90       	pop	r0
    66bc:	1f 90       	pop	r1
    66be:	18 95       	reti

000066c0 <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    66c0:	1f 92       	push	r1
    66c2:	0f 92       	push	r0
    66c4:	0f b6       	in	r0, 0x3f	; 63
    66c6:	0f 92       	push	r0
    66c8:	11 24       	eor	r1, r1
    66ca:	0f 90       	pop	r0
    66cc:	0f be       	out	0x3f, r0	; 63
    66ce:	0f 90       	pop	r0
    66d0:	1f 90       	pop	r1
    66d2:	18 95       	reti

000066d4 <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    66d4:	1f 92       	push	r1
    66d6:	0f 92       	push	r0
    66d8:	0f b6       	in	r0, 0x3f	; 63
    66da:	0f 92       	push	r0
    66dc:	11 24       	eor	r1, r1
    66de:	0f 90       	pop	r0
    66e0:	0f be       	out	0x3f, r0	; 63
    66e2:	0f 90       	pop	r0
    66e4:	1f 90       	pop	r1
    66e6:	18 95       	reti

000066e8 <xio_rs485_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_rs485_init(const uint16_t control)
{
    66e8:	9c 01       	movw	r18, r24
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    66ea:	e8 2f       	mov	r30, r24
    66ec:	ef 70       	andi	r30, 0x0F	; 15

	// transfer control flags to internal flag bits
	fr.flags = XIO_FLAG_RS485_DEFS_gm;		// set flags to defaults & initial state
    66ee:	87 e3       	ldi	r24, 0x37	; 55
    66f0:	90 e0       	ldi	r25, 0x00	; 0
    66f2:	80 93 3e 24 	sts	0x243E, r24
    66f6:	90 93 3f 24 	sts	0x243F, r25
		fr.flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		fr.flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    66fa:	26 ff       	sbrs	r18, 6
    66fc:	06 c0       	rjmp	.+12     	; 0x670a <xio_rs485_init+0x22>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    66fe:	87 e3       	ldi	r24, 0x37	; 55
    6700:	90 e0       	ldi	r25, 0x00	; 0
    6702:	80 93 3e 24 	sts	0x243E, r24
    6706:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_NOBLOCK) {
    670a:	27 ff       	sbrs	r18, 7
    670c:	06 c0       	rjmp	.+12     	; 0x671a <xio_rs485_init+0x32>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    670e:	83 e3       	ldi	r24, 0x33	; 51
    6710:	90 e0       	ldi	r25, 0x00	; 0
    6712:	80 93 3e 24 	sts	0x243E, r24
    6716:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_ECHO) {
    671a:	30 ff       	sbrs	r19, 0
    671c:	09 c0       	rjmp	.+18     	; 0x6730 <xio_rs485_init+0x48>
		fr.flags |= XIO_FLAG_ECHO_bm;
    671e:	80 91 3e 24 	lds	r24, 0x243E
    6722:	90 91 3f 24 	lds	r25, 0x243F
    6726:	80 61       	ori	r24, 0x10	; 16
    6728:	80 93 3e 24 	sts	0x243E, r24
    672c:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_NOECHO) {
    6730:	31 ff       	sbrs	r19, 1
    6732:	09 c0       	rjmp	.+18     	; 0x6746 <xio_rs485_init+0x5e>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    6734:	80 91 3e 24 	lds	r24, 0x243E
    6738:	90 91 3f 24 	lds	r25, 0x243F
    673c:	8f 7e       	andi	r24, 0xEF	; 239
    673e:	80 93 3e 24 	sts	0x243E, r24
    6742:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_CRLF) {
    6746:	32 ff       	sbrs	r19, 2
    6748:	09 c0       	rjmp	.+18     	; 0x675c <xio_rs485_init+0x74>
		fr.flags |= XIO_FLAG_CRLF_bm;
    674a:	80 91 3e 24 	lds	r24, 0x243E
    674e:	90 91 3f 24 	lds	r25, 0x243F
    6752:	80 62       	ori	r24, 0x20	; 32
    6754:	80 93 3e 24 	sts	0x243E, r24
    6758:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_NOCRLF) {
    675c:	33 ff       	sbrs	r19, 3
    675e:	09 c0       	rjmp	.+18     	; 0x6772 <xio_rs485_init+0x8a>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    6760:	80 91 3e 24 	lds	r24, 0x243E
    6764:	90 91 3f 24 	lds	r25, 0x243F
    6768:	8f 7d       	andi	r24, 0xDF	; 223
    676a:	80 93 3e 24 	sts	0x243E, r24
    676e:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_LINEMODE) {
    6772:	34 ff       	sbrs	r19, 4
    6774:	09 c0       	rjmp	.+18     	; 0x6788 <xio_rs485_init+0xa0>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    6776:	80 91 3e 24 	lds	r24, 0x243E
    677a:	90 91 3f 24 	lds	r25, 0x243F
    677e:	80 64       	ori	r24, 0x40	; 64
    6780:	80 93 3e 24 	sts	0x243E, r24
    6784:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_NOLINEMODE) {
    6788:	35 ff       	sbrs	r19, 5
    678a:	09 c0       	rjmp	.+18     	; 0x679e <xio_rs485_init+0xb6>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    678c:	80 91 3e 24 	lds	r24, 0x243E
    6790:	90 91 3f 24 	lds	r25, 0x243F
    6794:	8f 7b       	andi	r24, 0xBF	; 191
    6796:	80 93 3e 24 	sts	0x243E, r24
    679a:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_SEMICOLONS) {
    679e:	36 ff       	sbrs	r19, 6
    67a0:	09 c0       	rjmp	.+18     	; 0x67b4 <xio_rs485_init+0xcc>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    67a2:	80 91 3e 24 	lds	r24, 0x243E
    67a6:	90 91 3f 24 	lds	r25, 0x243F
    67aa:	80 68       	ori	r24, 0x80	; 128
    67ac:	80 93 3e 24 	sts	0x243E, r24
    67b0:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    67b4:	37 ff       	sbrs	r19, 7
    67b6:	09 c0       	rjmp	.+18     	; 0x67ca <xio_rs485_init+0xe2>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    67b8:	80 91 3e 24 	lds	r24, 0x243E
    67bc:	90 91 3f 24 	lds	r25, 0x243F
    67c0:	8f 77       	andi	r24, 0x7F	; 127
    67c2:	80 93 3e 24 	sts	0x243E, r24
    67c6:	90 93 3f 24 	sts	0x243F, r25
	}

	// character signals and error returns
	fr.sig = 0;
    67ca:	10 92 41 24 	sts	0x2441, r1
	dev_rs485.udata = &(fr.sig);				// bind sig register to FILE struct
    67ce:	81 e4       	ldi	r24, 0x41	; 65
    67d0:	94 e2       	ldi	r25, 0x24	; 36
    67d2:	80 93 28 20 	sts	0x2028, r24
    67d6:	90 93 29 20 	sts	0x2029, r25

	// setup internal RX/TX buffers
	fr.rx_buf_head = 1;						// can't use location 0
    67da:	81 e0       	ldi	r24, 0x01	; 1
    67dc:	80 93 48 24 	sts	0x2448, r24
	fr.rx_buf_tail = 1;
    67e0:	80 93 47 24 	sts	0x2447, r24
	fr.tx_buf_head = 1;
    67e4:	80 93 4a 24 	sts	0x244A, r24
	fr.tx_buf_tail = 1;
    67e8:	80 93 49 24 	sts	0x2449, r24
	fr.len = sizeof(fr.buf);					// offset to zero
    67ec:	82 e0       	ldi	r24, 0x02	; 2
    67ee:	80 93 44 24 	sts	0x2444, r24

	fr.usart = &RS485_USART;				// bind USART structure
    67f2:	80 eb       	ldi	r24, 0xB0	; 176
    67f4:	98 e0       	ldi	r25, 0x08	; 8
    67f6:	80 93 4c 24 	sts	0x244C, r24
    67fa:	90 93 4d 24 	sts	0x244D, r25
	fr.port = &RS485_PORT;					// bind PORT structure
    67fe:	80 e4       	ldi	r24, 0x40	; 64
    6800:	96 e0       	ldi	r25, 0x06	; 6
    6802:	80 93 4e 24 	sts	0x244E, r24
    6806:	90 93 4f 24 	sts	0x244F, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    680a:	ee 23       	and	r30, r30
    680c:	09 f4       	brne	.+2      	; 0x6810 <xio_rs485_init+0x128>
    680e:	e5 e0       	ldi	r30, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    6810:	8e 2f       	mov	r24, r30
    6812:	90 e0       	ldi	r25, 0x00	; 0
    6814:	fc 01       	movw	r30, r24
    6816:	e1 50       	subi	r30, 0x01	; 1
    6818:	f2 4e       	sbci	r31, 0xE2	; 226
    681a:	e4 91       	lpm	r30, Z+
    681c:	a0 eb       	ldi	r26, 0xB0	; 176
    681e:	b8 e0       	ldi	r27, 0x08	; 8
    6820:	16 96       	adiw	r26, 0x06	; 6
    6822:	ec 93       	st	X, r30
    6824:	16 97       	sbiw	r26, 0x06	; 6
	fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    6826:	86 5f       	subi	r24, 0xF6	; 246
    6828:	91 4e       	sbci	r25, 0xE1	; 225
    682a:	fc 01       	movw	r30, r24
    682c:	84 91       	lpm	r24, Z+
    682e:	17 96       	adiw	r26, 0x07	; 7
    6830:	8c 93       	st	X, r24
    6832:	17 97       	sbiw	r26, 0x07	; 7
	fr.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx on USART
    6834:	88 e1       	ldi	r24, 0x18	; 24
    6836:	14 96       	adiw	r26, 0x04	; 4
    6838:	8c 93       	st	X, r24
    683a:	14 97       	sbiw	r26, 0x04	; 4
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    683c:	81 e2       	ldi	r24, 0x21	; 33
    683e:	13 96       	adiw	r26, 0x03	; 3
    6840:	8c 93       	st	X, r24

	fr.port->DIRCLR = RS485_RX_bm;	// clr RX pin as input
    6842:	e0 e4       	ldi	r30, 0x40	; 64
    6844:	f6 e0       	ldi	r31, 0x06	; 6
    6846:	80 e4       	ldi	r24, 0x40	; 64
    6848:	82 83       	std	Z+2, r24	; 0x02
	fr.port->DIRSET = RS485_TX_bm; 	// set TX pin as output
    684a:	80 e8       	ldi	r24, 0x80	; 128
    684c:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTSET = RS485_TX_bm;	// set TX HI as initial state
    684e:	85 83       	std	Z+5, r24	; 0x05
	fr.port->DIRSET = RS485_DE_bm; 	// Data Enable (TX) to output (TX enabled hi)
    6850:	90 e2       	ldi	r25, 0x20	; 32
    6852:	91 83       	std	Z+1, r25	; 0x01
	fr.port->DIRSET = RS485_RE_bm; 	// Recv Enable (RX) to output (RX enabled lo)
    6854:	80 e1       	ldi	r24, 0x10	; 16
    6856:	81 83       	std	Z+1, r24	; 0x01
	fr.port->OUTCLR = RS485_DE_bm;	// DE lo initially (TX disabled)
    6858:	96 83       	std	Z+6, r25	; 0x06
	fr.port->OUTCLR = RS485_RE_bm; 	// RE lo initially (RX enabled)
    685a:	86 83       	std	Z+6, r24	; 0x06
}
    685c:	08 95       	ret

0000685e <xio_rs485_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_rs485_control(const uint16_t control, const int16_t arg)
{
    685e:	ac 01       	movw	r20, r24
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    6860:	8f 70       	andi	r24, 0x0F	; 15
    6862:	90 70       	andi	r25, 0x00	; 0
    6864:	00 97       	sbiw	r24, 0x00	; 0
    6866:	91 f0       	breq	.+36     	; 0x688c <xio_rs485_control+0x2e>
		fr.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    6868:	a0 91 4c 24 	lds	r26, 0x244C
    686c:	b0 91 4d 24 	lds	r27, 0x244D
    6870:	9c 01       	movw	r18, r24
    6872:	21 50       	subi	r18, 0x01	; 1
    6874:	32 4e       	sbci	r19, 0xE2	; 226
    6876:	f9 01       	movw	r30, r18
    6878:	24 91       	lpm	r18, Z+
    687a:	16 96       	adiw	r26, 0x06	; 6
    687c:	2c 93       	st	X, r18
    687e:	16 97       	sbiw	r26, 0x06	; 6
		fr.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    6880:	86 5f       	subi	r24, 0xF6	; 246
    6882:	91 4e       	sbci	r25, 0xE1	; 225
    6884:	fc 01       	movw	r30, r24
    6886:	84 91       	lpm	r24, Z+
    6888:	17 96       	adiw	r26, 0x07	; 7
    688a:	8c 93       	st	X, r24
	}
	if (control & XIO_BLOCK) {
    688c:	46 ff       	sbrs	r20, 6
    688e:	09 c0       	rjmp	.+18     	; 0x68a2 <xio_rs485_control+0x44>
		fr.flags |= XIO_FLAG_BLOCK_bm;
    6890:	80 91 3e 24 	lds	r24, 0x243E
    6894:	90 91 3f 24 	lds	r25, 0x243F
    6898:	84 60       	ori	r24, 0x04	; 4
    689a:	80 93 3e 24 	sts	0x243E, r24
    689e:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_NOBLOCK) {
    68a2:	47 ff       	sbrs	r20, 7
    68a4:	09 c0       	rjmp	.+18     	; 0x68b8 <xio_rs485_control+0x5a>
		fr.flags &= ~XIO_FLAG_BLOCK_bm;
    68a6:	80 91 3e 24 	lds	r24, 0x243E
    68aa:	90 91 3f 24 	lds	r25, 0x243F
    68ae:	8b 7f       	andi	r24, 0xFB	; 251
    68b0:	80 93 3e 24 	sts	0x243E, r24
    68b4:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_ECHO) {
    68b8:	50 ff       	sbrs	r21, 0
    68ba:	09 c0       	rjmp	.+18     	; 0x68ce <xio_rs485_control+0x70>
		fr.flags |= XIO_FLAG_ECHO_bm;
    68bc:	80 91 3e 24 	lds	r24, 0x243E
    68c0:	90 91 3f 24 	lds	r25, 0x243F
    68c4:	80 61       	ori	r24, 0x10	; 16
    68c6:	80 93 3e 24 	sts	0x243E, r24
    68ca:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_NOECHO) {
    68ce:	51 ff       	sbrs	r21, 1
    68d0:	09 c0       	rjmp	.+18     	; 0x68e4 <xio_rs485_control+0x86>
		fr.flags &= ~XIO_FLAG_ECHO_bm;
    68d2:	80 91 3e 24 	lds	r24, 0x243E
    68d6:	90 91 3f 24 	lds	r25, 0x243F
    68da:	8f 7e       	andi	r24, 0xEF	; 239
    68dc:	80 93 3e 24 	sts	0x243E, r24
    68e0:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_CRLF) {
    68e4:	52 ff       	sbrs	r21, 2
    68e6:	09 c0       	rjmp	.+18     	; 0x68fa <xio_rs485_control+0x9c>
		fr.flags |= XIO_FLAG_CRLF_bm;
    68e8:	80 91 3e 24 	lds	r24, 0x243E
    68ec:	90 91 3f 24 	lds	r25, 0x243F
    68f0:	80 62       	ori	r24, 0x20	; 32
    68f2:	80 93 3e 24 	sts	0x243E, r24
    68f6:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_NOCRLF) {
    68fa:	53 ff       	sbrs	r21, 3
    68fc:	09 c0       	rjmp	.+18     	; 0x6910 <xio_rs485_control+0xb2>
		fr.flags &= ~XIO_FLAG_CRLF_bm;
    68fe:	80 91 3e 24 	lds	r24, 0x243E
    6902:	90 91 3f 24 	lds	r25, 0x243F
    6906:	8f 7d       	andi	r24, 0xDF	; 223
    6908:	80 93 3e 24 	sts	0x243E, r24
    690c:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_LINEMODE) {
    6910:	54 ff       	sbrs	r21, 4
    6912:	09 c0       	rjmp	.+18     	; 0x6926 <xio_rs485_control+0xc8>
		fr.flags |= XIO_FLAG_LINEMODE_bm;
    6914:	80 91 3e 24 	lds	r24, 0x243E
    6918:	90 91 3f 24 	lds	r25, 0x243F
    691c:	80 64       	ori	r24, 0x40	; 64
    691e:	80 93 3e 24 	sts	0x243E, r24
    6922:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_NOLINEMODE) {
    6926:	55 ff       	sbrs	r21, 5
    6928:	09 c0       	rjmp	.+18     	; 0x693c <xio_rs485_control+0xde>
		fr.flags &= ~XIO_FLAG_LINEMODE_bm;
    692a:	80 91 3e 24 	lds	r24, 0x243E
    692e:	90 91 3f 24 	lds	r25, 0x243F
    6932:	8f 7b       	andi	r24, 0xBF	; 191
    6934:	80 93 3e 24 	sts	0x243E, r24
    6938:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_SEMICOLONS) {
    693c:	56 ff       	sbrs	r21, 6
    693e:	09 c0       	rjmp	.+18     	; 0x6952 <xio_rs485_control+0xf4>
		fr.flags |= XIO_FLAG_SEMICOLONS_bm;
    6940:	80 91 3e 24 	lds	r24, 0x243E
    6944:	90 91 3f 24 	lds	r25, 0x243F
    6948:	80 68       	ori	r24, 0x80	; 128
    694a:	80 93 3e 24 	sts	0x243E, r24
    694e:	90 93 3f 24 	sts	0x243F, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    6952:	57 ff       	sbrs	r21, 7
    6954:	09 c0       	rjmp	.+18     	; 0x6968 <xio_rs485_control+0x10a>
		fr.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    6956:	80 91 3e 24 	lds	r24, 0x243E
    695a:	90 91 3f 24 	lds	r25, 0x243F
    695e:	8f 77       	andi	r24, 0x7F	; 127
    6960:	80 93 3e 24 	sts	0x243E, r24
    6964:	90 93 3f 24 	sts	0x243F, r25
	}
	return (0);
}
    6968:	80 e0       	ldi	r24, 0x00	; 0
    696a:	08 95       	ret

0000696c <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC0 data register empty
{
    696c:	1f 92       	push	r1
    696e:	0f 92       	push	r0
    6970:	0f b6       	in	r0, 0x3f	; 63
    6972:	0f 92       	push	r0
    6974:	0b b6       	in	r0, 0x3b	; 59
    6976:	0f 92       	push	r0
    6978:	11 24       	eor	r1, r1
    697a:	8f 93       	push	r24
    697c:	9f 93       	push	r25
    697e:	af 93       	push	r26
    6980:	bf 93       	push	r27
    6982:	ef 93       	push	r30
    6984:	ff 93       	push	r31
	if (fr.tx_buf_head == fr.tx_buf_tail) {			// buffer empty - disable ints
    6986:	90 91 4a 24 	lds	r25, 0x244A
    698a:	80 91 49 24 	lds	r24, 0x2449
    698e:	98 17       	cp	r25, r24
    6990:	39 f4       	brne	.+14     	; 0x69a0 <__vector_29+0x34>
		fr.usart->CTRLA = USART_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    6992:	e0 91 4c 24 	lds	r30, 0x244C
    6996:	f0 91 4d 24 	lds	r31, 0x244D
    699a:	80 e2       	ldi	r24, 0x20	; 32
    699c:	83 83       	std	Z+3, r24	; 0x03
    699e:	1e c0       	rjmp	.+60     	; 0x69dc <__vector_29+0x70>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(fr.flags)) {
    69a0:	80 91 3e 24 	lds	r24, 0x243E
    69a4:	90 91 3f 24 	lds	r25, 0x243F
    69a8:	93 fd       	sbrc	r25, 3
    69aa:	18 c0       	rjmp	.+48     	; 0x69dc <__vector_29+0x70>
		if (--(fr.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    69ac:	80 91 49 24 	lds	r24, 0x2449
    69b0:	81 50       	subi	r24, 0x01	; 1
    69b2:	80 93 49 24 	sts	0x2449, r24
    69b6:	80 91 49 24 	lds	r24, 0x2449
    69ba:	88 23       	and	r24, r24
    69bc:	19 f4       	brne	.+6      	; 0x69c4 <__vector_29+0x58>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    69be:	81 e1       	ldi	r24, 0x11	; 17
    69c0:	80 93 49 24 	sts	0x2449, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];	// write char to TX DATA register
    69c4:	e0 91 4c 24 	lds	r30, 0x244C
    69c8:	f0 91 4d 24 	lds	r31, 0x244D
    69cc:	a0 91 49 24 	lds	r26, 0x2449
    69d0:	b0 e0       	ldi	r27, 0x00	; 0
    69d2:	a2 5c       	subi	r26, 0xC2	; 194
    69d4:	bb 4d       	sbci	r27, 0xDB	; 219
    69d6:	94 96       	adiw	r26, 0x24	; 36
    69d8:	8c 91       	ld	r24, X
    69da:	80 83       	st	Z, r24
	}
}
    69dc:	ff 91       	pop	r31
    69de:	ef 91       	pop	r30
    69e0:	bf 91       	pop	r27
    69e2:	af 91       	pop	r26
    69e4:	9f 91       	pop	r25
    69e6:	8f 91       	pop	r24
    69e8:	0f 90       	pop	r0
    69ea:	0b be       	out	0x3b, r0	; 59
    69ec:	0f 90       	pop	r0
    69ee:	0f be       	out	0x3f, r0	; 63
    69f0:	0f 90       	pop	r0
    69f2:	1f 90       	pop	r1
    69f4:	18 95       	reti

000069f6 <xio_rs485_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_rs485_putc(const char c, FILE *stream)
{
    69f6:	48 2f       	mov	r20, r24
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(fr.flags)) {
    69f8:	20 91 3e 24 	lds	r18, 0x243E
    69fc:	30 91 3f 24 	lds	r19, 0x243F
    6a00:	d9 01       	movw	r26, r18
    6a02:	a4 70       	andi	r26, 0x04	; 4
    6a04:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	fr.tx_buf_head = fr.next_tx_buf_head;			// accept the next buffer head value
	fr.tx_buf[fr.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(fr.flags) && (c == '\n')) {			// detect LF and add a CR
    6a06:	b9 01       	movw	r22, r18
    6a08:	60 72       	andi	r22, 0x20	; 32
    6a0a:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_rs485_putc(const char c, FILE *stream)
{
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
    6a0c:	90 91 4a 24 	lds	r25, 0x244A
    6a10:	91 50       	subi	r25, 0x01	; 1
    6a12:	c1 f4       	brne	.+48     	; 0x6a44 <xio_rs485_putc+0x4e>
    6a14:	91 e1       	ldi	r25, 0x11	; 17
    6a16:	16 c0       	rjmp	.+44     	; 0x6a44 <xio_rs485_putc+0x4e>
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(fr.flags)) {
    6a18:	10 97       	sbiw	r26, 0x00	; 0
    6a1a:	61 f0       	breq	.+24     	; 0x6a34 <xio_rs485_putc+0x3e>
			sleep_mode();
    6a1c:	80 91 48 00 	lds	r24, 0x0048
    6a20:	81 60       	ori	r24, 0x01	; 1
    6a22:	80 93 48 00 	sts	0x0048, r24
    6a26:	88 95       	sleep
    6a28:	80 91 48 00 	lds	r24, 0x0048
    6a2c:	8e 7f       	andi	r24, 0xFE	; 254
    6a2e:	80 93 48 00 	sts	0x0048, r24
    6a32:	08 c0       	rjmp	.+16     	; 0x6a44 <xio_rs485_putc+0x4e>
    6a34:	90 93 4b 24 	sts	0x244B, r25
		} else {
			fr.sig = XIO_SIG_EAGAIN;
    6a38:	81 e0       	ldi	r24, 0x01	; 1
    6a3a:	80 93 41 24 	sts	0x2441, r24
    6a3e:	2f ef       	ldi	r18, 0xFF	; 255
    6a40:	3f ef       	ldi	r19, 0xFF	; 255
    6a42:	54 c0       	rjmp	.+168    	; 0x6aec <xio_rs485_putc+0xf6>
int xio_rs485_putc(const char c, FILE *stream)
{
	if ((fr.next_tx_buf_head = fr.tx_buf_head-1) == 0) { // advance head and handle wrap
		fr.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(fr.next_tx_buf_head == fr.tx_buf_tail) {   // TX buffer full. sleep or return.
    6a44:	80 91 49 24 	lds	r24, 0x2449
    6a48:	98 17       	cp	r25, r24
    6a4a:	31 f3       	breq	.-52     	; 0x6a18 <xio_rs485_putc+0x22>
			fr.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	fr.tx_buf_head = fr.next_tx_buf_head;			// accept the next buffer head value
    6a4c:	90 93 4a 24 	sts	0x244A, r25
	fr.tx_buf[fr.tx_buf_head] = c;				// ...and write char to buffer
    6a50:	e0 91 4a 24 	lds	r30, 0x244A
    6a54:	f0 e0       	ldi	r31, 0x00	; 0
    6a56:	e2 5c       	subi	r30, 0xC2	; 194
    6a58:	fb 4d       	sbci	r31, 0xDB	; 219
    6a5a:	44 a3       	std	Z+36, r20	; 0x24

	if (CRLF(fr.flags) && (c == '\n')) {			// detect LF and add a CR
    6a5c:	61 15       	cp	r22, r1
    6a5e:	71 05       	cpc	r23, r1
    6a60:	21 f0       	breq	.+8      	; 0x6a6a <xio_rs485_putc+0x74>
    6a62:	4a 30       	cpi	r20, 0x0A	; 10
    6a64:	11 f4       	brne	.+4      	; 0x6a6a <xio_rs485_putc+0x74>
    6a66:	4d e0       	ldi	r20, 0x0D	; 13
    6a68:	d1 cf       	rjmp	.-94     	; 0x6a0c <xio_rs485_putc+0x16>
    6a6a:	90 93 4b 24 	sts	0x244B, r25
		return xio_rs485_putc('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (fr.usart->STATUS & 0x20) {
    6a6e:	a0 91 4c 24 	lds	r26, 0x244C
    6a72:	b0 91 4d 24 	lds	r27, 0x244D
    6a76:	11 96       	adiw	r26, 0x01	; 1
    6a78:	8c 91       	ld	r24, X
    6a7a:	11 97       	sbiw	r26, 0x01	; 1
    6a7c:	85 ff       	sbrs	r24, 5
    6a7e:	27 c0       	rjmp	.+78     	; 0x6ace <xio_rs485_putc+0xd8>
		if (fr.tx_buf_head == fr.tx_buf_tail) {	// buf might be empty if IRQ got it
    6a80:	90 91 4a 24 	lds	r25, 0x244A
    6a84:	80 91 49 24 	lds	r24, 0x2449
    6a88:	98 17       	cp	r25, r24
    6a8a:	71 f1       	breq	.+92     	; 0x6ae8 <xio_rs485_putc+0xf2>
			return (0);
		}
		fr.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    6a8c:	38 60       	ori	r19, 0x08	; 8
    6a8e:	20 93 3e 24 	sts	0x243E, r18
    6a92:	30 93 3f 24 	sts	0x243F, r19
		if (--(fr.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    6a96:	80 91 49 24 	lds	r24, 0x2449
    6a9a:	81 50       	subi	r24, 0x01	; 1
    6a9c:	80 93 49 24 	sts	0x2449, r24
    6aa0:	80 91 49 24 	lds	r24, 0x2449
    6aa4:	88 23       	and	r24, r24
    6aa6:	19 f4       	brne	.+6      	; 0x6aae <xio_rs485_putc+0xb8>
			fr.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6aa8:	81 e1       	ldi	r24, 0x11	; 17
    6aaa:	80 93 49 24 	sts	0x2449, r24
		}
		fr.usart->DATA = fr.tx_buf[fr.tx_buf_tail];// write char to TX DATA register
    6aae:	e0 91 49 24 	lds	r30, 0x2449
    6ab2:	f0 e0       	ldi	r31, 0x00	; 0
    6ab4:	e2 5c       	subi	r30, 0xC2	; 194
    6ab6:	fb 4d       	sbci	r31, 0xDB	; 219
    6ab8:	84 a1       	ldd	r24, Z+36	; 0x24
    6aba:	8c 93       	st	X, r24
		fr.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    6abc:	80 91 3e 24 	lds	r24, 0x243E
    6ac0:	90 91 3f 24 	lds	r25, 0x243F
    6ac4:	97 7f       	andi	r25, 0xF7	; 247
    6ac6:	80 93 3e 24 	sts	0x243E, r24
    6aca:	90 93 3f 24 	sts	0x243F, r25
	}
	// enable interrupts regardless
	fr.usart->CTRLA = USART_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    6ace:	e0 91 4c 24 	lds	r30, 0x244C
    6ad2:	f0 91 4d 24 	lds	r31, 0x244D
    6ad6:	81 e2       	ldi	r24, 0x21	; 33
    6ad8:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    6ada:	80 91 a2 00 	lds	r24, 0x00A2
    6ade:	81 60       	ori	r24, 0x01	; 1
    6ae0:	e0 ea       	ldi	r30, 0xA0	; 160
    6ae2:	f0 e0       	ldi	r31, 0x00	; 0
    6ae4:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    6ae6:	78 94       	sei
    6ae8:	20 e0       	ldi	r18, 0x00	; 0
    6aea:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    6aec:	c9 01       	movw	r24, r18
    6aee:	08 95       	ret

00006af0 <xio_rs485_getc>:
 */

int xio_rs485_getc(FILE *stream)
{
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(fr.flags)) {
    6af0:	20 91 3e 24 	lds	r18, 0x243E
    6af4:	30 91 3f 24 	lds	r19, 0x243F
    6af8:	24 70       	andi	r18, 0x04	; 4
    6afa:	30 70       	andi	r19, 0x00	; 0
    6afc:	15 c0       	rjmp	.+42     	; 0x6b28 <xio_rs485_getc+0x38>
    6afe:	21 15       	cp	r18, r1
    6b00:	31 05       	cpc	r19, r1
    6b02:	61 f0       	breq	.+24     	; 0x6b1c <xio_rs485_getc+0x2c>
			sleep_mode();
    6b04:	80 91 48 00 	lds	r24, 0x0048
    6b08:	81 60       	ori	r24, 0x01	; 1
    6b0a:	80 93 48 00 	sts	0x0048, r24
    6b0e:	88 95       	sleep
    6b10:	80 91 48 00 	lds	r24, 0x0048
    6b14:	8e 7f       	andi	r24, 0xFE	; 254
    6b16:	80 93 48 00 	sts	0x0048, r24
    6b1a:	06 c0       	rjmp	.+12     	; 0x6b28 <xio_rs485_getc+0x38>
		} else {
			fr.sig = XIO_SIG_EAGAIN;
    6b1c:	81 e0       	ldi	r24, 0x01	; 1
    6b1e:	80 93 41 24 	sts	0x2441, r24
    6b22:	2f ef       	ldi	r18, 0xFF	; 255
    6b24:	3f ef       	ldi	r19, 0xFF	; 255
    6b26:	26 c0       	rjmp	.+76     	; 0x6b74 <xio_rs485_getc+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_rs485_getc(FILE *stream)
{
	while (fr.rx_buf_head == fr.rx_buf_tail) {	// RX ISR buffer empty
    6b28:	90 91 48 24 	lds	r25, 0x2448
    6b2c:	80 91 47 24 	lds	r24, 0x2447
    6b30:	98 17       	cp	r25, r24
    6b32:	29 f3       	breq	.-54     	; 0x6afe <xio_rs485_getc+0xe>
		} else {
			fr.sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    6b34:	80 91 47 24 	lds	r24, 0x2447
    6b38:	81 50       	subi	r24, 0x01	; 1
    6b3a:	80 93 47 24 	sts	0x2447, r24
    6b3e:	80 91 47 24 	lds	r24, 0x2447
    6b42:	88 23       	and	r24, r24
    6b44:	19 f4       	brne	.+6      	; 0x6b4c <xio_rs485_getc+0x5c>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6b46:	81 e1       	ldi	r24, 0x11	; 17
    6b48:	80 93 47 24 	sts	0x2447, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    6b4c:	e0 91 47 24 	lds	r30, 0x2447
    6b50:	f0 e0       	ldi	r31, 0x00	; 0
    6b52:	e2 5c       	subi	r30, 0xC2	; 194
    6b54:	fb 4d       	sbci	r31, 0xDB	; 219
    6b56:	82 89       	ldd	r24, Z+18	; 0x12
    6b58:	8f 77       	andi	r24, 0x7F	; 127
    6b5a:	80 93 42 24 	sts	0x2442, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[fr.c])))());
    6b5e:	90 e0       	ldi	r25, 0x00	; 0
    6b60:	88 0f       	add	r24, r24
    6b62:	99 1f       	adc	r25, r25
    6b64:	8d 51       	subi	r24, 0x1D	; 29
    6b66:	93 4e       	sbci	r25, 0xE3	; 227
    6b68:	fc 01       	movw	r30, r24
    6b6a:	25 91       	lpm	r18, Z+
    6b6c:	34 91       	lpm	r19, Z+
    6b6e:	f9 01       	movw	r30, r18
    6b70:	19 95       	eicall
    6b72:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    6b74:	c9 01       	movw	r24, r18
    6b76:	08 95       	ret

00006b78 <_getc_char>:

/* xio_rs485_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    6b78:	80 91 3e 24 	lds	r24, 0x243E
    6b7c:	84 ff       	sbrs	r24, 4
    6b7e:	08 c0       	rjmp	.+16     	; 0x6b90 <_getc_char+0x18>
    6b80:	60 91 82 25 	lds	r22, 0x2582
    6b84:	70 91 83 25 	lds	r23, 0x2583
    6b88:	80 91 42 24 	lds	r24, 0x2442
    6b8c:	0e 94 fb 34 	call	0x69f6	; 0x69f6 <xio_rs485_putc>
	return(fr.c);
}
    6b90:	80 91 42 24 	lds	r24, 0x2442
    6b94:	90 e0       	ldi	r25, 0x00	; 0
    6b96:	08 95       	ret

00006b98 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(fr.flags)) fr.c = '\n';
    6b98:	90 91 3e 24 	lds	r25, 0x243E
    6b9c:	96 ff       	sbrs	r25, 6
    6b9e:	03 c0       	rjmp	.+6      	; 0x6ba6 <_getc_NEWLINE+0xe>
    6ba0:	8a e0       	ldi	r24, 0x0A	; 10
    6ba2:	80 93 42 24 	sts	0x2442, r24
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    6ba6:	94 ff       	sbrs	r25, 4
    6ba8:	08 c0       	rjmp	.+16     	; 0x6bba <_getc_NEWLINE+0x22>
    6baa:	60 91 82 25 	lds	r22, 0x2582
    6bae:	70 91 83 25 	lds	r23, 0x2583
    6bb2:	80 91 42 24 	lds	r24, 0x2442
    6bb6:	0e 94 fb 34 	call	0x69f6	; 0x69f6 <xio_rs485_putc>
	return(fr.c);
}
    6bba:	80 91 42 24 	lds	r24, 0x2442
    6bbe:	90 e0       	ldi	r25, 0x00	; 0
    6bc0:	08 95       	ret

00006bc2 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(fr.flags)) {
    6bc2:	80 91 3e 24 	lds	r24, 0x243E
    6bc6:	87 ff       	sbrs	r24, 7
    6bc8:	03 c0       	rjmp	.+6      	; 0x6bd0 <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    6bca:	0e 94 cc 35 	call	0x6b98	; 0x6b98 <_getc_NEWLINE>
    6bce:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    6bd0:	0e 94 bc 35 	call	0x6b78	; 0x6b78 <_getc_char>
}
    6bd4:	08 95       	ret

00006bd6 <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	fr.sig = XIO_SIG_DELETE;
    6bd6:	89 e0       	ldi	r24, 0x09	; 9
    6bd8:	80 93 41 24 	sts	0x2441, r24
	return(_FDEV_ERR);
}
    6bdc:	8f ef       	ldi	r24, 0xFF	; 255
    6bde:	9f ef       	ldi	r25, 0xFF	; 255
    6be0:	08 95       	ret

00006be2 <xio_rs485_readln>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_rs485_readln(char *buf, uint8_t len)
{
	if (!IN_LINE(fr.flags)) {					// first time thru initializations
    6be2:	20 91 3e 24 	lds	r18, 0x243E
    6be6:	30 91 3f 24 	lds	r19, 0x243F
    6bea:	36 fd       	sbrc	r19, 6
    6bec:	0d c0       	rjmp	.+26     	; 0x6c08 <xio_rs485_readln+0x26>
		fr.i = 0;								// zero buffer
    6bee:	10 92 43 24 	sts	0x2443, r1
		fr.len = len;							// save arg into struct 
    6bf2:	60 93 44 24 	sts	0x2444, r22
		fr.buf = buf;							// save arg into struct 
    6bf6:	80 93 45 24 	sts	0x2445, r24
    6bfa:	90 93 46 24 	sts	0x2446, r25
//		fr.sig = XIO_SIG_OK;					// no signal action
		fr.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    6bfe:	30 64       	ori	r19, 0x40	; 64
    6c00:	20 93 3e 24 	sts	0x243E, r18
    6c04:	30 93 3f 24 	sts	0x243F, r19
	}
	if (fr.rx_buf_head == fr.rx_buf_tail) {		// RX ISR buffer empty
    6c08:	90 91 48 24 	lds	r25, 0x2448
    6c0c:	80 91 47 24 	lds	r24, 0x2447
    6c10:	98 17       	cp	r25, r24
    6c12:	19 f4       	brne	.+6      	; 0x6c1a <xio_rs485_readln+0x38>
    6c14:	21 e0       	ldi	r18, 0x01	; 1
    6c16:	30 e0       	ldi	r19, 0x00	; 0
    6c18:	20 c0       	rjmp	.+64     	; 0x6c5a <xio_rs485_readln+0x78>
//		fr.sig = XIO_SIG_WOULDBLOCK;
		return(TG_EAGAIN);
	}
	if (--(fr.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    6c1a:	80 91 47 24 	lds	r24, 0x2447
    6c1e:	81 50       	subi	r24, 0x01	; 1
    6c20:	80 93 47 24 	sts	0x2447, r24
    6c24:	80 91 47 24 	lds	r24, 0x2447
    6c28:	88 23       	and	r24, r24
    6c2a:	19 f4       	brne	.+6      	; 0x6c32 <xio_rs485_readln+0x50>
		fr.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6c2c:	81 e1       	ldi	r24, 0x11	; 17
    6c2e:	80 93 47 24 	sts	0x2447, r24
	}
	fr.c = (fr.rx_buf[fr.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    6c32:	e0 91 47 24 	lds	r30, 0x2447
    6c36:	f0 e0       	ldi	r31, 0x00	; 0
    6c38:	e2 5c       	subi	r30, 0xC2	; 194
    6c3a:	fb 4d       	sbci	r31, 0xDB	; 219
    6c3c:	82 89       	ldd	r24, Z+18	; 0x12
    6c3e:	8f 77       	andi	r24, 0x7F	; 127
    6c40:	80 93 42 24 	sts	0x2442, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[fr.c])))()); // dispatch on character
    6c44:	90 e0       	ldi	r25, 0x00	; 0
    6c46:	88 0f       	add	r24, r24
    6c48:	99 1f       	adc	r25, r25
    6c4a:	8d 51       	subi	r24, 0x1D	; 29
    6c4c:	94 4e       	sbci	r25, 0xE4	; 228
    6c4e:	fc 01       	movw	r30, r24
    6c50:	25 91       	lpm	r18, Z+
    6c52:	34 91       	lpm	r19, Z+
    6c54:	f9 01       	movw	r30, r18
    6c56:	19 95       	eicall
    6c58:	9c 01       	movw	r18, r24
}
    6c5a:	c9 01       	movw	r24, r18
    6c5c:	08 95       	ret

00006c5e <_readln_char>:

/* xio_rs485_readln helper routines */

static int _readln_char(void)
{
	if (fr.i > fr.len) {						// trap buffer overflow
    6c5e:	90 91 43 24 	lds	r25, 0x2443
    6c62:	20 91 44 24 	lds	r18, 0x2444
    6c66:	e0 91 45 24 	lds	r30, 0x2445
    6c6a:	f0 91 46 24 	lds	r31, 0x2446
    6c6e:	29 17       	cp	r18, r25
    6c70:	48 f4       	brcc	.+18     	; 0x6c84 <_readln_char+0x26>
		fr.sig = XIO_SIG_EOL;
    6c72:	82 e0       	ldi	r24, 0x02	; 2
    6c74:	80 93 41 24 	sts	0x2441, r24
		fr.buf[fr.len] = NUL;					// fr.len is zero based
    6c78:	e2 0f       	add	r30, r18
    6c7a:	f1 1d       	adc	r31, r1
    6c7c:	10 82       	st	Z, r1
    6c7e:	27 e0       	ldi	r18, 0x07	; 7
    6c80:	30 e0       	ldi	r19, 0x00	; 0
    6c82:	16 c0       	rjmp	.+44     	; 0x6cb0 <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	fr.buf[fr.i++] = fr.c;
    6c84:	e9 0f       	add	r30, r25
    6c86:	f1 1d       	adc	r31, r1
    6c88:	80 91 42 24 	lds	r24, 0x2442
    6c8c:	80 83       	st	Z, r24
    6c8e:	9f 5f       	subi	r25, 0xFF	; 255
    6c90:	90 93 43 24 	sts	0x2443, r25
	if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);// conditional echo
    6c94:	80 91 3e 24 	lds	r24, 0x243E
    6c98:	84 ff       	sbrs	r24, 4
    6c9a:	08 c0       	rjmp	.+16     	; 0x6cac <_readln_char+0x4e>
    6c9c:	60 91 82 25 	lds	r22, 0x2582
    6ca0:	70 91 83 25 	lds	r23, 0x2583
    6ca4:	80 91 42 24 	lds	r24, 0x2442
    6ca8:	0e 94 fb 34 	call	0x69f6	; 0x69f6 <xio_rs485_putc>
    6cac:	21 e0       	ldi	r18, 0x01	; 1
    6cae:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_EAGAIN);						// line is still in process
}
    6cb0:	c9 01       	movw	r24, r18
    6cb2:	08 95       	ret

00006cb4 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	fr.sig = XIO_SIG_EOL;
    6cb4:	82 e0       	ldi	r24, 0x02	; 2
    6cb6:	80 93 41 24 	sts	0x2441, r24
	fr.buf[fr.i] = NUL;
    6cba:	80 91 43 24 	lds	r24, 0x2443
    6cbe:	e0 91 45 24 	lds	r30, 0x2445
    6cc2:	f0 91 46 24 	lds	r31, 0x2446
    6cc6:	e8 0f       	add	r30, r24
    6cc8:	f1 1d       	adc	r31, r1
    6cca:	10 82       	st	Z, r1
	fr.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    6ccc:	20 91 3e 24 	lds	r18, 0x243E
    6cd0:	30 91 3f 24 	lds	r19, 0x243F
    6cd4:	c9 01       	movw	r24, r18
    6cd6:	9f 7b       	andi	r25, 0xBF	; 191
    6cd8:	80 93 3e 24 	sts	0x243E, r24
    6cdc:	90 93 3f 24 	sts	0x243F, r25
	if (ECHO(fr.flags)) xio_rs485_putc('\n',stdout);// echo a newline
    6ce0:	24 ff       	sbrs	r18, 4
    6ce2:	07 c0       	rjmp	.+14     	; 0x6cf2 <_readln_NEWLINE+0x3e>
    6ce4:	60 91 82 25 	lds	r22, 0x2582
    6ce8:	70 91 83 25 	lds	r23, 0x2583
    6cec:	8a e0       	ldi	r24, 0x0A	; 10
    6cee:	0e 94 fb 34 	call	0x69f6	; 0x69f6 <xio_rs485_putc>
	return 0;
//	return ((int)fr.line_func(fr.buf));			// call line handler function
}
    6cf2:	80 e0       	ldi	r24, 0x00	; 0
    6cf4:	90 e0       	ldi	r25, 0x00	; 0
    6cf6:	08 95       	ret

00006cf8 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(fr.flags)) {
    6cf8:	80 91 3e 24 	lds	r24, 0x243E
    6cfc:	87 ff       	sbrs	r24, 7
    6cfe:	03 c0       	rjmp	.+6      	; 0x6d06 <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    6d00:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <_readln_NEWLINE>
    6d04:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    6d06:	0e 94 2f 36 	call	0x6c5e	; 0x6c5e <_readln_char>
	}
}
    6d0a:	08 95       	ret

00006d0c <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--fr.i >= 0) {
    6d0c:	80 91 43 24 	lds	r24, 0x2443
    6d10:	81 50       	subi	r24, 0x01	; 1
    6d12:	80 93 43 24 	sts	0x2443, r24
		if (ECHO(fr.flags)) xio_rs485_putc(fr.c, stdout);
    6d16:	80 91 3e 24 	lds	r24, 0x243E
    6d1a:	84 ff       	sbrs	r24, 4
    6d1c:	08 c0       	rjmp	.+16     	; 0x6d2e <_readln_DELETE+0x22>
    6d1e:	60 91 82 25 	lds	r22, 0x2582
    6d22:	70 91 83 25 	lds	r23, 0x2583
    6d26:	80 91 42 24 	lds	r24, 0x2442
    6d2a:	0e 94 fb 34 	call	0x69f6	; 0x69f6 <xio_rs485_putc>
	} else {
		fr.i = 0;
	}
	return (TG_EAGAIN);							// line is still in process
}
    6d2e:	81 e0       	ldi	r24, 0x01	; 1
    6d30:	90 e0       	ldi	r25, 0x00	; 0
    6d32:	08 95       	ret

00006d34 <_sig_KILL>:
 * Signal handlers. These are vestigal stubs that have no effect.
 */

static int _sig_KILL(void)
{
	fr.sig = XIO_SIG_KILL;
    6d34:	84 e0       	ldi	r24, 0x04	; 4
    6d36:	80 93 41 24 	sts	0x2441, r24
	return(_FDEV_ERR);
}
    6d3a:	8f ef       	ldi	r24, 0xFF	; 255
    6d3c:	9f ef       	ldi	r25, 0xFF	; 255
    6d3e:	08 95       	ret

00006d40 <_sig_PAUSE>:

static int _sig_PAUSE(void)
{
	fr.sig = XIO_SIG_PAUSE;
    6d40:	86 e0       	ldi	r24, 0x06	; 6
    6d42:	80 93 41 24 	sts	0x2441, r24
	return(_FDEV_ERR);
}
    6d46:	8f ef       	ldi	r24, 0xFF	; 255
    6d48:	9f ef       	ldi	r25, 0xFF	; 255
    6d4a:	08 95       	ret

00006d4c <_sig_RESUME>:

static int _sig_RESUME(void)
{
	fr.sig = XIO_SIG_RESUME;
    6d4c:	87 e0       	ldi	r24, 0x07	; 7
    6d4e:	80 93 41 24 	sts	0x2441, r24
	return(_FDEV_ERR);
}
    6d52:	8f ef       	ldi	r24, 0xFF	; 255
    6d54:	9f ef       	ldi	r25, 0xFF	; 255
    6d56:	08 95       	ret

00006d58 <xio_rs485_queue_RX_char>:
/*
 * xio_rs485_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_rs485_queue_RX_char(const char c)
{
    6d58:	28 2f       	mov	r18, r24
	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6d5a:	83 30       	cpi	r24, 0x03	; 3
    6d5c:	31 f4       	brne	.+12     	; 0x6d6a <xio_rs485_queue_RX_char+0x12>
		fr.sig = XIO_SIG_KILL;					// set signal value
    6d5e:	84 e0       	ldi	r24, 0x04	; 4
    6d60:	80 93 41 24 	sts	0x2441, r24
		signal_etx();							// call app-specific signal handler
    6d64:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <signal_etx>
    6d68:	08 95       	ret
		return;
	}

	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// wrap condition
    6d6a:	80 91 48 24 	lds	r24, 0x2448
    6d6e:	81 50       	subi	r24, 0x01	; 1
    6d70:	80 93 48 24 	sts	0x2448, r24
    6d74:	80 91 48 24 	lds	r24, 0x2448
    6d78:	88 23       	and	r24, r24
    6d7a:	19 f4       	brne	.+6      	; 0x6d82 <xio_rs485_queue_RX_char+0x2a>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6d7c:	81 e1       	ldi	r24, 0x11	; 17
    6d7e:	80 93 48 24 	sts	0x2448, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    6d82:	90 91 48 24 	lds	r25, 0x2448
    6d86:	80 91 47 24 	lds	r24, 0x2447
    6d8a:	98 17       	cp	r25, r24
    6d8c:	39 f0       	breq	.+14     	; 0x6d9c <xio_rs485_queue_RX_char+0x44>
		fr.rx_buf[fr.rx_buf_head] = c;			// FAKE INPUT DATA
    6d8e:	e0 91 48 24 	lds	r30, 0x2448
    6d92:	f0 e0       	ldi	r31, 0x00	; 0
    6d94:	e2 5c       	subi	r30, 0xC2	; 194
    6d96:	fb 4d       	sbci	r31, 0xDB	; 219
    6d98:	22 8b       	std	Z+18, r18	; 0x12
    6d9a:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6d9c:	80 91 48 24 	lds	r24, 0x2448
    6da0:	8f 5f       	subi	r24, 0xFF	; 255
    6da2:	80 93 48 24 	sts	0x2448, r24
    6da6:	80 91 48 24 	lds	r24, 0x2448
    6daa:	82 31       	cpi	r24, 0x12	; 18
    6dac:	18 f0       	brcs	.+6      	; 0x6db4 <xio_rs485_queue_RX_char+0x5c>
		fr.rx_buf_head = 1;
    6dae:	81 e0       	ldi	r24, 0x01	; 1
    6db0:	80 93 48 24 	sts	0x2448, r24
    6db4:	08 95       	ret

00006db6 <xio_rs485_queue_RX_string>:
/*
 * xio_rs485_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_rs485_queue_RX_string(char *buf)
{
    6db6:	1f 93       	push	r17
    6db8:	cf 93       	push	r28
    6dba:	df 93       	push	r29
    6dbc:	ec 01       	movw	r28, r24
    6dbe:	10 e0       	ldi	r17, 0x00	; 0
    6dc0:	02 c0       	rjmp	.+4      	; 0x6dc6 <xio_rs485_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_rs485_queue_RX_char(c);
    6dc2:	0e 94 ac 36 	call	0x6d58	; 0x6d58 <xio_rs485_queue_RX_char>
void xio_rs485_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    6dc6:	fe 01       	movw	r30, r28
    6dc8:	e1 0f       	add	r30, r17
    6dca:	f1 1d       	adc	r31, r1
    6dcc:	80 81       	ld	r24, Z
    6dce:	1f 5f       	subi	r17, 0xFF	; 255
    6dd0:	88 23       	and	r24, r24
    6dd2:	b9 f7       	brne	.-18     	; 0x6dc2 <xio_rs485_queue_RX_string+0xc>
		xio_rs485_queue_RX_char(c);
	}
}
    6dd4:	df 91       	pop	r29
    6dd6:	cf 91       	pop	r28
    6dd8:	1f 91       	pop	r17
    6dda:	08 95       	ret

00006ddc <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)		//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    6ddc:	1f 92       	push	r1
    6dde:	0f 92       	push	r0
    6de0:	0f b6       	in	r0, 0x3f	; 63
    6de2:	0f 92       	push	r0
    6de4:	0b b6       	in	r0, 0x3b	; 59
    6de6:	0f 92       	push	r0
    6de8:	11 24       	eor	r1, r1
    6dea:	2f 93       	push	r18
    6dec:	3f 93       	push	r19
    6dee:	4f 93       	push	r20
    6df0:	5f 93       	push	r21
    6df2:	6f 93       	push	r22
    6df4:	7f 93       	push	r23
    6df6:	8f 93       	push	r24
    6df8:	9f 93       	push	r25
    6dfa:	af 93       	push	r26
    6dfc:	bf 93       	push	r27
    6dfe:	ef 93       	push	r30
    6e00:	ff 93       	push	r31
	uint8_t c = fr.usart->DATA;					// can only read DATA once
    6e02:	e0 91 4c 24 	lds	r30, 0x244C
    6e06:	f0 91 4d 24 	lds	r31, 0x244D
    6e0a:	20 81       	ld	r18, Z

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6e0c:	23 30       	cpi	r18, 0x03	; 3
    6e0e:	31 f4       	brne	.+12     	; 0x6e1c <__vector_28+0x40>
		fr.sig = XIO_SIG_KILL;					// set signal value
    6e10:	84 e0       	ldi	r24, 0x04	; 4
    6e12:	80 93 41 24 	sts	0x2441, r24
		signal_etx();							// call app-specific signal handler
    6e16:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <signal_etx>
    6e1a:	25 c0       	rjmp	.+74     	; 0x6e66 <__vector_28+0x8a>
		return;
	}

	// normal path
	if ((--fr.rx_buf_head) == 0) { 				// advance buffer head with wrap
    6e1c:	80 91 48 24 	lds	r24, 0x2448
    6e20:	81 50       	subi	r24, 0x01	; 1
    6e22:	80 93 48 24 	sts	0x2448, r24
    6e26:	80 91 48 24 	lds	r24, 0x2448
    6e2a:	88 23       	and	r24, r24
    6e2c:	19 f4       	brne	.+6      	; 0x6e34 <__vector_28+0x58>
		fr.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6e2e:	81 e1       	ldi	r24, 0x11	; 17
    6e30:	80 93 48 24 	sts	0x2448, r24
	}
	if (fr.rx_buf_head != fr.rx_buf_tail) {		// write char unless buffer full
    6e34:	90 91 48 24 	lds	r25, 0x2448
    6e38:	80 91 47 24 	lds	r24, 0x2447
    6e3c:	98 17       	cp	r25, r24
    6e3e:	39 f0       	breq	.+14     	; 0x6e4e <__vector_28+0x72>
		fr.rx_buf[fr.rx_buf_head] = c;			// (= USARTC0.DATA;)
    6e40:	e0 91 48 24 	lds	r30, 0x2448
    6e44:	f0 e0       	ldi	r31, 0x00	; 0
    6e46:	e2 5c       	subi	r30, 0xC2	; 194
    6e48:	fb 4d       	sbci	r31, 0xDB	; 219
    6e4a:	22 8b       	std	Z+18, r18	; 0x12
    6e4c:	0c c0       	rjmp	.+24     	; 0x6e66 <__vector_28+0x8a>
		return;
	}
	// buffer-full handling
	if ((++fr.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6e4e:	80 91 48 24 	lds	r24, 0x2448
    6e52:	8f 5f       	subi	r24, 0xFF	; 255
    6e54:	80 93 48 24 	sts	0x2448, r24
    6e58:	80 91 48 24 	lds	r24, 0x2448
    6e5c:	82 31       	cpi	r24, 0x12	; 18
    6e5e:	18 f0       	brcs	.+6      	; 0x6e66 <__vector_28+0x8a>
		fr.rx_buf_head = 1;
    6e60:	81 e0       	ldi	r24, 0x01	; 1
    6e62:	80 93 48 24 	sts	0x2448, r24
	}
	// activate flow control here or before it gets to this level
}
    6e66:	ff 91       	pop	r31
    6e68:	ef 91       	pop	r30
    6e6a:	bf 91       	pop	r27
    6e6c:	af 91       	pop	r26
    6e6e:	9f 91       	pop	r25
    6e70:	8f 91       	pop	r24
    6e72:	7f 91       	pop	r23
    6e74:	6f 91       	pop	r22
    6e76:	5f 91       	pop	r21
    6e78:	4f 91       	pop	r20
    6e7a:	3f 91       	pop	r19
    6e7c:	2f 91       	pop	r18
    6e7e:	0f 90       	pop	r0
    6e80:	0b be       	out	0x3b, r0	; 59
    6e82:	0f 90       	pop	r0
    6e84:	0f be       	out	0x3f, r0	; 63
    6e86:	0f 90       	pop	r0
    6e88:	1f 90       	pop	r1
    6e8a:	18 95       	reti

00006e8c <signal_etx>:
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx() {			// ^c
{
	tg_reset_source();					// return control to standard device
    6e8c:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <tg_reset_source>
	mc_motion_stop();					// stop computing and generating motions
    6e90:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    6e94:	0e 94 20 31 	call	0x6240	; 0x6240 <mv_flush>
	st_stop_steppers();					// stop the steppers
    6e98:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <st_stop_steppers>
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
*/
}
    6e9c:	08 95       	ret

00006e9e <xio_init_usarts>:

void xio_init_usarts() 
{
//	xio_init_usart(2, *u, const uint16_t control)
	return;
}
    6e9e:	08 95       	ret

00006ea0 <xio_init_usart>:
/* 
 *	xio_init_usart() - general purpose USART initialization (shared)
 */

void xio_init_usart(uint8_t dev, struct xioUSART *u, const uint16_t control)
{
    6ea0:	28 2f       	mov	r18, r24
    6ea2:	db 01       	movw	r26, r22
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    6ea4:	64 2f       	mov	r22, r20
    6ea6:	6f 70       	andi	r22, 0x0F	; 15

	// transfer control flags to internal flag bits
//	u->flags = XIO_FLAG_USB_DEFS_gm;		// set flags to defaults & initial state
	if (control & XIO_RD) {
    6ea8:	44 ff       	sbrs	r20, 4
    6eaa:	07 c0       	rjmp	.+14     	; 0x6eba <xio_init_usart+0x1a>
		u->flags |= XIO_FLAG_RD_bm;
    6eac:	8d 91       	ld	r24, X+
    6eae:	9c 91       	ld	r25, X
    6eb0:	11 97       	sbiw	r26, 0x01	; 1
    6eb2:	81 60       	ori	r24, 0x01	; 1
    6eb4:	8d 93       	st	X+, r24
    6eb6:	9c 93       	st	X, r25
    6eb8:	11 97       	sbiw	r26, 0x01	; 1
	}
	if (control & XIO_WR) {
    6eba:	45 ff       	sbrs	r20, 5
    6ebc:	07 c0       	rjmp	.+14     	; 0x6ecc <xio_init_usart+0x2c>
		u->flags |= XIO_FLAG_WR_bm;
    6ebe:	8d 91       	ld	r24, X+
    6ec0:	9c 91       	ld	r25, X
    6ec2:	11 97       	sbiw	r26, 0x01	; 1
    6ec4:	82 60       	ori	r24, 0x02	; 2
    6ec6:	8d 93       	st	X+, r24
    6ec8:	9c 93       	st	X, r25
    6eca:	11 97       	sbiw	r26, 0x01	; 1
	}
	if (control & XIO_BLOCK) {
    6ecc:	46 ff       	sbrs	r20, 6
    6ece:	07 c0       	rjmp	.+14     	; 0x6ede <xio_init_usart+0x3e>
		u->flags |= XIO_FLAG_BLOCK_bm;
    6ed0:	8d 91       	ld	r24, X+
    6ed2:	9c 91       	ld	r25, X
    6ed4:	11 97       	sbiw	r26, 0x01	; 1
    6ed6:	84 60       	ori	r24, 0x04	; 4
    6ed8:	8d 93       	st	X+, r24
    6eda:	9c 93       	st	X, r25
    6edc:	11 97       	sbiw	r26, 0x01	; 1
	}
	if (control & XIO_NOBLOCK) {
    6ede:	47 ff       	sbrs	r20, 7
    6ee0:	07 c0       	rjmp	.+14     	; 0x6ef0 <xio_init_usart+0x50>
		u->flags &= ~XIO_FLAG_BLOCK_bm;
    6ee2:	8d 91       	ld	r24, X+
    6ee4:	9c 91       	ld	r25, X
    6ee6:	11 97       	sbiw	r26, 0x01	; 1
    6ee8:	8b 7f       	andi	r24, 0xFB	; 251
    6eea:	8d 93       	st	X+, r24
    6eec:	9c 93       	st	X, r25
    6eee:	11 97       	sbiw	r26, 0x01	; 1
	}
	if (control & XIO_ECHO) {
    6ef0:	50 ff       	sbrs	r21, 0
    6ef2:	07 c0       	rjmp	.+14     	; 0x6f02 <xio_init_usart+0x62>
		u->flags |= XIO_FLAG_ECHO_bm;
    6ef4:	8d 91       	ld	r24, X+
    6ef6:	9c 91       	ld	r25, X
    6ef8:	11 97       	sbiw	r26, 0x01	; 1
    6efa:	80 61       	ori	r24, 0x10	; 16
    6efc:	8d 93       	st	X+, r24
    6efe:	9c 93       	st	X, r25
    6f00:	11 97       	sbiw	r26, 0x01	; 1
	}
	if (control & XIO_NOECHO) {
    6f02:	51 ff       	sbrs	r21, 1
    6f04:	07 c0       	rjmp	.+14     	; 0x6f14 <xio_init_usart+0x74>
		u->flags &= ~XIO_FLAG_ECHO_bm;
    6f06:	8d 91       	ld	r24, X+
    6f08:	9c 91       	ld	r25, X
    6f0a:	11 97       	sbiw	r26, 0x01	; 1
    6f0c:	8f 7e       	andi	r24, 0xEF	; 239
    6f0e:	8d 93       	st	X+, r24
    6f10:	9c 93       	st	X, r25
    6f12:	11 97       	sbiw	r26, 0x01	; 1
	}
	if (control & XIO_CRLF) {
    6f14:	52 ff       	sbrs	r21, 2
    6f16:	07 c0       	rjmp	.+14     	; 0x6f26 <xio_init_usart+0x86>
		u->flags |= XIO_FLAG_CRLF_bm;
    6f18:	8d 91       	ld	r24, X+
    6f1a:	9c 91       	ld	r25, X
    6f1c:	11 97       	sbiw	r26, 0x01	; 1
    6f1e:	80 62       	ori	r24, 0x20	; 32
    6f20:	8d 93       	st	X+, r24
    6f22:	9c 93       	st	X, r25
    6f24:	11 97       	sbiw	r26, 0x01	; 1
	}
	if (control & XIO_NOCRLF) {
    6f26:	53 ff       	sbrs	r21, 3
    6f28:	07 c0       	rjmp	.+14     	; 0x6f38 <xio_init_usart+0x98>
		u->flags &= ~XIO_FLAG_CRLF_bm;
    6f2a:	8d 91       	ld	r24, X+
    6f2c:	9c 91       	ld	r25, X
    6f2e:	11 97       	sbiw	r26, 0x01	; 1
    6f30:	8f 7d       	andi	r24, 0xDF	; 223
    6f32:	8d 93       	st	X+, r24
    6f34:	9c 93       	st	X, r25
    6f36:	11 97       	sbiw	r26, 0x01	; 1
	}
	if (control & XIO_LINEMODE) {
    6f38:	54 ff       	sbrs	r21, 4
    6f3a:	07 c0       	rjmp	.+14     	; 0x6f4a <xio_init_usart+0xaa>
		u->flags |= XIO_FLAG_LINEMODE_bm;
    6f3c:	8d 91       	ld	r24, X+
    6f3e:	9c 91       	ld	r25, X
    6f40:	11 97       	sbiw	r26, 0x01	; 1
    6f42:	80 64       	ori	r24, 0x40	; 64
    6f44:	8d 93       	st	X+, r24
    6f46:	9c 93       	st	X, r25
    6f48:	11 97       	sbiw	r26, 0x01	; 1
	}
	if (control & XIO_NOLINEMODE) {
    6f4a:	55 ff       	sbrs	r21, 5
    6f4c:	07 c0       	rjmp	.+14     	; 0x6f5c <xio_init_usart+0xbc>
		u->flags &= ~XIO_FLAG_LINEMODE_bm;
    6f4e:	8d 91       	ld	r24, X+
    6f50:	9c 91       	ld	r25, X
    6f52:	11 97       	sbiw	r26, 0x01	; 1
    6f54:	8f 7b       	andi	r24, 0xBF	; 191
    6f56:	8d 93       	st	X+, r24
    6f58:	9c 93       	st	X, r25
    6f5a:	11 97       	sbiw	r26, 0x01	; 1
	}
	if (control & XIO_SEMICOLONS) {
    6f5c:	56 ff       	sbrs	r21, 6
    6f5e:	07 c0       	rjmp	.+14     	; 0x6f6e <xio_init_usart+0xce>
		u->flags |= XIO_FLAG_SEMICOLONS_bm;
    6f60:	8d 91       	ld	r24, X+
    6f62:	9c 91       	ld	r25, X
    6f64:	11 97       	sbiw	r26, 0x01	; 1
    6f66:	80 68       	ori	r24, 0x80	; 128
    6f68:	8d 93       	st	X+, r24
    6f6a:	9c 93       	st	X, r25
    6f6c:	11 97       	sbiw	r26, 0x01	; 1
	}
	if (control & XIO_NOSEMICOLONS) {
    6f6e:	57 ff       	sbrs	r21, 7
    6f70:	07 c0       	rjmp	.+14     	; 0x6f80 <xio_init_usart+0xe0>
		u->flags &= ~XIO_FLAG_SEMICOLONS_bm;
    6f72:	8d 91       	ld	r24, X+
    6f74:	9c 91       	ld	r25, X
    6f76:	11 97       	sbiw	r26, 0x01	; 1
    6f78:	8f 77       	andi	r24, 0x7F	; 127
    6f7a:	8d 93       	st	X+, r24
    6f7c:	9c 93       	st	X, r25
    6f7e:	11 97       	sbiw	r26, 0x01	; 1
	}

	// character signals and error returns
	u->sig = 0;
    6f80:	13 96       	adiw	r26, 0x03	; 3
    6f82:	1c 92       	st	X, r1
    6f84:	13 97       	sbiw	r26, 0x03	; 3
//	dev_usb.udata = &(u->sig);				// bind sig register to FILE struct

	// setup internal RX/TX buffers
	u->rx_buf_head = 1;						// can't use location 0
    6f86:	81 e0       	ldi	r24, 0x01	; 1
    6f88:	1a 96       	adiw	r26, 0x0a	; 10
    6f8a:	8c 93       	st	X, r24
    6f8c:	1a 97       	sbiw	r26, 0x0a	; 10
	u->rx_buf_tail = 1;
    6f8e:	19 96       	adiw	r26, 0x09	; 9
    6f90:	8c 93       	st	X, r24
    6f92:	19 97       	sbiw	r26, 0x09	; 9
	u->tx_buf_head = 1;
    6f94:	1c 96       	adiw	r26, 0x0c	; 12
    6f96:	8c 93       	st	X, r24
    6f98:	1c 97       	sbiw	r26, 0x0c	; 12
	u->tx_buf_tail = 1;
    6f9a:	1b 96       	adiw	r26, 0x0b	; 11
    6f9c:	8c 93       	st	X, r24
    6f9e:	1b 97       	sbiw	r26, 0x0b	; 11
	u->len = sizeof(u->buf);				// offset to zero
    6fa0:	82 e0       	ldi	r24, 0x02	; 2
    6fa2:	16 96       	adiw	r26, 0x06	; 6
    6fa4:	8c 93       	st	X, r24
    6fa6:	16 97       	sbiw	r26, 0x06	; 6

//	u->usart = &USB_USART;					// bind USART structure
//	u->port = &USB_PORT;					// bind PORT structure

	// bind USART and PORT structures to xioUSART struct
	u->usart = (struct USART_struct *)pgm_read_word(&usart_addr[dev]);
    6fa8:	82 2f       	mov	r24, r18
    6faa:	90 e0       	ldi	r25, 0x00	; 0
    6fac:	88 0f       	add	r24, r24
    6fae:	99 1f       	adc	r25, r25
    6fb0:	fc 01       	movw	r30, r24
    6fb2:	ed 51       	subi	r30, 0x1D	; 29
    6fb4:	f2 4e       	sbci	r31, 0xE2	; 226
    6fb6:	25 91       	lpm	r18, Z+
    6fb8:	34 91       	lpm	r19, Z+
    6fba:	1e 96       	adiw	r26, 0x0e	; 14
    6fbc:	2d 93       	st	X+, r18
    6fbe:	3c 93       	st	X, r19
    6fc0:	1f 97       	sbiw	r26, 0x0f	; 15
	u->port = (struct PORT_struct *)pgm_read_word(&port_addr[dev]);
    6fc2:	fc 01       	movw	r30, r24
    6fc4:	e5 51       	subi	r30, 0x15	; 21
    6fc6:	f2 4e       	sbci	r31, 0xE2	; 226
    6fc8:	85 91       	lpm	r24, Z+
    6fca:	94 91       	lpm	r25, Z+
    6fcc:	50 96       	adiw	r26, 0x10	; 16
    6fce:	8d 93       	st	X+, r24
    6fd0:	9c 93       	st	X, r25
    6fd2:	51 97       	sbiw	r26, 0x11	; 17

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    6fd4:	66 23       	and	r22, r22
    6fd6:	09 f4       	brne	.+2      	; 0x6fda <xio_init_usart+0x13a>
    6fd8:	65 e0       	ldi	r22, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	u->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    6fda:	1e 96       	adiw	r26, 0x0e	; 14
    6fdc:	0d 90       	ld	r0, X+
    6fde:	bc 91       	ld	r27, X
    6fe0:	a0 2d       	mov	r26, r0
    6fe2:	86 2f       	mov	r24, r22
    6fe4:	90 e0       	ldi	r25, 0x00	; 0
    6fe6:	fc 01       	movw	r30, r24
    6fe8:	e1 50       	subi	r30, 0x01	; 1
    6fea:	f2 4e       	sbci	r31, 0xE2	; 226
    6fec:	e4 91       	lpm	r30, Z+
    6fee:	16 96       	adiw	r26, 0x06	; 6
    6ff0:	ec 93       	st	X, r30
    6ff2:	16 97       	sbiw	r26, 0x06	; 6
	u->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    6ff4:	86 5f       	subi	r24, 0xF6	; 246
    6ff6:	91 4e       	sbci	r25, 0xE1	; 225
    6ff8:	fc 01       	movw	r30, r24
    6ffa:	84 91       	lpm	r24, Z+
    6ffc:	17 96       	adiw	r26, 0x07	; 7
    6ffe:	8c 93       	st	X, r24
    7000:	17 97       	sbiw	r26, 0x07	; 7
	u->usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm; // enable tx and rx on USART
    7002:	88 e1       	ldi	r24, 0x18	; 24
    7004:	14 96       	adiw	r26, 0x04	; 4
    7006:	8c 93       	st	X, r24
	u->port->DIRCLR = USB_CTS_bm; 			// set CTS pin as input
	u->port->DIRSET = USB_RTS_bm; 			// set RTS pin as output
	u->port->OUTSET = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
//	u->port->OUTCLR = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
*/
}
    7008:	08 95       	ret

0000700a <__udivdi3>:
    700a:	ae e5       	ldi	r26, 0x5E	; 94
    700c:	b0 e0       	ldi	r27, 0x00	; 0
    700e:	eb e0       	ldi	r30, 0x0B	; 11
    7010:	f8 e3       	ldi	r31, 0x38	; 56
    7012:	0c 94 98 46 	jmp	0x8d30	; 0x8d30 <__prologue_saves__>
    7016:	a8 e0       	ldi	r26, 0x08	; 8
    7018:	4e 01       	movw	r8, r28
    701a:	08 94       	sec
    701c:	81 1c       	adc	r8, r1
    701e:	91 1c       	adc	r9, r1
    7020:	f4 01       	movw	r30, r8
    7022:	6a 2e       	mov	r6, r26
    7024:	11 92       	st	Z+, r1
    7026:	6a 94       	dec	r6
    7028:	e9 f7       	brne	.-6      	; 0x7024 <__udivdi3+0x1a>
    702a:	29 83       	std	Y+1, r18	; 0x01
    702c:	3a 83       	std	Y+2, r19	; 0x02
    702e:	4b 83       	std	Y+3, r20	; 0x03
    7030:	5c 83       	std	Y+4, r21	; 0x04
    7032:	6d 83       	std	Y+5, r22	; 0x05
    7034:	7e 83       	std	Y+6, r23	; 0x06
    7036:	8f 83       	std	Y+7, r24	; 0x07
    7038:	98 87       	std	Y+8, r25	; 0x08
    703a:	ce 01       	movw	r24, r28
    703c:	09 96       	adiw	r24, 0x09	; 9
    703e:	fc 01       	movw	r30, r24
    7040:	11 92       	st	Z+, r1
    7042:	aa 95       	dec	r26
    7044:	e9 f7       	brne	.-6      	; 0x7040 <__udivdi3+0x36>
    7046:	a9 86       	std	Y+9, r10	; 0x09
    7048:	ba 86       	std	Y+10, r11	; 0x0a
    704a:	cb 86       	std	Y+11, r12	; 0x0b
    704c:	dc 86       	std	Y+12, r13	; 0x0c
    704e:	ed 86       	std	Y+13, r14	; 0x0d
    7050:	fe 86       	std	Y+14, r15	; 0x0e
    7052:	0f 87       	std	Y+15, r16	; 0x0f
    7054:	18 8b       	std	Y+16, r17	; 0x10
    7056:	29 84       	ldd	r2, Y+9	; 0x09
    7058:	3a 84       	ldd	r3, Y+10	; 0x0a
    705a:	4b 84       	ldd	r4, Y+11	; 0x0b
    705c:	5c 84       	ldd	r5, Y+12	; 0x0c
    705e:	ed 84       	ldd	r14, Y+13	; 0x0d
    7060:	fe 84       	ldd	r15, Y+14	; 0x0e
    7062:	0f 85       	ldd	r16, Y+15	; 0x0f
    7064:	18 89       	ldd	r17, Y+16	; 0x10
    7066:	69 80       	ldd	r6, Y+1	; 0x01
    7068:	7a 80       	ldd	r7, Y+2	; 0x02
    706a:	8b 80       	ldd	r8, Y+3	; 0x03
    706c:	9c 80       	ldd	r9, Y+4	; 0x04
    706e:	6d a6       	std	Y+45, r6	; 0x2d
    7070:	7e a6       	std	Y+46, r7	; 0x2e
    7072:	8f a6       	std	Y+47, r8	; 0x2f
    7074:	98 aa       	std	Y+48, r9	; 0x30
    7076:	6d 80       	ldd	r6, Y+5	; 0x05
    7078:	7e 80       	ldd	r7, Y+6	; 0x06
    707a:	8f 80       	ldd	r8, Y+7	; 0x07
    707c:	98 84       	ldd	r9, Y+8	; 0x08
    707e:	e1 14       	cp	r14, r1
    7080:	f1 04       	cpc	r15, r1
    7082:	01 05       	cpc	r16, r1
    7084:	11 05       	cpc	r17, r1
    7086:	09 f0       	breq	.+2      	; 0x708a <__udivdi3+0x80>
    7088:	b3 c3       	rjmp	.+1894   	; 0x77f0 <__udivdi3+0x7e6>
    708a:	62 14       	cp	r6, r2
    708c:	73 04       	cpc	r7, r3
    708e:	84 04       	cpc	r8, r4
    7090:	95 04       	cpc	r9, r5
    7092:	08 f0       	brcs	.+2      	; 0x7096 <__udivdi3+0x8c>
    7094:	3d c1       	rjmp	.+634    	; 0x7310 <__udivdi3+0x306>
    7096:	00 e0       	ldi	r16, 0x00	; 0
    7098:	20 16       	cp	r2, r16
    709a:	00 e0       	ldi	r16, 0x00	; 0
    709c:	30 06       	cpc	r3, r16
    709e:	01 e0       	ldi	r16, 0x01	; 1
    70a0:	40 06       	cpc	r4, r16
    70a2:	00 e0       	ldi	r16, 0x00	; 0
    70a4:	50 06       	cpc	r5, r16
    70a6:	88 f4       	brcc	.+34     	; 0x70ca <__udivdi3+0xc0>
    70a8:	1f ef       	ldi	r17, 0xFF	; 255
    70aa:	21 16       	cp	r2, r17
    70ac:	31 04       	cpc	r3, r1
    70ae:	41 04       	cpc	r4, r1
    70b0:	51 04       	cpc	r5, r1
    70b2:	39 f0       	breq	.+14     	; 0x70c2 <__udivdi3+0xb8>
    70b4:	30 f0       	brcs	.+12     	; 0x70c2 <__udivdi3+0xb8>
    70b6:	48 e0       	ldi	r20, 0x08	; 8
    70b8:	e4 2e       	mov	r14, r20
    70ba:	f1 2c       	mov	r15, r1
    70bc:	01 2d       	mov	r16, r1
    70be:	11 2d       	mov	r17, r1
    70c0:	18 c0       	rjmp	.+48     	; 0x70f2 <__udivdi3+0xe8>
    70c2:	ee 24       	eor	r14, r14
    70c4:	ff 24       	eor	r15, r15
    70c6:	87 01       	movw	r16, r14
    70c8:	14 c0       	rjmp	.+40     	; 0x70f2 <__udivdi3+0xe8>
    70ca:	20 e0       	ldi	r18, 0x00	; 0
    70cc:	22 16       	cp	r2, r18
    70ce:	20 e0       	ldi	r18, 0x00	; 0
    70d0:	32 06       	cpc	r3, r18
    70d2:	20 e0       	ldi	r18, 0x00	; 0
    70d4:	42 06       	cpc	r4, r18
    70d6:	21 e0       	ldi	r18, 0x01	; 1
    70d8:	52 06       	cpc	r5, r18
    70da:	30 f0       	brcs	.+12     	; 0x70e8 <__udivdi3+0xde>
    70dc:	38 e1       	ldi	r19, 0x18	; 24
    70de:	e3 2e       	mov	r14, r19
    70e0:	f1 2c       	mov	r15, r1
    70e2:	01 2d       	mov	r16, r1
    70e4:	11 2d       	mov	r17, r1
    70e6:	05 c0       	rjmp	.+10     	; 0x70f2 <__udivdi3+0xe8>
    70e8:	20 e1       	ldi	r18, 0x10	; 16
    70ea:	e2 2e       	mov	r14, r18
    70ec:	f1 2c       	mov	r15, r1
    70ee:	01 2d       	mov	r16, r1
    70f0:	11 2d       	mov	r17, r1
    70f2:	d2 01       	movw	r26, r4
    70f4:	c1 01       	movw	r24, r2
    70f6:	0e 2c       	mov	r0, r14
    70f8:	04 c0       	rjmp	.+8      	; 0x7102 <__udivdi3+0xf8>
    70fa:	b6 95       	lsr	r27
    70fc:	a7 95       	ror	r26
    70fe:	97 95       	ror	r25
    7100:	87 95       	ror	r24
    7102:	0a 94       	dec	r0
    7104:	d2 f7       	brpl	.-12     	; 0x70fa <__udivdi3+0xf0>
    7106:	84 53       	subi	r24, 0x34	; 52
    7108:	9f 4d       	sbci	r25, 0xDF	; 223
    710a:	dc 01       	movw	r26, r24
    710c:	2c 91       	ld	r18, X
    710e:	80 e2       	ldi	r24, 0x20	; 32
    7110:	90 e0       	ldi	r25, 0x00	; 0
    7112:	a0 e0       	ldi	r26, 0x00	; 0
    7114:	b0 e0       	ldi	r27, 0x00	; 0
    7116:	8e 19       	sub	r24, r14
    7118:	9f 09       	sbc	r25, r15
    711a:	a0 0b       	sbc	r26, r16
    711c:	b1 0b       	sbc	r27, r17
    711e:	7c 01       	movw	r14, r24
    7120:	8d 01       	movw	r16, r26
    7122:	e2 1a       	sub	r14, r18
    7124:	f1 08       	sbc	r15, r1
    7126:	01 09       	sbc	r16, r1
    7128:	11 09       	sbc	r17, r1
    712a:	e1 14       	cp	r14, r1
    712c:	f1 04       	cpc	r15, r1
    712e:	01 05       	cpc	r16, r1
    7130:	11 05       	cpc	r17, r1
    7132:	a1 f1       	breq	.+104    	; 0x719c <__udivdi3+0x192>
    7134:	0e 2c       	mov	r0, r14
    7136:	04 c0       	rjmp	.+8      	; 0x7140 <__udivdi3+0x136>
    7138:	22 0c       	add	r2, r2
    713a:	33 1c       	adc	r3, r3
    713c:	44 1c       	adc	r4, r4
    713e:	55 1c       	adc	r5, r5
    7140:	0a 94       	dec	r0
    7142:	d2 f7       	brpl	.-12     	; 0x7138 <__udivdi3+0x12e>
    7144:	a4 01       	movw	r20, r8
    7146:	93 01       	movw	r18, r6
    7148:	0e 2c       	mov	r0, r14
    714a:	04 c0       	rjmp	.+8      	; 0x7154 <__udivdi3+0x14a>
    714c:	22 0f       	add	r18, r18
    714e:	33 1f       	adc	r19, r19
    7150:	44 1f       	adc	r20, r20
    7152:	55 1f       	adc	r21, r21
    7154:	0a 94       	dec	r0
    7156:	d2 f7       	brpl	.-12     	; 0x714c <__udivdi3+0x142>
    7158:	80 e2       	ldi	r24, 0x20	; 32
    715a:	90 e0       	ldi	r25, 0x00	; 0
    715c:	8e 19       	sub	r24, r14
    715e:	9f 09       	sbc	r25, r15
    7160:	6d a4       	ldd	r6, Y+45	; 0x2d
    7162:	7e a4       	ldd	r7, Y+46	; 0x2e
    7164:	8f a4       	ldd	r8, Y+47	; 0x2f
    7166:	98 a8       	ldd	r9, Y+48	; 0x30
    7168:	04 c0       	rjmp	.+8      	; 0x7172 <__udivdi3+0x168>
    716a:	96 94       	lsr	r9
    716c:	87 94       	ror	r8
    716e:	77 94       	ror	r7
    7170:	67 94       	ror	r6
    7172:	8a 95       	dec	r24
    7174:	d2 f7       	brpl	.-12     	; 0x716a <__udivdi3+0x160>
    7176:	62 2a       	or	r6, r18
    7178:	73 2a       	or	r7, r19
    717a:	84 2a       	or	r8, r20
    717c:	95 2a       	or	r9, r21
    717e:	ad a4       	ldd	r10, Y+45	; 0x2d
    7180:	be a4       	ldd	r11, Y+46	; 0x2e
    7182:	cf a4       	ldd	r12, Y+47	; 0x2f
    7184:	d8 a8       	ldd	r13, Y+48	; 0x30
    7186:	04 c0       	rjmp	.+8      	; 0x7190 <__udivdi3+0x186>
    7188:	aa 0c       	add	r10, r10
    718a:	bb 1c       	adc	r11, r11
    718c:	cc 1c       	adc	r12, r12
    718e:	dd 1c       	adc	r13, r13
    7190:	ea 94       	dec	r14
    7192:	d2 f7       	brpl	.-12     	; 0x7188 <__udivdi3+0x17e>
    7194:	ad a6       	std	Y+45, r10	; 0x2d
    7196:	be a6       	std	Y+46, r11	; 0x2e
    7198:	cf a6       	std	Y+47, r12	; 0x2f
    719a:	d8 aa       	std	Y+48, r13	; 0x30
    719c:	62 01       	movw	r12, r4
    719e:	ee 24       	eor	r14, r14
    71a0:	ff 24       	eor	r15, r15
    71a2:	cd aa       	std	Y+53, r12	; 0x35
    71a4:	de aa       	std	Y+54, r13	; 0x36
    71a6:	ef aa       	std	Y+55, r14	; 0x37
    71a8:	f8 ae       	std	Y+56, r15	; 0x38
    71aa:	92 01       	movw	r18, r4
    71ac:	81 01       	movw	r16, r2
    71ae:	20 70       	andi	r18, 0x00	; 0
    71b0:	30 70       	andi	r19, 0x00	; 0
    71b2:	09 af       	std	Y+57, r16	; 0x39
    71b4:	1a af       	std	Y+58, r17	; 0x3a
    71b6:	2b af       	std	Y+59, r18	; 0x3b
    71b8:	3c af       	std	Y+60, r19	; 0x3c
    71ba:	c4 01       	movw	r24, r8
    71bc:	b3 01       	movw	r22, r6
    71be:	a7 01       	movw	r20, r14
    71c0:	96 01       	movw	r18, r12
    71c2:	0e 94 76 46 	call	0x8cec	; 0x8cec <__udivmodsi4>
    71c6:	7b 01       	movw	r14, r22
    71c8:	8c 01       	movw	r16, r24
    71ca:	c4 01       	movw	r24, r8
    71cc:	b3 01       	movw	r22, r6
    71ce:	2d a9       	ldd	r18, Y+53	; 0x35
    71d0:	3e a9       	ldd	r19, Y+54	; 0x36
    71d2:	4f a9       	ldd	r20, Y+55	; 0x37
    71d4:	58 ad       	ldd	r21, Y+56	; 0x38
    71d6:	0e 94 76 46 	call	0x8cec	; 0x8cec <__udivmodsi4>
    71da:	c9 01       	movw	r24, r18
    71dc:	da 01       	movw	r26, r20
    71de:	3c 01       	movw	r6, r24
    71e0:	4d 01       	movw	r8, r26
    71e2:	c4 01       	movw	r24, r8
    71e4:	b3 01       	movw	r22, r6
    71e6:	29 ad       	ldd	r18, Y+57	; 0x39
    71e8:	3a ad       	ldd	r19, Y+58	; 0x3a
    71ea:	4b ad       	ldd	r20, Y+59	; 0x3b
    71ec:	5c ad       	ldd	r21, Y+60	; 0x3c
    71ee:	0e 94 57 46 	call	0x8cae	; 0x8cae <__mulsi3>
    71f2:	9b 01       	movw	r18, r22
    71f4:	ac 01       	movw	r20, r24
    71f6:	87 01       	movw	r16, r14
    71f8:	ff 24       	eor	r15, r15
    71fa:	ee 24       	eor	r14, r14
    71fc:	ad a4       	ldd	r10, Y+45	; 0x2d
    71fe:	be a4       	ldd	r11, Y+46	; 0x2e
    7200:	cf a4       	ldd	r12, Y+47	; 0x2f
    7202:	d8 a8       	ldd	r13, Y+48	; 0x30
    7204:	c6 01       	movw	r24, r12
    7206:	aa 27       	eor	r26, r26
    7208:	bb 27       	eor	r27, r27
    720a:	57 01       	movw	r10, r14
    720c:	68 01       	movw	r12, r16
    720e:	a8 2a       	or	r10, r24
    7210:	b9 2a       	or	r11, r25
    7212:	ca 2a       	or	r12, r26
    7214:	db 2a       	or	r13, r27
    7216:	a2 16       	cp	r10, r18
    7218:	b3 06       	cpc	r11, r19
    721a:	c4 06       	cpc	r12, r20
    721c:	d5 06       	cpc	r13, r21
    721e:	e0 f4       	brcc	.+56     	; 0x7258 <__udivdi3+0x24e>
    7220:	08 94       	sec
    7222:	61 08       	sbc	r6, r1
    7224:	71 08       	sbc	r7, r1
    7226:	81 08       	sbc	r8, r1
    7228:	91 08       	sbc	r9, r1
    722a:	a2 0c       	add	r10, r2
    722c:	b3 1c       	adc	r11, r3
    722e:	c4 1c       	adc	r12, r4
    7230:	d5 1c       	adc	r13, r5
    7232:	a2 14       	cp	r10, r2
    7234:	b3 04       	cpc	r11, r3
    7236:	c4 04       	cpc	r12, r4
    7238:	d5 04       	cpc	r13, r5
    723a:	70 f0       	brcs	.+28     	; 0x7258 <__udivdi3+0x24e>
    723c:	a2 16       	cp	r10, r18
    723e:	b3 06       	cpc	r11, r19
    7240:	c4 06       	cpc	r12, r20
    7242:	d5 06       	cpc	r13, r21
    7244:	48 f4       	brcc	.+18     	; 0x7258 <__udivdi3+0x24e>
    7246:	08 94       	sec
    7248:	61 08       	sbc	r6, r1
    724a:	71 08       	sbc	r7, r1
    724c:	81 08       	sbc	r8, r1
    724e:	91 08       	sbc	r9, r1
    7250:	a2 0c       	add	r10, r2
    7252:	b3 1c       	adc	r11, r3
    7254:	c4 1c       	adc	r12, r4
    7256:	d5 1c       	adc	r13, r5
    7258:	a2 1a       	sub	r10, r18
    725a:	b3 0a       	sbc	r11, r19
    725c:	c4 0a       	sbc	r12, r20
    725e:	d5 0a       	sbc	r13, r21
    7260:	c6 01       	movw	r24, r12
    7262:	b5 01       	movw	r22, r10
    7264:	2d a9       	ldd	r18, Y+53	; 0x35
    7266:	3e a9       	ldd	r19, Y+54	; 0x36
    7268:	4f a9       	ldd	r20, Y+55	; 0x37
    726a:	58 ad       	ldd	r21, Y+56	; 0x38
    726c:	0e 94 76 46 	call	0x8cec	; 0x8cec <__udivmodsi4>
    7270:	7b 01       	movw	r14, r22
    7272:	8c 01       	movw	r16, r24
    7274:	c6 01       	movw	r24, r12
    7276:	b5 01       	movw	r22, r10
    7278:	2d a9       	ldd	r18, Y+53	; 0x35
    727a:	3e a9       	ldd	r19, Y+54	; 0x36
    727c:	4f a9       	ldd	r20, Y+55	; 0x37
    727e:	58 ad       	ldd	r21, Y+56	; 0x38
    7280:	0e 94 76 46 	call	0x8cec	; 0x8cec <__udivmodsi4>
    7284:	c9 01       	movw	r24, r18
    7286:	da 01       	movw	r26, r20
    7288:	5c 01       	movw	r10, r24
    728a:	6d 01       	movw	r12, r26
    728c:	c6 01       	movw	r24, r12
    728e:	b5 01       	movw	r22, r10
    7290:	29 ad       	ldd	r18, Y+57	; 0x39
    7292:	3a ad       	ldd	r19, Y+58	; 0x3a
    7294:	4b ad       	ldd	r20, Y+59	; 0x3b
    7296:	5c ad       	ldd	r21, Y+60	; 0x3c
    7298:	0e 94 57 46 	call	0x8cae	; 0x8cae <__mulsi3>
    729c:	9b 01       	movw	r18, r22
    729e:	ac 01       	movw	r20, r24
    72a0:	87 01       	movw	r16, r14
    72a2:	ff 24       	eor	r15, r15
    72a4:	ee 24       	eor	r14, r14
    72a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    72a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    72aa:	af a5       	ldd	r26, Y+47	; 0x2f
    72ac:	b8 a9       	ldd	r27, Y+48	; 0x30
    72ae:	a0 70       	andi	r26, 0x00	; 0
    72b0:	b0 70       	andi	r27, 0x00	; 0
    72b2:	e8 2a       	or	r14, r24
    72b4:	f9 2a       	or	r15, r25
    72b6:	0a 2b       	or	r16, r26
    72b8:	1b 2b       	or	r17, r27
    72ba:	e2 16       	cp	r14, r18
    72bc:	f3 06       	cpc	r15, r19
    72be:	04 07       	cpc	r16, r20
    72c0:	15 07       	cpc	r17, r21
    72c2:	c0 f4       	brcc	.+48     	; 0x72f4 <__udivdi3+0x2ea>
    72c4:	08 94       	sec
    72c6:	a1 08       	sbc	r10, r1
    72c8:	b1 08       	sbc	r11, r1
    72ca:	c1 08       	sbc	r12, r1
    72cc:	d1 08       	sbc	r13, r1
    72ce:	e2 0c       	add	r14, r2
    72d0:	f3 1c       	adc	r15, r3
    72d2:	04 1d       	adc	r16, r4
    72d4:	15 1d       	adc	r17, r5
    72d6:	e2 14       	cp	r14, r2
    72d8:	f3 04       	cpc	r15, r3
    72da:	04 05       	cpc	r16, r4
    72dc:	15 05       	cpc	r17, r5
    72de:	50 f0       	brcs	.+20     	; 0x72f4 <__udivdi3+0x2ea>
    72e0:	e2 16       	cp	r14, r18
    72e2:	f3 06       	cpc	r15, r19
    72e4:	04 07       	cpc	r16, r20
    72e6:	15 07       	cpc	r17, r21
    72e8:	28 f4       	brcc	.+10     	; 0x72f4 <__udivdi3+0x2ea>
    72ea:	08 94       	sec
    72ec:	a1 08       	sbc	r10, r1
    72ee:	b1 08       	sbc	r11, r1
    72f0:	c1 08       	sbc	r12, r1
    72f2:	d1 08       	sbc	r13, r1
    72f4:	d3 01       	movw	r26, r6
    72f6:	99 27       	eor	r25, r25
    72f8:	88 27       	eor	r24, r24
    72fa:	86 01       	movw	r16, r12
    72fc:	75 01       	movw	r14, r10
    72fe:	e8 2a       	or	r14, r24
    7300:	f9 2a       	or	r15, r25
    7302:	0a 2b       	or	r16, r26
    7304:	1b 2b       	or	r17, r27
    7306:	e9 aa       	std	Y+49, r14	; 0x31
    7308:	fa aa       	std	Y+50, r15	; 0x32
    730a:	0b ab       	std	Y+51, r16	; 0x33
    730c:	1c ab       	std	Y+52, r17	; 0x34
    730e:	cf c4       	rjmp	.+2462   	; 0x7cae <__udivdi3+0xca4>
    7310:	21 14       	cp	r2, r1
    7312:	31 04       	cpc	r3, r1
    7314:	41 04       	cpc	r4, r1
    7316:	51 04       	cpc	r5, r1
    7318:	71 f4       	brne	.+28     	; 0x7336 <__udivdi3+0x32c>
    731a:	61 e0       	ldi	r22, 0x01	; 1
    731c:	70 e0       	ldi	r23, 0x00	; 0
    731e:	80 e0       	ldi	r24, 0x00	; 0
    7320:	90 e0       	ldi	r25, 0x00	; 0
    7322:	20 e0       	ldi	r18, 0x00	; 0
    7324:	30 e0       	ldi	r19, 0x00	; 0
    7326:	40 e0       	ldi	r20, 0x00	; 0
    7328:	50 e0       	ldi	r21, 0x00	; 0
    732a:	0e 94 76 46 	call	0x8cec	; 0x8cec <__udivmodsi4>
    732e:	c9 01       	movw	r24, r18
    7330:	da 01       	movw	r26, r20
    7332:	1c 01       	movw	r2, r24
    7334:	2d 01       	movw	r4, r26
    7336:	00 e0       	ldi	r16, 0x00	; 0
    7338:	20 16       	cp	r2, r16
    733a:	00 e0       	ldi	r16, 0x00	; 0
    733c:	30 06       	cpc	r3, r16
    733e:	01 e0       	ldi	r16, 0x01	; 1
    7340:	40 06       	cpc	r4, r16
    7342:	00 e0       	ldi	r16, 0x00	; 0
    7344:	50 06       	cpc	r5, r16
    7346:	88 f4       	brcc	.+34     	; 0x736a <__udivdi3+0x360>
    7348:	1f ef       	ldi	r17, 0xFF	; 255
    734a:	21 16       	cp	r2, r17
    734c:	31 04       	cpc	r3, r1
    734e:	41 04       	cpc	r4, r1
    7350:	51 04       	cpc	r5, r1
    7352:	31 f0       	breq	.+12     	; 0x7360 <__udivdi3+0x356>
    7354:	28 f0       	brcs	.+10     	; 0x7360 <__udivdi3+0x356>
    7356:	48 e0       	ldi	r20, 0x08	; 8
    7358:	50 e0       	ldi	r21, 0x00	; 0
    735a:	60 e0       	ldi	r22, 0x00	; 0
    735c:	70 e0       	ldi	r23, 0x00	; 0
    735e:	17 c0       	rjmp	.+46     	; 0x738e <__udivdi3+0x384>
    7360:	40 e0       	ldi	r20, 0x00	; 0
    7362:	50 e0       	ldi	r21, 0x00	; 0
    7364:	60 e0       	ldi	r22, 0x00	; 0
    7366:	70 e0       	ldi	r23, 0x00	; 0
    7368:	12 c0       	rjmp	.+36     	; 0x738e <__udivdi3+0x384>
    736a:	20 e0       	ldi	r18, 0x00	; 0
    736c:	22 16       	cp	r2, r18
    736e:	20 e0       	ldi	r18, 0x00	; 0
    7370:	32 06       	cpc	r3, r18
    7372:	20 e0       	ldi	r18, 0x00	; 0
    7374:	42 06       	cpc	r4, r18
    7376:	21 e0       	ldi	r18, 0x01	; 1
    7378:	52 06       	cpc	r5, r18
    737a:	28 f0       	brcs	.+10     	; 0x7386 <__udivdi3+0x37c>
    737c:	48 e1       	ldi	r20, 0x18	; 24
    737e:	50 e0       	ldi	r21, 0x00	; 0
    7380:	60 e0       	ldi	r22, 0x00	; 0
    7382:	70 e0       	ldi	r23, 0x00	; 0
    7384:	04 c0       	rjmp	.+8      	; 0x738e <__udivdi3+0x384>
    7386:	40 e1       	ldi	r20, 0x10	; 16
    7388:	50 e0       	ldi	r21, 0x00	; 0
    738a:	60 e0       	ldi	r22, 0x00	; 0
    738c:	70 e0       	ldi	r23, 0x00	; 0
    738e:	d2 01       	movw	r26, r4
    7390:	c1 01       	movw	r24, r2
    7392:	04 2e       	mov	r0, r20
    7394:	04 c0       	rjmp	.+8      	; 0x739e <__udivdi3+0x394>
    7396:	b6 95       	lsr	r27
    7398:	a7 95       	ror	r26
    739a:	97 95       	ror	r25
    739c:	87 95       	ror	r24
    739e:	0a 94       	dec	r0
    73a0:	d2 f7       	brpl	.-12     	; 0x7396 <__udivdi3+0x38c>
    73a2:	84 53       	subi	r24, 0x34	; 52
    73a4:	9f 4d       	sbci	r25, 0xDF	; 223
    73a6:	dc 01       	movw	r26, r24
    73a8:	2c 91       	ld	r18, X
    73aa:	e0 e2       	ldi	r30, 0x20	; 32
    73ac:	ee 2e       	mov	r14, r30
    73ae:	f1 2c       	mov	r15, r1
    73b0:	01 2d       	mov	r16, r1
    73b2:	11 2d       	mov	r17, r1
    73b4:	d8 01       	movw	r26, r16
    73b6:	c7 01       	movw	r24, r14
    73b8:	84 1b       	sub	r24, r20
    73ba:	95 0b       	sbc	r25, r21
    73bc:	a6 0b       	sbc	r26, r22
    73be:	b7 0b       	sbc	r27, r23
    73c0:	82 1b       	sub	r24, r18
    73c2:	91 09       	sbc	r25, r1
    73c4:	a1 09       	sbc	r26, r1
    73c6:	b1 09       	sbc	r27, r1
    73c8:	00 97       	sbiw	r24, 0x00	; 0
    73ca:	a1 05       	cpc	r26, r1
    73cc:	b1 05       	cpc	r27, r1
    73ce:	61 f4       	brne	.+24     	; 0x73e8 <__udivdi3+0x3de>
    73d0:	64 01       	movw	r12, r8
    73d2:	53 01       	movw	r10, r6
    73d4:	a2 18       	sub	r10, r2
    73d6:	b3 08       	sbc	r11, r3
    73d8:	c4 08       	sbc	r12, r4
    73da:	d5 08       	sbc	r13, r5
    73dc:	31 e0       	ldi	r19, 0x01	; 1
    73de:	63 2e       	mov	r6, r19
    73e0:	71 2c       	mov	r7, r1
    73e2:	81 2c       	mov	r8, r1
    73e4:	91 2c       	mov	r9, r1
    73e6:	1e c1       	rjmp	.+572    	; 0x7624 <__udivdi3+0x61a>
    73e8:	6f 96       	adiw	r28, 0x1f	; 31
    73ea:	8f af       	std	Y+63, r24	; 0x3f
    73ec:	6f 97       	sbiw	r28, 0x1f	; 31
    73ee:	08 2e       	mov	r0, r24
    73f0:	04 c0       	rjmp	.+8      	; 0x73fa <__udivdi3+0x3f0>
    73f2:	22 0c       	add	r2, r2
    73f4:	33 1c       	adc	r3, r3
    73f6:	44 1c       	adc	r4, r4
    73f8:	55 1c       	adc	r5, r5
    73fa:	0a 94       	dec	r0
    73fc:	d2 f7       	brpl	.-12     	; 0x73f2 <__udivdi3+0x3e8>
    73fe:	ee 2d       	mov	r30, r14
    7400:	e8 1b       	sub	r30, r24
    7402:	64 01       	movw	r12, r8
    7404:	53 01       	movw	r10, r6
    7406:	0e 2e       	mov	r0, r30
    7408:	04 c0       	rjmp	.+8      	; 0x7412 <__udivdi3+0x408>
    740a:	d6 94       	lsr	r13
    740c:	c7 94       	ror	r12
    740e:	b7 94       	ror	r11
    7410:	a7 94       	ror	r10
    7412:	0a 94       	dec	r0
    7414:	d2 f7       	brpl	.-12     	; 0x740a <__udivdi3+0x400>
    7416:	a4 01       	movw	r20, r8
    7418:	93 01       	movw	r18, r6
    741a:	6f 96       	adiw	r28, 0x1f	; 31
    741c:	0f ac       	ldd	r0, Y+63	; 0x3f
    741e:	6f 97       	sbiw	r28, 0x1f	; 31
    7420:	04 c0       	rjmp	.+8      	; 0x742a <__udivdi3+0x420>
    7422:	22 0f       	add	r18, r18
    7424:	33 1f       	adc	r19, r19
    7426:	44 1f       	adc	r20, r20
    7428:	55 1f       	adc	r21, r21
    742a:	0a 94       	dec	r0
    742c:	d2 f7       	brpl	.-12     	; 0x7422 <__udivdi3+0x418>
    742e:	6d a4       	ldd	r6, Y+45	; 0x2d
    7430:	7e a4       	ldd	r7, Y+46	; 0x2e
    7432:	8f a4       	ldd	r8, Y+47	; 0x2f
    7434:	98 a8       	ldd	r9, Y+48	; 0x30
    7436:	0e 2e       	mov	r0, r30
    7438:	04 c0       	rjmp	.+8      	; 0x7442 <__udivdi3+0x438>
    743a:	96 94       	lsr	r9
    743c:	87 94       	ror	r8
    743e:	77 94       	ror	r7
    7440:	67 94       	ror	r6
    7442:	0a 94       	dec	r0
    7444:	d2 f7       	brpl	.-12     	; 0x743a <__udivdi3+0x430>
    7446:	84 01       	movw	r16, r8
    7448:	73 01       	movw	r14, r6
    744a:	e2 2a       	or	r14, r18
    744c:	f3 2a       	or	r15, r19
    744e:	04 2b       	or	r16, r20
    7450:	15 2b       	or	r17, r21
    7452:	e9 a6       	std	Y+41, r14	; 0x29
    7454:	fa a6       	std	Y+42, r15	; 0x2a
    7456:	0b a7       	std	Y+43, r16	; 0x2b
    7458:	1c a7       	std	Y+44, r17	; 0x2c
    745a:	32 01       	movw	r6, r4
    745c:	88 24       	eor	r8, r8
    745e:	99 24       	eor	r9, r9
    7460:	92 01       	movw	r18, r4
    7462:	81 01       	movw	r16, r2
    7464:	20 70       	andi	r18, 0x00	; 0
    7466:	30 70       	andi	r19, 0x00	; 0
    7468:	21 96       	adiw	r28, 0x01	; 1
    746a:	0c af       	std	Y+60, r16	; 0x3c
    746c:	1d af       	std	Y+61, r17	; 0x3d
    746e:	2e af       	std	Y+62, r18	; 0x3e
    7470:	3f af       	std	Y+63, r19	; 0x3f
    7472:	21 97       	sbiw	r28, 0x01	; 1
    7474:	c6 01       	movw	r24, r12
    7476:	b5 01       	movw	r22, r10
    7478:	a4 01       	movw	r20, r8
    747a:	93 01       	movw	r18, r6
    747c:	0e 94 76 46 	call	0x8cec	; 0x8cec <__udivmodsi4>
    7480:	7b 01       	movw	r14, r22
    7482:	8c 01       	movw	r16, r24
    7484:	c6 01       	movw	r24, r12
    7486:	b5 01       	movw	r22, r10
    7488:	a4 01       	movw	r20, r8
    748a:	93 01       	movw	r18, r6
    748c:	0e 94 76 46 	call	0x8cec	; 0x8cec <__udivmodsi4>
    7490:	c9 01       	movw	r24, r18
    7492:	da 01       	movw	r26, r20
    7494:	25 96       	adiw	r28, 0x05	; 5
    7496:	8c af       	std	Y+60, r24	; 0x3c
    7498:	9d af       	std	Y+61, r25	; 0x3d
    749a:	ae af       	std	Y+62, r26	; 0x3e
    749c:	bf af       	std	Y+63, r27	; 0x3f
    749e:	25 97       	sbiw	r28, 0x05	; 5
    74a0:	bc 01       	movw	r22, r24
    74a2:	cd 01       	movw	r24, r26
    74a4:	21 96       	adiw	r28, 0x01	; 1
    74a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    74a8:	3d ad       	ldd	r19, Y+61	; 0x3d
    74aa:	4e ad       	ldd	r20, Y+62	; 0x3e
    74ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    74ae:	21 97       	sbiw	r28, 0x01	; 1
    74b0:	0e 94 57 46 	call	0x8cae	; 0x8cae <__mulsi3>
    74b4:	9b 01       	movw	r18, r22
    74b6:	ac 01       	movw	r20, r24
    74b8:	87 01       	movw	r16, r14
    74ba:	ff 24       	eor	r15, r15
    74bc:	ee 24       	eor	r14, r14
    74be:	a9 a4       	ldd	r10, Y+41	; 0x29
    74c0:	ba a4       	ldd	r11, Y+42	; 0x2a
    74c2:	cb a4       	ldd	r12, Y+43	; 0x2b
    74c4:	dc a4       	ldd	r13, Y+44	; 0x2c
    74c6:	c6 01       	movw	r24, r12
    74c8:	aa 27       	eor	r26, r26
    74ca:	bb 27       	eor	r27, r27
    74cc:	5c 01       	movw	r10, r24
    74ce:	6d 01       	movw	r12, r26
    74d0:	ae 28       	or	r10, r14
    74d2:	bf 28       	or	r11, r15
    74d4:	c0 2a       	or	r12, r16
    74d6:	d1 2a       	or	r13, r17
    74d8:	a2 16       	cp	r10, r18
    74da:	b3 06       	cpc	r11, r19
    74dc:	c4 06       	cpc	r12, r20
    74de:	d5 06       	cpc	r13, r21
    74e0:	60 f5       	brcc	.+88     	; 0x753a <__udivdi3+0x530>
    74e2:	25 96       	adiw	r28, 0x05	; 5
    74e4:	6c ad       	ldd	r22, Y+60	; 0x3c
    74e6:	7d ad       	ldd	r23, Y+61	; 0x3d
    74e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    74ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    74ec:	25 97       	sbiw	r28, 0x05	; 5
    74ee:	61 50       	subi	r22, 0x01	; 1
    74f0:	70 40       	sbci	r23, 0x00	; 0
    74f2:	80 40       	sbci	r24, 0x00	; 0
    74f4:	90 40       	sbci	r25, 0x00	; 0
    74f6:	25 96       	adiw	r28, 0x05	; 5
    74f8:	6c af       	std	Y+60, r22	; 0x3c
    74fa:	7d af       	std	Y+61, r23	; 0x3d
    74fc:	8e af       	std	Y+62, r24	; 0x3e
    74fe:	9f af       	std	Y+63, r25	; 0x3f
    7500:	25 97       	sbiw	r28, 0x05	; 5
    7502:	a2 0c       	add	r10, r2
    7504:	b3 1c       	adc	r11, r3
    7506:	c4 1c       	adc	r12, r4
    7508:	d5 1c       	adc	r13, r5
    750a:	a2 14       	cp	r10, r2
    750c:	b3 04       	cpc	r11, r3
    750e:	c4 04       	cpc	r12, r4
    7510:	d5 04       	cpc	r13, r5
    7512:	98 f0       	brcs	.+38     	; 0x753a <__udivdi3+0x530>
    7514:	a2 16       	cp	r10, r18
    7516:	b3 06       	cpc	r11, r19
    7518:	c4 06       	cpc	r12, r20
    751a:	d5 06       	cpc	r13, r21
    751c:	70 f4       	brcc	.+28     	; 0x753a <__udivdi3+0x530>
    751e:	61 50       	subi	r22, 0x01	; 1
    7520:	70 40       	sbci	r23, 0x00	; 0
    7522:	80 40       	sbci	r24, 0x00	; 0
    7524:	90 40       	sbci	r25, 0x00	; 0
    7526:	25 96       	adiw	r28, 0x05	; 5
    7528:	6c af       	std	Y+60, r22	; 0x3c
    752a:	7d af       	std	Y+61, r23	; 0x3d
    752c:	8e af       	std	Y+62, r24	; 0x3e
    752e:	9f af       	std	Y+63, r25	; 0x3f
    7530:	25 97       	sbiw	r28, 0x05	; 5
    7532:	a2 0c       	add	r10, r2
    7534:	b3 1c       	adc	r11, r3
    7536:	c4 1c       	adc	r12, r4
    7538:	d5 1c       	adc	r13, r5
    753a:	a2 1a       	sub	r10, r18
    753c:	b3 0a       	sbc	r11, r19
    753e:	c4 0a       	sbc	r12, r20
    7540:	d5 0a       	sbc	r13, r21
    7542:	c6 01       	movw	r24, r12
    7544:	b5 01       	movw	r22, r10
    7546:	a4 01       	movw	r20, r8
    7548:	93 01       	movw	r18, r6
    754a:	0e 94 76 46 	call	0x8cec	; 0x8cec <__udivmodsi4>
    754e:	7b 01       	movw	r14, r22
    7550:	8c 01       	movw	r16, r24
    7552:	c6 01       	movw	r24, r12
    7554:	b5 01       	movw	r22, r10
    7556:	a4 01       	movw	r20, r8
    7558:	93 01       	movw	r18, r6
    755a:	0e 94 76 46 	call	0x8cec	; 0x8cec <__udivmodsi4>
    755e:	c9 01       	movw	r24, r18
    7560:	da 01       	movw	r26, r20
    7562:	3c 01       	movw	r6, r24
    7564:	4d 01       	movw	r8, r26
    7566:	c4 01       	movw	r24, r8
    7568:	b3 01       	movw	r22, r6
    756a:	21 96       	adiw	r28, 0x01	; 1
    756c:	2c ad       	ldd	r18, Y+60	; 0x3c
    756e:	3d ad       	ldd	r19, Y+61	; 0x3d
    7570:	4e ad       	ldd	r20, Y+62	; 0x3e
    7572:	5f ad       	ldd	r21, Y+63	; 0x3f
    7574:	21 97       	sbiw	r28, 0x01	; 1
    7576:	0e 94 57 46 	call	0x8cae	; 0x8cae <__mulsi3>
    757a:	9b 01       	movw	r18, r22
    757c:	ac 01       	movw	r20, r24
    757e:	87 01       	movw	r16, r14
    7580:	ff 24       	eor	r15, r15
    7582:	ee 24       	eor	r14, r14
    7584:	89 a5       	ldd	r24, Y+41	; 0x29
    7586:	9a a5       	ldd	r25, Y+42	; 0x2a
    7588:	ab a5       	ldd	r26, Y+43	; 0x2b
    758a:	bc a5       	ldd	r27, Y+44	; 0x2c
    758c:	a0 70       	andi	r26, 0x00	; 0
    758e:	b0 70       	andi	r27, 0x00	; 0
    7590:	57 01       	movw	r10, r14
    7592:	68 01       	movw	r12, r16
    7594:	a8 2a       	or	r10, r24
    7596:	b9 2a       	or	r11, r25
    7598:	ca 2a       	or	r12, r26
    759a:	db 2a       	or	r13, r27
    759c:	a2 16       	cp	r10, r18
    759e:	b3 06       	cpc	r11, r19
    75a0:	c4 06       	cpc	r12, r20
    75a2:	d5 06       	cpc	r13, r21
    75a4:	e0 f4       	brcc	.+56     	; 0x75de <__udivdi3+0x5d4>
    75a6:	08 94       	sec
    75a8:	61 08       	sbc	r6, r1
    75aa:	71 08       	sbc	r7, r1
    75ac:	81 08       	sbc	r8, r1
    75ae:	91 08       	sbc	r9, r1
    75b0:	a2 0c       	add	r10, r2
    75b2:	b3 1c       	adc	r11, r3
    75b4:	c4 1c       	adc	r12, r4
    75b6:	d5 1c       	adc	r13, r5
    75b8:	a2 14       	cp	r10, r2
    75ba:	b3 04       	cpc	r11, r3
    75bc:	c4 04       	cpc	r12, r4
    75be:	d5 04       	cpc	r13, r5
    75c0:	70 f0       	brcs	.+28     	; 0x75de <__udivdi3+0x5d4>
    75c2:	a2 16       	cp	r10, r18
    75c4:	b3 06       	cpc	r11, r19
    75c6:	c4 06       	cpc	r12, r20
    75c8:	d5 06       	cpc	r13, r21
    75ca:	48 f4       	brcc	.+18     	; 0x75de <__udivdi3+0x5d4>
    75cc:	08 94       	sec
    75ce:	61 08       	sbc	r6, r1
    75d0:	71 08       	sbc	r7, r1
    75d2:	81 08       	sbc	r8, r1
    75d4:	91 08       	sbc	r9, r1
    75d6:	a2 0c       	add	r10, r2
    75d8:	b3 1c       	adc	r11, r3
    75da:	c4 1c       	adc	r12, r4
    75dc:	d5 1c       	adc	r13, r5
    75de:	8d a5       	ldd	r24, Y+45	; 0x2d
    75e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    75e2:	af a5       	ldd	r26, Y+47	; 0x2f
    75e4:	b8 a9       	ldd	r27, Y+48	; 0x30
    75e6:	6f 96       	adiw	r28, 0x1f	; 31
    75e8:	0f ac       	ldd	r0, Y+63	; 0x3f
    75ea:	6f 97       	sbiw	r28, 0x1f	; 31
    75ec:	04 c0       	rjmp	.+8      	; 0x75f6 <__udivdi3+0x5ec>
    75ee:	88 0f       	add	r24, r24
    75f0:	99 1f       	adc	r25, r25
    75f2:	aa 1f       	adc	r26, r26
    75f4:	bb 1f       	adc	r27, r27
    75f6:	0a 94       	dec	r0
    75f8:	d2 f7       	brpl	.-12     	; 0x75ee <__udivdi3+0x5e4>
    75fa:	8d a7       	std	Y+45, r24	; 0x2d
    75fc:	9e a7       	std	Y+46, r25	; 0x2e
    75fe:	af a7       	std	Y+47, r26	; 0x2f
    7600:	b8 ab       	std	Y+48, r27	; 0x30
    7602:	a2 1a       	sub	r10, r18
    7604:	b3 0a       	sbc	r11, r19
    7606:	c4 0a       	sbc	r12, r20
    7608:	d5 0a       	sbc	r13, r21
    760a:	25 96       	adiw	r28, 0x05	; 5
    760c:	ec ac       	ldd	r14, Y+60	; 0x3c
    760e:	fd ac       	ldd	r15, Y+61	; 0x3d
    7610:	0e ad       	ldd	r16, Y+62	; 0x3e
    7612:	1f ad       	ldd	r17, Y+63	; 0x3f
    7614:	25 97       	sbiw	r28, 0x05	; 5
    7616:	d7 01       	movw	r26, r14
    7618:	99 27       	eor	r25, r25
    761a:	88 27       	eor	r24, r24
    761c:	68 2a       	or	r6, r24
    761e:	79 2a       	or	r7, r25
    7620:	8a 2a       	or	r8, r26
    7622:	9b 2a       	or	r9, r27
    7624:	82 01       	movw	r16, r4
    7626:	22 27       	eor	r18, r18
    7628:	33 27       	eor	r19, r19
    762a:	29 96       	adiw	r28, 0x09	; 9
    762c:	0c af       	std	Y+60, r16	; 0x3c
    762e:	1d af       	std	Y+61, r17	; 0x3d
    7630:	2e af       	std	Y+62, r18	; 0x3e
    7632:	3f af       	std	Y+63, r19	; 0x3f
    7634:	29 97       	sbiw	r28, 0x09	; 9
    7636:	a2 01       	movw	r20, r4
    7638:	91 01       	movw	r18, r2
    763a:	40 70       	andi	r20, 0x00	; 0
    763c:	50 70       	andi	r21, 0x00	; 0
    763e:	2d 96       	adiw	r28, 0x0d	; 13
    7640:	2c af       	std	Y+60, r18	; 0x3c
    7642:	3d af       	std	Y+61, r19	; 0x3d
    7644:	4e af       	std	Y+62, r20	; 0x3e
    7646:	5f af       	std	Y+63, r21	; 0x3f
    7648:	2d 97       	sbiw	r28, 0x0d	; 13
    764a:	c6 01       	movw	r24, r12
    764c:	b5 01       	movw	r22, r10
    764e:	29 96       	adiw	r28, 0x09	; 9
    7650:	2c ad       	ldd	r18, Y+60	; 0x3c
    7652:	3d ad       	ldd	r19, Y+61	; 0x3d
    7654:	4e ad       	ldd	r20, Y+62	; 0x3e
    7656:	5f ad       	ldd	r21, Y+63	; 0x3f
    7658:	29 97       	sbiw	r28, 0x09	; 9
    765a:	0e 94 76 46 	call	0x8cec	; 0x8cec <__udivmodsi4>
    765e:	7b 01       	movw	r14, r22
    7660:	8c 01       	movw	r16, r24
    7662:	c6 01       	movw	r24, r12
    7664:	b5 01       	movw	r22, r10
    7666:	29 96       	adiw	r28, 0x09	; 9
    7668:	2c ad       	ldd	r18, Y+60	; 0x3c
    766a:	3d ad       	ldd	r19, Y+61	; 0x3d
    766c:	4e ad       	ldd	r20, Y+62	; 0x3e
    766e:	5f ad       	ldd	r21, Y+63	; 0x3f
    7670:	29 97       	sbiw	r28, 0x09	; 9
    7672:	0e 94 76 46 	call	0x8cec	; 0x8cec <__udivmodsi4>
    7676:	c9 01       	movw	r24, r18
    7678:	da 01       	movw	r26, r20
    767a:	61 96       	adiw	r28, 0x11	; 17
    767c:	8c af       	std	Y+60, r24	; 0x3c
    767e:	9d af       	std	Y+61, r25	; 0x3d
    7680:	ae af       	std	Y+62, r26	; 0x3e
    7682:	bf af       	std	Y+63, r27	; 0x3f
    7684:	61 97       	sbiw	r28, 0x11	; 17
    7686:	bc 01       	movw	r22, r24
    7688:	cd 01       	movw	r24, r26
    768a:	2d 96       	adiw	r28, 0x0d	; 13
    768c:	2c ad       	ldd	r18, Y+60	; 0x3c
    768e:	3d ad       	ldd	r19, Y+61	; 0x3d
    7690:	4e ad       	ldd	r20, Y+62	; 0x3e
    7692:	5f ad       	ldd	r21, Y+63	; 0x3f
    7694:	2d 97       	sbiw	r28, 0x0d	; 13
    7696:	0e 94 57 46 	call	0x8cae	; 0x8cae <__mulsi3>
    769a:	9b 01       	movw	r18, r22
    769c:	ac 01       	movw	r20, r24
    769e:	87 01       	movw	r16, r14
    76a0:	ff 24       	eor	r15, r15
    76a2:	ee 24       	eor	r14, r14
    76a4:	ad a4       	ldd	r10, Y+45	; 0x2d
    76a6:	be a4       	ldd	r11, Y+46	; 0x2e
    76a8:	cf a4       	ldd	r12, Y+47	; 0x2f
    76aa:	d8 a8       	ldd	r13, Y+48	; 0x30
    76ac:	c6 01       	movw	r24, r12
    76ae:	aa 27       	eor	r26, r26
    76b0:	bb 27       	eor	r27, r27
    76b2:	57 01       	movw	r10, r14
    76b4:	68 01       	movw	r12, r16
    76b6:	a8 2a       	or	r10, r24
    76b8:	b9 2a       	or	r11, r25
    76ba:	ca 2a       	or	r12, r26
    76bc:	db 2a       	or	r13, r27
    76be:	a2 16       	cp	r10, r18
    76c0:	b3 06       	cpc	r11, r19
    76c2:	c4 06       	cpc	r12, r20
    76c4:	d5 06       	cpc	r13, r21
    76c6:	60 f5       	brcc	.+88     	; 0x7720 <__udivdi3+0x716>
    76c8:	61 96       	adiw	r28, 0x11	; 17
    76ca:	6c ad       	ldd	r22, Y+60	; 0x3c
    76cc:	7d ad       	ldd	r23, Y+61	; 0x3d
    76ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    76d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    76d2:	61 97       	sbiw	r28, 0x11	; 17
    76d4:	61 50       	subi	r22, 0x01	; 1
    76d6:	70 40       	sbci	r23, 0x00	; 0
    76d8:	80 40       	sbci	r24, 0x00	; 0
    76da:	90 40       	sbci	r25, 0x00	; 0
    76dc:	61 96       	adiw	r28, 0x11	; 17
    76de:	6c af       	std	Y+60, r22	; 0x3c
    76e0:	7d af       	std	Y+61, r23	; 0x3d
    76e2:	8e af       	std	Y+62, r24	; 0x3e
    76e4:	9f af       	std	Y+63, r25	; 0x3f
    76e6:	61 97       	sbiw	r28, 0x11	; 17
    76e8:	a2 0c       	add	r10, r2
    76ea:	b3 1c       	adc	r11, r3
    76ec:	c4 1c       	adc	r12, r4
    76ee:	d5 1c       	adc	r13, r5
    76f0:	a2 14       	cp	r10, r2
    76f2:	b3 04       	cpc	r11, r3
    76f4:	c4 04       	cpc	r12, r4
    76f6:	d5 04       	cpc	r13, r5
    76f8:	98 f0       	brcs	.+38     	; 0x7720 <__udivdi3+0x716>
    76fa:	a2 16       	cp	r10, r18
    76fc:	b3 06       	cpc	r11, r19
    76fe:	c4 06       	cpc	r12, r20
    7700:	d5 06       	cpc	r13, r21
    7702:	70 f4       	brcc	.+28     	; 0x7720 <__udivdi3+0x716>
    7704:	61 50       	subi	r22, 0x01	; 1
    7706:	70 40       	sbci	r23, 0x00	; 0
    7708:	80 40       	sbci	r24, 0x00	; 0
    770a:	90 40       	sbci	r25, 0x00	; 0
    770c:	61 96       	adiw	r28, 0x11	; 17
    770e:	6c af       	std	Y+60, r22	; 0x3c
    7710:	7d af       	std	Y+61, r23	; 0x3d
    7712:	8e af       	std	Y+62, r24	; 0x3e
    7714:	9f af       	std	Y+63, r25	; 0x3f
    7716:	61 97       	sbiw	r28, 0x11	; 17
    7718:	a2 0c       	add	r10, r2
    771a:	b3 1c       	adc	r11, r3
    771c:	c4 1c       	adc	r12, r4
    771e:	d5 1c       	adc	r13, r5
    7720:	a2 1a       	sub	r10, r18
    7722:	b3 0a       	sbc	r11, r19
    7724:	c4 0a       	sbc	r12, r20
    7726:	d5 0a       	sbc	r13, r21
    7728:	c6 01       	movw	r24, r12
    772a:	b5 01       	movw	r22, r10
    772c:	29 96       	adiw	r28, 0x09	; 9
    772e:	2c ad       	ldd	r18, Y+60	; 0x3c
    7730:	3d ad       	ldd	r19, Y+61	; 0x3d
    7732:	4e ad       	ldd	r20, Y+62	; 0x3e
    7734:	5f ad       	ldd	r21, Y+63	; 0x3f
    7736:	29 97       	sbiw	r28, 0x09	; 9
    7738:	0e 94 76 46 	call	0x8cec	; 0x8cec <__udivmodsi4>
    773c:	7b 01       	movw	r14, r22
    773e:	8c 01       	movw	r16, r24
    7740:	c6 01       	movw	r24, r12
    7742:	b5 01       	movw	r22, r10
    7744:	29 96       	adiw	r28, 0x09	; 9
    7746:	2c ad       	ldd	r18, Y+60	; 0x3c
    7748:	3d ad       	ldd	r19, Y+61	; 0x3d
    774a:	4e ad       	ldd	r20, Y+62	; 0x3e
    774c:	5f ad       	ldd	r21, Y+63	; 0x3f
    774e:	29 97       	sbiw	r28, 0x09	; 9
    7750:	0e 94 76 46 	call	0x8cec	; 0x8cec <__udivmodsi4>
    7754:	c9 01       	movw	r24, r18
    7756:	da 01       	movw	r26, r20
    7758:	5c 01       	movw	r10, r24
    775a:	6d 01       	movw	r12, r26
    775c:	c6 01       	movw	r24, r12
    775e:	b5 01       	movw	r22, r10
    7760:	2d 96       	adiw	r28, 0x0d	; 13
    7762:	2c ad       	ldd	r18, Y+60	; 0x3c
    7764:	3d ad       	ldd	r19, Y+61	; 0x3d
    7766:	4e ad       	ldd	r20, Y+62	; 0x3e
    7768:	5f ad       	ldd	r21, Y+63	; 0x3f
    776a:	2d 97       	sbiw	r28, 0x0d	; 13
    776c:	0e 94 57 46 	call	0x8cae	; 0x8cae <__mulsi3>
    7770:	9b 01       	movw	r18, r22
    7772:	ac 01       	movw	r20, r24
    7774:	87 01       	movw	r16, r14
    7776:	ff 24       	eor	r15, r15
    7778:	ee 24       	eor	r14, r14
    777a:	8d a5       	ldd	r24, Y+45	; 0x2d
    777c:	9e a5       	ldd	r25, Y+46	; 0x2e
    777e:	af a5       	ldd	r26, Y+47	; 0x2f
    7780:	b8 a9       	ldd	r27, Y+48	; 0x30
    7782:	a0 70       	andi	r26, 0x00	; 0
    7784:	b0 70       	andi	r27, 0x00	; 0
    7786:	e8 2a       	or	r14, r24
    7788:	f9 2a       	or	r15, r25
    778a:	0a 2b       	or	r16, r26
    778c:	1b 2b       	or	r17, r27
    778e:	e2 16       	cp	r14, r18
    7790:	f3 06       	cpc	r15, r19
    7792:	04 07       	cpc	r16, r20
    7794:	15 07       	cpc	r17, r21
    7796:	c0 f4       	brcc	.+48     	; 0x77c8 <__udivdi3+0x7be>
    7798:	08 94       	sec
    779a:	a1 08       	sbc	r10, r1
    779c:	b1 08       	sbc	r11, r1
    779e:	c1 08       	sbc	r12, r1
    77a0:	d1 08       	sbc	r13, r1
    77a2:	e2 0c       	add	r14, r2
    77a4:	f3 1c       	adc	r15, r3
    77a6:	04 1d       	adc	r16, r4
    77a8:	15 1d       	adc	r17, r5
    77aa:	e2 14       	cp	r14, r2
    77ac:	f3 04       	cpc	r15, r3
    77ae:	04 05       	cpc	r16, r4
    77b0:	15 05       	cpc	r17, r5
    77b2:	50 f0       	brcs	.+20     	; 0x77c8 <__udivdi3+0x7be>
    77b4:	e2 16       	cp	r14, r18
    77b6:	f3 06       	cpc	r15, r19
    77b8:	04 07       	cpc	r16, r20
    77ba:	15 07       	cpc	r17, r21
    77bc:	28 f4       	brcc	.+10     	; 0x77c8 <__udivdi3+0x7be>
    77be:	08 94       	sec
    77c0:	a1 08       	sbc	r10, r1
    77c2:	b1 08       	sbc	r11, r1
    77c4:	c1 08       	sbc	r12, r1
    77c6:	d1 08       	sbc	r13, r1
    77c8:	61 96       	adiw	r28, 0x11	; 17
    77ca:	ec ac       	ldd	r14, Y+60	; 0x3c
    77cc:	fd ac       	ldd	r15, Y+61	; 0x3d
    77ce:	0e ad       	ldd	r16, Y+62	; 0x3e
    77d0:	1f ad       	ldd	r17, Y+63	; 0x3f
    77d2:	61 97       	sbiw	r28, 0x11	; 17
    77d4:	d7 01       	movw	r26, r14
    77d6:	99 27       	eor	r25, r25
    77d8:	88 27       	eor	r24, r24
    77da:	96 01       	movw	r18, r12
    77dc:	85 01       	movw	r16, r10
    77de:	08 2b       	or	r16, r24
    77e0:	19 2b       	or	r17, r25
    77e2:	2a 2b       	or	r18, r26
    77e4:	3b 2b       	or	r19, r27
    77e6:	09 ab       	std	Y+49, r16	; 0x31
    77e8:	1a ab       	std	Y+50, r17	; 0x32
    77ea:	2b ab       	std	Y+51, r18	; 0x33
    77ec:	3c ab       	std	Y+52, r19	; 0x34
    77ee:	62 c2       	rjmp	.+1220   	; 0x7cb4 <__udivdi3+0xcaa>
    77f0:	6e 14       	cp	r6, r14
    77f2:	7f 04       	cpc	r7, r15
    77f4:	80 06       	cpc	r8, r16
    77f6:	91 06       	cpc	r9, r17
    77f8:	08 f4       	brcc	.+2      	; 0x77fc <__udivdi3+0x7f2>
    77fa:	51 c2       	rjmp	.+1186   	; 0x7c9e <__udivdi3+0xc94>
    77fc:	20 e0       	ldi	r18, 0x00	; 0
    77fe:	e2 16       	cp	r14, r18
    7800:	20 e0       	ldi	r18, 0x00	; 0
    7802:	f2 06       	cpc	r15, r18
    7804:	21 e0       	ldi	r18, 0x01	; 1
    7806:	02 07       	cpc	r16, r18
    7808:	20 e0       	ldi	r18, 0x00	; 0
    780a:	12 07       	cpc	r17, r18
    780c:	88 f4       	brcc	.+34     	; 0x7830 <__udivdi3+0x826>
    780e:	3f ef       	ldi	r19, 0xFF	; 255
    7810:	e3 16       	cp	r14, r19
    7812:	f1 04       	cpc	r15, r1
    7814:	01 05       	cpc	r16, r1
    7816:	11 05       	cpc	r17, r1
    7818:	31 f0       	breq	.+12     	; 0x7826 <__udivdi3+0x81c>
    781a:	28 f0       	brcs	.+10     	; 0x7826 <__udivdi3+0x81c>
    781c:	48 e0       	ldi	r20, 0x08	; 8
    781e:	50 e0       	ldi	r21, 0x00	; 0
    7820:	60 e0       	ldi	r22, 0x00	; 0
    7822:	70 e0       	ldi	r23, 0x00	; 0
    7824:	17 c0       	rjmp	.+46     	; 0x7854 <__udivdi3+0x84a>
    7826:	40 e0       	ldi	r20, 0x00	; 0
    7828:	50 e0       	ldi	r21, 0x00	; 0
    782a:	60 e0       	ldi	r22, 0x00	; 0
    782c:	70 e0       	ldi	r23, 0x00	; 0
    782e:	12 c0       	rjmp	.+36     	; 0x7854 <__udivdi3+0x84a>
    7830:	40 e0       	ldi	r20, 0x00	; 0
    7832:	e4 16       	cp	r14, r20
    7834:	40 e0       	ldi	r20, 0x00	; 0
    7836:	f4 06       	cpc	r15, r20
    7838:	40 e0       	ldi	r20, 0x00	; 0
    783a:	04 07       	cpc	r16, r20
    783c:	41 e0       	ldi	r20, 0x01	; 1
    783e:	14 07       	cpc	r17, r20
    7840:	28 f0       	brcs	.+10     	; 0x784c <__udivdi3+0x842>
    7842:	48 e1       	ldi	r20, 0x18	; 24
    7844:	50 e0       	ldi	r21, 0x00	; 0
    7846:	60 e0       	ldi	r22, 0x00	; 0
    7848:	70 e0       	ldi	r23, 0x00	; 0
    784a:	04 c0       	rjmp	.+8      	; 0x7854 <__udivdi3+0x84a>
    784c:	40 e1       	ldi	r20, 0x10	; 16
    784e:	50 e0       	ldi	r21, 0x00	; 0
    7850:	60 e0       	ldi	r22, 0x00	; 0
    7852:	70 e0       	ldi	r23, 0x00	; 0
    7854:	d8 01       	movw	r26, r16
    7856:	c7 01       	movw	r24, r14
    7858:	04 2e       	mov	r0, r20
    785a:	04 c0       	rjmp	.+8      	; 0x7864 <__udivdi3+0x85a>
    785c:	b6 95       	lsr	r27
    785e:	a7 95       	ror	r26
    7860:	97 95       	ror	r25
    7862:	87 95       	ror	r24
    7864:	0a 94       	dec	r0
    7866:	d2 f7       	brpl	.-12     	; 0x785c <__udivdi3+0x852>
    7868:	84 53       	subi	r24, 0x34	; 52
    786a:	9f 4d       	sbci	r25, 0xDF	; 223
    786c:	dc 01       	movw	r26, r24
    786e:	2c 91       	ld	r18, X
    7870:	30 e2       	ldi	r19, 0x20	; 32
    7872:	a3 2e       	mov	r10, r19
    7874:	b1 2c       	mov	r11, r1
    7876:	c1 2c       	mov	r12, r1
    7878:	d1 2c       	mov	r13, r1
    787a:	d6 01       	movw	r26, r12
    787c:	c5 01       	movw	r24, r10
    787e:	84 1b       	sub	r24, r20
    7880:	95 0b       	sbc	r25, r21
    7882:	a6 0b       	sbc	r26, r22
    7884:	b7 0b       	sbc	r27, r23
    7886:	82 1b       	sub	r24, r18
    7888:	91 09       	sbc	r25, r1
    788a:	a1 09       	sbc	r26, r1
    788c:	b1 09       	sbc	r27, r1
    788e:	00 97       	sbiw	r24, 0x00	; 0
    7890:	a1 05       	cpc	r26, r1
    7892:	b1 05       	cpc	r27, r1
    7894:	89 f4       	brne	.+34     	; 0x78b8 <__udivdi3+0x8ae>
    7896:	e6 14       	cp	r14, r6
    7898:	f7 04       	cpc	r15, r7
    789a:	08 05       	cpc	r16, r8
    789c:	19 05       	cpc	r17, r9
    789e:	08 f4       	brcc	.+2      	; 0x78a2 <__udivdi3+0x898>
    78a0:	f2 c1       	rjmp	.+996    	; 0x7c86 <__udivdi3+0xc7c>
    78a2:	6d a4       	ldd	r6, Y+45	; 0x2d
    78a4:	7e a4       	ldd	r7, Y+46	; 0x2e
    78a6:	8f a4       	ldd	r8, Y+47	; 0x2f
    78a8:	98 a8       	ldd	r9, Y+48	; 0x30
    78aa:	62 14       	cp	r6, r2
    78ac:	73 04       	cpc	r7, r3
    78ae:	84 04       	cpc	r8, r4
    78b0:	95 04       	cpc	r9, r5
    78b2:	08 f0       	brcs	.+2      	; 0x78b6 <__udivdi3+0x8ac>
    78b4:	e8 c1       	rjmp	.+976    	; 0x7c86 <__udivdi3+0xc7c>
    78b6:	f3 c1       	rjmp	.+998    	; 0x7c9e <__udivdi3+0xc94>
    78b8:	6e 96       	adiw	r28, 0x1e	; 30
    78ba:	8f af       	std	Y+63, r24	; 0x3f
    78bc:	6e 97       	sbiw	r28, 0x1e	; 30
    78be:	08 2e       	mov	r0, r24
    78c0:	04 c0       	rjmp	.+8      	; 0x78ca <__udivdi3+0x8c0>
    78c2:	ee 0c       	add	r14, r14
    78c4:	ff 1c       	adc	r15, r15
    78c6:	00 1f       	adc	r16, r16
    78c8:	11 1f       	adc	r17, r17
    78ca:	0a 94       	dec	r0
    78cc:	d2 f7       	brpl	.-12     	; 0x78c2 <__udivdi3+0x8b8>
    78ce:	6a 2d       	mov	r22, r10
    78d0:	68 1b       	sub	r22, r24
    78d2:	d2 01       	movw	r26, r4
    78d4:	c1 01       	movw	r24, r2
    78d6:	06 2e       	mov	r0, r22
    78d8:	04 c0       	rjmp	.+8      	; 0x78e2 <__udivdi3+0x8d8>
    78da:	b6 95       	lsr	r27
    78dc:	a7 95       	ror	r26
    78de:	97 95       	ror	r25
    78e0:	87 95       	ror	r24
    78e2:	0a 94       	dec	r0
    78e4:	d2 f7       	brpl	.-12     	; 0x78da <__udivdi3+0x8d0>
    78e6:	5c 01       	movw	r10, r24
    78e8:	6d 01       	movw	r12, r26
    78ea:	ae 28       	or	r10, r14
    78ec:	bf 28       	or	r11, r15
    78ee:	c0 2a       	or	r12, r16
    78f0:	d1 2a       	or	r13, r17
    78f2:	ad a2       	std	Y+37, r10	; 0x25
    78f4:	be a2       	std	Y+38, r11	; 0x26
    78f6:	cf a2       	std	Y+39, r12	; 0x27
    78f8:	d8 a6       	std	Y+40, r13	; 0x28
    78fa:	72 01       	movw	r14, r4
    78fc:	61 01       	movw	r12, r2
    78fe:	6e 96       	adiw	r28, 0x1e	; 30
    7900:	0f ac       	ldd	r0, Y+63	; 0x3f
    7902:	6e 97       	sbiw	r28, 0x1e	; 30
    7904:	04 c0       	rjmp	.+8      	; 0x790e <__udivdi3+0x904>
    7906:	cc 0c       	add	r12, r12
    7908:	dd 1c       	adc	r13, r13
    790a:	ee 1c       	adc	r14, r14
    790c:	ff 1c       	adc	r15, r15
    790e:	0a 94       	dec	r0
    7910:	d2 f7       	brpl	.-12     	; 0x7906 <__udivdi3+0x8fc>
    7912:	c9 a2       	std	Y+33, r12	; 0x21
    7914:	da a2       	std	Y+34, r13	; 0x22
    7916:	eb a2       	std	Y+35, r14	; 0x23
    7918:	fc a2       	std	Y+36, r15	; 0x24
    791a:	64 01       	movw	r12, r8
    791c:	53 01       	movw	r10, r6
    791e:	06 2e       	mov	r0, r22
    7920:	04 c0       	rjmp	.+8      	; 0x792a <__udivdi3+0x920>
    7922:	d6 94       	lsr	r13
    7924:	c7 94       	ror	r12
    7926:	b7 94       	ror	r11
    7928:	a7 94       	ror	r10
    792a:	0a 94       	dec	r0
    792c:	d2 f7       	brpl	.-12     	; 0x7922 <__udivdi3+0x918>
    792e:	d4 01       	movw	r26, r8
    7930:	c3 01       	movw	r24, r6
    7932:	6e 96       	adiw	r28, 0x1e	; 30
    7934:	0f ac       	ldd	r0, Y+63	; 0x3f
    7936:	6e 97       	sbiw	r28, 0x1e	; 30
    7938:	04 c0       	rjmp	.+8      	; 0x7942 <__udivdi3+0x938>
    793a:	88 0f       	add	r24, r24
    793c:	99 1f       	adc	r25, r25
    793e:	aa 1f       	adc	r26, r26
    7940:	bb 1f       	adc	r27, r27
    7942:	0a 94       	dec	r0
    7944:	d2 f7       	brpl	.-12     	; 0x793a <__udivdi3+0x930>
    7946:	ed a4       	ldd	r14, Y+45	; 0x2d
    7948:	fe a4       	ldd	r15, Y+46	; 0x2e
    794a:	0f a5       	ldd	r16, Y+47	; 0x2f
    794c:	18 a9       	ldd	r17, Y+48	; 0x30
    794e:	04 c0       	rjmp	.+8      	; 0x7958 <__udivdi3+0x94e>
    7950:	16 95       	lsr	r17
    7952:	07 95       	ror	r16
    7954:	f7 94       	ror	r15
    7956:	e7 94       	ror	r14
    7958:	6a 95       	dec	r22
    795a:	d2 f7       	brpl	.-12     	; 0x7950 <__udivdi3+0x946>
    795c:	37 01       	movw	r6, r14
    795e:	48 01       	movw	r8, r16
    7960:	68 2a       	or	r6, r24
    7962:	79 2a       	or	r7, r25
    7964:	8a 2a       	or	r8, r26
    7966:	9b 2a       	or	r9, r27
    7968:	6d 8e       	std	Y+29, r6	; 0x1d
    796a:	7e 8e       	std	Y+30, r7	; 0x1e
    796c:	8f 8e       	std	Y+31, r8	; 0x1f
    796e:	98 a2       	std	Y+32, r9	; 0x20
    7970:	ed a0       	ldd	r14, Y+37	; 0x25
    7972:	fe a0       	ldd	r15, Y+38	; 0x26
    7974:	0f a1       	ldd	r16, Y+39	; 0x27
    7976:	18 a5       	ldd	r17, Y+40	; 0x28
    7978:	38 01       	movw	r6, r16
    797a:	88 24       	eor	r8, r8
    797c:	99 24       	eor	r9, r9
    797e:	98 01       	movw	r18, r16
    7980:	87 01       	movw	r16, r14
    7982:	20 70       	andi	r18, 0x00	; 0
    7984:	30 70       	andi	r19, 0x00	; 0
    7986:	65 96       	adiw	r28, 0x15	; 21
    7988:	0c af       	std	Y+60, r16	; 0x3c
    798a:	1d af       	std	Y+61, r17	; 0x3d
    798c:	2e af       	std	Y+62, r18	; 0x3e
    798e:	3f af       	std	Y+63, r19	; 0x3f
    7990:	65 97       	sbiw	r28, 0x15	; 21
    7992:	c6 01       	movw	r24, r12
    7994:	b5 01       	movw	r22, r10
    7996:	a4 01       	movw	r20, r8
    7998:	93 01       	movw	r18, r6
    799a:	0e 94 76 46 	call	0x8cec	; 0x8cec <__udivmodsi4>
    799e:	7b 01       	movw	r14, r22
    79a0:	8c 01       	movw	r16, r24
    79a2:	c6 01       	movw	r24, r12
    79a4:	b5 01       	movw	r22, r10
    79a6:	a4 01       	movw	r20, r8
    79a8:	93 01       	movw	r18, r6
    79aa:	0e 94 76 46 	call	0x8cec	; 0x8cec <__udivmodsi4>
    79ae:	c9 01       	movw	r24, r18
    79b0:	da 01       	movw	r26, r20
    79b2:	1c 01       	movw	r2, r24
    79b4:	2d 01       	movw	r4, r26
    79b6:	c2 01       	movw	r24, r4
    79b8:	b1 01       	movw	r22, r2
    79ba:	65 96       	adiw	r28, 0x15	; 21
    79bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    79be:	3d ad       	ldd	r19, Y+61	; 0x3d
    79c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    79c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    79c4:	65 97       	sbiw	r28, 0x15	; 21
    79c6:	0e 94 57 46 	call	0x8cae	; 0x8cae <__mulsi3>
    79ca:	9b 01       	movw	r18, r22
    79cc:	ac 01       	movw	r20, r24
    79ce:	87 01       	movw	r16, r14
    79d0:	ff 24       	eor	r15, r15
    79d2:	ee 24       	eor	r14, r14
    79d4:	ad 8c       	ldd	r10, Y+29	; 0x1d
    79d6:	be 8c       	ldd	r11, Y+30	; 0x1e
    79d8:	cf 8c       	ldd	r12, Y+31	; 0x1f
    79da:	d8 a0       	ldd	r13, Y+32	; 0x20
    79dc:	c6 01       	movw	r24, r12
    79de:	aa 27       	eor	r26, r26
    79e0:	bb 27       	eor	r27, r27
    79e2:	57 01       	movw	r10, r14
    79e4:	68 01       	movw	r12, r16
    79e6:	a8 2a       	or	r10, r24
    79e8:	b9 2a       	or	r11, r25
    79ea:	ca 2a       	or	r12, r26
    79ec:	db 2a       	or	r13, r27
    79ee:	a2 16       	cp	r10, r18
    79f0:	b3 06       	cpc	r11, r19
    79f2:	c4 06       	cpc	r12, r20
    79f4:	d5 06       	cpc	r13, r21
    79f6:	00 f5       	brcc	.+64     	; 0x7a38 <__udivdi3+0xa2e>
    79f8:	08 94       	sec
    79fa:	21 08       	sbc	r2, r1
    79fc:	31 08       	sbc	r3, r1
    79fe:	41 08       	sbc	r4, r1
    7a00:	51 08       	sbc	r5, r1
    7a02:	ed a0       	ldd	r14, Y+37	; 0x25
    7a04:	fe a0       	ldd	r15, Y+38	; 0x26
    7a06:	0f a1       	ldd	r16, Y+39	; 0x27
    7a08:	18 a5       	ldd	r17, Y+40	; 0x28
    7a0a:	ae 0c       	add	r10, r14
    7a0c:	bf 1c       	adc	r11, r15
    7a0e:	c0 1e       	adc	r12, r16
    7a10:	d1 1e       	adc	r13, r17
    7a12:	ae 14       	cp	r10, r14
    7a14:	bf 04       	cpc	r11, r15
    7a16:	c0 06       	cpc	r12, r16
    7a18:	d1 06       	cpc	r13, r17
    7a1a:	70 f0       	brcs	.+28     	; 0x7a38 <__udivdi3+0xa2e>
    7a1c:	a2 16       	cp	r10, r18
    7a1e:	b3 06       	cpc	r11, r19
    7a20:	c4 06       	cpc	r12, r20
    7a22:	d5 06       	cpc	r13, r21
    7a24:	48 f4       	brcc	.+18     	; 0x7a38 <__udivdi3+0xa2e>
    7a26:	08 94       	sec
    7a28:	21 08       	sbc	r2, r1
    7a2a:	31 08       	sbc	r3, r1
    7a2c:	41 08       	sbc	r4, r1
    7a2e:	51 08       	sbc	r5, r1
    7a30:	ae 0c       	add	r10, r14
    7a32:	bf 1c       	adc	r11, r15
    7a34:	c0 1e       	adc	r12, r16
    7a36:	d1 1e       	adc	r13, r17
    7a38:	a2 1a       	sub	r10, r18
    7a3a:	b3 0a       	sbc	r11, r19
    7a3c:	c4 0a       	sbc	r12, r20
    7a3e:	d5 0a       	sbc	r13, r21
    7a40:	c6 01       	movw	r24, r12
    7a42:	b5 01       	movw	r22, r10
    7a44:	a4 01       	movw	r20, r8
    7a46:	93 01       	movw	r18, r6
    7a48:	0e 94 76 46 	call	0x8cec	; 0x8cec <__udivmodsi4>
    7a4c:	7b 01       	movw	r14, r22
    7a4e:	8c 01       	movw	r16, r24
    7a50:	c6 01       	movw	r24, r12
    7a52:	b5 01       	movw	r22, r10
    7a54:	a4 01       	movw	r20, r8
    7a56:	93 01       	movw	r18, r6
    7a58:	0e 94 76 46 	call	0x8cec	; 0x8cec <__udivmodsi4>
    7a5c:	c9 01       	movw	r24, r18
    7a5e:	da 01       	movw	r26, r20
    7a60:	3c 01       	movw	r6, r24
    7a62:	4d 01       	movw	r8, r26
    7a64:	c4 01       	movw	r24, r8
    7a66:	b3 01       	movw	r22, r6
    7a68:	65 96       	adiw	r28, 0x15	; 21
    7a6a:	2c ad       	ldd	r18, Y+60	; 0x3c
    7a6c:	3d ad       	ldd	r19, Y+61	; 0x3d
    7a6e:	4e ad       	ldd	r20, Y+62	; 0x3e
    7a70:	5f ad       	ldd	r21, Y+63	; 0x3f
    7a72:	65 97       	sbiw	r28, 0x15	; 21
    7a74:	0e 94 57 46 	call	0x8cae	; 0x8cae <__mulsi3>
    7a78:	9b 01       	movw	r18, r22
    7a7a:	ac 01       	movw	r20, r24
    7a7c:	87 01       	movw	r16, r14
    7a7e:	ff 24       	eor	r15, r15
    7a80:	ee 24       	eor	r14, r14
    7a82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7a84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7a86:	af 8d       	ldd	r26, Y+31	; 0x1f
    7a88:	b8 a1       	ldd	r27, Y+32	; 0x20
    7a8a:	a0 70       	andi	r26, 0x00	; 0
    7a8c:	b0 70       	andi	r27, 0x00	; 0
    7a8e:	57 01       	movw	r10, r14
    7a90:	68 01       	movw	r12, r16
    7a92:	a8 2a       	or	r10, r24
    7a94:	b9 2a       	or	r11, r25
    7a96:	ca 2a       	or	r12, r26
    7a98:	db 2a       	or	r13, r27
    7a9a:	a2 16       	cp	r10, r18
    7a9c:	b3 06       	cpc	r11, r19
    7a9e:	c4 06       	cpc	r12, r20
    7aa0:	d5 06       	cpc	r13, r21
    7aa2:	00 f5       	brcc	.+64     	; 0x7ae4 <__udivdi3+0xada>
    7aa4:	08 94       	sec
    7aa6:	61 08       	sbc	r6, r1
    7aa8:	71 08       	sbc	r7, r1
    7aaa:	81 08       	sbc	r8, r1
    7aac:	91 08       	sbc	r9, r1
    7aae:	6d a1       	ldd	r22, Y+37	; 0x25
    7ab0:	7e a1       	ldd	r23, Y+38	; 0x26
    7ab2:	8f a1       	ldd	r24, Y+39	; 0x27
    7ab4:	98 a5       	ldd	r25, Y+40	; 0x28
    7ab6:	a6 0e       	add	r10, r22
    7ab8:	b7 1e       	adc	r11, r23
    7aba:	c8 1e       	adc	r12, r24
    7abc:	d9 1e       	adc	r13, r25
    7abe:	a6 16       	cp	r10, r22
    7ac0:	b7 06       	cpc	r11, r23
    7ac2:	c8 06       	cpc	r12, r24
    7ac4:	d9 06       	cpc	r13, r25
    7ac6:	70 f0       	brcs	.+28     	; 0x7ae4 <__udivdi3+0xada>
    7ac8:	a2 16       	cp	r10, r18
    7aca:	b3 06       	cpc	r11, r19
    7acc:	c4 06       	cpc	r12, r20
    7ace:	d5 06       	cpc	r13, r21
    7ad0:	48 f4       	brcc	.+18     	; 0x7ae4 <__udivdi3+0xada>
    7ad2:	08 94       	sec
    7ad4:	61 08       	sbc	r6, r1
    7ad6:	71 08       	sbc	r7, r1
    7ad8:	81 08       	sbc	r8, r1
    7ada:	91 08       	sbc	r9, r1
    7adc:	a6 0e       	add	r10, r22
    7ade:	b7 1e       	adc	r11, r23
    7ae0:	c8 1e       	adc	r12, r24
    7ae2:	d9 1e       	adc	r13, r25
    7ae4:	d6 01       	movw	r26, r12
    7ae6:	c5 01       	movw	r24, r10
    7ae8:	82 1b       	sub	r24, r18
    7aea:	93 0b       	sbc	r25, r19
    7aec:	a4 0b       	sbc	r26, r20
    7aee:	b5 0b       	sbc	r27, r21
    7af0:	89 8f       	std	Y+25, r24	; 0x19
    7af2:	9a 8f       	std	Y+26, r25	; 0x1a
    7af4:	ab 8f       	std	Y+27, r26	; 0x1b
    7af6:	bc 8f       	std	Y+28, r27	; 0x1c
    7af8:	d1 01       	movw	r26, r2
    7afa:	99 27       	eor	r25, r25
    7afc:	88 27       	eor	r24, r24
    7afe:	64 01       	movw	r12, r8
    7b00:	53 01       	movw	r10, r6
    7b02:	a8 2a       	or	r10, r24
    7b04:	b9 2a       	or	r11, r25
    7b06:	ca 2a       	or	r12, r26
    7b08:	db 2a       	or	r13, r27
    7b0a:	a9 aa       	std	Y+49, r10	; 0x31
    7b0c:	ba aa       	std	Y+50, r11	; 0x32
    7b0e:	cb aa       	std	Y+51, r12	; 0x33
    7b10:	dc aa       	std	Y+52, r13	; 0x34
    7b12:	86 01       	movw	r16, r12
    7b14:	75 01       	movw	r14, r10
    7b16:	2f ef       	ldi	r18, 0xFF	; 255
    7b18:	3f ef       	ldi	r19, 0xFF	; 255
    7b1a:	40 e0       	ldi	r20, 0x00	; 0
    7b1c:	50 e0       	ldi	r21, 0x00	; 0
    7b1e:	e2 22       	and	r14, r18
    7b20:	f3 22       	and	r15, r19
    7b22:	04 23       	and	r16, r20
    7b24:	15 23       	and	r17, r21
    7b26:	a6 01       	movw	r20, r12
    7b28:	66 27       	eor	r22, r22
    7b2a:	77 27       	eor	r23, r23
    7b2c:	6d 96       	adiw	r28, 0x1d	; 29
    7b2e:	4c af       	std	Y+60, r20	; 0x3c
    7b30:	5d af       	std	Y+61, r21	; 0x3d
    7b32:	6e af       	std	Y+62, r22	; 0x3e
    7b34:	7f af       	std	Y+63, r23	; 0x3f
    7b36:	6d 97       	sbiw	r28, 0x1d	; 29
    7b38:	a9 a0       	ldd	r10, Y+33	; 0x21
    7b3a:	ba a0       	ldd	r11, Y+34	; 0x22
    7b3c:	cb a0       	ldd	r12, Y+35	; 0x23
    7b3e:	dc a0       	ldd	r13, Y+36	; 0x24
    7b40:	6f ef       	ldi	r22, 0xFF	; 255
    7b42:	7f ef       	ldi	r23, 0xFF	; 255
    7b44:	80 e0       	ldi	r24, 0x00	; 0
    7b46:	90 e0       	ldi	r25, 0x00	; 0
    7b48:	a6 22       	and	r10, r22
    7b4a:	b7 22       	and	r11, r23
    7b4c:	c8 22       	and	r12, r24
    7b4e:	d9 22       	and	r13, r25
    7b50:	89 a1       	ldd	r24, Y+33	; 0x21
    7b52:	9a a1       	ldd	r25, Y+34	; 0x22
    7b54:	ab a1       	ldd	r26, Y+35	; 0x23
    7b56:	bc a1       	ldd	r27, Y+36	; 0x24
    7b58:	1d 01       	movw	r2, r26
    7b5a:	44 24       	eor	r4, r4
    7b5c:	55 24       	eor	r5, r5
    7b5e:	c8 01       	movw	r24, r16
    7b60:	b7 01       	movw	r22, r14
    7b62:	a6 01       	movw	r20, r12
    7b64:	95 01       	movw	r18, r10
    7b66:	0e 94 57 46 	call	0x8cae	; 0x8cae <__mulsi3>
    7b6a:	69 96       	adiw	r28, 0x19	; 25
    7b6c:	6c af       	std	Y+60, r22	; 0x3c
    7b6e:	7d af       	std	Y+61, r23	; 0x3d
    7b70:	8e af       	std	Y+62, r24	; 0x3e
    7b72:	9f af       	std	Y+63, r25	; 0x3f
    7b74:	69 97       	sbiw	r28, 0x19	; 25
    7b76:	c8 01       	movw	r24, r16
    7b78:	b7 01       	movw	r22, r14
    7b7a:	a2 01       	movw	r20, r4
    7b7c:	91 01       	movw	r18, r2
    7b7e:	0e 94 57 46 	call	0x8cae	; 0x8cae <__mulsi3>
    7b82:	3b 01       	movw	r6, r22
    7b84:	4c 01       	movw	r8, r24
    7b86:	6d 96       	adiw	r28, 0x1d	; 29
    7b88:	6c ad       	ldd	r22, Y+60	; 0x3c
    7b8a:	7d ad       	ldd	r23, Y+61	; 0x3d
    7b8c:	8e ad       	ldd	r24, Y+62	; 0x3e
    7b8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    7b90:	6d 97       	sbiw	r28, 0x1d	; 29
    7b92:	a6 01       	movw	r20, r12
    7b94:	95 01       	movw	r18, r10
    7b96:	0e 94 57 46 	call	0x8cae	; 0x8cae <__mulsi3>
    7b9a:	7b 01       	movw	r14, r22
    7b9c:	8c 01       	movw	r16, r24
    7b9e:	6d 96       	adiw	r28, 0x1d	; 29
    7ba0:	6c ad       	ldd	r22, Y+60	; 0x3c
    7ba2:	7d ad       	ldd	r23, Y+61	; 0x3d
    7ba4:	8e ad       	ldd	r24, Y+62	; 0x3e
    7ba6:	9f ad       	ldd	r25, Y+63	; 0x3f
    7ba8:	6d 97       	sbiw	r28, 0x1d	; 29
    7baa:	a2 01       	movw	r20, r4
    7bac:	91 01       	movw	r18, r2
    7bae:	0e 94 57 46 	call	0x8cae	; 0x8cae <__mulsi3>
    7bb2:	5b 01       	movw	r10, r22
    7bb4:	6c 01       	movw	r12, r24
    7bb6:	a8 01       	movw	r20, r16
    7bb8:	97 01       	movw	r18, r14
    7bba:	26 0d       	add	r18, r6
    7bbc:	37 1d       	adc	r19, r7
    7bbe:	48 1d       	adc	r20, r8
    7bc0:	59 1d       	adc	r21, r9
    7bc2:	69 96       	adiw	r28, 0x19	; 25
    7bc4:	6c ac       	ldd	r6, Y+60	; 0x3c
    7bc6:	7d ac       	ldd	r7, Y+61	; 0x3d
    7bc8:	8e ac       	ldd	r8, Y+62	; 0x3e
    7bca:	9f ac       	ldd	r9, Y+63	; 0x3f
    7bcc:	69 97       	sbiw	r28, 0x19	; 25
    7bce:	c4 01       	movw	r24, r8
    7bd0:	aa 27       	eor	r26, r26
    7bd2:	bb 27       	eor	r27, r27
    7bd4:	28 0f       	add	r18, r24
    7bd6:	39 1f       	adc	r19, r25
    7bd8:	4a 1f       	adc	r20, r26
    7bda:	5b 1f       	adc	r21, r27
    7bdc:	2e 15       	cp	r18, r14
    7bde:	3f 05       	cpc	r19, r15
    7be0:	40 07       	cpc	r20, r16
    7be2:	51 07       	cpc	r21, r17
    7be4:	48 f4       	brcc	.+18     	; 0x7bf8 <__udivdi3+0xbee>
    7be6:	e1 2c       	mov	r14, r1
    7be8:	f1 2c       	mov	r15, r1
    7bea:	61 e0       	ldi	r22, 0x01	; 1
    7bec:	06 2f       	mov	r16, r22
    7bee:	11 2d       	mov	r17, r1
    7bf0:	ae 0c       	add	r10, r14
    7bf2:	bf 1c       	adc	r11, r15
    7bf4:	c0 1e       	adc	r12, r16
    7bf6:	d1 1e       	adc	r13, r17
    7bf8:	ca 01       	movw	r24, r20
    7bfa:	aa 27       	eor	r26, r26
    7bfc:	bb 27       	eor	r27, r27
    7bfe:	bc 01       	movw	r22, r24
    7c00:	cd 01       	movw	r24, r26
    7c02:	6a 0d       	add	r22, r10
    7c04:	7b 1d       	adc	r23, r11
    7c06:	8c 1d       	adc	r24, r12
    7c08:	9d 1d       	adc	r25, r13
    7c0a:	69 8c       	ldd	r6, Y+25	; 0x19
    7c0c:	7a 8c       	ldd	r7, Y+26	; 0x1a
    7c0e:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7c10:	9c 8c       	ldd	r9, Y+28	; 0x1c
    7c12:	66 16       	cp	r6, r22
    7c14:	77 06       	cpc	r7, r23
    7c16:	88 06       	cpc	r8, r24
    7c18:	99 06       	cpc	r9, r25
    7c1a:	40 f1       	brcs	.+80     	; 0x7c6c <__udivdi3+0xc62>
    7c1c:	66 15       	cp	r22, r6
    7c1e:	77 05       	cpc	r23, r7
    7c20:	88 05       	cpc	r24, r8
    7c22:	99 05       	cpc	r25, r9
    7c24:	09 f0       	breq	.+2      	; 0x7c28 <__udivdi3+0xc1e>
    7c26:	43 c0       	rjmp	.+134    	; 0x7cae <__udivdi3+0xca4>
    7c28:	d9 01       	movw	r26, r18
    7c2a:	99 27       	eor	r25, r25
    7c2c:	88 27       	eor	r24, r24
    7c2e:	69 96       	adiw	r28, 0x19	; 25
    7c30:	2c ad       	ldd	r18, Y+60	; 0x3c
    7c32:	3d ad       	ldd	r19, Y+61	; 0x3d
    7c34:	4e ad       	ldd	r20, Y+62	; 0x3e
    7c36:	5f ad       	ldd	r21, Y+63	; 0x3f
    7c38:	69 97       	sbiw	r28, 0x19	; 25
    7c3a:	40 70       	andi	r20, 0x00	; 0
    7c3c:	50 70       	andi	r21, 0x00	; 0
    7c3e:	82 0f       	add	r24, r18
    7c40:	93 1f       	adc	r25, r19
    7c42:	a4 1f       	adc	r26, r20
    7c44:	b5 1f       	adc	r27, r21
    7c46:	2d a5       	ldd	r18, Y+45	; 0x2d
    7c48:	3e a5       	ldd	r19, Y+46	; 0x2e
    7c4a:	4f a5       	ldd	r20, Y+47	; 0x2f
    7c4c:	58 a9       	ldd	r21, Y+48	; 0x30
    7c4e:	6e 96       	adiw	r28, 0x1e	; 30
    7c50:	0f ac       	ldd	r0, Y+63	; 0x3f
    7c52:	6e 97       	sbiw	r28, 0x1e	; 30
    7c54:	04 c0       	rjmp	.+8      	; 0x7c5e <__udivdi3+0xc54>
    7c56:	22 0f       	add	r18, r18
    7c58:	33 1f       	adc	r19, r19
    7c5a:	44 1f       	adc	r20, r20
    7c5c:	55 1f       	adc	r21, r21
    7c5e:	0a 94       	dec	r0
    7c60:	d2 f7       	brpl	.-12     	; 0x7c56 <__udivdi3+0xc4c>
    7c62:	28 17       	cp	r18, r24
    7c64:	39 07       	cpc	r19, r25
    7c66:	4a 07       	cpc	r20, r26
    7c68:	5b 07       	cpc	r21, r27
    7c6a:	08 f5       	brcc	.+66     	; 0x7cae <__udivdi3+0xca4>
    7c6c:	09 a9       	ldd	r16, Y+49	; 0x31
    7c6e:	1a a9       	ldd	r17, Y+50	; 0x32
    7c70:	2b a9       	ldd	r18, Y+51	; 0x33
    7c72:	3c a9       	ldd	r19, Y+52	; 0x34
    7c74:	01 50       	subi	r16, 0x01	; 1
    7c76:	10 40       	sbci	r17, 0x00	; 0
    7c78:	20 40       	sbci	r18, 0x00	; 0
    7c7a:	30 40       	sbci	r19, 0x00	; 0
    7c7c:	09 ab       	std	Y+49, r16	; 0x31
    7c7e:	1a ab       	std	Y+50, r17	; 0x32
    7c80:	2b ab       	std	Y+51, r18	; 0x33
    7c82:	3c ab       	std	Y+52, r19	; 0x34
    7c84:	14 c0       	rjmp	.+40     	; 0x7cae <__udivdi3+0xca4>
    7c86:	66 24       	eor	r6, r6
    7c88:	77 24       	eor	r7, r7
    7c8a:	43 01       	movw	r8, r6
    7c8c:	21 e0       	ldi	r18, 0x01	; 1
    7c8e:	30 e0       	ldi	r19, 0x00	; 0
    7c90:	40 e0       	ldi	r20, 0x00	; 0
    7c92:	50 e0       	ldi	r21, 0x00	; 0
    7c94:	29 ab       	std	Y+49, r18	; 0x31
    7c96:	3a ab       	std	Y+50, r19	; 0x32
    7c98:	4b ab       	std	Y+51, r20	; 0x33
    7c9a:	5c ab       	std	Y+52, r21	; 0x34
    7c9c:	0b c0       	rjmp	.+22     	; 0x7cb4 <__udivdi3+0xcaa>
    7c9e:	66 24       	eor	r6, r6
    7ca0:	77 24       	eor	r7, r7
    7ca2:	43 01       	movw	r8, r6
    7ca4:	19 aa       	std	Y+49, r1	; 0x31
    7ca6:	1a aa       	std	Y+50, r1	; 0x32
    7ca8:	1b aa       	std	Y+51, r1	; 0x33
    7caa:	1c aa       	std	Y+52, r1	; 0x34
    7cac:	03 c0       	rjmp	.+6      	; 0x7cb4 <__udivdi3+0xcaa>
    7cae:	66 24       	eor	r6, r6
    7cb0:	77 24       	eor	r7, r7
    7cb2:	43 01       	movw	r8, r6
    7cb4:	fe 01       	movw	r30, r28
    7cb6:	71 96       	adiw	r30, 0x11	; 17
    7cb8:	88 e0       	ldi	r24, 0x08	; 8
    7cba:	df 01       	movw	r26, r30
    7cbc:	1d 92       	st	X+, r1
    7cbe:	8a 95       	dec	r24
    7cc0:	e9 f7       	brne	.-6      	; 0x7cbc <__udivdi3+0xcb2>
    7cc2:	a9 a8       	ldd	r10, Y+49	; 0x31
    7cc4:	ba a8       	ldd	r11, Y+50	; 0x32
    7cc6:	cb a8       	ldd	r12, Y+51	; 0x33
    7cc8:	dc a8       	ldd	r13, Y+52	; 0x34
    7cca:	a9 8a       	std	Y+17, r10	; 0x11
    7ccc:	ba 8a       	std	Y+18, r11	; 0x12
    7cce:	cb 8a       	std	Y+19, r12	; 0x13
    7cd0:	dc 8a       	std	Y+20, r13	; 0x14
    7cd2:	6d 8a       	std	Y+21, r6	; 0x15
    7cd4:	7e 8a       	std	Y+22, r7	; 0x16
    7cd6:	8f 8a       	std	Y+23, r8	; 0x17
    7cd8:	98 8e       	std	Y+24, r9	; 0x18
    7cda:	29 a9       	ldd	r18, Y+49	; 0x31
    7cdc:	3a 89       	ldd	r19, Y+18	; 0x12
    7cde:	4b 89       	ldd	r20, Y+19	; 0x13
    7ce0:	5c 89       	ldd	r21, Y+20	; 0x14
    7ce2:	66 2d       	mov	r22, r6
    7ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    7ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    7ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    7cea:	c2 5a       	subi	r28, 0xA2	; 162
    7cec:	df 4f       	sbci	r29, 0xFF	; 255
    7cee:	e2 e1       	ldi	r30, 0x12	; 18
    7cf0:	0c 94 b4 46 	jmp	0x8d68	; 0x8d68 <__epilogue_restores__>

00007cf4 <vfprintf>:
    7cf4:	2f 92       	push	r2
    7cf6:	3f 92       	push	r3
    7cf8:	4f 92       	push	r4
    7cfa:	5f 92       	push	r5
    7cfc:	6f 92       	push	r6
    7cfe:	7f 92       	push	r7
    7d00:	8f 92       	push	r8
    7d02:	9f 92       	push	r9
    7d04:	af 92       	push	r10
    7d06:	bf 92       	push	r11
    7d08:	cf 92       	push	r12
    7d0a:	df 92       	push	r13
    7d0c:	ef 92       	push	r14
    7d0e:	ff 92       	push	r15
    7d10:	0f 93       	push	r16
    7d12:	1f 93       	push	r17
    7d14:	df 93       	push	r29
    7d16:	cf 93       	push	r28
    7d18:	cd b7       	in	r28, 0x3d	; 61
    7d1a:	de b7       	in	r29, 0x3e	; 62
    7d1c:	61 97       	sbiw	r28, 0x11	; 17
    7d1e:	cd bf       	out	0x3d, r28	; 61
    7d20:	de bf       	out	0x3e, r29	; 62
    7d22:	3c 01       	movw	r6, r24
    7d24:	6e 87       	std	Y+14, r22	; 0x0e
    7d26:	7f 87       	std	Y+15, r23	; 0x0f
    7d28:	6a 01       	movw	r12, r20
    7d2a:	fc 01       	movw	r30, r24
    7d2c:	16 82       	std	Z+6, r1	; 0x06
    7d2e:	17 82       	std	Z+7, r1	; 0x07
    7d30:	83 81       	ldd	r24, Z+3	; 0x03
    7d32:	81 fd       	sbrc	r24, 1
    7d34:	03 c0       	rjmp	.+6      	; 0x7d3c <vfprintf+0x48>
    7d36:	6f ef       	ldi	r22, 0xFF	; 255
    7d38:	7f ef       	ldi	r23, 0xFF	; 255
    7d3a:	6f c3       	rjmp	.+1758   	; 0x841a <vfprintf+0x726>
    7d3c:	9e 01       	movw	r18, r28
    7d3e:	2f 5f       	subi	r18, 0xFF	; 255
    7d40:	3f 4f       	sbci	r19, 0xFF	; 255
    7d42:	28 8b       	std	Y+16, r18	; 0x10
    7d44:	39 8b       	std	Y+17, r19	; 0x11
    7d46:	f3 01       	movw	r30, r6
    7d48:	23 81       	ldd	r18, Z+3	; 0x03
    7d4a:	ee 85       	ldd	r30, Y+14	; 0x0e
    7d4c:	ff 85       	ldd	r31, Y+15	; 0x0f
    7d4e:	23 fd       	sbrc	r18, 3
    7d50:	85 91       	lpm	r24, Z+
    7d52:	23 ff       	sbrs	r18, 3
    7d54:	81 91       	ld	r24, Z+
    7d56:	ee 87       	std	Y+14, r30	; 0x0e
    7d58:	ff 87       	std	Y+15, r31	; 0x0f
    7d5a:	88 23       	and	r24, r24
    7d5c:	09 f4       	brne	.+2      	; 0x7d60 <vfprintf+0x6c>
    7d5e:	5a c3       	rjmp	.+1716   	; 0x8414 <vfprintf+0x720>
    7d60:	85 32       	cpi	r24, 0x25	; 37
    7d62:	51 f4       	brne	.+20     	; 0x7d78 <vfprintf+0x84>
    7d64:	ee 85       	ldd	r30, Y+14	; 0x0e
    7d66:	ff 85       	ldd	r31, Y+15	; 0x0f
    7d68:	23 fd       	sbrc	r18, 3
    7d6a:	85 91       	lpm	r24, Z+
    7d6c:	23 ff       	sbrs	r18, 3
    7d6e:	81 91       	ld	r24, Z+
    7d70:	ee 87       	std	Y+14, r30	; 0x0e
    7d72:	ff 87       	std	Y+15, r31	; 0x0f
    7d74:	85 32       	cpi	r24, 0x25	; 37
    7d76:	29 f4       	brne	.+10     	; 0x7d82 <vfprintf+0x8e>
    7d78:	90 e0       	ldi	r25, 0x00	; 0
    7d7a:	b3 01       	movw	r22, r6
    7d7c:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    7d80:	e2 cf       	rjmp	.-60     	; 0x7d46 <vfprintf+0x52>
    7d82:	98 2f       	mov	r25, r24
    7d84:	10 e0       	ldi	r17, 0x00	; 0
    7d86:	88 24       	eor	r8, r8
    7d88:	99 24       	eor	r9, r9
    7d8a:	10 32       	cpi	r17, 0x20	; 32
    7d8c:	b0 f4       	brcc	.+44     	; 0x7dba <vfprintf+0xc6>
    7d8e:	9b 32       	cpi	r25, 0x2B	; 43
    7d90:	69 f0       	breq	.+26     	; 0x7dac <vfprintf+0xb8>
    7d92:	9c 32       	cpi	r25, 0x2C	; 44
    7d94:	28 f4       	brcc	.+10     	; 0x7da0 <vfprintf+0xac>
    7d96:	90 32       	cpi	r25, 0x20	; 32
    7d98:	51 f0       	breq	.+20     	; 0x7dae <vfprintf+0xba>
    7d9a:	93 32       	cpi	r25, 0x23	; 35
    7d9c:	71 f4       	brne	.+28     	; 0x7dba <vfprintf+0xc6>
    7d9e:	0b c0       	rjmp	.+22     	; 0x7db6 <vfprintf+0xc2>
    7da0:	9d 32       	cpi	r25, 0x2D	; 45
    7da2:	39 f0       	breq	.+14     	; 0x7db2 <vfprintf+0xbe>
    7da4:	90 33       	cpi	r25, 0x30	; 48
    7da6:	49 f4       	brne	.+18     	; 0x7dba <vfprintf+0xc6>
    7da8:	11 60       	ori	r17, 0x01	; 1
    7daa:	28 c0       	rjmp	.+80     	; 0x7dfc <vfprintf+0x108>
    7dac:	12 60       	ori	r17, 0x02	; 2
    7dae:	14 60       	ori	r17, 0x04	; 4
    7db0:	25 c0       	rjmp	.+74     	; 0x7dfc <vfprintf+0x108>
    7db2:	18 60       	ori	r17, 0x08	; 8
    7db4:	23 c0       	rjmp	.+70     	; 0x7dfc <vfprintf+0x108>
    7db6:	10 61       	ori	r17, 0x10	; 16
    7db8:	21 c0       	rjmp	.+66     	; 0x7dfc <vfprintf+0x108>
    7dba:	17 fd       	sbrc	r17, 7
    7dbc:	2a c0       	rjmp	.+84     	; 0x7e12 <vfprintf+0x11e>
    7dbe:	89 2f       	mov	r24, r25
    7dc0:	80 53       	subi	r24, 0x30	; 48
    7dc2:	8a 30       	cpi	r24, 0x0A	; 10
    7dc4:	78 f4       	brcc	.+30     	; 0x7de4 <vfprintf+0xf0>
    7dc6:	16 ff       	sbrs	r17, 6
    7dc8:	06 c0       	rjmp	.+12     	; 0x7dd6 <vfprintf+0xe2>
    7dca:	fa e0       	ldi	r31, 0x0A	; 10
    7dcc:	9f 9e       	mul	r9, r31
    7dce:	90 2c       	mov	r9, r0
    7dd0:	11 24       	eor	r1, r1
    7dd2:	98 0e       	add	r9, r24
    7dd4:	13 c0       	rjmp	.+38     	; 0x7dfc <vfprintf+0x108>
    7dd6:	3a e0       	ldi	r19, 0x0A	; 10
    7dd8:	83 9e       	mul	r8, r19
    7dda:	80 2c       	mov	r8, r0
    7ddc:	11 24       	eor	r1, r1
    7dde:	88 0e       	add	r8, r24
    7de0:	10 62       	ori	r17, 0x20	; 32
    7de2:	0c c0       	rjmp	.+24     	; 0x7dfc <vfprintf+0x108>
    7de4:	9e 32       	cpi	r25, 0x2E	; 46
    7de6:	21 f4       	brne	.+8      	; 0x7df0 <vfprintf+0xfc>
    7de8:	16 fd       	sbrc	r17, 6
    7dea:	14 c3       	rjmp	.+1576   	; 0x8414 <vfprintf+0x720>
    7dec:	10 64       	ori	r17, 0x40	; 64
    7dee:	06 c0       	rjmp	.+12     	; 0x7dfc <vfprintf+0x108>
    7df0:	9c 36       	cpi	r25, 0x6C	; 108
    7df2:	11 f4       	brne	.+4      	; 0x7df8 <vfprintf+0x104>
    7df4:	10 68       	ori	r17, 0x80	; 128
    7df6:	02 c0       	rjmp	.+4      	; 0x7dfc <vfprintf+0x108>
    7df8:	98 36       	cpi	r25, 0x68	; 104
    7dfa:	59 f4       	brne	.+22     	; 0x7e12 <vfprintf+0x11e>
    7dfc:	ee 85       	ldd	r30, Y+14	; 0x0e
    7dfe:	ff 85       	ldd	r31, Y+15	; 0x0f
    7e00:	23 fd       	sbrc	r18, 3
    7e02:	95 91       	lpm	r25, Z+
    7e04:	23 ff       	sbrs	r18, 3
    7e06:	91 91       	ld	r25, Z+
    7e08:	ee 87       	std	Y+14, r30	; 0x0e
    7e0a:	ff 87       	std	Y+15, r31	; 0x0f
    7e0c:	99 23       	and	r25, r25
    7e0e:	09 f0       	breq	.+2      	; 0x7e12 <vfprintf+0x11e>
    7e10:	bc cf       	rjmp	.-136    	; 0x7d8a <vfprintf+0x96>
    7e12:	89 2f       	mov	r24, r25
    7e14:	85 54       	subi	r24, 0x45	; 69
    7e16:	83 30       	cpi	r24, 0x03	; 3
    7e18:	20 f4       	brcc	.+8      	; 0x7e22 <vfprintf+0x12e>
    7e1a:	81 2f       	mov	r24, r17
    7e1c:	80 61       	ori	r24, 0x10	; 16
    7e1e:	90 5e       	subi	r25, 0xE0	; 224
    7e20:	07 c0       	rjmp	.+14     	; 0x7e30 <vfprintf+0x13c>
    7e22:	89 2f       	mov	r24, r25
    7e24:	85 56       	subi	r24, 0x65	; 101
    7e26:	83 30       	cpi	r24, 0x03	; 3
    7e28:	08 f0       	brcs	.+2      	; 0x7e2c <vfprintf+0x138>
    7e2a:	9f c1       	rjmp	.+830    	; 0x816a <vfprintf+0x476>
    7e2c:	81 2f       	mov	r24, r17
    7e2e:	8f 7e       	andi	r24, 0xEF	; 239
    7e30:	86 fd       	sbrc	r24, 6
    7e32:	02 c0       	rjmp	.+4      	; 0x7e38 <vfprintf+0x144>
    7e34:	76 e0       	ldi	r23, 0x06	; 6
    7e36:	97 2e       	mov	r9, r23
    7e38:	6f e3       	ldi	r22, 0x3F	; 63
    7e3a:	f6 2e       	mov	r15, r22
    7e3c:	f8 22       	and	r15, r24
    7e3e:	95 36       	cpi	r25, 0x65	; 101
    7e40:	19 f4       	brne	.+6      	; 0x7e48 <vfprintf+0x154>
    7e42:	f0 e4       	ldi	r31, 0x40	; 64
    7e44:	ff 2a       	or	r15, r31
    7e46:	07 c0       	rjmp	.+14     	; 0x7e56 <vfprintf+0x162>
    7e48:	96 36       	cpi	r25, 0x66	; 102
    7e4a:	19 f4       	brne	.+6      	; 0x7e52 <vfprintf+0x15e>
    7e4c:	20 e8       	ldi	r18, 0x80	; 128
    7e4e:	f2 2a       	or	r15, r18
    7e50:	02 c0       	rjmp	.+4      	; 0x7e56 <vfprintf+0x162>
    7e52:	91 10       	cpse	r9, r1
    7e54:	9a 94       	dec	r9
    7e56:	f7 fe       	sbrs	r15, 7
    7e58:	0a c0       	rjmp	.+20     	; 0x7e6e <vfprintf+0x17a>
    7e5a:	3b e3       	ldi	r19, 0x3B	; 59
    7e5c:	39 15       	cp	r19, r9
    7e5e:	18 f4       	brcc	.+6      	; 0x7e66 <vfprintf+0x172>
    7e60:	5c e3       	ldi	r21, 0x3C	; 60
    7e62:	b5 2e       	mov	r11, r21
    7e64:	02 c0       	rjmp	.+4      	; 0x7e6a <vfprintf+0x176>
    7e66:	b9 2c       	mov	r11, r9
    7e68:	b3 94       	inc	r11
    7e6a:	27 e0       	ldi	r18, 0x07	; 7
    7e6c:	09 c0       	rjmp	.+18     	; 0x7e80 <vfprintf+0x18c>
    7e6e:	47 e0       	ldi	r20, 0x07	; 7
    7e70:	49 15       	cp	r20, r9
    7e72:	20 f4       	brcc	.+8      	; 0x7e7c <vfprintf+0x188>
    7e74:	bb 24       	eor	r11, r11
    7e76:	47 e0       	ldi	r20, 0x07	; 7
    7e78:	94 2e       	mov	r9, r20
    7e7a:	f7 cf       	rjmp	.-18     	; 0x7e6a <vfprintf+0x176>
    7e7c:	29 2d       	mov	r18, r9
    7e7e:	bb 24       	eor	r11, r11
    7e80:	c6 01       	movw	r24, r12
    7e82:	04 96       	adiw	r24, 0x04	; 4
    7e84:	8c 87       	std	Y+12, r24	; 0x0c
    7e86:	9d 87       	std	Y+13, r25	; 0x0d
    7e88:	f6 01       	movw	r30, r12
    7e8a:	60 81       	ld	r22, Z
    7e8c:	71 81       	ldd	r23, Z+1	; 0x01
    7e8e:	82 81       	ldd	r24, Z+2	; 0x02
    7e90:	93 81       	ldd	r25, Z+3	; 0x03
    7e92:	ae 01       	movw	r20, r28
    7e94:	4f 5f       	subi	r20, 0xFF	; 255
    7e96:	5f 4f       	sbci	r21, 0xFF	; 255
    7e98:	0b 2d       	mov	r16, r11
    7e9a:	0e 94 5b 48 	call	0x90b6	; 0x90b6 <__ftoa_engine>
    7e9e:	6c 01       	movw	r12, r24
    7ea0:	09 81       	ldd	r16, Y+1	; 0x01
    7ea2:	20 2e       	mov	r2, r16
    7ea4:	33 24       	eor	r3, r3
    7ea6:	00 ff       	sbrs	r16, 0
    7ea8:	04 c0       	rjmp	.+8      	; 0x7eb2 <vfprintf+0x1be>
    7eaa:	03 fd       	sbrc	r16, 3
    7eac:	02 c0       	rjmp	.+4      	; 0x7eb2 <vfprintf+0x1be>
    7eae:	1d e2       	ldi	r17, 0x2D	; 45
    7eb0:	09 c0       	rjmp	.+18     	; 0x7ec4 <vfprintf+0x1d0>
    7eb2:	f1 fe       	sbrs	r15, 1
    7eb4:	02 c0       	rjmp	.+4      	; 0x7eba <vfprintf+0x1c6>
    7eb6:	1b e2       	ldi	r17, 0x2B	; 43
    7eb8:	05 c0       	rjmp	.+10     	; 0x7ec4 <vfprintf+0x1d0>
    7eba:	f2 fc       	sbrc	r15, 2
    7ebc:	02 c0       	rjmp	.+4      	; 0x7ec2 <vfprintf+0x1ce>
    7ebe:	10 e0       	ldi	r17, 0x00	; 0
    7ec0:	01 c0       	rjmp	.+2      	; 0x7ec4 <vfprintf+0x1d0>
    7ec2:	10 e2       	ldi	r17, 0x20	; 32
    7ec4:	c1 01       	movw	r24, r2
    7ec6:	8c 70       	andi	r24, 0x0C	; 12
    7ec8:	90 70       	andi	r25, 0x00	; 0
    7eca:	89 2b       	or	r24, r25
    7ecc:	b9 f1       	breq	.+110    	; 0x7f3c <vfprintf+0x248>
    7ece:	11 23       	and	r17, r17
    7ed0:	11 f4       	brne	.+4      	; 0x7ed6 <vfprintf+0x1e2>
    7ed2:	83 e0       	ldi	r24, 0x03	; 3
    7ed4:	01 c0       	rjmp	.+2      	; 0x7ed8 <vfprintf+0x1e4>
    7ed6:	84 e0       	ldi	r24, 0x04	; 4
    7ed8:	88 15       	cp	r24, r8
    7eda:	10 f0       	brcs	.+4      	; 0x7ee0 <vfprintf+0x1ec>
    7edc:	88 24       	eor	r8, r8
    7ede:	0a c0       	rjmp	.+20     	; 0x7ef4 <vfprintf+0x200>
    7ee0:	88 1a       	sub	r8, r24
    7ee2:	f3 fc       	sbrc	r15, 3
    7ee4:	07 c0       	rjmp	.+14     	; 0x7ef4 <vfprintf+0x200>
    7ee6:	80 e2       	ldi	r24, 0x20	; 32
    7ee8:	90 e0       	ldi	r25, 0x00	; 0
    7eea:	b3 01       	movw	r22, r6
    7eec:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    7ef0:	8a 94       	dec	r8
    7ef2:	c9 f7       	brne	.-14     	; 0x7ee6 <vfprintf+0x1f2>
    7ef4:	11 23       	and	r17, r17
    7ef6:	29 f0       	breq	.+10     	; 0x7f02 <vfprintf+0x20e>
    7ef8:	81 2f       	mov	r24, r17
    7efa:	90 e0       	ldi	r25, 0x00	; 0
    7efc:	b3 01       	movw	r22, r6
    7efe:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    7f02:	23 fe       	sbrs	r2, 3
    7f04:	03 c0       	rjmp	.+6      	; 0x7f0c <vfprintf+0x218>
    7f06:	03 e3       	ldi	r16, 0x33	; 51
    7f08:	12 e0       	ldi	r17, 0x02	; 2
    7f0a:	0e c0       	rjmp	.+28     	; 0x7f28 <vfprintf+0x234>
    7f0c:	07 e3       	ldi	r16, 0x37	; 55
    7f0e:	12 e0       	ldi	r17, 0x02	; 2
    7f10:	0b c0       	rjmp	.+22     	; 0x7f28 <vfprintf+0x234>
    7f12:	e1 14       	cp	r14, r1
    7f14:	f1 04       	cpc	r15, r1
    7f16:	09 f0       	breq	.+2      	; 0x7f1a <vfprintf+0x226>
    7f18:	80 52       	subi	r24, 0x20	; 32
    7f1a:	90 e0       	ldi	r25, 0x00	; 0
    7f1c:	b3 01       	movw	r22, r6
    7f1e:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    7f22:	0f 5f       	subi	r16, 0xFF	; 255
    7f24:	1f 4f       	sbci	r17, 0xFF	; 255
    7f26:	05 c0       	rjmp	.+10     	; 0x7f32 <vfprintf+0x23e>
    7f28:	ef 2c       	mov	r14, r15
    7f2a:	ff 24       	eor	r15, r15
    7f2c:	f0 e1       	ldi	r31, 0x10	; 16
    7f2e:	ef 22       	and	r14, r31
    7f30:	ff 24       	eor	r15, r15
    7f32:	f8 01       	movw	r30, r16
    7f34:	84 91       	lpm	r24, Z+
    7f36:	88 23       	and	r24, r24
    7f38:	61 f7       	brne	.-40     	; 0x7f12 <vfprintf+0x21e>
    7f3a:	14 c1       	rjmp	.+552    	; 0x8164 <vfprintf+0x470>
    7f3c:	f7 fe       	sbrs	r15, 7
    7f3e:	12 c0       	rjmp	.+36     	; 0x7f64 <vfprintf+0x270>
    7f40:	bc 0c       	add	r11, r12
    7f42:	24 fe       	sbrs	r2, 4
    7f44:	04 c0       	rjmp	.+8      	; 0x7f4e <vfprintf+0x25a>
    7f46:	8a 81       	ldd	r24, Y+2	; 0x02
    7f48:	81 33       	cpi	r24, 0x31	; 49
    7f4a:	09 f4       	brne	.+2      	; 0x7f4e <vfprintf+0x25a>
    7f4c:	ba 94       	dec	r11
    7f4e:	1b 14       	cp	r1, r11
    7f50:	1c f0       	brlt	.+6      	; 0x7f58 <vfprintf+0x264>
    7f52:	bb 24       	eor	r11, r11
    7f54:	b3 94       	inc	r11
    7f56:	2d c0       	rjmp	.+90     	; 0x7fb2 <vfprintf+0x2be>
    7f58:	f8 e0       	ldi	r31, 0x08	; 8
    7f5a:	fb 15       	cp	r31, r11
    7f5c:	50 f5       	brcc	.+84     	; 0x7fb2 <vfprintf+0x2be>
    7f5e:	38 e0       	ldi	r19, 0x08	; 8
    7f60:	b3 2e       	mov	r11, r19
    7f62:	27 c0       	rjmp	.+78     	; 0x7fb2 <vfprintf+0x2be>
    7f64:	f6 fc       	sbrc	r15, 6
    7f66:	25 c0       	rjmp	.+74     	; 0x7fb2 <vfprintf+0x2be>
    7f68:	89 2d       	mov	r24, r9
    7f6a:	90 e0       	ldi	r25, 0x00	; 0
    7f6c:	8c 15       	cp	r24, r12
    7f6e:	9d 05       	cpc	r25, r13
    7f70:	4c f0       	brlt	.+18     	; 0x7f84 <vfprintf+0x290>
    7f72:	2c ef       	ldi	r18, 0xFC	; 252
    7f74:	c2 16       	cp	r12, r18
    7f76:	2f ef       	ldi	r18, 0xFF	; 255
    7f78:	d2 06       	cpc	r13, r18
    7f7a:	24 f0       	brlt	.+8      	; 0x7f84 <vfprintf+0x290>
    7f7c:	30 e8       	ldi	r19, 0x80	; 128
    7f7e:	f3 2a       	or	r15, r19
    7f80:	01 c0       	rjmp	.+2      	; 0x7f84 <vfprintf+0x290>
    7f82:	9a 94       	dec	r9
    7f84:	99 20       	and	r9, r9
    7f86:	49 f0       	breq	.+18     	; 0x7f9a <vfprintf+0x2a6>
    7f88:	e2 e0       	ldi	r30, 0x02	; 2
    7f8a:	f0 e0       	ldi	r31, 0x00	; 0
    7f8c:	ec 0f       	add	r30, r28
    7f8e:	fd 1f       	adc	r31, r29
    7f90:	e9 0d       	add	r30, r9
    7f92:	f1 1d       	adc	r31, r1
    7f94:	80 81       	ld	r24, Z
    7f96:	80 33       	cpi	r24, 0x30	; 48
    7f98:	a1 f3       	breq	.-24     	; 0x7f82 <vfprintf+0x28e>
    7f9a:	f7 fe       	sbrs	r15, 7
    7f9c:	0a c0       	rjmp	.+20     	; 0x7fb2 <vfprintf+0x2be>
    7f9e:	b9 2c       	mov	r11, r9
    7fa0:	b3 94       	inc	r11
    7fa2:	89 2d       	mov	r24, r9
    7fa4:	90 e0       	ldi	r25, 0x00	; 0
    7fa6:	c8 16       	cp	r12, r24
    7fa8:	d9 06       	cpc	r13, r25
    7faa:	14 f0       	brlt	.+4      	; 0x7fb0 <vfprintf+0x2bc>
    7fac:	99 24       	eor	r9, r9
    7fae:	01 c0       	rjmp	.+2      	; 0x7fb2 <vfprintf+0x2be>
    7fb0:	9c 18       	sub	r9, r12
    7fb2:	f7 fc       	sbrc	r15, 7
    7fb4:	03 c0       	rjmp	.+6      	; 0x7fbc <vfprintf+0x2c8>
    7fb6:	25 e0       	ldi	r18, 0x05	; 5
    7fb8:	30 e0       	ldi	r19, 0x00	; 0
    7fba:	09 c0       	rjmp	.+18     	; 0x7fce <vfprintf+0x2da>
    7fbc:	1c 14       	cp	r1, r12
    7fbe:	1d 04       	cpc	r1, r13
    7fc0:	1c f0       	brlt	.+6      	; 0x7fc8 <vfprintf+0x2d4>
    7fc2:	21 e0       	ldi	r18, 0x01	; 1
    7fc4:	30 e0       	ldi	r19, 0x00	; 0
    7fc6:	03 c0       	rjmp	.+6      	; 0x7fce <vfprintf+0x2da>
    7fc8:	96 01       	movw	r18, r12
    7fca:	2f 5f       	subi	r18, 0xFF	; 255
    7fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    7fce:	11 23       	and	r17, r17
    7fd0:	11 f0       	breq	.+4      	; 0x7fd6 <vfprintf+0x2e2>
    7fd2:	2f 5f       	subi	r18, 0xFF	; 255
    7fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    7fd6:	99 20       	and	r9, r9
    7fd8:	29 f0       	breq	.+10     	; 0x7fe4 <vfprintf+0x2f0>
    7fda:	89 2d       	mov	r24, r9
    7fdc:	90 e0       	ldi	r25, 0x00	; 0
    7fde:	01 96       	adiw	r24, 0x01	; 1
    7fe0:	28 0f       	add	r18, r24
    7fe2:	39 1f       	adc	r19, r25
    7fe4:	88 2d       	mov	r24, r8
    7fe6:	90 e0       	ldi	r25, 0x00	; 0
    7fe8:	28 17       	cp	r18, r24
    7fea:	39 07       	cpc	r19, r25
    7fec:	14 f0       	brlt	.+4      	; 0x7ff2 <vfprintf+0x2fe>
    7fee:	88 24       	eor	r8, r8
    7ff0:	01 c0       	rjmp	.+2      	; 0x7ff4 <vfprintf+0x300>
    7ff2:	82 1a       	sub	r8, r18
    7ff4:	4f 2c       	mov	r4, r15
    7ff6:	55 24       	eor	r5, r5
    7ff8:	c2 01       	movw	r24, r4
    7ffa:	89 70       	andi	r24, 0x09	; 9
    7ffc:	90 70       	andi	r25, 0x00	; 0
    7ffe:	89 2b       	or	r24, r25
    8000:	39 f0       	breq	.+14     	; 0x8010 <vfprintf+0x31c>
    8002:	08 c0       	rjmp	.+16     	; 0x8014 <vfprintf+0x320>
    8004:	80 e2       	ldi	r24, 0x20	; 32
    8006:	90 e0       	ldi	r25, 0x00	; 0
    8008:	b3 01       	movw	r22, r6
    800a:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    800e:	8a 94       	dec	r8
    8010:	88 20       	and	r8, r8
    8012:	c1 f7       	brne	.-16     	; 0x8004 <vfprintf+0x310>
    8014:	11 23       	and	r17, r17
    8016:	29 f0       	breq	.+10     	; 0x8022 <vfprintf+0x32e>
    8018:	81 2f       	mov	r24, r17
    801a:	90 e0       	ldi	r25, 0x00	; 0
    801c:	b3 01       	movw	r22, r6
    801e:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    8022:	43 fe       	sbrs	r4, 3
    8024:	07 c0       	rjmp	.+14     	; 0x8034 <vfprintf+0x340>
    8026:	08 c0       	rjmp	.+16     	; 0x8038 <vfprintf+0x344>
    8028:	80 e3       	ldi	r24, 0x30	; 48
    802a:	90 e0       	ldi	r25, 0x00	; 0
    802c:	b3 01       	movw	r22, r6
    802e:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    8032:	8a 94       	dec	r8
    8034:	88 20       	and	r8, r8
    8036:	c1 f7       	brne	.-16     	; 0x8028 <vfprintf+0x334>
    8038:	f7 fe       	sbrs	r15, 7
    803a:	46 c0       	rjmp	.+140    	; 0x80c8 <vfprintf+0x3d4>
    803c:	86 01       	movw	r16, r12
    803e:	d7 fe       	sbrs	r13, 7
    8040:	02 c0       	rjmp	.+4      	; 0x8046 <vfprintf+0x352>
    8042:	00 e0       	ldi	r16, 0x00	; 0
    8044:	10 e0       	ldi	r17, 0x00	; 0
    8046:	76 01       	movw	r14, r12
    8048:	08 94       	sec
    804a:	e1 1c       	adc	r14, r1
    804c:	f1 1c       	adc	r15, r1
    804e:	e0 1a       	sub	r14, r16
    8050:	f1 0a       	sbc	r15, r17
    8052:	41 e0       	ldi	r20, 0x01	; 1
    8054:	50 e0       	ldi	r21, 0x00	; 0
    8056:	4c 0f       	add	r20, r28
    8058:	5d 1f       	adc	r21, r29
    805a:	e4 0e       	add	r14, r20
    805c:	f5 1e       	adc	r15, r21
    805e:	26 01       	movw	r4, r12
    8060:	4b 18       	sub	r4, r11
    8062:	51 08       	sbc	r5, r1
    8064:	89 2d       	mov	r24, r9
    8066:	90 e0       	ldi	r25, 0x00	; 0
    8068:	aa 24       	eor	r10, r10
    806a:	bb 24       	eor	r11, r11
    806c:	a8 1a       	sub	r10, r24
    806e:	b9 0a       	sbc	r11, r25
    8070:	5f ef       	ldi	r21, 0xFF	; 255
    8072:	0f 3f       	cpi	r16, 0xFF	; 255
    8074:	15 07       	cpc	r17, r21
    8076:	29 f4       	brne	.+10     	; 0x8082 <vfprintf+0x38e>
    8078:	8e e2       	ldi	r24, 0x2E	; 46
    807a:	90 e0       	ldi	r25, 0x00	; 0
    807c:	b3 01       	movw	r22, r6
    807e:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    8082:	c0 16       	cp	r12, r16
    8084:	d1 06       	cpc	r13, r17
    8086:	34 f0       	brlt	.+12     	; 0x8094 <vfprintf+0x3a0>
    8088:	40 16       	cp	r4, r16
    808a:	51 06       	cpc	r5, r17
    808c:	1c f4       	brge	.+6      	; 0x8094 <vfprintf+0x3a0>
    808e:	f7 01       	movw	r30, r14
    8090:	80 81       	ld	r24, Z
    8092:	01 c0       	rjmp	.+2      	; 0x8096 <vfprintf+0x3a2>
    8094:	80 e3       	ldi	r24, 0x30	; 48
    8096:	01 50       	subi	r16, 0x01	; 1
    8098:	10 40       	sbci	r17, 0x00	; 0
    809a:	08 94       	sec
    809c:	e1 1c       	adc	r14, r1
    809e:	f1 1c       	adc	r15, r1
    80a0:	0a 15       	cp	r16, r10
    80a2:	1b 05       	cpc	r17, r11
    80a4:	2c f0       	brlt	.+10     	; 0x80b0 <vfprintf+0x3bc>
    80a6:	90 e0       	ldi	r25, 0x00	; 0
    80a8:	b3 01       	movw	r22, r6
    80aa:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    80ae:	e0 cf       	rjmp	.-64     	; 0x8070 <vfprintf+0x37c>
    80b0:	0c 15       	cp	r16, r12
    80b2:	1d 05       	cpc	r17, r13
    80b4:	39 f4       	brne	.+14     	; 0x80c4 <vfprintf+0x3d0>
    80b6:	9a 81       	ldd	r25, Y+2	; 0x02
    80b8:	96 33       	cpi	r25, 0x36	; 54
    80ba:	18 f4       	brcc	.+6      	; 0x80c2 <vfprintf+0x3ce>
    80bc:	95 33       	cpi	r25, 0x35	; 53
    80be:	11 f4       	brne	.+4      	; 0x80c4 <vfprintf+0x3d0>
    80c0:	24 fe       	sbrs	r2, 4
    80c2:	81 e3       	ldi	r24, 0x31	; 49
    80c4:	90 e0       	ldi	r25, 0x00	; 0
    80c6:	4b c0       	rjmp	.+150    	; 0x815e <vfprintf+0x46a>
    80c8:	8a 81       	ldd	r24, Y+2	; 0x02
    80ca:	81 33       	cpi	r24, 0x31	; 49
    80cc:	09 f0       	breq	.+2      	; 0x80d0 <vfprintf+0x3dc>
    80ce:	0f 7e       	andi	r16, 0xEF	; 239
    80d0:	90 e0       	ldi	r25, 0x00	; 0
    80d2:	b3 01       	movw	r22, r6
    80d4:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    80d8:	99 20       	and	r9, r9
    80da:	a1 f0       	breq	.+40     	; 0x8104 <vfprintf+0x410>
    80dc:	8e e2       	ldi	r24, 0x2E	; 46
    80de:	90 e0       	ldi	r25, 0x00	; 0
    80e0:	b3 01       	movw	r22, r6
    80e2:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    80e6:	12 e0       	ldi	r17, 0x02	; 2
    80e8:	e1 e0       	ldi	r30, 0x01	; 1
    80ea:	f0 e0       	ldi	r31, 0x00	; 0
    80ec:	ec 0f       	add	r30, r28
    80ee:	fd 1f       	adc	r31, r29
    80f0:	e1 0f       	add	r30, r17
    80f2:	f1 1d       	adc	r31, r1
    80f4:	1f 5f       	subi	r17, 0xFF	; 255
    80f6:	80 81       	ld	r24, Z
    80f8:	90 e0       	ldi	r25, 0x00	; 0
    80fa:	b3 01       	movw	r22, r6
    80fc:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    8100:	9a 94       	dec	r9
    8102:	91 f7       	brne	.-28     	; 0x80e8 <vfprintf+0x3f4>
    8104:	44 fc       	sbrc	r4, 4
    8106:	03 c0       	rjmp	.+6      	; 0x810e <vfprintf+0x41a>
    8108:	85 e6       	ldi	r24, 0x65	; 101
    810a:	90 e0       	ldi	r25, 0x00	; 0
    810c:	02 c0       	rjmp	.+4      	; 0x8112 <vfprintf+0x41e>
    810e:	85 e4       	ldi	r24, 0x45	; 69
    8110:	90 e0       	ldi	r25, 0x00	; 0
    8112:	b3 01       	movw	r22, r6
    8114:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    8118:	d7 fc       	sbrc	r13, 7
    811a:	05 c0       	rjmp	.+10     	; 0x8126 <vfprintf+0x432>
    811c:	c1 14       	cp	r12, r1
    811e:	d1 04       	cpc	r13, r1
    8120:	41 f4       	brne	.+16     	; 0x8132 <vfprintf+0x43e>
    8122:	04 ff       	sbrs	r16, 4
    8124:	06 c0       	rjmp	.+12     	; 0x8132 <vfprintf+0x43e>
    8126:	d0 94       	com	r13
    8128:	c1 94       	neg	r12
    812a:	d1 08       	sbc	r13, r1
    812c:	d3 94       	inc	r13
    812e:	8d e2       	ldi	r24, 0x2D	; 45
    8130:	01 c0       	rjmp	.+2      	; 0x8134 <vfprintf+0x440>
    8132:	8b e2       	ldi	r24, 0x2B	; 43
    8134:	90 e0       	ldi	r25, 0x00	; 0
    8136:	b3 01       	movw	r22, r6
    8138:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    813c:	80 e3       	ldi	r24, 0x30	; 48
    813e:	05 c0       	rjmp	.+10     	; 0x814a <vfprintf+0x456>
    8140:	8f 5f       	subi	r24, 0xFF	; 255
    8142:	26 ef       	ldi	r18, 0xF6	; 246
    8144:	3f ef       	ldi	r19, 0xFF	; 255
    8146:	c2 0e       	add	r12, r18
    8148:	d3 1e       	adc	r13, r19
    814a:	3a e0       	ldi	r19, 0x0A	; 10
    814c:	c3 16       	cp	r12, r19
    814e:	d1 04       	cpc	r13, r1
    8150:	bc f7       	brge	.-18     	; 0x8140 <vfprintf+0x44c>
    8152:	90 e0       	ldi	r25, 0x00	; 0
    8154:	b3 01       	movw	r22, r6
    8156:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    815a:	c6 01       	movw	r24, r12
    815c:	c0 96       	adiw	r24, 0x30	; 48
    815e:	b3 01       	movw	r22, r6
    8160:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    8164:	cc 84       	ldd	r12, Y+12	; 0x0c
    8166:	dd 84       	ldd	r13, Y+13	; 0x0d
    8168:	52 c1       	rjmp	.+676    	; 0x840e <vfprintf+0x71a>
    816a:	93 36       	cpi	r25, 0x63	; 99
    816c:	31 f0       	breq	.+12     	; 0x817a <vfprintf+0x486>
    816e:	93 37       	cpi	r25, 0x73	; 115
    8170:	99 f0       	breq	.+38     	; 0x8198 <vfprintf+0x4a4>
    8172:	93 35       	cpi	r25, 0x53	; 83
    8174:	09 f0       	breq	.+2      	; 0x8178 <vfprintf+0x484>
    8176:	59 c0       	rjmp	.+178    	; 0x822a <vfprintf+0x536>
    8178:	23 c0       	rjmp	.+70     	; 0x81c0 <vfprintf+0x4cc>
    817a:	f6 01       	movw	r30, r12
    817c:	80 81       	ld	r24, Z
    817e:	89 83       	std	Y+1, r24	; 0x01
    8180:	5e 01       	movw	r10, r28
    8182:	08 94       	sec
    8184:	a1 1c       	adc	r10, r1
    8186:	b1 1c       	adc	r11, r1
    8188:	22 e0       	ldi	r18, 0x02	; 2
    818a:	30 e0       	ldi	r19, 0x00	; 0
    818c:	c2 0e       	add	r12, r18
    818e:	d3 1e       	adc	r13, r19
    8190:	21 e0       	ldi	r18, 0x01	; 1
    8192:	e2 2e       	mov	r14, r18
    8194:	f1 2c       	mov	r15, r1
    8196:	12 c0       	rjmp	.+36     	; 0x81bc <vfprintf+0x4c8>
    8198:	f6 01       	movw	r30, r12
    819a:	a0 80       	ld	r10, Z
    819c:	b1 80       	ldd	r11, Z+1	; 0x01
    819e:	16 fd       	sbrc	r17, 6
    81a0:	03 c0       	rjmp	.+6      	; 0x81a8 <vfprintf+0x4b4>
    81a2:	6f ef       	ldi	r22, 0xFF	; 255
    81a4:	7f ef       	ldi	r23, 0xFF	; 255
    81a6:	02 c0       	rjmp	.+4      	; 0x81ac <vfprintf+0x4b8>
    81a8:	69 2d       	mov	r22, r9
    81aa:	70 e0       	ldi	r23, 0x00	; 0
    81ac:	22 e0       	ldi	r18, 0x02	; 2
    81ae:	30 e0       	ldi	r19, 0x00	; 0
    81b0:	c2 0e       	add	r12, r18
    81b2:	d3 1e       	adc	r13, r19
    81b4:	c5 01       	movw	r24, r10
    81b6:	0e 94 5e 49 	call	0x92bc	; 0x92bc <strnlen>
    81ba:	7c 01       	movw	r14, r24
    81bc:	1f 77       	andi	r17, 0x7F	; 127
    81be:	13 c0       	rjmp	.+38     	; 0x81e6 <vfprintf+0x4f2>
    81c0:	f6 01       	movw	r30, r12
    81c2:	a0 80       	ld	r10, Z
    81c4:	b1 80       	ldd	r11, Z+1	; 0x01
    81c6:	16 fd       	sbrc	r17, 6
    81c8:	03 c0       	rjmp	.+6      	; 0x81d0 <vfprintf+0x4dc>
    81ca:	6f ef       	ldi	r22, 0xFF	; 255
    81cc:	7f ef       	ldi	r23, 0xFF	; 255
    81ce:	02 c0       	rjmp	.+4      	; 0x81d4 <vfprintf+0x4e0>
    81d0:	69 2d       	mov	r22, r9
    81d2:	70 e0       	ldi	r23, 0x00	; 0
    81d4:	22 e0       	ldi	r18, 0x02	; 2
    81d6:	30 e0       	ldi	r19, 0x00	; 0
    81d8:	c2 0e       	add	r12, r18
    81da:	d3 1e       	adc	r13, r19
    81dc:	c5 01       	movw	r24, r10
    81de:	0e 94 53 49 	call	0x92a6	; 0x92a6 <strnlen_P>
    81e2:	7c 01       	movw	r14, r24
    81e4:	10 68       	ori	r17, 0x80	; 128
    81e6:	13 ff       	sbrs	r17, 3
    81e8:	07 c0       	rjmp	.+14     	; 0x81f8 <vfprintf+0x504>
    81ea:	1b c0       	rjmp	.+54     	; 0x8222 <vfprintf+0x52e>
    81ec:	80 e2       	ldi	r24, 0x20	; 32
    81ee:	90 e0       	ldi	r25, 0x00	; 0
    81f0:	b3 01       	movw	r22, r6
    81f2:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    81f6:	8a 94       	dec	r8
    81f8:	88 2d       	mov	r24, r8
    81fa:	90 e0       	ldi	r25, 0x00	; 0
    81fc:	e8 16       	cp	r14, r24
    81fe:	f9 06       	cpc	r15, r25
    8200:	a8 f3       	brcs	.-22     	; 0x81ec <vfprintf+0x4f8>
    8202:	0f c0       	rjmp	.+30     	; 0x8222 <vfprintf+0x52e>
    8204:	f5 01       	movw	r30, r10
    8206:	17 fd       	sbrc	r17, 7
    8208:	85 91       	lpm	r24, Z+
    820a:	17 ff       	sbrs	r17, 7
    820c:	81 91       	ld	r24, Z+
    820e:	5f 01       	movw	r10, r30
    8210:	90 e0       	ldi	r25, 0x00	; 0
    8212:	b3 01       	movw	r22, r6
    8214:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    8218:	81 10       	cpse	r8, r1
    821a:	8a 94       	dec	r8
    821c:	08 94       	sec
    821e:	e1 08       	sbc	r14, r1
    8220:	f1 08       	sbc	r15, r1
    8222:	e1 14       	cp	r14, r1
    8224:	f1 04       	cpc	r15, r1
    8226:	71 f7       	brne	.-36     	; 0x8204 <vfprintf+0x510>
    8228:	f2 c0       	rjmp	.+484    	; 0x840e <vfprintf+0x71a>
    822a:	94 36       	cpi	r25, 0x64	; 100
    822c:	11 f0       	breq	.+4      	; 0x8232 <vfprintf+0x53e>
    822e:	99 36       	cpi	r25, 0x69	; 105
    8230:	89 f5       	brne	.+98     	; 0x8294 <vfprintf+0x5a0>
    8232:	17 ff       	sbrs	r17, 7
    8234:	08 c0       	rjmp	.+16     	; 0x8246 <vfprintf+0x552>
    8236:	f6 01       	movw	r30, r12
    8238:	20 81       	ld	r18, Z
    823a:	31 81       	ldd	r19, Z+1	; 0x01
    823c:	42 81       	ldd	r20, Z+2	; 0x02
    823e:	53 81       	ldd	r21, Z+3	; 0x03
    8240:	84 e0       	ldi	r24, 0x04	; 4
    8242:	90 e0       	ldi	r25, 0x00	; 0
    8244:	0a c0       	rjmp	.+20     	; 0x825a <vfprintf+0x566>
    8246:	f6 01       	movw	r30, r12
    8248:	80 81       	ld	r24, Z
    824a:	91 81       	ldd	r25, Z+1	; 0x01
    824c:	9c 01       	movw	r18, r24
    824e:	44 27       	eor	r20, r20
    8250:	37 fd       	sbrc	r19, 7
    8252:	40 95       	com	r20
    8254:	54 2f       	mov	r21, r20
    8256:	82 e0       	ldi	r24, 0x02	; 2
    8258:	90 e0       	ldi	r25, 0x00	; 0
    825a:	c8 0e       	add	r12, r24
    825c:	d9 1e       	adc	r13, r25
    825e:	9f e6       	ldi	r25, 0x6F	; 111
    8260:	f9 2e       	mov	r15, r25
    8262:	f1 22       	and	r15, r17
    8264:	57 ff       	sbrs	r21, 7
    8266:	09 c0       	rjmp	.+18     	; 0x827a <vfprintf+0x586>
    8268:	50 95       	com	r21
    826a:	40 95       	com	r20
    826c:	30 95       	com	r19
    826e:	21 95       	neg	r18
    8270:	3f 4f       	sbci	r19, 0xFF	; 255
    8272:	4f 4f       	sbci	r20, 0xFF	; 255
    8274:	5f 4f       	sbci	r21, 0xFF	; 255
    8276:	90 e8       	ldi	r25, 0x80	; 128
    8278:	f9 2a       	or	r15, r25
    827a:	ca 01       	movw	r24, r20
    827c:	b9 01       	movw	r22, r18
    827e:	ae 01       	movw	r20, r28
    8280:	4f 5f       	subi	r20, 0xFF	; 255
    8282:	5f 4f       	sbci	r21, 0xFF	; 255
    8284:	2a e0       	ldi	r18, 0x0A	; 10
    8286:	30 e0       	ldi	r19, 0x00	; 0
    8288:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <__ultoa_invert>
    828c:	e8 2e       	mov	r14, r24
    828e:	e8 89       	ldd	r30, Y+16	; 0x10
    8290:	ee 1a       	sub	r14, r30
    8292:	41 c0       	rjmp	.+130    	; 0x8316 <vfprintf+0x622>
    8294:	95 37       	cpi	r25, 0x75	; 117
    8296:	21 f4       	brne	.+8      	; 0x82a0 <vfprintf+0x5ac>
    8298:	1f 7e       	andi	r17, 0xEF	; 239
    829a:	2a e0       	ldi	r18, 0x0A	; 10
    829c:	30 e0       	ldi	r19, 0x00	; 0
    829e:	1c c0       	rjmp	.+56     	; 0x82d8 <vfprintf+0x5e4>
    82a0:	19 7f       	andi	r17, 0xF9	; 249
    82a2:	9f 36       	cpi	r25, 0x6F	; 111
    82a4:	61 f0       	breq	.+24     	; 0x82be <vfprintf+0x5ca>
    82a6:	90 37       	cpi	r25, 0x70	; 112
    82a8:	20 f4       	brcc	.+8      	; 0x82b2 <vfprintf+0x5be>
    82aa:	98 35       	cpi	r25, 0x58	; 88
    82ac:	09 f0       	breq	.+2      	; 0x82b0 <vfprintf+0x5bc>
    82ae:	b2 c0       	rjmp	.+356    	; 0x8414 <vfprintf+0x720>
    82b0:	0f c0       	rjmp	.+30     	; 0x82d0 <vfprintf+0x5dc>
    82b2:	90 37       	cpi	r25, 0x70	; 112
    82b4:	39 f0       	breq	.+14     	; 0x82c4 <vfprintf+0x5d0>
    82b6:	98 37       	cpi	r25, 0x78	; 120
    82b8:	09 f0       	breq	.+2      	; 0x82bc <vfprintf+0x5c8>
    82ba:	ac c0       	rjmp	.+344    	; 0x8414 <vfprintf+0x720>
    82bc:	04 c0       	rjmp	.+8      	; 0x82c6 <vfprintf+0x5d2>
    82be:	28 e0       	ldi	r18, 0x08	; 8
    82c0:	30 e0       	ldi	r19, 0x00	; 0
    82c2:	0a c0       	rjmp	.+20     	; 0x82d8 <vfprintf+0x5e4>
    82c4:	10 61       	ori	r17, 0x10	; 16
    82c6:	14 fd       	sbrc	r17, 4
    82c8:	14 60       	ori	r17, 0x04	; 4
    82ca:	20 e1       	ldi	r18, 0x10	; 16
    82cc:	30 e0       	ldi	r19, 0x00	; 0
    82ce:	04 c0       	rjmp	.+8      	; 0x82d8 <vfprintf+0x5e4>
    82d0:	14 fd       	sbrc	r17, 4
    82d2:	16 60       	ori	r17, 0x06	; 6
    82d4:	20 e1       	ldi	r18, 0x10	; 16
    82d6:	32 e0       	ldi	r19, 0x02	; 2
    82d8:	17 ff       	sbrs	r17, 7
    82da:	08 c0       	rjmp	.+16     	; 0x82ec <vfprintf+0x5f8>
    82dc:	f6 01       	movw	r30, r12
    82de:	60 81       	ld	r22, Z
    82e0:	71 81       	ldd	r23, Z+1	; 0x01
    82e2:	82 81       	ldd	r24, Z+2	; 0x02
    82e4:	93 81       	ldd	r25, Z+3	; 0x03
    82e6:	44 e0       	ldi	r20, 0x04	; 4
    82e8:	50 e0       	ldi	r21, 0x00	; 0
    82ea:	08 c0       	rjmp	.+16     	; 0x82fc <vfprintf+0x608>
    82ec:	f6 01       	movw	r30, r12
    82ee:	80 81       	ld	r24, Z
    82f0:	91 81       	ldd	r25, Z+1	; 0x01
    82f2:	bc 01       	movw	r22, r24
    82f4:	80 e0       	ldi	r24, 0x00	; 0
    82f6:	90 e0       	ldi	r25, 0x00	; 0
    82f8:	42 e0       	ldi	r20, 0x02	; 2
    82fa:	50 e0       	ldi	r21, 0x00	; 0
    82fc:	c4 0e       	add	r12, r20
    82fe:	d5 1e       	adc	r13, r21
    8300:	ae 01       	movw	r20, r28
    8302:	4f 5f       	subi	r20, 0xFF	; 255
    8304:	5f 4f       	sbci	r21, 0xFF	; 255
    8306:	0e 94 f8 49 	call	0x93f0	; 0x93f0 <__ultoa_invert>
    830a:	e8 2e       	mov	r14, r24
    830c:	58 89       	ldd	r21, Y+16	; 0x10
    830e:	e5 1a       	sub	r14, r21
    8310:	8f e7       	ldi	r24, 0x7F	; 127
    8312:	f8 2e       	mov	r15, r24
    8314:	f1 22       	and	r15, r17
    8316:	f6 fe       	sbrs	r15, 6
    8318:	0b c0       	rjmp	.+22     	; 0x8330 <vfprintf+0x63c>
    831a:	8e ef       	ldi	r24, 0xFE	; 254
    831c:	f8 22       	and	r15, r24
    831e:	e9 14       	cp	r14, r9
    8320:	38 f4       	brcc	.+14     	; 0x8330 <vfprintf+0x63c>
    8322:	f4 fe       	sbrs	r15, 4
    8324:	07 c0       	rjmp	.+14     	; 0x8334 <vfprintf+0x640>
    8326:	f2 fc       	sbrc	r15, 2
    8328:	05 c0       	rjmp	.+10     	; 0x8334 <vfprintf+0x640>
    832a:	9f ee       	ldi	r25, 0xEF	; 239
    832c:	f9 22       	and	r15, r25
    832e:	02 c0       	rjmp	.+4      	; 0x8334 <vfprintf+0x640>
    8330:	1e 2d       	mov	r17, r14
    8332:	01 c0       	rjmp	.+2      	; 0x8336 <vfprintf+0x642>
    8334:	19 2d       	mov	r17, r9
    8336:	f4 fe       	sbrs	r15, 4
    8338:	0d c0       	rjmp	.+26     	; 0x8354 <vfprintf+0x660>
    833a:	fe 01       	movw	r30, r28
    833c:	ee 0d       	add	r30, r14
    833e:	f1 1d       	adc	r31, r1
    8340:	80 81       	ld	r24, Z
    8342:	80 33       	cpi	r24, 0x30	; 48
    8344:	19 f4       	brne	.+6      	; 0x834c <vfprintf+0x658>
    8346:	e9 ee       	ldi	r30, 0xE9	; 233
    8348:	fe 22       	and	r15, r30
    834a:	08 c0       	rjmp	.+16     	; 0x835c <vfprintf+0x668>
    834c:	1f 5f       	subi	r17, 0xFF	; 255
    834e:	f2 fe       	sbrs	r15, 2
    8350:	05 c0       	rjmp	.+10     	; 0x835c <vfprintf+0x668>
    8352:	03 c0       	rjmp	.+6      	; 0x835a <vfprintf+0x666>
    8354:	8f 2d       	mov	r24, r15
    8356:	86 78       	andi	r24, 0x86	; 134
    8358:	09 f0       	breq	.+2      	; 0x835c <vfprintf+0x668>
    835a:	1f 5f       	subi	r17, 0xFF	; 255
    835c:	0f 2d       	mov	r16, r15
    835e:	f3 fc       	sbrc	r15, 3
    8360:	14 c0       	rjmp	.+40     	; 0x838a <vfprintf+0x696>
    8362:	f0 fe       	sbrs	r15, 0
    8364:	0f c0       	rjmp	.+30     	; 0x8384 <vfprintf+0x690>
    8366:	18 15       	cp	r17, r8
    8368:	10 f0       	brcs	.+4      	; 0x836e <vfprintf+0x67a>
    836a:	9e 2c       	mov	r9, r14
    836c:	0b c0       	rjmp	.+22     	; 0x8384 <vfprintf+0x690>
    836e:	9e 2c       	mov	r9, r14
    8370:	98 0c       	add	r9, r8
    8372:	91 1a       	sub	r9, r17
    8374:	18 2d       	mov	r17, r8
    8376:	06 c0       	rjmp	.+12     	; 0x8384 <vfprintf+0x690>
    8378:	80 e2       	ldi	r24, 0x20	; 32
    837a:	90 e0       	ldi	r25, 0x00	; 0
    837c:	b3 01       	movw	r22, r6
    837e:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    8382:	1f 5f       	subi	r17, 0xFF	; 255
    8384:	18 15       	cp	r17, r8
    8386:	c0 f3       	brcs	.-16     	; 0x8378 <vfprintf+0x684>
    8388:	04 c0       	rjmp	.+8      	; 0x8392 <vfprintf+0x69e>
    838a:	18 15       	cp	r17, r8
    838c:	10 f4       	brcc	.+4      	; 0x8392 <vfprintf+0x69e>
    838e:	81 1a       	sub	r8, r17
    8390:	01 c0       	rjmp	.+2      	; 0x8394 <vfprintf+0x6a0>
    8392:	88 24       	eor	r8, r8
    8394:	04 ff       	sbrs	r16, 4
    8396:	0f c0       	rjmp	.+30     	; 0x83b6 <vfprintf+0x6c2>
    8398:	80 e3       	ldi	r24, 0x30	; 48
    839a:	90 e0       	ldi	r25, 0x00	; 0
    839c:	b3 01       	movw	r22, r6
    839e:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    83a2:	02 ff       	sbrs	r16, 2
    83a4:	1d c0       	rjmp	.+58     	; 0x83e0 <vfprintf+0x6ec>
    83a6:	01 fd       	sbrc	r16, 1
    83a8:	03 c0       	rjmp	.+6      	; 0x83b0 <vfprintf+0x6bc>
    83aa:	88 e7       	ldi	r24, 0x78	; 120
    83ac:	90 e0       	ldi	r25, 0x00	; 0
    83ae:	0e c0       	rjmp	.+28     	; 0x83cc <vfprintf+0x6d8>
    83b0:	88 e5       	ldi	r24, 0x58	; 88
    83b2:	90 e0       	ldi	r25, 0x00	; 0
    83b4:	0b c0       	rjmp	.+22     	; 0x83cc <vfprintf+0x6d8>
    83b6:	80 2f       	mov	r24, r16
    83b8:	86 78       	andi	r24, 0x86	; 134
    83ba:	91 f0       	breq	.+36     	; 0x83e0 <vfprintf+0x6ec>
    83bc:	01 ff       	sbrs	r16, 1
    83be:	02 c0       	rjmp	.+4      	; 0x83c4 <vfprintf+0x6d0>
    83c0:	8b e2       	ldi	r24, 0x2B	; 43
    83c2:	01 c0       	rjmp	.+2      	; 0x83c6 <vfprintf+0x6d2>
    83c4:	80 e2       	ldi	r24, 0x20	; 32
    83c6:	f7 fc       	sbrc	r15, 7
    83c8:	8d e2       	ldi	r24, 0x2D	; 45
    83ca:	90 e0       	ldi	r25, 0x00	; 0
    83cc:	b3 01       	movw	r22, r6
    83ce:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    83d2:	06 c0       	rjmp	.+12     	; 0x83e0 <vfprintf+0x6ec>
    83d4:	80 e3       	ldi	r24, 0x30	; 48
    83d6:	90 e0       	ldi	r25, 0x00	; 0
    83d8:	b3 01       	movw	r22, r6
    83da:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    83de:	9a 94       	dec	r9
    83e0:	e9 14       	cp	r14, r9
    83e2:	c0 f3       	brcs	.-16     	; 0x83d4 <vfprintf+0x6e0>
    83e4:	ea 94       	dec	r14
    83e6:	e1 e0       	ldi	r30, 0x01	; 1
    83e8:	f0 e0       	ldi	r31, 0x00	; 0
    83ea:	ec 0f       	add	r30, r28
    83ec:	fd 1f       	adc	r31, r29
    83ee:	ee 0d       	add	r30, r14
    83f0:	f1 1d       	adc	r31, r1
    83f2:	80 81       	ld	r24, Z
    83f4:	90 e0       	ldi	r25, 0x00	; 0
    83f6:	b3 01       	movw	r22, r6
    83f8:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    83fc:	ee 20       	and	r14, r14
    83fe:	91 f7       	brne	.-28     	; 0x83e4 <vfprintf+0x6f0>
    8400:	06 c0       	rjmp	.+12     	; 0x840e <vfprintf+0x71a>
    8402:	80 e2       	ldi	r24, 0x20	; 32
    8404:	90 e0       	ldi	r25, 0x00	; 0
    8406:	b3 01       	movw	r22, r6
    8408:	0e 94 a9 49 	call	0x9352	; 0x9352 <fputc>
    840c:	8a 94       	dec	r8
    840e:	88 20       	and	r8, r8
    8410:	c1 f7       	brne	.-16     	; 0x8402 <vfprintf+0x70e>
    8412:	99 cc       	rjmp	.-1742   	; 0x7d46 <vfprintf+0x52>
    8414:	f3 01       	movw	r30, r6
    8416:	66 81       	ldd	r22, Z+6	; 0x06
    8418:	77 81       	ldd	r23, Z+7	; 0x07
    841a:	cb 01       	movw	r24, r22
    841c:	61 96       	adiw	r28, 0x11	; 17
    841e:	cd bf       	out	0x3d, r28	; 61
    8420:	de bf       	out	0x3e, r29	; 62
    8422:	cf 91       	pop	r28
    8424:	df 91       	pop	r29
    8426:	1f 91       	pop	r17
    8428:	0f 91       	pop	r16
    842a:	ff 90       	pop	r15
    842c:	ef 90       	pop	r14
    842e:	df 90       	pop	r13
    8430:	cf 90       	pop	r12
    8432:	bf 90       	pop	r11
    8434:	af 90       	pop	r10
    8436:	9f 90       	pop	r9
    8438:	8f 90       	pop	r8
    843a:	7f 90       	pop	r7
    843c:	6f 90       	pop	r6
    843e:	5f 90       	pop	r5
    8440:	4f 90       	pop	r4
    8442:	3f 90       	pop	r3
    8444:	2f 90       	pop	r2
    8446:	08 95       	ret

00008448 <__subsf3>:
    8448:	50 58       	subi	r21, 0x80	; 128

0000844a <__addsf3>:
    844a:	bb 27       	eor	r27, r27
    844c:	aa 27       	eor	r26, r26
    844e:	0e d0       	rcall	.+28     	; 0x846c <__addsf3x>
    8450:	29 c2       	rjmp	.+1106   	; 0x88a4 <__fp_round>
    8452:	f2 d1       	rcall	.+996    	; 0x8838 <__fp_pscA>
    8454:	30 f0       	brcs	.+12     	; 0x8462 <__addsf3+0x18>
    8456:	f7 d1       	rcall	.+1006   	; 0x8846 <__fp_pscB>
    8458:	20 f0       	brcs	.+8      	; 0x8462 <__addsf3+0x18>
    845a:	31 f4       	brne	.+12     	; 0x8468 <__addsf3+0x1e>
    845c:	9f 3f       	cpi	r25, 0xFF	; 255
    845e:	11 f4       	brne	.+4      	; 0x8464 <__addsf3+0x1a>
    8460:	1e f4       	brtc	.+6      	; 0x8468 <__addsf3+0x1e>
    8462:	c2 c1       	rjmp	.+900    	; 0x87e8 <__fp_nan>
    8464:	0e f4       	brtc	.+2      	; 0x8468 <__addsf3+0x1e>
    8466:	e0 95       	com	r30
    8468:	e7 fb       	bst	r30, 7
    846a:	8f c1       	rjmp	.+798    	; 0x878a <__fp_inf>

0000846c <__addsf3x>:
    846c:	e9 2f       	mov	r30, r25
    846e:	3c d2       	rcall	.+1144   	; 0x88e8 <__fp_split3>
    8470:	80 f3       	brcs	.-32     	; 0x8452 <__addsf3+0x8>
    8472:	ba 17       	cp	r27, r26
    8474:	62 07       	cpc	r22, r18
    8476:	73 07       	cpc	r23, r19
    8478:	84 07       	cpc	r24, r20
    847a:	95 07       	cpc	r25, r21
    847c:	18 f0       	brcs	.+6      	; 0x8484 <__addsf3x+0x18>
    847e:	71 f4       	brne	.+28     	; 0x849c <__addsf3x+0x30>
    8480:	9e f5       	brtc	.+102    	; 0x84e8 <__addsf3x+0x7c>
    8482:	6b c2       	rjmp	.+1238   	; 0x895a <__fp_zero>
    8484:	0e f4       	brtc	.+2      	; 0x8488 <__addsf3x+0x1c>
    8486:	e0 95       	com	r30
    8488:	0b 2e       	mov	r0, r27
    848a:	ba 2f       	mov	r27, r26
    848c:	a0 2d       	mov	r26, r0
    848e:	0b 01       	movw	r0, r22
    8490:	b9 01       	movw	r22, r18
    8492:	90 01       	movw	r18, r0
    8494:	0c 01       	movw	r0, r24
    8496:	ca 01       	movw	r24, r20
    8498:	a0 01       	movw	r20, r0
    849a:	11 24       	eor	r1, r1
    849c:	ff 27       	eor	r31, r31
    849e:	59 1b       	sub	r21, r25
    84a0:	99 f0       	breq	.+38     	; 0x84c8 <__addsf3x+0x5c>
    84a2:	59 3f       	cpi	r21, 0xF9	; 249
    84a4:	50 f4       	brcc	.+20     	; 0x84ba <__addsf3x+0x4e>
    84a6:	50 3e       	cpi	r21, 0xE0	; 224
    84a8:	68 f1       	brcs	.+90     	; 0x8504 <__addsf3x+0x98>
    84aa:	1a 16       	cp	r1, r26
    84ac:	f0 40       	sbci	r31, 0x00	; 0
    84ae:	a2 2f       	mov	r26, r18
    84b0:	23 2f       	mov	r18, r19
    84b2:	34 2f       	mov	r19, r20
    84b4:	44 27       	eor	r20, r20
    84b6:	58 5f       	subi	r21, 0xF8	; 248
    84b8:	f3 cf       	rjmp	.-26     	; 0x84a0 <__addsf3x+0x34>
    84ba:	46 95       	lsr	r20
    84bc:	37 95       	ror	r19
    84be:	27 95       	ror	r18
    84c0:	a7 95       	ror	r26
    84c2:	f0 40       	sbci	r31, 0x00	; 0
    84c4:	53 95       	inc	r21
    84c6:	c9 f7       	brne	.-14     	; 0x84ba <__addsf3x+0x4e>
    84c8:	7e f4       	brtc	.+30     	; 0x84e8 <__addsf3x+0x7c>
    84ca:	1f 16       	cp	r1, r31
    84cc:	ba 0b       	sbc	r27, r26
    84ce:	62 0b       	sbc	r22, r18
    84d0:	73 0b       	sbc	r23, r19
    84d2:	84 0b       	sbc	r24, r20
    84d4:	ba f0       	brmi	.+46     	; 0x8504 <__addsf3x+0x98>
    84d6:	91 50       	subi	r25, 0x01	; 1
    84d8:	a1 f0       	breq	.+40     	; 0x8502 <__addsf3x+0x96>
    84da:	ff 0f       	add	r31, r31
    84dc:	bb 1f       	adc	r27, r27
    84de:	66 1f       	adc	r22, r22
    84e0:	77 1f       	adc	r23, r23
    84e2:	88 1f       	adc	r24, r24
    84e4:	c2 f7       	brpl	.-16     	; 0x84d6 <__addsf3x+0x6a>
    84e6:	0e c0       	rjmp	.+28     	; 0x8504 <__addsf3x+0x98>
    84e8:	ba 0f       	add	r27, r26
    84ea:	62 1f       	adc	r22, r18
    84ec:	73 1f       	adc	r23, r19
    84ee:	84 1f       	adc	r24, r20
    84f0:	48 f4       	brcc	.+18     	; 0x8504 <__addsf3x+0x98>
    84f2:	87 95       	ror	r24
    84f4:	77 95       	ror	r23
    84f6:	67 95       	ror	r22
    84f8:	b7 95       	ror	r27
    84fa:	f7 95       	ror	r31
    84fc:	9e 3f       	cpi	r25, 0xFE	; 254
    84fe:	08 f0       	brcs	.+2      	; 0x8502 <__addsf3x+0x96>
    8500:	b3 cf       	rjmp	.-154    	; 0x8468 <__addsf3+0x1e>
    8502:	93 95       	inc	r25
    8504:	88 0f       	add	r24, r24
    8506:	08 f0       	brcs	.+2      	; 0x850a <__addsf3x+0x9e>
    8508:	99 27       	eor	r25, r25
    850a:	ee 0f       	add	r30, r30
    850c:	97 95       	ror	r25
    850e:	87 95       	ror	r24
    8510:	08 95       	ret

00008512 <atan>:
    8512:	df 93       	push	r29
    8514:	dd 27       	eor	r29, r29
    8516:	b9 2f       	mov	r27, r25
    8518:	bf 77       	andi	r27, 0x7F	; 127
    851a:	40 e8       	ldi	r20, 0x80	; 128
    851c:	5f e3       	ldi	r21, 0x3F	; 63
    851e:	16 16       	cp	r1, r22
    8520:	17 06       	cpc	r1, r23
    8522:	48 07       	cpc	r20, r24
    8524:	5b 07       	cpc	r21, r27
    8526:	10 f4       	brcc	.+4      	; 0x852c <atan+0x1a>
    8528:	d9 2f       	mov	r29, r25
    852a:	83 d2       	rcall	.+1286   	; 0x8a32 <inverse>
    852c:	9f 93       	push	r25
    852e:	8f 93       	push	r24
    8530:	7f 93       	push	r23
    8532:	6f 93       	push	r22
    8534:	96 d3       	rcall	.+1836   	; 0x8c62 <square>
    8536:	e8 ee       	ldi	r30, 0xE8	; 232
    8538:	f1 e0       	ldi	r31, 0x01	; 1
    853a:	59 d1       	rcall	.+690    	; 0x87ee <__fp_powser>
    853c:	b3 d1       	rcall	.+870    	; 0x88a4 <__fp_round>
    853e:	2f 91       	pop	r18
    8540:	3f 91       	pop	r19
    8542:	4f 91       	pop	r20
    8544:	5f 91       	pop	r21
    8546:	ee d2       	rcall	.+1500   	; 0x8b24 <__mulsf3x>
    8548:	dd 23       	and	r29, r29
    854a:	49 f0       	breq	.+18     	; 0x855e <atan+0x4c>
    854c:	90 58       	subi	r25, 0x80	; 128
    854e:	a2 ea       	ldi	r26, 0xA2	; 162
    8550:	2a ed       	ldi	r18, 0xDA	; 218
    8552:	3f e0       	ldi	r19, 0x0F	; 15
    8554:	49 ec       	ldi	r20, 0xC9	; 201
    8556:	5f e3       	ldi	r21, 0x3F	; 63
    8558:	d0 78       	andi	r29, 0x80	; 128
    855a:	5d 27       	eor	r21, r29
    855c:	87 df       	rcall	.-242    	; 0x846c <__addsf3x>
    855e:	df 91       	pop	r29
    8560:	a1 c1       	rjmp	.+834    	; 0x88a4 <__fp_round>

00008562 <ceil>:
    8562:	e4 d1       	rcall	.+968    	; 0x892c <__fp_trunc>
    8564:	80 f0       	brcs	.+32     	; 0x8586 <ceil+0x24>
    8566:	9f 37       	cpi	r25, 0x7F	; 127
    8568:	40 f4       	brcc	.+16     	; 0x857a <ceil+0x18>
    856a:	91 11       	cpse	r25, r1
    856c:	0e f4       	brtc	.+2      	; 0x8570 <ceil+0xe>
    856e:	f6 c1       	rjmp	.+1004   	; 0x895c <__fp_szero>
    8570:	60 e0       	ldi	r22, 0x00	; 0
    8572:	70 e0       	ldi	r23, 0x00	; 0
    8574:	80 e8       	ldi	r24, 0x80	; 128
    8576:	9f e3       	ldi	r25, 0x3F	; 63
    8578:	08 95       	ret
    857a:	26 f0       	brts	.+8      	; 0x8584 <ceil+0x22>
    857c:	1b 16       	cp	r1, r27
    857e:	61 1d       	adc	r22, r1
    8580:	71 1d       	adc	r23, r1
    8582:	81 1d       	adc	r24, r1
    8584:	08 c1       	rjmp	.+528    	; 0x8796 <__fp_mintl>
    8586:	22 c1       	rjmp	.+580    	; 0x87cc <__fp_mpack>

00008588 <__cmpsf2>:
    8588:	dc d0       	rcall	.+440    	; 0x8742 <__fp_cmp>
    858a:	08 f4       	brcc	.+2      	; 0x858e <__cmpsf2+0x6>
    858c:	81 e0       	ldi	r24, 0x01	; 1
    858e:	08 95       	ret

00008590 <cos>:
    8590:	62 d1       	rcall	.+708    	; 0x8856 <__fp_rempio2>
    8592:	e3 95       	inc	r30
    8594:	98 c1       	rjmp	.+816    	; 0x88c6 <__fp_sinus>

00008596 <__divsf3>:
    8596:	0c d0       	rcall	.+24     	; 0x85b0 <__divsf3x>
    8598:	85 c1       	rjmp	.+778    	; 0x88a4 <__fp_round>
    859a:	55 d1       	rcall	.+682    	; 0x8846 <__fp_pscB>
    859c:	40 f0       	brcs	.+16     	; 0x85ae <__divsf3+0x18>
    859e:	4c d1       	rcall	.+664    	; 0x8838 <__fp_pscA>
    85a0:	30 f0       	brcs	.+12     	; 0x85ae <__divsf3+0x18>
    85a2:	21 f4       	brne	.+8      	; 0x85ac <__divsf3+0x16>
    85a4:	5f 3f       	cpi	r21, 0xFF	; 255
    85a6:	19 f0       	breq	.+6      	; 0x85ae <__divsf3+0x18>
    85a8:	f0 c0       	rjmp	.+480    	; 0x878a <__fp_inf>
    85aa:	51 11       	cpse	r21, r1
    85ac:	d7 c1       	rjmp	.+942    	; 0x895c <__fp_szero>
    85ae:	1c c1       	rjmp	.+568    	; 0x87e8 <__fp_nan>

000085b0 <__divsf3x>:
    85b0:	9b d1       	rcall	.+822    	; 0x88e8 <__fp_split3>
    85b2:	98 f3       	brcs	.-26     	; 0x859a <__divsf3+0x4>

000085b4 <__divsf3_pse>:
    85b4:	99 23       	and	r25, r25
    85b6:	c9 f3       	breq	.-14     	; 0x85aa <__divsf3+0x14>
    85b8:	55 23       	and	r21, r21
    85ba:	b1 f3       	breq	.-20     	; 0x85a8 <__divsf3+0x12>
    85bc:	95 1b       	sub	r25, r21
    85be:	55 0b       	sbc	r21, r21
    85c0:	bb 27       	eor	r27, r27
    85c2:	aa 27       	eor	r26, r26
    85c4:	62 17       	cp	r22, r18
    85c6:	73 07       	cpc	r23, r19
    85c8:	84 07       	cpc	r24, r20
    85ca:	38 f0       	brcs	.+14     	; 0x85da <__divsf3_pse+0x26>
    85cc:	9f 5f       	subi	r25, 0xFF	; 255
    85ce:	5f 4f       	sbci	r21, 0xFF	; 255
    85d0:	22 0f       	add	r18, r18
    85d2:	33 1f       	adc	r19, r19
    85d4:	44 1f       	adc	r20, r20
    85d6:	aa 1f       	adc	r26, r26
    85d8:	a9 f3       	breq	.-22     	; 0x85c4 <__divsf3_pse+0x10>
    85da:	33 d0       	rcall	.+102    	; 0x8642 <__divsf3_pse+0x8e>
    85dc:	0e 2e       	mov	r0, r30
    85de:	3a f0       	brmi	.+14     	; 0x85ee <__divsf3_pse+0x3a>
    85e0:	e0 e8       	ldi	r30, 0x80	; 128
    85e2:	30 d0       	rcall	.+96     	; 0x8644 <__divsf3_pse+0x90>
    85e4:	91 50       	subi	r25, 0x01	; 1
    85e6:	50 40       	sbci	r21, 0x00	; 0
    85e8:	e6 95       	lsr	r30
    85ea:	00 1c       	adc	r0, r0
    85ec:	ca f7       	brpl	.-14     	; 0x85e0 <__divsf3_pse+0x2c>
    85ee:	29 d0       	rcall	.+82     	; 0x8642 <__divsf3_pse+0x8e>
    85f0:	fe 2f       	mov	r31, r30
    85f2:	27 d0       	rcall	.+78     	; 0x8642 <__divsf3_pse+0x8e>
    85f4:	66 0f       	add	r22, r22
    85f6:	77 1f       	adc	r23, r23
    85f8:	88 1f       	adc	r24, r24
    85fa:	bb 1f       	adc	r27, r27
    85fc:	26 17       	cp	r18, r22
    85fe:	37 07       	cpc	r19, r23
    8600:	48 07       	cpc	r20, r24
    8602:	ab 07       	cpc	r26, r27
    8604:	b0 e8       	ldi	r27, 0x80	; 128
    8606:	09 f0       	breq	.+2      	; 0x860a <__divsf3_pse+0x56>
    8608:	bb 0b       	sbc	r27, r27
    860a:	80 2d       	mov	r24, r0
    860c:	bf 01       	movw	r22, r30
    860e:	ff 27       	eor	r31, r31
    8610:	93 58       	subi	r25, 0x83	; 131
    8612:	5f 4f       	sbci	r21, 0xFF	; 255
    8614:	2a f0       	brmi	.+10     	; 0x8620 <__divsf3_pse+0x6c>
    8616:	9e 3f       	cpi	r25, 0xFE	; 254
    8618:	51 05       	cpc	r21, r1
    861a:	68 f0       	brcs	.+26     	; 0x8636 <__divsf3_pse+0x82>
    861c:	b6 c0       	rjmp	.+364    	; 0x878a <__fp_inf>
    861e:	9e c1       	rjmp	.+828    	; 0x895c <__fp_szero>
    8620:	5f 3f       	cpi	r21, 0xFF	; 255
    8622:	ec f3       	brlt	.-6      	; 0x861e <__divsf3_pse+0x6a>
    8624:	98 3e       	cpi	r25, 0xE8	; 232
    8626:	dc f3       	brlt	.-10     	; 0x861e <__divsf3_pse+0x6a>
    8628:	86 95       	lsr	r24
    862a:	77 95       	ror	r23
    862c:	67 95       	ror	r22
    862e:	b7 95       	ror	r27
    8630:	f7 95       	ror	r31
    8632:	9f 5f       	subi	r25, 0xFF	; 255
    8634:	c9 f7       	brne	.-14     	; 0x8628 <__divsf3_pse+0x74>
    8636:	88 0f       	add	r24, r24
    8638:	91 1d       	adc	r25, r1
    863a:	96 95       	lsr	r25
    863c:	87 95       	ror	r24
    863e:	97 f9       	bld	r25, 7
    8640:	08 95       	ret
    8642:	e1 e0       	ldi	r30, 0x01	; 1
    8644:	66 0f       	add	r22, r22
    8646:	77 1f       	adc	r23, r23
    8648:	88 1f       	adc	r24, r24
    864a:	bb 1f       	adc	r27, r27
    864c:	62 17       	cp	r22, r18
    864e:	73 07       	cpc	r23, r19
    8650:	84 07       	cpc	r24, r20
    8652:	ba 07       	cpc	r27, r26
    8654:	20 f0       	brcs	.+8      	; 0x865e <__divsf3_pse+0xaa>
    8656:	62 1b       	sub	r22, r18
    8658:	73 0b       	sbc	r23, r19
    865a:	84 0b       	sbc	r24, r20
    865c:	ba 0b       	sbc	r27, r26
    865e:	ee 1f       	adc	r30, r30
    8660:	88 f7       	brcc	.-30     	; 0x8644 <__divsf3_pse+0x90>
    8662:	e0 95       	com	r30
    8664:	08 95       	ret

00008666 <__fixsfsi>:
    8666:	04 d0       	rcall	.+8      	; 0x8670 <__fixunssfsi>
    8668:	68 94       	set
    866a:	b1 11       	cpse	r27, r1
    866c:	77 c1       	rjmp	.+750    	; 0x895c <__fp_szero>
    866e:	08 95       	ret

00008670 <__fixunssfsi>:
    8670:	43 d1       	rcall	.+646    	; 0x88f8 <__fp_splitA>
    8672:	88 f0       	brcs	.+34     	; 0x8696 <__fixunssfsi+0x26>
    8674:	9f 57       	subi	r25, 0x7F	; 127
    8676:	90 f0       	brcs	.+36     	; 0x869c <__fixunssfsi+0x2c>
    8678:	b9 2f       	mov	r27, r25
    867a:	99 27       	eor	r25, r25
    867c:	b7 51       	subi	r27, 0x17	; 23
    867e:	a0 f0       	brcs	.+40     	; 0x86a8 <__fixunssfsi+0x38>
    8680:	d1 f0       	breq	.+52     	; 0x86b6 <__fixunssfsi+0x46>
    8682:	66 0f       	add	r22, r22
    8684:	77 1f       	adc	r23, r23
    8686:	88 1f       	adc	r24, r24
    8688:	99 1f       	adc	r25, r25
    868a:	1a f0       	brmi	.+6      	; 0x8692 <__fixunssfsi+0x22>
    868c:	ba 95       	dec	r27
    868e:	c9 f7       	brne	.-14     	; 0x8682 <__fixunssfsi+0x12>
    8690:	12 c0       	rjmp	.+36     	; 0x86b6 <__fixunssfsi+0x46>
    8692:	b1 30       	cpi	r27, 0x01	; 1
    8694:	81 f0       	breq	.+32     	; 0x86b6 <__fixunssfsi+0x46>
    8696:	61 d1       	rcall	.+706    	; 0x895a <__fp_zero>
    8698:	b1 e0       	ldi	r27, 0x01	; 1
    869a:	08 95       	ret
    869c:	5e c1       	rjmp	.+700    	; 0x895a <__fp_zero>
    869e:	67 2f       	mov	r22, r23
    86a0:	78 2f       	mov	r23, r24
    86a2:	88 27       	eor	r24, r24
    86a4:	b8 5f       	subi	r27, 0xF8	; 248
    86a6:	39 f0       	breq	.+14     	; 0x86b6 <__fixunssfsi+0x46>
    86a8:	b9 3f       	cpi	r27, 0xF9	; 249
    86aa:	cc f3       	brlt	.-14     	; 0x869e <__fixunssfsi+0x2e>
    86ac:	86 95       	lsr	r24
    86ae:	77 95       	ror	r23
    86b0:	67 95       	ror	r22
    86b2:	b3 95       	inc	r27
    86b4:	d9 f7       	brne	.-10     	; 0x86ac <__fixunssfsi+0x3c>
    86b6:	3e f4       	brtc	.+14     	; 0x86c6 <__fixunssfsi+0x56>
    86b8:	90 95       	com	r25
    86ba:	80 95       	com	r24
    86bc:	70 95       	com	r23
    86be:	61 95       	neg	r22
    86c0:	7f 4f       	sbci	r23, 0xFF	; 255
    86c2:	8f 4f       	sbci	r24, 0xFF	; 255
    86c4:	9f 4f       	sbci	r25, 0xFF	; 255
    86c6:	08 95       	ret

000086c8 <__floatunsisf>:
    86c8:	e8 94       	clt
    86ca:	09 c0       	rjmp	.+18     	; 0x86de <__floatsisf+0x12>

000086cc <__floatsisf>:
    86cc:	97 fb       	bst	r25, 7
    86ce:	3e f4       	brtc	.+14     	; 0x86de <__floatsisf+0x12>
    86d0:	90 95       	com	r25
    86d2:	80 95       	com	r24
    86d4:	70 95       	com	r23
    86d6:	61 95       	neg	r22
    86d8:	7f 4f       	sbci	r23, 0xFF	; 255
    86da:	8f 4f       	sbci	r24, 0xFF	; 255
    86dc:	9f 4f       	sbci	r25, 0xFF	; 255
    86de:	99 23       	and	r25, r25
    86e0:	a9 f0       	breq	.+42     	; 0x870c <__floatsisf+0x40>
    86e2:	f9 2f       	mov	r31, r25
    86e4:	96 e9       	ldi	r25, 0x96	; 150
    86e6:	bb 27       	eor	r27, r27
    86e8:	93 95       	inc	r25
    86ea:	f6 95       	lsr	r31
    86ec:	87 95       	ror	r24
    86ee:	77 95       	ror	r23
    86f0:	67 95       	ror	r22
    86f2:	b7 95       	ror	r27
    86f4:	f1 11       	cpse	r31, r1
    86f6:	f8 cf       	rjmp	.-16     	; 0x86e8 <__floatsisf+0x1c>
    86f8:	fa f4       	brpl	.+62     	; 0x8738 <__floatsisf+0x6c>
    86fa:	bb 0f       	add	r27, r27
    86fc:	11 f4       	brne	.+4      	; 0x8702 <__floatsisf+0x36>
    86fe:	60 ff       	sbrs	r22, 0
    8700:	1b c0       	rjmp	.+54     	; 0x8738 <__floatsisf+0x6c>
    8702:	6f 5f       	subi	r22, 0xFF	; 255
    8704:	7f 4f       	sbci	r23, 0xFF	; 255
    8706:	8f 4f       	sbci	r24, 0xFF	; 255
    8708:	9f 4f       	sbci	r25, 0xFF	; 255
    870a:	16 c0       	rjmp	.+44     	; 0x8738 <__floatsisf+0x6c>
    870c:	88 23       	and	r24, r24
    870e:	11 f0       	breq	.+4      	; 0x8714 <__floatsisf+0x48>
    8710:	96 e9       	ldi	r25, 0x96	; 150
    8712:	11 c0       	rjmp	.+34     	; 0x8736 <__floatsisf+0x6a>
    8714:	77 23       	and	r23, r23
    8716:	21 f0       	breq	.+8      	; 0x8720 <__floatsisf+0x54>
    8718:	9e e8       	ldi	r25, 0x8E	; 142
    871a:	87 2f       	mov	r24, r23
    871c:	76 2f       	mov	r23, r22
    871e:	05 c0       	rjmp	.+10     	; 0x872a <__floatsisf+0x5e>
    8720:	66 23       	and	r22, r22
    8722:	71 f0       	breq	.+28     	; 0x8740 <__floatsisf+0x74>
    8724:	96 e8       	ldi	r25, 0x86	; 134
    8726:	86 2f       	mov	r24, r22
    8728:	70 e0       	ldi	r23, 0x00	; 0
    872a:	60 e0       	ldi	r22, 0x00	; 0
    872c:	2a f0       	brmi	.+10     	; 0x8738 <__floatsisf+0x6c>
    872e:	9a 95       	dec	r25
    8730:	66 0f       	add	r22, r22
    8732:	77 1f       	adc	r23, r23
    8734:	88 1f       	adc	r24, r24
    8736:	da f7       	brpl	.-10     	; 0x872e <__floatsisf+0x62>
    8738:	88 0f       	add	r24, r24
    873a:	96 95       	lsr	r25
    873c:	87 95       	ror	r24
    873e:	97 f9       	bld	r25, 7
    8740:	08 95       	ret

00008742 <__fp_cmp>:
    8742:	99 0f       	add	r25, r25
    8744:	00 08       	sbc	r0, r0
    8746:	55 0f       	add	r21, r21
    8748:	aa 0b       	sbc	r26, r26
    874a:	e0 e8       	ldi	r30, 0x80	; 128
    874c:	fe ef       	ldi	r31, 0xFE	; 254
    874e:	16 16       	cp	r1, r22
    8750:	17 06       	cpc	r1, r23
    8752:	e8 07       	cpc	r30, r24
    8754:	f9 07       	cpc	r31, r25
    8756:	c0 f0       	brcs	.+48     	; 0x8788 <__fp_cmp+0x46>
    8758:	12 16       	cp	r1, r18
    875a:	13 06       	cpc	r1, r19
    875c:	e4 07       	cpc	r30, r20
    875e:	f5 07       	cpc	r31, r21
    8760:	98 f0       	brcs	.+38     	; 0x8788 <__fp_cmp+0x46>
    8762:	62 1b       	sub	r22, r18
    8764:	73 0b       	sbc	r23, r19
    8766:	84 0b       	sbc	r24, r20
    8768:	95 0b       	sbc	r25, r21
    876a:	39 f4       	brne	.+14     	; 0x877a <__fp_cmp+0x38>
    876c:	0a 26       	eor	r0, r26
    876e:	61 f0       	breq	.+24     	; 0x8788 <__fp_cmp+0x46>
    8770:	23 2b       	or	r18, r19
    8772:	24 2b       	or	r18, r20
    8774:	25 2b       	or	r18, r21
    8776:	21 f4       	brne	.+8      	; 0x8780 <__fp_cmp+0x3e>
    8778:	08 95       	ret
    877a:	0a 26       	eor	r0, r26
    877c:	09 f4       	brne	.+2      	; 0x8780 <__fp_cmp+0x3e>
    877e:	a1 40       	sbci	r26, 0x01	; 1
    8780:	a6 95       	lsr	r26
    8782:	8f ef       	ldi	r24, 0xFF	; 255
    8784:	81 1d       	adc	r24, r1
    8786:	81 1d       	adc	r24, r1
    8788:	08 95       	ret

0000878a <__fp_inf>:
    878a:	97 f9       	bld	r25, 7
    878c:	9f 67       	ori	r25, 0x7F	; 127
    878e:	80 e8       	ldi	r24, 0x80	; 128
    8790:	70 e0       	ldi	r23, 0x00	; 0
    8792:	60 e0       	ldi	r22, 0x00	; 0
    8794:	08 95       	ret

00008796 <__fp_mintl>:
    8796:	88 23       	and	r24, r24
    8798:	71 f4       	brne	.+28     	; 0x87b6 <__fp_mintl+0x20>
    879a:	77 23       	and	r23, r23
    879c:	21 f0       	breq	.+8      	; 0x87a6 <__fp_mintl+0x10>
    879e:	98 50       	subi	r25, 0x08	; 8
    87a0:	87 2b       	or	r24, r23
    87a2:	76 2f       	mov	r23, r22
    87a4:	07 c0       	rjmp	.+14     	; 0x87b4 <__fp_mintl+0x1e>
    87a6:	66 23       	and	r22, r22
    87a8:	11 f4       	brne	.+4      	; 0x87ae <__fp_mintl+0x18>
    87aa:	99 27       	eor	r25, r25
    87ac:	0d c0       	rjmp	.+26     	; 0x87c8 <__fp_mintl+0x32>
    87ae:	90 51       	subi	r25, 0x10	; 16
    87b0:	86 2b       	or	r24, r22
    87b2:	70 e0       	ldi	r23, 0x00	; 0
    87b4:	60 e0       	ldi	r22, 0x00	; 0
    87b6:	2a f0       	brmi	.+10     	; 0x87c2 <__fp_mintl+0x2c>
    87b8:	9a 95       	dec	r25
    87ba:	66 0f       	add	r22, r22
    87bc:	77 1f       	adc	r23, r23
    87be:	88 1f       	adc	r24, r24
    87c0:	da f7       	brpl	.-10     	; 0x87b8 <__fp_mintl+0x22>
    87c2:	88 0f       	add	r24, r24
    87c4:	96 95       	lsr	r25
    87c6:	87 95       	ror	r24
    87c8:	97 f9       	bld	r25, 7
    87ca:	08 95       	ret

000087cc <__fp_mpack>:
    87cc:	9f 3f       	cpi	r25, 0xFF	; 255
    87ce:	31 f0       	breq	.+12     	; 0x87dc <__fp_mpack_finite+0xc>

000087d0 <__fp_mpack_finite>:
    87d0:	91 50       	subi	r25, 0x01	; 1
    87d2:	20 f4       	brcc	.+8      	; 0x87dc <__fp_mpack_finite+0xc>
    87d4:	87 95       	ror	r24
    87d6:	77 95       	ror	r23
    87d8:	67 95       	ror	r22
    87da:	b7 95       	ror	r27
    87dc:	88 0f       	add	r24, r24
    87de:	91 1d       	adc	r25, r1
    87e0:	96 95       	lsr	r25
    87e2:	87 95       	ror	r24
    87e4:	97 f9       	bld	r25, 7
    87e6:	08 95       	ret

000087e8 <__fp_nan>:
    87e8:	9f ef       	ldi	r25, 0xFF	; 255
    87ea:	80 ec       	ldi	r24, 0xC0	; 192
    87ec:	08 95       	ret

000087ee <__fp_powser>:
    87ee:	df 93       	push	r29
    87f0:	cf 93       	push	r28
    87f2:	1f 93       	push	r17
    87f4:	0f 93       	push	r16
    87f6:	ff 92       	push	r15
    87f8:	ef 92       	push	r14
    87fa:	df 92       	push	r13
    87fc:	7b 01       	movw	r14, r22
    87fe:	8c 01       	movw	r16, r24
    8800:	68 94       	set
    8802:	05 c0       	rjmp	.+10     	; 0x880e <__fp_powser+0x20>
    8804:	da 2e       	mov	r13, r26
    8806:	ef 01       	movw	r28, r30
    8808:	8d d1       	rcall	.+794    	; 0x8b24 <__mulsf3x>
    880a:	fe 01       	movw	r30, r28
    880c:	e8 94       	clt
    880e:	a5 91       	lpm	r26, Z+
    8810:	25 91       	lpm	r18, Z+
    8812:	35 91       	lpm	r19, Z+
    8814:	45 91       	lpm	r20, Z+
    8816:	55 91       	lpm	r21, Z+
    8818:	ae f3       	brts	.-22     	; 0x8804 <__fp_powser+0x16>
    881a:	ef 01       	movw	r28, r30
    881c:	27 de       	rcall	.-946    	; 0x846c <__addsf3x>
    881e:	fe 01       	movw	r30, r28
    8820:	97 01       	movw	r18, r14
    8822:	a8 01       	movw	r20, r16
    8824:	da 94       	dec	r13
    8826:	79 f7       	brne	.-34     	; 0x8806 <__fp_powser+0x18>
    8828:	df 90       	pop	r13
    882a:	ef 90       	pop	r14
    882c:	ff 90       	pop	r15
    882e:	0f 91       	pop	r16
    8830:	1f 91       	pop	r17
    8832:	cf 91       	pop	r28
    8834:	df 91       	pop	r29
    8836:	08 95       	ret

00008838 <__fp_pscA>:
    8838:	00 24       	eor	r0, r0
    883a:	0a 94       	dec	r0
    883c:	16 16       	cp	r1, r22
    883e:	17 06       	cpc	r1, r23
    8840:	18 06       	cpc	r1, r24
    8842:	09 06       	cpc	r0, r25
    8844:	08 95       	ret

00008846 <__fp_pscB>:
    8846:	00 24       	eor	r0, r0
    8848:	0a 94       	dec	r0
    884a:	12 16       	cp	r1, r18
    884c:	13 06       	cpc	r1, r19
    884e:	14 06       	cpc	r1, r20
    8850:	05 06       	cpc	r0, r21
    8852:	08 95       	ret
    8854:	c9 cf       	rjmp	.-110    	; 0x87e8 <__fp_nan>

00008856 <__fp_rempio2>:
    8856:	50 d0       	rcall	.+160    	; 0x88f8 <__fp_splitA>
    8858:	e8 f3       	brcs	.-6      	; 0x8854 <__fp_pscB+0xe>
    885a:	e8 94       	clt
    885c:	e0 e0       	ldi	r30, 0x00	; 0
    885e:	bb 27       	eor	r27, r27
    8860:	9f 57       	subi	r25, 0x7F	; 127
    8862:	f0 f0       	brcs	.+60     	; 0x88a0 <__fp_rempio2+0x4a>
    8864:	2a ed       	ldi	r18, 0xDA	; 218
    8866:	3f e0       	ldi	r19, 0x0F	; 15
    8868:	49 ec       	ldi	r20, 0xC9	; 201
    886a:	06 c0       	rjmp	.+12     	; 0x8878 <__fp_rempio2+0x22>
    886c:	ee 0f       	add	r30, r30
    886e:	bb 0f       	add	r27, r27
    8870:	66 1f       	adc	r22, r22
    8872:	77 1f       	adc	r23, r23
    8874:	88 1f       	adc	r24, r24
    8876:	28 f0       	brcs	.+10     	; 0x8882 <__fp_rempio2+0x2c>
    8878:	b2 3a       	cpi	r27, 0xA2	; 162
    887a:	62 07       	cpc	r22, r18
    887c:	73 07       	cpc	r23, r19
    887e:	84 07       	cpc	r24, r20
    8880:	28 f0       	brcs	.+10     	; 0x888c <__fp_rempio2+0x36>
    8882:	b2 5a       	subi	r27, 0xA2	; 162
    8884:	62 0b       	sbc	r22, r18
    8886:	73 0b       	sbc	r23, r19
    8888:	84 0b       	sbc	r24, r20
    888a:	e3 95       	inc	r30
    888c:	9a 95       	dec	r25
    888e:	72 f7       	brpl	.-36     	; 0x886c <__fp_rempio2+0x16>
    8890:	80 38       	cpi	r24, 0x80	; 128
    8892:	30 f4       	brcc	.+12     	; 0x88a0 <__fp_rempio2+0x4a>
    8894:	9a 95       	dec	r25
    8896:	bb 0f       	add	r27, r27
    8898:	66 1f       	adc	r22, r22
    889a:	77 1f       	adc	r23, r23
    889c:	88 1f       	adc	r24, r24
    889e:	d2 f7       	brpl	.-12     	; 0x8894 <__fp_rempio2+0x3e>
    88a0:	90 48       	sbci	r25, 0x80	; 128
    88a2:	96 cf       	rjmp	.-212    	; 0x87d0 <__fp_mpack_finite>

000088a4 <__fp_round>:
    88a4:	09 2e       	mov	r0, r25
    88a6:	03 94       	inc	r0
    88a8:	00 0c       	add	r0, r0
    88aa:	11 f4       	brne	.+4      	; 0x88b0 <__fp_round+0xc>
    88ac:	88 23       	and	r24, r24
    88ae:	52 f0       	brmi	.+20     	; 0x88c4 <__fp_round+0x20>
    88b0:	bb 0f       	add	r27, r27
    88b2:	40 f4       	brcc	.+16     	; 0x88c4 <__fp_round+0x20>
    88b4:	bf 2b       	or	r27, r31
    88b6:	11 f4       	brne	.+4      	; 0x88bc <__fp_round+0x18>
    88b8:	60 ff       	sbrs	r22, 0
    88ba:	04 c0       	rjmp	.+8      	; 0x88c4 <__fp_round+0x20>
    88bc:	6f 5f       	subi	r22, 0xFF	; 255
    88be:	7f 4f       	sbci	r23, 0xFF	; 255
    88c0:	8f 4f       	sbci	r24, 0xFF	; 255
    88c2:	9f 4f       	sbci	r25, 0xFF	; 255
    88c4:	08 95       	ret

000088c6 <__fp_sinus>:
    88c6:	ef 93       	push	r30
    88c8:	e0 ff       	sbrs	r30, 0
    88ca:	06 c0       	rjmp	.+12     	; 0x88d8 <__fp_sinus+0x12>
    88cc:	a2 ea       	ldi	r26, 0xA2	; 162
    88ce:	2a ed       	ldi	r18, 0xDA	; 218
    88d0:	3f e0       	ldi	r19, 0x0F	; 15
    88d2:	49 ec       	ldi	r20, 0xC9	; 201
    88d4:	5f eb       	ldi	r21, 0xBF	; 191
    88d6:	ca dd       	rcall	.-1132   	; 0x846c <__addsf3x>
    88d8:	e5 df       	rcall	.-54     	; 0x88a4 <__fp_round>
    88da:	0f 90       	pop	r0
    88dc:	03 94       	inc	r0
    88de:	01 fc       	sbrc	r0, 1
    88e0:	90 58       	subi	r25, 0x80	; 128
    88e2:	e5 e1       	ldi	r30, 0x15	; 21
    88e4:	f2 e0       	ldi	r31, 0x02	; 2
    88e6:	d2 c1       	rjmp	.+932    	; 0x8c8c <__fp_powsodd>

000088e8 <__fp_split3>:
    88e8:	57 fd       	sbrc	r21, 7
    88ea:	90 58       	subi	r25, 0x80	; 128
    88ec:	44 0f       	add	r20, r20
    88ee:	55 1f       	adc	r21, r21
    88f0:	59 f0       	breq	.+22     	; 0x8908 <__fp_splitA+0x10>
    88f2:	5f 3f       	cpi	r21, 0xFF	; 255
    88f4:	71 f0       	breq	.+28     	; 0x8912 <__fp_splitA+0x1a>
    88f6:	47 95       	ror	r20

000088f8 <__fp_splitA>:
    88f8:	88 0f       	add	r24, r24
    88fa:	97 fb       	bst	r25, 7
    88fc:	99 1f       	adc	r25, r25
    88fe:	61 f0       	breq	.+24     	; 0x8918 <__fp_splitA+0x20>
    8900:	9f 3f       	cpi	r25, 0xFF	; 255
    8902:	79 f0       	breq	.+30     	; 0x8922 <__fp_splitA+0x2a>
    8904:	87 95       	ror	r24
    8906:	08 95       	ret
    8908:	12 16       	cp	r1, r18
    890a:	13 06       	cpc	r1, r19
    890c:	14 06       	cpc	r1, r20
    890e:	55 1f       	adc	r21, r21
    8910:	f2 cf       	rjmp	.-28     	; 0x88f6 <__fp_split3+0xe>
    8912:	46 95       	lsr	r20
    8914:	f1 df       	rcall	.-30     	; 0x88f8 <__fp_splitA>
    8916:	08 c0       	rjmp	.+16     	; 0x8928 <__fp_splitA+0x30>
    8918:	16 16       	cp	r1, r22
    891a:	17 06       	cpc	r1, r23
    891c:	18 06       	cpc	r1, r24
    891e:	99 1f       	adc	r25, r25
    8920:	f1 cf       	rjmp	.-30     	; 0x8904 <__fp_splitA+0xc>
    8922:	86 95       	lsr	r24
    8924:	71 05       	cpc	r23, r1
    8926:	61 05       	cpc	r22, r1
    8928:	08 94       	sec
    892a:	08 95       	ret

0000892c <__fp_trunc>:
    892c:	e5 df       	rcall	.-54     	; 0x88f8 <__fp_splitA>
    892e:	a0 f0       	brcs	.+40     	; 0x8958 <__fp_trunc+0x2c>
    8930:	be e7       	ldi	r27, 0x7E	; 126
    8932:	b9 17       	cp	r27, r25
    8934:	88 f4       	brcc	.+34     	; 0x8958 <__fp_trunc+0x2c>
    8936:	bb 27       	eor	r27, r27
    8938:	9f 38       	cpi	r25, 0x8F	; 143
    893a:	60 f4       	brcc	.+24     	; 0x8954 <__fp_trunc+0x28>
    893c:	16 16       	cp	r1, r22
    893e:	b1 1d       	adc	r27, r1
    8940:	67 2f       	mov	r22, r23
    8942:	78 2f       	mov	r23, r24
    8944:	88 27       	eor	r24, r24
    8946:	98 5f       	subi	r25, 0xF8	; 248
    8948:	f7 cf       	rjmp	.-18     	; 0x8938 <__fp_trunc+0xc>
    894a:	86 95       	lsr	r24
    894c:	77 95       	ror	r23
    894e:	67 95       	ror	r22
    8950:	b1 1d       	adc	r27, r1
    8952:	93 95       	inc	r25
    8954:	96 39       	cpi	r25, 0x96	; 150
    8956:	c8 f3       	brcs	.-14     	; 0x894a <__fp_trunc+0x1e>
    8958:	08 95       	ret

0000895a <__fp_zero>:
    895a:	e8 94       	clt

0000895c <__fp_szero>:
    895c:	bb 27       	eor	r27, r27
    895e:	66 27       	eor	r22, r22
    8960:	77 27       	eor	r23, r23
    8962:	cb 01       	movw	r24, r22
    8964:	97 f9       	bld	r25, 7
    8966:	08 95       	ret

00008968 <__gesf2>:
    8968:	ec de       	rcall	.-552    	; 0x8742 <__fp_cmp>
    896a:	08 f4       	brcc	.+2      	; 0x896e <__gesf2+0x6>
    896c:	8f ef       	ldi	r24, 0xFF	; 255
    896e:	08 95       	ret
    8970:	63 df       	rcall	.-314    	; 0x8838 <__fp_pscA>
    8972:	19 f0       	breq	.+6      	; 0x897a <__gesf2+0x12>
    8974:	68 df       	rcall	.-304    	; 0x8846 <__fp_pscB>
    8976:	09 f0       	breq	.+2      	; 0x897a <__gesf2+0x12>
    8978:	37 cf       	rjmp	.-402    	; 0x87e8 <__fp_nan>
    897a:	07 cf       	rjmp	.-498    	; 0x878a <__fp_inf>
    897c:	b9 01       	movw	r22, r18
    897e:	ca 01       	movw	r24, r20
    8980:	25 cf       	rjmp	.-438    	; 0x87cc <__fp_mpack>

00008982 <hypot>:
    8982:	9f 77       	andi	r25, 0x7F	; 127
    8984:	5f 77       	andi	r21, 0x7F	; 127
    8986:	b0 df       	rcall	.-160    	; 0x88e8 <__fp_split3>
    8988:	98 f3       	brcs	.-26     	; 0x8970 <__gesf2+0x8>
    898a:	99 23       	and	r25, r25
    898c:	b9 f3       	breq	.-18     	; 0x897c <__gesf2+0x14>
    898e:	55 23       	and	r21, r21
    8990:	b9 f3       	breq	.-18     	; 0x8980 <__gesf2+0x18>
    8992:	ff 27       	eor	r31, r31
    8994:	95 17       	cp	r25, r21
    8996:	58 f4       	brcc	.+22     	; 0x89ae <hypot+0x2c>
    8998:	e5 2f       	mov	r30, r21
    899a:	e9 1b       	sub	r30, r25
    899c:	ed 30       	cpi	r30, 0x0D	; 13
    899e:	70 f7       	brcc	.-36     	; 0x897c <__gesf2+0x14>
    89a0:	5e 3b       	cpi	r21, 0xBE	; 190
    89a2:	10 f0       	brcs	.+4      	; 0x89a8 <hypot+0x26>
    89a4:	f1 e4       	ldi	r31, 0x41	; 65
    89a6:	1c c0       	rjmp	.+56     	; 0x89e0 <hypot+0x5e>
    89a8:	90 34       	cpi	r25, 0x40	; 64
    89aa:	e0 f4       	brcc	.+56     	; 0x89e4 <hypot+0x62>
    89ac:	0a c0       	rjmp	.+20     	; 0x89c2 <hypot+0x40>
    89ae:	e9 2f       	mov	r30, r25
    89b0:	e5 1b       	sub	r30, r21
    89b2:	ed 30       	cpi	r30, 0x0D	; 13
    89b4:	28 f7       	brcc	.-54     	; 0x8980 <__gesf2+0x18>
    89b6:	9e 3b       	cpi	r25, 0xBE	; 190
    89b8:	10 f0       	brcs	.+4      	; 0x89be <hypot+0x3c>
    89ba:	f1 e4       	ldi	r31, 0x41	; 65
    89bc:	11 c0       	rjmp	.+34     	; 0x89e0 <hypot+0x5e>
    89be:	50 34       	cpi	r21, 0x40	; 64
    89c0:	88 f4       	brcc	.+34     	; 0x89e4 <hypot+0x62>
    89c2:	f9 ea       	ldi	r31, 0xA9	; 169
    89c4:	88 23       	and	r24, r24
    89c6:	2a f0       	brmi	.+10     	; 0x89d2 <hypot+0x50>
    89c8:	9a 95       	dec	r25
    89ca:	66 0f       	add	r22, r22
    89cc:	77 1f       	adc	r23, r23
    89ce:	88 1f       	adc	r24, r24
    89d0:	da f7       	brpl	.-10     	; 0x89c8 <hypot+0x46>
    89d2:	44 23       	and	r20, r20
    89d4:	2a f0       	brmi	.+10     	; 0x89e0 <hypot+0x5e>
    89d6:	5a 95       	dec	r21
    89d8:	22 0f       	add	r18, r18
    89da:	33 1f       	adc	r19, r19
    89dc:	44 1f       	adc	r20, r20
    89de:	da f7       	brpl	.-10     	; 0x89d6 <hypot+0x54>
    89e0:	9f 1b       	sub	r25, r31
    89e2:	5f 1b       	sub	r21, r31
    89e4:	ff 93       	push	r31
    89e6:	1f 93       	push	r17
    89e8:	0f 93       	push	r16
    89ea:	ff 92       	push	r15
    89ec:	ef 92       	push	r14
    89ee:	79 01       	movw	r14, r18
    89f0:	8a 01       	movw	r16, r20
    89f2:	bb 27       	eor	r27, r27
    89f4:	ab 2f       	mov	r26, r27
    89f6:	9b 01       	movw	r18, r22
    89f8:	ac 01       	movw	r20, r24
    89fa:	96 d0       	rcall	.+300    	; 0x8b28 <__mulsf3_pse>
    89fc:	97 01       	movw	r18, r14
    89fe:	a8 01       	movw	r20, r16
    8a00:	bf 93       	push	r27
    8a02:	7b 01       	movw	r14, r22
    8a04:	8c 01       	movw	r16, r24
    8a06:	aa 27       	eor	r26, r26
    8a08:	ba 2f       	mov	r27, r26
    8a0a:	b9 01       	movw	r22, r18
    8a0c:	ca 01       	movw	r24, r20
    8a0e:	8c d0       	rcall	.+280    	; 0x8b28 <__mulsf3_pse>
    8a10:	af 91       	pop	r26
    8a12:	97 01       	movw	r18, r14
    8a14:	a8 01       	movw	r20, r16
    8a16:	ef 90       	pop	r14
    8a18:	ff 90       	pop	r15
    8a1a:	0f 91       	pop	r16
    8a1c:	1f 91       	pop	r17
    8a1e:	26 dd       	rcall	.-1460   	; 0x846c <__addsf3x>
    8a20:	41 df       	rcall	.-382    	; 0x88a4 <__fp_round>
    8a22:	e1 d0       	rcall	.+450    	; 0x8be6 <sqrt>
    8a24:	4f 91       	pop	r20
    8a26:	40 ff       	sbrs	r20, 0
    8a28:	08 95       	ret
    8a2a:	55 27       	eor	r21, r21
    8a2c:	47 fd       	sbrc	r20, 7
    8a2e:	50 95       	com	r21
    8a30:	09 c0       	rjmp	.+18     	; 0x8a44 <ldexp>

00008a32 <inverse>:
    8a32:	9b 01       	movw	r18, r22
    8a34:	ac 01       	movw	r20, r24
    8a36:	60 e0       	ldi	r22, 0x00	; 0
    8a38:	70 e0       	ldi	r23, 0x00	; 0
    8a3a:	80 e8       	ldi	r24, 0x80	; 128
    8a3c:	9f e3       	ldi	r25, 0x3F	; 63
    8a3e:	ab cd       	rjmp	.-1194   	; 0x8596 <__divsf3>
    8a40:	a4 ce       	rjmp	.-696    	; 0x878a <__fp_inf>
    8a42:	c4 ce       	rjmp	.-632    	; 0x87cc <__fp_mpack>

00008a44 <ldexp>:
    8a44:	59 df       	rcall	.-334    	; 0x88f8 <__fp_splitA>
    8a46:	e8 f3       	brcs	.-6      	; 0x8a42 <inverse+0x10>
    8a48:	99 23       	and	r25, r25
    8a4a:	d9 f3       	breq	.-10     	; 0x8a42 <inverse+0x10>
    8a4c:	94 0f       	add	r25, r20
    8a4e:	51 1d       	adc	r21, r1
    8a50:	bb f3       	brvs	.-18     	; 0x8a40 <inverse+0xe>
    8a52:	91 50       	subi	r25, 0x01	; 1
    8a54:	50 40       	sbci	r21, 0x00	; 0
    8a56:	94 f0       	brlt	.+36     	; 0x8a7c <ldexp+0x38>
    8a58:	59 f0       	breq	.+22     	; 0x8a70 <ldexp+0x2c>
    8a5a:	88 23       	and	r24, r24
    8a5c:	32 f0       	brmi	.+12     	; 0x8a6a <ldexp+0x26>
    8a5e:	66 0f       	add	r22, r22
    8a60:	77 1f       	adc	r23, r23
    8a62:	88 1f       	adc	r24, r24
    8a64:	91 50       	subi	r25, 0x01	; 1
    8a66:	50 40       	sbci	r21, 0x00	; 0
    8a68:	c1 f7       	brne	.-16     	; 0x8a5a <ldexp+0x16>
    8a6a:	9e 3f       	cpi	r25, 0xFE	; 254
    8a6c:	51 05       	cpc	r21, r1
    8a6e:	44 f7       	brge	.-48     	; 0x8a40 <inverse+0xe>
    8a70:	88 0f       	add	r24, r24
    8a72:	91 1d       	adc	r25, r1
    8a74:	96 95       	lsr	r25
    8a76:	87 95       	ror	r24
    8a78:	97 f9       	bld	r25, 7
    8a7a:	08 95       	ret
    8a7c:	5f 3f       	cpi	r21, 0xFF	; 255
    8a7e:	ac f0       	brlt	.+42     	; 0x8aaa <ldexp+0x66>
    8a80:	98 3e       	cpi	r25, 0xE8	; 232
    8a82:	9c f0       	brlt	.+38     	; 0x8aaa <ldexp+0x66>
    8a84:	bb 27       	eor	r27, r27
    8a86:	86 95       	lsr	r24
    8a88:	77 95       	ror	r23
    8a8a:	67 95       	ror	r22
    8a8c:	b7 95       	ror	r27
    8a8e:	08 f4       	brcc	.+2      	; 0x8a92 <ldexp+0x4e>
    8a90:	b1 60       	ori	r27, 0x01	; 1
    8a92:	93 95       	inc	r25
    8a94:	c1 f7       	brne	.-16     	; 0x8a86 <ldexp+0x42>
    8a96:	bb 0f       	add	r27, r27
    8a98:	58 f7       	brcc	.-42     	; 0x8a70 <ldexp+0x2c>
    8a9a:	11 f4       	brne	.+4      	; 0x8aa0 <ldexp+0x5c>
    8a9c:	60 ff       	sbrs	r22, 0
    8a9e:	e8 cf       	rjmp	.-48     	; 0x8a70 <ldexp+0x2c>
    8aa0:	6f 5f       	subi	r22, 0xFF	; 255
    8aa2:	7f 4f       	sbci	r23, 0xFF	; 255
    8aa4:	8f 4f       	sbci	r24, 0xFF	; 255
    8aa6:	9f 4f       	sbci	r25, 0xFF	; 255
    8aa8:	e3 cf       	rjmp	.-58     	; 0x8a70 <ldexp+0x2c>
    8aaa:	58 cf       	rjmp	.-336    	; 0x895c <__fp_szero>

00008aac <lround>:
    8aac:	25 df       	rcall	.-438    	; 0x88f8 <__fp_splitA>
    8aae:	58 f1       	brcs	.+86     	; 0x8b06 <lround+0x5a>
    8ab0:	9e 57       	subi	r25, 0x7E	; 126
    8ab2:	58 f1       	brcs	.+86     	; 0x8b0a <lround+0x5e>
    8ab4:	98 51       	subi	r25, 0x18	; 24
    8ab6:	a0 f0       	brcs	.+40     	; 0x8ae0 <lround+0x34>
    8ab8:	e9 f0       	breq	.+58     	; 0x8af4 <lround+0x48>
    8aba:	98 30       	cpi	r25, 0x08	; 8
    8abc:	20 f5       	brcc	.+72     	; 0x8b06 <lround+0x5a>
    8abe:	09 2e       	mov	r0, r25
    8ac0:	99 27       	eor	r25, r25
    8ac2:	66 0f       	add	r22, r22
    8ac4:	77 1f       	adc	r23, r23
    8ac6:	88 1f       	adc	r24, r24
    8ac8:	99 1f       	adc	r25, r25
    8aca:	0a 94       	dec	r0
    8acc:	d1 f7       	brne	.-12     	; 0x8ac2 <lround+0x16>
    8ace:	12 c0       	rjmp	.+36     	; 0x8af4 <lround+0x48>
    8ad0:	06 2e       	mov	r0, r22
    8ad2:	67 2f       	mov	r22, r23
    8ad4:	78 2f       	mov	r23, r24
    8ad6:	88 27       	eor	r24, r24
    8ad8:	98 5f       	subi	r25, 0xF8	; 248
    8ada:	11 f4       	brne	.+4      	; 0x8ae0 <lround+0x34>
    8adc:	00 0c       	add	r0, r0
    8ade:	07 c0       	rjmp	.+14     	; 0x8aee <lround+0x42>
    8ae0:	99 3f       	cpi	r25, 0xF9	; 249
    8ae2:	b4 f3       	brlt	.-20     	; 0x8ad0 <lround+0x24>
    8ae4:	86 95       	lsr	r24
    8ae6:	77 95       	ror	r23
    8ae8:	67 95       	ror	r22
    8aea:	93 95       	inc	r25
    8aec:	d9 f7       	brne	.-10     	; 0x8ae4 <lround+0x38>
    8aee:	61 1d       	adc	r22, r1
    8af0:	71 1d       	adc	r23, r1
    8af2:	81 1d       	adc	r24, r1
    8af4:	3e f4       	brtc	.+14     	; 0x8b04 <lround+0x58>
    8af6:	90 95       	com	r25
    8af8:	80 95       	com	r24
    8afa:	70 95       	com	r23
    8afc:	61 95       	neg	r22
    8afe:	7f 4f       	sbci	r23, 0xFF	; 255
    8b00:	8f 4f       	sbci	r24, 0xFF	; 255
    8b02:	9f 4f       	sbci	r25, 0xFF	; 255
    8b04:	08 95       	ret
    8b06:	68 94       	set
    8b08:	29 cf       	rjmp	.-430    	; 0x895c <__fp_szero>
    8b0a:	27 cf       	rjmp	.-434    	; 0x895a <__fp_zero>

00008b0c <__mulsf3>:
    8b0c:	0b d0       	rcall	.+22     	; 0x8b24 <__mulsf3x>
    8b0e:	ca ce       	rjmp	.-620    	; 0x88a4 <__fp_round>
    8b10:	93 de       	rcall	.-730    	; 0x8838 <__fp_pscA>
    8b12:	28 f0       	brcs	.+10     	; 0x8b1e <__mulsf3+0x12>
    8b14:	98 de       	rcall	.-720    	; 0x8846 <__fp_pscB>
    8b16:	18 f0       	brcs	.+6      	; 0x8b1e <__mulsf3+0x12>
    8b18:	95 23       	and	r25, r21
    8b1a:	09 f0       	breq	.+2      	; 0x8b1e <__mulsf3+0x12>
    8b1c:	36 ce       	rjmp	.-916    	; 0x878a <__fp_inf>
    8b1e:	64 ce       	rjmp	.-824    	; 0x87e8 <__fp_nan>
    8b20:	11 24       	eor	r1, r1
    8b22:	1c cf       	rjmp	.-456    	; 0x895c <__fp_szero>

00008b24 <__mulsf3x>:
    8b24:	e1 de       	rcall	.-574    	; 0x88e8 <__fp_split3>
    8b26:	a0 f3       	brcs	.-24     	; 0x8b10 <__mulsf3+0x4>

00008b28 <__mulsf3_pse>:
    8b28:	95 9f       	mul	r25, r21
    8b2a:	d1 f3       	breq	.-12     	; 0x8b20 <__mulsf3+0x14>
    8b2c:	95 0f       	add	r25, r21
    8b2e:	50 e0       	ldi	r21, 0x00	; 0
    8b30:	55 1f       	adc	r21, r21
    8b32:	62 9f       	mul	r22, r18
    8b34:	f0 01       	movw	r30, r0
    8b36:	72 9f       	mul	r23, r18
    8b38:	bb 27       	eor	r27, r27
    8b3a:	f0 0d       	add	r31, r0
    8b3c:	b1 1d       	adc	r27, r1
    8b3e:	63 9f       	mul	r22, r19
    8b40:	aa 27       	eor	r26, r26
    8b42:	f0 0d       	add	r31, r0
    8b44:	b1 1d       	adc	r27, r1
    8b46:	aa 1f       	adc	r26, r26
    8b48:	64 9f       	mul	r22, r20
    8b4a:	66 27       	eor	r22, r22
    8b4c:	b0 0d       	add	r27, r0
    8b4e:	a1 1d       	adc	r26, r1
    8b50:	66 1f       	adc	r22, r22
    8b52:	82 9f       	mul	r24, r18
    8b54:	22 27       	eor	r18, r18
    8b56:	b0 0d       	add	r27, r0
    8b58:	a1 1d       	adc	r26, r1
    8b5a:	62 1f       	adc	r22, r18
    8b5c:	73 9f       	mul	r23, r19
    8b5e:	b0 0d       	add	r27, r0
    8b60:	a1 1d       	adc	r26, r1
    8b62:	62 1f       	adc	r22, r18
    8b64:	83 9f       	mul	r24, r19
    8b66:	a0 0d       	add	r26, r0
    8b68:	61 1d       	adc	r22, r1
    8b6a:	22 1f       	adc	r18, r18
    8b6c:	74 9f       	mul	r23, r20
    8b6e:	33 27       	eor	r19, r19
    8b70:	a0 0d       	add	r26, r0
    8b72:	61 1d       	adc	r22, r1
    8b74:	23 1f       	adc	r18, r19
    8b76:	84 9f       	mul	r24, r20
    8b78:	60 0d       	add	r22, r0
    8b7a:	21 1d       	adc	r18, r1
    8b7c:	82 2f       	mov	r24, r18
    8b7e:	76 2f       	mov	r23, r22
    8b80:	6a 2f       	mov	r22, r26
    8b82:	11 24       	eor	r1, r1
    8b84:	9f 57       	subi	r25, 0x7F	; 127
    8b86:	50 40       	sbci	r21, 0x00	; 0
    8b88:	8a f0       	brmi	.+34     	; 0x8bac <__mulsf3_pse+0x84>
    8b8a:	e1 f0       	breq	.+56     	; 0x8bc4 <__mulsf3_pse+0x9c>
    8b8c:	88 23       	and	r24, r24
    8b8e:	4a f0       	brmi	.+18     	; 0x8ba2 <__mulsf3_pse+0x7a>
    8b90:	ee 0f       	add	r30, r30
    8b92:	ff 1f       	adc	r31, r31
    8b94:	bb 1f       	adc	r27, r27
    8b96:	66 1f       	adc	r22, r22
    8b98:	77 1f       	adc	r23, r23
    8b9a:	88 1f       	adc	r24, r24
    8b9c:	91 50       	subi	r25, 0x01	; 1
    8b9e:	50 40       	sbci	r21, 0x00	; 0
    8ba0:	a9 f7       	brne	.-22     	; 0x8b8c <__mulsf3_pse+0x64>
    8ba2:	9e 3f       	cpi	r25, 0xFE	; 254
    8ba4:	51 05       	cpc	r21, r1
    8ba6:	70 f0       	brcs	.+28     	; 0x8bc4 <__mulsf3_pse+0x9c>
    8ba8:	f0 cd       	rjmp	.-1056   	; 0x878a <__fp_inf>
    8baa:	d8 ce       	rjmp	.-592    	; 0x895c <__fp_szero>
    8bac:	5f 3f       	cpi	r21, 0xFF	; 255
    8bae:	ec f3       	brlt	.-6      	; 0x8baa <__mulsf3_pse+0x82>
    8bb0:	98 3e       	cpi	r25, 0xE8	; 232
    8bb2:	dc f3       	brlt	.-10     	; 0x8baa <__mulsf3_pse+0x82>
    8bb4:	86 95       	lsr	r24
    8bb6:	77 95       	ror	r23
    8bb8:	67 95       	ror	r22
    8bba:	b7 95       	ror	r27
    8bbc:	f7 95       	ror	r31
    8bbe:	e7 95       	ror	r30
    8bc0:	9f 5f       	subi	r25, 0xFF	; 255
    8bc2:	c1 f7       	brne	.-16     	; 0x8bb4 <__mulsf3_pse+0x8c>
    8bc4:	fe 2b       	or	r31, r30
    8bc6:	88 0f       	add	r24, r24
    8bc8:	91 1d       	adc	r25, r1
    8bca:	96 95       	lsr	r25
    8bcc:	87 95       	ror	r24
    8bce:	97 f9       	bld	r25, 7
    8bd0:	08 95       	ret

00008bd2 <sin>:
    8bd2:	9f 93       	push	r25
    8bd4:	40 de       	rcall	.-896    	; 0x8856 <__fp_rempio2>
    8bd6:	0f 90       	pop	r0
    8bd8:	07 fc       	sbrc	r0, 7
    8bda:	ee 5f       	subi	r30, 0xFE	; 254
    8bdc:	74 ce       	rjmp	.-792    	; 0x88c6 <__fp_sinus>
    8bde:	11 f4       	brne	.+4      	; 0x8be4 <sin+0x12>
    8be0:	0e f4       	brtc	.+2      	; 0x8be4 <sin+0x12>
    8be2:	02 ce       	rjmp	.-1020   	; 0x87e8 <__fp_nan>
    8be4:	f3 cd       	rjmp	.-1050   	; 0x87cc <__fp_mpack>

00008be6 <sqrt>:
    8be6:	88 de       	rcall	.-752    	; 0x88f8 <__fp_splitA>
    8be8:	d0 f3       	brcs	.-12     	; 0x8bde <sin+0xc>
    8bea:	99 23       	and	r25, r25
    8bec:	d9 f3       	breq	.-10     	; 0x8be4 <sin+0x12>
    8bee:	ce f3       	brts	.-14     	; 0x8be2 <sin+0x10>
    8bf0:	9f 57       	subi	r25, 0x7F	; 127
    8bf2:	55 0b       	sbc	r21, r21
    8bf4:	87 ff       	sbrs	r24, 7
    8bf6:	43 d0       	rcall	.+134    	; 0x8c7e <__fp_norm2>
    8bf8:	00 24       	eor	r0, r0
    8bfa:	a0 e6       	ldi	r26, 0x60	; 96
    8bfc:	40 ea       	ldi	r20, 0xA0	; 160
    8bfe:	90 01       	movw	r18, r0
    8c00:	80 58       	subi	r24, 0x80	; 128
    8c02:	56 95       	lsr	r21
    8c04:	97 95       	ror	r25
    8c06:	28 f4       	brcc	.+10     	; 0x8c12 <sqrt+0x2c>
    8c08:	80 5c       	subi	r24, 0xC0	; 192
    8c0a:	66 0f       	add	r22, r22
    8c0c:	77 1f       	adc	r23, r23
    8c0e:	88 1f       	adc	r24, r24
    8c10:	20 f0       	brcs	.+8      	; 0x8c1a <sqrt+0x34>
    8c12:	26 17       	cp	r18, r22
    8c14:	37 07       	cpc	r19, r23
    8c16:	48 07       	cpc	r20, r24
    8c18:	30 f4       	brcc	.+12     	; 0x8c26 <sqrt+0x40>
    8c1a:	62 1b       	sub	r22, r18
    8c1c:	73 0b       	sbc	r23, r19
    8c1e:	84 0b       	sbc	r24, r20
    8c20:	20 29       	or	r18, r0
    8c22:	31 29       	or	r19, r1
    8c24:	4a 2b       	or	r20, r26
    8c26:	a6 95       	lsr	r26
    8c28:	17 94       	ror	r1
    8c2a:	07 94       	ror	r0
    8c2c:	20 25       	eor	r18, r0
    8c2e:	31 25       	eor	r19, r1
    8c30:	4a 27       	eor	r20, r26
    8c32:	58 f7       	brcc	.-42     	; 0x8c0a <sqrt+0x24>
    8c34:	66 0f       	add	r22, r22
    8c36:	77 1f       	adc	r23, r23
    8c38:	88 1f       	adc	r24, r24
    8c3a:	20 f0       	brcs	.+8      	; 0x8c44 <sqrt+0x5e>
    8c3c:	26 17       	cp	r18, r22
    8c3e:	37 07       	cpc	r19, r23
    8c40:	48 07       	cpc	r20, r24
    8c42:	30 f4       	brcc	.+12     	; 0x8c50 <sqrt+0x6a>
    8c44:	62 0b       	sbc	r22, r18
    8c46:	73 0b       	sbc	r23, r19
    8c48:	84 0b       	sbc	r24, r20
    8c4a:	20 0d       	add	r18, r0
    8c4c:	31 1d       	adc	r19, r1
    8c4e:	41 1d       	adc	r20, r1
    8c50:	a0 95       	com	r26
    8c52:	81 f7       	brne	.-32     	; 0x8c34 <sqrt+0x4e>
    8c54:	b9 01       	movw	r22, r18
    8c56:	84 2f       	mov	r24, r20
    8c58:	91 58       	subi	r25, 0x81	; 129
    8c5a:	88 0f       	add	r24, r24
    8c5c:	96 95       	lsr	r25
    8c5e:	87 95       	ror	r24
    8c60:	08 95       	ret

00008c62 <square>:
    8c62:	9b 01       	movw	r18, r22
    8c64:	ac 01       	movw	r20, r24
    8c66:	52 cf       	rjmp	.-348    	; 0x8b0c <__mulsf3>

00008c68 <trunc>:
    8c68:	61 de       	rcall	.-830    	; 0x892c <__fp_trunc>
    8c6a:	20 f0       	brcs	.+8      	; 0x8c74 <trunc+0xc>
    8c6c:	9f 37       	cpi	r25, 0x7F	; 127
    8c6e:	08 f4       	brcc	.+2      	; 0x8c72 <trunc+0xa>
    8c70:	75 ce       	rjmp	.-790    	; 0x895c <__fp_szero>
    8c72:	91 cd       	rjmp	.-1246   	; 0x8796 <__fp_mintl>
    8c74:	ab cd       	rjmp	.-1194   	; 0x87cc <__fp_mpack>

00008c76 <__unordsf2>:
    8c76:	65 dd       	rcall	.-1334   	; 0x8742 <__fp_cmp>
    8c78:	88 0b       	sbc	r24, r24
    8c7a:	99 0b       	sbc	r25, r25
    8c7c:	08 95       	ret

00008c7e <__fp_norm2>:
    8c7e:	91 50       	subi	r25, 0x01	; 1
    8c80:	50 40       	sbci	r21, 0x00	; 0
    8c82:	66 0f       	add	r22, r22
    8c84:	77 1f       	adc	r23, r23
    8c86:	88 1f       	adc	r24, r24
    8c88:	d2 f7       	brpl	.-12     	; 0x8c7e <__fp_norm2>
    8c8a:	08 95       	ret

00008c8c <__fp_powsodd>:
    8c8c:	9f 93       	push	r25
    8c8e:	8f 93       	push	r24
    8c90:	7f 93       	push	r23
    8c92:	6f 93       	push	r22
    8c94:	ff 93       	push	r31
    8c96:	ef 93       	push	r30
    8c98:	9b 01       	movw	r18, r22
    8c9a:	ac 01       	movw	r20, r24
    8c9c:	37 df       	rcall	.-402    	; 0x8b0c <__mulsf3>
    8c9e:	ef 91       	pop	r30
    8ca0:	ff 91       	pop	r31
    8ca2:	a5 dd       	rcall	.-1206   	; 0x87ee <__fp_powser>
    8ca4:	2f 91       	pop	r18
    8ca6:	3f 91       	pop	r19
    8ca8:	4f 91       	pop	r20
    8caa:	5f 91       	pop	r21
    8cac:	2f cf       	rjmp	.-418    	; 0x8b0c <__mulsf3>

00008cae <__mulsi3>:
    8cae:	62 9f       	mul	r22, r18
    8cb0:	d0 01       	movw	r26, r0
    8cb2:	73 9f       	mul	r23, r19
    8cb4:	f0 01       	movw	r30, r0
    8cb6:	82 9f       	mul	r24, r18
    8cb8:	e0 0d       	add	r30, r0
    8cba:	f1 1d       	adc	r31, r1
    8cbc:	64 9f       	mul	r22, r20
    8cbe:	e0 0d       	add	r30, r0
    8cc0:	f1 1d       	adc	r31, r1
    8cc2:	92 9f       	mul	r25, r18
    8cc4:	f0 0d       	add	r31, r0
    8cc6:	83 9f       	mul	r24, r19
    8cc8:	f0 0d       	add	r31, r0
    8cca:	74 9f       	mul	r23, r20
    8ccc:	f0 0d       	add	r31, r0
    8cce:	65 9f       	mul	r22, r21
    8cd0:	f0 0d       	add	r31, r0
    8cd2:	99 27       	eor	r25, r25
    8cd4:	72 9f       	mul	r23, r18
    8cd6:	b0 0d       	add	r27, r0
    8cd8:	e1 1d       	adc	r30, r1
    8cda:	f9 1f       	adc	r31, r25
    8cdc:	63 9f       	mul	r22, r19
    8cde:	b0 0d       	add	r27, r0
    8ce0:	e1 1d       	adc	r30, r1
    8ce2:	f9 1f       	adc	r31, r25
    8ce4:	bd 01       	movw	r22, r26
    8ce6:	cf 01       	movw	r24, r30
    8ce8:	11 24       	eor	r1, r1
    8cea:	08 95       	ret

00008cec <__udivmodsi4>:
    8cec:	a1 e2       	ldi	r26, 0x21	; 33
    8cee:	1a 2e       	mov	r1, r26
    8cf0:	aa 1b       	sub	r26, r26
    8cf2:	bb 1b       	sub	r27, r27
    8cf4:	fd 01       	movw	r30, r26
    8cf6:	0d c0       	rjmp	.+26     	; 0x8d12 <__udivmodsi4_ep>

00008cf8 <__udivmodsi4_loop>:
    8cf8:	aa 1f       	adc	r26, r26
    8cfa:	bb 1f       	adc	r27, r27
    8cfc:	ee 1f       	adc	r30, r30
    8cfe:	ff 1f       	adc	r31, r31
    8d00:	a2 17       	cp	r26, r18
    8d02:	b3 07       	cpc	r27, r19
    8d04:	e4 07       	cpc	r30, r20
    8d06:	f5 07       	cpc	r31, r21
    8d08:	20 f0       	brcs	.+8      	; 0x8d12 <__udivmodsi4_ep>
    8d0a:	a2 1b       	sub	r26, r18
    8d0c:	b3 0b       	sbc	r27, r19
    8d0e:	e4 0b       	sbc	r30, r20
    8d10:	f5 0b       	sbc	r31, r21

00008d12 <__udivmodsi4_ep>:
    8d12:	66 1f       	adc	r22, r22
    8d14:	77 1f       	adc	r23, r23
    8d16:	88 1f       	adc	r24, r24
    8d18:	99 1f       	adc	r25, r25
    8d1a:	1a 94       	dec	r1
    8d1c:	69 f7       	brne	.-38     	; 0x8cf8 <__udivmodsi4_loop>
    8d1e:	60 95       	com	r22
    8d20:	70 95       	com	r23
    8d22:	80 95       	com	r24
    8d24:	90 95       	com	r25
    8d26:	9b 01       	movw	r18, r22
    8d28:	ac 01       	movw	r20, r24
    8d2a:	bd 01       	movw	r22, r26
    8d2c:	cf 01       	movw	r24, r30
    8d2e:	08 95       	ret

00008d30 <__prologue_saves__>:
    8d30:	2f 92       	push	r2
    8d32:	3f 92       	push	r3
    8d34:	4f 92       	push	r4
    8d36:	5f 92       	push	r5
    8d38:	6f 92       	push	r6
    8d3a:	7f 92       	push	r7
    8d3c:	8f 92       	push	r8
    8d3e:	9f 92       	push	r9
    8d40:	af 92       	push	r10
    8d42:	bf 92       	push	r11
    8d44:	cf 92       	push	r12
    8d46:	df 92       	push	r13
    8d48:	ef 92       	push	r14
    8d4a:	ff 92       	push	r15
    8d4c:	0f 93       	push	r16
    8d4e:	1f 93       	push	r17
    8d50:	cf 93       	push	r28
    8d52:	df 93       	push	r29
    8d54:	cd b7       	in	r28, 0x3d	; 61
    8d56:	de b7       	in	r29, 0x3e	; 62
    8d58:	ca 1b       	sub	r28, r26
    8d5a:	db 0b       	sbc	r29, r27
    8d5c:	0f b6       	in	r0, 0x3f	; 63
    8d5e:	f8 94       	cli
    8d60:	de bf       	out	0x3e, r29	; 62
    8d62:	0f be       	out	0x3f, r0	; 63
    8d64:	cd bf       	out	0x3d, r28	; 61
    8d66:	19 94       	eijmp

00008d68 <__epilogue_restores__>:
    8d68:	2a 88       	ldd	r2, Y+18	; 0x12
    8d6a:	39 88       	ldd	r3, Y+17	; 0x11
    8d6c:	48 88       	ldd	r4, Y+16	; 0x10
    8d6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    8d70:	6e 84       	ldd	r6, Y+14	; 0x0e
    8d72:	7d 84       	ldd	r7, Y+13	; 0x0d
    8d74:	8c 84       	ldd	r8, Y+12	; 0x0c
    8d76:	9b 84       	ldd	r9, Y+11	; 0x0b
    8d78:	aa 84       	ldd	r10, Y+10	; 0x0a
    8d7a:	b9 84       	ldd	r11, Y+9	; 0x09
    8d7c:	c8 84       	ldd	r12, Y+8	; 0x08
    8d7e:	df 80       	ldd	r13, Y+7	; 0x07
    8d80:	ee 80       	ldd	r14, Y+6	; 0x06
    8d82:	fd 80       	ldd	r15, Y+5	; 0x05
    8d84:	0c 81       	ldd	r16, Y+4	; 0x04
    8d86:	1b 81       	ldd	r17, Y+3	; 0x03
    8d88:	aa 81       	ldd	r26, Y+2	; 0x02
    8d8a:	b9 81       	ldd	r27, Y+1	; 0x01
    8d8c:	ce 0f       	add	r28, r30
    8d8e:	d1 1d       	adc	r29, r1
    8d90:	0f b6       	in	r0, 0x3f	; 63
    8d92:	f8 94       	cli
    8d94:	de bf       	out	0x3e, r29	; 62
    8d96:	0f be       	out	0x3f, r0	; 63
    8d98:	cd bf       	out	0x3d, r28	; 61
    8d9a:	ed 01       	movw	r28, r26
    8d9c:	08 95       	ret

00008d9e <strtod>:
    8d9e:	8f 92       	push	r8
    8da0:	9f 92       	push	r9
    8da2:	af 92       	push	r10
    8da4:	bf 92       	push	r11
    8da6:	cf 92       	push	r12
    8da8:	df 92       	push	r13
    8daa:	ef 92       	push	r14
    8dac:	ff 92       	push	r15
    8dae:	0f 93       	push	r16
    8db0:	1f 93       	push	r17
    8db2:	cf 93       	push	r28
    8db4:	df 93       	push	r29
    8db6:	ec 01       	movw	r28, r24
    8db8:	5b 01       	movw	r10, r22
    8dba:	61 15       	cp	r22, r1
    8dbc:	71 05       	cpc	r23, r1
    8dbe:	19 f0       	breq	.+6      	; 0x8dc6 <strtod+0x28>
    8dc0:	fb 01       	movw	r30, r22
    8dc2:	80 83       	st	Z, r24
    8dc4:	91 83       	std	Z+1, r25	; 0x01
    8dc6:	f9 90       	ld	r15, Y+
    8dc8:	8f 2d       	mov	r24, r15
    8dca:	90 e0       	ldi	r25, 0x00	; 0
    8dcc:	0e 94 33 49 	call	0x9266	; 0x9266 <isspace>
    8dd0:	89 2b       	or	r24, r25
    8dd2:	c9 f7       	brne	.-14     	; 0x8dc6 <strtod+0x28>
    8dd4:	fd e2       	ldi	r31, 0x2D	; 45
    8dd6:	ff 16       	cp	r15, r31
    8dd8:	21 f4       	brne	.+8      	; 0x8de2 <strtod+0x44>
    8dda:	f9 90       	ld	r15, Y+
    8ddc:	ee 24       	eor	r14, r14
    8dde:	e3 94       	inc	r14
    8de0:	05 c0       	rjmp	.+10     	; 0x8dec <strtod+0x4e>
    8de2:	2b e2       	ldi	r18, 0x2B	; 43
    8de4:	f2 16       	cp	r15, r18
    8de6:	09 f4       	brne	.+2      	; 0x8dea <strtod+0x4c>
    8de8:	f9 90       	ld	r15, Y+
    8dea:	ee 24       	eor	r14, r14
    8dec:	8e 01       	movw	r16, r28
    8dee:	01 50       	subi	r16, 0x01	; 1
    8df0:	10 40       	sbci	r17, 0x00	; 0
    8df2:	c8 01       	movw	r24, r16
    8df4:	65 e1       	ldi	r22, 0x15	; 21
    8df6:	7e e1       	ldi	r23, 0x1E	; 30
    8df8:	43 e0       	ldi	r20, 0x03	; 3
    8dfa:	50 e0       	ldi	r21, 0x00	; 0
    8dfc:	0e 94 3b 49 	call	0x9276	; 0x9276 <strncasecmp_P>
    8e00:	89 2b       	or	r24, r25
    8e02:	01 f5       	brne	.+64     	; 0x8e44 <strtod+0xa6>
    8e04:	8e 01       	movw	r16, r28
    8e06:	0e 5f       	subi	r16, 0xFE	; 254
    8e08:	1f 4f       	sbci	r17, 0xFF	; 255
    8e0a:	c8 01       	movw	r24, r16
    8e0c:	68 e1       	ldi	r22, 0x18	; 24
    8e0e:	7e e1       	ldi	r23, 0x1E	; 30
    8e10:	45 e0       	ldi	r20, 0x05	; 5
    8e12:	50 e0       	ldi	r21, 0x00	; 0
    8e14:	0e 94 3b 49 	call	0x9276	; 0x9276 <strncasecmp_P>
    8e18:	89 2b       	or	r24, r25
    8e1a:	19 f4       	brne	.+6      	; 0x8e22 <strtod+0x84>
    8e1c:	8e 01       	movw	r16, r28
    8e1e:	09 5f       	subi	r16, 0xF9	; 249
    8e20:	1f 4f       	sbci	r17, 0xFF	; 255
    8e22:	a1 14       	cp	r10, r1
    8e24:	b1 04       	cpc	r11, r1
    8e26:	19 f0       	breq	.+6      	; 0x8e2e <strtod+0x90>
    8e28:	f5 01       	movw	r30, r10
    8e2a:	00 83       	st	Z, r16
    8e2c:	11 83       	std	Z+1, r17	; 0x01
    8e2e:	e0 fc       	sbrc	r14, 0
    8e30:	04 c0       	rjmp	.+8      	; 0x8e3a <strtod+0x9c>
    8e32:	70 e0       	ldi	r23, 0x00	; 0
    8e34:	90 e0       	ldi	r25, 0x00	; 0
    8e36:	80 e8       	ldi	r24, 0x80	; 128
    8e38:	14 c0       	rjmp	.+40     	; 0x8e62 <strtod+0xc4>
    8e3a:	70 e0       	ldi	r23, 0x00	; 0
    8e3c:	90 e0       	ldi	r25, 0x00	; 0
    8e3e:	80 e8       	ldi	r24, 0x80	; 128
    8e40:	6f ef       	ldi	r22, 0xFF	; 255
    8e42:	08 c1       	rjmp	.+528    	; 0x9054 <strtod+0x2b6>
    8e44:	c8 01       	movw	r24, r16
    8e46:	6d e1       	ldi	r22, 0x1D	; 29
    8e48:	7e e1       	ldi	r23, 0x1E	; 30
    8e4a:	43 e0       	ldi	r20, 0x03	; 3
    8e4c:	50 e0       	ldi	r21, 0x00	; 0
    8e4e:	0e 94 3b 49 	call	0x9276	; 0x9276 <strncasecmp_P>
    8e52:	89 2b       	or	r24, r25
    8e54:	69 f4       	brne	.+26     	; 0x8e70 <strtod+0xd2>
    8e56:	a1 14       	cp	r10, r1
    8e58:	b1 04       	cpc	r11, r1
    8e5a:	29 f4       	brne	.+10     	; 0x8e66 <strtod+0xc8>
    8e5c:	70 e0       	ldi	r23, 0x00	; 0
    8e5e:	90 e0       	ldi	r25, 0x00	; 0
    8e60:	80 ec       	ldi	r24, 0xC0	; 192
    8e62:	6f e7       	ldi	r22, 0x7F	; 127
    8e64:	f7 c0       	rjmp	.+494    	; 0x9054 <strtod+0x2b6>
    8e66:	22 96       	adiw	r28, 0x02	; 2
    8e68:	f5 01       	movw	r30, r10
    8e6a:	c0 83       	st	Z, r28
    8e6c:	d1 83       	std	Z+1, r29	; 0x01
    8e6e:	f6 cf       	rjmp	.-20     	; 0x8e5c <strtod+0xbe>
    8e70:	88 24       	eor	r8, r8
    8e72:	99 24       	eor	r9, r9
    8e74:	40 e0       	ldi	r20, 0x00	; 0
    8e76:	50 e0       	ldi	r21, 0x00	; 0
    8e78:	60 e0       	ldi	r22, 0x00	; 0
    8e7a:	70 e0       	ldi	r23, 0x00	; 0
    8e7c:	ef 2d       	mov	r30, r15
    8e7e:	e0 53       	subi	r30, 0x30	; 48
    8e80:	ea 30       	cpi	r30, 0x0A	; 10
    8e82:	a0 f5       	brcc	.+104    	; 0x8eec <strtod+0x14e>
    8e84:	f2 e0       	ldi	r31, 0x02	; 2
    8e86:	ef 2a       	or	r14, r31
    8e88:	8e 2d       	mov	r24, r14
    8e8a:	90 e0       	ldi	r25, 0x00	; 0
    8e8c:	9c 01       	movw	r18, r24
    8e8e:	28 70       	andi	r18, 0x08	; 8
    8e90:	30 70       	andi	r19, 0x00	; 0
    8e92:	e2 fe       	sbrs	r14, 2
    8e94:	06 c0       	rjmp	.+12     	; 0x8ea2 <strtod+0x104>
    8e96:	23 2b       	or	r18, r19
    8e98:	79 f5       	brne	.+94     	; 0x8ef8 <strtod+0x15a>
    8e9a:	08 94       	sec
    8e9c:	81 1c       	adc	r8, r1
    8e9e:	91 1c       	adc	r9, r1
    8ea0:	2b c0       	rjmp	.+86     	; 0x8ef8 <strtod+0x15a>
    8ea2:	23 2b       	or	r18, r19
    8ea4:	19 f0       	breq	.+6      	; 0x8eac <strtod+0x10e>
    8ea6:	08 94       	sec
    8ea8:	81 08       	sbc	r8, r1
    8eaa:	91 08       	sbc	r9, r1
    8eac:	db 01       	movw	r26, r22
    8eae:	ca 01       	movw	r24, r20
    8eb0:	12 e0       	ldi	r17, 0x02	; 2
    8eb2:	88 0f       	add	r24, r24
    8eb4:	99 1f       	adc	r25, r25
    8eb6:	aa 1f       	adc	r26, r26
    8eb8:	bb 1f       	adc	r27, r27
    8eba:	1a 95       	dec	r17
    8ebc:	d1 f7       	brne	.-12     	; 0x8eb2 <strtod+0x114>
    8ebe:	48 0f       	add	r20, r24
    8ec0:	59 1f       	adc	r21, r25
    8ec2:	6a 1f       	adc	r22, r26
    8ec4:	7b 1f       	adc	r23, r27
    8ec6:	44 0f       	add	r20, r20
    8ec8:	55 1f       	adc	r21, r21
    8eca:	66 1f       	adc	r22, r22
    8ecc:	77 1f       	adc	r23, r23
    8ece:	4e 0f       	add	r20, r30
    8ed0:	51 1d       	adc	r21, r1
    8ed2:	61 1d       	adc	r22, r1
    8ed4:	71 1d       	adc	r23, r1
    8ed6:	48 39       	cpi	r20, 0x98	; 152
    8ed8:	29 e9       	ldi	r18, 0x99	; 153
    8eda:	52 07       	cpc	r21, r18
    8edc:	29 e9       	ldi	r18, 0x99	; 153
    8ede:	62 07       	cpc	r22, r18
    8ee0:	29 e1       	ldi	r18, 0x19	; 25
    8ee2:	72 07       	cpc	r23, r18
    8ee4:	48 f0       	brcs	.+18     	; 0x8ef8 <strtod+0x15a>
    8ee6:	84 e0       	ldi	r24, 0x04	; 4
    8ee8:	e8 2a       	or	r14, r24
    8eea:	06 c0       	rjmp	.+12     	; 0x8ef8 <strtod+0x15a>
    8eec:	ee 3f       	cpi	r30, 0xFE	; 254
    8eee:	31 f4       	brne	.+12     	; 0x8efc <strtod+0x15e>
    8ef0:	e3 fc       	sbrc	r14, 3
    8ef2:	39 c0       	rjmp	.+114    	; 0x8f66 <strtod+0x1c8>
    8ef4:	98 e0       	ldi	r25, 0x08	; 8
    8ef6:	e9 2a       	or	r14, r25
    8ef8:	f9 90       	ld	r15, Y+
    8efa:	c0 cf       	rjmp	.-128    	; 0x8e7c <strtod+0xde>
    8efc:	e5 33       	cpi	r30, 0x35	; 53
    8efe:	11 f0       	breq	.+4      	; 0x8f04 <strtod+0x166>
    8f00:	e5 31       	cpi	r30, 0x15	; 21
    8f02:	89 f5       	brne	.+98     	; 0x8f66 <strtod+0x1c8>
    8f04:	29 91       	ld	r18, Y+
    8f06:	2d 32       	cpi	r18, 0x2D	; 45
    8f08:	19 f4       	brne	.+6      	; 0x8f10 <strtod+0x172>
    8f0a:	e0 e1       	ldi	r30, 0x10	; 16
    8f0c:	ee 2a       	or	r14, r30
    8f0e:	05 c0       	rjmp	.+10     	; 0x8f1a <strtod+0x17c>
    8f10:	2b 32       	cpi	r18, 0x2B	; 43
    8f12:	19 f0       	breq	.+6      	; 0x8f1a <strtod+0x17c>
    8f14:	81 e0       	ldi	r24, 0x01	; 1
    8f16:	90 e0       	ldi	r25, 0x00	; 0
    8f18:	03 c0       	rjmp	.+6      	; 0x8f20 <strtod+0x182>
    8f1a:	29 91       	ld	r18, Y+
    8f1c:	82 e0       	ldi	r24, 0x02	; 2
    8f1e:	90 e0       	ldi	r25, 0x00	; 0
    8f20:	e2 2f       	mov	r30, r18
    8f22:	e0 53       	subi	r30, 0x30	; 48
    8f24:	ea 30       	cpi	r30, 0x0A	; 10
    8f26:	18 f0       	brcs	.+6      	; 0x8f2e <strtod+0x190>
    8f28:	c8 1b       	sub	r28, r24
    8f2a:	d9 0b       	sbc	r29, r25
    8f2c:	1c c0       	rjmp	.+56     	; 0x8f66 <strtod+0x1c8>
    8f2e:	20 e0       	ldi	r18, 0x00	; 0
    8f30:	30 e0       	ldi	r19, 0x00	; 0
    8f32:	fc e0       	ldi	r31, 0x0C	; 12
    8f34:	20 38       	cpi	r18, 0x80	; 128
    8f36:	3f 07       	cpc	r19, r31
    8f38:	5c f4       	brge	.+22     	; 0x8f50 <strtod+0x1b2>
    8f3a:	c9 01       	movw	r24, r18
    8f3c:	88 0f       	add	r24, r24
    8f3e:	99 1f       	adc	r25, r25
    8f40:	88 0f       	add	r24, r24
    8f42:	99 1f       	adc	r25, r25
    8f44:	28 0f       	add	r18, r24
    8f46:	39 1f       	adc	r19, r25
    8f48:	22 0f       	add	r18, r18
    8f4a:	33 1f       	adc	r19, r19
    8f4c:	2e 0f       	add	r18, r30
    8f4e:	31 1d       	adc	r19, r1
    8f50:	e9 91       	ld	r30, Y+
    8f52:	e0 53       	subi	r30, 0x30	; 48
    8f54:	ea 30       	cpi	r30, 0x0A	; 10
    8f56:	68 f3       	brcs	.-38     	; 0x8f32 <strtod+0x194>
    8f58:	e4 fe       	sbrs	r14, 4
    8f5a:	03 c0       	rjmp	.+6      	; 0x8f62 <strtod+0x1c4>
    8f5c:	30 95       	com	r19
    8f5e:	21 95       	neg	r18
    8f60:	3f 4f       	sbci	r19, 0xFF	; 255
    8f62:	82 0e       	add	r8, r18
    8f64:	93 1e       	adc	r9, r19
    8f66:	ce 2c       	mov	r12, r14
    8f68:	dd 24       	eor	r13, r13
    8f6a:	e1 fe       	sbrs	r14, 1
    8f6c:	07 c0       	rjmp	.+14     	; 0x8f7c <strtod+0x1de>
    8f6e:	a1 14       	cp	r10, r1
    8f70:	b1 04       	cpc	r11, r1
    8f72:	21 f0       	breq	.+8      	; 0x8f7c <strtod+0x1de>
    8f74:	21 97       	sbiw	r28, 0x01	; 1
    8f76:	f5 01       	movw	r30, r10
    8f78:	c0 83       	st	Z, r28
    8f7a:	d1 83       	std	Z+1, r29	; 0x01
    8f7c:	cb 01       	movw	r24, r22
    8f7e:	ba 01       	movw	r22, r20
    8f80:	0e 94 64 43 	call	0x86c8	; 0x86c8 <__floatunsisf>
    8f84:	7b 01       	movw	r14, r22
    8f86:	8c 01       	movw	r16, r24
    8f88:	f3 e0       	ldi	r31, 0x03	; 3
    8f8a:	cf 22       	and	r12, r31
    8f8c:	dd 24       	eor	r13, r13
    8f8e:	23 e0       	ldi	r18, 0x03	; 3
    8f90:	c2 16       	cp	r12, r18
    8f92:	d1 04       	cpc	r13, r1
    8f94:	21 f4       	brne	.+8      	; 0x8f9e <strtod+0x200>
    8f96:	17 fb       	bst	r17, 7
    8f98:	10 95       	com	r17
    8f9a:	17 f9       	bld	r17, 7
    8f9c:	10 95       	com	r17
    8f9e:	57 01       	movw	r10, r14
    8fa0:	68 01       	movw	r12, r16
    8fa2:	c8 01       	movw	r24, r16
    8fa4:	b7 01       	movw	r22, r14
    8fa6:	20 e0       	ldi	r18, 0x00	; 0
    8fa8:	30 e0       	ldi	r19, 0x00	; 0
    8faa:	40 e0       	ldi	r20, 0x00	; 0
    8fac:	50 e0       	ldi	r21, 0x00	; 0
    8fae:	0e 94 c4 42 	call	0x8588	; 0x8588 <__cmpsf2>
    8fb2:	88 23       	and	r24, r24
    8fb4:	09 f4       	brne	.+2      	; 0x8fb8 <strtod+0x21a>
    8fb6:	4a c0       	rjmp	.+148    	; 0x904c <strtod+0x2ae>
    8fb8:	97 fe       	sbrs	r9, 7
    8fba:	0d c0       	rjmp	.+26     	; 0x8fd6 <strtod+0x238>
    8fbc:	24 e3       	ldi	r18, 0x34	; 52
    8fbe:	e2 2e       	mov	r14, r18
    8fc0:	2e e1       	ldi	r18, 0x1E	; 30
    8fc2:	f2 2e       	mov	r15, r18
    8fc4:	90 94       	com	r9
    8fc6:	81 94       	neg	r8
    8fc8:	91 08       	sbc	r9, r1
    8fca:	93 94       	inc	r9
    8fcc:	c0 e2       	ldi	r28, 0x20	; 32
    8fce:	d0 e0       	ldi	r29, 0x00	; 0
    8fd0:	00 e0       	ldi	r16, 0x00	; 0
    8fd2:	10 e0       	ldi	r17, 0x00	; 0
    8fd4:	12 c0       	rjmp	.+36     	; 0x8ffa <strtod+0x25c>
    8fd6:	9c e4       	ldi	r25, 0x4C	; 76
    8fd8:	e9 2e       	mov	r14, r25
    8fda:	9e e1       	ldi	r25, 0x1E	; 30
    8fdc:	f9 2e       	mov	r15, r25
    8fde:	f6 cf       	rjmp	.-20     	; 0x8fcc <strtod+0x22e>
    8fe0:	f7 01       	movw	r30, r14
    8fe2:	25 91       	lpm	r18, Z+
    8fe4:	35 91       	lpm	r19, Z+
    8fe6:	45 91       	lpm	r20, Z+
    8fe8:	54 91       	lpm	r21, Z+
    8fea:	c6 01       	movw	r24, r12
    8fec:	b5 01       	movw	r22, r10
    8fee:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <__mulsf3>
    8ff2:	5b 01       	movw	r10, r22
    8ff4:	6c 01       	movw	r12, r24
    8ff6:	8c 1a       	sub	r8, r28
    8ff8:	9d 0a       	sbc	r9, r29
    8ffa:	8c 16       	cp	r8, r28
    8ffc:	9d 06       	cpc	r9, r29
    8ffe:	84 f7       	brge	.-32     	; 0x8fe0 <strtod+0x242>
    9000:	d5 95       	asr	r29
    9002:	c7 95       	ror	r28
    9004:	0f 5f       	subi	r16, 0xFF	; 255
    9006:	1f 4f       	sbci	r17, 0xFF	; 255
    9008:	06 30       	cpi	r16, 0x06	; 6
    900a:	11 05       	cpc	r17, r1
    900c:	29 f0       	breq	.+10     	; 0x9018 <strtod+0x27a>
    900e:	8c ef       	ldi	r24, 0xFC	; 252
    9010:	9f ef       	ldi	r25, 0xFF	; 255
    9012:	e8 0e       	add	r14, r24
    9014:	f9 1e       	adc	r15, r25
    9016:	f1 cf       	rjmp	.-30     	; 0x8ffa <strtod+0x25c>
    9018:	c5 01       	movw	r24, r10
    901a:	d6 01       	movw	r26, r12
    901c:	7c 01       	movw	r14, r24
    901e:	8d 01       	movw	r16, r26
    9020:	8c 2d       	mov	r24, r12
    9022:	88 0f       	add	r24, r24
    9024:	8d 2d       	mov	r24, r13
    9026:	88 1f       	adc	r24, r24
    9028:	8f 3f       	cpi	r24, 0xFF	; 255
    902a:	51 f0       	breq	.+20     	; 0x9040 <strtod+0x2a2>
    902c:	c6 01       	movw	r24, r12
    902e:	b5 01       	movw	r22, r10
    9030:	20 e0       	ldi	r18, 0x00	; 0
    9032:	30 e0       	ldi	r19, 0x00	; 0
    9034:	40 e0       	ldi	r20, 0x00	; 0
    9036:	50 e0       	ldi	r21, 0x00	; 0
    9038:	0e 94 c4 42 	call	0x8588	; 0x8588 <__cmpsf2>
    903c:	88 23       	and	r24, r24
    903e:	31 f4       	brne	.+12     	; 0x904c <strtod+0x2ae>
    9040:	82 e2       	ldi	r24, 0x22	; 34
    9042:	90 e0       	ldi	r25, 0x00	; 0
    9044:	80 93 86 25 	sts	0x2586, r24
    9048:	90 93 87 25 	sts	0x2587, r25
    904c:	7e 2d       	mov	r23, r14
    904e:	9f 2d       	mov	r25, r15
    9050:	80 2f       	mov	r24, r16
    9052:	61 2f       	mov	r22, r17
    9054:	27 2f       	mov	r18, r23
    9056:	39 2f       	mov	r19, r25
    9058:	48 2f       	mov	r20, r24
    905a:	56 2f       	mov	r21, r22
    905c:	b9 01       	movw	r22, r18
    905e:	ca 01       	movw	r24, r20
    9060:	df 91       	pop	r29
    9062:	cf 91       	pop	r28
    9064:	1f 91       	pop	r17
    9066:	0f 91       	pop	r16
    9068:	ff 90       	pop	r15
    906a:	ef 90       	pop	r14
    906c:	df 90       	pop	r13
    906e:	cf 90       	pop	r12
    9070:	bf 90       	pop	r11
    9072:	af 90       	pop	r10
    9074:	9f 90       	pop	r9
    9076:	8f 90       	pop	r8
    9078:	08 95       	ret

0000907a <atoi>:
    907a:	fc 01       	movw	r30, r24
    907c:	88 27       	eor	r24, r24
    907e:	99 27       	eor	r25, r25
    9080:	e8 94       	clt
    9082:	21 91       	ld	r18, Z+
    9084:	20 32       	cpi	r18, 0x20	; 32
    9086:	e9 f3       	breq	.-6      	; 0x9082 <atoi+0x8>
    9088:	29 30       	cpi	r18, 0x09	; 9
    908a:	10 f0       	brcs	.+4      	; 0x9090 <atoi+0x16>
    908c:	2e 30       	cpi	r18, 0x0E	; 14
    908e:	c8 f3       	brcs	.-14     	; 0x9082 <atoi+0x8>
    9090:	2b 32       	cpi	r18, 0x2B	; 43
    9092:	41 f0       	breq	.+16     	; 0x90a4 <atoi+0x2a>
    9094:	2d 32       	cpi	r18, 0x2D	; 45
    9096:	39 f4       	brne	.+14     	; 0x90a6 <atoi+0x2c>
    9098:	68 94       	set
    909a:	04 c0       	rjmp	.+8      	; 0x90a4 <atoi+0x2a>
    909c:	0e 94 69 49 	call	0x92d2	; 0x92d2 <__mulhi_const_10>
    90a0:	82 0f       	add	r24, r18
    90a2:	91 1d       	adc	r25, r1
    90a4:	21 91       	ld	r18, Z+
    90a6:	20 53       	subi	r18, 0x30	; 48
    90a8:	2a 30       	cpi	r18, 0x0A	; 10
    90aa:	c0 f3       	brcs	.-16     	; 0x909c <atoi+0x22>
    90ac:	1e f4       	brtc	.+6      	; 0x90b4 <atoi+0x3a>
    90ae:	90 95       	com	r25
    90b0:	81 95       	neg	r24
    90b2:	9f 4f       	sbci	r25, 0xFF	; 255
    90b4:	08 95       	ret

000090b6 <__ftoa_engine>:
    90b6:	28 30       	cpi	r18, 0x08	; 8
    90b8:	08 f0       	brcs	.+2      	; 0x90bc <__ftoa_engine+0x6>
    90ba:	27 e0       	ldi	r18, 0x07	; 7
    90bc:	33 27       	eor	r19, r19
    90be:	da 01       	movw	r26, r20
    90c0:	99 0f       	add	r25, r25
    90c2:	31 1d       	adc	r19, r1
    90c4:	87 fd       	sbrc	r24, 7
    90c6:	91 60       	ori	r25, 0x01	; 1
    90c8:	00 96       	adiw	r24, 0x00	; 0
    90ca:	61 05       	cpc	r22, r1
    90cc:	71 05       	cpc	r23, r1
    90ce:	39 f4       	brne	.+14     	; 0x90de <__ftoa_engine+0x28>
    90d0:	32 60       	ori	r19, 0x02	; 2
    90d2:	2e 5f       	subi	r18, 0xFE	; 254
    90d4:	3d 93       	st	X+, r19
    90d6:	30 e3       	ldi	r19, 0x30	; 48
    90d8:	2a 95       	dec	r18
    90da:	e1 f7       	brne	.-8      	; 0x90d4 <__ftoa_engine+0x1e>
    90dc:	08 95       	ret
    90de:	9f 3f       	cpi	r25, 0xFF	; 255
    90e0:	30 f0       	brcs	.+12     	; 0x90ee <__ftoa_engine+0x38>
    90e2:	80 38       	cpi	r24, 0x80	; 128
    90e4:	71 05       	cpc	r23, r1
    90e6:	61 05       	cpc	r22, r1
    90e8:	09 f0       	breq	.+2      	; 0x90ec <__ftoa_engine+0x36>
    90ea:	3c 5f       	subi	r19, 0xFC	; 252
    90ec:	3c 5f       	subi	r19, 0xFC	; 252
    90ee:	3d 93       	st	X+, r19
    90f0:	91 30       	cpi	r25, 0x01	; 1
    90f2:	08 f0       	brcs	.+2      	; 0x90f6 <__ftoa_engine+0x40>
    90f4:	80 68       	ori	r24, 0x80	; 128
    90f6:	91 1d       	adc	r25, r1
    90f8:	df 93       	push	r29
    90fa:	cf 93       	push	r28
    90fc:	1f 93       	push	r17
    90fe:	0f 93       	push	r16
    9100:	ff 92       	push	r15
    9102:	ef 92       	push	r14
    9104:	19 2f       	mov	r17, r25
    9106:	98 7f       	andi	r25, 0xF8	; 248
    9108:	96 95       	lsr	r25
    910a:	e9 2f       	mov	r30, r25
    910c:	96 95       	lsr	r25
    910e:	96 95       	lsr	r25
    9110:	e9 0f       	add	r30, r25
    9112:	ff 27       	eor	r31, r31
    9114:	e6 55       	subi	r30, 0x56	; 86
    9116:	f1 4e       	sbci	r31, 0xE1	; 225
    9118:	99 27       	eor	r25, r25
    911a:	33 27       	eor	r19, r19
    911c:	ee 24       	eor	r14, r14
    911e:	ff 24       	eor	r15, r15
    9120:	a7 01       	movw	r20, r14
    9122:	e7 01       	movw	r28, r14
    9124:	05 90       	lpm	r0, Z+
    9126:	08 94       	sec
    9128:	07 94       	ror	r0
    912a:	28 f4       	brcc	.+10     	; 0x9136 <__ftoa_engine+0x80>
    912c:	36 0f       	add	r19, r22
    912e:	e7 1e       	adc	r14, r23
    9130:	f8 1e       	adc	r15, r24
    9132:	49 1f       	adc	r20, r25
    9134:	51 1d       	adc	r21, r1
    9136:	66 0f       	add	r22, r22
    9138:	77 1f       	adc	r23, r23
    913a:	88 1f       	adc	r24, r24
    913c:	99 1f       	adc	r25, r25
    913e:	06 94       	lsr	r0
    9140:	a1 f7       	brne	.-24     	; 0x912a <__ftoa_engine+0x74>
    9142:	05 90       	lpm	r0, Z+
    9144:	07 94       	ror	r0
    9146:	28 f4       	brcc	.+10     	; 0x9152 <__ftoa_engine+0x9c>
    9148:	e7 0e       	add	r14, r23
    914a:	f8 1e       	adc	r15, r24
    914c:	49 1f       	adc	r20, r25
    914e:	56 1f       	adc	r21, r22
    9150:	c1 1d       	adc	r28, r1
    9152:	77 0f       	add	r23, r23
    9154:	88 1f       	adc	r24, r24
    9156:	99 1f       	adc	r25, r25
    9158:	66 1f       	adc	r22, r22
    915a:	06 94       	lsr	r0
    915c:	a1 f7       	brne	.-24     	; 0x9146 <__ftoa_engine+0x90>
    915e:	05 90       	lpm	r0, Z+
    9160:	07 94       	ror	r0
    9162:	28 f4       	brcc	.+10     	; 0x916e <__ftoa_engine+0xb8>
    9164:	f8 0e       	add	r15, r24
    9166:	49 1f       	adc	r20, r25
    9168:	56 1f       	adc	r21, r22
    916a:	c7 1f       	adc	r28, r23
    916c:	d1 1d       	adc	r29, r1
    916e:	88 0f       	add	r24, r24
    9170:	99 1f       	adc	r25, r25
    9172:	66 1f       	adc	r22, r22
    9174:	77 1f       	adc	r23, r23
    9176:	06 94       	lsr	r0
    9178:	a1 f7       	brne	.-24     	; 0x9162 <__ftoa_engine+0xac>
    917a:	05 90       	lpm	r0, Z+
    917c:	07 94       	ror	r0
    917e:	20 f4       	brcc	.+8      	; 0x9188 <__ftoa_engine+0xd2>
    9180:	49 0f       	add	r20, r25
    9182:	56 1f       	adc	r21, r22
    9184:	c7 1f       	adc	r28, r23
    9186:	d8 1f       	adc	r29, r24
    9188:	99 0f       	add	r25, r25
    918a:	66 1f       	adc	r22, r22
    918c:	77 1f       	adc	r23, r23
    918e:	88 1f       	adc	r24, r24
    9190:	06 94       	lsr	r0
    9192:	a9 f7       	brne	.-22     	; 0x917e <__ftoa_engine+0xc8>
    9194:	84 91       	lpm	r24, Z+
    9196:	10 95       	com	r17
    9198:	17 70       	andi	r17, 0x07	; 7
    919a:	41 f0       	breq	.+16     	; 0x91ac <__ftoa_engine+0xf6>
    919c:	d6 95       	lsr	r29
    919e:	c7 95       	ror	r28
    91a0:	57 95       	ror	r21
    91a2:	47 95       	ror	r20
    91a4:	f7 94       	ror	r15
    91a6:	e7 94       	ror	r14
    91a8:	1a 95       	dec	r17
    91aa:	c1 f7       	brne	.-16     	; 0x919c <__ftoa_engine+0xe6>
    91ac:	e0 e5       	ldi	r30, 0x50	; 80
    91ae:	fe e1       	ldi	r31, 0x1E	; 30
    91b0:	68 94       	set
    91b2:	15 90       	lpm	r1, Z+
    91b4:	15 91       	lpm	r17, Z+
    91b6:	35 91       	lpm	r19, Z+
    91b8:	65 91       	lpm	r22, Z+
    91ba:	95 91       	lpm	r25, Z+
    91bc:	05 90       	lpm	r0, Z+
    91be:	7f e2       	ldi	r23, 0x2F	; 47
    91c0:	73 95       	inc	r23
    91c2:	e1 18       	sub	r14, r1
    91c4:	f1 0a       	sbc	r15, r17
    91c6:	43 0b       	sbc	r20, r19
    91c8:	56 0b       	sbc	r21, r22
    91ca:	c9 0b       	sbc	r28, r25
    91cc:	d0 09       	sbc	r29, r0
    91ce:	c0 f7       	brcc	.-16     	; 0x91c0 <__ftoa_engine+0x10a>
    91d0:	e1 0c       	add	r14, r1
    91d2:	f1 1e       	adc	r15, r17
    91d4:	43 1f       	adc	r20, r19
    91d6:	56 1f       	adc	r21, r22
    91d8:	c9 1f       	adc	r28, r25
    91da:	d0 1d       	adc	r29, r0
    91dc:	7e f4       	brtc	.+30     	; 0x91fc <__ftoa_engine+0x146>
    91de:	70 33       	cpi	r23, 0x30	; 48
    91e0:	11 f4       	brne	.+4      	; 0x91e6 <__ftoa_engine+0x130>
    91e2:	8a 95       	dec	r24
    91e4:	e6 cf       	rjmp	.-52     	; 0x91b2 <__ftoa_engine+0xfc>
    91e6:	e8 94       	clt
    91e8:	01 50       	subi	r16, 0x01	; 1
    91ea:	30 f0       	brcs	.+12     	; 0x91f8 <__ftoa_engine+0x142>
    91ec:	08 0f       	add	r16, r24
    91ee:	0a f4       	brpl	.+2      	; 0x91f2 <__ftoa_engine+0x13c>
    91f0:	00 27       	eor	r16, r16
    91f2:	02 17       	cp	r16, r18
    91f4:	08 f4       	brcc	.+2      	; 0x91f8 <__ftoa_engine+0x142>
    91f6:	20 2f       	mov	r18, r16
    91f8:	23 95       	inc	r18
    91fa:	02 2f       	mov	r16, r18
    91fc:	7a 33       	cpi	r23, 0x3A	; 58
    91fe:	28 f0       	brcs	.+10     	; 0x920a <__ftoa_engine+0x154>
    9200:	79 e3       	ldi	r23, 0x39	; 57
    9202:	7d 93       	st	X+, r23
    9204:	2a 95       	dec	r18
    9206:	e9 f7       	brne	.-6      	; 0x9202 <__ftoa_engine+0x14c>
    9208:	10 c0       	rjmp	.+32     	; 0x922a <__ftoa_engine+0x174>
    920a:	7d 93       	st	X+, r23
    920c:	2a 95       	dec	r18
    920e:	89 f6       	brne	.-94     	; 0x91b2 <__ftoa_engine+0xfc>
    9210:	06 94       	lsr	r0
    9212:	97 95       	ror	r25
    9214:	67 95       	ror	r22
    9216:	37 95       	ror	r19
    9218:	17 95       	ror	r17
    921a:	17 94       	ror	r1
    921c:	e1 18       	sub	r14, r1
    921e:	f1 0a       	sbc	r15, r17
    9220:	43 0b       	sbc	r20, r19
    9222:	56 0b       	sbc	r21, r22
    9224:	c9 0b       	sbc	r28, r25
    9226:	d0 09       	sbc	r29, r0
    9228:	98 f0       	brcs	.+38     	; 0x9250 <__ftoa_engine+0x19a>
    922a:	23 95       	inc	r18
    922c:	7e 91       	ld	r23, -X
    922e:	73 95       	inc	r23
    9230:	7a 33       	cpi	r23, 0x3A	; 58
    9232:	08 f0       	brcs	.+2      	; 0x9236 <__ftoa_engine+0x180>
    9234:	70 e3       	ldi	r23, 0x30	; 48
    9236:	7c 93       	st	X, r23
    9238:	20 13       	cpse	r18, r16
    923a:	b8 f7       	brcc	.-18     	; 0x922a <__ftoa_engine+0x174>
    923c:	7e 91       	ld	r23, -X
    923e:	70 61       	ori	r23, 0x10	; 16
    9240:	7d 93       	st	X+, r23
    9242:	30 f0       	brcs	.+12     	; 0x9250 <__ftoa_engine+0x19a>
    9244:	83 95       	inc	r24
    9246:	71 e3       	ldi	r23, 0x31	; 49
    9248:	7d 93       	st	X+, r23
    924a:	70 e3       	ldi	r23, 0x30	; 48
    924c:	2a 95       	dec	r18
    924e:	e1 f7       	brne	.-8      	; 0x9248 <__ftoa_engine+0x192>
    9250:	11 24       	eor	r1, r1
    9252:	ef 90       	pop	r14
    9254:	ff 90       	pop	r15
    9256:	0f 91       	pop	r16
    9258:	1f 91       	pop	r17
    925a:	cf 91       	pop	r28
    925c:	df 91       	pop	r29
    925e:	99 27       	eor	r25, r25
    9260:	87 fd       	sbrc	r24, 7
    9262:	90 95       	com	r25
    9264:	08 95       	ret

00009266 <isspace>:
    9266:	91 11       	cpse	r25, r1
    9268:	21 c1       	rjmp	.+578    	; 0x94ac <__ctype_isfalse>
    926a:	80 32       	cpi	r24, 0x20	; 32
    926c:	19 f0       	breq	.+6      	; 0x9274 <isspace+0xe>
    926e:	89 50       	subi	r24, 0x09	; 9
    9270:	85 50       	subi	r24, 0x05	; 5
    9272:	d0 f7       	brcc	.-12     	; 0x9268 <isspace+0x2>
    9274:	08 95       	ret

00009276 <strncasecmp_P>:
    9276:	fb 01       	movw	r30, r22
    9278:	dc 01       	movw	r26, r24
    927a:	41 50       	subi	r20, 0x01	; 1
    927c:	50 40       	sbci	r21, 0x00	; 0
    927e:	88 f0       	brcs	.+34     	; 0x92a2 <strncasecmp_P+0x2c>
    9280:	8d 91       	ld	r24, X+
    9282:	81 34       	cpi	r24, 0x41	; 65
    9284:	1c f0       	brlt	.+6      	; 0x928c <strncasecmp_P+0x16>
    9286:	8b 35       	cpi	r24, 0x5B	; 91
    9288:	0c f4       	brge	.+2      	; 0x928c <strncasecmp_P+0x16>
    928a:	80 5e       	subi	r24, 0xE0	; 224
    928c:	65 91       	lpm	r22, Z+
    928e:	61 34       	cpi	r22, 0x41	; 65
    9290:	1c f0       	brlt	.+6      	; 0x9298 <strncasecmp_P+0x22>
    9292:	6b 35       	cpi	r22, 0x5B	; 91
    9294:	0c f4       	brge	.+2      	; 0x9298 <strncasecmp_P+0x22>
    9296:	60 5e       	subi	r22, 0xE0	; 224
    9298:	86 1b       	sub	r24, r22
    929a:	61 11       	cpse	r22, r1
    929c:	71 f3       	breq	.-36     	; 0x927a <strncasecmp_P+0x4>
    929e:	99 0b       	sbc	r25, r25
    92a0:	08 95       	ret
    92a2:	88 1b       	sub	r24, r24
    92a4:	fc cf       	rjmp	.-8      	; 0x929e <strncasecmp_P+0x28>

000092a6 <strnlen_P>:
    92a6:	fc 01       	movw	r30, r24
    92a8:	05 90       	lpm	r0, Z+
    92aa:	61 50       	subi	r22, 0x01	; 1
    92ac:	70 40       	sbci	r23, 0x00	; 0
    92ae:	01 10       	cpse	r0, r1
    92b0:	d8 f7       	brcc	.-10     	; 0x92a8 <strnlen_P+0x2>
    92b2:	80 95       	com	r24
    92b4:	90 95       	com	r25
    92b6:	8e 0f       	add	r24, r30
    92b8:	9f 1f       	adc	r25, r31
    92ba:	08 95       	ret

000092bc <strnlen>:
    92bc:	fc 01       	movw	r30, r24
    92be:	61 50       	subi	r22, 0x01	; 1
    92c0:	70 40       	sbci	r23, 0x00	; 0
    92c2:	01 90       	ld	r0, Z+
    92c4:	01 10       	cpse	r0, r1
    92c6:	d8 f7       	brcc	.-10     	; 0x92be <strnlen+0x2>
    92c8:	80 95       	com	r24
    92ca:	90 95       	com	r25
    92cc:	8e 0f       	add	r24, r30
    92ce:	9f 1f       	adc	r25, r31
    92d0:	08 95       	ret

000092d2 <__mulhi_const_10>:
    92d2:	7a e0       	ldi	r23, 0x0A	; 10
    92d4:	97 9f       	mul	r25, r23
    92d6:	90 2d       	mov	r25, r0
    92d8:	87 9f       	mul	r24, r23
    92da:	80 2d       	mov	r24, r0
    92dc:	91 0d       	add	r25, r1
    92de:	11 24       	eor	r1, r1
    92e0:	08 95       	ret

000092e2 <clearerr>:
    92e2:	fc 01       	movw	r30, r24
    92e4:	83 81       	ldd	r24, Z+3	; 0x03
    92e6:	8f 7c       	andi	r24, 0xCF	; 207
    92e8:	83 83       	std	Z+3, r24	; 0x03
    92ea:	08 95       	ret

000092ec <fgets>:
    92ec:	cf 92       	push	r12
    92ee:	df 92       	push	r13
    92f0:	ef 92       	push	r14
    92f2:	ff 92       	push	r15
    92f4:	0f 93       	push	r16
    92f6:	1f 93       	push	r17
    92f8:	cf 93       	push	r28
    92fa:	df 93       	push	r29
    92fc:	7c 01       	movw	r14, r24
    92fe:	6a 01       	movw	r12, r20
    9300:	fa 01       	movw	r30, r20
    9302:	83 81       	ldd	r24, Z+3	; 0x03
    9304:	80 ff       	sbrs	r24, 0
    9306:	19 c0       	rjmp	.+50     	; 0x933a <fgets+0x4e>
    9308:	16 16       	cp	r1, r22
    930a:	17 06       	cpc	r1, r23
    930c:	b4 f4       	brge	.+44     	; 0x933a <fgets+0x4e>
    930e:	eb 01       	movw	r28, r22
    9310:	21 97       	sbiw	r28, 0x01	; 1
    9312:	87 01       	movw	r16, r14
    9314:	0d c0       	rjmp	.+26     	; 0x9330 <fgets+0x44>
    9316:	c6 01       	movw	r24, r12
    9318:	0e 94 59 4a 	call	0x94b2	; 0x94b2 <fgetc>
    931c:	ff ef       	ldi	r31, 0xFF	; 255
    931e:	8f 3f       	cpi	r24, 0xFF	; 255
    9320:	9f 07       	cpc	r25, r31
    9322:	59 f0       	breq	.+22     	; 0x933a <fgets+0x4e>
    9324:	f8 01       	movw	r30, r16
    9326:	81 93       	st	Z+, r24
    9328:	8f 01       	movw	r16, r30
    932a:	0a 97       	sbiw	r24, 0x0a	; 10
    932c:	19 f0       	breq	.+6      	; 0x9334 <fgets+0x48>
    932e:	21 97       	sbiw	r28, 0x01	; 1
    9330:	20 97       	sbiw	r28, 0x00	; 0
    9332:	89 f7       	brne	.-30     	; 0x9316 <fgets+0x2a>
    9334:	f8 01       	movw	r30, r16
    9336:	10 82       	st	Z, r1
    9338:	02 c0       	rjmp	.+4      	; 0x933e <fgets+0x52>
    933a:	ee 24       	eor	r14, r14
    933c:	ff 24       	eor	r15, r15
    933e:	c7 01       	movw	r24, r14
    9340:	df 91       	pop	r29
    9342:	cf 91       	pop	r28
    9344:	1f 91       	pop	r17
    9346:	0f 91       	pop	r16
    9348:	ff 90       	pop	r15
    934a:	ef 90       	pop	r14
    934c:	df 90       	pop	r13
    934e:	cf 90       	pop	r12
    9350:	08 95       	ret

00009352 <fputc>:
    9352:	0f 93       	push	r16
    9354:	1f 93       	push	r17
    9356:	cf 93       	push	r28
    9358:	df 93       	push	r29
    935a:	8c 01       	movw	r16, r24
    935c:	eb 01       	movw	r28, r22
    935e:	8b 81       	ldd	r24, Y+3	; 0x03
    9360:	81 ff       	sbrs	r24, 1
    9362:	1b c0       	rjmp	.+54     	; 0x939a <fputc+0x48>
    9364:	82 ff       	sbrs	r24, 2
    9366:	0d c0       	rjmp	.+26     	; 0x9382 <fputc+0x30>
    9368:	2e 81       	ldd	r18, Y+6	; 0x06
    936a:	3f 81       	ldd	r19, Y+7	; 0x07
    936c:	8c 81       	ldd	r24, Y+4	; 0x04
    936e:	9d 81       	ldd	r25, Y+5	; 0x05
    9370:	28 17       	cp	r18, r24
    9372:	39 07       	cpc	r19, r25
    9374:	64 f4       	brge	.+24     	; 0x938e <fputc+0x3c>
    9376:	e8 81       	ld	r30, Y
    9378:	f9 81       	ldd	r31, Y+1	; 0x01
    937a:	01 93       	st	Z+, r16
    937c:	e8 83       	st	Y, r30
    937e:	f9 83       	std	Y+1, r31	; 0x01
    9380:	06 c0       	rjmp	.+12     	; 0x938e <fputc+0x3c>
    9382:	e8 85       	ldd	r30, Y+8	; 0x08
    9384:	f9 85       	ldd	r31, Y+9	; 0x09
    9386:	80 2f       	mov	r24, r16
    9388:	19 95       	eicall
    938a:	89 2b       	or	r24, r25
    938c:	31 f4       	brne	.+12     	; 0x939a <fputc+0x48>
    938e:	8e 81       	ldd	r24, Y+6	; 0x06
    9390:	9f 81       	ldd	r25, Y+7	; 0x07
    9392:	01 96       	adiw	r24, 0x01	; 1
    9394:	8e 83       	std	Y+6, r24	; 0x06
    9396:	9f 83       	std	Y+7, r25	; 0x07
    9398:	02 c0       	rjmp	.+4      	; 0x939e <fputc+0x4c>
    939a:	0f ef       	ldi	r16, 0xFF	; 255
    939c:	1f ef       	ldi	r17, 0xFF	; 255
    939e:	c8 01       	movw	r24, r16
    93a0:	df 91       	pop	r29
    93a2:	cf 91       	pop	r28
    93a4:	1f 91       	pop	r17
    93a6:	0f 91       	pop	r16
    93a8:	08 95       	ret

000093aa <printf_P>:
    93aa:	df 93       	push	r29
    93ac:	cf 93       	push	r28
    93ae:	cd b7       	in	r28, 0x3d	; 61
    93b0:	de b7       	in	r29, 0x3e	; 62
    93b2:	fe 01       	movw	r30, r28
    93b4:	36 96       	adiw	r30, 0x06	; 6
    93b6:	61 91       	ld	r22, Z+
    93b8:	71 91       	ld	r23, Z+
    93ba:	a0 91 82 25 	lds	r26, 0x2582
    93be:	b0 91 83 25 	lds	r27, 0x2583
    93c2:	13 96       	adiw	r26, 0x03	; 3
    93c4:	8c 91       	ld	r24, X
    93c6:	13 97       	sbiw	r26, 0x03	; 3
    93c8:	88 60       	ori	r24, 0x08	; 8
    93ca:	13 96       	adiw	r26, 0x03	; 3
    93cc:	8c 93       	st	X, r24
    93ce:	80 91 82 25 	lds	r24, 0x2582
    93d2:	90 91 83 25 	lds	r25, 0x2583
    93d6:	af 01       	movw	r20, r30
    93d8:	0e 94 7a 3e 	call	0x7cf4	; 0x7cf4 <vfprintf>
    93dc:	e0 91 82 25 	lds	r30, 0x2582
    93e0:	f0 91 83 25 	lds	r31, 0x2583
    93e4:	23 81       	ldd	r18, Z+3	; 0x03
    93e6:	27 7f       	andi	r18, 0xF7	; 247
    93e8:	23 83       	std	Z+3, r18	; 0x03
    93ea:	cf 91       	pop	r28
    93ec:	df 91       	pop	r29
    93ee:	08 95       	ret

000093f0 <__ultoa_invert>:
    93f0:	fa 01       	movw	r30, r20
    93f2:	aa 27       	eor	r26, r26
    93f4:	28 30       	cpi	r18, 0x08	; 8
    93f6:	51 f1       	breq	.+84     	; 0x944c <__ultoa_invert+0x5c>
    93f8:	20 31       	cpi	r18, 0x10	; 16
    93fa:	81 f1       	breq	.+96     	; 0x945c <__ultoa_invert+0x6c>
    93fc:	e8 94       	clt
    93fe:	6f 93       	push	r22
    9400:	6e 7f       	andi	r22, 0xFE	; 254
    9402:	6e 5f       	subi	r22, 0xFE	; 254
    9404:	7f 4f       	sbci	r23, 0xFF	; 255
    9406:	8f 4f       	sbci	r24, 0xFF	; 255
    9408:	9f 4f       	sbci	r25, 0xFF	; 255
    940a:	af 4f       	sbci	r26, 0xFF	; 255
    940c:	b1 e0       	ldi	r27, 0x01	; 1
    940e:	3e d0       	rcall	.+124    	; 0x948c <__ultoa_invert+0x9c>
    9410:	b4 e0       	ldi	r27, 0x04	; 4
    9412:	3c d0       	rcall	.+120    	; 0x948c <__ultoa_invert+0x9c>
    9414:	67 0f       	add	r22, r23
    9416:	78 1f       	adc	r23, r24
    9418:	89 1f       	adc	r24, r25
    941a:	9a 1f       	adc	r25, r26
    941c:	a1 1d       	adc	r26, r1
    941e:	68 0f       	add	r22, r24
    9420:	79 1f       	adc	r23, r25
    9422:	8a 1f       	adc	r24, r26
    9424:	91 1d       	adc	r25, r1
    9426:	a1 1d       	adc	r26, r1
    9428:	6a 0f       	add	r22, r26
    942a:	71 1d       	adc	r23, r1
    942c:	81 1d       	adc	r24, r1
    942e:	91 1d       	adc	r25, r1
    9430:	a1 1d       	adc	r26, r1
    9432:	20 d0       	rcall	.+64     	; 0x9474 <__ultoa_invert+0x84>
    9434:	09 f4       	brne	.+2      	; 0x9438 <__ultoa_invert+0x48>
    9436:	68 94       	set
    9438:	3f 91       	pop	r19
    943a:	2a e0       	ldi	r18, 0x0A	; 10
    943c:	26 9f       	mul	r18, r22
    943e:	11 24       	eor	r1, r1
    9440:	30 19       	sub	r19, r0
    9442:	30 5d       	subi	r19, 0xD0	; 208
    9444:	31 93       	st	Z+, r19
    9446:	de f6       	brtc	.-74     	; 0x93fe <__ultoa_invert+0xe>
    9448:	cf 01       	movw	r24, r30
    944a:	08 95       	ret
    944c:	46 2f       	mov	r20, r22
    944e:	47 70       	andi	r20, 0x07	; 7
    9450:	40 5d       	subi	r20, 0xD0	; 208
    9452:	41 93       	st	Z+, r20
    9454:	b3 e0       	ldi	r27, 0x03	; 3
    9456:	0f d0       	rcall	.+30     	; 0x9476 <__ultoa_invert+0x86>
    9458:	c9 f7       	brne	.-14     	; 0x944c <__ultoa_invert+0x5c>
    945a:	f6 cf       	rjmp	.-20     	; 0x9448 <__ultoa_invert+0x58>
    945c:	46 2f       	mov	r20, r22
    945e:	4f 70       	andi	r20, 0x0F	; 15
    9460:	40 5d       	subi	r20, 0xD0	; 208
    9462:	4a 33       	cpi	r20, 0x3A	; 58
    9464:	18 f0       	brcs	.+6      	; 0x946c <__ultoa_invert+0x7c>
    9466:	49 5d       	subi	r20, 0xD9	; 217
    9468:	31 fd       	sbrc	r19, 1
    946a:	40 52       	subi	r20, 0x20	; 32
    946c:	41 93       	st	Z+, r20
    946e:	02 d0       	rcall	.+4      	; 0x9474 <__ultoa_invert+0x84>
    9470:	a9 f7       	brne	.-22     	; 0x945c <__ultoa_invert+0x6c>
    9472:	ea cf       	rjmp	.-44     	; 0x9448 <__ultoa_invert+0x58>
    9474:	b4 e0       	ldi	r27, 0x04	; 4
    9476:	a6 95       	lsr	r26
    9478:	97 95       	ror	r25
    947a:	87 95       	ror	r24
    947c:	77 95       	ror	r23
    947e:	67 95       	ror	r22
    9480:	ba 95       	dec	r27
    9482:	c9 f7       	brne	.-14     	; 0x9476 <__ultoa_invert+0x86>
    9484:	00 97       	sbiw	r24, 0x00	; 0
    9486:	61 05       	cpc	r22, r1
    9488:	71 05       	cpc	r23, r1
    948a:	08 95       	ret
    948c:	9b 01       	movw	r18, r22
    948e:	ac 01       	movw	r20, r24
    9490:	0a 2e       	mov	r0, r26
    9492:	06 94       	lsr	r0
    9494:	57 95       	ror	r21
    9496:	47 95       	ror	r20
    9498:	37 95       	ror	r19
    949a:	27 95       	ror	r18
    949c:	ba 95       	dec	r27
    949e:	c9 f7       	brne	.-14     	; 0x9492 <__ultoa_invert+0xa2>
    94a0:	62 0f       	add	r22, r18
    94a2:	73 1f       	adc	r23, r19
    94a4:	84 1f       	adc	r24, r20
    94a6:	95 1f       	adc	r25, r21
    94a8:	a0 1d       	adc	r26, r0
    94aa:	08 95       	ret

000094ac <__ctype_isfalse>:
    94ac:	99 27       	eor	r25, r25
    94ae:	88 27       	eor	r24, r24

000094b0 <__ctype_istrue>:
    94b0:	08 95       	ret

000094b2 <fgetc>:
    94b2:	cf 93       	push	r28
    94b4:	df 93       	push	r29
    94b6:	ec 01       	movw	r28, r24
    94b8:	4b 81       	ldd	r20, Y+3	; 0x03
    94ba:	40 ff       	sbrs	r20, 0
    94bc:	1a c0       	rjmp	.+52     	; 0x94f2 <fgetc+0x40>
    94be:	46 ff       	sbrs	r20, 6
    94c0:	0a c0       	rjmp	.+20     	; 0x94d6 <fgetc+0x24>
    94c2:	4f 7b       	andi	r20, 0xBF	; 191
    94c4:	4b 83       	std	Y+3, r20	; 0x03
    94c6:	8e 81       	ldd	r24, Y+6	; 0x06
    94c8:	9f 81       	ldd	r25, Y+7	; 0x07
    94ca:	01 96       	adiw	r24, 0x01	; 1
    94cc:	8e 83       	std	Y+6, r24	; 0x06
    94ce:	9f 83       	std	Y+7, r25	; 0x07
    94d0:	8a 81       	ldd	r24, Y+2	; 0x02
    94d2:	28 2f       	mov	r18, r24
    94d4:	2b c0       	rjmp	.+86     	; 0x952c <fgetc+0x7a>
    94d6:	42 ff       	sbrs	r20, 2
    94d8:	13 c0       	rjmp	.+38     	; 0x9500 <fgetc+0x4e>
    94da:	e8 81       	ld	r30, Y
    94dc:	f9 81       	ldd	r31, Y+1	; 0x01
    94de:	80 81       	ld	r24, Z
    94e0:	28 2f       	mov	r18, r24
    94e2:	33 27       	eor	r19, r19
    94e4:	27 fd       	sbrc	r18, 7
    94e6:	30 95       	com	r19
    94e8:	21 15       	cp	r18, r1
    94ea:	31 05       	cpc	r19, r1
    94ec:	29 f4       	brne	.+10     	; 0x94f8 <fgetc+0x46>
    94ee:	40 62       	ori	r20, 0x20	; 32
    94f0:	4b 83       	std	Y+3, r20	; 0x03
    94f2:	2f ef       	ldi	r18, 0xFF	; 255
    94f4:	3f ef       	ldi	r19, 0xFF	; 255
    94f6:	1b c0       	rjmp	.+54     	; 0x952e <fgetc+0x7c>
    94f8:	31 96       	adiw	r30, 0x01	; 1
    94fa:	e8 83       	st	Y, r30
    94fc:	f9 83       	std	Y+1, r31	; 0x01
    94fe:	11 c0       	rjmp	.+34     	; 0x9522 <fgetc+0x70>
    9500:	ea 85       	ldd	r30, Y+10	; 0x0a
    9502:	fb 85       	ldd	r31, Y+11	; 0x0b
    9504:	ce 01       	movw	r24, r28
    9506:	19 95       	eicall
    9508:	9c 01       	movw	r18, r24
    950a:	97 ff       	sbrs	r25, 7
    950c:	0a c0       	rjmp	.+20     	; 0x9522 <fgetc+0x70>
    950e:	9b 81       	ldd	r25, Y+3	; 0x03
    9510:	2f 5f       	subi	r18, 0xFF	; 255
    9512:	3f 4f       	sbci	r19, 0xFF	; 255
    9514:	11 f0       	breq	.+4      	; 0x951a <fgetc+0x68>
    9516:	80 e2       	ldi	r24, 0x20	; 32
    9518:	01 c0       	rjmp	.+2      	; 0x951c <fgetc+0x6a>
    951a:	80 e1       	ldi	r24, 0x10	; 16
    951c:	89 2b       	or	r24, r25
    951e:	8b 83       	std	Y+3, r24	; 0x03
    9520:	e8 cf       	rjmp	.-48     	; 0x94f2 <fgetc+0x40>
    9522:	8e 81       	ldd	r24, Y+6	; 0x06
    9524:	9f 81       	ldd	r25, Y+7	; 0x07
    9526:	01 96       	adiw	r24, 0x01	; 1
    9528:	8e 83       	std	Y+6, r24	; 0x06
    952a:	9f 83       	std	Y+7, r25	; 0x07
    952c:	30 e0       	ldi	r19, 0x00	; 0
    952e:	c9 01       	movw	r24, r18
    9530:	df 91       	pop	r29
    9532:	cf 91       	pop	r28
    9534:	08 95       	ret

00009536 <_exit>:
    9536:	f8 94       	cli

00009538 <__stop_program>:
    9538:	ff cf       	rjmp	.-2      	; 0x9538 <__stop_program>
