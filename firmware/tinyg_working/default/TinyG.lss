
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009030  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00802000  00009030  000090c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000053e  0080210e  0080210e  000091d2  2**0
                  ALLOC
  3 .debug_aranges 000003c0  00000000  00000000  000091d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000eb3  00000000  00000000  00009592  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000d6ff  00000000  00000000  0000a445  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002f40  00000000  00000000  00017b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004d65  00000000  00000000  0001aa84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ab0  00000000  00000000  0001f7ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002445  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003c5c  00000000  00000000  000226e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  0002633d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <__ctors_end>
       4:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
       8:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
       c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      10:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      14:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      18:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      1c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      20:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      24:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      28:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      2c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      30:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      34:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      38:	0c 94 cb 26 	jmp	0x4d96	; 0x4d96 <__vector_14>
      3c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      40:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      44:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      48:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      4c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      50:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      54:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      58:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      5c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      60:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      64:	0c 94 97 32 	jmp	0x652e	; 0x652e <__vector_25>
      68:	0c 94 53 32 	jmp	0x64a6	; 0x64a6 <__vector_26>
      6c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      70:	0c 94 5c 33 	jmp	0x66b8	; 0x66b8 <__vector_28>
      74:	0c 94 18 33 	jmp	0x6630	; 0x6630 <__vector_29>
      78:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      7c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      80:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      84:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      88:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      8c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      90:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      94:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      98:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      9c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      a0:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      a4:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      a8:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      ac:	0c 94 97 2e 	jmp	0x5d2e	; 0x5d2e <__vector_43>
      b0:	0c 94 a1 2e 	jmp	0x5d42	; 0x5d42 <__vector_44>
      b4:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      b8:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      bc:	0c 94 01 26 	jmp	0x4c02	; 0x4c02 <__vector_47>
      c0:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      c4:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      c8:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      cc:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      d0:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      d4:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      d8:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      dc:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      e0:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      e4:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      e8:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      ec:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      f0:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      f4:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      f8:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
      fc:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     100:	0c 94 ab 2e 	jmp	0x5d56	; 0x5d56 <__vector_64>
     104:	0c 94 b5 2e 	jmp	0x5d6a	; 0x5d6a <__vector_65>
     108:	0c 94 6f 2e 	jmp	0x5cde	; 0x5cde <__vector_66>
     10c:	0c 94 79 2e 	jmp	0x5cf2	; 0x5cf2 <__vector_67>
     110:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     114:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     118:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     11c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     120:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     124:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     128:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     12c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     130:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     134:	0c 94 66 26 	jmp	0x4ccc	; 0x4ccc <__vector_77>
     138:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     13c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     140:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     144:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     148:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     14c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     150:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     154:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     158:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     15c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     160:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     164:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     168:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     16c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     170:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     174:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     178:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     17c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     180:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     184:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     188:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     18c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     190:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     194:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     198:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     19c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     1a0:	0c 94 83 2e 	jmp	0x5d06	; 0x5d06 <__vector_104>
     1a4:	0c 94 8d 2e 	jmp	0x5d1a	; 0x5d1a <__vector_105>
     1a8:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     1ac:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     1b0:	0c 94 9c 25 	jmp	0x4b38	; 0x4b38 <__vector_108>
     1b4:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     1b8:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     1bc:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     1c0:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     1c4:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     1c8:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     1cc:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     1d0:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     1d4:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     1d8:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     1dc:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     1e0:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     1e4:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <cfgMsgXaxis>:
     23b:	58 00                                               X.

0000023d <cfgMsgYaxis>:
     23d:	59 00                                               Y.

0000023f <cfgMsgZaxis>:
     23f:	5a 00                                               Z.

00000241 <cfgMsgAaxis>:
     241:	41 00                                               A.

00000243 <cfgMsgs>:
     243:	3b 02 3d 02 3f 02 41 02                             ;.=.?.A.

0000024b <configs_P>:
     24b:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25b:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26b:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27b:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28b:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29b:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2ab:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bb:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2db:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2eb:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2fb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30b:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31b:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32b:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33b:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34b:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35b:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36b:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37b:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38b:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

00000399 <__c.3840>:
     399:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     3a9:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

000003b4 <__c.3837>:
     3b4:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     3c4:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

000003ce <__c.3834>:
     3ce:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     3de:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

000003e8 <__c.3831>:
     3e8:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     3f8:	74 3a 20 25 73 0a 00                                t: %s..

000003ff <__c.3828>:
     3ff:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     40f:	4d 6f 64 65 0a 00                                   Mode..

00000415 <__c.3825>:
     415:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     425:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

00000432 <__c.3757>:
     432:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     442:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     452:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     462:	29 0a 0a 00                                         )...

00000466 <__c.3755>:
     466:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     476:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     486:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000496 <__c.3753>:
     496:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     4a6:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4b6:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004c7 <__c.3751>:
     4c7:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     4d7:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4e7:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004f8 <__c.3749>:
     4f8:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     508:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     518:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     528:	6c 0a 00                                            l..

0000052b <__c.3747>:
     52b:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     53b:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     54b:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     55b:	6e 0a 00                                            n..

0000055e <__c.3745>:
     55e:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     56e:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     57e:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     58e:	74 65 70 73 29 0a 00                                teps)..

00000595 <__c.3743>:
     595:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     5a5:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     5b5:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     5c5:	70 0a 00                                            p..

000005c8 <__c.3741>:
     5c8:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     5d8:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     5e8:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     5f8:	73 74 65 70 73 29 0a 00                             steps)..

00000600 <__c.3739>:
     600:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     610:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     620:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     630:	73 74 65 70 73 29 0a 00                             steps)..

00000638 <__c.3734>:
     638:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     648:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

00000656 <__c.3720>:
     656:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     666:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     676:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000681 <__c.3718>:
     681:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     691:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     6a1:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000006ab <__c.3716>:
     6ab:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     6bb:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     6cb:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000006d5 <__c.3714>:
     6d5:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     6e5:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     6f5:	73 20 2d 2d 2d 0a 00                                s ---..

000006fc <__c.3712>:
     6fc:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     70c:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     71c:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000724 <__c.3677>:
     724:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     734:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     744:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000750 <square_test1>:
     750:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     760:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     770:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     780:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     790:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     7a0:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     7b0:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000007be <square_test2>:
     7be:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     7ce:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     7de:	78 30 20 79 30 00                                   x0 y0.

000007e4 <square_test10>:
     7e4:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     7f4:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     804:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000810 <circle_test10>:
     810:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     820:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     830:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     840:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     850:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     860:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     870:	30 00                                               0.

00000872 <square_circle_test10>:
     872:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     882:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     892:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     8a2:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     8b2:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     8c2:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     8d2:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     8e2:	31 30 20 79 30 00                                   10 y0.

000008e8 <square_circle_test100>:
     8e8:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     8f8:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     908:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     918:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     928:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     938:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     948:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     958:	35 30 20 6a 30 00                                   50 j0.

0000095e <spiral_test5>:
     95e:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     96e:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     97e:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     98e:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     99e:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     9ae:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     9be:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     9ce:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

000009d8 <spiral_test50a>:
     9d8:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     9e8:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

000009f8 <dwell_test1>:
     9f8:	67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30 20     g0 x10.g4 p1.g0 
     a08:	78 32 30 0a 67 34 20 70 31 0a 67 30 20 78 31 30     x20.g4 p1.g0 x10
     a18:	0a 67 34 20 70 31 0a 67 30 20 78 30 30 0a 67 34     .g4 p1.g0 x00.g4
     a28:	20 70 31 0a 67 30 20 78 31 30 0a 67 34 20 70 31      p1.g0 x10.g4 p1
     a38:	0a 67 30 20 78 32 30 0a 67 34 20 70 31 0a 67 30     .g0 x20.g4 p1.g0
     a48:	20 78 31 30 0a 67 34 20 70 31 0a 67 30 20 78 30      x10.g4 p1.g0 x0
     a58:	0a 67 34 20 70 31 0a 67 30 20 78 31 30 0a 67 34     .g4 p1.g0 x10.g4
     a68:	20 70 31 0a 67 30 20 78 32 30 0a 67 34 20 70 31      p1.g0 x20.g4 p1
     a78:	0a 67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30     .g0 x10.g4 p1.g0
     a88:	20 78 30 00                                          x0.

00000a8c <dwell_test2>:
     a8c:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     a9c:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     aac:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     abc:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     acc:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     adc:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     aec:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     afc:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     b0c:	20 70 31 0a 67 30 20 78 30 00                        p1.g0 x0.

00000b16 <dwell_testMax>:
     b16:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000b20 <g0_test1>:
     b20:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     b30:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000b40 <g0_test2>:
     b40:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     b50:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     b60:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     b70:	79 30 20 7a 30 00                                   y0 z0.

00000b76 <g0_test3>:
     b76:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     b86:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     b96:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000ba4 <radius_arc_test1>:
     ba4:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     bb4:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     bc4:	72 35 30 0a 00                                      r50..

00000bc9 <radius_arc_test2>:
     bc9:	67 32 0a 00                                         g2..

00000bcd <zoetrope>:
     bcd:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     bdd:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     bed:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     bfd:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     c0d:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     c1d:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     c2d:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     c3d:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     c4d:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     c5d:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     c6d:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     c7d:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     c8d:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     c9d:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     cad:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     cbd:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     ccd:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     cdd:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     ced:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     cfd:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     d0d:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     d1d:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     d2d:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     d3d:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     d4d:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     d5d:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     d6d:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     d7d:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     d8d:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     d9d:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     dad:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     dbd:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     dcd:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     ddd:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     ded:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     dfd:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
     e0d:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
     e1d:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
     e2d:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
     e3d:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
     e4d:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
     e5d:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
     e6d:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
     e7d:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
     e8d:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
     e9d:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
     ead:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
     ebd:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
     ecd:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
     edd:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
     eed:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
     efd:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
     f0d:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
     f1d:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
     f2d:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
     f3d:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
     f4d:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
     f5d:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
     f6d:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
     f7d:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
     f8d:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
     f9d:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
     fad:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
     fbd:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
     fcd:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
     fdd:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
     fed:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
     ffd:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    100d:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    101d:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    102d:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    103d:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    104d:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    105d:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    106d:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    107d:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    108d:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    109d:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    10ad:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    10bd:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    10cd:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    10dd:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    10ed:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    10fd:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    110d:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    111d:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    112d:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    113d:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    114d:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    115d:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    116d:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    117d:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    118d:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    119d:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    11ad:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    11bd:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    11cd:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    11dd:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    11ed:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    11fd:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    120d:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    121d:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    122d:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    123d:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    124d:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    125d:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    126d:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    127d:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    128d:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    129d:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    12ad:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    12bd:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    12cd:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    12dd:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    12ed:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    12fd:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    130d:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    131d:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    132d:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    133d:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    134d:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    135d:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    136d:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    137d:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    138d:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    139d:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    13ad:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    13bd:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    13cd:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    13dd:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    13ed:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    13fd:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    140d:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    141d:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    142d:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    143d:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    144d:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    145d:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    146d:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    147d:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    148d:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    149d:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    14ad:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    14bd:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    14cd:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    14dd:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    14ed:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    14fd:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    150d:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    151d:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    152d:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    153d:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    154d:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    155d:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    156d:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    157d:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

00001588 <contraptor_circle>:
    1588:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    1598:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    15a8:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    15b8:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    15c8:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    15d8:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    15e8:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    15f8:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    1608:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    1618:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    1628:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    1638:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    1648:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    1658:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    1668:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    1678:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    1688:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    1698:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    16a8:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    16b8:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    16c8:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    16d8:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    16e8:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    16f8:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    1708:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    1718:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    1728:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    1738:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    1748:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    1758:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    1768:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    1778:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    1788:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    1798:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    17a8:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    17b8:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    17c8:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    17d8:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    17e8:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    17f8:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    1808:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1818:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1828:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    1838:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    1848:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    1858:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    1868:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    1878:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    1888:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1898:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    18a8:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    18b8:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    18c8:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    18d8:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    18e8:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    18f8:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    1908:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1918:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1928:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1938:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1948:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1958:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001968 <tgModeStringControl>:
    1968:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001975 <tgModeStringConfig>:
    1975:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001981 <tgModeStringGCode>:
    1981:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

0000198d <tgModeStringDirect>:
    198d:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

0000199a <tgModeStrings>:
    199a:	68 19 75 19 81 19 8d 19                             h.u.....

000019a2 <__c.3960>:
    19a2:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    19b2:	69 6c 65 0a 00                                      ile..

000019b7 <__c.4021>:
    19b7:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

000019c5 <__c.3936>:
    19c5:	62 75 69 6c 64 20 32 30 37 00                       build 207.

000019cf <__c.3934>:
    19cf:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    19df:	25 53 0a 00                                         %S..

000019e3 <bsel>:
    19e3:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

000019ee <bscale>:
    19ee:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

000019f9 <readlnFuncs>:
    19f9:	02 31 be 30 be 30 be 30 be 30 be 30 be 30 be 30     .1.0.0.0.0.0.0.0
    1a09:	4c 31 be 30 02 31 be 30 be 30 02 31 be 30 be 30     L1.0.1.0.0.1.0.0
    1a19:	be 30 be 30 be 30 be 30 be 30 be 30 be 30 be 30     .0.0.0.0.0.0.0.0
    1a29:	be 30 be 30 be 30 be 30 be 30 be 30 be 30 be 30     .0.0.0.0.0.0.0.0
    1a39:	be 30 be 30 be 30 be 30 be 30 be 30 be 30 be 30     .0.0.0.0.0.0.0.0
    1a49:	be 30 be 30 be 30 be 30 be 30 be 30 be 30 be 30     .0.0.0.0.0.0.0.0
    1a59:	be 30 be 30 be 30 be 30 be 30 be 30 be 30 be 30     .0.0.0.0.0.0.0.0
    1a69:	be 30 be 30 be 30 35 31 be 30 be 30 be 30 be 30     .0.0.051.0.0.0.0
    1a79:	be 30 be 30 be 30 be 30 be 30 be 30 be 30 be 30     .0.0.0.0.0.0.0.0
    1a89:	be 30 be 30 be 30 be 30 be 30 be 30 be 30 be 30     .0.0.0.0.0.0.0.0
    1a99:	be 30 be 30 be 30 be 30 be 30 be 30 be 30 be 30     .0.0.0.0.0.0.0.0
    1aa9:	be 30 be 30 be 30 be 30 be 30 be 30 be 30 be 30     .0.0.0.0.0.0.0.0
    1ab9:	be 30 be 30 be 30 be 30 be 30 be 30 be 30 be 30     .0.0.0.0.0.0.0.0
    1ac9:	be 30 be 30 be 30 be 30 be 30 be 30 be 30 be 30     .0.0.0.0.0.0.0.0
    1ad9:	be 30 be 30 be 30 be 30 be 30 be 30 be 30 be 30     .0.0.0.0.0.0.0.0
    1ae9:	be 30 be 30 be 30 be 30 be 30 be 30 be 30 4c 31     .0.0.0.0.0.0.0L1

00001af9 <getcFuncs>:
    1af9:	f5 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f     ././././././././
    1b09:	4a 30 c8 2f f5 2f c8 2f c8 2f f5 2f c8 2f c8 2f     J0./././././././
    1b19:	c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f     ././././././././
    1b29:	c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f     ././././././././
    1b39:	c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f     ././././././././
    1b49:	c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f     ././././././././
    1b59:	c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f     ././././././././
    1b69:	c8 2f c8 2f c8 2f 33 30 c8 2f c8 2f c8 2f c8 2f     ./././30././././
    1b79:	c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f     ././././././././
    1b89:	c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f     ././././././././
    1b99:	c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f     ././././././././
    1ba9:	c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f     ././././././././
    1bb9:	c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f     ././././././././
    1bc9:	c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f     ././././././././
    1bd9:	c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f     ././././././././
    1be9:	c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f c8 2f 4a 30     ./././././././J0

00001bf9 <pstr_inf>:
    1bf9:	49 4e 46                                            INF

00001bfc <pstr_inity>:
    1bfc:	49 4e 49 54 59                                      INITY

00001c01 <pstr_nan>:
    1c01:	4e 41 4e                                            NAN

00001c04 <pwr_m10>:
    1c04:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1c14:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001c1c <pwr_p10>:
    1c1c:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1c2c:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1c3c:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1c4c:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1c5c:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1c6c:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1c7c:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1c8c:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1c9c:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1cac:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1cbc:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1ccc:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1cdc:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1cec:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1cfc:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1d0c:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1d1c:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1d2c:	3d 27                                               ='

00001d2e <__ctors_end>:
    1d2e:	11 24       	eor	r1, r1
    1d30:	1f be       	out	0x3f, r1	; 63
    1d32:	cf ef       	ldi	r28, 0xFF	; 255
    1d34:	df e5       	ldi	r29, 0x5F	; 95
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	00 e0       	ldi	r16, 0x00	; 0
    1d3c:	0c bf       	out	0x3c, r16	; 60

00001d3e <__do_copy_data>:
    1d3e:	11 e2       	ldi	r17, 0x21	; 33
    1d40:	a0 e0       	ldi	r26, 0x00	; 0
    1d42:	b0 e2       	ldi	r27, 0x20	; 32
    1d44:	e0 e3       	ldi	r30, 0x30	; 48
    1d46:	f0 e9       	ldi	r31, 0x90	; 144
    1d48:	00 e0       	ldi	r16, 0x00	; 0
    1d4a:	0b bf       	out	0x3b, r16	; 59
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <__do_copy_data+0x14>
    1d4e:	07 90       	elpm	r0, Z+
    1d50:	0d 92       	st	X+, r0
    1d52:	ae 30       	cpi	r26, 0x0E	; 14
    1d54:	b1 07       	cpc	r27, r17
    1d56:	d9 f7       	brne	.-10     	; 0x1d4e <__do_copy_data+0x10>

00001d58 <__do_clear_bss>:
    1d58:	16 e2       	ldi	r17, 0x26	; 38
    1d5a:	ae e0       	ldi	r26, 0x0E	; 14
    1d5c:	b1 e2       	ldi	r27, 0x21	; 33
    1d5e:	01 c0       	rjmp	.+2      	; 0x1d62 <.do_clear_bss_start>

00001d60 <.do_clear_bss_loop>:
    1d60:	1d 92       	st	X+, r1

00001d62 <.do_clear_bss_start>:
    1d62:	ac 34       	cpi	r26, 0x4C	; 76
    1d64:	b1 07       	cpc	r27, r17
    1d66:	e1 f7       	brne	.-8      	; 0x1d60 <.do_clear_bss_loop>
    1d68:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <main>
    1d6c:	0c 94 16 48 	jmp	0x902c	; 0x902c <_exit>

00001d70 <__bad_interrupt>:
    1d70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001d74 <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1d74:	f8 94       	cli
	xmega_init();				// xmega setup
    1d76:	0e 94 b0 1a 	call	0x3560	; 0x3560 <xmega_init>
	xio_init();					// xmega io subsystem
    1d7a:	0e 94 44 28 	call	0x5088	; 0x5088 <xio_init>

	cfg_init();					// get config record from eeprom
    1d7e:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <cfg_init>
	st_init(); 					// stepper subsystem
    1d82:	0e 94 58 23 	call	0x46b0	; 0x46b0 <st_init>
	ls_init();					// limit switches
    1d86:	0e 94 47 2e 	call	0x5c8e	; 0x5c8e <ls_init>
	mv_init();					// move buffers
    1d8a:	0e 94 8f 2b 	call	0x571e	; 0x571e <mv_init>
	mc_init();					// motion control subsystem
    1d8e:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <mc_init>
	spindle_init();				// spindle controller
    1d92:	0e 94 3c 23 	call	0x4678	; 0x4678 <spindle_init>
	en_init();					// encoders
    1d96:	0e 94 4e 1a 	call	0x349c	; 0x349c <en_init>
	gc_init();					// gcode-parser
    1d9a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <gc_init>
	dd_init();					// direct drive commands
    1d9e:	0e 94 8b 2b 	call	0x5716	; 0x5716 <dd_init>
	tg_init();					// tinyg parsers
    1da2:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1da6:	0e 94 3e 27 	call	0x4e7c	; 0x4e7c <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1daa:	e0 ea       	ldi	r30, 0xA0	; 160
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 91 a2 00 	lds	r24, 0x00A2
    1db2:	81 60       	ori	r24, 0x01	; 1
    1db4:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1db6:	80 91 a2 00 	lds	r24, 0x00A2
    1dba:	82 60       	ori	r24, 0x02	; 2
    1dbc:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1dbe:	80 91 a2 00 	lds	r24, 0x00A2
    1dc2:	84 60       	ori	r24, 0x04	; 4
    1dc4:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1dc6:	78 94       	sei

//	xio_queue_RX_char_usb(ETX);			// send control-c (kill)
//	xio_queue_RX_string_usb("f\n");
//	xio_queue_RX_string_usb("?\n");

	xio_queue_RX_string_usb("g0x10y10z25\n");
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e2       	ldi	r25, 0x20	; 32
    1dcc:	0e 94 ef 32 	call	0x65de	; 0x65de <xio_queue_RX_string_usb>
//	xio_queue_RX_string_usb("g0x1000\n");
//	xio_queue_RX_string_usb("g0x10000\n");
//	xio_queue_RX_string_usb("g0x10\ng4p1\ng0x0\n");

	for(;;){
		tg_controller();
    1dd0:	0e 94 ff 2a 	call	0x55fe	; 0x55fe <tg_controller>
    1dd4:	fd cf       	rjmp	.-6      	; 0x1dd0 <main+0x5c>

00001dd6 <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1dd6:	80 93 21 21 	sts	0x2121, r24
	gc.plane_axis_1 = axis_1;
    1dda:	60 93 22 21 	sts	0x2122, r22
	gc.plane_axis_2 = axis_2;
    1dde:	40 93 23 21 	sts	0x2123, r20
}
    1de2:	08 95       	ret

00001de4 <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1de4:	ef 92       	push	r14
    1de6:	ff 92       	push	r15
    1de8:	0f 93       	push	r16
    1dea:	1f 93       	push	r17
    1dec:	7b 01       	movw	r14, r22
    1dee:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    1df0:	80 91 1c 21 	lds	r24, 0x211C
    1df4:	88 23       	and	r24, r24
    1df6:	51 f0       	breq	.+20     	; 0x1e0c <to_millimeters+0x28>
    1df8:	c8 01       	movw	r24, r16
    1dfa:	b7 01       	movw	r22, r14
    1dfc:	25 e8       	ldi	r18, 0x85	; 133
    1dfe:	32 e4       	ldi	r19, 0x42	; 66
    1e00:	41 e2       	ldi	r20, 0x21	; 33
    1e02:	5d e3       	ldi	r21, 0x3D	; 61
    1e04:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    1e08:	7b 01       	movw	r14, r22
    1e0a:	8c 01       	movw	r16, r24
}
    1e0c:	b7 01       	movw	r22, r14
    1e0e:	c8 01       	movw	r24, r16
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	ff 90       	pop	r15
    1e16:	ef 90       	pop	r14
    1e18:	08 95       	ret

00001e1a <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    1e1a:	86 e5       	ldi	r24, 0x56	; 86
    1e1c:	ee e0       	ldi	r30, 0x0E	; 14
    1e1e:	f1 e2       	ldi	r31, 0x21	; 33
    1e20:	df 01       	movw	r26, r30
    1e22:	1d 92       	st	X+, r1
    1e24:	8a 95       	dec	r24
    1e26:	e9 f7       	brne	.-6      	; 0x1e22 <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	a0 e0       	ldi	r26, 0x00	; 0
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	80 93 24 21 	sts	0x2124, r24
    1e34:	90 93 25 21 	sts	0x2125, r25
    1e38:	a0 93 26 21 	sts	0x2126, r26
    1e3c:	b0 93 27 21 	sts	0x2127, r27
	gc.radius = 0;							// radius value
    1e40:	80 93 28 21 	sts	0x2128, r24
    1e44:	90 93 29 21 	sts	0x2129, r25
    1e48:	a0 93 2a 21 	sts	0x212A, r26
    1e4c:	b0 93 2b 21 	sts	0x212B, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    1e50:	80 91 a9 22 	lds	r24, 0x22A9
    1e54:	90 91 aa 22 	lds	r25, 0x22AA
    1e58:	a0 91 ab 22 	lds	r26, 0x22AB
    1e5c:	b0 91 ac 22 	lds	r27, 0x22AC
    1e60:	80 93 2c 21 	sts	0x212C, r24
    1e64:	90 93 2d 21 	sts	0x212D, r25
    1e68:	a0 93 2e 21 	sts	0x212E, r26
    1e6c:	b0 93 2f 21 	sts	0x212F, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    1e70:	80 91 ad 22 	lds	r24, 0x22AD
    1e74:	90 91 ae 22 	lds	r25, 0x22AE
    1e78:	a0 91 af 22 	lds	r26, 0x22AF
    1e7c:	b0 91 b0 22 	lds	r27, 0x22B0
    1e80:	80 93 30 21 	sts	0x2130, r24
    1e84:	90 93 31 21 	sts	0x2131, r25
    1e88:	a0 93 32 21 	sts	0x2132, r26
    1e8c:	b0 93 33 21 	sts	0x2133, r27

	gc.absolute_mode = TRUE;
    1e90:	21 e0       	ldi	r18, 0x01	; 1
    1e92:	20 93 1d 21 	sts	0x211D, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	a0 e8       	ldi	r26, 0x80	; 128
    1e9c:	bf eb       	ldi	r27, 0xBF	; 191
    1e9e:	80 93 38 21 	sts	0x2138, r24
    1ea2:	90 93 39 21 	sts	0x2139, r25
    1ea6:	a0 93 3a 21 	sts	0x213A, r26
    1eaa:	b0 93 3b 21 	sts	0x213B, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    1eae:	10 92 1e 21 	sts	0x211E, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    1eb2:	10 92 20 21 	sts	0x2120, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    1eb6:	10 92 18 21 	sts	0x2118, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1eba:	10 92 21 21 	sts	0x2121, r1
	gc.plane_axis_1 = axis_1;
    1ebe:	20 93 22 21 	sts	0x2122, r18
	gc.plane_axis_2 = axis_2;
    1ec2:	82 e0       	ldi	r24, 0x02	; 2
    1ec4:	80 93 23 21 	sts	0x2123, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X, Y, Z);
}
    1ec8:	08 95       	ret

00001eca <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    1eca:	4f 92       	push	r4
    1ecc:	5f 92       	push	r5
    1ece:	6f 92       	push	r6
    1ed0:	7f 92       	push	r7
    1ed2:	8f 92       	push	r8
    1ed4:	9f 92       	push	r9
    1ed6:	af 92       	push	r10
    1ed8:	bf 92       	push	r11
    1eda:	cf 92       	push	r12
    1edc:	df 92       	push	r13
    1ede:	ef 92       	push	r14
    1ee0:	ff 92       	push	r15
    1ee2:	0f 93       	push	r16
    1ee4:	1f 93       	push	r17
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	0f 92       	push	r0
    1eec:	0f 92       	push	r0
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	3b 01       	movw	r6, r22
    1ef4:	2a 01       	movw	r4, r20
    1ef6:	49 01       	movw	r8, r18
    1ef8:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    1efa:	d8 01       	movw	r26, r16
    1efc:	ed 91       	ld	r30, X+
    1efe:	fc 91       	ld	r31, X
    1f00:	e2 0f       	add	r30, r18
    1f02:	f3 1f       	adc	r31, r19
    1f04:	e0 81       	ld	r30, Z
    1f06:	ee 23       	and	r30, r30
    1f08:	41 f0       	breq	.+16     	; 0x1f1a <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    1f0e:	e1 54       	subi	r30, 0x41	; 65
    1f10:	ea 31       	cpi	r30, 0x1A	; 26
    1f12:	30 f0       	brcs	.+12     	; 0x1f20 <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    1f14:	8d e0       	ldi	r24, 0x0D	; 13
    1f16:	80 93 0e 21 	sts	0x210E, r24
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	35 c0       	rjmp	.+106    	; 0x1f8a <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    1f20:	f8 01       	movw	r30, r16
    1f22:	80 81       	ld	r24, Z
    1f24:	91 81       	ldd	r25, Z+1	; 0x01
    1f26:	01 96       	adiw	r24, 0x01	; 1
    1f28:	80 83       	st	Z, r24
    1f2a:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    1f2c:	89 01       	movw	r16, r18
    1f2e:	08 0f       	add	r16, r24
    1f30:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    1f32:	c8 01       	movw	r24, r16
    1f34:	be 01       	movw	r22, r28
    1f36:	6f 5f       	subi	r22, 0xFF	; 255
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	0e 94 42 44 	call	0x8884	; 0x8884 <strtod>
    1f3e:	6b 01       	movw	r12, r22
    1f40:	7c 01       	movw	r14, r24
    1f42:	d3 01       	movw	r26, r6
    1f44:	6d 93       	st	X+, r22
    1f46:	7d 93       	st	X+, r23
    1f48:	8d 93       	st	X+, r24
    1f4a:	9c 93       	st	X, r25
    1f4c:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	9a 81       	ldd	r25, Y+2	; 0x02
    1f52:	80 17       	cp	r24, r16
    1f54:	91 07       	cpc	r25, r17
    1f56:	11 f4       	brne	.+4      	; 0x1f5c <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    1f58:	80 e1       	ldi	r24, 0x10	; 16
    1f5a:	dd cf       	rjmp	.-70     	; 0x1f16 <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    1f5c:	88 19       	sub	r24, r8
    1f5e:	99 09       	sbc	r25, r9
    1f60:	f5 01       	movw	r30, r10
    1f62:	80 83       	st	Z, r24
    1f64:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    1f66:	c7 01       	movw	r24, r14
    1f68:	b6 01       	movw	r22, r12
    1f6a:	0e 94 a7 43 	call	0x874e	; 0x874e <trunc>
    1f6e:	9b 01       	movw	r18, r22
    1f70:	ac 01       	movw	r20, r24
    1f72:	c7 01       	movw	r24, r14
    1f74:	b6 01       	movw	r22, r12
    1f76:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    1f7a:	d2 01       	movw	r26, r4
    1f7c:	6d 93       	st	X+, r22
    1f7e:	7d 93       	st	X+, r23
    1f80:	8d 93       	st	X+, r24
    1f82:	9c 93       	st	X, r25
    1f84:	13 97       	sbiw	r26, 0x03	; 3
    1f86:	21 e0       	ldi	r18, 0x01	; 1
    1f88:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    1f8a:	c9 01       	movw	r24, r18
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	1f 91       	pop	r17
    1f96:	0f 91       	pop	r16
    1f98:	ff 90       	pop	r15
    1f9a:	ef 90       	pop	r14
    1f9c:	df 90       	pop	r13
    1f9e:	cf 90       	pop	r12
    1fa0:	bf 90       	pop	r11
    1fa2:	af 90       	pop	r10
    1fa4:	9f 90       	pop	r9
    1fa6:	8f 90       	pop	r8
    1fa8:	7f 90       	pop	r7
    1faa:	6f 90       	pop	r6
    1fac:	5f 90       	pop	r5
    1fae:	4f 90       	pop	r4
    1fb0:	08 95       	ret

00001fb2 <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    1fb2:	af 92       	push	r10
    1fb4:	bf 92       	push	r11
    1fb6:	cf 92       	push	r12
    1fb8:	df 92       	push	r13
    1fba:	ef 92       	push	r14
    1fbc:	ff 92       	push	r15
    1fbe:	0f 93       	push	r16
    1fc0:	1f 93       	push	r17
    1fc2:	79 01       	movw	r14, r18
    1fc4:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    1fc6:	5f 77       	andi	r21, 0x7F	; 127
    1fc8:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    1fcc:	0e 94 fc 3f 	call	0x7ff8	; 0x7ff8 <atan>
    1fd0:	5b 01       	movw	r10, r22
    1fd2:	6c 01       	movw	r12, r24

	if (y>0) {
    1fd4:	c8 01       	movw	r24, r16
    1fd6:	b7 01       	movw	r22, r14
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e0       	ldi	r20, 0x00	; 0
    1fde:	50 e0       	ldi	r21, 0x00	; 0
    1fe0:	0e 94 27 42 	call	0x844e	; 0x844e <__gesf2>
    1fe4:	18 16       	cp	r1, r24
    1fe6:	cc f0       	brlt	.+50     	; 0x201a <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    1fe8:	c6 01       	movw	r24, r12
    1fea:	b5 01       	movw	r22, r10
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e0       	ldi	r20, 0x00	; 0
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	0e 94 27 42 	call	0x844e	; 0x844e <__gesf2>
    1ff8:	18 16       	cp	r1, r24
    1ffa:	2c f4       	brge	.+10     	; 0x2006 <theta+0x54>
	    {
			return(M_PI-theta);
    1ffc:	6b ed       	ldi	r22, 0xDB	; 219
    1ffe:	7f e0       	ldi	r23, 0x0F	; 15
    2000:	89 e4       	ldi	r24, 0x49	; 73
    2002:	90 e4       	ldi	r25, 0x40	; 64
    2004:	04 c0       	rjmp	.+8      	; 0x200e <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    2006:	6b ed       	ldi	r22, 0xDB	; 219
    2008:	7f e0       	ldi	r23, 0x0F	; 15
    200a:	89 e4       	ldi	r24, 0x49	; 73
    200c:	90 ec       	ldi	r25, 0xC0	; 192
    200e:	a6 01       	movw	r20, r12
    2010:	95 01       	movw	r18, r10
    2012:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    2016:	5b 01       	movw	r10, r22
    2018:	6c 01       	movw	r12, r24
		}
	}
}
    201a:	b5 01       	movw	r22, r10
    201c:	c6 01       	movw	r24, r12
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	ff 90       	pop	r15
    2024:	ef 90       	pop	r14
    2026:	df 90       	pop	r13
    2028:	cf 90       	pop	r12
    202a:	bf 90       	pop	r11
    202c:	af 90       	pop	r10
    202e:	08 95       	ret

00002030 <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    2030:	2f 92       	push	r2
    2032:	3f 92       	push	r3
    2034:	4f 92       	push	r4
    2036:	5f 92       	push	r5
    2038:	6f 92       	push	r6
    203a:	7f 92       	push	r7
    203c:	8f 92       	push	r8
    203e:	9f 92       	push	r9
    2040:	af 92       	push	r10
    2042:	bf 92       	push	r11
    2044:	cf 92       	push	r12
    2046:	df 92       	push	r13
    2048:	ef 92       	push	r14
    204a:	ff 92       	push	r15
    204c:	0f 93       	push	r16
    204e:	1f 93       	push	r17
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	68 97       	sbiw	r28, 0x18	; 24
    205a:	cd bf       	out	0x3d, r28	; 61
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    2060:	19 82       	std	Y+1, r1	; 0x01
    2062:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    2064:	e8 e4       	ldi	r30, 0x48	; 72
    2066:	f1 e2       	ldi	r31, 0x21	; 33
    2068:	8c e0       	ldi	r24, 0x0C	; 12
    206a:	df 01       	movw	r26, r30
    206c:	28 2f       	mov	r18, r24
    206e:	1d 92       	st	X+, r1
    2070:	2a 95       	dec	r18
    2072:	e9 f7       	brne	.-6      	; 0x206e <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    2074:	3c 96       	adiw	r30, 0x0c	; 12
    2076:	df 01       	movw	r26, r30
    2078:	1d 92       	st	X+, r1
    207a:	8a 95       	dec	r24
    207c:	e9 f7       	brne	.-6      	; 0x2078 <gc_execute_block+0x48>

	gc.status = TG_OK;
    207e:	10 92 0e 21 	sts	0x210E, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    2082:	10 92 1f 21 	sts	0x211F, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2086:	5e 01       	movw	r10, r28
    2088:	08 94       	sec
    208a:	a1 1c       	adc	r10, r1
    208c:	b1 1c       	adc	r11, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    208e:	ff 24       	eor	r15, r15
    2090:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    2092:	be e0       	ldi	r27, 0x0E	; 14
    2094:	cb 2e       	mov	r12, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2096:	a2 e0       	ldi	r26, 0x02	; 2
    2098:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    209a:	77 24       	eor	r7, r7
    209c:	7a 94       	dec	r7

					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    209e:	f3 e0       	ldi	r31, 0x03	; 3
    20a0:	df 2e       	mov	r13, r31

					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    20a2:	e4 e0       	ldi	r30, 0x04	; 4
    20a4:	6e 2e       	mov	r6, r30
    20a6:	0a c1       	rjmp	.+532    	; 0x22bc <gc_execute_block+0x28c>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    20a8:	80 91 0f 21 	lds	r24, 0x210F
    20ac:	8d 34       	cpi	r24, 0x4D	; 77
    20ae:	09 f4       	brne	.+2      	; 0x20b2 <gc_execute_block+0x82>
    20b0:	be c0       	rjmp	.+380    	; 0x222e <gc_execute_block+0x1fe>
    20b2:	84 35       	cpi	r24, 0x54	; 84
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <gc_execute_block+0x88>
    20b6:	f0 c0       	rjmp	.+480    	; 0x2298 <gc_execute_block+0x268>
    20b8:	87 34       	cpi	r24, 0x47	; 71
    20ba:	09 f0       	breq	.+2      	; 0x20be <gc_execute_block+0x8e>
    20bc:	fb c0       	rjmp	.+502    	; 0x22b4 <gc_execute_block+0x284>
			case 'G':
				switch((int)gc.value) {
    20be:	60 91 10 21 	lds	r22, 0x2110
    20c2:	70 91 11 21 	lds	r23, 0x2111
    20c6:	80 91 12 21 	lds	r24, 0x2112
    20ca:	90 91 13 21 	lds	r25, 0x2113
    20ce:	0e 94 a6 40 	call	0x814c	; 0x814c <__fixsfsi>
    20d2:	65 31       	cpi	r22, 0x15	; 21
    20d4:	71 05       	cpc	r23, r1
    20d6:	09 f4       	brne	.+2      	; 0x20da <gc_execute_block+0xaa>
    20d8:	8f c0       	rjmp	.+286    	; 0x21f8 <gc_execute_block+0x1c8>
    20da:	66 31       	cpi	r22, 0x16	; 22
    20dc:	71 05       	cpc	r23, r1
    20de:	84 f5       	brge	.+96     	; 0x2140 <gc_execute_block+0x110>
    20e0:	64 30       	cpi	r22, 0x04	; 4
    20e2:	71 05       	cpc	r23, r1
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <gc_execute_block+0xb8>
    20e6:	6d c0       	rjmp	.+218    	; 0x21c2 <gc_execute_block+0x192>
    20e8:	65 30       	cpi	r22, 0x05	; 5
    20ea:	71 05       	cpc	r23, r1
    20ec:	a4 f4       	brge	.+40     	; 0x2116 <gc_execute_block+0xe6>
    20ee:	61 30       	cpi	r22, 0x01	; 1
    20f0:	71 05       	cpc	r23, r1
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <gc_execute_block+0xc6>
    20f4:	57 c0       	rjmp	.+174    	; 0x21a4 <gc_execute_block+0x174>
    20f6:	62 30       	cpi	r22, 0x02	; 2
    20f8:	71 05       	cpc	r23, r1
    20fa:	24 f4       	brge	.+8      	; 0x2104 <gc_execute_block+0xd4>
    20fc:	67 2b       	or	r22, r23
    20fe:	09 f4       	brne	.+2      	; 0x2102 <gc_execute_block+0xd2>
    2100:	4c c0       	rjmp	.+152    	; 0x219a <gc_execute_block+0x16a>
    2102:	c7 c0       	rjmp	.+398    	; 0x2292 <gc_execute_block+0x262>
    2104:	62 30       	cpi	r22, 0x02	; 2
    2106:	71 05       	cpc	r23, r1
    2108:	09 f4       	brne	.+2      	; 0x210c <gc_execute_block+0xdc>
    210a:	51 c0       	rjmp	.+162    	; 0x21ae <gc_execute_block+0x17e>
    210c:	63 30       	cpi	r22, 0x03	; 3
    210e:	71 05       	cpc	r23, r1
    2110:	09 f0       	breq	.+2      	; 0x2114 <gc_execute_block+0xe4>
    2112:	bf c0       	rjmp	.+382    	; 0x2292 <gc_execute_block+0x262>
    2114:	51 c0       	rjmp	.+162    	; 0x21b8 <gc_execute_block+0x188>
    2116:	62 31       	cpi	r22, 0x12	; 18
    2118:	71 05       	cpc	r23, r1
    211a:	09 f4       	brne	.+2      	; 0x211e <gc_execute_block+0xee>
    211c:	5c c0       	rjmp	.+184    	; 0x21d6 <gc_execute_block+0x1a6>
    211e:	63 31       	cpi	r22, 0x13	; 19
    2120:	71 05       	cpc	r23, r1
    2122:	2c f4       	brge	.+10     	; 0x212e <gc_execute_block+0xfe>
    2124:	61 31       	cpi	r22, 0x11	; 17
    2126:	71 05       	cpc	r23, r1
    2128:	09 f0       	breq	.+2      	; 0x212c <gc_execute_block+0xfc>
    212a:	b3 c0       	rjmp	.+358    	; 0x2292 <gc_execute_block+0x262>
    212c:	4d c0       	rjmp	.+154    	; 0x21c8 <gc_execute_block+0x198>
    212e:	63 31       	cpi	r22, 0x13	; 19
    2130:	71 05       	cpc	r23, r1
    2132:	09 f4       	brne	.+2      	; 0x2136 <gc_execute_block+0x106>
    2134:	57 c0       	rjmp	.+174    	; 0x21e4 <gc_execute_block+0x1b4>
    2136:	64 31       	cpi	r22, 0x14	; 20
    2138:	71 05       	cpc	r23, r1
    213a:	09 f0       	breq	.+2      	; 0x213e <gc_execute_block+0x10e>
    213c:	aa c0       	rjmp	.+340    	; 0x2292 <gc_execute_block+0x262>
    213e:	59 c0       	rjmp	.+178    	; 0x21f2 <gc_execute_block+0x1c2>
    2140:	6a 35       	cpi	r22, 0x5A	; 90
    2142:	71 05       	cpc	r23, r1
    2144:	09 f4       	brne	.+2      	; 0x2148 <gc_execute_block+0x118>
    2146:	64 c0       	rjmp	.+200    	; 0x2210 <gc_execute_block+0x1e0>
    2148:	6b 35       	cpi	r22, 0x5B	; 91
    214a:	71 05       	cpc	r23, r1
    214c:	ac f4       	brge	.+42     	; 0x2178 <gc_execute_block+0x148>
    214e:	6e 31       	cpi	r22, 0x1E	; 30
    2150:	71 05       	cpc	r23, r1
    2152:	09 f4       	brne	.+2      	; 0x2156 <gc_execute_block+0x126>
    2154:	54 c0       	rjmp	.+168    	; 0x21fe <gc_execute_block+0x1ce>
    2156:	6f 31       	cpi	r22, 0x1F	; 31
    2158:	71 05       	cpc	r23, r1
    215a:	2c f4       	brge	.+10     	; 0x2166 <gc_execute_block+0x136>
    215c:	6c 31       	cpi	r22, 0x1C	; 28
    215e:	71 05       	cpc	r23, r1
    2160:	09 f0       	breq	.+2      	; 0x2164 <gc_execute_block+0x134>
    2162:	97 c0       	rjmp	.+302    	; 0x2292 <gc_execute_block+0x262>
    2164:	4c c0       	rjmp	.+152    	; 0x21fe <gc_execute_block+0x1ce>
    2166:	65 33       	cpi	r22, 0x35	; 53
    2168:	71 05       	cpc	r23, r1
    216a:	09 f4       	brne	.+2      	; 0x216e <gc_execute_block+0x13e>
    216c:	4b c0       	rjmp	.+150    	; 0x2204 <gc_execute_block+0x1d4>
    216e:	60 35       	cpi	r22, 0x50	; 80
    2170:	71 05       	cpc	r23, r1
    2172:	09 f0       	breq	.+2      	; 0x2176 <gc_execute_block+0x146>
    2174:	8e c0       	rjmp	.+284    	; 0x2292 <gc_execute_block+0x262>
    2176:	49 c0       	rjmp	.+146    	; 0x220a <gc_execute_block+0x1da>
    2178:	6c 35       	cpi	r22, 0x5C	; 92
    217a:	71 05       	cpc	r23, r1
    217c:	09 f4       	brne	.+2      	; 0x2180 <gc_execute_block+0x150>
    217e:	4e c0       	rjmp	.+156    	; 0x221c <gc_execute_block+0x1ec>
    2180:	6c 35       	cpi	r22, 0x5C	; 92
    2182:	71 05       	cpc	r23, r1
    2184:	0c f4       	brge	.+2      	; 0x2188 <gc_execute_block+0x158>
    2186:	47 c0       	rjmp	.+142    	; 0x2216 <gc_execute_block+0x1e6>
    2188:	6d 35       	cpi	r22, 0x5D	; 93
    218a:	71 05       	cpc	r23, r1
    218c:	09 f4       	brne	.+2      	; 0x2190 <gc_execute_block+0x160>
    218e:	49 c0       	rjmp	.+146    	; 0x2222 <gc_execute_block+0x1f2>
    2190:	6e 35       	cpi	r22, 0x5E	; 94
    2192:	71 05       	cpc	r23, r1
    2194:	09 f0       	breq	.+2      	; 0x2198 <gc_execute_block+0x168>
    2196:	7d c0       	rjmp	.+250    	; 0x2292 <gc_execute_block+0x262>
    2198:	47 c0       	rjmp	.+142    	; 0x2228 <gc_execute_block+0x1f8>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    219a:	f0 92 18 21 	sts	0x2118, r15
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    219e:	10 92 1a 21 	sts	0x211A, r1
    21a2:	88 c0       	rjmp	.+272    	; 0x22b4 <gc_execute_block+0x284>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    21a4:	f0 92 18 21 	sts	0x2118, r15
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    21a8:	f0 92 1a 21 	sts	0x211A, r15
    21ac:	83 c0       	rjmp	.+262    	; 0x22b4 <gc_execute_block+0x284>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    21ae:	f0 92 18 21 	sts	0x2118, r15
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    21b2:	e0 92 1a 21 	sts	0x211A, r14
    21b6:	7e c0       	rjmp	.+252    	; 0x22b4 <gc_execute_block+0x284>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    21b8:	f0 92 18 21 	sts	0x2118, r15
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    21bc:	d0 92 1a 21 	sts	0x211A, r13
    21c0:	79 c0       	rjmp	.+242    	; 0x22b4 <gc_execute_block+0x284>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    21c2:	e0 92 18 21 	sts	0x2118, r14
    21c6:	76 c0       	rjmp	.+236    	; 0x22b4 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    21c8:	10 92 21 21 	sts	0x2121, r1
	gc.plane_axis_1 = axis_1;
    21cc:	f0 92 22 21 	sts	0x2122, r15
	gc.plane_axis_2 = axis_2;
    21d0:	e0 92 23 21 	sts	0x2123, r14
    21d4:	6f c0       	rjmp	.+222    	; 0x22b4 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    21d6:	10 92 21 21 	sts	0x2121, r1
	gc.plane_axis_1 = axis_1;
    21da:	e0 92 22 21 	sts	0x2122, r14
	gc.plane_axis_2 = axis_2;
    21de:	f0 92 23 21 	sts	0x2123, r15
    21e2:	68 c0       	rjmp	.+208    	; 0x22b4 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    21e4:	f0 92 21 21 	sts	0x2121, r15
	gc.plane_axis_1 = axis_1;
    21e8:	e0 92 22 21 	sts	0x2122, r14
	gc.plane_axis_2 = axis_2;
    21ec:	10 92 23 21 	sts	0x2123, r1
    21f0:	61 c0       	rjmp	.+194    	; 0x22b4 <gc_execute_block+0x284>

					case 17: { select_plane(X, Y, Z); break; }
					case 18: { select_plane(X, Z, Y); break; }
					case 19: { select_plane(Y, Z, X); break; }

					case 20: { gc.inches_mode = TRUE; break; }
    21f2:	f0 92 1c 21 	sts	0x211C, r15
    21f6:	5e c0       	rjmp	.+188    	; 0x22b4 <gc_execute_block+0x284>
					case 21: { gc.inches_mode = FALSE; break; }
    21f8:	10 92 1c 21 	sts	0x211C, r1
    21fc:	5b c0       	rjmp	.+182    	; 0x22b4 <gc_execute_block+0x284>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    21fe:	d0 92 18 21 	sts	0x2118, r13
    2202:	58 c0       	rjmp	.+176    	; 0x22b4 <gc_execute_block+0x284>

					case 53: { gc.absolute_override = TRUE; break; }
    2204:	f0 92 20 21 	sts	0x2120, r15
    2208:	55 c0       	rjmp	.+170    	; 0x22b4 <gc_execute_block+0x284>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    220a:	60 92 1a 21 	sts	0x211A, r6
    220e:	52 c0       	rjmp	.+164    	; 0x22b4 <gc_execute_block+0x284>
					case 90: { gc.absolute_mode = TRUE; break; }
    2210:	f0 92 1d 21 	sts	0x211D, r15
    2214:	4f c0       	rjmp	.+158    	; 0x22b4 <gc_execute_block+0x284>
					case 91: { gc.absolute_mode = FALSE; break; }
    2216:	10 92 1d 21 	sts	0x211D, r1
    221a:	4c c0       	rjmp	.+152    	; 0x22b4 <gc_execute_block+0x284>
					case 92: { gc.set_origin_mode = TRUE; break; }
    221c:	f0 92 1f 21 	sts	0x211F, r15
    2220:	49 c0       	rjmp	.+146    	; 0x22b4 <gc_execute_block+0x284>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    2222:	f0 92 1b 21 	sts	0x211B, r15
    2226:	46 c0       	rjmp	.+140    	; 0x22b4 <gc_execute_block+0x284>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    2228:	10 92 1b 21 	sts	0x211B, r1
    222c:	43 c0       	rjmp	.+134    	; 0x22b4 <gc_execute_block+0x284>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    222e:	60 91 10 21 	lds	r22, 0x2110
    2232:	70 91 11 21 	lds	r23, 0x2111
    2236:	80 91 12 21 	lds	r24, 0x2112
    223a:	90 91 13 21 	lds	r25, 0x2113
    223e:	0e 94 a6 40 	call	0x814c	; 0x814c <__fixsfsi>
    2242:	63 30       	cpi	r22, 0x03	; 3
    2244:	71 05       	cpc	r23, r1
    2246:	e1 f0       	breq	.+56     	; 0x2280 <gc_execute_block+0x250>
    2248:	64 30       	cpi	r22, 0x04	; 4
    224a:	71 05       	cpc	r23, r1
    224c:	34 f4       	brge	.+12     	; 0x225a <gc_execute_block+0x22a>
    224e:	77 fd       	sbrc	r23, 7
    2250:	20 c0       	rjmp	.+64     	; 0x2292 <gc_execute_block+0x262>
    2252:	62 30       	cpi	r22, 0x02	; 2
    2254:	71 05       	cpc	r23, r1
    2256:	74 f0       	brlt	.+28     	; 0x2274 <gc_execute_block+0x244>
    2258:	10 c0       	rjmp	.+32     	; 0x227a <gc_execute_block+0x24a>
    225a:	65 30       	cpi	r22, 0x05	; 5
    225c:	71 05       	cpc	r23, r1
    225e:	b1 f0       	breq	.+44     	; 0x228c <gc_execute_block+0x25c>
    2260:	65 30       	cpi	r22, 0x05	; 5
    2262:	71 05       	cpc	r23, r1
    2264:	84 f0       	brlt	.+32     	; 0x2286 <gc_execute_block+0x256>
    2266:	6e 31       	cpi	r22, 0x1E	; 30
    2268:	71 05       	cpc	r23, r1
    226a:	39 f0       	breq	.+14     	; 0x227a <gc_execute_block+0x24a>
    226c:	6c 33       	cpi	r22, 0x3C	; 60
    226e:	71 05       	cpc	r23, r1
    2270:	81 f4       	brne	.+32     	; 0x2292 <gc_execute_block+0x262>
    2272:	03 c0       	rjmp	.+6      	; 0x227a <gc_execute_block+0x24a>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    2274:	f0 92 19 21 	sts	0x2119, r15
    2278:	1d c0       	rjmp	.+58     	; 0x22b4 <gc_execute_block+0x284>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    227a:	e0 92 19 21 	sts	0x2119, r14
    227e:	1a c0       	rjmp	.+52     	; 0x22b4 <gc_execute_block+0x284>
					case 3: gc.spindle_direction = 1; break;
    2280:	f0 92 61 21 	sts	0x2161, r15
    2284:	17 c0       	rjmp	.+46     	; 0x22b4 <gc_execute_block+0x284>
					case 4: gc.spindle_direction = -1; break;
    2286:	70 92 61 21 	sts	0x2161, r7
    228a:	14 c0       	rjmp	.+40     	; 0x22b4 <gc_execute_block+0x284>
					case 5: gc.spindle_direction = 0; break;
    228c:	10 92 61 21 	sts	0x2161, r1
    2290:	11 c0       	rjmp	.+34     	; 0x22b4 <gc_execute_block+0x284>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    2292:	c0 92 0e 21 	sts	0x210E, r12
    2296:	0e c0       	rjmp	.+28     	; 0x22b4 <gc_execute_block+0x284>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    2298:	60 91 10 21 	lds	r22, 0x2110
    229c:	70 91 11 21 	lds	r23, 0x2111
    22a0:	80 91 12 21 	lds	r24, 0x2112
    22a4:	90 91 13 21 	lds	r25, 0x2113
    22a8:	0e 94 a7 43 	call	0x874e	; 0x874e <trunc>
    22ac:	0e 94 ab 40 	call	0x8156	; 0x8156 <__fixunssfsi>
    22b0:	60 93 60 21 	sts	0x2160, r22
		}
		if(gc.status) {
    22b4:	80 91 0e 21 	lds	r24, 0x210E
    22b8:	88 23       	and	r24, r24
    22ba:	69 f4       	brne	.+26     	; 0x22d6 <gc_execute_block+0x2a6>

	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    22bc:	8f e0       	ldi	r24, 0x0F	; 15
    22be:	91 e2       	ldi	r25, 0x21	; 33
    22c0:	60 e1       	ldi	r22, 0x10	; 16
    22c2:	71 e2       	ldi	r23, 0x21	; 33
    22c4:	44 e1       	ldi	r20, 0x14	; 20
    22c6:	51 e2       	ldi	r21, 0x21	; 33
    22c8:	94 01       	movw	r18, r8
    22ca:	85 01       	movw	r16, r10
    22cc:	0e 94 65 0f 	call	0x1eca	; 0x1eca <_gc_next_statement>
    22d0:	89 2b       	or	r24, r25
    22d2:	09 f0       	breq	.+2      	; 0x22d6 <gc_execute_block+0x2a6>
    22d4:	e9 ce       	rjmp	.-558    	; 0x20a8 <gc_execute_block+0x78>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    22d6:	80 91 0e 21 	lds	r24, 0x210E
    22da:	88 23       	and	r24, r24
    22dc:	09 f0       	breq	.+2      	; 0x22e0 <gc_execute_block+0x2b0>
    22de:	99 c3       	rjmp	.+1842   	; 0x2a12 <gc_execute_block+0x9e2>
		return(gc.status); 
	}

	i = 0;
    22e0:	19 82       	std	Y+1, r1	; 0x01
    22e2:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    22e4:	e4 e5       	ldi	r30, 0x54	; 84
    22e6:	f1 e2       	ldi	r31, 0x21	; 33
    22e8:	8c e0       	ldi	r24, 0x0C	; 12
    22ea:	df 01       	movw	r26, r30
    22ec:	1d 92       	st	X+, r1
    22ee:	8a 95       	dec	r24
    22f0:	e9 f7       	brne	.-6      	; 0x22ec <gc_execute_block+0x2bc>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    22f2:	df 01       	movw	r26, r30
    22f4:	1c 97       	sbiw	r26, 0x0c	; 12
    22f6:	78 97       	sbiw	r30, 0x18	; 24
    22f8:	8c e0       	ldi	r24, 0x0C	; 12
    22fa:	01 90       	ld	r0, Z+
    22fc:	0d 92       	st	X+, r0
    22fe:	81 50       	subi	r24, 0x01	; 1
    2300:	e1 f7       	brne	.-8      	; 0x22fa <gc_execute_block+0x2ca>
    2302:	c6 c0       	rjmp	.+396    	; 0x2490 <gc_execute_block+0x460>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2304:	c0 90 10 21 	lds	r12, 0x2110
    2308:	d0 90 11 21 	lds	r13, 0x2111
    230c:	e0 90 12 21 	lds	r14, 0x2112
    2310:	f0 90 13 21 	lds	r15, 0x2113
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    2314:	80 91 1c 21 	lds	r24, 0x211C
    2318:	88 23       	and	r24, r24
    231a:	19 f4       	brne	.+6      	; 0x2322 <gc_execute_block+0x2f2>
    231c:	a7 01       	movw	r20, r14
    231e:	96 01       	movw	r18, r12
    2320:	0a c0       	rjmp	.+20     	; 0x2336 <gc_execute_block+0x306>
    2322:	c7 01       	movw	r24, r14
    2324:	b6 01       	movw	r22, r12
    2326:	25 e8       	ldi	r18, 0x85	; 133
    2328:	32 e4       	ldi	r19, 0x42	; 66
    232a:	41 e2       	ldi	r20, 0x21	; 33
    232c:	5d e3       	ldi	r21, 0x3D	; 61
    232e:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    2332:	9b 01       	movw	r18, r22
    2334:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2336:	20 93 34 21 	sts	0x2134, r18
    233a:	30 93 35 21 	sts	0x2135, r19
    233e:	40 93 36 21 	sts	0x2136, r20
    2342:	50 93 37 21 	sts	0x2137, r21
		switch(gc.letter) {
    2346:	00 91 0f 21 	lds	r16, 0x210F
    234a:	00 35       	cpi	r16, 0x50	; 80
    234c:	09 f4       	brne	.+2      	; 0x2350 <gc_execute_block+0x320>
    234e:	47 c0       	rjmp	.+142    	; 0x23de <gc_execute_block+0x3ae>
    2350:	01 35       	cpi	r16, 0x51	; 81
    2352:	58 f4       	brcc	.+22     	; 0x236a <gc_execute_block+0x33a>
    2354:	06 34       	cpi	r16, 0x46	; 70
    2356:	c1 f0       	breq	.+48     	; 0x2388 <gc_execute_block+0x358>
    2358:	06 34       	cpi	r16, 0x46	; 70
    235a:	08 f4       	brcc	.+2      	; 0x235e <gc_execute_block+0x32e>
    235c:	9f c0       	rjmp	.+318    	; 0x249c <gc_execute_block+0x46c>
    235e:	80 2f       	mov	r24, r16
    2360:	89 54       	subi	r24, 0x49	; 73
    2362:	83 30       	cpi	r24, 0x03	; 3
    2364:	08 f0       	brcs	.+2      	; 0x2368 <gc_execute_block+0x338>
    2366:	9a c0       	rjmp	.+308    	; 0x249c <gc_execute_block+0x46c>
    2368:	2d c0       	rjmp	.+90     	; 0x23c4 <gc_execute_block+0x394>
    236a:	03 35       	cpi	r16, 0x53	; 83
    236c:	09 f4       	brne	.+2      	; 0x2370 <gc_execute_block+0x340>
    236e:	4b c0       	rjmp	.+150    	; 0x2406 <gc_execute_block+0x3d6>
    2370:	04 35       	cpi	r16, 0x54	; 84
    2372:	20 f4       	brcc	.+8      	; 0x237c <gc_execute_block+0x34c>
    2374:	02 35       	cpi	r16, 0x52	; 82
    2376:	09 f0       	breq	.+2      	; 0x237a <gc_execute_block+0x34a>
    2378:	91 c0       	rjmp	.+290    	; 0x249c <gc_execute_block+0x46c>
    237a:	3a c0       	rjmp	.+116    	; 0x23f0 <gc_execute_block+0x3c0>
    237c:	80 2f       	mov	r24, r16
    237e:	88 55       	subi	r24, 0x58	; 88
    2380:	83 30       	cpi	r24, 0x03	; 3
    2382:	08 f0       	brcs	.+2      	; 0x2386 <gc_execute_block+0x356>
    2384:	8b c0       	rjmp	.+278    	; 0x249c <gc_execute_block+0x46c>
    2386:	48 c0       	rjmp	.+144    	; 0x2418 <gc_execute_block+0x3e8>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    2388:	80 91 1b 21 	lds	r24, 0x211B
    238c:	88 23       	and	r24, r24
    238e:	49 f0       	breq	.+18     	; 0x23a2 <gc_execute_block+0x372>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    2390:	20 93 38 21 	sts	0x2138, r18
    2394:	30 93 39 21 	sts	0x2139, r19
    2398:	40 93 3a 21 	sts	0x213A, r20
    239c:	50 93 3b 21 	sts	0x213B, r21
    23a0:	7d c0       	rjmp	.+250    	; 0x249c <gc_execute_block+0x46c>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    23a2:	ca 01       	movw	r24, r20
    23a4:	b9 01       	movw	r22, r18
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e7       	ldi	r20, 0x70	; 112
    23ac:	52 e4       	ldi	r21, 0x42	; 66
    23ae:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    23b2:	60 93 2c 21 	sts	0x212C, r22
    23b6:	70 93 2d 21 	sts	0x212D, r23
    23ba:	80 93 2e 21 	sts	0x212E, r24
    23be:	90 93 2f 21 	sts	0x212F, r25
    23c2:	6c c0       	rjmp	.+216    	; 0x249c <gc_execute_block+0x46c>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    23c4:	e0 2f       	mov	r30, r16
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	ee 0f       	add	r30, r30
    23ca:	ff 1f       	adc	r31, r31
    23cc:	ee 0f       	add	r30, r30
    23ce:	ff 1f       	adc	r31, r31
    23d0:	e0 5d       	subi	r30, 0xD0	; 208
    23d2:	ff 4d       	sbci	r31, 0xDF	; 223
    23d4:	20 83       	st	Z, r18
    23d6:	31 83       	std	Z+1, r19	; 0x01
    23d8:	42 83       	std	Z+2, r20	; 0x02
    23da:	53 83       	std	Z+3, r21	; 0x03
    23dc:	5f c0       	rjmp	.+190    	; 0x249c <gc_execute_block+0x46c>
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
    23de:	c0 92 24 21 	sts	0x2124, r12
    23e2:	d0 92 25 21 	sts	0x2125, r13
    23e6:	e0 92 26 21 	sts	0x2126, r14
    23ea:	f0 92 27 21 	sts	0x2127, r15
    23ee:	56 c0       	rjmp	.+172    	; 0x249c <gc_execute_block+0x46c>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    23f0:	20 93 28 21 	sts	0x2128, r18
    23f4:	30 93 29 21 	sts	0x2129, r19
    23f8:	40 93 2a 21 	sts	0x212A, r20
    23fc:	50 93 2b 21 	sts	0x212B, r21
    2400:	70 92 1e 21 	sts	0x211E, r7
    2404:	4b c0       	rjmp	.+150    	; 0x249c <gc_execute_block+0x46c>
			case 'S': gc.spindle_speed = gc.value; break;
    2406:	c7 01       	movw	r24, r14
    2408:	b6 01       	movw	r22, r12
    240a:	0e 94 a6 40 	call	0x814c	; 0x814c <__fixsfsi>
    240e:	60 93 62 21 	sts	0x2162, r22
    2412:	70 93 63 21 	sts	0x2163, r23
    2416:	42 c0       	rjmp	.+132    	; 0x249c <gc_execute_block+0x46c>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    2418:	80 91 1f 21 	lds	r24, 0x211F
    241c:	88 23       	and	r24, r24
    241e:	69 f0       	breq	.+26     	; 0x243a <gc_execute_block+0x40a>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    2420:	e0 2f       	mov	r30, r16
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	ee 0f       	add	r30, r30
    2426:	ff 1f       	adc	r31, r31
    2428:	ee 0f       	add	r30, r30
    242a:	ff 1f       	adc	r31, r31
    242c:	e2 55       	subi	r30, 0x52	; 82
    242e:	f0 4e       	sbci	r31, 0xE0	; 224
    2430:	26 a7       	std	Z+46, r18	; 0x2e
    2432:	37 a7       	std	Z+47, r19	; 0x2f
    2434:	40 ab       	std	Z+48, r20	; 0x30
    2436:	51 ab       	std	Z+49, r21	; 0x31
    2438:	31 c0       	rjmp	.+98     	; 0x249c <gc_execute_block+0x46c>
				} else if (gc.absolute_mode || gc.absolute_override) {
    243a:	80 91 1d 21 	lds	r24, 0x211D
    243e:	88 23       	and	r24, r24
    2440:	21 f4       	brne	.+8      	; 0x244a <gc_execute_block+0x41a>
    2442:	80 91 20 21 	lds	r24, 0x2120
    2446:	88 23       	and	r24, r24
    2448:	69 f0       	breq	.+26     	; 0x2464 <gc_execute_block+0x434>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    244a:	e0 2f       	mov	r30, r16
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	ee 0f       	add	r30, r30
    2450:	ff 1f       	adc	r31, r31
    2452:	ee 0f       	add	r30, r30
    2454:	ff 1f       	adc	r31, r31
    2456:	e2 55       	subi	r30, 0x52	; 82
    2458:	f0 4e       	sbci	r31, 0xE0	; 224
    245a:	22 af       	std	Z+58, r18	; 0x3a
    245c:	33 af       	std	Z+59, r19	; 0x3b
    245e:	44 af       	std	Z+60, r20	; 0x3c
    2460:	55 af       	std	Z+61, r21	; 0x3d
    2462:	1c c0       	rjmp	.+56     	; 0x249c <gc_execute_block+0x46c>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    2464:	10 e0       	ldi	r17, 0x00	; 0
    2466:	00 0f       	add	r16, r16
    2468:	11 1f       	adc	r17, r17
    246a:	00 0f       	add	r16, r16
    246c:	11 1f       	adc	r17, r17
    246e:	02 55       	subi	r16, 0x52	; 82
    2470:	10 4e       	sbci	r17, 0xE0	; 224
    2472:	f8 01       	movw	r30, r16
    2474:	62 ad       	ldd	r22, Z+58	; 0x3a
    2476:	73 ad       	ldd	r23, Z+59	; 0x3b
    2478:	84 ad       	ldd	r24, Z+60	; 0x3c
    247a:	95 ad       	ldd	r25, Z+61	; 0x3d
    247c:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <__addsf3>
    2480:	d8 01       	movw	r26, r16
    2482:	da 96       	adiw	r26, 0x3a	; 58
    2484:	6d 93       	st	X+, r22
    2486:	7d 93       	st	X+, r23
    2488:	8d 93       	st	X+, r24
    248a:	9c 93       	st	X, r25
    248c:	dd 97       	sbiw	r26, 0x3d	; 61
    248e:	06 c0       	rjmp	.+12     	; 0x249c <gc_execute_block+0x46c>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2490:	5e 01       	movw	r10, r28
    2492:	08 94       	sec
    2494:	a1 1c       	adc	r10, r1
    2496:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    2498:	77 24       	eor	r7, r7
    249a:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    249c:	8f e0       	ldi	r24, 0x0F	; 15
    249e:	91 e2       	ldi	r25, 0x21	; 33
    24a0:	60 e1       	ldi	r22, 0x10	; 16
    24a2:	71 e2       	ldi	r23, 0x21	; 33
    24a4:	44 e1       	ldi	r20, 0x14	; 20
    24a6:	51 e2       	ldi	r21, 0x21	; 33
    24a8:	94 01       	movw	r18, r8
    24aa:	85 01       	movw	r16, r10
    24ac:	0e 94 65 0f 	call	0x1eca	; 0x1eca <_gc_next_statement>
    24b0:	89 2b       	or	r24, r25
    24b2:	09 f0       	breq	.+2      	; 0x24b6 <gc_execute_block+0x486>
    24b4:	27 cf       	rjmp	.-434    	; 0x2304 <gc_execute_block+0x2d4>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    24b6:	80 91 0e 21 	lds	r24, 0x210E
    24ba:	88 23       	and	r24, r24
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <gc_execute_block+0x490>
    24be:	a9 c2       	rjmp	.+1362   	; 0x2a12 <gc_execute_block+0x9e2>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    24c0:	80 91 61 21 	lds	r24, 0x2161
    24c4:	88 23       	and	r24, r24
    24c6:	71 f0       	breq	.+28     	; 0x24e4 <gc_execute_block+0x4b4>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    24c8:	40 91 62 21 	lds	r20, 0x2162
    24cc:	50 91 63 21 	lds	r21, 0x2163
    24d0:	66 27       	eor	r22, r22
    24d2:	57 fd       	sbrc	r21, 7
    24d4:	60 95       	com	r22
    24d6:	76 2f       	mov	r23, r22
    24d8:	99 27       	eor	r25, r25
    24da:	87 fd       	sbrc	r24, 7
    24dc:	90 95       	com	r25
    24de:	0e 94 43 23 	call	0x4686	; 0x4686 <spindle_run>
    24e2:	02 c0       	rjmp	.+4      	; 0x24e8 <gc_execute_block+0x4b8>
	} else {
		spindle_stop();
    24e4:	0e 94 53 23 	call	0x46a6	; 0x46a6 <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    24e8:	80 91 18 21 	lds	r24, 0x2118
    24ec:	82 30       	cpi	r24, 0x02	; 2
    24ee:	49 f0       	breq	.+18     	; 0x2502 <gc_execute_block+0x4d2>
    24f0:	83 30       	cpi	r24, 0x03	; 3
    24f2:	21 f0       	breq	.+8      	; 0x24fc <gc_execute_block+0x4cc>
    24f4:	81 30       	cpi	r24, 0x01	; 1
    24f6:	09 f0       	breq	.+2      	; 0x24fa <gc_execute_block+0x4ca>
    24f8:	7d c2       	rjmp	.+1274   	; 0x29f4 <gc_execute_block+0x9c4>
    24fa:	0e c0       	rjmp	.+28     	; 0x2518 <gc_execute_block+0x4e8>
		case NEXT_ACTION_DEFAULT: {				// nothing to do here
			break;
		}

		case NEXT_ACTION_GO_HOME: { 
			gc.status = mc_go_home(); 
    24fc:	0e 94 cf 1a 	call	0x359e	; 0x359e <mc_go_home>
    2500:	77 c2       	rjmp	.+1262   	; 0x29f0 <gc_execute_block+0x9c0>
			break;
		}

		case NEXT_ACTION_DWELL: {
			gc.status = mc_dwell(gc.dwell_time); 
    2502:	60 91 24 21 	lds	r22, 0x2124
    2506:	70 91 25 21 	lds	r23, 0x2125
    250a:	80 91 26 21 	lds	r24, 0x2126
    250e:	90 91 27 21 	lds	r25, 0x2127
    2512:	0e 94 2e 1b 	call	0x365c	; 0x365c <mc_dwell>
    2516:	6c c2       	rjmp	.+1240   	; 0x29f0 <gc_execute_block+0x9c0>
			break;
		}

		case NEXT_ACTION_MOTION: {
			switch (gc.motion_mode) {
    2518:	b0 91 1a 21 	lds	r27, 0x211A
    251c:	b8 8f       	std	Y+24, r27	; 0x18
    251e:	b2 30       	cpi	r27, 0x02	; 2
    2520:	20 f0       	brcs	.+8      	; 0x252a <gc_execute_block+0x4fa>
    2522:	b4 30       	cpi	r27, 0x04	; 4
    2524:	08 f0       	brcs	.+2      	; 0x2528 <gc_execute_block+0x4f8>
    2526:	66 c2       	rjmp	.+1228   	; 0x29f4 <gc_execute_block+0x9c4>
    2528:	31 c0       	rjmp	.+98     	; 0x258c <gc_execute_block+0x55c>
				case MOTION_MODE_CANCEL: {
					break;
				}

				case MOTION_MODE_RAPID_LINEAR: case MOTION_MODE_LINEAR: {
					gc.status = mc_line(gc.target[X], gc.target[Y], gc.target[Z],
    252a:	60 91 48 21 	lds	r22, 0x2148
    252e:	70 91 49 21 	lds	r23, 0x2149
    2532:	80 91 4a 21 	lds	r24, 0x214A
    2536:	90 91 4b 21 	lds	r25, 0x214B
    253a:	20 91 4c 21 	lds	r18, 0x214C
    253e:	30 91 4d 21 	lds	r19, 0x214D
    2542:	40 91 4e 21 	lds	r20, 0x214E
    2546:	50 91 4f 21 	lds	r21, 0x214F
    254a:	e0 90 50 21 	lds	r14, 0x2150
    254e:	f0 90 51 21 	lds	r15, 0x2151
    2552:	00 91 52 21 	lds	r16, 0x2152
    2556:	10 91 53 21 	lds	r17, 0x2153
    255a:	80 90 1b 21 	lds	r8, 0x211B
    255e:	88 20       	and	r8, r8
    2560:	49 f0       	breq	.+18     	; 0x2574 <gc_execute_block+0x544>
    2562:	a0 90 38 21 	lds	r10, 0x2138
    2566:	b0 90 39 21 	lds	r11, 0x2139
    256a:	c0 90 3a 21 	lds	r12, 0x213A
    256e:	d0 90 3b 21 	lds	r13, 0x213B
    2572:	08 c0       	rjmp	.+16     	; 0x2584 <gc_execute_block+0x554>
    2574:	a0 90 2c 21 	lds	r10, 0x212C
    2578:	b0 90 2d 21 	lds	r11, 0x212D
    257c:	c0 90 2e 21 	lds	r12, 0x212E
    2580:	d0 90 2f 21 	lds	r13, 0x212F
    2584:	99 24       	eor	r9, r9
    2586:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <mc_line>
    258a:	32 c2       	rjmp	.+1124   	; 0x29f0 <gc_execute_block+0x9c0>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    258c:	80 91 1e 21 	lds	r24, 0x211E
    2590:	88 23       	and	r24, r24
    2592:	09 f4       	brne	.+2      	; 0x2596 <gc_execute_block+0x566>
    2594:	ec c0       	rjmp	.+472    	; 0x276e <gc_execute_block+0x73e>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    2596:	e0 91 21 21 	lds	r30, 0x2121
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	ee 0f       	add	r30, r30
    259e:	ff 1f       	adc	r31, r31
    25a0:	ee 0f       	add	r30, r30
    25a2:	ff 1f       	adc	r31, r31
    25a4:	e2 5f       	subi	r30, 0xF2	; 242
    25a6:	fe 4d       	sbci	r31, 0xDE	; 222
    25a8:	62 ad       	ldd	r22, Z+58	; 0x3a
    25aa:	73 ad       	ldd	r23, Z+59	; 0x3b
    25ac:	84 ad       	ldd	r24, Z+60	; 0x3c
    25ae:	95 ad       	ldd	r25, Z+61	; 0x3d
    25b0:	26 a5       	ldd	r18, Z+46	; 0x2e
    25b2:	37 a5       	ldd	r19, Z+47	; 0x2f
    25b4:	40 a9       	ldd	r20, Z+48	; 0x30
    25b6:	51 a9       	ldd	r21, Z+49	; 0x31
    25b8:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    25bc:	6f 83       	std	Y+7, r22	; 0x07
    25be:	78 87       	std	Y+8, r23	; 0x08
    25c0:	89 87       	std	Y+9, r24	; 0x09
    25c2:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    25c4:	e0 91 22 21 	lds	r30, 0x2122
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	ee 0f       	add	r30, r30
    25cc:	ff 1f       	adc	r31, r31
    25ce:	ee 0f       	add	r30, r30
    25d0:	ff 1f       	adc	r31, r31
    25d2:	e2 5f       	subi	r30, 0xF2	; 242
    25d4:	fe 4d       	sbci	r31, 0xDE	; 222
    25d6:	62 ad       	ldd	r22, Z+58	; 0x3a
    25d8:	73 ad       	ldd	r23, Z+59	; 0x3b
    25da:	84 ad       	ldd	r24, Z+60	; 0x3c
    25dc:	95 ad       	ldd	r25, Z+61	; 0x3d
    25de:	26 a5       	ldd	r18, Z+46	; 0x2e
    25e0:	37 a5       	ldd	r19, Z+47	; 0x2f
    25e2:	40 a9       	ldd	r20, Z+48	; 0x30
    25e4:	51 a9       	ldd	r21, Z+49	; 0x31
    25e6:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    25ea:	1b 01       	movw	r2, r22
    25ec:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    25ee:	10 92 54 21 	sts	0x2154, r1
    25f2:	10 92 55 21 	sts	0x2155, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    25f6:	60 90 28 21 	lds	r6, 0x2128
    25fa:	70 90 29 21 	lds	r7, 0x2129
    25fe:	80 90 2a 21 	lds	r8, 0x212A
    2602:	90 90 2b 21 	lds	r9, 0x212B
    2606:	c4 01       	movw	r24, r8
    2608:	b3 01       	movw	r22, r6
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e8       	ldi	r20, 0x80	; 128
    2610:	50 e4       	ldi	r21, 0x40	; 64
    2612:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    2616:	a4 01       	movw	r20, r8
    2618:	93 01       	movw	r18, r6
    261a:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    261e:	5b 01       	movw	r10, r22
    2620:	6c 01       	movw	r12, r24
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	9b 01       	movw	r18, r22
    262c:	ac 01       	movw	r20, r24
    262e:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    2632:	7b 01       	movw	r14, r22
    2634:	8c 01       	movw	r16, r24
    2636:	c2 01       	movw	r24, r4
    2638:	b1 01       	movw	r22, r2
    263a:	a2 01       	movw	r20, r4
    263c:	91 01       	movw	r18, r2
    263e:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    2642:	9b 01       	movw	r18, r22
    2644:	ac 01       	movw	r20, r24
    2646:	c8 01       	movw	r24, r16
    2648:	b7 01       	movw	r22, r14
    264a:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    264e:	9b 01       	movw	r18, r22
    2650:	ac 01       	movw	r20, r24
    2652:	c6 01       	movw	r24, r12
    2654:	b5 01       	movw	r22, r10
    2656:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    265a:	0e 94 66 43 	call	0x86cc	; 0x86cc <sqrt>
    265e:	7b 01       	movw	r14, r22
    2660:	8c 01       	movw	r16, r24
    2662:	6f 81       	ldd	r22, Y+7	; 0x07
    2664:	78 85       	ldd	r23, Y+8	; 0x08
    2666:	89 85       	ldd	r24, Y+9	; 0x09
    2668:	9a 85       	ldd	r25, Y+10	; 0x0a
    266a:	a2 01       	movw	r20, r4
    266c:	91 01       	movw	r18, r2
    266e:	0e 94 34 42 	call	0x8468	; 0x8468 <hypot>
    2672:	9b 01       	movw	r18, r22
    2674:	ac 01       	movw	r20, r24
    2676:	17 fb       	bst	r17, 7
    2678:	10 95       	com	r17
    267a:	17 f9       	bld	r17, 7
    267c:	10 95       	com	r17
    267e:	c8 01       	movw	r24, r16
    2680:	b7 01       	movw	r22, r14
    2682:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    2686:	7b 01       	movw	r14, r22
    2688:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    268a:	a8 01       	movw	r20, r16
    268c:	97 01       	movw	r18, r14
    268e:	0e 94 ae 43 	call	0x875c	; 0x875c <__unordsf2>
    2692:	88 23       	and	r24, r24
    2694:	21 f0       	breq	.+8      	; 0x269e <gc_execute_block+0x66e>
		FAIL(TG_FLOATING_POINT_ERROR); 
    2696:	81 e1       	ldi	r24, 0x11	; 17
    2698:	80 93 0e 21 	sts	0x210E, r24
    269c:	65 c0       	rjmp	.+202    	; 0x2768 <gc_execute_block+0x738>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    269e:	e8 8d       	ldd	r30, Y+24	; 0x18
    26a0:	e3 30       	cpi	r30, 0x03	; 3
    26a2:	21 f4       	brne	.+8      	; 0x26ac <gc_execute_block+0x67c>
		h_x2_div_d = -h_x2_div_d;
    26a4:	17 fb       	bst	r17, 7
    26a6:	10 95       	com	r17
    26a8:	17 f9       	bld	r17, 7
    26aa:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    26ac:	c4 01       	movw	r24, r8
    26ae:	b3 01       	movw	r22, r6
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e0       	ldi	r20, 0x00	; 0
    26b6:	50 e0       	ldi	r21, 0x00	; 0
    26b8:	0e 94 37 40 	call	0x806e	; 0x806e <__cmpsf2>
    26bc:	88 23       	and	r24, r24
    26be:	24 f4       	brge	.+8      	; 0x26c8 <gc_execute_block+0x698>
		h_x2_div_d = -h_x2_div_d; 
    26c0:	17 fb       	bst	r17, 7
    26c2:	10 95       	com	r17
    26c4:	17 f9       	bld	r17, 7
    26c6:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    26c8:	80 91 21 21 	lds	r24, 0x2121
    26cc:	c8 2e       	mov	r12, r24
    26ce:	dd 24       	eor	r13, r13
    26d0:	cc 0c       	add	r12, r12
    26d2:	dd 1c       	adc	r13, r13
    26d4:	cc 0c       	add	r12, r12
    26d6:	dd 1c       	adc	r13, r13
    26d8:	24 e5       	ldi	r18, 0x54	; 84
    26da:	31 e2       	ldi	r19, 0x21	; 33
    26dc:	c2 0e       	add	r12, r18
    26de:	d3 1e       	adc	r13, r19
    26e0:	c2 01       	movw	r24, r4
    26e2:	b1 01       	movw	r22, r2
    26e4:	a8 01       	movw	r20, r16
    26e6:	97 01       	movw	r18, r14
    26e8:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    26ec:	9b 01       	movw	r18, r22
    26ee:	ac 01       	movw	r20, r24
    26f0:	6f 81       	ldd	r22, Y+7	; 0x07
    26f2:	78 85       	ldd	r23, Y+8	; 0x08
    26f4:	89 85       	ldd	r24, Y+9	; 0x09
    26f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f8:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e0       	ldi	r20, 0x00	; 0
    2702:	5f e3       	ldi	r21, 0x3F	; 63
    2704:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    2708:	d6 01       	movw	r26, r12
    270a:	6d 93       	st	X+, r22
    270c:	7d 93       	st	X+, r23
    270e:	8d 93       	st	X+, r24
    2710:	9c 93       	st	X, r25
    2712:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    2714:	80 91 22 21 	lds	r24, 0x2122
    2718:	c8 2e       	mov	r12, r24
    271a:	dd 24       	eor	r13, r13
    271c:	cc 0c       	add	r12, r12
    271e:	dd 1c       	adc	r13, r13
    2720:	cc 0c       	add	r12, r12
    2722:	dd 1c       	adc	r13, r13
    2724:	e4 e5       	ldi	r30, 0x54	; 84
    2726:	f1 e2       	ldi	r31, 0x21	; 33
    2728:	ce 0e       	add	r12, r30
    272a:	df 1e       	adc	r13, r31
    272c:	6f 81       	ldd	r22, Y+7	; 0x07
    272e:	78 85       	ldd	r23, Y+8	; 0x08
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	a8 01       	movw	r20, r16
    2736:	97 01       	movw	r18, r14
    2738:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    273c:	9b 01       	movw	r18, r22
    273e:	ac 01       	movw	r20, r24
    2740:	c2 01       	movw	r24, r4
    2742:	b1 01       	movw	r22, r2
    2744:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <__addsf3>
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	5f e3       	ldi	r21, 0x3F	; 63
    2750:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    2754:	d6 01       	movw	r26, r12
    2756:	6d 93       	st	X+, r22
    2758:	7d 93       	st	X+, r23
    275a:	8d 93       	st	X+, r24
    275c:	9c 93       	st	X, r25
    275e:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    2760:	80 91 0e 21 	lds	r24, 0x210E
    2764:	88 23       	and	r24, r24
    2766:	19 f0       	breq	.+6      	; 0x276e <gc_execute_block+0x73e>
			return (gc.status);
    2768:	80 91 0e 21 	lds	r24, 0x210E
    276c:	41 c1       	rjmp	.+642    	; 0x29f0 <gc_execute_block+0x9c0>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    276e:	e0 91 21 21 	lds	r30, 0x2121
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	ee 0f       	add	r30, r30
    2776:	ff 1f       	adc	r31, r31
    2778:	ee 0f       	add	r30, r30
    277a:	ff 1f       	adc	r31, r31
    277c:	ec 5a       	subi	r30, 0xAC	; 172
    277e:	fe 4d       	sbci	r31, 0xDE	; 222
    2780:	60 81       	ld	r22, Z
    2782:	71 81       	ldd	r23, Z+1	; 0x01
    2784:	82 81       	ldd	r24, Z+2	; 0x02
    2786:	93 81       	ldd	r25, Z+3	; 0x03
    2788:	90 58       	subi	r25, 0x80	; 128
    278a:	e0 91 22 21 	lds	r30, 0x2122
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	ee 0f       	add	r30, r30
    2792:	ff 1f       	adc	r31, r31
    2794:	ee 0f       	add	r30, r30
    2796:	ff 1f       	adc	r31, r31
    2798:	ec 5a       	subi	r30, 0xAC	; 172
    279a:	fe 4d       	sbci	r31, 0xDE	; 222
    279c:	20 81       	ld	r18, Z
    279e:	31 81       	ldd	r19, Z+1	; 0x01
    27a0:	42 81       	ldd	r20, Z+2	; 0x02
    27a2:	53 81       	ldd	r21, Z+3	; 0x03
    27a4:	50 58       	subi	r21, 0x80	; 128
    27a6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <theta>
    27aa:	6f 87       	std	Y+15, r22	; 0x0f
    27ac:	78 8b       	std	Y+16, r23	; 0x10
    27ae:	89 8b       	std	Y+17, r24	; 0x11
    27b0:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    27b2:	9b 01       	movw	r18, r22
    27b4:	ac 01       	movw	r20, r24
    27b6:	0e 94 ae 43 	call	0x875c	; 0x875c <__unordsf2>
    27ba:	88 23       	and	r24, r24
    27bc:	09 f0       	breq	.+2      	; 0x27c0 <gc_execute_block+0x790>
    27be:	54 c0       	rjmp	.+168    	; 0x2868 <gc_execute_block+0x838>
		FAIL(TG_ARC_ERROR); 
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    27c0:	e0 91 21 21 	lds	r30, 0x2121
    27c4:	0e 2f       	mov	r16, r30
    27c6:	10 e0       	ldi	r17, 0x00	; 0
    27c8:	e0 91 22 21 	lds	r30, 0x2122
    27cc:	ce 2e       	mov	r12, r30
    27ce:	dd 24       	eor	r13, r13
    27d0:	00 0f       	add	r16, r16
    27d2:	11 1f       	adc	r17, r17
    27d4:	00 0f       	add	r16, r16
    27d6:	11 1f       	adc	r17, r17
    27d8:	02 5f       	subi	r16, 0xF2	; 242
    27da:	1e 4d       	sbci	r17, 0xDE	; 222
    27dc:	f8 01       	movw	r30, r16
    27de:	ea 5b       	subi	r30, 0xBA	; 186
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	d8 01       	movw	r26, r16
    27e4:	da 96       	adiw	r26, 0x3a	; 58
    27e6:	6d 91       	ld	r22, X+
    27e8:	7d 91       	ld	r23, X+
    27ea:	8d 91       	ld	r24, X+
    27ec:	9c 91       	ld	r25, X
    27ee:	dd 97       	sbiw	r26, 0x3d	; 61
    27f0:	20 81       	ld	r18, Z
    27f2:	31 81       	ldd	r19, Z+1	; 0x01
    27f4:	42 81       	ldd	r20, Z+2	; 0x02
    27f6:	53 81       	ldd	r21, Z+3	; 0x03
    27f8:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    27fc:	f8 01       	movw	r30, r16
    27fe:	26 a5       	ldd	r18, Z+46	; 0x2e
    2800:	37 a5       	ldd	r19, Z+47	; 0x2f
    2802:	40 a9       	ldd	r20, Z+48	; 0x30
    2804:	51 a9       	ldd	r21, Z+49	; 0x31
    2806:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    280a:	7b 01       	movw	r14, r22
    280c:	8c 01       	movw	r16, r24
    280e:	cc 0c       	add	r12, r12
    2810:	dd 1c       	adc	r13, r13
    2812:	cc 0c       	add	r12, r12
    2814:	dd 1c       	adc	r13, r13
    2816:	2e e0       	ldi	r18, 0x0E	; 14
    2818:	31 e2       	ldi	r19, 0x21	; 33
    281a:	c2 0e       	add	r12, r18
    281c:	d3 1e       	adc	r13, r19
    281e:	f6 01       	movw	r30, r12
    2820:	ea 5b       	subi	r30, 0xBA	; 186
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	d6 01       	movw	r26, r12
    2826:	da 96       	adiw	r26, 0x3a	; 58
    2828:	6d 91       	ld	r22, X+
    282a:	7d 91       	ld	r23, X+
    282c:	8d 91       	ld	r24, X+
    282e:	9c 91       	ld	r25, X
    2830:	dd 97       	sbiw	r26, 0x3d	; 61
    2832:	20 81       	ld	r18, Z
    2834:	31 81       	ldd	r19, Z+1	; 0x01
    2836:	42 81       	ldd	r20, Z+2	; 0x02
    2838:	53 81       	ldd	r21, Z+3	; 0x03
    283a:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    283e:	f6 01       	movw	r30, r12
    2840:	26 a5       	ldd	r18, Z+46	; 0x2e
    2842:	37 a5       	ldd	r19, Z+47	; 0x2f
    2844:	40 a9       	ldd	r20, Z+48	; 0x30
    2846:	51 a9       	ldd	r21, Z+49	; 0x31
    2848:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    284c:	9b 01       	movw	r18, r22
    284e:	ac 01       	movw	r20, r24
    2850:	c8 01       	movw	r24, r16
    2852:	b7 01       	movw	r22, r14
    2854:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <theta>
    2858:	7b 01       	movw	r14, r22
    285a:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    285c:	a8 01       	movw	r20, r16
    285e:	97 01       	movw	r18, r14
    2860:	0e 94 ae 43 	call	0x875c	; 0x875c <__unordsf2>
    2864:	88 23       	and	r24, r24
    2866:	19 f0       	breq	.+6      	; 0x286e <gc_execute_block+0x83e>
		FAIL(TG_ARC_ERROR); 
    2868:	83 e1       	ldi	r24, 0x13	; 19
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	c1 c0       	rjmp	.+386    	; 0x29f0 <gc_execute_block+0x9c0>
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    286e:	c8 01       	movw	r24, r16
    2870:	b7 01       	movw	r22, r14
    2872:	2f 85       	ldd	r18, Y+15	; 0x0f
    2874:	38 89       	ldd	r19, Y+16	; 0x10
    2876:	49 89       	ldd	r20, Y+17	; 0x11
    2878:	5a 89       	ldd	r21, Y+18	; 0x12
    287a:	0e 94 37 40 	call	0x806e	; 0x806e <__cmpsf2>
    287e:	88 23       	and	r24, r24
    2880:	54 f4       	brge	.+20     	; 0x2896 <gc_execute_block+0x866>
		theta_end += 2*M_PI;
    2882:	c8 01       	movw	r24, r16
    2884:	b7 01       	movw	r22, r14
    2886:	2b ed       	ldi	r18, 0xDB	; 219
    2888:	3f e0       	ldi	r19, 0x0F	; 15
    288a:	49 ec       	ldi	r20, 0xC9	; 201
    288c:	50 e4       	ldi	r21, 0x40	; 64
    288e:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <__addsf3>
    2892:	7b 01       	movw	r14, r22
    2894:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    2896:	c8 01       	movw	r24, r16
    2898:	b7 01       	movw	r22, r14
    289a:	2f 85       	ldd	r18, Y+15	; 0x0f
    289c:	38 89       	ldd	r19, Y+16	; 0x10
    289e:	49 89       	ldd	r20, Y+17	; 0x11
    28a0:	5a 89       	ldd	r21, Y+18	; 0x12
    28a2:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    28a6:	6b 87       	std	Y+11, r22	; 0x0b
    28a8:	7c 87       	std	Y+12, r23	; 0x0c
    28aa:	8d 87       	std	Y+13, r24	; 0x0d
    28ac:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    28ae:	80 91 1a 21 	lds	r24, 0x211A
    28b2:	83 30       	cpi	r24, 0x03	; 3
    28b4:	71 f4       	brne	.+28     	; 0x28d2 <gc_execute_block+0x8a2>
		angular_travel = angular_travel - 2*M_PI;
    28b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    28bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    28be:	2b ed       	ldi	r18, 0xDB	; 219
    28c0:	3f e0       	ldi	r19, 0x0F	; 15
    28c2:	49 ec       	ldi	r20, 0xC9	; 201
    28c4:	50 e4       	ldi	r21, 0x40	; 64
    28c6:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    28ca:	6b 87       	std	Y+11, r22	; 0x0b
    28cc:	7c 87       	std	Y+12, r23	; 0x0c
    28ce:	8d 87       	std	Y+13, r24	; 0x0d
    28d0:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    28d2:	80 91 21 21 	lds	r24, 0x2121
    28d6:	28 2f       	mov	r18, r24
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	2d 83       	std	Y+5, r18	; 0x05
    28dc:	3e 83       	std	Y+6, r19	; 0x06
    28de:	f9 01       	movw	r30, r18
    28e0:	ee 0f       	add	r30, r30
    28e2:	ff 1f       	adc	r31, r31
    28e4:	ee 0f       	add	r30, r30
    28e6:	ff 1f       	adc	r31, r31
    28e8:	ec 5a       	subi	r30, 0xAC	; 172
    28ea:	fe 4d       	sbci	r31, 0xDE	; 222
    28ec:	e0 80       	ld	r14, Z
    28ee:	f1 80       	ldd	r15, Z+1	; 0x01
    28f0:	02 81       	ldd	r16, Z+2	; 0x02
    28f2:	13 81       	ldd	r17, Z+3	; 0x03
    28f4:	80 91 22 21 	lds	r24, 0x2122
    28f8:	a8 2f       	mov	r26, r24
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	ab 83       	std	Y+3, r26	; 0x03
    28fe:	bc 83       	std	Y+4, r27	; 0x04
    2900:	fd 01       	movw	r30, r26
    2902:	ee 0f       	add	r30, r30
    2904:	ff 1f       	adc	r31, r31
    2906:	ee 0f       	add	r30, r30
    2908:	ff 1f       	adc	r31, r31
    290a:	ec 5a       	subi	r30, 0xAC	; 172
    290c:	fe 4d       	sbci	r31, 0xDE	; 222
    290e:	20 81       	ld	r18, Z
    2910:	31 81       	ldd	r19, Z+1	; 0x01
    2912:	42 81       	ldd	r20, Z+2	; 0x02
    2914:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    2916:	80 91 23 21 	lds	r24, 0x2123
    291a:	28 2e       	mov	r2, r24
    291c:	33 24       	eor	r3, r3
    291e:	f1 01       	movw	r30, r2
    2920:	ee 0f       	add	r30, r30
    2922:	ff 1f       	adc	r31, r31
    2924:	ee 0f       	add	r30, r30
    2926:	ff 1f       	adc	r31, r31
    2928:	e2 5f       	subi	r30, 0xF2	; 242
    292a:	fe 4d       	sbci	r31, 0xDE	; 222
    292c:	82 ad       	ldd	r24, Z+58	; 0x3a
    292e:	93 ad       	ldd	r25, Z+59	; 0x3b
    2930:	a4 ad       	ldd	r26, Z+60	; 0x3c
    2932:	b5 ad       	ldd	r27, Z+61	; 0x3d
    2934:	8c 8b       	std	Y+20, r24	; 0x14
    2936:	9d 8b       	std	Y+21, r25	; 0x15
    2938:	ae 8b       	std	Y+22, r26	; 0x16
    293a:	bf 8b       	std	Y+23, r27	; 0x17
    293c:	a6 a4       	ldd	r10, Z+46	; 0x2e
    293e:	b7 a4       	ldd	r11, Z+47	; 0x2f
    2940:	c0 a8       	ldd	r12, Z+48	; 0x30
    2942:	d1 a8       	ldd	r13, Z+49	; 0x31

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2944:	90 91 1b 21 	lds	r25, 0x211B
    2948:	9b 8b       	std	Y+19, r25	; 0x13
    294a:	99 23       	and	r25, r25
    294c:	49 f0       	breq	.+18     	; 0x2960 <gc_execute_block+0x930>
    294e:	40 90 38 21 	lds	r4, 0x2138
    2952:	50 90 39 21 	lds	r5, 0x2139
    2956:	60 90 3a 21 	lds	r6, 0x213A
    295a:	70 90 3b 21 	lds	r7, 0x213B
    295e:	08 c0       	rjmp	.+16     	; 0x2970 <gc_execute_block+0x940>
    2960:	40 90 2c 21 	lds	r4, 0x212C
    2964:	50 90 2d 21 	lds	r5, 0x212D
    2968:	60 90 2e 21 	lds	r6, 0x212E
    296c:	70 90 2f 21 	lds	r7, 0x212F
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2970:	c8 01       	movw	r24, r16
    2972:	b7 01       	movw	r22, r14
    2974:	0e 94 34 42 	call	0x8468	; 0x8468 <hypot>
    2978:	7b 01       	movw	r14, r22
    297a:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    297c:	ad b7       	in	r26, 0x3d	; 61
    297e:	be b7       	in	r27, 0x3e	; 62
    2980:	1a 97       	sbiw	r26, 0x0a	; 10
    2982:	ad bf       	out	0x3d, r26	; 61
    2984:	be bf       	out	0x3e, r27	; 62
    2986:	8d b6       	in	r8, 0x3d	; 61
    2988:	9e b6       	in	r9, 0x3e	; 62
    298a:	08 94       	sec
    298c:	81 1c       	adc	r8, r1
    298e:	91 1c       	adc	r9, r1
    2990:	6c 89       	ldd	r22, Y+20	; 0x14
    2992:	7d 89       	ldd	r23, Y+21	; 0x15
    2994:	8e 89       	ldd	r24, Y+22	; 0x16
    2996:	9f 89       	ldd	r25, Y+23	; 0x17
    2998:	a6 01       	movw	r20, r12
    299a:	95 01       	movw	r18, r10
    299c:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    29a0:	5b 01       	movw	r10, r22
    29a2:	6c 01       	movw	r12, r24
    29a4:	2b 81       	ldd	r18, Y+3	; 0x03
    29a6:	3c 81       	ldd	r19, Y+4	; 0x04
    29a8:	f4 01       	movw	r30, r8
    29aa:	20 83       	st	Z, r18
    29ac:	31 83       	std	Z+1, r19	; 0x01
    29ae:	22 82       	std	Z+2, r2	; 0x02
    29b0:	33 82       	std	Z+3, r3	; 0x03
    29b2:	d4 01       	movw	r26, r8
    29b4:	14 96       	adiw	r26, 0x04	; 4
    29b6:	4d 92       	st	X+, r4
    29b8:	5d 92       	st	X+, r5
    29ba:	6d 92       	st	X+, r6
    29bc:	7c 92       	st	X, r7
    29be:	17 97       	sbiw	r26, 0x07	; 7
    29c0:	eb 89       	ldd	r30, Y+19	; 0x13
    29c2:	18 96       	adiw	r26, 0x08	; 8
    29c4:	ec 93       	st	X, r30
    29c6:	18 97       	sbiw	r26, 0x08	; 8
    29c8:	19 96       	adiw	r26, 0x09	; 9
    29ca:	1c 92       	st	X, r1
    29cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    29ce:	78 89       	ldd	r23, Y+16	; 0x10
    29d0:	89 89       	ldd	r24, Y+17	; 0x11
    29d2:	9a 89       	ldd	r25, Y+18	; 0x12
    29d4:	2b 85       	ldd	r18, Y+11	; 0x0b
    29d6:	3c 85       	ldd	r19, Y+12	; 0x0c
    29d8:	4d 85       	ldd	r20, Y+13	; 0x0d
    29da:	5e 85       	ldd	r21, Y+14	; 0x0e
    29dc:	8d 80       	ldd	r8, Y+5	; 0x05
    29de:	9e 80       	ldd	r9, Y+6	; 0x06
    29e0:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <mc_arc>
	// has completed the arc. So the endpoint should be passed to the generator and
	// executed there.
//	gc.status = mc_line(gc.target[X_AXIS], gc.target[Y_AXIS], gc.target[Z_AXIS], 
//					   (gc.inverse_feed_rate_mode) ? gc.inverse_feed_rate : 
//						gc.feed_rate, gc.inverse_feed_rate_mode);
	return (gc.status);
    29e4:	2d b7       	in	r18, 0x3d	; 61
    29e6:	3e b7       	in	r19, 0x3e	; 62
    29e8:	26 5f       	subi	r18, 0xF6	; 246
    29ea:	3f 4f       	sbci	r19, 0xFF	; 255
    29ec:	2d bf       	out	0x3d, r18	; 61
    29ee:	3e bf       	out	0x3e, r19	; 62
										gc.inverse_feed_rate_mode); 
					break;
				}

				case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC: {
					gc.status = _gc_compute_arc(); 
    29f0:	80 93 0e 21 	sts	0x210E, r24
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_EAGAIN)) {
    29f4:	80 91 0e 21 	lds	r24, 0x210E
    29f8:	88 23       	and	r24, r24
    29fa:	11 f0       	breq	.+4      	; 0x2a00 <gc_execute_block+0x9d0>
    29fc:	82 30       	cpi	r24, 0x02	; 2
    29fe:	49 f4       	brne	.+18     	; 0x2a12 <gc_execute_block+0x9e2>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2a00:	ec e3       	ldi	r30, 0x3C	; 60
    2a02:	f1 e2       	ldi	r31, 0x21	; 33
    2a04:	df 01       	movw	r26, r30
    2a06:	1c 96       	adiw	r26, 0x0c	; 12
    2a08:	9c e0       	ldi	r25, 0x0C	; 12
    2a0a:	0d 90       	ld	r0, X+
    2a0c:	01 92       	st	Z+, r0
    2a0e:	91 50       	subi	r25, 0x01	; 1
    2a10:	e1 f7       	brne	.-8      	; 0x2a0a <gc_execute_block+0x9da>
	};
	return(gc.status);
}
    2a12:	68 96       	adiw	r28, 0x18	; 24
    2a14:	cd bf       	out	0x3d, r28	; 61
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	1f 91       	pop	r17
    2a1e:	0f 91       	pop	r16
    2a20:	ff 90       	pop	r15
    2a22:	ef 90       	pop	r14
    2a24:	df 90       	pop	r13
    2a26:	cf 90       	pop	r12
    2a28:	bf 90       	pop	r11
    2a2a:	af 90       	pop	r10
    2a2c:	9f 90       	pop	r9
    2a2e:	8f 90       	pop	r8
    2a30:	7f 90       	pop	r7
    2a32:	6f 90       	pop	r6
    2a34:	5f 90       	pop	r5
    2a36:	4f 90       	pop	r4
    2a38:	3f 90       	pop	r3
    2a3a:	2f 90       	pop	r2
    2a3c:	08 95       	ret

00002a3e <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2a3e:	0f 93       	push	r16
    2a40:	1f 93       	push	r17
    2a42:	cf 93       	push	r28
    2a44:	df 93       	push	r29
    2a46:	ec 01       	movw	r28, r24
    2a48:	10 e0       	ldi	r17, 0x00	; 0
    2a4a:	00 e0       	ldi	r16, 0x00	; 0
    2a4c:	07 c0       	rjmp	.+14     	; 0x2a5c <gc_gcode_parser+0x1e>
	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = toupper(block[i++])) != 0) { // NUL character
		if (c <= ' ' ) continue;			 // toss WS & ctrl chars
    2a4e:	81 32       	cpi	r24, 0x21	; 33
    2a50:	28 f0       	brcs	.+10     	; 0x2a5c <gc_gcode_parser+0x1e>
		block[j++] = c;
    2a52:	fe 01       	movw	r30, r28
    2a54:	e1 0f       	add	r30, r17
    2a56:	f1 1d       	adc	r31, r1
    2a58:	80 83       	st	Z, r24
    2a5a:	1f 5f       	subi	r17, 0xFF	; 255

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = toupper(block[i++])) != 0) { // NUL character
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e0 0f       	add	r30, r16
    2a60:	f1 1d       	adc	r31, r1
    2a62:	0f 5f       	subi	r16, 0xFF	; 255
    2a64:	80 81       	ld	r24, Z
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	0e 94 ae 46 	call	0x8d5c	; 0x8d5c <toupper>
    2a6c:	88 23       	and	r24, r24
    2a6e:	79 f7       	brne	.-34     	; 0x2a4e <gc_gcode_parser+0x10>
		if (c <= ' ' ) continue;			 // toss WS & ctrl chars
		block[j++] = c;
	}
	block[j] = 0;							// nul terminate string
    2a70:	fe 01       	movw	r30, r28
    2a72:	e1 0f       	add	r30, r17
    2a74:	f1 1d       	adc	r31, r1
    2a76:	10 82       	st	Z, r1
{
	_gc_normalize_gcode_block(block);
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    2a78:	88 81       	ld	r24, Y
    2a7a:	88 32       	cpi	r24, 0x28	; 40
    2a7c:	61 f0       	breq	.+24     	; 0x2a96 <gc_gcode_parser+0x58>
		return(TG_OK);
	}
	if (block[0] == 'Q') { 					// quit
    2a7e:	81 35       	cpi	r24, 0x51	; 81
    2a80:	11 f4       	brne	.+4      	; 0x2a86 <gc_gcode_parser+0x48>
    2a82:	8b e0       	ldi	r24, 0x0B	; 11
    2a84:	09 c0       	rjmp	.+18     	; 0x2a98 <gc_gcode_parser+0x5a>
		return(TG_QUIT);
	} 
	if (block[0] == '/') { 					// ignore block delete
    2a86:	8f 32       	cpi	r24, 0x2F	; 47
    2a88:	31 f0       	breq	.+12     	; 0x2a96 <gc_gcode_parser+0x58>
		return(TG_OK);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2a8a:	ce 01       	movw	r24, r28
    2a8c:	0e 94 18 10 	call	0x2030	; 0x2030 <gc_execute_block>
    2a90:	80 93 0e 21 	sts	0x210E, r24
    2a94:	01 c0       	rjmp	.+2      	; 0x2a98 <gc_gcode_parser+0x5a>
#ifdef __ECHO
	_gc_print_status(gc.status, block);
#endif
	return (gc.status);
    2a96:	80 e0       	ldi	r24, 0x00	; 0
}
    2a98:	df 91       	pop	r29
    2a9a:	cf 91       	pop	r28
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	08 95       	ret

00002aa2 <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2aa2:	cf 92       	push	r12
    2aa4:	df 92       	push	r13
    2aa6:	ef 92       	push	r14
    2aa8:	ff 92       	push	r15
    2aaa:	0f 93       	push	r16
    2aac:	1f 93       	push	r17
    2aae:	cf 93       	push	r28
    2ab0:	df 93       	push	r29
    2ab2:	c1 eb       	ldi	r28, 0xB1	; 177
    2ab4:	d2 e2       	ldi	r29, 0x22	; 34
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2ab6:	68 81       	ld	r22, Y
    2ab8:	70 e0       	ldi	r23, 0x00	; 0
    2aba:	88 27       	eor	r24, r24
    2abc:	77 fd       	sbrc	r23, 7
    2abe:	80 95       	com	r24
    2ac0:	98 2f       	mov	r25, r24
    2ac2:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    2ac6:	9b 01       	movw	r18, r22
    2ac8:	ac 01       	movw	r20, r24
    2aca:	6f 81       	ldd	r22, Y+7	; 0x07
    2acc:	78 85       	ldd	r23, Y+8	; 0x08
    2ace:	89 85       	ldd	r24, Y+9	; 0x09
    2ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad2:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    2ad6:	9b 01       	movw	r18, r22
    2ad8:	ac 01       	movw	r20, r24
    2ada:	60 e0       	ldi	r22, 0x00	; 0
    2adc:	70 e0       	ldi	r23, 0x00	; 0
    2ade:	84 eb       	ldi	r24, 0xB4	; 180
    2ae0:	93 e4       	ldi	r25, 0x43	; 67
    2ae2:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    2ae6:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ae8:	3c 85       	ldd	r19, Y+12	; 0x0c
    2aea:	4d 85       	ldd	r20, Y+13	; 0x0d
    2aec:	5e 85       	ldd	r21, Y+14	; 0x0e
    2aee:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    2af2:	6b 8b       	std	Y+19, r22	; 0x13
    2af4:	7c 8b       	std	Y+20, r23	; 0x14
    2af6:	8d 8b       	std	Y+21, r24	; 0x15
    2af8:	9e 8b       	std	Y+22, r25	; 0x16
    2afa:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    2afc:	83 e2       	ldi	r24, 0x23	; 35
    2afe:	c1 31       	cpi	r28, 0x11	; 17
    2b00:	d8 07       	cpc	r29, r24
    2b02:	c9 f6       	brne	.-78     	; 0x2ab6 <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    2b04:	00 91 b1 22 	lds	r16, 0x22B1
    2b08:	10 e0       	ldi	r17, 0x00	; 0
    2b0a:	b8 01       	movw	r22, r16
    2b0c:	88 27       	eor	r24, r24
    2b0e:	77 fd       	sbrc	r23, 7
    2b10:	80 95       	com	r24
    2b12:	98 2f       	mov	r25, r24
    2b14:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    2b18:	9b 01       	movw	r18, r22
    2b1a:	ac 01       	movw	r20, r24
    2b1c:	60 91 b8 22 	lds	r22, 0x22B8
    2b20:	70 91 b9 22 	lds	r23, 0x22B9
    2b24:	80 91 ba 22 	lds	r24, 0x22BA
    2b28:	90 91 bb 22 	lds	r25, 0x22BB
    2b2c:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    2b30:	9b 01       	movw	r18, r22
    2b32:	ac 01       	movw	r20, r24
    2b34:	60 e0       	ldi	r22, 0x00	; 0
    2b36:	70 e0       	ldi	r23, 0x00	; 0
    2b38:	84 eb       	ldi	r24, 0xB4	; 180
    2b3a:	93 e4       	ldi	r25, 0x43	; 67
    2b3c:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    2b40:	6b 01       	movw	r12, r22
    2b42:	7c 01       	movw	r14, r24
    2b44:	80 91 b6 22 	lds	r24, 0x22B6
    2b48:	90 91 b7 22 	lds	r25, 0x22B7
    2b4c:	08 9f       	mul	r16, r24
    2b4e:	b0 01       	movw	r22, r0
    2b50:	09 9f       	mul	r16, r25
    2b52:	70 0d       	add	r23, r0
    2b54:	18 9f       	mul	r17, r24
    2b56:	70 0d       	add	r23, r0
    2b58:	11 24       	eor	r1, r1
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	0e 94 d7 40 	call	0x81ae	; 0x81ae <__floatunsisf>
    2b62:	a7 01       	movw	r20, r14
    2b64:	96 01       	movw	r18, r12
    2b66:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    2b6a:	60 93 a9 22 	sts	0x22A9, r22
    2b6e:	70 93 aa 22 	sts	0x22AA, r23
    2b72:	80 93 ab 22 	sts	0x22AB, r24
    2b76:	90 93 ac 22 	sts	0x22AC, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    2b7a:	80 91 b4 22 	lds	r24, 0x22B4
    2b7e:	90 91 b5 22 	lds	r25, 0x22B5
    2b82:	08 9f       	mul	r16, r24
    2b84:	b0 01       	movw	r22, r0
    2b86:	09 9f       	mul	r16, r25
    2b88:	70 0d       	add	r23, r0
    2b8a:	18 9f       	mul	r17, r24
    2b8c:	70 0d       	add	r23, r0
    2b8e:	11 24       	eor	r1, r1
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 d7 40 	call	0x81ae	; 0x81ae <__floatunsisf>
    2b98:	a7 01       	movw	r20, r14
    2b9a:	96 01       	movw	r18, r12
    2b9c:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    2ba0:	60 93 ad 22 	sts	0x22AD, r22
    2ba4:	70 93 ae 22 	sts	0x22AE, r23
    2ba8:	80 93 af 22 	sts	0x22AF, r24
    2bac:	90 93 b0 22 	sts	0x22B0, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    2bb0:	df 91       	pop	r29
    2bb2:	cf 91       	pop	r28
    2bb4:	1f 91       	pop	r17
    2bb6:	0f 91       	pop	r16
    2bb8:	ff 90       	pop	r15
    2bba:	ef 90       	pop	r14
    2bbc:	df 90       	pop	r13
    2bbe:	cf 90       	pop	r12
    2bc0:	08 95       	ret

00002bc2 <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    2bc2:	e3 ea       	ldi	r30, 0xA3	; 163
    2bc4:	f2 e2       	ldi	r31, 0x22	; 34
    2bc6:	84 e6       	ldi	r24, 0x64	; 100
    2bc8:	80 93 a3 22 	sts	0x22A3, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2bcc:	8d ec       	ldi	r24, 0xCD	; 205
    2bce:	9c ec       	ldi	r25, 0xCC	; 204
    2bd0:	ac e4       	ldi	r26, 0x4C	; 76
    2bd2:	bd e3       	ldi	r27, 0x3D	; 61
    2bd4:	80 93 a5 22 	sts	0x22A5, r24
    2bd8:	90 93 a6 22 	sts	0x22A6, r25
    2bdc:	a0 93 a7 22 	sts	0x22A7, r26
    2be0:	b0 93 a8 22 	sts	0x22A8, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2be4:	8c ed       	ldi	r24, 0xDC	; 220
    2be6:	95 e0       	ldi	r25, 0x05	; 5
    2be8:	80 93 b4 22 	sts	0x22B4, r24
    2bec:	90 93 b5 22 	sts	0x22B5, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2bf0:	80 93 cc 22 	sts	0x22CC, r24
    2bf4:	90 93 cd 22 	sts	0x22CD, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2bf8:	80 93 e4 22 	sts	0x22E4, r24
    2bfc:	90 93 e5 22 	sts	0x22E5, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2c00:	80 93 fc 22 	sts	0x22FC, r24
    2c04:	90 93 fd 22 	sts	0x22FD, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2c08:	80 93 b6 22 	sts	0x22B6, r24
    2c0c:	90 93 b7 22 	sts	0x22B7, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2c10:	80 93 ce 22 	sts	0x22CE, r24
    2c14:	90 93 cf 22 	sts	0x22CF, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2c18:	80 93 e6 22 	sts	0x22E6, r24
    2c1c:	90 93 e7 22 	sts	0x22E7, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2c20:	80 93 fe 22 	sts	0x22FE, r24
    2c24:	90 93 ff 22 	sts	0x22FF, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2c28:	86 e6       	ldi	r24, 0x66	; 102
    2c2a:	96 e6       	ldi	r25, 0x66	; 102
    2c2c:	a6 ee       	ldi	r26, 0xE6	; 230
    2c2e:	bf e3       	ldi	r27, 0x3F	; 63
    2c30:	80 93 b8 22 	sts	0x22B8, r24
    2c34:	90 93 b9 22 	sts	0x22B9, r25
    2c38:	a0 93 ba 22 	sts	0x22BA, r26
    2c3c:	b0 93 bb 22 	sts	0x22BB, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2c40:	80 93 d0 22 	sts	0x22D0, r24
    2c44:	90 93 d1 22 	sts	0x22D1, r25
    2c48:	a0 93 d2 22 	sts	0x22D2, r26
    2c4c:	b0 93 d3 22 	sts	0x22D3, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2c50:	80 93 e8 22 	sts	0x22E8, r24
    2c54:	90 93 e9 22 	sts	0x22E9, r25
    2c58:	a0 93 ea 22 	sts	0x22EA, r26
    2c5c:	b0 93 eb 22 	sts	0x22EB, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2c60:	80 93 00 23 	sts	0x2300, r24
    2c64:	90 93 01 23 	sts	0x2301, r25
    2c68:	a0 93 02 23 	sts	0x2302, r26
    2c6c:	b0 93 03 23 	sts	0x2303, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    2c70:	8c e5       	ldi	r24, 0x5C	; 92
    2c72:	9f e8       	ldi	r25, 0x8F	; 143
    2c74:	a2 ea       	ldi	r26, 0xA2	; 162
    2c76:	bf e3       	ldi	r27, 0x3F	; 63
    2c78:	80 93 bc 22 	sts	0x22BC, r24
    2c7c:	90 93 bd 22 	sts	0x22BD, r25
    2c80:	a0 93 be 22 	sts	0x22BE, r26
    2c84:	b0 93 bf 22 	sts	0x22BF, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    2c88:	80 93 d4 22 	sts	0x22D4, r24
    2c8c:	90 93 d5 22 	sts	0x22D5, r25
    2c90:	a0 93 d6 22 	sts	0x22D6, r26
    2c94:	b0 93 d7 22 	sts	0x22D7, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    2c98:	80 93 ec 22 	sts	0x22EC, r24
    2c9c:	90 93 ed 22 	sts	0x22ED, r25
    2ca0:	a0 93 ee 22 	sts	0x22EE, r26
    2ca4:	b0 93 ef 22 	sts	0x22EF, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    2ca8:	80 93 04 23 	sts	0x2304, r24
    2cac:	90 93 05 23 	sts	0x2305, r25
    2cb0:	a0 93 06 23 	sts	0x2306, r26
    2cb4:	b0 93 07 23 	sts	0x2307, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	a8 ec       	ldi	r26, 0xC8	; 200
    2cbe:	b3 e4       	ldi	r27, 0x43	; 67
    2cc0:	80 93 c0 22 	sts	0x22C0, r24
    2cc4:	90 93 c1 22 	sts	0x22C1, r25
    2cc8:	a0 93 c2 22 	sts	0x22C2, r26
    2ccc:	b0 93 c3 22 	sts	0x22C3, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    2cd0:	80 93 d8 22 	sts	0x22D8, r24
    2cd4:	90 93 d9 22 	sts	0x22D9, r25
    2cd8:	a0 93 da 22 	sts	0x22DA, r26
    2cdc:	b0 93 db 22 	sts	0x22DB, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	a6 e9       	ldi	r26, 0x96	; 150
    2ce6:	b3 e4       	ldi	r27, 0x43	; 67
    2ce8:	80 93 f0 22 	sts	0x22F0, r24
    2cec:	90 93 f1 22 	sts	0x22F1, r25
    2cf0:	a0 93 f2 22 	sts	0x22F2, r26
    2cf4:	b0 93 f3 22 	sts	0x22F3, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	a0 e8       	ldi	r26, 0x80	; 128
    2cfe:	bf eb       	ldi	r27, 0xBF	; 191
    2d00:	80 93 08 23 	sts	0x2308, r24
    2d04:	90 93 09 23 	sts	0x2309, r25
    2d08:	a0 93 0a 23 	sts	0x230A, r26
    2d0c:	b0 93 0b 23 	sts	0x230B, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    2d10:	88 e0       	ldi	r24, 0x08	; 8
    2d12:	80 93 b1 22 	sts	0x22B1, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    2d16:	80 93 c9 22 	sts	0x22C9, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    2d1a:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A].microstep = A_MICROSTEPS;
    2d1c:	80 93 f9 22 	sts	0x22F9, r24

	cfg.a[X].polarity = X_POLARITY;
    2d20:	10 92 b3 22 	sts	0x22B3, r1
	cfg.a[Y].polarity = Y_POLARITY;
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	80 93 cb 22 	sts	0x22CB, r24
	cfg.a[Z].polarity = Z_POLARITY;
    2d2a:	10 92 e3 22 	sts	0x22E3, r1
	cfg.a[A].polarity = A_POLARITY;
    2d2e:	10 92 fb 22 	sts	0x22FB, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    2d32:	80 93 c8 22 	sts	0x22C8, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    2d36:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    2d38:	80 93 f8 22 	sts	0x22F8, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    2d3c:	10 92 10 23 	sts	0x2310, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    2d40:	80 93 b2 22 	sts	0x22B2, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    2d44:	80 93 ca 22 	sts	0x22CA, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    2d48:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    2d4a:	80 93 fa 22 	sts	0x22FA, r24

	_cfg_computed();		// generate computed values from the above
    2d4e:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_cfg_computed>
}
    2d52:	08 95       	ret

00002d54 <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2d54:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <cfg_reset>
}
    2d58:	08 95       	ret

00002d5a <_cfg_print_status>:
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    2d5a:	8c 30       	cpi	r24, 0x0C	; 12
    2d5c:	31 f1       	breq	.+76     	; 0x2daa <_cfg_print_status+0x50>
    2d5e:	8d 30       	cpi	r24, 0x0D	; 13
    2d60:	30 f4       	brcc	.+12     	; 0x2d6e <_cfg_print_status+0x14>
    2d62:	82 30       	cpi	r24, 0x02	; 2
    2d64:	59 f0       	breq	.+22     	; 0x2d7c <_cfg_print_status+0x22>
    2d66:	8b 30       	cpi	r24, 0x0B	; 11
    2d68:	09 f0       	breq	.+2      	; 0x2d6c <_cfg_print_status+0x12>
    2d6a:	45 c0       	rjmp	.+138    	; 0x2df6 <_cfg_print_status+0x9c>
    2d6c:	0c c0       	rjmp	.+24     	; 0x2d86 <_cfg_print_status+0x2c>
    2d6e:	81 31       	cpi	r24, 0x11	; 17
    2d70:	09 f1       	breq	.+66     	; 0x2db4 <_cfg_print_status+0x5a>
    2d72:	83 31       	cpi	r24, 0x13	; 19
    2d74:	81 f1       	breq	.+96     	; 0x2dd6 <_cfg_print_status+0x7c>
    2d76:	80 31       	cpi	r24, 0x10	; 16
    2d78:	f1 f5       	brne	.+124    	; 0x2df6 <_cfg_print_status+0x9c>
    2d7a:	12 c0       	rjmp	.+36     	; 0x2da0 <_cfg_print_status+0x46>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_EAGAIN: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    2d7c:	00 d0       	rcall	.+0      	; 0x2d7e <_cfg_print_status+0x24>
    2d7e:	0f 92       	push	r0
    2d80:	85 e1       	ldi	r24, 0x15	; 21
    2d82:	94 e0       	ldi	r25, 0x04	; 4
    2d84:	1b c0       	rjmp	.+54     	; 0x2dbc <_cfg_print_status+0x62>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    2d86:	0f 92       	push	r0
    2d88:	0f 92       	push	r0
    2d8a:	8f ef       	ldi	r24, 0xFF	; 255
    2d8c:	93 e0       	ldi	r25, 0x03	; 3
    2d8e:	ed b7       	in	r30, 0x3d	; 61
    2d90:	fe b7       	in	r31, 0x3e	; 62
    2d92:	81 83       	std	Z+1, r24	; 0x01
    2d94:	92 83       	std	Z+2, r25	; 0x02
    2d96:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	08 95       	ret
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2da0:	00 d0       	rcall	.+0      	; 0x2da2 <_cfg_print_status+0x48>
    2da2:	0f 92       	push	r0
    2da4:	88 ee       	ldi	r24, 0xE8	; 232
    2da6:	93 e0       	ldi	r25, 0x03	; 3
    2da8:	09 c0       	rjmp	.+18     	; 0x2dbc <_cfg_print_status+0x62>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    2daa:	00 d0       	rcall	.+0      	; 0x2dac <_cfg_print_status+0x52>
    2dac:	0f 92       	push	r0
    2dae:	8e ec       	ldi	r24, 0xCE	; 206
    2db0:	93 e0       	ldi	r25, 0x03	; 3
    2db2:	04 c0       	rjmp	.+8      	; 0x2dbc <_cfg_print_status+0x62>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2db4:	00 d0       	rcall	.+0      	; 0x2db6 <_cfg_print_status+0x5c>
    2db6:	0f 92       	push	r0
    2db8:	84 eb       	ldi	r24, 0xB4	; 180
    2dba:	93 e0       	ldi	r25, 0x03	; 3
    2dbc:	ed b7       	in	r30, 0x3d	; 61
    2dbe:	fe b7       	in	r31, 0x3e	; 62
    2dc0:	81 83       	std	Z+1, r24	; 0x01
    2dc2:	92 83       	std	Z+2, r25	; 0x02
    2dc4:	63 83       	std	Z+3, r22	; 0x03
    2dc6:	74 83       	std	Z+4, r23	; 0x04
    2dc8:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	08 95       	ret
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    2dd6:	00 d0       	rcall	.+0      	; 0x2dd8 <_cfg_print_status+0x7e>
    2dd8:	0f 92       	push	r0
    2dda:	89 e9       	ldi	r24, 0x99	; 153
    2ddc:	93 e0       	ldi	r25, 0x03	; 3
    2dde:	ed b7       	in	r30, 0x3d	; 61
    2de0:	fe b7       	in	r31, 0x3e	; 62
    2de2:	81 83       	std	Z+1, r24	; 0x01
    2de4:	92 83       	std	Z+2, r25	; 0x02
    2de6:	63 83       	std	Z+3, r22	; 0x03
    2de8:	74 83       	std	Z+4, r23	; 0x04
    2dea:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	08 95       	ret

00002df8 <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    2df8:	ef 92       	push	r14
    2dfa:	ff 92       	push	r15
    2dfc:	0f 93       	push	r16
    2dfe:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    2e00:	e8 2e       	mov	r14, r24
    2e02:	ff 24       	eor	r15, r15
    2e04:	87 01       	movw	r16, r14
    2e06:	00 0f       	add	r16, r16
    2e08:	11 1f       	adc	r17, r17
    2e0a:	f8 01       	movw	r30, r16
    2e0c:	ed 5b       	subi	r30, 0xBD	; 189
    2e0e:	fd 4f       	sbci	r31, 0xFD	; 253
    2e10:	25 91       	lpm	r18, Z+
    2e12:	34 91       	lpm	r19, Z+
    2e14:	00 d0       	rcall	.+0      	; 0x2e16 <_cfg_dump_axis+0x1e>
    2e16:	0f 92       	push	r0
    2e18:	88 e3       	ldi	r24, 0x38	; 56
    2e1a:	96 e0       	ldi	r25, 0x06	; 6
    2e1c:	ad b7       	in	r26, 0x3d	; 61
    2e1e:	be b7       	in	r27, 0x3e	; 62
    2e20:	11 96       	adiw	r26, 0x01	; 1
    2e22:	8d 93       	st	X+, r24
    2e24:	9c 93       	st	X, r25
    2e26:	12 97       	sbiw	r26, 0x02	; 2
    2e28:	13 96       	adiw	r26, 0x03	; 3
    2e2a:	2d 93       	st	X+, r18
    2e2c:	3c 93       	st	X, r19
    2e2e:	14 97       	sbiw	r26, 0x04	; 4
    2e30:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	96 e0       	ldi	r25, 0x06	; 6
    2e38:	ed b7       	in	r30, 0x3d	; 61
    2e3a:	fe b7       	in	r31, 0x3e	; 62
    2e3c:	81 83       	std	Z+1, r24	; 0x01
    2e3e:	92 83       	std	Z+2, r25	; 0x02
    2e40:	0e 0d       	add	r16, r14
    2e42:	1f 1d       	adc	r17, r15
    2e44:	83 e0       	ldi	r24, 0x03	; 3
    2e46:	00 0f       	add	r16, r16
    2e48:	11 1f       	adc	r17, r17
    2e4a:	8a 95       	dec	r24
    2e4c:	e1 f7       	brne	.-8      	; 0x2e46 <_cfg_dump_axis+0x4e>
    2e4e:	0d 55       	subi	r16, 0x5D	; 93
    2e50:	1d 4d       	sbci	r17, 0xDD	; 221
    2e52:	d8 01       	movw	r26, r16
    2e54:	51 96       	adiw	r26, 0x11	; 17
    2e56:	8d 91       	ld	r24, X+
    2e58:	9c 91       	ld	r25, X
    2e5a:	52 97       	sbiw	r26, 0x12	; 18
    2e5c:	83 83       	std	Z+3, r24	; 0x03
    2e5e:	94 83       	std	Z+4, r25	; 0x04
    2e60:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    2e64:	88 ec       	ldi	r24, 0xC8	; 200
    2e66:	95 e0       	ldi	r25, 0x05	; 5
    2e68:	ed b7       	in	r30, 0x3d	; 61
    2e6a:	fe b7       	in	r31, 0x3e	; 62
    2e6c:	81 83       	std	Z+1, r24	; 0x01
    2e6e:	92 83       	std	Z+2, r25	; 0x02
    2e70:	d8 01       	movw	r26, r16
    2e72:	53 96       	adiw	r26, 0x13	; 19
    2e74:	8d 91       	ld	r24, X+
    2e76:	9c 91       	ld	r25, X
    2e78:	54 97       	sbiw	r26, 0x14	; 20
    2e7a:	83 83       	std	Z+3, r24	; 0x03
    2e7c:	94 83       	std	Z+4, r25	; 0x04
    2e7e:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    2e82:	ed b7       	in	r30, 0x3d	; 61
    2e84:	fe b7       	in	r31, 0x3e	; 62
    2e86:	31 96       	adiw	r30, 0x01	; 1
    2e88:	85 e9       	ldi	r24, 0x95	; 149
    2e8a:	95 e0       	ldi	r25, 0x05	; 5
    2e8c:	ad b7       	in	r26, 0x3d	; 61
    2e8e:	be b7       	in	r27, 0x3e	; 62
    2e90:	11 96       	adiw	r26, 0x01	; 1
    2e92:	8d 93       	st	X+, r24
    2e94:	9c 93       	st	X, r25
    2e96:	12 97       	sbiw	r26, 0x02	; 2
    2e98:	d8 01       	movw	r26, r16
    2e9a:	1e 96       	adiw	r26, 0x0e	; 14
    2e9c:	8c 91       	ld	r24, X
    2e9e:	82 83       	std	Z+2, r24	; 0x02
    2ea0:	13 82       	std	Z+3, r1	; 0x03
    2ea2:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    2ea6:	0f 92       	push	r0
    2ea8:	0f 92       	push	r0
    2eaa:	8e e5       	ldi	r24, 0x5E	; 94
    2eac:	95 e0       	ldi	r25, 0x05	; 5
    2eae:	ed b7       	in	r30, 0x3d	; 61
    2eb0:	fe b7       	in	r31, 0x3e	; 62
    2eb2:	81 83       	std	Z+1, r24	; 0x01
    2eb4:	92 83       	std	Z+2, r25	; 0x02
    2eb6:	f8 01       	movw	r30, r16
    2eb8:	85 89       	ldd	r24, Z+21	; 0x15
    2eba:	96 89       	ldd	r25, Z+22	; 0x16
    2ebc:	a7 89       	ldd	r26, Z+23	; 0x17
    2ebe:	b0 8d       	ldd	r27, Z+24	; 0x18
    2ec0:	ed b7       	in	r30, 0x3d	; 61
    2ec2:	fe b7       	in	r31, 0x3e	; 62
    2ec4:	83 83       	std	Z+3, r24	; 0x03
    2ec6:	94 83       	std	Z+4, r25	; 0x04
    2ec8:	a5 83       	std	Z+5, r26	; 0x05
    2eca:	b6 83       	std	Z+6, r27	; 0x06
    2ecc:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    2ed0:	8b e2       	ldi	r24, 0x2B	; 43
    2ed2:	95 e0       	ldi	r25, 0x05	; 5
    2ed4:	ad b7       	in	r26, 0x3d	; 61
    2ed6:	be b7       	in	r27, 0x3e	; 62
    2ed8:	11 96       	adiw	r26, 0x01	; 1
    2eda:	8d 93       	st	X+, r24
    2edc:	9c 93       	st	X, r25
    2ede:	12 97       	sbiw	r26, 0x02	; 2
    2ee0:	f8 01       	movw	r30, r16
    2ee2:	81 8d       	ldd	r24, Z+25	; 0x19
    2ee4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ee6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    2ee8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    2eea:	ed b7       	in	r30, 0x3d	; 61
    2eec:	fe b7       	in	r31, 0x3e	; 62
    2eee:	83 83       	std	Z+3, r24	; 0x03
    2ef0:	94 83       	std	Z+4, r25	; 0x04
    2ef2:	a5 83       	std	Z+5, r26	; 0x05
    2ef4:	b6 83       	std	Z+6, r27	; 0x06
    2ef6:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    2efa:	88 ef       	ldi	r24, 0xF8	; 248
    2efc:	94 e0       	ldi	r25, 0x04	; 4
    2efe:	ad b7       	in	r26, 0x3d	; 61
    2f00:	be b7       	in	r27, 0x3e	; 62
    2f02:	11 96       	adiw	r26, 0x01	; 1
    2f04:	8d 93       	st	X+, r24
    2f06:	9c 93       	st	X, r25
    2f08:	12 97       	sbiw	r26, 0x02	; 2
    2f0a:	f8 01       	movw	r30, r16
    2f0c:	85 8d       	ldd	r24, Z+29	; 0x1d
    2f0e:	96 8d       	ldd	r25, Z+30	; 0x1e
    2f10:	a7 8d       	ldd	r26, Z+31	; 0x1f
    2f12:	b0 a1       	ldd	r27, Z+32	; 0x20
    2f14:	ed b7       	in	r30, 0x3d	; 61
    2f16:	fe b7       	in	r31, 0x3e	; 62
    2f18:	83 83       	std	Z+3, r24	; 0x03
    2f1a:	94 83       	std	Z+4, r25	; 0x04
    2f1c:	a5 83       	std	Z+5, r26	; 0x05
    2f1e:	b6 83       	std	Z+6, r27	; 0x06
    2f20:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	ed b7       	in	r30, 0x3d	; 61
    2f2a:	fe b7       	in	r31, 0x3e	; 62
    2f2c:	31 96       	adiw	r30, 0x01	; 1
    2f2e:	87 ec       	ldi	r24, 0xC7	; 199
    2f30:	94 e0       	ldi	r25, 0x04	; 4
    2f32:	ad b7       	in	r26, 0x3d	; 61
    2f34:	be b7       	in	r27, 0x3e	; 62
    2f36:	11 96       	adiw	r26, 0x01	; 1
    2f38:	8d 93       	st	X+, r24
    2f3a:	9c 93       	st	X, r25
    2f3c:	12 97       	sbiw	r26, 0x02	; 2
    2f3e:	d8 01       	movw	r26, r16
    2f40:	95 96       	adiw	r26, 0x25	; 37
    2f42:	8c 91       	ld	r24, X
    2f44:	82 83       	std	Z+2, r24	; 0x02
    2f46:	13 82       	std	Z+3, r1	; 0x03
    2f48:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    2f4c:	ed b7       	in	r30, 0x3d	; 61
    2f4e:	fe b7       	in	r31, 0x3e	; 62
    2f50:	31 96       	adiw	r30, 0x01	; 1
    2f52:	86 e9       	ldi	r24, 0x96	; 150
    2f54:	94 e0       	ldi	r25, 0x04	; 4
    2f56:	ad b7       	in	r26, 0x3d	; 61
    2f58:	be b7       	in	r27, 0x3e	; 62
    2f5a:	11 96       	adiw	r26, 0x01	; 1
    2f5c:	8d 93       	st	X+, r24
    2f5e:	9c 93       	st	X, r25
    2f60:	12 97       	sbiw	r26, 0x02	; 2
    2f62:	d8 01       	movw	r26, r16
    2f64:	1f 96       	adiw	r26, 0x0f	; 15
    2f66:	8c 91       	ld	r24, X
    2f68:	82 83       	std	Z+2, r24	; 0x02
    2f6a:	13 82       	std	Z+3, r1	; 0x03
    2f6c:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    2f70:	ed b7       	in	r30, 0x3d	; 61
    2f72:	fe b7       	in	r31, 0x3e	; 62
    2f74:	31 96       	adiw	r30, 0x01	; 1
    2f76:	86 e6       	ldi	r24, 0x66	; 102
    2f78:	94 e0       	ldi	r25, 0x04	; 4
    2f7a:	ad b7       	in	r26, 0x3d	; 61
    2f7c:	be b7       	in	r27, 0x3e	; 62
    2f7e:	11 96       	adiw	r26, 0x01	; 1
    2f80:	8d 93       	st	X+, r24
    2f82:	9c 93       	st	X, r25
    2f84:	12 97       	sbiw	r26, 0x02	; 2
    2f86:	d8 01       	movw	r26, r16
    2f88:	50 96       	adiw	r26, 0x10	; 16
    2f8a:	8c 91       	ld	r24, X
    2f8c:	82 83       	std	Z+2, r24	; 0x02
    2f8e:	13 82       	std	Z+3, r1	; 0x03
    2f90:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    2f94:	0f 92       	push	r0
    2f96:	0f 92       	push	r0
    2f98:	82 e3       	ldi	r24, 0x32	; 50
    2f9a:	94 e0       	ldi	r25, 0x04	; 4
    2f9c:	ed b7       	in	r30, 0x3d	; 61
    2f9e:	fe b7       	in	r31, 0x3e	; 62
    2fa0:	81 83       	std	Z+1, r24	; 0x01
    2fa2:	92 83       	std	Z+2, r25	; 0x02
    2fa4:	f8 01       	movw	r30, r16
    2fa6:	81 a1       	ldd	r24, Z+33	; 0x21
    2fa8:	92 a1       	ldd	r25, Z+34	; 0x22
    2faa:	a3 a1       	ldd	r26, Z+35	; 0x23
    2fac:	b4 a1       	ldd	r27, Z+36	; 0x24
    2fae:	ed b7       	in	r30, 0x3d	; 61
    2fb0:	fe b7       	in	r31, 0x3e	; 62
    2fb2:	83 83       	std	Z+3, r24	; 0x03
    2fb4:	94 83       	std	Z+4, r25	; 0x04
    2fb6:	a5 83       	std	Z+5, r26	; 0x05
    2fb8:	b6 83       	std	Z+6, r27	; 0x06
    2fba:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
    2fbe:	8d b7       	in	r24, 0x3d	; 61
    2fc0:	9e b7       	in	r25, 0x3e	; 62
    2fc2:	06 96       	adiw	r24, 0x06	; 6
    2fc4:	8d bf       	out	0x3d, r24	; 61
    2fc6:	9e bf       	out	0x3e, r25	; 62
}
    2fc8:	1f 91       	pop	r17
    2fca:	0f 91       	pop	r16
    2fcc:	ff 90       	pop	r15
    2fce:	ef 90       	pop	r14
    2fd0:	08 95       	ret

00002fd2 <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    2fd2:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    2fd4:	00 d0       	rcall	.+0      	; 0x2fd6 <cfg_dump+0x4>
    2fd6:	0f 92       	push	r0
    2fd8:	ed b7       	in	r30, 0x3d	; 61
    2fda:	fe b7       	in	r31, 0x3e	; 62
    2fdc:	31 96       	adiw	r30, 0x01	; 1
    2fde:	8c ef       	ldi	r24, 0xFC	; 252
    2fe0:	96 e0       	ldi	r25, 0x06	; 6
    2fe2:	ad b7       	in	r26, 0x3d	; 61
    2fe4:	be b7       	in	r27, 0x3e	; 62
    2fe6:	11 96       	adiw	r26, 0x01	; 1
    2fe8:	8d 93       	st	X+, r24
    2fea:	9c 93       	st	X, r25
    2fec:	12 97       	sbiw	r26, 0x02	; 2
    2fee:	80 91 a3 22 	lds	r24, 0x22A3
    2ff2:	82 83       	std	Z+2, r24	; 0x02
    2ff4:	13 82       	std	Z+3, r1	; 0x03
    2ff6:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    2ffa:	0f 90       	pop	r0
    2ffc:	0f 90       	pop	r0
    2ffe:	85 ed       	ldi	r24, 0xD5	; 213
    3000:	96 e0       	ldi	r25, 0x06	; 6
    3002:	ed b7       	in	r30, 0x3d	; 61
    3004:	fe b7       	in	r31, 0x3e	; 62
    3006:	81 83       	std	Z+1, r24	; 0x01
    3008:	92 83       	std	Z+2, r25	; 0x02
    300a:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    300e:	00 d0       	rcall	.+0      	; 0x3010 <cfg_dump+0x3e>
    3010:	0f 92       	push	r0
    3012:	8b ea       	ldi	r24, 0xAB	; 171
    3014:	96 e0       	ldi	r25, 0x06	; 6
    3016:	ad b7       	in	r26, 0x3d	; 61
    3018:	be b7       	in	r27, 0x3e	; 62
    301a:	11 96       	adiw	r26, 0x01	; 1
    301c:	8d 93       	st	X+, r24
    301e:	9c 93       	st	X, r25
    3020:	12 97       	sbiw	r26, 0x02	; 2
    3022:	80 91 a5 22 	lds	r24, 0x22A5
    3026:	90 91 a6 22 	lds	r25, 0x22A6
    302a:	a0 91 a7 22 	lds	r26, 0x22A7
    302e:	b0 91 a8 22 	lds	r27, 0x22A8
    3032:	ed b7       	in	r30, 0x3d	; 61
    3034:	fe b7       	in	r31, 0x3e	; 62
    3036:	83 83       	std	Z+3, r24	; 0x03
    3038:	94 83       	std	Z+4, r25	; 0x04
    303a:	a5 83       	std	Z+5, r26	; 0x05
    303c:	b6 83       	std	Z+6, r27	; 0x06
    303e:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    3042:	81 e8       	ldi	r24, 0x81	; 129
    3044:	96 e0       	ldi	r25, 0x06	; 6
    3046:	ad b7       	in	r26, 0x3d	; 61
    3048:	be b7       	in	r27, 0x3e	; 62
    304a:	11 96       	adiw	r26, 0x01	; 1
    304c:	8d 93       	st	X+, r24
    304e:	9c 93       	st	X, r25
    3050:	12 97       	sbiw	r26, 0x02	; 2
    3052:	80 91 ad 22 	lds	r24, 0x22AD
    3056:	90 91 ae 22 	lds	r25, 0x22AE
    305a:	a0 91 af 22 	lds	r26, 0x22AF
    305e:	b0 91 b0 22 	lds	r27, 0x22B0
    3062:	ed b7       	in	r30, 0x3d	; 61
    3064:	fe b7       	in	r31, 0x3e	; 62
    3066:	83 83       	std	Z+3, r24	; 0x03
    3068:	94 83       	std	Z+4, r25	; 0x04
    306a:	a5 83       	std	Z+5, r26	; 0x05
    306c:	b6 83       	std	Z+6, r27	; 0x06
    306e:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    3072:	86 e5       	ldi	r24, 0x56	; 86
    3074:	96 e0       	ldi	r25, 0x06	; 6
    3076:	ad b7       	in	r26, 0x3d	; 61
    3078:	be b7       	in	r27, 0x3e	; 62
    307a:	11 96       	adiw	r26, 0x01	; 1
    307c:	8d 93       	st	X+, r24
    307e:	9c 93       	st	X, r25
    3080:	12 97       	sbiw	r26, 0x02	; 2
    3082:	80 91 a9 22 	lds	r24, 0x22A9
    3086:	90 91 aa 22 	lds	r25, 0x22AA
    308a:	a0 91 ab 22 	lds	r26, 0x22AB
    308e:	b0 91 ac 22 	lds	r27, 0x22AC
    3092:	ed b7       	in	r30, 0x3d	; 61
    3094:	fe b7       	in	r31, 0x3e	; 62
    3096:	83 83       	std	Z+3, r24	; 0x03
    3098:	94 83       	std	Z+4, r25	; 0x04
    309a:	a5 83       	std	Z+5, r26	; 0x05
    309c:	b6 83       	std	Z+6, r27	; 0x06
    309e:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
    30a2:	10 e0       	ldi	r17, 0x00	; 0
    30a4:	8d b7       	in	r24, 0x3d	; 61
    30a6:	9e b7       	in	r25, 0x3e	; 62
    30a8:	06 96       	adiw	r24, 0x06	; 6
    30aa:	8d bf       	out	0x3d, r24	; 61
    30ac:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
		_cfg_dump_axis(axis);
    30ae:	81 2f       	mov	r24, r17
    30b0:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    30b4:	1f 5f       	subi	r17, 0xFF	; 255
    30b6:	14 30       	cpi	r17, 0x04	; 4
    30b8:	d1 f7       	brne	.-12     	; 0x30ae <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    30ba:	1f 91       	pop	r17
    30bc:	08 95       	ret

000030be <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    30be:	80 e0       	ldi	r24, 0x00	; 0
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	63 ea       	ldi	r22, 0xA3	; 163
    30c4:	72 e2       	ldi	r23, 0x22	; 34
    30c6:	4e e6       	ldi	r20, 0x6E	; 110
    30c8:	50 e0       	ldi	r21, 0x00	; 0
    30ca:	0e 94 a0 29 	call	0x5340	; 0x5340 <memcpy_to_eeprom_with_checksum>
}
    30ce:	08 95       	ret

000030d0 <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    30d8:	84 36       	cpi	r24, 0x64	; 100
    30da:	19 f0       	breq	.+6      	; 0x30e2 <cfg_read+0x12>
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	0d c0       	rjmp	.+26     	; 0x30fc <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    30e2:	83 ea       	ldi	r24, 0xA3	; 163
    30e4:	92 e2       	ldi	r25, 0x22	; 34
    30e6:	60 e0       	ldi	r22, 0x00	; 0
    30e8:	70 e0       	ldi	r23, 0x00	; 0
    30ea:	4e e6       	ldi	r20, 0x6E	; 110
    30ec:	50 e0       	ldi	r21, 0x00	; 0
    30ee:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <memcpy_from_eeprom_with_checksum>
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	11 f0       	breq	.+4      	; 0x30fa <cfg_read+0x2a>
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    30fc:	c9 01       	movw	r24, r18
    30fe:	08 95       	ret

00003100 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    3100:	cf 92       	push	r12
    3102:	df 92       	push	r13
    3104:	ef 92       	push	r14
    3106:	ff 92       	push	r15
    3108:	0f 93       	push	r16
    310a:	1f 93       	push	r17
    310c:	df 93       	push	r29
    310e:	cf 93       	push	r28
    3110:	0f 92       	push	r0
    3112:	0f 92       	push	r0
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62
    3118:	6c 01       	movw	r12, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    311a:	19 82       	std	Y+1, r1	; 0x01
    311c:	1a 82       	std	Y+2, r1	; 0x02
    311e:	ee 24       	eor	r14, r14
    3120:	ff 24       	eor	r15, r15
    3122:	00 e0       	ldi	r16, 0x00	; 0
    3124:	10 e0       	ldi	r17, 0x00	; 0
    3126:	22 c0       	rjmp	.+68     	; 0x316c <cfg_parse+0x6c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = toupper(text[i++])) != 0) {
		if (c == '=') {							// handle separator
    3128:	9d 33       	cpi	r25, 0x3D	; 61
    312a:	49 f4       	brne	.+18     	; 0x313e <cfg_parse+0x3e>
			text[j++] = 0;						// terminate tag at separator
    312c:	f6 01       	movw	r30, r12
    312e:	e1 0f       	add	r30, r17
    3130:	f1 1d       	adc	r31, r1
    3132:	10 82       	st	Z, r1
    3134:	1f 5f       	subi	r17, 0xFF	; 255
			val = &text[j];						// new string starts at value
    3136:	76 01       	movw	r14, r12
    3138:	e1 0e       	add	r14, r17
    313a:	f1 1c       	adc	r15, r1
    313c:	17 c0       	rjmp	.+46     	; 0x316c <cfg_parse+0x6c>
		} else if ( (c == '-') || 				// capture special characters
    313e:	9d 32       	cpi	r25, 0x2D	; 45
    3140:	81 f0       	breq	.+32     	; 0x3162 <cfg_parse+0x62>
    3142:	9b 32       	cpi	r25, 0x2B	; 43
    3144:	71 f0       	breq	.+28     	; 0x3162 <cfg_parse+0x62>
    3146:	9e 32       	cpi	r25, 0x2E	; 46
    3148:	61 f0       	breq	.+24     	; 0x3162 <cfg_parse+0x62>
    314a:	9f 33       	cpi	r25, 0x3F	; 63
    314c:	51 f0       	breq	.+20     	; 0x3162 <cfg_parse+0x62>
    314e:	98 32       	cpi	r25, 0x28	; 40
    3150:	41 f0       	breq	.+16     	; 0x3162 <cfg_parse+0x62>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'A' && c <= 'Z') {		// capture letters
    3152:	89 2f       	mov	r24, r25
    3154:	81 54       	subi	r24, 0x41	; 65
    3156:	8a 31       	cpi	r24, 0x1A	; 26
    3158:	20 f0       	brcs	.+8      	; 0x3162 <cfg_parse+0x62>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// capture numbers
    315a:	89 2f       	mov	r24, r25
    315c:	80 53       	subi	r24, 0x30	; 48
    315e:	8a 30       	cpi	r24, 0x0A	; 10
    3160:	28 f4       	brcc	.+10     	; 0x316c <cfg_parse+0x6c>
			text[j++] = c;
    3162:	f6 01       	movw	r30, r12
    3164:	e1 0f       	add	r30, r17
    3166:	f1 1d       	adc	r31, r1
    3168:	90 83       	st	Z, r25
    316a:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = toupper(text[i++])) != 0) {
    316c:	f6 01       	movw	r30, r12
    316e:	e0 0f       	add	r30, r16
    3170:	f1 1d       	adc	r31, r1
    3172:	0f 5f       	subi	r16, 0xFF	; 255
    3174:	80 81       	ld	r24, Z
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	0e 94 ae 46 	call	0x8d5c	; 0x8d5c <toupper>
    317c:	98 2f       	mov	r25, r24
    317e:	88 23       	and	r24, r24
    3180:	99 f6       	brne	.-90     	; 0x3128 <cfg_parse+0x28>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// capture numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// nul terminate line
    3182:	f6 01       	movw	r30, r12
    3184:	e1 0f       	add	r30, r17
    3186:	f1 1d       	adc	r31, r1
    3188:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    318a:	1f 5f       	subi	r17, 0xFF	; 255
    318c:	c6 01       	movw	r24, r12
    318e:	81 0f       	add	r24, r17
    3190:	91 1d       	adc	r25, r1
    3192:	89 83       	std	Y+1, r24	; 0x01
    3194:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    3196:	10 92 a4 22 	sts	0x22A4, r1
	switch (text[0]) {
    319a:	f6 01       	movw	r30, r12
    319c:	80 81       	ld	r24, Z
    319e:	81 35       	cpi	r24, 0x51	; 81
    31a0:	d1 f0       	breq	.+52     	; 0x31d6 <cfg_parse+0xd6>
    31a2:	82 35       	cpi	r24, 0x52	; 82
    31a4:	60 f4       	brcc	.+24     	; 0x31be <cfg_parse+0xbe>
    31a6:	81 34       	cpi	r24, 0x41	; 65
    31a8:	59 f1       	breq	.+86     	; 0x3200 <cfg_parse+0x100>
    31aa:	82 34       	cpi	r24, 0x42	; 66
    31ac:	28 f4       	brcc	.+10     	; 0x31b8 <cfg_parse+0xb8>
    31ae:	88 32       	cpi	r24, 0x28	; 40
    31b0:	11 f1       	breq	.+68     	; 0x31f6 <cfg_parse+0xf6>
    31b2:	8f 33       	cpi	r24, 0x3F	; 63
    31b4:	39 f5       	brne	.+78     	; 0x3204 <cfg_parse+0x104>
    31b6:	0c c0       	rjmp	.+24     	; 0x31d0 <cfg_parse+0xd0>
    31b8:	8d 34       	cpi	r24, 0x4D	; 77
    31ba:	21 f5       	brne	.+72     	; 0x3204 <cfg_parse+0x104>
    31bc:	0e c0       	rjmp	.+28     	; 0x31da <cfg_parse+0xda>
    31be:	89 35       	cpi	r24, 0x59	; 89
    31c0:	29 f0       	breq	.+10     	; 0x31cc <cfg_parse+0xcc>
    31c2:	8a 35       	cpi	r24, 0x5A	; 90
    31c4:	d9 f0       	breq	.+54     	; 0x31fc <cfg_parse+0xfc>
    31c6:	88 35       	cpi	r24, 0x58	; 88
    31c8:	e9 f4       	brne	.+58     	; 0x3204 <cfg_parse+0x104>
    31ca:	1f c0       	rjmp	.+62     	; 0x320a <cfg_parse+0x10a>
    31cc:	11 e0       	ldi	r17, 0x01	; 1
    31ce:	1e c0       	rjmp	.+60     	; 0x320c <cfg_parse+0x10c>
		case '?': cfg_dump(); status (TG_OK); break;
    31d0:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <cfg_dump>
    31d4:	10 c0       	rjmp	.+32     	; 0x31f6 <cfg_parse+0xf6>
		case '(': status (TG_OK);	break;			// ignore comment lines
		case 'Q': status (TG_QUIT); break;
    31d6:	8b e0       	ldi	r24, 0x0B	; 11
    31d8:	16 c0       	rjmp	.+44     	; 0x3206 <cfg_parse+0x106>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    31da:	c7 01       	movw	r24, r14
    31dc:	be 01       	movw	r22, r28
    31de:	6f 5f       	subi	r22, 0xFF	; 255
    31e0:	7f 4f       	sbci	r23, 0xFF	; 255
    31e2:	0e 94 42 44 	call	0x8884	; 0x8884 <strtod>
    31e6:	60 93 a5 22 	sts	0x22A5, r22
    31ea:	70 93 a6 22 	sts	0x22A6, r23
    31ee:	80 93 a7 22 	sts	0x22A7, r24
    31f2:	90 93 a8 22 	sts	0x22A8, r25
				  status(TG_OK); 
    31f6:	10 92 a4 22 	sts	0x22A4, r1
    31fa:	07 c0       	rjmp	.+14     	; 0x320a <cfg_parse+0x10a>
				  break;
    31fc:	12 e0       	ldi	r17, 0x02	; 2
    31fe:	06 c0       	rjmp	.+12     	; 0x320c <cfg_parse+0x10c>

		case 'X': axis = X; break;
		case 'Y': axis = Y; break;
		case 'Z': axis = Z; break;
    3200:	13 e0       	ldi	r17, 0x03	; 3
    3202:	04 c0       	rjmp	.+8      	; 0x320c <cfg_parse+0x10c>
		case 'A': axis = A; break;

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    3204:	8c e0       	ldi	r24, 0x0C	; 12
    3206:	80 93 a4 22 	sts	0x22A4, r24
    320a:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    320c:	80 91 a4 22 	lds	r24, 0x22A4
    3210:	88 23       	and	r24, r24
    3212:	09 f0       	breq	.+2      	; 0x3216 <cfg_parse+0x116>
    3214:	ee c0       	rjmp	.+476    	; 0x33f2 <cfg_parse+0x2f2>
		status(TG_OK);							// pre-emptive setting
    3216:	10 92 a4 22 	sts	0x22A4, r1
		switch (text[1]) {
    321a:	f6 01       	movw	r30, r12
    321c:	81 81       	ldd	r24, Z+1	; 0x01
    321e:	8c 34       	cpi	r24, 0x4C	; 76
    3220:	09 f4       	brne	.+2      	; 0x3224 <cfg_parse+0x124>
    3222:	b8 c0       	rjmp	.+368    	; 0x3394 <cfg_parse+0x294>
    3224:	8d 34       	cpi	r24, 0x4D	; 77
    3226:	30 f4       	brcc	.+12     	; 0x3234 <cfg_parse+0x134>
    3228:	84 34       	cpi	r24, 0x44	; 68
    322a:	a9 f1       	breq	.+106    	; 0x3296 <cfg_parse+0x196>
    322c:	86 34       	cpi	r24, 0x46	; 70
    322e:	09 f0       	breq	.+2      	; 0x3232 <cfg_parse+0x132>
    3230:	dd c0       	rjmp	.+442    	; 0x33ec <cfg_parse+0x2ec>
    3232:	1d c0       	rjmp	.+58     	; 0x326e <cfg_parse+0x16e>
    3234:	80 35       	cpi	r24, 0x50	; 80
    3236:	09 f4       	brne	.+2      	; 0x323a <cfg_parse+0x13a>
    3238:	47 c0       	rjmp	.+142    	; 0x32c8 <cfg_parse+0x1c8>
    323a:	83 35       	cpi	r24, 0x53	; 83
    323c:	21 f0       	breq	.+8      	; 0x3246 <cfg_parse+0x146>
    323e:	8d 34       	cpi	r24, 0x4D	; 77
    3240:	09 f0       	breq	.+2      	; 0x3244 <cfg_parse+0x144>
    3242:	d4 c0       	rjmp	.+424    	; 0x33ec <cfg_parse+0x2ec>
    3244:	58 c0       	rjmp	.+176    	; 0x32f6 <cfg_parse+0x1f6>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    3246:	c7 01       	movw	r24, r14
    3248:	0e 94 b0 45 	call	0x8b60	; 0x8b60 <atoi>
    324c:	21 2f       	mov	r18, r17
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	f9 01       	movw	r30, r18
    3252:	ee 0f       	add	r30, r30
    3254:	ff 1f       	adc	r31, r31
    3256:	e2 0f       	add	r30, r18
    3258:	f3 1f       	adc	r31, r19
    325a:	23 e0       	ldi	r18, 0x03	; 3
    325c:	ee 0f       	add	r30, r30
    325e:	ff 1f       	adc	r31, r31
    3260:	2a 95       	dec	r18
    3262:	e1 f7       	brne	.-8      	; 0x325c <cfg_parse+0x15c>
    3264:	ed 55       	subi	r30, 0x5D	; 93
    3266:	fd 4d       	sbci	r31, 0xDD	; 221
    3268:	81 8b       	std	Z+17, r24	; 0x11
    326a:	92 8b       	std	Z+18, r25	; 0x12
    326c:	c2 c0       	rjmp	.+388    	; 0x33f2 <cfg_parse+0x2f2>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    326e:	c7 01       	movw	r24, r14
    3270:	0e 94 b0 45 	call	0x8b60	; 0x8b60 <atoi>
    3274:	21 2f       	mov	r18, r17
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	f9 01       	movw	r30, r18
    327a:	ee 0f       	add	r30, r30
    327c:	ff 1f       	adc	r31, r31
    327e:	e2 0f       	add	r30, r18
    3280:	f3 1f       	adc	r31, r19
    3282:	13 e0       	ldi	r17, 0x03	; 3
    3284:	ee 0f       	add	r30, r30
    3286:	ff 1f       	adc	r31, r31
    3288:	1a 95       	dec	r17
    328a:	e1 f7       	brne	.-8      	; 0x3284 <cfg_parse+0x184>
    328c:	ed 55       	subi	r30, 0x5D	; 93
    328e:	fd 4d       	sbci	r31, 0xDD	; 221
    3290:	83 8b       	std	Z+19, r24	; 0x13
    3292:	94 8b       	std	Z+20, r25	; 0x14
    3294:	ae c0       	rjmp	.+348    	; 0x33f2 <cfg_parse+0x2f2>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    3296:	c7 01       	movw	r24, r14
    3298:	be 01       	movw	r22, r28
    329a:	6f 5f       	subi	r22, 0xFF	; 255
    329c:	7f 4f       	sbci	r23, 0xFF	; 255
    329e:	0e 94 42 44 	call	0x8884	; 0x8884 <strtod>
    32a2:	21 2f       	mov	r18, r17
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	f9 01       	movw	r30, r18
    32a8:	ee 0f       	add	r30, r30
    32aa:	ff 1f       	adc	r31, r31
    32ac:	e2 0f       	add	r30, r18
    32ae:	f3 1f       	adc	r31, r19
    32b0:	a3 e0       	ldi	r26, 0x03	; 3
    32b2:	ee 0f       	add	r30, r30
    32b4:	ff 1f       	adc	r31, r31
    32b6:	aa 95       	dec	r26
    32b8:	e1 f7       	brne	.-8      	; 0x32b2 <cfg_parse+0x1b2>
    32ba:	ed 55       	subi	r30, 0x5D	; 93
    32bc:	fd 4d       	sbci	r31, 0xDD	; 221
    32be:	65 8b       	std	Z+21, r22	; 0x15
    32c0:	76 8b       	std	Z+22, r23	; 0x16
    32c2:	87 8b       	std	Z+23, r24	; 0x17
    32c4:	90 8f       	std	Z+24, r25	; 0x18
    32c6:	95 c0       	rjmp	.+298    	; 0x33f2 <cfg_parse+0x2f2>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    32c8:	c7 01       	movw	r24, r14
    32ca:	0e 94 b0 45 	call	0x8b60	; 0x8b60 <atoi>
    32ce:	68 2f       	mov	r22, r24
    32d0:	81 2f       	mov	r24, r17
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	fc 01       	movw	r30, r24
    32d6:	ee 0f       	add	r30, r30
    32d8:	ff 1f       	adc	r31, r31
    32da:	e8 0f       	add	r30, r24
    32dc:	f9 1f       	adc	r31, r25
    32de:	53 e0       	ldi	r21, 0x03	; 3
    32e0:	ee 0f       	add	r30, r30
    32e2:	ff 1f       	adc	r31, r31
    32e4:	5a 95       	dec	r21
    32e6:	e1 f7       	brne	.-8      	; 0x32e0 <cfg_parse+0x1e0>
    32e8:	ed 55       	subi	r30, 0x5D	; 93
    32ea:	fd 4d       	sbci	r31, 0xDD	; 221
    32ec:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    32ee:	81 2f       	mov	r24, r17
    32f0:	0e 94 c5 23 	call	0x478a	; 0x478a <st_set_polarity>
    32f4:	7e c0       	rjmp	.+252    	; 0x33f2 <cfg_parse+0x2f2>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    32f6:	f6 01       	movw	r30, r12
    32f8:	82 81       	ldd	r24, Z+2	; 0x02
    32fa:	89 34       	cpi	r24, 0x49	; 73
    32fc:	99 f4       	brne	.+38     	; 0x3324 <cfg_parse+0x224>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    32fe:	c7 01       	movw	r24, r14
    3300:	0e 94 b0 45 	call	0x8b60	; 0x8b60 <atoi>
    3304:	21 2f       	mov	r18, r17
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	f9 01       	movw	r30, r18
    330a:	ee 0f       	add	r30, r30
    330c:	ff 1f       	adc	r31, r31
    330e:	e2 0f       	add	r30, r18
    3310:	f3 1f       	adc	r31, r19
    3312:	93 e0       	ldi	r25, 0x03	; 3
    3314:	ee 0f       	add	r30, r30
    3316:	ff 1f       	adc	r31, r31
    3318:	9a 95       	dec	r25
    331a:	e1 f7       	brne	.-8      	; 0x3314 <cfg_parse+0x214>
    331c:	ed 55       	subi	r30, 0x5D	; 93
    331e:	fd 4d       	sbci	r31, 0xDD	; 221
    3320:	86 87       	std	Z+14, r24	; 0x0e
    3322:	67 c0       	rjmp	.+206    	; 0x33f2 <cfg_parse+0x2f2>
				} else if (text[3] == 'R') {
    3324:	f6 01       	movw	r30, r12
    3326:	83 81       	ldd	r24, Z+3	; 0x03
    3328:	82 35       	cpi	r24, 0x52	; 82
    332a:	c9 f4       	brne	.+50     	; 0x335e <cfg_parse+0x25e>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    332c:	c7 01       	movw	r24, r14
    332e:	be 01       	movw	r22, r28
    3330:	6f 5f       	subi	r22, 0xFF	; 255
    3332:	7f 4f       	sbci	r23, 0xFF	; 255
    3334:	0e 94 42 44 	call	0x8884	; 0x8884 <strtod>
    3338:	21 2f       	mov	r18, r17
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	f9 01       	movw	r30, r18
    333e:	ee 0f       	add	r30, r30
    3340:	ff 1f       	adc	r31, r31
    3342:	e2 0f       	add	r30, r18
    3344:	f3 1f       	adc	r31, r19
    3346:	13 e0       	ldi	r17, 0x03	; 3
    3348:	ee 0f       	add	r30, r30
    334a:	ff 1f       	adc	r31, r31
    334c:	1a 95       	dec	r17
    334e:	e1 f7       	brne	.-8      	; 0x3348 <cfg_parse+0x248>
    3350:	ed 55       	subi	r30, 0x5D	; 93
    3352:	fd 4d       	sbci	r31, 0xDD	; 221
    3354:	61 8f       	std	Z+25, r22	; 0x19
    3356:	72 8f       	std	Z+26, r23	; 0x1a
    3358:	83 8f       	std	Z+27, r24	; 0x1b
    335a:	94 8f       	std	Z+28, r25	; 0x1c
    335c:	4a c0       	rjmp	.+148    	; 0x33f2 <cfg_parse+0x2f2>
				} else if (text[3] == 'T') {
    335e:	84 35       	cpi	r24, 0x54	; 84
    3360:	c9 f4       	brne	.+50     	; 0x3394 <cfg_parse+0x294>
					CFG(axis).mm_travel = strtod(val, &end); break;
    3362:	c7 01       	movw	r24, r14
    3364:	be 01       	movw	r22, r28
    3366:	6f 5f       	subi	r22, 0xFF	; 255
    3368:	7f 4f       	sbci	r23, 0xFF	; 255
    336a:	0e 94 42 44 	call	0x8884	; 0x8884 <strtod>
    336e:	21 2f       	mov	r18, r17
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	f9 01       	movw	r30, r18
    3374:	ee 0f       	add	r30, r30
    3376:	ff 1f       	adc	r31, r31
    3378:	e2 0f       	add	r30, r18
    337a:	f3 1f       	adc	r31, r19
    337c:	a3 e0       	ldi	r26, 0x03	; 3
    337e:	ee 0f       	add	r30, r30
    3380:	ff 1f       	adc	r31, r31
    3382:	aa 95       	dec	r26
    3384:	e1 f7       	brne	.-8      	; 0x337e <cfg_parse+0x27e>
    3386:	ed 55       	subi	r30, 0x5D	; 93
    3388:	fd 4d       	sbci	r31, 0xDD	; 221
    338a:	65 8f       	std	Z+29, r22	; 0x1d
    338c:	76 8f       	std	Z+30, r23	; 0x1e
    338e:	87 8f       	std	Z+31, r24	; 0x1f
    3390:	90 a3       	std	Z+32, r25	; 0x20
    3392:	2f c0       	rjmp	.+94     	; 0x33f2 <cfg_parse+0x2f2>
				}
			case 'L': 
				if (text[2] == 'O') {
    3394:	f6 01       	movw	r30, r12
    3396:	82 81       	ldd	r24, Z+2	; 0x02
    3398:	8f 34       	cpi	r24, 0x4F	; 79
    339a:	99 f4       	brne	.+38     	; 0x33c2 <cfg_parse+0x2c2>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    339c:	c7 01       	movw	r24, r14
    339e:	0e 94 b0 45 	call	0x8b60	; 0x8b60 <atoi>
    33a2:	21 2f       	mov	r18, r17
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	f9 01       	movw	r30, r18
    33a8:	ee 0f       	add	r30, r30
    33aa:	ff 1f       	adc	r31, r31
    33ac:	e2 0f       	add	r30, r18
    33ae:	f3 1f       	adc	r31, r19
    33b0:	53 e0       	ldi	r21, 0x03	; 3
    33b2:	ee 0f       	add	r30, r30
    33b4:	ff 1f       	adc	r31, r31
    33b6:	5a 95       	dec	r21
    33b8:	e1 f7       	brne	.-8      	; 0x33b2 <cfg_parse+0x2b2>
    33ba:	ed 55       	subi	r30, 0x5D	; 93
    33bc:	fd 4d       	sbci	r31, 0xDD	; 221
    33be:	87 87       	std	Z+15, r24	; 0x0f
    33c0:	18 c0       	rjmp	.+48     	; 0x33f2 <cfg_parse+0x2f2>
				} else if (text[2] == 'I') {
    33c2:	89 34       	cpi	r24, 0x49	; 73
    33c4:	99 f4       	brne	.+38     	; 0x33ec <cfg_parse+0x2ec>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    33c6:	c7 01       	movw	r24, r14
    33c8:	0e 94 b0 45 	call	0x8b60	; 0x8b60 <atoi>
    33cc:	21 2f       	mov	r18, r17
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	f9 01       	movw	r30, r18
    33d2:	ee 0f       	add	r30, r30
    33d4:	ff 1f       	adc	r31, r31
    33d6:	e2 0f       	add	r30, r18
    33d8:	f3 1f       	adc	r31, r19
    33da:	23 e0       	ldi	r18, 0x03	; 3
    33dc:	ee 0f       	add	r30, r30
    33de:	ff 1f       	adc	r31, r31
    33e0:	2a 95       	dec	r18
    33e2:	e1 f7       	brne	.-8      	; 0x33dc <cfg_parse+0x2dc>
    33e4:	ed 55       	subi	r30, 0x5D	; 93
    33e6:	fd 4d       	sbci	r31, 0xDD	; 221
    33e8:	85 a3       	std	Z+37, r24	; 0x25
    33ea:	03 c0       	rjmp	.+6      	; 0x33f2 <cfg_parse+0x2f2>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    33ec:	8c e0       	ldi	r24, 0x0C	; 12
    33ee:	80 93 a4 22 	sts	0x22A4, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    33f2:	80 91 a4 22 	lds	r24, 0x22A4
    33f6:	b6 01       	movw	r22, r12
    33f8:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
}
    33fc:	80 91 a4 22 	lds	r24, 0x22A4
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	0f 90       	pop	r0
    3404:	0f 90       	pop	r0
    3406:	cf 91       	pop	r28
    3408:	df 91       	pop	r29
    340a:	1f 91       	pop	r17
    340c:	0f 91       	pop	r16
    340e:	ff 90       	pop	r15
    3410:	ef 90       	pop	r14
    3412:	df 90       	pop	r13
    3414:	cf 90       	pop	r12
    3416:	08 95       	ret

00003418 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3418:	ef 92       	push	r14
    341a:	ff 92       	push	r15
    341c:	0f 93       	push	r16
    341e:	1f 93       	push	r17
    3420:	df 93       	push	r29
    3422:	cf 93       	push	r28
    3424:	cd b7       	in	r28, 0x3d	; 61
    3426:	de b7       	in	r29, 0x3e	; 62
    3428:	a8 97       	sbiw	r28, 0x28	; 40
    342a:	cd bf       	out	0x3d, r28	; 61
    342c:	de bf       	out	0x3e, r29	; 62
    342e:	0b e4       	ldi	r16, 0x4B	; 75
    3430:	12 e0       	ldi	r17, 0x02	; 2
    3432:	a0 e0       	ldi	r26, 0x00	; 0
    3434:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    3436:	7e 01       	movw	r14, r28
    3438:	08 94       	sec
    343a:	e1 1c       	adc	r14, r1
    343c:	f1 1c       	adc	r15, r1
    343e:	02 c0       	rjmp	.+4      	; 0x3444 <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3440:	0f 5f       	subi	r16, 0xFF	; 255
    3442:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    3444:	f8 01       	movw	r30, r16
    3446:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    3448:	88 23       	and	r24, r24
    344a:	89 f4       	brne	.+34     	; 0x346e <cfg_test+0x56>
			text[j] = 0;
    344c:	ce 01       	movw	r24, r28
    344e:	01 96       	adiw	r24, 0x01	; 1
    3450:	a8 0f       	add	r26, r24
    3452:	b9 1f       	adc	r27, r25
    3454:	1c 92       	st	X, r1
			cfg_parse(text);
    3456:	0e 94 80 18 	call	0x3100	; 0x3100 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    345a:	a8 96       	adiw	r28, 0x28	; 40
    345c:	cd bf       	out	0x3d, r28	; 61
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	cf 91       	pop	r28
    3462:	df 91       	pop	r29
    3464:	1f 91       	pop	r17
    3466:	0f 91       	pop	r16
    3468:	ff 90       	pop	r15
    346a:	ef 90       	pop	r14
    346c:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    346e:	8d 30       	cpi	r24, 0x0D	; 13
    3470:	21 f0       	breq	.+8      	; 0x347a <cfg_test+0x62>
    3472:	8a 30       	cpi	r24, 0x0A	; 10
    3474:	11 f0       	breq	.+4      	; 0x347a <cfg_test+0x62>
    3476:	8b 33       	cpi	r24, 0x3B	; 59
    3478:	49 f4       	brne	.+18     	; 0x348c <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    347a:	ae 0d       	add	r26, r14
    347c:	bf 1d       	adc	r27, r15
    347e:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    3480:	c7 01       	movw	r24, r14
    3482:	0e 94 80 18 	call	0x3100	; 0x3100 <cfg_parse>
    3486:	a0 e0       	ldi	r26, 0x00	; 0
    3488:	b0 e0       	ldi	r27, 0x00	; 0
    348a:	da cf       	rjmp	.-76     	; 0x3440 <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    348c:	81 32       	cpi	r24, 0x21	; 33
    348e:	c0 f2       	brcs	.-80     	; 0x3440 <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    3490:	f7 01       	movw	r30, r14
    3492:	ea 0f       	add	r30, r26
    3494:	fb 1f       	adc	r31, r27
    3496:	80 83       	st	Z, r24
    3498:	11 96       	adiw	r26, 0x01	; 1
    349a:	d2 cf       	rjmp	.-92     	; 0x3440 <cfg_test+0x28>

0000349c <en_init>:


void en_init(void) 
{
	return;
}
    349c:	08 95       	ret

0000349e <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
    349e:	88 23       	and	r24, r24
    34a0:	b1 f0       	breq	.+44     	; 0x34ce <en_write+0x30>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    34a2:	e0 91 9f 22 	lds	r30, 0x229F
    34a6:	f0 91 a0 22 	lds	r31, 0x22A0
    34aa:	80 e2       	ldi	r24, 0x20	; 32
    34ac:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    34ae:	e0 91 8f 22 	lds	r30, 0x228F
    34b2:	f0 91 90 22 	lds	r31, 0x2290
    34b6:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    34b8:	e0 91 7f 22 	lds	r30, 0x227F
    34bc:	f0 91 80 22 	lds	r31, 0x2280
    34c0:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    34c2:	e0 91 6f 22 	lds	r30, 0x226F
    34c6:	f0 91 70 22 	lds	r31, 0x2270
    34ca:	85 83       	std	Z+5, r24	; 0x05
    34cc:	08 95       	ret
void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    34ce:	e0 91 9f 22 	lds	r30, 0x229F
    34d2:	f0 91 a0 22 	lds	r31, 0x22A0
    34d6:	80 e2       	ldi	r24, 0x20	; 32
    34d8:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    34da:	e0 91 8f 22 	lds	r30, 0x228F
    34de:	f0 91 90 22 	lds	r31, 0x2290
    34e2:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    34e4:	e0 91 7f 22 	lds	r30, 0x227F
    34e8:	f0 91 80 22 	lds	r31, 0x2280
    34ec:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    34ee:	e0 91 6f 22 	lds	r30, 0x226F
    34f2:	f0 91 70 22 	lds	r31, 0x2270
    34f6:	86 83       	std	Z+6, r24	; 0x06
    34f8:	08 95       	ret

000034fa <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    34fa:	0f 93       	push	r16
    34fc:	df 93       	push	r29
    34fe:	cf 93       	push	r28
    3500:	0f 92       	push	r0
    3502:	cd b7       	in	r28, 0x3d	; 61
    3504:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    3506:	8b ec       	ldi	r24, 0xCB	; 203
    3508:	e0 e5       	ldi	r30, 0x50	; 80
    350a:	f0 e0       	ldi	r31, 0x00	; 0
    350c:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    350e:	88 e0       	ldi	r24, 0x08	; 8
    3510:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    3514:	80 91 51 00 	lds	r24, 0x0051
    3518:	83 ff       	sbrs	r24, 3
    351a:	fc cf       	rjmp	.-8      	; 0x3514 <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    351c:	82 ec       	ldi	r24, 0xC2	; 194
    351e:	e0 e5       	ldi	r30, 0x50	; 80
    3520:	f0 e0       	ldi	r31, 0x00	; 0
    3522:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    3524:	88 e1       	ldi	r24, 0x18	; 24
    3526:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    352a:	80 91 51 00 	lds	r24, 0x0051
    352e:	84 ff       	sbrs	r24, 4
    3530:	fc cf       	rjmp	.-8      	; 0x352a <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3532:	8f b7       	in	r24, 0x3f	; 63
    3534:	89 83       	std	Y+1, r24	; 0x01
    3536:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3538:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    353a:	24 e0       	ldi	r18, 0x04	; 4
    353c:	80 e4       	ldi	r24, 0x40	; 64
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	fc 01       	movw	r30, r24
    3542:	08 ed       	ldi	r16, 0xD8	; 216
    3544:	04 bf       	out	0x34, r16	; 52
    3546:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    354c:	80 91 50 00 	lds	r24, 0x0050
    3550:	8e 7f       	andi	r24, 0xFE	; 254
    3552:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    3556:	0f 90       	pop	r0
    3558:	cf 91       	pop	r28
    355a:	df 91       	pop	r29
    355c:	0f 91       	pop	r16
    355e:	08 95       	ret

00003560 <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    3560:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <xmega_init_clocks>
}
    3564:	08 95       	ret

00003566 <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3566:	0f 93       	push	r16
    3568:	df 93       	push	r29
    356a:	cf 93       	push	r28
    356c:	0f 92       	push	r0
    356e:	cd b7       	in	r28, 0x3d	; 61
    3570:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3572:	2f b7       	in	r18, 0x3f	; 63
    3574:	29 83       	std	Y+1, r18	; 0x01
    3576:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3578:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    357a:	fc 01       	movw	r30, r24
    357c:	08 ed       	ldi	r16, 0xD8	; 216
    357e:	04 bf       	out	0x34, r16	; 52
    3580:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	8f bf       	out	0x3f, r24	; 63
#endif
}
    3586:	0f 90       	pop	r0
    3588:	cf 91       	pop	r28
    358a:	df 91       	pop	r29
    358c:	0f 91       	pop	r16
    358e:	08 95       	ret

00003590 <mc_motion_stop>:
 * mc_motion_stop() - stop all current motions
 */

int mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    3590:	10 92 64 21 	sts	0x2164, r1
	ma.arc_state = MC_STATE_OFF;
    3594:	10 92 11 23 	sts	0x2311, r1
	return (TG_OK);
}
    3598:	80 e0       	ldi	r24, 0x00	; 0
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	08 95       	ret

0000359e <mc_go_home>:
 */

int mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    359e:	8c e0       	ldi	r24, 0x0C	; 12
    35a0:	e5 e6       	ldi	r30, 0x65	; 101
    35a2:	f1 e2       	ldi	r31, 0x21	; 33
    35a4:	df 01       	movw	r26, r30
    35a6:	1d 92       	st	X+, r1
    35a8:	8a 95       	dec	r24
    35aa:	e9 f7       	brne	.-6      	; 0x35a6 <mc_go_home+0x8>
	return (TG_OK);
}
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	08 95       	ret

000035b2 <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    35b2:	8c e0       	ldi	r24, 0x0C	; 12
    35b4:	e5 e6       	ldi	r30, 0x65	; 101
    35b6:	f1 e2       	ldi	r31, 0x21	; 33
    35b8:	df 01       	movw	r26, r30
    35ba:	1d 92       	st	X+, r1
    35bc:	8a 95       	dec	r24
    35be:	e9 f7       	brne	.-6      	; 0x35ba <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    35c0:	10 92 64 21 	sts	0x2164, r1
	ma.arc_state = MC_STATE_OFF;
    35c4:	10 92 11 23 	sts	0x2311, r1
}
    35c8:	08 95       	ret

000035ca <mc_line_continue>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continue() 
{
    35ca:	af 92       	push	r10
    35cc:	bf 92       	push	r11
    35ce:	cf 92       	push	r12
    35d0:	df 92       	push	r13
    35d2:	ef 92       	push	r14
    35d4:	ff 92       	push	r15
    35d6:	0f 93       	push	r16
    35d8:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    35da:	80 91 64 21 	lds	r24, 0x2164
    35de:	88 23       	and	r24, r24
    35e0:	19 f4       	brne	.+6      	; 0x35e8 <mc_line_continue+0x1e>
    35e2:	23 e0       	ldi	r18, 0x03	; 3
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	30 c0       	rjmp	.+96     	; 0x3648 <mc_line_continue+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    35e8:	82 e0       	ldi	r24, 0x02	; 2
    35ea:	80 93 64 21 	sts	0x2164, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    35ee:	0e 94 b6 2b 	call	0x576c	; 0x576c <mv_test_move_buffer_full>
    35f2:	88 23       	and	r24, r24
    35f4:	19 f0       	breq	.+6      	; 0x35fc <mc_line_continue+0x32>
    35f6:	22 e0       	ldi	r18, 0x02	; 2
    35f8:	30 e0       	ldi	r19, 0x00	; 0
    35fa:	26 c0       	rjmp	.+76     	; 0x3648 <mc_line_continue+0x7e>
		return (TG_EAGAIN);
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    35fc:	60 91 7d 21 	lds	r22, 0x217D
    3600:	70 91 7e 21 	lds	r23, 0x217E
    3604:	80 91 7f 21 	lds	r24, 0x217F
    3608:	90 91 80 21 	lds	r25, 0x2180
    360c:	20 91 81 21 	lds	r18, 0x2181
    3610:	30 91 82 21 	lds	r19, 0x2182
    3614:	40 91 83 21 	lds	r20, 0x2183
    3618:	50 91 84 21 	lds	r21, 0x2184
    361c:	e0 90 85 21 	lds	r14, 0x2185
    3620:	f0 90 86 21 	lds	r15, 0x2186
    3624:	00 91 87 21 	lds	r16, 0x2187
    3628:	10 91 88 21 	lds	r17, 0x2188
    362c:	a0 90 89 21 	lds	r10, 0x2189
    3630:	b0 90 8a 21 	lds	r11, 0x218A
    3634:	c0 90 8b 21 	lds	r12, 0x218B
    3638:	d0 90 8c 21 	lds	r13, 0x218C
    363c:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    3640:	10 92 64 21 	sts	0x2164, r1
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3648:	c9 01       	movw	r24, r18
    364a:	1f 91       	pop	r17
    364c:	0f 91       	pop	r16
    364e:	ff 90       	pop	r15
    3650:	ef 90       	pop	r14
    3652:	df 90       	pop	r13
    3654:	cf 90       	pop	r12
    3656:	bf 90       	pop	r11
    3658:	af 90       	pop	r10
    365a:	08 95       	ret

0000365c <mc_dwell>:
 * NOTE: It's not necessary to set the target as this is set correctly in the Gcode. 
 */

int mc_dwell(double seconds) 
{
	mc.steps[X] = 0;
    365c:	10 92 7d 21 	sts	0x217D, r1
    3660:	10 92 7e 21 	sts	0x217E, r1
    3664:	10 92 7f 21 	sts	0x217F, r1
    3668:	10 92 80 21 	sts	0x2180, r1
	mc.steps[Y] = 0;
    366c:	10 92 81 21 	sts	0x2181, r1
    3670:	10 92 82 21 	sts	0x2182, r1
    3674:	10 92 83 21 	sts	0x2183, r1
    3678:	10 92 84 21 	sts	0x2184, r1
	mc.steps[Z] = 0;
    367c:	10 92 85 21 	sts	0x2185, r1
    3680:	10 92 86 21 	sts	0x2186, r1
    3684:	10 92 87 21 	sts	0x2187, r1
    3688:	10 92 88 21 	sts	0x2188, r1
	mc.mm_of_travel = 0;	// not actually used, but makes debug make more sense
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	40 e0       	ldi	r20, 0x00	; 0
    3692:	50 e0       	ldi	r21, 0x00	; 0
    3694:	20 93 8d 21 	sts	0x218D, r18
    3698:	30 93 8e 21 	sts	0x218E, r19
    369c:	40 93 8f 21 	sts	0x218F, r20
    36a0:	50 93 90 21 	sts	0x2190, r21
	mc.microseconds = trunc(seconds*1000000);
    36a4:	20 e0       	ldi	r18, 0x00	; 0
    36a6:	34 e2       	ldi	r19, 0x24	; 36
    36a8:	44 e7       	ldi	r20, 0x74	; 116
    36aa:	59 e4       	ldi	r21, 0x49	; 73
    36ac:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    36b0:	0e 94 ab 40 	call	0x8156	; 0x8156 <__fixunssfsi>
    36b4:	60 93 89 21 	sts	0x2189, r22
    36b8:	70 93 8a 21 	sts	0x218A, r23
    36bc:	80 93 8b 21 	sts	0x218B, r24
    36c0:	90 93 8c 21 	sts	0x218C, r25
	mc.line_state = MC_STATE_NEW;
    36c4:	81 e0       	ldi	r24, 0x01	; 1
    36c6:	80 93 64 21 	sts	0x2164, r24
	return (mc_line_continue());
    36ca:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <mc_line_continue>
}
    36ce:	08 95       	ret

000036d0 <mc_line>:
 * Zero length lines that are actually dwells come in thru mc_dwell().
 * The mv_queue doesn't check line length and queues anything.
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    36d0:	2f 92       	push	r2
    36d2:	3f 92       	push	r3
    36d4:	4f 92       	push	r4
    36d6:	5f 92       	push	r5
    36d8:	6f 92       	push	r6
    36da:	7f 92       	push	r7
    36dc:	8f 92       	push	r8
    36de:	9f 92       	push	r9
    36e0:	af 92       	push	r10
    36e2:	bf 92       	push	r11
    36e4:	cf 92       	push	r12
    36e6:	df 92       	push	r13
    36e8:	ef 92       	push	r14
    36ea:	ff 92       	push	r15
    36ec:	0f 93       	push	r16
    36ee:	1f 93       	push	r17
    36f0:	df 93       	push	r29
    36f2:	cf 93       	push	r28
    36f4:	cd b7       	in	r28, 0x3d	; 61
    36f6:	de b7       	in	r29, 0x3e	; 62
    36f8:	62 97       	sbiw	r28, 0x12	; 18
    36fa:	cd bf       	out	0x3d, r28	; 61
    36fc:	de bf       	out	0x3e, r29	; 62
    36fe:	19 01       	movw	r2, r18
    3700:	2a 01       	movw	r4, r20
    3702:	ad 86       	std	Y+13, r10	; 0x0d
    3704:	be 86       	std	Y+14, r11	; 0x0e
    3706:	cf 86       	std	Y+15, r12	; 0x0f
    3708:	d8 8a       	std	Y+16, r13	; 0x10
    370a:	89 8a       	std	Y+17, r8	; 0x11
    370c:	9a 8a       	std	Y+18, r9	; 0x12
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    370e:	20 91 c4 22 	lds	r18, 0x22C4
    3712:	30 91 c5 22 	lds	r19, 0x22C5
    3716:	40 91 c6 22 	lds	r20, 0x22C6
    371a:	50 91 c7 22 	lds	r21, 0x22C7
    371e:	29 87       	std	Y+9, r18	; 0x09
    3720:	3a 87       	std	Y+10, r19	; 0x0a
    3722:	4b 87       	std	Y+11, r20	; 0x0b
    3724:	5c 87       	std	Y+12, r21	; 0x0c
    3726:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    372a:	0e 94 c9 42 	call	0x8592	; 0x8592 <lround>
    372e:	3b 01       	movw	r6, r22
    3730:	4c 01       	movw	r8, r24
    3732:	60 92 71 21 	sts	0x2171, r6
    3736:	70 92 72 21 	sts	0x2172, r7
    373a:	80 92 73 21 	sts	0x2173, r8
    373e:	90 92 74 21 	sts	0x2174, r9
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    3742:	80 91 dc 22 	lds	r24, 0x22DC
    3746:	90 91 dd 22 	lds	r25, 0x22DD
    374a:	a0 91 de 22 	lds	r26, 0x22DE
    374e:	b0 91 df 22 	lds	r27, 0x22DF
    3752:	8d 83       	std	Y+5, r24	; 0x05
    3754:	9e 83       	std	Y+6, r25	; 0x06
    3756:	af 83       	std	Y+7, r26	; 0x07
    3758:	b8 87       	std	Y+8, r27	; 0x08
    375a:	c2 01       	movw	r24, r4
    375c:	b1 01       	movw	r22, r2
    375e:	2d 81       	ldd	r18, Y+5	; 0x05
    3760:	3e 81       	ldd	r19, Y+6	; 0x06
    3762:	4f 81       	ldd	r20, Y+7	; 0x07
    3764:	58 85       	ldd	r21, Y+8	; 0x08
    3766:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    376a:	0e 94 c9 42 	call	0x8592	; 0x8592 <lround>
    376e:	5b 01       	movw	r10, r22
    3770:	6c 01       	movw	r12, r24
    3772:	a0 92 75 21 	sts	0x2175, r10
    3776:	b0 92 76 21 	sts	0x2176, r11
    377a:	c0 92 77 21 	sts	0x2177, r12
    377e:	d0 92 78 21 	sts	0x2178, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    3782:	20 91 f4 22 	lds	r18, 0x22F4
    3786:	30 91 f5 22 	lds	r19, 0x22F5
    378a:	40 91 f6 22 	lds	r20, 0x22F6
    378e:	50 91 f7 22 	lds	r21, 0x22F7
    3792:	29 83       	std	Y+1, r18	; 0x01
    3794:	3a 83       	std	Y+2, r19	; 0x02
    3796:	4b 83       	std	Y+3, r20	; 0x03
    3798:	5c 83       	std	Y+4, r21	; 0x04
    379a:	c8 01       	movw	r24, r16
    379c:	b7 01       	movw	r22, r14
    379e:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    37a2:	0e 94 c9 42 	call	0x8592	; 0x8592 <lround>
    37a6:	9b 01       	movw	r18, r22
    37a8:	ac 01       	movw	r20, r24
    37aa:	20 93 79 21 	sts	0x2179, r18
    37ae:	30 93 7a 21 	sts	0x217A, r19
    37b2:	40 93 7b 21 	sts	0x217B, r20
    37b6:	50 93 7c 21 	sts	0x217C, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    37ba:	80 91 65 21 	lds	r24, 0x2165
    37be:	90 91 66 21 	lds	r25, 0x2166
    37c2:	a0 91 67 21 	lds	r26, 0x2167
    37c6:	b0 91 68 21 	lds	r27, 0x2168
    37ca:	84 01       	movw	r16, r8
    37cc:	73 01       	movw	r14, r6
    37ce:	e8 1a       	sub	r14, r24
    37d0:	f9 0a       	sbc	r15, r25
    37d2:	0a 0b       	sbc	r16, r26
    37d4:	1b 0b       	sbc	r17, r27
    37d6:	e0 92 7d 21 	sts	0x217D, r14
    37da:	f0 92 7e 21 	sts	0x217E, r15
    37de:	00 93 7f 21 	sts	0x217F, r16
    37e2:	10 93 80 21 	sts	0x2180, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    37e6:	80 91 69 21 	lds	r24, 0x2169
    37ea:	90 91 6a 21 	lds	r25, 0x216A
    37ee:	a0 91 6b 21 	lds	r26, 0x216B
    37f2:	b0 91 6c 21 	lds	r27, 0x216C
    37f6:	a8 1a       	sub	r10, r24
    37f8:	b9 0a       	sbc	r11, r25
    37fa:	ca 0a       	sbc	r12, r26
    37fc:	db 0a       	sbc	r13, r27
    37fe:	a0 92 81 21 	sts	0x2181, r10
    3802:	b0 92 82 21 	sts	0x2182, r11
    3806:	c0 92 83 21 	sts	0x2183, r12
    380a:	d0 92 84 21 	sts	0x2184, r13
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    380e:	80 91 6d 21 	lds	r24, 0x216D
    3812:	90 91 6e 21 	lds	r25, 0x216E
    3816:	a0 91 6f 21 	lds	r26, 0x216F
    381a:	b0 91 70 21 	lds	r27, 0x2170
    381e:	19 01       	movw	r2, r18
    3820:	2a 01       	movw	r4, r20
    3822:	28 1a       	sub	r2, r24
    3824:	39 0a       	sbc	r3, r25
    3826:	4a 0a       	sbc	r4, r26
    3828:	5b 0a       	sbc	r5, r27
    382a:	20 92 85 21 	sts	0x2185, r2
    382e:	30 92 86 21 	sts	0x2186, r3
    3832:	40 92 87 21 	sts	0x2187, r4
    3836:	50 92 88 21 	sts	0x2188, r5

	// skip zero length lines
	if ((mc.steps[X] + mc.steps[Y] + mc.steps[Z]) == 0) {
    383a:	d6 01       	movw	r26, r12
    383c:	c5 01       	movw	r24, r10
    383e:	8e 0d       	add	r24, r14
    3840:	9f 1d       	adc	r25, r15
    3842:	a0 1f       	adc	r26, r16
    3844:	b1 1f       	adc	r27, r17
    3846:	82 0d       	add	r24, r2
    3848:	93 1d       	adc	r25, r3
    384a:	a4 1d       	adc	r26, r4
    384c:	b5 1d       	adc	r27, r5
    384e:	00 97       	sbiw	r24, 0x00	; 0
    3850:	a1 05       	cpc	r26, r1
    3852:	b1 05       	cpc	r27, r1
    3854:	19 f4       	brne	.+6      	; 0x385c <mc_line+0x18c>
    3856:	24 e1       	ldi	r18, 0x14	; 20
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	72 c0       	rjmp	.+228    	; 0x3940 <mc_line+0x270>
		return (TG_ZERO_LENGTH_LINE);
	}

	if (invert_feed_rate) {
    385c:	49 89       	ldd	r20, Y+17	; 0x11
    385e:	5a 89       	ldd	r21, Y+18	; 0x12
    3860:	45 2b       	or	r20, r21
    3862:	59 f0       	breq	.+22     	; 0x387a <mc_line+0x1aa>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3864:	60 ec       	ldi	r22, 0xC0	; 192
    3866:	71 ee       	ldi	r23, 0xE1	; 225
    3868:	84 e6       	ldi	r24, 0x64	; 100
    386a:	9c e4       	ldi	r25, 0x4C	; 76
    386c:	2d 85       	ldd	r18, Y+13	; 0x0d
    386e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3870:	4f 85       	ldd	r20, Y+15	; 0x0f
    3872:	58 89       	ldd	r21, Y+16	; 0x10
    3874:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    3878:	4a c0       	rjmp	.+148    	; 0x390e <mc_line+0x23e>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    387a:	c8 01       	movw	r24, r16
    387c:	b7 01       	movw	r22, r14
    387e:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    3882:	29 85       	ldd	r18, Y+9	; 0x09
    3884:	3a 85       	ldd	r19, Y+10	; 0x0a
    3886:	4b 85       	ldd	r20, Y+11	; 0x0b
    3888:	5c 85       	ldd	r21, Y+12	; 0x0c
    388a:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    388e:	0e 94 a4 43 	call	0x8748	; 0x8748 <square>
    3892:	3b 01       	movw	r6, r22
    3894:	4c 01       	movw	r8, r24
    3896:	c6 01       	movw	r24, r12
    3898:	b5 01       	movw	r22, r10
    389a:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    389e:	2d 81       	ldd	r18, Y+5	; 0x05
    38a0:	3e 81       	ldd	r19, Y+6	; 0x06
    38a2:	4f 81       	ldd	r20, Y+7	; 0x07
    38a4:	58 85       	ldd	r21, Y+8	; 0x08
    38a6:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    38aa:	0e 94 a4 43 	call	0x8748	; 0x8748 <square>
    38ae:	5b 01       	movw	r10, r22
    38b0:	6c 01       	movw	r12, r24
    38b2:	c2 01       	movw	r24, r4
    38b4:	b1 01       	movw	r22, r2
    38b6:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    38ba:	29 81       	ldd	r18, Y+1	; 0x01
    38bc:	3a 81       	ldd	r19, Y+2	; 0x02
    38be:	4b 81       	ldd	r20, Y+3	; 0x03
    38c0:	5c 81       	ldd	r21, Y+4	; 0x04
    38c2:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    38c6:	0e 94 a4 43 	call	0x8748	; 0x8748 <square>
    38ca:	7b 01       	movw	r14, r22
    38cc:	8c 01       	movw	r16, r24
    38ce:	c4 01       	movw	r24, r8
    38d0:	b3 01       	movw	r22, r6
    38d2:	a6 01       	movw	r20, r12
    38d4:	95 01       	movw	r18, r10
    38d6:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <__addsf3>
    38da:	a8 01       	movw	r20, r16
    38dc:	97 01       	movw	r18, r14
    38de:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <__addsf3>
    38e2:	0e 94 66 43 	call	0x86cc	; 0x86cc <sqrt>
    38e6:	60 93 8d 21 	sts	0x218D, r22
    38ea:	70 93 8e 21 	sts	0x218E, r23
    38ee:	80 93 8f 21 	sts	0x218F, r24
    38f2:	90 93 90 21 	sts	0x2190, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    38f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    38f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    38fa:	4f 85       	ldd	r20, Y+15	; 0x0f
    38fc:	58 89       	ldd	r21, Y+16	; 0x10
    38fe:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	34 e2       	ldi	r19, 0x24	; 36
    3906:	44 e7       	ldi	r20, 0x74	; 116
    3908:	59 e4       	ldi	r21, 0x49	; 73
    390a:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    390e:	0e 94 c9 42 	call	0x8592	; 0x8592 <lround>
    3912:	60 93 89 21 	sts	0x2189, r22
    3916:	70 93 8a 21 	sts	0x218A, r23
    391a:	80 93 8b 21 	sts	0x218B, r24
    391e:	90 93 8c 21 	sts	0x218C, r25
	}
	mc.line_state = MC_STATE_NEW;
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	80 93 64 21 	sts	0x2164, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3928:	e5 e6       	ldi	r30, 0x65	; 101
    392a:	f1 e2       	ldi	r31, 0x21	; 33
    392c:	df 01       	movw	r26, r30
    392e:	1c 96       	adiw	r26, 0x0c	; 12
    3930:	8c e0       	ldi	r24, 0x0C	; 12
    3932:	0d 90       	ld	r0, X+
    3934:	01 92       	st	Z+, r0
    3936:	81 50       	subi	r24, 0x01	; 1
    3938:	e1 f7       	brne	.-8      	; 0x3932 <mc_line+0x262>
	return (mc_line_continue());
    393a:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <mc_line_continue>
    393e:	9c 01       	movw	r18, r24
}
    3940:	c9 01       	movw	r24, r18
    3942:	62 96       	adiw	r28, 0x12	; 18
    3944:	cd bf       	out	0x3d, r28	; 61
    3946:	de bf       	out	0x3e, r29	; 62
    3948:	cf 91       	pop	r28
    394a:	df 91       	pop	r29
    394c:	1f 91       	pop	r17
    394e:	0f 91       	pop	r16
    3950:	ff 90       	pop	r15
    3952:	ef 90       	pop	r14
    3954:	df 90       	pop	r13
    3956:	cf 90       	pop	r12
    3958:	bf 90       	pop	r11
    395a:	af 90       	pop	r10
    395c:	9f 90       	pop	r9
    395e:	8f 90       	pop	r8
    3960:	7f 90       	pop	r7
    3962:	6f 90       	pop	r6
    3964:	5f 90       	pop	r5
    3966:	4f 90       	pop	r4
    3968:	3f 90       	pop	r3
    396a:	2f 90       	pop	r2
    396c:	08 95       	ret

0000396e <mc_arc_continue>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continue() 
{
    396e:	8f 92       	push	r8
    3970:	9f 92       	push	r9
    3972:	af 92       	push	r10
    3974:	bf 92       	push	r11
    3976:	cf 92       	push	r12
    3978:	df 92       	push	r13
    397a:	ef 92       	push	r14
    397c:	ff 92       	push	r15
    397e:	0f 93       	push	r16
    3980:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3982:	80 91 11 23 	lds	r24, 0x2311
    3986:	88 23       	and	r24, r24
    3988:	19 f4       	brne	.+6      	; 0x3990 <mc_arc_continue+0x22>
    398a:	23 e0       	ldi	r18, 0x03	; 3
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	dd c0       	rjmp	.+442    	; 0x3b4a <mc_arc_continue+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3990:	81 30       	cpi	r24, 0x01	; 1
    3992:	09 f0       	breq	.+2      	; 0x3996 <mc_arc_continue+0x28>
    3994:	ca c0       	rjmp	.+404    	; 0x3b2a <mc_arc_continue+0x1bc>
		ma.segment_counter=0;
    3996:	10 92 14 23 	sts	0x2314, r1
    399a:	10 92 15 23 	sts	0x2315, r1
		ma.arc_state = MC_STATE_RUNNING;
    399e:	82 e0       	ldi	r24, 0x02	; 2
    39a0:	80 93 11 23 	sts	0x2311, r24
    39a4:	c2 c0       	rjmp	.+388    	; 0x3b2a <mc_arc_continue+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    39a6:	0e 94 b6 2b 	call	0x576c	; 0x576c <mv_test_move_buffer_full>
    39aa:	88 23       	and	r24, r24
    39ac:	19 f0       	breq	.+6      	; 0x39b4 <mc_arc_continue+0x46>
    39ae:	22 e0       	ldi	r18, 0x02	; 2
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	cb c0       	rjmp	.+406    	; 0x3b4a <mc_arc_continue+0x1dc>
			return (TG_EAGAIN);
		}
		ma.segment_counter++;
    39b4:	80 91 14 23 	lds	r24, 0x2314
    39b8:	90 91 15 23 	lds	r25, 0x2315
    39bc:	01 96       	adiw	r24, 0x01	; 1
    39be:	80 93 14 23 	sts	0x2314, r24
    39c2:	90 93 15 23 	sts	0x2315, r25
		ma.theta += ma.theta_per_segment;
    39c6:	60 91 36 23 	lds	r22, 0x2336
    39ca:	70 91 37 23 	lds	r23, 0x2337
    39ce:	80 91 38 23 	lds	r24, 0x2338
    39d2:	90 91 39 23 	lds	r25, 0x2339
    39d6:	20 91 42 23 	lds	r18, 0x2342
    39da:	30 91 43 23 	lds	r19, 0x2343
    39de:	40 91 44 23 	lds	r20, 0x2344
    39e2:	50 91 45 23 	lds	r21, 0x2345
    39e6:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <__addsf3>
    39ea:	7b 01       	movw	r14, r22
    39ec:	8c 01       	movw	r16, r24
    39ee:	cb 01       	movw	r24, r22
    39f0:	d8 01       	movw	r26, r16
    39f2:	80 93 36 23 	sts	0x2336, r24
    39f6:	90 93 37 23 	sts	0x2337, r25
    39fa:	a0 93 38 23 	sts	0x2338, r26
    39fe:	b0 93 39 23 	sts	0x2339, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3a02:	b7 01       	movw	r22, r14
    3a04:	c8 01       	movw	r24, r16
    3a06:	0e 94 5c 43 	call	0x86b8	; 0x86b8 <sin>
    3a0a:	80 90 3a 23 	lds	r8, 0x233A
    3a0e:	90 90 3b 23 	lds	r9, 0x233B
    3a12:	a0 90 3c 23 	lds	r10, 0x233C
    3a16:	b0 90 3d 23 	lds	r11, 0x233D
    3a1a:	c0 90 18 23 	lds	r12, 0x2318
    3a1e:	d0 90 19 23 	lds	r13, 0x2319
    3a22:	cc 0c       	add	r12, r12
    3a24:	dd 1c       	adc	r13, r13
    3a26:	cc 0c       	add	r12, r12
    3a28:	dd 1c       	adc	r13, r13
    3a2a:	21 e1       	ldi	r18, 0x11	; 17
    3a2c:	33 e2       	ldi	r19, 0x23	; 35
    3a2e:	c2 0e       	add	r12, r18
    3a30:	d3 1e       	adc	r13, r19
    3a32:	a5 01       	movw	r20, r10
    3a34:	94 01       	movw	r18, r8
    3a36:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    3a3a:	9b 01       	movw	r18, r22
    3a3c:	ac 01       	movw	r20, r24
    3a3e:	60 91 2e 23 	lds	r22, 0x232E
    3a42:	70 91 2f 23 	lds	r23, 0x232F
    3a46:	80 91 30 23 	lds	r24, 0x2330
    3a4a:	90 91 31 23 	lds	r25, 0x2331
    3a4e:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <__addsf3>
    3a52:	f6 01       	movw	r30, r12
    3a54:	65 87       	std	Z+13, r22	; 0x0d
    3a56:	76 87       	std	Z+14, r23	; 0x0e
    3a58:	87 87       	std	Z+15, r24	; 0x0f
    3a5a:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3a5c:	b7 01       	movw	r22, r14
    3a5e:	c8 01       	movw	r24, r16
    3a60:	0e 94 3b 40 	call	0x8076	; 0x8076 <cos>
    3a64:	00 91 1a 23 	lds	r16, 0x231A
    3a68:	10 91 1b 23 	lds	r17, 0x231B
    3a6c:	00 0f       	add	r16, r16
    3a6e:	11 1f       	adc	r17, r17
    3a70:	00 0f       	add	r16, r16
    3a72:	11 1f       	adc	r17, r17
    3a74:	0f 5e       	subi	r16, 0xEF	; 239
    3a76:	1c 4d       	sbci	r17, 0xDC	; 220
    3a78:	a5 01       	movw	r20, r10
    3a7a:	94 01       	movw	r18, r8
    3a7c:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    3a80:	9b 01       	movw	r18, r22
    3a82:	ac 01       	movw	r20, r24
    3a84:	60 91 32 23 	lds	r22, 0x2332
    3a88:	70 91 33 23 	lds	r23, 0x2333
    3a8c:	80 91 34 23 	lds	r24, 0x2334
    3a90:	90 91 35 23 	lds	r25, 0x2335
    3a94:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <__addsf3>
    3a98:	f8 01       	movw	r30, r16
    3a9a:	65 87       	std	Z+13, r22	; 0x0d
    3a9c:	76 87       	std	Z+14, r23	; 0x0e
    3a9e:	87 87       	std	Z+15, r24	; 0x0f
    3aa0:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3aa2:	00 91 1c 23 	lds	r16, 0x231C
    3aa6:	10 91 1d 23 	lds	r17, 0x231D
    3aaa:	00 0f       	add	r16, r16
    3aac:	11 1f       	adc	r17, r17
    3aae:	00 0f       	add	r16, r16
    3ab0:	11 1f       	adc	r17, r17
    3ab2:	0f 5e       	subi	r16, 0xEF	; 239
    3ab4:	1c 4d       	sbci	r17, 0xDC	; 220
    3ab6:	f8 01       	movw	r30, r16
    3ab8:	65 85       	ldd	r22, Z+13	; 0x0d
    3aba:	76 85       	ldd	r23, Z+14	; 0x0e
    3abc:	87 85       	ldd	r24, Z+15	; 0x0f
    3abe:	90 89       	ldd	r25, Z+16	; 0x10
    3ac0:	20 91 46 23 	lds	r18, 0x2346
    3ac4:	30 91 47 23 	lds	r19, 0x2347
    3ac8:	40 91 48 23 	lds	r20, 0x2348
    3acc:	50 91 49 23 	lds	r21, 0x2349
    3ad0:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <__addsf3>
    3ad4:	f8 01       	movw	r30, r16
    3ad6:	65 87       	std	Z+13, r22	; 0x0d
    3ad8:	76 87       	std	Z+14, r23	; 0x0e
    3ada:	87 87       	std	Z+15, r24	; 0x0f
    3adc:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    3ade:	60 91 1e 23 	lds	r22, 0x231E
    3ae2:	70 91 1f 23 	lds	r23, 0x231F
    3ae6:	80 91 20 23 	lds	r24, 0x2320
    3aea:	90 91 21 23 	lds	r25, 0x2321
    3aee:	20 91 22 23 	lds	r18, 0x2322
    3af2:	30 91 23 23 	lds	r19, 0x2323
    3af6:	40 91 24 23 	lds	r20, 0x2324
    3afa:	50 91 25 23 	lds	r21, 0x2325
    3afe:	e0 90 26 23 	lds	r14, 0x2326
    3b02:	f0 90 27 23 	lds	r15, 0x2327
    3b06:	00 91 28 23 	lds	r16, 0x2328
    3b0a:	10 91 29 23 	lds	r17, 0x2329
    3b0e:	a0 90 3e 23 	lds	r10, 0x233E
    3b12:	b0 90 3f 23 	lds	r11, 0x233F
    3b16:	c0 90 40 23 	lds	r12, 0x2340
    3b1a:	d0 90 41 23 	lds	r13, 0x2341
    3b1e:	80 90 16 23 	lds	r8, 0x2316
    3b22:	90 90 17 23 	lds	r9, 0x2317
    3b26:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3b2a:	20 91 14 23 	lds	r18, 0x2314
    3b2e:	30 91 15 23 	lds	r19, 0x2315
    3b32:	80 91 12 23 	lds	r24, 0x2312
    3b36:	90 91 13 23 	lds	r25, 0x2313
    3b3a:	82 17       	cp	r24, r18
    3b3c:	93 07       	cpc	r25, r19
    3b3e:	0c f0       	brlt	.+2      	; 0x3b42 <mc_arc_continue+0x1d4>
    3b40:	32 cf       	rjmp	.-412    	; 0x39a6 <mc_arc_continue+0x38>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3b42:	10 92 11 23 	sts	0x2311, r1
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3b4a:	c9 01       	movw	r24, r18
    3b4c:	1f 91       	pop	r17
    3b4e:	0f 91       	pop	r16
    3b50:	ff 90       	pop	r15
    3b52:	ef 90       	pop	r14
    3b54:	df 90       	pop	r13
    3b56:	cf 90       	pop	r12
    3b58:	bf 90       	pop	r11
    3b5a:	af 90       	pop	r10
    3b5c:	9f 90       	pop	r9
    3b5e:	8f 90       	pop	r8
    3b60:	08 95       	ret

00003b62 <mc_arc>:
 */

int mc_arc(double theta, double angular_travel, double radius, 
		   double linear_travel, int axis_1, int axis_2, int axis_linear, 
		   double feed_rate, int invert_feed_rate)
{
    3b62:	2f 92       	push	r2
    3b64:	3f 92       	push	r3
    3b66:	4f 92       	push	r4
    3b68:	5f 92       	push	r5
    3b6a:	6f 92       	push	r6
    3b6c:	7f 92       	push	r7
    3b6e:	8f 92       	push	r8
    3b70:	9f 92       	push	r9
    3b72:	af 92       	push	r10
    3b74:	bf 92       	push	r11
    3b76:	cf 92       	push	r12
    3b78:	df 92       	push	r13
    3b7a:	ef 92       	push	r14
    3b7c:	ff 92       	push	r15
    3b7e:	0f 93       	push	r16
    3b80:	1f 93       	push	r17
    3b82:	df 93       	push	r29
    3b84:	cf 93       	push	r28
    3b86:	cd b7       	in	r28, 0x3d	; 61
    3b88:	de b7       	in	r29, 0x3e	; 62
    3b8a:	28 97       	sbiw	r28, 0x08	; 8
    3b8c:	cd bf       	out	0x3d, r28	; 61
    3b8e:	de bf       	out	0x3e, r29	; 62
    3b90:	69 83       	std	Y+1, r22	; 0x01
    3b92:	7a 83       	std	Y+2, r23	; 0x02
    3b94:	8b 83       	std	Y+3, r24	; 0x03
    3b96:	9c 83       	std	Y+4, r25	; 0x04
    3b98:	29 01       	movw	r4, r18
    3b9a:	3a 01       	movw	r6, r20
    3b9c:	ed 82       	std	Y+5, r14	; 0x05
    3b9e:	fe 82       	std	Y+6, r15	; 0x06
    3ba0:	0f 83       	std	Y+7, r16	; 0x07
    3ba2:	18 87       	std	Y+8, r17	; 0x08
    3ba4:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3ba6:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3ba8:	60 93 36 23 	sts	0x2336, r22
    3bac:	70 93 37 23 	sts	0x2337, r23
    3bb0:	80 93 38 23 	sts	0x2338, r24
    3bb4:	90 93 39 23 	sts	0x2339, r25
	ma.radius = radius;
    3bb8:	e0 92 3a 23 	sts	0x233A, r14
    3bbc:	f0 92 3b 23 	sts	0x233B, r15
    3bc0:	00 93 3c 23 	sts	0x233C, r16
    3bc4:	10 93 3d 23 	sts	0x233D, r17
	ma.angular_travel = angular_travel;
    3bc8:	20 93 4a 23 	sts	0x234A, r18
    3bcc:	30 93 4b 23 	sts	0x234B, r19
    3bd0:	40 93 4c 23 	sts	0x234C, r20
    3bd4:	50 93 4d 23 	sts	0x234D, r21
	ma.linear_travel = linear_travel;
    3bd8:	a0 92 4e 23 	sts	0x234E, r10
    3bdc:	b0 92 4f 23 	sts	0x234F, r11
    3be0:	c0 92 50 23 	sts	0x2350, r12
    3be4:	d0 92 51 23 	sts	0x2351, r13
	ma.feed_rate = feed_rate;
    3be8:	8a a1       	ldd	r24, Y+34	; 0x22
    3bea:	9b a1       	ldd	r25, Y+35	; 0x23
    3bec:	ac a1       	ldd	r26, Y+36	; 0x24
    3bee:	bd a1       	ldd	r27, Y+37	; 0x25
    3bf0:	80 93 3e 23 	sts	0x233E, r24
    3bf4:	90 93 3f 23 	sts	0x233F, r25
    3bf8:	a0 93 40 23 	sts	0x2340, r26
    3bfc:	b0 93 41 23 	sts	0x2341, r27
	ma.invert_feed_rate = invert_feed_rate;
    3c00:	ae a1       	ldd	r26, Y+38	; 0x26
    3c02:	bf a1       	ldd	r27, Y+39	; 0x27
    3c04:	a0 93 16 23 	sts	0x2316, r26
    3c08:	b0 93 17 23 	sts	0x2317, r27
	ma.axis_1 = axis_1;
    3c0c:	80 92 18 23 	sts	0x2318, r8
    3c10:	90 92 19 23 	sts	0x2319, r9
	ma.axis_2 = axis_2;
    3c14:	20 92 1a 23 	sts	0x231A, r2
    3c18:	30 92 1b 23 	sts	0x231B, r3
	ma.axis_linear = axis_linear;
    3c1c:	e8 a1       	ldd	r30, Y+32	; 0x20
    3c1e:	f9 a1       	ldd	r31, Y+33	; 0x21
    3c20:	e0 93 1c 23 	sts	0x231C, r30
    3c24:	f0 93 1d 23 	sts	0x231D, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3c28:	ca 01       	movw	r24, r20
    3c2a:	b9 01       	movw	r22, r18
    3c2c:	a8 01       	movw	r20, r16
    3c2e:	97 01       	movw	r18, r14
    3c30:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    3c34:	7b 01       	movw	r14, r22
    3c36:	8c 01       	movw	r16, r24
    3c38:	c6 01       	movw	r24, r12
    3c3a:	b5 01       	movw	r22, r10
    3c3c:	0e 94 a6 40 	call	0x814c	; 0x814c <__fixsfsi>
    3c40:	97 ff       	sbrs	r25, 7
    3c42:	07 c0       	rjmp	.+14     	; 0x3c52 <mc_arc+0xf0>
    3c44:	90 95       	com	r25
    3c46:	80 95       	com	r24
    3c48:	70 95       	com	r23
    3c4a:	61 95       	neg	r22
    3c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c4e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c50:	9f 4f       	sbci	r25, 0xFF	; 255
    3c52:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    3c56:	9b 01       	movw	r18, r22
    3c58:	ac 01       	movw	r20, r24
    3c5a:	c8 01       	movw	r24, r16
    3c5c:	b7 01       	movw	r22, r14
    3c5e:	0e 94 34 42 	call	0x8468	; 0x8468 <hypot>
    3c62:	7b 01       	movw	r14, r22
    3c64:	8c 01       	movw	r16, r24
    3c66:	60 93 2a 23 	sts	0x232A, r22
    3c6a:	70 93 2b 23 	sts	0x232B, r23
    3c6e:	80 93 2c 23 	sts	0x232C, r24
    3c72:	90 93 2d 23 	sts	0x232D, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3c76:	2d ec       	ldi	r18, 0xCD	; 205
    3c78:	3c ec       	ldi	r19, 0xCC	; 204
    3c7a:	4c e4       	ldi	r20, 0x4C	; 76
    3c7c:	5d e3       	ldi	r21, 0x3D	; 61
    3c7e:	0e 94 37 40 	call	0x806e	; 0x806e <__cmpsf2>
    3c82:	88 23       	and	r24, r24
    3c84:	1c f4       	brge	.+6      	; 0x3c8c <mc_arc+0x12a>
    3c86:	23 e1       	ldi	r18, 0x13	; 19
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	fb c0       	rjmp	.+502    	; 0x3e82 <mc_arc+0x320>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3c8c:	c8 01       	movw	r24, r16
    3c8e:	b7 01       	movw	r22, r14
    3c90:	20 91 a5 22 	lds	r18, 0x22A5
    3c94:	30 91 a6 22 	lds	r19, 0x22A6
    3c98:	40 91 a7 22 	lds	r20, 0x22A7
    3c9c:	50 91 a8 22 	lds	r21, 0x22A8
    3ca0:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    3ca4:	0e 94 24 40 	call	0x8048	; 0x8048 <ceil>
    3ca8:	0e 94 a6 40 	call	0x814c	; 0x814c <__fixsfsi>
    3cac:	8b 01       	movw	r16, r22
    3cae:	60 93 12 23 	sts	0x2312, r22
    3cb2:	70 93 13 23 	sts	0x2313, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    3cb6:	8e a1       	ldd	r24, Y+38	; 0x26
    3cb8:	9f a1       	ldd	r25, Y+39	; 0x27
    3cba:	89 2b       	or	r24, r25
    3cbc:	b9 f0       	breq	.+46     	; 0x3cec <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    3cbe:	b8 01       	movw	r22, r16
    3cc0:	88 27       	eor	r24, r24
    3cc2:	77 fd       	sbrc	r23, 7
    3cc4:	80 95       	com	r24
    3cc6:	98 2f       	mov	r25, r24
    3cc8:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    3ccc:	9b 01       	movw	r18, r22
    3cce:	ac 01       	movw	r20, r24
    3cd0:	6a a1       	ldd	r22, Y+34	; 0x22
    3cd2:	7b a1       	ldd	r23, Y+35	; 0x23
    3cd4:	8c a1       	ldd	r24, Y+36	; 0x24
    3cd6:	9d a1       	ldd	r25, Y+37	; 0x25
    3cd8:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    3cdc:	60 93 3e 23 	sts	0x233E, r22
    3ce0:	70 93 3f 23 	sts	0x233F, r23
    3ce4:	80 93 40 23 	sts	0x2340, r24
    3ce8:	90 93 41 23 	sts	0x2341, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    3cec:	b8 01       	movw	r22, r16
    3cee:	88 27       	eor	r24, r24
    3cf0:	77 fd       	sbrc	r23, 7
    3cf2:	80 95       	com	r24
    3cf4:	98 2f       	mov	r25, r24
    3cf6:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    3cfa:	7b 01       	movw	r14, r22
    3cfc:	8c 01       	movw	r16, r24
    3cfe:	c3 01       	movw	r24, r6
    3d00:	b2 01       	movw	r22, r4
    3d02:	a8 01       	movw	r20, r16
    3d04:	97 01       	movw	r18, r14
    3d06:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    3d0a:	60 93 42 23 	sts	0x2342, r22
    3d0e:	70 93 43 23 	sts	0x2343, r23
    3d12:	80 93 44 23 	sts	0x2344, r24
    3d16:	90 93 45 23 	sts	0x2345, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    3d1a:	c6 01       	movw	r24, r12
    3d1c:	b5 01       	movw	r22, r10
    3d1e:	a8 01       	movw	r20, r16
    3d20:	97 01       	movw	r18, r14
    3d22:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    3d26:	60 93 46 23 	sts	0x2346, r22
    3d2a:	70 93 47 23 	sts	0x2347, r23
    3d2e:	80 93 48 23 	sts	0x2348, r24
    3d32:	90 93 49 23 	sts	0x2349, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    3d36:	69 81       	ldd	r22, Y+1	; 0x01
    3d38:	7a 81       	ldd	r23, Y+2	; 0x02
    3d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d3e:	0e 94 5c 43 	call	0x86b8	; 0x86b8 <sin>
    3d42:	5b 01       	movw	r10, r22
    3d44:	6c 01       	movw	r12, r24
    3d46:	f4 01       	movw	r30, r8
    3d48:	ee 0f       	add	r30, r30
    3d4a:	ff 1f       	adc	r31, r31
    3d4c:	ee 0f       	add	r30, r30
    3d4e:	ff 1f       	adc	r31, r31
    3d50:	ec 59       	subi	r30, 0x9C	; 156
    3d52:	fe 4d       	sbci	r31, 0xDE	; 222
    3d54:	61 81       	ldd	r22, Z+1	; 0x01
    3d56:	72 81       	ldd	r23, Z+2	; 0x02
    3d58:	83 81       	ldd	r24, Z+3	; 0x03
    3d5a:	94 81       	ldd	r25, Z+4	; 0x04
    3d5c:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    3d60:	f4 01       	movw	r30, r8
    3d62:	ee 0f       	add	r30, r30
    3d64:	ff 1f       	adc	r31, r31
    3d66:	e8 0d       	add	r30, r8
    3d68:	f9 1d       	adc	r31, r9
    3d6a:	13 e0       	ldi	r17, 0x03	; 3
    3d6c:	ee 0f       	add	r30, r30
    3d6e:	ff 1f       	adc	r31, r31
    3d70:	1a 95       	dec	r17
    3d72:	e1 f7       	brne	.-8      	; 0x3d6c <mc_arc+0x20a>
    3d74:	ed 55       	subi	r30, 0x5D	; 93
    3d76:	fd 4d       	sbci	r31, 0xDD	; 221
    3d78:	21 a1       	ldd	r18, Z+33	; 0x21
    3d7a:	32 a1       	ldd	r19, Z+34	; 0x22
    3d7c:	43 a1       	ldd	r20, Z+35	; 0x23
    3d7e:	54 a1       	ldd	r21, Z+36	; 0x24
    3d80:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    3d84:	7b 01       	movw	r14, r22
    3d86:	8c 01       	movw	r16, r24
    3d88:	c6 01       	movw	r24, r12
    3d8a:	b5 01       	movw	r22, r10
    3d8c:	2d 81       	ldd	r18, Y+5	; 0x05
    3d8e:	3e 81       	ldd	r19, Y+6	; 0x06
    3d90:	4f 81       	ldd	r20, Y+7	; 0x07
    3d92:	58 85       	ldd	r21, Y+8	; 0x08
    3d94:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    3d98:	9b 01       	movw	r18, r22
    3d9a:	ac 01       	movw	r20, r24
    3d9c:	c8 01       	movw	r24, r16
    3d9e:	b7 01       	movw	r22, r14
    3da0:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    3da4:	60 93 2e 23 	sts	0x232E, r22
    3da8:	70 93 2f 23 	sts	0x232F, r23
    3dac:	80 93 30 23 	sts	0x2330, r24
    3db0:	90 93 31 23 	sts	0x2331, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    3db4:	69 81       	ldd	r22, Y+1	; 0x01
    3db6:	7a 81       	ldd	r23, Y+2	; 0x02
    3db8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dba:	9c 81       	ldd	r25, Y+4	; 0x04
    3dbc:	0e 94 3b 40 	call	0x8076	; 0x8076 <cos>
    3dc0:	5b 01       	movw	r10, r22
    3dc2:	6c 01       	movw	r12, r24
    3dc4:	f1 01       	movw	r30, r2
    3dc6:	ee 0f       	add	r30, r30
    3dc8:	ff 1f       	adc	r31, r31
    3dca:	ee 0f       	add	r30, r30
    3dcc:	ff 1f       	adc	r31, r31
    3dce:	ec 59       	subi	r30, 0x9C	; 156
    3dd0:	fe 4d       	sbci	r31, 0xDE	; 222
    3dd2:	61 81       	ldd	r22, Z+1	; 0x01
    3dd4:	72 81       	ldd	r23, Z+2	; 0x02
    3dd6:	83 81       	ldd	r24, Z+3	; 0x03
    3dd8:	94 81       	ldd	r25, Z+4	; 0x04
    3dda:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    3dde:	f1 01       	movw	r30, r2
    3de0:	ee 0f       	add	r30, r30
    3de2:	ff 1f       	adc	r31, r31
    3de4:	e2 0d       	add	r30, r2
    3de6:	f3 1d       	adc	r31, r3
    3de8:	53 e0       	ldi	r21, 0x03	; 3
    3dea:	ee 0f       	add	r30, r30
    3dec:	ff 1f       	adc	r31, r31
    3dee:	5a 95       	dec	r21
    3df0:	e1 f7       	brne	.-8      	; 0x3dea <mc_arc+0x288>
    3df2:	ed 55       	subi	r30, 0x5D	; 93
    3df4:	fd 4d       	sbci	r31, 0xDD	; 221
    3df6:	21 a1       	ldd	r18, Z+33	; 0x21
    3df8:	32 a1       	ldd	r19, Z+34	; 0x22
    3dfa:	43 a1       	ldd	r20, Z+35	; 0x23
    3dfc:	54 a1       	ldd	r21, Z+36	; 0x24
    3dfe:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    3e02:	7b 01       	movw	r14, r22
    3e04:	8c 01       	movw	r16, r24
    3e06:	c6 01       	movw	r24, r12
    3e08:	b5 01       	movw	r22, r10
    3e0a:	2d 81       	ldd	r18, Y+5	; 0x05
    3e0c:	3e 81       	ldd	r19, Y+6	; 0x06
    3e0e:	4f 81       	ldd	r20, Y+7	; 0x07
    3e10:	58 85       	ldd	r21, Y+8	; 0x08
    3e12:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    3e16:	9b 01       	movw	r18, r22
    3e18:	ac 01       	movw	r20, r24
    3e1a:	c8 01       	movw	r24, r16
    3e1c:	b7 01       	movw	r22, r14
    3e1e:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    3e22:	60 93 32 23 	sts	0x2332, r22
    3e26:	70 93 33 23 	sts	0x2333, r23
    3e2a:	80 93 34 23 	sts	0x2334, r24
    3e2e:	90 93 35 23 	sts	0x2335, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    3e32:	e8 a1       	ldd	r30, Y+32	; 0x20
    3e34:	f9 a1       	ldd	r31, Y+33	; 0x21
    3e36:	ee 0f       	add	r30, r30
    3e38:	ff 1f       	adc	r31, r31
    3e3a:	ee 0f       	add	r30, r30
    3e3c:	ff 1f       	adc	r31, r31
    3e3e:	8f 01       	movw	r16, r30
    3e40:	0f 5e       	subi	r16, 0xEF	; 239
    3e42:	1c 4d       	sbci	r17, 0xDC	; 220
    3e44:	ec 59       	subi	r30, 0x9C	; 156
    3e46:	fe 4d       	sbci	r31, 0xDE	; 222
    3e48:	61 81       	ldd	r22, Z+1	; 0x01
    3e4a:	72 81       	ldd	r23, Z+2	; 0x02
    3e4c:	83 81       	ldd	r24, Z+3	; 0x03
    3e4e:	94 81       	ldd	r25, Z+4	; 0x04
    3e50:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    3e54:	20 91 f4 22 	lds	r18, 0x22F4
    3e58:	30 91 f5 22 	lds	r19, 0x22F5
    3e5c:	40 91 f6 22 	lds	r20, 0x22F6
    3e60:	50 91 f7 22 	lds	r21, 0x22F7
    3e64:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    3e68:	d8 01       	movw	r26, r16
    3e6a:	1d 96       	adiw	r26, 0x0d	; 13
    3e6c:	6d 93       	st	X+, r22
    3e6e:	7d 93       	st	X+, r23
    3e70:	8d 93       	st	X+, r24
    3e72:	9c 93       	st	X, r25
    3e74:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	80 93 11 23 	sts	0x2311, r24
	return (mc_arc_continue());
    3e7c:	0e 94 b7 1c 	call	0x396e	; 0x396e <mc_arc_continue>
    3e80:	9c 01       	movw	r18, r24
}
    3e82:	c9 01       	movw	r24, r18
    3e84:	28 96       	adiw	r28, 0x08	; 8
    3e86:	cd bf       	out	0x3d, r28	; 61
    3e88:	de bf       	out	0x3e, r29	; 62
    3e8a:	cf 91       	pop	r28
    3e8c:	df 91       	pop	r29
    3e8e:	1f 91       	pop	r17
    3e90:	0f 91       	pop	r16
    3e92:	ff 90       	pop	r15
    3e94:	ef 90       	pop	r14
    3e96:	df 90       	pop	r13
    3e98:	cf 90       	pop	r12
    3e9a:	bf 90       	pop	r11
    3e9c:	af 90       	pop	r10
    3e9e:	9f 90       	pop	r9
    3ea0:	8f 90       	pop	r8
    3ea2:	7f 90       	pop	r7
    3ea4:	6f 90       	pop	r6
    3ea6:	5f 90       	pop	r5
    3ea8:	4f 90       	pop	r4
    3eaa:	3f 90       	pop	r3
    3eac:	2f 90       	pop	r2
    3eae:	08 95       	ret

00003eb0 <mc_arc_blocking>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc_blocking(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    3eb0:	2f 92       	push	r2
    3eb2:	3f 92       	push	r3
    3eb4:	4f 92       	push	r4
    3eb6:	5f 92       	push	r5
    3eb8:	6f 92       	push	r6
    3eba:	7f 92       	push	r7
    3ebc:	8f 92       	push	r8
    3ebe:	9f 92       	push	r9
    3ec0:	af 92       	push	r10
    3ec2:	bf 92       	push	r11
    3ec4:	cf 92       	push	r12
    3ec6:	df 92       	push	r13
    3ec8:	ef 92       	push	r14
    3eca:	ff 92       	push	r15
    3ecc:	0f 93       	push	r16
    3ece:	1f 93       	push	r17
    3ed0:	df 93       	push	r29
    3ed2:	cf 93       	push	r28
    3ed4:	cd b7       	in	r28, 0x3d	; 61
    3ed6:	de b7       	in	r29, 0x3e	; 62
    3ed8:	28 97       	sbiw	r28, 0x08	; 8
    3eda:	cd bf       	out	0x3d, r28	; 61
    3edc:	de bf       	out	0x3e, r29	; 62
    3ede:	69 83       	std	Y+1, r22	; 0x01
    3ee0:	7a 83       	std	Y+2, r23	; 0x02
    3ee2:	8b 83       	std	Y+3, r24	; 0x03
    3ee4:	9c 83       	std	Y+4, r25	; 0x04
    3ee6:	29 01       	movw	r4, r18
    3ee8:	3a 01       	movw	r6, r20
    3eea:	ed 82       	std	Y+5, r14	; 0x05
    3eec:	fe 82       	std	Y+6, r15	; 0x06
    3eee:	0f 83       	std	Y+7, r16	; 0x07
    3ef0:	18 87       	std	Y+8, r17	; 0x08
    3ef2:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3ef4:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3ef6:	60 93 36 23 	sts	0x2336, r22
    3efa:	70 93 37 23 	sts	0x2337, r23
    3efe:	80 93 38 23 	sts	0x2338, r24
    3f02:	90 93 39 23 	sts	0x2339, r25
	ma.radius = radius;
    3f06:	e0 92 3a 23 	sts	0x233A, r14
    3f0a:	f0 92 3b 23 	sts	0x233B, r15
    3f0e:	00 93 3c 23 	sts	0x233C, r16
    3f12:	10 93 3d 23 	sts	0x233D, r17
	ma.angular_travel = angular_travel;
    3f16:	20 93 4a 23 	sts	0x234A, r18
    3f1a:	30 93 4b 23 	sts	0x234B, r19
    3f1e:	40 93 4c 23 	sts	0x234C, r20
    3f22:	50 93 4d 23 	sts	0x234D, r21
	ma.linear_travel = linear_travel;
    3f26:	a0 92 4e 23 	sts	0x234E, r10
    3f2a:	b0 92 4f 23 	sts	0x234F, r11
    3f2e:	c0 92 50 23 	sts	0x2350, r12
    3f32:	d0 92 51 23 	sts	0x2351, r13
	ma.feed_rate = feed_rate;
    3f36:	8a a1       	ldd	r24, Y+34	; 0x22
    3f38:	9b a1       	ldd	r25, Y+35	; 0x23
    3f3a:	ac a1       	ldd	r26, Y+36	; 0x24
    3f3c:	bd a1       	ldd	r27, Y+37	; 0x25
    3f3e:	80 93 3e 23 	sts	0x233E, r24
    3f42:	90 93 3f 23 	sts	0x233F, r25
    3f46:	a0 93 40 23 	sts	0x2340, r26
    3f4a:	b0 93 41 23 	sts	0x2341, r27
	ma.invert_feed_rate = invert_feed_rate;
    3f4e:	ae a1       	ldd	r26, Y+38	; 0x26
    3f50:	bf a1       	ldd	r27, Y+39	; 0x27
    3f52:	a0 93 16 23 	sts	0x2316, r26
    3f56:	b0 93 17 23 	sts	0x2317, r27
	ma.axis_1 = axis_1;
    3f5a:	80 92 18 23 	sts	0x2318, r8
    3f5e:	90 92 19 23 	sts	0x2319, r9
	ma.axis_2 = axis_2;
    3f62:	20 92 1a 23 	sts	0x231A, r2
    3f66:	30 92 1b 23 	sts	0x231B, r3
	ma.axis_linear = axis_linear;
    3f6a:	e8 a1       	ldd	r30, Y+32	; 0x20
    3f6c:	f9 a1       	ldd	r31, Y+33	; 0x21
    3f6e:	e0 93 1c 23 	sts	0x231C, r30
    3f72:	f0 93 1d 23 	sts	0x231D, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3f76:	ca 01       	movw	r24, r20
    3f78:	b9 01       	movw	r22, r18
    3f7a:	a8 01       	movw	r20, r16
    3f7c:	97 01       	movw	r18, r14
    3f7e:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    3f82:	7b 01       	movw	r14, r22
    3f84:	8c 01       	movw	r16, r24
    3f86:	c6 01       	movw	r24, r12
    3f88:	b5 01       	movw	r22, r10
    3f8a:	0e 94 a6 40 	call	0x814c	; 0x814c <__fixsfsi>
    3f8e:	97 ff       	sbrs	r25, 7
    3f90:	07 c0       	rjmp	.+14     	; 0x3fa0 <mc_arc_blocking+0xf0>
    3f92:	90 95       	com	r25
    3f94:	80 95       	com	r24
    3f96:	70 95       	com	r23
    3f98:	61 95       	neg	r22
    3f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f9c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3fa0:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    3fa4:	9b 01       	movw	r18, r22
    3fa6:	ac 01       	movw	r20, r24
    3fa8:	c8 01       	movw	r24, r16
    3faa:	b7 01       	movw	r22, r14
    3fac:	0e 94 34 42 	call	0x8468	; 0x8468 <hypot>
    3fb0:	7b 01       	movw	r14, r22
    3fb2:	8c 01       	movw	r16, r24
    3fb4:	60 93 2a 23 	sts	0x232A, r22
    3fb8:	70 93 2b 23 	sts	0x232B, r23
    3fbc:	80 93 2c 23 	sts	0x232C, r24
    3fc0:	90 93 2d 23 	sts	0x232D, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3fc4:	2d ec       	ldi	r18, 0xCD	; 205
    3fc6:	3c ec       	ldi	r19, 0xCC	; 204
    3fc8:	4c e4       	ldi	r20, 0x4C	; 76
    3fca:	5d e3       	ldi	r21, 0x3D	; 61
    3fcc:	0e 94 37 40 	call	0x806e	; 0x806e <__cmpsf2>
    3fd0:	88 23       	and	r24, r24
    3fd2:	1c f4       	brge	.+6      	; 0x3fda <mc_arc_blocking+0x12a>
    3fd4:	23 e1       	ldi	r18, 0x13	; 19
    3fd6:	30 e0       	ldi	r19, 0x00	; 0
    3fd8:	c7 c1       	rjmp	.+910    	; 0x4368 <mc_arc_blocking+0x4b8>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3fda:	c8 01       	movw	r24, r16
    3fdc:	b7 01       	movw	r22, r14
    3fde:	20 91 a5 22 	lds	r18, 0x22A5
    3fe2:	30 91 a6 22 	lds	r19, 0x22A6
    3fe6:	40 91 a7 22 	lds	r20, 0x22A7
    3fea:	50 91 a8 22 	lds	r21, 0x22A8
    3fee:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    3ff2:	0e 94 24 40 	call	0x8048	; 0x8048 <ceil>
    3ff6:	0e 94 a6 40 	call	0x814c	; 0x814c <__fixsfsi>
    3ffa:	8b 01       	movw	r16, r22
    3ffc:	60 93 12 23 	sts	0x2312, r22
    4000:	70 93 13 23 	sts	0x2313, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    4004:	2e a1       	ldd	r18, Y+38	; 0x26
    4006:	3f a1       	ldd	r19, Y+39	; 0x27
    4008:	23 2b       	or	r18, r19
    400a:	b9 f0       	breq	.+46     	; 0x403a <mc_arc_blocking+0x18a>
		ma.feed_rate *= ma.segments; 
    400c:	b8 01       	movw	r22, r16
    400e:	88 27       	eor	r24, r24
    4010:	77 fd       	sbrc	r23, 7
    4012:	80 95       	com	r24
    4014:	98 2f       	mov	r25, r24
    4016:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    401a:	9b 01       	movw	r18, r22
    401c:	ac 01       	movw	r20, r24
    401e:	6a a1       	ldd	r22, Y+34	; 0x22
    4020:	7b a1       	ldd	r23, Y+35	; 0x23
    4022:	8c a1       	ldd	r24, Y+36	; 0x24
    4024:	9d a1       	ldd	r25, Y+37	; 0x25
    4026:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    402a:	60 93 3e 23 	sts	0x233E, r22
    402e:	70 93 3f 23 	sts	0x233F, r23
    4032:	80 93 40 23 	sts	0x2340, r24
    4036:	90 93 41 23 	sts	0x2341, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    403a:	b8 01       	movw	r22, r16
    403c:	88 27       	eor	r24, r24
    403e:	77 fd       	sbrc	r23, 7
    4040:	80 95       	com	r24
    4042:	98 2f       	mov	r25, r24
    4044:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    4048:	7b 01       	movw	r14, r22
    404a:	8c 01       	movw	r16, r24
    404c:	c3 01       	movw	r24, r6
    404e:	b2 01       	movw	r22, r4
    4050:	a8 01       	movw	r20, r16
    4052:	97 01       	movw	r18, r14
    4054:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    4058:	60 93 42 23 	sts	0x2342, r22
    405c:	70 93 43 23 	sts	0x2343, r23
    4060:	80 93 44 23 	sts	0x2344, r24
    4064:	90 93 45 23 	sts	0x2345, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    4068:	c6 01       	movw	r24, r12
    406a:	b5 01       	movw	r22, r10
    406c:	a8 01       	movw	r20, r16
    406e:	97 01       	movw	r18, r14
    4070:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    4074:	60 93 46 23 	sts	0x2346, r22
    4078:	70 93 47 23 	sts	0x2347, r23
    407c:	80 93 48 23 	sts	0x2348, r24
    4080:	90 93 49 23 	sts	0x2349, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    4084:	69 81       	ldd	r22, Y+1	; 0x01
    4086:	7a 81       	ldd	r23, Y+2	; 0x02
    4088:	8b 81       	ldd	r24, Y+3	; 0x03
    408a:	9c 81       	ldd	r25, Y+4	; 0x04
    408c:	0e 94 5c 43 	call	0x86b8	; 0x86b8 <sin>
    4090:	5b 01       	movw	r10, r22
    4092:	6c 01       	movw	r12, r24
    4094:	f4 01       	movw	r30, r8
    4096:	ee 0f       	add	r30, r30
    4098:	ff 1f       	adc	r31, r31
    409a:	ee 0f       	add	r30, r30
    409c:	ff 1f       	adc	r31, r31
    409e:	ec 59       	subi	r30, 0x9C	; 156
    40a0:	fe 4d       	sbci	r31, 0xDE	; 222
    40a2:	61 81       	ldd	r22, Z+1	; 0x01
    40a4:	72 81       	ldd	r23, Z+2	; 0x02
    40a6:	83 81       	ldd	r24, Z+3	; 0x03
    40a8:	94 81       	ldd	r25, Z+4	; 0x04
    40aa:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    40ae:	f4 01       	movw	r30, r8
    40b0:	ee 0f       	add	r30, r30
    40b2:	ff 1f       	adc	r31, r31
    40b4:	e8 0d       	add	r30, r8
    40b6:	f9 1d       	adc	r31, r9
    40b8:	13 e0       	ldi	r17, 0x03	; 3
    40ba:	ee 0f       	add	r30, r30
    40bc:	ff 1f       	adc	r31, r31
    40be:	1a 95       	dec	r17
    40c0:	e1 f7       	brne	.-8      	; 0x40ba <mc_arc_blocking+0x20a>
    40c2:	ed 55       	subi	r30, 0x5D	; 93
    40c4:	fd 4d       	sbci	r31, 0xDD	; 221
    40c6:	21 a1       	ldd	r18, Z+33	; 0x21
    40c8:	32 a1       	ldd	r19, Z+34	; 0x22
    40ca:	43 a1       	ldd	r20, Z+35	; 0x23
    40cc:	54 a1       	ldd	r21, Z+36	; 0x24
    40ce:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    40d2:	7b 01       	movw	r14, r22
    40d4:	8c 01       	movw	r16, r24
    40d6:	c6 01       	movw	r24, r12
    40d8:	b5 01       	movw	r22, r10
    40da:	2d 81       	ldd	r18, Y+5	; 0x05
    40dc:	3e 81       	ldd	r19, Y+6	; 0x06
    40de:	4f 81       	ldd	r20, Y+7	; 0x07
    40e0:	58 85       	ldd	r21, Y+8	; 0x08
    40e2:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    40e6:	9b 01       	movw	r18, r22
    40e8:	ac 01       	movw	r20, r24
    40ea:	c8 01       	movw	r24, r16
    40ec:	b7 01       	movw	r22, r14
    40ee:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    40f2:	60 93 2e 23 	sts	0x232E, r22
    40f6:	70 93 2f 23 	sts	0x232F, r23
    40fa:	80 93 30 23 	sts	0x2330, r24
    40fe:	90 93 31 23 	sts	0x2331, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    4102:	69 81       	ldd	r22, Y+1	; 0x01
    4104:	7a 81       	ldd	r23, Y+2	; 0x02
    4106:	8b 81       	ldd	r24, Y+3	; 0x03
    4108:	9c 81       	ldd	r25, Y+4	; 0x04
    410a:	0e 94 3b 40 	call	0x8076	; 0x8076 <cos>
    410e:	5b 01       	movw	r10, r22
    4110:	6c 01       	movw	r12, r24
    4112:	f1 01       	movw	r30, r2
    4114:	ee 0f       	add	r30, r30
    4116:	ff 1f       	adc	r31, r31
    4118:	ee 0f       	add	r30, r30
    411a:	ff 1f       	adc	r31, r31
    411c:	ec 59       	subi	r30, 0x9C	; 156
    411e:	fe 4d       	sbci	r31, 0xDE	; 222
    4120:	61 81       	ldd	r22, Z+1	; 0x01
    4122:	72 81       	ldd	r23, Z+2	; 0x02
    4124:	83 81       	ldd	r24, Z+3	; 0x03
    4126:	94 81       	ldd	r25, Z+4	; 0x04
    4128:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    412c:	f1 01       	movw	r30, r2
    412e:	ee 0f       	add	r30, r30
    4130:	ff 1f       	adc	r31, r31
    4132:	e2 0d       	add	r30, r2
    4134:	f3 1d       	adc	r31, r3
    4136:	53 e0       	ldi	r21, 0x03	; 3
    4138:	ee 0f       	add	r30, r30
    413a:	ff 1f       	adc	r31, r31
    413c:	5a 95       	dec	r21
    413e:	e1 f7       	brne	.-8      	; 0x4138 <mc_arc_blocking+0x288>
    4140:	ed 55       	subi	r30, 0x5D	; 93
    4142:	fd 4d       	sbci	r31, 0xDD	; 221
    4144:	21 a1       	ldd	r18, Z+33	; 0x21
    4146:	32 a1       	ldd	r19, Z+34	; 0x22
    4148:	43 a1       	ldd	r20, Z+35	; 0x23
    414a:	54 a1       	ldd	r21, Z+36	; 0x24
    414c:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    4150:	7b 01       	movw	r14, r22
    4152:	8c 01       	movw	r16, r24
    4154:	c6 01       	movw	r24, r12
    4156:	b5 01       	movw	r22, r10
    4158:	2d 81       	ldd	r18, Y+5	; 0x05
    415a:	3e 81       	ldd	r19, Y+6	; 0x06
    415c:	4f 81       	ldd	r20, Y+7	; 0x07
    415e:	58 85       	ldd	r21, Y+8	; 0x08
    4160:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    4164:	9b 01       	movw	r18, r22
    4166:	ac 01       	movw	r20, r24
    4168:	c8 01       	movw	r24, r16
    416a:	b7 01       	movw	r22, r14
    416c:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <__subsf3>
    4170:	60 93 32 23 	sts	0x2332, r22
    4174:	70 93 33 23 	sts	0x2333, r23
    4178:	80 93 34 23 	sts	0x2334, r24
    417c:	90 93 35 23 	sts	0x2335, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    4180:	e8 a1       	ldd	r30, Y+32	; 0x20
    4182:	f9 a1       	ldd	r31, Y+33	; 0x21
    4184:	ee 0f       	add	r30, r30
    4186:	ff 1f       	adc	r31, r31
    4188:	ee 0f       	add	r30, r30
    418a:	ff 1f       	adc	r31, r31
    418c:	8f 01       	movw	r16, r30
    418e:	0f 5e       	subi	r16, 0xEF	; 239
    4190:	1c 4d       	sbci	r17, 0xDC	; 220
    4192:	ec 59       	subi	r30, 0x9C	; 156
    4194:	fe 4d       	sbci	r31, 0xDE	; 222
    4196:	61 81       	ldd	r22, Z+1	; 0x01
    4198:	72 81       	ldd	r23, Z+2	; 0x02
    419a:	83 81       	ldd	r24, Z+3	; 0x03
    419c:	94 81       	ldd	r25, Z+4	; 0x04
    419e:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    41a2:	20 91 f4 22 	lds	r18, 0x22F4
    41a6:	30 91 f5 22 	lds	r19, 0x22F5
    41aa:	40 91 f6 22 	lds	r20, 0x22F6
    41ae:	50 91 f7 22 	lds	r21, 0x22F7
    41b2:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    41b6:	d8 01       	movw	r26, r16
    41b8:	1d 96       	adiw	r26, 0x0d	; 13
    41ba:	6d 93       	st	X+, r22
    41bc:	7d 93       	st	X+, r23
    41be:	8d 93       	st	X+, r24
    41c0:	9c 93       	st	X, r25
    41c2:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    41c4:	10 92 14 23 	sts	0x2314, r1
    41c8:	10 92 15 23 	sts	0x2315, r1
    41cc:	bf c0       	rjmp	.+382    	; 0x434c <mc_arc_blocking+0x49c>
		ma.theta += ma.theta_per_segment;
    41ce:	60 91 36 23 	lds	r22, 0x2336
    41d2:	70 91 37 23 	lds	r23, 0x2337
    41d6:	80 91 38 23 	lds	r24, 0x2338
    41da:	90 91 39 23 	lds	r25, 0x2339
    41de:	20 91 42 23 	lds	r18, 0x2342
    41e2:	30 91 43 23 	lds	r19, 0x2343
    41e6:	40 91 44 23 	lds	r20, 0x2344
    41ea:	50 91 45 23 	lds	r21, 0x2345
    41ee:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <__addsf3>
    41f2:	7b 01       	movw	r14, r22
    41f4:	8c 01       	movw	r16, r24
    41f6:	cb 01       	movw	r24, r22
    41f8:	d8 01       	movw	r26, r16
    41fa:	80 93 36 23 	sts	0x2336, r24
    41fe:	90 93 37 23 	sts	0x2337, r25
    4202:	a0 93 38 23 	sts	0x2338, r26
    4206:	b0 93 39 23 	sts	0x2339, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    420a:	b7 01       	movw	r22, r14
    420c:	c8 01       	movw	r24, r16
    420e:	0e 94 5c 43 	call	0x86b8	; 0x86b8 <sin>
    4212:	80 90 3a 23 	lds	r8, 0x233A
    4216:	90 90 3b 23 	lds	r9, 0x233B
    421a:	a0 90 3c 23 	lds	r10, 0x233C
    421e:	b0 90 3d 23 	lds	r11, 0x233D
    4222:	c0 90 18 23 	lds	r12, 0x2318
    4226:	d0 90 19 23 	lds	r13, 0x2319
    422a:	cc 0c       	add	r12, r12
    422c:	dd 1c       	adc	r13, r13
    422e:	cc 0c       	add	r12, r12
    4230:	dd 1c       	adc	r13, r13
    4232:	e1 e1       	ldi	r30, 0x11	; 17
    4234:	f3 e2       	ldi	r31, 0x23	; 35
    4236:	ce 0e       	add	r12, r30
    4238:	df 1e       	adc	r13, r31
    423a:	a5 01       	movw	r20, r10
    423c:	94 01       	movw	r18, r8
    423e:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    4242:	9b 01       	movw	r18, r22
    4244:	ac 01       	movw	r20, r24
    4246:	60 91 2e 23 	lds	r22, 0x232E
    424a:	70 91 2f 23 	lds	r23, 0x232F
    424e:	80 91 30 23 	lds	r24, 0x2330
    4252:	90 91 31 23 	lds	r25, 0x2331
    4256:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <__addsf3>
    425a:	d6 01       	movw	r26, r12
    425c:	1d 96       	adiw	r26, 0x0d	; 13
    425e:	6d 93       	st	X+, r22
    4260:	7d 93       	st	X+, r23
    4262:	8d 93       	st	X+, r24
    4264:	9c 93       	st	X, r25
    4266:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    4268:	b7 01       	movw	r22, r14
    426a:	c8 01       	movw	r24, r16
    426c:	0e 94 3b 40 	call	0x8076	; 0x8076 <cos>
    4270:	00 91 1a 23 	lds	r16, 0x231A
    4274:	10 91 1b 23 	lds	r17, 0x231B
    4278:	00 0f       	add	r16, r16
    427a:	11 1f       	adc	r17, r17
    427c:	00 0f       	add	r16, r16
    427e:	11 1f       	adc	r17, r17
    4280:	0f 5e       	subi	r16, 0xEF	; 239
    4282:	1c 4d       	sbci	r17, 0xDC	; 220
    4284:	a5 01       	movw	r20, r10
    4286:	94 01       	movw	r18, r8
    4288:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    428c:	9b 01       	movw	r18, r22
    428e:	ac 01       	movw	r20, r24
    4290:	60 91 32 23 	lds	r22, 0x2332
    4294:	70 91 33 23 	lds	r23, 0x2333
    4298:	80 91 34 23 	lds	r24, 0x2334
    429c:	90 91 35 23 	lds	r25, 0x2335
    42a0:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <__addsf3>
    42a4:	f8 01       	movw	r30, r16
    42a6:	65 87       	std	Z+13, r22	; 0x0d
    42a8:	76 87       	std	Z+14, r23	; 0x0e
    42aa:	87 87       	std	Z+15, r24	; 0x0f
    42ac:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    42ae:	00 91 1c 23 	lds	r16, 0x231C
    42b2:	10 91 1d 23 	lds	r17, 0x231D
    42b6:	00 0f       	add	r16, r16
    42b8:	11 1f       	adc	r17, r17
    42ba:	00 0f       	add	r16, r16
    42bc:	11 1f       	adc	r17, r17
    42be:	0f 5e       	subi	r16, 0xEF	; 239
    42c0:	1c 4d       	sbci	r17, 0xDC	; 220
    42c2:	d8 01       	movw	r26, r16
    42c4:	1d 96       	adiw	r26, 0x0d	; 13
    42c6:	6d 91       	ld	r22, X+
    42c8:	7d 91       	ld	r23, X+
    42ca:	8d 91       	ld	r24, X+
    42cc:	9c 91       	ld	r25, X
    42ce:	50 97       	sbiw	r26, 0x10	; 16
    42d0:	20 91 46 23 	lds	r18, 0x2346
    42d4:	30 91 47 23 	lds	r19, 0x2347
    42d8:	40 91 48 23 	lds	r20, 0x2348
    42dc:	50 91 49 23 	lds	r21, 0x2349
    42e0:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <__addsf3>
    42e4:	f8 01       	movw	r30, r16
    42e6:	65 87       	std	Z+13, r22	; 0x0d
    42e8:	76 87       	std	Z+14, r23	; 0x0e
    42ea:	87 87       	std	Z+15, r24	; 0x0f
    42ec:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    42ee:	60 91 1e 23 	lds	r22, 0x231E
    42f2:	70 91 1f 23 	lds	r23, 0x231F
    42f6:	80 91 20 23 	lds	r24, 0x2320
    42fa:	90 91 21 23 	lds	r25, 0x2321
    42fe:	20 91 22 23 	lds	r18, 0x2322
    4302:	30 91 23 23 	lds	r19, 0x2323
    4306:	40 91 24 23 	lds	r20, 0x2324
    430a:	50 91 25 23 	lds	r21, 0x2325
    430e:	e0 90 26 23 	lds	r14, 0x2326
    4312:	f0 90 27 23 	lds	r15, 0x2327
    4316:	00 91 28 23 	lds	r16, 0x2328
    431a:	10 91 29 23 	lds	r17, 0x2329
    431e:	a0 90 3e 23 	lds	r10, 0x233E
    4322:	b0 90 3f 23 	lds	r11, 0x233F
    4326:	c0 90 40 23 	lds	r12, 0x2340
    432a:	d0 90 41 23 	lds	r13, 0x2341
    432e:	80 90 16 23 	lds	r8, 0x2316
    4332:	90 90 17 23 	lds	r9, 0x2317
    4336:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    433a:	80 91 14 23 	lds	r24, 0x2314
    433e:	90 91 15 23 	lds	r25, 0x2315
    4342:	01 96       	adiw	r24, 0x01	; 1
    4344:	80 93 14 23 	sts	0x2314, r24
    4348:	90 93 15 23 	sts	0x2315, r25
    434c:	20 91 14 23 	lds	r18, 0x2314
    4350:	30 91 15 23 	lds	r19, 0x2315
    4354:	80 91 12 23 	lds	r24, 0x2312
    4358:	90 91 13 23 	lds	r25, 0x2313
    435c:	82 17       	cp	r24, r18
    435e:	93 07       	cpc	r25, r19
    4360:	0c f0       	brlt	.+2      	; 0x4364 <mc_arc_blocking+0x4b4>
    4362:	35 cf       	rjmp	.-406    	; 0x41ce <mc_arc_blocking+0x31e>
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	30 e0       	ldi	r19, 0x00	; 0
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    4368:	c9 01       	movw	r24, r18
    436a:	28 96       	adiw	r28, 0x08	; 8
    436c:	cd bf       	out	0x3d, r28	; 61
    436e:	de bf       	out	0x3e, r29	; 62
    4370:	cf 91       	pop	r28
    4372:	df 91       	pop	r29
    4374:	1f 91       	pop	r17
    4376:	0f 91       	pop	r16
    4378:	ff 90       	pop	r15
    437a:	ef 90       	pop	r14
    437c:	df 90       	pop	r13
    437e:	cf 90       	pop	r12
    4380:	bf 90       	pop	r11
    4382:	af 90       	pop	r10
    4384:	9f 90       	pop	r9
    4386:	8f 90       	pop	r8
    4388:	7f 90       	pop	r7
    438a:	6f 90       	pop	r6
    438c:	5f 90       	pop	r5
    438e:	4f 90       	pop	r4
    4390:	3f 90       	pop	r3
    4392:	2f 90       	pop	r2
    4394:	08 95       	ret

00004396 <mc_line_blocking>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line_blocking(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    4396:	2f 92       	push	r2
    4398:	3f 92       	push	r3
    439a:	4f 92       	push	r4
    439c:	5f 92       	push	r5
    439e:	6f 92       	push	r6
    43a0:	7f 92       	push	r7
    43a2:	8f 92       	push	r8
    43a4:	9f 92       	push	r9
    43a6:	af 92       	push	r10
    43a8:	bf 92       	push	r11
    43aa:	cf 92       	push	r12
    43ac:	df 92       	push	r13
    43ae:	ef 92       	push	r14
    43b0:	ff 92       	push	r15
    43b2:	0f 93       	push	r16
    43b4:	1f 93       	push	r17
    43b6:	df 93       	push	r29
    43b8:	cf 93       	push	r28
    43ba:	cd b7       	in	r28, 0x3d	; 61
    43bc:	de b7       	in	r29, 0x3e	; 62
    43be:	6a 97       	sbiw	r28, 0x1a	; 26
    43c0:	cd bf       	out	0x3d, r28	; 61
    43c2:	de bf       	out	0x3e, r29	; 62
    43c4:	19 01       	movw	r2, r18
    43c6:	2a 01       	movw	r4, r20
    43c8:	ad 8a       	std	Y+21, r10	; 0x15
    43ca:	be 8a       	std	Y+22, r11	; 0x16
    43cc:	cf 8a       	std	Y+23, r12	; 0x17
    43ce:	d8 8e       	std	Y+24, r13	; 0x18
    43d0:	89 8e       	std	Y+25, r8	; 0x19
    43d2:	9a 8e       	std	Y+26, r9	; 0x1a
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    43d4:	20 91 c4 22 	lds	r18, 0x22C4
    43d8:	30 91 c5 22 	lds	r19, 0x22C5
    43dc:	40 91 c6 22 	lds	r20, 0x22C6
    43e0:	50 91 c7 22 	lds	r21, 0x22C7
    43e4:	29 8b       	std	Y+17, r18	; 0x11
    43e6:	3a 8b       	std	Y+18, r19	; 0x12
    43e8:	4b 8b       	std	Y+19, r20	; 0x13
    43ea:	5c 8b       	std	Y+20, r21	; 0x14
    43ec:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    43f0:	0e 94 c9 42 	call	0x8592	; 0x8592 <lround>
    43f4:	3b 01       	movw	r6, r22
    43f6:	4c 01       	movw	r8, r24
    43f8:	60 92 71 21 	sts	0x2171, r6
    43fc:	70 92 72 21 	sts	0x2172, r7
    4400:	80 92 73 21 	sts	0x2173, r8
    4404:	90 92 74 21 	sts	0x2174, r9
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    4408:	80 91 dc 22 	lds	r24, 0x22DC
    440c:	90 91 dd 22 	lds	r25, 0x22DD
    4410:	a0 91 de 22 	lds	r26, 0x22DE
    4414:	b0 91 df 22 	lds	r27, 0x22DF
    4418:	8d 87       	std	Y+13, r24	; 0x0d
    441a:	9e 87       	std	Y+14, r25	; 0x0e
    441c:	af 87       	std	Y+15, r26	; 0x0f
    441e:	b8 8b       	std	Y+16, r27	; 0x10
    4420:	c2 01       	movw	r24, r4
    4422:	b1 01       	movw	r22, r2
    4424:	2d 85       	ldd	r18, Y+13	; 0x0d
    4426:	3e 85       	ldd	r19, Y+14	; 0x0e
    4428:	4f 85       	ldd	r20, Y+15	; 0x0f
    442a:	58 89       	ldd	r21, Y+16	; 0x10
    442c:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    4430:	0e 94 c9 42 	call	0x8592	; 0x8592 <lround>
    4434:	5b 01       	movw	r10, r22
    4436:	6c 01       	movw	r12, r24
    4438:	a0 92 75 21 	sts	0x2175, r10
    443c:	b0 92 76 21 	sts	0x2176, r11
    4440:	c0 92 77 21 	sts	0x2177, r12
    4444:	d0 92 78 21 	sts	0x2178, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    4448:	20 91 f4 22 	lds	r18, 0x22F4
    444c:	30 91 f5 22 	lds	r19, 0x22F5
    4450:	40 91 f6 22 	lds	r20, 0x22F6
    4454:	50 91 f7 22 	lds	r21, 0x22F7
    4458:	29 87       	std	Y+9, r18	; 0x09
    445a:	3a 87       	std	Y+10, r19	; 0x0a
    445c:	4b 87       	std	Y+11, r20	; 0x0b
    445e:	5c 87       	std	Y+12, r21	; 0x0c
    4460:	c8 01       	movw	r24, r16
    4462:	b7 01       	movw	r22, r14
    4464:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    4468:	0e 94 c9 42 	call	0x8592	; 0x8592 <lround>
    446c:	9b 01       	movw	r18, r22
    446e:	ac 01       	movw	r20, r24
    4470:	20 93 79 21 	sts	0x2179, r18
    4474:	30 93 7a 21 	sts	0x217A, r19
    4478:	40 93 7b 21 	sts	0x217B, r20
    447c:	50 93 7c 21 	sts	0x217C, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    4480:	80 91 65 21 	lds	r24, 0x2165
    4484:	90 91 66 21 	lds	r25, 0x2166
    4488:	a0 91 67 21 	lds	r26, 0x2167
    448c:	b0 91 68 21 	lds	r27, 0x2168
    4490:	84 01       	movw	r16, r8
    4492:	73 01       	movw	r14, r6
    4494:	e8 1a       	sub	r14, r24
    4496:	f9 0a       	sbc	r15, r25
    4498:	0a 0b       	sbc	r16, r26
    449a:	1b 0b       	sbc	r17, r27
    449c:	ed 82       	std	Y+5, r14	; 0x05
    449e:	fe 82       	std	Y+6, r15	; 0x06
    44a0:	0f 83       	std	Y+7, r16	; 0x07
    44a2:	18 87       	std	Y+8, r17	; 0x08
    44a4:	e0 92 7d 21 	sts	0x217D, r14
    44a8:	f0 92 7e 21 	sts	0x217E, r15
    44ac:	00 93 7f 21 	sts	0x217F, r16
    44b0:	10 93 80 21 	sts	0x2180, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    44b4:	80 91 69 21 	lds	r24, 0x2169
    44b8:	90 91 6a 21 	lds	r25, 0x216A
    44bc:	a0 91 6b 21 	lds	r26, 0x216B
    44c0:	b0 91 6c 21 	lds	r27, 0x216C
    44c4:	86 01       	movw	r16, r12
    44c6:	75 01       	movw	r14, r10
    44c8:	e8 1a       	sub	r14, r24
    44ca:	f9 0a       	sbc	r15, r25
    44cc:	0a 0b       	sbc	r16, r26
    44ce:	1b 0b       	sbc	r17, r27
    44d0:	e9 82       	std	Y+1, r14	; 0x01
    44d2:	fa 82       	std	Y+2, r15	; 0x02
    44d4:	0b 83       	std	Y+3, r16	; 0x03
    44d6:	1c 83       	std	Y+4, r17	; 0x04
    44d8:	e0 92 81 21 	sts	0x2181, r14
    44dc:	f0 92 82 21 	sts	0x2182, r15
    44e0:	00 93 83 21 	sts	0x2183, r16
    44e4:	10 93 84 21 	sts	0x2184, r17
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    44e8:	80 91 6d 21 	lds	r24, 0x216D
    44ec:	90 91 6e 21 	lds	r25, 0x216E
    44f0:	a0 91 6f 21 	lds	r26, 0x216F
    44f4:	b0 91 70 21 	lds	r27, 0x2170
    44f8:	19 01       	movw	r2, r18
    44fa:	2a 01       	movw	r4, r20
    44fc:	28 1a       	sub	r2, r24
    44fe:	39 0a       	sbc	r3, r25
    4500:	4a 0a       	sbc	r4, r26
    4502:	5b 0a       	sbc	r5, r27
    4504:	20 92 85 21 	sts	0x2185, r2
    4508:	30 92 86 21 	sts	0x2186, r3
    450c:	40 92 87 21 	sts	0x2187, r4
    4510:	50 92 88 21 	sts	0x2188, r5

	// skip zero length lines
	if ((mc.steps[X] + mc.steps[Y] + mc.steps[Z]) == 0) {
    4514:	d8 01       	movw	r26, r16
    4516:	c7 01       	movw	r24, r14
    4518:	0d 81       	ldd	r16, Y+5	; 0x05
    451a:	1e 81       	ldd	r17, Y+6	; 0x06
    451c:	2f 81       	ldd	r18, Y+7	; 0x07
    451e:	38 85       	ldd	r19, Y+8	; 0x08
    4520:	80 0f       	add	r24, r16
    4522:	91 1f       	adc	r25, r17
    4524:	a2 1f       	adc	r26, r18
    4526:	b3 1f       	adc	r27, r19
    4528:	82 0d       	add	r24, r2
    452a:	93 1d       	adc	r25, r3
    452c:	a4 1d       	adc	r26, r4
    452e:	b5 1d       	adc	r27, r5
    4530:	00 97       	sbiw	r24, 0x00	; 0
    4532:	a1 05       	cpc	r26, r1
    4534:	b1 05       	cpc	r27, r1
    4536:	19 f4       	brne	.+6      	; 0x453e <mc_line_blocking+0x1a8>
    4538:	24 e1       	ldi	r18, 0x14	; 20
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	86 c0       	rjmp	.+268    	; 0x464a <mc_line_blocking+0x2b4>
		return (TG_ZERO_LENGTH_LINE);
	}

	if (invert_feed_rate) {
    453e:	29 8d       	ldd	r18, Y+25	; 0x19
    4540:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4542:	23 2b       	or	r18, r19
    4544:	59 f0       	breq	.+22     	; 0x455c <mc_line_blocking+0x1c6>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    4546:	60 ec       	ldi	r22, 0xC0	; 192
    4548:	71 ee       	ldi	r23, 0xE1	; 225
    454a:	84 e6       	ldi	r24, 0x64	; 100
    454c:	9c e4       	ldi	r25, 0x4C	; 76
    454e:	2d 89       	ldd	r18, Y+21	; 0x15
    4550:	3e 89       	ldd	r19, Y+22	; 0x16
    4552:	4f 89       	ldd	r20, Y+23	; 0x17
    4554:	58 8d       	ldd	r21, Y+24	; 0x18
    4556:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    455a:	4e c0       	rjmp	.+156    	; 0x45f8 <mc_line_blocking+0x262>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    455c:	6d 81       	ldd	r22, Y+5	; 0x05
    455e:	7e 81       	ldd	r23, Y+6	; 0x06
    4560:	8f 81       	ldd	r24, Y+7	; 0x07
    4562:	98 85       	ldd	r25, Y+8	; 0x08
    4564:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    4568:	29 89       	ldd	r18, Y+17	; 0x11
    456a:	3a 89       	ldd	r19, Y+18	; 0x12
    456c:	4b 89       	ldd	r20, Y+19	; 0x13
    456e:	5c 89       	ldd	r21, Y+20	; 0x14
    4570:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    4574:	0e 94 a4 43 	call	0x8748	; 0x8748 <square>
    4578:	3b 01       	movw	r6, r22
    457a:	4c 01       	movw	r8, r24
    457c:	69 81       	ldd	r22, Y+1	; 0x01
    457e:	7a 81       	ldd	r23, Y+2	; 0x02
    4580:	8b 81       	ldd	r24, Y+3	; 0x03
    4582:	9c 81       	ldd	r25, Y+4	; 0x04
    4584:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    4588:	2d 85       	ldd	r18, Y+13	; 0x0d
    458a:	3e 85       	ldd	r19, Y+14	; 0x0e
    458c:	4f 85       	ldd	r20, Y+15	; 0x0f
    458e:	58 89       	ldd	r21, Y+16	; 0x10
    4590:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    4594:	0e 94 a4 43 	call	0x8748	; 0x8748 <square>
    4598:	5b 01       	movw	r10, r22
    459a:	6c 01       	movw	r12, r24
    459c:	c2 01       	movw	r24, r4
    459e:	b1 01       	movw	r22, r2
    45a0:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <__floatsisf>
    45a4:	29 85       	ldd	r18, Y+9	; 0x09
    45a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    45a8:	4b 85       	ldd	r20, Y+11	; 0x0b
    45aa:	5c 85       	ldd	r21, Y+12	; 0x0c
    45ac:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    45b0:	0e 94 a4 43 	call	0x8748	; 0x8748 <square>
    45b4:	7b 01       	movw	r14, r22
    45b6:	8c 01       	movw	r16, r24
    45b8:	c4 01       	movw	r24, r8
    45ba:	b3 01       	movw	r22, r6
    45bc:	a6 01       	movw	r20, r12
    45be:	95 01       	movw	r18, r10
    45c0:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <__addsf3>
    45c4:	a8 01       	movw	r20, r16
    45c6:	97 01       	movw	r18, r14
    45c8:	0e 94 98 3f 	call	0x7f30	; 0x7f30 <__addsf3>
    45cc:	0e 94 66 43 	call	0x86cc	; 0x86cc <sqrt>
    45d0:	60 93 8d 21 	sts	0x218D, r22
    45d4:	70 93 8e 21 	sts	0x218E, r23
    45d8:	80 93 8f 21 	sts	0x218F, r24
    45dc:	90 93 90 21 	sts	0x2190, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    45e0:	2d 89       	ldd	r18, Y+21	; 0x15
    45e2:	3e 89       	ldd	r19, Y+22	; 0x16
    45e4:	4f 89       	ldd	r20, Y+23	; 0x17
    45e6:	58 8d       	ldd	r21, Y+24	; 0x18
    45e8:	0e 94 3e 40 	call	0x807c	; 0x807c <__divsf3>
    45ec:	20 e0       	ldi	r18, 0x00	; 0
    45ee:	34 e2       	ldi	r19, 0x24	; 36
    45f0:	44 e7       	ldi	r20, 0x74	; 116
    45f2:	59 e4       	ldi	r21, 0x49	; 73
    45f4:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    45f8:	0e 94 c9 42 	call	0x8592	; 0x8592 <lround>
    45fc:	60 93 89 21 	sts	0x2189, r22
    4600:	70 93 8a 21 	sts	0x218A, r23
    4604:	80 93 8b 21 	sts	0x218B, r24
    4608:	90 93 8c 21 	sts	0x218C, r25
	}
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    460c:	a0 90 89 21 	lds	r10, 0x2189
    4610:	b0 90 8a 21 	lds	r11, 0x218A
    4614:	c0 90 8b 21 	lds	r12, 0x218B
    4618:	d0 90 8c 21 	lds	r13, 0x218C
    461c:	6d 81       	ldd	r22, Y+5	; 0x05
    461e:	7e 81       	ldd	r23, Y+6	; 0x06
    4620:	8f 81       	ldd	r24, Y+7	; 0x07
    4622:	98 85       	ldd	r25, Y+8	; 0x08
    4624:	29 81       	ldd	r18, Y+1	; 0x01
    4626:	3a 81       	ldd	r19, Y+2	; 0x02
    4628:	4b 81       	ldd	r20, Y+3	; 0x03
    462a:	5c 81       	ldd	r21, Y+4	; 0x04
    462c:	82 01       	movw	r16, r4
    462e:	71 01       	movw	r14, r2
    4630:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    4634:	e5 e6       	ldi	r30, 0x65	; 101
    4636:	f1 e2       	ldi	r31, 0x21	; 33
    4638:	df 01       	movw	r26, r30
    463a:	1c 96       	adiw	r26, 0x0c	; 12
    463c:	8c e0       	ldi	r24, 0x0C	; 12
    463e:	0d 90       	ld	r0, X+
    4640:	01 92       	st	Z+, r0
    4642:	81 50       	subi	r24, 0x01	; 1
    4644:	e1 f7       	brne	.-8      	; 0x463e <mc_line_blocking+0x2a8>
    4646:	20 e0       	ldi	r18, 0x00	; 0
    4648:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    464a:	c9 01       	movw	r24, r18
    464c:	6a 96       	adiw	r28, 0x1a	; 26
    464e:	cd bf       	out	0x3d, r28	; 61
    4650:	de bf       	out	0x3e, r29	; 62
    4652:	cf 91       	pop	r28
    4654:	df 91       	pop	r29
    4656:	1f 91       	pop	r17
    4658:	0f 91       	pop	r16
    465a:	ff 90       	pop	r15
    465c:	ef 90       	pop	r14
    465e:	df 90       	pop	r13
    4660:	cf 90       	pop	r12
    4662:	bf 90       	pop	r11
    4664:	af 90       	pop	r10
    4666:	9f 90       	pop	r9
    4668:	8f 90       	pop	r8
    466a:	7f 90       	pop	r7
    466c:	6f 90       	pop	r6
    466e:	5f 90       	pop	r5
    4670:	4f 90       	pop	r4
    4672:	3f 90       	pop	r3
    4674:	2f 90       	pop	r2
    4676:	08 95       	ret

00004678 <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    4678:	e0 e6       	ldi	r30, 0x60	; 96
    467a:	f6 e0       	ldi	r31, 0x06	; 6
    467c:	80 e4       	ldi	r24, 0x40	; 64
    467e:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    4680:	80 e8       	ldi	r24, 0x80	; 128
    4682:	81 83       	std	Z+1, r24	; 0x01
}
    4684:	08 95       	ret

00004686 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    4686:	97 fd       	sbrc	r25, 7
    4688:	05 c0       	rjmp	.+10     	; 0x4694 <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    468a:	80 e8       	ldi	r24, 0x80	; 128
    468c:	e0 e6       	ldi	r30, 0x60	; 96
    468e:	f6 e0       	ldi	r31, 0x06	; 6
    4690:	85 83       	std	Z+5, r24	; 0x05
    4692:	04 c0       	rjmp	.+8      	; 0x469c <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    4694:	80 e8       	ldi	r24, 0x80	; 128
    4696:	e0 e6       	ldi	r30, 0x60	; 96
    4698:	f6 e0       	ldi	r31, 0x06	; 6
    469a:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    469c:	80 e4       	ldi	r24, 0x40	; 64
    469e:	e0 e6       	ldi	r30, 0x60	; 96
    46a0:	f6 e0       	ldi	r31, 0x06	; 6
    46a2:	85 83       	std	Z+5, r24	; 0x05
}
    46a4:	08 95       	ret

000046a6 <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    46a6:	80 e4       	ldi	r24, 0x40	; 64
    46a8:	e0 e6       	ldi	r30, 0x60	; 96
    46aa:	f6 e0       	ldi	r31, 0x06	; 6
    46ac:	86 83       	std	Z+6, r24	; 0x06
}
    46ae:	08 95       	ret

000046b0 <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    46b0:	cf 93       	push	r28
    46b2:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    46b4:	10 92 60 22 	sts	0x2260, r1
	ax.exec_mutex = FALSE;
    46b8:	10 92 5f 22 	sts	0x225F, r1

	ax.a[X].port = &X_MOTOR_PORT;				// bind PORTs to structs
    46bc:	80 e0       	ldi	r24, 0x00	; 0
    46be:	96 e0       	ldi	r25, 0x06	; 6
    46c0:	80 93 6f 22 	sts	0x226F, r24
    46c4:	90 93 70 22 	sts	0x2270, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    46c8:	80 ea       	ldi	r24, 0xA0	; 160
    46ca:	96 e0       	ldi	r25, 0x06	; 6
    46cc:	80 93 7f 22 	sts	0x227F, r24
    46d0:	90 93 80 22 	sts	0x2280, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    46d4:	80 e8       	ldi	r24, 0x80	; 128
    46d6:	96 e0       	ldi	r25, 0x06	; 6
    46d8:	80 93 8f 22 	sts	0x228F, r24
    46dc:	90 93 90 22 	sts	0x2290, r25
	ax.a[A].port = &A_MOTOR_PORT;
    46e0:	80 e6       	ldi	r24, 0x60	; 96
    46e2:	96 e0       	ldi	r25, 0x06	; 6
    46e4:	80 93 9f 22 	sts	0x229F, r24
    46e8:	90 93 a0 22 	sts	0x22A0, r25

	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
    46ec:	80 e0       	ldi	r24, 0x00	; 0
    46ee:	98 e0       	ldi	r25, 0x08	; 8
    46f0:	80 93 71 22 	sts	0x2271, r24
    46f4:	90 93 72 22 	sts	0x2272, r25
	ax.a[Y].timer = &Y_TIMER;
    46f8:	80 e0       	ldi	r24, 0x00	; 0
    46fa:	99 e0       	ldi	r25, 0x09	; 9
    46fc:	80 93 81 22 	sts	0x2281, r24
    4700:	90 93 82 22 	sts	0x2282, r25
	ax.a[Z].timer = &Z_TIMER;
    4704:	80 e0       	ldi	r24, 0x00	; 0
    4706:	9a e0       	ldi	r25, 0x0A	; 10
    4708:	80 93 91 22 	sts	0x2291, r24
    470c:	90 93 92 22 	sts	0x2292, r25
	ax.a[A].timer = &A_TIMER;
    4710:	80 e0       	ldi	r24, 0x00	; 0
    4712:	9b e0       	ldi	r25, 0x0B	; 11
    4714:	80 93 a1 22 	sts	0x22A1, r24
    4718:	90 93 a2 22 	sts	0x22A2, r25
    471c:	c3 eb       	ldi	r28, 0xB3	; 179
    471e:	d2 e2       	ldi	r29, 0x22	; 34
    4720:	ad e6       	ldi	r26, 0x6D	; 109
    4722:	b2 e2       	ldi	r27, 0x22	; 34

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    4724:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4726:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    4728:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    472a:	88 81       	ld	r24, Y
    472c:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    472e:	12 96       	adiw	r26, 0x02	; 2
    4730:	ed 91       	ld	r30, X+
    4732:	fc 91       	ld	r31, X
    4734:	13 97       	sbiw	r26, 0x03	; 3
    4736:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    4738:	12 96       	adiw	r26, 0x02	; 2
    473a:	ed 91       	ld	r30, X+
    473c:	fc 91       	ld	r31, X
    473e:	13 97       	sbiw	r26, 0x03	; 3
    4740:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
    4742:	12 96       	adiw	r26, 0x02	; 2
    4744:	ed 91       	ld	r30, X+
    4746:	fc 91       	ld	r31, X
    4748:	13 97       	sbiw	r26, 0x03	; 3
    474a:	84 81       	ldd	r24, Z+4	; 0x04
    474c:	88 61       	ori	r24, 0x18	; 24
    474e:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4750:	12 96       	adiw	r26, 0x02	; 2
    4752:	ed 91       	ld	r30, X+
    4754:	fc 91       	ld	r31, X
    4756:	13 97       	sbiw	r26, 0x03	; 3
    4758:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    475a:	14 96       	adiw	r26, 0x04	; 4
    475c:	ed 91       	ld	r30, X+
    475e:	fc 91       	ld	r31, X
    4760:	15 97       	sbiw	r26, 0x05	; 5
    4762:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    4764:	14 96       	adiw	r26, 0x04	; 4
    4766:	ed 91       	ld	r30, X+
    4768:	fc 91       	ld	r31, X
    476a:	15 97       	sbiw	r26, 0x05	; 5
    476c:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    476e:	14 96       	adiw	r26, 0x04	; 4
    4770:	ed 91       	ld	r30, X+
    4772:	fc 91       	ld	r31, X
    4774:	15 97       	sbiw	r26, 0x05	; 5
    4776:	96 83       	std	Z+6, r25	; 0x06
    4778:	68 96       	adiw	r28, 0x18	; 24
    477a:	50 96       	adiw	r26, 0x10	; 16
	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    477c:	83 e2       	ldi	r24, 0x23	; 35
    477e:	c3 31       	cpi	r28, 0x13	; 19
    4780:	d8 07       	cpc	r29, r24
    4782:	99 f6       	brne	.-90     	; 0x472a <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    4784:	df 91       	pop	r29
    4786:	cf 91       	pop	r28
    4788:	08 95       	ret

0000478a <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    478a:	e8 2f       	mov	r30, r24
    478c:	f0 e0       	ldi	r31, 0x00	; 0
    478e:	84 e0       	ldi	r24, 0x04	; 4
    4790:	ee 0f       	add	r30, r30
    4792:	ff 1f       	adc	r31, r31
    4794:	8a 95       	dec	r24
    4796:	e1 f7       	brne	.-8      	; 0x4790 <st_set_polarity+0x6>
    4798:	e1 5a       	subi	r30, 0xA1	; 161
    479a:	fd 4d       	sbci	r31, 0xDD	; 221
    479c:	66 87       	std	Z+14, r22	; 0x0e
}
    479e:	08 95       	ret

000047a0 <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X].step_counter = 0x00001000;
    47a0:	23 e6       	ldi	r18, 0x63	; 99
    47a2:	32 e2       	ldi	r19, 0x22	; 34
    47a4:	80 e0       	ldi	r24, 0x00	; 0
    47a6:	90 e1       	ldi	r25, 0x10	; 16
    47a8:	a0 e0       	ldi	r26, 0x00	; 0
    47aa:	b0 e0       	ldi	r27, 0x00	; 0
    47ac:	80 93 63 22 	sts	0x2263, r24
    47b0:	90 93 64 22 	sts	0x2264, r25
    47b4:	a0 93 65 22 	sts	0x2265, r26
    47b8:	b0 93 66 22 	sts	0x2266, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    47bc:	e0 91 71 22 	lds	r30, 0x2271
    47c0:	f0 91 72 22 	lds	r31, 0x2272
    47c4:	80 e0       	ldi	r24, 0x00	; 0
    47c6:	90 e1       	ldi	r25, 0x10	; 16
    47c8:	86 a3       	std	Z+38, r24	; 0x26
    47ca:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    47cc:	41 e0       	ldi	r20, 0x01	; 1
    47ce:	40 83       	st	Z, r20

	ax.a[Y].step_counter = 0x00000800;
    47d0:	80 e0       	ldi	r24, 0x00	; 0
    47d2:	98 e0       	ldi	r25, 0x08	; 8
    47d4:	a0 e0       	ldi	r26, 0x00	; 0
    47d6:	b0 e0       	ldi	r27, 0x00	; 0
    47d8:	80 93 73 22 	sts	0x2273, r24
    47dc:	90 93 74 22 	sts	0x2274, r25
    47e0:	a0 93 75 22 	sts	0x2275, r26
    47e4:	b0 93 76 22 	sts	0x2276, r27
	ax.a[Y].timer->PER = 0x2000;
    47e8:	e0 91 81 22 	lds	r30, 0x2281
    47ec:	f0 91 82 22 	lds	r31, 0x2282
    47f0:	80 e0       	ldi	r24, 0x00	; 0
    47f2:	90 e2       	ldi	r25, 0x20	; 32
    47f4:	86 a3       	std	Z+38, r24	; 0x26
    47f6:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    47f8:	40 83       	st	Z, r20

	ax.a[Z].step_counter = 0x00000600;
    47fa:	80 e0       	ldi	r24, 0x00	; 0
    47fc:	96 e0       	ldi	r25, 0x06	; 6
    47fe:	a0 e0       	ldi	r26, 0x00	; 0
    4800:	b0 e0       	ldi	r27, 0x00	; 0
    4802:	80 93 83 22 	sts	0x2283, r24
    4806:	90 93 84 22 	sts	0x2284, r25
    480a:	a0 93 85 22 	sts	0x2285, r26
    480e:	b0 93 86 22 	sts	0x2286, r27
	ax.a[Z].timer->PER = 0x3000;
    4812:	e0 91 91 22 	lds	r30, 0x2291
    4816:	f0 91 92 22 	lds	r31, 0x2292
    481a:	80 e0       	ldi	r24, 0x00	; 0
    481c:	90 e3       	ldi	r25, 0x30	; 48
    481e:	86 a3       	std	Z+38, r24	; 0x26
    4820:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4822:	40 83       	st	Z, r20

	ax.a[A].step_counter = 0x00000400;
    4824:	80 e0       	ldi	r24, 0x00	; 0
    4826:	94 e0       	ldi	r25, 0x04	; 4
    4828:	a0 e0       	ldi	r26, 0x00	; 0
    482a:	b0 e0       	ldi	r27, 0x00	; 0
    482c:	80 93 93 22 	sts	0x2293, r24
    4830:	90 93 94 22 	sts	0x2294, r25
    4834:	a0 93 95 22 	sts	0x2295, r26
    4838:	b0 93 96 22 	sts	0x2296, r27
	ax.a[A].timer->PER = 0x4000;
    483c:	d9 01       	movw	r26, r18
    483e:	de 96       	adiw	r26, 0x3e	; 62
    4840:	ed 91       	ld	r30, X+
    4842:	fc 91       	ld	r31, X
    4844:	df 97       	sbiw	r26, 0x3f	; 63
    4846:	80 e0       	ldi	r24, 0x00	; 0
    4848:	90 e4       	ldi	r25, 0x40	; 64
    484a:	86 a3       	std	Z+38, r24	; 0x26
    484c:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    484e:	40 83       	st	Z, r20

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    4850:	23 50       	subi	r18, 0x03	; 3
    4852:	30 40       	sbci	r19, 0x00	; 0
    4854:	f9 01       	movw	r30, r18
    4856:	80 81       	ld	r24, Z
    4858:	8f 60       	ori	r24, 0x0F	; 15
    485a:	80 83       	st	Z, r24
}
    485c:	08 95       	ret

0000485e <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    485e:	f8 94       	cli
	mv_flush();									// flush the move buffer
    4860:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <mv_flush>
	sei();
    4864:	78 94       	sei
}
    4866:	08 95       	ret

00004868 <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    4868:	f8 94       	cli
	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    486a:	e0 91 71 22 	lds	r30, 0x2271
    486e:	f0 91 72 22 	lds	r31, 0x2272
    4872:	10 82       	st	Z, r1
    4874:	e0 91 81 22 	lds	r30, 0x2281
    4878:	f0 91 82 22 	lds	r31, 0x2282
    487c:	10 82       	st	Z, r1
    487e:	e0 91 91 22 	lds	r30, 0x2291
    4882:	f0 91 92 22 	lds	r31, 0x2292
    4886:	10 82       	st	Z, r1
    4888:	e0 91 a1 22 	lds	r30, 0x22A1
    488c:	f0 91 a2 22 	lds	r31, 0x22A2
    4890:	10 82       	st	Z, r1
	}	
	mv_flush();									// flush the move buffer
    4892:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    4896:	10 92 60 22 	sts	0x2260, r1
	sei();
    489a:	78 94       	sei
}
    489c:	08 95       	ret

0000489e <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    489e:	cf 92       	push	r12
    48a0:	df 92       	push	r13
    48a2:	ef 92       	push	r14
    48a4:	ff 92       	push	r15
    48a6:	0f 93       	push	r16
    48a8:	1f 93       	push	r17
    48aa:	cf 93       	push	r28
    48ac:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    48ae:	80 91 5f 22 	lds	r24, 0x225F
    48b2:	88 23       	and	r24, r24
    48b4:	09 f0       	breq	.+2      	; 0x48b8 <st_execute_move+0x1a>
    48b6:	32 c1       	rjmp	.+612    	; 0x4b1c <st_execute_move+0x27e>
		return;
	}
	ax.exec_mutex = TRUE;
    48b8:	81 e0       	ldi	r24, 0x01	; 1
    48ba:	80 93 5f 22 	sts	0x225F, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    48be:	80 91 60 22 	lds	r24, 0x2260
    48c2:	88 23       	and	r24, r24
    48c4:	09 f0       	breq	.+2      	; 0x48c8 <st_execute_move+0x2a>
    48c6:	28 c1       	rjmp	.+592    	; 0x4b18 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    48c8:	0e 94 94 2b 	call	0x5728	; 0x5728 <mv_dequeue_move_buffer>
    48cc:	80 93 61 22 	sts	0x2261, r24
    48d0:	90 93 62 22 	sts	0x2262, r25
    48d4:	89 2b       	or	r24, r25
    48d6:	09 f4       	brne	.+2      	; 0x48da <st_execute_move+0x3c>
    48d8:	1f c1       	rjmp	.+574    	; 0x4b18 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;
		return;
    48da:	63 e6       	ldi	r22, 0x63	; 99
    48dc:	72 e2       	ldi	r23, 0x22	; 34
    48de:	00 e0       	ldi	r16, 0x00	; 0
    48e0:	10 e0       	ldi	r17, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    48e2:	94 e0       	ldi	r25, 0x04	; 4
    48e4:	c9 2e       	mov	r12, r25
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    48e6:	82 e0       	ldi	r24, 0x02	; 2
    48e8:	d8 2e       	mov	r13, r24
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
		ax.exec_mutex = FALSE;
		return;
    48ea:	f0 2e       	mov	r15, r16
    48ec:	e1 2e       	mov	r14, r17
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    48ee:	db 01       	movw	r26, r22
    48f0:	1e 96       	adiw	r26, 0x0e	; 14
    48f2:	ed 91       	ld	r30, X+
    48f4:	fc 91       	ld	r31, X
    48f6:	1f 97       	sbiw	r26, 0x0f	; 15
    48f8:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    48fa:	c0 91 61 22 	lds	r28, 0x2261
    48fe:	d0 91 62 22 	lds	r29, 0x2262
    4902:	c8 01       	movw	r24, r16
    4904:	fc 01       	movw	r30, r24
    4906:	b3 e0       	ldi	r27, 0x03	; 3
    4908:	ee 0f       	add	r30, r30
    490a:	ff 1f       	adc	r31, r31
    490c:	ba 95       	dec	r27
    490e:	e1 f7       	brne	.-8      	; 0x4908 <st_execute_move+0x6a>
    4910:	88 0f       	add	r24, r24
    4912:	99 1f       	adc	r25, r25
    4914:	e8 0f       	add	r30, r24
    4916:	f9 1f       	adc	r31, r25
    4918:	ec 0f       	add	r30, r28
    491a:	fd 1f       	adc	r31, r29
    491c:	80 81       	ld	r24, Z
    491e:	91 81       	ldd	r25, Z+1	; 0x01
    4920:	a2 81       	ldd	r26, Z+2	; 0x02
    4922:	b3 81       	ldd	r27, Z+3	; 0x03
    4924:	00 97       	sbiw	r24, 0x00	; 0
    4926:	a1 05       	cpc	r26, r1
    4928:	b1 05       	cpc	r27, r1
    492a:	09 f4       	brne	.+2      	; 0x492e <st_execute_move+0x90>
    492c:	a6 c0       	rjmp	.+332    	; 0x4a7a <st_execute_move+0x1dc>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    492e:	c8 01       	movw	r24, r16
    4930:	9c 01       	movw	r18, r24
    4932:	f3 e0       	ldi	r31, 0x03	; 3
    4934:	22 0f       	add	r18, r18
    4936:	33 1f       	adc	r19, r19
    4938:	fa 95       	dec	r31
    493a:	e1 f7       	brne	.-8      	; 0x4934 <st_execute_move+0x96>
    493c:	88 0f       	add	r24, r24
    493e:	99 1f       	adc	r25, r25
    4940:	28 0f       	add	r18, r24
    4942:	39 1f       	adc	r19, r25
    4944:	c2 0f       	add	r28, r18
    4946:	d3 1f       	adc	r29, r19
    4948:	89 85       	ldd	r24, Y+9	; 0x09
    494a:	fb 01       	movw	r30, r22
    494c:	83 87       	std	Z+11, r24	; 0x0b

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    494e:	e0 91 61 22 	lds	r30, 0x2261
    4952:	f0 91 62 22 	lds	r31, 0x2262
    4956:	c8 01       	movw	r24, r16
    4958:	9c 01       	movw	r18, r24
    495a:	53 e0       	ldi	r21, 0x03	; 3
    495c:	22 0f       	add	r18, r18
    495e:	33 1f       	adc	r19, r19
    4960:	5a 95       	dec	r21
    4962:	e1 f7       	brne	.-8      	; 0x495c <st_execute_move+0xbe>
    4964:	88 0f       	add	r24, r24
    4966:	99 1f       	adc	r25, r25
    4968:	28 0f       	add	r18, r24
    496a:	39 1f       	adc	r19, r25
    496c:	e2 0f       	add	r30, r18
    496e:	f3 1f       	adc	r31, r19
    4970:	90 85       	ldd	r25, Z+8	; 0x08
    4972:	db 01       	movw	r26, r22
    4974:	1a 96       	adiw	r26, 0x0a	; 10
    4976:	8c 91       	ld	r24, X
    4978:	1a 97       	sbiw	r26, 0x0a	; 10
    497a:	1c 96       	adiw	r26, 0x0c	; 12
    497c:	ed 91       	ld	r30, X+
    497e:	fc 91       	ld	r31, X
    4980:	1d 97       	sbiw	r26, 0x0d	; 13
    4982:	98 17       	cp	r25, r24
    4984:	11 f0       	breq	.+4      	; 0x498a <st_execute_move+0xec>
    4986:	d5 82       	std	Z+5, r13	; 0x05
    4988:	01 c0       	rjmp	.+2      	; 0x498c <st_execute_move+0xee>
    498a:	d6 82       	std	Z+6, r13	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    498c:	40 91 61 22 	lds	r20, 0x2261
    4990:	50 91 62 22 	lds	r21, 0x2262
    4994:	8f 2d       	mov	r24, r15
    4996:	9e 2d       	mov	r25, r14
    4998:	fc 01       	movw	r30, r24
    499a:	33 e0       	ldi	r19, 0x03	; 3
    499c:	ee 0f       	add	r30, r30
    499e:	ff 1f       	adc	r31, r31
    49a0:	3a 95       	dec	r19
    49a2:	e1 f7       	brne	.-8      	; 0x499c <st_execute_move+0xfe>
    49a4:	88 0f       	add	r24, r24
    49a6:	99 1f       	adc	r25, r25
    49a8:	e8 0f       	add	r30, r24
    49aa:	f9 1f       	adc	r31, r25
    49ac:	e4 0f       	add	r30, r20
    49ae:	f5 1f       	adc	r31, r21
    49b0:	80 81       	ld	r24, Z
    49b2:	91 81       	ldd	r25, Z+1	; 0x01
    49b4:	a2 81       	ldd	r26, Z+2	; 0x02
    49b6:	b3 81       	ldd	r27, Z+3	; 0x03
    49b8:	fb 01       	movw	r30, r22
    49ba:	80 83       	st	Z, r24
    49bc:	91 83       	std	Z+1, r25	; 0x01
    49be:	a2 83       	std	Z+2, r26	; 0x02
    49c0:	b3 83       	std	Z+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    49c2:	8f 2d       	mov	r24, r15
    49c4:	9e 2d       	mov	r25, r14
    49c6:	fc 01       	movw	r30, r24
    49c8:	b3 e0       	ldi	r27, 0x03	; 3
    49ca:	ee 0f       	add	r30, r30
    49cc:	ff 1f       	adc	r31, r31
    49ce:	ba 95       	dec	r27
    49d0:	e1 f7       	brne	.-8      	; 0x49ca <st_execute_move+0x12c>
    49d2:	88 0f       	add	r24, r24
    49d4:	99 1f       	adc	r25, r25
    49d6:	e8 0f       	add	r30, r24
    49d8:	f9 1f       	adc	r31, r25
    49da:	e4 0f       	add	r30, r20
    49dc:	f5 1f       	adc	r31, r21
    49de:	86 81       	ldd	r24, Z+6	; 0x06
    49e0:	97 81       	ldd	r25, Z+7	; 0x07
    49e2:	db 01       	movw	r26, r22
    49e4:	16 96       	adiw	r26, 0x06	; 6
    49e6:	8d 93       	st	X+, r24
    49e8:	9c 93       	st	X, r25
    49ea:	17 97       	sbiw	r26, 0x07	; 7
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    49ec:	8f 2d       	mov	r24, r15
    49ee:	9e 2d       	mov	r25, r14
    49f0:	fc 01       	movw	r30, r24
    49f2:	33 e0       	ldi	r19, 0x03	; 3
    49f4:	ee 0f       	add	r30, r30
    49f6:	ff 1f       	adc	r31, r31
    49f8:	3a 95       	dec	r19
    49fa:	e1 f7       	brne	.-8      	; 0x49f4 <st_execute_move+0x156>
    49fc:	88 0f       	add	r24, r24
    49fe:	99 1f       	adc	r25, r25
    4a00:	e8 0f       	add	r30, r24
    4a02:	f9 1f       	adc	r31, r25
    4a04:	e4 0f       	add	r30, r20
    4a06:	f5 1f       	adc	r31, r21
    4a08:	86 81       	ldd	r24, Z+6	; 0x06
    4a0a:	97 81       	ldd	r25, Z+7	; 0x07
    4a0c:	18 96       	adiw	r26, 0x08	; 8
    4a0e:	8d 93       	st	X+, r24
    4a10:	9c 93       	st	X, r25
    4a12:	19 97       	sbiw	r26, 0x09	; 9
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    4a14:	8f 2d       	mov	r24, r15
    4a16:	9e 2d       	mov	r25, r14
    4a18:	fc 01       	movw	r30, r24
    4a1a:	33 e0       	ldi	r19, 0x03	; 3
    4a1c:	ee 0f       	add	r30, r30
    4a1e:	ff 1f       	adc	r31, r31
    4a20:	3a 95       	dec	r19
    4a22:	e1 f7       	brne	.-8      	; 0x4a1c <st_execute_move+0x17e>
    4a24:	88 0f       	add	r24, r24
    4a26:	99 1f       	adc	r25, r25
    4a28:	e8 0f       	add	r30, r24
    4a2a:	f9 1f       	adc	r31, r25
    4a2c:	e4 0f       	add	r30, r20
    4a2e:	f5 1f       	adc	r31, r21
    4a30:	84 81       	ldd	r24, Z+4	; 0x04
    4a32:	95 81       	ldd	r25, Z+5	; 0x05
    4a34:	14 96       	adiw	r26, 0x04	; 4
    4a36:	8d 93       	st	X+, r24
    4a38:	9c 93       	st	X, r25
    4a3a:	15 97       	sbiw	r26, 0x05	; 5
		ax.a[i].timer->PER = ax.p->a[i].period;
    4a3c:	1e 96       	adiw	r26, 0x0e	; 14
    4a3e:	ed 91       	ld	r30, X+
    4a40:	fc 91       	ld	r31, X
    4a42:	1f 97       	sbiw	r26, 0x0f	; 15
    4a44:	8f 2d       	mov	r24, r15
    4a46:	9e 2d       	mov	r25, r14
    4a48:	9c 01       	movw	r18, r24
    4a4a:	b3 e0       	ldi	r27, 0x03	; 3
    4a4c:	22 0f       	add	r18, r18
    4a4e:	33 1f       	adc	r19, r19
    4a50:	ba 95       	dec	r27
    4a52:	e1 f7       	brne	.-8      	; 0x4a4c <st_execute_move+0x1ae>
    4a54:	88 0f       	add	r24, r24
    4a56:	99 1f       	adc	r25, r25
    4a58:	28 0f       	add	r18, r24
    4a5a:	39 1f       	adc	r19, r25
    4a5c:	42 0f       	add	r20, r18
    4a5e:	53 1f       	adc	r21, r19
    4a60:	da 01       	movw	r26, r20
    4a62:	14 96       	adiw	r26, 0x04	; 4
    4a64:	8d 91       	ld	r24, X+
    4a66:	9c 91       	ld	r25, X
    4a68:	15 97       	sbiw	r26, 0x05	; 5
    4a6a:	86 a3       	std	Z+38, r24	; 0x26
    4a6c:	97 a3       	std	Z+39, r25	; 0x27
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4a6e:	db 01       	movw	r26, r22
    4a70:	1c 96       	adiw	r26, 0x0c	; 12
    4a72:	ed 91       	ld	r30, X+
    4a74:	fc 91       	ld	r31, X
    4a76:	1d 97       	sbiw	r26, 0x0d	; 13
    4a78:	c6 82       	std	Z+6, r12	; 0x06
    4a7a:	0f 5f       	subi	r16, 0xFF	; 255
    4a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a7e:	60 5f       	subi	r22, 0xF0	; 240
    4a80:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    4a82:	03 30       	cpi	r16, 0x03	; 3
    4a84:	11 05       	cpc	r17, r1
    4a86:	09 f0       	breq	.+2      	; 0x4a8a <st_execute_move+0x1ec>
    4a88:	30 cf       	rjmp	.-416    	; 0x48ea <st_execute_move+0x4c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4a8a:	10 92 60 22 	sts	0x2260, r1
	if (ax.a[X].step_counter) { 
    4a8e:	80 91 63 22 	lds	r24, 0x2263
    4a92:	90 91 64 22 	lds	r25, 0x2264
    4a96:	a0 91 65 22 	lds	r26, 0x2265
    4a9a:	b0 91 66 22 	lds	r27, 0x2266
    4a9e:	00 97       	sbiw	r24, 0x00	; 0
    4aa0:	a1 05       	cpc	r26, r1
    4aa2:	b1 05       	cpc	r27, r1
    4aa4:	59 f0       	breq	.+22     	; 0x4abc <st_execute_move+0x21e>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    4aa6:	e0 91 71 22 	lds	r30, 0x2271
    4aaa:	f0 91 72 22 	lds	r31, 0x2272
    4aae:	81 e0       	ldi	r24, 0x01	; 1
    4ab0:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4ab2:	80 91 60 22 	lds	r24, 0x2260
    4ab6:	88 60       	ori	r24, 0x08	; 8
    4ab8:	80 93 60 22 	sts	0x2260, r24
	}
	if (ax.a[Y].step_counter) {
    4abc:	80 91 73 22 	lds	r24, 0x2273
    4ac0:	90 91 74 22 	lds	r25, 0x2274
    4ac4:	a0 91 75 22 	lds	r26, 0x2275
    4ac8:	b0 91 76 22 	lds	r27, 0x2276
    4acc:	00 97       	sbiw	r24, 0x00	; 0
    4ace:	a1 05       	cpc	r26, r1
    4ad0:	b1 05       	cpc	r27, r1
    4ad2:	59 f0       	breq	.+22     	; 0x4aea <st_execute_move+0x24c>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    4ad4:	e0 91 81 22 	lds	r30, 0x2281
    4ad8:	f0 91 82 22 	lds	r31, 0x2282
    4adc:	81 e0       	ldi	r24, 0x01	; 1
    4ade:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4ae0:	80 91 60 22 	lds	r24, 0x2260
    4ae4:	84 60       	ori	r24, 0x04	; 4
    4ae6:	80 93 60 22 	sts	0x2260, r24
	}
	if (ax.a[Z].step_counter) {
    4aea:	80 91 83 22 	lds	r24, 0x2283
    4aee:	90 91 84 22 	lds	r25, 0x2284
    4af2:	a0 91 85 22 	lds	r26, 0x2285
    4af6:	b0 91 86 22 	lds	r27, 0x2286
    4afa:	00 97       	sbiw	r24, 0x00	; 0
    4afc:	a1 05       	cpc	r26, r1
    4afe:	b1 05       	cpc	r27, r1
    4b00:	59 f0       	breq	.+22     	; 0x4b18 <st_execute_move+0x27a>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4b02:	e0 91 91 22 	lds	r30, 0x2291
    4b06:	f0 91 92 22 	lds	r31, 0x2292
    4b0a:	81 e0       	ldi	r24, 0x01	; 1
    4b0c:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4b0e:	80 91 60 22 	lds	r24, 0x2260
    4b12:	82 60       	ori	r24, 0x02	; 2
    4b14:	80 93 60 22 	sts	0x2260, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4b18:	10 92 5f 22 	sts	0x225F, r1
}
    4b1c:	df 91       	pop	r29
    4b1e:	cf 91       	pop	r28
    4b20:	1f 91       	pop	r17
    4b22:	0f 91       	pop	r16
    4b24:	ff 90       	pop	r15
    4b26:	ef 90       	pop	r14
    4b28:	df 90       	pop	r13
    4b2a:	cf 90       	pop	r12
    4b2c:	08 95       	ret

00004b2e <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4b2e:	10 92 5f 22 	sts	0x225F, r1
	st_execute_move();		// recursively empty the move queue
    4b32:	0e 94 4f 24 	call	0x489e	; 0x489e <st_execute_move>
	return;
}
    4b36:	08 95       	ret

00004b38 <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    4b38:	1f 92       	push	r1
    4b3a:	0f 92       	push	r0
    4b3c:	0f b6       	in	r0, 0x3f	; 63
    4b3e:	0f 92       	push	r0
    4b40:	0b b6       	in	r0, 0x3b	; 59
    4b42:	0f 92       	push	r0
    4b44:	11 24       	eor	r1, r1
    4b46:	2f 93       	push	r18
    4b48:	3f 93       	push	r19
    4b4a:	4f 93       	push	r20
    4b4c:	5f 93       	push	r21
    4b4e:	6f 93       	push	r22
    4b50:	7f 93       	push	r23
    4b52:	8f 93       	push	r24
    4b54:	9f 93       	push	r25
    4b56:	af 93       	push	r26
    4b58:	bf 93       	push	r27
    4b5a:	ef 93       	push	r30
    4b5c:	ff 93       	push	r31
	if (--ax.a[A].postscale_counter != 0) {
    4b5e:	80 91 9b 22 	lds	r24, 0x229B
    4b62:	90 91 9c 22 	lds	r25, 0x229C
    4b66:	01 97       	sbiw	r24, 0x01	; 1
    4b68:	80 93 9b 22 	sts	0x229B, r24
    4b6c:	90 93 9c 22 	sts	0x229C, r25
    4b70:	89 2b       	or	r24, r25
    4b72:	a1 f5       	brne	.+104    	; 0x4bdc <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4b74:	e0 e6       	ldi	r30, 0x60	; 96
    4b76:	f6 e0       	ldi	r31, 0x06	; 6
    4b78:	81 e0       	ldi	r24, 0x01	; 1
    4b7a:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    4b7c:	80 91 93 22 	lds	r24, 0x2293
    4b80:	90 91 94 22 	lds	r25, 0x2294
    4b84:	a0 91 95 22 	lds	r26, 0x2295
    4b88:	b0 91 96 22 	lds	r27, 0x2296
    4b8c:	01 97       	sbiw	r24, 0x01	; 1
    4b8e:	a1 09       	sbc	r26, r1
    4b90:	b1 09       	sbc	r27, r1
    4b92:	80 93 93 22 	sts	0x2293, r24
    4b96:	90 93 94 22 	sts	0x2294, r25
    4b9a:	a0 93 95 22 	sts	0x2295, r26
    4b9e:	b0 93 96 22 	sts	0x2296, r27
    4ba2:	00 97       	sbiw	r24, 0x00	; 0
    4ba4:	a1 05       	cpc	r26, r1
    4ba6:	b1 05       	cpc	r27, r1
    4ba8:	69 f4       	brne	.+26     	; 0x4bc4 <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4baa:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4bae:	84 e0       	ldi	r24, 0x04	; 4
    4bb0:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4bb2:	80 91 60 22 	lds	r24, 0x2260
    4bb6:	8e 7f       	andi	r24, 0xFE	; 254
    4bb8:	80 93 60 22 	sts	0x2260, r24
		if (ax.active_axes == 0) {
    4bbc:	88 23       	and	r24, r24
    4bbe:	11 f4       	brne	.+4      	; 0x4bc4 <__vector_108+0x8c>
			st_execute_move();
    4bc0:	0e 94 4f 24 	call	0x489e	; 0x489e <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    4bc4:	80 91 99 22 	lds	r24, 0x2299
    4bc8:	90 91 9a 22 	lds	r25, 0x229A
    4bcc:	80 93 9b 22 	sts	0x229B, r24
    4bd0:	90 93 9c 22 	sts	0x229C, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4bd4:	81 e0       	ldi	r24, 0x01	; 1
    4bd6:	e0 e6       	ldi	r30, 0x60	; 96
    4bd8:	f6 e0       	ldi	r31, 0x06	; 6
    4bda:	86 83       	std	Z+6, r24	; 0x06
}
    4bdc:	ff 91       	pop	r31
    4bde:	ef 91       	pop	r30
    4be0:	bf 91       	pop	r27
    4be2:	af 91       	pop	r26
    4be4:	9f 91       	pop	r25
    4be6:	8f 91       	pop	r24
    4be8:	7f 91       	pop	r23
    4bea:	6f 91       	pop	r22
    4bec:	5f 91       	pop	r21
    4bee:	4f 91       	pop	r20
    4bf0:	3f 91       	pop	r19
    4bf2:	2f 91       	pop	r18
    4bf4:	0f 90       	pop	r0
    4bf6:	0b be       	out	0x3b, r0	; 59
    4bf8:	0f 90       	pop	r0
    4bfa:	0f be       	out	0x3f, r0	; 63
    4bfc:	0f 90       	pop	r0
    4bfe:	1f 90       	pop	r1
    4c00:	18 95       	reti

00004c02 <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4c02:	1f 92       	push	r1
    4c04:	0f 92       	push	r0
    4c06:	0f b6       	in	r0, 0x3f	; 63
    4c08:	0f 92       	push	r0
    4c0a:	0b b6       	in	r0, 0x3b	; 59
    4c0c:	0f 92       	push	r0
    4c0e:	11 24       	eor	r1, r1
    4c10:	2f 93       	push	r18
    4c12:	3f 93       	push	r19
    4c14:	4f 93       	push	r20
    4c16:	5f 93       	push	r21
    4c18:	6f 93       	push	r22
    4c1a:	7f 93       	push	r23
    4c1c:	8f 93       	push	r24
    4c1e:	9f 93       	push	r25
    4c20:	af 93       	push	r26
    4c22:	bf 93       	push	r27
    4c24:	ef 93       	push	r30
    4c26:	ff 93       	push	r31
	if (--ax.a[Z].postscale_counter != 0) {
    4c28:	80 91 8b 22 	lds	r24, 0x228B
    4c2c:	90 91 8c 22 	lds	r25, 0x228C
    4c30:	01 97       	sbiw	r24, 0x01	; 1
    4c32:	80 93 8b 22 	sts	0x228B, r24
    4c36:	90 93 8c 22 	sts	0x228C, r25
    4c3a:	89 2b       	or	r24, r25
    4c3c:	a1 f5       	brne	.+104    	; 0x4ca6 <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4c3e:	e0 e8       	ldi	r30, 0x80	; 128
    4c40:	f6 e0       	ldi	r31, 0x06	; 6
    4c42:	81 e0       	ldi	r24, 0x01	; 1
    4c44:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    4c46:	80 91 83 22 	lds	r24, 0x2283
    4c4a:	90 91 84 22 	lds	r25, 0x2284
    4c4e:	a0 91 85 22 	lds	r26, 0x2285
    4c52:	b0 91 86 22 	lds	r27, 0x2286
    4c56:	01 97       	sbiw	r24, 0x01	; 1
    4c58:	a1 09       	sbc	r26, r1
    4c5a:	b1 09       	sbc	r27, r1
    4c5c:	80 93 83 22 	sts	0x2283, r24
    4c60:	90 93 84 22 	sts	0x2284, r25
    4c64:	a0 93 85 22 	sts	0x2285, r26
    4c68:	b0 93 86 22 	sts	0x2286, r27
    4c6c:	00 97       	sbiw	r24, 0x00	; 0
    4c6e:	a1 05       	cpc	r26, r1
    4c70:	b1 05       	cpc	r27, r1
    4c72:	69 f4       	brne	.+26     	; 0x4c8e <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4c74:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4c78:	84 e0       	ldi	r24, 0x04	; 4
    4c7a:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4c7c:	80 91 60 22 	lds	r24, 0x2260
    4c80:	8d 7f       	andi	r24, 0xFD	; 253
    4c82:	80 93 60 22 	sts	0x2260, r24
		if (ax.active_axes == 0) {
    4c86:	88 23       	and	r24, r24
    4c88:	11 f4       	brne	.+4      	; 0x4c8e <__vector_47+0x8c>
			st_execute_move();
    4c8a:	0e 94 4f 24 	call	0x489e	; 0x489e <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    4c8e:	80 91 89 22 	lds	r24, 0x2289
    4c92:	90 91 8a 22 	lds	r25, 0x228A
    4c96:	80 93 8b 22 	sts	0x228B, r24
    4c9a:	90 93 8c 22 	sts	0x228C, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4c9e:	81 e0       	ldi	r24, 0x01	; 1
    4ca0:	e0 e8       	ldi	r30, 0x80	; 128
    4ca2:	f6 e0       	ldi	r31, 0x06	; 6
    4ca4:	86 83       	std	Z+6, r24	; 0x06
}
    4ca6:	ff 91       	pop	r31
    4ca8:	ef 91       	pop	r30
    4caa:	bf 91       	pop	r27
    4cac:	af 91       	pop	r26
    4cae:	9f 91       	pop	r25
    4cb0:	8f 91       	pop	r24
    4cb2:	7f 91       	pop	r23
    4cb4:	6f 91       	pop	r22
    4cb6:	5f 91       	pop	r21
    4cb8:	4f 91       	pop	r20
    4cba:	3f 91       	pop	r19
    4cbc:	2f 91       	pop	r18
    4cbe:	0f 90       	pop	r0
    4cc0:	0b be       	out	0x3b, r0	; 59
    4cc2:	0f 90       	pop	r0
    4cc4:	0f be       	out	0x3f, r0	; 63
    4cc6:	0f 90       	pop	r0
    4cc8:	1f 90       	pop	r1
    4cca:	18 95       	reti

00004ccc <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4ccc:	1f 92       	push	r1
    4cce:	0f 92       	push	r0
    4cd0:	0f b6       	in	r0, 0x3f	; 63
    4cd2:	0f 92       	push	r0
    4cd4:	0b b6       	in	r0, 0x3b	; 59
    4cd6:	0f 92       	push	r0
    4cd8:	11 24       	eor	r1, r1
    4cda:	2f 93       	push	r18
    4cdc:	3f 93       	push	r19
    4cde:	4f 93       	push	r20
    4ce0:	5f 93       	push	r21
    4ce2:	6f 93       	push	r22
    4ce4:	7f 93       	push	r23
    4ce6:	8f 93       	push	r24
    4ce8:	9f 93       	push	r25
    4cea:	af 93       	push	r26
    4cec:	bf 93       	push	r27
    4cee:	ef 93       	push	r30
    4cf0:	ff 93       	push	r31
	if (--ax.a[Y].postscale_counter != 0) {
    4cf2:	80 91 7b 22 	lds	r24, 0x227B
    4cf6:	90 91 7c 22 	lds	r25, 0x227C
    4cfa:	01 97       	sbiw	r24, 0x01	; 1
    4cfc:	80 93 7b 22 	sts	0x227B, r24
    4d00:	90 93 7c 22 	sts	0x227C, r25
    4d04:	89 2b       	or	r24, r25
    4d06:	a1 f5       	brne	.+104    	; 0x4d70 <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4d08:	e0 ea       	ldi	r30, 0xA0	; 160
    4d0a:	f6 e0       	ldi	r31, 0x06	; 6
    4d0c:	81 e0       	ldi	r24, 0x01	; 1
    4d0e:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    4d10:	80 91 73 22 	lds	r24, 0x2273
    4d14:	90 91 74 22 	lds	r25, 0x2274
    4d18:	a0 91 75 22 	lds	r26, 0x2275
    4d1c:	b0 91 76 22 	lds	r27, 0x2276
    4d20:	01 97       	sbiw	r24, 0x01	; 1
    4d22:	a1 09       	sbc	r26, r1
    4d24:	b1 09       	sbc	r27, r1
    4d26:	80 93 73 22 	sts	0x2273, r24
    4d2a:	90 93 74 22 	sts	0x2274, r25
    4d2e:	a0 93 75 22 	sts	0x2275, r26
    4d32:	b0 93 76 22 	sts	0x2276, r27
    4d36:	00 97       	sbiw	r24, 0x00	; 0
    4d38:	a1 05       	cpc	r26, r1
    4d3a:	b1 05       	cpc	r27, r1
    4d3c:	69 f4       	brne	.+26     	; 0x4d58 <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4d3e:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4d42:	84 e0       	ldi	r24, 0x04	; 4
    4d44:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4d46:	80 91 60 22 	lds	r24, 0x2260
    4d4a:	8b 7f       	andi	r24, 0xFB	; 251
    4d4c:	80 93 60 22 	sts	0x2260, r24
		if (ax.active_axes == 0) {
    4d50:	88 23       	and	r24, r24
    4d52:	11 f4       	brne	.+4      	; 0x4d58 <__vector_77+0x8c>
			st_execute_move();
    4d54:	0e 94 4f 24 	call	0x489e	; 0x489e <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    4d58:	80 91 79 22 	lds	r24, 0x2279
    4d5c:	90 91 7a 22 	lds	r25, 0x227A
    4d60:	80 93 7b 22 	sts	0x227B, r24
    4d64:	90 93 7c 22 	sts	0x227C, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4d68:	81 e0       	ldi	r24, 0x01	; 1
    4d6a:	e0 ea       	ldi	r30, 0xA0	; 160
    4d6c:	f6 e0       	ldi	r31, 0x06	; 6
    4d6e:	86 83       	std	Z+6, r24	; 0x06
}
    4d70:	ff 91       	pop	r31
    4d72:	ef 91       	pop	r30
    4d74:	bf 91       	pop	r27
    4d76:	af 91       	pop	r26
    4d78:	9f 91       	pop	r25
    4d7a:	8f 91       	pop	r24
    4d7c:	7f 91       	pop	r23
    4d7e:	6f 91       	pop	r22
    4d80:	5f 91       	pop	r21
    4d82:	4f 91       	pop	r20
    4d84:	3f 91       	pop	r19
    4d86:	2f 91       	pop	r18
    4d88:	0f 90       	pop	r0
    4d8a:	0b be       	out	0x3b, r0	; 59
    4d8c:	0f 90       	pop	r0
    4d8e:	0f be       	out	0x3f, r0	; 63
    4d90:	0f 90       	pop	r0
    4d92:	1f 90       	pop	r1
    4d94:	18 95       	reti

00004d96 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4d96:	1f 92       	push	r1
    4d98:	0f 92       	push	r0
    4d9a:	0f b6       	in	r0, 0x3f	; 63
    4d9c:	0f 92       	push	r0
    4d9e:	0b b6       	in	r0, 0x3b	; 59
    4da0:	0f 92       	push	r0
    4da2:	11 24       	eor	r1, r1
    4da4:	2f 93       	push	r18
    4da6:	3f 93       	push	r19
    4da8:	4f 93       	push	r20
    4daa:	5f 93       	push	r21
    4dac:	6f 93       	push	r22
    4dae:	7f 93       	push	r23
    4db0:	8f 93       	push	r24
    4db2:	9f 93       	push	r25
    4db4:	af 93       	push	r26
    4db6:	bf 93       	push	r27
    4db8:	ef 93       	push	r30
    4dba:	ff 93       	push	r31
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    4dbc:	80 91 6b 22 	lds	r24, 0x226B
    4dc0:	90 91 6c 22 	lds	r25, 0x226C
    4dc4:	01 97       	sbiw	r24, 0x01	; 1
    4dc6:	80 93 6b 22 	sts	0x226B, r24
    4dca:	90 93 6c 22 	sts	0x226C, r25
    4dce:	89 2b       	or	r24, r25
    4dd0:	d1 f5       	brne	.+116    	; 0x4e46 <__vector_14+0xb0>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    4dd2:	80 91 6e 22 	lds	r24, 0x226E
    4dd6:	88 23       	and	r24, r24
    4dd8:	21 f4       	brne	.+8      	; 0x4de2 <__vector_14+0x4c>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    4dda:	81 e0       	ldi	r24, 0x01	; 1
    4ddc:	e0 e0       	ldi	r30, 0x00	; 0
    4dde:	f6 e0       	ldi	r31, 0x06	; 6
    4de0:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    4de2:	80 91 63 22 	lds	r24, 0x2263
    4de6:	90 91 64 22 	lds	r25, 0x2264
    4dea:	a0 91 65 22 	lds	r26, 0x2265
    4dee:	b0 91 66 22 	lds	r27, 0x2266
    4df2:	01 97       	sbiw	r24, 0x01	; 1
    4df4:	a1 09       	sbc	r26, r1
    4df6:	b1 09       	sbc	r27, r1
    4df8:	80 93 63 22 	sts	0x2263, r24
    4dfc:	90 93 64 22 	sts	0x2264, r25
    4e00:	a0 93 65 22 	sts	0x2265, r26
    4e04:	b0 93 66 22 	sts	0x2266, r27
    4e08:	00 97       	sbiw	r24, 0x00	; 0
    4e0a:	a1 05       	cpc	r26, r1
    4e0c:	b1 05       	cpc	r27, r1
    4e0e:	79 f4       	brne	.+30     	; 0x4e2e <__vector_14+0x98>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    4e10:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4e14:	84 e0       	ldi	r24, 0x04	; 4
    4e16:	e0 e0       	ldi	r30, 0x00	; 0
    4e18:	f6 e0       	ldi	r31, 0x06	; 6
    4e1a:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    4e1c:	80 91 60 22 	lds	r24, 0x2260
    4e20:	87 7f       	andi	r24, 0xF7	; 247
    4e22:	80 93 60 22 	sts	0x2260, r24
		if (ax.active_axes == 0) {				// if all axes are done
    4e26:	88 23       	and	r24, r24
    4e28:	11 f4       	brne	.+4      	; 0x4e2e <__vector_14+0x98>
			st_execute_move();					// ...run the next move
    4e2a:	0e 94 4f 24 	call	0x489e	; 0x489e <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    4e2e:	80 91 69 22 	lds	r24, 0x2269
    4e32:	90 91 6a 22 	lds	r25, 0x226A
    4e36:	80 93 6b 22 	sts	0x226B, r24
    4e3a:	90 93 6c 22 	sts	0x226C, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    4e3e:	81 e0       	ldi	r24, 0x01	; 1
    4e40:	e0 e0       	ldi	r30, 0x00	; 0
    4e42:	f6 e0       	ldi	r31, 0x06	; 6
    4e44:	86 83       	std	Z+6, r24	; 0x06
}
    4e46:	ff 91       	pop	r31
    4e48:	ef 91       	pop	r30
    4e4a:	bf 91       	pop	r27
    4e4c:	af 91       	pop	r26
    4e4e:	9f 91       	pop	r25
    4e50:	8f 91       	pop	r24
    4e52:	7f 91       	pop	r23
    4e54:	6f 91       	pop	r22
    4e56:	5f 91       	pop	r21
    4e58:	4f 91       	pop	r20
    4e5a:	3f 91       	pop	r19
    4e5c:	2f 91       	pop	r18
    4e5e:	0f 90       	pop	r0
    4e60:	0b be       	out	0x3b, r0	; 59
    4e62:	0f 90       	pop	r0
    4e64:	0f be       	out	0x3f, r0	; 63
    4e66:	0f 90       	pop	r0
    4e68:	1f 90       	pop	r1
    4e6a:	18 95       	reti

00004e6c <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    4e6c:	e0 ea       	ldi	r30, 0xA0	; 160
    4e6e:	f0 e0       	ldi	r31, 0x00	; 0
    4e70:	82 81       	ldd	r24, Z+2	; 0x02
    4e72:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    4e74:	98 ed       	ldi	r25, 0xD8	; 216
    4e76:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4e78:	82 83       	std	Z+2, r24	; 0x02
}
    4e7a:	08 95       	ret

00004e7c <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    4e7c:	e0 ea       	ldi	r30, 0xA0	; 160
    4e7e:	f0 e0       	ldi	r31, 0x00	; 0
    4e80:	82 81       	ldd	r24, Z+2	; 0x02
    4e82:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    4e84:	98 ed       	ldi	r25, 0xD8	; 216
    4e86:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4e88:	82 83       	std	Z+2, r24	; 0x02
}
    4e8a:	08 95       	ret

00004e8c <xio_setflags>:
 * xio_set_control_flags()
 */

void xio_setflags(const uint8_t dev, const uint16_t control)
{
	struct xioDEVICE *d = &ds[dev];
    4e8c:	97 e1       	ldi	r25, 0x17	; 23
    4e8e:	89 9f       	mul	r24, r25
    4e90:	f0 01       	movw	r30, r0
    4e92:	11 24       	eor	r1, r1
    4e94:	eb 5f       	subi	r30, 0xFB	; 251
    4e96:	fa 4d       	sbci	r31, 0xDA	; 218

	if (control & XIO_RD) {
    4e98:	64 ff       	sbrs	r22, 4
    4e9a:	05 c0       	rjmp	.+10     	; 0x4ea6 <xio_setflags+0x1a>
		d->flags |= XIO_FLAG_RD_bm;
    4e9c:	80 81       	ld	r24, Z
    4e9e:	91 81       	ldd	r25, Z+1	; 0x01
    4ea0:	81 60       	ori	r24, 0x01	; 1
    4ea2:	80 83       	st	Z, r24
    4ea4:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_WR) {
    4ea6:	65 ff       	sbrs	r22, 5
    4ea8:	05 c0       	rjmp	.+10     	; 0x4eb4 <xio_setflags+0x28>
		d->flags |= XIO_FLAG_WR_bm;
    4eaa:	80 81       	ld	r24, Z
    4eac:	91 81       	ldd	r25, Z+1	; 0x01
    4eae:	82 60       	ori	r24, 0x02	; 2
    4eb0:	80 83       	st	Z, r24
    4eb2:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_BLOCK) {
    4eb4:	66 ff       	sbrs	r22, 6
    4eb6:	05 c0       	rjmp	.+10     	; 0x4ec2 <xio_setflags+0x36>
		d->flags |= XIO_FLAG_BLOCK_bm;
    4eb8:	80 81       	ld	r24, Z
    4eba:	91 81       	ldd	r25, Z+1	; 0x01
    4ebc:	84 60       	ori	r24, 0x04	; 4
    4ebe:	80 83       	st	Z, r24
    4ec0:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOBLOCK) {
    4ec2:	67 ff       	sbrs	r22, 7
    4ec4:	05 c0       	rjmp	.+10     	; 0x4ed0 <xio_setflags+0x44>
		d->flags &= ~XIO_FLAG_BLOCK_bm;
    4ec6:	80 81       	ld	r24, Z
    4ec8:	91 81       	ldd	r25, Z+1	; 0x01
    4eca:	8b 7f       	andi	r24, 0xFB	; 251
    4ecc:	80 83       	st	Z, r24
    4ece:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_ECHO) {
    4ed0:	70 ff       	sbrs	r23, 0
    4ed2:	05 c0       	rjmp	.+10     	; 0x4ede <xio_setflags+0x52>
		d->flags |= XIO_FLAG_ECHO_bm;
    4ed4:	80 81       	ld	r24, Z
    4ed6:	91 81       	ldd	r25, Z+1	; 0x01
    4ed8:	80 61       	ori	r24, 0x10	; 16
    4eda:	80 83       	st	Z, r24
    4edc:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOECHO) {
    4ede:	71 ff       	sbrs	r23, 1
    4ee0:	05 c0       	rjmp	.+10     	; 0x4eec <xio_setflags+0x60>
		d->flags &= ~XIO_FLAG_ECHO_bm;
    4ee2:	80 81       	ld	r24, Z
    4ee4:	91 81       	ldd	r25, Z+1	; 0x01
    4ee6:	8f 7e       	andi	r24, 0xEF	; 239
    4ee8:	80 83       	st	Z, r24
    4eea:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_CRLF) {
    4eec:	72 ff       	sbrs	r23, 2
    4eee:	05 c0       	rjmp	.+10     	; 0x4efa <xio_setflags+0x6e>
		d->flags |= XIO_FLAG_CRLF_bm;
    4ef0:	80 81       	ld	r24, Z
    4ef2:	91 81       	ldd	r25, Z+1	; 0x01
    4ef4:	80 62       	ori	r24, 0x20	; 32
    4ef6:	80 83       	st	Z, r24
    4ef8:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOCRLF) {
    4efa:	73 ff       	sbrs	r23, 3
    4efc:	05 c0       	rjmp	.+10     	; 0x4f08 <xio_setflags+0x7c>
		d->flags &= ~XIO_FLAG_CRLF_bm;
    4efe:	80 81       	ld	r24, Z
    4f00:	91 81       	ldd	r25, Z+1	; 0x01
    4f02:	8f 7d       	andi	r24, 0xDF	; 223
    4f04:	80 83       	st	Z, r24
    4f06:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_LINEMODE) {
    4f08:	74 ff       	sbrs	r23, 4
    4f0a:	05 c0       	rjmp	.+10     	; 0x4f16 <xio_setflags+0x8a>
		d->flags |= XIO_FLAG_LINEMODE_bm;
    4f0c:	80 81       	ld	r24, Z
    4f0e:	91 81       	ldd	r25, Z+1	; 0x01
    4f10:	80 64       	ori	r24, 0x40	; 64
    4f12:	80 83       	st	Z, r24
    4f14:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOLINEMODE) {
    4f16:	75 ff       	sbrs	r23, 5
    4f18:	05 c0       	rjmp	.+10     	; 0x4f24 <xio_setflags+0x98>
		d->flags &= ~XIO_FLAG_LINEMODE_bm;
    4f1a:	80 81       	ld	r24, Z
    4f1c:	91 81       	ldd	r25, Z+1	; 0x01
    4f1e:	8f 7b       	andi	r24, 0xBF	; 191
    4f20:	80 83       	st	Z, r24
    4f22:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_SEMICOLONS) {
    4f24:	76 ff       	sbrs	r23, 6
    4f26:	05 c0       	rjmp	.+10     	; 0x4f32 <xio_setflags+0xa6>
		d->flags |= XIO_FLAG_SEMICOLONS_bm;
    4f28:	80 81       	ld	r24, Z
    4f2a:	91 81       	ldd	r25, Z+1	; 0x01
    4f2c:	80 68       	ori	r24, 0x80	; 128
    4f2e:	80 83       	st	Z, r24
    4f30:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOSEMICOLONS) {
    4f32:	77 ff       	sbrs	r23, 7
    4f34:	05 c0       	rjmp	.+10     	; 0x4f40 <xio_setflags+0xb4>
		d->flags &= ~XIO_FLAG_SEMICOLONS_bm;
    4f36:	80 81       	ld	r24, Z
    4f38:	91 81       	ldd	r25, Z+1	; 0x01
    4f3a:	8f 77       	andi	r24, 0x7F	; 127
    4f3c:	80 83       	st	Z, r24
    4f3e:	91 83       	std	Z+1, r25	; 0x01
    4f40:	08 95       	ret

00004f42 <xio_set_stdin>:
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	27 e1       	ldi	r18, 0x17	; 23
    4f46:	30 e0       	ldi	r19, 0x00	; 0
    4f48:	82 9f       	mul	r24, r18
    4f4a:	f0 01       	movw	r30, r0
    4f4c:	83 9f       	mul	r24, r19
    4f4e:	f0 0d       	add	r31, r0
    4f50:	92 9f       	mul	r25, r18
    4f52:	f0 0d       	add	r31, r0
    4f54:	11 24       	eor	r1, r1
    4f56:	eb 5f       	subi	r30, 0xFB	; 251
    4f58:	fa 4d       	sbci	r31, 0xDA	; 218
    4f5a:	83 89       	ldd	r24, Z+19	; 0x13
    4f5c:	94 89       	ldd	r25, Z+20	; 0x14
    4f5e:	80 93 44 26 	sts	0x2644, r24
    4f62:	90 93 45 26 	sts	0x2645, r25
}
    4f66:	08 95       	ret

00004f68 <xio_set_stdout>:

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	27 e1       	ldi	r18, 0x17	; 23
    4f6c:	30 e0       	ldi	r19, 0x00	; 0
    4f6e:	82 9f       	mul	r24, r18
    4f70:	f0 01       	movw	r30, r0
    4f72:	83 9f       	mul	r24, r19
    4f74:	f0 0d       	add	r31, r0
    4f76:	92 9f       	mul	r25, r18
    4f78:	f0 0d       	add	r31, r0
    4f7a:	11 24       	eor	r1, r1
    4f7c:	eb 5f       	subi	r30, 0xFB	; 251
    4f7e:	fa 4d       	sbci	r31, 0xDA	; 218
    4f80:	83 89       	ldd	r24, Z+19	; 0x13
    4f82:	94 89       	ldd	r25, Z+20	; 0x14
    4f84:	80 93 46 26 	sts	0x2646, r24
    4f88:	90 93 47 26 	sts	0x2647, r25
}
    4f8c:	08 95       	ret

00004f8e <xio_set_stderr>:

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	27 e1       	ldi	r18, 0x17	; 23
    4f92:	30 e0       	ldi	r19, 0x00	; 0
    4f94:	82 9f       	mul	r24, r18
    4f96:	f0 01       	movw	r30, r0
    4f98:	83 9f       	mul	r24, r19
    4f9a:	f0 0d       	add	r31, r0
    4f9c:	92 9f       	mul	r25, r18
    4f9e:	f0 0d       	add	r31, r0
    4fa0:	11 24       	eor	r1, r1
    4fa2:	eb 5f       	subi	r30, 0xFB	; 251
    4fa4:	fa 4d       	sbci	r31, 0xDA	; 218
    4fa6:	83 89       	ldd	r24, Z+19	; 0x13
    4fa8:	94 89       	ldd	r25, Z+20	; 0x14
    4faa:	80 93 48 26 	sts	0x2648, r24
    4fae:	90 93 49 26 	sts	0x2649, r25
}
    4fb2:	08 95       	ret

00004fb4 <xio_readln>:
 *	size	size of text buffer in 1 offset form: e.g. use 80 instead of 79
 */

int xio_readln(uint8_t dev, char *buf, uint8_t size)
{
	if (dev < XIO_DEV_COUNT) {
    4fb4:	88 30       	cpi	r24, 0x08	; 8
    4fb6:	18 f0       	brcs	.+6      	; 0x4fbe <xio_readln+0xa>
    4fb8:	27 e0       	ldi	r18, 0x07	; 7
    4fba:	30 e0       	ldi	r19, 0x00	; 0
    4fbc:	14 c0       	rjmp	.+40     	; 0x4fe6 <xio_readln+0x32>
		return ds[dev].dev_readln(buf, size);
    4fbe:	28 2f       	mov	r18, r24
    4fc0:	30 e0       	ldi	r19, 0x00	; 0
    4fc2:	87 e1       	ldi	r24, 0x17	; 23
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	28 9f       	mul	r18, r24
    4fc8:	f0 01       	movw	r30, r0
    4fca:	29 9f       	mul	r18, r25
    4fcc:	f0 0d       	add	r31, r0
    4fce:	38 9f       	mul	r19, r24
    4fd0:	f0 0d       	add	r31, r0
    4fd2:	11 24       	eor	r1, r1
    4fd4:	eb 5f       	subi	r30, 0xFB	; 251
    4fd6:	fa 4d       	sbci	r31, 0xDA	; 218
    4fd8:	07 84       	ldd	r0, Z+15	; 0x0f
    4fda:	f0 89       	ldd	r31, Z+16	; 0x10
    4fdc:	e0 2d       	mov	r30, r0
    4fde:	cb 01       	movw	r24, r22
    4fe0:	64 2f       	mov	r22, r20
    4fe2:	19 95       	eicall
    4fe4:	9c 01       	movw	r18, r24
		case (XIO_DEV_PGM): return (xio_readln_pgm(buf, size));
		default: return (XIO_NO_SUCH_DEVICE);
	}
	return (XIO_ERR);		// never should hit this
*/
}
    4fe6:	c9 01       	movw	r24, r18
    4fe8:	08 95       	ret

00004fea <xio_init_dev>:
	int (*dev_setflags)(const uint16_t control),// set device control flags
	int (*dev_putc)(char, struct __file *),		// write char (stdio compatible)
	int (*dev_getc)(struct __file *),			// read char (stdio compatible)
	int (*dev_readln)(char *buf, uint8_t size)	// specialized line reader
	) 
{
    4fea:	df 92       	push	r13
    4fec:	ef 92       	push	r14
    4fee:	ff 92       	push	r15
    4ff0:	0f 93       	push	r16
    4ff2:	1f 93       	push	r17
    4ff4:	cf 93       	push	r28
    4ff6:	df 93       	push	r29
	// clear device struct
	memset (&ds[dev], 0, sizeof(struct xioDEVICE));	
    4ff8:	90 e0       	ldi	r25, 0x00	; 0
    4ffa:	e7 e1       	ldi	r30, 0x17	; 23
    4ffc:	f0 e0       	ldi	r31, 0x00	; 0
    4ffe:	8e 9f       	mul	r24, r30
    5000:	d0 01       	movw	r26, r0
    5002:	8f 9f       	mul	r24, r31
    5004:	b0 0d       	add	r27, r0
    5006:	9e 9f       	mul	r25, r30
    5008:	b0 0d       	add	r27, r0
    500a:	11 24       	eor	r1, r1
    500c:	ab 5f       	subi	r26, 0xFB	; 251
    500e:	ba 4d       	sbci	r27, 0xDA	; 218
    5010:	0f 2e       	mov	r0, r31
    5012:	f7 e1       	ldi	r31, 0x17	; 23
    5014:	df 2e       	mov	r13, r31
    5016:	f0 2d       	mov	r31, r0
    5018:	ed 01       	movw	r28, r26
    501a:	19 92       	st	Y+, r1
    501c:	da 94       	dec	r13
    501e:	e9 f7       	brne	.-6      	; 0x501a <xio_init_dev+0x30>

	// bind functions
	ds[dev].dev_open = dev_open;						
    5020:	17 96       	adiw	r26, 0x07	; 7
    5022:	6d 93       	st	X+, r22
    5024:	7c 93       	st	X, r23
    5026:	18 97       	sbiw	r26, 0x08	; 8
	ds[dev].dev_setflags = dev_setflags;
    5028:	19 96       	adiw	r26, 0x09	; 9
    502a:	4d 93       	st	X+, r20
    502c:	5c 93       	st	X, r21
    502e:	1a 97       	sbiw	r26, 0x0a	; 10
	ds[dev].dev_putc = dev_putc;
    5030:	1b 96       	adiw	r26, 0x0b	; 11
    5032:	2d 93       	st	X+, r18
    5034:	3c 93       	st	X, r19
    5036:	1c 97       	sbiw	r26, 0x0c	; 12
	ds[dev].dev_getc = dev_getc;
    5038:	1d 96       	adiw	r26, 0x0d	; 13
    503a:	0d 93       	st	X+, r16
    503c:	1c 93       	st	X, r17
    503e:	1e 97       	sbiw	r26, 0x0e	; 14
	ds[dev].dev_readln = dev_readln;
    5040:	1f 96       	adiw	r26, 0x0f	; 15
    5042:	ed 92       	st	X+, r14
    5044:	fc 92       	st	X, r15
    5046:	50 97       	sbiw	r26, 0x10	; 16

	// bind and setup stdio struct
	ds[dev].fdev = &ss[dev];					
    5048:	88 0f       	add	r24, r24
    504a:	99 1f       	adc	r25, r25
    504c:	fc 01       	movw	r30, r24
    504e:	43 e0       	ldi	r20, 0x03	; 3
    5050:	ee 0f       	add	r30, r30
    5052:	ff 1f       	adc	r31, r31
    5054:	4a 95       	dec	r20
    5056:	e1 f7       	brne	.-8      	; 0x5050 <xio_init_dev+0x66>
    5058:	e8 1b       	sub	r30, r24
    505a:	f9 0b       	sbc	r31, r25
    505c:	e3 54       	subi	r30, 0x43	; 67
    505e:	fa 4d       	sbci	r31, 0xDA	; 218
    5060:	53 96       	adiw	r26, 0x13	; 19
    5062:	ed 93       	st	X+, r30
    5064:	fc 93       	st	X, r31
    5066:	54 97       	sbiw	r26, 0x14	; 20
	fdev_setup_stream(ds[dev].fdev, dev_putc, dev_getc, _FDEV_SETUP_RW);
    5068:	20 87       	std	Z+8, r18	; 0x08
    506a:	31 87       	std	Z+9, r19	; 0x09
    506c:	02 87       	std	Z+10, r16	; 0x0a
    506e:	13 87       	std	Z+11, r17	; 0x0b
    5070:	83 e0       	ldi	r24, 0x03	; 3
    5072:	83 83       	std	Z+3, r24	; 0x03
    5074:	14 86       	std	Z+12, r1	; 0x0c
    5076:	15 86       	std	Z+13, r1	; 0x0d
}
    5078:	df 91       	pop	r29
    507a:	cf 91       	pop	r28
    507c:	1f 91       	pop	r17
    507e:	0f 91       	pop	r16
    5080:	ff 90       	pop	r15
    5082:	ef 90       	pop	r14
    5084:	df 90       	pop	r13
    5086:	08 95       	ret

00005088 <xio_init>:
/*
 *	xio_init() - initialize all active XIO devices
 */

void xio_init(void)
{	
    5088:	8f 92       	push	r8
    508a:	af 92       	push	r10
    508c:	cf 92       	push	r12
    508e:	ef 92       	push	r14
    5090:	ff 92       	push	r15
    5092:	0f 93       	push	r16
    5094:	1f 93       	push	r17
	// RS485 device setup (brute force!)
	xio_init_dev(XIO_DEV_RS485, xio_open_rs485, xio_setflags_rs485, xio_putc_rs485, xio_getc_rs485, xio_readln_rs485);
    5096:	80 e0       	ldi	r24, 0x00	; 0
    5098:	63 e1       	ldi	r22, 0x13	; 19
    509a:	73 e3       	ldi	r23, 0x33	; 51
    509c:	41 ed       	ldi	r20, 0xD1	; 209
    509e:	53 e3       	ldi	r21, 0x33	; 51
    50a0:	2a ec       	ldi	r18, 0xCA	; 202
    50a2:	33 e3       	ldi	r19, 0x33	; 51
    50a4:	05 ec       	ldi	r16, 0xC5	; 197
    50a6:	13 e3       	ldi	r17, 0x33	; 51
    50a8:	fe eb       	ldi	r31, 0xBE	; 190
    50aa:	ef 2e       	mov	r14, r31
    50ac:	f3 e3       	ldi	r31, 0x33	; 51
    50ae:	ff 2e       	mov	r15, r31
    50b0:	0e 94 f5 27 	call	0x4fea	; 0x4fea <xio_init_dev>
	xio_init_usart(XIO_DEV_RS485, XIO_DEV_RS485_OFFSET, RS485_INIT_bm, &RS485_USART, &RS485_PORT, RS485_DIRCLR_bm,RS485_DIRSET_bm,RS485_OUTCLR_bm,RS485_OUTSET_bm);
    50b4:	80 e0       	ldi	r24, 0x00	; 0
    50b6:	60 e0       	ldi	r22, 0x00	; 0
    50b8:	45 e7       	ldi	r20, 0x75	; 117
    50ba:	55 e1       	ldi	r21, 0x15	; 21
    50bc:	20 eb       	ldi	r18, 0xB0	; 176
    50be:	38 e0       	ldi	r19, 0x08	; 8
    50c0:	00 e4       	ldi	r16, 0x40	; 64
    50c2:	16 e0       	ldi	r17, 0x06	; 6
    50c4:	e0 e4       	ldi	r30, 0x40	; 64
    50c6:	ee 2e       	mov	r14, r30
    50c8:	70 eb       	ldi	r23, 0xB0	; 176
    50ca:	c7 2e       	mov	r12, r23
    50cc:	90 e3       	ldi	r25, 0x30	; 48
    50ce:	a9 2e       	mov	r10, r25
    50d0:	b0 e8       	ldi	r27, 0x80	; 128
    50d2:	8b 2e       	mov	r8, r27
    50d4:	0e 94 b9 31 	call	0x6372	; 0x6372 <xio_init_usart>

	// USB device setup
	xio_init_dev(XIO_DEV_USB, xio_open_usb, xio_setflags_usb, xio_putc_usb, xio_getc_usb, xio_readln_usb);
    50d8:	81 e0       	ldi	r24, 0x01	; 1
    50da:	6e e4       	ldi	r22, 0x4E	; 78
    50dc:	72 e3       	ldi	r23, 0x32	; 50
    50de:	4c e0       	ldi	r20, 0x0C	; 12
    50e0:	53 e3       	ldi	r21, 0x33	; 51
    50e2:	25 e0       	ldi	r18, 0x05	; 5
    50e4:	33 e3       	ldi	r19, 0x33	; 51
    50e6:	00 e0       	ldi	r16, 0x00	; 0
    50e8:	13 e3       	ldi	r17, 0x33	; 51
    50ea:	a9 ef       	ldi	r26, 0xF9	; 249
    50ec:	ea 2e       	mov	r14, r26
    50ee:	a2 e3       	ldi	r26, 0x32	; 50
    50f0:	fa 2e       	mov	r15, r26
    50f2:	0e 94 f5 27 	call	0x4fea	; 0x4fea <xio_init_dev>
	xio_init_usart(XIO_DEV_USB, XIO_DEV_USB_OFFSET, USB_INIT_bm, &USB_USART, &USB_PORT, USB_DIRCLR_bm, USB_DIRSET_bm, USB_OUTCLR_bm, USB_OUTSET_bm);
    50f6:	81 e0       	ldi	r24, 0x01	; 1
    50f8:	61 e0       	ldi	r22, 0x01	; 1
    50fa:	45 e7       	ldi	r20, 0x75	; 117
    50fc:	55 e5       	ldi	r21, 0x55	; 85
    50fe:	20 ea       	ldi	r18, 0xA0	; 160
    5100:	38 e0       	ldi	r19, 0x08	; 8
    5102:	00 e4       	ldi	r16, 0x40	; 64
    5104:	16 e0       	ldi	r17, 0x06	; 6
    5106:	f5 e0       	ldi	r31, 0x05	; 5
    5108:	ef 2e       	mov	r14, r31
    510a:	ea e0       	ldi	r30, 0x0A	; 10
    510c:	ce 2e       	mov	r12, r30
    510e:	aa 24       	eor	r10, r10
    5110:	7a e0       	ldi	r23, 0x0A	; 10
    5112:	87 2e       	mov	r8, r23
    5114:	0e 94 b9 31 	call	0x6372	; 0x6372 <xio_init_usart>

	// Program memory file device setup
	xio_init_dev(XIO_DEV_PGM, xio_open_pgm, xio_setflags_pgm, xio_putc_pgm, xio_getc_pgm, xio_readln_pgm);
    5118:	83 e0       	ldi	r24, 0x03	; 3
    511a:	68 ed       	ldi	r22, 0xD8	; 216
    511c:	73 e3       	ldi	r23, 0x33	; 51
    511e:	46 e6       	ldi	r20, 0x66	; 102
    5120:	54 e3       	ldi	r21, 0x34	; 52
    5122:	20 ef       	ldi	r18, 0xF0	; 240
    5124:	33 e3       	ldi	r19, 0x33	; 51
    5126:	0a e1       	ldi	r16, 0x1A	; 26
    5128:	14 e3       	ldi	r17, 0x34	; 52
    512a:	93 ef       	ldi	r25, 0xF3	; 243
    512c:	e9 2e       	mov	r14, r25
    512e:	93 e3       	ldi	r25, 0x33	; 51
    5130:	f9 2e       	mov	r15, r25
    5132:	0e 94 f5 27 	call	0x4fea	; 0x4fea <xio_init_dev>
	xio_init_pgm(XIO_DEV_PGM, XIO_DEV_PGM_OFFSET, PGM_INIT_bm);
    5136:	83 e0       	ldi	r24, 0x03	; 3
    5138:	60 e0       	ldi	r22, 0x00	; 0
    513a:	40 e5       	ldi	r20, 0x50	; 80
    513c:	55 e1       	ldi	r21, 0x15	; 21
    513e:	0e 94 6d 34 	call	0x68da	; 0x68da <xio_init_pgm>
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    5142:	80 91 2f 25 	lds	r24, 0x252F
    5146:	90 91 30 25 	lds	r25, 0x2530
    514a:	80 93 44 26 	sts	0x2644, r24
    514e:	90 93 45 26 	sts	0x2645, r25
}

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    5152:	80 93 46 26 	sts	0x2646, r24
    5156:	90 93 47 26 	sts	0x2647, r25
}

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    515a:	80 93 48 26 	sts	0x2648, r24
    515e:	90 93 49 26 	sts	0x2649, r25
	xio_set_stdin(XIO_DEV_USB);
	xio_set_stdout(XIO_DEV_USB);
	xio_set_stderr(XIO_DEV_USB);

	// tell the world we are ready!
	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    5162:	0f 92       	push	r0
    5164:	0f 92       	push	r0
    5166:	84 e2       	ldi	r24, 0x24	; 36
    5168:	97 e0       	ldi	r25, 0x07	; 7
    516a:	ed b7       	in	r30, 0x3d	; 61
    516c:	fe b7       	in	r31, 0x3e	; 62
    516e:	81 83       	std	Z+1, r24	; 0x01
    5170:	92 83       	std	Z+2, r25	; 0x02
    5172:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
    5176:	0f 90       	pop	r0
    5178:	0f 90       	pop	r0
}
    517a:	1f 91       	pop	r17
    517c:	0f 91       	pop	r16
    517e:	ff 90       	pop	r15
    5180:	ef 90       	pop	r14
    5182:	cf 90       	pop	r12
    5184:	af 90       	pop	r10
    5186:	8f 90       	pop	r8
    5188:	08 95       	ret

0000518a <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    518a:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    518c:	e0 ec       	ldi	r30, 0xC0	; 192
    518e:	f1 e0       	ldi	r31, 0x01	; 1
    5190:	80 91 cf 01 	lds	r24, 0x01CF
    5194:	87 fd       	sbrc	r24, 7
    5196:	fa cf       	rjmp	.-12     	; 0x518c <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    5198:	26 2f       	mov	r18, r22
    519a:	30 e0       	ldi	r19, 0x00	; 0
    519c:	2f 71       	andi	r18, 0x1F	; 31
    519e:	30 70       	andi	r19, 0x00	; 0
    51a0:	89 2f       	mov	r24, r25
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	45 e0       	ldi	r20, 0x05	; 5
    51a6:	88 0f       	add	r24, r24
    51a8:	99 1f       	adc	r25, r25
    51aa:	4a 95       	dec	r20
    51ac:	e1 f7       	brne	.-8      	; 0x51a6 <EEPROM_ReadByte+0x1c>
    51ae:	28 2b       	or	r18, r24
    51b0:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    51b2:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    51b6:	83 2f       	mov	r24, r19
    51b8:	8f 71       	andi	r24, 0x1F	; 31
    51ba:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    51bc:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    51be:	86 e0       	ldi	r24, 0x06	; 6
    51c0:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    51c2:	ef 93       	push	r30
    51c4:	ff 93       	push	r31
    51c6:	0f 93       	push	r16
    51c8:	2f 93       	push	r18
    51ca:	eb ec       	ldi	r30, 0xCB	; 203
    51cc:	f1 e0       	ldi	r31, 0x01	; 1
    51ce:	08 ed       	ldi	r16, 0xD8	; 216
    51d0:	21 e0       	ldi	r18, 0x01	; 1
    51d2:	04 bf       	out	0x34, r16	; 52
    51d4:	20 83       	st	Z, r18
    51d6:	2f 91       	pop	r18
    51d8:	0f 91       	pop	r16
    51da:	ff 91       	pop	r31
    51dc:	ef 91       	pop	r30

	return NVM.DATA0;
    51de:	80 91 c4 01 	lds	r24, 0x01C4
}
    51e2:	08 95       	ret

000051e4 <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    51e4:	68 2f       	mov	r22, r24
    51e6:	6f 71       	andi	r22, 0x1F	; 31
    51e8:	55 e0       	ldi	r21, 0x05	; 5
    51ea:	96 95       	lsr	r25
    51ec:	87 95       	ror	r24
    51ee:	5a 95       	dec	r21
    51f0:	e1 f7       	brne	.-8      	; 0x51ea <eeprom_get_char+0x6>
    51f2:	0e 94 c5 28 	call	0x518a	; 0x518a <EEPROM_ReadByte>
}
    51f6:	08 95       	ret

000051f8 <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    51f8:	8f 92       	push	r8
    51fa:	9f 92       	push	r9
    51fc:	af 92       	push	r10
    51fe:	bf 92       	push	r11
    5200:	cf 92       	push	r12
    5202:	df 92       	push	r13
    5204:	ff 92       	push	r15
    5206:	0f 93       	push	r16
    5208:	1f 93       	push	r17
    520a:	cf 93       	push	r28
    520c:	df 93       	push	r29
    520e:	4c 01       	movw	r8, r24
    5210:	5b 01       	movw	r10, r22
    5212:	6a 01       	movw	r12, r20
    5214:	8b 01       	movw	r16, r22
    5216:	ea 01       	movw	r28, r20
    5218:	ff 24       	eor	r15, r15
    521a:	18 c0       	rjmp	.+48     	; 0x524c <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    521c:	c8 01       	movw	r24, r16
    521e:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    5222:	ff 20       	and	r15, r15
    5224:	19 f0       	breq	.+6      	; 0x522c <memcpy_from_eeprom_with_checksum+0x34>
    5226:	21 e0       	ldi	r18, 0x01	; 1
    5228:	30 e0       	ldi	r19, 0x00	; 0
    522a:	08 c0       	rjmp	.+16     	; 0x523c <memcpy_from_eeprom_with_checksum+0x44>
    522c:	2f 2d       	mov	r18, r15
    522e:	33 27       	eor	r19, r19
    5230:	27 fd       	sbrc	r18, 7
    5232:	30 95       	com	r19
    5234:	22 27       	eor	r18, r18
    5236:	33 0f       	add	r19, r19
    5238:	22 1f       	adc	r18, r18
    523a:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    523c:	0f 5f       	subi	r16, 0xFF	; 255
    523e:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    5240:	f8 2e       	mov	r15, r24
    5242:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    5244:	f4 01       	movw	r30, r8
    5246:	81 93       	st	Z+, r24
    5248:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    524a:	21 97       	sbiw	r28, 0x01	; 1
    524c:	20 97       	sbiw	r28, 0x00	; 0
    524e:	31 f7       	brne	.-52     	; 0x521c <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    5250:	c6 01       	movw	r24, r12
    5252:	8a 0d       	add	r24, r10
    5254:	9b 1d       	adc	r25, r11
    5256:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <eeprom_get_char>
    525a:	20 e0       	ldi	r18, 0x00	; 0
    525c:	30 e0       	ldi	r19, 0x00	; 0
    525e:	f8 16       	cp	r15, r24
    5260:	11 f4       	brne	.+4      	; 0x5266 <memcpy_from_eeprom_with_checksum+0x6e>
    5262:	21 e0       	ldi	r18, 0x01	; 1
    5264:	30 e0       	ldi	r19, 0x00	; 0
}
    5266:	c9 01       	movw	r24, r18
    5268:	df 91       	pop	r29
    526a:	cf 91       	pop	r28
    526c:	1f 91       	pop	r17
    526e:	0f 91       	pop	r16
    5270:	ff 90       	pop	r15
    5272:	df 90       	pop	r13
    5274:	cf 90       	pop	r12
    5276:	bf 90       	pop	r11
    5278:	af 90       	pop	r10
    527a:	9f 90       	pop	r9
    527c:	8f 90       	pop	r8
    527e:	08 95       	ret

00005280 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5280:	80 91 cf 01 	lds	r24, 0x01CF
    5284:	87 fd       	sbrc	r24, 7
    5286:	fc cf       	rjmp	.-8      	; 0x5280 <EEPROM_WaitForNVM>
}
    5288:	08 95       	ret

0000528a <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    528a:	80 91 cf 01 	lds	r24, 0x01CF
    528e:	87 fd       	sbrc	r24, 7
    5290:	fc cf       	rjmp	.-8      	; 0x528a <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    5292:	80 91 cf 01 	lds	r24, 0x01CF
    5296:	81 ff       	sbrs	r24, 1
    5298:	12 c0       	rjmp	.+36     	; 0x52be <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    529a:	86 e3       	ldi	r24, 0x36	; 54
    529c:	e0 ec       	ldi	r30, 0xC0	; 192
    529e:	f1 e0       	ldi	r31, 0x01	; 1
    52a0:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    52a2:	ef 93       	push	r30
    52a4:	ff 93       	push	r31
    52a6:	0f 93       	push	r16
    52a8:	2f 93       	push	r18
    52aa:	eb ec       	ldi	r30, 0xCB	; 203
    52ac:	f1 e0       	ldi	r31, 0x01	; 1
    52ae:	08 ed       	ldi	r16, 0xD8	; 216
    52b0:	21 e0       	ldi	r18, 0x01	; 1
    52b2:	04 bf       	out	0x34, r16	; 52
    52b4:	20 83       	st	Z, r18
    52b6:	2f 91       	pop	r18
    52b8:	0f 91       	pop	r16
    52ba:	ff 91       	pop	r31
    52bc:	ef 91       	pop	r30
    52be:	08 95       	ret

000052c0 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    52c0:	df 92       	push	r13
    52c2:	ef 92       	push	r14
    52c4:	ff 92       	push	r15
    52c6:	0f 93       	push	r16
    52c8:	1f 93       	push	r17
    52ca:	e8 2e       	mov	r14, r24
    52cc:	06 2f       	mov	r16, r22
    52ce:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    52d0:	0e 94 45 29 	call	0x528a	; 0x528a <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    52d4:	e0 ec       	ldi	r30, 0xC0	; 192
    52d6:	f1 e0       	ldi	r31, 0x01	; 1
    52d8:	83 e3       	ldi	r24, 0x33	; 51
    52da:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    52dc:	10 e0       	ldi	r17, 0x00	; 0
    52de:	0f 71       	andi	r16, 0x1F	; 31
    52e0:	10 70       	andi	r17, 0x00	; 0
    52e2:	ff 24       	eor	r15, r15
    52e4:	75 e0       	ldi	r23, 0x05	; 5
    52e6:	ee 0c       	add	r14, r14
    52e8:	ff 1c       	adc	r15, r15
    52ea:	7a 95       	dec	r23
    52ec:	e1 f7       	brne	.-8      	; 0x52e6 <EEPROM_WriteByte+0x26>
    52ee:	0e 29       	or	r16, r14
    52f0:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    52f2:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    52f4:	81 2f       	mov	r24, r17
    52f6:	8f 71       	andi	r24, 0x1F	; 31
    52f8:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    52fa:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    52fc:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    52fe:	85 e3       	ldi	r24, 0x35	; 53
    5300:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5302:	ef 93       	push	r30
    5304:	ff 93       	push	r31
    5306:	0f 93       	push	r16
    5308:	2f 93       	push	r18
    530a:	eb ec       	ldi	r30, 0xCB	; 203
    530c:	f1 e0       	ldi	r31, 0x01	; 1
    530e:	08 ed       	ldi	r16, 0xD8	; 216
    5310:	21 e0       	ldi	r18, 0x01	; 1
    5312:	04 bf       	out	0x34, r16	; 52
    5314:	20 83       	st	Z, r18
    5316:	2f 91       	pop	r18
    5318:	0f 91       	pop	r16
    531a:	ff 91       	pop	r31
    531c:	ef 91       	pop	r30
}
    531e:	1f 91       	pop	r17
    5320:	0f 91       	pop	r16
    5322:	ff 90       	pop	r15
    5324:	ef 90       	pop	r14
    5326:	df 90       	pop	r13
    5328:	08 95       	ret

0000532a <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    532a:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    532c:	68 2f       	mov	r22, r24
    532e:	6f 71       	andi	r22, 0x1F	; 31
    5330:	e5 e0       	ldi	r30, 0x05	; 5
    5332:	96 95       	lsr	r25
    5334:	87 95       	ror	r24
    5336:	ea 95       	dec	r30
    5338:	e1 f7       	brne	.-8      	; 0x5332 <eeprom_put_char+0x8>
    533a:	0e 94 60 29 	call	0x52c0	; 0x52c0 <EEPROM_WriteByte>
}
    533e:	08 95       	ret

00005340 <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    5340:	8f 92       	push	r8
    5342:	9f 92       	push	r9
    5344:	af 92       	push	r10
    5346:	bf 92       	push	r11
    5348:	cf 92       	push	r12
    534a:	df 92       	push	r13
    534c:	ef 92       	push	r14
    534e:	ff 92       	push	r15
    5350:	0f 93       	push	r16
    5352:	df 93       	push	r29
    5354:	cf 93       	push	r28
    5356:	0f 92       	push	r0
    5358:	0f 92       	push	r0
    535a:	cd b7       	in	r28, 0x3d	; 61
    535c:	de b7       	in	r29, 0x3e	; 62
    535e:	5c 01       	movw	r10, r24
    5360:	6b 01       	movw	r12, r22
    5362:	7a 01       	movw	r14, r20
    5364:	4a 01       	movw	r8, r20
    5366:	00 e0       	ldi	r16, 0x00	; 0
    5368:	1e c0       	rjmp	.+60     	; 0x53a6 <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    536a:	00 23       	and	r16, r16
    536c:	19 f0       	breq	.+6      	; 0x5374 <memcpy_to_eeprom_with_checksum+0x34>
    536e:	21 e0       	ldi	r18, 0x01	; 1
    5370:	30 e0       	ldi	r19, 0x00	; 0
    5372:	08 c0       	rjmp	.+16     	; 0x5384 <memcpy_to_eeprom_with_checksum+0x44>
    5374:	20 2f       	mov	r18, r16
    5376:	33 27       	eor	r19, r19
    5378:	27 fd       	sbrc	r18, 7
    537a:	30 95       	com	r19
    537c:	22 27       	eor	r18, r18
    537e:	33 0f       	add	r19, r19
    5380:	22 1f       	adc	r18, r18
    5382:	33 27       	eor	r19, r19
    checksum += *source;
    5384:	f6 01       	movw	r30, r12
    5386:	61 91       	ld	r22, Z+
    5388:	6f 01       	movw	r12, r30
    538a:	06 2f       	mov	r16, r22
    538c:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    538e:	9c 01       	movw	r18, r24
    5390:	2f 5f       	subi	r18, 0xFF	; 255
    5392:	3f 4f       	sbci	r19, 0xFF	; 255
    5394:	29 83       	std	Y+1, r18	; 0x01
    5396:	3a 83       	std	Y+2, r19	; 0x02
    5398:	0e 94 95 29 	call	0x532a	; 0x532a <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    539c:	08 94       	sec
    539e:	81 08       	sbc	r8, r1
    53a0:	91 08       	sbc	r9, r1
    53a2:	89 81       	ldd	r24, Y+1	; 0x01
    53a4:	9a 81       	ldd	r25, Y+2	; 0x02
    53a6:	81 14       	cp	r8, r1
    53a8:	91 04       	cpc	r9, r1
    53aa:	f9 f6       	brne	.-66     	; 0x536a <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    53ac:	c7 01       	movw	r24, r14
    53ae:	8a 0d       	add	r24, r10
    53b0:	9b 1d       	adc	r25, r11
    53b2:	60 2f       	mov	r22, r16
    53b4:	0e 94 95 29 	call	0x532a	; 0x532a <eeprom_put_char>
}
    53b8:	0f 90       	pop	r0
    53ba:	0f 90       	pop	r0
    53bc:	cf 91       	pop	r28
    53be:	df 91       	pop	r29
    53c0:	0f 91       	pop	r16
    53c2:	ff 90       	pop	r15
    53c4:	ef 90       	pop	r14
    53c6:	df 90       	pop	r13
    53c8:	cf 90       	pop	r12
    53ca:	bf 90       	pop	r11
    53cc:	af 90       	pop	r10
    53ce:	9f 90       	pop	r9
    53d0:	8f 90       	pop	r8
    53d2:	08 95       	ret

000053d4 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    53d4:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    53d6:	e0 ec       	ldi	r30, 0xC0	; 192
    53d8:	f1 e0       	ldi	r31, 0x01	; 1
    53da:	80 91 cf 01 	lds	r24, 0x01CF
    53de:	87 fd       	sbrc	r24, 7
    53e0:	fa cf       	rjmp	.-12     	; 0x53d6 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    53e2:	83 e3       	ldi	r24, 0x33	; 51
    53e4:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    53e6:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    53ea:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    53ec:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    53ee:	64 83       	std	Z+4, r22	; 0x04
}
    53f0:	08 95       	ret

000053f2 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    53f2:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    53f4:	e0 ec       	ldi	r30, 0xC0	; 192
    53f6:	f1 e0       	ldi	r31, 0x01	; 1
    53f8:	80 91 cf 01 	lds	r24, 0x01CF
    53fc:	87 fd       	sbrc	r24, 7
    53fe:	fa cf       	rjmp	.-12     	; 0x53f4 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5400:	83 e3       	ldi	r24, 0x33	; 51
    5402:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    5404:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5406:	12 82       	std	Z+2, r1	; 0x02
    5408:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    540a:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    540e:	8d 91       	ld	r24, X+
    5410:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    5412:	9f 5f       	subi	r25, 0xFF	; 255
    5414:	90 32       	cpi	r25, 0x20	; 32
    5416:	c9 f7       	brne	.-14     	; 0x540a <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    5418:	08 95       	ret

0000541a <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    541a:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    541c:	e0 ec       	ldi	r30, 0xC0	; 192
    541e:	f1 e0       	ldi	r31, 0x01	; 1
    5420:	80 91 cf 01 	lds	r24, 0x01CF
    5424:	87 fd       	sbrc	r24, 7
    5426:	fa cf       	rjmp	.-12     	; 0x541c <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5428:	89 2f       	mov	r24, r25
    542a:	90 e0       	ldi	r25, 0x00	; 0
    542c:	a5 e0       	ldi	r26, 0x05	; 5
    542e:	88 0f       	add	r24, r24
    5430:	99 1f       	adc	r25, r25
    5432:	aa 95       	dec	r26
    5434:	e1 f7       	brne	.-8      	; 0x542e <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5436:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    543a:	89 2f       	mov	r24, r25
    543c:	8f 71       	andi	r24, 0x1F	; 31
    543e:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5440:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5442:	85 e3       	ldi	r24, 0x35	; 53
    5444:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5446:	ef 93       	push	r30
    5448:	ff 93       	push	r31
    544a:	0f 93       	push	r16
    544c:	2f 93       	push	r18
    544e:	eb ec       	ldi	r30, 0xCB	; 203
    5450:	f1 e0       	ldi	r31, 0x01	; 1
    5452:	08 ed       	ldi	r16, 0xD8	; 216
    5454:	21 e0       	ldi	r18, 0x01	; 1
    5456:	04 bf       	out	0x34, r16	; 52
    5458:	20 83       	st	Z, r18
    545a:	2f 91       	pop	r18
    545c:	0f 91       	pop	r16
    545e:	ff 91       	pop	r31
    5460:	ef 91       	pop	r30
}
    5462:	08 95       	ret

00005464 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    5464:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5466:	e0 ec       	ldi	r30, 0xC0	; 192
    5468:	f1 e0       	ldi	r31, 0x01	; 1
    546a:	80 91 cf 01 	lds	r24, 0x01CF
    546e:	87 fd       	sbrc	r24, 7
    5470:	fa cf       	rjmp	.-12     	; 0x5466 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5472:	89 2f       	mov	r24, r25
    5474:	90 e0       	ldi	r25, 0x00	; 0
    5476:	b5 e0       	ldi	r27, 0x05	; 5
    5478:	88 0f       	add	r24, r24
    547a:	99 1f       	adc	r25, r25
    547c:	ba 95       	dec	r27
    547e:	e1 f7       	brne	.-8      	; 0x5478 <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5480:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5484:	89 2f       	mov	r24, r25
    5486:	8f 71       	andi	r24, 0x1F	; 31
    5488:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    548a:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    548c:	82 e3       	ldi	r24, 0x32	; 50
    548e:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5490:	ef 93       	push	r30
    5492:	ff 93       	push	r31
    5494:	0f 93       	push	r16
    5496:	2f 93       	push	r18
    5498:	eb ec       	ldi	r30, 0xCB	; 203
    549a:	f1 e0       	ldi	r31, 0x01	; 1
    549c:	08 ed       	ldi	r16, 0xD8	; 216
    549e:	21 e0       	ldi	r18, 0x01	; 1
    54a0:	04 bf       	out	0x34, r16	; 52
    54a2:	20 83       	st	Z, r18
    54a4:	2f 91       	pop	r18
    54a6:	0f 91       	pop	r16
    54a8:	ff 91       	pop	r31
    54aa:	ef 91       	pop	r30
}
    54ac:	08 95       	ret

000054ae <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    54ae:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    54b0:	e0 ec       	ldi	r30, 0xC0	; 192
    54b2:	f1 e0       	ldi	r31, 0x01	; 1
    54b4:	80 91 cf 01 	lds	r24, 0x01CF
    54b8:	87 fd       	sbrc	r24, 7
    54ba:	fa cf       	rjmp	.-12     	; 0x54b0 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    54bc:	89 2f       	mov	r24, r25
    54be:	90 e0       	ldi	r25, 0x00	; 0
    54c0:	25 e0       	ldi	r18, 0x05	; 5
    54c2:	88 0f       	add	r24, r24
    54c4:	99 1f       	adc	r25, r25
    54c6:	2a 95       	dec	r18
    54c8:	e1 f7       	brne	.-8      	; 0x54c2 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    54ca:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    54ce:	89 2f       	mov	r24, r25
    54d0:	8f 71       	andi	r24, 0x1F	; 31
    54d2:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    54d4:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    54d6:	84 e3       	ldi	r24, 0x34	; 52
    54d8:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    54da:	ef 93       	push	r30
    54dc:	ff 93       	push	r31
    54de:	0f 93       	push	r16
    54e0:	2f 93       	push	r18
    54e2:	eb ec       	ldi	r30, 0xCB	; 203
    54e4:	f1 e0       	ldi	r31, 0x01	; 1
    54e6:	08 ed       	ldi	r16, 0xD8	; 216
    54e8:	21 e0       	ldi	r18, 0x01	; 1
    54ea:	04 bf       	out	0x34, r16	; 52
    54ec:	20 83       	st	Z, r18
    54ee:	2f 91       	pop	r18
    54f0:	0f 91       	pop	r16
    54f2:	ff 91       	pop	r31
    54f4:	ef 91       	pop	r30
}
    54f6:	08 95       	ret

000054f8 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    54f8:	80 91 cf 01 	lds	r24, 0x01CF
    54fc:	87 fd       	sbrc	r24, 7
    54fe:	fc cf       	rjmp	.-8      	; 0x54f8 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    5500:	80 e3       	ldi	r24, 0x30	; 48
    5502:	e0 ec       	ldi	r30, 0xC0	; 192
    5504:	f1 e0       	ldi	r31, 0x01	; 1
    5506:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5508:	ef 93       	push	r30
    550a:	ff 93       	push	r31
    550c:	0f 93       	push	r16
    550e:	2f 93       	push	r18
    5510:	eb ec       	ldi	r30, 0xCB	; 203
    5512:	f1 e0       	ldi	r31, 0x01	; 1
    5514:	08 ed       	ldi	r16, 0xD8	; 216
    5516:	21 e0       	ldi	r18, 0x01	; 1
    5518:	04 bf       	out	0x34, r16	; 52
    551a:	20 83       	st	Z, r18
    551c:	2f 91       	pop	r18
    551e:	0f 91       	pop	r16
    5520:	ff 91       	pop	r31
    5522:	ef 91       	pop	r30
}
    5524:	08 95       	ret

00005526 <tg_reset_source>:
 * tg_reset_source()  Reset source to default input device
 */

void tg_reset_source()
{
	_tg_set_source(tg.default_src);
    5526:	80 91 96 21 	lds	r24, 0x2196
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    552a:	80 93 95 21 	sts	0x2195, r24
	if (tg.src == XIO_DEV_PGM) {
    552e:	83 30       	cpi	r24, 0x03	; 3
    5530:	21 f4       	brne	.+8      	; 0x553a <tg_reset_source+0x14>
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    5532:	80 91 92 21 	lds	r24, 0x2192
    5536:	8e 7f       	andi	r24, 0xFE	; 254
    5538:	03 c0       	rjmp	.+6      	; 0x5540 <tg_reset_source+0x1a>
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    553a:	80 91 92 21 	lds	r24, 0x2192
    553e:	81 60       	ori	r24, 0x01	; 1
    5540:	80 93 92 21 	sts	0x2192, r24
    5544:	08 95       	ret

00005546 <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    5546:	cf 93       	push	r28
    5548:	df 93       	push	r29
    554a:	ec 01       	movw	r28, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    554c:	80 91 94 21 	lds	r24, 0x2194
    5550:	88 23       	and	r24, r24
    5552:	b1 f5       	brne	.+108    	; 0x55c0 <tg_parser+0x7a>
		switch (toupper(buf[0])) {
    5554:	88 81       	ld	r24, Y
    5556:	90 e0       	ldi	r25, 0x00	; 0
    5558:	0e 94 ae 46 	call	0x8d5c	; 0x8d5c <toupper>
    555c:	86 34       	cpi	r24, 0x46	; 70
    555e:	91 05       	cpc	r25, r1
    5560:	d9 f0       	breq	.+54     	; 0x5598 <tg_parser+0x52>
    5562:	87 34       	cpi	r24, 0x47	; 71
    5564:	91 05       	cpc	r25, r1
    5566:	4c f4       	brge	.+18     	; 0x557a <tg_parser+0x34>
    5568:	83 34       	cpi	r24, 0x43	; 67
    556a:	91 05       	cpc	r25, r1
    556c:	79 f0       	breq	.+30     	; 0x558c <tg_parser+0x46>
    556e:	84 34       	cpi	r24, 0x44	; 68
    5570:	91 05       	cpc	r25, r1
    5572:	81 f0       	breq	.+32     	; 0x5594 <tg_parser+0x4e>
    5574:	cf 97       	sbiw	r24, 0x3f	; 63
    5576:	11 f5       	brne	.+68     	; 0x55bc <tg_parser+0x76>
    5578:	09 c0       	rjmp	.+18     	; 0x558c <tg_parser+0x46>
    557a:	87 34       	cpi	r24, 0x47	; 71
    557c:	91 05       	cpc	r25, r1
    557e:	21 f0       	breq	.+8      	; 0x5588 <tg_parser+0x42>
    5580:	8d 54       	subi	r24, 0x4D	; 77
    5582:	90 40       	sbci	r25, 0x00	; 0
    5584:	02 97       	sbiw	r24, 0x02	; 2
    5586:	d0 f4       	brcc	.+52     	; 0x55bc <tg_parser+0x76>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5588:	82 e0       	ldi	r24, 0x02	; 2
    558a:	01 c0       	rjmp	.+2      	; 0x558e <tg_parser+0x48>
int tg_parser(char * buf)
{
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
		switch (toupper(buf[0])) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    558c:	81 e0       	ldi	r24, 0x01	; 1
    558e:	80 93 94 21 	sts	0x2194, r24
    5592:	16 c0       	rjmp	.+44     	; 0x55c0 <tg_parser+0x7a>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5594:	83 e0       	ldi	r24, 0x03	; 3
    5596:	fb cf       	rjmp	.-10     	; 0x558e <tg_parser+0x48>
//	xio_open_pgm(PGMFILE(&square_circle_test100));
//	xio_open_pgm(PGMFILE(&spiral_test50a));
//	xio_open_pgm(PGMFILE(&spiral_test5));
//	xio_open_pgm(PGMFILE(&dwell_test2));

	xio_open_pgm(PGMFILE(&contraptor_circle)); 	// contraptor circle test
    5598:	88 e8       	ldi	r24, 0x88	; 136
    559a:	95 e1       	ldi	r25, 0x15	; 21
    559c:	0e 94 d8 33 	call	0x67b0	; 0x67b0 <xio_open_pgm>
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    55a0:	83 e0       	ldi	r24, 0x03	; 3
    55a2:	80 93 95 21 	sts	0x2195, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    55a6:	80 91 92 21 	lds	r24, 0x2192
    55aa:	8e 7f       	andi	r24, 0xFE	; 254
    55ac:	80 93 92 21 	sts	0x2192, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    55b0:	82 e0       	ldi	r24, 0x02	; 2
    55b2:	80 93 94 21 	sts	0x2194, r24
    55b6:	20 e0       	ldi	r18, 0x00	; 0
    55b8:	30 e0       	ldi	r19, 0x00	; 0
    55ba:	1d c0       	rjmp	.+58     	; 0x55f6 <tg_parser+0xb0>
	if (tg.mode == TG_CONTROL_MODE) {
		switch (toupper(buf[0])) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
			case 'C': case '?': _tg_set_mode(TG_CONFIG_MODE); break;
			case 'D': _tg_set_mode(TG_DIRECT_DRIVE_MODE); break;
			case 'F': return (_tg_test_file());
    55bc:	10 92 94 21 	sts	0x2194, r1
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    55c0:	10 92 93 21 	sts	0x2193, r1
	switch (tg.mode) {
    55c4:	80 91 94 21 	lds	r24, 0x2194
    55c8:	82 30       	cpi	r24, 0x02	; 2
    55ca:	41 f0       	breq	.+16     	; 0x55dc <tg_parser+0x96>
    55cc:	83 30       	cpi	r24, 0x03	; 3
    55ce:	51 f0       	breq	.+20     	; 0x55e4 <tg_parser+0x9e>
    55d0:	81 30       	cpi	r24, 0x01	; 1
    55d2:	69 f4       	brne	.+26     	; 0x55ee <tg_parser+0xa8>
		case TG_CONFIG_MODE: tg.status = cfg_parse(buf); break;
    55d4:	ce 01       	movw	r24, r28
    55d6:	0e 94 80 18 	call	0x3100	; 0x3100 <cfg_parse>
    55da:	07 c0       	rjmp	.+14     	; 0x55ea <tg_parser+0xa4>
		case TG_GCODE_MODE: tg.status = gc_gcode_parser(buf); break;
    55dc:	ce 01       	movw	r24, r28
    55de:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <gc_gcode_parser>
    55e2:	03 c0       	rjmp	.+6      	; 0x55ea <tg_parser+0xa4>
		case TG_DIRECT_DRIVE_MODE: tg.status = dd_parser(buf); break;
    55e4:	ce 01       	movw	r24, r28
    55e6:	0e 94 8c 2b 	call	0x5718	; 0x5718 <dd_parser>
    55ea:	80 93 93 21 	sts	0x2193, r24
	}
	return (tg.status);
    55ee:	80 91 93 21 	lds	r24, 0x2193
    55f2:	28 2f       	mov	r18, r24
    55f4:	30 e0       	ldi	r19, 0x00	; 0
}
    55f6:	c9 01       	movw	r24, r18
    55f8:	df 91       	pop	r29
    55fa:	cf 91       	pop	r28
    55fc:	08 95       	ret

000055fe <tg_controller>:
 */

void tg_controller()
{
	// top priority tasks
	st_execute_move();
    55fe:	0e 94 4f 24 	call	0x489e	; 0x489e <st_execute_move>

	// medium priority tasks
	switch (mc_line_continue()) {
    5602:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <mc_line_continue>
    5606:	00 97       	sbiw	r24, 0x00	; 0
    5608:	51 f0       	breq	.+20     	; 0x561e <tg_controller+0x20>
    560a:	02 97       	sbiw	r24, 0x02	; 2
    560c:	09 f4       	brne	.+2      	; 0x5610 <tg_controller+0x12>
    560e:	08 95       	ret
		case (TG_EAGAIN): return;
		case (TG_OK): tg.state = TG_READY_UNPROMPTED; return;
	}

	switch (mc_arc_continue()) {
    5610:	0e 94 b7 1c 	call	0x396e	; 0x396e <mc_arc_continue>
    5614:	00 97       	sbiw	r24, 0x00	; 0
    5616:	19 f0       	breq	.+6      	; 0x561e <tg_controller+0x20>
    5618:	02 97       	sbiw	r24, 0x02	; 2
    561a:	21 f4       	brne	.+8      	; 0x5624 <tg_controller+0x26>
    561c:	08 95       	ret
		case (TG_EAGAIN): return;
		case (TG_OK): tg.state = TG_READY_UNPROMPTED; return;
    561e:	10 92 91 21 	sts	0x2191, r1
    5622:	08 95       	ret
 */

static int _tg_read_next_line()
{
	// read input line or return if not a completed line
	if ((tg.status = xio_readln(tg.src, tg.buf, sizeof(tg.buf))) == TG_OK) {
    5624:	80 91 95 21 	lds	r24, 0x2195
    5628:	68 e9       	ldi	r22, 0x98	; 152
    562a:	71 e2       	ldi	r23, 0x21	; 33
    562c:	40 e5       	ldi	r20, 0x50	; 80
    562e:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <xio_readln>
    5632:	80 93 93 21 	sts	0x2193, r24
    5636:	88 23       	and	r24, r24
    5638:	31 f4       	brne	.+12     	; 0x5646 <tg_controller+0x48>
		tg.status = tg_parser(tg.buf);				// dispatch to parser
    563a:	88 e9       	ldi	r24, 0x98	; 152
    563c:	91 e2       	ldi	r25, 0x21	; 33
    563e:	0e 94 a3 2a 	call	0x5546	; 0x5546 <tg_parser>
    5642:	80 93 93 21 	sts	0x2193, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    5646:	80 91 93 21 	lds	r24, 0x2193
    564a:	84 30       	cpi	r24, 0x04	; 4
    564c:	18 f4       	brcc	.+6      	; 0x5654 <tg_controller+0x56>
    564e:	82 30       	cpi	r24, 0x02	; 2
    5650:	c0 f4       	brcc	.+48     	; 0x5682 <tg_controller+0x84>
    5652:	15 c0       	rjmp	.+42     	; 0x567e <tg_controller+0x80>
    5654:	85 30       	cpi	r24, 0x05	; 5
    5656:	29 f0       	breq	.+10     	; 0x5662 <tg_controller+0x64>
    5658:	8b 30       	cpi	r24, 0x0B	; 11
    565a:	89 f4       	brne	.+34     	; 0x567e <tg_controller+0x80>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    565c:	10 92 94 21 	sts	0x2194, r1
    5660:	0e c0       	rjmp	.+28     	; 0x567e <tg_controller+0x80>
			_tg_set_mode(TG_CONTROL_MODE);
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
    5662:	0f 92       	push	r0
    5664:	0f 92       	push	r0
    5666:	82 ea       	ldi	r24, 0xA2	; 162
    5668:	99 e1       	ldi	r25, 0x19	; 25
    566a:	ed b7       	in	r30, 0x3d	; 61
    566c:	fe b7       	in	r31, 0x3e	; 62
    566e:	81 83       	std	Z+1, r24	; 0x01
    5670:	92 83       	std	Z+2, r25	; 0x02
    5672:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
			tg_reset_source();						// reset to default src
    5676:	0f 90       	pop	r0
    5678:	0f 90       	pop	r0
    567a:	0e 94 93 2a 	call	0x5526	; 0x5526 <tg_reset_source>
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		default: {
			tg.state = TG_READY_UNPROMPTED;			// traps various error returns
    567e:	10 92 91 21 	sts	0x2191, r1
		case (TG_EAGAIN): return;
		case (TG_OK): tg.state = TG_READY_UNPROMPTED; return;
	}

	// low priority tasks
	if ((tg.status = _tg_read_next_line()) == TG_EAGAIN) {	// input line
    5682:	10 92 93 21 	sts	0x2193, r1
	tgModeStringDirect
};

void _tg_prompt()
{
	if (tg.state == TG_READY_UNPROMPTED) {
    5686:	80 91 91 21 	lds	r24, 0x2191
    568a:	88 23       	and	r24, r24
    568c:	09 f5       	brne	.+66     	; 0x56d0 <tg_controller+0xd2>
		if (tg.flags && TG_FLAG_PROMPTS_bm) {
    568e:	80 91 92 21 	lds	r24, 0x2192
    5692:	88 23       	and	r24, r24
    5694:	d1 f0       	breq	.+52     	; 0x56ca <tg_controller+0xcc>
			printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5696:	80 91 94 21 	lds	r24, 0x2194
    569a:	e8 2f       	mov	r30, r24
    569c:	f0 e0       	ldi	r31, 0x00	; 0
    569e:	ee 0f       	add	r30, r30
    56a0:	ff 1f       	adc	r31, r31
    56a2:	e6 56       	subi	r30, 0x66	; 102
    56a4:	f6 4e       	sbci	r31, 0xE6	; 230
    56a6:	25 91       	lpm	r18, Z+
    56a8:	34 91       	lpm	r19, Z+
    56aa:	00 d0       	rcall	.+0      	; 0x56ac <tg_controller+0xae>
    56ac:	0f 92       	push	r0
    56ae:	87 eb       	ldi	r24, 0xB7	; 183
    56b0:	99 e1       	ldi	r25, 0x19	; 25
    56b2:	ed b7       	in	r30, 0x3d	; 61
    56b4:	fe b7       	in	r31, 0x3e	; 62
    56b6:	81 83       	std	Z+1, r24	; 0x01
    56b8:	92 83       	std	Z+2, r25	; 0x02
    56ba:	23 83       	std	Z+3, r18	; 0x03
    56bc:	34 83       	std	Z+4, r19	; 0x04
    56be:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
    56c2:	0f 90       	pop	r0
    56c4:	0f 90       	pop	r0
    56c6:	0f 90       	pop	r0
    56c8:	0f 90       	pop	r0
		}
		tg.state = TG_READY_PROMPTED;
    56ca:	81 e0       	ldi	r24, 0x01	; 1
    56cc:	80 93 91 21 	sts	0x2191, r24
    56d0:	08 95       	ret

000056d2 <tg_init>:
 */

void tg_init() 
{
	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
    56d2:	81 e0       	ldi	r24, 0x01	; 1
    56d4:	80 93 96 21 	sts	0x2196, r24
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    56d8:	e6 e9       	ldi	r30, 0x96	; 150
    56da:	f1 e2       	ldi	r31, 0x21	; 33
    56dc:	80 93 95 21 	sts	0x2195, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    56e0:	34 97       	sbiw	r30, 0x04	; 4
    56e2:	80 81       	ld	r24, Z
    56e4:	81 60       	ori	r24, 0x01	; 1
    56e6:	80 83       	st	Z, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    56e8:	10 92 94 21 	sts	0x2194, r1
{
	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
	_tg_set_source(tg.default_src);			// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode
	tg.state = TG_READY_UNPROMPTED;
    56ec:	10 92 91 21 	sts	0x2191, r1

	// version string
	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    56f0:	00 d0       	rcall	.+0      	; 0x56f2 <tg_init+0x20>
    56f2:	0f 92       	push	r0
    56f4:	8f ec       	ldi	r24, 0xCF	; 207
    56f6:	99 e1       	ldi	r25, 0x19	; 25
    56f8:	ed b7       	in	r30, 0x3d	; 61
    56fa:	fe b7       	in	r31, 0x3e	; 62
    56fc:	81 83       	std	Z+1, r24	; 0x01
    56fe:	92 83       	std	Z+2, r25	; 0x02
    5700:	85 ec       	ldi	r24, 0xC5	; 197
    5702:	99 e1       	ldi	r25, 0x19	; 25
    5704:	83 83       	std	Z+3, r24	; 0x03
    5706:	94 83       	std	Z+4, r25	; 0x04
    5708:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <printf_P>
    570c:	0f 90       	pop	r0
    570e:	0f 90       	pop	r0
    5710:	0f 90       	pop	r0
    5712:	0f 90       	pop	r0
}
    5714:	08 95       	ret

00005716 <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    5716:	08 95       	ret

00005718 <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    5718:	80 e0       	ldi	r24, 0x00	; 0
    571a:	90 e0       	ldi	r25, 0x00	; 0
    571c:	08 95       	ret

0000571e <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    571e:	10 92 00 22 	sts	0x2200, r1
	mv.move_buffer_tail = 0;
    5722:	10 92 01 22 	sts	0x2201, r1
}
    5726:	08 95       	ret

00005728 <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    5728:	90 91 00 22 	lds	r25, 0x2200
    572c:	80 91 01 22 	lds	r24, 0x2201
    5730:	98 17       	cp	r25, r24
    5732:	19 f4       	brne	.+6      	; 0x573a <mv_dequeue_move_buffer+0x12>
    5734:	20 e0       	ldi	r18, 0x00	; 0
    5736:	30 e0       	ldi	r19, 0x00	; 0
    5738:	17 c0       	rjmp	.+46     	; 0x5768 <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    573a:	90 91 01 22 	lds	r25, 0x2201
    573e:	8e e1       	ldi	r24, 0x1E	; 30
    5740:	98 9f       	mul	r25, r24
    5742:	90 01       	movw	r18, r0
    5744:	11 24       	eor	r1, r1
    5746:	2c 5f       	subi	r18, 0xFC	; 252
    5748:	3d 4d       	sbci	r19, 0xDD	; 221
    574a:	20 93 02 22 	sts	0x2202, r18
    574e:	30 93 03 22 	sts	0x2203, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    5752:	80 91 01 22 	lds	r24, 0x2201
    5756:	8f 5f       	subi	r24, 0xFF	; 255
    5758:	80 93 01 22 	sts	0x2201, r24
    575c:	80 91 01 22 	lds	r24, 0x2201
    5760:	83 30       	cpi	r24, 0x03	; 3
    5762:	10 f0       	brcs	.+4      	; 0x5768 <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    5764:	10 92 01 22 	sts	0x2201, r1
	}
	return (mv.p); 
}
    5768:	c9 01       	movw	r24, r18
    576a:	08 95       	ret

0000576c <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    576c:	90 91 00 22 	lds	r25, 0x2200
    5770:	9f 5f       	subi	r25, 0xFF	; 255
    5772:	93 30       	cpi	r25, 0x03	; 3
    5774:	08 f0       	brcs	.+2      	; 0x5778 <mv_test_move_buffer_full+0xc>
    5776:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    5778:	80 91 01 22 	lds	r24, 0x2201
    577c:	20 e0       	ldi	r18, 0x00	; 0
    577e:	89 17       	cp	r24, r25
    5780:	09 f4       	brne	.+2      	; 0x5784 <mv_test_move_buffer_full+0x18>
    5782:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    5784:	82 2f       	mov	r24, r18
    5786:	08 95       	ret

00005788 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    5788:	0b c0       	rjmp	.+22     	; 0x57a0 <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    578a:	80 91 48 00 	lds	r24, 0x0048
    578e:	81 60       	ori	r24, 0x01	; 1
    5790:	80 93 48 00 	sts	0x0048, r24
    5794:	88 95       	sleep
    5796:	80 91 48 00 	lds	r24, 0x0048
    579a:	8e 7f       	andi	r24, 0xFE	; 254
    579c:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    57a0:	90 91 01 22 	lds	r25, 0x2201
    57a4:	80 91 00 22 	lds	r24, 0x2200
    57a8:	98 17       	cp	r25, r24
    57aa:	79 f7       	brne	.-34     	; 0x578a <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    57ac:	08 95       	ret

000057ae <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    57ae:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    57b0:	80 91 00 22 	lds	r24, 0x2200
    57b4:	80 93 01 22 	sts	0x2201, r24
	mv.p = NULL;
    57b8:	10 92 02 22 	sts	0x2202, r1
    57bc:	10 92 03 22 	sts	0x2203, r1
	sei();
    57c0:	78 94       	sei
}
    57c2:	08 95       	ret

000057c4 <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    57c4:	2f 92       	push	r2
    57c6:	3f 92       	push	r3
    57c8:	4f 92       	push	r4
    57ca:	5f 92       	push	r5
    57cc:	6f 92       	push	r6
    57ce:	7f 92       	push	r7
    57d0:	8f 92       	push	r8
    57d2:	9f 92       	push	r9
    57d4:	af 92       	push	r10
    57d6:	bf 92       	push	r11
    57d8:	cf 92       	push	r12
    57da:	df 92       	push	r13
    57dc:	ef 92       	push	r14
    57de:	ff 92       	push	r15
    57e0:	0f 93       	push	r16
    57e2:	1f 93       	push	r17
    57e4:	df 93       	push	r29
    57e6:	cf 93       	push	r28
    57e8:	cd b7       	in	r28, 0x3d	; 61
    57ea:	de b7       	in	r29, 0x3e	; 62
    57ec:	2b 97       	sbiw	r28, 0x0b	; 11
    57ee:	cd bf       	out	0x3d, r28	; 61
    57f0:	de bf       	out	0x3e, r29	; 62
    57f2:	1b 01       	movw	r2, r22
    57f4:	2c 01       	movw	r4, r24
    57f6:	2a 83       	std	Y+2, r18	; 0x02
    57f8:	3b 83       	std	Y+3, r19	; 0x03
    57fa:	4c 83       	std	Y+4, r20	; 0x04
    57fc:	5d 83       	std	Y+5, r21	; 0x05
    57fe:	ee 82       	std	Y+6, r14	; 0x06
    5800:	ff 82       	std	Y+7, r15	; 0x07
    5802:	08 87       	std	Y+8, r16	; 0x08
    5804:	19 87       	std	Y+9, r17	; 0x09
	uint8_t next_buffer_head;
	uint8_t i;

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    5806:	80 91 00 22 	lds	r24, 0x2200
    580a:	8f 5f       	subi	r24, 0xFF	; 255
    580c:	89 83       	std	Y+1, r24	; 0x01
    580e:	83 30       	cpi	r24, 0x03	; 3
    5810:	08 f0       	brcs	.+2      	; 0x5814 <mv_queue_move_buffer+0x50>
    5812:	19 82       	std	Y+1, r1	; 0x01
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    5814:	80 91 01 22 	lds	r24, 0x2201
    5818:	99 81       	ldd	r25, Y+1	; 0x01
    581a:	89 17       	cp	r24, r25
    581c:	11 f4       	brne	.+4      	; 0x5822 <mv_queue_move_buffer+0x5e>
    581e:	8a e0       	ldi	r24, 0x0A	; 10
    5820:	20 c2       	rjmp	.+1088   	; 0x5c62 <mv_queue_move_buffer+0x49e>
		return (TG_BUFFER_FULL_NON_FATAL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    5822:	e0 91 00 22 	lds	r30, 0x2200
    5826:	8e e1       	ldi	r24, 0x1E	; 30
    5828:	e8 9f       	mul	r30, r24
    582a:	f0 01       	movw	r30, r0
    582c:	11 24       	eor	r1, r1
    582e:	ec 5f       	subi	r30, 0xFC	; 252
    5830:	fd 4d       	sbci	r31, 0xDD	; 221
    5832:	e0 93 02 22 	sts	0x2202, r30
    5836:	f0 93 03 22 	sts	0x2203, r31
	memset(mv.p, 0, sizeof(struct mvMove));
    583a:	df 01       	movw	r26, r30
    583c:	1d 92       	st	X+, r1
    583e:	8a 95       	dec	r24
    5840:	e9 f7       	brne	.-6      	; 0x583c <mv_queue_move_buffer+0x78>
	mv.p->a[X].steps = steps_x;
    5842:	80 90 02 22 	lds	r8, 0x2202
    5846:	90 90 03 22 	lds	r9, 0x2203
    584a:	f4 01       	movw	r30, r8
    584c:	20 82       	st	Z, r2
    584e:	31 82       	std	Z+1, r3	; 0x01
    5850:	42 82       	std	Z+2, r4	; 0x02
    5852:	53 82       	std	Z+3, r5	; 0x03
	mv.p->a[Y].steps = steps_y;
    5854:	8a 81       	ldd	r24, Y+2	; 0x02
    5856:	9b 81       	ldd	r25, Y+3	; 0x03
    5858:	ac 81       	ldd	r26, Y+4	; 0x04
    585a:	bd 81       	ldd	r27, Y+5	; 0x05
    585c:	82 87       	std	Z+10, r24	; 0x0a
    585e:	93 87       	std	Z+11, r25	; 0x0b
    5860:	a4 87       	std	Z+12, r26	; 0x0c
    5862:	b5 87       	std	Z+13, r27	; 0x0d
	mv.p->a[Z].steps = steps_z;
    5864:	8e 81       	ldd	r24, Y+6	; 0x06
    5866:	9f 81       	ldd	r25, Y+7	; 0x07
    5868:	a8 85       	ldd	r26, Y+8	; 0x08
    586a:	b9 85       	ldd	r27, Y+9	; 0x09
    586c:	84 8b       	std	Z+20, r24	; 0x14
    586e:	95 8b       	std	Z+21, r25	; 0x15
    5870:	a6 8b       	std	Z+22, r26	; 0x16
    5872:	b7 8b       	std	Z+23, r27	; 0x17
	mv.microseconds = (uint64_t)microseconds;			// cast to larger base
    5874:	a0 92 f8 21 	sts	0x21F8, r10
    5878:	b0 92 f9 21 	sts	0x21F9, r11
    587c:	c0 92 fa 21 	sts	0x21FA, r12
    5880:	d0 92 fb 21 	sts	0x21FB, r13
    5884:	10 92 fc 21 	sts	0x21FC, r1
    5888:	10 92 fd 21 	sts	0x21FD, r1
    588c:	10 92 fe 21 	sts	0x21FE, r1
    5890:	10 92 ff 21 	sts	0x21FF, r1
	mv.ticks = mv.microseconds * TICKS_PER_MICROSECOND;
    5894:	95 01       	movw	r18, r10
    5896:	a6 01       	movw	r20, r12
    5898:	60 e0       	ldi	r22, 0x00	; 0
    589a:	70 e0       	ldi	r23, 0x00	; 0
    589c:	80 e0       	ldi	r24, 0x00	; 0
    589e:	90 e0       	ldi	r25, 0x00	; 0
    58a0:	05 e0       	ldi	r16, 0x05	; 5
    58a2:	0e 94 ff 34 	call	0x69fe	; 0x69fe <__ashldi3>
    58a6:	fc 01       	movw	r30, r24
    58a8:	98 ee       	ldi	r25, 0xE8	; 232
    58aa:	69 2e       	mov	r6, r25
    58ac:	91 e2       	ldi	r25, 0x21	; 33
    58ae:	79 2e       	mov	r7, r25
    58b0:	20 93 e8 21 	sts	0x21E8, r18
    58b4:	d3 01       	movw	r26, r6
    58b6:	11 96       	adiw	r26, 0x01	; 1
    58b8:	3c 93       	st	X, r19
    58ba:	11 97       	sbiw	r26, 0x01	; 1
    58bc:	12 96       	adiw	r26, 0x02	; 2
    58be:	4c 93       	st	X, r20
    58c0:	12 97       	sbiw	r26, 0x02	; 2
    58c2:	13 96       	adiw	r26, 0x03	; 3
    58c4:	5c 93       	st	X, r21
    58c6:	13 97       	sbiw	r26, 0x03	; 3
    58c8:	14 96       	adiw	r26, 0x04	; 4
    58ca:	6c 93       	st	X, r22
    58cc:	14 97       	sbiw	r26, 0x04	; 4
    58ce:	15 96       	adiw	r26, 0x05	; 5
    58d0:	7c 93       	st	X, r23
    58d2:	15 97       	sbiw	r26, 0x05	; 5
    58d4:	16 96       	adiw	r26, 0x06	; 6
    58d6:	ec 93       	st	X, r30
    58d8:	16 97       	sbiw	r26, 0x06	; 6
    58da:	17 96       	adiw	r26, 0x07	; 7
    58dc:	fc 93       	st	X, r31

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    58de:	21 14       	cp	r2, r1
    58e0:	31 04       	cpc	r3, r1
    58e2:	41 04       	cpc	r4, r1
    58e4:	51 04       	cpc	r5, r1
    58e6:	09 f0       	breq	.+2      	; 0x58ea <mv_queue_move_buffer+0x126>
    58e8:	73 c0       	rjmp	.+230    	; 0x59d0 <mv_queue_move_buffer+0x20c>
    58ea:	8a 81       	ldd	r24, Y+2	; 0x02
    58ec:	9b 81       	ldd	r25, Y+3	; 0x03
    58ee:	ac 81       	ldd	r26, Y+4	; 0x04
    58f0:	bd 81       	ldd	r27, Y+5	; 0x05
    58f2:	00 97       	sbiw	r24, 0x00	; 0
    58f4:	a1 05       	cpc	r26, r1
    58f6:	b1 05       	cpc	r27, r1
    58f8:	09 f0       	breq	.+2      	; 0x58fc <mv_queue_move_buffer+0x138>
    58fa:	6a c0       	rjmp	.+212    	; 0x59d0 <mv_queue_move_buffer+0x20c>
    58fc:	8e 81       	ldd	r24, Y+6	; 0x06
    58fe:	9f 81       	ldd	r25, Y+7	; 0x07
    5900:	a8 85       	ldd	r26, Y+8	; 0x08
    5902:	b9 85       	ldd	r27, Y+9	; 0x09
    5904:	00 97       	sbiw	r24, 0x00	; 0
    5906:	a1 05       	cpc	r26, r1
    5908:	b1 05       	cpc	r27, r1
    590a:	09 f0       	breq	.+2      	; 0x590e <mv_queue_move_buffer+0x14a>
    590c:	61 c0       	rjmp	.+194    	; 0x59d0 <mv_queue_move_buffer+0x20c>
		mv.p->a[X].steps = (((mv.ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    590e:	81 e0       	ldi	r24, 0x01	; 1
    5910:	e8 2e       	mov	r14, r24
    5912:	f1 2c       	mov	r15, r1
    5914:	01 2d       	mov	r16, r1
    5916:	11 2d       	mov	r17, r1
    5918:	d4 01       	movw	r26, r8
    591a:	ed 92       	st	X+, r14
    591c:	fd 92       	st	X+, r15
    591e:	0d 93       	st	X+, r16
    5920:	1c 93       	st	X, r17
    5922:	13 97       	sbiw	r26, 0x03	; 3
		mv.p->a[X].postscale = 1;
    5924:	81 e0       	ldi	r24, 0x01	; 1
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	16 96       	adiw	r26, 0x06	; 6
    592a:	8d 93       	st	X+, r24
    592c:	9c 93       	st	X, r25
    592e:	17 97       	sbiw	r26, 0x07	; 7
		mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[X].steps); // expensive!
    5930:	cf 01       	movw	r24, r30
    5932:	aa 24       	eor	r10, r10
    5934:	a3 94       	inc	r10
    5936:	bb 24       	eor	r11, r11
    5938:	cc 24       	eor	r12, r12
    593a:	dd 24       	eor	r13, r13
    593c:	ee 24       	eor	r14, r14
    593e:	ff 24       	eor	r15, r15
    5940:	00 e0       	ldi	r16, 0x00	; 0
    5942:	10 e0       	ldi	r17, 0x00	; 0
    5944:	0e 94 78 35 	call	0x6af0	; 0x6af0 <__udivdi3>
    5948:	f3 01       	movw	r30, r6
    594a:	38 96       	adiw	r30, 0x08	; 8
    594c:	20 93 f0 21 	sts	0x21F0, r18
    5950:	31 83       	std	Z+1, r19	; 0x01
    5952:	42 83       	std	Z+2, r20	; 0x02
    5954:	53 83       	std	Z+3, r21	; 0x03
    5956:	64 83       	std	Z+4, r22	; 0x04
    5958:	75 83       	std	Z+5, r23	; 0x05
    595a:	86 83       	std	Z+6, r24	; 0x06
    595c:	97 83       	std	Z+7, r25	; 0x07
		while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    595e:	7f 01       	movw	r14, r30
    5960:	19 c0       	rjmp	.+50     	; 0x5994 <mv_queue_move_buffer+0x1d0>
			mv.ticks_per_step >>= 1;
    5962:	8e 2f       	mov	r24, r30
    5964:	01 e0       	ldi	r16, 0x01	; 1
    5966:	0e 94 86 34 	call	0x690c	; 0x690c <__lshrdi3>
    596a:	20 93 f0 21 	sts	0x21F0, r18
    596e:	f7 01       	movw	r30, r14
    5970:	31 83       	std	Z+1, r19	; 0x01
    5972:	42 83       	std	Z+2, r20	; 0x02
    5974:	53 83       	std	Z+3, r21	; 0x03
    5976:	64 83       	std	Z+4, r22	; 0x04
    5978:	75 83       	std	Z+5, r23	; 0x05
    597a:	86 83       	std	Z+6, r24	; 0x06
    597c:	97 83       	std	Z+7, r25	; 0x07
			mv.p->a[X].postscale <<= 1;
    597e:	d4 01       	movw	r26, r8
    5980:	16 96       	adiw	r26, 0x06	; 6
    5982:	8d 91       	ld	r24, X+
    5984:	9c 91       	ld	r25, X
    5986:	17 97       	sbiw	r26, 0x07	; 7
    5988:	88 0f       	add	r24, r24
    598a:	99 1f       	adc	r25, r25
    598c:	16 96       	adiw	r26, 0x06	; 6
    598e:	8d 93       	st	X+, r24
    5990:	9c 93       	st	X, r25
    5992:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((mv.ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[X].steps); // expensive!
		while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    5994:	20 91 f0 21 	lds	r18, 0x21F0
    5998:	30 91 f1 21 	lds	r19, 0x21F1
    599c:	40 91 f2 21 	lds	r20, 0x21F2
    59a0:	50 91 f3 21 	lds	r21, 0x21F3
    59a4:	60 91 f4 21 	lds	r22, 0x21F4
    59a8:	70 91 f5 21 	lds	r23, 0x21F5
    59ac:	e0 91 f6 21 	lds	r30, 0x21F6
    59b0:	90 91 f7 21 	lds	r25, 0x21F7
    59b4:	84 2f       	mov	r24, r20
    59b6:	85 2b       	or	r24, r21
    59b8:	86 2b       	or	r24, r22
    59ba:	87 2b       	or	r24, r23
    59bc:	8e 2b       	or	r24, r30
    59be:	89 2b       	or	r24, r25
    59c0:	81 f6       	brne	.-96     	; 0x5962 <mv_queue_move_buffer+0x19e>
			mv.ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
    59c2:	c9 01       	movw	r24, r18
    59c4:	f4 01       	movw	r30, r8
    59c6:	84 83       	std	Z+4, r24	; 0x04
    59c8:	95 83       	std	Z+5, r25	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    59ca:	81 e0       	ldi	r24, 0x01	; 1
    59cc:	81 87       	std	Z+9, r24	; 0x09
    59ce:	43 c1       	rjmp	.+646    	; 0x5c56 <mv_queue_move_buffer+0x492>
	mv.p->a[Z].steps = steps_z;
	mv.microseconds = (uint64_t)microseconds;			// cast to larger base
	mv.ticks = mv.microseconds * TICKS_PER_MICROSECOND;

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    59d0:	44 24       	eor	r4, r4
    59d2:	55 24       	eor	r5, r5
				mv.p->a[i].steps = labs(mv.p->a[i].steps);

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
    59d4:	10 ef       	ldi	r17, 0xF0	; 240
    59d6:	21 2e       	mov	r2, r17
    59d8:	11 e2       	ldi	r17, 0x21	; 33
    59da:	31 2e       	mov	r3, r17
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    59dc:	40 91 02 22 	lds	r20, 0x2202
    59e0:	50 91 03 22 	lds	r21, 0x2203
    59e4:	4a 86       	std	Y+10, r4	; 0x0a
    59e6:	5b 86       	std	Y+11, r5	; 0x0b
    59e8:	c2 01       	movw	r24, r4
    59ea:	f2 01       	movw	r30, r4
    59ec:	b3 e0       	ldi	r27, 0x03	; 3
    59ee:	ee 0f       	add	r30, r30
    59f0:	ff 1f       	adc	r31, r31
    59f2:	ba 95       	dec	r27
    59f4:	e1 f7       	brne	.-8      	; 0x59ee <mv_queue_move_buffer+0x22a>
    59f6:	88 0f       	add	r24, r24
    59f8:	99 1f       	adc	r25, r25
    59fa:	e8 0f       	add	r30, r24
    59fc:	f9 1f       	adc	r31, r25
    59fe:	e4 0f       	add	r30, r20
    5a00:	f5 1f       	adc	r31, r21
    5a02:	80 81       	ld	r24, Z
    5a04:	91 81       	ldd	r25, Z+1	; 0x01
    5a06:	a2 81       	ldd	r26, Z+2	; 0x02
    5a08:	b3 81       	ldd	r27, Z+3	; 0x03
    5a0a:	00 97       	sbiw	r24, 0x00	; 0
    5a0c:	a1 05       	cpc	r26, r1
    5a0e:	b1 05       	cpc	r27, r1
    5a10:	09 f4       	brne	.+2      	; 0x5a14 <mv_queue_move_buffer+0x250>
    5a12:	19 c1       	rjmp	.+562    	; 0x5c46 <mv_queue_move_buffer+0x482>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    5a14:	b7 ff       	sbrs	r27, 7
    5a16:	12 c0       	rjmp	.+36     	; 0x5a3c <mv_queue_move_buffer+0x278>
    5a18:	c2 01       	movw	r24, r4
    5a1a:	92 01       	movw	r18, r4
    5a1c:	f3 e0       	ldi	r31, 0x03	; 3
    5a1e:	22 0f       	add	r18, r18
    5a20:	33 1f       	adc	r19, r19
    5a22:	fa 95       	dec	r31
    5a24:	e1 f7       	brne	.-8      	; 0x5a1e <mv_queue_move_buffer+0x25a>
    5a26:	88 0f       	add	r24, r24
    5a28:	99 1f       	adc	r25, r25
    5a2a:	28 0f       	add	r18, r24
    5a2c:	39 1f       	adc	r19, r25
    5a2e:	42 0f       	add	r20, r18
    5a30:	53 1f       	adc	r21, r19
    5a32:	81 e0       	ldi	r24, 0x01	; 1
    5a34:	da 01       	movw	r26, r20
    5a36:	18 96       	adiw	r26, 0x08	; 8
    5a38:	8c 93       	st	X, r24
    5a3a:	0f c0       	rjmp	.+30     	; 0x5a5a <mv_queue_move_buffer+0x296>
    5a3c:	c2 01       	movw	r24, r4
    5a3e:	92 01       	movw	r18, r4
    5a40:	73 e0       	ldi	r23, 0x03	; 3
    5a42:	22 0f       	add	r18, r18
    5a44:	33 1f       	adc	r19, r19
    5a46:	7a 95       	dec	r23
    5a48:	e1 f7       	brne	.-8      	; 0x5a42 <mv_queue_move_buffer+0x27e>
    5a4a:	88 0f       	add	r24, r24
    5a4c:	99 1f       	adc	r25, r25
    5a4e:	28 0f       	add	r18, r24
    5a50:	39 1f       	adc	r19, r25
    5a52:	42 0f       	add	r20, r18
    5a54:	53 1f       	adc	r21, r19
    5a56:	fa 01       	movw	r30, r20
    5a58:	10 86       	std	Z+8, r1	; 0x08
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    5a5a:	e0 91 02 22 	lds	r30, 0x2202
    5a5e:	f0 91 03 22 	lds	r31, 0x2203
    5a62:	8a 85       	ldd	r24, Y+10	; 0x0a
    5a64:	9b 85       	ldd	r25, Y+11	; 0x0b
    5a66:	ac 01       	movw	r20, r24
    5a68:	03 e0       	ldi	r16, 0x03	; 3
    5a6a:	44 0f       	add	r20, r20
    5a6c:	55 1f       	adc	r21, r21
    5a6e:	0a 95       	dec	r16
    5a70:	e1 f7       	brne	.-8      	; 0x5a6a <mv_queue_move_buffer+0x2a6>
    5a72:	88 0f       	add	r24, r24
    5a74:	99 1f       	adc	r25, r25
    5a76:	48 0f       	add	r20, r24
    5a78:	59 1f       	adc	r21, r25
    5a7a:	4e 0f       	add	r20, r30
    5a7c:	5f 1f       	adc	r21, r31
    5a7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5a80:	9b 85       	ldd	r25, Y+11	; 0x0b
    5a82:	9c 01       	movw	r18, r24
    5a84:	b3 e0       	ldi	r27, 0x03	; 3
    5a86:	22 0f       	add	r18, r18
    5a88:	33 1f       	adc	r19, r19
    5a8a:	ba 95       	dec	r27
    5a8c:	e1 f7       	brne	.-8      	; 0x5a86 <mv_queue_move_buffer+0x2c2>
    5a8e:	88 0f       	add	r24, r24
    5a90:	99 1f       	adc	r25, r25
    5a92:	28 0f       	add	r18, r24
    5a94:	39 1f       	adc	r19, r25
    5a96:	e2 0f       	add	r30, r18
    5a98:	f3 1f       	adc	r31, r19
    5a9a:	80 81       	ld	r24, Z
    5a9c:	91 81       	ldd	r25, Z+1	; 0x01
    5a9e:	a2 81       	ldd	r26, Z+2	; 0x02
    5aa0:	b3 81       	ldd	r27, Z+3	; 0x03
    5aa2:	b7 ff       	sbrs	r27, 7
    5aa4:	07 c0       	rjmp	.+14     	; 0x5ab4 <mv_queue_move_buffer+0x2f0>
    5aa6:	b0 95       	com	r27
    5aa8:	a0 95       	com	r26
    5aaa:	90 95       	com	r25
    5aac:	81 95       	neg	r24
    5aae:	9f 4f       	sbci	r25, 0xFF	; 255
    5ab0:	af 4f       	sbci	r26, 0xFF	; 255
    5ab2:	bf 4f       	sbci	r27, 0xFF	; 255
    5ab4:	fa 01       	movw	r30, r20
    5ab6:	80 83       	st	Z, r24
    5ab8:	91 83       	std	Z+1, r25	; 0x01
    5aba:	a2 83       	std	Z+2, r26	; 0x02
    5abc:	b3 83       	std	Z+3, r27	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    5abe:	a0 91 02 22 	lds	r26, 0x2202
    5ac2:	b0 91 03 22 	lds	r27, 0x2203
    5ac6:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ac8:	9b 85       	ldd	r25, Y+11	; 0x0b
    5aca:	fc 01       	movw	r30, r24
    5acc:	73 e0       	ldi	r23, 0x03	; 3
    5ace:	ee 0f       	add	r30, r30
    5ad0:	ff 1f       	adc	r31, r31
    5ad2:	7a 95       	dec	r23
    5ad4:	e1 f7       	brne	.-8      	; 0x5ace <mv_queue_move_buffer+0x30a>
    5ad6:	88 0f       	add	r24, r24
    5ad8:	99 1f       	adc	r25, r25
    5ada:	e8 0f       	add	r30, r24
    5adc:	f9 1f       	adc	r31, r25
    5ade:	ea 0f       	add	r30, r26
    5ae0:	fb 1f       	adc	r31, r27
    5ae2:	81 e0       	ldi	r24, 0x01	; 1
    5ae4:	90 e0       	ldi	r25, 0x00	; 0
    5ae6:	86 83       	std	Z+6, r24	; 0x06
    5ae8:	97 83       	std	Z+7, r25	; 0x07
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
    5aea:	8a 85       	ldd	r24, Y+10	; 0x0a
    5aec:	9b 85       	ldd	r25, Y+11	; 0x0b
    5aee:	9c 01       	movw	r18, r24
    5af0:	53 e0       	ldi	r21, 0x03	; 3
    5af2:	22 0f       	add	r18, r18
    5af4:	33 1f       	adc	r19, r19
    5af6:	5a 95       	dec	r21
    5af8:	e1 f7       	brne	.-8      	; 0x5af2 <mv_queue_move_buffer+0x32e>
    5afa:	88 0f       	add	r24, r24
    5afc:	99 1f       	adc	r25, r25
    5afe:	28 0f       	add	r18, r24
    5b00:	39 1f       	adc	r19, r25
    5b02:	a2 0f       	add	r26, r18
    5b04:	b3 1f       	adc	r27, r19
    5b06:	ed 90       	ld	r14, X+
    5b08:	fd 90       	ld	r15, X+
    5b0a:	0d 91       	ld	r16, X+
    5b0c:	1c 91       	ld	r17, X
    5b0e:	37 01       	movw	r6, r14
    5b10:	48 01       	movw	r8, r16
    5b12:	99 0c       	add	r9, r9
    5b14:	66 08       	sbc	r6, r6
    5b16:	76 2c       	mov	r7, r6
    5b18:	43 01       	movw	r8, r6
    5b1a:	20 91 e8 21 	lds	r18, 0x21E8
    5b1e:	30 91 e9 21 	lds	r19, 0x21E9
    5b22:	40 91 ea 21 	lds	r20, 0x21EA
    5b26:	50 91 eb 21 	lds	r21, 0x21EB
    5b2a:	60 91 ec 21 	lds	r22, 0x21EC
    5b2e:	70 91 ed 21 	lds	r23, 0x21ED
    5b32:	80 91 ee 21 	lds	r24, 0x21EE
    5b36:	90 91 ef 21 	lds	r25, 0x21EF
    5b3a:	57 01       	movw	r10, r14
    5b3c:	68 01       	movw	r12, r16
    5b3e:	e6 2c       	mov	r14, r6
    5b40:	f6 2c       	mov	r15, r6
    5b42:	06 2d       	mov	r16, r6
    5b44:	16 2d       	mov	r17, r6
    5b46:	0e 94 78 35 	call	0x6af0	; 0x6af0 <__udivdi3>
    5b4a:	20 93 f0 21 	sts	0x21F0, r18
    5b4e:	d1 01       	movw	r26, r2
    5b50:	11 96       	adiw	r26, 0x01	; 1
    5b52:	3c 93       	st	X, r19
    5b54:	11 97       	sbiw	r26, 0x01	; 1
    5b56:	12 96       	adiw	r26, 0x02	; 2
    5b58:	4c 93       	st	X, r20
    5b5a:	12 97       	sbiw	r26, 0x02	; 2
    5b5c:	13 96       	adiw	r26, 0x03	; 3
    5b5e:	5c 93       	st	X, r21
    5b60:	13 97       	sbiw	r26, 0x03	; 3
    5b62:	14 96       	adiw	r26, 0x04	; 4
    5b64:	6c 93       	st	X, r22
    5b66:	14 97       	sbiw	r26, 0x04	; 4
    5b68:	15 96       	adiw	r26, 0x05	; 5
    5b6a:	7c 93       	st	X, r23
    5b6c:	15 97       	sbiw	r26, 0x05	; 5
    5b6e:	16 96       	adiw	r26, 0x06	; 6
    5b70:	8c 93       	st	X, r24
    5b72:	16 97       	sbiw	r26, 0x06	; 6
    5b74:	17 96       	adiw	r26, 0x07	; 7
    5b76:	9c 93       	st	X, r25
    5b78:	38 c0       	rjmp	.+112    	; 0x5bea <mv_queue_move_buffer+0x426>
				while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
					mv.ticks_per_step >>= 1;
    5b7a:	9d 01       	movw	r18, r26
    5b7c:	8e 2f       	mov	r24, r30
    5b7e:	01 e0       	ldi	r16, 0x01	; 1
    5b80:	0e 94 86 34 	call	0x690c	; 0x690c <__lshrdi3>
    5b84:	20 93 f0 21 	sts	0x21F0, r18
    5b88:	f1 01       	movw	r30, r2
    5b8a:	31 83       	std	Z+1, r19	; 0x01
    5b8c:	42 83       	std	Z+2, r20	; 0x02
    5b8e:	53 83       	std	Z+3, r21	; 0x03
    5b90:	64 83       	std	Z+4, r22	; 0x04
    5b92:	75 83       	std	Z+5, r23	; 0x05
    5b94:	86 83       	std	Z+6, r24	; 0x06
    5b96:	97 83       	std	Z+7, r25	; 0x07
					mv.p->a[i].postscale <<= 1;
    5b98:	40 91 02 22 	lds	r20, 0x2202
    5b9c:	50 91 03 22 	lds	r21, 0x2203
    5ba0:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ba2:	9b 85       	ldd	r25, Y+11	; 0x0b
    5ba4:	fc 01       	movw	r30, r24
    5ba6:	23 e0       	ldi	r18, 0x03	; 3
    5ba8:	ee 0f       	add	r30, r30
    5baa:	ff 1f       	adc	r31, r31
    5bac:	2a 95       	dec	r18
    5bae:	e1 f7       	brne	.-8      	; 0x5ba8 <mv_queue_move_buffer+0x3e4>
    5bb0:	88 0f       	add	r24, r24
    5bb2:	99 1f       	adc	r25, r25
    5bb4:	e8 0f       	add	r30, r24
    5bb6:	f9 1f       	adc	r31, r25
    5bb8:	e4 0f       	add	r30, r20
    5bba:	f5 1f       	adc	r31, r21
    5bbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    5bbe:	9b 85       	ldd	r25, Y+11	; 0x0b
    5bc0:	9c 01       	movw	r18, r24
    5bc2:	13 e0       	ldi	r17, 0x03	; 3
    5bc4:	22 0f       	add	r18, r18
    5bc6:	33 1f       	adc	r19, r19
    5bc8:	1a 95       	dec	r17
    5bca:	e1 f7       	brne	.-8      	; 0x5bc4 <mv_queue_move_buffer+0x400>
    5bcc:	88 0f       	add	r24, r24
    5bce:	99 1f       	adc	r25, r25
    5bd0:	28 0f       	add	r18, r24
    5bd2:	39 1f       	adc	r19, r25
    5bd4:	42 0f       	add	r20, r18
    5bd6:	53 1f       	adc	r21, r19
    5bd8:	da 01       	movw	r26, r20
    5bda:	16 96       	adiw	r26, 0x06	; 6
    5bdc:	8d 91       	ld	r24, X+
    5bde:	9c 91       	ld	r25, X
    5be0:	17 97       	sbiw	r26, 0x07	; 7
    5be2:	88 0f       	add	r24, r24
    5be4:	99 1f       	adc	r25, r25
    5be6:	86 83       	std	Z+6, r24	; 0x06
    5be8:	97 83       	std	Z+7, r25	; 0x07

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
				while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    5bea:	a0 91 f0 21 	lds	r26, 0x21F0
    5bee:	b0 91 f1 21 	lds	r27, 0x21F1
    5bf2:	40 91 f2 21 	lds	r20, 0x21F2
    5bf6:	50 91 f3 21 	lds	r21, 0x21F3
    5bfa:	60 91 f4 21 	lds	r22, 0x21F4
    5bfe:	70 91 f5 21 	lds	r23, 0x21F5
    5c02:	e0 91 f6 21 	lds	r30, 0x21F6
    5c06:	90 91 f7 21 	lds	r25, 0x21F7
    5c0a:	84 2f       	mov	r24, r20
    5c0c:	85 2b       	or	r24, r21
    5c0e:	86 2b       	or	r24, r22
    5c10:	87 2b       	or	r24, r23
    5c12:	8e 2b       	or	r24, r30
    5c14:	89 2b       	or	r24, r25
    5c16:	09 f0       	breq	.+2      	; 0x5c1a <mv_queue_move_buffer+0x456>
    5c18:	b0 cf       	rjmp	.-160    	; 0x5b7a <mv_queue_move_buffer+0x3b6>
					mv.ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
    5c1a:	40 91 02 22 	lds	r20, 0x2202
    5c1e:	50 91 03 22 	lds	r21, 0x2203
    5c22:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c24:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c26:	9c 01       	movw	r18, r24
    5c28:	73 e0       	ldi	r23, 0x03	; 3
    5c2a:	22 0f       	add	r18, r18
    5c2c:	33 1f       	adc	r19, r19
    5c2e:	7a 95       	dec	r23
    5c30:	e1 f7       	brne	.-8      	; 0x5c2a <mv_queue_move_buffer+0x466>
    5c32:	88 0f       	add	r24, r24
    5c34:	99 1f       	adc	r25, r25
    5c36:	28 0f       	add	r18, r24
    5c38:	39 1f       	adc	r19, r25
    5c3a:	42 0f       	add	r20, r18
    5c3c:	53 1f       	adc	r21, r19
    5c3e:	cd 01       	movw	r24, r26
    5c40:	fa 01       	movw	r30, r20
    5c42:	84 83       	std	Z+4, r24	; 0x04
    5c44:	95 83       	std	Z+5, r25	; 0x05
    5c46:	08 94       	sec
    5c48:	41 1c       	adc	r4, r1
    5c4a:	51 1c       	adc	r5, r1
		}
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    5c4c:	f3 e0       	ldi	r31, 0x03	; 3
    5c4e:	4f 16       	cp	r4, r31
    5c50:	51 04       	cpc	r5, r1
    5c52:	09 f0       	breq	.+2      	; 0x5c56 <mv_queue_move_buffer+0x492>
    5c54:	c3 ce       	rjmp	.-634    	; 0x59dc <mv_queue_move_buffer+0x218>
				}
				mv.p->a[i].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    5c56:	89 81       	ldd	r24, Y+1	; 0x01
    5c58:	80 93 00 22 	sts	0x2200, r24
	st_execute_move();
    5c5c:	0e 94 4f 24 	call	0x489e	; 0x489e <st_execute_move>
    5c60:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    5c62:	2b 96       	adiw	r28, 0x0b	; 11
    5c64:	cd bf       	out	0x3d, r28	; 61
    5c66:	de bf       	out	0x3e, r29	; 62
    5c68:	cf 91       	pop	r28
    5c6a:	df 91       	pop	r29
    5c6c:	1f 91       	pop	r17
    5c6e:	0f 91       	pop	r16
    5c70:	ff 90       	pop	r15
    5c72:	ef 90       	pop	r14
    5c74:	df 90       	pop	r13
    5c76:	cf 90       	pop	r12
    5c78:	bf 90       	pop	r11
    5c7a:	af 90       	pop	r10
    5c7c:	9f 90       	pop	r9
    5c7e:	8f 90       	pop	r8
    5c80:	7f 90       	pop	r7
    5c82:	6f 90       	pop	r6
    5c84:	5f 90       	pop	r5
    5c86:	4f 90       	pop	r4
    5c88:	3f 90       	pop	r3
    5c8a:	2f 90       	pop	r2
    5c8c:	08 95       	ret

00005c8e <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    5c8e:	af e6       	ldi	r26, 0x6F	; 111
    5c90:	b2 e2       	ldi	r27, 0x22	; 34
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5c92:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5c94:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5c96:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5c98:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5c9a:	ed 91       	ld	r30, X+
    5c9c:	fc 91       	ld	r31, X
    5c9e:	11 97       	sbiw	r26, 0x01	; 1
    5ca0:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5ca2:	ed 91       	ld	r30, X+
    5ca4:	fc 91       	ld	r31, X
    5ca6:	11 97       	sbiw	r26, 0x01	; 1
    5ca8:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5caa:	ed 91       	ld	r30, X+
    5cac:	fc 91       	ld	r31, X
    5cae:	11 97       	sbiw	r26, 0x01	; 1
    5cb0:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    5cb2:	ed 91       	ld	r30, X+
    5cb4:	fc 91       	ld	r31, X
    5cb6:	11 97       	sbiw	r26, 0x01	; 1
    5cb8:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    5cba:	ed 91       	ld	r30, X+
    5cbc:	fc 91       	ld	r31, X
    5cbe:	11 97       	sbiw	r26, 0x01	; 1
    5cc0:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    5cc2:	ed 91       	ld	r30, X+
    5cc4:	fc 91       	ld	r31, X
    5cc6:	11 97       	sbiw	r26, 0x01	; 1
    5cc8:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5cca:	ed 91       	ld	r30, X+
    5ccc:	fc 91       	ld	r31, X
    5cce:	11 97       	sbiw	r26, 0x01	; 1
    5cd0:	31 87       	std	Z+9, r19	; 0x09
    5cd2:	50 96       	adiw	r26, 0x10	; 16
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    5cd4:	42 e2       	ldi	r20, 0x22	; 34
    5cd6:	af 3a       	cpi	r26, 0xAF	; 175
    5cd8:	b4 07       	cpc	r27, r20
    5cda:	f9 f6       	brne	.-66     	; 0x5c9a <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    5cdc:	08 95       	ret

00005cde <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    5cde:	1f 92       	push	r1
    5ce0:	0f 92       	push	r0
    5ce2:	0f b6       	in	r0, 0x3f	; 63
    5ce4:	0f 92       	push	r0
    5ce6:	11 24       	eor	r1, r1
    5ce8:	0f 90       	pop	r0
    5cea:	0f be       	out	0x3f, r0	; 63
    5cec:	0f 90       	pop	r0
    5cee:	1f 90       	pop	r1
    5cf0:	18 95       	reti

00005cf2 <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    5cf2:	1f 92       	push	r1
    5cf4:	0f 92       	push	r0
    5cf6:	0f b6       	in	r0, 0x3f	; 63
    5cf8:	0f 92       	push	r0
    5cfa:	11 24       	eor	r1, r1
    5cfc:	0f 90       	pop	r0
    5cfe:	0f be       	out	0x3f, r0	; 63
    5d00:	0f 90       	pop	r0
    5d02:	1f 90       	pop	r1
    5d04:	18 95       	reti

00005d06 <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    5d06:	1f 92       	push	r1
    5d08:	0f 92       	push	r0
    5d0a:	0f b6       	in	r0, 0x3f	; 63
    5d0c:	0f 92       	push	r0
    5d0e:	11 24       	eor	r1, r1
    5d10:	0f 90       	pop	r0
    5d12:	0f be       	out	0x3f, r0	; 63
    5d14:	0f 90       	pop	r0
    5d16:	1f 90       	pop	r1
    5d18:	18 95       	reti

00005d1a <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    5d1a:	1f 92       	push	r1
    5d1c:	0f 92       	push	r0
    5d1e:	0f b6       	in	r0, 0x3f	; 63
    5d20:	0f 92       	push	r0
    5d22:	11 24       	eor	r1, r1
    5d24:	0f 90       	pop	r0
    5d26:	0f be       	out	0x3f, r0	; 63
    5d28:	0f 90       	pop	r0
    5d2a:	1f 90       	pop	r1
    5d2c:	18 95       	reti

00005d2e <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    5d2e:	1f 92       	push	r1
    5d30:	0f 92       	push	r0
    5d32:	0f b6       	in	r0, 0x3f	; 63
    5d34:	0f 92       	push	r0
    5d36:	11 24       	eor	r1, r1
    5d38:	0f 90       	pop	r0
    5d3a:	0f be       	out	0x3f, r0	; 63
    5d3c:	0f 90       	pop	r0
    5d3e:	1f 90       	pop	r1
    5d40:	18 95       	reti

00005d42 <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    5d42:	1f 92       	push	r1
    5d44:	0f 92       	push	r0
    5d46:	0f b6       	in	r0, 0x3f	; 63
    5d48:	0f 92       	push	r0
    5d4a:	11 24       	eor	r1, r1
    5d4c:	0f 90       	pop	r0
    5d4e:	0f be       	out	0x3f, r0	; 63
    5d50:	0f 90       	pop	r0
    5d52:	1f 90       	pop	r1
    5d54:	18 95       	reti

00005d56 <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    5d56:	1f 92       	push	r1
    5d58:	0f 92       	push	r0
    5d5a:	0f b6       	in	r0, 0x3f	; 63
    5d5c:	0f 92       	push	r0
    5d5e:	11 24       	eor	r1, r1
    5d60:	0f 90       	pop	r0
    5d62:	0f be       	out	0x3f, r0	; 63
    5d64:	0f 90       	pop	r0
    5d66:	1f 90       	pop	r1
    5d68:	18 95       	reti

00005d6a <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    5d6a:	1f 92       	push	r1
    5d6c:	0f 92       	push	r0
    5d6e:	0f b6       	in	r0, 0x3f	; 63
    5d70:	0f 92       	push	r0
    5d72:	11 24       	eor	r1, r1
    5d74:	0f 90       	pop	r0
    5d76:	0f be       	out	0x3f, r0	; 63
    5d78:	0f 90       	pop	r0
    5d7a:	1f 90       	pop	r1
    5d7c:	18 95       	reti

00005d7e <signal_etx>:
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx() {			// ^c
{
	tg_reset_source();					// return control to standard device
    5d7e:	0e 94 93 2a 	call	0x5526	; 0x5526 <tg_reset_source>
	mc_motion_stop();					// stop computing and generating motions
    5d82:	0e 94 c8 1a 	call	0x3590	; 0x3590 <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    5d86:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <mv_flush>
	st_stop_steppers();					// stop the steppers
    5d8a:	0e 94 34 24 	call	0x4868	; 0x4868 <st_stop_steppers>
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
*/
}
    5d8e:	08 95       	ret

00005d90 <xio_set_baud_usart>:
	dx->port->OUTCLR = outclr;
	dx->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
    5d90:	cf 93       	push	r28
    5d92:	df 93       	push	r29
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	27 e1       	ldi	r18, 0x17	; 23
    5d98:	30 e0       	ldi	r19, 0x00	; 0
    5d9a:	82 9f       	mul	r24, r18
    5d9c:	d0 01       	movw	r26, r0
    5d9e:	83 9f       	mul	r24, r19
    5da0:	b0 0d       	add	r27, r0
    5da2:	92 9f       	mul	r25, r18
    5da4:	b0 0d       	add	r27, r0
    5da6:	11 24       	eor	r1, r1
    5da8:	ab 5f       	subi	r26, 0xFB	; 251
    5daa:	ba 4d       	sbci	r27, 0xDA	; 218
    5dac:	51 96       	adiw	r26, 0x11	; 17
    5dae:	ed 91       	ld	r30, X+
    5db0:	fc 91       	ld	r31, X
    5db2:	52 97       	sbiw	r26, 0x12	; 18
    5db4:	87 81       	ldd	r24, Z+7	; 0x07
    5db6:	90 85       	ldd	r25, Z+8	; 0x08
    5db8:	26 2f       	mov	r18, r22
    5dba:	30 e0       	ldi	r19, 0x00	; 0
    5dbc:	f9 01       	movw	r30, r18
    5dbe:	ed 51       	subi	r30, 0x1D	; 29
    5dc0:	f6 4e       	sbci	r31, 0xE6	; 230
    5dc2:	e4 91       	lpm	r30, Z+
    5dc4:	ec 01       	movw	r28, r24
    5dc6:	ee 83       	std	Y+6, r30	; 0x06
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    5dc8:	51 96       	adiw	r26, 0x11	; 17
    5dca:	ed 91       	ld	r30, X+
    5dcc:	fc 91       	ld	r31, X
    5dce:	52 97       	sbiw	r26, 0x12	; 18
    5dd0:	a7 81       	ldd	r26, Z+7	; 0x07
    5dd2:	b0 85       	ldd	r27, Z+8	; 0x08
    5dd4:	22 51       	subi	r18, 0x12	; 18
    5dd6:	36 4e       	sbci	r19, 0xE6	; 230
    5dd8:	f9 01       	movw	r30, r18
    5dda:	64 91       	lpm	r22, Z+
    5ddc:	17 96       	adiw	r26, 0x07	; 7
    5dde:	6c 93       	st	X, r22
}
    5de0:	df 91       	pop	r29
    5de2:	cf 91       	pop	r28
    5de4:	08 95       	ret

00005de6 <xio_putc_usart>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_usart(const uint8_t dev, const char c, FILE *stream)
{
    5de6:	cf 93       	push	r28
    5de8:	df 93       	push	r29
    5dea:	a6 2f       	mov	r26, r22
    5dec:	ba 01       	movw	r22, r20
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
    5dee:	27 e1       	ldi	r18, 0x17	; 23
    5df0:	82 9f       	mul	r24, r18
    5df2:	a0 01       	movw	r20, r0
    5df4:	11 24       	eor	r1, r1
    5df6:	4b 5f       	subi	r20, 0xFB	; 251
    5df8:	5a 4d       	sbci	r21, 0xDA	; 218
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    5dfa:	90 e0       	ldi	r25, 0x00	; 0
    5dfc:	27 e1       	ldi	r18, 0x17	; 23
    5dfe:	30 e0       	ldi	r19, 0x00	; 0
    5e00:	82 9f       	mul	r24, r18
    5e02:	f0 01       	movw	r30, r0
    5e04:	83 9f       	mul	r24, r19
    5e06:	f0 0d       	add	r31, r0
    5e08:	92 9f       	mul	r25, r18
    5e0a:	f0 0d       	add	r31, r0
    5e0c:	11 24       	eor	r1, r1
    5e0e:	eb 5f       	subi	r30, 0xFB	; 251
    5e10:	fa 4d       	sbci	r31, 0xDA	; 218
    5e12:	c1 89       	ldd	r28, Z+17	; 0x11
    5e14:	d2 89       	ldd	r29, Z+18	; 0x12

	if ((dx->next_tx_buf_head = (dx->tx_buf_head)-1) == 0) { // adv. head & wrap
    5e16:	8d 81       	ldd	r24, Y+5	; 0x05
    5e18:	81 50       	subi	r24, 0x01	; 1
    5e1a:	8e 83       	std	Y+6, r24	; 0x06
    5e1c:	88 23       	and	r24, r24
    5e1e:	11 f4       	brne	.+4      	; 0x5e24 <xio_putc_usart+0x3e>
		dx->next_tx_buf_head = TX_BUFFER_SIZE-1;	 // -1 avoids the off-by-one
    5e20:	8f e3       	ldi	r24, 0x3F	; 63
    5e22:	8e 83       	std	Y+6, r24	; 0x06
	}
	while(dx->next_tx_buf_head == dx->tx_buf_tail) { // buf full. sleep or ret
    5e24:	9e 81       	ldd	r25, Y+6	; 0x06
    5e26:	17 c0       	rjmp	.+46     	; 0x5e56 <xio_putc_usart+0x70>
		if (BLOCKING(d->flags)) {
    5e28:	fa 01       	movw	r30, r20
    5e2a:	80 81       	ld	r24, Z
    5e2c:	82 ff       	sbrs	r24, 2
    5e2e:	0c c0       	rjmp	.+24     	; 0x5e48 <xio_putc_usart+0x62>
			sleep_mode();
    5e30:	80 91 48 00 	lds	r24, 0x0048
    5e34:	81 60       	ori	r24, 0x01	; 1
    5e36:	80 93 48 00 	sts	0x0048, r24
    5e3a:	88 95       	sleep
    5e3c:	80 91 48 00 	lds	r24, 0x0048
    5e40:	8e 7f       	andi	r24, 0xFE	; 254
    5e42:	80 93 48 00 	sts	0x0048, r24
    5e46:	07 c0       	rjmp	.+14     	; 0x5e56 <xio_putc_usart+0x70>
		} else {
			d->sig = XIO_SIG_EAGAIN;
    5e48:	81 e0       	ldi	r24, 0x01	; 1
    5e4a:	da 01       	movw	r26, r20
    5e4c:	13 96       	adiw	r26, 0x03	; 3
    5e4e:	8c 93       	st	X, r24
    5e50:	2f ef       	ldi	r18, 0xFF	; 255
    5e52:	3f ef       	ldi	r19, 0xFF	; 255
    5e54:	4b c0       	rjmp	.+150    	; 0x5eec <xio_putc_usart+0x106>
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer

	if ((dx->next_tx_buf_head = (dx->tx_buf_head)-1) == 0) { // adv. head & wrap
		dx->next_tx_buf_head = TX_BUFFER_SIZE-1;	 // -1 avoids the off-by-one
	}
	while(dx->next_tx_buf_head == dx->tx_buf_tail) { // buf full. sleep or ret
    5e56:	8c 81       	ldd	r24, Y+4	; 0x04
    5e58:	98 17       	cp	r25, r24
    5e5a:	31 f3       	breq	.-52     	; 0x5e28 <xio_putc_usart+0x42>
			d->sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	dx->tx_buf_head = dx->next_tx_buf_head;			// accept next buffer head
    5e5c:	9d 83       	std	Y+5, r25	; 0x05
	dx->tx_buf[dx->tx_buf_head] = c;				// ...write char to buffer
    5e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    5e60:	fe 01       	movw	r30, r28
    5e62:	e8 0f       	add	r30, r24
    5e64:	f1 1d       	adc	r31, r1
    5e66:	e5 5b       	subi	r30, 0xB5	; 181
    5e68:	ff 4f       	sbci	r31, 0xFF	; 255
    5e6a:	a0 83       	st	Z, r26

	if (CRLF(d->flags) && (c == '\n')) {			// detect LF & add CR
    5e6c:	fa 01       	movw	r30, r20
    5e6e:	20 81       	ld	r18, Z
    5e70:	31 81       	ldd	r19, Z+1	; 0x01
    5e72:	25 ff       	sbrs	r18, 5
    5e74:	09 c0       	rjmp	.+18     	; 0x5e88 <xio_putc_usart+0xa2>
    5e76:	aa 30       	cpi	r26, 0x0A	; 10
    5e78:	39 f4       	brne	.+14     	; 0x5e88 <xio_putc_usart+0xa2>
		return d->dev_putc('\r', stream);			// recurse
    5e7a:	03 84       	ldd	r0, Z+11	; 0x0b
    5e7c:	f4 85       	ldd	r31, Z+12	; 0x0c
    5e7e:	e0 2d       	mov	r30, r0
    5e80:	8d e0       	ldi	r24, 0x0D	; 13
    5e82:	19 95       	eicall
    5e84:	9c 01       	movw	r18, r24
    5e86:	32 c0       	rjmp	.+100    	; 0x5eec <xio_putc_usart+0x106>
	}

	// dequeue the buffer if DATA register is ready
	if (dx->usart->STATUS & 0x20) {
    5e88:	ef 81       	ldd	r30, Y+7	; 0x07
    5e8a:	f8 85       	ldd	r31, Y+8	; 0x08
    5e8c:	81 81       	ldd	r24, Z+1	; 0x01
    5e8e:	85 ff       	sbrs	r24, 5
    5e90:	20 c0       	rjmp	.+64     	; 0x5ed2 <xio_putc_usart+0xec>
		if (dx->tx_buf_head == dx->tx_buf_tail) {// buf might be empty if IRQ got it
    5e92:	9d 81       	ldd	r25, Y+5	; 0x05
    5e94:	8c 81       	ldd	r24, Y+4	; 0x04
    5e96:	98 17       	cp	r25, r24
    5e98:	39 f1       	breq	.+78     	; 0x5ee8 <xio_putc_usart+0x102>
			return (XIO_OK);
		}
		d->flags |= XIO_FLAG_TX_MUTEX_bm;			// mutual exclusion from ISR
    5e9a:	38 60       	ori	r19, 0x08	; 8
    5e9c:	da 01       	movw	r26, r20
    5e9e:	2d 93       	st	X+, r18
    5ea0:	3c 93       	st	X, r19
		if (--(dx->tx_buf_tail) == 0) {				// advance tail & wrap if needed
    5ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    5ea4:	81 50       	subi	r24, 0x01	; 1
    5ea6:	8c 83       	std	Y+4, r24	; 0x04
    5ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    5eaa:	88 23       	and	r24, r24
    5eac:	11 f4       	brne	.+4      	; 0x5eb2 <xio_putc_usart+0xcc>
			dx->tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoid off-by-one err (OBOE)
    5eae:	8f e3       	ldi	r24, 0x3F	; 63
    5eb0:	8c 83       	std	Y+4, r24	; 0x04
		}
		dx->usart->DATA = dx->tx_buf[dx->tx_buf_tail];// write to TX DATA reg
    5eb2:	af 81       	ldd	r26, Y+7	; 0x07
    5eb4:	b8 85       	ldd	r27, Y+8	; 0x08
    5eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    5eb8:	fe 01       	movw	r30, r28
    5eba:	e8 0f       	add	r30, r24
    5ebc:	f1 1d       	adc	r31, r1
    5ebe:	e5 5b       	subi	r30, 0xB5	; 181
    5ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ec2:	80 81       	ld	r24, Z
    5ec4:	8c 93       	st	X, r24
		d->flags &= ~XIO_FLAG_TX_MUTEX_bm;			// release mutual exclusion lock
    5ec6:	fa 01       	movw	r30, r20
    5ec8:	80 81       	ld	r24, Z
    5eca:	91 81       	ldd	r25, Z+1	; 0x01
    5ecc:	97 7f       	andi	r25, 0xF7	; 247
    5ece:	80 83       	st	Z, r24
    5ed0:	91 83       	std	Z+1, r25	; 0x01
	}
	// enable interrupts regardless
	dx->usart->CTRLA = CTRLA_RXON_TXON;				// doesn't work if you just |= it
    5ed2:	ef 81       	ldd	r30, Y+7	; 0x07
    5ed4:	f8 85       	ldd	r31, Y+8	; 0x08
    5ed6:	81 e2       	ldi	r24, 0x21	; 33
    5ed8:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 							// enable USART TX interrupts
    5eda:	80 91 a2 00 	lds	r24, 0x00A2
    5ede:	81 60       	ori	r24, 0x01	; 1
    5ee0:	e0 ea       	ldi	r30, 0xA0	; 160
    5ee2:	f0 e0       	ldi	r31, 0x00	; 0
    5ee4:	82 83       	std	Z+2, r24	; 0x02
	sei();											// enable global interrupts
    5ee6:	78 94       	sei
    5ee8:	20 e0       	ldi	r18, 0x00	; 0
    5eea:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_OK);
}
    5eec:	c9 01       	movw	r24, r18
    5eee:	df 91       	pop	r29
    5ef0:	cf 91       	pop	r28
    5ef2:	08 95       	ret

00005ef4 <xio_getc_usart>:
 *		  character helper routines. See them for behaviors
 */

int xio_getc_usart(const uint8_t dev, FILE *stream)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
    5ef4:	97 e1       	ldi	r25, 0x17	; 23
    5ef6:	89 9f       	mul	r24, r25
    5ef8:	d0 01       	movw	r26, r0
    5efa:	11 24       	eor	r1, r1
    5efc:	ab 5f       	subi	r26, 0xFB	; 251
    5efe:	ba 4d       	sbci	r27, 0xDA	; 218
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    5f00:	48 2f       	mov	r20, r24
    5f02:	50 e0       	ldi	r21, 0x00	; 0
    5f04:	27 e1       	ldi	r18, 0x17	; 23
    5f06:	30 e0       	ldi	r19, 0x00	; 0
    5f08:	42 9f       	mul	r20, r18
    5f0a:	f0 01       	movw	r30, r0
    5f0c:	43 9f       	mul	r20, r19
    5f0e:	f0 0d       	add	r31, r0
    5f10:	52 9f       	mul	r21, r18
    5f12:	f0 0d       	add	r31, r0
    5f14:	11 24       	eor	r1, r1
    5f16:	eb 5f       	subi	r30, 0xFB	; 251
    5f18:	fa 4d       	sbci	r31, 0xDA	; 218
    5f1a:	01 88       	ldd	r0, Z+17	; 0x11
    5f1c:	f2 89       	ldd	r31, Z+18	; 0x12
    5f1e:	e0 2d       	mov	r30, r0

	gdev = dev;										// set dev number global var
    5f20:	80 93 5e 22 	sts	0x225E, r24
    5f24:	15 c0       	rjmp	.+42     	; 0x5f50 <xio_getc_usart+0x5c>

	while (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(d->flags)) {
    5f26:	8c 91       	ld	r24, X
    5f28:	82 ff       	sbrs	r24, 2
    5f2a:	0c c0       	rjmp	.+24     	; 0x5f44 <xio_getc_usart+0x50>
			sleep_mode();
    5f2c:	80 91 48 00 	lds	r24, 0x0048
    5f30:	81 60       	ori	r24, 0x01	; 1
    5f32:	80 93 48 00 	sts	0x0048, r24
    5f36:	88 95       	sleep
    5f38:	80 91 48 00 	lds	r24, 0x0048
    5f3c:	8e 7f       	andi	r24, 0xFE	; 254
    5f3e:	80 93 48 00 	sts	0x0048, r24
    5f42:	06 c0       	rjmp	.+12     	; 0x5f50 <xio_getc_usart+0x5c>
		} else {
			d->sig = XIO_SIG_EAGAIN;
    5f44:	81 e0       	ldi	r24, 0x01	; 1
    5f46:	13 96       	adiw	r26, 0x03	; 3
    5f48:	8c 93       	st	X, r24
    5f4a:	2f ef       	ldi	r18, 0xFF	; 255
    5f4c:	3f ef       	ldi	r19, 0xFF	; 255
    5f4e:	1e c0       	rjmp	.+60     	; 0x5f8c <xio_getc_usart+0x98>
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer

	gdev = dev;										// set dev number global var

	while (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
    5f50:	93 81       	ldd	r25, Z+3	; 0x03
    5f52:	82 81       	ldd	r24, Z+2	; 0x02
    5f54:	98 17       	cp	r25, r24
    5f56:	39 f3       	breq	.-50     	; 0x5f26 <xio_getc_usart+0x32>
		} else {
			d->sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(dx->rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    5f58:	82 81       	ldd	r24, Z+2	; 0x02
    5f5a:	81 50       	subi	r24, 0x01	; 1
    5f5c:	82 83       	std	Z+2, r24	; 0x02
    5f5e:	82 81       	ldd	r24, Z+2	; 0x02
    5f60:	88 23       	and	r24, r24
    5f62:	11 f4       	brne	.+4      	; 0x5f68 <xio_getc_usart+0x74>
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    5f64:	8f e3       	ldi	r24, 0x3F	; 63
    5f66:	82 83       	std	Z+2, r24	; 0x02
	}
	d->c = (dx->rx_buf[dx->rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    5f68:	82 81       	ldd	r24, Z+2	; 0x02
    5f6a:	e8 0f       	add	r30, r24
    5f6c:	f1 1d       	adc	r31, r1
    5f6e:	83 85       	ldd	r24, Z+11	; 0x0b
    5f70:	8f 77       	andi	r24, 0x7F	; 127
    5f72:	14 96       	adiw	r26, 0x04	; 4
    5f74:	8c 93       	st	X, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[d->c])))());
    5f76:	90 e0       	ldi	r25, 0x00	; 0
    5f78:	88 0f       	add	r24, r24
    5f7a:	99 1f       	adc	r25, r25
    5f7c:	87 50       	subi	r24, 0x07	; 7
    5f7e:	95 4e       	sbci	r25, 0xE5	; 229
    5f80:	fc 01       	movw	r30, r24
    5f82:	25 91       	lpm	r18, Z+
    5f84:	34 91       	lpm	r19, Z+
    5f86:	f9 01       	movw	r30, r18
    5f88:	19 95       	eicall
    5f8a:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    5f8c:	c9 01       	movw	r24, r18
    5f8e:	08 95       	ret

00005f90 <_getc_char>:

/* xio_usb_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(ds[gdev].flags)) ds[gdev].dev_putc(ds[gdev].c, stdout);
    5f90:	80 91 5e 22 	lds	r24, 0x225E
    5f94:	90 e0       	ldi	r25, 0x00	; 0
    5f96:	27 e1       	ldi	r18, 0x17	; 23
    5f98:	30 e0       	ldi	r19, 0x00	; 0
    5f9a:	82 9f       	mul	r24, r18
    5f9c:	d0 01       	movw	r26, r0
    5f9e:	83 9f       	mul	r24, r19
    5fa0:	b0 0d       	add	r27, r0
    5fa2:	92 9f       	mul	r25, r18
    5fa4:	b0 0d       	add	r27, r0
    5fa6:	11 24       	eor	r1, r1
    5fa8:	ab 5f       	subi	r26, 0xFB	; 251
    5faa:	ba 4d       	sbci	r27, 0xDA	; 218
    5fac:	8c 91       	ld	r24, X
    5fae:	84 ff       	sbrs	r24, 4
    5fb0:	0b c0       	rjmp	.+22     	; 0x5fc8 <_getc_char+0x38>
    5fb2:	60 91 46 26 	lds	r22, 0x2646
    5fb6:	70 91 47 26 	lds	r23, 0x2647
    5fba:	1b 96       	adiw	r26, 0x0b	; 11
    5fbc:	ed 91       	ld	r30, X+
    5fbe:	fc 91       	ld	r31, X
    5fc0:	1c 97       	sbiw	r26, 0x0c	; 12
    5fc2:	14 96       	adiw	r26, 0x04	; 4
    5fc4:	8c 91       	ld	r24, X
    5fc6:	19 95       	eicall
    5fc8:	80 91 5e 22 	lds	r24, 0x225E
    5fcc:	90 e0       	ldi	r25, 0x00	; 0
    5fce:	27 e1       	ldi	r18, 0x17	; 23
    5fd0:	30 e0       	ldi	r19, 0x00	; 0
    5fd2:	82 9f       	mul	r24, r18
    5fd4:	f0 01       	movw	r30, r0
    5fd6:	83 9f       	mul	r24, r19
    5fd8:	f0 0d       	add	r31, r0
    5fda:	92 9f       	mul	r25, r18
    5fdc:	f0 0d       	add	r31, r0
    5fde:	11 24       	eor	r1, r1
    5fe0:	eb 5f       	subi	r30, 0xFB	; 251
    5fe2:	fa 4d       	sbci	r31, 0xDA	; 218
	return(ds[gdev].c);
}
    5fe4:	84 81       	ldd	r24, Z+4	; 0x04
    5fe6:	90 e0       	ldi	r25, 0x00	; 0
    5fe8:	08 95       	ret

00005fea <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(ds[gdev].flags)) ds[gdev].c = '\n';
    5fea:	80 91 5e 22 	lds	r24, 0x225E
    5fee:	28 2f       	mov	r18, r24
    5ff0:	30 e0       	ldi	r19, 0x00	; 0
    5ff2:	87 e1       	ldi	r24, 0x17	; 23
    5ff4:	90 e0       	ldi	r25, 0x00	; 0
    5ff6:	28 9f       	mul	r18, r24
    5ff8:	f0 01       	movw	r30, r0
    5ffa:	29 9f       	mul	r18, r25
    5ffc:	f0 0d       	add	r31, r0
    5ffe:	38 9f       	mul	r19, r24
    6000:	f0 0d       	add	r31, r0
    6002:	11 24       	eor	r1, r1
    6004:	eb 5f       	subi	r30, 0xFB	; 251
    6006:	fa 4d       	sbci	r31, 0xDA	; 218
    6008:	80 81       	ld	r24, Z
    600a:	86 ff       	sbrs	r24, 6
    600c:	02 c0       	rjmp	.+4      	; 0x6012 <__stack+0x13>
    600e:	8a e0       	ldi	r24, 0x0A	; 10
    6010:	84 83       	std	Z+4, r24	; 0x04
	if (ECHO(ds[gdev].flags)) ds[gdev].dev_putc(ds[gdev].c, stdout);
    6012:	87 e1       	ldi	r24, 0x17	; 23
    6014:	90 e0       	ldi	r25, 0x00	; 0
    6016:	28 9f       	mul	r18, r24
    6018:	d0 01       	movw	r26, r0
    601a:	29 9f       	mul	r18, r25
    601c:	b0 0d       	add	r27, r0
    601e:	38 9f       	mul	r19, r24
    6020:	b0 0d       	add	r27, r0
    6022:	11 24       	eor	r1, r1
    6024:	ab 5f       	subi	r26, 0xFB	; 251
    6026:	ba 4d       	sbci	r27, 0xDA	; 218
    6028:	8c 91       	ld	r24, X
    602a:	84 ff       	sbrs	r24, 4
    602c:	0b c0       	rjmp	.+22     	; 0x6044 <__stack+0x45>
    602e:	60 91 46 26 	lds	r22, 0x2646
    6032:	70 91 47 26 	lds	r23, 0x2647
    6036:	1b 96       	adiw	r26, 0x0b	; 11
    6038:	ed 91       	ld	r30, X+
    603a:	fc 91       	ld	r31, X
    603c:	1c 97       	sbiw	r26, 0x0c	; 12
    603e:	14 96       	adiw	r26, 0x04	; 4
    6040:	8c 91       	ld	r24, X
    6042:	19 95       	eicall
    6044:	80 91 5e 22 	lds	r24, 0x225E
    6048:	90 e0       	ldi	r25, 0x00	; 0
    604a:	27 e1       	ldi	r18, 0x17	; 23
    604c:	30 e0       	ldi	r19, 0x00	; 0
    604e:	82 9f       	mul	r24, r18
    6050:	f0 01       	movw	r30, r0
    6052:	83 9f       	mul	r24, r19
    6054:	f0 0d       	add	r31, r0
    6056:	92 9f       	mul	r25, r18
    6058:	f0 0d       	add	r31, r0
    605a:	11 24       	eor	r1, r1
    605c:	eb 5f       	subi	r30, 0xFB	; 251
    605e:	fa 4d       	sbci	r31, 0xDA	; 218
	return(ds[gdev].c);
}
    6060:	84 81       	ldd	r24, Z+4	; 0x04
    6062:	90 e0       	ldi	r25, 0x00	; 0
    6064:	08 95       	ret

00006066 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(ds[gdev].flags)) {
    6066:	80 91 5e 22 	lds	r24, 0x225E
    606a:	90 e0       	ldi	r25, 0x00	; 0
    606c:	27 e1       	ldi	r18, 0x17	; 23
    606e:	30 e0       	ldi	r19, 0x00	; 0
    6070:	82 9f       	mul	r24, r18
    6072:	f0 01       	movw	r30, r0
    6074:	83 9f       	mul	r24, r19
    6076:	f0 0d       	add	r31, r0
    6078:	92 9f       	mul	r25, r18
    607a:	f0 0d       	add	r31, r0
    607c:	11 24       	eor	r1, r1
    607e:	eb 5f       	subi	r30, 0xFB	; 251
    6080:	fa 4d       	sbci	r31, 0xDA	; 218
    6082:	80 81       	ld	r24, Z
    6084:	87 ff       	sbrs	r24, 7
    6086:	03 c0       	rjmp	.+6      	; 0x608e <_getc_SEMICOLON+0x28>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    6088:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <_getc_NEWLINE>
    608c:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    608e:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <_getc_char>
}
    6092:	08 95       	ret

00006094 <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	ds[gdev].sig = XIO_SIG_DELETE;
    6094:	80 91 5e 22 	lds	r24, 0x225E
    6098:	90 e0       	ldi	r25, 0x00	; 0
    609a:	27 e1       	ldi	r18, 0x17	; 23
    609c:	30 e0       	ldi	r19, 0x00	; 0
    609e:	82 9f       	mul	r24, r18
    60a0:	f0 01       	movw	r30, r0
    60a2:	83 9f       	mul	r24, r19
    60a4:	f0 0d       	add	r31, r0
    60a6:	92 9f       	mul	r25, r18
    60a8:	f0 0d       	add	r31, r0
    60aa:	11 24       	eor	r1, r1
    60ac:	eb 5f       	subi	r30, 0xFB	; 251
    60ae:	fa 4d       	sbci	r31, 0xDA	; 218
    60b0:	89 e0       	ldi	r24, 0x09	; 9
    60b2:	83 83       	std	Z+3, r24	; 0x03
	return(_FDEV_ERR);
}
    60b4:	8f ef       	ldi	r24, 0xFF	; 255
    60b6:	9f ef       	ldi	r25, 0xFF	; 255
    60b8:	08 95       	ret

000060ba <xio_readln_usart>:
 *
 *	Note: LINEMODE flag in device struct is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_usart(const uint8_t dev, char *buf, const uint8_t size)
{
    60ba:	ff 92       	push	r15
    60bc:	0f 93       	push	r16
    60be:	1f 93       	push	r17
    60c0:	cf 93       	push	r28
    60c2:	df 93       	push	r29
    60c4:	28 2f       	mov	r18, r24
	struct xioDEVICE *d = &ds[dev];						// init device struct pointer
    60c6:	87 e1       	ldi	r24, 0x17	; 23
    60c8:	28 9f       	mul	r18, r24
    60ca:	e0 01       	movw	r28, r0
    60cc:	11 24       	eor	r1, r1
    60ce:	cb 5f       	subi	r28, 0xFB	; 251
    60d0:	da 4d       	sbci	r29, 0xDA	; 218
	
	gdev = dev;									// set the global device number
    60d2:	20 93 5e 22 	sts	0x225E, r18

	if (!IN_LINE(d->flags)) {					// first time thru initializations
    60d6:	88 81       	ld	r24, Y
    60d8:	99 81       	ldd	r25, Y+1	; 0x01
    60da:	96 fd       	sbrc	r25, 6
    60dc:	09 c0       	rjmp	.+18     	; 0x60f0 <xio_readln_usart+0x36>
		d->len = 0;							// zero buffer
    60de:	1d 82       	std	Y+5, r1	; 0x05
		d->status = 0;
    60e0:	1a 82       	std	Y+2, r1	; 0x02
		d->size = size;
    60e2:	4e 83       	std	Y+6, r20	; 0x06
		d->buf = buf;
    60e4:	6d 8b       	std	Y+21, r22	; 0x15
    60e6:	7e 8b       	std	Y+22, r23	; 0x16
		d->sig = XIO_SIG_OK;					// reset signal register
    60e8:	1b 82       	std	Y+3, r1	; 0x03
		d->flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    60ea:	90 64       	ori	r25, 0x40	; 64
    60ec:	88 83       	st	Y, r24
    60ee:	99 83       	std	Y+1, r25	; 0x01
 */

static int _xio_readc_usart(const uint8_t dev, const char *buf)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    60f0:	30 e0       	ldi	r19, 0x00	; 0
    60f2:	87 e1       	ldi	r24, 0x17	; 23
    60f4:	90 e0       	ldi	r25, 0x00	; 0
    60f6:	28 9f       	mul	r18, r24
    60f8:	80 01       	movw	r16, r0
    60fa:	29 9f       	mul	r18, r25
    60fc:	10 0d       	add	r17, r0
    60fe:	38 9f       	mul	r19, r24
    6100:	10 0d       	add	r17, r0
    6102:	11 24       	eor	r1, r1
    6104:	0a 5e       	subi	r16, 0xEA	; 234
    6106:	1a 4d       	sbci	r17, 0xDA	; 218

	if (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
		return(XIO_BUFFER_EMPTY);
	}
	if (--(dx->rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6108:	4f e3       	ldi	r20, 0x3F	; 63
    610a:	f4 2e       	mov	r15, r20
 */

static int _xio_readc_usart(const uint8_t dev, const char *buf)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    610c:	d8 01       	movw	r26, r16
    610e:	ed 91       	ld	r30, X+
    6110:	fc 91       	ld	r31, X

	if (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
    6112:	93 81       	ldd	r25, Z+3	; 0x03
    6114:	82 81       	ldd	r24, Z+2	; 0x02
    6116:	98 17       	cp	r25, r24
    6118:	19 f4       	brne	.+6      	; 0x6120 <xio_readln_usart+0x66>
    611a:	88 e0       	ldi	r24, 0x08	; 8
    611c:	90 e0       	ldi	r25, 0x00	; 0
    611e:	17 c0       	rjmp	.+46     	; 0x614e <xio_readln_usart+0x94>
		return(XIO_BUFFER_EMPTY);
	}
	if (--(dx->rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
    6120:	82 81       	ldd	r24, Z+2	; 0x02
    6122:	81 50       	subi	r24, 0x01	; 1
    6124:	82 83       	std	Z+2, r24	; 0x02
    6126:	82 81       	ldd	r24, Z+2	; 0x02
    6128:	88 23       	and	r24, r24
    612a:	09 f4       	brne	.+2      	; 0x612e <xio_readln_usart+0x74>
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    612c:	f2 82       	std	Z+2, r15	; 0x02
	}
	d->c = (dx->rx_buf[dx->rx_buf_tail] & 0x007F); // get char from RX Q & mask MSB
    612e:	82 81       	ldd	r24, Z+2	; 0x02
    6130:	e8 0f       	add	r30, r24
    6132:	f1 1d       	adc	r31, r1
    6134:	83 85       	ldd	r24, Z+11	; 0x0b
    6136:	8f 77       	andi	r24, 0x7F	; 127
    6138:	8c 83       	std	Y+4, r24	; 0x04
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[d->c])))()); // dispatch char
    613a:	90 e0       	ldi	r25, 0x00	; 0
    613c:	88 0f       	add	r24, r24
    613e:	99 1f       	adc	r25, r25
    6140:	87 50       	subi	r24, 0x07	; 7
    6142:	96 4e       	sbci	r25, 0xE6	; 230
    6144:	fc 01       	movw	r30, r24
    6146:	25 91       	lpm	r18, Z+
    6148:	34 91       	lpm	r19, Z+
    614a:	f9 01       	movw	r30, r18
    614c:	19 95       	eicall
		d->buf = buf;
		d->sig = XIO_SIG_OK;					// reset signal register
		d->flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
	}
	while (TRUE) { 
		switch (d->status = _xio_readc_usart(dev, d->buf)) {
    614e:	8a 83       	std	Y+2, r24	; 0x02
    6150:	88 30       	cpi	r24, 0x08	; 8
    6152:	41 f0       	breq	.+16     	; 0x6164 <xio_readln_usart+0xaa>
    6154:	8a 30       	cpi	r24, 0x0A	; 10
    6156:	19 f0       	breq	.+6      	; 0x615e <xio_readln_usart+0xa4>
    6158:	84 30       	cpi	r24, 0x04	; 4
    615a:	c1 f6       	brne	.-80     	; 0x610c <xio_readln_usart+0x52>
    615c:	06 c0       	rjmp	.+12     	; 0x616a <xio_readln_usart+0xb0>
    615e:	2a e0       	ldi	r18, 0x0A	; 10
    6160:	30 e0       	ldi	r19, 0x00	; 0
    6162:	05 c0       	rjmp	.+10     	; 0x616e <xio_readln_usart+0xb4>
    6164:	22 e0       	ldi	r18, 0x02	; 2
    6166:	30 e0       	ldi	r19, 0x00	; 0
    6168:	02 c0       	rjmp	.+4      	; 0x616e <xio_readln_usart+0xb4>
    616a:	20 e0       	ldi	r18, 0x00	; 0
    616c:	30 e0       	ldi	r19, 0x00	; 0
			case (XIO_EOL): return (XIO_OK); break;				// got completed line
			case (XIO_EAGAIN): break;							// loop
		}
		// +++ put a size check here of buffers can overrun.
	}
}
    616e:	c9 01       	movw	r24, r18
    6170:	df 91       	pop	r29
    6172:	cf 91       	pop	r28
    6174:	1f 91       	pop	r17
    6176:	0f 91       	pop	r16
    6178:	ff 90       	pop	r15
    617a:	08 95       	ret

0000617c <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (ds[gdev].len > ds[gdev].size) {			// trap buffer overflow
    617c:	80 91 5e 22 	lds	r24, 0x225E
    6180:	90 e0       	ldi	r25, 0x00	; 0
    6182:	27 e1       	ldi	r18, 0x17	; 23
    6184:	30 e0       	ldi	r19, 0x00	; 0
    6186:	82 9f       	mul	r24, r18
    6188:	d0 01       	movw	r26, r0
    618a:	83 9f       	mul	r24, r19
    618c:	b0 0d       	add	r27, r0
    618e:	92 9f       	mul	r25, r18
    6190:	b0 0d       	add	r27, r0
    6192:	11 24       	eor	r1, r1
    6194:	ab 5f       	subi	r26, 0xFB	; 251
    6196:	ba 4d       	sbci	r27, 0xDA	; 218
    6198:	15 96       	adiw	r26, 0x05	; 5
    619a:	9c 91       	ld	r25, X
    619c:	15 97       	sbiw	r26, 0x05	; 5
    619e:	16 96       	adiw	r26, 0x06	; 6
    61a0:	2c 91       	ld	r18, X
    61a2:	16 97       	sbiw	r26, 0x06	; 6
    61a4:	29 17       	cp	r18, r25
    61a6:	70 f4       	brcc	.+28     	; 0x61c4 <_readln_char+0x48>
		ds[gdev].sig = XIO_SIG_EOL;
    61a8:	82 e0       	ldi	r24, 0x02	; 2
    61aa:	13 96       	adiw	r26, 0x03	; 3
    61ac:	8c 93       	st	X, r24
    61ae:	13 97       	sbiw	r26, 0x03	; 3
		ds[gdev].buf[ds[gdev].size] = NUL;		// size is zero based
    61b0:	55 96       	adiw	r26, 0x15	; 21
    61b2:	ed 91       	ld	r30, X+
    61b4:	fc 91       	ld	r31, X
    61b6:	56 97       	sbiw	r26, 0x16	; 22
    61b8:	e2 0f       	add	r30, r18
    61ba:	f1 1d       	adc	r31, r1
    61bc:	10 82       	st	Z, r1
    61be:	2a e0       	ldi	r18, 0x0A	; 10
    61c0:	30 e0       	ldi	r19, 0x00	; 0
    61c2:	1e c0       	rjmp	.+60     	; 0x6200 <_readln_char+0x84>
		return (XIO_BUFFER_FULL_NON_FATAL);
	}
	ds[gdev].buf[ds[gdev].len++] = ds[gdev].c;
    61c4:	55 96       	adiw	r26, 0x15	; 21
    61c6:	ed 91       	ld	r30, X+
    61c8:	fc 91       	ld	r31, X
    61ca:	56 97       	sbiw	r26, 0x16	; 22
    61cc:	e9 0f       	add	r30, r25
    61ce:	f1 1d       	adc	r31, r1
    61d0:	14 96       	adiw	r26, 0x04	; 4
    61d2:	8c 91       	ld	r24, X
    61d4:	14 97       	sbiw	r26, 0x04	; 4
    61d6:	80 83       	st	Z, r24
    61d8:	9f 5f       	subi	r25, 0xFF	; 255
    61da:	15 96       	adiw	r26, 0x05	; 5
    61dc:	9c 93       	st	X, r25
    61de:	15 97       	sbiw	r26, 0x05	; 5
	if (ECHO(ds[gdev].flags)) ds[gdev].dev_putc(ds[gdev].c, stdout);// conditional echo
    61e0:	8c 91       	ld	r24, X
    61e2:	84 ff       	sbrs	r24, 4
    61e4:	0b c0       	rjmp	.+22     	; 0x61fc <_readln_char+0x80>
    61e6:	60 91 46 26 	lds	r22, 0x2646
    61ea:	70 91 47 26 	lds	r23, 0x2647
    61ee:	1b 96       	adiw	r26, 0x0b	; 11
    61f0:	ed 91       	ld	r30, X+
    61f2:	fc 91       	ld	r31, X
    61f4:	1c 97       	sbiw	r26, 0x0c	; 12
    61f6:	14 96       	adiw	r26, 0x04	; 4
    61f8:	8c 91       	ld	r24, X
    61fa:	19 95       	eicall
    61fc:	22 e0       	ldi	r18, 0x02	; 2
    61fe:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_EAGAIN);						// line is still in process
}
    6200:	c9 01       	movw	r24, r18
    6202:	08 95       	ret

00006204 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	ds[gdev].sig = XIO_SIG_EOL;
    6204:	80 91 5e 22 	lds	r24, 0x225E
    6208:	90 e0       	ldi	r25, 0x00	; 0
    620a:	27 e1       	ldi	r18, 0x17	; 23
    620c:	30 e0       	ldi	r19, 0x00	; 0
    620e:	82 9f       	mul	r24, r18
    6210:	d0 01       	movw	r26, r0
    6212:	83 9f       	mul	r24, r19
    6214:	b0 0d       	add	r27, r0
    6216:	92 9f       	mul	r25, r18
    6218:	b0 0d       	add	r27, r0
    621a:	11 24       	eor	r1, r1
    621c:	ab 5f       	subi	r26, 0xFB	; 251
    621e:	ba 4d       	sbci	r27, 0xDA	; 218
    6220:	82 e0       	ldi	r24, 0x02	; 2
    6222:	13 96       	adiw	r26, 0x03	; 3
    6224:	8c 93       	st	X, r24
    6226:	13 97       	sbiw	r26, 0x03	; 3
	ds[gdev].buf[ds[gdev].len] = NUL;
    6228:	15 96       	adiw	r26, 0x05	; 5
    622a:	8c 91       	ld	r24, X
    622c:	15 97       	sbiw	r26, 0x05	; 5
    622e:	55 96       	adiw	r26, 0x15	; 21
    6230:	ed 91       	ld	r30, X+
    6232:	fc 91       	ld	r31, X
    6234:	56 97       	sbiw	r26, 0x16	; 22
    6236:	e8 0f       	add	r30, r24
    6238:	f1 1d       	adc	r31, r1
    623a:	10 82       	st	Z, r1
	ds[gdev].flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    623c:	2d 91       	ld	r18, X+
    623e:	3c 91       	ld	r19, X
    6240:	11 97       	sbiw	r26, 0x01	; 1
    6242:	c9 01       	movw	r24, r18
    6244:	9f 7b       	andi	r25, 0xBF	; 191
    6246:	8d 93       	st	X+, r24
    6248:	9c 93       	st	X, r25
    624a:	11 97       	sbiw	r26, 0x01	; 1
	if (ECHO(ds[gdev].flags)) ds[gdev].dev_putc('\n',stdout);// echo a newline
    624c:	24 ff       	sbrs	r18, 4
    624e:	0a c0       	rjmp	.+20     	; 0x6264 <_readln_NEWLINE+0x60>
    6250:	60 91 46 26 	lds	r22, 0x2646
    6254:	70 91 47 26 	lds	r23, 0x2647
    6258:	1b 96       	adiw	r26, 0x0b	; 11
    625a:	ed 91       	ld	r30, X+
    625c:	fc 91       	ld	r31, X
    625e:	1c 97       	sbiw	r26, 0x0c	; 12
    6260:	8a e0       	ldi	r24, 0x0A	; 10
    6262:	19 95       	eicall
	return (XIO_EOL);							// return for end-of-line
}
    6264:	84 e0       	ldi	r24, 0x04	; 4
    6266:	90 e0       	ldi	r25, 0x00	; 0
    6268:	08 95       	ret

0000626a <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newln
{
	if (SEMICOLONS(ds[gdev].flags)) {
    626a:	80 91 5e 22 	lds	r24, 0x225E
    626e:	90 e0       	ldi	r25, 0x00	; 0
    6270:	27 e1       	ldi	r18, 0x17	; 23
    6272:	30 e0       	ldi	r19, 0x00	; 0
    6274:	82 9f       	mul	r24, r18
    6276:	f0 01       	movw	r30, r0
    6278:	83 9f       	mul	r24, r19
    627a:	f0 0d       	add	r31, r0
    627c:	92 9f       	mul	r25, r18
    627e:	f0 0d       	add	r31, r0
    6280:	11 24       	eor	r1, r1
    6282:	eb 5f       	subi	r30, 0xFB	; 251
    6284:	fa 4d       	sbci	r31, 0xDA	; 218
    6286:	80 81       	ld	r24, Z
    6288:	87 ff       	sbrs	r24, 7
    628a:	03 c0       	rjmp	.+6      	; 0x6292 <_readln_SEMICOLON+0x28>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    628c:	0e 94 02 31 	call	0x6204	; 0x6204 <_readln_NEWLINE>
    6290:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    6292:	0e 94 be 30 	call	0x617c	; 0x617c <_readln_char>
	}
}
    6296:	08 95       	ret

00006298 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--ds[gdev].len >= 0) {
    6298:	80 91 5e 22 	lds	r24, 0x225E
    629c:	90 e0       	ldi	r25, 0x00	; 0
    629e:	27 e1       	ldi	r18, 0x17	; 23
    62a0:	30 e0       	ldi	r19, 0x00	; 0
    62a2:	82 9f       	mul	r24, r18
    62a4:	d0 01       	movw	r26, r0
    62a6:	83 9f       	mul	r24, r19
    62a8:	b0 0d       	add	r27, r0
    62aa:	92 9f       	mul	r25, r18
    62ac:	b0 0d       	add	r27, r0
    62ae:	11 24       	eor	r1, r1
    62b0:	ab 5f       	subi	r26, 0xFB	; 251
    62b2:	ba 4d       	sbci	r27, 0xDA	; 218
    62b4:	15 96       	adiw	r26, 0x05	; 5
    62b6:	8c 91       	ld	r24, X
    62b8:	15 97       	sbiw	r26, 0x05	; 5
    62ba:	81 50       	subi	r24, 0x01	; 1
    62bc:	15 96       	adiw	r26, 0x05	; 5
    62be:	8c 93       	st	X, r24
    62c0:	15 97       	sbiw	r26, 0x05	; 5
		if (ECHO(ds[gdev].flags)) ds[gdev].dev_putc(ds[gdev].c, stdout);
    62c2:	8c 91       	ld	r24, X
    62c4:	84 ff       	sbrs	r24, 4
    62c6:	0b c0       	rjmp	.+22     	; 0x62de <_readln_DELETE+0x46>
    62c8:	60 91 46 26 	lds	r22, 0x2646
    62cc:	70 91 47 26 	lds	r23, 0x2647
    62d0:	1b 96       	adiw	r26, 0x0b	; 11
    62d2:	ed 91       	ld	r30, X+
    62d4:	fc 91       	ld	r31, X
    62d6:	1c 97       	sbiw	r26, 0x0c	; 12
    62d8:	14 96       	adiw	r26, 0x04	; 4
    62da:	8c 91       	ld	r24, X
    62dc:	19 95       	eicall
	} else {
		ds[gdev].len = 0;
	}
	return (XIO_EAGAIN);						// line is still in process
}
    62de:	82 e0       	ldi	r24, 0x02	; 2
    62e0:	90 e0       	ldi	r25, 0x00	; 0
    62e2:	08 95       	ret

000062e4 <xio_queue_RX_char_usart>:
 */

void xio_queue_RX_char_usart(const uint8_t dev, const char c)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    62e4:	90 e0       	ldi	r25, 0x00	; 0
    62e6:	27 e1       	ldi	r18, 0x17	; 23
    62e8:	30 e0       	ldi	r19, 0x00	; 0
    62ea:	82 9f       	mul	r24, r18
    62ec:	f0 01       	movw	r30, r0
    62ee:	83 9f       	mul	r24, r19
    62f0:	f0 0d       	add	r31, r0
    62f2:	92 9f       	mul	r25, r18
    62f4:	f0 0d       	add	r31, r0
    62f6:	11 24       	eor	r1, r1
    62f8:	eb 5f       	subi	r30, 0xFB	; 251
    62fa:	fa 4d       	sbci	r31, 0xDA	; 218
    62fc:	81 89       	ldd	r24, Z+17	; 0x11
    62fe:	92 89       	ldd	r25, Z+18	; 0x12

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6300:	63 30       	cpi	r22, 0x03	; 3
    6302:	29 f4       	brne	.+10     	; 0x630e <xio_queue_RX_char_usart+0x2a>
		d->sig = XIO_SIG_KILL;					// set signal value
    6304:	84 e0       	ldi	r24, 0x04	; 4
    6306:	83 83       	std	Z+3, r24	; 0x03
		signal_etx();							// call app-specific signal handler
    6308:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <signal_etx>
    630c:	08 95       	ret
 */

void xio_queue_RX_char_usart(const uint8_t dev, const char c)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    630e:	fc 01       	movw	r30, r24
		signal_etx();							// call app-specific signal handler
		return;
	}

	// normal path
	if ((--dx->rx_buf_head) == 0) { 			// wrap condition
    6310:	83 81       	ldd	r24, Z+3	; 0x03
    6312:	81 50       	subi	r24, 0x01	; 1
    6314:	83 83       	std	Z+3, r24	; 0x03
    6316:	83 81       	ldd	r24, Z+3	; 0x03
    6318:	88 23       	and	r24, r24
    631a:	11 f4       	brne	.+4      	; 0x6320 <xio_queue_RX_char_usart+0x3c>
		dx->rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    631c:	8f e3       	ldi	r24, 0x3F	; 63
    631e:	83 83       	std	Z+3, r24	; 0x03
	}
	if (dx->rx_buf_head != dx->rx_buf_tail) {// write char unless buffer full
    6320:	93 81       	ldd	r25, Z+3	; 0x03
    6322:	82 81       	ldd	r24, Z+2	; 0x02
    6324:	98 17       	cp	r25, r24
    6326:	29 f0       	breq	.+10     	; 0x6332 <xio_queue_RX_char_usart+0x4e>
		dx->rx_buf[dx->rx_buf_head] = c;	// FAKE INPUT DATA
    6328:	83 81       	ldd	r24, Z+3	; 0x03
    632a:	e8 0f       	add	r30, r24
    632c:	f1 1d       	adc	r31, r1
    632e:	63 87       	std	Z+11, r22	; 0x0b
    6330:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++dx->rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6332:	83 81       	ldd	r24, Z+3	; 0x03
    6334:	8f 5f       	subi	r24, 0xFF	; 255
    6336:	83 83       	std	Z+3, r24	; 0x03
    6338:	83 81       	ldd	r24, Z+3	; 0x03
    633a:	80 34       	cpi	r24, 0x40	; 64
    633c:	10 f0       	brcs	.+4      	; 0x6342 <xio_queue_RX_char_usart+0x5e>
		dx->rx_buf_head = 1;
    633e:	81 e0       	ldi	r24, 0x01	; 1
    6340:	83 83       	std	Z+3, r24	; 0x03
    6342:	08 95       	ret

00006344 <xio_queue_RX_string_usart>:
/*
 * xio_queue_RX_string_usart() - fake ISR to put a string in the RX buffer
 */

void xio_queue_RX_string_usart(const uint8_t dev, const char *buf)
{
    6344:	0f 93       	push	r16
    6346:	1f 93       	push	r17
    6348:	cf 93       	push	r28
    634a:	df 93       	push	r29
    634c:	08 2f       	mov	r16, r24
    634e:	eb 01       	movw	r28, r22
    6350:	10 e0       	ldi	r17, 0x00	; 0
    6352:	03 c0       	rjmp	.+6      	; 0x635a <xio_queue_RX_string_usart+0x16>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_queue_RX_char_usart(dev, c);
    6354:	80 2f       	mov	r24, r16
    6356:	0e 94 72 31 	call	0x62e4	; 0x62e4 <xio_queue_RX_char_usart>
void xio_queue_RX_string_usart(const uint8_t dev, const char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    635a:	fe 01       	movw	r30, r28
    635c:	e1 0f       	add	r30, r17
    635e:	f1 1d       	adc	r31, r1
    6360:	60 81       	ld	r22, Z
    6362:	1f 5f       	subi	r17, 0xFF	; 255
    6364:	66 23       	and	r22, r22
    6366:	b1 f7       	brne	.-20     	; 0x6354 <xio_queue_RX_string_usart+0x10>
		xio_queue_RX_char_usart(dev, c);
	}
}
    6368:	df 91       	pop	r29
    636a:	cf 91       	pop	r28
    636c:	1f 91       	pop	r17
    636e:	0f 91       	pop	r16
    6370:	08 95       	ret

00006372 <xio_init_usart>:
					const struct PORT_struct *port_addr,
					const uint8_t dirclr, 
					const uint8_t dirset, 
					const uint8_t outclr, 
					const uint8_t outset) 
{
    6372:	8f 92       	push	r8
    6374:	9f 92       	push	r9
    6376:	af 92       	push	r10
    6378:	bf 92       	push	r11
    637a:	cf 92       	push	r12
    637c:	df 92       	push	r13
    637e:	ef 92       	push	r14
    6380:	ff 92       	push	r15
    6382:	0f 93       	push	r16
    6384:	1f 93       	push	r17
    6386:	df 93       	push	r29
    6388:	cf 93       	push	r28
    638a:	cd b7       	in	r28, 0x3d	; 61
    638c:	de b7       	in	r29, 0x3e	; 62
    638e:	b8 2e       	mov	r11, r24
    6390:	f4 2e       	mov	r15, r20
    6392:	9c 2c       	mov	r9, r12
	// do all the bindings first (and in this order)
	struct xioDEVICE *d = &ds[dev];					// setup device struct pointer
	d->x = &us[offset];								// bind USART struct to device
    6394:	8b e8       	ldi	r24, 0x8B	; 139
    6396:	68 9f       	mul	r22, r24
    6398:	60 01       	movw	r12, r0
    639a:	11 24       	eor	r1, r1
    639c:	82 e5       	ldi	r24, 0x52	; 82
    639e:	93 e2       	ldi	r25, 0x23	; 35
    63a0:	c8 0e       	add	r12, r24
    63a2:	d9 1e       	adc	r13, r25
    63a4:	6b 2d       	mov	r22, r11
    63a6:	70 e0       	ldi	r23, 0x00	; 0
    63a8:	87 e1       	ldi	r24, 0x17	; 23
    63aa:	90 e0       	ldi	r25, 0x00	; 0
    63ac:	68 9f       	mul	r22, r24
    63ae:	f0 01       	movw	r30, r0
    63b0:	69 9f       	mul	r22, r25
    63b2:	f0 0d       	add	r31, r0
    63b4:	78 9f       	mul	r23, r24
    63b6:	f0 0d       	add	r31, r0
    63b8:	11 24       	eor	r1, r1
    63ba:	eb 5f       	subi	r30, 0xFB	; 251
    63bc:	fa 4d       	sbci	r31, 0xDA	; 218
    63be:	c1 8a       	std	Z+17, r12	; 0x11
    63c0:	d2 8a       	std	Z+18, r13	; 0x12
	struct xioUSART *dx = (struct xioUSART *)d->x;	// setup USART struct pointer
	dx->usart = (struct USART_struct *)usart_addr;	// bind USART 
    63c2:	d6 01       	movw	r26, r12
    63c4:	17 96       	adiw	r26, 0x07	; 7
    63c6:	2d 93       	st	X+, r18
    63c8:	3c 93       	st	X, r19
    63ca:	18 97       	sbiw	r26, 0x08	; 8
	dx->port = (struct PORT_struct *)port_addr;		// bind PORT
    63cc:	19 96       	adiw	r26, 0x09	; 9
    63ce:	0d 93       	st	X+, r16
    63d0:	1c 93       	st	X, r17
    63d2:	1a 97       	sbiw	r26, 0x0a	; 10

	// set flags
	xio_setflags(dev, control);				// generic, doesn't validate flags
    63d4:	8b 2d       	mov	r24, r11
    63d6:	64 2f       	mov	r22, r20
    63d8:	75 2f       	mov	r23, r21
    63da:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <xio_setflags>

	// setup internal RX/TX buffers
	dx->rx_buf_head = 1;					// can't use location 0 in  circ buffer
    63de:	81 e0       	ldi	r24, 0x01	; 1
    63e0:	f6 01       	movw	r30, r12
    63e2:	83 83       	std	Z+3, r24	; 0x03
	dx->rx_buf_tail = 1;
    63e4:	82 83       	std	Z+2, r24	; 0x02
	dx->tx_buf_head = 1;
    63e6:	85 83       	std	Z+5, r24	; 0x05
	dx->tx_buf_tail = 1;
    63e8:	84 83       	std	Z+4, r24	; 0x04

	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    63ea:	4f 2d       	mov	r20, r15
    63ec:	4f 70       	andi	r20, 0x0F	; 15
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
    63ee:	09 f4       	brne	.+2      	; 0x63f2 <xio_init_usart+0x80>
    63f0:	45 e0       	ldi	r20, 0x05	; 5
	dx->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    63f2:	2b 2d       	mov	r18, r11
    63f4:	30 e0       	ldi	r19, 0x00	; 0
    63f6:	87 e1       	ldi	r24, 0x17	; 23
    63f8:	90 e0       	ldi	r25, 0x00	; 0
    63fa:	28 9f       	mul	r18, r24
    63fc:	d0 01       	movw	r26, r0
    63fe:	29 9f       	mul	r18, r25
    6400:	b0 0d       	add	r27, r0
    6402:	38 9f       	mul	r19, r24
    6404:	b0 0d       	add	r27, r0
    6406:	11 24       	eor	r1, r1
    6408:	ab 5f       	subi	r26, 0xFB	; 251
    640a:	ba 4d       	sbci	r27, 0xDA	; 218
    640c:	51 96       	adiw	r26, 0x11	; 17
    640e:	ed 91       	ld	r30, X+
    6410:	fc 91       	ld	r31, X
    6412:	52 97       	sbiw	r26, 0x12	; 18
    6414:	87 81       	ldd	r24, Z+7	; 0x07
    6416:	90 85       	ldd	r25, Z+8	; 0x08
    6418:	24 2f       	mov	r18, r20
    641a:	30 e0       	ldi	r19, 0x00	; 0
    641c:	f9 01       	movw	r30, r18
    641e:	ed 51       	subi	r30, 0x1D	; 29
    6420:	f6 4e       	sbci	r31, 0xE6	; 230
    6422:	44 91       	lpm	r20, Z+
    6424:	fc 01       	movw	r30, r24
    6426:	46 83       	std	Z+6, r20	; 0x06
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    6428:	51 96       	adiw	r26, 0x11	; 17
    642a:	ed 91       	ld	r30, X+
    642c:	fc 91       	ld	r31, X
    642e:	52 97       	sbiw	r26, 0x12	; 18
    6430:	a7 81       	ldd	r26, Z+7	; 0x07
    6432:	b0 85       	ldd	r27, Z+8	; 0x08
    6434:	22 51       	subi	r18, 0x12	; 18
    6436:	36 4e       	sbci	r19, 0xE6	; 230
    6438:	f9 01       	movw	r30, r18
    643a:	f4 90       	lpm	r15, Z+
    643c:	17 96       	adiw	r26, 0x07	; 7
    643e:	fc 92       	st	X, r15
	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
	xio_set_baud_usart(dev, baud);					// usart must be bound first

	dx->usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx
    6440:	d6 01       	movw	r26, r12
    6442:	17 96       	adiw	r26, 0x07	; 7
    6444:	ed 91       	ld	r30, X+
    6446:	fc 91       	ld	r31, X
    6448:	18 97       	sbiw	r26, 0x08	; 8
    644a:	88 e1       	ldi	r24, 0x18	; 24
    644c:	84 83       	std	Z+4, r24	; 0x04
	dx->usart->CTRLA = CTRLA_RXON_TXON;			   // enable tx and rx IRQs
    644e:	17 96       	adiw	r26, 0x07	; 7
    6450:	ed 91       	ld	r30, X+
    6452:	fc 91       	ld	r31, X
    6454:	18 97       	sbiw	r26, 0x08	; 8
    6456:	81 e2       	ldi	r24, 0x21	; 33
    6458:	83 83       	std	Z+3, r24	; 0x03

	dx->port->DIRCLR = dirclr;
    645a:	19 96       	adiw	r26, 0x09	; 9
    645c:	ed 91       	ld	r30, X+
    645e:	fc 91       	ld	r31, X
    6460:	1a 97       	sbiw	r26, 0x0a	; 10
    6462:	e2 82       	std	Z+2, r14	; 0x02
	dx->port->DIRSET = dirset;
    6464:	19 96       	adiw	r26, 0x09	; 9
    6466:	ed 91       	ld	r30, X+
    6468:	fc 91       	ld	r31, X
    646a:	1a 97       	sbiw	r26, 0x0a	; 10
    646c:	91 82       	std	Z+1, r9	; 0x01
	dx->port->OUTCLR = outclr;
    646e:	19 96       	adiw	r26, 0x09	; 9
    6470:	ed 91       	ld	r30, X+
    6472:	fc 91       	ld	r31, X
    6474:	1a 97       	sbiw	r26, 0x0a	; 10
    6476:	a6 82       	std	Z+6, r10	; 0x06
	dx->port->OUTSET = outset;
    6478:	19 96       	adiw	r26, 0x09	; 9
    647a:	ed 91       	ld	r30, X+
    647c:	fc 91       	ld	r31, X
    647e:	1a 97       	sbiw	r26, 0x0a	; 10
    6480:	85 82       	std	Z+5, r8	; 0x05
}
    6482:	cf 91       	pop	r28
    6484:	df 91       	pop	r29
    6486:	1f 91       	pop	r17
    6488:	0f 91       	pop	r16
    648a:	ff 90       	pop	r15
    648c:	ef 90       	pop	r14
    648e:	df 90       	pop	r13
    6490:	cf 90       	pop	r12
    6492:	bf 90       	pop	r11
    6494:	af 90       	pop	r10
    6496:	9f 90       	pop	r9
    6498:	8f 90       	pop	r8
    649a:	08 95       	ret

0000649c <xio_open_usb>:
 */

struct __file * xio_open_usb()
{
	return(USB.fdev);
}
    649c:	80 91 2f 25 	lds	r24, 0x252F
    64a0:	90 91 30 25 	lds	r25, 0x2530
    64a4:	08 95       	ret

000064a6 <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)	//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    64a6:	1f 92       	push	r1
    64a8:	0f 92       	push	r0
    64aa:	0f b6       	in	r0, 0x3f	; 63
    64ac:	0f 92       	push	r0
    64ae:	0b b6       	in	r0, 0x3b	; 59
    64b0:	0f 92       	push	r0
    64b2:	11 24       	eor	r1, r1
    64b4:	8f 93       	push	r24
    64b6:	9f 93       	push	r25
    64b8:	af 93       	push	r26
    64ba:	bf 93       	push	r27
    64bc:	ef 93       	push	r30
    64be:	ff 93       	push	r31
	if (USBu.tx_buf_head == USBu.tx_buf_tail) {	// buffer empty - disable ints
    64c0:	90 91 e2 23 	lds	r25, 0x23E2
    64c4:	80 91 e1 23 	lds	r24, 0x23E1
    64c8:	98 17       	cp	r25, r24
    64ca:	39 f4       	brne	.+14     	; 0x64da <__vector_26+0x34>
		USBu.usart->CTRLA = CTRLA_RXON_TXOFF;	// won't work if you just &= it
    64cc:	e0 91 e4 23 	lds	r30, 0x23E4
    64d0:	f0 91 e5 23 	lds	r31, 0x23E5
    64d4:	80 e2       	ldi	r24, 0x20	; 32
    64d6:	83 83       	std	Z+3, r24	; 0x03
    64d8:	1d c0       	rjmp	.+58     	; 0x6514 <__vector_26+0x6e>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(USB.flags)) {
    64da:	80 91 1c 25 	lds	r24, 0x251C
    64de:	90 91 1d 25 	lds	r25, 0x251D
    64e2:	93 fd       	sbrc	r25, 3
    64e4:	17 c0       	rjmp	.+46     	; 0x6514 <__vector_26+0x6e>
		if (--(USBu.tx_buf_tail) == 0) {		// advance tail and wrap 
    64e6:	80 91 e1 23 	lds	r24, 0x23E1
    64ea:	81 50       	subi	r24, 0x01	; 1
    64ec:	80 93 e1 23 	sts	0x23E1, r24
    64f0:	80 91 e1 23 	lds	r24, 0x23E1
    64f4:	88 23       	and	r24, r24
    64f6:	19 f4       	brne	.+6      	; 0x64fe <__vector_26+0x58>
			USBu.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one err (OBOE)
    64f8:	8f e3       	ldi	r24, 0x3F	; 63
    64fa:	80 93 e1 23 	sts	0x23E1, r24
		}
		USBu.usart->DATA = USBu.tx_buf[USBu.tx_buf_tail]; // write to TX DATA reg
    64fe:	e0 91 e4 23 	lds	r30, 0x23E4
    6502:	f0 91 e5 23 	lds	r31, 0x23E5
    6506:	a0 91 e1 23 	lds	r26, 0x23E1
    650a:	b0 e0       	ldi	r27, 0x00	; 0
    650c:	a8 5d       	subi	r26, 0xD8	; 216
    650e:	bb 4d       	sbci	r27, 0xDB	; 219
    6510:	8c 91       	ld	r24, X
    6512:	80 83       	st	Z, r24
	}
}
    6514:	ff 91       	pop	r31
    6516:	ef 91       	pop	r30
    6518:	bf 91       	pop	r27
    651a:	af 91       	pop	r26
    651c:	9f 91       	pop	r25
    651e:	8f 91       	pop	r24
    6520:	0f 90       	pop	r0
    6522:	0b be       	out	0x3b, r0	; 59
    6524:	0f 90       	pop	r0
    6526:	0f be       	out	0x3f, r0	; 63
    6528:	0f 90       	pop	r0
    652a:	1f 90       	pop	r1
    652c:	18 95       	reti

0000652e <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular buffers work
 */

ISR(USB_RX_ISR_vect)	//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    652e:	1f 92       	push	r1
    6530:	0f 92       	push	r0
    6532:	0f b6       	in	r0, 0x3f	; 63
    6534:	0f 92       	push	r0
    6536:	0b b6       	in	r0, 0x3b	; 59
    6538:	0f 92       	push	r0
    653a:	11 24       	eor	r1, r1
    653c:	2f 93       	push	r18
    653e:	3f 93       	push	r19
    6540:	4f 93       	push	r20
    6542:	5f 93       	push	r21
    6544:	6f 93       	push	r22
    6546:	7f 93       	push	r23
    6548:	8f 93       	push	r24
    654a:	9f 93       	push	r25
    654c:	af 93       	push	r26
    654e:	bf 93       	push	r27
    6550:	ef 93       	push	r30
    6552:	ff 93       	push	r31
	uint8_t c = USBu.usart->DATA;				// can only read DATA once
    6554:	e0 91 e4 23 	lds	r30, 0x23E4
    6558:	f0 91 e5 23 	lds	r31, 0x23E5
    655c:	20 81       	ld	r18, Z

	// trap signals - do not insert character into RX queue
	if (c == ETX) {								// trap ^c signal
    655e:	23 30       	cpi	r18, 0x03	; 3
    6560:	31 f4       	brne	.+12     	; 0x656e <__vector_25+0x40>
		USB.sig = XIO_SIG_KILL;					// set signal value
    6562:	84 e0       	ldi	r24, 0x04	; 4
    6564:	80 93 1f 25 	sts	0x251F, r24
		signal_etx();							// call app-specific signal handler
    6568:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <signal_etx>
    656c:	25 c0       	rjmp	.+74     	; 0x65b8 <__vector_25+0x8a>
		return;
	}

	// normal character path
	if ((--USBu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    656e:	80 91 e0 23 	lds	r24, 0x23E0
    6572:	81 50       	subi	r24, 0x01	; 1
    6574:	80 93 e0 23 	sts	0x23E0, r24
    6578:	80 91 e0 23 	lds	r24, 0x23E0
    657c:	88 23       	and	r24, r24
    657e:	19 f4       	brne	.+6      	; 0x6586 <__vector_25+0x58>
		USBu.rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    6580:	8f e3       	ldi	r24, 0x3F	; 63
    6582:	80 93 e0 23 	sts	0x23E0, r24
	}
	if (USBu.rx_buf_head != USBu.rx_buf_tail) {	// write char unless buffer full
    6586:	90 91 e0 23 	lds	r25, 0x23E0
    658a:	80 91 df 23 	lds	r24, 0x23DF
    658e:	98 17       	cp	r25, r24
    6590:	39 f0       	breq	.+14     	; 0x65a0 <__vector_25+0x72>
		USBu.rx_buf[USBu.rx_buf_head] = c;
    6592:	e0 91 e0 23 	lds	r30, 0x23E0
    6596:	f0 e0       	ldi	r31, 0x00	; 0
    6598:	e8 51       	subi	r30, 0x18	; 24
    659a:	fc 4d       	sbci	r31, 0xDC	; 220
    659c:	20 83       	st	Z, r18
    659e:	0c c0       	rjmp	.+24     	; 0x65b8 <__vector_25+0x8a>
		return;
	}
	// buffer-full handling
	if ((++USBu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    65a0:	80 91 e0 23 	lds	r24, 0x23E0
    65a4:	8f 5f       	subi	r24, 0xFF	; 255
    65a6:	80 93 e0 23 	sts	0x23E0, r24
    65aa:	80 91 e0 23 	lds	r24, 0x23E0
    65ae:	80 34       	cpi	r24, 0x40	; 64
    65b0:	18 f0       	brcs	.+6      	; 0x65b8 <__vector_25+0x8a>
		USBu.rx_buf_head = 1;
    65b2:	81 e0       	ldi	r24, 0x01	; 1
    65b4:	80 93 e0 23 	sts	0x23E0, r24
	}
	// activate flow control here or before it gets to this level
}
    65b8:	ff 91       	pop	r31
    65ba:	ef 91       	pop	r30
    65bc:	bf 91       	pop	r27
    65be:	af 91       	pop	r26
    65c0:	9f 91       	pop	r25
    65c2:	8f 91       	pop	r24
    65c4:	7f 91       	pop	r23
    65c6:	6f 91       	pop	r22
    65c8:	5f 91       	pop	r21
    65ca:	4f 91       	pop	r20
    65cc:	3f 91       	pop	r19
    65ce:	2f 91       	pop	r18
    65d0:	0f 90       	pop	r0
    65d2:	0b be       	out	0x3b, r0	; 59
    65d4:	0f 90       	pop	r0
    65d6:	0f be       	out	0x3f, r0	; 63
    65d8:	0f 90       	pop	r0
    65da:	1f 90       	pop	r1
    65dc:	18 95       	reti

000065de <xio_queue_RX_string_usb>:
/*
 * xio_queue_RX_string_usb() - fake ISR to put a string in the RX buffer
 */

void xio_queue_RX_string_usb(const char *buf)
{
    65de:	bc 01       	movw	r22, r24
	xio_queue_RX_string_usart(XIO_DEV_USB, buf);
    65e0:	81 e0       	ldi	r24, 0x01	; 1
    65e2:	0e 94 a2 31 	call	0x6344	; 0x6344 <xio_queue_RX_string_usart>
}
    65e6:	08 95       	ret

000065e8 <xio_queue_RX_char_usb>:
/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_queue_RX_char_usb(const char c)
{
    65e8:	68 2f       	mov	r22, r24
	xio_queue_RX_char_usart(XIO_DEV_USB, c);
    65ea:	81 e0       	ldi	r24, 0x01	; 1
    65ec:	0e 94 72 31 	call	0x62e4	; 0x62e4 <xio_queue_RX_char_usart>
}
    65f0:	08 95       	ret

000065f2 <xio_readln_usb>:
/*
 * xio_readln_usb() - non-block line reader for USB device (calls USART generic)
 */

int xio_readln_usb(char *buf, const uint8_t size)
{
    65f2:	9c 01       	movw	r18, r24
    65f4:	46 2f       	mov	r20, r22
	return xio_readln_usart(XIO_DEV_USB, buf, size);
    65f6:	81 e0       	ldi	r24, 0x01	; 1
    65f8:	b9 01       	movw	r22, r18
    65fa:	0e 94 5d 30 	call	0x60ba	; 0x60ba <xio_readln_usart>
}
    65fe:	08 95       	ret

00006600 <xio_getc_usb>:
/*
 *  xio_getc_usb() - stdio compatible char reader for USB device
 */

int xio_getc_usb(FILE *stream)
{
    6600:	bc 01       	movw	r22, r24
	return xio_getc_usart(XIO_DEV_USB, stream);
    6602:	81 e0       	ldi	r24, 0x01	; 1
    6604:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <xio_getc_usart>
}
    6608:	08 95       	ret

0000660a <xio_putc_usb>:
/*
 *  xio_putc_usb() - stdio compatible char writer for USB device
 */

int xio_putc_usb(const char c, FILE *stream)
{
    660a:	98 2f       	mov	r25, r24
    660c:	ab 01       	movw	r20, r22
	return xio_putc_usart(XIO_DEV_USB, c, stream);
    660e:	81 e0       	ldi	r24, 0x01	; 1
    6610:	69 2f       	mov	r22, r25
    6612:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <xio_putc_usart>
}
    6616:	08 95       	ret

00006618 <xio_setflags_usb>:
/*
 *	xio_setflags_usb() - check and set control flags for device
 */

int xio_setflags_usb(const uint16_t control)
{
    6618:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_USB, control);
    661a:	81 e0       	ldi	r24, 0x01	; 1
    661c:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <xio_setflags>
	return (XIO_OK);									// for now it's always OK
}
    6620:	80 e0       	ldi	r24, 0x00	; 0
    6622:	90 e0       	ldi	r25, 0x00	; 0
    6624:	08 95       	ret

00006626 <xio_open_rs485>:
 */

struct __file * xio_open_rs485()
{
	return(RS.fdev);
}
    6626:	80 91 18 25 	lds	r24, 0x2518
    662a:	90 91 19 25 	lds	r25, 0x2519
    662e:	08 95       	ret

00006630 <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC0 data register empty
{
    6630:	1f 92       	push	r1
    6632:	0f 92       	push	r0
    6634:	0f b6       	in	r0, 0x3f	; 63
    6636:	0f 92       	push	r0
    6638:	0b b6       	in	r0, 0x3b	; 59
    663a:	0f 92       	push	r0
    663c:	11 24       	eor	r1, r1
    663e:	8f 93       	push	r24
    6640:	9f 93       	push	r25
    6642:	af 93       	push	r26
    6644:	bf 93       	push	r27
    6646:	ef 93       	push	r30
    6648:	ff 93       	push	r31
	if (RSu.tx_buf_head == RSu.tx_buf_tail) {	// buffer empty - disable ints
    664a:	90 91 57 23 	lds	r25, 0x2357
    664e:	80 91 56 23 	lds	r24, 0x2356
    6652:	98 17       	cp	r25, r24
    6654:	39 f4       	brne	.+14     	; 0x6664 <__vector_29+0x34>
		RSu.usart->CTRLA = CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    6656:	e0 91 59 23 	lds	r30, 0x2359
    665a:	f0 91 5a 23 	lds	r31, 0x235A
    665e:	80 e2       	ldi	r24, 0x20	; 32
    6660:	83 83       	std	Z+3, r24	; 0x03
    6662:	1d c0       	rjmp	.+58     	; 0x669e <__vector_29+0x6e>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(RS.flags)) {
    6664:	80 91 05 25 	lds	r24, 0x2505
    6668:	90 91 06 25 	lds	r25, 0x2506
    666c:	93 fd       	sbrc	r25, 3
    666e:	17 c0       	rjmp	.+46     	; 0x669e <__vector_29+0x6e>
		if (--(RSu.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    6670:	80 91 56 23 	lds	r24, 0x2356
    6674:	81 50       	subi	r24, 0x01	; 1
    6676:	80 93 56 23 	sts	0x2356, r24
    667a:	80 91 56 23 	lds	r24, 0x2356
    667e:	88 23       	and	r24, r24
    6680:	19 f4       	brne	.+6      	; 0x6688 <__vector_29+0x58>
			RSu.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6682:	8f e3       	ldi	r24, 0x3F	; 63
    6684:	80 93 56 23 	sts	0x2356, r24
		}
		RSu.usart->DATA = RSu.tx_buf[RSu.tx_buf_tail];	// write char to TX DATA reg
    6688:	e0 91 59 23 	lds	r30, 0x2359
    668c:	f0 91 5a 23 	lds	r31, 0x235A
    6690:	a0 91 56 23 	lds	r26, 0x2356
    6694:	b0 e0       	ldi	r27, 0x00	; 0
    6696:	a3 56       	subi	r26, 0x63	; 99
    6698:	bc 4d       	sbci	r27, 0xDC	; 220
    669a:	8c 91       	ld	r24, X
    669c:	80 83       	st	Z, r24
	}
}
    669e:	ff 91       	pop	r31
    66a0:	ef 91       	pop	r30
    66a2:	bf 91       	pop	r27
    66a4:	af 91       	pop	r26
    66a6:	9f 91       	pop	r25
    66a8:	8f 91       	pop	r24
    66aa:	0f 90       	pop	r0
    66ac:	0b be       	out	0x3b, r0	; 59
    66ae:	0f 90       	pop	r0
    66b0:	0f be       	out	0x3f, r0	; 63
    66b2:	0f 90       	pop	r0
    66b4:	1f 90       	pop	r1
    66b6:	18 95       	reti

000066b8 <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)	//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    66b8:	1f 92       	push	r1
    66ba:	0f 92       	push	r0
    66bc:	0f b6       	in	r0, 0x3f	; 63
    66be:	0f 92       	push	r0
    66c0:	0b b6       	in	r0, 0x3b	; 59
    66c2:	0f 92       	push	r0
    66c4:	11 24       	eor	r1, r1
    66c6:	2f 93       	push	r18
    66c8:	3f 93       	push	r19
    66ca:	4f 93       	push	r20
    66cc:	5f 93       	push	r21
    66ce:	6f 93       	push	r22
    66d0:	7f 93       	push	r23
    66d2:	8f 93       	push	r24
    66d4:	9f 93       	push	r25
    66d6:	af 93       	push	r26
    66d8:	bf 93       	push	r27
    66da:	ef 93       	push	r30
    66dc:	ff 93       	push	r31
	uint8_t c = RSu.usart->DATA;				// can only read DATA once
    66de:	e0 91 59 23 	lds	r30, 0x2359
    66e2:	f0 91 5a 23 	lds	r31, 0x235A
    66e6:	20 81       	ld	r18, Z

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    66e8:	23 30       	cpi	r18, 0x03	; 3
    66ea:	31 f4       	brne	.+12     	; 0x66f8 <__vector_28+0x40>
		RS.sig = XIO_SIG_KILL;					// set signal value
    66ec:	84 e0       	ldi	r24, 0x04	; 4
    66ee:	80 93 08 25 	sts	0x2508, r24
		signal_etx();							// call app-specific signal handler
    66f2:	0e 94 bf 2e 	call	0x5d7e	; 0x5d7e <signal_etx>
    66f6:	25 c0       	rjmp	.+74     	; 0x6742 <__vector_28+0x8a>
		return;
	}

	// normal path
	if ((--RSu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    66f8:	80 91 55 23 	lds	r24, 0x2355
    66fc:	81 50       	subi	r24, 0x01	; 1
    66fe:	80 93 55 23 	sts	0x2355, r24
    6702:	80 91 55 23 	lds	r24, 0x2355
    6706:	88 23       	and	r24, r24
    6708:	19 f4       	brne	.+6      	; 0x6710 <__vector_28+0x58>
		RSu.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    670a:	8f e3       	ldi	r24, 0x3F	; 63
    670c:	80 93 55 23 	sts	0x2355, r24
	}
	if (RSu.rx_buf_head != RSu.rx_buf_tail) {	// write char unless buffer full
    6710:	90 91 55 23 	lds	r25, 0x2355
    6714:	80 91 54 23 	lds	r24, 0x2354
    6718:	98 17       	cp	r25, r24
    671a:	39 f0       	breq	.+14     	; 0x672a <__vector_28+0x72>
		RSu.rx_buf[RSu.rx_buf_head] = c;		// (= USARTC0.DATA;)
    671c:	e0 91 55 23 	lds	r30, 0x2355
    6720:	f0 e0       	ldi	r31, 0x00	; 0
    6722:	ee 5a       	subi	r30, 0xAE	; 174
    6724:	fc 4d       	sbci	r31, 0xDC	; 220
    6726:	23 87       	std	Z+11, r18	; 0x0b
    6728:	0c c0       	rjmp	.+24     	; 0x6742 <__vector_28+0x8a>
		return;
	}
	// buffer-full handling
	if ((++RSu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    672a:	80 91 55 23 	lds	r24, 0x2355
    672e:	8f 5f       	subi	r24, 0xFF	; 255
    6730:	80 93 55 23 	sts	0x2355, r24
    6734:	80 91 55 23 	lds	r24, 0x2355
    6738:	80 34       	cpi	r24, 0x40	; 64
    673a:	18 f0       	brcs	.+6      	; 0x6742 <__vector_28+0x8a>
		RSu.rx_buf_head = 1;
    673c:	81 e0       	ldi	r24, 0x01	; 1
    673e:	80 93 55 23 	sts	0x2355, r24
	}
	// activate flow control here or before it gets to this level
}
    6742:	ff 91       	pop	r31
    6744:	ef 91       	pop	r30
    6746:	bf 91       	pop	r27
    6748:	af 91       	pop	r26
    674a:	9f 91       	pop	r25
    674c:	8f 91       	pop	r24
    674e:	7f 91       	pop	r23
    6750:	6f 91       	pop	r22
    6752:	5f 91       	pop	r21
    6754:	4f 91       	pop	r20
    6756:	3f 91       	pop	r19
    6758:	2f 91       	pop	r18
    675a:	0f 90       	pop	r0
    675c:	0b be       	out	0x3b, r0	; 59
    675e:	0f 90       	pop	r0
    6760:	0f be       	out	0x3f, r0	; 63
    6762:	0f 90       	pop	r0
    6764:	1f 90       	pop	r1
    6766:	18 95       	reti

00006768 <xio_queue_RX_string_rs485>:
/*
 * xio_queue_RX_string_rs485() - fake ISR to put a string in the RX buffer
 */

void xio_queue_RX_string_rs485(const char *buf)
{
    6768:	bc 01       	movw	r22, r24
	xio_queue_RX_string_usart(XIO_DEV_RS485, buf);
    676a:	80 e0       	ldi	r24, 0x00	; 0
    676c:	0e 94 a2 31 	call	0x6344	; 0x6344 <xio_queue_RX_string_usart>
}
    6770:	08 95       	ret

00006772 <xio_queue_RX_char_rs485>:
/*
 * xio_rs485_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_queue_RX_char_rs485(const char c)
{
    6772:	68 2f       	mov	r22, r24
	xio_queue_RX_char_usart(XIO_DEV_RS485, c);
    6774:	80 e0       	ldi	r24, 0x00	; 0
    6776:	0e 94 72 31 	call	0x62e4	; 0x62e4 <xio_queue_RX_char_usart>
}
    677a:	08 95       	ret

0000677c <xio_readln_rs485>:
/*
 * xio_readln_rs485() - non-blocking line reader for RS485 device
 */

int xio_readln_rs485(char *buf, const uint8_t size)
{
    677c:	9c 01       	movw	r18, r24
    677e:	46 2f       	mov	r20, r22
	return xio_readln_usart(XIO_DEV_RS485, buf, size);
    6780:	80 e0       	ldi	r24, 0x00	; 0
    6782:	b9 01       	movw	r22, r18
    6784:	0e 94 5d 30 	call	0x60ba	; 0x60ba <xio_readln_usart>
}
    6788:	08 95       	ret

0000678a <xio_getc_rs485>:
/*
 *  xio_getc_rs485() - stdio compatible char reader for RS485 device
 */

int xio_getc_rs485(FILE *stream)
{
    678a:	bc 01       	movw	r22, r24
	return xio_getc_usart(XIO_DEV_RS485, stream);
    678c:	80 e0       	ldi	r24, 0x00	; 0
    678e:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <xio_getc_usart>
}
    6792:	08 95       	ret

00006794 <xio_putc_rs485>:
/*
 *  xio_putc_rs485() - stdio compatible char writer for RS485 device
 */

int xio_putc_rs485(const char c, FILE *stream)
{
    6794:	98 2f       	mov	r25, r24
    6796:	ab 01       	movw	r20, r22
	return xio_putc_usart(XIO_DEV_RS485, c, stream);
    6798:	80 e0       	ldi	r24, 0x00	; 0
    679a:	69 2f       	mov	r22, r25
    679c:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <xio_putc_usart>
}
    67a0:	08 95       	ret

000067a2 <xio_setflags_rs485>:
/*
 *	xio_setflags_rs485() - check and set control flags for RS485 device
 */

int xio_setflags_rs485(const uint16_t control)
{
    67a2:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_RS485, control);
    67a4:	80 e0       	ldi	r24, 0x00	; 0
    67a6:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <xio_setflags>
	return (XIO_OK);									// for now it's always OK
}
    67aa:	80 e0       	ldi	r24, 0x00	; 0
    67ac:	90 e0       	ldi	r25, 0x00	; 0
    67ae:	08 95       	ret

000067b0 <xio_open_pgm>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

struct __file * xio_open_pgm(const prog_char *addr)
{
	PGM.flags &= XIO_FLAG_RESET_gm;			// reset flag signaling bits
    67b0:	20 91 4a 25 	lds	r18, 0x254A
    67b4:	30 91 4b 25 	lds	r19, 0x254B
    67b8:	3f 70       	andi	r19, 0x0F	; 15
    67ba:	20 93 4a 25 	sts	0x254A, r18
    67be:	30 93 4b 25 	sts	0x254B, r19
	PGM.sig = 0;							// reset signal
    67c2:	10 92 4d 25 	sts	0x254D, r1
	PGMf.pgmbase_P = (PROGMEM char *)addr;	// might want to range check this
    67c6:	80 93 f7 24 	sts	0x24F7, r24
    67ca:	90 93 f8 24 	sts	0x24F8, r25
	PGMf.len = 0;							// initialize buffer pointer
    67ce:	10 92 f5 24 	sts	0x24F5, r1
    67d2:	10 92 f6 24 	sts	0x24F6, r1
	return(PGM.fdev);							// return pointer to the fdev stream
}
    67d6:	80 91 5d 25 	lds	r24, 0x255D
    67da:	90 91 5e 25 	lds	r25, 0x255E
    67de:	08 95       	ret

000067e0 <xio_putc_pgm>:
 */

int xio_putc_pgm(const char c, struct __file *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    67e0:	8f ef       	ldi	r24, 0xFF	; 255
    67e2:	9f ef       	ldi	r25, 0xFF	; 255
    67e4:	08 95       	ret

000067e6 <xio_readln_pgm>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_pgm(char *buf, const uint8_t size)
{
    67e6:	9c 01       	movw	r18, r24
	if (!(PGMf.pgmbase_P)) {					// return error if no file is open
    67e8:	80 91 f7 24 	lds	r24, 0x24F7
    67ec:	90 91 f8 24 	lds	r25, 0x24F8
    67f0:	89 2b       	or	r24, r25
    67f2:	19 f4       	brne	.+6      	; 0x67fa <xio_readln_pgm+0x14>
    67f4:	26 e0       	ldi	r18, 0x06	; 6
    67f6:	30 e0       	ldi	r19, 0x00	; 0
    67f8:	1b c0       	rjmp	.+54     	; 0x6830 <xio_readln_pgm+0x4a>
		return (XIO_FILE_NOT_OPEN);
	}
	PGM.sig = XIO_SIG_OK;						// initialize signal
    67fa:	10 92 4d 25 	sts	0x254D, r1
	if (fgets(buf, size, PGM.fdev) == NULL) {
    67fe:	40 91 5d 25 	lds	r20, 0x255D
    6802:	50 91 5e 25 	lds	r21, 0x255E
    6806:	c9 01       	movw	r24, r18
    6808:	70 e0       	ldi	r23, 0x00	; 0
    680a:	0e 94 f1 46 	call	0x8de2	; 0x8de2 <fgets>
    680e:	89 2b       	or	r24, r25
    6810:	19 f0       	breq	.+6      	; 0x6818 <xio_readln_pgm+0x32>
    6812:	20 e0       	ldi	r18, 0x00	; 0
    6814:	30 e0       	ldi	r19, 0x00	; 0
    6816:	0c c0       	rjmp	.+24     	; 0x6830 <xio_readln_pgm+0x4a>
		PGMf.pgmbase_P = NULL;
    6818:	10 92 f7 24 	sts	0x24F7, r1
    681c:	10 92 f8 24 	sts	0x24F8, r1
		clearerr(PGM.fdev);
    6820:	80 91 5d 25 	lds	r24, 0x255D
    6824:	90 91 5e 25 	lds	r25, 0x255E
    6828:	0e 94 ec 46 	call	0x8dd8	; 0x8dd8 <clearerr>
    682c:	25 e0       	ldi	r18, 0x05	; 5
    682e:	30 e0       	ldi	r19, 0x00	; 0
		return (XIO_EOF);
	}
	return (XIO_OK);
}
    6830:	c9 01       	movw	r24, r18
    6832:	08 95       	ret

00006834 <xio_getc_pgm>:
 */

int xio_getc_pgm(struct __file *stream)
{

	if (PGM.flags & XIO_FLAG_EOF_bm) {
    6834:	20 91 4a 25 	lds	r18, 0x254A
    6838:	30 91 4b 25 	lds	r19, 0x254B
    683c:	35 ff       	sbrs	r19, 5
    683e:	06 c0       	rjmp	.+12     	; 0x684c <xio_getc_pgm+0x18>
		PGM.sig = XIO_SIG_EOF;
    6840:	83 e0       	ldi	r24, 0x03	; 3
    6842:	80 93 4d 25 	sts	0x254D, r24
    6846:	2e ef       	ldi	r18, 0xFE	; 254
    6848:	3f ef       	ldi	r19, 0xFF	; 255
    684a:	3e c0       	rjmp	.+124    	; 0x68c8 <xio_getc_pgm+0x94>
		return (_FDEV_EOF);
	}
	if ((PGM.c = pgm_read_byte(&PGMf.pgmbase_P[PGMf.len])) == NUL) {
    684c:	80 91 f5 24 	lds	r24, 0x24F5
    6850:	90 91 f6 24 	lds	r25, 0x24F6
    6854:	e0 91 f7 24 	lds	r30, 0x24F7
    6858:	f0 91 f8 24 	lds	r31, 0x24F8
    685c:	e8 0f       	add	r30, r24
    685e:	f9 1f       	adc	r31, r25
    6860:	e4 91       	lpm	r30, Z+
    6862:	e0 93 4e 25 	sts	0x254E, r30
    6866:	ee 23       	and	r30, r30
    6868:	29 f4       	brne	.+10     	; 0x6874 <xio_getc_pgm+0x40>
		PGM.flags |= XIO_FLAG_EOF_bm;
    686a:	30 62       	ori	r19, 0x20	; 32
    686c:	20 93 4a 25 	sts	0x254A, r18
    6870:	30 93 4b 25 	sts	0x254B, r19
	}
	++PGMf.len;
    6874:	01 96       	adiw	r24, 0x01	; 1
    6876:	80 93 f5 24 	sts	0x24F5, r24
    687a:	90 93 f6 24 	sts	0x24F6, r25
	if (!LINEMODE(PGM.flags)) {			// processing is simple if not LINEMODE
    687e:	90 91 4a 25 	lds	r25, 0x254A
    6882:	96 fd       	sbrc	r25, 6
    6884:	03 c0       	rjmp	.+6      	; 0x688c <xio_getc_pgm+0x58>
		if (ECHO(PGM.flags)) {
    6886:	94 ff       	sbrs	r25, 4
    6888:	1b c0       	rjmp	.+54     	; 0x68c0 <xio_getc_pgm+0x8c>
    688a:	11 c0       	rjmp	.+34     	; 0x68ae <xio_getc_pgm+0x7a>
			putchar(PGM.c);
		}
		return (PGM.c);
	}
	// now do the LINEMODE stuff
	if (PGM.c == NUL) {					// perform newline substitutions
    688c:	80 91 4e 25 	lds	r24, 0x254E
    6890:	88 23       	and	r24, r24
    6892:	31 f0       	breq	.+12     	; 0x68a0 <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if (PGM.c == '\r') {
    6894:	8d 30       	cpi	r24, 0x0D	; 13
    6896:	21 f0       	breq	.+8      	; 0x68a0 <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if ((SEMICOLONS(PGM.flags)) && (PGM.c == ';')) {
    6898:	97 ff       	sbrs	r25, 7
    689a:	05 c0       	rjmp	.+10     	; 0x68a6 <xio_getc_pgm+0x72>
    689c:	8b 33       	cpi	r24, 0x3B	; 59
    689e:	19 f4       	brne	.+6      	; 0x68a6 <xio_getc_pgm+0x72>
		PGM.c = '\n';
    68a0:	8a e0       	ldi	r24, 0x0A	; 10
    68a2:	80 93 4e 25 	sts	0x254E, r24
	}
	if (ECHO(PGM.flags)) {
    68a6:	80 91 4a 25 	lds	r24, 0x254A
    68aa:	84 ff       	sbrs	r24, 4
    68ac:	09 c0       	rjmp	.+18     	; 0x68c0 <xio_getc_pgm+0x8c>
		putchar(PGM.c);
    68ae:	60 91 46 26 	lds	r22, 0x2646
    68b2:	70 91 47 26 	lds	r23, 0x2647
    68b6:	80 91 4e 25 	lds	r24, 0x254E
    68ba:	90 e0       	ldi	r25, 0x00	; 0
    68bc:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
	}
	return (PGM.c);
    68c0:	80 91 4e 25 	lds	r24, 0x254E
    68c4:	28 2f       	mov	r18, r24
    68c6:	30 e0       	ldi	r19, 0x00	; 0
}
    68c8:	c9 01       	movw	r24, r18
    68ca:	08 95       	ret

000068cc <xio_setflags_pgm>:
/*
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
    68cc:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_PGM, control);
    68ce:	83 e0       	ldi	r24, 0x03	; 3
    68d0:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <xio_setflags>
	return (XIO_OK);									// for now it's always OK
}
    68d4:	80 e0       	ldi	r24, 0x00	; 0
    68d6:	90 e0       	ldi	r25, 0x00	; 0
    68d8:	08 95       	ret

000068da <xio_init_pgm>:
 */

void xio_init_pgm(const uint8_t dev, const uint8_t offset, const uint16_t control)
{
	// bind file struct to extended device parameters
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
    68da:	90 e0       	ldi	r25, 0x00	; 0
    68dc:	27 e1       	ldi	r18, 0x17	; 23
    68de:	30 e0       	ldi	r19, 0x00	; 0
    68e0:	82 9f       	mul	r24, r18
    68e2:	f0 01       	movw	r30, r0
    68e4:	83 9f       	mul	r24, r19
    68e6:	f0 0d       	add	r31, r0
    68e8:	92 9f       	mul	r25, r18
    68ea:	f0 0d       	add	r31, r0
    68ec:	11 24       	eor	r1, r1
    68ee:	eb 5f       	subi	r30, 0xFB	; 251
    68f0:	fa 4d       	sbci	r31, 0xDA	; 218
    68f2:	86 e0       	ldi	r24, 0x06	; 6
    68f4:	68 9f       	mul	r22, r24
    68f6:	b0 01       	movw	r22, r0
    68f8:	11 24       	eor	r1, r1
    68fa:	6d 50       	subi	r22, 0x0D	; 13
    68fc:	7b 4d       	sbci	r23, 0xDB	; 219
    68fe:	61 8b       	std	Z+17, r22	; 0x11
    6900:	72 8b       	std	Z+18, r23	; 0x12
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
	xio_setflags(XIO_DEV_PGM, control);
    6902:	83 e0       	ldi	r24, 0x03	; 3
    6904:	ba 01       	movw	r22, r20
    6906:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <xio_setflags>
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
	// might be useful to sanity check the control bits before calling set flags
	//	- RD and BLOCK are mandatory
	// 	- WR and NOBLOCK are restricted
	xio_setflags_pgm(control);
}
    690a:	08 95       	ret

0000690c <__lshrdi3>:
    690c:	ef 92       	push	r14
    690e:	ff 92       	push	r15
    6910:	0f 93       	push	r16
    6912:	df 93       	push	r29
    6914:	cf 93       	push	r28
    6916:	cd b7       	in	r28, 0x3d	; 61
    6918:	de b7       	in	r29, 0x3e	; 62
    691a:	60 97       	sbiw	r28, 0x10	; 16
    691c:	cd bf       	out	0x3d, r28	; 61
    691e:	de bf       	out	0x3e, r29	; 62
    6920:	a8 2f       	mov	r26, r24
    6922:	00 23       	and	r16, r16
    6924:	09 f4       	brne	.+2      	; 0x6928 <__lshrdi3+0x1c>
    6926:	61 c0       	rjmp	.+194    	; 0x69ea <__lshrdi3+0xde>
    6928:	7e 01       	movw	r14, r28
    692a:	08 94       	sec
    692c:	e1 1c       	adc	r14, r1
    692e:	f1 1c       	adc	r15, r1
    6930:	88 e0       	ldi	r24, 0x08	; 8
    6932:	f7 01       	movw	r30, r14
    6934:	11 92       	st	Z+, r1
    6936:	8a 95       	dec	r24
    6938:	e9 f7       	brne	.-6      	; 0x6934 <__lshrdi3+0x28>
    693a:	29 83       	std	Y+1, r18	; 0x01
    693c:	3a 83       	std	Y+2, r19	; 0x02
    693e:	4b 83       	std	Y+3, r20	; 0x03
    6940:	5c 83       	std	Y+4, r21	; 0x04
    6942:	6d 83       	std	Y+5, r22	; 0x05
    6944:	7e 83       	std	Y+6, r23	; 0x06
    6946:	af 83       	std	Y+7, r26	; 0x07
    6948:	98 87       	std	Y+8, r25	; 0x08
    694a:	80 e2       	ldi	r24, 0x20	; 32
    694c:	80 1b       	sub	r24, r16
    694e:	e8 2f       	mov	r30, r24
    6950:	ff 27       	eor	r31, r31
    6952:	e7 fd       	sbrc	r30, 7
    6954:	f0 95       	com	r31
    6956:	4d 81       	ldd	r20, Y+5	; 0x05
    6958:	5e 81       	ldd	r21, Y+6	; 0x06
    695a:	6f 81       	ldd	r22, Y+7	; 0x07
    695c:	78 85       	ldd	r23, Y+8	; 0x08
    695e:	18 16       	cp	r1, r24
    6960:	84 f0       	brlt	.+32     	; 0x6982 <__lshrdi3+0x76>
    6962:	1d 86       	std	Y+13, r1	; 0x0d
    6964:	1e 86       	std	Y+14, r1	; 0x0e
    6966:	1f 86       	std	Y+15, r1	; 0x0f
    6968:	18 8a       	std	Y+16, r1	; 0x10
    696a:	88 27       	eor	r24, r24
    696c:	99 27       	eor	r25, r25
    696e:	8e 1b       	sub	r24, r30
    6970:	9f 0b       	sbc	r25, r31
    6972:	04 c0       	rjmp	.+8      	; 0x697c <__lshrdi3+0x70>
    6974:	76 95       	lsr	r23
    6976:	67 95       	ror	r22
    6978:	57 95       	ror	r21
    697a:	47 95       	ror	r20
    697c:	8a 95       	dec	r24
    697e:	d2 f7       	brpl	.-12     	; 0x6974 <__lshrdi3+0x68>
    6980:	28 c0       	rjmp	.+80     	; 0x69d2 <__lshrdi3+0xc6>
    6982:	20 2f       	mov	r18, r16
    6984:	33 27       	eor	r19, r19
    6986:	27 fd       	sbrc	r18, 7
    6988:	30 95       	com	r19
    698a:	db 01       	movw	r26, r22
    698c:	ca 01       	movw	r24, r20
    698e:	02 2e       	mov	r0, r18
    6990:	04 c0       	rjmp	.+8      	; 0x699a <__lshrdi3+0x8e>
    6992:	b6 95       	lsr	r27
    6994:	a7 95       	ror	r26
    6996:	97 95       	ror	r25
    6998:	87 95       	ror	r24
    699a:	0a 94       	dec	r0
    699c:	d2 f7       	brpl	.-12     	; 0x6992 <__lshrdi3+0x86>
    699e:	8d 87       	std	Y+13, r24	; 0x0d
    69a0:	9e 87       	std	Y+14, r25	; 0x0e
    69a2:	af 87       	std	Y+15, r26	; 0x0f
    69a4:	b8 8b       	std	Y+16, r27	; 0x10
    69a6:	04 c0       	rjmp	.+8      	; 0x69b0 <__lshrdi3+0xa4>
    69a8:	44 0f       	add	r20, r20
    69aa:	55 1f       	adc	r21, r21
    69ac:	66 1f       	adc	r22, r22
    69ae:	77 1f       	adc	r23, r23
    69b0:	ea 95       	dec	r30
    69b2:	d2 f7       	brpl	.-12     	; 0x69a8 <__lshrdi3+0x9c>
    69b4:	89 81       	ldd	r24, Y+1	; 0x01
    69b6:	9a 81       	ldd	r25, Y+2	; 0x02
    69b8:	ab 81       	ldd	r26, Y+3	; 0x03
    69ba:	bc 81       	ldd	r27, Y+4	; 0x04
    69bc:	04 c0       	rjmp	.+8      	; 0x69c6 <__lshrdi3+0xba>
    69be:	b6 95       	lsr	r27
    69c0:	a7 95       	ror	r26
    69c2:	97 95       	ror	r25
    69c4:	87 95       	ror	r24
    69c6:	2a 95       	dec	r18
    69c8:	d2 f7       	brpl	.-12     	; 0x69be <__lshrdi3+0xb2>
    69ca:	48 2b       	or	r20, r24
    69cc:	59 2b       	or	r21, r25
    69ce:	6a 2b       	or	r22, r26
    69d0:	7b 2b       	or	r23, r27
    69d2:	49 87       	std	Y+9, r20	; 0x09
    69d4:	5a 87       	std	Y+10, r21	; 0x0a
    69d6:	6b 87       	std	Y+11, r22	; 0x0b
    69d8:	7c 87       	std	Y+12, r23	; 0x0c
    69da:	29 85       	ldd	r18, Y+9	; 0x09
    69dc:	3a 85       	ldd	r19, Y+10	; 0x0a
    69de:	4b 85       	ldd	r20, Y+11	; 0x0b
    69e0:	5c 85       	ldd	r21, Y+12	; 0x0c
    69e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    69e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    69e6:	af 85       	ldd	r26, Y+15	; 0x0f
    69e8:	98 89       	ldd	r25, Y+16	; 0x10
    69ea:	8a 2f       	mov	r24, r26
    69ec:	60 96       	adiw	r28, 0x10	; 16
    69ee:	cd bf       	out	0x3d, r28	; 61
    69f0:	de bf       	out	0x3e, r29	; 62
    69f2:	cf 91       	pop	r28
    69f4:	df 91       	pop	r29
    69f6:	0f 91       	pop	r16
    69f8:	ff 90       	pop	r15
    69fa:	ef 90       	pop	r14
    69fc:	08 95       	ret

000069fe <__ashldi3>:
    69fe:	ef 92       	push	r14
    6a00:	ff 92       	push	r15
    6a02:	0f 93       	push	r16
    6a04:	df 93       	push	r29
    6a06:	cf 93       	push	r28
    6a08:	cd b7       	in	r28, 0x3d	; 61
    6a0a:	de b7       	in	r29, 0x3e	; 62
    6a0c:	60 97       	sbiw	r28, 0x10	; 16
    6a0e:	cd bf       	out	0x3d, r28	; 61
    6a10:	de bf       	out	0x3e, r29	; 62
    6a12:	a8 2f       	mov	r26, r24
    6a14:	00 23       	and	r16, r16
    6a16:	09 f4       	brne	.+2      	; 0x6a1a <__ashldi3+0x1c>
    6a18:	61 c0       	rjmp	.+194    	; 0x6adc <__ashldi3+0xde>
    6a1a:	7e 01       	movw	r14, r28
    6a1c:	08 94       	sec
    6a1e:	e1 1c       	adc	r14, r1
    6a20:	f1 1c       	adc	r15, r1
    6a22:	88 e0       	ldi	r24, 0x08	; 8
    6a24:	f7 01       	movw	r30, r14
    6a26:	11 92       	st	Z+, r1
    6a28:	8a 95       	dec	r24
    6a2a:	e9 f7       	brne	.-6      	; 0x6a26 <__ashldi3+0x28>
    6a2c:	29 83       	std	Y+1, r18	; 0x01
    6a2e:	3a 83       	std	Y+2, r19	; 0x02
    6a30:	4b 83       	std	Y+3, r20	; 0x03
    6a32:	5c 83       	std	Y+4, r21	; 0x04
    6a34:	6d 83       	std	Y+5, r22	; 0x05
    6a36:	7e 83       	std	Y+6, r23	; 0x06
    6a38:	af 83       	std	Y+7, r26	; 0x07
    6a3a:	98 87       	std	Y+8, r25	; 0x08
    6a3c:	80 e2       	ldi	r24, 0x20	; 32
    6a3e:	80 1b       	sub	r24, r16
    6a40:	e8 2f       	mov	r30, r24
    6a42:	ff 27       	eor	r31, r31
    6a44:	e7 fd       	sbrc	r30, 7
    6a46:	f0 95       	com	r31
    6a48:	49 81       	ldd	r20, Y+1	; 0x01
    6a4a:	5a 81       	ldd	r21, Y+2	; 0x02
    6a4c:	6b 81       	ldd	r22, Y+3	; 0x03
    6a4e:	7c 81       	ldd	r23, Y+4	; 0x04
    6a50:	18 16       	cp	r1, r24
    6a52:	84 f0       	brlt	.+32     	; 0x6a74 <__ashldi3+0x76>
    6a54:	19 86       	std	Y+9, r1	; 0x09
    6a56:	1a 86       	std	Y+10, r1	; 0x0a
    6a58:	1b 86       	std	Y+11, r1	; 0x0b
    6a5a:	1c 86       	std	Y+12, r1	; 0x0c
    6a5c:	88 27       	eor	r24, r24
    6a5e:	99 27       	eor	r25, r25
    6a60:	8e 1b       	sub	r24, r30
    6a62:	9f 0b       	sbc	r25, r31
    6a64:	04 c0       	rjmp	.+8      	; 0x6a6e <__ashldi3+0x70>
    6a66:	44 0f       	add	r20, r20
    6a68:	55 1f       	adc	r21, r21
    6a6a:	66 1f       	adc	r22, r22
    6a6c:	77 1f       	adc	r23, r23
    6a6e:	8a 95       	dec	r24
    6a70:	d2 f7       	brpl	.-12     	; 0x6a66 <__ashldi3+0x68>
    6a72:	28 c0       	rjmp	.+80     	; 0x6ac4 <__ashldi3+0xc6>
    6a74:	20 2f       	mov	r18, r16
    6a76:	33 27       	eor	r19, r19
    6a78:	27 fd       	sbrc	r18, 7
    6a7a:	30 95       	com	r19
    6a7c:	db 01       	movw	r26, r22
    6a7e:	ca 01       	movw	r24, r20
    6a80:	02 2e       	mov	r0, r18
    6a82:	04 c0       	rjmp	.+8      	; 0x6a8c <__ashldi3+0x8e>
    6a84:	88 0f       	add	r24, r24
    6a86:	99 1f       	adc	r25, r25
    6a88:	aa 1f       	adc	r26, r26
    6a8a:	bb 1f       	adc	r27, r27
    6a8c:	0a 94       	dec	r0
    6a8e:	d2 f7       	brpl	.-12     	; 0x6a84 <__ashldi3+0x86>
    6a90:	89 87       	std	Y+9, r24	; 0x09
    6a92:	9a 87       	std	Y+10, r25	; 0x0a
    6a94:	ab 87       	std	Y+11, r26	; 0x0b
    6a96:	bc 87       	std	Y+12, r27	; 0x0c
    6a98:	04 c0       	rjmp	.+8      	; 0x6aa2 <__ashldi3+0xa4>
    6a9a:	76 95       	lsr	r23
    6a9c:	67 95       	ror	r22
    6a9e:	57 95       	ror	r21
    6aa0:	47 95       	ror	r20
    6aa2:	ea 95       	dec	r30
    6aa4:	d2 f7       	brpl	.-12     	; 0x6a9a <__ashldi3+0x9c>
    6aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    6aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    6aaa:	af 81       	ldd	r26, Y+7	; 0x07
    6aac:	b8 85       	ldd	r27, Y+8	; 0x08
    6aae:	04 c0       	rjmp	.+8      	; 0x6ab8 <__ashldi3+0xba>
    6ab0:	88 0f       	add	r24, r24
    6ab2:	99 1f       	adc	r25, r25
    6ab4:	aa 1f       	adc	r26, r26
    6ab6:	bb 1f       	adc	r27, r27
    6ab8:	2a 95       	dec	r18
    6aba:	d2 f7       	brpl	.-12     	; 0x6ab0 <__ashldi3+0xb2>
    6abc:	48 2b       	or	r20, r24
    6abe:	59 2b       	or	r21, r25
    6ac0:	6a 2b       	or	r22, r26
    6ac2:	7b 2b       	or	r23, r27
    6ac4:	4d 87       	std	Y+13, r20	; 0x0d
    6ac6:	5e 87       	std	Y+14, r21	; 0x0e
    6ac8:	6f 87       	std	Y+15, r22	; 0x0f
    6aca:	78 8b       	std	Y+16, r23	; 0x10
    6acc:	29 85       	ldd	r18, Y+9	; 0x09
    6ace:	3a 85       	ldd	r19, Y+10	; 0x0a
    6ad0:	4b 85       	ldd	r20, Y+11	; 0x0b
    6ad2:	5c 85       	ldd	r21, Y+12	; 0x0c
    6ad4:	6d 85       	ldd	r22, Y+13	; 0x0d
    6ad6:	7e 85       	ldd	r23, Y+14	; 0x0e
    6ad8:	af 85       	ldd	r26, Y+15	; 0x0f
    6ada:	98 89       	ldd	r25, Y+16	; 0x10
    6adc:	8a 2f       	mov	r24, r26
    6ade:	60 96       	adiw	r28, 0x10	; 16
    6ae0:	cd bf       	out	0x3d, r28	; 61
    6ae2:	de bf       	out	0x3e, r29	; 62
    6ae4:	cf 91       	pop	r28
    6ae6:	df 91       	pop	r29
    6ae8:	0f 91       	pop	r16
    6aea:	ff 90       	pop	r15
    6aec:	ef 90       	pop	r14
    6aee:	08 95       	ret

00006af0 <__udivdi3>:
    6af0:	ae e5       	ldi	r26, 0x5E	; 94
    6af2:	b0 e0       	ldi	r27, 0x00	; 0
    6af4:	ee e7       	ldi	r30, 0x7E	; 126
    6af6:	f5 e3       	ldi	r31, 0x35	; 53
    6af8:	0c 94 0b 44 	jmp	0x8816	; 0x8816 <__prologue_saves__>
    6afc:	a8 e0       	ldi	r26, 0x08	; 8
    6afe:	4e 01       	movw	r8, r28
    6b00:	08 94       	sec
    6b02:	81 1c       	adc	r8, r1
    6b04:	91 1c       	adc	r9, r1
    6b06:	f4 01       	movw	r30, r8
    6b08:	6a 2e       	mov	r6, r26
    6b0a:	11 92       	st	Z+, r1
    6b0c:	6a 94       	dec	r6
    6b0e:	e9 f7       	brne	.-6      	; 0x6b0a <__udivdi3+0x1a>
    6b10:	29 83       	std	Y+1, r18	; 0x01
    6b12:	3a 83       	std	Y+2, r19	; 0x02
    6b14:	4b 83       	std	Y+3, r20	; 0x03
    6b16:	5c 83       	std	Y+4, r21	; 0x04
    6b18:	6d 83       	std	Y+5, r22	; 0x05
    6b1a:	7e 83       	std	Y+6, r23	; 0x06
    6b1c:	8f 83       	std	Y+7, r24	; 0x07
    6b1e:	98 87       	std	Y+8, r25	; 0x08
    6b20:	ce 01       	movw	r24, r28
    6b22:	09 96       	adiw	r24, 0x09	; 9
    6b24:	fc 01       	movw	r30, r24
    6b26:	11 92       	st	Z+, r1
    6b28:	aa 95       	dec	r26
    6b2a:	e9 f7       	brne	.-6      	; 0x6b26 <__udivdi3+0x36>
    6b2c:	a9 86       	std	Y+9, r10	; 0x09
    6b2e:	ba 86       	std	Y+10, r11	; 0x0a
    6b30:	cb 86       	std	Y+11, r12	; 0x0b
    6b32:	dc 86       	std	Y+12, r13	; 0x0c
    6b34:	ed 86       	std	Y+13, r14	; 0x0d
    6b36:	fe 86       	std	Y+14, r15	; 0x0e
    6b38:	0f 87       	std	Y+15, r16	; 0x0f
    6b3a:	18 8b       	std	Y+16, r17	; 0x10
    6b3c:	29 84       	ldd	r2, Y+9	; 0x09
    6b3e:	3a 84       	ldd	r3, Y+10	; 0x0a
    6b40:	4b 84       	ldd	r4, Y+11	; 0x0b
    6b42:	5c 84       	ldd	r5, Y+12	; 0x0c
    6b44:	ed 84       	ldd	r14, Y+13	; 0x0d
    6b46:	fe 84       	ldd	r15, Y+14	; 0x0e
    6b48:	0f 85       	ldd	r16, Y+15	; 0x0f
    6b4a:	18 89       	ldd	r17, Y+16	; 0x10
    6b4c:	69 80       	ldd	r6, Y+1	; 0x01
    6b4e:	7a 80       	ldd	r7, Y+2	; 0x02
    6b50:	8b 80       	ldd	r8, Y+3	; 0x03
    6b52:	9c 80       	ldd	r9, Y+4	; 0x04
    6b54:	6d a6       	std	Y+45, r6	; 0x2d
    6b56:	7e a6       	std	Y+46, r7	; 0x2e
    6b58:	8f a6       	std	Y+47, r8	; 0x2f
    6b5a:	98 aa       	std	Y+48, r9	; 0x30
    6b5c:	6d 80       	ldd	r6, Y+5	; 0x05
    6b5e:	7e 80       	ldd	r7, Y+6	; 0x06
    6b60:	8f 80       	ldd	r8, Y+7	; 0x07
    6b62:	98 84       	ldd	r9, Y+8	; 0x08
    6b64:	e1 14       	cp	r14, r1
    6b66:	f1 04       	cpc	r15, r1
    6b68:	01 05       	cpc	r16, r1
    6b6a:	11 05       	cpc	r17, r1
    6b6c:	09 f0       	breq	.+2      	; 0x6b70 <__udivdi3+0x80>
    6b6e:	b3 c3       	rjmp	.+1894   	; 0x72d6 <__udivdi3+0x7e6>
    6b70:	62 14       	cp	r6, r2
    6b72:	73 04       	cpc	r7, r3
    6b74:	84 04       	cpc	r8, r4
    6b76:	95 04       	cpc	r9, r5
    6b78:	08 f0       	brcs	.+2      	; 0x6b7c <__udivdi3+0x8c>
    6b7a:	3d c1       	rjmp	.+634    	; 0x6df6 <__udivdi3+0x306>
    6b7c:	00 e0       	ldi	r16, 0x00	; 0
    6b7e:	20 16       	cp	r2, r16
    6b80:	00 e0       	ldi	r16, 0x00	; 0
    6b82:	30 06       	cpc	r3, r16
    6b84:	01 e0       	ldi	r16, 0x01	; 1
    6b86:	40 06       	cpc	r4, r16
    6b88:	00 e0       	ldi	r16, 0x00	; 0
    6b8a:	50 06       	cpc	r5, r16
    6b8c:	88 f4       	brcc	.+34     	; 0x6bb0 <__udivdi3+0xc0>
    6b8e:	1f ef       	ldi	r17, 0xFF	; 255
    6b90:	21 16       	cp	r2, r17
    6b92:	31 04       	cpc	r3, r1
    6b94:	41 04       	cpc	r4, r1
    6b96:	51 04       	cpc	r5, r1
    6b98:	39 f0       	breq	.+14     	; 0x6ba8 <__udivdi3+0xb8>
    6b9a:	30 f0       	brcs	.+12     	; 0x6ba8 <__udivdi3+0xb8>
    6b9c:	48 e0       	ldi	r20, 0x08	; 8
    6b9e:	e4 2e       	mov	r14, r20
    6ba0:	f1 2c       	mov	r15, r1
    6ba2:	01 2d       	mov	r16, r1
    6ba4:	11 2d       	mov	r17, r1
    6ba6:	18 c0       	rjmp	.+48     	; 0x6bd8 <__udivdi3+0xe8>
    6ba8:	ee 24       	eor	r14, r14
    6baa:	ff 24       	eor	r15, r15
    6bac:	87 01       	movw	r16, r14
    6bae:	14 c0       	rjmp	.+40     	; 0x6bd8 <__udivdi3+0xe8>
    6bb0:	20 e0       	ldi	r18, 0x00	; 0
    6bb2:	22 16       	cp	r2, r18
    6bb4:	20 e0       	ldi	r18, 0x00	; 0
    6bb6:	32 06       	cpc	r3, r18
    6bb8:	20 e0       	ldi	r18, 0x00	; 0
    6bba:	42 06       	cpc	r4, r18
    6bbc:	21 e0       	ldi	r18, 0x01	; 1
    6bbe:	52 06       	cpc	r5, r18
    6bc0:	30 f0       	brcs	.+12     	; 0x6bce <__udivdi3+0xde>
    6bc2:	38 e1       	ldi	r19, 0x18	; 24
    6bc4:	e3 2e       	mov	r14, r19
    6bc6:	f1 2c       	mov	r15, r1
    6bc8:	01 2d       	mov	r16, r1
    6bca:	11 2d       	mov	r17, r1
    6bcc:	05 c0       	rjmp	.+10     	; 0x6bd8 <__udivdi3+0xe8>
    6bce:	20 e1       	ldi	r18, 0x10	; 16
    6bd0:	e2 2e       	mov	r14, r18
    6bd2:	f1 2c       	mov	r15, r1
    6bd4:	01 2d       	mov	r16, r1
    6bd6:	11 2d       	mov	r17, r1
    6bd8:	d2 01       	movw	r26, r4
    6bda:	c1 01       	movw	r24, r2
    6bdc:	0e 2c       	mov	r0, r14
    6bde:	04 c0       	rjmp	.+8      	; 0x6be8 <__udivdi3+0xf8>
    6be0:	b6 95       	lsr	r27
    6be2:	a7 95       	ror	r26
    6be4:	97 95       	ror	r25
    6be6:	87 95       	ror	r24
    6be8:	0a 94       	dec	r0
    6bea:	d2 f7       	brpl	.-12     	; 0x6be0 <__udivdi3+0xf0>
    6bec:	83 5f       	subi	r24, 0xF3	; 243
    6bee:	9f 4d       	sbci	r25, 0xDF	; 223
    6bf0:	dc 01       	movw	r26, r24
    6bf2:	2c 91       	ld	r18, X
    6bf4:	80 e2       	ldi	r24, 0x20	; 32
    6bf6:	90 e0       	ldi	r25, 0x00	; 0
    6bf8:	a0 e0       	ldi	r26, 0x00	; 0
    6bfa:	b0 e0       	ldi	r27, 0x00	; 0
    6bfc:	8e 19       	sub	r24, r14
    6bfe:	9f 09       	sbc	r25, r15
    6c00:	a0 0b       	sbc	r26, r16
    6c02:	b1 0b       	sbc	r27, r17
    6c04:	7c 01       	movw	r14, r24
    6c06:	8d 01       	movw	r16, r26
    6c08:	e2 1a       	sub	r14, r18
    6c0a:	f1 08       	sbc	r15, r1
    6c0c:	01 09       	sbc	r16, r1
    6c0e:	11 09       	sbc	r17, r1
    6c10:	e1 14       	cp	r14, r1
    6c12:	f1 04       	cpc	r15, r1
    6c14:	01 05       	cpc	r16, r1
    6c16:	11 05       	cpc	r17, r1
    6c18:	a1 f1       	breq	.+104    	; 0x6c82 <__udivdi3+0x192>
    6c1a:	0e 2c       	mov	r0, r14
    6c1c:	04 c0       	rjmp	.+8      	; 0x6c26 <__udivdi3+0x136>
    6c1e:	22 0c       	add	r2, r2
    6c20:	33 1c       	adc	r3, r3
    6c22:	44 1c       	adc	r4, r4
    6c24:	55 1c       	adc	r5, r5
    6c26:	0a 94       	dec	r0
    6c28:	d2 f7       	brpl	.-12     	; 0x6c1e <__udivdi3+0x12e>
    6c2a:	a4 01       	movw	r20, r8
    6c2c:	93 01       	movw	r18, r6
    6c2e:	0e 2c       	mov	r0, r14
    6c30:	04 c0       	rjmp	.+8      	; 0x6c3a <__udivdi3+0x14a>
    6c32:	22 0f       	add	r18, r18
    6c34:	33 1f       	adc	r19, r19
    6c36:	44 1f       	adc	r20, r20
    6c38:	55 1f       	adc	r21, r21
    6c3a:	0a 94       	dec	r0
    6c3c:	d2 f7       	brpl	.-12     	; 0x6c32 <__udivdi3+0x142>
    6c3e:	80 e2       	ldi	r24, 0x20	; 32
    6c40:	90 e0       	ldi	r25, 0x00	; 0
    6c42:	8e 19       	sub	r24, r14
    6c44:	9f 09       	sbc	r25, r15
    6c46:	6d a4       	ldd	r6, Y+45	; 0x2d
    6c48:	7e a4       	ldd	r7, Y+46	; 0x2e
    6c4a:	8f a4       	ldd	r8, Y+47	; 0x2f
    6c4c:	98 a8       	ldd	r9, Y+48	; 0x30
    6c4e:	04 c0       	rjmp	.+8      	; 0x6c58 <__udivdi3+0x168>
    6c50:	96 94       	lsr	r9
    6c52:	87 94       	ror	r8
    6c54:	77 94       	ror	r7
    6c56:	67 94       	ror	r6
    6c58:	8a 95       	dec	r24
    6c5a:	d2 f7       	brpl	.-12     	; 0x6c50 <__udivdi3+0x160>
    6c5c:	62 2a       	or	r6, r18
    6c5e:	73 2a       	or	r7, r19
    6c60:	84 2a       	or	r8, r20
    6c62:	95 2a       	or	r9, r21
    6c64:	ad a4       	ldd	r10, Y+45	; 0x2d
    6c66:	be a4       	ldd	r11, Y+46	; 0x2e
    6c68:	cf a4       	ldd	r12, Y+47	; 0x2f
    6c6a:	d8 a8       	ldd	r13, Y+48	; 0x30
    6c6c:	04 c0       	rjmp	.+8      	; 0x6c76 <__udivdi3+0x186>
    6c6e:	aa 0c       	add	r10, r10
    6c70:	bb 1c       	adc	r11, r11
    6c72:	cc 1c       	adc	r12, r12
    6c74:	dd 1c       	adc	r13, r13
    6c76:	ea 94       	dec	r14
    6c78:	d2 f7       	brpl	.-12     	; 0x6c6e <__udivdi3+0x17e>
    6c7a:	ad a6       	std	Y+45, r10	; 0x2d
    6c7c:	be a6       	std	Y+46, r11	; 0x2e
    6c7e:	cf a6       	std	Y+47, r12	; 0x2f
    6c80:	d8 aa       	std	Y+48, r13	; 0x30
    6c82:	62 01       	movw	r12, r4
    6c84:	ee 24       	eor	r14, r14
    6c86:	ff 24       	eor	r15, r15
    6c88:	cd aa       	std	Y+53, r12	; 0x35
    6c8a:	de aa       	std	Y+54, r13	; 0x36
    6c8c:	ef aa       	std	Y+55, r14	; 0x37
    6c8e:	f8 ae       	std	Y+56, r15	; 0x38
    6c90:	92 01       	movw	r18, r4
    6c92:	81 01       	movw	r16, r2
    6c94:	20 70       	andi	r18, 0x00	; 0
    6c96:	30 70       	andi	r19, 0x00	; 0
    6c98:	09 af       	std	Y+57, r16	; 0x39
    6c9a:	1a af       	std	Y+58, r17	; 0x3a
    6c9c:	2b af       	std	Y+59, r18	; 0x3b
    6c9e:	3c af       	std	Y+60, r19	; 0x3c
    6ca0:	c4 01       	movw	r24, r8
    6ca2:	b3 01       	movw	r22, r6
    6ca4:	a7 01       	movw	r20, r14
    6ca6:	96 01       	movw	r18, r12
    6ca8:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__udivmodsi4>
    6cac:	7b 01       	movw	r14, r22
    6cae:	8c 01       	movw	r16, r24
    6cb0:	c4 01       	movw	r24, r8
    6cb2:	b3 01       	movw	r22, r6
    6cb4:	2d a9       	ldd	r18, Y+53	; 0x35
    6cb6:	3e a9       	ldd	r19, Y+54	; 0x36
    6cb8:	4f a9       	ldd	r20, Y+55	; 0x37
    6cba:	58 ad       	ldd	r21, Y+56	; 0x38
    6cbc:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__udivmodsi4>
    6cc0:	c9 01       	movw	r24, r18
    6cc2:	da 01       	movw	r26, r20
    6cc4:	3c 01       	movw	r6, r24
    6cc6:	4d 01       	movw	r8, r26
    6cc8:	c4 01       	movw	r24, r8
    6cca:	b3 01       	movw	r22, r6
    6ccc:	29 ad       	ldd	r18, Y+57	; 0x39
    6cce:	3a ad       	ldd	r19, Y+58	; 0x3a
    6cd0:	4b ad       	ldd	r20, Y+59	; 0x3b
    6cd2:	5c ad       	ldd	r21, Y+60	; 0x3c
    6cd4:	0e 94 ca 43 	call	0x8794	; 0x8794 <__mulsi3>
    6cd8:	9b 01       	movw	r18, r22
    6cda:	ac 01       	movw	r20, r24
    6cdc:	87 01       	movw	r16, r14
    6cde:	ff 24       	eor	r15, r15
    6ce0:	ee 24       	eor	r14, r14
    6ce2:	ad a4       	ldd	r10, Y+45	; 0x2d
    6ce4:	be a4       	ldd	r11, Y+46	; 0x2e
    6ce6:	cf a4       	ldd	r12, Y+47	; 0x2f
    6ce8:	d8 a8       	ldd	r13, Y+48	; 0x30
    6cea:	c6 01       	movw	r24, r12
    6cec:	aa 27       	eor	r26, r26
    6cee:	bb 27       	eor	r27, r27
    6cf0:	57 01       	movw	r10, r14
    6cf2:	68 01       	movw	r12, r16
    6cf4:	a8 2a       	or	r10, r24
    6cf6:	b9 2a       	or	r11, r25
    6cf8:	ca 2a       	or	r12, r26
    6cfa:	db 2a       	or	r13, r27
    6cfc:	a2 16       	cp	r10, r18
    6cfe:	b3 06       	cpc	r11, r19
    6d00:	c4 06       	cpc	r12, r20
    6d02:	d5 06       	cpc	r13, r21
    6d04:	e0 f4       	brcc	.+56     	; 0x6d3e <__udivdi3+0x24e>
    6d06:	08 94       	sec
    6d08:	61 08       	sbc	r6, r1
    6d0a:	71 08       	sbc	r7, r1
    6d0c:	81 08       	sbc	r8, r1
    6d0e:	91 08       	sbc	r9, r1
    6d10:	a2 0c       	add	r10, r2
    6d12:	b3 1c       	adc	r11, r3
    6d14:	c4 1c       	adc	r12, r4
    6d16:	d5 1c       	adc	r13, r5
    6d18:	a2 14       	cp	r10, r2
    6d1a:	b3 04       	cpc	r11, r3
    6d1c:	c4 04       	cpc	r12, r4
    6d1e:	d5 04       	cpc	r13, r5
    6d20:	70 f0       	brcs	.+28     	; 0x6d3e <__udivdi3+0x24e>
    6d22:	a2 16       	cp	r10, r18
    6d24:	b3 06       	cpc	r11, r19
    6d26:	c4 06       	cpc	r12, r20
    6d28:	d5 06       	cpc	r13, r21
    6d2a:	48 f4       	brcc	.+18     	; 0x6d3e <__udivdi3+0x24e>
    6d2c:	08 94       	sec
    6d2e:	61 08       	sbc	r6, r1
    6d30:	71 08       	sbc	r7, r1
    6d32:	81 08       	sbc	r8, r1
    6d34:	91 08       	sbc	r9, r1
    6d36:	a2 0c       	add	r10, r2
    6d38:	b3 1c       	adc	r11, r3
    6d3a:	c4 1c       	adc	r12, r4
    6d3c:	d5 1c       	adc	r13, r5
    6d3e:	a2 1a       	sub	r10, r18
    6d40:	b3 0a       	sbc	r11, r19
    6d42:	c4 0a       	sbc	r12, r20
    6d44:	d5 0a       	sbc	r13, r21
    6d46:	c6 01       	movw	r24, r12
    6d48:	b5 01       	movw	r22, r10
    6d4a:	2d a9       	ldd	r18, Y+53	; 0x35
    6d4c:	3e a9       	ldd	r19, Y+54	; 0x36
    6d4e:	4f a9       	ldd	r20, Y+55	; 0x37
    6d50:	58 ad       	ldd	r21, Y+56	; 0x38
    6d52:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__udivmodsi4>
    6d56:	7b 01       	movw	r14, r22
    6d58:	8c 01       	movw	r16, r24
    6d5a:	c6 01       	movw	r24, r12
    6d5c:	b5 01       	movw	r22, r10
    6d5e:	2d a9       	ldd	r18, Y+53	; 0x35
    6d60:	3e a9       	ldd	r19, Y+54	; 0x36
    6d62:	4f a9       	ldd	r20, Y+55	; 0x37
    6d64:	58 ad       	ldd	r21, Y+56	; 0x38
    6d66:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__udivmodsi4>
    6d6a:	c9 01       	movw	r24, r18
    6d6c:	da 01       	movw	r26, r20
    6d6e:	5c 01       	movw	r10, r24
    6d70:	6d 01       	movw	r12, r26
    6d72:	c6 01       	movw	r24, r12
    6d74:	b5 01       	movw	r22, r10
    6d76:	29 ad       	ldd	r18, Y+57	; 0x39
    6d78:	3a ad       	ldd	r19, Y+58	; 0x3a
    6d7a:	4b ad       	ldd	r20, Y+59	; 0x3b
    6d7c:	5c ad       	ldd	r21, Y+60	; 0x3c
    6d7e:	0e 94 ca 43 	call	0x8794	; 0x8794 <__mulsi3>
    6d82:	9b 01       	movw	r18, r22
    6d84:	ac 01       	movw	r20, r24
    6d86:	87 01       	movw	r16, r14
    6d88:	ff 24       	eor	r15, r15
    6d8a:	ee 24       	eor	r14, r14
    6d8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    6d8e:	9e a5       	ldd	r25, Y+46	; 0x2e
    6d90:	af a5       	ldd	r26, Y+47	; 0x2f
    6d92:	b8 a9       	ldd	r27, Y+48	; 0x30
    6d94:	a0 70       	andi	r26, 0x00	; 0
    6d96:	b0 70       	andi	r27, 0x00	; 0
    6d98:	e8 2a       	or	r14, r24
    6d9a:	f9 2a       	or	r15, r25
    6d9c:	0a 2b       	or	r16, r26
    6d9e:	1b 2b       	or	r17, r27
    6da0:	e2 16       	cp	r14, r18
    6da2:	f3 06       	cpc	r15, r19
    6da4:	04 07       	cpc	r16, r20
    6da6:	15 07       	cpc	r17, r21
    6da8:	c0 f4       	brcc	.+48     	; 0x6dda <__udivdi3+0x2ea>
    6daa:	08 94       	sec
    6dac:	a1 08       	sbc	r10, r1
    6dae:	b1 08       	sbc	r11, r1
    6db0:	c1 08       	sbc	r12, r1
    6db2:	d1 08       	sbc	r13, r1
    6db4:	e2 0c       	add	r14, r2
    6db6:	f3 1c       	adc	r15, r3
    6db8:	04 1d       	adc	r16, r4
    6dba:	15 1d       	adc	r17, r5
    6dbc:	e2 14       	cp	r14, r2
    6dbe:	f3 04       	cpc	r15, r3
    6dc0:	04 05       	cpc	r16, r4
    6dc2:	15 05       	cpc	r17, r5
    6dc4:	50 f0       	brcs	.+20     	; 0x6dda <__udivdi3+0x2ea>
    6dc6:	e2 16       	cp	r14, r18
    6dc8:	f3 06       	cpc	r15, r19
    6dca:	04 07       	cpc	r16, r20
    6dcc:	15 07       	cpc	r17, r21
    6dce:	28 f4       	brcc	.+10     	; 0x6dda <__udivdi3+0x2ea>
    6dd0:	08 94       	sec
    6dd2:	a1 08       	sbc	r10, r1
    6dd4:	b1 08       	sbc	r11, r1
    6dd6:	c1 08       	sbc	r12, r1
    6dd8:	d1 08       	sbc	r13, r1
    6dda:	d3 01       	movw	r26, r6
    6ddc:	99 27       	eor	r25, r25
    6dde:	88 27       	eor	r24, r24
    6de0:	86 01       	movw	r16, r12
    6de2:	75 01       	movw	r14, r10
    6de4:	e8 2a       	or	r14, r24
    6de6:	f9 2a       	or	r15, r25
    6de8:	0a 2b       	or	r16, r26
    6dea:	1b 2b       	or	r17, r27
    6dec:	e9 aa       	std	Y+49, r14	; 0x31
    6dee:	fa aa       	std	Y+50, r15	; 0x32
    6df0:	0b ab       	std	Y+51, r16	; 0x33
    6df2:	1c ab       	std	Y+52, r17	; 0x34
    6df4:	cf c4       	rjmp	.+2462   	; 0x7794 <__udivdi3+0xca4>
    6df6:	21 14       	cp	r2, r1
    6df8:	31 04       	cpc	r3, r1
    6dfa:	41 04       	cpc	r4, r1
    6dfc:	51 04       	cpc	r5, r1
    6dfe:	71 f4       	brne	.+28     	; 0x6e1c <__udivdi3+0x32c>
    6e00:	61 e0       	ldi	r22, 0x01	; 1
    6e02:	70 e0       	ldi	r23, 0x00	; 0
    6e04:	80 e0       	ldi	r24, 0x00	; 0
    6e06:	90 e0       	ldi	r25, 0x00	; 0
    6e08:	20 e0       	ldi	r18, 0x00	; 0
    6e0a:	30 e0       	ldi	r19, 0x00	; 0
    6e0c:	40 e0       	ldi	r20, 0x00	; 0
    6e0e:	50 e0       	ldi	r21, 0x00	; 0
    6e10:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__udivmodsi4>
    6e14:	c9 01       	movw	r24, r18
    6e16:	da 01       	movw	r26, r20
    6e18:	1c 01       	movw	r2, r24
    6e1a:	2d 01       	movw	r4, r26
    6e1c:	00 e0       	ldi	r16, 0x00	; 0
    6e1e:	20 16       	cp	r2, r16
    6e20:	00 e0       	ldi	r16, 0x00	; 0
    6e22:	30 06       	cpc	r3, r16
    6e24:	01 e0       	ldi	r16, 0x01	; 1
    6e26:	40 06       	cpc	r4, r16
    6e28:	00 e0       	ldi	r16, 0x00	; 0
    6e2a:	50 06       	cpc	r5, r16
    6e2c:	88 f4       	brcc	.+34     	; 0x6e50 <__udivdi3+0x360>
    6e2e:	1f ef       	ldi	r17, 0xFF	; 255
    6e30:	21 16       	cp	r2, r17
    6e32:	31 04       	cpc	r3, r1
    6e34:	41 04       	cpc	r4, r1
    6e36:	51 04       	cpc	r5, r1
    6e38:	31 f0       	breq	.+12     	; 0x6e46 <__udivdi3+0x356>
    6e3a:	28 f0       	brcs	.+10     	; 0x6e46 <__udivdi3+0x356>
    6e3c:	48 e0       	ldi	r20, 0x08	; 8
    6e3e:	50 e0       	ldi	r21, 0x00	; 0
    6e40:	60 e0       	ldi	r22, 0x00	; 0
    6e42:	70 e0       	ldi	r23, 0x00	; 0
    6e44:	17 c0       	rjmp	.+46     	; 0x6e74 <__udivdi3+0x384>
    6e46:	40 e0       	ldi	r20, 0x00	; 0
    6e48:	50 e0       	ldi	r21, 0x00	; 0
    6e4a:	60 e0       	ldi	r22, 0x00	; 0
    6e4c:	70 e0       	ldi	r23, 0x00	; 0
    6e4e:	12 c0       	rjmp	.+36     	; 0x6e74 <__udivdi3+0x384>
    6e50:	20 e0       	ldi	r18, 0x00	; 0
    6e52:	22 16       	cp	r2, r18
    6e54:	20 e0       	ldi	r18, 0x00	; 0
    6e56:	32 06       	cpc	r3, r18
    6e58:	20 e0       	ldi	r18, 0x00	; 0
    6e5a:	42 06       	cpc	r4, r18
    6e5c:	21 e0       	ldi	r18, 0x01	; 1
    6e5e:	52 06       	cpc	r5, r18
    6e60:	28 f0       	brcs	.+10     	; 0x6e6c <__udivdi3+0x37c>
    6e62:	48 e1       	ldi	r20, 0x18	; 24
    6e64:	50 e0       	ldi	r21, 0x00	; 0
    6e66:	60 e0       	ldi	r22, 0x00	; 0
    6e68:	70 e0       	ldi	r23, 0x00	; 0
    6e6a:	04 c0       	rjmp	.+8      	; 0x6e74 <__udivdi3+0x384>
    6e6c:	40 e1       	ldi	r20, 0x10	; 16
    6e6e:	50 e0       	ldi	r21, 0x00	; 0
    6e70:	60 e0       	ldi	r22, 0x00	; 0
    6e72:	70 e0       	ldi	r23, 0x00	; 0
    6e74:	d2 01       	movw	r26, r4
    6e76:	c1 01       	movw	r24, r2
    6e78:	04 2e       	mov	r0, r20
    6e7a:	04 c0       	rjmp	.+8      	; 0x6e84 <__udivdi3+0x394>
    6e7c:	b6 95       	lsr	r27
    6e7e:	a7 95       	ror	r26
    6e80:	97 95       	ror	r25
    6e82:	87 95       	ror	r24
    6e84:	0a 94       	dec	r0
    6e86:	d2 f7       	brpl	.-12     	; 0x6e7c <__udivdi3+0x38c>
    6e88:	83 5f       	subi	r24, 0xF3	; 243
    6e8a:	9f 4d       	sbci	r25, 0xDF	; 223
    6e8c:	dc 01       	movw	r26, r24
    6e8e:	2c 91       	ld	r18, X
    6e90:	e0 e2       	ldi	r30, 0x20	; 32
    6e92:	ee 2e       	mov	r14, r30
    6e94:	f1 2c       	mov	r15, r1
    6e96:	01 2d       	mov	r16, r1
    6e98:	11 2d       	mov	r17, r1
    6e9a:	d8 01       	movw	r26, r16
    6e9c:	c7 01       	movw	r24, r14
    6e9e:	84 1b       	sub	r24, r20
    6ea0:	95 0b       	sbc	r25, r21
    6ea2:	a6 0b       	sbc	r26, r22
    6ea4:	b7 0b       	sbc	r27, r23
    6ea6:	82 1b       	sub	r24, r18
    6ea8:	91 09       	sbc	r25, r1
    6eaa:	a1 09       	sbc	r26, r1
    6eac:	b1 09       	sbc	r27, r1
    6eae:	00 97       	sbiw	r24, 0x00	; 0
    6eb0:	a1 05       	cpc	r26, r1
    6eb2:	b1 05       	cpc	r27, r1
    6eb4:	61 f4       	brne	.+24     	; 0x6ece <__udivdi3+0x3de>
    6eb6:	64 01       	movw	r12, r8
    6eb8:	53 01       	movw	r10, r6
    6eba:	a2 18       	sub	r10, r2
    6ebc:	b3 08       	sbc	r11, r3
    6ebe:	c4 08       	sbc	r12, r4
    6ec0:	d5 08       	sbc	r13, r5
    6ec2:	31 e0       	ldi	r19, 0x01	; 1
    6ec4:	63 2e       	mov	r6, r19
    6ec6:	71 2c       	mov	r7, r1
    6ec8:	81 2c       	mov	r8, r1
    6eca:	91 2c       	mov	r9, r1
    6ecc:	1e c1       	rjmp	.+572    	; 0x710a <__udivdi3+0x61a>
    6ece:	6f 96       	adiw	r28, 0x1f	; 31
    6ed0:	8f af       	std	Y+63, r24	; 0x3f
    6ed2:	6f 97       	sbiw	r28, 0x1f	; 31
    6ed4:	08 2e       	mov	r0, r24
    6ed6:	04 c0       	rjmp	.+8      	; 0x6ee0 <__udivdi3+0x3f0>
    6ed8:	22 0c       	add	r2, r2
    6eda:	33 1c       	adc	r3, r3
    6edc:	44 1c       	adc	r4, r4
    6ede:	55 1c       	adc	r5, r5
    6ee0:	0a 94       	dec	r0
    6ee2:	d2 f7       	brpl	.-12     	; 0x6ed8 <__udivdi3+0x3e8>
    6ee4:	ee 2d       	mov	r30, r14
    6ee6:	e8 1b       	sub	r30, r24
    6ee8:	64 01       	movw	r12, r8
    6eea:	53 01       	movw	r10, r6
    6eec:	0e 2e       	mov	r0, r30
    6eee:	04 c0       	rjmp	.+8      	; 0x6ef8 <__udivdi3+0x408>
    6ef0:	d6 94       	lsr	r13
    6ef2:	c7 94       	ror	r12
    6ef4:	b7 94       	ror	r11
    6ef6:	a7 94       	ror	r10
    6ef8:	0a 94       	dec	r0
    6efa:	d2 f7       	brpl	.-12     	; 0x6ef0 <__udivdi3+0x400>
    6efc:	a4 01       	movw	r20, r8
    6efe:	93 01       	movw	r18, r6
    6f00:	6f 96       	adiw	r28, 0x1f	; 31
    6f02:	0f ac       	ldd	r0, Y+63	; 0x3f
    6f04:	6f 97       	sbiw	r28, 0x1f	; 31
    6f06:	04 c0       	rjmp	.+8      	; 0x6f10 <__udivdi3+0x420>
    6f08:	22 0f       	add	r18, r18
    6f0a:	33 1f       	adc	r19, r19
    6f0c:	44 1f       	adc	r20, r20
    6f0e:	55 1f       	adc	r21, r21
    6f10:	0a 94       	dec	r0
    6f12:	d2 f7       	brpl	.-12     	; 0x6f08 <__udivdi3+0x418>
    6f14:	6d a4       	ldd	r6, Y+45	; 0x2d
    6f16:	7e a4       	ldd	r7, Y+46	; 0x2e
    6f18:	8f a4       	ldd	r8, Y+47	; 0x2f
    6f1a:	98 a8       	ldd	r9, Y+48	; 0x30
    6f1c:	0e 2e       	mov	r0, r30
    6f1e:	04 c0       	rjmp	.+8      	; 0x6f28 <__udivdi3+0x438>
    6f20:	96 94       	lsr	r9
    6f22:	87 94       	ror	r8
    6f24:	77 94       	ror	r7
    6f26:	67 94       	ror	r6
    6f28:	0a 94       	dec	r0
    6f2a:	d2 f7       	brpl	.-12     	; 0x6f20 <__udivdi3+0x430>
    6f2c:	84 01       	movw	r16, r8
    6f2e:	73 01       	movw	r14, r6
    6f30:	e2 2a       	or	r14, r18
    6f32:	f3 2a       	or	r15, r19
    6f34:	04 2b       	or	r16, r20
    6f36:	15 2b       	or	r17, r21
    6f38:	e9 a6       	std	Y+41, r14	; 0x29
    6f3a:	fa a6       	std	Y+42, r15	; 0x2a
    6f3c:	0b a7       	std	Y+43, r16	; 0x2b
    6f3e:	1c a7       	std	Y+44, r17	; 0x2c
    6f40:	32 01       	movw	r6, r4
    6f42:	88 24       	eor	r8, r8
    6f44:	99 24       	eor	r9, r9
    6f46:	92 01       	movw	r18, r4
    6f48:	81 01       	movw	r16, r2
    6f4a:	20 70       	andi	r18, 0x00	; 0
    6f4c:	30 70       	andi	r19, 0x00	; 0
    6f4e:	21 96       	adiw	r28, 0x01	; 1
    6f50:	0c af       	std	Y+60, r16	; 0x3c
    6f52:	1d af       	std	Y+61, r17	; 0x3d
    6f54:	2e af       	std	Y+62, r18	; 0x3e
    6f56:	3f af       	std	Y+63, r19	; 0x3f
    6f58:	21 97       	sbiw	r28, 0x01	; 1
    6f5a:	c6 01       	movw	r24, r12
    6f5c:	b5 01       	movw	r22, r10
    6f5e:	a4 01       	movw	r20, r8
    6f60:	93 01       	movw	r18, r6
    6f62:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__udivmodsi4>
    6f66:	7b 01       	movw	r14, r22
    6f68:	8c 01       	movw	r16, r24
    6f6a:	c6 01       	movw	r24, r12
    6f6c:	b5 01       	movw	r22, r10
    6f6e:	a4 01       	movw	r20, r8
    6f70:	93 01       	movw	r18, r6
    6f72:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__udivmodsi4>
    6f76:	c9 01       	movw	r24, r18
    6f78:	da 01       	movw	r26, r20
    6f7a:	25 96       	adiw	r28, 0x05	; 5
    6f7c:	8c af       	std	Y+60, r24	; 0x3c
    6f7e:	9d af       	std	Y+61, r25	; 0x3d
    6f80:	ae af       	std	Y+62, r26	; 0x3e
    6f82:	bf af       	std	Y+63, r27	; 0x3f
    6f84:	25 97       	sbiw	r28, 0x05	; 5
    6f86:	bc 01       	movw	r22, r24
    6f88:	cd 01       	movw	r24, r26
    6f8a:	21 96       	adiw	r28, 0x01	; 1
    6f8c:	2c ad       	ldd	r18, Y+60	; 0x3c
    6f8e:	3d ad       	ldd	r19, Y+61	; 0x3d
    6f90:	4e ad       	ldd	r20, Y+62	; 0x3e
    6f92:	5f ad       	ldd	r21, Y+63	; 0x3f
    6f94:	21 97       	sbiw	r28, 0x01	; 1
    6f96:	0e 94 ca 43 	call	0x8794	; 0x8794 <__mulsi3>
    6f9a:	9b 01       	movw	r18, r22
    6f9c:	ac 01       	movw	r20, r24
    6f9e:	87 01       	movw	r16, r14
    6fa0:	ff 24       	eor	r15, r15
    6fa2:	ee 24       	eor	r14, r14
    6fa4:	a9 a4       	ldd	r10, Y+41	; 0x29
    6fa6:	ba a4       	ldd	r11, Y+42	; 0x2a
    6fa8:	cb a4       	ldd	r12, Y+43	; 0x2b
    6faa:	dc a4       	ldd	r13, Y+44	; 0x2c
    6fac:	c6 01       	movw	r24, r12
    6fae:	aa 27       	eor	r26, r26
    6fb0:	bb 27       	eor	r27, r27
    6fb2:	5c 01       	movw	r10, r24
    6fb4:	6d 01       	movw	r12, r26
    6fb6:	ae 28       	or	r10, r14
    6fb8:	bf 28       	or	r11, r15
    6fba:	c0 2a       	or	r12, r16
    6fbc:	d1 2a       	or	r13, r17
    6fbe:	a2 16       	cp	r10, r18
    6fc0:	b3 06       	cpc	r11, r19
    6fc2:	c4 06       	cpc	r12, r20
    6fc4:	d5 06       	cpc	r13, r21
    6fc6:	60 f5       	brcc	.+88     	; 0x7020 <__udivdi3+0x530>
    6fc8:	25 96       	adiw	r28, 0x05	; 5
    6fca:	6c ad       	ldd	r22, Y+60	; 0x3c
    6fcc:	7d ad       	ldd	r23, Y+61	; 0x3d
    6fce:	8e ad       	ldd	r24, Y+62	; 0x3e
    6fd0:	9f ad       	ldd	r25, Y+63	; 0x3f
    6fd2:	25 97       	sbiw	r28, 0x05	; 5
    6fd4:	61 50       	subi	r22, 0x01	; 1
    6fd6:	70 40       	sbci	r23, 0x00	; 0
    6fd8:	80 40       	sbci	r24, 0x00	; 0
    6fda:	90 40       	sbci	r25, 0x00	; 0
    6fdc:	25 96       	adiw	r28, 0x05	; 5
    6fde:	6c af       	std	Y+60, r22	; 0x3c
    6fe0:	7d af       	std	Y+61, r23	; 0x3d
    6fe2:	8e af       	std	Y+62, r24	; 0x3e
    6fe4:	9f af       	std	Y+63, r25	; 0x3f
    6fe6:	25 97       	sbiw	r28, 0x05	; 5
    6fe8:	a2 0c       	add	r10, r2
    6fea:	b3 1c       	adc	r11, r3
    6fec:	c4 1c       	adc	r12, r4
    6fee:	d5 1c       	adc	r13, r5
    6ff0:	a2 14       	cp	r10, r2
    6ff2:	b3 04       	cpc	r11, r3
    6ff4:	c4 04       	cpc	r12, r4
    6ff6:	d5 04       	cpc	r13, r5
    6ff8:	98 f0       	brcs	.+38     	; 0x7020 <__udivdi3+0x530>
    6ffa:	a2 16       	cp	r10, r18
    6ffc:	b3 06       	cpc	r11, r19
    6ffe:	c4 06       	cpc	r12, r20
    7000:	d5 06       	cpc	r13, r21
    7002:	70 f4       	brcc	.+28     	; 0x7020 <__udivdi3+0x530>
    7004:	61 50       	subi	r22, 0x01	; 1
    7006:	70 40       	sbci	r23, 0x00	; 0
    7008:	80 40       	sbci	r24, 0x00	; 0
    700a:	90 40       	sbci	r25, 0x00	; 0
    700c:	25 96       	adiw	r28, 0x05	; 5
    700e:	6c af       	std	Y+60, r22	; 0x3c
    7010:	7d af       	std	Y+61, r23	; 0x3d
    7012:	8e af       	std	Y+62, r24	; 0x3e
    7014:	9f af       	std	Y+63, r25	; 0x3f
    7016:	25 97       	sbiw	r28, 0x05	; 5
    7018:	a2 0c       	add	r10, r2
    701a:	b3 1c       	adc	r11, r3
    701c:	c4 1c       	adc	r12, r4
    701e:	d5 1c       	adc	r13, r5
    7020:	a2 1a       	sub	r10, r18
    7022:	b3 0a       	sbc	r11, r19
    7024:	c4 0a       	sbc	r12, r20
    7026:	d5 0a       	sbc	r13, r21
    7028:	c6 01       	movw	r24, r12
    702a:	b5 01       	movw	r22, r10
    702c:	a4 01       	movw	r20, r8
    702e:	93 01       	movw	r18, r6
    7030:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__udivmodsi4>
    7034:	7b 01       	movw	r14, r22
    7036:	8c 01       	movw	r16, r24
    7038:	c6 01       	movw	r24, r12
    703a:	b5 01       	movw	r22, r10
    703c:	a4 01       	movw	r20, r8
    703e:	93 01       	movw	r18, r6
    7040:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__udivmodsi4>
    7044:	c9 01       	movw	r24, r18
    7046:	da 01       	movw	r26, r20
    7048:	3c 01       	movw	r6, r24
    704a:	4d 01       	movw	r8, r26
    704c:	c4 01       	movw	r24, r8
    704e:	b3 01       	movw	r22, r6
    7050:	21 96       	adiw	r28, 0x01	; 1
    7052:	2c ad       	ldd	r18, Y+60	; 0x3c
    7054:	3d ad       	ldd	r19, Y+61	; 0x3d
    7056:	4e ad       	ldd	r20, Y+62	; 0x3e
    7058:	5f ad       	ldd	r21, Y+63	; 0x3f
    705a:	21 97       	sbiw	r28, 0x01	; 1
    705c:	0e 94 ca 43 	call	0x8794	; 0x8794 <__mulsi3>
    7060:	9b 01       	movw	r18, r22
    7062:	ac 01       	movw	r20, r24
    7064:	87 01       	movw	r16, r14
    7066:	ff 24       	eor	r15, r15
    7068:	ee 24       	eor	r14, r14
    706a:	89 a5       	ldd	r24, Y+41	; 0x29
    706c:	9a a5       	ldd	r25, Y+42	; 0x2a
    706e:	ab a5       	ldd	r26, Y+43	; 0x2b
    7070:	bc a5       	ldd	r27, Y+44	; 0x2c
    7072:	a0 70       	andi	r26, 0x00	; 0
    7074:	b0 70       	andi	r27, 0x00	; 0
    7076:	57 01       	movw	r10, r14
    7078:	68 01       	movw	r12, r16
    707a:	a8 2a       	or	r10, r24
    707c:	b9 2a       	or	r11, r25
    707e:	ca 2a       	or	r12, r26
    7080:	db 2a       	or	r13, r27
    7082:	a2 16       	cp	r10, r18
    7084:	b3 06       	cpc	r11, r19
    7086:	c4 06       	cpc	r12, r20
    7088:	d5 06       	cpc	r13, r21
    708a:	e0 f4       	brcc	.+56     	; 0x70c4 <__udivdi3+0x5d4>
    708c:	08 94       	sec
    708e:	61 08       	sbc	r6, r1
    7090:	71 08       	sbc	r7, r1
    7092:	81 08       	sbc	r8, r1
    7094:	91 08       	sbc	r9, r1
    7096:	a2 0c       	add	r10, r2
    7098:	b3 1c       	adc	r11, r3
    709a:	c4 1c       	adc	r12, r4
    709c:	d5 1c       	adc	r13, r5
    709e:	a2 14       	cp	r10, r2
    70a0:	b3 04       	cpc	r11, r3
    70a2:	c4 04       	cpc	r12, r4
    70a4:	d5 04       	cpc	r13, r5
    70a6:	70 f0       	brcs	.+28     	; 0x70c4 <__udivdi3+0x5d4>
    70a8:	a2 16       	cp	r10, r18
    70aa:	b3 06       	cpc	r11, r19
    70ac:	c4 06       	cpc	r12, r20
    70ae:	d5 06       	cpc	r13, r21
    70b0:	48 f4       	brcc	.+18     	; 0x70c4 <__udivdi3+0x5d4>
    70b2:	08 94       	sec
    70b4:	61 08       	sbc	r6, r1
    70b6:	71 08       	sbc	r7, r1
    70b8:	81 08       	sbc	r8, r1
    70ba:	91 08       	sbc	r9, r1
    70bc:	a2 0c       	add	r10, r2
    70be:	b3 1c       	adc	r11, r3
    70c0:	c4 1c       	adc	r12, r4
    70c2:	d5 1c       	adc	r13, r5
    70c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    70c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    70c8:	af a5       	ldd	r26, Y+47	; 0x2f
    70ca:	b8 a9       	ldd	r27, Y+48	; 0x30
    70cc:	6f 96       	adiw	r28, 0x1f	; 31
    70ce:	0f ac       	ldd	r0, Y+63	; 0x3f
    70d0:	6f 97       	sbiw	r28, 0x1f	; 31
    70d2:	04 c0       	rjmp	.+8      	; 0x70dc <__udivdi3+0x5ec>
    70d4:	88 0f       	add	r24, r24
    70d6:	99 1f       	adc	r25, r25
    70d8:	aa 1f       	adc	r26, r26
    70da:	bb 1f       	adc	r27, r27
    70dc:	0a 94       	dec	r0
    70de:	d2 f7       	brpl	.-12     	; 0x70d4 <__udivdi3+0x5e4>
    70e0:	8d a7       	std	Y+45, r24	; 0x2d
    70e2:	9e a7       	std	Y+46, r25	; 0x2e
    70e4:	af a7       	std	Y+47, r26	; 0x2f
    70e6:	b8 ab       	std	Y+48, r27	; 0x30
    70e8:	a2 1a       	sub	r10, r18
    70ea:	b3 0a       	sbc	r11, r19
    70ec:	c4 0a       	sbc	r12, r20
    70ee:	d5 0a       	sbc	r13, r21
    70f0:	25 96       	adiw	r28, 0x05	; 5
    70f2:	ec ac       	ldd	r14, Y+60	; 0x3c
    70f4:	fd ac       	ldd	r15, Y+61	; 0x3d
    70f6:	0e ad       	ldd	r16, Y+62	; 0x3e
    70f8:	1f ad       	ldd	r17, Y+63	; 0x3f
    70fa:	25 97       	sbiw	r28, 0x05	; 5
    70fc:	d7 01       	movw	r26, r14
    70fe:	99 27       	eor	r25, r25
    7100:	88 27       	eor	r24, r24
    7102:	68 2a       	or	r6, r24
    7104:	79 2a       	or	r7, r25
    7106:	8a 2a       	or	r8, r26
    7108:	9b 2a       	or	r9, r27
    710a:	82 01       	movw	r16, r4
    710c:	22 27       	eor	r18, r18
    710e:	33 27       	eor	r19, r19
    7110:	29 96       	adiw	r28, 0x09	; 9
    7112:	0c af       	std	Y+60, r16	; 0x3c
    7114:	1d af       	std	Y+61, r17	; 0x3d
    7116:	2e af       	std	Y+62, r18	; 0x3e
    7118:	3f af       	std	Y+63, r19	; 0x3f
    711a:	29 97       	sbiw	r28, 0x09	; 9
    711c:	a2 01       	movw	r20, r4
    711e:	91 01       	movw	r18, r2
    7120:	40 70       	andi	r20, 0x00	; 0
    7122:	50 70       	andi	r21, 0x00	; 0
    7124:	2d 96       	adiw	r28, 0x0d	; 13
    7126:	2c af       	std	Y+60, r18	; 0x3c
    7128:	3d af       	std	Y+61, r19	; 0x3d
    712a:	4e af       	std	Y+62, r20	; 0x3e
    712c:	5f af       	std	Y+63, r21	; 0x3f
    712e:	2d 97       	sbiw	r28, 0x0d	; 13
    7130:	c6 01       	movw	r24, r12
    7132:	b5 01       	movw	r22, r10
    7134:	29 96       	adiw	r28, 0x09	; 9
    7136:	2c ad       	ldd	r18, Y+60	; 0x3c
    7138:	3d ad       	ldd	r19, Y+61	; 0x3d
    713a:	4e ad       	ldd	r20, Y+62	; 0x3e
    713c:	5f ad       	ldd	r21, Y+63	; 0x3f
    713e:	29 97       	sbiw	r28, 0x09	; 9
    7140:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__udivmodsi4>
    7144:	7b 01       	movw	r14, r22
    7146:	8c 01       	movw	r16, r24
    7148:	c6 01       	movw	r24, r12
    714a:	b5 01       	movw	r22, r10
    714c:	29 96       	adiw	r28, 0x09	; 9
    714e:	2c ad       	ldd	r18, Y+60	; 0x3c
    7150:	3d ad       	ldd	r19, Y+61	; 0x3d
    7152:	4e ad       	ldd	r20, Y+62	; 0x3e
    7154:	5f ad       	ldd	r21, Y+63	; 0x3f
    7156:	29 97       	sbiw	r28, 0x09	; 9
    7158:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__udivmodsi4>
    715c:	c9 01       	movw	r24, r18
    715e:	da 01       	movw	r26, r20
    7160:	61 96       	adiw	r28, 0x11	; 17
    7162:	8c af       	std	Y+60, r24	; 0x3c
    7164:	9d af       	std	Y+61, r25	; 0x3d
    7166:	ae af       	std	Y+62, r26	; 0x3e
    7168:	bf af       	std	Y+63, r27	; 0x3f
    716a:	61 97       	sbiw	r28, 0x11	; 17
    716c:	bc 01       	movw	r22, r24
    716e:	cd 01       	movw	r24, r26
    7170:	2d 96       	adiw	r28, 0x0d	; 13
    7172:	2c ad       	ldd	r18, Y+60	; 0x3c
    7174:	3d ad       	ldd	r19, Y+61	; 0x3d
    7176:	4e ad       	ldd	r20, Y+62	; 0x3e
    7178:	5f ad       	ldd	r21, Y+63	; 0x3f
    717a:	2d 97       	sbiw	r28, 0x0d	; 13
    717c:	0e 94 ca 43 	call	0x8794	; 0x8794 <__mulsi3>
    7180:	9b 01       	movw	r18, r22
    7182:	ac 01       	movw	r20, r24
    7184:	87 01       	movw	r16, r14
    7186:	ff 24       	eor	r15, r15
    7188:	ee 24       	eor	r14, r14
    718a:	ad a4       	ldd	r10, Y+45	; 0x2d
    718c:	be a4       	ldd	r11, Y+46	; 0x2e
    718e:	cf a4       	ldd	r12, Y+47	; 0x2f
    7190:	d8 a8       	ldd	r13, Y+48	; 0x30
    7192:	c6 01       	movw	r24, r12
    7194:	aa 27       	eor	r26, r26
    7196:	bb 27       	eor	r27, r27
    7198:	57 01       	movw	r10, r14
    719a:	68 01       	movw	r12, r16
    719c:	a8 2a       	or	r10, r24
    719e:	b9 2a       	or	r11, r25
    71a0:	ca 2a       	or	r12, r26
    71a2:	db 2a       	or	r13, r27
    71a4:	a2 16       	cp	r10, r18
    71a6:	b3 06       	cpc	r11, r19
    71a8:	c4 06       	cpc	r12, r20
    71aa:	d5 06       	cpc	r13, r21
    71ac:	60 f5       	brcc	.+88     	; 0x7206 <__udivdi3+0x716>
    71ae:	61 96       	adiw	r28, 0x11	; 17
    71b0:	6c ad       	ldd	r22, Y+60	; 0x3c
    71b2:	7d ad       	ldd	r23, Y+61	; 0x3d
    71b4:	8e ad       	ldd	r24, Y+62	; 0x3e
    71b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    71b8:	61 97       	sbiw	r28, 0x11	; 17
    71ba:	61 50       	subi	r22, 0x01	; 1
    71bc:	70 40       	sbci	r23, 0x00	; 0
    71be:	80 40       	sbci	r24, 0x00	; 0
    71c0:	90 40       	sbci	r25, 0x00	; 0
    71c2:	61 96       	adiw	r28, 0x11	; 17
    71c4:	6c af       	std	Y+60, r22	; 0x3c
    71c6:	7d af       	std	Y+61, r23	; 0x3d
    71c8:	8e af       	std	Y+62, r24	; 0x3e
    71ca:	9f af       	std	Y+63, r25	; 0x3f
    71cc:	61 97       	sbiw	r28, 0x11	; 17
    71ce:	a2 0c       	add	r10, r2
    71d0:	b3 1c       	adc	r11, r3
    71d2:	c4 1c       	adc	r12, r4
    71d4:	d5 1c       	adc	r13, r5
    71d6:	a2 14       	cp	r10, r2
    71d8:	b3 04       	cpc	r11, r3
    71da:	c4 04       	cpc	r12, r4
    71dc:	d5 04       	cpc	r13, r5
    71de:	98 f0       	brcs	.+38     	; 0x7206 <__udivdi3+0x716>
    71e0:	a2 16       	cp	r10, r18
    71e2:	b3 06       	cpc	r11, r19
    71e4:	c4 06       	cpc	r12, r20
    71e6:	d5 06       	cpc	r13, r21
    71e8:	70 f4       	brcc	.+28     	; 0x7206 <__udivdi3+0x716>
    71ea:	61 50       	subi	r22, 0x01	; 1
    71ec:	70 40       	sbci	r23, 0x00	; 0
    71ee:	80 40       	sbci	r24, 0x00	; 0
    71f0:	90 40       	sbci	r25, 0x00	; 0
    71f2:	61 96       	adiw	r28, 0x11	; 17
    71f4:	6c af       	std	Y+60, r22	; 0x3c
    71f6:	7d af       	std	Y+61, r23	; 0x3d
    71f8:	8e af       	std	Y+62, r24	; 0x3e
    71fa:	9f af       	std	Y+63, r25	; 0x3f
    71fc:	61 97       	sbiw	r28, 0x11	; 17
    71fe:	a2 0c       	add	r10, r2
    7200:	b3 1c       	adc	r11, r3
    7202:	c4 1c       	adc	r12, r4
    7204:	d5 1c       	adc	r13, r5
    7206:	a2 1a       	sub	r10, r18
    7208:	b3 0a       	sbc	r11, r19
    720a:	c4 0a       	sbc	r12, r20
    720c:	d5 0a       	sbc	r13, r21
    720e:	c6 01       	movw	r24, r12
    7210:	b5 01       	movw	r22, r10
    7212:	29 96       	adiw	r28, 0x09	; 9
    7214:	2c ad       	ldd	r18, Y+60	; 0x3c
    7216:	3d ad       	ldd	r19, Y+61	; 0x3d
    7218:	4e ad       	ldd	r20, Y+62	; 0x3e
    721a:	5f ad       	ldd	r21, Y+63	; 0x3f
    721c:	29 97       	sbiw	r28, 0x09	; 9
    721e:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__udivmodsi4>
    7222:	7b 01       	movw	r14, r22
    7224:	8c 01       	movw	r16, r24
    7226:	c6 01       	movw	r24, r12
    7228:	b5 01       	movw	r22, r10
    722a:	29 96       	adiw	r28, 0x09	; 9
    722c:	2c ad       	ldd	r18, Y+60	; 0x3c
    722e:	3d ad       	ldd	r19, Y+61	; 0x3d
    7230:	4e ad       	ldd	r20, Y+62	; 0x3e
    7232:	5f ad       	ldd	r21, Y+63	; 0x3f
    7234:	29 97       	sbiw	r28, 0x09	; 9
    7236:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__udivmodsi4>
    723a:	c9 01       	movw	r24, r18
    723c:	da 01       	movw	r26, r20
    723e:	5c 01       	movw	r10, r24
    7240:	6d 01       	movw	r12, r26
    7242:	c6 01       	movw	r24, r12
    7244:	b5 01       	movw	r22, r10
    7246:	2d 96       	adiw	r28, 0x0d	; 13
    7248:	2c ad       	ldd	r18, Y+60	; 0x3c
    724a:	3d ad       	ldd	r19, Y+61	; 0x3d
    724c:	4e ad       	ldd	r20, Y+62	; 0x3e
    724e:	5f ad       	ldd	r21, Y+63	; 0x3f
    7250:	2d 97       	sbiw	r28, 0x0d	; 13
    7252:	0e 94 ca 43 	call	0x8794	; 0x8794 <__mulsi3>
    7256:	9b 01       	movw	r18, r22
    7258:	ac 01       	movw	r20, r24
    725a:	87 01       	movw	r16, r14
    725c:	ff 24       	eor	r15, r15
    725e:	ee 24       	eor	r14, r14
    7260:	8d a5       	ldd	r24, Y+45	; 0x2d
    7262:	9e a5       	ldd	r25, Y+46	; 0x2e
    7264:	af a5       	ldd	r26, Y+47	; 0x2f
    7266:	b8 a9       	ldd	r27, Y+48	; 0x30
    7268:	a0 70       	andi	r26, 0x00	; 0
    726a:	b0 70       	andi	r27, 0x00	; 0
    726c:	e8 2a       	or	r14, r24
    726e:	f9 2a       	or	r15, r25
    7270:	0a 2b       	or	r16, r26
    7272:	1b 2b       	or	r17, r27
    7274:	e2 16       	cp	r14, r18
    7276:	f3 06       	cpc	r15, r19
    7278:	04 07       	cpc	r16, r20
    727a:	15 07       	cpc	r17, r21
    727c:	c0 f4       	brcc	.+48     	; 0x72ae <__udivdi3+0x7be>
    727e:	08 94       	sec
    7280:	a1 08       	sbc	r10, r1
    7282:	b1 08       	sbc	r11, r1
    7284:	c1 08       	sbc	r12, r1
    7286:	d1 08       	sbc	r13, r1
    7288:	e2 0c       	add	r14, r2
    728a:	f3 1c       	adc	r15, r3
    728c:	04 1d       	adc	r16, r4
    728e:	15 1d       	adc	r17, r5
    7290:	e2 14       	cp	r14, r2
    7292:	f3 04       	cpc	r15, r3
    7294:	04 05       	cpc	r16, r4
    7296:	15 05       	cpc	r17, r5
    7298:	50 f0       	brcs	.+20     	; 0x72ae <__udivdi3+0x7be>
    729a:	e2 16       	cp	r14, r18
    729c:	f3 06       	cpc	r15, r19
    729e:	04 07       	cpc	r16, r20
    72a0:	15 07       	cpc	r17, r21
    72a2:	28 f4       	brcc	.+10     	; 0x72ae <__udivdi3+0x7be>
    72a4:	08 94       	sec
    72a6:	a1 08       	sbc	r10, r1
    72a8:	b1 08       	sbc	r11, r1
    72aa:	c1 08       	sbc	r12, r1
    72ac:	d1 08       	sbc	r13, r1
    72ae:	61 96       	adiw	r28, 0x11	; 17
    72b0:	ec ac       	ldd	r14, Y+60	; 0x3c
    72b2:	fd ac       	ldd	r15, Y+61	; 0x3d
    72b4:	0e ad       	ldd	r16, Y+62	; 0x3e
    72b6:	1f ad       	ldd	r17, Y+63	; 0x3f
    72b8:	61 97       	sbiw	r28, 0x11	; 17
    72ba:	d7 01       	movw	r26, r14
    72bc:	99 27       	eor	r25, r25
    72be:	88 27       	eor	r24, r24
    72c0:	96 01       	movw	r18, r12
    72c2:	85 01       	movw	r16, r10
    72c4:	08 2b       	or	r16, r24
    72c6:	19 2b       	or	r17, r25
    72c8:	2a 2b       	or	r18, r26
    72ca:	3b 2b       	or	r19, r27
    72cc:	09 ab       	std	Y+49, r16	; 0x31
    72ce:	1a ab       	std	Y+50, r17	; 0x32
    72d0:	2b ab       	std	Y+51, r18	; 0x33
    72d2:	3c ab       	std	Y+52, r19	; 0x34
    72d4:	62 c2       	rjmp	.+1220   	; 0x779a <__udivdi3+0xcaa>
    72d6:	6e 14       	cp	r6, r14
    72d8:	7f 04       	cpc	r7, r15
    72da:	80 06       	cpc	r8, r16
    72dc:	91 06       	cpc	r9, r17
    72de:	08 f4       	brcc	.+2      	; 0x72e2 <__udivdi3+0x7f2>
    72e0:	51 c2       	rjmp	.+1186   	; 0x7784 <__udivdi3+0xc94>
    72e2:	20 e0       	ldi	r18, 0x00	; 0
    72e4:	e2 16       	cp	r14, r18
    72e6:	20 e0       	ldi	r18, 0x00	; 0
    72e8:	f2 06       	cpc	r15, r18
    72ea:	21 e0       	ldi	r18, 0x01	; 1
    72ec:	02 07       	cpc	r16, r18
    72ee:	20 e0       	ldi	r18, 0x00	; 0
    72f0:	12 07       	cpc	r17, r18
    72f2:	88 f4       	brcc	.+34     	; 0x7316 <__udivdi3+0x826>
    72f4:	3f ef       	ldi	r19, 0xFF	; 255
    72f6:	e3 16       	cp	r14, r19
    72f8:	f1 04       	cpc	r15, r1
    72fa:	01 05       	cpc	r16, r1
    72fc:	11 05       	cpc	r17, r1
    72fe:	31 f0       	breq	.+12     	; 0x730c <__udivdi3+0x81c>
    7300:	28 f0       	brcs	.+10     	; 0x730c <__udivdi3+0x81c>
    7302:	48 e0       	ldi	r20, 0x08	; 8
    7304:	50 e0       	ldi	r21, 0x00	; 0
    7306:	60 e0       	ldi	r22, 0x00	; 0
    7308:	70 e0       	ldi	r23, 0x00	; 0
    730a:	17 c0       	rjmp	.+46     	; 0x733a <__udivdi3+0x84a>
    730c:	40 e0       	ldi	r20, 0x00	; 0
    730e:	50 e0       	ldi	r21, 0x00	; 0
    7310:	60 e0       	ldi	r22, 0x00	; 0
    7312:	70 e0       	ldi	r23, 0x00	; 0
    7314:	12 c0       	rjmp	.+36     	; 0x733a <__udivdi3+0x84a>
    7316:	40 e0       	ldi	r20, 0x00	; 0
    7318:	e4 16       	cp	r14, r20
    731a:	40 e0       	ldi	r20, 0x00	; 0
    731c:	f4 06       	cpc	r15, r20
    731e:	40 e0       	ldi	r20, 0x00	; 0
    7320:	04 07       	cpc	r16, r20
    7322:	41 e0       	ldi	r20, 0x01	; 1
    7324:	14 07       	cpc	r17, r20
    7326:	28 f0       	brcs	.+10     	; 0x7332 <__udivdi3+0x842>
    7328:	48 e1       	ldi	r20, 0x18	; 24
    732a:	50 e0       	ldi	r21, 0x00	; 0
    732c:	60 e0       	ldi	r22, 0x00	; 0
    732e:	70 e0       	ldi	r23, 0x00	; 0
    7330:	04 c0       	rjmp	.+8      	; 0x733a <__udivdi3+0x84a>
    7332:	40 e1       	ldi	r20, 0x10	; 16
    7334:	50 e0       	ldi	r21, 0x00	; 0
    7336:	60 e0       	ldi	r22, 0x00	; 0
    7338:	70 e0       	ldi	r23, 0x00	; 0
    733a:	d8 01       	movw	r26, r16
    733c:	c7 01       	movw	r24, r14
    733e:	04 2e       	mov	r0, r20
    7340:	04 c0       	rjmp	.+8      	; 0x734a <__udivdi3+0x85a>
    7342:	b6 95       	lsr	r27
    7344:	a7 95       	ror	r26
    7346:	97 95       	ror	r25
    7348:	87 95       	ror	r24
    734a:	0a 94       	dec	r0
    734c:	d2 f7       	brpl	.-12     	; 0x7342 <__udivdi3+0x852>
    734e:	83 5f       	subi	r24, 0xF3	; 243
    7350:	9f 4d       	sbci	r25, 0xDF	; 223
    7352:	dc 01       	movw	r26, r24
    7354:	2c 91       	ld	r18, X
    7356:	30 e2       	ldi	r19, 0x20	; 32
    7358:	a3 2e       	mov	r10, r19
    735a:	b1 2c       	mov	r11, r1
    735c:	c1 2c       	mov	r12, r1
    735e:	d1 2c       	mov	r13, r1
    7360:	d6 01       	movw	r26, r12
    7362:	c5 01       	movw	r24, r10
    7364:	84 1b       	sub	r24, r20
    7366:	95 0b       	sbc	r25, r21
    7368:	a6 0b       	sbc	r26, r22
    736a:	b7 0b       	sbc	r27, r23
    736c:	82 1b       	sub	r24, r18
    736e:	91 09       	sbc	r25, r1
    7370:	a1 09       	sbc	r26, r1
    7372:	b1 09       	sbc	r27, r1
    7374:	00 97       	sbiw	r24, 0x00	; 0
    7376:	a1 05       	cpc	r26, r1
    7378:	b1 05       	cpc	r27, r1
    737a:	89 f4       	brne	.+34     	; 0x739e <__udivdi3+0x8ae>
    737c:	e6 14       	cp	r14, r6
    737e:	f7 04       	cpc	r15, r7
    7380:	08 05       	cpc	r16, r8
    7382:	19 05       	cpc	r17, r9
    7384:	08 f4       	brcc	.+2      	; 0x7388 <__udivdi3+0x898>
    7386:	f2 c1       	rjmp	.+996    	; 0x776c <__udivdi3+0xc7c>
    7388:	6d a4       	ldd	r6, Y+45	; 0x2d
    738a:	7e a4       	ldd	r7, Y+46	; 0x2e
    738c:	8f a4       	ldd	r8, Y+47	; 0x2f
    738e:	98 a8       	ldd	r9, Y+48	; 0x30
    7390:	62 14       	cp	r6, r2
    7392:	73 04       	cpc	r7, r3
    7394:	84 04       	cpc	r8, r4
    7396:	95 04       	cpc	r9, r5
    7398:	08 f0       	brcs	.+2      	; 0x739c <__udivdi3+0x8ac>
    739a:	e8 c1       	rjmp	.+976    	; 0x776c <__udivdi3+0xc7c>
    739c:	f3 c1       	rjmp	.+998    	; 0x7784 <__udivdi3+0xc94>
    739e:	6e 96       	adiw	r28, 0x1e	; 30
    73a0:	8f af       	std	Y+63, r24	; 0x3f
    73a2:	6e 97       	sbiw	r28, 0x1e	; 30
    73a4:	08 2e       	mov	r0, r24
    73a6:	04 c0       	rjmp	.+8      	; 0x73b0 <__udivdi3+0x8c0>
    73a8:	ee 0c       	add	r14, r14
    73aa:	ff 1c       	adc	r15, r15
    73ac:	00 1f       	adc	r16, r16
    73ae:	11 1f       	adc	r17, r17
    73b0:	0a 94       	dec	r0
    73b2:	d2 f7       	brpl	.-12     	; 0x73a8 <__udivdi3+0x8b8>
    73b4:	6a 2d       	mov	r22, r10
    73b6:	68 1b       	sub	r22, r24
    73b8:	d2 01       	movw	r26, r4
    73ba:	c1 01       	movw	r24, r2
    73bc:	06 2e       	mov	r0, r22
    73be:	04 c0       	rjmp	.+8      	; 0x73c8 <__udivdi3+0x8d8>
    73c0:	b6 95       	lsr	r27
    73c2:	a7 95       	ror	r26
    73c4:	97 95       	ror	r25
    73c6:	87 95       	ror	r24
    73c8:	0a 94       	dec	r0
    73ca:	d2 f7       	brpl	.-12     	; 0x73c0 <__udivdi3+0x8d0>
    73cc:	5c 01       	movw	r10, r24
    73ce:	6d 01       	movw	r12, r26
    73d0:	ae 28       	or	r10, r14
    73d2:	bf 28       	or	r11, r15
    73d4:	c0 2a       	or	r12, r16
    73d6:	d1 2a       	or	r13, r17
    73d8:	ad a2       	std	Y+37, r10	; 0x25
    73da:	be a2       	std	Y+38, r11	; 0x26
    73dc:	cf a2       	std	Y+39, r12	; 0x27
    73de:	d8 a6       	std	Y+40, r13	; 0x28
    73e0:	72 01       	movw	r14, r4
    73e2:	61 01       	movw	r12, r2
    73e4:	6e 96       	adiw	r28, 0x1e	; 30
    73e6:	0f ac       	ldd	r0, Y+63	; 0x3f
    73e8:	6e 97       	sbiw	r28, 0x1e	; 30
    73ea:	04 c0       	rjmp	.+8      	; 0x73f4 <__udivdi3+0x904>
    73ec:	cc 0c       	add	r12, r12
    73ee:	dd 1c       	adc	r13, r13
    73f0:	ee 1c       	adc	r14, r14
    73f2:	ff 1c       	adc	r15, r15
    73f4:	0a 94       	dec	r0
    73f6:	d2 f7       	brpl	.-12     	; 0x73ec <__udivdi3+0x8fc>
    73f8:	c9 a2       	std	Y+33, r12	; 0x21
    73fa:	da a2       	std	Y+34, r13	; 0x22
    73fc:	eb a2       	std	Y+35, r14	; 0x23
    73fe:	fc a2       	std	Y+36, r15	; 0x24
    7400:	64 01       	movw	r12, r8
    7402:	53 01       	movw	r10, r6
    7404:	06 2e       	mov	r0, r22
    7406:	04 c0       	rjmp	.+8      	; 0x7410 <__udivdi3+0x920>
    7408:	d6 94       	lsr	r13
    740a:	c7 94       	ror	r12
    740c:	b7 94       	ror	r11
    740e:	a7 94       	ror	r10
    7410:	0a 94       	dec	r0
    7412:	d2 f7       	brpl	.-12     	; 0x7408 <__udivdi3+0x918>
    7414:	d4 01       	movw	r26, r8
    7416:	c3 01       	movw	r24, r6
    7418:	6e 96       	adiw	r28, 0x1e	; 30
    741a:	0f ac       	ldd	r0, Y+63	; 0x3f
    741c:	6e 97       	sbiw	r28, 0x1e	; 30
    741e:	04 c0       	rjmp	.+8      	; 0x7428 <__udivdi3+0x938>
    7420:	88 0f       	add	r24, r24
    7422:	99 1f       	adc	r25, r25
    7424:	aa 1f       	adc	r26, r26
    7426:	bb 1f       	adc	r27, r27
    7428:	0a 94       	dec	r0
    742a:	d2 f7       	brpl	.-12     	; 0x7420 <__udivdi3+0x930>
    742c:	ed a4       	ldd	r14, Y+45	; 0x2d
    742e:	fe a4       	ldd	r15, Y+46	; 0x2e
    7430:	0f a5       	ldd	r16, Y+47	; 0x2f
    7432:	18 a9       	ldd	r17, Y+48	; 0x30
    7434:	04 c0       	rjmp	.+8      	; 0x743e <__udivdi3+0x94e>
    7436:	16 95       	lsr	r17
    7438:	07 95       	ror	r16
    743a:	f7 94       	ror	r15
    743c:	e7 94       	ror	r14
    743e:	6a 95       	dec	r22
    7440:	d2 f7       	brpl	.-12     	; 0x7436 <__udivdi3+0x946>
    7442:	37 01       	movw	r6, r14
    7444:	48 01       	movw	r8, r16
    7446:	68 2a       	or	r6, r24
    7448:	79 2a       	or	r7, r25
    744a:	8a 2a       	or	r8, r26
    744c:	9b 2a       	or	r9, r27
    744e:	6d 8e       	std	Y+29, r6	; 0x1d
    7450:	7e 8e       	std	Y+30, r7	; 0x1e
    7452:	8f 8e       	std	Y+31, r8	; 0x1f
    7454:	98 a2       	std	Y+32, r9	; 0x20
    7456:	ed a0       	ldd	r14, Y+37	; 0x25
    7458:	fe a0       	ldd	r15, Y+38	; 0x26
    745a:	0f a1       	ldd	r16, Y+39	; 0x27
    745c:	18 a5       	ldd	r17, Y+40	; 0x28
    745e:	38 01       	movw	r6, r16
    7460:	88 24       	eor	r8, r8
    7462:	99 24       	eor	r9, r9
    7464:	98 01       	movw	r18, r16
    7466:	87 01       	movw	r16, r14
    7468:	20 70       	andi	r18, 0x00	; 0
    746a:	30 70       	andi	r19, 0x00	; 0
    746c:	65 96       	adiw	r28, 0x15	; 21
    746e:	0c af       	std	Y+60, r16	; 0x3c
    7470:	1d af       	std	Y+61, r17	; 0x3d
    7472:	2e af       	std	Y+62, r18	; 0x3e
    7474:	3f af       	std	Y+63, r19	; 0x3f
    7476:	65 97       	sbiw	r28, 0x15	; 21
    7478:	c6 01       	movw	r24, r12
    747a:	b5 01       	movw	r22, r10
    747c:	a4 01       	movw	r20, r8
    747e:	93 01       	movw	r18, r6
    7480:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__udivmodsi4>
    7484:	7b 01       	movw	r14, r22
    7486:	8c 01       	movw	r16, r24
    7488:	c6 01       	movw	r24, r12
    748a:	b5 01       	movw	r22, r10
    748c:	a4 01       	movw	r20, r8
    748e:	93 01       	movw	r18, r6
    7490:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__udivmodsi4>
    7494:	c9 01       	movw	r24, r18
    7496:	da 01       	movw	r26, r20
    7498:	1c 01       	movw	r2, r24
    749a:	2d 01       	movw	r4, r26
    749c:	c2 01       	movw	r24, r4
    749e:	b1 01       	movw	r22, r2
    74a0:	65 96       	adiw	r28, 0x15	; 21
    74a2:	2c ad       	ldd	r18, Y+60	; 0x3c
    74a4:	3d ad       	ldd	r19, Y+61	; 0x3d
    74a6:	4e ad       	ldd	r20, Y+62	; 0x3e
    74a8:	5f ad       	ldd	r21, Y+63	; 0x3f
    74aa:	65 97       	sbiw	r28, 0x15	; 21
    74ac:	0e 94 ca 43 	call	0x8794	; 0x8794 <__mulsi3>
    74b0:	9b 01       	movw	r18, r22
    74b2:	ac 01       	movw	r20, r24
    74b4:	87 01       	movw	r16, r14
    74b6:	ff 24       	eor	r15, r15
    74b8:	ee 24       	eor	r14, r14
    74ba:	ad 8c       	ldd	r10, Y+29	; 0x1d
    74bc:	be 8c       	ldd	r11, Y+30	; 0x1e
    74be:	cf 8c       	ldd	r12, Y+31	; 0x1f
    74c0:	d8 a0       	ldd	r13, Y+32	; 0x20
    74c2:	c6 01       	movw	r24, r12
    74c4:	aa 27       	eor	r26, r26
    74c6:	bb 27       	eor	r27, r27
    74c8:	57 01       	movw	r10, r14
    74ca:	68 01       	movw	r12, r16
    74cc:	a8 2a       	or	r10, r24
    74ce:	b9 2a       	or	r11, r25
    74d0:	ca 2a       	or	r12, r26
    74d2:	db 2a       	or	r13, r27
    74d4:	a2 16       	cp	r10, r18
    74d6:	b3 06       	cpc	r11, r19
    74d8:	c4 06       	cpc	r12, r20
    74da:	d5 06       	cpc	r13, r21
    74dc:	00 f5       	brcc	.+64     	; 0x751e <__udivdi3+0xa2e>
    74de:	08 94       	sec
    74e0:	21 08       	sbc	r2, r1
    74e2:	31 08       	sbc	r3, r1
    74e4:	41 08       	sbc	r4, r1
    74e6:	51 08       	sbc	r5, r1
    74e8:	ed a0       	ldd	r14, Y+37	; 0x25
    74ea:	fe a0       	ldd	r15, Y+38	; 0x26
    74ec:	0f a1       	ldd	r16, Y+39	; 0x27
    74ee:	18 a5       	ldd	r17, Y+40	; 0x28
    74f0:	ae 0c       	add	r10, r14
    74f2:	bf 1c       	adc	r11, r15
    74f4:	c0 1e       	adc	r12, r16
    74f6:	d1 1e       	adc	r13, r17
    74f8:	ae 14       	cp	r10, r14
    74fa:	bf 04       	cpc	r11, r15
    74fc:	c0 06       	cpc	r12, r16
    74fe:	d1 06       	cpc	r13, r17
    7500:	70 f0       	brcs	.+28     	; 0x751e <__udivdi3+0xa2e>
    7502:	a2 16       	cp	r10, r18
    7504:	b3 06       	cpc	r11, r19
    7506:	c4 06       	cpc	r12, r20
    7508:	d5 06       	cpc	r13, r21
    750a:	48 f4       	brcc	.+18     	; 0x751e <__udivdi3+0xa2e>
    750c:	08 94       	sec
    750e:	21 08       	sbc	r2, r1
    7510:	31 08       	sbc	r3, r1
    7512:	41 08       	sbc	r4, r1
    7514:	51 08       	sbc	r5, r1
    7516:	ae 0c       	add	r10, r14
    7518:	bf 1c       	adc	r11, r15
    751a:	c0 1e       	adc	r12, r16
    751c:	d1 1e       	adc	r13, r17
    751e:	a2 1a       	sub	r10, r18
    7520:	b3 0a       	sbc	r11, r19
    7522:	c4 0a       	sbc	r12, r20
    7524:	d5 0a       	sbc	r13, r21
    7526:	c6 01       	movw	r24, r12
    7528:	b5 01       	movw	r22, r10
    752a:	a4 01       	movw	r20, r8
    752c:	93 01       	movw	r18, r6
    752e:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__udivmodsi4>
    7532:	7b 01       	movw	r14, r22
    7534:	8c 01       	movw	r16, r24
    7536:	c6 01       	movw	r24, r12
    7538:	b5 01       	movw	r22, r10
    753a:	a4 01       	movw	r20, r8
    753c:	93 01       	movw	r18, r6
    753e:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <__udivmodsi4>
    7542:	c9 01       	movw	r24, r18
    7544:	da 01       	movw	r26, r20
    7546:	3c 01       	movw	r6, r24
    7548:	4d 01       	movw	r8, r26
    754a:	c4 01       	movw	r24, r8
    754c:	b3 01       	movw	r22, r6
    754e:	65 96       	adiw	r28, 0x15	; 21
    7550:	2c ad       	ldd	r18, Y+60	; 0x3c
    7552:	3d ad       	ldd	r19, Y+61	; 0x3d
    7554:	4e ad       	ldd	r20, Y+62	; 0x3e
    7556:	5f ad       	ldd	r21, Y+63	; 0x3f
    7558:	65 97       	sbiw	r28, 0x15	; 21
    755a:	0e 94 ca 43 	call	0x8794	; 0x8794 <__mulsi3>
    755e:	9b 01       	movw	r18, r22
    7560:	ac 01       	movw	r20, r24
    7562:	87 01       	movw	r16, r14
    7564:	ff 24       	eor	r15, r15
    7566:	ee 24       	eor	r14, r14
    7568:	8d 8d       	ldd	r24, Y+29	; 0x1d
    756a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    756c:	af 8d       	ldd	r26, Y+31	; 0x1f
    756e:	b8 a1       	ldd	r27, Y+32	; 0x20
    7570:	a0 70       	andi	r26, 0x00	; 0
    7572:	b0 70       	andi	r27, 0x00	; 0
    7574:	57 01       	movw	r10, r14
    7576:	68 01       	movw	r12, r16
    7578:	a8 2a       	or	r10, r24
    757a:	b9 2a       	or	r11, r25
    757c:	ca 2a       	or	r12, r26
    757e:	db 2a       	or	r13, r27
    7580:	a2 16       	cp	r10, r18
    7582:	b3 06       	cpc	r11, r19
    7584:	c4 06       	cpc	r12, r20
    7586:	d5 06       	cpc	r13, r21
    7588:	00 f5       	brcc	.+64     	; 0x75ca <__udivdi3+0xada>
    758a:	08 94       	sec
    758c:	61 08       	sbc	r6, r1
    758e:	71 08       	sbc	r7, r1
    7590:	81 08       	sbc	r8, r1
    7592:	91 08       	sbc	r9, r1
    7594:	6d a1       	ldd	r22, Y+37	; 0x25
    7596:	7e a1       	ldd	r23, Y+38	; 0x26
    7598:	8f a1       	ldd	r24, Y+39	; 0x27
    759a:	98 a5       	ldd	r25, Y+40	; 0x28
    759c:	a6 0e       	add	r10, r22
    759e:	b7 1e       	adc	r11, r23
    75a0:	c8 1e       	adc	r12, r24
    75a2:	d9 1e       	adc	r13, r25
    75a4:	a6 16       	cp	r10, r22
    75a6:	b7 06       	cpc	r11, r23
    75a8:	c8 06       	cpc	r12, r24
    75aa:	d9 06       	cpc	r13, r25
    75ac:	70 f0       	brcs	.+28     	; 0x75ca <__udivdi3+0xada>
    75ae:	a2 16       	cp	r10, r18
    75b0:	b3 06       	cpc	r11, r19
    75b2:	c4 06       	cpc	r12, r20
    75b4:	d5 06       	cpc	r13, r21
    75b6:	48 f4       	brcc	.+18     	; 0x75ca <__udivdi3+0xada>
    75b8:	08 94       	sec
    75ba:	61 08       	sbc	r6, r1
    75bc:	71 08       	sbc	r7, r1
    75be:	81 08       	sbc	r8, r1
    75c0:	91 08       	sbc	r9, r1
    75c2:	a6 0e       	add	r10, r22
    75c4:	b7 1e       	adc	r11, r23
    75c6:	c8 1e       	adc	r12, r24
    75c8:	d9 1e       	adc	r13, r25
    75ca:	d6 01       	movw	r26, r12
    75cc:	c5 01       	movw	r24, r10
    75ce:	82 1b       	sub	r24, r18
    75d0:	93 0b       	sbc	r25, r19
    75d2:	a4 0b       	sbc	r26, r20
    75d4:	b5 0b       	sbc	r27, r21
    75d6:	89 8f       	std	Y+25, r24	; 0x19
    75d8:	9a 8f       	std	Y+26, r25	; 0x1a
    75da:	ab 8f       	std	Y+27, r26	; 0x1b
    75dc:	bc 8f       	std	Y+28, r27	; 0x1c
    75de:	d1 01       	movw	r26, r2
    75e0:	99 27       	eor	r25, r25
    75e2:	88 27       	eor	r24, r24
    75e4:	64 01       	movw	r12, r8
    75e6:	53 01       	movw	r10, r6
    75e8:	a8 2a       	or	r10, r24
    75ea:	b9 2a       	or	r11, r25
    75ec:	ca 2a       	or	r12, r26
    75ee:	db 2a       	or	r13, r27
    75f0:	a9 aa       	std	Y+49, r10	; 0x31
    75f2:	ba aa       	std	Y+50, r11	; 0x32
    75f4:	cb aa       	std	Y+51, r12	; 0x33
    75f6:	dc aa       	std	Y+52, r13	; 0x34
    75f8:	86 01       	movw	r16, r12
    75fa:	75 01       	movw	r14, r10
    75fc:	2f ef       	ldi	r18, 0xFF	; 255
    75fe:	3f ef       	ldi	r19, 0xFF	; 255
    7600:	40 e0       	ldi	r20, 0x00	; 0
    7602:	50 e0       	ldi	r21, 0x00	; 0
    7604:	e2 22       	and	r14, r18
    7606:	f3 22       	and	r15, r19
    7608:	04 23       	and	r16, r20
    760a:	15 23       	and	r17, r21
    760c:	a6 01       	movw	r20, r12
    760e:	66 27       	eor	r22, r22
    7610:	77 27       	eor	r23, r23
    7612:	6d 96       	adiw	r28, 0x1d	; 29
    7614:	4c af       	std	Y+60, r20	; 0x3c
    7616:	5d af       	std	Y+61, r21	; 0x3d
    7618:	6e af       	std	Y+62, r22	; 0x3e
    761a:	7f af       	std	Y+63, r23	; 0x3f
    761c:	6d 97       	sbiw	r28, 0x1d	; 29
    761e:	a9 a0       	ldd	r10, Y+33	; 0x21
    7620:	ba a0       	ldd	r11, Y+34	; 0x22
    7622:	cb a0       	ldd	r12, Y+35	; 0x23
    7624:	dc a0       	ldd	r13, Y+36	; 0x24
    7626:	6f ef       	ldi	r22, 0xFF	; 255
    7628:	7f ef       	ldi	r23, 0xFF	; 255
    762a:	80 e0       	ldi	r24, 0x00	; 0
    762c:	90 e0       	ldi	r25, 0x00	; 0
    762e:	a6 22       	and	r10, r22
    7630:	b7 22       	and	r11, r23
    7632:	c8 22       	and	r12, r24
    7634:	d9 22       	and	r13, r25
    7636:	89 a1       	ldd	r24, Y+33	; 0x21
    7638:	9a a1       	ldd	r25, Y+34	; 0x22
    763a:	ab a1       	ldd	r26, Y+35	; 0x23
    763c:	bc a1       	ldd	r27, Y+36	; 0x24
    763e:	1d 01       	movw	r2, r26
    7640:	44 24       	eor	r4, r4
    7642:	55 24       	eor	r5, r5
    7644:	c8 01       	movw	r24, r16
    7646:	b7 01       	movw	r22, r14
    7648:	a6 01       	movw	r20, r12
    764a:	95 01       	movw	r18, r10
    764c:	0e 94 ca 43 	call	0x8794	; 0x8794 <__mulsi3>
    7650:	69 96       	adiw	r28, 0x19	; 25
    7652:	6c af       	std	Y+60, r22	; 0x3c
    7654:	7d af       	std	Y+61, r23	; 0x3d
    7656:	8e af       	std	Y+62, r24	; 0x3e
    7658:	9f af       	std	Y+63, r25	; 0x3f
    765a:	69 97       	sbiw	r28, 0x19	; 25
    765c:	c8 01       	movw	r24, r16
    765e:	b7 01       	movw	r22, r14
    7660:	a2 01       	movw	r20, r4
    7662:	91 01       	movw	r18, r2
    7664:	0e 94 ca 43 	call	0x8794	; 0x8794 <__mulsi3>
    7668:	3b 01       	movw	r6, r22
    766a:	4c 01       	movw	r8, r24
    766c:	6d 96       	adiw	r28, 0x1d	; 29
    766e:	6c ad       	ldd	r22, Y+60	; 0x3c
    7670:	7d ad       	ldd	r23, Y+61	; 0x3d
    7672:	8e ad       	ldd	r24, Y+62	; 0x3e
    7674:	9f ad       	ldd	r25, Y+63	; 0x3f
    7676:	6d 97       	sbiw	r28, 0x1d	; 29
    7678:	a6 01       	movw	r20, r12
    767a:	95 01       	movw	r18, r10
    767c:	0e 94 ca 43 	call	0x8794	; 0x8794 <__mulsi3>
    7680:	7b 01       	movw	r14, r22
    7682:	8c 01       	movw	r16, r24
    7684:	6d 96       	adiw	r28, 0x1d	; 29
    7686:	6c ad       	ldd	r22, Y+60	; 0x3c
    7688:	7d ad       	ldd	r23, Y+61	; 0x3d
    768a:	8e ad       	ldd	r24, Y+62	; 0x3e
    768c:	9f ad       	ldd	r25, Y+63	; 0x3f
    768e:	6d 97       	sbiw	r28, 0x1d	; 29
    7690:	a2 01       	movw	r20, r4
    7692:	91 01       	movw	r18, r2
    7694:	0e 94 ca 43 	call	0x8794	; 0x8794 <__mulsi3>
    7698:	5b 01       	movw	r10, r22
    769a:	6c 01       	movw	r12, r24
    769c:	a8 01       	movw	r20, r16
    769e:	97 01       	movw	r18, r14
    76a0:	26 0d       	add	r18, r6
    76a2:	37 1d       	adc	r19, r7
    76a4:	48 1d       	adc	r20, r8
    76a6:	59 1d       	adc	r21, r9
    76a8:	69 96       	adiw	r28, 0x19	; 25
    76aa:	6c ac       	ldd	r6, Y+60	; 0x3c
    76ac:	7d ac       	ldd	r7, Y+61	; 0x3d
    76ae:	8e ac       	ldd	r8, Y+62	; 0x3e
    76b0:	9f ac       	ldd	r9, Y+63	; 0x3f
    76b2:	69 97       	sbiw	r28, 0x19	; 25
    76b4:	c4 01       	movw	r24, r8
    76b6:	aa 27       	eor	r26, r26
    76b8:	bb 27       	eor	r27, r27
    76ba:	28 0f       	add	r18, r24
    76bc:	39 1f       	adc	r19, r25
    76be:	4a 1f       	adc	r20, r26
    76c0:	5b 1f       	adc	r21, r27
    76c2:	2e 15       	cp	r18, r14
    76c4:	3f 05       	cpc	r19, r15
    76c6:	40 07       	cpc	r20, r16
    76c8:	51 07       	cpc	r21, r17
    76ca:	48 f4       	brcc	.+18     	; 0x76de <__udivdi3+0xbee>
    76cc:	e1 2c       	mov	r14, r1
    76ce:	f1 2c       	mov	r15, r1
    76d0:	61 e0       	ldi	r22, 0x01	; 1
    76d2:	06 2f       	mov	r16, r22
    76d4:	11 2d       	mov	r17, r1
    76d6:	ae 0c       	add	r10, r14
    76d8:	bf 1c       	adc	r11, r15
    76da:	c0 1e       	adc	r12, r16
    76dc:	d1 1e       	adc	r13, r17
    76de:	ca 01       	movw	r24, r20
    76e0:	aa 27       	eor	r26, r26
    76e2:	bb 27       	eor	r27, r27
    76e4:	bc 01       	movw	r22, r24
    76e6:	cd 01       	movw	r24, r26
    76e8:	6a 0d       	add	r22, r10
    76ea:	7b 1d       	adc	r23, r11
    76ec:	8c 1d       	adc	r24, r12
    76ee:	9d 1d       	adc	r25, r13
    76f0:	69 8c       	ldd	r6, Y+25	; 0x19
    76f2:	7a 8c       	ldd	r7, Y+26	; 0x1a
    76f4:	8b 8c       	ldd	r8, Y+27	; 0x1b
    76f6:	9c 8c       	ldd	r9, Y+28	; 0x1c
    76f8:	66 16       	cp	r6, r22
    76fa:	77 06       	cpc	r7, r23
    76fc:	88 06       	cpc	r8, r24
    76fe:	99 06       	cpc	r9, r25
    7700:	40 f1       	brcs	.+80     	; 0x7752 <__udivdi3+0xc62>
    7702:	66 15       	cp	r22, r6
    7704:	77 05       	cpc	r23, r7
    7706:	88 05       	cpc	r24, r8
    7708:	99 05       	cpc	r25, r9
    770a:	09 f0       	breq	.+2      	; 0x770e <__udivdi3+0xc1e>
    770c:	43 c0       	rjmp	.+134    	; 0x7794 <__udivdi3+0xca4>
    770e:	d9 01       	movw	r26, r18
    7710:	99 27       	eor	r25, r25
    7712:	88 27       	eor	r24, r24
    7714:	69 96       	adiw	r28, 0x19	; 25
    7716:	2c ad       	ldd	r18, Y+60	; 0x3c
    7718:	3d ad       	ldd	r19, Y+61	; 0x3d
    771a:	4e ad       	ldd	r20, Y+62	; 0x3e
    771c:	5f ad       	ldd	r21, Y+63	; 0x3f
    771e:	69 97       	sbiw	r28, 0x19	; 25
    7720:	40 70       	andi	r20, 0x00	; 0
    7722:	50 70       	andi	r21, 0x00	; 0
    7724:	82 0f       	add	r24, r18
    7726:	93 1f       	adc	r25, r19
    7728:	a4 1f       	adc	r26, r20
    772a:	b5 1f       	adc	r27, r21
    772c:	2d a5       	ldd	r18, Y+45	; 0x2d
    772e:	3e a5       	ldd	r19, Y+46	; 0x2e
    7730:	4f a5       	ldd	r20, Y+47	; 0x2f
    7732:	58 a9       	ldd	r21, Y+48	; 0x30
    7734:	6e 96       	adiw	r28, 0x1e	; 30
    7736:	0f ac       	ldd	r0, Y+63	; 0x3f
    7738:	6e 97       	sbiw	r28, 0x1e	; 30
    773a:	04 c0       	rjmp	.+8      	; 0x7744 <__udivdi3+0xc54>
    773c:	22 0f       	add	r18, r18
    773e:	33 1f       	adc	r19, r19
    7740:	44 1f       	adc	r20, r20
    7742:	55 1f       	adc	r21, r21
    7744:	0a 94       	dec	r0
    7746:	d2 f7       	brpl	.-12     	; 0x773c <__udivdi3+0xc4c>
    7748:	28 17       	cp	r18, r24
    774a:	39 07       	cpc	r19, r25
    774c:	4a 07       	cpc	r20, r26
    774e:	5b 07       	cpc	r21, r27
    7750:	08 f5       	brcc	.+66     	; 0x7794 <__udivdi3+0xca4>
    7752:	09 a9       	ldd	r16, Y+49	; 0x31
    7754:	1a a9       	ldd	r17, Y+50	; 0x32
    7756:	2b a9       	ldd	r18, Y+51	; 0x33
    7758:	3c a9       	ldd	r19, Y+52	; 0x34
    775a:	01 50       	subi	r16, 0x01	; 1
    775c:	10 40       	sbci	r17, 0x00	; 0
    775e:	20 40       	sbci	r18, 0x00	; 0
    7760:	30 40       	sbci	r19, 0x00	; 0
    7762:	09 ab       	std	Y+49, r16	; 0x31
    7764:	1a ab       	std	Y+50, r17	; 0x32
    7766:	2b ab       	std	Y+51, r18	; 0x33
    7768:	3c ab       	std	Y+52, r19	; 0x34
    776a:	14 c0       	rjmp	.+40     	; 0x7794 <__udivdi3+0xca4>
    776c:	66 24       	eor	r6, r6
    776e:	77 24       	eor	r7, r7
    7770:	43 01       	movw	r8, r6
    7772:	21 e0       	ldi	r18, 0x01	; 1
    7774:	30 e0       	ldi	r19, 0x00	; 0
    7776:	40 e0       	ldi	r20, 0x00	; 0
    7778:	50 e0       	ldi	r21, 0x00	; 0
    777a:	29 ab       	std	Y+49, r18	; 0x31
    777c:	3a ab       	std	Y+50, r19	; 0x32
    777e:	4b ab       	std	Y+51, r20	; 0x33
    7780:	5c ab       	std	Y+52, r21	; 0x34
    7782:	0b c0       	rjmp	.+22     	; 0x779a <__udivdi3+0xcaa>
    7784:	66 24       	eor	r6, r6
    7786:	77 24       	eor	r7, r7
    7788:	43 01       	movw	r8, r6
    778a:	19 aa       	std	Y+49, r1	; 0x31
    778c:	1a aa       	std	Y+50, r1	; 0x32
    778e:	1b aa       	std	Y+51, r1	; 0x33
    7790:	1c aa       	std	Y+52, r1	; 0x34
    7792:	03 c0       	rjmp	.+6      	; 0x779a <__udivdi3+0xcaa>
    7794:	66 24       	eor	r6, r6
    7796:	77 24       	eor	r7, r7
    7798:	43 01       	movw	r8, r6
    779a:	fe 01       	movw	r30, r28
    779c:	71 96       	adiw	r30, 0x11	; 17
    779e:	88 e0       	ldi	r24, 0x08	; 8
    77a0:	df 01       	movw	r26, r30
    77a2:	1d 92       	st	X+, r1
    77a4:	8a 95       	dec	r24
    77a6:	e9 f7       	brne	.-6      	; 0x77a2 <__udivdi3+0xcb2>
    77a8:	a9 a8       	ldd	r10, Y+49	; 0x31
    77aa:	ba a8       	ldd	r11, Y+50	; 0x32
    77ac:	cb a8       	ldd	r12, Y+51	; 0x33
    77ae:	dc a8       	ldd	r13, Y+52	; 0x34
    77b0:	a9 8a       	std	Y+17, r10	; 0x11
    77b2:	ba 8a       	std	Y+18, r11	; 0x12
    77b4:	cb 8a       	std	Y+19, r12	; 0x13
    77b6:	dc 8a       	std	Y+20, r13	; 0x14
    77b8:	6d 8a       	std	Y+21, r6	; 0x15
    77ba:	7e 8a       	std	Y+22, r7	; 0x16
    77bc:	8f 8a       	std	Y+23, r8	; 0x17
    77be:	98 8e       	std	Y+24, r9	; 0x18
    77c0:	29 a9       	ldd	r18, Y+49	; 0x31
    77c2:	3a 89       	ldd	r19, Y+18	; 0x12
    77c4:	4b 89       	ldd	r20, Y+19	; 0x13
    77c6:	5c 89       	ldd	r21, Y+20	; 0x14
    77c8:	66 2d       	mov	r22, r6
    77ca:	7e 89       	ldd	r23, Y+22	; 0x16
    77cc:	8f 89       	ldd	r24, Y+23	; 0x17
    77ce:	98 8d       	ldd	r25, Y+24	; 0x18
    77d0:	c2 5a       	subi	r28, 0xA2	; 162
    77d2:	df 4f       	sbci	r29, 0xFF	; 255
    77d4:	e2 e1       	ldi	r30, 0x12	; 18
    77d6:	0c 94 27 44 	jmp	0x884e	; 0x884e <__epilogue_restores__>

000077da <vfprintf>:
    77da:	2f 92       	push	r2
    77dc:	3f 92       	push	r3
    77de:	4f 92       	push	r4
    77e0:	5f 92       	push	r5
    77e2:	6f 92       	push	r6
    77e4:	7f 92       	push	r7
    77e6:	8f 92       	push	r8
    77e8:	9f 92       	push	r9
    77ea:	af 92       	push	r10
    77ec:	bf 92       	push	r11
    77ee:	cf 92       	push	r12
    77f0:	df 92       	push	r13
    77f2:	ef 92       	push	r14
    77f4:	ff 92       	push	r15
    77f6:	0f 93       	push	r16
    77f8:	1f 93       	push	r17
    77fa:	df 93       	push	r29
    77fc:	cf 93       	push	r28
    77fe:	cd b7       	in	r28, 0x3d	; 61
    7800:	de b7       	in	r29, 0x3e	; 62
    7802:	61 97       	sbiw	r28, 0x11	; 17
    7804:	cd bf       	out	0x3d, r28	; 61
    7806:	de bf       	out	0x3e, r29	; 62
    7808:	3c 01       	movw	r6, r24
    780a:	6e 87       	std	Y+14, r22	; 0x0e
    780c:	7f 87       	std	Y+15, r23	; 0x0f
    780e:	6a 01       	movw	r12, r20
    7810:	fc 01       	movw	r30, r24
    7812:	16 82       	std	Z+6, r1	; 0x06
    7814:	17 82       	std	Z+7, r1	; 0x07
    7816:	83 81       	ldd	r24, Z+3	; 0x03
    7818:	81 fd       	sbrc	r24, 1
    781a:	03 c0       	rjmp	.+6      	; 0x7822 <vfprintf+0x48>
    781c:	6f ef       	ldi	r22, 0xFF	; 255
    781e:	7f ef       	ldi	r23, 0xFF	; 255
    7820:	6f c3       	rjmp	.+1758   	; 0x7f00 <vfprintf+0x726>
    7822:	9e 01       	movw	r18, r28
    7824:	2f 5f       	subi	r18, 0xFF	; 255
    7826:	3f 4f       	sbci	r19, 0xFF	; 255
    7828:	28 8b       	std	Y+16, r18	; 0x10
    782a:	39 8b       	std	Y+17, r19	; 0x11
    782c:	f3 01       	movw	r30, r6
    782e:	23 81       	ldd	r18, Z+3	; 0x03
    7830:	ee 85       	ldd	r30, Y+14	; 0x0e
    7832:	ff 85       	ldd	r31, Y+15	; 0x0f
    7834:	23 fd       	sbrc	r18, 3
    7836:	85 91       	lpm	r24, Z+
    7838:	23 ff       	sbrs	r18, 3
    783a:	81 91       	ld	r24, Z+
    783c:	ee 87       	std	Y+14, r30	; 0x0e
    783e:	ff 87       	std	Y+15, r31	; 0x0f
    7840:	88 23       	and	r24, r24
    7842:	09 f4       	brne	.+2      	; 0x7846 <vfprintf+0x6c>
    7844:	5a c3       	rjmp	.+1716   	; 0x7efa <vfprintf+0x720>
    7846:	85 32       	cpi	r24, 0x25	; 37
    7848:	51 f4       	brne	.+20     	; 0x785e <vfprintf+0x84>
    784a:	ee 85       	ldd	r30, Y+14	; 0x0e
    784c:	ff 85       	ldd	r31, Y+15	; 0x0f
    784e:	23 fd       	sbrc	r18, 3
    7850:	85 91       	lpm	r24, Z+
    7852:	23 ff       	sbrs	r18, 3
    7854:	81 91       	ld	r24, Z+
    7856:	ee 87       	std	Y+14, r30	; 0x0e
    7858:	ff 87       	std	Y+15, r31	; 0x0f
    785a:	85 32       	cpi	r24, 0x25	; 37
    785c:	29 f4       	brne	.+10     	; 0x7868 <vfprintf+0x8e>
    785e:	90 e0       	ldi	r25, 0x00	; 0
    7860:	b3 01       	movw	r22, r6
    7862:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7866:	e2 cf       	rjmp	.-60     	; 0x782c <vfprintf+0x52>
    7868:	98 2f       	mov	r25, r24
    786a:	10 e0       	ldi	r17, 0x00	; 0
    786c:	88 24       	eor	r8, r8
    786e:	99 24       	eor	r9, r9
    7870:	10 32       	cpi	r17, 0x20	; 32
    7872:	b0 f4       	brcc	.+44     	; 0x78a0 <vfprintf+0xc6>
    7874:	9b 32       	cpi	r25, 0x2B	; 43
    7876:	69 f0       	breq	.+26     	; 0x7892 <vfprintf+0xb8>
    7878:	9c 32       	cpi	r25, 0x2C	; 44
    787a:	28 f4       	brcc	.+10     	; 0x7886 <vfprintf+0xac>
    787c:	90 32       	cpi	r25, 0x20	; 32
    787e:	51 f0       	breq	.+20     	; 0x7894 <vfprintf+0xba>
    7880:	93 32       	cpi	r25, 0x23	; 35
    7882:	71 f4       	brne	.+28     	; 0x78a0 <vfprintf+0xc6>
    7884:	0b c0       	rjmp	.+22     	; 0x789c <vfprintf+0xc2>
    7886:	9d 32       	cpi	r25, 0x2D	; 45
    7888:	39 f0       	breq	.+14     	; 0x7898 <vfprintf+0xbe>
    788a:	90 33       	cpi	r25, 0x30	; 48
    788c:	49 f4       	brne	.+18     	; 0x78a0 <vfprintf+0xc6>
    788e:	11 60       	ori	r17, 0x01	; 1
    7890:	28 c0       	rjmp	.+80     	; 0x78e2 <vfprintf+0x108>
    7892:	12 60       	ori	r17, 0x02	; 2
    7894:	14 60       	ori	r17, 0x04	; 4
    7896:	25 c0       	rjmp	.+74     	; 0x78e2 <vfprintf+0x108>
    7898:	18 60       	ori	r17, 0x08	; 8
    789a:	23 c0       	rjmp	.+70     	; 0x78e2 <vfprintf+0x108>
    789c:	10 61       	ori	r17, 0x10	; 16
    789e:	21 c0       	rjmp	.+66     	; 0x78e2 <vfprintf+0x108>
    78a0:	17 fd       	sbrc	r17, 7
    78a2:	2a c0       	rjmp	.+84     	; 0x78f8 <vfprintf+0x11e>
    78a4:	89 2f       	mov	r24, r25
    78a6:	80 53       	subi	r24, 0x30	; 48
    78a8:	8a 30       	cpi	r24, 0x0A	; 10
    78aa:	78 f4       	brcc	.+30     	; 0x78ca <vfprintf+0xf0>
    78ac:	16 ff       	sbrs	r17, 6
    78ae:	06 c0       	rjmp	.+12     	; 0x78bc <vfprintf+0xe2>
    78b0:	fa e0       	ldi	r31, 0x0A	; 10
    78b2:	9f 9e       	mul	r9, r31
    78b4:	90 2c       	mov	r9, r0
    78b6:	11 24       	eor	r1, r1
    78b8:	98 0e       	add	r9, r24
    78ba:	13 c0       	rjmp	.+38     	; 0x78e2 <vfprintf+0x108>
    78bc:	3a e0       	ldi	r19, 0x0A	; 10
    78be:	83 9e       	mul	r8, r19
    78c0:	80 2c       	mov	r8, r0
    78c2:	11 24       	eor	r1, r1
    78c4:	88 0e       	add	r8, r24
    78c6:	10 62       	ori	r17, 0x20	; 32
    78c8:	0c c0       	rjmp	.+24     	; 0x78e2 <vfprintf+0x108>
    78ca:	9e 32       	cpi	r25, 0x2E	; 46
    78cc:	21 f4       	brne	.+8      	; 0x78d6 <vfprintf+0xfc>
    78ce:	16 fd       	sbrc	r17, 6
    78d0:	14 c3       	rjmp	.+1576   	; 0x7efa <vfprintf+0x720>
    78d2:	10 64       	ori	r17, 0x40	; 64
    78d4:	06 c0       	rjmp	.+12     	; 0x78e2 <vfprintf+0x108>
    78d6:	9c 36       	cpi	r25, 0x6C	; 108
    78d8:	11 f4       	brne	.+4      	; 0x78de <vfprintf+0x104>
    78da:	10 68       	ori	r17, 0x80	; 128
    78dc:	02 c0       	rjmp	.+4      	; 0x78e2 <vfprintf+0x108>
    78de:	98 36       	cpi	r25, 0x68	; 104
    78e0:	59 f4       	brne	.+22     	; 0x78f8 <vfprintf+0x11e>
    78e2:	ee 85       	ldd	r30, Y+14	; 0x0e
    78e4:	ff 85       	ldd	r31, Y+15	; 0x0f
    78e6:	23 fd       	sbrc	r18, 3
    78e8:	95 91       	lpm	r25, Z+
    78ea:	23 ff       	sbrs	r18, 3
    78ec:	91 91       	ld	r25, Z+
    78ee:	ee 87       	std	Y+14, r30	; 0x0e
    78f0:	ff 87       	std	Y+15, r31	; 0x0f
    78f2:	99 23       	and	r25, r25
    78f4:	09 f0       	breq	.+2      	; 0x78f8 <vfprintf+0x11e>
    78f6:	bc cf       	rjmp	.-136    	; 0x7870 <vfprintf+0x96>
    78f8:	89 2f       	mov	r24, r25
    78fa:	85 54       	subi	r24, 0x45	; 69
    78fc:	83 30       	cpi	r24, 0x03	; 3
    78fe:	20 f4       	brcc	.+8      	; 0x7908 <vfprintf+0x12e>
    7900:	81 2f       	mov	r24, r17
    7902:	80 61       	ori	r24, 0x10	; 16
    7904:	90 5e       	subi	r25, 0xE0	; 224
    7906:	07 c0       	rjmp	.+14     	; 0x7916 <vfprintf+0x13c>
    7908:	89 2f       	mov	r24, r25
    790a:	85 56       	subi	r24, 0x65	; 101
    790c:	83 30       	cpi	r24, 0x03	; 3
    790e:	08 f0       	brcs	.+2      	; 0x7912 <vfprintf+0x138>
    7910:	9f c1       	rjmp	.+830    	; 0x7c50 <vfprintf+0x476>
    7912:	81 2f       	mov	r24, r17
    7914:	8f 7e       	andi	r24, 0xEF	; 239
    7916:	86 fd       	sbrc	r24, 6
    7918:	02 c0       	rjmp	.+4      	; 0x791e <vfprintf+0x144>
    791a:	76 e0       	ldi	r23, 0x06	; 6
    791c:	97 2e       	mov	r9, r23
    791e:	6f e3       	ldi	r22, 0x3F	; 63
    7920:	f6 2e       	mov	r15, r22
    7922:	f8 22       	and	r15, r24
    7924:	95 36       	cpi	r25, 0x65	; 101
    7926:	19 f4       	brne	.+6      	; 0x792e <vfprintf+0x154>
    7928:	f0 e4       	ldi	r31, 0x40	; 64
    792a:	ff 2a       	or	r15, r31
    792c:	07 c0       	rjmp	.+14     	; 0x793c <vfprintf+0x162>
    792e:	96 36       	cpi	r25, 0x66	; 102
    7930:	19 f4       	brne	.+6      	; 0x7938 <vfprintf+0x15e>
    7932:	20 e8       	ldi	r18, 0x80	; 128
    7934:	f2 2a       	or	r15, r18
    7936:	02 c0       	rjmp	.+4      	; 0x793c <vfprintf+0x162>
    7938:	91 10       	cpse	r9, r1
    793a:	9a 94       	dec	r9
    793c:	f7 fe       	sbrs	r15, 7
    793e:	0a c0       	rjmp	.+20     	; 0x7954 <vfprintf+0x17a>
    7940:	3b e3       	ldi	r19, 0x3B	; 59
    7942:	39 15       	cp	r19, r9
    7944:	18 f4       	brcc	.+6      	; 0x794c <vfprintf+0x172>
    7946:	5c e3       	ldi	r21, 0x3C	; 60
    7948:	b5 2e       	mov	r11, r21
    794a:	02 c0       	rjmp	.+4      	; 0x7950 <vfprintf+0x176>
    794c:	b9 2c       	mov	r11, r9
    794e:	b3 94       	inc	r11
    7950:	27 e0       	ldi	r18, 0x07	; 7
    7952:	09 c0       	rjmp	.+18     	; 0x7966 <vfprintf+0x18c>
    7954:	47 e0       	ldi	r20, 0x07	; 7
    7956:	49 15       	cp	r20, r9
    7958:	20 f4       	brcc	.+8      	; 0x7962 <vfprintf+0x188>
    795a:	bb 24       	eor	r11, r11
    795c:	47 e0       	ldi	r20, 0x07	; 7
    795e:	94 2e       	mov	r9, r20
    7960:	f7 cf       	rjmp	.-18     	; 0x7950 <vfprintf+0x176>
    7962:	29 2d       	mov	r18, r9
    7964:	bb 24       	eor	r11, r11
    7966:	c6 01       	movw	r24, r12
    7968:	04 96       	adiw	r24, 0x04	; 4
    796a:	8c 87       	std	Y+12, r24	; 0x0c
    796c:	9d 87       	std	Y+13, r25	; 0x0d
    796e:	f6 01       	movw	r30, r12
    7970:	60 81       	ld	r22, Z
    7972:	71 81       	ldd	r23, Z+1	; 0x01
    7974:	82 81       	ldd	r24, Z+2	; 0x02
    7976:	93 81       	ldd	r25, Z+3	; 0x03
    7978:	ae 01       	movw	r20, r28
    797a:	4f 5f       	subi	r20, 0xFF	; 255
    797c:	5f 4f       	sbci	r21, 0xFF	; 255
    797e:	0b 2d       	mov	r16, r11
    7980:	0e 94 ce 45 	call	0x8b9c	; 0x8b9c <__ftoa_engine>
    7984:	6c 01       	movw	r12, r24
    7986:	09 81       	ldd	r16, Y+1	; 0x01
    7988:	20 2e       	mov	r2, r16
    798a:	33 24       	eor	r3, r3
    798c:	00 ff       	sbrs	r16, 0
    798e:	04 c0       	rjmp	.+8      	; 0x7998 <vfprintf+0x1be>
    7990:	03 fd       	sbrc	r16, 3
    7992:	02 c0       	rjmp	.+4      	; 0x7998 <vfprintf+0x1be>
    7994:	1d e2       	ldi	r17, 0x2D	; 45
    7996:	09 c0       	rjmp	.+18     	; 0x79aa <vfprintf+0x1d0>
    7998:	f1 fe       	sbrs	r15, 1
    799a:	02 c0       	rjmp	.+4      	; 0x79a0 <vfprintf+0x1c6>
    799c:	1b e2       	ldi	r17, 0x2B	; 43
    799e:	05 c0       	rjmp	.+10     	; 0x79aa <vfprintf+0x1d0>
    79a0:	f2 fc       	sbrc	r15, 2
    79a2:	02 c0       	rjmp	.+4      	; 0x79a8 <vfprintf+0x1ce>
    79a4:	10 e0       	ldi	r17, 0x00	; 0
    79a6:	01 c0       	rjmp	.+2      	; 0x79aa <vfprintf+0x1d0>
    79a8:	10 e2       	ldi	r17, 0x20	; 32
    79aa:	c1 01       	movw	r24, r2
    79ac:	8c 70       	andi	r24, 0x0C	; 12
    79ae:	90 70       	andi	r25, 0x00	; 0
    79b0:	89 2b       	or	r24, r25
    79b2:	b9 f1       	breq	.+110    	; 0x7a22 <vfprintf+0x248>
    79b4:	11 23       	and	r17, r17
    79b6:	11 f4       	brne	.+4      	; 0x79bc <vfprintf+0x1e2>
    79b8:	83 e0       	ldi	r24, 0x03	; 3
    79ba:	01 c0       	rjmp	.+2      	; 0x79be <vfprintf+0x1e4>
    79bc:	84 e0       	ldi	r24, 0x04	; 4
    79be:	88 15       	cp	r24, r8
    79c0:	10 f0       	brcs	.+4      	; 0x79c6 <vfprintf+0x1ec>
    79c2:	88 24       	eor	r8, r8
    79c4:	0a c0       	rjmp	.+20     	; 0x79da <vfprintf+0x200>
    79c6:	88 1a       	sub	r8, r24
    79c8:	f3 fc       	sbrc	r15, 3
    79ca:	07 c0       	rjmp	.+14     	; 0x79da <vfprintf+0x200>
    79cc:	80 e2       	ldi	r24, 0x20	; 32
    79ce:	90 e0       	ldi	r25, 0x00	; 0
    79d0:	b3 01       	movw	r22, r6
    79d2:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    79d6:	8a 94       	dec	r8
    79d8:	c9 f7       	brne	.-14     	; 0x79cc <vfprintf+0x1f2>
    79da:	11 23       	and	r17, r17
    79dc:	29 f0       	breq	.+10     	; 0x79e8 <vfprintf+0x20e>
    79de:	81 2f       	mov	r24, r17
    79e0:	90 e0       	ldi	r25, 0x00	; 0
    79e2:	b3 01       	movw	r22, r6
    79e4:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    79e8:	23 fe       	sbrs	r2, 3
    79ea:	03 c0       	rjmp	.+6      	; 0x79f2 <vfprintf+0x218>
    79ec:	03 e3       	ldi	r16, 0x33	; 51
    79ee:	12 e0       	ldi	r17, 0x02	; 2
    79f0:	0e c0       	rjmp	.+28     	; 0x7a0e <vfprintf+0x234>
    79f2:	07 e3       	ldi	r16, 0x37	; 55
    79f4:	12 e0       	ldi	r17, 0x02	; 2
    79f6:	0b c0       	rjmp	.+22     	; 0x7a0e <vfprintf+0x234>
    79f8:	e1 14       	cp	r14, r1
    79fa:	f1 04       	cpc	r15, r1
    79fc:	09 f0       	breq	.+2      	; 0x7a00 <vfprintf+0x226>
    79fe:	80 52       	subi	r24, 0x20	; 32
    7a00:	90 e0       	ldi	r25, 0x00	; 0
    7a02:	b3 01       	movw	r22, r6
    7a04:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7a08:	0f 5f       	subi	r16, 0xFF	; 255
    7a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    7a0c:	05 c0       	rjmp	.+10     	; 0x7a18 <vfprintf+0x23e>
    7a0e:	ef 2c       	mov	r14, r15
    7a10:	ff 24       	eor	r15, r15
    7a12:	f0 e1       	ldi	r31, 0x10	; 16
    7a14:	ef 22       	and	r14, r31
    7a16:	ff 24       	eor	r15, r15
    7a18:	f8 01       	movw	r30, r16
    7a1a:	84 91       	lpm	r24, Z+
    7a1c:	88 23       	and	r24, r24
    7a1e:	61 f7       	brne	.-40     	; 0x79f8 <vfprintf+0x21e>
    7a20:	14 c1       	rjmp	.+552    	; 0x7c4a <vfprintf+0x470>
    7a22:	f7 fe       	sbrs	r15, 7
    7a24:	12 c0       	rjmp	.+36     	; 0x7a4a <vfprintf+0x270>
    7a26:	bc 0c       	add	r11, r12
    7a28:	24 fe       	sbrs	r2, 4
    7a2a:	04 c0       	rjmp	.+8      	; 0x7a34 <vfprintf+0x25a>
    7a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    7a2e:	81 33       	cpi	r24, 0x31	; 49
    7a30:	09 f4       	brne	.+2      	; 0x7a34 <vfprintf+0x25a>
    7a32:	ba 94       	dec	r11
    7a34:	1b 14       	cp	r1, r11
    7a36:	1c f0       	brlt	.+6      	; 0x7a3e <vfprintf+0x264>
    7a38:	bb 24       	eor	r11, r11
    7a3a:	b3 94       	inc	r11
    7a3c:	2d c0       	rjmp	.+90     	; 0x7a98 <vfprintf+0x2be>
    7a3e:	f8 e0       	ldi	r31, 0x08	; 8
    7a40:	fb 15       	cp	r31, r11
    7a42:	50 f5       	brcc	.+84     	; 0x7a98 <vfprintf+0x2be>
    7a44:	38 e0       	ldi	r19, 0x08	; 8
    7a46:	b3 2e       	mov	r11, r19
    7a48:	27 c0       	rjmp	.+78     	; 0x7a98 <vfprintf+0x2be>
    7a4a:	f6 fc       	sbrc	r15, 6
    7a4c:	25 c0       	rjmp	.+74     	; 0x7a98 <vfprintf+0x2be>
    7a4e:	89 2d       	mov	r24, r9
    7a50:	90 e0       	ldi	r25, 0x00	; 0
    7a52:	8c 15       	cp	r24, r12
    7a54:	9d 05       	cpc	r25, r13
    7a56:	4c f0       	brlt	.+18     	; 0x7a6a <vfprintf+0x290>
    7a58:	2c ef       	ldi	r18, 0xFC	; 252
    7a5a:	c2 16       	cp	r12, r18
    7a5c:	2f ef       	ldi	r18, 0xFF	; 255
    7a5e:	d2 06       	cpc	r13, r18
    7a60:	24 f0       	brlt	.+8      	; 0x7a6a <vfprintf+0x290>
    7a62:	30 e8       	ldi	r19, 0x80	; 128
    7a64:	f3 2a       	or	r15, r19
    7a66:	01 c0       	rjmp	.+2      	; 0x7a6a <vfprintf+0x290>
    7a68:	9a 94       	dec	r9
    7a6a:	99 20       	and	r9, r9
    7a6c:	49 f0       	breq	.+18     	; 0x7a80 <vfprintf+0x2a6>
    7a6e:	e2 e0       	ldi	r30, 0x02	; 2
    7a70:	f0 e0       	ldi	r31, 0x00	; 0
    7a72:	ec 0f       	add	r30, r28
    7a74:	fd 1f       	adc	r31, r29
    7a76:	e9 0d       	add	r30, r9
    7a78:	f1 1d       	adc	r31, r1
    7a7a:	80 81       	ld	r24, Z
    7a7c:	80 33       	cpi	r24, 0x30	; 48
    7a7e:	a1 f3       	breq	.-24     	; 0x7a68 <vfprintf+0x28e>
    7a80:	f7 fe       	sbrs	r15, 7
    7a82:	0a c0       	rjmp	.+20     	; 0x7a98 <vfprintf+0x2be>
    7a84:	b9 2c       	mov	r11, r9
    7a86:	b3 94       	inc	r11
    7a88:	89 2d       	mov	r24, r9
    7a8a:	90 e0       	ldi	r25, 0x00	; 0
    7a8c:	c8 16       	cp	r12, r24
    7a8e:	d9 06       	cpc	r13, r25
    7a90:	14 f0       	brlt	.+4      	; 0x7a96 <vfprintf+0x2bc>
    7a92:	99 24       	eor	r9, r9
    7a94:	01 c0       	rjmp	.+2      	; 0x7a98 <vfprintf+0x2be>
    7a96:	9c 18       	sub	r9, r12
    7a98:	f7 fc       	sbrc	r15, 7
    7a9a:	03 c0       	rjmp	.+6      	; 0x7aa2 <vfprintf+0x2c8>
    7a9c:	25 e0       	ldi	r18, 0x05	; 5
    7a9e:	30 e0       	ldi	r19, 0x00	; 0
    7aa0:	09 c0       	rjmp	.+18     	; 0x7ab4 <vfprintf+0x2da>
    7aa2:	1c 14       	cp	r1, r12
    7aa4:	1d 04       	cpc	r1, r13
    7aa6:	1c f0       	brlt	.+6      	; 0x7aae <vfprintf+0x2d4>
    7aa8:	21 e0       	ldi	r18, 0x01	; 1
    7aaa:	30 e0       	ldi	r19, 0x00	; 0
    7aac:	03 c0       	rjmp	.+6      	; 0x7ab4 <vfprintf+0x2da>
    7aae:	96 01       	movw	r18, r12
    7ab0:	2f 5f       	subi	r18, 0xFF	; 255
    7ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    7ab4:	11 23       	and	r17, r17
    7ab6:	11 f0       	breq	.+4      	; 0x7abc <vfprintf+0x2e2>
    7ab8:	2f 5f       	subi	r18, 0xFF	; 255
    7aba:	3f 4f       	sbci	r19, 0xFF	; 255
    7abc:	99 20       	and	r9, r9
    7abe:	29 f0       	breq	.+10     	; 0x7aca <vfprintf+0x2f0>
    7ac0:	89 2d       	mov	r24, r9
    7ac2:	90 e0       	ldi	r25, 0x00	; 0
    7ac4:	01 96       	adiw	r24, 0x01	; 1
    7ac6:	28 0f       	add	r18, r24
    7ac8:	39 1f       	adc	r19, r25
    7aca:	88 2d       	mov	r24, r8
    7acc:	90 e0       	ldi	r25, 0x00	; 0
    7ace:	28 17       	cp	r18, r24
    7ad0:	39 07       	cpc	r19, r25
    7ad2:	14 f0       	brlt	.+4      	; 0x7ad8 <vfprintf+0x2fe>
    7ad4:	88 24       	eor	r8, r8
    7ad6:	01 c0       	rjmp	.+2      	; 0x7ada <vfprintf+0x300>
    7ad8:	82 1a       	sub	r8, r18
    7ada:	4f 2c       	mov	r4, r15
    7adc:	55 24       	eor	r5, r5
    7ade:	c2 01       	movw	r24, r4
    7ae0:	89 70       	andi	r24, 0x09	; 9
    7ae2:	90 70       	andi	r25, 0x00	; 0
    7ae4:	89 2b       	or	r24, r25
    7ae6:	39 f0       	breq	.+14     	; 0x7af6 <vfprintf+0x31c>
    7ae8:	08 c0       	rjmp	.+16     	; 0x7afa <vfprintf+0x320>
    7aea:	80 e2       	ldi	r24, 0x20	; 32
    7aec:	90 e0       	ldi	r25, 0x00	; 0
    7aee:	b3 01       	movw	r22, r6
    7af0:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7af4:	8a 94       	dec	r8
    7af6:	88 20       	and	r8, r8
    7af8:	c1 f7       	brne	.-16     	; 0x7aea <vfprintf+0x310>
    7afa:	11 23       	and	r17, r17
    7afc:	29 f0       	breq	.+10     	; 0x7b08 <vfprintf+0x32e>
    7afe:	81 2f       	mov	r24, r17
    7b00:	90 e0       	ldi	r25, 0x00	; 0
    7b02:	b3 01       	movw	r22, r6
    7b04:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7b08:	43 fe       	sbrs	r4, 3
    7b0a:	07 c0       	rjmp	.+14     	; 0x7b1a <vfprintf+0x340>
    7b0c:	08 c0       	rjmp	.+16     	; 0x7b1e <vfprintf+0x344>
    7b0e:	80 e3       	ldi	r24, 0x30	; 48
    7b10:	90 e0       	ldi	r25, 0x00	; 0
    7b12:	b3 01       	movw	r22, r6
    7b14:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7b18:	8a 94       	dec	r8
    7b1a:	88 20       	and	r8, r8
    7b1c:	c1 f7       	brne	.-16     	; 0x7b0e <vfprintf+0x334>
    7b1e:	f7 fe       	sbrs	r15, 7
    7b20:	46 c0       	rjmp	.+140    	; 0x7bae <vfprintf+0x3d4>
    7b22:	86 01       	movw	r16, r12
    7b24:	d7 fe       	sbrs	r13, 7
    7b26:	02 c0       	rjmp	.+4      	; 0x7b2c <vfprintf+0x352>
    7b28:	00 e0       	ldi	r16, 0x00	; 0
    7b2a:	10 e0       	ldi	r17, 0x00	; 0
    7b2c:	76 01       	movw	r14, r12
    7b2e:	08 94       	sec
    7b30:	e1 1c       	adc	r14, r1
    7b32:	f1 1c       	adc	r15, r1
    7b34:	e0 1a       	sub	r14, r16
    7b36:	f1 0a       	sbc	r15, r17
    7b38:	41 e0       	ldi	r20, 0x01	; 1
    7b3a:	50 e0       	ldi	r21, 0x00	; 0
    7b3c:	4c 0f       	add	r20, r28
    7b3e:	5d 1f       	adc	r21, r29
    7b40:	e4 0e       	add	r14, r20
    7b42:	f5 1e       	adc	r15, r21
    7b44:	26 01       	movw	r4, r12
    7b46:	4b 18       	sub	r4, r11
    7b48:	51 08       	sbc	r5, r1
    7b4a:	89 2d       	mov	r24, r9
    7b4c:	90 e0       	ldi	r25, 0x00	; 0
    7b4e:	aa 24       	eor	r10, r10
    7b50:	bb 24       	eor	r11, r11
    7b52:	a8 1a       	sub	r10, r24
    7b54:	b9 0a       	sbc	r11, r25
    7b56:	5f ef       	ldi	r21, 0xFF	; 255
    7b58:	0f 3f       	cpi	r16, 0xFF	; 255
    7b5a:	15 07       	cpc	r17, r21
    7b5c:	29 f4       	brne	.+10     	; 0x7b68 <vfprintf+0x38e>
    7b5e:	8e e2       	ldi	r24, 0x2E	; 46
    7b60:	90 e0       	ldi	r25, 0x00	; 0
    7b62:	b3 01       	movw	r22, r6
    7b64:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7b68:	c0 16       	cp	r12, r16
    7b6a:	d1 06       	cpc	r13, r17
    7b6c:	34 f0       	brlt	.+12     	; 0x7b7a <vfprintf+0x3a0>
    7b6e:	40 16       	cp	r4, r16
    7b70:	51 06       	cpc	r5, r17
    7b72:	1c f4       	brge	.+6      	; 0x7b7a <vfprintf+0x3a0>
    7b74:	f7 01       	movw	r30, r14
    7b76:	80 81       	ld	r24, Z
    7b78:	01 c0       	rjmp	.+2      	; 0x7b7c <vfprintf+0x3a2>
    7b7a:	80 e3       	ldi	r24, 0x30	; 48
    7b7c:	01 50       	subi	r16, 0x01	; 1
    7b7e:	10 40       	sbci	r17, 0x00	; 0
    7b80:	08 94       	sec
    7b82:	e1 1c       	adc	r14, r1
    7b84:	f1 1c       	adc	r15, r1
    7b86:	0a 15       	cp	r16, r10
    7b88:	1b 05       	cpc	r17, r11
    7b8a:	2c f0       	brlt	.+10     	; 0x7b96 <vfprintf+0x3bc>
    7b8c:	90 e0       	ldi	r25, 0x00	; 0
    7b8e:	b3 01       	movw	r22, r6
    7b90:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7b94:	e0 cf       	rjmp	.-64     	; 0x7b56 <vfprintf+0x37c>
    7b96:	0c 15       	cp	r16, r12
    7b98:	1d 05       	cpc	r17, r13
    7b9a:	39 f4       	brne	.+14     	; 0x7baa <vfprintf+0x3d0>
    7b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    7b9e:	96 33       	cpi	r25, 0x36	; 54
    7ba0:	18 f4       	brcc	.+6      	; 0x7ba8 <vfprintf+0x3ce>
    7ba2:	95 33       	cpi	r25, 0x35	; 53
    7ba4:	11 f4       	brne	.+4      	; 0x7baa <vfprintf+0x3d0>
    7ba6:	24 fe       	sbrs	r2, 4
    7ba8:	81 e3       	ldi	r24, 0x31	; 49
    7baa:	90 e0       	ldi	r25, 0x00	; 0
    7bac:	4b c0       	rjmp	.+150    	; 0x7c44 <vfprintf+0x46a>
    7bae:	8a 81       	ldd	r24, Y+2	; 0x02
    7bb0:	81 33       	cpi	r24, 0x31	; 49
    7bb2:	09 f0       	breq	.+2      	; 0x7bb6 <vfprintf+0x3dc>
    7bb4:	0f 7e       	andi	r16, 0xEF	; 239
    7bb6:	90 e0       	ldi	r25, 0x00	; 0
    7bb8:	b3 01       	movw	r22, r6
    7bba:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7bbe:	99 20       	and	r9, r9
    7bc0:	a1 f0       	breq	.+40     	; 0x7bea <vfprintf+0x410>
    7bc2:	8e e2       	ldi	r24, 0x2E	; 46
    7bc4:	90 e0       	ldi	r25, 0x00	; 0
    7bc6:	b3 01       	movw	r22, r6
    7bc8:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7bcc:	12 e0       	ldi	r17, 0x02	; 2
    7bce:	e1 e0       	ldi	r30, 0x01	; 1
    7bd0:	f0 e0       	ldi	r31, 0x00	; 0
    7bd2:	ec 0f       	add	r30, r28
    7bd4:	fd 1f       	adc	r31, r29
    7bd6:	e1 0f       	add	r30, r17
    7bd8:	f1 1d       	adc	r31, r1
    7bda:	1f 5f       	subi	r17, 0xFF	; 255
    7bdc:	80 81       	ld	r24, Z
    7bde:	90 e0       	ldi	r25, 0x00	; 0
    7be0:	b3 01       	movw	r22, r6
    7be2:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7be6:	9a 94       	dec	r9
    7be8:	91 f7       	brne	.-28     	; 0x7bce <vfprintf+0x3f4>
    7bea:	44 fc       	sbrc	r4, 4
    7bec:	03 c0       	rjmp	.+6      	; 0x7bf4 <vfprintf+0x41a>
    7bee:	85 e6       	ldi	r24, 0x65	; 101
    7bf0:	90 e0       	ldi	r25, 0x00	; 0
    7bf2:	02 c0       	rjmp	.+4      	; 0x7bf8 <vfprintf+0x41e>
    7bf4:	85 e4       	ldi	r24, 0x45	; 69
    7bf6:	90 e0       	ldi	r25, 0x00	; 0
    7bf8:	b3 01       	movw	r22, r6
    7bfa:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7bfe:	d7 fc       	sbrc	r13, 7
    7c00:	05 c0       	rjmp	.+10     	; 0x7c0c <vfprintf+0x432>
    7c02:	c1 14       	cp	r12, r1
    7c04:	d1 04       	cpc	r13, r1
    7c06:	41 f4       	brne	.+16     	; 0x7c18 <vfprintf+0x43e>
    7c08:	04 ff       	sbrs	r16, 4
    7c0a:	06 c0       	rjmp	.+12     	; 0x7c18 <vfprintf+0x43e>
    7c0c:	d0 94       	com	r13
    7c0e:	c1 94       	neg	r12
    7c10:	d1 08       	sbc	r13, r1
    7c12:	d3 94       	inc	r13
    7c14:	8d e2       	ldi	r24, 0x2D	; 45
    7c16:	01 c0       	rjmp	.+2      	; 0x7c1a <vfprintf+0x440>
    7c18:	8b e2       	ldi	r24, 0x2B	; 43
    7c1a:	90 e0       	ldi	r25, 0x00	; 0
    7c1c:	b3 01       	movw	r22, r6
    7c1e:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7c22:	80 e3       	ldi	r24, 0x30	; 48
    7c24:	05 c0       	rjmp	.+10     	; 0x7c30 <vfprintf+0x456>
    7c26:	8f 5f       	subi	r24, 0xFF	; 255
    7c28:	26 ef       	ldi	r18, 0xF6	; 246
    7c2a:	3f ef       	ldi	r19, 0xFF	; 255
    7c2c:	c2 0e       	add	r12, r18
    7c2e:	d3 1e       	adc	r13, r19
    7c30:	3a e0       	ldi	r19, 0x0A	; 10
    7c32:	c3 16       	cp	r12, r19
    7c34:	d1 04       	cpc	r13, r1
    7c36:	bc f7       	brge	.-18     	; 0x7c26 <vfprintf+0x44c>
    7c38:	90 e0       	ldi	r25, 0x00	; 0
    7c3a:	b3 01       	movw	r22, r6
    7c3c:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7c40:	c6 01       	movw	r24, r12
    7c42:	c0 96       	adiw	r24, 0x30	; 48
    7c44:	b3 01       	movw	r22, r6
    7c46:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7c4a:	cc 84       	ldd	r12, Y+12	; 0x0c
    7c4c:	dd 84       	ldd	r13, Y+13	; 0x0d
    7c4e:	52 c1       	rjmp	.+676    	; 0x7ef4 <vfprintf+0x71a>
    7c50:	93 36       	cpi	r25, 0x63	; 99
    7c52:	31 f0       	breq	.+12     	; 0x7c60 <vfprintf+0x486>
    7c54:	93 37       	cpi	r25, 0x73	; 115
    7c56:	99 f0       	breq	.+38     	; 0x7c7e <vfprintf+0x4a4>
    7c58:	93 35       	cpi	r25, 0x53	; 83
    7c5a:	09 f0       	breq	.+2      	; 0x7c5e <vfprintf+0x484>
    7c5c:	59 c0       	rjmp	.+178    	; 0x7d10 <vfprintf+0x536>
    7c5e:	23 c0       	rjmp	.+70     	; 0x7ca6 <vfprintf+0x4cc>
    7c60:	f6 01       	movw	r30, r12
    7c62:	80 81       	ld	r24, Z
    7c64:	89 83       	std	Y+1, r24	; 0x01
    7c66:	5e 01       	movw	r10, r28
    7c68:	08 94       	sec
    7c6a:	a1 1c       	adc	r10, r1
    7c6c:	b1 1c       	adc	r11, r1
    7c6e:	22 e0       	ldi	r18, 0x02	; 2
    7c70:	30 e0       	ldi	r19, 0x00	; 0
    7c72:	c2 0e       	add	r12, r18
    7c74:	d3 1e       	adc	r13, r19
    7c76:	21 e0       	ldi	r18, 0x01	; 1
    7c78:	e2 2e       	mov	r14, r18
    7c7a:	f1 2c       	mov	r15, r1
    7c7c:	12 c0       	rjmp	.+36     	; 0x7ca2 <vfprintf+0x4c8>
    7c7e:	f6 01       	movw	r30, r12
    7c80:	a0 80       	ld	r10, Z
    7c82:	b1 80       	ldd	r11, Z+1	; 0x01
    7c84:	16 fd       	sbrc	r17, 6
    7c86:	03 c0       	rjmp	.+6      	; 0x7c8e <vfprintf+0x4b4>
    7c88:	6f ef       	ldi	r22, 0xFF	; 255
    7c8a:	7f ef       	ldi	r23, 0xFF	; 255
    7c8c:	02 c0       	rjmp	.+4      	; 0x7c92 <vfprintf+0x4b8>
    7c8e:	69 2d       	mov	r22, r9
    7c90:	70 e0       	ldi	r23, 0x00	; 0
    7c92:	22 e0       	ldi	r18, 0x02	; 2
    7c94:	30 e0       	ldi	r19, 0x00	; 0
    7c96:	c2 0e       	add	r12, r18
    7c98:	d3 1e       	adc	r13, r19
    7c9a:	c5 01       	movw	r24, r10
    7c9c:	0e 94 d9 46 	call	0x8db2	; 0x8db2 <strnlen>
    7ca0:	7c 01       	movw	r14, r24
    7ca2:	1f 77       	andi	r17, 0x7F	; 127
    7ca4:	13 c0       	rjmp	.+38     	; 0x7ccc <vfprintf+0x4f2>
    7ca6:	f6 01       	movw	r30, r12
    7ca8:	a0 80       	ld	r10, Z
    7caa:	b1 80       	ldd	r11, Z+1	; 0x01
    7cac:	16 fd       	sbrc	r17, 6
    7cae:	03 c0       	rjmp	.+6      	; 0x7cb6 <vfprintf+0x4dc>
    7cb0:	6f ef       	ldi	r22, 0xFF	; 255
    7cb2:	7f ef       	ldi	r23, 0xFF	; 255
    7cb4:	02 c0       	rjmp	.+4      	; 0x7cba <vfprintf+0x4e0>
    7cb6:	69 2d       	mov	r22, r9
    7cb8:	70 e0       	ldi	r23, 0x00	; 0
    7cba:	22 e0       	ldi	r18, 0x02	; 2
    7cbc:	30 e0       	ldi	r19, 0x00	; 0
    7cbe:	c2 0e       	add	r12, r18
    7cc0:	d3 1e       	adc	r13, r19
    7cc2:	c5 01       	movw	r24, r10
    7cc4:	0e 94 ce 46 	call	0x8d9c	; 0x8d9c <strnlen_P>
    7cc8:	7c 01       	movw	r14, r24
    7cca:	10 68       	ori	r17, 0x80	; 128
    7ccc:	13 ff       	sbrs	r17, 3
    7cce:	07 c0       	rjmp	.+14     	; 0x7cde <vfprintf+0x504>
    7cd0:	1b c0       	rjmp	.+54     	; 0x7d08 <vfprintf+0x52e>
    7cd2:	80 e2       	ldi	r24, 0x20	; 32
    7cd4:	90 e0       	ldi	r25, 0x00	; 0
    7cd6:	b3 01       	movw	r22, r6
    7cd8:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7cdc:	8a 94       	dec	r8
    7cde:	88 2d       	mov	r24, r8
    7ce0:	90 e0       	ldi	r25, 0x00	; 0
    7ce2:	e8 16       	cp	r14, r24
    7ce4:	f9 06       	cpc	r15, r25
    7ce6:	a8 f3       	brcs	.-22     	; 0x7cd2 <vfprintf+0x4f8>
    7ce8:	0f c0       	rjmp	.+30     	; 0x7d08 <vfprintf+0x52e>
    7cea:	f5 01       	movw	r30, r10
    7cec:	17 fd       	sbrc	r17, 7
    7cee:	85 91       	lpm	r24, Z+
    7cf0:	17 ff       	sbrs	r17, 7
    7cf2:	81 91       	ld	r24, Z+
    7cf4:	5f 01       	movw	r10, r30
    7cf6:	90 e0       	ldi	r25, 0x00	; 0
    7cf8:	b3 01       	movw	r22, r6
    7cfa:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7cfe:	81 10       	cpse	r8, r1
    7d00:	8a 94       	dec	r8
    7d02:	08 94       	sec
    7d04:	e1 08       	sbc	r14, r1
    7d06:	f1 08       	sbc	r15, r1
    7d08:	e1 14       	cp	r14, r1
    7d0a:	f1 04       	cpc	r15, r1
    7d0c:	71 f7       	brne	.-36     	; 0x7cea <vfprintf+0x510>
    7d0e:	f2 c0       	rjmp	.+484    	; 0x7ef4 <vfprintf+0x71a>
    7d10:	94 36       	cpi	r25, 0x64	; 100
    7d12:	11 f0       	breq	.+4      	; 0x7d18 <vfprintf+0x53e>
    7d14:	99 36       	cpi	r25, 0x69	; 105
    7d16:	89 f5       	brne	.+98     	; 0x7d7a <vfprintf+0x5a0>
    7d18:	17 ff       	sbrs	r17, 7
    7d1a:	08 c0       	rjmp	.+16     	; 0x7d2c <vfprintf+0x552>
    7d1c:	f6 01       	movw	r30, r12
    7d1e:	20 81       	ld	r18, Z
    7d20:	31 81       	ldd	r19, Z+1	; 0x01
    7d22:	42 81       	ldd	r20, Z+2	; 0x02
    7d24:	53 81       	ldd	r21, Z+3	; 0x03
    7d26:	84 e0       	ldi	r24, 0x04	; 4
    7d28:	90 e0       	ldi	r25, 0x00	; 0
    7d2a:	0a c0       	rjmp	.+20     	; 0x7d40 <vfprintf+0x566>
    7d2c:	f6 01       	movw	r30, r12
    7d2e:	80 81       	ld	r24, Z
    7d30:	91 81       	ldd	r25, Z+1	; 0x01
    7d32:	9c 01       	movw	r18, r24
    7d34:	44 27       	eor	r20, r20
    7d36:	37 fd       	sbrc	r19, 7
    7d38:	40 95       	com	r20
    7d3a:	54 2f       	mov	r21, r20
    7d3c:	82 e0       	ldi	r24, 0x02	; 2
    7d3e:	90 e0       	ldi	r25, 0x00	; 0
    7d40:	c8 0e       	add	r12, r24
    7d42:	d9 1e       	adc	r13, r25
    7d44:	9f e6       	ldi	r25, 0x6F	; 111
    7d46:	f9 2e       	mov	r15, r25
    7d48:	f1 22       	and	r15, r17
    7d4a:	57 ff       	sbrs	r21, 7
    7d4c:	09 c0       	rjmp	.+18     	; 0x7d60 <vfprintf+0x586>
    7d4e:	50 95       	com	r21
    7d50:	40 95       	com	r20
    7d52:	30 95       	com	r19
    7d54:	21 95       	neg	r18
    7d56:	3f 4f       	sbci	r19, 0xFF	; 255
    7d58:	4f 4f       	sbci	r20, 0xFF	; 255
    7d5a:	5f 4f       	sbci	r21, 0xFF	; 255
    7d5c:	90 e8       	ldi	r25, 0x80	; 128
    7d5e:	f9 2a       	or	r15, r25
    7d60:	ca 01       	movw	r24, r20
    7d62:	b9 01       	movw	r22, r18
    7d64:	ae 01       	movw	r20, r28
    7d66:	4f 5f       	subi	r20, 0xFF	; 255
    7d68:	5f 4f       	sbci	r21, 0xFF	; 255
    7d6a:	2a e0       	ldi	r18, 0x0A	; 10
    7d6c:	30 e0       	ldi	r19, 0x00	; 0
    7d6e:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <__ultoa_invert>
    7d72:	e8 2e       	mov	r14, r24
    7d74:	e8 89       	ldd	r30, Y+16	; 0x10
    7d76:	ee 1a       	sub	r14, r30
    7d78:	41 c0       	rjmp	.+130    	; 0x7dfc <vfprintf+0x622>
    7d7a:	95 37       	cpi	r25, 0x75	; 117
    7d7c:	21 f4       	brne	.+8      	; 0x7d86 <vfprintf+0x5ac>
    7d7e:	1f 7e       	andi	r17, 0xEF	; 239
    7d80:	2a e0       	ldi	r18, 0x0A	; 10
    7d82:	30 e0       	ldi	r19, 0x00	; 0
    7d84:	1c c0       	rjmp	.+56     	; 0x7dbe <vfprintf+0x5e4>
    7d86:	19 7f       	andi	r17, 0xF9	; 249
    7d88:	9f 36       	cpi	r25, 0x6F	; 111
    7d8a:	61 f0       	breq	.+24     	; 0x7da4 <vfprintf+0x5ca>
    7d8c:	90 37       	cpi	r25, 0x70	; 112
    7d8e:	20 f4       	brcc	.+8      	; 0x7d98 <vfprintf+0x5be>
    7d90:	98 35       	cpi	r25, 0x58	; 88
    7d92:	09 f0       	breq	.+2      	; 0x7d96 <vfprintf+0x5bc>
    7d94:	b2 c0       	rjmp	.+356    	; 0x7efa <vfprintf+0x720>
    7d96:	0f c0       	rjmp	.+30     	; 0x7db6 <vfprintf+0x5dc>
    7d98:	90 37       	cpi	r25, 0x70	; 112
    7d9a:	39 f0       	breq	.+14     	; 0x7daa <vfprintf+0x5d0>
    7d9c:	98 37       	cpi	r25, 0x78	; 120
    7d9e:	09 f0       	breq	.+2      	; 0x7da2 <vfprintf+0x5c8>
    7da0:	ac c0       	rjmp	.+344    	; 0x7efa <vfprintf+0x720>
    7da2:	04 c0       	rjmp	.+8      	; 0x7dac <vfprintf+0x5d2>
    7da4:	28 e0       	ldi	r18, 0x08	; 8
    7da6:	30 e0       	ldi	r19, 0x00	; 0
    7da8:	0a c0       	rjmp	.+20     	; 0x7dbe <vfprintf+0x5e4>
    7daa:	10 61       	ori	r17, 0x10	; 16
    7dac:	14 fd       	sbrc	r17, 4
    7dae:	14 60       	ori	r17, 0x04	; 4
    7db0:	20 e1       	ldi	r18, 0x10	; 16
    7db2:	30 e0       	ldi	r19, 0x00	; 0
    7db4:	04 c0       	rjmp	.+8      	; 0x7dbe <vfprintf+0x5e4>
    7db6:	14 fd       	sbrc	r17, 4
    7db8:	16 60       	ori	r17, 0x06	; 6
    7dba:	20 e1       	ldi	r18, 0x10	; 16
    7dbc:	32 e0       	ldi	r19, 0x02	; 2
    7dbe:	17 ff       	sbrs	r17, 7
    7dc0:	08 c0       	rjmp	.+16     	; 0x7dd2 <vfprintf+0x5f8>
    7dc2:	f6 01       	movw	r30, r12
    7dc4:	60 81       	ld	r22, Z
    7dc6:	71 81       	ldd	r23, Z+1	; 0x01
    7dc8:	82 81       	ldd	r24, Z+2	; 0x02
    7dca:	93 81       	ldd	r25, Z+3	; 0x03
    7dcc:	44 e0       	ldi	r20, 0x04	; 4
    7dce:	50 e0       	ldi	r21, 0x00	; 0
    7dd0:	08 c0       	rjmp	.+16     	; 0x7de2 <vfprintf+0x608>
    7dd2:	f6 01       	movw	r30, r12
    7dd4:	80 81       	ld	r24, Z
    7dd6:	91 81       	ldd	r25, Z+1	; 0x01
    7dd8:	bc 01       	movw	r22, r24
    7dda:	80 e0       	ldi	r24, 0x00	; 0
    7ddc:	90 e0       	ldi	r25, 0x00	; 0
    7dde:	42 e0       	ldi	r20, 0x02	; 2
    7de0:	50 e0       	ldi	r21, 0x00	; 0
    7de2:	c4 0e       	add	r12, r20
    7de4:	d5 1e       	adc	r13, r21
    7de6:	ae 01       	movw	r20, r28
    7de8:	4f 5f       	subi	r20, 0xFF	; 255
    7dea:	5f 4f       	sbci	r21, 0xFF	; 255
    7dec:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <__ultoa_invert>
    7df0:	e8 2e       	mov	r14, r24
    7df2:	58 89       	ldd	r21, Y+16	; 0x10
    7df4:	e5 1a       	sub	r14, r21
    7df6:	8f e7       	ldi	r24, 0x7F	; 127
    7df8:	f8 2e       	mov	r15, r24
    7dfa:	f1 22       	and	r15, r17
    7dfc:	f6 fe       	sbrs	r15, 6
    7dfe:	0b c0       	rjmp	.+22     	; 0x7e16 <vfprintf+0x63c>
    7e00:	8e ef       	ldi	r24, 0xFE	; 254
    7e02:	f8 22       	and	r15, r24
    7e04:	e9 14       	cp	r14, r9
    7e06:	38 f4       	brcc	.+14     	; 0x7e16 <vfprintf+0x63c>
    7e08:	f4 fe       	sbrs	r15, 4
    7e0a:	07 c0       	rjmp	.+14     	; 0x7e1a <vfprintf+0x640>
    7e0c:	f2 fc       	sbrc	r15, 2
    7e0e:	05 c0       	rjmp	.+10     	; 0x7e1a <vfprintf+0x640>
    7e10:	9f ee       	ldi	r25, 0xEF	; 239
    7e12:	f9 22       	and	r15, r25
    7e14:	02 c0       	rjmp	.+4      	; 0x7e1a <vfprintf+0x640>
    7e16:	1e 2d       	mov	r17, r14
    7e18:	01 c0       	rjmp	.+2      	; 0x7e1c <vfprintf+0x642>
    7e1a:	19 2d       	mov	r17, r9
    7e1c:	f4 fe       	sbrs	r15, 4
    7e1e:	0d c0       	rjmp	.+26     	; 0x7e3a <vfprintf+0x660>
    7e20:	fe 01       	movw	r30, r28
    7e22:	ee 0d       	add	r30, r14
    7e24:	f1 1d       	adc	r31, r1
    7e26:	80 81       	ld	r24, Z
    7e28:	80 33       	cpi	r24, 0x30	; 48
    7e2a:	19 f4       	brne	.+6      	; 0x7e32 <vfprintf+0x658>
    7e2c:	e9 ee       	ldi	r30, 0xE9	; 233
    7e2e:	fe 22       	and	r15, r30
    7e30:	08 c0       	rjmp	.+16     	; 0x7e42 <vfprintf+0x668>
    7e32:	1f 5f       	subi	r17, 0xFF	; 255
    7e34:	f2 fe       	sbrs	r15, 2
    7e36:	05 c0       	rjmp	.+10     	; 0x7e42 <vfprintf+0x668>
    7e38:	03 c0       	rjmp	.+6      	; 0x7e40 <vfprintf+0x666>
    7e3a:	8f 2d       	mov	r24, r15
    7e3c:	86 78       	andi	r24, 0x86	; 134
    7e3e:	09 f0       	breq	.+2      	; 0x7e42 <vfprintf+0x668>
    7e40:	1f 5f       	subi	r17, 0xFF	; 255
    7e42:	0f 2d       	mov	r16, r15
    7e44:	f3 fc       	sbrc	r15, 3
    7e46:	14 c0       	rjmp	.+40     	; 0x7e70 <vfprintf+0x696>
    7e48:	f0 fe       	sbrs	r15, 0
    7e4a:	0f c0       	rjmp	.+30     	; 0x7e6a <vfprintf+0x690>
    7e4c:	18 15       	cp	r17, r8
    7e4e:	10 f0       	brcs	.+4      	; 0x7e54 <vfprintf+0x67a>
    7e50:	9e 2c       	mov	r9, r14
    7e52:	0b c0       	rjmp	.+22     	; 0x7e6a <vfprintf+0x690>
    7e54:	9e 2c       	mov	r9, r14
    7e56:	98 0c       	add	r9, r8
    7e58:	91 1a       	sub	r9, r17
    7e5a:	18 2d       	mov	r17, r8
    7e5c:	06 c0       	rjmp	.+12     	; 0x7e6a <vfprintf+0x690>
    7e5e:	80 e2       	ldi	r24, 0x20	; 32
    7e60:	90 e0       	ldi	r25, 0x00	; 0
    7e62:	b3 01       	movw	r22, r6
    7e64:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7e68:	1f 5f       	subi	r17, 0xFF	; 255
    7e6a:	18 15       	cp	r17, r8
    7e6c:	c0 f3       	brcs	.-16     	; 0x7e5e <vfprintf+0x684>
    7e6e:	04 c0       	rjmp	.+8      	; 0x7e78 <vfprintf+0x69e>
    7e70:	18 15       	cp	r17, r8
    7e72:	10 f4       	brcc	.+4      	; 0x7e78 <vfprintf+0x69e>
    7e74:	81 1a       	sub	r8, r17
    7e76:	01 c0       	rjmp	.+2      	; 0x7e7a <vfprintf+0x6a0>
    7e78:	88 24       	eor	r8, r8
    7e7a:	04 ff       	sbrs	r16, 4
    7e7c:	0f c0       	rjmp	.+30     	; 0x7e9c <vfprintf+0x6c2>
    7e7e:	80 e3       	ldi	r24, 0x30	; 48
    7e80:	90 e0       	ldi	r25, 0x00	; 0
    7e82:	b3 01       	movw	r22, r6
    7e84:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7e88:	02 ff       	sbrs	r16, 2
    7e8a:	1d c0       	rjmp	.+58     	; 0x7ec6 <vfprintf+0x6ec>
    7e8c:	01 fd       	sbrc	r16, 1
    7e8e:	03 c0       	rjmp	.+6      	; 0x7e96 <vfprintf+0x6bc>
    7e90:	88 e7       	ldi	r24, 0x78	; 120
    7e92:	90 e0       	ldi	r25, 0x00	; 0
    7e94:	0e c0       	rjmp	.+28     	; 0x7eb2 <vfprintf+0x6d8>
    7e96:	88 e5       	ldi	r24, 0x58	; 88
    7e98:	90 e0       	ldi	r25, 0x00	; 0
    7e9a:	0b c0       	rjmp	.+22     	; 0x7eb2 <vfprintf+0x6d8>
    7e9c:	80 2f       	mov	r24, r16
    7e9e:	86 78       	andi	r24, 0x86	; 134
    7ea0:	91 f0       	breq	.+36     	; 0x7ec6 <vfprintf+0x6ec>
    7ea2:	01 ff       	sbrs	r16, 1
    7ea4:	02 c0       	rjmp	.+4      	; 0x7eaa <vfprintf+0x6d0>
    7ea6:	8b e2       	ldi	r24, 0x2B	; 43
    7ea8:	01 c0       	rjmp	.+2      	; 0x7eac <vfprintf+0x6d2>
    7eaa:	80 e2       	ldi	r24, 0x20	; 32
    7eac:	f7 fc       	sbrc	r15, 7
    7eae:	8d e2       	ldi	r24, 0x2D	; 45
    7eb0:	90 e0       	ldi	r25, 0x00	; 0
    7eb2:	b3 01       	movw	r22, r6
    7eb4:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7eb8:	06 c0       	rjmp	.+12     	; 0x7ec6 <vfprintf+0x6ec>
    7eba:	80 e3       	ldi	r24, 0x30	; 48
    7ebc:	90 e0       	ldi	r25, 0x00	; 0
    7ebe:	b3 01       	movw	r22, r6
    7ec0:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7ec4:	9a 94       	dec	r9
    7ec6:	e9 14       	cp	r14, r9
    7ec8:	c0 f3       	brcs	.-16     	; 0x7eba <vfprintf+0x6e0>
    7eca:	ea 94       	dec	r14
    7ecc:	e1 e0       	ldi	r30, 0x01	; 1
    7ece:	f0 e0       	ldi	r31, 0x00	; 0
    7ed0:	ec 0f       	add	r30, r28
    7ed2:	fd 1f       	adc	r31, r29
    7ed4:	ee 0d       	add	r30, r14
    7ed6:	f1 1d       	adc	r31, r1
    7ed8:	80 81       	ld	r24, Z
    7eda:	90 e0       	ldi	r25, 0x00	; 0
    7edc:	b3 01       	movw	r22, r6
    7ede:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7ee2:	ee 20       	and	r14, r14
    7ee4:	91 f7       	brne	.-28     	; 0x7eca <vfprintf+0x6f0>
    7ee6:	06 c0       	rjmp	.+12     	; 0x7ef4 <vfprintf+0x71a>
    7ee8:	80 e2       	ldi	r24, 0x20	; 32
    7eea:	90 e0       	ldi	r25, 0x00	; 0
    7eec:	b3 01       	movw	r22, r6
    7eee:	0e 94 24 47 	call	0x8e48	; 0x8e48 <fputc>
    7ef2:	8a 94       	dec	r8
    7ef4:	88 20       	and	r8, r8
    7ef6:	c1 f7       	brne	.-16     	; 0x7ee8 <vfprintf+0x70e>
    7ef8:	99 cc       	rjmp	.-1742   	; 0x782c <vfprintf+0x52>
    7efa:	f3 01       	movw	r30, r6
    7efc:	66 81       	ldd	r22, Z+6	; 0x06
    7efe:	77 81       	ldd	r23, Z+7	; 0x07
    7f00:	cb 01       	movw	r24, r22
    7f02:	61 96       	adiw	r28, 0x11	; 17
    7f04:	cd bf       	out	0x3d, r28	; 61
    7f06:	de bf       	out	0x3e, r29	; 62
    7f08:	cf 91       	pop	r28
    7f0a:	df 91       	pop	r29
    7f0c:	1f 91       	pop	r17
    7f0e:	0f 91       	pop	r16
    7f10:	ff 90       	pop	r15
    7f12:	ef 90       	pop	r14
    7f14:	df 90       	pop	r13
    7f16:	cf 90       	pop	r12
    7f18:	bf 90       	pop	r11
    7f1a:	af 90       	pop	r10
    7f1c:	9f 90       	pop	r9
    7f1e:	8f 90       	pop	r8
    7f20:	7f 90       	pop	r7
    7f22:	6f 90       	pop	r6
    7f24:	5f 90       	pop	r5
    7f26:	4f 90       	pop	r4
    7f28:	3f 90       	pop	r3
    7f2a:	2f 90       	pop	r2
    7f2c:	08 95       	ret

00007f2e <__subsf3>:
    7f2e:	50 58       	subi	r21, 0x80	; 128

00007f30 <__addsf3>:
    7f30:	bb 27       	eor	r27, r27
    7f32:	aa 27       	eor	r26, r26
    7f34:	0e d0       	rcall	.+28     	; 0x7f52 <__addsf3x>
    7f36:	29 c2       	rjmp	.+1106   	; 0x838a <__fp_round>
    7f38:	f2 d1       	rcall	.+996    	; 0x831e <__fp_pscA>
    7f3a:	30 f0       	brcs	.+12     	; 0x7f48 <__addsf3+0x18>
    7f3c:	f7 d1       	rcall	.+1006   	; 0x832c <__fp_pscB>
    7f3e:	20 f0       	brcs	.+8      	; 0x7f48 <__addsf3+0x18>
    7f40:	31 f4       	brne	.+12     	; 0x7f4e <__addsf3+0x1e>
    7f42:	9f 3f       	cpi	r25, 0xFF	; 255
    7f44:	11 f4       	brne	.+4      	; 0x7f4a <__addsf3+0x1a>
    7f46:	1e f4       	brtc	.+6      	; 0x7f4e <__addsf3+0x1e>
    7f48:	c2 c1       	rjmp	.+900    	; 0x82ce <__fp_nan>
    7f4a:	0e f4       	brtc	.+2      	; 0x7f4e <__addsf3+0x1e>
    7f4c:	e0 95       	com	r30
    7f4e:	e7 fb       	bst	r30, 7
    7f50:	8f c1       	rjmp	.+798    	; 0x8270 <__fp_inf>

00007f52 <__addsf3x>:
    7f52:	e9 2f       	mov	r30, r25
    7f54:	3c d2       	rcall	.+1144   	; 0x83ce <__fp_split3>
    7f56:	80 f3       	brcs	.-32     	; 0x7f38 <__addsf3+0x8>
    7f58:	ba 17       	cp	r27, r26
    7f5a:	62 07       	cpc	r22, r18
    7f5c:	73 07       	cpc	r23, r19
    7f5e:	84 07       	cpc	r24, r20
    7f60:	95 07       	cpc	r25, r21
    7f62:	18 f0       	brcs	.+6      	; 0x7f6a <__addsf3x+0x18>
    7f64:	71 f4       	brne	.+28     	; 0x7f82 <__addsf3x+0x30>
    7f66:	9e f5       	brtc	.+102    	; 0x7fce <__addsf3x+0x7c>
    7f68:	6b c2       	rjmp	.+1238   	; 0x8440 <__fp_zero>
    7f6a:	0e f4       	brtc	.+2      	; 0x7f6e <__addsf3x+0x1c>
    7f6c:	e0 95       	com	r30
    7f6e:	0b 2e       	mov	r0, r27
    7f70:	ba 2f       	mov	r27, r26
    7f72:	a0 2d       	mov	r26, r0
    7f74:	0b 01       	movw	r0, r22
    7f76:	b9 01       	movw	r22, r18
    7f78:	90 01       	movw	r18, r0
    7f7a:	0c 01       	movw	r0, r24
    7f7c:	ca 01       	movw	r24, r20
    7f7e:	a0 01       	movw	r20, r0
    7f80:	11 24       	eor	r1, r1
    7f82:	ff 27       	eor	r31, r31
    7f84:	59 1b       	sub	r21, r25
    7f86:	99 f0       	breq	.+38     	; 0x7fae <__addsf3x+0x5c>
    7f88:	59 3f       	cpi	r21, 0xF9	; 249
    7f8a:	50 f4       	brcc	.+20     	; 0x7fa0 <__addsf3x+0x4e>
    7f8c:	50 3e       	cpi	r21, 0xE0	; 224
    7f8e:	68 f1       	brcs	.+90     	; 0x7fea <__addsf3x+0x98>
    7f90:	1a 16       	cp	r1, r26
    7f92:	f0 40       	sbci	r31, 0x00	; 0
    7f94:	a2 2f       	mov	r26, r18
    7f96:	23 2f       	mov	r18, r19
    7f98:	34 2f       	mov	r19, r20
    7f9a:	44 27       	eor	r20, r20
    7f9c:	58 5f       	subi	r21, 0xF8	; 248
    7f9e:	f3 cf       	rjmp	.-26     	; 0x7f86 <__addsf3x+0x34>
    7fa0:	46 95       	lsr	r20
    7fa2:	37 95       	ror	r19
    7fa4:	27 95       	ror	r18
    7fa6:	a7 95       	ror	r26
    7fa8:	f0 40       	sbci	r31, 0x00	; 0
    7faa:	53 95       	inc	r21
    7fac:	c9 f7       	brne	.-14     	; 0x7fa0 <__addsf3x+0x4e>
    7fae:	7e f4       	brtc	.+30     	; 0x7fce <__addsf3x+0x7c>
    7fb0:	1f 16       	cp	r1, r31
    7fb2:	ba 0b       	sbc	r27, r26
    7fb4:	62 0b       	sbc	r22, r18
    7fb6:	73 0b       	sbc	r23, r19
    7fb8:	84 0b       	sbc	r24, r20
    7fba:	ba f0       	brmi	.+46     	; 0x7fea <__addsf3x+0x98>
    7fbc:	91 50       	subi	r25, 0x01	; 1
    7fbe:	a1 f0       	breq	.+40     	; 0x7fe8 <__addsf3x+0x96>
    7fc0:	ff 0f       	add	r31, r31
    7fc2:	bb 1f       	adc	r27, r27
    7fc4:	66 1f       	adc	r22, r22
    7fc6:	77 1f       	adc	r23, r23
    7fc8:	88 1f       	adc	r24, r24
    7fca:	c2 f7       	brpl	.-16     	; 0x7fbc <__addsf3x+0x6a>
    7fcc:	0e c0       	rjmp	.+28     	; 0x7fea <__addsf3x+0x98>
    7fce:	ba 0f       	add	r27, r26
    7fd0:	62 1f       	adc	r22, r18
    7fd2:	73 1f       	adc	r23, r19
    7fd4:	84 1f       	adc	r24, r20
    7fd6:	48 f4       	brcc	.+18     	; 0x7fea <__addsf3x+0x98>
    7fd8:	87 95       	ror	r24
    7fda:	77 95       	ror	r23
    7fdc:	67 95       	ror	r22
    7fde:	b7 95       	ror	r27
    7fe0:	f7 95       	ror	r31
    7fe2:	9e 3f       	cpi	r25, 0xFE	; 254
    7fe4:	08 f0       	brcs	.+2      	; 0x7fe8 <__addsf3x+0x96>
    7fe6:	b3 cf       	rjmp	.-154    	; 0x7f4e <__addsf3+0x1e>
    7fe8:	93 95       	inc	r25
    7fea:	88 0f       	add	r24, r24
    7fec:	08 f0       	brcs	.+2      	; 0x7ff0 <__addsf3x+0x9e>
    7fee:	99 27       	eor	r25, r25
    7ff0:	ee 0f       	add	r30, r30
    7ff2:	97 95       	ror	r25
    7ff4:	87 95       	ror	r24
    7ff6:	08 95       	ret

00007ff8 <atan>:
    7ff8:	df 93       	push	r29
    7ffa:	dd 27       	eor	r29, r29
    7ffc:	b9 2f       	mov	r27, r25
    7ffe:	bf 77       	andi	r27, 0x7F	; 127
    8000:	40 e8       	ldi	r20, 0x80	; 128
    8002:	5f e3       	ldi	r21, 0x3F	; 63
    8004:	16 16       	cp	r1, r22
    8006:	17 06       	cpc	r1, r23
    8008:	48 07       	cpc	r20, r24
    800a:	5b 07       	cpc	r21, r27
    800c:	10 f4       	brcc	.+4      	; 0x8012 <atan+0x1a>
    800e:	d9 2f       	mov	r29, r25
    8010:	83 d2       	rcall	.+1286   	; 0x8518 <inverse>
    8012:	9f 93       	push	r25
    8014:	8f 93       	push	r24
    8016:	7f 93       	push	r23
    8018:	6f 93       	push	r22
    801a:	96 d3       	rcall	.+1836   	; 0x8748 <square>
    801c:	e8 ee       	ldi	r30, 0xE8	; 232
    801e:	f1 e0       	ldi	r31, 0x01	; 1
    8020:	59 d1       	rcall	.+690    	; 0x82d4 <__fp_powser>
    8022:	b3 d1       	rcall	.+870    	; 0x838a <__fp_round>
    8024:	2f 91       	pop	r18
    8026:	3f 91       	pop	r19
    8028:	4f 91       	pop	r20
    802a:	5f 91       	pop	r21
    802c:	ee d2       	rcall	.+1500   	; 0x860a <__mulsf3x>
    802e:	dd 23       	and	r29, r29
    8030:	49 f0       	breq	.+18     	; 0x8044 <atan+0x4c>
    8032:	90 58       	subi	r25, 0x80	; 128
    8034:	a2 ea       	ldi	r26, 0xA2	; 162
    8036:	2a ed       	ldi	r18, 0xDA	; 218
    8038:	3f e0       	ldi	r19, 0x0F	; 15
    803a:	49 ec       	ldi	r20, 0xC9	; 201
    803c:	5f e3       	ldi	r21, 0x3F	; 63
    803e:	d0 78       	andi	r29, 0x80	; 128
    8040:	5d 27       	eor	r21, r29
    8042:	87 df       	rcall	.-242    	; 0x7f52 <__addsf3x>
    8044:	df 91       	pop	r29
    8046:	a1 c1       	rjmp	.+834    	; 0x838a <__fp_round>

00008048 <ceil>:
    8048:	e4 d1       	rcall	.+968    	; 0x8412 <__fp_trunc>
    804a:	80 f0       	brcs	.+32     	; 0x806c <ceil+0x24>
    804c:	9f 37       	cpi	r25, 0x7F	; 127
    804e:	40 f4       	brcc	.+16     	; 0x8060 <ceil+0x18>
    8050:	91 11       	cpse	r25, r1
    8052:	0e f4       	brtc	.+2      	; 0x8056 <ceil+0xe>
    8054:	f6 c1       	rjmp	.+1004   	; 0x8442 <__fp_szero>
    8056:	60 e0       	ldi	r22, 0x00	; 0
    8058:	70 e0       	ldi	r23, 0x00	; 0
    805a:	80 e8       	ldi	r24, 0x80	; 128
    805c:	9f e3       	ldi	r25, 0x3F	; 63
    805e:	08 95       	ret
    8060:	26 f0       	brts	.+8      	; 0x806a <ceil+0x22>
    8062:	1b 16       	cp	r1, r27
    8064:	61 1d       	adc	r22, r1
    8066:	71 1d       	adc	r23, r1
    8068:	81 1d       	adc	r24, r1
    806a:	08 c1       	rjmp	.+528    	; 0x827c <__fp_mintl>
    806c:	22 c1       	rjmp	.+580    	; 0x82b2 <__fp_mpack>

0000806e <__cmpsf2>:
    806e:	dc d0       	rcall	.+440    	; 0x8228 <__fp_cmp>
    8070:	08 f4       	brcc	.+2      	; 0x8074 <__cmpsf2+0x6>
    8072:	81 e0       	ldi	r24, 0x01	; 1
    8074:	08 95       	ret

00008076 <cos>:
    8076:	62 d1       	rcall	.+708    	; 0x833c <__fp_rempio2>
    8078:	e3 95       	inc	r30
    807a:	98 c1       	rjmp	.+816    	; 0x83ac <__fp_sinus>

0000807c <__divsf3>:
    807c:	0c d0       	rcall	.+24     	; 0x8096 <__divsf3x>
    807e:	85 c1       	rjmp	.+778    	; 0x838a <__fp_round>
    8080:	55 d1       	rcall	.+682    	; 0x832c <__fp_pscB>
    8082:	40 f0       	brcs	.+16     	; 0x8094 <__divsf3+0x18>
    8084:	4c d1       	rcall	.+664    	; 0x831e <__fp_pscA>
    8086:	30 f0       	brcs	.+12     	; 0x8094 <__divsf3+0x18>
    8088:	21 f4       	brne	.+8      	; 0x8092 <__divsf3+0x16>
    808a:	5f 3f       	cpi	r21, 0xFF	; 255
    808c:	19 f0       	breq	.+6      	; 0x8094 <__divsf3+0x18>
    808e:	f0 c0       	rjmp	.+480    	; 0x8270 <__fp_inf>
    8090:	51 11       	cpse	r21, r1
    8092:	d7 c1       	rjmp	.+942    	; 0x8442 <__fp_szero>
    8094:	1c c1       	rjmp	.+568    	; 0x82ce <__fp_nan>

00008096 <__divsf3x>:
    8096:	9b d1       	rcall	.+822    	; 0x83ce <__fp_split3>
    8098:	98 f3       	brcs	.-26     	; 0x8080 <__divsf3+0x4>

0000809a <__divsf3_pse>:
    809a:	99 23       	and	r25, r25
    809c:	c9 f3       	breq	.-14     	; 0x8090 <__divsf3+0x14>
    809e:	55 23       	and	r21, r21
    80a0:	b1 f3       	breq	.-20     	; 0x808e <__divsf3+0x12>
    80a2:	95 1b       	sub	r25, r21
    80a4:	55 0b       	sbc	r21, r21
    80a6:	bb 27       	eor	r27, r27
    80a8:	aa 27       	eor	r26, r26
    80aa:	62 17       	cp	r22, r18
    80ac:	73 07       	cpc	r23, r19
    80ae:	84 07       	cpc	r24, r20
    80b0:	38 f0       	brcs	.+14     	; 0x80c0 <__divsf3_pse+0x26>
    80b2:	9f 5f       	subi	r25, 0xFF	; 255
    80b4:	5f 4f       	sbci	r21, 0xFF	; 255
    80b6:	22 0f       	add	r18, r18
    80b8:	33 1f       	adc	r19, r19
    80ba:	44 1f       	adc	r20, r20
    80bc:	aa 1f       	adc	r26, r26
    80be:	a9 f3       	breq	.-22     	; 0x80aa <__divsf3_pse+0x10>
    80c0:	33 d0       	rcall	.+102    	; 0x8128 <__divsf3_pse+0x8e>
    80c2:	0e 2e       	mov	r0, r30
    80c4:	3a f0       	brmi	.+14     	; 0x80d4 <__divsf3_pse+0x3a>
    80c6:	e0 e8       	ldi	r30, 0x80	; 128
    80c8:	30 d0       	rcall	.+96     	; 0x812a <__divsf3_pse+0x90>
    80ca:	91 50       	subi	r25, 0x01	; 1
    80cc:	50 40       	sbci	r21, 0x00	; 0
    80ce:	e6 95       	lsr	r30
    80d0:	00 1c       	adc	r0, r0
    80d2:	ca f7       	brpl	.-14     	; 0x80c6 <__divsf3_pse+0x2c>
    80d4:	29 d0       	rcall	.+82     	; 0x8128 <__divsf3_pse+0x8e>
    80d6:	fe 2f       	mov	r31, r30
    80d8:	27 d0       	rcall	.+78     	; 0x8128 <__divsf3_pse+0x8e>
    80da:	66 0f       	add	r22, r22
    80dc:	77 1f       	adc	r23, r23
    80de:	88 1f       	adc	r24, r24
    80e0:	bb 1f       	adc	r27, r27
    80e2:	26 17       	cp	r18, r22
    80e4:	37 07       	cpc	r19, r23
    80e6:	48 07       	cpc	r20, r24
    80e8:	ab 07       	cpc	r26, r27
    80ea:	b0 e8       	ldi	r27, 0x80	; 128
    80ec:	09 f0       	breq	.+2      	; 0x80f0 <__divsf3_pse+0x56>
    80ee:	bb 0b       	sbc	r27, r27
    80f0:	80 2d       	mov	r24, r0
    80f2:	bf 01       	movw	r22, r30
    80f4:	ff 27       	eor	r31, r31
    80f6:	93 58       	subi	r25, 0x83	; 131
    80f8:	5f 4f       	sbci	r21, 0xFF	; 255
    80fa:	2a f0       	brmi	.+10     	; 0x8106 <__divsf3_pse+0x6c>
    80fc:	9e 3f       	cpi	r25, 0xFE	; 254
    80fe:	51 05       	cpc	r21, r1
    8100:	68 f0       	brcs	.+26     	; 0x811c <__divsf3_pse+0x82>
    8102:	b6 c0       	rjmp	.+364    	; 0x8270 <__fp_inf>
    8104:	9e c1       	rjmp	.+828    	; 0x8442 <__fp_szero>
    8106:	5f 3f       	cpi	r21, 0xFF	; 255
    8108:	ec f3       	brlt	.-6      	; 0x8104 <__divsf3_pse+0x6a>
    810a:	98 3e       	cpi	r25, 0xE8	; 232
    810c:	dc f3       	brlt	.-10     	; 0x8104 <__divsf3_pse+0x6a>
    810e:	86 95       	lsr	r24
    8110:	77 95       	ror	r23
    8112:	67 95       	ror	r22
    8114:	b7 95       	ror	r27
    8116:	f7 95       	ror	r31
    8118:	9f 5f       	subi	r25, 0xFF	; 255
    811a:	c9 f7       	brne	.-14     	; 0x810e <__divsf3_pse+0x74>
    811c:	88 0f       	add	r24, r24
    811e:	91 1d       	adc	r25, r1
    8120:	96 95       	lsr	r25
    8122:	87 95       	ror	r24
    8124:	97 f9       	bld	r25, 7
    8126:	08 95       	ret
    8128:	e1 e0       	ldi	r30, 0x01	; 1
    812a:	66 0f       	add	r22, r22
    812c:	77 1f       	adc	r23, r23
    812e:	88 1f       	adc	r24, r24
    8130:	bb 1f       	adc	r27, r27
    8132:	62 17       	cp	r22, r18
    8134:	73 07       	cpc	r23, r19
    8136:	84 07       	cpc	r24, r20
    8138:	ba 07       	cpc	r27, r26
    813a:	20 f0       	brcs	.+8      	; 0x8144 <__divsf3_pse+0xaa>
    813c:	62 1b       	sub	r22, r18
    813e:	73 0b       	sbc	r23, r19
    8140:	84 0b       	sbc	r24, r20
    8142:	ba 0b       	sbc	r27, r26
    8144:	ee 1f       	adc	r30, r30
    8146:	88 f7       	brcc	.-30     	; 0x812a <__divsf3_pse+0x90>
    8148:	e0 95       	com	r30
    814a:	08 95       	ret

0000814c <__fixsfsi>:
    814c:	04 d0       	rcall	.+8      	; 0x8156 <__fixunssfsi>
    814e:	68 94       	set
    8150:	b1 11       	cpse	r27, r1
    8152:	77 c1       	rjmp	.+750    	; 0x8442 <__fp_szero>
    8154:	08 95       	ret

00008156 <__fixunssfsi>:
    8156:	43 d1       	rcall	.+646    	; 0x83de <__fp_splitA>
    8158:	88 f0       	brcs	.+34     	; 0x817c <__fixunssfsi+0x26>
    815a:	9f 57       	subi	r25, 0x7F	; 127
    815c:	90 f0       	brcs	.+36     	; 0x8182 <__fixunssfsi+0x2c>
    815e:	b9 2f       	mov	r27, r25
    8160:	99 27       	eor	r25, r25
    8162:	b7 51       	subi	r27, 0x17	; 23
    8164:	a0 f0       	brcs	.+40     	; 0x818e <__fixunssfsi+0x38>
    8166:	d1 f0       	breq	.+52     	; 0x819c <__fixunssfsi+0x46>
    8168:	66 0f       	add	r22, r22
    816a:	77 1f       	adc	r23, r23
    816c:	88 1f       	adc	r24, r24
    816e:	99 1f       	adc	r25, r25
    8170:	1a f0       	brmi	.+6      	; 0x8178 <__fixunssfsi+0x22>
    8172:	ba 95       	dec	r27
    8174:	c9 f7       	brne	.-14     	; 0x8168 <__fixunssfsi+0x12>
    8176:	12 c0       	rjmp	.+36     	; 0x819c <__fixunssfsi+0x46>
    8178:	b1 30       	cpi	r27, 0x01	; 1
    817a:	81 f0       	breq	.+32     	; 0x819c <__fixunssfsi+0x46>
    817c:	61 d1       	rcall	.+706    	; 0x8440 <__fp_zero>
    817e:	b1 e0       	ldi	r27, 0x01	; 1
    8180:	08 95       	ret
    8182:	5e c1       	rjmp	.+700    	; 0x8440 <__fp_zero>
    8184:	67 2f       	mov	r22, r23
    8186:	78 2f       	mov	r23, r24
    8188:	88 27       	eor	r24, r24
    818a:	b8 5f       	subi	r27, 0xF8	; 248
    818c:	39 f0       	breq	.+14     	; 0x819c <__fixunssfsi+0x46>
    818e:	b9 3f       	cpi	r27, 0xF9	; 249
    8190:	cc f3       	brlt	.-14     	; 0x8184 <__fixunssfsi+0x2e>
    8192:	86 95       	lsr	r24
    8194:	77 95       	ror	r23
    8196:	67 95       	ror	r22
    8198:	b3 95       	inc	r27
    819a:	d9 f7       	brne	.-10     	; 0x8192 <__fixunssfsi+0x3c>
    819c:	3e f4       	brtc	.+14     	; 0x81ac <__fixunssfsi+0x56>
    819e:	90 95       	com	r25
    81a0:	80 95       	com	r24
    81a2:	70 95       	com	r23
    81a4:	61 95       	neg	r22
    81a6:	7f 4f       	sbci	r23, 0xFF	; 255
    81a8:	8f 4f       	sbci	r24, 0xFF	; 255
    81aa:	9f 4f       	sbci	r25, 0xFF	; 255
    81ac:	08 95       	ret

000081ae <__floatunsisf>:
    81ae:	e8 94       	clt
    81b0:	09 c0       	rjmp	.+18     	; 0x81c4 <__floatsisf+0x12>

000081b2 <__floatsisf>:
    81b2:	97 fb       	bst	r25, 7
    81b4:	3e f4       	brtc	.+14     	; 0x81c4 <__floatsisf+0x12>
    81b6:	90 95       	com	r25
    81b8:	80 95       	com	r24
    81ba:	70 95       	com	r23
    81bc:	61 95       	neg	r22
    81be:	7f 4f       	sbci	r23, 0xFF	; 255
    81c0:	8f 4f       	sbci	r24, 0xFF	; 255
    81c2:	9f 4f       	sbci	r25, 0xFF	; 255
    81c4:	99 23       	and	r25, r25
    81c6:	a9 f0       	breq	.+42     	; 0x81f2 <__floatsisf+0x40>
    81c8:	f9 2f       	mov	r31, r25
    81ca:	96 e9       	ldi	r25, 0x96	; 150
    81cc:	bb 27       	eor	r27, r27
    81ce:	93 95       	inc	r25
    81d0:	f6 95       	lsr	r31
    81d2:	87 95       	ror	r24
    81d4:	77 95       	ror	r23
    81d6:	67 95       	ror	r22
    81d8:	b7 95       	ror	r27
    81da:	f1 11       	cpse	r31, r1
    81dc:	f8 cf       	rjmp	.-16     	; 0x81ce <__floatsisf+0x1c>
    81de:	fa f4       	brpl	.+62     	; 0x821e <__floatsisf+0x6c>
    81e0:	bb 0f       	add	r27, r27
    81e2:	11 f4       	brne	.+4      	; 0x81e8 <__floatsisf+0x36>
    81e4:	60 ff       	sbrs	r22, 0
    81e6:	1b c0       	rjmp	.+54     	; 0x821e <__floatsisf+0x6c>
    81e8:	6f 5f       	subi	r22, 0xFF	; 255
    81ea:	7f 4f       	sbci	r23, 0xFF	; 255
    81ec:	8f 4f       	sbci	r24, 0xFF	; 255
    81ee:	9f 4f       	sbci	r25, 0xFF	; 255
    81f0:	16 c0       	rjmp	.+44     	; 0x821e <__floatsisf+0x6c>
    81f2:	88 23       	and	r24, r24
    81f4:	11 f0       	breq	.+4      	; 0x81fa <__floatsisf+0x48>
    81f6:	96 e9       	ldi	r25, 0x96	; 150
    81f8:	11 c0       	rjmp	.+34     	; 0x821c <__floatsisf+0x6a>
    81fa:	77 23       	and	r23, r23
    81fc:	21 f0       	breq	.+8      	; 0x8206 <__floatsisf+0x54>
    81fe:	9e e8       	ldi	r25, 0x8E	; 142
    8200:	87 2f       	mov	r24, r23
    8202:	76 2f       	mov	r23, r22
    8204:	05 c0       	rjmp	.+10     	; 0x8210 <__floatsisf+0x5e>
    8206:	66 23       	and	r22, r22
    8208:	71 f0       	breq	.+28     	; 0x8226 <__floatsisf+0x74>
    820a:	96 e8       	ldi	r25, 0x86	; 134
    820c:	86 2f       	mov	r24, r22
    820e:	70 e0       	ldi	r23, 0x00	; 0
    8210:	60 e0       	ldi	r22, 0x00	; 0
    8212:	2a f0       	brmi	.+10     	; 0x821e <__floatsisf+0x6c>
    8214:	9a 95       	dec	r25
    8216:	66 0f       	add	r22, r22
    8218:	77 1f       	adc	r23, r23
    821a:	88 1f       	adc	r24, r24
    821c:	da f7       	brpl	.-10     	; 0x8214 <__floatsisf+0x62>
    821e:	88 0f       	add	r24, r24
    8220:	96 95       	lsr	r25
    8222:	87 95       	ror	r24
    8224:	97 f9       	bld	r25, 7
    8226:	08 95       	ret

00008228 <__fp_cmp>:
    8228:	99 0f       	add	r25, r25
    822a:	00 08       	sbc	r0, r0
    822c:	55 0f       	add	r21, r21
    822e:	aa 0b       	sbc	r26, r26
    8230:	e0 e8       	ldi	r30, 0x80	; 128
    8232:	fe ef       	ldi	r31, 0xFE	; 254
    8234:	16 16       	cp	r1, r22
    8236:	17 06       	cpc	r1, r23
    8238:	e8 07       	cpc	r30, r24
    823a:	f9 07       	cpc	r31, r25
    823c:	c0 f0       	brcs	.+48     	; 0x826e <__fp_cmp+0x46>
    823e:	12 16       	cp	r1, r18
    8240:	13 06       	cpc	r1, r19
    8242:	e4 07       	cpc	r30, r20
    8244:	f5 07       	cpc	r31, r21
    8246:	98 f0       	brcs	.+38     	; 0x826e <__fp_cmp+0x46>
    8248:	62 1b       	sub	r22, r18
    824a:	73 0b       	sbc	r23, r19
    824c:	84 0b       	sbc	r24, r20
    824e:	95 0b       	sbc	r25, r21
    8250:	39 f4       	brne	.+14     	; 0x8260 <__fp_cmp+0x38>
    8252:	0a 26       	eor	r0, r26
    8254:	61 f0       	breq	.+24     	; 0x826e <__fp_cmp+0x46>
    8256:	23 2b       	or	r18, r19
    8258:	24 2b       	or	r18, r20
    825a:	25 2b       	or	r18, r21
    825c:	21 f4       	brne	.+8      	; 0x8266 <__fp_cmp+0x3e>
    825e:	08 95       	ret
    8260:	0a 26       	eor	r0, r26
    8262:	09 f4       	brne	.+2      	; 0x8266 <__fp_cmp+0x3e>
    8264:	a1 40       	sbci	r26, 0x01	; 1
    8266:	a6 95       	lsr	r26
    8268:	8f ef       	ldi	r24, 0xFF	; 255
    826a:	81 1d       	adc	r24, r1
    826c:	81 1d       	adc	r24, r1
    826e:	08 95       	ret

00008270 <__fp_inf>:
    8270:	97 f9       	bld	r25, 7
    8272:	9f 67       	ori	r25, 0x7F	; 127
    8274:	80 e8       	ldi	r24, 0x80	; 128
    8276:	70 e0       	ldi	r23, 0x00	; 0
    8278:	60 e0       	ldi	r22, 0x00	; 0
    827a:	08 95       	ret

0000827c <__fp_mintl>:
    827c:	88 23       	and	r24, r24
    827e:	71 f4       	brne	.+28     	; 0x829c <__fp_mintl+0x20>
    8280:	77 23       	and	r23, r23
    8282:	21 f0       	breq	.+8      	; 0x828c <__fp_mintl+0x10>
    8284:	98 50       	subi	r25, 0x08	; 8
    8286:	87 2b       	or	r24, r23
    8288:	76 2f       	mov	r23, r22
    828a:	07 c0       	rjmp	.+14     	; 0x829a <__fp_mintl+0x1e>
    828c:	66 23       	and	r22, r22
    828e:	11 f4       	brne	.+4      	; 0x8294 <__fp_mintl+0x18>
    8290:	99 27       	eor	r25, r25
    8292:	0d c0       	rjmp	.+26     	; 0x82ae <__fp_mintl+0x32>
    8294:	90 51       	subi	r25, 0x10	; 16
    8296:	86 2b       	or	r24, r22
    8298:	70 e0       	ldi	r23, 0x00	; 0
    829a:	60 e0       	ldi	r22, 0x00	; 0
    829c:	2a f0       	brmi	.+10     	; 0x82a8 <__fp_mintl+0x2c>
    829e:	9a 95       	dec	r25
    82a0:	66 0f       	add	r22, r22
    82a2:	77 1f       	adc	r23, r23
    82a4:	88 1f       	adc	r24, r24
    82a6:	da f7       	brpl	.-10     	; 0x829e <__fp_mintl+0x22>
    82a8:	88 0f       	add	r24, r24
    82aa:	96 95       	lsr	r25
    82ac:	87 95       	ror	r24
    82ae:	97 f9       	bld	r25, 7
    82b0:	08 95       	ret

000082b2 <__fp_mpack>:
    82b2:	9f 3f       	cpi	r25, 0xFF	; 255
    82b4:	31 f0       	breq	.+12     	; 0x82c2 <__fp_mpack_finite+0xc>

000082b6 <__fp_mpack_finite>:
    82b6:	91 50       	subi	r25, 0x01	; 1
    82b8:	20 f4       	brcc	.+8      	; 0x82c2 <__fp_mpack_finite+0xc>
    82ba:	87 95       	ror	r24
    82bc:	77 95       	ror	r23
    82be:	67 95       	ror	r22
    82c0:	b7 95       	ror	r27
    82c2:	88 0f       	add	r24, r24
    82c4:	91 1d       	adc	r25, r1
    82c6:	96 95       	lsr	r25
    82c8:	87 95       	ror	r24
    82ca:	97 f9       	bld	r25, 7
    82cc:	08 95       	ret

000082ce <__fp_nan>:
    82ce:	9f ef       	ldi	r25, 0xFF	; 255
    82d0:	80 ec       	ldi	r24, 0xC0	; 192
    82d2:	08 95       	ret

000082d4 <__fp_powser>:
    82d4:	df 93       	push	r29
    82d6:	cf 93       	push	r28
    82d8:	1f 93       	push	r17
    82da:	0f 93       	push	r16
    82dc:	ff 92       	push	r15
    82de:	ef 92       	push	r14
    82e0:	df 92       	push	r13
    82e2:	7b 01       	movw	r14, r22
    82e4:	8c 01       	movw	r16, r24
    82e6:	68 94       	set
    82e8:	05 c0       	rjmp	.+10     	; 0x82f4 <__fp_powser+0x20>
    82ea:	da 2e       	mov	r13, r26
    82ec:	ef 01       	movw	r28, r30
    82ee:	8d d1       	rcall	.+794    	; 0x860a <__mulsf3x>
    82f0:	fe 01       	movw	r30, r28
    82f2:	e8 94       	clt
    82f4:	a5 91       	lpm	r26, Z+
    82f6:	25 91       	lpm	r18, Z+
    82f8:	35 91       	lpm	r19, Z+
    82fa:	45 91       	lpm	r20, Z+
    82fc:	55 91       	lpm	r21, Z+
    82fe:	ae f3       	brts	.-22     	; 0x82ea <__fp_powser+0x16>
    8300:	ef 01       	movw	r28, r30
    8302:	27 de       	rcall	.-946    	; 0x7f52 <__addsf3x>
    8304:	fe 01       	movw	r30, r28
    8306:	97 01       	movw	r18, r14
    8308:	a8 01       	movw	r20, r16
    830a:	da 94       	dec	r13
    830c:	79 f7       	brne	.-34     	; 0x82ec <__fp_powser+0x18>
    830e:	df 90       	pop	r13
    8310:	ef 90       	pop	r14
    8312:	ff 90       	pop	r15
    8314:	0f 91       	pop	r16
    8316:	1f 91       	pop	r17
    8318:	cf 91       	pop	r28
    831a:	df 91       	pop	r29
    831c:	08 95       	ret

0000831e <__fp_pscA>:
    831e:	00 24       	eor	r0, r0
    8320:	0a 94       	dec	r0
    8322:	16 16       	cp	r1, r22
    8324:	17 06       	cpc	r1, r23
    8326:	18 06       	cpc	r1, r24
    8328:	09 06       	cpc	r0, r25
    832a:	08 95       	ret

0000832c <__fp_pscB>:
    832c:	00 24       	eor	r0, r0
    832e:	0a 94       	dec	r0
    8330:	12 16       	cp	r1, r18
    8332:	13 06       	cpc	r1, r19
    8334:	14 06       	cpc	r1, r20
    8336:	05 06       	cpc	r0, r21
    8338:	08 95       	ret
    833a:	c9 cf       	rjmp	.-110    	; 0x82ce <__fp_nan>

0000833c <__fp_rempio2>:
    833c:	50 d0       	rcall	.+160    	; 0x83de <__fp_splitA>
    833e:	e8 f3       	brcs	.-6      	; 0x833a <__fp_pscB+0xe>
    8340:	e8 94       	clt
    8342:	e0 e0       	ldi	r30, 0x00	; 0
    8344:	bb 27       	eor	r27, r27
    8346:	9f 57       	subi	r25, 0x7F	; 127
    8348:	f0 f0       	brcs	.+60     	; 0x8386 <__fp_rempio2+0x4a>
    834a:	2a ed       	ldi	r18, 0xDA	; 218
    834c:	3f e0       	ldi	r19, 0x0F	; 15
    834e:	49 ec       	ldi	r20, 0xC9	; 201
    8350:	06 c0       	rjmp	.+12     	; 0x835e <__fp_rempio2+0x22>
    8352:	ee 0f       	add	r30, r30
    8354:	bb 0f       	add	r27, r27
    8356:	66 1f       	adc	r22, r22
    8358:	77 1f       	adc	r23, r23
    835a:	88 1f       	adc	r24, r24
    835c:	28 f0       	brcs	.+10     	; 0x8368 <__fp_rempio2+0x2c>
    835e:	b2 3a       	cpi	r27, 0xA2	; 162
    8360:	62 07       	cpc	r22, r18
    8362:	73 07       	cpc	r23, r19
    8364:	84 07       	cpc	r24, r20
    8366:	28 f0       	brcs	.+10     	; 0x8372 <__fp_rempio2+0x36>
    8368:	b2 5a       	subi	r27, 0xA2	; 162
    836a:	62 0b       	sbc	r22, r18
    836c:	73 0b       	sbc	r23, r19
    836e:	84 0b       	sbc	r24, r20
    8370:	e3 95       	inc	r30
    8372:	9a 95       	dec	r25
    8374:	72 f7       	brpl	.-36     	; 0x8352 <__fp_rempio2+0x16>
    8376:	80 38       	cpi	r24, 0x80	; 128
    8378:	30 f4       	brcc	.+12     	; 0x8386 <__fp_rempio2+0x4a>
    837a:	9a 95       	dec	r25
    837c:	bb 0f       	add	r27, r27
    837e:	66 1f       	adc	r22, r22
    8380:	77 1f       	adc	r23, r23
    8382:	88 1f       	adc	r24, r24
    8384:	d2 f7       	brpl	.-12     	; 0x837a <__fp_rempio2+0x3e>
    8386:	90 48       	sbci	r25, 0x80	; 128
    8388:	96 cf       	rjmp	.-212    	; 0x82b6 <__fp_mpack_finite>

0000838a <__fp_round>:
    838a:	09 2e       	mov	r0, r25
    838c:	03 94       	inc	r0
    838e:	00 0c       	add	r0, r0
    8390:	11 f4       	brne	.+4      	; 0x8396 <__fp_round+0xc>
    8392:	88 23       	and	r24, r24
    8394:	52 f0       	brmi	.+20     	; 0x83aa <__fp_round+0x20>
    8396:	bb 0f       	add	r27, r27
    8398:	40 f4       	brcc	.+16     	; 0x83aa <__fp_round+0x20>
    839a:	bf 2b       	or	r27, r31
    839c:	11 f4       	brne	.+4      	; 0x83a2 <__fp_round+0x18>
    839e:	60 ff       	sbrs	r22, 0
    83a0:	04 c0       	rjmp	.+8      	; 0x83aa <__fp_round+0x20>
    83a2:	6f 5f       	subi	r22, 0xFF	; 255
    83a4:	7f 4f       	sbci	r23, 0xFF	; 255
    83a6:	8f 4f       	sbci	r24, 0xFF	; 255
    83a8:	9f 4f       	sbci	r25, 0xFF	; 255
    83aa:	08 95       	ret

000083ac <__fp_sinus>:
    83ac:	ef 93       	push	r30
    83ae:	e0 ff       	sbrs	r30, 0
    83b0:	06 c0       	rjmp	.+12     	; 0x83be <__fp_sinus+0x12>
    83b2:	a2 ea       	ldi	r26, 0xA2	; 162
    83b4:	2a ed       	ldi	r18, 0xDA	; 218
    83b6:	3f e0       	ldi	r19, 0x0F	; 15
    83b8:	49 ec       	ldi	r20, 0xC9	; 201
    83ba:	5f eb       	ldi	r21, 0xBF	; 191
    83bc:	ca dd       	rcall	.-1132   	; 0x7f52 <__addsf3x>
    83be:	e5 df       	rcall	.-54     	; 0x838a <__fp_round>
    83c0:	0f 90       	pop	r0
    83c2:	03 94       	inc	r0
    83c4:	01 fc       	sbrc	r0, 1
    83c6:	90 58       	subi	r25, 0x80	; 128
    83c8:	e5 e1       	ldi	r30, 0x15	; 21
    83ca:	f2 e0       	ldi	r31, 0x02	; 2
    83cc:	d2 c1       	rjmp	.+932    	; 0x8772 <__fp_powsodd>

000083ce <__fp_split3>:
    83ce:	57 fd       	sbrc	r21, 7
    83d0:	90 58       	subi	r25, 0x80	; 128
    83d2:	44 0f       	add	r20, r20
    83d4:	55 1f       	adc	r21, r21
    83d6:	59 f0       	breq	.+22     	; 0x83ee <__fp_splitA+0x10>
    83d8:	5f 3f       	cpi	r21, 0xFF	; 255
    83da:	71 f0       	breq	.+28     	; 0x83f8 <__fp_splitA+0x1a>
    83dc:	47 95       	ror	r20

000083de <__fp_splitA>:
    83de:	88 0f       	add	r24, r24
    83e0:	97 fb       	bst	r25, 7
    83e2:	99 1f       	adc	r25, r25
    83e4:	61 f0       	breq	.+24     	; 0x83fe <__fp_splitA+0x20>
    83e6:	9f 3f       	cpi	r25, 0xFF	; 255
    83e8:	79 f0       	breq	.+30     	; 0x8408 <__fp_splitA+0x2a>
    83ea:	87 95       	ror	r24
    83ec:	08 95       	ret
    83ee:	12 16       	cp	r1, r18
    83f0:	13 06       	cpc	r1, r19
    83f2:	14 06       	cpc	r1, r20
    83f4:	55 1f       	adc	r21, r21
    83f6:	f2 cf       	rjmp	.-28     	; 0x83dc <__fp_split3+0xe>
    83f8:	46 95       	lsr	r20
    83fa:	f1 df       	rcall	.-30     	; 0x83de <__fp_splitA>
    83fc:	08 c0       	rjmp	.+16     	; 0x840e <__fp_splitA+0x30>
    83fe:	16 16       	cp	r1, r22
    8400:	17 06       	cpc	r1, r23
    8402:	18 06       	cpc	r1, r24
    8404:	99 1f       	adc	r25, r25
    8406:	f1 cf       	rjmp	.-30     	; 0x83ea <__fp_splitA+0xc>
    8408:	86 95       	lsr	r24
    840a:	71 05       	cpc	r23, r1
    840c:	61 05       	cpc	r22, r1
    840e:	08 94       	sec
    8410:	08 95       	ret

00008412 <__fp_trunc>:
    8412:	e5 df       	rcall	.-54     	; 0x83de <__fp_splitA>
    8414:	a0 f0       	brcs	.+40     	; 0x843e <__fp_trunc+0x2c>
    8416:	be e7       	ldi	r27, 0x7E	; 126
    8418:	b9 17       	cp	r27, r25
    841a:	88 f4       	brcc	.+34     	; 0x843e <__fp_trunc+0x2c>
    841c:	bb 27       	eor	r27, r27
    841e:	9f 38       	cpi	r25, 0x8F	; 143
    8420:	60 f4       	brcc	.+24     	; 0x843a <__fp_trunc+0x28>
    8422:	16 16       	cp	r1, r22
    8424:	b1 1d       	adc	r27, r1
    8426:	67 2f       	mov	r22, r23
    8428:	78 2f       	mov	r23, r24
    842a:	88 27       	eor	r24, r24
    842c:	98 5f       	subi	r25, 0xF8	; 248
    842e:	f7 cf       	rjmp	.-18     	; 0x841e <__fp_trunc+0xc>
    8430:	86 95       	lsr	r24
    8432:	77 95       	ror	r23
    8434:	67 95       	ror	r22
    8436:	b1 1d       	adc	r27, r1
    8438:	93 95       	inc	r25
    843a:	96 39       	cpi	r25, 0x96	; 150
    843c:	c8 f3       	brcs	.-14     	; 0x8430 <__fp_trunc+0x1e>
    843e:	08 95       	ret

00008440 <__fp_zero>:
    8440:	e8 94       	clt

00008442 <__fp_szero>:
    8442:	bb 27       	eor	r27, r27
    8444:	66 27       	eor	r22, r22
    8446:	77 27       	eor	r23, r23
    8448:	cb 01       	movw	r24, r22
    844a:	97 f9       	bld	r25, 7
    844c:	08 95       	ret

0000844e <__gesf2>:
    844e:	ec de       	rcall	.-552    	; 0x8228 <__fp_cmp>
    8450:	08 f4       	brcc	.+2      	; 0x8454 <__gesf2+0x6>
    8452:	8f ef       	ldi	r24, 0xFF	; 255
    8454:	08 95       	ret
    8456:	63 df       	rcall	.-314    	; 0x831e <__fp_pscA>
    8458:	19 f0       	breq	.+6      	; 0x8460 <__gesf2+0x12>
    845a:	68 df       	rcall	.-304    	; 0x832c <__fp_pscB>
    845c:	09 f0       	breq	.+2      	; 0x8460 <__gesf2+0x12>
    845e:	37 cf       	rjmp	.-402    	; 0x82ce <__fp_nan>
    8460:	07 cf       	rjmp	.-498    	; 0x8270 <__fp_inf>
    8462:	b9 01       	movw	r22, r18
    8464:	ca 01       	movw	r24, r20
    8466:	25 cf       	rjmp	.-438    	; 0x82b2 <__fp_mpack>

00008468 <hypot>:
    8468:	9f 77       	andi	r25, 0x7F	; 127
    846a:	5f 77       	andi	r21, 0x7F	; 127
    846c:	b0 df       	rcall	.-160    	; 0x83ce <__fp_split3>
    846e:	98 f3       	brcs	.-26     	; 0x8456 <__gesf2+0x8>
    8470:	99 23       	and	r25, r25
    8472:	b9 f3       	breq	.-18     	; 0x8462 <__gesf2+0x14>
    8474:	55 23       	and	r21, r21
    8476:	b9 f3       	breq	.-18     	; 0x8466 <__gesf2+0x18>
    8478:	ff 27       	eor	r31, r31
    847a:	95 17       	cp	r25, r21
    847c:	58 f4       	brcc	.+22     	; 0x8494 <hypot+0x2c>
    847e:	e5 2f       	mov	r30, r21
    8480:	e9 1b       	sub	r30, r25
    8482:	ed 30       	cpi	r30, 0x0D	; 13
    8484:	70 f7       	brcc	.-36     	; 0x8462 <__gesf2+0x14>
    8486:	5e 3b       	cpi	r21, 0xBE	; 190
    8488:	10 f0       	brcs	.+4      	; 0x848e <hypot+0x26>
    848a:	f1 e4       	ldi	r31, 0x41	; 65
    848c:	1c c0       	rjmp	.+56     	; 0x84c6 <hypot+0x5e>
    848e:	90 34       	cpi	r25, 0x40	; 64
    8490:	e0 f4       	brcc	.+56     	; 0x84ca <hypot+0x62>
    8492:	0a c0       	rjmp	.+20     	; 0x84a8 <hypot+0x40>
    8494:	e9 2f       	mov	r30, r25
    8496:	e5 1b       	sub	r30, r21
    8498:	ed 30       	cpi	r30, 0x0D	; 13
    849a:	28 f7       	brcc	.-54     	; 0x8466 <__gesf2+0x18>
    849c:	9e 3b       	cpi	r25, 0xBE	; 190
    849e:	10 f0       	brcs	.+4      	; 0x84a4 <hypot+0x3c>
    84a0:	f1 e4       	ldi	r31, 0x41	; 65
    84a2:	11 c0       	rjmp	.+34     	; 0x84c6 <hypot+0x5e>
    84a4:	50 34       	cpi	r21, 0x40	; 64
    84a6:	88 f4       	brcc	.+34     	; 0x84ca <hypot+0x62>
    84a8:	f9 ea       	ldi	r31, 0xA9	; 169
    84aa:	88 23       	and	r24, r24
    84ac:	2a f0       	brmi	.+10     	; 0x84b8 <hypot+0x50>
    84ae:	9a 95       	dec	r25
    84b0:	66 0f       	add	r22, r22
    84b2:	77 1f       	adc	r23, r23
    84b4:	88 1f       	adc	r24, r24
    84b6:	da f7       	brpl	.-10     	; 0x84ae <hypot+0x46>
    84b8:	44 23       	and	r20, r20
    84ba:	2a f0       	brmi	.+10     	; 0x84c6 <hypot+0x5e>
    84bc:	5a 95       	dec	r21
    84be:	22 0f       	add	r18, r18
    84c0:	33 1f       	adc	r19, r19
    84c2:	44 1f       	adc	r20, r20
    84c4:	da f7       	brpl	.-10     	; 0x84bc <hypot+0x54>
    84c6:	9f 1b       	sub	r25, r31
    84c8:	5f 1b       	sub	r21, r31
    84ca:	ff 93       	push	r31
    84cc:	1f 93       	push	r17
    84ce:	0f 93       	push	r16
    84d0:	ff 92       	push	r15
    84d2:	ef 92       	push	r14
    84d4:	79 01       	movw	r14, r18
    84d6:	8a 01       	movw	r16, r20
    84d8:	bb 27       	eor	r27, r27
    84da:	ab 2f       	mov	r26, r27
    84dc:	9b 01       	movw	r18, r22
    84de:	ac 01       	movw	r20, r24
    84e0:	96 d0       	rcall	.+300    	; 0x860e <__mulsf3_pse>
    84e2:	97 01       	movw	r18, r14
    84e4:	a8 01       	movw	r20, r16
    84e6:	bf 93       	push	r27
    84e8:	7b 01       	movw	r14, r22
    84ea:	8c 01       	movw	r16, r24
    84ec:	aa 27       	eor	r26, r26
    84ee:	ba 2f       	mov	r27, r26
    84f0:	b9 01       	movw	r22, r18
    84f2:	ca 01       	movw	r24, r20
    84f4:	8c d0       	rcall	.+280    	; 0x860e <__mulsf3_pse>
    84f6:	af 91       	pop	r26
    84f8:	97 01       	movw	r18, r14
    84fa:	a8 01       	movw	r20, r16
    84fc:	ef 90       	pop	r14
    84fe:	ff 90       	pop	r15
    8500:	0f 91       	pop	r16
    8502:	1f 91       	pop	r17
    8504:	26 dd       	rcall	.-1460   	; 0x7f52 <__addsf3x>
    8506:	41 df       	rcall	.-382    	; 0x838a <__fp_round>
    8508:	e1 d0       	rcall	.+450    	; 0x86cc <sqrt>
    850a:	4f 91       	pop	r20
    850c:	40 ff       	sbrs	r20, 0
    850e:	08 95       	ret
    8510:	55 27       	eor	r21, r21
    8512:	47 fd       	sbrc	r20, 7
    8514:	50 95       	com	r21
    8516:	09 c0       	rjmp	.+18     	; 0x852a <ldexp>

00008518 <inverse>:
    8518:	9b 01       	movw	r18, r22
    851a:	ac 01       	movw	r20, r24
    851c:	60 e0       	ldi	r22, 0x00	; 0
    851e:	70 e0       	ldi	r23, 0x00	; 0
    8520:	80 e8       	ldi	r24, 0x80	; 128
    8522:	9f e3       	ldi	r25, 0x3F	; 63
    8524:	ab cd       	rjmp	.-1194   	; 0x807c <__divsf3>
    8526:	a4 ce       	rjmp	.-696    	; 0x8270 <__fp_inf>
    8528:	c4 ce       	rjmp	.-632    	; 0x82b2 <__fp_mpack>

0000852a <ldexp>:
    852a:	59 df       	rcall	.-334    	; 0x83de <__fp_splitA>
    852c:	e8 f3       	brcs	.-6      	; 0x8528 <inverse+0x10>
    852e:	99 23       	and	r25, r25
    8530:	d9 f3       	breq	.-10     	; 0x8528 <inverse+0x10>
    8532:	94 0f       	add	r25, r20
    8534:	51 1d       	adc	r21, r1
    8536:	bb f3       	brvs	.-18     	; 0x8526 <inverse+0xe>
    8538:	91 50       	subi	r25, 0x01	; 1
    853a:	50 40       	sbci	r21, 0x00	; 0
    853c:	94 f0       	brlt	.+36     	; 0x8562 <ldexp+0x38>
    853e:	59 f0       	breq	.+22     	; 0x8556 <ldexp+0x2c>
    8540:	88 23       	and	r24, r24
    8542:	32 f0       	brmi	.+12     	; 0x8550 <ldexp+0x26>
    8544:	66 0f       	add	r22, r22
    8546:	77 1f       	adc	r23, r23
    8548:	88 1f       	adc	r24, r24
    854a:	91 50       	subi	r25, 0x01	; 1
    854c:	50 40       	sbci	r21, 0x00	; 0
    854e:	c1 f7       	brne	.-16     	; 0x8540 <ldexp+0x16>
    8550:	9e 3f       	cpi	r25, 0xFE	; 254
    8552:	51 05       	cpc	r21, r1
    8554:	44 f7       	brge	.-48     	; 0x8526 <inverse+0xe>
    8556:	88 0f       	add	r24, r24
    8558:	91 1d       	adc	r25, r1
    855a:	96 95       	lsr	r25
    855c:	87 95       	ror	r24
    855e:	97 f9       	bld	r25, 7
    8560:	08 95       	ret
    8562:	5f 3f       	cpi	r21, 0xFF	; 255
    8564:	ac f0       	brlt	.+42     	; 0x8590 <ldexp+0x66>
    8566:	98 3e       	cpi	r25, 0xE8	; 232
    8568:	9c f0       	brlt	.+38     	; 0x8590 <ldexp+0x66>
    856a:	bb 27       	eor	r27, r27
    856c:	86 95       	lsr	r24
    856e:	77 95       	ror	r23
    8570:	67 95       	ror	r22
    8572:	b7 95       	ror	r27
    8574:	08 f4       	brcc	.+2      	; 0x8578 <ldexp+0x4e>
    8576:	b1 60       	ori	r27, 0x01	; 1
    8578:	93 95       	inc	r25
    857a:	c1 f7       	brne	.-16     	; 0x856c <ldexp+0x42>
    857c:	bb 0f       	add	r27, r27
    857e:	58 f7       	brcc	.-42     	; 0x8556 <ldexp+0x2c>
    8580:	11 f4       	brne	.+4      	; 0x8586 <ldexp+0x5c>
    8582:	60 ff       	sbrs	r22, 0
    8584:	e8 cf       	rjmp	.-48     	; 0x8556 <ldexp+0x2c>
    8586:	6f 5f       	subi	r22, 0xFF	; 255
    8588:	7f 4f       	sbci	r23, 0xFF	; 255
    858a:	8f 4f       	sbci	r24, 0xFF	; 255
    858c:	9f 4f       	sbci	r25, 0xFF	; 255
    858e:	e3 cf       	rjmp	.-58     	; 0x8556 <ldexp+0x2c>
    8590:	58 cf       	rjmp	.-336    	; 0x8442 <__fp_szero>

00008592 <lround>:
    8592:	25 df       	rcall	.-438    	; 0x83de <__fp_splitA>
    8594:	58 f1       	brcs	.+86     	; 0x85ec <lround+0x5a>
    8596:	9e 57       	subi	r25, 0x7E	; 126
    8598:	58 f1       	brcs	.+86     	; 0x85f0 <lround+0x5e>
    859a:	98 51       	subi	r25, 0x18	; 24
    859c:	a0 f0       	brcs	.+40     	; 0x85c6 <lround+0x34>
    859e:	e9 f0       	breq	.+58     	; 0x85da <lround+0x48>
    85a0:	98 30       	cpi	r25, 0x08	; 8
    85a2:	20 f5       	brcc	.+72     	; 0x85ec <lround+0x5a>
    85a4:	09 2e       	mov	r0, r25
    85a6:	99 27       	eor	r25, r25
    85a8:	66 0f       	add	r22, r22
    85aa:	77 1f       	adc	r23, r23
    85ac:	88 1f       	adc	r24, r24
    85ae:	99 1f       	adc	r25, r25
    85b0:	0a 94       	dec	r0
    85b2:	d1 f7       	brne	.-12     	; 0x85a8 <lround+0x16>
    85b4:	12 c0       	rjmp	.+36     	; 0x85da <lround+0x48>
    85b6:	06 2e       	mov	r0, r22
    85b8:	67 2f       	mov	r22, r23
    85ba:	78 2f       	mov	r23, r24
    85bc:	88 27       	eor	r24, r24
    85be:	98 5f       	subi	r25, 0xF8	; 248
    85c0:	11 f4       	brne	.+4      	; 0x85c6 <lround+0x34>
    85c2:	00 0c       	add	r0, r0
    85c4:	07 c0       	rjmp	.+14     	; 0x85d4 <lround+0x42>
    85c6:	99 3f       	cpi	r25, 0xF9	; 249
    85c8:	b4 f3       	brlt	.-20     	; 0x85b6 <lround+0x24>
    85ca:	86 95       	lsr	r24
    85cc:	77 95       	ror	r23
    85ce:	67 95       	ror	r22
    85d0:	93 95       	inc	r25
    85d2:	d9 f7       	brne	.-10     	; 0x85ca <lround+0x38>
    85d4:	61 1d       	adc	r22, r1
    85d6:	71 1d       	adc	r23, r1
    85d8:	81 1d       	adc	r24, r1
    85da:	3e f4       	brtc	.+14     	; 0x85ea <lround+0x58>
    85dc:	90 95       	com	r25
    85de:	80 95       	com	r24
    85e0:	70 95       	com	r23
    85e2:	61 95       	neg	r22
    85e4:	7f 4f       	sbci	r23, 0xFF	; 255
    85e6:	8f 4f       	sbci	r24, 0xFF	; 255
    85e8:	9f 4f       	sbci	r25, 0xFF	; 255
    85ea:	08 95       	ret
    85ec:	68 94       	set
    85ee:	29 cf       	rjmp	.-430    	; 0x8442 <__fp_szero>
    85f0:	27 cf       	rjmp	.-434    	; 0x8440 <__fp_zero>

000085f2 <__mulsf3>:
    85f2:	0b d0       	rcall	.+22     	; 0x860a <__mulsf3x>
    85f4:	ca ce       	rjmp	.-620    	; 0x838a <__fp_round>
    85f6:	93 de       	rcall	.-730    	; 0x831e <__fp_pscA>
    85f8:	28 f0       	brcs	.+10     	; 0x8604 <__mulsf3+0x12>
    85fa:	98 de       	rcall	.-720    	; 0x832c <__fp_pscB>
    85fc:	18 f0       	brcs	.+6      	; 0x8604 <__mulsf3+0x12>
    85fe:	95 23       	and	r25, r21
    8600:	09 f0       	breq	.+2      	; 0x8604 <__mulsf3+0x12>
    8602:	36 ce       	rjmp	.-916    	; 0x8270 <__fp_inf>
    8604:	64 ce       	rjmp	.-824    	; 0x82ce <__fp_nan>
    8606:	11 24       	eor	r1, r1
    8608:	1c cf       	rjmp	.-456    	; 0x8442 <__fp_szero>

0000860a <__mulsf3x>:
    860a:	e1 de       	rcall	.-574    	; 0x83ce <__fp_split3>
    860c:	a0 f3       	brcs	.-24     	; 0x85f6 <__mulsf3+0x4>

0000860e <__mulsf3_pse>:
    860e:	95 9f       	mul	r25, r21
    8610:	d1 f3       	breq	.-12     	; 0x8606 <__mulsf3+0x14>
    8612:	95 0f       	add	r25, r21
    8614:	50 e0       	ldi	r21, 0x00	; 0
    8616:	55 1f       	adc	r21, r21
    8618:	62 9f       	mul	r22, r18
    861a:	f0 01       	movw	r30, r0
    861c:	72 9f       	mul	r23, r18
    861e:	bb 27       	eor	r27, r27
    8620:	f0 0d       	add	r31, r0
    8622:	b1 1d       	adc	r27, r1
    8624:	63 9f       	mul	r22, r19
    8626:	aa 27       	eor	r26, r26
    8628:	f0 0d       	add	r31, r0
    862a:	b1 1d       	adc	r27, r1
    862c:	aa 1f       	adc	r26, r26
    862e:	64 9f       	mul	r22, r20
    8630:	66 27       	eor	r22, r22
    8632:	b0 0d       	add	r27, r0
    8634:	a1 1d       	adc	r26, r1
    8636:	66 1f       	adc	r22, r22
    8638:	82 9f       	mul	r24, r18
    863a:	22 27       	eor	r18, r18
    863c:	b0 0d       	add	r27, r0
    863e:	a1 1d       	adc	r26, r1
    8640:	62 1f       	adc	r22, r18
    8642:	73 9f       	mul	r23, r19
    8644:	b0 0d       	add	r27, r0
    8646:	a1 1d       	adc	r26, r1
    8648:	62 1f       	adc	r22, r18
    864a:	83 9f       	mul	r24, r19
    864c:	a0 0d       	add	r26, r0
    864e:	61 1d       	adc	r22, r1
    8650:	22 1f       	adc	r18, r18
    8652:	74 9f       	mul	r23, r20
    8654:	33 27       	eor	r19, r19
    8656:	a0 0d       	add	r26, r0
    8658:	61 1d       	adc	r22, r1
    865a:	23 1f       	adc	r18, r19
    865c:	84 9f       	mul	r24, r20
    865e:	60 0d       	add	r22, r0
    8660:	21 1d       	adc	r18, r1
    8662:	82 2f       	mov	r24, r18
    8664:	76 2f       	mov	r23, r22
    8666:	6a 2f       	mov	r22, r26
    8668:	11 24       	eor	r1, r1
    866a:	9f 57       	subi	r25, 0x7F	; 127
    866c:	50 40       	sbci	r21, 0x00	; 0
    866e:	8a f0       	brmi	.+34     	; 0x8692 <__mulsf3_pse+0x84>
    8670:	e1 f0       	breq	.+56     	; 0x86aa <__mulsf3_pse+0x9c>
    8672:	88 23       	and	r24, r24
    8674:	4a f0       	brmi	.+18     	; 0x8688 <__mulsf3_pse+0x7a>
    8676:	ee 0f       	add	r30, r30
    8678:	ff 1f       	adc	r31, r31
    867a:	bb 1f       	adc	r27, r27
    867c:	66 1f       	adc	r22, r22
    867e:	77 1f       	adc	r23, r23
    8680:	88 1f       	adc	r24, r24
    8682:	91 50       	subi	r25, 0x01	; 1
    8684:	50 40       	sbci	r21, 0x00	; 0
    8686:	a9 f7       	brne	.-22     	; 0x8672 <__mulsf3_pse+0x64>
    8688:	9e 3f       	cpi	r25, 0xFE	; 254
    868a:	51 05       	cpc	r21, r1
    868c:	70 f0       	brcs	.+28     	; 0x86aa <__mulsf3_pse+0x9c>
    868e:	f0 cd       	rjmp	.-1056   	; 0x8270 <__fp_inf>
    8690:	d8 ce       	rjmp	.-592    	; 0x8442 <__fp_szero>
    8692:	5f 3f       	cpi	r21, 0xFF	; 255
    8694:	ec f3       	brlt	.-6      	; 0x8690 <__mulsf3_pse+0x82>
    8696:	98 3e       	cpi	r25, 0xE8	; 232
    8698:	dc f3       	brlt	.-10     	; 0x8690 <__mulsf3_pse+0x82>
    869a:	86 95       	lsr	r24
    869c:	77 95       	ror	r23
    869e:	67 95       	ror	r22
    86a0:	b7 95       	ror	r27
    86a2:	f7 95       	ror	r31
    86a4:	e7 95       	ror	r30
    86a6:	9f 5f       	subi	r25, 0xFF	; 255
    86a8:	c1 f7       	brne	.-16     	; 0x869a <__mulsf3_pse+0x8c>
    86aa:	fe 2b       	or	r31, r30
    86ac:	88 0f       	add	r24, r24
    86ae:	91 1d       	adc	r25, r1
    86b0:	96 95       	lsr	r25
    86b2:	87 95       	ror	r24
    86b4:	97 f9       	bld	r25, 7
    86b6:	08 95       	ret

000086b8 <sin>:
    86b8:	9f 93       	push	r25
    86ba:	40 de       	rcall	.-896    	; 0x833c <__fp_rempio2>
    86bc:	0f 90       	pop	r0
    86be:	07 fc       	sbrc	r0, 7
    86c0:	ee 5f       	subi	r30, 0xFE	; 254
    86c2:	74 ce       	rjmp	.-792    	; 0x83ac <__fp_sinus>
    86c4:	11 f4       	brne	.+4      	; 0x86ca <sin+0x12>
    86c6:	0e f4       	brtc	.+2      	; 0x86ca <sin+0x12>
    86c8:	02 ce       	rjmp	.-1020   	; 0x82ce <__fp_nan>
    86ca:	f3 cd       	rjmp	.-1050   	; 0x82b2 <__fp_mpack>

000086cc <sqrt>:
    86cc:	88 de       	rcall	.-752    	; 0x83de <__fp_splitA>
    86ce:	d0 f3       	brcs	.-12     	; 0x86c4 <sin+0xc>
    86d0:	99 23       	and	r25, r25
    86d2:	d9 f3       	breq	.-10     	; 0x86ca <sin+0x12>
    86d4:	ce f3       	brts	.-14     	; 0x86c8 <sin+0x10>
    86d6:	9f 57       	subi	r25, 0x7F	; 127
    86d8:	55 0b       	sbc	r21, r21
    86da:	87 ff       	sbrs	r24, 7
    86dc:	43 d0       	rcall	.+134    	; 0x8764 <__fp_norm2>
    86de:	00 24       	eor	r0, r0
    86e0:	a0 e6       	ldi	r26, 0x60	; 96
    86e2:	40 ea       	ldi	r20, 0xA0	; 160
    86e4:	90 01       	movw	r18, r0
    86e6:	80 58       	subi	r24, 0x80	; 128
    86e8:	56 95       	lsr	r21
    86ea:	97 95       	ror	r25
    86ec:	28 f4       	brcc	.+10     	; 0x86f8 <sqrt+0x2c>
    86ee:	80 5c       	subi	r24, 0xC0	; 192
    86f0:	66 0f       	add	r22, r22
    86f2:	77 1f       	adc	r23, r23
    86f4:	88 1f       	adc	r24, r24
    86f6:	20 f0       	brcs	.+8      	; 0x8700 <sqrt+0x34>
    86f8:	26 17       	cp	r18, r22
    86fa:	37 07       	cpc	r19, r23
    86fc:	48 07       	cpc	r20, r24
    86fe:	30 f4       	brcc	.+12     	; 0x870c <sqrt+0x40>
    8700:	62 1b       	sub	r22, r18
    8702:	73 0b       	sbc	r23, r19
    8704:	84 0b       	sbc	r24, r20
    8706:	20 29       	or	r18, r0
    8708:	31 29       	or	r19, r1
    870a:	4a 2b       	or	r20, r26
    870c:	a6 95       	lsr	r26
    870e:	17 94       	ror	r1
    8710:	07 94       	ror	r0
    8712:	20 25       	eor	r18, r0
    8714:	31 25       	eor	r19, r1
    8716:	4a 27       	eor	r20, r26
    8718:	58 f7       	brcc	.-42     	; 0x86f0 <sqrt+0x24>
    871a:	66 0f       	add	r22, r22
    871c:	77 1f       	adc	r23, r23
    871e:	88 1f       	adc	r24, r24
    8720:	20 f0       	brcs	.+8      	; 0x872a <sqrt+0x5e>
    8722:	26 17       	cp	r18, r22
    8724:	37 07       	cpc	r19, r23
    8726:	48 07       	cpc	r20, r24
    8728:	30 f4       	brcc	.+12     	; 0x8736 <sqrt+0x6a>
    872a:	62 0b       	sbc	r22, r18
    872c:	73 0b       	sbc	r23, r19
    872e:	84 0b       	sbc	r24, r20
    8730:	20 0d       	add	r18, r0
    8732:	31 1d       	adc	r19, r1
    8734:	41 1d       	adc	r20, r1
    8736:	a0 95       	com	r26
    8738:	81 f7       	brne	.-32     	; 0x871a <sqrt+0x4e>
    873a:	b9 01       	movw	r22, r18
    873c:	84 2f       	mov	r24, r20
    873e:	91 58       	subi	r25, 0x81	; 129
    8740:	88 0f       	add	r24, r24
    8742:	96 95       	lsr	r25
    8744:	87 95       	ror	r24
    8746:	08 95       	ret

00008748 <square>:
    8748:	9b 01       	movw	r18, r22
    874a:	ac 01       	movw	r20, r24
    874c:	52 cf       	rjmp	.-348    	; 0x85f2 <__mulsf3>

0000874e <trunc>:
    874e:	61 de       	rcall	.-830    	; 0x8412 <__fp_trunc>
    8750:	20 f0       	brcs	.+8      	; 0x875a <trunc+0xc>
    8752:	9f 37       	cpi	r25, 0x7F	; 127
    8754:	08 f4       	brcc	.+2      	; 0x8758 <trunc+0xa>
    8756:	75 ce       	rjmp	.-790    	; 0x8442 <__fp_szero>
    8758:	91 cd       	rjmp	.-1246   	; 0x827c <__fp_mintl>
    875a:	ab cd       	rjmp	.-1194   	; 0x82b2 <__fp_mpack>

0000875c <__unordsf2>:
    875c:	65 dd       	rcall	.-1334   	; 0x8228 <__fp_cmp>
    875e:	88 0b       	sbc	r24, r24
    8760:	99 0b       	sbc	r25, r25
    8762:	08 95       	ret

00008764 <__fp_norm2>:
    8764:	91 50       	subi	r25, 0x01	; 1
    8766:	50 40       	sbci	r21, 0x00	; 0
    8768:	66 0f       	add	r22, r22
    876a:	77 1f       	adc	r23, r23
    876c:	88 1f       	adc	r24, r24
    876e:	d2 f7       	brpl	.-12     	; 0x8764 <__fp_norm2>
    8770:	08 95       	ret

00008772 <__fp_powsodd>:
    8772:	9f 93       	push	r25
    8774:	8f 93       	push	r24
    8776:	7f 93       	push	r23
    8778:	6f 93       	push	r22
    877a:	ff 93       	push	r31
    877c:	ef 93       	push	r30
    877e:	9b 01       	movw	r18, r22
    8780:	ac 01       	movw	r20, r24
    8782:	37 df       	rcall	.-402    	; 0x85f2 <__mulsf3>
    8784:	ef 91       	pop	r30
    8786:	ff 91       	pop	r31
    8788:	a5 dd       	rcall	.-1206   	; 0x82d4 <__fp_powser>
    878a:	2f 91       	pop	r18
    878c:	3f 91       	pop	r19
    878e:	4f 91       	pop	r20
    8790:	5f 91       	pop	r21
    8792:	2f cf       	rjmp	.-418    	; 0x85f2 <__mulsf3>

00008794 <__mulsi3>:
    8794:	62 9f       	mul	r22, r18
    8796:	d0 01       	movw	r26, r0
    8798:	73 9f       	mul	r23, r19
    879a:	f0 01       	movw	r30, r0
    879c:	82 9f       	mul	r24, r18
    879e:	e0 0d       	add	r30, r0
    87a0:	f1 1d       	adc	r31, r1
    87a2:	64 9f       	mul	r22, r20
    87a4:	e0 0d       	add	r30, r0
    87a6:	f1 1d       	adc	r31, r1
    87a8:	92 9f       	mul	r25, r18
    87aa:	f0 0d       	add	r31, r0
    87ac:	83 9f       	mul	r24, r19
    87ae:	f0 0d       	add	r31, r0
    87b0:	74 9f       	mul	r23, r20
    87b2:	f0 0d       	add	r31, r0
    87b4:	65 9f       	mul	r22, r21
    87b6:	f0 0d       	add	r31, r0
    87b8:	99 27       	eor	r25, r25
    87ba:	72 9f       	mul	r23, r18
    87bc:	b0 0d       	add	r27, r0
    87be:	e1 1d       	adc	r30, r1
    87c0:	f9 1f       	adc	r31, r25
    87c2:	63 9f       	mul	r22, r19
    87c4:	b0 0d       	add	r27, r0
    87c6:	e1 1d       	adc	r30, r1
    87c8:	f9 1f       	adc	r31, r25
    87ca:	bd 01       	movw	r22, r26
    87cc:	cf 01       	movw	r24, r30
    87ce:	11 24       	eor	r1, r1
    87d0:	08 95       	ret

000087d2 <__udivmodsi4>:
    87d2:	a1 e2       	ldi	r26, 0x21	; 33
    87d4:	1a 2e       	mov	r1, r26
    87d6:	aa 1b       	sub	r26, r26
    87d8:	bb 1b       	sub	r27, r27
    87da:	fd 01       	movw	r30, r26
    87dc:	0d c0       	rjmp	.+26     	; 0x87f8 <__udivmodsi4_ep>

000087de <__udivmodsi4_loop>:
    87de:	aa 1f       	adc	r26, r26
    87e0:	bb 1f       	adc	r27, r27
    87e2:	ee 1f       	adc	r30, r30
    87e4:	ff 1f       	adc	r31, r31
    87e6:	a2 17       	cp	r26, r18
    87e8:	b3 07       	cpc	r27, r19
    87ea:	e4 07       	cpc	r30, r20
    87ec:	f5 07       	cpc	r31, r21
    87ee:	20 f0       	brcs	.+8      	; 0x87f8 <__udivmodsi4_ep>
    87f0:	a2 1b       	sub	r26, r18
    87f2:	b3 0b       	sbc	r27, r19
    87f4:	e4 0b       	sbc	r30, r20
    87f6:	f5 0b       	sbc	r31, r21

000087f8 <__udivmodsi4_ep>:
    87f8:	66 1f       	adc	r22, r22
    87fa:	77 1f       	adc	r23, r23
    87fc:	88 1f       	adc	r24, r24
    87fe:	99 1f       	adc	r25, r25
    8800:	1a 94       	dec	r1
    8802:	69 f7       	brne	.-38     	; 0x87de <__udivmodsi4_loop>
    8804:	60 95       	com	r22
    8806:	70 95       	com	r23
    8808:	80 95       	com	r24
    880a:	90 95       	com	r25
    880c:	9b 01       	movw	r18, r22
    880e:	ac 01       	movw	r20, r24
    8810:	bd 01       	movw	r22, r26
    8812:	cf 01       	movw	r24, r30
    8814:	08 95       	ret

00008816 <__prologue_saves__>:
    8816:	2f 92       	push	r2
    8818:	3f 92       	push	r3
    881a:	4f 92       	push	r4
    881c:	5f 92       	push	r5
    881e:	6f 92       	push	r6
    8820:	7f 92       	push	r7
    8822:	8f 92       	push	r8
    8824:	9f 92       	push	r9
    8826:	af 92       	push	r10
    8828:	bf 92       	push	r11
    882a:	cf 92       	push	r12
    882c:	df 92       	push	r13
    882e:	ef 92       	push	r14
    8830:	ff 92       	push	r15
    8832:	0f 93       	push	r16
    8834:	1f 93       	push	r17
    8836:	cf 93       	push	r28
    8838:	df 93       	push	r29
    883a:	cd b7       	in	r28, 0x3d	; 61
    883c:	de b7       	in	r29, 0x3e	; 62
    883e:	ca 1b       	sub	r28, r26
    8840:	db 0b       	sbc	r29, r27
    8842:	0f b6       	in	r0, 0x3f	; 63
    8844:	f8 94       	cli
    8846:	de bf       	out	0x3e, r29	; 62
    8848:	0f be       	out	0x3f, r0	; 63
    884a:	cd bf       	out	0x3d, r28	; 61
    884c:	19 94       	eijmp

0000884e <__epilogue_restores__>:
    884e:	2a 88       	ldd	r2, Y+18	; 0x12
    8850:	39 88       	ldd	r3, Y+17	; 0x11
    8852:	48 88       	ldd	r4, Y+16	; 0x10
    8854:	5f 84       	ldd	r5, Y+15	; 0x0f
    8856:	6e 84       	ldd	r6, Y+14	; 0x0e
    8858:	7d 84       	ldd	r7, Y+13	; 0x0d
    885a:	8c 84       	ldd	r8, Y+12	; 0x0c
    885c:	9b 84       	ldd	r9, Y+11	; 0x0b
    885e:	aa 84       	ldd	r10, Y+10	; 0x0a
    8860:	b9 84       	ldd	r11, Y+9	; 0x09
    8862:	c8 84       	ldd	r12, Y+8	; 0x08
    8864:	df 80       	ldd	r13, Y+7	; 0x07
    8866:	ee 80       	ldd	r14, Y+6	; 0x06
    8868:	fd 80       	ldd	r15, Y+5	; 0x05
    886a:	0c 81       	ldd	r16, Y+4	; 0x04
    886c:	1b 81       	ldd	r17, Y+3	; 0x03
    886e:	aa 81       	ldd	r26, Y+2	; 0x02
    8870:	b9 81       	ldd	r27, Y+1	; 0x01
    8872:	ce 0f       	add	r28, r30
    8874:	d1 1d       	adc	r29, r1
    8876:	0f b6       	in	r0, 0x3f	; 63
    8878:	f8 94       	cli
    887a:	de bf       	out	0x3e, r29	; 62
    887c:	0f be       	out	0x3f, r0	; 63
    887e:	cd bf       	out	0x3d, r28	; 61
    8880:	ed 01       	movw	r28, r26
    8882:	08 95       	ret

00008884 <strtod>:
    8884:	8f 92       	push	r8
    8886:	9f 92       	push	r9
    8888:	af 92       	push	r10
    888a:	bf 92       	push	r11
    888c:	cf 92       	push	r12
    888e:	df 92       	push	r13
    8890:	ef 92       	push	r14
    8892:	ff 92       	push	r15
    8894:	0f 93       	push	r16
    8896:	1f 93       	push	r17
    8898:	cf 93       	push	r28
    889a:	df 93       	push	r29
    889c:	ec 01       	movw	r28, r24
    889e:	5b 01       	movw	r10, r22
    88a0:	61 15       	cp	r22, r1
    88a2:	71 05       	cpc	r23, r1
    88a4:	19 f0       	breq	.+6      	; 0x88ac <strtod+0x28>
    88a6:	fb 01       	movw	r30, r22
    88a8:	80 83       	st	Z, r24
    88aa:	91 83       	std	Z+1, r25	; 0x01
    88ac:	f9 90       	ld	r15, Y+
    88ae:	8f 2d       	mov	r24, r15
    88b0:	90 e0       	ldi	r25, 0x00	; 0
    88b2:	0e 94 a6 46 	call	0x8d4c	; 0x8d4c <isspace>
    88b6:	89 2b       	or	r24, r25
    88b8:	c9 f7       	brne	.-14     	; 0x88ac <strtod+0x28>
    88ba:	fd e2       	ldi	r31, 0x2D	; 45
    88bc:	ff 16       	cp	r15, r31
    88be:	21 f4       	brne	.+8      	; 0x88c8 <strtod+0x44>
    88c0:	f9 90       	ld	r15, Y+
    88c2:	ee 24       	eor	r14, r14
    88c4:	e3 94       	inc	r14
    88c6:	05 c0       	rjmp	.+10     	; 0x88d2 <strtod+0x4e>
    88c8:	2b e2       	ldi	r18, 0x2B	; 43
    88ca:	f2 16       	cp	r15, r18
    88cc:	09 f4       	brne	.+2      	; 0x88d0 <strtod+0x4c>
    88ce:	f9 90       	ld	r15, Y+
    88d0:	ee 24       	eor	r14, r14
    88d2:	8e 01       	movw	r16, r28
    88d4:	01 50       	subi	r16, 0x01	; 1
    88d6:	10 40       	sbci	r17, 0x00	; 0
    88d8:	c8 01       	movw	r24, r16
    88da:	69 ef       	ldi	r22, 0xF9	; 249
    88dc:	7b e1       	ldi	r23, 0x1B	; 27
    88de:	43 e0       	ldi	r20, 0x03	; 3
    88e0:	50 e0       	ldi	r21, 0x00	; 0
    88e2:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <strncasecmp_P>
    88e6:	89 2b       	or	r24, r25
    88e8:	01 f5       	brne	.+64     	; 0x892a <strtod+0xa6>
    88ea:	8e 01       	movw	r16, r28
    88ec:	0e 5f       	subi	r16, 0xFE	; 254
    88ee:	1f 4f       	sbci	r17, 0xFF	; 255
    88f0:	c8 01       	movw	r24, r16
    88f2:	6c ef       	ldi	r22, 0xFC	; 252
    88f4:	7b e1       	ldi	r23, 0x1B	; 27
    88f6:	45 e0       	ldi	r20, 0x05	; 5
    88f8:	50 e0       	ldi	r21, 0x00	; 0
    88fa:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <strncasecmp_P>
    88fe:	89 2b       	or	r24, r25
    8900:	19 f4       	brne	.+6      	; 0x8908 <strtod+0x84>
    8902:	8e 01       	movw	r16, r28
    8904:	09 5f       	subi	r16, 0xF9	; 249
    8906:	1f 4f       	sbci	r17, 0xFF	; 255
    8908:	a1 14       	cp	r10, r1
    890a:	b1 04       	cpc	r11, r1
    890c:	19 f0       	breq	.+6      	; 0x8914 <strtod+0x90>
    890e:	f5 01       	movw	r30, r10
    8910:	00 83       	st	Z, r16
    8912:	11 83       	std	Z+1, r17	; 0x01
    8914:	e0 fc       	sbrc	r14, 0
    8916:	04 c0       	rjmp	.+8      	; 0x8920 <strtod+0x9c>
    8918:	70 e0       	ldi	r23, 0x00	; 0
    891a:	90 e0       	ldi	r25, 0x00	; 0
    891c:	80 e8       	ldi	r24, 0x80	; 128
    891e:	14 c0       	rjmp	.+40     	; 0x8948 <strtod+0xc4>
    8920:	70 e0       	ldi	r23, 0x00	; 0
    8922:	90 e0       	ldi	r25, 0x00	; 0
    8924:	80 e8       	ldi	r24, 0x80	; 128
    8926:	6f ef       	ldi	r22, 0xFF	; 255
    8928:	08 c1       	rjmp	.+528    	; 0x8b3a <strtod+0x2b6>
    892a:	c8 01       	movw	r24, r16
    892c:	61 e0       	ldi	r22, 0x01	; 1
    892e:	7c e1       	ldi	r23, 0x1C	; 28
    8930:	43 e0       	ldi	r20, 0x03	; 3
    8932:	50 e0       	ldi	r21, 0x00	; 0
    8934:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <strncasecmp_P>
    8938:	89 2b       	or	r24, r25
    893a:	69 f4       	brne	.+26     	; 0x8956 <strtod+0xd2>
    893c:	a1 14       	cp	r10, r1
    893e:	b1 04       	cpc	r11, r1
    8940:	29 f4       	brne	.+10     	; 0x894c <strtod+0xc8>
    8942:	70 e0       	ldi	r23, 0x00	; 0
    8944:	90 e0       	ldi	r25, 0x00	; 0
    8946:	80 ec       	ldi	r24, 0xC0	; 192
    8948:	6f e7       	ldi	r22, 0x7F	; 127
    894a:	f7 c0       	rjmp	.+494    	; 0x8b3a <strtod+0x2b6>
    894c:	22 96       	adiw	r28, 0x02	; 2
    894e:	f5 01       	movw	r30, r10
    8950:	c0 83       	st	Z, r28
    8952:	d1 83       	std	Z+1, r29	; 0x01
    8954:	f6 cf       	rjmp	.-20     	; 0x8942 <strtod+0xbe>
    8956:	88 24       	eor	r8, r8
    8958:	99 24       	eor	r9, r9
    895a:	40 e0       	ldi	r20, 0x00	; 0
    895c:	50 e0       	ldi	r21, 0x00	; 0
    895e:	60 e0       	ldi	r22, 0x00	; 0
    8960:	70 e0       	ldi	r23, 0x00	; 0
    8962:	ef 2d       	mov	r30, r15
    8964:	e0 53       	subi	r30, 0x30	; 48
    8966:	ea 30       	cpi	r30, 0x0A	; 10
    8968:	a0 f5       	brcc	.+104    	; 0x89d2 <strtod+0x14e>
    896a:	f2 e0       	ldi	r31, 0x02	; 2
    896c:	ef 2a       	or	r14, r31
    896e:	8e 2d       	mov	r24, r14
    8970:	90 e0       	ldi	r25, 0x00	; 0
    8972:	9c 01       	movw	r18, r24
    8974:	28 70       	andi	r18, 0x08	; 8
    8976:	30 70       	andi	r19, 0x00	; 0
    8978:	e2 fe       	sbrs	r14, 2
    897a:	06 c0       	rjmp	.+12     	; 0x8988 <strtod+0x104>
    897c:	23 2b       	or	r18, r19
    897e:	79 f5       	brne	.+94     	; 0x89de <strtod+0x15a>
    8980:	08 94       	sec
    8982:	81 1c       	adc	r8, r1
    8984:	91 1c       	adc	r9, r1
    8986:	2b c0       	rjmp	.+86     	; 0x89de <strtod+0x15a>
    8988:	23 2b       	or	r18, r19
    898a:	19 f0       	breq	.+6      	; 0x8992 <strtod+0x10e>
    898c:	08 94       	sec
    898e:	81 08       	sbc	r8, r1
    8990:	91 08       	sbc	r9, r1
    8992:	db 01       	movw	r26, r22
    8994:	ca 01       	movw	r24, r20
    8996:	12 e0       	ldi	r17, 0x02	; 2
    8998:	88 0f       	add	r24, r24
    899a:	99 1f       	adc	r25, r25
    899c:	aa 1f       	adc	r26, r26
    899e:	bb 1f       	adc	r27, r27
    89a0:	1a 95       	dec	r17
    89a2:	d1 f7       	brne	.-12     	; 0x8998 <strtod+0x114>
    89a4:	48 0f       	add	r20, r24
    89a6:	59 1f       	adc	r21, r25
    89a8:	6a 1f       	adc	r22, r26
    89aa:	7b 1f       	adc	r23, r27
    89ac:	44 0f       	add	r20, r20
    89ae:	55 1f       	adc	r21, r21
    89b0:	66 1f       	adc	r22, r22
    89b2:	77 1f       	adc	r23, r23
    89b4:	4e 0f       	add	r20, r30
    89b6:	51 1d       	adc	r21, r1
    89b8:	61 1d       	adc	r22, r1
    89ba:	71 1d       	adc	r23, r1
    89bc:	48 39       	cpi	r20, 0x98	; 152
    89be:	29 e9       	ldi	r18, 0x99	; 153
    89c0:	52 07       	cpc	r21, r18
    89c2:	29 e9       	ldi	r18, 0x99	; 153
    89c4:	62 07       	cpc	r22, r18
    89c6:	29 e1       	ldi	r18, 0x19	; 25
    89c8:	72 07       	cpc	r23, r18
    89ca:	48 f0       	brcs	.+18     	; 0x89de <strtod+0x15a>
    89cc:	84 e0       	ldi	r24, 0x04	; 4
    89ce:	e8 2a       	or	r14, r24
    89d0:	06 c0       	rjmp	.+12     	; 0x89de <strtod+0x15a>
    89d2:	ee 3f       	cpi	r30, 0xFE	; 254
    89d4:	31 f4       	brne	.+12     	; 0x89e2 <strtod+0x15e>
    89d6:	e3 fc       	sbrc	r14, 3
    89d8:	39 c0       	rjmp	.+114    	; 0x8a4c <strtod+0x1c8>
    89da:	98 e0       	ldi	r25, 0x08	; 8
    89dc:	e9 2a       	or	r14, r25
    89de:	f9 90       	ld	r15, Y+
    89e0:	c0 cf       	rjmp	.-128    	; 0x8962 <strtod+0xde>
    89e2:	e5 33       	cpi	r30, 0x35	; 53
    89e4:	11 f0       	breq	.+4      	; 0x89ea <strtod+0x166>
    89e6:	e5 31       	cpi	r30, 0x15	; 21
    89e8:	89 f5       	brne	.+98     	; 0x8a4c <strtod+0x1c8>
    89ea:	29 91       	ld	r18, Y+
    89ec:	2d 32       	cpi	r18, 0x2D	; 45
    89ee:	19 f4       	brne	.+6      	; 0x89f6 <strtod+0x172>
    89f0:	e0 e1       	ldi	r30, 0x10	; 16
    89f2:	ee 2a       	or	r14, r30
    89f4:	05 c0       	rjmp	.+10     	; 0x8a00 <strtod+0x17c>
    89f6:	2b 32       	cpi	r18, 0x2B	; 43
    89f8:	19 f0       	breq	.+6      	; 0x8a00 <strtod+0x17c>
    89fa:	81 e0       	ldi	r24, 0x01	; 1
    89fc:	90 e0       	ldi	r25, 0x00	; 0
    89fe:	03 c0       	rjmp	.+6      	; 0x8a06 <strtod+0x182>
    8a00:	29 91       	ld	r18, Y+
    8a02:	82 e0       	ldi	r24, 0x02	; 2
    8a04:	90 e0       	ldi	r25, 0x00	; 0
    8a06:	e2 2f       	mov	r30, r18
    8a08:	e0 53       	subi	r30, 0x30	; 48
    8a0a:	ea 30       	cpi	r30, 0x0A	; 10
    8a0c:	18 f0       	brcs	.+6      	; 0x8a14 <strtod+0x190>
    8a0e:	c8 1b       	sub	r28, r24
    8a10:	d9 0b       	sbc	r29, r25
    8a12:	1c c0       	rjmp	.+56     	; 0x8a4c <strtod+0x1c8>
    8a14:	20 e0       	ldi	r18, 0x00	; 0
    8a16:	30 e0       	ldi	r19, 0x00	; 0
    8a18:	fc e0       	ldi	r31, 0x0C	; 12
    8a1a:	20 38       	cpi	r18, 0x80	; 128
    8a1c:	3f 07       	cpc	r19, r31
    8a1e:	5c f4       	brge	.+22     	; 0x8a36 <strtod+0x1b2>
    8a20:	c9 01       	movw	r24, r18
    8a22:	88 0f       	add	r24, r24
    8a24:	99 1f       	adc	r25, r25
    8a26:	88 0f       	add	r24, r24
    8a28:	99 1f       	adc	r25, r25
    8a2a:	28 0f       	add	r18, r24
    8a2c:	39 1f       	adc	r19, r25
    8a2e:	22 0f       	add	r18, r18
    8a30:	33 1f       	adc	r19, r19
    8a32:	2e 0f       	add	r18, r30
    8a34:	31 1d       	adc	r19, r1
    8a36:	e9 91       	ld	r30, Y+
    8a38:	e0 53       	subi	r30, 0x30	; 48
    8a3a:	ea 30       	cpi	r30, 0x0A	; 10
    8a3c:	68 f3       	brcs	.-38     	; 0x8a18 <strtod+0x194>
    8a3e:	e4 fe       	sbrs	r14, 4
    8a40:	03 c0       	rjmp	.+6      	; 0x8a48 <strtod+0x1c4>
    8a42:	30 95       	com	r19
    8a44:	21 95       	neg	r18
    8a46:	3f 4f       	sbci	r19, 0xFF	; 255
    8a48:	82 0e       	add	r8, r18
    8a4a:	93 1e       	adc	r9, r19
    8a4c:	ce 2c       	mov	r12, r14
    8a4e:	dd 24       	eor	r13, r13
    8a50:	e1 fe       	sbrs	r14, 1
    8a52:	07 c0       	rjmp	.+14     	; 0x8a62 <strtod+0x1de>
    8a54:	a1 14       	cp	r10, r1
    8a56:	b1 04       	cpc	r11, r1
    8a58:	21 f0       	breq	.+8      	; 0x8a62 <strtod+0x1de>
    8a5a:	21 97       	sbiw	r28, 0x01	; 1
    8a5c:	f5 01       	movw	r30, r10
    8a5e:	c0 83       	st	Z, r28
    8a60:	d1 83       	std	Z+1, r29	; 0x01
    8a62:	cb 01       	movw	r24, r22
    8a64:	ba 01       	movw	r22, r20
    8a66:	0e 94 d7 40 	call	0x81ae	; 0x81ae <__floatunsisf>
    8a6a:	7b 01       	movw	r14, r22
    8a6c:	8c 01       	movw	r16, r24
    8a6e:	f3 e0       	ldi	r31, 0x03	; 3
    8a70:	cf 22       	and	r12, r31
    8a72:	dd 24       	eor	r13, r13
    8a74:	23 e0       	ldi	r18, 0x03	; 3
    8a76:	c2 16       	cp	r12, r18
    8a78:	d1 04       	cpc	r13, r1
    8a7a:	21 f4       	brne	.+8      	; 0x8a84 <strtod+0x200>
    8a7c:	17 fb       	bst	r17, 7
    8a7e:	10 95       	com	r17
    8a80:	17 f9       	bld	r17, 7
    8a82:	10 95       	com	r17
    8a84:	57 01       	movw	r10, r14
    8a86:	68 01       	movw	r12, r16
    8a88:	c8 01       	movw	r24, r16
    8a8a:	b7 01       	movw	r22, r14
    8a8c:	20 e0       	ldi	r18, 0x00	; 0
    8a8e:	30 e0       	ldi	r19, 0x00	; 0
    8a90:	40 e0       	ldi	r20, 0x00	; 0
    8a92:	50 e0       	ldi	r21, 0x00	; 0
    8a94:	0e 94 37 40 	call	0x806e	; 0x806e <__cmpsf2>
    8a98:	88 23       	and	r24, r24
    8a9a:	09 f4       	brne	.+2      	; 0x8a9e <strtod+0x21a>
    8a9c:	4a c0       	rjmp	.+148    	; 0x8b32 <strtod+0x2ae>
    8a9e:	97 fe       	sbrs	r9, 7
    8aa0:	0d c0       	rjmp	.+26     	; 0x8abc <strtod+0x238>
    8aa2:	28 e1       	ldi	r18, 0x18	; 24
    8aa4:	e2 2e       	mov	r14, r18
    8aa6:	2c e1       	ldi	r18, 0x1C	; 28
    8aa8:	f2 2e       	mov	r15, r18
    8aaa:	90 94       	com	r9
    8aac:	81 94       	neg	r8
    8aae:	91 08       	sbc	r9, r1
    8ab0:	93 94       	inc	r9
    8ab2:	c0 e2       	ldi	r28, 0x20	; 32
    8ab4:	d0 e0       	ldi	r29, 0x00	; 0
    8ab6:	00 e0       	ldi	r16, 0x00	; 0
    8ab8:	10 e0       	ldi	r17, 0x00	; 0
    8aba:	12 c0       	rjmp	.+36     	; 0x8ae0 <strtod+0x25c>
    8abc:	90 e3       	ldi	r25, 0x30	; 48
    8abe:	e9 2e       	mov	r14, r25
    8ac0:	9c e1       	ldi	r25, 0x1C	; 28
    8ac2:	f9 2e       	mov	r15, r25
    8ac4:	f6 cf       	rjmp	.-20     	; 0x8ab2 <strtod+0x22e>
    8ac6:	f7 01       	movw	r30, r14
    8ac8:	25 91       	lpm	r18, Z+
    8aca:	35 91       	lpm	r19, Z+
    8acc:	45 91       	lpm	r20, Z+
    8ace:	54 91       	lpm	r21, Z+
    8ad0:	c6 01       	movw	r24, r12
    8ad2:	b5 01       	movw	r22, r10
    8ad4:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <__mulsf3>
    8ad8:	5b 01       	movw	r10, r22
    8ada:	6c 01       	movw	r12, r24
    8adc:	8c 1a       	sub	r8, r28
    8ade:	9d 0a       	sbc	r9, r29
    8ae0:	8c 16       	cp	r8, r28
    8ae2:	9d 06       	cpc	r9, r29
    8ae4:	84 f7       	brge	.-32     	; 0x8ac6 <strtod+0x242>
    8ae6:	d5 95       	asr	r29
    8ae8:	c7 95       	ror	r28
    8aea:	0f 5f       	subi	r16, 0xFF	; 255
    8aec:	1f 4f       	sbci	r17, 0xFF	; 255
    8aee:	06 30       	cpi	r16, 0x06	; 6
    8af0:	11 05       	cpc	r17, r1
    8af2:	29 f0       	breq	.+10     	; 0x8afe <strtod+0x27a>
    8af4:	8c ef       	ldi	r24, 0xFC	; 252
    8af6:	9f ef       	ldi	r25, 0xFF	; 255
    8af8:	e8 0e       	add	r14, r24
    8afa:	f9 1e       	adc	r15, r25
    8afc:	f1 cf       	rjmp	.-30     	; 0x8ae0 <strtod+0x25c>
    8afe:	c5 01       	movw	r24, r10
    8b00:	d6 01       	movw	r26, r12
    8b02:	7c 01       	movw	r14, r24
    8b04:	8d 01       	movw	r16, r26
    8b06:	8c 2d       	mov	r24, r12
    8b08:	88 0f       	add	r24, r24
    8b0a:	8d 2d       	mov	r24, r13
    8b0c:	88 1f       	adc	r24, r24
    8b0e:	8f 3f       	cpi	r24, 0xFF	; 255
    8b10:	51 f0       	breq	.+20     	; 0x8b26 <strtod+0x2a2>
    8b12:	c6 01       	movw	r24, r12
    8b14:	b5 01       	movw	r22, r10
    8b16:	20 e0       	ldi	r18, 0x00	; 0
    8b18:	30 e0       	ldi	r19, 0x00	; 0
    8b1a:	40 e0       	ldi	r20, 0x00	; 0
    8b1c:	50 e0       	ldi	r21, 0x00	; 0
    8b1e:	0e 94 37 40 	call	0x806e	; 0x806e <__cmpsf2>
    8b22:	88 23       	and	r24, r24
    8b24:	31 f4       	brne	.+12     	; 0x8b32 <strtod+0x2ae>
    8b26:	82 e2       	ldi	r24, 0x22	; 34
    8b28:	90 e0       	ldi	r25, 0x00	; 0
    8b2a:	80 93 4a 26 	sts	0x264A, r24
    8b2e:	90 93 4b 26 	sts	0x264B, r25
    8b32:	7e 2d       	mov	r23, r14
    8b34:	9f 2d       	mov	r25, r15
    8b36:	80 2f       	mov	r24, r16
    8b38:	61 2f       	mov	r22, r17
    8b3a:	27 2f       	mov	r18, r23
    8b3c:	39 2f       	mov	r19, r25
    8b3e:	48 2f       	mov	r20, r24
    8b40:	56 2f       	mov	r21, r22
    8b42:	b9 01       	movw	r22, r18
    8b44:	ca 01       	movw	r24, r20
    8b46:	df 91       	pop	r29
    8b48:	cf 91       	pop	r28
    8b4a:	1f 91       	pop	r17
    8b4c:	0f 91       	pop	r16
    8b4e:	ff 90       	pop	r15
    8b50:	ef 90       	pop	r14
    8b52:	df 90       	pop	r13
    8b54:	cf 90       	pop	r12
    8b56:	bf 90       	pop	r11
    8b58:	af 90       	pop	r10
    8b5a:	9f 90       	pop	r9
    8b5c:	8f 90       	pop	r8
    8b5e:	08 95       	ret

00008b60 <atoi>:
    8b60:	fc 01       	movw	r30, r24
    8b62:	88 27       	eor	r24, r24
    8b64:	99 27       	eor	r25, r25
    8b66:	e8 94       	clt
    8b68:	21 91       	ld	r18, Z+
    8b6a:	20 32       	cpi	r18, 0x20	; 32
    8b6c:	e9 f3       	breq	.-6      	; 0x8b68 <atoi+0x8>
    8b6e:	29 30       	cpi	r18, 0x09	; 9
    8b70:	10 f0       	brcs	.+4      	; 0x8b76 <atoi+0x16>
    8b72:	2e 30       	cpi	r18, 0x0E	; 14
    8b74:	c8 f3       	brcs	.-14     	; 0x8b68 <atoi+0x8>
    8b76:	2b 32       	cpi	r18, 0x2B	; 43
    8b78:	41 f0       	breq	.+16     	; 0x8b8a <atoi+0x2a>
    8b7a:	2d 32       	cpi	r18, 0x2D	; 45
    8b7c:	39 f4       	brne	.+14     	; 0x8b8c <atoi+0x2c>
    8b7e:	68 94       	set
    8b80:	04 c0       	rjmp	.+8      	; 0x8b8a <atoi+0x2a>
    8b82:	0e 94 e4 46 	call	0x8dc8	; 0x8dc8 <__mulhi_const_10>
    8b86:	82 0f       	add	r24, r18
    8b88:	91 1d       	adc	r25, r1
    8b8a:	21 91       	ld	r18, Z+
    8b8c:	20 53       	subi	r18, 0x30	; 48
    8b8e:	2a 30       	cpi	r18, 0x0A	; 10
    8b90:	c0 f3       	brcs	.-16     	; 0x8b82 <atoi+0x22>
    8b92:	1e f4       	brtc	.+6      	; 0x8b9a <atoi+0x3a>
    8b94:	90 95       	com	r25
    8b96:	81 95       	neg	r24
    8b98:	9f 4f       	sbci	r25, 0xFF	; 255
    8b9a:	08 95       	ret

00008b9c <__ftoa_engine>:
    8b9c:	28 30       	cpi	r18, 0x08	; 8
    8b9e:	08 f0       	brcs	.+2      	; 0x8ba2 <__ftoa_engine+0x6>
    8ba0:	27 e0       	ldi	r18, 0x07	; 7
    8ba2:	33 27       	eor	r19, r19
    8ba4:	da 01       	movw	r26, r20
    8ba6:	99 0f       	add	r25, r25
    8ba8:	31 1d       	adc	r19, r1
    8baa:	87 fd       	sbrc	r24, 7
    8bac:	91 60       	ori	r25, 0x01	; 1
    8bae:	00 96       	adiw	r24, 0x00	; 0
    8bb0:	61 05       	cpc	r22, r1
    8bb2:	71 05       	cpc	r23, r1
    8bb4:	39 f4       	brne	.+14     	; 0x8bc4 <__ftoa_engine+0x28>
    8bb6:	32 60       	ori	r19, 0x02	; 2
    8bb8:	2e 5f       	subi	r18, 0xFE	; 254
    8bba:	3d 93       	st	X+, r19
    8bbc:	30 e3       	ldi	r19, 0x30	; 48
    8bbe:	2a 95       	dec	r18
    8bc0:	e1 f7       	brne	.-8      	; 0x8bba <__ftoa_engine+0x1e>
    8bc2:	08 95       	ret
    8bc4:	9f 3f       	cpi	r25, 0xFF	; 255
    8bc6:	30 f0       	brcs	.+12     	; 0x8bd4 <__ftoa_engine+0x38>
    8bc8:	80 38       	cpi	r24, 0x80	; 128
    8bca:	71 05       	cpc	r23, r1
    8bcc:	61 05       	cpc	r22, r1
    8bce:	09 f0       	breq	.+2      	; 0x8bd2 <__ftoa_engine+0x36>
    8bd0:	3c 5f       	subi	r19, 0xFC	; 252
    8bd2:	3c 5f       	subi	r19, 0xFC	; 252
    8bd4:	3d 93       	st	X+, r19
    8bd6:	91 30       	cpi	r25, 0x01	; 1
    8bd8:	08 f0       	brcs	.+2      	; 0x8bdc <__ftoa_engine+0x40>
    8bda:	80 68       	ori	r24, 0x80	; 128
    8bdc:	91 1d       	adc	r25, r1
    8bde:	df 93       	push	r29
    8be0:	cf 93       	push	r28
    8be2:	1f 93       	push	r17
    8be4:	0f 93       	push	r16
    8be6:	ff 92       	push	r15
    8be8:	ef 92       	push	r14
    8bea:	19 2f       	mov	r17, r25
    8bec:	98 7f       	andi	r25, 0xF8	; 248
    8bee:	96 95       	lsr	r25
    8bf0:	e9 2f       	mov	r30, r25
    8bf2:	96 95       	lsr	r25
    8bf4:	96 95       	lsr	r25
    8bf6:	e9 0f       	add	r30, r25
    8bf8:	ff 27       	eor	r31, r31
    8bfa:	e2 57       	subi	r30, 0x72	; 114
    8bfc:	f3 4e       	sbci	r31, 0xE3	; 227
    8bfe:	99 27       	eor	r25, r25
    8c00:	33 27       	eor	r19, r19
    8c02:	ee 24       	eor	r14, r14
    8c04:	ff 24       	eor	r15, r15
    8c06:	a7 01       	movw	r20, r14
    8c08:	e7 01       	movw	r28, r14
    8c0a:	05 90       	lpm	r0, Z+
    8c0c:	08 94       	sec
    8c0e:	07 94       	ror	r0
    8c10:	28 f4       	brcc	.+10     	; 0x8c1c <__ftoa_engine+0x80>
    8c12:	36 0f       	add	r19, r22
    8c14:	e7 1e       	adc	r14, r23
    8c16:	f8 1e       	adc	r15, r24
    8c18:	49 1f       	adc	r20, r25
    8c1a:	51 1d       	adc	r21, r1
    8c1c:	66 0f       	add	r22, r22
    8c1e:	77 1f       	adc	r23, r23
    8c20:	88 1f       	adc	r24, r24
    8c22:	99 1f       	adc	r25, r25
    8c24:	06 94       	lsr	r0
    8c26:	a1 f7       	brne	.-24     	; 0x8c10 <__ftoa_engine+0x74>
    8c28:	05 90       	lpm	r0, Z+
    8c2a:	07 94       	ror	r0
    8c2c:	28 f4       	brcc	.+10     	; 0x8c38 <__ftoa_engine+0x9c>
    8c2e:	e7 0e       	add	r14, r23
    8c30:	f8 1e       	adc	r15, r24
    8c32:	49 1f       	adc	r20, r25
    8c34:	56 1f       	adc	r21, r22
    8c36:	c1 1d       	adc	r28, r1
    8c38:	77 0f       	add	r23, r23
    8c3a:	88 1f       	adc	r24, r24
    8c3c:	99 1f       	adc	r25, r25
    8c3e:	66 1f       	adc	r22, r22
    8c40:	06 94       	lsr	r0
    8c42:	a1 f7       	brne	.-24     	; 0x8c2c <__ftoa_engine+0x90>
    8c44:	05 90       	lpm	r0, Z+
    8c46:	07 94       	ror	r0
    8c48:	28 f4       	brcc	.+10     	; 0x8c54 <__ftoa_engine+0xb8>
    8c4a:	f8 0e       	add	r15, r24
    8c4c:	49 1f       	adc	r20, r25
    8c4e:	56 1f       	adc	r21, r22
    8c50:	c7 1f       	adc	r28, r23
    8c52:	d1 1d       	adc	r29, r1
    8c54:	88 0f       	add	r24, r24
    8c56:	99 1f       	adc	r25, r25
    8c58:	66 1f       	adc	r22, r22
    8c5a:	77 1f       	adc	r23, r23
    8c5c:	06 94       	lsr	r0
    8c5e:	a1 f7       	brne	.-24     	; 0x8c48 <__ftoa_engine+0xac>
    8c60:	05 90       	lpm	r0, Z+
    8c62:	07 94       	ror	r0
    8c64:	20 f4       	brcc	.+8      	; 0x8c6e <__ftoa_engine+0xd2>
    8c66:	49 0f       	add	r20, r25
    8c68:	56 1f       	adc	r21, r22
    8c6a:	c7 1f       	adc	r28, r23
    8c6c:	d8 1f       	adc	r29, r24
    8c6e:	99 0f       	add	r25, r25
    8c70:	66 1f       	adc	r22, r22
    8c72:	77 1f       	adc	r23, r23
    8c74:	88 1f       	adc	r24, r24
    8c76:	06 94       	lsr	r0
    8c78:	a9 f7       	brne	.-22     	; 0x8c64 <__ftoa_engine+0xc8>
    8c7a:	84 91       	lpm	r24, Z+
    8c7c:	10 95       	com	r17
    8c7e:	17 70       	andi	r17, 0x07	; 7
    8c80:	41 f0       	breq	.+16     	; 0x8c92 <__ftoa_engine+0xf6>
    8c82:	d6 95       	lsr	r29
    8c84:	c7 95       	ror	r28
    8c86:	57 95       	ror	r21
    8c88:	47 95       	ror	r20
    8c8a:	f7 94       	ror	r15
    8c8c:	e7 94       	ror	r14
    8c8e:	1a 95       	dec	r17
    8c90:	c1 f7       	brne	.-16     	; 0x8c82 <__ftoa_engine+0xe6>
    8c92:	e4 e3       	ldi	r30, 0x34	; 52
    8c94:	fc e1       	ldi	r31, 0x1C	; 28
    8c96:	68 94       	set
    8c98:	15 90       	lpm	r1, Z+
    8c9a:	15 91       	lpm	r17, Z+
    8c9c:	35 91       	lpm	r19, Z+
    8c9e:	65 91       	lpm	r22, Z+
    8ca0:	95 91       	lpm	r25, Z+
    8ca2:	05 90       	lpm	r0, Z+
    8ca4:	7f e2       	ldi	r23, 0x2F	; 47
    8ca6:	73 95       	inc	r23
    8ca8:	e1 18       	sub	r14, r1
    8caa:	f1 0a       	sbc	r15, r17
    8cac:	43 0b       	sbc	r20, r19
    8cae:	56 0b       	sbc	r21, r22
    8cb0:	c9 0b       	sbc	r28, r25
    8cb2:	d0 09       	sbc	r29, r0
    8cb4:	c0 f7       	brcc	.-16     	; 0x8ca6 <__ftoa_engine+0x10a>
    8cb6:	e1 0c       	add	r14, r1
    8cb8:	f1 1e       	adc	r15, r17
    8cba:	43 1f       	adc	r20, r19
    8cbc:	56 1f       	adc	r21, r22
    8cbe:	c9 1f       	adc	r28, r25
    8cc0:	d0 1d       	adc	r29, r0
    8cc2:	7e f4       	brtc	.+30     	; 0x8ce2 <__ftoa_engine+0x146>
    8cc4:	70 33       	cpi	r23, 0x30	; 48
    8cc6:	11 f4       	brne	.+4      	; 0x8ccc <__ftoa_engine+0x130>
    8cc8:	8a 95       	dec	r24
    8cca:	e6 cf       	rjmp	.-52     	; 0x8c98 <__ftoa_engine+0xfc>
    8ccc:	e8 94       	clt
    8cce:	01 50       	subi	r16, 0x01	; 1
    8cd0:	30 f0       	brcs	.+12     	; 0x8cde <__ftoa_engine+0x142>
    8cd2:	08 0f       	add	r16, r24
    8cd4:	0a f4       	brpl	.+2      	; 0x8cd8 <__ftoa_engine+0x13c>
    8cd6:	00 27       	eor	r16, r16
    8cd8:	02 17       	cp	r16, r18
    8cda:	08 f4       	brcc	.+2      	; 0x8cde <__ftoa_engine+0x142>
    8cdc:	20 2f       	mov	r18, r16
    8cde:	23 95       	inc	r18
    8ce0:	02 2f       	mov	r16, r18
    8ce2:	7a 33       	cpi	r23, 0x3A	; 58
    8ce4:	28 f0       	brcs	.+10     	; 0x8cf0 <__ftoa_engine+0x154>
    8ce6:	79 e3       	ldi	r23, 0x39	; 57
    8ce8:	7d 93       	st	X+, r23
    8cea:	2a 95       	dec	r18
    8cec:	e9 f7       	brne	.-6      	; 0x8ce8 <__ftoa_engine+0x14c>
    8cee:	10 c0       	rjmp	.+32     	; 0x8d10 <__ftoa_engine+0x174>
    8cf0:	7d 93       	st	X+, r23
    8cf2:	2a 95       	dec	r18
    8cf4:	89 f6       	brne	.-94     	; 0x8c98 <__ftoa_engine+0xfc>
    8cf6:	06 94       	lsr	r0
    8cf8:	97 95       	ror	r25
    8cfa:	67 95       	ror	r22
    8cfc:	37 95       	ror	r19
    8cfe:	17 95       	ror	r17
    8d00:	17 94       	ror	r1
    8d02:	e1 18       	sub	r14, r1
    8d04:	f1 0a       	sbc	r15, r17
    8d06:	43 0b       	sbc	r20, r19
    8d08:	56 0b       	sbc	r21, r22
    8d0a:	c9 0b       	sbc	r28, r25
    8d0c:	d0 09       	sbc	r29, r0
    8d0e:	98 f0       	brcs	.+38     	; 0x8d36 <__ftoa_engine+0x19a>
    8d10:	23 95       	inc	r18
    8d12:	7e 91       	ld	r23, -X
    8d14:	73 95       	inc	r23
    8d16:	7a 33       	cpi	r23, 0x3A	; 58
    8d18:	08 f0       	brcs	.+2      	; 0x8d1c <__ftoa_engine+0x180>
    8d1a:	70 e3       	ldi	r23, 0x30	; 48
    8d1c:	7c 93       	st	X, r23
    8d1e:	20 13       	cpse	r18, r16
    8d20:	b8 f7       	brcc	.-18     	; 0x8d10 <__ftoa_engine+0x174>
    8d22:	7e 91       	ld	r23, -X
    8d24:	70 61       	ori	r23, 0x10	; 16
    8d26:	7d 93       	st	X+, r23
    8d28:	30 f0       	brcs	.+12     	; 0x8d36 <__ftoa_engine+0x19a>
    8d2a:	83 95       	inc	r24
    8d2c:	71 e3       	ldi	r23, 0x31	; 49
    8d2e:	7d 93       	st	X+, r23
    8d30:	70 e3       	ldi	r23, 0x30	; 48
    8d32:	2a 95       	dec	r18
    8d34:	e1 f7       	brne	.-8      	; 0x8d2e <__ftoa_engine+0x192>
    8d36:	11 24       	eor	r1, r1
    8d38:	ef 90       	pop	r14
    8d3a:	ff 90       	pop	r15
    8d3c:	0f 91       	pop	r16
    8d3e:	1f 91       	pop	r17
    8d40:	cf 91       	pop	r28
    8d42:	df 91       	pop	r29
    8d44:	99 27       	eor	r25, r25
    8d46:	87 fd       	sbrc	r24, 7
    8d48:	90 95       	com	r25
    8d4a:	08 95       	ret

00008d4c <isspace>:
    8d4c:	91 11       	cpse	r25, r1
    8d4e:	29 c1       	rjmp	.+594    	; 0x8fa2 <__ctype_isfalse>
    8d50:	80 32       	cpi	r24, 0x20	; 32
    8d52:	19 f0       	breq	.+6      	; 0x8d5a <isspace+0xe>
    8d54:	89 50       	subi	r24, 0x09	; 9
    8d56:	85 50       	subi	r24, 0x05	; 5
    8d58:	d0 f7       	brcc	.-12     	; 0x8d4e <isspace+0x2>
    8d5a:	08 95       	ret

00008d5c <toupper>:
    8d5c:	91 11       	cpse	r25, r1
    8d5e:	08 95       	ret
    8d60:	81 56       	subi	r24, 0x61	; 97
    8d62:	8a 51       	subi	r24, 0x1A	; 26
    8d64:	08 f4       	brcc	.+2      	; 0x8d68 <toupper+0xc>
    8d66:	80 52       	subi	r24, 0x20	; 32
    8d68:	85 58       	subi	r24, 0x85	; 133
    8d6a:	08 95       	ret

00008d6c <strncasecmp_P>:
    8d6c:	fb 01       	movw	r30, r22
    8d6e:	dc 01       	movw	r26, r24
    8d70:	41 50       	subi	r20, 0x01	; 1
    8d72:	50 40       	sbci	r21, 0x00	; 0
    8d74:	88 f0       	brcs	.+34     	; 0x8d98 <strncasecmp_P+0x2c>
    8d76:	8d 91       	ld	r24, X+
    8d78:	81 34       	cpi	r24, 0x41	; 65
    8d7a:	1c f0       	brlt	.+6      	; 0x8d82 <strncasecmp_P+0x16>
    8d7c:	8b 35       	cpi	r24, 0x5B	; 91
    8d7e:	0c f4       	brge	.+2      	; 0x8d82 <strncasecmp_P+0x16>
    8d80:	80 5e       	subi	r24, 0xE0	; 224
    8d82:	65 91       	lpm	r22, Z+
    8d84:	61 34       	cpi	r22, 0x41	; 65
    8d86:	1c f0       	brlt	.+6      	; 0x8d8e <strncasecmp_P+0x22>
    8d88:	6b 35       	cpi	r22, 0x5B	; 91
    8d8a:	0c f4       	brge	.+2      	; 0x8d8e <strncasecmp_P+0x22>
    8d8c:	60 5e       	subi	r22, 0xE0	; 224
    8d8e:	86 1b       	sub	r24, r22
    8d90:	61 11       	cpse	r22, r1
    8d92:	71 f3       	breq	.-36     	; 0x8d70 <strncasecmp_P+0x4>
    8d94:	99 0b       	sbc	r25, r25
    8d96:	08 95       	ret
    8d98:	88 1b       	sub	r24, r24
    8d9a:	fc cf       	rjmp	.-8      	; 0x8d94 <strncasecmp_P+0x28>

00008d9c <strnlen_P>:
    8d9c:	fc 01       	movw	r30, r24
    8d9e:	05 90       	lpm	r0, Z+
    8da0:	61 50       	subi	r22, 0x01	; 1
    8da2:	70 40       	sbci	r23, 0x00	; 0
    8da4:	01 10       	cpse	r0, r1
    8da6:	d8 f7       	brcc	.-10     	; 0x8d9e <strnlen_P+0x2>
    8da8:	80 95       	com	r24
    8daa:	90 95       	com	r25
    8dac:	8e 0f       	add	r24, r30
    8dae:	9f 1f       	adc	r25, r31
    8db0:	08 95       	ret

00008db2 <strnlen>:
    8db2:	fc 01       	movw	r30, r24
    8db4:	61 50       	subi	r22, 0x01	; 1
    8db6:	70 40       	sbci	r23, 0x00	; 0
    8db8:	01 90       	ld	r0, Z+
    8dba:	01 10       	cpse	r0, r1
    8dbc:	d8 f7       	brcc	.-10     	; 0x8db4 <strnlen+0x2>
    8dbe:	80 95       	com	r24
    8dc0:	90 95       	com	r25
    8dc2:	8e 0f       	add	r24, r30
    8dc4:	9f 1f       	adc	r25, r31
    8dc6:	08 95       	ret

00008dc8 <__mulhi_const_10>:
    8dc8:	7a e0       	ldi	r23, 0x0A	; 10
    8dca:	97 9f       	mul	r25, r23
    8dcc:	90 2d       	mov	r25, r0
    8dce:	87 9f       	mul	r24, r23
    8dd0:	80 2d       	mov	r24, r0
    8dd2:	91 0d       	add	r25, r1
    8dd4:	11 24       	eor	r1, r1
    8dd6:	08 95       	ret

00008dd8 <clearerr>:
    8dd8:	fc 01       	movw	r30, r24
    8dda:	83 81       	ldd	r24, Z+3	; 0x03
    8ddc:	8f 7c       	andi	r24, 0xCF	; 207
    8dde:	83 83       	std	Z+3, r24	; 0x03
    8de0:	08 95       	ret

00008de2 <fgets>:
    8de2:	cf 92       	push	r12
    8de4:	df 92       	push	r13
    8de6:	ef 92       	push	r14
    8de8:	ff 92       	push	r15
    8dea:	0f 93       	push	r16
    8dec:	1f 93       	push	r17
    8dee:	cf 93       	push	r28
    8df0:	df 93       	push	r29
    8df2:	7c 01       	movw	r14, r24
    8df4:	6a 01       	movw	r12, r20
    8df6:	fa 01       	movw	r30, r20
    8df8:	83 81       	ldd	r24, Z+3	; 0x03
    8dfa:	80 ff       	sbrs	r24, 0
    8dfc:	19 c0       	rjmp	.+50     	; 0x8e30 <fgets+0x4e>
    8dfe:	16 16       	cp	r1, r22
    8e00:	17 06       	cpc	r1, r23
    8e02:	b4 f4       	brge	.+44     	; 0x8e30 <fgets+0x4e>
    8e04:	eb 01       	movw	r28, r22
    8e06:	21 97       	sbiw	r28, 0x01	; 1
    8e08:	87 01       	movw	r16, r14
    8e0a:	0d c0       	rjmp	.+26     	; 0x8e26 <fgets+0x44>
    8e0c:	c6 01       	movw	r24, r12
    8e0e:	0e 94 d4 47 	call	0x8fa8	; 0x8fa8 <fgetc>
    8e12:	ff ef       	ldi	r31, 0xFF	; 255
    8e14:	8f 3f       	cpi	r24, 0xFF	; 255
    8e16:	9f 07       	cpc	r25, r31
    8e18:	59 f0       	breq	.+22     	; 0x8e30 <fgets+0x4e>
    8e1a:	f8 01       	movw	r30, r16
    8e1c:	81 93       	st	Z+, r24
    8e1e:	8f 01       	movw	r16, r30
    8e20:	0a 97       	sbiw	r24, 0x0a	; 10
    8e22:	19 f0       	breq	.+6      	; 0x8e2a <fgets+0x48>
    8e24:	21 97       	sbiw	r28, 0x01	; 1
    8e26:	20 97       	sbiw	r28, 0x00	; 0
    8e28:	89 f7       	brne	.-30     	; 0x8e0c <fgets+0x2a>
    8e2a:	f8 01       	movw	r30, r16
    8e2c:	10 82       	st	Z, r1
    8e2e:	02 c0       	rjmp	.+4      	; 0x8e34 <fgets+0x52>
    8e30:	ee 24       	eor	r14, r14
    8e32:	ff 24       	eor	r15, r15
    8e34:	c7 01       	movw	r24, r14
    8e36:	df 91       	pop	r29
    8e38:	cf 91       	pop	r28
    8e3a:	1f 91       	pop	r17
    8e3c:	0f 91       	pop	r16
    8e3e:	ff 90       	pop	r15
    8e40:	ef 90       	pop	r14
    8e42:	df 90       	pop	r13
    8e44:	cf 90       	pop	r12
    8e46:	08 95       	ret

00008e48 <fputc>:
    8e48:	0f 93       	push	r16
    8e4a:	1f 93       	push	r17
    8e4c:	cf 93       	push	r28
    8e4e:	df 93       	push	r29
    8e50:	8c 01       	movw	r16, r24
    8e52:	eb 01       	movw	r28, r22
    8e54:	8b 81       	ldd	r24, Y+3	; 0x03
    8e56:	81 ff       	sbrs	r24, 1
    8e58:	1b c0       	rjmp	.+54     	; 0x8e90 <fputc+0x48>
    8e5a:	82 ff       	sbrs	r24, 2
    8e5c:	0d c0       	rjmp	.+26     	; 0x8e78 <fputc+0x30>
    8e5e:	2e 81       	ldd	r18, Y+6	; 0x06
    8e60:	3f 81       	ldd	r19, Y+7	; 0x07
    8e62:	8c 81       	ldd	r24, Y+4	; 0x04
    8e64:	9d 81       	ldd	r25, Y+5	; 0x05
    8e66:	28 17       	cp	r18, r24
    8e68:	39 07       	cpc	r19, r25
    8e6a:	64 f4       	brge	.+24     	; 0x8e84 <fputc+0x3c>
    8e6c:	e8 81       	ld	r30, Y
    8e6e:	f9 81       	ldd	r31, Y+1	; 0x01
    8e70:	01 93       	st	Z+, r16
    8e72:	e8 83       	st	Y, r30
    8e74:	f9 83       	std	Y+1, r31	; 0x01
    8e76:	06 c0       	rjmp	.+12     	; 0x8e84 <fputc+0x3c>
    8e78:	e8 85       	ldd	r30, Y+8	; 0x08
    8e7a:	f9 85       	ldd	r31, Y+9	; 0x09
    8e7c:	80 2f       	mov	r24, r16
    8e7e:	19 95       	eicall
    8e80:	89 2b       	or	r24, r25
    8e82:	31 f4       	brne	.+12     	; 0x8e90 <fputc+0x48>
    8e84:	8e 81       	ldd	r24, Y+6	; 0x06
    8e86:	9f 81       	ldd	r25, Y+7	; 0x07
    8e88:	01 96       	adiw	r24, 0x01	; 1
    8e8a:	8e 83       	std	Y+6, r24	; 0x06
    8e8c:	9f 83       	std	Y+7, r25	; 0x07
    8e8e:	02 c0       	rjmp	.+4      	; 0x8e94 <fputc+0x4c>
    8e90:	0f ef       	ldi	r16, 0xFF	; 255
    8e92:	1f ef       	ldi	r17, 0xFF	; 255
    8e94:	c8 01       	movw	r24, r16
    8e96:	df 91       	pop	r29
    8e98:	cf 91       	pop	r28
    8e9a:	1f 91       	pop	r17
    8e9c:	0f 91       	pop	r16
    8e9e:	08 95       	ret

00008ea0 <printf_P>:
    8ea0:	df 93       	push	r29
    8ea2:	cf 93       	push	r28
    8ea4:	cd b7       	in	r28, 0x3d	; 61
    8ea6:	de b7       	in	r29, 0x3e	; 62
    8ea8:	fe 01       	movw	r30, r28
    8eaa:	36 96       	adiw	r30, 0x06	; 6
    8eac:	61 91       	ld	r22, Z+
    8eae:	71 91       	ld	r23, Z+
    8eb0:	a0 91 46 26 	lds	r26, 0x2646
    8eb4:	b0 91 47 26 	lds	r27, 0x2647
    8eb8:	13 96       	adiw	r26, 0x03	; 3
    8eba:	8c 91       	ld	r24, X
    8ebc:	13 97       	sbiw	r26, 0x03	; 3
    8ebe:	88 60       	ori	r24, 0x08	; 8
    8ec0:	13 96       	adiw	r26, 0x03	; 3
    8ec2:	8c 93       	st	X, r24
    8ec4:	80 91 46 26 	lds	r24, 0x2646
    8ec8:	90 91 47 26 	lds	r25, 0x2647
    8ecc:	af 01       	movw	r20, r30
    8ece:	0e 94 ed 3b 	call	0x77da	; 0x77da <vfprintf>
    8ed2:	e0 91 46 26 	lds	r30, 0x2646
    8ed6:	f0 91 47 26 	lds	r31, 0x2647
    8eda:	23 81       	ldd	r18, Z+3	; 0x03
    8edc:	27 7f       	andi	r18, 0xF7	; 247
    8ede:	23 83       	std	Z+3, r18	; 0x03
    8ee0:	cf 91       	pop	r28
    8ee2:	df 91       	pop	r29
    8ee4:	08 95       	ret

00008ee6 <__ultoa_invert>:
    8ee6:	fa 01       	movw	r30, r20
    8ee8:	aa 27       	eor	r26, r26
    8eea:	28 30       	cpi	r18, 0x08	; 8
    8eec:	51 f1       	breq	.+84     	; 0x8f42 <__ultoa_invert+0x5c>
    8eee:	20 31       	cpi	r18, 0x10	; 16
    8ef0:	81 f1       	breq	.+96     	; 0x8f52 <__ultoa_invert+0x6c>
    8ef2:	e8 94       	clt
    8ef4:	6f 93       	push	r22
    8ef6:	6e 7f       	andi	r22, 0xFE	; 254
    8ef8:	6e 5f       	subi	r22, 0xFE	; 254
    8efa:	7f 4f       	sbci	r23, 0xFF	; 255
    8efc:	8f 4f       	sbci	r24, 0xFF	; 255
    8efe:	9f 4f       	sbci	r25, 0xFF	; 255
    8f00:	af 4f       	sbci	r26, 0xFF	; 255
    8f02:	b1 e0       	ldi	r27, 0x01	; 1
    8f04:	3e d0       	rcall	.+124    	; 0x8f82 <__ultoa_invert+0x9c>
    8f06:	b4 e0       	ldi	r27, 0x04	; 4
    8f08:	3c d0       	rcall	.+120    	; 0x8f82 <__ultoa_invert+0x9c>
    8f0a:	67 0f       	add	r22, r23
    8f0c:	78 1f       	adc	r23, r24
    8f0e:	89 1f       	adc	r24, r25
    8f10:	9a 1f       	adc	r25, r26
    8f12:	a1 1d       	adc	r26, r1
    8f14:	68 0f       	add	r22, r24
    8f16:	79 1f       	adc	r23, r25
    8f18:	8a 1f       	adc	r24, r26
    8f1a:	91 1d       	adc	r25, r1
    8f1c:	a1 1d       	adc	r26, r1
    8f1e:	6a 0f       	add	r22, r26
    8f20:	71 1d       	adc	r23, r1
    8f22:	81 1d       	adc	r24, r1
    8f24:	91 1d       	adc	r25, r1
    8f26:	a1 1d       	adc	r26, r1
    8f28:	20 d0       	rcall	.+64     	; 0x8f6a <__ultoa_invert+0x84>
    8f2a:	09 f4       	brne	.+2      	; 0x8f2e <__ultoa_invert+0x48>
    8f2c:	68 94       	set
    8f2e:	3f 91       	pop	r19
    8f30:	2a e0       	ldi	r18, 0x0A	; 10
    8f32:	26 9f       	mul	r18, r22
    8f34:	11 24       	eor	r1, r1
    8f36:	30 19       	sub	r19, r0
    8f38:	30 5d       	subi	r19, 0xD0	; 208
    8f3a:	31 93       	st	Z+, r19
    8f3c:	de f6       	brtc	.-74     	; 0x8ef4 <__ultoa_invert+0xe>
    8f3e:	cf 01       	movw	r24, r30
    8f40:	08 95       	ret
    8f42:	46 2f       	mov	r20, r22
    8f44:	47 70       	andi	r20, 0x07	; 7
    8f46:	40 5d       	subi	r20, 0xD0	; 208
    8f48:	41 93       	st	Z+, r20
    8f4a:	b3 e0       	ldi	r27, 0x03	; 3
    8f4c:	0f d0       	rcall	.+30     	; 0x8f6c <__ultoa_invert+0x86>
    8f4e:	c9 f7       	brne	.-14     	; 0x8f42 <__ultoa_invert+0x5c>
    8f50:	f6 cf       	rjmp	.-20     	; 0x8f3e <__ultoa_invert+0x58>
    8f52:	46 2f       	mov	r20, r22
    8f54:	4f 70       	andi	r20, 0x0F	; 15
    8f56:	40 5d       	subi	r20, 0xD0	; 208
    8f58:	4a 33       	cpi	r20, 0x3A	; 58
    8f5a:	18 f0       	brcs	.+6      	; 0x8f62 <__ultoa_invert+0x7c>
    8f5c:	49 5d       	subi	r20, 0xD9	; 217
    8f5e:	31 fd       	sbrc	r19, 1
    8f60:	40 52       	subi	r20, 0x20	; 32
    8f62:	41 93       	st	Z+, r20
    8f64:	02 d0       	rcall	.+4      	; 0x8f6a <__ultoa_invert+0x84>
    8f66:	a9 f7       	brne	.-22     	; 0x8f52 <__ultoa_invert+0x6c>
    8f68:	ea cf       	rjmp	.-44     	; 0x8f3e <__ultoa_invert+0x58>
    8f6a:	b4 e0       	ldi	r27, 0x04	; 4
    8f6c:	a6 95       	lsr	r26
    8f6e:	97 95       	ror	r25
    8f70:	87 95       	ror	r24
    8f72:	77 95       	ror	r23
    8f74:	67 95       	ror	r22
    8f76:	ba 95       	dec	r27
    8f78:	c9 f7       	brne	.-14     	; 0x8f6c <__ultoa_invert+0x86>
    8f7a:	00 97       	sbiw	r24, 0x00	; 0
    8f7c:	61 05       	cpc	r22, r1
    8f7e:	71 05       	cpc	r23, r1
    8f80:	08 95       	ret
    8f82:	9b 01       	movw	r18, r22
    8f84:	ac 01       	movw	r20, r24
    8f86:	0a 2e       	mov	r0, r26
    8f88:	06 94       	lsr	r0
    8f8a:	57 95       	ror	r21
    8f8c:	47 95       	ror	r20
    8f8e:	37 95       	ror	r19
    8f90:	27 95       	ror	r18
    8f92:	ba 95       	dec	r27
    8f94:	c9 f7       	brne	.-14     	; 0x8f88 <__ultoa_invert+0xa2>
    8f96:	62 0f       	add	r22, r18
    8f98:	73 1f       	adc	r23, r19
    8f9a:	84 1f       	adc	r24, r20
    8f9c:	95 1f       	adc	r25, r21
    8f9e:	a0 1d       	adc	r26, r0
    8fa0:	08 95       	ret

00008fa2 <__ctype_isfalse>:
    8fa2:	99 27       	eor	r25, r25
    8fa4:	88 27       	eor	r24, r24

00008fa6 <__ctype_istrue>:
    8fa6:	08 95       	ret

00008fa8 <fgetc>:
    8fa8:	cf 93       	push	r28
    8faa:	df 93       	push	r29
    8fac:	ec 01       	movw	r28, r24
    8fae:	4b 81       	ldd	r20, Y+3	; 0x03
    8fb0:	40 ff       	sbrs	r20, 0
    8fb2:	1a c0       	rjmp	.+52     	; 0x8fe8 <fgetc+0x40>
    8fb4:	46 ff       	sbrs	r20, 6
    8fb6:	0a c0       	rjmp	.+20     	; 0x8fcc <fgetc+0x24>
    8fb8:	4f 7b       	andi	r20, 0xBF	; 191
    8fba:	4b 83       	std	Y+3, r20	; 0x03
    8fbc:	8e 81       	ldd	r24, Y+6	; 0x06
    8fbe:	9f 81       	ldd	r25, Y+7	; 0x07
    8fc0:	01 96       	adiw	r24, 0x01	; 1
    8fc2:	8e 83       	std	Y+6, r24	; 0x06
    8fc4:	9f 83       	std	Y+7, r25	; 0x07
    8fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    8fc8:	28 2f       	mov	r18, r24
    8fca:	2b c0       	rjmp	.+86     	; 0x9022 <fgetc+0x7a>
    8fcc:	42 ff       	sbrs	r20, 2
    8fce:	13 c0       	rjmp	.+38     	; 0x8ff6 <fgetc+0x4e>
    8fd0:	e8 81       	ld	r30, Y
    8fd2:	f9 81       	ldd	r31, Y+1	; 0x01
    8fd4:	80 81       	ld	r24, Z
    8fd6:	28 2f       	mov	r18, r24
    8fd8:	33 27       	eor	r19, r19
    8fda:	27 fd       	sbrc	r18, 7
    8fdc:	30 95       	com	r19
    8fde:	21 15       	cp	r18, r1
    8fe0:	31 05       	cpc	r19, r1
    8fe2:	29 f4       	brne	.+10     	; 0x8fee <fgetc+0x46>
    8fe4:	40 62       	ori	r20, 0x20	; 32
    8fe6:	4b 83       	std	Y+3, r20	; 0x03
    8fe8:	2f ef       	ldi	r18, 0xFF	; 255
    8fea:	3f ef       	ldi	r19, 0xFF	; 255
    8fec:	1b c0       	rjmp	.+54     	; 0x9024 <fgetc+0x7c>
    8fee:	31 96       	adiw	r30, 0x01	; 1
    8ff0:	e8 83       	st	Y, r30
    8ff2:	f9 83       	std	Y+1, r31	; 0x01
    8ff4:	11 c0       	rjmp	.+34     	; 0x9018 <fgetc+0x70>
    8ff6:	ea 85       	ldd	r30, Y+10	; 0x0a
    8ff8:	fb 85       	ldd	r31, Y+11	; 0x0b
    8ffa:	ce 01       	movw	r24, r28
    8ffc:	19 95       	eicall
    8ffe:	9c 01       	movw	r18, r24
    9000:	97 ff       	sbrs	r25, 7
    9002:	0a c0       	rjmp	.+20     	; 0x9018 <fgetc+0x70>
    9004:	9b 81       	ldd	r25, Y+3	; 0x03
    9006:	2f 5f       	subi	r18, 0xFF	; 255
    9008:	3f 4f       	sbci	r19, 0xFF	; 255
    900a:	11 f0       	breq	.+4      	; 0x9010 <fgetc+0x68>
    900c:	80 e2       	ldi	r24, 0x20	; 32
    900e:	01 c0       	rjmp	.+2      	; 0x9012 <fgetc+0x6a>
    9010:	80 e1       	ldi	r24, 0x10	; 16
    9012:	89 2b       	or	r24, r25
    9014:	8b 83       	std	Y+3, r24	; 0x03
    9016:	e8 cf       	rjmp	.-48     	; 0x8fe8 <fgetc+0x40>
    9018:	8e 81       	ldd	r24, Y+6	; 0x06
    901a:	9f 81       	ldd	r25, Y+7	; 0x07
    901c:	01 96       	adiw	r24, 0x01	; 1
    901e:	8e 83       	std	Y+6, r24	; 0x06
    9020:	9f 83       	std	Y+7, r25	; 0x07
    9022:	30 e0       	ldi	r19, 0x00	; 0
    9024:	c9 01       	movw	r24, r18
    9026:	df 91       	pop	r29
    9028:	cf 91       	pop	r28
    902a:	08 95       	ret

0000902c <_exit>:
    902c:	f8 94       	cli

0000902e <__stop_program>:
    902e:	ff cf       	rjmp	.-2      	; 0x902e <__stop_program>
