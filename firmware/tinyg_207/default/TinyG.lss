
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00802000  00009280  00009314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004db  00802100  00802100  00009414  2**0
                  ALLOC
  3 .debug_aranges 000003e0  00000000  00000000  00009414  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000010cb  00000000  00000000  000097f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000e5dd  00000000  00000000  0000a8bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000030dc  00000000  00000000  00018e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004f13  00000000  00000000  0001bf78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b40  00000000  00000000  00020e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000263e  00000000  00000000  000219cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003d6c  00000000  00000000  0002400a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  00027d76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__ctors_end>
       4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
       8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
       c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      10:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      14:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      18:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      1c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      20:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      24:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      28:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      2c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      30:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      34:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      38:	0c 94 32 27 	jmp	0x4e64	; 0x4e64 <__vector_14>
      3c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      40:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      44:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      48:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      4c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      50:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      54:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      58:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      5c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      60:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      64:	0c 94 3b 33 	jmp	0x6676	; 0x6676 <__vector_25>
      68:	0c 94 f7 32 	jmp	0x65ee	; 0x65ee <__vector_26>
      6c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      70:	0c 94 4d 34 	jmp	0x689a	; 0x689a <__vector_28>
      74:	0c 94 e9 33 	jmp	0x67d2	; 0x67d2 <__vector_29>
      78:	0c 94 33 34 	jmp	0x6866	; 0x6866 <__vector_30>
      7c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      80:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      84:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      88:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      8c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      90:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      94:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      98:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      9c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      a0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      a4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      a8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      ac:	0c 94 34 2f 	jmp	0x5e68	; 0x5e68 <__vector_43>
      b0:	0c 94 3e 2f 	jmp	0x5e7c	; 0x5e7c <__vector_44>
      b4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      b8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      bc:	0c 94 68 26 	jmp	0x4cd0	; 0x4cd0 <__vector_47>
      c0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      c4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      c8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      cc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      d0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      d4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      d8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      dc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      e0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      e4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      e8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      ec:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      f0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      f4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      f8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      fc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     100:	0c 94 48 2f 	jmp	0x5e90	; 0x5e90 <__vector_64>
     104:	0c 94 52 2f 	jmp	0x5ea4	; 0x5ea4 <__vector_65>
     108:	0c 94 0c 2f 	jmp	0x5e18	; 0x5e18 <__vector_66>
     10c:	0c 94 16 2f 	jmp	0x5e2c	; 0x5e2c <__vector_67>
     110:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     114:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     118:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     11c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     120:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     124:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     128:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     12c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     130:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     134:	0c 94 cd 26 	jmp	0x4d9a	; 0x4d9a <__vector_77>
     138:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     13c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     140:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     144:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     148:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     14c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     150:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     154:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     158:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     15c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     160:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     164:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     168:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     16c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     170:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     174:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     178:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     17c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     180:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     184:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     188:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     18c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     190:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     194:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     198:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     19c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1a0:	0c 94 20 2f 	jmp	0x5e40	; 0x5e40 <__vector_104>
     1a4:	0c 94 2a 2f 	jmp	0x5e54	; 0x5e54 <__vector_105>
     1a8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1ac:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1b0:	0c 94 03 26 	jmp	0x4c06	; 0x4c06 <__vector_108>
     1b4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1b8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1bc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1c0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1c4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1c8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1cc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1d0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1d4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1d8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1dc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1e0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1e4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <__c.3932>:
     23b:	25 73 0a 00                                         %s..

0000023f <cfgMsgXaxis>:
     23f:	58 00                                               X.

00000241 <cfgMsgYaxis>:
     241:	59 00                                               Y.

00000243 <cfgMsgZaxis>:
     243:	5a 00                                               Z.

00000245 <cfgMsgAaxis>:
     245:	41 00                                               A.

00000247 <cfgMsgs>:
     247:	3f 02 41 02 43 02 45 02                             ?.A.C.E.

0000024f <configs_P>:
     24f:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25f:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26f:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27f:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28f:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29f:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2af:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bf:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cf:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2df:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2ef:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2ff:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30f:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31f:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32f:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33f:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34f:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35f:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36f:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37f:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38f:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

0000039d <__c.3754>:
     39d:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     3ad:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     3bd:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     3cd:	29 0a 0a 00                                         )...

000003d1 <__c.3752>:
     3d1:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     3e1:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     3f1:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000401 <__c.3750>:
     401:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     411:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     421:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

00000432 <__c.3748>:
     432:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     442:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     452:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

00000463 <__c.3746>:
     463:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     473:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     483:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     493:	6c 0a 00                                            l..

00000496 <__c.3744>:
     496:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     4a6:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     4b6:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     4c6:	6e 0a 00                                            n..

000004c9 <__c.3742>:
     4c9:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     4d9:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     4e9:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     4f9:	74 65 70 73 29 0a 00                                teps)..

00000500 <__c.3740>:
     500:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     510:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     520:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     530:	70 0a 00                                            p..

00000533 <__c.3738>:
     533:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     543:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     553:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     563:	73 74 65 70 73 29 0a 00                             steps)..

0000056b <__c.3736>:
     56b:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     57b:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     58b:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     59b:	73 74 65 70 73 29 0a 00                             steps)..

000005a3 <__c.3731>:
     5a3:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     5b3:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

000005c1 <__c.3717>:
     5c1:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     5d1:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     5e1:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

000005ec <__c.3715>:
     5ec:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     5fc:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     60c:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

00000616 <__c.3713>:
     616:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     626:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     636:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

00000640 <__c.3711>:
     640:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     650:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     660:	73 20 2d 2d 2d 0a 00                                s ---..

00000667 <__c.3709>:
     667:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     677:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     687:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

0000068f <__c.3686>:
     68f:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     69f:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     6af:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

000006bb <square_test1>:
     6bb:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     6cb:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     6db:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     6eb:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     6fb:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     70b:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     71b:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

00000729 <square_test2>:
     729:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     739:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     749:	78 30 20 79 30 00                                   x0 y0.

0000074f <square_test10>:
     74f:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     75f:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     76f:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

0000077b <circle_test10>:
     77b:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     78b:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     79b:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     7ab:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     7bb:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     7cb:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     7db:	30 00                                               0.

000007dd <square_circle_test10>:
     7dd:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     7ed:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     7fd:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     80d:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     81d:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     82d:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     83d:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     84d:	31 30 20 79 30 00                                   10 y0.

00000853 <square_circle_test100>:
     853:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     863:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     873:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     883:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     893:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     8a3:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     8b3:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     8c3:	35 30 20 6a 30 00                                   50 j0.

000008c9 <spiral_test5>:
     8c9:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     8d9:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     8e9:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     8f9:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     909:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     919:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     929:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     939:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

00000943 <spiral_test50a>:
     943:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     953:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

00000963 <dwell_test1>:
     963:	67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30 20     g0 x10.g4 p1.g0 
     973:	78 32 30 0a 67 34 20 70 31 0a 67 30 20 78 31 30     x20.g4 p1.g0 x10
     983:	0a 67 34 20 70 31 0a 67 30 20 78 30 30 0a 67 34     .g4 p1.g0 x00.g4
     993:	20 70 31 0a 67 30 20 78 31 30 0a 67 34 20 70 31      p1.g0 x10.g4 p1
     9a3:	0a 67 30 20 78 32 30 0a 67 34 20 70 31 0a 67 30     .g0 x20.g4 p1.g0
     9b3:	20 78 31 30 0a 67 34 20 70 31 0a 67 30 20 78 30      x10.g4 p1.g0 x0
     9c3:	0a 67 34 20 70 31 0a 67 30 20 78 31 30 0a 67 34     .g4 p1.g0 x10.g4
     9d3:	20 70 31 0a 67 30 20 78 32 30 0a 67 34 20 70 31      p1.g0 x20.g4 p1
     9e3:	0a 67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30     .g0 x10.g4 p1.g0
     9f3:	20 78 30 00                                          x0.

000009f7 <dwell_test2>:
     9f7:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     a07:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     a17:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     a27:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     a37:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     a47:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     a57:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     a67:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     a77:	20 70 31 0a 67 30 20 78 30 00                        p1.g0 x0.

00000a81 <dwell_testMax>:
     a81:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000a8b <g0_test1>:
     a8b:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     a9b:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000aab <g0_test2>:
     aab:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     abb:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     acb:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     adb:	79 30 20 7a 30 00                                   y0 z0.

00000ae1 <g0_test3>:
     ae1:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     af1:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     b01:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000b0f <radius_arc_test1>:
     b0f:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     b1f:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     b2f:	72 35 30 0a 00                                      r50..

00000b34 <radius_arc_test2>:
     b34:	67 32 0a 00                                         g2..

00000b38 <zoetrope>:
     b38:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     b48:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     b58:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     b68:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     b78:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     b88:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     b98:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     ba8:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     bb8:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     bc8:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     bd8:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     be8:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     bf8:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     c08:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     c18:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     c28:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     c38:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     c48:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     c58:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     c68:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     c78:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     c88:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     c98:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     ca8:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     cb8:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     cc8:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     cd8:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     ce8:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     cf8:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     d08:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     d18:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     d28:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     d38:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     d48:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     d58:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     d68:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
     d78:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
     d88:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
     d98:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
     da8:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
     db8:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
     dc8:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
     dd8:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
     de8:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
     df8:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
     e08:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
     e18:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
     e28:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
     e38:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
     e48:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
     e58:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
     e68:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
     e78:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
     e88:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
     e98:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
     ea8:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
     eb8:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
     ec8:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
     ed8:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
     ee8:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
     ef8:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
     f08:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
     f18:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
     f28:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
     f38:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
     f48:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
     f58:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
     f68:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
     f78:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
     f88:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
     f98:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
     fa8:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
     fb8:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
     fc8:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
     fd8:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
     fe8:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
     ff8:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    1008:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    1018:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    1028:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    1038:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    1048:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    1058:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    1068:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    1078:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    1088:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    1098:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    10a8:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    10b8:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    10c8:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    10d8:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    10e8:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    10f8:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    1108:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    1118:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    1128:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    1138:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    1148:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    1158:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    1168:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    1178:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    1188:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    1198:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    11a8:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    11b8:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    11c8:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    11d8:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    11e8:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    11f8:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    1208:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    1218:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    1228:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    1238:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    1248:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    1258:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    1268:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    1278:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    1288:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    1298:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    12a8:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    12b8:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    12c8:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    12d8:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    12e8:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    12f8:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    1308:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    1318:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    1328:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    1338:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    1348:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    1358:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    1368:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    1378:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    1388:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    1398:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    13a8:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    13b8:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    13c8:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    13d8:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    13e8:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    13f8:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    1408:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    1418:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    1428:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    1438:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    1448:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    1458:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    1468:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    1478:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    1488:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    1498:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    14a8:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    14b8:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    14c8:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    14d8:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    14e8:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

000014f3 <contraptor_circle>:
    14f3:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    1503:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    1513:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    1523:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    1533:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    1543:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    1553:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    1563:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    1573:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    1583:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    1593:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    15a3:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    15b3:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    15c3:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    15d3:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    15e3:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    15f3:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    1603:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    1613:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    1623:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    1633:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    1643:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    1653:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    1663:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    1673:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    1683:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    1693:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    16a3:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    16b3:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    16c3:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    16d3:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    16e3:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    16f3:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    1703:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    1713:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    1723:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    1733:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    1743:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    1753:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    1763:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    1773:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1783:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1793:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    17a3:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    17b3:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    17c3:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    17d3:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    17e3:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    17f3:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1803:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    1813:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    1823:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    1833:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    1843:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    1853:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    1863:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    1873:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1883:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1893:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    18a3:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    18b3:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    18c3:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

000018d3 <tgModeStringControl>:
    18d3:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

000018e0 <tgModeStringConfig>:
    18e0:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

000018ec <tgModeStringGCode>:
    18ec:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

000018f8 <tgModeStringDirect>:
    18f8:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

00001905 <tgModeStrings>:
    1905:	d3 18 e0 18 ec 18 f8 18                             ........

0000190d <tgStatusMsg00>:
    190d:	4f 4b 00                                            OK.

00001910 <tgStatusMsg01>:
    1910:	45 52 52 4f 52 00                                   ERROR.

00001916 <tgStatusMsg02>:
    1916:	45 41 47 41 49 4e 00                                EAGAIN.

0000191d <tgStatusMsg03>:
    191d:	4e 4f 4f 50 00                                      NOOP.

00001922 <tgStatusMsg04>:
    1922:	45 6e 64 20 6f 66 20 6c 69 6e 65 00                 End of line.

0000192e <tgStatusMsg05>:
    192e:	45 6e 64 20 6f 66 20 66 69 6c 65 00                 End of file.

0000193a <tgStatusMsg06>:
    193a:	46 69 6c 65 20 6e 6f 74 20 6f 70 65 6e 00           File not open.

00001948 <tgStatusMsg07>:
    1948:	4e 6f 20 73 75 63 68 20 64 65 76 69 63 65 00        No such device.

00001957 <tgStatusMsg08>:
    1957:	42 75 66 66 65 72 20 65 6d 70 74 79 00              Buffer empty.

00001964 <tgStatusMsg09>:
    1964:	42 75 66 66 65 72 20 66 75 6c 6c 20 2d 20 66 61     Buffer full - fa
    1974:	74 61 6c 00                                         tal.

00001978 <tgStatusMsg10>:
    1978:	42 75 66 66 65 72 20 66 75 6c 6c 20 2d 20 6e 6f     Buffer full - no
    1988:	6e 2d 66 61 74 61 6c 00                             n-fatal.

00001990 <tgStatusMsg11>:
    1990:	51 55 49 54 00                                      QUIT.

00001995 <tgStatusMsg12>:
    1995:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 63 6f 6d     Unrecognized com
    19a5:	6d 61 6e 64 00                                      mand.

000019aa <tgStatusMsg13>:
    19aa:	45 78 70 65 63 74 65 64 20 63 6f 6d 6d 61 6e 64     Expected command
    19ba:	20 6c 65 74 74 65 72 00                              letter.

000019c2 <tgStatusMsg14>:
    19c2:	55 6e 73 75 70 70 6f 72 74 65 64 20 73 74 61 74     Unsupported stat
    19d2:	65 6d 65 6e 74 00                                   ement.

000019d8 <tgStatusMsg15>:
    19d8:	50 61 72 61 6d 65 74 65 72 20 6f 76 65 72 20 72     Parameter over r
    19e8:	61 6e 67 65 00                                      ange.

000019ed <tgStatusMsg16>:
    19ed:	42 61 64 20 6e 75 6d 62 65 72 20 66 6f 72 6d 61     Bad number forma
    19fd:	74 00                                               t.

000019ff <tgStatusMsg17>:
    19ff:	46 6c 6f 61 74 69 6e 67 20 70 6f 69 6e 74 20 65     Floating point e
    1a0f:	72 72 6f 72 00                                      rror.

00001a14 <tgStatusMsg18>:
    1a14:	4d 6f 74 69 6f 6e 20 63 6f 6e 74 72 6f 6c 20 65     Motion control e
    1a24:	72 72 6f 72 00                                      rror.

00001a29 <tgStatusMsg19>:
    1a29:	41 72 63 20 73 70 65 63 69 66 69 63 61 74 69 6f     Arc specificatio
    1a39:	6e 20 65 72 72 6f 72 00                             n error.

00001a41 <tgStatusMsg20>:
    1a41:	5a 65 72 6f 20 6c 65 6e 67 74 68 20 6c 69 6e 65     Zero length line
	...

00001a52 <tgStatusStrings>:
    1a52:	0d 19 10 19 16 19 1d 19 22 19 2e 19 3a 19 48 19     ........"...:.H.
    1a62:	57 19 64 19 78 19 90 19 95 19 aa 19 c2 19 d8 19     W.d.x...........
    1a72:	ed 19 ff 19 14 1a 29 1a 41 1a                       ......).A.

00001a7c <__c.4077>:
    1a7c:	25 53 3a 20 25 73 0a 00                             %S: %s..

00001a84 <__c.3972>:
    1a84:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1a94:	69 6c 65 0a 00                                      ile..

00001a99 <__c.4035>:
    1a99:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001aa7 <__c.3948>:
    1aa7:	62 75 69 6c 64 20 32 30 37 00                       build 207.

00001ab1 <__c.3946>:
    1ab1:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1ac1:	25 53 0a 00                                         %S..

00001ac5 <bsel>:
    1ac5:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

00001ad0 <bscale>:
    1ad0:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

00001adb <readlnFuncs>:
    1adb:	a6 31 62 31 62 31 62 31 62 31 62 31 62 31 62 31     .1b1b1b1b1b1b1b1
    1aeb:	f0 31 62 31 a6 31 62 31 62 31 a6 31 62 31 62 31     .1b1.1b1b1.1b1b1
    1afb:	62 31 62 31 62 31 62 31 62 31 62 31 62 31 62 31     b1b1b1b1b1b1b1b1
    1b0b:	62 31 62 31 62 31 62 31 62 31 62 31 62 31 62 31     b1b1b1b1b1b1b1b1
    1b1b:	62 31 62 31 62 31 62 31 62 31 62 31 62 31 62 31     b1b1b1b1b1b1b1b1
    1b2b:	62 31 62 31 62 31 62 31 62 31 62 31 62 31 62 31     b1b1b1b1b1b1b1b1
    1b3b:	62 31 62 31 62 31 62 31 62 31 62 31 62 31 62 31     b1b1b1b1b1b1b1b1
    1b4b:	62 31 62 31 62 31 d9 31 62 31 62 31 62 31 62 31     b1b1b1.1b1b1b1b1
    1b5b:	62 31 62 31 62 31 62 31 62 31 62 31 62 31 62 31     b1b1b1b1b1b1b1b1
    1b6b:	62 31 62 31 62 31 62 31 62 31 62 31 62 31 62 31     b1b1b1b1b1b1b1b1
    1b7b:	62 31 62 31 62 31 62 31 62 31 62 31 62 31 62 31     b1b1b1b1b1b1b1b1
    1b8b:	62 31 62 31 62 31 62 31 62 31 62 31 62 31 62 31     b1b1b1b1b1b1b1b1
    1b9b:	62 31 62 31 62 31 62 31 62 31 62 31 62 31 62 31     b1b1b1b1b1b1b1b1
    1bab:	62 31 62 31 62 31 62 31 62 31 62 31 62 31 62 31     b1b1b1b1b1b1b1b1
    1bbb:	62 31 62 31 62 31 62 31 62 31 62 31 62 31 62 31     b1b1b1b1b1b1b1b1
    1bcb:	62 31 62 31 62 31 62 31 62 31 62 31 62 31 f0 31     b1b1b1b1b1b1b1.1

00001bdb <getcFuncs>:
    1bdb:	99 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30     .0l0l0l0l0l0l0l0
    1beb:	ee 30 6c 30 99 30 6c 30 6c 30 99 30 6c 30 6c 30     .0l0.0l0l0.0l0l0
    1bfb:	6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30     l0l0l0l0l0l0l0l0
    1c0b:	6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30     l0l0l0l0l0l0l0l0
    1c1b:	6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30     l0l0l0l0l0l0l0l0
    1c2b:	6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30     l0l0l0l0l0l0l0l0
    1c3b:	6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30     l0l0l0l0l0l0l0l0
    1c4b:	6c 30 6c 30 6c 30 d7 30 6c 30 6c 30 6c 30 6c 30     l0l0l0.0l0l0l0l0
    1c5b:	6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30     l0l0l0l0l0l0l0l0
    1c6b:	6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30     l0l0l0l0l0l0l0l0
    1c7b:	6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30     l0l0l0l0l0l0l0l0
    1c8b:	6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30     l0l0l0l0l0l0l0l0
    1c9b:	6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30     l0l0l0l0l0l0l0l0
    1cab:	6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30     l0l0l0l0l0l0l0l0
    1cbb:	6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30     l0l0l0l0l0l0l0l0
    1ccb:	6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 6c 30 ee 30     l0l0l0l0l0l0l0.0

00001cdb <pstr_inf>:
    1cdb:	49 4e 46                                            INF

00001cde <pstr_inity>:
    1cde:	49 4e 49 54 59                                      INITY

00001ce3 <pstr_nan>:
    1ce3:	4e 41 4e                                            NAN

00001ce6 <pwr_m10>:
    1ce6:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1cf6:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001cfe <pwr_p10>:
    1cfe:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1d0e:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1d1e:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1d2e:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1d3e:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1d4e:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1d5e:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1d6e:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1d7e:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1d8e:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1d9e:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1dae:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1dbe:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1dce:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1dde:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1dee:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1dfe:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1e0e:	3d 27                                               ='

00001e10 <__ctors_end>:
    1e10:	11 24       	eor	r1, r1
    1e12:	1f be       	out	0x3f, r1	; 63
    1e14:	cf ef       	ldi	r28, 0xFF	; 255
    1e16:	df e5       	ldi	r29, 0x5F	; 95
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	00 e0       	ldi	r16, 0x00	; 0
    1e1e:	0c bf       	out	0x3c, r16	; 60

00001e20 <__do_copy_data>:
    1e20:	11 e2       	ldi	r17, 0x21	; 33
    1e22:	a0 e0       	ldi	r26, 0x00	; 0
    1e24:	b0 e2       	ldi	r27, 0x20	; 32
    1e26:	e0 e8       	ldi	r30, 0x80	; 128
    1e28:	f2 e9       	ldi	r31, 0x92	; 146
    1e2a:	00 e0       	ldi	r16, 0x00	; 0
    1e2c:	0b bf       	out	0x3b, r16	; 59
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <__do_copy_data+0x14>
    1e30:	07 90       	elpm	r0, Z+
    1e32:	0d 92       	st	X+, r0
    1e34:	a0 30       	cpi	r26, 0x00	; 0
    1e36:	b1 07       	cpc	r27, r17
    1e38:	d9 f7       	brne	.-10     	; 0x1e30 <__do_copy_data+0x10>

00001e3a <__do_clear_bss>:
    1e3a:	15 e2       	ldi	r17, 0x25	; 37
    1e3c:	a0 e0       	ldi	r26, 0x00	; 0
    1e3e:	b1 e2       	ldi	r27, 0x21	; 33
    1e40:	01 c0       	rjmp	.+2      	; 0x1e44 <.do_clear_bss_start>

00001e42 <.do_clear_bss_loop>:
    1e42:	1d 92       	st	X+, r1

00001e44 <.do_clear_bss_start>:
    1e44:	ab 3d       	cpi	r26, 0xDB	; 219
    1e46:	b1 07       	cpc	r27, r17
    1e48:	e1 f7       	brne	.-8      	; 0x1e42 <.do_clear_bss_loop>
    1e4a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <main>
    1e4e:	0c 94 3e 49 	jmp	0x927c	; 0x927c <_exit>

00001e52 <__bad_interrupt>:
    1e52:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001e56 <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1e56:	f8 94       	cli
	xmega_init();				// xmega setup
    1e58:	0e 94 17 1b 	call	0x362e	; 0x362e <xmega_init>
	xio_init();					// xmega io subsystem
    1e5c:	0e 94 e5 28 	call	0x51ca	; 0x51ca <xio_init>

	cfg_init();					// get config record from eeprom
    1e60:	0e 94 65 17 	call	0x2eca	; 0x2eca <cfg_init>
	st_init(); 					// stepper subsystem
    1e64:	0e 94 bf 23 	call	0x477e	; 0x477e <st_init>
	ls_init();					// limit switches
    1e68:	0e 94 e4 2e 	call	0x5dc8	; 0x5dc8 <ls_init>
	mv_init();					// move buffers
    1e6c:	0e 94 2c 2c 	call	0x5858	; 0x5858 <mv_init>
	mc_init();					// motion control subsystem
    1e70:	0e 94 40 1b 	call	0x3680	; 0x3680 <mc_init>
	spindle_init();				// spindle controller
    1e74:	0e 94 a3 23 	call	0x4746	; 0x4746 <spindle_init>
	en_init();					// encoders
    1e78:	0e 94 b5 1a 	call	0x356a	; 0x356a <en_init>
	gc_init();					// gcode-parser
    1e7c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <gc_init>
	dd_init();					// direct drive commands
    1e80:	0e 94 28 2c 	call	0x5850	; 0x5850 <dd_init>
	tg_init();					// tinyg parsers
    1e84:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1e88:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1e8c:	e0 ea       	ldi	r30, 0xA0	; 160
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 91 a2 00 	lds	r24, 0x00A2
    1e94:	81 60       	ori	r24, 0x01	; 1
    1e96:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1e98:	80 91 a2 00 	lds	r24, 0x00A2
    1e9c:	82 60       	ori	r24, 0x02	; 2
    1e9e:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1ea0:	80 91 a2 00 	lds	r24, 0x00A2
    1ea4:	84 60       	ori	r24, 0x04	; 4
    1ea6:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1ea8:	78 94       	sei
	for(;;){
		tg_repeater();		// this node receives on USB and repeats to RS485
	}
#else
	for(;;){
		tg_controller();	// this node executes gcode blocks received via RS485
    1eaa:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <tg_controller>
    1eae:	fd cf       	rjmp	.-6      	; 0x1eaa <main+0x54>

00001eb0 <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1eb0:	80 93 13 21 	sts	0x2113, r24
	gc.plane_axis_1 = axis_1;
    1eb4:	60 93 14 21 	sts	0x2114, r22
	gc.plane_axis_2 = axis_2;
    1eb8:	40 93 15 21 	sts	0x2115, r20
}
    1ebc:	08 95       	ret

00001ebe <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1ebe:	ef 92       	push	r14
    1ec0:	ff 92       	push	r15
    1ec2:	0f 93       	push	r16
    1ec4:	1f 93       	push	r17
    1ec6:	7b 01       	movw	r14, r22
    1ec8:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    1eca:	80 91 0e 21 	lds	r24, 0x210E
    1ece:	88 23       	and	r24, r24
    1ed0:	51 f0       	breq	.+20     	; 0x1ee6 <to_millimeters+0x28>
    1ed2:	c8 01       	movw	r24, r16
    1ed4:	b7 01       	movw	r22, r14
    1ed6:	25 e8       	ldi	r18, 0x85	; 133
    1ed8:	32 e4       	ldi	r19, 0x42	; 66
    1eda:	41 e2       	ldi	r20, 0x21	; 33
    1edc:	5d e3       	ldi	r21, 0x3D	; 61
    1ede:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    1ee2:	7b 01       	movw	r14, r22
    1ee4:	8c 01       	movw	r16, r24
}
    1ee6:	b7 01       	movw	r22, r14
    1ee8:	c8 01       	movw	r24, r16
    1eea:	1f 91       	pop	r17
    1eec:	0f 91       	pop	r16
    1eee:	ff 90       	pop	r15
    1ef0:	ef 90       	pop	r14
    1ef2:	08 95       	ret

00001ef4 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    1ef4:	88 e5       	ldi	r24, 0x58	; 88
    1ef6:	e0 e0       	ldi	r30, 0x00	; 0
    1ef8:	f1 e2       	ldi	r31, 0x21	; 33
    1efa:	df 01       	movw	r26, r30
    1efc:	1d 92       	st	X+, r1
    1efe:	8a 95       	dec	r24
    1f00:	e9 f7       	brne	.-6      	; 0x1efc <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a0 e0       	ldi	r26, 0x00	; 0
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	80 93 16 21 	sts	0x2116, r24
    1f0e:	90 93 17 21 	sts	0x2117, r25
    1f12:	a0 93 18 21 	sts	0x2118, r26
    1f16:	b0 93 19 21 	sts	0x2119, r27
	gc.radius = 0;							// radius value
    1f1a:	80 93 1a 21 	sts	0x211A, r24
    1f1e:	90 93 1b 21 	sts	0x211B, r25
    1f22:	a0 93 1c 21 	sts	0x211C, r26
    1f26:	b0 93 1d 21 	sts	0x211D, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    1f2a:	80 91 4c 23 	lds	r24, 0x234C
    1f2e:	90 91 4d 23 	lds	r25, 0x234D
    1f32:	a0 91 4e 23 	lds	r26, 0x234E
    1f36:	b0 91 4f 23 	lds	r27, 0x234F
    1f3a:	80 93 1e 21 	sts	0x211E, r24
    1f3e:	90 93 1f 21 	sts	0x211F, r25
    1f42:	a0 93 20 21 	sts	0x2120, r26
    1f46:	b0 93 21 21 	sts	0x2121, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    1f4a:	80 91 50 23 	lds	r24, 0x2350
    1f4e:	90 91 51 23 	lds	r25, 0x2351
    1f52:	a0 91 52 23 	lds	r26, 0x2352
    1f56:	b0 91 53 23 	lds	r27, 0x2353
    1f5a:	80 93 22 21 	sts	0x2122, r24
    1f5e:	90 93 23 21 	sts	0x2123, r25
    1f62:	a0 93 24 21 	sts	0x2124, r26
    1f66:	b0 93 25 21 	sts	0x2125, r27

	gc.absolute_mode = TRUE;
    1f6a:	21 e0       	ldi	r18, 0x01	; 1
    1f6c:	20 93 0f 21 	sts	0x210F, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a0 e8       	ldi	r26, 0x80	; 128
    1f76:	bf eb       	ldi	r27, 0xBF	; 191
    1f78:	80 93 2a 21 	sts	0x212A, r24
    1f7c:	90 93 2b 21 	sts	0x212B, r25
    1f80:	a0 93 2c 21 	sts	0x212C, r26
    1f84:	b0 93 2d 21 	sts	0x212D, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    1f88:	10 92 10 21 	sts	0x2110, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    1f8c:	10 92 12 21 	sts	0x2112, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    1f90:	10 92 0a 21 	sts	0x210A, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1f94:	10 92 13 21 	sts	0x2113, r1
	gc.plane_axis_1 = axis_1;
    1f98:	20 93 14 21 	sts	0x2114, r18
	gc.plane_axis_2 = axis_2;
    1f9c:	82 e0       	ldi	r24, 0x02	; 2
    1f9e:	80 93 15 21 	sts	0x2115, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X, Y, Z);
}
    1fa2:	08 95       	ret

00001fa4 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    1fa4:	4f 92       	push	r4
    1fa6:	5f 92       	push	r5
    1fa8:	6f 92       	push	r6
    1faa:	7f 92       	push	r7
    1fac:	8f 92       	push	r8
    1fae:	9f 92       	push	r9
    1fb0:	af 92       	push	r10
    1fb2:	bf 92       	push	r11
    1fb4:	cf 92       	push	r12
    1fb6:	df 92       	push	r13
    1fb8:	ef 92       	push	r14
    1fba:	ff 92       	push	r15
    1fbc:	0f 93       	push	r16
    1fbe:	1f 93       	push	r17
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	0f 92       	push	r0
    1fc6:	0f 92       	push	r0
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	3b 01       	movw	r6, r22
    1fce:	2a 01       	movw	r4, r20
    1fd0:	49 01       	movw	r8, r18
    1fd2:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    1fd4:	d8 01       	movw	r26, r16
    1fd6:	ed 91       	ld	r30, X+
    1fd8:	fc 91       	ld	r31, X
    1fda:	e2 0f       	add	r30, r18
    1fdc:	f3 1f       	adc	r31, r19
    1fde:	e0 81       	ld	r30, Z
    1fe0:	ee 23       	and	r30, r30
    1fe2:	41 f0       	breq	.+16     	; 0x1ff4 <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    1fe8:	e1 54       	subi	r30, 0x41	; 65
    1fea:	ea 31       	cpi	r30, 0x1A	; 26
    1fec:	30 f0       	brcs	.+12     	; 0x1ffa <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    1fee:	8d e0       	ldi	r24, 0x0D	; 13
    1ff0:	80 93 00 21 	sts	0x2100, r24
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	35 c0       	rjmp	.+106    	; 0x2064 <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    1ffa:	f8 01       	movw	r30, r16
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	01 96       	adiw	r24, 0x01	; 1
    2002:	80 83       	st	Z, r24
    2004:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    2006:	89 01       	movw	r16, r18
    2008:	08 0f       	add	r16, r24
    200a:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    200c:	c8 01       	movw	r24, r16
    200e:	be 01       	movw	r22, r28
    2010:	6f 5f       	subi	r22, 0xFF	; 255
    2012:	7f 4f       	sbci	r23, 0xFF	; 255
    2014:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <strtod>
    2018:	6b 01       	movw	r12, r22
    201a:	7c 01       	movw	r14, r24
    201c:	d3 01       	movw	r26, r6
    201e:	6d 93       	st	X+, r22
    2020:	7d 93       	st	X+, r23
    2022:	8d 93       	st	X+, r24
    2024:	9c 93       	st	X, r25
    2026:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
    202c:	80 17       	cp	r24, r16
    202e:	91 07       	cpc	r25, r17
    2030:	11 f4       	brne	.+4      	; 0x2036 <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    2032:	80 e1       	ldi	r24, 0x10	; 16
    2034:	dd cf       	rjmp	.-70     	; 0x1ff0 <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    2036:	88 19       	sub	r24, r8
    2038:	99 09       	sbc	r25, r9
    203a:	f5 01       	movw	r30, r10
    203c:	80 83       	st	Z, r24
    203e:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    2040:	c7 01       	movw	r24, r14
    2042:	b6 01       	movw	r22, r12
    2044:	0e 94 cf 44 	call	0x899e	; 0x899e <trunc>
    2048:	9b 01       	movw	r18, r22
    204a:	ac 01       	movw	r20, r24
    204c:	c7 01       	movw	r24, r14
    204e:	b6 01       	movw	r22, r12
    2050:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    2054:	d2 01       	movw	r26, r4
    2056:	6d 93       	st	X+, r22
    2058:	7d 93       	st	X+, r23
    205a:	8d 93       	st	X+, r24
    205c:	9c 93       	st	X, r25
    205e:	13 97       	sbiw	r26, 0x03	; 3
    2060:	21 e0       	ldi	r18, 0x01	; 1
    2062:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    2064:	c9 01       	movw	r24, r18
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	1f 91       	pop	r17
    2070:	0f 91       	pop	r16
    2072:	ff 90       	pop	r15
    2074:	ef 90       	pop	r14
    2076:	df 90       	pop	r13
    2078:	cf 90       	pop	r12
    207a:	bf 90       	pop	r11
    207c:	af 90       	pop	r10
    207e:	9f 90       	pop	r9
    2080:	8f 90       	pop	r8
    2082:	7f 90       	pop	r7
    2084:	6f 90       	pop	r6
    2086:	5f 90       	pop	r5
    2088:	4f 90       	pop	r4
    208a:	08 95       	ret

0000208c <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    208c:	af 92       	push	r10
    208e:	bf 92       	push	r11
    2090:	cf 92       	push	r12
    2092:	df 92       	push	r13
    2094:	ef 92       	push	r14
    2096:	ff 92       	push	r15
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	79 01       	movw	r14, r18
    209e:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    20a0:	5f 77       	andi	r21, 0x7F	; 127
    20a2:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    20a6:	0e 94 24 41 	call	0x8248	; 0x8248 <atan>
    20aa:	5b 01       	movw	r10, r22
    20ac:	6c 01       	movw	r12, r24

	if (y>0) {
    20ae:	c8 01       	movw	r24, r16
    20b0:	b7 01       	movw	r22, r14
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	50 e0       	ldi	r21, 0x00	; 0
    20ba:	0e 94 4f 43 	call	0x869e	; 0x869e <__gesf2>
    20be:	18 16       	cp	r1, r24
    20c0:	cc f0       	brlt	.+50     	; 0x20f4 <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    20c2:	c6 01       	movw	r24, r12
    20c4:	b5 01       	movw	r22, r10
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	40 e0       	ldi	r20, 0x00	; 0
    20cc:	50 e0       	ldi	r21, 0x00	; 0
    20ce:	0e 94 4f 43 	call	0x869e	; 0x869e <__gesf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	2c f4       	brge	.+10     	; 0x20e0 <theta+0x54>
	    {
			return(M_PI-theta);
    20d6:	6b ed       	ldi	r22, 0xDB	; 219
    20d8:	7f e0       	ldi	r23, 0x0F	; 15
    20da:	89 e4       	ldi	r24, 0x49	; 73
    20dc:	90 e4       	ldi	r25, 0x40	; 64
    20de:	04 c0       	rjmp	.+8      	; 0x20e8 <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    20e0:	6b ed       	ldi	r22, 0xDB	; 219
    20e2:	7f e0       	ldi	r23, 0x0F	; 15
    20e4:	89 e4       	ldi	r24, 0x49	; 73
    20e6:	90 ec       	ldi	r25, 0xC0	; 192
    20e8:	a6 01       	movw	r20, r12
    20ea:	95 01       	movw	r18, r10
    20ec:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    20f0:	5b 01       	movw	r10, r22
    20f2:	6c 01       	movw	r12, r24
		}
	}
}
    20f4:	b5 01       	movw	r22, r10
    20f6:	c6 01       	movw	r24, r12
    20f8:	1f 91       	pop	r17
    20fa:	0f 91       	pop	r16
    20fc:	ff 90       	pop	r15
    20fe:	ef 90       	pop	r14
    2100:	df 90       	pop	r13
    2102:	cf 90       	pop	r12
    2104:	bf 90       	pop	r11
    2106:	af 90       	pop	r10
    2108:	08 95       	ret

0000210a <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    210a:	2f 92       	push	r2
    210c:	3f 92       	push	r3
    210e:	4f 92       	push	r4
    2110:	5f 92       	push	r5
    2112:	6f 92       	push	r6
    2114:	7f 92       	push	r7
    2116:	8f 92       	push	r8
    2118:	9f 92       	push	r9
    211a:	af 92       	push	r10
    211c:	bf 92       	push	r11
    211e:	cf 92       	push	r12
    2120:	df 92       	push	r13
    2122:	ef 92       	push	r14
    2124:	ff 92       	push	r15
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	68 97       	sbiw	r28, 0x18	; 24
    2134:	cd bf       	out	0x3d, r28	; 61
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    213a:	19 82       	std	Y+1, r1	; 0x01
    213c:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    213e:	ea e3       	ldi	r30, 0x3A	; 58
    2140:	f1 e2       	ldi	r31, 0x21	; 33
    2142:	8c e0       	ldi	r24, 0x0C	; 12
    2144:	df 01       	movw	r26, r30
    2146:	28 2f       	mov	r18, r24
    2148:	1d 92       	st	X+, r1
    214a:	2a 95       	dec	r18
    214c:	e9 f7       	brne	.-6      	; 0x2148 <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    214e:	3c 96       	adiw	r30, 0x0c	; 12
    2150:	df 01       	movw	r26, r30
    2152:	1d 92       	st	X+, r1
    2154:	8a 95       	dec	r24
    2156:	e9 f7       	brne	.-6      	; 0x2152 <gc_execute_block+0x48>

	gc.status = TG_OK;
    2158:	10 92 00 21 	sts	0x2100, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    215c:	10 92 11 21 	sts	0x2111, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2160:	5e 01       	movw	r10, r28
    2162:	08 94       	sec
    2164:	a1 1c       	adc	r10, r1
    2166:	b1 1c       	adc	r11, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    2168:	ff 24       	eor	r15, r15
    216a:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    216c:	be e0       	ldi	r27, 0x0E	; 14
    216e:	cb 2e       	mov	r12, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2170:	a2 e0       	ldi	r26, 0x02	; 2
    2172:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    2174:	77 24       	eor	r7, r7
    2176:	7a 94       	dec	r7

					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    2178:	f3 e0       	ldi	r31, 0x03	; 3
    217a:	df 2e       	mov	r13, r31

					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    217c:	e4 e0       	ldi	r30, 0x04	; 4
    217e:	6e 2e       	mov	r6, r30
    2180:	0a c1       	rjmp	.+532    	; 0x2396 <gc_execute_block+0x28c>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    2182:	80 91 01 21 	lds	r24, 0x2101
    2186:	8d 34       	cpi	r24, 0x4D	; 77
    2188:	09 f4       	brne	.+2      	; 0x218c <gc_execute_block+0x82>
    218a:	be c0       	rjmp	.+380    	; 0x2308 <gc_execute_block+0x1fe>
    218c:	84 35       	cpi	r24, 0x54	; 84
    218e:	09 f4       	brne	.+2      	; 0x2192 <gc_execute_block+0x88>
    2190:	f0 c0       	rjmp	.+480    	; 0x2372 <gc_execute_block+0x268>
    2192:	87 34       	cpi	r24, 0x47	; 71
    2194:	09 f0       	breq	.+2      	; 0x2198 <gc_execute_block+0x8e>
    2196:	fb c0       	rjmp	.+502    	; 0x238e <gc_execute_block+0x284>
			case 'G':
				switch((int)gc.value) {
    2198:	60 91 02 21 	lds	r22, 0x2102
    219c:	70 91 03 21 	lds	r23, 0x2103
    21a0:	80 91 04 21 	lds	r24, 0x2104
    21a4:	90 91 05 21 	lds	r25, 0x2105
    21a8:	0e 94 ce 41 	call	0x839c	; 0x839c <__fixsfsi>
    21ac:	65 31       	cpi	r22, 0x15	; 21
    21ae:	71 05       	cpc	r23, r1
    21b0:	09 f4       	brne	.+2      	; 0x21b4 <gc_execute_block+0xaa>
    21b2:	8f c0       	rjmp	.+286    	; 0x22d2 <gc_execute_block+0x1c8>
    21b4:	66 31       	cpi	r22, 0x16	; 22
    21b6:	71 05       	cpc	r23, r1
    21b8:	84 f5       	brge	.+96     	; 0x221a <gc_execute_block+0x110>
    21ba:	64 30       	cpi	r22, 0x04	; 4
    21bc:	71 05       	cpc	r23, r1
    21be:	09 f4       	brne	.+2      	; 0x21c2 <gc_execute_block+0xb8>
    21c0:	6d c0       	rjmp	.+218    	; 0x229c <gc_execute_block+0x192>
    21c2:	65 30       	cpi	r22, 0x05	; 5
    21c4:	71 05       	cpc	r23, r1
    21c6:	a4 f4       	brge	.+40     	; 0x21f0 <gc_execute_block+0xe6>
    21c8:	61 30       	cpi	r22, 0x01	; 1
    21ca:	71 05       	cpc	r23, r1
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <gc_execute_block+0xc6>
    21ce:	57 c0       	rjmp	.+174    	; 0x227e <gc_execute_block+0x174>
    21d0:	62 30       	cpi	r22, 0x02	; 2
    21d2:	71 05       	cpc	r23, r1
    21d4:	24 f4       	brge	.+8      	; 0x21de <gc_execute_block+0xd4>
    21d6:	67 2b       	or	r22, r23
    21d8:	09 f4       	brne	.+2      	; 0x21dc <gc_execute_block+0xd2>
    21da:	4c c0       	rjmp	.+152    	; 0x2274 <gc_execute_block+0x16a>
    21dc:	c7 c0       	rjmp	.+398    	; 0x236c <gc_execute_block+0x262>
    21de:	62 30       	cpi	r22, 0x02	; 2
    21e0:	71 05       	cpc	r23, r1
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <gc_execute_block+0xdc>
    21e4:	51 c0       	rjmp	.+162    	; 0x2288 <gc_execute_block+0x17e>
    21e6:	63 30       	cpi	r22, 0x03	; 3
    21e8:	71 05       	cpc	r23, r1
    21ea:	09 f0       	breq	.+2      	; 0x21ee <gc_execute_block+0xe4>
    21ec:	bf c0       	rjmp	.+382    	; 0x236c <gc_execute_block+0x262>
    21ee:	51 c0       	rjmp	.+162    	; 0x2292 <gc_execute_block+0x188>
    21f0:	62 31       	cpi	r22, 0x12	; 18
    21f2:	71 05       	cpc	r23, r1
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <gc_execute_block+0xee>
    21f6:	5c c0       	rjmp	.+184    	; 0x22b0 <gc_execute_block+0x1a6>
    21f8:	63 31       	cpi	r22, 0x13	; 19
    21fa:	71 05       	cpc	r23, r1
    21fc:	2c f4       	brge	.+10     	; 0x2208 <gc_execute_block+0xfe>
    21fe:	61 31       	cpi	r22, 0x11	; 17
    2200:	71 05       	cpc	r23, r1
    2202:	09 f0       	breq	.+2      	; 0x2206 <gc_execute_block+0xfc>
    2204:	b3 c0       	rjmp	.+358    	; 0x236c <gc_execute_block+0x262>
    2206:	4d c0       	rjmp	.+154    	; 0x22a2 <gc_execute_block+0x198>
    2208:	63 31       	cpi	r22, 0x13	; 19
    220a:	71 05       	cpc	r23, r1
    220c:	09 f4       	brne	.+2      	; 0x2210 <gc_execute_block+0x106>
    220e:	57 c0       	rjmp	.+174    	; 0x22be <gc_execute_block+0x1b4>
    2210:	64 31       	cpi	r22, 0x14	; 20
    2212:	71 05       	cpc	r23, r1
    2214:	09 f0       	breq	.+2      	; 0x2218 <gc_execute_block+0x10e>
    2216:	aa c0       	rjmp	.+340    	; 0x236c <gc_execute_block+0x262>
    2218:	59 c0       	rjmp	.+178    	; 0x22cc <gc_execute_block+0x1c2>
    221a:	6a 35       	cpi	r22, 0x5A	; 90
    221c:	71 05       	cpc	r23, r1
    221e:	09 f4       	brne	.+2      	; 0x2222 <gc_execute_block+0x118>
    2220:	64 c0       	rjmp	.+200    	; 0x22ea <gc_execute_block+0x1e0>
    2222:	6b 35       	cpi	r22, 0x5B	; 91
    2224:	71 05       	cpc	r23, r1
    2226:	ac f4       	brge	.+42     	; 0x2252 <gc_execute_block+0x148>
    2228:	6e 31       	cpi	r22, 0x1E	; 30
    222a:	71 05       	cpc	r23, r1
    222c:	09 f4       	brne	.+2      	; 0x2230 <gc_execute_block+0x126>
    222e:	54 c0       	rjmp	.+168    	; 0x22d8 <gc_execute_block+0x1ce>
    2230:	6f 31       	cpi	r22, 0x1F	; 31
    2232:	71 05       	cpc	r23, r1
    2234:	2c f4       	brge	.+10     	; 0x2240 <gc_execute_block+0x136>
    2236:	6c 31       	cpi	r22, 0x1C	; 28
    2238:	71 05       	cpc	r23, r1
    223a:	09 f0       	breq	.+2      	; 0x223e <gc_execute_block+0x134>
    223c:	97 c0       	rjmp	.+302    	; 0x236c <gc_execute_block+0x262>
    223e:	4c c0       	rjmp	.+152    	; 0x22d8 <gc_execute_block+0x1ce>
    2240:	65 33       	cpi	r22, 0x35	; 53
    2242:	71 05       	cpc	r23, r1
    2244:	09 f4       	brne	.+2      	; 0x2248 <gc_execute_block+0x13e>
    2246:	4b c0       	rjmp	.+150    	; 0x22de <gc_execute_block+0x1d4>
    2248:	60 35       	cpi	r22, 0x50	; 80
    224a:	71 05       	cpc	r23, r1
    224c:	09 f0       	breq	.+2      	; 0x2250 <gc_execute_block+0x146>
    224e:	8e c0       	rjmp	.+284    	; 0x236c <gc_execute_block+0x262>
    2250:	49 c0       	rjmp	.+146    	; 0x22e4 <gc_execute_block+0x1da>
    2252:	6c 35       	cpi	r22, 0x5C	; 92
    2254:	71 05       	cpc	r23, r1
    2256:	09 f4       	brne	.+2      	; 0x225a <gc_execute_block+0x150>
    2258:	4e c0       	rjmp	.+156    	; 0x22f6 <gc_execute_block+0x1ec>
    225a:	6c 35       	cpi	r22, 0x5C	; 92
    225c:	71 05       	cpc	r23, r1
    225e:	0c f4       	brge	.+2      	; 0x2262 <gc_execute_block+0x158>
    2260:	47 c0       	rjmp	.+142    	; 0x22f0 <gc_execute_block+0x1e6>
    2262:	6d 35       	cpi	r22, 0x5D	; 93
    2264:	71 05       	cpc	r23, r1
    2266:	09 f4       	brne	.+2      	; 0x226a <gc_execute_block+0x160>
    2268:	49 c0       	rjmp	.+146    	; 0x22fc <gc_execute_block+0x1f2>
    226a:	6e 35       	cpi	r22, 0x5E	; 94
    226c:	71 05       	cpc	r23, r1
    226e:	09 f0       	breq	.+2      	; 0x2272 <gc_execute_block+0x168>
    2270:	7d c0       	rjmp	.+250    	; 0x236c <gc_execute_block+0x262>
    2272:	47 c0       	rjmp	.+142    	; 0x2302 <gc_execute_block+0x1f8>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    2274:	f0 92 0a 21 	sts	0x210A, r15
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    2278:	10 92 0c 21 	sts	0x210C, r1
    227c:	88 c0       	rjmp	.+272    	; 0x238e <gc_execute_block+0x284>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    227e:	f0 92 0a 21 	sts	0x210A, r15
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    2282:	f0 92 0c 21 	sts	0x210C, r15
    2286:	83 c0       	rjmp	.+262    	; 0x238e <gc_execute_block+0x284>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    2288:	f0 92 0a 21 	sts	0x210A, r15
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    228c:	e0 92 0c 21 	sts	0x210C, r14
    2290:	7e c0       	rjmp	.+252    	; 0x238e <gc_execute_block+0x284>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    2292:	f0 92 0a 21 	sts	0x210A, r15
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    2296:	d0 92 0c 21 	sts	0x210C, r13
    229a:	79 c0       	rjmp	.+242    	; 0x238e <gc_execute_block+0x284>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    229c:	e0 92 0a 21 	sts	0x210A, r14
    22a0:	76 c0       	rjmp	.+236    	; 0x238e <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22a2:	10 92 13 21 	sts	0x2113, r1
	gc.plane_axis_1 = axis_1;
    22a6:	f0 92 14 21 	sts	0x2114, r15
	gc.plane_axis_2 = axis_2;
    22aa:	e0 92 15 21 	sts	0x2115, r14
    22ae:	6f c0       	rjmp	.+222    	; 0x238e <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22b0:	10 92 13 21 	sts	0x2113, r1
	gc.plane_axis_1 = axis_1;
    22b4:	e0 92 14 21 	sts	0x2114, r14
	gc.plane_axis_2 = axis_2;
    22b8:	f0 92 15 21 	sts	0x2115, r15
    22bc:	68 c0       	rjmp	.+208    	; 0x238e <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22be:	f0 92 13 21 	sts	0x2113, r15
	gc.plane_axis_1 = axis_1;
    22c2:	e0 92 14 21 	sts	0x2114, r14
	gc.plane_axis_2 = axis_2;
    22c6:	10 92 15 21 	sts	0x2115, r1
    22ca:	61 c0       	rjmp	.+194    	; 0x238e <gc_execute_block+0x284>

					case 17: { select_plane(X, Y, Z); break; }
					case 18: { select_plane(X, Z, Y); break; }
					case 19: { select_plane(Y, Z, X); break; }

					case 20: { gc.inches_mode = TRUE; break; }
    22cc:	f0 92 0e 21 	sts	0x210E, r15
    22d0:	5e c0       	rjmp	.+188    	; 0x238e <gc_execute_block+0x284>
					case 21: { gc.inches_mode = FALSE; break; }
    22d2:	10 92 0e 21 	sts	0x210E, r1
    22d6:	5b c0       	rjmp	.+182    	; 0x238e <gc_execute_block+0x284>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    22d8:	d0 92 0a 21 	sts	0x210A, r13
    22dc:	58 c0       	rjmp	.+176    	; 0x238e <gc_execute_block+0x284>

					case 53: { gc.absolute_override = TRUE; break; }
    22de:	f0 92 12 21 	sts	0x2112, r15
    22e2:	55 c0       	rjmp	.+170    	; 0x238e <gc_execute_block+0x284>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    22e4:	60 92 0c 21 	sts	0x210C, r6
    22e8:	52 c0       	rjmp	.+164    	; 0x238e <gc_execute_block+0x284>
					case 90: { gc.absolute_mode = TRUE; break; }
    22ea:	f0 92 0f 21 	sts	0x210F, r15
    22ee:	4f c0       	rjmp	.+158    	; 0x238e <gc_execute_block+0x284>
					case 91: { gc.absolute_mode = FALSE; break; }
    22f0:	10 92 0f 21 	sts	0x210F, r1
    22f4:	4c c0       	rjmp	.+152    	; 0x238e <gc_execute_block+0x284>
					case 92: { gc.set_origin_mode = TRUE; break; }
    22f6:	f0 92 11 21 	sts	0x2111, r15
    22fa:	49 c0       	rjmp	.+146    	; 0x238e <gc_execute_block+0x284>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    22fc:	f0 92 0d 21 	sts	0x210D, r15
    2300:	46 c0       	rjmp	.+140    	; 0x238e <gc_execute_block+0x284>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    2302:	10 92 0d 21 	sts	0x210D, r1
    2306:	43 c0       	rjmp	.+134    	; 0x238e <gc_execute_block+0x284>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    2308:	60 91 02 21 	lds	r22, 0x2102
    230c:	70 91 03 21 	lds	r23, 0x2103
    2310:	80 91 04 21 	lds	r24, 0x2104
    2314:	90 91 05 21 	lds	r25, 0x2105
    2318:	0e 94 ce 41 	call	0x839c	; 0x839c <__fixsfsi>
    231c:	63 30       	cpi	r22, 0x03	; 3
    231e:	71 05       	cpc	r23, r1
    2320:	e1 f0       	breq	.+56     	; 0x235a <gc_execute_block+0x250>
    2322:	64 30       	cpi	r22, 0x04	; 4
    2324:	71 05       	cpc	r23, r1
    2326:	34 f4       	brge	.+12     	; 0x2334 <gc_execute_block+0x22a>
    2328:	77 fd       	sbrc	r23, 7
    232a:	20 c0       	rjmp	.+64     	; 0x236c <gc_execute_block+0x262>
    232c:	62 30       	cpi	r22, 0x02	; 2
    232e:	71 05       	cpc	r23, r1
    2330:	74 f0       	brlt	.+28     	; 0x234e <gc_execute_block+0x244>
    2332:	10 c0       	rjmp	.+32     	; 0x2354 <gc_execute_block+0x24a>
    2334:	65 30       	cpi	r22, 0x05	; 5
    2336:	71 05       	cpc	r23, r1
    2338:	b1 f0       	breq	.+44     	; 0x2366 <gc_execute_block+0x25c>
    233a:	65 30       	cpi	r22, 0x05	; 5
    233c:	71 05       	cpc	r23, r1
    233e:	84 f0       	brlt	.+32     	; 0x2360 <gc_execute_block+0x256>
    2340:	6e 31       	cpi	r22, 0x1E	; 30
    2342:	71 05       	cpc	r23, r1
    2344:	39 f0       	breq	.+14     	; 0x2354 <gc_execute_block+0x24a>
    2346:	6c 33       	cpi	r22, 0x3C	; 60
    2348:	71 05       	cpc	r23, r1
    234a:	81 f4       	brne	.+32     	; 0x236c <gc_execute_block+0x262>
    234c:	03 c0       	rjmp	.+6      	; 0x2354 <gc_execute_block+0x24a>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    234e:	f0 92 0b 21 	sts	0x210B, r15
    2352:	1d c0       	rjmp	.+58     	; 0x238e <gc_execute_block+0x284>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2354:	e0 92 0b 21 	sts	0x210B, r14
    2358:	1a c0       	rjmp	.+52     	; 0x238e <gc_execute_block+0x284>
					case 3: gc.spindle_direction = 1; break;
    235a:	f0 92 53 21 	sts	0x2153, r15
    235e:	17 c0       	rjmp	.+46     	; 0x238e <gc_execute_block+0x284>
					case 4: gc.spindle_direction = -1; break;
    2360:	70 92 53 21 	sts	0x2153, r7
    2364:	14 c0       	rjmp	.+40     	; 0x238e <gc_execute_block+0x284>
					case 5: gc.spindle_direction = 0; break;
    2366:	10 92 53 21 	sts	0x2153, r1
    236a:	11 c0       	rjmp	.+34     	; 0x238e <gc_execute_block+0x284>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    236c:	c0 92 00 21 	sts	0x2100, r12
    2370:	0e c0       	rjmp	.+28     	; 0x238e <gc_execute_block+0x284>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    2372:	60 91 02 21 	lds	r22, 0x2102
    2376:	70 91 03 21 	lds	r23, 0x2103
    237a:	80 91 04 21 	lds	r24, 0x2104
    237e:	90 91 05 21 	lds	r25, 0x2105
    2382:	0e 94 cf 44 	call	0x899e	; 0x899e <trunc>
    2386:	0e 94 d3 41 	call	0x83a6	; 0x83a6 <__fixunssfsi>
    238a:	60 93 52 21 	sts	0x2152, r22
		}
		if(gc.status) {
    238e:	80 91 00 21 	lds	r24, 0x2100
    2392:	88 23       	and	r24, r24
    2394:	69 f4       	brne	.+26     	; 0x23b0 <gc_execute_block+0x2a6>

	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	91 e2       	ldi	r25, 0x21	; 33
    239a:	62 e0       	ldi	r22, 0x02	; 2
    239c:	71 e2       	ldi	r23, 0x21	; 33
    239e:	46 e0       	ldi	r20, 0x06	; 6
    23a0:	51 e2       	ldi	r21, 0x21	; 33
    23a2:	94 01       	movw	r18, r8
    23a4:	85 01       	movw	r16, r10
    23a6:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_gc_next_statement>
    23aa:	89 2b       	or	r24, r25
    23ac:	09 f0       	breq	.+2      	; 0x23b0 <gc_execute_block+0x2a6>
    23ae:	e9 ce       	rjmp	.-558    	; 0x2182 <gc_execute_block+0x78>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    23b0:	80 91 00 21 	lds	r24, 0x2100
    23b4:	88 23       	and	r24, r24
    23b6:	09 f0       	breq	.+2      	; 0x23ba <gc_execute_block+0x2b0>
    23b8:	99 c3       	rjmp	.+1842   	; 0x2aec <gc_execute_block+0x9e2>
		return(gc.status); 
	}

	i = 0;
    23ba:	19 82       	std	Y+1, r1	; 0x01
    23bc:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    23be:	e6 e4       	ldi	r30, 0x46	; 70
    23c0:	f1 e2       	ldi	r31, 0x21	; 33
    23c2:	8c e0       	ldi	r24, 0x0C	; 12
    23c4:	df 01       	movw	r26, r30
    23c6:	1d 92       	st	X+, r1
    23c8:	8a 95       	dec	r24
    23ca:	e9 f7       	brne	.-6      	; 0x23c6 <gc_execute_block+0x2bc>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    23cc:	df 01       	movw	r26, r30
    23ce:	1c 97       	sbiw	r26, 0x0c	; 12
    23d0:	78 97       	sbiw	r30, 0x18	; 24
    23d2:	8c e0       	ldi	r24, 0x0C	; 12
    23d4:	01 90       	ld	r0, Z+
    23d6:	0d 92       	st	X+, r0
    23d8:	81 50       	subi	r24, 0x01	; 1
    23da:	e1 f7       	brne	.-8      	; 0x23d4 <gc_execute_block+0x2ca>
    23dc:	c6 c0       	rjmp	.+396    	; 0x256a <gc_execute_block+0x460>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    23de:	c0 90 02 21 	lds	r12, 0x2102
    23e2:	d0 90 03 21 	lds	r13, 0x2103
    23e6:	e0 90 04 21 	lds	r14, 0x2104
    23ea:	f0 90 05 21 	lds	r15, 0x2105
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    23ee:	80 91 0e 21 	lds	r24, 0x210E
    23f2:	88 23       	and	r24, r24
    23f4:	19 f4       	brne	.+6      	; 0x23fc <gc_execute_block+0x2f2>
    23f6:	a7 01       	movw	r20, r14
    23f8:	96 01       	movw	r18, r12
    23fa:	0a c0       	rjmp	.+20     	; 0x2410 <gc_execute_block+0x306>
    23fc:	c7 01       	movw	r24, r14
    23fe:	b6 01       	movw	r22, r12
    2400:	25 e8       	ldi	r18, 0x85	; 133
    2402:	32 e4       	ldi	r19, 0x42	; 66
    2404:	41 e2       	ldi	r20, 0x21	; 33
    2406:	5d e3       	ldi	r21, 0x3D	; 61
    2408:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    240c:	9b 01       	movw	r18, r22
    240e:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2410:	20 93 26 21 	sts	0x2126, r18
    2414:	30 93 27 21 	sts	0x2127, r19
    2418:	40 93 28 21 	sts	0x2128, r20
    241c:	50 93 29 21 	sts	0x2129, r21
		switch(gc.letter) {
    2420:	00 91 01 21 	lds	r16, 0x2101
    2424:	00 35       	cpi	r16, 0x50	; 80
    2426:	09 f4       	brne	.+2      	; 0x242a <gc_execute_block+0x320>
    2428:	47 c0       	rjmp	.+142    	; 0x24b8 <gc_execute_block+0x3ae>
    242a:	01 35       	cpi	r16, 0x51	; 81
    242c:	58 f4       	brcc	.+22     	; 0x2444 <gc_execute_block+0x33a>
    242e:	06 34       	cpi	r16, 0x46	; 70
    2430:	c1 f0       	breq	.+48     	; 0x2462 <gc_execute_block+0x358>
    2432:	06 34       	cpi	r16, 0x46	; 70
    2434:	08 f4       	brcc	.+2      	; 0x2438 <gc_execute_block+0x32e>
    2436:	9f c0       	rjmp	.+318    	; 0x2576 <gc_execute_block+0x46c>
    2438:	80 2f       	mov	r24, r16
    243a:	89 54       	subi	r24, 0x49	; 73
    243c:	83 30       	cpi	r24, 0x03	; 3
    243e:	08 f0       	brcs	.+2      	; 0x2442 <gc_execute_block+0x338>
    2440:	9a c0       	rjmp	.+308    	; 0x2576 <gc_execute_block+0x46c>
    2442:	2d c0       	rjmp	.+90     	; 0x249e <gc_execute_block+0x394>
    2444:	03 35       	cpi	r16, 0x53	; 83
    2446:	09 f4       	brne	.+2      	; 0x244a <gc_execute_block+0x340>
    2448:	4b c0       	rjmp	.+150    	; 0x24e0 <gc_execute_block+0x3d6>
    244a:	04 35       	cpi	r16, 0x54	; 84
    244c:	20 f4       	brcc	.+8      	; 0x2456 <gc_execute_block+0x34c>
    244e:	02 35       	cpi	r16, 0x52	; 82
    2450:	09 f0       	breq	.+2      	; 0x2454 <gc_execute_block+0x34a>
    2452:	91 c0       	rjmp	.+290    	; 0x2576 <gc_execute_block+0x46c>
    2454:	3a c0       	rjmp	.+116    	; 0x24ca <gc_execute_block+0x3c0>
    2456:	80 2f       	mov	r24, r16
    2458:	88 55       	subi	r24, 0x58	; 88
    245a:	83 30       	cpi	r24, 0x03	; 3
    245c:	08 f0       	brcs	.+2      	; 0x2460 <gc_execute_block+0x356>
    245e:	8b c0       	rjmp	.+278    	; 0x2576 <gc_execute_block+0x46c>
    2460:	48 c0       	rjmp	.+144    	; 0x24f2 <gc_execute_block+0x3e8>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    2462:	80 91 0d 21 	lds	r24, 0x210D
    2466:	88 23       	and	r24, r24
    2468:	49 f0       	breq	.+18     	; 0x247c <gc_execute_block+0x372>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    246a:	20 93 2a 21 	sts	0x212A, r18
    246e:	30 93 2b 21 	sts	0x212B, r19
    2472:	40 93 2c 21 	sts	0x212C, r20
    2476:	50 93 2d 21 	sts	0x212D, r21
    247a:	7d c0       	rjmp	.+250    	; 0x2576 <gc_execute_block+0x46c>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    247c:	ca 01       	movw	r24, r20
    247e:	b9 01       	movw	r22, r18
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e7       	ldi	r20, 0x70	; 112
    2486:	52 e4       	ldi	r21, 0x42	; 66
    2488:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    248c:	60 93 1e 21 	sts	0x211E, r22
    2490:	70 93 1f 21 	sts	0x211F, r23
    2494:	80 93 20 21 	sts	0x2120, r24
    2498:	90 93 21 21 	sts	0x2121, r25
    249c:	6c c0       	rjmp	.+216    	; 0x2576 <gc_execute_block+0x46c>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    249e:	e0 2f       	mov	r30, r16
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	ee 0f       	add	r30, r30
    24a4:	ff 1f       	adc	r31, r31
    24a6:	ee 0f       	add	r30, r30
    24a8:	ff 1f       	adc	r31, r31
    24aa:	ee 5d       	subi	r30, 0xDE	; 222
    24ac:	ff 4d       	sbci	r31, 0xDF	; 223
    24ae:	20 83       	st	Z, r18
    24b0:	31 83       	std	Z+1, r19	; 0x01
    24b2:	42 83       	std	Z+2, r20	; 0x02
    24b4:	53 83       	std	Z+3, r21	; 0x03
    24b6:	5f c0       	rjmp	.+190    	; 0x2576 <gc_execute_block+0x46c>
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
    24b8:	c0 92 16 21 	sts	0x2116, r12
    24bc:	d0 92 17 21 	sts	0x2117, r13
    24c0:	e0 92 18 21 	sts	0x2118, r14
    24c4:	f0 92 19 21 	sts	0x2119, r15
    24c8:	56 c0       	rjmp	.+172    	; 0x2576 <gc_execute_block+0x46c>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    24ca:	20 93 1a 21 	sts	0x211A, r18
    24ce:	30 93 1b 21 	sts	0x211B, r19
    24d2:	40 93 1c 21 	sts	0x211C, r20
    24d6:	50 93 1d 21 	sts	0x211D, r21
    24da:	70 92 10 21 	sts	0x2110, r7
    24de:	4b c0       	rjmp	.+150    	; 0x2576 <gc_execute_block+0x46c>
			case 'S': gc.spindle_speed = gc.value; break;
    24e0:	c7 01       	movw	r24, r14
    24e2:	b6 01       	movw	r22, r12
    24e4:	0e 94 ce 41 	call	0x839c	; 0x839c <__fixsfsi>
    24e8:	60 93 54 21 	sts	0x2154, r22
    24ec:	70 93 55 21 	sts	0x2155, r23
    24f0:	42 c0       	rjmp	.+132    	; 0x2576 <gc_execute_block+0x46c>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    24f2:	80 91 11 21 	lds	r24, 0x2111
    24f6:	88 23       	and	r24, r24
    24f8:	69 f0       	breq	.+26     	; 0x2514 <gc_execute_block+0x40a>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    24fa:	e0 2f       	mov	r30, r16
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	ee 0f       	add	r30, r30
    2500:	ff 1f       	adc	r31, r31
    2502:	ee 0f       	add	r30, r30
    2504:	ff 1f       	adc	r31, r31
    2506:	e0 56       	subi	r30, 0x60	; 96
    2508:	f0 4e       	sbci	r31, 0xE0	; 224
    250a:	26 a7       	std	Z+46, r18	; 0x2e
    250c:	37 a7       	std	Z+47, r19	; 0x2f
    250e:	40 ab       	std	Z+48, r20	; 0x30
    2510:	51 ab       	std	Z+49, r21	; 0x31
    2512:	31 c0       	rjmp	.+98     	; 0x2576 <gc_execute_block+0x46c>
				} else if (gc.absolute_mode || gc.absolute_override) {
    2514:	80 91 0f 21 	lds	r24, 0x210F
    2518:	88 23       	and	r24, r24
    251a:	21 f4       	brne	.+8      	; 0x2524 <gc_execute_block+0x41a>
    251c:	80 91 12 21 	lds	r24, 0x2112
    2520:	88 23       	and	r24, r24
    2522:	69 f0       	breq	.+26     	; 0x253e <gc_execute_block+0x434>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    2524:	e0 2f       	mov	r30, r16
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	ee 0f       	add	r30, r30
    252a:	ff 1f       	adc	r31, r31
    252c:	ee 0f       	add	r30, r30
    252e:	ff 1f       	adc	r31, r31
    2530:	e0 56       	subi	r30, 0x60	; 96
    2532:	f0 4e       	sbci	r31, 0xE0	; 224
    2534:	22 af       	std	Z+58, r18	; 0x3a
    2536:	33 af       	std	Z+59, r19	; 0x3b
    2538:	44 af       	std	Z+60, r20	; 0x3c
    253a:	55 af       	std	Z+61, r21	; 0x3d
    253c:	1c c0       	rjmp	.+56     	; 0x2576 <gc_execute_block+0x46c>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    253e:	10 e0       	ldi	r17, 0x00	; 0
    2540:	00 0f       	add	r16, r16
    2542:	11 1f       	adc	r17, r17
    2544:	00 0f       	add	r16, r16
    2546:	11 1f       	adc	r17, r17
    2548:	00 56       	subi	r16, 0x60	; 96
    254a:	10 4e       	sbci	r17, 0xE0	; 224
    254c:	f8 01       	movw	r30, r16
    254e:	62 ad       	ldd	r22, Z+58	; 0x3a
    2550:	73 ad       	ldd	r23, Z+59	; 0x3b
    2552:	84 ad       	ldd	r24, Z+60	; 0x3c
    2554:	95 ad       	ldd	r25, Z+61	; 0x3d
    2556:	0e 94 c0 40 	call	0x8180	; 0x8180 <__addsf3>
    255a:	d8 01       	movw	r26, r16
    255c:	da 96       	adiw	r26, 0x3a	; 58
    255e:	6d 93       	st	X+, r22
    2560:	7d 93       	st	X+, r23
    2562:	8d 93       	st	X+, r24
    2564:	9c 93       	st	X, r25
    2566:	dd 97       	sbiw	r26, 0x3d	; 61
    2568:	06 c0       	rjmp	.+12     	; 0x2576 <gc_execute_block+0x46c>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    256a:	5e 01       	movw	r10, r28
    256c:	08 94       	sec
    256e:	a1 1c       	adc	r10, r1
    2570:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    2572:	77 24       	eor	r7, r7
    2574:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	91 e2       	ldi	r25, 0x21	; 33
    257a:	62 e0       	ldi	r22, 0x02	; 2
    257c:	71 e2       	ldi	r23, 0x21	; 33
    257e:	46 e0       	ldi	r20, 0x06	; 6
    2580:	51 e2       	ldi	r21, 0x21	; 33
    2582:	94 01       	movw	r18, r8
    2584:	85 01       	movw	r16, r10
    2586:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_gc_next_statement>
    258a:	89 2b       	or	r24, r25
    258c:	09 f0       	breq	.+2      	; 0x2590 <gc_execute_block+0x486>
    258e:	27 cf       	rjmp	.-434    	; 0x23de <gc_execute_block+0x2d4>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    2590:	80 91 00 21 	lds	r24, 0x2100
    2594:	88 23       	and	r24, r24
    2596:	09 f0       	breq	.+2      	; 0x259a <gc_execute_block+0x490>
    2598:	a9 c2       	rjmp	.+1362   	; 0x2aec <gc_execute_block+0x9e2>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    259a:	80 91 53 21 	lds	r24, 0x2153
    259e:	88 23       	and	r24, r24
    25a0:	71 f0       	breq	.+28     	; 0x25be <gc_execute_block+0x4b4>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    25a2:	40 91 54 21 	lds	r20, 0x2154
    25a6:	50 91 55 21 	lds	r21, 0x2155
    25aa:	66 27       	eor	r22, r22
    25ac:	57 fd       	sbrc	r21, 7
    25ae:	60 95       	com	r22
    25b0:	76 2f       	mov	r23, r22
    25b2:	99 27       	eor	r25, r25
    25b4:	87 fd       	sbrc	r24, 7
    25b6:	90 95       	com	r25
    25b8:	0e 94 aa 23 	call	0x4754	; 0x4754 <spindle_run>
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <gc_execute_block+0x4b8>
	} else {
		spindle_stop();
    25be:	0e 94 ba 23 	call	0x4774	; 0x4774 <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    25c2:	80 91 0a 21 	lds	r24, 0x210A
    25c6:	82 30       	cpi	r24, 0x02	; 2
    25c8:	49 f0       	breq	.+18     	; 0x25dc <gc_execute_block+0x4d2>
    25ca:	83 30       	cpi	r24, 0x03	; 3
    25cc:	21 f0       	breq	.+8      	; 0x25d6 <gc_execute_block+0x4cc>
    25ce:	81 30       	cpi	r24, 0x01	; 1
    25d0:	09 f0       	breq	.+2      	; 0x25d4 <gc_execute_block+0x4ca>
    25d2:	7d c2       	rjmp	.+1274   	; 0x2ace <gc_execute_block+0x9c4>
    25d4:	0e c0       	rjmp	.+28     	; 0x25f2 <gc_execute_block+0x4e8>
		case NEXT_ACTION_DEFAULT: {				// nothing to do here
			break;
		}

		case NEXT_ACTION_GO_HOME: { 
			gc.status = mc_go_home(); 
    25d6:	0e 94 36 1b 	call	0x366c	; 0x366c <mc_go_home>
    25da:	77 c2       	rjmp	.+1262   	; 0x2aca <gc_execute_block+0x9c0>
			break;
		}

		case NEXT_ACTION_DWELL: {
			gc.status = mc_dwell(gc.dwell_time); 
    25dc:	60 91 16 21 	lds	r22, 0x2116
    25e0:	70 91 17 21 	lds	r23, 0x2117
    25e4:	80 91 18 21 	lds	r24, 0x2118
    25e8:	90 91 19 21 	lds	r25, 0x2119
    25ec:	0e 94 95 1b 	call	0x372a	; 0x372a <mc_dwell>
    25f0:	6c c2       	rjmp	.+1240   	; 0x2aca <gc_execute_block+0x9c0>
			break;
		}

		case NEXT_ACTION_MOTION: {
			switch (gc.motion_mode) {
    25f2:	b0 91 0c 21 	lds	r27, 0x210C
    25f6:	b8 8f       	std	Y+24, r27	; 0x18
    25f8:	b2 30       	cpi	r27, 0x02	; 2
    25fa:	20 f0       	brcs	.+8      	; 0x2604 <gc_execute_block+0x4fa>
    25fc:	b4 30       	cpi	r27, 0x04	; 4
    25fe:	08 f0       	brcs	.+2      	; 0x2602 <gc_execute_block+0x4f8>
    2600:	66 c2       	rjmp	.+1228   	; 0x2ace <gc_execute_block+0x9c4>
    2602:	31 c0       	rjmp	.+98     	; 0x2666 <gc_execute_block+0x55c>
				case MOTION_MODE_CANCEL: {
					break;
				}

				case MOTION_MODE_RAPID_LINEAR: case MOTION_MODE_LINEAR: {
					gc.status = mc_line(gc.target[X], gc.target[Y], gc.target[Z],
    2604:	60 91 3a 21 	lds	r22, 0x213A
    2608:	70 91 3b 21 	lds	r23, 0x213B
    260c:	80 91 3c 21 	lds	r24, 0x213C
    2610:	90 91 3d 21 	lds	r25, 0x213D
    2614:	20 91 3e 21 	lds	r18, 0x213E
    2618:	30 91 3f 21 	lds	r19, 0x213F
    261c:	40 91 40 21 	lds	r20, 0x2140
    2620:	50 91 41 21 	lds	r21, 0x2141
    2624:	e0 90 42 21 	lds	r14, 0x2142
    2628:	f0 90 43 21 	lds	r15, 0x2143
    262c:	00 91 44 21 	lds	r16, 0x2144
    2630:	10 91 45 21 	lds	r17, 0x2145
    2634:	80 90 0d 21 	lds	r8, 0x210D
    2638:	88 20       	and	r8, r8
    263a:	49 f0       	breq	.+18     	; 0x264e <gc_execute_block+0x544>
    263c:	a0 90 2a 21 	lds	r10, 0x212A
    2640:	b0 90 2b 21 	lds	r11, 0x212B
    2644:	c0 90 2c 21 	lds	r12, 0x212C
    2648:	d0 90 2d 21 	lds	r13, 0x212D
    264c:	08 c0       	rjmp	.+16     	; 0x265e <gc_execute_block+0x554>
    264e:	a0 90 1e 21 	lds	r10, 0x211E
    2652:	b0 90 1f 21 	lds	r11, 0x211F
    2656:	c0 90 20 21 	lds	r12, 0x2120
    265a:	d0 90 21 21 	lds	r13, 0x2121
    265e:	99 24       	eor	r9, r9
    2660:	0e 94 cf 1b 	call	0x379e	; 0x379e <mc_line>
    2664:	32 c2       	rjmp	.+1124   	; 0x2aca <gc_execute_block+0x9c0>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    2666:	80 91 10 21 	lds	r24, 0x2110
    266a:	88 23       	and	r24, r24
    266c:	09 f4       	brne	.+2      	; 0x2670 <gc_execute_block+0x566>
    266e:	ec c0       	rjmp	.+472    	; 0x2848 <gc_execute_block+0x73e>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    2670:	e0 91 13 21 	lds	r30, 0x2113
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	ee 0f       	add	r30, r30
    2678:	ff 1f       	adc	r31, r31
    267a:	ee 0f       	add	r30, r30
    267c:	ff 1f       	adc	r31, r31
    267e:	e0 50       	subi	r30, 0x00	; 0
    2680:	ff 4d       	sbci	r31, 0xDF	; 223
    2682:	62 ad       	ldd	r22, Z+58	; 0x3a
    2684:	73 ad       	ldd	r23, Z+59	; 0x3b
    2686:	84 ad       	ldd	r24, Z+60	; 0x3c
    2688:	95 ad       	ldd	r25, Z+61	; 0x3d
    268a:	26 a5       	ldd	r18, Z+46	; 0x2e
    268c:	37 a5       	ldd	r19, Z+47	; 0x2f
    268e:	40 a9       	ldd	r20, Z+48	; 0x30
    2690:	51 a9       	ldd	r21, Z+49	; 0x31
    2692:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    2696:	6f 83       	std	Y+7, r22	; 0x07
    2698:	78 87       	std	Y+8, r23	; 0x08
    269a:	89 87       	std	Y+9, r24	; 0x09
    269c:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    269e:	e0 91 14 21 	lds	r30, 0x2114
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	ee 0f       	add	r30, r30
    26a6:	ff 1f       	adc	r31, r31
    26a8:	ee 0f       	add	r30, r30
    26aa:	ff 1f       	adc	r31, r31
    26ac:	e0 50       	subi	r30, 0x00	; 0
    26ae:	ff 4d       	sbci	r31, 0xDF	; 223
    26b0:	62 ad       	ldd	r22, Z+58	; 0x3a
    26b2:	73 ad       	ldd	r23, Z+59	; 0x3b
    26b4:	84 ad       	ldd	r24, Z+60	; 0x3c
    26b6:	95 ad       	ldd	r25, Z+61	; 0x3d
    26b8:	26 a5       	ldd	r18, Z+46	; 0x2e
    26ba:	37 a5       	ldd	r19, Z+47	; 0x2f
    26bc:	40 a9       	ldd	r20, Z+48	; 0x30
    26be:	51 a9       	ldd	r21, Z+49	; 0x31
    26c0:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    26c4:	1b 01       	movw	r2, r22
    26c6:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    26c8:	10 92 46 21 	sts	0x2146, r1
    26cc:	10 92 47 21 	sts	0x2147, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    26d0:	60 90 1a 21 	lds	r6, 0x211A
    26d4:	70 90 1b 21 	lds	r7, 0x211B
    26d8:	80 90 1c 21 	lds	r8, 0x211C
    26dc:	90 90 1d 21 	lds	r9, 0x211D
    26e0:	c4 01       	movw	r24, r8
    26e2:	b3 01       	movw	r22, r6
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e8       	ldi	r20, 0x80	; 128
    26ea:	50 e4       	ldi	r21, 0x40	; 64
    26ec:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    26f0:	a4 01       	movw	r20, r8
    26f2:	93 01       	movw	r18, r6
    26f4:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    26f8:	5b 01       	movw	r10, r22
    26fa:	6c 01       	movw	r12, r24
    26fc:	6f 81       	ldd	r22, Y+7	; 0x07
    26fe:	78 85       	ldd	r23, Y+8	; 0x08
    2700:	89 85       	ldd	r24, Y+9	; 0x09
    2702:	9a 85       	ldd	r25, Y+10	; 0x0a
    2704:	9b 01       	movw	r18, r22
    2706:	ac 01       	movw	r20, r24
    2708:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    270c:	7b 01       	movw	r14, r22
    270e:	8c 01       	movw	r16, r24
    2710:	c2 01       	movw	r24, r4
    2712:	b1 01       	movw	r22, r2
    2714:	a2 01       	movw	r20, r4
    2716:	91 01       	movw	r18, r2
    2718:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    271c:	9b 01       	movw	r18, r22
    271e:	ac 01       	movw	r20, r24
    2720:	c8 01       	movw	r24, r16
    2722:	b7 01       	movw	r22, r14
    2724:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    2728:	9b 01       	movw	r18, r22
    272a:	ac 01       	movw	r20, r24
    272c:	c6 01       	movw	r24, r12
    272e:	b5 01       	movw	r22, r10
    2730:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    2734:	0e 94 8e 44 	call	0x891c	; 0x891c <sqrt>
    2738:	7b 01       	movw	r14, r22
    273a:	8c 01       	movw	r16, r24
    273c:	6f 81       	ldd	r22, Y+7	; 0x07
    273e:	78 85       	ldd	r23, Y+8	; 0x08
    2740:	89 85       	ldd	r24, Y+9	; 0x09
    2742:	9a 85       	ldd	r25, Y+10	; 0x0a
    2744:	a2 01       	movw	r20, r4
    2746:	91 01       	movw	r18, r2
    2748:	0e 94 5c 43 	call	0x86b8	; 0x86b8 <hypot>
    274c:	9b 01       	movw	r18, r22
    274e:	ac 01       	movw	r20, r24
    2750:	17 fb       	bst	r17, 7
    2752:	10 95       	com	r17
    2754:	17 f9       	bld	r17, 7
    2756:	10 95       	com	r17
    2758:	c8 01       	movw	r24, r16
    275a:	b7 01       	movw	r22, r14
    275c:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    2760:	7b 01       	movw	r14, r22
    2762:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    2764:	a8 01       	movw	r20, r16
    2766:	97 01       	movw	r18, r14
    2768:	0e 94 d6 44 	call	0x89ac	; 0x89ac <__unordsf2>
    276c:	88 23       	and	r24, r24
    276e:	21 f0       	breq	.+8      	; 0x2778 <gc_execute_block+0x66e>
		FAIL(TG_FLOATING_POINT_ERROR); 
    2770:	81 e1       	ldi	r24, 0x11	; 17
    2772:	80 93 00 21 	sts	0x2100, r24
    2776:	65 c0       	rjmp	.+202    	; 0x2842 <gc_execute_block+0x738>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2778:	e8 8d       	ldd	r30, Y+24	; 0x18
    277a:	e3 30       	cpi	r30, 0x03	; 3
    277c:	21 f4       	brne	.+8      	; 0x2786 <gc_execute_block+0x67c>
		h_x2_div_d = -h_x2_div_d;
    277e:	17 fb       	bst	r17, 7
    2780:	10 95       	com	r17
    2782:	17 f9       	bld	r17, 7
    2784:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    2786:	c4 01       	movw	r24, r8
    2788:	b3 01       	movw	r22, r6
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e0       	ldi	r20, 0x00	; 0
    2790:	50 e0       	ldi	r21, 0x00	; 0
    2792:	0e 94 5f 41 	call	0x82be	; 0x82be <__cmpsf2>
    2796:	88 23       	and	r24, r24
    2798:	24 f4       	brge	.+8      	; 0x27a2 <gc_execute_block+0x698>
		h_x2_div_d = -h_x2_div_d; 
    279a:	17 fb       	bst	r17, 7
    279c:	10 95       	com	r17
    279e:	17 f9       	bld	r17, 7
    27a0:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    27a2:	80 91 13 21 	lds	r24, 0x2113
    27a6:	c8 2e       	mov	r12, r24
    27a8:	dd 24       	eor	r13, r13
    27aa:	cc 0c       	add	r12, r12
    27ac:	dd 1c       	adc	r13, r13
    27ae:	cc 0c       	add	r12, r12
    27b0:	dd 1c       	adc	r13, r13
    27b2:	26 e4       	ldi	r18, 0x46	; 70
    27b4:	31 e2       	ldi	r19, 0x21	; 33
    27b6:	c2 0e       	add	r12, r18
    27b8:	d3 1e       	adc	r13, r19
    27ba:	c2 01       	movw	r24, r4
    27bc:	b1 01       	movw	r22, r2
    27be:	a8 01       	movw	r20, r16
    27c0:	97 01       	movw	r18, r14
    27c2:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    27c6:	9b 01       	movw	r18, r22
    27c8:	ac 01       	movw	r20, r24
    27ca:	6f 81       	ldd	r22, Y+7	; 0x07
    27cc:	78 85       	ldd	r23, Y+8	; 0x08
    27ce:	89 85       	ldd	r24, Y+9	; 0x09
    27d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d2:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e0       	ldi	r20, 0x00	; 0
    27dc:	5f e3       	ldi	r21, 0x3F	; 63
    27de:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    27e2:	d6 01       	movw	r26, r12
    27e4:	6d 93       	st	X+, r22
    27e6:	7d 93       	st	X+, r23
    27e8:	8d 93       	st	X+, r24
    27ea:	9c 93       	st	X, r25
    27ec:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    27ee:	80 91 14 21 	lds	r24, 0x2114
    27f2:	c8 2e       	mov	r12, r24
    27f4:	dd 24       	eor	r13, r13
    27f6:	cc 0c       	add	r12, r12
    27f8:	dd 1c       	adc	r13, r13
    27fa:	cc 0c       	add	r12, r12
    27fc:	dd 1c       	adc	r13, r13
    27fe:	e6 e4       	ldi	r30, 0x46	; 70
    2800:	f1 e2       	ldi	r31, 0x21	; 33
    2802:	ce 0e       	add	r12, r30
    2804:	df 1e       	adc	r13, r31
    2806:	6f 81       	ldd	r22, Y+7	; 0x07
    2808:	78 85       	ldd	r23, Y+8	; 0x08
    280a:	89 85       	ldd	r24, Y+9	; 0x09
    280c:	9a 85       	ldd	r25, Y+10	; 0x0a
    280e:	a8 01       	movw	r20, r16
    2810:	97 01       	movw	r18, r14
    2812:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    2816:	9b 01       	movw	r18, r22
    2818:	ac 01       	movw	r20, r24
    281a:	c2 01       	movw	r24, r4
    281c:	b1 01       	movw	r22, r2
    281e:	0e 94 c0 40 	call	0x8180	; 0x8180 <__addsf3>
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	5f e3       	ldi	r21, 0x3F	; 63
    282a:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    282e:	d6 01       	movw	r26, r12
    2830:	6d 93       	st	X+, r22
    2832:	7d 93       	st	X+, r23
    2834:	8d 93       	st	X+, r24
    2836:	9c 93       	st	X, r25
    2838:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    283a:	80 91 00 21 	lds	r24, 0x2100
    283e:	88 23       	and	r24, r24
    2840:	19 f0       	breq	.+6      	; 0x2848 <gc_execute_block+0x73e>
			return (gc.status);
    2842:	80 91 00 21 	lds	r24, 0x2100
    2846:	41 c1       	rjmp	.+642    	; 0x2aca <gc_execute_block+0x9c0>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    2848:	e0 91 13 21 	lds	r30, 0x2113
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	ee 0f       	add	r30, r30
    2850:	ff 1f       	adc	r31, r31
    2852:	ee 0f       	add	r30, r30
    2854:	ff 1f       	adc	r31, r31
    2856:	ea 5b       	subi	r30, 0xBA	; 186
    2858:	fe 4d       	sbci	r31, 0xDE	; 222
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	90 58       	subi	r25, 0x80	; 128
    2864:	e0 91 14 21 	lds	r30, 0x2114
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	ee 0f       	add	r30, r30
    286c:	ff 1f       	adc	r31, r31
    286e:	ee 0f       	add	r30, r30
    2870:	ff 1f       	adc	r31, r31
    2872:	ea 5b       	subi	r30, 0xBA	; 186
    2874:	fe 4d       	sbci	r31, 0xDE	; 222
    2876:	20 81       	ld	r18, Z
    2878:	31 81       	ldd	r19, Z+1	; 0x01
    287a:	42 81       	ldd	r20, Z+2	; 0x02
    287c:	53 81       	ldd	r21, Z+3	; 0x03
    287e:	50 58       	subi	r21, 0x80	; 128
    2880:	0e 94 46 10 	call	0x208c	; 0x208c <theta>
    2884:	6f 87       	std	Y+15, r22	; 0x0f
    2886:	78 8b       	std	Y+16, r23	; 0x10
    2888:	89 8b       	std	Y+17, r24	; 0x11
    288a:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    288c:	9b 01       	movw	r18, r22
    288e:	ac 01       	movw	r20, r24
    2890:	0e 94 d6 44 	call	0x89ac	; 0x89ac <__unordsf2>
    2894:	88 23       	and	r24, r24
    2896:	09 f0       	breq	.+2      	; 0x289a <gc_execute_block+0x790>
    2898:	54 c0       	rjmp	.+168    	; 0x2942 <gc_execute_block+0x838>
		FAIL(TG_ARC_SPECIFICATION_ERROR); 
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    289a:	e0 91 13 21 	lds	r30, 0x2113
    289e:	0e 2f       	mov	r16, r30
    28a0:	10 e0       	ldi	r17, 0x00	; 0
    28a2:	e0 91 14 21 	lds	r30, 0x2114
    28a6:	ce 2e       	mov	r12, r30
    28a8:	dd 24       	eor	r13, r13
    28aa:	00 0f       	add	r16, r16
    28ac:	11 1f       	adc	r17, r17
    28ae:	00 0f       	add	r16, r16
    28b0:	11 1f       	adc	r17, r17
    28b2:	00 50       	subi	r16, 0x00	; 0
    28b4:	1f 4d       	sbci	r17, 0xDF	; 223
    28b6:	f8 01       	movw	r30, r16
    28b8:	ea 5b       	subi	r30, 0xBA	; 186
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	d8 01       	movw	r26, r16
    28be:	da 96       	adiw	r26, 0x3a	; 58
    28c0:	6d 91       	ld	r22, X+
    28c2:	7d 91       	ld	r23, X+
    28c4:	8d 91       	ld	r24, X+
    28c6:	9c 91       	ld	r25, X
    28c8:	dd 97       	sbiw	r26, 0x3d	; 61
    28ca:	20 81       	ld	r18, Z
    28cc:	31 81       	ldd	r19, Z+1	; 0x01
    28ce:	42 81       	ldd	r20, Z+2	; 0x02
    28d0:	53 81       	ldd	r21, Z+3	; 0x03
    28d2:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    28d6:	f8 01       	movw	r30, r16
    28d8:	26 a5       	ldd	r18, Z+46	; 0x2e
    28da:	37 a5       	ldd	r19, Z+47	; 0x2f
    28dc:	40 a9       	ldd	r20, Z+48	; 0x30
    28de:	51 a9       	ldd	r21, Z+49	; 0x31
    28e0:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    28e4:	7b 01       	movw	r14, r22
    28e6:	8c 01       	movw	r16, r24
    28e8:	cc 0c       	add	r12, r12
    28ea:	dd 1c       	adc	r13, r13
    28ec:	cc 0c       	add	r12, r12
    28ee:	dd 1c       	adc	r13, r13
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	31 e2       	ldi	r19, 0x21	; 33
    28f4:	c2 0e       	add	r12, r18
    28f6:	d3 1e       	adc	r13, r19
    28f8:	f6 01       	movw	r30, r12
    28fa:	ea 5b       	subi	r30, 0xBA	; 186
    28fc:	ff 4f       	sbci	r31, 0xFF	; 255
    28fe:	d6 01       	movw	r26, r12
    2900:	da 96       	adiw	r26, 0x3a	; 58
    2902:	6d 91       	ld	r22, X+
    2904:	7d 91       	ld	r23, X+
    2906:	8d 91       	ld	r24, X+
    2908:	9c 91       	ld	r25, X
    290a:	dd 97       	sbiw	r26, 0x3d	; 61
    290c:	20 81       	ld	r18, Z
    290e:	31 81       	ldd	r19, Z+1	; 0x01
    2910:	42 81       	ldd	r20, Z+2	; 0x02
    2912:	53 81       	ldd	r21, Z+3	; 0x03
    2914:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    2918:	f6 01       	movw	r30, r12
    291a:	26 a5       	ldd	r18, Z+46	; 0x2e
    291c:	37 a5       	ldd	r19, Z+47	; 0x2f
    291e:	40 a9       	ldd	r20, Z+48	; 0x30
    2920:	51 a9       	ldd	r21, Z+49	; 0x31
    2922:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    2926:	9b 01       	movw	r18, r22
    2928:	ac 01       	movw	r20, r24
    292a:	c8 01       	movw	r24, r16
    292c:	b7 01       	movw	r22, r14
    292e:	0e 94 46 10 	call	0x208c	; 0x208c <theta>
    2932:	7b 01       	movw	r14, r22
    2934:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    2936:	a8 01       	movw	r20, r16
    2938:	97 01       	movw	r18, r14
    293a:	0e 94 d6 44 	call	0x89ac	; 0x89ac <__unordsf2>
    293e:	88 23       	and	r24, r24
    2940:	19 f0       	breq	.+6      	; 0x2948 <gc_execute_block+0x83e>
		FAIL(TG_ARC_SPECIFICATION_ERROR); 
    2942:	83 e1       	ldi	r24, 0x13	; 19
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	c1 c0       	rjmp	.+386    	; 0x2aca <gc_execute_block+0x9c0>
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    2948:	c8 01       	movw	r24, r16
    294a:	b7 01       	movw	r22, r14
    294c:	2f 85       	ldd	r18, Y+15	; 0x0f
    294e:	38 89       	ldd	r19, Y+16	; 0x10
    2950:	49 89       	ldd	r20, Y+17	; 0x11
    2952:	5a 89       	ldd	r21, Y+18	; 0x12
    2954:	0e 94 5f 41 	call	0x82be	; 0x82be <__cmpsf2>
    2958:	88 23       	and	r24, r24
    295a:	54 f4       	brge	.+20     	; 0x2970 <gc_execute_block+0x866>
		theta_end += 2*M_PI;
    295c:	c8 01       	movw	r24, r16
    295e:	b7 01       	movw	r22, r14
    2960:	2b ed       	ldi	r18, 0xDB	; 219
    2962:	3f e0       	ldi	r19, 0x0F	; 15
    2964:	49 ec       	ldi	r20, 0xC9	; 201
    2966:	50 e4       	ldi	r21, 0x40	; 64
    2968:	0e 94 c0 40 	call	0x8180	; 0x8180 <__addsf3>
    296c:	7b 01       	movw	r14, r22
    296e:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    2970:	c8 01       	movw	r24, r16
    2972:	b7 01       	movw	r22, r14
    2974:	2f 85       	ldd	r18, Y+15	; 0x0f
    2976:	38 89       	ldd	r19, Y+16	; 0x10
    2978:	49 89       	ldd	r20, Y+17	; 0x11
    297a:	5a 89       	ldd	r21, Y+18	; 0x12
    297c:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    2980:	6b 87       	std	Y+11, r22	; 0x0b
    2982:	7c 87       	std	Y+12, r23	; 0x0c
    2984:	8d 87       	std	Y+13, r24	; 0x0d
    2986:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2988:	80 91 0c 21 	lds	r24, 0x210C
    298c:	83 30       	cpi	r24, 0x03	; 3
    298e:	71 f4       	brne	.+28     	; 0x29ac <gc_execute_block+0x8a2>
		angular_travel = angular_travel - 2*M_PI;
    2990:	6b 85       	ldd	r22, Y+11	; 0x0b
    2992:	7c 85       	ldd	r23, Y+12	; 0x0c
    2994:	8d 85       	ldd	r24, Y+13	; 0x0d
    2996:	9e 85       	ldd	r25, Y+14	; 0x0e
    2998:	2b ed       	ldi	r18, 0xDB	; 219
    299a:	3f e0       	ldi	r19, 0x0F	; 15
    299c:	49 ec       	ldi	r20, 0xC9	; 201
    299e:	50 e4       	ldi	r21, 0x40	; 64
    29a0:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    29a4:	6b 87       	std	Y+11, r22	; 0x0b
    29a6:	7c 87       	std	Y+12, r23	; 0x0c
    29a8:	8d 87       	std	Y+13, r24	; 0x0d
    29aa:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    29ac:	80 91 13 21 	lds	r24, 0x2113
    29b0:	28 2f       	mov	r18, r24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	2d 83       	std	Y+5, r18	; 0x05
    29b6:	3e 83       	std	Y+6, r19	; 0x06
    29b8:	f9 01       	movw	r30, r18
    29ba:	ee 0f       	add	r30, r30
    29bc:	ff 1f       	adc	r31, r31
    29be:	ee 0f       	add	r30, r30
    29c0:	ff 1f       	adc	r31, r31
    29c2:	ea 5b       	subi	r30, 0xBA	; 186
    29c4:	fe 4d       	sbci	r31, 0xDE	; 222
    29c6:	e0 80       	ld	r14, Z
    29c8:	f1 80       	ldd	r15, Z+1	; 0x01
    29ca:	02 81       	ldd	r16, Z+2	; 0x02
    29cc:	13 81       	ldd	r17, Z+3	; 0x03
    29ce:	80 91 14 21 	lds	r24, 0x2114
    29d2:	a8 2f       	mov	r26, r24
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	ab 83       	std	Y+3, r26	; 0x03
    29d8:	bc 83       	std	Y+4, r27	; 0x04
    29da:	fd 01       	movw	r30, r26
    29dc:	ee 0f       	add	r30, r30
    29de:	ff 1f       	adc	r31, r31
    29e0:	ee 0f       	add	r30, r30
    29e2:	ff 1f       	adc	r31, r31
    29e4:	ea 5b       	subi	r30, 0xBA	; 186
    29e6:	fe 4d       	sbci	r31, 0xDE	; 222
    29e8:	20 81       	ld	r18, Z
    29ea:	31 81       	ldd	r19, Z+1	; 0x01
    29ec:	42 81       	ldd	r20, Z+2	; 0x02
    29ee:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    29f0:	80 91 15 21 	lds	r24, 0x2115
    29f4:	28 2e       	mov	r2, r24
    29f6:	33 24       	eor	r3, r3
    29f8:	f1 01       	movw	r30, r2
    29fa:	ee 0f       	add	r30, r30
    29fc:	ff 1f       	adc	r31, r31
    29fe:	ee 0f       	add	r30, r30
    2a00:	ff 1f       	adc	r31, r31
    2a02:	e0 50       	subi	r30, 0x00	; 0
    2a04:	ff 4d       	sbci	r31, 0xDF	; 223
    2a06:	82 ad       	ldd	r24, Z+58	; 0x3a
    2a08:	93 ad       	ldd	r25, Z+59	; 0x3b
    2a0a:	a4 ad       	ldd	r26, Z+60	; 0x3c
    2a0c:	b5 ad       	ldd	r27, Z+61	; 0x3d
    2a0e:	8c 8b       	std	Y+20, r24	; 0x14
    2a10:	9d 8b       	std	Y+21, r25	; 0x15
    2a12:	ae 8b       	std	Y+22, r26	; 0x16
    2a14:	bf 8b       	std	Y+23, r27	; 0x17
    2a16:	a6 a4       	ldd	r10, Z+46	; 0x2e
    2a18:	b7 a4       	ldd	r11, Z+47	; 0x2f
    2a1a:	c0 a8       	ldd	r12, Z+48	; 0x30
    2a1c:	d1 a8       	ldd	r13, Z+49	; 0x31

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2a1e:	90 91 0d 21 	lds	r25, 0x210D
    2a22:	9b 8b       	std	Y+19, r25	; 0x13
    2a24:	99 23       	and	r25, r25
    2a26:	49 f0       	breq	.+18     	; 0x2a3a <gc_execute_block+0x930>
    2a28:	40 90 2a 21 	lds	r4, 0x212A
    2a2c:	50 90 2b 21 	lds	r5, 0x212B
    2a30:	60 90 2c 21 	lds	r6, 0x212C
    2a34:	70 90 2d 21 	lds	r7, 0x212D
    2a38:	08 c0       	rjmp	.+16     	; 0x2a4a <gc_execute_block+0x940>
    2a3a:	40 90 1e 21 	lds	r4, 0x211E
    2a3e:	50 90 1f 21 	lds	r5, 0x211F
    2a42:	60 90 20 21 	lds	r6, 0x2120
    2a46:	70 90 21 21 	lds	r7, 0x2121
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2a4a:	c8 01       	movw	r24, r16
    2a4c:	b7 01       	movw	r22, r14
    2a4e:	0e 94 5c 43 	call	0x86b8	; 0x86b8 <hypot>
    2a52:	7b 01       	movw	r14, r22
    2a54:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2a56:	ad b7       	in	r26, 0x3d	; 61
    2a58:	be b7       	in	r27, 0x3e	; 62
    2a5a:	1a 97       	sbiw	r26, 0x0a	; 10
    2a5c:	ad bf       	out	0x3d, r26	; 61
    2a5e:	be bf       	out	0x3e, r27	; 62
    2a60:	8d b6       	in	r8, 0x3d	; 61
    2a62:	9e b6       	in	r9, 0x3e	; 62
    2a64:	08 94       	sec
    2a66:	81 1c       	adc	r8, r1
    2a68:	91 1c       	adc	r9, r1
    2a6a:	6c 89       	ldd	r22, Y+20	; 0x14
    2a6c:	7d 89       	ldd	r23, Y+21	; 0x15
    2a6e:	8e 89       	ldd	r24, Y+22	; 0x16
    2a70:	9f 89       	ldd	r25, Y+23	; 0x17
    2a72:	a6 01       	movw	r20, r12
    2a74:	95 01       	movw	r18, r10
    2a76:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    2a7a:	5b 01       	movw	r10, r22
    2a7c:	6c 01       	movw	r12, r24
    2a7e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a80:	3c 81       	ldd	r19, Y+4	; 0x04
    2a82:	f4 01       	movw	r30, r8
    2a84:	20 83       	st	Z, r18
    2a86:	31 83       	std	Z+1, r19	; 0x01
    2a88:	22 82       	std	Z+2, r2	; 0x02
    2a8a:	33 82       	std	Z+3, r3	; 0x03
    2a8c:	d4 01       	movw	r26, r8
    2a8e:	14 96       	adiw	r26, 0x04	; 4
    2a90:	4d 92       	st	X+, r4
    2a92:	5d 92       	st	X+, r5
    2a94:	6d 92       	st	X+, r6
    2a96:	7c 92       	st	X, r7
    2a98:	17 97       	sbiw	r26, 0x07	; 7
    2a9a:	eb 89       	ldd	r30, Y+19	; 0x13
    2a9c:	18 96       	adiw	r26, 0x08	; 8
    2a9e:	ec 93       	st	X, r30
    2aa0:	18 97       	sbiw	r26, 0x08	; 8
    2aa2:	19 96       	adiw	r26, 0x09	; 9
    2aa4:	1c 92       	st	X, r1
    2aa6:	6f 85       	ldd	r22, Y+15	; 0x0f
    2aa8:	78 89       	ldd	r23, Y+16	; 0x10
    2aaa:	89 89       	ldd	r24, Y+17	; 0x11
    2aac:	9a 89       	ldd	r25, Y+18	; 0x12
    2aae:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ab0:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ab2:	4d 85       	ldd	r20, Y+13	; 0x0d
    2ab4:	5e 85       	ldd	r21, Y+14	; 0x0e
    2ab6:	8d 80       	ldd	r8, Y+5	; 0x05
    2ab8:	9e 80       	ldd	r9, Y+6	; 0x06
    2aba:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <mc_arc>
	// has completed the arc. So the endpoint should be passed to the generator and
	// executed there.
//	gc.status = mc_line(gc.target[X_AXIS], gc.target[Y_AXIS], gc.target[Z_AXIS], 
//					   (gc.inverse_feed_rate_mode) ? gc.inverse_feed_rate : 
//						gc.feed_rate, gc.inverse_feed_rate_mode);
	return (gc.status);
    2abe:	2d b7       	in	r18, 0x3d	; 61
    2ac0:	3e b7       	in	r19, 0x3e	; 62
    2ac2:	26 5f       	subi	r18, 0xF6	; 246
    2ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac6:	2d bf       	out	0x3d, r18	; 61
    2ac8:	3e bf       	out	0x3e, r19	; 62
										gc.inverse_feed_rate_mode); 
					break;
				}

				case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC: {
					gc.status = _gc_compute_arc(); 
    2aca:	80 93 00 21 	sts	0x2100, r24
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_EAGAIN)) {
    2ace:	80 91 00 21 	lds	r24, 0x2100
    2ad2:	88 23       	and	r24, r24
    2ad4:	11 f0       	breq	.+4      	; 0x2ada <gc_execute_block+0x9d0>
    2ad6:	82 30       	cpi	r24, 0x02	; 2
    2ad8:	49 f4       	brne	.+18     	; 0x2aec <gc_execute_block+0x9e2>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2ada:	ee e2       	ldi	r30, 0x2E	; 46
    2adc:	f1 e2       	ldi	r31, 0x21	; 33
    2ade:	df 01       	movw	r26, r30
    2ae0:	1c 96       	adiw	r26, 0x0c	; 12
    2ae2:	9c e0       	ldi	r25, 0x0C	; 12
    2ae4:	0d 90       	ld	r0, X+
    2ae6:	01 92       	st	Z+, r0
    2ae8:	91 50       	subi	r25, 0x01	; 1
    2aea:	e1 f7       	brne	.-8      	; 0x2ae4 <gc_execute_block+0x9da>
	};
	return(gc.status);
}
    2aec:	68 96       	adiw	r28, 0x18	; 24
    2aee:	cd bf       	out	0x3d, r28	; 61
    2af0:	de bf       	out	0x3e, r29	; 62
    2af2:	cf 91       	pop	r28
    2af4:	df 91       	pop	r29
    2af6:	1f 91       	pop	r17
    2af8:	0f 91       	pop	r16
    2afa:	ff 90       	pop	r15
    2afc:	ef 90       	pop	r14
    2afe:	df 90       	pop	r13
    2b00:	cf 90       	pop	r12
    2b02:	bf 90       	pop	r11
    2b04:	af 90       	pop	r10
    2b06:	9f 90       	pop	r9
    2b08:	8f 90       	pop	r8
    2b0a:	7f 90       	pop	r7
    2b0c:	6f 90       	pop	r6
    2b0e:	5f 90       	pop	r5
    2b10:	4f 90       	pop	r4
    2b12:	3f 90       	pop	r3
    2b14:	2f 90       	pop	r2
    2b16:	08 95       	ret

00002b18 <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2b18:	ef 92       	push	r14
    2b1a:	ff 92       	push	r15
    2b1c:	0f 93       	push	r16
    2b1e:	1f 93       	push	r17
    2b20:	cf 93       	push	r28
    2b22:	df 93       	push	r29
    2b24:	8c 01       	movw	r16, r24
	char *comment=0;	// comment pointer - first char past opening paren
	uint8_t i=0; 		// index for incoming characters
	uint8_t j=0;		// index for normalized characters

	// discard deleted block
	if (block[0] == '/') {
    2b26:	fc 01       	movw	r30, r24
    2b28:	80 81       	ld	r24, Z
    2b2a:	8f 32       	cpi	r24, 0x2F	; 47
    2b2c:	19 f0       	breq	.+6      	; 0x2b34 <gc_gcode_parser+0x1c>
    2b2e:	ee 24       	eor	r14, r14
    2b30:	ff 24       	eor	r15, r15
    2b32:	15 c0       	rjmp	.+42     	; 0x2b5e <gc_gcode_parser+0x46>
		block[0] = 0;
    2b34:	f8 01       	movw	r30, r16
    2b36:	10 82       	st	Z, r1
    2b38:	56 c0       	rjmp	.+172    	; 0x2be6 <gc_gcode_parser+0xce>
		return;
	} 
	// normalize the comamnd block & mark the comment(if any)
	while ((c = toupper(block[i++])) != 0) {// NUL character
    2b3a:	f3 94       	inc	r15
		if (c <= ' ') continue;				// toss WS & ctrl codes
    2b3c:	81 32       	cpi	r24, 0x21	; 33
    2b3e:	78 f0       	brcs	.+30     	; 0x2b5e <gc_gcode_parser+0x46>
    2b40:	ee 2d       	mov	r30, r14
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
		if (c == '(') {						// detect & handle comment
    2b44:	88 32       	cpi	r24, 0x28	; 40
    2b46:	39 f4       	brne	.+14     	; 0x2b56 <gc_gcode_parser+0x3e>
			block[j] = 0;
    2b48:	e0 0f       	add	r30, r16
    2b4a:	f1 1f       	adc	r31, r17
    2b4c:	10 82       	st	Z, r1
			comment = &block[i]; 
    2b4e:	e8 01       	movw	r28, r16
    2b50:	cf 0d       	add	r28, r15
    2b52:	d1 1d       	adc	r29, r1
    2b54:	0f c0       	rjmp	.+30     	; 0x2b74 <gc_gcode_parser+0x5c>
			break;
		}
		block[j++] = c;
    2b56:	e0 0f       	add	r30, r16
    2b58:	f1 1f       	adc	r31, r17
    2b5a:	80 83       	st	Z, r24
    2b5c:	e3 94       	inc	r14
	if (block[0] == '/') {
		block[0] = 0;
		return;
	} 
	// normalize the comamnd block & mark the comment(if any)
	while ((c = toupper(block[i++])) != 0) {// NUL character
    2b5e:	f8 01       	movw	r30, r16
    2b60:	ef 0d       	add	r30, r15
    2b62:	f1 1d       	adc	r31, r1
    2b64:	80 81       	ld	r24, Z
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	0e 94 d6 47 	call	0x8fac	; 0x8fac <toupper>
    2b6c:	88 23       	and	r24, r24
    2b6e:	29 f7       	brne	.-54     	; 0x2b3a <gc_gcode_parser+0x22>
    2b70:	c0 e0       	ldi	r28, 0x00	; 0
    2b72:	d0 e0       	ldi	r29, 0x00	; 0
			comment = &block[i]; 
			break;
		}
		block[j++] = c;
	}
	block[j] = 0;
    2b74:	f8 01       	movw	r30, r16
    2b76:	ee 0d       	add	r30, r14
    2b78:	f1 1d       	adc	r31, r1
    2b7a:	10 82       	st	Z, r1
	if (comment) {
    2b7c:	20 97       	sbiw	r28, 0x00	; 0
    2b7e:	99 f1       	breq	.+102    	; 0x2be6 <gc_gcode_parser+0xce>
		if ((toupper(comment[0]) == 'M') && 
    2b80:	88 81       	ld	r24, Y
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	0e 94 d6 47 	call	0x8fac	; 0x8fac <toupper>
    2b88:	8d 34       	cpi	r24, 0x4D	; 77
    2b8a:	91 05       	cpc	r25, r1
    2b8c:	61 f5       	brne	.+88     	; 0x2be6 <gc_gcode_parser+0xce>
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	0e 94 d6 47 	call	0x8fac	; 0x8fac <toupper>
    2b96:	83 35       	cpi	r24, 0x53	; 83
    2b98:	91 05       	cpc	r25, r1
    2b9a:	29 f5       	brne	.+74     	; 0x2be6 <gc_gcode_parser+0xce>
    2b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	0e 94 d6 47 	call	0x8fac	; 0x8fac <toupper>
    2ba4:	87 34       	cpi	r24, 0x47	; 71
    2ba6:	91 05       	cpc	r25, r1
    2ba8:	f1 f4       	brne	.+60     	; 0x2be6 <gc_gcode_parser+0xce>
    2baa:	04 c0       	rjmp	.+8      	; 0x2bb4 <gc_gcode_parser+0x9c>
			(toupper(comment[1]) == 'S') &&
			(toupper(comment[2]) == 'G')) {
			i=0;
			while ((c = comment[i++]) != 0) {	// remove trailing paren
				if (c == ')') {
    2bac:	99 32       	cpi	r25, 0x29	; 41
    2bae:	19 f4       	brne	.+6      	; 0x2bb6 <gc_gcode_parser+0x9e>
					comment[--i] = 0;
    2bb0:	10 82       	st	Z, r1
    2bb2:	08 c0       	rjmp	.+16     	; 0x2bc4 <gc_gcode_parser+0xac>
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
	if (comment) {
		if ((toupper(comment[0]) == 'M') && 
			(toupper(comment[1]) == 'S') &&
			(toupper(comment[2]) == 'G')) {
			i=0;
			while ((c = comment[i++]) != 0) {	// remove trailing paren
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	e8 0f       	add	r30, r24
    2bba:	f1 1d       	adc	r31, r1
    2bbc:	90 81       	ld	r25, Z
    2bbe:	8f 5f       	subi	r24, 0xFF	; 255
    2bc0:	99 23       	and	r25, r25
    2bc2:	a1 f7       	brne	.-24     	; 0x2bac <gc_gcode_parser+0x94>
				if (c == ')') {
					comment[--i] = 0;
					break;
				}
			}
			printf_P(PSTR("%s\n"), (comment+3));
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <gc_gcode_parser+0xae>
    2bc6:	0f 92       	push	r0
    2bc8:	8b e3       	ldi	r24, 0x3B	; 59
    2bca:	92 e0       	ldi	r25, 0x02	; 2
    2bcc:	ed b7       	in	r30, 0x3d	; 61
    2bce:	fe b7       	in	r31, 0x3e	; 62
    2bd0:	81 83       	std	Z+1, r24	; 0x01
    2bd2:	92 83       	std	Z+2, r25	; 0x02
    2bd4:	23 96       	adiw	r28, 0x03	; 3
    2bd6:	c3 83       	std	Z+3, r28	; 0x03
    2bd8:	d4 83       	std	Z+4, r29	; 0x04
    2bda:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
 */

uint8_t gc_gcode_parser(char *block)
{
	_gc_normalize_gcode_block(block);
	if (block[0] == 0) { 					// ignore comments (stripped)
    2be6:	f8 01       	movw	r30, r16
    2be8:	80 81       	ld	r24, Z
    2bea:	88 23       	and	r24, r24
    2bec:	71 f0       	breq	.+28     	; 0x2c0a <gc_gcode_parser+0xf2>
		return(TG_OK);
	}
	if (block[0] == 'Q') {					// quit gcode mode
    2bee:	81 35       	cpi	r24, 0x51	; 81
    2bf0:	11 f4       	brne	.+4      	; 0x2bf6 <gc_gcode_parser+0xde>
    2bf2:	8b e0       	ldi	r24, 0x0B	; 11
    2bf4:	0a c0       	rjmp	.+20     	; 0x2c0a <gc_gcode_parser+0xf2>
		return(TG_QUIT);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2bf6:	c8 01       	movw	r24, r16
    2bf8:	0e 94 85 10 	call	0x210a	; 0x210a <gc_execute_block>
    2bfc:	80 93 00 21 	sts	0x2100, r24
	tg_print_status(gc.status, block);
    2c00:	b8 01       	movw	r22, r16
    2c02:	0e 94 01 2b 	call	0x5602	; 0x5602 <tg_print_status>
	return (gc.status);
    2c06:	80 91 00 21 	lds	r24, 0x2100
}
    2c0a:	df 91       	pop	r29
    2c0c:	cf 91       	pop	r28
    2c0e:	1f 91       	pop	r17
    2c10:	0f 91       	pop	r16
    2c12:	ff 90       	pop	r15
    2c14:	ef 90       	pop	r14
    2c16:	08 95       	ret

00002c18 <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2c18:	cf 92       	push	r12
    2c1a:	df 92       	push	r13
    2c1c:	ef 92       	push	r14
    2c1e:	ff 92       	push	r15
    2c20:	0f 93       	push	r16
    2c22:	1f 93       	push	r17
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	c4 e5       	ldi	r28, 0x54	; 84
    2c2a:	d3 e2       	ldi	r29, 0x23	; 35
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2c2c:	68 81       	ld	r22, Y
    2c2e:	70 e0       	ldi	r23, 0x00	; 0
    2c30:	88 27       	eor	r24, r24
    2c32:	77 fd       	sbrc	r23, 7
    2c34:	80 95       	com	r24
    2c36:	98 2f       	mov	r25, r24
    2c38:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    2c3c:	9b 01       	movw	r18, r22
    2c3e:	ac 01       	movw	r20, r24
    2c40:	6f 81       	ldd	r22, Y+7	; 0x07
    2c42:	78 85       	ldd	r23, Y+8	; 0x08
    2c44:	89 85       	ldd	r24, Y+9	; 0x09
    2c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c48:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    2c4c:	9b 01       	movw	r18, r22
    2c4e:	ac 01       	movw	r20, r24
    2c50:	60 e0       	ldi	r22, 0x00	; 0
    2c52:	70 e0       	ldi	r23, 0x00	; 0
    2c54:	84 eb       	ldi	r24, 0xB4	; 180
    2c56:	93 e4       	ldi	r25, 0x43	; 67
    2c58:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    2c5c:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c5e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c60:	4d 85       	ldd	r20, Y+13	; 0x0d
    2c62:	5e 85       	ldd	r21, Y+14	; 0x0e
    2c64:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    2c68:	6b 8b       	std	Y+19, r22	; 0x13
    2c6a:	7c 8b       	std	Y+20, r23	; 0x14
    2c6c:	8d 8b       	std	Y+21, r24	; 0x15
    2c6e:	9e 8b       	std	Y+22, r25	; 0x16
    2c70:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    2c72:	83 e2       	ldi	r24, 0x23	; 35
    2c74:	c4 3b       	cpi	r28, 0xB4	; 180
    2c76:	d8 07       	cpc	r29, r24
    2c78:	c9 f6       	brne	.-78     	; 0x2c2c <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    2c7a:	00 91 54 23 	lds	r16, 0x2354
    2c7e:	10 e0       	ldi	r17, 0x00	; 0
    2c80:	b8 01       	movw	r22, r16
    2c82:	88 27       	eor	r24, r24
    2c84:	77 fd       	sbrc	r23, 7
    2c86:	80 95       	com	r24
    2c88:	98 2f       	mov	r25, r24
    2c8a:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    2c8e:	9b 01       	movw	r18, r22
    2c90:	ac 01       	movw	r20, r24
    2c92:	60 91 5b 23 	lds	r22, 0x235B
    2c96:	70 91 5c 23 	lds	r23, 0x235C
    2c9a:	80 91 5d 23 	lds	r24, 0x235D
    2c9e:	90 91 5e 23 	lds	r25, 0x235E
    2ca2:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    2ca6:	9b 01       	movw	r18, r22
    2ca8:	ac 01       	movw	r20, r24
    2caa:	60 e0       	ldi	r22, 0x00	; 0
    2cac:	70 e0       	ldi	r23, 0x00	; 0
    2cae:	84 eb       	ldi	r24, 0xB4	; 180
    2cb0:	93 e4       	ldi	r25, 0x43	; 67
    2cb2:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    2cb6:	6b 01       	movw	r12, r22
    2cb8:	7c 01       	movw	r14, r24
    2cba:	80 91 59 23 	lds	r24, 0x2359
    2cbe:	90 91 5a 23 	lds	r25, 0x235A
    2cc2:	08 9f       	mul	r16, r24
    2cc4:	b0 01       	movw	r22, r0
    2cc6:	09 9f       	mul	r16, r25
    2cc8:	70 0d       	add	r23, r0
    2cca:	18 9f       	mul	r17, r24
    2ccc:	70 0d       	add	r23, r0
    2cce:	11 24       	eor	r1, r1
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 ff 41 	call	0x83fe	; 0x83fe <__floatunsisf>
    2cd8:	a7 01       	movw	r20, r14
    2cda:	96 01       	movw	r18, r12
    2cdc:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    2ce0:	60 93 4c 23 	sts	0x234C, r22
    2ce4:	70 93 4d 23 	sts	0x234D, r23
    2ce8:	80 93 4e 23 	sts	0x234E, r24
    2cec:	90 93 4f 23 	sts	0x234F, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    2cf0:	80 91 57 23 	lds	r24, 0x2357
    2cf4:	90 91 58 23 	lds	r25, 0x2358
    2cf8:	08 9f       	mul	r16, r24
    2cfa:	b0 01       	movw	r22, r0
    2cfc:	09 9f       	mul	r16, r25
    2cfe:	70 0d       	add	r23, r0
    2d00:	18 9f       	mul	r17, r24
    2d02:	70 0d       	add	r23, r0
    2d04:	11 24       	eor	r1, r1
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	0e 94 ff 41 	call	0x83fe	; 0x83fe <__floatunsisf>
    2d0e:	a7 01       	movw	r20, r14
    2d10:	96 01       	movw	r18, r12
    2d12:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    2d16:	60 93 50 23 	sts	0x2350, r22
    2d1a:	70 93 51 23 	sts	0x2351, r23
    2d1e:	80 93 52 23 	sts	0x2352, r24
    2d22:	90 93 53 23 	sts	0x2353, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    2d26:	df 91       	pop	r29
    2d28:	cf 91       	pop	r28
    2d2a:	1f 91       	pop	r17
    2d2c:	0f 91       	pop	r16
    2d2e:	ff 90       	pop	r15
    2d30:	ef 90       	pop	r14
    2d32:	df 90       	pop	r13
    2d34:	cf 90       	pop	r12
    2d36:	08 95       	ret

00002d38 <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    2d38:	e6 e4       	ldi	r30, 0x46	; 70
    2d3a:	f3 e2       	ldi	r31, 0x23	; 35
    2d3c:	84 e6       	ldi	r24, 0x64	; 100
    2d3e:	80 93 46 23 	sts	0x2346, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2d42:	8d ec       	ldi	r24, 0xCD	; 205
    2d44:	9c ec       	ldi	r25, 0xCC	; 204
    2d46:	ac e4       	ldi	r26, 0x4C	; 76
    2d48:	bd e3       	ldi	r27, 0x3D	; 61
    2d4a:	80 93 48 23 	sts	0x2348, r24
    2d4e:	90 93 49 23 	sts	0x2349, r25
    2d52:	a0 93 4a 23 	sts	0x234A, r26
    2d56:	b0 93 4b 23 	sts	0x234B, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2d5a:	8c ed       	ldi	r24, 0xDC	; 220
    2d5c:	95 e0       	ldi	r25, 0x05	; 5
    2d5e:	80 93 57 23 	sts	0x2357, r24
    2d62:	90 93 58 23 	sts	0x2358, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2d66:	80 93 6f 23 	sts	0x236F, r24
    2d6a:	90 93 70 23 	sts	0x2370, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2d6e:	80 93 87 23 	sts	0x2387, r24
    2d72:	90 93 88 23 	sts	0x2388, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2d76:	80 93 9f 23 	sts	0x239F, r24
    2d7a:	90 93 a0 23 	sts	0x23A0, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2d7e:	80 93 59 23 	sts	0x2359, r24
    2d82:	90 93 5a 23 	sts	0x235A, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2d86:	80 93 71 23 	sts	0x2371, r24
    2d8a:	90 93 72 23 	sts	0x2372, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2d8e:	80 93 89 23 	sts	0x2389, r24
    2d92:	90 93 8a 23 	sts	0x238A, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2d96:	80 93 a1 23 	sts	0x23A1, r24
    2d9a:	90 93 a2 23 	sts	0x23A2, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2d9e:	86 e6       	ldi	r24, 0x66	; 102
    2da0:	96 e6       	ldi	r25, 0x66	; 102
    2da2:	a6 ee       	ldi	r26, 0xE6	; 230
    2da4:	bf e3       	ldi	r27, 0x3F	; 63
    2da6:	80 93 5b 23 	sts	0x235B, r24
    2daa:	90 93 5c 23 	sts	0x235C, r25
    2dae:	a0 93 5d 23 	sts	0x235D, r26
    2db2:	b0 93 5e 23 	sts	0x235E, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2db6:	80 93 73 23 	sts	0x2373, r24
    2dba:	90 93 74 23 	sts	0x2374, r25
    2dbe:	a0 93 75 23 	sts	0x2375, r26
    2dc2:	b0 93 76 23 	sts	0x2376, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2dc6:	80 93 8b 23 	sts	0x238B, r24
    2dca:	90 93 8c 23 	sts	0x238C, r25
    2dce:	a0 93 8d 23 	sts	0x238D, r26
    2dd2:	b0 93 8e 23 	sts	0x238E, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2dd6:	80 93 a3 23 	sts	0x23A3, r24
    2dda:	90 93 a4 23 	sts	0x23A4, r25
    2dde:	a0 93 a5 23 	sts	0x23A5, r26
    2de2:	b0 93 a6 23 	sts	0x23A6, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    2de6:	8c e5       	ldi	r24, 0x5C	; 92
    2de8:	9f e8       	ldi	r25, 0x8F	; 143
    2dea:	a2 ea       	ldi	r26, 0xA2	; 162
    2dec:	bf e3       	ldi	r27, 0x3F	; 63
    2dee:	80 93 5f 23 	sts	0x235F, r24
    2df2:	90 93 60 23 	sts	0x2360, r25
    2df6:	a0 93 61 23 	sts	0x2361, r26
    2dfa:	b0 93 62 23 	sts	0x2362, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    2dfe:	80 93 77 23 	sts	0x2377, r24
    2e02:	90 93 78 23 	sts	0x2378, r25
    2e06:	a0 93 79 23 	sts	0x2379, r26
    2e0a:	b0 93 7a 23 	sts	0x237A, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    2e0e:	80 93 8f 23 	sts	0x238F, r24
    2e12:	90 93 90 23 	sts	0x2390, r25
    2e16:	a0 93 91 23 	sts	0x2391, r26
    2e1a:	b0 93 92 23 	sts	0x2392, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    2e1e:	80 93 a7 23 	sts	0x23A7, r24
    2e22:	90 93 a8 23 	sts	0x23A8, r25
    2e26:	a0 93 a9 23 	sts	0x23A9, r26
    2e2a:	b0 93 aa 23 	sts	0x23AA, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	a8 ec       	ldi	r26, 0xC8	; 200
    2e34:	b3 e4       	ldi	r27, 0x43	; 67
    2e36:	80 93 63 23 	sts	0x2363, r24
    2e3a:	90 93 64 23 	sts	0x2364, r25
    2e3e:	a0 93 65 23 	sts	0x2365, r26
    2e42:	b0 93 66 23 	sts	0x2366, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    2e46:	80 93 7b 23 	sts	0x237B, r24
    2e4a:	90 93 7c 23 	sts	0x237C, r25
    2e4e:	a0 93 7d 23 	sts	0x237D, r26
    2e52:	b0 93 7e 23 	sts	0x237E, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	a6 e9       	ldi	r26, 0x96	; 150
    2e5c:	b3 e4       	ldi	r27, 0x43	; 67
    2e5e:	80 93 93 23 	sts	0x2393, r24
    2e62:	90 93 94 23 	sts	0x2394, r25
    2e66:	a0 93 95 23 	sts	0x2395, r26
    2e6a:	b0 93 96 23 	sts	0x2396, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	a0 e8       	ldi	r26, 0x80	; 128
    2e74:	bf eb       	ldi	r27, 0xBF	; 191
    2e76:	80 93 ab 23 	sts	0x23AB, r24
    2e7a:	90 93 ac 23 	sts	0x23AC, r25
    2e7e:	a0 93 ad 23 	sts	0x23AD, r26
    2e82:	b0 93 ae 23 	sts	0x23AE, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    2e86:	88 e0       	ldi	r24, 0x08	; 8
    2e88:	80 93 54 23 	sts	0x2354, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    2e8c:	80 93 6c 23 	sts	0x236C, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    2e90:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A].microstep = A_MICROSTEPS;
    2e92:	80 93 9c 23 	sts	0x239C, r24

	cfg.a[X].polarity = X_POLARITY;
    2e96:	10 92 56 23 	sts	0x2356, r1
	cfg.a[Y].polarity = Y_POLARITY;
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	80 93 6e 23 	sts	0x236E, r24
	cfg.a[Z].polarity = Z_POLARITY;
    2ea0:	10 92 86 23 	sts	0x2386, r1
	cfg.a[A].polarity = A_POLARITY;
    2ea4:	10 92 9e 23 	sts	0x239E, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    2ea8:	80 93 6b 23 	sts	0x236B, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    2eac:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    2eae:	80 93 9b 23 	sts	0x239B, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    2eb2:	10 92 b3 23 	sts	0x23B3, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    2eb6:	80 93 55 23 	sts	0x2355, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    2eba:	80 93 6d 23 	sts	0x236D, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    2ebe:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    2ec0:	80 93 9d 23 	sts	0x239D, r24

	_cfg_computed();		// generate computed values from the above
    2ec4:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <_cfg_computed>
}
    2ec8:	08 95       	ret

00002eca <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2eca:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <cfg_reset>
}
    2ece:	08 95       	ret

00002ed0 <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	66 e4       	ldi	r22, 0x46	; 70
    2ed6:	73 e2       	ldi	r23, 0x23	; 35
    2ed8:	4e e6       	ldi	r20, 0x6E	; 110
    2eda:	50 e0       	ldi	r21, 0x00	; 0
    2edc:	0e 94 fe 29 	call	0x53fc	; 0x53fc <memcpy_to_eeprom_with_checksum>
}
    2ee0:	08 95       	ret

00002ee2 <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	0e 94 50 29 	call	0x52a0	; 0x52a0 <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    2eea:	84 36       	cpi	r24, 0x64	; 100
    2eec:	19 f0       	breq	.+6      	; 0x2ef4 <cfg_read+0x12>
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	0d c0       	rjmp	.+26     	; 0x2f0e <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    2ef4:	86 e4       	ldi	r24, 0x46	; 70
    2ef6:	93 e2       	ldi	r25, 0x23	; 35
    2ef8:	60 e0       	ldi	r22, 0x00	; 0
    2efa:	70 e0       	ldi	r23, 0x00	; 0
    2efc:	4e e6       	ldi	r20, 0x6E	; 110
    2efe:	50 e0       	ldi	r21, 0x00	; 0
    2f00:	0e 94 5a 29 	call	0x52b4	; 0x52b4 <memcpy_from_eeprom_with_checksum>
    2f04:	00 97       	sbiw	r24, 0x00	; 0
    2f06:	11 f0       	breq	.+4      	; 0x2f0c <cfg_read+0x2a>
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    2f0e:	c9 01       	movw	r24, r18
    2f10:	08 95       	ret

00002f12 <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    2f12:	ef 92       	push	r14
    2f14:	ff 92       	push	r15
    2f16:	0f 93       	push	r16
    2f18:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    2f1a:	e8 2e       	mov	r14, r24
    2f1c:	ff 24       	eor	r15, r15
    2f1e:	87 01       	movw	r16, r14
    2f20:	00 0f       	add	r16, r16
    2f22:	11 1f       	adc	r17, r17
    2f24:	f8 01       	movw	r30, r16
    2f26:	e9 5b       	subi	r30, 0xB9	; 185
    2f28:	fd 4f       	sbci	r31, 0xFD	; 253
    2f2a:	25 91       	lpm	r18, Z+
    2f2c:	34 91       	lpm	r19, Z+
    2f2e:	00 d0       	rcall	.+0      	; 0x2f30 <_cfg_dump_axis+0x1e>
    2f30:	0f 92       	push	r0
    2f32:	83 ea       	ldi	r24, 0xA3	; 163
    2f34:	95 e0       	ldi	r25, 0x05	; 5
    2f36:	ad b7       	in	r26, 0x3d	; 61
    2f38:	be b7       	in	r27, 0x3e	; 62
    2f3a:	11 96       	adiw	r26, 0x01	; 1
    2f3c:	8d 93       	st	X+, r24
    2f3e:	9c 93       	st	X, r25
    2f40:	12 97       	sbiw	r26, 0x02	; 2
    2f42:	13 96       	adiw	r26, 0x03	; 3
    2f44:	2d 93       	st	X+, r18
    2f46:	3c 93       	st	X, r19
    2f48:	14 97       	sbiw	r26, 0x04	; 4
    2f4a:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    2f4e:	8b e6       	ldi	r24, 0x6B	; 107
    2f50:	95 e0       	ldi	r25, 0x05	; 5
    2f52:	ed b7       	in	r30, 0x3d	; 61
    2f54:	fe b7       	in	r31, 0x3e	; 62
    2f56:	81 83       	std	Z+1, r24	; 0x01
    2f58:	92 83       	std	Z+2, r25	; 0x02
    2f5a:	0e 0d       	add	r16, r14
    2f5c:	1f 1d       	adc	r17, r15
    2f5e:	83 e0       	ldi	r24, 0x03	; 3
    2f60:	00 0f       	add	r16, r16
    2f62:	11 1f       	adc	r17, r17
    2f64:	8a 95       	dec	r24
    2f66:	e1 f7       	brne	.-8      	; 0x2f60 <_cfg_dump_axis+0x4e>
    2f68:	0a 5b       	subi	r16, 0xBA	; 186
    2f6a:	1c 4d       	sbci	r17, 0xDC	; 220
    2f6c:	d8 01       	movw	r26, r16
    2f6e:	51 96       	adiw	r26, 0x11	; 17
    2f70:	8d 91       	ld	r24, X+
    2f72:	9c 91       	ld	r25, X
    2f74:	52 97       	sbiw	r26, 0x12	; 18
    2f76:	83 83       	std	Z+3, r24	; 0x03
    2f78:	94 83       	std	Z+4, r25	; 0x04
    2f7a:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    2f7e:	83 e3       	ldi	r24, 0x33	; 51
    2f80:	95 e0       	ldi	r25, 0x05	; 5
    2f82:	ed b7       	in	r30, 0x3d	; 61
    2f84:	fe b7       	in	r31, 0x3e	; 62
    2f86:	81 83       	std	Z+1, r24	; 0x01
    2f88:	92 83       	std	Z+2, r25	; 0x02
    2f8a:	d8 01       	movw	r26, r16
    2f8c:	53 96       	adiw	r26, 0x13	; 19
    2f8e:	8d 91       	ld	r24, X+
    2f90:	9c 91       	ld	r25, X
    2f92:	54 97       	sbiw	r26, 0x14	; 20
    2f94:	83 83       	std	Z+3, r24	; 0x03
    2f96:	94 83       	std	Z+4, r25	; 0x04
    2f98:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    2f9c:	ed b7       	in	r30, 0x3d	; 61
    2f9e:	fe b7       	in	r31, 0x3e	; 62
    2fa0:	31 96       	adiw	r30, 0x01	; 1
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	95 e0       	ldi	r25, 0x05	; 5
    2fa6:	ad b7       	in	r26, 0x3d	; 61
    2fa8:	be b7       	in	r27, 0x3e	; 62
    2faa:	11 96       	adiw	r26, 0x01	; 1
    2fac:	8d 93       	st	X+, r24
    2fae:	9c 93       	st	X, r25
    2fb0:	12 97       	sbiw	r26, 0x02	; 2
    2fb2:	d8 01       	movw	r26, r16
    2fb4:	1e 96       	adiw	r26, 0x0e	; 14
    2fb6:	8c 91       	ld	r24, X
    2fb8:	82 83       	std	Z+2, r24	; 0x02
    2fba:	13 82       	std	Z+3, r1	; 0x03
    2fbc:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    2fc0:	0f 92       	push	r0
    2fc2:	0f 92       	push	r0
    2fc4:	89 ec       	ldi	r24, 0xC9	; 201
    2fc6:	94 e0       	ldi	r25, 0x04	; 4
    2fc8:	ed b7       	in	r30, 0x3d	; 61
    2fca:	fe b7       	in	r31, 0x3e	; 62
    2fcc:	81 83       	std	Z+1, r24	; 0x01
    2fce:	92 83       	std	Z+2, r25	; 0x02
    2fd0:	f8 01       	movw	r30, r16
    2fd2:	85 89       	ldd	r24, Z+21	; 0x15
    2fd4:	96 89       	ldd	r25, Z+22	; 0x16
    2fd6:	a7 89       	ldd	r26, Z+23	; 0x17
    2fd8:	b0 8d       	ldd	r27, Z+24	; 0x18
    2fda:	ed b7       	in	r30, 0x3d	; 61
    2fdc:	fe b7       	in	r31, 0x3e	; 62
    2fde:	83 83       	std	Z+3, r24	; 0x03
    2fe0:	94 83       	std	Z+4, r25	; 0x04
    2fe2:	a5 83       	std	Z+5, r26	; 0x05
    2fe4:	b6 83       	std	Z+6, r27	; 0x06
    2fe6:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    2fea:	86 e9       	ldi	r24, 0x96	; 150
    2fec:	94 e0       	ldi	r25, 0x04	; 4
    2fee:	ad b7       	in	r26, 0x3d	; 61
    2ff0:	be b7       	in	r27, 0x3e	; 62
    2ff2:	11 96       	adiw	r26, 0x01	; 1
    2ff4:	8d 93       	st	X+, r24
    2ff6:	9c 93       	st	X, r25
    2ff8:	12 97       	sbiw	r26, 0x02	; 2
    2ffa:	f8 01       	movw	r30, r16
    2ffc:	81 8d       	ldd	r24, Z+25	; 0x19
    2ffe:	92 8d       	ldd	r25, Z+26	; 0x1a
    3000:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3002:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3004:	ed b7       	in	r30, 0x3d	; 61
    3006:	fe b7       	in	r31, 0x3e	; 62
    3008:	83 83       	std	Z+3, r24	; 0x03
    300a:	94 83       	std	Z+4, r25	; 0x04
    300c:	a5 83       	std	Z+5, r26	; 0x05
    300e:	b6 83       	std	Z+6, r27	; 0x06
    3010:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    3014:	83 e6       	ldi	r24, 0x63	; 99
    3016:	94 e0       	ldi	r25, 0x04	; 4
    3018:	ad b7       	in	r26, 0x3d	; 61
    301a:	be b7       	in	r27, 0x3e	; 62
    301c:	11 96       	adiw	r26, 0x01	; 1
    301e:	8d 93       	st	X+, r24
    3020:	9c 93       	st	X, r25
    3022:	12 97       	sbiw	r26, 0x02	; 2
    3024:	f8 01       	movw	r30, r16
    3026:	85 8d       	ldd	r24, Z+29	; 0x1d
    3028:	96 8d       	ldd	r25, Z+30	; 0x1e
    302a:	a7 8d       	ldd	r26, Z+31	; 0x1f
    302c:	b0 a1       	ldd	r27, Z+32	; 0x20
    302e:	ed b7       	in	r30, 0x3d	; 61
    3030:	fe b7       	in	r31, 0x3e	; 62
    3032:	83 83       	std	Z+3, r24	; 0x03
    3034:	94 83       	std	Z+4, r25	; 0x04
    3036:	a5 83       	std	Z+5, r26	; 0x05
    3038:	b6 83       	std	Z+6, r27	; 0x06
    303a:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	ed b7       	in	r30, 0x3d	; 61
    3044:	fe b7       	in	r31, 0x3e	; 62
    3046:	31 96       	adiw	r30, 0x01	; 1
    3048:	82 e3       	ldi	r24, 0x32	; 50
    304a:	94 e0       	ldi	r25, 0x04	; 4
    304c:	ad b7       	in	r26, 0x3d	; 61
    304e:	be b7       	in	r27, 0x3e	; 62
    3050:	11 96       	adiw	r26, 0x01	; 1
    3052:	8d 93       	st	X+, r24
    3054:	9c 93       	st	X, r25
    3056:	12 97       	sbiw	r26, 0x02	; 2
    3058:	d8 01       	movw	r26, r16
    305a:	95 96       	adiw	r26, 0x25	; 37
    305c:	8c 91       	ld	r24, X
    305e:	82 83       	std	Z+2, r24	; 0x02
    3060:	13 82       	std	Z+3, r1	; 0x03
    3062:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    3066:	ed b7       	in	r30, 0x3d	; 61
    3068:	fe b7       	in	r31, 0x3e	; 62
    306a:	31 96       	adiw	r30, 0x01	; 1
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	94 e0       	ldi	r25, 0x04	; 4
    3070:	ad b7       	in	r26, 0x3d	; 61
    3072:	be b7       	in	r27, 0x3e	; 62
    3074:	11 96       	adiw	r26, 0x01	; 1
    3076:	8d 93       	st	X+, r24
    3078:	9c 93       	st	X, r25
    307a:	12 97       	sbiw	r26, 0x02	; 2
    307c:	d8 01       	movw	r26, r16
    307e:	1f 96       	adiw	r26, 0x0f	; 15
    3080:	8c 91       	ld	r24, X
    3082:	82 83       	std	Z+2, r24	; 0x02
    3084:	13 82       	std	Z+3, r1	; 0x03
    3086:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    308a:	ed b7       	in	r30, 0x3d	; 61
    308c:	fe b7       	in	r31, 0x3e	; 62
    308e:	31 96       	adiw	r30, 0x01	; 1
    3090:	81 ed       	ldi	r24, 0xD1	; 209
    3092:	93 e0       	ldi	r25, 0x03	; 3
    3094:	ad b7       	in	r26, 0x3d	; 61
    3096:	be b7       	in	r27, 0x3e	; 62
    3098:	11 96       	adiw	r26, 0x01	; 1
    309a:	8d 93       	st	X+, r24
    309c:	9c 93       	st	X, r25
    309e:	12 97       	sbiw	r26, 0x02	; 2
    30a0:	d8 01       	movw	r26, r16
    30a2:	50 96       	adiw	r26, 0x10	; 16
    30a4:	8c 91       	ld	r24, X
    30a6:	82 83       	std	Z+2, r24	; 0x02
    30a8:	13 82       	std	Z+3, r1	; 0x03
    30aa:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    30ae:	0f 92       	push	r0
    30b0:	0f 92       	push	r0
    30b2:	8d e9       	ldi	r24, 0x9D	; 157
    30b4:	93 e0       	ldi	r25, 0x03	; 3
    30b6:	ed b7       	in	r30, 0x3d	; 61
    30b8:	fe b7       	in	r31, 0x3e	; 62
    30ba:	81 83       	std	Z+1, r24	; 0x01
    30bc:	92 83       	std	Z+2, r25	; 0x02
    30be:	f8 01       	movw	r30, r16
    30c0:	81 a1       	ldd	r24, Z+33	; 0x21
    30c2:	92 a1       	ldd	r25, Z+34	; 0x22
    30c4:	a3 a1       	ldd	r26, Z+35	; 0x23
    30c6:	b4 a1       	ldd	r27, Z+36	; 0x24
    30c8:	ed b7       	in	r30, 0x3d	; 61
    30ca:	fe b7       	in	r31, 0x3e	; 62
    30cc:	83 83       	std	Z+3, r24	; 0x03
    30ce:	94 83       	std	Z+4, r25	; 0x04
    30d0:	a5 83       	std	Z+5, r26	; 0x05
    30d2:	b6 83       	std	Z+6, r27	; 0x06
    30d4:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
    30d8:	8d b7       	in	r24, 0x3d	; 61
    30da:	9e b7       	in	r25, 0x3e	; 62
    30dc:	06 96       	adiw	r24, 0x06	; 6
    30de:	8d bf       	out	0x3d, r24	; 61
    30e0:	9e bf       	out	0x3e, r25	; 62
}
    30e2:	1f 91       	pop	r17
    30e4:	0f 91       	pop	r16
    30e6:	ff 90       	pop	r15
    30e8:	ef 90       	pop	r14
    30ea:	08 95       	ret

000030ec <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    30ec:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    30ee:	00 d0       	rcall	.+0      	; 0x30f0 <cfg_dump+0x4>
    30f0:	0f 92       	push	r0
    30f2:	ed b7       	in	r30, 0x3d	; 61
    30f4:	fe b7       	in	r31, 0x3e	; 62
    30f6:	31 96       	adiw	r30, 0x01	; 1
    30f8:	87 e6       	ldi	r24, 0x67	; 103
    30fa:	96 e0       	ldi	r25, 0x06	; 6
    30fc:	ad b7       	in	r26, 0x3d	; 61
    30fe:	be b7       	in	r27, 0x3e	; 62
    3100:	11 96       	adiw	r26, 0x01	; 1
    3102:	8d 93       	st	X+, r24
    3104:	9c 93       	st	X, r25
    3106:	12 97       	sbiw	r26, 0x02	; 2
    3108:	80 91 46 23 	lds	r24, 0x2346
    310c:	82 83       	std	Z+2, r24	; 0x02
    310e:	13 82       	std	Z+3, r1	; 0x03
    3110:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	80 e4       	ldi	r24, 0x40	; 64
    311a:	96 e0       	ldi	r25, 0x06	; 6
    311c:	ed b7       	in	r30, 0x3d	; 61
    311e:	fe b7       	in	r31, 0x3e	; 62
    3120:	81 83       	std	Z+1, r24	; 0x01
    3122:	92 83       	std	Z+2, r25	; 0x02
    3124:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    3128:	00 d0       	rcall	.+0      	; 0x312a <cfg_dump+0x3e>
    312a:	0f 92       	push	r0
    312c:	86 e1       	ldi	r24, 0x16	; 22
    312e:	96 e0       	ldi	r25, 0x06	; 6
    3130:	ad b7       	in	r26, 0x3d	; 61
    3132:	be b7       	in	r27, 0x3e	; 62
    3134:	11 96       	adiw	r26, 0x01	; 1
    3136:	8d 93       	st	X+, r24
    3138:	9c 93       	st	X, r25
    313a:	12 97       	sbiw	r26, 0x02	; 2
    313c:	80 91 48 23 	lds	r24, 0x2348
    3140:	90 91 49 23 	lds	r25, 0x2349
    3144:	a0 91 4a 23 	lds	r26, 0x234A
    3148:	b0 91 4b 23 	lds	r27, 0x234B
    314c:	ed b7       	in	r30, 0x3d	; 61
    314e:	fe b7       	in	r31, 0x3e	; 62
    3150:	83 83       	std	Z+3, r24	; 0x03
    3152:	94 83       	std	Z+4, r25	; 0x04
    3154:	a5 83       	std	Z+5, r26	; 0x05
    3156:	b6 83       	std	Z+6, r27	; 0x06
    3158:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    315c:	8c ee       	ldi	r24, 0xEC	; 236
    315e:	95 e0       	ldi	r25, 0x05	; 5
    3160:	ad b7       	in	r26, 0x3d	; 61
    3162:	be b7       	in	r27, 0x3e	; 62
    3164:	11 96       	adiw	r26, 0x01	; 1
    3166:	8d 93       	st	X+, r24
    3168:	9c 93       	st	X, r25
    316a:	12 97       	sbiw	r26, 0x02	; 2
    316c:	80 91 50 23 	lds	r24, 0x2350
    3170:	90 91 51 23 	lds	r25, 0x2351
    3174:	a0 91 52 23 	lds	r26, 0x2352
    3178:	b0 91 53 23 	lds	r27, 0x2353
    317c:	ed b7       	in	r30, 0x3d	; 61
    317e:	fe b7       	in	r31, 0x3e	; 62
    3180:	83 83       	std	Z+3, r24	; 0x03
    3182:	94 83       	std	Z+4, r25	; 0x04
    3184:	a5 83       	std	Z+5, r26	; 0x05
    3186:	b6 83       	std	Z+6, r27	; 0x06
    3188:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    318c:	81 ec       	ldi	r24, 0xC1	; 193
    318e:	95 e0       	ldi	r25, 0x05	; 5
    3190:	ad b7       	in	r26, 0x3d	; 61
    3192:	be b7       	in	r27, 0x3e	; 62
    3194:	11 96       	adiw	r26, 0x01	; 1
    3196:	8d 93       	st	X+, r24
    3198:	9c 93       	st	X, r25
    319a:	12 97       	sbiw	r26, 0x02	; 2
    319c:	80 91 4c 23 	lds	r24, 0x234C
    31a0:	90 91 4d 23 	lds	r25, 0x234D
    31a4:	a0 91 4e 23 	lds	r26, 0x234E
    31a8:	b0 91 4f 23 	lds	r27, 0x234F
    31ac:	ed b7       	in	r30, 0x3d	; 61
    31ae:	fe b7       	in	r31, 0x3e	; 62
    31b0:	83 83       	std	Z+3, r24	; 0x03
    31b2:	94 83       	std	Z+4, r25	; 0x04
    31b4:	a5 83       	std	Z+5, r26	; 0x05
    31b6:	b6 83       	std	Z+6, r27	; 0x06
    31b8:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
    31bc:	10 e0       	ldi	r17, 0x00	; 0
    31be:	8d b7       	in	r24, 0x3d	; 61
    31c0:	9e b7       	in	r25, 0x3e	; 62
    31c2:	06 96       	adiw	r24, 0x06	; 6
    31c4:	8d bf       	out	0x3d, r24	; 61
    31c6:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
		_cfg_dump_axis(axis);
    31c8:	81 2f       	mov	r24, r17
    31ca:	0e 94 89 17 	call	0x2f12	; 0x2f12 <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    31ce:	1f 5f       	subi	r17, 0xFF	; 255
    31d0:	14 30       	cpi	r17, 0x04	; 4
    31d2:	d1 f7       	brne	.-12     	; 0x31c8 <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    31d4:	1f 91       	pop	r17
    31d6:	08 95       	ret

000031d8 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    31d8:	cf 92       	push	r12
    31da:	df 92       	push	r13
    31dc:	ef 92       	push	r14
    31de:	ff 92       	push	r15
    31e0:	0f 93       	push	r16
    31e2:	1f 93       	push	r17
    31e4:	df 93       	push	r29
    31e6:	cf 93       	push	r28
    31e8:	0f 92       	push	r0
    31ea:	0f 92       	push	r0
    31ec:	cd b7       	in	r28, 0x3d	; 61
    31ee:	de b7       	in	r29, 0x3e	; 62
    31f0:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    31f2:	19 82       	std	Y+1, r1	; 0x01
    31f4:	1a 82       	std	Y+2, r1	; 0x02
    31f6:	cc 24       	eor	r12, r12
    31f8:	dd 24       	eor	r13, r13
    31fa:	00 e0       	ldi	r16, 0x00	; 0
    31fc:	10 e0       	ldi	r17, 0x00	; 0
    31fe:	22 c0       	rjmp	.+68     	; 0x3244 <cfg_parse+0x6c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = toupper(text[i++])) != 0) {
		if (c == '=') {							// handle separator
    3200:	9d 33       	cpi	r25, 0x3D	; 61
    3202:	49 f4       	brne	.+18     	; 0x3216 <cfg_parse+0x3e>
			text[j++] = 0;						// terminate tag at separator
    3204:	f7 01       	movw	r30, r14
    3206:	e1 0f       	add	r30, r17
    3208:	f1 1d       	adc	r31, r1
    320a:	10 82       	st	Z, r1
    320c:	1f 5f       	subi	r17, 0xFF	; 255
			val = &text[j];						// new string starts at value
    320e:	67 01       	movw	r12, r14
    3210:	c1 0e       	add	r12, r17
    3212:	d1 1c       	adc	r13, r1
    3214:	17 c0       	rjmp	.+46     	; 0x3244 <cfg_parse+0x6c>
		} else if ( (c == '-') || 				// capture special characters
    3216:	9d 32       	cpi	r25, 0x2D	; 45
    3218:	81 f0       	breq	.+32     	; 0x323a <cfg_parse+0x62>
    321a:	9b 32       	cpi	r25, 0x2B	; 43
    321c:	71 f0       	breq	.+28     	; 0x323a <cfg_parse+0x62>
    321e:	9e 32       	cpi	r25, 0x2E	; 46
    3220:	61 f0       	breq	.+24     	; 0x323a <cfg_parse+0x62>
    3222:	9f 33       	cpi	r25, 0x3F	; 63
    3224:	51 f0       	breq	.+20     	; 0x323a <cfg_parse+0x62>
    3226:	98 32       	cpi	r25, 0x28	; 40
    3228:	41 f0       	breq	.+16     	; 0x323a <cfg_parse+0x62>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'A' && c <= 'Z') {		// capture letters
    322a:	89 2f       	mov	r24, r25
    322c:	81 54       	subi	r24, 0x41	; 65
    322e:	8a 31       	cpi	r24, 0x1A	; 26
    3230:	20 f0       	brcs	.+8      	; 0x323a <cfg_parse+0x62>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// capture numbers
    3232:	89 2f       	mov	r24, r25
    3234:	80 53       	subi	r24, 0x30	; 48
    3236:	8a 30       	cpi	r24, 0x0A	; 10
    3238:	28 f4       	brcc	.+10     	; 0x3244 <cfg_parse+0x6c>
			text[j++] = c;
    323a:	f7 01       	movw	r30, r14
    323c:	e1 0f       	add	r30, r17
    323e:	f1 1d       	adc	r31, r1
    3240:	90 83       	st	Z, r25
    3242:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = toupper(text[i++])) != 0) {
    3244:	f7 01       	movw	r30, r14
    3246:	e0 0f       	add	r30, r16
    3248:	f1 1d       	adc	r31, r1
    324a:	0f 5f       	subi	r16, 0xFF	; 255
    324c:	80 81       	ld	r24, Z
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	0e 94 d6 47 	call	0x8fac	; 0x8fac <toupper>
    3254:	98 2f       	mov	r25, r24
    3256:	88 23       	and	r24, r24
    3258:	99 f6       	brne	.-90     	; 0x3200 <cfg_parse+0x28>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// capture numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// nul terminate line
    325a:	f7 01       	movw	r30, r14
    325c:	e1 0f       	add	r30, r17
    325e:	f1 1d       	adc	r31, r1
    3260:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    3262:	1f 5f       	subi	r17, 0xFF	; 255
    3264:	c7 01       	movw	r24, r14
    3266:	81 0f       	add	r24, r17
    3268:	91 1d       	adc	r25, r1
    326a:	89 83       	std	Y+1, r24	; 0x01
    326c:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    326e:	10 92 47 23 	sts	0x2347, r1
	switch (text[0]) {
    3272:	f7 01       	movw	r30, r14
    3274:	80 81       	ld	r24, Z
    3276:	81 35       	cpi	r24, 0x51	; 81
    3278:	d1 f0       	breq	.+52     	; 0x32ae <cfg_parse+0xd6>
    327a:	82 35       	cpi	r24, 0x52	; 82
    327c:	60 f4       	brcc	.+24     	; 0x3296 <cfg_parse+0xbe>
    327e:	81 34       	cpi	r24, 0x41	; 65
    3280:	59 f1       	breq	.+86     	; 0x32d8 <cfg_parse+0x100>
    3282:	82 34       	cpi	r24, 0x42	; 66
    3284:	28 f4       	brcc	.+10     	; 0x3290 <cfg_parse+0xb8>
    3286:	88 32       	cpi	r24, 0x28	; 40
    3288:	11 f1       	breq	.+68     	; 0x32ce <cfg_parse+0xf6>
    328a:	8f 33       	cpi	r24, 0x3F	; 63
    328c:	39 f5       	brne	.+78     	; 0x32dc <cfg_parse+0x104>
    328e:	0c c0       	rjmp	.+24     	; 0x32a8 <cfg_parse+0xd0>
    3290:	8d 34       	cpi	r24, 0x4D	; 77
    3292:	21 f5       	brne	.+72     	; 0x32dc <cfg_parse+0x104>
    3294:	0e c0       	rjmp	.+28     	; 0x32b2 <cfg_parse+0xda>
    3296:	89 35       	cpi	r24, 0x59	; 89
    3298:	29 f0       	breq	.+10     	; 0x32a4 <cfg_parse+0xcc>
    329a:	8a 35       	cpi	r24, 0x5A	; 90
    329c:	d9 f0       	breq	.+54     	; 0x32d4 <cfg_parse+0xfc>
    329e:	88 35       	cpi	r24, 0x58	; 88
    32a0:	e9 f4       	brne	.+58     	; 0x32dc <cfg_parse+0x104>
    32a2:	1f c0       	rjmp	.+62     	; 0x32e2 <cfg_parse+0x10a>
    32a4:	11 e0       	ldi	r17, 0x01	; 1
    32a6:	1e c0       	rjmp	.+60     	; 0x32e4 <cfg_parse+0x10c>
		case '?': cfg_dump(); cfg.status = TG_OK; break;
    32a8:	0e 94 76 18 	call	0x30ec	; 0x30ec <cfg_dump>
    32ac:	10 c0       	rjmp	.+32     	; 0x32ce <cfg_parse+0xf6>
		case '(': cfg.status = TG_OK; break;		// ignore comment lines
		case 'Q': cfg.status = TG_QUIT; break;
    32ae:	8b e0       	ldi	r24, 0x0B	; 11
    32b0:	16 c0       	rjmp	.+44     	; 0x32de <cfg_parse+0x106>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    32b2:	c6 01       	movw	r24, r12
    32b4:	be 01       	movw	r22, r28
    32b6:	6f 5f       	subi	r22, 0xFF	; 255
    32b8:	7f 4f       	sbci	r23, 0xFF	; 255
    32ba:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <strtod>
    32be:	60 93 48 23 	sts	0x2348, r22
    32c2:	70 93 49 23 	sts	0x2349, r23
    32c6:	80 93 4a 23 	sts	0x234A, r24
    32ca:	90 93 4b 23 	sts	0x234B, r25
				  cfg.status = TG_OK; 
    32ce:	10 92 47 23 	sts	0x2347, r1
    32d2:	07 c0       	rjmp	.+14     	; 0x32e2 <cfg_parse+0x10a>
				  break;
    32d4:	12 e0       	ldi	r17, 0x02	; 2
    32d6:	06 c0       	rjmp	.+12     	; 0x32e4 <cfg_parse+0x10c>

		case 'X': axis = X; break;
		case 'Y': axis = Y; break;
		case 'Z': axis = Z; break;
    32d8:	13 e0       	ldi	r17, 0x03	; 3
    32da:	04 c0       	rjmp	.+8      	; 0x32e4 <cfg_parse+0x10c>
		case 'A': axis = A; break;

		default: cfg.status = TG_UNRECOGNIZED_COMMAND; 	// error return
    32dc:	8c e0       	ldi	r24, 0x0C	; 12
    32de:	80 93 47 23 	sts	0x2347, r24
    32e2:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    32e4:	80 91 47 23 	lds	r24, 0x2347
    32e8:	88 23       	and	r24, r24
    32ea:	09 f0       	breq	.+2      	; 0x32ee <cfg_parse+0x116>
    32ec:	ee c0       	rjmp	.+476    	; 0x34ca <cfg_parse+0x2f2>
		cfg.status = TG_OK;							// pre-emptive setting
    32ee:	10 92 47 23 	sts	0x2347, r1
		switch (text[1]) {
    32f2:	f7 01       	movw	r30, r14
    32f4:	81 81       	ldd	r24, Z+1	; 0x01
    32f6:	8c 34       	cpi	r24, 0x4C	; 76
    32f8:	09 f4       	brne	.+2      	; 0x32fc <cfg_parse+0x124>
    32fa:	b8 c0       	rjmp	.+368    	; 0x346c <cfg_parse+0x294>
    32fc:	8d 34       	cpi	r24, 0x4D	; 77
    32fe:	30 f4       	brcc	.+12     	; 0x330c <cfg_parse+0x134>
    3300:	84 34       	cpi	r24, 0x44	; 68
    3302:	a9 f1       	breq	.+106    	; 0x336e <cfg_parse+0x196>
    3304:	86 34       	cpi	r24, 0x46	; 70
    3306:	09 f0       	breq	.+2      	; 0x330a <cfg_parse+0x132>
    3308:	dd c0       	rjmp	.+442    	; 0x34c4 <cfg_parse+0x2ec>
    330a:	1d c0       	rjmp	.+58     	; 0x3346 <cfg_parse+0x16e>
    330c:	80 35       	cpi	r24, 0x50	; 80
    330e:	09 f4       	brne	.+2      	; 0x3312 <cfg_parse+0x13a>
    3310:	47 c0       	rjmp	.+142    	; 0x33a0 <cfg_parse+0x1c8>
    3312:	83 35       	cpi	r24, 0x53	; 83
    3314:	21 f0       	breq	.+8      	; 0x331e <cfg_parse+0x146>
    3316:	8d 34       	cpi	r24, 0x4D	; 77
    3318:	09 f0       	breq	.+2      	; 0x331c <cfg_parse+0x144>
    331a:	d4 c0       	rjmp	.+424    	; 0x34c4 <cfg_parse+0x2ec>
    331c:	58 c0       	rjmp	.+176    	; 0x33ce <cfg_parse+0x1f6>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    331e:	c6 01       	movw	r24, r12
    3320:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <atoi>
    3324:	21 2f       	mov	r18, r17
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	f9 01       	movw	r30, r18
    332a:	ee 0f       	add	r30, r30
    332c:	ff 1f       	adc	r31, r31
    332e:	e2 0f       	add	r30, r18
    3330:	f3 1f       	adc	r31, r19
    3332:	23 e0       	ldi	r18, 0x03	; 3
    3334:	ee 0f       	add	r30, r30
    3336:	ff 1f       	adc	r31, r31
    3338:	2a 95       	dec	r18
    333a:	e1 f7       	brne	.-8      	; 0x3334 <cfg_parse+0x15c>
    333c:	ea 5b       	subi	r30, 0xBA	; 186
    333e:	fc 4d       	sbci	r31, 0xDC	; 220
    3340:	81 8b       	std	Z+17, r24	; 0x11
    3342:	92 8b       	std	Z+18, r25	; 0x12
    3344:	c2 c0       	rjmp	.+388    	; 0x34ca <cfg_parse+0x2f2>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    3346:	c6 01       	movw	r24, r12
    3348:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <atoi>
    334c:	21 2f       	mov	r18, r17
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	f9 01       	movw	r30, r18
    3352:	ee 0f       	add	r30, r30
    3354:	ff 1f       	adc	r31, r31
    3356:	e2 0f       	add	r30, r18
    3358:	f3 1f       	adc	r31, r19
    335a:	13 e0       	ldi	r17, 0x03	; 3
    335c:	ee 0f       	add	r30, r30
    335e:	ff 1f       	adc	r31, r31
    3360:	1a 95       	dec	r17
    3362:	e1 f7       	brne	.-8      	; 0x335c <cfg_parse+0x184>
    3364:	ea 5b       	subi	r30, 0xBA	; 186
    3366:	fc 4d       	sbci	r31, 0xDC	; 220
    3368:	83 8b       	std	Z+19, r24	; 0x13
    336a:	94 8b       	std	Z+20, r25	; 0x14
    336c:	ae c0       	rjmp	.+348    	; 0x34ca <cfg_parse+0x2f2>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    336e:	c6 01       	movw	r24, r12
    3370:	be 01       	movw	r22, r28
    3372:	6f 5f       	subi	r22, 0xFF	; 255
    3374:	7f 4f       	sbci	r23, 0xFF	; 255
    3376:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <strtod>
    337a:	21 2f       	mov	r18, r17
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	f9 01       	movw	r30, r18
    3380:	ee 0f       	add	r30, r30
    3382:	ff 1f       	adc	r31, r31
    3384:	e2 0f       	add	r30, r18
    3386:	f3 1f       	adc	r31, r19
    3388:	a3 e0       	ldi	r26, 0x03	; 3
    338a:	ee 0f       	add	r30, r30
    338c:	ff 1f       	adc	r31, r31
    338e:	aa 95       	dec	r26
    3390:	e1 f7       	brne	.-8      	; 0x338a <cfg_parse+0x1b2>
    3392:	ea 5b       	subi	r30, 0xBA	; 186
    3394:	fc 4d       	sbci	r31, 0xDC	; 220
    3396:	65 8b       	std	Z+21, r22	; 0x15
    3398:	76 8b       	std	Z+22, r23	; 0x16
    339a:	87 8b       	std	Z+23, r24	; 0x17
    339c:	90 8f       	std	Z+24, r25	; 0x18
    339e:	95 c0       	rjmp	.+298    	; 0x34ca <cfg_parse+0x2f2>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    33a0:	c6 01       	movw	r24, r12
    33a2:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <atoi>
    33a6:	68 2f       	mov	r22, r24
    33a8:	81 2f       	mov	r24, r17
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	fc 01       	movw	r30, r24
    33ae:	ee 0f       	add	r30, r30
    33b0:	ff 1f       	adc	r31, r31
    33b2:	e8 0f       	add	r30, r24
    33b4:	f9 1f       	adc	r31, r25
    33b6:	53 e0       	ldi	r21, 0x03	; 3
    33b8:	ee 0f       	add	r30, r30
    33ba:	ff 1f       	adc	r31, r31
    33bc:	5a 95       	dec	r21
    33be:	e1 f7       	brne	.-8      	; 0x33b8 <cfg_parse+0x1e0>
    33c0:	ea 5b       	subi	r30, 0xBA	; 186
    33c2:	fc 4d       	sbci	r31, 0xDC	; 220
    33c4:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    33c6:	81 2f       	mov	r24, r17
    33c8:	0e 94 2c 24 	call	0x4858	; 0x4858 <st_set_polarity>
    33cc:	7e c0       	rjmp	.+252    	; 0x34ca <cfg_parse+0x2f2>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    33ce:	f7 01       	movw	r30, r14
    33d0:	82 81       	ldd	r24, Z+2	; 0x02
    33d2:	89 34       	cpi	r24, 0x49	; 73
    33d4:	99 f4       	brne	.+38     	; 0x33fc <cfg_parse+0x224>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    33d6:	c6 01       	movw	r24, r12
    33d8:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <atoi>
    33dc:	21 2f       	mov	r18, r17
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	f9 01       	movw	r30, r18
    33e2:	ee 0f       	add	r30, r30
    33e4:	ff 1f       	adc	r31, r31
    33e6:	e2 0f       	add	r30, r18
    33e8:	f3 1f       	adc	r31, r19
    33ea:	93 e0       	ldi	r25, 0x03	; 3
    33ec:	ee 0f       	add	r30, r30
    33ee:	ff 1f       	adc	r31, r31
    33f0:	9a 95       	dec	r25
    33f2:	e1 f7       	brne	.-8      	; 0x33ec <cfg_parse+0x214>
    33f4:	ea 5b       	subi	r30, 0xBA	; 186
    33f6:	fc 4d       	sbci	r31, 0xDC	; 220
    33f8:	86 87       	std	Z+14, r24	; 0x0e
    33fa:	67 c0       	rjmp	.+206    	; 0x34ca <cfg_parse+0x2f2>
				} else if (text[3] == 'R') {
    33fc:	f7 01       	movw	r30, r14
    33fe:	83 81       	ldd	r24, Z+3	; 0x03
    3400:	82 35       	cpi	r24, 0x52	; 82
    3402:	c9 f4       	brne	.+50     	; 0x3436 <cfg_parse+0x25e>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    3404:	c6 01       	movw	r24, r12
    3406:	be 01       	movw	r22, r28
    3408:	6f 5f       	subi	r22, 0xFF	; 255
    340a:	7f 4f       	sbci	r23, 0xFF	; 255
    340c:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <strtod>
    3410:	21 2f       	mov	r18, r17
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	f9 01       	movw	r30, r18
    3416:	ee 0f       	add	r30, r30
    3418:	ff 1f       	adc	r31, r31
    341a:	e2 0f       	add	r30, r18
    341c:	f3 1f       	adc	r31, r19
    341e:	13 e0       	ldi	r17, 0x03	; 3
    3420:	ee 0f       	add	r30, r30
    3422:	ff 1f       	adc	r31, r31
    3424:	1a 95       	dec	r17
    3426:	e1 f7       	brne	.-8      	; 0x3420 <cfg_parse+0x248>
    3428:	ea 5b       	subi	r30, 0xBA	; 186
    342a:	fc 4d       	sbci	r31, 0xDC	; 220
    342c:	61 8f       	std	Z+25, r22	; 0x19
    342e:	72 8f       	std	Z+26, r23	; 0x1a
    3430:	83 8f       	std	Z+27, r24	; 0x1b
    3432:	94 8f       	std	Z+28, r25	; 0x1c
    3434:	4a c0       	rjmp	.+148    	; 0x34ca <cfg_parse+0x2f2>
				} else if (text[3] == 'T') {
    3436:	84 35       	cpi	r24, 0x54	; 84
    3438:	c9 f4       	brne	.+50     	; 0x346c <cfg_parse+0x294>
					CFG(axis).mm_travel = strtod(val, &end); break;
    343a:	c6 01       	movw	r24, r12
    343c:	be 01       	movw	r22, r28
    343e:	6f 5f       	subi	r22, 0xFF	; 255
    3440:	7f 4f       	sbci	r23, 0xFF	; 255
    3442:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <strtod>
    3446:	21 2f       	mov	r18, r17
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	f9 01       	movw	r30, r18
    344c:	ee 0f       	add	r30, r30
    344e:	ff 1f       	adc	r31, r31
    3450:	e2 0f       	add	r30, r18
    3452:	f3 1f       	adc	r31, r19
    3454:	a3 e0       	ldi	r26, 0x03	; 3
    3456:	ee 0f       	add	r30, r30
    3458:	ff 1f       	adc	r31, r31
    345a:	aa 95       	dec	r26
    345c:	e1 f7       	brne	.-8      	; 0x3456 <cfg_parse+0x27e>
    345e:	ea 5b       	subi	r30, 0xBA	; 186
    3460:	fc 4d       	sbci	r31, 0xDC	; 220
    3462:	65 8f       	std	Z+29, r22	; 0x1d
    3464:	76 8f       	std	Z+30, r23	; 0x1e
    3466:	87 8f       	std	Z+31, r24	; 0x1f
    3468:	90 a3       	std	Z+32, r25	; 0x20
    346a:	2f c0       	rjmp	.+94     	; 0x34ca <cfg_parse+0x2f2>
				}
			case 'L': 
				if (text[2] == 'O') {
    346c:	f7 01       	movw	r30, r14
    346e:	82 81       	ldd	r24, Z+2	; 0x02
    3470:	8f 34       	cpi	r24, 0x4F	; 79
    3472:	99 f4       	brne	.+38     	; 0x349a <cfg_parse+0x2c2>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    3474:	c6 01       	movw	r24, r12
    3476:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <atoi>
    347a:	21 2f       	mov	r18, r17
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	f9 01       	movw	r30, r18
    3480:	ee 0f       	add	r30, r30
    3482:	ff 1f       	adc	r31, r31
    3484:	e2 0f       	add	r30, r18
    3486:	f3 1f       	adc	r31, r19
    3488:	53 e0       	ldi	r21, 0x03	; 3
    348a:	ee 0f       	add	r30, r30
    348c:	ff 1f       	adc	r31, r31
    348e:	5a 95       	dec	r21
    3490:	e1 f7       	brne	.-8      	; 0x348a <cfg_parse+0x2b2>
    3492:	ea 5b       	subi	r30, 0xBA	; 186
    3494:	fc 4d       	sbci	r31, 0xDC	; 220
    3496:	87 87       	std	Z+15, r24	; 0x0f
    3498:	18 c0       	rjmp	.+48     	; 0x34ca <cfg_parse+0x2f2>
				} else if (text[2] == 'I') {
    349a:	89 34       	cpi	r24, 0x49	; 73
    349c:	99 f4       	brne	.+38     	; 0x34c4 <cfg_parse+0x2ec>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    349e:	c6 01       	movw	r24, r12
    34a0:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <atoi>
    34a4:	21 2f       	mov	r18, r17
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	f9 01       	movw	r30, r18
    34aa:	ee 0f       	add	r30, r30
    34ac:	ff 1f       	adc	r31, r31
    34ae:	e2 0f       	add	r30, r18
    34b0:	f3 1f       	adc	r31, r19
    34b2:	23 e0       	ldi	r18, 0x03	; 3
    34b4:	ee 0f       	add	r30, r30
    34b6:	ff 1f       	adc	r31, r31
    34b8:	2a 95       	dec	r18
    34ba:	e1 f7       	brne	.-8      	; 0x34b4 <cfg_parse+0x2dc>
    34bc:	ea 5b       	subi	r30, 0xBA	; 186
    34be:	fc 4d       	sbci	r31, 0xDC	; 220
    34c0:	85 a3       	std	Z+37, r24	; 0x25
    34c2:	03 c0       	rjmp	.+6      	; 0x34ca <cfg_parse+0x2f2>
				}

			default: cfg.status = TG_UNRECOGNIZED_COMMAND;	// error return
    34c4:	8c e0       	ldi	r24, 0x0C	; 12
    34c6:	80 93 47 23 	sts	0x2347, r24
		}
	}
//	cfg_write();
	return (cfg.status);
}
    34ca:	80 91 47 23 	lds	r24, 0x2347
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	0f 90       	pop	r0
    34d2:	0f 90       	pop	r0
    34d4:	cf 91       	pop	r28
    34d6:	df 91       	pop	r29
    34d8:	1f 91       	pop	r17
    34da:	0f 91       	pop	r16
    34dc:	ff 90       	pop	r15
    34de:	ef 90       	pop	r14
    34e0:	df 90       	pop	r13
    34e2:	cf 90       	pop	r12
    34e4:	08 95       	ret

000034e6 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    34e6:	ef 92       	push	r14
    34e8:	ff 92       	push	r15
    34ea:	0f 93       	push	r16
    34ec:	1f 93       	push	r17
    34ee:	df 93       	push	r29
    34f0:	cf 93       	push	r28
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
    34f6:	a8 97       	sbiw	r28, 0x28	; 40
    34f8:	cd bf       	out	0x3d, r28	; 61
    34fa:	de bf       	out	0x3e, r29	; 62
    34fc:	0f e4       	ldi	r16, 0x4F	; 79
    34fe:	12 e0       	ldi	r17, 0x02	; 2
    3500:	a0 e0       	ldi	r26, 0x00	; 0
    3502:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    3504:	7e 01       	movw	r14, r28
    3506:	08 94       	sec
    3508:	e1 1c       	adc	r14, r1
    350a:	f1 1c       	adc	r15, r1
    350c:	02 c0       	rjmp	.+4      	; 0x3512 <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    350e:	0f 5f       	subi	r16, 0xFF	; 255
    3510:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    3512:	f8 01       	movw	r30, r16
    3514:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    3516:	88 23       	and	r24, r24
    3518:	89 f4       	brne	.+34     	; 0x353c <cfg_test+0x56>
			text[j] = 0;
    351a:	ce 01       	movw	r24, r28
    351c:	01 96       	adiw	r24, 0x01	; 1
    351e:	a8 0f       	add	r26, r24
    3520:	b9 1f       	adc	r27, r25
    3522:	1c 92       	st	X, r1
			cfg_parse(text);
    3524:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    3528:	a8 96       	adiw	r28, 0x28	; 40
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	de bf       	out	0x3e, r29	; 62
    352e:	cf 91       	pop	r28
    3530:	df 91       	pop	r29
    3532:	1f 91       	pop	r17
    3534:	0f 91       	pop	r16
    3536:	ff 90       	pop	r15
    3538:	ef 90       	pop	r14
    353a:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    353c:	8d 30       	cpi	r24, 0x0D	; 13
    353e:	21 f0       	breq	.+8      	; 0x3548 <cfg_test+0x62>
    3540:	8a 30       	cpi	r24, 0x0A	; 10
    3542:	11 f0       	breq	.+4      	; 0x3548 <cfg_test+0x62>
    3544:	8b 33       	cpi	r24, 0x3B	; 59
    3546:	49 f4       	brne	.+18     	; 0x355a <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    3548:	ae 0d       	add	r26, r14
    354a:	bf 1d       	adc	r27, r15
    354c:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    354e:	c7 01       	movw	r24, r14
    3550:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <cfg_parse>
    3554:	a0 e0       	ldi	r26, 0x00	; 0
    3556:	b0 e0       	ldi	r27, 0x00	; 0
    3558:	da cf       	rjmp	.-76     	; 0x350e <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    355a:	81 32       	cpi	r24, 0x21	; 33
    355c:	c0 f2       	brcs	.-80     	; 0x350e <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    355e:	f7 01       	movw	r30, r14
    3560:	ea 0f       	add	r30, r26
    3562:	fb 1f       	adc	r31, r27
    3564:	80 83       	st	Z, r24
    3566:	11 96       	adiw	r26, 0x01	; 1
    3568:	d2 cf       	rjmp	.-92     	; 0x350e <cfg_test+0x28>

0000356a <en_init>:


void en_init(void) 
{
	return;
}
    356a:	08 95       	ret

0000356c <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
    356c:	88 23       	and	r24, r24
    356e:	b1 f0       	breq	.+44     	; 0x359c <en_write+0x30>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    3570:	e0 91 42 23 	lds	r30, 0x2342
    3574:	f0 91 43 23 	lds	r31, 0x2343
    3578:	80 e2       	ldi	r24, 0x20	; 32
    357a:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    357c:	e0 91 32 23 	lds	r30, 0x2332
    3580:	f0 91 33 23 	lds	r31, 0x2333
    3584:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    3586:	e0 91 22 23 	lds	r30, 0x2322
    358a:	f0 91 23 23 	lds	r31, 0x2323
    358e:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    3590:	e0 91 12 23 	lds	r30, 0x2312
    3594:	f0 91 13 23 	lds	r31, 0x2313
    3598:	85 83       	std	Z+5, r24	; 0x05
    359a:	08 95       	ret
void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    359c:	e0 91 42 23 	lds	r30, 0x2342
    35a0:	f0 91 43 23 	lds	r31, 0x2343
    35a4:	80 e2       	ldi	r24, 0x20	; 32
    35a6:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    35a8:	e0 91 32 23 	lds	r30, 0x2332
    35ac:	f0 91 33 23 	lds	r31, 0x2333
    35b0:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    35b2:	e0 91 22 23 	lds	r30, 0x2322
    35b6:	f0 91 23 23 	lds	r31, 0x2323
    35ba:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    35bc:	e0 91 12 23 	lds	r30, 0x2312
    35c0:	f0 91 13 23 	lds	r31, 0x2313
    35c4:	86 83       	std	Z+6, r24	; 0x06
    35c6:	08 95       	ret

000035c8 <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    35c8:	0f 93       	push	r16
    35ca:	df 93       	push	r29
    35cc:	cf 93       	push	r28
    35ce:	0f 92       	push	r0
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    35d4:	8b ec       	ldi	r24, 0xCB	; 203
    35d6:	e0 e5       	ldi	r30, 0x50	; 80
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    35dc:	88 e0       	ldi	r24, 0x08	; 8
    35de:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    35e2:	80 91 51 00 	lds	r24, 0x0051
    35e6:	83 ff       	sbrs	r24, 3
    35e8:	fc cf       	rjmp	.-8      	; 0x35e2 <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    35ea:	82 ec       	ldi	r24, 0xC2	; 194
    35ec:	e0 e5       	ldi	r30, 0x50	; 80
    35ee:	f0 e0       	ldi	r31, 0x00	; 0
    35f0:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    35f2:	88 e1       	ldi	r24, 0x18	; 24
    35f4:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    35f8:	80 91 51 00 	lds	r24, 0x0051
    35fc:	84 ff       	sbrs	r24, 4
    35fe:	fc cf       	rjmp	.-8      	; 0x35f8 <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3600:	8f b7       	in	r24, 0x3f	; 63
    3602:	89 83       	std	Y+1, r24	; 0x01
    3604:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3606:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3608:	24 e0       	ldi	r18, 0x04	; 4
    360a:	80 e4       	ldi	r24, 0x40	; 64
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	fc 01       	movw	r30, r24
    3610:	08 ed       	ldi	r16, 0xD8	; 216
    3612:	04 bf       	out	0x34, r16	; 52
    3614:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3616:	89 81       	ldd	r24, Y+1	; 0x01
    3618:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    361a:	80 91 50 00 	lds	r24, 0x0050
    361e:	8e 7f       	andi	r24, 0xFE	; 254
    3620:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    3624:	0f 90       	pop	r0
    3626:	cf 91       	pop	r28
    3628:	df 91       	pop	r29
    362a:	0f 91       	pop	r16
    362c:	08 95       	ret

0000362e <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    362e:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <xmega_init_clocks>
}
    3632:	08 95       	ret

00003634 <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3634:	0f 93       	push	r16
    3636:	df 93       	push	r29
    3638:	cf 93       	push	r28
    363a:	0f 92       	push	r0
    363c:	cd b7       	in	r28, 0x3d	; 61
    363e:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3640:	2f b7       	in	r18, 0x3f	; 63
    3642:	29 83       	std	Y+1, r18	; 0x01
    3644:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3646:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3648:	fc 01       	movw	r30, r24
    364a:	08 ed       	ldi	r16, 0xD8	; 216
    364c:	04 bf       	out	0x34, r16	; 52
    364e:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	8f bf       	out	0x3f, r24	; 63
#endif
}
    3654:	0f 90       	pop	r0
    3656:	cf 91       	pop	r28
    3658:	df 91       	pop	r29
    365a:	0f 91       	pop	r16
    365c:	08 95       	ret

0000365e <mc_motion_stop>:
 * mc_motion_stop() - stop all current motions
 */

int mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    365e:	10 92 58 21 	sts	0x2158, r1
	ma.arc_state = MC_STATE_OFF;
    3662:	10 92 b4 23 	sts	0x23B4, r1
	return (TG_OK);
}
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	08 95       	ret

0000366c <mc_go_home>:
 */

int mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    366c:	8c e0       	ldi	r24, 0x0C	; 12
    366e:	e9 e5       	ldi	r30, 0x59	; 89
    3670:	f1 e2       	ldi	r31, 0x21	; 33
    3672:	df 01       	movw	r26, r30
    3674:	1d 92       	st	X+, r1
    3676:	8a 95       	dec	r24
    3678:	e9 f7       	brne	.-6      	; 0x3674 <mc_go_home+0x8>
	return (TG_OK);
}
    367a:	80 e0       	ldi	r24, 0x00	; 0
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	08 95       	ret

00003680 <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    3680:	8c e0       	ldi	r24, 0x0C	; 12
    3682:	e9 e5       	ldi	r30, 0x59	; 89
    3684:	f1 e2       	ldi	r31, 0x21	; 33
    3686:	df 01       	movw	r26, r30
    3688:	1d 92       	st	X+, r1
    368a:	8a 95       	dec	r24
    368c:	e9 f7       	brne	.-6      	; 0x3688 <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    368e:	10 92 58 21 	sts	0x2158, r1
	ma.arc_state = MC_STATE_OFF;
    3692:	10 92 b4 23 	sts	0x23B4, r1
}
    3696:	08 95       	ret

00003698 <mc_line_continue>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continue() 
{
    3698:	af 92       	push	r10
    369a:	bf 92       	push	r11
    369c:	cf 92       	push	r12
    369e:	df 92       	push	r13
    36a0:	ef 92       	push	r14
    36a2:	ff 92       	push	r15
    36a4:	0f 93       	push	r16
    36a6:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    36a8:	80 91 58 21 	lds	r24, 0x2158
    36ac:	88 23       	and	r24, r24
    36ae:	19 f4       	brne	.+6      	; 0x36b6 <mc_line_continue+0x1e>
    36b0:	23 e0       	ldi	r18, 0x03	; 3
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	30 c0       	rjmp	.+96     	; 0x3716 <mc_line_continue+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    36b6:	82 e0       	ldi	r24, 0x02	; 2
    36b8:	80 93 58 21 	sts	0x2158, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    36bc:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <mv_test_move_buffer_full>
    36c0:	88 23       	and	r24, r24
    36c2:	19 f0       	breq	.+6      	; 0x36ca <mc_line_continue+0x32>
    36c4:	22 e0       	ldi	r18, 0x02	; 2
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	26 c0       	rjmp	.+76     	; 0x3716 <mc_line_continue+0x7e>
		return (TG_EAGAIN);
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    36ca:	60 91 71 21 	lds	r22, 0x2171
    36ce:	70 91 72 21 	lds	r23, 0x2172
    36d2:	80 91 73 21 	lds	r24, 0x2173
    36d6:	90 91 74 21 	lds	r25, 0x2174
    36da:	20 91 75 21 	lds	r18, 0x2175
    36de:	30 91 76 21 	lds	r19, 0x2176
    36e2:	40 91 77 21 	lds	r20, 0x2177
    36e6:	50 91 78 21 	lds	r21, 0x2178
    36ea:	e0 90 79 21 	lds	r14, 0x2179
    36ee:	f0 90 7a 21 	lds	r15, 0x217A
    36f2:	00 91 7b 21 	lds	r16, 0x217B
    36f6:	10 91 7c 21 	lds	r17, 0x217C
    36fa:	a0 90 7d 21 	lds	r10, 0x217D
    36fe:	b0 90 7e 21 	lds	r11, 0x217E
    3702:	c0 90 7f 21 	lds	r12, 0x217F
    3706:	d0 90 80 21 	lds	r13, 0x2180
    370a:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    370e:	10 92 58 21 	sts	0x2158, r1
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3716:	c9 01       	movw	r24, r18
    3718:	1f 91       	pop	r17
    371a:	0f 91       	pop	r16
    371c:	ff 90       	pop	r15
    371e:	ef 90       	pop	r14
    3720:	df 90       	pop	r13
    3722:	cf 90       	pop	r12
    3724:	bf 90       	pop	r11
    3726:	af 90       	pop	r10
    3728:	08 95       	ret

0000372a <mc_dwell>:
 * NOTE: It's not necessary to set the target as this is set correctly in the Gcode. 
 */

int mc_dwell(double seconds) 
{
	mc.steps[X] = 0;
    372a:	10 92 71 21 	sts	0x2171, r1
    372e:	10 92 72 21 	sts	0x2172, r1
    3732:	10 92 73 21 	sts	0x2173, r1
    3736:	10 92 74 21 	sts	0x2174, r1
	mc.steps[Y] = 0;
    373a:	10 92 75 21 	sts	0x2175, r1
    373e:	10 92 76 21 	sts	0x2176, r1
    3742:	10 92 77 21 	sts	0x2177, r1
    3746:	10 92 78 21 	sts	0x2178, r1
	mc.steps[Z] = 0;
    374a:	10 92 79 21 	sts	0x2179, r1
    374e:	10 92 7a 21 	sts	0x217A, r1
    3752:	10 92 7b 21 	sts	0x217B, r1
    3756:	10 92 7c 21 	sts	0x217C, r1
	mc.mm_of_travel = 0;	// not actually used, but makes debug make more sense
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	40 e0       	ldi	r20, 0x00	; 0
    3760:	50 e0       	ldi	r21, 0x00	; 0
    3762:	20 93 81 21 	sts	0x2181, r18
    3766:	30 93 82 21 	sts	0x2182, r19
    376a:	40 93 83 21 	sts	0x2183, r20
    376e:	50 93 84 21 	sts	0x2184, r21
	mc.microseconds = trunc(seconds*1000000);
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	34 e2       	ldi	r19, 0x24	; 36
    3776:	44 e7       	ldi	r20, 0x74	; 116
    3778:	59 e4       	ldi	r21, 0x49	; 73
    377a:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    377e:	0e 94 d3 41 	call	0x83a6	; 0x83a6 <__fixunssfsi>
    3782:	60 93 7d 21 	sts	0x217D, r22
    3786:	70 93 7e 21 	sts	0x217E, r23
    378a:	80 93 7f 21 	sts	0x217F, r24
    378e:	90 93 80 21 	sts	0x2180, r25
	mc.line_state = MC_STATE_NEW;
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	80 93 58 21 	sts	0x2158, r24
	return (mc_line_continue());
    3798:	0e 94 4c 1b 	call	0x3698	; 0x3698 <mc_line_continue>
}
    379c:	08 95       	ret

0000379e <mc_line>:
 * Zero length lines that are actually dwells come in thru mc_dwell().
 * The mv_queue doesn't check line length and queues anything.
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    379e:	2f 92       	push	r2
    37a0:	3f 92       	push	r3
    37a2:	4f 92       	push	r4
    37a4:	5f 92       	push	r5
    37a6:	6f 92       	push	r6
    37a8:	7f 92       	push	r7
    37aa:	8f 92       	push	r8
    37ac:	9f 92       	push	r9
    37ae:	af 92       	push	r10
    37b0:	bf 92       	push	r11
    37b2:	cf 92       	push	r12
    37b4:	df 92       	push	r13
    37b6:	ef 92       	push	r14
    37b8:	ff 92       	push	r15
    37ba:	0f 93       	push	r16
    37bc:	1f 93       	push	r17
    37be:	df 93       	push	r29
    37c0:	cf 93       	push	r28
    37c2:	cd b7       	in	r28, 0x3d	; 61
    37c4:	de b7       	in	r29, 0x3e	; 62
    37c6:	62 97       	sbiw	r28, 0x12	; 18
    37c8:	cd bf       	out	0x3d, r28	; 61
    37ca:	de bf       	out	0x3e, r29	; 62
    37cc:	19 01       	movw	r2, r18
    37ce:	2a 01       	movw	r4, r20
    37d0:	ad 86       	std	Y+13, r10	; 0x0d
    37d2:	be 86       	std	Y+14, r11	; 0x0e
    37d4:	cf 86       	std	Y+15, r12	; 0x0f
    37d6:	d8 8a       	std	Y+16, r13	; 0x10
    37d8:	89 8a       	std	Y+17, r8	; 0x11
    37da:	9a 8a       	std	Y+18, r9	; 0x12
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    37dc:	20 91 67 23 	lds	r18, 0x2367
    37e0:	30 91 68 23 	lds	r19, 0x2368
    37e4:	40 91 69 23 	lds	r20, 0x2369
    37e8:	50 91 6a 23 	lds	r21, 0x236A
    37ec:	29 87       	std	Y+9, r18	; 0x09
    37ee:	3a 87       	std	Y+10, r19	; 0x0a
    37f0:	4b 87       	std	Y+11, r20	; 0x0b
    37f2:	5c 87       	std	Y+12, r21	; 0x0c
    37f4:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    37f8:	0e 94 f1 43 	call	0x87e2	; 0x87e2 <lround>
    37fc:	3b 01       	movw	r6, r22
    37fe:	4c 01       	movw	r8, r24
    3800:	60 92 65 21 	sts	0x2165, r6
    3804:	70 92 66 21 	sts	0x2166, r7
    3808:	80 92 67 21 	sts	0x2167, r8
    380c:	90 92 68 21 	sts	0x2168, r9
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    3810:	80 91 7f 23 	lds	r24, 0x237F
    3814:	90 91 80 23 	lds	r25, 0x2380
    3818:	a0 91 81 23 	lds	r26, 0x2381
    381c:	b0 91 82 23 	lds	r27, 0x2382
    3820:	8d 83       	std	Y+5, r24	; 0x05
    3822:	9e 83       	std	Y+6, r25	; 0x06
    3824:	af 83       	std	Y+7, r26	; 0x07
    3826:	b8 87       	std	Y+8, r27	; 0x08
    3828:	c2 01       	movw	r24, r4
    382a:	b1 01       	movw	r22, r2
    382c:	2d 81       	ldd	r18, Y+5	; 0x05
    382e:	3e 81       	ldd	r19, Y+6	; 0x06
    3830:	4f 81       	ldd	r20, Y+7	; 0x07
    3832:	58 85       	ldd	r21, Y+8	; 0x08
    3834:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    3838:	0e 94 f1 43 	call	0x87e2	; 0x87e2 <lround>
    383c:	5b 01       	movw	r10, r22
    383e:	6c 01       	movw	r12, r24
    3840:	a0 92 69 21 	sts	0x2169, r10
    3844:	b0 92 6a 21 	sts	0x216A, r11
    3848:	c0 92 6b 21 	sts	0x216B, r12
    384c:	d0 92 6c 21 	sts	0x216C, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    3850:	20 91 97 23 	lds	r18, 0x2397
    3854:	30 91 98 23 	lds	r19, 0x2398
    3858:	40 91 99 23 	lds	r20, 0x2399
    385c:	50 91 9a 23 	lds	r21, 0x239A
    3860:	29 83       	std	Y+1, r18	; 0x01
    3862:	3a 83       	std	Y+2, r19	; 0x02
    3864:	4b 83       	std	Y+3, r20	; 0x03
    3866:	5c 83       	std	Y+4, r21	; 0x04
    3868:	c8 01       	movw	r24, r16
    386a:	b7 01       	movw	r22, r14
    386c:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    3870:	0e 94 f1 43 	call	0x87e2	; 0x87e2 <lround>
    3874:	9b 01       	movw	r18, r22
    3876:	ac 01       	movw	r20, r24
    3878:	20 93 6d 21 	sts	0x216D, r18
    387c:	30 93 6e 21 	sts	0x216E, r19
    3880:	40 93 6f 21 	sts	0x216F, r20
    3884:	50 93 70 21 	sts	0x2170, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    3888:	80 91 59 21 	lds	r24, 0x2159
    388c:	90 91 5a 21 	lds	r25, 0x215A
    3890:	a0 91 5b 21 	lds	r26, 0x215B
    3894:	b0 91 5c 21 	lds	r27, 0x215C
    3898:	84 01       	movw	r16, r8
    389a:	73 01       	movw	r14, r6
    389c:	e8 1a       	sub	r14, r24
    389e:	f9 0a       	sbc	r15, r25
    38a0:	0a 0b       	sbc	r16, r26
    38a2:	1b 0b       	sbc	r17, r27
    38a4:	e0 92 71 21 	sts	0x2171, r14
    38a8:	f0 92 72 21 	sts	0x2172, r15
    38ac:	00 93 73 21 	sts	0x2173, r16
    38b0:	10 93 74 21 	sts	0x2174, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    38b4:	80 91 5d 21 	lds	r24, 0x215D
    38b8:	90 91 5e 21 	lds	r25, 0x215E
    38bc:	a0 91 5f 21 	lds	r26, 0x215F
    38c0:	b0 91 60 21 	lds	r27, 0x2160
    38c4:	a8 1a       	sub	r10, r24
    38c6:	b9 0a       	sbc	r11, r25
    38c8:	ca 0a       	sbc	r12, r26
    38ca:	db 0a       	sbc	r13, r27
    38cc:	a0 92 75 21 	sts	0x2175, r10
    38d0:	b0 92 76 21 	sts	0x2176, r11
    38d4:	c0 92 77 21 	sts	0x2177, r12
    38d8:	d0 92 78 21 	sts	0x2178, r13
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    38dc:	80 91 61 21 	lds	r24, 0x2161
    38e0:	90 91 62 21 	lds	r25, 0x2162
    38e4:	a0 91 63 21 	lds	r26, 0x2163
    38e8:	b0 91 64 21 	lds	r27, 0x2164
    38ec:	19 01       	movw	r2, r18
    38ee:	2a 01       	movw	r4, r20
    38f0:	28 1a       	sub	r2, r24
    38f2:	39 0a       	sbc	r3, r25
    38f4:	4a 0a       	sbc	r4, r26
    38f6:	5b 0a       	sbc	r5, r27
    38f8:	20 92 79 21 	sts	0x2179, r2
    38fc:	30 92 7a 21 	sts	0x217A, r3
    3900:	40 92 7b 21 	sts	0x217B, r4
    3904:	50 92 7c 21 	sts	0x217C, r5

	// skip zero length lines
	if ((mc.steps[X] + mc.steps[Y] + mc.steps[Z]) == 0) {
    3908:	d6 01       	movw	r26, r12
    390a:	c5 01       	movw	r24, r10
    390c:	8e 0d       	add	r24, r14
    390e:	9f 1d       	adc	r25, r15
    3910:	a0 1f       	adc	r26, r16
    3912:	b1 1f       	adc	r27, r17
    3914:	82 0d       	add	r24, r2
    3916:	93 1d       	adc	r25, r3
    3918:	a4 1d       	adc	r26, r4
    391a:	b5 1d       	adc	r27, r5
    391c:	00 97       	sbiw	r24, 0x00	; 0
    391e:	a1 05       	cpc	r26, r1
    3920:	b1 05       	cpc	r27, r1
    3922:	19 f4       	brne	.+6      	; 0x392a <mc_line+0x18c>
    3924:	24 e1       	ldi	r18, 0x14	; 20
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	72 c0       	rjmp	.+228    	; 0x3a0e <mc_line+0x270>
		return (TG_ZERO_LENGTH_LINE);
	}

	if (invert_feed_rate) {
    392a:	49 89       	ldd	r20, Y+17	; 0x11
    392c:	5a 89       	ldd	r21, Y+18	; 0x12
    392e:	45 2b       	or	r20, r21
    3930:	59 f0       	breq	.+22     	; 0x3948 <mc_line+0x1aa>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3932:	60 ec       	ldi	r22, 0xC0	; 192
    3934:	71 ee       	ldi	r23, 0xE1	; 225
    3936:	84 e6       	ldi	r24, 0x64	; 100
    3938:	9c e4       	ldi	r25, 0x4C	; 76
    393a:	2d 85       	ldd	r18, Y+13	; 0x0d
    393c:	3e 85       	ldd	r19, Y+14	; 0x0e
    393e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3940:	58 89       	ldd	r21, Y+16	; 0x10
    3942:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    3946:	4a c0       	rjmp	.+148    	; 0x39dc <mc_line+0x23e>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    3948:	c8 01       	movw	r24, r16
    394a:	b7 01       	movw	r22, r14
    394c:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    3950:	29 85       	ldd	r18, Y+9	; 0x09
    3952:	3a 85       	ldd	r19, Y+10	; 0x0a
    3954:	4b 85       	ldd	r20, Y+11	; 0x0b
    3956:	5c 85       	ldd	r21, Y+12	; 0x0c
    3958:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    395c:	0e 94 cc 44 	call	0x8998	; 0x8998 <square>
    3960:	3b 01       	movw	r6, r22
    3962:	4c 01       	movw	r8, r24
    3964:	c6 01       	movw	r24, r12
    3966:	b5 01       	movw	r22, r10
    3968:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    396c:	2d 81       	ldd	r18, Y+5	; 0x05
    396e:	3e 81       	ldd	r19, Y+6	; 0x06
    3970:	4f 81       	ldd	r20, Y+7	; 0x07
    3972:	58 85       	ldd	r21, Y+8	; 0x08
    3974:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    3978:	0e 94 cc 44 	call	0x8998	; 0x8998 <square>
    397c:	5b 01       	movw	r10, r22
    397e:	6c 01       	movw	r12, r24
    3980:	c2 01       	movw	r24, r4
    3982:	b1 01       	movw	r22, r2
    3984:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    3988:	29 81       	ldd	r18, Y+1	; 0x01
    398a:	3a 81       	ldd	r19, Y+2	; 0x02
    398c:	4b 81       	ldd	r20, Y+3	; 0x03
    398e:	5c 81       	ldd	r21, Y+4	; 0x04
    3990:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    3994:	0e 94 cc 44 	call	0x8998	; 0x8998 <square>
    3998:	7b 01       	movw	r14, r22
    399a:	8c 01       	movw	r16, r24
    399c:	c4 01       	movw	r24, r8
    399e:	b3 01       	movw	r22, r6
    39a0:	a6 01       	movw	r20, r12
    39a2:	95 01       	movw	r18, r10
    39a4:	0e 94 c0 40 	call	0x8180	; 0x8180 <__addsf3>
    39a8:	a8 01       	movw	r20, r16
    39aa:	97 01       	movw	r18, r14
    39ac:	0e 94 c0 40 	call	0x8180	; 0x8180 <__addsf3>
    39b0:	0e 94 8e 44 	call	0x891c	; 0x891c <sqrt>
    39b4:	60 93 81 21 	sts	0x2181, r22
    39b8:	70 93 82 21 	sts	0x2182, r23
    39bc:	80 93 83 21 	sts	0x2183, r24
    39c0:	90 93 84 21 	sts	0x2184, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    39c4:	2d 85       	ldd	r18, Y+13	; 0x0d
    39c6:	3e 85       	ldd	r19, Y+14	; 0x0e
    39c8:	4f 85       	ldd	r20, Y+15	; 0x0f
    39ca:	58 89       	ldd	r21, Y+16	; 0x10
    39cc:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    39d0:	20 e0       	ldi	r18, 0x00	; 0
    39d2:	34 e2       	ldi	r19, 0x24	; 36
    39d4:	44 e7       	ldi	r20, 0x74	; 116
    39d6:	59 e4       	ldi	r21, 0x49	; 73
    39d8:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    39dc:	0e 94 f1 43 	call	0x87e2	; 0x87e2 <lround>
    39e0:	60 93 7d 21 	sts	0x217D, r22
    39e4:	70 93 7e 21 	sts	0x217E, r23
    39e8:	80 93 7f 21 	sts	0x217F, r24
    39ec:	90 93 80 21 	sts	0x2180, r25
	}
	mc.line_state = MC_STATE_NEW;
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	80 93 58 21 	sts	0x2158, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    39f6:	e9 e5       	ldi	r30, 0x59	; 89
    39f8:	f1 e2       	ldi	r31, 0x21	; 33
    39fa:	df 01       	movw	r26, r30
    39fc:	1c 96       	adiw	r26, 0x0c	; 12
    39fe:	8c e0       	ldi	r24, 0x0C	; 12
    3a00:	0d 90       	ld	r0, X+
    3a02:	01 92       	st	Z+, r0
    3a04:	81 50       	subi	r24, 0x01	; 1
    3a06:	e1 f7       	brne	.-8      	; 0x3a00 <mc_line+0x262>
	return (mc_line_continue());
    3a08:	0e 94 4c 1b 	call	0x3698	; 0x3698 <mc_line_continue>
    3a0c:	9c 01       	movw	r18, r24
}
    3a0e:	c9 01       	movw	r24, r18
    3a10:	62 96       	adiw	r28, 0x12	; 18
    3a12:	cd bf       	out	0x3d, r28	; 61
    3a14:	de bf       	out	0x3e, r29	; 62
    3a16:	cf 91       	pop	r28
    3a18:	df 91       	pop	r29
    3a1a:	1f 91       	pop	r17
    3a1c:	0f 91       	pop	r16
    3a1e:	ff 90       	pop	r15
    3a20:	ef 90       	pop	r14
    3a22:	df 90       	pop	r13
    3a24:	cf 90       	pop	r12
    3a26:	bf 90       	pop	r11
    3a28:	af 90       	pop	r10
    3a2a:	9f 90       	pop	r9
    3a2c:	8f 90       	pop	r8
    3a2e:	7f 90       	pop	r7
    3a30:	6f 90       	pop	r6
    3a32:	5f 90       	pop	r5
    3a34:	4f 90       	pop	r4
    3a36:	3f 90       	pop	r3
    3a38:	2f 90       	pop	r2
    3a3a:	08 95       	ret

00003a3c <mc_arc_continue>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continue() 
{
    3a3c:	8f 92       	push	r8
    3a3e:	9f 92       	push	r9
    3a40:	af 92       	push	r10
    3a42:	bf 92       	push	r11
    3a44:	cf 92       	push	r12
    3a46:	df 92       	push	r13
    3a48:	ef 92       	push	r14
    3a4a:	ff 92       	push	r15
    3a4c:	0f 93       	push	r16
    3a4e:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3a50:	80 91 b4 23 	lds	r24, 0x23B4
    3a54:	88 23       	and	r24, r24
    3a56:	19 f4       	brne	.+6      	; 0x3a5e <mc_arc_continue+0x22>
    3a58:	23 e0       	ldi	r18, 0x03	; 3
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	dd c0       	rjmp	.+442    	; 0x3c18 <mc_arc_continue+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3a5e:	81 30       	cpi	r24, 0x01	; 1
    3a60:	09 f0       	breq	.+2      	; 0x3a64 <mc_arc_continue+0x28>
    3a62:	ca c0       	rjmp	.+404    	; 0x3bf8 <mc_arc_continue+0x1bc>
		ma.segment_counter=0;
    3a64:	10 92 b7 23 	sts	0x23B7, r1
    3a68:	10 92 b8 23 	sts	0x23B8, r1
		ma.arc_state = MC_STATE_RUNNING;
    3a6c:	82 e0       	ldi	r24, 0x02	; 2
    3a6e:	80 93 b4 23 	sts	0x23B4, r24
    3a72:	c2 c0       	rjmp	.+388    	; 0x3bf8 <mc_arc_continue+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3a74:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <mv_test_move_buffer_full>
    3a78:	88 23       	and	r24, r24
    3a7a:	19 f0       	breq	.+6      	; 0x3a82 <mc_arc_continue+0x46>
    3a7c:	22 e0       	ldi	r18, 0x02	; 2
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	cb c0       	rjmp	.+406    	; 0x3c18 <mc_arc_continue+0x1dc>
			return (TG_EAGAIN);
		}
		ma.segment_counter++;
    3a82:	80 91 b7 23 	lds	r24, 0x23B7
    3a86:	90 91 b8 23 	lds	r25, 0x23B8
    3a8a:	01 96       	adiw	r24, 0x01	; 1
    3a8c:	80 93 b7 23 	sts	0x23B7, r24
    3a90:	90 93 b8 23 	sts	0x23B8, r25
		ma.theta += ma.theta_per_segment;
    3a94:	60 91 d9 23 	lds	r22, 0x23D9
    3a98:	70 91 da 23 	lds	r23, 0x23DA
    3a9c:	80 91 db 23 	lds	r24, 0x23DB
    3aa0:	90 91 dc 23 	lds	r25, 0x23DC
    3aa4:	20 91 e5 23 	lds	r18, 0x23E5
    3aa8:	30 91 e6 23 	lds	r19, 0x23E6
    3aac:	40 91 e7 23 	lds	r20, 0x23E7
    3ab0:	50 91 e8 23 	lds	r21, 0x23E8
    3ab4:	0e 94 c0 40 	call	0x8180	; 0x8180 <__addsf3>
    3ab8:	7b 01       	movw	r14, r22
    3aba:	8c 01       	movw	r16, r24
    3abc:	cb 01       	movw	r24, r22
    3abe:	d8 01       	movw	r26, r16
    3ac0:	80 93 d9 23 	sts	0x23D9, r24
    3ac4:	90 93 da 23 	sts	0x23DA, r25
    3ac8:	a0 93 db 23 	sts	0x23DB, r26
    3acc:	b0 93 dc 23 	sts	0x23DC, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3ad0:	b7 01       	movw	r22, r14
    3ad2:	c8 01       	movw	r24, r16
    3ad4:	0e 94 84 44 	call	0x8908	; 0x8908 <sin>
    3ad8:	80 90 dd 23 	lds	r8, 0x23DD
    3adc:	90 90 de 23 	lds	r9, 0x23DE
    3ae0:	a0 90 df 23 	lds	r10, 0x23DF
    3ae4:	b0 90 e0 23 	lds	r11, 0x23E0
    3ae8:	c0 90 bb 23 	lds	r12, 0x23BB
    3aec:	d0 90 bc 23 	lds	r13, 0x23BC
    3af0:	cc 0c       	add	r12, r12
    3af2:	dd 1c       	adc	r13, r13
    3af4:	cc 0c       	add	r12, r12
    3af6:	dd 1c       	adc	r13, r13
    3af8:	24 eb       	ldi	r18, 0xB4	; 180
    3afa:	33 e2       	ldi	r19, 0x23	; 35
    3afc:	c2 0e       	add	r12, r18
    3afe:	d3 1e       	adc	r13, r19
    3b00:	a5 01       	movw	r20, r10
    3b02:	94 01       	movw	r18, r8
    3b04:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    3b08:	9b 01       	movw	r18, r22
    3b0a:	ac 01       	movw	r20, r24
    3b0c:	60 91 d1 23 	lds	r22, 0x23D1
    3b10:	70 91 d2 23 	lds	r23, 0x23D2
    3b14:	80 91 d3 23 	lds	r24, 0x23D3
    3b18:	90 91 d4 23 	lds	r25, 0x23D4
    3b1c:	0e 94 c0 40 	call	0x8180	; 0x8180 <__addsf3>
    3b20:	f6 01       	movw	r30, r12
    3b22:	65 87       	std	Z+13, r22	; 0x0d
    3b24:	76 87       	std	Z+14, r23	; 0x0e
    3b26:	87 87       	std	Z+15, r24	; 0x0f
    3b28:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3b2a:	b7 01       	movw	r22, r14
    3b2c:	c8 01       	movw	r24, r16
    3b2e:	0e 94 63 41 	call	0x82c6	; 0x82c6 <cos>
    3b32:	00 91 bd 23 	lds	r16, 0x23BD
    3b36:	10 91 be 23 	lds	r17, 0x23BE
    3b3a:	00 0f       	add	r16, r16
    3b3c:	11 1f       	adc	r17, r17
    3b3e:	00 0f       	add	r16, r16
    3b40:	11 1f       	adc	r17, r17
    3b42:	0c 54       	subi	r16, 0x4C	; 76
    3b44:	1c 4d       	sbci	r17, 0xDC	; 220
    3b46:	a5 01       	movw	r20, r10
    3b48:	94 01       	movw	r18, r8
    3b4a:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    3b4e:	9b 01       	movw	r18, r22
    3b50:	ac 01       	movw	r20, r24
    3b52:	60 91 d5 23 	lds	r22, 0x23D5
    3b56:	70 91 d6 23 	lds	r23, 0x23D6
    3b5a:	80 91 d7 23 	lds	r24, 0x23D7
    3b5e:	90 91 d8 23 	lds	r25, 0x23D8
    3b62:	0e 94 c0 40 	call	0x8180	; 0x8180 <__addsf3>
    3b66:	f8 01       	movw	r30, r16
    3b68:	65 87       	std	Z+13, r22	; 0x0d
    3b6a:	76 87       	std	Z+14, r23	; 0x0e
    3b6c:	87 87       	std	Z+15, r24	; 0x0f
    3b6e:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3b70:	00 91 bf 23 	lds	r16, 0x23BF
    3b74:	10 91 c0 23 	lds	r17, 0x23C0
    3b78:	00 0f       	add	r16, r16
    3b7a:	11 1f       	adc	r17, r17
    3b7c:	00 0f       	add	r16, r16
    3b7e:	11 1f       	adc	r17, r17
    3b80:	0c 54       	subi	r16, 0x4C	; 76
    3b82:	1c 4d       	sbci	r17, 0xDC	; 220
    3b84:	f8 01       	movw	r30, r16
    3b86:	65 85       	ldd	r22, Z+13	; 0x0d
    3b88:	76 85       	ldd	r23, Z+14	; 0x0e
    3b8a:	87 85       	ldd	r24, Z+15	; 0x0f
    3b8c:	90 89       	ldd	r25, Z+16	; 0x10
    3b8e:	20 91 e9 23 	lds	r18, 0x23E9
    3b92:	30 91 ea 23 	lds	r19, 0x23EA
    3b96:	40 91 eb 23 	lds	r20, 0x23EB
    3b9a:	50 91 ec 23 	lds	r21, 0x23EC
    3b9e:	0e 94 c0 40 	call	0x8180	; 0x8180 <__addsf3>
    3ba2:	f8 01       	movw	r30, r16
    3ba4:	65 87       	std	Z+13, r22	; 0x0d
    3ba6:	76 87       	std	Z+14, r23	; 0x0e
    3ba8:	87 87       	std	Z+15, r24	; 0x0f
    3baa:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    3bac:	60 91 c1 23 	lds	r22, 0x23C1
    3bb0:	70 91 c2 23 	lds	r23, 0x23C2
    3bb4:	80 91 c3 23 	lds	r24, 0x23C3
    3bb8:	90 91 c4 23 	lds	r25, 0x23C4
    3bbc:	20 91 c5 23 	lds	r18, 0x23C5
    3bc0:	30 91 c6 23 	lds	r19, 0x23C6
    3bc4:	40 91 c7 23 	lds	r20, 0x23C7
    3bc8:	50 91 c8 23 	lds	r21, 0x23C8
    3bcc:	e0 90 c9 23 	lds	r14, 0x23C9
    3bd0:	f0 90 ca 23 	lds	r15, 0x23CA
    3bd4:	00 91 cb 23 	lds	r16, 0x23CB
    3bd8:	10 91 cc 23 	lds	r17, 0x23CC
    3bdc:	a0 90 e1 23 	lds	r10, 0x23E1
    3be0:	b0 90 e2 23 	lds	r11, 0x23E2
    3be4:	c0 90 e3 23 	lds	r12, 0x23E3
    3be8:	d0 90 e4 23 	lds	r13, 0x23E4
    3bec:	80 90 b9 23 	lds	r8, 0x23B9
    3bf0:	90 90 ba 23 	lds	r9, 0x23BA
    3bf4:	0e 94 cf 1b 	call	0x379e	; 0x379e <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3bf8:	20 91 b7 23 	lds	r18, 0x23B7
    3bfc:	30 91 b8 23 	lds	r19, 0x23B8
    3c00:	80 91 b5 23 	lds	r24, 0x23B5
    3c04:	90 91 b6 23 	lds	r25, 0x23B6
    3c08:	82 17       	cp	r24, r18
    3c0a:	93 07       	cpc	r25, r19
    3c0c:	0c f0       	brlt	.+2      	; 0x3c10 <mc_arc_continue+0x1d4>
    3c0e:	32 cf       	rjmp	.-412    	; 0x3a74 <mc_arc_continue+0x38>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3c10:	10 92 b4 23 	sts	0x23B4, r1
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3c18:	c9 01       	movw	r24, r18
    3c1a:	1f 91       	pop	r17
    3c1c:	0f 91       	pop	r16
    3c1e:	ff 90       	pop	r15
    3c20:	ef 90       	pop	r14
    3c22:	df 90       	pop	r13
    3c24:	cf 90       	pop	r12
    3c26:	bf 90       	pop	r11
    3c28:	af 90       	pop	r10
    3c2a:	9f 90       	pop	r9
    3c2c:	8f 90       	pop	r8
    3c2e:	08 95       	ret

00003c30 <mc_arc>:
 */

int mc_arc(double theta, double angular_travel, double radius, 
		   double linear_travel, int axis_1, int axis_2, int axis_linear, 
		   double feed_rate, int invert_feed_rate)
{
    3c30:	2f 92       	push	r2
    3c32:	3f 92       	push	r3
    3c34:	4f 92       	push	r4
    3c36:	5f 92       	push	r5
    3c38:	6f 92       	push	r6
    3c3a:	7f 92       	push	r7
    3c3c:	8f 92       	push	r8
    3c3e:	9f 92       	push	r9
    3c40:	af 92       	push	r10
    3c42:	bf 92       	push	r11
    3c44:	cf 92       	push	r12
    3c46:	df 92       	push	r13
    3c48:	ef 92       	push	r14
    3c4a:	ff 92       	push	r15
    3c4c:	0f 93       	push	r16
    3c4e:	1f 93       	push	r17
    3c50:	df 93       	push	r29
    3c52:	cf 93       	push	r28
    3c54:	cd b7       	in	r28, 0x3d	; 61
    3c56:	de b7       	in	r29, 0x3e	; 62
    3c58:	28 97       	sbiw	r28, 0x08	; 8
    3c5a:	cd bf       	out	0x3d, r28	; 61
    3c5c:	de bf       	out	0x3e, r29	; 62
    3c5e:	69 83       	std	Y+1, r22	; 0x01
    3c60:	7a 83       	std	Y+2, r23	; 0x02
    3c62:	8b 83       	std	Y+3, r24	; 0x03
    3c64:	9c 83       	std	Y+4, r25	; 0x04
    3c66:	29 01       	movw	r4, r18
    3c68:	3a 01       	movw	r6, r20
    3c6a:	ed 82       	std	Y+5, r14	; 0x05
    3c6c:	fe 82       	std	Y+6, r15	; 0x06
    3c6e:	0f 83       	std	Y+7, r16	; 0x07
    3c70:	18 87       	std	Y+8, r17	; 0x08
    3c72:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3c74:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3c76:	60 93 d9 23 	sts	0x23D9, r22
    3c7a:	70 93 da 23 	sts	0x23DA, r23
    3c7e:	80 93 db 23 	sts	0x23DB, r24
    3c82:	90 93 dc 23 	sts	0x23DC, r25
	ma.radius = radius;
    3c86:	e0 92 dd 23 	sts	0x23DD, r14
    3c8a:	f0 92 de 23 	sts	0x23DE, r15
    3c8e:	00 93 df 23 	sts	0x23DF, r16
    3c92:	10 93 e0 23 	sts	0x23E0, r17
	ma.angular_travel = angular_travel;
    3c96:	20 93 ed 23 	sts	0x23ED, r18
    3c9a:	30 93 ee 23 	sts	0x23EE, r19
    3c9e:	40 93 ef 23 	sts	0x23EF, r20
    3ca2:	50 93 f0 23 	sts	0x23F0, r21
	ma.linear_travel = linear_travel;
    3ca6:	a0 92 f1 23 	sts	0x23F1, r10
    3caa:	b0 92 f2 23 	sts	0x23F2, r11
    3cae:	c0 92 f3 23 	sts	0x23F3, r12
    3cb2:	d0 92 f4 23 	sts	0x23F4, r13
	ma.feed_rate = feed_rate;
    3cb6:	8a a1       	ldd	r24, Y+34	; 0x22
    3cb8:	9b a1       	ldd	r25, Y+35	; 0x23
    3cba:	ac a1       	ldd	r26, Y+36	; 0x24
    3cbc:	bd a1       	ldd	r27, Y+37	; 0x25
    3cbe:	80 93 e1 23 	sts	0x23E1, r24
    3cc2:	90 93 e2 23 	sts	0x23E2, r25
    3cc6:	a0 93 e3 23 	sts	0x23E3, r26
    3cca:	b0 93 e4 23 	sts	0x23E4, r27
	ma.invert_feed_rate = invert_feed_rate;
    3cce:	ae a1       	ldd	r26, Y+38	; 0x26
    3cd0:	bf a1       	ldd	r27, Y+39	; 0x27
    3cd2:	a0 93 b9 23 	sts	0x23B9, r26
    3cd6:	b0 93 ba 23 	sts	0x23BA, r27
	ma.axis_1 = axis_1;
    3cda:	80 92 bb 23 	sts	0x23BB, r8
    3cde:	90 92 bc 23 	sts	0x23BC, r9
	ma.axis_2 = axis_2;
    3ce2:	20 92 bd 23 	sts	0x23BD, r2
    3ce6:	30 92 be 23 	sts	0x23BE, r3
	ma.axis_linear = axis_linear;
    3cea:	e8 a1       	ldd	r30, Y+32	; 0x20
    3cec:	f9 a1       	ldd	r31, Y+33	; 0x21
    3cee:	e0 93 bf 23 	sts	0x23BF, r30
    3cf2:	f0 93 c0 23 	sts	0x23C0, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3cf6:	ca 01       	movw	r24, r20
    3cf8:	b9 01       	movw	r22, r18
    3cfa:	a8 01       	movw	r20, r16
    3cfc:	97 01       	movw	r18, r14
    3cfe:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    3d02:	7b 01       	movw	r14, r22
    3d04:	8c 01       	movw	r16, r24
    3d06:	c6 01       	movw	r24, r12
    3d08:	b5 01       	movw	r22, r10
    3d0a:	0e 94 ce 41 	call	0x839c	; 0x839c <__fixsfsi>
    3d0e:	97 ff       	sbrs	r25, 7
    3d10:	07 c0       	rjmp	.+14     	; 0x3d20 <mc_arc+0xf0>
    3d12:	90 95       	com	r25
    3d14:	80 95       	com	r24
    3d16:	70 95       	com	r23
    3d18:	61 95       	neg	r22
    3d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d1c:	8f 4f       	sbci	r24, 0xFF	; 255
    3d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d20:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    3d24:	9b 01       	movw	r18, r22
    3d26:	ac 01       	movw	r20, r24
    3d28:	c8 01       	movw	r24, r16
    3d2a:	b7 01       	movw	r22, r14
    3d2c:	0e 94 5c 43 	call	0x86b8	; 0x86b8 <hypot>
    3d30:	7b 01       	movw	r14, r22
    3d32:	8c 01       	movw	r16, r24
    3d34:	60 93 cd 23 	sts	0x23CD, r22
    3d38:	70 93 ce 23 	sts	0x23CE, r23
    3d3c:	80 93 cf 23 	sts	0x23CF, r24
    3d40:	90 93 d0 23 	sts	0x23D0, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3d44:	2d ec       	ldi	r18, 0xCD	; 205
    3d46:	3c ec       	ldi	r19, 0xCC	; 204
    3d48:	4c e4       	ldi	r20, 0x4C	; 76
    3d4a:	5d e3       	ldi	r21, 0x3D	; 61
    3d4c:	0e 94 5f 41 	call	0x82be	; 0x82be <__cmpsf2>
    3d50:	88 23       	and	r24, r24
    3d52:	1c f4       	brge	.+6      	; 0x3d5a <mc_arc+0x12a>
    3d54:	23 e1       	ldi	r18, 0x13	; 19
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	fb c0       	rjmp	.+502    	; 0x3f50 <mc_arc+0x320>
		return (TG_ARC_SPECIFICATION_ERROR);
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3d5a:	c8 01       	movw	r24, r16
    3d5c:	b7 01       	movw	r22, r14
    3d5e:	20 91 48 23 	lds	r18, 0x2348
    3d62:	30 91 49 23 	lds	r19, 0x2349
    3d66:	40 91 4a 23 	lds	r20, 0x234A
    3d6a:	50 91 4b 23 	lds	r21, 0x234B
    3d6e:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    3d72:	0e 94 4c 41 	call	0x8298	; 0x8298 <ceil>
    3d76:	0e 94 ce 41 	call	0x839c	; 0x839c <__fixsfsi>
    3d7a:	8b 01       	movw	r16, r22
    3d7c:	60 93 b5 23 	sts	0x23B5, r22
    3d80:	70 93 b6 23 	sts	0x23B6, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    3d84:	8e a1       	ldd	r24, Y+38	; 0x26
    3d86:	9f a1       	ldd	r25, Y+39	; 0x27
    3d88:	89 2b       	or	r24, r25
    3d8a:	b9 f0       	breq	.+46     	; 0x3dba <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    3d8c:	b8 01       	movw	r22, r16
    3d8e:	88 27       	eor	r24, r24
    3d90:	77 fd       	sbrc	r23, 7
    3d92:	80 95       	com	r24
    3d94:	98 2f       	mov	r25, r24
    3d96:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    3d9a:	9b 01       	movw	r18, r22
    3d9c:	ac 01       	movw	r20, r24
    3d9e:	6a a1       	ldd	r22, Y+34	; 0x22
    3da0:	7b a1       	ldd	r23, Y+35	; 0x23
    3da2:	8c a1       	ldd	r24, Y+36	; 0x24
    3da4:	9d a1       	ldd	r25, Y+37	; 0x25
    3da6:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    3daa:	60 93 e1 23 	sts	0x23E1, r22
    3dae:	70 93 e2 23 	sts	0x23E2, r23
    3db2:	80 93 e3 23 	sts	0x23E3, r24
    3db6:	90 93 e4 23 	sts	0x23E4, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    3dba:	b8 01       	movw	r22, r16
    3dbc:	88 27       	eor	r24, r24
    3dbe:	77 fd       	sbrc	r23, 7
    3dc0:	80 95       	com	r24
    3dc2:	98 2f       	mov	r25, r24
    3dc4:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    3dc8:	7b 01       	movw	r14, r22
    3dca:	8c 01       	movw	r16, r24
    3dcc:	c3 01       	movw	r24, r6
    3dce:	b2 01       	movw	r22, r4
    3dd0:	a8 01       	movw	r20, r16
    3dd2:	97 01       	movw	r18, r14
    3dd4:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    3dd8:	60 93 e5 23 	sts	0x23E5, r22
    3ddc:	70 93 e6 23 	sts	0x23E6, r23
    3de0:	80 93 e7 23 	sts	0x23E7, r24
    3de4:	90 93 e8 23 	sts	0x23E8, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    3de8:	c6 01       	movw	r24, r12
    3dea:	b5 01       	movw	r22, r10
    3dec:	a8 01       	movw	r20, r16
    3dee:	97 01       	movw	r18, r14
    3df0:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    3df4:	60 93 e9 23 	sts	0x23E9, r22
    3df8:	70 93 ea 23 	sts	0x23EA, r23
    3dfc:	80 93 eb 23 	sts	0x23EB, r24
    3e00:	90 93 ec 23 	sts	0x23EC, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    3e04:	69 81       	ldd	r22, Y+1	; 0x01
    3e06:	7a 81       	ldd	r23, Y+2	; 0x02
    3e08:	8b 81       	ldd	r24, Y+3	; 0x03
    3e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e0c:	0e 94 84 44 	call	0x8908	; 0x8908 <sin>
    3e10:	5b 01       	movw	r10, r22
    3e12:	6c 01       	movw	r12, r24
    3e14:	f4 01       	movw	r30, r8
    3e16:	ee 0f       	add	r30, r30
    3e18:	ff 1f       	adc	r31, r31
    3e1a:	ee 0f       	add	r30, r30
    3e1c:	ff 1f       	adc	r31, r31
    3e1e:	e8 5a       	subi	r30, 0xA8	; 168
    3e20:	fe 4d       	sbci	r31, 0xDE	; 222
    3e22:	61 81       	ldd	r22, Z+1	; 0x01
    3e24:	72 81       	ldd	r23, Z+2	; 0x02
    3e26:	83 81       	ldd	r24, Z+3	; 0x03
    3e28:	94 81       	ldd	r25, Z+4	; 0x04
    3e2a:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    3e2e:	f4 01       	movw	r30, r8
    3e30:	ee 0f       	add	r30, r30
    3e32:	ff 1f       	adc	r31, r31
    3e34:	e8 0d       	add	r30, r8
    3e36:	f9 1d       	adc	r31, r9
    3e38:	13 e0       	ldi	r17, 0x03	; 3
    3e3a:	ee 0f       	add	r30, r30
    3e3c:	ff 1f       	adc	r31, r31
    3e3e:	1a 95       	dec	r17
    3e40:	e1 f7       	brne	.-8      	; 0x3e3a <mc_arc+0x20a>
    3e42:	ea 5b       	subi	r30, 0xBA	; 186
    3e44:	fc 4d       	sbci	r31, 0xDC	; 220
    3e46:	21 a1       	ldd	r18, Z+33	; 0x21
    3e48:	32 a1       	ldd	r19, Z+34	; 0x22
    3e4a:	43 a1       	ldd	r20, Z+35	; 0x23
    3e4c:	54 a1       	ldd	r21, Z+36	; 0x24
    3e4e:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    3e52:	7b 01       	movw	r14, r22
    3e54:	8c 01       	movw	r16, r24
    3e56:	c6 01       	movw	r24, r12
    3e58:	b5 01       	movw	r22, r10
    3e5a:	2d 81       	ldd	r18, Y+5	; 0x05
    3e5c:	3e 81       	ldd	r19, Y+6	; 0x06
    3e5e:	4f 81       	ldd	r20, Y+7	; 0x07
    3e60:	58 85       	ldd	r21, Y+8	; 0x08
    3e62:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    3e66:	9b 01       	movw	r18, r22
    3e68:	ac 01       	movw	r20, r24
    3e6a:	c8 01       	movw	r24, r16
    3e6c:	b7 01       	movw	r22, r14
    3e6e:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    3e72:	60 93 d1 23 	sts	0x23D1, r22
    3e76:	70 93 d2 23 	sts	0x23D2, r23
    3e7a:	80 93 d3 23 	sts	0x23D3, r24
    3e7e:	90 93 d4 23 	sts	0x23D4, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    3e82:	69 81       	ldd	r22, Y+1	; 0x01
    3e84:	7a 81       	ldd	r23, Y+2	; 0x02
    3e86:	8b 81       	ldd	r24, Y+3	; 0x03
    3e88:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8a:	0e 94 63 41 	call	0x82c6	; 0x82c6 <cos>
    3e8e:	5b 01       	movw	r10, r22
    3e90:	6c 01       	movw	r12, r24
    3e92:	f1 01       	movw	r30, r2
    3e94:	ee 0f       	add	r30, r30
    3e96:	ff 1f       	adc	r31, r31
    3e98:	ee 0f       	add	r30, r30
    3e9a:	ff 1f       	adc	r31, r31
    3e9c:	e8 5a       	subi	r30, 0xA8	; 168
    3e9e:	fe 4d       	sbci	r31, 0xDE	; 222
    3ea0:	61 81       	ldd	r22, Z+1	; 0x01
    3ea2:	72 81       	ldd	r23, Z+2	; 0x02
    3ea4:	83 81       	ldd	r24, Z+3	; 0x03
    3ea6:	94 81       	ldd	r25, Z+4	; 0x04
    3ea8:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    3eac:	f1 01       	movw	r30, r2
    3eae:	ee 0f       	add	r30, r30
    3eb0:	ff 1f       	adc	r31, r31
    3eb2:	e2 0d       	add	r30, r2
    3eb4:	f3 1d       	adc	r31, r3
    3eb6:	53 e0       	ldi	r21, 0x03	; 3
    3eb8:	ee 0f       	add	r30, r30
    3eba:	ff 1f       	adc	r31, r31
    3ebc:	5a 95       	dec	r21
    3ebe:	e1 f7       	brne	.-8      	; 0x3eb8 <mc_arc+0x288>
    3ec0:	ea 5b       	subi	r30, 0xBA	; 186
    3ec2:	fc 4d       	sbci	r31, 0xDC	; 220
    3ec4:	21 a1       	ldd	r18, Z+33	; 0x21
    3ec6:	32 a1       	ldd	r19, Z+34	; 0x22
    3ec8:	43 a1       	ldd	r20, Z+35	; 0x23
    3eca:	54 a1       	ldd	r21, Z+36	; 0x24
    3ecc:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    3ed0:	7b 01       	movw	r14, r22
    3ed2:	8c 01       	movw	r16, r24
    3ed4:	c6 01       	movw	r24, r12
    3ed6:	b5 01       	movw	r22, r10
    3ed8:	2d 81       	ldd	r18, Y+5	; 0x05
    3eda:	3e 81       	ldd	r19, Y+6	; 0x06
    3edc:	4f 81       	ldd	r20, Y+7	; 0x07
    3ede:	58 85       	ldd	r21, Y+8	; 0x08
    3ee0:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    3ee4:	9b 01       	movw	r18, r22
    3ee6:	ac 01       	movw	r20, r24
    3ee8:	c8 01       	movw	r24, r16
    3eea:	b7 01       	movw	r22, r14
    3eec:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    3ef0:	60 93 d5 23 	sts	0x23D5, r22
    3ef4:	70 93 d6 23 	sts	0x23D6, r23
    3ef8:	80 93 d7 23 	sts	0x23D7, r24
    3efc:	90 93 d8 23 	sts	0x23D8, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    3f00:	e8 a1       	ldd	r30, Y+32	; 0x20
    3f02:	f9 a1       	ldd	r31, Y+33	; 0x21
    3f04:	ee 0f       	add	r30, r30
    3f06:	ff 1f       	adc	r31, r31
    3f08:	ee 0f       	add	r30, r30
    3f0a:	ff 1f       	adc	r31, r31
    3f0c:	8f 01       	movw	r16, r30
    3f0e:	0c 54       	subi	r16, 0x4C	; 76
    3f10:	1c 4d       	sbci	r17, 0xDC	; 220
    3f12:	e8 5a       	subi	r30, 0xA8	; 168
    3f14:	fe 4d       	sbci	r31, 0xDE	; 222
    3f16:	61 81       	ldd	r22, Z+1	; 0x01
    3f18:	72 81       	ldd	r23, Z+2	; 0x02
    3f1a:	83 81       	ldd	r24, Z+3	; 0x03
    3f1c:	94 81       	ldd	r25, Z+4	; 0x04
    3f1e:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    3f22:	20 91 97 23 	lds	r18, 0x2397
    3f26:	30 91 98 23 	lds	r19, 0x2398
    3f2a:	40 91 99 23 	lds	r20, 0x2399
    3f2e:	50 91 9a 23 	lds	r21, 0x239A
    3f32:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    3f36:	d8 01       	movw	r26, r16
    3f38:	1d 96       	adiw	r26, 0x0d	; 13
    3f3a:	6d 93       	st	X+, r22
    3f3c:	7d 93       	st	X+, r23
    3f3e:	8d 93       	st	X+, r24
    3f40:	9c 93       	st	X, r25
    3f42:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	80 93 b4 23 	sts	0x23B4, r24
	return (mc_arc_continue());
    3f4a:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <mc_arc_continue>
    3f4e:	9c 01       	movw	r18, r24
}
    3f50:	c9 01       	movw	r24, r18
    3f52:	28 96       	adiw	r28, 0x08	; 8
    3f54:	cd bf       	out	0x3d, r28	; 61
    3f56:	de bf       	out	0x3e, r29	; 62
    3f58:	cf 91       	pop	r28
    3f5a:	df 91       	pop	r29
    3f5c:	1f 91       	pop	r17
    3f5e:	0f 91       	pop	r16
    3f60:	ff 90       	pop	r15
    3f62:	ef 90       	pop	r14
    3f64:	df 90       	pop	r13
    3f66:	cf 90       	pop	r12
    3f68:	bf 90       	pop	r11
    3f6a:	af 90       	pop	r10
    3f6c:	9f 90       	pop	r9
    3f6e:	8f 90       	pop	r8
    3f70:	7f 90       	pop	r7
    3f72:	6f 90       	pop	r6
    3f74:	5f 90       	pop	r5
    3f76:	4f 90       	pop	r4
    3f78:	3f 90       	pop	r3
    3f7a:	2f 90       	pop	r2
    3f7c:	08 95       	ret

00003f7e <mc_arc_blocking>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc_blocking(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    3f7e:	2f 92       	push	r2
    3f80:	3f 92       	push	r3
    3f82:	4f 92       	push	r4
    3f84:	5f 92       	push	r5
    3f86:	6f 92       	push	r6
    3f88:	7f 92       	push	r7
    3f8a:	8f 92       	push	r8
    3f8c:	9f 92       	push	r9
    3f8e:	af 92       	push	r10
    3f90:	bf 92       	push	r11
    3f92:	cf 92       	push	r12
    3f94:	df 92       	push	r13
    3f96:	ef 92       	push	r14
    3f98:	ff 92       	push	r15
    3f9a:	0f 93       	push	r16
    3f9c:	1f 93       	push	r17
    3f9e:	df 93       	push	r29
    3fa0:	cf 93       	push	r28
    3fa2:	cd b7       	in	r28, 0x3d	; 61
    3fa4:	de b7       	in	r29, 0x3e	; 62
    3fa6:	28 97       	sbiw	r28, 0x08	; 8
    3fa8:	cd bf       	out	0x3d, r28	; 61
    3faa:	de bf       	out	0x3e, r29	; 62
    3fac:	69 83       	std	Y+1, r22	; 0x01
    3fae:	7a 83       	std	Y+2, r23	; 0x02
    3fb0:	8b 83       	std	Y+3, r24	; 0x03
    3fb2:	9c 83       	std	Y+4, r25	; 0x04
    3fb4:	29 01       	movw	r4, r18
    3fb6:	3a 01       	movw	r6, r20
    3fb8:	ed 82       	std	Y+5, r14	; 0x05
    3fba:	fe 82       	std	Y+6, r15	; 0x06
    3fbc:	0f 83       	std	Y+7, r16	; 0x07
    3fbe:	18 87       	std	Y+8, r17	; 0x08
    3fc0:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3fc2:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3fc4:	60 93 d9 23 	sts	0x23D9, r22
    3fc8:	70 93 da 23 	sts	0x23DA, r23
    3fcc:	80 93 db 23 	sts	0x23DB, r24
    3fd0:	90 93 dc 23 	sts	0x23DC, r25
	ma.radius = radius;
    3fd4:	e0 92 dd 23 	sts	0x23DD, r14
    3fd8:	f0 92 de 23 	sts	0x23DE, r15
    3fdc:	00 93 df 23 	sts	0x23DF, r16
    3fe0:	10 93 e0 23 	sts	0x23E0, r17
	ma.angular_travel = angular_travel;
    3fe4:	20 93 ed 23 	sts	0x23ED, r18
    3fe8:	30 93 ee 23 	sts	0x23EE, r19
    3fec:	40 93 ef 23 	sts	0x23EF, r20
    3ff0:	50 93 f0 23 	sts	0x23F0, r21
	ma.linear_travel = linear_travel;
    3ff4:	a0 92 f1 23 	sts	0x23F1, r10
    3ff8:	b0 92 f2 23 	sts	0x23F2, r11
    3ffc:	c0 92 f3 23 	sts	0x23F3, r12
    4000:	d0 92 f4 23 	sts	0x23F4, r13
	ma.feed_rate = feed_rate;
    4004:	8a a1       	ldd	r24, Y+34	; 0x22
    4006:	9b a1       	ldd	r25, Y+35	; 0x23
    4008:	ac a1       	ldd	r26, Y+36	; 0x24
    400a:	bd a1       	ldd	r27, Y+37	; 0x25
    400c:	80 93 e1 23 	sts	0x23E1, r24
    4010:	90 93 e2 23 	sts	0x23E2, r25
    4014:	a0 93 e3 23 	sts	0x23E3, r26
    4018:	b0 93 e4 23 	sts	0x23E4, r27
	ma.invert_feed_rate = invert_feed_rate;
    401c:	ae a1       	ldd	r26, Y+38	; 0x26
    401e:	bf a1       	ldd	r27, Y+39	; 0x27
    4020:	a0 93 b9 23 	sts	0x23B9, r26
    4024:	b0 93 ba 23 	sts	0x23BA, r27
	ma.axis_1 = axis_1;
    4028:	80 92 bb 23 	sts	0x23BB, r8
    402c:	90 92 bc 23 	sts	0x23BC, r9
	ma.axis_2 = axis_2;
    4030:	20 92 bd 23 	sts	0x23BD, r2
    4034:	30 92 be 23 	sts	0x23BE, r3
	ma.axis_linear = axis_linear;
    4038:	e8 a1       	ldd	r30, Y+32	; 0x20
    403a:	f9 a1       	ldd	r31, Y+33	; 0x21
    403c:	e0 93 bf 23 	sts	0x23BF, r30
    4040:	f0 93 c0 23 	sts	0x23C0, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    4044:	ca 01       	movw	r24, r20
    4046:	b9 01       	movw	r22, r18
    4048:	a8 01       	movw	r20, r16
    404a:	97 01       	movw	r18, r14
    404c:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    4050:	7b 01       	movw	r14, r22
    4052:	8c 01       	movw	r16, r24
    4054:	c6 01       	movw	r24, r12
    4056:	b5 01       	movw	r22, r10
    4058:	0e 94 ce 41 	call	0x839c	; 0x839c <__fixsfsi>
    405c:	97 ff       	sbrs	r25, 7
    405e:	07 c0       	rjmp	.+14     	; 0x406e <mc_arc_blocking+0xf0>
    4060:	90 95       	com	r25
    4062:	80 95       	com	r24
    4064:	70 95       	com	r23
    4066:	61 95       	neg	r22
    4068:	7f 4f       	sbci	r23, 0xFF	; 255
    406a:	8f 4f       	sbci	r24, 0xFF	; 255
    406c:	9f 4f       	sbci	r25, 0xFF	; 255
    406e:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    4072:	9b 01       	movw	r18, r22
    4074:	ac 01       	movw	r20, r24
    4076:	c8 01       	movw	r24, r16
    4078:	b7 01       	movw	r22, r14
    407a:	0e 94 5c 43 	call	0x86b8	; 0x86b8 <hypot>
    407e:	7b 01       	movw	r14, r22
    4080:	8c 01       	movw	r16, r24
    4082:	60 93 cd 23 	sts	0x23CD, r22
    4086:	70 93 ce 23 	sts	0x23CE, r23
    408a:	80 93 cf 23 	sts	0x23CF, r24
    408e:	90 93 d0 23 	sts	0x23D0, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    4092:	2d ec       	ldi	r18, 0xCD	; 205
    4094:	3c ec       	ldi	r19, 0xCC	; 204
    4096:	4c e4       	ldi	r20, 0x4C	; 76
    4098:	5d e3       	ldi	r21, 0x3D	; 61
    409a:	0e 94 5f 41 	call	0x82be	; 0x82be <__cmpsf2>
    409e:	88 23       	and	r24, r24
    40a0:	1c f4       	brge	.+6      	; 0x40a8 <mc_arc_blocking+0x12a>
    40a2:	23 e1       	ldi	r18, 0x13	; 19
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	c7 c1       	rjmp	.+910    	; 0x4436 <mc_arc_blocking+0x4b8>
		return (TG_ARC_SPECIFICATION_ERROR);			
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    40a8:	c8 01       	movw	r24, r16
    40aa:	b7 01       	movw	r22, r14
    40ac:	20 91 48 23 	lds	r18, 0x2348
    40b0:	30 91 49 23 	lds	r19, 0x2349
    40b4:	40 91 4a 23 	lds	r20, 0x234A
    40b8:	50 91 4b 23 	lds	r21, 0x234B
    40bc:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    40c0:	0e 94 4c 41 	call	0x8298	; 0x8298 <ceil>
    40c4:	0e 94 ce 41 	call	0x839c	; 0x839c <__fixsfsi>
    40c8:	8b 01       	movw	r16, r22
    40ca:	60 93 b5 23 	sts	0x23B5, r22
    40ce:	70 93 b6 23 	sts	0x23B6, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    40d2:	2e a1       	ldd	r18, Y+38	; 0x26
    40d4:	3f a1       	ldd	r19, Y+39	; 0x27
    40d6:	23 2b       	or	r18, r19
    40d8:	b9 f0       	breq	.+46     	; 0x4108 <mc_arc_blocking+0x18a>
		ma.feed_rate *= ma.segments; 
    40da:	b8 01       	movw	r22, r16
    40dc:	88 27       	eor	r24, r24
    40de:	77 fd       	sbrc	r23, 7
    40e0:	80 95       	com	r24
    40e2:	98 2f       	mov	r25, r24
    40e4:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    40e8:	9b 01       	movw	r18, r22
    40ea:	ac 01       	movw	r20, r24
    40ec:	6a a1       	ldd	r22, Y+34	; 0x22
    40ee:	7b a1       	ldd	r23, Y+35	; 0x23
    40f0:	8c a1       	ldd	r24, Y+36	; 0x24
    40f2:	9d a1       	ldd	r25, Y+37	; 0x25
    40f4:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    40f8:	60 93 e1 23 	sts	0x23E1, r22
    40fc:	70 93 e2 23 	sts	0x23E2, r23
    4100:	80 93 e3 23 	sts	0x23E3, r24
    4104:	90 93 e4 23 	sts	0x23E4, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    4108:	b8 01       	movw	r22, r16
    410a:	88 27       	eor	r24, r24
    410c:	77 fd       	sbrc	r23, 7
    410e:	80 95       	com	r24
    4110:	98 2f       	mov	r25, r24
    4112:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    4116:	7b 01       	movw	r14, r22
    4118:	8c 01       	movw	r16, r24
    411a:	c3 01       	movw	r24, r6
    411c:	b2 01       	movw	r22, r4
    411e:	a8 01       	movw	r20, r16
    4120:	97 01       	movw	r18, r14
    4122:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    4126:	60 93 e5 23 	sts	0x23E5, r22
    412a:	70 93 e6 23 	sts	0x23E6, r23
    412e:	80 93 e7 23 	sts	0x23E7, r24
    4132:	90 93 e8 23 	sts	0x23E8, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    4136:	c6 01       	movw	r24, r12
    4138:	b5 01       	movw	r22, r10
    413a:	a8 01       	movw	r20, r16
    413c:	97 01       	movw	r18, r14
    413e:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    4142:	60 93 e9 23 	sts	0x23E9, r22
    4146:	70 93 ea 23 	sts	0x23EA, r23
    414a:	80 93 eb 23 	sts	0x23EB, r24
    414e:	90 93 ec 23 	sts	0x23EC, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    4152:	69 81       	ldd	r22, Y+1	; 0x01
    4154:	7a 81       	ldd	r23, Y+2	; 0x02
    4156:	8b 81       	ldd	r24, Y+3	; 0x03
    4158:	9c 81       	ldd	r25, Y+4	; 0x04
    415a:	0e 94 84 44 	call	0x8908	; 0x8908 <sin>
    415e:	5b 01       	movw	r10, r22
    4160:	6c 01       	movw	r12, r24
    4162:	f4 01       	movw	r30, r8
    4164:	ee 0f       	add	r30, r30
    4166:	ff 1f       	adc	r31, r31
    4168:	ee 0f       	add	r30, r30
    416a:	ff 1f       	adc	r31, r31
    416c:	e8 5a       	subi	r30, 0xA8	; 168
    416e:	fe 4d       	sbci	r31, 0xDE	; 222
    4170:	61 81       	ldd	r22, Z+1	; 0x01
    4172:	72 81       	ldd	r23, Z+2	; 0x02
    4174:	83 81       	ldd	r24, Z+3	; 0x03
    4176:	94 81       	ldd	r25, Z+4	; 0x04
    4178:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    417c:	f4 01       	movw	r30, r8
    417e:	ee 0f       	add	r30, r30
    4180:	ff 1f       	adc	r31, r31
    4182:	e8 0d       	add	r30, r8
    4184:	f9 1d       	adc	r31, r9
    4186:	13 e0       	ldi	r17, 0x03	; 3
    4188:	ee 0f       	add	r30, r30
    418a:	ff 1f       	adc	r31, r31
    418c:	1a 95       	dec	r17
    418e:	e1 f7       	brne	.-8      	; 0x4188 <mc_arc_blocking+0x20a>
    4190:	ea 5b       	subi	r30, 0xBA	; 186
    4192:	fc 4d       	sbci	r31, 0xDC	; 220
    4194:	21 a1       	ldd	r18, Z+33	; 0x21
    4196:	32 a1       	ldd	r19, Z+34	; 0x22
    4198:	43 a1       	ldd	r20, Z+35	; 0x23
    419a:	54 a1       	ldd	r21, Z+36	; 0x24
    419c:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    41a0:	7b 01       	movw	r14, r22
    41a2:	8c 01       	movw	r16, r24
    41a4:	c6 01       	movw	r24, r12
    41a6:	b5 01       	movw	r22, r10
    41a8:	2d 81       	ldd	r18, Y+5	; 0x05
    41aa:	3e 81       	ldd	r19, Y+6	; 0x06
    41ac:	4f 81       	ldd	r20, Y+7	; 0x07
    41ae:	58 85       	ldd	r21, Y+8	; 0x08
    41b0:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    41b4:	9b 01       	movw	r18, r22
    41b6:	ac 01       	movw	r20, r24
    41b8:	c8 01       	movw	r24, r16
    41ba:	b7 01       	movw	r22, r14
    41bc:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    41c0:	60 93 d1 23 	sts	0x23D1, r22
    41c4:	70 93 d2 23 	sts	0x23D2, r23
    41c8:	80 93 d3 23 	sts	0x23D3, r24
    41cc:	90 93 d4 23 	sts	0x23D4, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    41d0:	69 81       	ldd	r22, Y+1	; 0x01
    41d2:	7a 81       	ldd	r23, Y+2	; 0x02
    41d4:	8b 81       	ldd	r24, Y+3	; 0x03
    41d6:	9c 81       	ldd	r25, Y+4	; 0x04
    41d8:	0e 94 63 41 	call	0x82c6	; 0x82c6 <cos>
    41dc:	5b 01       	movw	r10, r22
    41de:	6c 01       	movw	r12, r24
    41e0:	f1 01       	movw	r30, r2
    41e2:	ee 0f       	add	r30, r30
    41e4:	ff 1f       	adc	r31, r31
    41e6:	ee 0f       	add	r30, r30
    41e8:	ff 1f       	adc	r31, r31
    41ea:	e8 5a       	subi	r30, 0xA8	; 168
    41ec:	fe 4d       	sbci	r31, 0xDE	; 222
    41ee:	61 81       	ldd	r22, Z+1	; 0x01
    41f0:	72 81       	ldd	r23, Z+2	; 0x02
    41f2:	83 81       	ldd	r24, Z+3	; 0x03
    41f4:	94 81       	ldd	r25, Z+4	; 0x04
    41f6:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    41fa:	f1 01       	movw	r30, r2
    41fc:	ee 0f       	add	r30, r30
    41fe:	ff 1f       	adc	r31, r31
    4200:	e2 0d       	add	r30, r2
    4202:	f3 1d       	adc	r31, r3
    4204:	53 e0       	ldi	r21, 0x03	; 3
    4206:	ee 0f       	add	r30, r30
    4208:	ff 1f       	adc	r31, r31
    420a:	5a 95       	dec	r21
    420c:	e1 f7       	brne	.-8      	; 0x4206 <mc_arc_blocking+0x288>
    420e:	ea 5b       	subi	r30, 0xBA	; 186
    4210:	fc 4d       	sbci	r31, 0xDC	; 220
    4212:	21 a1       	ldd	r18, Z+33	; 0x21
    4214:	32 a1       	ldd	r19, Z+34	; 0x22
    4216:	43 a1       	ldd	r20, Z+35	; 0x23
    4218:	54 a1       	ldd	r21, Z+36	; 0x24
    421a:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    421e:	7b 01       	movw	r14, r22
    4220:	8c 01       	movw	r16, r24
    4222:	c6 01       	movw	r24, r12
    4224:	b5 01       	movw	r22, r10
    4226:	2d 81       	ldd	r18, Y+5	; 0x05
    4228:	3e 81       	ldd	r19, Y+6	; 0x06
    422a:	4f 81       	ldd	r20, Y+7	; 0x07
    422c:	58 85       	ldd	r21, Y+8	; 0x08
    422e:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    4232:	9b 01       	movw	r18, r22
    4234:	ac 01       	movw	r20, r24
    4236:	c8 01       	movw	r24, r16
    4238:	b7 01       	movw	r22, r14
    423a:	0e 94 bf 40 	call	0x817e	; 0x817e <__subsf3>
    423e:	60 93 d5 23 	sts	0x23D5, r22
    4242:	70 93 d6 23 	sts	0x23D6, r23
    4246:	80 93 d7 23 	sts	0x23D7, r24
    424a:	90 93 d8 23 	sts	0x23D8, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    424e:	e8 a1       	ldd	r30, Y+32	; 0x20
    4250:	f9 a1       	ldd	r31, Y+33	; 0x21
    4252:	ee 0f       	add	r30, r30
    4254:	ff 1f       	adc	r31, r31
    4256:	ee 0f       	add	r30, r30
    4258:	ff 1f       	adc	r31, r31
    425a:	8f 01       	movw	r16, r30
    425c:	0c 54       	subi	r16, 0x4C	; 76
    425e:	1c 4d       	sbci	r17, 0xDC	; 220
    4260:	e8 5a       	subi	r30, 0xA8	; 168
    4262:	fe 4d       	sbci	r31, 0xDE	; 222
    4264:	61 81       	ldd	r22, Z+1	; 0x01
    4266:	72 81       	ldd	r23, Z+2	; 0x02
    4268:	83 81       	ldd	r24, Z+3	; 0x03
    426a:	94 81       	ldd	r25, Z+4	; 0x04
    426c:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    4270:	20 91 97 23 	lds	r18, 0x2397
    4274:	30 91 98 23 	lds	r19, 0x2398
    4278:	40 91 99 23 	lds	r20, 0x2399
    427c:	50 91 9a 23 	lds	r21, 0x239A
    4280:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    4284:	d8 01       	movw	r26, r16
    4286:	1d 96       	adiw	r26, 0x0d	; 13
    4288:	6d 93       	st	X+, r22
    428a:	7d 93       	st	X+, r23
    428c:	8d 93       	st	X+, r24
    428e:	9c 93       	st	X, r25
    4290:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    4292:	10 92 b7 23 	sts	0x23B7, r1
    4296:	10 92 b8 23 	sts	0x23B8, r1
    429a:	bf c0       	rjmp	.+382    	; 0x441a <mc_arc_blocking+0x49c>
		ma.theta += ma.theta_per_segment;
    429c:	60 91 d9 23 	lds	r22, 0x23D9
    42a0:	70 91 da 23 	lds	r23, 0x23DA
    42a4:	80 91 db 23 	lds	r24, 0x23DB
    42a8:	90 91 dc 23 	lds	r25, 0x23DC
    42ac:	20 91 e5 23 	lds	r18, 0x23E5
    42b0:	30 91 e6 23 	lds	r19, 0x23E6
    42b4:	40 91 e7 23 	lds	r20, 0x23E7
    42b8:	50 91 e8 23 	lds	r21, 0x23E8
    42bc:	0e 94 c0 40 	call	0x8180	; 0x8180 <__addsf3>
    42c0:	7b 01       	movw	r14, r22
    42c2:	8c 01       	movw	r16, r24
    42c4:	cb 01       	movw	r24, r22
    42c6:	d8 01       	movw	r26, r16
    42c8:	80 93 d9 23 	sts	0x23D9, r24
    42cc:	90 93 da 23 	sts	0x23DA, r25
    42d0:	a0 93 db 23 	sts	0x23DB, r26
    42d4:	b0 93 dc 23 	sts	0x23DC, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    42d8:	b7 01       	movw	r22, r14
    42da:	c8 01       	movw	r24, r16
    42dc:	0e 94 84 44 	call	0x8908	; 0x8908 <sin>
    42e0:	80 90 dd 23 	lds	r8, 0x23DD
    42e4:	90 90 de 23 	lds	r9, 0x23DE
    42e8:	a0 90 df 23 	lds	r10, 0x23DF
    42ec:	b0 90 e0 23 	lds	r11, 0x23E0
    42f0:	c0 90 bb 23 	lds	r12, 0x23BB
    42f4:	d0 90 bc 23 	lds	r13, 0x23BC
    42f8:	cc 0c       	add	r12, r12
    42fa:	dd 1c       	adc	r13, r13
    42fc:	cc 0c       	add	r12, r12
    42fe:	dd 1c       	adc	r13, r13
    4300:	e4 eb       	ldi	r30, 0xB4	; 180
    4302:	f3 e2       	ldi	r31, 0x23	; 35
    4304:	ce 0e       	add	r12, r30
    4306:	df 1e       	adc	r13, r31
    4308:	a5 01       	movw	r20, r10
    430a:	94 01       	movw	r18, r8
    430c:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    4310:	9b 01       	movw	r18, r22
    4312:	ac 01       	movw	r20, r24
    4314:	60 91 d1 23 	lds	r22, 0x23D1
    4318:	70 91 d2 23 	lds	r23, 0x23D2
    431c:	80 91 d3 23 	lds	r24, 0x23D3
    4320:	90 91 d4 23 	lds	r25, 0x23D4
    4324:	0e 94 c0 40 	call	0x8180	; 0x8180 <__addsf3>
    4328:	d6 01       	movw	r26, r12
    432a:	1d 96       	adiw	r26, 0x0d	; 13
    432c:	6d 93       	st	X+, r22
    432e:	7d 93       	st	X+, r23
    4330:	8d 93       	st	X+, r24
    4332:	9c 93       	st	X, r25
    4334:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    4336:	b7 01       	movw	r22, r14
    4338:	c8 01       	movw	r24, r16
    433a:	0e 94 63 41 	call	0x82c6	; 0x82c6 <cos>
    433e:	00 91 bd 23 	lds	r16, 0x23BD
    4342:	10 91 be 23 	lds	r17, 0x23BE
    4346:	00 0f       	add	r16, r16
    4348:	11 1f       	adc	r17, r17
    434a:	00 0f       	add	r16, r16
    434c:	11 1f       	adc	r17, r17
    434e:	0c 54       	subi	r16, 0x4C	; 76
    4350:	1c 4d       	sbci	r17, 0xDC	; 220
    4352:	a5 01       	movw	r20, r10
    4354:	94 01       	movw	r18, r8
    4356:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    435a:	9b 01       	movw	r18, r22
    435c:	ac 01       	movw	r20, r24
    435e:	60 91 d5 23 	lds	r22, 0x23D5
    4362:	70 91 d6 23 	lds	r23, 0x23D6
    4366:	80 91 d7 23 	lds	r24, 0x23D7
    436a:	90 91 d8 23 	lds	r25, 0x23D8
    436e:	0e 94 c0 40 	call	0x8180	; 0x8180 <__addsf3>
    4372:	f8 01       	movw	r30, r16
    4374:	65 87       	std	Z+13, r22	; 0x0d
    4376:	76 87       	std	Z+14, r23	; 0x0e
    4378:	87 87       	std	Z+15, r24	; 0x0f
    437a:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    437c:	00 91 bf 23 	lds	r16, 0x23BF
    4380:	10 91 c0 23 	lds	r17, 0x23C0
    4384:	00 0f       	add	r16, r16
    4386:	11 1f       	adc	r17, r17
    4388:	00 0f       	add	r16, r16
    438a:	11 1f       	adc	r17, r17
    438c:	0c 54       	subi	r16, 0x4C	; 76
    438e:	1c 4d       	sbci	r17, 0xDC	; 220
    4390:	d8 01       	movw	r26, r16
    4392:	1d 96       	adiw	r26, 0x0d	; 13
    4394:	6d 91       	ld	r22, X+
    4396:	7d 91       	ld	r23, X+
    4398:	8d 91       	ld	r24, X+
    439a:	9c 91       	ld	r25, X
    439c:	50 97       	sbiw	r26, 0x10	; 16
    439e:	20 91 e9 23 	lds	r18, 0x23E9
    43a2:	30 91 ea 23 	lds	r19, 0x23EA
    43a6:	40 91 eb 23 	lds	r20, 0x23EB
    43aa:	50 91 ec 23 	lds	r21, 0x23EC
    43ae:	0e 94 c0 40 	call	0x8180	; 0x8180 <__addsf3>
    43b2:	f8 01       	movw	r30, r16
    43b4:	65 87       	std	Z+13, r22	; 0x0d
    43b6:	76 87       	std	Z+14, r23	; 0x0e
    43b8:	87 87       	std	Z+15, r24	; 0x0f
    43ba:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    43bc:	60 91 c1 23 	lds	r22, 0x23C1
    43c0:	70 91 c2 23 	lds	r23, 0x23C2
    43c4:	80 91 c3 23 	lds	r24, 0x23C3
    43c8:	90 91 c4 23 	lds	r25, 0x23C4
    43cc:	20 91 c5 23 	lds	r18, 0x23C5
    43d0:	30 91 c6 23 	lds	r19, 0x23C6
    43d4:	40 91 c7 23 	lds	r20, 0x23C7
    43d8:	50 91 c8 23 	lds	r21, 0x23C8
    43dc:	e0 90 c9 23 	lds	r14, 0x23C9
    43e0:	f0 90 ca 23 	lds	r15, 0x23CA
    43e4:	00 91 cb 23 	lds	r16, 0x23CB
    43e8:	10 91 cc 23 	lds	r17, 0x23CC
    43ec:	a0 90 e1 23 	lds	r10, 0x23E1
    43f0:	b0 90 e2 23 	lds	r11, 0x23E2
    43f4:	c0 90 e3 23 	lds	r12, 0x23E3
    43f8:	d0 90 e4 23 	lds	r13, 0x23E4
    43fc:	80 90 b9 23 	lds	r8, 0x23B9
    4400:	90 90 ba 23 	lds	r9, 0x23BA
    4404:	0e 94 cf 1b 	call	0x379e	; 0x379e <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    4408:	80 91 b7 23 	lds	r24, 0x23B7
    440c:	90 91 b8 23 	lds	r25, 0x23B8
    4410:	01 96       	adiw	r24, 0x01	; 1
    4412:	80 93 b7 23 	sts	0x23B7, r24
    4416:	90 93 b8 23 	sts	0x23B8, r25
    441a:	20 91 b7 23 	lds	r18, 0x23B7
    441e:	30 91 b8 23 	lds	r19, 0x23B8
    4422:	80 91 b5 23 	lds	r24, 0x23B5
    4426:	90 91 b6 23 	lds	r25, 0x23B6
    442a:	82 17       	cp	r24, r18
    442c:	93 07       	cpc	r25, r19
    442e:	0c f0       	brlt	.+2      	; 0x4432 <mc_arc_blocking+0x4b4>
    4430:	35 cf       	rjmp	.-406    	; 0x429c <mc_arc_blocking+0x31e>
    4432:	20 e0       	ldi	r18, 0x00	; 0
    4434:	30 e0       	ldi	r19, 0x00	; 0
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    4436:	c9 01       	movw	r24, r18
    4438:	28 96       	adiw	r28, 0x08	; 8
    443a:	cd bf       	out	0x3d, r28	; 61
    443c:	de bf       	out	0x3e, r29	; 62
    443e:	cf 91       	pop	r28
    4440:	df 91       	pop	r29
    4442:	1f 91       	pop	r17
    4444:	0f 91       	pop	r16
    4446:	ff 90       	pop	r15
    4448:	ef 90       	pop	r14
    444a:	df 90       	pop	r13
    444c:	cf 90       	pop	r12
    444e:	bf 90       	pop	r11
    4450:	af 90       	pop	r10
    4452:	9f 90       	pop	r9
    4454:	8f 90       	pop	r8
    4456:	7f 90       	pop	r7
    4458:	6f 90       	pop	r6
    445a:	5f 90       	pop	r5
    445c:	4f 90       	pop	r4
    445e:	3f 90       	pop	r3
    4460:	2f 90       	pop	r2
    4462:	08 95       	ret

00004464 <mc_line_blocking>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line_blocking(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    4464:	2f 92       	push	r2
    4466:	3f 92       	push	r3
    4468:	4f 92       	push	r4
    446a:	5f 92       	push	r5
    446c:	6f 92       	push	r6
    446e:	7f 92       	push	r7
    4470:	8f 92       	push	r8
    4472:	9f 92       	push	r9
    4474:	af 92       	push	r10
    4476:	bf 92       	push	r11
    4478:	cf 92       	push	r12
    447a:	df 92       	push	r13
    447c:	ef 92       	push	r14
    447e:	ff 92       	push	r15
    4480:	0f 93       	push	r16
    4482:	1f 93       	push	r17
    4484:	df 93       	push	r29
    4486:	cf 93       	push	r28
    4488:	cd b7       	in	r28, 0x3d	; 61
    448a:	de b7       	in	r29, 0x3e	; 62
    448c:	6a 97       	sbiw	r28, 0x1a	; 26
    448e:	cd bf       	out	0x3d, r28	; 61
    4490:	de bf       	out	0x3e, r29	; 62
    4492:	19 01       	movw	r2, r18
    4494:	2a 01       	movw	r4, r20
    4496:	ad 8a       	std	Y+21, r10	; 0x15
    4498:	be 8a       	std	Y+22, r11	; 0x16
    449a:	cf 8a       	std	Y+23, r12	; 0x17
    449c:	d8 8e       	std	Y+24, r13	; 0x18
    449e:	89 8e       	std	Y+25, r8	; 0x19
    44a0:	9a 8e       	std	Y+26, r9	; 0x1a
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    44a2:	20 91 67 23 	lds	r18, 0x2367
    44a6:	30 91 68 23 	lds	r19, 0x2368
    44aa:	40 91 69 23 	lds	r20, 0x2369
    44ae:	50 91 6a 23 	lds	r21, 0x236A
    44b2:	29 8b       	std	Y+17, r18	; 0x11
    44b4:	3a 8b       	std	Y+18, r19	; 0x12
    44b6:	4b 8b       	std	Y+19, r20	; 0x13
    44b8:	5c 8b       	std	Y+20, r21	; 0x14
    44ba:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    44be:	0e 94 f1 43 	call	0x87e2	; 0x87e2 <lround>
    44c2:	3b 01       	movw	r6, r22
    44c4:	4c 01       	movw	r8, r24
    44c6:	60 92 65 21 	sts	0x2165, r6
    44ca:	70 92 66 21 	sts	0x2166, r7
    44ce:	80 92 67 21 	sts	0x2167, r8
    44d2:	90 92 68 21 	sts	0x2168, r9
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    44d6:	80 91 7f 23 	lds	r24, 0x237F
    44da:	90 91 80 23 	lds	r25, 0x2380
    44de:	a0 91 81 23 	lds	r26, 0x2381
    44e2:	b0 91 82 23 	lds	r27, 0x2382
    44e6:	8d 87       	std	Y+13, r24	; 0x0d
    44e8:	9e 87       	std	Y+14, r25	; 0x0e
    44ea:	af 87       	std	Y+15, r26	; 0x0f
    44ec:	b8 8b       	std	Y+16, r27	; 0x10
    44ee:	c2 01       	movw	r24, r4
    44f0:	b1 01       	movw	r22, r2
    44f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    44f4:	3e 85       	ldd	r19, Y+14	; 0x0e
    44f6:	4f 85       	ldd	r20, Y+15	; 0x0f
    44f8:	58 89       	ldd	r21, Y+16	; 0x10
    44fa:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    44fe:	0e 94 f1 43 	call	0x87e2	; 0x87e2 <lround>
    4502:	5b 01       	movw	r10, r22
    4504:	6c 01       	movw	r12, r24
    4506:	a0 92 69 21 	sts	0x2169, r10
    450a:	b0 92 6a 21 	sts	0x216A, r11
    450e:	c0 92 6b 21 	sts	0x216B, r12
    4512:	d0 92 6c 21 	sts	0x216C, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    4516:	20 91 97 23 	lds	r18, 0x2397
    451a:	30 91 98 23 	lds	r19, 0x2398
    451e:	40 91 99 23 	lds	r20, 0x2399
    4522:	50 91 9a 23 	lds	r21, 0x239A
    4526:	29 87       	std	Y+9, r18	; 0x09
    4528:	3a 87       	std	Y+10, r19	; 0x0a
    452a:	4b 87       	std	Y+11, r20	; 0x0b
    452c:	5c 87       	std	Y+12, r21	; 0x0c
    452e:	c8 01       	movw	r24, r16
    4530:	b7 01       	movw	r22, r14
    4532:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    4536:	0e 94 f1 43 	call	0x87e2	; 0x87e2 <lround>
    453a:	9b 01       	movw	r18, r22
    453c:	ac 01       	movw	r20, r24
    453e:	20 93 6d 21 	sts	0x216D, r18
    4542:	30 93 6e 21 	sts	0x216E, r19
    4546:	40 93 6f 21 	sts	0x216F, r20
    454a:	50 93 70 21 	sts	0x2170, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    454e:	80 91 59 21 	lds	r24, 0x2159
    4552:	90 91 5a 21 	lds	r25, 0x215A
    4556:	a0 91 5b 21 	lds	r26, 0x215B
    455a:	b0 91 5c 21 	lds	r27, 0x215C
    455e:	84 01       	movw	r16, r8
    4560:	73 01       	movw	r14, r6
    4562:	e8 1a       	sub	r14, r24
    4564:	f9 0a       	sbc	r15, r25
    4566:	0a 0b       	sbc	r16, r26
    4568:	1b 0b       	sbc	r17, r27
    456a:	ed 82       	std	Y+5, r14	; 0x05
    456c:	fe 82       	std	Y+6, r15	; 0x06
    456e:	0f 83       	std	Y+7, r16	; 0x07
    4570:	18 87       	std	Y+8, r17	; 0x08
    4572:	e0 92 71 21 	sts	0x2171, r14
    4576:	f0 92 72 21 	sts	0x2172, r15
    457a:	00 93 73 21 	sts	0x2173, r16
    457e:	10 93 74 21 	sts	0x2174, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    4582:	80 91 5d 21 	lds	r24, 0x215D
    4586:	90 91 5e 21 	lds	r25, 0x215E
    458a:	a0 91 5f 21 	lds	r26, 0x215F
    458e:	b0 91 60 21 	lds	r27, 0x2160
    4592:	86 01       	movw	r16, r12
    4594:	75 01       	movw	r14, r10
    4596:	e8 1a       	sub	r14, r24
    4598:	f9 0a       	sbc	r15, r25
    459a:	0a 0b       	sbc	r16, r26
    459c:	1b 0b       	sbc	r17, r27
    459e:	e9 82       	std	Y+1, r14	; 0x01
    45a0:	fa 82       	std	Y+2, r15	; 0x02
    45a2:	0b 83       	std	Y+3, r16	; 0x03
    45a4:	1c 83       	std	Y+4, r17	; 0x04
    45a6:	e0 92 75 21 	sts	0x2175, r14
    45aa:	f0 92 76 21 	sts	0x2176, r15
    45ae:	00 93 77 21 	sts	0x2177, r16
    45b2:	10 93 78 21 	sts	0x2178, r17
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    45b6:	80 91 61 21 	lds	r24, 0x2161
    45ba:	90 91 62 21 	lds	r25, 0x2162
    45be:	a0 91 63 21 	lds	r26, 0x2163
    45c2:	b0 91 64 21 	lds	r27, 0x2164
    45c6:	19 01       	movw	r2, r18
    45c8:	2a 01       	movw	r4, r20
    45ca:	28 1a       	sub	r2, r24
    45cc:	39 0a       	sbc	r3, r25
    45ce:	4a 0a       	sbc	r4, r26
    45d0:	5b 0a       	sbc	r5, r27
    45d2:	20 92 79 21 	sts	0x2179, r2
    45d6:	30 92 7a 21 	sts	0x217A, r3
    45da:	40 92 7b 21 	sts	0x217B, r4
    45de:	50 92 7c 21 	sts	0x217C, r5

	// skip zero length lines
	if ((mc.steps[X] + mc.steps[Y] + mc.steps[Z]) == 0) {
    45e2:	d8 01       	movw	r26, r16
    45e4:	c7 01       	movw	r24, r14
    45e6:	0d 81       	ldd	r16, Y+5	; 0x05
    45e8:	1e 81       	ldd	r17, Y+6	; 0x06
    45ea:	2f 81       	ldd	r18, Y+7	; 0x07
    45ec:	38 85       	ldd	r19, Y+8	; 0x08
    45ee:	80 0f       	add	r24, r16
    45f0:	91 1f       	adc	r25, r17
    45f2:	a2 1f       	adc	r26, r18
    45f4:	b3 1f       	adc	r27, r19
    45f6:	82 0d       	add	r24, r2
    45f8:	93 1d       	adc	r25, r3
    45fa:	a4 1d       	adc	r26, r4
    45fc:	b5 1d       	adc	r27, r5
    45fe:	00 97       	sbiw	r24, 0x00	; 0
    4600:	a1 05       	cpc	r26, r1
    4602:	b1 05       	cpc	r27, r1
    4604:	19 f4       	brne	.+6      	; 0x460c <mc_line_blocking+0x1a8>
    4606:	24 e1       	ldi	r18, 0x14	; 20
    4608:	30 e0       	ldi	r19, 0x00	; 0
    460a:	86 c0       	rjmp	.+268    	; 0x4718 <mc_line_blocking+0x2b4>
		return (TG_ZERO_LENGTH_LINE);
	}

	if (invert_feed_rate) {
    460c:	29 8d       	ldd	r18, Y+25	; 0x19
    460e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4610:	23 2b       	or	r18, r19
    4612:	59 f0       	breq	.+22     	; 0x462a <mc_line_blocking+0x1c6>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    4614:	60 ec       	ldi	r22, 0xC0	; 192
    4616:	71 ee       	ldi	r23, 0xE1	; 225
    4618:	84 e6       	ldi	r24, 0x64	; 100
    461a:	9c e4       	ldi	r25, 0x4C	; 76
    461c:	2d 89       	ldd	r18, Y+21	; 0x15
    461e:	3e 89       	ldd	r19, Y+22	; 0x16
    4620:	4f 89       	ldd	r20, Y+23	; 0x17
    4622:	58 8d       	ldd	r21, Y+24	; 0x18
    4624:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    4628:	4e c0       	rjmp	.+156    	; 0x46c6 <mc_line_blocking+0x262>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    462a:	6d 81       	ldd	r22, Y+5	; 0x05
    462c:	7e 81       	ldd	r23, Y+6	; 0x06
    462e:	8f 81       	ldd	r24, Y+7	; 0x07
    4630:	98 85       	ldd	r25, Y+8	; 0x08
    4632:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    4636:	29 89       	ldd	r18, Y+17	; 0x11
    4638:	3a 89       	ldd	r19, Y+18	; 0x12
    463a:	4b 89       	ldd	r20, Y+19	; 0x13
    463c:	5c 89       	ldd	r21, Y+20	; 0x14
    463e:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    4642:	0e 94 cc 44 	call	0x8998	; 0x8998 <square>
    4646:	3b 01       	movw	r6, r22
    4648:	4c 01       	movw	r8, r24
    464a:	69 81       	ldd	r22, Y+1	; 0x01
    464c:	7a 81       	ldd	r23, Y+2	; 0x02
    464e:	8b 81       	ldd	r24, Y+3	; 0x03
    4650:	9c 81       	ldd	r25, Y+4	; 0x04
    4652:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    4656:	2d 85       	ldd	r18, Y+13	; 0x0d
    4658:	3e 85       	ldd	r19, Y+14	; 0x0e
    465a:	4f 85       	ldd	r20, Y+15	; 0x0f
    465c:	58 89       	ldd	r21, Y+16	; 0x10
    465e:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    4662:	0e 94 cc 44 	call	0x8998	; 0x8998 <square>
    4666:	5b 01       	movw	r10, r22
    4668:	6c 01       	movw	r12, r24
    466a:	c2 01       	movw	r24, r4
    466c:	b1 01       	movw	r22, r2
    466e:	0e 94 01 42 	call	0x8402	; 0x8402 <__floatsisf>
    4672:	29 85       	ldd	r18, Y+9	; 0x09
    4674:	3a 85       	ldd	r19, Y+10	; 0x0a
    4676:	4b 85       	ldd	r20, Y+11	; 0x0b
    4678:	5c 85       	ldd	r21, Y+12	; 0x0c
    467a:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    467e:	0e 94 cc 44 	call	0x8998	; 0x8998 <square>
    4682:	7b 01       	movw	r14, r22
    4684:	8c 01       	movw	r16, r24
    4686:	c4 01       	movw	r24, r8
    4688:	b3 01       	movw	r22, r6
    468a:	a6 01       	movw	r20, r12
    468c:	95 01       	movw	r18, r10
    468e:	0e 94 c0 40 	call	0x8180	; 0x8180 <__addsf3>
    4692:	a8 01       	movw	r20, r16
    4694:	97 01       	movw	r18, r14
    4696:	0e 94 c0 40 	call	0x8180	; 0x8180 <__addsf3>
    469a:	0e 94 8e 44 	call	0x891c	; 0x891c <sqrt>
    469e:	60 93 81 21 	sts	0x2181, r22
    46a2:	70 93 82 21 	sts	0x2182, r23
    46a6:	80 93 83 21 	sts	0x2183, r24
    46aa:	90 93 84 21 	sts	0x2184, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    46ae:	2d 89       	ldd	r18, Y+21	; 0x15
    46b0:	3e 89       	ldd	r19, Y+22	; 0x16
    46b2:	4f 89       	ldd	r20, Y+23	; 0x17
    46b4:	58 8d       	ldd	r21, Y+24	; 0x18
    46b6:	0e 94 66 41 	call	0x82cc	; 0x82cc <__divsf3>
    46ba:	20 e0       	ldi	r18, 0x00	; 0
    46bc:	34 e2       	ldi	r19, 0x24	; 36
    46be:	44 e7       	ldi	r20, 0x74	; 116
    46c0:	59 e4       	ldi	r21, 0x49	; 73
    46c2:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    46c6:	0e 94 f1 43 	call	0x87e2	; 0x87e2 <lround>
    46ca:	60 93 7d 21 	sts	0x217D, r22
    46ce:	70 93 7e 21 	sts	0x217E, r23
    46d2:	80 93 7f 21 	sts	0x217F, r24
    46d6:	90 93 80 21 	sts	0x2180, r25
	}
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    46da:	a0 90 7d 21 	lds	r10, 0x217D
    46de:	b0 90 7e 21 	lds	r11, 0x217E
    46e2:	c0 90 7f 21 	lds	r12, 0x217F
    46e6:	d0 90 80 21 	lds	r13, 0x2180
    46ea:	6d 81       	ldd	r22, Y+5	; 0x05
    46ec:	7e 81       	ldd	r23, Y+6	; 0x06
    46ee:	8f 81       	ldd	r24, Y+7	; 0x07
    46f0:	98 85       	ldd	r25, Y+8	; 0x08
    46f2:	29 81       	ldd	r18, Y+1	; 0x01
    46f4:	3a 81       	ldd	r19, Y+2	; 0x02
    46f6:	4b 81       	ldd	r20, Y+3	; 0x03
    46f8:	5c 81       	ldd	r21, Y+4	; 0x04
    46fa:	82 01       	movw	r16, r4
    46fc:	71 01       	movw	r14, r2
    46fe:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    4702:	e9 e5       	ldi	r30, 0x59	; 89
    4704:	f1 e2       	ldi	r31, 0x21	; 33
    4706:	df 01       	movw	r26, r30
    4708:	1c 96       	adiw	r26, 0x0c	; 12
    470a:	8c e0       	ldi	r24, 0x0C	; 12
    470c:	0d 90       	ld	r0, X+
    470e:	01 92       	st	Z+, r0
    4710:	81 50       	subi	r24, 0x01	; 1
    4712:	e1 f7       	brne	.-8      	; 0x470c <mc_line_blocking+0x2a8>
    4714:	20 e0       	ldi	r18, 0x00	; 0
    4716:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    4718:	c9 01       	movw	r24, r18
    471a:	6a 96       	adiw	r28, 0x1a	; 26
    471c:	cd bf       	out	0x3d, r28	; 61
    471e:	de bf       	out	0x3e, r29	; 62
    4720:	cf 91       	pop	r28
    4722:	df 91       	pop	r29
    4724:	1f 91       	pop	r17
    4726:	0f 91       	pop	r16
    4728:	ff 90       	pop	r15
    472a:	ef 90       	pop	r14
    472c:	df 90       	pop	r13
    472e:	cf 90       	pop	r12
    4730:	bf 90       	pop	r11
    4732:	af 90       	pop	r10
    4734:	9f 90       	pop	r9
    4736:	8f 90       	pop	r8
    4738:	7f 90       	pop	r7
    473a:	6f 90       	pop	r6
    473c:	5f 90       	pop	r5
    473e:	4f 90       	pop	r4
    4740:	3f 90       	pop	r3
    4742:	2f 90       	pop	r2
    4744:	08 95       	ret

00004746 <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    4746:	e0 e6       	ldi	r30, 0x60	; 96
    4748:	f6 e0       	ldi	r31, 0x06	; 6
    474a:	80 e4       	ldi	r24, 0x40	; 64
    474c:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    474e:	80 e8       	ldi	r24, 0x80	; 128
    4750:	81 83       	std	Z+1, r24	; 0x01
}
    4752:	08 95       	ret

00004754 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    4754:	97 fd       	sbrc	r25, 7
    4756:	05 c0       	rjmp	.+10     	; 0x4762 <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    4758:	80 e8       	ldi	r24, 0x80	; 128
    475a:	e0 e6       	ldi	r30, 0x60	; 96
    475c:	f6 e0       	ldi	r31, 0x06	; 6
    475e:	85 83       	std	Z+5, r24	; 0x05
    4760:	04 c0       	rjmp	.+8      	; 0x476a <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    4762:	80 e8       	ldi	r24, 0x80	; 128
    4764:	e0 e6       	ldi	r30, 0x60	; 96
    4766:	f6 e0       	ldi	r31, 0x06	; 6
    4768:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    476a:	80 e4       	ldi	r24, 0x40	; 64
    476c:	e0 e6       	ldi	r30, 0x60	; 96
    476e:	f6 e0       	ldi	r31, 0x06	; 6
    4770:	85 83       	std	Z+5, r24	; 0x05
}
    4772:	08 95       	ret

00004774 <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    4774:	80 e4       	ldi	r24, 0x40	; 64
    4776:	e0 e6       	ldi	r30, 0x60	; 96
    4778:	f6 e0       	ldi	r31, 0x06	; 6
    477a:	86 83       	std	Z+6, r24	; 0x06
}
    477c:	08 95       	ret

0000477e <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    477e:	cf 93       	push	r28
    4780:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    4782:	10 92 03 23 	sts	0x2303, r1
	ax.exec_mutex = FALSE;
    4786:	10 92 02 23 	sts	0x2302, r1

	ax.a[X].port = &X_MOTOR_PORT;				// bind PORTs to structs
    478a:	80 e0       	ldi	r24, 0x00	; 0
    478c:	96 e0       	ldi	r25, 0x06	; 6
    478e:	80 93 12 23 	sts	0x2312, r24
    4792:	90 93 13 23 	sts	0x2313, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    4796:	80 ea       	ldi	r24, 0xA0	; 160
    4798:	96 e0       	ldi	r25, 0x06	; 6
    479a:	80 93 22 23 	sts	0x2322, r24
    479e:	90 93 23 23 	sts	0x2323, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    47a2:	80 e8       	ldi	r24, 0x80	; 128
    47a4:	96 e0       	ldi	r25, 0x06	; 6
    47a6:	80 93 32 23 	sts	0x2332, r24
    47aa:	90 93 33 23 	sts	0x2333, r25
	ax.a[A].port = &A_MOTOR_PORT;
    47ae:	80 e6       	ldi	r24, 0x60	; 96
    47b0:	96 e0       	ldi	r25, 0x06	; 6
    47b2:	80 93 42 23 	sts	0x2342, r24
    47b6:	90 93 43 23 	sts	0x2343, r25

	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
    47ba:	80 e0       	ldi	r24, 0x00	; 0
    47bc:	98 e0       	ldi	r25, 0x08	; 8
    47be:	80 93 14 23 	sts	0x2314, r24
    47c2:	90 93 15 23 	sts	0x2315, r25
	ax.a[Y].timer = &Y_TIMER;
    47c6:	80 e0       	ldi	r24, 0x00	; 0
    47c8:	99 e0       	ldi	r25, 0x09	; 9
    47ca:	80 93 24 23 	sts	0x2324, r24
    47ce:	90 93 25 23 	sts	0x2325, r25
	ax.a[Z].timer = &Z_TIMER;
    47d2:	80 e0       	ldi	r24, 0x00	; 0
    47d4:	9a e0       	ldi	r25, 0x0A	; 10
    47d6:	80 93 34 23 	sts	0x2334, r24
    47da:	90 93 35 23 	sts	0x2335, r25
	ax.a[A].timer = &A_TIMER;
    47de:	80 e0       	ldi	r24, 0x00	; 0
    47e0:	9b e0       	ldi	r25, 0x0B	; 11
    47e2:	80 93 44 23 	sts	0x2344, r24
    47e6:	90 93 45 23 	sts	0x2345, r25
    47ea:	c6 e5       	ldi	r28, 0x56	; 86
    47ec:	d3 e2       	ldi	r29, 0x23	; 35
    47ee:	a0 e1       	ldi	r26, 0x10	; 16
    47f0:	b3 e2       	ldi	r27, 0x23	; 35

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    47f2:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    47f4:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    47f6:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    47f8:	88 81       	ld	r24, Y
    47fa:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    47fc:	12 96       	adiw	r26, 0x02	; 2
    47fe:	ed 91       	ld	r30, X+
    4800:	fc 91       	ld	r31, X
    4802:	13 97       	sbiw	r26, 0x03	; 3
    4804:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    4806:	12 96       	adiw	r26, 0x02	; 2
    4808:	ed 91       	ld	r30, X+
    480a:	fc 91       	ld	r31, X
    480c:	13 97       	sbiw	r26, 0x03	; 3
    480e:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
    4810:	12 96       	adiw	r26, 0x02	; 2
    4812:	ed 91       	ld	r30, X+
    4814:	fc 91       	ld	r31, X
    4816:	13 97       	sbiw	r26, 0x03	; 3
    4818:	84 81       	ldd	r24, Z+4	; 0x04
    481a:	88 61       	ori	r24, 0x18	; 24
    481c:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    481e:	12 96       	adiw	r26, 0x02	; 2
    4820:	ed 91       	ld	r30, X+
    4822:	fc 91       	ld	r31, X
    4824:	13 97       	sbiw	r26, 0x03	; 3
    4826:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    4828:	14 96       	adiw	r26, 0x04	; 4
    482a:	ed 91       	ld	r30, X+
    482c:	fc 91       	ld	r31, X
    482e:	15 97       	sbiw	r26, 0x05	; 5
    4830:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    4832:	14 96       	adiw	r26, 0x04	; 4
    4834:	ed 91       	ld	r30, X+
    4836:	fc 91       	ld	r31, X
    4838:	15 97       	sbiw	r26, 0x05	; 5
    483a:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    483c:	14 96       	adiw	r26, 0x04	; 4
    483e:	ed 91       	ld	r30, X+
    4840:	fc 91       	ld	r31, X
    4842:	15 97       	sbiw	r26, 0x05	; 5
    4844:	96 83       	std	Z+6, r25	; 0x06
    4846:	68 96       	adiw	r28, 0x18	; 24
    4848:	50 96       	adiw	r26, 0x10	; 16
	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    484a:	83 e2       	ldi	r24, 0x23	; 35
    484c:	c6 3b       	cpi	r28, 0xB6	; 182
    484e:	d8 07       	cpc	r29, r24
    4850:	99 f6       	brne	.-90     	; 0x47f8 <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    4852:	df 91       	pop	r29
    4854:	cf 91       	pop	r28
    4856:	08 95       	ret

00004858 <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    4858:	e8 2f       	mov	r30, r24
    485a:	f0 e0       	ldi	r31, 0x00	; 0
    485c:	84 e0       	ldi	r24, 0x04	; 4
    485e:	ee 0f       	add	r30, r30
    4860:	ff 1f       	adc	r31, r31
    4862:	8a 95       	dec	r24
    4864:	e1 f7       	brne	.-8      	; 0x485e <st_set_polarity+0x6>
    4866:	ee 5f       	subi	r30, 0xFE	; 254
    4868:	fc 4d       	sbci	r31, 0xDC	; 220
    486a:	66 87       	std	Z+14, r22	; 0x0e
}
    486c:	08 95       	ret

0000486e <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X].step_counter = 0x00001000;
    486e:	26 e0       	ldi	r18, 0x06	; 6
    4870:	33 e2       	ldi	r19, 0x23	; 35
    4872:	80 e0       	ldi	r24, 0x00	; 0
    4874:	90 e1       	ldi	r25, 0x10	; 16
    4876:	a0 e0       	ldi	r26, 0x00	; 0
    4878:	b0 e0       	ldi	r27, 0x00	; 0
    487a:	80 93 06 23 	sts	0x2306, r24
    487e:	90 93 07 23 	sts	0x2307, r25
    4882:	a0 93 08 23 	sts	0x2308, r26
    4886:	b0 93 09 23 	sts	0x2309, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    488a:	e0 91 14 23 	lds	r30, 0x2314
    488e:	f0 91 15 23 	lds	r31, 0x2315
    4892:	80 e0       	ldi	r24, 0x00	; 0
    4894:	90 e1       	ldi	r25, 0x10	; 16
    4896:	86 a3       	std	Z+38, r24	; 0x26
    4898:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    489a:	41 e0       	ldi	r20, 0x01	; 1
    489c:	40 83       	st	Z, r20

	ax.a[Y].step_counter = 0x00000800;
    489e:	80 e0       	ldi	r24, 0x00	; 0
    48a0:	98 e0       	ldi	r25, 0x08	; 8
    48a2:	a0 e0       	ldi	r26, 0x00	; 0
    48a4:	b0 e0       	ldi	r27, 0x00	; 0
    48a6:	80 93 16 23 	sts	0x2316, r24
    48aa:	90 93 17 23 	sts	0x2317, r25
    48ae:	a0 93 18 23 	sts	0x2318, r26
    48b2:	b0 93 19 23 	sts	0x2319, r27
	ax.a[Y].timer->PER = 0x2000;
    48b6:	e0 91 24 23 	lds	r30, 0x2324
    48ba:	f0 91 25 23 	lds	r31, 0x2325
    48be:	80 e0       	ldi	r24, 0x00	; 0
    48c0:	90 e2       	ldi	r25, 0x20	; 32
    48c2:	86 a3       	std	Z+38, r24	; 0x26
    48c4:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    48c6:	40 83       	st	Z, r20

	ax.a[Z].step_counter = 0x00000600;
    48c8:	80 e0       	ldi	r24, 0x00	; 0
    48ca:	96 e0       	ldi	r25, 0x06	; 6
    48cc:	a0 e0       	ldi	r26, 0x00	; 0
    48ce:	b0 e0       	ldi	r27, 0x00	; 0
    48d0:	80 93 26 23 	sts	0x2326, r24
    48d4:	90 93 27 23 	sts	0x2327, r25
    48d8:	a0 93 28 23 	sts	0x2328, r26
    48dc:	b0 93 29 23 	sts	0x2329, r27
	ax.a[Z].timer->PER = 0x3000;
    48e0:	e0 91 34 23 	lds	r30, 0x2334
    48e4:	f0 91 35 23 	lds	r31, 0x2335
    48e8:	80 e0       	ldi	r24, 0x00	; 0
    48ea:	90 e3       	ldi	r25, 0x30	; 48
    48ec:	86 a3       	std	Z+38, r24	; 0x26
    48ee:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    48f0:	40 83       	st	Z, r20

	ax.a[A].step_counter = 0x00000400;
    48f2:	80 e0       	ldi	r24, 0x00	; 0
    48f4:	94 e0       	ldi	r25, 0x04	; 4
    48f6:	a0 e0       	ldi	r26, 0x00	; 0
    48f8:	b0 e0       	ldi	r27, 0x00	; 0
    48fa:	80 93 36 23 	sts	0x2336, r24
    48fe:	90 93 37 23 	sts	0x2337, r25
    4902:	a0 93 38 23 	sts	0x2338, r26
    4906:	b0 93 39 23 	sts	0x2339, r27
	ax.a[A].timer->PER = 0x4000;
    490a:	d9 01       	movw	r26, r18
    490c:	de 96       	adiw	r26, 0x3e	; 62
    490e:	ed 91       	ld	r30, X+
    4910:	fc 91       	ld	r31, X
    4912:	df 97       	sbiw	r26, 0x3f	; 63
    4914:	80 e0       	ldi	r24, 0x00	; 0
    4916:	90 e4       	ldi	r25, 0x40	; 64
    4918:	86 a3       	std	Z+38, r24	; 0x26
    491a:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    491c:	40 83       	st	Z, r20

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    491e:	23 50       	subi	r18, 0x03	; 3
    4920:	30 40       	sbci	r19, 0x00	; 0
    4922:	f9 01       	movw	r30, r18
    4924:	80 81       	ld	r24, Z
    4926:	8f 60       	ori	r24, 0x0F	; 15
    4928:	80 83       	st	Z, r24
}
    492a:	08 95       	ret

0000492c <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    492c:	f8 94       	cli
	mv_flush();									// flush the move buffer
    492e:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <mv_flush>
	sei();
    4932:	78 94       	sei
}
    4934:	08 95       	ret

00004936 <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    4936:	f8 94       	cli
	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    4938:	e0 91 14 23 	lds	r30, 0x2314
    493c:	f0 91 15 23 	lds	r31, 0x2315
    4940:	10 82       	st	Z, r1
    4942:	e0 91 24 23 	lds	r30, 0x2324
    4946:	f0 91 25 23 	lds	r31, 0x2325
    494a:	10 82       	st	Z, r1
    494c:	e0 91 34 23 	lds	r30, 0x2334
    4950:	f0 91 35 23 	lds	r31, 0x2335
    4954:	10 82       	st	Z, r1
    4956:	e0 91 44 23 	lds	r30, 0x2344
    495a:	f0 91 45 23 	lds	r31, 0x2345
    495e:	10 82       	st	Z, r1
	}	
	mv_flush();									// flush the move buffer
    4960:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    4964:	10 92 03 23 	sts	0x2303, r1
	sei();
    4968:	78 94       	sei
}
    496a:	08 95       	ret

0000496c <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    496c:	cf 92       	push	r12
    496e:	df 92       	push	r13
    4970:	ef 92       	push	r14
    4972:	ff 92       	push	r15
    4974:	0f 93       	push	r16
    4976:	1f 93       	push	r17
    4978:	cf 93       	push	r28
    497a:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    497c:	80 91 02 23 	lds	r24, 0x2302
    4980:	88 23       	and	r24, r24
    4982:	09 f0       	breq	.+2      	; 0x4986 <st_execute_move+0x1a>
    4984:	32 c1       	rjmp	.+612    	; 0x4bea <st_execute_move+0x27e>
		return;
	}
	ax.exec_mutex = TRUE;
    4986:	81 e0       	ldi	r24, 0x01	; 1
    4988:	80 93 02 23 	sts	0x2302, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    498c:	80 91 03 23 	lds	r24, 0x2303
    4990:	88 23       	and	r24, r24
    4992:	09 f0       	breq	.+2      	; 0x4996 <st_execute_move+0x2a>
    4994:	28 c1       	rjmp	.+592    	; 0x4be6 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    4996:	0e 94 31 2c 	call	0x5862	; 0x5862 <mv_dequeue_move_buffer>
    499a:	80 93 04 23 	sts	0x2304, r24
    499e:	90 93 05 23 	sts	0x2305, r25
    49a2:	89 2b       	or	r24, r25
    49a4:	09 f4       	brne	.+2      	; 0x49a8 <st_execute_move+0x3c>
    49a6:	1f c1       	rjmp	.+574    	; 0x4be6 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;
		return;
    49a8:	66 e0       	ldi	r22, 0x06	; 6
    49aa:	73 e2       	ldi	r23, 0x23	; 35
    49ac:	00 e0       	ldi	r16, 0x00	; 0
    49ae:	10 e0       	ldi	r17, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    49b0:	94 e0       	ldi	r25, 0x04	; 4
    49b2:	c9 2e       	mov	r12, r25
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    49b4:	82 e0       	ldi	r24, 0x02	; 2
    49b6:	d8 2e       	mov	r13, r24
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
		ax.exec_mutex = FALSE;
		return;
    49b8:	f0 2e       	mov	r15, r16
    49ba:	e1 2e       	mov	r14, r17
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    49bc:	db 01       	movw	r26, r22
    49be:	1e 96       	adiw	r26, 0x0e	; 14
    49c0:	ed 91       	ld	r30, X+
    49c2:	fc 91       	ld	r31, X
    49c4:	1f 97       	sbiw	r26, 0x0f	; 15
    49c6:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    49c8:	c0 91 04 23 	lds	r28, 0x2304
    49cc:	d0 91 05 23 	lds	r29, 0x2305
    49d0:	c8 01       	movw	r24, r16
    49d2:	fc 01       	movw	r30, r24
    49d4:	b3 e0       	ldi	r27, 0x03	; 3
    49d6:	ee 0f       	add	r30, r30
    49d8:	ff 1f       	adc	r31, r31
    49da:	ba 95       	dec	r27
    49dc:	e1 f7       	brne	.-8      	; 0x49d6 <st_execute_move+0x6a>
    49de:	88 0f       	add	r24, r24
    49e0:	99 1f       	adc	r25, r25
    49e2:	e8 0f       	add	r30, r24
    49e4:	f9 1f       	adc	r31, r25
    49e6:	ec 0f       	add	r30, r28
    49e8:	fd 1f       	adc	r31, r29
    49ea:	80 81       	ld	r24, Z
    49ec:	91 81       	ldd	r25, Z+1	; 0x01
    49ee:	a2 81       	ldd	r26, Z+2	; 0x02
    49f0:	b3 81       	ldd	r27, Z+3	; 0x03
    49f2:	00 97       	sbiw	r24, 0x00	; 0
    49f4:	a1 05       	cpc	r26, r1
    49f6:	b1 05       	cpc	r27, r1
    49f8:	09 f4       	brne	.+2      	; 0x49fc <st_execute_move+0x90>
    49fa:	a6 c0       	rjmp	.+332    	; 0x4b48 <st_execute_move+0x1dc>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    49fc:	c8 01       	movw	r24, r16
    49fe:	9c 01       	movw	r18, r24
    4a00:	f3 e0       	ldi	r31, 0x03	; 3
    4a02:	22 0f       	add	r18, r18
    4a04:	33 1f       	adc	r19, r19
    4a06:	fa 95       	dec	r31
    4a08:	e1 f7       	brne	.-8      	; 0x4a02 <st_execute_move+0x96>
    4a0a:	88 0f       	add	r24, r24
    4a0c:	99 1f       	adc	r25, r25
    4a0e:	28 0f       	add	r18, r24
    4a10:	39 1f       	adc	r19, r25
    4a12:	c2 0f       	add	r28, r18
    4a14:	d3 1f       	adc	r29, r19
    4a16:	89 85       	ldd	r24, Y+9	; 0x09
    4a18:	fb 01       	movw	r30, r22
    4a1a:	83 87       	std	Z+11, r24	; 0x0b

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4a1c:	e0 91 04 23 	lds	r30, 0x2304
    4a20:	f0 91 05 23 	lds	r31, 0x2305
    4a24:	c8 01       	movw	r24, r16
    4a26:	9c 01       	movw	r18, r24
    4a28:	53 e0       	ldi	r21, 0x03	; 3
    4a2a:	22 0f       	add	r18, r18
    4a2c:	33 1f       	adc	r19, r19
    4a2e:	5a 95       	dec	r21
    4a30:	e1 f7       	brne	.-8      	; 0x4a2a <st_execute_move+0xbe>
    4a32:	88 0f       	add	r24, r24
    4a34:	99 1f       	adc	r25, r25
    4a36:	28 0f       	add	r18, r24
    4a38:	39 1f       	adc	r19, r25
    4a3a:	e2 0f       	add	r30, r18
    4a3c:	f3 1f       	adc	r31, r19
    4a3e:	90 85       	ldd	r25, Z+8	; 0x08
    4a40:	db 01       	movw	r26, r22
    4a42:	1a 96       	adiw	r26, 0x0a	; 10
    4a44:	8c 91       	ld	r24, X
    4a46:	1a 97       	sbiw	r26, 0x0a	; 10
    4a48:	1c 96       	adiw	r26, 0x0c	; 12
    4a4a:	ed 91       	ld	r30, X+
    4a4c:	fc 91       	ld	r31, X
    4a4e:	1d 97       	sbiw	r26, 0x0d	; 13
    4a50:	98 17       	cp	r25, r24
    4a52:	11 f0       	breq	.+4      	; 0x4a58 <st_execute_move+0xec>
    4a54:	d5 82       	std	Z+5, r13	; 0x05
    4a56:	01 c0       	rjmp	.+2      	; 0x4a5a <st_execute_move+0xee>
    4a58:	d6 82       	std	Z+6, r13	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    4a5a:	40 91 04 23 	lds	r20, 0x2304
    4a5e:	50 91 05 23 	lds	r21, 0x2305
    4a62:	8f 2d       	mov	r24, r15
    4a64:	9e 2d       	mov	r25, r14
    4a66:	fc 01       	movw	r30, r24
    4a68:	33 e0       	ldi	r19, 0x03	; 3
    4a6a:	ee 0f       	add	r30, r30
    4a6c:	ff 1f       	adc	r31, r31
    4a6e:	3a 95       	dec	r19
    4a70:	e1 f7       	brne	.-8      	; 0x4a6a <st_execute_move+0xfe>
    4a72:	88 0f       	add	r24, r24
    4a74:	99 1f       	adc	r25, r25
    4a76:	e8 0f       	add	r30, r24
    4a78:	f9 1f       	adc	r31, r25
    4a7a:	e4 0f       	add	r30, r20
    4a7c:	f5 1f       	adc	r31, r21
    4a7e:	80 81       	ld	r24, Z
    4a80:	91 81       	ldd	r25, Z+1	; 0x01
    4a82:	a2 81       	ldd	r26, Z+2	; 0x02
    4a84:	b3 81       	ldd	r27, Z+3	; 0x03
    4a86:	fb 01       	movw	r30, r22
    4a88:	80 83       	st	Z, r24
    4a8a:	91 83       	std	Z+1, r25	; 0x01
    4a8c:	a2 83       	std	Z+2, r26	; 0x02
    4a8e:	b3 83       	std	Z+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    4a90:	8f 2d       	mov	r24, r15
    4a92:	9e 2d       	mov	r25, r14
    4a94:	fc 01       	movw	r30, r24
    4a96:	b3 e0       	ldi	r27, 0x03	; 3
    4a98:	ee 0f       	add	r30, r30
    4a9a:	ff 1f       	adc	r31, r31
    4a9c:	ba 95       	dec	r27
    4a9e:	e1 f7       	brne	.-8      	; 0x4a98 <st_execute_move+0x12c>
    4aa0:	88 0f       	add	r24, r24
    4aa2:	99 1f       	adc	r25, r25
    4aa4:	e8 0f       	add	r30, r24
    4aa6:	f9 1f       	adc	r31, r25
    4aa8:	e4 0f       	add	r30, r20
    4aaa:	f5 1f       	adc	r31, r21
    4aac:	86 81       	ldd	r24, Z+6	; 0x06
    4aae:	97 81       	ldd	r25, Z+7	; 0x07
    4ab0:	db 01       	movw	r26, r22
    4ab2:	16 96       	adiw	r26, 0x06	; 6
    4ab4:	8d 93       	st	X+, r24
    4ab6:	9c 93       	st	X, r25
    4ab8:	17 97       	sbiw	r26, 0x07	; 7
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    4aba:	8f 2d       	mov	r24, r15
    4abc:	9e 2d       	mov	r25, r14
    4abe:	fc 01       	movw	r30, r24
    4ac0:	33 e0       	ldi	r19, 0x03	; 3
    4ac2:	ee 0f       	add	r30, r30
    4ac4:	ff 1f       	adc	r31, r31
    4ac6:	3a 95       	dec	r19
    4ac8:	e1 f7       	brne	.-8      	; 0x4ac2 <st_execute_move+0x156>
    4aca:	88 0f       	add	r24, r24
    4acc:	99 1f       	adc	r25, r25
    4ace:	e8 0f       	add	r30, r24
    4ad0:	f9 1f       	adc	r31, r25
    4ad2:	e4 0f       	add	r30, r20
    4ad4:	f5 1f       	adc	r31, r21
    4ad6:	86 81       	ldd	r24, Z+6	; 0x06
    4ad8:	97 81       	ldd	r25, Z+7	; 0x07
    4ada:	18 96       	adiw	r26, 0x08	; 8
    4adc:	8d 93       	st	X+, r24
    4ade:	9c 93       	st	X, r25
    4ae0:	19 97       	sbiw	r26, 0x09	; 9
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    4ae2:	8f 2d       	mov	r24, r15
    4ae4:	9e 2d       	mov	r25, r14
    4ae6:	fc 01       	movw	r30, r24
    4ae8:	33 e0       	ldi	r19, 0x03	; 3
    4aea:	ee 0f       	add	r30, r30
    4aec:	ff 1f       	adc	r31, r31
    4aee:	3a 95       	dec	r19
    4af0:	e1 f7       	brne	.-8      	; 0x4aea <st_execute_move+0x17e>
    4af2:	88 0f       	add	r24, r24
    4af4:	99 1f       	adc	r25, r25
    4af6:	e8 0f       	add	r30, r24
    4af8:	f9 1f       	adc	r31, r25
    4afa:	e4 0f       	add	r30, r20
    4afc:	f5 1f       	adc	r31, r21
    4afe:	84 81       	ldd	r24, Z+4	; 0x04
    4b00:	95 81       	ldd	r25, Z+5	; 0x05
    4b02:	14 96       	adiw	r26, 0x04	; 4
    4b04:	8d 93       	st	X+, r24
    4b06:	9c 93       	st	X, r25
    4b08:	15 97       	sbiw	r26, 0x05	; 5
		ax.a[i].timer->PER = ax.p->a[i].period;
    4b0a:	1e 96       	adiw	r26, 0x0e	; 14
    4b0c:	ed 91       	ld	r30, X+
    4b0e:	fc 91       	ld	r31, X
    4b10:	1f 97       	sbiw	r26, 0x0f	; 15
    4b12:	8f 2d       	mov	r24, r15
    4b14:	9e 2d       	mov	r25, r14
    4b16:	9c 01       	movw	r18, r24
    4b18:	b3 e0       	ldi	r27, 0x03	; 3
    4b1a:	22 0f       	add	r18, r18
    4b1c:	33 1f       	adc	r19, r19
    4b1e:	ba 95       	dec	r27
    4b20:	e1 f7       	brne	.-8      	; 0x4b1a <st_execute_move+0x1ae>
    4b22:	88 0f       	add	r24, r24
    4b24:	99 1f       	adc	r25, r25
    4b26:	28 0f       	add	r18, r24
    4b28:	39 1f       	adc	r19, r25
    4b2a:	42 0f       	add	r20, r18
    4b2c:	53 1f       	adc	r21, r19
    4b2e:	da 01       	movw	r26, r20
    4b30:	14 96       	adiw	r26, 0x04	; 4
    4b32:	8d 91       	ld	r24, X+
    4b34:	9c 91       	ld	r25, X
    4b36:	15 97       	sbiw	r26, 0x05	; 5
    4b38:	86 a3       	std	Z+38, r24	; 0x26
    4b3a:	97 a3       	std	Z+39, r25	; 0x27
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4b3c:	db 01       	movw	r26, r22
    4b3e:	1c 96       	adiw	r26, 0x0c	; 12
    4b40:	ed 91       	ld	r30, X+
    4b42:	fc 91       	ld	r31, X
    4b44:	1d 97       	sbiw	r26, 0x0d	; 13
    4b46:	c6 82       	std	Z+6, r12	; 0x06
    4b48:	0f 5f       	subi	r16, 0xFF	; 255
    4b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b4c:	60 5f       	subi	r22, 0xF0	; 240
    4b4e:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    4b50:	03 30       	cpi	r16, 0x03	; 3
    4b52:	11 05       	cpc	r17, r1
    4b54:	09 f0       	breq	.+2      	; 0x4b58 <st_execute_move+0x1ec>
    4b56:	30 cf       	rjmp	.-416    	; 0x49b8 <st_execute_move+0x4c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4b58:	10 92 03 23 	sts	0x2303, r1
	if (ax.a[X].step_counter) { 
    4b5c:	80 91 06 23 	lds	r24, 0x2306
    4b60:	90 91 07 23 	lds	r25, 0x2307
    4b64:	a0 91 08 23 	lds	r26, 0x2308
    4b68:	b0 91 09 23 	lds	r27, 0x2309
    4b6c:	00 97       	sbiw	r24, 0x00	; 0
    4b6e:	a1 05       	cpc	r26, r1
    4b70:	b1 05       	cpc	r27, r1
    4b72:	59 f0       	breq	.+22     	; 0x4b8a <st_execute_move+0x21e>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    4b74:	e0 91 14 23 	lds	r30, 0x2314
    4b78:	f0 91 15 23 	lds	r31, 0x2315
    4b7c:	81 e0       	ldi	r24, 0x01	; 1
    4b7e:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4b80:	80 91 03 23 	lds	r24, 0x2303
    4b84:	88 60       	ori	r24, 0x08	; 8
    4b86:	80 93 03 23 	sts	0x2303, r24
	}
	if (ax.a[Y].step_counter) {
    4b8a:	80 91 16 23 	lds	r24, 0x2316
    4b8e:	90 91 17 23 	lds	r25, 0x2317
    4b92:	a0 91 18 23 	lds	r26, 0x2318
    4b96:	b0 91 19 23 	lds	r27, 0x2319
    4b9a:	00 97       	sbiw	r24, 0x00	; 0
    4b9c:	a1 05       	cpc	r26, r1
    4b9e:	b1 05       	cpc	r27, r1
    4ba0:	59 f0       	breq	.+22     	; 0x4bb8 <st_execute_move+0x24c>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    4ba2:	e0 91 24 23 	lds	r30, 0x2324
    4ba6:	f0 91 25 23 	lds	r31, 0x2325
    4baa:	81 e0       	ldi	r24, 0x01	; 1
    4bac:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4bae:	80 91 03 23 	lds	r24, 0x2303
    4bb2:	84 60       	ori	r24, 0x04	; 4
    4bb4:	80 93 03 23 	sts	0x2303, r24
	}
	if (ax.a[Z].step_counter) {
    4bb8:	80 91 26 23 	lds	r24, 0x2326
    4bbc:	90 91 27 23 	lds	r25, 0x2327
    4bc0:	a0 91 28 23 	lds	r26, 0x2328
    4bc4:	b0 91 29 23 	lds	r27, 0x2329
    4bc8:	00 97       	sbiw	r24, 0x00	; 0
    4bca:	a1 05       	cpc	r26, r1
    4bcc:	b1 05       	cpc	r27, r1
    4bce:	59 f0       	breq	.+22     	; 0x4be6 <st_execute_move+0x27a>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4bd0:	e0 91 34 23 	lds	r30, 0x2334
    4bd4:	f0 91 35 23 	lds	r31, 0x2335
    4bd8:	81 e0       	ldi	r24, 0x01	; 1
    4bda:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4bdc:	80 91 03 23 	lds	r24, 0x2303
    4be0:	82 60       	ori	r24, 0x02	; 2
    4be2:	80 93 03 23 	sts	0x2303, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4be6:	10 92 02 23 	sts	0x2302, r1
}
    4bea:	df 91       	pop	r29
    4bec:	cf 91       	pop	r28
    4bee:	1f 91       	pop	r17
    4bf0:	0f 91       	pop	r16
    4bf2:	ff 90       	pop	r15
    4bf4:	ef 90       	pop	r14
    4bf6:	df 90       	pop	r13
    4bf8:	cf 90       	pop	r12
    4bfa:	08 95       	ret

00004bfc <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4bfc:	10 92 02 23 	sts	0x2302, r1
	st_execute_move();		// recursively empty the move queue
    4c00:	0e 94 b6 24 	call	0x496c	; 0x496c <st_execute_move>
	return;
}
    4c04:	08 95       	ret

00004c06 <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    4c06:	1f 92       	push	r1
    4c08:	0f 92       	push	r0
    4c0a:	0f b6       	in	r0, 0x3f	; 63
    4c0c:	0f 92       	push	r0
    4c0e:	0b b6       	in	r0, 0x3b	; 59
    4c10:	0f 92       	push	r0
    4c12:	11 24       	eor	r1, r1
    4c14:	2f 93       	push	r18
    4c16:	3f 93       	push	r19
    4c18:	4f 93       	push	r20
    4c1a:	5f 93       	push	r21
    4c1c:	6f 93       	push	r22
    4c1e:	7f 93       	push	r23
    4c20:	8f 93       	push	r24
    4c22:	9f 93       	push	r25
    4c24:	af 93       	push	r26
    4c26:	bf 93       	push	r27
    4c28:	ef 93       	push	r30
    4c2a:	ff 93       	push	r31
	if (--ax.a[A].postscale_counter != 0) {
    4c2c:	80 91 3e 23 	lds	r24, 0x233E
    4c30:	90 91 3f 23 	lds	r25, 0x233F
    4c34:	01 97       	sbiw	r24, 0x01	; 1
    4c36:	80 93 3e 23 	sts	0x233E, r24
    4c3a:	90 93 3f 23 	sts	0x233F, r25
    4c3e:	89 2b       	or	r24, r25
    4c40:	a1 f5       	brne	.+104    	; 0x4caa <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4c42:	e0 e6       	ldi	r30, 0x60	; 96
    4c44:	f6 e0       	ldi	r31, 0x06	; 6
    4c46:	81 e0       	ldi	r24, 0x01	; 1
    4c48:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    4c4a:	80 91 36 23 	lds	r24, 0x2336
    4c4e:	90 91 37 23 	lds	r25, 0x2337
    4c52:	a0 91 38 23 	lds	r26, 0x2338
    4c56:	b0 91 39 23 	lds	r27, 0x2339
    4c5a:	01 97       	sbiw	r24, 0x01	; 1
    4c5c:	a1 09       	sbc	r26, r1
    4c5e:	b1 09       	sbc	r27, r1
    4c60:	80 93 36 23 	sts	0x2336, r24
    4c64:	90 93 37 23 	sts	0x2337, r25
    4c68:	a0 93 38 23 	sts	0x2338, r26
    4c6c:	b0 93 39 23 	sts	0x2339, r27
    4c70:	00 97       	sbiw	r24, 0x00	; 0
    4c72:	a1 05       	cpc	r26, r1
    4c74:	b1 05       	cpc	r27, r1
    4c76:	69 f4       	brne	.+26     	; 0x4c92 <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4c78:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4c7c:	84 e0       	ldi	r24, 0x04	; 4
    4c7e:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4c80:	80 91 03 23 	lds	r24, 0x2303
    4c84:	8e 7f       	andi	r24, 0xFE	; 254
    4c86:	80 93 03 23 	sts	0x2303, r24
		if (ax.active_axes == 0) {
    4c8a:	88 23       	and	r24, r24
    4c8c:	11 f4       	brne	.+4      	; 0x4c92 <__vector_108+0x8c>
			st_execute_move();
    4c8e:	0e 94 b6 24 	call	0x496c	; 0x496c <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    4c92:	80 91 3c 23 	lds	r24, 0x233C
    4c96:	90 91 3d 23 	lds	r25, 0x233D
    4c9a:	80 93 3e 23 	sts	0x233E, r24
    4c9e:	90 93 3f 23 	sts	0x233F, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4ca2:	81 e0       	ldi	r24, 0x01	; 1
    4ca4:	e0 e6       	ldi	r30, 0x60	; 96
    4ca6:	f6 e0       	ldi	r31, 0x06	; 6
    4ca8:	86 83       	std	Z+6, r24	; 0x06
}
    4caa:	ff 91       	pop	r31
    4cac:	ef 91       	pop	r30
    4cae:	bf 91       	pop	r27
    4cb0:	af 91       	pop	r26
    4cb2:	9f 91       	pop	r25
    4cb4:	8f 91       	pop	r24
    4cb6:	7f 91       	pop	r23
    4cb8:	6f 91       	pop	r22
    4cba:	5f 91       	pop	r21
    4cbc:	4f 91       	pop	r20
    4cbe:	3f 91       	pop	r19
    4cc0:	2f 91       	pop	r18
    4cc2:	0f 90       	pop	r0
    4cc4:	0b be       	out	0x3b, r0	; 59
    4cc6:	0f 90       	pop	r0
    4cc8:	0f be       	out	0x3f, r0	; 63
    4cca:	0f 90       	pop	r0
    4ccc:	1f 90       	pop	r1
    4cce:	18 95       	reti

00004cd0 <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4cd0:	1f 92       	push	r1
    4cd2:	0f 92       	push	r0
    4cd4:	0f b6       	in	r0, 0x3f	; 63
    4cd6:	0f 92       	push	r0
    4cd8:	0b b6       	in	r0, 0x3b	; 59
    4cda:	0f 92       	push	r0
    4cdc:	11 24       	eor	r1, r1
    4cde:	2f 93       	push	r18
    4ce0:	3f 93       	push	r19
    4ce2:	4f 93       	push	r20
    4ce4:	5f 93       	push	r21
    4ce6:	6f 93       	push	r22
    4ce8:	7f 93       	push	r23
    4cea:	8f 93       	push	r24
    4cec:	9f 93       	push	r25
    4cee:	af 93       	push	r26
    4cf0:	bf 93       	push	r27
    4cf2:	ef 93       	push	r30
    4cf4:	ff 93       	push	r31
	if (--ax.a[Z].postscale_counter != 0) {
    4cf6:	80 91 2e 23 	lds	r24, 0x232E
    4cfa:	90 91 2f 23 	lds	r25, 0x232F
    4cfe:	01 97       	sbiw	r24, 0x01	; 1
    4d00:	80 93 2e 23 	sts	0x232E, r24
    4d04:	90 93 2f 23 	sts	0x232F, r25
    4d08:	89 2b       	or	r24, r25
    4d0a:	a1 f5       	brne	.+104    	; 0x4d74 <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4d0c:	e0 e8       	ldi	r30, 0x80	; 128
    4d0e:	f6 e0       	ldi	r31, 0x06	; 6
    4d10:	81 e0       	ldi	r24, 0x01	; 1
    4d12:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    4d14:	80 91 26 23 	lds	r24, 0x2326
    4d18:	90 91 27 23 	lds	r25, 0x2327
    4d1c:	a0 91 28 23 	lds	r26, 0x2328
    4d20:	b0 91 29 23 	lds	r27, 0x2329
    4d24:	01 97       	sbiw	r24, 0x01	; 1
    4d26:	a1 09       	sbc	r26, r1
    4d28:	b1 09       	sbc	r27, r1
    4d2a:	80 93 26 23 	sts	0x2326, r24
    4d2e:	90 93 27 23 	sts	0x2327, r25
    4d32:	a0 93 28 23 	sts	0x2328, r26
    4d36:	b0 93 29 23 	sts	0x2329, r27
    4d3a:	00 97       	sbiw	r24, 0x00	; 0
    4d3c:	a1 05       	cpc	r26, r1
    4d3e:	b1 05       	cpc	r27, r1
    4d40:	69 f4       	brne	.+26     	; 0x4d5c <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4d42:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4d46:	84 e0       	ldi	r24, 0x04	; 4
    4d48:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4d4a:	80 91 03 23 	lds	r24, 0x2303
    4d4e:	8d 7f       	andi	r24, 0xFD	; 253
    4d50:	80 93 03 23 	sts	0x2303, r24
		if (ax.active_axes == 0) {
    4d54:	88 23       	and	r24, r24
    4d56:	11 f4       	brne	.+4      	; 0x4d5c <__vector_47+0x8c>
			st_execute_move();
    4d58:	0e 94 b6 24 	call	0x496c	; 0x496c <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    4d5c:	80 91 2c 23 	lds	r24, 0x232C
    4d60:	90 91 2d 23 	lds	r25, 0x232D
    4d64:	80 93 2e 23 	sts	0x232E, r24
    4d68:	90 93 2f 23 	sts	0x232F, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4d6c:	81 e0       	ldi	r24, 0x01	; 1
    4d6e:	e0 e8       	ldi	r30, 0x80	; 128
    4d70:	f6 e0       	ldi	r31, 0x06	; 6
    4d72:	86 83       	std	Z+6, r24	; 0x06
}
    4d74:	ff 91       	pop	r31
    4d76:	ef 91       	pop	r30
    4d78:	bf 91       	pop	r27
    4d7a:	af 91       	pop	r26
    4d7c:	9f 91       	pop	r25
    4d7e:	8f 91       	pop	r24
    4d80:	7f 91       	pop	r23
    4d82:	6f 91       	pop	r22
    4d84:	5f 91       	pop	r21
    4d86:	4f 91       	pop	r20
    4d88:	3f 91       	pop	r19
    4d8a:	2f 91       	pop	r18
    4d8c:	0f 90       	pop	r0
    4d8e:	0b be       	out	0x3b, r0	; 59
    4d90:	0f 90       	pop	r0
    4d92:	0f be       	out	0x3f, r0	; 63
    4d94:	0f 90       	pop	r0
    4d96:	1f 90       	pop	r1
    4d98:	18 95       	reti

00004d9a <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4d9a:	1f 92       	push	r1
    4d9c:	0f 92       	push	r0
    4d9e:	0f b6       	in	r0, 0x3f	; 63
    4da0:	0f 92       	push	r0
    4da2:	0b b6       	in	r0, 0x3b	; 59
    4da4:	0f 92       	push	r0
    4da6:	11 24       	eor	r1, r1
    4da8:	2f 93       	push	r18
    4daa:	3f 93       	push	r19
    4dac:	4f 93       	push	r20
    4dae:	5f 93       	push	r21
    4db0:	6f 93       	push	r22
    4db2:	7f 93       	push	r23
    4db4:	8f 93       	push	r24
    4db6:	9f 93       	push	r25
    4db8:	af 93       	push	r26
    4dba:	bf 93       	push	r27
    4dbc:	ef 93       	push	r30
    4dbe:	ff 93       	push	r31
	if (--ax.a[Y].postscale_counter != 0) {
    4dc0:	80 91 1e 23 	lds	r24, 0x231E
    4dc4:	90 91 1f 23 	lds	r25, 0x231F
    4dc8:	01 97       	sbiw	r24, 0x01	; 1
    4dca:	80 93 1e 23 	sts	0x231E, r24
    4dce:	90 93 1f 23 	sts	0x231F, r25
    4dd2:	89 2b       	or	r24, r25
    4dd4:	a1 f5       	brne	.+104    	; 0x4e3e <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4dd6:	e0 ea       	ldi	r30, 0xA0	; 160
    4dd8:	f6 e0       	ldi	r31, 0x06	; 6
    4dda:	81 e0       	ldi	r24, 0x01	; 1
    4ddc:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    4dde:	80 91 16 23 	lds	r24, 0x2316
    4de2:	90 91 17 23 	lds	r25, 0x2317
    4de6:	a0 91 18 23 	lds	r26, 0x2318
    4dea:	b0 91 19 23 	lds	r27, 0x2319
    4dee:	01 97       	sbiw	r24, 0x01	; 1
    4df0:	a1 09       	sbc	r26, r1
    4df2:	b1 09       	sbc	r27, r1
    4df4:	80 93 16 23 	sts	0x2316, r24
    4df8:	90 93 17 23 	sts	0x2317, r25
    4dfc:	a0 93 18 23 	sts	0x2318, r26
    4e00:	b0 93 19 23 	sts	0x2319, r27
    4e04:	00 97       	sbiw	r24, 0x00	; 0
    4e06:	a1 05       	cpc	r26, r1
    4e08:	b1 05       	cpc	r27, r1
    4e0a:	69 f4       	brne	.+26     	; 0x4e26 <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4e0c:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4e10:	84 e0       	ldi	r24, 0x04	; 4
    4e12:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4e14:	80 91 03 23 	lds	r24, 0x2303
    4e18:	8b 7f       	andi	r24, 0xFB	; 251
    4e1a:	80 93 03 23 	sts	0x2303, r24
		if (ax.active_axes == 0) {
    4e1e:	88 23       	and	r24, r24
    4e20:	11 f4       	brne	.+4      	; 0x4e26 <__vector_77+0x8c>
			st_execute_move();
    4e22:	0e 94 b6 24 	call	0x496c	; 0x496c <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    4e26:	80 91 1c 23 	lds	r24, 0x231C
    4e2a:	90 91 1d 23 	lds	r25, 0x231D
    4e2e:	80 93 1e 23 	sts	0x231E, r24
    4e32:	90 93 1f 23 	sts	0x231F, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4e36:	81 e0       	ldi	r24, 0x01	; 1
    4e38:	e0 ea       	ldi	r30, 0xA0	; 160
    4e3a:	f6 e0       	ldi	r31, 0x06	; 6
    4e3c:	86 83       	std	Z+6, r24	; 0x06
}
    4e3e:	ff 91       	pop	r31
    4e40:	ef 91       	pop	r30
    4e42:	bf 91       	pop	r27
    4e44:	af 91       	pop	r26
    4e46:	9f 91       	pop	r25
    4e48:	8f 91       	pop	r24
    4e4a:	7f 91       	pop	r23
    4e4c:	6f 91       	pop	r22
    4e4e:	5f 91       	pop	r21
    4e50:	4f 91       	pop	r20
    4e52:	3f 91       	pop	r19
    4e54:	2f 91       	pop	r18
    4e56:	0f 90       	pop	r0
    4e58:	0b be       	out	0x3b, r0	; 59
    4e5a:	0f 90       	pop	r0
    4e5c:	0f be       	out	0x3f, r0	; 63
    4e5e:	0f 90       	pop	r0
    4e60:	1f 90       	pop	r1
    4e62:	18 95       	reti

00004e64 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4e64:	1f 92       	push	r1
    4e66:	0f 92       	push	r0
    4e68:	0f b6       	in	r0, 0x3f	; 63
    4e6a:	0f 92       	push	r0
    4e6c:	0b b6       	in	r0, 0x3b	; 59
    4e6e:	0f 92       	push	r0
    4e70:	11 24       	eor	r1, r1
    4e72:	2f 93       	push	r18
    4e74:	3f 93       	push	r19
    4e76:	4f 93       	push	r20
    4e78:	5f 93       	push	r21
    4e7a:	6f 93       	push	r22
    4e7c:	7f 93       	push	r23
    4e7e:	8f 93       	push	r24
    4e80:	9f 93       	push	r25
    4e82:	af 93       	push	r26
    4e84:	bf 93       	push	r27
    4e86:	ef 93       	push	r30
    4e88:	ff 93       	push	r31
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    4e8a:	80 91 0e 23 	lds	r24, 0x230E
    4e8e:	90 91 0f 23 	lds	r25, 0x230F
    4e92:	01 97       	sbiw	r24, 0x01	; 1
    4e94:	80 93 0e 23 	sts	0x230E, r24
    4e98:	90 93 0f 23 	sts	0x230F, r25
    4e9c:	89 2b       	or	r24, r25
    4e9e:	d1 f5       	brne	.+116    	; 0x4f14 <__vector_14+0xb0>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    4ea0:	80 91 11 23 	lds	r24, 0x2311
    4ea4:	88 23       	and	r24, r24
    4ea6:	21 f4       	brne	.+8      	; 0x4eb0 <__vector_14+0x4c>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    4ea8:	81 e0       	ldi	r24, 0x01	; 1
    4eaa:	e0 e0       	ldi	r30, 0x00	; 0
    4eac:	f6 e0       	ldi	r31, 0x06	; 6
    4eae:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    4eb0:	80 91 06 23 	lds	r24, 0x2306
    4eb4:	90 91 07 23 	lds	r25, 0x2307
    4eb8:	a0 91 08 23 	lds	r26, 0x2308
    4ebc:	b0 91 09 23 	lds	r27, 0x2309
    4ec0:	01 97       	sbiw	r24, 0x01	; 1
    4ec2:	a1 09       	sbc	r26, r1
    4ec4:	b1 09       	sbc	r27, r1
    4ec6:	80 93 06 23 	sts	0x2306, r24
    4eca:	90 93 07 23 	sts	0x2307, r25
    4ece:	a0 93 08 23 	sts	0x2308, r26
    4ed2:	b0 93 09 23 	sts	0x2309, r27
    4ed6:	00 97       	sbiw	r24, 0x00	; 0
    4ed8:	a1 05       	cpc	r26, r1
    4eda:	b1 05       	cpc	r27, r1
    4edc:	79 f4       	brne	.+30     	; 0x4efc <__vector_14+0x98>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    4ede:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4ee2:	84 e0       	ldi	r24, 0x04	; 4
    4ee4:	e0 e0       	ldi	r30, 0x00	; 0
    4ee6:	f6 e0       	ldi	r31, 0x06	; 6
    4ee8:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    4eea:	80 91 03 23 	lds	r24, 0x2303
    4eee:	87 7f       	andi	r24, 0xF7	; 247
    4ef0:	80 93 03 23 	sts	0x2303, r24
		if (ax.active_axes == 0) {				// if all axes are done
    4ef4:	88 23       	and	r24, r24
    4ef6:	11 f4       	brne	.+4      	; 0x4efc <__vector_14+0x98>
			st_execute_move();					// ...run the next move
    4ef8:	0e 94 b6 24 	call	0x496c	; 0x496c <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    4efc:	80 91 0c 23 	lds	r24, 0x230C
    4f00:	90 91 0d 23 	lds	r25, 0x230D
    4f04:	80 93 0e 23 	sts	0x230E, r24
    4f08:	90 93 0f 23 	sts	0x230F, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    4f0c:	81 e0       	ldi	r24, 0x01	; 1
    4f0e:	e0 e0       	ldi	r30, 0x00	; 0
    4f10:	f6 e0       	ldi	r31, 0x06	; 6
    4f12:	86 83       	std	Z+6, r24	; 0x06
}
    4f14:	ff 91       	pop	r31
    4f16:	ef 91       	pop	r30
    4f18:	bf 91       	pop	r27
    4f1a:	af 91       	pop	r26
    4f1c:	9f 91       	pop	r25
    4f1e:	8f 91       	pop	r24
    4f20:	7f 91       	pop	r23
    4f22:	6f 91       	pop	r22
    4f24:	5f 91       	pop	r21
    4f26:	4f 91       	pop	r20
    4f28:	3f 91       	pop	r19
    4f2a:	2f 91       	pop	r18
    4f2c:	0f 90       	pop	r0
    4f2e:	0b be       	out	0x3b, r0	; 59
    4f30:	0f 90       	pop	r0
    4f32:	0f be       	out	0x3f, r0	; 63
    4f34:	0f 90       	pop	r0
    4f36:	1f 90       	pop	r1
    4f38:	18 95       	reti

00004f3a <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    4f3a:	e0 ea       	ldi	r30, 0xA0	; 160
    4f3c:	f0 e0       	ldi	r31, 0x00	; 0
    4f3e:	82 81       	ldd	r24, Z+2	; 0x02
    4f40:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    4f42:	98 ed       	ldi	r25, 0xD8	; 216
    4f44:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4f46:	82 83       	std	Z+2, r24	; 0x02
}
    4f48:	08 95       	ret

00004f4a <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    4f4a:	e0 ea       	ldi	r30, 0xA0	; 160
    4f4c:	f0 e0       	ldi	r31, 0x00	; 0
    4f4e:	82 81       	ldd	r24, Z+2	; 0x02
    4f50:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    4f52:	98 ed       	ldi	r25, 0xD8	; 216
    4f54:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4f56:	82 83       	std	Z+2, r24	; 0x02
}
    4f58:	08 95       	ret

00004f5a <xio_setflags>:
 * xio_setflags()
 */

int xio_setflags(const uint8_t dev, const uint16_t control)
{
	struct xioDEVICE *d = &ds[dev];
    4f5a:	97 e1       	ldi	r25, 0x17	; 23
    4f5c:	89 9f       	mul	r24, r25
    4f5e:	f0 01       	movw	r30, r0
    4f60:	11 24       	eor	r1, r1
    4f62:	ec 56       	subi	r30, 0x6C	; 108
    4f64:	fb 4d       	sbci	r31, 0xDB	; 219

	if (control & XIO_RD) {
    4f66:	64 ff       	sbrs	r22, 4
    4f68:	05 c0       	rjmp	.+10     	; 0x4f74 <xio_setflags+0x1a>
		d->flags |= XIO_FLAG_RD_bm;
    4f6a:	80 81       	ld	r24, Z
    4f6c:	91 81       	ldd	r25, Z+1	; 0x01
    4f6e:	81 60       	ori	r24, 0x01	; 1
    4f70:	80 83       	st	Z, r24
    4f72:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_WR) {
    4f74:	65 ff       	sbrs	r22, 5
    4f76:	05 c0       	rjmp	.+10     	; 0x4f82 <xio_setflags+0x28>
		d->flags |= XIO_FLAG_WR_bm;
    4f78:	80 81       	ld	r24, Z
    4f7a:	91 81       	ldd	r25, Z+1	; 0x01
    4f7c:	82 60       	ori	r24, 0x02	; 2
    4f7e:	80 83       	st	Z, r24
    4f80:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_BLOCK) {
    4f82:	66 ff       	sbrs	r22, 6
    4f84:	05 c0       	rjmp	.+10     	; 0x4f90 <xio_setflags+0x36>
		d->flags |= XIO_FLAG_BLOCK_bm;
    4f86:	80 81       	ld	r24, Z
    4f88:	91 81       	ldd	r25, Z+1	; 0x01
    4f8a:	84 60       	ori	r24, 0x04	; 4
    4f8c:	80 83       	st	Z, r24
    4f8e:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOBLOCK) {
    4f90:	67 ff       	sbrs	r22, 7
    4f92:	05 c0       	rjmp	.+10     	; 0x4f9e <xio_setflags+0x44>
		d->flags &= ~XIO_FLAG_BLOCK_bm;
    4f94:	80 81       	ld	r24, Z
    4f96:	91 81       	ldd	r25, Z+1	; 0x01
    4f98:	8b 7f       	andi	r24, 0xFB	; 251
    4f9a:	80 83       	st	Z, r24
    4f9c:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_ECHO) {
    4f9e:	70 ff       	sbrs	r23, 0
    4fa0:	05 c0       	rjmp	.+10     	; 0x4fac <xio_setflags+0x52>
		d->flags |= XIO_FLAG_ECHO_bm;
    4fa2:	80 81       	ld	r24, Z
    4fa4:	91 81       	ldd	r25, Z+1	; 0x01
    4fa6:	80 61       	ori	r24, 0x10	; 16
    4fa8:	80 83       	st	Z, r24
    4faa:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOECHO) {
    4fac:	71 ff       	sbrs	r23, 1
    4fae:	05 c0       	rjmp	.+10     	; 0x4fba <xio_setflags+0x60>
		d->flags &= ~XIO_FLAG_ECHO_bm;
    4fb0:	80 81       	ld	r24, Z
    4fb2:	91 81       	ldd	r25, Z+1	; 0x01
    4fb4:	8f 7e       	andi	r24, 0xEF	; 239
    4fb6:	80 83       	st	Z, r24
    4fb8:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_CRLF) {
    4fba:	72 ff       	sbrs	r23, 2
    4fbc:	05 c0       	rjmp	.+10     	; 0x4fc8 <xio_setflags+0x6e>
		d->flags |= XIO_FLAG_CRLF_bm;
    4fbe:	80 81       	ld	r24, Z
    4fc0:	91 81       	ldd	r25, Z+1	; 0x01
    4fc2:	80 62       	ori	r24, 0x20	; 32
    4fc4:	80 83       	st	Z, r24
    4fc6:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOCRLF) {
    4fc8:	73 ff       	sbrs	r23, 3
    4fca:	05 c0       	rjmp	.+10     	; 0x4fd6 <xio_setflags+0x7c>
		d->flags &= ~XIO_FLAG_CRLF_bm;
    4fcc:	80 81       	ld	r24, Z
    4fce:	91 81       	ldd	r25, Z+1	; 0x01
    4fd0:	8f 7d       	andi	r24, 0xDF	; 223
    4fd2:	80 83       	st	Z, r24
    4fd4:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_LINEMODE) {
    4fd6:	74 ff       	sbrs	r23, 4
    4fd8:	05 c0       	rjmp	.+10     	; 0x4fe4 <xio_setflags+0x8a>
		d->flags |= XIO_FLAG_LINEMODE_bm;
    4fda:	80 81       	ld	r24, Z
    4fdc:	91 81       	ldd	r25, Z+1	; 0x01
    4fde:	80 64       	ori	r24, 0x40	; 64
    4fe0:	80 83       	st	Z, r24
    4fe2:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOLINEMODE) {
    4fe4:	75 ff       	sbrs	r23, 5
    4fe6:	05 c0       	rjmp	.+10     	; 0x4ff2 <xio_setflags+0x98>
		d->flags &= ~XIO_FLAG_LINEMODE_bm;
    4fe8:	80 81       	ld	r24, Z
    4fea:	91 81       	ldd	r25, Z+1	; 0x01
    4fec:	8f 7b       	andi	r24, 0xBF	; 191
    4fee:	80 83       	st	Z, r24
    4ff0:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_SEMICOLONS) {
    4ff2:	76 ff       	sbrs	r23, 6
    4ff4:	05 c0       	rjmp	.+10     	; 0x5000 <xio_setflags+0xa6>
		d->flags |= XIO_FLAG_SEMICOLONS_bm;
    4ff6:	80 81       	ld	r24, Z
    4ff8:	91 81       	ldd	r25, Z+1	; 0x01
    4ffa:	80 68       	ori	r24, 0x80	; 128
    4ffc:	80 83       	st	Z, r24
    4ffe:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOSEMICOLONS) {
    5000:	77 ff       	sbrs	r23, 7
    5002:	05 c0       	rjmp	.+10     	; 0x500e <xio_setflags+0xb4>
		d->flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5004:	80 81       	ld	r24, Z
    5006:	91 81       	ldd	r25, Z+1	; 0x01
    5008:	8f 77       	andi	r24, 0x7F	; 127
    500a:	80 83       	st	Z, r24
    500c:	91 83       	std	Z+1, r25	; 0x01
	}
	return (XIO_OK);
}
    500e:	80 e0       	ldi	r24, 0x00	; 0
    5010:	90 e0       	ldi	r25, 0x00	; 0
    5012:	08 95       	ret

00005014 <xio_set_stdin>:
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    5014:	90 e0       	ldi	r25, 0x00	; 0
    5016:	27 e1       	ldi	r18, 0x17	; 23
    5018:	30 e0       	ldi	r19, 0x00	; 0
    501a:	82 9f       	mul	r24, r18
    501c:	f0 01       	movw	r30, r0
    501e:	83 9f       	mul	r24, r19
    5020:	f0 0d       	add	r31, r0
    5022:	92 9f       	mul	r25, r18
    5024:	f0 0d       	add	r31, r0
    5026:	11 24       	eor	r1, r1
    5028:	ec 56       	subi	r30, 0x6C	; 108
    502a:	fb 4d       	sbci	r31, 0xDB	; 219
    502c:	83 89       	ldd	r24, Z+19	; 0x13
    502e:	94 89       	ldd	r25, Z+20	; 0x14
    5030:	80 93 d3 25 	sts	0x25D3, r24
    5034:	90 93 d4 25 	sts	0x25D4, r25
}
    5038:	08 95       	ret

0000503a <xio_set_stdout>:

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	27 e1       	ldi	r18, 0x17	; 23
    503e:	30 e0       	ldi	r19, 0x00	; 0
    5040:	82 9f       	mul	r24, r18
    5042:	f0 01       	movw	r30, r0
    5044:	83 9f       	mul	r24, r19
    5046:	f0 0d       	add	r31, r0
    5048:	92 9f       	mul	r25, r18
    504a:	f0 0d       	add	r31, r0
    504c:	11 24       	eor	r1, r1
    504e:	ec 56       	subi	r30, 0x6C	; 108
    5050:	fb 4d       	sbci	r31, 0xDB	; 219
    5052:	83 89       	ldd	r24, Z+19	; 0x13
    5054:	94 89       	ldd	r25, Z+20	; 0x14
    5056:	80 93 d5 25 	sts	0x25D5, r24
    505a:	90 93 d6 25 	sts	0x25D6, r25
}
    505e:	08 95       	ret

00005060 <xio_set_stderr>:

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    5060:	90 e0       	ldi	r25, 0x00	; 0
    5062:	27 e1       	ldi	r18, 0x17	; 23
    5064:	30 e0       	ldi	r19, 0x00	; 0
    5066:	82 9f       	mul	r24, r18
    5068:	f0 01       	movw	r30, r0
    506a:	83 9f       	mul	r24, r19
    506c:	f0 0d       	add	r31, r0
    506e:	92 9f       	mul	r25, r18
    5070:	f0 0d       	add	r31, r0
    5072:	11 24       	eor	r1, r1
    5074:	ec 56       	subi	r30, 0x6C	; 108
    5076:	fb 4d       	sbci	r31, 0xDB	; 219
    5078:	83 89       	ldd	r24, Z+19	; 0x13
    507a:	94 89       	ldd	r25, Z+20	; 0x14
    507c:	80 93 d7 25 	sts	0x25D7, r24
    5080:	90 93 d8 25 	sts	0x25D8, r25
}
    5084:	08 95       	ret

00005086 <xio_putc>:
/*
 * xio_putc() - common entry point for putc
 */

int xio_putc(const uint8_t dev, const char c)
{
    5086:	46 2f       	mov	r20, r22
	if (dev < XIO_DEV_COUNT) {
    5088:	88 30       	cpi	r24, 0x08	; 8
    508a:	18 f0       	brcs	.+6      	; 0x5092 <xio_putc+0xc>
    508c:	27 e0       	ldi	r18, 0x07	; 7
    508e:	30 e0       	ldi	r19, 0x00	; 0
    5090:	15 c0       	rjmp	.+42     	; 0x50bc <xio_putc+0x36>
		return ds[dev].x_putc(c, ds[dev].fdev);
    5092:	28 2f       	mov	r18, r24
    5094:	30 e0       	ldi	r19, 0x00	; 0
    5096:	87 e1       	ldi	r24, 0x17	; 23
    5098:	90 e0       	ldi	r25, 0x00	; 0
    509a:	28 9f       	mul	r18, r24
    509c:	f0 01       	movw	r30, r0
    509e:	29 9f       	mul	r18, r25
    50a0:	f0 0d       	add	r31, r0
    50a2:	38 9f       	mul	r19, r24
    50a4:	f0 0d       	add	r31, r0
    50a6:	11 24       	eor	r1, r1
    50a8:	ec 56       	subi	r30, 0x6C	; 108
    50aa:	fb 4d       	sbci	r31, 0xDB	; 219
    50ac:	63 89       	ldd	r22, Z+19	; 0x13
    50ae:	74 89       	ldd	r23, Z+20	; 0x14
    50b0:	03 84       	ldd	r0, Z+11	; 0x0b
    50b2:	f4 85       	ldd	r31, Z+12	; 0x0c
    50b4:	e0 2d       	mov	r30, r0
    50b6:	84 2f       	mov	r24, r20
    50b8:	19 95       	eicall
    50ba:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}
}
    50bc:	c9 01       	movw	r24, r18
    50be:	08 95       	ret

000050c0 <xio_getc>:
 * xio_getc() - common entry point for getc
 */

int xio_getc(const uint8_t dev)
{
	if (dev < XIO_DEV_COUNT) {
    50c0:	88 30       	cpi	r24, 0x08	; 8
    50c2:	18 f0       	brcs	.+6      	; 0x50ca <xio_getc+0xa>
    50c4:	27 e0       	ldi	r18, 0x07	; 7
    50c6:	30 e0       	ldi	r19, 0x00	; 0
    50c8:	14 c0       	rjmp	.+40     	; 0x50f2 <xio_getc+0x32>
		return ds[dev].x_getc(ds[dev].fdev);
    50ca:	28 2f       	mov	r18, r24
    50cc:	30 e0       	ldi	r19, 0x00	; 0
    50ce:	87 e1       	ldi	r24, 0x17	; 23
    50d0:	90 e0       	ldi	r25, 0x00	; 0
    50d2:	28 9f       	mul	r18, r24
    50d4:	f0 01       	movw	r30, r0
    50d6:	29 9f       	mul	r18, r25
    50d8:	f0 0d       	add	r31, r0
    50da:	38 9f       	mul	r19, r24
    50dc:	f0 0d       	add	r31, r0
    50de:	11 24       	eor	r1, r1
    50e0:	ec 56       	subi	r30, 0x6C	; 108
    50e2:	fb 4d       	sbci	r31, 0xDB	; 219
    50e4:	25 85       	ldd	r18, Z+13	; 0x0d
    50e6:	36 85       	ldd	r19, Z+14	; 0x0e
    50e8:	83 89       	ldd	r24, Z+19	; 0x13
    50ea:	94 89       	ldd	r25, Z+20	; 0x14
    50ec:	f9 01       	movw	r30, r18
    50ee:	19 95       	eicall
    50f0:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}		
}
    50f2:	c9 01       	movw	r24, r18
    50f4:	08 95       	ret

000050f6 <xio_readln>:
 *	size	size of text buffer in 1 offset form: e.g. use 80 instead of 79
 */

int xio_readln(const uint8_t dev, char *buf, const uint8_t size)
{
	if (dev < XIO_DEV_COUNT) {
    50f6:	88 30       	cpi	r24, 0x08	; 8
    50f8:	18 f0       	brcs	.+6      	; 0x5100 <xio_readln+0xa>
    50fa:	27 e0       	ldi	r18, 0x07	; 7
    50fc:	30 e0       	ldi	r19, 0x00	; 0
    50fe:	14 c0       	rjmp	.+40     	; 0x5128 <xio_readln+0x32>
		return ds[dev].x_readln(buf, size);
    5100:	28 2f       	mov	r18, r24
    5102:	30 e0       	ldi	r19, 0x00	; 0
    5104:	87 e1       	ldi	r24, 0x17	; 23
    5106:	90 e0       	ldi	r25, 0x00	; 0
    5108:	28 9f       	mul	r18, r24
    510a:	f0 01       	movw	r30, r0
    510c:	29 9f       	mul	r18, r25
    510e:	f0 0d       	add	r31, r0
    5110:	38 9f       	mul	r19, r24
    5112:	f0 0d       	add	r31, r0
    5114:	11 24       	eor	r1, r1
    5116:	ec 56       	subi	r30, 0x6C	; 108
    5118:	fb 4d       	sbci	r31, 0xDB	; 219
    511a:	07 84       	ldd	r0, Z+15	; 0x0f
    511c:	f0 89       	ldd	r31, Z+16	; 0x10
    511e:	e0 2d       	mov	r30, r0
    5120:	cb 01       	movw	r24, r22
    5122:	64 2f       	mov	r22, r20
    5124:	19 95       	eicall
    5126:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}		
}
    5128:	c9 01       	movw	r24, r18
    512a:	08 95       	ret

0000512c <xio_init_dev>:
	int (*x_setflags)(const uint16_t control),// set device control flags
	int (*x_putc)(char, struct __file *),		// write char (stdio compatible)
	int (*x_getc)(struct __file *),			// read char (stdio compatible)
	int (*x_readln)(char *buf, uint8_t size)	// specialized line reader
	) 
{
    512c:	df 92       	push	r13
    512e:	ef 92       	push	r14
    5130:	ff 92       	push	r15
    5132:	0f 93       	push	r16
    5134:	1f 93       	push	r17
    5136:	cf 93       	push	r28
    5138:	df 93       	push	r29
	// clear device struct
	memset (&ds[dev], 0, sizeof(struct xioDEVICE));	
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	e7 e1       	ldi	r30, 0x17	; 23
    513e:	f0 e0       	ldi	r31, 0x00	; 0
    5140:	8e 9f       	mul	r24, r30
    5142:	d0 01       	movw	r26, r0
    5144:	8f 9f       	mul	r24, r31
    5146:	b0 0d       	add	r27, r0
    5148:	9e 9f       	mul	r25, r30
    514a:	b0 0d       	add	r27, r0
    514c:	11 24       	eor	r1, r1
    514e:	ac 56       	subi	r26, 0x6C	; 108
    5150:	bb 4d       	sbci	r27, 0xDB	; 219
    5152:	0f 2e       	mov	r0, r31
    5154:	f7 e1       	ldi	r31, 0x17	; 23
    5156:	df 2e       	mov	r13, r31
    5158:	f0 2d       	mov	r31, r0
    515a:	ed 01       	movw	r28, r26
    515c:	19 92       	st	Y+, r1
    515e:	da 94       	dec	r13
    5160:	e9 f7       	brne	.-6      	; 0x515c <xio_init_dev+0x30>

	// bind functions
	ds[dev].x_open = x_open;	
    5162:	17 96       	adiw	r26, 0x07	; 7
    5164:	6d 93       	st	X+, r22
    5166:	7c 93       	st	X, r23
    5168:	18 97       	sbiw	r26, 0x08	; 8
	ds[dev].x_setflags = x_setflags;
    516a:	19 96       	adiw	r26, 0x09	; 9
    516c:	4d 93       	st	X+, r20
    516e:	5c 93       	st	X, r21
    5170:	1a 97       	sbiw	r26, 0x0a	; 10
	ds[dev].x_putc = x_putc;
    5172:	1b 96       	adiw	r26, 0x0b	; 11
    5174:	2d 93       	st	X+, r18
    5176:	3c 93       	st	X, r19
    5178:	1c 97       	sbiw	r26, 0x0c	; 12
	ds[dev].x_getc = x_getc;
    517a:	1d 96       	adiw	r26, 0x0d	; 13
    517c:	0d 93       	st	X+, r16
    517e:	1c 93       	st	X, r17
    5180:	1e 97       	sbiw	r26, 0x0e	; 14
	ds[dev].x_readln = x_readln;
    5182:	1f 96       	adiw	r26, 0x0f	; 15
    5184:	ed 92       	st	X+, r14
    5186:	fc 92       	st	X, r15
    5188:	50 97       	sbiw	r26, 0x10	; 16

	// bind and setup stdio struct
	ds[dev].fdev = &ss[dev];					
    518a:	88 0f       	add	r24, r24
    518c:	99 1f       	adc	r25, r25
    518e:	fc 01       	movw	r30, r24
    5190:	43 e0       	ldi	r20, 0x03	; 3
    5192:	ee 0f       	add	r30, r30
    5194:	ff 1f       	adc	r31, r31
    5196:	4a 95       	dec	r20
    5198:	e1 f7       	brne	.-8      	; 0x5192 <xio_init_dev+0x66>
    519a:	e8 1b       	sub	r30, r24
    519c:	f9 0b       	sbc	r31, r25
    519e:	e4 5b       	subi	r30, 0xB4	; 180
    51a0:	fa 4d       	sbci	r31, 0xDA	; 218
    51a2:	53 96       	adiw	r26, 0x13	; 19
    51a4:	ed 93       	st	X+, r30
    51a6:	fc 93       	st	X, r31
    51a8:	54 97       	sbiw	r26, 0x14	; 20
	fdev_setup_stream(ds[dev].fdev, x_putc, x_getc, _FDEV_SETUP_RW);
    51aa:	20 87       	std	Z+8, r18	; 0x08
    51ac:	31 87       	std	Z+9, r19	; 0x09
    51ae:	02 87       	std	Z+10, r16	; 0x0a
    51b0:	13 87       	std	Z+11, r17	; 0x0b
    51b2:	83 e0       	ldi	r24, 0x03	; 3
    51b4:	83 83       	std	Z+3, r24	; 0x03
    51b6:	14 86       	std	Z+12, r1	; 0x0c
    51b8:	15 86       	std	Z+13, r1	; 0x0d
}
    51ba:	df 91       	pop	r29
    51bc:	cf 91       	pop	r28
    51be:	1f 91       	pop	r17
    51c0:	0f 91       	pop	r16
    51c2:	ff 90       	pop	r15
    51c4:	ef 90       	pop	r14
    51c6:	df 90       	pop	r13
    51c8:	08 95       	ret

000051ca <xio_init>:
/*
 *	xio_init() - initialize all active XIO devices
 */

void xio_init(void)
{	
    51ca:	ef 92       	push	r14
    51cc:	ff 92       	push	r15
    51ce:	0f 93       	push	r16
    51d0:	1f 93       	push	r17
	xio_init_rs485();
    51d2:	0e 94 a5 34 	call	0x694a	; 0x694a <xio_init_rs485>
	xio_init_usb();
    51d6:	0e 94 93 33 	call	0x6726	; 0x6726 <xio_init_usb>

	// Program memory file device setup
	xio_init_dev(XIO_DEV_PGM, xio_open_pgm, xio_setflags_pgm, xio_putc_pgm, xio_getc_pgm, xio_readln_pgm);
    51da:	83 e0       	ldi	r24, 0x03	; 3
    51dc:	67 ef       	ldi	r22, 0xF7	; 247
    51de:	74 e3       	ldi	r23, 0x34	; 52
    51e0:	45 e8       	ldi	r20, 0x85	; 133
    51e2:	55 e3       	ldi	r21, 0x35	; 53
    51e4:	2f e0       	ldi	r18, 0x0F	; 15
    51e6:	35 e3       	ldi	r19, 0x35	; 53
    51e8:	09 e3       	ldi	r16, 0x39	; 57
    51ea:	15 e3       	ldi	r17, 0x35	; 53
    51ec:	92 e1       	ldi	r25, 0x12	; 18
    51ee:	e9 2e       	mov	r14, r25
    51f0:	95 e3       	ldi	r25, 0x35	; 53
    51f2:	f9 2e       	mov	r15, r25
    51f4:	0e 94 96 28 	call	0x512c	; 0x512c <xio_init_dev>
	xio_init_pgm(XIO_DEV_PGM, XIO_DEV_PGM_OFFSET, PGM_INIT_bm);
    51f8:	83 e0       	ldi	r24, 0x03	; 3
    51fa:	60 e0       	ldi	r22, 0x00	; 0
    51fc:	40 e5       	ldi	r20, 0x50	; 80
    51fe:	55 e1       	ldi	r21, 0x15	; 21
    5200:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <xio_init_pgm>
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    5204:	80 91 be 24 	lds	r24, 0x24BE
    5208:	90 91 bf 24 	lds	r25, 0x24BF
    520c:	80 93 d3 25 	sts	0x25D3, r24
    5210:	90 93 d4 25 	sts	0x25D4, r25
}

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    5214:	80 93 d5 25 	sts	0x25D5, r24
    5218:	90 93 d6 25 	sts	0x25D6, r25
}

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    521c:	80 93 d7 25 	sts	0x25D7, r24
    5220:	90 93 d8 25 	sts	0x25D8, r25
	xio_set_stdin(XIO_DEV_USB);
	xio_set_stdout(XIO_DEV_USB);
	xio_set_stderr(XIO_DEV_USB);

	// tell the world we are ready!
	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    5224:	0f 92       	push	r0
    5226:	0f 92       	push	r0
    5228:	8f e8       	ldi	r24, 0x8F	; 143
    522a:	96 e0       	ldi	r25, 0x06	; 6
    522c:	ed b7       	in	r30, 0x3d	; 61
    522e:	fe b7       	in	r31, 0x3e	; 62
    5230:	81 83       	std	Z+1, r24	; 0x01
    5232:	92 83       	std	Z+2, r25	; 0x02
    5234:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
    5238:	0f 90       	pop	r0
    523a:	0f 90       	pop	r0
}
    523c:	1f 91       	pop	r17
    523e:	0f 91       	pop	r16
    5240:	ff 90       	pop	r15
    5242:	ef 90       	pop	r14
    5244:	08 95       	ret

00005246 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    5246:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5248:	e0 ec       	ldi	r30, 0xC0	; 192
    524a:	f1 e0       	ldi	r31, 0x01	; 1
    524c:	80 91 cf 01 	lds	r24, 0x01CF
    5250:	87 fd       	sbrc	r24, 7
    5252:	fa cf       	rjmp	.-12     	; 0x5248 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    5254:	26 2f       	mov	r18, r22
    5256:	30 e0       	ldi	r19, 0x00	; 0
    5258:	2f 71       	andi	r18, 0x1F	; 31
    525a:	30 70       	andi	r19, 0x00	; 0
    525c:	89 2f       	mov	r24, r25
    525e:	90 e0       	ldi	r25, 0x00	; 0
    5260:	45 e0       	ldi	r20, 0x05	; 5
    5262:	88 0f       	add	r24, r24
    5264:	99 1f       	adc	r25, r25
    5266:	4a 95       	dec	r20
    5268:	e1 f7       	brne	.-8      	; 0x5262 <EEPROM_ReadByte+0x1c>
    526a:	28 2b       	or	r18, r24
    526c:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    526e:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5272:	83 2f       	mov	r24, r19
    5274:	8f 71       	andi	r24, 0x1F	; 31
    5276:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5278:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    527a:	86 e0       	ldi	r24, 0x06	; 6
    527c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    527e:	ef 93       	push	r30
    5280:	ff 93       	push	r31
    5282:	0f 93       	push	r16
    5284:	2f 93       	push	r18
    5286:	eb ec       	ldi	r30, 0xCB	; 203
    5288:	f1 e0       	ldi	r31, 0x01	; 1
    528a:	08 ed       	ldi	r16, 0xD8	; 216
    528c:	21 e0       	ldi	r18, 0x01	; 1
    528e:	04 bf       	out	0x34, r16	; 52
    5290:	20 83       	st	Z, r18
    5292:	2f 91       	pop	r18
    5294:	0f 91       	pop	r16
    5296:	ff 91       	pop	r31
    5298:	ef 91       	pop	r30

	return NVM.DATA0;
    529a:	80 91 c4 01 	lds	r24, 0x01C4
}
    529e:	08 95       	ret

000052a0 <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    52a0:	68 2f       	mov	r22, r24
    52a2:	6f 71       	andi	r22, 0x1F	; 31
    52a4:	55 e0       	ldi	r21, 0x05	; 5
    52a6:	96 95       	lsr	r25
    52a8:	87 95       	ror	r24
    52aa:	5a 95       	dec	r21
    52ac:	e1 f7       	brne	.-8      	; 0x52a6 <eeprom_get_char+0x6>
    52ae:	0e 94 23 29 	call	0x5246	; 0x5246 <EEPROM_ReadByte>
}
    52b2:	08 95       	ret

000052b4 <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    52b4:	8f 92       	push	r8
    52b6:	9f 92       	push	r9
    52b8:	af 92       	push	r10
    52ba:	bf 92       	push	r11
    52bc:	cf 92       	push	r12
    52be:	df 92       	push	r13
    52c0:	ff 92       	push	r15
    52c2:	0f 93       	push	r16
    52c4:	1f 93       	push	r17
    52c6:	cf 93       	push	r28
    52c8:	df 93       	push	r29
    52ca:	4c 01       	movw	r8, r24
    52cc:	5b 01       	movw	r10, r22
    52ce:	6a 01       	movw	r12, r20
    52d0:	8b 01       	movw	r16, r22
    52d2:	ea 01       	movw	r28, r20
    52d4:	ff 24       	eor	r15, r15
    52d6:	18 c0       	rjmp	.+48     	; 0x5308 <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    52d8:	c8 01       	movw	r24, r16
    52da:	0e 94 50 29 	call	0x52a0	; 0x52a0 <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    52de:	ff 20       	and	r15, r15
    52e0:	19 f0       	breq	.+6      	; 0x52e8 <memcpy_from_eeprom_with_checksum+0x34>
    52e2:	21 e0       	ldi	r18, 0x01	; 1
    52e4:	30 e0       	ldi	r19, 0x00	; 0
    52e6:	08 c0       	rjmp	.+16     	; 0x52f8 <memcpy_from_eeprom_with_checksum+0x44>
    52e8:	2f 2d       	mov	r18, r15
    52ea:	33 27       	eor	r19, r19
    52ec:	27 fd       	sbrc	r18, 7
    52ee:	30 95       	com	r19
    52f0:	22 27       	eor	r18, r18
    52f2:	33 0f       	add	r19, r19
    52f4:	22 1f       	adc	r18, r18
    52f6:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    52f8:	0f 5f       	subi	r16, 0xFF	; 255
    52fa:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    52fc:	f8 2e       	mov	r15, r24
    52fe:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    5300:	f4 01       	movw	r30, r8
    5302:	81 93       	st	Z+, r24
    5304:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    5306:	21 97       	sbiw	r28, 0x01	; 1
    5308:	20 97       	sbiw	r28, 0x00	; 0
    530a:	31 f7       	brne	.-52     	; 0x52d8 <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    530c:	c6 01       	movw	r24, r12
    530e:	8a 0d       	add	r24, r10
    5310:	9b 1d       	adc	r25, r11
    5312:	0e 94 50 29 	call	0x52a0	; 0x52a0 <eeprom_get_char>
    5316:	20 e0       	ldi	r18, 0x00	; 0
    5318:	30 e0       	ldi	r19, 0x00	; 0
    531a:	f8 16       	cp	r15, r24
    531c:	11 f4       	brne	.+4      	; 0x5322 <memcpy_from_eeprom_with_checksum+0x6e>
    531e:	21 e0       	ldi	r18, 0x01	; 1
    5320:	30 e0       	ldi	r19, 0x00	; 0
}
    5322:	c9 01       	movw	r24, r18
    5324:	df 91       	pop	r29
    5326:	cf 91       	pop	r28
    5328:	1f 91       	pop	r17
    532a:	0f 91       	pop	r16
    532c:	ff 90       	pop	r15
    532e:	df 90       	pop	r13
    5330:	cf 90       	pop	r12
    5332:	bf 90       	pop	r11
    5334:	af 90       	pop	r10
    5336:	9f 90       	pop	r9
    5338:	8f 90       	pop	r8
    533a:	08 95       	ret

0000533c <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    533c:	80 91 cf 01 	lds	r24, 0x01CF
    5340:	87 fd       	sbrc	r24, 7
    5342:	fc cf       	rjmp	.-8      	; 0x533c <EEPROM_WaitForNVM>
}
    5344:	08 95       	ret

00005346 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5346:	80 91 cf 01 	lds	r24, 0x01CF
    534a:	87 fd       	sbrc	r24, 7
    534c:	fc cf       	rjmp	.-8      	; 0x5346 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    534e:	80 91 cf 01 	lds	r24, 0x01CF
    5352:	81 ff       	sbrs	r24, 1
    5354:	12 c0       	rjmp	.+36     	; 0x537a <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    5356:	86 e3       	ldi	r24, 0x36	; 54
    5358:	e0 ec       	ldi	r30, 0xC0	; 192
    535a:	f1 e0       	ldi	r31, 0x01	; 1
    535c:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    535e:	ef 93       	push	r30
    5360:	ff 93       	push	r31
    5362:	0f 93       	push	r16
    5364:	2f 93       	push	r18
    5366:	eb ec       	ldi	r30, 0xCB	; 203
    5368:	f1 e0       	ldi	r31, 0x01	; 1
    536a:	08 ed       	ldi	r16, 0xD8	; 216
    536c:	21 e0       	ldi	r18, 0x01	; 1
    536e:	04 bf       	out	0x34, r16	; 52
    5370:	20 83       	st	Z, r18
    5372:	2f 91       	pop	r18
    5374:	0f 91       	pop	r16
    5376:	ff 91       	pop	r31
    5378:	ef 91       	pop	r30
    537a:	08 95       	ret

0000537c <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    537c:	df 92       	push	r13
    537e:	ef 92       	push	r14
    5380:	ff 92       	push	r15
    5382:	0f 93       	push	r16
    5384:	1f 93       	push	r17
    5386:	e8 2e       	mov	r14, r24
    5388:	06 2f       	mov	r16, r22
    538a:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    538c:	0e 94 a3 29 	call	0x5346	; 0x5346 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5390:	e0 ec       	ldi	r30, 0xC0	; 192
    5392:	f1 e0       	ldi	r31, 0x01	; 1
    5394:	83 e3       	ldi	r24, 0x33	; 51
    5396:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    5398:	10 e0       	ldi	r17, 0x00	; 0
    539a:	0f 71       	andi	r16, 0x1F	; 31
    539c:	10 70       	andi	r17, 0x00	; 0
    539e:	ff 24       	eor	r15, r15
    53a0:	75 e0       	ldi	r23, 0x05	; 5
    53a2:	ee 0c       	add	r14, r14
    53a4:	ff 1c       	adc	r15, r15
    53a6:	7a 95       	dec	r23
    53a8:	e1 f7       	brne	.-8      	; 0x53a2 <EEPROM_WriteByte+0x26>
    53aa:	0e 29       	or	r16, r14
    53ac:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    53ae:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    53b0:	81 2f       	mov	r24, r17
    53b2:	8f 71       	andi	r24, 0x1F	; 31
    53b4:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    53b6:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    53b8:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    53ba:	85 e3       	ldi	r24, 0x35	; 53
    53bc:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    53be:	ef 93       	push	r30
    53c0:	ff 93       	push	r31
    53c2:	0f 93       	push	r16
    53c4:	2f 93       	push	r18
    53c6:	eb ec       	ldi	r30, 0xCB	; 203
    53c8:	f1 e0       	ldi	r31, 0x01	; 1
    53ca:	08 ed       	ldi	r16, 0xD8	; 216
    53cc:	21 e0       	ldi	r18, 0x01	; 1
    53ce:	04 bf       	out	0x34, r16	; 52
    53d0:	20 83       	st	Z, r18
    53d2:	2f 91       	pop	r18
    53d4:	0f 91       	pop	r16
    53d6:	ff 91       	pop	r31
    53d8:	ef 91       	pop	r30
}
    53da:	1f 91       	pop	r17
    53dc:	0f 91       	pop	r16
    53de:	ff 90       	pop	r15
    53e0:	ef 90       	pop	r14
    53e2:	df 90       	pop	r13
    53e4:	08 95       	ret

000053e6 <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    53e6:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    53e8:	68 2f       	mov	r22, r24
    53ea:	6f 71       	andi	r22, 0x1F	; 31
    53ec:	e5 e0       	ldi	r30, 0x05	; 5
    53ee:	96 95       	lsr	r25
    53f0:	87 95       	ror	r24
    53f2:	ea 95       	dec	r30
    53f4:	e1 f7       	brne	.-8      	; 0x53ee <eeprom_put_char+0x8>
    53f6:	0e 94 be 29 	call	0x537c	; 0x537c <EEPROM_WriteByte>
}
    53fa:	08 95       	ret

000053fc <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    53fc:	8f 92       	push	r8
    53fe:	9f 92       	push	r9
    5400:	af 92       	push	r10
    5402:	bf 92       	push	r11
    5404:	cf 92       	push	r12
    5406:	df 92       	push	r13
    5408:	ef 92       	push	r14
    540a:	ff 92       	push	r15
    540c:	0f 93       	push	r16
    540e:	df 93       	push	r29
    5410:	cf 93       	push	r28
    5412:	0f 92       	push	r0
    5414:	0f 92       	push	r0
    5416:	cd b7       	in	r28, 0x3d	; 61
    5418:	de b7       	in	r29, 0x3e	; 62
    541a:	5c 01       	movw	r10, r24
    541c:	6b 01       	movw	r12, r22
    541e:	7a 01       	movw	r14, r20
    5420:	4a 01       	movw	r8, r20
    5422:	00 e0       	ldi	r16, 0x00	; 0
    5424:	1e c0       	rjmp	.+60     	; 0x5462 <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    5426:	00 23       	and	r16, r16
    5428:	19 f0       	breq	.+6      	; 0x5430 <memcpy_to_eeprom_with_checksum+0x34>
    542a:	21 e0       	ldi	r18, 0x01	; 1
    542c:	30 e0       	ldi	r19, 0x00	; 0
    542e:	08 c0       	rjmp	.+16     	; 0x5440 <memcpy_to_eeprom_with_checksum+0x44>
    5430:	20 2f       	mov	r18, r16
    5432:	33 27       	eor	r19, r19
    5434:	27 fd       	sbrc	r18, 7
    5436:	30 95       	com	r19
    5438:	22 27       	eor	r18, r18
    543a:	33 0f       	add	r19, r19
    543c:	22 1f       	adc	r18, r18
    543e:	33 27       	eor	r19, r19
    checksum += *source;
    5440:	f6 01       	movw	r30, r12
    5442:	61 91       	ld	r22, Z+
    5444:	6f 01       	movw	r12, r30
    5446:	06 2f       	mov	r16, r22
    5448:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    544a:	9c 01       	movw	r18, r24
    544c:	2f 5f       	subi	r18, 0xFF	; 255
    544e:	3f 4f       	sbci	r19, 0xFF	; 255
    5450:	29 83       	std	Y+1, r18	; 0x01
    5452:	3a 83       	std	Y+2, r19	; 0x02
    5454:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    5458:	08 94       	sec
    545a:	81 08       	sbc	r8, r1
    545c:	91 08       	sbc	r9, r1
    545e:	89 81       	ldd	r24, Y+1	; 0x01
    5460:	9a 81       	ldd	r25, Y+2	; 0x02
    5462:	81 14       	cp	r8, r1
    5464:	91 04       	cpc	r9, r1
    5466:	f9 f6       	brne	.-66     	; 0x5426 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    5468:	c7 01       	movw	r24, r14
    546a:	8a 0d       	add	r24, r10
    546c:	9b 1d       	adc	r25, r11
    546e:	60 2f       	mov	r22, r16
    5470:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <eeprom_put_char>
}
    5474:	0f 90       	pop	r0
    5476:	0f 90       	pop	r0
    5478:	cf 91       	pop	r28
    547a:	df 91       	pop	r29
    547c:	0f 91       	pop	r16
    547e:	ff 90       	pop	r15
    5480:	ef 90       	pop	r14
    5482:	df 90       	pop	r13
    5484:	cf 90       	pop	r12
    5486:	bf 90       	pop	r11
    5488:	af 90       	pop	r10
    548a:	9f 90       	pop	r9
    548c:	8f 90       	pop	r8
    548e:	08 95       	ret

00005490 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    5490:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5492:	e0 ec       	ldi	r30, 0xC0	; 192
    5494:	f1 e0       	ldi	r31, 0x01	; 1
    5496:	80 91 cf 01 	lds	r24, 0x01CF
    549a:	87 fd       	sbrc	r24, 7
    549c:	fa cf       	rjmp	.-12     	; 0x5492 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    549e:	83 e3       	ldi	r24, 0x33	; 51
    54a0:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    54a2:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    54a6:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    54a8:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    54aa:	64 83       	std	Z+4, r22	; 0x04
}
    54ac:	08 95       	ret

000054ae <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    54ae:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    54b0:	e0 ec       	ldi	r30, 0xC0	; 192
    54b2:	f1 e0       	ldi	r31, 0x01	; 1
    54b4:	80 91 cf 01 	lds	r24, 0x01CF
    54b8:	87 fd       	sbrc	r24, 7
    54ba:	fa cf       	rjmp	.-12     	; 0x54b0 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    54bc:	83 e3       	ldi	r24, 0x33	; 51
    54be:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    54c0:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    54c2:	12 82       	std	Z+2, r1	; 0x02
    54c4:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    54c6:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    54ca:	8d 91       	ld	r24, X+
    54cc:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    54ce:	9f 5f       	subi	r25, 0xFF	; 255
    54d0:	90 32       	cpi	r25, 0x20	; 32
    54d2:	c9 f7       	brne	.-14     	; 0x54c6 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    54d4:	08 95       	ret

000054d6 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    54d6:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    54d8:	e0 ec       	ldi	r30, 0xC0	; 192
    54da:	f1 e0       	ldi	r31, 0x01	; 1
    54dc:	80 91 cf 01 	lds	r24, 0x01CF
    54e0:	87 fd       	sbrc	r24, 7
    54e2:	fa cf       	rjmp	.-12     	; 0x54d8 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    54e4:	89 2f       	mov	r24, r25
    54e6:	90 e0       	ldi	r25, 0x00	; 0
    54e8:	a5 e0       	ldi	r26, 0x05	; 5
    54ea:	88 0f       	add	r24, r24
    54ec:	99 1f       	adc	r25, r25
    54ee:	aa 95       	dec	r26
    54f0:	e1 f7       	brne	.-8      	; 0x54ea <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    54f2:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    54f6:	89 2f       	mov	r24, r25
    54f8:	8f 71       	andi	r24, 0x1F	; 31
    54fa:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    54fc:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    54fe:	85 e3       	ldi	r24, 0x35	; 53
    5500:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5502:	ef 93       	push	r30
    5504:	ff 93       	push	r31
    5506:	0f 93       	push	r16
    5508:	2f 93       	push	r18
    550a:	eb ec       	ldi	r30, 0xCB	; 203
    550c:	f1 e0       	ldi	r31, 0x01	; 1
    550e:	08 ed       	ldi	r16, 0xD8	; 216
    5510:	21 e0       	ldi	r18, 0x01	; 1
    5512:	04 bf       	out	0x34, r16	; 52
    5514:	20 83       	st	Z, r18
    5516:	2f 91       	pop	r18
    5518:	0f 91       	pop	r16
    551a:	ff 91       	pop	r31
    551c:	ef 91       	pop	r30
}
    551e:	08 95       	ret

00005520 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    5520:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5522:	e0 ec       	ldi	r30, 0xC0	; 192
    5524:	f1 e0       	ldi	r31, 0x01	; 1
    5526:	80 91 cf 01 	lds	r24, 0x01CF
    552a:	87 fd       	sbrc	r24, 7
    552c:	fa cf       	rjmp	.-12     	; 0x5522 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    552e:	89 2f       	mov	r24, r25
    5530:	90 e0       	ldi	r25, 0x00	; 0
    5532:	b5 e0       	ldi	r27, 0x05	; 5
    5534:	88 0f       	add	r24, r24
    5536:	99 1f       	adc	r25, r25
    5538:	ba 95       	dec	r27
    553a:	e1 f7       	brne	.-8      	; 0x5534 <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    553c:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5540:	89 2f       	mov	r24, r25
    5542:	8f 71       	andi	r24, 0x1F	; 31
    5544:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5546:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    5548:	82 e3       	ldi	r24, 0x32	; 50
    554a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    554c:	ef 93       	push	r30
    554e:	ff 93       	push	r31
    5550:	0f 93       	push	r16
    5552:	2f 93       	push	r18
    5554:	eb ec       	ldi	r30, 0xCB	; 203
    5556:	f1 e0       	ldi	r31, 0x01	; 1
    5558:	08 ed       	ldi	r16, 0xD8	; 216
    555a:	21 e0       	ldi	r18, 0x01	; 1
    555c:	04 bf       	out	0x34, r16	; 52
    555e:	20 83       	st	Z, r18
    5560:	2f 91       	pop	r18
    5562:	0f 91       	pop	r16
    5564:	ff 91       	pop	r31
    5566:	ef 91       	pop	r30
}
    5568:	08 95       	ret

0000556a <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    556a:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    556c:	e0 ec       	ldi	r30, 0xC0	; 192
    556e:	f1 e0       	ldi	r31, 0x01	; 1
    5570:	80 91 cf 01 	lds	r24, 0x01CF
    5574:	87 fd       	sbrc	r24, 7
    5576:	fa cf       	rjmp	.-12     	; 0x556c <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5578:	89 2f       	mov	r24, r25
    557a:	90 e0       	ldi	r25, 0x00	; 0
    557c:	25 e0       	ldi	r18, 0x05	; 5
    557e:	88 0f       	add	r24, r24
    5580:	99 1f       	adc	r25, r25
    5582:	2a 95       	dec	r18
    5584:	e1 f7       	brne	.-8      	; 0x557e <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5586:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    558a:	89 2f       	mov	r24, r25
    558c:	8f 71       	andi	r24, 0x1F	; 31
    558e:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5590:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    5592:	84 e3       	ldi	r24, 0x34	; 52
    5594:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5596:	ef 93       	push	r30
    5598:	ff 93       	push	r31
    559a:	0f 93       	push	r16
    559c:	2f 93       	push	r18
    559e:	eb ec       	ldi	r30, 0xCB	; 203
    55a0:	f1 e0       	ldi	r31, 0x01	; 1
    55a2:	08 ed       	ldi	r16, 0xD8	; 216
    55a4:	21 e0       	ldi	r18, 0x01	; 1
    55a6:	04 bf       	out	0x34, r16	; 52
    55a8:	20 83       	st	Z, r18
    55aa:	2f 91       	pop	r18
    55ac:	0f 91       	pop	r16
    55ae:	ff 91       	pop	r31
    55b0:	ef 91       	pop	r30
}
    55b2:	08 95       	ret

000055b4 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    55b4:	80 91 cf 01 	lds	r24, 0x01CF
    55b8:	87 fd       	sbrc	r24, 7
    55ba:	fc cf       	rjmp	.-8      	; 0x55b4 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    55bc:	80 e3       	ldi	r24, 0x30	; 48
    55be:	e0 ec       	ldi	r30, 0xC0	; 192
    55c0:	f1 e0       	ldi	r31, 0x01	; 1
    55c2:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    55c4:	ef 93       	push	r30
    55c6:	ff 93       	push	r31
    55c8:	0f 93       	push	r16
    55ca:	2f 93       	push	r18
    55cc:	eb ec       	ldi	r30, 0xCB	; 203
    55ce:	f1 e0       	ldi	r31, 0x01	; 1
    55d0:	08 ed       	ldi	r16, 0xD8	; 216
    55d2:	21 e0       	ldi	r18, 0x01	; 1
    55d4:	04 bf       	out	0x34, r16	; 52
    55d6:	20 83       	st	Z, r18
    55d8:	2f 91       	pop	r18
    55da:	0f 91       	pop	r16
    55dc:	ff 91       	pop	r31
    55de:	ef 91       	pop	r30
}
    55e0:	08 95       	ret

000055e2 <tg_reset_source>:
 * tg_reset_source()  Reset source to default input device
 */

void tg_reset_source()
{
	_tg_set_source(tg.default_src);
    55e2:	80 91 8a 21 	lds	r24, 0x218A
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    55e6:	80 93 89 21 	sts	0x2189, r24
	if (tg.src == XIO_DEV_PGM) {
    55ea:	83 30       	cpi	r24, 0x03	; 3
    55ec:	21 f4       	brne	.+8      	; 0x55f6 <tg_reset_source+0x14>
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    55ee:	80 91 86 21 	lds	r24, 0x2186
    55f2:	8e 7f       	andi	r24, 0xFE	; 254
    55f4:	03 c0       	rjmp	.+6      	; 0x55fc <tg_reset_source+0x1a>
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    55f6:	80 91 86 21 	lds	r24, 0x2186
    55fa:	81 60       	ori	r24, 0x01	; 1
    55fc:	80 93 86 21 	sts	0x2186, r24
    5600:	08 95       	ret

00005602 <tg_print_status>:
	tgStatusMsg20
};

void tg_print_status(const uint8_t status_code, const char *textbuf)
{
	switch (status_code) {		// don't send messages for these status codes
    5602:	84 30       	cpi	r24, 0x04	; 4
    5604:	28 f4       	brcc	.+10     	; 0x5610 <tg_print_status+0xe>
    5606:	82 30       	cpi	r24, 0x02	; 2
    5608:	28 f5       	brcc	.+74     	; 0x5654 <tg_print_status+0x52>
    560a:	88 23       	and	r24, r24
    560c:	19 f1       	breq	.+70     	; 0x5654 <tg_print_status+0x52>
    560e:	02 c0       	rjmp	.+4      	; 0x5614 <tg_print_status+0x12>
    5610:	8b 30       	cpi	r24, 0x0B	; 11
    5612:	01 f1       	breq	.+64     	; 0x5654 <tg_print_status+0x52>
		case TG_OK: return;
		case TG_EAGAIN: return;
		case TG_NOOP: return;
		case TG_QUIT: return;
	}
	printf_P(PSTR("%S: %s\n"),(PGM_P)pgm_read_word(&tgStatusStrings[status_code]), textbuf);
    5614:	e8 2f       	mov	r30, r24
    5616:	f0 e0       	ldi	r31, 0x00	; 0
    5618:	ee 0f       	add	r30, r30
    561a:	ff 1f       	adc	r31, r31
    561c:	ee 5a       	subi	r30, 0xAE	; 174
    561e:	f5 4e       	sbci	r31, 0xE5	; 229
    5620:	25 91       	lpm	r18, Z+
    5622:	34 91       	lpm	r19, Z+
    5624:	00 d0       	rcall	.+0      	; 0x5626 <tg_print_status+0x24>
    5626:	00 d0       	rcall	.+0      	; 0x5628 <tg_print_status+0x26>
    5628:	ed b7       	in	r30, 0x3d	; 61
    562a:	fe b7       	in	r31, 0x3e	; 62
    562c:	31 96       	adiw	r30, 0x01	; 1
    562e:	8c e7       	ldi	r24, 0x7C	; 124
    5630:	9a e1       	ldi	r25, 0x1A	; 26
    5632:	ad b7       	in	r26, 0x3d	; 61
    5634:	be b7       	in	r27, 0x3e	; 62
    5636:	11 96       	adiw	r26, 0x01	; 1
    5638:	8d 93       	st	X+, r24
    563a:	9c 93       	st	X, r25
    563c:	12 97       	sbiw	r26, 0x02	; 2
    563e:	22 83       	std	Z+2, r18	; 0x02
    5640:	33 83       	std	Z+3, r19	; 0x03
    5642:	64 83       	std	Z+4, r22	; 0x04
    5644:	75 83       	std	Z+5, r23	; 0x05
    5646:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
    564a:	8d b7       	in	r24, 0x3d	; 61
    564c:	9e b7       	in	r25, 0x3e	; 62
    564e:	06 96       	adiw	r24, 0x06	; 6
    5650:	8d bf       	out	0x3d, r24	; 61
    5652:	9e bf       	out	0x3e, r25	; 62
    5654:	08 95       	ret

00005656 <_tg_prompt>:
	tgModeStringDirect
};

void _tg_prompt()
{
	if (tg.state == TG_READY_UNPROMPTED) {
    5656:	80 91 85 21 	lds	r24, 0x2185
    565a:	88 23       	and	r24, r24
    565c:	09 f5       	brne	.+66     	; 0x56a0 <_tg_prompt+0x4a>
		if (tg.flags && TG_FLAG_PROMPTS_bm) {
    565e:	80 91 86 21 	lds	r24, 0x2186
    5662:	88 23       	and	r24, r24
    5664:	d1 f0       	breq	.+52     	; 0x569a <_tg_prompt+0x44>
			printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5666:	80 91 88 21 	lds	r24, 0x2188
    566a:	e8 2f       	mov	r30, r24
    566c:	f0 e0       	ldi	r31, 0x00	; 0
    566e:	ee 0f       	add	r30, r30
    5670:	ff 1f       	adc	r31, r31
    5672:	eb 5f       	subi	r30, 0xFB	; 251
    5674:	f6 4e       	sbci	r31, 0xE6	; 230
    5676:	25 91       	lpm	r18, Z+
    5678:	34 91       	lpm	r19, Z+
    567a:	00 d0       	rcall	.+0      	; 0x567c <_tg_prompt+0x26>
    567c:	0f 92       	push	r0
    567e:	89 e9       	ldi	r24, 0x99	; 153
    5680:	9a e1       	ldi	r25, 0x1A	; 26
    5682:	ed b7       	in	r30, 0x3d	; 61
    5684:	fe b7       	in	r31, 0x3e	; 62
    5686:	81 83       	std	Z+1, r24	; 0x01
    5688:	92 83       	std	Z+2, r25	; 0x02
    568a:	23 83       	std	Z+3, r18	; 0x03
    568c:	34 83       	std	Z+4, r19	; 0x04
    568e:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
    5692:	0f 90       	pop	r0
    5694:	0f 90       	pop	r0
    5696:	0f 90       	pop	r0
    5698:	0f 90       	pop	r0
		}
		tg.state = TG_READY_PROMPTED;
    569a:	81 e0       	ldi	r24, 0x01	; 1
    569c:	80 93 85 21 	sts	0x2185, r24
    56a0:	08 95       	ret

000056a2 <tg_init>:
 */

void tg_init() 
{
	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
    56a2:	81 e0       	ldi	r24, 0x01	; 1
    56a4:	80 93 8a 21 	sts	0x218A, r24
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    56a8:	ea e8       	ldi	r30, 0x8A	; 138
    56aa:	f1 e2       	ldi	r31, 0x21	; 33
    56ac:	80 93 89 21 	sts	0x2189, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    56b0:	34 97       	sbiw	r30, 0x04	; 4
    56b2:	80 81       	ld	r24, Z
    56b4:	81 60       	ori	r24, 0x01	; 1
    56b6:	80 83       	st	Z, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    56b8:	10 92 88 21 	sts	0x2188, r1
{
	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
	_tg_set_source(tg.default_src);			// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode
	tg.state = TG_READY_UNPROMPTED;
    56bc:	10 92 85 21 	sts	0x2185, r1

	// version string
	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    56c0:	00 d0       	rcall	.+0      	; 0x56c2 <tg_init+0x20>
    56c2:	0f 92       	push	r0
    56c4:	81 eb       	ldi	r24, 0xB1	; 177
    56c6:	9a e1       	ldi	r25, 0x1A	; 26
    56c8:	ed b7       	in	r30, 0x3d	; 61
    56ca:	fe b7       	in	r31, 0x3e	; 62
    56cc:	81 83       	std	Z+1, r24	; 0x01
    56ce:	92 83       	std	Z+2, r25	; 0x02
    56d0:	87 ea       	ldi	r24, 0xA7	; 167
    56d2:	9a e1       	ldi	r25, 0x1A	; 26
    56d4:	83 83       	std	Z+3, r24	; 0x03
    56d6:	94 83       	std	Z+4, r25	; 0x04
    56d8:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
    56dc:	0f 90       	pop	r0
    56de:	0f 90       	pop	r0
    56e0:	0f 90       	pop	r0
    56e2:	0f 90       	pop	r0
}
    56e4:	08 95       	ret

000056e6 <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    56e6:	cf 93       	push	r28
    56e8:	df 93       	push	r29
    56ea:	ec 01       	movw	r28, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    56ec:	80 91 88 21 	lds	r24, 0x2188
    56f0:	88 23       	and	r24, r24
    56f2:	09 f0       	breq	.+2      	; 0x56f6 <tg_parser+0x10>
    56f4:	43 c0       	rjmp	.+134    	; 0x577c <tg_parser+0x96>
		switch (toupper(buf[0])) {
    56f6:	88 81       	ld	r24, Y
    56f8:	90 e0       	ldi	r25, 0x00	; 0
    56fa:	0e 94 d6 47 	call	0x8fac	; 0x8fac <toupper>
    56fe:	86 34       	cpi	r24, 0x46	; 70
    5700:	91 05       	cpc	r25, r1
    5702:	41 f1       	breq	.+80     	; 0x5754 <tg_parser+0x6e>
    5704:	87 34       	cpi	r24, 0x47	; 71
    5706:	91 05       	cpc	r25, r1
    5708:	84 f4       	brge	.+32     	; 0x572a <tg_parser+0x44>
    570a:	83 34       	cpi	r24, 0x43	; 67
    570c:	91 05       	cpc	r25, r1
    570e:	e1 f0       	breq	.+56     	; 0x5748 <tg_parser+0x62>
    5710:	84 34       	cpi	r24, 0x44	; 68
    5712:	91 05       	cpc	r25, r1
    5714:	34 f4       	brge	.+12     	; 0x5722 <tg_parser+0x3c>
    5716:	88 32       	cpi	r24, 0x28	; 40
    5718:	91 05       	cpc	r25, r1
    571a:	a1 f0       	breq	.+40     	; 0x5744 <tg_parser+0x5e>
    571c:	cf 97       	sbiw	r24, 0x3f	; 63
    571e:	61 f5       	brne	.+88     	; 0x5778 <tg_parser+0x92>
    5720:	13 c0       	rjmp	.+38     	; 0x5748 <tg_parser+0x62>
    5722:	84 34       	cpi	r24, 0x44	; 68
    5724:	91 05       	cpc	r25, r1
    5726:	41 f5       	brne	.+80     	; 0x5778 <tg_parser+0x92>
    5728:	13 c0       	rjmp	.+38     	; 0x5750 <tg_parser+0x6a>
    572a:	8f 34       	cpi	r24, 0x4F	; 79
    572c:	91 05       	cpc	r25, r1
    572e:	3c f4       	brge	.+14     	; 0x573e <tg_parser+0x58>
    5730:	8d 34       	cpi	r24, 0x4D	; 77
    5732:	91 05       	cpc	r25, r1
    5734:	3c f4       	brge	.+14     	; 0x5744 <tg_parser+0x5e>
    5736:	87 34       	cpi	r24, 0x47	; 71
    5738:	91 05       	cpc	r25, r1
    573a:	f1 f4       	brne	.+60     	; 0x5778 <tg_parser+0x92>
    573c:	03 c0       	rjmp	.+6      	; 0x5744 <tg_parser+0x5e>
    573e:	8c 35       	cpi	r24, 0x5C	; 92
    5740:	91 05       	cpc	r25, r1
    5742:	d1 f4       	brne	.+52     	; 0x5778 <tg_parser+0x92>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5744:	82 e0       	ldi	r24, 0x02	; 2
    5746:	01 c0       	rjmp	.+2      	; 0x574a <tg_parser+0x64>
int tg_parser(char * buf)
{
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
		switch (toupper(buf[0])) {
			case 'G': case 'M': case 'N': case '(': case '\\': _tg_set_mode(TG_GCODE_MODE); break;
    5748:	81 e0       	ldi	r24, 0x01	; 1
    574a:	80 93 88 21 	sts	0x2188, r24
    574e:	16 c0       	rjmp	.+44     	; 0x577c <tg_parser+0x96>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5750:	83 e0       	ldi	r24, 0x03	; 3
    5752:	fb cf       	rjmp	.-10     	; 0x574a <tg_parser+0x64>
//	xio_open_pgm(PGMFILE(&square_circle_test100));
//	xio_open_pgm(PGMFILE(&spiral_test50a));
//	xio_open_pgm(PGMFILE(&spiral_test5));
//	xio_open_pgm(PGMFILE(&dwell_test2));

	xio_open_pgm(PGMFILE(&contraptor_circle)); 	// contraptor circle test
    5754:	83 ef       	ldi	r24, 0xF3	; 243
    5756:	94 e1       	ldi	r25, 0x14	; 20
    5758:	0e 94 f7 34 	call	0x69ee	; 0x69ee <xio_open_pgm>
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    575c:	83 e0       	ldi	r24, 0x03	; 3
    575e:	80 93 89 21 	sts	0x2189, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    5762:	80 91 86 21 	lds	r24, 0x2186
    5766:	8e 7f       	andi	r24, 0xFE	; 254
    5768:	80 93 86 21 	sts	0x2186, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    576c:	82 e0       	ldi	r24, 0x02	; 2
    576e:	80 93 88 21 	sts	0x2188, r24
    5772:	20 e0       	ldi	r18, 0x00	; 0
    5774:	30 e0       	ldi	r19, 0x00	; 0
    5776:	1d c0       	rjmp	.+58     	; 0x57b2 <tg_parser+0xcc>
	if (tg.mode == TG_CONTROL_MODE) {
		switch (toupper(buf[0])) {
			case 'G': case 'M': case 'N': case '(': case '\\': _tg_set_mode(TG_GCODE_MODE); break;
			case 'C': case '?': _tg_set_mode(TG_CONFIG_MODE); break;
			case 'D': _tg_set_mode(TG_DIRECT_DRIVE_MODE); break;
			case 'F': return (_tg_test_file());
    5778:	10 92 88 21 	sts	0x2188, r1
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    577c:	10 92 87 21 	sts	0x2187, r1
	switch (tg.mode) {
    5780:	80 91 88 21 	lds	r24, 0x2188
    5784:	82 30       	cpi	r24, 0x02	; 2
    5786:	41 f0       	breq	.+16     	; 0x5798 <tg_parser+0xb2>
    5788:	83 30       	cpi	r24, 0x03	; 3
    578a:	51 f0       	breq	.+20     	; 0x57a0 <tg_parser+0xba>
    578c:	81 30       	cpi	r24, 0x01	; 1
    578e:	69 f4       	brne	.+26     	; 0x57aa <tg_parser+0xc4>
		case TG_CONFIG_MODE: tg.status = cfg_parse(buf); break;
    5790:	ce 01       	movw	r24, r28
    5792:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <cfg_parse>
    5796:	07 c0       	rjmp	.+14     	; 0x57a6 <tg_parser+0xc0>
		case TG_GCODE_MODE: tg.status = gc_gcode_parser(buf); break;
    5798:	ce 01       	movw	r24, r28
    579a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <gc_gcode_parser>
    579e:	03 c0       	rjmp	.+6      	; 0x57a6 <tg_parser+0xc0>
		case TG_DIRECT_DRIVE_MODE: tg.status = dd_parser(buf); break;
    57a0:	ce 01       	movw	r24, r28
    57a2:	0e 94 29 2c 	call	0x5852	; 0x5852 <dd_parser>
    57a6:	80 93 87 21 	sts	0x2187, r24
	}
	return (tg.status);
    57aa:	80 91 87 21 	lds	r24, 0x2187
    57ae:	28 2f       	mov	r18, r24
    57b0:	30 e0       	ldi	r19, 0x00	; 0
}
    57b2:	c9 01       	movw	r24, r18
    57b4:	df 91       	pop	r29
    57b6:	cf 91       	pop	r28
    57b8:	08 95       	ret

000057ba <tg_controller>:
 */

void tg_controller()
{
	// top priority tasks
	st_execute_move();
    57ba:	0e 94 b6 24 	call	0x496c	; 0x496c <st_execute_move>

	// medium priority tasks
	switch (mc_line_continue()) {
    57be:	0e 94 4c 1b 	call	0x3698	; 0x3698 <mc_line_continue>
    57c2:	00 97       	sbiw	r24, 0x00	; 0
    57c4:	51 f0       	breq	.+20     	; 0x57da <tg_controller+0x20>
    57c6:	02 97       	sbiw	r24, 0x02	; 2
    57c8:	09 f4       	brne	.+2      	; 0x57cc <tg_controller+0x12>
    57ca:	08 95       	ret
			_tg_prompt();
			return;
		}
	}

	switch (mc_arc_continue()) {
    57cc:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <mc_arc_continue>
    57d0:	00 97       	sbiw	r24, 0x00	; 0
    57d2:	19 f0       	breq	.+6      	; 0x57da <tg_controller+0x20>
    57d4:	02 97       	sbiw	r24, 0x02	; 2
    57d6:	31 f4       	brne	.+12     	; 0x57e4 <tg_controller+0x2a>
    57d8:	08 95       	ret
		case (TG_EAGAIN): return;
		case (TG_OK): {
			tg.state = TG_READY_UNPROMPTED; 
    57da:	10 92 85 21 	sts	0x2185, r1
			_tg_prompt();
    57de:	0e 94 2b 2b 	call	0x5656	; 0x5656 <_tg_prompt>
    57e2:	08 95       	ret
 */

static int _tg_read_next_line()
{
	// read input line or return if not a completed line
	if ((tg.status = xio_readln(tg.src, tg.buf, sizeof(tg.buf))) == TG_OK) {
    57e4:	80 91 89 21 	lds	r24, 0x2189
    57e8:	6c e8       	ldi	r22, 0x8C	; 140
    57ea:	71 e2       	ldi	r23, 0x21	; 33
    57ec:	4f ef       	ldi	r20, 0xFF	; 255
    57ee:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <xio_readln>
    57f2:	80 93 87 21 	sts	0x2187, r24
    57f6:	88 23       	and	r24, r24
    57f8:	31 f4       	brne	.+12     	; 0x5806 <tg_controller+0x4c>
		tg.status = tg_parser(tg.buf);				// dispatch to parser
    57fa:	8c e8       	ldi	r24, 0x8C	; 140
    57fc:	91 e2       	ldi	r25, 0x21	; 33
    57fe:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <tg_parser>
    5802:	80 93 87 21 	sts	0x2187, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    5806:	80 91 87 21 	lds	r24, 0x2187
    580a:	84 30       	cpi	r24, 0x04	; 4
    580c:	18 f4       	brcc	.+6      	; 0x5814 <tg_controller+0x5a>
    580e:	82 30       	cpi	r24, 0x02	; 2
    5810:	c0 f4       	brcc	.+48     	; 0x5842 <tg_controller+0x88>
    5812:	15 c0       	rjmp	.+42     	; 0x583e <tg_controller+0x84>
    5814:	85 30       	cpi	r24, 0x05	; 5
    5816:	29 f0       	breq	.+10     	; 0x5822 <tg_controller+0x68>
    5818:	8b 30       	cpi	r24, 0x0B	; 11
    581a:	89 f4       	brne	.+34     	; 0x583e <tg_controller+0x84>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    581c:	10 92 88 21 	sts	0x2188, r1
    5820:	0e c0       	rjmp	.+28     	; 0x583e <tg_controller+0x84>
			_tg_set_mode(TG_CONTROL_MODE);
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
    5822:	0f 92       	push	r0
    5824:	0f 92       	push	r0
    5826:	84 e8       	ldi	r24, 0x84	; 132
    5828:	9a e1       	ldi	r25, 0x1A	; 26
    582a:	ed b7       	in	r30, 0x3d	; 61
    582c:	fe b7       	in	r31, 0x3e	; 62
    582e:	81 83       	std	Z+1, r24	; 0x01
    5830:	92 83       	std	Z+2, r25	; 0x02
    5832:	0e 94 78 48 	call	0x90f0	; 0x90f0 <printf_P>
			tg_reset_source();						// reset to default src
    5836:	0f 90       	pop	r0
    5838:	0f 90       	pop	r0
    583a:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <tg_reset_source>
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		default: {
			tg.state = TG_READY_UNPROMPTED;			// traps various error returns
    583e:	10 92 85 21 	sts	0x2185, r1
		}
	}
	return (tg.status);
    5842:	80 91 87 21 	lds	r24, 0x2187
			return;
		}
	}

	// low priority tasks
	if ((tg.status = _tg_read_next_line()) == TG_EAGAIN) {	// input line
    5846:	82 30       	cpi	r24, 0x02	; 2
    5848:	11 f0       	breq	.+4      	; 0x584e <tg_controller+0x94>
		return;
	}
	_tg_prompt();		// Send a prompt - but only if controller is ready for input
    584a:	0e 94 2b 2b 	call	0x5656	; 0x5656 <_tg_prompt>
    584e:	08 95       	ret

00005850 <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    5850:	08 95       	ret

00005852 <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    5852:	80 e0       	ldi	r24, 0x00	; 0
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	08 95       	ret

00005858 <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    5858:	10 92 a3 22 	sts	0x22A3, r1
	mv.move_buffer_tail = 0;
    585c:	10 92 a4 22 	sts	0x22A4, r1
}
    5860:	08 95       	ret

00005862 <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    5862:	90 91 a3 22 	lds	r25, 0x22A3
    5866:	80 91 a4 22 	lds	r24, 0x22A4
    586a:	98 17       	cp	r25, r24
    586c:	19 f4       	brne	.+6      	; 0x5874 <mv_dequeue_move_buffer+0x12>
    586e:	20 e0       	ldi	r18, 0x00	; 0
    5870:	30 e0       	ldi	r19, 0x00	; 0
    5872:	17 c0       	rjmp	.+46     	; 0x58a2 <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    5874:	90 91 a4 22 	lds	r25, 0x22A4
    5878:	8e e1       	ldi	r24, 0x1E	; 30
    587a:	98 9f       	mul	r25, r24
    587c:	90 01       	movw	r18, r0
    587e:	11 24       	eor	r1, r1
    5880:	29 55       	subi	r18, 0x59	; 89
    5882:	3d 4d       	sbci	r19, 0xDD	; 221
    5884:	20 93 a5 22 	sts	0x22A5, r18
    5888:	30 93 a6 22 	sts	0x22A6, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    588c:	80 91 a4 22 	lds	r24, 0x22A4
    5890:	8f 5f       	subi	r24, 0xFF	; 255
    5892:	80 93 a4 22 	sts	0x22A4, r24
    5896:	80 91 a4 22 	lds	r24, 0x22A4
    589a:	83 30       	cpi	r24, 0x03	; 3
    589c:	10 f0       	brcs	.+4      	; 0x58a2 <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    589e:	10 92 a4 22 	sts	0x22A4, r1
	}
	return (mv.p); 
}
    58a2:	c9 01       	movw	r24, r18
    58a4:	08 95       	ret

000058a6 <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    58a6:	90 91 a3 22 	lds	r25, 0x22A3
    58aa:	9f 5f       	subi	r25, 0xFF	; 255
    58ac:	93 30       	cpi	r25, 0x03	; 3
    58ae:	08 f0       	brcs	.+2      	; 0x58b2 <mv_test_move_buffer_full+0xc>
    58b0:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    58b2:	80 91 a4 22 	lds	r24, 0x22A4
    58b6:	20 e0       	ldi	r18, 0x00	; 0
    58b8:	89 17       	cp	r24, r25
    58ba:	09 f4       	brne	.+2      	; 0x58be <mv_test_move_buffer_full+0x18>
    58bc:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    58be:	82 2f       	mov	r24, r18
    58c0:	08 95       	ret

000058c2 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    58c2:	0b c0       	rjmp	.+22     	; 0x58da <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    58c4:	80 91 48 00 	lds	r24, 0x0048
    58c8:	81 60       	ori	r24, 0x01	; 1
    58ca:	80 93 48 00 	sts	0x0048, r24
    58ce:	88 95       	sleep
    58d0:	80 91 48 00 	lds	r24, 0x0048
    58d4:	8e 7f       	andi	r24, 0xFE	; 254
    58d6:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    58da:	90 91 a4 22 	lds	r25, 0x22A4
    58de:	80 91 a3 22 	lds	r24, 0x22A3
    58e2:	98 17       	cp	r25, r24
    58e4:	79 f7       	brne	.-34     	; 0x58c4 <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    58e6:	08 95       	ret

000058e8 <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    58e8:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    58ea:	80 91 a3 22 	lds	r24, 0x22A3
    58ee:	80 93 a4 22 	sts	0x22A4, r24
	mv.p = NULL;
    58f2:	10 92 a5 22 	sts	0x22A5, r1
    58f6:	10 92 a6 22 	sts	0x22A6, r1
	sei();
    58fa:	78 94       	sei
}
    58fc:	08 95       	ret

000058fe <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    58fe:	2f 92       	push	r2
    5900:	3f 92       	push	r3
    5902:	4f 92       	push	r4
    5904:	5f 92       	push	r5
    5906:	6f 92       	push	r6
    5908:	7f 92       	push	r7
    590a:	8f 92       	push	r8
    590c:	9f 92       	push	r9
    590e:	af 92       	push	r10
    5910:	bf 92       	push	r11
    5912:	cf 92       	push	r12
    5914:	df 92       	push	r13
    5916:	ef 92       	push	r14
    5918:	ff 92       	push	r15
    591a:	0f 93       	push	r16
    591c:	1f 93       	push	r17
    591e:	df 93       	push	r29
    5920:	cf 93       	push	r28
    5922:	cd b7       	in	r28, 0x3d	; 61
    5924:	de b7       	in	r29, 0x3e	; 62
    5926:	2b 97       	sbiw	r28, 0x0b	; 11
    5928:	cd bf       	out	0x3d, r28	; 61
    592a:	de bf       	out	0x3e, r29	; 62
    592c:	1b 01       	movw	r2, r22
    592e:	2c 01       	movw	r4, r24
    5930:	2a 83       	std	Y+2, r18	; 0x02
    5932:	3b 83       	std	Y+3, r19	; 0x03
    5934:	4c 83       	std	Y+4, r20	; 0x04
    5936:	5d 83       	std	Y+5, r21	; 0x05
    5938:	ee 82       	std	Y+6, r14	; 0x06
    593a:	ff 82       	std	Y+7, r15	; 0x07
    593c:	08 87       	std	Y+8, r16	; 0x08
    593e:	19 87       	std	Y+9, r17	; 0x09
	uint8_t next_buffer_head;
	uint8_t i;

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    5940:	80 91 a3 22 	lds	r24, 0x22A3
    5944:	8f 5f       	subi	r24, 0xFF	; 255
    5946:	89 83       	std	Y+1, r24	; 0x01
    5948:	83 30       	cpi	r24, 0x03	; 3
    594a:	08 f0       	brcs	.+2      	; 0x594e <mv_queue_move_buffer+0x50>
    594c:	19 82       	std	Y+1, r1	; 0x01
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    594e:	80 91 a4 22 	lds	r24, 0x22A4
    5952:	99 81       	ldd	r25, Y+1	; 0x01
    5954:	89 17       	cp	r24, r25
    5956:	11 f4       	brne	.+4      	; 0x595c <mv_queue_move_buffer+0x5e>
    5958:	8a e0       	ldi	r24, 0x0A	; 10
    595a:	20 c2       	rjmp	.+1088   	; 0x5d9c <mv_queue_move_buffer+0x49e>
		return (TG_BUFFER_FULL_NON_FATAL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    595c:	e0 91 a3 22 	lds	r30, 0x22A3
    5960:	8e e1       	ldi	r24, 0x1E	; 30
    5962:	e8 9f       	mul	r30, r24
    5964:	f0 01       	movw	r30, r0
    5966:	11 24       	eor	r1, r1
    5968:	e9 55       	subi	r30, 0x59	; 89
    596a:	fd 4d       	sbci	r31, 0xDD	; 221
    596c:	e0 93 a5 22 	sts	0x22A5, r30
    5970:	f0 93 a6 22 	sts	0x22A6, r31
	memset(mv.p, 0, sizeof(struct mvMove));
    5974:	df 01       	movw	r26, r30
    5976:	1d 92       	st	X+, r1
    5978:	8a 95       	dec	r24
    597a:	e9 f7       	brne	.-6      	; 0x5976 <mv_queue_move_buffer+0x78>
	mv.p->a[X].steps = steps_x;
    597c:	80 90 a5 22 	lds	r8, 0x22A5
    5980:	90 90 a6 22 	lds	r9, 0x22A6
    5984:	f4 01       	movw	r30, r8
    5986:	20 82       	st	Z, r2
    5988:	31 82       	std	Z+1, r3	; 0x01
    598a:	42 82       	std	Z+2, r4	; 0x02
    598c:	53 82       	std	Z+3, r5	; 0x03
	mv.p->a[Y].steps = steps_y;
    598e:	8a 81       	ldd	r24, Y+2	; 0x02
    5990:	9b 81       	ldd	r25, Y+3	; 0x03
    5992:	ac 81       	ldd	r26, Y+4	; 0x04
    5994:	bd 81       	ldd	r27, Y+5	; 0x05
    5996:	82 87       	std	Z+10, r24	; 0x0a
    5998:	93 87       	std	Z+11, r25	; 0x0b
    599a:	a4 87       	std	Z+12, r26	; 0x0c
    599c:	b5 87       	std	Z+13, r27	; 0x0d
	mv.p->a[Z].steps = steps_z;
    599e:	8e 81       	ldd	r24, Y+6	; 0x06
    59a0:	9f 81       	ldd	r25, Y+7	; 0x07
    59a2:	a8 85       	ldd	r26, Y+8	; 0x08
    59a4:	b9 85       	ldd	r27, Y+9	; 0x09
    59a6:	84 8b       	std	Z+20, r24	; 0x14
    59a8:	95 8b       	std	Z+21, r25	; 0x15
    59aa:	a6 8b       	std	Z+22, r26	; 0x16
    59ac:	b7 8b       	std	Z+23, r27	; 0x17
	mv.microseconds = (uint64_t)microseconds;			// cast to larger base
    59ae:	a0 92 9b 22 	sts	0x229B, r10
    59b2:	b0 92 9c 22 	sts	0x229C, r11
    59b6:	c0 92 9d 22 	sts	0x229D, r12
    59ba:	d0 92 9e 22 	sts	0x229E, r13
    59be:	10 92 9f 22 	sts	0x229F, r1
    59c2:	10 92 a0 22 	sts	0x22A0, r1
    59c6:	10 92 a1 22 	sts	0x22A1, r1
    59ca:	10 92 a2 22 	sts	0x22A2, r1
	mv.ticks = mv.microseconds * TICKS_PER_MICROSECOND;
    59ce:	95 01       	movw	r18, r10
    59d0:	a6 01       	movw	r20, r12
    59d2:	60 e0       	ldi	r22, 0x00	; 0
    59d4:	70 e0       	ldi	r23, 0x00	; 0
    59d6:	80 e0       	ldi	r24, 0x00	; 0
    59d8:	90 e0       	ldi	r25, 0x00	; 0
    59da:	05 e0       	ldi	r16, 0x05	; 5
    59dc:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <__ashldi3>
    59e0:	fc 01       	movw	r30, r24
    59e2:	9b e8       	ldi	r25, 0x8B	; 139
    59e4:	69 2e       	mov	r6, r25
    59e6:	92 e2       	ldi	r25, 0x22	; 34
    59e8:	79 2e       	mov	r7, r25
    59ea:	20 93 8b 22 	sts	0x228B, r18
    59ee:	d3 01       	movw	r26, r6
    59f0:	11 96       	adiw	r26, 0x01	; 1
    59f2:	3c 93       	st	X, r19
    59f4:	11 97       	sbiw	r26, 0x01	; 1
    59f6:	12 96       	adiw	r26, 0x02	; 2
    59f8:	4c 93       	st	X, r20
    59fa:	12 97       	sbiw	r26, 0x02	; 2
    59fc:	13 96       	adiw	r26, 0x03	; 3
    59fe:	5c 93       	st	X, r21
    5a00:	13 97       	sbiw	r26, 0x03	; 3
    5a02:	14 96       	adiw	r26, 0x04	; 4
    5a04:	6c 93       	st	X, r22
    5a06:	14 97       	sbiw	r26, 0x04	; 4
    5a08:	15 96       	adiw	r26, 0x05	; 5
    5a0a:	7c 93       	st	X, r23
    5a0c:	15 97       	sbiw	r26, 0x05	; 5
    5a0e:	16 96       	adiw	r26, 0x06	; 6
    5a10:	ec 93       	st	X, r30
    5a12:	16 97       	sbiw	r26, 0x06	; 6
    5a14:	17 96       	adiw	r26, 0x07	; 7
    5a16:	fc 93       	st	X, r31

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    5a18:	21 14       	cp	r2, r1
    5a1a:	31 04       	cpc	r3, r1
    5a1c:	41 04       	cpc	r4, r1
    5a1e:	51 04       	cpc	r5, r1
    5a20:	09 f0       	breq	.+2      	; 0x5a24 <mv_queue_move_buffer+0x126>
    5a22:	73 c0       	rjmp	.+230    	; 0x5b0a <mv_queue_move_buffer+0x20c>
    5a24:	8a 81       	ldd	r24, Y+2	; 0x02
    5a26:	9b 81       	ldd	r25, Y+3	; 0x03
    5a28:	ac 81       	ldd	r26, Y+4	; 0x04
    5a2a:	bd 81       	ldd	r27, Y+5	; 0x05
    5a2c:	00 97       	sbiw	r24, 0x00	; 0
    5a2e:	a1 05       	cpc	r26, r1
    5a30:	b1 05       	cpc	r27, r1
    5a32:	09 f0       	breq	.+2      	; 0x5a36 <mv_queue_move_buffer+0x138>
    5a34:	6a c0       	rjmp	.+212    	; 0x5b0a <mv_queue_move_buffer+0x20c>
    5a36:	8e 81       	ldd	r24, Y+6	; 0x06
    5a38:	9f 81       	ldd	r25, Y+7	; 0x07
    5a3a:	a8 85       	ldd	r26, Y+8	; 0x08
    5a3c:	b9 85       	ldd	r27, Y+9	; 0x09
    5a3e:	00 97       	sbiw	r24, 0x00	; 0
    5a40:	a1 05       	cpc	r26, r1
    5a42:	b1 05       	cpc	r27, r1
    5a44:	09 f0       	breq	.+2      	; 0x5a48 <mv_queue_move_buffer+0x14a>
    5a46:	61 c0       	rjmp	.+194    	; 0x5b0a <mv_queue_move_buffer+0x20c>
		mv.p->a[X].steps = (((mv.ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    5a48:	81 e0       	ldi	r24, 0x01	; 1
    5a4a:	e8 2e       	mov	r14, r24
    5a4c:	f1 2c       	mov	r15, r1
    5a4e:	01 2d       	mov	r16, r1
    5a50:	11 2d       	mov	r17, r1
    5a52:	d4 01       	movw	r26, r8
    5a54:	ed 92       	st	X+, r14
    5a56:	fd 92       	st	X+, r15
    5a58:	0d 93       	st	X+, r16
    5a5a:	1c 93       	st	X, r17
    5a5c:	13 97       	sbiw	r26, 0x03	; 3
		mv.p->a[X].postscale = 1;
    5a5e:	81 e0       	ldi	r24, 0x01	; 1
    5a60:	90 e0       	ldi	r25, 0x00	; 0
    5a62:	16 96       	adiw	r26, 0x06	; 6
    5a64:	8d 93       	st	X+, r24
    5a66:	9c 93       	st	X, r25
    5a68:	17 97       	sbiw	r26, 0x07	; 7
		mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[X].steps); // expensive!
    5a6a:	cf 01       	movw	r24, r30
    5a6c:	aa 24       	eor	r10, r10
    5a6e:	a3 94       	inc	r10
    5a70:	bb 24       	eor	r11, r11
    5a72:	cc 24       	eor	r12, r12
    5a74:	dd 24       	eor	r13, r13
    5a76:	ee 24       	eor	r14, r14
    5a78:	ff 24       	eor	r15, r15
    5a7a:	00 e0       	ldi	r16, 0x00	; 0
    5a7c:	10 e0       	ldi	r17, 0x00	; 0
    5a7e:	0e 94 a0 36 	call	0x6d40	; 0x6d40 <__udivdi3>
    5a82:	f3 01       	movw	r30, r6
    5a84:	38 96       	adiw	r30, 0x08	; 8
    5a86:	20 93 93 22 	sts	0x2293, r18
    5a8a:	31 83       	std	Z+1, r19	; 0x01
    5a8c:	42 83       	std	Z+2, r20	; 0x02
    5a8e:	53 83       	std	Z+3, r21	; 0x03
    5a90:	64 83       	std	Z+4, r22	; 0x04
    5a92:	75 83       	std	Z+5, r23	; 0x05
    5a94:	86 83       	std	Z+6, r24	; 0x06
    5a96:	97 83       	std	Z+7, r25	; 0x07
		while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    5a98:	7f 01       	movw	r14, r30
    5a9a:	19 c0       	rjmp	.+50     	; 0x5ace <mv_queue_move_buffer+0x1d0>
			mv.ticks_per_step >>= 1;
    5a9c:	8e 2f       	mov	r24, r30
    5a9e:	01 e0       	ldi	r16, 0x01	; 1
    5aa0:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <__lshrdi3>
    5aa4:	20 93 93 22 	sts	0x2293, r18
    5aa8:	f7 01       	movw	r30, r14
    5aaa:	31 83       	std	Z+1, r19	; 0x01
    5aac:	42 83       	std	Z+2, r20	; 0x02
    5aae:	53 83       	std	Z+3, r21	; 0x03
    5ab0:	64 83       	std	Z+4, r22	; 0x04
    5ab2:	75 83       	std	Z+5, r23	; 0x05
    5ab4:	86 83       	std	Z+6, r24	; 0x06
    5ab6:	97 83       	std	Z+7, r25	; 0x07
			mv.p->a[X].postscale <<= 1;
    5ab8:	d4 01       	movw	r26, r8
    5aba:	16 96       	adiw	r26, 0x06	; 6
    5abc:	8d 91       	ld	r24, X+
    5abe:	9c 91       	ld	r25, X
    5ac0:	17 97       	sbiw	r26, 0x07	; 7
    5ac2:	88 0f       	add	r24, r24
    5ac4:	99 1f       	adc	r25, r25
    5ac6:	16 96       	adiw	r26, 0x06	; 6
    5ac8:	8d 93       	st	X+, r24
    5aca:	9c 93       	st	X, r25
    5acc:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((mv.ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[X].steps); // expensive!
		while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    5ace:	20 91 93 22 	lds	r18, 0x2293
    5ad2:	30 91 94 22 	lds	r19, 0x2294
    5ad6:	40 91 95 22 	lds	r20, 0x2295
    5ada:	50 91 96 22 	lds	r21, 0x2296
    5ade:	60 91 97 22 	lds	r22, 0x2297
    5ae2:	70 91 98 22 	lds	r23, 0x2298
    5ae6:	e0 91 99 22 	lds	r30, 0x2299
    5aea:	90 91 9a 22 	lds	r25, 0x229A
    5aee:	84 2f       	mov	r24, r20
    5af0:	85 2b       	or	r24, r21
    5af2:	86 2b       	or	r24, r22
    5af4:	87 2b       	or	r24, r23
    5af6:	8e 2b       	or	r24, r30
    5af8:	89 2b       	or	r24, r25
    5afa:	81 f6       	brne	.-96     	; 0x5a9c <mv_queue_move_buffer+0x19e>
			mv.ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
    5afc:	c9 01       	movw	r24, r18
    5afe:	f4 01       	movw	r30, r8
    5b00:	84 83       	std	Z+4, r24	; 0x04
    5b02:	95 83       	std	Z+5, r25	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    5b04:	81 e0       	ldi	r24, 0x01	; 1
    5b06:	81 87       	std	Z+9, r24	; 0x09
    5b08:	43 c1       	rjmp	.+646    	; 0x5d90 <mv_queue_move_buffer+0x492>
	mv.p->a[Z].steps = steps_z;
	mv.microseconds = (uint64_t)microseconds;			// cast to larger base
	mv.ticks = mv.microseconds * TICKS_PER_MICROSECOND;

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    5b0a:	44 24       	eor	r4, r4
    5b0c:	55 24       	eor	r5, r5
				mv.p->a[i].steps = labs(mv.p->a[i].steps);

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
    5b0e:	13 e9       	ldi	r17, 0x93	; 147
    5b10:	21 2e       	mov	r2, r17
    5b12:	12 e2       	ldi	r17, 0x22	; 34
    5b14:	31 2e       	mov	r3, r17
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    5b16:	40 91 a5 22 	lds	r20, 0x22A5
    5b1a:	50 91 a6 22 	lds	r21, 0x22A6
    5b1e:	4a 86       	std	Y+10, r4	; 0x0a
    5b20:	5b 86       	std	Y+11, r5	; 0x0b
    5b22:	c2 01       	movw	r24, r4
    5b24:	f2 01       	movw	r30, r4
    5b26:	b3 e0       	ldi	r27, 0x03	; 3
    5b28:	ee 0f       	add	r30, r30
    5b2a:	ff 1f       	adc	r31, r31
    5b2c:	ba 95       	dec	r27
    5b2e:	e1 f7       	brne	.-8      	; 0x5b28 <mv_queue_move_buffer+0x22a>
    5b30:	88 0f       	add	r24, r24
    5b32:	99 1f       	adc	r25, r25
    5b34:	e8 0f       	add	r30, r24
    5b36:	f9 1f       	adc	r31, r25
    5b38:	e4 0f       	add	r30, r20
    5b3a:	f5 1f       	adc	r31, r21
    5b3c:	80 81       	ld	r24, Z
    5b3e:	91 81       	ldd	r25, Z+1	; 0x01
    5b40:	a2 81       	ldd	r26, Z+2	; 0x02
    5b42:	b3 81       	ldd	r27, Z+3	; 0x03
    5b44:	00 97       	sbiw	r24, 0x00	; 0
    5b46:	a1 05       	cpc	r26, r1
    5b48:	b1 05       	cpc	r27, r1
    5b4a:	09 f4       	brne	.+2      	; 0x5b4e <mv_queue_move_buffer+0x250>
    5b4c:	19 c1       	rjmp	.+562    	; 0x5d80 <mv_queue_move_buffer+0x482>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    5b4e:	b7 ff       	sbrs	r27, 7
    5b50:	12 c0       	rjmp	.+36     	; 0x5b76 <mv_queue_move_buffer+0x278>
    5b52:	c2 01       	movw	r24, r4
    5b54:	92 01       	movw	r18, r4
    5b56:	f3 e0       	ldi	r31, 0x03	; 3
    5b58:	22 0f       	add	r18, r18
    5b5a:	33 1f       	adc	r19, r19
    5b5c:	fa 95       	dec	r31
    5b5e:	e1 f7       	brne	.-8      	; 0x5b58 <mv_queue_move_buffer+0x25a>
    5b60:	88 0f       	add	r24, r24
    5b62:	99 1f       	adc	r25, r25
    5b64:	28 0f       	add	r18, r24
    5b66:	39 1f       	adc	r19, r25
    5b68:	42 0f       	add	r20, r18
    5b6a:	53 1f       	adc	r21, r19
    5b6c:	81 e0       	ldi	r24, 0x01	; 1
    5b6e:	da 01       	movw	r26, r20
    5b70:	18 96       	adiw	r26, 0x08	; 8
    5b72:	8c 93       	st	X, r24
    5b74:	0f c0       	rjmp	.+30     	; 0x5b94 <mv_queue_move_buffer+0x296>
    5b76:	c2 01       	movw	r24, r4
    5b78:	92 01       	movw	r18, r4
    5b7a:	73 e0       	ldi	r23, 0x03	; 3
    5b7c:	22 0f       	add	r18, r18
    5b7e:	33 1f       	adc	r19, r19
    5b80:	7a 95       	dec	r23
    5b82:	e1 f7       	brne	.-8      	; 0x5b7c <mv_queue_move_buffer+0x27e>
    5b84:	88 0f       	add	r24, r24
    5b86:	99 1f       	adc	r25, r25
    5b88:	28 0f       	add	r18, r24
    5b8a:	39 1f       	adc	r19, r25
    5b8c:	42 0f       	add	r20, r18
    5b8e:	53 1f       	adc	r21, r19
    5b90:	fa 01       	movw	r30, r20
    5b92:	10 86       	std	Z+8, r1	; 0x08
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    5b94:	e0 91 a5 22 	lds	r30, 0x22A5
    5b98:	f0 91 a6 22 	lds	r31, 0x22A6
    5b9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5ba0:	ac 01       	movw	r20, r24
    5ba2:	03 e0       	ldi	r16, 0x03	; 3
    5ba4:	44 0f       	add	r20, r20
    5ba6:	55 1f       	adc	r21, r21
    5ba8:	0a 95       	dec	r16
    5baa:	e1 f7       	brne	.-8      	; 0x5ba4 <mv_queue_move_buffer+0x2a6>
    5bac:	88 0f       	add	r24, r24
    5bae:	99 1f       	adc	r25, r25
    5bb0:	48 0f       	add	r20, r24
    5bb2:	59 1f       	adc	r21, r25
    5bb4:	4e 0f       	add	r20, r30
    5bb6:	5f 1f       	adc	r21, r31
    5bb8:	8a 85       	ldd	r24, Y+10	; 0x0a
    5bba:	9b 85       	ldd	r25, Y+11	; 0x0b
    5bbc:	9c 01       	movw	r18, r24
    5bbe:	b3 e0       	ldi	r27, 0x03	; 3
    5bc0:	22 0f       	add	r18, r18
    5bc2:	33 1f       	adc	r19, r19
    5bc4:	ba 95       	dec	r27
    5bc6:	e1 f7       	brne	.-8      	; 0x5bc0 <mv_queue_move_buffer+0x2c2>
    5bc8:	88 0f       	add	r24, r24
    5bca:	99 1f       	adc	r25, r25
    5bcc:	28 0f       	add	r18, r24
    5bce:	39 1f       	adc	r19, r25
    5bd0:	e2 0f       	add	r30, r18
    5bd2:	f3 1f       	adc	r31, r19
    5bd4:	80 81       	ld	r24, Z
    5bd6:	91 81       	ldd	r25, Z+1	; 0x01
    5bd8:	a2 81       	ldd	r26, Z+2	; 0x02
    5bda:	b3 81       	ldd	r27, Z+3	; 0x03
    5bdc:	b7 ff       	sbrs	r27, 7
    5bde:	07 c0       	rjmp	.+14     	; 0x5bee <mv_queue_move_buffer+0x2f0>
    5be0:	b0 95       	com	r27
    5be2:	a0 95       	com	r26
    5be4:	90 95       	com	r25
    5be6:	81 95       	neg	r24
    5be8:	9f 4f       	sbci	r25, 0xFF	; 255
    5bea:	af 4f       	sbci	r26, 0xFF	; 255
    5bec:	bf 4f       	sbci	r27, 0xFF	; 255
    5bee:	fa 01       	movw	r30, r20
    5bf0:	80 83       	st	Z, r24
    5bf2:	91 83       	std	Z+1, r25	; 0x01
    5bf4:	a2 83       	std	Z+2, r26	; 0x02
    5bf6:	b3 83       	std	Z+3, r27	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    5bf8:	a0 91 a5 22 	lds	r26, 0x22A5
    5bfc:	b0 91 a6 22 	lds	r27, 0x22A6
    5c00:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c02:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c04:	fc 01       	movw	r30, r24
    5c06:	73 e0       	ldi	r23, 0x03	; 3
    5c08:	ee 0f       	add	r30, r30
    5c0a:	ff 1f       	adc	r31, r31
    5c0c:	7a 95       	dec	r23
    5c0e:	e1 f7       	brne	.-8      	; 0x5c08 <mv_queue_move_buffer+0x30a>
    5c10:	88 0f       	add	r24, r24
    5c12:	99 1f       	adc	r25, r25
    5c14:	e8 0f       	add	r30, r24
    5c16:	f9 1f       	adc	r31, r25
    5c18:	ea 0f       	add	r30, r26
    5c1a:	fb 1f       	adc	r31, r27
    5c1c:	81 e0       	ldi	r24, 0x01	; 1
    5c1e:	90 e0       	ldi	r25, 0x00	; 0
    5c20:	86 83       	std	Z+6, r24	; 0x06
    5c22:	97 83       	std	Z+7, r25	; 0x07
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
    5c24:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c26:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c28:	9c 01       	movw	r18, r24
    5c2a:	53 e0       	ldi	r21, 0x03	; 3
    5c2c:	22 0f       	add	r18, r18
    5c2e:	33 1f       	adc	r19, r19
    5c30:	5a 95       	dec	r21
    5c32:	e1 f7       	brne	.-8      	; 0x5c2c <mv_queue_move_buffer+0x32e>
    5c34:	88 0f       	add	r24, r24
    5c36:	99 1f       	adc	r25, r25
    5c38:	28 0f       	add	r18, r24
    5c3a:	39 1f       	adc	r19, r25
    5c3c:	a2 0f       	add	r26, r18
    5c3e:	b3 1f       	adc	r27, r19
    5c40:	ed 90       	ld	r14, X+
    5c42:	fd 90       	ld	r15, X+
    5c44:	0d 91       	ld	r16, X+
    5c46:	1c 91       	ld	r17, X
    5c48:	37 01       	movw	r6, r14
    5c4a:	48 01       	movw	r8, r16
    5c4c:	99 0c       	add	r9, r9
    5c4e:	66 08       	sbc	r6, r6
    5c50:	76 2c       	mov	r7, r6
    5c52:	43 01       	movw	r8, r6
    5c54:	20 91 8b 22 	lds	r18, 0x228B
    5c58:	30 91 8c 22 	lds	r19, 0x228C
    5c5c:	40 91 8d 22 	lds	r20, 0x228D
    5c60:	50 91 8e 22 	lds	r21, 0x228E
    5c64:	60 91 8f 22 	lds	r22, 0x228F
    5c68:	70 91 90 22 	lds	r23, 0x2290
    5c6c:	80 91 91 22 	lds	r24, 0x2291
    5c70:	90 91 92 22 	lds	r25, 0x2292
    5c74:	57 01       	movw	r10, r14
    5c76:	68 01       	movw	r12, r16
    5c78:	e6 2c       	mov	r14, r6
    5c7a:	f6 2c       	mov	r15, r6
    5c7c:	06 2d       	mov	r16, r6
    5c7e:	16 2d       	mov	r17, r6
    5c80:	0e 94 a0 36 	call	0x6d40	; 0x6d40 <__udivdi3>
    5c84:	20 93 93 22 	sts	0x2293, r18
    5c88:	d1 01       	movw	r26, r2
    5c8a:	11 96       	adiw	r26, 0x01	; 1
    5c8c:	3c 93       	st	X, r19
    5c8e:	11 97       	sbiw	r26, 0x01	; 1
    5c90:	12 96       	adiw	r26, 0x02	; 2
    5c92:	4c 93       	st	X, r20
    5c94:	12 97       	sbiw	r26, 0x02	; 2
    5c96:	13 96       	adiw	r26, 0x03	; 3
    5c98:	5c 93       	st	X, r21
    5c9a:	13 97       	sbiw	r26, 0x03	; 3
    5c9c:	14 96       	adiw	r26, 0x04	; 4
    5c9e:	6c 93       	st	X, r22
    5ca0:	14 97       	sbiw	r26, 0x04	; 4
    5ca2:	15 96       	adiw	r26, 0x05	; 5
    5ca4:	7c 93       	st	X, r23
    5ca6:	15 97       	sbiw	r26, 0x05	; 5
    5ca8:	16 96       	adiw	r26, 0x06	; 6
    5caa:	8c 93       	st	X, r24
    5cac:	16 97       	sbiw	r26, 0x06	; 6
    5cae:	17 96       	adiw	r26, 0x07	; 7
    5cb0:	9c 93       	st	X, r25
    5cb2:	38 c0       	rjmp	.+112    	; 0x5d24 <mv_queue_move_buffer+0x426>
				while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
					mv.ticks_per_step >>= 1;
    5cb4:	9d 01       	movw	r18, r26
    5cb6:	8e 2f       	mov	r24, r30
    5cb8:	01 e0       	ldi	r16, 0x01	; 1
    5cba:	0e 94 ae 35 	call	0x6b5c	; 0x6b5c <__lshrdi3>
    5cbe:	20 93 93 22 	sts	0x2293, r18
    5cc2:	f1 01       	movw	r30, r2
    5cc4:	31 83       	std	Z+1, r19	; 0x01
    5cc6:	42 83       	std	Z+2, r20	; 0x02
    5cc8:	53 83       	std	Z+3, r21	; 0x03
    5cca:	64 83       	std	Z+4, r22	; 0x04
    5ccc:	75 83       	std	Z+5, r23	; 0x05
    5cce:	86 83       	std	Z+6, r24	; 0x06
    5cd0:	97 83       	std	Z+7, r25	; 0x07
					mv.p->a[i].postscale <<= 1;
    5cd2:	40 91 a5 22 	lds	r20, 0x22A5
    5cd6:	50 91 a6 22 	lds	r21, 0x22A6
    5cda:	8a 85       	ldd	r24, Y+10	; 0x0a
    5cdc:	9b 85       	ldd	r25, Y+11	; 0x0b
    5cde:	fc 01       	movw	r30, r24
    5ce0:	23 e0       	ldi	r18, 0x03	; 3
    5ce2:	ee 0f       	add	r30, r30
    5ce4:	ff 1f       	adc	r31, r31
    5ce6:	2a 95       	dec	r18
    5ce8:	e1 f7       	brne	.-8      	; 0x5ce2 <mv_queue_move_buffer+0x3e4>
    5cea:	88 0f       	add	r24, r24
    5cec:	99 1f       	adc	r25, r25
    5cee:	e8 0f       	add	r30, r24
    5cf0:	f9 1f       	adc	r31, r25
    5cf2:	e4 0f       	add	r30, r20
    5cf4:	f5 1f       	adc	r31, r21
    5cf6:	8a 85       	ldd	r24, Y+10	; 0x0a
    5cf8:	9b 85       	ldd	r25, Y+11	; 0x0b
    5cfa:	9c 01       	movw	r18, r24
    5cfc:	13 e0       	ldi	r17, 0x03	; 3
    5cfe:	22 0f       	add	r18, r18
    5d00:	33 1f       	adc	r19, r19
    5d02:	1a 95       	dec	r17
    5d04:	e1 f7       	brne	.-8      	; 0x5cfe <mv_queue_move_buffer+0x400>
    5d06:	88 0f       	add	r24, r24
    5d08:	99 1f       	adc	r25, r25
    5d0a:	28 0f       	add	r18, r24
    5d0c:	39 1f       	adc	r19, r25
    5d0e:	42 0f       	add	r20, r18
    5d10:	53 1f       	adc	r21, r19
    5d12:	da 01       	movw	r26, r20
    5d14:	16 96       	adiw	r26, 0x06	; 6
    5d16:	8d 91       	ld	r24, X+
    5d18:	9c 91       	ld	r25, X
    5d1a:	17 97       	sbiw	r26, 0x07	; 7
    5d1c:	88 0f       	add	r24, r24
    5d1e:	99 1f       	adc	r25, r25
    5d20:	86 83       	std	Z+6, r24	; 0x06
    5d22:	97 83       	std	Z+7, r25	; 0x07

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
				while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    5d24:	a0 91 93 22 	lds	r26, 0x2293
    5d28:	b0 91 94 22 	lds	r27, 0x2294
    5d2c:	40 91 95 22 	lds	r20, 0x2295
    5d30:	50 91 96 22 	lds	r21, 0x2296
    5d34:	60 91 97 22 	lds	r22, 0x2297
    5d38:	70 91 98 22 	lds	r23, 0x2298
    5d3c:	e0 91 99 22 	lds	r30, 0x2299
    5d40:	90 91 9a 22 	lds	r25, 0x229A
    5d44:	84 2f       	mov	r24, r20
    5d46:	85 2b       	or	r24, r21
    5d48:	86 2b       	or	r24, r22
    5d4a:	87 2b       	or	r24, r23
    5d4c:	8e 2b       	or	r24, r30
    5d4e:	89 2b       	or	r24, r25
    5d50:	09 f0       	breq	.+2      	; 0x5d54 <mv_queue_move_buffer+0x456>
    5d52:	b0 cf       	rjmp	.-160    	; 0x5cb4 <mv_queue_move_buffer+0x3b6>
					mv.ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
    5d54:	40 91 a5 22 	lds	r20, 0x22A5
    5d58:	50 91 a6 22 	lds	r21, 0x22A6
    5d5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d60:	9c 01       	movw	r18, r24
    5d62:	73 e0       	ldi	r23, 0x03	; 3
    5d64:	22 0f       	add	r18, r18
    5d66:	33 1f       	adc	r19, r19
    5d68:	7a 95       	dec	r23
    5d6a:	e1 f7       	brne	.-8      	; 0x5d64 <mv_queue_move_buffer+0x466>
    5d6c:	88 0f       	add	r24, r24
    5d6e:	99 1f       	adc	r25, r25
    5d70:	28 0f       	add	r18, r24
    5d72:	39 1f       	adc	r19, r25
    5d74:	42 0f       	add	r20, r18
    5d76:	53 1f       	adc	r21, r19
    5d78:	cd 01       	movw	r24, r26
    5d7a:	fa 01       	movw	r30, r20
    5d7c:	84 83       	std	Z+4, r24	; 0x04
    5d7e:	95 83       	std	Z+5, r25	; 0x05
    5d80:	08 94       	sec
    5d82:	41 1c       	adc	r4, r1
    5d84:	51 1c       	adc	r5, r1
		}
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    5d86:	f3 e0       	ldi	r31, 0x03	; 3
    5d88:	4f 16       	cp	r4, r31
    5d8a:	51 04       	cpc	r5, r1
    5d8c:	09 f0       	breq	.+2      	; 0x5d90 <mv_queue_move_buffer+0x492>
    5d8e:	c3 ce       	rjmp	.-634    	; 0x5b16 <mv_queue_move_buffer+0x218>
				}
				mv.p->a[i].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    5d90:	89 81       	ldd	r24, Y+1	; 0x01
    5d92:	80 93 a3 22 	sts	0x22A3, r24
	st_execute_move();
    5d96:	0e 94 b6 24 	call	0x496c	; 0x496c <st_execute_move>
    5d9a:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    5d9c:	2b 96       	adiw	r28, 0x0b	; 11
    5d9e:	cd bf       	out	0x3d, r28	; 61
    5da0:	de bf       	out	0x3e, r29	; 62
    5da2:	cf 91       	pop	r28
    5da4:	df 91       	pop	r29
    5da6:	1f 91       	pop	r17
    5da8:	0f 91       	pop	r16
    5daa:	ff 90       	pop	r15
    5dac:	ef 90       	pop	r14
    5dae:	df 90       	pop	r13
    5db0:	cf 90       	pop	r12
    5db2:	bf 90       	pop	r11
    5db4:	af 90       	pop	r10
    5db6:	9f 90       	pop	r9
    5db8:	8f 90       	pop	r8
    5dba:	7f 90       	pop	r7
    5dbc:	6f 90       	pop	r6
    5dbe:	5f 90       	pop	r5
    5dc0:	4f 90       	pop	r4
    5dc2:	3f 90       	pop	r3
    5dc4:	2f 90       	pop	r2
    5dc6:	08 95       	ret

00005dc8 <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    5dc8:	a2 e1       	ldi	r26, 0x12	; 18
    5dca:	b3 e2       	ldi	r27, 0x23	; 35
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5dcc:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5dce:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5dd0:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5dd2:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5dd4:	ed 91       	ld	r30, X+
    5dd6:	fc 91       	ld	r31, X
    5dd8:	11 97       	sbiw	r26, 0x01	; 1
    5dda:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5ddc:	ed 91       	ld	r30, X+
    5dde:	fc 91       	ld	r31, X
    5de0:	11 97       	sbiw	r26, 0x01	; 1
    5de2:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5de4:	ed 91       	ld	r30, X+
    5de6:	fc 91       	ld	r31, X
    5de8:	11 97       	sbiw	r26, 0x01	; 1
    5dea:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    5dec:	ed 91       	ld	r30, X+
    5dee:	fc 91       	ld	r31, X
    5df0:	11 97       	sbiw	r26, 0x01	; 1
    5df2:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    5df4:	ed 91       	ld	r30, X+
    5df6:	fc 91       	ld	r31, X
    5df8:	11 97       	sbiw	r26, 0x01	; 1
    5dfa:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    5dfc:	ed 91       	ld	r30, X+
    5dfe:	fc 91       	ld	r31, X
    5e00:	11 97       	sbiw	r26, 0x01	; 1
    5e02:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5e04:	ed 91       	ld	r30, X+
    5e06:	fc 91       	ld	r31, X
    5e08:	11 97       	sbiw	r26, 0x01	; 1
    5e0a:	31 87       	std	Z+9, r19	; 0x09
    5e0c:	50 96       	adiw	r26, 0x10	; 16
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    5e0e:	43 e2       	ldi	r20, 0x23	; 35
    5e10:	a2 35       	cpi	r26, 0x52	; 82
    5e12:	b4 07       	cpc	r27, r20
    5e14:	f9 f6       	brne	.-66     	; 0x5dd4 <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    5e16:	08 95       	ret

00005e18 <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    5e18:	1f 92       	push	r1
    5e1a:	0f 92       	push	r0
    5e1c:	0f b6       	in	r0, 0x3f	; 63
    5e1e:	0f 92       	push	r0
    5e20:	11 24       	eor	r1, r1
    5e22:	0f 90       	pop	r0
    5e24:	0f be       	out	0x3f, r0	; 63
    5e26:	0f 90       	pop	r0
    5e28:	1f 90       	pop	r1
    5e2a:	18 95       	reti

00005e2c <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    5e2c:	1f 92       	push	r1
    5e2e:	0f 92       	push	r0
    5e30:	0f b6       	in	r0, 0x3f	; 63
    5e32:	0f 92       	push	r0
    5e34:	11 24       	eor	r1, r1
    5e36:	0f 90       	pop	r0
    5e38:	0f be       	out	0x3f, r0	; 63
    5e3a:	0f 90       	pop	r0
    5e3c:	1f 90       	pop	r1
    5e3e:	18 95       	reti

00005e40 <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    5e40:	1f 92       	push	r1
    5e42:	0f 92       	push	r0
    5e44:	0f b6       	in	r0, 0x3f	; 63
    5e46:	0f 92       	push	r0
    5e48:	11 24       	eor	r1, r1
    5e4a:	0f 90       	pop	r0
    5e4c:	0f be       	out	0x3f, r0	; 63
    5e4e:	0f 90       	pop	r0
    5e50:	1f 90       	pop	r1
    5e52:	18 95       	reti

00005e54 <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    5e54:	1f 92       	push	r1
    5e56:	0f 92       	push	r0
    5e58:	0f b6       	in	r0, 0x3f	; 63
    5e5a:	0f 92       	push	r0
    5e5c:	11 24       	eor	r1, r1
    5e5e:	0f 90       	pop	r0
    5e60:	0f be       	out	0x3f, r0	; 63
    5e62:	0f 90       	pop	r0
    5e64:	1f 90       	pop	r1
    5e66:	18 95       	reti

00005e68 <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    5e68:	1f 92       	push	r1
    5e6a:	0f 92       	push	r0
    5e6c:	0f b6       	in	r0, 0x3f	; 63
    5e6e:	0f 92       	push	r0
    5e70:	11 24       	eor	r1, r1
    5e72:	0f 90       	pop	r0
    5e74:	0f be       	out	0x3f, r0	; 63
    5e76:	0f 90       	pop	r0
    5e78:	1f 90       	pop	r1
    5e7a:	18 95       	reti

00005e7c <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    5e7c:	1f 92       	push	r1
    5e7e:	0f 92       	push	r0
    5e80:	0f b6       	in	r0, 0x3f	; 63
    5e82:	0f 92       	push	r0
    5e84:	11 24       	eor	r1, r1
    5e86:	0f 90       	pop	r0
    5e88:	0f be       	out	0x3f, r0	; 63
    5e8a:	0f 90       	pop	r0
    5e8c:	1f 90       	pop	r1
    5e8e:	18 95       	reti

00005e90 <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    5e90:	1f 92       	push	r1
    5e92:	0f 92       	push	r0
    5e94:	0f b6       	in	r0, 0x3f	; 63
    5e96:	0f 92       	push	r0
    5e98:	11 24       	eor	r1, r1
    5e9a:	0f 90       	pop	r0
    5e9c:	0f be       	out	0x3f, r0	; 63
    5e9e:	0f 90       	pop	r0
    5ea0:	1f 90       	pop	r1
    5ea2:	18 95       	reti

00005ea4 <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    5ea4:	1f 92       	push	r1
    5ea6:	0f 92       	push	r0
    5ea8:	0f b6       	in	r0, 0x3f	; 63
    5eaa:	0f 92       	push	r0
    5eac:	11 24       	eor	r1, r1
    5eae:	0f 90       	pop	r0
    5eb0:	0f be       	out	0x3f, r0	; 63
    5eb2:	0f 90       	pop	r0
    5eb4:	1f 90       	pop	r1
    5eb6:	18 95       	reti

00005eb8 <signal_etx>:
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx() {			// ^c
{
	tg_reset_source();					// return control to standard device
    5eb8:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <tg_reset_source>
	mc_motion_stop();					// stop computing and generating motions
    5ebc:	0e 94 2f 1b 	call	0x365e	; 0x365e <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    5ec0:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <mv_flush>
	st_stop_steppers();					// stop the steppers
    5ec4:	0e 94 9b 24 	call	0x4936	; 0x4936 <st_stop_steppers>
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
*/
}
    5ec8:	08 95       	ret

00005eca <xio_set_baud_usart>:
	dx->port->OUTCLR = outclr;
	dx->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
    5eca:	cf 93       	push	r28
    5ecc:	df 93       	push	r29
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    5ece:	90 e0       	ldi	r25, 0x00	; 0
    5ed0:	27 e1       	ldi	r18, 0x17	; 23
    5ed2:	30 e0       	ldi	r19, 0x00	; 0
    5ed4:	82 9f       	mul	r24, r18
    5ed6:	d0 01       	movw	r26, r0
    5ed8:	83 9f       	mul	r24, r19
    5eda:	b0 0d       	add	r27, r0
    5edc:	92 9f       	mul	r25, r18
    5ede:	b0 0d       	add	r27, r0
    5ee0:	11 24       	eor	r1, r1
    5ee2:	ac 56       	subi	r26, 0x6C	; 108
    5ee4:	bb 4d       	sbci	r27, 0xDB	; 219
    5ee6:	51 96       	adiw	r26, 0x11	; 17
    5ee8:	ed 91       	ld	r30, X+
    5eea:	fc 91       	ld	r31, X
    5eec:	52 97       	sbiw	r26, 0x12	; 18
    5eee:	87 81       	ldd	r24, Z+7	; 0x07
    5ef0:	90 85       	ldd	r25, Z+8	; 0x08
    5ef2:	26 2f       	mov	r18, r22
    5ef4:	30 e0       	ldi	r19, 0x00	; 0
    5ef6:	f9 01       	movw	r30, r18
    5ef8:	eb 53       	subi	r30, 0x3B	; 59
    5efa:	f5 4e       	sbci	r31, 0xE5	; 229
    5efc:	e4 91       	lpm	r30, Z+
    5efe:	ec 01       	movw	r28, r24
    5f00:	ee 83       	std	Y+6, r30	; 0x06
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    5f02:	51 96       	adiw	r26, 0x11	; 17
    5f04:	ed 91       	ld	r30, X+
    5f06:	fc 91       	ld	r31, X
    5f08:	52 97       	sbiw	r26, 0x12	; 18
    5f0a:	a7 81       	ldd	r26, Z+7	; 0x07
    5f0c:	b0 85       	ldd	r27, Z+8	; 0x08
    5f0e:	20 53       	subi	r18, 0x30	; 48
    5f10:	35 4e       	sbci	r19, 0xE5	; 229
    5f12:	f9 01       	movw	r30, r18
    5f14:	64 91       	lpm	r22, Z+
    5f16:	17 96       	adiw	r26, 0x07	; 7
    5f18:	6c 93       	st	X, r22
}
    5f1a:	df 91       	pop	r29
    5f1c:	cf 91       	pop	r28
    5f1e:	08 95       	ret

00005f20 <xio_putc_usart>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_usart(const uint8_t dev, const char c, FILE *stream)
{
    5f20:	cf 93       	push	r28
    5f22:	df 93       	push	r29
    5f24:	78 2f       	mov	r23, r24
    5f26:	da 01       	movw	r26, r20
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
    5f28:	87 e1       	ldi	r24, 0x17	; 23
    5f2a:	78 9f       	mul	r23, r24
    5f2c:	a0 01       	movw	r20, r0
    5f2e:	11 24       	eor	r1, r1
    5f30:	4c 56       	subi	r20, 0x6C	; 108
    5f32:	5b 4d       	sbci	r21, 0xDB	; 219
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    5f34:	27 2f       	mov	r18, r23
    5f36:	30 e0       	ldi	r19, 0x00	; 0
    5f38:	87 e1       	ldi	r24, 0x17	; 23
    5f3a:	90 e0       	ldi	r25, 0x00	; 0
    5f3c:	28 9f       	mul	r18, r24
    5f3e:	f0 01       	movw	r30, r0
    5f40:	29 9f       	mul	r18, r25
    5f42:	f0 0d       	add	r31, r0
    5f44:	38 9f       	mul	r19, r24
    5f46:	f0 0d       	add	r31, r0
    5f48:	11 24       	eor	r1, r1
    5f4a:	ec 56       	subi	r30, 0x6C	; 108
    5f4c:	fb 4d       	sbci	r31, 0xDB	; 219
    5f4e:	c1 89       	ldd	r28, Z+17	; 0x11
    5f50:	d2 89       	ldd	r29, Z+18	; 0x12

	if ((dx->next_tx_buf_head = (dx->tx_buf_head)-1) == 0) { // adv. head & wrap
    5f52:	8d 81       	ldd	r24, Y+5	; 0x05
    5f54:	81 50       	subi	r24, 0x01	; 1
    5f56:	8e 83       	std	Y+6, r24	; 0x06
    5f58:	88 23       	and	r24, r24
    5f5a:	11 f4       	brne	.+4      	; 0x5f60 <xio_putc_usart+0x40>
		dx->next_tx_buf_head = TX_BUFFER_SIZE-1;	 // -1 avoids the off-by-one
    5f5c:	81 e1       	ldi	r24, 0x11	; 17
    5f5e:	8e 83       	std	Y+6, r24	; 0x06
	}
	while(dx->next_tx_buf_head == dx->tx_buf_tail) { // buf full. sleep or ret
    5f60:	9e 81       	ldd	r25, Y+6	; 0x06
    5f62:	16 c0       	rjmp	.+44     	; 0x5f90 <xio_putc_usart+0x70>
		if (BLOCKING(d->flags)) {
    5f64:	fa 01       	movw	r30, r20
    5f66:	80 81       	ld	r24, Z
    5f68:	82 ff       	sbrs	r24, 2
    5f6a:	0c c0       	rjmp	.+24     	; 0x5f84 <xio_putc_usart+0x64>
			sleep_mode();
    5f6c:	80 91 48 00 	lds	r24, 0x0048
    5f70:	81 60       	ori	r24, 0x01	; 1
    5f72:	80 93 48 00 	sts	0x0048, r24
    5f76:	88 95       	sleep
    5f78:	80 91 48 00 	lds	r24, 0x0048
    5f7c:	8e 7f       	andi	r24, 0xFE	; 254
    5f7e:	80 93 48 00 	sts	0x0048, r24
    5f82:	06 c0       	rjmp	.+12     	; 0x5f90 <xio_putc_usart+0x70>
		} else {
			d->sig = XIO_SIG_EAGAIN;
    5f84:	81 e0       	ldi	r24, 0x01	; 1
    5f86:	ea 01       	movw	r28, r20
    5f88:	8b 83       	std	Y+3, r24	; 0x03
    5f8a:	2f ef       	ldi	r18, 0xFF	; 255
    5f8c:	3f ef       	ldi	r19, 0xFF	; 255
    5f8e:	52 c0       	rjmp	.+164    	; 0x6034 <__stack+0x35>
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer

	if ((dx->next_tx_buf_head = (dx->tx_buf_head)-1) == 0) { // adv. head & wrap
		dx->next_tx_buf_head = TX_BUFFER_SIZE-1;	 // -1 avoids the off-by-one
	}
	while(dx->next_tx_buf_head == dx->tx_buf_tail) { // buf full. sleep or ret
    5f90:	8c 81       	ldd	r24, Y+4	; 0x04
    5f92:	98 17       	cp	r25, r24
    5f94:	39 f3       	breq	.-50     	; 0x5f64 <xio_putc_usart+0x44>
			d->sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	dx->tx_buf_head = dx->next_tx_buf_head;			// accept next buffer head
    5f96:	9d 83       	std	Y+5, r25	; 0x05
	dx->tx_buf[dx->tx_buf_head] = c;				// ...write char to buffer
    5f98:	8d 81       	ldd	r24, Y+5	; 0x05
    5f9a:	fe 01       	movw	r30, r28
    5f9c:	e8 0f       	add	r30, r24
    5f9e:	f1 1d       	adc	r31, r1
    5fa0:	65 8f       	std	Z+29, r22	; 0x1d

	if (CRLF(d->flags) && (c == '\n')) {			// detect LF & add CR
    5fa2:	fa 01       	movw	r30, r20
    5fa4:	20 81       	ld	r18, Z
    5fa6:	31 81       	ldd	r19, Z+1	; 0x01
    5fa8:	25 ff       	sbrs	r18, 5
    5faa:	0a c0       	rjmp	.+20     	; 0x5fc0 <xio_putc_usart+0xa0>
    5fac:	6a 30       	cpi	r22, 0x0A	; 10
    5fae:	41 f4       	brne	.+16     	; 0x5fc0 <xio_putc_usart+0xa0>
		return d->x_putc('\r', stream);				// recurse
    5fb0:	03 84       	ldd	r0, Z+11	; 0x0b
    5fb2:	f4 85       	ldd	r31, Z+12	; 0x0c
    5fb4:	e0 2d       	mov	r30, r0
    5fb6:	8d e0       	ldi	r24, 0x0D	; 13
    5fb8:	bd 01       	movw	r22, r26
    5fba:	19 95       	eicall
    5fbc:	9c 01       	movw	r18, r24
    5fbe:	3a c0       	rjmp	.+116    	; 0x6034 <__stack+0x35>
	}

	// dequeue the buffer if DATA register is ready
	if (dx->usart->STATUS & 0x20) {
    5fc0:	ef 81       	ldd	r30, Y+7	; 0x07
    5fc2:	f8 85       	ldd	r31, Y+8	; 0x08
    5fc4:	81 81       	ldd	r24, Z+1	; 0x01
    5fc6:	85 ff       	sbrs	r24, 5
    5fc8:	24 c0       	rjmp	.+72     	; 0x6012 <__stack+0x13>
		if (dx->tx_buf_head == dx->tx_buf_tail) {// buf might be empty if IRQ got it
    5fca:	9d 81       	ldd	r25, Y+5	; 0x05
    5fcc:	8c 81       	ldd	r24, Y+4	; 0x04
    5fce:	98 17       	cp	r25, r24
    5fd0:	79 f1       	breq	.+94     	; 0x6030 <__stack+0x31>
			return (XIO_OK);
		}
		d->flags |= XIO_FLAG_TX_MUTEX_bm;			// mutual exclusion from ISR
    5fd2:	38 60       	ori	r19, 0x08	; 8
    5fd4:	fa 01       	movw	r30, r20
    5fd6:	20 83       	st	Z, r18
    5fd8:	31 83       	std	Z+1, r19	; 0x01
		if (--(dx->tx_buf_tail) == 0) {				// advance tail & wrap if needed
    5fda:	8c 81       	ldd	r24, Y+4	; 0x04
    5fdc:	81 50       	subi	r24, 0x01	; 1
    5fde:	8c 83       	std	Y+4, r24	; 0x04
    5fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    5fe2:	88 23       	and	r24, r24
    5fe4:	11 f4       	brne	.+4      	; 0x5fea <xio_putc_usart+0xca>
			dx->tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoid off-by-one err (OBOE)
    5fe6:	81 e1       	ldi	r24, 0x11	; 17
    5fe8:	8c 83       	std	Y+4, r24	; 0x04
		}
		if (dev == XIO_DEV_RS485) {						// HACK
    5fea:	77 23       	and	r23, r23
    5fec:	21 f4       	brne	.+8      	; 0x5ff6 <xio_putc_usart+0xd6>
			dx->port->OUTSET = (RS485_DE_bm | RS485_RE_bm);	// enable DE, disable RE
    5fee:	e9 85       	ldd	r30, Y+9	; 0x09
    5ff0:	fa 85       	ldd	r31, Y+10	; 0x0a
    5ff2:	80 e3       	ldi	r24, 0x30	; 48
    5ff4:	85 83       	std	Z+5, r24	; 0x05
		}
		dx->usart->DATA = dx->tx_buf[dx->tx_buf_tail];// write to TX DATA reg
    5ff6:	af 81       	ldd	r26, Y+7	; 0x07
    5ff8:	b8 85       	ldd	r27, Y+8	; 0x08
    5ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    5ffc:	fe 01       	movw	r30, r28
    5ffe:	e8 0f       	add	r30, r24
    6000:	f1 1d       	adc	r31, r1
    6002:	85 8d       	ldd	r24, Z+29	; 0x1d
    6004:	8c 93       	st	X, r24
		d->flags &= ~XIO_FLAG_TX_MUTEX_bm;			// release mutual exclusion lock
    6006:	fa 01       	movw	r30, r20
    6008:	80 81       	ld	r24, Z
    600a:	91 81       	ldd	r25, Z+1	; 0x01
    600c:	97 7f       	andi	r25, 0xF7	; 247
    600e:	80 83       	st	Z, r24
    6010:	91 83       	std	Z+1, r25	; 0x01
    6012:	ef 81       	ldd	r30, Y+7	; 0x07
    6014:	f8 85       	ldd	r31, Y+8	; 0x08
	}
	// enable interrupts regardless
	if (dev == XIO_DEV_RS485) {						// HACK
    6016:	77 23       	and	r23, r23
    6018:	11 f4       	brne	.+4      	; 0x601e <__stack+0x1f>
		dx->usart->CTRLA = CTRLA_RXON_TXON_TXCON;	// doesn't work if you just |= it
    601a:	85 e2       	ldi	r24, 0x25	; 37
    601c:	01 c0       	rjmp	.+2      	; 0x6020 <__stack+0x21>
	} else {
		dx->usart->CTRLA = CTRLA_RXON_TXON;			// doesn't work if you just |= it
    601e:	81 e2       	ldi	r24, 0x21	; 33
    6020:	83 83       	std	Z+3, r24	; 0x03
	}
	PMIC_EnableLowLevel(); 							// enable USART TX interrupts
    6022:	80 91 a2 00 	lds	r24, 0x00A2
    6026:	81 60       	ori	r24, 0x01	; 1
    6028:	e0 ea       	ldi	r30, 0xA0	; 160
    602a:	f0 e0       	ldi	r31, 0x00	; 0
    602c:	82 83       	std	Z+2, r24	; 0x02
	sei();											// enable global interrupts
    602e:	78 94       	sei
    6030:	20 e0       	ldi	r18, 0x00	; 0
    6032:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_OK);
}
    6034:	c9 01       	movw	r24, r18
    6036:	df 91       	pop	r29
    6038:	cf 91       	pop	r28
    603a:	08 95       	ret

0000603c <xio_getc_usart>:
 *		  character helper routines. See them for behaviors
 */

int xio_getc_usart(const uint8_t dev, FILE *stream)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
    603c:	97 e1       	ldi	r25, 0x17	; 23
    603e:	89 9f       	mul	r24, r25
    6040:	d0 01       	movw	r26, r0
    6042:	11 24       	eor	r1, r1
    6044:	ac 56       	subi	r26, 0x6C	; 108
    6046:	bb 4d       	sbci	r27, 0xDB	; 219
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6048:	48 2f       	mov	r20, r24
    604a:	50 e0       	ldi	r21, 0x00	; 0
    604c:	27 e1       	ldi	r18, 0x17	; 23
    604e:	30 e0       	ldi	r19, 0x00	; 0
    6050:	42 9f       	mul	r20, r18
    6052:	f0 01       	movw	r30, r0
    6054:	43 9f       	mul	r20, r19
    6056:	f0 0d       	add	r31, r0
    6058:	52 9f       	mul	r21, r18
    605a:	f0 0d       	add	r31, r0
    605c:	11 24       	eor	r1, r1
    605e:	ec 56       	subi	r30, 0x6C	; 108
    6060:	fb 4d       	sbci	r31, 0xDB	; 219
    6062:	01 88       	ldd	r0, Z+17	; 0x11
    6064:	f2 89       	ldd	r31, Z+18	; 0x12
    6066:	e0 2d       	mov	r30, r0

	gdev = dev;										// set dev number global var
    6068:	80 93 01 23 	sts	0x2301, r24
    606c:	15 c0       	rjmp	.+42     	; 0x6098 <xio_getc_usart+0x5c>

	while (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(d->flags)) {
    606e:	8c 91       	ld	r24, X
    6070:	82 ff       	sbrs	r24, 2
    6072:	0c c0       	rjmp	.+24     	; 0x608c <xio_getc_usart+0x50>
			sleep_mode();
    6074:	80 91 48 00 	lds	r24, 0x0048
    6078:	81 60       	ori	r24, 0x01	; 1
    607a:	80 93 48 00 	sts	0x0048, r24
    607e:	88 95       	sleep
    6080:	80 91 48 00 	lds	r24, 0x0048
    6084:	8e 7f       	andi	r24, 0xFE	; 254
    6086:	80 93 48 00 	sts	0x0048, r24
    608a:	06 c0       	rjmp	.+12     	; 0x6098 <xio_getc_usart+0x5c>
		} else {
			d->sig = XIO_SIG_EAGAIN;
    608c:	81 e0       	ldi	r24, 0x01	; 1
    608e:	13 96       	adiw	r26, 0x03	; 3
    6090:	8c 93       	st	X, r24
    6092:	2f ef       	ldi	r18, 0xFF	; 255
    6094:	3f ef       	ldi	r19, 0xFF	; 255
    6096:	1e c0       	rjmp	.+60     	; 0x60d4 <xio_getc_usart+0x98>
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer

	gdev = dev;										// set dev number global var

	while (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
    6098:	93 81       	ldd	r25, Z+3	; 0x03
    609a:	82 81       	ldd	r24, Z+2	; 0x02
    609c:	98 17       	cp	r25, r24
    609e:	39 f3       	breq	.-50     	; 0x606e <xio_getc_usart+0x32>
		} else {
			d->sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(dx->rx_buf_tail) == 0) {				// advance RX tail (RXQ read ptr)
    60a0:	82 81       	ldd	r24, Z+2	; 0x02
    60a2:	81 50       	subi	r24, 0x01	; 1
    60a4:	82 83       	std	Z+2, r24	; 0x02
    60a6:	82 81       	ldd	r24, Z+2	; 0x02
    60a8:	88 23       	and	r24, r24
    60aa:	11 f4       	brne	.+4      	; 0x60b0 <xio_getc_usart+0x74>
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    60ac:	81 e1       	ldi	r24, 0x11	; 17
    60ae:	82 83       	std	Z+2, r24	; 0x02
	}
	d->c = (dx->rx_buf[dx->rx_buf_tail] & 0x007F);// get char from RX buf & mask MSB
    60b0:	82 81       	ldd	r24, Z+2	; 0x02
    60b2:	e8 0f       	add	r30, r24
    60b4:	f1 1d       	adc	r31, r1
    60b6:	83 85       	ldd	r24, Z+11	; 0x0b
    60b8:	8f 77       	andi	r24, 0x7F	; 127
    60ba:	14 96       	adiw	r26, 0x04	; 4
    60bc:	8c 93       	st	X, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[d->c])))());
    60be:	90 e0       	ldi	r25, 0x00	; 0
    60c0:	88 0f       	add	r24, r24
    60c2:	99 1f       	adc	r25, r25
    60c4:	85 52       	subi	r24, 0x25	; 37
    60c6:	94 4e       	sbci	r25, 0xE4	; 228
    60c8:	fc 01       	movw	r30, r24
    60ca:	25 91       	lpm	r18, Z+
    60cc:	34 91       	lpm	r19, Z+
    60ce:	f9 01       	movw	r30, r18
    60d0:	19 95       	eicall
    60d2:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    60d4:	c9 01       	movw	r24, r18
    60d6:	08 95       	ret

000060d8 <_getc_char>:

// xio_getc_usart helper routines

static int _getc_char(void)
{
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    60d8:	80 91 01 23 	lds	r24, 0x2301
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	27 e1       	ldi	r18, 0x17	; 23
    60e0:	30 e0       	ldi	r19, 0x00	; 0
    60e2:	82 9f       	mul	r24, r18
    60e4:	d0 01       	movw	r26, r0
    60e6:	83 9f       	mul	r24, r19
    60e8:	b0 0d       	add	r27, r0
    60ea:	92 9f       	mul	r25, r18
    60ec:	b0 0d       	add	r27, r0
    60ee:	11 24       	eor	r1, r1
    60f0:	ac 56       	subi	r26, 0x6C	; 108
    60f2:	bb 4d       	sbci	r27, 0xDB	; 219
    60f4:	8c 91       	ld	r24, X
    60f6:	84 ff       	sbrs	r24, 4
    60f8:	0b c0       	rjmp	.+22     	; 0x6110 <_getc_char+0x38>
    60fa:	60 91 d5 25 	lds	r22, 0x25D5
    60fe:	70 91 d6 25 	lds	r23, 0x25D6
    6102:	1b 96       	adiw	r26, 0x0b	; 11
    6104:	ed 91       	ld	r30, X+
    6106:	fc 91       	ld	r31, X
    6108:	1c 97       	sbiw	r26, 0x0c	; 12
    610a:	14 96       	adiw	r26, 0x04	; 4
    610c:	8c 91       	ld	r24, X
    610e:	19 95       	eicall
    6110:	80 91 01 23 	lds	r24, 0x2301
    6114:	90 e0       	ldi	r25, 0x00	; 0
    6116:	27 e1       	ldi	r18, 0x17	; 23
    6118:	30 e0       	ldi	r19, 0x00	; 0
    611a:	82 9f       	mul	r24, r18
    611c:	f0 01       	movw	r30, r0
    611e:	83 9f       	mul	r24, r19
    6120:	f0 0d       	add	r31, r0
    6122:	92 9f       	mul	r25, r18
    6124:	f0 0d       	add	r31, r0
    6126:	11 24       	eor	r1, r1
    6128:	ec 56       	subi	r30, 0x6C	; 108
    612a:	fb 4d       	sbci	r31, 0xDB	; 219
	return(ds[gdev].c);
}
    612c:	84 81       	ldd	r24, Z+4	; 0x04
    612e:	90 e0       	ldi	r25, 0x00	; 0
    6130:	08 95       	ret

00006132 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(ds[gdev].flags)) ds[gdev].c = '\n';
    6132:	80 91 01 23 	lds	r24, 0x2301
    6136:	28 2f       	mov	r18, r24
    6138:	30 e0       	ldi	r19, 0x00	; 0
    613a:	87 e1       	ldi	r24, 0x17	; 23
    613c:	90 e0       	ldi	r25, 0x00	; 0
    613e:	28 9f       	mul	r18, r24
    6140:	f0 01       	movw	r30, r0
    6142:	29 9f       	mul	r18, r25
    6144:	f0 0d       	add	r31, r0
    6146:	38 9f       	mul	r19, r24
    6148:	f0 0d       	add	r31, r0
    614a:	11 24       	eor	r1, r1
    614c:	ec 56       	subi	r30, 0x6C	; 108
    614e:	fb 4d       	sbci	r31, 0xDB	; 219
    6150:	80 81       	ld	r24, Z
    6152:	86 ff       	sbrs	r24, 6
    6154:	02 c0       	rjmp	.+4      	; 0x615a <_getc_NEWLINE+0x28>
    6156:	8a e0       	ldi	r24, 0x0A	; 10
    6158:	84 83       	std	Z+4, r24	; 0x04
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    615a:	87 e1       	ldi	r24, 0x17	; 23
    615c:	90 e0       	ldi	r25, 0x00	; 0
    615e:	28 9f       	mul	r18, r24
    6160:	d0 01       	movw	r26, r0
    6162:	29 9f       	mul	r18, r25
    6164:	b0 0d       	add	r27, r0
    6166:	38 9f       	mul	r19, r24
    6168:	b0 0d       	add	r27, r0
    616a:	11 24       	eor	r1, r1
    616c:	ac 56       	subi	r26, 0x6C	; 108
    616e:	bb 4d       	sbci	r27, 0xDB	; 219
    6170:	8c 91       	ld	r24, X
    6172:	84 ff       	sbrs	r24, 4
    6174:	0b c0       	rjmp	.+22     	; 0x618c <_getc_NEWLINE+0x5a>
    6176:	60 91 d5 25 	lds	r22, 0x25D5
    617a:	70 91 d6 25 	lds	r23, 0x25D6
    617e:	1b 96       	adiw	r26, 0x0b	; 11
    6180:	ed 91       	ld	r30, X+
    6182:	fc 91       	ld	r31, X
    6184:	1c 97       	sbiw	r26, 0x0c	; 12
    6186:	14 96       	adiw	r26, 0x04	; 4
    6188:	8c 91       	ld	r24, X
    618a:	19 95       	eicall
    618c:	80 91 01 23 	lds	r24, 0x2301
    6190:	90 e0       	ldi	r25, 0x00	; 0
    6192:	27 e1       	ldi	r18, 0x17	; 23
    6194:	30 e0       	ldi	r19, 0x00	; 0
    6196:	82 9f       	mul	r24, r18
    6198:	f0 01       	movw	r30, r0
    619a:	83 9f       	mul	r24, r19
    619c:	f0 0d       	add	r31, r0
    619e:	92 9f       	mul	r25, r18
    61a0:	f0 0d       	add	r31, r0
    61a2:	11 24       	eor	r1, r1
    61a4:	ec 56       	subi	r30, 0x6C	; 108
    61a6:	fb 4d       	sbci	r31, 0xDB	; 219
	return(ds[gdev].c);
}
    61a8:	84 81       	ldd	r24, Z+4	; 0x04
    61aa:	90 e0       	ldi	r25, 0x00	; 0
    61ac:	08 95       	ret

000061ae <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(ds[gdev].flags)) {
    61ae:	80 91 01 23 	lds	r24, 0x2301
    61b2:	90 e0       	ldi	r25, 0x00	; 0
    61b4:	27 e1       	ldi	r18, 0x17	; 23
    61b6:	30 e0       	ldi	r19, 0x00	; 0
    61b8:	82 9f       	mul	r24, r18
    61ba:	f0 01       	movw	r30, r0
    61bc:	83 9f       	mul	r24, r19
    61be:	f0 0d       	add	r31, r0
    61c0:	92 9f       	mul	r25, r18
    61c2:	f0 0d       	add	r31, r0
    61c4:	11 24       	eor	r1, r1
    61c6:	ec 56       	subi	r30, 0x6C	; 108
    61c8:	fb 4d       	sbci	r31, 0xDB	; 219
    61ca:	80 81       	ld	r24, Z
    61cc:	87 ff       	sbrs	r24, 7
    61ce:	03 c0       	rjmp	.+6      	; 0x61d6 <_getc_SEMICOLON+0x28>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    61d0:	0e 94 99 30 	call	0x6132	; 0x6132 <_getc_NEWLINE>
    61d4:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    61d6:	0e 94 6c 30 	call	0x60d8	; 0x60d8 <_getc_char>
}
    61da:	08 95       	ret

000061dc <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	ds[gdev].sig = XIO_SIG_DELETE;
    61dc:	80 91 01 23 	lds	r24, 0x2301
    61e0:	90 e0       	ldi	r25, 0x00	; 0
    61e2:	27 e1       	ldi	r18, 0x17	; 23
    61e4:	30 e0       	ldi	r19, 0x00	; 0
    61e6:	82 9f       	mul	r24, r18
    61e8:	f0 01       	movw	r30, r0
    61ea:	83 9f       	mul	r24, r19
    61ec:	f0 0d       	add	r31, r0
    61ee:	92 9f       	mul	r25, r18
    61f0:	f0 0d       	add	r31, r0
    61f2:	11 24       	eor	r1, r1
    61f4:	ec 56       	subi	r30, 0x6C	; 108
    61f6:	fb 4d       	sbci	r31, 0xDB	; 219
    61f8:	89 e0       	ldi	r24, 0x09	; 9
    61fa:	83 83       	std	Z+3, r24	; 0x03
	return(_FDEV_ERR);
}
    61fc:	8f ef       	ldi	r24, 0xFF	; 255
    61fe:	9f ef       	ldi	r25, 0xFF	; 255
    6200:	08 95       	ret

00006202 <xio_readln_usart>:
 *
 *	Note: LINEMODE flag in device struct is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_usart(const uint8_t dev, char *buf, const uint8_t size)
{
    6202:	ff 92       	push	r15
    6204:	0f 93       	push	r16
    6206:	1f 93       	push	r17
    6208:	cf 93       	push	r28
    620a:	df 93       	push	r29
    620c:	28 2f       	mov	r18, r24
	struct xioDEVICE *d = &ds[dev];				// init device struct pointer
    620e:	87 e1       	ldi	r24, 0x17	; 23
    6210:	28 9f       	mul	r18, r24
    6212:	e0 01       	movw	r28, r0
    6214:	11 24       	eor	r1, r1
    6216:	cc 56       	subi	r28, 0x6C	; 108
    6218:	db 4d       	sbci	r29, 0xDB	; 219
	
	gdev = dev;									// set the global device number
    621a:	20 93 01 23 	sts	0x2301, r18

	if (!IN_LINE(d->flags)) {					// first time thru initializations
    621e:	88 81       	ld	r24, Y
    6220:	99 81       	ldd	r25, Y+1	; 0x01
    6222:	96 fd       	sbrc	r25, 6
    6224:	09 c0       	rjmp	.+18     	; 0x6238 <xio_readln_usart+0x36>
		d->len = 0;								// zero buffer
    6226:	1d 82       	std	Y+5, r1	; 0x05
		d->status = 0;
    6228:	1a 82       	std	Y+2, r1	; 0x02
		d->size = size;
    622a:	4e 83       	std	Y+6, r20	; 0x06
		d->buf = buf;
    622c:	6d 8b       	std	Y+21, r22	; 0x15
    622e:	7e 8b       	std	Y+22, r23	; 0x16
		d->sig = XIO_SIG_OK;					// reset signal register
    6230:	1b 82       	std	Y+3, r1	; 0x03
		d->flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    6232:	90 64       	ori	r25, 0x40	; 64
    6234:	88 83       	st	Y, r24
    6236:	99 83       	std	Y+1, r25	; 0x01
 */

static int _xio_readc_usart(const uint8_t dev, const char *buf)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6238:	30 e0       	ldi	r19, 0x00	; 0
    623a:	87 e1       	ldi	r24, 0x17	; 23
    623c:	90 e0       	ldi	r25, 0x00	; 0
    623e:	28 9f       	mul	r18, r24
    6240:	80 01       	movw	r16, r0
    6242:	29 9f       	mul	r18, r25
    6244:	10 0d       	add	r17, r0
    6246:	38 9f       	mul	r19, r24
    6248:	10 0d       	add	r17, r0
    624a:	11 24       	eor	r1, r1
    624c:	0b 55       	subi	r16, 0x5B	; 91
    624e:	1b 4d       	sbci	r17, 0xDB	; 219

	if (dx->rx_buf_head == dx->rx_buf_tail) {		// RX ISR buffer empty
		return(XIO_BUFFER_EMPTY);
	}
	if (--(dx->rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6250:	41 e1       	ldi	r20, 0x11	; 17
    6252:	f4 2e       	mov	r15, r20
 */

static int _xio_readc_usart(const uint8_t dev, const char *buf)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6254:	d8 01       	movw	r26, r16
    6256:	ed 91       	ld	r30, X+
    6258:	fc 91       	ld	r31, X

	if (dx->rx_buf_head == dx->rx_buf_tail) {		// RX ISR buffer empty
    625a:	93 81       	ldd	r25, Z+3	; 0x03
    625c:	82 81       	ldd	r24, Z+2	; 0x02
    625e:	98 17       	cp	r25, r24
    6260:	19 f4       	brne	.+6      	; 0x6268 <xio_readln_usart+0x66>
    6262:	88 e0       	ldi	r24, 0x08	; 8
    6264:	90 e0       	ldi	r25, 0x00	; 0
    6266:	17 c0       	rjmp	.+46     	; 0x6296 <xio_readln_usart+0x94>
		return(XIO_BUFFER_EMPTY);
	}
	if (--(dx->rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
    6268:	82 81       	ldd	r24, Z+2	; 0x02
    626a:	81 50       	subi	r24, 0x01	; 1
    626c:	82 83       	std	Z+2, r24	; 0x02
    626e:	82 81       	ldd	r24, Z+2	; 0x02
    6270:	88 23       	and	r24, r24
    6272:	09 f4       	brne	.+2      	; 0x6276 <xio_readln_usart+0x74>
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6274:	f2 82       	std	Z+2, r15	; 0x02
	}
	d->c = (dx->rx_buf[dx->rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    6276:	82 81       	ldd	r24, Z+2	; 0x02
    6278:	e8 0f       	add	r30, r24
    627a:	f1 1d       	adc	r31, r1
    627c:	83 85       	ldd	r24, Z+11	; 0x0b
    627e:	8f 77       	andi	r24, 0x7F	; 127
    6280:	8c 83       	std	Y+4, r24	; 0x04
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[d->c])))()); // dispatch char
    6282:	90 e0       	ldi	r25, 0x00	; 0
    6284:	88 0f       	add	r24, r24
    6286:	99 1f       	adc	r25, r25
    6288:	85 52       	subi	r24, 0x25	; 37
    628a:	95 4e       	sbci	r25, 0xE5	; 229
    628c:	fc 01       	movw	r30, r24
    628e:	25 91       	lpm	r18, Z+
    6290:	34 91       	lpm	r19, Z+
    6292:	f9 01       	movw	r30, r18
    6294:	19 95       	eicall
		d->buf = buf;
		d->sig = XIO_SIG_OK;					// reset signal register
		d->flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
	}
	while (TRUE) { 
		switch (d->status = _xio_readc_usart(dev, d->buf)) {
    6296:	8a 83       	std	Y+2, r24	; 0x02
    6298:	88 30       	cpi	r24, 0x08	; 8
    629a:	41 f0       	breq	.+16     	; 0x62ac <xio_readln_usart+0xaa>
    629c:	8a 30       	cpi	r24, 0x0A	; 10
    629e:	19 f0       	breq	.+6      	; 0x62a6 <xio_readln_usart+0xa4>
    62a0:	84 30       	cpi	r24, 0x04	; 4
    62a2:	c1 f6       	brne	.-80     	; 0x6254 <xio_readln_usart+0x52>
    62a4:	06 c0       	rjmp	.+12     	; 0x62b2 <xio_readln_usart+0xb0>
    62a6:	2a e0       	ldi	r18, 0x0A	; 10
    62a8:	30 e0       	ldi	r19, 0x00	; 0
    62aa:	05 c0       	rjmp	.+10     	; 0x62b6 <xio_readln_usart+0xb4>
    62ac:	22 e0       	ldi	r18, 0x02	; 2
    62ae:	30 e0       	ldi	r19, 0x00	; 0
    62b0:	02 c0       	rjmp	.+4      	; 0x62b6 <xio_readln_usart+0xb4>
    62b2:	20 e0       	ldi	r18, 0x00	; 0
    62b4:	30 e0       	ldi	r19, 0x00	; 0
			case (XIO_EAGAIN): break;							// loop
		}
		// +++ put a size check here of buffers can overrun.
	}
	return (XIO_OK);
}
    62b6:	c9 01       	movw	r24, r18
    62b8:	df 91       	pop	r29
    62ba:	cf 91       	pop	r28
    62bc:	1f 91       	pop	r17
    62be:	0f 91       	pop	r16
    62c0:	ff 90       	pop	r15
    62c2:	08 95       	ret

000062c4 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (ds[gdev].len > ds[gdev].size) {			// trap buffer overflow
    62c4:	80 91 01 23 	lds	r24, 0x2301
    62c8:	90 e0       	ldi	r25, 0x00	; 0
    62ca:	27 e1       	ldi	r18, 0x17	; 23
    62cc:	30 e0       	ldi	r19, 0x00	; 0
    62ce:	82 9f       	mul	r24, r18
    62d0:	d0 01       	movw	r26, r0
    62d2:	83 9f       	mul	r24, r19
    62d4:	b0 0d       	add	r27, r0
    62d6:	92 9f       	mul	r25, r18
    62d8:	b0 0d       	add	r27, r0
    62da:	11 24       	eor	r1, r1
    62dc:	ac 56       	subi	r26, 0x6C	; 108
    62de:	bb 4d       	sbci	r27, 0xDB	; 219
    62e0:	15 96       	adiw	r26, 0x05	; 5
    62e2:	9c 91       	ld	r25, X
    62e4:	15 97       	sbiw	r26, 0x05	; 5
    62e6:	16 96       	adiw	r26, 0x06	; 6
    62e8:	2c 91       	ld	r18, X
    62ea:	16 97       	sbiw	r26, 0x06	; 6
    62ec:	29 17       	cp	r18, r25
    62ee:	70 f4       	brcc	.+28     	; 0x630c <_readln_char+0x48>
		ds[gdev].sig = XIO_SIG_EOL;
    62f0:	82 e0       	ldi	r24, 0x02	; 2
    62f2:	13 96       	adiw	r26, 0x03	; 3
    62f4:	8c 93       	st	X, r24
    62f6:	13 97       	sbiw	r26, 0x03	; 3
		ds[gdev].buf[ds[gdev].size] = NUL;		// size is zero based
    62f8:	55 96       	adiw	r26, 0x15	; 21
    62fa:	ed 91       	ld	r30, X+
    62fc:	fc 91       	ld	r31, X
    62fe:	56 97       	sbiw	r26, 0x16	; 22
    6300:	e2 0f       	add	r30, r18
    6302:	f1 1d       	adc	r31, r1
    6304:	10 82       	st	Z, r1
    6306:	2a e0       	ldi	r18, 0x0A	; 10
    6308:	30 e0       	ldi	r19, 0x00	; 0
    630a:	1e c0       	rjmp	.+60     	; 0x6348 <_readln_char+0x84>
		return (XIO_BUFFER_FULL_NON_FATAL);
	}
	ds[gdev].buf[ds[gdev].len++] = ds[gdev].c;
    630c:	55 96       	adiw	r26, 0x15	; 21
    630e:	ed 91       	ld	r30, X+
    6310:	fc 91       	ld	r31, X
    6312:	56 97       	sbiw	r26, 0x16	; 22
    6314:	e9 0f       	add	r30, r25
    6316:	f1 1d       	adc	r31, r1
    6318:	14 96       	adiw	r26, 0x04	; 4
    631a:	8c 91       	ld	r24, X
    631c:	14 97       	sbiw	r26, 0x04	; 4
    631e:	80 83       	st	Z, r24
    6320:	9f 5f       	subi	r25, 0xFF	; 255
    6322:	15 96       	adiw	r26, 0x05	; 5
    6324:	9c 93       	st	X, r25
    6326:	15 97       	sbiw	r26, 0x05	; 5
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);// conditional echo
    6328:	8c 91       	ld	r24, X
    632a:	84 ff       	sbrs	r24, 4
    632c:	0b c0       	rjmp	.+22     	; 0x6344 <_readln_char+0x80>
    632e:	60 91 d5 25 	lds	r22, 0x25D5
    6332:	70 91 d6 25 	lds	r23, 0x25D6
    6336:	1b 96       	adiw	r26, 0x0b	; 11
    6338:	ed 91       	ld	r30, X+
    633a:	fc 91       	ld	r31, X
    633c:	1c 97       	sbiw	r26, 0x0c	; 12
    633e:	14 96       	adiw	r26, 0x04	; 4
    6340:	8c 91       	ld	r24, X
    6342:	19 95       	eicall
    6344:	22 e0       	ldi	r18, 0x02	; 2
    6346:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_EAGAIN);						// line is still in process
}
    6348:	c9 01       	movw	r24, r18
    634a:	08 95       	ret

0000634c <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	ds[gdev].sig = XIO_SIG_EOL;
    634c:	80 91 01 23 	lds	r24, 0x2301
    6350:	90 e0       	ldi	r25, 0x00	; 0
    6352:	27 e1       	ldi	r18, 0x17	; 23
    6354:	30 e0       	ldi	r19, 0x00	; 0
    6356:	82 9f       	mul	r24, r18
    6358:	d0 01       	movw	r26, r0
    635a:	83 9f       	mul	r24, r19
    635c:	b0 0d       	add	r27, r0
    635e:	92 9f       	mul	r25, r18
    6360:	b0 0d       	add	r27, r0
    6362:	11 24       	eor	r1, r1
    6364:	ac 56       	subi	r26, 0x6C	; 108
    6366:	bb 4d       	sbci	r27, 0xDB	; 219
    6368:	82 e0       	ldi	r24, 0x02	; 2
    636a:	13 96       	adiw	r26, 0x03	; 3
    636c:	8c 93       	st	X, r24
    636e:	13 97       	sbiw	r26, 0x03	; 3
	ds[gdev].buf[ds[gdev].len] = NUL;
    6370:	15 96       	adiw	r26, 0x05	; 5
    6372:	8c 91       	ld	r24, X
    6374:	15 97       	sbiw	r26, 0x05	; 5
    6376:	55 96       	adiw	r26, 0x15	; 21
    6378:	ed 91       	ld	r30, X+
    637a:	fc 91       	ld	r31, X
    637c:	56 97       	sbiw	r26, 0x16	; 22
    637e:	e8 0f       	add	r30, r24
    6380:	f1 1d       	adc	r31, r1
    6382:	10 82       	st	Z, r1
	ds[gdev].flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    6384:	2d 91       	ld	r18, X+
    6386:	3c 91       	ld	r19, X
    6388:	11 97       	sbiw	r26, 0x01	; 1
    638a:	c9 01       	movw	r24, r18
    638c:	9f 7b       	andi	r25, 0xBF	; 191
    638e:	8d 93       	st	X+, r24
    6390:	9c 93       	st	X, r25
    6392:	11 97       	sbiw	r26, 0x01	; 1
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc('\n',stdout);// echo a newline
    6394:	24 ff       	sbrs	r18, 4
    6396:	0a c0       	rjmp	.+20     	; 0x63ac <_readln_NEWLINE+0x60>
    6398:	60 91 d5 25 	lds	r22, 0x25D5
    639c:	70 91 d6 25 	lds	r23, 0x25D6
    63a0:	1b 96       	adiw	r26, 0x0b	; 11
    63a2:	ed 91       	ld	r30, X+
    63a4:	fc 91       	ld	r31, X
    63a6:	1c 97       	sbiw	r26, 0x0c	; 12
    63a8:	8a e0       	ldi	r24, 0x0A	; 10
    63aa:	19 95       	eicall
	return (XIO_EOL);							// return for end-of-line
}
    63ac:	84 e0       	ldi	r24, 0x04	; 4
    63ae:	90 e0       	ldi	r25, 0x00	; 0
    63b0:	08 95       	ret

000063b2 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newln
{
	if (SEMICOLONS(ds[gdev].flags)) {
    63b2:	80 91 01 23 	lds	r24, 0x2301
    63b6:	90 e0       	ldi	r25, 0x00	; 0
    63b8:	27 e1       	ldi	r18, 0x17	; 23
    63ba:	30 e0       	ldi	r19, 0x00	; 0
    63bc:	82 9f       	mul	r24, r18
    63be:	f0 01       	movw	r30, r0
    63c0:	83 9f       	mul	r24, r19
    63c2:	f0 0d       	add	r31, r0
    63c4:	92 9f       	mul	r25, r18
    63c6:	f0 0d       	add	r31, r0
    63c8:	11 24       	eor	r1, r1
    63ca:	ec 56       	subi	r30, 0x6C	; 108
    63cc:	fb 4d       	sbci	r31, 0xDB	; 219
    63ce:	80 81       	ld	r24, Z
    63d0:	87 ff       	sbrs	r24, 7
    63d2:	03 c0       	rjmp	.+6      	; 0x63da <_readln_SEMICOLON+0x28>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    63d4:	0e 94 a6 31 	call	0x634c	; 0x634c <_readln_NEWLINE>
    63d8:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    63da:	0e 94 62 31 	call	0x62c4	; 0x62c4 <_readln_char>
	}
}
    63de:	08 95       	ret

000063e0 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--ds[gdev].len >= 0) {
    63e0:	80 91 01 23 	lds	r24, 0x2301
    63e4:	90 e0       	ldi	r25, 0x00	; 0
    63e6:	27 e1       	ldi	r18, 0x17	; 23
    63e8:	30 e0       	ldi	r19, 0x00	; 0
    63ea:	82 9f       	mul	r24, r18
    63ec:	d0 01       	movw	r26, r0
    63ee:	83 9f       	mul	r24, r19
    63f0:	b0 0d       	add	r27, r0
    63f2:	92 9f       	mul	r25, r18
    63f4:	b0 0d       	add	r27, r0
    63f6:	11 24       	eor	r1, r1
    63f8:	ac 56       	subi	r26, 0x6C	; 108
    63fa:	bb 4d       	sbci	r27, 0xDB	; 219
    63fc:	15 96       	adiw	r26, 0x05	; 5
    63fe:	8c 91       	ld	r24, X
    6400:	15 97       	sbiw	r26, 0x05	; 5
    6402:	81 50       	subi	r24, 0x01	; 1
    6404:	15 96       	adiw	r26, 0x05	; 5
    6406:	8c 93       	st	X, r24
    6408:	15 97       	sbiw	r26, 0x05	; 5
		if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    640a:	8c 91       	ld	r24, X
    640c:	84 ff       	sbrs	r24, 4
    640e:	0b c0       	rjmp	.+22     	; 0x6426 <_readln_DELETE+0x46>
    6410:	60 91 d5 25 	lds	r22, 0x25D5
    6414:	70 91 d6 25 	lds	r23, 0x25D6
    6418:	1b 96       	adiw	r26, 0x0b	; 11
    641a:	ed 91       	ld	r30, X+
    641c:	fc 91       	ld	r31, X
    641e:	1c 97       	sbiw	r26, 0x0c	; 12
    6420:	14 96       	adiw	r26, 0x04	; 4
    6422:	8c 91       	ld	r24, X
    6424:	19 95       	eicall
	} else {
		ds[gdev].len = 0;
	}
	return (XIO_EAGAIN);						// line is still in process
}
    6426:	82 e0       	ldi	r24, 0x02	; 2
    6428:	90 e0       	ldi	r25, 0x00	; 0
    642a:	08 95       	ret

0000642c <xio_queue_RX_char_usart>:
 */

void xio_queue_RX_char_usart(const uint8_t dev, const char c)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    642c:	90 e0       	ldi	r25, 0x00	; 0
    642e:	27 e1       	ldi	r18, 0x17	; 23
    6430:	30 e0       	ldi	r19, 0x00	; 0
    6432:	82 9f       	mul	r24, r18
    6434:	f0 01       	movw	r30, r0
    6436:	83 9f       	mul	r24, r19
    6438:	f0 0d       	add	r31, r0
    643a:	92 9f       	mul	r25, r18
    643c:	f0 0d       	add	r31, r0
    643e:	11 24       	eor	r1, r1
    6440:	ec 56       	subi	r30, 0x6C	; 108
    6442:	fb 4d       	sbci	r31, 0xDB	; 219
    6444:	81 89       	ldd	r24, Z+17	; 0x11
    6446:	92 89       	ldd	r25, Z+18	; 0x12

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6448:	63 30       	cpi	r22, 0x03	; 3
    644a:	29 f4       	brne	.+10     	; 0x6456 <xio_queue_RX_char_usart+0x2a>
		d->sig = XIO_SIG_KILL;					// set signal value
    644c:	84 e0       	ldi	r24, 0x04	; 4
    644e:	83 83       	std	Z+3, r24	; 0x03
		signal_etx();							// call app-specific signal handler
    6450:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <signal_etx>
    6454:	08 95       	ret
 */

void xio_queue_RX_char_usart(const uint8_t dev, const char c)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6456:	fc 01       	movw	r30, r24
		signal_etx();							// call app-specific signal handler
		return;
	}

	// normal path
	if ((--dx->rx_buf_head) == 0) { 			// wrap condition
    6458:	83 81       	ldd	r24, Z+3	; 0x03
    645a:	81 50       	subi	r24, 0x01	; 1
    645c:	83 83       	std	Z+3, r24	; 0x03
    645e:	83 81       	ldd	r24, Z+3	; 0x03
    6460:	88 23       	and	r24, r24
    6462:	11 f4       	brne	.+4      	; 0x6468 <xio_queue_RX_char_usart+0x3c>
		dx->rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    6464:	81 e1       	ldi	r24, 0x11	; 17
    6466:	83 83       	std	Z+3, r24	; 0x03
	}
	if (dx->rx_buf_head != dx->rx_buf_tail) {// write char unless buffer full
    6468:	93 81       	ldd	r25, Z+3	; 0x03
    646a:	82 81       	ldd	r24, Z+2	; 0x02
    646c:	98 17       	cp	r25, r24
    646e:	29 f0       	breq	.+10     	; 0x647a <xio_queue_RX_char_usart+0x4e>
		dx->rx_buf[dx->rx_buf_head] = c;	// FAKE INPUT DATA
    6470:	83 81       	ldd	r24, Z+3	; 0x03
    6472:	e8 0f       	add	r30, r24
    6474:	f1 1d       	adc	r31, r1
    6476:	63 87       	std	Z+11, r22	; 0x0b
    6478:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++dx->rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    647a:	83 81       	ldd	r24, Z+3	; 0x03
    647c:	8f 5f       	subi	r24, 0xFF	; 255
    647e:	83 83       	std	Z+3, r24	; 0x03
    6480:	83 81       	ldd	r24, Z+3	; 0x03
    6482:	82 31       	cpi	r24, 0x12	; 18
    6484:	10 f0       	brcs	.+4      	; 0x648a <xio_queue_RX_char_usart+0x5e>
		dx->rx_buf_head = 1;
    6486:	81 e0       	ldi	r24, 0x01	; 1
    6488:	83 83       	std	Z+3, r24	; 0x03
    648a:	08 95       	ret

0000648c <xio_queue_RX_string_usart>:
/*
 * xio_queue_RX_string_usart() - fake ISR to put a string in the RX buffer
 */

void xio_queue_RX_string_usart(const uint8_t dev, const char *buf)
{
    648c:	0f 93       	push	r16
    648e:	1f 93       	push	r17
    6490:	cf 93       	push	r28
    6492:	df 93       	push	r29
    6494:	08 2f       	mov	r16, r24
    6496:	eb 01       	movw	r28, r22
    6498:	10 e0       	ldi	r17, 0x00	; 0
    649a:	03 c0       	rjmp	.+6      	; 0x64a2 <xio_queue_RX_string_usart+0x16>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_queue_RX_char_usart(dev, c);
    649c:	80 2f       	mov	r24, r16
    649e:	0e 94 16 32 	call	0x642c	; 0x642c <xio_queue_RX_char_usart>
void xio_queue_RX_string_usart(const uint8_t dev, const char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    64a2:	fe 01       	movw	r30, r28
    64a4:	e1 0f       	add	r30, r17
    64a6:	f1 1d       	adc	r31, r1
    64a8:	60 81       	ld	r22, Z
    64aa:	1f 5f       	subi	r17, 0xFF	; 255
    64ac:	66 23       	and	r22, r22
    64ae:	b1 f7       	brne	.-20     	; 0x649c <xio_queue_RX_string_usart+0x10>
		xio_queue_RX_char_usart(dev, c);
	}
}
    64b0:	df 91       	pop	r29
    64b2:	cf 91       	pop	r28
    64b4:	1f 91       	pop	r17
    64b6:	0f 91       	pop	r16
    64b8:	08 95       	ret

000064ba <xio_init_usart>:
					const struct PORT_struct *port_addr,
					const uint8_t dirclr, 
					const uint8_t dirset, 
					const uint8_t outclr, 
					const uint8_t outset) 
{
    64ba:	8f 92       	push	r8
    64bc:	9f 92       	push	r9
    64be:	af 92       	push	r10
    64c0:	bf 92       	push	r11
    64c2:	cf 92       	push	r12
    64c4:	df 92       	push	r13
    64c6:	ef 92       	push	r14
    64c8:	ff 92       	push	r15
    64ca:	0f 93       	push	r16
    64cc:	1f 93       	push	r17
    64ce:	df 93       	push	r29
    64d0:	cf 93       	push	r28
    64d2:	cd b7       	in	r28, 0x3d	; 61
    64d4:	de b7       	in	r29, 0x3e	; 62
    64d6:	b8 2e       	mov	r11, r24
    64d8:	f4 2e       	mov	r15, r20
    64da:	9c 2c       	mov	r9, r12
	// do all the bindings first (and in this order)
	struct xioDEVICE *d = &ds[dev];					// setup device struct pointer
	d->x = &us[offset];								// bind USART struct to device
    64dc:	8f e2       	ldi	r24, 0x2F	; 47
    64de:	68 9f       	mul	r22, r24
    64e0:	60 01       	movw	r12, r0
    64e2:	11 24       	eor	r1, r1
    64e4:	85 ef       	ldi	r24, 0xF5	; 245
    64e6:	93 e2       	ldi	r25, 0x23	; 35
    64e8:	c8 0e       	add	r12, r24
    64ea:	d9 1e       	adc	r13, r25
    64ec:	6b 2d       	mov	r22, r11
    64ee:	70 e0       	ldi	r23, 0x00	; 0
    64f0:	87 e1       	ldi	r24, 0x17	; 23
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	68 9f       	mul	r22, r24
    64f6:	f0 01       	movw	r30, r0
    64f8:	69 9f       	mul	r22, r25
    64fa:	f0 0d       	add	r31, r0
    64fc:	78 9f       	mul	r23, r24
    64fe:	f0 0d       	add	r31, r0
    6500:	11 24       	eor	r1, r1
    6502:	ec 56       	subi	r30, 0x6C	; 108
    6504:	fb 4d       	sbci	r31, 0xDB	; 219
    6506:	c1 8a       	std	Z+17, r12	; 0x11
    6508:	d2 8a       	std	Z+18, r13	; 0x12
	struct xioUSART *dx = (struct xioUSART *)d->x;	// setup USART struct pointer
	dx->usart = (struct USART_struct *)usart_addr;	// bind USART 
    650a:	d6 01       	movw	r26, r12
    650c:	17 96       	adiw	r26, 0x07	; 7
    650e:	2d 93       	st	X+, r18
    6510:	3c 93       	st	X, r19
    6512:	18 97       	sbiw	r26, 0x08	; 8
	dx->port = (struct PORT_struct *)port_addr;		// bind PORT
    6514:	19 96       	adiw	r26, 0x09	; 9
    6516:	0d 93       	st	X+, r16
    6518:	1c 93       	st	X, r17
    651a:	1a 97       	sbiw	r26, 0x0a	; 10

	// set flags
	xio_setflags(dev, control);		// generic setflags - doesn't validate flags
    651c:	8b 2d       	mov	r24, r11
    651e:	64 2f       	mov	r22, r20
    6520:	75 2f       	mov	r23, r21
    6522:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <xio_setflags>

	// setup internal RX/TX buffers
	dx->rx_buf_head = 1;			// can't use location 0 in circular buffer
    6526:	81 e0       	ldi	r24, 0x01	; 1
    6528:	f6 01       	movw	r30, r12
    652a:	83 83       	std	Z+3, r24	; 0x03
	dx->rx_buf_tail = 1;
    652c:	82 83       	std	Z+2, r24	; 0x02
	dx->tx_buf_head = 1;
    652e:	85 83       	std	Z+5, r24	; 0x05
	dx->tx_buf_tail = 1;
    6530:	84 83       	std	Z+4, r24	; 0x04

	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    6532:	4f 2d       	mov	r20, r15
    6534:	4f 70       	andi	r20, 0x0F	; 15
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
    6536:	09 f4       	brne	.+2      	; 0x653a <xio_init_usart+0x80>
    6538:	45 e0       	ldi	r20, 0x05	; 5
	dx->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    653a:	2b 2d       	mov	r18, r11
    653c:	30 e0       	ldi	r19, 0x00	; 0
    653e:	87 e1       	ldi	r24, 0x17	; 23
    6540:	90 e0       	ldi	r25, 0x00	; 0
    6542:	28 9f       	mul	r18, r24
    6544:	d0 01       	movw	r26, r0
    6546:	29 9f       	mul	r18, r25
    6548:	b0 0d       	add	r27, r0
    654a:	38 9f       	mul	r19, r24
    654c:	b0 0d       	add	r27, r0
    654e:	11 24       	eor	r1, r1
    6550:	ac 56       	subi	r26, 0x6C	; 108
    6552:	bb 4d       	sbci	r27, 0xDB	; 219
    6554:	51 96       	adiw	r26, 0x11	; 17
    6556:	ed 91       	ld	r30, X+
    6558:	fc 91       	ld	r31, X
    655a:	52 97       	sbiw	r26, 0x12	; 18
    655c:	87 81       	ldd	r24, Z+7	; 0x07
    655e:	90 85       	ldd	r25, Z+8	; 0x08
    6560:	24 2f       	mov	r18, r20
    6562:	30 e0       	ldi	r19, 0x00	; 0
    6564:	f9 01       	movw	r30, r18
    6566:	eb 53       	subi	r30, 0x3B	; 59
    6568:	f5 4e       	sbci	r31, 0xE5	; 229
    656a:	44 91       	lpm	r20, Z+
    656c:	fc 01       	movw	r30, r24
    656e:	46 83       	std	Z+6, r20	; 0x06
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    6570:	51 96       	adiw	r26, 0x11	; 17
    6572:	ed 91       	ld	r30, X+
    6574:	fc 91       	ld	r31, X
    6576:	52 97       	sbiw	r26, 0x12	; 18
    6578:	a7 81       	ldd	r26, Z+7	; 0x07
    657a:	b0 85       	ldd	r27, Z+8	; 0x08
    657c:	20 53       	subi	r18, 0x30	; 48
    657e:	35 4e       	sbci	r19, 0xE5	; 229
    6580:	f9 01       	movw	r30, r18
    6582:	f4 90       	lpm	r15, Z+
    6584:	17 96       	adiw	r26, 0x07	; 7
    6586:	fc 92       	st	X, r15
	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
	xio_set_baud_usart(dev, baud);					// usart must be bound first

	dx->usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx
    6588:	d6 01       	movw	r26, r12
    658a:	17 96       	adiw	r26, 0x07	; 7
    658c:	ed 91       	ld	r30, X+
    658e:	fc 91       	ld	r31, X
    6590:	18 97       	sbiw	r26, 0x08	; 8
    6592:	88 e1       	ldi	r24, 0x18	; 24
    6594:	84 83       	std	Z+4, r24	; 0x04
	dx->usart->CTRLA = CTRLA_RXON_TXON;			   // enable tx and rx IRQs
    6596:	17 96       	adiw	r26, 0x07	; 7
    6598:	ed 91       	ld	r30, X+
    659a:	fc 91       	ld	r31, X
    659c:	18 97       	sbiw	r26, 0x08	; 8
    659e:	81 e2       	ldi	r24, 0x21	; 33
    65a0:	83 83       	std	Z+3, r24	; 0x03

	dx->port->DIRCLR = dirclr;
    65a2:	19 96       	adiw	r26, 0x09	; 9
    65a4:	ed 91       	ld	r30, X+
    65a6:	fc 91       	ld	r31, X
    65a8:	1a 97       	sbiw	r26, 0x0a	; 10
    65aa:	e2 82       	std	Z+2, r14	; 0x02
	dx->port->DIRSET = dirset;
    65ac:	19 96       	adiw	r26, 0x09	; 9
    65ae:	ed 91       	ld	r30, X+
    65b0:	fc 91       	ld	r31, X
    65b2:	1a 97       	sbiw	r26, 0x0a	; 10
    65b4:	91 82       	std	Z+1, r9	; 0x01
	dx->port->OUTCLR = outclr;
    65b6:	19 96       	adiw	r26, 0x09	; 9
    65b8:	ed 91       	ld	r30, X+
    65ba:	fc 91       	ld	r31, X
    65bc:	1a 97       	sbiw	r26, 0x0a	; 10
    65be:	a6 82       	std	Z+6, r10	; 0x06
	dx->port->OUTSET = outset;
    65c0:	19 96       	adiw	r26, 0x09	; 9
    65c2:	ed 91       	ld	r30, X+
    65c4:	fc 91       	ld	r31, X
    65c6:	1a 97       	sbiw	r26, 0x0a	; 10
    65c8:	85 82       	std	Z+5, r8	; 0x05
}
    65ca:	cf 91       	pop	r28
    65cc:	df 91       	pop	r29
    65ce:	1f 91       	pop	r17
    65d0:	0f 91       	pop	r16
    65d2:	ff 90       	pop	r15
    65d4:	ef 90       	pop	r14
    65d6:	df 90       	pop	r13
    65d8:	cf 90       	pop	r12
    65da:	bf 90       	pop	r11
    65dc:	af 90       	pop	r10
    65de:	9f 90       	pop	r9
    65e0:	8f 90       	pop	r8
    65e2:	08 95       	ret

000065e4 <xio_open_usb>:
#define USB ds[XIO_DEV_USB]						// device struct accessoor
#define USBu us[XIO_DEV_USB_OFFSET]				// usart extended struct accessor


/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
    65e4:	80 91 be 24 	lds	r24, 0x24BE
    65e8:	90 91 bf 24 	lds	r25, 0x24BF
    65ec:	08 95       	ret

000065ee <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)	//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    65ee:	1f 92       	push	r1
    65f0:	0f 92       	push	r0
    65f2:	0f b6       	in	r0, 0x3f	; 63
    65f4:	0f 92       	push	r0
    65f6:	0b b6       	in	r0, 0x3b	; 59
    65f8:	0f 92       	push	r0
    65fa:	11 24       	eor	r1, r1
    65fc:	8f 93       	push	r24
    65fe:	9f 93       	push	r25
    6600:	af 93       	push	r26
    6602:	bf 93       	push	r27
    6604:	ef 93       	push	r30
    6606:	ff 93       	push	r31
	if (USBu.tx_buf_head == USBu.tx_buf_tail) {	// buffer empty - disable ints
    6608:	90 91 29 24 	lds	r25, 0x2429
    660c:	80 91 28 24 	lds	r24, 0x2428
    6610:	98 17       	cp	r25, r24
    6612:	39 f4       	brne	.+14     	; 0x6622 <__vector_26+0x34>
		USBu.usart->CTRLA = CTRLA_RXON_TXOFF;	// won't work if you just &= it
    6614:	e0 91 2b 24 	lds	r30, 0x242B
    6618:	f0 91 2c 24 	lds	r31, 0x242C
    661c:	80 e2       	ldi	r24, 0x20	; 32
    661e:	83 83       	std	Z+3, r24	; 0x03
    6620:	1d c0       	rjmp	.+58     	; 0x665c <__vector_26+0x6e>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(USB.flags)) {
    6622:	80 91 ab 24 	lds	r24, 0x24AB
    6626:	90 91 ac 24 	lds	r25, 0x24AC
    662a:	93 fd       	sbrc	r25, 3
    662c:	17 c0       	rjmp	.+46     	; 0x665c <__vector_26+0x6e>
		if (--(USBu.tx_buf_tail) == 0) {		// advance tail and wrap 
    662e:	80 91 28 24 	lds	r24, 0x2428
    6632:	81 50       	subi	r24, 0x01	; 1
    6634:	80 93 28 24 	sts	0x2428, r24
    6638:	80 91 28 24 	lds	r24, 0x2428
    663c:	88 23       	and	r24, r24
    663e:	19 f4       	brne	.+6      	; 0x6646 <__vector_26+0x58>
			USBu.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one err (OBOE)
    6640:	81 e1       	ldi	r24, 0x11	; 17
    6642:	80 93 28 24 	sts	0x2428, r24
		}
		USBu.usart->DATA = USBu.tx_buf[USBu.tx_buf_tail]; // write to TX DATA reg
    6646:	e0 91 2b 24 	lds	r30, 0x242B
    664a:	f0 91 2c 24 	lds	r31, 0x242C
    664e:	a0 91 28 24 	lds	r26, 0x2428
    6652:	b0 e0       	ldi	r27, 0x00	; 0
    6654:	af 5b       	subi	r26, 0xBF	; 191
    6656:	bb 4d       	sbci	r27, 0xDB	; 219
    6658:	8c 91       	ld	r24, X
    665a:	80 83       	st	Z, r24
	}
}
    665c:	ff 91       	pop	r31
    665e:	ef 91       	pop	r30
    6660:	bf 91       	pop	r27
    6662:	af 91       	pop	r26
    6664:	9f 91       	pop	r25
    6666:	8f 91       	pop	r24
    6668:	0f 90       	pop	r0
    666a:	0b be       	out	0x3b, r0	; 59
    666c:	0f 90       	pop	r0
    666e:	0f be       	out	0x3f, r0	; 63
    6670:	0f 90       	pop	r0
    6672:	1f 90       	pop	r1
    6674:	18 95       	reti

00006676 <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular buffers work
 */

ISR(USB_RX_ISR_vect)	//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    6676:	1f 92       	push	r1
    6678:	0f 92       	push	r0
    667a:	0f b6       	in	r0, 0x3f	; 63
    667c:	0f 92       	push	r0
    667e:	0b b6       	in	r0, 0x3b	; 59
    6680:	0f 92       	push	r0
    6682:	11 24       	eor	r1, r1
    6684:	2f 93       	push	r18
    6686:	3f 93       	push	r19
    6688:	4f 93       	push	r20
    668a:	5f 93       	push	r21
    668c:	6f 93       	push	r22
    668e:	7f 93       	push	r23
    6690:	8f 93       	push	r24
    6692:	9f 93       	push	r25
    6694:	af 93       	push	r26
    6696:	bf 93       	push	r27
    6698:	ef 93       	push	r30
    669a:	ff 93       	push	r31
	uint8_t c = USBu.usart->DATA;				// can only read DATA once
    669c:	e0 91 2b 24 	lds	r30, 0x242B
    66a0:	f0 91 2c 24 	lds	r31, 0x242C
    66a4:	20 81       	ld	r18, Z

	// trap signals - do not insert character into RX queue
	if (c == ETX) {								// trap ^c signal
    66a6:	23 30       	cpi	r18, 0x03	; 3
    66a8:	31 f4       	brne	.+12     	; 0x66b6 <__vector_25+0x40>
		USB.sig = XIO_SIG_KILL;					// set signal value
    66aa:	84 e0       	ldi	r24, 0x04	; 4
    66ac:	80 93 ae 24 	sts	0x24AE, r24
		signal_etx();							// call app-specific signal handler
    66b0:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <signal_etx>
    66b4:	25 c0       	rjmp	.+74     	; 0x6700 <__vector_25+0x8a>
		return;
	}

	// normal character path
	if ((--USBu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    66b6:	80 91 27 24 	lds	r24, 0x2427
    66ba:	81 50       	subi	r24, 0x01	; 1
    66bc:	80 93 27 24 	sts	0x2427, r24
    66c0:	80 91 27 24 	lds	r24, 0x2427
    66c4:	88 23       	and	r24, r24
    66c6:	19 f4       	brne	.+6      	; 0x66ce <__vector_25+0x58>
		USBu.rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    66c8:	81 e1       	ldi	r24, 0x11	; 17
    66ca:	80 93 27 24 	sts	0x2427, r24
	}
	if (USBu.rx_buf_head != USBu.rx_buf_tail) {	// write char unless buffer full
    66ce:	90 91 27 24 	lds	r25, 0x2427
    66d2:	80 91 26 24 	lds	r24, 0x2426
    66d6:	98 17       	cp	r25, r24
    66d8:	39 f0       	breq	.+14     	; 0x66e8 <__vector_25+0x72>
		USBu.rx_buf[USBu.rx_buf_head] = c;
    66da:	e0 91 27 24 	lds	r30, 0x2427
    66de:	f0 e0       	ldi	r31, 0x00	; 0
    66e0:	eb 50       	subi	r30, 0x0B	; 11
    66e2:	fc 4d       	sbci	r31, 0xDC	; 220
    66e4:	22 af       	std	Z+58, r18	; 0x3a
    66e6:	0c c0       	rjmp	.+24     	; 0x6700 <__vector_25+0x8a>
		return;
	}
	// buffer-full handling
	if ((++USBu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    66e8:	80 91 27 24 	lds	r24, 0x2427
    66ec:	8f 5f       	subi	r24, 0xFF	; 255
    66ee:	80 93 27 24 	sts	0x2427, r24
    66f2:	80 91 27 24 	lds	r24, 0x2427
    66f6:	82 31       	cpi	r24, 0x12	; 18
    66f8:	18 f0       	brcs	.+6      	; 0x6700 <__vector_25+0x8a>
		USBu.rx_buf_head = 1;
    66fa:	81 e0       	ldi	r24, 0x01	; 1
    66fc:	80 93 27 24 	sts	0x2427, r24
	}
	// activate flow control here or before it gets to this level
}
    6700:	ff 91       	pop	r31
    6702:	ef 91       	pop	r30
    6704:	bf 91       	pop	r27
    6706:	af 91       	pop	r26
    6708:	9f 91       	pop	r25
    670a:	8f 91       	pop	r24
    670c:	7f 91       	pop	r23
    670e:	6f 91       	pop	r22
    6710:	5f 91       	pop	r21
    6712:	4f 91       	pop	r20
    6714:	3f 91       	pop	r19
    6716:	2f 91       	pop	r18
    6718:	0f 90       	pop	r0
    671a:	0b be       	out	0x3b, r0	; 59
    671c:	0f 90       	pop	r0
    671e:	0f be       	out	0x3f, r0	; 63
    6720:	0f 90       	pop	r0
    6722:	1f 90       	pop	r1
    6724:	18 95       	reti

00006726 <xio_init_usb>:
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
void xio_queue_RX_string_usb(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_USB, buf);}
void xio_init_usb()	// USB inits
{
    6726:	8f 92       	push	r8
    6728:	af 92       	push	r10
    672a:	cf 92       	push	r12
    672c:	ef 92       	push	r14
    672e:	ff 92       	push	r15
    6730:	0f 93       	push	r16
    6732:	1f 93       	push	r17
	xio_init_dev(XIO_DEV_USB, xio_open_usb, xio_setflags_usb, xio_putc_usb, xio_getc_usb, xio_readln_usb);
    6734:	81 e0       	ldi	r24, 0x01	; 1
    6736:	62 ef       	ldi	r22, 0xF2	; 242
    6738:	72 e3       	ldi	r23, 0x32	; 50
    673a:	4f ed       	ldi	r20, 0xDF	; 223
    673c:	53 e3       	ldi	r21, 0x33	; 51
    673e:	28 ed       	ldi	r18, 0xD8	; 216
    6740:	33 e3       	ldi	r19, 0x33	; 51
    6742:	03 ed       	ldi	r16, 0xD3	; 211
    6744:	13 e3       	ldi	r17, 0x33	; 51
    6746:	fc ec       	ldi	r31, 0xCC	; 204
    6748:	ef 2e       	mov	r14, r31
    674a:	f3 e3       	ldi	r31, 0x33	; 51
    674c:	ff 2e       	mov	r15, r31
    674e:	0e 94 96 28 	call	0x512c	; 0x512c <xio_init_dev>
	xio_init_usart(XIO_DEV_USB, XIO_DEV_USB_OFFSET, USB_INIT_bm, &USB_USART, &USB_PORT, USB_DIRCLR_bm, USB_DIRSET_bm, USB_OUTCLR_bm, USB_OUTSET_bm);
    6752:	81 e0       	ldi	r24, 0x01	; 1
    6754:	61 e0       	ldi	r22, 0x01	; 1
    6756:	45 e7       	ldi	r20, 0x75	; 117
    6758:	55 e5       	ldi	r21, 0x55	; 85
    675a:	20 ea       	ldi	r18, 0xA0	; 160
    675c:	38 e0       	ldi	r19, 0x08	; 8
    675e:	00 e4       	ldi	r16, 0x40	; 64
    6760:	16 e0       	ldi	r17, 0x06	; 6
    6762:	e5 e0       	ldi	r30, 0x05	; 5
    6764:	ee 2e       	mov	r14, r30
    6766:	7a e0       	ldi	r23, 0x0A	; 10
    6768:	c7 2e       	mov	r12, r23
    676a:	aa 24       	eor	r10, r10
    676c:	9a e0       	ldi	r25, 0x0A	; 10
    676e:	89 2e       	mov	r8, r25
    6770:	0e 94 5d 32 	call	0x64ba	; 0x64ba <xio_init_usart>
}
    6774:	1f 91       	pop	r17
    6776:	0f 91       	pop	r16
    6778:	ff 90       	pop	r15
    677a:	ef 90       	pop	r14
    677c:	cf 90       	pop	r12
    677e:	af 90       	pop	r10
    6780:	8f 90       	pop	r8
    6782:	08 95       	ret

00006784 <xio_queue_RX_string_usb>:
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
void xio_queue_RX_string_usb(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_USB, buf);}
    6784:	bc 01       	movw	r22, r24
    6786:	81 e0       	ldi	r24, 0x01	; 1
    6788:	0e 94 46 32 	call	0x648c	; 0x648c <xio_queue_RX_string_usart>
    678c:	08 95       	ret

0000678e <xio_queue_RX_char_usb>:
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
    678e:	68 2f       	mov	r22, r24
    6790:	81 e0       	ldi	r24, 0x01	; 1
    6792:	0e 94 16 32 	call	0x642c	; 0x642c <xio_queue_RX_char_usart>
    6796:	08 95       	ret

00006798 <xio_readln_usb>:
/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
    6798:	9c 01       	movw	r18, r24
    679a:	46 2f       	mov	r20, r22
    679c:	81 e0       	ldi	r24, 0x01	; 1
    679e:	b9 01       	movw	r22, r18
    67a0:	0e 94 01 31 	call	0x6202	; 0x6202 <xio_readln_usart>
    67a4:	08 95       	ret

000067a6 <xio_getc_usb>:

/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
    67a6:	bc 01       	movw	r22, r24
    67a8:	81 e0       	ldi	r24, 0x01	; 1
    67aa:	0e 94 1e 30 	call	0x603c	; 0x603c <xio_getc_usart>
    67ae:	08 95       	ret

000067b0 <xio_putc_usb>:


/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
    67b0:	98 2f       	mov	r25, r24
    67b2:	ab 01       	movw	r20, r22
    67b4:	81 e0       	ldi	r24, 0x01	; 1
    67b6:	69 2f       	mov	r22, r25
    67b8:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <xio_putc_usart>
    67bc:	08 95       	ret

000067be <xio_setflags_usb>:
#define USBu us[XIO_DEV_USB_OFFSET]				// usart extended struct accessor


/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
    67be:	bc 01       	movw	r22, r24
    67c0:	81 e0       	ldi	r24, 0x01	; 1
    67c2:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <xio_setflags>
    67c6:	08 95       	ret

000067c8 <xio_open_rs485>:
extern struct xioUSART us[XIO_DEV_USART_COUNT];	// ref USART extended IO structs
#define RS ds[XIO_DEV_RS485]					// device struct accessoor
#define RSu us[XIO_DEV_RS485]					// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
    67c8:	80 91 a7 24 	lds	r24, 0x24A7
    67cc:	90 91 a8 24 	lds	r25, 0x24A8
    67d0:	08 95       	ret

000067d2 <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC1 data register empty
{
    67d2:	1f 92       	push	r1
    67d4:	0f 92       	push	r0
    67d6:	0f b6       	in	r0, 0x3f	; 63
    67d8:	0f 92       	push	r0
    67da:	0b b6       	in	r0, 0x3b	; 59
    67dc:	0f 92       	push	r0
    67de:	11 24       	eor	r1, r1
    67e0:	8f 93       	push	r24
    67e2:	9f 93       	push	r25
    67e4:	af 93       	push	r26
    67e6:	bf 93       	push	r27
    67e8:	ef 93       	push	r30
    67ea:	ff 93       	push	r31
	if (RSu.tx_buf_head == RSu.tx_buf_tail) {	// buffer empty - disable ints (Note)
    67ec:	90 91 fa 23 	lds	r25, 0x23FA
    67f0:	80 91 f9 23 	lds	r24, 0x23F9
    67f4:	98 17       	cp	r25, r24
    67f6:	39 f4       	brne	.+14     	; 0x6806 <__vector_29+0x34>
		RSu.usart->CTRLA = CTRLA_RXON_TXOFF_TXCON;	// doesn't work if you just &= it
    67f8:	e0 91 fc 23 	lds	r30, 0x23FC
    67fc:	f0 91 fd 23 	lds	r31, 0x23FD
    6800:	84 e2       	ldi	r24, 0x24	; 36
    6802:	83 83       	std	Z+3, r24	; 0x03
    6804:	23 c0       	rjmp	.+70     	; 0x684c <__vector_29+0x7a>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(RS.flags)) {
    6806:	80 91 94 24 	lds	r24, 0x2494
    680a:	90 91 95 24 	lds	r25, 0x2495
    680e:	93 fd       	sbrc	r25, 3
    6810:	1d c0       	rjmp	.+58     	; 0x684c <__vector_29+0x7a>
		if (--(RSu.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    6812:	80 91 f9 23 	lds	r24, 0x23F9
    6816:	81 50       	subi	r24, 0x01	; 1
    6818:	80 93 f9 23 	sts	0x23F9, r24
    681c:	80 91 f9 23 	lds	r24, 0x23F9
    6820:	88 23       	and	r24, r24
    6822:	19 f4       	brne	.+6      	; 0x682a <__vector_29+0x58>
			RSu.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6824:	81 e1       	ldi	r24, 0x11	; 17
    6826:	80 93 f9 23 	sts	0x23F9, r24
		}
		RSu.port->OUTSET = (RS485_DE_bm | RS485_RE_bm);	// enable DE (active hi)
    682a:	e0 91 fe 23 	lds	r30, 0x23FE
    682e:	f0 91 ff 23 	lds	r31, 0x23FF
    6832:	80 e3       	ldi	r24, 0x30	; 48
    6834:	85 83       	std	Z+5, r24	; 0x05
														// disable RE (active lo)
		RSu.usart->DATA = RSu.tx_buf[RSu.tx_buf_tail];	// write char to TX DATA reg
    6836:	a0 91 fc 23 	lds	r26, 0x23FC
    683a:	b0 91 fd 23 	lds	r27, 0x23FD
    683e:	e0 91 f9 23 	lds	r30, 0x23F9
    6842:	f0 e0       	ldi	r31, 0x00	; 0
    6844:	eb 50       	subi	r30, 0x0B	; 11
    6846:	fc 4d       	sbci	r31, 0xDC	; 220
    6848:	85 8d       	ldd	r24, Z+29	; 0x1d
    684a:	8c 93       	st	X, r24
	}
}
    684c:	ff 91       	pop	r31
    684e:	ef 91       	pop	r30
    6850:	bf 91       	pop	r27
    6852:	af 91       	pop	r26
    6854:	9f 91       	pop	r25
    6856:	8f 91       	pop	r24
    6858:	0f 90       	pop	r0
    685a:	0b be       	out	0x3b, r0	; 59
    685c:	0f 90       	pop	r0
    685e:	0f be       	out	0x3f, r0	; 63
    6860:	0f 90       	pop	r0
    6862:	1f 90       	pop	r1
    6864:	18 95       	reti

00006866 <__vector_30>:

/* Note: Finding a buffer empty condition on the first byte of a string is common 
 * as the TX byte is often written by the task itself */

ISR(RS485_TXC_ISR_vect)		// ISR(USARTC1_TXC_vect) // USARTC1 transmission complete
{
    6866:	1f 92       	push	r1
    6868:	0f 92       	push	r0
    686a:	0f b6       	in	r0, 0x3f	; 63
    686c:	0f 92       	push	r0
    686e:	0b b6       	in	r0, 0x3b	; 59
    6870:	0f 92       	push	r0
    6872:	11 24       	eor	r1, r1
    6874:	8f 93       	push	r24
    6876:	ef 93       	push	r30
    6878:	ff 93       	push	r31
		RSu.port->OUTCLR = (RS485_DE_bm | RS485_RE_bm);	// disable DE (active hi)
    687a:	e0 91 fe 23 	lds	r30, 0x23FE
    687e:	f0 91 ff 23 	lds	r31, 0x23FF
    6882:	80 e3       	ldi	r24, 0x30	; 48
    6884:	86 83       	std	Z+6, r24	; 0x06
														// enable RE (active lo)
}
    6886:	ff 91       	pop	r31
    6888:	ef 91       	pop	r30
    688a:	8f 91       	pop	r24
    688c:	0f 90       	pop	r0
    688e:	0b be       	out	0x3b, r0	; 59
    6890:	0f 90       	pop	r0
    6892:	0f be       	out	0x3f, r0	; 63
    6894:	0f 90       	pop	r0
    6896:	1f 90       	pop	r1
    6898:	18 95       	reti

0000689a <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)	//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    689a:	1f 92       	push	r1
    689c:	0f 92       	push	r0
    689e:	0f b6       	in	r0, 0x3f	; 63
    68a0:	0f 92       	push	r0
    68a2:	0b b6       	in	r0, 0x3b	; 59
    68a4:	0f 92       	push	r0
    68a6:	11 24       	eor	r1, r1
    68a8:	2f 93       	push	r18
    68aa:	3f 93       	push	r19
    68ac:	4f 93       	push	r20
    68ae:	5f 93       	push	r21
    68b0:	6f 93       	push	r22
    68b2:	7f 93       	push	r23
    68b4:	8f 93       	push	r24
    68b6:	9f 93       	push	r25
    68b8:	af 93       	push	r26
    68ba:	bf 93       	push	r27
    68bc:	ef 93       	push	r30
    68be:	ff 93       	push	r31
	uint8_t c = RSu.usart->DATA;				// can only read DATA once
    68c0:	e0 91 fc 23 	lds	r30, 0x23FC
    68c4:	f0 91 fd 23 	lds	r31, 0x23FD
    68c8:	20 81       	ld	r18, Z

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    68ca:	23 30       	cpi	r18, 0x03	; 3
    68cc:	31 f4       	brne	.+12     	; 0x68da <__vector_28+0x40>
		RS.sig = XIO_SIG_KILL;					// set signal value
    68ce:	84 e0       	ldi	r24, 0x04	; 4
    68d0:	80 93 97 24 	sts	0x2497, r24
		signal_etx();							// call app-specific signal handler
    68d4:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <signal_etx>
    68d8:	25 c0       	rjmp	.+74     	; 0x6924 <__vector_28+0x8a>
		return;
	}

	// normal path
	if ((--RSu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    68da:	80 91 f8 23 	lds	r24, 0x23F8
    68de:	81 50       	subi	r24, 0x01	; 1
    68e0:	80 93 f8 23 	sts	0x23F8, r24
    68e4:	80 91 f8 23 	lds	r24, 0x23F8
    68e8:	88 23       	and	r24, r24
    68ea:	19 f4       	brne	.+6      	; 0x68f2 <__vector_28+0x58>
		RSu.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    68ec:	81 e1       	ldi	r24, 0x11	; 17
    68ee:	80 93 f8 23 	sts	0x23F8, r24
	}
	if (RSu.rx_buf_head != RSu.rx_buf_tail) {	// write char unless buffer full
    68f2:	90 91 f8 23 	lds	r25, 0x23F8
    68f6:	80 91 f7 23 	lds	r24, 0x23F7
    68fa:	98 17       	cp	r25, r24
    68fc:	39 f0       	breq	.+14     	; 0x690c <__vector_28+0x72>
		RSu.rx_buf[RSu.rx_buf_head] = c;		// (= USARTC0.DATA;)
    68fe:	e0 91 f8 23 	lds	r30, 0x23F8
    6902:	f0 e0       	ldi	r31, 0x00	; 0
    6904:	eb 50       	subi	r30, 0x0B	; 11
    6906:	fc 4d       	sbci	r31, 0xDC	; 220
    6908:	23 87       	std	Z+11, r18	; 0x0b
    690a:	0c c0       	rjmp	.+24     	; 0x6924 <__vector_28+0x8a>
		return;
	}
	// buffer-full handling
	if ((++RSu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    690c:	80 91 f8 23 	lds	r24, 0x23F8
    6910:	8f 5f       	subi	r24, 0xFF	; 255
    6912:	80 93 f8 23 	sts	0x23F8, r24
    6916:	80 91 f8 23 	lds	r24, 0x23F8
    691a:	82 31       	cpi	r24, 0x12	; 18
    691c:	18 f0       	brcs	.+6      	; 0x6924 <__vector_28+0x8a>
		RSu.rx_buf_head = 1;
    691e:	81 e0       	ldi	r24, 0x01	; 1
    6920:	80 93 f8 23 	sts	0x23F8, r24
	}
	// activate flow control here or before it gets to this level
}
    6924:	ff 91       	pop	r31
    6926:	ef 91       	pop	r30
    6928:	bf 91       	pop	r27
    692a:	af 91       	pop	r26
    692c:	9f 91       	pop	r25
    692e:	8f 91       	pop	r24
    6930:	7f 91       	pop	r23
    6932:	6f 91       	pop	r22
    6934:	5f 91       	pop	r21
    6936:	4f 91       	pop	r20
    6938:	3f 91       	pop	r19
    693a:	2f 91       	pop	r18
    693c:	0f 90       	pop	r0
    693e:	0b be       	out	0x3b, r0	; 59
    6940:	0f 90       	pop	r0
    6942:	0f be       	out	0x3f, r0	; 63
    6944:	0f 90       	pop	r0
    6946:	1f 90       	pop	r1
    6948:	18 95       	reti

0000694a <xio_init_rs485>:
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
void xio_queue_RX_string_rs485(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_RS485, buf);}
void xio_init_rs485()	// RS485 init
{
    694a:	8f 92       	push	r8
    694c:	af 92       	push	r10
    694e:	cf 92       	push	r12
    6950:	ef 92       	push	r14
    6952:	ff 92       	push	r15
    6954:	0f 93       	push	r16
    6956:	1f 93       	push	r17
	xio_init_dev(XIO_DEV_RS485, xio_open_rs485, xio_setflags_rs485, xio_putc_rs485, xio_getc_rs485, xio_readln_rs485);
    6958:	80 e0       	ldi	r24, 0x00	; 0
    695a:	64 ee       	ldi	r22, 0xE4	; 228
    695c:	73 e3       	ldi	r23, 0x33	; 51
    695e:	42 ef       	ldi	r20, 0xF2	; 242
    6960:	54 e3       	ldi	r21, 0x34	; 52
    6962:	2b ee       	ldi	r18, 0xEB	; 235
    6964:	34 e3       	ldi	r19, 0x34	; 52
    6966:	06 ee       	ldi	r16, 0xE6	; 230
    6968:	14 e3       	ldi	r17, 0x34	; 52
    696a:	af ed       	ldi	r26, 0xDF	; 223
    696c:	ea 2e       	mov	r14, r26
    696e:	a4 e3       	ldi	r26, 0x34	; 52
    6970:	fa 2e       	mov	r15, r26
    6972:	0e 94 96 28 	call	0x512c	; 0x512c <xio_init_dev>
	xio_init_usart(XIO_DEV_RS485, XIO_DEV_RS485_OFFSET, RS485_INIT_bm, &RS485_USART, &RS485_PORT, RS485_DIRCLR_bm, RS485_DIRSET_bm, RS485_OUTCLR_bm, RS485_OUTSET_bm);
    6976:	80 e0       	ldi	r24, 0x00	; 0
    6978:	60 e0       	ldi	r22, 0x00	; 0
    697a:	45 e7       	ldi	r20, 0x75	; 117
    697c:	55 e1       	ldi	r21, 0x15	; 21
    697e:	20 eb       	ldi	r18, 0xB0	; 176
    6980:	38 e0       	ldi	r19, 0x08	; 8
    6982:	00 e4       	ldi	r16, 0x40	; 64
    6984:	16 e0       	ldi	r17, 0x06	; 6
    6986:	f0 e4       	ldi	r31, 0x40	; 64
    6988:	ef 2e       	mov	r14, r31
    698a:	e0 eb       	ldi	r30, 0xB0	; 176
    698c:	ce 2e       	mov	r12, r30
    698e:	70 e3       	ldi	r23, 0x30	; 48
    6990:	a7 2e       	mov	r10, r23
    6992:	90 e8       	ldi	r25, 0x80	; 128
    6994:	89 2e       	mov	r8, r25
    6996:	0e 94 5d 32 	call	0x64ba	; 0x64ba <xio_init_usart>
}
    699a:	1f 91       	pop	r17
    699c:	0f 91       	pop	r16
    699e:	ff 90       	pop	r15
    69a0:	ef 90       	pop	r14
    69a2:	cf 90       	pop	r12
    69a4:	af 90       	pop	r10
    69a6:	8f 90       	pop	r8
    69a8:	08 95       	ret

000069aa <xio_queue_RX_string_rs485>:
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
void xio_queue_RX_string_rs485(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_RS485, buf);}
    69aa:	bc 01       	movw	r22, r24
    69ac:	80 e0       	ldi	r24, 0x00	; 0
    69ae:	0e 94 46 32 	call	0x648c	; 0x648c <xio_queue_RX_string_usart>
    69b2:	08 95       	ret

000069b4 <xio_queue_RX_char_rs485>:
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
    69b4:	68 2f       	mov	r22, r24
    69b6:	80 e0       	ldi	r24, 0x00	; 0
    69b8:	0e 94 16 32 	call	0x642c	; 0x642c <xio_queue_RX_char_usart>
    69bc:	08 95       	ret

000069be <xio_readln_rs485>:
/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
    69be:	9c 01       	movw	r18, r24
    69c0:	46 2f       	mov	r20, r22
    69c2:	80 e0       	ldi	r24, 0x00	; 0
    69c4:	b9 01       	movw	r22, r18
    69c6:	0e 94 01 31 	call	0x6202	; 0x6202 <xio_readln_usart>
    69ca:	08 95       	ret

000069cc <xio_getc_rs485>:

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
    69cc:	bc 01       	movw	r22, r24
    69ce:	80 e0       	ldi	r24, 0x00	; 0
    69d0:	0e 94 1e 30 	call	0x603c	; 0x603c <xio_getc_usart>
    69d4:	08 95       	ret

000069d6 <xio_putc_rs485>:
#define RSu us[XIO_DEV_RS485]					// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
    69d6:	98 2f       	mov	r25, r24
    69d8:	ab 01       	movw	r20, r22
    69da:	80 e0       	ldi	r24, 0x00	; 0
    69dc:	69 2f       	mov	r22, r25
    69de:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <xio_putc_usart>
    69e2:	08 95       	ret

000069e4 <xio_setflags_rs485>:
#define RS ds[XIO_DEV_RS485]					// device struct accessoor
#define RSu us[XIO_DEV_RS485]					// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
    69e4:	bc 01       	movw	r22, r24
    69e6:	80 e0       	ldi	r24, 0x00	; 0
    69e8:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <xio_setflags>
    69ec:	08 95       	ret

000069ee <xio_open_pgm>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

struct __file * xio_open_pgm(const prog_char *addr)
{
	PGM.flags &= XIO_FLAG_RESET_gm;			// reset flag signaling bits
    69ee:	20 91 d9 24 	lds	r18, 0x24D9
    69f2:	30 91 da 24 	lds	r19, 0x24DA
    69f6:	3f 70       	andi	r19, 0x0F	; 15
    69f8:	20 93 d9 24 	sts	0x24D9, r18
    69fc:	30 93 da 24 	sts	0x24DA, r19
	PGM.sig = 0;							// reset signal
    6a00:	10 92 dc 24 	sts	0x24DC, r1
	PGMf.pgmbase_P = (PROGMEM char *)addr;	// might want to range check this
    6a04:	80 93 86 24 	sts	0x2486, r24
    6a08:	90 93 87 24 	sts	0x2487, r25
	PGMf.len = 0;							// initialize buffer pointer
    6a0c:	10 92 84 24 	sts	0x2484, r1
    6a10:	10 92 85 24 	sts	0x2485, r1
	return(PGM.fdev);							// return pointer to the fdev stream
}
    6a14:	80 91 ec 24 	lds	r24, 0x24EC
    6a18:	90 91 ed 24 	lds	r25, 0x24ED
    6a1c:	08 95       	ret

00006a1e <xio_putc_pgm>:
 */

int xio_putc_pgm(const char c, struct __file *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    6a1e:	8f ef       	ldi	r24, 0xFF	; 255
    6a20:	9f ef       	ldi	r25, 0xFF	; 255
    6a22:	08 95       	ret

00006a24 <xio_readln_pgm>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_pgm(char *buf, const uint8_t size)
{
    6a24:	9c 01       	movw	r18, r24
	if (!(PGMf.pgmbase_P)) {					// return error if no file is open
    6a26:	80 91 86 24 	lds	r24, 0x2486
    6a2a:	90 91 87 24 	lds	r25, 0x2487
    6a2e:	89 2b       	or	r24, r25
    6a30:	19 f4       	brne	.+6      	; 0x6a38 <xio_readln_pgm+0x14>
    6a32:	26 e0       	ldi	r18, 0x06	; 6
    6a34:	30 e0       	ldi	r19, 0x00	; 0
    6a36:	1b c0       	rjmp	.+54     	; 0x6a6e <xio_readln_pgm+0x4a>
		return (XIO_FILE_NOT_OPEN);
	}
	PGM.sig = XIO_SIG_OK;						// initialize signal
    6a38:	10 92 dc 24 	sts	0x24DC, r1
	if (fgets(buf, size, PGM.fdev) == NULL) {
    6a3c:	40 91 ec 24 	lds	r20, 0x24EC
    6a40:	50 91 ed 24 	lds	r21, 0x24ED
    6a44:	c9 01       	movw	r24, r18
    6a46:	70 e0       	ldi	r23, 0x00	; 0
    6a48:	0e 94 19 48 	call	0x9032	; 0x9032 <fgets>
    6a4c:	89 2b       	or	r24, r25
    6a4e:	19 f0       	breq	.+6      	; 0x6a56 <xio_readln_pgm+0x32>
    6a50:	20 e0       	ldi	r18, 0x00	; 0
    6a52:	30 e0       	ldi	r19, 0x00	; 0
    6a54:	0c c0       	rjmp	.+24     	; 0x6a6e <xio_readln_pgm+0x4a>
		PGMf.pgmbase_P = NULL;
    6a56:	10 92 86 24 	sts	0x2486, r1
    6a5a:	10 92 87 24 	sts	0x2487, r1
		clearerr(PGM.fdev);
    6a5e:	80 91 ec 24 	lds	r24, 0x24EC
    6a62:	90 91 ed 24 	lds	r25, 0x24ED
    6a66:	0e 94 14 48 	call	0x9028	; 0x9028 <clearerr>
    6a6a:	25 e0       	ldi	r18, 0x05	; 5
    6a6c:	30 e0       	ldi	r19, 0x00	; 0
		return (XIO_EOF);
	}
	return (XIO_OK);
}
    6a6e:	c9 01       	movw	r24, r18
    6a70:	08 95       	ret

00006a72 <xio_getc_pgm>:
 */

int xio_getc_pgm(struct __file *stream)
{

	if (PGM.flags & XIO_FLAG_EOF_bm) {
    6a72:	20 91 d9 24 	lds	r18, 0x24D9
    6a76:	30 91 da 24 	lds	r19, 0x24DA
    6a7a:	35 ff       	sbrs	r19, 5
    6a7c:	06 c0       	rjmp	.+12     	; 0x6a8a <xio_getc_pgm+0x18>
		PGM.sig = XIO_SIG_EOF;
    6a7e:	83 e0       	ldi	r24, 0x03	; 3
    6a80:	80 93 dc 24 	sts	0x24DC, r24
    6a84:	2e ef       	ldi	r18, 0xFE	; 254
    6a86:	3f ef       	ldi	r19, 0xFF	; 255
    6a88:	3e c0       	rjmp	.+124    	; 0x6b06 <xio_getc_pgm+0x94>
		return (_FDEV_EOF);
	}
	if ((PGM.c = pgm_read_byte(&PGMf.pgmbase_P[PGMf.len])) == NUL) {
    6a8a:	80 91 84 24 	lds	r24, 0x2484
    6a8e:	90 91 85 24 	lds	r25, 0x2485
    6a92:	e0 91 86 24 	lds	r30, 0x2486
    6a96:	f0 91 87 24 	lds	r31, 0x2487
    6a9a:	e8 0f       	add	r30, r24
    6a9c:	f9 1f       	adc	r31, r25
    6a9e:	e4 91       	lpm	r30, Z+
    6aa0:	e0 93 dd 24 	sts	0x24DD, r30
    6aa4:	ee 23       	and	r30, r30
    6aa6:	29 f4       	brne	.+10     	; 0x6ab2 <xio_getc_pgm+0x40>
		PGM.flags |= XIO_FLAG_EOF_bm;
    6aa8:	30 62       	ori	r19, 0x20	; 32
    6aaa:	20 93 d9 24 	sts	0x24D9, r18
    6aae:	30 93 da 24 	sts	0x24DA, r19
	}
	++PGMf.len;
    6ab2:	01 96       	adiw	r24, 0x01	; 1
    6ab4:	80 93 84 24 	sts	0x2484, r24
    6ab8:	90 93 85 24 	sts	0x2485, r25
	if (!LINEMODE(PGM.flags)) {			// processing is simple if not LINEMODE
    6abc:	90 91 d9 24 	lds	r25, 0x24D9
    6ac0:	96 fd       	sbrc	r25, 6
    6ac2:	03 c0       	rjmp	.+6      	; 0x6aca <xio_getc_pgm+0x58>
		if (ECHO(PGM.flags)) {
    6ac4:	94 ff       	sbrs	r25, 4
    6ac6:	1b c0       	rjmp	.+54     	; 0x6afe <xio_getc_pgm+0x8c>
    6ac8:	11 c0       	rjmp	.+34     	; 0x6aec <xio_getc_pgm+0x7a>
			putchar(PGM.c);
		}
		return (PGM.c);
	}
	// now do the LINEMODE stuff
	if (PGM.c == NUL) {					// perform newline substitutions
    6aca:	80 91 dd 24 	lds	r24, 0x24DD
    6ace:	88 23       	and	r24, r24
    6ad0:	31 f0       	breq	.+12     	; 0x6ade <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if (PGM.c == '\r') {
    6ad2:	8d 30       	cpi	r24, 0x0D	; 13
    6ad4:	21 f0       	breq	.+8      	; 0x6ade <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if ((SEMICOLONS(PGM.flags)) && (PGM.c == ';')) {
    6ad6:	97 ff       	sbrs	r25, 7
    6ad8:	05 c0       	rjmp	.+10     	; 0x6ae4 <xio_getc_pgm+0x72>
    6ada:	8b 33       	cpi	r24, 0x3B	; 59
    6adc:	19 f4       	brne	.+6      	; 0x6ae4 <xio_getc_pgm+0x72>
		PGM.c = '\n';
    6ade:	8a e0       	ldi	r24, 0x0A	; 10
    6ae0:	80 93 dd 24 	sts	0x24DD, r24
	}
	if (ECHO(PGM.flags)) {
    6ae4:	80 91 d9 24 	lds	r24, 0x24D9
    6ae8:	84 ff       	sbrs	r24, 4
    6aea:	09 c0       	rjmp	.+18     	; 0x6afe <xio_getc_pgm+0x8c>
		putchar(PGM.c);
    6aec:	60 91 d5 25 	lds	r22, 0x25D5
    6af0:	70 91 d6 25 	lds	r23, 0x25D6
    6af4:	80 91 dd 24 	lds	r24, 0x24DD
    6af8:	90 e0       	ldi	r25, 0x00	; 0
    6afa:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
	}
	return (PGM.c);
    6afe:	80 91 dd 24 	lds	r24, 0x24DD
    6b02:	28 2f       	mov	r18, r24
    6b04:	30 e0       	ldi	r19, 0x00	; 0
}
    6b06:	c9 01       	movw	r24, r18
    6b08:	08 95       	ret

00006b0a <xio_setflags_pgm>:
/*
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
    6b0a:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_PGM, control);
    6b0c:	83 e0       	ldi	r24, 0x03	; 3
    6b0e:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <xio_setflags>
	return (XIO_OK);									// for now it's always OK
}
    6b12:	80 e0       	ldi	r24, 0x00	; 0
    6b14:	90 e0       	ldi	r25, 0x00	; 0
    6b16:	08 95       	ret

00006b18 <xio_init_pgm>:
 */

void xio_init_pgm(const uint8_t dev, const uint8_t offset, const uint16_t control)
{
	// bind file struct to extended device parameters
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
    6b18:	90 e0       	ldi	r25, 0x00	; 0
    6b1a:	27 e1       	ldi	r18, 0x17	; 23
    6b1c:	30 e0       	ldi	r19, 0x00	; 0
    6b1e:	82 9f       	mul	r24, r18
    6b20:	f0 01       	movw	r30, r0
    6b22:	83 9f       	mul	r24, r19
    6b24:	f0 0d       	add	r31, r0
    6b26:	92 9f       	mul	r25, r18
    6b28:	f0 0d       	add	r31, r0
    6b2a:	11 24       	eor	r1, r1
    6b2c:	ec 56       	subi	r30, 0x6C	; 108
    6b2e:	fb 4d       	sbci	r31, 0xDB	; 219
    6b30:	86 e0       	ldi	r24, 0x06	; 6
    6b32:	68 9f       	mul	r22, r24
    6b34:	b0 01       	movw	r22, r0
    6b36:	11 24       	eor	r1, r1
    6b38:	6e 57       	subi	r22, 0x7E	; 126
    6b3a:	7b 4d       	sbci	r23, 0xDB	; 219
    6b3c:	61 8b       	std	Z+17, r22	; 0x11
    6b3e:	72 8b       	std	Z+18, r23	; 0x12
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
	xio_setflags(XIO_DEV_PGM, control);
    6b40:	83 e0       	ldi	r24, 0x03	; 3
    6b42:	ba 01       	movw	r22, r20
    6b44:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <xio_setflags>
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
	// might be useful to sanity check the control bits before calling set flags
	//	- RD and BLOCK are mandatory
	// 	- WR and NOBLOCK are restricted
	xio_setflags_pgm(control);
}
    6b48:	08 95       	ret

00006b4a <net_init>:
 */

void net_init() 
{
	
}
    6b4a:	08 95       	ret

00006b4c <tg_repeater>:
void tg_repeater()
{
	char c;

	while (TRUE) {
		c = xio_getc(XIO_DEV_USB);		// blocking read
    6b4c:	81 e0       	ldi	r24, 0x01	; 1
    6b4e:	0e 94 60 28 	call	0x50c0	; 0x50c0 <xio_getc>
    6b52:	68 2f       	mov	r22, r24
		xio_putc(XIO_DEV_RS485, c);		// transfer to RS485 port
    6b54:	80 e0       	ldi	r24, 0x00	; 0
    6b56:	0e 94 43 28 	call	0x5086	; 0x5086 <xio_putc>
    6b5a:	f8 cf       	rjmp	.-16     	; 0x6b4c <tg_repeater>

00006b5c <__lshrdi3>:
    6b5c:	ef 92       	push	r14
    6b5e:	ff 92       	push	r15
    6b60:	0f 93       	push	r16
    6b62:	df 93       	push	r29
    6b64:	cf 93       	push	r28
    6b66:	cd b7       	in	r28, 0x3d	; 61
    6b68:	de b7       	in	r29, 0x3e	; 62
    6b6a:	60 97       	sbiw	r28, 0x10	; 16
    6b6c:	cd bf       	out	0x3d, r28	; 61
    6b6e:	de bf       	out	0x3e, r29	; 62
    6b70:	a8 2f       	mov	r26, r24
    6b72:	00 23       	and	r16, r16
    6b74:	09 f4       	brne	.+2      	; 0x6b78 <__lshrdi3+0x1c>
    6b76:	61 c0       	rjmp	.+194    	; 0x6c3a <__lshrdi3+0xde>
    6b78:	7e 01       	movw	r14, r28
    6b7a:	08 94       	sec
    6b7c:	e1 1c       	adc	r14, r1
    6b7e:	f1 1c       	adc	r15, r1
    6b80:	88 e0       	ldi	r24, 0x08	; 8
    6b82:	f7 01       	movw	r30, r14
    6b84:	11 92       	st	Z+, r1
    6b86:	8a 95       	dec	r24
    6b88:	e9 f7       	brne	.-6      	; 0x6b84 <__lshrdi3+0x28>
    6b8a:	29 83       	std	Y+1, r18	; 0x01
    6b8c:	3a 83       	std	Y+2, r19	; 0x02
    6b8e:	4b 83       	std	Y+3, r20	; 0x03
    6b90:	5c 83       	std	Y+4, r21	; 0x04
    6b92:	6d 83       	std	Y+5, r22	; 0x05
    6b94:	7e 83       	std	Y+6, r23	; 0x06
    6b96:	af 83       	std	Y+7, r26	; 0x07
    6b98:	98 87       	std	Y+8, r25	; 0x08
    6b9a:	80 e2       	ldi	r24, 0x20	; 32
    6b9c:	80 1b       	sub	r24, r16
    6b9e:	e8 2f       	mov	r30, r24
    6ba0:	ff 27       	eor	r31, r31
    6ba2:	e7 fd       	sbrc	r30, 7
    6ba4:	f0 95       	com	r31
    6ba6:	4d 81       	ldd	r20, Y+5	; 0x05
    6ba8:	5e 81       	ldd	r21, Y+6	; 0x06
    6baa:	6f 81       	ldd	r22, Y+7	; 0x07
    6bac:	78 85       	ldd	r23, Y+8	; 0x08
    6bae:	18 16       	cp	r1, r24
    6bb0:	84 f0       	brlt	.+32     	; 0x6bd2 <__lshrdi3+0x76>
    6bb2:	1d 86       	std	Y+13, r1	; 0x0d
    6bb4:	1e 86       	std	Y+14, r1	; 0x0e
    6bb6:	1f 86       	std	Y+15, r1	; 0x0f
    6bb8:	18 8a       	std	Y+16, r1	; 0x10
    6bba:	88 27       	eor	r24, r24
    6bbc:	99 27       	eor	r25, r25
    6bbe:	8e 1b       	sub	r24, r30
    6bc0:	9f 0b       	sbc	r25, r31
    6bc2:	04 c0       	rjmp	.+8      	; 0x6bcc <__lshrdi3+0x70>
    6bc4:	76 95       	lsr	r23
    6bc6:	67 95       	ror	r22
    6bc8:	57 95       	ror	r21
    6bca:	47 95       	ror	r20
    6bcc:	8a 95       	dec	r24
    6bce:	d2 f7       	brpl	.-12     	; 0x6bc4 <__lshrdi3+0x68>
    6bd0:	28 c0       	rjmp	.+80     	; 0x6c22 <__lshrdi3+0xc6>
    6bd2:	20 2f       	mov	r18, r16
    6bd4:	33 27       	eor	r19, r19
    6bd6:	27 fd       	sbrc	r18, 7
    6bd8:	30 95       	com	r19
    6bda:	db 01       	movw	r26, r22
    6bdc:	ca 01       	movw	r24, r20
    6bde:	02 2e       	mov	r0, r18
    6be0:	04 c0       	rjmp	.+8      	; 0x6bea <__lshrdi3+0x8e>
    6be2:	b6 95       	lsr	r27
    6be4:	a7 95       	ror	r26
    6be6:	97 95       	ror	r25
    6be8:	87 95       	ror	r24
    6bea:	0a 94       	dec	r0
    6bec:	d2 f7       	brpl	.-12     	; 0x6be2 <__lshrdi3+0x86>
    6bee:	8d 87       	std	Y+13, r24	; 0x0d
    6bf0:	9e 87       	std	Y+14, r25	; 0x0e
    6bf2:	af 87       	std	Y+15, r26	; 0x0f
    6bf4:	b8 8b       	std	Y+16, r27	; 0x10
    6bf6:	04 c0       	rjmp	.+8      	; 0x6c00 <__lshrdi3+0xa4>
    6bf8:	44 0f       	add	r20, r20
    6bfa:	55 1f       	adc	r21, r21
    6bfc:	66 1f       	adc	r22, r22
    6bfe:	77 1f       	adc	r23, r23
    6c00:	ea 95       	dec	r30
    6c02:	d2 f7       	brpl	.-12     	; 0x6bf8 <__lshrdi3+0x9c>
    6c04:	89 81       	ldd	r24, Y+1	; 0x01
    6c06:	9a 81       	ldd	r25, Y+2	; 0x02
    6c08:	ab 81       	ldd	r26, Y+3	; 0x03
    6c0a:	bc 81       	ldd	r27, Y+4	; 0x04
    6c0c:	04 c0       	rjmp	.+8      	; 0x6c16 <__lshrdi3+0xba>
    6c0e:	b6 95       	lsr	r27
    6c10:	a7 95       	ror	r26
    6c12:	97 95       	ror	r25
    6c14:	87 95       	ror	r24
    6c16:	2a 95       	dec	r18
    6c18:	d2 f7       	brpl	.-12     	; 0x6c0e <__lshrdi3+0xb2>
    6c1a:	48 2b       	or	r20, r24
    6c1c:	59 2b       	or	r21, r25
    6c1e:	6a 2b       	or	r22, r26
    6c20:	7b 2b       	or	r23, r27
    6c22:	49 87       	std	Y+9, r20	; 0x09
    6c24:	5a 87       	std	Y+10, r21	; 0x0a
    6c26:	6b 87       	std	Y+11, r22	; 0x0b
    6c28:	7c 87       	std	Y+12, r23	; 0x0c
    6c2a:	29 85       	ldd	r18, Y+9	; 0x09
    6c2c:	3a 85       	ldd	r19, Y+10	; 0x0a
    6c2e:	4b 85       	ldd	r20, Y+11	; 0x0b
    6c30:	5c 85       	ldd	r21, Y+12	; 0x0c
    6c32:	6d 85       	ldd	r22, Y+13	; 0x0d
    6c34:	7e 85       	ldd	r23, Y+14	; 0x0e
    6c36:	af 85       	ldd	r26, Y+15	; 0x0f
    6c38:	98 89       	ldd	r25, Y+16	; 0x10
    6c3a:	8a 2f       	mov	r24, r26
    6c3c:	60 96       	adiw	r28, 0x10	; 16
    6c3e:	cd bf       	out	0x3d, r28	; 61
    6c40:	de bf       	out	0x3e, r29	; 62
    6c42:	cf 91       	pop	r28
    6c44:	df 91       	pop	r29
    6c46:	0f 91       	pop	r16
    6c48:	ff 90       	pop	r15
    6c4a:	ef 90       	pop	r14
    6c4c:	08 95       	ret

00006c4e <__ashldi3>:
    6c4e:	ef 92       	push	r14
    6c50:	ff 92       	push	r15
    6c52:	0f 93       	push	r16
    6c54:	df 93       	push	r29
    6c56:	cf 93       	push	r28
    6c58:	cd b7       	in	r28, 0x3d	; 61
    6c5a:	de b7       	in	r29, 0x3e	; 62
    6c5c:	60 97       	sbiw	r28, 0x10	; 16
    6c5e:	cd bf       	out	0x3d, r28	; 61
    6c60:	de bf       	out	0x3e, r29	; 62
    6c62:	a8 2f       	mov	r26, r24
    6c64:	00 23       	and	r16, r16
    6c66:	09 f4       	brne	.+2      	; 0x6c6a <__ashldi3+0x1c>
    6c68:	61 c0       	rjmp	.+194    	; 0x6d2c <__ashldi3+0xde>
    6c6a:	7e 01       	movw	r14, r28
    6c6c:	08 94       	sec
    6c6e:	e1 1c       	adc	r14, r1
    6c70:	f1 1c       	adc	r15, r1
    6c72:	88 e0       	ldi	r24, 0x08	; 8
    6c74:	f7 01       	movw	r30, r14
    6c76:	11 92       	st	Z+, r1
    6c78:	8a 95       	dec	r24
    6c7a:	e9 f7       	brne	.-6      	; 0x6c76 <__ashldi3+0x28>
    6c7c:	29 83       	std	Y+1, r18	; 0x01
    6c7e:	3a 83       	std	Y+2, r19	; 0x02
    6c80:	4b 83       	std	Y+3, r20	; 0x03
    6c82:	5c 83       	std	Y+4, r21	; 0x04
    6c84:	6d 83       	std	Y+5, r22	; 0x05
    6c86:	7e 83       	std	Y+6, r23	; 0x06
    6c88:	af 83       	std	Y+7, r26	; 0x07
    6c8a:	98 87       	std	Y+8, r25	; 0x08
    6c8c:	80 e2       	ldi	r24, 0x20	; 32
    6c8e:	80 1b       	sub	r24, r16
    6c90:	e8 2f       	mov	r30, r24
    6c92:	ff 27       	eor	r31, r31
    6c94:	e7 fd       	sbrc	r30, 7
    6c96:	f0 95       	com	r31
    6c98:	49 81       	ldd	r20, Y+1	; 0x01
    6c9a:	5a 81       	ldd	r21, Y+2	; 0x02
    6c9c:	6b 81       	ldd	r22, Y+3	; 0x03
    6c9e:	7c 81       	ldd	r23, Y+4	; 0x04
    6ca0:	18 16       	cp	r1, r24
    6ca2:	84 f0       	brlt	.+32     	; 0x6cc4 <__ashldi3+0x76>
    6ca4:	19 86       	std	Y+9, r1	; 0x09
    6ca6:	1a 86       	std	Y+10, r1	; 0x0a
    6ca8:	1b 86       	std	Y+11, r1	; 0x0b
    6caa:	1c 86       	std	Y+12, r1	; 0x0c
    6cac:	88 27       	eor	r24, r24
    6cae:	99 27       	eor	r25, r25
    6cb0:	8e 1b       	sub	r24, r30
    6cb2:	9f 0b       	sbc	r25, r31
    6cb4:	04 c0       	rjmp	.+8      	; 0x6cbe <__ashldi3+0x70>
    6cb6:	44 0f       	add	r20, r20
    6cb8:	55 1f       	adc	r21, r21
    6cba:	66 1f       	adc	r22, r22
    6cbc:	77 1f       	adc	r23, r23
    6cbe:	8a 95       	dec	r24
    6cc0:	d2 f7       	brpl	.-12     	; 0x6cb6 <__ashldi3+0x68>
    6cc2:	28 c0       	rjmp	.+80     	; 0x6d14 <__ashldi3+0xc6>
    6cc4:	20 2f       	mov	r18, r16
    6cc6:	33 27       	eor	r19, r19
    6cc8:	27 fd       	sbrc	r18, 7
    6cca:	30 95       	com	r19
    6ccc:	db 01       	movw	r26, r22
    6cce:	ca 01       	movw	r24, r20
    6cd0:	02 2e       	mov	r0, r18
    6cd2:	04 c0       	rjmp	.+8      	; 0x6cdc <__ashldi3+0x8e>
    6cd4:	88 0f       	add	r24, r24
    6cd6:	99 1f       	adc	r25, r25
    6cd8:	aa 1f       	adc	r26, r26
    6cda:	bb 1f       	adc	r27, r27
    6cdc:	0a 94       	dec	r0
    6cde:	d2 f7       	brpl	.-12     	; 0x6cd4 <__ashldi3+0x86>
    6ce0:	89 87       	std	Y+9, r24	; 0x09
    6ce2:	9a 87       	std	Y+10, r25	; 0x0a
    6ce4:	ab 87       	std	Y+11, r26	; 0x0b
    6ce6:	bc 87       	std	Y+12, r27	; 0x0c
    6ce8:	04 c0       	rjmp	.+8      	; 0x6cf2 <__ashldi3+0xa4>
    6cea:	76 95       	lsr	r23
    6cec:	67 95       	ror	r22
    6cee:	57 95       	ror	r21
    6cf0:	47 95       	ror	r20
    6cf2:	ea 95       	dec	r30
    6cf4:	d2 f7       	brpl	.-12     	; 0x6cea <__ashldi3+0x9c>
    6cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    6cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    6cfa:	af 81       	ldd	r26, Y+7	; 0x07
    6cfc:	b8 85       	ldd	r27, Y+8	; 0x08
    6cfe:	04 c0       	rjmp	.+8      	; 0x6d08 <__ashldi3+0xba>
    6d00:	88 0f       	add	r24, r24
    6d02:	99 1f       	adc	r25, r25
    6d04:	aa 1f       	adc	r26, r26
    6d06:	bb 1f       	adc	r27, r27
    6d08:	2a 95       	dec	r18
    6d0a:	d2 f7       	brpl	.-12     	; 0x6d00 <__ashldi3+0xb2>
    6d0c:	48 2b       	or	r20, r24
    6d0e:	59 2b       	or	r21, r25
    6d10:	6a 2b       	or	r22, r26
    6d12:	7b 2b       	or	r23, r27
    6d14:	4d 87       	std	Y+13, r20	; 0x0d
    6d16:	5e 87       	std	Y+14, r21	; 0x0e
    6d18:	6f 87       	std	Y+15, r22	; 0x0f
    6d1a:	78 8b       	std	Y+16, r23	; 0x10
    6d1c:	29 85       	ldd	r18, Y+9	; 0x09
    6d1e:	3a 85       	ldd	r19, Y+10	; 0x0a
    6d20:	4b 85       	ldd	r20, Y+11	; 0x0b
    6d22:	5c 85       	ldd	r21, Y+12	; 0x0c
    6d24:	6d 85       	ldd	r22, Y+13	; 0x0d
    6d26:	7e 85       	ldd	r23, Y+14	; 0x0e
    6d28:	af 85       	ldd	r26, Y+15	; 0x0f
    6d2a:	98 89       	ldd	r25, Y+16	; 0x10
    6d2c:	8a 2f       	mov	r24, r26
    6d2e:	60 96       	adiw	r28, 0x10	; 16
    6d30:	cd bf       	out	0x3d, r28	; 61
    6d32:	de bf       	out	0x3e, r29	; 62
    6d34:	cf 91       	pop	r28
    6d36:	df 91       	pop	r29
    6d38:	0f 91       	pop	r16
    6d3a:	ff 90       	pop	r15
    6d3c:	ef 90       	pop	r14
    6d3e:	08 95       	ret

00006d40 <__udivdi3>:
    6d40:	ae e5       	ldi	r26, 0x5E	; 94
    6d42:	b0 e0       	ldi	r27, 0x00	; 0
    6d44:	e6 ea       	ldi	r30, 0xA6	; 166
    6d46:	f6 e3       	ldi	r31, 0x36	; 54
    6d48:	0c 94 33 45 	jmp	0x8a66	; 0x8a66 <__prologue_saves__>
    6d4c:	a8 e0       	ldi	r26, 0x08	; 8
    6d4e:	4e 01       	movw	r8, r28
    6d50:	08 94       	sec
    6d52:	81 1c       	adc	r8, r1
    6d54:	91 1c       	adc	r9, r1
    6d56:	f4 01       	movw	r30, r8
    6d58:	6a 2e       	mov	r6, r26
    6d5a:	11 92       	st	Z+, r1
    6d5c:	6a 94       	dec	r6
    6d5e:	e9 f7       	brne	.-6      	; 0x6d5a <__udivdi3+0x1a>
    6d60:	29 83       	std	Y+1, r18	; 0x01
    6d62:	3a 83       	std	Y+2, r19	; 0x02
    6d64:	4b 83       	std	Y+3, r20	; 0x03
    6d66:	5c 83       	std	Y+4, r21	; 0x04
    6d68:	6d 83       	std	Y+5, r22	; 0x05
    6d6a:	7e 83       	std	Y+6, r23	; 0x06
    6d6c:	8f 83       	std	Y+7, r24	; 0x07
    6d6e:	98 87       	std	Y+8, r25	; 0x08
    6d70:	ce 01       	movw	r24, r28
    6d72:	09 96       	adiw	r24, 0x09	; 9
    6d74:	fc 01       	movw	r30, r24
    6d76:	11 92       	st	Z+, r1
    6d78:	aa 95       	dec	r26
    6d7a:	e9 f7       	brne	.-6      	; 0x6d76 <__udivdi3+0x36>
    6d7c:	a9 86       	std	Y+9, r10	; 0x09
    6d7e:	ba 86       	std	Y+10, r11	; 0x0a
    6d80:	cb 86       	std	Y+11, r12	; 0x0b
    6d82:	dc 86       	std	Y+12, r13	; 0x0c
    6d84:	ed 86       	std	Y+13, r14	; 0x0d
    6d86:	fe 86       	std	Y+14, r15	; 0x0e
    6d88:	0f 87       	std	Y+15, r16	; 0x0f
    6d8a:	18 8b       	std	Y+16, r17	; 0x10
    6d8c:	29 84       	ldd	r2, Y+9	; 0x09
    6d8e:	3a 84       	ldd	r3, Y+10	; 0x0a
    6d90:	4b 84       	ldd	r4, Y+11	; 0x0b
    6d92:	5c 84       	ldd	r5, Y+12	; 0x0c
    6d94:	ed 84       	ldd	r14, Y+13	; 0x0d
    6d96:	fe 84       	ldd	r15, Y+14	; 0x0e
    6d98:	0f 85       	ldd	r16, Y+15	; 0x0f
    6d9a:	18 89       	ldd	r17, Y+16	; 0x10
    6d9c:	69 80       	ldd	r6, Y+1	; 0x01
    6d9e:	7a 80       	ldd	r7, Y+2	; 0x02
    6da0:	8b 80       	ldd	r8, Y+3	; 0x03
    6da2:	9c 80       	ldd	r9, Y+4	; 0x04
    6da4:	6d a6       	std	Y+45, r6	; 0x2d
    6da6:	7e a6       	std	Y+46, r7	; 0x2e
    6da8:	8f a6       	std	Y+47, r8	; 0x2f
    6daa:	98 aa       	std	Y+48, r9	; 0x30
    6dac:	6d 80       	ldd	r6, Y+5	; 0x05
    6dae:	7e 80       	ldd	r7, Y+6	; 0x06
    6db0:	8f 80       	ldd	r8, Y+7	; 0x07
    6db2:	98 84       	ldd	r9, Y+8	; 0x08
    6db4:	e1 14       	cp	r14, r1
    6db6:	f1 04       	cpc	r15, r1
    6db8:	01 05       	cpc	r16, r1
    6dba:	11 05       	cpc	r17, r1
    6dbc:	09 f0       	breq	.+2      	; 0x6dc0 <__udivdi3+0x80>
    6dbe:	b3 c3       	rjmp	.+1894   	; 0x7526 <__udivdi3+0x7e6>
    6dc0:	62 14       	cp	r6, r2
    6dc2:	73 04       	cpc	r7, r3
    6dc4:	84 04       	cpc	r8, r4
    6dc6:	95 04       	cpc	r9, r5
    6dc8:	08 f0       	brcs	.+2      	; 0x6dcc <__udivdi3+0x8c>
    6dca:	3d c1       	rjmp	.+634    	; 0x7046 <__udivdi3+0x306>
    6dcc:	00 e0       	ldi	r16, 0x00	; 0
    6dce:	20 16       	cp	r2, r16
    6dd0:	00 e0       	ldi	r16, 0x00	; 0
    6dd2:	30 06       	cpc	r3, r16
    6dd4:	01 e0       	ldi	r16, 0x01	; 1
    6dd6:	40 06       	cpc	r4, r16
    6dd8:	00 e0       	ldi	r16, 0x00	; 0
    6dda:	50 06       	cpc	r5, r16
    6ddc:	88 f4       	brcc	.+34     	; 0x6e00 <__udivdi3+0xc0>
    6dde:	1f ef       	ldi	r17, 0xFF	; 255
    6de0:	21 16       	cp	r2, r17
    6de2:	31 04       	cpc	r3, r1
    6de4:	41 04       	cpc	r4, r1
    6de6:	51 04       	cpc	r5, r1
    6de8:	39 f0       	breq	.+14     	; 0x6df8 <__udivdi3+0xb8>
    6dea:	30 f0       	brcs	.+12     	; 0x6df8 <__udivdi3+0xb8>
    6dec:	48 e0       	ldi	r20, 0x08	; 8
    6dee:	e4 2e       	mov	r14, r20
    6df0:	f1 2c       	mov	r15, r1
    6df2:	01 2d       	mov	r16, r1
    6df4:	11 2d       	mov	r17, r1
    6df6:	18 c0       	rjmp	.+48     	; 0x6e28 <__udivdi3+0xe8>
    6df8:	ee 24       	eor	r14, r14
    6dfa:	ff 24       	eor	r15, r15
    6dfc:	87 01       	movw	r16, r14
    6dfe:	14 c0       	rjmp	.+40     	; 0x6e28 <__udivdi3+0xe8>
    6e00:	20 e0       	ldi	r18, 0x00	; 0
    6e02:	22 16       	cp	r2, r18
    6e04:	20 e0       	ldi	r18, 0x00	; 0
    6e06:	32 06       	cpc	r3, r18
    6e08:	20 e0       	ldi	r18, 0x00	; 0
    6e0a:	42 06       	cpc	r4, r18
    6e0c:	21 e0       	ldi	r18, 0x01	; 1
    6e0e:	52 06       	cpc	r5, r18
    6e10:	30 f0       	brcs	.+12     	; 0x6e1e <__udivdi3+0xde>
    6e12:	38 e1       	ldi	r19, 0x18	; 24
    6e14:	e3 2e       	mov	r14, r19
    6e16:	f1 2c       	mov	r15, r1
    6e18:	01 2d       	mov	r16, r1
    6e1a:	11 2d       	mov	r17, r1
    6e1c:	05 c0       	rjmp	.+10     	; 0x6e28 <__udivdi3+0xe8>
    6e1e:	20 e1       	ldi	r18, 0x10	; 16
    6e20:	e2 2e       	mov	r14, r18
    6e22:	f1 2c       	mov	r15, r1
    6e24:	01 2d       	mov	r16, r1
    6e26:	11 2d       	mov	r17, r1
    6e28:	d2 01       	movw	r26, r4
    6e2a:	c1 01       	movw	r24, r2
    6e2c:	0e 2c       	mov	r0, r14
    6e2e:	04 c0       	rjmp	.+8      	; 0x6e38 <__udivdi3+0xf8>
    6e30:	b6 95       	lsr	r27
    6e32:	a7 95       	ror	r26
    6e34:	97 95       	ror	r25
    6e36:	87 95       	ror	r24
    6e38:	0a 94       	dec	r0
    6e3a:	d2 f7       	brpl	.-12     	; 0x6e30 <__udivdi3+0xf0>
    6e3c:	80 50       	subi	r24, 0x00	; 0
    6e3e:	90 4e       	sbci	r25, 0xE0	; 224
    6e40:	dc 01       	movw	r26, r24
    6e42:	2c 91       	ld	r18, X
    6e44:	80 e2       	ldi	r24, 0x20	; 32
    6e46:	90 e0       	ldi	r25, 0x00	; 0
    6e48:	a0 e0       	ldi	r26, 0x00	; 0
    6e4a:	b0 e0       	ldi	r27, 0x00	; 0
    6e4c:	8e 19       	sub	r24, r14
    6e4e:	9f 09       	sbc	r25, r15
    6e50:	a0 0b       	sbc	r26, r16
    6e52:	b1 0b       	sbc	r27, r17
    6e54:	7c 01       	movw	r14, r24
    6e56:	8d 01       	movw	r16, r26
    6e58:	e2 1a       	sub	r14, r18
    6e5a:	f1 08       	sbc	r15, r1
    6e5c:	01 09       	sbc	r16, r1
    6e5e:	11 09       	sbc	r17, r1
    6e60:	e1 14       	cp	r14, r1
    6e62:	f1 04       	cpc	r15, r1
    6e64:	01 05       	cpc	r16, r1
    6e66:	11 05       	cpc	r17, r1
    6e68:	a1 f1       	breq	.+104    	; 0x6ed2 <__udivdi3+0x192>
    6e6a:	0e 2c       	mov	r0, r14
    6e6c:	04 c0       	rjmp	.+8      	; 0x6e76 <__udivdi3+0x136>
    6e6e:	22 0c       	add	r2, r2
    6e70:	33 1c       	adc	r3, r3
    6e72:	44 1c       	adc	r4, r4
    6e74:	55 1c       	adc	r5, r5
    6e76:	0a 94       	dec	r0
    6e78:	d2 f7       	brpl	.-12     	; 0x6e6e <__udivdi3+0x12e>
    6e7a:	a4 01       	movw	r20, r8
    6e7c:	93 01       	movw	r18, r6
    6e7e:	0e 2c       	mov	r0, r14
    6e80:	04 c0       	rjmp	.+8      	; 0x6e8a <__udivdi3+0x14a>
    6e82:	22 0f       	add	r18, r18
    6e84:	33 1f       	adc	r19, r19
    6e86:	44 1f       	adc	r20, r20
    6e88:	55 1f       	adc	r21, r21
    6e8a:	0a 94       	dec	r0
    6e8c:	d2 f7       	brpl	.-12     	; 0x6e82 <__udivdi3+0x142>
    6e8e:	80 e2       	ldi	r24, 0x20	; 32
    6e90:	90 e0       	ldi	r25, 0x00	; 0
    6e92:	8e 19       	sub	r24, r14
    6e94:	9f 09       	sbc	r25, r15
    6e96:	6d a4       	ldd	r6, Y+45	; 0x2d
    6e98:	7e a4       	ldd	r7, Y+46	; 0x2e
    6e9a:	8f a4       	ldd	r8, Y+47	; 0x2f
    6e9c:	98 a8       	ldd	r9, Y+48	; 0x30
    6e9e:	04 c0       	rjmp	.+8      	; 0x6ea8 <__udivdi3+0x168>
    6ea0:	96 94       	lsr	r9
    6ea2:	87 94       	ror	r8
    6ea4:	77 94       	ror	r7
    6ea6:	67 94       	ror	r6
    6ea8:	8a 95       	dec	r24
    6eaa:	d2 f7       	brpl	.-12     	; 0x6ea0 <__udivdi3+0x160>
    6eac:	62 2a       	or	r6, r18
    6eae:	73 2a       	or	r7, r19
    6eb0:	84 2a       	or	r8, r20
    6eb2:	95 2a       	or	r9, r21
    6eb4:	ad a4       	ldd	r10, Y+45	; 0x2d
    6eb6:	be a4       	ldd	r11, Y+46	; 0x2e
    6eb8:	cf a4       	ldd	r12, Y+47	; 0x2f
    6eba:	d8 a8       	ldd	r13, Y+48	; 0x30
    6ebc:	04 c0       	rjmp	.+8      	; 0x6ec6 <__udivdi3+0x186>
    6ebe:	aa 0c       	add	r10, r10
    6ec0:	bb 1c       	adc	r11, r11
    6ec2:	cc 1c       	adc	r12, r12
    6ec4:	dd 1c       	adc	r13, r13
    6ec6:	ea 94       	dec	r14
    6ec8:	d2 f7       	brpl	.-12     	; 0x6ebe <__udivdi3+0x17e>
    6eca:	ad a6       	std	Y+45, r10	; 0x2d
    6ecc:	be a6       	std	Y+46, r11	; 0x2e
    6ece:	cf a6       	std	Y+47, r12	; 0x2f
    6ed0:	d8 aa       	std	Y+48, r13	; 0x30
    6ed2:	62 01       	movw	r12, r4
    6ed4:	ee 24       	eor	r14, r14
    6ed6:	ff 24       	eor	r15, r15
    6ed8:	cd aa       	std	Y+53, r12	; 0x35
    6eda:	de aa       	std	Y+54, r13	; 0x36
    6edc:	ef aa       	std	Y+55, r14	; 0x37
    6ede:	f8 ae       	std	Y+56, r15	; 0x38
    6ee0:	92 01       	movw	r18, r4
    6ee2:	81 01       	movw	r16, r2
    6ee4:	20 70       	andi	r18, 0x00	; 0
    6ee6:	30 70       	andi	r19, 0x00	; 0
    6ee8:	09 af       	std	Y+57, r16	; 0x39
    6eea:	1a af       	std	Y+58, r17	; 0x3a
    6eec:	2b af       	std	Y+59, r18	; 0x3b
    6eee:	3c af       	std	Y+60, r19	; 0x3c
    6ef0:	c4 01       	movw	r24, r8
    6ef2:	b3 01       	movw	r22, r6
    6ef4:	a7 01       	movw	r20, r14
    6ef6:	96 01       	movw	r18, r12
    6ef8:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__udivmodsi4>
    6efc:	7b 01       	movw	r14, r22
    6efe:	8c 01       	movw	r16, r24
    6f00:	c4 01       	movw	r24, r8
    6f02:	b3 01       	movw	r22, r6
    6f04:	2d a9       	ldd	r18, Y+53	; 0x35
    6f06:	3e a9       	ldd	r19, Y+54	; 0x36
    6f08:	4f a9       	ldd	r20, Y+55	; 0x37
    6f0a:	58 ad       	ldd	r21, Y+56	; 0x38
    6f0c:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__udivmodsi4>
    6f10:	c9 01       	movw	r24, r18
    6f12:	da 01       	movw	r26, r20
    6f14:	3c 01       	movw	r6, r24
    6f16:	4d 01       	movw	r8, r26
    6f18:	c4 01       	movw	r24, r8
    6f1a:	b3 01       	movw	r22, r6
    6f1c:	29 ad       	ldd	r18, Y+57	; 0x39
    6f1e:	3a ad       	ldd	r19, Y+58	; 0x3a
    6f20:	4b ad       	ldd	r20, Y+59	; 0x3b
    6f22:	5c ad       	ldd	r21, Y+60	; 0x3c
    6f24:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <__mulsi3>
    6f28:	9b 01       	movw	r18, r22
    6f2a:	ac 01       	movw	r20, r24
    6f2c:	87 01       	movw	r16, r14
    6f2e:	ff 24       	eor	r15, r15
    6f30:	ee 24       	eor	r14, r14
    6f32:	ad a4       	ldd	r10, Y+45	; 0x2d
    6f34:	be a4       	ldd	r11, Y+46	; 0x2e
    6f36:	cf a4       	ldd	r12, Y+47	; 0x2f
    6f38:	d8 a8       	ldd	r13, Y+48	; 0x30
    6f3a:	c6 01       	movw	r24, r12
    6f3c:	aa 27       	eor	r26, r26
    6f3e:	bb 27       	eor	r27, r27
    6f40:	57 01       	movw	r10, r14
    6f42:	68 01       	movw	r12, r16
    6f44:	a8 2a       	or	r10, r24
    6f46:	b9 2a       	or	r11, r25
    6f48:	ca 2a       	or	r12, r26
    6f4a:	db 2a       	or	r13, r27
    6f4c:	a2 16       	cp	r10, r18
    6f4e:	b3 06       	cpc	r11, r19
    6f50:	c4 06       	cpc	r12, r20
    6f52:	d5 06       	cpc	r13, r21
    6f54:	e0 f4       	brcc	.+56     	; 0x6f8e <__udivdi3+0x24e>
    6f56:	08 94       	sec
    6f58:	61 08       	sbc	r6, r1
    6f5a:	71 08       	sbc	r7, r1
    6f5c:	81 08       	sbc	r8, r1
    6f5e:	91 08       	sbc	r9, r1
    6f60:	a2 0c       	add	r10, r2
    6f62:	b3 1c       	adc	r11, r3
    6f64:	c4 1c       	adc	r12, r4
    6f66:	d5 1c       	adc	r13, r5
    6f68:	a2 14       	cp	r10, r2
    6f6a:	b3 04       	cpc	r11, r3
    6f6c:	c4 04       	cpc	r12, r4
    6f6e:	d5 04       	cpc	r13, r5
    6f70:	70 f0       	brcs	.+28     	; 0x6f8e <__udivdi3+0x24e>
    6f72:	a2 16       	cp	r10, r18
    6f74:	b3 06       	cpc	r11, r19
    6f76:	c4 06       	cpc	r12, r20
    6f78:	d5 06       	cpc	r13, r21
    6f7a:	48 f4       	brcc	.+18     	; 0x6f8e <__udivdi3+0x24e>
    6f7c:	08 94       	sec
    6f7e:	61 08       	sbc	r6, r1
    6f80:	71 08       	sbc	r7, r1
    6f82:	81 08       	sbc	r8, r1
    6f84:	91 08       	sbc	r9, r1
    6f86:	a2 0c       	add	r10, r2
    6f88:	b3 1c       	adc	r11, r3
    6f8a:	c4 1c       	adc	r12, r4
    6f8c:	d5 1c       	adc	r13, r5
    6f8e:	a2 1a       	sub	r10, r18
    6f90:	b3 0a       	sbc	r11, r19
    6f92:	c4 0a       	sbc	r12, r20
    6f94:	d5 0a       	sbc	r13, r21
    6f96:	c6 01       	movw	r24, r12
    6f98:	b5 01       	movw	r22, r10
    6f9a:	2d a9       	ldd	r18, Y+53	; 0x35
    6f9c:	3e a9       	ldd	r19, Y+54	; 0x36
    6f9e:	4f a9       	ldd	r20, Y+55	; 0x37
    6fa0:	58 ad       	ldd	r21, Y+56	; 0x38
    6fa2:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__udivmodsi4>
    6fa6:	7b 01       	movw	r14, r22
    6fa8:	8c 01       	movw	r16, r24
    6faa:	c6 01       	movw	r24, r12
    6fac:	b5 01       	movw	r22, r10
    6fae:	2d a9       	ldd	r18, Y+53	; 0x35
    6fb0:	3e a9       	ldd	r19, Y+54	; 0x36
    6fb2:	4f a9       	ldd	r20, Y+55	; 0x37
    6fb4:	58 ad       	ldd	r21, Y+56	; 0x38
    6fb6:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__udivmodsi4>
    6fba:	c9 01       	movw	r24, r18
    6fbc:	da 01       	movw	r26, r20
    6fbe:	5c 01       	movw	r10, r24
    6fc0:	6d 01       	movw	r12, r26
    6fc2:	c6 01       	movw	r24, r12
    6fc4:	b5 01       	movw	r22, r10
    6fc6:	29 ad       	ldd	r18, Y+57	; 0x39
    6fc8:	3a ad       	ldd	r19, Y+58	; 0x3a
    6fca:	4b ad       	ldd	r20, Y+59	; 0x3b
    6fcc:	5c ad       	ldd	r21, Y+60	; 0x3c
    6fce:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <__mulsi3>
    6fd2:	9b 01       	movw	r18, r22
    6fd4:	ac 01       	movw	r20, r24
    6fd6:	87 01       	movw	r16, r14
    6fd8:	ff 24       	eor	r15, r15
    6fda:	ee 24       	eor	r14, r14
    6fdc:	8d a5       	ldd	r24, Y+45	; 0x2d
    6fde:	9e a5       	ldd	r25, Y+46	; 0x2e
    6fe0:	af a5       	ldd	r26, Y+47	; 0x2f
    6fe2:	b8 a9       	ldd	r27, Y+48	; 0x30
    6fe4:	a0 70       	andi	r26, 0x00	; 0
    6fe6:	b0 70       	andi	r27, 0x00	; 0
    6fe8:	e8 2a       	or	r14, r24
    6fea:	f9 2a       	or	r15, r25
    6fec:	0a 2b       	or	r16, r26
    6fee:	1b 2b       	or	r17, r27
    6ff0:	e2 16       	cp	r14, r18
    6ff2:	f3 06       	cpc	r15, r19
    6ff4:	04 07       	cpc	r16, r20
    6ff6:	15 07       	cpc	r17, r21
    6ff8:	c0 f4       	brcc	.+48     	; 0x702a <__udivdi3+0x2ea>
    6ffa:	08 94       	sec
    6ffc:	a1 08       	sbc	r10, r1
    6ffe:	b1 08       	sbc	r11, r1
    7000:	c1 08       	sbc	r12, r1
    7002:	d1 08       	sbc	r13, r1
    7004:	e2 0c       	add	r14, r2
    7006:	f3 1c       	adc	r15, r3
    7008:	04 1d       	adc	r16, r4
    700a:	15 1d       	adc	r17, r5
    700c:	e2 14       	cp	r14, r2
    700e:	f3 04       	cpc	r15, r3
    7010:	04 05       	cpc	r16, r4
    7012:	15 05       	cpc	r17, r5
    7014:	50 f0       	brcs	.+20     	; 0x702a <__udivdi3+0x2ea>
    7016:	e2 16       	cp	r14, r18
    7018:	f3 06       	cpc	r15, r19
    701a:	04 07       	cpc	r16, r20
    701c:	15 07       	cpc	r17, r21
    701e:	28 f4       	brcc	.+10     	; 0x702a <__udivdi3+0x2ea>
    7020:	08 94       	sec
    7022:	a1 08       	sbc	r10, r1
    7024:	b1 08       	sbc	r11, r1
    7026:	c1 08       	sbc	r12, r1
    7028:	d1 08       	sbc	r13, r1
    702a:	d3 01       	movw	r26, r6
    702c:	99 27       	eor	r25, r25
    702e:	88 27       	eor	r24, r24
    7030:	86 01       	movw	r16, r12
    7032:	75 01       	movw	r14, r10
    7034:	e8 2a       	or	r14, r24
    7036:	f9 2a       	or	r15, r25
    7038:	0a 2b       	or	r16, r26
    703a:	1b 2b       	or	r17, r27
    703c:	e9 aa       	std	Y+49, r14	; 0x31
    703e:	fa aa       	std	Y+50, r15	; 0x32
    7040:	0b ab       	std	Y+51, r16	; 0x33
    7042:	1c ab       	std	Y+52, r17	; 0x34
    7044:	cf c4       	rjmp	.+2462   	; 0x79e4 <__udivdi3+0xca4>
    7046:	21 14       	cp	r2, r1
    7048:	31 04       	cpc	r3, r1
    704a:	41 04       	cpc	r4, r1
    704c:	51 04       	cpc	r5, r1
    704e:	71 f4       	brne	.+28     	; 0x706c <__udivdi3+0x32c>
    7050:	61 e0       	ldi	r22, 0x01	; 1
    7052:	70 e0       	ldi	r23, 0x00	; 0
    7054:	80 e0       	ldi	r24, 0x00	; 0
    7056:	90 e0       	ldi	r25, 0x00	; 0
    7058:	20 e0       	ldi	r18, 0x00	; 0
    705a:	30 e0       	ldi	r19, 0x00	; 0
    705c:	40 e0       	ldi	r20, 0x00	; 0
    705e:	50 e0       	ldi	r21, 0x00	; 0
    7060:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__udivmodsi4>
    7064:	c9 01       	movw	r24, r18
    7066:	da 01       	movw	r26, r20
    7068:	1c 01       	movw	r2, r24
    706a:	2d 01       	movw	r4, r26
    706c:	00 e0       	ldi	r16, 0x00	; 0
    706e:	20 16       	cp	r2, r16
    7070:	00 e0       	ldi	r16, 0x00	; 0
    7072:	30 06       	cpc	r3, r16
    7074:	01 e0       	ldi	r16, 0x01	; 1
    7076:	40 06       	cpc	r4, r16
    7078:	00 e0       	ldi	r16, 0x00	; 0
    707a:	50 06       	cpc	r5, r16
    707c:	88 f4       	brcc	.+34     	; 0x70a0 <__udivdi3+0x360>
    707e:	1f ef       	ldi	r17, 0xFF	; 255
    7080:	21 16       	cp	r2, r17
    7082:	31 04       	cpc	r3, r1
    7084:	41 04       	cpc	r4, r1
    7086:	51 04       	cpc	r5, r1
    7088:	31 f0       	breq	.+12     	; 0x7096 <__udivdi3+0x356>
    708a:	28 f0       	brcs	.+10     	; 0x7096 <__udivdi3+0x356>
    708c:	48 e0       	ldi	r20, 0x08	; 8
    708e:	50 e0       	ldi	r21, 0x00	; 0
    7090:	60 e0       	ldi	r22, 0x00	; 0
    7092:	70 e0       	ldi	r23, 0x00	; 0
    7094:	17 c0       	rjmp	.+46     	; 0x70c4 <__udivdi3+0x384>
    7096:	40 e0       	ldi	r20, 0x00	; 0
    7098:	50 e0       	ldi	r21, 0x00	; 0
    709a:	60 e0       	ldi	r22, 0x00	; 0
    709c:	70 e0       	ldi	r23, 0x00	; 0
    709e:	12 c0       	rjmp	.+36     	; 0x70c4 <__udivdi3+0x384>
    70a0:	20 e0       	ldi	r18, 0x00	; 0
    70a2:	22 16       	cp	r2, r18
    70a4:	20 e0       	ldi	r18, 0x00	; 0
    70a6:	32 06       	cpc	r3, r18
    70a8:	20 e0       	ldi	r18, 0x00	; 0
    70aa:	42 06       	cpc	r4, r18
    70ac:	21 e0       	ldi	r18, 0x01	; 1
    70ae:	52 06       	cpc	r5, r18
    70b0:	28 f0       	brcs	.+10     	; 0x70bc <__udivdi3+0x37c>
    70b2:	48 e1       	ldi	r20, 0x18	; 24
    70b4:	50 e0       	ldi	r21, 0x00	; 0
    70b6:	60 e0       	ldi	r22, 0x00	; 0
    70b8:	70 e0       	ldi	r23, 0x00	; 0
    70ba:	04 c0       	rjmp	.+8      	; 0x70c4 <__udivdi3+0x384>
    70bc:	40 e1       	ldi	r20, 0x10	; 16
    70be:	50 e0       	ldi	r21, 0x00	; 0
    70c0:	60 e0       	ldi	r22, 0x00	; 0
    70c2:	70 e0       	ldi	r23, 0x00	; 0
    70c4:	d2 01       	movw	r26, r4
    70c6:	c1 01       	movw	r24, r2
    70c8:	04 2e       	mov	r0, r20
    70ca:	04 c0       	rjmp	.+8      	; 0x70d4 <__udivdi3+0x394>
    70cc:	b6 95       	lsr	r27
    70ce:	a7 95       	ror	r26
    70d0:	97 95       	ror	r25
    70d2:	87 95       	ror	r24
    70d4:	0a 94       	dec	r0
    70d6:	d2 f7       	brpl	.-12     	; 0x70cc <__udivdi3+0x38c>
    70d8:	80 50       	subi	r24, 0x00	; 0
    70da:	90 4e       	sbci	r25, 0xE0	; 224
    70dc:	dc 01       	movw	r26, r24
    70de:	2c 91       	ld	r18, X
    70e0:	e0 e2       	ldi	r30, 0x20	; 32
    70e2:	ee 2e       	mov	r14, r30
    70e4:	f1 2c       	mov	r15, r1
    70e6:	01 2d       	mov	r16, r1
    70e8:	11 2d       	mov	r17, r1
    70ea:	d8 01       	movw	r26, r16
    70ec:	c7 01       	movw	r24, r14
    70ee:	84 1b       	sub	r24, r20
    70f0:	95 0b       	sbc	r25, r21
    70f2:	a6 0b       	sbc	r26, r22
    70f4:	b7 0b       	sbc	r27, r23
    70f6:	82 1b       	sub	r24, r18
    70f8:	91 09       	sbc	r25, r1
    70fa:	a1 09       	sbc	r26, r1
    70fc:	b1 09       	sbc	r27, r1
    70fe:	00 97       	sbiw	r24, 0x00	; 0
    7100:	a1 05       	cpc	r26, r1
    7102:	b1 05       	cpc	r27, r1
    7104:	61 f4       	brne	.+24     	; 0x711e <__udivdi3+0x3de>
    7106:	64 01       	movw	r12, r8
    7108:	53 01       	movw	r10, r6
    710a:	a2 18       	sub	r10, r2
    710c:	b3 08       	sbc	r11, r3
    710e:	c4 08       	sbc	r12, r4
    7110:	d5 08       	sbc	r13, r5
    7112:	31 e0       	ldi	r19, 0x01	; 1
    7114:	63 2e       	mov	r6, r19
    7116:	71 2c       	mov	r7, r1
    7118:	81 2c       	mov	r8, r1
    711a:	91 2c       	mov	r9, r1
    711c:	1e c1       	rjmp	.+572    	; 0x735a <__udivdi3+0x61a>
    711e:	6f 96       	adiw	r28, 0x1f	; 31
    7120:	8f af       	std	Y+63, r24	; 0x3f
    7122:	6f 97       	sbiw	r28, 0x1f	; 31
    7124:	08 2e       	mov	r0, r24
    7126:	04 c0       	rjmp	.+8      	; 0x7130 <__udivdi3+0x3f0>
    7128:	22 0c       	add	r2, r2
    712a:	33 1c       	adc	r3, r3
    712c:	44 1c       	adc	r4, r4
    712e:	55 1c       	adc	r5, r5
    7130:	0a 94       	dec	r0
    7132:	d2 f7       	brpl	.-12     	; 0x7128 <__udivdi3+0x3e8>
    7134:	ee 2d       	mov	r30, r14
    7136:	e8 1b       	sub	r30, r24
    7138:	64 01       	movw	r12, r8
    713a:	53 01       	movw	r10, r6
    713c:	0e 2e       	mov	r0, r30
    713e:	04 c0       	rjmp	.+8      	; 0x7148 <__udivdi3+0x408>
    7140:	d6 94       	lsr	r13
    7142:	c7 94       	ror	r12
    7144:	b7 94       	ror	r11
    7146:	a7 94       	ror	r10
    7148:	0a 94       	dec	r0
    714a:	d2 f7       	brpl	.-12     	; 0x7140 <__udivdi3+0x400>
    714c:	a4 01       	movw	r20, r8
    714e:	93 01       	movw	r18, r6
    7150:	6f 96       	adiw	r28, 0x1f	; 31
    7152:	0f ac       	ldd	r0, Y+63	; 0x3f
    7154:	6f 97       	sbiw	r28, 0x1f	; 31
    7156:	04 c0       	rjmp	.+8      	; 0x7160 <__udivdi3+0x420>
    7158:	22 0f       	add	r18, r18
    715a:	33 1f       	adc	r19, r19
    715c:	44 1f       	adc	r20, r20
    715e:	55 1f       	adc	r21, r21
    7160:	0a 94       	dec	r0
    7162:	d2 f7       	brpl	.-12     	; 0x7158 <__udivdi3+0x418>
    7164:	6d a4       	ldd	r6, Y+45	; 0x2d
    7166:	7e a4       	ldd	r7, Y+46	; 0x2e
    7168:	8f a4       	ldd	r8, Y+47	; 0x2f
    716a:	98 a8       	ldd	r9, Y+48	; 0x30
    716c:	0e 2e       	mov	r0, r30
    716e:	04 c0       	rjmp	.+8      	; 0x7178 <__udivdi3+0x438>
    7170:	96 94       	lsr	r9
    7172:	87 94       	ror	r8
    7174:	77 94       	ror	r7
    7176:	67 94       	ror	r6
    7178:	0a 94       	dec	r0
    717a:	d2 f7       	brpl	.-12     	; 0x7170 <__udivdi3+0x430>
    717c:	84 01       	movw	r16, r8
    717e:	73 01       	movw	r14, r6
    7180:	e2 2a       	or	r14, r18
    7182:	f3 2a       	or	r15, r19
    7184:	04 2b       	or	r16, r20
    7186:	15 2b       	or	r17, r21
    7188:	e9 a6       	std	Y+41, r14	; 0x29
    718a:	fa a6       	std	Y+42, r15	; 0x2a
    718c:	0b a7       	std	Y+43, r16	; 0x2b
    718e:	1c a7       	std	Y+44, r17	; 0x2c
    7190:	32 01       	movw	r6, r4
    7192:	88 24       	eor	r8, r8
    7194:	99 24       	eor	r9, r9
    7196:	92 01       	movw	r18, r4
    7198:	81 01       	movw	r16, r2
    719a:	20 70       	andi	r18, 0x00	; 0
    719c:	30 70       	andi	r19, 0x00	; 0
    719e:	21 96       	adiw	r28, 0x01	; 1
    71a0:	0c af       	std	Y+60, r16	; 0x3c
    71a2:	1d af       	std	Y+61, r17	; 0x3d
    71a4:	2e af       	std	Y+62, r18	; 0x3e
    71a6:	3f af       	std	Y+63, r19	; 0x3f
    71a8:	21 97       	sbiw	r28, 0x01	; 1
    71aa:	c6 01       	movw	r24, r12
    71ac:	b5 01       	movw	r22, r10
    71ae:	a4 01       	movw	r20, r8
    71b0:	93 01       	movw	r18, r6
    71b2:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__udivmodsi4>
    71b6:	7b 01       	movw	r14, r22
    71b8:	8c 01       	movw	r16, r24
    71ba:	c6 01       	movw	r24, r12
    71bc:	b5 01       	movw	r22, r10
    71be:	a4 01       	movw	r20, r8
    71c0:	93 01       	movw	r18, r6
    71c2:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__udivmodsi4>
    71c6:	c9 01       	movw	r24, r18
    71c8:	da 01       	movw	r26, r20
    71ca:	25 96       	adiw	r28, 0x05	; 5
    71cc:	8c af       	std	Y+60, r24	; 0x3c
    71ce:	9d af       	std	Y+61, r25	; 0x3d
    71d0:	ae af       	std	Y+62, r26	; 0x3e
    71d2:	bf af       	std	Y+63, r27	; 0x3f
    71d4:	25 97       	sbiw	r28, 0x05	; 5
    71d6:	bc 01       	movw	r22, r24
    71d8:	cd 01       	movw	r24, r26
    71da:	21 96       	adiw	r28, 0x01	; 1
    71dc:	2c ad       	ldd	r18, Y+60	; 0x3c
    71de:	3d ad       	ldd	r19, Y+61	; 0x3d
    71e0:	4e ad       	ldd	r20, Y+62	; 0x3e
    71e2:	5f ad       	ldd	r21, Y+63	; 0x3f
    71e4:	21 97       	sbiw	r28, 0x01	; 1
    71e6:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <__mulsi3>
    71ea:	9b 01       	movw	r18, r22
    71ec:	ac 01       	movw	r20, r24
    71ee:	87 01       	movw	r16, r14
    71f0:	ff 24       	eor	r15, r15
    71f2:	ee 24       	eor	r14, r14
    71f4:	a9 a4       	ldd	r10, Y+41	; 0x29
    71f6:	ba a4       	ldd	r11, Y+42	; 0x2a
    71f8:	cb a4       	ldd	r12, Y+43	; 0x2b
    71fa:	dc a4       	ldd	r13, Y+44	; 0x2c
    71fc:	c6 01       	movw	r24, r12
    71fe:	aa 27       	eor	r26, r26
    7200:	bb 27       	eor	r27, r27
    7202:	5c 01       	movw	r10, r24
    7204:	6d 01       	movw	r12, r26
    7206:	ae 28       	or	r10, r14
    7208:	bf 28       	or	r11, r15
    720a:	c0 2a       	or	r12, r16
    720c:	d1 2a       	or	r13, r17
    720e:	a2 16       	cp	r10, r18
    7210:	b3 06       	cpc	r11, r19
    7212:	c4 06       	cpc	r12, r20
    7214:	d5 06       	cpc	r13, r21
    7216:	60 f5       	brcc	.+88     	; 0x7270 <__udivdi3+0x530>
    7218:	25 96       	adiw	r28, 0x05	; 5
    721a:	6c ad       	ldd	r22, Y+60	; 0x3c
    721c:	7d ad       	ldd	r23, Y+61	; 0x3d
    721e:	8e ad       	ldd	r24, Y+62	; 0x3e
    7220:	9f ad       	ldd	r25, Y+63	; 0x3f
    7222:	25 97       	sbiw	r28, 0x05	; 5
    7224:	61 50       	subi	r22, 0x01	; 1
    7226:	70 40       	sbci	r23, 0x00	; 0
    7228:	80 40       	sbci	r24, 0x00	; 0
    722a:	90 40       	sbci	r25, 0x00	; 0
    722c:	25 96       	adiw	r28, 0x05	; 5
    722e:	6c af       	std	Y+60, r22	; 0x3c
    7230:	7d af       	std	Y+61, r23	; 0x3d
    7232:	8e af       	std	Y+62, r24	; 0x3e
    7234:	9f af       	std	Y+63, r25	; 0x3f
    7236:	25 97       	sbiw	r28, 0x05	; 5
    7238:	a2 0c       	add	r10, r2
    723a:	b3 1c       	adc	r11, r3
    723c:	c4 1c       	adc	r12, r4
    723e:	d5 1c       	adc	r13, r5
    7240:	a2 14       	cp	r10, r2
    7242:	b3 04       	cpc	r11, r3
    7244:	c4 04       	cpc	r12, r4
    7246:	d5 04       	cpc	r13, r5
    7248:	98 f0       	brcs	.+38     	; 0x7270 <__udivdi3+0x530>
    724a:	a2 16       	cp	r10, r18
    724c:	b3 06       	cpc	r11, r19
    724e:	c4 06       	cpc	r12, r20
    7250:	d5 06       	cpc	r13, r21
    7252:	70 f4       	brcc	.+28     	; 0x7270 <__udivdi3+0x530>
    7254:	61 50       	subi	r22, 0x01	; 1
    7256:	70 40       	sbci	r23, 0x00	; 0
    7258:	80 40       	sbci	r24, 0x00	; 0
    725a:	90 40       	sbci	r25, 0x00	; 0
    725c:	25 96       	adiw	r28, 0x05	; 5
    725e:	6c af       	std	Y+60, r22	; 0x3c
    7260:	7d af       	std	Y+61, r23	; 0x3d
    7262:	8e af       	std	Y+62, r24	; 0x3e
    7264:	9f af       	std	Y+63, r25	; 0x3f
    7266:	25 97       	sbiw	r28, 0x05	; 5
    7268:	a2 0c       	add	r10, r2
    726a:	b3 1c       	adc	r11, r3
    726c:	c4 1c       	adc	r12, r4
    726e:	d5 1c       	adc	r13, r5
    7270:	a2 1a       	sub	r10, r18
    7272:	b3 0a       	sbc	r11, r19
    7274:	c4 0a       	sbc	r12, r20
    7276:	d5 0a       	sbc	r13, r21
    7278:	c6 01       	movw	r24, r12
    727a:	b5 01       	movw	r22, r10
    727c:	a4 01       	movw	r20, r8
    727e:	93 01       	movw	r18, r6
    7280:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__udivmodsi4>
    7284:	7b 01       	movw	r14, r22
    7286:	8c 01       	movw	r16, r24
    7288:	c6 01       	movw	r24, r12
    728a:	b5 01       	movw	r22, r10
    728c:	a4 01       	movw	r20, r8
    728e:	93 01       	movw	r18, r6
    7290:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__udivmodsi4>
    7294:	c9 01       	movw	r24, r18
    7296:	da 01       	movw	r26, r20
    7298:	3c 01       	movw	r6, r24
    729a:	4d 01       	movw	r8, r26
    729c:	c4 01       	movw	r24, r8
    729e:	b3 01       	movw	r22, r6
    72a0:	21 96       	adiw	r28, 0x01	; 1
    72a2:	2c ad       	ldd	r18, Y+60	; 0x3c
    72a4:	3d ad       	ldd	r19, Y+61	; 0x3d
    72a6:	4e ad       	ldd	r20, Y+62	; 0x3e
    72a8:	5f ad       	ldd	r21, Y+63	; 0x3f
    72aa:	21 97       	sbiw	r28, 0x01	; 1
    72ac:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <__mulsi3>
    72b0:	9b 01       	movw	r18, r22
    72b2:	ac 01       	movw	r20, r24
    72b4:	87 01       	movw	r16, r14
    72b6:	ff 24       	eor	r15, r15
    72b8:	ee 24       	eor	r14, r14
    72ba:	89 a5       	ldd	r24, Y+41	; 0x29
    72bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    72be:	ab a5       	ldd	r26, Y+43	; 0x2b
    72c0:	bc a5       	ldd	r27, Y+44	; 0x2c
    72c2:	a0 70       	andi	r26, 0x00	; 0
    72c4:	b0 70       	andi	r27, 0x00	; 0
    72c6:	57 01       	movw	r10, r14
    72c8:	68 01       	movw	r12, r16
    72ca:	a8 2a       	or	r10, r24
    72cc:	b9 2a       	or	r11, r25
    72ce:	ca 2a       	or	r12, r26
    72d0:	db 2a       	or	r13, r27
    72d2:	a2 16       	cp	r10, r18
    72d4:	b3 06       	cpc	r11, r19
    72d6:	c4 06       	cpc	r12, r20
    72d8:	d5 06       	cpc	r13, r21
    72da:	e0 f4       	brcc	.+56     	; 0x7314 <__udivdi3+0x5d4>
    72dc:	08 94       	sec
    72de:	61 08       	sbc	r6, r1
    72e0:	71 08       	sbc	r7, r1
    72e2:	81 08       	sbc	r8, r1
    72e4:	91 08       	sbc	r9, r1
    72e6:	a2 0c       	add	r10, r2
    72e8:	b3 1c       	adc	r11, r3
    72ea:	c4 1c       	adc	r12, r4
    72ec:	d5 1c       	adc	r13, r5
    72ee:	a2 14       	cp	r10, r2
    72f0:	b3 04       	cpc	r11, r3
    72f2:	c4 04       	cpc	r12, r4
    72f4:	d5 04       	cpc	r13, r5
    72f6:	70 f0       	brcs	.+28     	; 0x7314 <__udivdi3+0x5d4>
    72f8:	a2 16       	cp	r10, r18
    72fa:	b3 06       	cpc	r11, r19
    72fc:	c4 06       	cpc	r12, r20
    72fe:	d5 06       	cpc	r13, r21
    7300:	48 f4       	brcc	.+18     	; 0x7314 <__udivdi3+0x5d4>
    7302:	08 94       	sec
    7304:	61 08       	sbc	r6, r1
    7306:	71 08       	sbc	r7, r1
    7308:	81 08       	sbc	r8, r1
    730a:	91 08       	sbc	r9, r1
    730c:	a2 0c       	add	r10, r2
    730e:	b3 1c       	adc	r11, r3
    7310:	c4 1c       	adc	r12, r4
    7312:	d5 1c       	adc	r13, r5
    7314:	8d a5       	ldd	r24, Y+45	; 0x2d
    7316:	9e a5       	ldd	r25, Y+46	; 0x2e
    7318:	af a5       	ldd	r26, Y+47	; 0x2f
    731a:	b8 a9       	ldd	r27, Y+48	; 0x30
    731c:	6f 96       	adiw	r28, 0x1f	; 31
    731e:	0f ac       	ldd	r0, Y+63	; 0x3f
    7320:	6f 97       	sbiw	r28, 0x1f	; 31
    7322:	04 c0       	rjmp	.+8      	; 0x732c <__udivdi3+0x5ec>
    7324:	88 0f       	add	r24, r24
    7326:	99 1f       	adc	r25, r25
    7328:	aa 1f       	adc	r26, r26
    732a:	bb 1f       	adc	r27, r27
    732c:	0a 94       	dec	r0
    732e:	d2 f7       	brpl	.-12     	; 0x7324 <__udivdi3+0x5e4>
    7330:	8d a7       	std	Y+45, r24	; 0x2d
    7332:	9e a7       	std	Y+46, r25	; 0x2e
    7334:	af a7       	std	Y+47, r26	; 0x2f
    7336:	b8 ab       	std	Y+48, r27	; 0x30
    7338:	a2 1a       	sub	r10, r18
    733a:	b3 0a       	sbc	r11, r19
    733c:	c4 0a       	sbc	r12, r20
    733e:	d5 0a       	sbc	r13, r21
    7340:	25 96       	adiw	r28, 0x05	; 5
    7342:	ec ac       	ldd	r14, Y+60	; 0x3c
    7344:	fd ac       	ldd	r15, Y+61	; 0x3d
    7346:	0e ad       	ldd	r16, Y+62	; 0x3e
    7348:	1f ad       	ldd	r17, Y+63	; 0x3f
    734a:	25 97       	sbiw	r28, 0x05	; 5
    734c:	d7 01       	movw	r26, r14
    734e:	99 27       	eor	r25, r25
    7350:	88 27       	eor	r24, r24
    7352:	68 2a       	or	r6, r24
    7354:	79 2a       	or	r7, r25
    7356:	8a 2a       	or	r8, r26
    7358:	9b 2a       	or	r9, r27
    735a:	82 01       	movw	r16, r4
    735c:	22 27       	eor	r18, r18
    735e:	33 27       	eor	r19, r19
    7360:	29 96       	adiw	r28, 0x09	; 9
    7362:	0c af       	std	Y+60, r16	; 0x3c
    7364:	1d af       	std	Y+61, r17	; 0x3d
    7366:	2e af       	std	Y+62, r18	; 0x3e
    7368:	3f af       	std	Y+63, r19	; 0x3f
    736a:	29 97       	sbiw	r28, 0x09	; 9
    736c:	a2 01       	movw	r20, r4
    736e:	91 01       	movw	r18, r2
    7370:	40 70       	andi	r20, 0x00	; 0
    7372:	50 70       	andi	r21, 0x00	; 0
    7374:	2d 96       	adiw	r28, 0x0d	; 13
    7376:	2c af       	std	Y+60, r18	; 0x3c
    7378:	3d af       	std	Y+61, r19	; 0x3d
    737a:	4e af       	std	Y+62, r20	; 0x3e
    737c:	5f af       	std	Y+63, r21	; 0x3f
    737e:	2d 97       	sbiw	r28, 0x0d	; 13
    7380:	c6 01       	movw	r24, r12
    7382:	b5 01       	movw	r22, r10
    7384:	29 96       	adiw	r28, 0x09	; 9
    7386:	2c ad       	ldd	r18, Y+60	; 0x3c
    7388:	3d ad       	ldd	r19, Y+61	; 0x3d
    738a:	4e ad       	ldd	r20, Y+62	; 0x3e
    738c:	5f ad       	ldd	r21, Y+63	; 0x3f
    738e:	29 97       	sbiw	r28, 0x09	; 9
    7390:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__udivmodsi4>
    7394:	7b 01       	movw	r14, r22
    7396:	8c 01       	movw	r16, r24
    7398:	c6 01       	movw	r24, r12
    739a:	b5 01       	movw	r22, r10
    739c:	29 96       	adiw	r28, 0x09	; 9
    739e:	2c ad       	ldd	r18, Y+60	; 0x3c
    73a0:	3d ad       	ldd	r19, Y+61	; 0x3d
    73a2:	4e ad       	ldd	r20, Y+62	; 0x3e
    73a4:	5f ad       	ldd	r21, Y+63	; 0x3f
    73a6:	29 97       	sbiw	r28, 0x09	; 9
    73a8:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__udivmodsi4>
    73ac:	c9 01       	movw	r24, r18
    73ae:	da 01       	movw	r26, r20
    73b0:	61 96       	adiw	r28, 0x11	; 17
    73b2:	8c af       	std	Y+60, r24	; 0x3c
    73b4:	9d af       	std	Y+61, r25	; 0x3d
    73b6:	ae af       	std	Y+62, r26	; 0x3e
    73b8:	bf af       	std	Y+63, r27	; 0x3f
    73ba:	61 97       	sbiw	r28, 0x11	; 17
    73bc:	bc 01       	movw	r22, r24
    73be:	cd 01       	movw	r24, r26
    73c0:	2d 96       	adiw	r28, 0x0d	; 13
    73c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    73c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    73c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    73c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    73ca:	2d 97       	sbiw	r28, 0x0d	; 13
    73cc:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <__mulsi3>
    73d0:	9b 01       	movw	r18, r22
    73d2:	ac 01       	movw	r20, r24
    73d4:	87 01       	movw	r16, r14
    73d6:	ff 24       	eor	r15, r15
    73d8:	ee 24       	eor	r14, r14
    73da:	ad a4       	ldd	r10, Y+45	; 0x2d
    73dc:	be a4       	ldd	r11, Y+46	; 0x2e
    73de:	cf a4       	ldd	r12, Y+47	; 0x2f
    73e0:	d8 a8       	ldd	r13, Y+48	; 0x30
    73e2:	c6 01       	movw	r24, r12
    73e4:	aa 27       	eor	r26, r26
    73e6:	bb 27       	eor	r27, r27
    73e8:	57 01       	movw	r10, r14
    73ea:	68 01       	movw	r12, r16
    73ec:	a8 2a       	or	r10, r24
    73ee:	b9 2a       	or	r11, r25
    73f0:	ca 2a       	or	r12, r26
    73f2:	db 2a       	or	r13, r27
    73f4:	a2 16       	cp	r10, r18
    73f6:	b3 06       	cpc	r11, r19
    73f8:	c4 06       	cpc	r12, r20
    73fa:	d5 06       	cpc	r13, r21
    73fc:	60 f5       	brcc	.+88     	; 0x7456 <__udivdi3+0x716>
    73fe:	61 96       	adiw	r28, 0x11	; 17
    7400:	6c ad       	ldd	r22, Y+60	; 0x3c
    7402:	7d ad       	ldd	r23, Y+61	; 0x3d
    7404:	8e ad       	ldd	r24, Y+62	; 0x3e
    7406:	9f ad       	ldd	r25, Y+63	; 0x3f
    7408:	61 97       	sbiw	r28, 0x11	; 17
    740a:	61 50       	subi	r22, 0x01	; 1
    740c:	70 40       	sbci	r23, 0x00	; 0
    740e:	80 40       	sbci	r24, 0x00	; 0
    7410:	90 40       	sbci	r25, 0x00	; 0
    7412:	61 96       	adiw	r28, 0x11	; 17
    7414:	6c af       	std	Y+60, r22	; 0x3c
    7416:	7d af       	std	Y+61, r23	; 0x3d
    7418:	8e af       	std	Y+62, r24	; 0x3e
    741a:	9f af       	std	Y+63, r25	; 0x3f
    741c:	61 97       	sbiw	r28, 0x11	; 17
    741e:	a2 0c       	add	r10, r2
    7420:	b3 1c       	adc	r11, r3
    7422:	c4 1c       	adc	r12, r4
    7424:	d5 1c       	adc	r13, r5
    7426:	a2 14       	cp	r10, r2
    7428:	b3 04       	cpc	r11, r3
    742a:	c4 04       	cpc	r12, r4
    742c:	d5 04       	cpc	r13, r5
    742e:	98 f0       	brcs	.+38     	; 0x7456 <__udivdi3+0x716>
    7430:	a2 16       	cp	r10, r18
    7432:	b3 06       	cpc	r11, r19
    7434:	c4 06       	cpc	r12, r20
    7436:	d5 06       	cpc	r13, r21
    7438:	70 f4       	brcc	.+28     	; 0x7456 <__udivdi3+0x716>
    743a:	61 50       	subi	r22, 0x01	; 1
    743c:	70 40       	sbci	r23, 0x00	; 0
    743e:	80 40       	sbci	r24, 0x00	; 0
    7440:	90 40       	sbci	r25, 0x00	; 0
    7442:	61 96       	adiw	r28, 0x11	; 17
    7444:	6c af       	std	Y+60, r22	; 0x3c
    7446:	7d af       	std	Y+61, r23	; 0x3d
    7448:	8e af       	std	Y+62, r24	; 0x3e
    744a:	9f af       	std	Y+63, r25	; 0x3f
    744c:	61 97       	sbiw	r28, 0x11	; 17
    744e:	a2 0c       	add	r10, r2
    7450:	b3 1c       	adc	r11, r3
    7452:	c4 1c       	adc	r12, r4
    7454:	d5 1c       	adc	r13, r5
    7456:	a2 1a       	sub	r10, r18
    7458:	b3 0a       	sbc	r11, r19
    745a:	c4 0a       	sbc	r12, r20
    745c:	d5 0a       	sbc	r13, r21
    745e:	c6 01       	movw	r24, r12
    7460:	b5 01       	movw	r22, r10
    7462:	29 96       	adiw	r28, 0x09	; 9
    7464:	2c ad       	ldd	r18, Y+60	; 0x3c
    7466:	3d ad       	ldd	r19, Y+61	; 0x3d
    7468:	4e ad       	ldd	r20, Y+62	; 0x3e
    746a:	5f ad       	ldd	r21, Y+63	; 0x3f
    746c:	29 97       	sbiw	r28, 0x09	; 9
    746e:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__udivmodsi4>
    7472:	7b 01       	movw	r14, r22
    7474:	8c 01       	movw	r16, r24
    7476:	c6 01       	movw	r24, r12
    7478:	b5 01       	movw	r22, r10
    747a:	29 96       	adiw	r28, 0x09	; 9
    747c:	2c ad       	ldd	r18, Y+60	; 0x3c
    747e:	3d ad       	ldd	r19, Y+61	; 0x3d
    7480:	4e ad       	ldd	r20, Y+62	; 0x3e
    7482:	5f ad       	ldd	r21, Y+63	; 0x3f
    7484:	29 97       	sbiw	r28, 0x09	; 9
    7486:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__udivmodsi4>
    748a:	c9 01       	movw	r24, r18
    748c:	da 01       	movw	r26, r20
    748e:	5c 01       	movw	r10, r24
    7490:	6d 01       	movw	r12, r26
    7492:	c6 01       	movw	r24, r12
    7494:	b5 01       	movw	r22, r10
    7496:	2d 96       	adiw	r28, 0x0d	; 13
    7498:	2c ad       	ldd	r18, Y+60	; 0x3c
    749a:	3d ad       	ldd	r19, Y+61	; 0x3d
    749c:	4e ad       	ldd	r20, Y+62	; 0x3e
    749e:	5f ad       	ldd	r21, Y+63	; 0x3f
    74a0:	2d 97       	sbiw	r28, 0x0d	; 13
    74a2:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <__mulsi3>
    74a6:	9b 01       	movw	r18, r22
    74a8:	ac 01       	movw	r20, r24
    74aa:	87 01       	movw	r16, r14
    74ac:	ff 24       	eor	r15, r15
    74ae:	ee 24       	eor	r14, r14
    74b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    74b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    74b4:	af a5       	ldd	r26, Y+47	; 0x2f
    74b6:	b8 a9       	ldd	r27, Y+48	; 0x30
    74b8:	a0 70       	andi	r26, 0x00	; 0
    74ba:	b0 70       	andi	r27, 0x00	; 0
    74bc:	e8 2a       	or	r14, r24
    74be:	f9 2a       	or	r15, r25
    74c0:	0a 2b       	or	r16, r26
    74c2:	1b 2b       	or	r17, r27
    74c4:	e2 16       	cp	r14, r18
    74c6:	f3 06       	cpc	r15, r19
    74c8:	04 07       	cpc	r16, r20
    74ca:	15 07       	cpc	r17, r21
    74cc:	c0 f4       	brcc	.+48     	; 0x74fe <__udivdi3+0x7be>
    74ce:	08 94       	sec
    74d0:	a1 08       	sbc	r10, r1
    74d2:	b1 08       	sbc	r11, r1
    74d4:	c1 08       	sbc	r12, r1
    74d6:	d1 08       	sbc	r13, r1
    74d8:	e2 0c       	add	r14, r2
    74da:	f3 1c       	adc	r15, r3
    74dc:	04 1d       	adc	r16, r4
    74de:	15 1d       	adc	r17, r5
    74e0:	e2 14       	cp	r14, r2
    74e2:	f3 04       	cpc	r15, r3
    74e4:	04 05       	cpc	r16, r4
    74e6:	15 05       	cpc	r17, r5
    74e8:	50 f0       	brcs	.+20     	; 0x74fe <__udivdi3+0x7be>
    74ea:	e2 16       	cp	r14, r18
    74ec:	f3 06       	cpc	r15, r19
    74ee:	04 07       	cpc	r16, r20
    74f0:	15 07       	cpc	r17, r21
    74f2:	28 f4       	brcc	.+10     	; 0x74fe <__udivdi3+0x7be>
    74f4:	08 94       	sec
    74f6:	a1 08       	sbc	r10, r1
    74f8:	b1 08       	sbc	r11, r1
    74fa:	c1 08       	sbc	r12, r1
    74fc:	d1 08       	sbc	r13, r1
    74fe:	61 96       	adiw	r28, 0x11	; 17
    7500:	ec ac       	ldd	r14, Y+60	; 0x3c
    7502:	fd ac       	ldd	r15, Y+61	; 0x3d
    7504:	0e ad       	ldd	r16, Y+62	; 0x3e
    7506:	1f ad       	ldd	r17, Y+63	; 0x3f
    7508:	61 97       	sbiw	r28, 0x11	; 17
    750a:	d7 01       	movw	r26, r14
    750c:	99 27       	eor	r25, r25
    750e:	88 27       	eor	r24, r24
    7510:	96 01       	movw	r18, r12
    7512:	85 01       	movw	r16, r10
    7514:	08 2b       	or	r16, r24
    7516:	19 2b       	or	r17, r25
    7518:	2a 2b       	or	r18, r26
    751a:	3b 2b       	or	r19, r27
    751c:	09 ab       	std	Y+49, r16	; 0x31
    751e:	1a ab       	std	Y+50, r17	; 0x32
    7520:	2b ab       	std	Y+51, r18	; 0x33
    7522:	3c ab       	std	Y+52, r19	; 0x34
    7524:	62 c2       	rjmp	.+1220   	; 0x79ea <__udivdi3+0xcaa>
    7526:	6e 14       	cp	r6, r14
    7528:	7f 04       	cpc	r7, r15
    752a:	80 06       	cpc	r8, r16
    752c:	91 06       	cpc	r9, r17
    752e:	08 f4       	brcc	.+2      	; 0x7532 <__udivdi3+0x7f2>
    7530:	51 c2       	rjmp	.+1186   	; 0x79d4 <__udivdi3+0xc94>
    7532:	20 e0       	ldi	r18, 0x00	; 0
    7534:	e2 16       	cp	r14, r18
    7536:	20 e0       	ldi	r18, 0x00	; 0
    7538:	f2 06       	cpc	r15, r18
    753a:	21 e0       	ldi	r18, 0x01	; 1
    753c:	02 07       	cpc	r16, r18
    753e:	20 e0       	ldi	r18, 0x00	; 0
    7540:	12 07       	cpc	r17, r18
    7542:	88 f4       	brcc	.+34     	; 0x7566 <__udivdi3+0x826>
    7544:	3f ef       	ldi	r19, 0xFF	; 255
    7546:	e3 16       	cp	r14, r19
    7548:	f1 04       	cpc	r15, r1
    754a:	01 05       	cpc	r16, r1
    754c:	11 05       	cpc	r17, r1
    754e:	31 f0       	breq	.+12     	; 0x755c <__udivdi3+0x81c>
    7550:	28 f0       	brcs	.+10     	; 0x755c <__udivdi3+0x81c>
    7552:	48 e0       	ldi	r20, 0x08	; 8
    7554:	50 e0       	ldi	r21, 0x00	; 0
    7556:	60 e0       	ldi	r22, 0x00	; 0
    7558:	70 e0       	ldi	r23, 0x00	; 0
    755a:	17 c0       	rjmp	.+46     	; 0x758a <__udivdi3+0x84a>
    755c:	40 e0       	ldi	r20, 0x00	; 0
    755e:	50 e0       	ldi	r21, 0x00	; 0
    7560:	60 e0       	ldi	r22, 0x00	; 0
    7562:	70 e0       	ldi	r23, 0x00	; 0
    7564:	12 c0       	rjmp	.+36     	; 0x758a <__udivdi3+0x84a>
    7566:	40 e0       	ldi	r20, 0x00	; 0
    7568:	e4 16       	cp	r14, r20
    756a:	40 e0       	ldi	r20, 0x00	; 0
    756c:	f4 06       	cpc	r15, r20
    756e:	40 e0       	ldi	r20, 0x00	; 0
    7570:	04 07       	cpc	r16, r20
    7572:	41 e0       	ldi	r20, 0x01	; 1
    7574:	14 07       	cpc	r17, r20
    7576:	28 f0       	brcs	.+10     	; 0x7582 <__udivdi3+0x842>
    7578:	48 e1       	ldi	r20, 0x18	; 24
    757a:	50 e0       	ldi	r21, 0x00	; 0
    757c:	60 e0       	ldi	r22, 0x00	; 0
    757e:	70 e0       	ldi	r23, 0x00	; 0
    7580:	04 c0       	rjmp	.+8      	; 0x758a <__udivdi3+0x84a>
    7582:	40 e1       	ldi	r20, 0x10	; 16
    7584:	50 e0       	ldi	r21, 0x00	; 0
    7586:	60 e0       	ldi	r22, 0x00	; 0
    7588:	70 e0       	ldi	r23, 0x00	; 0
    758a:	d8 01       	movw	r26, r16
    758c:	c7 01       	movw	r24, r14
    758e:	04 2e       	mov	r0, r20
    7590:	04 c0       	rjmp	.+8      	; 0x759a <__udivdi3+0x85a>
    7592:	b6 95       	lsr	r27
    7594:	a7 95       	ror	r26
    7596:	97 95       	ror	r25
    7598:	87 95       	ror	r24
    759a:	0a 94       	dec	r0
    759c:	d2 f7       	brpl	.-12     	; 0x7592 <__udivdi3+0x852>
    759e:	80 50       	subi	r24, 0x00	; 0
    75a0:	90 4e       	sbci	r25, 0xE0	; 224
    75a2:	dc 01       	movw	r26, r24
    75a4:	2c 91       	ld	r18, X
    75a6:	30 e2       	ldi	r19, 0x20	; 32
    75a8:	a3 2e       	mov	r10, r19
    75aa:	b1 2c       	mov	r11, r1
    75ac:	c1 2c       	mov	r12, r1
    75ae:	d1 2c       	mov	r13, r1
    75b0:	d6 01       	movw	r26, r12
    75b2:	c5 01       	movw	r24, r10
    75b4:	84 1b       	sub	r24, r20
    75b6:	95 0b       	sbc	r25, r21
    75b8:	a6 0b       	sbc	r26, r22
    75ba:	b7 0b       	sbc	r27, r23
    75bc:	82 1b       	sub	r24, r18
    75be:	91 09       	sbc	r25, r1
    75c0:	a1 09       	sbc	r26, r1
    75c2:	b1 09       	sbc	r27, r1
    75c4:	00 97       	sbiw	r24, 0x00	; 0
    75c6:	a1 05       	cpc	r26, r1
    75c8:	b1 05       	cpc	r27, r1
    75ca:	89 f4       	brne	.+34     	; 0x75ee <__udivdi3+0x8ae>
    75cc:	e6 14       	cp	r14, r6
    75ce:	f7 04       	cpc	r15, r7
    75d0:	08 05       	cpc	r16, r8
    75d2:	19 05       	cpc	r17, r9
    75d4:	08 f4       	brcc	.+2      	; 0x75d8 <__udivdi3+0x898>
    75d6:	f2 c1       	rjmp	.+996    	; 0x79bc <__udivdi3+0xc7c>
    75d8:	6d a4       	ldd	r6, Y+45	; 0x2d
    75da:	7e a4       	ldd	r7, Y+46	; 0x2e
    75dc:	8f a4       	ldd	r8, Y+47	; 0x2f
    75de:	98 a8       	ldd	r9, Y+48	; 0x30
    75e0:	62 14       	cp	r6, r2
    75e2:	73 04       	cpc	r7, r3
    75e4:	84 04       	cpc	r8, r4
    75e6:	95 04       	cpc	r9, r5
    75e8:	08 f0       	brcs	.+2      	; 0x75ec <__udivdi3+0x8ac>
    75ea:	e8 c1       	rjmp	.+976    	; 0x79bc <__udivdi3+0xc7c>
    75ec:	f3 c1       	rjmp	.+998    	; 0x79d4 <__udivdi3+0xc94>
    75ee:	6e 96       	adiw	r28, 0x1e	; 30
    75f0:	8f af       	std	Y+63, r24	; 0x3f
    75f2:	6e 97       	sbiw	r28, 0x1e	; 30
    75f4:	08 2e       	mov	r0, r24
    75f6:	04 c0       	rjmp	.+8      	; 0x7600 <__udivdi3+0x8c0>
    75f8:	ee 0c       	add	r14, r14
    75fa:	ff 1c       	adc	r15, r15
    75fc:	00 1f       	adc	r16, r16
    75fe:	11 1f       	adc	r17, r17
    7600:	0a 94       	dec	r0
    7602:	d2 f7       	brpl	.-12     	; 0x75f8 <__udivdi3+0x8b8>
    7604:	6a 2d       	mov	r22, r10
    7606:	68 1b       	sub	r22, r24
    7608:	d2 01       	movw	r26, r4
    760a:	c1 01       	movw	r24, r2
    760c:	06 2e       	mov	r0, r22
    760e:	04 c0       	rjmp	.+8      	; 0x7618 <__udivdi3+0x8d8>
    7610:	b6 95       	lsr	r27
    7612:	a7 95       	ror	r26
    7614:	97 95       	ror	r25
    7616:	87 95       	ror	r24
    7618:	0a 94       	dec	r0
    761a:	d2 f7       	brpl	.-12     	; 0x7610 <__udivdi3+0x8d0>
    761c:	5c 01       	movw	r10, r24
    761e:	6d 01       	movw	r12, r26
    7620:	ae 28       	or	r10, r14
    7622:	bf 28       	or	r11, r15
    7624:	c0 2a       	or	r12, r16
    7626:	d1 2a       	or	r13, r17
    7628:	ad a2       	std	Y+37, r10	; 0x25
    762a:	be a2       	std	Y+38, r11	; 0x26
    762c:	cf a2       	std	Y+39, r12	; 0x27
    762e:	d8 a6       	std	Y+40, r13	; 0x28
    7630:	72 01       	movw	r14, r4
    7632:	61 01       	movw	r12, r2
    7634:	6e 96       	adiw	r28, 0x1e	; 30
    7636:	0f ac       	ldd	r0, Y+63	; 0x3f
    7638:	6e 97       	sbiw	r28, 0x1e	; 30
    763a:	04 c0       	rjmp	.+8      	; 0x7644 <__udivdi3+0x904>
    763c:	cc 0c       	add	r12, r12
    763e:	dd 1c       	adc	r13, r13
    7640:	ee 1c       	adc	r14, r14
    7642:	ff 1c       	adc	r15, r15
    7644:	0a 94       	dec	r0
    7646:	d2 f7       	brpl	.-12     	; 0x763c <__udivdi3+0x8fc>
    7648:	c9 a2       	std	Y+33, r12	; 0x21
    764a:	da a2       	std	Y+34, r13	; 0x22
    764c:	eb a2       	std	Y+35, r14	; 0x23
    764e:	fc a2       	std	Y+36, r15	; 0x24
    7650:	64 01       	movw	r12, r8
    7652:	53 01       	movw	r10, r6
    7654:	06 2e       	mov	r0, r22
    7656:	04 c0       	rjmp	.+8      	; 0x7660 <__udivdi3+0x920>
    7658:	d6 94       	lsr	r13
    765a:	c7 94       	ror	r12
    765c:	b7 94       	ror	r11
    765e:	a7 94       	ror	r10
    7660:	0a 94       	dec	r0
    7662:	d2 f7       	brpl	.-12     	; 0x7658 <__udivdi3+0x918>
    7664:	d4 01       	movw	r26, r8
    7666:	c3 01       	movw	r24, r6
    7668:	6e 96       	adiw	r28, 0x1e	; 30
    766a:	0f ac       	ldd	r0, Y+63	; 0x3f
    766c:	6e 97       	sbiw	r28, 0x1e	; 30
    766e:	04 c0       	rjmp	.+8      	; 0x7678 <__udivdi3+0x938>
    7670:	88 0f       	add	r24, r24
    7672:	99 1f       	adc	r25, r25
    7674:	aa 1f       	adc	r26, r26
    7676:	bb 1f       	adc	r27, r27
    7678:	0a 94       	dec	r0
    767a:	d2 f7       	brpl	.-12     	; 0x7670 <__udivdi3+0x930>
    767c:	ed a4       	ldd	r14, Y+45	; 0x2d
    767e:	fe a4       	ldd	r15, Y+46	; 0x2e
    7680:	0f a5       	ldd	r16, Y+47	; 0x2f
    7682:	18 a9       	ldd	r17, Y+48	; 0x30
    7684:	04 c0       	rjmp	.+8      	; 0x768e <__udivdi3+0x94e>
    7686:	16 95       	lsr	r17
    7688:	07 95       	ror	r16
    768a:	f7 94       	ror	r15
    768c:	e7 94       	ror	r14
    768e:	6a 95       	dec	r22
    7690:	d2 f7       	brpl	.-12     	; 0x7686 <__udivdi3+0x946>
    7692:	37 01       	movw	r6, r14
    7694:	48 01       	movw	r8, r16
    7696:	68 2a       	or	r6, r24
    7698:	79 2a       	or	r7, r25
    769a:	8a 2a       	or	r8, r26
    769c:	9b 2a       	or	r9, r27
    769e:	6d 8e       	std	Y+29, r6	; 0x1d
    76a0:	7e 8e       	std	Y+30, r7	; 0x1e
    76a2:	8f 8e       	std	Y+31, r8	; 0x1f
    76a4:	98 a2       	std	Y+32, r9	; 0x20
    76a6:	ed a0       	ldd	r14, Y+37	; 0x25
    76a8:	fe a0       	ldd	r15, Y+38	; 0x26
    76aa:	0f a1       	ldd	r16, Y+39	; 0x27
    76ac:	18 a5       	ldd	r17, Y+40	; 0x28
    76ae:	38 01       	movw	r6, r16
    76b0:	88 24       	eor	r8, r8
    76b2:	99 24       	eor	r9, r9
    76b4:	98 01       	movw	r18, r16
    76b6:	87 01       	movw	r16, r14
    76b8:	20 70       	andi	r18, 0x00	; 0
    76ba:	30 70       	andi	r19, 0x00	; 0
    76bc:	65 96       	adiw	r28, 0x15	; 21
    76be:	0c af       	std	Y+60, r16	; 0x3c
    76c0:	1d af       	std	Y+61, r17	; 0x3d
    76c2:	2e af       	std	Y+62, r18	; 0x3e
    76c4:	3f af       	std	Y+63, r19	; 0x3f
    76c6:	65 97       	sbiw	r28, 0x15	; 21
    76c8:	c6 01       	movw	r24, r12
    76ca:	b5 01       	movw	r22, r10
    76cc:	a4 01       	movw	r20, r8
    76ce:	93 01       	movw	r18, r6
    76d0:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__udivmodsi4>
    76d4:	7b 01       	movw	r14, r22
    76d6:	8c 01       	movw	r16, r24
    76d8:	c6 01       	movw	r24, r12
    76da:	b5 01       	movw	r22, r10
    76dc:	a4 01       	movw	r20, r8
    76de:	93 01       	movw	r18, r6
    76e0:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__udivmodsi4>
    76e4:	c9 01       	movw	r24, r18
    76e6:	da 01       	movw	r26, r20
    76e8:	1c 01       	movw	r2, r24
    76ea:	2d 01       	movw	r4, r26
    76ec:	c2 01       	movw	r24, r4
    76ee:	b1 01       	movw	r22, r2
    76f0:	65 96       	adiw	r28, 0x15	; 21
    76f2:	2c ad       	ldd	r18, Y+60	; 0x3c
    76f4:	3d ad       	ldd	r19, Y+61	; 0x3d
    76f6:	4e ad       	ldd	r20, Y+62	; 0x3e
    76f8:	5f ad       	ldd	r21, Y+63	; 0x3f
    76fa:	65 97       	sbiw	r28, 0x15	; 21
    76fc:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <__mulsi3>
    7700:	9b 01       	movw	r18, r22
    7702:	ac 01       	movw	r20, r24
    7704:	87 01       	movw	r16, r14
    7706:	ff 24       	eor	r15, r15
    7708:	ee 24       	eor	r14, r14
    770a:	ad 8c       	ldd	r10, Y+29	; 0x1d
    770c:	be 8c       	ldd	r11, Y+30	; 0x1e
    770e:	cf 8c       	ldd	r12, Y+31	; 0x1f
    7710:	d8 a0       	ldd	r13, Y+32	; 0x20
    7712:	c6 01       	movw	r24, r12
    7714:	aa 27       	eor	r26, r26
    7716:	bb 27       	eor	r27, r27
    7718:	57 01       	movw	r10, r14
    771a:	68 01       	movw	r12, r16
    771c:	a8 2a       	or	r10, r24
    771e:	b9 2a       	or	r11, r25
    7720:	ca 2a       	or	r12, r26
    7722:	db 2a       	or	r13, r27
    7724:	a2 16       	cp	r10, r18
    7726:	b3 06       	cpc	r11, r19
    7728:	c4 06       	cpc	r12, r20
    772a:	d5 06       	cpc	r13, r21
    772c:	00 f5       	brcc	.+64     	; 0x776e <__udivdi3+0xa2e>
    772e:	08 94       	sec
    7730:	21 08       	sbc	r2, r1
    7732:	31 08       	sbc	r3, r1
    7734:	41 08       	sbc	r4, r1
    7736:	51 08       	sbc	r5, r1
    7738:	ed a0       	ldd	r14, Y+37	; 0x25
    773a:	fe a0       	ldd	r15, Y+38	; 0x26
    773c:	0f a1       	ldd	r16, Y+39	; 0x27
    773e:	18 a5       	ldd	r17, Y+40	; 0x28
    7740:	ae 0c       	add	r10, r14
    7742:	bf 1c       	adc	r11, r15
    7744:	c0 1e       	adc	r12, r16
    7746:	d1 1e       	adc	r13, r17
    7748:	ae 14       	cp	r10, r14
    774a:	bf 04       	cpc	r11, r15
    774c:	c0 06       	cpc	r12, r16
    774e:	d1 06       	cpc	r13, r17
    7750:	70 f0       	brcs	.+28     	; 0x776e <__udivdi3+0xa2e>
    7752:	a2 16       	cp	r10, r18
    7754:	b3 06       	cpc	r11, r19
    7756:	c4 06       	cpc	r12, r20
    7758:	d5 06       	cpc	r13, r21
    775a:	48 f4       	brcc	.+18     	; 0x776e <__udivdi3+0xa2e>
    775c:	08 94       	sec
    775e:	21 08       	sbc	r2, r1
    7760:	31 08       	sbc	r3, r1
    7762:	41 08       	sbc	r4, r1
    7764:	51 08       	sbc	r5, r1
    7766:	ae 0c       	add	r10, r14
    7768:	bf 1c       	adc	r11, r15
    776a:	c0 1e       	adc	r12, r16
    776c:	d1 1e       	adc	r13, r17
    776e:	a2 1a       	sub	r10, r18
    7770:	b3 0a       	sbc	r11, r19
    7772:	c4 0a       	sbc	r12, r20
    7774:	d5 0a       	sbc	r13, r21
    7776:	c6 01       	movw	r24, r12
    7778:	b5 01       	movw	r22, r10
    777a:	a4 01       	movw	r20, r8
    777c:	93 01       	movw	r18, r6
    777e:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__udivmodsi4>
    7782:	7b 01       	movw	r14, r22
    7784:	8c 01       	movw	r16, r24
    7786:	c6 01       	movw	r24, r12
    7788:	b5 01       	movw	r22, r10
    778a:	a4 01       	movw	r20, r8
    778c:	93 01       	movw	r18, r6
    778e:	0e 94 11 45 	call	0x8a22	; 0x8a22 <__udivmodsi4>
    7792:	c9 01       	movw	r24, r18
    7794:	da 01       	movw	r26, r20
    7796:	3c 01       	movw	r6, r24
    7798:	4d 01       	movw	r8, r26
    779a:	c4 01       	movw	r24, r8
    779c:	b3 01       	movw	r22, r6
    779e:	65 96       	adiw	r28, 0x15	; 21
    77a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    77a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    77a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    77a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    77a8:	65 97       	sbiw	r28, 0x15	; 21
    77aa:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <__mulsi3>
    77ae:	9b 01       	movw	r18, r22
    77b0:	ac 01       	movw	r20, r24
    77b2:	87 01       	movw	r16, r14
    77b4:	ff 24       	eor	r15, r15
    77b6:	ee 24       	eor	r14, r14
    77b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    77ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    77bc:	af 8d       	ldd	r26, Y+31	; 0x1f
    77be:	b8 a1       	ldd	r27, Y+32	; 0x20
    77c0:	a0 70       	andi	r26, 0x00	; 0
    77c2:	b0 70       	andi	r27, 0x00	; 0
    77c4:	57 01       	movw	r10, r14
    77c6:	68 01       	movw	r12, r16
    77c8:	a8 2a       	or	r10, r24
    77ca:	b9 2a       	or	r11, r25
    77cc:	ca 2a       	or	r12, r26
    77ce:	db 2a       	or	r13, r27
    77d0:	a2 16       	cp	r10, r18
    77d2:	b3 06       	cpc	r11, r19
    77d4:	c4 06       	cpc	r12, r20
    77d6:	d5 06       	cpc	r13, r21
    77d8:	00 f5       	brcc	.+64     	; 0x781a <__udivdi3+0xada>
    77da:	08 94       	sec
    77dc:	61 08       	sbc	r6, r1
    77de:	71 08       	sbc	r7, r1
    77e0:	81 08       	sbc	r8, r1
    77e2:	91 08       	sbc	r9, r1
    77e4:	6d a1       	ldd	r22, Y+37	; 0x25
    77e6:	7e a1       	ldd	r23, Y+38	; 0x26
    77e8:	8f a1       	ldd	r24, Y+39	; 0x27
    77ea:	98 a5       	ldd	r25, Y+40	; 0x28
    77ec:	a6 0e       	add	r10, r22
    77ee:	b7 1e       	adc	r11, r23
    77f0:	c8 1e       	adc	r12, r24
    77f2:	d9 1e       	adc	r13, r25
    77f4:	a6 16       	cp	r10, r22
    77f6:	b7 06       	cpc	r11, r23
    77f8:	c8 06       	cpc	r12, r24
    77fa:	d9 06       	cpc	r13, r25
    77fc:	70 f0       	brcs	.+28     	; 0x781a <__udivdi3+0xada>
    77fe:	a2 16       	cp	r10, r18
    7800:	b3 06       	cpc	r11, r19
    7802:	c4 06       	cpc	r12, r20
    7804:	d5 06       	cpc	r13, r21
    7806:	48 f4       	brcc	.+18     	; 0x781a <__udivdi3+0xada>
    7808:	08 94       	sec
    780a:	61 08       	sbc	r6, r1
    780c:	71 08       	sbc	r7, r1
    780e:	81 08       	sbc	r8, r1
    7810:	91 08       	sbc	r9, r1
    7812:	a6 0e       	add	r10, r22
    7814:	b7 1e       	adc	r11, r23
    7816:	c8 1e       	adc	r12, r24
    7818:	d9 1e       	adc	r13, r25
    781a:	d6 01       	movw	r26, r12
    781c:	c5 01       	movw	r24, r10
    781e:	82 1b       	sub	r24, r18
    7820:	93 0b       	sbc	r25, r19
    7822:	a4 0b       	sbc	r26, r20
    7824:	b5 0b       	sbc	r27, r21
    7826:	89 8f       	std	Y+25, r24	; 0x19
    7828:	9a 8f       	std	Y+26, r25	; 0x1a
    782a:	ab 8f       	std	Y+27, r26	; 0x1b
    782c:	bc 8f       	std	Y+28, r27	; 0x1c
    782e:	d1 01       	movw	r26, r2
    7830:	99 27       	eor	r25, r25
    7832:	88 27       	eor	r24, r24
    7834:	64 01       	movw	r12, r8
    7836:	53 01       	movw	r10, r6
    7838:	a8 2a       	or	r10, r24
    783a:	b9 2a       	or	r11, r25
    783c:	ca 2a       	or	r12, r26
    783e:	db 2a       	or	r13, r27
    7840:	a9 aa       	std	Y+49, r10	; 0x31
    7842:	ba aa       	std	Y+50, r11	; 0x32
    7844:	cb aa       	std	Y+51, r12	; 0x33
    7846:	dc aa       	std	Y+52, r13	; 0x34
    7848:	86 01       	movw	r16, r12
    784a:	75 01       	movw	r14, r10
    784c:	2f ef       	ldi	r18, 0xFF	; 255
    784e:	3f ef       	ldi	r19, 0xFF	; 255
    7850:	40 e0       	ldi	r20, 0x00	; 0
    7852:	50 e0       	ldi	r21, 0x00	; 0
    7854:	e2 22       	and	r14, r18
    7856:	f3 22       	and	r15, r19
    7858:	04 23       	and	r16, r20
    785a:	15 23       	and	r17, r21
    785c:	a6 01       	movw	r20, r12
    785e:	66 27       	eor	r22, r22
    7860:	77 27       	eor	r23, r23
    7862:	6d 96       	adiw	r28, 0x1d	; 29
    7864:	4c af       	std	Y+60, r20	; 0x3c
    7866:	5d af       	std	Y+61, r21	; 0x3d
    7868:	6e af       	std	Y+62, r22	; 0x3e
    786a:	7f af       	std	Y+63, r23	; 0x3f
    786c:	6d 97       	sbiw	r28, 0x1d	; 29
    786e:	a9 a0       	ldd	r10, Y+33	; 0x21
    7870:	ba a0       	ldd	r11, Y+34	; 0x22
    7872:	cb a0       	ldd	r12, Y+35	; 0x23
    7874:	dc a0       	ldd	r13, Y+36	; 0x24
    7876:	6f ef       	ldi	r22, 0xFF	; 255
    7878:	7f ef       	ldi	r23, 0xFF	; 255
    787a:	80 e0       	ldi	r24, 0x00	; 0
    787c:	90 e0       	ldi	r25, 0x00	; 0
    787e:	a6 22       	and	r10, r22
    7880:	b7 22       	and	r11, r23
    7882:	c8 22       	and	r12, r24
    7884:	d9 22       	and	r13, r25
    7886:	89 a1       	ldd	r24, Y+33	; 0x21
    7888:	9a a1       	ldd	r25, Y+34	; 0x22
    788a:	ab a1       	ldd	r26, Y+35	; 0x23
    788c:	bc a1       	ldd	r27, Y+36	; 0x24
    788e:	1d 01       	movw	r2, r26
    7890:	44 24       	eor	r4, r4
    7892:	55 24       	eor	r5, r5
    7894:	c8 01       	movw	r24, r16
    7896:	b7 01       	movw	r22, r14
    7898:	a6 01       	movw	r20, r12
    789a:	95 01       	movw	r18, r10
    789c:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <__mulsi3>
    78a0:	69 96       	adiw	r28, 0x19	; 25
    78a2:	6c af       	std	Y+60, r22	; 0x3c
    78a4:	7d af       	std	Y+61, r23	; 0x3d
    78a6:	8e af       	std	Y+62, r24	; 0x3e
    78a8:	9f af       	std	Y+63, r25	; 0x3f
    78aa:	69 97       	sbiw	r28, 0x19	; 25
    78ac:	c8 01       	movw	r24, r16
    78ae:	b7 01       	movw	r22, r14
    78b0:	a2 01       	movw	r20, r4
    78b2:	91 01       	movw	r18, r2
    78b4:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <__mulsi3>
    78b8:	3b 01       	movw	r6, r22
    78ba:	4c 01       	movw	r8, r24
    78bc:	6d 96       	adiw	r28, 0x1d	; 29
    78be:	6c ad       	ldd	r22, Y+60	; 0x3c
    78c0:	7d ad       	ldd	r23, Y+61	; 0x3d
    78c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    78c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    78c6:	6d 97       	sbiw	r28, 0x1d	; 29
    78c8:	a6 01       	movw	r20, r12
    78ca:	95 01       	movw	r18, r10
    78cc:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <__mulsi3>
    78d0:	7b 01       	movw	r14, r22
    78d2:	8c 01       	movw	r16, r24
    78d4:	6d 96       	adiw	r28, 0x1d	; 29
    78d6:	6c ad       	ldd	r22, Y+60	; 0x3c
    78d8:	7d ad       	ldd	r23, Y+61	; 0x3d
    78da:	8e ad       	ldd	r24, Y+62	; 0x3e
    78dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    78de:	6d 97       	sbiw	r28, 0x1d	; 29
    78e0:	a2 01       	movw	r20, r4
    78e2:	91 01       	movw	r18, r2
    78e4:	0e 94 f2 44 	call	0x89e4	; 0x89e4 <__mulsi3>
    78e8:	5b 01       	movw	r10, r22
    78ea:	6c 01       	movw	r12, r24
    78ec:	a8 01       	movw	r20, r16
    78ee:	97 01       	movw	r18, r14
    78f0:	26 0d       	add	r18, r6
    78f2:	37 1d       	adc	r19, r7
    78f4:	48 1d       	adc	r20, r8
    78f6:	59 1d       	adc	r21, r9
    78f8:	69 96       	adiw	r28, 0x19	; 25
    78fa:	6c ac       	ldd	r6, Y+60	; 0x3c
    78fc:	7d ac       	ldd	r7, Y+61	; 0x3d
    78fe:	8e ac       	ldd	r8, Y+62	; 0x3e
    7900:	9f ac       	ldd	r9, Y+63	; 0x3f
    7902:	69 97       	sbiw	r28, 0x19	; 25
    7904:	c4 01       	movw	r24, r8
    7906:	aa 27       	eor	r26, r26
    7908:	bb 27       	eor	r27, r27
    790a:	28 0f       	add	r18, r24
    790c:	39 1f       	adc	r19, r25
    790e:	4a 1f       	adc	r20, r26
    7910:	5b 1f       	adc	r21, r27
    7912:	2e 15       	cp	r18, r14
    7914:	3f 05       	cpc	r19, r15
    7916:	40 07       	cpc	r20, r16
    7918:	51 07       	cpc	r21, r17
    791a:	48 f4       	brcc	.+18     	; 0x792e <__udivdi3+0xbee>
    791c:	e1 2c       	mov	r14, r1
    791e:	f1 2c       	mov	r15, r1
    7920:	61 e0       	ldi	r22, 0x01	; 1
    7922:	06 2f       	mov	r16, r22
    7924:	11 2d       	mov	r17, r1
    7926:	ae 0c       	add	r10, r14
    7928:	bf 1c       	adc	r11, r15
    792a:	c0 1e       	adc	r12, r16
    792c:	d1 1e       	adc	r13, r17
    792e:	ca 01       	movw	r24, r20
    7930:	aa 27       	eor	r26, r26
    7932:	bb 27       	eor	r27, r27
    7934:	bc 01       	movw	r22, r24
    7936:	cd 01       	movw	r24, r26
    7938:	6a 0d       	add	r22, r10
    793a:	7b 1d       	adc	r23, r11
    793c:	8c 1d       	adc	r24, r12
    793e:	9d 1d       	adc	r25, r13
    7940:	69 8c       	ldd	r6, Y+25	; 0x19
    7942:	7a 8c       	ldd	r7, Y+26	; 0x1a
    7944:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7946:	9c 8c       	ldd	r9, Y+28	; 0x1c
    7948:	66 16       	cp	r6, r22
    794a:	77 06       	cpc	r7, r23
    794c:	88 06       	cpc	r8, r24
    794e:	99 06       	cpc	r9, r25
    7950:	40 f1       	brcs	.+80     	; 0x79a2 <__udivdi3+0xc62>
    7952:	66 15       	cp	r22, r6
    7954:	77 05       	cpc	r23, r7
    7956:	88 05       	cpc	r24, r8
    7958:	99 05       	cpc	r25, r9
    795a:	09 f0       	breq	.+2      	; 0x795e <__udivdi3+0xc1e>
    795c:	43 c0       	rjmp	.+134    	; 0x79e4 <__udivdi3+0xca4>
    795e:	d9 01       	movw	r26, r18
    7960:	99 27       	eor	r25, r25
    7962:	88 27       	eor	r24, r24
    7964:	69 96       	adiw	r28, 0x19	; 25
    7966:	2c ad       	ldd	r18, Y+60	; 0x3c
    7968:	3d ad       	ldd	r19, Y+61	; 0x3d
    796a:	4e ad       	ldd	r20, Y+62	; 0x3e
    796c:	5f ad       	ldd	r21, Y+63	; 0x3f
    796e:	69 97       	sbiw	r28, 0x19	; 25
    7970:	40 70       	andi	r20, 0x00	; 0
    7972:	50 70       	andi	r21, 0x00	; 0
    7974:	82 0f       	add	r24, r18
    7976:	93 1f       	adc	r25, r19
    7978:	a4 1f       	adc	r26, r20
    797a:	b5 1f       	adc	r27, r21
    797c:	2d a5       	ldd	r18, Y+45	; 0x2d
    797e:	3e a5       	ldd	r19, Y+46	; 0x2e
    7980:	4f a5       	ldd	r20, Y+47	; 0x2f
    7982:	58 a9       	ldd	r21, Y+48	; 0x30
    7984:	6e 96       	adiw	r28, 0x1e	; 30
    7986:	0f ac       	ldd	r0, Y+63	; 0x3f
    7988:	6e 97       	sbiw	r28, 0x1e	; 30
    798a:	04 c0       	rjmp	.+8      	; 0x7994 <__udivdi3+0xc54>
    798c:	22 0f       	add	r18, r18
    798e:	33 1f       	adc	r19, r19
    7990:	44 1f       	adc	r20, r20
    7992:	55 1f       	adc	r21, r21
    7994:	0a 94       	dec	r0
    7996:	d2 f7       	brpl	.-12     	; 0x798c <__udivdi3+0xc4c>
    7998:	28 17       	cp	r18, r24
    799a:	39 07       	cpc	r19, r25
    799c:	4a 07       	cpc	r20, r26
    799e:	5b 07       	cpc	r21, r27
    79a0:	08 f5       	brcc	.+66     	; 0x79e4 <__udivdi3+0xca4>
    79a2:	09 a9       	ldd	r16, Y+49	; 0x31
    79a4:	1a a9       	ldd	r17, Y+50	; 0x32
    79a6:	2b a9       	ldd	r18, Y+51	; 0x33
    79a8:	3c a9       	ldd	r19, Y+52	; 0x34
    79aa:	01 50       	subi	r16, 0x01	; 1
    79ac:	10 40       	sbci	r17, 0x00	; 0
    79ae:	20 40       	sbci	r18, 0x00	; 0
    79b0:	30 40       	sbci	r19, 0x00	; 0
    79b2:	09 ab       	std	Y+49, r16	; 0x31
    79b4:	1a ab       	std	Y+50, r17	; 0x32
    79b6:	2b ab       	std	Y+51, r18	; 0x33
    79b8:	3c ab       	std	Y+52, r19	; 0x34
    79ba:	14 c0       	rjmp	.+40     	; 0x79e4 <__udivdi3+0xca4>
    79bc:	66 24       	eor	r6, r6
    79be:	77 24       	eor	r7, r7
    79c0:	43 01       	movw	r8, r6
    79c2:	21 e0       	ldi	r18, 0x01	; 1
    79c4:	30 e0       	ldi	r19, 0x00	; 0
    79c6:	40 e0       	ldi	r20, 0x00	; 0
    79c8:	50 e0       	ldi	r21, 0x00	; 0
    79ca:	29 ab       	std	Y+49, r18	; 0x31
    79cc:	3a ab       	std	Y+50, r19	; 0x32
    79ce:	4b ab       	std	Y+51, r20	; 0x33
    79d0:	5c ab       	std	Y+52, r21	; 0x34
    79d2:	0b c0       	rjmp	.+22     	; 0x79ea <__udivdi3+0xcaa>
    79d4:	66 24       	eor	r6, r6
    79d6:	77 24       	eor	r7, r7
    79d8:	43 01       	movw	r8, r6
    79da:	19 aa       	std	Y+49, r1	; 0x31
    79dc:	1a aa       	std	Y+50, r1	; 0x32
    79de:	1b aa       	std	Y+51, r1	; 0x33
    79e0:	1c aa       	std	Y+52, r1	; 0x34
    79e2:	03 c0       	rjmp	.+6      	; 0x79ea <__udivdi3+0xcaa>
    79e4:	66 24       	eor	r6, r6
    79e6:	77 24       	eor	r7, r7
    79e8:	43 01       	movw	r8, r6
    79ea:	fe 01       	movw	r30, r28
    79ec:	71 96       	adiw	r30, 0x11	; 17
    79ee:	88 e0       	ldi	r24, 0x08	; 8
    79f0:	df 01       	movw	r26, r30
    79f2:	1d 92       	st	X+, r1
    79f4:	8a 95       	dec	r24
    79f6:	e9 f7       	brne	.-6      	; 0x79f2 <__udivdi3+0xcb2>
    79f8:	a9 a8       	ldd	r10, Y+49	; 0x31
    79fa:	ba a8       	ldd	r11, Y+50	; 0x32
    79fc:	cb a8       	ldd	r12, Y+51	; 0x33
    79fe:	dc a8       	ldd	r13, Y+52	; 0x34
    7a00:	a9 8a       	std	Y+17, r10	; 0x11
    7a02:	ba 8a       	std	Y+18, r11	; 0x12
    7a04:	cb 8a       	std	Y+19, r12	; 0x13
    7a06:	dc 8a       	std	Y+20, r13	; 0x14
    7a08:	6d 8a       	std	Y+21, r6	; 0x15
    7a0a:	7e 8a       	std	Y+22, r7	; 0x16
    7a0c:	8f 8a       	std	Y+23, r8	; 0x17
    7a0e:	98 8e       	std	Y+24, r9	; 0x18
    7a10:	29 a9       	ldd	r18, Y+49	; 0x31
    7a12:	3a 89       	ldd	r19, Y+18	; 0x12
    7a14:	4b 89       	ldd	r20, Y+19	; 0x13
    7a16:	5c 89       	ldd	r21, Y+20	; 0x14
    7a18:	66 2d       	mov	r22, r6
    7a1a:	7e 89       	ldd	r23, Y+22	; 0x16
    7a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    7a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    7a20:	c2 5a       	subi	r28, 0xA2	; 162
    7a22:	df 4f       	sbci	r29, 0xFF	; 255
    7a24:	e2 e1       	ldi	r30, 0x12	; 18
    7a26:	0c 94 4f 45 	jmp	0x8a9e	; 0x8a9e <__epilogue_restores__>

00007a2a <vfprintf>:
    7a2a:	2f 92       	push	r2
    7a2c:	3f 92       	push	r3
    7a2e:	4f 92       	push	r4
    7a30:	5f 92       	push	r5
    7a32:	6f 92       	push	r6
    7a34:	7f 92       	push	r7
    7a36:	8f 92       	push	r8
    7a38:	9f 92       	push	r9
    7a3a:	af 92       	push	r10
    7a3c:	bf 92       	push	r11
    7a3e:	cf 92       	push	r12
    7a40:	df 92       	push	r13
    7a42:	ef 92       	push	r14
    7a44:	ff 92       	push	r15
    7a46:	0f 93       	push	r16
    7a48:	1f 93       	push	r17
    7a4a:	df 93       	push	r29
    7a4c:	cf 93       	push	r28
    7a4e:	cd b7       	in	r28, 0x3d	; 61
    7a50:	de b7       	in	r29, 0x3e	; 62
    7a52:	61 97       	sbiw	r28, 0x11	; 17
    7a54:	cd bf       	out	0x3d, r28	; 61
    7a56:	de bf       	out	0x3e, r29	; 62
    7a58:	3c 01       	movw	r6, r24
    7a5a:	6e 87       	std	Y+14, r22	; 0x0e
    7a5c:	7f 87       	std	Y+15, r23	; 0x0f
    7a5e:	6a 01       	movw	r12, r20
    7a60:	fc 01       	movw	r30, r24
    7a62:	16 82       	std	Z+6, r1	; 0x06
    7a64:	17 82       	std	Z+7, r1	; 0x07
    7a66:	83 81       	ldd	r24, Z+3	; 0x03
    7a68:	81 fd       	sbrc	r24, 1
    7a6a:	03 c0       	rjmp	.+6      	; 0x7a72 <vfprintf+0x48>
    7a6c:	6f ef       	ldi	r22, 0xFF	; 255
    7a6e:	7f ef       	ldi	r23, 0xFF	; 255
    7a70:	6f c3       	rjmp	.+1758   	; 0x8150 <vfprintf+0x726>
    7a72:	9e 01       	movw	r18, r28
    7a74:	2f 5f       	subi	r18, 0xFF	; 255
    7a76:	3f 4f       	sbci	r19, 0xFF	; 255
    7a78:	28 8b       	std	Y+16, r18	; 0x10
    7a7a:	39 8b       	std	Y+17, r19	; 0x11
    7a7c:	f3 01       	movw	r30, r6
    7a7e:	23 81       	ldd	r18, Z+3	; 0x03
    7a80:	ee 85       	ldd	r30, Y+14	; 0x0e
    7a82:	ff 85       	ldd	r31, Y+15	; 0x0f
    7a84:	23 fd       	sbrc	r18, 3
    7a86:	85 91       	lpm	r24, Z+
    7a88:	23 ff       	sbrs	r18, 3
    7a8a:	81 91       	ld	r24, Z+
    7a8c:	ee 87       	std	Y+14, r30	; 0x0e
    7a8e:	ff 87       	std	Y+15, r31	; 0x0f
    7a90:	88 23       	and	r24, r24
    7a92:	09 f4       	brne	.+2      	; 0x7a96 <vfprintf+0x6c>
    7a94:	5a c3       	rjmp	.+1716   	; 0x814a <vfprintf+0x720>
    7a96:	85 32       	cpi	r24, 0x25	; 37
    7a98:	51 f4       	brne	.+20     	; 0x7aae <vfprintf+0x84>
    7a9a:	ee 85       	ldd	r30, Y+14	; 0x0e
    7a9c:	ff 85       	ldd	r31, Y+15	; 0x0f
    7a9e:	23 fd       	sbrc	r18, 3
    7aa0:	85 91       	lpm	r24, Z+
    7aa2:	23 ff       	sbrs	r18, 3
    7aa4:	81 91       	ld	r24, Z+
    7aa6:	ee 87       	std	Y+14, r30	; 0x0e
    7aa8:	ff 87       	std	Y+15, r31	; 0x0f
    7aaa:	85 32       	cpi	r24, 0x25	; 37
    7aac:	29 f4       	brne	.+10     	; 0x7ab8 <vfprintf+0x8e>
    7aae:	90 e0       	ldi	r25, 0x00	; 0
    7ab0:	b3 01       	movw	r22, r6
    7ab2:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7ab6:	e2 cf       	rjmp	.-60     	; 0x7a7c <vfprintf+0x52>
    7ab8:	98 2f       	mov	r25, r24
    7aba:	10 e0       	ldi	r17, 0x00	; 0
    7abc:	88 24       	eor	r8, r8
    7abe:	99 24       	eor	r9, r9
    7ac0:	10 32       	cpi	r17, 0x20	; 32
    7ac2:	b0 f4       	brcc	.+44     	; 0x7af0 <vfprintf+0xc6>
    7ac4:	9b 32       	cpi	r25, 0x2B	; 43
    7ac6:	69 f0       	breq	.+26     	; 0x7ae2 <vfprintf+0xb8>
    7ac8:	9c 32       	cpi	r25, 0x2C	; 44
    7aca:	28 f4       	brcc	.+10     	; 0x7ad6 <vfprintf+0xac>
    7acc:	90 32       	cpi	r25, 0x20	; 32
    7ace:	51 f0       	breq	.+20     	; 0x7ae4 <vfprintf+0xba>
    7ad0:	93 32       	cpi	r25, 0x23	; 35
    7ad2:	71 f4       	brne	.+28     	; 0x7af0 <vfprintf+0xc6>
    7ad4:	0b c0       	rjmp	.+22     	; 0x7aec <vfprintf+0xc2>
    7ad6:	9d 32       	cpi	r25, 0x2D	; 45
    7ad8:	39 f0       	breq	.+14     	; 0x7ae8 <vfprintf+0xbe>
    7ada:	90 33       	cpi	r25, 0x30	; 48
    7adc:	49 f4       	brne	.+18     	; 0x7af0 <vfprintf+0xc6>
    7ade:	11 60       	ori	r17, 0x01	; 1
    7ae0:	28 c0       	rjmp	.+80     	; 0x7b32 <vfprintf+0x108>
    7ae2:	12 60       	ori	r17, 0x02	; 2
    7ae4:	14 60       	ori	r17, 0x04	; 4
    7ae6:	25 c0       	rjmp	.+74     	; 0x7b32 <vfprintf+0x108>
    7ae8:	18 60       	ori	r17, 0x08	; 8
    7aea:	23 c0       	rjmp	.+70     	; 0x7b32 <vfprintf+0x108>
    7aec:	10 61       	ori	r17, 0x10	; 16
    7aee:	21 c0       	rjmp	.+66     	; 0x7b32 <vfprintf+0x108>
    7af0:	17 fd       	sbrc	r17, 7
    7af2:	2a c0       	rjmp	.+84     	; 0x7b48 <vfprintf+0x11e>
    7af4:	89 2f       	mov	r24, r25
    7af6:	80 53       	subi	r24, 0x30	; 48
    7af8:	8a 30       	cpi	r24, 0x0A	; 10
    7afa:	78 f4       	brcc	.+30     	; 0x7b1a <vfprintf+0xf0>
    7afc:	16 ff       	sbrs	r17, 6
    7afe:	06 c0       	rjmp	.+12     	; 0x7b0c <vfprintf+0xe2>
    7b00:	fa e0       	ldi	r31, 0x0A	; 10
    7b02:	9f 9e       	mul	r9, r31
    7b04:	90 2c       	mov	r9, r0
    7b06:	11 24       	eor	r1, r1
    7b08:	98 0e       	add	r9, r24
    7b0a:	13 c0       	rjmp	.+38     	; 0x7b32 <vfprintf+0x108>
    7b0c:	3a e0       	ldi	r19, 0x0A	; 10
    7b0e:	83 9e       	mul	r8, r19
    7b10:	80 2c       	mov	r8, r0
    7b12:	11 24       	eor	r1, r1
    7b14:	88 0e       	add	r8, r24
    7b16:	10 62       	ori	r17, 0x20	; 32
    7b18:	0c c0       	rjmp	.+24     	; 0x7b32 <vfprintf+0x108>
    7b1a:	9e 32       	cpi	r25, 0x2E	; 46
    7b1c:	21 f4       	brne	.+8      	; 0x7b26 <vfprintf+0xfc>
    7b1e:	16 fd       	sbrc	r17, 6
    7b20:	14 c3       	rjmp	.+1576   	; 0x814a <vfprintf+0x720>
    7b22:	10 64       	ori	r17, 0x40	; 64
    7b24:	06 c0       	rjmp	.+12     	; 0x7b32 <vfprintf+0x108>
    7b26:	9c 36       	cpi	r25, 0x6C	; 108
    7b28:	11 f4       	brne	.+4      	; 0x7b2e <vfprintf+0x104>
    7b2a:	10 68       	ori	r17, 0x80	; 128
    7b2c:	02 c0       	rjmp	.+4      	; 0x7b32 <vfprintf+0x108>
    7b2e:	98 36       	cpi	r25, 0x68	; 104
    7b30:	59 f4       	brne	.+22     	; 0x7b48 <vfprintf+0x11e>
    7b32:	ee 85       	ldd	r30, Y+14	; 0x0e
    7b34:	ff 85       	ldd	r31, Y+15	; 0x0f
    7b36:	23 fd       	sbrc	r18, 3
    7b38:	95 91       	lpm	r25, Z+
    7b3a:	23 ff       	sbrs	r18, 3
    7b3c:	91 91       	ld	r25, Z+
    7b3e:	ee 87       	std	Y+14, r30	; 0x0e
    7b40:	ff 87       	std	Y+15, r31	; 0x0f
    7b42:	99 23       	and	r25, r25
    7b44:	09 f0       	breq	.+2      	; 0x7b48 <vfprintf+0x11e>
    7b46:	bc cf       	rjmp	.-136    	; 0x7ac0 <vfprintf+0x96>
    7b48:	89 2f       	mov	r24, r25
    7b4a:	85 54       	subi	r24, 0x45	; 69
    7b4c:	83 30       	cpi	r24, 0x03	; 3
    7b4e:	20 f4       	brcc	.+8      	; 0x7b58 <vfprintf+0x12e>
    7b50:	81 2f       	mov	r24, r17
    7b52:	80 61       	ori	r24, 0x10	; 16
    7b54:	90 5e       	subi	r25, 0xE0	; 224
    7b56:	07 c0       	rjmp	.+14     	; 0x7b66 <vfprintf+0x13c>
    7b58:	89 2f       	mov	r24, r25
    7b5a:	85 56       	subi	r24, 0x65	; 101
    7b5c:	83 30       	cpi	r24, 0x03	; 3
    7b5e:	08 f0       	brcs	.+2      	; 0x7b62 <vfprintf+0x138>
    7b60:	9f c1       	rjmp	.+830    	; 0x7ea0 <vfprintf+0x476>
    7b62:	81 2f       	mov	r24, r17
    7b64:	8f 7e       	andi	r24, 0xEF	; 239
    7b66:	86 fd       	sbrc	r24, 6
    7b68:	02 c0       	rjmp	.+4      	; 0x7b6e <vfprintf+0x144>
    7b6a:	76 e0       	ldi	r23, 0x06	; 6
    7b6c:	97 2e       	mov	r9, r23
    7b6e:	6f e3       	ldi	r22, 0x3F	; 63
    7b70:	f6 2e       	mov	r15, r22
    7b72:	f8 22       	and	r15, r24
    7b74:	95 36       	cpi	r25, 0x65	; 101
    7b76:	19 f4       	brne	.+6      	; 0x7b7e <vfprintf+0x154>
    7b78:	f0 e4       	ldi	r31, 0x40	; 64
    7b7a:	ff 2a       	or	r15, r31
    7b7c:	07 c0       	rjmp	.+14     	; 0x7b8c <vfprintf+0x162>
    7b7e:	96 36       	cpi	r25, 0x66	; 102
    7b80:	19 f4       	brne	.+6      	; 0x7b88 <vfprintf+0x15e>
    7b82:	20 e8       	ldi	r18, 0x80	; 128
    7b84:	f2 2a       	or	r15, r18
    7b86:	02 c0       	rjmp	.+4      	; 0x7b8c <vfprintf+0x162>
    7b88:	91 10       	cpse	r9, r1
    7b8a:	9a 94       	dec	r9
    7b8c:	f7 fe       	sbrs	r15, 7
    7b8e:	0a c0       	rjmp	.+20     	; 0x7ba4 <vfprintf+0x17a>
    7b90:	3b e3       	ldi	r19, 0x3B	; 59
    7b92:	39 15       	cp	r19, r9
    7b94:	18 f4       	brcc	.+6      	; 0x7b9c <vfprintf+0x172>
    7b96:	5c e3       	ldi	r21, 0x3C	; 60
    7b98:	b5 2e       	mov	r11, r21
    7b9a:	02 c0       	rjmp	.+4      	; 0x7ba0 <vfprintf+0x176>
    7b9c:	b9 2c       	mov	r11, r9
    7b9e:	b3 94       	inc	r11
    7ba0:	27 e0       	ldi	r18, 0x07	; 7
    7ba2:	09 c0       	rjmp	.+18     	; 0x7bb6 <vfprintf+0x18c>
    7ba4:	47 e0       	ldi	r20, 0x07	; 7
    7ba6:	49 15       	cp	r20, r9
    7ba8:	20 f4       	brcc	.+8      	; 0x7bb2 <vfprintf+0x188>
    7baa:	bb 24       	eor	r11, r11
    7bac:	47 e0       	ldi	r20, 0x07	; 7
    7bae:	94 2e       	mov	r9, r20
    7bb0:	f7 cf       	rjmp	.-18     	; 0x7ba0 <vfprintf+0x176>
    7bb2:	29 2d       	mov	r18, r9
    7bb4:	bb 24       	eor	r11, r11
    7bb6:	c6 01       	movw	r24, r12
    7bb8:	04 96       	adiw	r24, 0x04	; 4
    7bba:	8c 87       	std	Y+12, r24	; 0x0c
    7bbc:	9d 87       	std	Y+13, r25	; 0x0d
    7bbe:	f6 01       	movw	r30, r12
    7bc0:	60 81       	ld	r22, Z
    7bc2:	71 81       	ldd	r23, Z+1	; 0x01
    7bc4:	82 81       	ldd	r24, Z+2	; 0x02
    7bc6:	93 81       	ldd	r25, Z+3	; 0x03
    7bc8:	ae 01       	movw	r20, r28
    7bca:	4f 5f       	subi	r20, 0xFF	; 255
    7bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    7bce:	0b 2d       	mov	r16, r11
    7bd0:	0e 94 f6 46 	call	0x8dec	; 0x8dec <__ftoa_engine>
    7bd4:	6c 01       	movw	r12, r24
    7bd6:	09 81       	ldd	r16, Y+1	; 0x01
    7bd8:	20 2e       	mov	r2, r16
    7bda:	33 24       	eor	r3, r3
    7bdc:	00 ff       	sbrs	r16, 0
    7bde:	04 c0       	rjmp	.+8      	; 0x7be8 <vfprintf+0x1be>
    7be0:	03 fd       	sbrc	r16, 3
    7be2:	02 c0       	rjmp	.+4      	; 0x7be8 <vfprintf+0x1be>
    7be4:	1d e2       	ldi	r17, 0x2D	; 45
    7be6:	09 c0       	rjmp	.+18     	; 0x7bfa <vfprintf+0x1d0>
    7be8:	f1 fe       	sbrs	r15, 1
    7bea:	02 c0       	rjmp	.+4      	; 0x7bf0 <vfprintf+0x1c6>
    7bec:	1b e2       	ldi	r17, 0x2B	; 43
    7bee:	05 c0       	rjmp	.+10     	; 0x7bfa <vfprintf+0x1d0>
    7bf0:	f2 fc       	sbrc	r15, 2
    7bf2:	02 c0       	rjmp	.+4      	; 0x7bf8 <vfprintf+0x1ce>
    7bf4:	10 e0       	ldi	r17, 0x00	; 0
    7bf6:	01 c0       	rjmp	.+2      	; 0x7bfa <vfprintf+0x1d0>
    7bf8:	10 e2       	ldi	r17, 0x20	; 32
    7bfa:	c1 01       	movw	r24, r2
    7bfc:	8c 70       	andi	r24, 0x0C	; 12
    7bfe:	90 70       	andi	r25, 0x00	; 0
    7c00:	89 2b       	or	r24, r25
    7c02:	b9 f1       	breq	.+110    	; 0x7c72 <vfprintf+0x248>
    7c04:	11 23       	and	r17, r17
    7c06:	11 f4       	brne	.+4      	; 0x7c0c <vfprintf+0x1e2>
    7c08:	83 e0       	ldi	r24, 0x03	; 3
    7c0a:	01 c0       	rjmp	.+2      	; 0x7c0e <vfprintf+0x1e4>
    7c0c:	84 e0       	ldi	r24, 0x04	; 4
    7c0e:	88 15       	cp	r24, r8
    7c10:	10 f0       	brcs	.+4      	; 0x7c16 <vfprintf+0x1ec>
    7c12:	88 24       	eor	r8, r8
    7c14:	0a c0       	rjmp	.+20     	; 0x7c2a <vfprintf+0x200>
    7c16:	88 1a       	sub	r8, r24
    7c18:	f3 fc       	sbrc	r15, 3
    7c1a:	07 c0       	rjmp	.+14     	; 0x7c2a <vfprintf+0x200>
    7c1c:	80 e2       	ldi	r24, 0x20	; 32
    7c1e:	90 e0       	ldi	r25, 0x00	; 0
    7c20:	b3 01       	movw	r22, r6
    7c22:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7c26:	8a 94       	dec	r8
    7c28:	c9 f7       	brne	.-14     	; 0x7c1c <vfprintf+0x1f2>
    7c2a:	11 23       	and	r17, r17
    7c2c:	29 f0       	breq	.+10     	; 0x7c38 <vfprintf+0x20e>
    7c2e:	81 2f       	mov	r24, r17
    7c30:	90 e0       	ldi	r25, 0x00	; 0
    7c32:	b3 01       	movw	r22, r6
    7c34:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7c38:	23 fe       	sbrs	r2, 3
    7c3a:	03 c0       	rjmp	.+6      	; 0x7c42 <vfprintf+0x218>
    7c3c:	03 e3       	ldi	r16, 0x33	; 51
    7c3e:	12 e0       	ldi	r17, 0x02	; 2
    7c40:	0e c0       	rjmp	.+28     	; 0x7c5e <vfprintf+0x234>
    7c42:	07 e3       	ldi	r16, 0x37	; 55
    7c44:	12 e0       	ldi	r17, 0x02	; 2
    7c46:	0b c0       	rjmp	.+22     	; 0x7c5e <vfprintf+0x234>
    7c48:	e1 14       	cp	r14, r1
    7c4a:	f1 04       	cpc	r15, r1
    7c4c:	09 f0       	breq	.+2      	; 0x7c50 <vfprintf+0x226>
    7c4e:	80 52       	subi	r24, 0x20	; 32
    7c50:	90 e0       	ldi	r25, 0x00	; 0
    7c52:	b3 01       	movw	r22, r6
    7c54:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7c58:	0f 5f       	subi	r16, 0xFF	; 255
    7c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    7c5c:	05 c0       	rjmp	.+10     	; 0x7c68 <vfprintf+0x23e>
    7c5e:	ef 2c       	mov	r14, r15
    7c60:	ff 24       	eor	r15, r15
    7c62:	f0 e1       	ldi	r31, 0x10	; 16
    7c64:	ef 22       	and	r14, r31
    7c66:	ff 24       	eor	r15, r15
    7c68:	f8 01       	movw	r30, r16
    7c6a:	84 91       	lpm	r24, Z+
    7c6c:	88 23       	and	r24, r24
    7c6e:	61 f7       	brne	.-40     	; 0x7c48 <vfprintf+0x21e>
    7c70:	14 c1       	rjmp	.+552    	; 0x7e9a <vfprintf+0x470>
    7c72:	f7 fe       	sbrs	r15, 7
    7c74:	12 c0       	rjmp	.+36     	; 0x7c9a <vfprintf+0x270>
    7c76:	bc 0c       	add	r11, r12
    7c78:	24 fe       	sbrs	r2, 4
    7c7a:	04 c0       	rjmp	.+8      	; 0x7c84 <vfprintf+0x25a>
    7c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    7c7e:	81 33       	cpi	r24, 0x31	; 49
    7c80:	09 f4       	brne	.+2      	; 0x7c84 <vfprintf+0x25a>
    7c82:	ba 94       	dec	r11
    7c84:	1b 14       	cp	r1, r11
    7c86:	1c f0       	brlt	.+6      	; 0x7c8e <vfprintf+0x264>
    7c88:	bb 24       	eor	r11, r11
    7c8a:	b3 94       	inc	r11
    7c8c:	2d c0       	rjmp	.+90     	; 0x7ce8 <vfprintf+0x2be>
    7c8e:	f8 e0       	ldi	r31, 0x08	; 8
    7c90:	fb 15       	cp	r31, r11
    7c92:	50 f5       	brcc	.+84     	; 0x7ce8 <vfprintf+0x2be>
    7c94:	38 e0       	ldi	r19, 0x08	; 8
    7c96:	b3 2e       	mov	r11, r19
    7c98:	27 c0       	rjmp	.+78     	; 0x7ce8 <vfprintf+0x2be>
    7c9a:	f6 fc       	sbrc	r15, 6
    7c9c:	25 c0       	rjmp	.+74     	; 0x7ce8 <vfprintf+0x2be>
    7c9e:	89 2d       	mov	r24, r9
    7ca0:	90 e0       	ldi	r25, 0x00	; 0
    7ca2:	8c 15       	cp	r24, r12
    7ca4:	9d 05       	cpc	r25, r13
    7ca6:	4c f0       	brlt	.+18     	; 0x7cba <vfprintf+0x290>
    7ca8:	2c ef       	ldi	r18, 0xFC	; 252
    7caa:	c2 16       	cp	r12, r18
    7cac:	2f ef       	ldi	r18, 0xFF	; 255
    7cae:	d2 06       	cpc	r13, r18
    7cb0:	24 f0       	brlt	.+8      	; 0x7cba <vfprintf+0x290>
    7cb2:	30 e8       	ldi	r19, 0x80	; 128
    7cb4:	f3 2a       	or	r15, r19
    7cb6:	01 c0       	rjmp	.+2      	; 0x7cba <vfprintf+0x290>
    7cb8:	9a 94       	dec	r9
    7cba:	99 20       	and	r9, r9
    7cbc:	49 f0       	breq	.+18     	; 0x7cd0 <vfprintf+0x2a6>
    7cbe:	e2 e0       	ldi	r30, 0x02	; 2
    7cc0:	f0 e0       	ldi	r31, 0x00	; 0
    7cc2:	ec 0f       	add	r30, r28
    7cc4:	fd 1f       	adc	r31, r29
    7cc6:	e9 0d       	add	r30, r9
    7cc8:	f1 1d       	adc	r31, r1
    7cca:	80 81       	ld	r24, Z
    7ccc:	80 33       	cpi	r24, 0x30	; 48
    7cce:	a1 f3       	breq	.-24     	; 0x7cb8 <vfprintf+0x28e>
    7cd0:	f7 fe       	sbrs	r15, 7
    7cd2:	0a c0       	rjmp	.+20     	; 0x7ce8 <vfprintf+0x2be>
    7cd4:	b9 2c       	mov	r11, r9
    7cd6:	b3 94       	inc	r11
    7cd8:	89 2d       	mov	r24, r9
    7cda:	90 e0       	ldi	r25, 0x00	; 0
    7cdc:	c8 16       	cp	r12, r24
    7cde:	d9 06       	cpc	r13, r25
    7ce0:	14 f0       	brlt	.+4      	; 0x7ce6 <vfprintf+0x2bc>
    7ce2:	99 24       	eor	r9, r9
    7ce4:	01 c0       	rjmp	.+2      	; 0x7ce8 <vfprintf+0x2be>
    7ce6:	9c 18       	sub	r9, r12
    7ce8:	f7 fc       	sbrc	r15, 7
    7cea:	03 c0       	rjmp	.+6      	; 0x7cf2 <vfprintf+0x2c8>
    7cec:	25 e0       	ldi	r18, 0x05	; 5
    7cee:	30 e0       	ldi	r19, 0x00	; 0
    7cf0:	09 c0       	rjmp	.+18     	; 0x7d04 <vfprintf+0x2da>
    7cf2:	1c 14       	cp	r1, r12
    7cf4:	1d 04       	cpc	r1, r13
    7cf6:	1c f0       	brlt	.+6      	; 0x7cfe <vfprintf+0x2d4>
    7cf8:	21 e0       	ldi	r18, 0x01	; 1
    7cfa:	30 e0       	ldi	r19, 0x00	; 0
    7cfc:	03 c0       	rjmp	.+6      	; 0x7d04 <vfprintf+0x2da>
    7cfe:	96 01       	movw	r18, r12
    7d00:	2f 5f       	subi	r18, 0xFF	; 255
    7d02:	3f 4f       	sbci	r19, 0xFF	; 255
    7d04:	11 23       	and	r17, r17
    7d06:	11 f0       	breq	.+4      	; 0x7d0c <vfprintf+0x2e2>
    7d08:	2f 5f       	subi	r18, 0xFF	; 255
    7d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    7d0c:	99 20       	and	r9, r9
    7d0e:	29 f0       	breq	.+10     	; 0x7d1a <vfprintf+0x2f0>
    7d10:	89 2d       	mov	r24, r9
    7d12:	90 e0       	ldi	r25, 0x00	; 0
    7d14:	01 96       	adiw	r24, 0x01	; 1
    7d16:	28 0f       	add	r18, r24
    7d18:	39 1f       	adc	r19, r25
    7d1a:	88 2d       	mov	r24, r8
    7d1c:	90 e0       	ldi	r25, 0x00	; 0
    7d1e:	28 17       	cp	r18, r24
    7d20:	39 07       	cpc	r19, r25
    7d22:	14 f0       	brlt	.+4      	; 0x7d28 <vfprintf+0x2fe>
    7d24:	88 24       	eor	r8, r8
    7d26:	01 c0       	rjmp	.+2      	; 0x7d2a <vfprintf+0x300>
    7d28:	82 1a       	sub	r8, r18
    7d2a:	4f 2c       	mov	r4, r15
    7d2c:	55 24       	eor	r5, r5
    7d2e:	c2 01       	movw	r24, r4
    7d30:	89 70       	andi	r24, 0x09	; 9
    7d32:	90 70       	andi	r25, 0x00	; 0
    7d34:	89 2b       	or	r24, r25
    7d36:	39 f0       	breq	.+14     	; 0x7d46 <vfprintf+0x31c>
    7d38:	08 c0       	rjmp	.+16     	; 0x7d4a <vfprintf+0x320>
    7d3a:	80 e2       	ldi	r24, 0x20	; 32
    7d3c:	90 e0       	ldi	r25, 0x00	; 0
    7d3e:	b3 01       	movw	r22, r6
    7d40:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7d44:	8a 94       	dec	r8
    7d46:	88 20       	and	r8, r8
    7d48:	c1 f7       	brne	.-16     	; 0x7d3a <vfprintf+0x310>
    7d4a:	11 23       	and	r17, r17
    7d4c:	29 f0       	breq	.+10     	; 0x7d58 <vfprintf+0x32e>
    7d4e:	81 2f       	mov	r24, r17
    7d50:	90 e0       	ldi	r25, 0x00	; 0
    7d52:	b3 01       	movw	r22, r6
    7d54:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7d58:	43 fe       	sbrs	r4, 3
    7d5a:	07 c0       	rjmp	.+14     	; 0x7d6a <vfprintf+0x340>
    7d5c:	08 c0       	rjmp	.+16     	; 0x7d6e <vfprintf+0x344>
    7d5e:	80 e3       	ldi	r24, 0x30	; 48
    7d60:	90 e0       	ldi	r25, 0x00	; 0
    7d62:	b3 01       	movw	r22, r6
    7d64:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7d68:	8a 94       	dec	r8
    7d6a:	88 20       	and	r8, r8
    7d6c:	c1 f7       	brne	.-16     	; 0x7d5e <vfprintf+0x334>
    7d6e:	f7 fe       	sbrs	r15, 7
    7d70:	46 c0       	rjmp	.+140    	; 0x7dfe <vfprintf+0x3d4>
    7d72:	86 01       	movw	r16, r12
    7d74:	d7 fe       	sbrs	r13, 7
    7d76:	02 c0       	rjmp	.+4      	; 0x7d7c <vfprintf+0x352>
    7d78:	00 e0       	ldi	r16, 0x00	; 0
    7d7a:	10 e0       	ldi	r17, 0x00	; 0
    7d7c:	76 01       	movw	r14, r12
    7d7e:	08 94       	sec
    7d80:	e1 1c       	adc	r14, r1
    7d82:	f1 1c       	adc	r15, r1
    7d84:	e0 1a       	sub	r14, r16
    7d86:	f1 0a       	sbc	r15, r17
    7d88:	41 e0       	ldi	r20, 0x01	; 1
    7d8a:	50 e0       	ldi	r21, 0x00	; 0
    7d8c:	4c 0f       	add	r20, r28
    7d8e:	5d 1f       	adc	r21, r29
    7d90:	e4 0e       	add	r14, r20
    7d92:	f5 1e       	adc	r15, r21
    7d94:	26 01       	movw	r4, r12
    7d96:	4b 18       	sub	r4, r11
    7d98:	51 08       	sbc	r5, r1
    7d9a:	89 2d       	mov	r24, r9
    7d9c:	90 e0       	ldi	r25, 0x00	; 0
    7d9e:	aa 24       	eor	r10, r10
    7da0:	bb 24       	eor	r11, r11
    7da2:	a8 1a       	sub	r10, r24
    7da4:	b9 0a       	sbc	r11, r25
    7da6:	5f ef       	ldi	r21, 0xFF	; 255
    7da8:	0f 3f       	cpi	r16, 0xFF	; 255
    7daa:	15 07       	cpc	r17, r21
    7dac:	29 f4       	brne	.+10     	; 0x7db8 <vfprintf+0x38e>
    7dae:	8e e2       	ldi	r24, 0x2E	; 46
    7db0:	90 e0       	ldi	r25, 0x00	; 0
    7db2:	b3 01       	movw	r22, r6
    7db4:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7db8:	c0 16       	cp	r12, r16
    7dba:	d1 06       	cpc	r13, r17
    7dbc:	34 f0       	brlt	.+12     	; 0x7dca <vfprintf+0x3a0>
    7dbe:	40 16       	cp	r4, r16
    7dc0:	51 06       	cpc	r5, r17
    7dc2:	1c f4       	brge	.+6      	; 0x7dca <vfprintf+0x3a0>
    7dc4:	f7 01       	movw	r30, r14
    7dc6:	80 81       	ld	r24, Z
    7dc8:	01 c0       	rjmp	.+2      	; 0x7dcc <vfprintf+0x3a2>
    7dca:	80 e3       	ldi	r24, 0x30	; 48
    7dcc:	01 50       	subi	r16, 0x01	; 1
    7dce:	10 40       	sbci	r17, 0x00	; 0
    7dd0:	08 94       	sec
    7dd2:	e1 1c       	adc	r14, r1
    7dd4:	f1 1c       	adc	r15, r1
    7dd6:	0a 15       	cp	r16, r10
    7dd8:	1b 05       	cpc	r17, r11
    7dda:	2c f0       	brlt	.+10     	; 0x7de6 <vfprintf+0x3bc>
    7ddc:	90 e0       	ldi	r25, 0x00	; 0
    7dde:	b3 01       	movw	r22, r6
    7de0:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7de4:	e0 cf       	rjmp	.-64     	; 0x7da6 <vfprintf+0x37c>
    7de6:	0c 15       	cp	r16, r12
    7de8:	1d 05       	cpc	r17, r13
    7dea:	39 f4       	brne	.+14     	; 0x7dfa <vfprintf+0x3d0>
    7dec:	9a 81       	ldd	r25, Y+2	; 0x02
    7dee:	96 33       	cpi	r25, 0x36	; 54
    7df0:	18 f4       	brcc	.+6      	; 0x7df8 <vfprintf+0x3ce>
    7df2:	95 33       	cpi	r25, 0x35	; 53
    7df4:	11 f4       	brne	.+4      	; 0x7dfa <vfprintf+0x3d0>
    7df6:	24 fe       	sbrs	r2, 4
    7df8:	81 e3       	ldi	r24, 0x31	; 49
    7dfa:	90 e0       	ldi	r25, 0x00	; 0
    7dfc:	4b c0       	rjmp	.+150    	; 0x7e94 <vfprintf+0x46a>
    7dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    7e00:	81 33       	cpi	r24, 0x31	; 49
    7e02:	09 f0       	breq	.+2      	; 0x7e06 <vfprintf+0x3dc>
    7e04:	0f 7e       	andi	r16, 0xEF	; 239
    7e06:	90 e0       	ldi	r25, 0x00	; 0
    7e08:	b3 01       	movw	r22, r6
    7e0a:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7e0e:	99 20       	and	r9, r9
    7e10:	a1 f0       	breq	.+40     	; 0x7e3a <vfprintf+0x410>
    7e12:	8e e2       	ldi	r24, 0x2E	; 46
    7e14:	90 e0       	ldi	r25, 0x00	; 0
    7e16:	b3 01       	movw	r22, r6
    7e18:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7e1c:	12 e0       	ldi	r17, 0x02	; 2
    7e1e:	e1 e0       	ldi	r30, 0x01	; 1
    7e20:	f0 e0       	ldi	r31, 0x00	; 0
    7e22:	ec 0f       	add	r30, r28
    7e24:	fd 1f       	adc	r31, r29
    7e26:	e1 0f       	add	r30, r17
    7e28:	f1 1d       	adc	r31, r1
    7e2a:	1f 5f       	subi	r17, 0xFF	; 255
    7e2c:	80 81       	ld	r24, Z
    7e2e:	90 e0       	ldi	r25, 0x00	; 0
    7e30:	b3 01       	movw	r22, r6
    7e32:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7e36:	9a 94       	dec	r9
    7e38:	91 f7       	brne	.-28     	; 0x7e1e <vfprintf+0x3f4>
    7e3a:	44 fc       	sbrc	r4, 4
    7e3c:	03 c0       	rjmp	.+6      	; 0x7e44 <vfprintf+0x41a>
    7e3e:	85 e6       	ldi	r24, 0x65	; 101
    7e40:	90 e0       	ldi	r25, 0x00	; 0
    7e42:	02 c0       	rjmp	.+4      	; 0x7e48 <vfprintf+0x41e>
    7e44:	85 e4       	ldi	r24, 0x45	; 69
    7e46:	90 e0       	ldi	r25, 0x00	; 0
    7e48:	b3 01       	movw	r22, r6
    7e4a:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7e4e:	d7 fc       	sbrc	r13, 7
    7e50:	05 c0       	rjmp	.+10     	; 0x7e5c <vfprintf+0x432>
    7e52:	c1 14       	cp	r12, r1
    7e54:	d1 04       	cpc	r13, r1
    7e56:	41 f4       	brne	.+16     	; 0x7e68 <vfprintf+0x43e>
    7e58:	04 ff       	sbrs	r16, 4
    7e5a:	06 c0       	rjmp	.+12     	; 0x7e68 <vfprintf+0x43e>
    7e5c:	d0 94       	com	r13
    7e5e:	c1 94       	neg	r12
    7e60:	d1 08       	sbc	r13, r1
    7e62:	d3 94       	inc	r13
    7e64:	8d e2       	ldi	r24, 0x2D	; 45
    7e66:	01 c0       	rjmp	.+2      	; 0x7e6a <vfprintf+0x440>
    7e68:	8b e2       	ldi	r24, 0x2B	; 43
    7e6a:	90 e0       	ldi	r25, 0x00	; 0
    7e6c:	b3 01       	movw	r22, r6
    7e6e:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7e72:	80 e3       	ldi	r24, 0x30	; 48
    7e74:	05 c0       	rjmp	.+10     	; 0x7e80 <vfprintf+0x456>
    7e76:	8f 5f       	subi	r24, 0xFF	; 255
    7e78:	26 ef       	ldi	r18, 0xF6	; 246
    7e7a:	3f ef       	ldi	r19, 0xFF	; 255
    7e7c:	c2 0e       	add	r12, r18
    7e7e:	d3 1e       	adc	r13, r19
    7e80:	3a e0       	ldi	r19, 0x0A	; 10
    7e82:	c3 16       	cp	r12, r19
    7e84:	d1 04       	cpc	r13, r1
    7e86:	bc f7       	brge	.-18     	; 0x7e76 <vfprintf+0x44c>
    7e88:	90 e0       	ldi	r25, 0x00	; 0
    7e8a:	b3 01       	movw	r22, r6
    7e8c:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7e90:	c6 01       	movw	r24, r12
    7e92:	c0 96       	adiw	r24, 0x30	; 48
    7e94:	b3 01       	movw	r22, r6
    7e96:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7e9a:	cc 84       	ldd	r12, Y+12	; 0x0c
    7e9c:	dd 84       	ldd	r13, Y+13	; 0x0d
    7e9e:	52 c1       	rjmp	.+676    	; 0x8144 <vfprintf+0x71a>
    7ea0:	93 36       	cpi	r25, 0x63	; 99
    7ea2:	31 f0       	breq	.+12     	; 0x7eb0 <vfprintf+0x486>
    7ea4:	93 37       	cpi	r25, 0x73	; 115
    7ea6:	99 f0       	breq	.+38     	; 0x7ece <vfprintf+0x4a4>
    7ea8:	93 35       	cpi	r25, 0x53	; 83
    7eaa:	09 f0       	breq	.+2      	; 0x7eae <vfprintf+0x484>
    7eac:	59 c0       	rjmp	.+178    	; 0x7f60 <vfprintf+0x536>
    7eae:	23 c0       	rjmp	.+70     	; 0x7ef6 <vfprintf+0x4cc>
    7eb0:	f6 01       	movw	r30, r12
    7eb2:	80 81       	ld	r24, Z
    7eb4:	89 83       	std	Y+1, r24	; 0x01
    7eb6:	5e 01       	movw	r10, r28
    7eb8:	08 94       	sec
    7eba:	a1 1c       	adc	r10, r1
    7ebc:	b1 1c       	adc	r11, r1
    7ebe:	22 e0       	ldi	r18, 0x02	; 2
    7ec0:	30 e0       	ldi	r19, 0x00	; 0
    7ec2:	c2 0e       	add	r12, r18
    7ec4:	d3 1e       	adc	r13, r19
    7ec6:	21 e0       	ldi	r18, 0x01	; 1
    7ec8:	e2 2e       	mov	r14, r18
    7eca:	f1 2c       	mov	r15, r1
    7ecc:	12 c0       	rjmp	.+36     	; 0x7ef2 <vfprintf+0x4c8>
    7ece:	f6 01       	movw	r30, r12
    7ed0:	a0 80       	ld	r10, Z
    7ed2:	b1 80       	ldd	r11, Z+1	; 0x01
    7ed4:	16 fd       	sbrc	r17, 6
    7ed6:	03 c0       	rjmp	.+6      	; 0x7ede <vfprintf+0x4b4>
    7ed8:	6f ef       	ldi	r22, 0xFF	; 255
    7eda:	7f ef       	ldi	r23, 0xFF	; 255
    7edc:	02 c0       	rjmp	.+4      	; 0x7ee2 <vfprintf+0x4b8>
    7ede:	69 2d       	mov	r22, r9
    7ee0:	70 e0       	ldi	r23, 0x00	; 0
    7ee2:	22 e0       	ldi	r18, 0x02	; 2
    7ee4:	30 e0       	ldi	r19, 0x00	; 0
    7ee6:	c2 0e       	add	r12, r18
    7ee8:	d3 1e       	adc	r13, r19
    7eea:	c5 01       	movw	r24, r10
    7eec:	0e 94 01 48 	call	0x9002	; 0x9002 <strnlen>
    7ef0:	7c 01       	movw	r14, r24
    7ef2:	1f 77       	andi	r17, 0x7F	; 127
    7ef4:	13 c0       	rjmp	.+38     	; 0x7f1c <vfprintf+0x4f2>
    7ef6:	f6 01       	movw	r30, r12
    7ef8:	a0 80       	ld	r10, Z
    7efa:	b1 80       	ldd	r11, Z+1	; 0x01
    7efc:	16 fd       	sbrc	r17, 6
    7efe:	03 c0       	rjmp	.+6      	; 0x7f06 <vfprintf+0x4dc>
    7f00:	6f ef       	ldi	r22, 0xFF	; 255
    7f02:	7f ef       	ldi	r23, 0xFF	; 255
    7f04:	02 c0       	rjmp	.+4      	; 0x7f0a <vfprintf+0x4e0>
    7f06:	69 2d       	mov	r22, r9
    7f08:	70 e0       	ldi	r23, 0x00	; 0
    7f0a:	22 e0       	ldi	r18, 0x02	; 2
    7f0c:	30 e0       	ldi	r19, 0x00	; 0
    7f0e:	c2 0e       	add	r12, r18
    7f10:	d3 1e       	adc	r13, r19
    7f12:	c5 01       	movw	r24, r10
    7f14:	0e 94 f6 47 	call	0x8fec	; 0x8fec <strnlen_P>
    7f18:	7c 01       	movw	r14, r24
    7f1a:	10 68       	ori	r17, 0x80	; 128
    7f1c:	13 ff       	sbrs	r17, 3
    7f1e:	07 c0       	rjmp	.+14     	; 0x7f2e <vfprintf+0x504>
    7f20:	1b c0       	rjmp	.+54     	; 0x7f58 <vfprintf+0x52e>
    7f22:	80 e2       	ldi	r24, 0x20	; 32
    7f24:	90 e0       	ldi	r25, 0x00	; 0
    7f26:	b3 01       	movw	r22, r6
    7f28:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7f2c:	8a 94       	dec	r8
    7f2e:	88 2d       	mov	r24, r8
    7f30:	90 e0       	ldi	r25, 0x00	; 0
    7f32:	e8 16       	cp	r14, r24
    7f34:	f9 06       	cpc	r15, r25
    7f36:	a8 f3       	brcs	.-22     	; 0x7f22 <vfprintf+0x4f8>
    7f38:	0f c0       	rjmp	.+30     	; 0x7f58 <vfprintf+0x52e>
    7f3a:	f5 01       	movw	r30, r10
    7f3c:	17 fd       	sbrc	r17, 7
    7f3e:	85 91       	lpm	r24, Z+
    7f40:	17 ff       	sbrs	r17, 7
    7f42:	81 91       	ld	r24, Z+
    7f44:	5f 01       	movw	r10, r30
    7f46:	90 e0       	ldi	r25, 0x00	; 0
    7f48:	b3 01       	movw	r22, r6
    7f4a:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    7f4e:	81 10       	cpse	r8, r1
    7f50:	8a 94       	dec	r8
    7f52:	08 94       	sec
    7f54:	e1 08       	sbc	r14, r1
    7f56:	f1 08       	sbc	r15, r1
    7f58:	e1 14       	cp	r14, r1
    7f5a:	f1 04       	cpc	r15, r1
    7f5c:	71 f7       	brne	.-36     	; 0x7f3a <vfprintf+0x510>
    7f5e:	f2 c0       	rjmp	.+484    	; 0x8144 <vfprintf+0x71a>
    7f60:	94 36       	cpi	r25, 0x64	; 100
    7f62:	11 f0       	breq	.+4      	; 0x7f68 <vfprintf+0x53e>
    7f64:	99 36       	cpi	r25, 0x69	; 105
    7f66:	89 f5       	brne	.+98     	; 0x7fca <vfprintf+0x5a0>
    7f68:	17 ff       	sbrs	r17, 7
    7f6a:	08 c0       	rjmp	.+16     	; 0x7f7c <vfprintf+0x552>
    7f6c:	f6 01       	movw	r30, r12
    7f6e:	20 81       	ld	r18, Z
    7f70:	31 81       	ldd	r19, Z+1	; 0x01
    7f72:	42 81       	ldd	r20, Z+2	; 0x02
    7f74:	53 81       	ldd	r21, Z+3	; 0x03
    7f76:	84 e0       	ldi	r24, 0x04	; 4
    7f78:	90 e0       	ldi	r25, 0x00	; 0
    7f7a:	0a c0       	rjmp	.+20     	; 0x7f90 <vfprintf+0x566>
    7f7c:	f6 01       	movw	r30, r12
    7f7e:	80 81       	ld	r24, Z
    7f80:	91 81       	ldd	r25, Z+1	; 0x01
    7f82:	9c 01       	movw	r18, r24
    7f84:	44 27       	eor	r20, r20
    7f86:	37 fd       	sbrc	r19, 7
    7f88:	40 95       	com	r20
    7f8a:	54 2f       	mov	r21, r20
    7f8c:	82 e0       	ldi	r24, 0x02	; 2
    7f8e:	90 e0       	ldi	r25, 0x00	; 0
    7f90:	c8 0e       	add	r12, r24
    7f92:	d9 1e       	adc	r13, r25
    7f94:	9f e6       	ldi	r25, 0x6F	; 111
    7f96:	f9 2e       	mov	r15, r25
    7f98:	f1 22       	and	r15, r17
    7f9a:	57 ff       	sbrs	r21, 7
    7f9c:	09 c0       	rjmp	.+18     	; 0x7fb0 <vfprintf+0x586>
    7f9e:	50 95       	com	r21
    7fa0:	40 95       	com	r20
    7fa2:	30 95       	com	r19
    7fa4:	21 95       	neg	r18
    7fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    7fa8:	4f 4f       	sbci	r20, 0xFF	; 255
    7faa:	5f 4f       	sbci	r21, 0xFF	; 255
    7fac:	90 e8       	ldi	r25, 0x80	; 128
    7fae:	f9 2a       	or	r15, r25
    7fb0:	ca 01       	movw	r24, r20
    7fb2:	b9 01       	movw	r22, r18
    7fb4:	ae 01       	movw	r20, r28
    7fb6:	4f 5f       	subi	r20, 0xFF	; 255
    7fb8:	5f 4f       	sbci	r21, 0xFF	; 255
    7fba:	2a e0       	ldi	r18, 0x0A	; 10
    7fbc:	30 e0       	ldi	r19, 0x00	; 0
    7fbe:	0e 94 9b 48 	call	0x9136	; 0x9136 <__ultoa_invert>
    7fc2:	e8 2e       	mov	r14, r24
    7fc4:	e8 89       	ldd	r30, Y+16	; 0x10
    7fc6:	ee 1a       	sub	r14, r30
    7fc8:	41 c0       	rjmp	.+130    	; 0x804c <vfprintf+0x622>
    7fca:	95 37       	cpi	r25, 0x75	; 117
    7fcc:	21 f4       	brne	.+8      	; 0x7fd6 <vfprintf+0x5ac>
    7fce:	1f 7e       	andi	r17, 0xEF	; 239
    7fd0:	2a e0       	ldi	r18, 0x0A	; 10
    7fd2:	30 e0       	ldi	r19, 0x00	; 0
    7fd4:	1c c0       	rjmp	.+56     	; 0x800e <vfprintf+0x5e4>
    7fd6:	19 7f       	andi	r17, 0xF9	; 249
    7fd8:	9f 36       	cpi	r25, 0x6F	; 111
    7fda:	61 f0       	breq	.+24     	; 0x7ff4 <vfprintf+0x5ca>
    7fdc:	90 37       	cpi	r25, 0x70	; 112
    7fde:	20 f4       	brcc	.+8      	; 0x7fe8 <vfprintf+0x5be>
    7fe0:	98 35       	cpi	r25, 0x58	; 88
    7fe2:	09 f0       	breq	.+2      	; 0x7fe6 <vfprintf+0x5bc>
    7fe4:	b2 c0       	rjmp	.+356    	; 0x814a <vfprintf+0x720>
    7fe6:	0f c0       	rjmp	.+30     	; 0x8006 <vfprintf+0x5dc>
    7fe8:	90 37       	cpi	r25, 0x70	; 112
    7fea:	39 f0       	breq	.+14     	; 0x7ffa <vfprintf+0x5d0>
    7fec:	98 37       	cpi	r25, 0x78	; 120
    7fee:	09 f0       	breq	.+2      	; 0x7ff2 <vfprintf+0x5c8>
    7ff0:	ac c0       	rjmp	.+344    	; 0x814a <vfprintf+0x720>
    7ff2:	04 c0       	rjmp	.+8      	; 0x7ffc <vfprintf+0x5d2>
    7ff4:	28 e0       	ldi	r18, 0x08	; 8
    7ff6:	30 e0       	ldi	r19, 0x00	; 0
    7ff8:	0a c0       	rjmp	.+20     	; 0x800e <vfprintf+0x5e4>
    7ffa:	10 61       	ori	r17, 0x10	; 16
    7ffc:	14 fd       	sbrc	r17, 4
    7ffe:	14 60       	ori	r17, 0x04	; 4
    8000:	20 e1       	ldi	r18, 0x10	; 16
    8002:	30 e0       	ldi	r19, 0x00	; 0
    8004:	04 c0       	rjmp	.+8      	; 0x800e <vfprintf+0x5e4>
    8006:	14 fd       	sbrc	r17, 4
    8008:	16 60       	ori	r17, 0x06	; 6
    800a:	20 e1       	ldi	r18, 0x10	; 16
    800c:	32 e0       	ldi	r19, 0x02	; 2
    800e:	17 ff       	sbrs	r17, 7
    8010:	08 c0       	rjmp	.+16     	; 0x8022 <vfprintf+0x5f8>
    8012:	f6 01       	movw	r30, r12
    8014:	60 81       	ld	r22, Z
    8016:	71 81       	ldd	r23, Z+1	; 0x01
    8018:	82 81       	ldd	r24, Z+2	; 0x02
    801a:	93 81       	ldd	r25, Z+3	; 0x03
    801c:	44 e0       	ldi	r20, 0x04	; 4
    801e:	50 e0       	ldi	r21, 0x00	; 0
    8020:	08 c0       	rjmp	.+16     	; 0x8032 <vfprintf+0x608>
    8022:	f6 01       	movw	r30, r12
    8024:	80 81       	ld	r24, Z
    8026:	91 81       	ldd	r25, Z+1	; 0x01
    8028:	bc 01       	movw	r22, r24
    802a:	80 e0       	ldi	r24, 0x00	; 0
    802c:	90 e0       	ldi	r25, 0x00	; 0
    802e:	42 e0       	ldi	r20, 0x02	; 2
    8030:	50 e0       	ldi	r21, 0x00	; 0
    8032:	c4 0e       	add	r12, r20
    8034:	d5 1e       	adc	r13, r21
    8036:	ae 01       	movw	r20, r28
    8038:	4f 5f       	subi	r20, 0xFF	; 255
    803a:	5f 4f       	sbci	r21, 0xFF	; 255
    803c:	0e 94 9b 48 	call	0x9136	; 0x9136 <__ultoa_invert>
    8040:	e8 2e       	mov	r14, r24
    8042:	58 89       	ldd	r21, Y+16	; 0x10
    8044:	e5 1a       	sub	r14, r21
    8046:	8f e7       	ldi	r24, 0x7F	; 127
    8048:	f8 2e       	mov	r15, r24
    804a:	f1 22       	and	r15, r17
    804c:	f6 fe       	sbrs	r15, 6
    804e:	0b c0       	rjmp	.+22     	; 0x8066 <vfprintf+0x63c>
    8050:	8e ef       	ldi	r24, 0xFE	; 254
    8052:	f8 22       	and	r15, r24
    8054:	e9 14       	cp	r14, r9
    8056:	38 f4       	brcc	.+14     	; 0x8066 <vfprintf+0x63c>
    8058:	f4 fe       	sbrs	r15, 4
    805a:	07 c0       	rjmp	.+14     	; 0x806a <vfprintf+0x640>
    805c:	f2 fc       	sbrc	r15, 2
    805e:	05 c0       	rjmp	.+10     	; 0x806a <vfprintf+0x640>
    8060:	9f ee       	ldi	r25, 0xEF	; 239
    8062:	f9 22       	and	r15, r25
    8064:	02 c0       	rjmp	.+4      	; 0x806a <vfprintf+0x640>
    8066:	1e 2d       	mov	r17, r14
    8068:	01 c0       	rjmp	.+2      	; 0x806c <vfprintf+0x642>
    806a:	19 2d       	mov	r17, r9
    806c:	f4 fe       	sbrs	r15, 4
    806e:	0d c0       	rjmp	.+26     	; 0x808a <vfprintf+0x660>
    8070:	fe 01       	movw	r30, r28
    8072:	ee 0d       	add	r30, r14
    8074:	f1 1d       	adc	r31, r1
    8076:	80 81       	ld	r24, Z
    8078:	80 33       	cpi	r24, 0x30	; 48
    807a:	19 f4       	brne	.+6      	; 0x8082 <vfprintf+0x658>
    807c:	e9 ee       	ldi	r30, 0xE9	; 233
    807e:	fe 22       	and	r15, r30
    8080:	08 c0       	rjmp	.+16     	; 0x8092 <vfprintf+0x668>
    8082:	1f 5f       	subi	r17, 0xFF	; 255
    8084:	f2 fe       	sbrs	r15, 2
    8086:	05 c0       	rjmp	.+10     	; 0x8092 <vfprintf+0x668>
    8088:	03 c0       	rjmp	.+6      	; 0x8090 <vfprintf+0x666>
    808a:	8f 2d       	mov	r24, r15
    808c:	86 78       	andi	r24, 0x86	; 134
    808e:	09 f0       	breq	.+2      	; 0x8092 <vfprintf+0x668>
    8090:	1f 5f       	subi	r17, 0xFF	; 255
    8092:	0f 2d       	mov	r16, r15
    8094:	f3 fc       	sbrc	r15, 3
    8096:	14 c0       	rjmp	.+40     	; 0x80c0 <vfprintf+0x696>
    8098:	f0 fe       	sbrs	r15, 0
    809a:	0f c0       	rjmp	.+30     	; 0x80ba <vfprintf+0x690>
    809c:	18 15       	cp	r17, r8
    809e:	10 f0       	brcs	.+4      	; 0x80a4 <vfprintf+0x67a>
    80a0:	9e 2c       	mov	r9, r14
    80a2:	0b c0       	rjmp	.+22     	; 0x80ba <vfprintf+0x690>
    80a4:	9e 2c       	mov	r9, r14
    80a6:	98 0c       	add	r9, r8
    80a8:	91 1a       	sub	r9, r17
    80aa:	18 2d       	mov	r17, r8
    80ac:	06 c0       	rjmp	.+12     	; 0x80ba <vfprintf+0x690>
    80ae:	80 e2       	ldi	r24, 0x20	; 32
    80b0:	90 e0       	ldi	r25, 0x00	; 0
    80b2:	b3 01       	movw	r22, r6
    80b4:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    80b8:	1f 5f       	subi	r17, 0xFF	; 255
    80ba:	18 15       	cp	r17, r8
    80bc:	c0 f3       	brcs	.-16     	; 0x80ae <vfprintf+0x684>
    80be:	04 c0       	rjmp	.+8      	; 0x80c8 <vfprintf+0x69e>
    80c0:	18 15       	cp	r17, r8
    80c2:	10 f4       	brcc	.+4      	; 0x80c8 <vfprintf+0x69e>
    80c4:	81 1a       	sub	r8, r17
    80c6:	01 c0       	rjmp	.+2      	; 0x80ca <vfprintf+0x6a0>
    80c8:	88 24       	eor	r8, r8
    80ca:	04 ff       	sbrs	r16, 4
    80cc:	0f c0       	rjmp	.+30     	; 0x80ec <vfprintf+0x6c2>
    80ce:	80 e3       	ldi	r24, 0x30	; 48
    80d0:	90 e0       	ldi	r25, 0x00	; 0
    80d2:	b3 01       	movw	r22, r6
    80d4:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    80d8:	02 ff       	sbrs	r16, 2
    80da:	1d c0       	rjmp	.+58     	; 0x8116 <vfprintf+0x6ec>
    80dc:	01 fd       	sbrc	r16, 1
    80de:	03 c0       	rjmp	.+6      	; 0x80e6 <vfprintf+0x6bc>
    80e0:	88 e7       	ldi	r24, 0x78	; 120
    80e2:	90 e0       	ldi	r25, 0x00	; 0
    80e4:	0e c0       	rjmp	.+28     	; 0x8102 <vfprintf+0x6d8>
    80e6:	88 e5       	ldi	r24, 0x58	; 88
    80e8:	90 e0       	ldi	r25, 0x00	; 0
    80ea:	0b c0       	rjmp	.+22     	; 0x8102 <vfprintf+0x6d8>
    80ec:	80 2f       	mov	r24, r16
    80ee:	86 78       	andi	r24, 0x86	; 134
    80f0:	91 f0       	breq	.+36     	; 0x8116 <vfprintf+0x6ec>
    80f2:	01 ff       	sbrs	r16, 1
    80f4:	02 c0       	rjmp	.+4      	; 0x80fa <vfprintf+0x6d0>
    80f6:	8b e2       	ldi	r24, 0x2B	; 43
    80f8:	01 c0       	rjmp	.+2      	; 0x80fc <vfprintf+0x6d2>
    80fa:	80 e2       	ldi	r24, 0x20	; 32
    80fc:	f7 fc       	sbrc	r15, 7
    80fe:	8d e2       	ldi	r24, 0x2D	; 45
    8100:	90 e0       	ldi	r25, 0x00	; 0
    8102:	b3 01       	movw	r22, r6
    8104:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    8108:	06 c0       	rjmp	.+12     	; 0x8116 <vfprintf+0x6ec>
    810a:	80 e3       	ldi	r24, 0x30	; 48
    810c:	90 e0       	ldi	r25, 0x00	; 0
    810e:	b3 01       	movw	r22, r6
    8110:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    8114:	9a 94       	dec	r9
    8116:	e9 14       	cp	r14, r9
    8118:	c0 f3       	brcs	.-16     	; 0x810a <vfprintf+0x6e0>
    811a:	ea 94       	dec	r14
    811c:	e1 e0       	ldi	r30, 0x01	; 1
    811e:	f0 e0       	ldi	r31, 0x00	; 0
    8120:	ec 0f       	add	r30, r28
    8122:	fd 1f       	adc	r31, r29
    8124:	ee 0d       	add	r30, r14
    8126:	f1 1d       	adc	r31, r1
    8128:	80 81       	ld	r24, Z
    812a:	90 e0       	ldi	r25, 0x00	; 0
    812c:	b3 01       	movw	r22, r6
    812e:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    8132:	ee 20       	and	r14, r14
    8134:	91 f7       	brne	.-28     	; 0x811a <vfprintf+0x6f0>
    8136:	06 c0       	rjmp	.+12     	; 0x8144 <vfprintf+0x71a>
    8138:	80 e2       	ldi	r24, 0x20	; 32
    813a:	90 e0       	ldi	r25, 0x00	; 0
    813c:	b3 01       	movw	r22, r6
    813e:	0e 94 4c 48 	call	0x9098	; 0x9098 <fputc>
    8142:	8a 94       	dec	r8
    8144:	88 20       	and	r8, r8
    8146:	c1 f7       	brne	.-16     	; 0x8138 <vfprintf+0x70e>
    8148:	99 cc       	rjmp	.-1742   	; 0x7a7c <vfprintf+0x52>
    814a:	f3 01       	movw	r30, r6
    814c:	66 81       	ldd	r22, Z+6	; 0x06
    814e:	77 81       	ldd	r23, Z+7	; 0x07
    8150:	cb 01       	movw	r24, r22
    8152:	61 96       	adiw	r28, 0x11	; 17
    8154:	cd bf       	out	0x3d, r28	; 61
    8156:	de bf       	out	0x3e, r29	; 62
    8158:	cf 91       	pop	r28
    815a:	df 91       	pop	r29
    815c:	1f 91       	pop	r17
    815e:	0f 91       	pop	r16
    8160:	ff 90       	pop	r15
    8162:	ef 90       	pop	r14
    8164:	df 90       	pop	r13
    8166:	cf 90       	pop	r12
    8168:	bf 90       	pop	r11
    816a:	af 90       	pop	r10
    816c:	9f 90       	pop	r9
    816e:	8f 90       	pop	r8
    8170:	7f 90       	pop	r7
    8172:	6f 90       	pop	r6
    8174:	5f 90       	pop	r5
    8176:	4f 90       	pop	r4
    8178:	3f 90       	pop	r3
    817a:	2f 90       	pop	r2
    817c:	08 95       	ret

0000817e <__subsf3>:
    817e:	50 58       	subi	r21, 0x80	; 128

00008180 <__addsf3>:
    8180:	bb 27       	eor	r27, r27
    8182:	aa 27       	eor	r26, r26
    8184:	0e d0       	rcall	.+28     	; 0x81a2 <__addsf3x>
    8186:	29 c2       	rjmp	.+1106   	; 0x85da <__fp_round>
    8188:	f2 d1       	rcall	.+996    	; 0x856e <__fp_pscA>
    818a:	30 f0       	brcs	.+12     	; 0x8198 <__addsf3+0x18>
    818c:	f7 d1       	rcall	.+1006   	; 0x857c <__fp_pscB>
    818e:	20 f0       	brcs	.+8      	; 0x8198 <__addsf3+0x18>
    8190:	31 f4       	brne	.+12     	; 0x819e <__addsf3+0x1e>
    8192:	9f 3f       	cpi	r25, 0xFF	; 255
    8194:	11 f4       	brne	.+4      	; 0x819a <__addsf3+0x1a>
    8196:	1e f4       	brtc	.+6      	; 0x819e <__addsf3+0x1e>
    8198:	c2 c1       	rjmp	.+900    	; 0x851e <__fp_nan>
    819a:	0e f4       	brtc	.+2      	; 0x819e <__addsf3+0x1e>
    819c:	e0 95       	com	r30
    819e:	e7 fb       	bst	r30, 7
    81a0:	8f c1       	rjmp	.+798    	; 0x84c0 <__fp_inf>

000081a2 <__addsf3x>:
    81a2:	e9 2f       	mov	r30, r25
    81a4:	3c d2       	rcall	.+1144   	; 0x861e <__fp_split3>
    81a6:	80 f3       	brcs	.-32     	; 0x8188 <__addsf3+0x8>
    81a8:	ba 17       	cp	r27, r26
    81aa:	62 07       	cpc	r22, r18
    81ac:	73 07       	cpc	r23, r19
    81ae:	84 07       	cpc	r24, r20
    81b0:	95 07       	cpc	r25, r21
    81b2:	18 f0       	brcs	.+6      	; 0x81ba <__addsf3x+0x18>
    81b4:	71 f4       	brne	.+28     	; 0x81d2 <__addsf3x+0x30>
    81b6:	9e f5       	brtc	.+102    	; 0x821e <__addsf3x+0x7c>
    81b8:	6b c2       	rjmp	.+1238   	; 0x8690 <__fp_zero>
    81ba:	0e f4       	brtc	.+2      	; 0x81be <__addsf3x+0x1c>
    81bc:	e0 95       	com	r30
    81be:	0b 2e       	mov	r0, r27
    81c0:	ba 2f       	mov	r27, r26
    81c2:	a0 2d       	mov	r26, r0
    81c4:	0b 01       	movw	r0, r22
    81c6:	b9 01       	movw	r22, r18
    81c8:	90 01       	movw	r18, r0
    81ca:	0c 01       	movw	r0, r24
    81cc:	ca 01       	movw	r24, r20
    81ce:	a0 01       	movw	r20, r0
    81d0:	11 24       	eor	r1, r1
    81d2:	ff 27       	eor	r31, r31
    81d4:	59 1b       	sub	r21, r25
    81d6:	99 f0       	breq	.+38     	; 0x81fe <__addsf3x+0x5c>
    81d8:	59 3f       	cpi	r21, 0xF9	; 249
    81da:	50 f4       	brcc	.+20     	; 0x81f0 <__addsf3x+0x4e>
    81dc:	50 3e       	cpi	r21, 0xE0	; 224
    81de:	68 f1       	brcs	.+90     	; 0x823a <__addsf3x+0x98>
    81e0:	1a 16       	cp	r1, r26
    81e2:	f0 40       	sbci	r31, 0x00	; 0
    81e4:	a2 2f       	mov	r26, r18
    81e6:	23 2f       	mov	r18, r19
    81e8:	34 2f       	mov	r19, r20
    81ea:	44 27       	eor	r20, r20
    81ec:	58 5f       	subi	r21, 0xF8	; 248
    81ee:	f3 cf       	rjmp	.-26     	; 0x81d6 <__addsf3x+0x34>
    81f0:	46 95       	lsr	r20
    81f2:	37 95       	ror	r19
    81f4:	27 95       	ror	r18
    81f6:	a7 95       	ror	r26
    81f8:	f0 40       	sbci	r31, 0x00	; 0
    81fa:	53 95       	inc	r21
    81fc:	c9 f7       	brne	.-14     	; 0x81f0 <__addsf3x+0x4e>
    81fe:	7e f4       	brtc	.+30     	; 0x821e <__addsf3x+0x7c>
    8200:	1f 16       	cp	r1, r31
    8202:	ba 0b       	sbc	r27, r26
    8204:	62 0b       	sbc	r22, r18
    8206:	73 0b       	sbc	r23, r19
    8208:	84 0b       	sbc	r24, r20
    820a:	ba f0       	brmi	.+46     	; 0x823a <__addsf3x+0x98>
    820c:	91 50       	subi	r25, 0x01	; 1
    820e:	a1 f0       	breq	.+40     	; 0x8238 <__addsf3x+0x96>
    8210:	ff 0f       	add	r31, r31
    8212:	bb 1f       	adc	r27, r27
    8214:	66 1f       	adc	r22, r22
    8216:	77 1f       	adc	r23, r23
    8218:	88 1f       	adc	r24, r24
    821a:	c2 f7       	brpl	.-16     	; 0x820c <__addsf3x+0x6a>
    821c:	0e c0       	rjmp	.+28     	; 0x823a <__addsf3x+0x98>
    821e:	ba 0f       	add	r27, r26
    8220:	62 1f       	adc	r22, r18
    8222:	73 1f       	adc	r23, r19
    8224:	84 1f       	adc	r24, r20
    8226:	48 f4       	brcc	.+18     	; 0x823a <__addsf3x+0x98>
    8228:	87 95       	ror	r24
    822a:	77 95       	ror	r23
    822c:	67 95       	ror	r22
    822e:	b7 95       	ror	r27
    8230:	f7 95       	ror	r31
    8232:	9e 3f       	cpi	r25, 0xFE	; 254
    8234:	08 f0       	brcs	.+2      	; 0x8238 <__addsf3x+0x96>
    8236:	b3 cf       	rjmp	.-154    	; 0x819e <__addsf3+0x1e>
    8238:	93 95       	inc	r25
    823a:	88 0f       	add	r24, r24
    823c:	08 f0       	brcs	.+2      	; 0x8240 <__addsf3x+0x9e>
    823e:	99 27       	eor	r25, r25
    8240:	ee 0f       	add	r30, r30
    8242:	97 95       	ror	r25
    8244:	87 95       	ror	r24
    8246:	08 95       	ret

00008248 <atan>:
    8248:	df 93       	push	r29
    824a:	dd 27       	eor	r29, r29
    824c:	b9 2f       	mov	r27, r25
    824e:	bf 77       	andi	r27, 0x7F	; 127
    8250:	40 e8       	ldi	r20, 0x80	; 128
    8252:	5f e3       	ldi	r21, 0x3F	; 63
    8254:	16 16       	cp	r1, r22
    8256:	17 06       	cpc	r1, r23
    8258:	48 07       	cpc	r20, r24
    825a:	5b 07       	cpc	r21, r27
    825c:	10 f4       	brcc	.+4      	; 0x8262 <atan+0x1a>
    825e:	d9 2f       	mov	r29, r25
    8260:	83 d2       	rcall	.+1286   	; 0x8768 <inverse>
    8262:	9f 93       	push	r25
    8264:	8f 93       	push	r24
    8266:	7f 93       	push	r23
    8268:	6f 93       	push	r22
    826a:	96 d3       	rcall	.+1836   	; 0x8998 <square>
    826c:	e8 ee       	ldi	r30, 0xE8	; 232
    826e:	f1 e0       	ldi	r31, 0x01	; 1
    8270:	59 d1       	rcall	.+690    	; 0x8524 <__fp_powser>
    8272:	b3 d1       	rcall	.+870    	; 0x85da <__fp_round>
    8274:	2f 91       	pop	r18
    8276:	3f 91       	pop	r19
    8278:	4f 91       	pop	r20
    827a:	5f 91       	pop	r21
    827c:	ee d2       	rcall	.+1500   	; 0x885a <__mulsf3x>
    827e:	dd 23       	and	r29, r29
    8280:	49 f0       	breq	.+18     	; 0x8294 <atan+0x4c>
    8282:	90 58       	subi	r25, 0x80	; 128
    8284:	a2 ea       	ldi	r26, 0xA2	; 162
    8286:	2a ed       	ldi	r18, 0xDA	; 218
    8288:	3f e0       	ldi	r19, 0x0F	; 15
    828a:	49 ec       	ldi	r20, 0xC9	; 201
    828c:	5f e3       	ldi	r21, 0x3F	; 63
    828e:	d0 78       	andi	r29, 0x80	; 128
    8290:	5d 27       	eor	r21, r29
    8292:	87 df       	rcall	.-242    	; 0x81a2 <__addsf3x>
    8294:	df 91       	pop	r29
    8296:	a1 c1       	rjmp	.+834    	; 0x85da <__fp_round>

00008298 <ceil>:
    8298:	e4 d1       	rcall	.+968    	; 0x8662 <__fp_trunc>
    829a:	80 f0       	brcs	.+32     	; 0x82bc <ceil+0x24>
    829c:	9f 37       	cpi	r25, 0x7F	; 127
    829e:	40 f4       	brcc	.+16     	; 0x82b0 <ceil+0x18>
    82a0:	91 11       	cpse	r25, r1
    82a2:	0e f4       	brtc	.+2      	; 0x82a6 <ceil+0xe>
    82a4:	f6 c1       	rjmp	.+1004   	; 0x8692 <__fp_szero>
    82a6:	60 e0       	ldi	r22, 0x00	; 0
    82a8:	70 e0       	ldi	r23, 0x00	; 0
    82aa:	80 e8       	ldi	r24, 0x80	; 128
    82ac:	9f e3       	ldi	r25, 0x3F	; 63
    82ae:	08 95       	ret
    82b0:	26 f0       	brts	.+8      	; 0x82ba <ceil+0x22>
    82b2:	1b 16       	cp	r1, r27
    82b4:	61 1d       	adc	r22, r1
    82b6:	71 1d       	adc	r23, r1
    82b8:	81 1d       	adc	r24, r1
    82ba:	08 c1       	rjmp	.+528    	; 0x84cc <__fp_mintl>
    82bc:	22 c1       	rjmp	.+580    	; 0x8502 <__fp_mpack>

000082be <__cmpsf2>:
    82be:	dc d0       	rcall	.+440    	; 0x8478 <__fp_cmp>
    82c0:	08 f4       	brcc	.+2      	; 0x82c4 <__cmpsf2+0x6>
    82c2:	81 e0       	ldi	r24, 0x01	; 1
    82c4:	08 95       	ret

000082c6 <cos>:
    82c6:	62 d1       	rcall	.+708    	; 0x858c <__fp_rempio2>
    82c8:	e3 95       	inc	r30
    82ca:	98 c1       	rjmp	.+816    	; 0x85fc <__fp_sinus>

000082cc <__divsf3>:
    82cc:	0c d0       	rcall	.+24     	; 0x82e6 <__divsf3x>
    82ce:	85 c1       	rjmp	.+778    	; 0x85da <__fp_round>
    82d0:	55 d1       	rcall	.+682    	; 0x857c <__fp_pscB>
    82d2:	40 f0       	brcs	.+16     	; 0x82e4 <__divsf3+0x18>
    82d4:	4c d1       	rcall	.+664    	; 0x856e <__fp_pscA>
    82d6:	30 f0       	brcs	.+12     	; 0x82e4 <__divsf3+0x18>
    82d8:	21 f4       	brne	.+8      	; 0x82e2 <__divsf3+0x16>
    82da:	5f 3f       	cpi	r21, 0xFF	; 255
    82dc:	19 f0       	breq	.+6      	; 0x82e4 <__divsf3+0x18>
    82de:	f0 c0       	rjmp	.+480    	; 0x84c0 <__fp_inf>
    82e0:	51 11       	cpse	r21, r1
    82e2:	d7 c1       	rjmp	.+942    	; 0x8692 <__fp_szero>
    82e4:	1c c1       	rjmp	.+568    	; 0x851e <__fp_nan>

000082e6 <__divsf3x>:
    82e6:	9b d1       	rcall	.+822    	; 0x861e <__fp_split3>
    82e8:	98 f3       	brcs	.-26     	; 0x82d0 <__divsf3+0x4>

000082ea <__divsf3_pse>:
    82ea:	99 23       	and	r25, r25
    82ec:	c9 f3       	breq	.-14     	; 0x82e0 <__divsf3+0x14>
    82ee:	55 23       	and	r21, r21
    82f0:	b1 f3       	breq	.-20     	; 0x82de <__divsf3+0x12>
    82f2:	95 1b       	sub	r25, r21
    82f4:	55 0b       	sbc	r21, r21
    82f6:	bb 27       	eor	r27, r27
    82f8:	aa 27       	eor	r26, r26
    82fa:	62 17       	cp	r22, r18
    82fc:	73 07       	cpc	r23, r19
    82fe:	84 07       	cpc	r24, r20
    8300:	38 f0       	brcs	.+14     	; 0x8310 <__divsf3_pse+0x26>
    8302:	9f 5f       	subi	r25, 0xFF	; 255
    8304:	5f 4f       	sbci	r21, 0xFF	; 255
    8306:	22 0f       	add	r18, r18
    8308:	33 1f       	adc	r19, r19
    830a:	44 1f       	adc	r20, r20
    830c:	aa 1f       	adc	r26, r26
    830e:	a9 f3       	breq	.-22     	; 0x82fa <__divsf3_pse+0x10>
    8310:	33 d0       	rcall	.+102    	; 0x8378 <__divsf3_pse+0x8e>
    8312:	0e 2e       	mov	r0, r30
    8314:	3a f0       	brmi	.+14     	; 0x8324 <__divsf3_pse+0x3a>
    8316:	e0 e8       	ldi	r30, 0x80	; 128
    8318:	30 d0       	rcall	.+96     	; 0x837a <__divsf3_pse+0x90>
    831a:	91 50       	subi	r25, 0x01	; 1
    831c:	50 40       	sbci	r21, 0x00	; 0
    831e:	e6 95       	lsr	r30
    8320:	00 1c       	adc	r0, r0
    8322:	ca f7       	brpl	.-14     	; 0x8316 <__divsf3_pse+0x2c>
    8324:	29 d0       	rcall	.+82     	; 0x8378 <__divsf3_pse+0x8e>
    8326:	fe 2f       	mov	r31, r30
    8328:	27 d0       	rcall	.+78     	; 0x8378 <__divsf3_pse+0x8e>
    832a:	66 0f       	add	r22, r22
    832c:	77 1f       	adc	r23, r23
    832e:	88 1f       	adc	r24, r24
    8330:	bb 1f       	adc	r27, r27
    8332:	26 17       	cp	r18, r22
    8334:	37 07       	cpc	r19, r23
    8336:	48 07       	cpc	r20, r24
    8338:	ab 07       	cpc	r26, r27
    833a:	b0 e8       	ldi	r27, 0x80	; 128
    833c:	09 f0       	breq	.+2      	; 0x8340 <__divsf3_pse+0x56>
    833e:	bb 0b       	sbc	r27, r27
    8340:	80 2d       	mov	r24, r0
    8342:	bf 01       	movw	r22, r30
    8344:	ff 27       	eor	r31, r31
    8346:	93 58       	subi	r25, 0x83	; 131
    8348:	5f 4f       	sbci	r21, 0xFF	; 255
    834a:	2a f0       	brmi	.+10     	; 0x8356 <__divsf3_pse+0x6c>
    834c:	9e 3f       	cpi	r25, 0xFE	; 254
    834e:	51 05       	cpc	r21, r1
    8350:	68 f0       	brcs	.+26     	; 0x836c <__divsf3_pse+0x82>
    8352:	b6 c0       	rjmp	.+364    	; 0x84c0 <__fp_inf>
    8354:	9e c1       	rjmp	.+828    	; 0x8692 <__fp_szero>
    8356:	5f 3f       	cpi	r21, 0xFF	; 255
    8358:	ec f3       	brlt	.-6      	; 0x8354 <__divsf3_pse+0x6a>
    835a:	98 3e       	cpi	r25, 0xE8	; 232
    835c:	dc f3       	brlt	.-10     	; 0x8354 <__divsf3_pse+0x6a>
    835e:	86 95       	lsr	r24
    8360:	77 95       	ror	r23
    8362:	67 95       	ror	r22
    8364:	b7 95       	ror	r27
    8366:	f7 95       	ror	r31
    8368:	9f 5f       	subi	r25, 0xFF	; 255
    836a:	c9 f7       	brne	.-14     	; 0x835e <__divsf3_pse+0x74>
    836c:	88 0f       	add	r24, r24
    836e:	91 1d       	adc	r25, r1
    8370:	96 95       	lsr	r25
    8372:	87 95       	ror	r24
    8374:	97 f9       	bld	r25, 7
    8376:	08 95       	ret
    8378:	e1 e0       	ldi	r30, 0x01	; 1
    837a:	66 0f       	add	r22, r22
    837c:	77 1f       	adc	r23, r23
    837e:	88 1f       	adc	r24, r24
    8380:	bb 1f       	adc	r27, r27
    8382:	62 17       	cp	r22, r18
    8384:	73 07       	cpc	r23, r19
    8386:	84 07       	cpc	r24, r20
    8388:	ba 07       	cpc	r27, r26
    838a:	20 f0       	brcs	.+8      	; 0x8394 <__divsf3_pse+0xaa>
    838c:	62 1b       	sub	r22, r18
    838e:	73 0b       	sbc	r23, r19
    8390:	84 0b       	sbc	r24, r20
    8392:	ba 0b       	sbc	r27, r26
    8394:	ee 1f       	adc	r30, r30
    8396:	88 f7       	brcc	.-30     	; 0x837a <__divsf3_pse+0x90>
    8398:	e0 95       	com	r30
    839a:	08 95       	ret

0000839c <__fixsfsi>:
    839c:	04 d0       	rcall	.+8      	; 0x83a6 <__fixunssfsi>
    839e:	68 94       	set
    83a0:	b1 11       	cpse	r27, r1
    83a2:	77 c1       	rjmp	.+750    	; 0x8692 <__fp_szero>
    83a4:	08 95       	ret

000083a6 <__fixunssfsi>:
    83a6:	43 d1       	rcall	.+646    	; 0x862e <__fp_splitA>
    83a8:	88 f0       	brcs	.+34     	; 0x83cc <__fixunssfsi+0x26>
    83aa:	9f 57       	subi	r25, 0x7F	; 127
    83ac:	90 f0       	brcs	.+36     	; 0x83d2 <__fixunssfsi+0x2c>
    83ae:	b9 2f       	mov	r27, r25
    83b0:	99 27       	eor	r25, r25
    83b2:	b7 51       	subi	r27, 0x17	; 23
    83b4:	a0 f0       	brcs	.+40     	; 0x83de <__fixunssfsi+0x38>
    83b6:	d1 f0       	breq	.+52     	; 0x83ec <__fixunssfsi+0x46>
    83b8:	66 0f       	add	r22, r22
    83ba:	77 1f       	adc	r23, r23
    83bc:	88 1f       	adc	r24, r24
    83be:	99 1f       	adc	r25, r25
    83c0:	1a f0       	brmi	.+6      	; 0x83c8 <__fixunssfsi+0x22>
    83c2:	ba 95       	dec	r27
    83c4:	c9 f7       	brne	.-14     	; 0x83b8 <__fixunssfsi+0x12>
    83c6:	12 c0       	rjmp	.+36     	; 0x83ec <__fixunssfsi+0x46>
    83c8:	b1 30       	cpi	r27, 0x01	; 1
    83ca:	81 f0       	breq	.+32     	; 0x83ec <__fixunssfsi+0x46>
    83cc:	61 d1       	rcall	.+706    	; 0x8690 <__fp_zero>
    83ce:	b1 e0       	ldi	r27, 0x01	; 1
    83d0:	08 95       	ret
    83d2:	5e c1       	rjmp	.+700    	; 0x8690 <__fp_zero>
    83d4:	67 2f       	mov	r22, r23
    83d6:	78 2f       	mov	r23, r24
    83d8:	88 27       	eor	r24, r24
    83da:	b8 5f       	subi	r27, 0xF8	; 248
    83dc:	39 f0       	breq	.+14     	; 0x83ec <__fixunssfsi+0x46>
    83de:	b9 3f       	cpi	r27, 0xF9	; 249
    83e0:	cc f3       	brlt	.-14     	; 0x83d4 <__fixunssfsi+0x2e>
    83e2:	86 95       	lsr	r24
    83e4:	77 95       	ror	r23
    83e6:	67 95       	ror	r22
    83e8:	b3 95       	inc	r27
    83ea:	d9 f7       	brne	.-10     	; 0x83e2 <__fixunssfsi+0x3c>
    83ec:	3e f4       	brtc	.+14     	; 0x83fc <__fixunssfsi+0x56>
    83ee:	90 95       	com	r25
    83f0:	80 95       	com	r24
    83f2:	70 95       	com	r23
    83f4:	61 95       	neg	r22
    83f6:	7f 4f       	sbci	r23, 0xFF	; 255
    83f8:	8f 4f       	sbci	r24, 0xFF	; 255
    83fa:	9f 4f       	sbci	r25, 0xFF	; 255
    83fc:	08 95       	ret

000083fe <__floatunsisf>:
    83fe:	e8 94       	clt
    8400:	09 c0       	rjmp	.+18     	; 0x8414 <__floatsisf+0x12>

00008402 <__floatsisf>:
    8402:	97 fb       	bst	r25, 7
    8404:	3e f4       	brtc	.+14     	; 0x8414 <__floatsisf+0x12>
    8406:	90 95       	com	r25
    8408:	80 95       	com	r24
    840a:	70 95       	com	r23
    840c:	61 95       	neg	r22
    840e:	7f 4f       	sbci	r23, 0xFF	; 255
    8410:	8f 4f       	sbci	r24, 0xFF	; 255
    8412:	9f 4f       	sbci	r25, 0xFF	; 255
    8414:	99 23       	and	r25, r25
    8416:	a9 f0       	breq	.+42     	; 0x8442 <__floatsisf+0x40>
    8418:	f9 2f       	mov	r31, r25
    841a:	96 e9       	ldi	r25, 0x96	; 150
    841c:	bb 27       	eor	r27, r27
    841e:	93 95       	inc	r25
    8420:	f6 95       	lsr	r31
    8422:	87 95       	ror	r24
    8424:	77 95       	ror	r23
    8426:	67 95       	ror	r22
    8428:	b7 95       	ror	r27
    842a:	f1 11       	cpse	r31, r1
    842c:	f8 cf       	rjmp	.-16     	; 0x841e <__floatsisf+0x1c>
    842e:	fa f4       	brpl	.+62     	; 0x846e <__floatsisf+0x6c>
    8430:	bb 0f       	add	r27, r27
    8432:	11 f4       	brne	.+4      	; 0x8438 <__floatsisf+0x36>
    8434:	60 ff       	sbrs	r22, 0
    8436:	1b c0       	rjmp	.+54     	; 0x846e <__floatsisf+0x6c>
    8438:	6f 5f       	subi	r22, 0xFF	; 255
    843a:	7f 4f       	sbci	r23, 0xFF	; 255
    843c:	8f 4f       	sbci	r24, 0xFF	; 255
    843e:	9f 4f       	sbci	r25, 0xFF	; 255
    8440:	16 c0       	rjmp	.+44     	; 0x846e <__floatsisf+0x6c>
    8442:	88 23       	and	r24, r24
    8444:	11 f0       	breq	.+4      	; 0x844a <__floatsisf+0x48>
    8446:	96 e9       	ldi	r25, 0x96	; 150
    8448:	11 c0       	rjmp	.+34     	; 0x846c <__floatsisf+0x6a>
    844a:	77 23       	and	r23, r23
    844c:	21 f0       	breq	.+8      	; 0x8456 <__floatsisf+0x54>
    844e:	9e e8       	ldi	r25, 0x8E	; 142
    8450:	87 2f       	mov	r24, r23
    8452:	76 2f       	mov	r23, r22
    8454:	05 c0       	rjmp	.+10     	; 0x8460 <__floatsisf+0x5e>
    8456:	66 23       	and	r22, r22
    8458:	71 f0       	breq	.+28     	; 0x8476 <__floatsisf+0x74>
    845a:	96 e8       	ldi	r25, 0x86	; 134
    845c:	86 2f       	mov	r24, r22
    845e:	70 e0       	ldi	r23, 0x00	; 0
    8460:	60 e0       	ldi	r22, 0x00	; 0
    8462:	2a f0       	brmi	.+10     	; 0x846e <__floatsisf+0x6c>
    8464:	9a 95       	dec	r25
    8466:	66 0f       	add	r22, r22
    8468:	77 1f       	adc	r23, r23
    846a:	88 1f       	adc	r24, r24
    846c:	da f7       	brpl	.-10     	; 0x8464 <__floatsisf+0x62>
    846e:	88 0f       	add	r24, r24
    8470:	96 95       	lsr	r25
    8472:	87 95       	ror	r24
    8474:	97 f9       	bld	r25, 7
    8476:	08 95       	ret

00008478 <__fp_cmp>:
    8478:	99 0f       	add	r25, r25
    847a:	00 08       	sbc	r0, r0
    847c:	55 0f       	add	r21, r21
    847e:	aa 0b       	sbc	r26, r26
    8480:	e0 e8       	ldi	r30, 0x80	; 128
    8482:	fe ef       	ldi	r31, 0xFE	; 254
    8484:	16 16       	cp	r1, r22
    8486:	17 06       	cpc	r1, r23
    8488:	e8 07       	cpc	r30, r24
    848a:	f9 07       	cpc	r31, r25
    848c:	c0 f0       	brcs	.+48     	; 0x84be <__fp_cmp+0x46>
    848e:	12 16       	cp	r1, r18
    8490:	13 06       	cpc	r1, r19
    8492:	e4 07       	cpc	r30, r20
    8494:	f5 07       	cpc	r31, r21
    8496:	98 f0       	brcs	.+38     	; 0x84be <__fp_cmp+0x46>
    8498:	62 1b       	sub	r22, r18
    849a:	73 0b       	sbc	r23, r19
    849c:	84 0b       	sbc	r24, r20
    849e:	95 0b       	sbc	r25, r21
    84a0:	39 f4       	brne	.+14     	; 0x84b0 <__fp_cmp+0x38>
    84a2:	0a 26       	eor	r0, r26
    84a4:	61 f0       	breq	.+24     	; 0x84be <__fp_cmp+0x46>
    84a6:	23 2b       	or	r18, r19
    84a8:	24 2b       	or	r18, r20
    84aa:	25 2b       	or	r18, r21
    84ac:	21 f4       	brne	.+8      	; 0x84b6 <__fp_cmp+0x3e>
    84ae:	08 95       	ret
    84b0:	0a 26       	eor	r0, r26
    84b2:	09 f4       	brne	.+2      	; 0x84b6 <__fp_cmp+0x3e>
    84b4:	a1 40       	sbci	r26, 0x01	; 1
    84b6:	a6 95       	lsr	r26
    84b8:	8f ef       	ldi	r24, 0xFF	; 255
    84ba:	81 1d       	adc	r24, r1
    84bc:	81 1d       	adc	r24, r1
    84be:	08 95       	ret

000084c0 <__fp_inf>:
    84c0:	97 f9       	bld	r25, 7
    84c2:	9f 67       	ori	r25, 0x7F	; 127
    84c4:	80 e8       	ldi	r24, 0x80	; 128
    84c6:	70 e0       	ldi	r23, 0x00	; 0
    84c8:	60 e0       	ldi	r22, 0x00	; 0
    84ca:	08 95       	ret

000084cc <__fp_mintl>:
    84cc:	88 23       	and	r24, r24
    84ce:	71 f4       	brne	.+28     	; 0x84ec <__fp_mintl+0x20>
    84d0:	77 23       	and	r23, r23
    84d2:	21 f0       	breq	.+8      	; 0x84dc <__fp_mintl+0x10>
    84d4:	98 50       	subi	r25, 0x08	; 8
    84d6:	87 2b       	or	r24, r23
    84d8:	76 2f       	mov	r23, r22
    84da:	07 c0       	rjmp	.+14     	; 0x84ea <__fp_mintl+0x1e>
    84dc:	66 23       	and	r22, r22
    84de:	11 f4       	brne	.+4      	; 0x84e4 <__fp_mintl+0x18>
    84e0:	99 27       	eor	r25, r25
    84e2:	0d c0       	rjmp	.+26     	; 0x84fe <__fp_mintl+0x32>
    84e4:	90 51       	subi	r25, 0x10	; 16
    84e6:	86 2b       	or	r24, r22
    84e8:	70 e0       	ldi	r23, 0x00	; 0
    84ea:	60 e0       	ldi	r22, 0x00	; 0
    84ec:	2a f0       	brmi	.+10     	; 0x84f8 <__fp_mintl+0x2c>
    84ee:	9a 95       	dec	r25
    84f0:	66 0f       	add	r22, r22
    84f2:	77 1f       	adc	r23, r23
    84f4:	88 1f       	adc	r24, r24
    84f6:	da f7       	brpl	.-10     	; 0x84ee <__fp_mintl+0x22>
    84f8:	88 0f       	add	r24, r24
    84fa:	96 95       	lsr	r25
    84fc:	87 95       	ror	r24
    84fe:	97 f9       	bld	r25, 7
    8500:	08 95       	ret

00008502 <__fp_mpack>:
    8502:	9f 3f       	cpi	r25, 0xFF	; 255
    8504:	31 f0       	breq	.+12     	; 0x8512 <__fp_mpack_finite+0xc>

00008506 <__fp_mpack_finite>:
    8506:	91 50       	subi	r25, 0x01	; 1
    8508:	20 f4       	brcc	.+8      	; 0x8512 <__fp_mpack_finite+0xc>
    850a:	87 95       	ror	r24
    850c:	77 95       	ror	r23
    850e:	67 95       	ror	r22
    8510:	b7 95       	ror	r27
    8512:	88 0f       	add	r24, r24
    8514:	91 1d       	adc	r25, r1
    8516:	96 95       	lsr	r25
    8518:	87 95       	ror	r24
    851a:	97 f9       	bld	r25, 7
    851c:	08 95       	ret

0000851e <__fp_nan>:
    851e:	9f ef       	ldi	r25, 0xFF	; 255
    8520:	80 ec       	ldi	r24, 0xC0	; 192
    8522:	08 95       	ret

00008524 <__fp_powser>:
    8524:	df 93       	push	r29
    8526:	cf 93       	push	r28
    8528:	1f 93       	push	r17
    852a:	0f 93       	push	r16
    852c:	ff 92       	push	r15
    852e:	ef 92       	push	r14
    8530:	df 92       	push	r13
    8532:	7b 01       	movw	r14, r22
    8534:	8c 01       	movw	r16, r24
    8536:	68 94       	set
    8538:	05 c0       	rjmp	.+10     	; 0x8544 <__fp_powser+0x20>
    853a:	da 2e       	mov	r13, r26
    853c:	ef 01       	movw	r28, r30
    853e:	8d d1       	rcall	.+794    	; 0x885a <__mulsf3x>
    8540:	fe 01       	movw	r30, r28
    8542:	e8 94       	clt
    8544:	a5 91       	lpm	r26, Z+
    8546:	25 91       	lpm	r18, Z+
    8548:	35 91       	lpm	r19, Z+
    854a:	45 91       	lpm	r20, Z+
    854c:	55 91       	lpm	r21, Z+
    854e:	ae f3       	brts	.-22     	; 0x853a <__fp_powser+0x16>
    8550:	ef 01       	movw	r28, r30
    8552:	27 de       	rcall	.-946    	; 0x81a2 <__addsf3x>
    8554:	fe 01       	movw	r30, r28
    8556:	97 01       	movw	r18, r14
    8558:	a8 01       	movw	r20, r16
    855a:	da 94       	dec	r13
    855c:	79 f7       	brne	.-34     	; 0x853c <__fp_powser+0x18>
    855e:	df 90       	pop	r13
    8560:	ef 90       	pop	r14
    8562:	ff 90       	pop	r15
    8564:	0f 91       	pop	r16
    8566:	1f 91       	pop	r17
    8568:	cf 91       	pop	r28
    856a:	df 91       	pop	r29
    856c:	08 95       	ret

0000856e <__fp_pscA>:
    856e:	00 24       	eor	r0, r0
    8570:	0a 94       	dec	r0
    8572:	16 16       	cp	r1, r22
    8574:	17 06       	cpc	r1, r23
    8576:	18 06       	cpc	r1, r24
    8578:	09 06       	cpc	r0, r25
    857a:	08 95       	ret

0000857c <__fp_pscB>:
    857c:	00 24       	eor	r0, r0
    857e:	0a 94       	dec	r0
    8580:	12 16       	cp	r1, r18
    8582:	13 06       	cpc	r1, r19
    8584:	14 06       	cpc	r1, r20
    8586:	05 06       	cpc	r0, r21
    8588:	08 95       	ret
    858a:	c9 cf       	rjmp	.-110    	; 0x851e <__fp_nan>

0000858c <__fp_rempio2>:
    858c:	50 d0       	rcall	.+160    	; 0x862e <__fp_splitA>
    858e:	e8 f3       	brcs	.-6      	; 0x858a <__fp_pscB+0xe>
    8590:	e8 94       	clt
    8592:	e0 e0       	ldi	r30, 0x00	; 0
    8594:	bb 27       	eor	r27, r27
    8596:	9f 57       	subi	r25, 0x7F	; 127
    8598:	f0 f0       	brcs	.+60     	; 0x85d6 <__fp_rempio2+0x4a>
    859a:	2a ed       	ldi	r18, 0xDA	; 218
    859c:	3f e0       	ldi	r19, 0x0F	; 15
    859e:	49 ec       	ldi	r20, 0xC9	; 201
    85a0:	06 c0       	rjmp	.+12     	; 0x85ae <__fp_rempio2+0x22>
    85a2:	ee 0f       	add	r30, r30
    85a4:	bb 0f       	add	r27, r27
    85a6:	66 1f       	adc	r22, r22
    85a8:	77 1f       	adc	r23, r23
    85aa:	88 1f       	adc	r24, r24
    85ac:	28 f0       	brcs	.+10     	; 0x85b8 <__fp_rempio2+0x2c>
    85ae:	b2 3a       	cpi	r27, 0xA2	; 162
    85b0:	62 07       	cpc	r22, r18
    85b2:	73 07       	cpc	r23, r19
    85b4:	84 07       	cpc	r24, r20
    85b6:	28 f0       	brcs	.+10     	; 0x85c2 <__fp_rempio2+0x36>
    85b8:	b2 5a       	subi	r27, 0xA2	; 162
    85ba:	62 0b       	sbc	r22, r18
    85bc:	73 0b       	sbc	r23, r19
    85be:	84 0b       	sbc	r24, r20
    85c0:	e3 95       	inc	r30
    85c2:	9a 95       	dec	r25
    85c4:	72 f7       	brpl	.-36     	; 0x85a2 <__fp_rempio2+0x16>
    85c6:	80 38       	cpi	r24, 0x80	; 128
    85c8:	30 f4       	brcc	.+12     	; 0x85d6 <__fp_rempio2+0x4a>
    85ca:	9a 95       	dec	r25
    85cc:	bb 0f       	add	r27, r27
    85ce:	66 1f       	adc	r22, r22
    85d0:	77 1f       	adc	r23, r23
    85d2:	88 1f       	adc	r24, r24
    85d4:	d2 f7       	brpl	.-12     	; 0x85ca <__fp_rempio2+0x3e>
    85d6:	90 48       	sbci	r25, 0x80	; 128
    85d8:	96 cf       	rjmp	.-212    	; 0x8506 <__fp_mpack_finite>

000085da <__fp_round>:
    85da:	09 2e       	mov	r0, r25
    85dc:	03 94       	inc	r0
    85de:	00 0c       	add	r0, r0
    85e0:	11 f4       	brne	.+4      	; 0x85e6 <__fp_round+0xc>
    85e2:	88 23       	and	r24, r24
    85e4:	52 f0       	brmi	.+20     	; 0x85fa <__fp_round+0x20>
    85e6:	bb 0f       	add	r27, r27
    85e8:	40 f4       	brcc	.+16     	; 0x85fa <__fp_round+0x20>
    85ea:	bf 2b       	or	r27, r31
    85ec:	11 f4       	brne	.+4      	; 0x85f2 <__fp_round+0x18>
    85ee:	60 ff       	sbrs	r22, 0
    85f0:	04 c0       	rjmp	.+8      	; 0x85fa <__fp_round+0x20>
    85f2:	6f 5f       	subi	r22, 0xFF	; 255
    85f4:	7f 4f       	sbci	r23, 0xFF	; 255
    85f6:	8f 4f       	sbci	r24, 0xFF	; 255
    85f8:	9f 4f       	sbci	r25, 0xFF	; 255
    85fa:	08 95       	ret

000085fc <__fp_sinus>:
    85fc:	ef 93       	push	r30
    85fe:	e0 ff       	sbrs	r30, 0
    8600:	06 c0       	rjmp	.+12     	; 0x860e <__fp_sinus+0x12>
    8602:	a2 ea       	ldi	r26, 0xA2	; 162
    8604:	2a ed       	ldi	r18, 0xDA	; 218
    8606:	3f e0       	ldi	r19, 0x0F	; 15
    8608:	49 ec       	ldi	r20, 0xC9	; 201
    860a:	5f eb       	ldi	r21, 0xBF	; 191
    860c:	ca dd       	rcall	.-1132   	; 0x81a2 <__addsf3x>
    860e:	e5 df       	rcall	.-54     	; 0x85da <__fp_round>
    8610:	0f 90       	pop	r0
    8612:	03 94       	inc	r0
    8614:	01 fc       	sbrc	r0, 1
    8616:	90 58       	subi	r25, 0x80	; 128
    8618:	e5 e1       	ldi	r30, 0x15	; 21
    861a:	f2 e0       	ldi	r31, 0x02	; 2
    861c:	d2 c1       	rjmp	.+932    	; 0x89c2 <__fp_powsodd>

0000861e <__fp_split3>:
    861e:	57 fd       	sbrc	r21, 7
    8620:	90 58       	subi	r25, 0x80	; 128
    8622:	44 0f       	add	r20, r20
    8624:	55 1f       	adc	r21, r21
    8626:	59 f0       	breq	.+22     	; 0x863e <__fp_splitA+0x10>
    8628:	5f 3f       	cpi	r21, 0xFF	; 255
    862a:	71 f0       	breq	.+28     	; 0x8648 <__fp_splitA+0x1a>
    862c:	47 95       	ror	r20

0000862e <__fp_splitA>:
    862e:	88 0f       	add	r24, r24
    8630:	97 fb       	bst	r25, 7
    8632:	99 1f       	adc	r25, r25
    8634:	61 f0       	breq	.+24     	; 0x864e <__fp_splitA+0x20>
    8636:	9f 3f       	cpi	r25, 0xFF	; 255
    8638:	79 f0       	breq	.+30     	; 0x8658 <__fp_splitA+0x2a>
    863a:	87 95       	ror	r24
    863c:	08 95       	ret
    863e:	12 16       	cp	r1, r18
    8640:	13 06       	cpc	r1, r19
    8642:	14 06       	cpc	r1, r20
    8644:	55 1f       	adc	r21, r21
    8646:	f2 cf       	rjmp	.-28     	; 0x862c <__fp_split3+0xe>
    8648:	46 95       	lsr	r20
    864a:	f1 df       	rcall	.-30     	; 0x862e <__fp_splitA>
    864c:	08 c0       	rjmp	.+16     	; 0x865e <__fp_splitA+0x30>
    864e:	16 16       	cp	r1, r22
    8650:	17 06       	cpc	r1, r23
    8652:	18 06       	cpc	r1, r24
    8654:	99 1f       	adc	r25, r25
    8656:	f1 cf       	rjmp	.-30     	; 0x863a <__fp_splitA+0xc>
    8658:	86 95       	lsr	r24
    865a:	71 05       	cpc	r23, r1
    865c:	61 05       	cpc	r22, r1
    865e:	08 94       	sec
    8660:	08 95       	ret

00008662 <__fp_trunc>:
    8662:	e5 df       	rcall	.-54     	; 0x862e <__fp_splitA>
    8664:	a0 f0       	brcs	.+40     	; 0x868e <__fp_trunc+0x2c>
    8666:	be e7       	ldi	r27, 0x7E	; 126
    8668:	b9 17       	cp	r27, r25
    866a:	88 f4       	brcc	.+34     	; 0x868e <__fp_trunc+0x2c>
    866c:	bb 27       	eor	r27, r27
    866e:	9f 38       	cpi	r25, 0x8F	; 143
    8670:	60 f4       	brcc	.+24     	; 0x868a <__fp_trunc+0x28>
    8672:	16 16       	cp	r1, r22
    8674:	b1 1d       	adc	r27, r1
    8676:	67 2f       	mov	r22, r23
    8678:	78 2f       	mov	r23, r24
    867a:	88 27       	eor	r24, r24
    867c:	98 5f       	subi	r25, 0xF8	; 248
    867e:	f7 cf       	rjmp	.-18     	; 0x866e <__fp_trunc+0xc>
    8680:	86 95       	lsr	r24
    8682:	77 95       	ror	r23
    8684:	67 95       	ror	r22
    8686:	b1 1d       	adc	r27, r1
    8688:	93 95       	inc	r25
    868a:	96 39       	cpi	r25, 0x96	; 150
    868c:	c8 f3       	brcs	.-14     	; 0x8680 <__fp_trunc+0x1e>
    868e:	08 95       	ret

00008690 <__fp_zero>:
    8690:	e8 94       	clt

00008692 <__fp_szero>:
    8692:	bb 27       	eor	r27, r27
    8694:	66 27       	eor	r22, r22
    8696:	77 27       	eor	r23, r23
    8698:	cb 01       	movw	r24, r22
    869a:	97 f9       	bld	r25, 7
    869c:	08 95       	ret

0000869e <__gesf2>:
    869e:	ec de       	rcall	.-552    	; 0x8478 <__fp_cmp>
    86a0:	08 f4       	brcc	.+2      	; 0x86a4 <__gesf2+0x6>
    86a2:	8f ef       	ldi	r24, 0xFF	; 255
    86a4:	08 95       	ret
    86a6:	63 df       	rcall	.-314    	; 0x856e <__fp_pscA>
    86a8:	19 f0       	breq	.+6      	; 0x86b0 <__gesf2+0x12>
    86aa:	68 df       	rcall	.-304    	; 0x857c <__fp_pscB>
    86ac:	09 f0       	breq	.+2      	; 0x86b0 <__gesf2+0x12>
    86ae:	37 cf       	rjmp	.-402    	; 0x851e <__fp_nan>
    86b0:	07 cf       	rjmp	.-498    	; 0x84c0 <__fp_inf>
    86b2:	b9 01       	movw	r22, r18
    86b4:	ca 01       	movw	r24, r20
    86b6:	25 cf       	rjmp	.-438    	; 0x8502 <__fp_mpack>

000086b8 <hypot>:
    86b8:	9f 77       	andi	r25, 0x7F	; 127
    86ba:	5f 77       	andi	r21, 0x7F	; 127
    86bc:	b0 df       	rcall	.-160    	; 0x861e <__fp_split3>
    86be:	98 f3       	brcs	.-26     	; 0x86a6 <__gesf2+0x8>
    86c0:	99 23       	and	r25, r25
    86c2:	b9 f3       	breq	.-18     	; 0x86b2 <__gesf2+0x14>
    86c4:	55 23       	and	r21, r21
    86c6:	b9 f3       	breq	.-18     	; 0x86b6 <__gesf2+0x18>
    86c8:	ff 27       	eor	r31, r31
    86ca:	95 17       	cp	r25, r21
    86cc:	58 f4       	brcc	.+22     	; 0x86e4 <hypot+0x2c>
    86ce:	e5 2f       	mov	r30, r21
    86d0:	e9 1b       	sub	r30, r25
    86d2:	ed 30       	cpi	r30, 0x0D	; 13
    86d4:	70 f7       	brcc	.-36     	; 0x86b2 <__gesf2+0x14>
    86d6:	5e 3b       	cpi	r21, 0xBE	; 190
    86d8:	10 f0       	brcs	.+4      	; 0x86de <hypot+0x26>
    86da:	f1 e4       	ldi	r31, 0x41	; 65
    86dc:	1c c0       	rjmp	.+56     	; 0x8716 <hypot+0x5e>
    86de:	90 34       	cpi	r25, 0x40	; 64
    86e0:	e0 f4       	brcc	.+56     	; 0x871a <hypot+0x62>
    86e2:	0a c0       	rjmp	.+20     	; 0x86f8 <hypot+0x40>
    86e4:	e9 2f       	mov	r30, r25
    86e6:	e5 1b       	sub	r30, r21
    86e8:	ed 30       	cpi	r30, 0x0D	; 13
    86ea:	28 f7       	brcc	.-54     	; 0x86b6 <__gesf2+0x18>
    86ec:	9e 3b       	cpi	r25, 0xBE	; 190
    86ee:	10 f0       	brcs	.+4      	; 0x86f4 <hypot+0x3c>
    86f0:	f1 e4       	ldi	r31, 0x41	; 65
    86f2:	11 c0       	rjmp	.+34     	; 0x8716 <hypot+0x5e>
    86f4:	50 34       	cpi	r21, 0x40	; 64
    86f6:	88 f4       	brcc	.+34     	; 0x871a <hypot+0x62>
    86f8:	f9 ea       	ldi	r31, 0xA9	; 169
    86fa:	88 23       	and	r24, r24
    86fc:	2a f0       	brmi	.+10     	; 0x8708 <hypot+0x50>
    86fe:	9a 95       	dec	r25
    8700:	66 0f       	add	r22, r22
    8702:	77 1f       	adc	r23, r23
    8704:	88 1f       	adc	r24, r24
    8706:	da f7       	brpl	.-10     	; 0x86fe <hypot+0x46>
    8708:	44 23       	and	r20, r20
    870a:	2a f0       	brmi	.+10     	; 0x8716 <hypot+0x5e>
    870c:	5a 95       	dec	r21
    870e:	22 0f       	add	r18, r18
    8710:	33 1f       	adc	r19, r19
    8712:	44 1f       	adc	r20, r20
    8714:	da f7       	brpl	.-10     	; 0x870c <hypot+0x54>
    8716:	9f 1b       	sub	r25, r31
    8718:	5f 1b       	sub	r21, r31
    871a:	ff 93       	push	r31
    871c:	1f 93       	push	r17
    871e:	0f 93       	push	r16
    8720:	ff 92       	push	r15
    8722:	ef 92       	push	r14
    8724:	79 01       	movw	r14, r18
    8726:	8a 01       	movw	r16, r20
    8728:	bb 27       	eor	r27, r27
    872a:	ab 2f       	mov	r26, r27
    872c:	9b 01       	movw	r18, r22
    872e:	ac 01       	movw	r20, r24
    8730:	96 d0       	rcall	.+300    	; 0x885e <__mulsf3_pse>
    8732:	97 01       	movw	r18, r14
    8734:	a8 01       	movw	r20, r16
    8736:	bf 93       	push	r27
    8738:	7b 01       	movw	r14, r22
    873a:	8c 01       	movw	r16, r24
    873c:	aa 27       	eor	r26, r26
    873e:	ba 2f       	mov	r27, r26
    8740:	b9 01       	movw	r22, r18
    8742:	ca 01       	movw	r24, r20
    8744:	8c d0       	rcall	.+280    	; 0x885e <__mulsf3_pse>
    8746:	af 91       	pop	r26
    8748:	97 01       	movw	r18, r14
    874a:	a8 01       	movw	r20, r16
    874c:	ef 90       	pop	r14
    874e:	ff 90       	pop	r15
    8750:	0f 91       	pop	r16
    8752:	1f 91       	pop	r17
    8754:	26 dd       	rcall	.-1460   	; 0x81a2 <__addsf3x>
    8756:	41 df       	rcall	.-382    	; 0x85da <__fp_round>
    8758:	e1 d0       	rcall	.+450    	; 0x891c <sqrt>
    875a:	4f 91       	pop	r20
    875c:	40 ff       	sbrs	r20, 0
    875e:	08 95       	ret
    8760:	55 27       	eor	r21, r21
    8762:	47 fd       	sbrc	r20, 7
    8764:	50 95       	com	r21
    8766:	09 c0       	rjmp	.+18     	; 0x877a <ldexp>

00008768 <inverse>:
    8768:	9b 01       	movw	r18, r22
    876a:	ac 01       	movw	r20, r24
    876c:	60 e0       	ldi	r22, 0x00	; 0
    876e:	70 e0       	ldi	r23, 0x00	; 0
    8770:	80 e8       	ldi	r24, 0x80	; 128
    8772:	9f e3       	ldi	r25, 0x3F	; 63
    8774:	ab cd       	rjmp	.-1194   	; 0x82cc <__divsf3>
    8776:	a4 ce       	rjmp	.-696    	; 0x84c0 <__fp_inf>
    8778:	c4 ce       	rjmp	.-632    	; 0x8502 <__fp_mpack>

0000877a <ldexp>:
    877a:	59 df       	rcall	.-334    	; 0x862e <__fp_splitA>
    877c:	e8 f3       	brcs	.-6      	; 0x8778 <inverse+0x10>
    877e:	99 23       	and	r25, r25
    8780:	d9 f3       	breq	.-10     	; 0x8778 <inverse+0x10>
    8782:	94 0f       	add	r25, r20
    8784:	51 1d       	adc	r21, r1
    8786:	bb f3       	brvs	.-18     	; 0x8776 <inverse+0xe>
    8788:	91 50       	subi	r25, 0x01	; 1
    878a:	50 40       	sbci	r21, 0x00	; 0
    878c:	94 f0       	brlt	.+36     	; 0x87b2 <ldexp+0x38>
    878e:	59 f0       	breq	.+22     	; 0x87a6 <ldexp+0x2c>
    8790:	88 23       	and	r24, r24
    8792:	32 f0       	brmi	.+12     	; 0x87a0 <ldexp+0x26>
    8794:	66 0f       	add	r22, r22
    8796:	77 1f       	adc	r23, r23
    8798:	88 1f       	adc	r24, r24
    879a:	91 50       	subi	r25, 0x01	; 1
    879c:	50 40       	sbci	r21, 0x00	; 0
    879e:	c1 f7       	brne	.-16     	; 0x8790 <ldexp+0x16>
    87a0:	9e 3f       	cpi	r25, 0xFE	; 254
    87a2:	51 05       	cpc	r21, r1
    87a4:	44 f7       	brge	.-48     	; 0x8776 <inverse+0xe>
    87a6:	88 0f       	add	r24, r24
    87a8:	91 1d       	adc	r25, r1
    87aa:	96 95       	lsr	r25
    87ac:	87 95       	ror	r24
    87ae:	97 f9       	bld	r25, 7
    87b0:	08 95       	ret
    87b2:	5f 3f       	cpi	r21, 0xFF	; 255
    87b4:	ac f0       	brlt	.+42     	; 0x87e0 <ldexp+0x66>
    87b6:	98 3e       	cpi	r25, 0xE8	; 232
    87b8:	9c f0       	brlt	.+38     	; 0x87e0 <ldexp+0x66>
    87ba:	bb 27       	eor	r27, r27
    87bc:	86 95       	lsr	r24
    87be:	77 95       	ror	r23
    87c0:	67 95       	ror	r22
    87c2:	b7 95       	ror	r27
    87c4:	08 f4       	brcc	.+2      	; 0x87c8 <ldexp+0x4e>
    87c6:	b1 60       	ori	r27, 0x01	; 1
    87c8:	93 95       	inc	r25
    87ca:	c1 f7       	brne	.-16     	; 0x87bc <ldexp+0x42>
    87cc:	bb 0f       	add	r27, r27
    87ce:	58 f7       	brcc	.-42     	; 0x87a6 <ldexp+0x2c>
    87d0:	11 f4       	brne	.+4      	; 0x87d6 <ldexp+0x5c>
    87d2:	60 ff       	sbrs	r22, 0
    87d4:	e8 cf       	rjmp	.-48     	; 0x87a6 <ldexp+0x2c>
    87d6:	6f 5f       	subi	r22, 0xFF	; 255
    87d8:	7f 4f       	sbci	r23, 0xFF	; 255
    87da:	8f 4f       	sbci	r24, 0xFF	; 255
    87dc:	9f 4f       	sbci	r25, 0xFF	; 255
    87de:	e3 cf       	rjmp	.-58     	; 0x87a6 <ldexp+0x2c>
    87e0:	58 cf       	rjmp	.-336    	; 0x8692 <__fp_szero>

000087e2 <lround>:
    87e2:	25 df       	rcall	.-438    	; 0x862e <__fp_splitA>
    87e4:	58 f1       	brcs	.+86     	; 0x883c <lround+0x5a>
    87e6:	9e 57       	subi	r25, 0x7E	; 126
    87e8:	58 f1       	brcs	.+86     	; 0x8840 <lround+0x5e>
    87ea:	98 51       	subi	r25, 0x18	; 24
    87ec:	a0 f0       	brcs	.+40     	; 0x8816 <lround+0x34>
    87ee:	e9 f0       	breq	.+58     	; 0x882a <lround+0x48>
    87f0:	98 30       	cpi	r25, 0x08	; 8
    87f2:	20 f5       	brcc	.+72     	; 0x883c <lround+0x5a>
    87f4:	09 2e       	mov	r0, r25
    87f6:	99 27       	eor	r25, r25
    87f8:	66 0f       	add	r22, r22
    87fa:	77 1f       	adc	r23, r23
    87fc:	88 1f       	adc	r24, r24
    87fe:	99 1f       	adc	r25, r25
    8800:	0a 94       	dec	r0
    8802:	d1 f7       	brne	.-12     	; 0x87f8 <lround+0x16>
    8804:	12 c0       	rjmp	.+36     	; 0x882a <lround+0x48>
    8806:	06 2e       	mov	r0, r22
    8808:	67 2f       	mov	r22, r23
    880a:	78 2f       	mov	r23, r24
    880c:	88 27       	eor	r24, r24
    880e:	98 5f       	subi	r25, 0xF8	; 248
    8810:	11 f4       	brne	.+4      	; 0x8816 <lround+0x34>
    8812:	00 0c       	add	r0, r0
    8814:	07 c0       	rjmp	.+14     	; 0x8824 <lround+0x42>
    8816:	99 3f       	cpi	r25, 0xF9	; 249
    8818:	b4 f3       	brlt	.-20     	; 0x8806 <lround+0x24>
    881a:	86 95       	lsr	r24
    881c:	77 95       	ror	r23
    881e:	67 95       	ror	r22
    8820:	93 95       	inc	r25
    8822:	d9 f7       	brne	.-10     	; 0x881a <lround+0x38>
    8824:	61 1d       	adc	r22, r1
    8826:	71 1d       	adc	r23, r1
    8828:	81 1d       	adc	r24, r1
    882a:	3e f4       	brtc	.+14     	; 0x883a <lround+0x58>
    882c:	90 95       	com	r25
    882e:	80 95       	com	r24
    8830:	70 95       	com	r23
    8832:	61 95       	neg	r22
    8834:	7f 4f       	sbci	r23, 0xFF	; 255
    8836:	8f 4f       	sbci	r24, 0xFF	; 255
    8838:	9f 4f       	sbci	r25, 0xFF	; 255
    883a:	08 95       	ret
    883c:	68 94       	set
    883e:	29 cf       	rjmp	.-430    	; 0x8692 <__fp_szero>
    8840:	27 cf       	rjmp	.-434    	; 0x8690 <__fp_zero>

00008842 <__mulsf3>:
    8842:	0b d0       	rcall	.+22     	; 0x885a <__mulsf3x>
    8844:	ca ce       	rjmp	.-620    	; 0x85da <__fp_round>
    8846:	93 de       	rcall	.-730    	; 0x856e <__fp_pscA>
    8848:	28 f0       	brcs	.+10     	; 0x8854 <__mulsf3+0x12>
    884a:	98 de       	rcall	.-720    	; 0x857c <__fp_pscB>
    884c:	18 f0       	brcs	.+6      	; 0x8854 <__mulsf3+0x12>
    884e:	95 23       	and	r25, r21
    8850:	09 f0       	breq	.+2      	; 0x8854 <__mulsf3+0x12>
    8852:	36 ce       	rjmp	.-916    	; 0x84c0 <__fp_inf>
    8854:	64 ce       	rjmp	.-824    	; 0x851e <__fp_nan>
    8856:	11 24       	eor	r1, r1
    8858:	1c cf       	rjmp	.-456    	; 0x8692 <__fp_szero>

0000885a <__mulsf3x>:
    885a:	e1 de       	rcall	.-574    	; 0x861e <__fp_split3>
    885c:	a0 f3       	brcs	.-24     	; 0x8846 <__mulsf3+0x4>

0000885e <__mulsf3_pse>:
    885e:	95 9f       	mul	r25, r21
    8860:	d1 f3       	breq	.-12     	; 0x8856 <__mulsf3+0x14>
    8862:	95 0f       	add	r25, r21
    8864:	50 e0       	ldi	r21, 0x00	; 0
    8866:	55 1f       	adc	r21, r21
    8868:	62 9f       	mul	r22, r18
    886a:	f0 01       	movw	r30, r0
    886c:	72 9f       	mul	r23, r18
    886e:	bb 27       	eor	r27, r27
    8870:	f0 0d       	add	r31, r0
    8872:	b1 1d       	adc	r27, r1
    8874:	63 9f       	mul	r22, r19
    8876:	aa 27       	eor	r26, r26
    8878:	f0 0d       	add	r31, r0
    887a:	b1 1d       	adc	r27, r1
    887c:	aa 1f       	adc	r26, r26
    887e:	64 9f       	mul	r22, r20
    8880:	66 27       	eor	r22, r22
    8882:	b0 0d       	add	r27, r0
    8884:	a1 1d       	adc	r26, r1
    8886:	66 1f       	adc	r22, r22
    8888:	82 9f       	mul	r24, r18
    888a:	22 27       	eor	r18, r18
    888c:	b0 0d       	add	r27, r0
    888e:	a1 1d       	adc	r26, r1
    8890:	62 1f       	adc	r22, r18
    8892:	73 9f       	mul	r23, r19
    8894:	b0 0d       	add	r27, r0
    8896:	a1 1d       	adc	r26, r1
    8898:	62 1f       	adc	r22, r18
    889a:	83 9f       	mul	r24, r19
    889c:	a0 0d       	add	r26, r0
    889e:	61 1d       	adc	r22, r1
    88a0:	22 1f       	adc	r18, r18
    88a2:	74 9f       	mul	r23, r20
    88a4:	33 27       	eor	r19, r19
    88a6:	a0 0d       	add	r26, r0
    88a8:	61 1d       	adc	r22, r1
    88aa:	23 1f       	adc	r18, r19
    88ac:	84 9f       	mul	r24, r20
    88ae:	60 0d       	add	r22, r0
    88b0:	21 1d       	adc	r18, r1
    88b2:	82 2f       	mov	r24, r18
    88b4:	76 2f       	mov	r23, r22
    88b6:	6a 2f       	mov	r22, r26
    88b8:	11 24       	eor	r1, r1
    88ba:	9f 57       	subi	r25, 0x7F	; 127
    88bc:	50 40       	sbci	r21, 0x00	; 0
    88be:	8a f0       	brmi	.+34     	; 0x88e2 <__mulsf3_pse+0x84>
    88c0:	e1 f0       	breq	.+56     	; 0x88fa <__mulsf3_pse+0x9c>
    88c2:	88 23       	and	r24, r24
    88c4:	4a f0       	brmi	.+18     	; 0x88d8 <__mulsf3_pse+0x7a>
    88c6:	ee 0f       	add	r30, r30
    88c8:	ff 1f       	adc	r31, r31
    88ca:	bb 1f       	adc	r27, r27
    88cc:	66 1f       	adc	r22, r22
    88ce:	77 1f       	adc	r23, r23
    88d0:	88 1f       	adc	r24, r24
    88d2:	91 50       	subi	r25, 0x01	; 1
    88d4:	50 40       	sbci	r21, 0x00	; 0
    88d6:	a9 f7       	brne	.-22     	; 0x88c2 <__mulsf3_pse+0x64>
    88d8:	9e 3f       	cpi	r25, 0xFE	; 254
    88da:	51 05       	cpc	r21, r1
    88dc:	70 f0       	brcs	.+28     	; 0x88fa <__mulsf3_pse+0x9c>
    88de:	f0 cd       	rjmp	.-1056   	; 0x84c0 <__fp_inf>
    88e0:	d8 ce       	rjmp	.-592    	; 0x8692 <__fp_szero>
    88e2:	5f 3f       	cpi	r21, 0xFF	; 255
    88e4:	ec f3       	brlt	.-6      	; 0x88e0 <__mulsf3_pse+0x82>
    88e6:	98 3e       	cpi	r25, 0xE8	; 232
    88e8:	dc f3       	brlt	.-10     	; 0x88e0 <__mulsf3_pse+0x82>
    88ea:	86 95       	lsr	r24
    88ec:	77 95       	ror	r23
    88ee:	67 95       	ror	r22
    88f0:	b7 95       	ror	r27
    88f2:	f7 95       	ror	r31
    88f4:	e7 95       	ror	r30
    88f6:	9f 5f       	subi	r25, 0xFF	; 255
    88f8:	c1 f7       	brne	.-16     	; 0x88ea <__mulsf3_pse+0x8c>
    88fa:	fe 2b       	or	r31, r30
    88fc:	88 0f       	add	r24, r24
    88fe:	91 1d       	adc	r25, r1
    8900:	96 95       	lsr	r25
    8902:	87 95       	ror	r24
    8904:	97 f9       	bld	r25, 7
    8906:	08 95       	ret

00008908 <sin>:
    8908:	9f 93       	push	r25
    890a:	40 de       	rcall	.-896    	; 0x858c <__fp_rempio2>
    890c:	0f 90       	pop	r0
    890e:	07 fc       	sbrc	r0, 7
    8910:	ee 5f       	subi	r30, 0xFE	; 254
    8912:	74 ce       	rjmp	.-792    	; 0x85fc <__fp_sinus>
    8914:	11 f4       	brne	.+4      	; 0x891a <sin+0x12>
    8916:	0e f4       	brtc	.+2      	; 0x891a <sin+0x12>
    8918:	02 ce       	rjmp	.-1020   	; 0x851e <__fp_nan>
    891a:	f3 cd       	rjmp	.-1050   	; 0x8502 <__fp_mpack>

0000891c <sqrt>:
    891c:	88 de       	rcall	.-752    	; 0x862e <__fp_splitA>
    891e:	d0 f3       	brcs	.-12     	; 0x8914 <sin+0xc>
    8920:	99 23       	and	r25, r25
    8922:	d9 f3       	breq	.-10     	; 0x891a <sin+0x12>
    8924:	ce f3       	brts	.-14     	; 0x8918 <sin+0x10>
    8926:	9f 57       	subi	r25, 0x7F	; 127
    8928:	55 0b       	sbc	r21, r21
    892a:	87 ff       	sbrs	r24, 7
    892c:	43 d0       	rcall	.+134    	; 0x89b4 <__fp_norm2>
    892e:	00 24       	eor	r0, r0
    8930:	a0 e6       	ldi	r26, 0x60	; 96
    8932:	40 ea       	ldi	r20, 0xA0	; 160
    8934:	90 01       	movw	r18, r0
    8936:	80 58       	subi	r24, 0x80	; 128
    8938:	56 95       	lsr	r21
    893a:	97 95       	ror	r25
    893c:	28 f4       	brcc	.+10     	; 0x8948 <sqrt+0x2c>
    893e:	80 5c       	subi	r24, 0xC0	; 192
    8940:	66 0f       	add	r22, r22
    8942:	77 1f       	adc	r23, r23
    8944:	88 1f       	adc	r24, r24
    8946:	20 f0       	brcs	.+8      	; 0x8950 <sqrt+0x34>
    8948:	26 17       	cp	r18, r22
    894a:	37 07       	cpc	r19, r23
    894c:	48 07       	cpc	r20, r24
    894e:	30 f4       	brcc	.+12     	; 0x895c <sqrt+0x40>
    8950:	62 1b       	sub	r22, r18
    8952:	73 0b       	sbc	r23, r19
    8954:	84 0b       	sbc	r24, r20
    8956:	20 29       	or	r18, r0
    8958:	31 29       	or	r19, r1
    895a:	4a 2b       	or	r20, r26
    895c:	a6 95       	lsr	r26
    895e:	17 94       	ror	r1
    8960:	07 94       	ror	r0
    8962:	20 25       	eor	r18, r0
    8964:	31 25       	eor	r19, r1
    8966:	4a 27       	eor	r20, r26
    8968:	58 f7       	brcc	.-42     	; 0x8940 <sqrt+0x24>
    896a:	66 0f       	add	r22, r22
    896c:	77 1f       	adc	r23, r23
    896e:	88 1f       	adc	r24, r24
    8970:	20 f0       	brcs	.+8      	; 0x897a <sqrt+0x5e>
    8972:	26 17       	cp	r18, r22
    8974:	37 07       	cpc	r19, r23
    8976:	48 07       	cpc	r20, r24
    8978:	30 f4       	brcc	.+12     	; 0x8986 <sqrt+0x6a>
    897a:	62 0b       	sbc	r22, r18
    897c:	73 0b       	sbc	r23, r19
    897e:	84 0b       	sbc	r24, r20
    8980:	20 0d       	add	r18, r0
    8982:	31 1d       	adc	r19, r1
    8984:	41 1d       	adc	r20, r1
    8986:	a0 95       	com	r26
    8988:	81 f7       	brne	.-32     	; 0x896a <sqrt+0x4e>
    898a:	b9 01       	movw	r22, r18
    898c:	84 2f       	mov	r24, r20
    898e:	91 58       	subi	r25, 0x81	; 129
    8990:	88 0f       	add	r24, r24
    8992:	96 95       	lsr	r25
    8994:	87 95       	ror	r24
    8996:	08 95       	ret

00008998 <square>:
    8998:	9b 01       	movw	r18, r22
    899a:	ac 01       	movw	r20, r24
    899c:	52 cf       	rjmp	.-348    	; 0x8842 <__mulsf3>

0000899e <trunc>:
    899e:	61 de       	rcall	.-830    	; 0x8662 <__fp_trunc>
    89a0:	20 f0       	brcs	.+8      	; 0x89aa <trunc+0xc>
    89a2:	9f 37       	cpi	r25, 0x7F	; 127
    89a4:	08 f4       	brcc	.+2      	; 0x89a8 <trunc+0xa>
    89a6:	75 ce       	rjmp	.-790    	; 0x8692 <__fp_szero>
    89a8:	91 cd       	rjmp	.-1246   	; 0x84cc <__fp_mintl>
    89aa:	ab cd       	rjmp	.-1194   	; 0x8502 <__fp_mpack>

000089ac <__unordsf2>:
    89ac:	65 dd       	rcall	.-1334   	; 0x8478 <__fp_cmp>
    89ae:	88 0b       	sbc	r24, r24
    89b0:	99 0b       	sbc	r25, r25
    89b2:	08 95       	ret

000089b4 <__fp_norm2>:
    89b4:	91 50       	subi	r25, 0x01	; 1
    89b6:	50 40       	sbci	r21, 0x00	; 0
    89b8:	66 0f       	add	r22, r22
    89ba:	77 1f       	adc	r23, r23
    89bc:	88 1f       	adc	r24, r24
    89be:	d2 f7       	brpl	.-12     	; 0x89b4 <__fp_norm2>
    89c0:	08 95       	ret

000089c2 <__fp_powsodd>:
    89c2:	9f 93       	push	r25
    89c4:	8f 93       	push	r24
    89c6:	7f 93       	push	r23
    89c8:	6f 93       	push	r22
    89ca:	ff 93       	push	r31
    89cc:	ef 93       	push	r30
    89ce:	9b 01       	movw	r18, r22
    89d0:	ac 01       	movw	r20, r24
    89d2:	37 df       	rcall	.-402    	; 0x8842 <__mulsf3>
    89d4:	ef 91       	pop	r30
    89d6:	ff 91       	pop	r31
    89d8:	a5 dd       	rcall	.-1206   	; 0x8524 <__fp_powser>
    89da:	2f 91       	pop	r18
    89dc:	3f 91       	pop	r19
    89de:	4f 91       	pop	r20
    89e0:	5f 91       	pop	r21
    89e2:	2f cf       	rjmp	.-418    	; 0x8842 <__mulsf3>

000089e4 <__mulsi3>:
    89e4:	62 9f       	mul	r22, r18
    89e6:	d0 01       	movw	r26, r0
    89e8:	73 9f       	mul	r23, r19
    89ea:	f0 01       	movw	r30, r0
    89ec:	82 9f       	mul	r24, r18
    89ee:	e0 0d       	add	r30, r0
    89f0:	f1 1d       	adc	r31, r1
    89f2:	64 9f       	mul	r22, r20
    89f4:	e0 0d       	add	r30, r0
    89f6:	f1 1d       	adc	r31, r1
    89f8:	92 9f       	mul	r25, r18
    89fa:	f0 0d       	add	r31, r0
    89fc:	83 9f       	mul	r24, r19
    89fe:	f0 0d       	add	r31, r0
    8a00:	74 9f       	mul	r23, r20
    8a02:	f0 0d       	add	r31, r0
    8a04:	65 9f       	mul	r22, r21
    8a06:	f0 0d       	add	r31, r0
    8a08:	99 27       	eor	r25, r25
    8a0a:	72 9f       	mul	r23, r18
    8a0c:	b0 0d       	add	r27, r0
    8a0e:	e1 1d       	adc	r30, r1
    8a10:	f9 1f       	adc	r31, r25
    8a12:	63 9f       	mul	r22, r19
    8a14:	b0 0d       	add	r27, r0
    8a16:	e1 1d       	adc	r30, r1
    8a18:	f9 1f       	adc	r31, r25
    8a1a:	bd 01       	movw	r22, r26
    8a1c:	cf 01       	movw	r24, r30
    8a1e:	11 24       	eor	r1, r1
    8a20:	08 95       	ret

00008a22 <__udivmodsi4>:
    8a22:	a1 e2       	ldi	r26, 0x21	; 33
    8a24:	1a 2e       	mov	r1, r26
    8a26:	aa 1b       	sub	r26, r26
    8a28:	bb 1b       	sub	r27, r27
    8a2a:	fd 01       	movw	r30, r26
    8a2c:	0d c0       	rjmp	.+26     	; 0x8a48 <__udivmodsi4_ep>

00008a2e <__udivmodsi4_loop>:
    8a2e:	aa 1f       	adc	r26, r26
    8a30:	bb 1f       	adc	r27, r27
    8a32:	ee 1f       	adc	r30, r30
    8a34:	ff 1f       	adc	r31, r31
    8a36:	a2 17       	cp	r26, r18
    8a38:	b3 07       	cpc	r27, r19
    8a3a:	e4 07       	cpc	r30, r20
    8a3c:	f5 07       	cpc	r31, r21
    8a3e:	20 f0       	brcs	.+8      	; 0x8a48 <__udivmodsi4_ep>
    8a40:	a2 1b       	sub	r26, r18
    8a42:	b3 0b       	sbc	r27, r19
    8a44:	e4 0b       	sbc	r30, r20
    8a46:	f5 0b       	sbc	r31, r21

00008a48 <__udivmodsi4_ep>:
    8a48:	66 1f       	adc	r22, r22
    8a4a:	77 1f       	adc	r23, r23
    8a4c:	88 1f       	adc	r24, r24
    8a4e:	99 1f       	adc	r25, r25
    8a50:	1a 94       	dec	r1
    8a52:	69 f7       	brne	.-38     	; 0x8a2e <__udivmodsi4_loop>
    8a54:	60 95       	com	r22
    8a56:	70 95       	com	r23
    8a58:	80 95       	com	r24
    8a5a:	90 95       	com	r25
    8a5c:	9b 01       	movw	r18, r22
    8a5e:	ac 01       	movw	r20, r24
    8a60:	bd 01       	movw	r22, r26
    8a62:	cf 01       	movw	r24, r30
    8a64:	08 95       	ret

00008a66 <__prologue_saves__>:
    8a66:	2f 92       	push	r2
    8a68:	3f 92       	push	r3
    8a6a:	4f 92       	push	r4
    8a6c:	5f 92       	push	r5
    8a6e:	6f 92       	push	r6
    8a70:	7f 92       	push	r7
    8a72:	8f 92       	push	r8
    8a74:	9f 92       	push	r9
    8a76:	af 92       	push	r10
    8a78:	bf 92       	push	r11
    8a7a:	cf 92       	push	r12
    8a7c:	df 92       	push	r13
    8a7e:	ef 92       	push	r14
    8a80:	ff 92       	push	r15
    8a82:	0f 93       	push	r16
    8a84:	1f 93       	push	r17
    8a86:	cf 93       	push	r28
    8a88:	df 93       	push	r29
    8a8a:	cd b7       	in	r28, 0x3d	; 61
    8a8c:	de b7       	in	r29, 0x3e	; 62
    8a8e:	ca 1b       	sub	r28, r26
    8a90:	db 0b       	sbc	r29, r27
    8a92:	0f b6       	in	r0, 0x3f	; 63
    8a94:	f8 94       	cli
    8a96:	de bf       	out	0x3e, r29	; 62
    8a98:	0f be       	out	0x3f, r0	; 63
    8a9a:	cd bf       	out	0x3d, r28	; 61
    8a9c:	19 94       	eijmp

00008a9e <__epilogue_restores__>:
    8a9e:	2a 88       	ldd	r2, Y+18	; 0x12
    8aa0:	39 88       	ldd	r3, Y+17	; 0x11
    8aa2:	48 88       	ldd	r4, Y+16	; 0x10
    8aa4:	5f 84       	ldd	r5, Y+15	; 0x0f
    8aa6:	6e 84       	ldd	r6, Y+14	; 0x0e
    8aa8:	7d 84       	ldd	r7, Y+13	; 0x0d
    8aaa:	8c 84       	ldd	r8, Y+12	; 0x0c
    8aac:	9b 84       	ldd	r9, Y+11	; 0x0b
    8aae:	aa 84       	ldd	r10, Y+10	; 0x0a
    8ab0:	b9 84       	ldd	r11, Y+9	; 0x09
    8ab2:	c8 84       	ldd	r12, Y+8	; 0x08
    8ab4:	df 80       	ldd	r13, Y+7	; 0x07
    8ab6:	ee 80       	ldd	r14, Y+6	; 0x06
    8ab8:	fd 80       	ldd	r15, Y+5	; 0x05
    8aba:	0c 81       	ldd	r16, Y+4	; 0x04
    8abc:	1b 81       	ldd	r17, Y+3	; 0x03
    8abe:	aa 81       	ldd	r26, Y+2	; 0x02
    8ac0:	b9 81       	ldd	r27, Y+1	; 0x01
    8ac2:	ce 0f       	add	r28, r30
    8ac4:	d1 1d       	adc	r29, r1
    8ac6:	0f b6       	in	r0, 0x3f	; 63
    8ac8:	f8 94       	cli
    8aca:	de bf       	out	0x3e, r29	; 62
    8acc:	0f be       	out	0x3f, r0	; 63
    8ace:	cd bf       	out	0x3d, r28	; 61
    8ad0:	ed 01       	movw	r28, r26
    8ad2:	08 95       	ret

00008ad4 <strtod>:
    8ad4:	8f 92       	push	r8
    8ad6:	9f 92       	push	r9
    8ad8:	af 92       	push	r10
    8ada:	bf 92       	push	r11
    8adc:	cf 92       	push	r12
    8ade:	df 92       	push	r13
    8ae0:	ef 92       	push	r14
    8ae2:	ff 92       	push	r15
    8ae4:	0f 93       	push	r16
    8ae6:	1f 93       	push	r17
    8ae8:	cf 93       	push	r28
    8aea:	df 93       	push	r29
    8aec:	ec 01       	movw	r28, r24
    8aee:	5b 01       	movw	r10, r22
    8af0:	61 15       	cp	r22, r1
    8af2:	71 05       	cpc	r23, r1
    8af4:	19 f0       	breq	.+6      	; 0x8afc <strtod+0x28>
    8af6:	fb 01       	movw	r30, r22
    8af8:	80 83       	st	Z, r24
    8afa:	91 83       	std	Z+1, r25	; 0x01
    8afc:	f9 90       	ld	r15, Y+
    8afe:	8f 2d       	mov	r24, r15
    8b00:	90 e0       	ldi	r25, 0x00	; 0
    8b02:	0e 94 ce 47 	call	0x8f9c	; 0x8f9c <isspace>
    8b06:	89 2b       	or	r24, r25
    8b08:	c9 f7       	brne	.-14     	; 0x8afc <strtod+0x28>
    8b0a:	fd e2       	ldi	r31, 0x2D	; 45
    8b0c:	ff 16       	cp	r15, r31
    8b0e:	21 f4       	brne	.+8      	; 0x8b18 <strtod+0x44>
    8b10:	f9 90       	ld	r15, Y+
    8b12:	ee 24       	eor	r14, r14
    8b14:	e3 94       	inc	r14
    8b16:	05 c0       	rjmp	.+10     	; 0x8b22 <strtod+0x4e>
    8b18:	2b e2       	ldi	r18, 0x2B	; 43
    8b1a:	f2 16       	cp	r15, r18
    8b1c:	09 f4       	brne	.+2      	; 0x8b20 <strtod+0x4c>
    8b1e:	f9 90       	ld	r15, Y+
    8b20:	ee 24       	eor	r14, r14
    8b22:	8e 01       	movw	r16, r28
    8b24:	01 50       	subi	r16, 0x01	; 1
    8b26:	10 40       	sbci	r17, 0x00	; 0
    8b28:	c8 01       	movw	r24, r16
    8b2a:	6b ed       	ldi	r22, 0xDB	; 219
    8b2c:	7c e1       	ldi	r23, 0x1C	; 28
    8b2e:	43 e0       	ldi	r20, 0x03	; 3
    8b30:	50 e0       	ldi	r21, 0x00	; 0
    8b32:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <strncasecmp_P>
    8b36:	89 2b       	or	r24, r25
    8b38:	01 f5       	brne	.+64     	; 0x8b7a <strtod+0xa6>
    8b3a:	8e 01       	movw	r16, r28
    8b3c:	0e 5f       	subi	r16, 0xFE	; 254
    8b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    8b40:	c8 01       	movw	r24, r16
    8b42:	6e ed       	ldi	r22, 0xDE	; 222
    8b44:	7c e1       	ldi	r23, 0x1C	; 28
    8b46:	45 e0       	ldi	r20, 0x05	; 5
    8b48:	50 e0       	ldi	r21, 0x00	; 0
    8b4a:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <strncasecmp_P>
    8b4e:	89 2b       	or	r24, r25
    8b50:	19 f4       	brne	.+6      	; 0x8b58 <strtod+0x84>
    8b52:	8e 01       	movw	r16, r28
    8b54:	09 5f       	subi	r16, 0xF9	; 249
    8b56:	1f 4f       	sbci	r17, 0xFF	; 255
    8b58:	a1 14       	cp	r10, r1
    8b5a:	b1 04       	cpc	r11, r1
    8b5c:	19 f0       	breq	.+6      	; 0x8b64 <strtod+0x90>
    8b5e:	f5 01       	movw	r30, r10
    8b60:	00 83       	st	Z, r16
    8b62:	11 83       	std	Z+1, r17	; 0x01
    8b64:	e0 fc       	sbrc	r14, 0
    8b66:	04 c0       	rjmp	.+8      	; 0x8b70 <strtod+0x9c>
    8b68:	70 e0       	ldi	r23, 0x00	; 0
    8b6a:	90 e0       	ldi	r25, 0x00	; 0
    8b6c:	80 e8       	ldi	r24, 0x80	; 128
    8b6e:	14 c0       	rjmp	.+40     	; 0x8b98 <strtod+0xc4>
    8b70:	70 e0       	ldi	r23, 0x00	; 0
    8b72:	90 e0       	ldi	r25, 0x00	; 0
    8b74:	80 e8       	ldi	r24, 0x80	; 128
    8b76:	6f ef       	ldi	r22, 0xFF	; 255
    8b78:	08 c1       	rjmp	.+528    	; 0x8d8a <strtod+0x2b6>
    8b7a:	c8 01       	movw	r24, r16
    8b7c:	63 ee       	ldi	r22, 0xE3	; 227
    8b7e:	7c e1       	ldi	r23, 0x1C	; 28
    8b80:	43 e0       	ldi	r20, 0x03	; 3
    8b82:	50 e0       	ldi	r21, 0x00	; 0
    8b84:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <strncasecmp_P>
    8b88:	89 2b       	or	r24, r25
    8b8a:	69 f4       	brne	.+26     	; 0x8ba6 <strtod+0xd2>
    8b8c:	a1 14       	cp	r10, r1
    8b8e:	b1 04       	cpc	r11, r1
    8b90:	29 f4       	brne	.+10     	; 0x8b9c <strtod+0xc8>
    8b92:	70 e0       	ldi	r23, 0x00	; 0
    8b94:	90 e0       	ldi	r25, 0x00	; 0
    8b96:	80 ec       	ldi	r24, 0xC0	; 192
    8b98:	6f e7       	ldi	r22, 0x7F	; 127
    8b9a:	f7 c0       	rjmp	.+494    	; 0x8d8a <strtod+0x2b6>
    8b9c:	22 96       	adiw	r28, 0x02	; 2
    8b9e:	f5 01       	movw	r30, r10
    8ba0:	c0 83       	st	Z, r28
    8ba2:	d1 83       	std	Z+1, r29	; 0x01
    8ba4:	f6 cf       	rjmp	.-20     	; 0x8b92 <strtod+0xbe>
    8ba6:	88 24       	eor	r8, r8
    8ba8:	99 24       	eor	r9, r9
    8baa:	40 e0       	ldi	r20, 0x00	; 0
    8bac:	50 e0       	ldi	r21, 0x00	; 0
    8bae:	60 e0       	ldi	r22, 0x00	; 0
    8bb0:	70 e0       	ldi	r23, 0x00	; 0
    8bb2:	ef 2d       	mov	r30, r15
    8bb4:	e0 53       	subi	r30, 0x30	; 48
    8bb6:	ea 30       	cpi	r30, 0x0A	; 10
    8bb8:	a0 f5       	brcc	.+104    	; 0x8c22 <strtod+0x14e>
    8bba:	f2 e0       	ldi	r31, 0x02	; 2
    8bbc:	ef 2a       	or	r14, r31
    8bbe:	8e 2d       	mov	r24, r14
    8bc0:	90 e0       	ldi	r25, 0x00	; 0
    8bc2:	9c 01       	movw	r18, r24
    8bc4:	28 70       	andi	r18, 0x08	; 8
    8bc6:	30 70       	andi	r19, 0x00	; 0
    8bc8:	e2 fe       	sbrs	r14, 2
    8bca:	06 c0       	rjmp	.+12     	; 0x8bd8 <strtod+0x104>
    8bcc:	23 2b       	or	r18, r19
    8bce:	79 f5       	brne	.+94     	; 0x8c2e <strtod+0x15a>
    8bd0:	08 94       	sec
    8bd2:	81 1c       	adc	r8, r1
    8bd4:	91 1c       	adc	r9, r1
    8bd6:	2b c0       	rjmp	.+86     	; 0x8c2e <strtod+0x15a>
    8bd8:	23 2b       	or	r18, r19
    8bda:	19 f0       	breq	.+6      	; 0x8be2 <strtod+0x10e>
    8bdc:	08 94       	sec
    8bde:	81 08       	sbc	r8, r1
    8be0:	91 08       	sbc	r9, r1
    8be2:	db 01       	movw	r26, r22
    8be4:	ca 01       	movw	r24, r20
    8be6:	12 e0       	ldi	r17, 0x02	; 2
    8be8:	88 0f       	add	r24, r24
    8bea:	99 1f       	adc	r25, r25
    8bec:	aa 1f       	adc	r26, r26
    8bee:	bb 1f       	adc	r27, r27
    8bf0:	1a 95       	dec	r17
    8bf2:	d1 f7       	brne	.-12     	; 0x8be8 <strtod+0x114>
    8bf4:	48 0f       	add	r20, r24
    8bf6:	59 1f       	adc	r21, r25
    8bf8:	6a 1f       	adc	r22, r26
    8bfa:	7b 1f       	adc	r23, r27
    8bfc:	44 0f       	add	r20, r20
    8bfe:	55 1f       	adc	r21, r21
    8c00:	66 1f       	adc	r22, r22
    8c02:	77 1f       	adc	r23, r23
    8c04:	4e 0f       	add	r20, r30
    8c06:	51 1d       	adc	r21, r1
    8c08:	61 1d       	adc	r22, r1
    8c0a:	71 1d       	adc	r23, r1
    8c0c:	48 39       	cpi	r20, 0x98	; 152
    8c0e:	29 e9       	ldi	r18, 0x99	; 153
    8c10:	52 07       	cpc	r21, r18
    8c12:	29 e9       	ldi	r18, 0x99	; 153
    8c14:	62 07       	cpc	r22, r18
    8c16:	29 e1       	ldi	r18, 0x19	; 25
    8c18:	72 07       	cpc	r23, r18
    8c1a:	48 f0       	brcs	.+18     	; 0x8c2e <strtod+0x15a>
    8c1c:	84 e0       	ldi	r24, 0x04	; 4
    8c1e:	e8 2a       	or	r14, r24
    8c20:	06 c0       	rjmp	.+12     	; 0x8c2e <strtod+0x15a>
    8c22:	ee 3f       	cpi	r30, 0xFE	; 254
    8c24:	31 f4       	brne	.+12     	; 0x8c32 <strtod+0x15e>
    8c26:	e3 fc       	sbrc	r14, 3
    8c28:	39 c0       	rjmp	.+114    	; 0x8c9c <strtod+0x1c8>
    8c2a:	98 e0       	ldi	r25, 0x08	; 8
    8c2c:	e9 2a       	or	r14, r25
    8c2e:	f9 90       	ld	r15, Y+
    8c30:	c0 cf       	rjmp	.-128    	; 0x8bb2 <strtod+0xde>
    8c32:	e5 33       	cpi	r30, 0x35	; 53
    8c34:	11 f0       	breq	.+4      	; 0x8c3a <strtod+0x166>
    8c36:	e5 31       	cpi	r30, 0x15	; 21
    8c38:	89 f5       	brne	.+98     	; 0x8c9c <strtod+0x1c8>
    8c3a:	29 91       	ld	r18, Y+
    8c3c:	2d 32       	cpi	r18, 0x2D	; 45
    8c3e:	19 f4       	brne	.+6      	; 0x8c46 <strtod+0x172>
    8c40:	e0 e1       	ldi	r30, 0x10	; 16
    8c42:	ee 2a       	or	r14, r30
    8c44:	05 c0       	rjmp	.+10     	; 0x8c50 <strtod+0x17c>
    8c46:	2b 32       	cpi	r18, 0x2B	; 43
    8c48:	19 f0       	breq	.+6      	; 0x8c50 <strtod+0x17c>
    8c4a:	81 e0       	ldi	r24, 0x01	; 1
    8c4c:	90 e0       	ldi	r25, 0x00	; 0
    8c4e:	03 c0       	rjmp	.+6      	; 0x8c56 <strtod+0x182>
    8c50:	29 91       	ld	r18, Y+
    8c52:	82 e0       	ldi	r24, 0x02	; 2
    8c54:	90 e0       	ldi	r25, 0x00	; 0
    8c56:	e2 2f       	mov	r30, r18
    8c58:	e0 53       	subi	r30, 0x30	; 48
    8c5a:	ea 30       	cpi	r30, 0x0A	; 10
    8c5c:	18 f0       	brcs	.+6      	; 0x8c64 <strtod+0x190>
    8c5e:	c8 1b       	sub	r28, r24
    8c60:	d9 0b       	sbc	r29, r25
    8c62:	1c c0       	rjmp	.+56     	; 0x8c9c <strtod+0x1c8>
    8c64:	20 e0       	ldi	r18, 0x00	; 0
    8c66:	30 e0       	ldi	r19, 0x00	; 0
    8c68:	fc e0       	ldi	r31, 0x0C	; 12
    8c6a:	20 38       	cpi	r18, 0x80	; 128
    8c6c:	3f 07       	cpc	r19, r31
    8c6e:	5c f4       	brge	.+22     	; 0x8c86 <strtod+0x1b2>
    8c70:	c9 01       	movw	r24, r18
    8c72:	88 0f       	add	r24, r24
    8c74:	99 1f       	adc	r25, r25
    8c76:	88 0f       	add	r24, r24
    8c78:	99 1f       	adc	r25, r25
    8c7a:	28 0f       	add	r18, r24
    8c7c:	39 1f       	adc	r19, r25
    8c7e:	22 0f       	add	r18, r18
    8c80:	33 1f       	adc	r19, r19
    8c82:	2e 0f       	add	r18, r30
    8c84:	31 1d       	adc	r19, r1
    8c86:	e9 91       	ld	r30, Y+
    8c88:	e0 53       	subi	r30, 0x30	; 48
    8c8a:	ea 30       	cpi	r30, 0x0A	; 10
    8c8c:	68 f3       	brcs	.-38     	; 0x8c68 <strtod+0x194>
    8c8e:	e4 fe       	sbrs	r14, 4
    8c90:	03 c0       	rjmp	.+6      	; 0x8c98 <strtod+0x1c4>
    8c92:	30 95       	com	r19
    8c94:	21 95       	neg	r18
    8c96:	3f 4f       	sbci	r19, 0xFF	; 255
    8c98:	82 0e       	add	r8, r18
    8c9a:	93 1e       	adc	r9, r19
    8c9c:	ce 2c       	mov	r12, r14
    8c9e:	dd 24       	eor	r13, r13
    8ca0:	e1 fe       	sbrs	r14, 1
    8ca2:	07 c0       	rjmp	.+14     	; 0x8cb2 <strtod+0x1de>
    8ca4:	a1 14       	cp	r10, r1
    8ca6:	b1 04       	cpc	r11, r1
    8ca8:	21 f0       	breq	.+8      	; 0x8cb2 <strtod+0x1de>
    8caa:	21 97       	sbiw	r28, 0x01	; 1
    8cac:	f5 01       	movw	r30, r10
    8cae:	c0 83       	st	Z, r28
    8cb0:	d1 83       	std	Z+1, r29	; 0x01
    8cb2:	cb 01       	movw	r24, r22
    8cb4:	ba 01       	movw	r22, r20
    8cb6:	0e 94 ff 41 	call	0x83fe	; 0x83fe <__floatunsisf>
    8cba:	7b 01       	movw	r14, r22
    8cbc:	8c 01       	movw	r16, r24
    8cbe:	f3 e0       	ldi	r31, 0x03	; 3
    8cc0:	cf 22       	and	r12, r31
    8cc2:	dd 24       	eor	r13, r13
    8cc4:	23 e0       	ldi	r18, 0x03	; 3
    8cc6:	c2 16       	cp	r12, r18
    8cc8:	d1 04       	cpc	r13, r1
    8cca:	21 f4       	brne	.+8      	; 0x8cd4 <strtod+0x200>
    8ccc:	17 fb       	bst	r17, 7
    8cce:	10 95       	com	r17
    8cd0:	17 f9       	bld	r17, 7
    8cd2:	10 95       	com	r17
    8cd4:	57 01       	movw	r10, r14
    8cd6:	68 01       	movw	r12, r16
    8cd8:	c8 01       	movw	r24, r16
    8cda:	b7 01       	movw	r22, r14
    8cdc:	20 e0       	ldi	r18, 0x00	; 0
    8cde:	30 e0       	ldi	r19, 0x00	; 0
    8ce0:	40 e0       	ldi	r20, 0x00	; 0
    8ce2:	50 e0       	ldi	r21, 0x00	; 0
    8ce4:	0e 94 5f 41 	call	0x82be	; 0x82be <__cmpsf2>
    8ce8:	88 23       	and	r24, r24
    8cea:	09 f4       	brne	.+2      	; 0x8cee <strtod+0x21a>
    8cec:	4a c0       	rjmp	.+148    	; 0x8d82 <strtod+0x2ae>
    8cee:	97 fe       	sbrs	r9, 7
    8cf0:	0d c0       	rjmp	.+26     	; 0x8d0c <strtod+0x238>
    8cf2:	2a ef       	ldi	r18, 0xFA	; 250
    8cf4:	e2 2e       	mov	r14, r18
    8cf6:	2c e1       	ldi	r18, 0x1C	; 28
    8cf8:	f2 2e       	mov	r15, r18
    8cfa:	90 94       	com	r9
    8cfc:	81 94       	neg	r8
    8cfe:	91 08       	sbc	r9, r1
    8d00:	93 94       	inc	r9
    8d02:	c0 e2       	ldi	r28, 0x20	; 32
    8d04:	d0 e0       	ldi	r29, 0x00	; 0
    8d06:	00 e0       	ldi	r16, 0x00	; 0
    8d08:	10 e0       	ldi	r17, 0x00	; 0
    8d0a:	12 c0       	rjmp	.+36     	; 0x8d30 <strtod+0x25c>
    8d0c:	92 e1       	ldi	r25, 0x12	; 18
    8d0e:	e9 2e       	mov	r14, r25
    8d10:	9d e1       	ldi	r25, 0x1D	; 29
    8d12:	f9 2e       	mov	r15, r25
    8d14:	f6 cf       	rjmp	.-20     	; 0x8d02 <strtod+0x22e>
    8d16:	f7 01       	movw	r30, r14
    8d18:	25 91       	lpm	r18, Z+
    8d1a:	35 91       	lpm	r19, Z+
    8d1c:	45 91       	lpm	r20, Z+
    8d1e:	54 91       	lpm	r21, Z+
    8d20:	c6 01       	movw	r24, r12
    8d22:	b5 01       	movw	r22, r10
    8d24:	0e 94 21 44 	call	0x8842	; 0x8842 <__mulsf3>
    8d28:	5b 01       	movw	r10, r22
    8d2a:	6c 01       	movw	r12, r24
    8d2c:	8c 1a       	sub	r8, r28
    8d2e:	9d 0a       	sbc	r9, r29
    8d30:	8c 16       	cp	r8, r28
    8d32:	9d 06       	cpc	r9, r29
    8d34:	84 f7       	brge	.-32     	; 0x8d16 <strtod+0x242>
    8d36:	d5 95       	asr	r29
    8d38:	c7 95       	ror	r28
    8d3a:	0f 5f       	subi	r16, 0xFF	; 255
    8d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    8d3e:	06 30       	cpi	r16, 0x06	; 6
    8d40:	11 05       	cpc	r17, r1
    8d42:	29 f0       	breq	.+10     	; 0x8d4e <strtod+0x27a>
    8d44:	8c ef       	ldi	r24, 0xFC	; 252
    8d46:	9f ef       	ldi	r25, 0xFF	; 255
    8d48:	e8 0e       	add	r14, r24
    8d4a:	f9 1e       	adc	r15, r25
    8d4c:	f1 cf       	rjmp	.-30     	; 0x8d30 <strtod+0x25c>
    8d4e:	c5 01       	movw	r24, r10
    8d50:	d6 01       	movw	r26, r12
    8d52:	7c 01       	movw	r14, r24
    8d54:	8d 01       	movw	r16, r26
    8d56:	8c 2d       	mov	r24, r12
    8d58:	88 0f       	add	r24, r24
    8d5a:	8d 2d       	mov	r24, r13
    8d5c:	88 1f       	adc	r24, r24
    8d5e:	8f 3f       	cpi	r24, 0xFF	; 255
    8d60:	51 f0       	breq	.+20     	; 0x8d76 <strtod+0x2a2>
    8d62:	c6 01       	movw	r24, r12
    8d64:	b5 01       	movw	r22, r10
    8d66:	20 e0       	ldi	r18, 0x00	; 0
    8d68:	30 e0       	ldi	r19, 0x00	; 0
    8d6a:	40 e0       	ldi	r20, 0x00	; 0
    8d6c:	50 e0       	ldi	r21, 0x00	; 0
    8d6e:	0e 94 5f 41 	call	0x82be	; 0x82be <__cmpsf2>
    8d72:	88 23       	and	r24, r24
    8d74:	31 f4       	brne	.+12     	; 0x8d82 <strtod+0x2ae>
    8d76:	82 e2       	ldi	r24, 0x22	; 34
    8d78:	90 e0       	ldi	r25, 0x00	; 0
    8d7a:	80 93 d9 25 	sts	0x25D9, r24
    8d7e:	90 93 da 25 	sts	0x25DA, r25
    8d82:	7e 2d       	mov	r23, r14
    8d84:	9f 2d       	mov	r25, r15
    8d86:	80 2f       	mov	r24, r16
    8d88:	61 2f       	mov	r22, r17
    8d8a:	27 2f       	mov	r18, r23
    8d8c:	39 2f       	mov	r19, r25
    8d8e:	48 2f       	mov	r20, r24
    8d90:	56 2f       	mov	r21, r22
    8d92:	b9 01       	movw	r22, r18
    8d94:	ca 01       	movw	r24, r20
    8d96:	df 91       	pop	r29
    8d98:	cf 91       	pop	r28
    8d9a:	1f 91       	pop	r17
    8d9c:	0f 91       	pop	r16
    8d9e:	ff 90       	pop	r15
    8da0:	ef 90       	pop	r14
    8da2:	df 90       	pop	r13
    8da4:	cf 90       	pop	r12
    8da6:	bf 90       	pop	r11
    8da8:	af 90       	pop	r10
    8daa:	9f 90       	pop	r9
    8dac:	8f 90       	pop	r8
    8dae:	08 95       	ret

00008db0 <atoi>:
    8db0:	fc 01       	movw	r30, r24
    8db2:	88 27       	eor	r24, r24
    8db4:	99 27       	eor	r25, r25
    8db6:	e8 94       	clt
    8db8:	21 91       	ld	r18, Z+
    8dba:	20 32       	cpi	r18, 0x20	; 32
    8dbc:	e9 f3       	breq	.-6      	; 0x8db8 <atoi+0x8>
    8dbe:	29 30       	cpi	r18, 0x09	; 9
    8dc0:	10 f0       	brcs	.+4      	; 0x8dc6 <atoi+0x16>
    8dc2:	2e 30       	cpi	r18, 0x0E	; 14
    8dc4:	c8 f3       	brcs	.-14     	; 0x8db8 <atoi+0x8>
    8dc6:	2b 32       	cpi	r18, 0x2B	; 43
    8dc8:	41 f0       	breq	.+16     	; 0x8dda <atoi+0x2a>
    8dca:	2d 32       	cpi	r18, 0x2D	; 45
    8dcc:	39 f4       	brne	.+14     	; 0x8ddc <atoi+0x2c>
    8dce:	68 94       	set
    8dd0:	04 c0       	rjmp	.+8      	; 0x8dda <atoi+0x2a>
    8dd2:	0e 94 0c 48 	call	0x9018	; 0x9018 <__mulhi_const_10>
    8dd6:	82 0f       	add	r24, r18
    8dd8:	91 1d       	adc	r25, r1
    8dda:	21 91       	ld	r18, Z+
    8ddc:	20 53       	subi	r18, 0x30	; 48
    8dde:	2a 30       	cpi	r18, 0x0A	; 10
    8de0:	c0 f3       	brcs	.-16     	; 0x8dd2 <atoi+0x22>
    8de2:	1e f4       	brtc	.+6      	; 0x8dea <atoi+0x3a>
    8de4:	90 95       	com	r25
    8de6:	81 95       	neg	r24
    8de8:	9f 4f       	sbci	r25, 0xFF	; 255
    8dea:	08 95       	ret

00008dec <__ftoa_engine>:
    8dec:	28 30       	cpi	r18, 0x08	; 8
    8dee:	08 f0       	brcs	.+2      	; 0x8df2 <__ftoa_engine+0x6>
    8df0:	27 e0       	ldi	r18, 0x07	; 7
    8df2:	33 27       	eor	r19, r19
    8df4:	da 01       	movw	r26, r20
    8df6:	99 0f       	add	r25, r25
    8df8:	31 1d       	adc	r19, r1
    8dfa:	87 fd       	sbrc	r24, 7
    8dfc:	91 60       	ori	r25, 0x01	; 1
    8dfe:	00 96       	adiw	r24, 0x00	; 0
    8e00:	61 05       	cpc	r22, r1
    8e02:	71 05       	cpc	r23, r1
    8e04:	39 f4       	brne	.+14     	; 0x8e14 <__ftoa_engine+0x28>
    8e06:	32 60       	ori	r19, 0x02	; 2
    8e08:	2e 5f       	subi	r18, 0xFE	; 254
    8e0a:	3d 93       	st	X+, r19
    8e0c:	30 e3       	ldi	r19, 0x30	; 48
    8e0e:	2a 95       	dec	r18
    8e10:	e1 f7       	brne	.-8      	; 0x8e0a <__ftoa_engine+0x1e>
    8e12:	08 95       	ret
    8e14:	9f 3f       	cpi	r25, 0xFF	; 255
    8e16:	30 f0       	brcs	.+12     	; 0x8e24 <__ftoa_engine+0x38>
    8e18:	80 38       	cpi	r24, 0x80	; 128
    8e1a:	71 05       	cpc	r23, r1
    8e1c:	61 05       	cpc	r22, r1
    8e1e:	09 f0       	breq	.+2      	; 0x8e22 <__ftoa_engine+0x36>
    8e20:	3c 5f       	subi	r19, 0xFC	; 252
    8e22:	3c 5f       	subi	r19, 0xFC	; 252
    8e24:	3d 93       	st	X+, r19
    8e26:	91 30       	cpi	r25, 0x01	; 1
    8e28:	08 f0       	brcs	.+2      	; 0x8e2c <__ftoa_engine+0x40>
    8e2a:	80 68       	ori	r24, 0x80	; 128
    8e2c:	91 1d       	adc	r25, r1
    8e2e:	df 93       	push	r29
    8e30:	cf 93       	push	r28
    8e32:	1f 93       	push	r17
    8e34:	0f 93       	push	r16
    8e36:	ff 92       	push	r15
    8e38:	ef 92       	push	r14
    8e3a:	19 2f       	mov	r17, r25
    8e3c:	98 7f       	andi	r25, 0xF8	; 248
    8e3e:	96 95       	lsr	r25
    8e40:	e9 2f       	mov	r30, r25
    8e42:	96 95       	lsr	r25
    8e44:	96 95       	lsr	r25
    8e46:	e9 0f       	add	r30, r25
    8e48:	ff 27       	eor	r31, r31
    8e4a:	e0 59       	subi	r30, 0x90	; 144
    8e4c:	f2 4e       	sbci	r31, 0xE2	; 226
    8e4e:	99 27       	eor	r25, r25
    8e50:	33 27       	eor	r19, r19
    8e52:	ee 24       	eor	r14, r14
    8e54:	ff 24       	eor	r15, r15
    8e56:	a7 01       	movw	r20, r14
    8e58:	e7 01       	movw	r28, r14
    8e5a:	05 90       	lpm	r0, Z+
    8e5c:	08 94       	sec
    8e5e:	07 94       	ror	r0
    8e60:	28 f4       	brcc	.+10     	; 0x8e6c <__ftoa_engine+0x80>
    8e62:	36 0f       	add	r19, r22
    8e64:	e7 1e       	adc	r14, r23
    8e66:	f8 1e       	adc	r15, r24
    8e68:	49 1f       	adc	r20, r25
    8e6a:	51 1d       	adc	r21, r1
    8e6c:	66 0f       	add	r22, r22
    8e6e:	77 1f       	adc	r23, r23
    8e70:	88 1f       	adc	r24, r24
    8e72:	99 1f       	adc	r25, r25
    8e74:	06 94       	lsr	r0
    8e76:	a1 f7       	brne	.-24     	; 0x8e60 <__ftoa_engine+0x74>
    8e78:	05 90       	lpm	r0, Z+
    8e7a:	07 94       	ror	r0
    8e7c:	28 f4       	brcc	.+10     	; 0x8e88 <__ftoa_engine+0x9c>
    8e7e:	e7 0e       	add	r14, r23
    8e80:	f8 1e       	adc	r15, r24
    8e82:	49 1f       	adc	r20, r25
    8e84:	56 1f       	adc	r21, r22
    8e86:	c1 1d       	adc	r28, r1
    8e88:	77 0f       	add	r23, r23
    8e8a:	88 1f       	adc	r24, r24
    8e8c:	99 1f       	adc	r25, r25
    8e8e:	66 1f       	adc	r22, r22
    8e90:	06 94       	lsr	r0
    8e92:	a1 f7       	brne	.-24     	; 0x8e7c <__ftoa_engine+0x90>
    8e94:	05 90       	lpm	r0, Z+
    8e96:	07 94       	ror	r0
    8e98:	28 f4       	brcc	.+10     	; 0x8ea4 <__ftoa_engine+0xb8>
    8e9a:	f8 0e       	add	r15, r24
    8e9c:	49 1f       	adc	r20, r25
    8e9e:	56 1f       	adc	r21, r22
    8ea0:	c7 1f       	adc	r28, r23
    8ea2:	d1 1d       	adc	r29, r1
    8ea4:	88 0f       	add	r24, r24
    8ea6:	99 1f       	adc	r25, r25
    8ea8:	66 1f       	adc	r22, r22
    8eaa:	77 1f       	adc	r23, r23
    8eac:	06 94       	lsr	r0
    8eae:	a1 f7       	brne	.-24     	; 0x8e98 <__ftoa_engine+0xac>
    8eb0:	05 90       	lpm	r0, Z+
    8eb2:	07 94       	ror	r0
    8eb4:	20 f4       	brcc	.+8      	; 0x8ebe <__ftoa_engine+0xd2>
    8eb6:	49 0f       	add	r20, r25
    8eb8:	56 1f       	adc	r21, r22
    8eba:	c7 1f       	adc	r28, r23
    8ebc:	d8 1f       	adc	r29, r24
    8ebe:	99 0f       	add	r25, r25
    8ec0:	66 1f       	adc	r22, r22
    8ec2:	77 1f       	adc	r23, r23
    8ec4:	88 1f       	adc	r24, r24
    8ec6:	06 94       	lsr	r0
    8ec8:	a9 f7       	brne	.-22     	; 0x8eb4 <__ftoa_engine+0xc8>
    8eca:	84 91       	lpm	r24, Z+
    8ecc:	10 95       	com	r17
    8ece:	17 70       	andi	r17, 0x07	; 7
    8ed0:	41 f0       	breq	.+16     	; 0x8ee2 <__ftoa_engine+0xf6>
    8ed2:	d6 95       	lsr	r29
    8ed4:	c7 95       	ror	r28
    8ed6:	57 95       	ror	r21
    8ed8:	47 95       	ror	r20
    8eda:	f7 94       	ror	r15
    8edc:	e7 94       	ror	r14
    8ede:	1a 95       	dec	r17
    8ee0:	c1 f7       	brne	.-16     	; 0x8ed2 <__ftoa_engine+0xe6>
    8ee2:	e6 e1       	ldi	r30, 0x16	; 22
    8ee4:	fd e1       	ldi	r31, 0x1D	; 29
    8ee6:	68 94       	set
    8ee8:	15 90       	lpm	r1, Z+
    8eea:	15 91       	lpm	r17, Z+
    8eec:	35 91       	lpm	r19, Z+
    8eee:	65 91       	lpm	r22, Z+
    8ef0:	95 91       	lpm	r25, Z+
    8ef2:	05 90       	lpm	r0, Z+
    8ef4:	7f e2       	ldi	r23, 0x2F	; 47
    8ef6:	73 95       	inc	r23
    8ef8:	e1 18       	sub	r14, r1
    8efa:	f1 0a       	sbc	r15, r17
    8efc:	43 0b       	sbc	r20, r19
    8efe:	56 0b       	sbc	r21, r22
    8f00:	c9 0b       	sbc	r28, r25
    8f02:	d0 09       	sbc	r29, r0
    8f04:	c0 f7       	brcc	.-16     	; 0x8ef6 <__ftoa_engine+0x10a>
    8f06:	e1 0c       	add	r14, r1
    8f08:	f1 1e       	adc	r15, r17
    8f0a:	43 1f       	adc	r20, r19
    8f0c:	56 1f       	adc	r21, r22
    8f0e:	c9 1f       	adc	r28, r25
    8f10:	d0 1d       	adc	r29, r0
    8f12:	7e f4       	brtc	.+30     	; 0x8f32 <__ftoa_engine+0x146>
    8f14:	70 33       	cpi	r23, 0x30	; 48
    8f16:	11 f4       	brne	.+4      	; 0x8f1c <__ftoa_engine+0x130>
    8f18:	8a 95       	dec	r24
    8f1a:	e6 cf       	rjmp	.-52     	; 0x8ee8 <__ftoa_engine+0xfc>
    8f1c:	e8 94       	clt
    8f1e:	01 50       	subi	r16, 0x01	; 1
    8f20:	30 f0       	brcs	.+12     	; 0x8f2e <__ftoa_engine+0x142>
    8f22:	08 0f       	add	r16, r24
    8f24:	0a f4       	brpl	.+2      	; 0x8f28 <__ftoa_engine+0x13c>
    8f26:	00 27       	eor	r16, r16
    8f28:	02 17       	cp	r16, r18
    8f2a:	08 f4       	brcc	.+2      	; 0x8f2e <__ftoa_engine+0x142>
    8f2c:	20 2f       	mov	r18, r16
    8f2e:	23 95       	inc	r18
    8f30:	02 2f       	mov	r16, r18
    8f32:	7a 33       	cpi	r23, 0x3A	; 58
    8f34:	28 f0       	brcs	.+10     	; 0x8f40 <__ftoa_engine+0x154>
    8f36:	79 e3       	ldi	r23, 0x39	; 57
    8f38:	7d 93       	st	X+, r23
    8f3a:	2a 95       	dec	r18
    8f3c:	e9 f7       	brne	.-6      	; 0x8f38 <__ftoa_engine+0x14c>
    8f3e:	10 c0       	rjmp	.+32     	; 0x8f60 <__ftoa_engine+0x174>
    8f40:	7d 93       	st	X+, r23
    8f42:	2a 95       	dec	r18
    8f44:	89 f6       	brne	.-94     	; 0x8ee8 <__ftoa_engine+0xfc>
    8f46:	06 94       	lsr	r0
    8f48:	97 95       	ror	r25
    8f4a:	67 95       	ror	r22
    8f4c:	37 95       	ror	r19
    8f4e:	17 95       	ror	r17
    8f50:	17 94       	ror	r1
    8f52:	e1 18       	sub	r14, r1
    8f54:	f1 0a       	sbc	r15, r17
    8f56:	43 0b       	sbc	r20, r19
    8f58:	56 0b       	sbc	r21, r22
    8f5a:	c9 0b       	sbc	r28, r25
    8f5c:	d0 09       	sbc	r29, r0
    8f5e:	98 f0       	brcs	.+38     	; 0x8f86 <__ftoa_engine+0x19a>
    8f60:	23 95       	inc	r18
    8f62:	7e 91       	ld	r23, -X
    8f64:	73 95       	inc	r23
    8f66:	7a 33       	cpi	r23, 0x3A	; 58
    8f68:	08 f0       	brcs	.+2      	; 0x8f6c <__ftoa_engine+0x180>
    8f6a:	70 e3       	ldi	r23, 0x30	; 48
    8f6c:	7c 93       	st	X, r23
    8f6e:	20 13       	cpse	r18, r16
    8f70:	b8 f7       	brcc	.-18     	; 0x8f60 <__ftoa_engine+0x174>
    8f72:	7e 91       	ld	r23, -X
    8f74:	70 61       	ori	r23, 0x10	; 16
    8f76:	7d 93       	st	X+, r23
    8f78:	30 f0       	brcs	.+12     	; 0x8f86 <__ftoa_engine+0x19a>
    8f7a:	83 95       	inc	r24
    8f7c:	71 e3       	ldi	r23, 0x31	; 49
    8f7e:	7d 93       	st	X+, r23
    8f80:	70 e3       	ldi	r23, 0x30	; 48
    8f82:	2a 95       	dec	r18
    8f84:	e1 f7       	brne	.-8      	; 0x8f7e <__ftoa_engine+0x192>
    8f86:	11 24       	eor	r1, r1
    8f88:	ef 90       	pop	r14
    8f8a:	ff 90       	pop	r15
    8f8c:	0f 91       	pop	r16
    8f8e:	1f 91       	pop	r17
    8f90:	cf 91       	pop	r28
    8f92:	df 91       	pop	r29
    8f94:	99 27       	eor	r25, r25
    8f96:	87 fd       	sbrc	r24, 7
    8f98:	90 95       	com	r25
    8f9a:	08 95       	ret

00008f9c <isspace>:
    8f9c:	91 11       	cpse	r25, r1
    8f9e:	29 c1       	rjmp	.+594    	; 0x91f2 <__ctype_isfalse>
    8fa0:	80 32       	cpi	r24, 0x20	; 32
    8fa2:	19 f0       	breq	.+6      	; 0x8faa <isspace+0xe>
    8fa4:	89 50       	subi	r24, 0x09	; 9
    8fa6:	85 50       	subi	r24, 0x05	; 5
    8fa8:	d0 f7       	brcc	.-12     	; 0x8f9e <isspace+0x2>
    8faa:	08 95       	ret

00008fac <toupper>:
    8fac:	91 11       	cpse	r25, r1
    8fae:	08 95       	ret
    8fb0:	81 56       	subi	r24, 0x61	; 97
    8fb2:	8a 51       	subi	r24, 0x1A	; 26
    8fb4:	08 f4       	brcc	.+2      	; 0x8fb8 <toupper+0xc>
    8fb6:	80 52       	subi	r24, 0x20	; 32
    8fb8:	85 58       	subi	r24, 0x85	; 133
    8fba:	08 95       	ret

00008fbc <strncasecmp_P>:
    8fbc:	fb 01       	movw	r30, r22
    8fbe:	dc 01       	movw	r26, r24
    8fc0:	41 50       	subi	r20, 0x01	; 1
    8fc2:	50 40       	sbci	r21, 0x00	; 0
    8fc4:	88 f0       	brcs	.+34     	; 0x8fe8 <strncasecmp_P+0x2c>
    8fc6:	8d 91       	ld	r24, X+
    8fc8:	81 34       	cpi	r24, 0x41	; 65
    8fca:	1c f0       	brlt	.+6      	; 0x8fd2 <strncasecmp_P+0x16>
    8fcc:	8b 35       	cpi	r24, 0x5B	; 91
    8fce:	0c f4       	brge	.+2      	; 0x8fd2 <strncasecmp_P+0x16>
    8fd0:	80 5e       	subi	r24, 0xE0	; 224
    8fd2:	65 91       	lpm	r22, Z+
    8fd4:	61 34       	cpi	r22, 0x41	; 65
    8fd6:	1c f0       	brlt	.+6      	; 0x8fde <strncasecmp_P+0x22>
    8fd8:	6b 35       	cpi	r22, 0x5B	; 91
    8fda:	0c f4       	brge	.+2      	; 0x8fde <strncasecmp_P+0x22>
    8fdc:	60 5e       	subi	r22, 0xE0	; 224
    8fde:	86 1b       	sub	r24, r22
    8fe0:	61 11       	cpse	r22, r1
    8fe2:	71 f3       	breq	.-36     	; 0x8fc0 <strncasecmp_P+0x4>
    8fe4:	99 0b       	sbc	r25, r25
    8fe6:	08 95       	ret
    8fe8:	88 1b       	sub	r24, r24
    8fea:	fc cf       	rjmp	.-8      	; 0x8fe4 <strncasecmp_P+0x28>

00008fec <strnlen_P>:
    8fec:	fc 01       	movw	r30, r24
    8fee:	05 90       	lpm	r0, Z+
    8ff0:	61 50       	subi	r22, 0x01	; 1
    8ff2:	70 40       	sbci	r23, 0x00	; 0
    8ff4:	01 10       	cpse	r0, r1
    8ff6:	d8 f7       	brcc	.-10     	; 0x8fee <strnlen_P+0x2>
    8ff8:	80 95       	com	r24
    8ffa:	90 95       	com	r25
    8ffc:	8e 0f       	add	r24, r30
    8ffe:	9f 1f       	adc	r25, r31
    9000:	08 95       	ret

00009002 <strnlen>:
    9002:	fc 01       	movw	r30, r24
    9004:	61 50       	subi	r22, 0x01	; 1
    9006:	70 40       	sbci	r23, 0x00	; 0
    9008:	01 90       	ld	r0, Z+
    900a:	01 10       	cpse	r0, r1
    900c:	d8 f7       	brcc	.-10     	; 0x9004 <strnlen+0x2>
    900e:	80 95       	com	r24
    9010:	90 95       	com	r25
    9012:	8e 0f       	add	r24, r30
    9014:	9f 1f       	adc	r25, r31
    9016:	08 95       	ret

00009018 <__mulhi_const_10>:
    9018:	7a e0       	ldi	r23, 0x0A	; 10
    901a:	97 9f       	mul	r25, r23
    901c:	90 2d       	mov	r25, r0
    901e:	87 9f       	mul	r24, r23
    9020:	80 2d       	mov	r24, r0
    9022:	91 0d       	add	r25, r1
    9024:	11 24       	eor	r1, r1
    9026:	08 95       	ret

00009028 <clearerr>:
    9028:	fc 01       	movw	r30, r24
    902a:	83 81       	ldd	r24, Z+3	; 0x03
    902c:	8f 7c       	andi	r24, 0xCF	; 207
    902e:	83 83       	std	Z+3, r24	; 0x03
    9030:	08 95       	ret

00009032 <fgets>:
    9032:	cf 92       	push	r12
    9034:	df 92       	push	r13
    9036:	ef 92       	push	r14
    9038:	ff 92       	push	r15
    903a:	0f 93       	push	r16
    903c:	1f 93       	push	r17
    903e:	cf 93       	push	r28
    9040:	df 93       	push	r29
    9042:	7c 01       	movw	r14, r24
    9044:	6a 01       	movw	r12, r20
    9046:	fa 01       	movw	r30, r20
    9048:	83 81       	ldd	r24, Z+3	; 0x03
    904a:	80 ff       	sbrs	r24, 0
    904c:	19 c0       	rjmp	.+50     	; 0x9080 <fgets+0x4e>
    904e:	16 16       	cp	r1, r22
    9050:	17 06       	cpc	r1, r23
    9052:	b4 f4       	brge	.+44     	; 0x9080 <fgets+0x4e>
    9054:	eb 01       	movw	r28, r22
    9056:	21 97       	sbiw	r28, 0x01	; 1
    9058:	87 01       	movw	r16, r14
    905a:	0d c0       	rjmp	.+26     	; 0x9076 <fgets+0x44>
    905c:	c6 01       	movw	r24, r12
    905e:	0e 94 fc 48 	call	0x91f8	; 0x91f8 <fgetc>
    9062:	ff ef       	ldi	r31, 0xFF	; 255
    9064:	8f 3f       	cpi	r24, 0xFF	; 255
    9066:	9f 07       	cpc	r25, r31
    9068:	59 f0       	breq	.+22     	; 0x9080 <fgets+0x4e>
    906a:	f8 01       	movw	r30, r16
    906c:	81 93       	st	Z+, r24
    906e:	8f 01       	movw	r16, r30
    9070:	0a 97       	sbiw	r24, 0x0a	; 10
    9072:	19 f0       	breq	.+6      	; 0x907a <fgets+0x48>
    9074:	21 97       	sbiw	r28, 0x01	; 1
    9076:	20 97       	sbiw	r28, 0x00	; 0
    9078:	89 f7       	brne	.-30     	; 0x905c <fgets+0x2a>
    907a:	f8 01       	movw	r30, r16
    907c:	10 82       	st	Z, r1
    907e:	02 c0       	rjmp	.+4      	; 0x9084 <fgets+0x52>
    9080:	ee 24       	eor	r14, r14
    9082:	ff 24       	eor	r15, r15
    9084:	c7 01       	movw	r24, r14
    9086:	df 91       	pop	r29
    9088:	cf 91       	pop	r28
    908a:	1f 91       	pop	r17
    908c:	0f 91       	pop	r16
    908e:	ff 90       	pop	r15
    9090:	ef 90       	pop	r14
    9092:	df 90       	pop	r13
    9094:	cf 90       	pop	r12
    9096:	08 95       	ret

00009098 <fputc>:
    9098:	0f 93       	push	r16
    909a:	1f 93       	push	r17
    909c:	cf 93       	push	r28
    909e:	df 93       	push	r29
    90a0:	8c 01       	movw	r16, r24
    90a2:	eb 01       	movw	r28, r22
    90a4:	8b 81       	ldd	r24, Y+3	; 0x03
    90a6:	81 ff       	sbrs	r24, 1
    90a8:	1b c0       	rjmp	.+54     	; 0x90e0 <fputc+0x48>
    90aa:	82 ff       	sbrs	r24, 2
    90ac:	0d c0       	rjmp	.+26     	; 0x90c8 <fputc+0x30>
    90ae:	2e 81       	ldd	r18, Y+6	; 0x06
    90b0:	3f 81       	ldd	r19, Y+7	; 0x07
    90b2:	8c 81       	ldd	r24, Y+4	; 0x04
    90b4:	9d 81       	ldd	r25, Y+5	; 0x05
    90b6:	28 17       	cp	r18, r24
    90b8:	39 07       	cpc	r19, r25
    90ba:	64 f4       	brge	.+24     	; 0x90d4 <fputc+0x3c>
    90bc:	e8 81       	ld	r30, Y
    90be:	f9 81       	ldd	r31, Y+1	; 0x01
    90c0:	01 93       	st	Z+, r16
    90c2:	e8 83       	st	Y, r30
    90c4:	f9 83       	std	Y+1, r31	; 0x01
    90c6:	06 c0       	rjmp	.+12     	; 0x90d4 <fputc+0x3c>
    90c8:	e8 85       	ldd	r30, Y+8	; 0x08
    90ca:	f9 85       	ldd	r31, Y+9	; 0x09
    90cc:	80 2f       	mov	r24, r16
    90ce:	19 95       	eicall
    90d0:	89 2b       	or	r24, r25
    90d2:	31 f4       	brne	.+12     	; 0x90e0 <fputc+0x48>
    90d4:	8e 81       	ldd	r24, Y+6	; 0x06
    90d6:	9f 81       	ldd	r25, Y+7	; 0x07
    90d8:	01 96       	adiw	r24, 0x01	; 1
    90da:	8e 83       	std	Y+6, r24	; 0x06
    90dc:	9f 83       	std	Y+7, r25	; 0x07
    90de:	02 c0       	rjmp	.+4      	; 0x90e4 <fputc+0x4c>
    90e0:	0f ef       	ldi	r16, 0xFF	; 255
    90e2:	1f ef       	ldi	r17, 0xFF	; 255
    90e4:	c8 01       	movw	r24, r16
    90e6:	df 91       	pop	r29
    90e8:	cf 91       	pop	r28
    90ea:	1f 91       	pop	r17
    90ec:	0f 91       	pop	r16
    90ee:	08 95       	ret

000090f0 <printf_P>:
    90f0:	df 93       	push	r29
    90f2:	cf 93       	push	r28
    90f4:	cd b7       	in	r28, 0x3d	; 61
    90f6:	de b7       	in	r29, 0x3e	; 62
    90f8:	fe 01       	movw	r30, r28
    90fa:	36 96       	adiw	r30, 0x06	; 6
    90fc:	61 91       	ld	r22, Z+
    90fe:	71 91       	ld	r23, Z+
    9100:	a0 91 d5 25 	lds	r26, 0x25D5
    9104:	b0 91 d6 25 	lds	r27, 0x25D6
    9108:	13 96       	adiw	r26, 0x03	; 3
    910a:	8c 91       	ld	r24, X
    910c:	13 97       	sbiw	r26, 0x03	; 3
    910e:	88 60       	ori	r24, 0x08	; 8
    9110:	13 96       	adiw	r26, 0x03	; 3
    9112:	8c 93       	st	X, r24
    9114:	80 91 d5 25 	lds	r24, 0x25D5
    9118:	90 91 d6 25 	lds	r25, 0x25D6
    911c:	af 01       	movw	r20, r30
    911e:	0e 94 15 3d 	call	0x7a2a	; 0x7a2a <vfprintf>
    9122:	e0 91 d5 25 	lds	r30, 0x25D5
    9126:	f0 91 d6 25 	lds	r31, 0x25D6
    912a:	23 81       	ldd	r18, Z+3	; 0x03
    912c:	27 7f       	andi	r18, 0xF7	; 247
    912e:	23 83       	std	Z+3, r18	; 0x03
    9130:	cf 91       	pop	r28
    9132:	df 91       	pop	r29
    9134:	08 95       	ret

00009136 <__ultoa_invert>:
    9136:	fa 01       	movw	r30, r20
    9138:	aa 27       	eor	r26, r26
    913a:	28 30       	cpi	r18, 0x08	; 8
    913c:	51 f1       	breq	.+84     	; 0x9192 <__ultoa_invert+0x5c>
    913e:	20 31       	cpi	r18, 0x10	; 16
    9140:	81 f1       	breq	.+96     	; 0x91a2 <__ultoa_invert+0x6c>
    9142:	e8 94       	clt
    9144:	6f 93       	push	r22
    9146:	6e 7f       	andi	r22, 0xFE	; 254
    9148:	6e 5f       	subi	r22, 0xFE	; 254
    914a:	7f 4f       	sbci	r23, 0xFF	; 255
    914c:	8f 4f       	sbci	r24, 0xFF	; 255
    914e:	9f 4f       	sbci	r25, 0xFF	; 255
    9150:	af 4f       	sbci	r26, 0xFF	; 255
    9152:	b1 e0       	ldi	r27, 0x01	; 1
    9154:	3e d0       	rcall	.+124    	; 0x91d2 <__ultoa_invert+0x9c>
    9156:	b4 e0       	ldi	r27, 0x04	; 4
    9158:	3c d0       	rcall	.+120    	; 0x91d2 <__ultoa_invert+0x9c>
    915a:	67 0f       	add	r22, r23
    915c:	78 1f       	adc	r23, r24
    915e:	89 1f       	adc	r24, r25
    9160:	9a 1f       	adc	r25, r26
    9162:	a1 1d       	adc	r26, r1
    9164:	68 0f       	add	r22, r24
    9166:	79 1f       	adc	r23, r25
    9168:	8a 1f       	adc	r24, r26
    916a:	91 1d       	adc	r25, r1
    916c:	a1 1d       	adc	r26, r1
    916e:	6a 0f       	add	r22, r26
    9170:	71 1d       	adc	r23, r1
    9172:	81 1d       	adc	r24, r1
    9174:	91 1d       	adc	r25, r1
    9176:	a1 1d       	adc	r26, r1
    9178:	20 d0       	rcall	.+64     	; 0x91ba <__ultoa_invert+0x84>
    917a:	09 f4       	brne	.+2      	; 0x917e <__ultoa_invert+0x48>
    917c:	68 94       	set
    917e:	3f 91       	pop	r19
    9180:	2a e0       	ldi	r18, 0x0A	; 10
    9182:	26 9f       	mul	r18, r22
    9184:	11 24       	eor	r1, r1
    9186:	30 19       	sub	r19, r0
    9188:	30 5d       	subi	r19, 0xD0	; 208
    918a:	31 93       	st	Z+, r19
    918c:	de f6       	brtc	.-74     	; 0x9144 <__ultoa_invert+0xe>
    918e:	cf 01       	movw	r24, r30
    9190:	08 95       	ret
    9192:	46 2f       	mov	r20, r22
    9194:	47 70       	andi	r20, 0x07	; 7
    9196:	40 5d       	subi	r20, 0xD0	; 208
    9198:	41 93       	st	Z+, r20
    919a:	b3 e0       	ldi	r27, 0x03	; 3
    919c:	0f d0       	rcall	.+30     	; 0x91bc <__ultoa_invert+0x86>
    919e:	c9 f7       	brne	.-14     	; 0x9192 <__ultoa_invert+0x5c>
    91a0:	f6 cf       	rjmp	.-20     	; 0x918e <__ultoa_invert+0x58>
    91a2:	46 2f       	mov	r20, r22
    91a4:	4f 70       	andi	r20, 0x0F	; 15
    91a6:	40 5d       	subi	r20, 0xD0	; 208
    91a8:	4a 33       	cpi	r20, 0x3A	; 58
    91aa:	18 f0       	brcs	.+6      	; 0x91b2 <__ultoa_invert+0x7c>
    91ac:	49 5d       	subi	r20, 0xD9	; 217
    91ae:	31 fd       	sbrc	r19, 1
    91b0:	40 52       	subi	r20, 0x20	; 32
    91b2:	41 93       	st	Z+, r20
    91b4:	02 d0       	rcall	.+4      	; 0x91ba <__ultoa_invert+0x84>
    91b6:	a9 f7       	brne	.-22     	; 0x91a2 <__ultoa_invert+0x6c>
    91b8:	ea cf       	rjmp	.-44     	; 0x918e <__ultoa_invert+0x58>
    91ba:	b4 e0       	ldi	r27, 0x04	; 4
    91bc:	a6 95       	lsr	r26
    91be:	97 95       	ror	r25
    91c0:	87 95       	ror	r24
    91c2:	77 95       	ror	r23
    91c4:	67 95       	ror	r22
    91c6:	ba 95       	dec	r27
    91c8:	c9 f7       	brne	.-14     	; 0x91bc <__ultoa_invert+0x86>
    91ca:	00 97       	sbiw	r24, 0x00	; 0
    91cc:	61 05       	cpc	r22, r1
    91ce:	71 05       	cpc	r23, r1
    91d0:	08 95       	ret
    91d2:	9b 01       	movw	r18, r22
    91d4:	ac 01       	movw	r20, r24
    91d6:	0a 2e       	mov	r0, r26
    91d8:	06 94       	lsr	r0
    91da:	57 95       	ror	r21
    91dc:	47 95       	ror	r20
    91de:	37 95       	ror	r19
    91e0:	27 95       	ror	r18
    91e2:	ba 95       	dec	r27
    91e4:	c9 f7       	brne	.-14     	; 0x91d8 <__ultoa_invert+0xa2>
    91e6:	62 0f       	add	r22, r18
    91e8:	73 1f       	adc	r23, r19
    91ea:	84 1f       	adc	r24, r20
    91ec:	95 1f       	adc	r25, r21
    91ee:	a0 1d       	adc	r26, r0
    91f0:	08 95       	ret

000091f2 <__ctype_isfalse>:
    91f2:	99 27       	eor	r25, r25
    91f4:	88 27       	eor	r24, r24

000091f6 <__ctype_istrue>:
    91f6:	08 95       	ret

000091f8 <fgetc>:
    91f8:	cf 93       	push	r28
    91fa:	df 93       	push	r29
    91fc:	ec 01       	movw	r28, r24
    91fe:	4b 81       	ldd	r20, Y+3	; 0x03
    9200:	40 ff       	sbrs	r20, 0
    9202:	1a c0       	rjmp	.+52     	; 0x9238 <fgetc+0x40>
    9204:	46 ff       	sbrs	r20, 6
    9206:	0a c0       	rjmp	.+20     	; 0x921c <fgetc+0x24>
    9208:	4f 7b       	andi	r20, 0xBF	; 191
    920a:	4b 83       	std	Y+3, r20	; 0x03
    920c:	8e 81       	ldd	r24, Y+6	; 0x06
    920e:	9f 81       	ldd	r25, Y+7	; 0x07
    9210:	01 96       	adiw	r24, 0x01	; 1
    9212:	8e 83       	std	Y+6, r24	; 0x06
    9214:	9f 83       	std	Y+7, r25	; 0x07
    9216:	8a 81       	ldd	r24, Y+2	; 0x02
    9218:	28 2f       	mov	r18, r24
    921a:	2b c0       	rjmp	.+86     	; 0x9272 <fgetc+0x7a>
    921c:	42 ff       	sbrs	r20, 2
    921e:	13 c0       	rjmp	.+38     	; 0x9246 <fgetc+0x4e>
    9220:	e8 81       	ld	r30, Y
    9222:	f9 81       	ldd	r31, Y+1	; 0x01
    9224:	80 81       	ld	r24, Z
    9226:	28 2f       	mov	r18, r24
    9228:	33 27       	eor	r19, r19
    922a:	27 fd       	sbrc	r18, 7
    922c:	30 95       	com	r19
    922e:	21 15       	cp	r18, r1
    9230:	31 05       	cpc	r19, r1
    9232:	29 f4       	brne	.+10     	; 0x923e <fgetc+0x46>
    9234:	40 62       	ori	r20, 0x20	; 32
    9236:	4b 83       	std	Y+3, r20	; 0x03
    9238:	2f ef       	ldi	r18, 0xFF	; 255
    923a:	3f ef       	ldi	r19, 0xFF	; 255
    923c:	1b c0       	rjmp	.+54     	; 0x9274 <fgetc+0x7c>
    923e:	31 96       	adiw	r30, 0x01	; 1
    9240:	e8 83       	st	Y, r30
    9242:	f9 83       	std	Y+1, r31	; 0x01
    9244:	11 c0       	rjmp	.+34     	; 0x9268 <fgetc+0x70>
    9246:	ea 85       	ldd	r30, Y+10	; 0x0a
    9248:	fb 85       	ldd	r31, Y+11	; 0x0b
    924a:	ce 01       	movw	r24, r28
    924c:	19 95       	eicall
    924e:	9c 01       	movw	r18, r24
    9250:	97 ff       	sbrs	r25, 7
    9252:	0a c0       	rjmp	.+20     	; 0x9268 <fgetc+0x70>
    9254:	9b 81       	ldd	r25, Y+3	; 0x03
    9256:	2f 5f       	subi	r18, 0xFF	; 255
    9258:	3f 4f       	sbci	r19, 0xFF	; 255
    925a:	11 f0       	breq	.+4      	; 0x9260 <fgetc+0x68>
    925c:	80 e2       	ldi	r24, 0x20	; 32
    925e:	01 c0       	rjmp	.+2      	; 0x9262 <fgetc+0x6a>
    9260:	80 e1       	ldi	r24, 0x10	; 16
    9262:	89 2b       	or	r24, r25
    9264:	8b 83       	std	Y+3, r24	; 0x03
    9266:	e8 cf       	rjmp	.-48     	; 0x9238 <fgetc+0x40>
    9268:	8e 81       	ldd	r24, Y+6	; 0x06
    926a:	9f 81       	ldd	r25, Y+7	; 0x07
    926c:	01 96       	adiw	r24, 0x01	; 1
    926e:	8e 83       	std	Y+6, r24	; 0x06
    9270:	9f 83       	std	Y+7, r25	; 0x07
    9272:	30 e0       	ldi	r19, 0x00	; 0
    9274:	c9 01       	movw	r24, r18
    9276:	df 91       	pop	r29
    9278:	cf 91       	pop	r28
    927a:	08 95       	ret

0000927c <_exit>:
    927c:	f8 94       	cli

0000927e <__stop_program>:
    927e:	ff cf       	rjmp	.-2      	; 0x927e <__stop_program>
