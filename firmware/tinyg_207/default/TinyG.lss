
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000927e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00802000  0000927e  00009312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000404  00802104  00802104  00009416  2**0
                  ALLOC
  3 .debug_aranges 000003e0  00000000  00000000  00009416  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000010cb  00000000  00000000  000097f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000e5ee  00000000  00000000  0000a8c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000030c8  00000000  00000000  00018eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004f00  00000000  00000000  0001bf77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b30  00000000  00000000  00020e78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000263e  00000000  00000000  000219a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003d6c  00000000  00000000  00023fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  00027d52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__ctors_end>
       4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
       8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
       c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      10:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      14:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      18:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      1c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      20:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      24:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      28:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      2c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      30:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      34:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      38:	0c 94 36 27 	jmp	0x4e6c	; 0x4e6c <__vector_14>
      3c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      40:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      44:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      48:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      4c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      50:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      54:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      58:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      5c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      60:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      64:	0c 94 3a 33 	jmp	0x6674	; 0x6674 <__vector_25>
      68:	0c 94 f6 32 	jmp	0x65ec	; 0x65ec <__vector_26>
      6c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      70:	0c 94 4c 34 	jmp	0x6898	; 0x6898 <__vector_28>
      74:	0c 94 e8 33 	jmp	0x67d0	; 0x67d0 <__vector_29>
      78:	0c 94 32 34 	jmp	0x6864	; 0x6864 <__vector_30>
      7c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      80:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      84:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      88:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      8c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      90:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      94:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      98:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      9c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      a0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      a4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      a8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      ac:	0c 94 33 2f 	jmp	0x5e66	; 0x5e66 <__vector_43>
      b0:	0c 94 3d 2f 	jmp	0x5e7a	; 0x5e7a <__vector_44>
      b4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      b8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      bc:	0c 94 6c 26 	jmp	0x4cd8	; 0x4cd8 <__vector_47>
      c0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      c4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      c8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      cc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      d0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      d4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      d8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      dc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      e0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      e4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      e8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      ec:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      f0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      f4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      f8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
      fc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     100:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__vector_64>
     104:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__vector_65>
     108:	0c 94 0b 2f 	jmp	0x5e16	; 0x5e16 <__vector_66>
     10c:	0c 94 15 2f 	jmp	0x5e2a	; 0x5e2a <__vector_67>
     110:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     114:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     118:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     11c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     120:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     124:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     128:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     12c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     130:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     134:	0c 94 d1 26 	jmp	0x4da2	; 0x4da2 <__vector_77>
     138:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     13c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     140:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     144:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     148:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     14c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     150:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     154:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     158:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     15c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     160:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     164:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     168:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     16c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     170:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     174:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     178:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     17c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     180:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     184:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     188:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     18c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     190:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     194:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     198:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     19c:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1a0:	0c 94 1f 2f 	jmp	0x5e3e	; 0x5e3e <__vector_104>
     1a4:	0c 94 29 2f 	jmp	0x5e52	; 0x5e52 <__vector_105>
     1a8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1ac:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1b0:	0c 94 07 26 	jmp	0x4c0e	; 0x4c0e <__vector_108>
     1b4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1b8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1bc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1c0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1c4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1c8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1cc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1d0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1d4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1d8:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1dc:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1e0:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1e4:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <__c.3932>:
     23b:	25 73 0a 00                                         %s..

0000023f <cfgMsgXaxis>:
     23f:	58 00                                               X.

00000241 <cfgMsgYaxis>:
     241:	59 00                                               Y.

00000243 <cfgMsgZaxis>:
     243:	5a 00                                               Z.

00000245 <cfgMsgAaxis>:
     245:	41 00                                               A.

00000247 <cfgMsgs>:
     247:	3f 02 41 02 43 02 45 02                             ?.A.C.E.

0000024f <configs_P>:
     24f:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25f:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26f:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27f:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28f:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29f:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2af:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bf:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cf:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2df:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2ef:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2ff:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30f:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31f:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32f:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33f:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34f:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35f:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36f:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37f:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38f:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

0000039d <__c.3754>:
     39d:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     3ad:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     3bd:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     3cd:	29 0a 0a 00                                         )...

000003d1 <__c.3752>:
     3d1:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     3e1:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     3f1:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000401 <__c.3750>:
     401:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     411:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     421:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

00000432 <__c.3748>:
     432:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     442:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     452:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

00000463 <__c.3746>:
     463:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     473:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     483:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     493:	6c 0a 00                                            l..

00000496 <__c.3744>:
     496:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     4a6:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     4b6:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     4c6:	6e 0a 00                                            n..

000004c9 <__c.3742>:
     4c9:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     4d9:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     4e9:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     4f9:	74 65 70 73 29 0a 00                                teps)..

00000500 <__c.3740>:
     500:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     510:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     520:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     530:	70 0a 00                                            p..

00000533 <__c.3738>:
     533:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     543:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     553:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     563:	73 74 65 70 73 29 0a 00                             steps)..

0000056b <__c.3736>:
     56b:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     57b:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     58b:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     59b:	73 74 65 70 73 29 0a 00                             steps)..

000005a3 <__c.3731>:
     5a3:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     5b3:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

000005c1 <__c.3717>:
     5c1:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     5d1:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     5e1:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

000005ec <__c.3715>:
     5ec:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     5fc:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     60c:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

00000616 <__c.3713>:
     616:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     626:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     636:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

00000640 <__c.3711>:
     640:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     650:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     660:	73 20 2d 2d 2d 0a 00                                s ---..

00000667 <__c.3709>:
     667:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     677:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     687:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

0000068f <__c.3686>:
     68f:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     69f:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     6af:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

000006bb <square_test1>:
     6bb:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     6cb:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     6db:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     6eb:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     6fb:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     70b:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     71b:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

00000729 <square_test2>:
     729:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     739:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     749:	78 30 20 79 30 00                                   x0 y0.

0000074f <square_test10>:
     74f:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     75f:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     76f:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

0000077b <circle_test10>:
     77b:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     78b:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     79b:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     7ab:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     7bb:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     7cb:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     7db:	30 00                                               0.

000007dd <square_circle_test10>:
     7dd:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     7ed:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     7fd:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     80d:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     81d:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     82d:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     83d:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     84d:	31 30 20 79 30 00                                   10 y0.

00000853 <square_circle_test100>:
     853:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     863:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     873:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     883:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     893:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     8a3:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     8b3:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     8c3:	35 30 20 6a 30 00                                   50 j0.

000008c9 <spiral_test5>:
     8c9:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     8d9:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     8e9:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     8f9:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     909:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     919:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     929:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     939:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

00000943 <spiral_test50a>:
     943:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     953:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

00000963 <dwell_test1>:
     963:	67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30 20     g0 x10.g4 p1.g0 
     973:	78 32 30 0a 67 34 20 70 31 0a 67 30 20 78 31 30     x20.g4 p1.g0 x10
     983:	0a 67 34 20 70 31 0a 67 30 20 78 30 30 0a 67 34     .g4 p1.g0 x00.g4
     993:	20 70 31 0a 67 30 20 78 31 30 0a 67 34 20 70 31      p1.g0 x10.g4 p1
     9a3:	0a 67 30 20 78 32 30 0a 67 34 20 70 31 0a 67 30     .g0 x20.g4 p1.g0
     9b3:	20 78 31 30 0a 67 34 20 70 31 0a 67 30 20 78 30      x10.g4 p1.g0 x0
     9c3:	0a 67 34 20 70 31 0a 67 30 20 78 31 30 0a 67 34     .g4 p1.g0 x10.g4
     9d3:	20 70 31 0a 67 30 20 78 32 30 0a 67 34 20 70 31      p1.g0 x20.g4 p1
     9e3:	0a 67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30     .g0 x10.g4 p1.g0
     9f3:	20 78 30 00                                          x0.

000009f7 <dwell_test2>:
     9f7:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     a07:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     a17:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     a27:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     a37:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     a47:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     a57:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     a67:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     a77:	20 70 31 0a 67 30 20 78 30 00                        p1.g0 x0.

00000a81 <dwell_testMax>:
     a81:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000a8b <g0_test1>:
     a8b:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     a9b:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000aab <g0_test2>:
     aab:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     abb:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     acb:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     adb:	79 30 20 7a 30 00                                   y0 z0.

00000ae1 <g0_test3>:
     ae1:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     af1:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     b01:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000b0f <radius_arc_test1>:
     b0f:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     b1f:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     b2f:	72 35 30 0a 00                                      r50..

00000b34 <radius_arc_test2>:
     b34:	67 32 0a 00                                         g2..

00000b38 <zoetrope>:
     b38:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     b48:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     b58:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     b68:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     b78:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     b88:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     b98:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     ba8:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     bb8:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     bc8:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     bd8:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     be8:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     bf8:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     c08:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     c18:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     c28:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     c38:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     c48:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     c58:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     c68:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     c78:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     c88:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     c98:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     ca8:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     cb8:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     cc8:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     cd8:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     ce8:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     cf8:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     d08:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     d18:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     d28:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     d38:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     d48:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     d58:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     d68:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
     d78:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
     d88:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
     d98:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
     da8:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
     db8:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
     dc8:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
     dd8:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
     de8:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
     df8:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
     e08:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
     e18:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
     e28:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
     e38:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
     e48:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
     e58:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
     e68:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
     e78:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
     e88:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
     e98:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
     ea8:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
     eb8:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
     ec8:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
     ed8:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
     ee8:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
     ef8:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
     f08:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
     f18:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
     f28:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
     f38:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
     f48:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
     f58:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
     f68:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
     f78:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
     f88:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
     f98:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
     fa8:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
     fb8:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
     fc8:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
     fd8:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
     fe8:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
     ff8:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    1008:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    1018:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    1028:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    1038:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    1048:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    1058:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    1068:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    1078:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    1088:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    1098:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    10a8:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    10b8:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    10c8:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    10d8:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    10e8:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    10f8:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    1108:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    1118:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    1128:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    1138:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    1148:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    1158:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    1168:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    1178:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    1188:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    1198:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    11a8:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    11b8:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    11c8:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    11d8:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    11e8:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    11f8:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    1208:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    1218:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    1228:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    1238:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    1248:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    1258:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    1268:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    1278:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    1288:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    1298:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    12a8:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    12b8:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    12c8:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    12d8:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    12e8:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    12f8:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    1308:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    1318:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    1328:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    1338:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    1348:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    1358:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    1368:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    1378:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    1388:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    1398:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    13a8:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    13b8:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    13c8:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    13d8:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    13e8:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    13f8:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    1408:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    1418:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    1428:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    1438:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    1448:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    1458:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    1468:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    1478:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    1488:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    1498:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    14a8:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    14b8:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    14c8:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    14d8:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    14e8:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

000014f3 <contraptor_circle>:
    14f3:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    1503:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    1513:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    1523:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    1533:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    1543:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    1553:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    1563:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    1573:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    1583:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    1593:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    15a3:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    15b3:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    15c3:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    15d3:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    15e3:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    15f3:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    1603:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    1613:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    1623:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    1633:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    1643:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    1653:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    1663:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    1673:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    1683:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    1693:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    16a3:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    16b3:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    16c3:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    16d3:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    16e3:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    16f3:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    1703:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    1713:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    1723:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    1733:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    1743:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    1753:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    1763:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    1773:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1783:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1793:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    17a3:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    17b3:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    17c3:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    17d3:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    17e3:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    17f3:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1803:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    1813:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    1823:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    1833:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    1843:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    1853:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    1863:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    1873:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1883:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1893:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    18a3:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    18b3:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    18c3:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

000018d3 <tgModeStringControl>:
    18d3:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

000018e0 <tgModeStringConfig>:
    18e0:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

000018ec <tgModeStringGCode>:
    18ec:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

000018f8 <tgModeStringDirect>:
    18f8:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

00001905 <tgModeStrings>:
    1905:	d3 18 e0 18 ec 18 f8 18                             ........

0000190d <tgStatusMsg00>:
    190d:	4f 4b 00                                            OK.

00001910 <tgStatusMsg01>:
    1910:	45 52 52 4f 52 00                                   ERROR.

00001916 <tgStatusMsg02>:
    1916:	45 41 47 41 49 4e 00                                EAGAIN.

0000191d <tgStatusMsg03>:
    191d:	4e 4f 4f 50 00                                      NOOP.

00001922 <tgStatusMsg04>:
    1922:	45 6e 64 20 6f 66 20 6c 69 6e 65 00                 End of line.

0000192e <tgStatusMsg05>:
    192e:	45 6e 64 20 6f 66 20 66 69 6c 65 00                 End of file.

0000193a <tgStatusMsg06>:
    193a:	46 69 6c 65 20 6e 6f 74 20 6f 70 65 6e 00           File not open.

00001948 <tgStatusMsg07>:
    1948:	4e 6f 20 73 75 63 68 20 64 65 76 69 63 65 00        No such device.

00001957 <tgStatusMsg08>:
    1957:	42 75 66 66 65 72 20 65 6d 70 74 79 00              Buffer empty.

00001964 <tgStatusMsg09>:
    1964:	42 75 66 66 65 72 20 66 75 6c 6c 20 2d 20 66 61     Buffer full - fa
    1974:	74 61 6c 00                                         tal.

00001978 <tgStatusMsg10>:
    1978:	42 75 66 66 65 72 20 66 75 6c 6c 20 2d 20 6e 6f     Buffer full - no
    1988:	6e 2d 66 61 74 61 6c 00                             n-fatal.

00001990 <tgStatusMsg11>:
    1990:	51 55 49 54 00                                      QUIT.

00001995 <tgStatusMsg12>:
    1995:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 63 6f 6d     Unrecognized com
    19a5:	6d 61 6e 64 00                                      mand.

000019aa <tgStatusMsg13>:
    19aa:	45 78 70 65 63 74 65 64 20 63 6f 6d 6d 61 6e 64     Expected command
    19ba:	20 6c 65 74 74 65 72 00                              letter.

000019c2 <tgStatusMsg14>:
    19c2:	55 6e 73 75 70 70 6f 72 74 65 64 20 73 74 61 74     Unsupported stat
    19d2:	65 6d 65 6e 74 00                                   ement.

000019d8 <tgStatusMsg15>:
    19d8:	50 61 72 61 6d 65 74 65 72 20 6f 76 65 72 20 72     Parameter over r
    19e8:	61 6e 67 65 00                                      ange.

000019ed <tgStatusMsg16>:
    19ed:	42 61 64 20 6e 75 6d 62 65 72 20 66 6f 72 6d 61     Bad number forma
    19fd:	74 00                                               t.

000019ff <tgStatusMsg17>:
    19ff:	46 6c 6f 61 74 69 6e 67 20 70 6f 69 6e 74 20 65     Floating point e
    1a0f:	72 72 6f 72 00                                      rror.

00001a14 <tgStatusMsg18>:
    1a14:	4d 6f 74 69 6f 6e 20 63 6f 6e 74 72 6f 6c 20 65     Motion control e
    1a24:	72 72 6f 72 00                                      rror.

00001a29 <tgStatusMsg19>:
    1a29:	41 72 63 20 73 70 65 63 69 66 69 63 61 74 69 6f     Arc specificatio
    1a39:	6e 20 65 72 72 6f 72 00                             n error.

00001a41 <tgStatusMsg20>:
    1a41:	5a 65 72 6f 20 6c 65 6e 67 74 68 20 6c 69 6e 65     Zero length line
	...

00001a52 <tgStatusStrings>:
    1a52:	0d 19 10 19 16 19 1d 19 22 19 2e 19 3a 19 48 19     ........"...:.H.
    1a62:	57 19 64 19 78 19 90 19 95 19 aa 19 c2 19 d8 19     W.d.x...........
    1a72:	ed 19 ff 19 14 1a 29 1a 41 1a                       ......).A.

00001a7c <__c.4077>:
    1a7c:	25 53 3a 20 25 73 0a 00                             %S: %s..

00001a84 <__c.3972>:
    1a84:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1a94:	69 6c 65 0a 00                                      ile..

00001a99 <__c.4035>:
    1a99:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001aa7 <__c.3948>:
    1aa7:	62 75 69 6c 64 20 32 30 37 00                       build 207.

00001ab1 <__c.3946>:
    1ab1:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1ac1:	25 53 0a 00                                         %S..

00001ac5 <bsel>:
    1ac5:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

00001ad0 <bscale>:
    1ad0:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

00001adb <readlnFuncs>:
    1adb:	a5 31 61 31 61 31 61 31 61 31 61 31 61 31 61 31     .1a1a1a1a1a1a1a1
    1aeb:	ef 31 61 31 a5 31 61 31 61 31 a5 31 61 31 61 31     .1a1.1a1a1.1a1a1
    1afb:	61 31 61 31 61 31 61 31 61 31 61 31 61 31 61 31     a1a1a1a1a1a1a1a1
    1b0b:	61 31 61 31 61 31 61 31 61 31 61 31 61 31 61 31     a1a1a1a1a1a1a1a1
    1b1b:	61 31 61 31 61 31 61 31 61 31 61 31 61 31 61 31     a1a1a1a1a1a1a1a1
    1b2b:	61 31 61 31 61 31 61 31 61 31 61 31 61 31 61 31     a1a1a1a1a1a1a1a1
    1b3b:	61 31 61 31 61 31 61 31 61 31 61 31 61 31 61 31     a1a1a1a1a1a1a1a1
    1b4b:	61 31 61 31 61 31 d8 31 61 31 61 31 61 31 61 31     a1a1a1.1a1a1a1a1
    1b5b:	61 31 61 31 61 31 61 31 61 31 61 31 61 31 61 31     a1a1a1a1a1a1a1a1
    1b6b:	61 31 61 31 61 31 61 31 61 31 61 31 61 31 61 31     a1a1a1a1a1a1a1a1
    1b7b:	61 31 61 31 61 31 61 31 61 31 61 31 61 31 61 31     a1a1a1a1a1a1a1a1
    1b8b:	61 31 61 31 61 31 61 31 61 31 61 31 61 31 61 31     a1a1a1a1a1a1a1a1
    1b9b:	61 31 61 31 61 31 61 31 61 31 61 31 61 31 61 31     a1a1a1a1a1a1a1a1
    1bab:	61 31 61 31 61 31 61 31 61 31 61 31 61 31 61 31     a1a1a1a1a1a1a1a1
    1bbb:	61 31 61 31 61 31 61 31 61 31 61 31 61 31 61 31     a1a1a1a1a1a1a1a1
    1bcb:	61 31 61 31 61 31 61 31 61 31 61 31 61 31 ef 31     a1a1a1a1a1a1a1.1

00001bdb <getcFuncs>:
    1bdb:	98 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30     .0k0k0k0k0k0k0k0
    1beb:	ed 30 6b 30 98 30 6b 30 6b 30 98 30 6b 30 6b 30     .0k0.0k0k0.0k0k0
    1bfb:	6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30     k0k0k0k0k0k0k0k0
    1c0b:	6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30     k0k0k0k0k0k0k0k0
    1c1b:	6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30     k0k0k0k0k0k0k0k0
    1c2b:	6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30     k0k0k0k0k0k0k0k0
    1c3b:	6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30     k0k0k0k0k0k0k0k0
    1c4b:	6b 30 6b 30 6b 30 d6 30 6b 30 6b 30 6b 30 6b 30     k0k0k0.0k0k0k0k0
    1c5b:	6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30     k0k0k0k0k0k0k0k0
    1c6b:	6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30     k0k0k0k0k0k0k0k0
    1c7b:	6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30     k0k0k0k0k0k0k0k0
    1c8b:	6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30     k0k0k0k0k0k0k0k0
    1c9b:	6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30     k0k0k0k0k0k0k0k0
    1cab:	6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30     k0k0k0k0k0k0k0k0
    1cbb:	6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30     k0k0k0k0k0k0k0k0
    1ccb:	6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 6b 30 ed 30     k0k0k0k0k0k0k0.0

00001cdb <pstr_inf>:
    1cdb:	49 4e 46                                            INF

00001cde <pstr_inity>:
    1cde:	49 4e 49 54 59                                      INITY

00001ce3 <pstr_nan>:
    1ce3:	4e 41 4e                                            NAN

00001ce6 <pwr_m10>:
    1ce6:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1cf6:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001cfe <pwr_p10>:
    1cfe:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1d0e:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1d1e:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1d2e:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1d3e:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1d4e:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1d5e:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1d6e:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1d7e:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1d8e:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1d9e:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1dae:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1dbe:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1dce:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1dde:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1dee:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1dfe:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1e0e:	3d 27                                               ='

00001e10 <__ctors_end>:
    1e10:	11 24       	eor	r1, r1
    1e12:	1f be       	out	0x3f, r1	; 63
    1e14:	cf ef       	ldi	r28, 0xFF	; 255
    1e16:	df e5       	ldi	r29, 0x5F	; 95
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	cd bf       	out	0x3d, r28	; 61
    1e1c:	00 e0       	ldi	r16, 0x00	; 0
    1e1e:	0c bf       	out	0x3c, r16	; 60

00001e20 <__do_copy_data>:
    1e20:	11 e2       	ldi	r17, 0x21	; 33
    1e22:	a0 e0       	ldi	r26, 0x00	; 0
    1e24:	b0 e2       	ldi	r27, 0x20	; 32
    1e26:	ee e7       	ldi	r30, 0x7E	; 126
    1e28:	f2 e9       	ldi	r31, 0x92	; 146
    1e2a:	00 e0       	ldi	r16, 0x00	; 0
    1e2c:	0b bf       	out	0x3b, r16	; 59
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <__do_copy_data+0x14>
    1e30:	07 90       	elpm	r0, Z+
    1e32:	0d 92       	st	X+, r0
    1e34:	a4 30       	cpi	r26, 0x04	; 4
    1e36:	b1 07       	cpc	r27, r17
    1e38:	d9 f7       	brne	.-10     	; 0x1e30 <__do_copy_data+0x10>

00001e3a <__do_clear_bss>:
    1e3a:	15 e2       	ldi	r17, 0x25	; 37
    1e3c:	a4 e0       	ldi	r26, 0x04	; 4
    1e3e:	b1 e2       	ldi	r27, 0x21	; 33
    1e40:	01 c0       	rjmp	.+2      	; 0x1e44 <.do_clear_bss_start>

00001e42 <.do_clear_bss_loop>:
    1e42:	1d 92       	st	X+, r1

00001e44 <.do_clear_bss_start>:
    1e44:	a8 30       	cpi	r26, 0x08	; 8
    1e46:	b1 07       	cpc	r27, r17
    1e48:	e1 f7       	brne	.-8      	; 0x1e42 <.do_clear_bss_loop>
    1e4a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <main>
    1e4e:	0c 94 3d 49 	jmp	0x927a	; 0x927a <_exit>

00001e52 <__bad_interrupt>:
    1e52:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001e56 <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1e56:	f8 94       	cli
	xmega_init();				// xmega setup
    1e58:	0e 94 1b 1b 	call	0x3636	; 0x3636 <xmega_init>
	xio_init();					// xmega io subsystem
    1e5c:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <xio_init>

	cfg_init();					// get config record from eeprom
    1e60:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <cfg_init>
	st_init(); 					// stepper subsystem
    1e64:	0e 94 c3 23 	call	0x4786	; 0x4786 <st_init>
	ls_init();					// limit switches
    1e68:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <ls_init>
	mv_init();					// move buffers
    1e6c:	0e 94 2b 2c 	call	0x5856	; 0x5856 <mv_init>
	mc_init();					// motion control subsystem
    1e70:	0e 94 44 1b 	call	0x3688	; 0x3688 <mc_init>
	spindle_init();				// spindle controller
    1e74:	0e 94 a7 23 	call	0x474e	; 0x474e <spindle_init>
	en_init();					// encoders
    1e78:	0e 94 b9 1a 	call	0x3572	; 0x3572 <en_init>
	gc_init();					// gcode-parser
    1e7c:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <gc_init>
	dd_init();					// direct drive commands
    1e80:	0e 94 27 2c 	call	0x584e	; 0x584e <dd_init>
	tg_init();					// tinyg parsers
    1e84:	0e 94 2f 2b 	call	0x565e	; 0x565e <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1e88:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1e8c:	e0 ea       	ldi	r30, 0xA0	; 160
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 91 a2 00 	lds	r24, 0x00A2
    1e94:	81 60       	ori	r24, 0x01	; 1
    1e96:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1e98:	80 91 a2 00 	lds	r24, 0x00A2
    1e9c:	82 60       	ori	r24, 0x02	; 2
    1e9e:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1ea0:	80 91 a2 00 	lds	r24, 0x00A2
    1ea4:	84 60       	ori	r24, 0x04	; 4
    1ea6:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1ea8:	78 94       	sei

// Debug help: Pre-load the USB RX (input) buffer with some test strings
// Be mindful of the char limit on the RX_BUFFER_SIZE (circular buffer)

//	xio_queue_RX_char_usb(ETX);			// send control-c (kill)
	xio_queue_RX_string_usb("f\n");
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	90 e2       	ldi	r25, 0x20	; 32
    1eae:	0e 94 c1 33 	call	0x6782	; 0x6782 <xio_queue_RX_string_usb>
	for(;;){
		tg_repeater();		// this node receives on USB and repeats to RS485
	}
#else
	for(;;){
		tg_controller();	// this node executes gcode blocks received via RS485
    1eb2:	0e 94 bb 2b 	call	0x5776	; 0x5776 <tg_controller>
    1eb6:	fd cf       	rjmp	.-6      	; 0x1eb2 <main+0x5c>

00001eb8 <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1eb8:	80 93 17 21 	sts	0x2117, r24
	gc.plane_axis_1 = axis_1;
    1ebc:	60 93 18 21 	sts	0x2118, r22
	gc.plane_axis_2 = axis_2;
    1ec0:	40 93 19 21 	sts	0x2119, r20
}
    1ec4:	08 95       	ret

00001ec6 <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1ec6:	ef 92       	push	r14
    1ec8:	ff 92       	push	r15
    1eca:	0f 93       	push	r16
    1ecc:	1f 93       	push	r17
    1ece:	7b 01       	movw	r14, r22
    1ed0:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    1ed2:	80 91 12 21 	lds	r24, 0x2112
    1ed6:	88 23       	and	r24, r24
    1ed8:	51 f0       	breq	.+20     	; 0x1eee <to_millimeters+0x28>
    1eda:	c8 01       	movw	r24, r16
    1edc:	b7 01       	movw	r22, r14
    1ede:	25 e8       	ldi	r18, 0x85	; 133
    1ee0:	32 e4       	ldi	r19, 0x42	; 66
    1ee2:	41 e2       	ldi	r20, 0x21	; 33
    1ee4:	5d e3       	ldi	r21, 0x3D	; 61
    1ee6:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    1eea:	7b 01       	movw	r14, r22
    1eec:	8c 01       	movw	r16, r24
}
    1eee:	b7 01       	movw	r22, r14
    1ef0:	c8 01       	movw	r24, r16
    1ef2:	1f 91       	pop	r17
    1ef4:	0f 91       	pop	r16
    1ef6:	ff 90       	pop	r15
    1ef8:	ef 90       	pop	r14
    1efa:	08 95       	ret

00001efc <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    1efc:	88 e5       	ldi	r24, 0x58	; 88
    1efe:	e4 e0       	ldi	r30, 0x04	; 4
    1f00:	f1 e2       	ldi	r31, 0x21	; 33
    1f02:	df 01       	movw	r26, r30
    1f04:	1d 92       	st	X+, r1
    1f06:	8a 95       	dec	r24
    1f08:	e9 f7       	brne	.-6      	; 0x1f04 <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	a0 e0       	ldi	r26, 0x00	; 0
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	80 93 1a 21 	sts	0x211A, r24
    1f16:	90 93 1b 21 	sts	0x211B, r25
    1f1a:	a0 93 1c 21 	sts	0x211C, r26
    1f1e:	b0 93 1d 21 	sts	0x211D, r27
	gc.radius = 0;							// radius value
    1f22:	80 93 1e 21 	sts	0x211E, r24
    1f26:	90 93 1f 21 	sts	0x211F, r25
    1f2a:	a0 93 20 21 	sts	0x2120, r26
    1f2e:	b0 93 21 21 	sts	0x2121, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    1f32:	80 91 79 22 	lds	r24, 0x2279
    1f36:	90 91 7a 22 	lds	r25, 0x227A
    1f3a:	a0 91 7b 22 	lds	r26, 0x227B
    1f3e:	b0 91 7c 22 	lds	r27, 0x227C
    1f42:	80 93 22 21 	sts	0x2122, r24
    1f46:	90 93 23 21 	sts	0x2123, r25
    1f4a:	a0 93 24 21 	sts	0x2124, r26
    1f4e:	b0 93 25 21 	sts	0x2125, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    1f52:	80 91 7d 22 	lds	r24, 0x227D
    1f56:	90 91 7e 22 	lds	r25, 0x227E
    1f5a:	a0 91 7f 22 	lds	r26, 0x227F
    1f5e:	b0 91 80 22 	lds	r27, 0x2280
    1f62:	80 93 26 21 	sts	0x2126, r24
    1f66:	90 93 27 21 	sts	0x2127, r25
    1f6a:	a0 93 28 21 	sts	0x2128, r26
    1f6e:	b0 93 29 21 	sts	0x2129, r27

	gc.absolute_mode = TRUE;
    1f72:	21 e0       	ldi	r18, 0x01	; 1
    1f74:	20 93 13 21 	sts	0x2113, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a0 e8       	ldi	r26, 0x80	; 128
    1f7e:	bf eb       	ldi	r27, 0xBF	; 191
    1f80:	80 93 2e 21 	sts	0x212E, r24
    1f84:	90 93 2f 21 	sts	0x212F, r25
    1f88:	a0 93 30 21 	sts	0x2130, r26
    1f8c:	b0 93 31 21 	sts	0x2131, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    1f90:	10 92 14 21 	sts	0x2114, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    1f94:	10 92 16 21 	sts	0x2116, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    1f98:	10 92 0e 21 	sts	0x210E, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1f9c:	10 92 17 21 	sts	0x2117, r1
	gc.plane_axis_1 = axis_1;
    1fa0:	20 93 18 21 	sts	0x2118, r18
	gc.plane_axis_2 = axis_2;
    1fa4:	82 e0       	ldi	r24, 0x02	; 2
    1fa6:	80 93 19 21 	sts	0x2119, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X, Y, Z);
}
    1faa:	08 95       	ret

00001fac <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    1fac:	4f 92       	push	r4
    1fae:	5f 92       	push	r5
    1fb0:	6f 92       	push	r6
    1fb2:	7f 92       	push	r7
    1fb4:	8f 92       	push	r8
    1fb6:	9f 92       	push	r9
    1fb8:	af 92       	push	r10
    1fba:	bf 92       	push	r11
    1fbc:	cf 92       	push	r12
    1fbe:	df 92       	push	r13
    1fc0:	ef 92       	push	r14
    1fc2:	ff 92       	push	r15
    1fc4:	0f 93       	push	r16
    1fc6:	1f 93       	push	r17
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	0f 92       	push	r0
    1fce:	0f 92       	push	r0
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	3b 01       	movw	r6, r22
    1fd6:	2a 01       	movw	r4, r20
    1fd8:	49 01       	movw	r8, r18
    1fda:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    1fdc:	d8 01       	movw	r26, r16
    1fde:	ed 91       	ld	r30, X+
    1fe0:	fc 91       	ld	r31, X
    1fe2:	e2 0f       	add	r30, r18
    1fe4:	f3 1f       	adc	r31, r19
    1fe6:	e0 81       	ld	r30, Z
    1fe8:	ee 23       	and	r30, r30
    1fea:	41 f0       	breq	.+16     	; 0x1ffc <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    1fec:	dc 01       	movw	r26, r24
    1fee:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    1ff0:	e1 54       	subi	r30, 0x41	; 65
    1ff2:	ea 31       	cpi	r30, 0x1A	; 26
    1ff4:	30 f0       	brcs	.+12     	; 0x2002 <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    1ff6:	8d e0       	ldi	r24, 0x0D	; 13
    1ff8:	80 93 04 21 	sts	0x2104, r24
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	35 c0       	rjmp	.+106    	; 0x206c <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    2002:	f8 01       	movw	r30, r16
    2004:	80 81       	ld	r24, Z
    2006:	91 81       	ldd	r25, Z+1	; 0x01
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	80 83       	st	Z, r24
    200c:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    200e:	89 01       	movw	r16, r18
    2010:	08 0f       	add	r16, r24
    2012:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    2014:	c8 01       	movw	r24, r16
    2016:	be 01       	movw	r22, r28
    2018:	6f 5f       	subi	r22, 0xFF	; 255
    201a:	7f 4f       	sbci	r23, 0xFF	; 255
    201c:	0e 94 69 45 	call	0x8ad2	; 0x8ad2 <strtod>
    2020:	6b 01       	movw	r12, r22
    2022:	7c 01       	movw	r14, r24
    2024:	d3 01       	movw	r26, r6
    2026:	6d 93       	st	X+, r22
    2028:	7d 93       	st	X+, r23
    202a:	8d 93       	st	X+, r24
    202c:	9c 93       	st	X, r25
    202e:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	9a 81       	ldd	r25, Y+2	; 0x02
    2034:	80 17       	cp	r24, r16
    2036:	91 07       	cpc	r25, r17
    2038:	11 f4       	brne	.+4      	; 0x203e <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    203a:	80 e1       	ldi	r24, 0x10	; 16
    203c:	dd cf       	rjmp	.-70     	; 0x1ff8 <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    203e:	88 19       	sub	r24, r8
    2040:	99 09       	sbc	r25, r9
    2042:	f5 01       	movw	r30, r10
    2044:	80 83       	st	Z, r24
    2046:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    2048:	c7 01       	movw	r24, r14
    204a:	b6 01       	movw	r22, r12
    204c:	0e 94 ce 44 	call	0x899c	; 0x899c <trunc>
    2050:	9b 01       	movw	r18, r22
    2052:	ac 01       	movw	r20, r24
    2054:	c7 01       	movw	r24, r14
    2056:	b6 01       	movw	r22, r12
    2058:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    205c:	d2 01       	movw	r26, r4
    205e:	6d 93       	st	X+, r22
    2060:	7d 93       	st	X+, r23
    2062:	8d 93       	st	X+, r24
    2064:	9c 93       	st	X, r25
    2066:	13 97       	sbiw	r26, 0x03	; 3
    2068:	21 e0       	ldi	r18, 0x01	; 1
    206a:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    206c:	c9 01       	movw	r24, r18
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	1f 91       	pop	r17
    2078:	0f 91       	pop	r16
    207a:	ff 90       	pop	r15
    207c:	ef 90       	pop	r14
    207e:	df 90       	pop	r13
    2080:	cf 90       	pop	r12
    2082:	bf 90       	pop	r11
    2084:	af 90       	pop	r10
    2086:	9f 90       	pop	r9
    2088:	8f 90       	pop	r8
    208a:	7f 90       	pop	r7
    208c:	6f 90       	pop	r6
    208e:	5f 90       	pop	r5
    2090:	4f 90       	pop	r4
    2092:	08 95       	ret

00002094 <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    2094:	af 92       	push	r10
    2096:	bf 92       	push	r11
    2098:	cf 92       	push	r12
    209a:	df 92       	push	r13
    209c:	ef 92       	push	r14
    209e:	ff 92       	push	r15
    20a0:	0f 93       	push	r16
    20a2:	1f 93       	push	r17
    20a4:	79 01       	movw	r14, r18
    20a6:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    20a8:	5f 77       	andi	r21, 0x7F	; 127
    20aa:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    20ae:	0e 94 23 41 	call	0x8246	; 0x8246 <atan>
    20b2:	5b 01       	movw	r10, r22
    20b4:	6c 01       	movw	r12, r24

	if (y>0) {
    20b6:	c8 01       	movw	r24, r16
    20b8:	b7 01       	movw	r22, r14
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	50 e0       	ldi	r21, 0x00	; 0
    20c2:	0e 94 4e 43 	call	0x869c	; 0x869c <__gesf2>
    20c6:	18 16       	cp	r1, r24
    20c8:	cc f0       	brlt	.+50     	; 0x20fc <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    20ca:	c6 01       	movw	r24, r12
    20cc:	b5 01       	movw	r22, r10
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	50 e0       	ldi	r21, 0x00	; 0
    20d6:	0e 94 4e 43 	call	0x869c	; 0x869c <__gesf2>
    20da:	18 16       	cp	r1, r24
    20dc:	2c f4       	brge	.+10     	; 0x20e8 <theta+0x54>
	    {
			return(M_PI-theta);
    20de:	6b ed       	ldi	r22, 0xDB	; 219
    20e0:	7f e0       	ldi	r23, 0x0F	; 15
    20e2:	89 e4       	ldi	r24, 0x49	; 73
    20e4:	90 e4       	ldi	r25, 0x40	; 64
    20e6:	04 c0       	rjmp	.+8      	; 0x20f0 <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    20e8:	6b ed       	ldi	r22, 0xDB	; 219
    20ea:	7f e0       	ldi	r23, 0x0F	; 15
    20ec:	89 e4       	ldi	r24, 0x49	; 73
    20ee:	90 ec       	ldi	r25, 0xC0	; 192
    20f0:	a6 01       	movw	r20, r12
    20f2:	95 01       	movw	r18, r10
    20f4:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    20f8:	5b 01       	movw	r10, r22
    20fa:	6c 01       	movw	r12, r24
		}
	}
}
    20fc:	b5 01       	movw	r22, r10
    20fe:	c6 01       	movw	r24, r12
    2100:	1f 91       	pop	r17
    2102:	0f 91       	pop	r16
    2104:	ff 90       	pop	r15
    2106:	ef 90       	pop	r14
    2108:	df 90       	pop	r13
    210a:	cf 90       	pop	r12
    210c:	bf 90       	pop	r11
    210e:	af 90       	pop	r10
    2110:	08 95       	ret

00002112 <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    2112:	2f 92       	push	r2
    2114:	3f 92       	push	r3
    2116:	4f 92       	push	r4
    2118:	5f 92       	push	r5
    211a:	6f 92       	push	r6
    211c:	7f 92       	push	r7
    211e:	8f 92       	push	r8
    2120:	9f 92       	push	r9
    2122:	af 92       	push	r10
    2124:	bf 92       	push	r11
    2126:	cf 92       	push	r12
    2128:	df 92       	push	r13
    212a:	ef 92       	push	r14
    212c:	ff 92       	push	r15
    212e:	0f 93       	push	r16
    2130:	1f 93       	push	r17
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	68 97       	sbiw	r28, 0x18	; 24
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	de bf       	out	0x3e, r29	; 62
    2140:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    2142:	19 82       	std	Y+1, r1	; 0x01
    2144:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    2146:	ee e3       	ldi	r30, 0x3E	; 62
    2148:	f1 e2       	ldi	r31, 0x21	; 33
    214a:	8c e0       	ldi	r24, 0x0C	; 12
    214c:	df 01       	movw	r26, r30
    214e:	28 2f       	mov	r18, r24
    2150:	1d 92       	st	X+, r1
    2152:	2a 95       	dec	r18
    2154:	e9 f7       	brne	.-6      	; 0x2150 <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    2156:	3c 96       	adiw	r30, 0x0c	; 12
    2158:	df 01       	movw	r26, r30
    215a:	1d 92       	st	X+, r1
    215c:	8a 95       	dec	r24
    215e:	e9 f7       	brne	.-6      	; 0x215a <gc_execute_block+0x48>

	gc.status = TG_OK;
    2160:	10 92 04 21 	sts	0x2104, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    2164:	10 92 15 21 	sts	0x2115, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2168:	5e 01       	movw	r10, r28
    216a:	08 94       	sec
    216c:	a1 1c       	adc	r10, r1
    216e:	b1 1c       	adc	r11, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    2170:	ff 24       	eor	r15, r15
    2172:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    2174:	be e0       	ldi	r27, 0x0E	; 14
    2176:	cb 2e       	mov	r12, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2178:	a2 e0       	ldi	r26, 0x02	; 2
    217a:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    217c:	77 24       	eor	r7, r7
    217e:	7a 94       	dec	r7

					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    2180:	f3 e0       	ldi	r31, 0x03	; 3
    2182:	df 2e       	mov	r13, r31

					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2184:	e4 e0       	ldi	r30, 0x04	; 4
    2186:	6e 2e       	mov	r6, r30
    2188:	0a c1       	rjmp	.+532    	; 0x239e <gc_execute_block+0x28c>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    218a:	80 91 05 21 	lds	r24, 0x2105
    218e:	8d 34       	cpi	r24, 0x4D	; 77
    2190:	09 f4       	brne	.+2      	; 0x2194 <gc_execute_block+0x82>
    2192:	be c0       	rjmp	.+380    	; 0x2310 <gc_execute_block+0x1fe>
    2194:	84 35       	cpi	r24, 0x54	; 84
    2196:	09 f4       	brne	.+2      	; 0x219a <gc_execute_block+0x88>
    2198:	f0 c0       	rjmp	.+480    	; 0x237a <gc_execute_block+0x268>
    219a:	87 34       	cpi	r24, 0x47	; 71
    219c:	09 f0       	breq	.+2      	; 0x21a0 <gc_execute_block+0x8e>
    219e:	fb c0       	rjmp	.+502    	; 0x2396 <gc_execute_block+0x284>
			case 'G':
				switch((int)gc.value) {
    21a0:	60 91 06 21 	lds	r22, 0x2106
    21a4:	70 91 07 21 	lds	r23, 0x2107
    21a8:	80 91 08 21 	lds	r24, 0x2108
    21ac:	90 91 09 21 	lds	r25, 0x2109
    21b0:	0e 94 cd 41 	call	0x839a	; 0x839a <__fixsfsi>
    21b4:	65 31       	cpi	r22, 0x15	; 21
    21b6:	71 05       	cpc	r23, r1
    21b8:	09 f4       	brne	.+2      	; 0x21bc <gc_execute_block+0xaa>
    21ba:	8f c0       	rjmp	.+286    	; 0x22da <gc_execute_block+0x1c8>
    21bc:	66 31       	cpi	r22, 0x16	; 22
    21be:	71 05       	cpc	r23, r1
    21c0:	84 f5       	brge	.+96     	; 0x2222 <gc_execute_block+0x110>
    21c2:	64 30       	cpi	r22, 0x04	; 4
    21c4:	71 05       	cpc	r23, r1
    21c6:	09 f4       	brne	.+2      	; 0x21ca <gc_execute_block+0xb8>
    21c8:	6d c0       	rjmp	.+218    	; 0x22a4 <gc_execute_block+0x192>
    21ca:	65 30       	cpi	r22, 0x05	; 5
    21cc:	71 05       	cpc	r23, r1
    21ce:	a4 f4       	brge	.+40     	; 0x21f8 <gc_execute_block+0xe6>
    21d0:	61 30       	cpi	r22, 0x01	; 1
    21d2:	71 05       	cpc	r23, r1
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <gc_execute_block+0xc6>
    21d6:	57 c0       	rjmp	.+174    	; 0x2286 <gc_execute_block+0x174>
    21d8:	62 30       	cpi	r22, 0x02	; 2
    21da:	71 05       	cpc	r23, r1
    21dc:	24 f4       	brge	.+8      	; 0x21e6 <gc_execute_block+0xd4>
    21de:	67 2b       	or	r22, r23
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <gc_execute_block+0xd2>
    21e2:	4c c0       	rjmp	.+152    	; 0x227c <gc_execute_block+0x16a>
    21e4:	c7 c0       	rjmp	.+398    	; 0x2374 <gc_execute_block+0x262>
    21e6:	62 30       	cpi	r22, 0x02	; 2
    21e8:	71 05       	cpc	r23, r1
    21ea:	09 f4       	brne	.+2      	; 0x21ee <gc_execute_block+0xdc>
    21ec:	51 c0       	rjmp	.+162    	; 0x2290 <gc_execute_block+0x17e>
    21ee:	63 30       	cpi	r22, 0x03	; 3
    21f0:	71 05       	cpc	r23, r1
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <gc_execute_block+0xe4>
    21f4:	bf c0       	rjmp	.+382    	; 0x2374 <gc_execute_block+0x262>
    21f6:	51 c0       	rjmp	.+162    	; 0x229a <gc_execute_block+0x188>
    21f8:	62 31       	cpi	r22, 0x12	; 18
    21fa:	71 05       	cpc	r23, r1
    21fc:	09 f4       	brne	.+2      	; 0x2200 <gc_execute_block+0xee>
    21fe:	5c c0       	rjmp	.+184    	; 0x22b8 <gc_execute_block+0x1a6>
    2200:	63 31       	cpi	r22, 0x13	; 19
    2202:	71 05       	cpc	r23, r1
    2204:	2c f4       	brge	.+10     	; 0x2210 <gc_execute_block+0xfe>
    2206:	61 31       	cpi	r22, 0x11	; 17
    2208:	71 05       	cpc	r23, r1
    220a:	09 f0       	breq	.+2      	; 0x220e <gc_execute_block+0xfc>
    220c:	b3 c0       	rjmp	.+358    	; 0x2374 <gc_execute_block+0x262>
    220e:	4d c0       	rjmp	.+154    	; 0x22aa <gc_execute_block+0x198>
    2210:	63 31       	cpi	r22, 0x13	; 19
    2212:	71 05       	cpc	r23, r1
    2214:	09 f4       	brne	.+2      	; 0x2218 <gc_execute_block+0x106>
    2216:	57 c0       	rjmp	.+174    	; 0x22c6 <gc_execute_block+0x1b4>
    2218:	64 31       	cpi	r22, 0x14	; 20
    221a:	71 05       	cpc	r23, r1
    221c:	09 f0       	breq	.+2      	; 0x2220 <gc_execute_block+0x10e>
    221e:	aa c0       	rjmp	.+340    	; 0x2374 <gc_execute_block+0x262>
    2220:	59 c0       	rjmp	.+178    	; 0x22d4 <gc_execute_block+0x1c2>
    2222:	6a 35       	cpi	r22, 0x5A	; 90
    2224:	71 05       	cpc	r23, r1
    2226:	09 f4       	brne	.+2      	; 0x222a <gc_execute_block+0x118>
    2228:	64 c0       	rjmp	.+200    	; 0x22f2 <gc_execute_block+0x1e0>
    222a:	6b 35       	cpi	r22, 0x5B	; 91
    222c:	71 05       	cpc	r23, r1
    222e:	ac f4       	brge	.+42     	; 0x225a <gc_execute_block+0x148>
    2230:	6e 31       	cpi	r22, 0x1E	; 30
    2232:	71 05       	cpc	r23, r1
    2234:	09 f4       	brne	.+2      	; 0x2238 <gc_execute_block+0x126>
    2236:	54 c0       	rjmp	.+168    	; 0x22e0 <gc_execute_block+0x1ce>
    2238:	6f 31       	cpi	r22, 0x1F	; 31
    223a:	71 05       	cpc	r23, r1
    223c:	2c f4       	brge	.+10     	; 0x2248 <gc_execute_block+0x136>
    223e:	6c 31       	cpi	r22, 0x1C	; 28
    2240:	71 05       	cpc	r23, r1
    2242:	09 f0       	breq	.+2      	; 0x2246 <gc_execute_block+0x134>
    2244:	97 c0       	rjmp	.+302    	; 0x2374 <gc_execute_block+0x262>
    2246:	4c c0       	rjmp	.+152    	; 0x22e0 <gc_execute_block+0x1ce>
    2248:	65 33       	cpi	r22, 0x35	; 53
    224a:	71 05       	cpc	r23, r1
    224c:	09 f4       	brne	.+2      	; 0x2250 <gc_execute_block+0x13e>
    224e:	4b c0       	rjmp	.+150    	; 0x22e6 <gc_execute_block+0x1d4>
    2250:	60 35       	cpi	r22, 0x50	; 80
    2252:	71 05       	cpc	r23, r1
    2254:	09 f0       	breq	.+2      	; 0x2258 <gc_execute_block+0x146>
    2256:	8e c0       	rjmp	.+284    	; 0x2374 <gc_execute_block+0x262>
    2258:	49 c0       	rjmp	.+146    	; 0x22ec <gc_execute_block+0x1da>
    225a:	6c 35       	cpi	r22, 0x5C	; 92
    225c:	71 05       	cpc	r23, r1
    225e:	09 f4       	brne	.+2      	; 0x2262 <gc_execute_block+0x150>
    2260:	4e c0       	rjmp	.+156    	; 0x22fe <gc_execute_block+0x1ec>
    2262:	6c 35       	cpi	r22, 0x5C	; 92
    2264:	71 05       	cpc	r23, r1
    2266:	0c f4       	brge	.+2      	; 0x226a <gc_execute_block+0x158>
    2268:	47 c0       	rjmp	.+142    	; 0x22f8 <gc_execute_block+0x1e6>
    226a:	6d 35       	cpi	r22, 0x5D	; 93
    226c:	71 05       	cpc	r23, r1
    226e:	09 f4       	brne	.+2      	; 0x2272 <gc_execute_block+0x160>
    2270:	49 c0       	rjmp	.+146    	; 0x2304 <gc_execute_block+0x1f2>
    2272:	6e 35       	cpi	r22, 0x5E	; 94
    2274:	71 05       	cpc	r23, r1
    2276:	09 f0       	breq	.+2      	; 0x227a <gc_execute_block+0x168>
    2278:	7d c0       	rjmp	.+250    	; 0x2374 <gc_execute_block+0x262>
    227a:	47 c0       	rjmp	.+142    	; 0x230a <gc_execute_block+0x1f8>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    227c:	f0 92 0e 21 	sts	0x210E, r15
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    2280:	10 92 10 21 	sts	0x2110, r1
    2284:	88 c0       	rjmp	.+272    	; 0x2396 <gc_execute_block+0x284>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    2286:	f0 92 0e 21 	sts	0x210E, r15
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    228a:	f0 92 10 21 	sts	0x2110, r15
    228e:	83 c0       	rjmp	.+262    	; 0x2396 <gc_execute_block+0x284>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    2290:	f0 92 0e 21 	sts	0x210E, r15
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    2294:	e0 92 10 21 	sts	0x2110, r14
    2298:	7e c0       	rjmp	.+252    	; 0x2396 <gc_execute_block+0x284>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    229a:	f0 92 0e 21 	sts	0x210E, r15
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    229e:	d0 92 10 21 	sts	0x2110, r13
    22a2:	79 c0       	rjmp	.+242    	; 0x2396 <gc_execute_block+0x284>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    22a4:	e0 92 0e 21 	sts	0x210E, r14
    22a8:	76 c0       	rjmp	.+236    	; 0x2396 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22aa:	10 92 17 21 	sts	0x2117, r1
	gc.plane_axis_1 = axis_1;
    22ae:	f0 92 18 21 	sts	0x2118, r15
	gc.plane_axis_2 = axis_2;
    22b2:	e0 92 19 21 	sts	0x2119, r14
    22b6:	6f c0       	rjmp	.+222    	; 0x2396 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22b8:	10 92 17 21 	sts	0x2117, r1
	gc.plane_axis_1 = axis_1;
    22bc:	e0 92 18 21 	sts	0x2118, r14
	gc.plane_axis_2 = axis_2;
    22c0:	f0 92 19 21 	sts	0x2119, r15
    22c4:	68 c0       	rjmp	.+208    	; 0x2396 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    22c6:	f0 92 17 21 	sts	0x2117, r15
	gc.plane_axis_1 = axis_1;
    22ca:	e0 92 18 21 	sts	0x2118, r14
	gc.plane_axis_2 = axis_2;
    22ce:	10 92 19 21 	sts	0x2119, r1
    22d2:	61 c0       	rjmp	.+194    	; 0x2396 <gc_execute_block+0x284>

					case 17: { select_plane(X, Y, Z); break; }
					case 18: { select_plane(X, Z, Y); break; }
					case 19: { select_plane(Y, Z, X); break; }

					case 20: { gc.inches_mode = TRUE; break; }
    22d4:	f0 92 12 21 	sts	0x2112, r15
    22d8:	5e c0       	rjmp	.+188    	; 0x2396 <gc_execute_block+0x284>
					case 21: { gc.inches_mode = FALSE; break; }
    22da:	10 92 12 21 	sts	0x2112, r1
    22de:	5b c0       	rjmp	.+182    	; 0x2396 <gc_execute_block+0x284>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    22e0:	d0 92 0e 21 	sts	0x210E, r13
    22e4:	58 c0       	rjmp	.+176    	; 0x2396 <gc_execute_block+0x284>

					case 53: { gc.absolute_override = TRUE; break; }
    22e6:	f0 92 16 21 	sts	0x2116, r15
    22ea:	55 c0       	rjmp	.+170    	; 0x2396 <gc_execute_block+0x284>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    22ec:	60 92 10 21 	sts	0x2110, r6
    22f0:	52 c0       	rjmp	.+164    	; 0x2396 <gc_execute_block+0x284>
					case 90: { gc.absolute_mode = TRUE; break; }
    22f2:	f0 92 13 21 	sts	0x2113, r15
    22f6:	4f c0       	rjmp	.+158    	; 0x2396 <gc_execute_block+0x284>
					case 91: { gc.absolute_mode = FALSE; break; }
    22f8:	10 92 13 21 	sts	0x2113, r1
    22fc:	4c c0       	rjmp	.+152    	; 0x2396 <gc_execute_block+0x284>
					case 92: { gc.set_origin_mode = TRUE; break; }
    22fe:	f0 92 15 21 	sts	0x2115, r15
    2302:	49 c0       	rjmp	.+146    	; 0x2396 <gc_execute_block+0x284>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    2304:	f0 92 11 21 	sts	0x2111, r15
    2308:	46 c0       	rjmp	.+140    	; 0x2396 <gc_execute_block+0x284>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    230a:	10 92 11 21 	sts	0x2111, r1
    230e:	43 c0       	rjmp	.+134    	; 0x2396 <gc_execute_block+0x284>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    2310:	60 91 06 21 	lds	r22, 0x2106
    2314:	70 91 07 21 	lds	r23, 0x2107
    2318:	80 91 08 21 	lds	r24, 0x2108
    231c:	90 91 09 21 	lds	r25, 0x2109
    2320:	0e 94 cd 41 	call	0x839a	; 0x839a <__fixsfsi>
    2324:	63 30       	cpi	r22, 0x03	; 3
    2326:	71 05       	cpc	r23, r1
    2328:	e1 f0       	breq	.+56     	; 0x2362 <gc_execute_block+0x250>
    232a:	64 30       	cpi	r22, 0x04	; 4
    232c:	71 05       	cpc	r23, r1
    232e:	34 f4       	brge	.+12     	; 0x233c <gc_execute_block+0x22a>
    2330:	77 fd       	sbrc	r23, 7
    2332:	20 c0       	rjmp	.+64     	; 0x2374 <gc_execute_block+0x262>
    2334:	62 30       	cpi	r22, 0x02	; 2
    2336:	71 05       	cpc	r23, r1
    2338:	74 f0       	brlt	.+28     	; 0x2356 <gc_execute_block+0x244>
    233a:	10 c0       	rjmp	.+32     	; 0x235c <gc_execute_block+0x24a>
    233c:	65 30       	cpi	r22, 0x05	; 5
    233e:	71 05       	cpc	r23, r1
    2340:	b1 f0       	breq	.+44     	; 0x236e <gc_execute_block+0x25c>
    2342:	65 30       	cpi	r22, 0x05	; 5
    2344:	71 05       	cpc	r23, r1
    2346:	84 f0       	brlt	.+32     	; 0x2368 <gc_execute_block+0x256>
    2348:	6e 31       	cpi	r22, 0x1E	; 30
    234a:	71 05       	cpc	r23, r1
    234c:	39 f0       	breq	.+14     	; 0x235c <gc_execute_block+0x24a>
    234e:	6c 33       	cpi	r22, 0x3C	; 60
    2350:	71 05       	cpc	r23, r1
    2352:	81 f4       	brne	.+32     	; 0x2374 <gc_execute_block+0x262>
    2354:	03 c0       	rjmp	.+6      	; 0x235c <gc_execute_block+0x24a>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    2356:	f0 92 0f 21 	sts	0x210F, r15
    235a:	1d c0       	rjmp	.+58     	; 0x2396 <gc_execute_block+0x284>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    235c:	e0 92 0f 21 	sts	0x210F, r14
    2360:	1a c0       	rjmp	.+52     	; 0x2396 <gc_execute_block+0x284>
					case 3: gc.spindle_direction = 1; break;
    2362:	f0 92 57 21 	sts	0x2157, r15
    2366:	17 c0       	rjmp	.+46     	; 0x2396 <gc_execute_block+0x284>
					case 4: gc.spindle_direction = -1; break;
    2368:	70 92 57 21 	sts	0x2157, r7
    236c:	14 c0       	rjmp	.+40     	; 0x2396 <gc_execute_block+0x284>
					case 5: gc.spindle_direction = 0; break;
    236e:	10 92 57 21 	sts	0x2157, r1
    2372:	11 c0       	rjmp	.+34     	; 0x2396 <gc_execute_block+0x284>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    2374:	c0 92 04 21 	sts	0x2104, r12
    2378:	0e c0       	rjmp	.+28     	; 0x2396 <gc_execute_block+0x284>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    237a:	60 91 06 21 	lds	r22, 0x2106
    237e:	70 91 07 21 	lds	r23, 0x2107
    2382:	80 91 08 21 	lds	r24, 0x2108
    2386:	90 91 09 21 	lds	r25, 0x2109
    238a:	0e 94 ce 44 	call	0x899c	; 0x899c <trunc>
    238e:	0e 94 d2 41 	call	0x83a4	; 0x83a4 <__fixunssfsi>
    2392:	60 93 56 21 	sts	0x2156, r22
		}
		if(gc.status) {
    2396:	80 91 04 21 	lds	r24, 0x2104
    239a:	88 23       	and	r24, r24
    239c:	69 f4       	brne	.+26     	; 0x23b8 <gc_execute_block+0x2a6>

	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    239e:	85 e0       	ldi	r24, 0x05	; 5
    23a0:	91 e2       	ldi	r25, 0x21	; 33
    23a2:	66 e0       	ldi	r22, 0x06	; 6
    23a4:	71 e2       	ldi	r23, 0x21	; 33
    23a6:	4a e0       	ldi	r20, 0x0A	; 10
    23a8:	51 e2       	ldi	r21, 0x21	; 33
    23aa:	94 01       	movw	r18, r8
    23ac:	85 01       	movw	r16, r10
    23ae:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <_gc_next_statement>
    23b2:	89 2b       	or	r24, r25
    23b4:	09 f0       	breq	.+2      	; 0x23b8 <gc_execute_block+0x2a6>
    23b6:	e9 ce       	rjmp	.-558    	; 0x218a <gc_execute_block+0x78>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    23b8:	80 91 04 21 	lds	r24, 0x2104
    23bc:	88 23       	and	r24, r24
    23be:	09 f0       	breq	.+2      	; 0x23c2 <gc_execute_block+0x2b0>
    23c0:	99 c3       	rjmp	.+1842   	; 0x2af4 <gc_execute_block+0x9e2>
		return(gc.status); 
	}

	i = 0;
    23c2:	19 82       	std	Y+1, r1	; 0x01
    23c4:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    23c6:	ea e4       	ldi	r30, 0x4A	; 74
    23c8:	f1 e2       	ldi	r31, 0x21	; 33
    23ca:	8c e0       	ldi	r24, 0x0C	; 12
    23cc:	df 01       	movw	r26, r30
    23ce:	1d 92       	st	X+, r1
    23d0:	8a 95       	dec	r24
    23d2:	e9 f7       	brne	.-6      	; 0x23ce <gc_execute_block+0x2bc>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    23d4:	df 01       	movw	r26, r30
    23d6:	1c 97       	sbiw	r26, 0x0c	; 12
    23d8:	78 97       	sbiw	r30, 0x18	; 24
    23da:	8c e0       	ldi	r24, 0x0C	; 12
    23dc:	01 90       	ld	r0, Z+
    23de:	0d 92       	st	X+, r0
    23e0:	81 50       	subi	r24, 0x01	; 1
    23e2:	e1 f7       	brne	.-8      	; 0x23dc <gc_execute_block+0x2ca>
    23e4:	c6 c0       	rjmp	.+396    	; 0x2572 <gc_execute_block+0x460>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    23e6:	c0 90 06 21 	lds	r12, 0x2106
    23ea:	d0 90 07 21 	lds	r13, 0x2107
    23ee:	e0 90 08 21 	lds	r14, 0x2108
    23f2:	f0 90 09 21 	lds	r15, 0x2109
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    23f6:	80 91 12 21 	lds	r24, 0x2112
    23fa:	88 23       	and	r24, r24
    23fc:	19 f4       	brne	.+6      	; 0x2404 <gc_execute_block+0x2f2>
    23fe:	a7 01       	movw	r20, r14
    2400:	96 01       	movw	r18, r12
    2402:	0a c0       	rjmp	.+20     	; 0x2418 <gc_execute_block+0x306>
    2404:	c7 01       	movw	r24, r14
    2406:	b6 01       	movw	r22, r12
    2408:	25 e8       	ldi	r18, 0x85	; 133
    240a:	32 e4       	ldi	r19, 0x42	; 66
    240c:	41 e2       	ldi	r20, 0x21	; 33
    240e:	5d e3       	ldi	r21, 0x3D	; 61
    2410:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    2414:	9b 01       	movw	r18, r22
    2416:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2418:	20 93 2a 21 	sts	0x212A, r18
    241c:	30 93 2b 21 	sts	0x212B, r19
    2420:	40 93 2c 21 	sts	0x212C, r20
    2424:	50 93 2d 21 	sts	0x212D, r21
		switch(gc.letter) {
    2428:	00 91 05 21 	lds	r16, 0x2105
    242c:	00 35       	cpi	r16, 0x50	; 80
    242e:	09 f4       	brne	.+2      	; 0x2432 <gc_execute_block+0x320>
    2430:	47 c0       	rjmp	.+142    	; 0x24c0 <gc_execute_block+0x3ae>
    2432:	01 35       	cpi	r16, 0x51	; 81
    2434:	58 f4       	brcc	.+22     	; 0x244c <gc_execute_block+0x33a>
    2436:	06 34       	cpi	r16, 0x46	; 70
    2438:	c1 f0       	breq	.+48     	; 0x246a <gc_execute_block+0x358>
    243a:	06 34       	cpi	r16, 0x46	; 70
    243c:	08 f4       	brcc	.+2      	; 0x2440 <gc_execute_block+0x32e>
    243e:	9f c0       	rjmp	.+318    	; 0x257e <gc_execute_block+0x46c>
    2440:	80 2f       	mov	r24, r16
    2442:	89 54       	subi	r24, 0x49	; 73
    2444:	83 30       	cpi	r24, 0x03	; 3
    2446:	08 f0       	brcs	.+2      	; 0x244a <gc_execute_block+0x338>
    2448:	9a c0       	rjmp	.+308    	; 0x257e <gc_execute_block+0x46c>
    244a:	2d c0       	rjmp	.+90     	; 0x24a6 <gc_execute_block+0x394>
    244c:	03 35       	cpi	r16, 0x53	; 83
    244e:	09 f4       	brne	.+2      	; 0x2452 <gc_execute_block+0x340>
    2450:	4b c0       	rjmp	.+150    	; 0x24e8 <gc_execute_block+0x3d6>
    2452:	04 35       	cpi	r16, 0x54	; 84
    2454:	20 f4       	brcc	.+8      	; 0x245e <gc_execute_block+0x34c>
    2456:	02 35       	cpi	r16, 0x52	; 82
    2458:	09 f0       	breq	.+2      	; 0x245c <gc_execute_block+0x34a>
    245a:	91 c0       	rjmp	.+290    	; 0x257e <gc_execute_block+0x46c>
    245c:	3a c0       	rjmp	.+116    	; 0x24d2 <gc_execute_block+0x3c0>
    245e:	80 2f       	mov	r24, r16
    2460:	88 55       	subi	r24, 0x58	; 88
    2462:	83 30       	cpi	r24, 0x03	; 3
    2464:	08 f0       	brcs	.+2      	; 0x2468 <gc_execute_block+0x356>
    2466:	8b c0       	rjmp	.+278    	; 0x257e <gc_execute_block+0x46c>
    2468:	48 c0       	rjmp	.+144    	; 0x24fa <gc_execute_block+0x3e8>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    246a:	80 91 11 21 	lds	r24, 0x2111
    246e:	88 23       	and	r24, r24
    2470:	49 f0       	breq	.+18     	; 0x2484 <gc_execute_block+0x372>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    2472:	20 93 2e 21 	sts	0x212E, r18
    2476:	30 93 2f 21 	sts	0x212F, r19
    247a:	40 93 30 21 	sts	0x2130, r20
    247e:	50 93 31 21 	sts	0x2131, r21
    2482:	7d c0       	rjmp	.+250    	; 0x257e <gc_execute_block+0x46c>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    2484:	ca 01       	movw	r24, r20
    2486:	b9 01       	movw	r22, r18
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e7       	ldi	r20, 0x70	; 112
    248e:	52 e4       	ldi	r21, 0x42	; 66
    2490:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    2494:	60 93 22 21 	sts	0x2122, r22
    2498:	70 93 23 21 	sts	0x2123, r23
    249c:	80 93 24 21 	sts	0x2124, r24
    24a0:	90 93 25 21 	sts	0x2125, r25
    24a4:	6c c0       	rjmp	.+216    	; 0x257e <gc_execute_block+0x46c>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    24a6:	e0 2f       	mov	r30, r16
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	ee 0f       	add	r30, r30
    24ac:	ff 1f       	adc	r31, r31
    24ae:	ee 0f       	add	r30, r30
    24b0:	ff 1f       	adc	r31, r31
    24b2:	ea 5d       	subi	r30, 0xDA	; 218
    24b4:	ff 4d       	sbci	r31, 0xDF	; 223
    24b6:	20 83       	st	Z, r18
    24b8:	31 83       	std	Z+1, r19	; 0x01
    24ba:	42 83       	std	Z+2, r20	; 0x02
    24bc:	53 83       	std	Z+3, r21	; 0x03
    24be:	5f c0       	rjmp	.+190    	; 0x257e <gc_execute_block+0x46c>
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
    24c0:	c0 92 1a 21 	sts	0x211A, r12
    24c4:	d0 92 1b 21 	sts	0x211B, r13
    24c8:	e0 92 1c 21 	sts	0x211C, r14
    24cc:	f0 92 1d 21 	sts	0x211D, r15
    24d0:	56 c0       	rjmp	.+172    	; 0x257e <gc_execute_block+0x46c>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    24d2:	20 93 1e 21 	sts	0x211E, r18
    24d6:	30 93 1f 21 	sts	0x211F, r19
    24da:	40 93 20 21 	sts	0x2120, r20
    24de:	50 93 21 21 	sts	0x2121, r21
    24e2:	70 92 14 21 	sts	0x2114, r7
    24e6:	4b c0       	rjmp	.+150    	; 0x257e <gc_execute_block+0x46c>
			case 'S': gc.spindle_speed = gc.value; break;
    24e8:	c7 01       	movw	r24, r14
    24ea:	b6 01       	movw	r22, r12
    24ec:	0e 94 cd 41 	call	0x839a	; 0x839a <__fixsfsi>
    24f0:	60 93 58 21 	sts	0x2158, r22
    24f4:	70 93 59 21 	sts	0x2159, r23
    24f8:	42 c0       	rjmp	.+132    	; 0x257e <gc_execute_block+0x46c>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    24fa:	80 91 15 21 	lds	r24, 0x2115
    24fe:	88 23       	and	r24, r24
    2500:	69 f0       	breq	.+26     	; 0x251c <gc_execute_block+0x40a>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    2502:	e0 2f       	mov	r30, r16
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	ee 0f       	add	r30, r30
    2508:	ff 1f       	adc	r31, r31
    250a:	ee 0f       	add	r30, r30
    250c:	ff 1f       	adc	r31, r31
    250e:	ec 55       	subi	r30, 0x5C	; 92
    2510:	f0 4e       	sbci	r31, 0xE0	; 224
    2512:	26 a7       	std	Z+46, r18	; 0x2e
    2514:	37 a7       	std	Z+47, r19	; 0x2f
    2516:	40 ab       	std	Z+48, r20	; 0x30
    2518:	51 ab       	std	Z+49, r21	; 0x31
    251a:	31 c0       	rjmp	.+98     	; 0x257e <gc_execute_block+0x46c>
				} else if (gc.absolute_mode || gc.absolute_override) {
    251c:	80 91 13 21 	lds	r24, 0x2113
    2520:	88 23       	and	r24, r24
    2522:	21 f4       	brne	.+8      	; 0x252c <gc_execute_block+0x41a>
    2524:	80 91 16 21 	lds	r24, 0x2116
    2528:	88 23       	and	r24, r24
    252a:	69 f0       	breq	.+26     	; 0x2546 <gc_execute_block+0x434>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    252c:	e0 2f       	mov	r30, r16
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	ee 0f       	add	r30, r30
    2532:	ff 1f       	adc	r31, r31
    2534:	ee 0f       	add	r30, r30
    2536:	ff 1f       	adc	r31, r31
    2538:	ec 55       	subi	r30, 0x5C	; 92
    253a:	f0 4e       	sbci	r31, 0xE0	; 224
    253c:	22 af       	std	Z+58, r18	; 0x3a
    253e:	33 af       	std	Z+59, r19	; 0x3b
    2540:	44 af       	std	Z+60, r20	; 0x3c
    2542:	55 af       	std	Z+61, r21	; 0x3d
    2544:	1c c0       	rjmp	.+56     	; 0x257e <gc_execute_block+0x46c>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    2546:	10 e0       	ldi	r17, 0x00	; 0
    2548:	00 0f       	add	r16, r16
    254a:	11 1f       	adc	r17, r17
    254c:	00 0f       	add	r16, r16
    254e:	11 1f       	adc	r17, r17
    2550:	0c 55       	subi	r16, 0x5C	; 92
    2552:	10 4e       	sbci	r17, 0xE0	; 224
    2554:	f8 01       	movw	r30, r16
    2556:	62 ad       	ldd	r22, Z+58	; 0x3a
    2558:	73 ad       	ldd	r23, Z+59	; 0x3b
    255a:	84 ad       	ldd	r24, Z+60	; 0x3c
    255c:	95 ad       	ldd	r25, Z+61	; 0x3d
    255e:	0e 94 bf 40 	call	0x817e	; 0x817e <__addsf3>
    2562:	d8 01       	movw	r26, r16
    2564:	da 96       	adiw	r26, 0x3a	; 58
    2566:	6d 93       	st	X+, r22
    2568:	7d 93       	st	X+, r23
    256a:	8d 93       	st	X+, r24
    256c:	9c 93       	st	X, r25
    256e:	dd 97       	sbiw	r26, 0x3d	; 61
    2570:	06 c0       	rjmp	.+12     	; 0x257e <gc_execute_block+0x46c>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2572:	5e 01       	movw	r10, r28
    2574:	08 94       	sec
    2576:	a1 1c       	adc	r10, r1
    2578:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    257a:	77 24       	eor	r7, r7
    257c:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    257e:	85 e0       	ldi	r24, 0x05	; 5
    2580:	91 e2       	ldi	r25, 0x21	; 33
    2582:	66 e0       	ldi	r22, 0x06	; 6
    2584:	71 e2       	ldi	r23, 0x21	; 33
    2586:	4a e0       	ldi	r20, 0x0A	; 10
    2588:	51 e2       	ldi	r21, 0x21	; 33
    258a:	94 01       	movw	r18, r8
    258c:	85 01       	movw	r16, r10
    258e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <_gc_next_statement>
    2592:	89 2b       	or	r24, r25
    2594:	09 f0       	breq	.+2      	; 0x2598 <gc_execute_block+0x486>
    2596:	27 cf       	rjmp	.-434    	; 0x23e6 <gc_execute_block+0x2d4>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    2598:	80 91 04 21 	lds	r24, 0x2104
    259c:	88 23       	and	r24, r24
    259e:	09 f0       	breq	.+2      	; 0x25a2 <gc_execute_block+0x490>
    25a0:	a9 c2       	rjmp	.+1362   	; 0x2af4 <gc_execute_block+0x9e2>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    25a2:	80 91 57 21 	lds	r24, 0x2157
    25a6:	88 23       	and	r24, r24
    25a8:	71 f0       	breq	.+28     	; 0x25c6 <gc_execute_block+0x4b4>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    25aa:	40 91 58 21 	lds	r20, 0x2158
    25ae:	50 91 59 21 	lds	r21, 0x2159
    25b2:	66 27       	eor	r22, r22
    25b4:	57 fd       	sbrc	r21, 7
    25b6:	60 95       	com	r22
    25b8:	76 2f       	mov	r23, r22
    25ba:	99 27       	eor	r25, r25
    25bc:	87 fd       	sbrc	r24, 7
    25be:	90 95       	com	r25
    25c0:	0e 94 ae 23 	call	0x475c	; 0x475c <spindle_run>
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <gc_execute_block+0x4b8>
	} else {
		spindle_stop();
    25c6:	0e 94 be 23 	call	0x477c	; 0x477c <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    25ca:	80 91 0e 21 	lds	r24, 0x210E
    25ce:	82 30       	cpi	r24, 0x02	; 2
    25d0:	49 f0       	breq	.+18     	; 0x25e4 <gc_execute_block+0x4d2>
    25d2:	83 30       	cpi	r24, 0x03	; 3
    25d4:	21 f0       	breq	.+8      	; 0x25de <gc_execute_block+0x4cc>
    25d6:	81 30       	cpi	r24, 0x01	; 1
    25d8:	09 f0       	breq	.+2      	; 0x25dc <gc_execute_block+0x4ca>
    25da:	7d c2       	rjmp	.+1274   	; 0x2ad6 <gc_execute_block+0x9c4>
    25dc:	0e c0       	rjmp	.+28     	; 0x25fa <gc_execute_block+0x4e8>
		case NEXT_ACTION_DEFAULT: {				// nothing to do here
			break;
		}

		case NEXT_ACTION_GO_HOME: { 
			gc.status = mc_go_home(); 
    25de:	0e 94 3a 1b 	call	0x3674	; 0x3674 <mc_go_home>
    25e2:	77 c2       	rjmp	.+1262   	; 0x2ad2 <gc_execute_block+0x9c0>
			break;
		}

		case NEXT_ACTION_DWELL: {
			gc.status = mc_dwell(gc.dwell_time); 
    25e4:	60 91 1a 21 	lds	r22, 0x211A
    25e8:	70 91 1b 21 	lds	r23, 0x211B
    25ec:	80 91 1c 21 	lds	r24, 0x211C
    25f0:	90 91 1d 21 	lds	r25, 0x211D
    25f4:	0e 94 99 1b 	call	0x3732	; 0x3732 <mc_dwell>
    25f8:	6c c2       	rjmp	.+1240   	; 0x2ad2 <gc_execute_block+0x9c0>
			break;
		}

		case NEXT_ACTION_MOTION: {
			switch (gc.motion_mode) {
    25fa:	b0 91 10 21 	lds	r27, 0x2110
    25fe:	b8 8f       	std	Y+24, r27	; 0x18
    2600:	b2 30       	cpi	r27, 0x02	; 2
    2602:	20 f0       	brcs	.+8      	; 0x260c <gc_execute_block+0x4fa>
    2604:	b4 30       	cpi	r27, 0x04	; 4
    2606:	08 f0       	brcs	.+2      	; 0x260a <gc_execute_block+0x4f8>
    2608:	66 c2       	rjmp	.+1228   	; 0x2ad6 <gc_execute_block+0x9c4>
    260a:	31 c0       	rjmp	.+98     	; 0x266e <gc_execute_block+0x55c>
				case MOTION_MODE_CANCEL: {
					break;
				}

				case MOTION_MODE_RAPID_LINEAR: case MOTION_MODE_LINEAR: {
					gc.status = mc_line(gc.target[X], gc.target[Y], gc.target[Z],
    260c:	60 91 3e 21 	lds	r22, 0x213E
    2610:	70 91 3f 21 	lds	r23, 0x213F
    2614:	80 91 40 21 	lds	r24, 0x2140
    2618:	90 91 41 21 	lds	r25, 0x2141
    261c:	20 91 42 21 	lds	r18, 0x2142
    2620:	30 91 43 21 	lds	r19, 0x2143
    2624:	40 91 44 21 	lds	r20, 0x2144
    2628:	50 91 45 21 	lds	r21, 0x2145
    262c:	e0 90 46 21 	lds	r14, 0x2146
    2630:	f0 90 47 21 	lds	r15, 0x2147
    2634:	00 91 48 21 	lds	r16, 0x2148
    2638:	10 91 49 21 	lds	r17, 0x2149
    263c:	80 90 11 21 	lds	r8, 0x2111
    2640:	88 20       	and	r8, r8
    2642:	49 f0       	breq	.+18     	; 0x2656 <gc_execute_block+0x544>
    2644:	a0 90 2e 21 	lds	r10, 0x212E
    2648:	b0 90 2f 21 	lds	r11, 0x212F
    264c:	c0 90 30 21 	lds	r12, 0x2130
    2650:	d0 90 31 21 	lds	r13, 0x2131
    2654:	08 c0       	rjmp	.+16     	; 0x2666 <gc_execute_block+0x554>
    2656:	a0 90 22 21 	lds	r10, 0x2122
    265a:	b0 90 23 21 	lds	r11, 0x2123
    265e:	c0 90 24 21 	lds	r12, 0x2124
    2662:	d0 90 25 21 	lds	r13, 0x2125
    2666:	99 24       	eor	r9, r9
    2668:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <mc_line>
    266c:	32 c2       	rjmp	.+1124   	; 0x2ad2 <gc_execute_block+0x9c0>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    266e:	80 91 14 21 	lds	r24, 0x2114
    2672:	88 23       	and	r24, r24
    2674:	09 f4       	brne	.+2      	; 0x2678 <gc_execute_block+0x566>
    2676:	ec c0       	rjmp	.+472    	; 0x2850 <gc_execute_block+0x73e>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    2678:	e0 91 17 21 	lds	r30, 0x2117
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	ee 0f       	add	r30, r30
    2680:	ff 1f       	adc	r31, r31
    2682:	ee 0f       	add	r30, r30
    2684:	ff 1f       	adc	r31, r31
    2686:	ec 5f       	subi	r30, 0xFC	; 252
    2688:	fe 4d       	sbci	r31, 0xDE	; 222
    268a:	62 ad       	ldd	r22, Z+58	; 0x3a
    268c:	73 ad       	ldd	r23, Z+59	; 0x3b
    268e:	84 ad       	ldd	r24, Z+60	; 0x3c
    2690:	95 ad       	ldd	r25, Z+61	; 0x3d
    2692:	26 a5       	ldd	r18, Z+46	; 0x2e
    2694:	37 a5       	ldd	r19, Z+47	; 0x2f
    2696:	40 a9       	ldd	r20, Z+48	; 0x30
    2698:	51 a9       	ldd	r21, Z+49	; 0x31
    269a:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    269e:	6f 83       	std	Y+7, r22	; 0x07
    26a0:	78 87       	std	Y+8, r23	; 0x08
    26a2:	89 87       	std	Y+9, r24	; 0x09
    26a4:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    26a6:	e0 91 18 21 	lds	r30, 0x2118
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	ee 0f       	add	r30, r30
    26ae:	ff 1f       	adc	r31, r31
    26b0:	ee 0f       	add	r30, r30
    26b2:	ff 1f       	adc	r31, r31
    26b4:	ec 5f       	subi	r30, 0xFC	; 252
    26b6:	fe 4d       	sbci	r31, 0xDE	; 222
    26b8:	62 ad       	ldd	r22, Z+58	; 0x3a
    26ba:	73 ad       	ldd	r23, Z+59	; 0x3b
    26bc:	84 ad       	ldd	r24, Z+60	; 0x3c
    26be:	95 ad       	ldd	r25, Z+61	; 0x3d
    26c0:	26 a5       	ldd	r18, Z+46	; 0x2e
    26c2:	37 a5       	ldd	r19, Z+47	; 0x2f
    26c4:	40 a9       	ldd	r20, Z+48	; 0x30
    26c6:	51 a9       	ldd	r21, Z+49	; 0x31
    26c8:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    26cc:	1b 01       	movw	r2, r22
    26ce:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    26d0:	10 92 4a 21 	sts	0x214A, r1
    26d4:	10 92 4b 21 	sts	0x214B, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    26d8:	60 90 1e 21 	lds	r6, 0x211E
    26dc:	70 90 1f 21 	lds	r7, 0x211F
    26e0:	80 90 20 21 	lds	r8, 0x2120
    26e4:	90 90 21 21 	lds	r9, 0x2121
    26e8:	c4 01       	movw	r24, r8
    26ea:	b3 01       	movw	r22, r6
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e8       	ldi	r20, 0x80	; 128
    26f2:	50 e4       	ldi	r21, 0x40	; 64
    26f4:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    26f8:	a4 01       	movw	r20, r8
    26fa:	93 01       	movw	r18, r6
    26fc:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    2700:	5b 01       	movw	r10, r22
    2702:	6c 01       	movw	r12, r24
    2704:	6f 81       	ldd	r22, Y+7	; 0x07
    2706:	78 85       	ldd	r23, Y+8	; 0x08
    2708:	89 85       	ldd	r24, Y+9	; 0x09
    270a:	9a 85       	ldd	r25, Y+10	; 0x0a
    270c:	9b 01       	movw	r18, r22
    270e:	ac 01       	movw	r20, r24
    2710:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    2714:	7b 01       	movw	r14, r22
    2716:	8c 01       	movw	r16, r24
    2718:	c2 01       	movw	r24, r4
    271a:	b1 01       	movw	r22, r2
    271c:	a2 01       	movw	r20, r4
    271e:	91 01       	movw	r18, r2
    2720:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    2724:	9b 01       	movw	r18, r22
    2726:	ac 01       	movw	r20, r24
    2728:	c8 01       	movw	r24, r16
    272a:	b7 01       	movw	r22, r14
    272c:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    2730:	9b 01       	movw	r18, r22
    2732:	ac 01       	movw	r20, r24
    2734:	c6 01       	movw	r24, r12
    2736:	b5 01       	movw	r22, r10
    2738:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    273c:	0e 94 8d 44 	call	0x891a	; 0x891a <sqrt>
    2740:	7b 01       	movw	r14, r22
    2742:	8c 01       	movw	r16, r24
    2744:	6f 81       	ldd	r22, Y+7	; 0x07
    2746:	78 85       	ldd	r23, Y+8	; 0x08
    2748:	89 85       	ldd	r24, Y+9	; 0x09
    274a:	9a 85       	ldd	r25, Y+10	; 0x0a
    274c:	a2 01       	movw	r20, r4
    274e:	91 01       	movw	r18, r2
    2750:	0e 94 5b 43 	call	0x86b6	; 0x86b6 <hypot>
    2754:	9b 01       	movw	r18, r22
    2756:	ac 01       	movw	r20, r24
    2758:	17 fb       	bst	r17, 7
    275a:	10 95       	com	r17
    275c:	17 f9       	bld	r17, 7
    275e:	10 95       	com	r17
    2760:	c8 01       	movw	r24, r16
    2762:	b7 01       	movw	r22, r14
    2764:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    2768:	7b 01       	movw	r14, r22
    276a:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    276c:	a8 01       	movw	r20, r16
    276e:	97 01       	movw	r18, r14
    2770:	0e 94 d5 44 	call	0x89aa	; 0x89aa <__unordsf2>
    2774:	88 23       	and	r24, r24
    2776:	21 f0       	breq	.+8      	; 0x2780 <gc_execute_block+0x66e>
		FAIL(TG_FLOATING_POINT_ERROR); 
    2778:	81 e1       	ldi	r24, 0x11	; 17
    277a:	80 93 04 21 	sts	0x2104, r24
    277e:	65 c0       	rjmp	.+202    	; 0x284a <gc_execute_block+0x738>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2780:	e8 8d       	ldd	r30, Y+24	; 0x18
    2782:	e3 30       	cpi	r30, 0x03	; 3
    2784:	21 f4       	brne	.+8      	; 0x278e <gc_execute_block+0x67c>
		h_x2_div_d = -h_x2_div_d;
    2786:	17 fb       	bst	r17, 7
    2788:	10 95       	com	r17
    278a:	17 f9       	bld	r17, 7
    278c:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    278e:	c4 01       	movw	r24, r8
    2790:	b3 01       	movw	r22, r6
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	40 e0       	ldi	r20, 0x00	; 0
    2798:	50 e0       	ldi	r21, 0x00	; 0
    279a:	0e 94 5e 41 	call	0x82bc	; 0x82bc <__cmpsf2>
    279e:	88 23       	and	r24, r24
    27a0:	24 f4       	brge	.+8      	; 0x27aa <gc_execute_block+0x698>
		h_x2_div_d = -h_x2_div_d; 
    27a2:	17 fb       	bst	r17, 7
    27a4:	10 95       	com	r17
    27a6:	17 f9       	bld	r17, 7
    27a8:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    27aa:	80 91 17 21 	lds	r24, 0x2117
    27ae:	c8 2e       	mov	r12, r24
    27b0:	dd 24       	eor	r13, r13
    27b2:	cc 0c       	add	r12, r12
    27b4:	dd 1c       	adc	r13, r13
    27b6:	cc 0c       	add	r12, r12
    27b8:	dd 1c       	adc	r13, r13
    27ba:	2a e4       	ldi	r18, 0x4A	; 74
    27bc:	31 e2       	ldi	r19, 0x21	; 33
    27be:	c2 0e       	add	r12, r18
    27c0:	d3 1e       	adc	r13, r19
    27c2:	c2 01       	movw	r24, r4
    27c4:	b1 01       	movw	r22, r2
    27c6:	a8 01       	movw	r20, r16
    27c8:	97 01       	movw	r18, r14
    27ca:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    27ce:	9b 01       	movw	r18, r22
    27d0:	ac 01       	movw	r20, r24
    27d2:	6f 81       	ldd	r22, Y+7	; 0x07
    27d4:	78 85       	ldd	r23, Y+8	; 0x08
    27d6:	89 85       	ldd	r24, Y+9	; 0x09
    27d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27da:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e0       	ldi	r20, 0x00	; 0
    27e4:	5f e3       	ldi	r21, 0x3F	; 63
    27e6:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    27ea:	d6 01       	movw	r26, r12
    27ec:	6d 93       	st	X+, r22
    27ee:	7d 93       	st	X+, r23
    27f0:	8d 93       	st	X+, r24
    27f2:	9c 93       	st	X, r25
    27f4:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    27f6:	80 91 18 21 	lds	r24, 0x2118
    27fa:	c8 2e       	mov	r12, r24
    27fc:	dd 24       	eor	r13, r13
    27fe:	cc 0c       	add	r12, r12
    2800:	dd 1c       	adc	r13, r13
    2802:	cc 0c       	add	r12, r12
    2804:	dd 1c       	adc	r13, r13
    2806:	ea e4       	ldi	r30, 0x4A	; 74
    2808:	f1 e2       	ldi	r31, 0x21	; 33
    280a:	ce 0e       	add	r12, r30
    280c:	df 1e       	adc	r13, r31
    280e:	6f 81       	ldd	r22, Y+7	; 0x07
    2810:	78 85       	ldd	r23, Y+8	; 0x08
    2812:	89 85       	ldd	r24, Y+9	; 0x09
    2814:	9a 85       	ldd	r25, Y+10	; 0x0a
    2816:	a8 01       	movw	r20, r16
    2818:	97 01       	movw	r18, r14
    281a:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    281e:	9b 01       	movw	r18, r22
    2820:	ac 01       	movw	r20, r24
    2822:	c2 01       	movw	r24, r4
    2824:	b1 01       	movw	r22, r2
    2826:	0e 94 bf 40 	call	0x817e	; 0x817e <__addsf3>
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e0       	ldi	r20, 0x00	; 0
    2830:	5f e3       	ldi	r21, 0x3F	; 63
    2832:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    2836:	d6 01       	movw	r26, r12
    2838:	6d 93       	st	X+, r22
    283a:	7d 93       	st	X+, r23
    283c:	8d 93       	st	X+, r24
    283e:	9c 93       	st	X, r25
    2840:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    2842:	80 91 04 21 	lds	r24, 0x2104
    2846:	88 23       	and	r24, r24
    2848:	19 f0       	breq	.+6      	; 0x2850 <gc_execute_block+0x73e>
			return (gc.status);
    284a:	80 91 04 21 	lds	r24, 0x2104
    284e:	41 c1       	rjmp	.+642    	; 0x2ad2 <gc_execute_block+0x9c0>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    2850:	e0 91 17 21 	lds	r30, 0x2117
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	ee 0f       	add	r30, r30
    2858:	ff 1f       	adc	r31, r31
    285a:	ee 0f       	add	r30, r30
    285c:	ff 1f       	adc	r31, r31
    285e:	e6 5b       	subi	r30, 0xB6	; 182
    2860:	fe 4d       	sbci	r31, 0xDE	; 222
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	82 81       	ldd	r24, Z+2	; 0x02
    2868:	93 81       	ldd	r25, Z+3	; 0x03
    286a:	90 58       	subi	r25, 0x80	; 128
    286c:	e0 91 18 21 	lds	r30, 0x2118
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	ee 0f       	add	r30, r30
    2874:	ff 1f       	adc	r31, r31
    2876:	ee 0f       	add	r30, r30
    2878:	ff 1f       	adc	r31, r31
    287a:	e6 5b       	subi	r30, 0xB6	; 182
    287c:	fe 4d       	sbci	r31, 0xDE	; 222
    287e:	20 81       	ld	r18, Z
    2880:	31 81       	ldd	r19, Z+1	; 0x01
    2882:	42 81       	ldd	r20, Z+2	; 0x02
    2884:	53 81       	ldd	r21, Z+3	; 0x03
    2886:	50 58       	subi	r21, 0x80	; 128
    2888:	0e 94 4a 10 	call	0x2094	; 0x2094 <theta>
    288c:	6f 87       	std	Y+15, r22	; 0x0f
    288e:	78 8b       	std	Y+16, r23	; 0x10
    2890:	89 8b       	std	Y+17, r24	; 0x11
    2892:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    2894:	9b 01       	movw	r18, r22
    2896:	ac 01       	movw	r20, r24
    2898:	0e 94 d5 44 	call	0x89aa	; 0x89aa <__unordsf2>
    289c:	88 23       	and	r24, r24
    289e:	09 f0       	breq	.+2      	; 0x28a2 <gc_execute_block+0x790>
    28a0:	54 c0       	rjmp	.+168    	; 0x294a <gc_execute_block+0x838>
		FAIL(TG_ARC_SPECIFICATION_ERROR); 
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    28a2:	e0 91 17 21 	lds	r30, 0x2117
    28a6:	0e 2f       	mov	r16, r30
    28a8:	10 e0       	ldi	r17, 0x00	; 0
    28aa:	e0 91 18 21 	lds	r30, 0x2118
    28ae:	ce 2e       	mov	r12, r30
    28b0:	dd 24       	eor	r13, r13
    28b2:	00 0f       	add	r16, r16
    28b4:	11 1f       	adc	r17, r17
    28b6:	00 0f       	add	r16, r16
    28b8:	11 1f       	adc	r17, r17
    28ba:	0c 5f       	subi	r16, 0xFC	; 252
    28bc:	1e 4d       	sbci	r17, 0xDE	; 222
    28be:	f8 01       	movw	r30, r16
    28c0:	ea 5b       	subi	r30, 0xBA	; 186
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	d8 01       	movw	r26, r16
    28c6:	da 96       	adiw	r26, 0x3a	; 58
    28c8:	6d 91       	ld	r22, X+
    28ca:	7d 91       	ld	r23, X+
    28cc:	8d 91       	ld	r24, X+
    28ce:	9c 91       	ld	r25, X
    28d0:	dd 97       	sbiw	r26, 0x3d	; 61
    28d2:	20 81       	ld	r18, Z
    28d4:	31 81       	ldd	r19, Z+1	; 0x01
    28d6:	42 81       	ldd	r20, Z+2	; 0x02
    28d8:	53 81       	ldd	r21, Z+3	; 0x03
    28da:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    28de:	f8 01       	movw	r30, r16
    28e0:	26 a5       	ldd	r18, Z+46	; 0x2e
    28e2:	37 a5       	ldd	r19, Z+47	; 0x2f
    28e4:	40 a9       	ldd	r20, Z+48	; 0x30
    28e6:	51 a9       	ldd	r21, Z+49	; 0x31
    28e8:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    28ec:	7b 01       	movw	r14, r22
    28ee:	8c 01       	movw	r16, r24
    28f0:	cc 0c       	add	r12, r12
    28f2:	dd 1c       	adc	r13, r13
    28f4:	cc 0c       	add	r12, r12
    28f6:	dd 1c       	adc	r13, r13
    28f8:	24 e0       	ldi	r18, 0x04	; 4
    28fa:	31 e2       	ldi	r19, 0x21	; 33
    28fc:	c2 0e       	add	r12, r18
    28fe:	d3 1e       	adc	r13, r19
    2900:	f6 01       	movw	r30, r12
    2902:	ea 5b       	subi	r30, 0xBA	; 186
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	d6 01       	movw	r26, r12
    2908:	da 96       	adiw	r26, 0x3a	; 58
    290a:	6d 91       	ld	r22, X+
    290c:	7d 91       	ld	r23, X+
    290e:	8d 91       	ld	r24, X+
    2910:	9c 91       	ld	r25, X
    2912:	dd 97       	sbiw	r26, 0x3d	; 61
    2914:	20 81       	ld	r18, Z
    2916:	31 81       	ldd	r19, Z+1	; 0x01
    2918:	42 81       	ldd	r20, Z+2	; 0x02
    291a:	53 81       	ldd	r21, Z+3	; 0x03
    291c:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    2920:	f6 01       	movw	r30, r12
    2922:	26 a5       	ldd	r18, Z+46	; 0x2e
    2924:	37 a5       	ldd	r19, Z+47	; 0x2f
    2926:	40 a9       	ldd	r20, Z+48	; 0x30
    2928:	51 a9       	ldd	r21, Z+49	; 0x31
    292a:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    292e:	9b 01       	movw	r18, r22
    2930:	ac 01       	movw	r20, r24
    2932:	c8 01       	movw	r24, r16
    2934:	b7 01       	movw	r22, r14
    2936:	0e 94 4a 10 	call	0x2094	; 0x2094 <theta>
    293a:	7b 01       	movw	r14, r22
    293c:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    293e:	a8 01       	movw	r20, r16
    2940:	97 01       	movw	r18, r14
    2942:	0e 94 d5 44 	call	0x89aa	; 0x89aa <__unordsf2>
    2946:	88 23       	and	r24, r24
    2948:	19 f0       	breq	.+6      	; 0x2950 <gc_execute_block+0x83e>
		FAIL(TG_ARC_SPECIFICATION_ERROR); 
    294a:	83 e1       	ldi	r24, 0x13	; 19
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	c1 c0       	rjmp	.+386    	; 0x2ad2 <gc_execute_block+0x9c0>
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    2950:	c8 01       	movw	r24, r16
    2952:	b7 01       	movw	r22, r14
    2954:	2f 85       	ldd	r18, Y+15	; 0x0f
    2956:	38 89       	ldd	r19, Y+16	; 0x10
    2958:	49 89       	ldd	r20, Y+17	; 0x11
    295a:	5a 89       	ldd	r21, Y+18	; 0x12
    295c:	0e 94 5e 41 	call	0x82bc	; 0x82bc <__cmpsf2>
    2960:	88 23       	and	r24, r24
    2962:	54 f4       	brge	.+20     	; 0x2978 <gc_execute_block+0x866>
		theta_end += 2*M_PI;
    2964:	c8 01       	movw	r24, r16
    2966:	b7 01       	movw	r22, r14
    2968:	2b ed       	ldi	r18, 0xDB	; 219
    296a:	3f e0       	ldi	r19, 0x0F	; 15
    296c:	49 ec       	ldi	r20, 0xC9	; 201
    296e:	50 e4       	ldi	r21, 0x40	; 64
    2970:	0e 94 bf 40 	call	0x817e	; 0x817e <__addsf3>
    2974:	7b 01       	movw	r14, r22
    2976:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    2978:	c8 01       	movw	r24, r16
    297a:	b7 01       	movw	r22, r14
    297c:	2f 85       	ldd	r18, Y+15	; 0x0f
    297e:	38 89       	ldd	r19, Y+16	; 0x10
    2980:	49 89       	ldd	r20, Y+17	; 0x11
    2982:	5a 89       	ldd	r21, Y+18	; 0x12
    2984:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    2988:	6b 87       	std	Y+11, r22	; 0x0b
    298a:	7c 87       	std	Y+12, r23	; 0x0c
    298c:	8d 87       	std	Y+13, r24	; 0x0d
    298e:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2990:	80 91 10 21 	lds	r24, 0x2110
    2994:	83 30       	cpi	r24, 0x03	; 3
    2996:	71 f4       	brne	.+28     	; 0x29b4 <gc_execute_block+0x8a2>
		angular_travel = angular_travel - 2*M_PI;
    2998:	6b 85       	ldd	r22, Y+11	; 0x0b
    299a:	7c 85       	ldd	r23, Y+12	; 0x0c
    299c:	8d 85       	ldd	r24, Y+13	; 0x0d
    299e:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a0:	2b ed       	ldi	r18, 0xDB	; 219
    29a2:	3f e0       	ldi	r19, 0x0F	; 15
    29a4:	49 ec       	ldi	r20, 0xC9	; 201
    29a6:	50 e4       	ldi	r21, 0x40	; 64
    29a8:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    29ac:	6b 87       	std	Y+11, r22	; 0x0b
    29ae:	7c 87       	std	Y+12, r23	; 0x0c
    29b0:	8d 87       	std	Y+13, r24	; 0x0d
    29b2:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    29b4:	80 91 17 21 	lds	r24, 0x2117
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	2d 83       	std	Y+5, r18	; 0x05
    29be:	3e 83       	std	Y+6, r19	; 0x06
    29c0:	f9 01       	movw	r30, r18
    29c2:	ee 0f       	add	r30, r30
    29c4:	ff 1f       	adc	r31, r31
    29c6:	ee 0f       	add	r30, r30
    29c8:	ff 1f       	adc	r31, r31
    29ca:	e6 5b       	subi	r30, 0xB6	; 182
    29cc:	fe 4d       	sbci	r31, 0xDE	; 222
    29ce:	e0 80       	ld	r14, Z
    29d0:	f1 80       	ldd	r15, Z+1	; 0x01
    29d2:	02 81       	ldd	r16, Z+2	; 0x02
    29d4:	13 81       	ldd	r17, Z+3	; 0x03
    29d6:	80 91 18 21 	lds	r24, 0x2118
    29da:	a8 2f       	mov	r26, r24
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	ab 83       	std	Y+3, r26	; 0x03
    29e0:	bc 83       	std	Y+4, r27	; 0x04
    29e2:	fd 01       	movw	r30, r26
    29e4:	ee 0f       	add	r30, r30
    29e6:	ff 1f       	adc	r31, r31
    29e8:	ee 0f       	add	r30, r30
    29ea:	ff 1f       	adc	r31, r31
    29ec:	e6 5b       	subi	r30, 0xB6	; 182
    29ee:	fe 4d       	sbci	r31, 0xDE	; 222
    29f0:	20 81       	ld	r18, Z
    29f2:	31 81       	ldd	r19, Z+1	; 0x01
    29f4:	42 81       	ldd	r20, Z+2	; 0x02
    29f6:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    29f8:	80 91 19 21 	lds	r24, 0x2119
    29fc:	28 2e       	mov	r2, r24
    29fe:	33 24       	eor	r3, r3
    2a00:	f1 01       	movw	r30, r2
    2a02:	ee 0f       	add	r30, r30
    2a04:	ff 1f       	adc	r31, r31
    2a06:	ee 0f       	add	r30, r30
    2a08:	ff 1f       	adc	r31, r31
    2a0a:	ec 5f       	subi	r30, 0xFC	; 252
    2a0c:	fe 4d       	sbci	r31, 0xDE	; 222
    2a0e:	82 ad       	ldd	r24, Z+58	; 0x3a
    2a10:	93 ad       	ldd	r25, Z+59	; 0x3b
    2a12:	a4 ad       	ldd	r26, Z+60	; 0x3c
    2a14:	b5 ad       	ldd	r27, Z+61	; 0x3d
    2a16:	8c 8b       	std	Y+20, r24	; 0x14
    2a18:	9d 8b       	std	Y+21, r25	; 0x15
    2a1a:	ae 8b       	std	Y+22, r26	; 0x16
    2a1c:	bf 8b       	std	Y+23, r27	; 0x17
    2a1e:	a6 a4       	ldd	r10, Z+46	; 0x2e
    2a20:	b7 a4       	ldd	r11, Z+47	; 0x2f
    2a22:	c0 a8       	ldd	r12, Z+48	; 0x30
    2a24:	d1 a8       	ldd	r13, Z+49	; 0x31

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2a26:	90 91 11 21 	lds	r25, 0x2111
    2a2a:	9b 8b       	std	Y+19, r25	; 0x13
    2a2c:	99 23       	and	r25, r25
    2a2e:	49 f0       	breq	.+18     	; 0x2a42 <gc_execute_block+0x930>
    2a30:	40 90 2e 21 	lds	r4, 0x212E
    2a34:	50 90 2f 21 	lds	r5, 0x212F
    2a38:	60 90 30 21 	lds	r6, 0x2130
    2a3c:	70 90 31 21 	lds	r7, 0x2131
    2a40:	08 c0       	rjmp	.+16     	; 0x2a52 <gc_execute_block+0x940>
    2a42:	40 90 22 21 	lds	r4, 0x2122
    2a46:	50 90 23 21 	lds	r5, 0x2123
    2a4a:	60 90 24 21 	lds	r6, 0x2124
    2a4e:	70 90 25 21 	lds	r7, 0x2125
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2a52:	c8 01       	movw	r24, r16
    2a54:	b7 01       	movw	r22, r14
    2a56:	0e 94 5b 43 	call	0x86b6	; 0x86b6 <hypot>
    2a5a:	7b 01       	movw	r14, r22
    2a5c:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2a5e:	ad b7       	in	r26, 0x3d	; 61
    2a60:	be b7       	in	r27, 0x3e	; 62
    2a62:	1a 97       	sbiw	r26, 0x0a	; 10
    2a64:	ad bf       	out	0x3d, r26	; 61
    2a66:	be bf       	out	0x3e, r27	; 62
    2a68:	8d b6       	in	r8, 0x3d	; 61
    2a6a:	9e b6       	in	r9, 0x3e	; 62
    2a6c:	08 94       	sec
    2a6e:	81 1c       	adc	r8, r1
    2a70:	91 1c       	adc	r9, r1
    2a72:	6c 89       	ldd	r22, Y+20	; 0x14
    2a74:	7d 89       	ldd	r23, Y+21	; 0x15
    2a76:	8e 89       	ldd	r24, Y+22	; 0x16
    2a78:	9f 89       	ldd	r25, Y+23	; 0x17
    2a7a:	a6 01       	movw	r20, r12
    2a7c:	95 01       	movw	r18, r10
    2a7e:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    2a82:	5b 01       	movw	r10, r22
    2a84:	6c 01       	movw	r12, r24
    2a86:	2b 81       	ldd	r18, Y+3	; 0x03
    2a88:	3c 81       	ldd	r19, Y+4	; 0x04
    2a8a:	f4 01       	movw	r30, r8
    2a8c:	20 83       	st	Z, r18
    2a8e:	31 83       	std	Z+1, r19	; 0x01
    2a90:	22 82       	std	Z+2, r2	; 0x02
    2a92:	33 82       	std	Z+3, r3	; 0x03
    2a94:	d4 01       	movw	r26, r8
    2a96:	14 96       	adiw	r26, 0x04	; 4
    2a98:	4d 92       	st	X+, r4
    2a9a:	5d 92       	st	X+, r5
    2a9c:	6d 92       	st	X+, r6
    2a9e:	7c 92       	st	X, r7
    2aa0:	17 97       	sbiw	r26, 0x07	; 7
    2aa2:	eb 89       	ldd	r30, Y+19	; 0x13
    2aa4:	18 96       	adiw	r26, 0x08	; 8
    2aa6:	ec 93       	st	X, r30
    2aa8:	18 97       	sbiw	r26, 0x08	; 8
    2aaa:	19 96       	adiw	r26, 0x09	; 9
    2aac:	1c 92       	st	X, r1
    2aae:	6f 85       	ldd	r22, Y+15	; 0x0f
    2ab0:	78 89       	ldd	r23, Y+16	; 0x10
    2ab2:	89 89       	ldd	r24, Y+17	; 0x11
    2ab4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ab6:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ab8:	3c 85       	ldd	r19, Y+12	; 0x0c
    2aba:	4d 85       	ldd	r20, Y+13	; 0x0d
    2abc:	5e 85       	ldd	r21, Y+14	; 0x0e
    2abe:	8d 80       	ldd	r8, Y+5	; 0x05
    2ac0:	9e 80       	ldd	r9, Y+6	; 0x06
    2ac2:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <mc_arc>
	// has completed the arc. So the endpoint should be passed to the generator and
	// executed there.
//	gc.status = mc_line(gc.target[X_AXIS], gc.target[Y_AXIS], gc.target[Z_AXIS], 
//					   (gc.inverse_feed_rate_mode) ? gc.inverse_feed_rate : 
//						gc.feed_rate, gc.inverse_feed_rate_mode);
	return (gc.status);
    2ac6:	2d b7       	in	r18, 0x3d	; 61
    2ac8:	3e b7       	in	r19, 0x3e	; 62
    2aca:	26 5f       	subi	r18, 0xF6	; 246
    2acc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ace:	2d bf       	out	0x3d, r18	; 61
    2ad0:	3e bf       	out	0x3e, r19	; 62
										gc.inverse_feed_rate_mode); 
					break;
				}

				case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC: {
					gc.status = _gc_compute_arc(); 
    2ad2:	80 93 04 21 	sts	0x2104, r24
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_EAGAIN)) {
    2ad6:	80 91 04 21 	lds	r24, 0x2104
    2ada:	88 23       	and	r24, r24
    2adc:	11 f0       	breq	.+4      	; 0x2ae2 <gc_execute_block+0x9d0>
    2ade:	82 30       	cpi	r24, 0x02	; 2
    2ae0:	49 f4       	brne	.+18     	; 0x2af4 <gc_execute_block+0x9e2>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2ae2:	e2 e3       	ldi	r30, 0x32	; 50
    2ae4:	f1 e2       	ldi	r31, 0x21	; 33
    2ae6:	df 01       	movw	r26, r30
    2ae8:	1c 96       	adiw	r26, 0x0c	; 12
    2aea:	9c e0       	ldi	r25, 0x0C	; 12
    2aec:	0d 90       	ld	r0, X+
    2aee:	01 92       	st	Z+, r0
    2af0:	91 50       	subi	r25, 0x01	; 1
    2af2:	e1 f7       	brne	.-8      	; 0x2aec <gc_execute_block+0x9da>
	};
	return(gc.status);
}
    2af4:	68 96       	adiw	r28, 0x18	; 24
    2af6:	cd bf       	out	0x3d, r28	; 61
    2af8:	de bf       	out	0x3e, r29	; 62
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	ff 90       	pop	r15
    2b04:	ef 90       	pop	r14
    2b06:	df 90       	pop	r13
    2b08:	cf 90       	pop	r12
    2b0a:	bf 90       	pop	r11
    2b0c:	af 90       	pop	r10
    2b0e:	9f 90       	pop	r9
    2b10:	8f 90       	pop	r8
    2b12:	7f 90       	pop	r7
    2b14:	6f 90       	pop	r6
    2b16:	5f 90       	pop	r5
    2b18:	4f 90       	pop	r4
    2b1a:	3f 90       	pop	r3
    2b1c:	2f 90       	pop	r2
    2b1e:	08 95       	ret

00002b20 <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2b20:	ef 92       	push	r14
    2b22:	ff 92       	push	r15
    2b24:	0f 93       	push	r16
    2b26:	1f 93       	push	r17
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	8c 01       	movw	r16, r24
	char *comment=0;	// comment pointer - first char past opening paren
	uint8_t i=0; 		// index for incoming characters
	uint8_t j=0;		// index for normalized characters

	// discard deleted block
	if (block[0] == '/') {
    2b2e:	fc 01       	movw	r30, r24
    2b30:	80 81       	ld	r24, Z
    2b32:	8f 32       	cpi	r24, 0x2F	; 47
    2b34:	19 f0       	breq	.+6      	; 0x2b3c <gc_gcode_parser+0x1c>
    2b36:	ee 24       	eor	r14, r14
    2b38:	ff 24       	eor	r15, r15
    2b3a:	15 c0       	rjmp	.+42     	; 0x2b66 <gc_gcode_parser+0x46>
		block[0] = 0;
    2b3c:	f8 01       	movw	r30, r16
    2b3e:	10 82       	st	Z, r1
    2b40:	56 c0       	rjmp	.+172    	; 0x2bee <gc_gcode_parser+0xce>
		return;
	} 
	// normalize the comamnd block & mark the comment(if any)
	while ((c = toupper(block[i++])) != 0) {// NUL character
    2b42:	f3 94       	inc	r15
		if (c <= ' ') continue;				// toss WS & ctrl codes
    2b44:	81 32       	cpi	r24, 0x21	; 33
    2b46:	78 f0       	brcs	.+30     	; 0x2b66 <gc_gcode_parser+0x46>
    2b48:	ee 2d       	mov	r30, r14
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
		if (c == '(') {						// detect & handle comment
    2b4c:	88 32       	cpi	r24, 0x28	; 40
    2b4e:	39 f4       	brne	.+14     	; 0x2b5e <gc_gcode_parser+0x3e>
			block[j] = 0;
    2b50:	e0 0f       	add	r30, r16
    2b52:	f1 1f       	adc	r31, r17
    2b54:	10 82       	st	Z, r1
			comment = &block[i]; 
    2b56:	e8 01       	movw	r28, r16
    2b58:	cf 0d       	add	r28, r15
    2b5a:	d1 1d       	adc	r29, r1
    2b5c:	0f c0       	rjmp	.+30     	; 0x2b7c <gc_gcode_parser+0x5c>
			break;
		}
		block[j++] = c;
    2b5e:	e0 0f       	add	r30, r16
    2b60:	f1 1f       	adc	r31, r17
    2b62:	80 83       	st	Z, r24
    2b64:	e3 94       	inc	r14
	if (block[0] == '/') {
		block[0] = 0;
		return;
	} 
	// normalize the comamnd block & mark the comment(if any)
	while ((c = toupper(block[i++])) != 0) {// NUL character
    2b66:	f8 01       	movw	r30, r16
    2b68:	ef 0d       	add	r30, r15
    2b6a:	f1 1d       	adc	r31, r1
    2b6c:	80 81       	ld	r24, Z
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	0e 94 d5 47 	call	0x8faa	; 0x8faa <toupper>
    2b74:	88 23       	and	r24, r24
    2b76:	29 f7       	brne	.-54     	; 0x2b42 <gc_gcode_parser+0x22>
    2b78:	c0 e0       	ldi	r28, 0x00	; 0
    2b7a:	d0 e0       	ldi	r29, 0x00	; 0
			comment = &block[i]; 
			break;
		}
		block[j++] = c;
	}
	block[j] = 0;
    2b7c:	f8 01       	movw	r30, r16
    2b7e:	ee 0d       	add	r30, r14
    2b80:	f1 1d       	adc	r31, r1
    2b82:	10 82       	st	Z, r1
	if (comment) {
    2b84:	20 97       	sbiw	r28, 0x00	; 0
    2b86:	99 f1       	breq	.+102    	; 0x2bee <gc_gcode_parser+0xce>
		if ((toupper(comment[0]) == 'M') && 
    2b88:	88 81       	ld	r24, Y
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	0e 94 d5 47 	call	0x8faa	; 0x8faa <toupper>
    2b90:	8d 34       	cpi	r24, 0x4D	; 77
    2b92:	91 05       	cpc	r25, r1
    2b94:	61 f5       	brne	.+88     	; 0x2bee <gc_gcode_parser+0xce>
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	0e 94 d5 47 	call	0x8faa	; 0x8faa <toupper>
    2b9e:	83 35       	cpi	r24, 0x53	; 83
    2ba0:	91 05       	cpc	r25, r1
    2ba2:	29 f5       	brne	.+74     	; 0x2bee <gc_gcode_parser+0xce>
    2ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	0e 94 d5 47 	call	0x8faa	; 0x8faa <toupper>
    2bac:	87 34       	cpi	r24, 0x47	; 71
    2bae:	91 05       	cpc	r25, r1
    2bb0:	f1 f4       	brne	.+60     	; 0x2bee <gc_gcode_parser+0xce>
    2bb2:	04 c0       	rjmp	.+8      	; 0x2bbc <gc_gcode_parser+0x9c>
			(toupper(comment[1]) == 'S') &&
			(toupper(comment[2]) == 'G')) {
			i=0;
			while ((c = comment[i++]) != 0) {	// remove trailing paren
				if (c == ')') {
    2bb4:	99 32       	cpi	r25, 0x29	; 41
    2bb6:	19 f4       	brne	.+6      	; 0x2bbe <gc_gcode_parser+0x9e>
					comment[--i] = 0;
    2bb8:	10 82       	st	Z, r1
    2bba:	08 c0       	rjmp	.+16     	; 0x2bcc <gc_gcode_parser+0xac>
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
	if (comment) {
		if ((toupper(comment[0]) == 'M') && 
			(toupper(comment[1]) == 'S') &&
			(toupper(comment[2]) == 'G')) {
			i=0;
			while ((c = comment[i++]) != 0) {	// remove trailing paren
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e8 0f       	add	r30, r24
    2bc2:	f1 1d       	adc	r31, r1
    2bc4:	90 81       	ld	r25, Z
    2bc6:	8f 5f       	subi	r24, 0xFF	; 255
    2bc8:	99 23       	and	r25, r25
    2bca:	a1 f7       	brne	.-24     	; 0x2bb4 <gc_gcode_parser+0x94>
				if (c == ')') {
					comment[--i] = 0;
					break;
				}
			}
			printf_P(PSTR("%s\n"), (comment+3));
    2bcc:	00 d0       	rcall	.+0      	; 0x2bce <gc_gcode_parser+0xae>
    2bce:	0f 92       	push	r0
    2bd0:	8b e3       	ldi	r24, 0x3B	; 59
    2bd2:	92 e0       	ldi	r25, 0x02	; 2
    2bd4:	ed b7       	in	r30, 0x3d	; 61
    2bd6:	fe b7       	in	r31, 0x3e	; 62
    2bd8:	81 83       	std	Z+1, r24	; 0x01
    2bda:	92 83       	std	Z+2, r25	; 0x02
    2bdc:	23 96       	adiw	r28, 0x03	; 3
    2bde:	c3 83       	std	Z+3, r28	; 0x03
    2be0:	d4 83       	std	Z+4, r29	; 0x04
    2be2:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
 */

uint8_t gc_gcode_parser(char *block)
{
	_gc_normalize_gcode_block(block);
	if (block[0] == 0) { 					// ignore comments (stripped)
    2bee:	f8 01       	movw	r30, r16
    2bf0:	80 81       	ld	r24, Z
    2bf2:	88 23       	and	r24, r24
    2bf4:	71 f0       	breq	.+28     	; 0x2c12 <gc_gcode_parser+0xf2>
		return(TG_OK);
	}
	if (block[0] == 'Q') {					// quit gcode mode
    2bf6:	81 35       	cpi	r24, 0x51	; 81
    2bf8:	11 f4       	brne	.+4      	; 0x2bfe <gc_gcode_parser+0xde>
    2bfa:	8b e0       	ldi	r24, 0x0B	; 11
    2bfc:	0a c0       	rjmp	.+20     	; 0x2c12 <gc_gcode_parser+0xf2>
		return(TG_QUIT);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2bfe:	c8 01       	movw	r24, r16
    2c00:	0e 94 89 10 	call	0x2112	; 0x2112 <gc_execute_block>
    2c04:	80 93 04 21 	sts	0x2104, r24
	tg_print_status(gc.status, block);
    2c08:	b8 01       	movw	r22, r16
    2c0a:	0e 94 05 2b 	call	0x560a	; 0x560a <tg_print_status>
	return (gc.status);
    2c0e:	80 91 04 21 	lds	r24, 0x2104
}
    2c12:	df 91       	pop	r29
    2c14:	cf 91       	pop	r28
    2c16:	1f 91       	pop	r17
    2c18:	0f 91       	pop	r16
    2c1a:	ff 90       	pop	r15
    2c1c:	ef 90       	pop	r14
    2c1e:	08 95       	ret

00002c20 <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2c20:	cf 92       	push	r12
    2c22:	df 92       	push	r13
    2c24:	ef 92       	push	r14
    2c26:	ff 92       	push	r15
    2c28:	0f 93       	push	r16
    2c2a:	1f 93       	push	r17
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	c1 e8       	ldi	r28, 0x81	; 129
    2c32:	d2 e2       	ldi	r29, 0x22	; 34
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2c34:	68 81       	ld	r22, Y
    2c36:	70 e0       	ldi	r23, 0x00	; 0
    2c38:	88 27       	eor	r24, r24
    2c3a:	77 fd       	sbrc	r23, 7
    2c3c:	80 95       	com	r24
    2c3e:	98 2f       	mov	r25, r24
    2c40:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    2c44:	9b 01       	movw	r18, r22
    2c46:	ac 01       	movw	r20, r24
    2c48:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4a:	78 85       	ldd	r23, Y+8	; 0x08
    2c4c:	89 85       	ldd	r24, Y+9	; 0x09
    2c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c50:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    2c54:	9b 01       	movw	r18, r22
    2c56:	ac 01       	movw	r20, r24
    2c58:	60 e0       	ldi	r22, 0x00	; 0
    2c5a:	70 e0       	ldi	r23, 0x00	; 0
    2c5c:	84 eb       	ldi	r24, 0xB4	; 180
    2c5e:	93 e4       	ldi	r25, 0x43	; 67
    2c60:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    2c64:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c66:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c68:	4d 85       	ldd	r20, Y+13	; 0x0d
    2c6a:	5e 85       	ldd	r21, Y+14	; 0x0e
    2c6c:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    2c70:	6b 8b       	std	Y+19, r22	; 0x13
    2c72:	7c 8b       	std	Y+20, r23	; 0x14
    2c74:	8d 8b       	std	Y+21, r24	; 0x15
    2c76:	9e 8b       	std	Y+22, r25	; 0x16
    2c78:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    2c7a:	82 e2       	ldi	r24, 0x22	; 34
    2c7c:	c1 3e       	cpi	r28, 0xE1	; 225
    2c7e:	d8 07       	cpc	r29, r24
    2c80:	c9 f6       	brne	.-78     	; 0x2c34 <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    2c82:	00 91 81 22 	lds	r16, 0x2281
    2c86:	10 e0       	ldi	r17, 0x00	; 0
    2c88:	b8 01       	movw	r22, r16
    2c8a:	88 27       	eor	r24, r24
    2c8c:	77 fd       	sbrc	r23, 7
    2c8e:	80 95       	com	r24
    2c90:	98 2f       	mov	r25, r24
    2c92:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    2c96:	9b 01       	movw	r18, r22
    2c98:	ac 01       	movw	r20, r24
    2c9a:	60 91 88 22 	lds	r22, 0x2288
    2c9e:	70 91 89 22 	lds	r23, 0x2289
    2ca2:	80 91 8a 22 	lds	r24, 0x228A
    2ca6:	90 91 8b 22 	lds	r25, 0x228B
    2caa:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    2cae:	9b 01       	movw	r18, r22
    2cb0:	ac 01       	movw	r20, r24
    2cb2:	60 e0       	ldi	r22, 0x00	; 0
    2cb4:	70 e0       	ldi	r23, 0x00	; 0
    2cb6:	84 eb       	ldi	r24, 0xB4	; 180
    2cb8:	93 e4       	ldi	r25, 0x43	; 67
    2cba:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    2cbe:	6b 01       	movw	r12, r22
    2cc0:	7c 01       	movw	r14, r24
    2cc2:	80 91 86 22 	lds	r24, 0x2286
    2cc6:	90 91 87 22 	lds	r25, 0x2287
    2cca:	08 9f       	mul	r16, r24
    2ccc:	b0 01       	movw	r22, r0
    2cce:	09 9f       	mul	r16, r25
    2cd0:	70 0d       	add	r23, r0
    2cd2:	18 9f       	mul	r17, r24
    2cd4:	70 0d       	add	r23, r0
    2cd6:	11 24       	eor	r1, r1
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	0e 94 fe 41 	call	0x83fc	; 0x83fc <__floatunsisf>
    2ce0:	a7 01       	movw	r20, r14
    2ce2:	96 01       	movw	r18, r12
    2ce4:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    2ce8:	60 93 79 22 	sts	0x2279, r22
    2cec:	70 93 7a 22 	sts	0x227A, r23
    2cf0:	80 93 7b 22 	sts	0x227B, r24
    2cf4:	90 93 7c 22 	sts	0x227C, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    2cf8:	80 91 84 22 	lds	r24, 0x2284
    2cfc:	90 91 85 22 	lds	r25, 0x2285
    2d00:	08 9f       	mul	r16, r24
    2d02:	b0 01       	movw	r22, r0
    2d04:	09 9f       	mul	r16, r25
    2d06:	70 0d       	add	r23, r0
    2d08:	18 9f       	mul	r17, r24
    2d0a:	70 0d       	add	r23, r0
    2d0c:	11 24       	eor	r1, r1
    2d0e:	80 e0       	ldi	r24, 0x00	; 0
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	0e 94 fe 41 	call	0x83fc	; 0x83fc <__floatunsisf>
    2d16:	a7 01       	movw	r20, r14
    2d18:	96 01       	movw	r18, r12
    2d1a:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    2d1e:	60 93 7d 22 	sts	0x227D, r22
    2d22:	70 93 7e 22 	sts	0x227E, r23
    2d26:	80 93 7f 22 	sts	0x227F, r24
    2d2a:	90 93 80 22 	sts	0x2280, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    2d2e:	df 91       	pop	r29
    2d30:	cf 91       	pop	r28
    2d32:	1f 91       	pop	r17
    2d34:	0f 91       	pop	r16
    2d36:	ff 90       	pop	r15
    2d38:	ef 90       	pop	r14
    2d3a:	df 90       	pop	r13
    2d3c:	cf 90       	pop	r12
    2d3e:	08 95       	ret

00002d40 <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    2d40:	e3 e7       	ldi	r30, 0x73	; 115
    2d42:	f2 e2       	ldi	r31, 0x22	; 34
    2d44:	84 e6       	ldi	r24, 0x64	; 100
    2d46:	80 93 73 22 	sts	0x2273, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2d4a:	8d ec       	ldi	r24, 0xCD	; 205
    2d4c:	9c ec       	ldi	r25, 0xCC	; 204
    2d4e:	ac e4       	ldi	r26, 0x4C	; 76
    2d50:	bd e3       	ldi	r27, 0x3D	; 61
    2d52:	80 93 75 22 	sts	0x2275, r24
    2d56:	90 93 76 22 	sts	0x2276, r25
    2d5a:	a0 93 77 22 	sts	0x2277, r26
    2d5e:	b0 93 78 22 	sts	0x2278, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2d62:	8c ed       	ldi	r24, 0xDC	; 220
    2d64:	95 e0       	ldi	r25, 0x05	; 5
    2d66:	80 93 84 22 	sts	0x2284, r24
    2d6a:	90 93 85 22 	sts	0x2285, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2d6e:	80 93 9c 22 	sts	0x229C, r24
    2d72:	90 93 9d 22 	sts	0x229D, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2d76:	80 93 b4 22 	sts	0x22B4, r24
    2d7a:	90 93 b5 22 	sts	0x22B5, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2d7e:	80 93 cc 22 	sts	0x22CC, r24
    2d82:	90 93 cd 22 	sts	0x22CD, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2d86:	80 93 86 22 	sts	0x2286, r24
    2d8a:	90 93 87 22 	sts	0x2287, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2d8e:	80 93 9e 22 	sts	0x229E, r24
    2d92:	90 93 9f 22 	sts	0x229F, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2d96:	80 93 b6 22 	sts	0x22B6, r24
    2d9a:	90 93 b7 22 	sts	0x22B7, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2d9e:	80 93 ce 22 	sts	0x22CE, r24
    2da2:	90 93 cf 22 	sts	0x22CF, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2da6:	86 e6       	ldi	r24, 0x66	; 102
    2da8:	96 e6       	ldi	r25, 0x66	; 102
    2daa:	a6 ee       	ldi	r26, 0xE6	; 230
    2dac:	bf e3       	ldi	r27, 0x3F	; 63
    2dae:	80 93 88 22 	sts	0x2288, r24
    2db2:	90 93 89 22 	sts	0x2289, r25
    2db6:	a0 93 8a 22 	sts	0x228A, r26
    2dba:	b0 93 8b 22 	sts	0x228B, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2dbe:	80 93 a0 22 	sts	0x22A0, r24
    2dc2:	90 93 a1 22 	sts	0x22A1, r25
    2dc6:	a0 93 a2 22 	sts	0x22A2, r26
    2dca:	b0 93 a3 22 	sts	0x22A3, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2dce:	80 93 b8 22 	sts	0x22B8, r24
    2dd2:	90 93 b9 22 	sts	0x22B9, r25
    2dd6:	a0 93 ba 22 	sts	0x22BA, r26
    2dda:	b0 93 bb 22 	sts	0x22BB, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2dde:	80 93 d0 22 	sts	0x22D0, r24
    2de2:	90 93 d1 22 	sts	0x22D1, r25
    2de6:	a0 93 d2 22 	sts	0x22D2, r26
    2dea:	b0 93 d3 22 	sts	0x22D3, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    2dee:	8c e5       	ldi	r24, 0x5C	; 92
    2df0:	9f e8       	ldi	r25, 0x8F	; 143
    2df2:	a2 ea       	ldi	r26, 0xA2	; 162
    2df4:	bf e3       	ldi	r27, 0x3F	; 63
    2df6:	80 93 8c 22 	sts	0x228C, r24
    2dfa:	90 93 8d 22 	sts	0x228D, r25
    2dfe:	a0 93 8e 22 	sts	0x228E, r26
    2e02:	b0 93 8f 22 	sts	0x228F, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    2e06:	80 93 a4 22 	sts	0x22A4, r24
    2e0a:	90 93 a5 22 	sts	0x22A5, r25
    2e0e:	a0 93 a6 22 	sts	0x22A6, r26
    2e12:	b0 93 a7 22 	sts	0x22A7, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    2e16:	80 93 bc 22 	sts	0x22BC, r24
    2e1a:	90 93 bd 22 	sts	0x22BD, r25
    2e1e:	a0 93 be 22 	sts	0x22BE, r26
    2e22:	b0 93 bf 22 	sts	0x22BF, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    2e26:	80 93 d4 22 	sts	0x22D4, r24
    2e2a:	90 93 d5 22 	sts	0x22D5, r25
    2e2e:	a0 93 d6 22 	sts	0x22D6, r26
    2e32:	b0 93 d7 22 	sts	0x22D7, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	a8 ec       	ldi	r26, 0xC8	; 200
    2e3c:	b3 e4       	ldi	r27, 0x43	; 67
    2e3e:	80 93 90 22 	sts	0x2290, r24
    2e42:	90 93 91 22 	sts	0x2291, r25
    2e46:	a0 93 92 22 	sts	0x2292, r26
    2e4a:	b0 93 93 22 	sts	0x2293, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    2e4e:	80 93 a8 22 	sts	0x22A8, r24
    2e52:	90 93 a9 22 	sts	0x22A9, r25
    2e56:	a0 93 aa 22 	sts	0x22AA, r26
    2e5a:	b0 93 ab 22 	sts	0x22AB, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    2e5e:	80 e0       	ldi	r24, 0x00	; 0
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	a6 e9       	ldi	r26, 0x96	; 150
    2e64:	b3 e4       	ldi	r27, 0x43	; 67
    2e66:	80 93 c0 22 	sts	0x22C0, r24
    2e6a:	90 93 c1 22 	sts	0x22C1, r25
    2e6e:	a0 93 c2 22 	sts	0x22C2, r26
    2e72:	b0 93 c3 22 	sts	0x22C3, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	a0 e8       	ldi	r26, 0x80	; 128
    2e7c:	bf eb       	ldi	r27, 0xBF	; 191
    2e7e:	80 93 d8 22 	sts	0x22D8, r24
    2e82:	90 93 d9 22 	sts	0x22D9, r25
    2e86:	a0 93 da 22 	sts	0x22DA, r26
    2e8a:	b0 93 db 22 	sts	0x22DB, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    2e8e:	88 e0       	ldi	r24, 0x08	; 8
    2e90:	80 93 81 22 	sts	0x2281, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    2e94:	80 93 99 22 	sts	0x2299, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    2e98:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A].microstep = A_MICROSTEPS;
    2e9a:	80 93 c9 22 	sts	0x22C9, r24

	cfg.a[X].polarity = X_POLARITY;
    2e9e:	10 92 83 22 	sts	0x2283, r1
	cfg.a[Y].polarity = Y_POLARITY;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	80 93 9b 22 	sts	0x229B, r24
	cfg.a[Z].polarity = Z_POLARITY;
    2ea8:	10 92 b3 22 	sts	0x22B3, r1
	cfg.a[A].polarity = A_POLARITY;
    2eac:	10 92 cb 22 	sts	0x22CB, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    2eb0:	80 93 98 22 	sts	0x2298, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    2eb4:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    2eb6:	80 93 c8 22 	sts	0x22C8, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    2eba:	10 92 e0 22 	sts	0x22E0, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    2ebe:	80 93 82 22 	sts	0x2282, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    2ec2:	80 93 9a 22 	sts	0x229A, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    2ec6:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    2ec8:	80 93 ca 22 	sts	0x22CA, r24

	_cfg_computed();		// generate computed values from the above
    2ecc:	0e 94 10 16 	call	0x2c20	; 0x2c20 <_cfg_computed>
}
    2ed0:	08 95       	ret

00002ed2 <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2ed2:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <cfg_reset>
}
    2ed6:	08 95       	ret

00002ed8 <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	63 e7       	ldi	r22, 0x73	; 115
    2ede:	72 e2       	ldi	r23, 0x22	; 34
    2ee0:	4e e6       	ldi	r20, 0x6E	; 110
    2ee2:	50 e0       	ldi	r21, 0x00	; 0
    2ee4:	0e 94 02 2a 	call	0x5404	; 0x5404 <memcpy_to_eeprom_with_checksum>
}
    2ee8:	08 95       	ret

00002eea <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	0e 94 54 29 	call	0x52a8	; 0x52a8 <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    2ef2:	84 36       	cpi	r24, 0x64	; 100
    2ef4:	19 f0       	breq	.+6      	; 0x2efc <cfg_read+0x12>
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	0d c0       	rjmp	.+26     	; 0x2f16 <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    2efc:	83 e7       	ldi	r24, 0x73	; 115
    2efe:	92 e2       	ldi	r25, 0x22	; 34
    2f00:	60 e0       	ldi	r22, 0x00	; 0
    2f02:	70 e0       	ldi	r23, 0x00	; 0
    2f04:	4e e6       	ldi	r20, 0x6E	; 110
    2f06:	50 e0       	ldi	r21, 0x00	; 0
    2f08:	0e 94 5e 29 	call	0x52bc	; 0x52bc <memcpy_from_eeprom_with_checksum>
    2f0c:	00 97       	sbiw	r24, 0x00	; 0
    2f0e:	11 f0       	breq	.+4      	; 0x2f14 <cfg_read+0x2a>
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    2f16:	c9 01       	movw	r24, r18
    2f18:	08 95       	ret

00002f1a <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    2f1a:	ef 92       	push	r14
    2f1c:	ff 92       	push	r15
    2f1e:	0f 93       	push	r16
    2f20:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    2f22:	e8 2e       	mov	r14, r24
    2f24:	ff 24       	eor	r15, r15
    2f26:	87 01       	movw	r16, r14
    2f28:	00 0f       	add	r16, r16
    2f2a:	11 1f       	adc	r17, r17
    2f2c:	f8 01       	movw	r30, r16
    2f2e:	e9 5b       	subi	r30, 0xB9	; 185
    2f30:	fd 4f       	sbci	r31, 0xFD	; 253
    2f32:	25 91       	lpm	r18, Z+
    2f34:	34 91       	lpm	r19, Z+
    2f36:	00 d0       	rcall	.+0      	; 0x2f38 <_cfg_dump_axis+0x1e>
    2f38:	0f 92       	push	r0
    2f3a:	83 ea       	ldi	r24, 0xA3	; 163
    2f3c:	95 e0       	ldi	r25, 0x05	; 5
    2f3e:	ad b7       	in	r26, 0x3d	; 61
    2f40:	be b7       	in	r27, 0x3e	; 62
    2f42:	11 96       	adiw	r26, 0x01	; 1
    2f44:	8d 93       	st	X+, r24
    2f46:	9c 93       	st	X, r25
    2f48:	12 97       	sbiw	r26, 0x02	; 2
    2f4a:	13 96       	adiw	r26, 0x03	; 3
    2f4c:	2d 93       	st	X+, r18
    2f4e:	3c 93       	st	X, r19
    2f50:	14 97       	sbiw	r26, 0x04	; 4
    2f52:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    2f56:	8b e6       	ldi	r24, 0x6B	; 107
    2f58:	95 e0       	ldi	r25, 0x05	; 5
    2f5a:	ed b7       	in	r30, 0x3d	; 61
    2f5c:	fe b7       	in	r31, 0x3e	; 62
    2f5e:	81 83       	std	Z+1, r24	; 0x01
    2f60:	92 83       	std	Z+2, r25	; 0x02
    2f62:	0e 0d       	add	r16, r14
    2f64:	1f 1d       	adc	r17, r15
    2f66:	83 e0       	ldi	r24, 0x03	; 3
    2f68:	00 0f       	add	r16, r16
    2f6a:	11 1f       	adc	r17, r17
    2f6c:	8a 95       	dec	r24
    2f6e:	e1 f7       	brne	.-8      	; 0x2f68 <_cfg_dump_axis+0x4e>
    2f70:	0d 58       	subi	r16, 0x8D	; 141
    2f72:	1d 4d       	sbci	r17, 0xDD	; 221
    2f74:	d8 01       	movw	r26, r16
    2f76:	51 96       	adiw	r26, 0x11	; 17
    2f78:	8d 91       	ld	r24, X+
    2f7a:	9c 91       	ld	r25, X
    2f7c:	52 97       	sbiw	r26, 0x12	; 18
    2f7e:	83 83       	std	Z+3, r24	; 0x03
    2f80:	94 83       	std	Z+4, r25	; 0x04
    2f82:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    2f86:	83 e3       	ldi	r24, 0x33	; 51
    2f88:	95 e0       	ldi	r25, 0x05	; 5
    2f8a:	ed b7       	in	r30, 0x3d	; 61
    2f8c:	fe b7       	in	r31, 0x3e	; 62
    2f8e:	81 83       	std	Z+1, r24	; 0x01
    2f90:	92 83       	std	Z+2, r25	; 0x02
    2f92:	d8 01       	movw	r26, r16
    2f94:	53 96       	adiw	r26, 0x13	; 19
    2f96:	8d 91       	ld	r24, X+
    2f98:	9c 91       	ld	r25, X
    2f9a:	54 97       	sbiw	r26, 0x14	; 20
    2f9c:	83 83       	std	Z+3, r24	; 0x03
    2f9e:	94 83       	std	Z+4, r25	; 0x04
    2fa0:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    2fa4:	ed b7       	in	r30, 0x3d	; 61
    2fa6:	fe b7       	in	r31, 0x3e	; 62
    2fa8:	31 96       	adiw	r30, 0x01	; 1
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	95 e0       	ldi	r25, 0x05	; 5
    2fae:	ad b7       	in	r26, 0x3d	; 61
    2fb0:	be b7       	in	r27, 0x3e	; 62
    2fb2:	11 96       	adiw	r26, 0x01	; 1
    2fb4:	8d 93       	st	X+, r24
    2fb6:	9c 93       	st	X, r25
    2fb8:	12 97       	sbiw	r26, 0x02	; 2
    2fba:	d8 01       	movw	r26, r16
    2fbc:	1e 96       	adiw	r26, 0x0e	; 14
    2fbe:	8c 91       	ld	r24, X
    2fc0:	82 83       	std	Z+2, r24	; 0x02
    2fc2:	13 82       	std	Z+3, r1	; 0x03
    2fc4:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    2fc8:	0f 92       	push	r0
    2fca:	0f 92       	push	r0
    2fcc:	89 ec       	ldi	r24, 0xC9	; 201
    2fce:	94 e0       	ldi	r25, 0x04	; 4
    2fd0:	ed b7       	in	r30, 0x3d	; 61
    2fd2:	fe b7       	in	r31, 0x3e	; 62
    2fd4:	81 83       	std	Z+1, r24	; 0x01
    2fd6:	92 83       	std	Z+2, r25	; 0x02
    2fd8:	f8 01       	movw	r30, r16
    2fda:	85 89       	ldd	r24, Z+21	; 0x15
    2fdc:	96 89       	ldd	r25, Z+22	; 0x16
    2fde:	a7 89       	ldd	r26, Z+23	; 0x17
    2fe0:	b0 8d       	ldd	r27, Z+24	; 0x18
    2fe2:	ed b7       	in	r30, 0x3d	; 61
    2fe4:	fe b7       	in	r31, 0x3e	; 62
    2fe6:	83 83       	std	Z+3, r24	; 0x03
    2fe8:	94 83       	std	Z+4, r25	; 0x04
    2fea:	a5 83       	std	Z+5, r26	; 0x05
    2fec:	b6 83       	std	Z+6, r27	; 0x06
    2fee:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    2ff2:	86 e9       	ldi	r24, 0x96	; 150
    2ff4:	94 e0       	ldi	r25, 0x04	; 4
    2ff6:	ad b7       	in	r26, 0x3d	; 61
    2ff8:	be b7       	in	r27, 0x3e	; 62
    2ffa:	11 96       	adiw	r26, 0x01	; 1
    2ffc:	8d 93       	st	X+, r24
    2ffe:	9c 93       	st	X, r25
    3000:	12 97       	sbiw	r26, 0x02	; 2
    3002:	f8 01       	movw	r30, r16
    3004:	81 8d       	ldd	r24, Z+25	; 0x19
    3006:	92 8d       	ldd	r25, Z+26	; 0x1a
    3008:	a3 8d       	ldd	r26, Z+27	; 0x1b
    300a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    300c:	ed b7       	in	r30, 0x3d	; 61
    300e:	fe b7       	in	r31, 0x3e	; 62
    3010:	83 83       	std	Z+3, r24	; 0x03
    3012:	94 83       	std	Z+4, r25	; 0x04
    3014:	a5 83       	std	Z+5, r26	; 0x05
    3016:	b6 83       	std	Z+6, r27	; 0x06
    3018:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    301c:	83 e6       	ldi	r24, 0x63	; 99
    301e:	94 e0       	ldi	r25, 0x04	; 4
    3020:	ad b7       	in	r26, 0x3d	; 61
    3022:	be b7       	in	r27, 0x3e	; 62
    3024:	11 96       	adiw	r26, 0x01	; 1
    3026:	8d 93       	st	X+, r24
    3028:	9c 93       	st	X, r25
    302a:	12 97       	sbiw	r26, 0x02	; 2
    302c:	f8 01       	movw	r30, r16
    302e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3030:	96 8d       	ldd	r25, Z+30	; 0x1e
    3032:	a7 8d       	ldd	r26, Z+31	; 0x1f
    3034:	b0 a1       	ldd	r27, Z+32	; 0x20
    3036:	ed b7       	in	r30, 0x3d	; 61
    3038:	fe b7       	in	r31, 0x3e	; 62
    303a:	83 83       	std	Z+3, r24	; 0x03
    303c:	94 83       	std	Z+4, r25	; 0x04
    303e:	a5 83       	std	Z+5, r26	; 0x05
    3040:	b6 83       	std	Z+6, r27	; 0x06
    3042:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	ed b7       	in	r30, 0x3d	; 61
    304c:	fe b7       	in	r31, 0x3e	; 62
    304e:	31 96       	adiw	r30, 0x01	; 1
    3050:	82 e3       	ldi	r24, 0x32	; 50
    3052:	94 e0       	ldi	r25, 0x04	; 4
    3054:	ad b7       	in	r26, 0x3d	; 61
    3056:	be b7       	in	r27, 0x3e	; 62
    3058:	11 96       	adiw	r26, 0x01	; 1
    305a:	8d 93       	st	X+, r24
    305c:	9c 93       	st	X, r25
    305e:	12 97       	sbiw	r26, 0x02	; 2
    3060:	d8 01       	movw	r26, r16
    3062:	95 96       	adiw	r26, 0x25	; 37
    3064:	8c 91       	ld	r24, X
    3066:	82 83       	std	Z+2, r24	; 0x02
    3068:	13 82       	std	Z+3, r1	; 0x03
    306a:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    306e:	ed b7       	in	r30, 0x3d	; 61
    3070:	fe b7       	in	r31, 0x3e	; 62
    3072:	31 96       	adiw	r30, 0x01	; 1
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	94 e0       	ldi	r25, 0x04	; 4
    3078:	ad b7       	in	r26, 0x3d	; 61
    307a:	be b7       	in	r27, 0x3e	; 62
    307c:	11 96       	adiw	r26, 0x01	; 1
    307e:	8d 93       	st	X+, r24
    3080:	9c 93       	st	X, r25
    3082:	12 97       	sbiw	r26, 0x02	; 2
    3084:	d8 01       	movw	r26, r16
    3086:	1f 96       	adiw	r26, 0x0f	; 15
    3088:	8c 91       	ld	r24, X
    308a:	82 83       	std	Z+2, r24	; 0x02
    308c:	13 82       	std	Z+3, r1	; 0x03
    308e:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    3092:	ed b7       	in	r30, 0x3d	; 61
    3094:	fe b7       	in	r31, 0x3e	; 62
    3096:	31 96       	adiw	r30, 0x01	; 1
    3098:	81 ed       	ldi	r24, 0xD1	; 209
    309a:	93 e0       	ldi	r25, 0x03	; 3
    309c:	ad b7       	in	r26, 0x3d	; 61
    309e:	be b7       	in	r27, 0x3e	; 62
    30a0:	11 96       	adiw	r26, 0x01	; 1
    30a2:	8d 93       	st	X+, r24
    30a4:	9c 93       	st	X, r25
    30a6:	12 97       	sbiw	r26, 0x02	; 2
    30a8:	d8 01       	movw	r26, r16
    30aa:	50 96       	adiw	r26, 0x10	; 16
    30ac:	8c 91       	ld	r24, X
    30ae:	82 83       	std	Z+2, r24	; 0x02
    30b0:	13 82       	std	Z+3, r1	; 0x03
    30b2:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    30b6:	0f 92       	push	r0
    30b8:	0f 92       	push	r0
    30ba:	8d e9       	ldi	r24, 0x9D	; 157
    30bc:	93 e0       	ldi	r25, 0x03	; 3
    30be:	ed b7       	in	r30, 0x3d	; 61
    30c0:	fe b7       	in	r31, 0x3e	; 62
    30c2:	81 83       	std	Z+1, r24	; 0x01
    30c4:	92 83       	std	Z+2, r25	; 0x02
    30c6:	f8 01       	movw	r30, r16
    30c8:	81 a1       	ldd	r24, Z+33	; 0x21
    30ca:	92 a1       	ldd	r25, Z+34	; 0x22
    30cc:	a3 a1       	ldd	r26, Z+35	; 0x23
    30ce:	b4 a1       	ldd	r27, Z+36	; 0x24
    30d0:	ed b7       	in	r30, 0x3d	; 61
    30d2:	fe b7       	in	r31, 0x3e	; 62
    30d4:	83 83       	std	Z+3, r24	; 0x03
    30d6:	94 83       	std	Z+4, r25	; 0x04
    30d8:	a5 83       	std	Z+5, r26	; 0x05
    30da:	b6 83       	std	Z+6, r27	; 0x06
    30dc:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
    30e0:	8d b7       	in	r24, 0x3d	; 61
    30e2:	9e b7       	in	r25, 0x3e	; 62
    30e4:	06 96       	adiw	r24, 0x06	; 6
    30e6:	8d bf       	out	0x3d, r24	; 61
    30e8:	9e bf       	out	0x3e, r25	; 62
}
    30ea:	1f 91       	pop	r17
    30ec:	0f 91       	pop	r16
    30ee:	ff 90       	pop	r15
    30f0:	ef 90       	pop	r14
    30f2:	08 95       	ret

000030f4 <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    30f4:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    30f6:	00 d0       	rcall	.+0      	; 0x30f8 <cfg_dump+0x4>
    30f8:	0f 92       	push	r0
    30fa:	ed b7       	in	r30, 0x3d	; 61
    30fc:	fe b7       	in	r31, 0x3e	; 62
    30fe:	31 96       	adiw	r30, 0x01	; 1
    3100:	87 e6       	ldi	r24, 0x67	; 103
    3102:	96 e0       	ldi	r25, 0x06	; 6
    3104:	ad b7       	in	r26, 0x3d	; 61
    3106:	be b7       	in	r27, 0x3e	; 62
    3108:	11 96       	adiw	r26, 0x01	; 1
    310a:	8d 93       	st	X+, r24
    310c:	9c 93       	st	X, r25
    310e:	12 97       	sbiw	r26, 0x02	; 2
    3110:	80 91 73 22 	lds	r24, 0x2273
    3114:	82 83       	std	Z+2, r24	; 0x02
    3116:	13 82       	std	Z+3, r1	; 0x03
    3118:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	80 e4       	ldi	r24, 0x40	; 64
    3122:	96 e0       	ldi	r25, 0x06	; 6
    3124:	ed b7       	in	r30, 0x3d	; 61
    3126:	fe b7       	in	r31, 0x3e	; 62
    3128:	81 83       	std	Z+1, r24	; 0x01
    312a:	92 83       	std	Z+2, r25	; 0x02
    312c:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    3130:	00 d0       	rcall	.+0      	; 0x3132 <cfg_dump+0x3e>
    3132:	0f 92       	push	r0
    3134:	86 e1       	ldi	r24, 0x16	; 22
    3136:	96 e0       	ldi	r25, 0x06	; 6
    3138:	ad b7       	in	r26, 0x3d	; 61
    313a:	be b7       	in	r27, 0x3e	; 62
    313c:	11 96       	adiw	r26, 0x01	; 1
    313e:	8d 93       	st	X+, r24
    3140:	9c 93       	st	X, r25
    3142:	12 97       	sbiw	r26, 0x02	; 2
    3144:	80 91 75 22 	lds	r24, 0x2275
    3148:	90 91 76 22 	lds	r25, 0x2276
    314c:	a0 91 77 22 	lds	r26, 0x2277
    3150:	b0 91 78 22 	lds	r27, 0x2278
    3154:	ed b7       	in	r30, 0x3d	; 61
    3156:	fe b7       	in	r31, 0x3e	; 62
    3158:	83 83       	std	Z+3, r24	; 0x03
    315a:	94 83       	std	Z+4, r25	; 0x04
    315c:	a5 83       	std	Z+5, r26	; 0x05
    315e:	b6 83       	std	Z+6, r27	; 0x06
    3160:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    3164:	8c ee       	ldi	r24, 0xEC	; 236
    3166:	95 e0       	ldi	r25, 0x05	; 5
    3168:	ad b7       	in	r26, 0x3d	; 61
    316a:	be b7       	in	r27, 0x3e	; 62
    316c:	11 96       	adiw	r26, 0x01	; 1
    316e:	8d 93       	st	X+, r24
    3170:	9c 93       	st	X, r25
    3172:	12 97       	sbiw	r26, 0x02	; 2
    3174:	80 91 7d 22 	lds	r24, 0x227D
    3178:	90 91 7e 22 	lds	r25, 0x227E
    317c:	a0 91 7f 22 	lds	r26, 0x227F
    3180:	b0 91 80 22 	lds	r27, 0x2280
    3184:	ed b7       	in	r30, 0x3d	; 61
    3186:	fe b7       	in	r31, 0x3e	; 62
    3188:	83 83       	std	Z+3, r24	; 0x03
    318a:	94 83       	std	Z+4, r25	; 0x04
    318c:	a5 83       	std	Z+5, r26	; 0x05
    318e:	b6 83       	std	Z+6, r27	; 0x06
    3190:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    3194:	81 ec       	ldi	r24, 0xC1	; 193
    3196:	95 e0       	ldi	r25, 0x05	; 5
    3198:	ad b7       	in	r26, 0x3d	; 61
    319a:	be b7       	in	r27, 0x3e	; 62
    319c:	11 96       	adiw	r26, 0x01	; 1
    319e:	8d 93       	st	X+, r24
    31a0:	9c 93       	st	X, r25
    31a2:	12 97       	sbiw	r26, 0x02	; 2
    31a4:	80 91 79 22 	lds	r24, 0x2279
    31a8:	90 91 7a 22 	lds	r25, 0x227A
    31ac:	a0 91 7b 22 	lds	r26, 0x227B
    31b0:	b0 91 7c 22 	lds	r27, 0x227C
    31b4:	ed b7       	in	r30, 0x3d	; 61
    31b6:	fe b7       	in	r31, 0x3e	; 62
    31b8:	83 83       	std	Z+3, r24	; 0x03
    31ba:	94 83       	std	Z+4, r25	; 0x04
    31bc:	a5 83       	std	Z+5, r26	; 0x05
    31be:	b6 83       	std	Z+6, r27	; 0x06
    31c0:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
    31c4:	10 e0       	ldi	r17, 0x00	; 0
    31c6:	8d b7       	in	r24, 0x3d	; 61
    31c8:	9e b7       	in	r25, 0x3e	; 62
    31ca:	06 96       	adiw	r24, 0x06	; 6
    31cc:	8d bf       	out	0x3d, r24	; 61
    31ce:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
		_cfg_dump_axis(axis);
    31d0:	81 2f       	mov	r24, r17
    31d2:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    31d6:	1f 5f       	subi	r17, 0xFF	; 255
    31d8:	14 30       	cpi	r17, 0x04	; 4
    31da:	d1 f7       	brne	.-12     	; 0x31d0 <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    31dc:	1f 91       	pop	r17
    31de:	08 95       	ret

000031e0 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    31e0:	cf 92       	push	r12
    31e2:	df 92       	push	r13
    31e4:	ef 92       	push	r14
    31e6:	ff 92       	push	r15
    31e8:	0f 93       	push	r16
    31ea:	1f 93       	push	r17
    31ec:	df 93       	push	r29
    31ee:	cf 93       	push	r28
    31f0:	0f 92       	push	r0
    31f2:	0f 92       	push	r0
    31f4:	cd b7       	in	r28, 0x3d	; 61
    31f6:	de b7       	in	r29, 0x3e	; 62
    31f8:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    31fa:	19 82       	std	Y+1, r1	; 0x01
    31fc:	1a 82       	std	Y+2, r1	; 0x02
    31fe:	cc 24       	eor	r12, r12
    3200:	dd 24       	eor	r13, r13
    3202:	00 e0       	ldi	r16, 0x00	; 0
    3204:	10 e0       	ldi	r17, 0x00	; 0
    3206:	22 c0       	rjmp	.+68     	; 0x324c <cfg_parse+0x6c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = toupper(text[i++])) != 0) {
		if (c == '=') {							// handle separator
    3208:	9d 33       	cpi	r25, 0x3D	; 61
    320a:	49 f4       	brne	.+18     	; 0x321e <cfg_parse+0x3e>
			text[j++] = 0;						// terminate tag at separator
    320c:	f7 01       	movw	r30, r14
    320e:	e1 0f       	add	r30, r17
    3210:	f1 1d       	adc	r31, r1
    3212:	10 82       	st	Z, r1
    3214:	1f 5f       	subi	r17, 0xFF	; 255
			val = &text[j];						// new string starts at value
    3216:	67 01       	movw	r12, r14
    3218:	c1 0e       	add	r12, r17
    321a:	d1 1c       	adc	r13, r1
    321c:	17 c0       	rjmp	.+46     	; 0x324c <cfg_parse+0x6c>
		} else if ( (c == '-') || 				// capture special characters
    321e:	9d 32       	cpi	r25, 0x2D	; 45
    3220:	81 f0       	breq	.+32     	; 0x3242 <cfg_parse+0x62>
    3222:	9b 32       	cpi	r25, 0x2B	; 43
    3224:	71 f0       	breq	.+28     	; 0x3242 <cfg_parse+0x62>
    3226:	9e 32       	cpi	r25, 0x2E	; 46
    3228:	61 f0       	breq	.+24     	; 0x3242 <cfg_parse+0x62>
    322a:	9f 33       	cpi	r25, 0x3F	; 63
    322c:	51 f0       	breq	.+20     	; 0x3242 <cfg_parse+0x62>
    322e:	98 32       	cpi	r25, 0x28	; 40
    3230:	41 f0       	breq	.+16     	; 0x3242 <cfg_parse+0x62>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'A' && c <= 'Z') {		// capture letters
    3232:	89 2f       	mov	r24, r25
    3234:	81 54       	subi	r24, 0x41	; 65
    3236:	8a 31       	cpi	r24, 0x1A	; 26
    3238:	20 f0       	brcs	.+8      	; 0x3242 <cfg_parse+0x62>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// capture numbers
    323a:	89 2f       	mov	r24, r25
    323c:	80 53       	subi	r24, 0x30	; 48
    323e:	8a 30       	cpi	r24, 0x0A	; 10
    3240:	28 f4       	brcc	.+10     	; 0x324c <cfg_parse+0x6c>
			text[j++] = c;
    3242:	f7 01       	movw	r30, r14
    3244:	e1 0f       	add	r30, r17
    3246:	f1 1d       	adc	r31, r1
    3248:	90 83       	st	Z, r25
    324a:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = toupper(text[i++])) != 0) {
    324c:	f7 01       	movw	r30, r14
    324e:	e0 0f       	add	r30, r16
    3250:	f1 1d       	adc	r31, r1
    3252:	0f 5f       	subi	r16, 0xFF	; 255
    3254:	80 81       	ld	r24, Z
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	0e 94 d5 47 	call	0x8faa	; 0x8faa <toupper>
    325c:	98 2f       	mov	r25, r24
    325e:	88 23       	and	r24, r24
    3260:	99 f6       	brne	.-90     	; 0x3208 <cfg_parse+0x28>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// capture numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// nul terminate line
    3262:	f7 01       	movw	r30, r14
    3264:	e1 0f       	add	r30, r17
    3266:	f1 1d       	adc	r31, r1
    3268:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    326a:	1f 5f       	subi	r17, 0xFF	; 255
    326c:	c7 01       	movw	r24, r14
    326e:	81 0f       	add	r24, r17
    3270:	91 1d       	adc	r25, r1
    3272:	89 83       	std	Y+1, r24	; 0x01
    3274:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    3276:	10 92 74 22 	sts	0x2274, r1
	switch (text[0]) {
    327a:	f7 01       	movw	r30, r14
    327c:	80 81       	ld	r24, Z
    327e:	81 35       	cpi	r24, 0x51	; 81
    3280:	d1 f0       	breq	.+52     	; 0x32b6 <cfg_parse+0xd6>
    3282:	82 35       	cpi	r24, 0x52	; 82
    3284:	60 f4       	brcc	.+24     	; 0x329e <cfg_parse+0xbe>
    3286:	81 34       	cpi	r24, 0x41	; 65
    3288:	59 f1       	breq	.+86     	; 0x32e0 <cfg_parse+0x100>
    328a:	82 34       	cpi	r24, 0x42	; 66
    328c:	28 f4       	brcc	.+10     	; 0x3298 <cfg_parse+0xb8>
    328e:	88 32       	cpi	r24, 0x28	; 40
    3290:	11 f1       	breq	.+68     	; 0x32d6 <cfg_parse+0xf6>
    3292:	8f 33       	cpi	r24, 0x3F	; 63
    3294:	39 f5       	brne	.+78     	; 0x32e4 <cfg_parse+0x104>
    3296:	0c c0       	rjmp	.+24     	; 0x32b0 <cfg_parse+0xd0>
    3298:	8d 34       	cpi	r24, 0x4D	; 77
    329a:	21 f5       	brne	.+72     	; 0x32e4 <cfg_parse+0x104>
    329c:	0e c0       	rjmp	.+28     	; 0x32ba <cfg_parse+0xda>
    329e:	89 35       	cpi	r24, 0x59	; 89
    32a0:	29 f0       	breq	.+10     	; 0x32ac <cfg_parse+0xcc>
    32a2:	8a 35       	cpi	r24, 0x5A	; 90
    32a4:	d9 f0       	breq	.+54     	; 0x32dc <cfg_parse+0xfc>
    32a6:	88 35       	cpi	r24, 0x58	; 88
    32a8:	e9 f4       	brne	.+58     	; 0x32e4 <cfg_parse+0x104>
    32aa:	1f c0       	rjmp	.+62     	; 0x32ea <cfg_parse+0x10a>
    32ac:	11 e0       	ldi	r17, 0x01	; 1
    32ae:	1e c0       	rjmp	.+60     	; 0x32ec <cfg_parse+0x10c>
		case '?': cfg_dump(); cfg.status = TG_OK; break;
    32b0:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <cfg_dump>
    32b4:	10 c0       	rjmp	.+32     	; 0x32d6 <cfg_parse+0xf6>
		case '(': cfg.status = TG_OK; break;		// ignore comment lines
		case 'Q': cfg.status = TG_QUIT; break;
    32b6:	8b e0       	ldi	r24, 0x0B	; 11
    32b8:	16 c0       	rjmp	.+44     	; 0x32e6 <cfg_parse+0x106>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    32ba:	c6 01       	movw	r24, r12
    32bc:	be 01       	movw	r22, r28
    32be:	6f 5f       	subi	r22, 0xFF	; 255
    32c0:	7f 4f       	sbci	r23, 0xFF	; 255
    32c2:	0e 94 69 45 	call	0x8ad2	; 0x8ad2 <strtod>
    32c6:	60 93 75 22 	sts	0x2275, r22
    32ca:	70 93 76 22 	sts	0x2276, r23
    32ce:	80 93 77 22 	sts	0x2277, r24
    32d2:	90 93 78 22 	sts	0x2278, r25
				  cfg.status = TG_OK; 
    32d6:	10 92 74 22 	sts	0x2274, r1
    32da:	07 c0       	rjmp	.+14     	; 0x32ea <cfg_parse+0x10a>
				  break;
    32dc:	12 e0       	ldi	r17, 0x02	; 2
    32de:	06 c0       	rjmp	.+12     	; 0x32ec <cfg_parse+0x10c>

		case 'X': axis = X; break;
		case 'Y': axis = Y; break;
		case 'Z': axis = Z; break;
    32e0:	13 e0       	ldi	r17, 0x03	; 3
    32e2:	04 c0       	rjmp	.+8      	; 0x32ec <cfg_parse+0x10c>
		case 'A': axis = A; break;

		default: cfg.status = TG_UNRECOGNIZED_COMMAND; 	// error return
    32e4:	8c e0       	ldi	r24, 0x0C	; 12
    32e6:	80 93 74 22 	sts	0x2274, r24
    32ea:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    32ec:	80 91 74 22 	lds	r24, 0x2274
    32f0:	88 23       	and	r24, r24
    32f2:	09 f0       	breq	.+2      	; 0x32f6 <cfg_parse+0x116>
    32f4:	ee c0       	rjmp	.+476    	; 0x34d2 <cfg_parse+0x2f2>
		cfg.status = TG_OK;							// pre-emptive setting
    32f6:	10 92 74 22 	sts	0x2274, r1
		switch (text[1]) {
    32fa:	f7 01       	movw	r30, r14
    32fc:	81 81       	ldd	r24, Z+1	; 0x01
    32fe:	8c 34       	cpi	r24, 0x4C	; 76
    3300:	09 f4       	brne	.+2      	; 0x3304 <cfg_parse+0x124>
    3302:	b8 c0       	rjmp	.+368    	; 0x3474 <cfg_parse+0x294>
    3304:	8d 34       	cpi	r24, 0x4D	; 77
    3306:	30 f4       	brcc	.+12     	; 0x3314 <cfg_parse+0x134>
    3308:	84 34       	cpi	r24, 0x44	; 68
    330a:	a9 f1       	breq	.+106    	; 0x3376 <cfg_parse+0x196>
    330c:	86 34       	cpi	r24, 0x46	; 70
    330e:	09 f0       	breq	.+2      	; 0x3312 <cfg_parse+0x132>
    3310:	dd c0       	rjmp	.+442    	; 0x34cc <cfg_parse+0x2ec>
    3312:	1d c0       	rjmp	.+58     	; 0x334e <cfg_parse+0x16e>
    3314:	80 35       	cpi	r24, 0x50	; 80
    3316:	09 f4       	brne	.+2      	; 0x331a <cfg_parse+0x13a>
    3318:	47 c0       	rjmp	.+142    	; 0x33a8 <cfg_parse+0x1c8>
    331a:	83 35       	cpi	r24, 0x53	; 83
    331c:	21 f0       	breq	.+8      	; 0x3326 <cfg_parse+0x146>
    331e:	8d 34       	cpi	r24, 0x4D	; 77
    3320:	09 f0       	breq	.+2      	; 0x3324 <cfg_parse+0x144>
    3322:	d4 c0       	rjmp	.+424    	; 0x34cc <cfg_parse+0x2ec>
    3324:	58 c0       	rjmp	.+176    	; 0x33d6 <cfg_parse+0x1f6>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    3326:	c6 01       	movw	r24, r12
    3328:	0e 94 d7 46 	call	0x8dae	; 0x8dae <atoi>
    332c:	21 2f       	mov	r18, r17
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	f9 01       	movw	r30, r18
    3332:	ee 0f       	add	r30, r30
    3334:	ff 1f       	adc	r31, r31
    3336:	e2 0f       	add	r30, r18
    3338:	f3 1f       	adc	r31, r19
    333a:	23 e0       	ldi	r18, 0x03	; 3
    333c:	ee 0f       	add	r30, r30
    333e:	ff 1f       	adc	r31, r31
    3340:	2a 95       	dec	r18
    3342:	e1 f7       	brne	.-8      	; 0x333c <cfg_parse+0x15c>
    3344:	ed 58       	subi	r30, 0x8D	; 141
    3346:	fd 4d       	sbci	r31, 0xDD	; 221
    3348:	81 8b       	std	Z+17, r24	; 0x11
    334a:	92 8b       	std	Z+18, r25	; 0x12
    334c:	c2 c0       	rjmp	.+388    	; 0x34d2 <cfg_parse+0x2f2>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    334e:	c6 01       	movw	r24, r12
    3350:	0e 94 d7 46 	call	0x8dae	; 0x8dae <atoi>
    3354:	21 2f       	mov	r18, r17
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	f9 01       	movw	r30, r18
    335a:	ee 0f       	add	r30, r30
    335c:	ff 1f       	adc	r31, r31
    335e:	e2 0f       	add	r30, r18
    3360:	f3 1f       	adc	r31, r19
    3362:	13 e0       	ldi	r17, 0x03	; 3
    3364:	ee 0f       	add	r30, r30
    3366:	ff 1f       	adc	r31, r31
    3368:	1a 95       	dec	r17
    336a:	e1 f7       	brne	.-8      	; 0x3364 <cfg_parse+0x184>
    336c:	ed 58       	subi	r30, 0x8D	; 141
    336e:	fd 4d       	sbci	r31, 0xDD	; 221
    3370:	83 8b       	std	Z+19, r24	; 0x13
    3372:	94 8b       	std	Z+20, r25	; 0x14
    3374:	ae c0       	rjmp	.+348    	; 0x34d2 <cfg_parse+0x2f2>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    3376:	c6 01       	movw	r24, r12
    3378:	be 01       	movw	r22, r28
    337a:	6f 5f       	subi	r22, 0xFF	; 255
    337c:	7f 4f       	sbci	r23, 0xFF	; 255
    337e:	0e 94 69 45 	call	0x8ad2	; 0x8ad2 <strtod>
    3382:	21 2f       	mov	r18, r17
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	f9 01       	movw	r30, r18
    3388:	ee 0f       	add	r30, r30
    338a:	ff 1f       	adc	r31, r31
    338c:	e2 0f       	add	r30, r18
    338e:	f3 1f       	adc	r31, r19
    3390:	a3 e0       	ldi	r26, 0x03	; 3
    3392:	ee 0f       	add	r30, r30
    3394:	ff 1f       	adc	r31, r31
    3396:	aa 95       	dec	r26
    3398:	e1 f7       	brne	.-8      	; 0x3392 <cfg_parse+0x1b2>
    339a:	ed 58       	subi	r30, 0x8D	; 141
    339c:	fd 4d       	sbci	r31, 0xDD	; 221
    339e:	65 8b       	std	Z+21, r22	; 0x15
    33a0:	76 8b       	std	Z+22, r23	; 0x16
    33a2:	87 8b       	std	Z+23, r24	; 0x17
    33a4:	90 8f       	std	Z+24, r25	; 0x18
    33a6:	95 c0       	rjmp	.+298    	; 0x34d2 <cfg_parse+0x2f2>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    33a8:	c6 01       	movw	r24, r12
    33aa:	0e 94 d7 46 	call	0x8dae	; 0x8dae <atoi>
    33ae:	68 2f       	mov	r22, r24
    33b0:	81 2f       	mov	r24, r17
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	fc 01       	movw	r30, r24
    33b6:	ee 0f       	add	r30, r30
    33b8:	ff 1f       	adc	r31, r31
    33ba:	e8 0f       	add	r30, r24
    33bc:	f9 1f       	adc	r31, r25
    33be:	53 e0       	ldi	r21, 0x03	; 3
    33c0:	ee 0f       	add	r30, r30
    33c2:	ff 1f       	adc	r31, r31
    33c4:	5a 95       	dec	r21
    33c6:	e1 f7       	brne	.-8      	; 0x33c0 <cfg_parse+0x1e0>
    33c8:	ed 58       	subi	r30, 0x8D	; 141
    33ca:	fd 4d       	sbci	r31, 0xDD	; 221
    33cc:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    33ce:	81 2f       	mov	r24, r17
    33d0:	0e 94 30 24 	call	0x4860	; 0x4860 <st_set_polarity>
    33d4:	7e c0       	rjmp	.+252    	; 0x34d2 <cfg_parse+0x2f2>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    33d6:	f7 01       	movw	r30, r14
    33d8:	82 81       	ldd	r24, Z+2	; 0x02
    33da:	89 34       	cpi	r24, 0x49	; 73
    33dc:	99 f4       	brne	.+38     	; 0x3404 <cfg_parse+0x224>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    33de:	c6 01       	movw	r24, r12
    33e0:	0e 94 d7 46 	call	0x8dae	; 0x8dae <atoi>
    33e4:	21 2f       	mov	r18, r17
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	f9 01       	movw	r30, r18
    33ea:	ee 0f       	add	r30, r30
    33ec:	ff 1f       	adc	r31, r31
    33ee:	e2 0f       	add	r30, r18
    33f0:	f3 1f       	adc	r31, r19
    33f2:	93 e0       	ldi	r25, 0x03	; 3
    33f4:	ee 0f       	add	r30, r30
    33f6:	ff 1f       	adc	r31, r31
    33f8:	9a 95       	dec	r25
    33fa:	e1 f7       	brne	.-8      	; 0x33f4 <cfg_parse+0x214>
    33fc:	ed 58       	subi	r30, 0x8D	; 141
    33fe:	fd 4d       	sbci	r31, 0xDD	; 221
    3400:	86 87       	std	Z+14, r24	; 0x0e
    3402:	67 c0       	rjmp	.+206    	; 0x34d2 <cfg_parse+0x2f2>
				} else if (text[3] == 'R') {
    3404:	f7 01       	movw	r30, r14
    3406:	83 81       	ldd	r24, Z+3	; 0x03
    3408:	82 35       	cpi	r24, 0x52	; 82
    340a:	c9 f4       	brne	.+50     	; 0x343e <cfg_parse+0x25e>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    340c:	c6 01       	movw	r24, r12
    340e:	be 01       	movw	r22, r28
    3410:	6f 5f       	subi	r22, 0xFF	; 255
    3412:	7f 4f       	sbci	r23, 0xFF	; 255
    3414:	0e 94 69 45 	call	0x8ad2	; 0x8ad2 <strtod>
    3418:	21 2f       	mov	r18, r17
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	f9 01       	movw	r30, r18
    341e:	ee 0f       	add	r30, r30
    3420:	ff 1f       	adc	r31, r31
    3422:	e2 0f       	add	r30, r18
    3424:	f3 1f       	adc	r31, r19
    3426:	13 e0       	ldi	r17, 0x03	; 3
    3428:	ee 0f       	add	r30, r30
    342a:	ff 1f       	adc	r31, r31
    342c:	1a 95       	dec	r17
    342e:	e1 f7       	brne	.-8      	; 0x3428 <cfg_parse+0x248>
    3430:	ed 58       	subi	r30, 0x8D	; 141
    3432:	fd 4d       	sbci	r31, 0xDD	; 221
    3434:	61 8f       	std	Z+25, r22	; 0x19
    3436:	72 8f       	std	Z+26, r23	; 0x1a
    3438:	83 8f       	std	Z+27, r24	; 0x1b
    343a:	94 8f       	std	Z+28, r25	; 0x1c
    343c:	4a c0       	rjmp	.+148    	; 0x34d2 <cfg_parse+0x2f2>
				} else if (text[3] == 'T') {
    343e:	84 35       	cpi	r24, 0x54	; 84
    3440:	c9 f4       	brne	.+50     	; 0x3474 <cfg_parse+0x294>
					CFG(axis).mm_travel = strtod(val, &end); break;
    3442:	c6 01       	movw	r24, r12
    3444:	be 01       	movw	r22, r28
    3446:	6f 5f       	subi	r22, 0xFF	; 255
    3448:	7f 4f       	sbci	r23, 0xFF	; 255
    344a:	0e 94 69 45 	call	0x8ad2	; 0x8ad2 <strtod>
    344e:	21 2f       	mov	r18, r17
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	f9 01       	movw	r30, r18
    3454:	ee 0f       	add	r30, r30
    3456:	ff 1f       	adc	r31, r31
    3458:	e2 0f       	add	r30, r18
    345a:	f3 1f       	adc	r31, r19
    345c:	a3 e0       	ldi	r26, 0x03	; 3
    345e:	ee 0f       	add	r30, r30
    3460:	ff 1f       	adc	r31, r31
    3462:	aa 95       	dec	r26
    3464:	e1 f7       	brne	.-8      	; 0x345e <cfg_parse+0x27e>
    3466:	ed 58       	subi	r30, 0x8D	; 141
    3468:	fd 4d       	sbci	r31, 0xDD	; 221
    346a:	65 8f       	std	Z+29, r22	; 0x1d
    346c:	76 8f       	std	Z+30, r23	; 0x1e
    346e:	87 8f       	std	Z+31, r24	; 0x1f
    3470:	90 a3       	std	Z+32, r25	; 0x20
    3472:	2f c0       	rjmp	.+94     	; 0x34d2 <cfg_parse+0x2f2>
				}
			case 'L': 
				if (text[2] == 'O') {
    3474:	f7 01       	movw	r30, r14
    3476:	82 81       	ldd	r24, Z+2	; 0x02
    3478:	8f 34       	cpi	r24, 0x4F	; 79
    347a:	99 f4       	brne	.+38     	; 0x34a2 <cfg_parse+0x2c2>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    347c:	c6 01       	movw	r24, r12
    347e:	0e 94 d7 46 	call	0x8dae	; 0x8dae <atoi>
    3482:	21 2f       	mov	r18, r17
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	f9 01       	movw	r30, r18
    3488:	ee 0f       	add	r30, r30
    348a:	ff 1f       	adc	r31, r31
    348c:	e2 0f       	add	r30, r18
    348e:	f3 1f       	adc	r31, r19
    3490:	53 e0       	ldi	r21, 0x03	; 3
    3492:	ee 0f       	add	r30, r30
    3494:	ff 1f       	adc	r31, r31
    3496:	5a 95       	dec	r21
    3498:	e1 f7       	brne	.-8      	; 0x3492 <cfg_parse+0x2b2>
    349a:	ed 58       	subi	r30, 0x8D	; 141
    349c:	fd 4d       	sbci	r31, 0xDD	; 221
    349e:	87 87       	std	Z+15, r24	; 0x0f
    34a0:	18 c0       	rjmp	.+48     	; 0x34d2 <cfg_parse+0x2f2>
				} else if (text[2] == 'I') {
    34a2:	89 34       	cpi	r24, 0x49	; 73
    34a4:	99 f4       	brne	.+38     	; 0x34cc <cfg_parse+0x2ec>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    34a6:	c6 01       	movw	r24, r12
    34a8:	0e 94 d7 46 	call	0x8dae	; 0x8dae <atoi>
    34ac:	21 2f       	mov	r18, r17
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	f9 01       	movw	r30, r18
    34b2:	ee 0f       	add	r30, r30
    34b4:	ff 1f       	adc	r31, r31
    34b6:	e2 0f       	add	r30, r18
    34b8:	f3 1f       	adc	r31, r19
    34ba:	23 e0       	ldi	r18, 0x03	; 3
    34bc:	ee 0f       	add	r30, r30
    34be:	ff 1f       	adc	r31, r31
    34c0:	2a 95       	dec	r18
    34c2:	e1 f7       	brne	.-8      	; 0x34bc <cfg_parse+0x2dc>
    34c4:	ed 58       	subi	r30, 0x8D	; 141
    34c6:	fd 4d       	sbci	r31, 0xDD	; 221
    34c8:	85 a3       	std	Z+37, r24	; 0x25
    34ca:	03 c0       	rjmp	.+6      	; 0x34d2 <cfg_parse+0x2f2>
				}

			default: cfg.status = TG_UNRECOGNIZED_COMMAND;	// error return
    34cc:	8c e0       	ldi	r24, 0x0C	; 12
    34ce:	80 93 74 22 	sts	0x2274, r24
		}
	}
//	cfg_write();
	return (cfg.status);
}
    34d2:	80 91 74 22 	lds	r24, 0x2274
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	0f 90       	pop	r0
    34da:	0f 90       	pop	r0
    34dc:	cf 91       	pop	r28
    34de:	df 91       	pop	r29
    34e0:	1f 91       	pop	r17
    34e2:	0f 91       	pop	r16
    34e4:	ff 90       	pop	r15
    34e6:	ef 90       	pop	r14
    34e8:	df 90       	pop	r13
    34ea:	cf 90       	pop	r12
    34ec:	08 95       	ret

000034ee <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    34ee:	ef 92       	push	r14
    34f0:	ff 92       	push	r15
    34f2:	0f 93       	push	r16
    34f4:	1f 93       	push	r17
    34f6:	df 93       	push	r29
    34f8:	cf 93       	push	r28
    34fa:	cd b7       	in	r28, 0x3d	; 61
    34fc:	de b7       	in	r29, 0x3e	; 62
    34fe:	a8 97       	sbiw	r28, 0x28	; 40
    3500:	cd bf       	out	0x3d, r28	; 61
    3502:	de bf       	out	0x3e, r29	; 62
    3504:	0f e4       	ldi	r16, 0x4F	; 79
    3506:	12 e0       	ldi	r17, 0x02	; 2
    3508:	a0 e0       	ldi	r26, 0x00	; 0
    350a:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    350c:	7e 01       	movw	r14, r28
    350e:	08 94       	sec
    3510:	e1 1c       	adc	r14, r1
    3512:	f1 1c       	adc	r15, r1
    3514:	02 c0       	rjmp	.+4      	; 0x351a <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3516:	0f 5f       	subi	r16, 0xFF	; 255
    3518:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    351a:	f8 01       	movw	r30, r16
    351c:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    351e:	88 23       	and	r24, r24
    3520:	89 f4       	brne	.+34     	; 0x3544 <cfg_test+0x56>
			text[j] = 0;
    3522:	ce 01       	movw	r24, r28
    3524:	01 96       	adiw	r24, 0x01	; 1
    3526:	a8 0f       	add	r26, r24
    3528:	b9 1f       	adc	r27, r25
    352a:	1c 92       	st	X, r1
			cfg_parse(text);
    352c:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    3530:	a8 96       	adiw	r28, 0x28	; 40
    3532:	cd bf       	out	0x3d, r28	; 61
    3534:	de bf       	out	0x3e, r29	; 62
    3536:	cf 91       	pop	r28
    3538:	df 91       	pop	r29
    353a:	1f 91       	pop	r17
    353c:	0f 91       	pop	r16
    353e:	ff 90       	pop	r15
    3540:	ef 90       	pop	r14
    3542:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    3544:	8d 30       	cpi	r24, 0x0D	; 13
    3546:	21 f0       	breq	.+8      	; 0x3550 <cfg_test+0x62>
    3548:	8a 30       	cpi	r24, 0x0A	; 10
    354a:	11 f0       	breq	.+4      	; 0x3550 <cfg_test+0x62>
    354c:	8b 33       	cpi	r24, 0x3B	; 59
    354e:	49 f4       	brne	.+18     	; 0x3562 <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    3550:	ae 0d       	add	r26, r14
    3552:	bf 1d       	adc	r27, r15
    3554:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    3556:	c7 01       	movw	r24, r14
    3558:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <cfg_parse>
    355c:	a0 e0       	ldi	r26, 0x00	; 0
    355e:	b0 e0       	ldi	r27, 0x00	; 0
    3560:	da cf       	rjmp	.-76     	; 0x3516 <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    3562:	81 32       	cpi	r24, 0x21	; 33
    3564:	c0 f2       	brcs	.-80     	; 0x3516 <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    3566:	f7 01       	movw	r30, r14
    3568:	ea 0f       	add	r30, r26
    356a:	fb 1f       	adc	r31, r27
    356c:	80 83       	st	Z, r24
    356e:	11 96       	adiw	r26, 0x01	; 1
    3570:	d2 cf       	rjmp	.-92     	; 0x3516 <cfg_test+0x28>

00003572 <en_init>:


void en_init(void) 
{
	return;
}
    3572:	08 95       	ret

00003574 <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
    3574:	88 23       	and	r24, r24
    3576:	b1 f0       	breq	.+44     	; 0x35a4 <en_write+0x30>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    3578:	e0 91 6f 22 	lds	r30, 0x226F
    357c:	f0 91 70 22 	lds	r31, 0x2270
    3580:	80 e2       	ldi	r24, 0x20	; 32
    3582:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    3584:	e0 91 5f 22 	lds	r30, 0x225F
    3588:	f0 91 60 22 	lds	r31, 0x2260
    358c:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    358e:	e0 91 4f 22 	lds	r30, 0x224F
    3592:	f0 91 50 22 	lds	r31, 0x2250
    3596:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    3598:	e0 91 3f 22 	lds	r30, 0x223F
    359c:	f0 91 40 22 	lds	r31, 0x2240
    35a0:	85 83       	std	Z+5, r24	; 0x05
    35a2:	08 95       	ret
void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    35a4:	e0 91 6f 22 	lds	r30, 0x226F
    35a8:	f0 91 70 22 	lds	r31, 0x2270
    35ac:	80 e2       	ldi	r24, 0x20	; 32
    35ae:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    35b0:	e0 91 5f 22 	lds	r30, 0x225F
    35b4:	f0 91 60 22 	lds	r31, 0x2260
    35b8:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    35ba:	e0 91 4f 22 	lds	r30, 0x224F
    35be:	f0 91 50 22 	lds	r31, 0x2250
    35c2:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    35c4:	e0 91 3f 22 	lds	r30, 0x223F
    35c8:	f0 91 40 22 	lds	r31, 0x2240
    35cc:	86 83       	std	Z+6, r24	; 0x06
    35ce:	08 95       	ret

000035d0 <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    35d0:	0f 93       	push	r16
    35d2:	df 93       	push	r29
    35d4:	cf 93       	push	r28
    35d6:	0f 92       	push	r0
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    35dc:	8b ec       	ldi	r24, 0xCB	; 203
    35de:	e0 e5       	ldi	r30, 0x50	; 80
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    35e4:	88 e0       	ldi	r24, 0x08	; 8
    35e6:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    35ea:	80 91 51 00 	lds	r24, 0x0051
    35ee:	83 ff       	sbrs	r24, 3
    35f0:	fc cf       	rjmp	.-8      	; 0x35ea <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    35f2:	82 ec       	ldi	r24, 0xC2	; 194
    35f4:	e0 e5       	ldi	r30, 0x50	; 80
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    35fa:	88 e1       	ldi	r24, 0x18	; 24
    35fc:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    3600:	80 91 51 00 	lds	r24, 0x0051
    3604:	84 ff       	sbrs	r24, 4
    3606:	fc cf       	rjmp	.-8      	; 0x3600 <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3608:	8f b7       	in	r24, 0x3f	; 63
    360a:	89 83       	std	Y+1, r24	; 0x01
    360c:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    360e:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3610:	24 e0       	ldi	r18, 0x04	; 4
    3612:	80 e4       	ldi	r24, 0x40	; 64
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	fc 01       	movw	r30, r24
    3618:	08 ed       	ldi	r16, 0xD8	; 216
    361a:	04 bf       	out	0x34, r16	; 52
    361c:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    361e:	89 81       	ldd	r24, Y+1	; 0x01
    3620:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    3622:	80 91 50 00 	lds	r24, 0x0050
    3626:	8e 7f       	andi	r24, 0xFE	; 254
    3628:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    362c:	0f 90       	pop	r0
    362e:	cf 91       	pop	r28
    3630:	df 91       	pop	r29
    3632:	0f 91       	pop	r16
    3634:	08 95       	ret

00003636 <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    3636:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <xmega_init_clocks>
}
    363a:	08 95       	ret

0000363c <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    363c:	0f 93       	push	r16
    363e:	df 93       	push	r29
    3640:	cf 93       	push	r28
    3642:	0f 92       	push	r0
    3644:	cd b7       	in	r28, 0x3d	; 61
    3646:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3648:	2f b7       	in	r18, 0x3f	; 63
    364a:	29 83       	std	Y+1, r18	; 0x01
    364c:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    364e:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3650:	fc 01       	movw	r30, r24
    3652:	08 ed       	ldi	r16, 0xD8	; 216
    3654:	04 bf       	out	0x34, r16	; 52
    3656:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3658:	89 81       	ldd	r24, Y+1	; 0x01
    365a:	8f bf       	out	0x3f, r24	; 63
#endif
}
    365c:	0f 90       	pop	r0
    365e:	cf 91       	pop	r28
    3660:	df 91       	pop	r29
    3662:	0f 91       	pop	r16
    3664:	08 95       	ret

00003666 <mc_motion_stop>:
 * mc_motion_stop() - stop all current motions
 */

int mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    3666:	10 92 5c 21 	sts	0x215C, r1
	ma.arc_state = MC_STATE_OFF;
    366a:	10 92 e1 22 	sts	0x22E1, r1
	return (TG_OK);
}
    366e:	80 e0       	ldi	r24, 0x00	; 0
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	08 95       	ret

00003674 <mc_go_home>:
 */

int mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    3674:	8c e0       	ldi	r24, 0x0C	; 12
    3676:	ed e5       	ldi	r30, 0x5D	; 93
    3678:	f1 e2       	ldi	r31, 0x21	; 33
    367a:	df 01       	movw	r26, r30
    367c:	1d 92       	st	X+, r1
    367e:	8a 95       	dec	r24
    3680:	e9 f7       	brne	.-6      	; 0x367c <mc_go_home+0x8>
	return (TG_OK);
}
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	08 95       	ret

00003688 <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    3688:	8c e0       	ldi	r24, 0x0C	; 12
    368a:	ed e5       	ldi	r30, 0x5D	; 93
    368c:	f1 e2       	ldi	r31, 0x21	; 33
    368e:	df 01       	movw	r26, r30
    3690:	1d 92       	st	X+, r1
    3692:	8a 95       	dec	r24
    3694:	e9 f7       	brne	.-6      	; 0x3690 <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    3696:	10 92 5c 21 	sts	0x215C, r1
	ma.arc_state = MC_STATE_OFF;
    369a:	10 92 e1 22 	sts	0x22E1, r1
}
    369e:	08 95       	ret

000036a0 <mc_line_continue>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continue() 
{
    36a0:	af 92       	push	r10
    36a2:	bf 92       	push	r11
    36a4:	cf 92       	push	r12
    36a6:	df 92       	push	r13
    36a8:	ef 92       	push	r14
    36aa:	ff 92       	push	r15
    36ac:	0f 93       	push	r16
    36ae:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    36b0:	80 91 5c 21 	lds	r24, 0x215C
    36b4:	88 23       	and	r24, r24
    36b6:	19 f4       	brne	.+6      	; 0x36be <mc_line_continue+0x1e>
    36b8:	23 e0       	ldi	r18, 0x03	; 3
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	30 c0       	rjmp	.+96     	; 0x371e <mc_line_continue+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    36be:	82 e0       	ldi	r24, 0x02	; 2
    36c0:	80 93 5c 21 	sts	0x215C, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    36c4:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <mv_test_move_buffer_full>
    36c8:	88 23       	and	r24, r24
    36ca:	19 f0       	breq	.+6      	; 0x36d2 <mc_line_continue+0x32>
    36cc:	22 e0       	ldi	r18, 0x02	; 2
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	26 c0       	rjmp	.+76     	; 0x371e <mc_line_continue+0x7e>
		return (TG_EAGAIN);
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    36d2:	60 91 75 21 	lds	r22, 0x2175
    36d6:	70 91 76 21 	lds	r23, 0x2176
    36da:	80 91 77 21 	lds	r24, 0x2177
    36de:	90 91 78 21 	lds	r25, 0x2178
    36e2:	20 91 79 21 	lds	r18, 0x2179
    36e6:	30 91 7a 21 	lds	r19, 0x217A
    36ea:	40 91 7b 21 	lds	r20, 0x217B
    36ee:	50 91 7c 21 	lds	r21, 0x217C
    36f2:	e0 90 7d 21 	lds	r14, 0x217D
    36f6:	f0 90 7e 21 	lds	r15, 0x217E
    36fa:	00 91 7f 21 	lds	r16, 0x217F
    36fe:	10 91 80 21 	lds	r17, 0x2180
    3702:	a0 90 81 21 	lds	r10, 0x2181
    3706:	b0 90 82 21 	lds	r11, 0x2182
    370a:	c0 90 83 21 	lds	r12, 0x2183
    370e:	d0 90 84 21 	lds	r13, 0x2184
    3712:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    3716:	10 92 5c 21 	sts	0x215C, r1
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    371e:	c9 01       	movw	r24, r18
    3720:	1f 91       	pop	r17
    3722:	0f 91       	pop	r16
    3724:	ff 90       	pop	r15
    3726:	ef 90       	pop	r14
    3728:	df 90       	pop	r13
    372a:	cf 90       	pop	r12
    372c:	bf 90       	pop	r11
    372e:	af 90       	pop	r10
    3730:	08 95       	ret

00003732 <mc_dwell>:
 * NOTE: It's not necessary to set the target as this is set correctly in the Gcode. 
 */

int mc_dwell(double seconds) 
{
	mc.steps[X] = 0;
    3732:	10 92 75 21 	sts	0x2175, r1
    3736:	10 92 76 21 	sts	0x2176, r1
    373a:	10 92 77 21 	sts	0x2177, r1
    373e:	10 92 78 21 	sts	0x2178, r1
	mc.steps[Y] = 0;
    3742:	10 92 79 21 	sts	0x2179, r1
    3746:	10 92 7a 21 	sts	0x217A, r1
    374a:	10 92 7b 21 	sts	0x217B, r1
    374e:	10 92 7c 21 	sts	0x217C, r1
	mc.steps[Z] = 0;
    3752:	10 92 7d 21 	sts	0x217D, r1
    3756:	10 92 7e 21 	sts	0x217E, r1
    375a:	10 92 7f 21 	sts	0x217F, r1
    375e:	10 92 80 21 	sts	0x2180, r1
	mc.mm_of_travel = 0;	// not actually used, but makes debug make more sense
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	40 e0       	ldi	r20, 0x00	; 0
    3768:	50 e0       	ldi	r21, 0x00	; 0
    376a:	20 93 85 21 	sts	0x2185, r18
    376e:	30 93 86 21 	sts	0x2186, r19
    3772:	40 93 87 21 	sts	0x2187, r20
    3776:	50 93 88 21 	sts	0x2188, r21
	mc.microseconds = trunc(seconds*1000000);
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	34 e2       	ldi	r19, 0x24	; 36
    377e:	44 e7       	ldi	r20, 0x74	; 116
    3780:	59 e4       	ldi	r21, 0x49	; 73
    3782:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    3786:	0e 94 d2 41 	call	0x83a4	; 0x83a4 <__fixunssfsi>
    378a:	60 93 81 21 	sts	0x2181, r22
    378e:	70 93 82 21 	sts	0x2182, r23
    3792:	80 93 83 21 	sts	0x2183, r24
    3796:	90 93 84 21 	sts	0x2184, r25
	mc.line_state = MC_STATE_NEW;
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	80 93 5c 21 	sts	0x215C, r24
	return (mc_line_continue());
    37a0:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <mc_line_continue>
}
    37a4:	08 95       	ret

000037a6 <mc_line>:
 * Zero length lines that are actually dwells come in thru mc_dwell().
 * The mv_queue doesn't check line length and queues anything.
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    37a6:	2f 92       	push	r2
    37a8:	3f 92       	push	r3
    37aa:	4f 92       	push	r4
    37ac:	5f 92       	push	r5
    37ae:	6f 92       	push	r6
    37b0:	7f 92       	push	r7
    37b2:	8f 92       	push	r8
    37b4:	9f 92       	push	r9
    37b6:	af 92       	push	r10
    37b8:	bf 92       	push	r11
    37ba:	cf 92       	push	r12
    37bc:	df 92       	push	r13
    37be:	ef 92       	push	r14
    37c0:	ff 92       	push	r15
    37c2:	0f 93       	push	r16
    37c4:	1f 93       	push	r17
    37c6:	df 93       	push	r29
    37c8:	cf 93       	push	r28
    37ca:	cd b7       	in	r28, 0x3d	; 61
    37cc:	de b7       	in	r29, 0x3e	; 62
    37ce:	62 97       	sbiw	r28, 0x12	; 18
    37d0:	cd bf       	out	0x3d, r28	; 61
    37d2:	de bf       	out	0x3e, r29	; 62
    37d4:	19 01       	movw	r2, r18
    37d6:	2a 01       	movw	r4, r20
    37d8:	ad 86       	std	Y+13, r10	; 0x0d
    37da:	be 86       	std	Y+14, r11	; 0x0e
    37dc:	cf 86       	std	Y+15, r12	; 0x0f
    37de:	d8 8a       	std	Y+16, r13	; 0x10
    37e0:	89 8a       	std	Y+17, r8	; 0x11
    37e2:	9a 8a       	std	Y+18, r9	; 0x12
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    37e4:	20 91 94 22 	lds	r18, 0x2294
    37e8:	30 91 95 22 	lds	r19, 0x2295
    37ec:	40 91 96 22 	lds	r20, 0x2296
    37f0:	50 91 97 22 	lds	r21, 0x2297
    37f4:	29 87       	std	Y+9, r18	; 0x09
    37f6:	3a 87       	std	Y+10, r19	; 0x0a
    37f8:	4b 87       	std	Y+11, r20	; 0x0b
    37fa:	5c 87       	std	Y+12, r21	; 0x0c
    37fc:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    3800:	0e 94 f0 43 	call	0x87e0	; 0x87e0 <lround>
    3804:	3b 01       	movw	r6, r22
    3806:	4c 01       	movw	r8, r24
    3808:	60 92 69 21 	sts	0x2169, r6
    380c:	70 92 6a 21 	sts	0x216A, r7
    3810:	80 92 6b 21 	sts	0x216B, r8
    3814:	90 92 6c 21 	sts	0x216C, r9
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    3818:	80 91 ac 22 	lds	r24, 0x22AC
    381c:	90 91 ad 22 	lds	r25, 0x22AD
    3820:	a0 91 ae 22 	lds	r26, 0x22AE
    3824:	b0 91 af 22 	lds	r27, 0x22AF
    3828:	8d 83       	std	Y+5, r24	; 0x05
    382a:	9e 83       	std	Y+6, r25	; 0x06
    382c:	af 83       	std	Y+7, r26	; 0x07
    382e:	b8 87       	std	Y+8, r27	; 0x08
    3830:	c2 01       	movw	r24, r4
    3832:	b1 01       	movw	r22, r2
    3834:	2d 81       	ldd	r18, Y+5	; 0x05
    3836:	3e 81       	ldd	r19, Y+6	; 0x06
    3838:	4f 81       	ldd	r20, Y+7	; 0x07
    383a:	58 85       	ldd	r21, Y+8	; 0x08
    383c:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    3840:	0e 94 f0 43 	call	0x87e0	; 0x87e0 <lround>
    3844:	5b 01       	movw	r10, r22
    3846:	6c 01       	movw	r12, r24
    3848:	a0 92 6d 21 	sts	0x216D, r10
    384c:	b0 92 6e 21 	sts	0x216E, r11
    3850:	c0 92 6f 21 	sts	0x216F, r12
    3854:	d0 92 70 21 	sts	0x2170, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    3858:	20 91 c4 22 	lds	r18, 0x22C4
    385c:	30 91 c5 22 	lds	r19, 0x22C5
    3860:	40 91 c6 22 	lds	r20, 0x22C6
    3864:	50 91 c7 22 	lds	r21, 0x22C7
    3868:	29 83       	std	Y+1, r18	; 0x01
    386a:	3a 83       	std	Y+2, r19	; 0x02
    386c:	4b 83       	std	Y+3, r20	; 0x03
    386e:	5c 83       	std	Y+4, r21	; 0x04
    3870:	c8 01       	movw	r24, r16
    3872:	b7 01       	movw	r22, r14
    3874:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    3878:	0e 94 f0 43 	call	0x87e0	; 0x87e0 <lround>
    387c:	9b 01       	movw	r18, r22
    387e:	ac 01       	movw	r20, r24
    3880:	20 93 71 21 	sts	0x2171, r18
    3884:	30 93 72 21 	sts	0x2172, r19
    3888:	40 93 73 21 	sts	0x2173, r20
    388c:	50 93 74 21 	sts	0x2174, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    3890:	80 91 5d 21 	lds	r24, 0x215D
    3894:	90 91 5e 21 	lds	r25, 0x215E
    3898:	a0 91 5f 21 	lds	r26, 0x215F
    389c:	b0 91 60 21 	lds	r27, 0x2160
    38a0:	84 01       	movw	r16, r8
    38a2:	73 01       	movw	r14, r6
    38a4:	e8 1a       	sub	r14, r24
    38a6:	f9 0a       	sbc	r15, r25
    38a8:	0a 0b       	sbc	r16, r26
    38aa:	1b 0b       	sbc	r17, r27
    38ac:	e0 92 75 21 	sts	0x2175, r14
    38b0:	f0 92 76 21 	sts	0x2176, r15
    38b4:	00 93 77 21 	sts	0x2177, r16
    38b8:	10 93 78 21 	sts	0x2178, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    38bc:	80 91 61 21 	lds	r24, 0x2161
    38c0:	90 91 62 21 	lds	r25, 0x2162
    38c4:	a0 91 63 21 	lds	r26, 0x2163
    38c8:	b0 91 64 21 	lds	r27, 0x2164
    38cc:	a8 1a       	sub	r10, r24
    38ce:	b9 0a       	sbc	r11, r25
    38d0:	ca 0a       	sbc	r12, r26
    38d2:	db 0a       	sbc	r13, r27
    38d4:	a0 92 79 21 	sts	0x2179, r10
    38d8:	b0 92 7a 21 	sts	0x217A, r11
    38dc:	c0 92 7b 21 	sts	0x217B, r12
    38e0:	d0 92 7c 21 	sts	0x217C, r13
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    38e4:	80 91 65 21 	lds	r24, 0x2165
    38e8:	90 91 66 21 	lds	r25, 0x2166
    38ec:	a0 91 67 21 	lds	r26, 0x2167
    38f0:	b0 91 68 21 	lds	r27, 0x2168
    38f4:	19 01       	movw	r2, r18
    38f6:	2a 01       	movw	r4, r20
    38f8:	28 1a       	sub	r2, r24
    38fa:	39 0a       	sbc	r3, r25
    38fc:	4a 0a       	sbc	r4, r26
    38fe:	5b 0a       	sbc	r5, r27
    3900:	20 92 7d 21 	sts	0x217D, r2
    3904:	30 92 7e 21 	sts	0x217E, r3
    3908:	40 92 7f 21 	sts	0x217F, r4
    390c:	50 92 80 21 	sts	0x2180, r5

	// skip zero length lines
	if ((mc.steps[X] + mc.steps[Y] + mc.steps[Z]) == 0) {
    3910:	d6 01       	movw	r26, r12
    3912:	c5 01       	movw	r24, r10
    3914:	8e 0d       	add	r24, r14
    3916:	9f 1d       	adc	r25, r15
    3918:	a0 1f       	adc	r26, r16
    391a:	b1 1f       	adc	r27, r17
    391c:	82 0d       	add	r24, r2
    391e:	93 1d       	adc	r25, r3
    3920:	a4 1d       	adc	r26, r4
    3922:	b5 1d       	adc	r27, r5
    3924:	00 97       	sbiw	r24, 0x00	; 0
    3926:	a1 05       	cpc	r26, r1
    3928:	b1 05       	cpc	r27, r1
    392a:	19 f4       	brne	.+6      	; 0x3932 <mc_line+0x18c>
    392c:	24 e1       	ldi	r18, 0x14	; 20
    392e:	30 e0       	ldi	r19, 0x00	; 0
    3930:	72 c0       	rjmp	.+228    	; 0x3a16 <mc_line+0x270>
		return (TG_ZERO_LENGTH_LINE);
	}

	if (invert_feed_rate) {
    3932:	49 89       	ldd	r20, Y+17	; 0x11
    3934:	5a 89       	ldd	r21, Y+18	; 0x12
    3936:	45 2b       	or	r20, r21
    3938:	59 f0       	breq	.+22     	; 0x3950 <mc_line+0x1aa>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    393a:	60 ec       	ldi	r22, 0xC0	; 192
    393c:	71 ee       	ldi	r23, 0xE1	; 225
    393e:	84 e6       	ldi	r24, 0x64	; 100
    3940:	9c e4       	ldi	r25, 0x4C	; 76
    3942:	2d 85       	ldd	r18, Y+13	; 0x0d
    3944:	3e 85       	ldd	r19, Y+14	; 0x0e
    3946:	4f 85       	ldd	r20, Y+15	; 0x0f
    3948:	58 89       	ldd	r21, Y+16	; 0x10
    394a:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    394e:	4a c0       	rjmp	.+148    	; 0x39e4 <mc_line+0x23e>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    3950:	c8 01       	movw	r24, r16
    3952:	b7 01       	movw	r22, r14
    3954:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    3958:	29 85       	ldd	r18, Y+9	; 0x09
    395a:	3a 85       	ldd	r19, Y+10	; 0x0a
    395c:	4b 85       	ldd	r20, Y+11	; 0x0b
    395e:	5c 85       	ldd	r21, Y+12	; 0x0c
    3960:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    3964:	0e 94 cb 44 	call	0x8996	; 0x8996 <square>
    3968:	3b 01       	movw	r6, r22
    396a:	4c 01       	movw	r8, r24
    396c:	c6 01       	movw	r24, r12
    396e:	b5 01       	movw	r22, r10
    3970:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    3974:	2d 81       	ldd	r18, Y+5	; 0x05
    3976:	3e 81       	ldd	r19, Y+6	; 0x06
    3978:	4f 81       	ldd	r20, Y+7	; 0x07
    397a:	58 85       	ldd	r21, Y+8	; 0x08
    397c:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    3980:	0e 94 cb 44 	call	0x8996	; 0x8996 <square>
    3984:	5b 01       	movw	r10, r22
    3986:	6c 01       	movw	r12, r24
    3988:	c2 01       	movw	r24, r4
    398a:	b1 01       	movw	r22, r2
    398c:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    3990:	29 81       	ldd	r18, Y+1	; 0x01
    3992:	3a 81       	ldd	r19, Y+2	; 0x02
    3994:	4b 81       	ldd	r20, Y+3	; 0x03
    3996:	5c 81       	ldd	r21, Y+4	; 0x04
    3998:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    399c:	0e 94 cb 44 	call	0x8996	; 0x8996 <square>
    39a0:	7b 01       	movw	r14, r22
    39a2:	8c 01       	movw	r16, r24
    39a4:	c4 01       	movw	r24, r8
    39a6:	b3 01       	movw	r22, r6
    39a8:	a6 01       	movw	r20, r12
    39aa:	95 01       	movw	r18, r10
    39ac:	0e 94 bf 40 	call	0x817e	; 0x817e <__addsf3>
    39b0:	a8 01       	movw	r20, r16
    39b2:	97 01       	movw	r18, r14
    39b4:	0e 94 bf 40 	call	0x817e	; 0x817e <__addsf3>
    39b8:	0e 94 8d 44 	call	0x891a	; 0x891a <sqrt>
    39bc:	60 93 85 21 	sts	0x2185, r22
    39c0:	70 93 86 21 	sts	0x2186, r23
    39c4:	80 93 87 21 	sts	0x2187, r24
    39c8:	90 93 88 21 	sts	0x2188, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    39cc:	2d 85       	ldd	r18, Y+13	; 0x0d
    39ce:	3e 85       	ldd	r19, Y+14	; 0x0e
    39d0:	4f 85       	ldd	r20, Y+15	; 0x0f
    39d2:	58 89       	ldd	r21, Y+16	; 0x10
    39d4:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	34 e2       	ldi	r19, 0x24	; 36
    39dc:	44 e7       	ldi	r20, 0x74	; 116
    39de:	59 e4       	ldi	r21, 0x49	; 73
    39e0:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    39e4:	0e 94 f0 43 	call	0x87e0	; 0x87e0 <lround>
    39e8:	60 93 81 21 	sts	0x2181, r22
    39ec:	70 93 82 21 	sts	0x2182, r23
    39f0:	80 93 83 21 	sts	0x2183, r24
    39f4:	90 93 84 21 	sts	0x2184, r25
	}
	mc.line_state = MC_STATE_NEW;
    39f8:	81 e0       	ldi	r24, 0x01	; 1
    39fa:	80 93 5c 21 	sts	0x215C, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    39fe:	ed e5       	ldi	r30, 0x5D	; 93
    3a00:	f1 e2       	ldi	r31, 0x21	; 33
    3a02:	df 01       	movw	r26, r30
    3a04:	1c 96       	adiw	r26, 0x0c	; 12
    3a06:	8c e0       	ldi	r24, 0x0C	; 12
    3a08:	0d 90       	ld	r0, X+
    3a0a:	01 92       	st	Z+, r0
    3a0c:	81 50       	subi	r24, 0x01	; 1
    3a0e:	e1 f7       	brne	.-8      	; 0x3a08 <mc_line+0x262>
	return (mc_line_continue());
    3a10:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <mc_line_continue>
    3a14:	9c 01       	movw	r18, r24
}
    3a16:	c9 01       	movw	r24, r18
    3a18:	62 96       	adiw	r28, 0x12	; 18
    3a1a:	cd bf       	out	0x3d, r28	; 61
    3a1c:	de bf       	out	0x3e, r29	; 62
    3a1e:	cf 91       	pop	r28
    3a20:	df 91       	pop	r29
    3a22:	1f 91       	pop	r17
    3a24:	0f 91       	pop	r16
    3a26:	ff 90       	pop	r15
    3a28:	ef 90       	pop	r14
    3a2a:	df 90       	pop	r13
    3a2c:	cf 90       	pop	r12
    3a2e:	bf 90       	pop	r11
    3a30:	af 90       	pop	r10
    3a32:	9f 90       	pop	r9
    3a34:	8f 90       	pop	r8
    3a36:	7f 90       	pop	r7
    3a38:	6f 90       	pop	r6
    3a3a:	5f 90       	pop	r5
    3a3c:	4f 90       	pop	r4
    3a3e:	3f 90       	pop	r3
    3a40:	2f 90       	pop	r2
    3a42:	08 95       	ret

00003a44 <mc_arc_continue>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continue() 
{
    3a44:	8f 92       	push	r8
    3a46:	9f 92       	push	r9
    3a48:	af 92       	push	r10
    3a4a:	bf 92       	push	r11
    3a4c:	cf 92       	push	r12
    3a4e:	df 92       	push	r13
    3a50:	ef 92       	push	r14
    3a52:	ff 92       	push	r15
    3a54:	0f 93       	push	r16
    3a56:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3a58:	80 91 e1 22 	lds	r24, 0x22E1
    3a5c:	88 23       	and	r24, r24
    3a5e:	19 f4       	brne	.+6      	; 0x3a66 <mc_arc_continue+0x22>
    3a60:	23 e0       	ldi	r18, 0x03	; 3
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	dd c0       	rjmp	.+442    	; 0x3c20 <mc_arc_continue+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3a66:	81 30       	cpi	r24, 0x01	; 1
    3a68:	09 f0       	breq	.+2      	; 0x3a6c <mc_arc_continue+0x28>
    3a6a:	ca c0       	rjmp	.+404    	; 0x3c00 <mc_arc_continue+0x1bc>
		ma.segment_counter=0;
    3a6c:	10 92 e4 22 	sts	0x22E4, r1
    3a70:	10 92 e5 22 	sts	0x22E5, r1
		ma.arc_state = MC_STATE_RUNNING;
    3a74:	82 e0       	ldi	r24, 0x02	; 2
    3a76:	80 93 e1 22 	sts	0x22E1, r24
    3a7a:	c2 c0       	rjmp	.+388    	; 0x3c00 <mc_arc_continue+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3a7c:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <mv_test_move_buffer_full>
    3a80:	88 23       	and	r24, r24
    3a82:	19 f0       	breq	.+6      	; 0x3a8a <mc_arc_continue+0x46>
    3a84:	22 e0       	ldi	r18, 0x02	; 2
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	cb c0       	rjmp	.+406    	; 0x3c20 <mc_arc_continue+0x1dc>
			return (TG_EAGAIN);
		}
		ma.segment_counter++;
    3a8a:	80 91 e4 22 	lds	r24, 0x22E4
    3a8e:	90 91 e5 22 	lds	r25, 0x22E5
    3a92:	01 96       	adiw	r24, 0x01	; 1
    3a94:	80 93 e4 22 	sts	0x22E4, r24
    3a98:	90 93 e5 22 	sts	0x22E5, r25
		ma.theta += ma.theta_per_segment;
    3a9c:	60 91 06 23 	lds	r22, 0x2306
    3aa0:	70 91 07 23 	lds	r23, 0x2307
    3aa4:	80 91 08 23 	lds	r24, 0x2308
    3aa8:	90 91 09 23 	lds	r25, 0x2309
    3aac:	20 91 12 23 	lds	r18, 0x2312
    3ab0:	30 91 13 23 	lds	r19, 0x2313
    3ab4:	40 91 14 23 	lds	r20, 0x2314
    3ab8:	50 91 15 23 	lds	r21, 0x2315
    3abc:	0e 94 bf 40 	call	0x817e	; 0x817e <__addsf3>
    3ac0:	7b 01       	movw	r14, r22
    3ac2:	8c 01       	movw	r16, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	d8 01       	movw	r26, r16
    3ac8:	80 93 06 23 	sts	0x2306, r24
    3acc:	90 93 07 23 	sts	0x2307, r25
    3ad0:	a0 93 08 23 	sts	0x2308, r26
    3ad4:	b0 93 09 23 	sts	0x2309, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3ad8:	b7 01       	movw	r22, r14
    3ada:	c8 01       	movw	r24, r16
    3adc:	0e 94 83 44 	call	0x8906	; 0x8906 <sin>
    3ae0:	80 90 0a 23 	lds	r8, 0x230A
    3ae4:	90 90 0b 23 	lds	r9, 0x230B
    3ae8:	a0 90 0c 23 	lds	r10, 0x230C
    3aec:	b0 90 0d 23 	lds	r11, 0x230D
    3af0:	c0 90 e8 22 	lds	r12, 0x22E8
    3af4:	d0 90 e9 22 	lds	r13, 0x22E9
    3af8:	cc 0c       	add	r12, r12
    3afa:	dd 1c       	adc	r13, r13
    3afc:	cc 0c       	add	r12, r12
    3afe:	dd 1c       	adc	r13, r13
    3b00:	21 ee       	ldi	r18, 0xE1	; 225
    3b02:	32 e2       	ldi	r19, 0x22	; 34
    3b04:	c2 0e       	add	r12, r18
    3b06:	d3 1e       	adc	r13, r19
    3b08:	a5 01       	movw	r20, r10
    3b0a:	94 01       	movw	r18, r8
    3b0c:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    3b10:	9b 01       	movw	r18, r22
    3b12:	ac 01       	movw	r20, r24
    3b14:	60 91 fe 22 	lds	r22, 0x22FE
    3b18:	70 91 ff 22 	lds	r23, 0x22FF
    3b1c:	80 91 00 23 	lds	r24, 0x2300
    3b20:	90 91 01 23 	lds	r25, 0x2301
    3b24:	0e 94 bf 40 	call	0x817e	; 0x817e <__addsf3>
    3b28:	f6 01       	movw	r30, r12
    3b2a:	65 87       	std	Z+13, r22	; 0x0d
    3b2c:	76 87       	std	Z+14, r23	; 0x0e
    3b2e:	87 87       	std	Z+15, r24	; 0x0f
    3b30:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3b32:	b7 01       	movw	r22, r14
    3b34:	c8 01       	movw	r24, r16
    3b36:	0e 94 62 41 	call	0x82c4	; 0x82c4 <cos>
    3b3a:	00 91 ea 22 	lds	r16, 0x22EA
    3b3e:	10 91 eb 22 	lds	r17, 0x22EB
    3b42:	00 0f       	add	r16, r16
    3b44:	11 1f       	adc	r17, r17
    3b46:	00 0f       	add	r16, r16
    3b48:	11 1f       	adc	r17, r17
    3b4a:	0f 51       	subi	r16, 0x1F	; 31
    3b4c:	1d 4d       	sbci	r17, 0xDD	; 221
    3b4e:	a5 01       	movw	r20, r10
    3b50:	94 01       	movw	r18, r8
    3b52:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    3b56:	9b 01       	movw	r18, r22
    3b58:	ac 01       	movw	r20, r24
    3b5a:	60 91 02 23 	lds	r22, 0x2302
    3b5e:	70 91 03 23 	lds	r23, 0x2303
    3b62:	80 91 04 23 	lds	r24, 0x2304
    3b66:	90 91 05 23 	lds	r25, 0x2305
    3b6a:	0e 94 bf 40 	call	0x817e	; 0x817e <__addsf3>
    3b6e:	f8 01       	movw	r30, r16
    3b70:	65 87       	std	Z+13, r22	; 0x0d
    3b72:	76 87       	std	Z+14, r23	; 0x0e
    3b74:	87 87       	std	Z+15, r24	; 0x0f
    3b76:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3b78:	00 91 ec 22 	lds	r16, 0x22EC
    3b7c:	10 91 ed 22 	lds	r17, 0x22ED
    3b80:	00 0f       	add	r16, r16
    3b82:	11 1f       	adc	r17, r17
    3b84:	00 0f       	add	r16, r16
    3b86:	11 1f       	adc	r17, r17
    3b88:	0f 51       	subi	r16, 0x1F	; 31
    3b8a:	1d 4d       	sbci	r17, 0xDD	; 221
    3b8c:	f8 01       	movw	r30, r16
    3b8e:	65 85       	ldd	r22, Z+13	; 0x0d
    3b90:	76 85       	ldd	r23, Z+14	; 0x0e
    3b92:	87 85       	ldd	r24, Z+15	; 0x0f
    3b94:	90 89       	ldd	r25, Z+16	; 0x10
    3b96:	20 91 16 23 	lds	r18, 0x2316
    3b9a:	30 91 17 23 	lds	r19, 0x2317
    3b9e:	40 91 18 23 	lds	r20, 0x2318
    3ba2:	50 91 19 23 	lds	r21, 0x2319
    3ba6:	0e 94 bf 40 	call	0x817e	; 0x817e <__addsf3>
    3baa:	f8 01       	movw	r30, r16
    3bac:	65 87       	std	Z+13, r22	; 0x0d
    3bae:	76 87       	std	Z+14, r23	; 0x0e
    3bb0:	87 87       	std	Z+15, r24	; 0x0f
    3bb2:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    3bb4:	60 91 ee 22 	lds	r22, 0x22EE
    3bb8:	70 91 ef 22 	lds	r23, 0x22EF
    3bbc:	80 91 f0 22 	lds	r24, 0x22F0
    3bc0:	90 91 f1 22 	lds	r25, 0x22F1
    3bc4:	20 91 f2 22 	lds	r18, 0x22F2
    3bc8:	30 91 f3 22 	lds	r19, 0x22F3
    3bcc:	40 91 f4 22 	lds	r20, 0x22F4
    3bd0:	50 91 f5 22 	lds	r21, 0x22F5
    3bd4:	e0 90 f6 22 	lds	r14, 0x22F6
    3bd8:	f0 90 f7 22 	lds	r15, 0x22F7
    3bdc:	00 91 f8 22 	lds	r16, 0x22F8
    3be0:	10 91 f9 22 	lds	r17, 0x22F9
    3be4:	a0 90 0e 23 	lds	r10, 0x230E
    3be8:	b0 90 0f 23 	lds	r11, 0x230F
    3bec:	c0 90 10 23 	lds	r12, 0x2310
    3bf0:	d0 90 11 23 	lds	r13, 0x2311
    3bf4:	80 90 e6 22 	lds	r8, 0x22E6
    3bf8:	90 90 e7 22 	lds	r9, 0x22E7
    3bfc:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3c00:	20 91 e4 22 	lds	r18, 0x22E4
    3c04:	30 91 e5 22 	lds	r19, 0x22E5
    3c08:	80 91 e2 22 	lds	r24, 0x22E2
    3c0c:	90 91 e3 22 	lds	r25, 0x22E3
    3c10:	82 17       	cp	r24, r18
    3c12:	93 07       	cpc	r25, r19
    3c14:	0c f0       	brlt	.+2      	; 0x3c18 <mc_arc_continue+0x1d4>
    3c16:	32 cf       	rjmp	.-412    	; 0x3a7c <mc_arc_continue+0x38>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3c18:	10 92 e1 22 	sts	0x22E1, r1
    3c1c:	20 e0       	ldi	r18, 0x00	; 0
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3c20:	c9 01       	movw	r24, r18
    3c22:	1f 91       	pop	r17
    3c24:	0f 91       	pop	r16
    3c26:	ff 90       	pop	r15
    3c28:	ef 90       	pop	r14
    3c2a:	df 90       	pop	r13
    3c2c:	cf 90       	pop	r12
    3c2e:	bf 90       	pop	r11
    3c30:	af 90       	pop	r10
    3c32:	9f 90       	pop	r9
    3c34:	8f 90       	pop	r8
    3c36:	08 95       	ret

00003c38 <mc_arc>:
 */

int mc_arc(double theta, double angular_travel, double radius, 
		   double linear_travel, int axis_1, int axis_2, int axis_linear, 
		   double feed_rate, int invert_feed_rate)
{
    3c38:	2f 92       	push	r2
    3c3a:	3f 92       	push	r3
    3c3c:	4f 92       	push	r4
    3c3e:	5f 92       	push	r5
    3c40:	6f 92       	push	r6
    3c42:	7f 92       	push	r7
    3c44:	8f 92       	push	r8
    3c46:	9f 92       	push	r9
    3c48:	af 92       	push	r10
    3c4a:	bf 92       	push	r11
    3c4c:	cf 92       	push	r12
    3c4e:	df 92       	push	r13
    3c50:	ef 92       	push	r14
    3c52:	ff 92       	push	r15
    3c54:	0f 93       	push	r16
    3c56:	1f 93       	push	r17
    3c58:	df 93       	push	r29
    3c5a:	cf 93       	push	r28
    3c5c:	cd b7       	in	r28, 0x3d	; 61
    3c5e:	de b7       	in	r29, 0x3e	; 62
    3c60:	28 97       	sbiw	r28, 0x08	; 8
    3c62:	cd bf       	out	0x3d, r28	; 61
    3c64:	de bf       	out	0x3e, r29	; 62
    3c66:	69 83       	std	Y+1, r22	; 0x01
    3c68:	7a 83       	std	Y+2, r23	; 0x02
    3c6a:	8b 83       	std	Y+3, r24	; 0x03
    3c6c:	9c 83       	std	Y+4, r25	; 0x04
    3c6e:	29 01       	movw	r4, r18
    3c70:	3a 01       	movw	r6, r20
    3c72:	ed 82       	std	Y+5, r14	; 0x05
    3c74:	fe 82       	std	Y+6, r15	; 0x06
    3c76:	0f 83       	std	Y+7, r16	; 0x07
    3c78:	18 87       	std	Y+8, r17	; 0x08
    3c7a:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3c7c:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3c7e:	60 93 06 23 	sts	0x2306, r22
    3c82:	70 93 07 23 	sts	0x2307, r23
    3c86:	80 93 08 23 	sts	0x2308, r24
    3c8a:	90 93 09 23 	sts	0x2309, r25
	ma.radius = radius;
    3c8e:	e0 92 0a 23 	sts	0x230A, r14
    3c92:	f0 92 0b 23 	sts	0x230B, r15
    3c96:	00 93 0c 23 	sts	0x230C, r16
    3c9a:	10 93 0d 23 	sts	0x230D, r17
	ma.angular_travel = angular_travel;
    3c9e:	20 93 1a 23 	sts	0x231A, r18
    3ca2:	30 93 1b 23 	sts	0x231B, r19
    3ca6:	40 93 1c 23 	sts	0x231C, r20
    3caa:	50 93 1d 23 	sts	0x231D, r21
	ma.linear_travel = linear_travel;
    3cae:	a0 92 1e 23 	sts	0x231E, r10
    3cb2:	b0 92 1f 23 	sts	0x231F, r11
    3cb6:	c0 92 20 23 	sts	0x2320, r12
    3cba:	d0 92 21 23 	sts	0x2321, r13
	ma.feed_rate = feed_rate;
    3cbe:	8a a1       	ldd	r24, Y+34	; 0x22
    3cc0:	9b a1       	ldd	r25, Y+35	; 0x23
    3cc2:	ac a1       	ldd	r26, Y+36	; 0x24
    3cc4:	bd a1       	ldd	r27, Y+37	; 0x25
    3cc6:	80 93 0e 23 	sts	0x230E, r24
    3cca:	90 93 0f 23 	sts	0x230F, r25
    3cce:	a0 93 10 23 	sts	0x2310, r26
    3cd2:	b0 93 11 23 	sts	0x2311, r27
	ma.invert_feed_rate = invert_feed_rate;
    3cd6:	ae a1       	ldd	r26, Y+38	; 0x26
    3cd8:	bf a1       	ldd	r27, Y+39	; 0x27
    3cda:	a0 93 e6 22 	sts	0x22E6, r26
    3cde:	b0 93 e7 22 	sts	0x22E7, r27
	ma.axis_1 = axis_1;
    3ce2:	80 92 e8 22 	sts	0x22E8, r8
    3ce6:	90 92 e9 22 	sts	0x22E9, r9
	ma.axis_2 = axis_2;
    3cea:	20 92 ea 22 	sts	0x22EA, r2
    3cee:	30 92 eb 22 	sts	0x22EB, r3
	ma.axis_linear = axis_linear;
    3cf2:	e8 a1       	ldd	r30, Y+32	; 0x20
    3cf4:	f9 a1       	ldd	r31, Y+33	; 0x21
    3cf6:	e0 93 ec 22 	sts	0x22EC, r30
    3cfa:	f0 93 ed 22 	sts	0x22ED, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3cfe:	ca 01       	movw	r24, r20
    3d00:	b9 01       	movw	r22, r18
    3d02:	a8 01       	movw	r20, r16
    3d04:	97 01       	movw	r18, r14
    3d06:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    3d0a:	7b 01       	movw	r14, r22
    3d0c:	8c 01       	movw	r16, r24
    3d0e:	c6 01       	movw	r24, r12
    3d10:	b5 01       	movw	r22, r10
    3d12:	0e 94 cd 41 	call	0x839a	; 0x839a <__fixsfsi>
    3d16:	97 ff       	sbrs	r25, 7
    3d18:	07 c0       	rjmp	.+14     	; 0x3d28 <mc_arc+0xf0>
    3d1a:	90 95       	com	r25
    3d1c:	80 95       	com	r24
    3d1e:	70 95       	com	r23
    3d20:	61 95       	neg	r22
    3d22:	7f 4f       	sbci	r23, 0xFF	; 255
    3d24:	8f 4f       	sbci	r24, 0xFF	; 255
    3d26:	9f 4f       	sbci	r25, 0xFF	; 255
    3d28:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    3d2c:	9b 01       	movw	r18, r22
    3d2e:	ac 01       	movw	r20, r24
    3d30:	c8 01       	movw	r24, r16
    3d32:	b7 01       	movw	r22, r14
    3d34:	0e 94 5b 43 	call	0x86b6	; 0x86b6 <hypot>
    3d38:	7b 01       	movw	r14, r22
    3d3a:	8c 01       	movw	r16, r24
    3d3c:	60 93 fa 22 	sts	0x22FA, r22
    3d40:	70 93 fb 22 	sts	0x22FB, r23
    3d44:	80 93 fc 22 	sts	0x22FC, r24
    3d48:	90 93 fd 22 	sts	0x22FD, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3d4c:	2d ec       	ldi	r18, 0xCD	; 205
    3d4e:	3c ec       	ldi	r19, 0xCC	; 204
    3d50:	4c e4       	ldi	r20, 0x4C	; 76
    3d52:	5d e3       	ldi	r21, 0x3D	; 61
    3d54:	0e 94 5e 41 	call	0x82bc	; 0x82bc <__cmpsf2>
    3d58:	88 23       	and	r24, r24
    3d5a:	1c f4       	brge	.+6      	; 0x3d62 <mc_arc+0x12a>
    3d5c:	23 e1       	ldi	r18, 0x13	; 19
    3d5e:	30 e0       	ldi	r19, 0x00	; 0
    3d60:	fb c0       	rjmp	.+502    	; 0x3f58 <mc_arc+0x320>
		return (TG_ARC_SPECIFICATION_ERROR);
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3d62:	c8 01       	movw	r24, r16
    3d64:	b7 01       	movw	r22, r14
    3d66:	20 91 75 22 	lds	r18, 0x2275
    3d6a:	30 91 76 22 	lds	r19, 0x2276
    3d6e:	40 91 77 22 	lds	r20, 0x2277
    3d72:	50 91 78 22 	lds	r21, 0x2278
    3d76:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    3d7a:	0e 94 4b 41 	call	0x8296	; 0x8296 <ceil>
    3d7e:	0e 94 cd 41 	call	0x839a	; 0x839a <__fixsfsi>
    3d82:	8b 01       	movw	r16, r22
    3d84:	60 93 e2 22 	sts	0x22E2, r22
    3d88:	70 93 e3 22 	sts	0x22E3, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    3d8c:	8e a1       	ldd	r24, Y+38	; 0x26
    3d8e:	9f a1       	ldd	r25, Y+39	; 0x27
    3d90:	89 2b       	or	r24, r25
    3d92:	b9 f0       	breq	.+46     	; 0x3dc2 <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    3d94:	b8 01       	movw	r22, r16
    3d96:	88 27       	eor	r24, r24
    3d98:	77 fd       	sbrc	r23, 7
    3d9a:	80 95       	com	r24
    3d9c:	98 2f       	mov	r25, r24
    3d9e:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    3da2:	9b 01       	movw	r18, r22
    3da4:	ac 01       	movw	r20, r24
    3da6:	6a a1       	ldd	r22, Y+34	; 0x22
    3da8:	7b a1       	ldd	r23, Y+35	; 0x23
    3daa:	8c a1       	ldd	r24, Y+36	; 0x24
    3dac:	9d a1       	ldd	r25, Y+37	; 0x25
    3dae:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    3db2:	60 93 0e 23 	sts	0x230E, r22
    3db6:	70 93 0f 23 	sts	0x230F, r23
    3dba:	80 93 10 23 	sts	0x2310, r24
    3dbe:	90 93 11 23 	sts	0x2311, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    3dc2:	b8 01       	movw	r22, r16
    3dc4:	88 27       	eor	r24, r24
    3dc6:	77 fd       	sbrc	r23, 7
    3dc8:	80 95       	com	r24
    3dca:	98 2f       	mov	r25, r24
    3dcc:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    3dd0:	7b 01       	movw	r14, r22
    3dd2:	8c 01       	movw	r16, r24
    3dd4:	c3 01       	movw	r24, r6
    3dd6:	b2 01       	movw	r22, r4
    3dd8:	a8 01       	movw	r20, r16
    3dda:	97 01       	movw	r18, r14
    3ddc:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    3de0:	60 93 12 23 	sts	0x2312, r22
    3de4:	70 93 13 23 	sts	0x2313, r23
    3de8:	80 93 14 23 	sts	0x2314, r24
    3dec:	90 93 15 23 	sts	0x2315, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    3df0:	c6 01       	movw	r24, r12
    3df2:	b5 01       	movw	r22, r10
    3df4:	a8 01       	movw	r20, r16
    3df6:	97 01       	movw	r18, r14
    3df8:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    3dfc:	60 93 16 23 	sts	0x2316, r22
    3e00:	70 93 17 23 	sts	0x2317, r23
    3e04:	80 93 18 23 	sts	0x2318, r24
    3e08:	90 93 19 23 	sts	0x2319, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    3e0c:	69 81       	ldd	r22, Y+1	; 0x01
    3e0e:	7a 81       	ldd	r23, Y+2	; 0x02
    3e10:	8b 81       	ldd	r24, Y+3	; 0x03
    3e12:	9c 81       	ldd	r25, Y+4	; 0x04
    3e14:	0e 94 83 44 	call	0x8906	; 0x8906 <sin>
    3e18:	5b 01       	movw	r10, r22
    3e1a:	6c 01       	movw	r12, r24
    3e1c:	f4 01       	movw	r30, r8
    3e1e:	ee 0f       	add	r30, r30
    3e20:	ff 1f       	adc	r31, r31
    3e22:	ee 0f       	add	r30, r30
    3e24:	ff 1f       	adc	r31, r31
    3e26:	e4 5a       	subi	r30, 0xA4	; 164
    3e28:	fe 4d       	sbci	r31, 0xDE	; 222
    3e2a:	61 81       	ldd	r22, Z+1	; 0x01
    3e2c:	72 81       	ldd	r23, Z+2	; 0x02
    3e2e:	83 81       	ldd	r24, Z+3	; 0x03
    3e30:	94 81       	ldd	r25, Z+4	; 0x04
    3e32:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    3e36:	f4 01       	movw	r30, r8
    3e38:	ee 0f       	add	r30, r30
    3e3a:	ff 1f       	adc	r31, r31
    3e3c:	e8 0d       	add	r30, r8
    3e3e:	f9 1d       	adc	r31, r9
    3e40:	13 e0       	ldi	r17, 0x03	; 3
    3e42:	ee 0f       	add	r30, r30
    3e44:	ff 1f       	adc	r31, r31
    3e46:	1a 95       	dec	r17
    3e48:	e1 f7       	brne	.-8      	; 0x3e42 <mc_arc+0x20a>
    3e4a:	ed 58       	subi	r30, 0x8D	; 141
    3e4c:	fd 4d       	sbci	r31, 0xDD	; 221
    3e4e:	21 a1       	ldd	r18, Z+33	; 0x21
    3e50:	32 a1       	ldd	r19, Z+34	; 0x22
    3e52:	43 a1       	ldd	r20, Z+35	; 0x23
    3e54:	54 a1       	ldd	r21, Z+36	; 0x24
    3e56:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    3e5a:	7b 01       	movw	r14, r22
    3e5c:	8c 01       	movw	r16, r24
    3e5e:	c6 01       	movw	r24, r12
    3e60:	b5 01       	movw	r22, r10
    3e62:	2d 81       	ldd	r18, Y+5	; 0x05
    3e64:	3e 81       	ldd	r19, Y+6	; 0x06
    3e66:	4f 81       	ldd	r20, Y+7	; 0x07
    3e68:	58 85       	ldd	r21, Y+8	; 0x08
    3e6a:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    3e6e:	9b 01       	movw	r18, r22
    3e70:	ac 01       	movw	r20, r24
    3e72:	c8 01       	movw	r24, r16
    3e74:	b7 01       	movw	r22, r14
    3e76:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    3e7a:	60 93 fe 22 	sts	0x22FE, r22
    3e7e:	70 93 ff 22 	sts	0x22FF, r23
    3e82:	80 93 00 23 	sts	0x2300, r24
    3e86:	90 93 01 23 	sts	0x2301, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    3e8a:	69 81       	ldd	r22, Y+1	; 0x01
    3e8c:	7a 81       	ldd	r23, Y+2	; 0x02
    3e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e90:	9c 81       	ldd	r25, Y+4	; 0x04
    3e92:	0e 94 62 41 	call	0x82c4	; 0x82c4 <cos>
    3e96:	5b 01       	movw	r10, r22
    3e98:	6c 01       	movw	r12, r24
    3e9a:	f1 01       	movw	r30, r2
    3e9c:	ee 0f       	add	r30, r30
    3e9e:	ff 1f       	adc	r31, r31
    3ea0:	ee 0f       	add	r30, r30
    3ea2:	ff 1f       	adc	r31, r31
    3ea4:	e4 5a       	subi	r30, 0xA4	; 164
    3ea6:	fe 4d       	sbci	r31, 0xDE	; 222
    3ea8:	61 81       	ldd	r22, Z+1	; 0x01
    3eaa:	72 81       	ldd	r23, Z+2	; 0x02
    3eac:	83 81       	ldd	r24, Z+3	; 0x03
    3eae:	94 81       	ldd	r25, Z+4	; 0x04
    3eb0:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    3eb4:	f1 01       	movw	r30, r2
    3eb6:	ee 0f       	add	r30, r30
    3eb8:	ff 1f       	adc	r31, r31
    3eba:	e2 0d       	add	r30, r2
    3ebc:	f3 1d       	adc	r31, r3
    3ebe:	53 e0       	ldi	r21, 0x03	; 3
    3ec0:	ee 0f       	add	r30, r30
    3ec2:	ff 1f       	adc	r31, r31
    3ec4:	5a 95       	dec	r21
    3ec6:	e1 f7       	brne	.-8      	; 0x3ec0 <mc_arc+0x288>
    3ec8:	ed 58       	subi	r30, 0x8D	; 141
    3eca:	fd 4d       	sbci	r31, 0xDD	; 221
    3ecc:	21 a1       	ldd	r18, Z+33	; 0x21
    3ece:	32 a1       	ldd	r19, Z+34	; 0x22
    3ed0:	43 a1       	ldd	r20, Z+35	; 0x23
    3ed2:	54 a1       	ldd	r21, Z+36	; 0x24
    3ed4:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    3ed8:	7b 01       	movw	r14, r22
    3eda:	8c 01       	movw	r16, r24
    3edc:	c6 01       	movw	r24, r12
    3ede:	b5 01       	movw	r22, r10
    3ee0:	2d 81       	ldd	r18, Y+5	; 0x05
    3ee2:	3e 81       	ldd	r19, Y+6	; 0x06
    3ee4:	4f 81       	ldd	r20, Y+7	; 0x07
    3ee6:	58 85       	ldd	r21, Y+8	; 0x08
    3ee8:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    3eec:	9b 01       	movw	r18, r22
    3eee:	ac 01       	movw	r20, r24
    3ef0:	c8 01       	movw	r24, r16
    3ef2:	b7 01       	movw	r22, r14
    3ef4:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    3ef8:	60 93 02 23 	sts	0x2302, r22
    3efc:	70 93 03 23 	sts	0x2303, r23
    3f00:	80 93 04 23 	sts	0x2304, r24
    3f04:	90 93 05 23 	sts	0x2305, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    3f08:	e8 a1       	ldd	r30, Y+32	; 0x20
    3f0a:	f9 a1       	ldd	r31, Y+33	; 0x21
    3f0c:	ee 0f       	add	r30, r30
    3f0e:	ff 1f       	adc	r31, r31
    3f10:	ee 0f       	add	r30, r30
    3f12:	ff 1f       	adc	r31, r31
    3f14:	8f 01       	movw	r16, r30
    3f16:	0f 51       	subi	r16, 0x1F	; 31
    3f18:	1d 4d       	sbci	r17, 0xDD	; 221
    3f1a:	e4 5a       	subi	r30, 0xA4	; 164
    3f1c:	fe 4d       	sbci	r31, 0xDE	; 222
    3f1e:	61 81       	ldd	r22, Z+1	; 0x01
    3f20:	72 81       	ldd	r23, Z+2	; 0x02
    3f22:	83 81       	ldd	r24, Z+3	; 0x03
    3f24:	94 81       	ldd	r25, Z+4	; 0x04
    3f26:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    3f2a:	20 91 c4 22 	lds	r18, 0x22C4
    3f2e:	30 91 c5 22 	lds	r19, 0x22C5
    3f32:	40 91 c6 22 	lds	r20, 0x22C6
    3f36:	50 91 c7 22 	lds	r21, 0x22C7
    3f3a:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    3f3e:	d8 01       	movw	r26, r16
    3f40:	1d 96       	adiw	r26, 0x0d	; 13
    3f42:	6d 93       	st	X+, r22
    3f44:	7d 93       	st	X+, r23
    3f46:	8d 93       	st	X+, r24
    3f48:	9c 93       	st	X, r25
    3f4a:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    3f4c:	81 e0       	ldi	r24, 0x01	; 1
    3f4e:	80 93 e1 22 	sts	0x22E1, r24
	return (mc_arc_continue());
    3f52:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <mc_arc_continue>
    3f56:	9c 01       	movw	r18, r24
}
    3f58:	c9 01       	movw	r24, r18
    3f5a:	28 96       	adiw	r28, 0x08	; 8
    3f5c:	cd bf       	out	0x3d, r28	; 61
    3f5e:	de bf       	out	0x3e, r29	; 62
    3f60:	cf 91       	pop	r28
    3f62:	df 91       	pop	r29
    3f64:	1f 91       	pop	r17
    3f66:	0f 91       	pop	r16
    3f68:	ff 90       	pop	r15
    3f6a:	ef 90       	pop	r14
    3f6c:	df 90       	pop	r13
    3f6e:	cf 90       	pop	r12
    3f70:	bf 90       	pop	r11
    3f72:	af 90       	pop	r10
    3f74:	9f 90       	pop	r9
    3f76:	8f 90       	pop	r8
    3f78:	7f 90       	pop	r7
    3f7a:	6f 90       	pop	r6
    3f7c:	5f 90       	pop	r5
    3f7e:	4f 90       	pop	r4
    3f80:	3f 90       	pop	r3
    3f82:	2f 90       	pop	r2
    3f84:	08 95       	ret

00003f86 <mc_arc_blocking>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc_blocking(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    3f86:	2f 92       	push	r2
    3f88:	3f 92       	push	r3
    3f8a:	4f 92       	push	r4
    3f8c:	5f 92       	push	r5
    3f8e:	6f 92       	push	r6
    3f90:	7f 92       	push	r7
    3f92:	8f 92       	push	r8
    3f94:	9f 92       	push	r9
    3f96:	af 92       	push	r10
    3f98:	bf 92       	push	r11
    3f9a:	cf 92       	push	r12
    3f9c:	df 92       	push	r13
    3f9e:	ef 92       	push	r14
    3fa0:	ff 92       	push	r15
    3fa2:	0f 93       	push	r16
    3fa4:	1f 93       	push	r17
    3fa6:	df 93       	push	r29
    3fa8:	cf 93       	push	r28
    3faa:	cd b7       	in	r28, 0x3d	; 61
    3fac:	de b7       	in	r29, 0x3e	; 62
    3fae:	28 97       	sbiw	r28, 0x08	; 8
    3fb0:	cd bf       	out	0x3d, r28	; 61
    3fb2:	de bf       	out	0x3e, r29	; 62
    3fb4:	69 83       	std	Y+1, r22	; 0x01
    3fb6:	7a 83       	std	Y+2, r23	; 0x02
    3fb8:	8b 83       	std	Y+3, r24	; 0x03
    3fba:	9c 83       	std	Y+4, r25	; 0x04
    3fbc:	29 01       	movw	r4, r18
    3fbe:	3a 01       	movw	r6, r20
    3fc0:	ed 82       	std	Y+5, r14	; 0x05
    3fc2:	fe 82       	std	Y+6, r15	; 0x06
    3fc4:	0f 83       	std	Y+7, r16	; 0x07
    3fc6:	18 87       	std	Y+8, r17	; 0x08
    3fc8:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3fca:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3fcc:	60 93 06 23 	sts	0x2306, r22
    3fd0:	70 93 07 23 	sts	0x2307, r23
    3fd4:	80 93 08 23 	sts	0x2308, r24
    3fd8:	90 93 09 23 	sts	0x2309, r25
	ma.radius = radius;
    3fdc:	e0 92 0a 23 	sts	0x230A, r14
    3fe0:	f0 92 0b 23 	sts	0x230B, r15
    3fe4:	00 93 0c 23 	sts	0x230C, r16
    3fe8:	10 93 0d 23 	sts	0x230D, r17
	ma.angular_travel = angular_travel;
    3fec:	20 93 1a 23 	sts	0x231A, r18
    3ff0:	30 93 1b 23 	sts	0x231B, r19
    3ff4:	40 93 1c 23 	sts	0x231C, r20
    3ff8:	50 93 1d 23 	sts	0x231D, r21
	ma.linear_travel = linear_travel;
    3ffc:	a0 92 1e 23 	sts	0x231E, r10
    4000:	b0 92 1f 23 	sts	0x231F, r11
    4004:	c0 92 20 23 	sts	0x2320, r12
    4008:	d0 92 21 23 	sts	0x2321, r13
	ma.feed_rate = feed_rate;
    400c:	8a a1       	ldd	r24, Y+34	; 0x22
    400e:	9b a1       	ldd	r25, Y+35	; 0x23
    4010:	ac a1       	ldd	r26, Y+36	; 0x24
    4012:	bd a1       	ldd	r27, Y+37	; 0x25
    4014:	80 93 0e 23 	sts	0x230E, r24
    4018:	90 93 0f 23 	sts	0x230F, r25
    401c:	a0 93 10 23 	sts	0x2310, r26
    4020:	b0 93 11 23 	sts	0x2311, r27
	ma.invert_feed_rate = invert_feed_rate;
    4024:	ae a1       	ldd	r26, Y+38	; 0x26
    4026:	bf a1       	ldd	r27, Y+39	; 0x27
    4028:	a0 93 e6 22 	sts	0x22E6, r26
    402c:	b0 93 e7 22 	sts	0x22E7, r27
	ma.axis_1 = axis_1;
    4030:	80 92 e8 22 	sts	0x22E8, r8
    4034:	90 92 e9 22 	sts	0x22E9, r9
	ma.axis_2 = axis_2;
    4038:	20 92 ea 22 	sts	0x22EA, r2
    403c:	30 92 eb 22 	sts	0x22EB, r3
	ma.axis_linear = axis_linear;
    4040:	e8 a1       	ldd	r30, Y+32	; 0x20
    4042:	f9 a1       	ldd	r31, Y+33	; 0x21
    4044:	e0 93 ec 22 	sts	0x22EC, r30
    4048:	f0 93 ed 22 	sts	0x22ED, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    404c:	ca 01       	movw	r24, r20
    404e:	b9 01       	movw	r22, r18
    4050:	a8 01       	movw	r20, r16
    4052:	97 01       	movw	r18, r14
    4054:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    4058:	7b 01       	movw	r14, r22
    405a:	8c 01       	movw	r16, r24
    405c:	c6 01       	movw	r24, r12
    405e:	b5 01       	movw	r22, r10
    4060:	0e 94 cd 41 	call	0x839a	; 0x839a <__fixsfsi>
    4064:	97 ff       	sbrs	r25, 7
    4066:	07 c0       	rjmp	.+14     	; 0x4076 <mc_arc_blocking+0xf0>
    4068:	90 95       	com	r25
    406a:	80 95       	com	r24
    406c:	70 95       	com	r23
    406e:	61 95       	neg	r22
    4070:	7f 4f       	sbci	r23, 0xFF	; 255
    4072:	8f 4f       	sbci	r24, 0xFF	; 255
    4074:	9f 4f       	sbci	r25, 0xFF	; 255
    4076:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    407a:	9b 01       	movw	r18, r22
    407c:	ac 01       	movw	r20, r24
    407e:	c8 01       	movw	r24, r16
    4080:	b7 01       	movw	r22, r14
    4082:	0e 94 5b 43 	call	0x86b6	; 0x86b6 <hypot>
    4086:	7b 01       	movw	r14, r22
    4088:	8c 01       	movw	r16, r24
    408a:	60 93 fa 22 	sts	0x22FA, r22
    408e:	70 93 fb 22 	sts	0x22FB, r23
    4092:	80 93 fc 22 	sts	0x22FC, r24
    4096:	90 93 fd 22 	sts	0x22FD, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    409a:	2d ec       	ldi	r18, 0xCD	; 205
    409c:	3c ec       	ldi	r19, 0xCC	; 204
    409e:	4c e4       	ldi	r20, 0x4C	; 76
    40a0:	5d e3       	ldi	r21, 0x3D	; 61
    40a2:	0e 94 5e 41 	call	0x82bc	; 0x82bc <__cmpsf2>
    40a6:	88 23       	and	r24, r24
    40a8:	1c f4       	brge	.+6      	; 0x40b0 <mc_arc_blocking+0x12a>
    40aa:	23 e1       	ldi	r18, 0x13	; 19
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	c7 c1       	rjmp	.+910    	; 0x443e <mc_arc_blocking+0x4b8>
		return (TG_ARC_SPECIFICATION_ERROR);			
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    40b0:	c8 01       	movw	r24, r16
    40b2:	b7 01       	movw	r22, r14
    40b4:	20 91 75 22 	lds	r18, 0x2275
    40b8:	30 91 76 22 	lds	r19, 0x2276
    40bc:	40 91 77 22 	lds	r20, 0x2277
    40c0:	50 91 78 22 	lds	r21, 0x2278
    40c4:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    40c8:	0e 94 4b 41 	call	0x8296	; 0x8296 <ceil>
    40cc:	0e 94 cd 41 	call	0x839a	; 0x839a <__fixsfsi>
    40d0:	8b 01       	movw	r16, r22
    40d2:	60 93 e2 22 	sts	0x22E2, r22
    40d6:	70 93 e3 22 	sts	0x22E3, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    40da:	2e a1       	ldd	r18, Y+38	; 0x26
    40dc:	3f a1       	ldd	r19, Y+39	; 0x27
    40de:	23 2b       	or	r18, r19
    40e0:	b9 f0       	breq	.+46     	; 0x4110 <mc_arc_blocking+0x18a>
		ma.feed_rate *= ma.segments; 
    40e2:	b8 01       	movw	r22, r16
    40e4:	88 27       	eor	r24, r24
    40e6:	77 fd       	sbrc	r23, 7
    40e8:	80 95       	com	r24
    40ea:	98 2f       	mov	r25, r24
    40ec:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    40f0:	9b 01       	movw	r18, r22
    40f2:	ac 01       	movw	r20, r24
    40f4:	6a a1       	ldd	r22, Y+34	; 0x22
    40f6:	7b a1       	ldd	r23, Y+35	; 0x23
    40f8:	8c a1       	ldd	r24, Y+36	; 0x24
    40fa:	9d a1       	ldd	r25, Y+37	; 0x25
    40fc:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    4100:	60 93 0e 23 	sts	0x230E, r22
    4104:	70 93 0f 23 	sts	0x230F, r23
    4108:	80 93 10 23 	sts	0x2310, r24
    410c:	90 93 11 23 	sts	0x2311, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    4110:	b8 01       	movw	r22, r16
    4112:	88 27       	eor	r24, r24
    4114:	77 fd       	sbrc	r23, 7
    4116:	80 95       	com	r24
    4118:	98 2f       	mov	r25, r24
    411a:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    411e:	7b 01       	movw	r14, r22
    4120:	8c 01       	movw	r16, r24
    4122:	c3 01       	movw	r24, r6
    4124:	b2 01       	movw	r22, r4
    4126:	a8 01       	movw	r20, r16
    4128:	97 01       	movw	r18, r14
    412a:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    412e:	60 93 12 23 	sts	0x2312, r22
    4132:	70 93 13 23 	sts	0x2313, r23
    4136:	80 93 14 23 	sts	0x2314, r24
    413a:	90 93 15 23 	sts	0x2315, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    413e:	c6 01       	movw	r24, r12
    4140:	b5 01       	movw	r22, r10
    4142:	a8 01       	movw	r20, r16
    4144:	97 01       	movw	r18, r14
    4146:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    414a:	60 93 16 23 	sts	0x2316, r22
    414e:	70 93 17 23 	sts	0x2317, r23
    4152:	80 93 18 23 	sts	0x2318, r24
    4156:	90 93 19 23 	sts	0x2319, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    415a:	69 81       	ldd	r22, Y+1	; 0x01
    415c:	7a 81       	ldd	r23, Y+2	; 0x02
    415e:	8b 81       	ldd	r24, Y+3	; 0x03
    4160:	9c 81       	ldd	r25, Y+4	; 0x04
    4162:	0e 94 83 44 	call	0x8906	; 0x8906 <sin>
    4166:	5b 01       	movw	r10, r22
    4168:	6c 01       	movw	r12, r24
    416a:	f4 01       	movw	r30, r8
    416c:	ee 0f       	add	r30, r30
    416e:	ff 1f       	adc	r31, r31
    4170:	ee 0f       	add	r30, r30
    4172:	ff 1f       	adc	r31, r31
    4174:	e4 5a       	subi	r30, 0xA4	; 164
    4176:	fe 4d       	sbci	r31, 0xDE	; 222
    4178:	61 81       	ldd	r22, Z+1	; 0x01
    417a:	72 81       	ldd	r23, Z+2	; 0x02
    417c:	83 81       	ldd	r24, Z+3	; 0x03
    417e:	94 81       	ldd	r25, Z+4	; 0x04
    4180:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    4184:	f4 01       	movw	r30, r8
    4186:	ee 0f       	add	r30, r30
    4188:	ff 1f       	adc	r31, r31
    418a:	e8 0d       	add	r30, r8
    418c:	f9 1d       	adc	r31, r9
    418e:	13 e0       	ldi	r17, 0x03	; 3
    4190:	ee 0f       	add	r30, r30
    4192:	ff 1f       	adc	r31, r31
    4194:	1a 95       	dec	r17
    4196:	e1 f7       	brne	.-8      	; 0x4190 <mc_arc_blocking+0x20a>
    4198:	ed 58       	subi	r30, 0x8D	; 141
    419a:	fd 4d       	sbci	r31, 0xDD	; 221
    419c:	21 a1       	ldd	r18, Z+33	; 0x21
    419e:	32 a1       	ldd	r19, Z+34	; 0x22
    41a0:	43 a1       	ldd	r20, Z+35	; 0x23
    41a2:	54 a1       	ldd	r21, Z+36	; 0x24
    41a4:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    41a8:	7b 01       	movw	r14, r22
    41aa:	8c 01       	movw	r16, r24
    41ac:	c6 01       	movw	r24, r12
    41ae:	b5 01       	movw	r22, r10
    41b0:	2d 81       	ldd	r18, Y+5	; 0x05
    41b2:	3e 81       	ldd	r19, Y+6	; 0x06
    41b4:	4f 81       	ldd	r20, Y+7	; 0x07
    41b6:	58 85       	ldd	r21, Y+8	; 0x08
    41b8:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    41bc:	9b 01       	movw	r18, r22
    41be:	ac 01       	movw	r20, r24
    41c0:	c8 01       	movw	r24, r16
    41c2:	b7 01       	movw	r22, r14
    41c4:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    41c8:	60 93 fe 22 	sts	0x22FE, r22
    41cc:	70 93 ff 22 	sts	0x22FF, r23
    41d0:	80 93 00 23 	sts	0x2300, r24
    41d4:	90 93 01 23 	sts	0x2301, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    41d8:	69 81       	ldd	r22, Y+1	; 0x01
    41da:	7a 81       	ldd	r23, Y+2	; 0x02
    41dc:	8b 81       	ldd	r24, Y+3	; 0x03
    41de:	9c 81       	ldd	r25, Y+4	; 0x04
    41e0:	0e 94 62 41 	call	0x82c4	; 0x82c4 <cos>
    41e4:	5b 01       	movw	r10, r22
    41e6:	6c 01       	movw	r12, r24
    41e8:	f1 01       	movw	r30, r2
    41ea:	ee 0f       	add	r30, r30
    41ec:	ff 1f       	adc	r31, r31
    41ee:	ee 0f       	add	r30, r30
    41f0:	ff 1f       	adc	r31, r31
    41f2:	e4 5a       	subi	r30, 0xA4	; 164
    41f4:	fe 4d       	sbci	r31, 0xDE	; 222
    41f6:	61 81       	ldd	r22, Z+1	; 0x01
    41f8:	72 81       	ldd	r23, Z+2	; 0x02
    41fa:	83 81       	ldd	r24, Z+3	; 0x03
    41fc:	94 81       	ldd	r25, Z+4	; 0x04
    41fe:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    4202:	f1 01       	movw	r30, r2
    4204:	ee 0f       	add	r30, r30
    4206:	ff 1f       	adc	r31, r31
    4208:	e2 0d       	add	r30, r2
    420a:	f3 1d       	adc	r31, r3
    420c:	53 e0       	ldi	r21, 0x03	; 3
    420e:	ee 0f       	add	r30, r30
    4210:	ff 1f       	adc	r31, r31
    4212:	5a 95       	dec	r21
    4214:	e1 f7       	brne	.-8      	; 0x420e <mc_arc_blocking+0x288>
    4216:	ed 58       	subi	r30, 0x8D	; 141
    4218:	fd 4d       	sbci	r31, 0xDD	; 221
    421a:	21 a1       	ldd	r18, Z+33	; 0x21
    421c:	32 a1       	ldd	r19, Z+34	; 0x22
    421e:	43 a1       	ldd	r20, Z+35	; 0x23
    4220:	54 a1       	ldd	r21, Z+36	; 0x24
    4222:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    4226:	7b 01       	movw	r14, r22
    4228:	8c 01       	movw	r16, r24
    422a:	c6 01       	movw	r24, r12
    422c:	b5 01       	movw	r22, r10
    422e:	2d 81       	ldd	r18, Y+5	; 0x05
    4230:	3e 81       	ldd	r19, Y+6	; 0x06
    4232:	4f 81       	ldd	r20, Y+7	; 0x07
    4234:	58 85       	ldd	r21, Y+8	; 0x08
    4236:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    423a:	9b 01       	movw	r18, r22
    423c:	ac 01       	movw	r20, r24
    423e:	c8 01       	movw	r24, r16
    4240:	b7 01       	movw	r22, r14
    4242:	0e 94 be 40 	call	0x817c	; 0x817c <__subsf3>
    4246:	60 93 02 23 	sts	0x2302, r22
    424a:	70 93 03 23 	sts	0x2303, r23
    424e:	80 93 04 23 	sts	0x2304, r24
    4252:	90 93 05 23 	sts	0x2305, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    4256:	e8 a1       	ldd	r30, Y+32	; 0x20
    4258:	f9 a1       	ldd	r31, Y+33	; 0x21
    425a:	ee 0f       	add	r30, r30
    425c:	ff 1f       	adc	r31, r31
    425e:	ee 0f       	add	r30, r30
    4260:	ff 1f       	adc	r31, r31
    4262:	8f 01       	movw	r16, r30
    4264:	0f 51       	subi	r16, 0x1F	; 31
    4266:	1d 4d       	sbci	r17, 0xDD	; 221
    4268:	e4 5a       	subi	r30, 0xA4	; 164
    426a:	fe 4d       	sbci	r31, 0xDE	; 222
    426c:	61 81       	ldd	r22, Z+1	; 0x01
    426e:	72 81       	ldd	r23, Z+2	; 0x02
    4270:	83 81       	ldd	r24, Z+3	; 0x03
    4272:	94 81       	ldd	r25, Z+4	; 0x04
    4274:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    4278:	20 91 c4 22 	lds	r18, 0x22C4
    427c:	30 91 c5 22 	lds	r19, 0x22C5
    4280:	40 91 c6 22 	lds	r20, 0x22C6
    4284:	50 91 c7 22 	lds	r21, 0x22C7
    4288:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    428c:	d8 01       	movw	r26, r16
    428e:	1d 96       	adiw	r26, 0x0d	; 13
    4290:	6d 93       	st	X+, r22
    4292:	7d 93       	st	X+, r23
    4294:	8d 93       	st	X+, r24
    4296:	9c 93       	st	X, r25
    4298:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    429a:	10 92 e4 22 	sts	0x22E4, r1
    429e:	10 92 e5 22 	sts	0x22E5, r1
    42a2:	bf c0       	rjmp	.+382    	; 0x4422 <mc_arc_blocking+0x49c>
		ma.theta += ma.theta_per_segment;
    42a4:	60 91 06 23 	lds	r22, 0x2306
    42a8:	70 91 07 23 	lds	r23, 0x2307
    42ac:	80 91 08 23 	lds	r24, 0x2308
    42b0:	90 91 09 23 	lds	r25, 0x2309
    42b4:	20 91 12 23 	lds	r18, 0x2312
    42b8:	30 91 13 23 	lds	r19, 0x2313
    42bc:	40 91 14 23 	lds	r20, 0x2314
    42c0:	50 91 15 23 	lds	r21, 0x2315
    42c4:	0e 94 bf 40 	call	0x817e	; 0x817e <__addsf3>
    42c8:	7b 01       	movw	r14, r22
    42ca:	8c 01       	movw	r16, r24
    42cc:	cb 01       	movw	r24, r22
    42ce:	d8 01       	movw	r26, r16
    42d0:	80 93 06 23 	sts	0x2306, r24
    42d4:	90 93 07 23 	sts	0x2307, r25
    42d8:	a0 93 08 23 	sts	0x2308, r26
    42dc:	b0 93 09 23 	sts	0x2309, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    42e0:	b7 01       	movw	r22, r14
    42e2:	c8 01       	movw	r24, r16
    42e4:	0e 94 83 44 	call	0x8906	; 0x8906 <sin>
    42e8:	80 90 0a 23 	lds	r8, 0x230A
    42ec:	90 90 0b 23 	lds	r9, 0x230B
    42f0:	a0 90 0c 23 	lds	r10, 0x230C
    42f4:	b0 90 0d 23 	lds	r11, 0x230D
    42f8:	c0 90 e8 22 	lds	r12, 0x22E8
    42fc:	d0 90 e9 22 	lds	r13, 0x22E9
    4300:	cc 0c       	add	r12, r12
    4302:	dd 1c       	adc	r13, r13
    4304:	cc 0c       	add	r12, r12
    4306:	dd 1c       	adc	r13, r13
    4308:	e1 ee       	ldi	r30, 0xE1	; 225
    430a:	f2 e2       	ldi	r31, 0x22	; 34
    430c:	ce 0e       	add	r12, r30
    430e:	df 1e       	adc	r13, r31
    4310:	a5 01       	movw	r20, r10
    4312:	94 01       	movw	r18, r8
    4314:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    4318:	9b 01       	movw	r18, r22
    431a:	ac 01       	movw	r20, r24
    431c:	60 91 fe 22 	lds	r22, 0x22FE
    4320:	70 91 ff 22 	lds	r23, 0x22FF
    4324:	80 91 00 23 	lds	r24, 0x2300
    4328:	90 91 01 23 	lds	r25, 0x2301
    432c:	0e 94 bf 40 	call	0x817e	; 0x817e <__addsf3>
    4330:	d6 01       	movw	r26, r12
    4332:	1d 96       	adiw	r26, 0x0d	; 13
    4334:	6d 93       	st	X+, r22
    4336:	7d 93       	st	X+, r23
    4338:	8d 93       	st	X+, r24
    433a:	9c 93       	st	X, r25
    433c:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    433e:	b7 01       	movw	r22, r14
    4340:	c8 01       	movw	r24, r16
    4342:	0e 94 62 41 	call	0x82c4	; 0x82c4 <cos>
    4346:	00 91 ea 22 	lds	r16, 0x22EA
    434a:	10 91 eb 22 	lds	r17, 0x22EB
    434e:	00 0f       	add	r16, r16
    4350:	11 1f       	adc	r17, r17
    4352:	00 0f       	add	r16, r16
    4354:	11 1f       	adc	r17, r17
    4356:	0f 51       	subi	r16, 0x1F	; 31
    4358:	1d 4d       	sbci	r17, 0xDD	; 221
    435a:	a5 01       	movw	r20, r10
    435c:	94 01       	movw	r18, r8
    435e:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    4362:	9b 01       	movw	r18, r22
    4364:	ac 01       	movw	r20, r24
    4366:	60 91 02 23 	lds	r22, 0x2302
    436a:	70 91 03 23 	lds	r23, 0x2303
    436e:	80 91 04 23 	lds	r24, 0x2304
    4372:	90 91 05 23 	lds	r25, 0x2305
    4376:	0e 94 bf 40 	call	0x817e	; 0x817e <__addsf3>
    437a:	f8 01       	movw	r30, r16
    437c:	65 87       	std	Z+13, r22	; 0x0d
    437e:	76 87       	std	Z+14, r23	; 0x0e
    4380:	87 87       	std	Z+15, r24	; 0x0f
    4382:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    4384:	00 91 ec 22 	lds	r16, 0x22EC
    4388:	10 91 ed 22 	lds	r17, 0x22ED
    438c:	00 0f       	add	r16, r16
    438e:	11 1f       	adc	r17, r17
    4390:	00 0f       	add	r16, r16
    4392:	11 1f       	adc	r17, r17
    4394:	0f 51       	subi	r16, 0x1F	; 31
    4396:	1d 4d       	sbci	r17, 0xDD	; 221
    4398:	d8 01       	movw	r26, r16
    439a:	1d 96       	adiw	r26, 0x0d	; 13
    439c:	6d 91       	ld	r22, X+
    439e:	7d 91       	ld	r23, X+
    43a0:	8d 91       	ld	r24, X+
    43a2:	9c 91       	ld	r25, X
    43a4:	50 97       	sbiw	r26, 0x10	; 16
    43a6:	20 91 16 23 	lds	r18, 0x2316
    43aa:	30 91 17 23 	lds	r19, 0x2317
    43ae:	40 91 18 23 	lds	r20, 0x2318
    43b2:	50 91 19 23 	lds	r21, 0x2319
    43b6:	0e 94 bf 40 	call	0x817e	; 0x817e <__addsf3>
    43ba:	f8 01       	movw	r30, r16
    43bc:	65 87       	std	Z+13, r22	; 0x0d
    43be:	76 87       	std	Z+14, r23	; 0x0e
    43c0:	87 87       	std	Z+15, r24	; 0x0f
    43c2:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    43c4:	60 91 ee 22 	lds	r22, 0x22EE
    43c8:	70 91 ef 22 	lds	r23, 0x22EF
    43cc:	80 91 f0 22 	lds	r24, 0x22F0
    43d0:	90 91 f1 22 	lds	r25, 0x22F1
    43d4:	20 91 f2 22 	lds	r18, 0x22F2
    43d8:	30 91 f3 22 	lds	r19, 0x22F3
    43dc:	40 91 f4 22 	lds	r20, 0x22F4
    43e0:	50 91 f5 22 	lds	r21, 0x22F5
    43e4:	e0 90 f6 22 	lds	r14, 0x22F6
    43e8:	f0 90 f7 22 	lds	r15, 0x22F7
    43ec:	00 91 f8 22 	lds	r16, 0x22F8
    43f0:	10 91 f9 22 	lds	r17, 0x22F9
    43f4:	a0 90 0e 23 	lds	r10, 0x230E
    43f8:	b0 90 0f 23 	lds	r11, 0x230F
    43fc:	c0 90 10 23 	lds	r12, 0x2310
    4400:	d0 90 11 23 	lds	r13, 0x2311
    4404:	80 90 e6 22 	lds	r8, 0x22E6
    4408:	90 90 e7 22 	lds	r9, 0x22E7
    440c:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    4410:	80 91 e4 22 	lds	r24, 0x22E4
    4414:	90 91 e5 22 	lds	r25, 0x22E5
    4418:	01 96       	adiw	r24, 0x01	; 1
    441a:	80 93 e4 22 	sts	0x22E4, r24
    441e:	90 93 e5 22 	sts	0x22E5, r25
    4422:	20 91 e4 22 	lds	r18, 0x22E4
    4426:	30 91 e5 22 	lds	r19, 0x22E5
    442a:	80 91 e2 22 	lds	r24, 0x22E2
    442e:	90 91 e3 22 	lds	r25, 0x22E3
    4432:	82 17       	cp	r24, r18
    4434:	93 07       	cpc	r25, r19
    4436:	0c f0       	brlt	.+2      	; 0x443a <mc_arc_blocking+0x4b4>
    4438:	35 cf       	rjmp	.-406    	; 0x42a4 <mc_arc_blocking+0x31e>
    443a:	20 e0       	ldi	r18, 0x00	; 0
    443c:	30 e0       	ldi	r19, 0x00	; 0
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    443e:	c9 01       	movw	r24, r18
    4440:	28 96       	adiw	r28, 0x08	; 8
    4442:	cd bf       	out	0x3d, r28	; 61
    4444:	de bf       	out	0x3e, r29	; 62
    4446:	cf 91       	pop	r28
    4448:	df 91       	pop	r29
    444a:	1f 91       	pop	r17
    444c:	0f 91       	pop	r16
    444e:	ff 90       	pop	r15
    4450:	ef 90       	pop	r14
    4452:	df 90       	pop	r13
    4454:	cf 90       	pop	r12
    4456:	bf 90       	pop	r11
    4458:	af 90       	pop	r10
    445a:	9f 90       	pop	r9
    445c:	8f 90       	pop	r8
    445e:	7f 90       	pop	r7
    4460:	6f 90       	pop	r6
    4462:	5f 90       	pop	r5
    4464:	4f 90       	pop	r4
    4466:	3f 90       	pop	r3
    4468:	2f 90       	pop	r2
    446a:	08 95       	ret

0000446c <mc_line_blocking>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line_blocking(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    446c:	2f 92       	push	r2
    446e:	3f 92       	push	r3
    4470:	4f 92       	push	r4
    4472:	5f 92       	push	r5
    4474:	6f 92       	push	r6
    4476:	7f 92       	push	r7
    4478:	8f 92       	push	r8
    447a:	9f 92       	push	r9
    447c:	af 92       	push	r10
    447e:	bf 92       	push	r11
    4480:	cf 92       	push	r12
    4482:	df 92       	push	r13
    4484:	ef 92       	push	r14
    4486:	ff 92       	push	r15
    4488:	0f 93       	push	r16
    448a:	1f 93       	push	r17
    448c:	df 93       	push	r29
    448e:	cf 93       	push	r28
    4490:	cd b7       	in	r28, 0x3d	; 61
    4492:	de b7       	in	r29, 0x3e	; 62
    4494:	6a 97       	sbiw	r28, 0x1a	; 26
    4496:	cd bf       	out	0x3d, r28	; 61
    4498:	de bf       	out	0x3e, r29	; 62
    449a:	19 01       	movw	r2, r18
    449c:	2a 01       	movw	r4, r20
    449e:	ad 8a       	std	Y+21, r10	; 0x15
    44a0:	be 8a       	std	Y+22, r11	; 0x16
    44a2:	cf 8a       	std	Y+23, r12	; 0x17
    44a4:	d8 8e       	std	Y+24, r13	; 0x18
    44a6:	89 8e       	std	Y+25, r8	; 0x19
    44a8:	9a 8e       	std	Y+26, r9	; 0x1a
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    44aa:	20 91 94 22 	lds	r18, 0x2294
    44ae:	30 91 95 22 	lds	r19, 0x2295
    44b2:	40 91 96 22 	lds	r20, 0x2296
    44b6:	50 91 97 22 	lds	r21, 0x2297
    44ba:	29 8b       	std	Y+17, r18	; 0x11
    44bc:	3a 8b       	std	Y+18, r19	; 0x12
    44be:	4b 8b       	std	Y+19, r20	; 0x13
    44c0:	5c 8b       	std	Y+20, r21	; 0x14
    44c2:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    44c6:	0e 94 f0 43 	call	0x87e0	; 0x87e0 <lround>
    44ca:	3b 01       	movw	r6, r22
    44cc:	4c 01       	movw	r8, r24
    44ce:	60 92 69 21 	sts	0x2169, r6
    44d2:	70 92 6a 21 	sts	0x216A, r7
    44d6:	80 92 6b 21 	sts	0x216B, r8
    44da:	90 92 6c 21 	sts	0x216C, r9
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    44de:	80 91 ac 22 	lds	r24, 0x22AC
    44e2:	90 91 ad 22 	lds	r25, 0x22AD
    44e6:	a0 91 ae 22 	lds	r26, 0x22AE
    44ea:	b0 91 af 22 	lds	r27, 0x22AF
    44ee:	8d 87       	std	Y+13, r24	; 0x0d
    44f0:	9e 87       	std	Y+14, r25	; 0x0e
    44f2:	af 87       	std	Y+15, r26	; 0x0f
    44f4:	b8 8b       	std	Y+16, r27	; 0x10
    44f6:	c2 01       	movw	r24, r4
    44f8:	b1 01       	movw	r22, r2
    44fa:	2d 85       	ldd	r18, Y+13	; 0x0d
    44fc:	3e 85       	ldd	r19, Y+14	; 0x0e
    44fe:	4f 85       	ldd	r20, Y+15	; 0x0f
    4500:	58 89       	ldd	r21, Y+16	; 0x10
    4502:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    4506:	0e 94 f0 43 	call	0x87e0	; 0x87e0 <lround>
    450a:	5b 01       	movw	r10, r22
    450c:	6c 01       	movw	r12, r24
    450e:	a0 92 6d 21 	sts	0x216D, r10
    4512:	b0 92 6e 21 	sts	0x216E, r11
    4516:	c0 92 6f 21 	sts	0x216F, r12
    451a:	d0 92 70 21 	sts	0x2170, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    451e:	20 91 c4 22 	lds	r18, 0x22C4
    4522:	30 91 c5 22 	lds	r19, 0x22C5
    4526:	40 91 c6 22 	lds	r20, 0x22C6
    452a:	50 91 c7 22 	lds	r21, 0x22C7
    452e:	29 87       	std	Y+9, r18	; 0x09
    4530:	3a 87       	std	Y+10, r19	; 0x0a
    4532:	4b 87       	std	Y+11, r20	; 0x0b
    4534:	5c 87       	std	Y+12, r21	; 0x0c
    4536:	c8 01       	movw	r24, r16
    4538:	b7 01       	movw	r22, r14
    453a:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    453e:	0e 94 f0 43 	call	0x87e0	; 0x87e0 <lround>
    4542:	9b 01       	movw	r18, r22
    4544:	ac 01       	movw	r20, r24
    4546:	20 93 71 21 	sts	0x2171, r18
    454a:	30 93 72 21 	sts	0x2172, r19
    454e:	40 93 73 21 	sts	0x2173, r20
    4552:	50 93 74 21 	sts	0x2174, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    4556:	80 91 5d 21 	lds	r24, 0x215D
    455a:	90 91 5e 21 	lds	r25, 0x215E
    455e:	a0 91 5f 21 	lds	r26, 0x215F
    4562:	b0 91 60 21 	lds	r27, 0x2160
    4566:	84 01       	movw	r16, r8
    4568:	73 01       	movw	r14, r6
    456a:	e8 1a       	sub	r14, r24
    456c:	f9 0a       	sbc	r15, r25
    456e:	0a 0b       	sbc	r16, r26
    4570:	1b 0b       	sbc	r17, r27
    4572:	ed 82       	std	Y+5, r14	; 0x05
    4574:	fe 82       	std	Y+6, r15	; 0x06
    4576:	0f 83       	std	Y+7, r16	; 0x07
    4578:	18 87       	std	Y+8, r17	; 0x08
    457a:	e0 92 75 21 	sts	0x2175, r14
    457e:	f0 92 76 21 	sts	0x2176, r15
    4582:	00 93 77 21 	sts	0x2177, r16
    4586:	10 93 78 21 	sts	0x2178, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    458a:	80 91 61 21 	lds	r24, 0x2161
    458e:	90 91 62 21 	lds	r25, 0x2162
    4592:	a0 91 63 21 	lds	r26, 0x2163
    4596:	b0 91 64 21 	lds	r27, 0x2164
    459a:	86 01       	movw	r16, r12
    459c:	75 01       	movw	r14, r10
    459e:	e8 1a       	sub	r14, r24
    45a0:	f9 0a       	sbc	r15, r25
    45a2:	0a 0b       	sbc	r16, r26
    45a4:	1b 0b       	sbc	r17, r27
    45a6:	e9 82       	std	Y+1, r14	; 0x01
    45a8:	fa 82       	std	Y+2, r15	; 0x02
    45aa:	0b 83       	std	Y+3, r16	; 0x03
    45ac:	1c 83       	std	Y+4, r17	; 0x04
    45ae:	e0 92 79 21 	sts	0x2179, r14
    45b2:	f0 92 7a 21 	sts	0x217A, r15
    45b6:	00 93 7b 21 	sts	0x217B, r16
    45ba:	10 93 7c 21 	sts	0x217C, r17
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    45be:	80 91 65 21 	lds	r24, 0x2165
    45c2:	90 91 66 21 	lds	r25, 0x2166
    45c6:	a0 91 67 21 	lds	r26, 0x2167
    45ca:	b0 91 68 21 	lds	r27, 0x2168
    45ce:	19 01       	movw	r2, r18
    45d0:	2a 01       	movw	r4, r20
    45d2:	28 1a       	sub	r2, r24
    45d4:	39 0a       	sbc	r3, r25
    45d6:	4a 0a       	sbc	r4, r26
    45d8:	5b 0a       	sbc	r5, r27
    45da:	20 92 7d 21 	sts	0x217D, r2
    45de:	30 92 7e 21 	sts	0x217E, r3
    45e2:	40 92 7f 21 	sts	0x217F, r4
    45e6:	50 92 80 21 	sts	0x2180, r5

	// skip zero length lines
	if ((mc.steps[X] + mc.steps[Y] + mc.steps[Z]) == 0) {
    45ea:	d8 01       	movw	r26, r16
    45ec:	c7 01       	movw	r24, r14
    45ee:	0d 81       	ldd	r16, Y+5	; 0x05
    45f0:	1e 81       	ldd	r17, Y+6	; 0x06
    45f2:	2f 81       	ldd	r18, Y+7	; 0x07
    45f4:	38 85       	ldd	r19, Y+8	; 0x08
    45f6:	80 0f       	add	r24, r16
    45f8:	91 1f       	adc	r25, r17
    45fa:	a2 1f       	adc	r26, r18
    45fc:	b3 1f       	adc	r27, r19
    45fe:	82 0d       	add	r24, r2
    4600:	93 1d       	adc	r25, r3
    4602:	a4 1d       	adc	r26, r4
    4604:	b5 1d       	adc	r27, r5
    4606:	00 97       	sbiw	r24, 0x00	; 0
    4608:	a1 05       	cpc	r26, r1
    460a:	b1 05       	cpc	r27, r1
    460c:	19 f4       	brne	.+6      	; 0x4614 <mc_line_blocking+0x1a8>
    460e:	24 e1       	ldi	r18, 0x14	; 20
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	86 c0       	rjmp	.+268    	; 0x4720 <mc_line_blocking+0x2b4>
		return (TG_ZERO_LENGTH_LINE);
	}

	if (invert_feed_rate) {
    4614:	29 8d       	ldd	r18, Y+25	; 0x19
    4616:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4618:	23 2b       	or	r18, r19
    461a:	59 f0       	breq	.+22     	; 0x4632 <mc_line_blocking+0x1c6>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    461c:	60 ec       	ldi	r22, 0xC0	; 192
    461e:	71 ee       	ldi	r23, 0xE1	; 225
    4620:	84 e6       	ldi	r24, 0x64	; 100
    4622:	9c e4       	ldi	r25, 0x4C	; 76
    4624:	2d 89       	ldd	r18, Y+21	; 0x15
    4626:	3e 89       	ldd	r19, Y+22	; 0x16
    4628:	4f 89       	ldd	r20, Y+23	; 0x17
    462a:	58 8d       	ldd	r21, Y+24	; 0x18
    462c:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    4630:	4e c0       	rjmp	.+156    	; 0x46ce <mc_line_blocking+0x262>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    4632:	6d 81       	ldd	r22, Y+5	; 0x05
    4634:	7e 81       	ldd	r23, Y+6	; 0x06
    4636:	8f 81       	ldd	r24, Y+7	; 0x07
    4638:	98 85       	ldd	r25, Y+8	; 0x08
    463a:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    463e:	29 89       	ldd	r18, Y+17	; 0x11
    4640:	3a 89       	ldd	r19, Y+18	; 0x12
    4642:	4b 89       	ldd	r20, Y+19	; 0x13
    4644:	5c 89       	ldd	r21, Y+20	; 0x14
    4646:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    464a:	0e 94 cb 44 	call	0x8996	; 0x8996 <square>
    464e:	3b 01       	movw	r6, r22
    4650:	4c 01       	movw	r8, r24
    4652:	69 81       	ldd	r22, Y+1	; 0x01
    4654:	7a 81       	ldd	r23, Y+2	; 0x02
    4656:	8b 81       	ldd	r24, Y+3	; 0x03
    4658:	9c 81       	ldd	r25, Y+4	; 0x04
    465a:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    465e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4660:	3e 85       	ldd	r19, Y+14	; 0x0e
    4662:	4f 85       	ldd	r20, Y+15	; 0x0f
    4664:	58 89       	ldd	r21, Y+16	; 0x10
    4666:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    466a:	0e 94 cb 44 	call	0x8996	; 0x8996 <square>
    466e:	5b 01       	movw	r10, r22
    4670:	6c 01       	movw	r12, r24
    4672:	c2 01       	movw	r24, r4
    4674:	b1 01       	movw	r22, r2
    4676:	0e 94 00 42 	call	0x8400	; 0x8400 <__floatsisf>
    467a:	29 85       	ldd	r18, Y+9	; 0x09
    467c:	3a 85       	ldd	r19, Y+10	; 0x0a
    467e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4680:	5c 85       	ldd	r21, Y+12	; 0x0c
    4682:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    4686:	0e 94 cb 44 	call	0x8996	; 0x8996 <square>
    468a:	7b 01       	movw	r14, r22
    468c:	8c 01       	movw	r16, r24
    468e:	c4 01       	movw	r24, r8
    4690:	b3 01       	movw	r22, r6
    4692:	a6 01       	movw	r20, r12
    4694:	95 01       	movw	r18, r10
    4696:	0e 94 bf 40 	call	0x817e	; 0x817e <__addsf3>
    469a:	a8 01       	movw	r20, r16
    469c:	97 01       	movw	r18, r14
    469e:	0e 94 bf 40 	call	0x817e	; 0x817e <__addsf3>
    46a2:	0e 94 8d 44 	call	0x891a	; 0x891a <sqrt>
    46a6:	60 93 85 21 	sts	0x2185, r22
    46aa:	70 93 86 21 	sts	0x2186, r23
    46ae:	80 93 87 21 	sts	0x2187, r24
    46b2:	90 93 88 21 	sts	0x2188, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    46b6:	2d 89       	ldd	r18, Y+21	; 0x15
    46b8:	3e 89       	ldd	r19, Y+22	; 0x16
    46ba:	4f 89       	ldd	r20, Y+23	; 0x17
    46bc:	58 8d       	ldd	r21, Y+24	; 0x18
    46be:	0e 94 65 41 	call	0x82ca	; 0x82ca <__divsf3>
    46c2:	20 e0       	ldi	r18, 0x00	; 0
    46c4:	34 e2       	ldi	r19, 0x24	; 36
    46c6:	44 e7       	ldi	r20, 0x74	; 116
    46c8:	59 e4       	ldi	r21, 0x49	; 73
    46ca:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    46ce:	0e 94 f0 43 	call	0x87e0	; 0x87e0 <lround>
    46d2:	60 93 81 21 	sts	0x2181, r22
    46d6:	70 93 82 21 	sts	0x2182, r23
    46da:	80 93 83 21 	sts	0x2183, r24
    46de:	90 93 84 21 	sts	0x2184, r25
	}
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    46e2:	a0 90 81 21 	lds	r10, 0x2181
    46e6:	b0 90 82 21 	lds	r11, 0x2182
    46ea:	c0 90 83 21 	lds	r12, 0x2183
    46ee:	d0 90 84 21 	lds	r13, 0x2184
    46f2:	6d 81       	ldd	r22, Y+5	; 0x05
    46f4:	7e 81       	ldd	r23, Y+6	; 0x06
    46f6:	8f 81       	ldd	r24, Y+7	; 0x07
    46f8:	98 85       	ldd	r25, Y+8	; 0x08
    46fa:	29 81       	ldd	r18, Y+1	; 0x01
    46fc:	3a 81       	ldd	r19, Y+2	; 0x02
    46fe:	4b 81       	ldd	r20, Y+3	; 0x03
    4700:	5c 81       	ldd	r21, Y+4	; 0x04
    4702:	82 01       	movw	r16, r4
    4704:	71 01       	movw	r14, r2
    4706:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    470a:	ed e5       	ldi	r30, 0x5D	; 93
    470c:	f1 e2       	ldi	r31, 0x21	; 33
    470e:	df 01       	movw	r26, r30
    4710:	1c 96       	adiw	r26, 0x0c	; 12
    4712:	8c e0       	ldi	r24, 0x0C	; 12
    4714:	0d 90       	ld	r0, X+
    4716:	01 92       	st	Z+, r0
    4718:	81 50       	subi	r24, 0x01	; 1
    471a:	e1 f7       	brne	.-8      	; 0x4714 <mc_line_blocking+0x2a8>
    471c:	20 e0       	ldi	r18, 0x00	; 0
    471e:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    4720:	c9 01       	movw	r24, r18
    4722:	6a 96       	adiw	r28, 0x1a	; 26
    4724:	cd bf       	out	0x3d, r28	; 61
    4726:	de bf       	out	0x3e, r29	; 62
    4728:	cf 91       	pop	r28
    472a:	df 91       	pop	r29
    472c:	1f 91       	pop	r17
    472e:	0f 91       	pop	r16
    4730:	ff 90       	pop	r15
    4732:	ef 90       	pop	r14
    4734:	df 90       	pop	r13
    4736:	cf 90       	pop	r12
    4738:	bf 90       	pop	r11
    473a:	af 90       	pop	r10
    473c:	9f 90       	pop	r9
    473e:	8f 90       	pop	r8
    4740:	7f 90       	pop	r7
    4742:	6f 90       	pop	r6
    4744:	5f 90       	pop	r5
    4746:	4f 90       	pop	r4
    4748:	3f 90       	pop	r3
    474a:	2f 90       	pop	r2
    474c:	08 95       	ret

0000474e <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    474e:	e0 e6       	ldi	r30, 0x60	; 96
    4750:	f6 e0       	ldi	r31, 0x06	; 6
    4752:	80 e4       	ldi	r24, 0x40	; 64
    4754:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    4756:	80 e8       	ldi	r24, 0x80	; 128
    4758:	81 83       	std	Z+1, r24	; 0x01
}
    475a:	08 95       	ret

0000475c <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    475c:	97 fd       	sbrc	r25, 7
    475e:	05 c0       	rjmp	.+10     	; 0x476a <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    4760:	80 e8       	ldi	r24, 0x80	; 128
    4762:	e0 e6       	ldi	r30, 0x60	; 96
    4764:	f6 e0       	ldi	r31, 0x06	; 6
    4766:	85 83       	std	Z+5, r24	; 0x05
    4768:	04 c0       	rjmp	.+8      	; 0x4772 <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    476a:	80 e8       	ldi	r24, 0x80	; 128
    476c:	e0 e6       	ldi	r30, 0x60	; 96
    476e:	f6 e0       	ldi	r31, 0x06	; 6
    4770:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    4772:	80 e4       	ldi	r24, 0x40	; 64
    4774:	e0 e6       	ldi	r30, 0x60	; 96
    4776:	f6 e0       	ldi	r31, 0x06	; 6
    4778:	85 83       	std	Z+5, r24	; 0x05
}
    477a:	08 95       	ret

0000477c <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    477c:	80 e4       	ldi	r24, 0x40	; 64
    477e:	e0 e6       	ldi	r30, 0x60	; 96
    4780:	f6 e0       	ldi	r31, 0x06	; 6
    4782:	86 83       	std	Z+6, r24	; 0x06
}
    4784:	08 95       	ret

00004786 <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    4786:	cf 93       	push	r28
    4788:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    478a:	10 92 30 22 	sts	0x2230, r1
	ax.exec_mutex = FALSE;
    478e:	10 92 2f 22 	sts	0x222F, r1

	ax.a[X].port = &X_MOTOR_PORT;				// bind PORTs to structs
    4792:	80 e0       	ldi	r24, 0x00	; 0
    4794:	96 e0       	ldi	r25, 0x06	; 6
    4796:	80 93 3f 22 	sts	0x223F, r24
    479a:	90 93 40 22 	sts	0x2240, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    479e:	80 ea       	ldi	r24, 0xA0	; 160
    47a0:	96 e0       	ldi	r25, 0x06	; 6
    47a2:	80 93 4f 22 	sts	0x224F, r24
    47a6:	90 93 50 22 	sts	0x2250, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    47aa:	80 e8       	ldi	r24, 0x80	; 128
    47ac:	96 e0       	ldi	r25, 0x06	; 6
    47ae:	80 93 5f 22 	sts	0x225F, r24
    47b2:	90 93 60 22 	sts	0x2260, r25
	ax.a[A].port = &A_MOTOR_PORT;
    47b6:	80 e6       	ldi	r24, 0x60	; 96
    47b8:	96 e0       	ldi	r25, 0x06	; 6
    47ba:	80 93 6f 22 	sts	0x226F, r24
    47be:	90 93 70 22 	sts	0x2270, r25

	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
    47c2:	80 e0       	ldi	r24, 0x00	; 0
    47c4:	98 e0       	ldi	r25, 0x08	; 8
    47c6:	80 93 41 22 	sts	0x2241, r24
    47ca:	90 93 42 22 	sts	0x2242, r25
	ax.a[Y].timer = &Y_TIMER;
    47ce:	80 e0       	ldi	r24, 0x00	; 0
    47d0:	99 e0       	ldi	r25, 0x09	; 9
    47d2:	80 93 51 22 	sts	0x2251, r24
    47d6:	90 93 52 22 	sts	0x2252, r25
	ax.a[Z].timer = &Z_TIMER;
    47da:	80 e0       	ldi	r24, 0x00	; 0
    47dc:	9a e0       	ldi	r25, 0x0A	; 10
    47de:	80 93 61 22 	sts	0x2261, r24
    47e2:	90 93 62 22 	sts	0x2262, r25
	ax.a[A].timer = &A_TIMER;
    47e6:	80 e0       	ldi	r24, 0x00	; 0
    47e8:	9b e0       	ldi	r25, 0x0B	; 11
    47ea:	80 93 71 22 	sts	0x2271, r24
    47ee:	90 93 72 22 	sts	0x2272, r25
    47f2:	c3 e8       	ldi	r28, 0x83	; 131
    47f4:	d2 e2       	ldi	r29, 0x22	; 34
    47f6:	ad e3       	ldi	r26, 0x3D	; 61
    47f8:	b2 e2       	ldi	r27, 0x22	; 34

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    47fa:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    47fc:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    47fe:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    4800:	88 81       	ld	r24, Y
    4802:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    4804:	12 96       	adiw	r26, 0x02	; 2
    4806:	ed 91       	ld	r30, X+
    4808:	fc 91       	ld	r31, X
    480a:	13 97       	sbiw	r26, 0x03	; 3
    480c:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    480e:	12 96       	adiw	r26, 0x02	; 2
    4810:	ed 91       	ld	r30, X+
    4812:	fc 91       	ld	r31, X
    4814:	13 97       	sbiw	r26, 0x03	; 3
    4816:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
    4818:	12 96       	adiw	r26, 0x02	; 2
    481a:	ed 91       	ld	r30, X+
    481c:	fc 91       	ld	r31, X
    481e:	13 97       	sbiw	r26, 0x03	; 3
    4820:	84 81       	ldd	r24, Z+4	; 0x04
    4822:	88 61       	ori	r24, 0x18	; 24
    4824:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4826:	12 96       	adiw	r26, 0x02	; 2
    4828:	ed 91       	ld	r30, X+
    482a:	fc 91       	ld	r31, X
    482c:	13 97       	sbiw	r26, 0x03	; 3
    482e:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    4830:	14 96       	adiw	r26, 0x04	; 4
    4832:	ed 91       	ld	r30, X+
    4834:	fc 91       	ld	r31, X
    4836:	15 97       	sbiw	r26, 0x05	; 5
    4838:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    483a:	14 96       	adiw	r26, 0x04	; 4
    483c:	ed 91       	ld	r30, X+
    483e:	fc 91       	ld	r31, X
    4840:	15 97       	sbiw	r26, 0x05	; 5
    4842:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    4844:	14 96       	adiw	r26, 0x04	; 4
    4846:	ed 91       	ld	r30, X+
    4848:	fc 91       	ld	r31, X
    484a:	15 97       	sbiw	r26, 0x05	; 5
    484c:	96 83       	std	Z+6, r25	; 0x06
    484e:	68 96       	adiw	r28, 0x18	; 24
    4850:	50 96       	adiw	r26, 0x10	; 16
	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    4852:	82 e2       	ldi	r24, 0x22	; 34
    4854:	c3 3e       	cpi	r28, 0xE3	; 227
    4856:	d8 07       	cpc	r29, r24
    4858:	99 f6       	brne	.-90     	; 0x4800 <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    485a:	df 91       	pop	r29
    485c:	cf 91       	pop	r28
    485e:	08 95       	ret

00004860 <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    4860:	e8 2f       	mov	r30, r24
    4862:	f0 e0       	ldi	r31, 0x00	; 0
    4864:	84 e0       	ldi	r24, 0x04	; 4
    4866:	ee 0f       	add	r30, r30
    4868:	ff 1f       	adc	r31, r31
    486a:	8a 95       	dec	r24
    486c:	e1 f7       	brne	.-8      	; 0x4866 <st_set_polarity+0x6>
    486e:	e1 5d       	subi	r30, 0xD1	; 209
    4870:	fd 4d       	sbci	r31, 0xDD	; 221
    4872:	66 87       	std	Z+14, r22	; 0x0e
}
    4874:	08 95       	ret

00004876 <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X].step_counter = 0x00001000;
    4876:	23 e3       	ldi	r18, 0x33	; 51
    4878:	32 e2       	ldi	r19, 0x22	; 34
    487a:	80 e0       	ldi	r24, 0x00	; 0
    487c:	90 e1       	ldi	r25, 0x10	; 16
    487e:	a0 e0       	ldi	r26, 0x00	; 0
    4880:	b0 e0       	ldi	r27, 0x00	; 0
    4882:	80 93 33 22 	sts	0x2233, r24
    4886:	90 93 34 22 	sts	0x2234, r25
    488a:	a0 93 35 22 	sts	0x2235, r26
    488e:	b0 93 36 22 	sts	0x2236, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    4892:	e0 91 41 22 	lds	r30, 0x2241
    4896:	f0 91 42 22 	lds	r31, 0x2242
    489a:	80 e0       	ldi	r24, 0x00	; 0
    489c:	90 e1       	ldi	r25, 0x10	; 16
    489e:	86 a3       	std	Z+38, r24	; 0x26
    48a0:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    48a2:	41 e0       	ldi	r20, 0x01	; 1
    48a4:	40 83       	st	Z, r20

	ax.a[Y].step_counter = 0x00000800;
    48a6:	80 e0       	ldi	r24, 0x00	; 0
    48a8:	98 e0       	ldi	r25, 0x08	; 8
    48aa:	a0 e0       	ldi	r26, 0x00	; 0
    48ac:	b0 e0       	ldi	r27, 0x00	; 0
    48ae:	80 93 43 22 	sts	0x2243, r24
    48b2:	90 93 44 22 	sts	0x2244, r25
    48b6:	a0 93 45 22 	sts	0x2245, r26
    48ba:	b0 93 46 22 	sts	0x2246, r27
	ax.a[Y].timer->PER = 0x2000;
    48be:	e0 91 51 22 	lds	r30, 0x2251
    48c2:	f0 91 52 22 	lds	r31, 0x2252
    48c6:	80 e0       	ldi	r24, 0x00	; 0
    48c8:	90 e2       	ldi	r25, 0x20	; 32
    48ca:	86 a3       	std	Z+38, r24	; 0x26
    48cc:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    48ce:	40 83       	st	Z, r20

	ax.a[Z].step_counter = 0x00000600;
    48d0:	80 e0       	ldi	r24, 0x00	; 0
    48d2:	96 e0       	ldi	r25, 0x06	; 6
    48d4:	a0 e0       	ldi	r26, 0x00	; 0
    48d6:	b0 e0       	ldi	r27, 0x00	; 0
    48d8:	80 93 53 22 	sts	0x2253, r24
    48dc:	90 93 54 22 	sts	0x2254, r25
    48e0:	a0 93 55 22 	sts	0x2255, r26
    48e4:	b0 93 56 22 	sts	0x2256, r27
	ax.a[Z].timer->PER = 0x3000;
    48e8:	e0 91 61 22 	lds	r30, 0x2261
    48ec:	f0 91 62 22 	lds	r31, 0x2262
    48f0:	80 e0       	ldi	r24, 0x00	; 0
    48f2:	90 e3       	ldi	r25, 0x30	; 48
    48f4:	86 a3       	std	Z+38, r24	; 0x26
    48f6:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    48f8:	40 83       	st	Z, r20

	ax.a[A].step_counter = 0x00000400;
    48fa:	80 e0       	ldi	r24, 0x00	; 0
    48fc:	94 e0       	ldi	r25, 0x04	; 4
    48fe:	a0 e0       	ldi	r26, 0x00	; 0
    4900:	b0 e0       	ldi	r27, 0x00	; 0
    4902:	80 93 63 22 	sts	0x2263, r24
    4906:	90 93 64 22 	sts	0x2264, r25
    490a:	a0 93 65 22 	sts	0x2265, r26
    490e:	b0 93 66 22 	sts	0x2266, r27
	ax.a[A].timer->PER = 0x4000;
    4912:	d9 01       	movw	r26, r18
    4914:	de 96       	adiw	r26, 0x3e	; 62
    4916:	ed 91       	ld	r30, X+
    4918:	fc 91       	ld	r31, X
    491a:	df 97       	sbiw	r26, 0x3f	; 63
    491c:	80 e0       	ldi	r24, 0x00	; 0
    491e:	90 e4       	ldi	r25, 0x40	; 64
    4920:	86 a3       	std	Z+38, r24	; 0x26
    4922:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    4924:	40 83       	st	Z, r20

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    4926:	23 50       	subi	r18, 0x03	; 3
    4928:	30 40       	sbci	r19, 0x00	; 0
    492a:	f9 01       	movw	r30, r18
    492c:	80 81       	ld	r24, Z
    492e:	8f 60       	ori	r24, 0x0F	; 15
    4930:	80 83       	st	Z, r24
}
    4932:	08 95       	ret

00004934 <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    4934:	f8 94       	cli
	mv_flush();									// flush the move buffer
    4936:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <mv_flush>
	sei();
    493a:	78 94       	sei
}
    493c:	08 95       	ret

0000493e <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    493e:	f8 94       	cli
	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    4940:	e0 91 41 22 	lds	r30, 0x2241
    4944:	f0 91 42 22 	lds	r31, 0x2242
    4948:	10 82       	st	Z, r1
    494a:	e0 91 51 22 	lds	r30, 0x2251
    494e:	f0 91 52 22 	lds	r31, 0x2252
    4952:	10 82       	st	Z, r1
    4954:	e0 91 61 22 	lds	r30, 0x2261
    4958:	f0 91 62 22 	lds	r31, 0x2262
    495c:	10 82       	st	Z, r1
    495e:	e0 91 71 22 	lds	r30, 0x2271
    4962:	f0 91 72 22 	lds	r31, 0x2272
    4966:	10 82       	st	Z, r1
	}	
	mv_flush();									// flush the move buffer
    4968:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    496c:	10 92 30 22 	sts	0x2230, r1
	sei();
    4970:	78 94       	sei
}
    4972:	08 95       	ret

00004974 <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    4974:	cf 92       	push	r12
    4976:	df 92       	push	r13
    4978:	ef 92       	push	r14
    497a:	ff 92       	push	r15
    497c:	0f 93       	push	r16
    497e:	1f 93       	push	r17
    4980:	cf 93       	push	r28
    4982:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    4984:	80 91 2f 22 	lds	r24, 0x222F
    4988:	88 23       	and	r24, r24
    498a:	09 f0       	breq	.+2      	; 0x498e <st_execute_move+0x1a>
    498c:	32 c1       	rjmp	.+612    	; 0x4bf2 <st_execute_move+0x27e>
		return;
	}
	ax.exec_mutex = TRUE;
    498e:	81 e0       	ldi	r24, 0x01	; 1
    4990:	80 93 2f 22 	sts	0x222F, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    4994:	80 91 30 22 	lds	r24, 0x2230
    4998:	88 23       	and	r24, r24
    499a:	09 f0       	breq	.+2      	; 0x499e <st_execute_move+0x2a>
    499c:	28 c1       	rjmp	.+592    	; 0x4bee <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    499e:	0e 94 30 2c 	call	0x5860	; 0x5860 <mv_dequeue_move_buffer>
    49a2:	80 93 31 22 	sts	0x2231, r24
    49a6:	90 93 32 22 	sts	0x2232, r25
    49aa:	89 2b       	or	r24, r25
    49ac:	09 f4       	brne	.+2      	; 0x49b0 <st_execute_move+0x3c>
    49ae:	1f c1       	rjmp	.+574    	; 0x4bee <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;
		return;
    49b0:	63 e3       	ldi	r22, 0x33	; 51
    49b2:	72 e2       	ldi	r23, 0x22	; 34
    49b4:	00 e0       	ldi	r16, 0x00	; 0
    49b6:	10 e0       	ldi	r17, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    49b8:	94 e0       	ldi	r25, 0x04	; 4
    49ba:	c9 2e       	mov	r12, r25
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    49bc:	82 e0       	ldi	r24, 0x02	; 2
    49be:	d8 2e       	mov	r13, r24
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
		ax.exec_mutex = FALSE;
		return;
    49c0:	f0 2e       	mov	r15, r16
    49c2:	e1 2e       	mov	r14, r17
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    49c4:	db 01       	movw	r26, r22
    49c6:	1e 96       	adiw	r26, 0x0e	; 14
    49c8:	ed 91       	ld	r30, X+
    49ca:	fc 91       	ld	r31, X
    49cc:	1f 97       	sbiw	r26, 0x0f	; 15
    49ce:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    49d0:	c0 91 31 22 	lds	r28, 0x2231
    49d4:	d0 91 32 22 	lds	r29, 0x2232
    49d8:	c8 01       	movw	r24, r16
    49da:	fc 01       	movw	r30, r24
    49dc:	b3 e0       	ldi	r27, 0x03	; 3
    49de:	ee 0f       	add	r30, r30
    49e0:	ff 1f       	adc	r31, r31
    49e2:	ba 95       	dec	r27
    49e4:	e1 f7       	brne	.-8      	; 0x49de <st_execute_move+0x6a>
    49e6:	88 0f       	add	r24, r24
    49e8:	99 1f       	adc	r25, r25
    49ea:	e8 0f       	add	r30, r24
    49ec:	f9 1f       	adc	r31, r25
    49ee:	ec 0f       	add	r30, r28
    49f0:	fd 1f       	adc	r31, r29
    49f2:	80 81       	ld	r24, Z
    49f4:	91 81       	ldd	r25, Z+1	; 0x01
    49f6:	a2 81       	ldd	r26, Z+2	; 0x02
    49f8:	b3 81       	ldd	r27, Z+3	; 0x03
    49fa:	00 97       	sbiw	r24, 0x00	; 0
    49fc:	a1 05       	cpc	r26, r1
    49fe:	b1 05       	cpc	r27, r1
    4a00:	09 f4       	brne	.+2      	; 0x4a04 <st_execute_move+0x90>
    4a02:	a6 c0       	rjmp	.+332    	; 0x4b50 <st_execute_move+0x1dc>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    4a04:	c8 01       	movw	r24, r16
    4a06:	9c 01       	movw	r18, r24
    4a08:	f3 e0       	ldi	r31, 0x03	; 3
    4a0a:	22 0f       	add	r18, r18
    4a0c:	33 1f       	adc	r19, r19
    4a0e:	fa 95       	dec	r31
    4a10:	e1 f7       	brne	.-8      	; 0x4a0a <st_execute_move+0x96>
    4a12:	88 0f       	add	r24, r24
    4a14:	99 1f       	adc	r25, r25
    4a16:	28 0f       	add	r18, r24
    4a18:	39 1f       	adc	r19, r25
    4a1a:	c2 0f       	add	r28, r18
    4a1c:	d3 1f       	adc	r29, r19
    4a1e:	89 85       	ldd	r24, Y+9	; 0x09
    4a20:	fb 01       	movw	r30, r22
    4a22:	83 87       	std	Z+11, r24	; 0x0b

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4a24:	e0 91 31 22 	lds	r30, 0x2231
    4a28:	f0 91 32 22 	lds	r31, 0x2232
    4a2c:	c8 01       	movw	r24, r16
    4a2e:	9c 01       	movw	r18, r24
    4a30:	53 e0       	ldi	r21, 0x03	; 3
    4a32:	22 0f       	add	r18, r18
    4a34:	33 1f       	adc	r19, r19
    4a36:	5a 95       	dec	r21
    4a38:	e1 f7       	brne	.-8      	; 0x4a32 <st_execute_move+0xbe>
    4a3a:	88 0f       	add	r24, r24
    4a3c:	99 1f       	adc	r25, r25
    4a3e:	28 0f       	add	r18, r24
    4a40:	39 1f       	adc	r19, r25
    4a42:	e2 0f       	add	r30, r18
    4a44:	f3 1f       	adc	r31, r19
    4a46:	90 85       	ldd	r25, Z+8	; 0x08
    4a48:	db 01       	movw	r26, r22
    4a4a:	1a 96       	adiw	r26, 0x0a	; 10
    4a4c:	8c 91       	ld	r24, X
    4a4e:	1a 97       	sbiw	r26, 0x0a	; 10
    4a50:	1c 96       	adiw	r26, 0x0c	; 12
    4a52:	ed 91       	ld	r30, X+
    4a54:	fc 91       	ld	r31, X
    4a56:	1d 97       	sbiw	r26, 0x0d	; 13
    4a58:	98 17       	cp	r25, r24
    4a5a:	11 f0       	breq	.+4      	; 0x4a60 <st_execute_move+0xec>
    4a5c:	d5 82       	std	Z+5, r13	; 0x05
    4a5e:	01 c0       	rjmp	.+2      	; 0x4a62 <st_execute_move+0xee>
    4a60:	d6 82       	std	Z+6, r13	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    4a62:	40 91 31 22 	lds	r20, 0x2231
    4a66:	50 91 32 22 	lds	r21, 0x2232
    4a6a:	8f 2d       	mov	r24, r15
    4a6c:	9e 2d       	mov	r25, r14
    4a6e:	fc 01       	movw	r30, r24
    4a70:	33 e0       	ldi	r19, 0x03	; 3
    4a72:	ee 0f       	add	r30, r30
    4a74:	ff 1f       	adc	r31, r31
    4a76:	3a 95       	dec	r19
    4a78:	e1 f7       	brne	.-8      	; 0x4a72 <st_execute_move+0xfe>
    4a7a:	88 0f       	add	r24, r24
    4a7c:	99 1f       	adc	r25, r25
    4a7e:	e8 0f       	add	r30, r24
    4a80:	f9 1f       	adc	r31, r25
    4a82:	e4 0f       	add	r30, r20
    4a84:	f5 1f       	adc	r31, r21
    4a86:	80 81       	ld	r24, Z
    4a88:	91 81       	ldd	r25, Z+1	; 0x01
    4a8a:	a2 81       	ldd	r26, Z+2	; 0x02
    4a8c:	b3 81       	ldd	r27, Z+3	; 0x03
    4a8e:	fb 01       	movw	r30, r22
    4a90:	80 83       	st	Z, r24
    4a92:	91 83       	std	Z+1, r25	; 0x01
    4a94:	a2 83       	std	Z+2, r26	; 0x02
    4a96:	b3 83       	std	Z+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    4a98:	8f 2d       	mov	r24, r15
    4a9a:	9e 2d       	mov	r25, r14
    4a9c:	fc 01       	movw	r30, r24
    4a9e:	b3 e0       	ldi	r27, 0x03	; 3
    4aa0:	ee 0f       	add	r30, r30
    4aa2:	ff 1f       	adc	r31, r31
    4aa4:	ba 95       	dec	r27
    4aa6:	e1 f7       	brne	.-8      	; 0x4aa0 <st_execute_move+0x12c>
    4aa8:	88 0f       	add	r24, r24
    4aaa:	99 1f       	adc	r25, r25
    4aac:	e8 0f       	add	r30, r24
    4aae:	f9 1f       	adc	r31, r25
    4ab0:	e4 0f       	add	r30, r20
    4ab2:	f5 1f       	adc	r31, r21
    4ab4:	86 81       	ldd	r24, Z+6	; 0x06
    4ab6:	97 81       	ldd	r25, Z+7	; 0x07
    4ab8:	db 01       	movw	r26, r22
    4aba:	16 96       	adiw	r26, 0x06	; 6
    4abc:	8d 93       	st	X+, r24
    4abe:	9c 93       	st	X, r25
    4ac0:	17 97       	sbiw	r26, 0x07	; 7
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    4ac2:	8f 2d       	mov	r24, r15
    4ac4:	9e 2d       	mov	r25, r14
    4ac6:	fc 01       	movw	r30, r24
    4ac8:	33 e0       	ldi	r19, 0x03	; 3
    4aca:	ee 0f       	add	r30, r30
    4acc:	ff 1f       	adc	r31, r31
    4ace:	3a 95       	dec	r19
    4ad0:	e1 f7       	brne	.-8      	; 0x4aca <st_execute_move+0x156>
    4ad2:	88 0f       	add	r24, r24
    4ad4:	99 1f       	adc	r25, r25
    4ad6:	e8 0f       	add	r30, r24
    4ad8:	f9 1f       	adc	r31, r25
    4ada:	e4 0f       	add	r30, r20
    4adc:	f5 1f       	adc	r31, r21
    4ade:	86 81       	ldd	r24, Z+6	; 0x06
    4ae0:	97 81       	ldd	r25, Z+7	; 0x07
    4ae2:	18 96       	adiw	r26, 0x08	; 8
    4ae4:	8d 93       	st	X+, r24
    4ae6:	9c 93       	st	X, r25
    4ae8:	19 97       	sbiw	r26, 0x09	; 9
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    4aea:	8f 2d       	mov	r24, r15
    4aec:	9e 2d       	mov	r25, r14
    4aee:	fc 01       	movw	r30, r24
    4af0:	33 e0       	ldi	r19, 0x03	; 3
    4af2:	ee 0f       	add	r30, r30
    4af4:	ff 1f       	adc	r31, r31
    4af6:	3a 95       	dec	r19
    4af8:	e1 f7       	brne	.-8      	; 0x4af2 <st_execute_move+0x17e>
    4afa:	88 0f       	add	r24, r24
    4afc:	99 1f       	adc	r25, r25
    4afe:	e8 0f       	add	r30, r24
    4b00:	f9 1f       	adc	r31, r25
    4b02:	e4 0f       	add	r30, r20
    4b04:	f5 1f       	adc	r31, r21
    4b06:	84 81       	ldd	r24, Z+4	; 0x04
    4b08:	95 81       	ldd	r25, Z+5	; 0x05
    4b0a:	14 96       	adiw	r26, 0x04	; 4
    4b0c:	8d 93       	st	X+, r24
    4b0e:	9c 93       	st	X, r25
    4b10:	15 97       	sbiw	r26, 0x05	; 5
		ax.a[i].timer->PER = ax.p->a[i].period;
    4b12:	1e 96       	adiw	r26, 0x0e	; 14
    4b14:	ed 91       	ld	r30, X+
    4b16:	fc 91       	ld	r31, X
    4b18:	1f 97       	sbiw	r26, 0x0f	; 15
    4b1a:	8f 2d       	mov	r24, r15
    4b1c:	9e 2d       	mov	r25, r14
    4b1e:	9c 01       	movw	r18, r24
    4b20:	b3 e0       	ldi	r27, 0x03	; 3
    4b22:	22 0f       	add	r18, r18
    4b24:	33 1f       	adc	r19, r19
    4b26:	ba 95       	dec	r27
    4b28:	e1 f7       	brne	.-8      	; 0x4b22 <st_execute_move+0x1ae>
    4b2a:	88 0f       	add	r24, r24
    4b2c:	99 1f       	adc	r25, r25
    4b2e:	28 0f       	add	r18, r24
    4b30:	39 1f       	adc	r19, r25
    4b32:	42 0f       	add	r20, r18
    4b34:	53 1f       	adc	r21, r19
    4b36:	da 01       	movw	r26, r20
    4b38:	14 96       	adiw	r26, 0x04	; 4
    4b3a:	8d 91       	ld	r24, X+
    4b3c:	9c 91       	ld	r25, X
    4b3e:	15 97       	sbiw	r26, 0x05	; 5
    4b40:	86 a3       	std	Z+38, r24	; 0x26
    4b42:	97 a3       	std	Z+39, r25	; 0x27
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4b44:	db 01       	movw	r26, r22
    4b46:	1c 96       	adiw	r26, 0x0c	; 12
    4b48:	ed 91       	ld	r30, X+
    4b4a:	fc 91       	ld	r31, X
    4b4c:	1d 97       	sbiw	r26, 0x0d	; 13
    4b4e:	c6 82       	std	Z+6, r12	; 0x06
    4b50:	0f 5f       	subi	r16, 0xFF	; 255
    4b52:	1f 4f       	sbci	r17, 0xFF	; 255
    4b54:	60 5f       	subi	r22, 0xF0	; 240
    4b56:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    4b58:	03 30       	cpi	r16, 0x03	; 3
    4b5a:	11 05       	cpc	r17, r1
    4b5c:	09 f0       	breq	.+2      	; 0x4b60 <st_execute_move+0x1ec>
    4b5e:	30 cf       	rjmp	.-416    	; 0x49c0 <st_execute_move+0x4c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4b60:	10 92 30 22 	sts	0x2230, r1
	if (ax.a[X].step_counter) { 
    4b64:	80 91 33 22 	lds	r24, 0x2233
    4b68:	90 91 34 22 	lds	r25, 0x2234
    4b6c:	a0 91 35 22 	lds	r26, 0x2235
    4b70:	b0 91 36 22 	lds	r27, 0x2236
    4b74:	00 97       	sbiw	r24, 0x00	; 0
    4b76:	a1 05       	cpc	r26, r1
    4b78:	b1 05       	cpc	r27, r1
    4b7a:	59 f0       	breq	.+22     	; 0x4b92 <st_execute_move+0x21e>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    4b7c:	e0 91 41 22 	lds	r30, 0x2241
    4b80:	f0 91 42 22 	lds	r31, 0x2242
    4b84:	81 e0       	ldi	r24, 0x01	; 1
    4b86:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4b88:	80 91 30 22 	lds	r24, 0x2230
    4b8c:	88 60       	ori	r24, 0x08	; 8
    4b8e:	80 93 30 22 	sts	0x2230, r24
	}
	if (ax.a[Y].step_counter) {
    4b92:	80 91 43 22 	lds	r24, 0x2243
    4b96:	90 91 44 22 	lds	r25, 0x2244
    4b9a:	a0 91 45 22 	lds	r26, 0x2245
    4b9e:	b0 91 46 22 	lds	r27, 0x2246
    4ba2:	00 97       	sbiw	r24, 0x00	; 0
    4ba4:	a1 05       	cpc	r26, r1
    4ba6:	b1 05       	cpc	r27, r1
    4ba8:	59 f0       	breq	.+22     	; 0x4bc0 <st_execute_move+0x24c>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    4baa:	e0 91 51 22 	lds	r30, 0x2251
    4bae:	f0 91 52 22 	lds	r31, 0x2252
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4bb6:	80 91 30 22 	lds	r24, 0x2230
    4bba:	84 60       	ori	r24, 0x04	; 4
    4bbc:	80 93 30 22 	sts	0x2230, r24
	}
	if (ax.a[Z].step_counter) {
    4bc0:	80 91 53 22 	lds	r24, 0x2253
    4bc4:	90 91 54 22 	lds	r25, 0x2254
    4bc8:	a0 91 55 22 	lds	r26, 0x2255
    4bcc:	b0 91 56 22 	lds	r27, 0x2256
    4bd0:	00 97       	sbiw	r24, 0x00	; 0
    4bd2:	a1 05       	cpc	r26, r1
    4bd4:	b1 05       	cpc	r27, r1
    4bd6:	59 f0       	breq	.+22     	; 0x4bee <st_execute_move+0x27a>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4bd8:	e0 91 61 22 	lds	r30, 0x2261
    4bdc:	f0 91 62 22 	lds	r31, 0x2262
    4be0:	81 e0       	ldi	r24, 0x01	; 1
    4be2:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4be4:	80 91 30 22 	lds	r24, 0x2230
    4be8:	82 60       	ori	r24, 0x02	; 2
    4bea:	80 93 30 22 	sts	0x2230, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4bee:	10 92 2f 22 	sts	0x222F, r1
}
    4bf2:	df 91       	pop	r29
    4bf4:	cf 91       	pop	r28
    4bf6:	1f 91       	pop	r17
    4bf8:	0f 91       	pop	r16
    4bfa:	ff 90       	pop	r15
    4bfc:	ef 90       	pop	r14
    4bfe:	df 90       	pop	r13
    4c00:	cf 90       	pop	r12
    4c02:	08 95       	ret

00004c04 <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4c04:	10 92 2f 22 	sts	0x222F, r1
	st_execute_move();		// recursively empty the move queue
    4c08:	0e 94 ba 24 	call	0x4974	; 0x4974 <st_execute_move>
	return;
}
    4c0c:	08 95       	ret

00004c0e <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    4c0e:	1f 92       	push	r1
    4c10:	0f 92       	push	r0
    4c12:	0f b6       	in	r0, 0x3f	; 63
    4c14:	0f 92       	push	r0
    4c16:	0b b6       	in	r0, 0x3b	; 59
    4c18:	0f 92       	push	r0
    4c1a:	11 24       	eor	r1, r1
    4c1c:	2f 93       	push	r18
    4c1e:	3f 93       	push	r19
    4c20:	4f 93       	push	r20
    4c22:	5f 93       	push	r21
    4c24:	6f 93       	push	r22
    4c26:	7f 93       	push	r23
    4c28:	8f 93       	push	r24
    4c2a:	9f 93       	push	r25
    4c2c:	af 93       	push	r26
    4c2e:	bf 93       	push	r27
    4c30:	ef 93       	push	r30
    4c32:	ff 93       	push	r31
	if (--ax.a[A].postscale_counter != 0) {
    4c34:	80 91 6b 22 	lds	r24, 0x226B
    4c38:	90 91 6c 22 	lds	r25, 0x226C
    4c3c:	01 97       	sbiw	r24, 0x01	; 1
    4c3e:	80 93 6b 22 	sts	0x226B, r24
    4c42:	90 93 6c 22 	sts	0x226C, r25
    4c46:	89 2b       	or	r24, r25
    4c48:	a1 f5       	brne	.+104    	; 0x4cb2 <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4c4a:	e0 e6       	ldi	r30, 0x60	; 96
    4c4c:	f6 e0       	ldi	r31, 0x06	; 6
    4c4e:	81 e0       	ldi	r24, 0x01	; 1
    4c50:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    4c52:	80 91 63 22 	lds	r24, 0x2263
    4c56:	90 91 64 22 	lds	r25, 0x2264
    4c5a:	a0 91 65 22 	lds	r26, 0x2265
    4c5e:	b0 91 66 22 	lds	r27, 0x2266
    4c62:	01 97       	sbiw	r24, 0x01	; 1
    4c64:	a1 09       	sbc	r26, r1
    4c66:	b1 09       	sbc	r27, r1
    4c68:	80 93 63 22 	sts	0x2263, r24
    4c6c:	90 93 64 22 	sts	0x2264, r25
    4c70:	a0 93 65 22 	sts	0x2265, r26
    4c74:	b0 93 66 22 	sts	0x2266, r27
    4c78:	00 97       	sbiw	r24, 0x00	; 0
    4c7a:	a1 05       	cpc	r26, r1
    4c7c:	b1 05       	cpc	r27, r1
    4c7e:	69 f4       	brne	.+26     	; 0x4c9a <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4c80:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4c84:	84 e0       	ldi	r24, 0x04	; 4
    4c86:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4c88:	80 91 30 22 	lds	r24, 0x2230
    4c8c:	8e 7f       	andi	r24, 0xFE	; 254
    4c8e:	80 93 30 22 	sts	0x2230, r24
		if (ax.active_axes == 0) {
    4c92:	88 23       	and	r24, r24
    4c94:	11 f4       	brne	.+4      	; 0x4c9a <__vector_108+0x8c>
			st_execute_move();
    4c96:	0e 94 ba 24 	call	0x4974	; 0x4974 <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    4c9a:	80 91 69 22 	lds	r24, 0x2269
    4c9e:	90 91 6a 22 	lds	r25, 0x226A
    4ca2:	80 93 6b 22 	sts	0x226B, r24
    4ca6:	90 93 6c 22 	sts	0x226C, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4caa:	81 e0       	ldi	r24, 0x01	; 1
    4cac:	e0 e6       	ldi	r30, 0x60	; 96
    4cae:	f6 e0       	ldi	r31, 0x06	; 6
    4cb0:	86 83       	std	Z+6, r24	; 0x06
}
    4cb2:	ff 91       	pop	r31
    4cb4:	ef 91       	pop	r30
    4cb6:	bf 91       	pop	r27
    4cb8:	af 91       	pop	r26
    4cba:	9f 91       	pop	r25
    4cbc:	8f 91       	pop	r24
    4cbe:	7f 91       	pop	r23
    4cc0:	6f 91       	pop	r22
    4cc2:	5f 91       	pop	r21
    4cc4:	4f 91       	pop	r20
    4cc6:	3f 91       	pop	r19
    4cc8:	2f 91       	pop	r18
    4cca:	0f 90       	pop	r0
    4ccc:	0b be       	out	0x3b, r0	; 59
    4cce:	0f 90       	pop	r0
    4cd0:	0f be       	out	0x3f, r0	; 63
    4cd2:	0f 90       	pop	r0
    4cd4:	1f 90       	pop	r1
    4cd6:	18 95       	reti

00004cd8 <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4cd8:	1f 92       	push	r1
    4cda:	0f 92       	push	r0
    4cdc:	0f b6       	in	r0, 0x3f	; 63
    4cde:	0f 92       	push	r0
    4ce0:	0b b6       	in	r0, 0x3b	; 59
    4ce2:	0f 92       	push	r0
    4ce4:	11 24       	eor	r1, r1
    4ce6:	2f 93       	push	r18
    4ce8:	3f 93       	push	r19
    4cea:	4f 93       	push	r20
    4cec:	5f 93       	push	r21
    4cee:	6f 93       	push	r22
    4cf0:	7f 93       	push	r23
    4cf2:	8f 93       	push	r24
    4cf4:	9f 93       	push	r25
    4cf6:	af 93       	push	r26
    4cf8:	bf 93       	push	r27
    4cfa:	ef 93       	push	r30
    4cfc:	ff 93       	push	r31
	if (--ax.a[Z].postscale_counter != 0) {
    4cfe:	80 91 5b 22 	lds	r24, 0x225B
    4d02:	90 91 5c 22 	lds	r25, 0x225C
    4d06:	01 97       	sbiw	r24, 0x01	; 1
    4d08:	80 93 5b 22 	sts	0x225B, r24
    4d0c:	90 93 5c 22 	sts	0x225C, r25
    4d10:	89 2b       	or	r24, r25
    4d12:	a1 f5       	brne	.+104    	; 0x4d7c <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4d14:	e0 e8       	ldi	r30, 0x80	; 128
    4d16:	f6 e0       	ldi	r31, 0x06	; 6
    4d18:	81 e0       	ldi	r24, 0x01	; 1
    4d1a:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    4d1c:	80 91 53 22 	lds	r24, 0x2253
    4d20:	90 91 54 22 	lds	r25, 0x2254
    4d24:	a0 91 55 22 	lds	r26, 0x2255
    4d28:	b0 91 56 22 	lds	r27, 0x2256
    4d2c:	01 97       	sbiw	r24, 0x01	; 1
    4d2e:	a1 09       	sbc	r26, r1
    4d30:	b1 09       	sbc	r27, r1
    4d32:	80 93 53 22 	sts	0x2253, r24
    4d36:	90 93 54 22 	sts	0x2254, r25
    4d3a:	a0 93 55 22 	sts	0x2255, r26
    4d3e:	b0 93 56 22 	sts	0x2256, r27
    4d42:	00 97       	sbiw	r24, 0x00	; 0
    4d44:	a1 05       	cpc	r26, r1
    4d46:	b1 05       	cpc	r27, r1
    4d48:	69 f4       	brne	.+26     	; 0x4d64 <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4d4a:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4d4e:	84 e0       	ldi	r24, 0x04	; 4
    4d50:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4d52:	80 91 30 22 	lds	r24, 0x2230
    4d56:	8d 7f       	andi	r24, 0xFD	; 253
    4d58:	80 93 30 22 	sts	0x2230, r24
		if (ax.active_axes == 0) {
    4d5c:	88 23       	and	r24, r24
    4d5e:	11 f4       	brne	.+4      	; 0x4d64 <__vector_47+0x8c>
			st_execute_move();
    4d60:	0e 94 ba 24 	call	0x4974	; 0x4974 <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    4d64:	80 91 59 22 	lds	r24, 0x2259
    4d68:	90 91 5a 22 	lds	r25, 0x225A
    4d6c:	80 93 5b 22 	sts	0x225B, r24
    4d70:	90 93 5c 22 	sts	0x225C, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4d74:	81 e0       	ldi	r24, 0x01	; 1
    4d76:	e0 e8       	ldi	r30, 0x80	; 128
    4d78:	f6 e0       	ldi	r31, 0x06	; 6
    4d7a:	86 83       	std	Z+6, r24	; 0x06
}
    4d7c:	ff 91       	pop	r31
    4d7e:	ef 91       	pop	r30
    4d80:	bf 91       	pop	r27
    4d82:	af 91       	pop	r26
    4d84:	9f 91       	pop	r25
    4d86:	8f 91       	pop	r24
    4d88:	7f 91       	pop	r23
    4d8a:	6f 91       	pop	r22
    4d8c:	5f 91       	pop	r21
    4d8e:	4f 91       	pop	r20
    4d90:	3f 91       	pop	r19
    4d92:	2f 91       	pop	r18
    4d94:	0f 90       	pop	r0
    4d96:	0b be       	out	0x3b, r0	; 59
    4d98:	0f 90       	pop	r0
    4d9a:	0f be       	out	0x3f, r0	; 63
    4d9c:	0f 90       	pop	r0
    4d9e:	1f 90       	pop	r1
    4da0:	18 95       	reti

00004da2 <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4da2:	1f 92       	push	r1
    4da4:	0f 92       	push	r0
    4da6:	0f b6       	in	r0, 0x3f	; 63
    4da8:	0f 92       	push	r0
    4daa:	0b b6       	in	r0, 0x3b	; 59
    4dac:	0f 92       	push	r0
    4dae:	11 24       	eor	r1, r1
    4db0:	2f 93       	push	r18
    4db2:	3f 93       	push	r19
    4db4:	4f 93       	push	r20
    4db6:	5f 93       	push	r21
    4db8:	6f 93       	push	r22
    4dba:	7f 93       	push	r23
    4dbc:	8f 93       	push	r24
    4dbe:	9f 93       	push	r25
    4dc0:	af 93       	push	r26
    4dc2:	bf 93       	push	r27
    4dc4:	ef 93       	push	r30
    4dc6:	ff 93       	push	r31
	if (--ax.a[Y].postscale_counter != 0) {
    4dc8:	80 91 4b 22 	lds	r24, 0x224B
    4dcc:	90 91 4c 22 	lds	r25, 0x224C
    4dd0:	01 97       	sbiw	r24, 0x01	; 1
    4dd2:	80 93 4b 22 	sts	0x224B, r24
    4dd6:	90 93 4c 22 	sts	0x224C, r25
    4dda:	89 2b       	or	r24, r25
    4ddc:	a1 f5       	brne	.+104    	; 0x4e46 <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4dde:	e0 ea       	ldi	r30, 0xA0	; 160
    4de0:	f6 e0       	ldi	r31, 0x06	; 6
    4de2:	81 e0       	ldi	r24, 0x01	; 1
    4de4:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    4de6:	80 91 43 22 	lds	r24, 0x2243
    4dea:	90 91 44 22 	lds	r25, 0x2244
    4dee:	a0 91 45 22 	lds	r26, 0x2245
    4df2:	b0 91 46 22 	lds	r27, 0x2246
    4df6:	01 97       	sbiw	r24, 0x01	; 1
    4df8:	a1 09       	sbc	r26, r1
    4dfa:	b1 09       	sbc	r27, r1
    4dfc:	80 93 43 22 	sts	0x2243, r24
    4e00:	90 93 44 22 	sts	0x2244, r25
    4e04:	a0 93 45 22 	sts	0x2245, r26
    4e08:	b0 93 46 22 	sts	0x2246, r27
    4e0c:	00 97       	sbiw	r24, 0x00	; 0
    4e0e:	a1 05       	cpc	r26, r1
    4e10:	b1 05       	cpc	r27, r1
    4e12:	69 f4       	brne	.+26     	; 0x4e2e <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4e14:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4e18:	84 e0       	ldi	r24, 0x04	; 4
    4e1a:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4e1c:	80 91 30 22 	lds	r24, 0x2230
    4e20:	8b 7f       	andi	r24, 0xFB	; 251
    4e22:	80 93 30 22 	sts	0x2230, r24
		if (ax.active_axes == 0) {
    4e26:	88 23       	and	r24, r24
    4e28:	11 f4       	brne	.+4      	; 0x4e2e <__vector_77+0x8c>
			st_execute_move();
    4e2a:	0e 94 ba 24 	call	0x4974	; 0x4974 <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    4e2e:	80 91 49 22 	lds	r24, 0x2249
    4e32:	90 91 4a 22 	lds	r25, 0x224A
    4e36:	80 93 4b 22 	sts	0x224B, r24
    4e3a:	90 93 4c 22 	sts	0x224C, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4e3e:	81 e0       	ldi	r24, 0x01	; 1
    4e40:	e0 ea       	ldi	r30, 0xA0	; 160
    4e42:	f6 e0       	ldi	r31, 0x06	; 6
    4e44:	86 83       	std	Z+6, r24	; 0x06
}
    4e46:	ff 91       	pop	r31
    4e48:	ef 91       	pop	r30
    4e4a:	bf 91       	pop	r27
    4e4c:	af 91       	pop	r26
    4e4e:	9f 91       	pop	r25
    4e50:	8f 91       	pop	r24
    4e52:	7f 91       	pop	r23
    4e54:	6f 91       	pop	r22
    4e56:	5f 91       	pop	r21
    4e58:	4f 91       	pop	r20
    4e5a:	3f 91       	pop	r19
    4e5c:	2f 91       	pop	r18
    4e5e:	0f 90       	pop	r0
    4e60:	0b be       	out	0x3b, r0	; 59
    4e62:	0f 90       	pop	r0
    4e64:	0f be       	out	0x3f, r0	; 63
    4e66:	0f 90       	pop	r0
    4e68:	1f 90       	pop	r1
    4e6a:	18 95       	reti

00004e6c <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4e6c:	1f 92       	push	r1
    4e6e:	0f 92       	push	r0
    4e70:	0f b6       	in	r0, 0x3f	; 63
    4e72:	0f 92       	push	r0
    4e74:	0b b6       	in	r0, 0x3b	; 59
    4e76:	0f 92       	push	r0
    4e78:	11 24       	eor	r1, r1
    4e7a:	2f 93       	push	r18
    4e7c:	3f 93       	push	r19
    4e7e:	4f 93       	push	r20
    4e80:	5f 93       	push	r21
    4e82:	6f 93       	push	r22
    4e84:	7f 93       	push	r23
    4e86:	8f 93       	push	r24
    4e88:	9f 93       	push	r25
    4e8a:	af 93       	push	r26
    4e8c:	bf 93       	push	r27
    4e8e:	ef 93       	push	r30
    4e90:	ff 93       	push	r31
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    4e92:	80 91 3b 22 	lds	r24, 0x223B
    4e96:	90 91 3c 22 	lds	r25, 0x223C
    4e9a:	01 97       	sbiw	r24, 0x01	; 1
    4e9c:	80 93 3b 22 	sts	0x223B, r24
    4ea0:	90 93 3c 22 	sts	0x223C, r25
    4ea4:	89 2b       	or	r24, r25
    4ea6:	d1 f5       	brne	.+116    	; 0x4f1c <__vector_14+0xb0>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    4ea8:	80 91 3e 22 	lds	r24, 0x223E
    4eac:	88 23       	and	r24, r24
    4eae:	21 f4       	brne	.+8      	; 0x4eb8 <__vector_14+0x4c>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    4eb0:	81 e0       	ldi	r24, 0x01	; 1
    4eb2:	e0 e0       	ldi	r30, 0x00	; 0
    4eb4:	f6 e0       	ldi	r31, 0x06	; 6
    4eb6:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    4eb8:	80 91 33 22 	lds	r24, 0x2233
    4ebc:	90 91 34 22 	lds	r25, 0x2234
    4ec0:	a0 91 35 22 	lds	r26, 0x2235
    4ec4:	b0 91 36 22 	lds	r27, 0x2236
    4ec8:	01 97       	sbiw	r24, 0x01	; 1
    4eca:	a1 09       	sbc	r26, r1
    4ecc:	b1 09       	sbc	r27, r1
    4ece:	80 93 33 22 	sts	0x2233, r24
    4ed2:	90 93 34 22 	sts	0x2234, r25
    4ed6:	a0 93 35 22 	sts	0x2235, r26
    4eda:	b0 93 36 22 	sts	0x2236, r27
    4ede:	00 97       	sbiw	r24, 0x00	; 0
    4ee0:	a1 05       	cpc	r26, r1
    4ee2:	b1 05       	cpc	r27, r1
    4ee4:	79 f4       	brne	.+30     	; 0x4f04 <__vector_14+0x98>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    4ee6:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4eea:	84 e0       	ldi	r24, 0x04	; 4
    4eec:	e0 e0       	ldi	r30, 0x00	; 0
    4eee:	f6 e0       	ldi	r31, 0x06	; 6
    4ef0:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    4ef2:	80 91 30 22 	lds	r24, 0x2230
    4ef6:	87 7f       	andi	r24, 0xF7	; 247
    4ef8:	80 93 30 22 	sts	0x2230, r24
		if (ax.active_axes == 0) {				// if all axes are done
    4efc:	88 23       	and	r24, r24
    4efe:	11 f4       	brne	.+4      	; 0x4f04 <__vector_14+0x98>
			st_execute_move();					// ...run the next move
    4f00:	0e 94 ba 24 	call	0x4974	; 0x4974 <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    4f04:	80 91 39 22 	lds	r24, 0x2239
    4f08:	90 91 3a 22 	lds	r25, 0x223A
    4f0c:	80 93 3b 22 	sts	0x223B, r24
    4f10:	90 93 3c 22 	sts	0x223C, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    4f14:	81 e0       	ldi	r24, 0x01	; 1
    4f16:	e0 e0       	ldi	r30, 0x00	; 0
    4f18:	f6 e0       	ldi	r31, 0x06	; 6
    4f1a:	86 83       	std	Z+6, r24	; 0x06
}
    4f1c:	ff 91       	pop	r31
    4f1e:	ef 91       	pop	r30
    4f20:	bf 91       	pop	r27
    4f22:	af 91       	pop	r26
    4f24:	9f 91       	pop	r25
    4f26:	8f 91       	pop	r24
    4f28:	7f 91       	pop	r23
    4f2a:	6f 91       	pop	r22
    4f2c:	5f 91       	pop	r21
    4f2e:	4f 91       	pop	r20
    4f30:	3f 91       	pop	r19
    4f32:	2f 91       	pop	r18
    4f34:	0f 90       	pop	r0
    4f36:	0b be       	out	0x3b, r0	; 59
    4f38:	0f 90       	pop	r0
    4f3a:	0f be       	out	0x3f, r0	; 63
    4f3c:	0f 90       	pop	r0
    4f3e:	1f 90       	pop	r1
    4f40:	18 95       	reti

00004f42 <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    4f42:	e0 ea       	ldi	r30, 0xA0	; 160
    4f44:	f0 e0       	ldi	r31, 0x00	; 0
    4f46:	82 81       	ldd	r24, Z+2	; 0x02
    4f48:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    4f4a:	98 ed       	ldi	r25, 0xD8	; 216
    4f4c:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4f4e:	82 83       	std	Z+2, r24	; 0x02
}
    4f50:	08 95       	ret

00004f52 <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    4f52:	e0 ea       	ldi	r30, 0xA0	; 160
    4f54:	f0 e0       	ldi	r31, 0x00	; 0
    4f56:	82 81       	ldd	r24, Z+2	; 0x02
    4f58:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    4f5a:	98 ed       	ldi	r25, 0xD8	; 216
    4f5c:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4f5e:	82 83       	std	Z+2, r24	; 0x02
}
    4f60:	08 95       	ret

00004f62 <xio_setflags>:
 * xio_setflags()
 */

int xio_setflags(const uint8_t dev, const uint16_t control)
{
	struct xioDEVICE *d = &ds[dev];
    4f62:	97 e1       	ldi	r25, 0x17	; 23
    4f64:	89 9f       	mul	r24, r25
    4f66:	f0 01       	movw	r30, r0
    4f68:	11 24       	eor	r1, r1
    4f6a:	ef 53       	subi	r30, 0x3F	; 63
    4f6c:	fc 4d       	sbci	r31, 0xDC	; 220

	if (control & XIO_RD) {
    4f6e:	64 ff       	sbrs	r22, 4
    4f70:	05 c0       	rjmp	.+10     	; 0x4f7c <xio_setflags+0x1a>
		d->flags |= XIO_FLAG_RD_bm;
    4f72:	80 81       	ld	r24, Z
    4f74:	91 81       	ldd	r25, Z+1	; 0x01
    4f76:	81 60       	ori	r24, 0x01	; 1
    4f78:	80 83       	st	Z, r24
    4f7a:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_WR) {
    4f7c:	65 ff       	sbrs	r22, 5
    4f7e:	05 c0       	rjmp	.+10     	; 0x4f8a <xio_setflags+0x28>
		d->flags |= XIO_FLAG_WR_bm;
    4f80:	80 81       	ld	r24, Z
    4f82:	91 81       	ldd	r25, Z+1	; 0x01
    4f84:	82 60       	ori	r24, 0x02	; 2
    4f86:	80 83       	st	Z, r24
    4f88:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_BLOCK) {
    4f8a:	66 ff       	sbrs	r22, 6
    4f8c:	05 c0       	rjmp	.+10     	; 0x4f98 <xio_setflags+0x36>
		d->flags |= XIO_FLAG_BLOCK_bm;
    4f8e:	80 81       	ld	r24, Z
    4f90:	91 81       	ldd	r25, Z+1	; 0x01
    4f92:	84 60       	ori	r24, 0x04	; 4
    4f94:	80 83       	st	Z, r24
    4f96:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOBLOCK) {
    4f98:	67 ff       	sbrs	r22, 7
    4f9a:	05 c0       	rjmp	.+10     	; 0x4fa6 <xio_setflags+0x44>
		d->flags &= ~XIO_FLAG_BLOCK_bm;
    4f9c:	80 81       	ld	r24, Z
    4f9e:	91 81       	ldd	r25, Z+1	; 0x01
    4fa0:	8b 7f       	andi	r24, 0xFB	; 251
    4fa2:	80 83       	st	Z, r24
    4fa4:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_ECHO) {
    4fa6:	70 ff       	sbrs	r23, 0
    4fa8:	05 c0       	rjmp	.+10     	; 0x4fb4 <xio_setflags+0x52>
		d->flags |= XIO_FLAG_ECHO_bm;
    4faa:	80 81       	ld	r24, Z
    4fac:	91 81       	ldd	r25, Z+1	; 0x01
    4fae:	80 61       	ori	r24, 0x10	; 16
    4fb0:	80 83       	st	Z, r24
    4fb2:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOECHO) {
    4fb4:	71 ff       	sbrs	r23, 1
    4fb6:	05 c0       	rjmp	.+10     	; 0x4fc2 <xio_setflags+0x60>
		d->flags &= ~XIO_FLAG_ECHO_bm;
    4fb8:	80 81       	ld	r24, Z
    4fba:	91 81       	ldd	r25, Z+1	; 0x01
    4fbc:	8f 7e       	andi	r24, 0xEF	; 239
    4fbe:	80 83       	st	Z, r24
    4fc0:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_CRLF) {
    4fc2:	72 ff       	sbrs	r23, 2
    4fc4:	05 c0       	rjmp	.+10     	; 0x4fd0 <xio_setflags+0x6e>
		d->flags |= XIO_FLAG_CRLF_bm;
    4fc6:	80 81       	ld	r24, Z
    4fc8:	91 81       	ldd	r25, Z+1	; 0x01
    4fca:	80 62       	ori	r24, 0x20	; 32
    4fcc:	80 83       	st	Z, r24
    4fce:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOCRLF) {
    4fd0:	73 ff       	sbrs	r23, 3
    4fd2:	05 c0       	rjmp	.+10     	; 0x4fde <xio_setflags+0x7c>
		d->flags &= ~XIO_FLAG_CRLF_bm;
    4fd4:	80 81       	ld	r24, Z
    4fd6:	91 81       	ldd	r25, Z+1	; 0x01
    4fd8:	8f 7d       	andi	r24, 0xDF	; 223
    4fda:	80 83       	st	Z, r24
    4fdc:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_LINEMODE) {
    4fde:	74 ff       	sbrs	r23, 4
    4fe0:	05 c0       	rjmp	.+10     	; 0x4fec <xio_setflags+0x8a>
		d->flags |= XIO_FLAG_LINEMODE_bm;
    4fe2:	80 81       	ld	r24, Z
    4fe4:	91 81       	ldd	r25, Z+1	; 0x01
    4fe6:	80 64       	ori	r24, 0x40	; 64
    4fe8:	80 83       	st	Z, r24
    4fea:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOLINEMODE) {
    4fec:	75 ff       	sbrs	r23, 5
    4fee:	05 c0       	rjmp	.+10     	; 0x4ffa <xio_setflags+0x98>
		d->flags &= ~XIO_FLAG_LINEMODE_bm;
    4ff0:	80 81       	ld	r24, Z
    4ff2:	91 81       	ldd	r25, Z+1	; 0x01
    4ff4:	8f 7b       	andi	r24, 0xBF	; 191
    4ff6:	80 83       	st	Z, r24
    4ff8:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_SEMICOLONS) {
    4ffa:	76 ff       	sbrs	r23, 6
    4ffc:	05 c0       	rjmp	.+10     	; 0x5008 <xio_setflags+0xa6>
		d->flags |= XIO_FLAG_SEMICOLONS_bm;
    4ffe:	80 81       	ld	r24, Z
    5000:	91 81       	ldd	r25, Z+1	; 0x01
    5002:	80 68       	ori	r24, 0x80	; 128
    5004:	80 83       	st	Z, r24
    5006:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOSEMICOLONS) {
    5008:	77 ff       	sbrs	r23, 7
    500a:	05 c0       	rjmp	.+10     	; 0x5016 <xio_setflags+0xb4>
		d->flags &= ~XIO_FLAG_SEMICOLONS_bm;
    500c:	80 81       	ld	r24, Z
    500e:	91 81       	ldd	r25, Z+1	; 0x01
    5010:	8f 77       	andi	r24, 0x7F	; 127
    5012:	80 83       	st	Z, r24
    5014:	91 83       	std	Z+1, r25	; 0x01
	}
	return (XIO_OK);
}
    5016:	80 e0       	ldi	r24, 0x00	; 0
    5018:	90 e0       	ldi	r25, 0x00	; 0
    501a:	08 95       	ret

0000501c <xio_set_stdin>:
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    501c:	90 e0       	ldi	r25, 0x00	; 0
    501e:	27 e1       	ldi	r18, 0x17	; 23
    5020:	30 e0       	ldi	r19, 0x00	; 0
    5022:	82 9f       	mul	r24, r18
    5024:	f0 01       	movw	r30, r0
    5026:	83 9f       	mul	r24, r19
    5028:	f0 0d       	add	r31, r0
    502a:	92 9f       	mul	r25, r18
    502c:	f0 0d       	add	r31, r0
    502e:	11 24       	eor	r1, r1
    5030:	ef 53       	subi	r30, 0x3F	; 63
    5032:	fc 4d       	sbci	r31, 0xDC	; 220
    5034:	83 89       	ldd	r24, Z+19	; 0x13
    5036:	94 89       	ldd	r25, Z+20	; 0x14
    5038:	80 93 00 25 	sts	0x2500, r24
    503c:	90 93 01 25 	sts	0x2501, r25
}
    5040:	08 95       	ret

00005042 <xio_set_stdout>:

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	27 e1       	ldi	r18, 0x17	; 23
    5046:	30 e0       	ldi	r19, 0x00	; 0
    5048:	82 9f       	mul	r24, r18
    504a:	f0 01       	movw	r30, r0
    504c:	83 9f       	mul	r24, r19
    504e:	f0 0d       	add	r31, r0
    5050:	92 9f       	mul	r25, r18
    5052:	f0 0d       	add	r31, r0
    5054:	11 24       	eor	r1, r1
    5056:	ef 53       	subi	r30, 0x3F	; 63
    5058:	fc 4d       	sbci	r31, 0xDC	; 220
    505a:	83 89       	ldd	r24, Z+19	; 0x13
    505c:	94 89       	ldd	r25, Z+20	; 0x14
    505e:	80 93 02 25 	sts	0x2502, r24
    5062:	90 93 03 25 	sts	0x2503, r25
}
    5066:	08 95       	ret

00005068 <xio_set_stderr>:

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    5068:	90 e0       	ldi	r25, 0x00	; 0
    506a:	27 e1       	ldi	r18, 0x17	; 23
    506c:	30 e0       	ldi	r19, 0x00	; 0
    506e:	82 9f       	mul	r24, r18
    5070:	f0 01       	movw	r30, r0
    5072:	83 9f       	mul	r24, r19
    5074:	f0 0d       	add	r31, r0
    5076:	92 9f       	mul	r25, r18
    5078:	f0 0d       	add	r31, r0
    507a:	11 24       	eor	r1, r1
    507c:	ef 53       	subi	r30, 0x3F	; 63
    507e:	fc 4d       	sbci	r31, 0xDC	; 220
    5080:	83 89       	ldd	r24, Z+19	; 0x13
    5082:	94 89       	ldd	r25, Z+20	; 0x14
    5084:	80 93 04 25 	sts	0x2504, r24
    5088:	90 93 05 25 	sts	0x2505, r25
}
    508c:	08 95       	ret

0000508e <xio_putc>:
/*
 * xio_putc() - common entry point for putc
 */

int xio_putc(const uint8_t dev, const char c)
{
    508e:	46 2f       	mov	r20, r22
	if (dev < XIO_DEV_COUNT) {
    5090:	88 30       	cpi	r24, 0x08	; 8
    5092:	18 f0       	brcs	.+6      	; 0x509a <xio_putc+0xc>
    5094:	27 e0       	ldi	r18, 0x07	; 7
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	15 c0       	rjmp	.+42     	; 0x50c4 <xio_putc+0x36>
		return ds[dev].x_putc(c, ds[dev].fdev);
    509a:	28 2f       	mov	r18, r24
    509c:	30 e0       	ldi	r19, 0x00	; 0
    509e:	87 e1       	ldi	r24, 0x17	; 23
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	28 9f       	mul	r18, r24
    50a4:	f0 01       	movw	r30, r0
    50a6:	29 9f       	mul	r18, r25
    50a8:	f0 0d       	add	r31, r0
    50aa:	38 9f       	mul	r19, r24
    50ac:	f0 0d       	add	r31, r0
    50ae:	11 24       	eor	r1, r1
    50b0:	ef 53       	subi	r30, 0x3F	; 63
    50b2:	fc 4d       	sbci	r31, 0xDC	; 220
    50b4:	63 89       	ldd	r22, Z+19	; 0x13
    50b6:	74 89       	ldd	r23, Z+20	; 0x14
    50b8:	03 84       	ldd	r0, Z+11	; 0x0b
    50ba:	f4 85       	ldd	r31, Z+12	; 0x0c
    50bc:	e0 2d       	mov	r30, r0
    50be:	84 2f       	mov	r24, r20
    50c0:	19 95       	eicall
    50c2:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}
}
    50c4:	c9 01       	movw	r24, r18
    50c6:	08 95       	ret

000050c8 <xio_getc>:
 * xio_getc() - common entry point for getc
 */

int xio_getc(const uint8_t dev)
{
	if (dev < XIO_DEV_COUNT) {
    50c8:	88 30       	cpi	r24, 0x08	; 8
    50ca:	18 f0       	brcs	.+6      	; 0x50d2 <xio_getc+0xa>
    50cc:	27 e0       	ldi	r18, 0x07	; 7
    50ce:	30 e0       	ldi	r19, 0x00	; 0
    50d0:	14 c0       	rjmp	.+40     	; 0x50fa <xio_getc+0x32>
		return ds[dev].x_getc(ds[dev].fdev);
    50d2:	28 2f       	mov	r18, r24
    50d4:	30 e0       	ldi	r19, 0x00	; 0
    50d6:	87 e1       	ldi	r24, 0x17	; 23
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	28 9f       	mul	r18, r24
    50dc:	f0 01       	movw	r30, r0
    50de:	29 9f       	mul	r18, r25
    50e0:	f0 0d       	add	r31, r0
    50e2:	38 9f       	mul	r19, r24
    50e4:	f0 0d       	add	r31, r0
    50e6:	11 24       	eor	r1, r1
    50e8:	ef 53       	subi	r30, 0x3F	; 63
    50ea:	fc 4d       	sbci	r31, 0xDC	; 220
    50ec:	25 85       	ldd	r18, Z+13	; 0x0d
    50ee:	36 85       	ldd	r19, Z+14	; 0x0e
    50f0:	83 89       	ldd	r24, Z+19	; 0x13
    50f2:	94 89       	ldd	r25, Z+20	; 0x14
    50f4:	f9 01       	movw	r30, r18
    50f6:	19 95       	eicall
    50f8:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}		
}
    50fa:	c9 01       	movw	r24, r18
    50fc:	08 95       	ret

000050fe <xio_readln>:
 *	size	size of text buffer in 1 offset form: e.g. use 80 instead of 79
 */

int xio_readln(const uint8_t dev, char *buf, const uint8_t size)
{
	if (dev < XIO_DEV_COUNT) {
    50fe:	88 30       	cpi	r24, 0x08	; 8
    5100:	18 f0       	brcs	.+6      	; 0x5108 <xio_readln+0xa>
    5102:	27 e0       	ldi	r18, 0x07	; 7
    5104:	30 e0       	ldi	r19, 0x00	; 0
    5106:	14 c0       	rjmp	.+40     	; 0x5130 <xio_readln+0x32>
		return ds[dev].x_readln(buf, size);
    5108:	28 2f       	mov	r18, r24
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	87 e1       	ldi	r24, 0x17	; 23
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	28 9f       	mul	r18, r24
    5112:	f0 01       	movw	r30, r0
    5114:	29 9f       	mul	r18, r25
    5116:	f0 0d       	add	r31, r0
    5118:	38 9f       	mul	r19, r24
    511a:	f0 0d       	add	r31, r0
    511c:	11 24       	eor	r1, r1
    511e:	ef 53       	subi	r30, 0x3F	; 63
    5120:	fc 4d       	sbci	r31, 0xDC	; 220
    5122:	07 84       	ldd	r0, Z+15	; 0x0f
    5124:	f0 89       	ldd	r31, Z+16	; 0x10
    5126:	e0 2d       	mov	r30, r0
    5128:	cb 01       	movw	r24, r22
    512a:	64 2f       	mov	r22, r20
    512c:	19 95       	eicall
    512e:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}		
}
    5130:	c9 01       	movw	r24, r18
    5132:	08 95       	ret

00005134 <xio_init_dev>:
	int (*x_setflags)(const uint16_t control),// set device control flags
	int (*x_putc)(char, struct __file *),		// write char (stdio compatible)
	int (*x_getc)(struct __file *),			// read char (stdio compatible)
	int (*x_readln)(char *buf, uint8_t size)	// specialized line reader
	) 
{
    5134:	df 92       	push	r13
    5136:	ef 92       	push	r14
    5138:	ff 92       	push	r15
    513a:	0f 93       	push	r16
    513c:	1f 93       	push	r17
    513e:	cf 93       	push	r28
    5140:	df 93       	push	r29
	// clear device struct
	memset (&ds[dev], 0, sizeof(struct xioDEVICE));	
    5142:	90 e0       	ldi	r25, 0x00	; 0
    5144:	e7 e1       	ldi	r30, 0x17	; 23
    5146:	f0 e0       	ldi	r31, 0x00	; 0
    5148:	8e 9f       	mul	r24, r30
    514a:	d0 01       	movw	r26, r0
    514c:	8f 9f       	mul	r24, r31
    514e:	b0 0d       	add	r27, r0
    5150:	9e 9f       	mul	r25, r30
    5152:	b0 0d       	add	r27, r0
    5154:	11 24       	eor	r1, r1
    5156:	af 53       	subi	r26, 0x3F	; 63
    5158:	bc 4d       	sbci	r27, 0xDC	; 220
    515a:	0f 2e       	mov	r0, r31
    515c:	f7 e1       	ldi	r31, 0x17	; 23
    515e:	df 2e       	mov	r13, r31
    5160:	f0 2d       	mov	r31, r0
    5162:	ed 01       	movw	r28, r26
    5164:	19 92       	st	Y+, r1
    5166:	da 94       	dec	r13
    5168:	e9 f7       	brne	.-6      	; 0x5164 <xio_init_dev+0x30>

	// bind functions
	ds[dev].x_open = x_open;	
    516a:	17 96       	adiw	r26, 0x07	; 7
    516c:	6d 93       	st	X+, r22
    516e:	7c 93       	st	X, r23
    5170:	18 97       	sbiw	r26, 0x08	; 8
	ds[dev].x_setflags = x_setflags;
    5172:	19 96       	adiw	r26, 0x09	; 9
    5174:	4d 93       	st	X+, r20
    5176:	5c 93       	st	X, r21
    5178:	1a 97       	sbiw	r26, 0x0a	; 10
	ds[dev].x_putc = x_putc;
    517a:	1b 96       	adiw	r26, 0x0b	; 11
    517c:	2d 93       	st	X+, r18
    517e:	3c 93       	st	X, r19
    5180:	1c 97       	sbiw	r26, 0x0c	; 12
	ds[dev].x_getc = x_getc;
    5182:	1d 96       	adiw	r26, 0x0d	; 13
    5184:	0d 93       	st	X+, r16
    5186:	1c 93       	st	X, r17
    5188:	1e 97       	sbiw	r26, 0x0e	; 14
	ds[dev].x_readln = x_readln;
    518a:	1f 96       	adiw	r26, 0x0f	; 15
    518c:	ed 92       	st	X+, r14
    518e:	fc 92       	st	X, r15
    5190:	50 97       	sbiw	r26, 0x10	; 16

	// bind and setup stdio struct
	ds[dev].fdev = &ss[dev];					
    5192:	88 0f       	add	r24, r24
    5194:	99 1f       	adc	r25, r25
    5196:	fc 01       	movw	r30, r24
    5198:	43 e0       	ldi	r20, 0x03	; 3
    519a:	ee 0f       	add	r30, r30
    519c:	ff 1f       	adc	r31, r31
    519e:	4a 95       	dec	r20
    51a0:	e1 f7       	brne	.-8      	; 0x519a <xio_init_dev+0x66>
    51a2:	e8 1b       	sub	r30, r24
    51a4:	f9 0b       	sbc	r31, r25
    51a6:	e7 58       	subi	r30, 0x87	; 135
    51a8:	fb 4d       	sbci	r31, 0xDB	; 219
    51aa:	53 96       	adiw	r26, 0x13	; 19
    51ac:	ed 93       	st	X+, r30
    51ae:	fc 93       	st	X, r31
    51b0:	54 97       	sbiw	r26, 0x14	; 20
	fdev_setup_stream(ds[dev].fdev, x_putc, x_getc, _FDEV_SETUP_RW);
    51b2:	20 87       	std	Z+8, r18	; 0x08
    51b4:	31 87       	std	Z+9, r19	; 0x09
    51b6:	02 87       	std	Z+10, r16	; 0x0a
    51b8:	13 87       	std	Z+11, r17	; 0x0b
    51ba:	83 e0       	ldi	r24, 0x03	; 3
    51bc:	83 83       	std	Z+3, r24	; 0x03
    51be:	14 86       	std	Z+12, r1	; 0x0c
    51c0:	15 86       	std	Z+13, r1	; 0x0d
}
    51c2:	df 91       	pop	r29
    51c4:	cf 91       	pop	r28
    51c6:	1f 91       	pop	r17
    51c8:	0f 91       	pop	r16
    51ca:	ff 90       	pop	r15
    51cc:	ef 90       	pop	r14
    51ce:	df 90       	pop	r13
    51d0:	08 95       	ret

000051d2 <xio_init>:
/*
 *	xio_init() - initialize all active XIO devices
 */

void xio_init(void)
{	
    51d2:	ef 92       	push	r14
    51d4:	ff 92       	push	r15
    51d6:	0f 93       	push	r16
    51d8:	1f 93       	push	r17
	xio_init_rs485();
    51da:	0e 94 a4 34 	call	0x6948	; 0x6948 <xio_init_rs485>
	xio_init_usb();
    51de:	0e 94 92 33 	call	0x6724	; 0x6724 <xio_init_usb>

	// Program memory file device setup
	xio_init_dev(XIO_DEV_PGM, xio_open_pgm, xio_setflags_pgm, xio_putc_pgm, xio_getc_pgm, xio_readln_pgm);
    51e2:	83 e0       	ldi	r24, 0x03	; 3
    51e4:	66 ef       	ldi	r22, 0xF6	; 246
    51e6:	74 e3       	ldi	r23, 0x34	; 52
    51e8:	44 e8       	ldi	r20, 0x84	; 132
    51ea:	55 e3       	ldi	r21, 0x35	; 53
    51ec:	2e e0       	ldi	r18, 0x0E	; 14
    51ee:	35 e3       	ldi	r19, 0x35	; 53
    51f0:	08 e3       	ldi	r16, 0x38	; 56
    51f2:	15 e3       	ldi	r17, 0x35	; 53
    51f4:	91 e1       	ldi	r25, 0x11	; 17
    51f6:	e9 2e       	mov	r14, r25
    51f8:	95 e3       	ldi	r25, 0x35	; 53
    51fa:	f9 2e       	mov	r15, r25
    51fc:	0e 94 9a 28 	call	0x5134	; 0x5134 <xio_init_dev>
	xio_init_pgm(XIO_DEV_PGM, XIO_DEV_PGM_OFFSET, PGM_INIT_bm);
    5200:	83 e0       	ldi	r24, 0x03	; 3
    5202:	60 e0       	ldi	r22, 0x00	; 0
    5204:	40 e5       	ldi	r20, 0x50	; 80
    5206:	55 e1       	ldi	r21, 0x15	; 21
    5208:	0e 94 8b 35 	call	0x6b16	; 0x6b16 <xio_init_pgm>
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    520c:	80 91 eb 23 	lds	r24, 0x23EB
    5210:	90 91 ec 23 	lds	r25, 0x23EC
    5214:	80 93 00 25 	sts	0x2500, r24
    5218:	90 93 01 25 	sts	0x2501, r25
}

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    521c:	80 93 02 25 	sts	0x2502, r24
    5220:	90 93 03 25 	sts	0x2503, r25
}

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    5224:	80 93 04 25 	sts	0x2504, r24
    5228:	90 93 05 25 	sts	0x2505, r25
	xio_set_stdin(XIO_DEV_USB);
	xio_set_stdout(XIO_DEV_USB);
	xio_set_stderr(XIO_DEV_USB);

	// tell the world we are ready!
	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    522c:	0f 92       	push	r0
    522e:	0f 92       	push	r0
    5230:	8f e8       	ldi	r24, 0x8F	; 143
    5232:	96 e0       	ldi	r25, 0x06	; 6
    5234:	ed b7       	in	r30, 0x3d	; 61
    5236:	fe b7       	in	r31, 0x3e	; 62
    5238:	81 83       	std	Z+1, r24	; 0x01
    523a:	92 83       	std	Z+2, r25	; 0x02
    523c:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
    5240:	0f 90       	pop	r0
    5242:	0f 90       	pop	r0
}
    5244:	1f 91       	pop	r17
    5246:	0f 91       	pop	r16
    5248:	ff 90       	pop	r15
    524a:	ef 90       	pop	r14
    524c:	08 95       	ret

0000524e <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    524e:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5250:	e0 ec       	ldi	r30, 0xC0	; 192
    5252:	f1 e0       	ldi	r31, 0x01	; 1
    5254:	80 91 cf 01 	lds	r24, 0x01CF
    5258:	87 fd       	sbrc	r24, 7
    525a:	fa cf       	rjmp	.-12     	; 0x5250 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    525c:	26 2f       	mov	r18, r22
    525e:	30 e0       	ldi	r19, 0x00	; 0
    5260:	2f 71       	andi	r18, 0x1F	; 31
    5262:	30 70       	andi	r19, 0x00	; 0
    5264:	89 2f       	mov	r24, r25
    5266:	90 e0       	ldi	r25, 0x00	; 0
    5268:	45 e0       	ldi	r20, 0x05	; 5
    526a:	88 0f       	add	r24, r24
    526c:	99 1f       	adc	r25, r25
    526e:	4a 95       	dec	r20
    5270:	e1 f7       	brne	.-8      	; 0x526a <EEPROM_ReadByte+0x1c>
    5272:	28 2b       	or	r18, r24
    5274:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    5276:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    527a:	83 2f       	mov	r24, r19
    527c:	8f 71       	andi	r24, 0x1F	; 31
    527e:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5280:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    5282:	86 e0       	ldi	r24, 0x06	; 6
    5284:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5286:	ef 93       	push	r30
    5288:	ff 93       	push	r31
    528a:	0f 93       	push	r16
    528c:	2f 93       	push	r18
    528e:	eb ec       	ldi	r30, 0xCB	; 203
    5290:	f1 e0       	ldi	r31, 0x01	; 1
    5292:	08 ed       	ldi	r16, 0xD8	; 216
    5294:	21 e0       	ldi	r18, 0x01	; 1
    5296:	04 bf       	out	0x34, r16	; 52
    5298:	20 83       	st	Z, r18
    529a:	2f 91       	pop	r18
    529c:	0f 91       	pop	r16
    529e:	ff 91       	pop	r31
    52a0:	ef 91       	pop	r30

	return NVM.DATA0;
    52a2:	80 91 c4 01 	lds	r24, 0x01C4
}
    52a6:	08 95       	ret

000052a8 <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    52a8:	68 2f       	mov	r22, r24
    52aa:	6f 71       	andi	r22, 0x1F	; 31
    52ac:	55 e0       	ldi	r21, 0x05	; 5
    52ae:	96 95       	lsr	r25
    52b0:	87 95       	ror	r24
    52b2:	5a 95       	dec	r21
    52b4:	e1 f7       	brne	.-8      	; 0x52ae <eeprom_get_char+0x6>
    52b6:	0e 94 27 29 	call	0x524e	; 0x524e <EEPROM_ReadByte>
}
    52ba:	08 95       	ret

000052bc <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    52bc:	8f 92       	push	r8
    52be:	9f 92       	push	r9
    52c0:	af 92       	push	r10
    52c2:	bf 92       	push	r11
    52c4:	cf 92       	push	r12
    52c6:	df 92       	push	r13
    52c8:	ff 92       	push	r15
    52ca:	0f 93       	push	r16
    52cc:	1f 93       	push	r17
    52ce:	cf 93       	push	r28
    52d0:	df 93       	push	r29
    52d2:	4c 01       	movw	r8, r24
    52d4:	5b 01       	movw	r10, r22
    52d6:	6a 01       	movw	r12, r20
    52d8:	8b 01       	movw	r16, r22
    52da:	ea 01       	movw	r28, r20
    52dc:	ff 24       	eor	r15, r15
    52de:	18 c0       	rjmp	.+48     	; 0x5310 <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    52e0:	c8 01       	movw	r24, r16
    52e2:	0e 94 54 29 	call	0x52a8	; 0x52a8 <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    52e6:	ff 20       	and	r15, r15
    52e8:	19 f0       	breq	.+6      	; 0x52f0 <memcpy_from_eeprom_with_checksum+0x34>
    52ea:	21 e0       	ldi	r18, 0x01	; 1
    52ec:	30 e0       	ldi	r19, 0x00	; 0
    52ee:	08 c0       	rjmp	.+16     	; 0x5300 <memcpy_from_eeprom_with_checksum+0x44>
    52f0:	2f 2d       	mov	r18, r15
    52f2:	33 27       	eor	r19, r19
    52f4:	27 fd       	sbrc	r18, 7
    52f6:	30 95       	com	r19
    52f8:	22 27       	eor	r18, r18
    52fa:	33 0f       	add	r19, r19
    52fc:	22 1f       	adc	r18, r18
    52fe:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    5300:	0f 5f       	subi	r16, 0xFF	; 255
    5302:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    5304:	f8 2e       	mov	r15, r24
    5306:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    5308:	f4 01       	movw	r30, r8
    530a:	81 93       	st	Z+, r24
    530c:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    530e:	21 97       	sbiw	r28, 0x01	; 1
    5310:	20 97       	sbiw	r28, 0x00	; 0
    5312:	31 f7       	brne	.-52     	; 0x52e0 <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    5314:	c6 01       	movw	r24, r12
    5316:	8a 0d       	add	r24, r10
    5318:	9b 1d       	adc	r25, r11
    531a:	0e 94 54 29 	call	0x52a8	; 0x52a8 <eeprom_get_char>
    531e:	20 e0       	ldi	r18, 0x00	; 0
    5320:	30 e0       	ldi	r19, 0x00	; 0
    5322:	f8 16       	cp	r15, r24
    5324:	11 f4       	brne	.+4      	; 0x532a <memcpy_from_eeprom_with_checksum+0x6e>
    5326:	21 e0       	ldi	r18, 0x01	; 1
    5328:	30 e0       	ldi	r19, 0x00	; 0
}
    532a:	c9 01       	movw	r24, r18
    532c:	df 91       	pop	r29
    532e:	cf 91       	pop	r28
    5330:	1f 91       	pop	r17
    5332:	0f 91       	pop	r16
    5334:	ff 90       	pop	r15
    5336:	df 90       	pop	r13
    5338:	cf 90       	pop	r12
    533a:	bf 90       	pop	r11
    533c:	af 90       	pop	r10
    533e:	9f 90       	pop	r9
    5340:	8f 90       	pop	r8
    5342:	08 95       	ret

00005344 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5344:	80 91 cf 01 	lds	r24, 0x01CF
    5348:	87 fd       	sbrc	r24, 7
    534a:	fc cf       	rjmp	.-8      	; 0x5344 <EEPROM_WaitForNVM>
}
    534c:	08 95       	ret

0000534e <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    534e:	80 91 cf 01 	lds	r24, 0x01CF
    5352:	87 fd       	sbrc	r24, 7
    5354:	fc cf       	rjmp	.-8      	; 0x534e <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    5356:	80 91 cf 01 	lds	r24, 0x01CF
    535a:	81 ff       	sbrs	r24, 1
    535c:	12 c0       	rjmp	.+36     	; 0x5382 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    535e:	86 e3       	ldi	r24, 0x36	; 54
    5360:	e0 ec       	ldi	r30, 0xC0	; 192
    5362:	f1 e0       	ldi	r31, 0x01	; 1
    5364:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    5366:	ef 93       	push	r30
    5368:	ff 93       	push	r31
    536a:	0f 93       	push	r16
    536c:	2f 93       	push	r18
    536e:	eb ec       	ldi	r30, 0xCB	; 203
    5370:	f1 e0       	ldi	r31, 0x01	; 1
    5372:	08 ed       	ldi	r16, 0xD8	; 216
    5374:	21 e0       	ldi	r18, 0x01	; 1
    5376:	04 bf       	out	0x34, r16	; 52
    5378:	20 83       	st	Z, r18
    537a:	2f 91       	pop	r18
    537c:	0f 91       	pop	r16
    537e:	ff 91       	pop	r31
    5380:	ef 91       	pop	r30
    5382:	08 95       	ret

00005384 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    5384:	df 92       	push	r13
    5386:	ef 92       	push	r14
    5388:	ff 92       	push	r15
    538a:	0f 93       	push	r16
    538c:	1f 93       	push	r17
    538e:	e8 2e       	mov	r14, r24
    5390:	06 2f       	mov	r16, r22
    5392:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    5394:	0e 94 a7 29 	call	0x534e	; 0x534e <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5398:	e0 ec       	ldi	r30, 0xC0	; 192
    539a:	f1 e0       	ldi	r31, 0x01	; 1
    539c:	83 e3       	ldi	r24, 0x33	; 51
    539e:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    53a0:	10 e0       	ldi	r17, 0x00	; 0
    53a2:	0f 71       	andi	r16, 0x1F	; 31
    53a4:	10 70       	andi	r17, 0x00	; 0
    53a6:	ff 24       	eor	r15, r15
    53a8:	75 e0       	ldi	r23, 0x05	; 5
    53aa:	ee 0c       	add	r14, r14
    53ac:	ff 1c       	adc	r15, r15
    53ae:	7a 95       	dec	r23
    53b0:	e1 f7       	brne	.-8      	; 0x53aa <EEPROM_WriteByte+0x26>
    53b2:	0e 29       	or	r16, r14
    53b4:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    53b6:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    53b8:	81 2f       	mov	r24, r17
    53ba:	8f 71       	andi	r24, 0x1F	; 31
    53bc:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    53be:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    53c0:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    53c2:	85 e3       	ldi	r24, 0x35	; 53
    53c4:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    53c6:	ef 93       	push	r30
    53c8:	ff 93       	push	r31
    53ca:	0f 93       	push	r16
    53cc:	2f 93       	push	r18
    53ce:	eb ec       	ldi	r30, 0xCB	; 203
    53d0:	f1 e0       	ldi	r31, 0x01	; 1
    53d2:	08 ed       	ldi	r16, 0xD8	; 216
    53d4:	21 e0       	ldi	r18, 0x01	; 1
    53d6:	04 bf       	out	0x34, r16	; 52
    53d8:	20 83       	st	Z, r18
    53da:	2f 91       	pop	r18
    53dc:	0f 91       	pop	r16
    53de:	ff 91       	pop	r31
    53e0:	ef 91       	pop	r30
}
    53e2:	1f 91       	pop	r17
    53e4:	0f 91       	pop	r16
    53e6:	ff 90       	pop	r15
    53e8:	ef 90       	pop	r14
    53ea:	df 90       	pop	r13
    53ec:	08 95       	ret

000053ee <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    53ee:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    53f0:	68 2f       	mov	r22, r24
    53f2:	6f 71       	andi	r22, 0x1F	; 31
    53f4:	e5 e0       	ldi	r30, 0x05	; 5
    53f6:	96 95       	lsr	r25
    53f8:	87 95       	ror	r24
    53fa:	ea 95       	dec	r30
    53fc:	e1 f7       	brne	.-8      	; 0x53f6 <eeprom_put_char+0x8>
    53fe:	0e 94 c2 29 	call	0x5384	; 0x5384 <EEPROM_WriteByte>
}
    5402:	08 95       	ret

00005404 <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    5404:	8f 92       	push	r8
    5406:	9f 92       	push	r9
    5408:	af 92       	push	r10
    540a:	bf 92       	push	r11
    540c:	cf 92       	push	r12
    540e:	df 92       	push	r13
    5410:	ef 92       	push	r14
    5412:	ff 92       	push	r15
    5414:	0f 93       	push	r16
    5416:	df 93       	push	r29
    5418:	cf 93       	push	r28
    541a:	0f 92       	push	r0
    541c:	0f 92       	push	r0
    541e:	cd b7       	in	r28, 0x3d	; 61
    5420:	de b7       	in	r29, 0x3e	; 62
    5422:	5c 01       	movw	r10, r24
    5424:	6b 01       	movw	r12, r22
    5426:	7a 01       	movw	r14, r20
    5428:	4a 01       	movw	r8, r20
    542a:	00 e0       	ldi	r16, 0x00	; 0
    542c:	1e c0       	rjmp	.+60     	; 0x546a <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    542e:	00 23       	and	r16, r16
    5430:	19 f0       	breq	.+6      	; 0x5438 <memcpy_to_eeprom_with_checksum+0x34>
    5432:	21 e0       	ldi	r18, 0x01	; 1
    5434:	30 e0       	ldi	r19, 0x00	; 0
    5436:	08 c0       	rjmp	.+16     	; 0x5448 <memcpy_to_eeprom_with_checksum+0x44>
    5438:	20 2f       	mov	r18, r16
    543a:	33 27       	eor	r19, r19
    543c:	27 fd       	sbrc	r18, 7
    543e:	30 95       	com	r19
    5440:	22 27       	eor	r18, r18
    5442:	33 0f       	add	r19, r19
    5444:	22 1f       	adc	r18, r18
    5446:	33 27       	eor	r19, r19
    checksum += *source;
    5448:	f6 01       	movw	r30, r12
    544a:	61 91       	ld	r22, Z+
    544c:	6f 01       	movw	r12, r30
    544e:	06 2f       	mov	r16, r22
    5450:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    5452:	9c 01       	movw	r18, r24
    5454:	2f 5f       	subi	r18, 0xFF	; 255
    5456:	3f 4f       	sbci	r19, 0xFF	; 255
    5458:	29 83       	std	Y+1, r18	; 0x01
    545a:	3a 83       	std	Y+2, r19	; 0x02
    545c:	0e 94 f7 29 	call	0x53ee	; 0x53ee <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    5460:	08 94       	sec
    5462:	81 08       	sbc	r8, r1
    5464:	91 08       	sbc	r9, r1
    5466:	89 81       	ldd	r24, Y+1	; 0x01
    5468:	9a 81       	ldd	r25, Y+2	; 0x02
    546a:	81 14       	cp	r8, r1
    546c:	91 04       	cpc	r9, r1
    546e:	f9 f6       	brne	.-66     	; 0x542e <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    5470:	c7 01       	movw	r24, r14
    5472:	8a 0d       	add	r24, r10
    5474:	9b 1d       	adc	r25, r11
    5476:	60 2f       	mov	r22, r16
    5478:	0e 94 f7 29 	call	0x53ee	; 0x53ee <eeprom_put_char>
}
    547c:	0f 90       	pop	r0
    547e:	0f 90       	pop	r0
    5480:	cf 91       	pop	r28
    5482:	df 91       	pop	r29
    5484:	0f 91       	pop	r16
    5486:	ff 90       	pop	r15
    5488:	ef 90       	pop	r14
    548a:	df 90       	pop	r13
    548c:	cf 90       	pop	r12
    548e:	bf 90       	pop	r11
    5490:	af 90       	pop	r10
    5492:	9f 90       	pop	r9
    5494:	8f 90       	pop	r8
    5496:	08 95       	ret

00005498 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    5498:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    549a:	e0 ec       	ldi	r30, 0xC0	; 192
    549c:	f1 e0       	ldi	r31, 0x01	; 1
    549e:	80 91 cf 01 	lds	r24, 0x01CF
    54a2:	87 fd       	sbrc	r24, 7
    54a4:	fa cf       	rjmp	.-12     	; 0x549a <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    54a6:	83 e3       	ldi	r24, 0x33	; 51
    54a8:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    54aa:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    54ae:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    54b0:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    54b2:	64 83       	std	Z+4, r22	; 0x04
}
    54b4:	08 95       	ret

000054b6 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    54b6:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    54b8:	e0 ec       	ldi	r30, 0xC0	; 192
    54ba:	f1 e0       	ldi	r31, 0x01	; 1
    54bc:	80 91 cf 01 	lds	r24, 0x01CF
    54c0:	87 fd       	sbrc	r24, 7
    54c2:	fa cf       	rjmp	.-12     	; 0x54b8 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    54c4:	83 e3       	ldi	r24, 0x33	; 51
    54c6:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    54c8:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    54ca:	12 82       	std	Z+2, r1	; 0x02
    54cc:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    54ce:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    54d2:	8d 91       	ld	r24, X+
    54d4:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    54d6:	9f 5f       	subi	r25, 0xFF	; 255
    54d8:	90 32       	cpi	r25, 0x20	; 32
    54da:	c9 f7       	brne	.-14     	; 0x54ce <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    54dc:	08 95       	ret

000054de <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    54de:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    54e0:	e0 ec       	ldi	r30, 0xC0	; 192
    54e2:	f1 e0       	ldi	r31, 0x01	; 1
    54e4:	80 91 cf 01 	lds	r24, 0x01CF
    54e8:	87 fd       	sbrc	r24, 7
    54ea:	fa cf       	rjmp	.-12     	; 0x54e0 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    54ec:	89 2f       	mov	r24, r25
    54ee:	90 e0       	ldi	r25, 0x00	; 0
    54f0:	a5 e0       	ldi	r26, 0x05	; 5
    54f2:	88 0f       	add	r24, r24
    54f4:	99 1f       	adc	r25, r25
    54f6:	aa 95       	dec	r26
    54f8:	e1 f7       	brne	.-8      	; 0x54f2 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    54fa:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    54fe:	89 2f       	mov	r24, r25
    5500:	8f 71       	andi	r24, 0x1F	; 31
    5502:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5504:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5506:	85 e3       	ldi	r24, 0x35	; 53
    5508:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    550a:	ef 93       	push	r30
    550c:	ff 93       	push	r31
    550e:	0f 93       	push	r16
    5510:	2f 93       	push	r18
    5512:	eb ec       	ldi	r30, 0xCB	; 203
    5514:	f1 e0       	ldi	r31, 0x01	; 1
    5516:	08 ed       	ldi	r16, 0xD8	; 216
    5518:	21 e0       	ldi	r18, 0x01	; 1
    551a:	04 bf       	out	0x34, r16	; 52
    551c:	20 83       	st	Z, r18
    551e:	2f 91       	pop	r18
    5520:	0f 91       	pop	r16
    5522:	ff 91       	pop	r31
    5524:	ef 91       	pop	r30
}
    5526:	08 95       	ret

00005528 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    5528:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    552a:	e0 ec       	ldi	r30, 0xC0	; 192
    552c:	f1 e0       	ldi	r31, 0x01	; 1
    552e:	80 91 cf 01 	lds	r24, 0x01CF
    5532:	87 fd       	sbrc	r24, 7
    5534:	fa cf       	rjmp	.-12     	; 0x552a <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5536:	89 2f       	mov	r24, r25
    5538:	90 e0       	ldi	r25, 0x00	; 0
    553a:	b5 e0       	ldi	r27, 0x05	; 5
    553c:	88 0f       	add	r24, r24
    553e:	99 1f       	adc	r25, r25
    5540:	ba 95       	dec	r27
    5542:	e1 f7       	brne	.-8      	; 0x553c <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5544:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5548:	89 2f       	mov	r24, r25
    554a:	8f 71       	andi	r24, 0x1F	; 31
    554c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    554e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    5550:	82 e3       	ldi	r24, 0x32	; 50
    5552:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5554:	ef 93       	push	r30
    5556:	ff 93       	push	r31
    5558:	0f 93       	push	r16
    555a:	2f 93       	push	r18
    555c:	eb ec       	ldi	r30, 0xCB	; 203
    555e:	f1 e0       	ldi	r31, 0x01	; 1
    5560:	08 ed       	ldi	r16, 0xD8	; 216
    5562:	21 e0       	ldi	r18, 0x01	; 1
    5564:	04 bf       	out	0x34, r16	; 52
    5566:	20 83       	st	Z, r18
    5568:	2f 91       	pop	r18
    556a:	0f 91       	pop	r16
    556c:	ff 91       	pop	r31
    556e:	ef 91       	pop	r30
}
    5570:	08 95       	ret

00005572 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    5572:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5574:	e0 ec       	ldi	r30, 0xC0	; 192
    5576:	f1 e0       	ldi	r31, 0x01	; 1
    5578:	80 91 cf 01 	lds	r24, 0x01CF
    557c:	87 fd       	sbrc	r24, 7
    557e:	fa cf       	rjmp	.-12     	; 0x5574 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5580:	89 2f       	mov	r24, r25
    5582:	90 e0       	ldi	r25, 0x00	; 0
    5584:	25 e0       	ldi	r18, 0x05	; 5
    5586:	88 0f       	add	r24, r24
    5588:	99 1f       	adc	r25, r25
    558a:	2a 95       	dec	r18
    558c:	e1 f7       	brne	.-8      	; 0x5586 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    558e:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5592:	89 2f       	mov	r24, r25
    5594:	8f 71       	andi	r24, 0x1F	; 31
    5596:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5598:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    559a:	84 e3       	ldi	r24, 0x34	; 52
    559c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    559e:	ef 93       	push	r30
    55a0:	ff 93       	push	r31
    55a2:	0f 93       	push	r16
    55a4:	2f 93       	push	r18
    55a6:	eb ec       	ldi	r30, 0xCB	; 203
    55a8:	f1 e0       	ldi	r31, 0x01	; 1
    55aa:	08 ed       	ldi	r16, 0xD8	; 216
    55ac:	21 e0       	ldi	r18, 0x01	; 1
    55ae:	04 bf       	out	0x34, r16	; 52
    55b0:	20 83       	st	Z, r18
    55b2:	2f 91       	pop	r18
    55b4:	0f 91       	pop	r16
    55b6:	ff 91       	pop	r31
    55b8:	ef 91       	pop	r30
}
    55ba:	08 95       	ret

000055bc <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    55bc:	80 91 cf 01 	lds	r24, 0x01CF
    55c0:	87 fd       	sbrc	r24, 7
    55c2:	fc cf       	rjmp	.-8      	; 0x55bc <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    55c4:	80 e3       	ldi	r24, 0x30	; 48
    55c6:	e0 ec       	ldi	r30, 0xC0	; 192
    55c8:	f1 e0       	ldi	r31, 0x01	; 1
    55ca:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    55cc:	ef 93       	push	r30
    55ce:	ff 93       	push	r31
    55d0:	0f 93       	push	r16
    55d2:	2f 93       	push	r18
    55d4:	eb ec       	ldi	r30, 0xCB	; 203
    55d6:	f1 e0       	ldi	r31, 0x01	; 1
    55d8:	08 ed       	ldi	r16, 0xD8	; 216
    55da:	21 e0       	ldi	r18, 0x01	; 1
    55dc:	04 bf       	out	0x34, r16	; 52
    55de:	20 83       	st	Z, r18
    55e0:	2f 91       	pop	r18
    55e2:	0f 91       	pop	r16
    55e4:	ff 91       	pop	r31
    55e6:	ef 91       	pop	r30
}
    55e8:	08 95       	ret

000055ea <tg_reset_source>:
 * tg_reset_source()  Reset source to default input device
 */

void tg_reset_source()
{
	_tg_set_source(tg.default_src);
    55ea:	80 91 8e 21 	lds	r24, 0x218E
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    55ee:	80 93 8d 21 	sts	0x218D, r24
	if (tg.src == XIO_DEV_PGM) {
    55f2:	83 30       	cpi	r24, 0x03	; 3
    55f4:	21 f4       	brne	.+8      	; 0x55fe <tg_reset_source+0x14>
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    55f6:	80 91 8a 21 	lds	r24, 0x218A
    55fa:	8e 7f       	andi	r24, 0xFE	; 254
    55fc:	03 c0       	rjmp	.+6      	; 0x5604 <tg_reset_source+0x1a>
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    55fe:	80 91 8a 21 	lds	r24, 0x218A
    5602:	81 60       	ori	r24, 0x01	; 1
    5604:	80 93 8a 21 	sts	0x218A, r24
    5608:	08 95       	ret

0000560a <tg_print_status>:
	tgStatusMsg20
};

void tg_print_status(const uint8_t status_code, const char *textbuf)
{
	switch (status_code) {		// don't send messages for these status codes
    560a:	84 30       	cpi	r24, 0x04	; 4
    560c:	28 f4       	brcc	.+10     	; 0x5618 <tg_print_status+0xe>
    560e:	82 30       	cpi	r24, 0x02	; 2
    5610:	28 f5       	brcc	.+74     	; 0x565c <tg_print_status+0x52>
    5612:	88 23       	and	r24, r24
    5614:	19 f1       	breq	.+70     	; 0x565c <tg_print_status+0x52>
    5616:	02 c0       	rjmp	.+4      	; 0x561c <tg_print_status+0x12>
    5618:	8b 30       	cpi	r24, 0x0B	; 11
    561a:	01 f1       	breq	.+64     	; 0x565c <tg_print_status+0x52>
		case TG_OK: return;
		case TG_EAGAIN: return;
		case TG_NOOP: return;
		case TG_QUIT: return;
	}
	printf_P(PSTR("%S: %s\n"),(PGM_P)pgm_read_word(&tgStatusStrings[status_code]), textbuf);
    561c:	e8 2f       	mov	r30, r24
    561e:	f0 e0       	ldi	r31, 0x00	; 0
    5620:	ee 0f       	add	r30, r30
    5622:	ff 1f       	adc	r31, r31
    5624:	ee 5a       	subi	r30, 0xAE	; 174
    5626:	f5 4e       	sbci	r31, 0xE5	; 229
    5628:	25 91       	lpm	r18, Z+
    562a:	34 91       	lpm	r19, Z+
    562c:	00 d0       	rcall	.+0      	; 0x562e <tg_print_status+0x24>
    562e:	00 d0       	rcall	.+0      	; 0x5630 <tg_print_status+0x26>
    5630:	ed b7       	in	r30, 0x3d	; 61
    5632:	fe b7       	in	r31, 0x3e	; 62
    5634:	31 96       	adiw	r30, 0x01	; 1
    5636:	8c e7       	ldi	r24, 0x7C	; 124
    5638:	9a e1       	ldi	r25, 0x1A	; 26
    563a:	ad b7       	in	r26, 0x3d	; 61
    563c:	be b7       	in	r27, 0x3e	; 62
    563e:	11 96       	adiw	r26, 0x01	; 1
    5640:	8d 93       	st	X+, r24
    5642:	9c 93       	st	X, r25
    5644:	12 97       	sbiw	r26, 0x02	; 2
    5646:	22 83       	std	Z+2, r18	; 0x02
    5648:	33 83       	std	Z+3, r19	; 0x03
    564a:	64 83       	std	Z+4, r22	; 0x04
    564c:	75 83       	std	Z+5, r23	; 0x05
    564e:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
    5652:	8d b7       	in	r24, 0x3d	; 61
    5654:	9e b7       	in	r25, 0x3e	; 62
    5656:	06 96       	adiw	r24, 0x06	; 6
    5658:	8d bf       	out	0x3d, r24	; 61
    565a:	9e bf       	out	0x3e, r25	; 62
    565c:	08 95       	ret

0000565e <tg_init>:
 */

void tg_init() 
{
	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
    565e:	81 e0       	ldi	r24, 0x01	; 1
    5660:	80 93 8e 21 	sts	0x218E, r24
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    5664:	ee e8       	ldi	r30, 0x8E	; 142
    5666:	f1 e2       	ldi	r31, 0x21	; 33
    5668:	80 93 8d 21 	sts	0x218D, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    566c:	34 97       	sbiw	r30, 0x04	; 4
    566e:	80 81       	ld	r24, Z
    5670:	81 60       	ori	r24, 0x01	; 1
    5672:	80 83       	st	Z, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5674:	10 92 8c 21 	sts	0x218C, r1
{
	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
	_tg_set_source(tg.default_src);			// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode
	tg.state = TG_READY_UNPROMPTED;
    5678:	10 92 89 21 	sts	0x2189, r1

	// version string
	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    567c:	00 d0       	rcall	.+0      	; 0x567e <tg_init+0x20>
    567e:	0f 92       	push	r0
    5680:	81 eb       	ldi	r24, 0xB1	; 177
    5682:	9a e1       	ldi	r25, 0x1A	; 26
    5684:	ed b7       	in	r30, 0x3d	; 61
    5686:	fe b7       	in	r31, 0x3e	; 62
    5688:	81 83       	std	Z+1, r24	; 0x01
    568a:	92 83       	std	Z+2, r25	; 0x02
    568c:	87 ea       	ldi	r24, 0xA7	; 167
    568e:	9a e1       	ldi	r25, 0x1A	; 26
    5690:	83 83       	std	Z+3, r24	; 0x03
    5692:	94 83       	std	Z+4, r25	; 0x04
    5694:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
    5698:	0f 90       	pop	r0
    569a:	0f 90       	pop	r0
    569c:	0f 90       	pop	r0
    569e:	0f 90       	pop	r0
}
    56a0:	08 95       	ret

000056a2 <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    56a2:	cf 93       	push	r28
    56a4:	df 93       	push	r29
    56a6:	ec 01       	movw	r28, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    56a8:	80 91 8c 21 	lds	r24, 0x218C
    56ac:	88 23       	and	r24, r24
    56ae:	09 f0       	breq	.+2      	; 0x56b2 <tg_parser+0x10>
    56b0:	43 c0       	rjmp	.+134    	; 0x5738 <tg_parser+0x96>
		switch (toupper(buf[0])) {
    56b2:	88 81       	ld	r24, Y
    56b4:	90 e0       	ldi	r25, 0x00	; 0
    56b6:	0e 94 d5 47 	call	0x8faa	; 0x8faa <toupper>
    56ba:	86 34       	cpi	r24, 0x46	; 70
    56bc:	91 05       	cpc	r25, r1
    56be:	41 f1       	breq	.+80     	; 0x5710 <tg_parser+0x6e>
    56c0:	87 34       	cpi	r24, 0x47	; 71
    56c2:	91 05       	cpc	r25, r1
    56c4:	84 f4       	brge	.+32     	; 0x56e6 <tg_parser+0x44>
    56c6:	83 34       	cpi	r24, 0x43	; 67
    56c8:	91 05       	cpc	r25, r1
    56ca:	e1 f0       	breq	.+56     	; 0x5704 <tg_parser+0x62>
    56cc:	84 34       	cpi	r24, 0x44	; 68
    56ce:	91 05       	cpc	r25, r1
    56d0:	34 f4       	brge	.+12     	; 0x56de <tg_parser+0x3c>
    56d2:	88 32       	cpi	r24, 0x28	; 40
    56d4:	91 05       	cpc	r25, r1
    56d6:	a1 f0       	breq	.+40     	; 0x5700 <tg_parser+0x5e>
    56d8:	cf 97       	sbiw	r24, 0x3f	; 63
    56da:	61 f5       	brne	.+88     	; 0x5734 <tg_parser+0x92>
    56dc:	13 c0       	rjmp	.+38     	; 0x5704 <tg_parser+0x62>
    56de:	84 34       	cpi	r24, 0x44	; 68
    56e0:	91 05       	cpc	r25, r1
    56e2:	41 f5       	brne	.+80     	; 0x5734 <tg_parser+0x92>
    56e4:	13 c0       	rjmp	.+38     	; 0x570c <tg_parser+0x6a>
    56e6:	8f 34       	cpi	r24, 0x4F	; 79
    56e8:	91 05       	cpc	r25, r1
    56ea:	3c f4       	brge	.+14     	; 0x56fa <tg_parser+0x58>
    56ec:	8d 34       	cpi	r24, 0x4D	; 77
    56ee:	91 05       	cpc	r25, r1
    56f0:	3c f4       	brge	.+14     	; 0x5700 <tg_parser+0x5e>
    56f2:	87 34       	cpi	r24, 0x47	; 71
    56f4:	91 05       	cpc	r25, r1
    56f6:	f1 f4       	brne	.+60     	; 0x5734 <tg_parser+0x92>
    56f8:	03 c0       	rjmp	.+6      	; 0x5700 <tg_parser+0x5e>
    56fa:	8c 35       	cpi	r24, 0x5C	; 92
    56fc:	91 05       	cpc	r25, r1
    56fe:	d1 f4       	brne	.+52     	; 0x5734 <tg_parser+0x92>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5700:	82 e0       	ldi	r24, 0x02	; 2
    5702:	01 c0       	rjmp	.+2      	; 0x5706 <tg_parser+0x64>
int tg_parser(char * buf)
{
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
		switch (toupper(buf[0])) {
			case 'G': case 'M': case 'N': case '(': case '\\': _tg_set_mode(TG_GCODE_MODE); break;
    5704:	81 e0       	ldi	r24, 0x01	; 1
    5706:	80 93 8c 21 	sts	0x218C, r24
    570a:	16 c0       	rjmp	.+44     	; 0x5738 <tg_parser+0x96>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    570c:	83 e0       	ldi	r24, 0x03	; 3
    570e:	fb cf       	rjmp	.-10     	; 0x5706 <tg_parser+0x64>
//	xio_open_pgm(PGMFILE(&square_circle_test100));
//	xio_open_pgm(PGMFILE(&spiral_test50a));
//	xio_open_pgm(PGMFILE(&spiral_test5));
//	xio_open_pgm(PGMFILE(&dwell_test2));

	xio_open_pgm(PGMFILE(&contraptor_circle)); 	// contraptor circle test
    5710:	83 ef       	ldi	r24, 0xF3	; 243
    5712:	94 e1       	ldi	r25, 0x14	; 20
    5714:	0e 94 f6 34 	call	0x69ec	; 0x69ec <xio_open_pgm>
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    5718:	83 e0       	ldi	r24, 0x03	; 3
    571a:	80 93 8d 21 	sts	0x218D, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    571e:	80 91 8a 21 	lds	r24, 0x218A
    5722:	8e 7f       	andi	r24, 0xFE	; 254
    5724:	80 93 8a 21 	sts	0x218A, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5728:	82 e0       	ldi	r24, 0x02	; 2
    572a:	80 93 8c 21 	sts	0x218C, r24
    572e:	20 e0       	ldi	r18, 0x00	; 0
    5730:	30 e0       	ldi	r19, 0x00	; 0
    5732:	1d c0       	rjmp	.+58     	; 0x576e <tg_parser+0xcc>
	if (tg.mode == TG_CONTROL_MODE) {
		switch (toupper(buf[0])) {
			case 'G': case 'M': case 'N': case '(': case '\\': _tg_set_mode(TG_GCODE_MODE); break;
			case 'C': case '?': _tg_set_mode(TG_CONFIG_MODE); break;
			case 'D': _tg_set_mode(TG_DIRECT_DRIVE_MODE); break;
			case 'F': return (_tg_test_file());
    5734:	10 92 8c 21 	sts	0x218C, r1
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    5738:	10 92 8b 21 	sts	0x218B, r1
	switch (tg.mode) {
    573c:	80 91 8c 21 	lds	r24, 0x218C
    5740:	82 30       	cpi	r24, 0x02	; 2
    5742:	41 f0       	breq	.+16     	; 0x5754 <tg_parser+0xb2>
    5744:	83 30       	cpi	r24, 0x03	; 3
    5746:	51 f0       	breq	.+20     	; 0x575c <tg_parser+0xba>
    5748:	81 30       	cpi	r24, 0x01	; 1
    574a:	69 f4       	brne	.+26     	; 0x5766 <tg_parser+0xc4>
		case TG_CONFIG_MODE: tg.status = cfg_parse(buf); break;
    574c:	ce 01       	movw	r24, r28
    574e:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <cfg_parse>
    5752:	07 c0       	rjmp	.+14     	; 0x5762 <tg_parser+0xc0>
		case TG_GCODE_MODE: tg.status = gc_gcode_parser(buf); break;
    5754:	ce 01       	movw	r24, r28
    5756:	0e 94 90 15 	call	0x2b20	; 0x2b20 <gc_gcode_parser>
    575a:	03 c0       	rjmp	.+6      	; 0x5762 <tg_parser+0xc0>
		case TG_DIRECT_DRIVE_MODE: tg.status = dd_parser(buf); break;
    575c:	ce 01       	movw	r24, r28
    575e:	0e 94 28 2c 	call	0x5850	; 0x5850 <dd_parser>
    5762:	80 93 8b 21 	sts	0x218B, r24
	}
	return (tg.status);
    5766:	80 91 8b 21 	lds	r24, 0x218B
    576a:	28 2f       	mov	r18, r24
    576c:	30 e0       	ldi	r19, 0x00	; 0
}
    576e:	c9 01       	movw	r24, r18
    5770:	df 91       	pop	r29
    5772:	cf 91       	pop	r28
    5774:	08 95       	ret

00005776 <tg_controller>:
 */

void tg_controller()
{
	// top priority tasks
	st_execute_move();
    5776:	0e 94 ba 24 	call	0x4974	; 0x4974 <st_execute_move>

	// medium priority tasks
	switch (mc_line_continue()) {
    577a:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <mc_line_continue>
    577e:	00 97       	sbiw	r24, 0x00	; 0
    5780:	51 f0       	breq	.+20     	; 0x5796 <tg_controller+0x20>
    5782:	02 97       	sbiw	r24, 0x02	; 2
    5784:	09 f4       	brne	.+2      	; 0x5788 <tg_controller+0x12>
    5786:	08 95       	ret
		case (TG_EAGAIN): return;
		case (TG_OK): tg.state = TG_READY_UNPROMPTED; return;
	}

	switch (mc_arc_continue()) {
    5788:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <mc_arc_continue>
    578c:	00 97       	sbiw	r24, 0x00	; 0
    578e:	19 f0       	breq	.+6      	; 0x5796 <tg_controller+0x20>
    5790:	02 97       	sbiw	r24, 0x02	; 2
    5792:	21 f4       	brne	.+8      	; 0x579c <tg_controller+0x26>
    5794:	08 95       	ret
		case (TG_EAGAIN): return;
		case (TG_OK): tg.state = TG_READY_UNPROMPTED; return;
    5796:	10 92 89 21 	sts	0x2189, r1
    579a:	08 95       	ret
 */

static int _tg_read_next_line()
{
	// read input line or return if not a completed line
	if ((tg.status = xio_readln(tg.src, tg.buf, sizeof(tg.buf))) == TG_OK) {
    579c:	80 91 8d 21 	lds	r24, 0x218D
    57a0:	60 e9       	ldi	r22, 0x90	; 144
    57a2:	71 e2       	ldi	r23, 0x21	; 33
    57a4:	48 e2       	ldi	r20, 0x28	; 40
    57a6:	0e 94 7f 28 	call	0x50fe	; 0x50fe <xio_readln>
    57aa:	80 93 8b 21 	sts	0x218B, r24
    57ae:	88 23       	and	r24, r24
    57b0:	31 f4       	brne	.+12     	; 0x57be <tg_controller+0x48>
		tg.status = tg_parser(tg.buf);				// dispatch to parser
    57b2:	80 e9       	ldi	r24, 0x90	; 144
    57b4:	91 e2       	ldi	r25, 0x21	; 33
    57b6:	0e 94 51 2b 	call	0x56a2	; 0x56a2 <tg_parser>
    57ba:	80 93 8b 21 	sts	0x218B, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    57be:	80 91 8b 21 	lds	r24, 0x218B
    57c2:	84 30       	cpi	r24, 0x04	; 4
    57c4:	18 f4       	brcc	.+6      	; 0x57cc <tg_controller+0x56>
    57c6:	82 30       	cpi	r24, 0x02	; 2
    57c8:	c0 f4       	brcc	.+48     	; 0x57fa <tg_controller+0x84>
    57ca:	15 c0       	rjmp	.+42     	; 0x57f6 <tg_controller+0x80>
    57cc:	85 30       	cpi	r24, 0x05	; 5
    57ce:	29 f0       	breq	.+10     	; 0x57da <tg_controller+0x64>
    57d0:	8b 30       	cpi	r24, 0x0B	; 11
    57d2:	89 f4       	brne	.+34     	; 0x57f6 <tg_controller+0x80>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    57d4:	10 92 8c 21 	sts	0x218C, r1
    57d8:	0e c0       	rjmp	.+28     	; 0x57f6 <tg_controller+0x80>
			_tg_set_mode(TG_CONTROL_MODE);
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
    57da:	0f 92       	push	r0
    57dc:	0f 92       	push	r0
    57de:	84 e8       	ldi	r24, 0x84	; 132
    57e0:	9a e1       	ldi	r25, 0x1A	; 26
    57e2:	ed b7       	in	r30, 0x3d	; 61
    57e4:	fe b7       	in	r31, 0x3e	; 62
    57e6:	81 83       	std	Z+1, r24	; 0x01
    57e8:	92 83       	std	Z+2, r25	; 0x02
    57ea:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
			tg_reset_source();						// reset to default src
    57ee:	0f 90       	pop	r0
    57f0:	0f 90       	pop	r0
    57f2:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <tg_reset_source>
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		default: {
			tg.state = TG_READY_UNPROMPTED;			// traps various error returns
    57f6:	10 92 89 21 	sts	0x2189, r1
		}
	}
	return (tg.status);
    57fa:	80 91 8b 21 	lds	r24, 0x218B
		case (TG_EAGAIN): return;
		case (TG_OK): tg.state = TG_READY_UNPROMPTED; return;
	}

	// low priority tasks
	if ((tg.status = _tg_read_next_line()) == TG_EAGAIN) {	// input line
    57fe:	82 30       	cpi	r24, 0x02	; 2
    5800:	29 f1       	breq	.+74     	; 0x584c <tg_controller+0xd6>
	tgModeStringDirect
};

void _tg_prompt()
{
	if (tg.state == TG_READY_UNPROMPTED) {
    5802:	80 91 89 21 	lds	r24, 0x2189
    5806:	88 23       	and	r24, r24
    5808:	09 f5       	brne	.+66     	; 0x584c <tg_controller+0xd6>
		if (tg.flags && TG_FLAG_PROMPTS_bm) {
    580a:	80 91 8a 21 	lds	r24, 0x218A
    580e:	88 23       	and	r24, r24
    5810:	d1 f0       	breq	.+52     	; 0x5846 <tg_controller+0xd0>
			printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5812:	80 91 8c 21 	lds	r24, 0x218C
    5816:	e8 2f       	mov	r30, r24
    5818:	f0 e0       	ldi	r31, 0x00	; 0
    581a:	ee 0f       	add	r30, r30
    581c:	ff 1f       	adc	r31, r31
    581e:	eb 5f       	subi	r30, 0xFB	; 251
    5820:	f6 4e       	sbci	r31, 0xE6	; 230
    5822:	25 91       	lpm	r18, Z+
    5824:	34 91       	lpm	r19, Z+
    5826:	00 d0       	rcall	.+0      	; 0x5828 <tg_controller+0xb2>
    5828:	0f 92       	push	r0
    582a:	89 e9       	ldi	r24, 0x99	; 153
    582c:	9a e1       	ldi	r25, 0x1A	; 26
    582e:	ed b7       	in	r30, 0x3d	; 61
    5830:	fe b7       	in	r31, 0x3e	; 62
    5832:	81 83       	std	Z+1, r24	; 0x01
    5834:	92 83       	std	Z+2, r25	; 0x02
    5836:	23 83       	std	Z+3, r18	; 0x03
    5838:	34 83       	std	Z+4, r19	; 0x04
    583a:	0e 94 77 48 	call	0x90ee	; 0x90ee <printf_P>
    583e:	0f 90       	pop	r0
    5840:	0f 90       	pop	r0
    5842:	0f 90       	pop	r0
    5844:	0f 90       	pop	r0
		}
		tg.state = TG_READY_PROMPTED;
    5846:	81 e0       	ldi	r24, 0x01	; 1
    5848:	80 93 89 21 	sts	0x2189, r24
    584c:	08 95       	ret

0000584e <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    584e:	08 95       	ret

00005850 <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    5850:	80 e0       	ldi	r24, 0x00	; 0
    5852:	90 e0       	ldi	r25, 0x00	; 0
    5854:	08 95       	ret

00005856 <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    5856:	10 92 d0 21 	sts	0x21D0, r1
	mv.move_buffer_tail = 0;
    585a:	10 92 d1 21 	sts	0x21D1, r1
}
    585e:	08 95       	ret

00005860 <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    5860:	90 91 d0 21 	lds	r25, 0x21D0
    5864:	80 91 d1 21 	lds	r24, 0x21D1
    5868:	98 17       	cp	r25, r24
    586a:	19 f4       	brne	.+6      	; 0x5872 <mv_dequeue_move_buffer+0x12>
    586c:	20 e0       	ldi	r18, 0x00	; 0
    586e:	30 e0       	ldi	r19, 0x00	; 0
    5870:	17 c0       	rjmp	.+46     	; 0x58a0 <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    5872:	90 91 d1 21 	lds	r25, 0x21D1
    5876:	8e e1       	ldi	r24, 0x1E	; 30
    5878:	98 9f       	mul	r25, r24
    587a:	90 01       	movw	r18, r0
    587c:	11 24       	eor	r1, r1
    587e:	2c 52       	subi	r18, 0x2C	; 44
    5880:	3e 4d       	sbci	r19, 0xDE	; 222
    5882:	20 93 d2 21 	sts	0x21D2, r18
    5886:	30 93 d3 21 	sts	0x21D3, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    588a:	80 91 d1 21 	lds	r24, 0x21D1
    588e:	8f 5f       	subi	r24, 0xFF	; 255
    5890:	80 93 d1 21 	sts	0x21D1, r24
    5894:	80 91 d1 21 	lds	r24, 0x21D1
    5898:	83 30       	cpi	r24, 0x03	; 3
    589a:	10 f0       	brcs	.+4      	; 0x58a0 <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    589c:	10 92 d1 21 	sts	0x21D1, r1
	}
	return (mv.p); 
}
    58a0:	c9 01       	movw	r24, r18
    58a2:	08 95       	ret

000058a4 <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    58a4:	90 91 d0 21 	lds	r25, 0x21D0
    58a8:	9f 5f       	subi	r25, 0xFF	; 255
    58aa:	93 30       	cpi	r25, 0x03	; 3
    58ac:	08 f0       	brcs	.+2      	; 0x58b0 <mv_test_move_buffer_full+0xc>
    58ae:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    58b0:	80 91 d1 21 	lds	r24, 0x21D1
    58b4:	20 e0       	ldi	r18, 0x00	; 0
    58b6:	89 17       	cp	r24, r25
    58b8:	09 f4       	brne	.+2      	; 0x58bc <mv_test_move_buffer_full+0x18>
    58ba:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    58bc:	82 2f       	mov	r24, r18
    58be:	08 95       	ret

000058c0 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    58c0:	0b c0       	rjmp	.+22     	; 0x58d8 <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    58c2:	80 91 48 00 	lds	r24, 0x0048
    58c6:	81 60       	ori	r24, 0x01	; 1
    58c8:	80 93 48 00 	sts	0x0048, r24
    58cc:	88 95       	sleep
    58ce:	80 91 48 00 	lds	r24, 0x0048
    58d2:	8e 7f       	andi	r24, 0xFE	; 254
    58d4:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    58d8:	90 91 d1 21 	lds	r25, 0x21D1
    58dc:	80 91 d0 21 	lds	r24, 0x21D0
    58e0:	98 17       	cp	r25, r24
    58e2:	79 f7       	brne	.-34     	; 0x58c2 <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    58e4:	08 95       	ret

000058e6 <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    58e6:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    58e8:	80 91 d0 21 	lds	r24, 0x21D0
    58ec:	80 93 d1 21 	sts	0x21D1, r24
	mv.p = NULL;
    58f0:	10 92 d2 21 	sts	0x21D2, r1
    58f4:	10 92 d3 21 	sts	0x21D3, r1
	sei();
    58f8:	78 94       	sei
}
    58fa:	08 95       	ret

000058fc <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    58fc:	2f 92       	push	r2
    58fe:	3f 92       	push	r3
    5900:	4f 92       	push	r4
    5902:	5f 92       	push	r5
    5904:	6f 92       	push	r6
    5906:	7f 92       	push	r7
    5908:	8f 92       	push	r8
    590a:	9f 92       	push	r9
    590c:	af 92       	push	r10
    590e:	bf 92       	push	r11
    5910:	cf 92       	push	r12
    5912:	df 92       	push	r13
    5914:	ef 92       	push	r14
    5916:	ff 92       	push	r15
    5918:	0f 93       	push	r16
    591a:	1f 93       	push	r17
    591c:	df 93       	push	r29
    591e:	cf 93       	push	r28
    5920:	cd b7       	in	r28, 0x3d	; 61
    5922:	de b7       	in	r29, 0x3e	; 62
    5924:	2b 97       	sbiw	r28, 0x0b	; 11
    5926:	cd bf       	out	0x3d, r28	; 61
    5928:	de bf       	out	0x3e, r29	; 62
    592a:	1b 01       	movw	r2, r22
    592c:	2c 01       	movw	r4, r24
    592e:	2a 83       	std	Y+2, r18	; 0x02
    5930:	3b 83       	std	Y+3, r19	; 0x03
    5932:	4c 83       	std	Y+4, r20	; 0x04
    5934:	5d 83       	std	Y+5, r21	; 0x05
    5936:	ee 82       	std	Y+6, r14	; 0x06
    5938:	ff 82       	std	Y+7, r15	; 0x07
    593a:	08 87       	std	Y+8, r16	; 0x08
    593c:	19 87       	std	Y+9, r17	; 0x09
	uint8_t next_buffer_head;
	uint8_t i;

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    593e:	80 91 d0 21 	lds	r24, 0x21D0
    5942:	8f 5f       	subi	r24, 0xFF	; 255
    5944:	89 83       	std	Y+1, r24	; 0x01
    5946:	83 30       	cpi	r24, 0x03	; 3
    5948:	08 f0       	brcs	.+2      	; 0x594c <mv_queue_move_buffer+0x50>
    594a:	19 82       	std	Y+1, r1	; 0x01
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    594c:	80 91 d1 21 	lds	r24, 0x21D1
    5950:	99 81       	ldd	r25, Y+1	; 0x01
    5952:	89 17       	cp	r24, r25
    5954:	11 f4       	brne	.+4      	; 0x595a <mv_queue_move_buffer+0x5e>
    5956:	8a e0       	ldi	r24, 0x0A	; 10
    5958:	20 c2       	rjmp	.+1088   	; 0x5d9a <mv_queue_move_buffer+0x49e>
		return (TG_BUFFER_FULL_NON_FATAL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    595a:	e0 91 d0 21 	lds	r30, 0x21D0
    595e:	8e e1       	ldi	r24, 0x1E	; 30
    5960:	e8 9f       	mul	r30, r24
    5962:	f0 01       	movw	r30, r0
    5964:	11 24       	eor	r1, r1
    5966:	ec 52       	subi	r30, 0x2C	; 44
    5968:	fe 4d       	sbci	r31, 0xDE	; 222
    596a:	e0 93 d2 21 	sts	0x21D2, r30
    596e:	f0 93 d3 21 	sts	0x21D3, r31
	memset(mv.p, 0, sizeof(struct mvMove));
    5972:	df 01       	movw	r26, r30
    5974:	1d 92       	st	X+, r1
    5976:	8a 95       	dec	r24
    5978:	e9 f7       	brne	.-6      	; 0x5974 <mv_queue_move_buffer+0x78>
	mv.p->a[X].steps = steps_x;
    597a:	80 90 d2 21 	lds	r8, 0x21D2
    597e:	90 90 d3 21 	lds	r9, 0x21D3
    5982:	f4 01       	movw	r30, r8
    5984:	20 82       	st	Z, r2
    5986:	31 82       	std	Z+1, r3	; 0x01
    5988:	42 82       	std	Z+2, r4	; 0x02
    598a:	53 82       	std	Z+3, r5	; 0x03
	mv.p->a[Y].steps = steps_y;
    598c:	8a 81       	ldd	r24, Y+2	; 0x02
    598e:	9b 81       	ldd	r25, Y+3	; 0x03
    5990:	ac 81       	ldd	r26, Y+4	; 0x04
    5992:	bd 81       	ldd	r27, Y+5	; 0x05
    5994:	82 87       	std	Z+10, r24	; 0x0a
    5996:	93 87       	std	Z+11, r25	; 0x0b
    5998:	a4 87       	std	Z+12, r26	; 0x0c
    599a:	b5 87       	std	Z+13, r27	; 0x0d
	mv.p->a[Z].steps = steps_z;
    599c:	8e 81       	ldd	r24, Y+6	; 0x06
    599e:	9f 81       	ldd	r25, Y+7	; 0x07
    59a0:	a8 85       	ldd	r26, Y+8	; 0x08
    59a2:	b9 85       	ldd	r27, Y+9	; 0x09
    59a4:	84 8b       	std	Z+20, r24	; 0x14
    59a6:	95 8b       	std	Z+21, r25	; 0x15
    59a8:	a6 8b       	std	Z+22, r26	; 0x16
    59aa:	b7 8b       	std	Z+23, r27	; 0x17
	mv.microseconds = (uint64_t)microseconds;			// cast to larger base
    59ac:	a0 92 c8 21 	sts	0x21C8, r10
    59b0:	b0 92 c9 21 	sts	0x21C9, r11
    59b4:	c0 92 ca 21 	sts	0x21CA, r12
    59b8:	d0 92 cb 21 	sts	0x21CB, r13
    59bc:	10 92 cc 21 	sts	0x21CC, r1
    59c0:	10 92 cd 21 	sts	0x21CD, r1
    59c4:	10 92 ce 21 	sts	0x21CE, r1
    59c8:	10 92 cf 21 	sts	0x21CF, r1
	mv.ticks = mv.microseconds * TICKS_PER_MICROSECOND;
    59cc:	95 01       	movw	r18, r10
    59ce:	a6 01       	movw	r20, r12
    59d0:	60 e0       	ldi	r22, 0x00	; 0
    59d2:	70 e0       	ldi	r23, 0x00	; 0
    59d4:	80 e0       	ldi	r24, 0x00	; 0
    59d6:	90 e0       	ldi	r25, 0x00	; 0
    59d8:	05 e0       	ldi	r16, 0x05	; 5
    59da:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <__ashldi3>
    59de:	fc 01       	movw	r30, r24
    59e0:	98 eb       	ldi	r25, 0xB8	; 184
    59e2:	69 2e       	mov	r6, r25
    59e4:	91 e2       	ldi	r25, 0x21	; 33
    59e6:	79 2e       	mov	r7, r25
    59e8:	20 93 b8 21 	sts	0x21B8, r18
    59ec:	d3 01       	movw	r26, r6
    59ee:	11 96       	adiw	r26, 0x01	; 1
    59f0:	3c 93       	st	X, r19
    59f2:	11 97       	sbiw	r26, 0x01	; 1
    59f4:	12 96       	adiw	r26, 0x02	; 2
    59f6:	4c 93       	st	X, r20
    59f8:	12 97       	sbiw	r26, 0x02	; 2
    59fa:	13 96       	adiw	r26, 0x03	; 3
    59fc:	5c 93       	st	X, r21
    59fe:	13 97       	sbiw	r26, 0x03	; 3
    5a00:	14 96       	adiw	r26, 0x04	; 4
    5a02:	6c 93       	st	X, r22
    5a04:	14 97       	sbiw	r26, 0x04	; 4
    5a06:	15 96       	adiw	r26, 0x05	; 5
    5a08:	7c 93       	st	X, r23
    5a0a:	15 97       	sbiw	r26, 0x05	; 5
    5a0c:	16 96       	adiw	r26, 0x06	; 6
    5a0e:	ec 93       	st	X, r30
    5a10:	16 97       	sbiw	r26, 0x06	; 6
    5a12:	17 96       	adiw	r26, 0x07	; 7
    5a14:	fc 93       	st	X, r31

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    5a16:	21 14       	cp	r2, r1
    5a18:	31 04       	cpc	r3, r1
    5a1a:	41 04       	cpc	r4, r1
    5a1c:	51 04       	cpc	r5, r1
    5a1e:	09 f0       	breq	.+2      	; 0x5a22 <mv_queue_move_buffer+0x126>
    5a20:	73 c0       	rjmp	.+230    	; 0x5b08 <mv_queue_move_buffer+0x20c>
    5a22:	8a 81       	ldd	r24, Y+2	; 0x02
    5a24:	9b 81       	ldd	r25, Y+3	; 0x03
    5a26:	ac 81       	ldd	r26, Y+4	; 0x04
    5a28:	bd 81       	ldd	r27, Y+5	; 0x05
    5a2a:	00 97       	sbiw	r24, 0x00	; 0
    5a2c:	a1 05       	cpc	r26, r1
    5a2e:	b1 05       	cpc	r27, r1
    5a30:	09 f0       	breq	.+2      	; 0x5a34 <mv_queue_move_buffer+0x138>
    5a32:	6a c0       	rjmp	.+212    	; 0x5b08 <mv_queue_move_buffer+0x20c>
    5a34:	8e 81       	ldd	r24, Y+6	; 0x06
    5a36:	9f 81       	ldd	r25, Y+7	; 0x07
    5a38:	a8 85       	ldd	r26, Y+8	; 0x08
    5a3a:	b9 85       	ldd	r27, Y+9	; 0x09
    5a3c:	00 97       	sbiw	r24, 0x00	; 0
    5a3e:	a1 05       	cpc	r26, r1
    5a40:	b1 05       	cpc	r27, r1
    5a42:	09 f0       	breq	.+2      	; 0x5a46 <mv_queue_move_buffer+0x14a>
    5a44:	61 c0       	rjmp	.+194    	; 0x5b08 <mv_queue_move_buffer+0x20c>
		mv.p->a[X].steps = (((mv.ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    5a46:	81 e0       	ldi	r24, 0x01	; 1
    5a48:	e8 2e       	mov	r14, r24
    5a4a:	f1 2c       	mov	r15, r1
    5a4c:	01 2d       	mov	r16, r1
    5a4e:	11 2d       	mov	r17, r1
    5a50:	d4 01       	movw	r26, r8
    5a52:	ed 92       	st	X+, r14
    5a54:	fd 92       	st	X+, r15
    5a56:	0d 93       	st	X+, r16
    5a58:	1c 93       	st	X, r17
    5a5a:	13 97       	sbiw	r26, 0x03	; 3
		mv.p->a[X].postscale = 1;
    5a5c:	81 e0       	ldi	r24, 0x01	; 1
    5a5e:	90 e0       	ldi	r25, 0x00	; 0
    5a60:	16 96       	adiw	r26, 0x06	; 6
    5a62:	8d 93       	st	X+, r24
    5a64:	9c 93       	st	X, r25
    5a66:	17 97       	sbiw	r26, 0x07	; 7
		mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[X].steps); // expensive!
    5a68:	cf 01       	movw	r24, r30
    5a6a:	aa 24       	eor	r10, r10
    5a6c:	a3 94       	inc	r10
    5a6e:	bb 24       	eor	r11, r11
    5a70:	cc 24       	eor	r12, r12
    5a72:	dd 24       	eor	r13, r13
    5a74:	ee 24       	eor	r14, r14
    5a76:	ff 24       	eor	r15, r15
    5a78:	00 e0       	ldi	r16, 0x00	; 0
    5a7a:	10 e0       	ldi	r17, 0x00	; 0
    5a7c:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <__udivdi3>
    5a80:	f3 01       	movw	r30, r6
    5a82:	38 96       	adiw	r30, 0x08	; 8
    5a84:	20 93 c0 21 	sts	0x21C0, r18
    5a88:	31 83       	std	Z+1, r19	; 0x01
    5a8a:	42 83       	std	Z+2, r20	; 0x02
    5a8c:	53 83       	std	Z+3, r21	; 0x03
    5a8e:	64 83       	std	Z+4, r22	; 0x04
    5a90:	75 83       	std	Z+5, r23	; 0x05
    5a92:	86 83       	std	Z+6, r24	; 0x06
    5a94:	97 83       	std	Z+7, r25	; 0x07
		while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    5a96:	7f 01       	movw	r14, r30
    5a98:	19 c0       	rjmp	.+50     	; 0x5acc <mv_queue_move_buffer+0x1d0>
			mv.ticks_per_step >>= 1;
    5a9a:	8e 2f       	mov	r24, r30
    5a9c:	01 e0       	ldi	r16, 0x01	; 1
    5a9e:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <__lshrdi3>
    5aa2:	20 93 c0 21 	sts	0x21C0, r18
    5aa6:	f7 01       	movw	r30, r14
    5aa8:	31 83       	std	Z+1, r19	; 0x01
    5aaa:	42 83       	std	Z+2, r20	; 0x02
    5aac:	53 83       	std	Z+3, r21	; 0x03
    5aae:	64 83       	std	Z+4, r22	; 0x04
    5ab0:	75 83       	std	Z+5, r23	; 0x05
    5ab2:	86 83       	std	Z+6, r24	; 0x06
    5ab4:	97 83       	std	Z+7, r25	; 0x07
			mv.p->a[X].postscale <<= 1;
    5ab6:	d4 01       	movw	r26, r8
    5ab8:	16 96       	adiw	r26, 0x06	; 6
    5aba:	8d 91       	ld	r24, X+
    5abc:	9c 91       	ld	r25, X
    5abe:	17 97       	sbiw	r26, 0x07	; 7
    5ac0:	88 0f       	add	r24, r24
    5ac2:	99 1f       	adc	r25, r25
    5ac4:	16 96       	adiw	r26, 0x06	; 6
    5ac6:	8d 93       	st	X+, r24
    5ac8:	9c 93       	st	X, r25
    5aca:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((mv.ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[X].steps); // expensive!
		while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    5acc:	20 91 c0 21 	lds	r18, 0x21C0
    5ad0:	30 91 c1 21 	lds	r19, 0x21C1
    5ad4:	40 91 c2 21 	lds	r20, 0x21C2
    5ad8:	50 91 c3 21 	lds	r21, 0x21C3
    5adc:	60 91 c4 21 	lds	r22, 0x21C4
    5ae0:	70 91 c5 21 	lds	r23, 0x21C5
    5ae4:	e0 91 c6 21 	lds	r30, 0x21C6
    5ae8:	90 91 c7 21 	lds	r25, 0x21C7
    5aec:	84 2f       	mov	r24, r20
    5aee:	85 2b       	or	r24, r21
    5af0:	86 2b       	or	r24, r22
    5af2:	87 2b       	or	r24, r23
    5af4:	8e 2b       	or	r24, r30
    5af6:	89 2b       	or	r24, r25
    5af8:	81 f6       	brne	.-96     	; 0x5a9a <mv_queue_move_buffer+0x19e>
			mv.ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
    5afa:	c9 01       	movw	r24, r18
    5afc:	f4 01       	movw	r30, r8
    5afe:	84 83       	std	Z+4, r24	; 0x04
    5b00:	95 83       	std	Z+5, r25	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    5b02:	81 e0       	ldi	r24, 0x01	; 1
    5b04:	81 87       	std	Z+9, r24	; 0x09
    5b06:	43 c1       	rjmp	.+646    	; 0x5d8e <mv_queue_move_buffer+0x492>
	mv.p->a[Z].steps = steps_z;
	mv.microseconds = (uint64_t)microseconds;			// cast to larger base
	mv.ticks = mv.microseconds * TICKS_PER_MICROSECOND;

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    5b08:	44 24       	eor	r4, r4
    5b0a:	55 24       	eor	r5, r5
				mv.p->a[i].steps = labs(mv.p->a[i].steps);

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
    5b0c:	10 ec       	ldi	r17, 0xC0	; 192
    5b0e:	21 2e       	mov	r2, r17
    5b10:	11 e2       	ldi	r17, 0x21	; 33
    5b12:	31 2e       	mov	r3, r17
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    5b14:	40 91 d2 21 	lds	r20, 0x21D2
    5b18:	50 91 d3 21 	lds	r21, 0x21D3
    5b1c:	4a 86       	std	Y+10, r4	; 0x0a
    5b1e:	5b 86       	std	Y+11, r5	; 0x0b
    5b20:	c2 01       	movw	r24, r4
    5b22:	f2 01       	movw	r30, r4
    5b24:	b3 e0       	ldi	r27, 0x03	; 3
    5b26:	ee 0f       	add	r30, r30
    5b28:	ff 1f       	adc	r31, r31
    5b2a:	ba 95       	dec	r27
    5b2c:	e1 f7       	brne	.-8      	; 0x5b26 <mv_queue_move_buffer+0x22a>
    5b2e:	88 0f       	add	r24, r24
    5b30:	99 1f       	adc	r25, r25
    5b32:	e8 0f       	add	r30, r24
    5b34:	f9 1f       	adc	r31, r25
    5b36:	e4 0f       	add	r30, r20
    5b38:	f5 1f       	adc	r31, r21
    5b3a:	80 81       	ld	r24, Z
    5b3c:	91 81       	ldd	r25, Z+1	; 0x01
    5b3e:	a2 81       	ldd	r26, Z+2	; 0x02
    5b40:	b3 81       	ldd	r27, Z+3	; 0x03
    5b42:	00 97       	sbiw	r24, 0x00	; 0
    5b44:	a1 05       	cpc	r26, r1
    5b46:	b1 05       	cpc	r27, r1
    5b48:	09 f4       	brne	.+2      	; 0x5b4c <mv_queue_move_buffer+0x250>
    5b4a:	19 c1       	rjmp	.+562    	; 0x5d7e <mv_queue_move_buffer+0x482>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    5b4c:	b7 ff       	sbrs	r27, 7
    5b4e:	12 c0       	rjmp	.+36     	; 0x5b74 <mv_queue_move_buffer+0x278>
    5b50:	c2 01       	movw	r24, r4
    5b52:	92 01       	movw	r18, r4
    5b54:	f3 e0       	ldi	r31, 0x03	; 3
    5b56:	22 0f       	add	r18, r18
    5b58:	33 1f       	adc	r19, r19
    5b5a:	fa 95       	dec	r31
    5b5c:	e1 f7       	brne	.-8      	; 0x5b56 <mv_queue_move_buffer+0x25a>
    5b5e:	88 0f       	add	r24, r24
    5b60:	99 1f       	adc	r25, r25
    5b62:	28 0f       	add	r18, r24
    5b64:	39 1f       	adc	r19, r25
    5b66:	42 0f       	add	r20, r18
    5b68:	53 1f       	adc	r21, r19
    5b6a:	81 e0       	ldi	r24, 0x01	; 1
    5b6c:	da 01       	movw	r26, r20
    5b6e:	18 96       	adiw	r26, 0x08	; 8
    5b70:	8c 93       	st	X, r24
    5b72:	0f c0       	rjmp	.+30     	; 0x5b92 <mv_queue_move_buffer+0x296>
    5b74:	c2 01       	movw	r24, r4
    5b76:	92 01       	movw	r18, r4
    5b78:	73 e0       	ldi	r23, 0x03	; 3
    5b7a:	22 0f       	add	r18, r18
    5b7c:	33 1f       	adc	r19, r19
    5b7e:	7a 95       	dec	r23
    5b80:	e1 f7       	brne	.-8      	; 0x5b7a <mv_queue_move_buffer+0x27e>
    5b82:	88 0f       	add	r24, r24
    5b84:	99 1f       	adc	r25, r25
    5b86:	28 0f       	add	r18, r24
    5b88:	39 1f       	adc	r19, r25
    5b8a:	42 0f       	add	r20, r18
    5b8c:	53 1f       	adc	r21, r19
    5b8e:	fa 01       	movw	r30, r20
    5b90:	10 86       	std	Z+8, r1	; 0x08
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    5b92:	e0 91 d2 21 	lds	r30, 0x21D2
    5b96:	f0 91 d3 21 	lds	r31, 0x21D3
    5b9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    5b9e:	ac 01       	movw	r20, r24
    5ba0:	03 e0       	ldi	r16, 0x03	; 3
    5ba2:	44 0f       	add	r20, r20
    5ba4:	55 1f       	adc	r21, r21
    5ba6:	0a 95       	dec	r16
    5ba8:	e1 f7       	brne	.-8      	; 0x5ba2 <mv_queue_move_buffer+0x2a6>
    5baa:	88 0f       	add	r24, r24
    5bac:	99 1f       	adc	r25, r25
    5bae:	48 0f       	add	r20, r24
    5bb0:	59 1f       	adc	r21, r25
    5bb2:	4e 0f       	add	r20, r30
    5bb4:	5f 1f       	adc	r21, r31
    5bb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    5bb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    5bba:	9c 01       	movw	r18, r24
    5bbc:	b3 e0       	ldi	r27, 0x03	; 3
    5bbe:	22 0f       	add	r18, r18
    5bc0:	33 1f       	adc	r19, r19
    5bc2:	ba 95       	dec	r27
    5bc4:	e1 f7       	brne	.-8      	; 0x5bbe <mv_queue_move_buffer+0x2c2>
    5bc6:	88 0f       	add	r24, r24
    5bc8:	99 1f       	adc	r25, r25
    5bca:	28 0f       	add	r18, r24
    5bcc:	39 1f       	adc	r19, r25
    5bce:	e2 0f       	add	r30, r18
    5bd0:	f3 1f       	adc	r31, r19
    5bd2:	80 81       	ld	r24, Z
    5bd4:	91 81       	ldd	r25, Z+1	; 0x01
    5bd6:	a2 81       	ldd	r26, Z+2	; 0x02
    5bd8:	b3 81       	ldd	r27, Z+3	; 0x03
    5bda:	b7 ff       	sbrs	r27, 7
    5bdc:	07 c0       	rjmp	.+14     	; 0x5bec <mv_queue_move_buffer+0x2f0>
    5bde:	b0 95       	com	r27
    5be0:	a0 95       	com	r26
    5be2:	90 95       	com	r25
    5be4:	81 95       	neg	r24
    5be6:	9f 4f       	sbci	r25, 0xFF	; 255
    5be8:	af 4f       	sbci	r26, 0xFF	; 255
    5bea:	bf 4f       	sbci	r27, 0xFF	; 255
    5bec:	fa 01       	movw	r30, r20
    5bee:	80 83       	st	Z, r24
    5bf0:	91 83       	std	Z+1, r25	; 0x01
    5bf2:	a2 83       	std	Z+2, r26	; 0x02
    5bf4:	b3 83       	std	Z+3, r27	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    5bf6:	a0 91 d2 21 	lds	r26, 0x21D2
    5bfa:	b0 91 d3 21 	lds	r27, 0x21D3
    5bfe:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c00:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c02:	fc 01       	movw	r30, r24
    5c04:	73 e0       	ldi	r23, 0x03	; 3
    5c06:	ee 0f       	add	r30, r30
    5c08:	ff 1f       	adc	r31, r31
    5c0a:	7a 95       	dec	r23
    5c0c:	e1 f7       	brne	.-8      	; 0x5c06 <mv_queue_move_buffer+0x30a>
    5c0e:	88 0f       	add	r24, r24
    5c10:	99 1f       	adc	r25, r25
    5c12:	e8 0f       	add	r30, r24
    5c14:	f9 1f       	adc	r31, r25
    5c16:	ea 0f       	add	r30, r26
    5c18:	fb 1f       	adc	r31, r27
    5c1a:	81 e0       	ldi	r24, 0x01	; 1
    5c1c:	90 e0       	ldi	r25, 0x00	; 0
    5c1e:	86 83       	std	Z+6, r24	; 0x06
    5c20:	97 83       	std	Z+7, r25	; 0x07
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
    5c22:	8a 85       	ldd	r24, Y+10	; 0x0a
    5c24:	9b 85       	ldd	r25, Y+11	; 0x0b
    5c26:	9c 01       	movw	r18, r24
    5c28:	53 e0       	ldi	r21, 0x03	; 3
    5c2a:	22 0f       	add	r18, r18
    5c2c:	33 1f       	adc	r19, r19
    5c2e:	5a 95       	dec	r21
    5c30:	e1 f7       	brne	.-8      	; 0x5c2a <mv_queue_move_buffer+0x32e>
    5c32:	88 0f       	add	r24, r24
    5c34:	99 1f       	adc	r25, r25
    5c36:	28 0f       	add	r18, r24
    5c38:	39 1f       	adc	r19, r25
    5c3a:	a2 0f       	add	r26, r18
    5c3c:	b3 1f       	adc	r27, r19
    5c3e:	ed 90       	ld	r14, X+
    5c40:	fd 90       	ld	r15, X+
    5c42:	0d 91       	ld	r16, X+
    5c44:	1c 91       	ld	r17, X
    5c46:	37 01       	movw	r6, r14
    5c48:	48 01       	movw	r8, r16
    5c4a:	99 0c       	add	r9, r9
    5c4c:	66 08       	sbc	r6, r6
    5c4e:	76 2c       	mov	r7, r6
    5c50:	43 01       	movw	r8, r6
    5c52:	20 91 b8 21 	lds	r18, 0x21B8
    5c56:	30 91 b9 21 	lds	r19, 0x21B9
    5c5a:	40 91 ba 21 	lds	r20, 0x21BA
    5c5e:	50 91 bb 21 	lds	r21, 0x21BB
    5c62:	60 91 bc 21 	lds	r22, 0x21BC
    5c66:	70 91 bd 21 	lds	r23, 0x21BD
    5c6a:	80 91 be 21 	lds	r24, 0x21BE
    5c6e:	90 91 bf 21 	lds	r25, 0x21BF
    5c72:	57 01       	movw	r10, r14
    5c74:	68 01       	movw	r12, r16
    5c76:	e6 2c       	mov	r14, r6
    5c78:	f6 2c       	mov	r15, r6
    5c7a:	06 2d       	mov	r16, r6
    5c7c:	16 2d       	mov	r17, r6
    5c7e:	0e 94 9f 36 	call	0x6d3e	; 0x6d3e <__udivdi3>
    5c82:	20 93 c0 21 	sts	0x21C0, r18
    5c86:	d1 01       	movw	r26, r2
    5c88:	11 96       	adiw	r26, 0x01	; 1
    5c8a:	3c 93       	st	X, r19
    5c8c:	11 97       	sbiw	r26, 0x01	; 1
    5c8e:	12 96       	adiw	r26, 0x02	; 2
    5c90:	4c 93       	st	X, r20
    5c92:	12 97       	sbiw	r26, 0x02	; 2
    5c94:	13 96       	adiw	r26, 0x03	; 3
    5c96:	5c 93       	st	X, r21
    5c98:	13 97       	sbiw	r26, 0x03	; 3
    5c9a:	14 96       	adiw	r26, 0x04	; 4
    5c9c:	6c 93       	st	X, r22
    5c9e:	14 97       	sbiw	r26, 0x04	; 4
    5ca0:	15 96       	adiw	r26, 0x05	; 5
    5ca2:	7c 93       	st	X, r23
    5ca4:	15 97       	sbiw	r26, 0x05	; 5
    5ca6:	16 96       	adiw	r26, 0x06	; 6
    5ca8:	8c 93       	st	X, r24
    5caa:	16 97       	sbiw	r26, 0x06	; 6
    5cac:	17 96       	adiw	r26, 0x07	; 7
    5cae:	9c 93       	st	X, r25
    5cb0:	38 c0       	rjmp	.+112    	; 0x5d22 <mv_queue_move_buffer+0x426>
				while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
					mv.ticks_per_step >>= 1;
    5cb2:	9d 01       	movw	r18, r26
    5cb4:	8e 2f       	mov	r24, r30
    5cb6:	01 e0       	ldi	r16, 0x01	; 1
    5cb8:	0e 94 ad 35 	call	0x6b5a	; 0x6b5a <__lshrdi3>
    5cbc:	20 93 c0 21 	sts	0x21C0, r18
    5cc0:	f1 01       	movw	r30, r2
    5cc2:	31 83       	std	Z+1, r19	; 0x01
    5cc4:	42 83       	std	Z+2, r20	; 0x02
    5cc6:	53 83       	std	Z+3, r21	; 0x03
    5cc8:	64 83       	std	Z+4, r22	; 0x04
    5cca:	75 83       	std	Z+5, r23	; 0x05
    5ccc:	86 83       	std	Z+6, r24	; 0x06
    5cce:	97 83       	std	Z+7, r25	; 0x07
					mv.p->a[i].postscale <<= 1;
    5cd0:	40 91 d2 21 	lds	r20, 0x21D2
    5cd4:	50 91 d3 21 	lds	r21, 0x21D3
    5cd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    5cda:	9b 85       	ldd	r25, Y+11	; 0x0b
    5cdc:	fc 01       	movw	r30, r24
    5cde:	23 e0       	ldi	r18, 0x03	; 3
    5ce0:	ee 0f       	add	r30, r30
    5ce2:	ff 1f       	adc	r31, r31
    5ce4:	2a 95       	dec	r18
    5ce6:	e1 f7       	brne	.-8      	; 0x5ce0 <mv_queue_move_buffer+0x3e4>
    5ce8:	88 0f       	add	r24, r24
    5cea:	99 1f       	adc	r25, r25
    5cec:	e8 0f       	add	r30, r24
    5cee:	f9 1f       	adc	r31, r25
    5cf0:	e4 0f       	add	r30, r20
    5cf2:	f5 1f       	adc	r31, r21
    5cf4:	8a 85       	ldd	r24, Y+10	; 0x0a
    5cf6:	9b 85       	ldd	r25, Y+11	; 0x0b
    5cf8:	9c 01       	movw	r18, r24
    5cfa:	13 e0       	ldi	r17, 0x03	; 3
    5cfc:	22 0f       	add	r18, r18
    5cfe:	33 1f       	adc	r19, r19
    5d00:	1a 95       	dec	r17
    5d02:	e1 f7       	brne	.-8      	; 0x5cfc <mv_queue_move_buffer+0x400>
    5d04:	88 0f       	add	r24, r24
    5d06:	99 1f       	adc	r25, r25
    5d08:	28 0f       	add	r18, r24
    5d0a:	39 1f       	adc	r19, r25
    5d0c:	42 0f       	add	r20, r18
    5d0e:	53 1f       	adc	r21, r19
    5d10:	da 01       	movw	r26, r20
    5d12:	16 96       	adiw	r26, 0x06	; 6
    5d14:	8d 91       	ld	r24, X+
    5d16:	9c 91       	ld	r25, X
    5d18:	17 97       	sbiw	r26, 0x07	; 7
    5d1a:	88 0f       	add	r24, r24
    5d1c:	99 1f       	adc	r25, r25
    5d1e:	86 83       	std	Z+6, r24	; 0x06
    5d20:	97 83       	std	Z+7, r25	; 0x07

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
				while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    5d22:	a0 91 c0 21 	lds	r26, 0x21C0
    5d26:	b0 91 c1 21 	lds	r27, 0x21C1
    5d2a:	40 91 c2 21 	lds	r20, 0x21C2
    5d2e:	50 91 c3 21 	lds	r21, 0x21C3
    5d32:	60 91 c4 21 	lds	r22, 0x21C4
    5d36:	70 91 c5 21 	lds	r23, 0x21C5
    5d3a:	e0 91 c6 21 	lds	r30, 0x21C6
    5d3e:	90 91 c7 21 	lds	r25, 0x21C7
    5d42:	84 2f       	mov	r24, r20
    5d44:	85 2b       	or	r24, r21
    5d46:	86 2b       	or	r24, r22
    5d48:	87 2b       	or	r24, r23
    5d4a:	8e 2b       	or	r24, r30
    5d4c:	89 2b       	or	r24, r25
    5d4e:	09 f0       	breq	.+2      	; 0x5d52 <mv_queue_move_buffer+0x456>
    5d50:	b0 cf       	rjmp	.-160    	; 0x5cb2 <mv_queue_move_buffer+0x3b6>
					mv.ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
    5d52:	40 91 d2 21 	lds	r20, 0x21D2
    5d56:	50 91 d3 21 	lds	r21, 0x21D3
    5d5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d5e:	9c 01       	movw	r18, r24
    5d60:	73 e0       	ldi	r23, 0x03	; 3
    5d62:	22 0f       	add	r18, r18
    5d64:	33 1f       	adc	r19, r19
    5d66:	7a 95       	dec	r23
    5d68:	e1 f7       	brne	.-8      	; 0x5d62 <mv_queue_move_buffer+0x466>
    5d6a:	88 0f       	add	r24, r24
    5d6c:	99 1f       	adc	r25, r25
    5d6e:	28 0f       	add	r18, r24
    5d70:	39 1f       	adc	r19, r25
    5d72:	42 0f       	add	r20, r18
    5d74:	53 1f       	adc	r21, r19
    5d76:	cd 01       	movw	r24, r26
    5d78:	fa 01       	movw	r30, r20
    5d7a:	84 83       	std	Z+4, r24	; 0x04
    5d7c:	95 83       	std	Z+5, r25	; 0x05
    5d7e:	08 94       	sec
    5d80:	41 1c       	adc	r4, r1
    5d82:	51 1c       	adc	r5, r1
		}
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    5d84:	f3 e0       	ldi	r31, 0x03	; 3
    5d86:	4f 16       	cp	r4, r31
    5d88:	51 04       	cpc	r5, r1
    5d8a:	09 f0       	breq	.+2      	; 0x5d8e <mv_queue_move_buffer+0x492>
    5d8c:	c3 ce       	rjmp	.-634    	; 0x5b14 <mv_queue_move_buffer+0x218>
				}
				mv.p->a[i].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    5d8e:	89 81       	ldd	r24, Y+1	; 0x01
    5d90:	80 93 d0 21 	sts	0x21D0, r24
	st_execute_move();
    5d94:	0e 94 ba 24 	call	0x4974	; 0x4974 <st_execute_move>
    5d98:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    5d9a:	2b 96       	adiw	r28, 0x0b	; 11
    5d9c:	cd bf       	out	0x3d, r28	; 61
    5d9e:	de bf       	out	0x3e, r29	; 62
    5da0:	cf 91       	pop	r28
    5da2:	df 91       	pop	r29
    5da4:	1f 91       	pop	r17
    5da6:	0f 91       	pop	r16
    5da8:	ff 90       	pop	r15
    5daa:	ef 90       	pop	r14
    5dac:	df 90       	pop	r13
    5dae:	cf 90       	pop	r12
    5db0:	bf 90       	pop	r11
    5db2:	af 90       	pop	r10
    5db4:	9f 90       	pop	r9
    5db6:	8f 90       	pop	r8
    5db8:	7f 90       	pop	r7
    5dba:	6f 90       	pop	r6
    5dbc:	5f 90       	pop	r5
    5dbe:	4f 90       	pop	r4
    5dc0:	3f 90       	pop	r3
    5dc2:	2f 90       	pop	r2
    5dc4:	08 95       	ret

00005dc6 <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    5dc6:	af e3       	ldi	r26, 0x3F	; 63
    5dc8:	b2 e2       	ldi	r27, 0x22	; 34
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5dca:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5dcc:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5dce:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5dd0:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5dd2:	ed 91       	ld	r30, X+
    5dd4:	fc 91       	ld	r31, X
    5dd6:	11 97       	sbiw	r26, 0x01	; 1
    5dd8:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5dda:	ed 91       	ld	r30, X+
    5ddc:	fc 91       	ld	r31, X
    5dde:	11 97       	sbiw	r26, 0x01	; 1
    5de0:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5de2:	ed 91       	ld	r30, X+
    5de4:	fc 91       	ld	r31, X
    5de6:	11 97       	sbiw	r26, 0x01	; 1
    5de8:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    5dea:	ed 91       	ld	r30, X+
    5dec:	fc 91       	ld	r31, X
    5dee:	11 97       	sbiw	r26, 0x01	; 1
    5df0:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    5df2:	ed 91       	ld	r30, X+
    5df4:	fc 91       	ld	r31, X
    5df6:	11 97       	sbiw	r26, 0x01	; 1
    5df8:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    5dfa:	ed 91       	ld	r30, X+
    5dfc:	fc 91       	ld	r31, X
    5dfe:	11 97       	sbiw	r26, 0x01	; 1
    5e00:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5e02:	ed 91       	ld	r30, X+
    5e04:	fc 91       	ld	r31, X
    5e06:	11 97       	sbiw	r26, 0x01	; 1
    5e08:	31 87       	std	Z+9, r19	; 0x09
    5e0a:	50 96       	adiw	r26, 0x10	; 16
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    5e0c:	42 e2       	ldi	r20, 0x22	; 34
    5e0e:	af 37       	cpi	r26, 0x7F	; 127
    5e10:	b4 07       	cpc	r27, r20
    5e12:	f9 f6       	brne	.-66     	; 0x5dd2 <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    5e14:	08 95       	ret

00005e16 <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    5e16:	1f 92       	push	r1
    5e18:	0f 92       	push	r0
    5e1a:	0f b6       	in	r0, 0x3f	; 63
    5e1c:	0f 92       	push	r0
    5e1e:	11 24       	eor	r1, r1
    5e20:	0f 90       	pop	r0
    5e22:	0f be       	out	0x3f, r0	; 63
    5e24:	0f 90       	pop	r0
    5e26:	1f 90       	pop	r1
    5e28:	18 95       	reti

00005e2a <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    5e2a:	1f 92       	push	r1
    5e2c:	0f 92       	push	r0
    5e2e:	0f b6       	in	r0, 0x3f	; 63
    5e30:	0f 92       	push	r0
    5e32:	11 24       	eor	r1, r1
    5e34:	0f 90       	pop	r0
    5e36:	0f be       	out	0x3f, r0	; 63
    5e38:	0f 90       	pop	r0
    5e3a:	1f 90       	pop	r1
    5e3c:	18 95       	reti

00005e3e <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    5e3e:	1f 92       	push	r1
    5e40:	0f 92       	push	r0
    5e42:	0f b6       	in	r0, 0x3f	; 63
    5e44:	0f 92       	push	r0
    5e46:	11 24       	eor	r1, r1
    5e48:	0f 90       	pop	r0
    5e4a:	0f be       	out	0x3f, r0	; 63
    5e4c:	0f 90       	pop	r0
    5e4e:	1f 90       	pop	r1
    5e50:	18 95       	reti

00005e52 <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    5e52:	1f 92       	push	r1
    5e54:	0f 92       	push	r0
    5e56:	0f b6       	in	r0, 0x3f	; 63
    5e58:	0f 92       	push	r0
    5e5a:	11 24       	eor	r1, r1
    5e5c:	0f 90       	pop	r0
    5e5e:	0f be       	out	0x3f, r0	; 63
    5e60:	0f 90       	pop	r0
    5e62:	1f 90       	pop	r1
    5e64:	18 95       	reti

00005e66 <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    5e66:	1f 92       	push	r1
    5e68:	0f 92       	push	r0
    5e6a:	0f b6       	in	r0, 0x3f	; 63
    5e6c:	0f 92       	push	r0
    5e6e:	11 24       	eor	r1, r1
    5e70:	0f 90       	pop	r0
    5e72:	0f be       	out	0x3f, r0	; 63
    5e74:	0f 90       	pop	r0
    5e76:	1f 90       	pop	r1
    5e78:	18 95       	reti

00005e7a <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    5e7a:	1f 92       	push	r1
    5e7c:	0f 92       	push	r0
    5e7e:	0f b6       	in	r0, 0x3f	; 63
    5e80:	0f 92       	push	r0
    5e82:	11 24       	eor	r1, r1
    5e84:	0f 90       	pop	r0
    5e86:	0f be       	out	0x3f, r0	; 63
    5e88:	0f 90       	pop	r0
    5e8a:	1f 90       	pop	r1
    5e8c:	18 95       	reti

00005e8e <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    5e8e:	1f 92       	push	r1
    5e90:	0f 92       	push	r0
    5e92:	0f b6       	in	r0, 0x3f	; 63
    5e94:	0f 92       	push	r0
    5e96:	11 24       	eor	r1, r1
    5e98:	0f 90       	pop	r0
    5e9a:	0f be       	out	0x3f, r0	; 63
    5e9c:	0f 90       	pop	r0
    5e9e:	1f 90       	pop	r1
    5ea0:	18 95       	reti

00005ea2 <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    5ea2:	1f 92       	push	r1
    5ea4:	0f 92       	push	r0
    5ea6:	0f b6       	in	r0, 0x3f	; 63
    5ea8:	0f 92       	push	r0
    5eaa:	11 24       	eor	r1, r1
    5eac:	0f 90       	pop	r0
    5eae:	0f be       	out	0x3f, r0	; 63
    5eb0:	0f 90       	pop	r0
    5eb2:	1f 90       	pop	r1
    5eb4:	18 95       	reti

00005eb6 <signal_etx>:
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx() {			// ^c
{
	tg_reset_source();					// return control to standard device
    5eb6:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <tg_reset_source>
	mc_motion_stop();					// stop computing and generating motions
    5eba:	0e 94 33 1b 	call	0x3666	; 0x3666 <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    5ebe:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <mv_flush>
	st_stop_steppers();					// stop the steppers
    5ec2:	0e 94 9f 24 	call	0x493e	; 0x493e <st_stop_steppers>
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
*/
}
    5ec6:	08 95       	ret

00005ec8 <xio_set_baud_usart>:
	dx->port->OUTCLR = outclr;
	dx->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
    5ec8:	cf 93       	push	r28
    5eca:	df 93       	push	r29
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    5ecc:	90 e0       	ldi	r25, 0x00	; 0
    5ece:	27 e1       	ldi	r18, 0x17	; 23
    5ed0:	30 e0       	ldi	r19, 0x00	; 0
    5ed2:	82 9f       	mul	r24, r18
    5ed4:	d0 01       	movw	r26, r0
    5ed6:	83 9f       	mul	r24, r19
    5ed8:	b0 0d       	add	r27, r0
    5eda:	92 9f       	mul	r25, r18
    5edc:	b0 0d       	add	r27, r0
    5ede:	11 24       	eor	r1, r1
    5ee0:	af 53       	subi	r26, 0x3F	; 63
    5ee2:	bc 4d       	sbci	r27, 0xDC	; 220
    5ee4:	51 96       	adiw	r26, 0x11	; 17
    5ee6:	ed 91       	ld	r30, X+
    5ee8:	fc 91       	ld	r31, X
    5eea:	52 97       	sbiw	r26, 0x12	; 18
    5eec:	87 81       	ldd	r24, Z+7	; 0x07
    5eee:	90 85       	ldd	r25, Z+8	; 0x08
    5ef0:	26 2f       	mov	r18, r22
    5ef2:	30 e0       	ldi	r19, 0x00	; 0
    5ef4:	f9 01       	movw	r30, r18
    5ef6:	eb 53       	subi	r30, 0x3B	; 59
    5ef8:	f5 4e       	sbci	r31, 0xE5	; 229
    5efa:	e4 91       	lpm	r30, Z+
    5efc:	ec 01       	movw	r28, r24
    5efe:	ee 83       	std	Y+6, r30	; 0x06
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    5f00:	51 96       	adiw	r26, 0x11	; 17
    5f02:	ed 91       	ld	r30, X+
    5f04:	fc 91       	ld	r31, X
    5f06:	52 97       	sbiw	r26, 0x12	; 18
    5f08:	a7 81       	ldd	r26, Z+7	; 0x07
    5f0a:	b0 85       	ldd	r27, Z+8	; 0x08
    5f0c:	20 53       	subi	r18, 0x30	; 48
    5f0e:	35 4e       	sbci	r19, 0xE5	; 229
    5f10:	f9 01       	movw	r30, r18
    5f12:	64 91       	lpm	r22, Z+
    5f14:	17 96       	adiw	r26, 0x07	; 7
    5f16:	6c 93       	st	X, r22
}
    5f18:	df 91       	pop	r29
    5f1a:	cf 91       	pop	r28
    5f1c:	08 95       	ret

00005f1e <xio_putc_usart>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_usart(const uint8_t dev, const char c, FILE *stream)
{
    5f1e:	cf 93       	push	r28
    5f20:	df 93       	push	r29
    5f22:	78 2f       	mov	r23, r24
    5f24:	da 01       	movw	r26, r20
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
    5f26:	87 e1       	ldi	r24, 0x17	; 23
    5f28:	78 9f       	mul	r23, r24
    5f2a:	a0 01       	movw	r20, r0
    5f2c:	11 24       	eor	r1, r1
    5f2e:	4f 53       	subi	r20, 0x3F	; 63
    5f30:	5c 4d       	sbci	r21, 0xDC	; 220
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    5f32:	27 2f       	mov	r18, r23
    5f34:	30 e0       	ldi	r19, 0x00	; 0
    5f36:	87 e1       	ldi	r24, 0x17	; 23
    5f38:	90 e0       	ldi	r25, 0x00	; 0
    5f3a:	28 9f       	mul	r18, r24
    5f3c:	f0 01       	movw	r30, r0
    5f3e:	29 9f       	mul	r18, r25
    5f40:	f0 0d       	add	r31, r0
    5f42:	38 9f       	mul	r19, r24
    5f44:	f0 0d       	add	r31, r0
    5f46:	11 24       	eor	r1, r1
    5f48:	ef 53       	subi	r30, 0x3F	; 63
    5f4a:	fc 4d       	sbci	r31, 0xDC	; 220
    5f4c:	c1 89       	ldd	r28, Z+17	; 0x11
    5f4e:	d2 89       	ldd	r29, Z+18	; 0x12

	if ((dx->next_tx_buf_head = (dx->tx_buf_head)-1) == 0) { // adv. head & wrap
    5f50:	8d 81       	ldd	r24, Y+5	; 0x05
    5f52:	81 50       	subi	r24, 0x01	; 1
    5f54:	8e 83       	std	Y+6, r24	; 0x06
    5f56:	88 23       	and	r24, r24
    5f58:	11 f4       	brne	.+4      	; 0x5f5e <xio_putc_usart+0x40>
		dx->next_tx_buf_head = TX_BUFFER_SIZE-1;	 // -1 avoids the off-by-one
    5f5a:	81 e1       	ldi	r24, 0x11	; 17
    5f5c:	8e 83       	std	Y+6, r24	; 0x06
	}
	while(dx->next_tx_buf_head == dx->tx_buf_tail) { // buf full. sleep or ret
    5f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    5f60:	16 c0       	rjmp	.+44     	; 0x5f8e <xio_putc_usart+0x70>
		if (BLOCKING(d->flags)) {
    5f62:	fa 01       	movw	r30, r20
    5f64:	80 81       	ld	r24, Z
    5f66:	82 ff       	sbrs	r24, 2
    5f68:	0c c0       	rjmp	.+24     	; 0x5f82 <xio_putc_usart+0x64>
			sleep_mode();
    5f6a:	80 91 48 00 	lds	r24, 0x0048
    5f6e:	81 60       	ori	r24, 0x01	; 1
    5f70:	80 93 48 00 	sts	0x0048, r24
    5f74:	88 95       	sleep
    5f76:	80 91 48 00 	lds	r24, 0x0048
    5f7a:	8e 7f       	andi	r24, 0xFE	; 254
    5f7c:	80 93 48 00 	sts	0x0048, r24
    5f80:	06 c0       	rjmp	.+12     	; 0x5f8e <xio_putc_usart+0x70>
		} else {
			d->sig = XIO_SIG_EAGAIN;
    5f82:	81 e0       	ldi	r24, 0x01	; 1
    5f84:	ea 01       	movw	r28, r20
    5f86:	8b 83       	std	Y+3, r24	; 0x03
    5f88:	2f ef       	ldi	r18, 0xFF	; 255
    5f8a:	3f ef       	ldi	r19, 0xFF	; 255
    5f8c:	52 c0       	rjmp	.+164    	; 0x6032 <__stack+0x33>
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer

	if ((dx->next_tx_buf_head = (dx->tx_buf_head)-1) == 0) { // adv. head & wrap
		dx->next_tx_buf_head = TX_BUFFER_SIZE-1;	 // -1 avoids the off-by-one
	}
	while(dx->next_tx_buf_head == dx->tx_buf_tail) { // buf full. sleep or ret
    5f8e:	8c 81       	ldd	r24, Y+4	; 0x04
    5f90:	98 17       	cp	r25, r24
    5f92:	39 f3       	breq	.-50     	; 0x5f62 <xio_putc_usart+0x44>
			d->sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	dx->tx_buf_head = dx->next_tx_buf_head;			// accept next buffer head
    5f94:	9d 83       	std	Y+5, r25	; 0x05
	dx->tx_buf[dx->tx_buf_head] = c;				// ...write char to buffer
    5f96:	8d 81       	ldd	r24, Y+5	; 0x05
    5f98:	fe 01       	movw	r30, r28
    5f9a:	e8 0f       	add	r30, r24
    5f9c:	f1 1d       	adc	r31, r1
    5f9e:	65 8f       	std	Z+29, r22	; 0x1d

	if (CRLF(d->flags) && (c == '\n')) {			// detect LF & add CR
    5fa0:	fa 01       	movw	r30, r20
    5fa2:	20 81       	ld	r18, Z
    5fa4:	31 81       	ldd	r19, Z+1	; 0x01
    5fa6:	25 ff       	sbrs	r18, 5
    5fa8:	0a c0       	rjmp	.+20     	; 0x5fbe <xio_putc_usart+0xa0>
    5faa:	6a 30       	cpi	r22, 0x0A	; 10
    5fac:	41 f4       	brne	.+16     	; 0x5fbe <xio_putc_usart+0xa0>
		return d->x_putc('\r', stream);				// recurse
    5fae:	03 84       	ldd	r0, Z+11	; 0x0b
    5fb0:	f4 85       	ldd	r31, Z+12	; 0x0c
    5fb2:	e0 2d       	mov	r30, r0
    5fb4:	8d e0       	ldi	r24, 0x0D	; 13
    5fb6:	bd 01       	movw	r22, r26
    5fb8:	19 95       	eicall
    5fba:	9c 01       	movw	r18, r24
    5fbc:	3a c0       	rjmp	.+116    	; 0x6032 <__stack+0x33>
	}

	// dequeue the buffer if DATA register is ready
	if (dx->usart->STATUS & 0x20) {
    5fbe:	ef 81       	ldd	r30, Y+7	; 0x07
    5fc0:	f8 85       	ldd	r31, Y+8	; 0x08
    5fc2:	81 81       	ldd	r24, Z+1	; 0x01
    5fc4:	85 ff       	sbrs	r24, 5
    5fc6:	24 c0       	rjmp	.+72     	; 0x6010 <__stack+0x11>
		if (dx->tx_buf_head == dx->tx_buf_tail) {// buf might be empty if IRQ got it
    5fc8:	9d 81       	ldd	r25, Y+5	; 0x05
    5fca:	8c 81       	ldd	r24, Y+4	; 0x04
    5fcc:	98 17       	cp	r25, r24
    5fce:	79 f1       	breq	.+94     	; 0x602e <__stack+0x2f>
			return (XIO_OK);
		}
		d->flags |= XIO_FLAG_TX_MUTEX_bm;			// mutual exclusion from ISR
    5fd0:	38 60       	ori	r19, 0x08	; 8
    5fd2:	fa 01       	movw	r30, r20
    5fd4:	20 83       	st	Z, r18
    5fd6:	31 83       	std	Z+1, r19	; 0x01
		if (--(dx->tx_buf_tail) == 0) {				// advance tail & wrap if needed
    5fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    5fda:	81 50       	subi	r24, 0x01	; 1
    5fdc:	8c 83       	std	Y+4, r24	; 0x04
    5fde:	8c 81       	ldd	r24, Y+4	; 0x04
    5fe0:	88 23       	and	r24, r24
    5fe2:	11 f4       	brne	.+4      	; 0x5fe8 <xio_putc_usart+0xca>
			dx->tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoid off-by-one err (OBOE)
    5fe4:	81 e1       	ldi	r24, 0x11	; 17
    5fe6:	8c 83       	std	Y+4, r24	; 0x04
		}
		if (dev == XIO_DEV_RS485) {						// HACK
    5fe8:	77 23       	and	r23, r23
    5fea:	21 f4       	brne	.+8      	; 0x5ff4 <xio_putc_usart+0xd6>
			dx->port->OUTSET = (RS485_DE_bm | RS485_RE_bm);	// enable DE, disable RE
    5fec:	e9 85       	ldd	r30, Y+9	; 0x09
    5fee:	fa 85       	ldd	r31, Y+10	; 0x0a
    5ff0:	80 e3       	ldi	r24, 0x30	; 48
    5ff2:	85 83       	std	Z+5, r24	; 0x05
		}
		dx->usart->DATA = dx->tx_buf[dx->tx_buf_tail];// write to TX DATA reg
    5ff4:	af 81       	ldd	r26, Y+7	; 0x07
    5ff6:	b8 85       	ldd	r27, Y+8	; 0x08
    5ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    5ffa:	fe 01       	movw	r30, r28
    5ffc:	e8 0f       	add	r30, r24
    5ffe:	f1 1d       	adc	r31, r1
    6000:	85 8d       	ldd	r24, Z+29	; 0x1d
    6002:	8c 93       	st	X, r24
		d->flags &= ~XIO_FLAG_TX_MUTEX_bm;			// release mutual exclusion lock
    6004:	fa 01       	movw	r30, r20
    6006:	80 81       	ld	r24, Z
    6008:	91 81       	ldd	r25, Z+1	; 0x01
    600a:	97 7f       	andi	r25, 0xF7	; 247
    600c:	80 83       	st	Z, r24
    600e:	91 83       	std	Z+1, r25	; 0x01
    6010:	ef 81       	ldd	r30, Y+7	; 0x07
    6012:	f8 85       	ldd	r31, Y+8	; 0x08
	}
	// enable interrupts regardless
	if (dev == XIO_DEV_RS485) {						// HACK
    6014:	77 23       	and	r23, r23
    6016:	11 f4       	brne	.+4      	; 0x601c <__stack+0x1d>
		dx->usart->CTRLA = CTRLA_RXON_TXON_TXCON;	// doesn't work if you just |= it
    6018:	85 e2       	ldi	r24, 0x25	; 37
    601a:	01 c0       	rjmp	.+2      	; 0x601e <__stack+0x1f>
	} else {
		dx->usart->CTRLA = CTRLA_RXON_TXON;			// doesn't work if you just |= it
    601c:	81 e2       	ldi	r24, 0x21	; 33
    601e:	83 83       	std	Z+3, r24	; 0x03
	}
	PMIC_EnableLowLevel(); 							// enable USART TX interrupts
    6020:	80 91 a2 00 	lds	r24, 0x00A2
    6024:	81 60       	ori	r24, 0x01	; 1
    6026:	e0 ea       	ldi	r30, 0xA0	; 160
    6028:	f0 e0       	ldi	r31, 0x00	; 0
    602a:	82 83       	std	Z+2, r24	; 0x02
	sei();											// enable global interrupts
    602c:	78 94       	sei
    602e:	20 e0       	ldi	r18, 0x00	; 0
    6030:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_OK);
}
    6032:	c9 01       	movw	r24, r18
    6034:	df 91       	pop	r29
    6036:	cf 91       	pop	r28
    6038:	08 95       	ret

0000603a <xio_getc_usart>:
 *		  character helper routines. See them for behaviors
 */

int xio_getc_usart(const uint8_t dev, FILE *stream)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
    603a:	97 e1       	ldi	r25, 0x17	; 23
    603c:	89 9f       	mul	r24, r25
    603e:	d0 01       	movw	r26, r0
    6040:	11 24       	eor	r1, r1
    6042:	af 53       	subi	r26, 0x3F	; 63
    6044:	bc 4d       	sbci	r27, 0xDC	; 220
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6046:	48 2f       	mov	r20, r24
    6048:	50 e0       	ldi	r21, 0x00	; 0
    604a:	27 e1       	ldi	r18, 0x17	; 23
    604c:	30 e0       	ldi	r19, 0x00	; 0
    604e:	42 9f       	mul	r20, r18
    6050:	f0 01       	movw	r30, r0
    6052:	43 9f       	mul	r20, r19
    6054:	f0 0d       	add	r31, r0
    6056:	52 9f       	mul	r21, r18
    6058:	f0 0d       	add	r31, r0
    605a:	11 24       	eor	r1, r1
    605c:	ef 53       	subi	r30, 0x3F	; 63
    605e:	fc 4d       	sbci	r31, 0xDC	; 220
    6060:	01 88       	ldd	r0, Z+17	; 0x11
    6062:	f2 89       	ldd	r31, Z+18	; 0x12
    6064:	e0 2d       	mov	r30, r0

	gdev = dev;										// set dev number global var
    6066:	80 93 2e 22 	sts	0x222E, r24
    606a:	15 c0       	rjmp	.+42     	; 0x6096 <xio_getc_usart+0x5c>

	while (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(d->flags)) {
    606c:	8c 91       	ld	r24, X
    606e:	82 ff       	sbrs	r24, 2
    6070:	0c c0       	rjmp	.+24     	; 0x608a <xio_getc_usart+0x50>
			sleep_mode();
    6072:	80 91 48 00 	lds	r24, 0x0048
    6076:	81 60       	ori	r24, 0x01	; 1
    6078:	80 93 48 00 	sts	0x0048, r24
    607c:	88 95       	sleep
    607e:	80 91 48 00 	lds	r24, 0x0048
    6082:	8e 7f       	andi	r24, 0xFE	; 254
    6084:	80 93 48 00 	sts	0x0048, r24
    6088:	06 c0       	rjmp	.+12     	; 0x6096 <xio_getc_usart+0x5c>
		} else {
			d->sig = XIO_SIG_EAGAIN;
    608a:	81 e0       	ldi	r24, 0x01	; 1
    608c:	13 96       	adiw	r26, 0x03	; 3
    608e:	8c 93       	st	X, r24
    6090:	2f ef       	ldi	r18, 0xFF	; 255
    6092:	3f ef       	ldi	r19, 0xFF	; 255
    6094:	1e c0       	rjmp	.+60     	; 0x60d2 <xio_getc_usart+0x98>
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer

	gdev = dev;										// set dev number global var

	while (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
    6096:	93 81       	ldd	r25, Z+3	; 0x03
    6098:	82 81       	ldd	r24, Z+2	; 0x02
    609a:	98 17       	cp	r25, r24
    609c:	39 f3       	breq	.-50     	; 0x606c <xio_getc_usart+0x32>
		} else {
			d->sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(dx->rx_buf_tail) == 0) {				// advance RX tail (RXQ read ptr)
    609e:	82 81       	ldd	r24, Z+2	; 0x02
    60a0:	81 50       	subi	r24, 0x01	; 1
    60a2:	82 83       	std	Z+2, r24	; 0x02
    60a4:	82 81       	ldd	r24, Z+2	; 0x02
    60a6:	88 23       	and	r24, r24
    60a8:	11 f4       	brne	.+4      	; 0x60ae <xio_getc_usart+0x74>
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    60aa:	81 e1       	ldi	r24, 0x11	; 17
    60ac:	82 83       	std	Z+2, r24	; 0x02
	}
	d->c = (dx->rx_buf[dx->rx_buf_tail] & 0x007F);// get char from RX buf & mask MSB
    60ae:	82 81       	ldd	r24, Z+2	; 0x02
    60b0:	e8 0f       	add	r30, r24
    60b2:	f1 1d       	adc	r31, r1
    60b4:	83 85       	ldd	r24, Z+11	; 0x0b
    60b6:	8f 77       	andi	r24, 0x7F	; 127
    60b8:	14 96       	adiw	r26, 0x04	; 4
    60ba:	8c 93       	st	X, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[d->c])))());
    60bc:	90 e0       	ldi	r25, 0x00	; 0
    60be:	88 0f       	add	r24, r24
    60c0:	99 1f       	adc	r25, r25
    60c2:	85 52       	subi	r24, 0x25	; 37
    60c4:	94 4e       	sbci	r25, 0xE4	; 228
    60c6:	fc 01       	movw	r30, r24
    60c8:	25 91       	lpm	r18, Z+
    60ca:	34 91       	lpm	r19, Z+
    60cc:	f9 01       	movw	r30, r18
    60ce:	19 95       	eicall
    60d0:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    60d2:	c9 01       	movw	r24, r18
    60d4:	08 95       	ret

000060d6 <_getc_char>:

// xio_getc_usart helper routines

static int _getc_char(void)
{
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    60d6:	80 91 2e 22 	lds	r24, 0x222E
    60da:	90 e0       	ldi	r25, 0x00	; 0
    60dc:	27 e1       	ldi	r18, 0x17	; 23
    60de:	30 e0       	ldi	r19, 0x00	; 0
    60e0:	82 9f       	mul	r24, r18
    60e2:	d0 01       	movw	r26, r0
    60e4:	83 9f       	mul	r24, r19
    60e6:	b0 0d       	add	r27, r0
    60e8:	92 9f       	mul	r25, r18
    60ea:	b0 0d       	add	r27, r0
    60ec:	11 24       	eor	r1, r1
    60ee:	af 53       	subi	r26, 0x3F	; 63
    60f0:	bc 4d       	sbci	r27, 0xDC	; 220
    60f2:	8c 91       	ld	r24, X
    60f4:	84 ff       	sbrs	r24, 4
    60f6:	0b c0       	rjmp	.+22     	; 0x610e <_getc_char+0x38>
    60f8:	60 91 02 25 	lds	r22, 0x2502
    60fc:	70 91 03 25 	lds	r23, 0x2503
    6100:	1b 96       	adiw	r26, 0x0b	; 11
    6102:	ed 91       	ld	r30, X+
    6104:	fc 91       	ld	r31, X
    6106:	1c 97       	sbiw	r26, 0x0c	; 12
    6108:	14 96       	adiw	r26, 0x04	; 4
    610a:	8c 91       	ld	r24, X
    610c:	19 95       	eicall
    610e:	80 91 2e 22 	lds	r24, 0x222E
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	27 e1       	ldi	r18, 0x17	; 23
    6116:	30 e0       	ldi	r19, 0x00	; 0
    6118:	82 9f       	mul	r24, r18
    611a:	f0 01       	movw	r30, r0
    611c:	83 9f       	mul	r24, r19
    611e:	f0 0d       	add	r31, r0
    6120:	92 9f       	mul	r25, r18
    6122:	f0 0d       	add	r31, r0
    6124:	11 24       	eor	r1, r1
    6126:	ef 53       	subi	r30, 0x3F	; 63
    6128:	fc 4d       	sbci	r31, 0xDC	; 220
	return(ds[gdev].c);
}
    612a:	84 81       	ldd	r24, Z+4	; 0x04
    612c:	90 e0       	ldi	r25, 0x00	; 0
    612e:	08 95       	ret

00006130 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(ds[gdev].flags)) ds[gdev].c = '\n';
    6130:	80 91 2e 22 	lds	r24, 0x222E
    6134:	28 2f       	mov	r18, r24
    6136:	30 e0       	ldi	r19, 0x00	; 0
    6138:	87 e1       	ldi	r24, 0x17	; 23
    613a:	90 e0       	ldi	r25, 0x00	; 0
    613c:	28 9f       	mul	r18, r24
    613e:	f0 01       	movw	r30, r0
    6140:	29 9f       	mul	r18, r25
    6142:	f0 0d       	add	r31, r0
    6144:	38 9f       	mul	r19, r24
    6146:	f0 0d       	add	r31, r0
    6148:	11 24       	eor	r1, r1
    614a:	ef 53       	subi	r30, 0x3F	; 63
    614c:	fc 4d       	sbci	r31, 0xDC	; 220
    614e:	80 81       	ld	r24, Z
    6150:	86 ff       	sbrs	r24, 6
    6152:	02 c0       	rjmp	.+4      	; 0x6158 <_getc_NEWLINE+0x28>
    6154:	8a e0       	ldi	r24, 0x0A	; 10
    6156:	84 83       	std	Z+4, r24	; 0x04
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    6158:	87 e1       	ldi	r24, 0x17	; 23
    615a:	90 e0       	ldi	r25, 0x00	; 0
    615c:	28 9f       	mul	r18, r24
    615e:	d0 01       	movw	r26, r0
    6160:	29 9f       	mul	r18, r25
    6162:	b0 0d       	add	r27, r0
    6164:	38 9f       	mul	r19, r24
    6166:	b0 0d       	add	r27, r0
    6168:	11 24       	eor	r1, r1
    616a:	af 53       	subi	r26, 0x3F	; 63
    616c:	bc 4d       	sbci	r27, 0xDC	; 220
    616e:	8c 91       	ld	r24, X
    6170:	84 ff       	sbrs	r24, 4
    6172:	0b c0       	rjmp	.+22     	; 0x618a <_getc_NEWLINE+0x5a>
    6174:	60 91 02 25 	lds	r22, 0x2502
    6178:	70 91 03 25 	lds	r23, 0x2503
    617c:	1b 96       	adiw	r26, 0x0b	; 11
    617e:	ed 91       	ld	r30, X+
    6180:	fc 91       	ld	r31, X
    6182:	1c 97       	sbiw	r26, 0x0c	; 12
    6184:	14 96       	adiw	r26, 0x04	; 4
    6186:	8c 91       	ld	r24, X
    6188:	19 95       	eicall
    618a:	80 91 2e 22 	lds	r24, 0x222E
    618e:	90 e0       	ldi	r25, 0x00	; 0
    6190:	27 e1       	ldi	r18, 0x17	; 23
    6192:	30 e0       	ldi	r19, 0x00	; 0
    6194:	82 9f       	mul	r24, r18
    6196:	f0 01       	movw	r30, r0
    6198:	83 9f       	mul	r24, r19
    619a:	f0 0d       	add	r31, r0
    619c:	92 9f       	mul	r25, r18
    619e:	f0 0d       	add	r31, r0
    61a0:	11 24       	eor	r1, r1
    61a2:	ef 53       	subi	r30, 0x3F	; 63
    61a4:	fc 4d       	sbci	r31, 0xDC	; 220
	return(ds[gdev].c);
}
    61a6:	84 81       	ldd	r24, Z+4	; 0x04
    61a8:	90 e0       	ldi	r25, 0x00	; 0
    61aa:	08 95       	ret

000061ac <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(ds[gdev].flags)) {
    61ac:	80 91 2e 22 	lds	r24, 0x222E
    61b0:	90 e0       	ldi	r25, 0x00	; 0
    61b2:	27 e1       	ldi	r18, 0x17	; 23
    61b4:	30 e0       	ldi	r19, 0x00	; 0
    61b6:	82 9f       	mul	r24, r18
    61b8:	f0 01       	movw	r30, r0
    61ba:	83 9f       	mul	r24, r19
    61bc:	f0 0d       	add	r31, r0
    61be:	92 9f       	mul	r25, r18
    61c0:	f0 0d       	add	r31, r0
    61c2:	11 24       	eor	r1, r1
    61c4:	ef 53       	subi	r30, 0x3F	; 63
    61c6:	fc 4d       	sbci	r31, 0xDC	; 220
    61c8:	80 81       	ld	r24, Z
    61ca:	87 ff       	sbrs	r24, 7
    61cc:	03 c0       	rjmp	.+6      	; 0x61d4 <_getc_SEMICOLON+0x28>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    61ce:	0e 94 98 30 	call	0x6130	; 0x6130 <_getc_NEWLINE>
    61d2:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    61d4:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <_getc_char>
}
    61d8:	08 95       	ret

000061da <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	ds[gdev].sig = XIO_SIG_DELETE;
    61da:	80 91 2e 22 	lds	r24, 0x222E
    61de:	90 e0       	ldi	r25, 0x00	; 0
    61e0:	27 e1       	ldi	r18, 0x17	; 23
    61e2:	30 e0       	ldi	r19, 0x00	; 0
    61e4:	82 9f       	mul	r24, r18
    61e6:	f0 01       	movw	r30, r0
    61e8:	83 9f       	mul	r24, r19
    61ea:	f0 0d       	add	r31, r0
    61ec:	92 9f       	mul	r25, r18
    61ee:	f0 0d       	add	r31, r0
    61f0:	11 24       	eor	r1, r1
    61f2:	ef 53       	subi	r30, 0x3F	; 63
    61f4:	fc 4d       	sbci	r31, 0xDC	; 220
    61f6:	89 e0       	ldi	r24, 0x09	; 9
    61f8:	83 83       	std	Z+3, r24	; 0x03
	return(_FDEV_ERR);
}
    61fa:	8f ef       	ldi	r24, 0xFF	; 255
    61fc:	9f ef       	ldi	r25, 0xFF	; 255
    61fe:	08 95       	ret

00006200 <xio_readln_usart>:
 *
 *	Note: LINEMODE flag in device struct is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_usart(const uint8_t dev, char *buf, const uint8_t size)
{
    6200:	ff 92       	push	r15
    6202:	0f 93       	push	r16
    6204:	1f 93       	push	r17
    6206:	cf 93       	push	r28
    6208:	df 93       	push	r29
    620a:	28 2f       	mov	r18, r24
	struct xioDEVICE *d = &ds[dev];				// init device struct pointer
    620c:	87 e1       	ldi	r24, 0x17	; 23
    620e:	28 9f       	mul	r18, r24
    6210:	e0 01       	movw	r28, r0
    6212:	11 24       	eor	r1, r1
    6214:	cf 53       	subi	r28, 0x3F	; 63
    6216:	dc 4d       	sbci	r29, 0xDC	; 220
	
	gdev = dev;									// set the global device number
    6218:	20 93 2e 22 	sts	0x222E, r18

	if (!IN_LINE(d->flags)) {					// first time thru initializations
    621c:	88 81       	ld	r24, Y
    621e:	99 81       	ldd	r25, Y+1	; 0x01
    6220:	96 fd       	sbrc	r25, 6
    6222:	09 c0       	rjmp	.+18     	; 0x6236 <xio_readln_usart+0x36>
		d->len = 0;								// zero buffer
    6224:	1d 82       	std	Y+5, r1	; 0x05
		d->status = 0;
    6226:	1a 82       	std	Y+2, r1	; 0x02
		d->size = size;
    6228:	4e 83       	std	Y+6, r20	; 0x06
		d->buf = buf;
    622a:	6d 8b       	std	Y+21, r22	; 0x15
    622c:	7e 8b       	std	Y+22, r23	; 0x16
		d->sig = XIO_SIG_OK;					// reset signal register
    622e:	1b 82       	std	Y+3, r1	; 0x03
		d->flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    6230:	90 64       	ori	r25, 0x40	; 64
    6232:	88 83       	st	Y, r24
    6234:	99 83       	std	Y+1, r25	; 0x01
 */

static int _xio_readc_usart(const uint8_t dev, const char *buf)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6236:	30 e0       	ldi	r19, 0x00	; 0
    6238:	87 e1       	ldi	r24, 0x17	; 23
    623a:	90 e0       	ldi	r25, 0x00	; 0
    623c:	28 9f       	mul	r18, r24
    623e:	80 01       	movw	r16, r0
    6240:	29 9f       	mul	r18, r25
    6242:	10 0d       	add	r17, r0
    6244:	38 9f       	mul	r19, r24
    6246:	10 0d       	add	r17, r0
    6248:	11 24       	eor	r1, r1
    624a:	0e 52       	subi	r16, 0x2E	; 46
    624c:	1c 4d       	sbci	r17, 0xDC	; 220

	if (dx->rx_buf_head == dx->rx_buf_tail) {		// RX ISR buffer empty
		return(XIO_BUFFER_EMPTY);
	}
	if (--(dx->rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    624e:	41 e1       	ldi	r20, 0x11	; 17
    6250:	f4 2e       	mov	r15, r20
 */

static int _xio_readc_usart(const uint8_t dev, const char *buf)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6252:	d8 01       	movw	r26, r16
    6254:	ed 91       	ld	r30, X+
    6256:	fc 91       	ld	r31, X

	if (dx->rx_buf_head == dx->rx_buf_tail) {		// RX ISR buffer empty
    6258:	93 81       	ldd	r25, Z+3	; 0x03
    625a:	82 81       	ldd	r24, Z+2	; 0x02
    625c:	98 17       	cp	r25, r24
    625e:	19 f4       	brne	.+6      	; 0x6266 <xio_readln_usart+0x66>
    6260:	88 e0       	ldi	r24, 0x08	; 8
    6262:	90 e0       	ldi	r25, 0x00	; 0
    6264:	17 c0       	rjmp	.+46     	; 0x6294 <xio_readln_usart+0x94>
		return(XIO_BUFFER_EMPTY);
	}
	if (--(dx->rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
    6266:	82 81       	ldd	r24, Z+2	; 0x02
    6268:	81 50       	subi	r24, 0x01	; 1
    626a:	82 83       	std	Z+2, r24	; 0x02
    626c:	82 81       	ldd	r24, Z+2	; 0x02
    626e:	88 23       	and	r24, r24
    6270:	09 f4       	brne	.+2      	; 0x6274 <xio_readln_usart+0x74>
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6272:	f2 82       	std	Z+2, r15	; 0x02
	}
	d->c = (dx->rx_buf[dx->rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    6274:	82 81       	ldd	r24, Z+2	; 0x02
    6276:	e8 0f       	add	r30, r24
    6278:	f1 1d       	adc	r31, r1
    627a:	83 85       	ldd	r24, Z+11	; 0x0b
    627c:	8f 77       	andi	r24, 0x7F	; 127
    627e:	8c 83       	std	Y+4, r24	; 0x04
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[d->c])))()); // dispatch char
    6280:	90 e0       	ldi	r25, 0x00	; 0
    6282:	88 0f       	add	r24, r24
    6284:	99 1f       	adc	r25, r25
    6286:	85 52       	subi	r24, 0x25	; 37
    6288:	95 4e       	sbci	r25, 0xE5	; 229
    628a:	fc 01       	movw	r30, r24
    628c:	25 91       	lpm	r18, Z+
    628e:	34 91       	lpm	r19, Z+
    6290:	f9 01       	movw	r30, r18
    6292:	19 95       	eicall
		d->buf = buf;
		d->sig = XIO_SIG_OK;					// reset signal register
		d->flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
	}
	while (TRUE) { 
		switch (d->status = _xio_readc_usart(dev, d->buf)) {
    6294:	8a 83       	std	Y+2, r24	; 0x02
    6296:	88 30       	cpi	r24, 0x08	; 8
    6298:	41 f0       	breq	.+16     	; 0x62aa <xio_readln_usart+0xaa>
    629a:	8a 30       	cpi	r24, 0x0A	; 10
    629c:	19 f0       	breq	.+6      	; 0x62a4 <xio_readln_usart+0xa4>
    629e:	84 30       	cpi	r24, 0x04	; 4
    62a0:	c1 f6       	brne	.-80     	; 0x6252 <xio_readln_usart+0x52>
    62a2:	06 c0       	rjmp	.+12     	; 0x62b0 <xio_readln_usart+0xb0>
    62a4:	2a e0       	ldi	r18, 0x0A	; 10
    62a6:	30 e0       	ldi	r19, 0x00	; 0
    62a8:	05 c0       	rjmp	.+10     	; 0x62b4 <xio_readln_usart+0xb4>
    62aa:	22 e0       	ldi	r18, 0x02	; 2
    62ac:	30 e0       	ldi	r19, 0x00	; 0
    62ae:	02 c0       	rjmp	.+4      	; 0x62b4 <xio_readln_usart+0xb4>
    62b0:	20 e0       	ldi	r18, 0x00	; 0
    62b2:	30 e0       	ldi	r19, 0x00	; 0
			case (XIO_EAGAIN): break;							// loop
		}
		// +++ put a size check here of buffers can overrun.
	}
	return (XIO_OK);
}
    62b4:	c9 01       	movw	r24, r18
    62b6:	df 91       	pop	r29
    62b8:	cf 91       	pop	r28
    62ba:	1f 91       	pop	r17
    62bc:	0f 91       	pop	r16
    62be:	ff 90       	pop	r15
    62c0:	08 95       	ret

000062c2 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (ds[gdev].len > ds[gdev].size) {			// trap buffer overflow
    62c2:	80 91 2e 22 	lds	r24, 0x222E
    62c6:	90 e0       	ldi	r25, 0x00	; 0
    62c8:	27 e1       	ldi	r18, 0x17	; 23
    62ca:	30 e0       	ldi	r19, 0x00	; 0
    62cc:	82 9f       	mul	r24, r18
    62ce:	d0 01       	movw	r26, r0
    62d0:	83 9f       	mul	r24, r19
    62d2:	b0 0d       	add	r27, r0
    62d4:	92 9f       	mul	r25, r18
    62d6:	b0 0d       	add	r27, r0
    62d8:	11 24       	eor	r1, r1
    62da:	af 53       	subi	r26, 0x3F	; 63
    62dc:	bc 4d       	sbci	r27, 0xDC	; 220
    62de:	15 96       	adiw	r26, 0x05	; 5
    62e0:	9c 91       	ld	r25, X
    62e2:	15 97       	sbiw	r26, 0x05	; 5
    62e4:	16 96       	adiw	r26, 0x06	; 6
    62e6:	2c 91       	ld	r18, X
    62e8:	16 97       	sbiw	r26, 0x06	; 6
    62ea:	29 17       	cp	r18, r25
    62ec:	70 f4       	brcc	.+28     	; 0x630a <_readln_char+0x48>
		ds[gdev].sig = XIO_SIG_EOL;
    62ee:	82 e0       	ldi	r24, 0x02	; 2
    62f0:	13 96       	adiw	r26, 0x03	; 3
    62f2:	8c 93       	st	X, r24
    62f4:	13 97       	sbiw	r26, 0x03	; 3
		ds[gdev].buf[ds[gdev].size] = NUL;		// size is zero based
    62f6:	55 96       	adiw	r26, 0x15	; 21
    62f8:	ed 91       	ld	r30, X+
    62fa:	fc 91       	ld	r31, X
    62fc:	56 97       	sbiw	r26, 0x16	; 22
    62fe:	e2 0f       	add	r30, r18
    6300:	f1 1d       	adc	r31, r1
    6302:	10 82       	st	Z, r1
    6304:	2a e0       	ldi	r18, 0x0A	; 10
    6306:	30 e0       	ldi	r19, 0x00	; 0
    6308:	1e c0       	rjmp	.+60     	; 0x6346 <_readln_char+0x84>
		return (XIO_BUFFER_FULL_NON_FATAL);
	}
	ds[gdev].buf[ds[gdev].len++] = ds[gdev].c;
    630a:	55 96       	adiw	r26, 0x15	; 21
    630c:	ed 91       	ld	r30, X+
    630e:	fc 91       	ld	r31, X
    6310:	56 97       	sbiw	r26, 0x16	; 22
    6312:	e9 0f       	add	r30, r25
    6314:	f1 1d       	adc	r31, r1
    6316:	14 96       	adiw	r26, 0x04	; 4
    6318:	8c 91       	ld	r24, X
    631a:	14 97       	sbiw	r26, 0x04	; 4
    631c:	80 83       	st	Z, r24
    631e:	9f 5f       	subi	r25, 0xFF	; 255
    6320:	15 96       	adiw	r26, 0x05	; 5
    6322:	9c 93       	st	X, r25
    6324:	15 97       	sbiw	r26, 0x05	; 5
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);// conditional echo
    6326:	8c 91       	ld	r24, X
    6328:	84 ff       	sbrs	r24, 4
    632a:	0b c0       	rjmp	.+22     	; 0x6342 <_readln_char+0x80>
    632c:	60 91 02 25 	lds	r22, 0x2502
    6330:	70 91 03 25 	lds	r23, 0x2503
    6334:	1b 96       	adiw	r26, 0x0b	; 11
    6336:	ed 91       	ld	r30, X+
    6338:	fc 91       	ld	r31, X
    633a:	1c 97       	sbiw	r26, 0x0c	; 12
    633c:	14 96       	adiw	r26, 0x04	; 4
    633e:	8c 91       	ld	r24, X
    6340:	19 95       	eicall
    6342:	22 e0       	ldi	r18, 0x02	; 2
    6344:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_EAGAIN);						// line is still in process
}
    6346:	c9 01       	movw	r24, r18
    6348:	08 95       	ret

0000634a <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	ds[gdev].sig = XIO_SIG_EOL;
    634a:	80 91 2e 22 	lds	r24, 0x222E
    634e:	90 e0       	ldi	r25, 0x00	; 0
    6350:	27 e1       	ldi	r18, 0x17	; 23
    6352:	30 e0       	ldi	r19, 0x00	; 0
    6354:	82 9f       	mul	r24, r18
    6356:	d0 01       	movw	r26, r0
    6358:	83 9f       	mul	r24, r19
    635a:	b0 0d       	add	r27, r0
    635c:	92 9f       	mul	r25, r18
    635e:	b0 0d       	add	r27, r0
    6360:	11 24       	eor	r1, r1
    6362:	af 53       	subi	r26, 0x3F	; 63
    6364:	bc 4d       	sbci	r27, 0xDC	; 220
    6366:	82 e0       	ldi	r24, 0x02	; 2
    6368:	13 96       	adiw	r26, 0x03	; 3
    636a:	8c 93       	st	X, r24
    636c:	13 97       	sbiw	r26, 0x03	; 3
	ds[gdev].buf[ds[gdev].len] = NUL;
    636e:	15 96       	adiw	r26, 0x05	; 5
    6370:	8c 91       	ld	r24, X
    6372:	15 97       	sbiw	r26, 0x05	; 5
    6374:	55 96       	adiw	r26, 0x15	; 21
    6376:	ed 91       	ld	r30, X+
    6378:	fc 91       	ld	r31, X
    637a:	56 97       	sbiw	r26, 0x16	; 22
    637c:	e8 0f       	add	r30, r24
    637e:	f1 1d       	adc	r31, r1
    6380:	10 82       	st	Z, r1
	ds[gdev].flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    6382:	2d 91       	ld	r18, X+
    6384:	3c 91       	ld	r19, X
    6386:	11 97       	sbiw	r26, 0x01	; 1
    6388:	c9 01       	movw	r24, r18
    638a:	9f 7b       	andi	r25, 0xBF	; 191
    638c:	8d 93       	st	X+, r24
    638e:	9c 93       	st	X, r25
    6390:	11 97       	sbiw	r26, 0x01	; 1
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc('\n',stdout);// echo a newline
    6392:	24 ff       	sbrs	r18, 4
    6394:	0a c0       	rjmp	.+20     	; 0x63aa <_readln_NEWLINE+0x60>
    6396:	60 91 02 25 	lds	r22, 0x2502
    639a:	70 91 03 25 	lds	r23, 0x2503
    639e:	1b 96       	adiw	r26, 0x0b	; 11
    63a0:	ed 91       	ld	r30, X+
    63a2:	fc 91       	ld	r31, X
    63a4:	1c 97       	sbiw	r26, 0x0c	; 12
    63a6:	8a e0       	ldi	r24, 0x0A	; 10
    63a8:	19 95       	eicall
	return (XIO_EOL);							// return for end-of-line
}
    63aa:	84 e0       	ldi	r24, 0x04	; 4
    63ac:	90 e0       	ldi	r25, 0x00	; 0
    63ae:	08 95       	ret

000063b0 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newln
{
	if (SEMICOLONS(ds[gdev].flags)) {
    63b0:	80 91 2e 22 	lds	r24, 0x222E
    63b4:	90 e0       	ldi	r25, 0x00	; 0
    63b6:	27 e1       	ldi	r18, 0x17	; 23
    63b8:	30 e0       	ldi	r19, 0x00	; 0
    63ba:	82 9f       	mul	r24, r18
    63bc:	f0 01       	movw	r30, r0
    63be:	83 9f       	mul	r24, r19
    63c0:	f0 0d       	add	r31, r0
    63c2:	92 9f       	mul	r25, r18
    63c4:	f0 0d       	add	r31, r0
    63c6:	11 24       	eor	r1, r1
    63c8:	ef 53       	subi	r30, 0x3F	; 63
    63ca:	fc 4d       	sbci	r31, 0xDC	; 220
    63cc:	80 81       	ld	r24, Z
    63ce:	87 ff       	sbrs	r24, 7
    63d0:	03 c0       	rjmp	.+6      	; 0x63d8 <_readln_SEMICOLON+0x28>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    63d2:	0e 94 a5 31 	call	0x634a	; 0x634a <_readln_NEWLINE>
    63d6:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    63d8:	0e 94 61 31 	call	0x62c2	; 0x62c2 <_readln_char>
	}
}
    63dc:	08 95       	ret

000063de <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--ds[gdev].len >= 0) {
    63de:	80 91 2e 22 	lds	r24, 0x222E
    63e2:	90 e0       	ldi	r25, 0x00	; 0
    63e4:	27 e1       	ldi	r18, 0x17	; 23
    63e6:	30 e0       	ldi	r19, 0x00	; 0
    63e8:	82 9f       	mul	r24, r18
    63ea:	d0 01       	movw	r26, r0
    63ec:	83 9f       	mul	r24, r19
    63ee:	b0 0d       	add	r27, r0
    63f0:	92 9f       	mul	r25, r18
    63f2:	b0 0d       	add	r27, r0
    63f4:	11 24       	eor	r1, r1
    63f6:	af 53       	subi	r26, 0x3F	; 63
    63f8:	bc 4d       	sbci	r27, 0xDC	; 220
    63fa:	15 96       	adiw	r26, 0x05	; 5
    63fc:	8c 91       	ld	r24, X
    63fe:	15 97       	sbiw	r26, 0x05	; 5
    6400:	81 50       	subi	r24, 0x01	; 1
    6402:	15 96       	adiw	r26, 0x05	; 5
    6404:	8c 93       	st	X, r24
    6406:	15 97       	sbiw	r26, 0x05	; 5
		if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    6408:	8c 91       	ld	r24, X
    640a:	84 ff       	sbrs	r24, 4
    640c:	0b c0       	rjmp	.+22     	; 0x6424 <_readln_DELETE+0x46>
    640e:	60 91 02 25 	lds	r22, 0x2502
    6412:	70 91 03 25 	lds	r23, 0x2503
    6416:	1b 96       	adiw	r26, 0x0b	; 11
    6418:	ed 91       	ld	r30, X+
    641a:	fc 91       	ld	r31, X
    641c:	1c 97       	sbiw	r26, 0x0c	; 12
    641e:	14 96       	adiw	r26, 0x04	; 4
    6420:	8c 91       	ld	r24, X
    6422:	19 95       	eicall
	} else {
		ds[gdev].len = 0;
	}
	return (XIO_EAGAIN);						// line is still in process
}
    6424:	82 e0       	ldi	r24, 0x02	; 2
    6426:	90 e0       	ldi	r25, 0x00	; 0
    6428:	08 95       	ret

0000642a <xio_queue_RX_char_usart>:
 */

void xio_queue_RX_char_usart(const uint8_t dev, const char c)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    642a:	90 e0       	ldi	r25, 0x00	; 0
    642c:	27 e1       	ldi	r18, 0x17	; 23
    642e:	30 e0       	ldi	r19, 0x00	; 0
    6430:	82 9f       	mul	r24, r18
    6432:	f0 01       	movw	r30, r0
    6434:	83 9f       	mul	r24, r19
    6436:	f0 0d       	add	r31, r0
    6438:	92 9f       	mul	r25, r18
    643a:	f0 0d       	add	r31, r0
    643c:	11 24       	eor	r1, r1
    643e:	ef 53       	subi	r30, 0x3F	; 63
    6440:	fc 4d       	sbci	r31, 0xDC	; 220
    6442:	81 89       	ldd	r24, Z+17	; 0x11
    6444:	92 89       	ldd	r25, Z+18	; 0x12

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6446:	63 30       	cpi	r22, 0x03	; 3
    6448:	29 f4       	brne	.+10     	; 0x6454 <xio_queue_RX_char_usart+0x2a>
		d->sig = XIO_SIG_KILL;					// set signal value
    644a:	84 e0       	ldi	r24, 0x04	; 4
    644c:	83 83       	std	Z+3, r24	; 0x03
		signal_etx();							// call app-specific signal handler
    644e:	0e 94 5b 2f 	call	0x5eb6	; 0x5eb6 <signal_etx>
    6452:	08 95       	ret
 */

void xio_queue_RX_char_usart(const uint8_t dev, const char c)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6454:	fc 01       	movw	r30, r24
		signal_etx();							// call app-specific signal handler
		return;
	}

	// normal path
	if ((--dx->rx_buf_head) == 0) { 			// wrap condition
    6456:	83 81       	ldd	r24, Z+3	; 0x03
    6458:	81 50       	subi	r24, 0x01	; 1
    645a:	83 83       	std	Z+3, r24	; 0x03
    645c:	83 81       	ldd	r24, Z+3	; 0x03
    645e:	88 23       	and	r24, r24
    6460:	11 f4       	brne	.+4      	; 0x6466 <xio_queue_RX_char_usart+0x3c>
		dx->rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    6462:	81 e1       	ldi	r24, 0x11	; 17
    6464:	83 83       	std	Z+3, r24	; 0x03
	}
	if (dx->rx_buf_head != dx->rx_buf_tail) {// write char unless buffer full
    6466:	93 81       	ldd	r25, Z+3	; 0x03
    6468:	82 81       	ldd	r24, Z+2	; 0x02
    646a:	98 17       	cp	r25, r24
    646c:	29 f0       	breq	.+10     	; 0x6478 <xio_queue_RX_char_usart+0x4e>
		dx->rx_buf[dx->rx_buf_head] = c;	// FAKE INPUT DATA
    646e:	83 81       	ldd	r24, Z+3	; 0x03
    6470:	e8 0f       	add	r30, r24
    6472:	f1 1d       	adc	r31, r1
    6474:	63 87       	std	Z+11, r22	; 0x0b
    6476:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++dx->rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6478:	83 81       	ldd	r24, Z+3	; 0x03
    647a:	8f 5f       	subi	r24, 0xFF	; 255
    647c:	83 83       	std	Z+3, r24	; 0x03
    647e:	83 81       	ldd	r24, Z+3	; 0x03
    6480:	82 31       	cpi	r24, 0x12	; 18
    6482:	10 f0       	brcs	.+4      	; 0x6488 <xio_queue_RX_char_usart+0x5e>
		dx->rx_buf_head = 1;
    6484:	81 e0       	ldi	r24, 0x01	; 1
    6486:	83 83       	std	Z+3, r24	; 0x03
    6488:	08 95       	ret

0000648a <xio_queue_RX_string_usart>:
/*
 * xio_queue_RX_string_usart() - fake ISR to put a string in the RX buffer
 */

void xio_queue_RX_string_usart(const uint8_t dev, const char *buf)
{
    648a:	0f 93       	push	r16
    648c:	1f 93       	push	r17
    648e:	cf 93       	push	r28
    6490:	df 93       	push	r29
    6492:	08 2f       	mov	r16, r24
    6494:	eb 01       	movw	r28, r22
    6496:	10 e0       	ldi	r17, 0x00	; 0
    6498:	03 c0       	rjmp	.+6      	; 0x64a0 <xio_queue_RX_string_usart+0x16>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_queue_RX_char_usart(dev, c);
    649a:	80 2f       	mov	r24, r16
    649c:	0e 94 15 32 	call	0x642a	; 0x642a <xio_queue_RX_char_usart>
void xio_queue_RX_string_usart(const uint8_t dev, const char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    64a0:	fe 01       	movw	r30, r28
    64a2:	e1 0f       	add	r30, r17
    64a4:	f1 1d       	adc	r31, r1
    64a6:	60 81       	ld	r22, Z
    64a8:	1f 5f       	subi	r17, 0xFF	; 255
    64aa:	66 23       	and	r22, r22
    64ac:	b1 f7       	brne	.-20     	; 0x649a <xio_queue_RX_string_usart+0x10>
		xio_queue_RX_char_usart(dev, c);
	}
}
    64ae:	df 91       	pop	r29
    64b0:	cf 91       	pop	r28
    64b2:	1f 91       	pop	r17
    64b4:	0f 91       	pop	r16
    64b6:	08 95       	ret

000064b8 <xio_init_usart>:
					const struct PORT_struct *port_addr,
					const uint8_t dirclr, 
					const uint8_t dirset, 
					const uint8_t outclr, 
					const uint8_t outset) 
{
    64b8:	8f 92       	push	r8
    64ba:	9f 92       	push	r9
    64bc:	af 92       	push	r10
    64be:	bf 92       	push	r11
    64c0:	cf 92       	push	r12
    64c2:	df 92       	push	r13
    64c4:	ef 92       	push	r14
    64c6:	ff 92       	push	r15
    64c8:	0f 93       	push	r16
    64ca:	1f 93       	push	r17
    64cc:	df 93       	push	r29
    64ce:	cf 93       	push	r28
    64d0:	cd b7       	in	r28, 0x3d	; 61
    64d2:	de b7       	in	r29, 0x3e	; 62
    64d4:	b8 2e       	mov	r11, r24
    64d6:	f4 2e       	mov	r15, r20
    64d8:	9c 2c       	mov	r9, r12
	// do all the bindings first (and in this order)
	struct xioDEVICE *d = &ds[dev];					// setup device struct pointer
	d->x = &us[offset];								// bind USART struct to device
    64da:	8f e2       	ldi	r24, 0x2F	; 47
    64dc:	68 9f       	mul	r22, r24
    64de:	60 01       	movw	r12, r0
    64e0:	11 24       	eor	r1, r1
    64e2:	82 e2       	ldi	r24, 0x22	; 34
    64e4:	93 e2       	ldi	r25, 0x23	; 35
    64e6:	c8 0e       	add	r12, r24
    64e8:	d9 1e       	adc	r13, r25
    64ea:	6b 2d       	mov	r22, r11
    64ec:	70 e0       	ldi	r23, 0x00	; 0
    64ee:	87 e1       	ldi	r24, 0x17	; 23
    64f0:	90 e0       	ldi	r25, 0x00	; 0
    64f2:	68 9f       	mul	r22, r24
    64f4:	f0 01       	movw	r30, r0
    64f6:	69 9f       	mul	r22, r25
    64f8:	f0 0d       	add	r31, r0
    64fa:	78 9f       	mul	r23, r24
    64fc:	f0 0d       	add	r31, r0
    64fe:	11 24       	eor	r1, r1
    6500:	ef 53       	subi	r30, 0x3F	; 63
    6502:	fc 4d       	sbci	r31, 0xDC	; 220
    6504:	c1 8a       	std	Z+17, r12	; 0x11
    6506:	d2 8a       	std	Z+18, r13	; 0x12
	struct xioUSART *dx = (struct xioUSART *)d->x;	// setup USART struct pointer
	dx->usart = (struct USART_struct *)usart_addr;	// bind USART 
    6508:	d6 01       	movw	r26, r12
    650a:	17 96       	adiw	r26, 0x07	; 7
    650c:	2d 93       	st	X+, r18
    650e:	3c 93       	st	X, r19
    6510:	18 97       	sbiw	r26, 0x08	; 8
	dx->port = (struct PORT_struct *)port_addr;		// bind PORT
    6512:	19 96       	adiw	r26, 0x09	; 9
    6514:	0d 93       	st	X+, r16
    6516:	1c 93       	st	X, r17
    6518:	1a 97       	sbiw	r26, 0x0a	; 10

	// set flags
	xio_setflags(dev, control);		// generic setflags - doesn't validate flags
    651a:	8b 2d       	mov	r24, r11
    651c:	64 2f       	mov	r22, r20
    651e:	75 2f       	mov	r23, r21
    6520:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <xio_setflags>

	// setup internal RX/TX buffers
	dx->rx_buf_head = 1;			// can't use location 0 in circular buffer
    6524:	81 e0       	ldi	r24, 0x01	; 1
    6526:	f6 01       	movw	r30, r12
    6528:	83 83       	std	Z+3, r24	; 0x03
	dx->rx_buf_tail = 1;
    652a:	82 83       	std	Z+2, r24	; 0x02
	dx->tx_buf_head = 1;
    652c:	85 83       	std	Z+5, r24	; 0x05
	dx->tx_buf_tail = 1;
    652e:	84 83       	std	Z+4, r24	; 0x04

	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    6530:	4f 2d       	mov	r20, r15
    6532:	4f 70       	andi	r20, 0x0F	; 15
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
    6534:	09 f4       	brne	.+2      	; 0x6538 <xio_init_usart+0x80>
    6536:	45 e0       	ldi	r20, 0x05	; 5
	dx->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    6538:	2b 2d       	mov	r18, r11
    653a:	30 e0       	ldi	r19, 0x00	; 0
    653c:	87 e1       	ldi	r24, 0x17	; 23
    653e:	90 e0       	ldi	r25, 0x00	; 0
    6540:	28 9f       	mul	r18, r24
    6542:	d0 01       	movw	r26, r0
    6544:	29 9f       	mul	r18, r25
    6546:	b0 0d       	add	r27, r0
    6548:	38 9f       	mul	r19, r24
    654a:	b0 0d       	add	r27, r0
    654c:	11 24       	eor	r1, r1
    654e:	af 53       	subi	r26, 0x3F	; 63
    6550:	bc 4d       	sbci	r27, 0xDC	; 220
    6552:	51 96       	adiw	r26, 0x11	; 17
    6554:	ed 91       	ld	r30, X+
    6556:	fc 91       	ld	r31, X
    6558:	52 97       	sbiw	r26, 0x12	; 18
    655a:	87 81       	ldd	r24, Z+7	; 0x07
    655c:	90 85       	ldd	r25, Z+8	; 0x08
    655e:	24 2f       	mov	r18, r20
    6560:	30 e0       	ldi	r19, 0x00	; 0
    6562:	f9 01       	movw	r30, r18
    6564:	eb 53       	subi	r30, 0x3B	; 59
    6566:	f5 4e       	sbci	r31, 0xE5	; 229
    6568:	44 91       	lpm	r20, Z+
    656a:	fc 01       	movw	r30, r24
    656c:	46 83       	std	Z+6, r20	; 0x06
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    656e:	51 96       	adiw	r26, 0x11	; 17
    6570:	ed 91       	ld	r30, X+
    6572:	fc 91       	ld	r31, X
    6574:	52 97       	sbiw	r26, 0x12	; 18
    6576:	a7 81       	ldd	r26, Z+7	; 0x07
    6578:	b0 85       	ldd	r27, Z+8	; 0x08
    657a:	20 53       	subi	r18, 0x30	; 48
    657c:	35 4e       	sbci	r19, 0xE5	; 229
    657e:	f9 01       	movw	r30, r18
    6580:	f4 90       	lpm	r15, Z+
    6582:	17 96       	adiw	r26, 0x07	; 7
    6584:	fc 92       	st	X, r15
	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
	xio_set_baud_usart(dev, baud);					// usart must be bound first

	dx->usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx
    6586:	d6 01       	movw	r26, r12
    6588:	17 96       	adiw	r26, 0x07	; 7
    658a:	ed 91       	ld	r30, X+
    658c:	fc 91       	ld	r31, X
    658e:	18 97       	sbiw	r26, 0x08	; 8
    6590:	88 e1       	ldi	r24, 0x18	; 24
    6592:	84 83       	std	Z+4, r24	; 0x04
	dx->usart->CTRLA = CTRLA_RXON_TXON;			   // enable tx and rx IRQs
    6594:	17 96       	adiw	r26, 0x07	; 7
    6596:	ed 91       	ld	r30, X+
    6598:	fc 91       	ld	r31, X
    659a:	18 97       	sbiw	r26, 0x08	; 8
    659c:	81 e2       	ldi	r24, 0x21	; 33
    659e:	83 83       	std	Z+3, r24	; 0x03

	dx->port->DIRCLR = dirclr;
    65a0:	19 96       	adiw	r26, 0x09	; 9
    65a2:	ed 91       	ld	r30, X+
    65a4:	fc 91       	ld	r31, X
    65a6:	1a 97       	sbiw	r26, 0x0a	; 10
    65a8:	e2 82       	std	Z+2, r14	; 0x02
	dx->port->DIRSET = dirset;
    65aa:	19 96       	adiw	r26, 0x09	; 9
    65ac:	ed 91       	ld	r30, X+
    65ae:	fc 91       	ld	r31, X
    65b0:	1a 97       	sbiw	r26, 0x0a	; 10
    65b2:	91 82       	std	Z+1, r9	; 0x01
	dx->port->OUTCLR = outclr;
    65b4:	19 96       	adiw	r26, 0x09	; 9
    65b6:	ed 91       	ld	r30, X+
    65b8:	fc 91       	ld	r31, X
    65ba:	1a 97       	sbiw	r26, 0x0a	; 10
    65bc:	a6 82       	std	Z+6, r10	; 0x06
	dx->port->OUTSET = outset;
    65be:	19 96       	adiw	r26, 0x09	; 9
    65c0:	ed 91       	ld	r30, X+
    65c2:	fc 91       	ld	r31, X
    65c4:	1a 97       	sbiw	r26, 0x0a	; 10
    65c6:	85 82       	std	Z+5, r8	; 0x05
}
    65c8:	cf 91       	pop	r28
    65ca:	df 91       	pop	r29
    65cc:	1f 91       	pop	r17
    65ce:	0f 91       	pop	r16
    65d0:	ff 90       	pop	r15
    65d2:	ef 90       	pop	r14
    65d4:	df 90       	pop	r13
    65d6:	cf 90       	pop	r12
    65d8:	bf 90       	pop	r11
    65da:	af 90       	pop	r10
    65dc:	9f 90       	pop	r9
    65de:	8f 90       	pop	r8
    65e0:	08 95       	ret

000065e2 <xio_open_usb>:
#define USB ds[XIO_DEV_USB]						// device struct accessoor
#define USBu us[XIO_DEV_USB_OFFSET]				// usart extended struct accessor


/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
    65e2:	80 91 eb 23 	lds	r24, 0x23EB
    65e6:	90 91 ec 23 	lds	r25, 0x23EC
    65ea:	08 95       	ret

000065ec <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)	//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    65ec:	1f 92       	push	r1
    65ee:	0f 92       	push	r0
    65f0:	0f b6       	in	r0, 0x3f	; 63
    65f2:	0f 92       	push	r0
    65f4:	0b b6       	in	r0, 0x3b	; 59
    65f6:	0f 92       	push	r0
    65f8:	11 24       	eor	r1, r1
    65fa:	8f 93       	push	r24
    65fc:	9f 93       	push	r25
    65fe:	af 93       	push	r26
    6600:	bf 93       	push	r27
    6602:	ef 93       	push	r30
    6604:	ff 93       	push	r31
	if (USBu.tx_buf_head == USBu.tx_buf_tail) {	// buffer empty - disable ints
    6606:	90 91 56 23 	lds	r25, 0x2356
    660a:	80 91 55 23 	lds	r24, 0x2355
    660e:	98 17       	cp	r25, r24
    6610:	39 f4       	brne	.+14     	; 0x6620 <__vector_26+0x34>
		USBu.usart->CTRLA = CTRLA_RXON_TXOFF;	// won't work if you just &= it
    6612:	e0 91 58 23 	lds	r30, 0x2358
    6616:	f0 91 59 23 	lds	r31, 0x2359
    661a:	80 e2       	ldi	r24, 0x20	; 32
    661c:	83 83       	std	Z+3, r24	; 0x03
    661e:	1d c0       	rjmp	.+58     	; 0x665a <__vector_26+0x6e>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(USB.flags)) {
    6620:	80 91 d8 23 	lds	r24, 0x23D8
    6624:	90 91 d9 23 	lds	r25, 0x23D9
    6628:	93 fd       	sbrc	r25, 3
    662a:	17 c0       	rjmp	.+46     	; 0x665a <__vector_26+0x6e>
		if (--(USBu.tx_buf_tail) == 0) {		// advance tail and wrap 
    662c:	80 91 55 23 	lds	r24, 0x2355
    6630:	81 50       	subi	r24, 0x01	; 1
    6632:	80 93 55 23 	sts	0x2355, r24
    6636:	80 91 55 23 	lds	r24, 0x2355
    663a:	88 23       	and	r24, r24
    663c:	19 f4       	brne	.+6      	; 0x6644 <__vector_26+0x58>
			USBu.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one err (OBOE)
    663e:	81 e1       	ldi	r24, 0x11	; 17
    6640:	80 93 55 23 	sts	0x2355, r24
		}
		USBu.usart->DATA = USBu.tx_buf[USBu.tx_buf_tail]; // write to TX DATA reg
    6644:	e0 91 58 23 	lds	r30, 0x2358
    6648:	f0 91 59 23 	lds	r31, 0x2359
    664c:	a0 91 55 23 	lds	r26, 0x2355
    6650:	b0 e0       	ldi	r27, 0x00	; 0
    6652:	a2 59       	subi	r26, 0x92	; 146
    6654:	bc 4d       	sbci	r27, 0xDC	; 220
    6656:	8c 91       	ld	r24, X
    6658:	80 83       	st	Z, r24
	}
}
    665a:	ff 91       	pop	r31
    665c:	ef 91       	pop	r30
    665e:	bf 91       	pop	r27
    6660:	af 91       	pop	r26
    6662:	9f 91       	pop	r25
    6664:	8f 91       	pop	r24
    6666:	0f 90       	pop	r0
    6668:	0b be       	out	0x3b, r0	; 59
    666a:	0f 90       	pop	r0
    666c:	0f be       	out	0x3f, r0	; 63
    666e:	0f 90       	pop	r0
    6670:	1f 90       	pop	r1
    6672:	18 95       	reti

00006674 <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular buffers work
 */

ISR(USB_RX_ISR_vect)	//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    6674:	1f 92       	push	r1
    6676:	0f 92       	push	r0
    6678:	0f b6       	in	r0, 0x3f	; 63
    667a:	0f 92       	push	r0
    667c:	0b b6       	in	r0, 0x3b	; 59
    667e:	0f 92       	push	r0
    6680:	11 24       	eor	r1, r1
    6682:	2f 93       	push	r18
    6684:	3f 93       	push	r19
    6686:	4f 93       	push	r20
    6688:	5f 93       	push	r21
    668a:	6f 93       	push	r22
    668c:	7f 93       	push	r23
    668e:	8f 93       	push	r24
    6690:	9f 93       	push	r25
    6692:	af 93       	push	r26
    6694:	bf 93       	push	r27
    6696:	ef 93       	push	r30
    6698:	ff 93       	push	r31
	uint8_t c = USBu.usart->DATA;				// can only read DATA once
    669a:	e0 91 58 23 	lds	r30, 0x2358
    669e:	f0 91 59 23 	lds	r31, 0x2359
    66a2:	20 81       	ld	r18, Z

	// trap signals - do not insert character into RX queue
	if (c == ETX) {								// trap ^c signal
    66a4:	23 30       	cpi	r18, 0x03	; 3
    66a6:	31 f4       	brne	.+12     	; 0x66b4 <__vector_25+0x40>
		USB.sig = XIO_SIG_KILL;					// set signal value
    66a8:	84 e0       	ldi	r24, 0x04	; 4
    66aa:	80 93 db 23 	sts	0x23DB, r24
		signal_etx();							// call app-specific signal handler
    66ae:	0e 94 5b 2f 	call	0x5eb6	; 0x5eb6 <signal_etx>
    66b2:	25 c0       	rjmp	.+74     	; 0x66fe <__vector_25+0x8a>
		return;
	}

	// normal character path
	if ((--USBu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    66b4:	80 91 54 23 	lds	r24, 0x2354
    66b8:	81 50       	subi	r24, 0x01	; 1
    66ba:	80 93 54 23 	sts	0x2354, r24
    66be:	80 91 54 23 	lds	r24, 0x2354
    66c2:	88 23       	and	r24, r24
    66c4:	19 f4       	brne	.+6      	; 0x66cc <__vector_25+0x58>
		USBu.rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    66c6:	81 e1       	ldi	r24, 0x11	; 17
    66c8:	80 93 54 23 	sts	0x2354, r24
	}
	if (USBu.rx_buf_head != USBu.rx_buf_tail) {	// write char unless buffer full
    66cc:	90 91 54 23 	lds	r25, 0x2354
    66d0:	80 91 53 23 	lds	r24, 0x2353
    66d4:	98 17       	cp	r25, r24
    66d6:	39 f0       	breq	.+14     	; 0x66e6 <__vector_25+0x72>
		USBu.rx_buf[USBu.rx_buf_head] = c;
    66d8:	e0 91 54 23 	lds	r30, 0x2354
    66dc:	f0 e0       	ldi	r31, 0x00	; 0
    66de:	ee 5d       	subi	r30, 0xDE	; 222
    66e0:	fc 4d       	sbci	r31, 0xDC	; 220
    66e2:	22 af       	std	Z+58, r18	; 0x3a
    66e4:	0c c0       	rjmp	.+24     	; 0x66fe <__vector_25+0x8a>
		return;
	}
	// buffer-full handling
	if ((++USBu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    66e6:	80 91 54 23 	lds	r24, 0x2354
    66ea:	8f 5f       	subi	r24, 0xFF	; 255
    66ec:	80 93 54 23 	sts	0x2354, r24
    66f0:	80 91 54 23 	lds	r24, 0x2354
    66f4:	82 31       	cpi	r24, 0x12	; 18
    66f6:	18 f0       	brcs	.+6      	; 0x66fe <__vector_25+0x8a>
		USBu.rx_buf_head = 1;
    66f8:	81 e0       	ldi	r24, 0x01	; 1
    66fa:	80 93 54 23 	sts	0x2354, r24
	}
	// activate flow control here or before it gets to this level
}
    66fe:	ff 91       	pop	r31
    6700:	ef 91       	pop	r30
    6702:	bf 91       	pop	r27
    6704:	af 91       	pop	r26
    6706:	9f 91       	pop	r25
    6708:	8f 91       	pop	r24
    670a:	7f 91       	pop	r23
    670c:	6f 91       	pop	r22
    670e:	5f 91       	pop	r21
    6710:	4f 91       	pop	r20
    6712:	3f 91       	pop	r19
    6714:	2f 91       	pop	r18
    6716:	0f 90       	pop	r0
    6718:	0b be       	out	0x3b, r0	; 59
    671a:	0f 90       	pop	r0
    671c:	0f be       	out	0x3f, r0	; 63
    671e:	0f 90       	pop	r0
    6720:	1f 90       	pop	r1
    6722:	18 95       	reti

00006724 <xio_init_usb>:
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
void xio_queue_RX_string_usb(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_USB, buf);}
void xio_init_usb()	// USB inits
{
    6724:	8f 92       	push	r8
    6726:	af 92       	push	r10
    6728:	cf 92       	push	r12
    672a:	ef 92       	push	r14
    672c:	ff 92       	push	r15
    672e:	0f 93       	push	r16
    6730:	1f 93       	push	r17
	xio_init_dev(XIO_DEV_USB, xio_open_usb, xio_setflags_usb, xio_putc_usb, xio_getc_usb, xio_readln_usb);
    6732:	81 e0       	ldi	r24, 0x01	; 1
    6734:	61 ef       	ldi	r22, 0xF1	; 241
    6736:	72 e3       	ldi	r23, 0x32	; 50
    6738:	4e ed       	ldi	r20, 0xDE	; 222
    673a:	53 e3       	ldi	r21, 0x33	; 51
    673c:	27 ed       	ldi	r18, 0xD7	; 215
    673e:	33 e3       	ldi	r19, 0x33	; 51
    6740:	02 ed       	ldi	r16, 0xD2	; 210
    6742:	13 e3       	ldi	r17, 0x33	; 51
    6744:	fb ec       	ldi	r31, 0xCB	; 203
    6746:	ef 2e       	mov	r14, r31
    6748:	f3 e3       	ldi	r31, 0x33	; 51
    674a:	ff 2e       	mov	r15, r31
    674c:	0e 94 9a 28 	call	0x5134	; 0x5134 <xio_init_dev>
	xio_init_usart(XIO_DEV_USB, XIO_DEV_USB_OFFSET, USB_INIT_bm, &USB_USART, &USB_PORT, USB_DIRCLR_bm, USB_DIRSET_bm, USB_OUTCLR_bm, USB_OUTSET_bm);
    6750:	81 e0       	ldi	r24, 0x01	; 1
    6752:	61 e0       	ldi	r22, 0x01	; 1
    6754:	45 e7       	ldi	r20, 0x75	; 117
    6756:	55 e5       	ldi	r21, 0x55	; 85
    6758:	20 ea       	ldi	r18, 0xA0	; 160
    675a:	38 e0       	ldi	r19, 0x08	; 8
    675c:	00 e4       	ldi	r16, 0x40	; 64
    675e:	16 e0       	ldi	r17, 0x06	; 6
    6760:	e5 e0       	ldi	r30, 0x05	; 5
    6762:	ee 2e       	mov	r14, r30
    6764:	7a e0       	ldi	r23, 0x0A	; 10
    6766:	c7 2e       	mov	r12, r23
    6768:	aa 24       	eor	r10, r10
    676a:	9a e0       	ldi	r25, 0x0A	; 10
    676c:	89 2e       	mov	r8, r25
    676e:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <xio_init_usart>
}
    6772:	1f 91       	pop	r17
    6774:	0f 91       	pop	r16
    6776:	ff 90       	pop	r15
    6778:	ef 90       	pop	r14
    677a:	cf 90       	pop	r12
    677c:	af 90       	pop	r10
    677e:	8f 90       	pop	r8
    6780:	08 95       	ret

00006782 <xio_queue_RX_string_usb>:
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
void xio_queue_RX_string_usb(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_USB, buf);}
    6782:	bc 01       	movw	r22, r24
    6784:	81 e0       	ldi	r24, 0x01	; 1
    6786:	0e 94 45 32 	call	0x648a	; 0x648a <xio_queue_RX_string_usart>
    678a:	08 95       	ret

0000678c <xio_queue_RX_char_usb>:
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
    678c:	68 2f       	mov	r22, r24
    678e:	81 e0       	ldi	r24, 0x01	; 1
    6790:	0e 94 15 32 	call	0x642a	; 0x642a <xio_queue_RX_char_usart>
    6794:	08 95       	ret

00006796 <xio_readln_usb>:
/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
    6796:	9c 01       	movw	r18, r24
    6798:	46 2f       	mov	r20, r22
    679a:	81 e0       	ldi	r24, 0x01	; 1
    679c:	b9 01       	movw	r22, r18
    679e:	0e 94 00 31 	call	0x6200	; 0x6200 <xio_readln_usart>
    67a2:	08 95       	ret

000067a4 <xio_getc_usb>:

/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
    67a4:	bc 01       	movw	r22, r24
    67a6:	81 e0       	ldi	r24, 0x01	; 1
    67a8:	0e 94 1d 30 	call	0x603a	; 0x603a <xio_getc_usart>
    67ac:	08 95       	ret

000067ae <xio_putc_usb>:


/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
    67ae:	98 2f       	mov	r25, r24
    67b0:	ab 01       	movw	r20, r22
    67b2:	81 e0       	ldi	r24, 0x01	; 1
    67b4:	69 2f       	mov	r22, r25
    67b6:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <xio_putc_usart>
    67ba:	08 95       	ret

000067bc <xio_setflags_usb>:
#define USBu us[XIO_DEV_USB_OFFSET]				// usart extended struct accessor


/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
    67bc:	bc 01       	movw	r22, r24
    67be:	81 e0       	ldi	r24, 0x01	; 1
    67c0:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <xio_setflags>
    67c4:	08 95       	ret

000067c6 <xio_open_rs485>:
extern struct xioUSART us[XIO_DEV_USART_COUNT];	// ref USART extended IO structs
#define RS ds[XIO_DEV_RS485]					// device struct accessoor
#define RSu us[XIO_DEV_RS485]					// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
    67c6:	80 91 d4 23 	lds	r24, 0x23D4
    67ca:	90 91 d5 23 	lds	r25, 0x23D5
    67ce:	08 95       	ret

000067d0 <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC1 data register empty
{
    67d0:	1f 92       	push	r1
    67d2:	0f 92       	push	r0
    67d4:	0f b6       	in	r0, 0x3f	; 63
    67d6:	0f 92       	push	r0
    67d8:	0b b6       	in	r0, 0x3b	; 59
    67da:	0f 92       	push	r0
    67dc:	11 24       	eor	r1, r1
    67de:	8f 93       	push	r24
    67e0:	9f 93       	push	r25
    67e2:	af 93       	push	r26
    67e4:	bf 93       	push	r27
    67e6:	ef 93       	push	r30
    67e8:	ff 93       	push	r31
	if (RSu.tx_buf_head == RSu.tx_buf_tail) {	// buffer empty - disable ints (Note)
    67ea:	90 91 27 23 	lds	r25, 0x2327
    67ee:	80 91 26 23 	lds	r24, 0x2326
    67f2:	98 17       	cp	r25, r24
    67f4:	39 f4       	brne	.+14     	; 0x6804 <__vector_29+0x34>
		RSu.usart->CTRLA = CTRLA_RXON_TXOFF_TXCON;	// doesn't work if you just &= it
    67f6:	e0 91 29 23 	lds	r30, 0x2329
    67fa:	f0 91 2a 23 	lds	r31, 0x232A
    67fe:	84 e2       	ldi	r24, 0x24	; 36
    6800:	83 83       	std	Z+3, r24	; 0x03
    6802:	23 c0       	rjmp	.+70     	; 0x684a <__vector_29+0x7a>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(RS.flags)) {
    6804:	80 91 c1 23 	lds	r24, 0x23C1
    6808:	90 91 c2 23 	lds	r25, 0x23C2
    680c:	93 fd       	sbrc	r25, 3
    680e:	1d c0       	rjmp	.+58     	; 0x684a <__vector_29+0x7a>
		if (--(RSu.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    6810:	80 91 26 23 	lds	r24, 0x2326
    6814:	81 50       	subi	r24, 0x01	; 1
    6816:	80 93 26 23 	sts	0x2326, r24
    681a:	80 91 26 23 	lds	r24, 0x2326
    681e:	88 23       	and	r24, r24
    6820:	19 f4       	brne	.+6      	; 0x6828 <__vector_29+0x58>
			RSu.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6822:	81 e1       	ldi	r24, 0x11	; 17
    6824:	80 93 26 23 	sts	0x2326, r24
		}
		RSu.port->OUTSET = (RS485_DE_bm | RS485_RE_bm);	// enable DE (active hi)
    6828:	e0 91 2b 23 	lds	r30, 0x232B
    682c:	f0 91 2c 23 	lds	r31, 0x232C
    6830:	80 e3       	ldi	r24, 0x30	; 48
    6832:	85 83       	std	Z+5, r24	; 0x05
														// disable RE (active lo)
		RSu.usart->DATA = RSu.tx_buf[RSu.tx_buf_tail];	// write char to TX DATA reg
    6834:	a0 91 29 23 	lds	r26, 0x2329
    6838:	b0 91 2a 23 	lds	r27, 0x232A
    683c:	e0 91 26 23 	lds	r30, 0x2326
    6840:	f0 e0       	ldi	r31, 0x00	; 0
    6842:	ee 5d       	subi	r30, 0xDE	; 222
    6844:	fc 4d       	sbci	r31, 0xDC	; 220
    6846:	85 8d       	ldd	r24, Z+29	; 0x1d
    6848:	8c 93       	st	X, r24
	}
}
    684a:	ff 91       	pop	r31
    684c:	ef 91       	pop	r30
    684e:	bf 91       	pop	r27
    6850:	af 91       	pop	r26
    6852:	9f 91       	pop	r25
    6854:	8f 91       	pop	r24
    6856:	0f 90       	pop	r0
    6858:	0b be       	out	0x3b, r0	; 59
    685a:	0f 90       	pop	r0
    685c:	0f be       	out	0x3f, r0	; 63
    685e:	0f 90       	pop	r0
    6860:	1f 90       	pop	r1
    6862:	18 95       	reti

00006864 <__vector_30>:

/* Note: Finding a buffer empty condition on the first byte of a string is common 
 * as the TX byte is often written by the task itself */

ISR(RS485_TXC_ISR_vect)		// ISR(USARTC1_TXC_vect) // USARTC1 transmission complete
{
    6864:	1f 92       	push	r1
    6866:	0f 92       	push	r0
    6868:	0f b6       	in	r0, 0x3f	; 63
    686a:	0f 92       	push	r0
    686c:	0b b6       	in	r0, 0x3b	; 59
    686e:	0f 92       	push	r0
    6870:	11 24       	eor	r1, r1
    6872:	8f 93       	push	r24
    6874:	ef 93       	push	r30
    6876:	ff 93       	push	r31
		RSu.port->OUTCLR = (RS485_DE_bm | RS485_RE_bm);	// disable DE (active hi)
    6878:	e0 91 2b 23 	lds	r30, 0x232B
    687c:	f0 91 2c 23 	lds	r31, 0x232C
    6880:	80 e3       	ldi	r24, 0x30	; 48
    6882:	86 83       	std	Z+6, r24	; 0x06
														// enable RE (active lo)
}
    6884:	ff 91       	pop	r31
    6886:	ef 91       	pop	r30
    6888:	8f 91       	pop	r24
    688a:	0f 90       	pop	r0
    688c:	0b be       	out	0x3b, r0	; 59
    688e:	0f 90       	pop	r0
    6890:	0f be       	out	0x3f, r0	; 63
    6892:	0f 90       	pop	r0
    6894:	1f 90       	pop	r1
    6896:	18 95       	reti

00006898 <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)	//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    6898:	1f 92       	push	r1
    689a:	0f 92       	push	r0
    689c:	0f b6       	in	r0, 0x3f	; 63
    689e:	0f 92       	push	r0
    68a0:	0b b6       	in	r0, 0x3b	; 59
    68a2:	0f 92       	push	r0
    68a4:	11 24       	eor	r1, r1
    68a6:	2f 93       	push	r18
    68a8:	3f 93       	push	r19
    68aa:	4f 93       	push	r20
    68ac:	5f 93       	push	r21
    68ae:	6f 93       	push	r22
    68b0:	7f 93       	push	r23
    68b2:	8f 93       	push	r24
    68b4:	9f 93       	push	r25
    68b6:	af 93       	push	r26
    68b8:	bf 93       	push	r27
    68ba:	ef 93       	push	r30
    68bc:	ff 93       	push	r31
	uint8_t c = RSu.usart->DATA;				// can only read DATA once
    68be:	e0 91 29 23 	lds	r30, 0x2329
    68c2:	f0 91 2a 23 	lds	r31, 0x232A
    68c6:	20 81       	ld	r18, Z

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    68c8:	23 30       	cpi	r18, 0x03	; 3
    68ca:	31 f4       	brne	.+12     	; 0x68d8 <__vector_28+0x40>
		RS.sig = XIO_SIG_KILL;					// set signal value
    68cc:	84 e0       	ldi	r24, 0x04	; 4
    68ce:	80 93 c4 23 	sts	0x23C4, r24
		signal_etx();							// call app-specific signal handler
    68d2:	0e 94 5b 2f 	call	0x5eb6	; 0x5eb6 <signal_etx>
    68d6:	25 c0       	rjmp	.+74     	; 0x6922 <__vector_28+0x8a>
		return;
	}

	// normal path
	if ((--RSu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    68d8:	80 91 25 23 	lds	r24, 0x2325
    68dc:	81 50       	subi	r24, 0x01	; 1
    68de:	80 93 25 23 	sts	0x2325, r24
    68e2:	80 91 25 23 	lds	r24, 0x2325
    68e6:	88 23       	and	r24, r24
    68e8:	19 f4       	brne	.+6      	; 0x68f0 <__vector_28+0x58>
		RSu.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    68ea:	81 e1       	ldi	r24, 0x11	; 17
    68ec:	80 93 25 23 	sts	0x2325, r24
	}
	if (RSu.rx_buf_head != RSu.rx_buf_tail) {	// write char unless buffer full
    68f0:	90 91 25 23 	lds	r25, 0x2325
    68f4:	80 91 24 23 	lds	r24, 0x2324
    68f8:	98 17       	cp	r25, r24
    68fa:	39 f0       	breq	.+14     	; 0x690a <__vector_28+0x72>
		RSu.rx_buf[RSu.rx_buf_head] = c;		// (= USARTC0.DATA;)
    68fc:	e0 91 25 23 	lds	r30, 0x2325
    6900:	f0 e0       	ldi	r31, 0x00	; 0
    6902:	ee 5d       	subi	r30, 0xDE	; 222
    6904:	fc 4d       	sbci	r31, 0xDC	; 220
    6906:	23 87       	std	Z+11, r18	; 0x0b
    6908:	0c c0       	rjmp	.+24     	; 0x6922 <__vector_28+0x8a>
		return;
	}
	// buffer-full handling
	if ((++RSu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    690a:	80 91 25 23 	lds	r24, 0x2325
    690e:	8f 5f       	subi	r24, 0xFF	; 255
    6910:	80 93 25 23 	sts	0x2325, r24
    6914:	80 91 25 23 	lds	r24, 0x2325
    6918:	82 31       	cpi	r24, 0x12	; 18
    691a:	18 f0       	brcs	.+6      	; 0x6922 <__vector_28+0x8a>
		RSu.rx_buf_head = 1;
    691c:	81 e0       	ldi	r24, 0x01	; 1
    691e:	80 93 25 23 	sts	0x2325, r24
	}
	// activate flow control here or before it gets to this level
}
    6922:	ff 91       	pop	r31
    6924:	ef 91       	pop	r30
    6926:	bf 91       	pop	r27
    6928:	af 91       	pop	r26
    692a:	9f 91       	pop	r25
    692c:	8f 91       	pop	r24
    692e:	7f 91       	pop	r23
    6930:	6f 91       	pop	r22
    6932:	5f 91       	pop	r21
    6934:	4f 91       	pop	r20
    6936:	3f 91       	pop	r19
    6938:	2f 91       	pop	r18
    693a:	0f 90       	pop	r0
    693c:	0b be       	out	0x3b, r0	; 59
    693e:	0f 90       	pop	r0
    6940:	0f be       	out	0x3f, r0	; 63
    6942:	0f 90       	pop	r0
    6944:	1f 90       	pop	r1
    6946:	18 95       	reti

00006948 <xio_init_rs485>:
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
void xio_queue_RX_string_rs485(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_RS485, buf);}
void xio_init_rs485()	// RS485 init
{
    6948:	8f 92       	push	r8
    694a:	af 92       	push	r10
    694c:	cf 92       	push	r12
    694e:	ef 92       	push	r14
    6950:	ff 92       	push	r15
    6952:	0f 93       	push	r16
    6954:	1f 93       	push	r17
	xio_init_dev(XIO_DEV_RS485, xio_open_rs485, xio_setflags_rs485, xio_putc_rs485, xio_getc_rs485, xio_readln_rs485);
    6956:	80 e0       	ldi	r24, 0x00	; 0
    6958:	63 ee       	ldi	r22, 0xE3	; 227
    695a:	73 e3       	ldi	r23, 0x33	; 51
    695c:	41 ef       	ldi	r20, 0xF1	; 241
    695e:	54 e3       	ldi	r21, 0x34	; 52
    6960:	2a ee       	ldi	r18, 0xEA	; 234
    6962:	34 e3       	ldi	r19, 0x34	; 52
    6964:	05 ee       	ldi	r16, 0xE5	; 229
    6966:	14 e3       	ldi	r17, 0x34	; 52
    6968:	ae ed       	ldi	r26, 0xDE	; 222
    696a:	ea 2e       	mov	r14, r26
    696c:	a4 e3       	ldi	r26, 0x34	; 52
    696e:	fa 2e       	mov	r15, r26
    6970:	0e 94 9a 28 	call	0x5134	; 0x5134 <xio_init_dev>
	xio_init_usart(XIO_DEV_RS485, XIO_DEV_RS485_OFFSET, RS485_INIT_bm, &RS485_USART, &RS485_PORT, RS485_DIRCLR_bm, RS485_DIRSET_bm, RS485_OUTCLR_bm, RS485_OUTSET_bm);
    6974:	80 e0       	ldi	r24, 0x00	; 0
    6976:	60 e0       	ldi	r22, 0x00	; 0
    6978:	45 e7       	ldi	r20, 0x75	; 117
    697a:	55 e1       	ldi	r21, 0x15	; 21
    697c:	20 eb       	ldi	r18, 0xB0	; 176
    697e:	38 e0       	ldi	r19, 0x08	; 8
    6980:	00 e4       	ldi	r16, 0x40	; 64
    6982:	16 e0       	ldi	r17, 0x06	; 6
    6984:	f0 e4       	ldi	r31, 0x40	; 64
    6986:	ef 2e       	mov	r14, r31
    6988:	e0 eb       	ldi	r30, 0xB0	; 176
    698a:	ce 2e       	mov	r12, r30
    698c:	70 e3       	ldi	r23, 0x30	; 48
    698e:	a7 2e       	mov	r10, r23
    6990:	90 e8       	ldi	r25, 0x80	; 128
    6992:	89 2e       	mov	r8, r25
    6994:	0e 94 5c 32 	call	0x64b8	; 0x64b8 <xio_init_usart>
}
    6998:	1f 91       	pop	r17
    699a:	0f 91       	pop	r16
    699c:	ff 90       	pop	r15
    699e:	ef 90       	pop	r14
    69a0:	cf 90       	pop	r12
    69a2:	af 90       	pop	r10
    69a4:	8f 90       	pop	r8
    69a6:	08 95       	ret

000069a8 <xio_queue_RX_string_rs485>:
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
void xio_queue_RX_string_rs485(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_RS485, buf);}
    69a8:	bc 01       	movw	r22, r24
    69aa:	80 e0       	ldi	r24, 0x00	; 0
    69ac:	0e 94 45 32 	call	0x648a	; 0x648a <xio_queue_RX_string_usart>
    69b0:	08 95       	ret

000069b2 <xio_queue_RX_char_rs485>:
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
    69b2:	68 2f       	mov	r22, r24
    69b4:	80 e0       	ldi	r24, 0x00	; 0
    69b6:	0e 94 15 32 	call	0x642a	; 0x642a <xio_queue_RX_char_usart>
    69ba:	08 95       	ret

000069bc <xio_readln_rs485>:
/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
    69bc:	9c 01       	movw	r18, r24
    69be:	46 2f       	mov	r20, r22
    69c0:	80 e0       	ldi	r24, 0x00	; 0
    69c2:	b9 01       	movw	r22, r18
    69c4:	0e 94 00 31 	call	0x6200	; 0x6200 <xio_readln_usart>
    69c8:	08 95       	ret

000069ca <xio_getc_rs485>:

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
    69ca:	bc 01       	movw	r22, r24
    69cc:	80 e0       	ldi	r24, 0x00	; 0
    69ce:	0e 94 1d 30 	call	0x603a	; 0x603a <xio_getc_usart>
    69d2:	08 95       	ret

000069d4 <xio_putc_rs485>:
#define RSu us[XIO_DEV_RS485]					// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
    69d4:	98 2f       	mov	r25, r24
    69d6:	ab 01       	movw	r20, r22
    69d8:	80 e0       	ldi	r24, 0x00	; 0
    69da:	69 2f       	mov	r22, r25
    69dc:	0e 94 8f 2f 	call	0x5f1e	; 0x5f1e <xio_putc_usart>
    69e0:	08 95       	ret

000069e2 <xio_setflags_rs485>:
#define RS ds[XIO_DEV_RS485]					// device struct accessoor
#define RSu us[XIO_DEV_RS485]					// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
    69e2:	bc 01       	movw	r22, r24
    69e4:	80 e0       	ldi	r24, 0x00	; 0
    69e6:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <xio_setflags>
    69ea:	08 95       	ret

000069ec <xio_open_pgm>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

struct __file * xio_open_pgm(const prog_char *addr)
{
	PGM.flags &= XIO_FLAG_RESET_gm;			// reset flag signaling bits
    69ec:	20 91 06 24 	lds	r18, 0x2406
    69f0:	30 91 07 24 	lds	r19, 0x2407
    69f4:	3f 70       	andi	r19, 0x0F	; 15
    69f6:	20 93 06 24 	sts	0x2406, r18
    69fa:	30 93 07 24 	sts	0x2407, r19
	PGM.sig = 0;							// reset signal
    69fe:	10 92 09 24 	sts	0x2409, r1
	PGMf.pgmbase_P = (PROGMEM char *)addr;	// might want to range check this
    6a02:	80 93 b3 23 	sts	0x23B3, r24
    6a06:	90 93 b4 23 	sts	0x23B4, r25
	PGMf.len = 0;							// initialize buffer pointer
    6a0a:	10 92 b1 23 	sts	0x23B1, r1
    6a0e:	10 92 b2 23 	sts	0x23B2, r1
	return(PGM.fdev);							// return pointer to the fdev stream
}
    6a12:	80 91 19 24 	lds	r24, 0x2419
    6a16:	90 91 1a 24 	lds	r25, 0x241A
    6a1a:	08 95       	ret

00006a1c <xio_putc_pgm>:
 */

int xio_putc_pgm(const char c, struct __file *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    6a1c:	8f ef       	ldi	r24, 0xFF	; 255
    6a1e:	9f ef       	ldi	r25, 0xFF	; 255
    6a20:	08 95       	ret

00006a22 <xio_readln_pgm>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_pgm(char *buf, const uint8_t size)
{
    6a22:	9c 01       	movw	r18, r24
	if (!(PGMf.pgmbase_P)) {					// return error if no file is open
    6a24:	80 91 b3 23 	lds	r24, 0x23B3
    6a28:	90 91 b4 23 	lds	r25, 0x23B4
    6a2c:	89 2b       	or	r24, r25
    6a2e:	19 f4       	brne	.+6      	; 0x6a36 <xio_readln_pgm+0x14>
    6a30:	26 e0       	ldi	r18, 0x06	; 6
    6a32:	30 e0       	ldi	r19, 0x00	; 0
    6a34:	1b c0       	rjmp	.+54     	; 0x6a6c <xio_readln_pgm+0x4a>
		return (XIO_FILE_NOT_OPEN);
	}
	PGM.sig = XIO_SIG_OK;						// initialize signal
    6a36:	10 92 09 24 	sts	0x2409, r1
	if (fgets(buf, size, PGM.fdev) == NULL) {
    6a3a:	40 91 19 24 	lds	r20, 0x2419
    6a3e:	50 91 1a 24 	lds	r21, 0x241A
    6a42:	c9 01       	movw	r24, r18
    6a44:	70 e0       	ldi	r23, 0x00	; 0
    6a46:	0e 94 18 48 	call	0x9030	; 0x9030 <fgets>
    6a4a:	89 2b       	or	r24, r25
    6a4c:	19 f0       	breq	.+6      	; 0x6a54 <xio_readln_pgm+0x32>
    6a4e:	20 e0       	ldi	r18, 0x00	; 0
    6a50:	30 e0       	ldi	r19, 0x00	; 0
    6a52:	0c c0       	rjmp	.+24     	; 0x6a6c <xio_readln_pgm+0x4a>
		PGMf.pgmbase_P = NULL;
    6a54:	10 92 b3 23 	sts	0x23B3, r1
    6a58:	10 92 b4 23 	sts	0x23B4, r1
		clearerr(PGM.fdev);
    6a5c:	80 91 19 24 	lds	r24, 0x2419
    6a60:	90 91 1a 24 	lds	r25, 0x241A
    6a64:	0e 94 13 48 	call	0x9026	; 0x9026 <clearerr>
    6a68:	25 e0       	ldi	r18, 0x05	; 5
    6a6a:	30 e0       	ldi	r19, 0x00	; 0
		return (XIO_EOF);
	}
	return (XIO_OK);
}
    6a6c:	c9 01       	movw	r24, r18
    6a6e:	08 95       	ret

00006a70 <xio_getc_pgm>:
 */

int xio_getc_pgm(struct __file *stream)
{

	if (PGM.flags & XIO_FLAG_EOF_bm) {
    6a70:	20 91 06 24 	lds	r18, 0x2406
    6a74:	30 91 07 24 	lds	r19, 0x2407
    6a78:	35 ff       	sbrs	r19, 5
    6a7a:	06 c0       	rjmp	.+12     	; 0x6a88 <xio_getc_pgm+0x18>
		PGM.sig = XIO_SIG_EOF;
    6a7c:	83 e0       	ldi	r24, 0x03	; 3
    6a7e:	80 93 09 24 	sts	0x2409, r24
    6a82:	2e ef       	ldi	r18, 0xFE	; 254
    6a84:	3f ef       	ldi	r19, 0xFF	; 255
    6a86:	3e c0       	rjmp	.+124    	; 0x6b04 <xio_getc_pgm+0x94>
		return (_FDEV_EOF);
	}
	if ((PGM.c = pgm_read_byte(&PGMf.pgmbase_P[PGMf.len])) == NUL) {
    6a88:	80 91 b1 23 	lds	r24, 0x23B1
    6a8c:	90 91 b2 23 	lds	r25, 0x23B2
    6a90:	e0 91 b3 23 	lds	r30, 0x23B3
    6a94:	f0 91 b4 23 	lds	r31, 0x23B4
    6a98:	e8 0f       	add	r30, r24
    6a9a:	f9 1f       	adc	r31, r25
    6a9c:	e4 91       	lpm	r30, Z+
    6a9e:	e0 93 0a 24 	sts	0x240A, r30
    6aa2:	ee 23       	and	r30, r30
    6aa4:	29 f4       	brne	.+10     	; 0x6ab0 <xio_getc_pgm+0x40>
		PGM.flags |= XIO_FLAG_EOF_bm;
    6aa6:	30 62       	ori	r19, 0x20	; 32
    6aa8:	20 93 06 24 	sts	0x2406, r18
    6aac:	30 93 07 24 	sts	0x2407, r19
	}
	++PGMf.len;
    6ab0:	01 96       	adiw	r24, 0x01	; 1
    6ab2:	80 93 b1 23 	sts	0x23B1, r24
    6ab6:	90 93 b2 23 	sts	0x23B2, r25
	if (!LINEMODE(PGM.flags)) {			// processing is simple if not LINEMODE
    6aba:	90 91 06 24 	lds	r25, 0x2406
    6abe:	96 fd       	sbrc	r25, 6
    6ac0:	03 c0       	rjmp	.+6      	; 0x6ac8 <xio_getc_pgm+0x58>
		if (ECHO(PGM.flags)) {
    6ac2:	94 ff       	sbrs	r25, 4
    6ac4:	1b c0       	rjmp	.+54     	; 0x6afc <xio_getc_pgm+0x8c>
    6ac6:	11 c0       	rjmp	.+34     	; 0x6aea <xio_getc_pgm+0x7a>
			putchar(PGM.c);
		}
		return (PGM.c);
	}
	// now do the LINEMODE stuff
	if (PGM.c == NUL) {					// perform newline substitutions
    6ac8:	80 91 0a 24 	lds	r24, 0x240A
    6acc:	88 23       	and	r24, r24
    6ace:	31 f0       	breq	.+12     	; 0x6adc <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if (PGM.c == '\r') {
    6ad0:	8d 30       	cpi	r24, 0x0D	; 13
    6ad2:	21 f0       	breq	.+8      	; 0x6adc <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if ((SEMICOLONS(PGM.flags)) && (PGM.c == ';')) {
    6ad4:	97 ff       	sbrs	r25, 7
    6ad6:	05 c0       	rjmp	.+10     	; 0x6ae2 <xio_getc_pgm+0x72>
    6ad8:	8b 33       	cpi	r24, 0x3B	; 59
    6ada:	19 f4       	brne	.+6      	; 0x6ae2 <xio_getc_pgm+0x72>
		PGM.c = '\n';
    6adc:	8a e0       	ldi	r24, 0x0A	; 10
    6ade:	80 93 0a 24 	sts	0x240A, r24
	}
	if (ECHO(PGM.flags)) {
    6ae2:	80 91 06 24 	lds	r24, 0x2406
    6ae6:	84 ff       	sbrs	r24, 4
    6ae8:	09 c0       	rjmp	.+18     	; 0x6afc <xio_getc_pgm+0x8c>
		putchar(PGM.c);
    6aea:	60 91 02 25 	lds	r22, 0x2502
    6aee:	70 91 03 25 	lds	r23, 0x2503
    6af2:	80 91 0a 24 	lds	r24, 0x240A
    6af6:	90 e0       	ldi	r25, 0x00	; 0
    6af8:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
	}
	return (PGM.c);
    6afc:	80 91 0a 24 	lds	r24, 0x240A
    6b00:	28 2f       	mov	r18, r24
    6b02:	30 e0       	ldi	r19, 0x00	; 0
}
    6b04:	c9 01       	movw	r24, r18
    6b06:	08 95       	ret

00006b08 <xio_setflags_pgm>:
/*
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
    6b08:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_PGM, control);
    6b0a:	83 e0       	ldi	r24, 0x03	; 3
    6b0c:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <xio_setflags>
	return (XIO_OK);									// for now it's always OK
}
    6b10:	80 e0       	ldi	r24, 0x00	; 0
    6b12:	90 e0       	ldi	r25, 0x00	; 0
    6b14:	08 95       	ret

00006b16 <xio_init_pgm>:
 */

void xio_init_pgm(const uint8_t dev, const uint8_t offset, const uint16_t control)
{
	// bind file struct to extended device parameters
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
    6b16:	90 e0       	ldi	r25, 0x00	; 0
    6b18:	27 e1       	ldi	r18, 0x17	; 23
    6b1a:	30 e0       	ldi	r19, 0x00	; 0
    6b1c:	82 9f       	mul	r24, r18
    6b1e:	f0 01       	movw	r30, r0
    6b20:	83 9f       	mul	r24, r19
    6b22:	f0 0d       	add	r31, r0
    6b24:	92 9f       	mul	r25, r18
    6b26:	f0 0d       	add	r31, r0
    6b28:	11 24       	eor	r1, r1
    6b2a:	ef 53       	subi	r30, 0x3F	; 63
    6b2c:	fc 4d       	sbci	r31, 0xDC	; 220
    6b2e:	86 e0       	ldi	r24, 0x06	; 6
    6b30:	68 9f       	mul	r22, r24
    6b32:	b0 01       	movw	r22, r0
    6b34:	11 24       	eor	r1, r1
    6b36:	61 55       	subi	r22, 0x51	; 81
    6b38:	7c 4d       	sbci	r23, 0xDC	; 220
    6b3a:	61 8b       	std	Z+17, r22	; 0x11
    6b3c:	72 8b       	std	Z+18, r23	; 0x12
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
	xio_setflags(XIO_DEV_PGM, control);
    6b3e:	83 e0       	ldi	r24, 0x03	; 3
    6b40:	ba 01       	movw	r22, r20
    6b42:	0e 94 b1 27 	call	0x4f62	; 0x4f62 <xio_setflags>
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
	// might be useful to sanity check the control bits before calling set flags
	//	- RD and BLOCK are mandatory
	// 	- WR and NOBLOCK are restricted
	xio_setflags_pgm(control);
}
    6b46:	08 95       	ret

00006b48 <net_init>:
 */

void net_init() 
{
	
}
    6b48:	08 95       	ret

00006b4a <tg_repeater>:
void tg_repeater()
{
	char c;

	while (TRUE) {
		c = xio_getc(XIO_DEV_USB);		// blocking read
    6b4a:	81 e0       	ldi	r24, 0x01	; 1
    6b4c:	0e 94 64 28 	call	0x50c8	; 0x50c8 <xio_getc>
    6b50:	68 2f       	mov	r22, r24
		xio_putc(XIO_DEV_RS485, c);		// transfer to RS485 port
    6b52:	80 e0       	ldi	r24, 0x00	; 0
    6b54:	0e 94 47 28 	call	0x508e	; 0x508e <xio_putc>
    6b58:	f8 cf       	rjmp	.-16     	; 0x6b4a <tg_repeater>

00006b5a <__lshrdi3>:
    6b5a:	ef 92       	push	r14
    6b5c:	ff 92       	push	r15
    6b5e:	0f 93       	push	r16
    6b60:	df 93       	push	r29
    6b62:	cf 93       	push	r28
    6b64:	cd b7       	in	r28, 0x3d	; 61
    6b66:	de b7       	in	r29, 0x3e	; 62
    6b68:	60 97       	sbiw	r28, 0x10	; 16
    6b6a:	cd bf       	out	0x3d, r28	; 61
    6b6c:	de bf       	out	0x3e, r29	; 62
    6b6e:	a8 2f       	mov	r26, r24
    6b70:	00 23       	and	r16, r16
    6b72:	09 f4       	brne	.+2      	; 0x6b76 <__lshrdi3+0x1c>
    6b74:	61 c0       	rjmp	.+194    	; 0x6c38 <__lshrdi3+0xde>
    6b76:	7e 01       	movw	r14, r28
    6b78:	08 94       	sec
    6b7a:	e1 1c       	adc	r14, r1
    6b7c:	f1 1c       	adc	r15, r1
    6b7e:	88 e0       	ldi	r24, 0x08	; 8
    6b80:	f7 01       	movw	r30, r14
    6b82:	11 92       	st	Z+, r1
    6b84:	8a 95       	dec	r24
    6b86:	e9 f7       	brne	.-6      	; 0x6b82 <__lshrdi3+0x28>
    6b88:	29 83       	std	Y+1, r18	; 0x01
    6b8a:	3a 83       	std	Y+2, r19	; 0x02
    6b8c:	4b 83       	std	Y+3, r20	; 0x03
    6b8e:	5c 83       	std	Y+4, r21	; 0x04
    6b90:	6d 83       	std	Y+5, r22	; 0x05
    6b92:	7e 83       	std	Y+6, r23	; 0x06
    6b94:	af 83       	std	Y+7, r26	; 0x07
    6b96:	98 87       	std	Y+8, r25	; 0x08
    6b98:	80 e2       	ldi	r24, 0x20	; 32
    6b9a:	80 1b       	sub	r24, r16
    6b9c:	e8 2f       	mov	r30, r24
    6b9e:	ff 27       	eor	r31, r31
    6ba0:	e7 fd       	sbrc	r30, 7
    6ba2:	f0 95       	com	r31
    6ba4:	4d 81       	ldd	r20, Y+5	; 0x05
    6ba6:	5e 81       	ldd	r21, Y+6	; 0x06
    6ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    6baa:	78 85       	ldd	r23, Y+8	; 0x08
    6bac:	18 16       	cp	r1, r24
    6bae:	84 f0       	brlt	.+32     	; 0x6bd0 <__lshrdi3+0x76>
    6bb0:	1d 86       	std	Y+13, r1	; 0x0d
    6bb2:	1e 86       	std	Y+14, r1	; 0x0e
    6bb4:	1f 86       	std	Y+15, r1	; 0x0f
    6bb6:	18 8a       	std	Y+16, r1	; 0x10
    6bb8:	88 27       	eor	r24, r24
    6bba:	99 27       	eor	r25, r25
    6bbc:	8e 1b       	sub	r24, r30
    6bbe:	9f 0b       	sbc	r25, r31
    6bc0:	04 c0       	rjmp	.+8      	; 0x6bca <__lshrdi3+0x70>
    6bc2:	76 95       	lsr	r23
    6bc4:	67 95       	ror	r22
    6bc6:	57 95       	ror	r21
    6bc8:	47 95       	ror	r20
    6bca:	8a 95       	dec	r24
    6bcc:	d2 f7       	brpl	.-12     	; 0x6bc2 <__lshrdi3+0x68>
    6bce:	28 c0       	rjmp	.+80     	; 0x6c20 <__lshrdi3+0xc6>
    6bd0:	20 2f       	mov	r18, r16
    6bd2:	33 27       	eor	r19, r19
    6bd4:	27 fd       	sbrc	r18, 7
    6bd6:	30 95       	com	r19
    6bd8:	db 01       	movw	r26, r22
    6bda:	ca 01       	movw	r24, r20
    6bdc:	02 2e       	mov	r0, r18
    6bde:	04 c0       	rjmp	.+8      	; 0x6be8 <__lshrdi3+0x8e>
    6be0:	b6 95       	lsr	r27
    6be2:	a7 95       	ror	r26
    6be4:	97 95       	ror	r25
    6be6:	87 95       	ror	r24
    6be8:	0a 94       	dec	r0
    6bea:	d2 f7       	brpl	.-12     	; 0x6be0 <__lshrdi3+0x86>
    6bec:	8d 87       	std	Y+13, r24	; 0x0d
    6bee:	9e 87       	std	Y+14, r25	; 0x0e
    6bf0:	af 87       	std	Y+15, r26	; 0x0f
    6bf2:	b8 8b       	std	Y+16, r27	; 0x10
    6bf4:	04 c0       	rjmp	.+8      	; 0x6bfe <__lshrdi3+0xa4>
    6bf6:	44 0f       	add	r20, r20
    6bf8:	55 1f       	adc	r21, r21
    6bfa:	66 1f       	adc	r22, r22
    6bfc:	77 1f       	adc	r23, r23
    6bfe:	ea 95       	dec	r30
    6c00:	d2 f7       	brpl	.-12     	; 0x6bf6 <__lshrdi3+0x9c>
    6c02:	89 81       	ldd	r24, Y+1	; 0x01
    6c04:	9a 81       	ldd	r25, Y+2	; 0x02
    6c06:	ab 81       	ldd	r26, Y+3	; 0x03
    6c08:	bc 81       	ldd	r27, Y+4	; 0x04
    6c0a:	04 c0       	rjmp	.+8      	; 0x6c14 <__lshrdi3+0xba>
    6c0c:	b6 95       	lsr	r27
    6c0e:	a7 95       	ror	r26
    6c10:	97 95       	ror	r25
    6c12:	87 95       	ror	r24
    6c14:	2a 95       	dec	r18
    6c16:	d2 f7       	brpl	.-12     	; 0x6c0c <__lshrdi3+0xb2>
    6c18:	48 2b       	or	r20, r24
    6c1a:	59 2b       	or	r21, r25
    6c1c:	6a 2b       	or	r22, r26
    6c1e:	7b 2b       	or	r23, r27
    6c20:	49 87       	std	Y+9, r20	; 0x09
    6c22:	5a 87       	std	Y+10, r21	; 0x0a
    6c24:	6b 87       	std	Y+11, r22	; 0x0b
    6c26:	7c 87       	std	Y+12, r23	; 0x0c
    6c28:	29 85       	ldd	r18, Y+9	; 0x09
    6c2a:	3a 85       	ldd	r19, Y+10	; 0x0a
    6c2c:	4b 85       	ldd	r20, Y+11	; 0x0b
    6c2e:	5c 85       	ldd	r21, Y+12	; 0x0c
    6c30:	6d 85       	ldd	r22, Y+13	; 0x0d
    6c32:	7e 85       	ldd	r23, Y+14	; 0x0e
    6c34:	af 85       	ldd	r26, Y+15	; 0x0f
    6c36:	98 89       	ldd	r25, Y+16	; 0x10
    6c38:	8a 2f       	mov	r24, r26
    6c3a:	60 96       	adiw	r28, 0x10	; 16
    6c3c:	cd bf       	out	0x3d, r28	; 61
    6c3e:	de bf       	out	0x3e, r29	; 62
    6c40:	cf 91       	pop	r28
    6c42:	df 91       	pop	r29
    6c44:	0f 91       	pop	r16
    6c46:	ff 90       	pop	r15
    6c48:	ef 90       	pop	r14
    6c4a:	08 95       	ret

00006c4c <__ashldi3>:
    6c4c:	ef 92       	push	r14
    6c4e:	ff 92       	push	r15
    6c50:	0f 93       	push	r16
    6c52:	df 93       	push	r29
    6c54:	cf 93       	push	r28
    6c56:	cd b7       	in	r28, 0x3d	; 61
    6c58:	de b7       	in	r29, 0x3e	; 62
    6c5a:	60 97       	sbiw	r28, 0x10	; 16
    6c5c:	cd bf       	out	0x3d, r28	; 61
    6c5e:	de bf       	out	0x3e, r29	; 62
    6c60:	a8 2f       	mov	r26, r24
    6c62:	00 23       	and	r16, r16
    6c64:	09 f4       	brne	.+2      	; 0x6c68 <__ashldi3+0x1c>
    6c66:	61 c0       	rjmp	.+194    	; 0x6d2a <__ashldi3+0xde>
    6c68:	7e 01       	movw	r14, r28
    6c6a:	08 94       	sec
    6c6c:	e1 1c       	adc	r14, r1
    6c6e:	f1 1c       	adc	r15, r1
    6c70:	88 e0       	ldi	r24, 0x08	; 8
    6c72:	f7 01       	movw	r30, r14
    6c74:	11 92       	st	Z+, r1
    6c76:	8a 95       	dec	r24
    6c78:	e9 f7       	brne	.-6      	; 0x6c74 <__ashldi3+0x28>
    6c7a:	29 83       	std	Y+1, r18	; 0x01
    6c7c:	3a 83       	std	Y+2, r19	; 0x02
    6c7e:	4b 83       	std	Y+3, r20	; 0x03
    6c80:	5c 83       	std	Y+4, r21	; 0x04
    6c82:	6d 83       	std	Y+5, r22	; 0x05
    6c84:	7e 83       	std	Y+6, r23	; 0x06
    6c86:	af 83       	std	Y+7, r26	; 0x07
    6c88:	98 87       	std	Y+8, r25	; 0x08
    6c8a:	80 e2       	ldi	r24, 0x20	; 32
    6c8c:	80 1b       	sub	r24, r16
    6c8e:	e8 2f       	mov	r30, r24
    6c90:	ff 27       	eor	r31, r31
    6c92:	e7 fd       	sbrc	r30, 7
    6c94:	f0 95       	com	r31
    6c96:	49 81       	ldd	r20, Y+1	; 0x01
    6c98:	5a 81       	ldd	r21, Y+2	; 0x02
    6c9a:	6b 81       	ldd	r22, Y+3	; 0x03
    6c9c:	7c 81       	ldd	r23, Y+4	; 0x04
    6c9e:	18 16       	cp	r1, r24
    6ca0:	84 f0       	brlt	.+32     	; 0x6cc2 <__ashldi3+0x76>
    6ca2:	19 86       	std	Y+9, r1	; 0x09
    6ca4:	1a 86       	std	Y+10, r1	; 0x0a
    6ca6:	1b 86       	std	Y+11, r1	; 0x0b
    6ca8:	1c 86       	std	Y+12, r1	; 0x0c
    6caa:	88 27       	eor	r24, r24
    6cac:	99 27       	eor	r25, r25
    6cae:	8e 1b       	sub	r24, r30
    6cb0:	9f 0b       	sbc	r25, r31
    6cb2:	04 c0       	rjmp	.+8      	; 0x6cbc <__ashldi3+0x70>
    6cb4:	44 0f       	add	r20, r20
    6cb6:	55 1f       	adc	r21, r21
    6cb8:	66 1f       	adc	r22, r22
    6cba:	77 1f       	adc	r23, r23
    6cbc:	8a 95       	dec	r24
    6cbe:	d2 f7       	brpl	.-12     	; 0x6cb4 <__ashldi3+0x68>
    6cc0:	28 c0       	rjmp	.+80     	; 0x6d12 <__ashldi3+0xc6>
    6cc2:	20 2f       	mov	r18, r16
    6cc4:	33 27       	eor	r19, r19
    6cc6:	27 fd       	sbrc	r18, 7
    6cc8:	30 95       	com	r19
    6cca:	db 01       	movw	r26, r22
    6ccc:	ca 01       	movw	r24, r20
    6cce:	02 2e       	mov	r0, r18
    6cd0:	04 c0       	rjmp	.+8      	; 0x6cda <__ashldi3+0x8e>
    6cd2:	88 0f       	add	r24, r24
    6cd4:	99 1f       	adc	r25, r25
    6cd6:	aa 1f       	adc	r26, r26
    6cd8:	bb 1f       	adc	r27, r27
    6cda:	0a 94       	dec	r0
    6cdc:	d2 f7       	brpl	.-12     	; 0x6cd2 <__ashldi3+0x86>
    6cde:	89 87       	std	Y+9, r24	; 0x09
    6ce0:	9a 87       	std	Y+10, r25	; 0x0a
    6ce2:	ab 87       	std	Y+11, r26	; 0x0b
    6ce4:	bc 87       	std	Y+12, r27	; 0x0c
    6ce6:	04 c0       	rjmp	.+8      	; 0x6cf0 <__ashldi3+0xa4>
    6ce8:	76 95       	lsr	r23
    6cea:	67 95       	ror	r22
    6cec:	57 95       	ror	r21
    6cee:	47 95       	ror	r20
    6cf0:	ea 95       	dec	r30
    6cf2:	d2 f7       	brpl	.-12     	; 0x6ce8 <__ashldi3+0x9c>
    6cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    6cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    6cf8:	af 81       	ldd	r26, Y+7	; 0x07
    6cfa:	b8 85       	ldd	r27, Y+8	; 0x08
    6cfc:	04 c0       	rjmp	.+8      	; 0x6d06 <__ashldi3+0xba>
    6cfe:	88 0f       	add	r24, r24
    6d00:	99 1f       	adc	r25, r25
    6d02:	aa 1f       	adc	r26, r26
    6d04:	bb 1f       	adc	r27, r27
    6d06:	2a 95       	dec	r18
    6d08:	d2 f7       	brpl	.-12     	; 0x6cfe <__ashldi3+0xb2>
    6d0a:	48 2b       	or	r20, r24
    6d0c:	59 2b       	or	r21, r25
    6d0e:	6a 2b       	or	r22, r26
    6d10:	7b 2b       	or	r23, r27
    6d12:	4d 87       	std	Y+13, r20	; 0x0d
    6d14:	5e 87       	std	Y+14, r21	; 0x0e
    6d16:	6f 87       	std	Y+15, r22	; 0x0f
    6d18:	78 8b       	std	Y+16, r23	; 0x10
    6d1a:	29 85       	ldd	r18, Y+9	; 0x09
    6d1c:	3a 85       	ldd	r19, Y+10	; 0x0a
    6d1e:	4b 85       	ldd	r20, Y+11	; 0x0b
    6d20:	5c 85       	ldd	r21, Y+12	; 0x0c
    6d22:	6d 85       	ldd	r22, Y+13	; 0x0d
    6d24:	7e 85       	ldd	r23, Y+14	; 0x0e
    6d26:	af 85       	ldd	r26, Y+15	; 0x0f
    6d28:	98 89       	ldd	r25, Y+16	; 0x10
    6d2a:	8a 2f       	mov	r24, r26
    6d2c:	60 96       	adiw	r28, 0x10	; 16
    6d2e:	cd bf       	out	0x3d, r28	; 61
    6d30:	de bf       	out	0x3e, r29	; 62
    6d32:	cf 91       	pop	r28
    6d34:	df 91       	pop	r29
    6d36:	0f 91       	pop	r16
    6d38:	ff 90       	pop	r15
    6d3a:	ef 90       	pop	r14
    6d3c:	08 95       	ret

00006d3e <__udivdi3>:
    6d3e:	ae e5       	ldi	r26, 0x5E	; 94
    6d40:	b0 e0       	ldi	r27, 0x00	; 0
    6d42:	e5 ea       	ldi	r30, 0xA5	; 165
    6d44:	f6 e3       	ldi	r31, 0x36	; 54
    6d46:	0c 94 32 45 	jmp	0x8a64	; 0x8a64 <__prologue_saves__>
    6d4a:	a8 e0       	ldi	r26, 0x08	; 8
    6d4c:	4e 01       	movw	r8, r28
    6d4e:	08 94       	sec
    6d50:	81 1c       	adc	r8, r1
    6d52:	91 1c       	adc	r9, r1
    6d54:	f4 01       	movw	r30, r8
    6d56:	6a 2e       	mov	r6, r26
    6d58:	11 92       	st	Z+, r1
    6d5a:	6a 94       	dec	r6
    6d5c:	e9 f7       	brne	.-6      	; 0x6d58 <__udivdi3+0x1a>
    6d5e:	29 83       	std	Y+1, r18	; 0x01
    6d60:	3a 83       	std	Y+2, r19	; 0x02
    6d62:	4b 83       	std	Y+3, r20	; 0x03
    6d64:	5c 83       	std	Y+4, r21	; 0x04
    6d66:	6d 83       	std	Y+5, r22	; 0x05
    6d68:	7e 83       	std	Y+6, r23	; 0x06
    6d6a:	8f 83       	std	Y+7, r24	; 0x07
    6d6c:	98 87       	std	Y+8, r25	; 0x08
    6d6e:	ce 01       	movw	r24, r28
    6d70:	09 96       	adiw	r24, 0x09	; 9
    6d72:	fc 01       	movw	r30, r24
    6d74:	11 92       	st	Z+, r1
    6d76:	aa 95       	dec	r26
    6d78:	e9 f7       	brne	.-6      	; 0x6d74 <__udivdi3+0x36>
    6d7a:	a9 86       	std	Y+9, r10	; 0x09
    6d7c:	ba 86       	std	Y+10, r11	; 0x0a
    6d7e:	cb 86       	std	Y+11, r12	; 0x0b
    6d80:	dc 86       	std	Y+12, r13	; 0x0c
    6d82:	ed 86       	std	Y+13, r14	; 0x0d
    6d84:	fe 86       	std	Y+14, r15	; 0x0e
    6d86:	0f 87       	std	Y+15, r16	; 0x0f
    6d88:	18 8b       	std	Y+16, r17	; 0x10
    6d8a:	29 84       	ldd	r2, Y+9	; 0x09
    6d8c:	3a 84       	ldd	r3, Y+10	; 0x0a
    6d8e:	4b 84       	ldd	r4, Y+11	; 0x0b
    6d90:	5c 84       	ldd	r5, Y+12	; 0x0c
    6d92:	ed 84       	ldd	r14, Y+13	; 0x0d
    6d94:	fe 84       	ldd	r15, Y+14	; 0x0e
    6d96:	0f 85       	ldd	r16, Y+15	; 0x0f
    6d98:	18 89       	ldd	r17, Y+16	; 0x10
    6d9a:	69 80       	ldd	r6, Y+1	; 0x01
    6d9c:	7a 80       	ldd	r7, Y+2	; 0x02
    6d9e:	8b 80       	ldd	r8, Y+3	; 0x03
    6da0:	9c 80       	ldd	r9, Y+4	; 0x04
    6da2:	6d a6       	std	Y+45, r6	; 0x2d
    6da4:	7e a6       	std	Y+46, r7	; 0x2e
    6da6:	8f a6       	std	Y+47, r8	; 0x2f
    6da8:	98 aa       	std	Y+48, r9	; 0x30
    6daa:	6d 80       	ldd	r6, Y+5	; 0x05
    6dac:	7e 80       	ldd	r7, Y+6	; 0x06
    6dae:	8f 80       	ldd	r8, Y+7	; 0x07
    6db0:	98 84       	ldd	r9, Y+8	; 0x08
    6db2:	e1 14       	cp	r14, r1
    6db4:	f1 04       	cpc	r15, r1
    6db6:	01 05       	cpc	r16, r1
    6db8:	11 05       	cpc	r17, r1
    6dba:	09 f0       	breq	.+2      	; 0x6dbe <__udivdi3+0x80>
    6dbc:	b3 c3       	rjmp	.+1894   	; 0x7524 <__udivdi3+0x7e6>
    6dbe:	62 14       	cp	r6, r2
    6dc0:	73 04       	cpc	r7, r3
    6dc2:	84 04       	cpc	r8, r4
    6dc4:	95 04       	cpc	r9, r5
    6dc6:	08 f0       	brcs	.+2      	; 0x6dca <__udivdi3+0x8c>
    6dc8:	3d c1       	rjmp	.+634    	; 0x7044 <__udivdi3+0x306>
    6dca:	00 e0       	ldi	r16, 0x00	; 0
    6dcc:	20 16       	cp	r2, r16
    6dce:	00 e0       	ldi	r16, 0x00	; 0
    6dd0:	30 06       	cpc	r3, r16
    6dd2:	01 e0       	ldi	r16, 0x01	; 1
    6dd4:	40 06       	cpc	r4, r16
    6dd6:	00 e0       	ldi	r16, 0x00	; 0
    6dd8:	50 06       	cpc	r5, r16
    6dda:	88 f4       	brcc	.+34     	; 0x6dfe <__udivdi3+0xc0>
    6ddc:	1f ef       	ldi	r17, 0xFF	; 255
    6dde:	21 16       	cp	r2, r17
    6de0:	31 04       	cpc	r3, r1
    6de2:	41 04       	cpc	r4, r1
    6de4:	51 04       	cpc	r5, r1
    6de6:	39 f0       	breq	.+14     	; 0x6df6 <__udivdi3+0xb8>
    6de8:	30 f0       	brcs	.+12     	; 0x6df6 <__udivdi3+0xb8>
    6dea:	48 e0       	ldi	r20, 0x08	; 8
    6dec:	e4 2e       	mov	r14, r20
    6dee:	f1 2c       	mov	r15, r1
    6df0:	01 2d       	mov	r16, r1
    6df2:	11 2d       	mov	r17, r1
    6df4:	18 c0       	rjmp	.+48     	; 0x6e26 <__udivdi3+0xe8>
    6df6:	ee 24       	eor	r14, r14
    6df8:	ff 24       	eor	r15, r15
    6dfa:	87 01       	movw	r16, r14
    6dfc:	14 c0       	rjmp	.+40     	; 0x6e26 <__udivdi3+0xe8>
    6dfe:	20 e0       	ldi	r18, 0x00	; 0
    6e00:	22 16       	cp	r2, r18
    6e02:	20 e0       	ldi	r18, 0x00	; 0
    6e04:	32 06       	cpc	r3, r18
    6e06:	20 e0       	ldi	r18, 0x00	; 0
    6e08:	42 06       	cpc	r4, r18
    6e0a:	21 e0       	ldi	r18, 0x01	; 1
    6e0c:	52 06       	cpc	r5, r18
    6e0e:	30 f0       	brcs	.+12     	; 0x6e1c <__udivdi3+0xde>
    6e10:	38 e1       	ldi	r19, 0x18	; 24
    6e12:	e3 2e       	mov	r14, r19
    6e14:	f1 2c       	mov	r15, r1
    6e16:	01 2d       	mov	r16, r1
    6e18:	11 2d       	mov	r17, r1
    6e1a:	05 c0       	rjmp	.+10     	; 0x6e26 <__udivdi3+0xe8>
    6e1c:	20 e1       	ldi	r18, 0x10	; 16
    6e1e:	e2 2e       	mov	r14, r18
    6e20:	f1 2c       	mov	r15, r1
    6e22:	01 2d       	mov	r16, r1
    6e24:	11 2d       	mov	r17, r1
    6e26:	d2 01       	movw	r26, r4
    6e28:	c1 01       	movw	r24, r2
    6e2a:	0e 2c       	mov	r0, r14
    6e2c:	04 c0       	rjmp	.+8      	; 0x6e36 <__udivdi3+0xf8>
    6e2e:	b6 95       	lsr	r27
    6e30:	a7 95       	ror	r26
    6e32:	97 95       	ror	r25
    6e34:	87 95       	ror	r24
    6e36:	0a 94       	dec	r0
    6e38:	d2 f7       	brpl	.-12     	; 0x6e2e <__udivdi3+0xf0>
    6e3a:	8d 5f       	subi	r24, 0xFD	; 253
    6e3c:	9f 4d       	sbci	r25, 0xDF	; 223
    6e3e:	dc 01       	movw	r26, r24
    6e40:	2c 91       	ld	r18, X
    6e42:	80 e2       	ldi	r24, 0x20	; 32
    6e44:	90 e0       	ldi	r25, 0x00	; 0
    6e46:	a0 e0       	ldi	r26, 0x00	; 0
    6e48:	b0 e0       	ldi	r27, 0x00	; 0
    6e4a:	8e 19       	sub	r24, r14
    6e4c:	9f 09       	sbc	r25, r15
    6e4e:	a0 0b       	sbc	r26, r16
    6e50:	b1 0b       	sbc	r27, r17
    6e52:	7c 01       	movw	r14, r24
    6e54:	8d 01       	movw	r16, r26
    6e56:	e2 1a       	sub	r14, r18
    6e58:	f1 08       	sbc	r15, r1
    6e5a:	01 09       	sbc	r16, r1
    6e5c:	11 09       	sbc	r17, r1
    6e5e:	e1 14       	cp	r14, r1
    6e60:	f1 04       	cpc	r15, r1
    6e62:	01 05       	cpc	r16, r1
    6e64:	11 05       	cpc	r17, r1
    6e66:	a1 f1       	breq	.+104    	; 0x6ed0 <__udivdi3+0x192>
    6e68:	0e 2c       	mov	r0, r14
    6e6a:	04 c0       	rjmp	.+8      	; 0x6e74 <__udivdi3+0x136>
    6e6c:	22 0c       	add	r2, r2
    6e6e:	33 1c       	adc	r3, r3
    6e70:	44 1c       	adc	r4, r4
    6e72:	55 1c       	adc	r5, r5
    6e74:	0a 94       	dec	r0
    6e76:	d2 f7       	brpl	.-12     	; 0x6e6c <__udivdi3+0x12e>
    6e78:	a4 01       	movw	r20, r8
    6e7a:	93 01       	movw	r18, r6
    6e7c:	0e 2c       	mov	r0, r14
    6e7e:	04 c0       	rjmp	.+8      	; 0x6e88 <__udivdi3+0x14a>
    6e80:	22 0f       	add	r18, r18
    6e82:	33 1f       	adc	r19, r19
    6e84:	44 1f       	adc	r20, r20
    6e86:	55 1f       	adc	r21, r21
    6e88:	0a 94       	dec	r0
    6e8a:	d2 f7       	brpl	.-12     	; 0x6e80 <__udivdi3+0x142>
    6e8c:	80 e2       	ldi	r24, 0x20	; 32
    6e8e:	90 e0       	ldi	r25, 0x00	; 0
    6e90:	8e 19       	sub	r24, r14
    6e92:	9f 09       	sbc	r25, r15
    6e94:	6d a4       	ldd	r6, Y+45	; 0x2d
    6e96:	7e a4       	ldd	r7, Y+46	; 0x2e
    6e98:	8f a4       	ldd	r8, Y+47	; 0x2f
    6e9a:	98 a8       	ldd	r9, Y+48	; 0x30
    6e9c:	04 c0       	rjmp	.+8      	; 0x6ea6 <__udivdi3+0x168>
    6e9e:	96 94       	lsr	r9
    6ea0:	87 94       	ror	r8
    6ea2:	77 94       	ror	r7
    6ea4:	67 94       	ror	r6
    6ea6:	8a 95       	dec	r24
    6ea8:	d2 f7       	brpl	.-12     	; 0x6e9e <__udivdi3+0x160>
    6eaa:	62 2a       	or	r6, r18
    6eac:	73 2a       	or	r7, r19
    6eae:	84 2a       	or	r8, r20
    6eb0:	95 2a       	or	r9, r21
    6eb2:	ad a4       	ldd	r10, Y+45	; 0x2d
    6eb4:	be a4       	ldd	r11, Y+46	; 0x2e
    6eb6:	cf a4       	ldd	r12, Y+47	; 0x2f
    6eb8:	d8 a8       	ldd	r13, Y+48	; 0x30
    6eba:	04 c0       	rjmp	.+8      	; 0x6ec4 <__udivdi3+0x186>
    6ebc:	aa 0c       	add	r10, r10
    6ebe:	bb 1c       	adc	r11, r11
    6ec0:	cc 1c       	adc	r12, r12
    6ec2:	dd 1c       	adc	r13, r13
    6ec4:	ea 94       	dec	r14
    6ec6:	d2 f7       	brpl	.-12     	; 0x6ebc <__udivdi3+0x17e>
    6ec8:	ad a6       	std	Y+45, r10	; 0x2d
    6eca:	be a6       	std	Y+46, r11	; 0x2e
    6ecc:	cf a6       	std	Y+47, r12	; 0x2f
    6ece:	d8 aa       	std	Y+48, r13	; 0x30
    6ed0:	62 01       	movw	r12, r4
    6ed2:	ee 24       	eor	r14, r14
    6ed4:	ff 24       	eor	r15, r15
    6ed6:	cd aa       	std	Y+53, r12	; 0x35
    6ed8:	de aa       	std	Y+54, r13	; 0x36
    6eda:	ef aa       	std	Y+55, r14	; 0x37
    6edc:	f8 ae       	std	Y+56, r15	; 0x38
    6ede:	92 01       	movw	r18, r4
    6ee0:	81 01       	movw	r16, r2
    6ee2:	20 70       	andi	r18, 0x00	; 0
    6ee4:	30 70       	andi	r19, 0x00	; 0
    6ee6:	09 af       	std	Y+57, r16	; 0x39
    6ee8:	1a af       	std	Y+58, r17	; 0x3a
    6eea:	2b af       	std	Y+59, r18	; 0x3b
    6eec:	3c af       	std	Y+60, r19	; 0x3c
    6eee:	c4 01       	movw	r24, r8
    6ef0:	b3 01       	movw	r22, r6
    6ef2:	a7 01       	movw	r20, r14
    6ef4:	96 01       	movw	r18, r12
    6ef6:	0e 94 10 45 	call	0x8a20	; 0x8a20 <__udivmodsi4>
    6efa:	7b 01       	movw	r14, r22
    6efc:	8c 01       	movw	r16, r24
    6efe:	c4 01       	movw	r24, r8
    6f00:	b3 01       	movw	r22, r6
    6f02:	2d a9       	ldd	r18, Y+53	; 0x35
    6f04:	3e a9       	ldd	r19, Y+54	; 0x36
    6f06:	4f a9       	ldd	r20, Y+55	; 0x37
    6f08:	58 ad       	ldd	r21, Y+56	; 0x38
    6f0a:	0e 94 10 45 	call	0x8a20	; 0x8a20 <__udivmodsi4>
    6f0e:	c9 01       	movw	r24, r18
    6f10:	da 01       	movw	r26, r20
    6f12:	3c 01       	movw	r6, r24
    6f14:	4d 01       	movw	r8, r26
    6f16:	c4 01       	movw	r24, r8
    6f18:	b3 01       	movw	r22, r6
    6f1a:	29 ad       	ldd	r18, Y+57	; 0x39
    6f1c:	3a ad       	ldd	r19, Y+58	; 0x3a
    6f1e:	4b ad       	ldd	r20, Y+59	; 0x3b
    6f20:	5c ad       	ldd	r21, Y+60	; 0x3c
    6f22:	0e 94 f1 44 	call	0x89e2	; 0x89e2 <__mulsi3>
    6f26:	9b 01       	movw	r18, r22
    6f28:	ac 01       	movw	r20, r24
    6f2a:	87 01       	movw	r16, r14
    6f2c:	ff 24       	eor	r15, r15
    6f2e:	ee 24       	eor	r14, r14
    6f30:	ad a4       	ldd	r10, Y+45	; 0x2d
    6f32:	be a4       	ldd	r11, Y+46	; 0x2e
    6f34:	cf a4       	ldd	r12, Y+47	; 0x2f
    6f36:	d8 a8       	ldd	r13, Y+48	; 0x30
    6f38:	c6 01       	movw	r24, r12
    6f3a:	aa 27       	eor	r26, r26
    6f3c:	bb 27       	eor	r27, r27
    6f3e:	57 01       	movw	r10, r14
    6f40:	68 01       	movw	r12, r16
    6f42:	a8 2a       	or	r10, r24
    6f44:	b9 2a       	or	r11, r25
    6f46:	ca 2a       	or	r12, r26
    6f48:	db 2a       	or	r13, r27
    6f4a:	a2 16       	cp	r10, r18
    6f4c:	b3 06       	cpc	r11, r19
    6f4e:	c4 06       	cpc	r12, r20
    6f50:	d5 06       	cpc	r13, r21
    6f52:	e0 f4       	brcc	.+56     	; 0x6f8c <__udivdi3+0x24e>
    6f54:	08 94       	sec
    6f56:	61 08       	sbc	r6, r1
    6f58:	71 08       	sbc	r7, r1
    6f5a:	81 08       	sbc	r8, r1
    6f5c:	91 08       	sbc	r9, r1
    6f5e:	a2 0c       	add	r10, r2
    6f60:	b3 1c       	adc	r11, r3
    6f62:	c4 1c       	adc	r12, r4
    6f64:	d5 1c       	adc	r13, r5
    6f66:	a2 14       	cp	r10, r2
    6f68:	b3 04       	cpc	r11, r3
    6f6a:	c4 04       	cpc	r12, r4
    6f6c:	d5 04       	cpc	r13, r5
    6f6e:	70 f0       	brcs	.+28     	; 0x6f8c <__udivdi3+0x24e>
    6f70:	a2 16       	cp	r10, r18
    6f72:	b3 06       	cpc	r11, r19
    6f74:	c4 06       	cpc	r12, r20
    6f76:	d5 06       	cpc	r13, r21
    6f78:	48 f4       	brcc	.+18     	; 0x6f8c <__udivdi3+0x24e>
    6f7a:	08 94       	sec
    6f7c:	61 08       	sbc	r6, r1
    6f7e:	71 08       	sbc	r7, r1
    6f80:	81 08       	sbc	r8, r1
    6f82:	91 08       	sbc	r9, r1
    6f84:	a2 0c       	add	r10, r2
    6f86:	b3 1c       	adc	r11, r3
    6f88:	c4 1c       	adc	r12, r4
    6f8a:	d5 1c       	adc	r13, r5
    6f8c:	a2 1a       	sub	r10, r18
    6f8e:	b3 0a       	sbc	r11, r19
    6f90:	c4 0a       	sbc	r12, r20
    6f92:	d5 0a       	sbc	r13, r21
    6f94:	c6 01       	movw	r24, r12
    6f96:	b5 01       	movw	r22, r10
    6f98:	2d a9       	ldd	r18, Y+53	; 0x35
    6f9a:	3e a9       	ldd	r19, Y+54	; 0x36
    6f9c:	4f a9       	ldd	r20, Y+55	; 0x37
    6f9e:	58 ad       	ldd	r21, Y+56	; 0x38
    6fa0:	0e 94 10 45 	call	0x8a20	; 0x8a20 <__udivmodsi4>
    6fa4:	7b 01       	movw	r14, r22
    6fa6:	8c 01       	movw	r16, r24
    6fa8:	c6 01       	movw	r24, r12
    6faa:	b5 01       	movw	r22, r10
    6fac:	2d a9       	ldd	r18, Y+53	; 0x35
    6fae:	3e a9       	ldd	r19, Y+54	; 0x36
    6fb0:	4f a9       	ldd	r20, Y+55	; 0x37
    6fb2:	58 ad       	ldd	r21, Y+56	; 0x38
    6fb4:	0e 94 10 45 	call	0x8a20	; 0x8a20 <__udivmodsi4>
    6fb8:	c9 01       	movw	r24, r18
    6fba:	da 01       	movw	r26, r20
    6fbc:	5c 01       	movw	r10, r24
    6fbe:	6d 01       	movw	r12, r26
    6fc0:	c6 01       	movw	r24, r12
    6fc2:	b5 01       	movw	r22, r10
    6fc4:	29 ad       	ldd	r18, Y+57	; 0x39
    6fc6:	3a ad       	ldd	r19, Y+58	; 0x3a
    6fc8:	4b ad       	ldd	r20, Y+59	; 0x3b
    6fca:	5c ad       	ldd	r21, Y+60	; 0x3c
    6fcc:	0e 94 f1 44 	call	0x89e2	; 0x89e2 <__mulsi3>
    6fd0:	9b 01       	movw	r18, r22
    6fd2:	ac 01       	movw	r20, r24
    6fd4:	87 01       	movw	r16, r14
    6fd6:	ff 24       	eor	r15, r15
    6fd8:	ee 24       	eor	r14, r14
    6fda:	8d a5       	ldd	r24, Y+45	; 0x2d
    6fdc:	9e a5       	ldd	r25, Y+46	; 0x2e
    6fde:	af a5       	ldd	r26, Y+47	; 0x2f
    6fe0:	b8 a9       	ldd	r27, Y+48	; 0x30
    6fe2:	a0 70       	andi	r26, 0x00	; 0
    6fe4:	b0 70       	andi	r27, 0x00	; 0
    6fe6:	e8 2a       	or	r14, r24
    6fe8:	f9 2a       	or	r15, r25
    6fea:	0a 2b       	or	r16, r26
    6fec:	1b 2b       	or	r17, r27
    6fee:	e2 16       	cp	r14, r18
    6ff0:	f3 06       	cpc	r15, r19
    6ff2:	04 07       	cpc	r16, r20
    6ff4:	15 07       	cpc	r17, r21
    6ff6:	c0 f4       	brcc	.+48     	; 0x7028 <__udivdi3+0x2ea>
    6ff8:	08 94       	sec
    6ffa:	a1 08       	sbc	r10, r1
    6ffc:	b1 08       	sbc	r11, r1
    6ffe:	c1 08       	sbc	r12, r1
    7000:	d1 08       	sbc	r13, r1
    7002:	e2 0c       	add	r14, r2
    7004:	f3 1c       	adc	r15, r3
    7006:	04 1d       	adc	r16, r4
    7008:	15 1d       	adc	r17, r5
    700a:	e2 14       	cp	r14, r2
    700c:	f3 04       	cpc	r15, r3
    700e:	04 05       	cpc	r16, r4
    7010:	15 05       	cpc	r17, r5
    7012:	50 f0       	brcs	.+20     	; 0x7028 <__udivdi3+0x2ea>
    7014:	e2 16       	cp	r14, r18
    7016:	f3 06       	cpc	r15, r19
    7018:	04 07       	cpc	r16, r20
    701a:	15 07       	cpc	r17, r21
    701c:	28 f4       	brcc	.+10     	; 0x7028 <__udivdi3+0x2ea>
    701e:	08 94       	sec
    7020:	a1 08       	sbc	r10, r1
    7022:	b1 08       	sbc	r11, r1
    7024:	c1 08       	sbc	r12, r1
    7026:	d1 08       	sbc	r13, r1
    7028:	d3 01       	movw	r26, r6
    702a:	99 27       	eor	r25, r25
    702c:	88 27       	eor	r24, r24
    702e:	86 01       	movw	r16, r12
    7030:	75 01       	movw	r14, r10
    7032:	e8 2a       	or	r14, r24
    7034:	f9 2a       	or	r15, r25
    7036:	0a 2b       	or	r16, r26
    7038:	1b 2b       	or	r17, r27
    703a:	e9 aa       	std	Y+49, r14	; 0x31
    703c:	fa aa       	std	Y+50, r15	; 0x32
    703e:	0b ab       	std	Y+51, r16	; 0x33
    7040:	1c ab       	std	Y+52, r17	; 0x34
    7042:	cf c4       	rjmp	.+2462   	; 0x79e2 <__udivdi3+0xca4>
    7044:	21 14       	cp	r2, r1
    7046:	31 04       	cpc	r3, r1
    7048:	41 04       	cpc	r4, r1
    704a:	51 04       	cpc	r5, r1
    704c:	71 f4       	brne	.+28     	; 0x706a <__udivdi3+0x32c>
    704e:	61 e0       	ldi	r22, 0x01	; 1
    7050:	70 e0       	ldi	r23, 0x00	; 0
    7052:	80 e0       	ldi	r24, 0x00	; 0
    7054:	90 e0       	ldi	r25, 0x00	; 0
    7056:	20 e0       	ldi	r18, 0x00	; 0
    7058:	30 e0       	ldi	r19, 0x00	; 0
    705a:	40 e0       	ldi	r20, 0x00	; 0
    705c:	50 e0       	ldi	r21, 0x00	; 0
    705e:	0e 94 10 45 	call	0x8a20	; 0x8a20 <__udivmodsi4>
    7062:	c9 01       	movw	r24, r18
    7064:	da 01       	movw	r26, r20
    7066:	1c 01       	movw	r2, r24
    7068:	2d 01       	movw	r4, r26
    706a:	00 e0       	ldi	r16, 0x00	; 0
    706c:	20 16       	cp	r2, r16
    706e:	00 e0       	ldi	r16, 0x00	; 0
    7070:	30 06       	cpc	r3, r16
    7072:	01 e0       	ldi	r16, 0x01	; 1
    7074:	40 06       	cpc	r4, r16
    7076:	00 e0       	ldi	r16, 0x00	; 0
    7078:	50 06       	cpc	r5, r16
    707a:	88 f4       	brcc	.+34     	; 0x709e <__udivdi3+0x360>
    707c:	1f ef       	ldi	r17, 0xFF	; 255
    707e:	21 16       	cp	r2, r17
    7080:	31 04       	cpc	r3, r1
    7082:	41 04       	cpc	r4, r1
    7084:	51 04       	cpc	r5, r1
    7086:	31 f0       	breq	.+12     	; 0x7094 <__udivdi3+0x356>
    7088:	28 f0       	brcs	.+10     	; 0x7094 <__udivdi3+0x356>
    708a:	48 e0       	ldi	r20, 0x08	; 8
    708c:	50 e0       	ldi	r21, 0x00	; 0
    708e:	60 e0       	ldi	r22, 0x00	; 0
    7090:	70 e0       	ldi	r23, 0x00	; 0
    7092:	17 c0       	rjmp	.+46     	; 0x70c2 <__udivdi3+0x384>
    7094:	40 e0       	ldi	r20, 0x00	; 0
    7096:	50 e0       	ldi	r21, 0x00	; 0
    7098:	60 e0       	ldi	r22, 0x00	; 0
    709a:	70 e0       	ldi	r23, 0x00	; 0
    709c:	12 c0       	rjmp	.+36     	; 0x70c2 <__udivdi3+0x384>
    709e:	20 e0       	ldi	r18, 0x00	; 0
    70a0:	22 16       	cp	r2, r18
    70a2:	20 e0       	ldi	r18, 0x00	; 0
    70a4:	32 06       	cpc	r3, r18
    70a6:	20 e0       	ldi	r18, 0x00	; 0
    70a8:	42 06       	cpc	r4, r18
    70aa:	21 e0       	ldi	r18, 0x01	; 1
    70ac:	52 06       	cpc	r5, r18
    70ae:	28 f0       	brcs	.+10     	; 0x70ba <__udivdi3+0x37c>
    70b0:	48 e1       	ldi	r20, 0x18	; 24
    70b2:	50 e0       	ldi	r21, 0x00	; 0
    70b4:	60 e0       	ldi	r22, 0x00	; 0
    70b6:	70 e0       	ldi	r23, 0x00	; 0
    70b8:	04 c0       	rjmp	.+8      	; 0x70c2 <__udivdi3+0x384>
    70ba:	40 e1       	ldi	r20, 0x10	; 16
    70bc:	50 e0       	ldi	r21, 0x00	; 0
    70be:	60 e0       	ldi	r22, 0x00	; 0
    70c0:	70 e0       	ldi	r23, 0x00	; 0
    70c2:	d2 01       	movw	r26, r4
    70c4:	c1 01       	movw	r24, r2
    70c6:	04 2e       	mov	r0, r20
    70c8:	04 c0       	rjmp	.+8      	; 0x70d2 <__udivdi3+0x394>
    70ca:	b6 95       	lsr	r27
    70cc:	a7 95       	ror	r26
    70ce:	97 95       	ror	r25
    70d0:	87 95       	ror	r24
    70d2:	0a 94       	dec	r0
    70d4:	d2 f7       	brpl	.-12     	; 0x70ca <__udivdi3+0x38c>
    70d6:	8d 5f       	subi	r24, 0xFD	; 253
    70d8:	9f 4d       	sbci	r25, 0xDF	; 223
    70da:	dc 01       	movw	r26, r24
    70dc:	2c 91       	ld	r18, X
    70de:	e0 e2       	ldi	r30, 0x20	; 32
    70e0:	ee 2e       	mov	r14, r30
    70e2:	f1 2c       	mov	r15, r1
    70e4:	01 2d       	mov	r16, r1
    70e6:	11 2d       	mov	r17, r1
    70e8:	d8 01       	movw	r26, r16
    70ea:	c7 01       	movw	r24, r14
    70ec:	84 1b       	sub	r24, r20
    70ee:	95 0b       	sbc	r25, r21
    70f0:	a6 0b       	sbc	r26, r22
    70f2:	b7 0b       	sbc	r27, r23
    70f4:	82 1b       	sub	r24, r18
    70f6:	91 09       	sbc	r25, r1
    70f8:	a1 09       	sbc	r26, r1
    70fa:	b1 09       	sbc	r27, r1
    70fc:	00 97       	sbiw	r24, 0x00	; 0
    70fe:	a1 05       	cpc	r26, r1
    7100:	b1 05       	cpc	r27, r1
    7102:	61 f4       	brne	.+24     	; 0x711c <__udivdi3+0x3de>
    7104:	64 01       	movw	r12, r8
    7106:	53 01       	movw	r10, r6
    7108:	a2 18       	sub	r10, r2
    710a:	b3 08       	sbc	r11, r3
    710c:	c4 08       	sbc	r12, r4
    710e:	d5 08       	sbc	r13, r5
    7110:	31 e0       	ldi	r19, 0x01	; 1
    7112:	63 2e       	mov	r6, r19
    7114:	71 2c       	mov	r7, r1
    7116:	81 2c       	mov	r8, r1
    7118:	91 2c       	mov	r9, r1
    711a:	1e c1       	rjmp	.+572    	; 0x7358 <__udivdi3+0x61a>
    711c:	6f 96       	adiw	r28, 0x1f	; 31
    711e:	8f af       	std	Y+63, r24	; 0x3f
    7120:	6f 97       	sbiw	r28, 0x1f	; 31
    7122:	08 2e       	mov	r0, r24
    7124:	04 c0       	rjmp	.+8      	; 0x712e <__udivdi3+0x3f0>
    7126:	22 0c       	add	r2, r2
    7128:	33 1c       	adc	r3, r3
    712a:	44 1c       	adc	r4, r4
    712c:	55 1c       	adc	r5, r5
    712e:	0a 94       	dec	r0
    7130:	d2 f7       	brpl	.-12     	; 0x7126 <__udivdi3+0x3e8>
    7132:	ee 2d       	mov	r30, r14
    7134:	e8 1b       	sub	r30, r24
    7136:	64 01       	movw	r12, r8
    7138:	53 01       	movw	r10, r6
    713a:	0e 2e       	mov	r0, r30
    713c:	04 c0       	rjmp	.+8      	; 0x7146 <__udivdi3+0x408>
    713e:	d6 94       	lsr	r13
    7140:	c7 94       	ror	r12
    7142:	b7 94       	ror	r11
    7144:	a7 94       	ror	r10
    7146:	0a 94       	dec	r0
    7148:	d2 f7       	brpl	.-12     	; 0x713e <__udivdi3+0x400>
    714a:	a4 01       	movw	r20, r8
    714c:	93 01       	movw	r18, r6
    714e:	6f 96       	adiw	r28, 0x1f	; 31
    7150:	0f ac       	ldd	r0, Y+63	; 0x3f
    7152:	6f 97       	sbiw	r28, 0x1f	; 31
    7154:	04 c0       	rjmp	.+8      	; 0x715e <__udivdi3+0x420>
    7156:	22 0f       	add	r18, r18
    7158:	33 1f       	adc	r19, r19
    715a:	44 1f       	adc	r20, r20
    715c:	55 1f       	adc	r21, r21
    715e:	0a 94       	dec	r0
    7160:	d2 f7       	brpl	.-12     	; 0x7156 <__udivdi3+0x418>
    7162:	6d a4       	ldd	r6, Y+45	; 0x2d
    7164:	7e a4       	ldd	r7, Y+46	; 0x2e
    7166:	8f a4       	ldd	r8, Y+47	; 0x2f
    7168:	98 a8       	ldd	r9, Y+48	; 0x30
    716a:	0e 2e       	mov	r0, r30
    716c:	04 c0       	rjmp	.+8      	; 0x7176 <__udivdi3+0x438>
    716e:	96 94       	lsr	r9
    7170:	87 94       	ror	r8
    7172:	77 94       	ror	r7
    7174:	67 94       	ror	r6
    7176:	0a 94       	dec	r0
    7178:	d2 f7       	brpl	.-12     	; 0x716e <__udivdi3+0x430>
    717a:	84 01       	movw	r16, r8
    717c:	73 01       	movw	r14, r6
    717e:	e2 2a       	or	r14, r18
    7180:	f3 2a       	or	r15, r19
    7182:	04 2b       	or	r16, r20
    7184:	15 2b       	or	r17, r21
    7186:	e9 a6       	std	Y+41, r14	; 0x29
    7188:	fa a6       	std	Y+42, r15	; 0x2a
    718a:	0b a7       	std	Y+43, r16	; 0x2b
    718c:	1c a7       	std	Y+44, r17	; 0x2c
    718e:	32 01       	movw	r6, r4
    7190:	88 24       	eor	r8, r8
    7192:	99 24       	eor	r9, r9
    7194:	92 01       	movw	r18, r4
    7196:	81 01       	movw	r16, r2
    7198:	20 70       	andi	r18, 0x00	; 0
    719a:	30 70       	andi	r19, 0x00	; 0
    719c:	21 96       	adiw	r28, 0x01	; 1
    719e:	0c af       	std	Y+60, r16	; 0x3c
    71a0:	1d af       	std	Y+61, r17	; 0x3d
    71a2:	2e af       	std	Y+62, r18	; 0x3e
    71a4:	3f af       	std	Y+63, r19	; 0x3f
    71a6:	21 97       	sbiw	r28, 0x01	; 1
    71a8:	c6 01       	movw	r24, r12
    71aa:	b5 01       	movw	r22, r10
    71ac:	a4 01       	movw	r20, r8
    71ae:	93 01       	movw	r18, r6
    71b0:	0e 94 10 45 	call	0x8a20	; 0x8a20 <__udivmodsi4>
    71b4:	7b 01       	movw	r14, r22
    71b6:	8c 01       	movw	r16, r24
    71b8:	c6 01       	movw	r24, r12
    71ba:	b5 01       	movw	r22, r10
    71bc:	a4 01       	movw	r20, r8
    71be:	93 01       	movw	r18, r6
    71c0:	0e 94 10 45 	call	0x8a20	; 0x8a20 <__udivmodsi4>
    71c4:	c9 01       	movw	r24, r18
    71c6:	da 01       	movw	r26, r20
    71c8:	25 96       	adiw	r28, 0x05	; 5
    71ca:	8c af       	std	Y+60, r24	; 0x3c
    71cc:	9d af       	std	Y+61, r25	; 0x3d
    71ce:	ae af       	std	Y+62, r26	; 0x3e
    71d0:	bf af       	std	Y+63, r27	; 0x3f
    71d2:	25 97       	sbiw	r28, 0x05	; 5
    71d4:	bc 01       	movw	r22, r24
    71d6:	cd 01       	movw	r24, r26
    71d8:	21 96       	adiw	r28, 0x01	; 1
    71da:	2c ad       	ldd	r18, Y+60	; 0x3c
    71dc:	3d ad       	ldd	r19, Y+61	; 0x3d
    71de:	4e ad       	ldd	r20, Y+62	; 0x3e
    71e0:	5f ad       	ldd	r21, Y+63	; 0x3f
    71e2:	21 97       	sbiw	r28, 0x01	; 1
    71e4:	0e 94 f1 44 	call	0x89e2	; 0x89e2 <__mulsi3>
    71e8:	9b 01       	movw	r18, r22
    71ea:	ac 01       	movw	r20, r24
    71ec:	87 01       	movw	r16, r14
    71ee:	ff 24       	eor	r15, r15
    71f0:	ee 24       	eor	r14, r14
    71f2:	a9 a4       	ldd	r10, Y+41	; 0x29
    71f4:	ba a4       	ldd	r11, Y+42	; 0x2a
    71f6:	cb a4       	ldd	r12, Y+43	; 0x2b
    71f8:	dc a4       	ldd	r13, Y+44	; 0x2c
    71fa:	c6 01       	movw	r24, r12
    71fc:	aa 27       	eor	r26, r26
    71fe:	bb 27       	eor	r27, r27
    7200:	5c 01       	movw	r10, r24
    7202:	6d 01       	movw	r12, r26
    7204:	ae 28       	or	r10, r14
    7206:	bf 28       	or	r11, r15
    7208:	c0 2a       	or	r12, r16
    720a:	d1 2a       	or	r13, r17
    720c:	a2 16       	cp	r10, r18
    720e:	b3 06       	cpc	r11, r19
    7210:	c4 06       	cpc	r12, r20
    7212:	d5 06       	cpc	r13, r21
    7214:	60 f5       	brcc	.+88     	; 0x726e <__udivdi3+0x530>
    7216:	25 96       	adiw	r28, 0x05	; 5
    7218:	6c ad       	ldd	r22, Y+60	; 0x3c
    721a:	7d ad       	ldd	r23, Y+61	; 0x3d
    721c:	8e ad       	ldd	r24, Y+62	; 0x3e
    721e:	9f ad       	ldd	r25, Y+63	; 0x3f
    7220:	25 97       	sbiw	r28, 0x05	; 5
    7222:	61 50       	subi	r22, 0x01	; 1
    7224:	70 40       	sbci	r23, 0x00	; 0
    7226:	80 40       	sbci	r24, 0x00	; 0
    7228:	90 40       	sbci	r25, 0x00	; 0
    722a:	25 96       	adiw	r28, 0x05	; 5
    722c:	6c af       	std	Y+60, r22	; 0x3c
    722e:	7d af       	std	Y+61, r23	; 0x3d
    7230:	8e af       	std	Y+62, r24	; 0x3e
    7232:	9f af       	std	Y+63, r25	; 0x3f
    7234:	25 97       	sbiw	r28, 0x05	; 5
    7236:	a2 0c       	add	r10, r2
    7238:	b3 1c       	adc	r11, r3
    723a:	c4 1c       	adc	r12, r4
    723c:	d5 1c       	adc	r13, r5
    723e:	a2 14       	cp	r10, r2
    7240:	b3 04       	cpc	r11, r3
    7242:	c4 04       	cpc	r12, r4
    7244:	d5 04       	cpc	r13, r5
    7246:	98 f0       	brcs	.+38     	; 0x726e <__udivdi3+0x530>
    7248:	a2 16       	cp	r10, r18
    724a:	b3 06       	cpc	r11, r19
    724c:	c4 06       	cpc	r12, r20
    724e:	d5 06       	cpc	r13, r21
    7250:	70 f4       	brcc	.+28     	; 0x726e <__udivdi3+0x530>
    7252:	61 50       	subi	r22, 0x01	; 1
    7254:	70 40       	sbci	r23, 0x00	; 0
    7256:	80 40       	sbci	r24, 0x00	; 0
    7258:	90 40       	sbci	r25, 0x00	; 0
    725a:	25 96       	adiw	r28, 0x05	; 5
    725c:	6c af       	std	Y+60, r22	; 0x3c
    725e:	7d af       	std	Y+61, r23	; 0x3d
    7260:	8e af       	std	Y+62, r24	; 0x3e
    7262:	9f af       	std	Y+63, r25	; 0x3f
    7264:	25 97       	sbiw	r28, 0x05	; 5
    7266:	a2 0c       	add	r10, r2
    7268:	b3 1c       	adc	r11, r3
    726a:	c4 1c       	adc	r12, r4
    726c:	d5 1c       	adc	r13, r5
    726e:	a2 1a       	sub	r10, r18
    7270:	b3 0a       	sbc	r11, r19
    7272:	c4 0a       	sbc	r12, r20
    7274:	d5 0a       	sbc	r13, r21
    7276:	c6 01       	movw	r24, r12
    7278:	b5 01       	movw	r22, r10
    727a:	a4 01       	movw	r20, r8
    727c:	93 01       	movw	r18, r6
    727e:	0e 94 10 45 	call	0x8a20	; 0x8a20 <__udivmodsi4>
    7282:	7b 01       	movw	r14, r22
    7284:	8c 01       	movw	r16, r24
    7286:	c6 01       	movw	r24, r12
    7288:	b5 01       	movw	r22, r10
    728a:	a4 01       	movw	r20, r8
    728c:	93 01       	movw	r18, r6
    728e:	0e 94 10 45 	call	0x8a20	; 0x8a20 <__udivmodsi4>
    7292:	c9 01       	movw	r24, r18
    7294:	da 01       	movw	r26, r20
    7296:	3c 01       	movw	r6, r24
    7298:	4d 01       	movw	r8, r26
    729a:	c4 01       	movw	r24, r8
    729c:	b3 01       	movw	r22, r6
    729e:	21 96       	adiw	r28, 0x01	; 1
    72a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    72a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    72a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    72a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    72a8:	21 97       	sbiw	r28, 0x01	; 1
    72aa:	0e 94 f1 44 	call	0x89e2	; 0x89e2 <__mulsi3>
    72ae:	9b 01       	movw	r18, r22
    72b0:	ac 01       	movw	r20, r24
    72b2:	87 01       	movw	r16, r14
    72b4:	ff 24       	eor	r15, r15
    72b6:	ee 24       	eor	r14, r14
    72b8:	89 a5       	ldd	r24, Y+41	; 0x29
    72ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    72bc:	ab a5       	ldd	r26, Y+43	; 0x2b
    72be:	bc a5       	ldd	r27, Y+44	; 0x2c
    72c0:	a0 70       	andi	r26, 0x00	; 0
    72c2:	b0 70       	andi	r27, 0x00	; 0
    72c4:	57 01       	movw	r10, r14
    72c6:	68 01       	movw	r12, r16
    72c8:	a8 2a       	or	r10, r24
    72ca:	b9 2a       	or	r11, r25
    72cc:	ca 2a       	or	r12, r26
    72ce:	db 2a       	or	r13, r27
    72d0:	a2 16       	cp	r10, r18
    72d2:	b3 06       	cpc	r11, r19
    72d4:	c4 06       	cpc	r12, r20
    72d6:	d5 06       	cpc	r13, r21
    72d8:	e0 f4       	brcc	.+56     	; 0x7312 <__udivdi3+0x5d4>
    72da:	08 94       	sec
    72dc:	61 08       	sbc	r6, r1
    72de:	71 08       	sbc	r7, r1
    72e0:	81 08       	sbc	r8, r1
    72e2:	91 08       	sbc	r9, r1
    72e4:	a2 0c       	add	r10, r2
    72e6:	b3 1c       	adc	r11, r3
    72e8:	c4 1c       	adc	r12, r4
    72ea:	d5 1c       	adc	r13, r5
    72ec:	a2 14       	cp	r10, r2
    72ee:	b3 04       	cpc	r11, r3
    72f0:	c4 04       	cpc	r12, r4
    72f2:	d5 04       	cpc	r13, r5
    72f4:	70 f0       	brcs	.+28     	; 0x7312 <__udivdi3+0x5d4>
    72f6:	a2 16       	cp	r10, r18
    72f8:	b3 06       	cpc	r11, r19
    72fa:	c4 06       	cpc	r12, r20
    72fc:	d5 06       	cpc	r13, r21
    72fe:	48 f4       	brcc	.+18     	; 0x7312 <__udivdi3+0x5d4>
    7300:	08 94       	sec
    7302:	61 08       	sbc	r6, r1
    7304:	71 08       	sbc	r7, r1
    7306:	81 08       	sbc	r8, r1
    7308:	91 08       	sbc	r9, r1
    730a:	a2 0c       	add	r10, r2
    730c:	b3 1c       	adc	r11, r3
    730e:	c4 1c       	adc	r12, r4
    7310:	d5 1c       	adc	r13, r5
    7312:	8d a5       	ldd	r24, Y+45	; 0x2d
    7314:	9e a5       	ldd	r25, Y+46	; 0x2e
    7316:	af a5       	ldd	r26, Y+47	; 0x2f
    7318:	b8 a9       	ldd	r27, Y+48	; 0x30
    731a:	6f 96       	adiw	r28, 0x1f	; 31
    731c:	0f ac       	ldd	r0, Y+63	; 0x3f
    731e:	6f 97       	sbiw	r28, 0x1f	; 31
    7320:	04 c0       	rjmp	.+8      	; 0x732a <__udivdi3+0x5ec>
    7322:	88 0f       	add	r24, r24
    7324:	99 1f       	adc	r25, r25
    7326:	aa 1f       	adc	r26, r26
    7328:	bb 1f       	adc	r27, r27
    732a:	0a 94       	dec	r0
    732c:	d2 f7       	brpl	.-12     	; 0x7322 <__udivdi3+0x5e4>
    732e:	8d a7       	std	Y+45, r24	; 0x2d
    7330:	9e a7       	std	Y+46, r25	; 0x2e
    7332:	af a7       	std	Y+47, r26	; 0x2f
    7334:	b8 ab       	std	Y+48, r27	; 0x30
    7336:	a2 1a       	sub	r10, r18
    7338:	b3 0a       	sbc	r11, r19
    733a:	c4 0a       	sbc	r12, r20
    733c:	d5 0a       	sbc	r13, r21
    733e:	25 96       	adiw	r28, 0x05	; 5
    7340:	ec ac       	ldd	r14, Y+60	; 0x3c
    7342:	fd ac       	ldd	r15, Y+61	; 0x3d
    7344:	0e ad       	ldd	r16, Y+62	; 0x3e
    7346:	1f ad       	ldd	r17, Y+63	; 0x3f
    7348:	25 97       	sbiw	r28, 0x05	; 5
    734a:	d7 01       	movw	r26, r14
    734c:	99 27       	eor	r25, r25
    734e:	88 27       	eor	r24, r24
    7350:	68 2a       	or	r6, r24
    7352:	79 2a       	or	r7, r25
    7354:	8a 2a       	or	r8, r26
    7356:	9b 2a       	or	r9, r27
    7358:	82 01       	movw	r16, r4
    735a:	22 27       	eor	r18, r18
    735c:	33 27       	eor	r19, r19
    735e:	29 96       	adiw	r28, 0x09	; 9
    7360:	0c af       	std	Y+60, r16	; 0x3c
    7362:	1d af       	std	Y+61, r17	; 0x3d
    7364:	2e af       	std	Y+62, r18	; 0x3e
    7366:	3f af       	std	Y+63, r19	; 0x3f
    7368:	29 97       	sbiw	r28, 0x09	; 9
    736a:	a2 01       	movw	r20, r4
    736c:	91 01       	movw	r18, r2
    736e:	40 70       	andi	r20, 0x00	; 0
    7370:	50 70       	andi	r21, 0x00	; 0
    7372:	2d 96       	adiw	r28, 0x0d	; 13
    7374:	2c af       	std	Y+60, r18	; 0x3c
    7376:	3d af       	std	Y+61, r19	; 0x3d
    7378:	4e af       	std	Y+62, r20	; 0x3e
    737a:	5f af       	std	Y+63, r21	; 0x3f
    737c:	2d 97       	sbiw	r28, 0x0d	; 13
    737e:	c6 01       	movw	r24, r12
    7380:	b5 01       	movw	r22, r10
    7382:	29 96       	adiw	r28, 0x09	; 9
    7384:	2c ad       	ldd	r18, Y+60	; 0x3c
    7386:	3d ad       	ldd	r19, Y+61	; 0x3d
    7388:	4e ad       	ldd	r20, Y+62	; 0x3e
    738a:	5f ad       	ldd	r21, Y+63	; 0x3f
    738c:	29 97       	sbiw	r28, 0x09	; 9
    738e:	0e 94 10 45 	call	0x8a20	; 0x8a20 <__udivmodsi4>
    7392:	7b 01       	movw	r14, r22
    7394:	8c 01       	movw	r16, r24
    7396:	c6 01       	movw	r24, r12
    7398:	b5 01       	movw	r22, r10
    739a:	29 96       	adiw	r28, 0x09	; 9
    739c:	2c ad       	ldd	r18, Y+60	; 0x3c
    739e:	3d ad       	ldd	r19, Y+61	; 0x3d
    73a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    73a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    73a4:	29 97       	sbiw	r28, 0x09	; 9
    73a6:	0e 94 10 45 	call	0x8a20	; 0x8a20 <__udivmodsi4>
    73aa:	c9 01       	movw	r24, r18
    73ac:	da 01       	movw	r26, r20
    73ae:	61 96       	adiw	r28, 0x11	; 17
    73b0:	8c af       	std	Y+60, r24	; 0x3c
    73b2:	9d af       	std	Y+61, r25	; 0x3d
    73b4:	ae af       	std	Y+62, r26	; 0x3e
    73b6:	bf af       	std	Y+63, r27	; 0x3f
    73b8:	61 97       	sbiw	r28, 0x11	; 17
    73ba:	bc 01       	movw	r22, r24
    73bc:	cd 01       	movw	r24, r26
    73be:	2d 96       	adiw	r28, 0x0d	; 13
    73c0:	2c ad       	ldd	r18, Y+60	; 0x3c
    73c2:	3d ad       	ldd	r19, Y+61	; 0x3d
    73c4:	4e ad       	ldd	r20, Y+62	; 0x3e
    73c6:	5f ad       	ldd	r21, Y+63	; 0x3f
    73c8:	2d 97       	sbiw	r28, 0x0d	; 13
    73ca:	0e 94 f1 44 	call	0x89e2	; 0x89e2 <__mulsi3>
    73ce:	9b 01       	movw	r18, r22
    73d0:	ac 01       	movw	r20, r24
    73d2:	87 01       	movw	r16, r14
    73d4:	ff 24       	eor	r15, r15
    73d6:	ee 24       	eor	r14, r14
    73d8:	ad a4       	ldd	r10, Y+45	; 0x2d
    73da:	be a4       	ldd	r11, Y+46	; 0x2e
    73dc:	cf a4       	ldd	r12, Y+47	; 0x2f
    73de:	d8 a8       	ldd	r13, Y+48	; 0x30
    73e0:	c6 01       	movw	r24, r12
    73e2:	aa 27       	eor	r26, r26
    73e4:	bb 27       	eor	r27, r27
    73e6:	57 01       	movw	r10, r14
    73e8:	68 01       	movw	r12, r16
    73ea:	a8 2a       	or	r10, r24
    73ec:	b9 2a       	or	r11, r25
    73ee:	ca 2a       	or	r12, r26
    73f0:	db 2a       	or	r13, r27
    73f2:	a2 16       	cp	r10, r18
    73f4:	b3 06       	cpc	r11, r19
    73f6:	c4 06       	cpc	r12, r20
    73f8:	d5 06       	cpc	r13, r21
    73fa:	60 f5       	brcc	.+88     	; 0x7454 <__udivdi3+0x716>
    73fc:	61 96       	adiw	r28, 0x11	; 17
    73fe:	6c ad       	ldd	r22, Y+60	; 0x3c
    7400:	7d ad       	ldd	r23, Y+61	; 0x3d
    7402:	8e ad       	ldd	r24, Y+62	; 0x3e
    7404:	9f ad       	ldd	r25, Y+63	; 0x3f
    7406:	61 97       	sbiw	r28, 0x11	; 17
    7408:	61 50       	subi	r22, 0x01	; 1
    740a:	70 40       	sbci	r23, 0x00	; 0
    740c:	80 40       	sbci	r24, 0x00	; 0
    740e:	90 40       	sbci	r25, 0x00	; 0
    7410:	61 96       	adiw	r28, 0x11	; 17
    7412:	6c af       	std	Y+60, r22	; 0x3c
    7414:	7d af       	std	Y+61, r23	; 0x3d
    7416:	8e af       	std	Y+62, r24	; 0x3e
    7418:	9f af       	std	Y+63, r25	; 0x3f
    741a:	61 97       	sbiw	r28, 0x11	; 17
    741c:	a2 0c       	add	r10, r2
    741e:	b3 1c       	adc	r11, r3
    7420:	c4 1c       	adc	r12, r4
    7422:	d5 1c       	adc	r13, r5
    7424:	a2 14       	cp	r10, r2
    7426:	b3 04       	cpc	r11, r3
    7428:	c4 04       	cpc	r12, r4
    742a:	d5 04       	cpc	r13, r5
    742c:	98 f0       	brcs	.+38     	; 0x7454 <__udivdi3+0x716>
    742e:	a2 16       	cp	r10, r18
    7430:	b3 06       	cpc	r11, r19
    7432:	c4 06       	cpc	r12, r20
    7434:	d5 06       	cpc	r13, r21
    7436:	70 f4       	brcc	.+28     	; 0x7454 <__udivdi3+0x716>
    7438:	61 50       	subi	r22, 0x01	; 1
    743a:	70 40       	sbci	r23, 0x00	; 0
    743c:	80 40       	sbci	r24, 0x00	; 0
    743e:	90 40       	sbci	r25, 0x00	; 0
    7440:	61 96       	adiw	r28, 0x11	; 17
    7442:	6c af       	std	Y+60, r22	; 0x3c
    7444:	7d af       	std	Y+61, r23	; 0x3d
    7446:	8e af       	std	Y+62, r24	; 0x3e
    7448:	9f af       	std	Y+63, r25	; 0x3f
    744a:	61 97       	sbiw	r28, 0x11	; 17
    744c:	a2 0c       	add	r10, r2
    744e:	b3 1c       	adc	r11, r3
    7450:	c4 1c       	adc	r12, r4
    7452:	d5 1c       	adc	r13, r5
    7454:	a2 1a       	sub	r10, r18
    7456:	b3 0a       	sbc	r11, r19
    7458:	c4 0a       	sbc	r12, r20
    745a:	d5 0a       	sbc	r13, r21
    745c:	c6 01       	movw	r24, r12
    745e:	b5 01       	movw	r22, r10
    7460:	29 96       	adiw	r28, 0x09	; 9
    7462:	2c ad       	ldd	r18, Y+60	; 0x3c
    7464:	3d ad       	ldd	r19, Y+61	; 0x3d
    7466:	4e ad       	ldd	r20, Y+62	; 0x3e
    7468:	5f ad       	ldd	r21, Y+63	; 0x3f
    746a:	29 97       	sbiw	r28, 0x09	; 9
    746c:	0e 94 10 45 	call	0x8a20	; 0x8a20 <__udivmodsi4>
    7470:	7b 01       	movw	r14, r22
    7472:	8c 01       	movw	r16, r24
    7474:	c6 01       	movw	r24, r12
    7476:	b5 01       	movw	r22, r10
    7478:	29 96       	adiw	r28, 0x09	; 9
    747a:	2c ad       	ldd	r18, Y+60	; 0x3c
    747c:	3d ad       	ldd	r19, Y+61	; 0x3d
    747e:	4e ad       	ldd	r20, Y+62	; 0x3e
    7480:	5f ad       	ldd	r21, Y+63	; 0x3f
    7482:	29 97       	sbiw	r28, 0x09	; 9
    7484:	0e 94 10 45 	call	0x8a20	; 0x8a20 <__udivmodsi4>
    7488:	c9 01       	movw	r24, r18
    748a:	da 01       	movw	r26, r20
    748c:	5c 01       	movw	r10, r24
    748e:	6d 01       	movw	r12, r26
    7490:	c6 01       	movw	r24, r12
    7492:	b5 01       	movw	r22, r10
    7494:	2d 96       	adiw	r28, 0x0d	; 13
    7496:	2c ad       	ldd	r18, Y+60	; 0x3c
    7498:	3d ad       	ldd	r19, Y+61	; 0x3d
    749a:	4e ad       	ldd	r20, Y+62	; 0x3e
    749c:	5f ad       	ldd	r21, Y+63	; 0x3f
    749e:	2d 97       	sbiw	r28, 0x0d	; 13
    74a0:	0e 94 f1 44 	call	0x89e2	; 0x89e2 <__mulsi3>
    74a4:	9b 01       	movw	r18, r22
    74a6:	ac 01       	movw	r20, r24
    74a8:	87 01       	movw	r16, r14
    74aa:	ff 24       	eor	r15, r15
    74ac:	ee 24       	eor	r14, r14
    74ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    74b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    74b2:	af a5       	ldd	r26, Y+47	; 0x2f
    74b4:	b8 a9       	ldd	r27, Y+48	; 0x30
    74b6:	a0 70       	andi	r26, 0x00	; 0
    74b8:	b0 70       	andi	r27, 0x00	; 0
    74ba:	e8 2a       	or	r14, r24
    74bc:	f9 2a       	or	r15, r25
    74be:	0a 2b       	or	r16, r26
    74c0:	1b 2b       	or	r17, r27
    74c2:	e2 16       	cp	r14, r18
    74c4:	f3 06       	cpc	r15, r19
    74c6:	04 07       	cpc	r16, r20
    74c8:	15 07       	cpc	r17, r21
    74ca:	c0 f4       	brcc	.+48     	; 0x74fc <__udivdi3+0x7be>
    74cc:	08 94       	sec
    74ce:	a1 08       	sbc	r10, r1
    74d0:	b1 08       	sbc	r11, r1
    74d2:	c1 08       	sbc	r12, r1
    74d4:	d1 08       	sbc	r13, r1
    74d6:	e2 0c       	add	r14, r2
    74d8:	f3 1c       	adc	r15, r3
    74da:	04 1d       	adc	r16, r4
    74dc:	15 1d       	adc	r17, r5
    74de:	e2 14       	cp	r14, r2
    74e0:	f3 04       	cpc	r15, r3
    74e2:	04 05       	cpc	r16, r4
    74e4:	15 05       	cpc	r17, r5
    74e6:	50 f0       	brcs	.+20     	; 0x74fc <__udivdi3+0x7be>
    74e8:	e2 16       	cp	r14, r18
    74ea:	f3 06       	cpc	r15, r19
    74ec:	04 07       	cpc	r16, r20
    74ee:	15 07       	cpc	r17, r21
    74f0:	28 f4       	brcc	.+10     	; 0x74fc <__udivdi3+0x7be>
    74f2:	08 94       	sec
    74f4:	a1 08       	sbc	r10, r1
    74f6:	b1 08       	sbc	r11, r1
    74f8:	c1 08       	sbc	r12, r1
    74fa:	d1 08       	sbc	r13, r1
    74fc:	61 96       	adiw	r28, 0x11	; 17
    74fe:	ec ac       	ldd	r14, Y+60	; 0x3c
    7500:	fd ac       	ldd	r15, Y+61	; 0x3d
    7502:	0e ad       	ldd	r16, Y+62	; 0x3e
    7504:	1f ad       	ldd	r17, Y+63	; 0x3f
    7506:	61 97       	sbiw	r28, 0x11	; 17
    7508:	d7 01       	movw	r26, r14
    750a:	99 27       	eor	r25, r25
    750c:	88 27       	eor	r24, r24
    750e:	96 01       	movw	r18, r12
    7510:	85 01       	movw	r16, r10
    7512:	08 2b       	or	r16, r24
    7514:	19 2b       	or	r17, r25
    7516:	2a 2b       	or	r18, r26
    7518:	3b 2b       	or	r19, r27
    751a:	09 ab       	std	Y+49, r16	; 0x31
    751c:	1a ab       	std	Y+50, r17	; 0x32
    751e:	2b ab       	std	Y+51, r18	; 0x33
    7520:	3c ab       	std	Y+52, r19	; 0x34
    7522:	62 c2       	rjmp	.+1220   	; 0x79e8 <__udivdi3+0xcaa>
    7524:	6e 14       	cp	r6, r14
    7526:	7f 04       	cpc	r7, r15
    7528:	80 06       	cpc	r8, r16
    752a:	91 06       	cpc	r9, r17
    752c:	08 f4       	brcc	.+2      	; 0x7530 <__udivdi3+0x7f2>
    752e:	51 c2       	rjmp	.+1186   	; 0x79d2 <__udivdi3+0xc94>
    7530:	20 e0       	ldi	r18, 0x00	; 0
    7532:	e2 16       	cp	r14, r18
    7534:	20 e0       	ldi	r18, 0x00	; 0
    7536:	f2 06       	cpc	r15, r18
    7538:	21 e0       	ldi	r18, 0x01	; 1
    753a:	02 07       	cpc	r16, r18
    753c:	20 e0       	ldi	r18, 0x00	; 0
    753e:	12 07       	cpc	r17, r18
    7540:	88 f4       	brcc	.+34     	; 0x7564 <__udivdi3+0x826>
    7542:	3f ef       	ldi	r19, 0xFF	; 255
    7544:	e3 16       	cp	r14, r19
    7546:	f1 04       	cpc	r15, r1
    7548:	01 05       	cpc	r16, r1
    754a:	11 05       	cpc	r17, r1
    754c:	31 f0       	breq	.+12     	; 0x755a <__udivdi3+0x81c>
    754e:	28 f0       	brcs	.+10     	; 0x755a <__udivdi3+0x81c>
    7550:	48 e0       	ldi	r20, 0x08	; 8
    7552:	50 e0       	ldi	r21, 0x00	; 0
    7554:	60 e0       	ldi	r22, 0x00	; 0
    7556:	70 e0       	ldi	r23, 0x00	; 0
    7558:	17 c0       	rjmp	.+46     	; 0x7588 <__udivdi3+0x84a>
    755a:	40 e0       	ldi	r20, 0x00	; 0
    755c:	50 e0       	ldi	r21, 0x00	; 0
    755e:	60 e0       	ldi	r22, 0x00	; 0
    7560:	70 e0       	ldi	r23, 0x00	; 0
    7562:	12 c0       	rjmp	.+36     	; 0x7588 <__udivdi3+0x84a>
    7564:	40 e0       	ldi	r20, 0x00	; 0
    7566:	e4 16       	cp	r14, r20
    7568:	40 e0       	ldi	r20, 0x00	; 0
    756a:	f4 06       	cpc	r15, r20
    756c:	40 e0       	ldi	r20, 0x00	; 0
    756e:	04 07       	cpc	r16, r20
    7570:	41 e0       	ldi	r20, 0x01	; 1
    7572:	14 07       	cpc	r17, r20
    7574:	28 f0       	brcs	.+10     	; 0x7580 <__udivdi3+0x842>
    7576:	48 e1       	ldi	r20, 0x18	; 24
    7578:	50 e0       	ldi	r21, 0x00	; 0
    757a:	60 e0       	ldi	r22, 0x00	; 0
    757c:	70 e0       	ldi	r23, 0x00	; 0
    757e:	04 c0       	rjmp	.+8      	; 0x7588 <__udivdi3+0x84a>
    7580:	40 e1       	ldi	r20, 0x10	; 16
    7582:	50 e0       	ldi	r21, 0x00	; 0
    7584:	60 e0       	ldi	r22, 0x00	; 0
    7586:	70 e0       	ldi	r23, 0x00	; 0
    7588:	d8 01       	movw	r26, r16
    758a:	c7 01       	movw	r24, r14
    758c:	04 2e       	mov	r0, r20
    758e:	04 c0       	rjmp	.+8      	; 0x7598 <__udivdi3+0x85a>
    7590:	b6 95       	lsr	r27
    7592:	a7 95       	ror	r26
    7594:	97 95       	ror	r25
    7596:	87 95       	ror	r24
    7598:	0a 94       	dec	r0
    759a:	d2 f7       	brpl	.-12     	; 0x7590 <__udivdi3+0x852>
    759c:	8d 5f       	subi	r24, 0xFD	; 253
    759e:	9f 4d       	sbci	r25, 0xDF	; 223
    75a0:	dc 01       	movw	r26, r24
    75a2:	2c 91       	ld	r18, X
    75a4:	30 e2       	ldi	r19, 0x20	; 32
    75a6:	a3 2e       	mov	r10, r19
    75a8:	b1 2c       	mov	r11, r1
    75aa:	c1 2c       	mov	r12, r1
    75ac:	d1 2c       	mov	r13, r1
    75ae:	d6 01       	movw	r26, r12
    75b0:	c5 01       	movw	r24, r10
    75b2:	84 1b       	sub	r24, r20
    75b4:	95 0b       	sbc	r25, r21
    75b6:	a6 0b       	sbc	r26, r22
    75b8:	b7 0b       	sbc	r27, r23
    75ba:	82 1b       	sub	r24, r18
    75bc:	91 09       	sbc	r25, r1
    75be:	a1 09       	sbc	r26, r1
    75c0:	b1 09       	sbc	r27, r1
    75c2:	00 97       	sbiw	r24, 0x00	; 0
    75c4:	a1 05       	cpc	r26, r1
    75c6:	b1 05       	cpc	r27, r1
    75c8:	89 f4       	brne	.+34     	; 0x75ec <__udivdi3+0x8ae>
    75ca:	e6 14       	cp	r14, r6
    75cc:	f7 04       	cpc	r15, r7
    75ce:	08 05       	cpc	r16, r8
    75d0:	19 05       	cpc	r17, r9
    75d2:	08 f4       	brcc	.+2      	; 0x75d6 <__udivdi3+0x898>
    75d4:	f2 c1       	rjmp	.+996    	; 0x79ba <__udivdi3+0xc7c>
    75d6:	6d a4       	ldd	r6, Y+45	; 0x2d
    75d8:	7e a4       	ldd	r7, Y+46	; 0x2e
    75da:	8f a4       	ldd	r8, Y+47	; 0x2f
    75dc:	98 a8       	ldd	r9, Y+48	; 0x30
    75de:	62 14       	cp	r6, r2
    75e0:	73 04       	cpc	r7, r3
    75e2:	84 04       	cpc	r8, r4
    75e4:	95 04       	cpc	r9, r5
    75e6:	08 f0       	brcs	.+2      	; 0x75ea <__udivdi3+0x8ac>
    75e8:	e8 c1       	rjmp	.+976    	; 0x79ba <__udivdi3+0xc7c>
    75ea:	f3 c1       	rjmp	.+998    	; 0x79d2 <__udivdi3+0xc94>
    75ec:	6e 96       	adiw	r28, 0x1e	; 30
    75ee:	8f af       	std	Y+63, r24	; 0x3f
    75f0:	6e 97       	sbiw	r28, 0x1e	; 30
    75f2:	08 2e       	mov	r0, r24
    75f4:	04 c0       	rjmp	.+8      	; 0x75fe <__udivdi3+0x8c0>
    75f6:	ee 0c       	add	r14, r14
    75f8:	ff 1c       	adc	r15, r15
    75fa:	00 1f       	adc	r16, r16
    75fc:	11 1f       	adc	r17, r17
    75fe:	0a 94       	dec	r0
    7600:	d2 f7       	brpl	.-12     	; 0x75f6 <__udivdi3+0x8b8>
    7602:	6a 2d       	mov	r22, r10
    7604:	68 1b       	sub	r22, r24
    7606:	d2 01       	movw	r26, r4
    7608:	c1 01       	movw	r24, r2
    760a:	06 2e       	mov	r0, r22
    760c:	04 c0       	rjmp	.+8      	; 0x7616 <__udivdi3+0x8d8>
    760e:	b6 95       	lsr	r27
    7610:	a7 95       	ror	r26
    7612:	97 95       	ror	r25
    7614:	87 95       	ror	r24
    7616:	0a 94       	dec	r0
    7618:	d2 f7       	brpl	.-12     	; 0x760e <__udivdi3+0x8d0>
    761a:	5c 01       	movw	r10, r24
    761c:	6d 01       	movw	r12, r26
    761e:	ae 28       	or	r10, r14
    7620:	bf 28       	or	r11, r15
    7622:	c0 2a       	or	r12, r16
    7624:	d1 2a       	or	r13, r17
    7626:	ad a2       	std	Y+37, r10	; 0x25
    7628:	be a2       	std	Y+38, r11	; 0x26
    762a:	cf a2       	std	Y+39, r12	; 0x27
    762c:	d8 a6       	std	Y+40, r13	; 0x28
    762e:	72 01       	movw	r14, r4
    7630:	61 01       	movw	r12, r2
    7632:	6e 96       	adiw	r28, 0x1e	; 30
    7634:	0f ac       	ldd	r0, Y+63	; 0x3f
    7636:	6e 97       	sbiw	r28, 0x1e	; 30
    7638:	04 c0       	rjmp	.+8      	; 0x7642 <__udivdi3+0x904>
    763a:	cc 0c       	add	r12, r12
    763c:	dd 1c       	adc	r13, r13
    763e:	ee 1c       	adc	r14, r14
    7640:	ff 1c       	adc	r15, r15
    7642:	0a 94       	dec	r0
    7644:	d2 f7       	brpl	.-12     	; 0x763a <__udivdi3+0x8fc>
    7646:	c9 a2       	std	Y+33, r12	; 0x21
    7648:	da a2       	std	Y+34, r13	; 0x22
    764a:	eb a2       	std	Y+35, r14	; 0x23
    764c:	fc a2       	std	Y+36, r15	; 0x24
    764e:	64 01       	movw	r12, r8
    7650:	53 01       	movw	r10, r6
    7652:	06 2e       	mov	r0, r22
    7654:	04 c0       	rjmp	.+8      	; 0x765e <__udivdi3+0x920>
    7656:	d6 94       	lsr	r13
    7658:	c7 94       	ror	r12
    765a:	b7 94       	ror	r11
    765c:	a7 94       	ror	r10
    765e:	0a 94       	dec	r0
    7660:	d2 f7       	brpl	.-12     	; 0x7656 <__udivdi3+0x918>
    7662:	d4 01       	movw	r26, r8
    7664:	c3 01       	movw	r24, r6
    7666:	6e 96       	adiw	r28, 0x1e	; 30
    7668:	0f ac       	ldd	r0, Y+63	; 0x3f
    766a:	6e 97       	sbiw	r28, 0x1e	; 30
    766c:	04 c0       	rjmp	.+8      	; 0x7676 <__udivdi3+0x938>
    766e:	88 0f       	add	r24, r24
    7670:	99 1f       	adc	r25, r25
    7672:	aa 1f       	adc	r26, r26
    7674:	bb 1f       	adc	r27, r27
    7676:	0a 94       	dec	r0
    7678:	d2 f7       	brpl	.-12     	; 0x766e <__udivdi3+0x930>
    767a:	ed a4       	ldd	r14, Y+45	; 0x2d
    767c:	fe a4       	ldd	r15, Y+46	; 0x2e
    767e:	0f a5       	ldd	r16, Y+47	; 0x2f
    7680:	18 a9       	ldd	r17, Y+48	; 0x30
    7682:	04 c0       	rjmp	.+8      	; 0x768c <__udivdi3+0x94e>
    7684:	16 95       	lsr	r17
    7686:	07 95       	ror	r16
    7688:	f7 94       	ror	r15
    768a:	e7 94       	ror	r14
    768c:	6a 95       	dec	r22
    768e:	d2 f7       	brpl	.-12     	; 0x7684 <__udivdi3+0x946>
    7690:	37 01       	movw	r6, r14
    7692:	48 01       	movw	r8, r16
    7694:	68 2a       	or	r6, r24
    7696:	79 2a       	or	r7, r25
    7698:	8a 2a       	or	r8, r26
    769a:	9b 2a       	or	r9, r27
    769c:	6d 8e       	std	Y+29, r6	; 0x1d
    769e:	7e 8e       	std	Y+30, r7	; 0x1e
    76a0:	8f 8e       	std	Y+31, r8	; 0x1f
    76a2:	98 a2       	std	Y+32, r9	; 0x20
    76a4:	ed a0       	ldd	r14, Y+37	; 0x25
    76a6:	fe a0       	ldd	r15, Y+38	; 0x26
    76a8:	0f a1       	ldd	r16, Y+39	; 0x27
    76aa:	18 a5       	ldd	r17, Y+40	; 0x28
    76ac:	38 01       	movw	r6, r16
    76ae:	88 24       	eor	r8, r8
    76b0:	99 24       	eor	r9, r9
    76b2:	98 01       	movw	r18, r16
    76b4:	87 01       	movw	r16, r14
    76b6:	20 70       	andi	r18, 0x00	; 0
    76b8:	30 70       	andi	r19, 0x00	; 0
    76ba:	65 96       	adiw	r28, 0x15	; 21
    76bc:	0c af       	std	Y+60, r16	; 0x3c
    76be:	1d af       	std	Y+61, r17	; 0x3d
    76c0:	2e af       	std	Y+62, r18	; 0x3e
    76c2:	3f af       	std	Y+63, r19	; 0x3f
    76c4:	65 97       	sbiw	r28, 0x15	; 21
    76c6:	c6 01       	movw	r24, r12
    76c8:	b5 01       	movw	r22, r10
    76ca:	a4 01       	movw	r20, r8
    76cc:	93 01       	movw	r18, r6
    76ce:	0e 94 10 45 	call	0x8a20	; 0x8a20 <__udivmodsi4>
    76d2:	7b 01       	movw	r14, r22
    76d4:	8c 01       	movw	r16, r24
    76d6:	c6 01       	movw	r24, r12
    76d8:	b5 01       	movw	r22, r10
    76da:	a4 01       	movw	r20, r8
    76dc:	93 01       	movw	r18, r6
    76de:	0e 94 10 45 	call	0x8a20	; 0x8a20 <__udivmodsi4>
    76e2:	c9 01       	movw	r24, r18
    76e4:	da 01       	movw	r26, r20
    76e6:	1c 01       	movw	r2, r24
    76e8:	2d 01       	movw	r4, r26
    76ea:	c2 01       	movw	r24, r4
    76ec:	b1 01       	movw	r22, r2
    76ee:	65 96       	adiw	r28, 0x15	; 21
    76f0:	2c ad       	ldd	r18, Y+60	; 0x3c
    76f2:	3d ad       	ldd	r19, Y+61	; 0x3d
    76f4:	4e ad       	ldd	r20, Y+62	; 0x3e
    76f6:	5f ad       	ldd	r21, Y+63	; 0x3f
    76f8:	65 97       	sbiw	r28, 0x15	; 21
    76fa:	0e 94 f1 44 	call	0x89e2	; 0x89e2 <__mulsi3>
    76fe:	9b 01       	movw	r18, r22
    7700:	ac 01       	movw	r20, r24
    7702:	87 01       	movw	r16, r14
    7704:	ff 24       	eor	r15, r15
    7706:	ee 24       	eor	r14, r14
    7708:	ad 8c       	ldd	r10, Y+29	; 0x1d
    770a:	be 8c       	ldd	r11, Y+30	; 0x1e
    770c:	cf 8c       	ldd	r12, Y+31	; 0x1f
    770e:	d8 a0       	ldd	r13, Y+32	; 0x20
    7710:	c6 01       	movw	r24, r12
    7712:	aa 27       	eor	r26, r26
    7714:	bb 27       	eor	r27, r27
    7716:	57 01       	movw	r10, r14
    7718:	68 01       	movw	r12, r16
    771a:	a8 2a       	or	r10, r24
    771c:	b9 2a       	or	r11, r25
    771e:	ca 2a       	or	r12, r26
    7720:	db 2a       	or	r13, r27
    7722:	a2 16       	cp	r10, r18
    7724:	b3 06       	cpc	r11, r19
    7726:	c4 06       	cpc	r12, r20
    7728:	d5 06       	cpc	r13, r21
    772a:	00 f5       	brcc	.+64     	; 0x776c <__udivdi3+0xa2e>
    772c:	08 94       	sec
    772e:	21 08       	sbc	r2, r1
    7730:	31 08       	sbc	r3, r1
    7732:	41 08       	sbc	r4, r1
    7734:	51 08       	sbc	r5, r1
    7736:	ed a0       	ldd	r14, Y+37	; 0x25
    7738:	fe a0       	ldd	r15, Y+38	; 0x26
    773a:	0f a1       	ldd	r16, Y+39	; 0x27
    773c:	18 a5       	ldd	r17, Y+40	; 0x28
    773e:	ae 0c       	add	r10, r14
    7740:	bf 1c       	adc	r11, r15
    7742:	c0 1e       	adc	r12, r16
    7744:	d1 1e       	adc	r13, r17
    7746:	ae 14       	cp	r10, r14
    7748:	bf 04       	cpc	r11, r15
    774a:	c0 06       	cpc	r12, r16
    774c:	d1 06       	cpc	r13, r17
    774e:	70 f0       	brcs	.+28     	; 0x776c <__udivdi3+0xa2e>
    7750:	a2 16       	cp	r10, r18
    7752:	b3 06       	cpc	r11, r19
    7754:	c4 06       	cpc	r12, r20
    7756:	d5 06       	cpc	r13, r21
    7758:	48 f4       	brcc	.+18     	; 0x776c <__udivdi3+0xa2e>
    775a:	08 94       	sec
    775c:	21 08       	sbc	r2, r1
    775e:	31 08       	sbc	r3, r1
    7760:	41 08       	sbc	r4, r1
    7762:	51 08       	sbc	r5, r1
    7764:	ae 0c       	add	r10, r14
    7766:	bf 1c       	adc	r11, r15
    7768:	c0 1e       	adc	r12, r16
    776a:	d1 1e       	adc	r13, r17
    776c:	a2 1a       	sub	r10, r18
    776e:	b3 0a       	sbc	r11, r19
    7770:	c4 0a       	sbc	r12, r20
    7772:	d5 0a       	sbc	r13, r21
    7774:	c6 01       	movw	r24, r12
    7776:	b5 01       	movw	r22, r10
    7778:	a4 01       	movw	r20, r8
    777a:	93 01       	movw	r18, r6
    777c:	0e 94 10 45 	call	0x8a20	; 0x8a20 <__udivmodsi4>
    7780:	7b 01       	movw	r14, r22
    7782:	8c 01       	movw	r16, r24
    7784:	c6 01       	movw	r24, r12
    7786:	b5 01       	movw	r22, r10
    7788:	a4 01       	movw	r20, r8
    778a:	93 01       	movw	r18, r6
    778c:	0e 94 10 45 	call	0x8a20	; 0x8a20 <__udivmodsi4>
    7790:	c9 01       	movw	r24, r18
    7792:	da 01       	movw	r26, r20
    7794:	3c 01       	movw	r6, r24
    7796:	4d 01       	movw	r8, r26
    7798:	c4 01       	movw	r24, r8
    779a:	b3 01       	movw	r22, r6
    779c:	65 96       	adiw	r28, 0x15	; 21
    779e:	2c ad       	ldd	r18, Y+60	; 0x3c
    77a0:	3d ad       	ldd	r19, Y+61	; 0x3d
    77a2:	4e ad       	ldd	r20, Y+62	; 0x3e
    77a4:	5f ad       	ldd	r21, Y+63	; 0x3f
    77a6:	65 97       	sbiw	r28, 0x15	; 21
    77a8:	0e 94 f1 44 	call	0x89e2	; 0x89e2 <__mulsi3>
    77ac:	9b 01       	movw	r18, r22
    77ae:	ac 01       	movw	r20, r24
    77b0:	87 01       	movw	r16, r14
    77b2:	ff 24       	eor	r15, r15
    77b4:	ee 24       	eor	r14, r14
    77b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    77b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    77ba:	af 8d       	ldd	r26, Y+31	; 0x1f
    77bc:	b8 a1       	ldd	r27, Y+32	; 0x20
    77be:	a0 70       	andi	r26, 0x00	; 0
    77c0:	b0 70       	andi	r27, 0x00	; 0
    77c2:	57 01       	movw	r10, r14
    77c4:	68 01       	movw	r12, r16
    77c6:	a8 2a       	or	r10, r24
    77c8:	b9 2a       	or	r11, r25
    77ca:	ca 2a       	or	r12, r26
    77cc:	db 2a       	or	r13, r27
    77ce:	a2 16       	cp	r10, r18
    77d0:	b3 06       	cpc	r11, r19
    77d2:	c4 06       	cpc	r12, r20
    77d4:	d5 06       	cpc	r13, r21
    77d6:	00 f5       	brcc	.+64     	; 0x7818 <__udivdi3+0xada>
    77d8:	08 94       	sec
    77da:	61 08       	sbc	r6, r1
    77dc:	71 08       	sbc	r7, r1
    77de:	81 08       	sbc	r8, r1
    77e0:	91 08       	sbc	r9, r1
    77e2:	6d a1       	ldd	r22, Y+37	; 0x25
    77e4:	7e a1       	ldd	r23, Y+38	; 0x26
    77e6:	8f a1       	ldd	r24, Y+39	; 0x27
    77e8:	98 a5       	ldd	r25, Y+40	; 0x28
    77ea:	a6 0e       	add	r10, r22
    77ec:	b7 1e       	adc	r11, r23
    77ee:	c8 1e       	adc	r12, r24
    77f0:	d9 1e       	adc	r13, r25
    77f2:	a6 16       	cp	r10, r22
    77f4:	b7 06       	cpc	r11, r23
    77f6:	c8 06       	cpc	r12, r24
    77f8:	d9 06       	cpc	r13, r25
    77fa:	70 f0       	brcs	.+28     	; 0x7818 <__udivdi3+0xada>
    77fc:	a2 16       	cp	r10, r18
    77fe:	b3 06       	cpc	r11, r19
    7800:	c4 06       	cpc	r12, r20
    7802:	d5 06       	cpc	r13, r21
    7804:	48 f4       	brcc	.+18     	; 0x7818 <__udivdi3+0xada>
    7806:	08 94       	sec
    7808:	61 08       	sbc	r6, r1
    780a:	71 08       	sbc	r7, r1
    780c:	81 08       	sbc	r8, r1
    780e:	91 08       	sbc	r9, r1
    7810:	a6 0e       	add	r10, r22
    7812:	b7 1e       	adc	r11, r23
    7814:	c8 1e       	adc	r12, r24
    7816:	d9 1e       	adc	r13, r25
    7818:	d6 01       	movw	r26, r12
    781a:	c5 01       	movw	r24, r10
    781c:	82 1b       	sub	r24, r18
    781e:	93 0b       	sbc	r25, r19
    7820:	a4 0b       	sbc	r26, r20
    7822:	b5 0b       	sbc	r27, r21
    7824:	89 8f       	std	Y+25, r24	; 0x19
    7826:	9a 8f       	std	Y+26, r25	; 0x1a
    7828:	ab 8f       	std	Y+27, r26	; 0x1b
    782a:	bc 8f       	std	Y+28, r27	; 0x1c
    782c:	d1 01       	movw	r26, r2
    782e:	99 27       	eor	r25, r25
    7830:	88 27       	eor	r24, r24
    7832:	64 01       	movw	r12, r8
    7834:	53 01       	movw	r10, r6
    7836:	a8 2a       	or	r10, r24
    7838:	b9 2a       	or	r11, r25
    783a:	ca 2a       	or	r12, r26
    783c:	db 2a       	or	r13, r27
    783e:	a9 aa       	std	Y+49, r10	; 0x31
    7840:	ba aa       	std	Y+50, r11	; 0x32
    7842:	cb aa       	std	Y+51, r12	; 0x33
    7844:	dc aa       	std	Y+52, r13	; 0x34
    7846:	86 01       	movw	r16, r12
    7848:	75 01       	movw	r14, r10
    784a:	2f ef       	ldi	r18, 0xFF	; 255
    784c:	3f ef       	ldi	r19, 0xFF	; 255
    784e:	40 e0       	ldi	r20, 0x00	; 0
    7850:	50 e0       	ldi	r21, 0x00	; 0
    7852:	e2 22       	and	r14, r18
    7854:	f3 22       	and	r15, r19
    7856:	04 23       	and	r16, r20
    7858:	15 23       	and	r17, r21
    785a:	a6 01       	movw	r20, r12
    785c:	66 27       	eor	r22, r22
    785e:	77 27       	eor	r23, r23
    7860:	6d 96       	adiw	r28, 0x1d	; 29
    7862:	4c af       	std	Y+60, r20	; 0x3c
    7864:	5d af       	std	Y+61, r21	; 0x3d
    7866:	6e af       	std	Y+62, r22	; 0x3e
    7868:	7f af       	std	Y+63, r23	; 0x3f
    786a:	6d 97       	sbiw	r28, 0x1d	; 29
    786c:	a9 a0       	ldd	r10, Y+33	; 0x21
    786e:	ba a0       	ldd	r11, Y+34	; 0x22
    7870:	cb a0       	ldd	r12, Y+35	; 0x23
    7872:	dc a0       	ldd	r13, Y+36	; 0x24
    7874:	6f ef       	ldi	r22, 0xFF	; 255
    7876:	7f ef       	ldi	r23, 0xFF	; 255
    7878:	80 e0       	ldi	r24, 0x00	; 0
    787a:	90 e0       	ldi	r25, 0x00	; 0
    787c:	a6 22       	and	r10, r22
    787e:	b7 22       	and	r11, r23
    7880:	c8 22       	and	r12, r24
    7882:	d9 22       	and	r13, r25
    7884:	89 a1       	ldd	r24, Y+33	; 0x21
    7886:	9a a1       	ldd	r25, Y+34	; 0x22
    7888:	ab a1       	ldd	r26, Y+35	; 0x23
    788a:	bc a1       	ldd	r27, Y+36	; 0x24
    788c:	1d 01       	movw	r2, r26
    788e:	44 24       	eor	r4, r4
    7890:	55 24       	eor	r5, r5
    7892:	c8 01       	movw	r24, r16
    7894:	b7 01       	movw	r22, r14
    7896:	a6 01       	movw	r20, r12
    7898:	95 01       	movw	r18, r10
    789a:	0e 94 f1 44 	call	0x89e2	; 0x89e2 <__mulsi3>
    789e:	69 96       	adiw	r28, 0x19	; 25
    78a0:	6c af       	std	Y+60, r22	; 0x3c
    78a2:	7d af       	std	Y+61, r23	; 0x3d
    78a4:	8e af       	std	Y+62, r24	; 0x3e
    78a6:	9f af       	std	Y+63, r25	; 0x3f
    78a8:	69 97       	sbiw	r28, 0x19	; 25
    78aa:	c8 01       	movw	r24, r16
    78ac:	b7 01       	movw	r22, r14
    78ae:	a2 01       	movw	r20, r4
    78b0:	91 01       	movw	r18, r2
    78b2:	0e 94 f1 44 	call	0x89e2	; 0x89e2 <__mulsi3>
    78b6:	3b 01       	movw	r6, r22
    78b8:	4c 01       	movw	r8, r24
    78ba:	6d 96       	adiw	r28, 0x1d	; 29
    78bc:	6c ad       	ldd	r22, Y+60	; 0x3c
    78be:	7d ad       	ldd	r23, Y+61	; 0x3d
    78c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    78c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    78c4:	6d 97       	sbiw	r28, 0x1d	; 29
    78c6:	a6 01       	movw	r20, r12
    78c8:	95 01       	movw	r18, r10
    78ca:	0e 94 f1 44 	call	0x89e2	; 0x89e2 <__mulsi3>
    78ce:	7b 01       	movw	r14, r22
    78d0:	8c 01       	movw	r16, r24
    78d2:	6d 96       	adiw	r28, 0x1d	; 29
    78d4:	6c ad       	ldd	r22, Y+60	; 0x3c
    78d6:	7d ad       	ldd	r23, Y+61	; 0x3d
    78d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    78da:	9f ad       	ldd	r25, Y+63	; 0x3f
    78dc:	6d 97       	sbiw	r28, 0x1d	; 29
    78de:	a2 01       	movw	r20, r4
    78e0:	91 01       	movw	r18, r2
    78e2:	0e 94 f1 44 	call	0x89e2	; 0x89e2 <__mulsi3>
    78e6:	5b 01       	movw	r10, r22
    78e8:	6c 01       	movw	r12, r24
    78ea:	a8 01       	movw	r20, r16
    78ec:	97 01       	movw	r18, r14
    78ee:	26 0d       	add	r18, r6
    78f0:	37 1d       	adc	r19, r7
    78f2:	48 1d       	adc	r20, r8
    78f4:	59 1d       	adc	r21, r9
    78f6:	69 96       	adiw	r28, 0x19	; 25
    78f8:	6c ac       	ldd	r6, Y+60	; 0x3c
    78fa:	7d ac       	ldd	r7, Y+61	; 0x3d
    78fc:	8e ac       	ldd	r8, Y+62	; 0x3e
    78fe:	9f ac       	ldd	r9, Y+63	; 0x3f
    7900:	69 97       	sbiw	r28, 0x19	; 25
    7902:	c4 01       	movw	r24, r8
    7904:	aa 27       	eor	r26, r26
    7906:	bb 27       	eor	r27, r27
    7908:	28 0f       	add	r18, r24
    790a:	39 1f       	adc	r19, r25
    790c:	4a 1f       	adc	r20, r26
    790e:	5b 1f       	adc	r21, r27
    7910:	2e 15       	cp	r18, r14
    7912:	3f 05       	cpc	r19, r15
    7914:	40 07       	cpc	r20, r16
    7916:	51 07       	cpc	r21, r17
    7918:	48 f4       	brcc	.+18     	; 0x792c <__udivdi3+0xbee>
    791a:	e1 2c       	mov	r14, r1
    791c:	f1 2c       	mov	r15, r1
    791e:	61 e0       	ldi	r22, 0x01	; 1
    7920:	06 2f       	mov	r16, r22
    7922:	11 2d       	mov	r17, r1
    7924:	ae 0c       	add	r10, r14
    7926:	bf 1c       	adc	r11, r15
    7928:	c0 1e       	adc	r12, r16
    792a:	d1 1e       	adc	r13, r17
    792c:	ca 01       	movw	r24, r20
    792e:	aa 27       	eor	r26, r26
    7930:	bb 27       	eor	r27, r27
    7932:	bc 01       	movw	r22, r24
    7934:	cd 01       	movw	r24, r26
    7936:	6a 0d       	add	r22, r10
    7938:	7b 1d       	adc	r23, r11
    793a:	8c 1d       	adc	r24, r12
    793c:	9d 1d       	adc	r25, r13
    793e:	69 8c       	ldd	r6, Y+25	; 0x19
    7940:	7a 8c       	ldd	r7, Y+26	; 0x1a
    7942:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7944:	9c 8c       	ldd	r9, Y+28	; 0x1c
    7946:	66 16       	cp	r6, r22
    7948:	77 06       	cpc	r7, r23
    794a:	88 06       	cpc	r8, r24
    794c:	99 06       	cpc	r9, r25
    794e:	40 f1       	brcs	.+80     	; 0x79a0 <__udivdi3+0xc62>
    7950:	66 15       	cp	r22, r6
    7952:	77 05       	cpc	r23, r7
    7954:	88 05       	cpc	r24, r8
    7956:	99 05       	cpc	r25, r9
    7958:	09 f0       	breq	.+2      	; 0x795c <__udivdi3+0xc1e>
    795a:	43 c0       	rjmp	.+134    	; 0x79e2 <__udivdi3+0xca4>
    795c:	d9 01       	movw	r26, r18
    795e:	99 27       	eor	r25, r25
    7960:	88 27       	eor	r24, r24
    7962:	69 96       	adiw	r28, 0x19	; 25
    7964:	2c ad       	ldd	r18, Y+60	; 0x3c
    7966:	3d ad       	ldd	r19, Y+61	; 0x3d
    7968:	4e ad       	ldd	r20, Y+62	; 0x3e
    796a:	5f ad       	ldd	r21, Y+63	; 0x3f
    796c:	69 97       	sbiw	r28, 0x19	; 25
    796e:	40 70       	andi	r20, 0x00	; 0
    7970:	50 70       	andi	r21, 0x00	; 0
    7972:	82 0f       	add	r24, r18
    7974:	93 1f       	adc	r25, r19
    7976:	a4 1f       	adc	r26, r20
    7978:	b5 1f       	adc	r27, r21
    797a:	2d a5       	ldd	r18, Y+45	; 0x2d
    797c:	3e a5       	ldd	r19, Y+46	; 0x2e
    797e:	4f a5       	ldd	r20, Y+47	; 0x2f
    7980:	58 a9       	ldd	r21, Y+48	; 0x30
    7982:	6e 96       	adiw	r28, 0x1e	; 30
    7984:	0f ac       	ldd	r0, Y+63	; 0x3f
    7986:	6e 97       	sbiw	r28, 0x1e	; 30
    7988:	04 c0       	rjmp	.+8      	; 0x7992 <__udivdi3+0xc54>
    798a:	22 0f       	add	r18, r18
    798c:	33 1f       	adc	r19, r19
    798e:	44 1f       	adc	r20, r20
    7990:	55 1f       	adc	r21, r21
    7992:	0a 94       	dec	r0
    7994:	d2 f7       	brpl	.-12     	; 0x798a <__udivdi3+0xc4c>
    7996:	28 17       	cp	r18, r24
    7998:	39 07       	cpc	r19, r25
    799a:	4a 07       	cpc	r20, r26
    799c:	5b 07       	cpc	r21, r27
    799e:	08 f5       	brcc	.+66     	; 0x79e2 <__udivdi3+0xca4>
    79a0:	09 a9       	ldd	r16, Y+49	; 0x31
    79a2:	1a a9       	ldd	r17, Y+50	; 0x32
    79a4:	2b a9       	ldd	r18, Y+51	; 0x33
    79a6:	3c a9       	ldd	r19, Y+52	; 0x34
    79a8:	01 50       	subi	r16, 0x01	; 1
    79aa:	10 40       	sbci	r17, 0x00	; 0
    79ac:	20 40       	sbci	r18, 0x00	; 0
    79ae:	30 40       	sbci	r19, 0x00	; 0
    79b0:	09 ab       	std	Y+49, r16	; 0x31
    79b2:	1a ab       	std	Y+50, r17	; 0x32
    79b4:	2b ab       	std	Y+51, r18	; 0x33
    79b6:	3c ab       	std	Y+52, r19	; 0x34
    79b8:	14 c0       	rjmp	.+40     	; 0x79e2 <__udivdi3+0xca4>
    79ba:	66 24       	eor	r6, r6
    79bc:	77 24       	eor	r7, r7
    79be:	43 01       	movw	r8, r6
    79c0:	21 e0       	ldi	r18, 0x01	; 1
    79c2:	30 e0       	ldi	r19, 0x00	; 0
    79c4:	40 e0       	ldi	r20, 0x00	; 0
    79c6:	50 e0       	ldi	r21, 0x00	; 0
    79c8:	29 ab       	std	Y+49, r18	; 0x31
    79ca:	3a ab       	std	Y+50, r19	; 0x32
    79cc:	4b ab       	std	Y+51, r20	; 0x33
    79ce:	5c ab       	std	Y+52, r21	; 0x34
    79d0:	0b c0       	rjmp	.+22     	; 0x79e8 <__udivdi3+0xcaa>
    79d2:	66 24       	eor	r6, r6
    79d4:	77 24       	eor	r7, r7
    79d6:	43 01       	movw	r8, r6
    79d8:	19 aa       	std	Y+49, r1	; 0x31
    79da:	1a aa       	std	Y+50, r1	; 0x32
    79dc:	1b aa       	std	Y+51, r1	; 0x33
    79de:	1c aa       	std	Y+52, r1	; 0x34
    79e0:	03 c0       	rjmp	.+6      	; 0x79e8 <__udivdi3+0xcaa>
    79e2:	66 24       	eor	r6, r6
    79e4:	77 24       	eor	r7, r7
    79e6:	43 01       	movw	r8, r6
    79e8:	fe 01       	movw	r30, r28
    79ea:	71 96       	adiw	r30, 0x11	; 17
    79ec:	88 e0       	ldi	r24, 0x08	; 8
    79ee:	df 01       	movw	r26, r30
    79f0:	1d 92       	st	X+, r1
    79f2:	8a 95       	dec	r24
    79f4:	e9 f7       	brne	.-6      	; 0x79f0 <__udivdi3+0xcb2>
    79f6:	a9 a8       	ldd	r10, Y+49	; 0x31
    79f8:	ba a8       	ldd	r11, Y+50	; 0x32
    79fa:	cb a8       	ldd	r12, Y+51	; 0x33
    79fc:	dc a8       	ldd	r13, Y+52	; 0x34
    79fe:	a9 8a       	std	Y+17, r10	; 0x11
    7a00:	ba 8a       	std	Y+18, r11	; 0x12
    7a02:	cb 8a       	std	Y+19, r12	; 0x13
    7a04:	dc 8a       	std	Y+20, r13	; 0x14
    7a06:	6d 8a       	std	Y+21, r6	; 0x15
    7a08:	7e 8a       	std	Y+22, r7	; 0x16
    7a0a:	8f 8a       	std	Y+23, r8	; 0x17
    7a0c:	98 8e       	std	Y+24, r9	; 0x18
    7a0e:	29 a9       	ldd	r18, Y+49	; 0x31
    7a10:	3a 89       	ldd	r19, Y+18	; 0x12
    7a12:	4b 89       	ldd	r20, Y+19	; 0x13
    7a14:	5c 89       	ldd	r21, Y+20	; 0x14
    7a16:	66 2d       	mov	r22, r6
    7a18:	7e 89       	ldd	r23, Y+22	; 0x16
    7a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    7a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    7a1e:	c2 5a       	subi	r28, 0xA2	; 162
    7a20:	df 4f       	sbci	r29, 0xFF	; 255
    7a22:	e2 e1       	ldi	r30, 0x12	; 18
    7a24:	0c 94 4e 45 	jmp	0x8a9c	; 0x8a9c <__epilogue_restores__>

00007a28 <vfprintf>:
    7a28:	2f 92       	push	r2
    7a2a:	3f 92       	push	r3
    7a2c:	4f 92       	push	r4
    7a2e:	5f 92       	push	r5
    7a30:	6f 92       	push	r6
    7a32:	7f 92       	push	r7
    7a34:	8f 92       	push	r8
    7a36:	9f 92       	push	r9
    7a38:	af 92       	push	r10
    7a3a:	bf 92       	push	r11
    7a3c:	cf 92       	push	r12
    7a3e:	df 92       	push	r13
    7a40:	ef 92       	push	r14
    7a42:	ff 92       	push	r15
    7a44:	0f 93       	push	r16
    7a46:	1f 93       	push	r17
    7a48:	df 93       	push	r29
    7a4a:	cf 93       	push	r28
    7a4c:	cd b7       	in	r28, 0x3d	; 61
    7a4e:	de b7       	in	r29, 0x3e	; 62
    7a50:	61 97       	sbiw	r28, 0x11	; 17
    7a52:	cd bf       	out	0x3d, r28	; 61
    7a54:	de bf       	out	0x3e, r29	; 62
    7a56:	3c 01       	movw	r6, r24
    7a58:	6e 87       	std	Y+14, r22	; 0x0e
    7a5a:	7f 87       	std	Y+15, r23	; 0x0f
    7a5c:	6a 01       	movw	r12, r20
    7a5e:	fc 01       	movw	r30, r24
    7a60:	16 82       	std	Z+6, r1	; 0x06
    7a62:	17 82       	std	Z+7, r1	; 0x07
    7a64:	83 81       	ldd	r24, Z+3	; 0x03
    7a66:	81 fd       	sbrc	r24, 1
    7a68:	03 c0       	rjmp	.+6      	; 0x7a70 <vfprintf+0x48>
    7a6a:	6f ef       	ldi	r22, 0xFF	; 255
    7a6c:	7f ef       	ldi	r23, 0xFF	; 255
    7a6e:	6f c3       	rjmp	.+1758   	; 0x814e <vfprintf+0x726>
    7a70:	9e 01       	movw	r18, r28
    7a72:	2f 5f       	subi	r18, 0xFF	; 255
    7a74:	3f 4f       	sbci	r19, 0xFF	; 255
    7a76:	28 8b       	std	Y+16, r18	; 0x10
    7a78:	39 8b       	std	Y+17, r19	; 0x11
    7a7a:	f3 01       	movw	r30, r6
    7a7c:	23 81       	ldd	r18, Z+3	; 0x03
    7a7e:	ee 85       	ldd	r30, Y+14	; 0x0e
    7a80:	ff 85       	ldd	r31, Y+15	; 0x0f
    7a82:	23 fd       	sbrc	r18, 3
    7a84:	85 91       	lpm	r24, Z+
    7a86:	23 ff       	sbrs	r18, 3
    7a88:	81 91       	ld	r24, Z+
    7a8a:	ee 87       	std	Y+14, r30	; 0x0e
    7a8c:	ff 87       	std	Y+15, r31	; 0x0f
    7a8e:	88 23       	and	r24, r24
    7a90:	09 f4       	brne	.+2      	; 0x7a94 <vfprintf+0x6c>
    7a92:	5a c3       	rjmp	.+1716   	; 0x8148 <vfprintf+0x720>
    7a94:	85 32       	cpi	r24, 0x25	; 37
    7a96:	51 f4       	brne	.+20     	; 0x7aac <vfprintf+0x84>
    7a98:	ee 85       	ldd	r30, Y+14	; 0x0e
    7a9a:	ff 85       	ldd	r31, Y+15	; 0x0f
    7a9c:	23 fd       	sbrc	r18, 3
    7a9e:	85 91       	lpm	r24, Z+
    7aa0:	23 ff       	sbrs	r18, 3
    7aa2:	81 91       	ld	r24, Z+
    7aa4:	ee 87       	std	Y+14, r30	; 0x0e
    7aa6:	ff 87       	std	Y+15, r31	; 0x0f
    7aa8:	85 32       	cpi	r24, 0x25	; 37
    7aaa:	29 f4       	brne	.+10     	; 0x7ab6 <vfprintf+0x8e>
    7aac:	90 e0       	ldi	r25, 0x00	; 0
    7aae:	b3 01       	movw	r22, r6
    7ab0:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7ab4:	e2 cf       	rjmp	.-60     	; 0x7a7a <vfprintf+0x52>
    7ab6:	98 2f       	mov	r25, r24
    7ab8:	10 e0       	ldi	r17, 0x00	; 0
    7aba:	88 24       	eor	r8, r8
    7abc:	99 24       	eor	r9, r9
    7abe:	10 32       	cpi	r17, 0x20	; 32
    7ac0:	b0 f4       	brcc	.+44     	; 0x7aee <vfprintf+0xc6>
    7ac2:	9b 32       	cpi	r25, 0x2B	; 43
    7ac4:	69 f0       	breq	.+26     	; 0x7ae0 <vfprintf+0xb8>
    7ac6:	9c 32       	cpi	r25, 0x2C	; 44
    7ac8:	28 f4       	brcc	.+10     	; 0x7ad4 <vfprintf+0xac>
    7aca:	90 32       	cpi	r25, 0x20	; 32
    7acc:	51 f0       	breq	.+20     	; 0x7ae2 <vfprintf+0xba>
    7ace:	93 32       	cpi	r25, 0x23	; 35
    7ad0:	71 f4       	brne	.+28     	; 0x7aee <vfprintf+0xc6>
    7ad2:	0b c0       	rjmp	.+22     	; 0x7aea <vfprintf+0xc2>
    7ad4:	9d 32       	cpi	r25, 0x2D	; 45
    7ad6:	39 f0       	breq	.+14     	; 0x7ae6 <vfprintf+0xbe>
    7ad8:	90 33       	cpi	r25, 0x30	; 48
    7ada:	49 f4       	brne	.+18     	; 0x7aee <vfprintf+0xc6>
    7adc:	11 60       	ori	r17, 0x01	; 1
    7ade:	28 c0       	rjmp	.+80     	; 0x7b30 <vfprintf+0x108>
    7ae0:	12 60       	ori	r17, 0x02	; 2
    7ae2:	14 60       	ori	r17, 0x04	; 4
    7ae4:	25 c0       	rjmp	.+74     	; 0x7b30 <vfprintf+0x108>
    7ae6:	18 60       	ori	r17, 0x08	; 8
    7ae8:	23 c0       	rjmp	.+70     	; 0x7b30 <vfprintf+0x108>
    7aea:	10 61       	ori	r17, 0x10	; 16
    7aec:	21 c0       	rjmp	.+66     	; 0x7b30 <vfprintf+0x108>
    7aee:	17 fd       	sbrc	r17, 7
    7af0:	2a c0       	rjmp	.+84     	; 0x7b46 <vfprintf+0x11e>
    7af2:	89 2f       	mov	r24, r25
    7af4:	80 53       	subi	r24, 0x30	; 48
    7af6:	8a 30       	cpi	r24, 0x0A	; 10
    7af8:	78 f4       	brcc	.+30     	; 0x7b18 <vfprintf+0xf0>
    7afa:	16 ff       	sbrs	r17, 6
    7afc:	06 c0       	rjmp	.+12     	; 0x7b0a <vfprintf+0xe2>
    7afe:	fa e0       	ldi	r31, 0x0A	; 10
    7b00:	9f 9e       	mul	r9, r31
    7b02:	90 2c       	mov	r9, r0
    7b04:	11 24       	eor	r1, r1
    7b06:	98 0e       	add	r9, r24
    7b08:	13 c0       	rjmp	.+38     	; 0x7b30 <vfprintf+0x108>
    7b0a:	3a e0       	ldi	r19, 0x0A	; 10
    7b0c:	83 9e       	mul	r8, r19
    7b0e:	80 2c       	mov	r8, r0
    7b10:	11 24       	eor	r1, r1
    7b12:	88 0e       	add	r8, r24
    7b14:	10 62       	ori	r17, 0x20	; 32
    7b16:	0c c0       	rjmp	.+24     	; 0x7b30 <vfprintf+0x108>
    7b18:	9e 32       	cpi	r25, 0x2E	; 46
    7b1a:	21 f4       	brne	.+8      	; 0x7b24 <vfprintf+0xfc>
    7b1c:	16 fd       	sbrc	r17, 6
    7b1e:	14 c3       	rjmp	.+1576   	; 0x8148 <vfprintf+0x720>
    7b20:	10 64       	ori	r17, 0x40	; 64
    7b22:	06 c0       	rjmp	.+12     	; 0x7b30 <vfprintf+0x108>
    7b24:	9c 36       	cpi	r25, 0x6C	; 108
    7b26:	11 f4       	brne	.+4      	; 0x7b2c <vfprintf+0x104>
    7b28:	10 68       	ori	r17, 0x80	; 128
    7b2a:	02 c0       	rjmp	.+4      	; 0x7b30 <vfprintf+0x108>
    7b2c:	98 36       	cpi	r25, 0x68	; 104
    7b2e:	59 f4       	brne	.+22     	; 0x7b46 <vfprintf+0x11e>
    7b30:	ee 85       	ldd	r30, Y+14	; 0x0e
    7b32:	ff 85       	ldd	r31, Y+15	; 0x0f
    7b34:	23 fd       	sbrc	r18, 3
    7b36:	95 91       	lpm	r25, Z+
    7b38:	23 ff       	sbrs	r18, 3
    7b3a:	91 91       	ld	r25, Z+
    7b3c:	ee 87       	std	Y+14, r30	; 0x0e
    7b3e:	ff 87       	std	Y+15, r31	; 0x0f
    7b40:	99 23       	and	r25, r25
    7b42:	09 f0       	breq	.+2      	; 0x7b46 <vfprintf+0x11e>
    7b44:	bc cf       	rjmp	.-136    	; 0x7abe <vfprintf+0x96>
    7b46:	89 2f       	mov	r24, r25
    7b48:	85 54       	subi	r24, 0x45	; 69
    7b4a:	83 30       	cpi	r24, 0x03	; 3
    7b4c:	20 f4       	brcc	.+8      	; 0x7b56 <vfprintf+0x12e>
    7b4e:	81 2f       	mov	r24, r17
    7b50:	80 61       	ori	r24, 0x10	; 16
    7b52:	90 5e       	subi	r25, 0xE0	; 224
    7b54:	07 c0       	rjmp	.+14     	; 0x7b64 <vfprintf+0x13c>
    7b56:	89 2f       	mov	r24, r25
    7b58:	85 56       	subi	r24, 0x65	; 101
    7b5a:	83 30       	cpi	r24, 0x03	; 3
    7b5c:	08 f0       	brcs	.+2      	; 0x7b60 <vfprintf+0x138>
    7b5e:	9f c1       	rjmp	.+830    	; 0x7e9e <vfprintf+0x476>
    7b60:	81 2f       	mov	r24, r17
    7b62:	8f 7e       	andi	r24, 0xEF	; 239
    7b64:	86 fd       	sbrc	r24, 6
    7b66:	02 c0       	rjmp	.+4      	; 0x7b6c <vfprintf+0x144>
    7b68:	76 e0       	ldi	r23, 0x06	; 6
    7b6a:	97 2e       	mov	r9, r23
    7b6c:	6f e3       	ldi	r22, 0x3F	; 63
    7b6e:	f6 2e       	mov	r15, r22
    7b70:	f8 22       	and	r15, r24
    7b72:	95 36       	cpi	r25, 0x65	; 101
    7b74:	19 f4       	brne	.+6      	; 0x7b7c <vfprintf+0x154>
    7b76:	f0 e4       	ldi	r31, 0x40	; 64
    7b78:	ff 2a       	or	r15, r31
    7b7a:	07 c0       	rjmp	.+14     	; 0x7b8a <vfprintf+0x162>
    7b7c:	96 36       	cpi	r25, 0x66	; 102
    7b7e:	19 f4       	brne	.+6      	; 0x7b86 <vfprintf+0x15e>
    7b80:	20 e8       	ldi	r18, 0x80	; 128
    7b82:	f2 2a       	or	r15, r18
    7b84:	02 c0       	rjmp	.+4      	; 0x7b8a <vfprintf+0x162>
    7b86:	91 10       	cpse	r9, r1
    7b88:	9a 94       	dec	r9
    7b8a:	f7 fe       	sbrs	r15, 7
    7b8c:	0a c0       	rjmp	.+20     	; 0x7ba2 <vfprintf+0x17a>
    7b8e:	3b e3       	ldi	r19, 0x3B	; 59
    7b90:	39 15       	cp	r19, r9
    7b92:	18 f4       	brcc	.+6      	; 0x7b9a <vfprintf+0x172>
    7b94:	5c e3       	ldi	r21, 0x3C	; 60
    7b96:	b5 2e       	mov	r11, r21
    7b98:	02 c0       	rjmp	.+4      	; 0x7b9e <vfprintf+0x176>
    7b9a:	b9 2c       	mov	r11, r9
    7b9c:	b3 94       	inc	r11
    7b9e:	27 e0       	ldi	r18, 0x07	; 7
    7ba0:	09 c0       	rjmp	.+18     	; 0x7bb4 <vfprintf+0x18c>
    7ba2:	47 e0       	ldi	r20, 0x07	; 7
    7ba4:	49 15       	cp	r20, r9
    7ba6:	20 f4       	brcc	.+8      	; 0x7bb0 <vfprintf+0x188>
    7ba8:	bb 24       	eor	r11, r11
    7baa:	47 e0       	ldi	r20, 0x07	; 7
    7bac:	94 2e       	mov	r9, r20
    7bae:	f7 cf       	rjmp	.-18     	; 0x7b9e <vfprintf+0x176>
    7bb0:	29 2d       	mov	r18, r9
    7bb2:	bb 24       	eor	r11, r11
    7bb4:	c6 01       	movw	r24, r12
    7bb6:	04 96       	adiw	r24, 0x04	; 4
    7bb8:	8c 87       	std	Y+12, r24	; 0x0c
    7bba:	9d 87       	std	Y+13, r25	; 0x0d
    7bbc:	f6 01       	movw	r30, r12
    7bbe:	60 81       	ld	r22, Z
    7bc0:	71 81       	ldd	r23, Z+1	; 0x01
    7bc2:	82 81       	ldd	r24, Z+2	; 0x02
    7bc4:	93 81       	ldd	r25, Z+3	; 0x03
    7bc6:	ae 01       	movw	r20, r28
    7bc8:	4f 5f       	subi	r20, 0xFF	; 255
    7bca:	5f 4f       	sbci	r21, 0xFF	; 255
    7bcc:	0b 2d       	mov	r16, r11
    7bce:	0e 94 f5 46 	call	0x8dea	; 0x8dea <__ftoa_engine>
    7bd2:	6c 01       	movw	r12, r24
    7bd4:	09 81       	ldd	r16, Y+1	; 0x01
    7bd6:	20 2e       	mov	r2, r16
    7bd8:	33 24       	eor	r3, r3
    7bda:	00 ff       	sbrs	r16, 0
    7bdc:	04 c0       	rjmp	.+8      	; 0x7be6 <vfprintf+0x1be>
    7bde:	03 fd       	sbrc	r16, 3
    7be0:	02 c0       	rjmp	.+4      	; 0x7be6 <vfprintf+0x1be>
    7be2:	1d e2       	ldi	r17, 0x2D	; 45
    7be4:	09 c0       	rjmp	.+18     	; 0x7bf8 <vfprintf+0x1d0>
    7be6:	f1 fe       	sbrs	r15, 1
    7be8:	02 c0       	rjmp	.+4      	; 0x7bee <vfprintf+0x1c6>
    7bea:	1b e2       	ldi	r17, 0x2B	; 43
    7bec:	05 c0       	rjmp	.+10     	; 0x7bf8 <vfprintf+0x1d0>
    7bee:	f2 fc       	sbrc	r15, 2
    7bf0:	02 c0       	rjmp	.+4      	; 0x7bf6 <vfprintf+0x1ce>
    7bf2:	10 e0       	ldi	r17, 0x00	; 0
    7bf4:	01 c0       	rjmp	.+2      	; 0x7bf8 <vfprintf+0x1d0>
    7bf6:	10 e2       	ldi	r17, 0x20	; 32
    7bf8:	c1 01       	movw	r24, r2
    7bfa:	8c 70       	andi	r24, 0x0C	; 12
    7bfc:	90 70       	andi	r25, 0x00	; 0
    7bfe:	89 2b       	or	r24, r25
    7c00:	b9 f1       	breq	.+110    	; 0x7c70 <vfprintf+0x248>
    7c02:	11 23       	and	r17, r17
    7c04:	11 f4       	brne	.+4      	; 0x7c0a <vfprintf+0x1e2>
    7c06:	83 e0       	ldi	r24, 0x03	; 3
    7c08:	01 c0       	rjmp	.+2      	; 0x7c0c <vfprintf+0x1e4>
    7c0a:	84 e0       	ldi	r24, 0x04	; 4
    7c0c:	88 15       	cp	r24, r8
    7c0e:	10 f0       	brcs	.+4      	; 0x7c14 <vfprintf+0x1ec>
    7c10:	88 24       	eor	r8, r8
    7c12:	0a c0       	rjmp	.+20     	; 0x7c28 <vfprintf+0x200>
    7c14:	88 1a       	sub	r8, r24
    7c16:	f3 fc       	sbrc	r15, 3
    7c18:	07 c0       	rjmp	.+14     	; 0x7c28 <vfprintf+0x200>
    7c1a:	80 e2       	ldi	r24, 0x20	; 32
    7c1c:	90 e0       	ldi	r25, 0x00	; 0
    7c1e:	b3 01       	movw	r22, r6
    7c20:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7c24:	8a 94       	dec	r8
    7c26:	c9 f7       	brne	.-14     	; 0x7c1a <vfprintf+0x1f2>
    7c28:	11 23       	and	r17, r17
    7c2a:	29 f0       	breq	.+10     	; 0x7c36 <vfprintf+0x20e>
    7c2c:	81 2f       	mov	r24, r17
    7c2e:	90 e0       	ldi	r25, 0x00	; 0
    7c30:	b3 01       	movw	r22, r6
    7c32:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7c36:	23 fe       	sbrs	r2, 3
    7c38:	03 c0       	rjmp	.+6      	; 0x7c40 <vfprintf+0x218>
    7c3a:	03 e3       	ldi	r16, 0x33	; 51
    7c3c:	12 e0       	ldi	r17, 0x02	; 2
    7c3e:	0e c0       	rjmp	.+28     	; 0x7c5c <vfprintf+0x234>
    7c40:	07 e3       	ldi	r16, 0x37	; 55
    7c42:	12 e0       	ldi	r17, 0x02	; 2
    7c44:	0b c0       	rjmp	.+22     	; 0x7c5c <vfprintf+0x234>
    7c46:	e1 14       	cp	r14, r1
    7c48:	f1 04       	cpc	r15, r1
    7c4a:	09 f0       	breq	.+2      	; 0x7c4e <vfprintf+0x226>
    7c4c:	80 52       	subi	r24, 0x20	; 32
    7c4e:	90 e0       	ldi	r25, 0x00	; 0
    7c50:	b3 01       	movw	r22, r6
    7c52:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7c56:	0f 5f       	subi	r16, 0xFF	; 255
    7c58:	1f 4f       	sbci	r17, 0xFF	; 255
    7c5a:	05 c0       	rjmp	.+10     	; 0x7c66 <vfprintf+0x23e>
    7c5c:	ef 2c       	mov	r14, r15
    7c5e:	ff 24       	eor	r15, r15
    7c60:	f0 e1       	ldi	r31, 0x10	; 16
    7c62:	ef 22       	and	r14, r31
    7c64:	ff 24       	eor	r15, r15
    7c66:	f8 01       	movw	r30, r16
    7c68:	84 91       	lpm	r24, Z+
    7c6a:	88 23       	and	r24, r24
    7c6c:	61 f7       	brne	.-40     	; 0x7c46 <vfprintf+0x21e>
    7c6e:	14 c1       	rjmp	.+552    	; 0x7e98 <vfprintf+0x470>
    7c70:	f7 fe       	sbrs	r15, 7
    7c72:	12 c0       	rjmp	.+36     	; 0x7c98 <vfprintf+0x270>
    7c74:	bc 0c       	add	r11, r12
    7c76:	24 fe       	sbrs	r2, 4
    7c78:	04 c0       	rjmp	.+8      	; 0x7c82 <vfprintf+0x25a>
    7c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    7c7c:	81 33       	cpi	r24, 0x31	; 49
    7c7e:	09 f4       	brne	.+2      	; 0x7c82 <vfprintf+0x25a>
    7c80:	ba 94       	dec	r11
    7c82:	1b 14       	cp	r1, r11
    7c84:	1c f0       	brlt	.+6      	; 0x7c8c <vfprintf+0x264>
    7c86:	bb 24       	eor	r11, r11
    7c88:	b3 94       	inc	r11
    7c8a:	2d c0       	rjmp	.+90     	; 0x7ce6 <vfprintf+0x2be>
    7c8c:	f8 e0       	ldi	r31, 0x08	; 8
    7c8e:	fb 15       	cp	r31, r11
    7c90:	50 f5       	brcc	.+84     	; 0x7ce6 <vfprintf+0x2be>
    7c92:	38 e0       	ldi	r19, 0x08	; 8
    7c94:	b3 2e       	mov	r11, r19
    7c96:	27 c0       	rjmp	.+78     	; 0x7ce6 <vfprintf+0x2be>
    7c98:	f6 fc       	sbrc	r15, 6
    7c9a:	25 c0       	rjmp	.+74     	; 0x7ce6 <vfprintf+0x2be>
    7c9c:	89 2d       	mov	r24, r9
    7c9e:	90 e0       	ldi	r25, 0x00	; 0
    7ca0:	8c 15       	cp	r24, r12
    7ca2:	9d 05       	cpc	r25, r13
    7ca4:	4c f0       	brlt	.+18     	; 0x7cb8 <vfprintf+0x290>
    7ca6:	2c ef       	ldi	r18, 0xFC	; 252
    7ca8:	c2 16       	cp	r12, r18
    7caa:	2f ef       	ldi	r18, 0xFF	; 255
    7cac:	d2 06       	cpc	r13, r18
    7cae:	24 f0       	brlt	.+8      	; 0x7cb8 <vfprintf+0x290>
    7cb0:	30 e8       	ldi	r19, 0x80	; 128
    7cb2:	f3 2a       	or	r15, r19
    7cb4:	01 c0       	rjmp	.+2      	; 0x7cb8 <vfprintf+0x290>
    7cb6:	9a 94       	dec	r9
    7cb8:	99 20       	and	r9, r9
    7cba:	49 f0       	breq	.+18     	; 0x7cce <vfprintf+0x2a6>
    7cbc:	e2 e0       	ldi	r30, 0x02	; 2
    7cbe:	f0 e0       	ldi	r31, 0x00	; 0
    7cc0:	ec 0f       	add	r30, r28
    7cc2:	fd 1f       	adc	r31, r29
    7cc4:	e9 0d       	add	r30, r9
    7cc6:	f1 1d       	adc	r31, r1
    7cc8:	80 81       	ld	r24, Z
    7cca:	80 33       	cpi	r24, 0x30	; 48
    7ccc:	a1 f3       	breq	.-24     	; 0x7cb6 <vfprintf+0x28e>
    7cce:	f7 fe       	sbrs	r15, 7
    7cd0:	0a c0       	rjmp	.+20     	; 0x7ce6 <vfprintf+0x2be>
    7cd2:	b9 2c       	mov	r11, r9
    7cd4:	b3 94       	inc	r11
    7cd6:	89 2d       	mov	r24, r9
    7cd8:	90 e0       	ldi	r25, 0x00	; 0
    7cda:	c8 16       	cp	r12, r24
    7cdc:	d9 06       	cpc	r13, r25
    7cde:	14 f0       	brlt	.+4      	; 0x7ce4 <vfprintf+0x2bc>
    7ce0:	99 24       	eor	r9, r9
    7ce2:	01 c0       	rjmp	.+2      	; 0x7ce6 <vfprintf+0x2be>
    7ce4:	9c 18       	sub	r9, r12
    7ce6:	f7 fc       	sbrc	r15, 7
    7ce8:	03 c0       	rjmp	.+6      	; 0x7cf0 <vfprintf+0x2c8>
    7cea:	25 e0       	ldi	r18, 0x05	; 5
    7cec:	30 e0       	ldi	r19, 0x00	; 0
    7cee:	09 c0       	rjmp	.+18     	; 0x7d02 <vfprintf+0x2da>
    7cf0:	1c 14       	cp	r1, r12
    7cf2:	1d 04       	cpc	r1, r13
    7cf4:	1c f0       	brlt	.+6      	; 0x7cfc <vfprintf+0x2d4>
    7cf6:	21 e0       	ldi	r18, 0x01	; 1
    7cf8:	30 e0       	ldi	r19, 0x00	; 0
    7cfa:	03 c0       	rjmp	.+6      	; 0x7d02 <vfprintf+0x2da>
    7cfc:	96 01       	movw	r18, r12
    7cfe:	2f 5f       	subi	r18, 0xFF	; 255
    7d00:	3f 4f       	sbci	r19, 0xFF	; 255
    7d02:	11 23       	and	r17, r17
    7d04:	11 f0       	breq	.+4      	; 0x7d0a <vfprintf+0x2e2>
    7d06:	2f 5f       	subi	r18, 0xFF	; 255
    7d08:	3f 4f       	sbci	r19, 0xFF	; 255
    7d0a:	99 20       	and	r9, r9
    7d0c:	29 f0       	breq	.+10     	; 0x7d18 <vfprintf+0x2f0>
    7d0e:	89 2d       	mov	r24, r9
    7d10:	90 e0       	ldi	r25, 0x00	; 0
    7d12:	01 96       	adiw	r24, 0x01	; 1
    7d14:	28 0f       	add	r18, r24
    7d16:	39 1f       	adc	r19, r25
    7d18:	88 2d       	mov	r24, r8
    7d1a:	90 e0       	ldi	r25, 0x00	; 0
    7d1c:	28 17       	cp	r18, r24
    7d1e:	39 07       	cpc	r19, r25
    7d20:	14 f0       	brlt	.+4      	; 0x7d26 <vfprintf+0x2fe>
    7d22:	88 24       	eor	r8, r8
    7d24:	01 c0       	rjmp	.+2      	; 0x7d28 <vfprintf+0x300>
    7d26:	82 1a       	sub	r8, r18
    7d28:	4f 2c       	mov	r4, r15
    7d2a:	55 24       	eor	r5, r5
    7d2c:	c2 01       	movw	r24, r4
    7d2e:	89 70       	andi	r24, 0x09	; 9
    7d30:	90 70       	andi	r25, 0x00	; 0
    7d32:	89 2b       	or	r24, r25
    7d34:	39 f0       	breq	.+14     	; 0x7d44 <vfprintf+0x31c>
    7d36:	08 c0       	rjmp	.+16     	; 0x7d48 <vfprintf+0x320>
    7d38:	80 e2       	ldi	r24, 0x20	; 32
    7d3a:	90 e0       	ldi	r25, 0x00	; 0
    7d3c:	b3 01       	movw	r22, r6
    7d3e:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7d42:	8a 94       	dec	r8
    7d44:	88 20       	and	r8, r8
    7d46:	c1 f7       	brne	.-16     	; 0x7d38 <vfprintf+0x310>
    7d48:	11 23       	and	r17, r17
    7d4a:	29 f0       	breq	.+10     	; 0x7d56 <vfprintf+0x32e>
    7d4c:	81 2f       	mov	r24, r17
    7d4e:	90 e0       	ldi	r25, 0x00	; 0
    7d50:	b3 01       	movw	r22, r6
    7d52:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7d56:	43 fe       	sbrs	r4, 3
    7d58:	07 c0       	rjmp	.+14     	; 0x7d68 <vfprintf+0x340>
    7d5a:	08 c0       	rjmp	.+16     	; 0x7d6c <vfprintf+0x344>
    7d5c:	80 e3       	ldi	r24, 0x30	; 48
    7d5e:	90 e0       	ldi	r25, 0x00	; 0
    7d60:	b3 01       	movw	r22, r6
    7d62:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7d66:	8a 94       	dec	r8
    7d68:	88 20       	and	r8, r8
    7d6a:	c1 f7       	brne	.-16     	; 0x7d5c <vfprintf+0x334>
    7d6c:	f7 fe       	sbrs	r15, 7
    7d6e:	46 c0       	rjmp	.+140    	; 0x7dfc <vfprintf+0x3d4>
    7d70:	86 01       	movw	r16, r12
    7d72:	d7 fe       	sbrs	r13, 7
    7d74:	02 c0       	rjmp	.+4      	; 0x7d7a <vfprintf+0x352>
    7d76:	00 e0       	ldi	r16, 0x00	; 0
    7d78:	10 e0       	ldi	r17, 0x00	; 0
    7d7a:	76 01       	movw	r14, r12
    7d7c:	08 94       	sec
    7d7e:	e1 1c       	adc	r14, r1
    7d80:	f1 1c       	adc	r15, r1
    7d82:	e0 1a       	sub	r14, r16
    7d84:	f1 0a       	sbc	r15, r17
    7d86:	41 e0       	ldi	r20, 0x01	; 1
    7d88:	50 e0       	ldi	r21, 0x00	; 0
    7d8a:	4c 0f       	add	r20, r28
    7d8c:	5d 1f       	adc	r21, r29
    7d8e:	e4 0e       	add	r14, r20
    7d90:	f5 1e       	adc	r15, r21
    7d92:	26 01       	movw	r4, r12
    7d94:	4b 18       	sub	r4, r11
    7d96:	51 08       	sbc	r5, r1
    7d98:	89 2d       	mov	r24, r9
    7d9a:	90 e0       	ldi	r25, 0x00	; 0
    7d9c:	aa 24       	eor	r10, r10
    7d9e:	bb 24       	eor	r11, r11
    7da0:	a8 1a       	sub	r10, r24
    7da2:	b9 0a       	sbc	r11, r25
    7da4:	5f ef       	ldi	r21, 0xFF	; 255
    7da6:	0f 3f       	cpi	r16, 0xFF	; 255
    7da8:	15 07       	cpc	r17, r21
    7daa:	29 f4       	brne	.+10     	; 0x7db6 <vfprintf+0x38e>
    7dac:	8e e2       	ldi	r24, 0x2E	; 46
    7dae:	90 e0       	ldi	r25, 0x00	; 0
    7db0:	b3 01       	movw	r22, r6
    7db2:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7db6:	c0 16       	cp	r12, r16
    7db8:	d1 06       	cpc	r13, r17
    7dba:	34 f0       	brlt	.+12     	; 0x7dc8 <vfprintf+0x3a0>
    7dbc:	40 16       	cp	r4, r16
    7dbe:	51 06       	cpc	r5, r17
    7dc0:	1c f4       	brge	.+6      	; 0x7dc8 <vfprintf+0x3a0>
    7dc2:	f7 01       	movw	r30, r14
    7dc4:	80 81       	ld	r24, Z
    7dc6:	01 c0       	rjmp	.+2      	; 0x7dca <vfprintf+0x3a2>
    7dc8:	80 e3       	ldi	r24, 0x30	; 48
    7dca:	01 50       	subi	r16, 0x01	; 1
    7dcc:	10 40       	sbci	r17, 0x00	; 0
    7dce:	08 94       	sec
    7dd0:	e1 1c       	adc	r14, r1
    7dd2:	f1 1c       	adc	r15, r1
    7dd4:	0a 15       	cp	r16, r10
    7dd6:	1b 05       	cpc	r17, r11
    7dd8:	2c f0       	brlt	.+10     	; 0x7de4 <vfprintf+0x3bc>
    7dda:	90 e0       	ldi	r25, 0x00	; 0
    7ddc:	b3 01       	movw	r22, r6
    7dde:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7de2:	e0 cf       	rjmp	.-64     	; 0x7da4 <vfprintf+0x37c>
    7de4:	0c 15       	cp	r16, r12
    7de6:	1d 05       	cpc	r17, r13
    7de8:	39 f4       	brne	.+14     	; 0x7df8 <vfprintf+0x3d0>
    7dea:	9a 81       	ldd	r25, Y+2	; 0x02
    7dec:	96 33       	cpi	r25, 0x36	; 54
    7dee:	18 f4       	brcc	.+6      	; 0x7df6 <vfprintf+0x3ce>
    7df0:	95 33       	cpi	r25, 0x35	; 53
    7df2:	11 f4       	brne	.+4      	; 0x7df8 <vfprintf+0x3d0>
    7df4:	24 fe       	sbrs	r2, 4
    7df6:	81 e3       	ldi	r24, 0x31	; 49
    7df8:	90 e0       	ldi	r25, 0x00	; 0
    7dfa:	4b c0       	rjmp	.+150    	; 0x7e92 <vfprintf+0x46a>
    7dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    7dfe:	81 33       	cpi	r24, 0x31	; 49
    7e00:	09 f0       	breq	.+2      	; 0x7e04 <vfprintf+0x3dc>
    7e02:	0f 7e       	andi	r16, 0xEF	; 239
    7e04:	90 e0       	ldi	r25, 0x00	; 0
    7e06:	b3 01       	movw	r22, r6
    7e08:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7e0c:	99 20       	and	r9, r9
    7e0e:	a1 f0       	breq	.+40     	; 0x7e38 <vfprintf+0x410>
    7e10:	8e e2       	ldi	r24, 0x2E	; 46
    7e12:	90 e0       	ldi	r25, 0x00	; 0
    7e14:	b3 01       	movw	r22, r6
    7e16:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7e1a:	12 e0       	ldi	r17, 0x02	; 2
    7e1c:	e1 e0       	ldi	r30, 0x01	; 1
    7e1e:	f0 e0       	ldi	r31, 0x00	; 0
    7e20:	ec 0f       	add	r30, r28
    7e22:	fd 1f       	adc	r31, r29
    7e24:	e1 0f       	add	r30, r17
    7e26:	f1 1d       	adc	r31, r1
    7e28:	1f 5f       	subi	r17, 0xFF	; 255
    7e2a:	80 81       	ld	r24, Z
    7e2c:	90 e0       	ldi	r25, 0x00	; 0
    7e2e:	b3 01       	movw	r22, r6
    7e30:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7e34:	9a 94       	dec	r9
    7e36:	91 f7       	brne	.-28     	; 0x7e1c <vfprintf+0x3f4>
    7e38:	44 fc       	sbrc	r4, 4
    7e3a:	03 c0       	rjmp	.+6      	; 0x7e42 <vfprintf+0x41a>
    7e3c:	85 e6       	ldi	r24, 0x65	; 101
    7e3e:	90 e0       	ldi	r25, 0x00	; 0
    7e40:	02 c0       	rjmp	.+4      	; 0x7e46 <vfprintf+0x41e>
    7e42:	85 e4       	ldi	r24, 0x45	; 69
    7e44:	90 e0       	ldi	r25, 0x00	; 0
    7e46:	b3 01       	movw	r22, r6
    7e48:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7e4c:	d7 fc       	sbrc	r13, 7
    7e4e:	05 c0       	rjmp	.+10     	; 0x7e5a <vfprintf+0x432>
    7e50:	c1 14       	cp	r12, r1
    7e52:	d1 04       	cpc	r13, r1
    7e54:	41 f4       	brne	.+16     	; 0x7e66 <vfprintf+0x43e>
    7e56:	04 ff       	sbrs	r16, 4
    7e58:	06 c0       	rjmp	.+12     	; 0x7e66 <vfprintf+0x43e>
    7e5a:	d0 94       	com	r13
    7e5c:	c1 94       	neg	r12
    7e5e:	d1 08       	sbc	r13, r1
    7e60:	d3 94       	inc	r13
    7e62:	8d e2       	ldi	r24, 0x2D	; 45
    7e64:	01 c0       	rjmp	.+2      	; 0x7e68 <vfprintf+0x440>
    7e66:	8b e2       	ldi	r24, 0x2B	; 43
    7e68:	90 e0       	ldi	r25, 0x00	; 0
    7e6a:	b3 01       	movw	r22, r6
    7e6c:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7e70:	80 e3       	ldi	r24, 0x30	; 48
    7e72:	05 c0       	rjmp	.+10     	; 0x7e7e <vfprintf+0x456>
    7e74:	8f 5f       	subi	r24, 0xFF	; 255
    7e76:	26 ef       	ldi	r18, 0xF6	; 246
    7e78:	3f ef       	ldi	r19, 0xFF	; 255
    7e7a:	c2 0e       	add	r12, r18
    7e7c:	d3 1e       	adc	r13, r19
    7e7e:	3a e0       	ldi	r19, 0x0A	; 10
    7e80:	c3 16       	cp	r12, r19
    7e82:	d1 04       	cpc	r13, r1
    7e84:	bc f7       	brge	.-18     	; 0x7e74 <vfprintf+0x44c>
    7e86:	90 e0       	ldi	r25, 0x00	; 0
    7e88:	b3 01       	movw	r22, r6
    7e8a:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7e8e:	c6 01       	movw	r24, r12
    7e90:	c0 96       	adiw	r24, 0x30	; 48
    7e92:	b3 01       	movw	r22, r6
    7e94:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7e98:	cc 84       	ldd	r12, Y+12	; 0x0c
    7e9a:	dd 84       	ldd	r13, Y+13	; 0x0d
    7e9c:	52 c1       	rjmp	.+676    	; 0x8142 <vfprintf+0x71a>
    7e9e:	93 36       	cpi	r25, 0x63	; 99
    7ea0:	31 f0       	breq	.+12     	; 0x7eae <vfprintf+0x486>
    7ea2:	93 37       	cpi	r25, 0x73	; 115
    7ea4:	99 f0       	breq	.+38     	; 0x7ecc <vfprintf+0x4a4>
    7ea6:	93 35       	cpi	r25, 0x53	; 83
    7ea8:	09 f0       	breq	.+2      	; 0x7eac <vfprintf+0x484>
    7eaa:	59 c0       	rjmp	.+178    	; 0x7f5e <vfprintf+0x536>
    7eac:	23 c0       	rjmp	.+70     	; 0x7ef4 <vfprintf+0x4cc>
    7eae:	f6 01       	movw	r30, r12
    7eb0:	80 81       	ld	r24, Z
    7eb2:	89 83       	std	Y+1, r24	; 0x01
    7eb4:	5e 01       	movw	r10, r28
    7eb6:	08 94       	sec
    7eb8:	a1 1c       	adc	r10, r1
    7eba:	b1 1c       	adc	r11, r1
    7ebc:	22 e0       	ldi	r18, 0x02	; 2
    7ebe:	30 e0       	ldi	r19, 0x00	; 0
    7ec0:	c2 0e       	add	r12, r18
    7ec2:	d3 1e       	adc	r13, r19
    7ec4:	21 e0       	ldi	r18, 0x01	; 1
    7ec6:	e2 2e       	mov	r14, r18
    7ec8:	f1 2c       	mov	r15, r1
    7eca:	12 c0       	rjmp	.+36     	; 0x7ef0 <vfprintf+0x4c8>
    7ecc:	f6 01       	movw	r30, r12
    7ece:	a0 80       	ld	r10, Z
    7ed0:	b1 80       	ldd	r11, Z+1	; 0x01
    7ed2:	16 fd       	sbrc	r17, 6
    7ed4:	03 c0       	rjmp	.+6      	; 0x7edc <vfprintf+0x4b4>
    7ed6:	6f ef       	ldi	r22, 0xFF	; 255
    7ed8:	7f ef       	ldi	r23, 0xFF	; 255
    7eda:	02 c0       	rjmp	.+4      	; 0x7ee0 <vfprintf+0x4b8>
    7edc:	69 2d       	mov	r22, r9
    7ede:	70 e0       	ldi	r23, 0x00	; 0
    7ee0:	22 e0       	ldi	r18, 0x02	; 2
    7ee2:	30 e0       	ldi	r19, 0x00	; 0
    7ee4:	c2 0e       	add	r12, r18
    7ee6:	d3 1e       	adc	r13, r19
    7ee8:	c5 01       	movw	r24, r10
    7eea:	0e 94 00 48 	call	0x9000	; 0x9000 <strnlen>
    7eee:	7c 01       	movw	r14, r24
    7ef0:	1f 77       	andi	r17, 0x7F	; 127
    7ef2:	13 c0       	rjmp	.+38     	; 0x7f1a <vfprintf+0x4f2>
    7ef4:	f6 01       	movw	r30, r12
    7ef6:	a0 80       	ld	r10, Z
    7ef8:	b1 80       	ldd	r11, Z+1	; 0x01
    7efa:	16 fd       	sbrc	r17, 6
    7efc:	03 c0       	rjmp	.+6      	; 0x7f04 <vfprintf+0x4dc>
    7efe:	6f ef       	ldi	r22, 0xFF	; 255
    7f00:	7f ef       	ldi	r23, 0xFF	; 255
    7f02:	02 c0       	rjmp	.+4      	; 0x7f08 <vfprintf+0x4e0>
    7f04:	69 2d       	mov	r22, r9
    7f06:	70 e0       	ldi	r23, 0x00	; 0
    7f08:	22 e0       	ldi	r18, 0x02	; 2
    7f0a:	30 e0       	ldi	r19, 0x00	; 0
    7f0c:	c2 0e       	add	r12, r18
    7f0e:	d3 1e       	adc	r13, r19
    7f10:	c5 01       	movw	r24, r10
    7f12:	0e 94 f5 47 	call	0x8fea	; 0x8fea <strnlen_P>
    7f16:	7c 01       	movw	r14, r24
    7f18:	10 68       	ori	r17, 0x80	; 128
    7f1a:	13 ff       	sbrs	r17, 3
    7f1c:	07 c0       	rjmp	.+14     	; 0x7f2c <vfprintf+0x504>
    7f1e:	1b c0       	rjmp	.+54     	; 0x7f56 <vfprintf+0x52e>
    7f20:	80 e2       	ldi	r24, 0x20	; 32
    7f22:	90 e0       	ldi	r25, 0x00	; 0
    7f24:	b3 01       	movw	r22, r6
    7f26:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7f2a:	8a 94       	dec	r8
    7f2c:	88 2d       	mov	r24, r8
    7f2e:	90 e0       	ldi	r25, 0x00	; 0
    7f30:	e8 16       	cp	r14, r24
    7f32:	f9 06       	cpc	r15, r25
    7f34:	a8 f3       	brcs	.-22     	; 0x7f20 <vfprintf+0x4f8>
    7f36:	0f c0       	rjmp	.+30     	; 0x7f56 <vfprintf+0x52e>
    7f38:	f5 01       	movw	r30, r10
    7f3a:	17 fd       	sbrc	r17, 7
    7f3c:	85 91       	lpm	r24, Z+
    7f3e:	17 ff       	sbrs	r17, 7
    7f40:	81 91       	ld	r24, Z+
    7f42:	5f 01       	movw	r10, r30
    7f44:	90 e0       	ldi	r25, 0x00	; 0
    7f46:	b3 01       	movw	r22, r6
    7f48:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    7f4c:	81 10       	cpse	r8, r1
    7f4e:	8a 94       	dec	r8
    7f50:	08 94       	sec
    7f52:	e1 08       	sbc	r14, r1
    7f54:	f1 08       	sbc	r15, r1
    7f56:	e1 14       	cp	r14, r1
    7f58:	f1 04       	cpc	r15, r1
    7f5a:	71 f7       	brne	.-36     	; 0x7f38 <vfprintf+0x510>
    7f5c:	f2 c0       	rjmp	.+484    	; 0x8142 <vfprintf+0x71a>
    7f5e:	94 36       	cpi	r25, 0x64	; 100
    7f60:	11 f0       	breq	.+4      	; 0x7f66 <vfprintf+0x53e>
    7f62:	99 36       	cpi	r25, 0x69	; 105
    7f64:	89 f5       	brne	.+98     	; 0x7fc8 <vfprintf+0x5a0>
    7f66:	17 ff       	sbrs	r17, 7
    7f68:	08 c0       	rjmp	.+16     	; 0x7f7a <vfprintf+0x552>
    7f6a:	f6 01       	movw	r30, r12
    7f6c:	20 81       	ld	r18, Z
    7f6e:	31 81       	ldd	r19, Z+1	; 0x01
    7f70:	42 81       	ldd	r20, Z+2	; 0x02
    7f72:	53 81       	ldd	r21, Z+3	; 0x03
    7f74:	84 e0       	ldi	r24, 0x04	; 4
    7f76:	90 e0       	ldi	r25, 0x00	; 0
    7f78:	0a c0       	rjmp	.+20     	; 0x7f8e <vfprintf+0x566>
    7f7a:	f6 01       	movw	r30, r12
    7f7c:	80 81       	ld	r24, Z
    7f7e:	91 81       	ldd	r25, Z+1	; 0x01
    7f80:	9c 01       	movw	r18, r24
    7f82:	44 27       	eor	r20, r20
    7f84:	37 fd       	sbrc	r19, 7
    7f86:	40 95       	com	r20
    7f88:	54 2f       	mov	r21, r20
    7f8a:	82 e0       	ldi	r24, 0x02	; 2
    7f8c:	90 e0       	ldi	r25, 0x00	; 0
    7f8e:	c8 0e       	add	r12, r24
    7f90:	d9 1e       	adc	r13, r25
    7f92:	9f e6       	ldi	r25, 0x6F	; 111
    7f94:	f9 2e       	mov	r15, r25
    7f96:	f1 22       	and	r15, r17
    7f98:	57 ff       	sbrs	r21, 7
    7f9a:	09 c0       	rjmp	.+18     	; 0x7fae <vfprintf+0x586>
    7f9c:	50 95       	com	r21
    7f9e:	40 95       	com	r20
    7fa0:	30 95       	com	r19
    7fa2:	21 95       	neg	r18
    7fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    7fa6:	4f 4f       	sbci	r20, 0xFF	; 255
    7fa8:	5f 4f       	sbci	r21, 0xFF	; 255
    7faa:	90 e8       	ldi	r25, 0x80	; 128
    7fac:	f9 2a       	or	r15, r25
    7fae:	ca 01       	movw	r24, r20
    7fb0:	b9 01       	movw	r22, r18
    7fb2:	ae 01       	movw	r20, r28
    7fb4:	4f 5f       	subi	r20, 0xFF	; 255
    7fb6:	5f 4f       	sbci	r21, 0xFF	; 255
    7fb8:	2a e0       	ldi	r18, 0x0A	; 10
    7fba:	30 e0       	ldi	r19, 0x00	; 0
    7fbc:	0e 94 9a 48 	call	0x9134	; 0x9134 <__ultoa_invert>
    7fc0:	e8 2e       	mov	r14, r24
    7fc2:	e8 89       	ldd	r30, Y+16	; 0x10
    7fc4:	ee 1a       	sub	r14, r30
    7fc6:	41 c0       	rjmp	.+130    	; 0x804a <vfprintf+0x622>
    7fc8:	95 37       	cpi	r25, 0x75	; 117
    7fca:	21 f4       	brne	.+8      	; 0x7fd4 <vfprintf+0x5ac>
    7fcc:	1f 7e       	andi	r17, 0xEF	; 239
    7fce:	2a e0       	ldi	r18, 0x0A	; 10
    7fd0:	30 e0       	ldi	r19, 0x00	; 0
    7fd2:	1c c0       	rjmp	.+56     	; 0x800c <vfprintf+0x5e4>
    7fd4:	19 7f       	andi	r17, 0xF9	; 249
    7fd6:	9f 36       	cpi	r25, 0x6F	; 111
    7fd8:	61 f0       	breq	.+24     	; 0x7ff2 <vfprintf+0x5ca>
    7fda:	90 37       	cpi	r25, 0x70	; 112
    7fdc:	20 f4       	brcc	.+8      	; 0x7fe6 <vfprintf+0x5be>
    7fde:	98 35       	cpi	r25, 0x58	; 88
    7fe0:	09 f0       	breq	.+2      	; 0x7fe4 <vfprintf+0x5bc>
    7fe2:	b2 c0       	rjmp	.+356    	; 0x8148 <vfprintf+0x720>
    7fe4:	0f c0       	rjmp	.+30     	; 0x8004 <vfprintf+0x5dc>
    7fe6:	90 37       	cpi	r25, 0x70	; 112
    7fe8:	39 f0       	breq	.+14     	; 0x7ff8 <vfprintf+0x5d0>
    7fea:	98 37       	cpi	r25, 0x78	; 120
    7fec:	09 f0       	breq	.+2      	; 0x7ff0 <vfprintf+0x5c8>
    7fee:	ac c0       	rjmp	.+344    	; 0x8148 <vfprintf+0x720>
    7ff0:	04 c0       	rjmp	.+8      	; 0x7ffa <vfprintf+0x5d2>
    7ff2:	28 e0       	ldi	r18, 0x08	; 8
    7ff4:	30 e0       	ldi	r19, 0x00	; 0
    7ff6:	0a c0       	rjmp	.+20     	; 0x800c <vfprintf+0x5e4>
    7ff8:	10 61       	ori	r17, 0x10	; 16
    7ffa:	14 fd       	sbrc	r17, 4
    7ffc:	14 60       	ori	r17, 0x04	; 4
    7ffe:	20 e1       	ldi	r18, 0x10	; 16
    8000:	30 e0       	ldi	r19, 0x00	; 0
    8002:	04 c0       	rjmp	.+8      	; 0x800c <vfprintf+0x5e4>
    8004:	14 fd       	sbrc	r17, 4
    8006:	16 60       	ori	r17, 0x06	; 6
    8008:	20 e1       	ldi	r18, 0x10	; 16
    800a:	32 e0       	ldi	r19, 0x02	; 2
    800c:	17 ff       	sbrs	r17, 7
    800e:	08 c0       	rjmp	.+16     	; 0x8020 <vfprintf+0x5f8>
    8010:	f6 01       	movw	r30, r12
    8012:	60 81       	ld	r22, Z
    8014:	71 81       	ldd	r23, Z+1	; 0x01
    8016:	82 81       	ldd	r24, Z+2	; 0x02
    8018:	93 81       	ldd	r25, Z+3	; 0x03
    801a:	44 e0       	ldi	r20, 0x04	; 4
    801c:	50 e0       	ldi	r21, 0x00	; 0
    801e:	08 c0       	rjmp	.+16     	; 0x8030 <vfprintf+0x608>
    8020:	f6 01       	movw	r30, r12
    8022:	80 81       	ld	r24, Z
    8024:	91 81       	ldd	r25, Z+1	; 0x01
    8026:	bc 01       	movw	r22, r24
    8028:	80 e0       	ldi	r24, 0x00	; 0
    802a:	90 e0       	ldi	r25, 0x00	; 0
    802c:	42 e0       	ldi	r20, 0x02	; 2
    802e:	50 e0       	ldi	r21, 0x00	; 0
    8030:	c4 0e       	add	r12, r20
    8032:	d5 1e       	adc	r13, r21
    8034:	ae 01       	movw	r20, r28
    8036:	4f 5f       	subi	r20, 0xFF	; 255
    8038:	5f 4f       	sbci	r21, 0xFF	; 255
    803a:	0e 94 9a 48 	call	0x9134	; 0x9134 <__ultoa_invert>
    803e:	e8 2e       	mov	r14, r24
    8040:	58 89       	ldd	r21, Y+16	; 0x10
    8042:	e5 1a       	sub	r14, r21
    8044:	8f e7       	ldi	r24, 0x7F	; 127
    8046:	f8 2e       	mov	r15, r24
    8048:	f1 22       	and	r15, r17
    804a:	f6 fe       	sbrs	r15, 6
    804c:	0b c0       	rjmp	.+22     	; 0x8064 <vfprintf+0x63c>
    804e:	8e ef       	ldi	r24, 0xFE	; 254
    8050:	f8 22       	and	r15, r24
    8052:	e9 14       	cp	r14, r9
    8054:	38 f4       	brcc	.+14     	; 0x8064 <vfprintf+0x63c>
    8056:	f4 fe       	sbrs	r15, 4
    8058:	07 c0       	rjmp	.+14     	; 0x8068 <vfprintf+0x640>
    805a:	f2 fc       	sbrc	r15, 2
    805c:	05 c0       	rjmp	.+10     	; 0x8068 <vfprintf+0x640>
    805e:	9f ee       	ldi	r25, 0xEF	; 239
    8060:	f9 22       	and	r15, r25
    8062:	02 c0       	rjmp	.+4      	; 0x8068 <vfprintf+0x640>
    8064:	1e 2d       	mov	r17, r14
    8066:	01 c0       	rjmp	.+2      	; 0x806a <vfprintf+0x642>
    8068:	19 2d       	mov	r17, r9
    806a:	f4 fe       	sbrs	r15, 4
    806c:	0d c0       	rjmp	.+26     	; 0x8088 <vfprintf+0x660>
    806e:	fe 01       	movw	r30, r28
    8070:	ee 0d       	add	r30, r14
    8072:	f1 1d       	adc	r31, r1
    8074:	80 81       	ld	r24, Z
    8076:	80 33       	cpi	r24, 0x30	; 48
    8078:	19 f4       	brne	.+6      	; 0x8080 <vfprintf+0x658>
    807a:	e9 ee       	ldi	r30, 0xE9	; 233
    807c:	fe 22       	and	r15, r30
    807e:	08 c0       	rjmp	.+16     	; 0x8090 <vfprintf+0x668>
    8080:	1f 5f       	subi	r17, 0xFF	; 255
    8082:	f2 fe       	sbrs	r15, 2
    8084:	05 c0       	rjmp	.+10     	; 0x8090 <vfprintf+0x668>
    8086:	03 c0       	rjmp	.+6      	; 0x808e <vfprintf+0x666>
    8088:	8f 2d       	mov	r24, r15
    808a:	86 78       	andi	r24, 0x86	; 134
    808c:	09 f0       	breq	.+2      	; 0x8090 <vfprintf+0x668>
    808e:	1f 5f       	subi	r17, 0xFF	; 255
    8090:	0f 2d       	mov	r16, r15
    8092:	f3 fc       	sbrc	r15, 3
    8094:	14 c0       	rjmp	.+40     	; 0x80be <vfprintf+0x696>
    8096:	f0 fe       	sbrs	r15, 0
    8098:	0f c0       	rjmp	.+30     	; 0x80b8 <vfprintf+0x690>
    809a:	18 15       	cp	r17, r8
    809c:	10 f0       	brcs	.+4      	; 0x80a2 <vfprintf+0x67a>
    809e:	9e 2c       	mov	r9, r14
    80a0:	0b c0       	rjmp	.+22     	; 0x80b8 <vfprintf+0x690>
    80a2:	9e 2c       	mov	r9, r14
    80a4:	98 0c       	add	r9, r8
    80a6:	91 1a       	sub	r9, r17
    80a8:	18 2d       	mov	r17, r8
    80aa:	06 c0       	rjmp	.+12     	; 0x80b8 <vfprintf+0x690>
    80ac:	80 e2       	ldi	r24, 0x20	; 32
    80ae:	90 e0       	ldi	r25, 0x00	; 0
    80b0:	b3 01       	movw	r22, r6
    80b2:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    80b6:	1f 5f       	subi	r17, 0xFF	; 255
    80b8:	18 15       	cp	r17, r8
    80ba:	c0 f3       	brcs	.-16     	; 0x80ac <vfprintf+0x684>
    80bc:	04 c0       	rjmp	.+8      	; 0x80c6 <vfprintf+0x69e>
    80be:	18 15       	cp	r17, r8
    80c0:	10 f4       	brcc	.+4      	; 0x80c6 <vfprintf+0x69e>
    80c2:	81 1a       	sub	r8, r17
    80c4:	01 c0       	rjmp	.+2      	; 0x80c8 <vfprintf+0x6a0>
    80c6:	88 24       	eor	r8, r8
    80c8:	04 ff       	sbrs	r16, 4
    80ca:	0f c0       	rjmp	.+30     	; 0x80ea <vfprintf+0x6c2>
    80cc:	80 e3       	ldi	r24, 0x30	; 48
    80ce:	90 e0       	ldi	r25, 0x00	; 0
    80d0:	b3 01       	movw	r22, r6
    80d2:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    80d6:	02 ff       	sbrs	r16, 2
    80d8:	1d c0       	rjmp	.+58     	; 0x8114 <vfprintf+0x6ec>
    80da:	01 fd       	sbrc	r16, 1
    80dc:	03 c0       	rjmp	.+6      	; 0x80e4 <vfprintf+0x6bc>
    80de:	88 e7       	ldi	r24, 0x78	; 120
    80e0:	90 e0       	ldi	r25, 0x00	; 0
    80e2:	0e c0       	rjmp	.+28     	; 0x8100 <vfprintf+0x6d8>
    80e4:	88 e5       	ldi	r24, 0x58	; 88
    80e6:	90 e0       	ldi	r25, 0x00	; 0
    80e8:	0b c0       	rjmp	.+22     	; 0x8100 <vfprintf+0x6d8>
    80ea:	80 2f       	mov	r24, r16
    80ec:	86 78       	andi	r24, 0x86	; 134
    80ee:	91 f0       	breq	.+36     	; 0x8114 <vfprintf+0x6ec>
    80f0:	01 ff       	sbrs	r16, 1
    80f2:	02 c0       	rjmp	.+4      	; 0x80f8 <vfprintf+0x6d0>
    80f4:	8b e2       	ldi	r24, 0x2B	; 43
    80f6:	01 c0       	rjmp	.+2      	; 0x80fa <vfprintf+0x6d2>
    80f8:	80 e2       	ldi	r24, 0x20	; 32
    80fa:	f7 fc       	sbrc	r15, 7
    80fc:	8d e2       	ldi	r24, 0x2D	; 45
    80fe:	90 e0       	ldi	r25, 0x00	; 0
    8100:	b3 01       	movw	r22, r6
    8102:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    8106:	06 c0       	rjmp	.+12     	; 0x8114 <vfprintf+0x6ec>
    8108:	80 e3       	ldi	r24, 0x30	; 48
    810a:	90 e0       	ldi	r25, 0x00	; 0
    810c:	b3 01       	movw	r22, r6
    810e:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    8112:	9a 94       	dec	r9
    8114:	e9 14       	cp	r14, r9
    8116:	c0 f3       	brcs	.-16     	; 0x8108 <vfprintf+0x6e0>
    8118:	ea 94       	dec	r14
    811a:	e1 e0       	ldi	r30, 0x01	; 1
    811c:	f0 e0       	ldi	r31, 0x00	; 0
    811e:	ec 0f       	add	r30, r28
    8120:	fd 1f       	adc	r31, r29
    8122:	ee 0d       	add	r30, r14
    8124:	f1 1d       	adc	r31, r1
    8126:	80 81       	ld	r24, Z
    8128:	90 e0       	ldi	r25, 0x00	; 0
    812a:	b3 01       	movw	r22, r6
    812c:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    8130:	ee 20       	and	r14, r14
    8132:	91 f7       	brne	.-28     	; 0x8118 <vfprintf+0x6f0>
    8134:	06 c0       	rjmp	.+12     	; 0x8142 <vfprintf+0x71a>
    8136:	80 e2       	ldi	r24, 0x20	; 32
    8138:	90 e0       	ldi	r25, 0x00	; 0
    813a:	b3 01       	movw	r22, r6
    813c:	0e 94 4b 48 	call	0x9096	; 0x9096 <fputc>
    8140:	8a 94       	dec	r8
    8142:	88 20       	and	r8, r8
    8144:	c1 f7       	brne	.-16     	; 0x8136 <vfprintf+0x70e>
    8146:	99 cc       	rjmp	.-1742   	; 0x7a7a <vfprintf+0x52>
    8148:	f3 01       	movw	r30, r6
    814a:	66 81       	ldd	r22, Z+6	; 0x06
    814c:	77 81       	ldd	r23, Z+7	; 0x07
    814e:	cb 01       	movw	r24, r22
    8150:	61 96       	adiw	r28, 0x11	; 17
    8152:	cd bf       	out	0x3d, r28	; 61
    8154:	de bf       	out	0x3e, r29	; 62
    8156:	cf 91       	pop	r28
    8158:	df 91       	pop	r29
    815a:	1f 91       	pop	r17
    815c:	0f 91       	pop	r16
    815e:	ff 90       	pop	r15
    8160:	ef 90       	pop	r14
    8162:	df 90       	pop	r13
    8164:	cf 90       	pop	r12
    8166:	bf 90       	pop	r11
    8168:	af 90       	pop	r10
    816a:	9f 90       	pop	r9
    816c:	8f 90       	pop	r8
    816e:	7f 90       	pop	r7
    8170:	6f 90       	pop	r6
    8172:	5f 90       	pop	r5
    8174:	4f 90       	pop	r4
    8176:	3f 90       	pop	r3
    8178:	2f 90       	pop	r2
    817a:	08 95       	ret

0000817c <__subsf3>:
    817c:	50 58       	subi	r21, 0x80	; 128

0000817e <__addsf3>:
    817e:	bb 27       	eor	r27, r27
    8180:	aa 27       	eor	r26, r26
    8182:	0e d0       	rcall	.+28     	; 0x81a0 <__addsf3x>
    8184:	29 c2       	rjmp	.+1106   	; 0x85d8 <__fp_round>
    8186:	f2 d1       	rcall	.+996    	; 0x856c <__fp_pscA>
    8188:	30 f0       	brcs	.+12     	; 0x8196 <__addsf3+0x18>
    818a:	f7 d1       	rcall	.+1006   	; 0x857a <__fp_pscB>
    818c:	20 f0       	brcs	.+8      	; 0x8196 <__addsf3+0x18>
    818e:	31 f4       	brne	.+12     	; 0x819c <__addsf3+0x1e>
    8190:	9f 3f       	cpi	r25, 0xFF	; 255
    8192:	11 f4       	brne	.+4      	; 0x8198 <__addsf3+0x1a>
    8194:	1e f4       	brtc	.+6      	; 0x819c <__addsf3+0x1e>
    8196:	c2 c1       	rjmp	.+900    	; 0x851c <__fp_nan>
    8198:	0e f4       	brtc	.+2      	; 0x819c <__addsf3+0x1e>
    819a:	e0 95       	com	r30
    819c:	e7 fb       	bst	r30, 7
    819e:	8f c1       	rjmp	.+798    	; 0x84be <__fp_inf>

000081a0 <__addsf3x>:
    81a0:	e9 2f       	mov	r30, r25
    81a2:	3c d2       	rcall	.+1144   	; 0x861c <__fp_split3>
    81a4:	80 f3       	brcs	.-32     	; 0x8186 <__addsf3+0x8>
    81a6:	ba 17       	cp	r27, r26
    81a8:	62 07       	cpc	r22, r18
    81aa:	73 07       	cpc	r23, r19
    81ac:	84 07       	cpc	r24, r20
    81ae:	95 07       	cpc	r25, r21
    81b0:	18 f0       	brcs	.+6      	; 0x81b8 <__addsf3x+0x18>
    81b2:	71 f4       	brne	.+28     	; 0x81d0 <__addsf3x+0x30>
    81b4:	9e f5       	brtc	.+102    	; 0x821c <__addsf3x+0x7c>
    81b6:	6b c2       	rjmp	.+1238   	; 0x868e <__fp_zero>
    81b8:	0e f4       	brtc	.+2      	; 0x81bc <__addsf3x+0x1c>
    81ba:	e0 95       	com	r30
    81bc:	0b 2e       	mov	r0, r27
    81be:	ba 2f       	mov	r27, r26
    81c0:	a0 2d       	mov	r26, r0
    81c2:	0b 01       	movw	r0, r22
    81c4:	b9 01       	movw	r22, r18
    81c6:	90 01       	movw	r18, r0
    81c8:	0c 01       	movw	r0, r24
    81ca:	ca 01       	movw	r24, r20
    81cc:	a0 01       	movw	r20, r0
    81ce:	11 24       	eor	r1, r1
    81d0:	ff 27       	eor	r31, r31
    81d2:	59 1b       	sub	r21, r25
    81d4:	99 f0       	breq	.+38     	; 0x81fc <__addsf3x+0x5c>
    81d6:	59 3f       	cpi	r21, 0xF9	; 249
    81d8:	50 f4       	brcc	.+20     	; 0x81ee <__addsf3x+0x4e>
    81da:	50 3e       	cpi	r21, 0xE0	; 224
    81dc:	68 f1       	brcs	.+90     	; 0x8238 <__addsf3x+0x98>
    81de:	1a 16       	cp	r1, r26
    81e0:	f0 40       	sbci	r31, 0x00	; 0
    81e2:	a2 2f       	mov	r26, r18
    81e4:	23 2f       	mov	r18, r19
    81e6:	34 2f       	mov	r19, r20
    81e8:	44 27       	eor	r20, r20
    81ea:	58 5f       	subi	r21, 0xF8	; 248
    81ec:	f3 cf       	rjmp	.-26     	; 0x81d4 <__addsf3x+0x34>
    81ee:	46 95       	lsr	r20
    81f0:	37 95       	ror	r19
    81f2:	27 95       	ror	r18
    81f4:	a7 95       	ror	r26
    81f6:	f0 40       	sbci	r31, 0x00	; 0
    81f8:	53 95       	inc	r21
    81fa:	c9 f7       	brne	.-14     	; 0x81ee <__addsf3x+0x4e>
    81fc:	7e f4       	brtc	.+30     	; 0x821c <__addsf3x+0x7c>
    81fe:	1f 16       	cp	r1, r31
    8200:	ba 0b       	sbc	r27, r26
    8202:	62 0b       	sbc	r22, r18
    8204:	73 0b       	sbc	r23, r19
    8206:	84 0b       	sbc	r24, r20
    8208:	ba f0       	brmi	.+46     	; 0x8238 <__addsf3x+0x98>
    820a:	91 50       	subi	r25, 0x01	; 1
    820c:	a1 f0       	breq	.+40     	; 0x8236 <__addsf3x+0x96>
    820e:	ff 0f       	add	r31, r31
    8210:	bb 1f       	adc	r27, r27
    8212:	66 1f       	adc	r22, r22
    8214:	77 1f       	adc	r23, r23
    8216:	88 1f       	adc	r24, r24
    8218:	c2 f7       	brpl	.-16     	; 0x820a <__addsf3x+0x6a>
    821a:	0e c0       	rjmp	.+28     	; 0x8238 <__addsf3x+0x98>
    821c:	ba 0f       	add	r27, r26
    821e:	62 1f       	adc	r22, r18
    8220:	73 1f       	adc	r23, r19
    8222:	84 1f       	adc	r24, r20
    8224:	48 f4       	brcc	.+18     	; 0x8238 <__addsf3x+0x98>
    8226:	87 95       	ror	r24
    8228:	77 95       	ror	r23
    822a:	67 95       	ror	r22
    822c:	b7 95       	ror	r27
    822e:	f7 95       	ror	r31
    8230:	9e 3f       	cpi	r25, 0xFE	; 254
    8232:	08 f0       	brcs	.+2      	; 0x8236 <__addsf3x+0x96>
    8234:	b3 cf       	rjmp	.-154    	; 0x819c <__addsf3+0x1e>
    8236:	93 95       	inc	r25
    8238:	88 0f       	add	r24, r24
    823a:	08 f0       	brcs	.+2      	; 0x823e <__addsf3x+0x9e>
    823c:	99 27       	eor	r25, r25
    823e:	ee 0f       	add	r30, r30
    8240:	97 95       	ror	r25
    8242:	87 95       	ror	r24
    8244:	08 95       	ret

00008246 <atan>:
    8246:	df 93       	push	r29
    8248:	dd 27       	eor	r29, r29
    824a:	b9 2f       	mov	r27, r25
    824c:	bf 77       	andi	r27, 0x7F	; 127
    824e:	40 e8       	ldi	r20, 0x80	; 128
    8250:	5f e3       	ldi	r21, 0x3F	; 63
    8252:	16 16       	cp	r1, r22
    8254:	17 06       	cpc	r1, r23
    8256:	48 07       	cpc	r20, r24
    8258:	5b 07       	cpc	r21, r27
    825a:	10 f4       	brcc	.+4      	; 0x8260 <atan+0x1a>
    825c:	d9 2f       	mov	r29, r25
    825e:	83 d2       	rcall	.+1286   	; 0x8766 <inverse>
    8260:	9f 93       	push	r25
    8262:	8f 93       	push	r24
    8264:	7f 93       	push	r23
    8266:	6f 93       	push	r22
    8268:	96 d3       	rcall	.+1836   	; 0x8996 <square>
    826a:	e8 ee       	ldi	r30, 0xE8	; 232
    826c:	f1 e0       	ldi	r31, 0x01	; 1
    826e:	59 d1       	rcall	.+690    	; 0x8522 <__fp_powser>
    8270:	b3 d1       	rcall	.+870    	; 0x85d8 <__fp_round>
    8272:	2f 91       	pop	r18
    8274:	3f 91       	pop	r19
    8276:	4f 91       	pop	r20
    8278:	5f 91       	pop	r21
    827a:	ee d2       	rcall	.+1500   	; 0x8858 <__mulsf3x>
    827c:	dd 23       	and	r29, r29
    827e:	49 f0       	breq	.+18     	; 0x8292 <atan+0x4c>
    8280:	90 58       	subi	r25, 0x80	; 128
    8282:	a2 ea       	ldi	r26, 0xA2	; 162
    8284:	2a ed       	ldi	r18, 0xDA	; 218
    8286:	3f e0       	ldi	r19, 0x0F	; 15
    8288:	49 ec       	ldi	r20, 0xC9	; 201
    828a:	5f e3       	ldi	r21, 0x3F	; 63
    828c:	d0 78       	andi	r29, 0x80	; 128
    828e:	5d 27       	eor	r21, r29
    8290:	87 df       	rcall	.-242    	; 0x81a0 <__addsf3x>
    8292:	df 91       	pop	r29
    8294:	a1 c1       	rjmp	.+834    	; 0x85d8 <__fp_round>

00008296 <ceil>:
    8296:	e4 d1       	rcall	.+968    	; 0x8660 <__fp_trunc>
    8298:	80 f0       	brcs	.+32     	; 0x82ba <ceil+0x24>
    829a:	9f 37       	cpi	r25, 0x7F	; 127
    829c:	40 f4       	brcc	.+16     	; 0x82ae <ceil+0x18>
    829e:	91 11       	cpse	r25, r1
    82a0:	0e f4       	brtc	.+2      	; 0x82a4 <ceil+0xe>
    82a2:	f6 c1       	rjmp	.+1004   	; 0x8690 <__fp_szero>
    82a4:	60 e0       	ldi	r22, 0x00	; 0
    82a6:	70 e0       	ldi	r23, 0x00	; 0
    82a8:	80 e8       	ldi	r24, 0x80	; 128
    82aa:	9f e3       	ldi	r25, 0x3F	; 63
    82ac:	08 95       	ret
    82ae:	26 f0       	brts	.+8      	; 0x82b8 <ceil+0x22>
    82b0:	1b 16       	cp	r1, r27
    82b2:	61 1d       	adc	r22, r1
    82b4:	71 1d       	adc	r23, r1
    82b6:	81 1d       	adc	r24, r1
    82b8:	08 c1       	rjmp	.+528    	; 0x84ca <__fp_mintl>
    82ba:	22 c1       	rjmp	.+580    	; 0x8500 <__fp_mpack>

000082bc <__cmpsf2>:
    82bc:	dc d0       	rcall	.+440    	; 0x8476 <__fp_cmp>
    82be:	08 f4       	brcc	.+2      	; 0x82c2 <__cmpsf2+0x6>
    82c0:	81 e0       	ldi	r24, 0x01	; 1
    82c2:	08 95       	ret

000082c4 <cos>:
    82c4:	62 d1       	rcall	.+708    	; 0x858a <__fp_rempio2>
    82c6:	e3 95       	inc	r30
    82c8:	98 c1       	rjmp	.+816    	; 0x85fa <__fp_sinus>

000082ca <__divsf3>:
    82ca:	0c d0       	rcall	.+24     	; 0x82e4 <__divsf3x>
    82cc:	85 c1       	rjmp	.+778    	; 0x85d8 <__fp_round>
    82ce:	55 d1       	rcall	.+682    	; 0x857a <__fp_pscB>
    82d0:	40 f0       	brcs	.+16     	; 0x82e2 <__divsf3+0x18>
    82d2:	4c d1       	rcall	.+664    	; 0x856c <__fp_pscA>
    82d4:	30 f0       	brcs	.+12     	; 0x82e2 <__divsf3+0x18>
    82d6:	21 f4       	brne	.+8      	; 0x82e0 <__divsf3+0x16>
    82d8:	5f 3f       	cpi	r21, 0xFF	; 255
    82da:	19 f0       	breq	.+6      	; 0x82e2 <__divsf3+0x18>
    82dc:	f0 c0       	rjmp	.+480    	; 0x84be <__fp_inf>
    82de:	51 11       	cpse	r21, r1
    82e0:	d7 c1       	rjmp	.+942    	; 0x8690 <__fp_szero>
    82e2:	1c c1       	rjmp	.+568    	; 0x851c <__fp_nan>

000082e4 <__divsf3x>:
    82e4:	9b d1       	rcall	.+822    	; 0x861c <__fp_split3>
    82e6:	98 f3       	brcs	.-26     	; 0x82ce <__divsf3+0x4>

000082e8 <__divsf3_pse>:
    82e8:	99 23       	and	r25, r25
    82ea:	c9 f3       	breq	.-14     	; 0x82de <__divsf3+0x14>
    82ec:	55 23       	and	r21, r21
    82ee:	b1 f3       	breq	.-20     	; 0x82dc <__divsf3+0x12>
    82f0:	95 1b       	sub	r25, r21
    82f2:	55 0b       	sbc	r21, r21
    82f4:	bb 27       	eor	r27, r27
    82f6:	aa 27       	eor	r26, r26
    82f8:	62 17       	cp	r22, r18
    82fa:	73 07       	cpc	r23, r19
    82fc:	84 07       	cpc	r24, r20
    82fe:	38 f0       	brcs	.+14     	; 0x830e <__divsf3_pse+0x26>
    8300:	9f 5f       	subi	r25, 0xFF	; 255
    8302:	5f 4f       	sbci	r21, 0xFF	; 255
    8304:	22 0f       	add	r18, r18
    8306:	33 1f       	adc	r19, r19
    8308:	44 1f       	adc	r20, r20
    830a:	aa 1f       	adc	r26, r26
    830c:	a9 f3       	breq	.-22     	; 0x82f8 <__divsf3_pse+0x10>
    830e:	33 d0       	rcall	.+102    	; 0x8376 <__divsf3_pse+0x8e>
    8310:	0e 2e       	mov	r0, r30
    8312:	3a f0       	brmi	.+14     	; 0x8322 <__divsf3_pse+0x3a>
    8314:	e0 e8       	ldi	r30, 0x80	; 128
    8316:	30 d0       	rcall	.+96     	; 0x8378 <__divsf3_pse+0x90>
    8318:	91 50       	subi	r25, 0x01	; 1
    831a:	50 40       	sbci	r21, 0x00	; 0
    831c:	e6 95       	lsr	r30
    831e:	00 1c       	adc	r0, r0
    8320:	ca f7       	brpl	.-14     	; 0x8314 <__divsf3_pse+0x2c>
    8322:	29 d0       	rcall	.+82     	; 0x8376 <__divsf3_pse+0x8e>
    8324:	fe 2f       	mov	r31, r30
    8326:	27 d0       	rcall	.+78     	; 0x8376 <__divsf3_pse+0x8e>
    8328:	66 0f       	add	r22, r22
    832a:	77 1f       	adc	r23, r23
    832c:	88 1f       	adc	r24, r24
    832e:	bb 1f       	adc	r27, r27
    8330:	26 17       	cp	r18, r22
    8332:	37 07       	cpc	r19, r23
    8334:	48 07       	cpc	r20, r24
    8336:	ab 07       	cpc	r26, r27
    8338:	b0 e8       	ldi	r27, 0x80	; 128
    833a:	09 f0       	breq	.+2      	; 0x833e <__divsf3_pse+0x56>
    833c:	bb 0b       	sbc	r27, r27
    833e:	80 2d       	mov	r24, r0
    8340:	bf 01       	movw	r22, r30
    8342:	ff 27       	eor	r31, r31
    8344:	93 58       	subi	r25, 0x83	; 131
    8346:	5f 4f       	sbci	r21, 0xFF	; 255
    8348:	2a f0       	brmi	.+10     	; 0x8354 <__divsf3_pse+0x6c>
    834a:	9e 3f       	cpi	r25, 0xFE	; 254
    834c:	51 05       	cpc	r21, r1
    834e:	68 f0       	brcs	.+26     	; 0x836a <__divsf3_pse+0x82>
    8350:	b6 c0       	rjmp	.+364    	; 0x84be <__fp_inf>
    8352:	9e c1       	rjmp	.+828    	; 0x8690 <__fp_szero>
    8354:	5f 3f       	cpi	r21, 0xFF	; 255
    8356:	ec f3       	brlt	.-6      	; 0x8352 <__divsf3_pse+0x6a>
    8358:	98 3e       	cpi	r25, 0xE8	; 232
    835a:	dc f3       	brlt	.-10     	; 0x8352 <__divsf3_pse+0x6a>
    835c:	86 95       	lsr	r24
    835e:	77 95       	ror	r23
    8360:	67 95       	ror	r22
    8362:	b7 95       	ror	r27
    8364:	f7 95       	ror	r31
    8366:	9f 5f       	subi	r25, 0xFF	; 255
    8368:	c9 f7       	brne	.-14     	; 0x835c <__divsf3_pse+0x74>
    836a:	88 0f       	add	r24, r24
    836c:	91 1d       	adc	r25, r1
    836e:	96 95       	lsr	r25
    8370:	87 95       	ror	r24
    8372:	97 f9       	bld	r25, 7
    8374:	08 95       	ret
    8376:	e1 e0       	ldi	r30, 0x01	; 1
    8378:	66 0f       	add	r22, r22
    837a:	77 1f       	adc	r23, r23
    837c:	88 1f       	adc	r24, r24
    837e:	bb 1f       	adc	r27, r27
    8380:	62 17       	cp	r22, r18
    8382:	73 07       	cpc	r23, r19
    8384:	84 07       	cpc	r24, r20
    8386:	ba 07       	cpc	r27, r26
    8388:	20 f0       	brcs	.+8      	; 0x8392 <__divsf3_pse+0xaa>
    838a:	62 1b       	sub	r22, r18
    838c:	73 0b       	sbc	r23, r19
    838e:	84 0b       	sbc	r24, r20
    8390:	ba 0b       	sbc	r27, r26
    8392:	ee 1f       	adc	r30, r30
    8394:	88 f7       	brcc	.-30     	; 0x8378 <__divsf3_pse+0x90>
    8396:	e0 95       	com	r30
    8398:	08 95       	ret

0000839a <__fixsfsi>:
    839a:	04 d0       	rcall	.+8      	; 0x83a4 <__fixunssfsi>
    839c:	68 94       	set
    839e:	b1 11       	cpse	r27, r1
    83a0:	77 c1       	rjmp	.+750    	; 0x8690 <__fp_szero>
    83a2:	08 95       	ret

000083a4 <__fixunssfsi>:
    83a4:	43 d1       	rcall	.+646    	; 0x862c <__fp_splitA>
    83a6:	88 f0       	brcs	.+34     	; 0x83ca <__fixunssfsi+0x26>
    83a8:	9f 57       	subi	r25, 0x7F	; 127
    83aa:	90 f0       	brcs	.+36     	; 0x83d0 <__fixunssfsi+0x2c>
    83ac:	b9 2f       	mov	r27, r25
    83ae:	99 27       	eor	r25, r25
    83b0:	b7 51       	subi	r27, 0x17	; 23
    83b2:	a0 f0       	brcs	.+40     	; 0x83dc <__fixunssfsi+0x38>
    83b4:	d1 f0       	breq	.+52     	; 0x83ea <__fixunssfsi+0x46>
    83b6:	66 0f       	add	r22, r22
    83b8:	77 1f       	adc	r23, r23
    83ba:	88 1f       	adc	r24, r24
    83bc:	99 1f       	adc	r25, r25
    83be:	1a f0       	brmi	.+6      	; 0x83c6 <__fixunssfsi+0x22>
    83c0:	ba 95       	dec	r27
    83c2:	c9 f7       	brne	.-14     	; 0x83b6 <__fixunssfsi+0x12>
    83c4:	12 c0       	rjmp	.+36     	; 0x83ea <__fixunssfsi+0x46>
    83c6:	b1 30       	cpi	r27, 0x01	; 1
    83c8:	81 f0       	breq	.+32     	; 0x83ea <__fixunssfsi+0x46>
    83ca:	61 d1       	rcall	.+706    	; 0x868e <__fp_zero>
    83cc:	b1 e0       	ldi	r27, 0x01	; 1
    83ce:	08 95       	ret
    83d0:	5e c1       	rjmp	.+700    	; 0x868e <__fp_zero>
    83d2:	67 2f       	mov	r22, r23
    83d4:	78 2f       	mov	r23, r24
    83d6:	88 27       	eor	r24, r24
    83d8:	b8 5f       	subi	r27, 0xF8	; 248
    83da:	39 f0       	breq	.+14     	; 0x83ea <__fixunssfsi+0x46>
    83dc:	b9 3f       	cpi	r27, 0xF9	; 249
    83de:	cc f3       	brlt	.-14     	; 0x83d2 <__fixunssfsi+0x2e>
    83e0:	86 95       	lsr	r24
    83e2:	77 95       	ror	r23
    83e4:	67 95       	ror	r22
    83e6:	b3 95       	inc	r27
    83e8:	d9 f7       	brne	.-10     	; 0x83e0 <__fixunssfsi+0x3c>
    83ea:	3e f4       	brtc	.+14     	; 0x83fa <__fixunssfsi+0x56>
    83ec:	90 95       	com	r25
    83ee:	80 95       	com	r24
    83f0:	70 95       	com	r23
    83f2:	61 95       	neg	r22
    83f4:	7f 4f       	sbci	r23, 0xFF	; 255
    83f6:	8f 4f       	sbci	r24, 0xFF	; 255
    83f8:	9f 4f       	sbci	r25, 0xFF	; 255
    83fa:	08 95       	ret

000083fc <__floatunsisf>:
    83fc:	e8 94       	clt
    83fe:	09 c0       	rjmp	.+18     	; 0x8412 <__floatsisf+0x12>

00008400 <__floatsisf>:
    8400:	97 fb       	bst	r25, 7
    8402:	3e f4       	brtc	.+14     	; 0x8412 <__floatsisf+0x12>
    8404:	90 95       	com	r25
    8406:	80 95       	com	r24
    8408:	70 95       	com	r23
    840a:	61 95       	neg	r22
    840c:	7f 4f       	sbci	r23, 0xFF	; 255
    840e:	8f 4f       	sbci	r24, 0xFF	; 255
    8410:	9f 4f       	sbci	r25, 0xFF	; 255
    8412:	99 23       	and	r25, r25
    8414:	a9 f0       	breq	.+42     	; 0x8440 <__floatsisf+0x40>
    8416:	f9 2f       	mov	r31, r25
    8418:	96 e9       	ldi	r25, 0x96	; 150
    841a:	bb 27       	eor	r27, r27
    841c:	93 95       	inc	r25
    841e:	f6 95       	lsr	r31
    8420:	87 95       	ror	r24
    8422:	77 95       	ror	r23
    8424:	67 95       	ror	r22
    8426:	b7 95       	ror	r27
    8428:	f1 11       	cpse	r31, r1
    842a:	f8 cf       	rjmp	.-16     	; 0x841c <__floatsisf+0x1c>
    842c:	fa f4       	brpl	.+62     	; 0x846c <__floatsisf+0x6c>
    842e:	bb 0f       	add	r27, r27
    8430:	11 f4       	brne	.+4      	; 0x8436 <__floatsisf+0x36>
    8432:	60 ff       	sbrs	r22, 0
    8434:	1b c0       	rjmp	.+54     	; 0x846c <__floatsisf+0x6c>
    8436:	6f 5f       	subi	r22, 0xFF	; 255
    8438:	7f 4f       	sbci	r23, 0xFF	; 255
    843a:	8f 4f       	sbci	r24, 0xFF	; 255
    843c:	9f 4f       	sbci	r25, 0xFF	; 255
    843e:	16 c0       	rjmp	.+44     	; 0x846c <__floatsisf+0x6c>
    8440:	88 23       	and	r24, r24
    8442:	11 f0       	breq	.+4      	; 0x8448 <__floatsisf+0x48>
    8444:	96 e9       	ldi	r25, 0x96	; 150
    8446:	11 c0       	rjmp	.+34     	; 0x846a <__floatsisf+0x6a>
    8448:	77 23       	and	r23, r23
    844a:	21 f0       	breq	.+8      	; 0x8454 <__floatsisf+0x54>
    844c:	9e e8       	ldi	r25, 0x8E	; 142
    844e:	87 2f       	mov	r24, r23
    8450:	76 2f       	mov	r23, r22
    8452:	05 c0       	rjmp	.+10     	; 0x845e <__floatsisf+0x5e>
    8454:	66 23       	and	r22, r22
    8456:	71 f0       	breq	.+28     	; 0x8474 <__floatsisf+0x74>
    8458:	96 e8       	ldi	r25, 0x86	; 134
    845a:	86 2f       	mov	r24, r22
    845c:	70 e0       	ldi	r23, 0x00	; 0
    845e:	60 e0       	ldi	r22, 0x00	; 0
    8460:	2a f0       	brmi	.+10     	; 0x846c <__floatsisf+0x6c>
    8462:	9a 95       	dec	r25
    8464:	66 0f       	add	r22, r22
    8466:	77 1f       	adc	r23, r23
    8468:	88 1f       	adc	r24, r24
    846a:	da f7       	brpl	.-10     	; 0x8462 <__floatsisf+0x62>
    846c:	88 0f       	add	r24, r24
    846e:	96 95       	lsr	r25
    8470:	87 95       	ror	r24
    8472:	97 f9       	bld	r25, 7
    8474:	08 95       	ret

00008476 <__fp_cmp>:
    8476:	99 0f       	add	r25, r25
    8478:	00 08       	sbc	r0, r0
    847a:	55 0f       	add	r21, r21
    847c:	aa 0b       	sbc	r26, r26
    847e:	e0 e8       	ldi	r30, 0x80	; 128
    8480:	fe ef       	ldi	r31, 0xFE	; 254
    8482:	16 16       	cp	r1, r22
    8484:	17 06       	cpc	r1, r23
    8486:	e8 07       	cpc	r30, r24
    8488:	f9 07       	cpc	r31, r25
    848a:	c0 f0       	brcs	.+48     	; 0x84bc <__fp_cmp+0x46>
    848c:	12 16       	cp	r1, r18
    848e:	13 06       	cpc	r1, r19
    8490:	e4 07       	cpc	r30, r20
    8492:	f5 07       	cpc	r31, r21
    8494:	98 f0       	brcs	.+38     	; 0x84bc <__fp_cmp+0x46>
    8496:	62 1b       	sub	r22, r18
    8498:	73 0b       	sbc	r23, r19
    849a:	84 0b       	sbc	r24, r20
    849c:	95 0b       	sbc	r25, r21
    849e:	39 f4       	brne	.+14     	; 0x84ae <__fp_cmp+0x38>
    84a0:	0a 26       	eor	r0, r26
    84a2:	61 f0       	breq	.+24     	; 0x84bc <__fp_cmp+0x46>
    84a4:	23 2b       	or	r18, r19
    84a6:	24 2b       	or	r18, r20
    84a8:	25 2b       	or	r18, r21
    84aa:	21 f4       	brne	.+8      	; 0x84b4 <__fp_cmp+0x3e>
    84ac:	08 95       	ret
    84ae:	0a 26       	eor	r0, r26
    84b0:	09 f4       	brne	.+2      	; 0x84b4 <__fp_cmp+0x3e>
    84b2:	a1 40       	sbci	r26, 0x01	; 1
    84b4:	a6 95       	lsr	r26
    84b6:	8f ef       	ldi	r24, 0xFF	; 255
    84b8:	81 1d       	adc	r24, r1
    84ba:	81 1d       	adc	r24, r1
    84bc:	08 95       	ret

000084be <__fp_inf>:
    84be:	97 f9       	bld	r25, 7
    84c0:	9f 67       	ori	r25, 0x7F	; 127
    84c2:	80 e8       	ldi	r24, 0x80	; 128
    84c4:	70 e0       	ldi	r23, 0x00	; 0
    84c6:	60 e0       	ldi	r22, 0x00	; 0
    84c8:	08 95       	ret

000084ca <__fp_mintl>:
    84ca:	88 23       	and	r24, r24
    84cc:	71 f4       	brne	.+28     	; 0x84ea <__fp_mintl+0x20>
    84ce:	77 23       	and	r23, r23
    84d0:	21 f0       	breq	.+8      	; 0x84da <__fp_mintl+0x10>
    84d2:	98 50       	subi	r25, 0x08	; 8
    84d4:	87 2b       	or	r24, r23
    84d6:	76 2f       	mov	r23, r22
    84d8:	07 c0       	rjmp	.+14     	; 0x84e8 <__fp_mintl+0x1e>
    84da:	66 23       	and	r22, r22
    84dc:	11 f4       	brne	.+4      	; 0x84e2 <__fp_mintl+0x18>
    84de:	99 27       	eor	r25, r25
    84e0:	0d c0       	rjmp	.+26     	; 0x84fc <__fp_mintl+0x32>
    84e2:	90 51       	subi	r25, 0x10	; 16
    84e4:	86 2b       	or	r24, r22
    84e6:	70 e0       	ldi	r23, 0x00	; 0
    84e8:	60 e0       	ldi	r22, 0x00	; 0
    84ea:	2a f0       	brmi	.+10     	; 0x84f6 <__fp_mintl+0x2c>
    84ec:	9a 95       	dec	r25
    84ee:	66 0f       	add	r22, r22
    84f0:	77 1f       	adc	r23, r23
    84f2:	88 1f       	adc	r24, r24
    84f4:	da f7       	brpl	.-10     	; 0x84ec <__fp_mintl+0x22>
    84f6:	88 0f       	add	r24, r24
    84f8:	96 95       	lsr	r25
    84fa:	87 95       	ror	r24
    84fc:	97 f9       	bld	r25, 7
    84fe:	08 95       	ret

00008500 <__fp_mpack>:
    8500:	9f 3f       	cpi	r25, 0xFF	; 255
    8502:	31 f0       	breq	.+12     	; 0x8510 <__fp_mpack_finite+0xc>

00008504 <__fp_mpack_finite>:
    8504:	91 50       	subi	r25, 0x01	; 1
    8506:	20 f4       	brcc	.+8      	; 0x8510 <__fp_mpack_finite+0xc>
    8508:	87 95       	ror	r24
    850a:	77 95       	ror	r23
    850c:	67 95       	ror	r22
    850e:	b7 95       	ror	r27
    8510:	88 0f       	add	r24, r24
    8512:	91 1d       	adc	r25, r1
    8514:	96 95       	lsr	r25
    8516:	87 95       	ror	r24
    8518:	97 f9       	bld	r25, 7
    851a:	08 95       	ret

0000851c <__fp_nan>:
    851c:	9f ef       	ldi	r25, 0xFF	; 255
    851e:	80 ec       	ldi	r24, 0xC0	; 192
    8520:	08 95       	ret

00008522 <__fp_powser>:
    8522:	df 93       	push	r29
    8524:	cf 93       	push	r28
    8526:	1f 93       	push	r17
    8528:	0f 93       	push	r16
    852a:	ff 92       	push	r15
    852c:	ef 92       	push	r14
    852e:	df 92       	push	r13
    8530:	7b 01       	movw	r14, r22
    8532:	8c 01       	movw	r16, r24
    8534:	68 94       	set
    8536:	05 c0       	rjmp	.+10     	; 0x8542 <__fp_powser+0x20>
    8538:	da 2e       	mov	r13, r26
    853a:	ef 01       	movw	r28, r30
    853c:	8d d1       	rcall	.+794    	; 0x8858 <__mulsf3x>
    853e:	fe 01       	movw	r30, r28
    8540:	e8 94       	clt
    8542:	a5 91       	lpm	r26, Z+
    8544:	25 91       	lpm	r18, Z+
    8546:	35 91       	lpm	r19, Z+
    8548:	45 91       	lpm	r20, Z+
    854a:	55 91       	lpm	r21, Z+
    854c:	ae f3       	brts	.-22     	; 0x8538 <__fp_powser+0x16>
    854e:	ef 01       	movw	r28, r30
    8550:	27 de       	rcall	.-946    	; 0x81a0 <__addsf3x>
    8552:	fe 01       	movw	r30, r28
    8554:	97 01       	movw	r18, r14
    8556:	a8 01       	movw	r20, r16
    8558:	da 94       	dec	r13
    855a:	79 f7       	brne	.-34     	; 0x853a <__fp_powser+0x18>
    855c:	df 90       	pop	r13
    855e:	ef 90       	pop	r14
    8560:	ff 90       	pop	r15
    8562:	0f 91       	pop	r16
    8564:	1f 91       	pop	r17
    8566:	cf 91       	pop	r28
    8568:	df 91       	pop	r29
    856a:	08 95       	ret

0000856c <__fp_pscA>:
    856c:	00 24       	eor	r0, r0
    856e:	0a 94       	dec	r0
    8570:	16 16       	cp	r1, r22
    8572:	17 06       	cpc	r1, r23
    8574:	18 06       	cpc	r1, r24
    8576:	09 06       	cpc	r0, r25
    8578:	08 95       	ret

0000857a <__fp_pscB>:
    857a:	00 24       	eor	r0, r0
    857c:	0a 94       	dec	r0
    857e:	12 16       	cp	r1, r18
    8580:	13 06       	cpc	r1, r19
    8582:	14 06       	cpc	r1, r20
    8584:	05 06       	cpc	r0, r21
    8586:	08 95       	ret
    8588:	c9 cf       	rjmp	.-110    	; 0x851c <__fp_nan>

0000858a <__fp_rempio2>:
    858a:	50 d0       	rcall	.+160    	; 0x862c <__fp_splitA>
    858c:	e8 f3       	brcs	.-6      	; 0x8588 <__fp_pscB+0xe>
    858e:	e8 94       	clt
    8590:	e0 e0       	ldi	r30, 0x00	; 0
    8592:	bb 27       	eor	r27, r27
    8594:	9f 57       	subi	r25, 0x7F	; 127
    8596:	f0 f0       	brcs	.+60     	; 0x85d4 <__fp_rempio2+0x4a>
    8598:	2a ed       	ldi	r18, 0xDA	; 218
    859a:	3f e0       	ldi	r19, 0x0F	; 15
    859c:	49 ec       	ldi	r20, 0xC9	; 201
    859e:	06 c0       	rjmp	.+12     	; 0x85ac <__fp_rempio2+0x22>
    85a0:	ee 0f       	add	r30, r30
    85a2:	bb 0f       	add	r27, r27
    85a4:	66 1f       	adc	r22, r22
    85a6:	77 1f       	adc	r23, r23
    85a8:	88 1f       	adc	r24, r24
    85aa:	28 f0       	brcs	.+10     	; 0x85b6 <__fp_rempio2+0x2c>
    85ac:	b2 3a       	cpi	r27, 0xA2	; 162
    85ae:	62 07       	cpc	r22, r18
    85b0:	73 07       	cpc	r23, r19
    85b2:	84 07       	cpc	r24, r20
    85b4:	28 f0       	brcs	.+10     	; 0x85c0 <__fp_rempio2+0x36>
    85b6:	b2 5a       	subi	r27, 0xA2	; 162
    85b8:	62 0b       	sbc	r22, r18
    85ba:	73 0b       	sbc	r23, r19
    85bc:	84 0b       	sbc	r24, r20
    85be:	e3 95       	inc	r30
    85c0:	9a 95       	dec	r25
    85c2:	72 f7       	brpl	.-36     	; 0x85a0 <__fp_rempio2+0x16>
    85c4:	80 38       	cpi	r24, 0x80	; 128
    85c6:	30 f4       	brcc	.+12     	; 0x85d4 <__fp_rempio2+0x4a>
    85c8:	9a 95       	dec	r25
    85ca:	bb 0f       	add	r27, r27
    85cc:	66 1f       	adc	r22, r22
    85ce:	77 1f       	adc	r23, r23
    85d0:	88 1f       	adc	r24, r24
    85d2:	d2 f7       	brpl	.-12     	; 0x85c8 <__fp_rempio2+0x3e>
    85d4:	90 48       	sbci	r25, 0x80	; 128
    85d6:	96 cf       	rjmp	.-212    	; 0x8504 <__fp_mpack_finite>

000085d8 <__fp_round>:
    85d8:	09 2e       	mov	r0, r25
    85da:	03 94       	inc	r0
    85dc:	00 0c       	add	r0, r0
    85de:	11 f4       	brne	.+4      	; 0x85e4 <__fp_round+0xc>
    85e0:	88 23       	and	r24, r24
    85e2:	52 f0       	brmi	.+20     	; 0x85f8 <__fp_round+0x20>
    85e4:	bb 0f       	add	r27, r27
    85e6:	40 f4       	brcc	.+16     	; 0x85f8 <__fp_round+0x20>
    85e8:	bf 2b       	or	r27, r31
    85ea:	11 f4       	brne	.+4      	; 0x85f0 <__fp_round+0x18>
    85ec:	60 ff       	sbrs	r22, 0
    85ee:	04 c0       	rjmp	.+8      	; 0x85f8 <__fp_round+0x20>
    85f0:	6f 5f       	subi	r22, 0xFF	; 255
    85f2:	7f 4f       	sbci	r23, 0xFF	; 255
    85f4:	8f 4f       	sbci	r24, 0xFF	; 255
    85f6:	9f 4f       	sbci	r25, 0xFF	; 255
    85f8:	08 95       	ret

000085fa <__fp_sinus>:
    85fa:	ef 93       	push	r30
    85fc:	e0 ff       	sbrs	r30, 0
    85fe:	06 c0       	rjmp	.+12     	; 0x860c <__fp_sinus+0x12>
    8600:	a2 ea       	ldi	r26, 0xA2	; 162
    8602:	2a ed       	ldi	r18, 0xDA	; 218
    8604:	3f e0       	ldi	r19, 0x0F	; 15
    8606:	49 ec       	ldi	r20, 0xC9	; 201
    8608:	5f eb       	ldi	r21, 0xBF	; 191
    860a:	ca dd       	rcall	.-1132   	; 0x81a0 <__addsf3x>
    860c:	e5 df       	rcall	.-54     	; 0x85d8 <__fp_round>
    860e:	0f 90       	pop	r0
    8610:	03 94       	inc	r0
    8612:	01 fc       	sbrc	r0, 1
    8614:	90 58       	subi	r25, 0x80	; 128
    8616:	e5 e1       	ldi	r30, 0x15	; 21
    8618:	f2 e0       	ldi	r31, 0x02	; 2
    861a:	d2 c1       	rjmp	.+932    	; 0x89c0 <__fp_powsodd>

0000861c <__fp_split3>:
    861c:	57 fd       	sbrc	r21, 7
    861e:	90 58       	subi	r25, 0x80	; 128
    8620:	44 0f       	add	r20, r20
    8622:	55 1f       	adc	r21, r21
    8624:	59 f0       	breq	.+22     	; 0x863c <__fp_splitA+0x10>
    8626:	5f 3f       	cpi	r21, 0xFF	; 255
    8628:	71 f0       	breq	.+28     	; 0x8646 <__fp_splitA+0x1a>
    862a:	47 95       	ror	r20

0000862c <__fp_splitA>:
    862c:	88 0f       	add	r24, r24
    862e:	97 fb       	bst	r25, 7
    8630:	99 1f       	adc	r25, r25
    8632:	61 f0       	breq	.+24     	; 0x864c <__fp_splitA+0x20>
    8634:	9f 3f       	cpi	r25, 0xFF	; 255
    8636:	79 f0       	breq	.+30     	; 0x8656 <__fp_splitA+0x2a>
    8638:	87 95       	ror	r24
    863a:	08 95       	ret
    863c:	12 16       	cp	r1, r18
    863e:	13 06       	cpc	r1, r19
    8640:	14 06       	cpc	r1, r20
    8642:	55 1f       	adc	r21, r21
    8644:	f2 cf       	rjmp	.-28     	; 0x862a <__fp_split3+0xe>
    8646:	46 95       	lsr	r20
    8648:	f1 df       	rcall	.-30     	; 0x862c <__fp_splitA>
    864a:	08 c0       	rjmp	.+16     	; 0x865c <__fp_splitA+0x30>
    864c:	16 16       	cp	r1, r22
    864e:	17 06       	cpc	r1, r23
    8650:	18 06       	cpc	r1, r24
    8652:	99 1f       	adc	r25, r25
    8654:	f1 cf       	rjmp	.-30     	; 0x8638 <__fp_splitA+0xc>
    8656:	86 95       	lsr	r24
    8658:	71 05       	cpc	r23, r1
    865a:	61 05       	cpc	r22, r1
    865c:	08 94       	sec
    865e:	08 95       	ret

00008660 <__fp_trunc>:
    8660:	e5 df       	rcall	.-54     	; 0x862c <__fp_splitA>
    8662:	a0 f0       	brcs	.+40     	; 0x868c <__fp_trunc+0x2c>
    8664:	be e7       	ldi	r27, 0x7E	; 126
    8666:	b9 17       	cp	r27, r25
    8668:	88 f4       	brcc	.+34     	; 0x868c <__fp_trunc+0x2c>
    866a:	bb 27       	eor	r27, r27
    866c:	9f 38       	cpi	r25, 0x8F	; 143
    866e:	60 f4       	brcc	.+24     	; 0x8688 <__fp_trunc+0x28>
    8670:	16 16       	cp	r1, r22
    8672:	b1 1d       	adc	r27, r1
    8674:	67 2f       	mov	r22, r23
    8676:	78 2f       	mov	r23, r24
    8678:	88 27       	eor	r24, r24
    867a:	98 5f       	subi	r25, 0xF8	; 248
    867c:	f7 cf       	rjmp	.-18     	; 0x866c <__fp_trunc+0xc>
    867e:	86 95       	lsr	r24
    8680:	77 95       	ror	r23
    8682:	67 95       	ror	r22
    8684:	b1 1d       	adc	r27, r1
    8686:	93 95       	inc	r25
    8688:	96 39       	cpi	r25, 0x96	; 150
    868a:	c8 f3       	brcs	.-14     	; 0x867e <__fp_trunc+0x1e>
    868c:	08 95       	ret

0000868e <__fp_zero>:
    868e:	e8 94       	clt

00008690 <__fp_szero>:
    8690:	bb 27       	eor	r27, r27
    8692:	66 27       	eor	r22, r22
    8694:	77 27       	eor	r23, r23
    8696:	cb 01       	movw	r24, r22
    8698:	97 f9       	bld	r25, 7
    869a:	08 95       	ret

0000869c <__gesf2>:
    869c:	ec de       	rcall	.-552    	; 0x8476 <__fp_cmp>
    869e:	08 f4       	brcc	.+2      	; 0x86a2 <__gesf2+0x6>
    86a0:	8f ef       	ldi	r24, 0xFF	; 255
    86a2:	08 95       	ret
    86a4:	63 df       	rcall	.-314    	; 0x856c <__fp_pscA>
    86a6:	19 f0       	breq	.+6      	; 0x86ae <__gesf2+0x12>
    86a8:	68 df       	rcall	.-304    	; 0x857a <__fp_pscB>
    86aa:	09 f0       	breq	.+2      	; 0x86ae <__gesf2+0x12>
    86ac:	37 cf       	rjmp	.-402    	; 0x851c <__fp_nan>
    86ae:	07 cf       	rjmp	.-498    	; 0x84be <__fp_inf>
    86b0:	b9 01       	movw	r22, r18
    86b2:	ca 01       	movw	r24, r20
    86b4:	25 cf       	rjmp	.-438    	; 0x8500 <__fp_mpack>

000086b6 <hypot>:
    86b6:	9f 77       	andi	r25, 0x7F	; 127
    86b8:	5f 77       	andi	r21, 0x7F	; 127
    86ba:	b0 df       	rcall	.-160    	; 0x861c <__fp_split3>
    86bc:	98 f3       	brcs	.-26     	; 0x86a4 <__gesf2+0x8>
    86be:	99 23       	and	r25, r25
    86c0:	b9 f3       	breq	.-18     	; 0x86b0 <__gesf2+0x14>
    86c2:	55 23       	and	r21, r21
    86c4:	b9 f3       	breq	.-18     	; 0x86b4 <__gesf2+0x18>
    86c6:	ff 27       	eor	r31, r31
    86c8:	95 17       	cp	r25, r21
    86ca:	58 f4       	brcc	.+22     	; 0x86e2 <hypot+0x2c>
    86cc:	e5 2f       	mov	r30, r21
    86ce:	e9 1b       	sub	r30, r25
    86d0:	ed 30       	cpi	r30, 0x0D	; 13
    86d2:	70 f7       	brcc	.-36     	; 0x86b0 <__gesf2+0x14>
    86d4:	5e 3b       	cpi	r21, 0xBE	; 190
    86d6:	10 f0       	brcs	.+4      	; 0x86dc <hypot+0x26>
    86d8:	f1 e4       	ldi	r31, 0x41	; 65
    86da:	1c c0       	rjmp	.+56     	; 0x8714 <hypot+0x5e>
    86dc:	90 34       	cpi	r25, 0x40	; 64
    86de:	e0 f4       	brcc	.+56     	; 0x8718 <hypot+0x62>
    86e0:	0a c0       	rjmp	.+20     	; 0x86f6 <hypot+0x40>
    86e2:	e9 2f       	mov	r30, r25
    86e4:	e5 1b       	sub	r30, r21
    86e6:	ed 30       	cpi	r30, 0x0D	; 13
    86e8:	28 f7       	brcc	.-54     	; 0x86b4 <__gesf2+0x18>
    86ea:	9e 3b       	cpi	r25, 0xBE	; 190
    86ec:	10 f0       	brcs	.+4      	; 0x86f2 <hypot+0x3c>
    86ee:	f1 e4       	ldi	r31, 0x41	; 65
    86f0:	11 c0       	rjmp	.+34     	; 0x8714 <hypot+0x5e>
    86f2:	50 34       	cpi	r21, 0x40	; 64
    86f4:	88 f4       	brcc	.+34     	; 0x8718 <hypot+0x62>
    86f6:	f9 ea       	ldi	r31, 0xA9	; 169
    86f8:	88 23       	and	r24, r24
    86fa:	2a f0       	brmi	.+10     	; 0x8706 <hypot+0x50>
    86fc:	9a 95       	dec	r25
    86fe:	66 0f       	add	r22, r22
    8700:	77 1f       	adc	r23, r23
    8702:	88 1f       	adc	r24, r24
    8704:	da f7       	brpl	.-10     	; 0x86fc <hypot+0x46>
    8706:	44 23       	and	r20, r20
    8708:	2a f0       	brmi	.+10     	; 0x8714 <hypot+0x5e>
    870a:	5a 95       	dec	r21
    870c:	22 0f       	add	r18, r18
    870e:	33 1f       	adc	r19, r19
    8710:	44 1f       	adc	r20, r20
    8712:	da f7       	brpl	.-10     	; 0x870a <hypot+0x54>
    8714:	9f 1b       	sub	r25, r31
    8716:	5f 1b       	sub	r21, r31
    8718:	ff 93       	push	r31
    871a:	1f 93       	push	r17
    871c:	0f 93       	push	r16
    871e:	ff 92       	push	r15
    8720:	ef 92       	push	r14
    8722:	79 01       	movw	r14, r18
    8724:	8a 01       	movw	r16, r20
    8726:	bb 27       	eor	r27, r27
    8728:	ab 2f       	mov	r26, r27
    872a:	9b 01       	movw	r18, r22
    872c:	ac 01       	movw	r20, r24
    872e:	96 d0       	rcall	.+300    	; 0x885c <__mulsf3_pse>
    8730:	97 01       	movw	r18, r14
    8732:	a8 01       	movw	r20, r16
    8734:	bf 93       	push	r27
    8736:	7b 01       	movw	r14, r22
    8738:	8c 01       	movw	r16, r24
    873a:	aa 27       	eor	r26, r26
    873c:	ba 2f       	mov	r27, r26
    873e:	b9 01       	movw	r22, r18
    8740:	ca 01       	movw	r24, r20
    8742:	8c d0       	rcall	.+280    	; 0x885c <__mulsf3_pse>
    8744:	af 91       	pop	r26
    8746:	97 01       	movw	r18, r14
    8748:	a8 01       	movw	r20, r16
    874a:	ef 90       	pop	r14
    874c:	ff 90       	pop	r15
    874e:	0f 91       	pop	r16
    8750:	1f 91       	pop	r17
    8752:	26 dd       	rcall	.-1460   	; 0x81a0 <__addsf3x>
    8754:	41 df       	rcall	.-382    	; 0x85d8 <__fp_round>
    8756:	e1 d0       	rcall	.+450    	; 0x891a <sqrt>
    8758:	4f 91       	pop	r20
    875a:	40 ff       	sbrs	r20, 0
    875c:	08 95       	ret
    875e:	55 27       	eor	r21, r21
    8760:	47 fd       	sbrc	r20, 7
    8762:	50 95       	com	r21
    8764:	09 c0       	rjmp	.+18     	; 0x8778 <ldexp>

00008766 <inverse>:
    8766:	9b 01       	movw	r18, r22
    8768:	ac 01       	movw	r20, r24
    876a:	60 e0       	ldi	r22, 0x00	; 0
    876c:	70 e0       	ldi	r23, 0x00	; 0
    876e:	80 e8       	ldi	r24, 0x80	; 128
    8770:	9f e3       	ldi	r25, 0x3F	; 63
    8772:	ab cd       	rjmp	.-1194   	; 0x82ca <__divsf3>
    8774:	a4 ce       	rjmp	.-696    	; 0x84be <__fp_inf>
    8776:	c4 ce       	rjmp	.-632    	; 0x8500 <__fp_mpack>

00008778 <ldexp>:
    8778:	59 df       	rcall	.-334    	; 0x862c <__fp_splitA>
    877a:	e8 f3       	brcs	.-6      	; 0x8776 <inverse+0x10>
    877c:	99 23       	and	r25, r25
    877e:	d9 f3       	breq	.-10     	; 0x8776 <inverse+0x10>
    8780:	94 0f       	add	r25, r20
    8782:	51 1d       	adc	r21, r1
    8784:	bb f3       	brvs	.-18     	; 0x8774 <inverse+0xe>
    8786:	91 50       	subi	r25, 0x01	; 1
    8788:	50 40       	sbci	r21, 0x00	; 0
    878a:	94 f0       	brlt	.+36     	; 0x87b0 <ldexp+0x38>
    878c:	59 f0       	breq	.+22     	; 0x87a4 <ldexp+0x2c>
    878e:	88 23       	and	r24, r24
    8790:	32 f0       	brmi	.+12     	; 0x879e <ldexp+0x26>
    8792:	66 0f       	add	r22, r22
    8794:	77 1f       	adc	r23, r23
    8796:	88 1f       	adc	r24, r24
    8798:	91 50       	subi	r25, 0x01	; 1
    879a:	50 40       	sbci	r21, 0x00	; 0
    879c:	c1 f7       	brne	.-16     	; 0x878e <ldexp+0x16>
    879e:	9e 3f       	cpi	r25, 0xFE	; 254
    87a0:	51 05       	cpc	r21, r1
    87a2:	44 f7       	brge	.-48     	; 0x8774 <inverse+0xe>
    87a4:	88 0f       	add	r24, r24
    87a6:	91 1d       	adc	r25, r1
    87a8:	96 95       	lsr	r25
    87aa:	87 95       	ror	r24
    87ac:	97 f9       	bld	r25, 7
    87ae:	08 95       	ret
    87b0:	5f 3f       	cpi	r21, 0xFF	; 255
    87b2:	ac f0       	brlt	.+42     	; 0x87de <ldexp+0x66>
    87b4:	98 3e       	cpi	r25, 0xE8	; 232
    87b6:	9c f0       	brlt	.+38     	; 0x87de <ldexp+0x66>
    87b8:	bb 27       	eor	r27, r27
    87ba:	86 95       	lsr	r24
    87bc:	77 95       	ror	r23
    87be:	67 95       	ror	r22
    87c0:	b7 95       	ror	r27
    87c2:	08 f4       	brcc	.+2      	; 0x87c6 <ldexp+0x4e>
    87c4:	b1 60       	ori	r27, 0x01	; 1
    87c6:	93 95       	inc	r25
    87c8:	c1 f7       	brne	.-16     	; 0x87ba <ldexp+0x42>
    87ca:	bb 0f       	add	r27, r27
    87cc:	58 f7       	brcc	.-42     	; 0x87a4 <ldexp+0x2c>
    87ce:	11 f4       	brne	.+4      	; 0x87d4 <ldexp+0x5c>
    87d0:	60 ff       	sbrs	r22, 0
    87d2:	e8 cf       	rjmp	.-48     	; 0x87a4 <ldexp+0x2c>
    87d4:	6f 5f       	subi	r22, 0xFF	; 255
    87d6:	7f 4f       	sbci	r23, 0xFF	; 255
    87d8:	8f 4f       	sbci	r24, 0xFF	; 255
    87da:	9f 4f       	sbci	r25, 0xFF	; 255
    87dc:	e3 cf       	rjmp	.-58     	; 0x87a4 <ldexp+0x2c>
    87de:	58 cf       	rjmp	.-336    	; 0x8690 <__fp_szero>

000087e0 <lround>:
    87e0:	25 df       	rcall	.-438    	; 0x862c <__fp_splitA>
    87e2:	58 f1       	brcs	.+86     	; 0x883a <lround+0x5a>
    87e4:	9e 57       	subi	r25, 0x7E	; 126
    87e6:	58 f1       	brcs	.+86     	; 0x883e <lround+0x5e>
    87e8:	98 51       	subi	r25, 0x18	; 24
    87ea:	a0 f0       	brcs	.+40     	; 0x8814 <lround+0x34>
    87ec:	e9 f0       	breq	.+58     	; 0x8828 <lround+0x48>
    87ee:	98 30       	cpi	r25, 0x08	; 8
    87f0:	20 f5       	brcc	.+72     	; 0x883a <lround+0x5a>
    87f2:	09 2e       	mov	r0, r25
    87f4:	99 27       	eor	r25, r25
    87f6:	66 0f       	add	r22, r22
    87f8:	77 1f       	adc	r23, r23
    87fa:	88 1f       	adc	r24, r24
    87fc:	99 1f       	adc	r25, r25
    87fe:	0a 94       	dec	r0
    8800:	d1 f7       	brne	.-12     	; 0x87f6 <lround+0x16>
    8802:	12 c0       	rjmp	.+36     	; 0x8828 <lround+0x48>
    8804:	06 2e       	mov	r0, r22
    8806:	67 2f       	mov	r22, r23
    8808:	78 2f       	mov	r23, r24
    880a:	88 27       	eor	r24, r24
    880c:	98 5f       	subi	r25, 0xF8	; 248
    880e:	11 f4       	brne	.+4      	; 0x8814 <lround+0x34>
    8810:	00 0c       	add	r0, r0
    8812:	07 c0       	rjmp	.+14     	; 0x8822 <lround+0x42>
    8814:	99 3f       	cpi	r25, 0xF9	; 249
    8816:	b4 f3       	brlt	.-20     	; 0x8804 <lround+0x24>
    8818:	86 95       	lsr	r24
    881a:	77 95       	ror	r23
    881c:	67 95       	ror	r22
    881e:	93 95       	inc	r25
    8820:	d9 f7       	brne	.-10     	; 0x8818 <lround+0x38>
    8822:	61 1d       	adc	r22, r1
    8824:	71 1d       	adc	r23, r1
    8826:	81 1d       	adc	r24, r1
    8828:	3e f4       	brtc	.+14     	; 0x8838 <lround+0x58>
    882a:	90 95       	com	r25
    882c:	80 95       	com	r24
    882e:	70 95       	com	r23
    8830:	61 95       	neg	r22
    8832:	7f 4f       	sbci	r23, 0xFF	; 255
    8834:	8f 4f       	sbci	r24, 0xFF	; 255
    8836:	9f 4f       	sbci	r25, 0xFF	; 255
    8838:	08 95       	ret
    883a:	68 94       	set
    883c:	29 cf       	rjmp	.-430    	; 0x8690 <__fp_szero>
    883e:	27 cf       	rjmp	.-434    	; 0x868e <__fp_zero>

00008840 <__mulsf3>:
    8840:	0b d0       	rcall	.+22     	; 0x8858 <__mulsf3x>
    8842:	ca ce       	rjmp	.-620    	; 0x85d8 <__fp_round>
    8844:	93 de       	rcall	.-730    	; 0x856c <__fp_pscA>
    8846:	28 f0       	brcs	.+10     	; 0x8852 <__mulsf3+0x12>
    8848:	98 de       	rcall	.-720    	; 0x857a <__fp_pscB>
    884a:	18 f0       	brcs	.+6      	; 0x8852 <__mulsf3+0x12>
    884c:	95 23       	and	r25, r21
    884e:	09 f0       	breq	.+2      	; 0x8852 <__mulsf3+0x12>
    8850:	36 ce       	rjmp	.-916    	; 0x84be <__fp_inf>
    8852:	64 ce       	rjmp	.-824    	; 0x851c <__fp_nan>
    8854:	11 24       	eor	r1, r1
    8856:	1c cf       	rjmp	.-456    	; 0x8690 <__fp_szero>

00008858 <__mulsf3x>:
    8858:	e1 de       	rcall	.-574    	; 0x861c <__fp_split3>
    885a:	a0 f3       	brcs	.-24     	; 0x8844 <__mulsf3+0x4>

0000885c <__mulsf3_pse>:
    885c:	95 9f       	mul	r25, r21
    885e:	d1 f3       	breq	.-12     	; 0x8854 <__mulsf3+0x14>
    8860:	95 0f       	add	r25, r21
    8862:	50 e0       	ldi	r21, 0x00	; 0
    8864:	55 1f       	adc	r21, r21
    8866:	62 9f       	mul	r22, r18
    8868:	f0 01       	movw	r30, r0
    886a:	72 9f       	mul	r23, r18
    886c:	bb 27       	eor	r27, r27
    886e:	f0 0d       	add	r31, r0
    8870:	b1 1d       	adc	r27, r1
    8872:	63 9f       	mul	r22, r19
    8874:	aa 27       	eor	r26, r26
    8876:	f0 0d       	add	r31, r0
    8878:	b1 1d       	adc	r27, r1
    887a:	aa 1f       	adc	r26, r26
    887c:	64 9f       	mul	r22, r20
    887e:	66 27       	eor	r22, r22
    8880:	b0 0d       	add	r27, r0
    8882:	a1 1d       	adc	r26, r1
    8884:	66 1f       	adc	r22, r22
    8886:	82 9f       	mul	r24, r18
    8888:	22 27       	eor	r18, r18
    888a:	b0 0d       	add	r27, r0
    888c:	a1 1d       	adc	r26, r1
    888e:	62 1f       	adc	r22, r18
    8890:	73 9f       	mul	r23, r19
    8892:	b0 0d       	add	r27, r0
    8894:	a1 1d       	adc	r26, r1
    8896:	62 1f       	adc	r22, r18
    8898:	83 9f       	mul	r24, r19
    889a:	a0 0d       	add	r26, r0
    889c:	61 1d       	adc	r22, r1
    889e:	22 1f       	adc	r18, r18
    88a0:	74 9f       	mul	r23, r20
    88a2:	33 27       	eor	r19, r19
    88a4:	a0 0d       	add	r26, r0
    88a6:	61 1d       	adc	r22, r1
    88a8:	23 1f       	adc	r18, r19
    88aa:	84 9f       	mul	r24, r20
    88ac:	60 0d       	add	r22, r0
    88ae:	21 1d       	adc	r18, r1
    88b0:	82 2f       	mov	r24, r18
    88b2:	76 2f       	mov	r23, r22
    88b4:	6a 2f       	mov	r22, r26
    88b6:	11 24       	eor	r1, r1
    88b8:	9f 57       	subi	r25, 0x7F	; 127
    88ba:	50 40       	sbci	r21, 0x00	; 0
    88bc:	8a f0       	brmi	.+34     	; 0x88e0 <__mulsf3_pse+0x84>
    88be:	e1 f0       	breq	.+56     	; 0x88f8 <__mulsf3_pse+0x9c>
    88c0:	88 23       	and	r24, r24
    88c2:	4a f0       	brmi	.+18     	; 0x88d6 <__mulsf3_pse+0x7a>
    88c4:	ee 0f       	add	r30, r30
    88c6:	ff 1f       	adc	r31, r31
    88c8:	bb 1f       	adc	r27, r27
    88ca:	66 1f       	adc	r22, r22
    88cc:	77 1f       	adc	r23, r23
    88ce:	88 1f       	adc	r24, r24
    88d0:	91 50       	subi	r25, 0x01	; 1
    88d2:	50 40       	sbci	r21, 0x00	; 0
    88d4:	a9 f7       	brne	.-22     	; 0x88c0 <__mulsf3_pse+0x64>
    88d6:	9e 3f       	cpi	r25, 0xFE	; 254
    88d8:	51 05       	cpc	r21, r1
    88da:	70 f0       	brcs	.+28     	; 0x88f8 <__mulsf3_pse+0x9c>
    88dc:	f0 cd       	rjmp	.-1056   	; 0x84be <__fp_inf>
    88de:	d8 ce       	rjmp	.-592    	; 0x8690 <__fp_szero>
    88e0:	5f 3f       	cpi	r21, 0xFF	; 255
    88e2:	ec f3       	brlt	.-6      	; 0x88de <__mulsf3_pse+0x82>
    88e4:	98 3e       	cpi	r25, 0xE8	; 232
    88e6:	dc f3       	brlt	.-10     	; 0x88de <__mulsf3_pse+0x82>
    88e8:	86 95       	lsr	r24
    88ea:	77 95       	ror	r23
    88ec:	67 95       	ror	r22
    88ee:	b7 95       	ror	r27
    88f0:	f7 95       	ror	r31
    88f2:	e7 95       	ror	r30
    88f4:	9f 5f       	subi	r25, 0xFF	; 255
    88f6:	c1 f7       	brne	.-16     	; 0x88e8 <__mulsf3_pse+0x8c>
    88f8:	fe 2b       	or	r31, r30
    88fa:	88 0f       	add	r24, r24
    88fc:	91 1d       	adc	r25, r1
    88fe:	96 95       	lsr	r25
    8900:	87 95       	ror	r24
    8902:	97 f9       	bld	r25, 7
    8904:	08 95       	ret

00008906 <sin>:
    8906:	9f 93       	push	r25
    8908:	40 de       	rcall	.-896    	; 0x858a <__fp_rempio2>
    890a:	0f 90       	pop	r0
    890c:	07 fc       	sbrc	r0, 7
    890e:	ee 5f       	subi	r30, 0xFE	; 254
    8910:	74 ce       	rjmp	.-792    	; 0x85fa <__fp_sinus>
    8912:	11 f4       	brne	.+4      	; 0x8918 <sin+0x12>
    8914:	0e f4       	brtc	.+2      	; 0x8918 <sin+0x12>
    8916:	02 ce       	rjmp	.-1020   	; 0x851c <__fp_nan>
    8918:	f3 cd       	rjmp	.-1050   	; 0x8500 <__fp_mpack>

0000891a <sqrt>:
    891a:	88 de       	rcall	.-752    	; 0x862c <__fp_splitA>
    891c:	d0 f3       	brcs	.-12     	; 0x8912 <sin+0xc>
    891e:	99 23       	and	r25, r25
    8920:	d9 f3       	breq	.-10     	; 0x8918 <sin+0x12>
    8922:	ce f3       	brts	.-14     	; 0x8916 <sin+0x10>
    8924:	9f 57       	subi	r25, 0x7F	; 127
    8926:	55 0b       	sbc	r21, r21
    8928:	87 ff       	sbrs	r24, 7
    892a:	43 d0       	rcall	.+134    	; 0x89b2 <__fp_norm2>
    892c:	00 24       	eor	r0, r0
    892e:	a0 e6       	ldi	r26, 0x60	; 96
    8930:	40 ea       	ldi	r20, 0xA0	; 160
    8932:	90 01       	movw	r18, r0
    8934:	80 58       	subi	r24, 0x80	; 128
    8936:	56 95       	lsr	r21
    8938:	97 95       	ror	r25
    893a:	28 f4       	brcc	.+10     	; 0x8946 <sqrt+0x2c>
    893c:	80 5c       	subi	r24, 0xC0	; 192
    893e:	66 0f       	add	r22, r22
    8940:	77 1f       	adc	r23, r23
    8942:	88 1f       	adc	r24, r24
    8944:	20 f0       	brcs	.+8      	; 0x894e <sqrt+0x34>
    8946:	26 17       	cp	r18, r22
    8948:	37 07       	cpc	r19, r23
    894a:	48 07       	cpc	r20, r24
    894c:	30 f4       	brcc	.+12     	; 0x895a <sqrt+0x40>
    894e:	62 1b       	sub	r22, r18
    8950:	73 0b       	sbc	r23, r19
    8952:	84 0b       	sbc	r24, r20
    8954:	20 29       	or	r18, r0
    8956:	31 29       	or	r19, r1
    8958:	4a 2b       	or	r20, r26
    895a:	a6 95       	lsr	r26
    895c:	17 94       	ror	r1
    895e:	07 94       	ror	r0
    8960:	20 25       	eor	r18, r0
    8962:	31 25       	eor	r19, r1
    8964:	4a 27       	eor	r20, r26
    8966:	58 f7       	brcc	.-42     	; 0x893e <sqrt+0x24>
    8968:	66 0f       	add	r22, r22
    896a:	77 1f       	adc	r23, r23
    896c:	88 1f       	adc	r24, r24
    896e:	20 f0       	brcs	.+8      	; 0x8978 <sqrt+0x5e>
    8970:	26 17       	cp	r18, r22
    8972:	37 07       	cpc	r19, r23
    8974:	48 07       	cpc	r20, r24
    8976:	30 f4       	brcc	.+12     	; 0x8984 <sqrt+0x6a>
    8978:	62 0b       	sbc	r22, r18
    897a:	73 0b       	sbc	r23, r19
    897c:	84 0b       	sbc	r24, r20
    897e:	20 0d       	add	r18, r0
    8980:	31 1d       	adc	r19, r1
    8982:	41 1d       	adc	r20, r1
    8984:	a0 95       	com	r26
    8986:	81 f7       	brne	.-32     	; 0x8968 <sqrt+0x4e>
    8988:	b9 01       	movw	r22, r18
    898a:	84 2f       	mov	r24, r20
    898c:	91 58       	subi	r25, 0x81	; 129
    898e:	88 0f       	add	r24, r24
    8990:	96 95       	lsr	r25
    8992:	87 95       	ror	r24
    8994:	08 95       	ret

00008996 <square>:
    8996:	9b 01       	movw	r18, r22
    8998:	ac 01       	movw	r20, r24
    899a:	52 cf       	rjmp	.-348    	; 0x8840 <__mulsf3>

0000899c <trunc>:
    899c:	61 de       	rcall	.-830    	; 0x8660 <__fp_trunc>
    899e:	20 f0       	brcs	.+8      	; 0x89a8 <trunc+0xc>
    89a0:	9f 37       	cpi	r25, 0x7F	; 127
    89a2:	08 f4       	brcc	.+2      	; 0x89a6 <trunc+0xa>
    89a4:	75 ce       	rjmp	.-790    	; 0x8690 <__fp_szero>
    89a6:	91 cd       	rjmp	.-1246   	; 0x84ca <__fp_mintl>
    89a8:	ab cd       	rjmp	.-1194   	; 0x8500 <__fp_mpack>

000089aa <__unordsf2>:
    89aa:	65 dd       	rcall	.-1334   	; 0x8476 <__fp_cmp>
    89ac:	88 0b       	sbc	r24, r24
    89ae:	99 0b       	sbc	r25, r25
    89b0:	08 95       	ret

000089b2 <__fp_norm2>:
    89b2:	91 50       	subi	r25, 0x01	; 1
    89b4:	50 40       	sbci	r21, 0x00	; 0
    89b6:	66 0f       	add	r22, r22
    89b8:	77 1f       	adc	r23, r23
    89ba:	88 1f       	adc	r24, r24
    89bc:	d2 f7       	brpl	.-12     	; 0x89b2 <__fp_norm2>
    89be:	08 95       	ret

000089c0 <__fp_powsodd>:
    89c0:	9f 93       	push	r25
    89c2:	8f 93       	push	r24
    89c4:	7f 93       	push	r23
    89c6:	6f 93       	push	r22
    89c8:	ff 93       	push	r31
    89ca:	ef 93       	push	r30
    89cc:	9b 01       	movw	r18, r22
    89ce:	ac 01       	movw	r20, r24
    89d0:	37 df       	rcall	.-402    	; 0x8840 <__mulsf3>
    89d2:	ef 91       	pop	r30
    89d4:	ff 91       	pop	r31
    89d6:	a5 dd       	rcall	.-1206   	; 0x8522 <__fp_powser>
    89d8:	2f 91       	pop	r18
    89da:	3f 91       	pop	r19
    89dc:	4f 91       	pop	r20
    89de:	5f 91       	pop	r21
    89e0:	2f cf       	rjmp	.-418    	; 0x8840 <__mulsf3>

000089e2 <__mulsi3>:
    89e2:	62 9f       	mul	r22, r18
    89e4:	d0 01       	movw	r26, r0
    89e6:	73 9f       	mul	r23, r19
    89e8:	f0 01       	movw	r30, r0
    89ea:	82 9f       	mul	r24, r18
    89ec:	e0 0d       	add	r30, r0
    89ee:	f1 1d       	adc	r31, r1
    89f0:	64 9f       	mul	r22, r20
    89f2:	e0 0d       	add	r30, r0
    89f4:	f1 1d       	adc	r31, r1
    89f6:	92 9f       	mul	r25, r18
    89f8:	f0 0d       	add	r31, r0
    89fa:	83 9f       	mul	r24, r19
    89fc:	f0 0d       	add	r31, r0
    89fe:	74 9f       	mul	r23, r20
    8a00:	f0 0d       	add	r31, r0
    8a02:	65 9f       	mul	r22, r21
    8a04:	f0 0d       	add	r31, r0
    8a06:	99 27       	eor	r25, r25
    8a08:	72 9f       	mul	r23, r18
    8a0a:	b0 0d       	add	r27, r0
    8a0c:	e1 1d       	adc	r30, r1
    8a0e:	f9 1f       	adc	r31, r25
    8a10:	63 9f       	mul	r22, r19
    8a12:	b0 0d       	add	r27, r0
    8a14:	e1 1d       	adc	r30, r1
    8a16:	f9 1f       	adc	r31, r25
    8a18:	bd 01       	movw	r22, r26
    8a1a:	cf 01       	movw	r24, r30
    8a1c:	11 24       	eor	r1, r1
    8a1e:	08 95       	ret

00008a20 <__udivmodsi4>:
    8a20:	a1 e2       	ldi	r26, 0x21	; 33
    8a22:	1a 2e       	mov	r1, r26
    8a24:	aa 1b       	sub	r26, r26
    8a26:	bb 1b       	sub	r27, r27
    8a28:	fd 01       	movw	r30, r26
    8a2a:	0d c0       	rjmp	.+26     	; 0x8a46 <__udivmodsi4_ep>

00008a2c <__udivmodsi4_loop>:
    8a2c:	aa 1f       	adc	r26, r26
    8a2e:	bb 1f       	adc	r27, r27
    8a30:	ee 1f       	adc	r30, r30
    8a32:	ff 1f       	adc	r31, r31
    8a34:	a2 17       	cp	r26, r18
    8a36:	b3 07       	cpc	r27, r19
    8a38:	e4 07       	cpc	r30, r20
    8a3a:	f5 07       	cpc	r31, r21
    8a3c:	20 f0       	brcs	.+8      	; 0x8a46 <__udivmodsi4_ep>
    8a3e:	a2 1b       	sub	r26, r18
    8a40:	b3 0b       	sbc	r27, r19
    8a42:	e4 0b       	sbc	r30, r20
    8a44:	f5 0b       	sbc	r31, r21

00008a46 <__udivmodsi4_ep>:
    8a46:	66 1f       	adc	r22, r22
    8a48:	77 1f       	adc	r23, r23
    8a4a:	88 1f       	adc	r24, r24
    8a4c:	99 1f       	adc	r25, r25
    8a4e:	1a 94       	dec	r1
    8a50:	69 f7       	brne	.-38     	; 0x8a2c <__udivmodsi4_loop>
    8a52:	60 95       	com	r22
    8a54:	70 95       	com	r23
    8a56:	80 95       	com	r24
    8a58:	90 95       	com	r25
    8a5a:	9b 01       	movw	r18, r22
    8a5c:	ac 01       	movw	r20, r24
    8a5e:	bd 01       	movw	r22, r26
    8a60:	cf 01       	movw	r24, r30
    8a62:	08 95       	ret

00008a64 <__prologue_saves__>:
    8a64:	2f 92       	push	r2
    8a66:	3f 92       	push	r3
    8a68:	4f 92       	push	r4
    8a6a:	5f 92       	push	r5
    8a6c:	6f 92       	push	r6
    8a6e:	7f 92       	push	r7
    8a70:	8f 92       	push	r8
    8a72:	9f 92       	push	r9
    8a74:	af 92       	push	r10
    8a76:	bf 92       	push	r11
    8a78:	cf 92       	push	r12
    8a7a:	df 92       	push	r13
    8a7c:	ef 92       	push	r14
    8a7e:	ff 92       	push	r15
    8a80:	0f 93       	push	r16
    8a82:	1f 93       	push	r17
    8a84:	cf 93       	push	r28
    8a86:	df 93       	push	r29
    8a88:	cd b7       	in	r28, 0x3d	; 61
    8a8a:	de b7       	in	r29, 0x3e	; 62
    8a8c:	ca 1b       	sub	r28, r26
    8a8e:	db 0b       	sbc	r29, r27
    8a90:	0f b6       	in	r0, 0x3f	; 63
    8a92:	f8 94       	cli
    8a94:	de bf       	out	0x3e, r29	; 62
    8a96:	0f be       	out	0x3f, r0	; 63
    8a98:	cd bf       	out	0x3d, r28	; 61
    8a9a:	19 94       	eijmp

00008a9c <__epilogue_restores__>:
    8a9c:	2a 88       	ldd	r2, Y+18	; 0x12
    8a9e:	39 88       	ldd	r3, Y+17	; 0x11
    8aa0:	48 88       	ldd	r4, Y+16	; 0x10
    8aa2:	5f 84       	ldd	r5, Y+15	; 0x0f
    8aa4:	6e 84       	ldd	r6, Y+14	; 0x0e
    8aa6:	7d 84       	ldd	r7, Y+13	; 0x0d
    8aa8:	8c 84       	ldd	r8, Y+12	; 0x0c
    8aaa:	9b 84       	ldd	r9, Y+11	; 0x0b
    8aac:	aa 84       	ldd	r10, Y+10	; 0x0a
    8aae:	b9 84       	ldd	r11, Y+9	; 0x09
    8ab0:	c8 84       	ldd	r12, Y+8	; 0x08
    8ab2:	df 80       	ldd	r13, Y+7	; 0x07
    8ab4:	ee 80       	ldd	r14, Y+6	; 0x06
    8ab6:	fd 80       	ldd	r15, Y+5	; 0x05
    8ab8:	0c 81       	ldd	r16, Y+4	; 0x04
    8aba:	1b 81       	ldd	r17, Y+3	; 0x03
    8abc:	aa 81       	ldd	r26, Y+2	; 0x02
    8abe:	b9 81       	ldd	r27, Y+1	; 0x01
    8ac0:	ce 0f       	add	r28, r30
    8ac2:	d1 1d       	adc	r29, r1
    8ac4:	0f b6       	in	r0, 0x3f	; 63
    8ac6:	f8 94       	cli
    8ac8:	de bf       	out	0x3e, r29	; 62
    8aca:	0f be       	out	0x3f, r0	; 63
    8acc:	cd bf       	out	0x3d, r28	; 61
    8ace:	ed 01       	movw	r28, r26
    8ad0:	08 95       	ret

00008ad2 <strtod>:
    8ad2:	8f 92       	push	r8
    8ad4:	9f 92       	push	r9
    8ad6:	af 92       	push	r10
    8ad8:	bf 92       	push	r11
    8ada:	cf 92       	push	r12
    8adc:	df 92       	push	r13
    8ade:	ef 92       	push	r14
    8ae0:	ff 92       	push	r15
    8ae2:	0f 93       	push	r16
    8ae4:	1f 93       	push	r17
    8ae6:	cf 93       	push	r28
    8ae8:	df 93       	push	r29
    8aea:	ec 01       	movw	r28, r24
    8aec:	5b 01       	movw	r10, r22
    8aee:	61 15       	cp	r22, r1
    8af0:	71 05       	cpc	r23, r1
    8af2:	19 f0       	breq	.+6      	; 0x8afa <strtod+0x28>
    8af4:	fb 01       	movw	r30, r22
    8af6:	80 83       	st	Z, r24
    8af8:	91 83       	std	Z+1, r25	; 0x01
    8afa:	f9 90       	ld	r15, Y+
    8afc:	8f 2d       	mov	r24, r15
    8afe:	90 e0       	ldi	r25, 0x00	; 0
    8b00:	0e 94 cd 47 	call	0x8f9a	; 0x8f9a <isspace>
    8b04:	89 2b       	or	r24, r25
    8b06:	c9 f7       	brne	.-14     	; 0x8afa <strtod+0x28>
    8b08:	fd e2       	ldi	r31, 0x2D	; 45
    8b0a:	ff 16       	cp	r15, r31
    8b0c:	21 f4       	brne	.+8      	; 0x8b16 <strtod+0x44>
    8b0e:	f9 90       	ld	r15, Y+
    8b10:	ee 24       	eor	r14, r14
    8b12:	e3 94       	inc	r14
    8b14:	05 c0       	rjmp	.+10     	; 0x8b20 <strtod+0x4e>
    8b16:	2b e2       	ldi	r18, 0x2B	; 43
    8b18:	f2 16       	cp	r15, r18
    8b1a:	09 f4       	brne	.+2      	; 0x8b1e <strtod+0x4c>
    8b1c:	f9 90       	ld	r15, Y+
    8b1e:	ee 24       	eor	r14, r14
    8b20:	8e 01       	movw	r16, r28
    8b22:	01 50       	subi	r16, 0x01	; 1
    8b24:	10 40       	sbci	r17, 0x00	; 0
    8b26:	c8 01       	movw	r24, r16
    8b28:	6b ed       	ldi	r22, 0xDB	; 219
    8b2a:	7c e1       	ldi	r23, 0x1C	; 28
    8b2c:	43 e0       	ldi	r20, 0x03	; 3
    8b2e:	50 e0       	ldi	r21, 0x00	; 0
    8b30:	0e 94 dd 47 	call	0x8fba	; 0x8fba <strncasecmp_P>
    8b34:	89 2b       	or	r24, r25
    8b36:	01 f5       	brne	.+64     	; 0x8b78 <strtod+0xa6>
    8b38:	8e 01       	movw	r16, r28
    8b3a:	0e 5f       	subi	r16, 0xFE	; 254
    8b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    8b3e:	c8 01       	movw	r24, r16
    8b40:	6e ed       	ldi	r22, 0xDE	; 222
    8b42:	7c e1       	ldi	r23, 0x1C	; 28
    8b44:	45 e0       	ldi	r20, 0x05	; 5
    8b46:	50 e0       	ldi	r21, 0x00	; 0
    8b48:	0e 94 dd 47 	call	0x8fba	; 0x8fba <strncasecmp_P>
    8b4c:	89 2b       	or	r24, r25
    8b4e:	19 f4       	brne	.+6      	; 0x8b56 <strtod+0x84>
    8b50:	8e 01       	movw	r16, r28
    8b52:	09 5f       	subi	r16, 0xF9	; 249
    8b54:	1f 4f       	sbci	r17, 0xFF	; 255
    8b56:	a1 14       	cp	r10, r1
    8b58:	b1 04       	cpc	r11, r1
    8b5a:	19 f0       	breq	.+6      	; 0x8b62 <strtod+0x90>
    8b5c:	f5 01       	movw	r30, r10
    8b5e:	00 83       	st	Z, r16
    8b60:	11 83       	std	Z+1, r17	; 0x01
    8b62:	e0 fc       	sbrc	r14, 0
    8b64:	04 c0       	rjmp	.+8      	; 0x8b6e <strtod+0x9c>
    8b66:	70 e0       	ldi	r23, 0x00	; 0
    8b68:	90 e0       	ldi	r25, 0x00	; 0
    8b6a:	80 e8       	ldi	r24, 0x80	; 128
    8b6c:	14 c0       	rjmp	.+40     	; 0x8b96 <strtod+0xc4>
    8b6e:	70 e0       	ldi	r23, 0x00	; 0
    8b70:	90 e0       	ldi	r25, 0x00	; 0
    8b72:	80 e8       	ldi	r24, 0x80	; 128
    8b74:	6f ef       	ldi	r22, 0xFF	; 255
    8b76:	08 c1       	rjmp	.+528    	; 0x8d88 <strtod+0x2b6>
    8b78:	c8 01       	movw	r24, r16
    8b7a:	63 ee       	ldi	r22, 0xE3	; 227
    8b7c:	7c e1       	ldi	r23, 0x1C	; 28
    8b7e:	43 e0       	ldi	r20, 0x03	; 3
    8b80:	50 e0       	ldi	r21, 0x00	; 0
    8b82:	0e 94 dd 47 	call	0x8fba	; 0x8fba <strncasecmp_P>
    8b86:	89 2b       	or	r24, r25
    8b88:	69 f4       	brne	.+26     	; 0x8ba4 <strtod+0xd2>
    8b8a:	a1 14       	cp	r10, r1
    8b8c:	b1 04       	cpc	r11, r1
    8b8e:	29 f4       	brne	.+10     	; 0x8b9a <strtod+0xc8>
    8b90:	70 e0       	ldi	r23, 0x00	; 0
    8b92:	90 e0       	ldi	r25, 0x00	; 0
    8b94:	80 ec       	ldi	r24, 0xC0	; 192
    8b96:	6f e7       	ldi	r22, 0x7F	; 127
    8b98:	f7 c0       	rjmp	.+494    	; 0x8d88 <strtod+0x2b6>
    8b9a:	22 96       	adiw	r28, 0x02	; 2
    8b9c:	f5 01       	movw	r30, r10
    8b9e:	c0 83       	st	Z, r28
    8ba0:	d1 83       	std	Z+1, r29	; 0x01
    8ba2:	f6 cf       	rjmp	.-20     	; 0x8b90 <strtod+0xbe>
    8ba4:	88 24       	eor	r8, r8
    8ba6:	99 24       	eor	r9, r9
    8ba8:	40 e0       	ldi	r20, 0x00	; 0
    8baa:	50 e0       	ldi	r21, 0x00	; 0
    8bac:	60 e0       	ldi	r22, 0x00	; 0
    8bae:	70 e0       	ldi	r23, 0x00	; 0
    8bb0:	ef 2d       	mov	r30, r15
    8bb2:	e0 53       	subi	r30, 0x30	; 48
    8bb4:	ea 30       	cpi	r30, 0x0A	; 10
    8bb6:	a0 f5       	brcc	.+104    	; 0x8c20 <strtod+0x14e>
    8bb8:	f2 e0       	ldi	r31, 0x02	; 2
    8bba:	ef 2a       	or	r14, r31
    8bbc:	8e 2d       	mov	r24, r14
    8bbe:	90 e0       	ldi	r25, 0x00	; 0
    8bc0:	9c 01       	movw	r18, r24
    8bc2:	28 70       	andi	r18, 0x08	; 8
    8bc4:	30 70       	andi	r19, 0x00	; 0
    8bc6:	e2 fe       	sbrs	r14, 2
    8bc8:	06 c0       	rjmp	.+12     	; 0x8bd6 <strtod+0x104>
    8bca:	23 2b       	or	r18, r19
    8bcc:	79 f5       	brne	.+94     	; 0x8c2c <strtod+0x15a>
    8bce:	08 94       	sec
    8bd0:	81 1c       	adc	r8, r1
    8bd2:	91 1c       	adc	r9, r1
    8bd4:	2b c0       	rjmp	.+86     	; 0x8c2c <strtod+0x15a>
    8bd6:	23 2b       	or	r18, r19
    8bd8:	19 f0       	breq	.+6      	; 0x8be0 <strtod+0x10e>
    8bda:	08 94       	sec
    8bdc:	81 08       	sbc	r8, r1
    8bde:	91 08       	sbc	r9, r1
    8be0:	db 01       	movw	r26, r22
    8be2:	ca 01       	movw	r24, r20
    8be4:	12 e0       	ldi	r17, 0x02	; 2
    8be6:	88 0f       	add	r24, r24
    8be8:	99 1f       	adc	r25, r25
    8bea:	aa 1f       	adc	r26, r26
    8bec:	bb 1f       	adc	r27, r27
    8bee:	1a 95       	dec	r17
    8bf0:	d1 f7       	brne	.-12     	; 0x8be6 <strtod+0x114>
    8bf2:	48 0f       	add	r20, r24
    8bf4:	59 1f       	adc	r21, r25
    8bf6:	6a 1f       	adc	r22, r26
    8bf8:	7b 1f       	adc	r23, r27
    8bfa:	44 0f       	add	r20, r20
    8bfc:	55 1f       	adc	r21, r21
    8bfe:	66 1f       	adc	r22, r22
    8c00:	77 1f       	adc	r23, r23
    8c02:	4e 0f       	add	r20, r30
    8c04:	51 1d       	adc	r21, r1
    8c06:	61 1d       	adc	r22, r1
    8c08:	71 1d       	adc	r23, r1
    8c0a:	48 39       	cpi	r20, 0x98	; 152
    8c0c:	29 e9       	ldi	r18, 0x99	; 153
    8c0e:	52 07       	cpc	r21, r18
    8c10:	29 e9       	ldi	r18, 0x99	; 153
    8c12:	62 07       	cpc	r22, r18
    8c14:	29 e1       	ldi	r18, 0x19	; 25
    8c16:	72 07       	cpc	r23, r18
    8c18:	48 f0       	brcs	.+18     	; 0x8c2c <strtod+0x15a>
    8c1a:	84 e0       	ldi	r24, 0x04	; 4
    8c1c:	e8 2a       	or	r14, r24
    8c1e:	06 c0       	rjmp	.+12     	; 0x8c2c <strtod+0x15a>
    8c20:	ee 3f       	cpi	r30, 0xFE	; 254
    8c22:	31 f4       	brne	.+12     	; 0x8c30 <strtod+0x15e>
    8c24:	e3 fc       	sbrc	r14, 3
    8c26:	39 c0       	rjmp	.+114    	; 0x8c9a <strtod+0x1c8>
    8c28:	98 e0       	ldi	r25, 0x08	; 8
    8c2a:	e9 2a       	or	r14, r25
    8c2c:	f9 90       	ld	r15, Y+
    8c2e:	c0 cf       	rjmp	.-128    	; 0x8bb0 <strtod+0xde>
    8c30:	e5 33       	cpi	r30, 0x35	; 53
    8c32:	11 f0       	breq	.+4      	; 0x8c38 <strtod+0x166>
    8c34:	e5 31       	cpi	r30, 0x15	; 21
    8c36:	89 f5       	brne	.+98     	; 0x8c9a <strtod+0x1c8>
    8c38:	29 91       	ld	r18, Y+
    8c3a:	2d 32       	cpi	r18, 0x2D	; 45
    8c3c:	19 f4       	brne	.+6      	; 0x8c44 <strtod+0x172>
    8c3e:	e0 e1       	ldi	r30, 0x10	; 16
    8c40:	ee 2a       	or	r14, r30
    8c42:	05 c0       	rjmp	.+10     	; 0x8c4e <strtod+0x17c>
    8c44:	2b 32       	cpi	r18, 0x2B	; 43
    8c46:	19 f0       	breq	.+6      	; 0x8c4e <strtod+0x17c>
    8c48:	81 e0       	ldi	r24, 0x01	; 1
    8c4a:	90 e0       	ldi	r25, 0x00	; 0
    8c4c:	03 c0       	rjmp	.+6      	; 0x8c54 <strtod+0x182>
    8c4e:	29 91       	ld	r18, Y+
    8c50:	82 e0       	ldi	r24, 0x02	; 2
    8c52:	90 e0       	ldi	r25, 0x00	; 0
    8c54:	e2 2f       	mov	r30, r18
    8c56:	e0 53       	subi	r30, 0x30	; 48
    8c58:	ea 30       	cpi	r30, 0x0A	; 10
    8c5a:	18 f0       	brcs	.+6      	; 0x8c62 <strtod+0x190>
    8c5c:	c8 1b       	sub	r28, r24
    8c5e:	d9 0b       	sbc	r29, r25
    8c60:	1c c0       	rjmp	.+56     	; 0x8c9a <strtod+0x1c8>
    8c62:	20 e0       	ldi	r18, 0x00	; 0
    8c64:	30 e0       	ldi	r19, 0x00	; 0
    8c66:	fc e0       	ldi	r31, 0x0C	; 12
    8c68:	20 38       	cpi	r18, 0x80	; 128
    8c6a:	3f 07       	cpc	r19, r31
    8c6c:	5c f4       	brge	.+22     	; 0x8c84 <strtod+0x1b2>
    8c6e:	c9 01       	movw	r24, r18
    8c70:	88 0f       	add	r24, r24
    8c72:	99 1f       	adc	r25, r25
    8c74:	88 0f       	add	r24, r24
    8c76:	99 1f       	adc	r25, r25
    8c78:	28 0f       	add	r18, r24
    8c7a:	39 1f       	adc	r19, r25
    8c7c:	22 0f       	add	r18, r18
    8c7e:	33 1f       	adc	r19, r19
    8c80:	2e 0f       	add	r18, r30
    8c82:	31 1d       	adc	r19, r1
    8c84:	e9 91       	ld	r30, Y+
    8c86:	e0 53       	subi	r30, 0x30	; 48
    8c88:	ea 30       	cpi	r30, 0x0A	; 10
    8c8a:	68 f3       	brcs	.-38     	; 0x8c66 <strtod+0x194>
    8c8c:	e4 fe       	sbrs	r14, 4
    8c8e:	03 c0       	rjmp	.+6      	; 0x8c96 <strtod+0x1c4>
    8c90:	30 95       	com	r19
    8c92:	21 95       	neg	r18
    8c94:	3f 4f       	sbci	r19, 0xFF	; 255
    8c96:	82 0e       	add	r8, r18
    8c98:	93 1e       	adc	r9, r19
    8c9a:	ce 2c       	mov	r12, r14
    8c9c:	dd 24       	eor	r13, r13
    8c9e:	e1 fe       	sbrs	r14, 1
    8ca0:	07 c0       	rjmp	.+14     	; 0x8cb0 <strtod+0x1de>
    8ca2:	a1 14       	cp	r10, r1
    8ca4:	b1 04       	cpc	r11, r1
    8ca6:	21 f0       	breq	.+8      	; 0x8cb0 <strtod+0x1de>
    8ca8:	21 97       	sbiw	r28, 0x01	; 1
    8caa:	f5 01       	movw	r30, r10
    8cac:	c0 83       	st	Z, r28
    8cae:	d1 83       	std	Z+1, r29	; 0x01
    8cb0:	cb 01       	movw	r24, r22
    8cb2:	ba 01       	movw	r22, r20
    8cb4:	0e 94 fe 41 	call	0x83fc	; 0x83fc <__floatunsisf>
    8cb8:	7b 01       	movw	r14, r22
    8cba:	8c 01       	movw	r16, r24
    8cbc:	f3 e0       	ldi	r31, 0x03	; 3
    8cbe:	cf 22       	and	r12, r31
    8cc0:	dd 24       	eor	r13, r13
    8cc2:	23 e0       	ldi	r18, 0x03	; 3
    8cc4:	c2 16       	cp	r12, r18
    8cc6:	d1 04       	cpc	r13, r1
    8cc8:	21 f4       	brne	.+8      	; 0x8cd2 <strtod+0x200>
    8cca:	17 fb       	bst	r17, 7
    8ccc:	10 95       	com	r17
    8cce:	17 f9       	bld	r17, 7
    8cd0:	10 95       	com	r17
    8cd2:	57 01       	movw	r10, r14
    8cd4:	68 01       	movw	r12, r16
    8cd6:	c8 01       	movw	r24, r16
    8cd8:	b7 01       	movw	r22, r14
    8cda:	20 e0       	ldi	r18, 0x00	; 0
    8cdc:	30 e0       	ldi	r19, 0x00	; 0
    8cde:	40 e0       	ldi	r20, 0x00	; 0
    8ce0:	50 e0       	ldi	r21, 0x00	; 0
    8ce2:	0e 94 5e 41 	call	0x82bc	; 0x82bc <__cmpsf2>
    8ce6:	88 23       	and	r24, r24
    8ce8:	09 f4       	brne	.+2      	; 0x8cec <strtod+0x21a>
    8cea:	4a c0       	rjmp	.+148    	; 0x8d80 <strtod+0x2ae>
    8cec:	97 fe       	sbrs	r9, 7
    8cee:	0d c0       	rjmp	.+26     	; 0x8d0a <strtod+0x238>
    8cf0:	2a ef       	ldi	r18, 0xFA	; 250
    8cf2:	e2 2e       	mov	r14, r18
    8cf4:	2c e1       	ldi	r18, 0x1C	; 28
    8cf6:	f2 2e       	mov	r15, r18
    8cf8:	90 94       	com	r9
    8cfa:	81 94       	neg	r8
    8cfc:	91 08       	sbc	r9, r1
    8cfe:	93 94       	inc	r9
    8d00:	c0 e2       	ldi	r28, 0x20	; 32
    8d02:	d0 e0       	ldi	r29, 0x00	; 0
    8d04:	00 e0       	ldi	r16, 0x00	; 0
    8d06:	10 e0       	ldi	r17, 0x00	; 0
    8d08:	12 c0       	rjmp	.+36     	; 0x8d2e <strtod+0x25c>
    8d0a:	92 e1       	ldi	r25, 0x12	; 18
    8d0c:	e9 2e       	mov	r14, r25
    8d0e:	9d e1       	ldi	r25, 0x1D	; 29
    8d10:	f9 2e       	mov	r15, r25
    8d12:	f6 cf       	rjmp	.-20     	; 0x8d00 <strtod+0x22e>
    8d14:	f7 01       	movw	r30, r14
    8d16:	25 91       	lpm	r18, Z+
    8d18:	35 91       	lpm	r19, Z+
    8d1a:	45 91       	lpm	r20, Z+
    8d1c:	54 91       	lpm	r21, Z+
    8d1e:	c6 01       	movw	r24, r12
    8d20:	b5 01       	movw	r22, r10
    8d22:	0e 94 20 44 	call	0x8840	; 0x8840 <__mulsf3>
    8d26:	5b 01       	movw	r10, r22
    8d28:	6c 01       	movw	r12, r24
    8d2a:	8c 1a       	sub	r8, r28
    8d2c:	9d 0a       	sbc	r9, r29
    8d2e:	8c 16       	cp	r8, r28
    8d30:	9d 06       	cpc	r9, r29
    8d32:	84 f7       	brge	.-32     	; 0x8d14 <strtod+0x242>
    8d34:	d5 95       	asr	r29
    8d36:	c7 95       	ror	r28
    8d38:	0f 5f       	subi	r16, 0xFF	; 255
    8d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    8d3c:	06 30       	cpi	r16, 0x06	; 6
    8d3e:	11 05       	cpc	r17, r1
    8d40:	29 f0       	breq	.+10     	; 0x8d4c <strtod+0x27a>
    8d42:	8c ef       	ldi	r24, 0xFC	; 252
    8d44:	9f ef       	ldi	r25, 0xFF	; 255
    8d46:	e8 0e       	add	r14, r24
    8d48:	f9 1e       	adc	r15, r25
    8d4a:	f1 cf       	rjmp	.-30     	; 0x8d2e <strtod+0x25c>
    8d4c:	c5 01       	movw	r24, r10
    8d4e:	d6 01       	movw	r26, r12
    8d50:	7c 01       	movw	r14, r24
    8d52:	8d 01       	movw	r16, r26
    8d54:	8c 2d       	mov	r24, r12
    8d56:	88 0f       	add	r24, r24
    8d58:	8d 2d       	mov	r24, r13
    8d5a:	88 1f       	adc	r24, r24
    8d5c:	8f 3f       	cpi	r24, 0xFF	; 255
    8d5e:	51 f0       	breq	.+20     	; 0x8d74 <strtod+0x2a2>
    8d60:	c6 01       	movw	r24, r12
    8d62:	b5 01       	movw	r22, r10
    8d64:	20 e0       	ldi	r18, 0x00	; 0
    8d66:	30 e0       	ldi	r19, 0x00	; 0
    8d68:	40 e0       	ldi	r20, 0x00	; 0
    8d6a:	50 e0       	ldi	r21, 0x00	; 0
    8d6c:	0e 94 5e 41 	call	0x82bc	; 0x82bc <__cmpsf2>
    8d70:	88 23       	and	r24, r24
    8d72:	31 f4       	brne	.+12     	; 0x8d80 <strtod+0x2ae>
    8d74:	82 e2       	ldi	r24, 0x22	; 34
    8d76:	90 e0       	ldi	r25, 0x00	; 0
    8d78:	80 93 06 25 	sts	0x2506, r24
    8d7c:	90 93 07 25 	sts	0x2507, r25
    8d80:	7e 2d       	mov	r23, r14
    8d82:	9f 2d       	mov	r25, r15
    8d84:	80 2f       	mov	r24, r16
    8d86:	61 2f       	mov	r22, r17
    8d88:	27 2f       	mov	r18, r23
    8d8a:	39 2f       	mov	r19, r25
    8d8c:	48 2f       	mov	r20, r24
    8d8e:	56 2f       	mov	r21, r22
    8d90:	b9 01       	movw	r22, r18
    8d92:	ca 01       	movw	r24, r20
    8d94:	df 91       	pop	r29
    8d96:	cf 91       	pop	r28
    8d98:	1f 91       	pop	r17
    8d9a:	0f 91       	pop	r16
    8d9c:	ff 90       	pop	r15
    8d9e:	ef 90       	pop	r14
    8da0:	df 90       	pop	r13
    8da2:	cf 90       	pop	r12
    8da4:	bf 90       	pop	r11
    8da6:	af 90       	pop	r10
    8da8:	9f 90       	pop	r9
    8daa:	8f 90       	pop	r8
    8dac:	08 95       	ret

00008dae <atoi>:
    8dae:	fc 01       	movw	r30, r24
    8db0:	88 27       	eor	r24, r24
    8db2:	99 27       	eor	r25, r25
    8db4:	e8 94       	clt
    8db6:	21 91       	ld	r18, Z+
    8db8:	20 32       	cpi	r18, 0x20	; 32
    8dba:	e9 f3       	breq	.-6      	; 0x8db6 <atoi+0x8>
    8dbc:	29 30       	cpi	r18, 0x09	; 9
    8dbe:	10 f0       	brcs	.+4      	; 0x8dc4 <atoi+0x16>
    8dc0:	2e 30       	cpi	r18, 0x0E	; 14
    8dc2:	c8 f3       	brcs	.-14     	; 0x8db6 <atoi+0x8>
    8dc4:	2b 32       	cpi	r18, 0x2B	; 43
    8dc6:	41 f0       	breq	.+16     	; 0x8dd8 <atoi+0x2a>
    8dc8:	2d 32       	cpi	r18, 0x2D	; 45
    8dca:	39 f4       	brne	.+14     	; 0x8dda <atoi+0x2c>
    8dcc:	68 94       	set
    8dce:	04 c0       	rjmp	.+8      	; 0x8dd8 <atoi+0x2a>
    8dd0:	0e 94 0b 48 	call	0x9016	; 0x9016 <__mulhi_const_10>
    8dd4:	82 0f       	add	r24, r18
    8dd6:	91 1d       	adc	r25, r1
    8dd8:	21 91       	ld	r18, Z+
    8dda:	20 53       	subi	r18, 0x30	; 48
    8ddc:	2a 30       	cpi	r18, 0x0A	; 10
    8dde:	c0 f3       	brcs	.-16     	; 0x8dd0 <atoi+0x22>
    8de0:	1e f4       	brtc	.+6      	; 0x8de8 <atoi+0x3a>
    8de2:	90 95       	com	r25
    8de4:	81 95       	neg	r24
    8de6:	9f 4f       	sbci	r25, 0xFF	; 255
    8de8:	08 95       	ret

00008dea <__ftoa_engine>:
    8dea:	28 30       	cpi	r18, 0x08	; 8
    8dec:	08 f0       	brcs	.+2      	; 0x8df0 <__ftoa_engine+0x6>
    8dee:	27 e0       	ldi	r18, 0x07	; 7
    8df0:	33 27       	eor	r19, r19
    8df2:	da 01       	movw	r26, r20
    8df4:	99 0f       	add	r25, r25
    8df6:	31 1d       	adc	r19, r1
    8df8:	87 fd       	sbrc	r24, 7
    8dfa:	91 60       	ori	r25, 0x01	; 1
    8dfc:	00 96       	adiw	r24, 0x00	; 0
    8dfe:	61 05       	cpc	r22, r1
    8e00:	71 05       	cpc	r23, r1
    8e02:	39 f4       	brne	.+14     	; 0x8e12 <__ftoa_engine+0x28>
    8e04:	32 60       	ori	r19, 0x02	; 2
    8e06:	2e 5f       	subi	r18, 0xFE	; 254
    8e08:	3d 93       	st	X+, r19
    8e0a:	30 e3       	ldi	r19, 0x30	; 48
    8e0c:	2a 95       	dec	r18
    8e0e:	e1 f7       	brne	.-8      	; 0x8e08 <__ftoa_engine+0x1e>
    8e10:	08 95       	ret
    8e12:	9f 3f       	cpi	r25, 0xFF	; 255
    8e14:	30 f0       	brcs	.+12     	; 0x8e22 <__ftoa_engine+0x38>
    8e16:	80 38       	cpi	r24, 0x80	; 128
    8e18:	71 05       	cpc	r23, r1
    8e1a:	61 05       	cpc	r22, r1
    8e1c:	09 f0       	breq	.+2      	; 0x8e20 <__ftoa_engine+0x36>
    8e1e:	3c 5f       	subi	r19, 0xFC	; 252
    8e20:	3c 5f       	subi	r19, 0xFC	; 252
    8e22:	3d 93       	st	X+, r19
    8e24:	91 30       	cpi	r25, 0x01	; 1
    8e26:	08 f0       	brcs	.+2      	; 0x8e2a <__ftoa_engine+0x40>
    8e28:	80 68       	ori	r24, 0x80	; 128
    8e2a:	91 1d       	adc	r25, r1
    8e2c:	df 93       	push	r29
    8e2e:	cf 93       	push	r28
    8e30:	1f 93       	push	r17
    8e32:	0f 93       	push	r16
    8e34:	ff 92       	push	r15
    8e36:	ef 92       	push	r14
    8e38:	19 2f       	mov	r17, r25
    8e3a:	98 7f       	andi	r25, 0xF8	; 248
    8e3c:	96 95       	lsr	r25
    8e3e:	e9 2f       	mov	r30, r25
    8e40:	96 95       	lsr	r25
    8e42:	96 95       	lsr	r25
    8e44:	e9 0f       	add	r30, r25
    8e46:	ff 27       	eor	r31, r31
    8e48:	e0 59       	subi	r30, 0x90	; 144
    8e4a:	f2 4e       	sbci	r31, 0xE2	; 226
    8e4c:	99 27       	eor	r25, r25
    8e4e:	33 27       	eor	r19, r19
    8e50:	ee 24       	eor	r14, r14
    8e52:	ff 24       	eor	r15, r15
    8e54:	a7 01       	movw	r20, r14
    8e56:	e7 01       	movw	r28, r14
    8e58:	05 90       	lpm	r0, Z+
    8e5a:	08 94       	sec
    8e5c:	07 94       	ror	r0
    8e5e:	28 f4       	brcc	.+10     	; 0x8e6a <__ftoa_engine+0x80>
    8e60:	36 0f       	add	r19, r22
    8e62:	e7 1e       	adc	r14, r23
    8e64:	f8 1e       	adc	r15, r24
    8e66:	49 1f       	adc	r20, r25
    8e68:	51 1d       	adc	r21, r1
    8e6a:	66 0f       	add	r22, r22
    8e6c:	77 1f       	adc	r23, r23
    8e6e:	88 1f       	adc	r24, r24
    8e70:	99 1f       	adc	r25, r25
    8e72:	06 94       	lsr	r0
    8e74:	a1 f7       	brne	.-24     	; 0x8e5e <__ftoa_engine+0x74>
    8e76:	05 90       	lpm	r0, Z+
    8e78:	07 94       	ror	r0
    8e7a:	28 f4       	brcc	.+10     	; 0x8e86 <__ftoa_engine+0x9c>
    8e7c:	e7 0e       	add	r14, r23
    8e7e:	f8 1e       	adc	r15, r24
    8e80:	49 1f       	adc	r20, r25
    8e82:	56 1f       	adc	r21, r22
    8e84:	c1 1d       	adc	r28, r1
    8e86:	77 0f       	add	r23, r23
    8e88:	88 1f       	adc	r24, r24
    8e8a:	99 1f       	adc	r25, r25
    8e8c:	66 1f       	adc	r22, r22
    8e8e:	06 94       	lsr	r0
    8e90:	a1 f7       	brne	.-24     	; 0x8e7a <__ftoa_engine+0x90>
    8e92:	05 90       	lpm	r0, Z+
    8e94:	07 94       	ror	r0
    8e96:	28 f4       	brcc	.+10     	; 0x8ea2 <__ftoa_engine+0xb8>
    8e98:	f8 0e       	add	r15, r24
    8e9a:	49 1f       	adc	r20, r25
    8e9c:	56 1f       	adc	r21, r22
    8e9e:	c7 1f       	adc	r28, r23
    8ea0:	d1 1d       	adc	r29, r1
    8ea2:	88 0f       	add	r24, r24
    8ea4:	99 1f       	adc	r25, r25
    8ea6:	66 1f       	adc	r22, r22
    8ea8:	77 1f       	adc	r23, r23
    8eaa:	06 94       	lsr	r0
    8eac:	a1 f7       	brne	.-24     	; 0x8e96 <__ftoa_engine+0xac>
    8eae:	05 90       	lpm	r0, Z+
    8eb0:	07 94       	ror	r0
    8eb2:	20 f4       	brcc	.+8      	; 0x8ebc <__ftoa_engine+0xd2>
    8eb4:	49 0f       	add	r20, r25
    8eb6:	56 1f       	adc	r21, r22
    8eb8:	c7 1f       	adc	r28, r23
    8eba:	d8 1f       	adc	r29, r24
    8ebc:	99 0f       	add	r25, r25
    8ebe:	66 1f       	adc	r22, r22
    8ec0:	77 1f       	adc	r23, r23
    8ec2:	88 1f       	adc	r24, r24
    8ec4:	06 94       	lsr	r0
    8ec6:	a9 f7       	brne	.-22     	; 0x8eb2 <__ftoa_engine+0xc8>
    8ec8:	84 91       	lpm	r24, Z+
    8eca:	10 95       	com	r17
    8ecc:	17 70       	andi	r17, 0x07	; 7
    8ece:	41 f0       	breq	.+16     	; 0x8ee0 <__ftoa_engine+0xf6>
    8ed0:	d6 95       	lsr	r29
    8ed2:	c7 95       	ror	r28
    8ed4:	57 95       	ror	r21
    8ed6:	47 95       	ror	r20
    8ed8:	f7 94       	ror	r15
    8eda:	e7 94       	ror	r14
    8edc:	1a 95       	dec	r17
    8ede:	c1 f7       	brne	.-16     	; 0x8ed0 <__ftoa_engine+0xe6>
    8ee0:	e6 e1       	ldi	r30, 0x16	; 22
    8ee2:	fd e1       	ldi	r31, 0x1D	; 29
    8ee4:	68 94       	set
    8ee6:	15 90       	lpm	r1, Z+
    8ee8:	15 91       	lpm	r17, Z+
    8eea:	35 91       	lpm	r19, Z+
    8eec:	65 91       	lpm	r22, Z+
    8eee:	95 91       	lpm	r25, Z+
    8ef0:	05 90       	lpm	r0, Z+
    8ef2:	7f e2       	ldi	r23, 0x2F	; 47
    8ef4:	73 95       	inc	r23
    8ef6:	e1 18       	sub	r14, r1
    8ef8:	f1 0a       	sbc	r15, r17
    8efa:	43 0b       	sbc	r20, r19
    8efc:	56 0b       	sbc	r21, r22
    8efe:	c9 0b       	sbc	r28, r25
    8f00:	d0 09       	sbc	r29, r0
    8f02:	c0 f7       	brcc	.-16     	; 0x8ef4 <__ftoa_engine+0x10a>
    8f04:	e1 0c       	add	r14, r1
    8f06:	f1 1e       	adc	r15, r17
    8f08:	43 1f       	adc	r20, r19
    8f0a:	56 1f       	adc	r21, r22
    8f0c:	c9 1f       	adc	r28, r25
    8f0e:	d0 1d       	adc	r29, r0
    8f10:	7e f4       	brtc	.+30     	; 0x8f30 <__ftoa_engine+0x146>
    8f12:	70 33       	cpi	r23, 0x30	; 48
    8f14:	11 f4       	brne	.+4      	; 0x8f1a <__ftoa_engine+0x130>
    8f16:	8a 95       	dec	r24
    8f18:	e6 cf       	rjmp	.-52     	; 0x8ee6 <__ftoa_engine+0xfc>
    8f1a:	e8 94       	clt
    8f1c:	01 50       	subi	r16, 0x01	; 1
    8f1e:	30 f0       	brcs	.+12     	; 0x8f2c <__ftoa_engine+0x142>
    8f20:	08 0f       	add	r16, r24
    8f22:	0a f4       	brpl	.+2      	; 0x8f26 <__ftoa_engine+0x13c>
    8f24:	00 27       	eor	r16, r16
    8f26:	02 17       	cp	r16, r18
    8f28:	08 f4       	brcc	.+2      	; 0x8f2c <__ftoa_engine+0x142>
    8f2a:	20 2f       	mov	r18, r16
    8f2c:	23 95       	inc	r18
    8f2e:	02 2f       	mov	r16, r18
    8f30:	7a 33       	cpi	r23, 0x3A	; 58
    8f32:	28 f0       	brcs	.+10     	; 0x8f3e <__ftoa_engine+0x154>
    8f34:	79 e3       	ldi	r23, 0x39	; 57
    8f36:	7d 93       	st	X+, r23
    8f38:	2a 95       	dec	r18
    8f3a:	e9 f7       	brne	.-6      	; 0x8f36 <__ftoa_engine+0x14c>
    8f3c:	10 c0       	rjmp	.+32     	; 0x8f5e <__ftoa_engine+0x174>
    8f3e:	7d 93       	st	X+, r23
    8f40:	2a 95       	dec	r18
    8f42:	89 f6       	brne	.-94     	; 0x8ee6 <__ftoa_engine+0xfc>
    8f44:	06 94       	lsr	r0
    8f46:	97 95       	ror	r25
    8f48:	67 95       	ror	r22
    8f4a:	37 95       	ror	r19
    8f4c:	17 95       	ror	r17
    8f4e:	17 94       	ror	r1
    8f50:	e1 18       	sub	r14, r1
    8f52:	f1 0a       	sbc	r15, r17
    8f54:	43 0b       	sbc	r20, r19
    8f56:	56 0b       	sbc	r21, r22
    8f58:	c9 0b       	sbc	r28, r25
    8f5a:	d0 09       	sbc	r29, r0
    8f5c:	98 f0       	brcs	.+38     	; 0x8f84 <__ftoa_engine+0x19a>
    8f5e:	23 95       	inc	r18
    8f60:	7e 91       	ld	r23, -X
    8f62:	73 95       	inc	r23
    8f64:	7a 33       	cpi	r23, 0x3A	; 58
    8f66:	08 f0       	brcs	.+2      	; 0x8f6a <__ftoa_engine+0x180>
    8f68:	70 e3       	ldi	r23, 0x30	; 48
    8f6a:	7c 93       	st	X, r23
    8f6c:	20 13       	cpse	r18, r16
    8f6e:	b8 f7       	brcc	.-18     	; 0x8f5e <__ftoa_engine+0x174>
    8f70:	7e 91       	ld	r23, -X
    8f72:	70 61       	ori	r23, 0x10	; 16
    8f74:	7d 93       	st	X+, r23
    8f76:	30 f0       	brcs	.+12     	; 0x8f84 <__ftoa_engine+0x19a>
    8f78:	83 95       	inc	r24
    8f7a:	71 e3       	ldi	r23, 0x31	; 49
    8f7c:	7d 93       	st	X+, r23
    8f7e:	70 e3       	ldi	r23, 0x30	; 48
    8f80:	2a 95       	dec	r18
    8f82:	e1 f7       	brne	.-8      	; 0x8f7c <__ftoa_engine+0x192>
    8f84:	11 24       	eor	r1, r1
    8f86:	ef 90       	pop	r14
    8f88:	ff 90       	pop	r15
    8f8a:	0f 91       	pop	r16
    8f8c:	1f 91       	pop	r17
    8f8e:	cf 91       	pop	r28
    8f90:	df 91       	pop	r29
    8f92:	99 27       	eor	r25, r25
    8f94:	87 fd       	sbrc	r24, 7
    8f96:	90 95       	com	r25
    8f98:	08 95       	ret

00008f9a <isspace>:
    8f9a:	91 11       	cpse	r25, r1
    8f9c:	29 c1       	rjmp	.+594    	; 0x91f0 <__ctype_isfalse>
    8f9e:	80 32       	cpi	r24, 0x20	; 32
    8fa0:	19 f0       	breq	.+6      	; 0x8fa8 <isspace+0xe>
    8fa2:	89 50       	subi	r24, 0x09	; 9
    8fa4:	85 50       	subi	r24, 0x05	; 5
    8fa6:	d0 f7       	brcc	.-12     	; 0x8f9c <isspace+0x2>
    8fa8:	08 95       	ret

00008faa <toupper>:
    8faa:	91 11       	cpse	r25, r1
    8fac:	08 95       	ret
    8fae:	81 56       	subi	r24, 0x61	; 97
    8fb0:	8a 51       	subi	r24, 0x1A	; 26
    8fb2:	08 f4       	brcc	.+2      	; 0x8fb6 <toupper+0xc>
    8fb4:	80 52       	subi	r24, 0x20	; 32
    8fb6:	85 58       	subi	r24, 0x85	; 133
    8fb8:	08 95       	ret

00008fba <strncasecmp_P>:
    8fba:	fb 01       	movw	r30, r22
    8fbc:	dc 01       	movw	r26, r24
    8fbe:	41 50       	subi	r20, 0x01	; 1
    8fc0:	50 40       	sbci	r21, 0x00	; 0
    8fc2:	88 f0       	brcs	.+34     	; 0x8fe6 <strncasecmp_P+0x2c>
    8fc4:	8d 91       	ld	r24, X+
    8fc6:	81 34       	cpi	r24, 0x41	; 65
    8fc8:	1c f0       	brlt	.+6      	; 0x8fd0 <strncasecmp_P+0x16>
    8fca:	8b 35       	cpi	r24, 0x5B	; 91
    8fcc:	0c f4       	brge	.+2      	; 0x8fd0 <strncasecmp_P+0x16>
    8fce:	80 5e       	subi	r24, 0xE0	; 224
    8fd0:	65 91       	lpm	r22, Z+
    8fd2:	61 34       	cpi	r22, 0x41	; 65
    8fd4:	1c f0       	brlt	.+6      	; 0x8fdc <strncasecmp_P+0x22>
    8fd6:	6b 35       	cpi	r22, 0x5B	; 91
    8fd8:	0c f4       	brge	.+2      	; 0x8fdc <strncasecmp_P+0x22>
    8fda:	60 5e       	subi	r22, 0xE0	; 224
    8fdc:	86 1b       	sub	r24, r22
    8fde:	61 11       	cpse	r22, r1
    8fe0:	71 f3       	breq	.-36     	; 0x8fbe <strncasecmp_P+0x4>
    8fe2:	99 0b       	sbc	r25, r25
    8fe4:	08 95       	ret
    8fe6:	88 1b       	sub	r24, r24
    8fe8:	fc cf       	rjmp	.-8      	; 0x8fe2 <strncasecmp_P+0x28>

00008fea <strnlen_P>:
    8fea:	fc 01       	movw	r30, r24
    8fec:	05 90       	lpm	r0, Z+
    8fee:	61 50       	subi	r22, 0x01	; 1
    8ff0:	70 40       	sbci	r23, 0x00	; 0
    8ff2:	01 10       	cpse	r0, r1
    8ff4:	d8 f7       	brcc	.-10     	; 0x8fec <strnlen_P+0x2>
    8ff6:	80 95       	com	r24
    8ff8:	90 95       	com	r25
    8ffa:	8e 0f       	add	r24, r30
    8ffc:	9f 1f       	adc	r25, r31
    8ffe:	08 95       	ret

00009000 <strnlen>:
    9000:	fc 01       	movw	r30, r24
    9002:	61 50       	subi	r22, 0x01	; 1
    9004:	70 40       	sbci	r23, 0x00	; 0
    9006:	01 90       	ld	r0, Z+
    9008:	01 10       	cpse	r0, r1
    900a:	d8 f7       	brcc	.-10     	; 0x9002 <strnlen+0x2>
    900c:	80 95       	com	r24
    900e:	90 95       	com	r25
    9010:	8e 0f       	add	r24, r30
    9012:	9f 1f       	adc	r25, r31
    9014:	08 95       	ret

00009016 <__mulhi_const_10>:
    9016:	7a e0       	ldi	r23, 0x0A	; 10
    9018:	97 9f       	mul	r25, r23
    901a:	90 2d       	mov	r25, r0
    901c:	87 9f       	mul	r24, r23
    901e:	80 2d       	mov	r24, r0
    9020:	91 0d       	add	r25, r1
    9022:	11 24       	eor	r1, r1
    9024:	08 95       	ret

00009026 <clearerr>:
    9026:	fc 01       	movw	r30, r24
    9028:	83 81       	ldd	r24, Z+3	; 0x03
    902a:	8f 7c       	andi	r24, 0xCF	; 207
    902c:	83 83       	std	Z+3, r24	; 0x03
    902e:	08 95       	ret

00009030 <fgets>:
    9030:	cf 92       	push	r12
    9032:	df 92       	push	r13
    9034:	ef 92       	push	r14
    9036:	ff 92       	push	r15
    9038:	0f 93       	push	r16
    903a:	1f 93       	push	r17
    903c:	cf 93       	push	r28
    903e:	df 93       	push	r29
    9040:	7c 01       	movw	r14, r24
    9042:	6a 01       	movw	r12, r20
    9044:	fa 01       	movw	r30, r20
    9046:	83 81       	ldd	r24, Z+3	; 0x03
    9048:	80 ff       	sbrs	r24, 0
    904a:	19 c0       	rjmp	.+50     	; 0x907e <fgets+0x4e>
    904c:	16 16       	cp	r1, r22
    904e:	17 06       	cpc	r1, r23
    9050:	b4 f4       	brge	.+44     	; 0x907e <fgets+0x4e>
    9052:	eb 01       	movw	r28, r22
    9054:	21 97       	sbiw	r28, 0x01	; 1
    9056:	87 01       	movw	r16, r14
    9058:	0d c0       	rjmp	.+26     	; 0x9074 <fgets+0x44>
    905a:	c6 01       	movw	r24, r12
    905c:	0e 94 fb 48 	call	0x91f6	; 0x91f6 <fgetc>
    9060:	ff ef       	ldi	r31, 0xFF	; 255
    9062:	8f 3f       	cpi	r24, 0xFF	; 255
    9064:	9f 07       	cpc	r25, r31
    9066:	59 f0       	breq	.+22     	; 0x907e <fgets+0x4e>
    9068:	f8 01       	movw	r30, r16
    906a:	81 93       	st	Z+, r24
    906c:	8f 01       	movw	r16, r30
    906e:	0a 97       	sbiw	r24, 0x0a	; 10
    9070:	19 f0       	breq	.+6      	; 0x9078 <fgets+0x48>
    9072:	21 97       	sbiw	r28, 0x01	; 1
    9074:	20 97       	sbiw	r28, 0x00	; 0
    9076:	89 f7       	brne	.-30     	; 0x905a <fgets+0x2a>
    9078:	f8 01       	movw	r30, r16
    907a:	10 82       	st	Z, r1
    907c:	02 c0       	rjmp	.+4      	; 0x9082 <fgets+0x52>
    907e:	ee 24       	eor	r14, r14
    9080:	ff 24       	eor	r15, r15
    9082:	c7 01       	movw	r24, r14
    9084:	df 91       	pop	r29
    9086:	cf 91       	pop	r28
    9088:	1f 91       	pop	r17
    908a:	0f 91       	pop	r16
    908c:	ff 90       	pop	r15
    908e:	ef 90       	pop	r14
    9090:	df 90       	pop	r13
    9092:	cf 90       	pop	r12
    9094:	08 95       	ret

00009096 <fputc>:
    9096:	0f 93       	push	r16
    9098:	1f 93       	push	r17
    909a:	cf 93       	push	r28
    909c:	df 93       	push	r29
    909e:	8c 01       	movw	r16, r24
    90a0:	eb 01       	movw	r28, r22
    90a2:	8b 81       	ldd	r24, Y+3	; 0x03
    90a4:	81 ff       	sbrs	r24, 1
    90a6:	1b c0       	rjmp	.+54     	; 0x90de <fputc+0x48>
    90a8:	82 ff       	sbrs	r24, 2
    90aa:	0d c0       	rjmp	.+26     	; 0x90c6 <fputc+0x30>
    90ac:	2e 81       	ldd	r18, Y+6	; 0x06
    90ae:	3f 81       	ldd	r19, Y+7	; 0x07
    90b0:	8c 81       	ldd	r24, Y+4	; 0x04
    90b2:	9d 81       	ldd	r25, Y+5	; 0x05
    90b4:	28 17       	cp	r18, r24
    90b6:	39 07       	cpc	r19, r25
    90b8:	64 f4       	brge	.+24     	; 0x90d2 <fputc+0x3c>
    90ba:	e8 81       	ld	r30, Y
    90bc:	f9 81       	ldd	r31, Y+1	; 0x01
    90be:	01 93       	st	Z+, r16
    90c0:	e8 83       	st	Y, r30
    90c2:	f9 83       	std	Y+1, r31	; 0x01
    90c4:	06 c0       	rjmp	.+12     	; 0x90d2 <fputc+0x3c>
    90c6:	e8 85       	ldd	r30, Y+8	; 0x08
    90c8:	f9 85       	ldd	r31, Y+9	; 0x09
    90ca:	80 2f       	mov	r24, r16
    90cc:	19 95       	eicall
    90ce:	89 2b       	or	r24, r25
    90d0:	31 f4       	brne	.+12     	; 0x90de <fputc+0x48>
    90d2:	8e 81       	ldd	r24, Y+6	; 0x06
    90d4:	9f 81       	ldd	r25, Y+7	; 0x07
    90d6:	01 96       	adiw	r24, 0x01	; 1
    90d8:	8e 83       	std	Y+6, r24	; 0x06
    90da:	9f 83       	std	Y+7, r25	; 0x07
    90dc:	02 c0       	rjmp	.+4      	; 0x90e2 <fputc+0x4c>
    90de:	0f ef       	ldi	r16, 0xFF	; 255
    90e0:	1f ef       	ldi	r17, 0xFF	; 255
    90e2:	c8 01       	movw	r24, r16
    90e4:	df 91       	pop	r29
    90e6:	cf 91       	pop	r28
    90e8:	1f 91       	pop	r17
    90ea:	0f 91       	pop	r16
    90ec:	08 95       	ret

000090ee <printf_P>:
    90ee:	df 93       	push	r29
    90f0:	cf 93       	push	r28
    90f2:	cd b7       	in	r28, 0x3d	; 61
    90f4:	de b7       	in	r29, 0x3e	; 62
    90f6:	fe 01       	movw	r30, r28
    90f8:	36 96       	adiw	r30, 0x06	; 6
    90fa:	61 91       	ld	r22, Z+
    90fc:	71 91       	ld	r23, Z+
    90fe:	a0 91 02 25 	lds	r26, 0x2502
    9102:	b0 91 03 25 	lds	r27, 0x2503
    9106:	13 96       	adiw	r26, 0x03	; 3
    9108:	8c 91       	ld	r24, X
    910a:	13 97       	sbiw	r26, 0x03	; 3
    910c:	88 60       	ori	r24, 0x08	; 8
    910e:	13 96       	adiw	r26, 0x03	; 3
    9110:	8c 93       	st	X, r24
    9112:	80 91 02 25 	lds	r24, 0x2502
    9116:	90 91 03 25 	lds	r25, 0x2503
    911a:	af 01       	movw	r20, r30
    911c:	0e 94 14 3d 	call	0x7a28	; 0x7a28 <vfprintf>
    9120:	e0 91 02 25 	lds	r30, 0x2502
    9124:	f0 91 03 25 	lds	r31, 0x2503
    9128:	23 81       	ldd	r18, Z+3	; 0x03
    912a:	27 7f       	andi	r18, 0xF7	; 247
    912c:	23 83       	std	Z+3, r18	; 0x03
    912e:	cf 91       	pop	r28
    9130:	df 91       	pop	r29
    9132:	08 95       	ret

00009134 <__ultoa_invert>:
    9134:	fa 01       	movw	r30, r20
    9136:	aa 27       	eor	r26, r26
    9138:	28 30       	cpi	r18, 0x08	; 8
    913a:	51 f1       	breq	.+84     	; 0x9190 <__ultoa_invert+0x5c>
    913c:	20 31       	cpi	r18, 0x10	; 16
    913e:	81 f1       	breq	.+96     	; 0x91a0 <__ultoa_invert+0x6c>
    9140:	e8 94       	clt
    9142:	6f 93       	push	r22
    9144:	6e 7f       	andi	r22, 0xFE	; 254
    9146:	6e 5f       	subi	r22, 0xFE	; 254
    9148:	7f 4f       	sbci	r23, 0xFF	; 255
    914a:	8f 4f       	sbci	r24, 0xFF	; 255
    914c:	9f 4f       	sbci	r25, 0xFF	; 255
    914e:	af 4f       	sbci	r26, 0xFF	; 255
    9150:	b1 e0       	ldi	r27, 0x01	; 1
    9152:	3e d0       	rcall	.+124    	; 0x91d0 <__ultoa_invert+0x9c>
    9154:	b4 e0       	ldi	r27, 0x04	; 4
    9156:	3c d0       	rcall	.+120    	; 0x91d0 <__ultoa_invert+0x9c>
    9158:	67 0f       	add	r22, r23
    915a:	78 1f       	adc	r23, r24
    915c:	89 1f       	adc	r24, r25
    915e:	9a 1f       	adc	r25, r26
    9160:	a1 1d       	adc	r26, r1
    9162:	68 0f       	add	r22, r24
    9164:	79 1f       	adc	r23, r25
    9166:	8a 1f       	adc	r24, r26
    9168:	91 1d       	adc	r25, r1
    916a:	a1 1d       	adc	r26, r1
    916c:	6a 0f       	add	r22, r26
    916e:	71 1d       	adc	r23, r1
    9170:	81 1d       	adc	r24, r1
    9172:	91 1d       	adc	r25, r1
    9174:	a1 1d       	adc	r26, r1
    9176:	20 d0       	rcall	.+64     	; 0x91b8 <__ultoa_invert+0x84>
    9178:	09 f4       	brne	.+2      	; 0x917c <__ultoa_invert+0x48>
    917a:	68 94       	set
    917c:	3f 91       	pop	r19
    917e:	2a e0       	ldi	r18, 0x0A	; 10
    9180:	26 9f       	mul	r18, r22
    9182:	11 24       	eor	r1, r1
    9184:	30 19       	sub	r19, r0
    9186:	30 5d       	subi	r19, 0xD0	; 208
    9188:	31 93       	st	Z+, r19
    918a:	de f6       	brtc	.-74     	; 0x9142 <__ultoa_invert+0xe>
    918c:	cf 01       	movw	r24, r30
    918e:	08 95       	ret
    9190:	46 2f       	mov	r20, r22
    9192:	47 70       	andi	r20, 0x07	; 7
    9194:	40 5d       	subi	r20, 0xD0	; 208
    9196:	41 93       	st	Z+, r20
    9198:	b3 e0       	ldi	r27, 0x03	; 3
    919a:	0f d0       	rcall	.+30     	; 0x91ba <__ultoa_invert+0x86>
    919c:	c9 f7       	brne	.-14     	; 0x9190 <__ultoa_invert+0x5c>
    919e:	f6 cf       	rjmp	.-20     	; 0x918c <__ultoa_invert+0x58>
    91a0:	46 2f       	mov	r20, r22
    91a2:	4f 70       	andi	r20, 0x0F	; 15
    91a4:	40 5d       	subi	r20, 0xD0	; 208
    91a6:	4a 33       	cpi	r20, 0x3A	; 58
    91a8:	18 f0       	brcs	.+6      	; 0x91b0 <__ultoa_invert+0x7c>
    91aa:	49 5d       	subi	r20, 0xD9	; 217
    91ac:	31 fd       	sbrc	r19, 1
    91ae:	40 52       	subi	r20, 0x20	; 32
    91b0:	41 93       	st	Z+, r20
    91b2:	02 d0       	rcall	.+4      	; 0x91b8 <__ultoa_invert+0x84>
    91b4:	a9 f7       	brne	.-22     	; 0x91a0 <__ultoa_invert+0x6c>
    91b6:	ea cf       	rjmp	.-44     	; 0x918c <__ultoa_invert+0x58>
    91b8:	b4 e0       	ldi	r27, 0x04	; 4
    91ba:	a6 95       	lsr	r26
    91bc:	97 95       	ror	r25
    91be:	87 95       	ror	r24
    91c0:	77 95       	ror	r23
    91c2:	67 95       	ror	r22
    91c4:	ba 95       	dec	r27
    91c6:	c9 f7       	brne	.-14     	; 0x91ba <__ultoa_invert+0x86>
    91c8:	00 97       	sbiw	r24, 0x00	; 0
    91ca:	61 05       	cpc	r22, r1
    91cc:	71 05       	cpc	r23, r1
    91ce:	08 95       	ret
    91d0:	9b 01       	movw	r18, r22
    91d2:	ac 01       	movw	r20, r24
    91d4:	0a 2e       	mov	r0, r26
    91d6:	06 94       	lsr	r0
    91d8:	57 95       	ror	r21
    91da:	47 95       	ror	r20
    91dc:	37 95       	ror	r19
    91de:	27 95       	ror	r18
    91e0:	ba 95       	dec	r27
    91e2:	c9 f7       	brne	.-14     	; 0x91d6 <__ultoa_invert+0xa2>
    91e4:	62 0f       	add	r22, r18
    91e6:	73 1f       	adc	r23, r19
    91e8:	84 1f       	adc	r24, r20
    91ea:	95 1f       	adc	r25, r21
    91ec:	a0 1d       	adc	r26, r0
    91ee:	08 95       	ret

000091f0 <__ctype_isfalse>:
    91f0:	99 27       	eor	r25, r25
    91f2:	88 27       	eor	r24, r24

000091f4 <__ctype_istrue>:
    91f4:	08 95       	ret

000091f6 <fgetc>:
    91f6:	cf 93       	push	r28
    91f8:	df 93       	push	r29
    91fa:	ec 01       	movw	r28, r24
    91fc:	4b 81       	ldd	r20, Y+3	; 0x03
    91fe:	40 ff       	sbrs	r20, 0
    9200:	1a c0       	rjmp	.+52     	; 0x9236 <fgetc+0x40>
    9202:	46 ff       	sbrs	r20, 6
    9204:	0a c0       	rjmp	.+20     	; 0x921a <fgetc+0x24>
    9206:	4f 7b       	andi	r20, 0xBF	; 191
    9208:	4b 83       	std	Y+3, r20	; 0x03
    920a:	8e 81       	ldd	r24, Y+6	; 0x06
    920c:	9f 81       	ldd	r25, Y+7	; 0x07
    920e:	01 96       	adiw	r24, 0x01	; 1
    9210:	8e 83       	std	Y+6, r24	; 0x06
    9212:	9f 83       	std	Y+7, r25	; 0x07
    9214:	8a 81       	ldd	r24, Y+2	; 0x02
    9216:	28 2f       	mov	r18, r24
    9218:	2b c0       	rjmp	.+86     	; 0x9270 <fgetc+0x7a>
    921a:	42 ff       	sbrs	r20, 2
    921c:	13 c0       	rjmp	.+38     	; 0x9244 <fgetc+0x4e>
    921e:	e8 81       	ld	r30, Y
    9220:	f9 81       	ldd	r31, Y+1	; 0x01
    9222:	80 81       	ld	r24, Z
    9224:	28 2f       	mov	r18, r24
    9226:	33 27       	eor	r19, r19
    9228:	27 fd       	sbrc	r18, 7
    922a:	30 95       	com	r19
    922c:	21 15       	cp	r18, r1
    922e:	31 05       	cpc	r19, r1
    9230:	29 f4       	brne	.+10     	; 0x923c <fgetc+0x46>
    9232:	40 62       	ori	r20, 0x20	; 32
    9234:	4b 83       	std	Y+3, r20	; 0x03
    9236:	2f ef       	ldi	r18, 0xFF	; 255
    9238:	3f ef       	ldi	r19, 0xFF	; 255
    923a:	1b c0       	rjmp	.+54     	; 0x9272 <fgetc+0x7c>
    923c:	31 96       	adiw	r30, 0x01	; 1
    923e:	e8 83       	st	Y, r30
    9240:	f9 83       	std	Y+1, r31	; 0x01
    9242:	11 c0       	rjmp	.+34     	; 0x9266 <fgetc+0x70>
    9244:	ea 85       	ldd	r30, Y+10	; 0x0a
    9246:	fb 85       	ldd	r31, Y+11	; 0x0b
    9248:	ce 01       	movw	r24, r28
    924a:	19 95       	eicall
    924c:	9c 01       	movw	r18, r24
    924e:	97 ff       	sbrs	r25, 7
    9250:	0a c0       	rjmp	.+20     	; 0x9266 <fgetc+0x70>
    9252:	9b 81       	ldd	r25, Y+3	; 0x03
    9254:	2f 5f       	subi	r18, 0xFF	; 255
    9256:	3f 4f       	sbci	r19, 0xFF	; 255
    9258:	11 f0       	breq	.+4      	; 0x925e <fgetc+0x68>
    925a:	80 e2       	ldi	r24, 0x20	; 32
    925c:	01 c0       	rjmp	.+2      	; 0x9260 <fgetc+0x6a>
    925e:	80 e1       	ldi	r24, 0x10	; 16
    9260:	89 2b       	or	r24, r25
    9262:	8b 83       	std	Y+3, r24	; 0x03
    9264:	e8 cf       	rjmp	.-48     	; 0x9236 <fgetc+0x40>
    9266:	8e 81       	ldd	r24, Y+6	; 0x06
    9268:	9f 81       	ldd	r25, Y+7	; 0x07
    926a:	01 96       	adiw	r24, 0x01	; 1
    926c:	8e 83       	std	Y+6, r24	; 0x06
    926e:	9f 83       	std	Y+7, r25	; 0x07
    9270:	30 e0       	ldi	r19, 0x00	; 0
    9272:	c9 01       	movw	r24, r18
    9274:	df 91       	pop	r29
    9276:	cf 91       	pop	r28
    9278:	08 95       	ret

0000927a <_exit>:
    927a:	f8 94       	cli

0000927c <__stop_program>:
    927c:	ff cf       	rjmp	.-2      	; 0x927c <__stop_program>
