
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000093c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00802000  000093c0  00009454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000404  00802104  00802104  00009558  2**0
                  ALLOC
  3 .debug_aranges 000003e0  00000000  00000000  00009558  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000010e1  00000000  00000000  00009938  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000e702  00000000  00000000  0000aa19  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000030e6  00000000  00000000  0001911b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004f48  00000000  00000000  0001c201  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b40  00000000  00000000  0002114c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002654  00000000  00000000  00021c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003e04  00000000  00000000  000242e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  000280e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 0f 	jmp	0x1eaa	; 0x1eaa <__ctors_end>
       4:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
       8:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
       c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      10:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      14:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      18:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      1c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      20:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      24:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      28:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      2c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      30:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      34:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      38:	0c 94 d7 27 	jmp	0x4fae	; 0x4fae <__vector_14>
      3c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      40:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      44:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      48:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      4c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      50:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      54:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      58:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      5c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      60:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      64:	0c 94 db 33 	jmp	0x67b6	; 0x67b6 <__vector_25>
      68:	0c 94 97 33 	jmp	0x672e	; 0x672e <__vector_26>
      6c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      70:	0c 94 ed 34 	jmp	0x69da	; 0x69da <__vector_28>
      74:	0c 94 89 34 	jmp	0x6912	; 0x6912 <__vector_29>
      78:	0c 94 d3 34 	jmp	0x69a6	; 0x69a6 <__vector_30>
      7c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      80:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      84:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      88:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      8c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      90:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      94:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      98:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      9c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      a0:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      a4:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      a8:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      ac:	0c 94 d4 2f 	jmp	0x5fa8	; 0x5fa8 <__vector_43>
      b0:	0c 94 de 2f 	jmp	0x5fbc	; 0x5fbc <__vector_44>
      b4:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      b8:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      bc:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__vector_47>
      c0:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      c4:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      c8:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      cc:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      d0:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      d4:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      d8:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      dc:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      e0:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      e4:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      e8:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      ec:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      f0:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      f4:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      f8:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
      fc:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     100:	0c 94 e8 2f 	jmp	0x5fd0	; 0x5fd0 <__vector_64>
     104:	0c 94 f2 2f 	jmp	0x5fe4	; 0x5fe4 <__vector_65>
     108:	0c 94 ac 2f 	jmp	0x5f58	; 0x5f58 <__vector_66>
     10c:	0c 94 b6 2f 	jmp	0x5f6c	; 0x5f6c <__vector_67>
     110:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     114:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     118:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     11c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     120:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     124:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     128:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     12c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     130:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     134:	0c 94 72 27 	jmp	0x4ee4	; 0x4ee4 <__vector_77>
     138:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     13c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     140:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     144:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     148:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     14c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     150:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     154:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     158:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     15c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     160:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     164:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     168:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     16c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     170:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     174:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     178:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     17c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     180:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     184:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     188:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     18c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     190:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     194:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     198:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     19c:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     1a0:	0c 94 c0 2f 	jmp	0x5f80	; 0x5f80 <__vector_104>
     1a4:	0c 94 ca 2f 	jmp	0x5f94	; 0x5f94 <__vector_105>
     1a8:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     1ac:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     1b0:	0c 94 a8 26 	jmp	0x4d50	; 0x4d50 <__vector_108>
     1b4:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     1b8:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     1bc:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     1c0:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     1c4:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     1c8:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     1cc:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     1d0:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     1d4:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     1d8:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     1dc:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     1e0:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     1e4:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <__c.3932>:
     23b:	25 73 0a 00                                         %s..

0000023f <cfgMsgXaxis>:
     23f:	58 00                                               X.

00000241 <cfgMsgYaxis>:
     241:	59 00                                               Y.

00000243 <cfgMsgZaxis>:
     243:	5a 00                                               Z.

00000245 <cfgMsgAaxis>:
     245:	41 00                                               A.

00000247 <cfgMsgs>:
     247:	3f 02 41 02 43 02 45 02                             ?.A.C.E.

0000024f <configs_P>:
     24f:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25f:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26f:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27f:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28f:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29f:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2af:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bf:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cf:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2df:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2ef:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2ff:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30f:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31f:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32f:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33f:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34f:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35f:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36f:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37f:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38f:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

0000039d <__c.3840>:
     39d:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     3ad:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

000003b8 <__c.3837>:
     3b8:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     3c8:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

000003d2 <__c.3834>:
     3d2:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     3e2:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

000003ec <__c.3831>:
     3ec:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     3fc:	74 3a 20 25 73 0a 00                                t: %s..

00000403 <__c.3828>:
     403:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     413:	4d 6f 64 65 0a 00                                   Mode..

00000419 <__c.3825>:
     419:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     429:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

00000436 <__c.3757>:
     436:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     446:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     456:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     466:	29 0a 0a 00                                         )...

0000046a <__c.3755>:
     46a:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     47a:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     48a:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

0000049a <__c.3753>:
     49a:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     4aa:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4ba:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004cb <__c.3751>:
     4cb:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     4db:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4eb:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004fc <__c.3749>:
     4fc:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     50c:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     51c:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     52c:	6c 0a 00                                            l..

0000052f <__c.3747>:
     52f:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     53f:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     54f:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     55f:	6e 0a 00                                            n..

00000562 <__c.3745>:
     562:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     572:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     582:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     592:	74 65 70 73 29 0a 00                                teps)..

00000599 <__c.3743>:
     599:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     5a9:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     5b9:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     5c9:	70 0a 00                                            p..

000005cc <__c.3741>:
     5cc:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     5dc:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     5ec:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     5fc:	73 74 65 70 73 29 0a 00                             steps)..

00000604 <__c.3739>:
     604:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     614:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     624:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     634:	73 74 65 70 73 29 0a 00                             steps)..

0000063c <__c.3734>:
     63c:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     64c:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

0000065a <__c.3720>:
     65a:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     66a:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     67a:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000685 <__c.3718>:
     685:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     695:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     6a5:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000006af <__c.3716>:
     6af:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     6bf:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     6cf:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000006d9 <__c.3714>:
     6d9:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     6e9:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     6f9:	73 20 2d 2d 2d 0a 00                                s ---..

00000700 <__c.3712>:
     700:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     710:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     720:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000728 <__c.3686>:
     728:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     738:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     748:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000754 <square_test1>:
     754:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     764:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     774:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     784:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     794:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     7a4:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     7b4:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000007c2 <square_test2>:
     7c2:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     7d2:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     7e2:	78 30 20 79 30 00                                   x0 y0.

000007e8 <square_test10>:
     7e8:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     7f8:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     808:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000814 <circle_test10>:
     814:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     824:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     834:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     844:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     854:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     864:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     874:	30 00                                               0.

00000876 <square_circle_test10>:
     876:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     886:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     896:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     8a6:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     8b6:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     8c6:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     8d6:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     8e6:	31 30 20 79 30 00                                   10 y0.

000008ec <square_circle_test100>:
     8ec:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     8fc:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     90c:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     91c:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     92c:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     93c:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     94c:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     95c:	35 30 20 6a 30 00                                   50 j0.

00000962 <spiral_test5>:
     962:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     972:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     982:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     992:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     9a2:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     9b2:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     9c2:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     9d2:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

000009dc <spiral_test50a>:
     9dc:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     9ec:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

000009fc <dwell_test1>:
     9fc:	67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30 20     g0 x10.g4 p1.g0 
     a0c:	78 32 30 0a 67 34 20 70 31 0a 67 30 20 78 31 30     x20.g4 p1.g0 x10
     a1c:	0a 67 34 20 70 31 0a 67 30 20 78 30 30 0a 67 34     .g4 p1.g0 x00.g4
     a2c:	20 70 31 0a 67 30 20 78 31 30 0a 67 34 20 70 31      p1.g0 x10.g4 p1
     a3c:	0a 67 30 20 78 32 30 0a 67 34 20 70 31 0a 67 30     .g0 x20.g4 p1.g0
     a4c:	20 78 31 30 0a 67 34 20 70 31 0a 67 30 20 78 30      x10.g4 p1.g0 x0
     a5c:	0a 67 34 20 70 31 0a 67 30 20 78 31 30 0a 67 34     .g4 p1.g0 x10.g4
     a6c:	20 70 31 0a 67 30 20 78 32 30 0a 67 34 20 70 31      p1.g0 x20.g4 p1
     a7c:	0a 67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30     .g0 x10.g4 p1.g0
     a8c:	20 78 30 00                                          x0.

00000a90 <dwell_test2>:
     a90:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     aa0:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     ab0:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     ac0:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     ad0:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     ae0:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     af0:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     b00:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     b10:	20 70 31 0a 67 30 20 78 30 00                        p1.g0 x0.

00000b1a <dwell_testMax>:
     b1a:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000b24 <g0_test1>:
     b24:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     b34:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000b44 <g0_test2>:
     b44:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     b54:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     b64:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     b74:	79 30 20 7a 30 00                                   y0 z0.

00000b7a <g0_test3>:
     b7a:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     b8a:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     b9a:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000ba8 <radius_arc_test1>:
     ba8:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     bb8:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     bc8:	72 35 30 0a 00                                      r50..

00000bcd <radius_arc_test2>:
     bcd:	67 32 0a 00                                         g2..

00000bd1 <zoetrope>:
     bd1:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     be1:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     bf1:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     c01:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     c11:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     c21:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     c31:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     c41:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     c51:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     c61:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     c71:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     c81:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     c91:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     ca1:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     cb1:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     cc1:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     cd1:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     ce1:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     cf1:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     d01:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     d11:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     d21:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     d31:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     d41:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     d51:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     d61:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     d71:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     d81:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     d91:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     da1:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     db1:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     dc1:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     dd1:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     de1:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     df1:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     e01:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
     e11:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
     e21:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
     e31:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
     e41:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
     e51:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
     e61:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
     e71:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
     e81:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
     e91:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
     ea1:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
     eb1:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
     ec1:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
     ed1:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
     ee1:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
     ef1:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
     f01:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
     f11:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
     f21:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
     f31:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
     f41:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
     f51:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
     f61:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
     f71:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
     f81:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
     f91:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
     fa1:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
     fb1:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
     fc1:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
     fd1:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
     fe1:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
     ff1:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
    1001:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    1011:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    1021:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    1031:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    1041:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    1051:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    1061:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    1071:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    1081:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    1091:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    10a1:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    10b1:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    10c1:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    10d1:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    10e1:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    10f1:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    1101:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    1111:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    1121:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    1131:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    1141:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    1151:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    1161:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    1171:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    1181:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    1191:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    11a1:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    11b1:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    11c1:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    11d1:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    11e1:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    11f1:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    1201:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    1211:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    1221:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    1231:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    1241:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    1251:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    1261:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    1271:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    1281:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    1291:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    12a1:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    12b1:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    12c1:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    12d1:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    12e1:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    12f1:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    1301:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    1311:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    1321:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    1331:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    1341:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    1351:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    1361:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    1371:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    1381:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    1391:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    13a1:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    13b1:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    13c1:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    13d1:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    13e1:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    13f1:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    1401:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    1411:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    1421:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    1431:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    1441:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    1451:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    1461:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    1471:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    1481:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    1491:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    14a1:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    14b1:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    14c1:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    14d1:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    14e1:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    14f1:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    1501:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    1511:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    1521:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    1531:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    1541:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    1551:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    1561:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    1571:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    1581:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

0000158c <contraptor_circle>:
    158c:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    159c:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    15ac:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    15bc:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    15cc:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    15dc:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    15ec:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    15fc:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    160c:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    161c:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    162c:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    163c:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    164c:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    165c:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    166c:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    167c:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    168c:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    169c:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    16ac:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    16bc:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    16cc:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    16dc:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    16ec:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    16fc:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    170c:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    171c:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    172c:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    173c:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    174c:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    175c:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    176c:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    177c:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    178c:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    179c:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    17ac:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    17bc:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    17cc:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    17dc:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    17ec:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    17fc:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    180c:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    181c:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    182c:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    183c:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    184c:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    185c:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    186c:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    187c:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    188c:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    189c:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    18ac:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    18bc:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    18cc:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    18dc:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    18ec:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    18fc:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    190c:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    191c:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    192c:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    193c:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    194c:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    195c:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

0000196c <tgModeStringControl>:
    196c:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001979 <tgModeStringConfig>:
    1979:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001985 <tgModeStringGCode>:
    1985:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

00001991 <tgModeStringDirect>:
    1991:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

0000199e <tgModeStrings>:
    199e:	6c 19 79 19 85 19 91 19                             l.y.....

000019a6 <tgStatusMsg00>:
    19a6:	4f 4b 00                                            OK.

000019a9 <tgStatusMsg01>:
    19a9:	45 52 52 4f 52 00                                   ERROR.

000019af <tgStatusMsg02>:
    19af:	45 41 47 41 49 4e 00                                EAGAIN.

000019b6 <tgStatusMsg03>:
    19b6:	4e 4f 4f 50 00                                      NOOP.

000019bb <tgStatusMsg04>:
    19bb:	45 6e 64 20 6f 66 20 6c 69 6e 65 00                 End of line.

000019c7 <tgStatusMsg05>:
    19c7:	45 6e 64 20 6f 66 20 66 69 6c 65 00                 End of file.

000019d3 <tgStatusMsg06>:
    19d3:	46 69 6c 65 20 6e 6f 74 20 6f 70 65 6e 00           File not open.

000019e1 <tgStatusMsg07>:
    19e1:	4e 6f 20 73 75 63 68 20 64 65 76 69 63 65 00        No such device.

000019f0 <tgStatusMsg08>:
    19f0:	42 75 66 66 65 72 20 65 6d 70 74 79 00              Buffer empty.

000019fd <tgStatusMsg09>:
    19fd:	42 75 66 66 65 72 20 66 75 6c 6c 20 2d 20 66 61     Buffer full - fa
    1a0d:	74 61 6c 00                                         tal.

00001a11 <tgStatusMsg10>:
    1a11:	42 75 66 66 65 72 20 66 75 6c 6c 20 2d 20 6e 6f     Buffer full - no
    1a21:	6e 2d 66 61 74 61 6c 00                             n-fatal.

00001a29 <tgStatusMsg11>:
    1a29:	51 55 49 54 00                                      QUIT.

00001a2e <tgStatusMsg12>:
    1a2e:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 63 6f 6d     Unrecognized com
    1a3e:	6d 61 6e 64 00                                      mand.

00001a43 <tgStatusMsg13>:
    1a43:	45 78 70 65 63 74 65 64 20 63 6f 6d 6d 61 6e 64     Expected command
    1a53:	20 6c 65 74 74 65 72 00                              letter.

00001a5b <tgStatusMsg14>:
    1a5b:	55 6e 73 75 70 70 6f 72 74 65 64 20 73 74 61 74     Unsupported stat
    1a6b:	65 6d 65 6e 74 00                                   ement.

00001a71 <tgStatusMsg15>:
    1a71:	50 61 72 61 6d 65 74 65 72 20 6f 76 65 72 20 72     Parameter over r
    1a81:	61 6e 67 65 00                                      ange.

00001a86 <tgStatusMsg16>:
    1a86:	42 61 64 20 6e 75 6d 62 65 72 20 66 6f 72 6d 61     Bad number forma
    1a96:	74 00                                               t.

00001a98 <tgStatusMsg17>:
    1a98:	46 6c 6f 61 74 69 6e 67 20 70 6f 69 6e 74 20 65     Floating point e
    1aa8:	72 72 6f 72 00                                      rror.

00001aad <tgStatusMsg18>:
    1aad:	4d 6f 74 69 6f 6e 20 63 6f 6e 74 72 6f 6c 20 65     Motion control e
    1abd:	72 72 6f 72 00                                      rror.

00001ac2 <tgStatusMsg19>:
    1ac2:	41 72 63 20 73 70 65 63 69 66 69 63 61 74 69 6f     Arc specificatio
    1ad2:	6e 20 65 72 72 6f 72 00                             n error.

00001ada <tgStatusMsg20>:
    1ada:	5a 65 72 6f 20 6c 65 6e 67 74 68 20 6c 69 6e 65     Zero length line
	...

00001aeb <tgStatusStrings>:
    1aeb:	a6 19 a9 19 af 19 b6 19 bb 19 c7 19 d3 19 e1 19     ................
    1afb:	f0 19 fd 19 11 1a 29 1a 2e 1a 43 1a 5b 1a 71 1a     ......)...C.[.q.
    1b0b:	86 1a 98 1a ad 1a c2 1a da 1a                       ..........

00001b15 <__c.4077>:
    1b15:	25 53 3a 20 25 73 0a 00                             %S: %s..

00001b1d <__c.3972>:
    1b1d:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1b2d:	69 6c 65 0a 00                                      ile..

00001b32 <__c.4035>:
    1b32:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001b40 <__c.3948>:
    1b40:	62 75 69 6c 64 20 32 30 37 00                       build 207.

00001b4a <__c.3946>:
    1b4a:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1b5a:	25 53 0a 00                                         %S..

00001b5e <bsel>:
    1b5e:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

00001b69 <bscale>:
    1b69:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

00001b74 <readlnFuncs>:
    1b74:	46 32 02 32 02 32 02 32 02 32 02 32 02 32 02 32     F2.2.2.2.2.2.2.2
    1b84:	90 32 02 32 46 32 02 32 02 32 46 32 02 32 02 32     .2.2F2.2.2F2.2.2
    1b94:	02 32 02 32 02 32 02 32 02 32 02 32 02 32 02 32     .2.2.2.2.2.2.2.2
    1ba4:	02 32 02 32 02 32 02 32 02 32 02 32 02 32 02 32     .2.2.2.2.2.2.2.2
    1bb4:	02 32 02 32 02 32 02 32 02 32 02 32 02 32 02 32     .2.2.2.2.2.2.2.2
    1bc4:	02 32 02 32 02 32 02 32 02 32 02 32 02 32 02 32     .2.2.2.2.2.2.2.2
    1bd4:	02 32 02 32 02 32 02 32 02 32 02 32 02 32 02 32     .2.2.2.2.2.2.2.2
    1be4:	02 32 02 32 02 32 79 32 02 32 02 32 02 32 02 32     .2.2.2y2.2.2.2.2
    1bf4:	02 32 02 32 02 32 02 32 02 32 02 32 02 32 02 32     .2.2.2.2.2.2.2.2
    1c04:	02 32 02 32 02 32 02 32 02 32 02 32 02 32 02 32     .2.2.2.2.2.2.2.2
    1c14:	02 32 02 32 02 32 02 32 02 32 02 32 02 32 02 32     .2.2.2.2.2.2.2.2
    1c24:	02 32 02 32 02 32 02 32 02 32 02 32 02 32 02 32     .2.2.2.2.2.2.2.2
    1c34:	02 32 02 32 02 32 02 32 02 32 02 32 02 32 02 32     .2.2.2.2.2.2.2.2
    1c44:	02 32 02 32 02 32 02 32 02 32 02 32 02 32 02 32     .2.2.2.2.2.2.2.2
    1c54:	02 32 02 32 02 32 02 32 02 32 02 32 02 32 02 32     .2.2.2.2.2.2.2.2
    1c64:	02 32 02 32 02 32 02 32 02 32 02 32 02 32 90 32     .2.2.2.2.2.2.2.2

00001c74 <getcFuncs>:
    1c74:	39 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31     91.1.1.1.1.1.1.1
    1c84:	8e 31 0c 31 39 31 0c 31 0c 31 39 31 0c 31 0c 31     .1.191.1.191.1.1
    1c94:	0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31     .1.1.1.1.1.1.1.1
    1ca4:	0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31     .1.1.1.1.1.1.1.1
    1cb4:	0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31     .1.1.1.1.1.1.1.1
    1cc4:	0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31     .1.1.1.1.1.1.1.1
    1cd4:	0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31     .1.1.1.1.1.1.1.1
    1ce4:	0c 31 0c 31 0c 31 77 31 0c 31 0c 31 0c 31 0c 31     .1.1.1w1.1.1.1.1
    1cf4:	0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31     .1.1.1.1.1.1.1.1
    1d04:	0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31     .1.1.1.1.1.1.1.1
    1d14:	0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31     .1.1.1.1.1.1.1.1
    1d24:	0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31     .1.1.1.1.1.1.1.1
    1d34:	0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31     .1.1.1.1.1.1.1.1
    1d44:	0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31     .1.1.1.1.1.1.1.1
    1d54:	0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31     .1.1.1.1.1.1.1.1
    1d64:	0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 0c 31 8e 31     .1.1.1.1.1.1.1.1

00001d74 <pstr_inf>:
    1d74:	49 4e 46                                            INF

00001d77 <pstr_inity>:
    1d77:	49 4e 49 54 59                                      INITY

00001d7c <pstr_nan>:
    1d7c:	4e 41 4e                                            NAN

00001d7f <pwr_m10>:
    1d7f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1d8f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001d97 <pwr_p10>:
    1d97:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1da7:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1db7:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1dc7:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1dd7:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1de7:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1df7:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1e07:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1e17:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1e27:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1e37:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1e47:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1e57:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1e67:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1e77:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1e87:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1e97:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1ea7:	3d 27 00                                            ='.

00001eaa <__ctors_end>:
    1eaa:	11 24       	eor	r1, r1
    1eac:	1f be       	out	0x3f, r1	; 63
    1eae:	cf ef       	ldi	r28, 0xFF	; 255
    1eb0:	df e5       	ldi	r29, 0x5F	; 95
    1eb2:	de bf       	out	0x3e, r29	; 62
    1eb4:	cd bf       	out	0x3d, r28	; 61
    1eb6:	00 e0       	ldi	r16, 0x00	; 0
    1eb8:	0c bf       	out	0x3c, r16	; 60

00001eba <__do_copy_data>:
    1eba:	11 e2       	ldi	r17, 0x21	; 33
    1ebc:	a0 e0       	ldi	r26, 0x00	; 0
    1ebe:	b0 e2       	ldi	r27, 0x20	; 32
    1ec0:	e0 ec       	ldi	r30, 0xC0	; 192
    1ec2:	f3 e9       	ldi	r31, 0x93	; 147
    1ec4:	00 e0       	ldi	r16, 0x00	; 0
    1ec6:	0b bf       	out	0x3b, r16	; 59
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <__do_copy_data+0x14>
    1eca:	07 90       	elpm	r0, Z+
    1ecc:	0d 92       	st	X+, r0
    1ece:	a4 30       	cpi	r26, 0x04	; 4
    1ed0:	b1 07       	cpc	r27, r17
    1ed2:	d9 f7       	brne	.-10     	; 0x1eca <__do_copy_data+0x10>

00001ed4 <__do_clear_bss>:
    1ed4:	15 e2       	ldi	r17, 0x25	; 37
    1ed6:	a4 e0       	ldi	r26, 0x04	; 4
    1ed8:	b1 e2       	ldi	r27, 0x21	; 33
    1eda:	01 c0       	rjmp	.+2      	; 0x1ede <.do_clear_bss_start>

00001edc <.do_clear_bss_loop>:
    1edc:	1d 92       	st	X+, r1

00001ede <.do_clear_bss_start>:
    1ede:	a8 30       	cpi	r26, 0x08	; 8
    1ee0:	b1 07       	cpc	r27, r17
    1ee2:	e1 f7       	brne	.-8      	; 0x1edc <.do_clear_bss_loop>
    1ee4:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <main>
    1ee8:	0c 94 de 49 	jmp	0x93bc	; 0x93bc <_exit>

00001eec <__bad_interrupt>:
    1eec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001ef0 <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1ef0:	f8 94       	cli
	xmega_init();				// xmega setup
    1ef2:	0e 94 bc 1b 	call	0x3778	; 0x3778 <xmega_init>
	xio_init();					// xmega io subsystem
    1ef6:	0e 94 8a 29 	call	0x5314	; 0x5314 <xio_init>

	cfg_init();					// get config record from eeprom
    1efa:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <cfg_init>
	st_init(); 					// stepper subsystem
    1efe:	0e 94 64 24 	call	0x48c8	; 0x48c8 <st_init>
	ls_init();					// limit switches
    1f02:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <ls_init>
	mv_init();					// move buffers
    1f06:	0e 94 cc 2c 	call	0x5998	; 0x5998 <mv_init>
	mc_init();					// motion control subsystem
    1f0a:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <mc_init>
	spindle_init();				// spindle controller
    1f0e:	0e 94 48 24 	call	0x4890	; 0x4890 <spindle_init>
	en_init();					// encoders
    1f12:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <en_init>
	gc_init();					// gcode-parser
    1f16:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <gc_init>
	dd_init();					// direct drive commands
    1f1a:	0e 94 c8 2c 	call	0x5990	; 0x5990 <dd_init>
	tg_init();					// tinyg parsers
    1f1e:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1f22:	0e 94 4a 28 	call	0x5094	; 0x5094 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1f26:	e0 ea       	ldi	r30, 0xA0	; 160
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 91 a2 00 	lds	r24, 0x00A2
    1f2e:	81 60       	ori	r24, 0x01	; 1
    1f30:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1f32:	80 91 a2 00 	lds	r24, 0x00A2
    1f36:	82 60       	ori	r24, 0x02	; 2
    1f38:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1f3a:	80 91 a2 00 	lds	r24, 0x00A2
    1f3e:	84 60       	ori	r24, 0x04	; 4
    1f40:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1f42:	78 94       	sei

// Debug help: Pre-load the USB RX (input) buffer with some test strings
// Be mindful of the char limit on the RX_BUFFER_SIZE (circular buffer)

//	xio_queue_RX_char_usb(ETX);			// send control-c (kill)
	xio_queue_RX_string_usb("f\n");
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e2       	ldi	r25, 0x20	; 32
    1f48:	0e 94 62 34 	call	0x68c4	; 0x68c4 <xio_queue_RX_string_usb>
	for(;;){
		tg_repeater();		// this node receives on USB and repeats to RS485
	}
#else
	for(;;){
		tg_controller();	// this node executes gcode blocks received via RS485
    1f4c:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <tg_controller>
    1f50:	fd cf       	rjmp	.-6      	; 0x1f4c <main+0x5c>

00001f52 <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1f52:	80 93 17 21 	sts	0x2117, r24
	gc.plane_axis_1 = axis_1;
    1f56:	60 93 18 21 	sts	0x2118, r22
	gc.plane_axis_2 = axis_2;
    1f5a:	40 93 19 21 	sts	0x2119, r20
}
    1f5e:	08 95       	ret

00001f60 <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1f60:	ef 92       	push	r14
    1f62:	ff 92       	push	r15
    1f64:	0f 93       	push	r16
    1f66:	1f 93       	push	r17
    1f68:	7b 01       	movw	r14, r22
    1f6a:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    1f6c:	80 91 12 21 	lds	r24, 0x2112
    1f70:	88 23       	and	r24, r24
    1f72:	51 f0       	breq	.+20     	; 0x1f88 <to_millimeters+0x28>
    1f74:	c8 01       	movw	r24, r16
    1f76:	b7 01       	movw	r22, r14
    1f78:	25 e8       	ldi	r18, 0x85	; 133
    1f7a:	32 e4       	ldi	r19, 0x42	; 66
    1f7c:	41 e2       	ldi	r20, 0x21	; 33
    1f7e:	5d e3       	ldi	r21, 0x3D	; 61
    1f80:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    1f84:	7b 01       	movw	r14, r22
    1f86:	8c 01       	movw	r16, r24
}
    1f88:	b7 01       	movw	r22, r14
    1f8a:	c8 01       	movw	r24, r16
    1f8c:	1f 91       	pop	r17
    1f8e:	0f 91       	pop	r16
    1f90:	ff 90       	pop	r15
    1f92:	ef 90       	pop	r14
    1f94:	08 95       	ret

00001f96 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    1f96:	88 e5       	ldi	r24, 0x58	; 88
    1f98:	e4 e0       	ldi	r30, 0x04	; 4
    1f9a:	f1 e2       	ldi	r31, 0x21	; 33
    1f9c:	df 01       	movw	r26, r30
    1f9e:	1d 92       	st	X+, r1
    1fa0:	8a 95       	dec	r24
    1fa2:	e9 f7       	brne	.-6      	; 0x1f9e <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a0 e0       	ldi	r26, 0x00	; 0
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	80 93 1a 21 	sts	0x211A, r24
    1fb0:	90 93 1b 21 	sts	0x211B, r25
    1fb4:	a0 93 1c 21 	sts	0x211C, r26
    1fb8:	b0 93 1d 21 	sts	0x211D, r27
	gc.radius = 0;							// radius value
    1fbc:	80 93 1e 21 	sts	0x211E, r24
    1fc0:	90 93 1f 21 	sts	0x211F, r25
    1fc4:	a0 93 20 21 	sts	0x2120, r26
    1fc8:	b0 93 21 21 	sts	0x2121, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    1fcc:	80 91 79 22 	lds	r24, 0x2279
    1fd0:	90 91 7a 22 	lds	r25, 0x227A
    1fd4:	a0 91 7b 22 	lds	r26, 0x227B
    1fd8:	b0 91 7c 22 	lds	r27, 0x227C
    1fdc:	80 93 22 21 	sts	0x2122, r24
    1fe0:	90 93 23 21 	sts	0x2123, r25
    1fe4:	a0 93 24 21 	sts	0x2124, r26
    1fe8:	b0 93 25 21 	sts	0x2125, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    1fec:	80 91 7d 22 	lds	r24, 0x227D
    1ff0:	90 91 7e 22 	lds	r25, 0x227E
    1ff4:	a0 91 7f 22 	lds	r26, 0x227F
    1ff8:	b0 91 80 22 	lds	r27, 0x2280
    1ffc:	80 93 26 21 	sts	0x2126, r24
    2000:	90 93 27 21 	sts	0x2127, r25
    2004:	a0 93 28 21 	sts	0x2128, r26
    2008:	b0 93 29 21 	sts	0x2129, r27

	gc.absolute_mode = TRUE;
    200c:	21 e0       	ldi	r18, 0x01	; 1
    200e:	20 93 13 21 	sts	0x2113, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a0 e8       	ldi	r26, 0x80	; 128
    2018:	bf eb       	ldi	r27, 0xBF	; 191
    201a:	80 93 2e 21 	sts	0x212E, r24
    201e:	90 93 2f 21 	sts	0x212F, r25
    2022:	a0 93 30 21 	sts	0x2130, r26
    2026:	b0 93 31 21 	sts	0x2131, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    202a:	10 92 14 21 	sts	0x2114, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    202e:	10 92 16 21 	sts	0x2116, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    2032:	10 92 0e 21 	sts	0x210E, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    2036:	10 92 17 21 	sts	0x2117, r1
	gc.plane_axis_1 = axis_1;
    203a:	20 93 18 21 	sts	0x2118, r18
	gc.plane_axis_2 = axis_2;
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	80 93 19 21 	sts	0x2119, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X, Y, Z);
}
    2044:	08 95       	ret

00002046 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    2046:	4f 92       	push	r4
    2048:	5f 92       	push	r5
    204a:	6f 92       	push	r6
    204c:	7f 92       	push	r7
    204e:	8f 92       	push	r8
    2050:	9f 92       	push	r9
    2052:	af 92       	push	r10
    2054:	bf 92       	push	r11
    2056:	cf 92       	push	r12
    2058:	df 92       	push	r13
    205a:	ef 92       	push	r14
    205c:	ff 92       	push	r15
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	0f 92       	push	r0
    2068:	0f 92       	push	r0
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	3b 01       	movw	r6, r22
    2070:	2a 01       	movw	r4, r20
    2072:	49 01       	movw	r8, r18
    2074:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    2076:	d8 01       	movw	r26, r16
    2078:	ed 91       	ld	r30, X+
    207a:	fc 91       	ld	r31, X
    207c:	e2 0f       	add	r30, r18
    207e:	f3 1f       	adc	r31, r19
    2080:	e0 81       	ld	r30, Z
    2082:	ee 23       	and	r30, r30
    2084:	41 f0       	breq	.+16     	; 0x2096 <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    2086:	dc 01       	movw	r26, r24
    2088:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    208a:	e1 54       	subi	r30, 0x41	; 65
    208c:	ea 31       	cpi	r30, 0x1A	; 26
    208e:	30 f0       	brcs	.+12     	; 0x209c <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    2090:	8d e0       	ldi	r24, 0x0D	; 13
    2092:	80 93 04 21 	sts	0x2104, r24
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	35 c0       	rjmp	.+106    	; 0x2106 <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    209c:	f8 01       	movw	r30, r16
    209e:	80 81       	ld	r24, Z
    20a0:	91 81       	ldd	r25, Z+1	; 0x01
    20a2:	01 96       	adiw	r24, 0x01	; 1
    20a4:	80 83       	st	Z, r24
    20a6:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    20a8:	89 01       	movw	r16, r18
    20aa:	08 0f       	add	r16, r24
    20ac:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    20ae:	c8 01       	movw	r24, r16
    20b0:	be 01       	movw	r22, r28
    20b2:	6f 5f       	subi	r22, 0xFF	; 255
    20b4:	7f 4f       	sbci	r23, 0xFF	; 255
    20b6:	0e 94 0a 46 	call	0x8c14	; 0x8c14 <strtod>
    20ba:	6b 01       	movw	r12, r22
    20bc:	7c 01       	movw	r14, r24
    20be:	d3 01       	movw	r26, r6
    20c0:	6d 93       	st	X+, r22
    20c2:	7d 93       	st	X+, r23
    20c4:	8d 93       	st	X+, r24
    20c6:	9c 93       	st	X, r25
    20c8:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	9a 81       	ldd	r25, Y+2	; 0x02
    20ce:	80 17       	cp	r24, r16
    20d0:	91 07       	cpc	r25, r17
    20d2:	11 f4       	brne	.+4      	; 0x20d8 <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    20d4:	80 e1       	ldi	r24, 0x10	; 16
    20d6:	dd cf       	rjmp	.-70     	; 0x2092 <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    20d8:	88 19       	sub	r24, r8
    20da:	99 09       	sbc	r25, r9
    20dc:	f5 01       	movw	r30, r10
    20de:	80 83       	st	Z, r24
    20e0:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    20e2:	c7 01       	movw	r24, r14
    20e4:	b6 01       	movw	r22, r12
    20e6:	0e 94 6f 45 	call	0x8ade	; 0x8ade <trunc>
    20ea:	9b 01       	movw	r18, r22
    20ec:	ac 01       	movw	r20, r24
    20ee:	c7 01       	movw	r24, r14
    20f0:	b6 01       	movw	r22, r12
    20f2:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    20f6:	d2 01       	movw	r26, r4
    20f8:	6d 93       	st	X+, r22
    20fa:	7d 93       	st	X+, r23
    20fc:	8d 93       	st	X+, r24
    20fe:	9c 93       	st	X, r25
    2100:	13 97       	sbiw	r26, 0x03	; 3
    2102:	21 e0       	ldi	r18, 0x01	; 1
    2104:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    2106:	c9 01       	movw	r24, r18
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	1f 91       	pop	r17
    2112:	0f 91       	pop	r16
    2114:	ff 90       	pop	r15
    2116:	ef 90       	pop	r14
    2118:	df 90       	pop	r13
    211a:	cf 90       	pop	r12
    211c:	bf 90       	pop	r11
    211e:	af 90       	pop	r10
    2120:	9f 90       	pop	r9
    2122:	8f 90       	pop	r8
    2124:	7f 90       	pop	r7
    2126:	6f 90       	pop	r6
    2128:	5f 90       	pop	r5
    212a:	4f 90       	pop	r4
    212c:	08 95       	ret

0000212e <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    212e:	af 92       	push	r10
    2130:	bf 92       	push	r11
    2132:	cf 92       	push	r12
    2134:	df 92       	push	r13
    2136:	ef 92       	push	r14
    2138:	ff 92       	push	r15
    213a:	0f 93       	push	r16
    213c:	1f 93       	push	r17
    213e:	79 01       	movw	r14, r18
    2140:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    2142:	5f 77       	andi	r21, 0x7F	; 127
    2144:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    2148:	0e 94 c4 41 	call	0x8388	; 0x8388 <atan>
    214c:	5b 01       	movw	r10, r22
    214e:	6c 01       	movw	r12, r24

	if (y>0) {
    2150:	c8 01       	movw	r24, r16
    2152:	b7 01       	movw	r22, r14
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e0       	ldi	r20, 0x00	; 0
    215a:	50 e0       	ldi	r21, 0x00	; 0
    215c:	0e 94 ef 43 	call	0x87de	; 0x87de <__gesf2>
    2160:	18 16       	cp	r1, r24
    2162:	cc f0       	brlt	.+50     	; 0x2196 <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    2164:	c6 01       	movw	r24, r12
    2166:	b5 01       	movw	r22, r10
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e0       	ldi	r20, 0x00	; 0
    216e:	50 e0       	ldi	r21, 0x00	; 0
    2170:	0e 94 ef 43 	call	0x87de	; 0x87de <__gesf2>
    2174:	18 16       	cp	r1, r24
    2176:	2c f4       	brge	.+10     	; 0x2182 <theta+0x54>
	    {
			return(M_PI-theta);
    2178:	6b ed       	ldi	r22, 0xDB	; 219
    217a:	7f e0       	ldi	r23, 0x0F	; 15
    217c:	89 e4       	ldi	r24, 0x49	; 73
    217e:	90 e4       	ldi	r25, 0x40	; 64
    2180:	04 c0       	rjmp	.+8      	; 0x218a <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    2182:	6b ed       	ldi	r22, 0xDB	; 219
    2184:	7f e0       	ldi	r23, 0x0F	; 15
    2186:	89 e4       	ldi	r24, 0x49	; 73
    2188:	90 ec       	ldi	r25, 0xC0	; 192
    218a:	a6 01       	movw	r20, r12
    218c:	95 01       	movw	r18, r10
    218e:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    2192:	5b 01       	movw	r10, r22
    2194:	6c 01       	movw	r12, r24
		}
	}
}
    2196:	b5 01       	movw	r22, r10
    2198:	c6 01       	movw	r24, r12
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	ff 90       	pop	r15
    21a0:	ef 90       	pop	r14
    21a2:	df 90       	pop	r13
    21a4:	cf 90       	pop	r12
    21a6:	bf 90       	pop	r11
    21a8:	af 90       	pop	r10
    21aa:	08 95       	ret

000021ac <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    21ac:	2f 92       	push	r2
    21ae:	3f 92       	push	r3
    21b0:	4f 92       	push	r4
    21b2:	5f 92       	push	r5
    21b4:	6f 92       	push	r6
    21b6:	7f 92       	push	r7
    21b8:	8f 92       	push	r8
    21ba:	9f 92       	push	r9
    21bc:	af 92       	push	r10
    21be:	bf 92       	push	r11
    21c0:	cf 92       	push	r12
    21c2:	df 92       	push	r13
    21c4:	ef 92       	push	r14
    21c6:	ff 92       	push	r15
    21c8:	0f 93       	push	r16
    21ca:	1f 93       	push	r17
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	68 97       	sbiw	r28, 0x18	; 24
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	de bf       	out	0x3e, r29	; 62
    21da:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    21dc:	19 82       	std	Y+1, r1	; 0x01
    21de:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    21e0:	ee e3       	ldi	r30, 0x3E	; 62
    21e2:	f1 e2       	ldi	r31, 0x21	; 33
    21e4:	8c e0       	ldi	r24, 0x0C	; 12
    21e6:	df 01       	movw	r26, r30
    21e8:	28 2f       	mov	r18, r24
    21ea:	1d 92       	st	X+, r1
    21ec:	2a 95       	dec	r18
    21ee:	e9 f7       	brne	.-6      	; 0x21ea <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    21f0:	3c 96       	adiw	r30, 0x0c	; 12
    21f2:	df 01       	movw	r26, r30
    21f4:	1d 92       	st	X+, r1
    21f6:	8a 95       	dec	r24
    21f8:	e9 f7       	brne	.-6      	; 0x21f4 <gc_execute_block+0x48>

	gc.status = TG_OK;
    21fa:	10 92 04 21 	sts	0x2104, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    21fe:	10 92 15 21 	sts	0x2115, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2202:	5e 01       	movw	r10, r28
    2204:	08 94       	sec
    2206:	a1 1c       	adc	r10, r1
    2208:	b1 1c       	adc	r11, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    220a:	ff 24       	eor	r15, r15
    220c:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    220e:	be e0       	ldi	r27, 0x0E	; 14
    2210:	cb 2e       	mov	r12, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2212:	a2 e0       	ldi	r26, 0x02	; 2
    2214:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    2216:	77 24       	eor	r7, r7
    2218:	7a 94       	dec	r7

					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    221a:	f3 e0       	ldi	r31, 0x03	; 3
    221c:	df 2e       	mov	r13, r31

					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    221e:	e4 e0       	ldi	r30, 0x04	; 4
    2220:	6e 2e       	mov	r6, r30
    2222:	0a c1       	rjmp	.+532    	; 0x2438 <gc_execute_block+0x28c>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    2224:	80 91 05 21 	lds	r24, 0x2105
    2228:	8d 34       	cpi	r24, 0x4D	; 77
    222a:	09 f4       	brne	.+2      	; 0x222e <gc_execute_block+0x82>
    222c:	be c0       	rjmp	.+380    	; 0x23aa <gc_execute_block+0x1fe>
    222e:	84 35       	cpi	r24, 0x54	; 84
    2230:	09 f4       	brne	.+2      	; 0x2234 <gc_execute_block+0x88>
    2232:	f0 c0       	rjmp	.+480    	; 0x2414 <gc_execute_block+0x268>
    2234:	87 34       	cpi	r24, 0x47	; 71
    2236:	09 f0       	breq	.+2      	; 0x223a <gc_execute_block+0x8e>
    2238:	fb c0       	rjmp	.+502    	; 0x2430 <gc_execute_block+0x284>
			case 'G':
				switch((int)gc.value) {
    223a:	60 91 06 21 	lds	r22, 0x2106
    223e:	70 91 07 21 	lds	r23, 0x2107
    2242:	80 91 08 21 	lds	r24, 0x2108
    2246:	90 91 09 21 	lds	r25, 0x2109
    224a:	0e 94 6e 42 	call	0x84dc	; 0x84dc <__fixsfsi>
    224e:	65 31       	cpi	r22, 0x15	; 21
    2250:	71 05       	cpc	r23, r1
    2252:	09 f4       	brne	.+2      	; 0x2256 <gc_execute_block+0xaa>
    2254:	8f c0       	rjmp	.+286    	; 0x2374 <gc_execute_block+0x1c8>
    2256:	66 31       	cpi	r22, 0x16	; 22
    2258:	71 05       	cpc	r23, r1
    225a:	84 f5       	brge	.+96     	; 0x22bc <gc_execute_block+0x110>
    225c:	64 30       	cpi	r22, 0x04	; 4
    225e:	71 05       	cpc	r23, r1
    2260:	09 f4       	brne	.+2      	; 0x2264 <gc_execute_block+0xb8>
    2262:	6d c0       	rjmp	.+218    	; 0x233e <gc_execute_block+0x192>
    2264:	65 30       	cpi	r22, 0x05	; 5
    2266:	71 05       	cpc	r23, r1
    2268:	a4 f4       	brge	.+40     	; 0x2292 <gc_execute_block+0xe6>
    226a:	61 30       	cpi	r22, 0x01	; 1
    226c:	71 05       	cpc	r23, r1
    226e:	09 f4       	brne	.+2      	; 0x2272 <gc_execute_block+0xc6>
    2270:	57 c0       	rjmp	.+174    	; 0x2320 <gc_execute_block+0x174>
    2272:	62 30       	cpi	r22, 0x02	; 2
    2274:	71 05       	cpc	r23, r1
    2276:	24 f4       	brge	.+8      	; 0x2280 <gc_execute_block+0xd4>
    2278:	67 2b       	or	r22, r23
    227a:	09 f4       	brne	.+2      	; 0x227e <gc_execute_block+0xd2>
    227c:	4c c0       	rjmp	.+152    	; 0x2316 <gc_execute_block+0x16a>
    227e:	c7 c0       	rjmp	.+398    	; 0x240e <gc_execute_block+0x262>
    2280:	62 30       	cpi	r22, 0x02	; 2
    2282:	71 05       	cpc	r23, r1
    2284:	09 f4       	brne	.+2      	; 0x2288 <gc_execute_block+0xdc>
    2286:	51 c0       	rjmp	.+162    	; 0x232a <gc_execute_block+0x17e>
    2288:	63 30       	cpi	r22, 0x03	; 3
    228a:	71 05       	cpc	r23, r1
    228c:	09 f0       	breq	.+2      	; 0x2290 <gc_execute_block+0xe4>
    228e:	bf c0       	rjmp	.+382    	; 0x240e <gc_execute_block+0x262>
    2290:	51 c0       	rjmp	.+162    	; 0x2334 <gc_execute_block+0x188>
    2292:	62 31       	cpi	r22, 0x12	; 18
    2294:	71 05       	cpc	r23, r1
    2296:	09 f4       	brne	.+2      	; 0x229a <gc_execute_block+0xee>
    2298:	5c c0       	rjmp	.+184    	; 0x2352 <gc_execute_block+0x1a6>
    229a:	63 31       	cpi	r22, 0x13	; 19
    229c:	71 05       	cpc	r23, r1
    229e:	2c f4       	brge	.+10     	; 0x22aa <gc_execute_block+0xfe>
    22a0:	61 31       	cpi	r22, 0x11	; 17
    22a2:	71 05       	cpc	r23, r1
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <gc_execute_block+0xfc>
    22a6:	b3 c0       	rjmp	.+358    	; 0x240e <gc_execute_block+0x262>
    22a8:	4d c0       	rjmp	.+154    	; 0x2344 <gc_execute_block+0x198>
    22aa:	63 31       	cpi	r22, 0x13	; 19
    22ac:	71 05       	cpc	r23, r1
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <gc_execute_block+0x106>
    22b0:	57 c0       	rjmp	.+174    	; 0x2360 <gc_execute_block+0x1b4>
    22b2:	64 31       	cpi	r22, 0x14	; 20
    22b4:	71 05       	cpc	r23, r1
    22b6:	09 f0       	breq	.+2      	; 0x22ba <gc_execute_block+0x10e>
    22b8:	aa c0       	rjmp	.+340    	; 0x240e <gc_execute_block+0x262>
    22ba:	59 c0       	rjmp	.+178    	; 0x236e <gc_execute_block+0x1c2>
    22bc:	6a 35       	cpi	r22, 0x5A	; 90
    22be:	71 05       	cpc	r23, r1
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <gc_execute_block+0x118>
    22c2:	64 c0       	rjmp	.+200    	; 0x238c <gc_execute_block+0x1e0>
    22c4:	6b 35       	cpi	r22, 0x5B	; 91
    22c6:	71 05       	cpc	r23, r1
    22c8:	ac f4       	brge	.+42     	; 0x22f4 <gc_execute_block+0x148>
    22ca:	6e 31       	cpi	r22, 0x1E	; 30
    22cc:	71 05       	cpc	r23, r1
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <gc_execute_block+0x126>
    22d0:	54 c0       	rjmp	.+168    	; 0x237a <gc_execute_block+0x1ce>
    22d2:	6f 31       	cpi	r22, 0x1F	; 31
    22d4:	71 05       	cpc	r23, r1
    22d6:	2c f4       	brge	.+10     	; 0x22e2 <gc_execute_block+0x136>
    22d8:	6c 31       	cpi	r22, 0x1C	; 28
    22da:	71 05       	cpc	r23, r1
    22dc:	09 f0       	breq	.+2      	; 0x22e0 <gc_execute_block+0x134>
    22de:	97 c0       	rjmp	.+302    	; 0x240e <gc_execute_block+0x262>
    22e0:	4c c0       	rjmp	.+152    	; 0x237a <gc_execute_block+0x1ce>
    22e2:	65 33       	cpi	r22, 0x35	; 53
    22e4:	71 05       	cpc	r23, r1
    22e6:	09 f4       	brne	.+2      	; 0x22ea <gc_execute_block+0x13e>
    22e8:	4b c0       	rjmp	.+150    	; 0x2380 <gc_execute_block+0x1d4>
    22ea:	60 35       	cpi	r22, 0x50	; 80
    22ec:	71 05       	cpc	r23, r1
    22ee:	09 f0       	breq	.+2      	; 0x22f2 <gc_execute_block+0x146>
    22f0:	8e c0       	rjmp	.+284    	; 0x240e <gc_execute_block+0x262>
    22f2:	49 c0       	rjmp	.+146    	; 0x2386 <gc_execute_block+0x1da>
    22f4:	6c 35       	cpi	r22, 0x5C	; 92
    22f6:	71 05       	cpc	r23, r1
    22f8:	09 f4       	brne	.+2      	; 0x22fc <gc_execute_block+0x150>
    22fa:	4e c0       	rjmp	.+156    	; 0x2398 <gc_execute_block+0x1ec>
    22fc:	6c 35       	cpi	r22, 0x5C	; 92
    22fe:	71 05       	cpc	r23, r1
    2300:	0c f4       	brge	.+2      	; 0x2304 <gc_execute_block+0x158>
    2302:	47 c0       	rjmp	.+142    	; 0x2392 <gc_execute_block+0x1e6>
    2304:	6d 35       	cpi	r22, 0x5D	; 93
    2306:	71 05       	cpc	r23, r1
    2308:	09 f4       	brne	.+2      	; 0x230c <gc_execute_block+0x160>
    230a:	49 c0       	rjmp	.+146    	; 0x239e <gc_execute_block+0x1f2>
    230c:	6e 35       	cpi	r22, 0x5E	; 94
    230e:	71 05       	cpc	r23, r1
    2310:	09 f0       	breq	.+2      	; 0x2314 <gc_execute_block+0x168>
    2312:	7d c0       	rjmp	.+250    	; 0x240e <gc_execute_block+0x262>
    2314:	47 c0       	rjmp	.+142    	; 0x23a4 <gc_execute_block+0x1f8>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    2316:	f0 92 0e 21 	sts	0x210E, r15
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    231a:	10 92 10 21 	sts	0x2110, r1
    231e:	88 c0       	rjmp	.+272    	; 0x2430 <gc_execute_block+0x284>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    2320:	f0 92 0e 21 	sts	0x210E, r15
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    2324:	f0 92 10 21 	sts	0x2110, r15
    2328:	83 c0       	rjmp	.+262    	; 0x2430 <gc_execute_block+0x284>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    232a:	f0 92 0e 21 	sts	0x210E, r15
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    232e:	e0 92 10 21 	sts	0x2110, r14
    2332:	7e c0       	rjmp	.+252    	; 0x2430 <gc_execute_block+0x284>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    2334:	f0 92 0e 21 	sts	0x210E, r15
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    2338:	d0 92 10 21 	sts	0x2110, r13
    233c:	79 c0       	rjmp	.+242    	; 0x2430 <gc_execute_block+0x284>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    233e:	e0 92 0e 21 	sts	0x210E, r14
    2342:	76 c0       	rjmp	.+236    	; 0x2430 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    2344:	10 92 17 21 	sts	0x2117, r1
	gc.plane_axis_1 = axis_1;
    2348:	f0 92 18 21 	sts	0x2118, r15
	gc.plane_axis_2 = axis_2;
    234c:	e0 92 19 21 	sts	0x2119, r14
    2350:	6f c0       	rjmp	.+222    	; 0x2430 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    2352:	10 92 17 21 	sts	0x2117, r1
	gc.plane_axis_1 = axis_1;
    2356:	e0 92 18 21 	sts	0x2118, r14
	gc.plane_axis_2 = axis_2;
    235a:	f0 92 19 21 	sts	0x2119, r15
    235e:	68 c0       	rjmp	.+208    	; 0x2430 <gc_execute_block+0x284>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    2360:	f0 92 17 21 	sts	0x2117, r15
	gc.plane_axis_1 = axis_1;
    2364:	e0 92 18 21 	sts	0x2118, r14
	gc.plane_axis_2 = axis_2;
    2368:	10 92 19 21 	sts	0x2119, r1
    236c:	61 c0       	rjmp	.+194    	; 0x2430 <gc_execute_block+0x284>

					case 17: { select_plane(X, Y, Z); break; }
					case 18: { select_plane(X, Z, Y); break; }
					case 19: { select_plane(Y, Z, X); break; }

					case 20: { gc.inches_mode = TRUE; break; }
    236e:	f0 92 12 21 	sts	0x2112, r15
    2372:	5e c0       	rjmp	.+188    	; 0x2430 <gc_execute_block+0x284>
					case 21: { gc.inches_mode = FALSE; break; }
    2374:	10 92 12 21 	sts	0x2112, r1
    2378:	5b c0       	rjmp	.+182    	; 0x2430 <gc_execute_block+0x284>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    237a:	d0 92 0e 21 	sts	0x210E, r13
    237e:	58 c0       	rjmp	.+176    	; 0x2430 <gc_execute_block+0x284>

					case 53: { gc.absolute_override = TRUE; break; }
    2380:	f0 92 16 21 	sts	0x2116, r15
    2384:	55 c0       	rjmp	.+170    	; 0x2430 <gc_execute_block+0x284>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2386:	60 92 10 21 	sts	0x2110, r6
    238a:	52 c0       	rjmp	.+164    	; 0x2430 <gc_execute_block+0x284>
					case 90: { gc.absolute_mode = TRUE; break; }
    238c:	f0 92 13 21 	sts	0x2113, r15
    2390:	4f c0       	rjmp	.+158    	; 0x2430 <gc_execute_block+0x284>
					case 91: { gc.absolute_mode = FALSE; break; }
    2392:	10 92 13 21 	sts	0x2113, r1
    2396:	4c c0       	rjmp	.+152    	; 0x2430 <gc_execute_block+0x284>
					case 92: { gc.set_origin_mode = TRUE; break; }
    2398:	f0 92 15 21 	sts	0x2115, r15
    239c:	49 c0       	rjmp	.+146    	; 0x2430 <gc_execute_block+0x284>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    239e:	f0 92 11 21 	sts	0x2111, r15
    23a2:	46 c0       	rjmp	.+140    	; 0x2430 <gc_execute_block+0x284>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    23a4:	10 92 11 21 	sts	0x2111, r1
    23a8:	43 c0       	rjmp	.+134    	; 0x2430 <gc_execute_block+0x284>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    23aa:	60 91 06 21 	lds	r22, 0x2106
    23ae:	70 91 07 21 	lds	r23, 0x2107
    23b2:	80 91 08 21 	lds	r24, 0x2108
    23b6:	90 91 09 21 	lds	r25, 0x2109
    23ba:	0e 94 6e 42 	call	0x84dc	; 0x84dc <__fixsfsi>
    23be:	63 30       	cpi	r22, 0x03	; 3
    23c0:	71 05       	cpc	r23, r1
    23c2:	e1 f0       	breq	.+56     	; 0x23fc <gc_execute_block+0x250>
    23c4:	64 30       	cpi	r22, 0x04	; 4
    23c6:	71 05       	cpc	r23, r1
    23c8:	34 f4       	brge	.+12     	; 0x23d6 <gc_execute_block+0x22a>
    23ca:	77 fd       	sbrc	r23, 7
    23cc:	20 c0       	rjmp	.+64     	; 0x240e <gc_execute_block+0x262>
    23ce:	62 30       	cpi	r22, 0x02	; 2
    23d0:	71 05       	cpc	r23, r1
    23d2:	74 f0       	brlt	.+28     	; 0x23f0 <gc_execute_block+0x244>
    23d4:	10 c0       	rjmp	.+32     	; 0x23f6 <gc_execute_block+0x24a>
    23d6:	65 30       	cpi	r22, 0x05	; 5
    23d8:	71 05       	cpc	r23, r1
    23da:	b1 f0       	breq	.+44     	; 0x2408 <gc_execute_block+0x25c>
    23dc:	65 30       	cpi	r22, 0x05	; 5
    23de:	71 05       	cpc	r23, r1
    23e0:	84 f0       	brlt	.+32     	; 0x2402 <gc_execute_block+0x256>
    23e2:	6e 31       	cpi	r22, 0x1E	; 30
    23e4:	71 05       	cpc	r23, r1
    23e6:	39 f0       	breq	.+14     	; 0x23f6 <gc_execute_block+0x24a>
    23e8:	6c 33       	cpi	r22, 0x3C	; 60
    23ea:	71 05       	cpc	r23, r1
    23ec:	81 f4       	brne	.+32     	; 0x240e <gc_execute_block+0x262>
    23ee:	03 c0       	rjmp	.+6      	; 0x23f6 <gc_execute_block+0x24a>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    23f0:	f0 92 0f 21 	sts	0x210F, r15
    23f4:	1d c0       	rjmp	.+58     	; 0x2430 <gc_execute_block+0x284>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    23f6:	e0 92 0f 21 	sts	0x210F, r14
    23fa:	1a c0       	rjmp	.+52     	; 0x2430 <gc_execute_block+0x284>
					case 3: gc.spindle_direction = 1; break;
    23fc:	f0 92 57 21 	sts	0x2157, r15
    2400:	17 c0       	rjmp	.+46     	; 0x2430 <gc_execute_block+0x284>
					case 4: gc.spindle_direction = -1; break;
    2402:	70 92 57 21 	sts	0x2157, r7
    2406:	14 c0       	rjmp	.+40     	; 0x2430 <gc_execute_block+0x284>
					case 5: gc.spindle_direction = 0; break;
    2408:	10 92 57 21 	sts	0x2157, r1
    240c:	11 c0       	rjmp	.+34     	; 0x2430 <gc_execute_block+0x284>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    240e:	c0 92 04 21 	sts	0x2104, r12
    2412:	0e c0       	rjmp	.+28     	; 0x2430 <gc_execute_block+0x284>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    2414:	60 91 06 21 	lds	r22, 0x2106
    2418:	70 91 07 21 	lds	r23, 0x2107
    241c:	80 91 08 21 	lds	r24, 0x2108
    2420:	90 91 09 21 	lds	r25, 0x2109
    2424:	0e 94 6f 45 	call	0x8ade	; 0x8ade <trunc>
    2428:	0e 94 73 42 	call	0x84e6	; 0x84e6 <__fixunssfsi>
    242c:	60 93 56 21 	sts	0x2156, r22
		}
		if(gc.status) {
    2430:	80 91 04 21 	lds	r24, 0x2104
    2434:	88 23       	and	r24, r24
    2436:	69 f4       	brne	.+26     	; 0x2452 <gc_execute_block+0x2a6>

	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2438:	85 e0       	ldi	r24, 0x05	; 5
    243a:	91 e2       	ldi	r25, 0x21	; 33
    243c:	66 e0       	ldi	r22, 0x06	; 6
    243e:	71 e2       	ldi	r23, 0x21	; 33
    2440:	4a e0       	ldi	r20, 0x0A	; 10
    2442:	51 e2       	ldi	r21, 0x21	; 33
    2444:	94 01       	movw	r18, r8
    2446:	85 01       	movw	r16, r10
    2448:	0e 94 23 10 	call	0x2046	; 0x2046 <_gc_next_statement>
    244c:	89 2b       	or	r24, r25
    244e:	09 f0       	breq	.+2      	; 0x2452 <gc_execute_block+0x2a6>
    2450:	e9 ce       	rjmp	.-558    	; 0x2224 <gc_execute_block+0x78>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    2452:	80 91 04 21 	lds	r24, 0x2104
    2456:	88 23       	and	r24, r24
    2458:	09 f0       	breq	.+2      	; 0x245c <gc_execute_block+0x2b0>
    245a:	99 c3       	rjmp	.+1842   	; 0x2b8e <gc_execute_block+0x9e2>
		return(gc.status); 
	}

	i = 0;
    245c:	19 82       	std	Y+1, r1	; 0x01
    245e:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    2460:	ea e4       	ldi	r30, 0x4A	; 74
    2462:	f1 e2       	ldi	r31, 0x21	; 33
    2464:	8c e0       	ldi	r24, 0x0C	; 12
    2466:	df 01       	movw	r26, r30
    2468:	1d 92       	st	X+, r1
    246a:	8a 95       	dec	r24
    246c:	e9 f7       	brne	.-6      	; 0x2468 <gc_execute_block+0x2bc>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    246e:	df 01       	movw	r26, r30
    2470:	1c 97       	sbiw	r26, 0x0c	; 12
    2472:	78 97       	sbiw	r30, 0x18	; 24
    2474:	8c e0       	ldi	r24, 0x0C	; 12
    2476:	01 90       	ld	r0, Z+
    2478:	0d 92       	st	X+, r0
    247a:	81 50       	subi	r24, 0x01	; 1
    247c:	e1 f7       	brne	.-8      	; 0x2476 <gc_execute_block+0x2ca>
    247e:	c6 c0       	rjmp	.+396    	; 0x260c <gc_execute_block+0x460>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2480:	c0 90 06 21 	lds	r12, 0x2106
    2484:	d0 90 07 21 	lds	r13, 0x2107
    2488:	e0 90 08 21 	lds	r14, 0x2108
    248c:	f0 90 09 21 	lds	r15, 0x2109
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    2490:	80 91 12 21 	lds	r24, 0x2112
    2494:	88 23       	and	r24, r24
    2496:	19 f4       	brne	.+6      	; 0x249e <gc_execute_block+0x2f2>
    2498:	a7 01       	movw	r20, r14
    249a:	96 01       	movw	r18, r12
    249c:	0a c0       	rjmp	.+20     	; 0x24b2 <gc_execute_block+0x306>
    249e:	c7 01       	movw	r24, r14
    24a0:	b6 01       	movw	r22, r12
    24a2:	25 e8       	ldi	r18, 0x85	; 133
    24a4:	32 e4       	ldi	r19, 0x42	; 66
    24a6:	41 e2       	ldi	r20, 0x21	; 33
    24a8:	5d e3       	ldi	r21, 0x3D	; 61
    24aa:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    24ae:	9b 01       	movw	r18, r22
    24b0:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    24b2:	20 93 2a 21 	sts	0x212A, r18
    24b6:	30 93 2b 21 	sts	0x212B, r19
    24ba:	40 93 2c 21 	sts	0x212C, r20
    24be:	50 93 2d 21 	sts	0x212D, r21
		switch(gc.letter) {
    24c2:	00 91 05 21 	lds	r16, 0x2105
    24c6:	00 35       	cpi	r16, 0x50	; 80
    24c8:	09 f4       	brne	.+2      	; 0x24cc <gc_execute_block+0x320>
    24ca:	47 c0       	rjmp	.+142    	; 0x255a <gc_execute_block+0x3ae>
    24cc:	01 35       	cpi	r16, 0x51	; 81
    24ce:	58 f4       	brcc	.+22     	; 0x24e6 <gc_execute_block+0x33a>
    24d0:	06 34       	cpi	r16, 0x46	; 70
    24d2:	c1 f0       	breq	.+48     	; 0x2504 <gc_execute_block+0x358>
    24d4:	06 34       	cpi	r16, 0x46	; 70
    24d6:	08 f4       	brcc	.+2      	; 0x24da <gc_execute_block+0x32e>
    24d8:	9f c0       	rjmp	.+318    	; 0x2618 <gc_execute_block+0x46c>
    24da:	80 2f       	mov	r24, r16
    24dc:	89 54       	subi	r24, 0x49	; 73
    24de:	83 30       	cpi	r24, 0x03	; 3
    24e0:	08 f0       	brcs	.+2      	; 0x24e4 <gc_execute_block+0x338>
    24e2:	9a c0       	rjmp	.+308    	; 0x2618 <gc_execute_block+0x46c>
    24e4:	2d c0       	rjmp	.+90     	; 0x2540 <gc_execute_block+0x394>
    24e6:	03 35       	cpi	r16, 0x53	; 83
    24e8:	09 f4       	brne	.+2      	; 0x24ec <gc_execute_block+0x340>
    24ea:	4b c0       	rjmp	.+150    	; 0x2582 <gc_execute_block+0x3d6>
    24ec:	04 35       	cpi	r16, 0x54	; 84
    24ee:	20 f4       	brcc	.+8      	; 0x24f8 <gc_execute_block+0x34c>
    24f0:	02 35       	cpi	r16, 0x52	; 82
    24f2:	09 f0       	breq	.+2      	; 0x24f6 <gc_execute_block+0x34a>
    24f4:	91 c0       	rjmp	.+290    	; 0x2618 <gc_execute_block+0x46c>
    24f6:	3a c0       	rjmp	.+116    	; 0x256c <gc_execute_block+0x3c0>
    24f8:	80 2f       	mov	r24, r16
    24fa:	88 55       	subi	r24, 0x58	; 88
    24fc:	83 30       	cpi	r24, 0x03	; 3
    24fe:	08 f0       	brcs	.+2      	; 0x2502 <gc_execute_block+0x356>
    2500:	8b c0       	rjmp	.+278    	; 0x2618 <gc_execute_block+0x46c>
    2502:	48 c0       	rjmp	.+144    	; 0x2594 <gc_execute_block+0x3e8>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    2504:	80 91 11 21 	lds	r24, 0x2111
    2508:	88 23       	and	r24, r24
    250a:	49 f0       	breq	.+18     	; 0x251e <gc_execute_block+0x372>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    250c:	20 93 2e 21 	sts	0x212E, r18
    2510:	30 93 2f 21 	sts	0x212F, r19
    2514:	40 93 30 21 	sts	0x2130, r20
    2518:	50 93 31 21 	sts	0x2131, r21
    251c:	7d c0       	rjmp	.+250    	; 0x2618 <gc_execute_block+0x46c>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    251e:	ca 01       	movw	r24, r20
    2520:	b9 01       	movw	r22, r18
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e7       	ldi	r20, 0x70	; 112
    2528:	52 e4       	ldi	r21, 0x42	; 66
    252a:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    252e:	60 93 22 21 	sts	0x2122, r22
    2532:	70 93 23 21 	sts	0x2123, r23
    2536:	80 93 24 21 	sts	0x2124, r24
    253a:	90 93 25 21 	sts	0x2125, r25
    253e:	6c c0       	rjmp	.+216    	; 0x2618 <gc_execute_block+0x46c>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    2540:	e0 2f       	mov	r30, r16
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	ee 0f       	add	r30, r30
    2546:	ff 1f       	adc	r31, r31
    2548:	ee 0f       	add	r30, r30
    254a:	ff 1f       	adc	r31, r31
    254c:	ea 5d       	subi	r30, 0xDA	; 218
    254e:	ff 4d       	sbci	r31, 0xDF	; 223
    2550:	20 83       	st	Z, r18
    2552:	31 83       	std	Z+1, r19	; 0x01
    2554:	42 83       	std	Z+2, r20	; 0x02
    2556:	53 83       	std	Z+3, r21	; 0x03
    2558:	5f c0       	rjmp	.+190    	; 0x2618 <gc_execute_block+0x46c>
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
    255a:	c0 92 1a 21 	sts	0x211A, r12
    255e:	d0 92 1b 21 	sts	0x211B, r13
    2562:	e0 92 1c 21 	sts	0x211C, r14
    2566:	f0 92 1d 21 	sts	0x211D, r15
    256a:	56 c0       	rjmp	.+172    	; 0x2618 <gc_execute_block+0x46c>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    256c:	20 93 1e 21 	sts	0x211E, r18
    2570:	30 93 1f 21 	sts	0x211F, r19
    2574:	40 93 20 21 	sts	0x2120, r20
    2578:	50 93 21 21 	sts	0x2121, r21
    257c:	70 92 14 21 	sts	0x2114, r7
    2580:	4b c0       	rjmp	.+150    	; 0x2618 <gc_execute_block+0x46c>
			case 'S': gc.spindle_speed = gc.value; break;
    2582:	c7 01       	movw	r24, r14
    2584:	b6 01       	movw	r22, r12
    2586:	0e 94 6e 42 	call	0x84dc	; 0x84dc <__fixsfsi>
    258a:	60 93 58 21 	sts	0x2158, r22
    258e:	70 93 59 21 	sts	0x2159, r23
    2592:	42 c0       	rjmp	.+132    	; 0x2618 <gc_execute_block+0x46c>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    2594:	80 91 15 21 	lds	r24, 0x2115
    2598:	88 23       	and	r24, r24
    259a:	69 f0       	breq	.+26     	; 0x25b6 <gc_execute_block+0x40a>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    259c:	e0 2f       	mov	r30, r16
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	ee 0f       	add	r30, r30
    25a2:	ff 1f       	adc	r31, r31
    25a4:	ee 0f       	add	r30, r30
    25a6:	ff 1f       	adc	r31, r31
    25a8:	ec 55       	subi	r30, 0x5C	; 92
    25aa:	f0 4e       	sbci	r31, 0xE0	; 224
    25ac:	26 a7       	std	Z+46, r18	; 0x2e
    25ae:	37 a7       	std	Z+47, r19	; 0x2f
    25b0:	40 ab       	std	Z+48, r20	; 0x30
    25b2:	51 ab       	std	Z+49, r21	; 0x31
    25b4:	31 c0       	rjmp	.+98     	; 0x2618 <gc_execute_block+0x46c>
				} else if (gc.absolute_mode || gc.absolute_override) {
    25b6:	80 91 13 21 	lds	r24, 0x2113
    25ba:	88 23       	and	r24, r24
    25bc:	21 f4       	brne	.+8      	; 0x25c6 <gc_execute_block+0x41a>
    25be:	80 91 16 21 	lds	r24, 0x2116
    25c2:	88 23       	and	r24, r24
    25c4:	69 f0       	breq	.+26     	; 0x25e0 <gc_execute_block+0x434>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    25c6:	e0 2f       	mov	r30, r16
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	ee 0f       	add	r30, r30
    25cc:	ff 1f       	adc	r31, r31
    25ce:	ee 0f       	add	r30, r30
    25d0:	ff 1f       	adc	r31, r31
    25d2:	ec 55       	subi	r30, 0x5C	; 92
    25d4:	f0 4e       	sbci	r31, 0xE0	; 224
    25d6:	22 af       	std	Z+58, r18	; 0x3a
    25d8:	33 af       	std	Z+59, r19	; 0x3b
    25da:	44 af       	std	Z+60, r20	; 0x3c
    25dc:	55 af       	std	Z+61, r21	; 0x3d
    25de:	1c c0       	rjmp	.+56     	; 0x2618 <gc_execute_block+0x46c>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    25e0:	10 e0       	ldi	r17, 0x00	; 0
    25e2:	00 0f       	add	r16, r16
    25e4:	11 1f       	adc	r17, r17
    25e6:	00 0f       	add	r16, r16
    25e8:	11 1f       	adc	r17, r17
    25ea:	0c 55       	subi	r16, 0x5C	; 92
    25ec:	10 4e       	sbci	r17, 0xE0	; 224
    25ee:	f8 01       	movw	r30, r16
    25f0:	62 ad       	ldd	r22, Z+58	; 0x3a
    25f2:	73 ad       	ldd	r23, Z+59	; 0x3b
    25f4:	84 ad       	ldd	r24, Z+60	; 0x3c
    25f6:	95 ad       	ldd	r25, Z+61	; 0x3d
    25f8:	0e 94 60 41 	call	0x82c0	; 0x82c0 <__addsf3>
    25fc:	d8 01       	movw	r26, r16
    25fe:	da 96       	adiw	r26, 0x3a	; 58
    2600:	6d 93       	st	X+, r22
    2602:	7d 93       	st	X+, r23
    2604:	8d 93       	st	X+, r24
    2606:	9c 93       	st	X, r25
    2608:	dd 97       	sbiw	r26, 0x3d	; 61
    260a:	06 c0       	rjmp	.+12     	; 0x2618 <gc_execute_block+0x46c>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    260c:	5e 01       	movw	r10, r28
    260e:	08 94       	sec
    2610:	a1 1c       	adc	r10, r1
    2612:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    2614:	77 24       	eor	r7, r7
    2616:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2618:	85 e0       	ldi	r24, 0x05	; 5
    261a:	91 e2       	ldi	r25, 0x21	; 33
    261c:	66 e0       	ldi	r22, 0x06	; 6
    261e:	71 e2       	ldi	r23, 0x21	; 33
    2620:	4a e0       	ldi	r20, 0x0A	; 10
    2622:	51 e2       	ldi	r21, 0x21	; 33
    2624:	94 01       	movw	r18, r8
    2626:	85 01       	movw	r16, r10
    2628:	0e 94 23 10 	call	0x2046	; 0x2046 <_gc_next_statement>
    262c:	89 2b       	or	r24, r25
    262e:	09 f0       	breq	.+2      	; 0x2632 <gc_execute_block+0x486>
    2630:	27 cf       	rjmp	.-434    	; 0x2480 <gc_execute_block+0x2d4>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    2632:	80 91 04 21 	lds	r24, 0x2104
    2636:	88 23       	and	r24, r24
    2638:	09 f0       	breq	.+2      	; 0x263c <gc_execute_block+0x490>
    263a:	a9 c2       	rjmp	.+1362   	; 0x2b8e <gc_execute_block+0x9e2>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    263c:	80 91 57 21 	lds	r24, 0x2157
    2640:	88 23       	and	r24, r24
    2642:	71 f0       	breq	.+28     	; 0x2660 <gc_execute_block+0x4b4>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    2644:	40 91 58 21 	lds	r20, 0x2158
    2648:	50 91 59 21 	lds	r21, 0x2159
    264c:	66 27       	eor	r22, r22
    264e:	57 fd       	sbrc	r21, 7
    2650:	60 95       	com	r22
    2652:	76 2f       	mov	r23, r22
    2654:	99 27       	eor	r25, r25
    2656:	87 fd       	sbrc	r24, 7
    2658:	90 95       	com	r25
    265a:	0e 94 4f 24 	call	0x489e	; 0x489e <spindle_run>
    265e:	02 c0       	rjmp	.+4      	; 0x2664 <gc_execute_block+0x4b8>
	} else {
		spindle_stop();
    2660:	0e 94 5f 24 	call	0x48be	; 0x48be <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    2664:	80 91 0e 21 	lds	r24, 0x210E
    2668:	82 30       	cpi	r24, 0x02	; 2
    266a:	49 f0       	breq	.+18     	; 0x267e <gc_execute_block+0x4d2>
    266c:	83 30       	cpi	r24, 0x03	; 3
    266e:	21 f0       	breq	.+8      	; 0x2678 <gc_execute_block+0x4cc>
    2670:	81 30       	cpi	r24, 0x01	; 1
    2672:	09 f0       	breq	.+2      	; 0x2676 <gc_execute_block+0x4ca>
    2674:	7d c2       	rjmp	.+1274   	; 0x2b70 <gc_execute_block+0x9c4>
    2676:	0e c0       	rjmp	.+28     	; 0x2694 <gc_execute_block+0x4e8>
		case NEXT_ACTION_DEFAULT: {				// nothing to do here
			break;
		}

		case NEXT_ACTION_GO_HOME: { 
			gc.status = mc_go_home(); 
    2678:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <mc_go_home>
    267c:	77 c2       	rjmp	.+1262   	; 0x2b6c <gc_execute_block+0x9c0>
			break;
		}

		case NEXT_ACTION_DWELL: {
			gc.status = mc_dwell(gc.dwell_time); 
    267e:	60 91 1a 21 	lds	r22, 0x211A
    2682:	70 91 1b 21 	lds	r23, 0x211B
    2686:	80 91 1c 21 	lds	r24, 0x211C
    268a:	90 91 1d 21 	lds	r25, 0x211D
    268e:	0e 94 3a 1c 	call	0x3874	; 0x3874 <mc_dwell>
    2692:	6c c2       	rjmp	.+1240   	; 0x2b6c <gc_execute_block+0x9c0>
			break;
		}

		case NEXT_ACTION_MOTION: {
			switch (gc.motion_mode) {
    2694:	b0 91 10 21 	lds	r27, 0x2110
    2698:	b8 8f       	std	Y+24, r27	; 0x18
    269a:	b2 30       	cpi	r27, 0x02	; 2
    269c:	20 f0       	brcs	.+8      	; 0x26a6 <gc_execute_block+0x4fa>
    269e:	b4 30       	cpi	r27, 0x04	; 4
    26a0:	08 f0       	brcs	.+2      	; 0x26a4 <gc_execute_block+0x4f8>
    26a2:	66 c2       	rjmp	.+1228   	; 0x2b70 <gc_execute_block+0x9c4>
    26a4:	31 c0       	rjmp	.+98     	; 0x2708 <gc_execute_block+0x55c>
				case MOTION_MODE_CANCEL: {
					break;
				}

				case MOTION_MODE_RAPID_LINEAR: case MOTION_MODE_LINEAR: {
					gc.status = mc_line(gc.target[X], gc.target[Y], gc.target[Z],
    26a6:	60 91 3e 21 	lds	r22, 0x213E
    26aa:	70 91 3f 21 	lds	r23, 0x213F
    26ae:	80 91 40 21 	lds	r24, 0x2140
    26b2:	90 91 41 21 	lds	r25, 0x2141
    26b6:	20 91 42 21 	lds	r18, 0x2142
    26ba:	30 91 43 21 	lds	r19, 0x2143
    26be:	40 91 44 21 	lds	r20, 0x2144
    26c2:	50 91 45 21 	lds	r21, 0x2145
    26c6:	e0 90 46 21 	lds	r14, 0x2146
    26ca:	f0 90 47 21 	lds	r15, 0x2147
    26ce:	00 91 48 21 	lds	r16, 0x2148
    26d2:	10 91 49 21 	lds	r17, 0x2149
    26d6:	80 90 11 21 	lds	r8, 0x2111
    26da:	88 20       	and	r8, r8
    26dc:	49 f0       	breq	.+18     	; 0x26f0 <gc_execute_block+0x544>
    26de:	a0 90 2e 21 	lds	r10, 0x212E
    26e2:	b0 90 2f 21 	lds	r11, 0x212F
    26e6:	c0 90 30 21 	lds	r12, 0x2130
    26ea:	d0 90 31 21 	lds	r13, 0x2131
    26ee:	08 c0       	rjmp	.+16     	; 0x2700 <gc_execute_block+0x554>
    26f0:	a0 90 22 21 	lds	r10, 0x2122
    26f4:	b0 90 23 21 	lds	r11, 0x2123
    26f8:	c0 90 24 21 	lds	r12, 0x2124
    26fc:	d0 90 25 21 	lds	r13, 0x2125
    2700:	99 24       	eor	r9, r9
    2702:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <mc_line>
    2706:	32 c2       	rjmp	.+1124   	; 0x2b6c <gc_execute_block+0x9c0>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    2708:	80 91 14 21 	lds	r24, 0x2114
    270c:	88 23       	and	r24, r24
    270e:	09 f4       	brne	.+2      	; 0x2712 <gc_execute_block+0x566>
    2710:	ec c0       	rjmp	.+472    	; 0x28ea <gc_execute_block+0x73e>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    2712:	e0 91 17 21 	lds	r30, 0x2117
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	ee 0f       	add	r30, r30
    271a:	ff 1f       	adc	r31, r31
    271c:	ee 0f       	add	r30, r30
    271e:	ff 1f       	adc	r31, r31
    2720:	ec 5f       	subi	r30, 0xFC	; 252
    2722:	fe 4d       	sbci	r31, 0xDE	; 222
    2724:	62 ad       	ldd	r22, Z+58	; 0x3a
    2726:	73 ad       	ldd	r23, Z+59	; 0x3b
    2728:	84 ad       	ldd	r24, Z+60	; 0x3c
    272a:	95 ad       	ldd	r25, Z+61	; 0x3d
    272c:	26 a5       	ldd	r18, Z+46	; 0x2e
    272e:	37 a5       	ldd	r19, Z+47	; 0x2f
    2730:	40 a9       	ldd	r20, Z+48	; 0x30
    2732:	51 a9       	ldd	r21, Z+49	; 0x31
    2734:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    2738:	6f 83       	std	Y+7, r22	; 0x07
    273a:	78 87       	std	Y+8, r23	; 0x08
    273c:	89 87       	std	Y+9, r24	; 0x09
    273e:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    2740:	e0 91 18 21 	lds	r30, 0x2118
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	ee 0f       	add	r30, r30
    2748:	ff 1f       	adc	r31, r31
    274a:	ee 0f       	add	r30, r30
    274c:	ff 1f       	adc	r31, r31
    274e:	ec 5f       	subi	r30, 0xFC	; 252
    2750:	fe 4d       	sbci	r31, 0xDE	; 222
    2752:	62 ad       	ldd	r22, Z+58	; 0x3a
    2754:	73 ad       	ldd	r23, Z+59	; 0x3b
    2756:	84 ad       	ldd	r24, Z+60	; 0x3c
    2758:	95 ad       	ldd	r25, Z+61	; 0x3d
    275a:	26 a5       	ldd	r18, Z+46	; 0x2e
    275c:	37 a5       	ldd	r19, Z+47	; 0x2f
    275e:	40 a9       	ldd	r20, Z+48	; 0x30
    2760:	51 a9       	ldd	r21, Z+49	; 0x31
    2762:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    2766:	1b 01       	movw	r2, r22
    2768:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    276a:	10 92 4a 21 	sts	0x214A, r1
    276e:	10 92 4b 21 	sts	0x214B, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    2772:	60 90 1e 21 	lds	r6, 0x211E
    2776:	70 90 1f 21 	lds	r7, 0x211F
    277a:	80 90 20 21 	lds	r8, 0x2120
    277e:	90 90 21 21 	lds	r9, 0x2121
    2782:	c4 01       	movw	r24, r8
    2784:	b3 01       	movw	r22, r6
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e8       	ldi	r20, 0x80	; 128
    278c:	50 e4       	ldi	r21, 0x40	; 64
    278e:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    2792:	a4 01       	movw	r20, r8
    2794:	93 01       	movw	r18, r6
    2796:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    279a:	5b 01       	movw	r10, r22
    279c:	6c 01       	movw	r12, r24
    279e:	6f 81       	ldd	r22, Y+7	; 0x07
    27a0:	78 85       	ldd	r23, Y+8	; 0x08
    27a2:	89 85       	ldd	r24, Y+9	; 0x09
    27a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a6:	9b 01       	movw	r18, r22
    27a8:	ac 01       	movw	r20, r24
    27aa:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    27ae:	7b 01       	movw	r14, r22
    27b0:	8c 01       	movw	r16, r24
    27b2:	c2 01       	movw	r24, r4
    27b4:	b1 01       	movw	r22, r2
    27b6:	a2 01       	movw	r20, r4
    27b8:	91 01       	movw	r18, r2
    27ba:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    27be:	9b 01       	movw	r18, r22
    27c0:	ac 01       	movw	r20, r24
    27c2:	c8 01       	movw	r24, r16
    27c4:	b7 01       	movw	r22, r14
    27c6:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    27ca:	9b 01       	movw	r18, r22
    27cc:	ac 01       	movw	r20, r24
    27ce:	c6 01       	movw	r24, r12
    27d0:	b5 01       	movw	r22, r10
    27d2:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    27d6:	0e 94 2e 45 	call	0x8a5c	; 0x8a5c <sqrt>
    27da:	7b 01       	movw	r14, r22
    27dc:	8c 01       	movw	r16, r24
    27de:	6f 81       	ldd	r22, Y+7	; 0x07
    27e0:	78 85       	ldd	r23, Y+8	; 0x08
    27e2:	89 85       	ldd	r24, Y+9	; 0x09
    27e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e6:	a2 01       	movw	r20, r4
    27e8:	91 01       	movw	r18, r2
    27ea:	0e 94 fc 43 	call	0x87f8	; 0x87f8 <hypot>
    27ee:	9b 01       	movw	r18, r22
    27f0:	ac 01       	movw	r20, r24
    27f2:	17 fb       	bst	r17, 7
    27f4:	10 95       	com	r17
    27f6:	17 f9       	bld	r17, 7
    27f8:	10 95       	com	r17
    27fa:	c8 01       	movw	r24, r16
    27fc:	b7 01       	movw	r22, r14
    27fe:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    2802:	7b 01       	movw	r14, r22
    2804:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    2806:	a8 01       	movw	r20, r16
    2808:	97 01       	movw	r18, r14
    280a:	0e 94 76 45 	call	0x8aec	; 0x8aec <__unordsf2>
    280e:	88 23       	and	r24, r24
    2810:	21 f0       	breq	.+8      	; 0x281a <gc_execute_block+0x66e>
		FAIL(TG_FLOATING_POINT_ERROR); 
    2812:	81 e1       	ldi	r24, 0x11	; 17
    2814:	80 93 04 21 	sts	0x2104, r24
    2818:	65 c0       	rjmp	.+202    	; 0x28e4 <gc_execute_block+0x738>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    281a:	e8 8d       	ldd	r30, Y+24	; 0x18
    281c:	e3 30       	cpi	r30, 0x03	; 3
    281e:	21 f4       	brne	.+8      	; 0x2828 <gc_execute_block+0x67c>
		h_x2_div_d = -h_x2_div_d;
    2820:	17 fb       	bst	r17, 7
    2822:	10 95       	com	r17
    2824:	17 f9       	bld	r17, 7
    2826:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    2828:	c4 01       	movw	r24, r8
    282a:	b3 01       	movw	r22, r6
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	40 e0       	ldi	r20, 0x00	; 0
    2832:	50 e0       	ldi	r21, 0x00	; 0
    2834:	0e 94 ff 41 	call	0x83fe	; 0x83fe <__cmpsf2>
    2838:	88 23       	and	r24, r24
    283a:	24 f4       	brge	.+8      	; 0x2844 <gc_execute_block+0x698>
		h_x2_div_d = -h_x2_div_d; 
    283c:	17 fb       	bst	r17, 7
    283e:	10 95       	com	r17
    2840:	17 f9       	bld	r17, 7
    2842:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    2844:	80 91 17 21 	lds	r24, 0x2117
    2848:	c8 2e       	mov	r12, r24
    284a:	dd 24       	eor	r13, r13
    284c:	cc 0c       	add	r12, r12
    284e:	dd 1c       	adc	r13, r13
    2850:	cc 0c       	add	r12, r12
    2852:	dd 1c       	adc	r13, r13
    2854:	2a e4       	ldi	r18, 0x4A	; 74
    2856:	31 e2       	ldi	r19, 0x21	; 33
    2858:	c2 0e       	add	r12, r18
    285a:	d3 1e       	adc	r13, r19
    285c:	c2 01       	movw	r24, r4
    285e:	b1 01       	movw	r22, r2
    2860:	a8 01       	movw	r20, r16
    2862:	97 01       	movw	r18, r14
    2864:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    2868:	9b 01       	movw	r18, r22
    286a:	ac 01       	movw	r20, r24
    286c:	6f 81       	ldd	r22, Y+7	; 0x07
    286e:	78 85       	ldd	r23, Y+8	; 0x08
    2870:	89 85       	ldd	r24, Y+9	; 0x09
    2872:	9a 85       	ldd	r25, Y+10	; 0x0a
    2874:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e0       	ldi	r20, 0x00	; 0
    287e:	5f e3       	ldi	r21, 0x3F	; 63
    2880:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    2884:	d6 01       	movw	r26, r12
    2886:	6d 93       	st	X+, r22
    2888:	7d 93       	st	X+, r23
    288a:	8d 93       	st	X+, r24
    288c:	9c 93       	st	X, r25
    288e:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    2890:	80 91 18 21 	lds	r24, 0x2118
    2894:	c8 2e       	mov	r12, r24
    2896:	dd 24       	eor	r13, r13
    2898:	cc 0c       	add	r12, r12
    289a:	dd 1c       	adc	r13, r13
    289c:	cc 0c       	add	r12, r12
    289e:	dd 1c       	adc	r13, r13
    28a0:	ea e4       	ldi	r30, 0x4A	; 74
    28a2:	f1 e2       	ldi	r31, 0x21	; 33
    28a4:	ce 0e       	add	r12, r30
    28a6:	df 1e       	adc	r13, r31
    28a8:	6f 81       	ldd	r22, Y+7	; 0x07
    28aa:	78 85       	ldd	r23, Y+8	; 0x08
    28ac:	89 85       	ldd	r24, Y+9	; 0x09
    28ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b0:	a8 01       	movw	r20, r16
    28b2:	97 01       	movw	r18, r14
    28b4:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    28b8:	9b 01       	movw	r18, r22
    28ba:	ac 01       	movw	r20, r24
    28bc:	c2 01       	movw	r24, r4
    28be:	b1 01       	movw	r22, r2
    28c0:	0e 94 60 41 	call	0x82c0	; 0x82c0 <__addsf3>
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	5f e3       	ldi	r21, 0x3F	; 63
    28cc:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    28d0:	d6 01       	movw	r26, r12
    28d2:	6d 93       	st	X+, r22
    28d4:	7d 93       	st	X+, r23
    28d6:	8d 93       	st	X+, r24
    28d8:	9c 93       	st	X, r25
    28da:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    28dc:	80 91 04 21 	lds	r24, 0x2104
    28e0:	88 23       	and	r24, r24
    28e2:	19 f0       	breq	.+6      	; 0x28ea <gc_execute_block+0x73e>
			return (gc.status);
    28e4:	80 91 04 21 	lds	r24, 0x2104
    28e8:	41 c1       	rjmp	.+642    	; 0x2b6c <gc_execute_block+0x9c0>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    28ea:	e0 91 17 21 	lds	r30, 0x2117
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	ee 0f       	add	r30, r30
    28f2:	ff 1f       	adc	r31, r31
    28f4:	ee 0f       	add	r30, r30
    28f6:	ff 1f       	adc	r31, r31
    28f8:	e6 5b       	subi	r30, 0xB6	; 182
    28fa:	fe 4d       	sbci	r31, 0xDE	; 222
    28fc:	60 81       	ld	r22, Z
    28fe:	71 81       	ldd	r23, Z+1	; 0x01
    2900:	82 81       	ldd	r24, Z+2	; 0x02
    2902:	93 81       	ldd	r25, Z+3	; 0x03
    2904:	90 58       	subi	r25, 0x80	; 128
    2906:	e0 91 18 21 	lds	r30, 0x2118
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	ee 0f       	add	r30, r30
    290e:	ff 1f       	adc	r31, r31
    2910:	ee 0f       	add	r30, r30
    2912:	ff 1f       	adc	r31, r31
    2914:	e6 5b       	subi	r30, 0xB6	; 182
    2916:	fe 4d       	sbci	r31, 0xDE	; 222
    2918:	20 81       	ld	r18, Z
    291a:	31 81       	ldd	r19, Z+1	; 0x01
    291c:	42 81       	ldd	r20, Z+2	; 0x02
    291e:	53 81       	ldd	r21, Z+3	; 0x03
    2920:	50 58       	subi	r21, 0x80	; 128
    2922:	0e 94 97 10 	call	0x212e	; 0x212e <theta>
    2926:	6f 87       	std	Y+15, r22	; 0x0f
    2928:	78 8b       	std	Y+16, r23	; 0x10
    292a:	89 8b       	std	Y+17, r24	; 0x11
    292c:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    292e:	9b 01       	movw	r18, r22
    2930:	ac 01       	movw	r20, r24
    2932:	0e 94 76 45 	call	0x8aec	; 0x8aec <__unordsf2>
    2936:	88 23       	and	r24, r24
    2938:	09 f0       	breq	.+2      	; 0x293c <gc_execute_block+0x790>
    293a:	54 c0       	rjmp	.+168    	; 0x29e4 <gc_execute_block+0x838>
		FAIL(TG_ARC_SPECIFICATION_ERROR); 
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    293c:	e0 91 17 21 	lds	r30, 0x2117
    2940:	0e 2f       	mov	r16, r30
    2942:	10 e0       	ldi	r17, 0x00	; 0
    2944:	e0 91 18 21 	lds	r30, 0x2118
    2948:	ce 2e       	mov	r12, r30
    294a:	dd 24       	eor	r13, r13
    294c:	00 0f       	add	r16, r16
    294e:	11 1f       	adc	r17, r17
    2950:	00 0f       	add	r16, r16
    2952:	11 1f       	adc	r17, r17
    2954:	0c 5f       	subi	r16, 0xFC	; 252
    2956:	1e 4d       	sbci	r17, 0xDE	; 222
    2958:	f8 01       	movw	r30, r16
    295a:	ea 5b       	subi	r30, 0xBA	; 186
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	d8 01       	movw	r26, r16
    2960:	da 96       	adiw	r26, 0x3a	; 58
    2962:	6d 91       	ld	r22, X+
    2964:	7d 91       	ld	r23, X+
    2966:	8d 91       	ld	r24, X+
    2968:	9c 91       	ld	r25, X
    296a:	dd 97       	sbiw	r26, 0x3d	; 61
    296c:	20 81       	ld	r18, Z
    296e:	31 81       	ldd	r19, Z+1	; 0x01
    2970:	42 81       	ldd	r20, Z+2	; 0x02
    2972:	53 81       	ldd	r21, Z+3	; 0x03
    2974:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    2978:	f8 01       	movw	r30, r16
    297a:	26 a5       	ldd	r18, Z+46	; 0x2e
    297c:	37 a5       	ldd	r19, Z+47	; 0x2f
    297e:	40 a9       	ldd	r20, Z+48	; 0x30
    2980:	51 a9       	ldd	r21, Z+49	; 0x31
    2982:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    2986:	7b 01       	movw	r14, r22
    2988:	8c 01       	movw	r16, r24
    298a:	cc 0c       	add	r12, r12
    298c:	dd 1c       	adc	r13, r13
    298e:	cc 0c       	add	r12, r12
    2990:	dd 1c       	adc	r13, r13
    2992:	24 e0       	ldi	r18, 0x04	; 4
    2994:	31 e2       	ldi	r19, 0x21	; 33
    2996:	c2 0e       	add	r12, r18
    2998:	d3 1e       	adc	r13, r19
    299a:	f6 01       	movw	r30, r12
    299c:	ea 5b       	subi	r30, 0xBA	; 186
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	d6 01       	movw	r26, r12
    29a2:	da 96       	adiw	r26, 0x3a	; 58
    29a4:	6d 91       	ld	r22, X+
    29a6:	7d 91       	ld	r23, X+
    29a8:	8d 91       	ld	r24, X+
    29aa:	9c 91       	ld	r25, X
    29ac:	dd 97       	sbiw	r26, 0x3d	; 61
    29ae:	20 81       	ld	r18, Z
    29b0:	31 81       	ldd	r19, Z+1	; 0x01
    29b2:	42 81       	ldd	r20, Z+2	; 0x02
    29b4:	53 81       	ldd	r21, Z+3	; 0x03
    29b6:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    29ba:	f6 01       	movw	r30, r12
    29bc:	26 a5       	ldd	r18, Z+46	; 0x2e
    29be:	37 a5       	ldd	r19, Z+47	; 0x2f
    29c0:	40 a9       	ldd	r20, Z+48	; 0x30
    29c2:	51 a9       	ldd	r21, Z+49	; 0x31
    29c4:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    29c8:	9b 01       	movw	r18, r22
    29ca:	ac 01       	movw	r20, r24
    29cc:	c8 01       	movw	r24, r16
    29ce:	b7 01       	movw	r22, r14
    29d0:	0e 94 97 10 	call	0x212e	; 0x212e <theta>
    29d4:	7b 01       	movw	r14, r22
    29d6:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    29d8:	a8 01       	movw	r20, r16
    29da:	97 01       	movw	r18, r14
    29dc:	0e 94 76 45 	call	0x8aec	; 0x8aec <__unordsf2>
    29e0:	88 23       	and	r24, r24
    29e2:	19 f0       	breq	.+6      	; 0x29ea <gc_execute_block+0x83e>
		FAIL(TG_ARC_SPECIFICATION_ERROR); 
    29e4:	83 e1       	ldi	r24, 0x13	; 19
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	c1 c0       	rjmp	.+386    	; 0x2b6c <gc_execute_block+0x9c0>
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    29ea:	c8 01       	movw	r24, r16
    29ec:	b7 01       	movw	r22, r14
    29ee:	2f 85       	ldd	r18, Y+15	; 0x0f
    29f0:	38 89       	ldd	r19, Y+16	; 0x10
    29f2:	49 89       	ldd	r20, Y+17	; 0x11
    29f4:	5a 89       	ldd	r21, Y+18	; 0x12
    29f6:	0e 94 ff 41 	call	0x83fe	; 0x83fe <__cmpsf2>
    29fa:	88 23       	and	r24, r24
    29fc:	54 f4       	brge	.+20     	; 0x2a12 <gc_execute_block+0x866>
		theta_end += 2*M_PI;
    29fe:	c8 01       	movw	r24, r16
    2a00:	b7 01       	movw	r22, r14
    2a02:	2b ed       	ldi	r18, 0xDB	; 219
    2a04:	3f e0       	ldi	r19, 0x0F	; 15
    2a06:	49 ec       	ldi	r20, 0xC9	; 201
    2a08:	50 e4       	ldi	r21, 0x40	; 64
    2a0a:	0e 94 60 41 	call	0x82c0	; 0x82c0 <__addsf3>
    2a0e:	7b 01       	movw	r14, r22
    2a10:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    2a12:	c8 01       	movw	r24, r16
    2a14:	b7 01       	movw	r22, r14
    2a16:	2f 85       	ldd	r18, Y+15	; 0x0f
    2a18:	38 89       	ldd	r19, Y+16	; 0x10
    2a1a:	49 89       	ldd	r20, Y+17	; 0x11
    2a1c:	5a 89       	ldd	r21, Y+18	; 0x12
    2a1e:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    2a22:	6b 87       	std	Y+11, r22	; 0x0b
    2a24:	7c 87       	std	Y+12, r23	; 0x0c
    2a26:	8d 87       	std	Y+13, r24	; 0x0d
    2a28:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2a2a:	80 91 10 21 	lds	r24, 0x2110
    2a2e:	83 30       	cpi	r24, 0x03	; 3
    2a30:	71 f4       	brne	.+28     	; 0x2a4e <gc_execute_block+0x8a2>
		angular_travel = angular_travel - 2*M_PI;
    2a32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a3a:	2b ed       	ldi	r18, 0xDB	; 219
    2a3c:	3f e0       	ldi	r19, 0x0F	; 15
    2a3e:	49 ec       	ldi	r20, 0xC9	; 201
    2a40:	50 e4       	ldi	r21, 0x40	; 64
    2a42:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    2a46:	6b 87       	std	Y+11, r22	; 0x0b
    2a48:	7c 87       	std	Y+12, r23	; 0x0c
    2a4a:	8d 87       	std	Y+13, r24	; 0x0d
    2a4c:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2a4e:	80 91 17 21 	lds	r24, 0x2117
    2a52:	28 2f       	mov	r18, r24
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	2d 83       	std	Y+5, r18	; 0x05
    2a58:	3e 83       	std	Y+6, r19	; 0x06
    2a5a:	f9 01       	movw	r30, r18
    2a5c:	ee 0f       	add	r30, r30
    2a5e:	ff 1f       	adc	r31, r31
    2a60:	ee 0f       	add	r30, r30
    2a62:	ff 1f       	adc	r31, r31
    2a64:	e6 5b       	subi	r30, 0xB6	; 182
    2a66:	fe 4d       	sbci	r31, 0xDE	; 222
    2a68:	e0 80       	ld	r14, Z
    2a6a:	f1 80       	ldd	r15, Z+1	; 0x01
    2a6c:	02 81       	ldd	r16, Z+2	; 0x02
    2a6e:	13 81       	ldd	r17, Z+3	; 0x03
    2a70:	80 91 18 21 	lds	r24, 0x2118
    2a74:	a8 2f       	mov	r26, r24
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	ab 83       	std	Y+3, r26	; 0x03
    2a7a:	bc 83       	std	Y+4, r27	; 0x04
    2a7c:	fd 01       	movw	r30, r26
    2a7e:	ee 0f       	add	r30, r30
    2a80:	ff 1f       	adc	r31, r31
    2a82:	ee 0f       	add	r30, r30
    2a84:	ff 1f       	adc	r31, r31
    2a86:	e6 5b       	subi	r30, 0xB6	; 182
    2a88:	fe 4d       	sbci	r31, 0xDE	; 222
    2a8a:	20 81       	ld	r18, Z
    2a8c:	31 81       	ldd	r19, Z+1	; 0x01
    2a8e:	42 81       	ldd	r20, Z+2	; 0x02
    2a90:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    2a92:	80 91 19 21 	lds	r24, 0x2119
    2a96:	28 2e       	mov	r2, r24
    2a98:	33 24       	eor	r3, r3
    2a9a:	f1 01       	movw	r30, r2
    2a9c:	ee 0f       	add	r30, r30
    2a9e:	ff 1f       	adc	r31, r31
    2aa0:	ee 0f       	add	r30, r30
    2aa2:	ff 1f       	adc	r31, r31
    2aa4:	ec 5f       	subi	r30, 0xFC	; 252
    2aa6:	fe 4d       	sbci	r31, 0xDE	; 222
    2aa8:	82 ad       	ldd	r24, Z+58	; 0x3a
    2aaa:	93 ad       	ldd	r25, Z+59	; 0x3b
    2aac:	a4 ad       	ldd	r26, Z+60	; 0x3c
    2aae:	b5 ad       	ldd	r27, Z+61	; 0x3d
    2ab0:	8c 8b       	std	Y+20, r24	; 0x14
    2ab2:	9d 8b       	std	Y+21, r25	; 0x15
    2ab4:	ae 8b       	std	Y+22, r26	; 0x16
    2ab6:	bf 8b       	std	Y+23, r27	; 0x17
    2ab8:	a6 a4       	ldd	r10, Z+46	; 0x2e
    2aba:	b7 a4       	ldd	r11, Z+47	; 0x2f
    2abc:	c0 a8       	ldd	r12, Z+48	; 0x30
    2abe:	d1 a8       	ldd	r13, Z+49	; 0x31

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2ac0:	90 91 11 21 	lds	r25, 0x2111
    2ac4:	9b 8b       	std	Y+19, r25	; 0x13
    2ac6:	99 23       	and	r25, r25
    2ac8:	49 f0       	breq	.+18     	; 0x2adc <gc_execute_block+0x930>
    2aca:	40 90 2e 21 	lds	r4, 0x212E
    2ace:	50 90 2f 21 	lds	r5, 0x212F
    2ad2:	60 90 30 21 	lds	r6, 0x2130
    2ad6:	70 90 31 21 	lds	r7, 0x2131
    2ada:	08 c0       	rjmp	.+16     	; 0x2aec <gc_execute_block+0x940>
    2adc:	40 90 22 21 	lds	r4, 0x2122
    2ae0:	50 90 23 21 	lds	r5, 0x2123
    2ae4:	60 90 24 21 	lds	r6, 0x2124
    2ae8:	70 90 25 21 	lds	r7, 0x2125
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2aec:	c8 01       	movw	r24, r16
    2aee:	b7 01       	movw	r22, r14
    2af0:	0e 94 fc 43 	call	0x87f8	; 0x87f8 <hypot>
    2af4:	7b 01       	movw	r14, r22
    2af6:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2af8:	ad b7       	in	r26, 0x3d	; 61
    2afa:	be b7       	in	r27, 0x3e	; 62
    2afc:	1a 97       	sbiw	r26, 0x0a	; 10
    2afe:	ad bf       	out	0x3d, r26	; 61
    2b00:	be bf       	out	0x3e, r27	; 62
    2b02:	8d b6       	in	r8, 0x3d	; 61
    2b04:	9e b6       	in	r9, 0x3e	; 62
    2b06:	08 94       	sec
    2b08:	81 1c       	adc	r8, r1
    2b0a:	91 1c       	adc	r9, r1
    2b0c:	6c 89       	ldd	r22, Y+20	; 0x14
    2b0e:	7d 89       	ldd	r23, Y+21	; 0x15
    2b10:	8e 89       	ldd	r24, Y+22	; 0x16
    2b12:	9f 89       	ldd	r25, Y+23	; 0x17
    2b14:	a6 01       	movw	r20, r12
    2b16:	95 01       	movw	r18, r10
    2b18:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    2b1c:	5b 01       	movw	r10, r22
    2b1e:	6c 01       	movw	r12, r24
    2b20:	2b 81       	ldd	r18, Y+3	; 0x03
    2b22:	3c 81       	ldd	r19, Y+4	; 0x04
    2b24:	f4 01       	movw	r30, r8
    2b26:	20 83       	st	Z, r18
    2b28:	31 83       	std	Z+1, r19	; 0x01
    2b2a:	22 82       	std	Z+2, r2	; 0x02
    2b2c:	33 82       	std	Z+3, r3	; 0x03
    2b2e:	d4 01       	movw	r26, r8
    2b30:	14 96       	adiw	r26, 0x04	; 4
    2b32:	4d 92       	st	X+, r4
    2b34:	5d 92       	st	X+, r5
    2b36:	6d 92       	st	X+, r6
    2b38:	7c 92       	st	X, r7
    2b3a:	17 97       	sbiw	r26, 0x07	; 7
    2b3c:	eb 89       	ldd	r30, Y+19	; 0x13
    2b3e:	18 96       	adiw	r26, 0x08	; 8
    2b40:	ec 93       	st	X, r30
    2b42:	18 97       	sbiw	r26, 0x08	; 8
    2b44:	19 96       	adiw	r26, 0x09	; 9
    2b46:	1c 92       	st	X, r1
    2b48:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b4a:	78 89       	ldd	r23, Y+16	; 0x10
    2b4c:	89 89       	ldd	r24, Y+17	; 0x11
    2b4e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b50:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b52:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b54:	4d 85       	ldd	r20, Y+13	; 0x0d
    2b56:	5e 85       	ldd	r21, Y+14	; 0x0e
    2b58:	8d 80       	ldd	r8, Y+5	; 0x05
    2b5a:	9e 80       	ldd	r9, Y+6	; 0x06
    2b5c:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <mc_arc>
	// has completed the arc. So the endpoint should be passed to the generator and
	// executed there.
//	gc.status = mc_line(gc.target[X_AXIS], gc.target[Y_AXIS], gc.target[Z_AXIS], 
//					   (gc.inverse_feed_rate_mode) ? gc.inverse_feed_rate : 
//						gc.feed_rate, gc.inverse_feed_rate_mode);
	return (gc.status);
    2b60:	2d b7       	in	r18, 0x3d	; 61
    2b62:	3e b7       	in	r19, 0x3e	; 62
    2b64:	26 5f       	subi	r18, 0xF6	; 246
    2b66:	3f 4f       	sbci	r19, 0xFF	; 255
    2b68:	2d bf       	out	0x3d, r18	; 61
    2b6a:	3e bf       	out	0x3e, r19	; 62
										gc.inverse_feed_rate_mode); 
					break;
				}

				case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC: {
					gc.status = _gc_compute_arc(); 
    2b6c:	80 93 04 21 	sts	0x2104, r24
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_EAGAIN)) {
    2b70:	80 91 04 21 	lds	r24, 0x2104
    2b74:	88 23       	and	r24, r24
    2b76:	11 f0       	breq	.+4      	; 0x2b7c <gc_execute_block+0x9d0>
    2b78:	82 30       	cpi	r24, 0x02	; 2
    2b7a:	49 f4       	brne	.+18     	; 0x2b8e <gc_execute_block+0x9e2>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2b7c:	e2 e3       	ldi	r30, 0x32	; 50
    2b7e:	f1 e2       	ldi	r31, 0x21	; 33
    2b80:	df 01       	movw	r26, r30
    2b82:	1c 96       	adiw	r26, 0x0c	; 12
    2b84:	9c e0       	ldi	r25, 0x0C	; 12
    2b86:	0d 90       	ld	r0, X+
    2b88:	01 92       	st	Z+, r0
    2b8a:	91 50       	subi	r25, 0x01	; 1
    2b8c:	e1 f7       	brne	.-8      	; 0x2b86 <gc_execute_block+0x9da>
	};
	return(gc.status);
}
    2b8e:	68 96       	adiw	r28, 0x18	; 24
    2b90:	cd bf       	out	0x3d, r28	; 61
    2b92:	de bf       	out	0x3e, r29	; 62
    2b94:	cf 91       	pop	r28
    2b96:	df 91       	pop	r29
    2b98:	1f 91       	pop	r17
    2b9a:	0f 91       	pop	r16
    2b9c:	ff 90       	pop	r15
    2b9e:	ef 90       	pop	r14
    2ba0:	df 90       	pop	r13
    2ba2:	cf 90       	pop	r12
    2ba4:	bf 90       	pop	r11
    2ba6:	af 90       	pop	r10
    2ba8:	9f 90       	pop	r9
    2baa:	8f 90       	pop	r8
    2bac:	7f 90       	pop	r7
    2bae:	6f 90       	pop	r6
    2bb0:	5f 90       	pop	r5
    2bb2:	4f 90       	pop	r4
    2bb4:	3f 90       	pop	r3
    2bb6:	2f 90       	pop	r2
    2bb8:	08 95       	ret

00002bba <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2bba:	ef 92       	push	r14
    2bbc:	ff 92       	push	r15
    2bbe:	0f 93       	push	r16
    2bc0:	1f 93       	push	r17
    2bc2:	cf 93       	push	r28
    2bc4:	df 93       	push	r29
    2bc6:	8c 01       	movw	r16, r24
	char *comment=0;	// comment pointer - first char past opening paren
	uint8_t i=0; 		// index for incoming characters
	uint8_t j=0;		// index for normalized characters

	// discard deleted block
	if (block[0] == '/') {
    2bc8:	fc 01       	movw	r30, r24
    2bca:	80 81       	ld	r24, Z
    2bcc:	8f 32       	cpi	r24, 0x2F	; 47
    2bce:	19 f0       	breq	.+6      	; 0x2bd6 <gc_gcode_parser+0x1c>
    2bd0:	ee 24       	eor	r14, r14
    2bd2:	ff 24       	eor	r15, r15
    2bd4:	15 c0       	rjmp	.+42     	; 0x2c00 <gc_gcode_parser+0x46>
		block[0] = 0;
    2bd6:	f8 01       	movw	r30, r16
    2bd8:	10 82       	st	Z, r1
    2bda:	56 c0       	rjmp	.+172    	; 0x2c88 <gc_gcode_parser+0xce>
		return;
	} 
	// normalize the comamnd block & mark the comment(if any)
	while ((c = toupper(block[i++])) != 0) {// NUL character
    2bdc:	f3 94       	inc	r15
		if (c <= ' ') continue;				// toss WS & ctrl codes
    2bde:	81 32       	cpi	r24, 0x21	; 33
    2be0:	78 f0       	brcs	.+30     	; 0x2c00 <gc_gcode_parser+0x46>
    2be2:	ee 2d       	mov	r30, r14
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
		if (c == '(') {						// detect & handle comment
    2be6:	88 32       	cpi	r24, 0x28	; 40
    2be8:	39 f4       	brne	.+14     	; 0x2bf8 <gc_gcode_parser+0x3e>
			block[j] = 0;
    2bea:	e0 0f       	add	r30, r16
    2bec:	f1 1f       	adc	r31, r17
    2bee:	10 82       	st	Z, r1
			comment = &block[i]; 
    2bf0:	e8 01       	movw	r28, r16
    2bf2:	cf 0d       	add	r28, r15
    2bf4:	d1 1d       	adc	r29, r1
    2bf6:	0f c0       	rjmp	.+30     	; 0x2c16 <gc_gcode_parser+0x5c>
			break;
		}
		block[j++] = c;
    2bf8:	e0 0f       	add	r30, r16
    2bfa:	f1 1f       	adc	r31, r17
    2bfc:	80 83       	st	Z, r24
    2bfe:	e3 94       	inc	r14
	if (block[0] == '/') {
		block[0] = 0;
		return;
	} 
	// normalize the comamnd block & mark the comment(if any)
	while ((c = toupper(block[i++])) != 0) {// NUL character
    2c00:	f8 01       	movw	r30, r16
    2c02:	ef 0d       	add	r30, r15
    2c04:	f1 1d       	adc	r31, r1
    2c06:	80 81       	ld	r24, Z
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	0e 94 76 48 	call	0x90ec	; 0x90ec <toupper>
    2c0e:	88 23       	and	r24, r24
    2c10:	29 f7       	brne	.-54     	; 0x2bdc <gc_gcode_parser+0x22>
    2c12:	c0 e0       	ldi	r28, 0x00	; 0
    2c14:	d0 e0       	ldi	r29, 0x00	; 0
			comment = &block[i]; 
			break;
		}
		block[j++] = c;
	}
	block[j] = 0;
    2c16:	f8 01       	movw	r30, r16
    2c18:	ee 0d       	add	r30, r14
    2c1a:	f1 1d       	adc	r31, r1
    2c1c:	10 82       	st	Z, r1
	if (comment) {
    2c1e:	20 97       	sbiw	r28, 0x00	; 0
    2c20:	99 f1       	breq	.+102    	; 0x2c88 <gc_gcode_parser+0xce>
		if ((toupper(comment[0]) == 'M') && 
    2c22:	88 81       	ld	r24, Y
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	0e 94 76 48 	call	0x90ec	; 0x90ec <toupper>
    2c2a:	8d 34       	cpi	r24, 0x4D	; 77
    2c2c:	91 05       	cpc	r25, r1
    2c2e:	61 f5       	brne	.+88     	; 0x2c88 <gc_gcode_parser+0xce>
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	0e 94 76 48 	call	0x90ec	; 0x90ec <toupper>
    2c38:	83 35       	cpi	r24, 0x53	; 83
    2c3a:	91 05       	cpc	r25, r1
    2c3c:	29 f5       	brne	.+74     	; 0x2c88 <gc_gcode_parser+0xce>
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	0e 94 76 48 	call	0x90ec	; 0x90ec <toupper>
    2c46:	87 34       	cpi	r24, 0x47	; 71
    2c48:	91 05       	cpc	r25, r1
    2c4a:	f1 f4       	brne	.+60     	; 0x2c88 <gc_gcode_parser+0xce>
    2c4c:	04 c0       	rjmp	.+8      	; 0x2c56 <gc_gcode_parser+0x9c>
			(toupper(comment[1]) == 'S') &&
			(toupper(comment[2]) == 'G')) {
			i=0;
			while ((c = comment[i++]) != 0) {	// remove trailing paren
				if (c == ')') {
    2c4e:	99 32       	cpi	r25, 0x29	; 41
    2c50:	19 f4       	brne	.+6      	; 0x2c58 <gc_gcode_parser+0x9e>
					comment[--i] = 0;
    2c52:	10 82       	st	Z, r1
    2c54:	08 c0       	rjmp	.+16     	; 0x2c66 <gc_gcode_parser+0xac>
    2c56:	80 e0       	ldi	r24, 0x00	; 0
	if (comment) {
		if ((toupper(comment[0]) == 'M') && 
			(toupper(comment[1]) == 'S') &&
			(toupper(comment[2]) == 'G')) {
			i=0;
			while ((c = comment[i++]) != 0) {	// remove trailing paren
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e8 0f       	add	r30, r24
    2c5c:	f1 1d       	adc	r31, r1
    2c5e:	90 81       	ld	r25, Z
    2c60:	8f 5f       	subi	r24, 0xFF	; 255
    2c62:	99 23       	and	r25, r25
    2c64:	a1 f7       	brne	.-24     	; 0x2c4e <gc_gcode_parser+0x94>
				if (c == ')') {
					comment[--i] = 0;
					break;
				}
			}
			printf_P(PSTR("%s\n"), (comment+3));
    2c66:	00 d0       	rcall	.+0      	; 0x2c68 <gc_gcode_parser+0xae>
    2c68:	0f 92       	push	r0
    2c6a:	8b e3       	ldi	r24, 0x3B	; 59
    2c6c:	92 e0       	ldi	r25, 0x02	; 2
    2c6e:	ed b7       	in	r30, 0x3d	; 61
    2c70:	fe b7       	in	r31, 0x3e	; 62
    2c72:	81 83       	std	Z+1, r24	; 0x01
    2c74:	92 83       	std	Z+2, r25	; 0x02
    2c76:	23 96       	adiw	r28, 0x03	; 3
    2c78:	c3 83       	std	Z+3, r28	; 0x03
    2c7a:	d4 83       	std	Z+4, r29	; 0x04
    2c7c:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
    2c80:	0f 90       	pop	r0
    2c82:	0f 90       	pop	r0
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
 */

uint8_t gc_gcode_parser(char *block)
{
	_gc_normalize_gcode_block(block);
	if (block[0] == 0) { 					// ignore comments (stripped)
    2c88:	f8 01       	movw	r30, r16
    2c8a:	80 81       	ld	r24, Z
    2c8c:	88 23       	and	r24, r24
    2c8e:	71 f0       	breq	.+28     	; 0x2cac <gc_gcode_parser+0xf2>
		return(TG_OK);
	}
	if (block[0] == 'Q') {					// quit gcode mode
    2c90:	81 35       	cpi	r24, 0x51	; 81
    2c92:	11 f4       	brne	.+4      	; 0x2c98 <gc_gcode_parser+0xde>
    2c94:	8b e0       	ldi	r24, 0x0B	; 11
    2c96:	0a c0       	rjmp	.+20     	; 0x2cac <gc_gcode_parser+0xf2>
		return(TG_QUIT);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2c98:	c8 01       	movw	r24, r16
    2c9a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <gc_execute_block>
    2c9e:	80 93 04 21 	sts	0x2104, r24
	tg_print_status(gc.status, block);
    2ca2:	b8 01       	movw	r22, r16
    2ca4:	0e 94 a6 2b 	call	0x574c	; 0x574c <tg_print_status>
	return (gc.status);
    2ca8:	80 91 04 21 	lds	r24, 0x2104
}
    2cac:	df 91       	pop	r29
    2cae:	cf 91       	pop	r28
    2cb0:	1f 91       	pop	r17
    2cb2:	0f 91       	pop	r16
    2cb4:	ff 90       	pop	r15
    2cb6:	ef 90       	pop	r14
    2cb8:	08 95       	ret

00002cba <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2cba:	cf 92       	push	r12
    2cbc:	df 92       	push	r13
    2cbe:	ef 92       	push	r14
    2cc0:	ff 92       	push	r15
    2cc2:	0f 93       	push	r16
    2cc4:	1f 93       	push	r17
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	c1 e8       	ldi	r28, 0x81	; 129
    2ccc:	d2 e2       	ldi	r29, 0x22	; 34
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2cce:	68 81       	ld	r22, Y
    2cd0:	70 e0       	ldi	r23, 0x00	; 0
    2cd2:	88 27       	eor	r24, r24
    2cd4:	77 fd       	sbrc	r23, 7
    2cd6:	80 95       	com	r24
    2cd8:	98 2f       	mov	r25, r24
    2cda:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    2cde:	9b 01       	movw	r18, r22
    2ce0:	ac 01       	movw	r20, r24
    2ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce4:	78 85       	ldd	r23, Y+8	; 0x08
    2ce6:	89 85       	ldd	r24, Y+9	; 0x09
    2ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cea:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    2cee:	9b 01       	movw	r18, r22
    2cf0:	ac 01       	movw	r20, r24
    2cf2:	60 e0       	ldi	r22, 0x00	; 0
    2cf4:	70 e0       	ldi	r23, 0x00	; 0
    2cf6:	84 eb       	ldi	r24, 0xB4	; 180
    2cf8:	93 e4       	ldi	r25, 0x43	; 67
    2cfa:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    2cfe:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d00:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d02:	4d 85       	ldd	r20, Y+13	; 0x0d
    2d04:	5e 85       	ldd	r21, Y+14	; 0x0e
    2d06:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    2d0a:	6b 8b       	std	Y+19, r22	; 0x13
    2d0c:	7c 8b       	std	Y+20, r23	; 0x14
    2d0e:	8d 8b       	std	Y+21, r24	; 0x15
    2d10:	9e 8b       	std	Y+22, r25	; 0x16
    2d12:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    2d14:	82 e2       	ldi	r24, 0x22	; 34
    2d16:	c1 3e       	cpi	r28, 0xE1	; 225
    2d18:	d8 07       	cpc	r29, r24
    2d1a:	c9 f6       	brne	.-78     	; 0x2cce <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    2d1c:	00 91 81 22 	lds	r16, 0x2281
    2d20:	10 e0       	ldi	r17, 0x00	; 0
    2d22:	b8 01       	movw	r22, r16
    2d24:	88 27       	eor	r24, r24
    2d26:	77 fd       	sbrc	r23, 7
    2d28:	80 95       	com	r24
    2d2a:	98 2f       	mov	r25, r24
    2d2c:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    2d30:	9b 01       	movw	r18, r22
    2d32:	ac 01       	movw	r20, r24
    2d34:	60 91 88 22 	lds	r22, 0x2288
    2d38:	70 91 89 22 	lds	r23, 0x2289
    2d3c:	80 91 8a 22 	lds	r24, 0x228A
    2d40:	90 91 8b 22 	lds	r25, 0x228B
    2d44:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    2d48:	9b 01       	movw	r18, r22
    2d4a:	ac 01       	movw	r20, r24
    2d4c:	60 e0       	ldi	r22, 0x00	; 0
    2d4e:	70 e0       	ldi	r23, 0x00	; 0
    2d50:	84 eb       	ldi	r24, 0xB4	; 180
    2d52:	93 e4       	ldi	r25, 0x43	; 67
    2d54:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    2d58:	6b 01       	movw	r12, r22
    2d5a:	7c 01       	movw	r14, r24
    2d5c:	80 91 86 22 	lds	r24, 0x2286
    2d60:	90 91 87 22 	lds	r25, 0x2287
    2d64:	08 9f       	mul	r16, r24
    2d66:	b0 01       	movw	r22, r0
    2d68:	09 9f       	mul	r16, r25
    2d6a:	70 0d       	add	r23, r0
    2d6c:	18 9f       	mul	r17, r24
    2d6e:	70 0d       	add	r23, r0
    2d70:	11 24       	eor	r1, r1
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	0e 94 9f 42 	call	0x853e	; 0x853e <__floatunsisf>
    2d7a:	a7 01       	movw	r20, r14
    2d7c:	96 01       	movw	r18, r12
    2d7e:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    2d82:	60 93 79 22 	sts	0x2279, r22
    2d86:	70 93 7a 22 	sts	0x227A, r23
    2d8a:	80 93 7b 22 	sts	0x227B, r24
    2d8e:	90 93 7c 22 	sts	0x227C, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    2d92:	80 91 84 22 	lds	r24, 0x2284
    2d96:	90 91 85 22 	lds	r25, 0x2285
    2d9a:	08 9f       	mul	r16, r24
    2d9c:	b0 01       	movw	r22, r0
    2d9e:	09 9f       	mul	r16, r25
    2da0:	70 0d       	add	r23, r0
    2da2:	18 9f       	mul	r17, r24
    2da4:	70 0d       	add	r23, r0
    2da6:	11 24       	eor	r1, r1
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	0e 94 9f 42 	call	0x853e	; 0x853e <__floatunsisf>
    2db0:	a7 01       	movw	r20, r14
    2db2:	96 01       	movw	r18, r12
    2db4:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    2db8:	60 93 7d 22 	sts	0x227D, r22
    2dbc:	70 93 7e 22 	sts	0x227E, r23
    2dc0:	80 93 7f 22 	sts	0x227F, r24
    2dc4:	90 93 80 22 	sts	0x2280, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    2dc8:	df 91       	pop	r29
    2dca:	cf 91       	pop	r28
    2dcc:	1f 91       	pop	r17
    2dce:	0f 91       	pop	r16
    2dd0:	ff 90       	pop	r15
    2dd2:	ef 90       	pop	r14
    2dd4:	df 90       	pop	r13
    2dd6:	cf 90       	pop	r12
    2dd8:	08 95       	ret

00002dda <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    2dda:	e3 e7       	ldi	r30, 0x73	; 115
    2ddc:	f2 e2       	ldi	r31, 0x22	; 34
    2dde:	84 e6       	ldi	r24, 0x64	; 100
    2de0:	80 93 73 22 	sts	0x2273, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2de4:	8d ec       	ldi	r24, 0xCD	; 205
    2de6:	9c ec       	ldi	r25, 0xCC	; 204
    2de8:	ac e4       	ldi	r26, 0x4C	; 76
    2dea:	bd e3       	ldi	r27, 0x3D	; 61
    2dec:	80 93 75 22 	sts	0x2275, r24
    2df0:	90 93 76 22 	sts	0x2276, r25
    2df4:	a0 93 77 22 	sts	0x2277, r26
    2df8:	b0 93 78 22 	sts	0x2278, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2dfc:	8c ed       	ldi	r24, 0xDC	; 220
    2dfe:	95 e0       	ldi	r25, 0x05	; 5
    2e00:	80 93 84 22 	sts	0x2284, r24
    2e04:	90 93 85 22 	sts	0x2285, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2e08:	80 93 9c 22 	sts	0x229C, r24
    2e0c:	90 93 9d 22 	sts	0x229D, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2e10:	80 93 b4 22 	sts	0x22B4, r24
    2e14:	90 93 b5 22 	sts	0x22B5, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2e18:	80 93 cc 22 	sts	0x22CC, r24
    2e1c:	90 93 cd 22 	sts	0x22CD, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2e20:	80 93 86 22 	sts	0x2286, r24
    2e24:	90 93 87 22 	sts	0x2287, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2e28:	80 93 9e 22 	sts	0x229E, r24
    2e2c:	90 93 9f 22 	sts	0x229F, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2e30:	80 93 b6 22 	sts	0x22B6, r24
    2e34:	90 93 b7 22 	sts	0x22B7, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2e38:	80 93 ce 22 	sts	0x22CE, r24
    2e3c:	90 93 cf 22 	sts	0x22CF, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2e40:	86 e6       	ldi	r24, 0x66	; 102
    2e42:	96 e6       	ldi	r25, 0x66	; 102
    2e44:	a6 ee       	ldi	r26, 0xE6	; 230
    2e46:	bf e3       	ldi	r27, 0x3F	; 63
    2e48:	80 93 88 22 	sts	0x2288, r24
    2e4c:	90 93 89 22 	sts	0x2289, r25
    2e50:	a0 93 8a 22 	sts	0x228A, r26
    2e54:	b0 93 8b 22 	sts	0x228B, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2e58:	80 93 a0 22 	sts	0x22A0, r24
    2e5c:	90 93 a1 22 	sts	0x22A1, r25
    2e60:	a0 93 a2 22 	sts	0x22A2, r26
    2e64:	b0 93 a3 22 	sts	0x22A3, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2e68:	80 93 b8 22 	sts	0x22B8, r24
    2e6c:	90 93 b9 22 	sts	0x22B9, r25
    2e70:	a0 93 ba 22 	sts	0x22BA, r26
    2e74:	b0 93 bb 22 	sts	0x22BB, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2e78:	80 93 d0 22 	sts	0x22D0, r24
    2e7c:	90 93 d1 22 	sts	0x22D1, r25
    2e80:	a0 93 d2 22 	sts	0x22D2, r26
    2e84:	b0 93 d3 22 	sts	0x22D3, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    2e88:	8c e5       	ldi	r24, 0x5C	; 92
    2e8a:	9f e8       	ldi	r25, 0x8F	; 143
    2e8c:	a2 ea       	ldi	r26, 0xA2	; 162
    2e8e:	bf e3       	ldi	r27, 0x3F	; 63
    2e90:	80 93 8c 22 	sts	0x228C, r24
    2e94:	90 93 8d 22 	sts	0x228D, r25
    2e98:	a0 93 8e 22 	sts	0x228E, r26
    2e9c:	b0 93 8f 22 	sts	0x228F, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    2ea0:	80 93 a4 22 	sts	0x22A4, r24
    2ea4:	90 93 a5 22 	sts	0x22A5, r25
    2ea8:	a0 93 a6 22 	sts	0x22A6, r26
    2eac:	b0 93 a7 22 	sts	0x22A7, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    2eb0:	80 93 bc 22 	sts	0x22BC, r24
    2eb4:	90 93 bd 22 	sts	0x22BD, r25
    2eb8:	a0 93 be 22 	sts	0x22BE, r26
    2ebc:	b0 93 bf 22 	sts	0x22BF, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    2ec0:	80 93 d4 22 	sts	0x22D4, r24
    2ec4:	90 93 d5 22 	sts	0x22D5, r25
    2ec8:	a0 93 d6 22 	sts	0x22D6, r26
    2ecc:	b0 93 d7 22 	sts	0x22D7, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	a8 ec       	ldi	r26, 0xC8	; 200
    2ed6:	b3 e4       	ldi	r27, 0x43	; 67
    2ed8:	80 93 90 22 	sts	0x2290, r24
    2edc:	90 93 91 22 	sts	0x2291, r25
    2ee0:	a0 93 92 22 	sts	0x2292, r26
    2ee4:	b0 93 93 22 	sts	0x2293, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    2ee8:	80 93 a8 22 	sts	0x22A8, r24
    2eec:	90 93 a9 22 	sts	0x22A9, r25
    2ef0:	a0 93 aa 22 	sts	0x22AA, r26
    2ef4:	b0 93 ab 22 	sts	0x22AB, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	a6 e9       	ldi	r26, 0x96	; 150
    2efe:	b3 e4       	ldi	r27, 0x43	; 67
    2f00:	80 93 c0 22 	sts	0x22C0, r24
    2f04:	90 93 c1 22 	sts	0x22C1, r25
    2f08:	a0 93 c2 22 	sts	0x22C2, r26
    2f0c:	b0 93 c3 22 	sts	0x22C3, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	a0 e8       	ldi	r26, 0x80	; 128
    2f16:	bf eb       	ldi	r27, 0xBF	; 191
    2f18:	80 93 d8 22 	sts	0x22D8, r24
    2f1c:	90 93 d9 22 	sts	0x22D9, r25
    2f20:	a0 93 da 22 	sts	0x22DA, r26
    2f24:	b0 93 db 22 	sts	0x22DB, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    2f28:	88 e0       	ldi	r24, 0x08	; 8
    2f2a:	80 93 81 22 	sts	0x2281, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    2f2e:	80 93 99 22 	sts	0x2299, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    2f32:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A].microstep = A_MICROSTEPS;
    2f34:	80 93 c9 22 	sts	0x22C9, r24

	cfg.a[X].polarity = X_POLARITY;
    2f38:	10 92 83 22 	sts	0x2283, r1
	cfg.a[Y].polarity = Y_POLARITY;
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	80 93 9b 22 	sts	0x229B, r24
	cfg.a[Z].polarity = Z_POLARITY;
    2f42:	10 92 b3 22 	sts	0x22B3, r1
	cfg.a[A].polarity = A_POLARITY;
    2f46:	10 92 cb 22 	sts	0x22CB, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    2f4a:	80 93 98 22 	sts	0x2298, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    2f4e:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    2f50:	80 93 c8 22 	sts	0x22C8, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    2f54:	10 92 e0 22 	sts	0x22E0, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    2f58:	80 93 82 22 	sts	0x2282, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    2f5c:	80 93 9a 22 	sts	0x229A, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    2f60:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    2f62:	80 93 ca 22 	sts	0x22CA, r24

	_cfg_computed();		// generate computed values from the above
    2f66:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_cfg_computed>
}
    2f6a:	08 95       	ret

00002f6c <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2f6c:	0e 94 ed 16 	call	0x2dda	; 0x2dda <cfg_reset>
}
    2f70:	08 95       	ret

00002f72 <_cfg_print_status>:
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    2f72:	8c 30       	cpi	r24, 0x0C	; 12
    2f74:	31 f1       	breq	.+76     	; 0x2fc2 <_cfg_print_status+0x50>
    2f76:	8d 30       	cpi	r24, 0x0D	; 13
    2f78:	30 f4       	brcc	.+12     	; 0x2f86 <_cfg_print_status+0x14>
    2f7a:	82 30       	cpi	r24, 0x02	; 2
    2f7c:	59 f0       	breq	.+22     	; 0x2f94 <_cfg_print_status+0x22>
    2f7e:	8b 30       	cpi	r24, 0x0B	; 11
    2f80:	09 f0       	breq	.+2      	; 0x2f84 <_cfg_print_status+0x12>
    2f82:	45 c0       	rjmp	.+138    	; 0x300e <_cfg_print_status+0x9c>
    2f84:	0c c0       	rjmp	.+24     	; 0x2f9e <_cfg_print_status+0x2c>
    2f86:	81 31       	cpi	r24, 0x11	; 17
    2f88:	09 f1       	breq	.+66     	; 0x2fcc <_cfg_print_status+0x5a>
    2f8a:	83 31       	cpi	r24, 0x13	; 19
    2f8c:	81 f1       	breq	.+96     	; 0x2fee <_cfg_print_status+0x7c>
    2f8e:	80 31       	cpi	r24, 0x10	; 16
    2f90:	f1 f5       	brne	.+124    	; 0x300e <_cfg_print_status+0x9c>
    2f92:	12 c0       	rjmp	.+36     	; 0x2fb8 <_cfg_print_status+0x46>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_EAGAIN: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    2f94:	00 d0       	rcall	.+0      	; 0x2f96 <_cfg_print_status+0x24>
    2f96:	0f 92       	push	r0
    2f98:	89 e1       	ldi	r24, 0x19	; 25
    2f9a:	94 e0       	ldi	r25, 0x04	; 4
    2f9c:	1b c0       	rjmp	.+54     	; 0x2fd4 <_cfg_print_status+0x62>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    2f9e:	0f 92       	push	r0
    2fa0:	0f 92       	push	r0
    2fa2:	83 e0       	ldi	r24, 0x03	; 3
    2fa4:	94 e0       	ldi	r25, 0x04	; 4
    2fa6:	ed b7       	in	r30, 0x3d	; 61
    2fa8:	fe b7       	in	r31, 0x3e	; 62
    2faa:	81 83       	std	Z+1, r24	; 0x01
    2fac:	92 83       	std	Z+2, r25	; 0x02
    2fae:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	08 95       	ret
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2fb8:	00 d0       	rcall	.+0      	; 0x2fba <_cfg_print_status+0x48>
    2fba:	0f 92       	push	r0
    2fbc:	8c ee       	ldi	r24, 0xEC	; 236
    2fbe:	93 e0       	ldi	r25, 0x03	; 3
    2fc0:	09 c0       	rjmp	.+18     	; 0x2fd4 <_cfg_print_status+0x62>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    2fc2:	00 d0       	rcall	.+0      	; 0x2fc4 <_cfg_print_status+0x52>
    2fc4:	0f 92       	push	r0
    2fc6:	82 ed       	ldi	r24, 0xD2	; 210
    2fc8:	93 e0       	ldi	r25, 0x03	; 3
    2fca:	04 c0       	rjmp	.+8      	; 0x2fd4 <_cfg_print_status+0x62>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <_cfg_print_status+0x5c>
    2fce:	0f 92       	push	r0
    2fd0:	88 eb       	ldi	r24, 0xB8	; 184
    2fd2:	93 e0       	ldi	r25, 0x03	; 3
    2fd4:	ed b7       	in	r30, 0x3d	; 61
    2fd6:	fe b7       	in	r31, 0x3e	; 62
    2fd8:	81 83       	std	Z+1, r24	; 0x01
    2fda:	92 83       	std	Z+2, r25	; 0x02
    2fdc:	63 83       	std	Z+3, r22	; 0x03
    2fde:	74 83       	std	Z+4, r23	; 0x04
    2fe0:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	08 95       	ret
			break;

		case TG_ARC_SPECIFICATION_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    2fee:	00 d0       	rcall	.+0      	; 0x2ff0 <_cfg_print_status+0x7e>
    2ff0:	0f 92       	push	r0
    2ff2:	8d e9       	ldi	r24, 0x9D	; 157
    2ff4:	93 e0       	ldi	r25, 0x03	; 3
    2ff6:	ed b7       	in	r30, 0x3d	; 61
    2ff8:	fe b7       	in	r31, 0x3e	; 62
    2ffa:	81 83       	std	Z+1, r24	; 0x01
    2ffc:	92 83       	std	Z+2, r25	; 0x02
    2ffe:	63 83       	std	Z+3, r22	; 0x03
    3000:	74 83       	std	Z+4, r23	; 0x04
    3002:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
    3006:	0f 90       	pop	r0
    3008:	0f 90       	pop	r0
    300a:	0f 90       	pop	r0
    300c:	0f 90       	pop	r0
    300e:	08 95       	ret

00003010 <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    3010:	ef 92       	push	r14
    3012:	ff 92       	push	r15
    3014:	0f 93       	push	r16
    3016:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    3018:	e8 2e       	mov	r14, r24
    301a:	ff 24       	eor	r15, r15
    301c:	87 01       	movw	r16, r14
    301e:	00 0f       	add	r16, r16
    3020:	11 1f       	adc	r17, r17
    3022:	f8 01       	movw	r30, r16
    3024:	e9 5b       	subi	r30, 0xB9	; 185
    3026:	fd 4f       	sbci	r31, 0xFD	; 253
    3028:	25 91       	lpm	r18, Z+
    302a:	34 91       	lpm	r19, Z+
    302c:	00 d0       	rcall	.+0      	; 0x302e <_cfg_dump_axis+0x1e>
    302e:	0f 92       	push	r0
    3030:	8c e3       	ldi	r24, 0x3C	; 60
    3032:	96 e0       	ldi	r25, 0x06	; 6
    3034:	ad b7       	in	r26, 0x3d	; 61
    3036:	be b7       	in	r27, 0x3e	; 62
    3038:	11 96       	adiw	r26, 0x01	; 1
    303a:	8d 93       	st	X+, r24
    303c:	9c 93       	st	X, r25
    303e:	12 97       	sbiw	r26, 0x02	; 2
    3040:	13 96       	adiw	r26, 0x03	; 3
    3042:	2d 93       	st	X+, r18
    3044:	3c 93       	st	X, r19
    3046:	14 97       	sbiw	r26, 0x04	; 4
    3048:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    304c:	84 e0       	ldi	r24, 0x04	; 4
    304e:	96 e0       	ldi	r25, 0x06	; 6
    3050:	ed b7       	in	r30, 0x3d	; 61
    3052:	fe b7       	in	r31, 0x3e	; 62
    3054:	81 83       	std	Z+1, r24	; 0x01
    3056:	92 83       	std	Z+2, r25	; 0x02
    3058:	0e 0d       	add	r16, r14
    305a:	1f 1d       	adc	r17, r15
    305c:	83 e0       	ldi	r24, 0x03	; 3
    305e:	00 0f       	add	r16, r16
    3060:	11 1f       	adc	r17, r17
    3062:	8a 95       	dec	r24
    3064:	e1 f7       	brne	.-8      	; 0x305e <_cfg_dump_axis+0x4e>
    3066:	0d 58       	subi	r16, 0x8D	; 141
    3068:	1d 4d       	sbci	r17, 0xDD	; 221
    306a:	d8 01       	movw	r26, r16
    306c:	51 96       	adiw	r26, 0x11	; 17
    306e:	8d 91       	ld	r24, X+
    3070:	9c 91       	ld	r25, X
    3072:	52 97       	sbiw	r26, 0x12	; 18
    3074:	83 83       	std	Z+3, r24	; 0x03
    3076:	94 83       	std	Z+4, r25	; 0x04
    3078:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    307c:	8c ec       	ldi	r24, 0xCC	; 204
    307e:	95 e0       	ldi	r25, 0x05	; 5
    3080:	ed b7       	in	r30, 0x3d	; 61
    3082:	fe b7       	in	r31, 0x3e	; 62
    3084:	81 83       	std	Z+1, r24	; 0x01
    3086:	92 83       	std	Z+2, r25	; 0x02
    3088:	d8 01       	movw	r26, r16
    308a:	53 96       	adiw	r26, 0x13	; 19
    308c:	8d 91       	ld	r24, X+
    308e:	9c 91       	ld	r25, X
    3090:	54 97       	sbiw	r26, 0x14	; 20
    3092:	83 83       	std	Z+3, r24	; 0x03
    3094:	94 83       	std	Z+4, r25	; 0x04
    3096:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    309a:	ed b7       	in	r30, 0x3d	; 61
    309c:	fe b7       	in	r31, 0x3e	; 62
    309e:	31 96       	adiw	r30, 0x01	; 1
    30a0:	89 e9       	ldi	r24, 0x99	; 153
    30a2:	95 e0       	ldi	r25, 0x05	; 5
    30a4:	ad b7       	in	r26, 0x3d	; 61
    30a6:	be b7       	in	r27, 0x3e	; 62
    30a8:	11 96       	adiw	r26, 0x01	; 1
    30aa:	8d 93       	st	X+, r24
    30ac:	9c 93       	st	X, r25
    30ae:	12 97       	sbiw	r26, 0x02	; 2
    30b0:	d8 01       	movw	r26, r16
    30b2:	1e 96       	adiw	r26, 0x0e	; 14
    30b4:	8c 91       	ld	r24, X
    30b6:	82 83       	std	Z+2, r24	; 0x02
    30b8:	13 82       	std	Z+3, r1	; 0x03
    30ba:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    30be:	0f 92       	push	r0
    30c0:	0f 92       	push	r0
    30c2:	82 e6       	ldi	r24, 0x62	; 98
    30c4:	95 e0       	ldi	r25, 0x05	; 5
    30c6:	ed b7       	in	r30, 0x3d	; 61
    30c8:	fe b7       	in	r31, 0x3e	; 62
    30ca:	81 83       	std	Z+1, r24	; 0x01
    30cc:	92 83       	std	Z+2, r25	; 0x02
    30ce:	f8 01       	movw	r30, r16
    30d0:	85 89       	ldd	r24, Z+21	; 0x15
    30d2:	96 89       	ldd	r25, Z+22	; 0x16
    30d4:	a7 89       	ldd	r26, Z+23	; 0x17
    30d6:	b0 8d       	ldd	r27, Z+24	; 0x18
    30d8:	ed b7       	in	r30, 0x3d	; 61
    30da:	fe b7       	in	r31, 0x3e	; 62
    30dc:	83 83       	std	Z+3, r24	; 0x03
    30de:	94 83       	std	Z+4, r25	; 0x04
    30e0:	a5 83       	std	Z+5, r26	; 0x05
    30e2:	b6 83       	std	Z+6, r27	; 0x06
    30e4:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    30e8:	8f e2       	ldi	r24, 0x2F	; 47
    30ea:	95 e0       	ldi	r25, 0x05	; 5
    30ec:	ad b7       	in	r26, 0x3d	; 61
    30ee:	be b7       	in	r27, 0x3e	; 62
    30f0:	11 96       	adiw	r26, 0x01	; 1
    30f2:	8d 93       	st	X+, r24
    30f4:	9c 93       	st	X, r25
    30f6:	12 97       	sbiw	r26, 0x02	; 2
    30f8:	f8 01       	movw	r30, r16
    30fa:	81 8d       	ldd	r24, Z+25	; 0x19
    30fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    30fe:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3100:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3102:	ed b7       	in	r30, 0x3d	; 61
    3104:	fe b7       	in	r31, 0x3e	; 62
    3106:	83 83       	std	Z+3, r24	; 0x03
    3108:	94 83       	std	Z+4, r25	; 0x04
    310a:	a5 83       	std	Z+5, r26	; 0x05
    310c:	b6 83       	std	Z+6, r27	; 0x06
    310e:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    3112:	8c ef       	ldi	r24, 0xFC	; 252
    3114:	94 e0       	ldi	r25, 0x04	; 4
    3116:	ad b7       	in	r26, 0x3d	; 61
    3118:	be b7       	in	r27, 0x3e	; 62
    311a:	11 96       	adiw	r26, 0x01	; 1
    311c:	8d 93       	st	X+, r24
    311e:	9c 93       	st	X, r25
    3120:	12 97       	sbiw	r26, 0x02	; 2
    3122:	f8 01       	movw	r30, r16
    3124:	85 8d       	ldd	r24, Z+29	; 0x1d
    3126:	96 8d       	ldd	r25, Z+30	; 0x1e
    3128:	a7 8d       	ldd	r26, Z+31	; 0x1f
    312a:	b0 a1       	ldd	r27, Z+32	; 0x20
    312c:	ed b7       	in	r30, 0x3d	; 61
    312e:	fe b7       	in	r31, 0x3e	; 62
    3130:	83 83       	std	Z+3, r24	; 0x03
    3132:	94 83       	std	Z+4, r25	; 0x04
    3134:	a5 83       	std	Z+5, r26	; 0x05
    3136:	b6 83       	std	Z+6, r27	; 0x06
    3138:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    313c:	0f 90       	pop	r0
    313e:	0f 90       	pop	r0
    3140:	ed b7       	in	r30, 0x3d	; 61
    3142:	fe b7       	in	r31, 0x3e	; 62
    3144:	31 96       	adiw	r30, 0x01	; 1
    3146:	8b ec       	ldi	r24, 0xCB	; 203
    3148:	94 e0       	ldi	r25, 0x04	; 4
    314a:	ad b7       	in	r26, 0x3d	; 61
    314c:	be b7       	in	r27, 0x3e	; 62
    314e:	11 96       	adiw	r26, 0x01	; 1
    3150:	8d 93       	st	X+, r24
    3152:	9c 93       	st	X, r25
    3154:	12 97       	sbiw	r26, 0x02	; 2
    3156:	d8 01       	movw	r26, r16
    3158:	95 96       	adiw	r26, 0x25	; 37
    315a:	8c 91       	ld	r24, X
    315c:	82 83       	std	Z+2, r24	; 0x02
    315e:	13 82       	std	Z+3, r1	; 0x03
    3160:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    3164:	ed b7       	in	r30, 0x3d	; 61
    3166:	fe b7       	in	r31, 0x3e	; 62
    3168:	31 96       	adiw	r30, 0x01	; 1
    316a:	8a e9       	ldi	r24, 0x9A	; 154
    316c:	94 e0       	ldi	r25, 0x04	; 4
    316e:	ad b7       	in	r26, 0x3d	; 61
    3170:	be b7       	in	r27, 0x3e	; 62
    3172:	11 96       	adiw	r26, 0x01	; 1
    3174:	8d 93       	st	X+, r24
    3176:	9c 93       	st	X, r25
    3178:	12 97       	sbiw	r26, 0x02	; 2
    317a:	d8 01       	movw	r26, r16
    317c:	1f 96       	adiw	r26, 0x0f	; 15
    317e:	8c 91       	ld	r24, X
    3180:	82 83       	std	Z+2, r24	; 0x02
    3182:	13 82       	std	Z+3, r1	; 0x03
    3184:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    3188:	ed b7       	in	r30, 0x3d	; 61
    318a:	fe b7       	in	r31, 0x3e	; 62
    318c:	31 96       	adiw	r30, 0x01	; 1
    318e:	8a e6       	ldi	r24, 0x6A	; 106
    3190:	94 e0       	ldi	r25, 0x04	; 4
    3192:	ad b7       	in	r26, 0x3d	; 61
    3194:	be b7       	in	r27, 0x3e	; 62
    3196:	11 96       	adiw	r26, 0x01	; 1
    3198:	8d 93       	st	X+, r24
    319a:	9c 93       	st	X, r25
    319c:	12 97       	sbiw	r26, 0x02	; 2
    319e:	d8 01       	movw	r26, r16
    31a0:	50 96       	adiw	r26, 0x10	; 16
    31a2:	8c 91       	ld	r24, X
    31a4:	82 83       	std	Z+2, r24	; 0x02
    31a6:	13 82       	std	Z+3, r1	; 0x03
    31a8:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    31ac:	0f 92       	push	r0
    31ae:	0f 92       	push	r0
    31b0:	86 e3       	ldi	r24, 0x36	; 54
    31b2:	94 e0       	ldi	r25, 0x04	; 4
    31b4:	ed b7       	in	r30, 0x3d	; 61
    31b6:	fe b7       	in	r31, 0x3e	; 62
    31b8:	81 83       	std	Z+1, r24	; 0x01
    31ba:	92 83       	std	Z+2, r25	; 0x02
    31bc:	f8 01       	movw	r30, r16
    31be:	81 a1       	ldd	r24, Z+33	; 0x21
    31c0:	92 a1       	ldd	r25, Z+34	; 0x22
    31c2:	a3 a1       	ldd	r26, Z+35	; 0x23
    31c4:	b4 a1       	ldd	r27, Z+36	; 0x24
    31c6:	ed b7       	in	r30, 0x3d	; 61
    31c8:	fe b7       	in	r31, 0x3e	; 62
    31ca:	83 83       	std	Z+3, r24	; 0x03
    31cc:	94 83       	std	Z+4, r25	; 0x04
    31ce:	a5 83       	std	Z+5, r26	; 0x05
    31d0:	b6 83       	std	Z+6, r27	; 0x06
    31d2:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
    31d6:	8d b7       	in	r24, 0x3d	; 61
    31d8:	9e b7       	in	r25, 0x3e	; 62
    31da:	06 96       	adiw	r24, 0x06	; 6
    31dc:	8d bf       	out	0x3d, r24	; 61
    31de:	9e bf       	out	0x3e, r25	; 62
}
    31e0:	1f 91       	pop	r17
    31e2:	0f 91       	pop	r16
    31e4:	ff 90       	pop	r15
    31e6:	ef 90       	pop	r14
    31e8:	08 95       	ret

000031ea <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    31ea:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    31ec:	00 d0       	rcall	.+0      	; 0x31ee <cfg_dump+0x4>
    31ee:	0f 92       	push	r0
    31f0:	ed b7       	in	r30, 0x3d	; 61
    31f2:	fe b7       	in	r31, 0x3e	; 62
    31f4:	31 96       	adiw	r30, 0x01	; 1
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	97 e0       	ldi	r25, 0x07	; 7
    31fa:	ad b7       	in	r26, 0x3d	; 61
    31fc:	be b7       	in	r27, 0x3e	; 62
    31fe:	11 96       	adiw	r26, 0x01	; 1
    3200:	8d 93       	st	X+, r24
    3202:	9c 93       	st	X, r25
    3204:	12 97       	sbiw	r26, 0x02	; 2
    3206:	80 91 73 22 	lds	r24, 0x2273
    320a:	82 83       	std	Z+2, r24	; 0x02
    320c:	13 82       	std	Z+3, r1	; 0x03
    320e:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    3212:	0f 90       	pop	r0
    3214:	0f 90       	pop	r0
    3216:	89 ed       	ldi	r24, 0xD9	; 217
    3218:	96 e0       	ldi	r25, 0x06	; 6
    321a:	ed b7       	in	r30, 0x3d	; 61
    321c:	fe b7       	in	r31, 0x3e	; 62
    321e:	81 83       	std	Z+1, r24	; 0x01
    3220:	92 83       	std	Z+2, r25	; 0x02
    3222:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    3226:	00 d0       	rcall	.+0      	; 0x3228 <cfg_dump+0x3e>
    3228:	0f 92       	push	r0
    322a:	8f ea       	ldi	r24, 0xAF	; 175
    322c:	96 e0       	ldi	r25, 0x06	; 6
    322e:	ad b7       	in	r26, 0x3d	; 61
    3230:	be b7       	in	r27, 0x3e	; 62
    3232:	11 96       	adiw	r26, 0x01	; 1
    3234:	8d 93       	st	X+, r24
    3236:	9c 93       	st	X, r25
    3238:	12 97       	sbiw	r26, 0x02	; 2
    323a:	80 91 75 22 	lds	r24, 0x2275
    323e:	90 91 76 22 	lds	r25, 0x2276
    3242:	a0 91 77 22 	lds	r26, 0x2277
    3246:	b0 91 78 22 	lds	r27, 0x2278
    324a:	ed b7       	in	r30, 0x3d	; 61
    324c:	fe b7       	in	r31, 0x3e	; 62
    324e:	83 83       	std	Z+3, r24	; 0x03
    3250:	94 83       	std	Z+4, r25	; 0x04
    3252:	a5 83       	std	Z+5, r26	; 0x05
    3254:	b6 83       	std	Z+6, r27	; 0x06
    3256:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    325a:	85 e8       	ldi	r24, 0x85	; 133
    325c:	96 e0       	ldi	r25, 0x06	; 6
    325e:	ad b7       	in	r26, 0x3d	; 61
    3260:	be b7       	in	r27, 0x3e	; 62
    3262:	11 96       	adiw	r26, 0x01	; 1
    3264:	8d 93       	st	X+, r24
    3266:	9c 93       	st	X, r25
    3268:	12 97       	sbiw	r26, 0x02	; 2
    326a:	80 91 7d 22 	lds	r24, 0x227D
    326e:	90 91 7e 22 	lds	r25, 0x227E
    3272:	a0 91 7f 22 	lds	r26, 0x227F
    3276:	b0 91 80 22 	lds	r27, 0x2280
    327a:	ed b7       	in	r30, 0x3d	; 61
    327c:	fe b7       	in	r31, 0x3e	; 62
    327e:	83 83       	std	Z+3, r24	; 0x03
    3280:	94 83       	std	Z+4, r25	; 0x04
    3282:	a5 83       	std	Z+5, r26	; 0x05
    3284:	b6 83       	std	Z+6, r27	; 0x06
    3286:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    328a:	8a e5       	ldi	r24, 0x5A	; 90
    328c:	96 e0       	ldi	r25, 0x06	; 6
    328e:	ad b7       	in	r26, 0x3d	; 61
    3290:	be b7       	in	r27, 0x3e	; 62
    3292:	11 96       	adiw	r26, 0x01	; 1
    3294:	8d 93       	st	X+, r24
    3296:	9c 93       	st	X, r25
    3298:	12 97       	sbiw	r26, 0x02	; 2
    329a:	80 91 79 22 	lds	r24, 0x2279
    329e:	90 91 7a 22 	lds	r25, 0x227A
    32a2:	a0 91 7b 22 	lds	r26, 0x227B
    32a6:	b0 91 7c 22 	lds	r27, 0x227C
    32aa:	ed b7       	in	r30, 0x3d	; 61
    32ac:	fe b7       	in	r31, 0x3e	; 62
    32ae:	83 83       	std	Z+3, r24	; 0x03
    32b0:	94 83       	std	Z+4, r25	; 0x04
    32b2:	a5 83       	std	Z+5, r26	; 0x05
    32b4:	b6 83       	std	Z+6, r27	; 0x06
    32b6:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
    32ba:	10 e0       	ldi	r17, 0x00	; 0
    32bc:	8d b7       	in	r24, 0x3d	; 61
    32be:	9e b7       	in	r25, 0x3e	; 62
    32c0:	06 96       	adiw	r24, 0x06	; 6
    32c2:	8d bf       	out	0x3d, r24	; 61
    32c4:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
		_cfg_dump_axis(axis);
    32c6:	81 2f       	mov	r24, r17
    32c8:	0e 94 08 18 	call	0x3010	; 0x3010 <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    32cc:	1f 5f       	subi	r17, 0xFF	; 255
    32ce:	14 30       	cpi	r17, 0x04	; 4
    32d0:	d1 f7       	brne	.-12     	; 0x32c6 <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    32d2:	1f 91       	pop	r17
    32d4:	08 95       	ret

000032d6 <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	63 e7       	ldi	r22, 0x73	; 115
    32dc:	72 e2       	ldi	r23, 0x22	; 34
    32de:	4e e6       	ldi	r20, 0x6E	; 110
    32e0:	50 e0       	ldi	r21, 0x00	; 0
    32e2:	0e 94 a3 2a 	call	0x5546	; 0x5546 <memcpy_to_eeprom_with_checksum>
}
    32e6:	08 95       	ret

000032e8 <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	0e 94 f5 29 	call	0x53ea	; 0x53ea <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    32f0:	84 36       	cpi	r24, 0x64	; 100
    32f2:	19 f0       	breq	.+6      	; 0x32fa <cfg_read+0x12>
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	0d c0       	rjmp	.+26     	; 0x3314 <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    32fa:	83 e7       	ldi	r24, 0x73	; 115
    32fc:	92 e2       	ldi	r25, 0x22	; 34
    32fe:	60 e0       	ldi	r22, 0x00	; 0
    3300:	70 e0       	ldi	r23, 0x00	; 0
    3302:	4e e6       	ldi	r20, 0x6E	; 110
    3304:	50 e0       	ldi	r21, 0x00	; 0
    3306:	0e 94 ff 29 	call	0x53fe	; 0x53fe <memcpy_from_eeprom_with_checksum>
    330a:	00 97       	sbiw	r24, 0x00	; 0
    330c:	11 f0       	breq	.+4      	; 0x3312 <cfg_read+0x2a>
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    3314:	c9 01       	movw	r24, r18
    3316:	08 95       	ret

00003318 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    3318:	cf 92       	push	r12
    331a:	df 92       	push	r13
    331c:	ef 92       	push	r14
    331e:	ff 92       	push	r15
    3320:	0f 93       	push	r16
    3322:	1f 93       	push	r17
    3324:	df 93       	push	r29
    3326:	cf 93       	push	r28
    3328:	0f 92       	push	r0
    332a:	0f 92       	push	r0
    332c:	cd b7       	in	r28, 0x3d	; 61
    332e:	de b7       	in	r29, 0x3e	; 62
    3330:	6c 01       	movw	r12, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    3332:	19 82       	std	Y+1, r1	; 0x01
    3334:	1a 82       	std	Y+2, r1	; 0x02
    3336:	ee 24       	eor	r14, r14
    3338:	ff 24       	eor	r15, r15
    333a:	00 e0       	ldi	r16, 0x00	; 0
    333c:	10 e0       	ldi	r17, 0x00	; 0
    333e:	22 c0       	rjmp	.+68     	; 0x3384 <cfg_parse+0x6c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = toupper(text[i++])) != 0) {
		if (c == '=') {							// handle separator
    3340:	9d 33       	cpi	r25, 0x3D	; 61
    3342:	49 f4       	brne	.+18     	; 0x3356 <cfg_parse+0x3e>
			text[j++] = 0;						// terminate tag at separator
    3344:	f6 01       	movw	r30, r12
    3346:	e1 0f       	add	r30, r17
    3348:	f1 1d       	adc	r31, r1
    334a:	10 82       	st	Z, r1
    334c:	1f 5f       	subi	r17, 0xFF	; 255
			val = &text[j];						// new string starts at value
    334e:	76 01       	movw	r14, r12
    3350:	e1 0e       	add	r14, r17
    3352:	f1 1c       	adc	r15, r1
    3354:	17 c0       	rjmp	.+46     	; 0x3384 <cfg_parse+0x6c>
		} else if ( (c == '-') || 				// capture special characters
    3356:	9d 32       	cpi	r25, 0x2D	; 45
    3358:	81 f0       	breq	.+32     	; 0x337a <cfg_parse+0x62>
    335a:	9b 32       	cpi	r25, 0x2B	; 43
    335c:	71 f0       	breq	.+28     	; 0x337a <cfg_parse+0x62>
    335e:	9e 32       	cpi	r25, 0x2E	; 46
    3360:	61 f0       	breq	.+24     	; 0x337a <cfg_parse+0x62>
    3362:	9f 33       	cpi	r25, 0x3F	; 63
    3364:	51 f0       	breq	.+20     	; 0x337a <cfg_parse+0x62>
    3366:	98 32       	cpi	r25, 0x28	; 40
    3368:	41 f0       	breq	.+16     	; 0x337a <cfg_parse+0x62>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'A' && c <= 'Z') {		// capture letters
    336a:	89 2f       	mov	r24, r25
    336c:	81 54       	subi	r24, 0x41	; 65
    336e:	8a 31       	cpi	r24, 0x1A	; 26
    3370:	20 f0       	brcs	.+8      	; 0x337a <cfg_parse+0x62>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// capture numbers
    3372:	89 2f       	mov	r24, r25
    3374:	80 53       	subi	r24, 0x30	; 48
    3376:	8a 30       	cpi	r24, 0x0A	; 10
    3378:	28 f4       	brcc	.+10     	; 0x3384 <cfg_parse+0x6c>
			text[j++] = c;
    337a:	f6 01       	movw	r30, r12
    337c:	e1 0f       	add	r30, r17
    337e:	f1 1d       	adc	r31, r1
    3380:	90 83       	st	Z, r25
    3382:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = toupper(text[i++])) != 0) {
    3384:	f6 01       	movw	r30, r12
    3386:	e0 0f       	add	r30, r16
    3388:	f1 1d       	adc	r31, r1
    338a:	0f 5f       	subi	r16, 0xFF	; 255
    338c:	80 81       	ld	r24, Z
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	0e 94 76 48 	call	0x90ec	; 0x90ec <toupper>
    3394:	98 2f       	mov	r25, r24
    3396:	88 23       	and	r24, r24
    3398:	99 f6       	brne	.-90     	; 0x3340 <cfg_parse+0x28>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// capture numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// nul terminate line
    339a:	f6 01       	movw	r30, r12
    339c:	e1 0f       	add	r30, r17
    339e:	f1 1d       	adc	r31, r1
    33a0:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    33a2:	1f 5f       	subi	r17, 0xFF	; 255
    33a4:	c6 01       	movw	r24, r12
    33a6:	81 0f       	add	r24, r17
    33a8:	91 1d       	adc	r25, r1
    33aa:	89 83       	std	Y+1, r24	; 0x01
    33ac:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    33ae:	10 92 74 22 	sts	0x2274, r1
	switch (text[0]) {
    33b2:	f6 01       	movw	r30, r12
    33b4:	80 81       	ld	r24, Z
    33b6:	81 35       	cpi	r24, 0x51	; 81
    33b8:	d1 f0       	breq	.+52     	; 0x33ee <cfg_parse+0xd6>
    33ba:	82 35       	cpi	r24, 0x52	; 82
    33bc:	60 f4       	brcc	.+24     	; 0x33d6 <cfg_parse+0xbe>
    33be:	81 34       	cpi	r24, 0x41	; 65
    33c0:	59 f1       	breq	.+86     	; 0x3418 <cfg_parse+0x100>
    33c2:	82 34       	cpi	r24, 0x42	; 66
    33c4:	28 f4       	brcc	.+10     	; 0x33d0 <cfg_parse+0xb8>
    33c6:	88 32       	cpi	r24, 0x28	; 40
    33c8:	11 f1       	breq	.+68     	; 0x340e <cfg_parse+0xf6>
    33ca:	8f 33       	cpi	r24, 0x3F	; 63
    33cc:	39 f5       	brne	.+78     	; 0x341c <cfg_parse+0x104>
    33ce:	0c c0       	rjmp	.+24     	; 0x33e8 <cfg_parse+0xd0>
    33d0:	8d 34       	cpi	r24, 0x4D	; 77
    33d2:	21 f5       	brne	.+72     	; 0x341c <cfg_parse+0x104>
    33d4:	0e c0       	rjmp	.+28     	; 0x33f2 <cfg_parse+0xda>
    33d6:	89 35       	cpi	r24, 0x59	; 89
    33d8:	29 f0       	breq	.+10     	; 0x33e4 <cfg_parse+0xcc>
    33da:	8a 35       	cpi	r24, 0x5A	; 90
    33dc:	d9 f0       	breq	.+54     	; 0x3414 <cfg_parse+0xfc>
    33de:	88 35       	cpi	r24, 0x58	; 88
    33e0:	e9 f4       	brne	.+58     	; 0x341c <cfg_parse+0x104>
    33e2:	1f c0       	rjmp	.+62     	; 0x3422 <cfg_parse+0x10a>
    33e4:	11 e0       	ldi	r17, 0x01	; 1
    33e6:	1e c0       	rjmp	.+60     	; 0x3424 <cfg_parse+0x10c>
		case '?': cfg_dump(); status (TG_OK); break;
    33e8:	0e 94 f5 18 	call	0x31ea	; 0x31ea <cfg_dump>
    33ec:	10 c0       	rjmp	.+32     	; 0x340e <cfg_parse+0xf6>
		case '(': status (TG_OK);	break;			// ignore comment lines
		case 'Q': status (TG_QUIT); break;
    33ee:	8b e0       	ldi	r24, 0x0B	; 11
    33f0:	16 c0       	rjmp	.+44     	; 0x341e <cfg_parse+0x106>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    33f2:	c7 01       	movw	r24, r14
    33f4:	be 01       	movw	r22, r28
    33f6:	6f 5f       	subi	r22, 0xFF	; 255
    33f8:	7f 4f       	sbci	r23, 0xFF	; 255
    33fa:	0e 94 0a 46 	call	0x8c14	; 0x8c14 <strtod>
    33fe:	60 93 75 22 	sts	0x2275, r22
    3402:	70 93 76 22 	sts	0x2276, r23
    3406:	80 93 77 22 	sts	0x2277, r24
    340a:	90 93 78 22 	sts	0x2278, r25
				  status(TG_OK); 
    340e:	10 92 74 22 	sts	0x2274, r1
    3412:	07 c0       	rjmp	.+14     	; 0x3422 <cfg_parse+0x10a>
				  break;
    3414:	12 e0       	ldi	r17, 0x02	; 2
    3416:	06 c0       	rjmp	.+12     	; 0x3424 <cfg_parse+0x10c>

		case 'X': axis = X; break;
		case 'Y': axis = Y; break;
		case 'Z': axis = Z; break;
    3418:	13 e0       	ldi	r17, 0x03	; 3
    341a:	04 c0       	rjmp	.+8      	; 0x3424 <cfg_parse+0x10c>
		case 'A': axis = A; break;

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    341c:	8c e0       	ldi	r24, 0x0C	; 12
    341e:	80 93 74 22 	sts	0x2274, r24
    3422:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    3424:	80 91 74 22 	lds	r24, 0x2274
    3428:	88 23       	and	r24, r24
    342a:	09 f0       	breq	.+2      	; 0x342e <cfg_parse+0x116>
    342c:	ee c0       	rjmp	.+476    	; 0x360a <cfg_parse+0x2f2>
		status(TG_OK);							// pre-emptive setting
    342e:	10 92 74 22 	sts	0x2274, r1
		switch (text[1]) {
    3432:	f6 01       	movw	r30, r12
    3434:	81 81       	ldd	r24, Z+1	; 0x01
    3436:	8c 34       	cpi	r24, 0x4C	; 76
    3438:	09 f4       	brne	.+2      	; 0x343c <cfg_parse+0x124>
    343a:	b8 c0       	rjmp	.+368    	; 0x35ac <cfg_parse+0x294>
    343c:	8d 34       	cpi	r24, 0x4D	; 77
    343e:	30 f4       	brcc	.+12     	; 0x344c <cfg_parse+0x134>
    3440:	84 34       	cpi	r24, 0x44	; 68
    3442:	a9 f1       	breq	.+106    	; 0x34ae <cfg_parse+0x196>
    3444:	86 34       	cpi	r24, 0x46	; 70
    3446:	09 f0       	breq	.+2      	; 0x344a <cfg_parse+0x132>
    3448:	dd c0       	rjmp	.+442    	; 0x3604 <cfg_parse+0x2ec>
    344a:	1d c0       	rjmp	.+58     	; 0x3486 <cfg_parse+0x16e>
    344c:	80 35       	cpi	r24, 0x50	; 80
    344e:	09 f4       	brne	.+2      	; 0x3452 <cfg_parse+0x13a>
    3450:	47 c0       	rjmp	.+142    	; 0x34e0 <cfg_parse+0x1c8>
    3452:	83 35       	cpi	r24, 0x53	; 83
    3454:	21 f0       	breq	.+8      	; 0x345e <cfg_parse+0x146>
    3456:	8d 34       	cpi	r24, 0x4D	; 77
    3458:	09 f0       	breq	.+2      	; 0x345c <cfg_parse+0x144>
    345a:	d4 c0       	rjmp	.+424    	; 0x3604 <cfg_parse+0x2ec>
    345c:	58 c0       	rjmp	.+176    	; 0x350e <cfg_parse+0x1f6>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    345e:	c7 01       	movw	r24, r14
    3460:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <atoi>
    3464:	21 2f       	mov	r18, r17
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	f9 01       	movw	r30, r18
    346a:	ee 0f       	add	r30, r30
    346c:	ff 1f       	adc	r31, r31
    346e:	e2 0f       	add	r30, r18
    3470:	f3 1f       	adc	r31, r19
    3472:	23 e0       	ldi	r18, 0x03	; 3
    3474:	ee 0f       	add	r30, r30
    3476:	ff 1f       	adc	r31, r31
    3478:	2a 95       	dec	r18
    347a:	e1 f7       	brne	.-8      	; 0x3474 <cfg_parse+0x15c>
    347c:	ed 58       	subi	r30, 0x8D	; 141
    347e:	fd 4d       	sbci	r31, 0xDD	; 221
    3480:	81 8b       	std	Z+17, r24	; 0x11
    3482:	92 8b       	std	Z+18, r25	; 0x12
    3484:	c2 c0       	rjmp	.+388    	; 0x360a <cfg_parse+0x2f2>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    3486:	c7 01       	movw	r24, r14
    3488:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <atoi>
    348c:	21 2f       	mov	r18, r17
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	f9 01       	movw	r30, r18
    3492:	ee 0f       	add	r30, r30
    3494:	ff 1f       	adc	r31, r31
    3496:	e2 0f       	add	r30, r18
    3498:	f3 1f       	adc	r31, r19
    349a:	13 e0       	ldi	r17, 0x03	; 3
    349c:	ee 0f       	add	r30, r30
    349e:	ff 1f       	adc	r31, r31
    34a0:	1a 95       	dec	r17
    34a2:	e1 f7       	brne	.-8      	; 0x349c <cfg_parse+0x184>
    34a4:	ed 58       	subi	r30, 0x8D	; 141
    34a6:	fd 4d       	sbci	r31, 0xDD	; 221
    34a8:	83 8b       	std	Z+19, r24	; 0x13
    34aa:	94 8b       	std	Z+20, r25	; 0x14
    34ac:	ae c0       	rjmp	.+348    	; 0x360a <cfg_parse+0x2f2>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    34ae:	c7 01       	movw	r24, r14
    34b0:	be 01       	movw	r22, r28
    34b2:	6f 5f       	subi	r22, 0xFF	; 255
    34b4:	7f 4f       	sbci	r23, 0xFF	; 255
    34b6:	0e 94 0a 46 	call	0x8c14	; 0x8c14 <strtod>
    34ba:	21 2f       	mov	r18, r17
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	f9 01       	movw	r30, r18
    34c0:	ee 0f       	add	r30, r30
    34c2:	ff 1f       	adc	r31, r31
    34c4:	e2 0f       	add	r30, r18
    34c6:	f3 1f       	adc	r31, r19
    34c8:	a3 e0       	ldi	r26, 0x03	; 3
    34ca:	ee 0f       	add	r30, r30
    34cc:	ff 1f       	adc	r31, r31
    34ce:	aa 95       	dec	r26
    34d0:	e1 f7       	brne	.-8      	; 0x34ca <cfg_parse+0x1b2>
    34d2:	ed 58       	subi	r30, 0x8D	; 141
    34d4:	fd 4d       	sbci	r31, 0xDD	; 221
    34d6:	65 8b       	std	Z+21, r22	; 0x15
    34d8:	76 8b       	std	Z+22, r23	; 0x16
    34da:	87 8b       	std	Z+23, r24	; 0x17
    34dc:	90 8f       	std	Z+24, r25	; 0x18
    34de:	95 c0       	rjmp	.+298    	; 0x360a <cfg_parse+0x2f2>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    34e0:	c7 01       	movw	r24, r14
    34e2:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <atoi>
    34e6:	68 2f       	mov	r22, r24
    34e8:	81 2f       	mov	r24, r17
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	fc 01       	movw	r30, r24
    34ee:	ee 0f       	add	r30, r30
    34f0:	ff 1f       	adc	r31, r31
    34f2:	e8 0f       	add	r30, r24
    34f4:	f9 1f       	adc	r31, r25
    34f6:	53 e0       	ldi	r21, 0x03	; 3
    34f8:	ee 0f       	add	r30, r30
    34fa:	ff 1f       	adc	r31, r31
    34fc:	5a 95       	dec	r21
    34fe:	e1 f7       	brne	.-8      	; 0x34f8 <cfg_parse+0x1e0>
    3500:	ed 58       	subi	r30, 0x8D	; 141
    3502:	fd 4d       	sbci	r31, 0xDD	; 221
    3504:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    3506:	81 2f       	mov	r24, r17
    3508:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <st_set_polarity>
    350c:	7e c0       	rjmp	.+252    	; 0x360a <cfg_parse+0x2f2>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    350e:	f6 01       	movw	r30, r12
    3510:	82 81       	ldd	r24, Z+2	; 0x02
    3512:	89 34       	cpi	r24, 0x49	; 73
    3514:	99 f4       	brne	.+38     	; 0x353c <cfg_parse+0x224>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    3516:	c7 01       	movw	r24, r14
    3518:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <atoi>
    351c:	21 2f       	mov	r18, r17
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	f9 01       	movw	r30, r18
    3522:	ee 0f       	add	r30, r30
    3524:	ff 1f       	adc	r31, r31
    3526:	e2 0f       	add	r30, r18
    3528:	f3 1f       	adc	r31, r19
    352a:	93 e0       	ldi	r25, 0x03	; 3
    352c:	ee 0f       	add	r30, r30
    352e:	ff 1f       	adc	r31, r31
    3530:	9a 95       	dec	r25
    3532:	e1 f7       	brne	.-8      	; 0x352c <cfg_parse+0x214>
    3534:	ed 58       	subi	r30, 0x8D	; 141
    3536:	fd 4d       	sbci	r31, 0xDD	; 221
    3538:	86 87       	std	Z+14, r24	; 0x0e
    353a:	67 c0       	rjmp	.+206    	; 0x360a <cfg_parse+0x2f2>
				} else if (text[3] == 'R') {
    353c:	f6 01       	movw	r30, r12
    353e:	83 81       	ldd	r24, Z+3	; 0x03
    3540:	82 35       	cpi	r24, 0x52	; 82
    3542:	c9 f4       	brne	.+50     	; 0x3576 <cfg_parse+0x25e>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    3544:	c7 01       	movw	r24, r14
    3546:	be 01       	movw	r22, r28
    3548:	6f 5f       	subi	r22, 0xFF	; 255
    354a:	7f 4f       	sbci	r23, 0xFF	; 255
    354c:	0e 94 0a 46 	call	0x8c14	; 0x8c14 <strtod>
    3550:	21 2f       	mov	r18, r17
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	f9 01       	movw	r30, r18
    3556:	ee 0f       	add	r30, r30
    3558:	ff 1f       	adc	r31, r31
    355a:	e2 0f       	add	r30, r18
    355c:	f3 1f       	adc	r31, r19
    355e:	13 e0       	ldi	r17, 0x03	; 3
    3560:	ee 0f       	add	r30, r30
    3562:	ff 1f       	adc	r31, r31
    3564:	1a 95       	dec	r17
    3566:	e1 f7       	brne	.-8      	; 0x3560 <cfg_parse+0x248>
    3568:	ed 58       	subi	r30, 0x8D	; 141
    356a:	fd 4d       	sbci	r31, 0xDD	; 221
    356c:	61 8f       	std	Z+25, r22	; 0x19
    356e:	72 8f       	std	Z+26, r23	; 0x1a
    3570:	83 8f       	std	Z+27, r24	; 0x1b
    3572:	94 8f       	std	Z+28, r25	; 0x1c
    3574:	4a c0       	rjmp	.+148    	; 0x360a <cfg_parse+0x2f2>
				} else if (text[3] == 'T') {
    3576:	84 35       	cpi	r24, 0x54	; 84
    3578:	c9 f4       	brne	.+50     	; 0x35ac <cfg_parse+0x294>
					CFG(axis).mm_travel = strtod(val, &end); break;
    357a:	c7 01       	movw	r24, r14
    357c:	be 01       	movw	r22, r28
    357e:	6f 5f       	subi	r22, 0xFF	; 255
    3580:	7f 4f       	sbci	r23, 0xFF	; 255
    3582:	0e 94 0a 46 	call	0x8c14	; 0x8c14 <strtod>
    3586:	21 2f       	mov	r18, r17
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	f9 01       	movw	r30, r18
    358c:	ee 0f       	add	r30, r30
    358e:	ff 1f       	adc	r31, r31
    3590:	e2 0f       	add	r30, r18
    3592:	f3 1f       	adc	r31, r19
    3594:	a3 e0       	ldi	r26, 0x03	; 3
    3596:	ee 0f       	add	r30, r30
    3598:	ff 1f       	adc	r31, r31
    359a:	aa 95       	dec	r26
    359c:	e1 f7       	brne	.-8      	; 0x3596 <cfg_parse+0x27e>
    359e:	ed 58       	subi	r30, 0x8D	; 141
    35a0:	fd 4d       	sbci	r31, 0xDD	; 221
    35a2:	65 8f       	std	Z+29, r22	; 0x1d
    35a4:	76 8f       	std	Z+30, r23	; 0x1e
    35a6:	87 8f       	std	Z+31, r24	; 0x1f
    35a8:	90 a3       	std	Z+32, r25	; 0x20
    35aa:	2f c0       	rjmp	.+94     	; 0x360a <cfg_parse+0x2f2>
				}
			case 'L': 
				if (text[2] == 'O') {
    35ac:	f6 01       	movw	r30, r12
    35ae:	82 81       	ldd	r24, Z+2	; 0x02
    35b0:	8f 34       	cpi	r24, 0x4F	; 79
    35b2:	99 f4       	brne	.+38     	; 0x35da <cfg_parse+0x2c2>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    35b4:	c7 01       	movw	r24, r14
    35b6:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <atoi>
    35ba:	21 2f       	mov	r18, r17
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	f9 01       	movw	r30, r18
    35c0:	ee 0f       	add	r30, r30
    35c2:	ff 1f       	adc	r31, r31
    35c4:	e2 0f       	add	r30, r18
    35c6:	f3 1f       	adc	r31, r19
    35c8:	53 e0       	ldi	r21, 0x03	; 3
    35ca:	ee 0f       	add	r30, r30
    35cc:	ff 1f       	adc	r31, r31
    35ce:	5a 95       	dec	r21
    35d0:	e1 f7       	brne	.-8      	; 0x35ca <cfg_parse+0x2b2>
    35d2:	ed 58       	subi	r30, 0x8D	; 141
    35d4:	fd 4d       	sbci	r31, 0xDD	; 221
    35d6:	87 87       	std	Z+15, r24	; 0x0f
    35d8:	18 c0       	rjmp	.+48     	; 0x360a <cfg_parse+0x2f2>
				} else if (text[2] == 'I') {
    35da:	89 34       	cpi	r24, 0x49	; 73
    35dc:	99 f4       	brne	.+38     	; 0x3604 <cfg_parse+0x2ec>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    35de:	c7 01       	movw	r24, r14
    35e0:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <atoi>
    35e4:	21 2f       	mov	r18, r17
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	f9 01       	movw	r30, r18
    35ea:	ee 0f       	add	r30, r30
    35ec:	ff 1f       	adc	r31, r31
    35ee:	e2 0f       	add	r30, r18
    35f0:	f3 1f       	adc	r31, r19
    35f2:	23 e0       	ldi	r18, 0x03	; 3
    35f4:	ee 0f       	add	r30, r30
    35f6:	ff 1f       	adc	r31, r31
    35f8:	2a 95       	dec	r18
    35fa:	e1 f7       	brne	.-8      	; 0x35f4 <cfg_parse+0x2dc>
    35fc:	ed 58       	subi	r30, 0x8D	; 141
    35fe:	fd 4d       	sbci	r31, 0xDD	; 221
    3600:	85 a3       	std	Z+37, r24	; 0x25
    3602:	03 c0       	rjmp	.+6      	; 0x360a <cfg_parse+0x2f2>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    3604:	8c e0       	ldi	r24, 0x0C	; 12
    3606:	80 93 74 22 	sts	0x2274, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    360a:	80 91 74 22 	lds	r24, 0x2274
    360e:	b6 01       	movw	r22, r12
    3610:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
}
    3614:	80 91 74 22 	lds	r24, 0x2274
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	0f 90       	pop	r0
    361c:	0f 90       	pop	r0
    361e:	cf 91       	pop	r28
    3620:	df 91       	pop	r29
    3622:	1f 91       	pop	r17
    3624:	0f 91       	pop	r16
    3626:	ff 90       	pop	r15
    3628:	ef 90       	pop	r14
    362a:	df 90       	pop	r13
    362c:	cf 90       	pop	r12
    362e:	08 95       	ret

00003630 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3630:	ef 92       	push	r14
    3632:	ff 92       	push	r15
    3634:	0f 93       	push	r16
    3636:	1f 93       	push	r17
    3638:	df 93       	push	r29
    363a:	cf 93       	push	r28
    363c:	cd b7       	in	r28, 0x3d	; 61
    363e:	de b7       	in	r29, 0x3e	; 62
    3640:	a8 97       	sbiw	r28, 0x28	; 40
    3642:	cd bf       	out	0x3d, r28	; 61
    3644:	de bf       	out	0x3e, r29	; 62
    3646:	0f e4       	ldi	r16, 0x4F	; 79
    3648:	12 e0       	ldi	r17, 0x02	; 2
    364a:	a0 e0       	ldi	r26, 0x00	; 0
    364c:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    364e:	7e 01       	movw	r14, r28
    3650:	08 94       	sec
    3652:	e1 1c       	adc	r14, r1
    3654:	f1 1c       	adc	r15, r1
    3656:	02 c0       	rjmp	.+4      	; 0x365c <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3658:	0f 5f       	subi	r16, 0xFF	; 255
    365a:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    365c:	f8 01       	movw	r30, r16
    365e:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    3660:	88 23       	and	r24, r24
    3662:	89 f4       	brne	.+34     	; 0x3686 <cfg_test+0x56>
			text[j] = 0;
    3664:	ce 01       	movw	r24, r28
    3666:	01 96       	adiw	r24, 0x01	; 1
    3668:	a8 0f       	add	r26, r24
    366a:	b9 1f       	adc	r27, r25
    366c:	1c 92       	st	X, r1
			cfg_parse(text);
    366e:	0e 94 8c 19 	call	0x3318	; 0x3318 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    3672:	a8 96       	adiw	r28, 0x28	; 40
    3674:	cd bf       	out	0x3d, r28	; 61
    3676:	de bf       	out	0x3e, r29	; 62
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	1f 91       	pop	r17
    367e:	0f 91       	pop	r16
    3680:	ff 90       	pop	r15
    3682:	ef 90       	pop	r14
    3684:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    3686:	8d 30       	cpi	r24, 0x0D	; 13
    3688:	21 f0       	breq	.+8      	; 0x3692 <cfg_test+0x62>
    368a:	8a 30       	cpi	r24, 0x0A	; 10
    368c:	11 f0       	breq	.+4      	; 0x3692 <cfg_test+0x62>
    368e:	8b 33       	cpi	r24, 0x3B	; 59
    3690:	49 f4       	brne	.+18     	; 0x36a4 <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    3692:	ae 0d       	add	r26, r14
    3694:	bf 1d       	adc	r27, r15
    3696:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    3698:	c7 01       	movw	r24, r14
    369a:	0e 94 8c 19 	call	0x3318	; 0x3318 <cfg_parse>
    369e:	a0 e0       	ldi	r26, 0x00	; 0
    36a0:	b0 e0       	ldi	r27, 0x00	; 0
    36a2:	da cf       	rjmp	.-76     	; 0x3658 <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    36a4:	81 32       	cpi	r24, 0x21	; 33
    36a6:	c0 f2       	brcs	.-80     	; 0x3658 <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    36a8:	f7 01       	movw	r30, r14
    36aa:	ea 0f       	add	r30, r26
    36ac:	fb 1f       	adc	r31, r27
    36ae:	80 83       	st	Z, r24
    36b0:	11 96       	adiw	r26, 0x01	; 1
    36b2:	d2 cf       	rjmp	.-92     	; 0x3658 <cfg_test+0x28>

000036b4 <en_init>:


void en_init(void) 
{
	return;
}
    36b4:	08 95       	ret

000036b6 <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
    36b6:	88 23       	and	r24, r24
    36b8:	b1 f0       	breq	.+44     	; 0x36e6 <en_write+0x30>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    36ba:	e0 91 6f 22 	lds	r30, 0x226F
    36be:	f0 91 70 22 	lds	r31, 0x2270
    36c2:	80 e2       	ldi	r24, 0x20	; 32
    36c4:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    36c6:	e0 91 5f 22 	lds	r30, 0x225F
    36ca:	f0 91 60 22 	lds	r31, 0x2260
    36ce:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    36d0:	e0 91 4f 22 	lds	r30, 0x224F
    36d4:	f0 91 50 22 	lds	r31, 0x2250
    36d8:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    36da:	e0 91 3f 22 	lds	r30, 0x223F
    36de:	f0 91 40 22 	lds	r31, 0x2240
    36e2:	85 83       	std	Z+5, r24	; 0x05
    36e4:	08 95       	ret
void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36e6:	e0 91 6f 22 	lds	r30, 0x226F
    36ea:	f0 91 70 22 	lds	r31, 0x2270
    36ee:	80 e2       	ldi	r24, 0x20	; 32
    36f0:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36f2:	e0 91 5f 22 	lds	r30, 0x225F
    36f6:	f0 91 60 22 	lds	r31, 0x2260
    36fa:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36fc:	e0 91 4f 22 	lds	r30, 0x224F
    3700:	f0 91 50 22 	lds	r31, 0x2250
    3704:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    3706:	e0 91 3f 22 	lds	r30, 0x223F
    370a:	f0 91 40 22 	lds	r31, 0x2240
    370e:	86 83       	std	Z+6, r24	; 0x06
    3710:	08 95       	ret

00003712 <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    3712:	0f 93       	push	r16
    3714:	df 93       	push	r29
    3716:	cf 93       	push	r28
    3718:	0f 92       	push	r0
    371a:	cd b7       	in	r28, 0x3d	; 61
    371c:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    371e:	8b ec       	ldi	r24, 0xCB	; 203
    3720:	e0 e5       	ldi	r30, 0x50	; 80
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    3726:	88 e0       	ldi	r24, 0x08	; 8
    3728:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    372c:	80 91 51 00 	lds	r24, 0x0051
    3730:	83 ff       	sbrs	r24, 3
    3732:	fc cf       	rjmp	.-8      	; 0x372c <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    3734:	82 ec       	ldi	r24, 0xC2	; 194
    3736:	e0 e5       	ldi	r30, 0x50	; 80
    3738:	f0 e0       	ldi	r31, 0x00	; 0
    373a:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    373c:	88 e1       	ldi	r24, 0x18	; 24
    373e:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    3742:	80 91 51 00 	lds	r24, 0x0051
    3746:	84 ff       	sbrs	r24, 4
    3748:	fc cf       	rjmp	.-8      	; 0x3742 <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    374a:	8f b7       	in	r24, 0x3f	; 63
    374c:	89 83       	std	Y+1, r24	; 0x01
    374e:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3750:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3752:	24 e0       	ldi	r18, 0x04	; 4
    3754:	80 e4       	ldi	r24, 0x40	; 64
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	fc 01       	movw	r30, r24
    375a:	08 ed       	ldi	r16, 0xD8	; 216
    375c:	04 bf       	out	0x34, r16	; 52
    375e:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3760:	89 81       	ldd	r24, Y+1	; 0x01
    3762:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    3764:	80 91 50 00 	lds	r24, 0x0050
    3768:	8e 7f       	andi	r24, 0xFE	; 254
    376a:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    376e:	0f 90       	pop	r0
    3770:	cf 91       	pop	r28
    3772:	df 91       	pop	r29
    3774:	0f 91       	pop	r16
    3776:	08 95       	ret

00003778 <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    3778:	0e 94 89 1b 	call	0x3712	; 0x3712 <xmega_init_clocks>
}
    377c:	08 95       	ret

0000377e <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    377e:	0f 93       	push	r16
    3780:	df 93       	push	r29
    3782:	cf 93       	push	r28
    3784:	0f 92       	push	r0
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    378a:	2f b7       	in	r18, 0x3f	; 63
    378c:	29 83       	std	Y+1, r18	; 0x01
    378e:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3790:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3792:	fc 01       	movw	r30, r24
    3794:	08 ed       	ldi	r16, 0xD8	; 216
    3796:	04 bf       	out	0x34, r16	; 52
    3798:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    379a:	89 81       	ldd	r24, Y+1	; 0x01
    379c:	8f bf       	out	0x3f, r24	; 63
#endif
}
    379e:	0f 90       	pop	r0
    37a0:	cf 91       	pop	r28
    37a2:	df 91       	pop	r29
    37a4:	0f 91       	pop	r16
    37a6:	08 95       	ret

000037a8 <mc_motion_stop>:
 * mc_motion_stop() - stop all current motions
 */

int mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    37a8:	10 92 5c 21 	sts	0x215C, r1
	ma.arc_state = MC_STATE_OFF;
    37ac:	10 92 e1 22 	sts	0x22E1, r1
	return (TG_OK);
}
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	08 95       	ret

000037b6 <mc_go_home>:
 */

int mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    37b6:	8c e0       	ldi	r24, 0x0C	; 12
    37b8:	ed e5       	ldi	r30, 0x5D	; 93
    37ba:	f1 e2       	ldi	r31, 0x21	; 33
    37bc:	df 01       	movw	r26, r30
    37be:	1d 92       	st	X+, r1
    37c0:	8a 95       	dec	r24
    37c2:	e9 f7       	brne	.-6      	; 0x37be <mc_go_home+0x8>
	return (TG_OK);
}
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	08 95       	ret

000037ca <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    37ca:	8c e0       	ldi	r24, 0x0C	; 12
    37cc:	ed e5       	ldi	r30, 0x5D	; 93
    37ce:	f1 e2       	ldi	r31, 0x21	; 33
    37d0:	df 01       	movw	r26, r30
    37d2:	1d 92       	st	X+, r1
    37d4:	8a 95       	dec	r24
    37d6:	e9 f7       	brne	.-6      	; 0x37d2 <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    37d8:	10 92 5c 21 	sts	0x215C, r1
	ma.arc_state = MC_STATE_OFF;
    37dc:	10 92 e1 22 	sts	0x22E1, r1
}
    37e0:	08 95       	ret

000037e2 <mc_line_continue>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continue() 
{
    37e2:	af 92       	push	r10
    37e4:	bf 92       	push	r11
    37e6:	cf 92       	push	r12
    37e8:	df 92       	push	r13
    37ea:	ef 92       	push	r14
    37ec:	ff 92       	push	r15
    37ee:	0f 93       	push	r16
    37f0:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    37f2:	80 91 5c 21 	lds	r24, 0x215C
    37f6:	88 23       	and	r24, r24
    37f8:	19 f4       	brne	.+6      	; 0x3800 <mc_line_continue+0x1e>
    37fa:	23 e0       	ldi	r18, 0x03	; 3
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	30 c0       	rjmp	.+96     	; 0x3860 <mc_line_continue+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    3800:	82 e0       	ldi	r24, 0x02	; 2
    3802:	80 93 5c 21 	sts	0x215C, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    3806:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <mv_test_move_buffer_full>
    380a:	88 23       	and	r24, r24
    380c:	19 f0       	breq	.+6      	; 0x3814 <mc_line_continue+0x32>
    380e:	22 e0       	ldi	r18, 0x02	; 2
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	26 c0       	rjmp	.+76     	; 0x3860 <mc_line_continue+0x7e>
		return (TG_EAGAIN);
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    3814:	60 91 75 21 	lds	r22, 0x2175
    3818:	70 91 76 21 	lds	r23, 0x2176
    381c:	80 91 77 21 	lds	r24, 0x2177
    3820:	90 91 78 21 	lds	r25, 0x2178
    3824:	20 91 79 21 	lds	r18, 0x2179
    3828:	30 91 7a 21 	lds	r19, 0x217A
    382c:	40 91 7b 21 	lds	r20, 0x217B
    3830:	50 91 7c 21 	lds	r21, 0x217C
    3834:	e0 90 7d 21 	lds	r14, 0x217D
    3838:	f0 90 7e 21 	lds	r15, 0x217E
    383c:	00 91 7f 21 	lds	r16, 0x217F
    3840:	10 91 80 21 	lds	r17, 0x2180
    3844:	a0 90 81 21 	lds	r10, 0x2181
    3848:	b0 90 82 21 	lds	r11, 0x2182
    384c:	c0 90 83 21 	lds	r12, 0x2183
    3850:	d0 90 84 21 	lds	r13, 0x2184
    3854:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    3858:	10 92 5c 21 	sts	0x215C, r1
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3860:	c9 01       	movw	r24, r18
    3862:	1f 91       	pop	r17
    3864:	0f 91       	pop	r16
    3866:	ff 90       	pop	r15
    3868:	ef 90       	pop	r14
    386a:	df 90       	pop	r13
    386c:	cf 90       	pop	r12
    386e:	bf 90       	pop	r11
    3870:	af 90       	pop	r10
    3872:	08 95       	ret

00003874 <mc_dwell>:
 * NOTE: It's not necessary to set the target as this is set correctly in the Gcode. 
 */

int mc_dwell(double seconds) 
{
	mc.steps[X] = 0;
    3874:	10 92 75 21 	sts	0x2175, r1
    3878:	10 92 76 21 	sts	0x2176, r1
    387c:	10 92 77 21 	sts	0x2177, r1
    3880:	10 92 78 21 	sts	0x2178, r1
	mc.steps[Y] = 0;
    3884:	10 92 79 21 	sts	0x2179, r1
    3888:	10 92 7a 21 	sts	0x217A, r1
    388c:	10 92 7b 21 	sts	0x217B, r1
    3890:	10 92 7c 21 	sts	0x217C, r1
	mc.steps[Z] = 0;
    3894:	10 92 7d 21 	sts	0x217D, r1
    3898:	10 92 7e 21 	sts	0x217E, r1
    389c:	10 92 7f 21 	sts	0x217F, r1
    38a0:	10 92 80 21 	sts	0x2180, r1
	mc.mm_of_travel = 0;	// not actually used, but makes debug make more sense
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	40 e0       	ldi	r20, 0x00	; 0
    38aa:	50 e0       	ldi	r21, 0x00	; 0
    38ac:	20 93 85 21 	sts	0x2185, r18
    38b0:	30 93 86 21 	sts	0x2186, r19
    38b4:	40 93 87 21 	sts	0x2187, r20
    38b8:	50 93 88 21 	sts	0x2188, r21
	mc.microseconds = trunc(seconds*1000000);
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	34 e2       	ldi	r19, 0x24	; 36
    38c0:	44 e7       	ldi	r20, 0x74	; 116
    38c2:	59 e4       	ldi	r21, 0x49	; 73
    38c4:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    38c8:	0e 94 73 42 	call	0x84e6	; 0x84e6 <__fixunssfsi>
    38cc:	60 93 81 21 	sts	0x2181, r22
    38d0:	70 93 82 21 	sts	0x2182, r23
    38d4:	80 93 83 21 	sts	0x2183, r24
    38d8:	90 93 84 21 	sts	0x2184, r25
	mc.line_state = MC_STATE_NEW;
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	80 93 5c 21 	sts	0x215C, r24
	return (mc_line_continue());
    38e2:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <mc_line_continue>
}
    38e6:	08 95       	ret

000038e8 <mc_line>:
 * Zero length lines that are actually dwells come in thru mc_dwell().
 * The mv_queue doesn't check line length and queues anything.
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    38e8:	2f 92       	push	r2
    38ea:	3f 92       	push	r3
    38ec:	4f 92       	push	r4
    38ee:	5f 92       	push	r5
    38f0:	6f 92       	push	r6
    38f2:	7f 92       	push	r7
    38f4:	8f 92       	push	r8
    38f6:	9f 92       	push	r9
    38f8:	af 92       	push	r10
    38fa:	bf 92       	push	r11
    38fc:	cf 92       	push	r12
    38fe:	df 92       	push	r13
    3900:	ef 92       	push	r14
    3902:	ff 92       	push	r15
    3904:	0f 93       	push	r16
    3906:	1f 93       	push	r17
    3908:	df 93       	push	r29
    390a:	cf 93       	push	r28
    390c:	cd b7       	in	r28, 0x3d	; 61
    390e:	de b7       	in	r29, 0x3e	; 62
    3910:	62 97       	sbiw	r28, 0x12	; 18
    3912:	cd bf       	out	0x3d, r28	; 61
    3914:	de bf       	out	0x3e, r29	; 62
    3916:	19 01       	movw	r2, r18
    3918:	2a 01       	movw	r4, r20
    391a:	ad 86       	std	Y+13, r10	; 0x0d
    391c:	be 86       	std	Y+14, r11	; 0x0e
    391e:	cf 86       	std	Y+15, r12	; 0x0f
    3920:	d8 8a       	std	Y+16, r13	; 0x10
    3922:	89 8a       	std	Y+17, r8	; 0x11
    3924:	9a 8a       	std	Y+18, r9	; 0x12
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    3926:	20 91 94 22 	lds	r18, 0x2294
    392a:	30 91 95 22 	lds	r19, 0x2295
    392e:	40 91 96 22 	lds	r20, 0x2296
    3932:	50 91 97 22 	lds	r21, 0x2297
    3936:	29 87       	std	Y+9, r18	; 0x09
    3938:	3a 87       	std	Y+10, r19	; 0x0a
    393a:	4b 87       	std	Y+11, r20	; 0x0b
    393c:	5c 87       	std	Y+12, r21	; 0x0c
    393e:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    3942:	0e 94 91 44 	call	0x8922	; 0x8922 <lround>
    3946:	3b 01       	movw	r6, r22
    3948:	4c 01       	movw	r8, r24
    394a:	60 92 69 21 	sts	0x2169, r6
    394e:	70 92 6a 21 	sts	0x216A, r7
    3952:	80 92 6b 21 	sts	0x216B, r8
    3956:	90 92 6c 21 	sts	0x216C, r9
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    395a:	80 91 ac 22 	lds	r24, 0x22AC
    395e:	90 91 ad 22 	lds	r25, 0x22AD
    3962:	a0 91 ae 22 	lds	r26, 0x22AE
    3966:	b0 91 af 22 	lds	r27, 0x22AF
    396a:	8d 83       	std	Y+5, r24	; 0x05
    396c:	9e 83       	std	Y+6, r25	; 0x06
    396e:	af 83       	std	Y+7, r26	; 0x07
    3970:	b8 87       	std	Y+8, r27	; 0x08
    3972:	c2 01       	movw	r24, r4
    3974:	b1 01       	movw	r22, r2
    3976:	2d 81       	ldd	r18, Y+5	; 0x05
    3978:	3e 81       	ldd	r19, Y+6	; 0x06
    397a:	4f 81       	ldd	r20, Y+7	; 0x07
    397c:	58 85       	ldd	r21, Y+8	; 0x08
    397e:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    3982:	0e 94 91 44 	call	0x8922	; 0x8922 <lround>
    3986:	5b 01       	movw	r10, r22
    3988:	6c 01       	movw	r12, r24
    398a:	a0 92 6d 21 	sts	0x216D, r10
    398e:	b0 92 6e 21 	sts	0x216E, r11
    3992:	c0 92 6f 21 	sts	0x216F, r12
    3996:	d0 92 70 21 	sts	0x2170, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    399a:	20 91 c4 22 	lds	r18, 0x22C4
    399e:	30 91 c5 22 	lds	r19, 0x22C5
    39a2:	40 91 c6 22 	lds	r20, 0x22C6
    39a6:	50 91 c7 22 	lds	r21, 0x22C7
    39aa:	29 83       	std	Y+1, r18	; 0x01
    39ac:	3a 83       	std	Y+2, r19	; 0x02
    39ae:	4b 83       	std	Y+3, r20	; 0x03
    39b0:	5c 83       	std	Y+4, r21	; 0x04
    39b2:	c8 01       	movw	r24, r16
    39b4:	b7 01       	movw	r22, r14
    39b6:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    39ba:	0e 94 91 44 	call	0x8922	; 0x8922 <lround>
    39be:	9b 01       	movw	r18, r22
    39c0:	ac 01       	movw	r20, r24
    39c2:	20 93 71 21 	sts	0x2171, r18
    39c6:	30 93 72 21 	sts	0x2172, r19
    39ca:	40 93 73 21 	sts	0x2173, r20
    39ce:	50 93 74 21 	sts	0x2174, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    39d2:	80 91 5d 21 	lds	r24, 0x215D
    39d6:	90 91 5e 21 	lds	r25, 0x215E
    39da:	a0 91 5f 21 	lds	r26, 0x215F
    39de:	b0 91 60 21 	lds	r27, 0x2160
    39e2:	84 01       	movw	r16, r8
    39e4:	73 01       	movw	r14, r6
    39e6:	e8 1a       	sub	r14, r24
    39e8:	f9 0a       	sbc	r15, r25
    39ea:	0a 0b       	sbc	r16, r26
    39ec:	1b 0b       	sbc	r17, r27
    39ee:	e0 92 75 21 	sts	0x2175, r14
    39f2:	f0 92 76 21 	sts	0x2176, r15
    39f6:	00 93 77 21 	sts	0x2177, r16
    39fa:	10 93 78 21 	sts	0x2178, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    39fe:	80 91 61 21 	lds	r24, 0x2161
    3a02:	90 91 62 21 	lds	r25, 0x2162
    3a06:	a0 91 63 21 	lds	r26, 0x2163
    3a0a:	b0 91 64 21 	lds	r27, 0x2164
    3a0e:	a8 1a       	sub	r10, r24
    3a10:	b9 0a       	sbc	r11, r25
    3a12:	ca 0a       	sbc	r12, r26
    3a14:	db 0a       	sbc	r13, r27
    3a16:	a0 92 79 21 	sts	0x2179, r10
    3a1a:	b0 92 7a 21 	sts	0x217A, r11
    3a1e:	c0 92 7b 21 	sts	0x217B, r12
    3a22:	d0 92 7c 21 	sts	0x217C, r13
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    3a26:	80 91 65 21 	lds	r24, 0x2165
    3a2a:	90 91 66 21 	lds	r25, 0x2166
    3a2e:	a0 91 67 21 	lds	r26, 0x2167
    3a32:	b0 91 68 21 	lds	r27, 0x2168
    3a36:	19 01       	movw	r2, r18
    3a38:	2a 01       	movw	r4, r20
    3a3a:	28 1a       	sub	r2, r24
    3a3c:	39 0a       	sbc	r3, r25
    3a3e:	4a 0a       	sbc	r4, r26
    3a40:	5b 0a       	sbc	r5, r27
    3a42:	20 92 7d 21 	sts	0x217D, r2
    3a46:	30 92 7e 21 	sts	0x217E, r3
    3a4a:	40 92 7f 21 	sts	0x217F, r4
    3a4e:	50 92 80 21 	sts	0x2180, r5

	// skip zero length lines
	if ((mc.steps[X] + mc.steps[Y] + mc.steps[Z]) == 0) {
    3a52:	d6 01       	movw	r26, r12
    3a54:	c5 01       	movw	r24, r10
    3a56:	8e 0d       	add	r24, r14
    3a58:	9f 1d       	adc	r25, r15
    3a5a:	a0 1f       	adc	r26, r16
    3a5c:	b1 1f       	adc	r27, r17
    3a5e:	82 0d       	add	r24, r2
    3a60:	93 1d       	adc	r25, r3
    3a62:	a4 1d       	adc	r26, r4
    3a64:	b5 1d       	adc	r27, r5
    3a66:	00 97       	sbiw	r24, 0x00	; 0
    3a68:	a1 05       	cpc	r26, r1
    3a6a:	b1 05       	cpc	r27, r1
    3a6c:	19 f4       	brne	.+6      	; 0x3a74 <mc_line+0x18c>
    3a6e:	24 e1       	ldi	r18, 0x14	; 20
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	72 c0       	rjmp	.+228    	; 0x3b58 <mc_line+0x270>
		return (TG_ZERO_LENGTH_LINE);
	}

	if (invert_feed_rate) {
    3a74:	49 89       	ldd	r20, Y+17	; 0x11
    3a76:	5a 89       	ldd	r21, Y+18	; 0x12
    3a78:	45 2b       	or	r20, r21
    3a7a:	59 f0       	breq	.+22     	; 0x3a92 <mc_line+0x1aa>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3a7c:	60 ec       	ldi	r22, 0xC0	; 192
    3a7e:	71 ee       	ldi	r23, 0xE1	; 225
    3a80:	84 e6       	ldi	r24, 0x64	; 100
    3a82:	9c e4       	ldi	r25, 0x4C	; 76
    3a84:	2d 85       	ldd	r18, Y+13	; 0x0d
    3a86:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a88:	4f 85       	ldd	r20, Y+15	; 0x0f
    3a8a:	58 89       	ldd	r21, Y+16	; 0x10
    3a8c:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    3a90:	4a c0       	rjmp	.+148    	; 0x3b26 <mc_line+0x23e>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    3a92:	c8 01       	movw	r24, r16
    3a94:	b7 01       	movw	r22, r14
    3a96:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    3a9a:	29 85       	ldd	r18, Y+9	; 0x09
    3a9c:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a9e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3aa0:	5c 85       	ldd	r21, Y+12	; 0x0c
    3aa2:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    3aa6:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <square>
    3aaa:	3b 01       	movw	r6, r22
    3aac:	4c 01       	movw	r8, r24
    3aae:	c6 01       	movw	r24, r12
    3ab0:	b5 01       	movw	r22, r10
    3ab2:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    3ab6:	2d 81       	ldd	r18, Y+5	; 0x05
    3ab8:	3e 81       	ldd	r19, Y+6	; 0x06
    3aba:	4f 81       	ldd	r20, Y+7	; 0x07
    3abc:	58 85       	ldd	r21, Y+8	; 0x08
    3abe:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    3ac2:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <square>
    3ac6:	5b 01       	movw	r10, r22
    3ac8:	6c 01       	movw	r12, r24
    3aca:	c2 01       	movw	r24, r4
    3acc:	b1 01       	movw	r22, r2
    3ace:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    3ad2:	29 81       	ldd	r18, Y+1	; 0x01
    3ad4:	3a 81       	ldd	r19, Y+2	; 0x02
    3ad6:	4b 81       	ldd	r20, Y+3	; 0x03
    3ad8:	5c 81       	ldd	r21, Y+4	; 0x04
    3ada:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    3ade:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <square>
    3ae2:	7b 01       	movw	r14, r22
    3ae4:	8c 01       	movw	r16, r24
    3ae6:	c4 01       	movw	r24, r8
    3ae8:	b3 01       	movw	r22, r6
    3aea:	a6 01       	movw	r20, r12
    3aec:	95 01       	movw	r18, r10
    3aee:	0e 94 60 41 	call	0x82c0	; 0x82c0 <__addsf3>
    3af2:	a8 01       	movw	r20, r16
    3af4:	97 01       	movw	r18, r14
    3af6:	0e 94 60 41 	call	0x82c0	; 0x82c0 <__addsf3>
    3afa:	0e 94 2e 45 	call	0x8a5c	; 0x8a5c <sqrt>
    3afe:	60 93 85 21 	sts	0x2185, r22
    3b02:	70 93 86 21 	sts	0x2186, r23
    3b06:	80 93 87 21 	sts	0x2187, r24
    3b0a:	90 93 88 21 	sts	0x2188, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3b0e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3b10:	3e 85       	ldd	r19, Y+14	; 0x0e
    3b12:	4f 85       	ldd	r20, Y+15	; 0x0f
    3b14:	58 89       	ldd	r21, Y+16	; 0x10
    3b16:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	34 e2       	ldi	r19, 0x24	; 36
    3b1e:	44 e7       	ldi	r20, 0x74	; 116
    3b20:	59 e4       	ldi	r21, 0x49	; 73
    3b22:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    3b26:	0e 94 91 44 	call	0x8922	; 0x8922 <lround>
    3b2a:	60 93 81 21 	sts	0x2181, r22
    3b2e:	70 93 82 21 	sts	0x2182, r23
    3b32:	80 93 83 21 	sts	0x2183, r24
    3b36:	90 93 84 21 	sts	0x2184, r25
	}
	mc.line_state = MC_STATE_NEW;
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	80 93 5c 21 	sts	0x215C, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3b40:	ed e5       	ldi	r30, 0x5D	; 93
    3b42:	f1 e2       	ldi	r31, 0x21	; 33
    3b44:	df 01       	movw	r26, r30
    3b46:	1c 96       	adiw	r26, 0x0c	; 12
    3b48:	8c e0       	ldi	r24, 0x0C	; 12
    3b4a:	0d 90       	ld	r0, X+
    3b4c:	01 92       	st	Z+, r0
    3b4e:	81 50       	subi	r24, 0x01	; 1
    3b50:	e1 f7       	brne	.-8      	; 0x3b4a <mc_line+0x262>
	return (mc_line_continue());
    3b52:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <mc_line_continue>
    3b56:	9c 01       	movw	r18, r24
}
    3b58:	c9 01       	movw	r24, r18
    3b5a:	62 96       	adiw	r28, 0x12	; 18
    3b5c:	cd bf       	out	0x3d, r28	; 61
    3b5e:	de bf       	out	0x3e, r29	; 62
    3b60:	cf 91       	pop	r28
    3b62:	df 91       	pop	r29
    3b64:	1f 91       	pop	r17
    3b66:	0f 91       	pop	r16
    3b68:	ff 90       	pop	r15
    3b6a:	ef 90       	pop	r14
    3b6c:	df 90       	pop	r13
    3b6e:	cf 90       	pop	r12
    3b70:	bf 90       	pop	r11
    3b72:	af 90       	pop	r10
    3b74:	9f 90       	pop	r9
    3b76:	8f 90       	pop	r8
    3b78:	7f 90       	pop	r7
    3b7a:	6f 90       	pop	r6
    3b7c:	5f 90       	pop	r5
    3b7e:	4f 90       	pop	r4
    3b80:	3f 90       	pop	r3
    3b82:	2f 90       	pop	r2
    3b84:	08 95       	ret

00003b86 <mc_arc_continue>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continue() 
{
    3b86:	8f 92       	push	r8
    3b88:	9f 92       	push	r9
    3b8a:	af 92       	push	r10
    3b8c:	bf 92       	push	r11
    3b8e:	cf 92       	push	r12
    3b90:	df 92       	push	r13
    3b92:	ef 92       	push	r14
    3b94:	ff 92       	push	r15
    3b96:	0f 93       	push	r16
    3b98:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3b9a:	80 91 e1 22 	lds	r24, 0x22E1
    3b9e:	88 23       	and	r24, r24
    3ba0:	19 f4       	brne	.+6      	; 0x3ba8 <mc_arc_continue+0x22>
    3ba2:	23 e0       	ldi	r18, 0x03	; 3
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	dd c0       	rjmp	.+442    	; 0x3d62 <mc_arc_continue+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3ba8:	81 30       	cpi	r24, 0x01	; 1
    3baa:	09 f0       	breq	.+2      	; 0x3bae <mc_arc_continue+0x28>
    3bac:	ca c0       	rjmp	.+404    	; 0x3d42 <mc_arc_continue+0x1bc>
		ma.segment_counter=0;
    3bae:	10 92 e4 22 	sts	0x22E4, r1
    3bb2:	10 92 e5 22 	sts	0x22E5, r1
		ma.arc_state = MC_STATE_RUNNING;
    3bb6:	82 e0       	ldi	r24, 0x02	; 2
    3bb8:	80 93 e1 22 	sts	0x22E1, r24
    3bbc:	c2 c0       	rjmp	.+388    	; 0x3d42 <mc_arc_continue+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3bbe:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <mv_test_move_buffer_full>
    3bc2:	88 23       	and	r24, r24
    3bc4:	19 f0       	breq	.+6      	; 0x3bcc <mc_arc_continue+0x46>
    3bc6:	22 e0       	ldi	r18, 0x02	; 2
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	cb c0       	rjmp	.+406    	; 0x3d62 <mc_arc_continue+0x1dc>
			return (TG_EAGAIN);
		}
		ma.segment_counter++;
    3bcc:	80 91 e4 22 	lds	r24, 0x22E4
    3bd0:	90 91 e5 22 	lds	r25, 0x22E5
    3bd4:	01 96       	adiw	r24, 0x01	; 1
    3bd6:	80 93 e4 22 	sts	0x22E4, r24
    3bda:	90 93 e5 22 	sts	0x22E5, r25
		ma.theta += ma.theta_per_segment;
    3bde:	60 91 06 23 	lds	r22, 0x2306
    3be2:	70 91 07 23 	lds	r23, 0x2307
    3be6:	80 91 08 23 	lds	r24, 0x2308
    3bea:	90 91 09 23 	lds	r25, 0x2309
    3bee:	20 91 12 23 	lds	r18, 0x2312
    3bf2:	30 91 13 23 	lds	r19, 0x2313
    3bf6:	40 91 14 23 	lds	r20, 0x2314
    3bfa:	50 91 15 23 	lds	r21, 0x2315
    3bfe:	0e 94 60 41 	call	0x82c0	; 0x82c0 <__addsf3>
    3c02:	7b 01       	movw	r14, r22
    3c04:	8c 01       	movw	r16, r24
    3c06:	cb 01       	movw	r24, r22
    3c08:	d8 01       	movw	r26, r16
    3c0a:	80 93 06 23 	sts	0x2306, r24
    3c0e:	90 93 07 23 	sts	0x2307, r25
    3c12:	a0 93 08 23 	sts	0x2308, r26
    3c16:	b0 93 09 23 	sts	0x2309, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3c1a:	b7 01       	movw	r22, r14
    3c1c:	c8 01       	movw	r24, r16
    3c1e:	0e 94 24 45 	call	0x8a48	; 0x8a48 <sin>
    3c22:	80 90 0a 23 	lds	r8, 0x230A
    3c26:	90 90 0b 23 	lds	r9, 0x230B
    3c2a:	a0 90 0c 23 	lds	r10, 0x230C
    3c2e:	b0 90 0d 23 	lds	r11, 0x230D
    3c32:	c0 90 e8 22 	lds	r12, 0x22E8
    3c36:	d0 90 e9 22 	lds	r13, 0x22E9
    3c3a:	cc 0c       	add	r12, r12
    3c3c:	dd 1c       	adc	r13, r13
    3c3e:	cc 0c       	add	r12, r12
    3c40:	dd 1c       	adc	r13, r13
    3c42:	21 ee       	ldi	r18, 0xE1	; 225
    3c44:	32 e2       	ldi	r19, 0x22	; 34
    3c46:	c2 0e       	add	r12, r18
    3c48:	d3 1e       	adc	r13, r19
    3c4a:	a5 01       	movw	r20, r10
    3c4c:	94 01       	movw	r18, r8
    3c4e:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    3c52:	9b 01       	movw	r18, r22
    3c54:	ac 01       	movw	r20, r24
    3c56:	60 91 fe 22 	lds	r22, 0x22FE
    3c5a:	70 91 ff 22 	lds	r23, 0x22FF
    3c5e:	80 91 00 23 	lds	r24, 0x2300
    3c62:	90 91 01 23 	lds	r25, 0x2301
    3c66:	0e 94 60 41 	call	0x82c0	; 0x82c0 <__addsf3>
    3c6a:	f6 01       	movw	r30, r12
    3c6c:	65 87       	std	Z+13, r22	; 0x0d
    3c6e:	76 87       	std	Z+14, r23	; 0x0e
    3c70:	87 87       	std	Z+15, r24	; 0x0f
    3c72:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3c74:	b7 01       	movw	r22, r14
    3c76:	c8 01       	movw	r24, r16
    3c78:	0e 94 03 42 	call	0x8406	; 0x8406 <cos>
    3c7c:	00 91 ea 22 	lds	r16, 0x22EA
    3c80:	10 91 eb 22 	lds	r17, 0x22EB
    3c84:	00 0f       	add	r16, r16
    3c86:	11 1f       	adc	r17, r17
    3c88:	00 0f       	add	r16, r16
    3c8a:	11 1f       	adc	r17, r17
    3c8c:	0f 51       	subi	r16, 0x1F	; 31
    3c8e:	1d 4d       	sbci	r17, 0xDD	; 221
    3c90:	a5 01       	movw	r20, r10
    3c92:	94 01       	movw	r18, r8
    3c94:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    3c98:	9b 01       	movw	r18, r22
    3c9a:	ac 01       	movw	r20, r24
    3c9c:	60 91 02 23 	lds	r22, 0x2302
    3ca0:	70 91 03 23 	lds	r23, 0x2303
    3ca4:	80 91 04 23 	lds	r24, 0x2304
    3ca8:	90 91 05 23 	lds	r25, 0x2305
    3cac:	0e 94 60 41 	call	0x82c0	; 0x82c0 <__addsf3>
    3cb0:	f8 01       	movw	r30, r16
    3cb2:	65 87       	std	Z+13, r22	; 0x0d
    3cb4:	76 87       	std	Z+14, r23	; 0x0e
    3cb6:	87 87       	std	Z+15, r24	; 0x0f
    3cb8:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3cba:	00 91 ec 22 	lds	r16, 0x22EC
    3cbe:	10 91 ed 22 	lds	r17, 0x22ED
    3cc2:	00 0f       	add	r16, r16
    3cc4:	11 1f       	adc	r17, r17
    3cc6:	00 0f       	add	r16, r16
    3cc8:	11 1f       	adc	r17, r17
    3cca:	0f 51       	subi	r16, 0x1F	; 31
    3ccc:	1d 4d       	sbci	r17, 0xDD	; 221
    3cce:	f8 01       	movw	r30, r16
    3cd0:	65 85       	ldd	r22, Z+13	; 0x0d
    3cd2:	76 85       	ldd	r23, Z+14	; 0x0e
    3cd4:	87 85       	ldd	r24, Z+15	; 0x0f
    3cd6:	90 89       	ldd	r25, Z+16	; 0x10
    3cd8:	20 91 16 23 	lds	r18, 0x2316
    3cdc:	30 91 17 23 	lds	r19, 0x2317
    3ce0:	40 91 18 23 	lds	r20, 0x2318
    3ce4:	50 91 19 23 	lds	r21, 0x2319
    3ce8:	0e 94 60 41 	call	0x82c0	; 0x82c0 <__addsf3>
    3cec:	f8 01       	movw	r30, r16
    3cee:	65 87       	std	Z+13, r22	; 0x0d
    3cf0:	76 87       	std	Z+14, r23	; 0x0e
    3cf2:	87 87       	std	Z+15, r24	; 0x0f
    3cf4:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    3cf6:	60 91 ee 22 	lds	r22, 0x22EE
    3cfa:	70 91 ef 22 	lds	r23, 0x22EF
    3cfe:	80 91 f0 22 	lds	r24, 0x22F0
    3d02:	90 91 f1 22 	lds	r25, 0x22F1
    3d06:	20 91 f2 22 	lds	r18, 0x22F2
    3d0a:	30 91 f3 22 	lds	r19, 0x22F3
    3d0e:	40 91 f4 22 	lds	r20, 0x22F4
    3d12:	50 91 f5 22 	lds	r21, 0x22F5
    3d16:	e0 90 f6 22 	lds	r14, 0x22F6
    3d1a:	f0 90 f7 22 	lds	r15, 0x22F7
    3d1e:	00 91 f8 22 	lds	r16, 0x22F8
    3d22:	10 91 f9 22 	lds	r17, 0x22F9
    3d26:	a0 90 0e 23 	lds	r10, 0x230E
    3d2a:	b0 90 0f 23 	lds	r11, 0x230F
    3d2e:	c0 90 10 23 	lds	r12, 0x2310
    3d32:	d0 90 11 23 	lds	r13, 0x2311
    3d36:	80 90 e6 22 	lds	r8, 0x22E6
    3d3a:	90 90 e7 22 	lds	r9, 0x22E7
    3d3e:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3d42:	20 91 e4 22 	lds	r18, 0x22E4
    3d46:	30 91 e5 22 	lds	r19, 0x22E5
    3d4a:	80 91 e2 22 	lds	r24, 0x22E2
    3d4e:	90 91 e3 22 	lds	r25, 0x22E3
    3d52:	82 17       	cp	r24, r18
    3d54:	93 07       	cpc	r25, r19
    3d56:	0c f0       	brlt	.+2      	; 0x3d5a <mc_arc_continue+0x1d4>
    3d58:	32 cf       	rjmp	.-412    	; 0x3bbe <mc_arc_continue+0x38>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3d5a:	10 92 e1 22 	sts	0x22E1, r1
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3d62:	c9 01       	movw	r24, r18
    3d64:	1f 91       	pop	r17
    3d66:	0f 91       	pop	r16
    3d68:	ff 90       	pop	r15
    3d6a:	ef 90       	pop	r14
    3d6c:	df 90       	pop	r13
    3d6e:	cf 90       	pop	r12
    3d70:	bf 90       	pop	r11
    3d72:	af 90       	pop	r10
    3d74:	9f 90       	pop	r9
    3d76:	8f 90       	pop	r8
    3d78:	08 95       	ret

00003d7a <mc_arc>:
 */

int mc_arc(double theta, double angular_travel, double radius, 
		   double linear_travel, int axis_1, int axis_2, int axis_linear, 
		   double feed_rate, int invert_feed_rate)
{
    3d7a:	2f 92       	push	r2
    3d7c:	3f 92       	push	r3
    3d7e:	4f 92       	push	r4
    3d80:	5f 92       	push	r5
    3d82:	6f 92       	push	r6
    3d84:	7f 92       	push	r7
    3d86:	8f 92       	push	r8
    3d88:	9f 92       	push	r9
    3d8a:	af 92       	push	r10
    3d8c:	bf 92       	push	r11
    3d8e:	cf 92       	push	r12
    3d90:	df 92       	push	r13
    3d92:	ef 92       	push	r14
    3d94:	ff 92       	push	r15
    3d96:	0f 93       	push	r16
    3d98:	1f 93       	push	r17
    3d9a:	df 93       	push	r29
    3d9c:	cf 93       	push	r28
    3d9e:	cd b7       	in	r28, 0x3d	; 61
    3da0:	de b7       	in	r29, 0x3e	; 62
    3da2:	28 97       	sbiw	r28, 0x08	; 8
    3da4:	cd bf       	out	0x3d, r28	; 61
    3da6:	de bf       	out	0x3e, r29	; 62
    3da8:	69 83       	std	Y+1, r22	; 0x01
    3daa:	7a 83       	std	Y+2, r23	; 0x02
    3dac:	8b 83       	std	Y+3, r24	; 0x03
    3dae:	9c 83       	std	Y+4, r25	; 0x04
    3db0:	29 01       	movw	r4, r18
    3db2:	3a 01       	movw	r6, r20
    3db4:	ed 82       	std	Y+5, r14	; 0x05
    3db6:	fe 82       	std	Y+6, r15	; 0x06
    3db8:	0f 83       	std	Y+7, r16	; 0x07
    3dba:	18 87       	std	Y+8, r17	; 0x08
    3dbc:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3dbe:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3dc0:	60 93 06 23 	sts	0x2306, r22
    3dc4:	70 93 07 23 	sts	0x2307, r23
    3dc8:	80 93 08 23 	sts	0x2308, r24
    3dcc:	90 93 09 23 	sts	0x2309, r25
	ma.radius = radius;
    3dd0:	e0 92 0a 23 	sts	0x230A, r14
    3dd4:	f0 92 0b 23 	sts	0x230B, r15
    3dd8:	00 93 0c 23 	sts	0x230C, r16
    3ddc:	10 93 0d 23 	sts	0x230D, r17
	ma.angular_travel = angular_travel;
    3de0:	20 93 1a 23 	sts	0x231A, r18
    3de4:	30 93 1b 23 	sts	0x231B, r19
    3de8:	40 93 1c 23 	sts	0x231C, r20
    3dec:	50 93 1d 23 	sts	0x231D, r21
	ma.linear_travel = linear_travel;
    3df0:	a0 92 1e 23 	sts	0x231E, r10
    3df4:	b0 92 1f 23 	sts	0x231F, r11
    3df8:	c0 92 20 23 	sts	0x2320, r12
    3dfc:	d0 92 21 23 	sts	0x2321, r13
	ma.feed_rate = feed_rate;
    3e00:	8a a1       	ldd	r24, Y+34	; 0x22
    3e02:	9b a1       	ldd	r25, Y+35	; 0x23
    3e04:	ac a1       	ldd	r26, Y+36	; 0x24
    3e06:	bd a1       	ldd	r27, Y+37	; 0x25
    3e08:	80 93 0e 23 	sts	0x230E, r24
    3e0c:	90 93 0f 23 	sts	0x230F, r25
    3e10:	a0 93 10 23 	sts	0x2310, r26
    3e14:	b0 93 11 23 	sts	0x2311, r27
	ma.invert_feed_rate = invert_feed_rate;
    3e18:	ae a1       	ldd	r26, Y+38	; 0x26
    3e1a:	bf a1       	ldd	r27, Y+39	; 0x27
    3e1c:	a0 93 e6 22 	sts	0x22E6, r26
    3e20:	b0 93 e7 22 	sts	0x22E7, r27
	ma.axis_1 = axis_1;
    3e24:	80 92 e8 22 	sts	0x22E8, r8
    3e28:	90 92 e9 22 	sts	0x22E9, r9
	ma.axis_2 = axis_2;
    3e2c:	20 92 ea 22 	sts	0x22EA, r2
    3e30:	30 92 eb 22 	sts	0x22EB, r3
	ma.axis_linear = axis_linear;
    3e34:	e8 a1       	ldd	r30, Y+32	; 0x20
    3e36:	f9 a1       	ldd	r31, Y+33	; 0x21
    3e38:	e0 93 ec 22 	sts	0x22EC, r30
    3e3c:	f0 93 ed 22 	sts	0x22ED, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3e40:	ca 01       	movw	r24, r20
    3e42:	b9 01       	movw	r22, r18
    3e44:	a8 01       	movw	r20, r16
    3e46:	97 01       	movw	r18, r14
    3e48:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    3e4c:	7b 01       	movw	r14, r22
    3e4e:	8c 01       	movw	r16, r24
    3e50:	c6 01       	movw	r24, r12
    3e52:	b5 01       	movw	r22, r10
    3e54:	0e 94 6e 42 	call	0x84dc	; 0x84dc <__fixsfsi>
    3e58:	97 ff       	sbrs	r25, 7
    3e5a:	07 c0       	rjmp	.+14     	; 0x3e6a <mc_arc+0xf0>
    3e5c:	90 95       	com	r25
    3e5e:	80 95       	com	r24
    3e60:	70 95       	com	r23
    3e62:	61 95       	neg	r22
    3e64:	7f 4f       	sbci	r23, 0xFF	; 255
    3e66:	8f 4f       	sbci	r24, 0xFF	; 255
    3e68:	9f 4f       	sbci	r25, 0xFF	; 255
    3e6a:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    3e6e:	9b 01       	movw	r18, r22
    3e70:	ac 01       	movw	r20, r24
    3e72:	c8 01       	movw	r24, r16
    3e74:	b7 01       	movw	r22, r14
    3e76:	0e 94 fc 43 	call	0x87f8	; 0x87f8 <hypot>
    3e7a:	7b 01       	movw	r14, r22
    3e7c:	8c 01       	movw	r16, r24
    3e7e:	60 93 fa 22 	sts	0x22FA, r22
    3e82:	70 93 fb 22 	sts	0x22FB, r23
    3e86:	80 93 fc 22 	sts	0x22FC, r24
    3e8a:	90 93 fd 22 	sts	0x22FD, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3e8e:	2d ec       	ldi	r18, 0xCD	; 205
    3e90:	3c ec       	ldi	r19, 0xCC	; 204
    3e92:	4c e4       	ldi	r20, 0x4C	; 76
    3e94:	5d e3       	ldi	r21, 0x3D	; 61
    3e96:	0e 94 ff 41 	call	0x83fe	; 0x83fe <__cmpsf2>
    3e9a:	88 23       	and	r24, r24
    3e9c:	1c f4       	brge	.+6      	; 0x3ea4 <mc_arc+0x12a>
    3e9e:	23 e1       	ldi	r18, 0x13	; 19
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	fb c0       	rjmp	.+502    	; 0x409a <mc_arc+0x320>
		return (TG_ARC_SPECIFICATION_ERROR);
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3ea4:	c8 01       	movw	r24, r16
    3ea6:	b7 01       	movw	r22, r14
    3ea8:	20 91 75 22 	lds	r18, 0x2275
    3eac:	30 91 76 22 	lds	r19, 0x2276
    3eb0:	40 91 77 22 	lds	r20, 0x2277
    3eb4:	50 91 78 22 	lds	r21, 0x2278
    3eb8:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    3ebc:	0e 94 ec 41 	call	0x83d8	; 0x83d8 <ceil>
    3ec0:	0e 94 6e 42 	call	0x84dc	; 0x84dc <__fixsfsi>
    3ec4:	8b 01       	movw	r16, r22
    3ec6:	60 93 e2 22 	sts	0x22E2, r22
    3eca:	70 93 e3 22 	sts	0x22E3, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    3ece:	8e a1       	ldd	r24, Y+38	; 0x26
    3ed0:	9f a1       	ldd	r25, Y+39	; 0x27
    3ed2:	89 2b       	or	r24, r25
    3ed4:	b9 f0       	breq	.+46     	; 0x3f04 <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    3ed6:	b8 01       	movw	r22, r16
    3ed8:	88 27       	eor	r24, r24
    3eda:	77 fd       	sbrc	r23, 7
    3edc:	80 95       	com	r24
    3ede:	98 2f       	mov	r25, r24
    3ee0:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    3ee4:	9b 01       	movw	r18, r22
    3ee6:	ac 01       	movw	r20, r24
    3ee8:	6a a1       	ldd	r22, Y+34	; 0x22
    3eea:	7b a1       	ldd	r23, Y+35	; 0x23
    3eec:	8c a1       	ldd	r24, Y+36	; 0x24
    3eee:	9d a1       	ldd	r25, Y+37	; 0x25
    3ef0:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    3ef4:	60 93 0e 23 	sts	0x230E, r22
    3ef8:	70 93 0f 23 	sts	0x230F, r23
    3efc:	80 93 10 23 	sts	0x2310, r24
    3f00:	90 93 11 23 	sts	0x2311, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    3f04:	b8 01       	movw	r22, r16
    3f06:	88 27       	eor	r24, r24
    3f08:	77 fd       	sbrc	r23, 7
    3f0a:	80 95       	com	r24
    3f0c:	98 2f       	mov	r25, r24
    3f0e:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    3f12:	7b 01       	movw	r14, r22
    3f14:	8c 01       	movw	r16, r24
    3f16:	c3 01       	movw	r24, r6
    3f18:	b2 01       	movw	r22, r4
    3f1a:	a8 01       	movw	r20, r16
    3f1c:	97 01       	movw	r18, r14
    3f1e:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    3f22:	60 93 12 23 	sts	0x2312, r22
    3f26:	70 93 13 23 	sts	0x2313, r23
    3f2a:	80 93 14 23 	sts	0x2314, r24
    3f2e:	90 93 15 23 	sts	0x2315, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    3f32:	c6 01       	movw	r24, r12
    3f34:	b5 01       	movw	r22, r10
    3f36:	a8 01       	movw	r20, r16
    3f38:	97 01       	movw	r18, r14
    3f3a:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    3f3e:	60 93 16 23 	sts	0x2316, r22
    3f42:	70 93 17 23 	sts	0x2317, r23
    3f46:	80 93 18 23 	sts	0x2318, r24
    3f4a:	90 93 19 23 	sts	0x2319, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    3f4e:	69 81       	ldd	r22, Y+1	; 0x01
    3f50:	7a 81       	ldd	r23, Y+2	; 0x02
    3f52:	8b 81       	ldd	r24, Y+3	; 0x03
    3f54:	9c 81       	ldd	r25, Y+4	; 0x04
    3f56:	0e 94 24 45 	call	0x8a48	; 0x8a48 <sin>
    3f5a:	5b 01       	movw	r10, r22
    3f5c:	6c 01       	movw	r12, r24
    3f5e:	f4 01       	movw	r30, r8
    3f60:	ee 0f       	add	r30, r30
    3f62:	ff 1f       	adc	r31, r31
    3f64:	ee 0f       	add	r30, r30
    3f66:	ff 1f       	adc	r31, r31
    3f68:	e4 5a       	subi	r30, 0xA4	; 164
    3f6a:	fe 4d       	sbci	r31, 0xDE	; 222
    3f6c:	61 81       	ldd	r22, Z+1	; 0x01
    3f6e:	72 81       	ldd	r23, Z+2	; 0x02
    3f70:	83 81       	ldd	r24, Z+3	; 0x03
    3f72:	94 81       	ldd	r25, Z+4	; 0x04
    3f74:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    3f78:	f4 01       	movw	r30, r8
    3f7a:	ee 0f       	add	r30, r30
    3f7c:	ff 1f       	adc	r31, r31
    3f7e:	e8 0d       	add	r30, r8
    3f80:	f9 1d       	adc	r31, r9
    3f82:	13 e0       	ldi	r17, 0x03	; 3
    3f84:	ee 0f       	add	r30, r30
    3f86:	ff 1f       	adc	r31, r31
    3f88:	1a 95       	dec	r17
    3f8a:	e1 f7       	brne	.-8      	; 0x3f84 <mc_arc+0x20a>
    3f8c:	ed 58       	subi	r30, 0x8D	; 141
    3f8e:	fd 4d       	sbci	r31, 0xDD	; 221
    3f90:	21 a1       	ldd	r18, Z+33	; 0x21
    3f92:	32 a1       	ldd	r19, Z+34	; 0x22
    3f94:	43 a1       	ldd	r20, Z+35	; 0x23
    3f96:	54 a1       	ldd	r21, Z+36	; 0x24
    3f98:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    3f9c:	7b 01       	movw	r14, r22
    3f9e:	8c 01       	movw	r16, r24
    3fa0:	c6 01       	movw	r24, r12
    3fa2:	b5 01       	movw	r22, r10
    3fa4:	2d 81       	ldd	r18, Y+5	; 0x05
    3fa6:	3e 81       	ldd	r19, Y+6	; 0x06
    3fa8:	4f 81       	ldd	r20, Y+7	; 0x07
    3faa:	58 85       	ldd	r21, Y+8	; 0x08
    3fac:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    3fb0:	9b 01       	movw	r18, r22
    3fb2:	ac 01       	movw	r20, r24
    3fb4:	c8 01       	movw	r24, r16
    3fb6:	b7 01       	movw	r22, r14
    3fb8:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    3fbc:	60 93 fe 22 	sts	0x22FE, r22
    3fc0:	70 93 ff 22 	sts	0x22FF, r23
    3fc4:	80 93 00 23 	sts	0x2300, r24
    3fc8:	90 93 01 23 	sts	0x2301, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    3fcc:	69 81       	ldd	r22, Y+1	; 0x01
    3fce:	7a 81       	ldd	r23, Y+2	; 0x02
    3fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    3fd4:	0e 94 03 42 	call	0x8406	; 0x8406 <cos>
    3fd8:	5b 01       	movw	r10, r22
    3fda:	6c 01       	movw	r12, r24
    3fdc:	f1 01       	movw	r30, r2
    3fde:	ee 0f       	add	r30, r30
    3fe0:	ff 1f       	adc	r31, r31
    3fe2:	ee 0f       	add	r30, r30
    3fe4:	ff 1f       	adc	r31, r31
    3fe6:	e4 5a       	subi	r30, 0xA4	; 164
    3fe8:	fe 4d       	sbci	r31, 0xDE	; 222
    3fea:	61 81       	ldd	r22, Z+1	; 0x01
    3fec:	72 81       	ldd	r23, Z+2	; 0x02
    3fee:	83 81       	ldd	r24, Z+3	; 0x03
    3ff0:	94 81       	ldd	r25, Z+4	; 0x04
    3ff2:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    3ff6:	f1 01       	movw	r30, r2
    3ff8:	ee 0f       	add	r30, r30
    3ffa:	ff 1f       	adc	r31, r31
    3ffc:	e2 0d       	add	r30, r2
    3ffe:	f3 1d       	adc	r31, r3
    4000:	53 e0       	ldi	r21, 0x03	; 3
    4002:	ee 0f       	add	r30, r30
    4004:	ff 1f       	adc	r31, r31
    4006:	5a 95       	dec	r21
    4008:	e1 f7       	brne	.-8      	; 0x4002 <mc_arc+0x288>
    400a:	ed 58       	subi	r30, 0x8D	; 141
    400c:	fd 4d       	sbci	r31, 0xDD	; 221
    400e:	21 a1       	ldd	r18, Z+33	; 0x21
    4010:	32 a1       	ldd	r19, Z+34	; 0x22
    4012:	43 a1       	ldd	r20, Z+35	; 0x23
    4014:	54 a1       	ldd	r21, Z+36	; 0x24
    4016:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    401a:	7b 01       	movw	r14, r22
    401c:	8c 01       	movw	r16, r24
    401e:	c6 01       	movw	r24, r12
    4020:	b5 01       	movw	r22, r10
    4022:	2d 81       	ldd	r18, Y+5	; 0x05
    4024:	3e 81       	ldd	r19, Y+6	; 0x06
    4026:	4f 81       	ldd	r20, Y+7	; 0x07
    4028:	58 85       	ldd	r21, Y+8	; 0x08
    402a:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    402e:	9b 01       	movw	r18, r22
    4030:	ac 01       	movw	r20, r24
    4032:	c8 01       	movw	r24, r16
    4034:	b7 01       	movw	r22, r14
    4036:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    403a:	60 93 02 23 	sts	0x2302, r22
    403e:	70 93 03 23 	sts	0x2303, r23
    4042:	80 93 04 23 	sts	0x2304, r24
    4046:	90 93 05 23 	sts	0x2305, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    404a:	e8 a1       	ldd	r30, Y+32	; 0x20
    404c:	f9 a1       	ldd	r31, Y+33	; 0x21
    404e:	ee 0f       	add	r30, r30
    4050:	ff 1f       	adc	r31, r31
    4052:	ee 0f       	add	r30, r30
    4054:	ff 1f       	adc	r31, r31
    4056:	8f 01       	movw	r16, r30
    4058:	0f 51       	subi	r16, 0x1F	; 31
    405a:	1d 4d       	sbci	r17, 0xDD	; 221
    405c:	e4 5a       	subi	r30, 0xA4	; 164
    405e:	fe 4d       	sbci	r31, 0xDE	; 222
    4060:	61 81       	ldd	r22, Z+1	; 0x01
    4062:	72 81       	ldd	r23, Z+2	; 0x02
    4064:	83 81       	ldd	r24, Z+3	; 0x03
    4066:	94 81       	ldd	r25, Z+4	; 0x04
    4068:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    406c:	20 91 c4 22 	lds	r18, 0x22C4
    4070:	30 91 c5 22 	lds	r19, 0x22C5
    4074:	40 91 c6 22 	lds	r20, 0x22C6
    4078:	50 91 c7 22 	lds	r21, 0x22C7
    407c:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    4080:	d8 01       	movw	r26, r16
    4082:	1d 96       	adiw	r26, 0x0d	; 13
    4084:	6d 93       	st	X+, r22
    4086:	7d 93       	st	X+, r23
    4088:	8d 93       	st	X+, r24
    408a:	9c 93       	st	X, r25
    408c:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	80 93 e1 22 	sts	0x22E1, r24
	return (mc_arc_continue());
    4094:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <mc_arc_continue>
    4098:	9c 01       	movw	r18, r24
}
    409a:	c9 01       	movw	r24, r18
    409c:	28 96       	adiw	r28, 0x08	; 8
    409e:	cd bf       	out	0x3d, r28	; 61
    40a0:	de bf       	out	0x3e, r29	; 62
    40a2:	cf 91       	pop	r28
    40a4:	df 91       	pop	r29
    40a6:	1f 91       	pop	r17
    40a8:	0f 91       	pop	r16
    40aa:	ff 90       	pop	r15
    40ac:	ef 90       	pop	r14
    40ae:	df 90       	pop	r13
    40b0:	cf 90       	pop	r12
    40b2:	bf 90       	pop	r11
    40b4:	af 90       	pop	r10
    40b6:	9f 90       	pop	r9
    40b8:	8f 90       	pop	r8
    40ba:	7f 90       	pop	r7
    40bc:	6f 90       	pop	r6
    40be:	5f 90       	pop	r5
    40c0:	4f 90       	pop	r4
    40c2:	3f 90       	pop	r3
    40c4:	2f 90       	pop	r2
    40c6:	08 95       	ret

000040c8 <mc_arc_blocking>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc_blocking(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    40c8:	2f 92       	push	r2
    40ca:	3f 92       	push	r3
    40cc:	4f 92       	push	r4
    40ce:	5f 92       	push	r5
    40d0:	6f 92       	push	r6
    40d2:	7f 92       	push	r7
    40d4:	8f 92       	push	r8
    40d6:	9f 92       	push	r9
    40d8:	af 92       	push	r10
    40da:	bf 92       	push	r11
    40dc:	cf 92       	push	r12
    40de:	df 92       	push	r13
    40e0:	ef 92       	push	r14
    40e2:	ff 92       	push	r15
    40e4:	0f 93       	push	r16
    40e6:	1f 93       	push	r17
    40e8:	df 93       	push	r29
    40ea:	cf 93       	push	r28
    40ec:	cd b7       	in	r28, 0x3d	; 61
    40ee:	de b7       	in	r29, 0x3e	; 62
    40f0:	28 97       	sbiw	r28, 0x08	; 8
    40f2:	cd bf       	out	0x3d, r28	; 61
    40f4:	de bf       	out	0x3e, r29	; 62
    40f6:	69 83       	std	Y+1, r22	; 0x01
    40f8:	7a 83       	std	Y+2, r23	; 0x02
    40fa:	8b 83       	std	Y+3, r24	; 0x03
    40fc:	9c 83       	std	Y+4, r25	; 0x04
    40fe:	29 01       	movw	r4, r18
    4100:	3a 01       	movw	r6, r20
    4102:	ed 82       	std	Y+5, r14	; 0x05
    4104:	fe 82       	std	Y+6, r15	; 0x06
    4106:	0f 83       	std	Y+7, r16	; 0x07
    4108:	18 87       	std	Y+8, r17	; 0x08
    410a:	2e 8c       	ldd	r2, Y+30	; 0x1e
    410c:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    410e:	60 93 06 23 	sts	0x2306, r22
    4112:	70 93 07 23 	sts	0x2307, r23
    4116:	80 93 08 23 	sts	0x2308, r24
    411a:	90 93 09 23 	sts	0x2309, r25
	ma.radius = radius;
    411e:	e0 92 0a 23 	sts	0x230A, r14
    4122:	f0 92 0b 23 	sts	0x230B, r15
    4126:	00 93 0c 23 	sts	0x230C, r16
    412a:	10 93 0d 23 	sts	0x230D, r17
	ma.angular_travel = angular_travel;
    412e:	20 93 1a 23 	sts	0x231A, r18
    4132:	30 93 1b 23 	sts	0x231B, r19
    4136:	40 93 1c 23 	sts	0x231C, r20
    413a:	50 93 1d 23 	sts	0x231D, r21
	ma.linear_travel = linear_travel;
    413e:	a0 92 1e 23 	sts	0x231E, r10
    4142:	b0 92 1f 23 	sts	0x231F, r11
    4146:	c0 92 20 23 	sts	0x2320, r12
    414a:	d0 92 21 23 	sts	0x2321, r13
	ma.feed_rate = feed_rate;
    414e:	8a a1       	ldd	r24, Y+34	; 0x22
    4150:	9b a1       	ldd	r25, Y+35	; 0x23
    4152:	ac a1       	ldd	r26, Y+36	; 0x24
    4154:	bd a1       	ldd	r27, Y+37	; 0x25
    4156:	80 93 0e 23 	sts	0x230E, r24
    415a:	90 93 0f 23 	sts	0x230F, r25
    415e:	a0 93 10 23 	sts	0x2310, r26
    4162:	b0 93 11 23 	sts	0x2311, r27
	ma.invert_feed_rate = invert_feed_rate;
    4166:	ae a1       	ldd	r26, Y+38	; 0x26
    4168:	bf a1       	ldd	r27, Y+39	; 0x27
    416a:	a0 93 e6 22 	sts	0x22E6, r26
    416e:	b0 93 e7 22 	sts	0x22E7, r27
	ma.axis_1 = axis_1;
    4172:	80 92 e8 22 	sts	0x22E8, r8
    4176:	90 92 e9 22 	sts	0x22E9, r9
	ma.axis_2 = axis_2;
    417a:	20 92 ea 22 	sts	0x22EA, r2
    417e:	30 92 eb 22 	sts	0x22EB, r3
	ma.axis_linear = axis_linear;
    4182:	e8 a1       	ldd	r30, Y+32	; 0x20
    4184:	f9 a1       	ldd	r31, Y+33	; 0x21
    4186:	e0 93 ec 22 	sts	0x22EC, r30
    418a:	f0 93 ed 22 	sts	0x22ED, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    418e:	ca 01       	movw	r24, r20
    4190:	b9 01       	movw	r22, r18
    4192:	a8 01       	movw	r20, r16
    4194:	97 01       	movw	r18, r14
    4196:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    419a:	7b 01       	movw	r14, r22
    419c:	8c 01       	movw	r16, r24
    419e:	c6 01       	movw	r24, r12
    41a0:	b5 01       	movw	r22, r10
    41a2:	0e 94 6e 42 	call	0x84dc	; 0x84dc <__fixsfsi>
    41a6:	97 ff       	sbrs	r25, 7
    41a8:	07 c0       	rjmp	.+14     	; 0x41b8 <mc_arc_blocking+0xf0>
    41aa:	90 95       	com	r25
    41ac:	80 95       	com	r24
    41ae:	70 95       	com	r23
    41b0:	61 95       	neg	r22
    41b2:	7f 4f       	sbci	r23, 0xFF	; 255
    41b4:	8f 4f       	sbci	r24, 0xFF	; 255
    41b6:	9f 4f       	sbci	r25, 0xFF	; 255
    41b8:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    41bc:	9b 01       	movw	r18, r22
    41be:	ac 01       	movw	r20, r24
    41c0:	c8 01       	movw	r24, r16
    41c2:	b7 01       	movw	r22, r14
    41c4:	0e 94 fc 43 	call	0x87f8	; 0x87f8 <hypot>
    41c8:	7b 01       	movw	r14, r22
    41ca:	8c 01       	movw	r16, r24
    41cc:	60 93 fa 22 	sts	0x22FA, r22
    41d0:	70 93 fb 22 	sts	0x22FB, r23
    41d4:	80 93 fc 22 	sts	0x22FC, r24
    41d8:	90 93 fd 22 	sts	0x22FD, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    41dc:	2d ec       	ldi	r18, 0xCD	; 205
    41de:	3c ec       	ldi	r19, 0xCC	; 204
    41e0:	4c e4       	ldi	r20, 0x4C	; 76
    41e2:	5d e3       	ldi	r21, 0x3D	; 61
    41e4:	0e 94 ff 41 	call	0x83fe	; 0x83fe <__cmpsf2>
    41e8:	88 23       	and	r24, r24
    41ea:	1c f4       	brge	.+6      	; 0x41f2 <mc_arc_blocking+0x12a>
    41ec:	23 e1       	ldi	r18, 0x13	; 19
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	c7 c1       	rjmp	.+910    	; 0x4580 <mc_arc_blocking+0x4b8>
		return (TG_ARC_SPECIFICATION_ERROR);			
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    41f2:	c8 01       	movw	r24, r16
    41f4:	b7 01       	movw	r22, r14
    41f6:	20 91 75 22 	lds	r18, 0x2275
    41fa:	30 91 76 22 	lds	r19, 0x2276
    41fe:	40 91 77 22 	lds	r20, 0x2277
    4202:	50 91 78 22 	lds	r21, 0x2278
    4206:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    420a:	0e 94 ec 41 	call	0x83d8	; 0x83d8 <ceil>
    420e:	0e 94 6e 42 	call	0x84dc	; 0x84dc <__fixsfsi>
    4212:	8b 01       	movw	r16, r22
    4214:	60 93 e2 22 	sts	0x22E2, r22
    4218:	70 93 e3 22 	sts	0x22E3, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    421c:	2e a1       	ldd	r18, Y+38	; 0x26
    421e:	3f a1       	ldd	r19, Y+39	; 0x27
    4220:	23 2b       	or	r18, r19
    4222:	b9 f0       	breq	.+46     	; 0x4252 <mc_arc_blocking+0x18a>
		ma.feed_rate *= ma.segments; 
    4224:	b8 01       	movw	r22, r16
    4226:	88 27       	eor	r24, r24
    4228:	77 fd       	sbrc	r23, 7
    422a:	80 95       	com	r24
    422c:	98 2f       	mov	r25, r24
    422e:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    4232:	9b 01       	movw	r18, r22
    4234:	ac 01       	movw	r20, r24
    4236:	6a a1       	ldd	r22, Y+34	; 0x22
    4238:	7b a1       	ldd	r23, Y+35	; 0x23
    423a:	8c a1       	ldd	r24, Y+36	; 0x24
    423c:	9d a1       	ldd	r25, Y+37	; 0x25
    423e:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    4242:	60 93 0e 23 	sts	0x230E, r22
    4246:	70 93 0f 23 	sts	0x230F, r23
    424a:	80 93 10 23 	sts	0x2310, r24
    424e:	90 93 11 23 	sts	0x2311, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    4252:	b8 01       	movw	r22, r16
    4254:	88 27       	eor	r24, r24
    4256:	77 fd       	sbrc	r23, 7
    4258:	80 95       	com	r24
    425a:	98 2f       	mov	r25, r24
    425c:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    4260:	7b 01       	movw	r14, r22
    4262:	8c 01       	movw	r16, r24
    4264:	c3 01       	movw	r24, r6
    4266:	b2 01       	movw	r22, r4
    4268:	a8 01       	movw	r20, r16
    426a:	97 01       	movw	r18, r14
    426c:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    4270:	60 93 12 23 	sts	0x2312, r22
    4274:	70 93 13 23 	sts	0x2313, r23
    4278:	80 93 14 23 	sts	0x2314, r24
    427c:	90 93 15 23 	sts	0x2315, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    4280:	c6 01       	movw	r24, r12
    4282:	b5 01       	movw	r22, r10
    4284:	a8 01       	movw	r20, r16
    4286:	97 01       	movw	r18, r14
    4288:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    428c:	60 93 16 23 	sts	0x2316, r22
    4290:	70 93 17 23 	sts	0x2317, r23
    4294:	80 93 18 23 	sts	0x2318, r24
    4298:	90 93 19 23 	sts	0x2319, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    429c:	69 81       	ldd	r22, Y+1	; 0x01
    429e:	7a 81       	ldd	r23, Y+2	; 0x02
    42a0:	8b 81       	ldd	r24, Y+3	; 0x03
    42a2:	9c 81       	ldd	r25, Y+4	; 0x04
    42a4:	0e 94 24 45 	call	0x8a48	; 0x8a48 <sin>
    42a8:	5b 01       	movw	r10, r22
    42aa:	6c 01       	movw	r12, r24
    42ac:	f4 01       	movw	r30, r8
    42ae:	ee 0f       	add	r30, r30
    42b0:	ff 1f       	adc	r31, r31
    42b2:	ee 0f       	add	r30, r30
    42b4:	ff 1f       	adc	r31, r31
    42b6:	e4 5a       	subi	r30, 0xA4	; 164
    42b8:	fe 4d       	sbci	r31, 0xDE	; 222
    42ba:	61 81       	ldd	r22, Z+1	; 0x01
    42bc:	72 81       	ldd	r23, Z+2	; 0x02
    42be:	83 81       	ldd	r24, Z+3	; 0x03
    42c0:	94 81       	ldd	r25, Z+4	; 0x04
    42c2:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    42c6:	f4 01       	movw	r30, r8
    42c8:	ee 0f       	add	r30, r30
    42ca:	ff 1f       	adc	r31, r31
    42cc:	e8 0d       	add	r30, r8
    42ce:	f9 1d       	adc	r31, r9
    42d0:	13 e0       	ldi	r17, 0x03	; 3
    42d2:	ee 0f       	add	r30, r30
    42d4:	ff 1f       	adc	r31, r31
    42d6:	1a 95       	dec	r17
    42d8:	e1 f7       	brne	.-8      	; 0x42d2 <mc_arc_blocking+0x20a>
    42da:	ed 58       	subi	r30, 0x8D	; 141
    42dc:	fd 4d       	sbci	r31, 0xDD	; 221
    42de:	21 a1       	ldd	r18, Z+33	; 0x21
    42e0:	32 a1       	ldd	r19, Z+34	; 0x22
    42e2:	43 a1       	ldd	r20, Z+35	; 0x23
    42e4:	54 a1       	ldd	r21, Z+36	; 0x24
    42e6:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    42ea:	7b 01       	movw	r14, r22
    42ec:	8c 01       	movw	r16, r24
    42ee:	c6 01       	movw	r24, r12
    42f0:	b5 01       	movw	r22, r10
    42f2:	2d 81       	ldd	r18, Y+5	; 0x05
    42f4:	3e 81       	ldd	r19, Y+6	; 0x06
    42f6:	4f 81       	ldd	r20, Y+7	; 0x07
    42f8:	58 85       	ldd	r21, Y+8	; 0x08
    42fa:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    42fe:	9b 01       	movw	r18, r22
    4300:	ac 01       	movw	r20, r24
    4302:	c8 01       	movw	r24, r16
    4304:	b7 01       	movw	r22, r14
    4306:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    430a:	60 93 fe 22 	sts	0x22FE, r22
    430e:	70 93 ff 22 	sts	0x22FF, r23
    4312:	80 93 00 23 	sts	0x2300, r24
    4316:	90 93 01 23 	sts	0x2301, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    431a:	69 81       	ldd	r22, Y+1	; 0x01
    431c:	7a 81       	ldd	r23, Y+2	; 0x02
    431e:	8b 81       	ldd	r24, Y+3	; 0x03
    4320:	9c 81       	ldd	r25, Y+4	; 0x04
    4322:	0e 94 03 42 	call	0x8406	; 0x8406 <cos>
    4326:	5b 01       	movw	r10, r22
    4328:	6c 01       	movw	r12, r24
    432a:	f1 01       	movw	r30, r2
    432c:	ee 0f       	add	r30, r30
    432e:	ff 1f       	adc	r31, r31
    4330:	ee 0f       	add	r30, r30
    4332:	ff 1f       	adc	r31, r31
    4334:	e4 5a       	subi	r30, 0xA4	; 164
    4336:	fe 4d       	sbci	r31, 0xDE	; 222
    4338:	61 81       	ldd	r22, Z+1	; 0x01
    433a:	72 81       	ldd	r23, Z+2	; 0x02
    433c:	83 81       	ldd	r24, Z+3	; 0x03
    433e:	94 81       	ldd	r25, Z+4	; 0x04
    4340:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    4344:	f1 01       	movw	r30, r2
    4346:	ee 0f       	add	r30, r30
    4348:	ff 1f       	adc	r31, r31
    434a:	e2 0d       	add	r30, r2
    434c:	f3 1d       	adc	r31, r3
    434e:	53 e0       	ldi	r21, 0x03	; 3
    4350:	ee 0f       	add	r30, r30
    4352:	ff 1f       	adc	r31, r31
    4354:	5a 95       	dec	r21
    4356:	e1 f7       	brne	.-8      	; 0x4350 <mc_arc_blocking+0x288>
    4358:	ed 58       	subi	r30, 0x8D	; 141
    435a:	fd 4d       	sbci	r31, 0xDD	; 221
    435c:	21 a1       	ldd	r18, Z+33	; 0x21
    435e:	32 a1       	ldd	r19, Z+34	; 0x22
    4360:	43 a1       	ldd	r20, Z+35	; 0x23
    4362:	54 a1       	ldd	r21, Z+36	; 0x24
    4364:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    4368:	7b 01       	movw	r14, r22
    436a:	8c 01       	movw	r16, r24
    436c:	c6 01       	movw	r24, r12
    436e:	b5 01       	movw	r22, r10
    4370:	2d 81       	ldd	r18, Y+5	; 0x05
    4372:	3e 81       	ldd	r19, Y+6	; 0x06
    4374:	4f 81       	ldd	r20, Y+7	; 0x07
    4376:	58 85       	ldd	r21, Y+8	; 0x08
    4378:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    437c:	9b 01       	movw	r18, r22
    437e:	ac 01       	movw	r20, r24
    4380:	c8 01       	movw	r24, r16
    4382:	b7 01       	movw	r22, r14
    4384:	0e 94 5f 41 	call	0x82be	; 0x82be <__subsf3>
    4388:	60 93 02 23 	sts	0x2302, r22
    438c:	70 93 03 23 	sts	0x2303, r23
    4390:	80 93 04 23 	sts	0x2304, r24
    4394:	90 93 05 23 	sts	0x2305, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    4398:	e8 a1       	ldd	r30, Y+32	; 0x20
    439a:	f9 a1       	ldd	r31, Y+33	; 0x21
    439c:	ee 0f       	add	r30, r30
    439e:	ff 1f       	adc	r31, r31
    43a0:	ee 0f       	add	r30, r30
    43a2:	ff 1f       	adc	r31, r31
    43a4:	8f 01       	movw	r16, r30
    43a6:	0f 51       	subi	r16, 0x1F	; 31
    43a8:	1d 4d       	sbci	r17, 0xDD	; 221
    43aa:	e4 5a       	subi	r30, 0xA4	; 164
    43ac:	fe 4d       	sbci	r31, 0xDE	; 222
    43ae:	61 81       	ldd	r22, Z+1	; 0x01
    43b0:	72 81       	ldd	r23, Z+2	; 0x02
    43b2:	83 81       	ldd	r24, Z+3	; 0x03
    43b4:	94 81       	ldd	r25, Z+4	; 0x04
    43b6:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    43ba:	20 91 c4 22 	lds	r18, 0x22C4
    43be:	30 91 c5 22 	lds	r19, 0x22C5
    43c2:	40 91 c6 22 	lds	r20, 0x22C6
    43c6:	50 91 c7 22 	lds	r21, 0x22C7
    43ca:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    43ce:	d8 01       	movw	r26, r16
    43d0:	1d 96       	adiw	r26, 0x0d	; 13
    43d2:	6d 93       	st	X+, r22
    43d4:	7d 93       	st	X+, r23
    43d6:	8d 93       	st	X+, r24
    43d8:	9c 93       	st	X, r25
    43da:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    43dc:	10 92 e4 22 	sts	0x22E4, r1
    43e0:	10 92 e5 22 	sts	0x22E5, r1
    43e4:	bf c0       	rjmp	.+382    	; 0x4564 <mc_arc_blocking+0x49c>
		ma.theta += ma.theta_per_segment;
    43e6:	60 91 06 23 	lds	r22, 0x2306
    43ea:	70 91 07 23 	lds	r23, 0x2307
    43ee:	80 91 08 23 	lds	r24, 0x2308
    43f2:	90 91 09 23 	lds	r25, 0x2309
    43f6:	20 91 12 23 	lds	r18, 0x2312
    43fa:	30 91 13 23 	lds	r19, 0x2313
    43fe:	40 91 14 23 	lds	r20, 0x2314
    4402:	50 91 15 23 	lds	r21, 0x2315
    4406:	0e 94 60 41 	call	0x82c0	; 0x82c0 <__addsf3>
    440a:	7b 01       	movw	r14, r22
    440c:	8c 01       	movw	r16, r24
    440e:	cb 01       	movw	r24, r22
    4410:	d8 01       	movw	r26, r16
    4412:	80 93 06 23 	sts	0x2306, r24
    4416:	90 93 07 23 	sts	0x2307, r25
    441a:	a0 93 08 23 	sts	0x2308, r26
    441e:	b0 93 09 23 	sts	0x2309, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    4422:	b7 01       	movw	r22, r14
    4424:	c8 01       	movw	r24, r16
    4426:	0e 94 24 45 	call	0x8a48	; 0x8a48 <sin>
    442a:	80 90 0a 23 	lds	r8, 0x230A
    442e:	90 90 0b 23 	lds	r9, 0x230B
    4432:	a0 90 0c 23 	lds	r10, 0x230C
    4436:	b0 90 0d 23 	lds	r11, 0x230D
    443a:	c0 90 e8 22 	lds	r12, 0x22E8
    443e:	d0 90 e9 22 	lds	r13, 0x22E9
    4442:	cc 0c       	add	r12, r12
    4444:	dd 1c       	adc	r13, r13
    4446:	cc 0c       	add	r12, r12
    4448:	dd 1c       	adc	r13, r13
    444a:	e1 ee       	ldi	r30, 0xE1	; 225
    444c:	f2 e2       	ldi	r31, 0x22	; 34
    444e:	ce 0e       	add	r12, r30
    4450:	df 1e       	adc	r13, r31
    4452:	a5 01       	movw	r20, r10
    4454:	94 01       	movw	r18, r8
    4456:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    445a:	9b 01       	movw	r18, r22
    445c:	ac 01       	movw	r20, r24
    445e:	60 91 fe 22 	lds	r22, 0x22FE
    4462:	70 91 ff 22 	lds	r23, 0x22FF
    4466:	80 91 00 23 	lds	r24, 0x2300
    446a:	90 91 01 23 	lds	r25, 0x2301
    446e:	0e 94 60 41 	call	0x82c0	; 0x82c0 <__addsf3>
    4472:	d6 01       	movw	r26, r12
    4474:	1d 96       	adiw	r26, 0x0d	; 13
    4476:	6d 93       	st	X+, r22
    4478:	7d 93       	st	X+, r23
    447a:	8d 93       	st	X+, r24
    447c:	9c 93       	st	X, r25
    447e:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    4480:	b7 01       	movw	r22, r14
    4482:	c8 01       	movw	r24, r16
    4484:	0e 94 03 42 	call	0x8406	; 0x8406 <cos>
    4488:	00 91 ea 22 	lds	r16, 0x22EA
    448c:	10 91 eb 22 	lds	r17, 0x22EB
    4490:	00 0f       	add	r16, r16
    4492:	11 1f       	adc	r17, r17
    4494:	00 0f       	add	r16, r16
    4496:	11 1f       	adc	r17, r17
    4498:	0f 51       	subi	r16, 0x1F	; 31
    449a:	1d 4d       	sbci	r17, 0xDD	; 221
    449c:	a5 01       	movw	r20, r10
    449e:	94 01       	movw	r18, r8
    44a0:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    44a4:	9b 01       	movw	r18, r22
    44a6:	ac 01       	movw	r20, r24
    44a8:	60 91 02 23 	lds	r22, 0x2302
    44ac:	70 91 03 23 	lds	r23, 0x2303
    44b0:	80 91 04 23 	lds	r24, 0x2304
    44b4:	90 91 05 23 	lds	r25, 0x2305
    44b8:	0e 94 60 41 	call	0x82c0	; 0x82c0 <__addsf3>
    44bc:	f8 01       	movw	r30, r16
    44be:	65 87       	std	Z+13, r22	; 0x0d
    44c0:	76 87       	std	Z+14, r23	; 0x0e
    44c2:	87 87       	std	Z+15, r24	; 0x0f
    44c4:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    44c6:	00 91 ec 22 	lds	r16, 0x22EC
    44ca:	10 91 ed 22 	lds	r17, 0x22ED
    44ce:	00 0f       	add	r16, r16
    44d0:	11 1f       	adc	r17, r17
    44d2:	00 0f       	add	r16, r16
    44d4:	11 1f       	adc	r17, r17
    44d6:	0f 51       	subi	r16, 0x1F	; 31
    44d8:	1d 4d       	sbci	r17, 0xDD	; 221
    44da:	d8 01       	movw	r26, r16
    44dc:	1d 96       	adiw	r26, 0x0d	; 13
    44de:	6d 91       	ld	r22, X+
    44e0:	7d 91       	ld	r23, X+
    44e2:	8d 91       	ld	r24, X+
    44e4:	9c 91       	ld	r25, X
    44e6:	50 97       	sbiw	r26, 0x10	; 16
    44e8:	20 91 16 23 	lds	r18, 0x2316
    44ec:	30 91 17 23 	lds	r19, 0x2317
    44f0:	40 91 18 23 	lds	r20, 0x2318
    44f4:	50 91 19 23 	lds	r21, 0x2319
    44f8:	0e 94 60 41 	call	0x82c0	; 0x82c0 <__addsf3>
    44fc:	f8 01       	movw	r30, r16
    44fe:	65 87       	std	Z+13, r22	; 0x0d
    4500:	76 87       	std	Z+14, r23	; 0x0e
    4502:	87 87       	std	Z+15, r24	; 0x0f
    4504:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    4506:	60 91 ee 22 	lds	r22, 0x22EE
    450a:	70 91 ef 22 	lds	r23, 0x22EF
    450e:	80 91 f0 22 	lds	r24, 0x22F0
    4512:	90 91 f1 22 	lds	r25, 0x22F1
    4516:	20 91 f2 22 	lds	r18, 0x22F2
    451a:	30 91 f3 22 	lds	r19, 0x22F3
    451e:	40 91 f4 22 	lds	r20, 0x22F4
    4522:	50 91 f5 22 	lds	r21, 0x22F5
    4526:	e0 90 f6 22 	lds	r14, 0x22F6
    452a:	f0 90 f7 22 	lds	r15, 0x22F7
    452e:	00 91 f8 22 	lds	r16, 0x22F8
    4532:	10 91 f9 22 	lds	r17, 0x22F9
    4536:	a0 90 0e 23 	lds	r10, 0x230E
    453a:	b0 90 0f 23 	lds	r11, 0x230F
    453e:	c0 90 10 23 	lds	r12, 0x2310
    4542:	d0 90 11 23 	lds	r13, 0x2311
    4546:	80 90 e6 22 	lds	r8, 0x22E6
    454a:	90 90 e7 22 	lds	r9, 0x22E7
    454e:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    4552:	80 91 e4 22 	lds	r24, 0x22E4
    4556:	90 91 e5 22 	lds	r25, 0x22E5
    455a:	01 96       	adiw	r24, 0x01	; 1
    455c:	80 93 e4 22 	sts	0x22E4, r24
    4560:	90 93 e5 22 	sts	0x22E5, r25
    4564:	20 91 e4 22 	lds	r18, 0x22E4
    4568:	30 91 e5 22 	lds	r19, 0x22E5
    456c:	80 91 e2 22 	lds	r24, 0x22E2
    4570:	90 91 e3 22 	lds	r25, 0x22E3
    4574:	82 17       	cp	r24, r18
    4576:	93 07       	cpc	r25, r19
    4578:	0c f0       	brlt	.+2      	; 0x457c <mc_arc_blocking+0x4b4>
    457a:	35 cf       	rjmp	.-406    	; 0x43e6 <mc_arc_blocking+0x31e>
    457c:	20 e0       	ldi	r18, 0x00	; 0
    457e:	30 e0       	ldi	r19, 0x00	; 0
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    4580:	c9 01       	movw	r24, r18
    4582:	28 96       	adiw	r28, 0x08	; 8
    4584:	cd bf       	out	0x3d, r28	; 61
    4586:	de bf       	out	0x3e, r29	; 62
    4588:	cf 91       	pop	r28
    458a:	df 91       	pop	r29
    458c:	1f 91       	pop	r17
    458e:	0f 91       	pop	r16
    4590:	ff 90       	pop	r15
    4592:	ef 90       	pop	r14
    4594:	df 90       	pop	r13
    4596:	cf 90       	pop	r12
    4598:	bf 90       	pop	r11
    459a:	af 90       	pop	r10
    459c:	9f 90       	pop	r9
    459e:	8f 90       	pop	r8
    45a0:	7f 90       	pop	r7
    45a2:	6f 90       	pop	r6
    45a4:	5f 90       	pop	r5
    45a6:	4f 90       	pop	r4
    45a8:	3f 90       	pop	r3
    45aa:	2f 90       	pop	r2
    45ac:	08 95       	ret

000045ae <mc_line_blocking>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line_blocking(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    45ae:	2f 92       	push	r2
    45b0:	3f 92       	push	r3
    45b2:	4f 92       	push	r4
    45b4:	5f 92       	push	r5
    45b6:	6f 92       	push	r6
    45b8:	7f 92       	push	r7
    45ba:	8f 92       	push	r8
    45bc:	9f 92       	push	r9
    45be:	af 92       	push	r10
    45c0:	bf 92       	push	r11
    45c2:	cf 92       	push	r12
    45c4:	df 92       	push	r13
    45c6:	ef 92       	push	r14
    45c8:	ff 92       	push	r15
    45ca:	0f 93       	push	r16
    45cc:	1f 93       	push	r17
    45ce:	df 93       	push	r29
    45d0:	cf 93       	push	r28
    45d2:	cd b7       	in	r28, 0x3d	; 61
    45d4:	de b7       	in	r29, 0x3e	; 62
    45d6:	6a 97       	sbiw	r28, 0x1a	; 26
    45d8:	cd bf       	out	0x3d, r28	; 61
    45da:	de bf       	out	0x3e, r29	; 62
    45dc:	19 01       	movw	r2, r18
    45de:	2a 01       	movw	r4, r20
    45e0:	ad 8a       	std	Y+21, r10	; 0x15
    45e2:	be 8a       	std	Y+22, r11	; 0x16
    45e4:	cf 8a       	std	Y+23, r12	; 0x17
    45e6:	d8 8e       	std	Y+24, r13	; 0x18
    45e8:	89 8e       	std	Y+25, r8	; 0x19
    45ea:	9a 8e       	std	Y+26, r9	; 0x1a
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    45ec:	20 91 94 22 	lds	r18, 0x2294
    45f0:	30 91 95 22 	lds	r19, 0x2295
    45f4:	40 91 96 22 	lds	r20, 0x2296
    45f8:	50 91 97 22 	lds	r21, 0x2297
    45fc:	29 8b       	std	Y+17, r18	; 0x11
    45fe:	3a 8b       	std	Y+18, r19	; 0x12
    4600:	4b 8b       	std	Y+19, r20	; 0x13
    4602:	5c 8b       	std	Y+20, r21	; 0x14
    4604:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    4608:	0e 94 91 44 	call	0x8922	; 0x8922 <lround>
    460c:	3b 01       	movw	r6, r22
    460e:	4c 01       	movw	r8, r24
    4610:	60 92 69 21 	sts	0x2169, r6
    4614:	70 92 6a 21 	sts	0x216A, r7
    4618:	80 92 6b 21 	sts	0x216B, r8
    461c:	90 92 6c 21 	sts	0x216C, r9
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    4620:	80 91 ac 22 	lds	r24, 0x22AC
    4624:	90 91 ad 22 	lds	r25, 0x22AD
    4628:	a0 91 ae 22 	lds	r26, 0x22AE
    462c:	b0 91 af 22 	lds	r27, 0x22AF
    4630:	8d 87       	std	Y+13, r24	; 0x0d
    4632:	9e 87       	std	Y+14, r25	; 0x0e
    4634:	af 87       	std	Y+15, r26	; 0x0f
    4636:	b8 8b       	std	Y+16, r27	; 0x10
    4638:	c2 01       	movw	r24, r4
    463a:	b1 01       	movw	r22, r2
    463c:	2d 85       	ldd	r18, Y+13	; 0x0d
    463e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4640:	4f 85       	ldd	r20, Y+15	; 0x0f
    4642:	58 89       	ldd	r21, Y+16	; 0x10
    4644:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    4648:	0e 94 91 44 	call	0x8922	; 0x8922 <lround>
    464c:	5b 01       	movw	r10, r22
    464e:	6c 01       	movw	r12, r24
    4650:	a0 92 6d 21 	sts	0x216D, r10
    4654:	b0 92 6e 21 	sts	0x216E, r11
    4658:	c0 92 6f 21 	sts	0x216F, r12
    465c:	d0 92 70 21 	sts	0x2170, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    4660:	20 91 c4 22 	lds	r18, 0x22C4
    4664:	30 91 c5 22 	lds	r19, 0x22C5
    4668:	40 91 c6 22 	lds	r20, 0x22C6
    466c:	50 91 c7 22 	lds	r21, 0x22C7
    4670:	29 87       	std	Y+9, r18	; 0x09
    4672:	3a 87       	std	Y+10, r19	; 0x0a
    4674:	4b 87       	std	Y+11, r20	; 0x0b
    4676:	5c 87       	std	Y+12, r21	; 0x0c
    4678:	c8 01       	movw	r24, r16
    467a:	b7 01       	movw	r22, r14
    467c:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    4680:	0e 94 91 44 	call	0x8922	; 0x8922 <lround>
    4684:	9b 01       	movw	r18, r22
    4686:	ac 01       	movw	r20, r24
    4688:	20 93 71 21 	sts	0x2171, r18
    468c:	30 93 72 21 	sts	0x2172, r19
    4690:	40 93 73 21 	sts	0x2173, r20
    4694:	50 93 74 21 	sts	0x2174, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    4698:	80 91 5d 21 	lds	r24, 0x215D
    469c:	90 91 5e 21 	lds	r25, 0x215E
    46a0:	a0 91 5f 21 	lds	r26, 0x215F
    46a4:	b0 91 60 21 	lds	r27, 0x2160
    46a8:	84 01       	movw	r16, r8
    46aa:	73 01       	movw	r14, r6
    46ac:	e8 1a       	sub	r14, r24
    46ae:	f9 0a       	sbc	r15, r25
    46b0:	0a 0b       	sbc	r16, r26
    46b2:	1b 0b       	sbc	r17, r27
    46b4:	ed 82       	std	Y+5, r14	; 0x05
    46b6:	fe 82       	std	Y+6, r15	; 0x06
    46b8:	0f 83       	std	Y+7, r16	; 0x07
    46ba:	18 87       	std	Y+8, r17	; 0x08
    46bc:	e0 92 75 21 	sts	0x2175, r14
    46c0:	f0 92 76 21 	sts	0x2176, r15
    46c4:	00 93 77 21 	sts	0x2177, r16
    46c8:	10 93 78 21 	sts	0x2178, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    46cc:	80 91 61 21 	lds	r24, 0x2161
    46d0:	90 91 62 21 	lds	r25, 0x2162
    46d4:	a0 91 63 21 	lds	r26, 0x2163
    46d8:	b0 91 64 21 	lds	r27, 0x2164
    46dc:	86 01       	movw	r16, r12
    46de:	75 01       	movw	r14, r10
    46e0:	e8 1a       	sub	r14, r24
    46e2:	f9 0a       	sbc	r15, r25
    46e4:	0a 0b       	sbc	r16, r26
    46e6:	1b 0b       	sbc	r17, r27
    46e8:	e9 82       	std	Y+1, r14	; 0x01
    46ea:	fa 82       	std	Y+2, r15	; 0x02
    46ec:	0b 83       	std	Y+3, r16	; 0x03
    46ee:	1c 83       	std	Y+4, r17	; 0x04
    46f0:	e0 92 79 21 	sts	0x2179, r14
    46f4:	f0 92 7a 21 	sts	0x217A, r15
    46f8:	00 93 7b 21 	sts	0x217B, r16
    46fc:	10 93 7c 21 	sts	0x217C, r17
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    4700:	80 91 65 21 	lds	r24, 0x2165
    4704:	90 91 66 21 	lds	r25, 0x2166
    4708:	a0 91 67 21 	lds	r26, 0x2167
    470c:	b0 91 68 21 	lds	r27, 0x2168
    4710:	19 01       	movw	r2, r18
    4712:	2a 01       	movw	r4, r20
    4714:	28 1a       	sub	r2, r24
    4716:	39 0a       	sbc	r3, r25
    4718:	4a 0a       	sbc	r4, r26
    471a:	5b 0a       	sbc	r5, r27
    471c:	20 92 7d 21 	sts	0x217D, r2
    4720:	30 92 7e 21 	sts	0x217E, r3
    4724:	40 92 7f 21 	sts	0x217F, r4
    4728:	50 92 80 21 	sts	0x2180, r5

	// skip zero length lines
	if ((mc.steps[X] + mc.steps[Y] + mc.steps[Z]) == 0) {
    472c:	d8 01       	movw	r26, r16
    472e:	c7 01       	movw	r24, r14
    4730:	0d 81       	ldd	r16, Y+5	; 0x05
    4732:	1e 81       	ldd	r17, Y+6	; 0x06
    4734:	2f 81       	ldd	r18, Y+7	; 0x07
    4736:	38 85       	ldd	r19, Y+8	; 0x08
    4738:	80 0f       	add	r24, r16
    473a:	91 1f       	adc	r25, r17
    473c:	a2 1f       	adc	r26, r18
    473e:	b3 1f       	adc	r27, r19
    4740:	82 0d       	add	r24, r2
    4742:	93 1d       	adc	r25, r3
    4744:	a4 1d       	adc	r26, r4
    4746:	b5 1d       	adc	r27, r5
    4748:	00 97       	sbiw	r24, 0x00	; 0
    474a:	a1 05       	cpc	r26, r1
    474c:	b1 05       	cpc	r27, r1
    474e:	19 f4       	brne	.+6      	; 0x4756 <mc_line_blocking+0x1a8>
    4750:	24 e1       	ldi	r18, 0x14	; 20
    4752:	30 e0       	ldi	r19, 0x00	; 0
    4754:	86 c0       	rjmp	.+268    	; 0x4862 <mc_line_blocking+0x2b4>
		return (TG_ZERO_LENGTH_LINE);
	}

	if (invert_feed_rate) {
    4756:	29 8d       	ldd	r18, Y+25	; 0x19
    4758:	3a 8d       	ldd	r19, Y+26	; 0x1a
    475a:	23 2b       	or	r18, r19
    475c:	59 f0       	breq	.+22     	; 0x4774 <mc_line_blocking+0x1c6>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    475e:	60 ec       	ldi	r22, 0xC0	; 192
    4760:	71 ee       	ldi	r23, 0xE1	; 225
    4762:	84 e6       	ldi	r24, 0x64	; 100
    4764:	9c e4       	ldi	r25, 0x4C	; 76
    4766:	2d 89       	ldd	r18, Y+21	; 0x15
    4768:	3e 89       	ldd	r19, Y+22	; 0x16
    476a:	4f 89       	ldd	r20, Y+23	; 0x17
    476c:	58 8d       	ldd	r21, Y+24	; 0x18
    476e:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    4772:	4e c0       	rjmp	.+156    	; 0x4810 <mc_line_blocking+0x262>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    4774:	6d 81       	ldd	r22, Y+5	; 0x05
    4776:	7e 81       	ldd	r23, Y+6	; 0x06
    4778:	8f 81       	ldd	r24, Y+7	; 0x07
    477a:	98 85       	ldd	r25, Y+8	; 0x08
    477c:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    4780:	29 89       	ldd	r18, Y+17	; 0x11
    4782:	3a 89       	ldd	r19, Y+18	; 0x12
    4784:	4b 89       	ldd	r20, Y+19	; 0x13
    4786:	5c 89       	ldd	r21, Y+20	; 0x14
    4788:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    478c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <square>
    4790:	3b 01       	movw	r6, r22
    4792:	4c 01       	movw	r8, r24
    4794:	69 81       	ldd	r22, Y+1	; 0x01
    4796:	7a 81       	ldd	r23, Y+2	; 0x02
    4798:	8b 81       	ldd	r24, Y+3	; 0x03
    479a:	9c 81       	ldd	r25, Y+4	; 0x04
    479c:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    47a0:	2d 85       	ldd	r18, Y+13	; 0x0d
    47a2:	3e 85       	ldd	r19, Y+14	; 0x0e
    47a4:	4f 85       	ldd	r20, Y+15	; 0x0f
    47a6:	58 89       	ldd	r21, Y+16	; 0x10
    47a8:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    47ac:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <square>
    47b0:	5b 01       	movw	r10, r22
    47b2:	6c 01       	movw	r12, r24
    47b4:	c2 01       	movw	r24, r4
    47b6:	b1 01       	movw	r22, r2
    47b8:	0e 94 a1 42 	call	0x8542	; 0x8542 <__floatsisf>
    47bc:	29 85       	ldd	r18, Y+9	; 0x09
    47be:	3a 85       	ldd	r19, Y+10	; 0x0a
    47c0:	4b 85       	ldd	r20, Y+11	; 0x0b
    47c2:	5c 85       	ldd	r21, Y+12	; 0x0c
    47c4:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    47c8:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <square>
    47cc:	7b 01       	movw	r14, r22
    47ce:	8c 01       	movw	r16, r24
    47d0:	c4 01       	movw	r24, r8
    47d2:	b3 01       	movw	r22, r6
    47d4:	a6 01       	movw	r20, r12
    47d6:	95 01       	movw	r18, r10
    47d8:	0e 94 60 41 	call	0x82c0	; 0x82c0 <__addsf3>
    47dc:	a8 01       	movw	r20, r16
    47de:	97 01       	movw	r18, r14
    47e0:	0e 94 60 41 	call	0x82c0	; 0x82c0 <__addsf3>
    47e4:	0e 94 2e 45 	call	0x8a5c	; 0x8a5c <sqrt>
    47e8:	60 93 85 21 	sts	0x2185, r22
    47ec:	70 93 86 21 	sts	0x2186, r23
    47f0:	80 93 87 21 	sts	0x2187, r24
    47f4:	90 93 88 21 	sts	0x2188, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    47f8:	2d 89       	ldd	r18, Y+21	; 0x15
    47fa:	3e 89       	ldd	r19, Y+22	; 0x16
    47fc:	4f 89       	ldd	r20, Y+23	; 0x17
    47fe:	58 8d       	ldd	r21, Y+24	; 0x18
    4800:	0e 94 06 42 	call	0x840c	; 0x840c <__divsf3>
    4804:	20 e0       	ldi	r18, 0x00	; 0
    4806:	34 e2       	ldi	r19, 0x24	; 36
    4808:	44 e7       	ldi	r20, 0x74	; 116
    480a:	59 e4       	ldi	r21, 0x49	; 73
    480c:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    4810:	0e 94 91 44 	call	0x8922	; 0x8922 <lround>
    4814:	60 93 81 21 	sts	0x2181, r22
    4818:	70 93 82 21 	sts	0x2182, r23
    481c:	80 93 83 21 	sts	0x2183, r24
    4820:	90 93 84 21 	sts	0x2184, r25
	}
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    4824:	a0 90 81 21 	lds	r10, 0x2181
    4828:	b0 90 82 21 	lds	r11, 0x2182
    482c:	c0 90 83 21 	lds	r12, 0x2183
    4830:	d0 90 84 21 	lds	r13, 0x2184
    4834:	6d 81       	ldd	r22, Y+5	; 0x05
    4836:	7e 81       	ldd	r23, Y+6	; 0x06
    4838:	8f 81       	ldd	r24, Y+7	; 0x07
    483a:	98 85       	ldd	r25, Y+8	; 0x08
    483c:	29 81       	ldd	r18, Y+1	; 0x01
    483e:	3a 81       	ldd	r19, Y+2	; 0x02
    4840:	4b 81       	ldd	r20, Y+3	; 0x03
    4842:	5c 81       	ldd	r21, Y+4	; 0x04
    4844:	82 01       	movw	r16, r4
    4846:	71 01       	movw	r14, r2
    4848:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    484c:	ed e5       	ldi	r30, 0x5D	; 93
    484e:	f1 e2       	ldi	r31, 0x21	; 33
    4850:	df 01       	movw	r26, r30
    4852:	1c 96       	adiw	r26, 0x0c	; 12
    4854:	8c e0       	ldi	r24, 0x0C	; 12
    4856:	0d 90       	ld	r0, X+
    4858:	01 92       	st	Z+, r0
    485a:	81 50       	subi	r24, 0x01	; 1
    485c:	e1 f7       	brne	.-8      	; 0x4856 <mc_line_blocking+0x2a8>
    485e:	20 e0       	ldi	r18, 0x00	; 0
    4860:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    4862:	c9 01       	movw	r24, r18
    4864:	6a 96       	adiw	r28, 0x1a	; 26
    4866:	cd bf       	out	0x3d, r28	; 61
    4868:	de bf       	out	0x3e, r29	; 62
    486a:	cf 91       	pop	r28
    486c:	df 91       	pop	r29
    486e:	1f 91       	pop	r17
    4870:	0f 91       	pop	r16
    4872:	ff 90       	pop	r15
    4874:	ef 90       	pop	r14
    4876:	df 90       	pop	r13
    4878:	cf 90       	pop	r12
    487a:	bf 90       	pop	r11
    487c:	af 90       	pop	r10
    487e:	9f 90       	pop	r9
    4880:	8f 90       	pop	r8
    4882:	7f 90       	pop	r7
    4884:	6f 90       	pop	r6
    4886:	5f 90       	pop	r5
    4888:	4f 90       	pop	r4
    488a:	3f 90       	pop	r3
    488c:	2f 90       	pop	r2
    488e:	08 95       	ret

00004890 <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    4890:	e0 e6       	ldi	r30, 0x60	; 96
    4892:	f6 e0       	ldi	r31, 0x06	; 6
    4894:	80 e4       	ldi	r24, 0x40	; 64
    4896:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    4898:	80 e8       	ldi	r24, 0x80	; 128
    489a:	81 83       	std	Z+1, r24	; 0x01
}
    489c:	08 95       	ret

0000489e <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    489e:	97 fd       	sbrc	r25, 7
    48a0:	05 c0       	rjmp	.+10     	; 0x48ac <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    48a2:	80 e8       	ldi	r24, 0x80	; 128
    48a4:	e0 e6       	ldi	r30, 0x60	; 96
    48a6:	f6 e0       	ldi	r31, 0x06	; 6
    48a8:	85 83       	std	Z+5, r24	; 0x05
    48aa:	04 c0       	rjmp	.+8      	; 0x48b4 <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    48ac:	80 e8       	ldi	r24, 0x80	; 128
    48ae:	e0 e6       	ldi	r30, 0x60	; 96
    48b0:	f6 e0       	ldi	r31, 0x06	; 6
    48b2:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    48b4:	80 e4       	ldi	r24, 0x40	; 64
    48b6:	e0 e6       	ldi	r30, 0x60	; 96
    48b8:	f6 e0       	ldi	r31, 0x06	; 6
    48ba:	85 83       	std	Z+5, r24	; 0x05
}
    48bc:	08 95       	ret

000048be <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    48be:	80 e4       	ldi	r24, 0x40	; 64
    48c0:	e0 e6       	ldi	r30, 0x60	; 96
    48c2:	f6 e0       	ldi	r31, 0x06	; 6
    48c4:	86 83       	std	Z+6, r24	; 0x06
}
    48c6:	08 95       	ret

000048c8 <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    48c8:	cf 93       	push	r28
    48ca:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    48cc:	10 92 30 22 	sts	0x2230, r1
	ax.exec_mutex = FALSE;
    48d0:	10 92 2f 22 	sts	0x222F, r1

	ax.a[X].port = &X_MOTOR_PORT;				// bind PORTs to structs
    48d4:	80 e0       	ldi	r24, 0x00	; 0
    48d6:	96 e0       	ldi	r25, 0x06	; 6
    48d8:	80 93 3f 22 	sts	0x223F, r24
    48dc:	90 93 40 22 	sts	0x2240, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    48e0:	80 ea       	ldi	r24, 0xA0	; 160
    48e2:	96 e0       	ldi	r25, 0x06	; 6
    48e4:	80 93 4f 22 	sts	0x224F, r24
    48e8:	90 93 50 22 	sts	0x2250, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    48ec:	80 e8       	ldi	r24, 0x80	; 128
    48ee:	96 e0       	ldi	r25, 0x06	; 6
    48f0:	80 93 5f 22 	sts	0x225F, r24
    48f4:	90 93 60 22 	sts	0x2260, r25
	ax.a[A].port = &A_MOTOR_PORT;
    48f8:	80 e6       	ldi	r24, 0x60	; 96
    48fa:	96 e0       	ldi	r25, 0x06	; 6
    48fc:	80 93 6f 22 	sts	0x226F, r24
    4900:	90 93 70 22 	sts	0x2270, r25

	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
    4904:	80 e0       	ldi	r24, 0x00	; 0
    4906:	98 e0       	ldi	r25, 0x08	; 8
    4908:	80 93 41 22 	sts	0x2241, r24
    490c:	90 93 42 22 	sts	0x2242, r25
	ax.a[Y].timer = &Y_TIMER;
    4910:	80 e0       	ldi	r24, 0x00	; 0
    4912:	99 e0       	ldi	r25, 0x09	; 9
    4914:	80 93 51 22 	sts	0x2251, r24
    4918:	90 93 52 22 	sts	0x2252, r25
	ax.a[Z].timer = &Z_TIMER;
    491c:	80 e0       	ldi	r24, 0x00	; 0
    491e:	9a e0       	ldi	r25, 0x0A	; 10
    4920:	80 93 61 22 	sts	0x2261, r24
    4924:	90 93 62 22 	sts	0x2262, r25
	ax.a[A].timer = &A_TIMER;
    4928:	80 e0       	ldi	r24, 0x00	; 0
    492a:	9b e0       	ldi	r25, 0x0B	; 11
    492c:	80 93 71 22 	sts	0x2271, r24
    4930:	90 93 72 22 	sts	0x2272, r25
    4934:	c3 e8       	ldi	r28, 0x83	; 131
    4936:	d2 e2       	ldi	r29, 0x22	; 34
    4938:	ad e3       	ldi	r26, 0x3D	; 61
    493a:	b2 e2       	ldi	r27, 0x22	; 34

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    493c:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    493e:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    4940:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    4942:	88 81       	ld	r24, Y
    4944:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    4946:	12 96       	adiw	r26, 0x02	; 2
    4948:	ed 91       	ld	r30, X+
    494a:	fc 91       	ld	r31, X
    494c:	13 97       	sbiw	r26, 0x03	; 3
    494e:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    4950:	12 96       	adiw	r26, 0x02	; 2
    4952:	ed 91       	ld	r30, X+
    4954:	fc 91       	ld	r31, X
    4956:	13 97       	sbiw	r26, 0x03	; 3
    4958:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
    495a:	12 96       	adiw	r26, 0x02	; 2
    495c:	ed 91       	ld	r30, X+
    495e:	fc 91       	ld	r31, X
    4960:	13 97       	sbiw	r26, 0x03	; 3
    4962:	84 81       	ldd	r24, Z+4	; 0x04
    4964:	88 61       	ori	r24, 0x18	; 24
    4966:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4968:	12 96       	adiw	r26, 0x02	; 2
    496a:	ed 91       	ld	r30, X+
    496c:	fc 91       	ld	r31, X
    496e:	13 97       	sbiw	r26, 0x03	; 3
    4970:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    4972:	14 96       	adiw	r26, 0x04	; 4
    4974:	ed 91       	ld	r30, X+
    4976:	fc 91       	ld	r31, X
    4978:	15 97       	sbiw	r26, 0x05	; 5
    497a:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    497c:	14 96       	adiw	r26, 0x04	; 4
    497e:	ed 91       	ld	r30, X+
    4980:	fc 91       	ld	r31, X
    4982:	15 97       	sbiw	r26, 0x05	; 5
    4984:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    4986:	14 96       	adiw	r26, 0x04	; 4
    4988:	ed 91       	ld	r30, X+
    498a:	fc 91       	ld	r31, X
    498c:	15 97       	sbiw	r26, 0x05	; 5
    498e:	96 83       	std	Z+6, r25	; 0x06
    4990:	68 96       	adiw	r28, 0x18	; 24
    4992:	50 96       	adiw	r26, 0x10	; 16
	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    4994:	82 e2       	ldi	r24, 0x22	; 34
    4996:	c3 3e       	cpi	r28, 0xE3	; 227
    4998:	d8 07       	cpc	r29, r24
    499a:	99 f6       	brne	.-90     	; 0x4942 <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    499c:	df 91       	pop	r29
    499e:	cf 91       	pop	r28
    49a0:	08 95       	ret

000049a2 <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    49a2:	e8 2f       	mov	r30, r24
    49a4:	f0 e0       	ldi	r31, 0x00	; 0
    49a6:	84 e0       	ldi	r24, 0x04	; 4
    49a8:	ee 0f       	add	r30, r30
    49aa:	ff 1f       	adc	r31, r31
    49ac:	8a 95       	dec	r24
    49ae:	e1 f7       	brne	.-8      	; 0x49a8 <st_set_polarity+0x6>
    49b0:	e1 5d       	subi	r30, 0xD1	; 209
    49b2:	fd 4d       	sbci	r31, 0xDD	; 221
    49b4:	66 87       	std	Z+14, r22	; 0x0e
}
    49b6:	08 95       	ret

000049b8 <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X].step_counter = 0x00001000;
    49b8:	23 e3       	ldi	r18, 0x33	; 51
    49ba:	32 e2       	ldi	r19, 0x22	; 34
    49bc:	80 e0       	ldi	r24, 0x00	; 0
    49be:	90 e1       	ldi	r25, 0x10	; 16
    49c0:	a0 e0       	ldi	r26, 0x00	; 0
    49c2:	b0 e0       	ldi	r27, 0x00	; 0
    49c4:	80 93 33 22 	sts	0x2233, r24
    49c8:	90 93 34 22 	sts	0x2234, r25
    49cc:	a0 93 35 22 	sts	0x2235, r26
    49d0:	b0 93 36 22 	sts	0x2236, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    49d4:	e0 91 41 22 	lds	r30, 0x2241
    49d8:	f0 91 42 22 	lds	r31, 0x2242
    49dc:	80 e0       	ldi	r24, 0x00	; 0
    49de:	90 e1       	ldi	r25, 0x10	; 16
    49e0:	86 a3       	std	Z+38, r24	; 0x26
    49e2:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    49e4:	41 e0       	ldi	r20, 0x01	; 1
    49e6:	40 83       	st	Z, r20

	ax.a[Y].step_counter = 0x00000800;
    49e8:	80 e0       	ldi	r24, 0x00	; 0
    49ea:	98 e0       	ldi	r25, 0x08	; 8
    49ec:	a0 e0       	ldi	r26, 0x00	; 0
    49ee:	b0 e0       	ldi	r27, 0x00	; 0
    49f0:	80 93 43 22 	sts	0x2243, r24
    49f4:	90 93 44 22 	sts	0x2244, r25
    49f8:	a0 93 45 22 	sts	0x2245, r26
    49fc:	b0 93 46 22 	sts	0x2246, r27
	ax.a[Y].timer->PER = 0x2000;
    4a00:	e0 91 51 22 	lds	r30, 0x2251
    4a04:	f0 91 52 22 	lds	r31, 0x2252
    4a08:	80 e0       	ldi	r24, 0x00	; 0
    4a0a:	90 e2       	ldi	r25, 0x20	; 32
    4a0c:	86 a3       	std	Z+38, r24	; 0x26
    4a0e:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    4a10:	40 83       	st	Z, r20

	ax.a[Z].step_counter = 0x00000600;
    4a12:	80 e0       	ldi	r24, 0x00	; 0
    4a14:	96 e0       	ldi	r25, 0x06	; 6
    4a16:	a0 e0       	ldi	r26, 0x00	; 0
    4a18:	b0 e0       	ldi	r27, 0x00	; 0
    4a1a:	80 93 53 22 	sts	0x2253, r24
    4a1e:	90 93 54 22 	sts	0x2254, r25
    4a22:	a0 93 55 22 	sts	0x2255, r26
    4a26:	b0 93 56 22 	sts	0x2256, r27
	ax.a[Z].timer->PER = 0x3000;
    4a2a:	e0 91 61 22 	lds	r30, 0x2261
    4a2e:	f0 91 62 22 	lds	r31, 0x2262
    4a32:	80 e0       	ldi	r24, 0x00	; 0
    4a34:	90 e3       	ldi	r25, 0x30	; 48
    4a36:	86 a3       	std	Z+38, r24	; 0x26
    4a38:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4a3a:	40 83       	st	Z, r20

	ax.a[A].step_counter = 0x00000400;
    4a3c:	80 e0       	ldi	r24, 0x00	; 0
    4a3e:	94 e0       	ldi	r25, 0x04	; 4
    4a40:	a0 e0       	ldi	r26, 0x00	; 0
    4a42:	b0 e0       	ldi	r27, 0x00	; 0
    4a44:	80 93 63 22 	sts	0x2263, r24
    4a48:	90 93 64 22 	sts	0x2264, r25
    4a4c:	a0 93 65 22 	sts	0x2265, r26
    4a50:	b0 93 66 22 	sts	0x2266, r27
	ax.a[A].timer->PER = 0x4000;
    4a54:	d9 01       	movw	r26, r18
    4a56:	de 96       	adiw	r26, 0x3e	; 62
    4a58:	ed 91       	ld	r30, X+
    4a5a:	fc 91       	ld	r31, X
    4a5c:	df 97       	sbiw	r26, 0x3f	; 63
    4a5e:	80 e0       	ldi	r24, 0x00	; 0
    4a60:	90 e4       	ldi	r25, 0x40	; 64
    4a62:	86 a3       	std	Z+38, r24	; 0x26
    4a64:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    4a66:	40 83       	st	Z, r20

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    4a68:	23 50       	subi	r18, 0x03	; 3
    4a6a:	30 40       	sbci	r19, 0x00	; 0
    4a6c:	f9 01       	movw	r30, r18
    4a6e:	80 81       	ld	r24, Z
    4a70:	8f 60       	ori	r24, 0x0F	; 15
    4a72:	80 83       	st	Z, r24
}
    4a74:	08 95       	ret

00004a76 <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    4a76:	f8 94       	cli
	mv_flush();									// flush the move buffer
    4a78:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <mv_flush>
	sei();
    4a7c:	78 94       	sei
}
    4a7e:	08 95       	ret

00004a80 <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    4a80:	f8 94       	cli
	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    4a82:	e0 91 41 22 	lds	r30, 0x2241
    4a86:	f0 91 42 22 	lds	r31, 0x2242
    4a8a:	10 82       	st	Z, r1
    4a8c:	e0 91 51 22 	lds	r30, 0x2251
    4a90:	f0 91 52 22 	lds	r31, 0x2252
    4a94:	10 82       	st	Z, r1
    4a96:	e0 91 61 22 	lds	r30, 0x2261
    4a9a:	f0 91 62 22 	lds	r31, 0x2262
    4a9e:	10 82       	st	Z, r1
    4aa0:	e0 91 71 22 	lds	r30, 0x2271
    4aa4:	f0 91 72 22 	lds	r31, 0x2272
    4aa8:	10 82       	st	Z, r1
	}	
	mv_flush();									// flush the move buffer
    4aaa:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    4aae:	10 92 30 22 	sts	0x2230, r1
	sei();
    4ab2:	78 94       	sei
}
    4ab4:	08 95       	ret

00004ab6 <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    4ab6:	cf 92       	push	r12
    4ab8:	df 92       	push	r13
    4aba:	ef 92       	push	r14
    4abc:	ff 92       	push	r15
    4abe:	0f 93       	push	r16
    4ac0:	1f 93       	push	r17
    4ac2:	cf 93       	push	r28
    4ac4:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    4ac6:	80 91 2f 22 	lds	r24, 0x222F
    4aca:	88 23       	and	r24, r24
    4acc:	09 f0       	breq	.+2      	; 0x4ad0 <st_execute_move+0x1a>
    4ace:	32 c1       	rjmp	.+612    	; 0x4d34 <st_execute_move+0x27e>
		return;
	}
	ax.exec_mutex = TRUE;
    4ad0:	81 e0       	ldi	r24, 0x01	; 1
    4ad2:	80 93 2f 22 	sts	0x222F, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    4ad6:	80 91 30 22 	lds	r24, 0x2230
    4ada:	88 23       	and	r24, r24
    4adc:	09 f0       	breq	.+2      	; 0x4ae0 <st_execute_move+0x2a>
    4ade:	28 c1       	rjmp	.+592    	; 0x4d30 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    4ae0:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <mv_dequeue_move_buffer>
    4ae4:	80 93 31 22 	sts	0x2231, r24
    4ae8:	90 93 32 22 	sts	0x2232, r25
    4aec:	89 2b       	or	r24, r25
    4aee:	09 f4       	brne	.+2      	; 0x4af2 <st_execute_move+0x3c>
    4af0:	1f c1       	rjmp	.+574    	; 0x4d30 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;
		return;
    4af2:	63 e3       	ldi	r22, 0x33	; 51
    4af4:	72 e2       	ldi	r23, 0x22	; 34
    4af6:	00 e0       	ldi	r16, 0x00	; 0
    4af8:	10 e0       	ldi	r17, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4afa:	94 e0       	ldi	r25, 0x04	; 4
    4afc:	c9 2e       	mov	r12, r25
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4afe:	82 e0       	ldi	r24, 0x02	; 2
    4b00:	d8 2e       	mov	r13, r24
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
		ax.exec_mutex = FALSE;
		return;
    4b02:	f0 2e       	mov	r15, r16
    4b04:	e1 2e       	mov	r14, r17
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    4b06:	db 01       	movw	r26, r22
    4b08:	1e 96       	adiw	r26, 0x0e	; 14
    4b0a:	ed 91       	ld	r30, X+
    4b0c:	fc 91       	ld	r31, X
    4b0e:	1f 97       	sbiw	r26, 0x0f	; 15
    4b10:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    4b12:	c0 91 31 22 	lds	r28, 0x2231
    4b16:	d0 91 32 22 	lds	r29, 0x2232
    4b1a:	c8 01       	movw	r24, r16
    4b1c:	fc 01       	movw	r30, r24
    4b1e:	b3 e0       	ldi	r27, 0x03	; 3
    4b20:	ee 0f       	add	r30, r30
    4b22:	ff 1f       	adc	r31, r31
    4b24:	ba 95       	dec	r27
    4b26:	e1 f7       	brne	.-8      	; 0x4b20 <st_execute_move+0x6a>
    4b28:	88 0f       	add	r24, r24
    4b2a:	99 1f       	adc	r25, r25
    4b2c:	e8 0f       	add	r30, r24
    4b2e:	f9 1f       	adc	r31, r25
    4b30:	ec 0f       	add	r30, r28
    4b32:	fd 1f       	adc	r31, r29
    4b34:	80 81       	ld	r24, Z
    4b36:	91 81       	ldd	r25, Z+1	; 0x01
    4b38:	a2 81       	ldd	r26, Z+2	; 0x02
    4b3a:	b3 81       	ldd	r27, Z+3	; 0x03
    4b3c:	00 97       	sbiw	r24, 0x00	; 0
    4b3e:	a1 05       	cpc	r26, r1
    4b40:	b1 05       	cpc	r27, r1
    4b42:	09 f4       	brne	.+2      	; 0x4b46 <st_execute_move+0x90>
    4b44:	a6 c0       	rjmp	.+332    	; 0x4c92 <st_execute_move+0x1dc>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    4b46:	c8 01       	movw	r24, r16
    4b48:	9c 01       	movw	r18, r24
    4b4a:	f3 e0       	ldi	r31, 0x03	; 3
    4b4c:	22 0f       	add	r18, r18
    4b4e:	33 1f       	adc	r19, r19
    4b50:	fa 95       	dec	r31
    4b52:	e1 f7       	brne	.-8      	; 0x4b4c <st_execute_move+0x96>
    4b54:	88 0f       	add	r24, r24
    4b56:	99 1f       	adc	r25, r25
    4b58:	28 0f       	add	r18, r24
    4b5a:	39 1f       	adc	r19, r25
    4b5c:	c2 0f       	add	r28, r18
    4b5e:	d3 1f       	adc	r29, r19
    4b60:	89 85       	ldd	r24, Y+9	; 0x09
    4b62:	fb 01       	movw	r30, r22
    4b64:	83 87       	std	Z+11, r24	; 0x0b

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4b66:	e0 91 31 22 	lds	r30, 0x2231
    4b6a:	f0 91 32 22 	lds	r31, 0x2232
    4b6e:	c8 01       	movw	r24, r16
    4b70:	9c 01       	movw	r18, r24
    4b72:	53 e0       	ldi	r21, 0x03	; 3
    4b74:	22 0f       	add	r18, r18
    4b76:	33 1f       	adc	r19, r19
    4b78:	5a 95       	dec	r21
    4b7a:	e1 f7       	brne	.-8      	; 0x4b74 <st_execute_move+0xbe>
    4b7c:	88 0f       	add	r24, r24
    4b7e:	99 1f       	adc	r25, r25
    4b80:	28 0f       	add	r18, r24
    4b82:	39 1f       	adc	r19, r25
    4b84:	e2 0f       	add	r30, r18
    4b86:	f3 1f       	adc	r31, r19
    4b88:	90 85       	ldd	r25, Z+8	; 0x08
    4b8a:	db 01       	movw	r26, r22
    4b8c:	1a 96       	adiw	r26, 0x0a	; 10
    4b8e:	8c 91       	ld	r24, X
    4b90:	1a 97       	sbiw	r26, 0x0a	; 10
    4b92:	1c 96       	adiw	r26, 0x0c	; 12
    4b94:	ed 91       	ld	r30, X+
    4b96:	fc 91       	ld	r31, X
    4b98:	1d 97       	sbiw	r26, 0x0d	; 13
    4b9a:	98 17       	cp	r25, r24
    4b9c:	11 f0       	breq	.+4      	; 0x4ba2 <st_execute_move+0xec>
    4b9e:	d5 82       	std	Z+5, r13	; 0x05
    4ba0:	01 c0       	rjmp	.+2      	; 0x4ba4 <st_execute_move+0xee>
    4ba2:	d6 82       	std	Z+6, r13	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    4ba4:	40 91 31 22 	lds	r20, 0x2231
    4ba8:	50 91 32 22 	lds	r21, 0x2232
    4bac:	8f 2d       	mov	r24, r15
    4bae:	9e 2d       	mov	r25, r14
    4bb0:	fc 01       	movw	r30, r24
    4bb2:	33 e0       	ldi	r19, 0x03	; 3
    4bb4:	ee 0f       	add	r30, r30
    4bb6:	ff 1f       	adc	r31, r31
    4bb8:	3a 95       	dec	r19
    4bba:	e1 f7       	brne	.-8      	; 0x4bb4 <st_execute_move+0xfe>
    4bbc:	88 0f       	add	r24, r24
    4bbe:	99 1f       	adc	r25, r25
    4bc0:	e8 0f       	add	r30, r24
    4bc2:	f9 1f       	adc	r31, r25
    4bc4:	e4 0f       	add	r30, r20
    4bc6:	f5 1f       	adc	r31, r21
    4bc8:	80 81       	ld	r24, Z
    4bca:	91 81       	ldd	r25, Z+1	; 0x01
    4bcc:	a2 81       	ldd	r26, Z+2	; 0x02
    4bce:	b3 81       	ldd	r27, Z+3	; 0x03
    4bd0:	fb 01       	movw	r30, r22
    4bd2:	80 83       	st	Z, r24
    4bd4:	91 83       	std	Z+1, r25	; 0x01
    4bd6:	a2 83       	std	Z+2, r26	; 0x02
    4bd8:	b3 83       	std	Z+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    4bda:	8f 2d       	mov	r24, r15
    4bdc:	9e 2d       	mov	r25, r14
    4bde:	fc 01       	movw	r30, r24
    4be0:	b3 e0       	ldi	r27, 0x03	; 3
    4be2:	ee 0f       	add	r30, r30
    4be4:	ff 1f       	adc	r31, r31
    4be6:	ba 95       	dec	r27
    4be8:	e1 f7       	brne	.-8      	; 0x4be2 <st_execute_move+0x12c>
    4bea:	88 0f       	add	r24, r24
    4bec:	99 1f       	adc	r25, r25
    4bee:	e8 0f       	add	r30, r24
    4bf0:	f9 1f       	adc	r31, r25
    4bf2:	e4 0f       	add	r30, r20
    4bf4:	f5 1f       	adc	r31, r21
    4bf6:	86 81       	ldd	r24, Z+6	; 0x06
    4bf8:	97 81       	ldd	r25, Z+7	; 0x07
    4bfa:	db 01       	movw	r26, r22
    4bfc:	16 96       	adiw	r26, 0x06	; 6
    4bfe:	8d 93       	st	X+, r24
    4c00:	9c 93       	st	X, r25
    4c02:	17 97       	sbiw	r26, 0x07	; 7
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    4c04:	8f 2d       	mov	r24, r15
    4c06:	9e 2d       	mov	r25, r14
    4c08:	fc 01       	movw	r30, r24
    4c0a:	33 e0       	ldi	r19, 0x03	; 3
    4c0c:	ee 0f       	add	r30, r30
    4c0e:	ff 1f       	adc	r31, r31
    4c10:	3a 95       	dec	r19
    4c12:	e1 f7       	brne	.-8      	; 0x4c0c <st_execute_move+0x156>
    4c14:	88 0f       	add	r24, r24
    4c16:	99 1f       	adc	r25, r25
    4c18:	e8 0f       	add	r30, r24
    4c1a:	f9 1f       	adc	r31, r25
    4c1c:	e4 0f       	add	r30, r20
    4c1e:	f5 1f       	adc	r31, r21
    4c20:	86 81       	ldd	r24, Z+6	; 0x06
    4c22:	97 81       	ldd	r25, Z+7	; 0x07
    4c24:	18 96       	adiw	r26, 0x08	; 8
    4c26:	8d 93       	st	X+, r24
    4c28:	9c 93       	st	X, r25
    4c2a:	19 97       	sbiw	r26, 0x09	; 9
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    4c2c:	8f 2d       	mov	r24, r15
    4c2e:	9e 2d       	mov	r25, r14
    4c30:	fc 01       	movw	r30, r24
    4c32:	33 e0       	ldi	r19, 0x03	; 3
    4c34:	ee 0f       	add	r30, r30
    4c36:	ff 1f       	adc	r31, r31
    4c38:	3a 95       	dec	r19
    4c3a:	e1 f7       	brne	.-8      	; 0x4c34 <st_execute_move+0x17e>
    4c3c:	88 0f       	add	r24, r24
    4c3e:	99 1f       	adc	r25, r25
    4c40:	e8 0f       	add	r30, r24
    4c42:	f9 1f       	adc	r31, r25
    4c44:	e4 0f       	add	r30, r20
    4c46:	f5 1f       	adc	r31, r21
    4c48:	84 81       	ldd	r24, Z+4	; 0x04
    4c4a:	95 81       	ldd	r25, Z+5	; 0x05
    4c4c:	14 96       	adiw	r26, 0x04	; 4
    4c4e:	8d 93       	st	X+, r24
    4c50:	9c 93       	st	X, r25
    4c52:	15 97       	sbiw	r26, 0x05	; 5
		ax.a[i].timer->PER = ax.p->a[i].period;
    4c54:	1e 96       	adiw	r26, 0x0e	; 14
    4c56:	ed 91       	ld	r30, X+
    4c58:	fc 91       	ld	r31, X
    4c5a:	1f 97       	sbiw	r26, 0x0f	; 15
    4c5c:	8f 2d       	mov	r24, r15
    4c5e:	9e 2d       	mov	r25, r14
    4c60:	9c 01       	movw	r18, r24
    4c62:	b3 e0       	ldi	r27, 0x03	; 3
    4c64:	22 0f       	add	r18, r18
    4c66:	33 1f       	adc	r19, r19
    4c68:	ba 95       	dec	r27
    4c6a:	e1 f7       	brne	.-8      	; 0x4c64 <st_execute_move+0x1ae>
    4c6c:	88 0f       	add	r24, r24
    4c6e:	99 1f       	adc	r25, r25
    4c70:	28 0f       	add	r18, r24
    4c72:	39 1f       	adc	r19, r25
    4c74:	42 0f       	add	r20, r18
    4c76:	53 1f       	adc	r21, r19
    4c78:	da 01       	movw	r26, r20
    4c7a:	14 96       	adiw	r26, 0x04	; 4
    4c7c:	8d 91       	ld	r24, X+
    4c7e:	9c 91       	ld	r25, X
    4c80:	15 97       	sbiw	r26, 0x05	; 5
    4c82:	86 a3       	std	Z+38, r24	; 0x26
    4c84:	97 a3       	std	Z+39, r25	; 0x27
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4c86:	db 01       	movw	r26, r22
    4c88:	1c 96       	adiw	r26, 0x0c	; 12
    4c8a:	ed 91       	ld	r30, X+
    4c8c:	fc 91       	ld	r31, X
    4c8e:	1d 97       	sbiw	r26, 0x0d	; 13
    4c90:	c6 82       	std	Z+6, r12	; 0x06
    4c92:	0f 5f       	subi	r16, 0xFF	; 255
    4c94:	1f 4f       	sbci	r17, 0xFF	; 255
    4c96:	60 5f       	subi	r22, 0xF0	; 240
    4c98:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    4c9a:	03 30       	cpi	r16, 0x03	; 3
    4c9c:	11 05       	cpc	r17, r1
    4c9e:	09 f0       	breq	.+2      	; 0x4ca2 <st_execute_move+0x1ec>
    4ca0:	30 cf       	rjmp	.-416    	; 0x4b02 <st_execute_move+0x4c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4ca2:	10 92 30 22 	sts	0x2230, r1
	if (ax.a[X].step_counter) { 
    4ca6:	80 91 33 22 	lds	r24, 0x2233
    4caa:	90 91 34 22 	lds	r25, 0x2234
    4cae:	a0 91 35 22 	lds	r26, 0x2235
    4cb2:	b0 91 36 22 	lds	r27, 0x2236
    4cb6:	00 97       	sbiw	r24, 0x00	; 0
    4cb8:	a1 05       	cpc	r26, r1
    4cba:	b1 05       	cpc	r27, r1
    4cbc:	59 f0       	breq	.+22     	; 0x4cd4 <st_execute_move+0x21e>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    4cbe:	e0 91 41 22 	lds	r30, 0x2241
    4cc2:	f0 91 42 22 	lds	r31, 0x2242
    4cc6:	81 e0       	ldi	r24, 0x01	; 1
    4cc8:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4cca:	80 91 30 22 	lds	r24, 0x2230
    4cce:	88 60       	ori	r24, 0x08	; 8
    4cd0:	80 93 30 22 	sts	0x2230, r24
	}
	if (ax.a[Y].step_counter) {
    4cd4:	80 91 43 22 	lds	r24, 0x2243
    4cd8:	90 91 44 22 	lds	r25, 0x2244
    4cdc:	a0 91 45 22 	lds	r26, 0x2245
    4ce0:	b0 91 46 22 	lds	r27, 0x2246
    4ce4:	00 97       	sbiw	r24, 0x00	; 0
    4ce6:	a1 05       	cpc	r26, r1
    4ce8:	b1 05       	cpc	r27, r1
    4cea:	59 f0       	breq	.+22     	; 0x4d02 <st_execute_move+0x24c>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    4cec:	e0 91 51 22 	lds	r30, 0x2251
    4cf0:	f0 91 52 22 	lds	r31, 0x2252
    4cf4:	81 e0       	ldi	r24, 0x01	; 1
    4cf6:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4cf8:	80 91 30 22 	lds	r24, 0x2230
    4cfc:	84 60       	ori	r24, 0x04	; 4
    4cfe:	80 93 30 22 	sts	0x2230, r24
	}
	if (ax.a[Z].step_counter) {
    4d02:	80 91 53 22 	lds	r24, 0x2253
    4d06:	90 91 54 22 	lds	r25, 0x2254
    4d0a:	a0 91 55 22 	lds	r26, 0x2255
    4d0e:	b0 91 56 22 	lds	r27, 0x2256
    4d12:	00 97       	sbiw	r24, 0x00	; 0
    4d14:	a1 05       	cpc	r26, r1
    4d16:	b1 05       	cpc	r27, r1
    4d18:	59 f0       	breq	.+22     	; 0x4d30 <st_execute_move+0x27a>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4d1a:	e0 91 61 22 	lds	r30, 0x2261
    4d1e:	f0 91 62 22 	lds	r31, 0x2262
    4d22:	81 e0       	ldi	r24, 0x01	; 1
    4d24:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4d26:	80 91 30 22 	lds	r24, 0x2230
    4d2a:	82 60       	ori	r24, 0x02	; 2
    4d2c:	80 93 30 22 	sts	0x2230, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4d30:	10 92 2f 22 	sts	0x222F, r1
}
    4d34:	df 91       	pop	r29
    4d36:	cf 91       	pop	r28
    4d38:	1f 91       	pop	r17
    4d3a:	0f 91       	pop	r16
    4d3c:	ff 90       	pop	r15
    4d3e:	ef 90       	pop	r14
    4d40:	df 90       	pop	r13
    4d42:	cf 90       	pop	r12
    4d44:	08 95       	ret

00004d46 <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4d46:	10 92 2f 22 	sts	0x222F, r1
	st_execute_move();		// recursively empty the move queue
    4d4a:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <st_execute_move>
	return;
}
    4d4e:	08 95       	ret

00004d50 <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    4d50:	1f 92       	push	r1
    4d52:	0f 92       	push	r0
    4d54:	0f b6       	in	r0, 0x3f	; 63
    4d56:	0f 92       	push	r0
    4d58:	0b b6       	in	r0, 0x3b	; 59
    4d5a:	0f 92       	push	r0
    4d5c:	11 24       	eor	r1, r1
    4d5e:	2f 93       	push	r18
    4d60:	3f 93       	push	r19
    4d62:	4f 93       	push	r20
    4d64:	5f 93       	push	r21
    4d66:	6f 93       	push	r22
    4d68:	7f 93       	push	r23
    4d6a:	8f 93       	push	r24
    4d6c:	9f 93       	push	r25
    4d6e:	af 93       	push	r26
    4d70:	bf 93       	push	r27
    4d72:	ef 93       	push	r30
    4d74:	ff 93       	push	r31
	if (--ax.a[A].postscale_counter != 0) {
    4d76:	80 91 6b 22 	lds	r24, 0x226B
    4d7a:	90 91 6c 22 	lds	r25, 0x226C
    4d7e:	01 97       	sbiw	r24, 0x01	; 1
    4d80:	80 93 6b 22 	sts	0x226B, r24
    4d84:	90 93 6c 22 	sts	0x226C, r25
    4d88:	89 2b       	or	r24, r25
    4d8a:	a1 f5       	brne	.+104    	; 0x4df4 <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4d8c:	e0 e6       	ldi	r30, 0x60	; 96
    4d8e:	f6 e0       	ldi	r31, 0x06	; 6
    4d90:	81 e0       	ldi	r24, 0x01	; 1
    4d92:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    4d94:	80 91 63 22 	lds	r24, 0x2263
    4d98:	90 91 64 22 	lds	r25, 0x2264
    4d9c:	a0 91 65 22 	lds	r26, 0x2265
    4da0:	b0 91 66 22 	lds	r27, 0x2266
    4da4:	01 97       	sbiw	r24, 0x01	; 1
    4da6:	a1 09       	sbc	r26, r1
    4da8:	b1 09       	sbc	r27, r1
    4daa:	80 93 63 22 	sts	0x2263, r24
    4dae:	90 93 64 22 	sts	0x2264, r25
    4db2:	a0 93 65 22 	sts	0x2265, r26
    4db6:	b0 93 66 22 	sts	0x2266, r27
    4dba:	00 97       	sbiw	r24, 0x00	; 0
    4dbc:	a1 05       	cpc	r26, r1
    4dbe:	b1 05       	cpc	r27, r1
    4dc0:	69 f4       	brne	.+26     	; 0x4ddc <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4dc2:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4dc6:	84 e0       	ldi	r24, 0x04	; 4
    4dc8:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4dca:	80 91 30 22 	lds	r24, 0x2230
    4dce:	8e 7f       	andi	r24, 0xFE	; 254
    4dd0:	80 93 30 22 	sts	0x2230, r24
		if (ax.active_axes == 0) {
    4dd4:	88 23       	and	r24, r24
    4dd6:	11 f4       	brne	.+4      	; 0x4ddc <__vector_108+0x8c>
			st_execute_move();
    4dd8:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    4ddc:	80 91 69 22 	lds	r24, 0x2269
    4de0:	90 91 6a 22 	lds	r25, 0x226A
    4de4:	80 93 6b 22 	sts	0x226B, r24
    4de8:	90 93 6c 22 	sts	0x226C, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4dec:	81 e0       	ldi	r24, 0x01	; 1
    4dee:	e0 e6       	ldi	r30, 0x60	; 96
    4df0:	f6 e0       	ldi	r31, 0x06	; 6
    4df2:	86 83       	std	Z+6, r24	; 0x06
}
    4df4:	ff 91       	pop	r31
    4df6:	ef 91       	pop	r30
    4df8:	bf 91       	pop	r27
    4dfa:	af 91       	pop	r26
    4dfc:	9f 91       	pop	r25
    4dfe:	8f 91       	pop	r24
    4e00:	7f 91       	pop	r23
    4e02:	6f 91       	pop	r22
    4e04:	5f 91       	pop	r21
    4e06:	4f 91       	pop	r20
    4e08:	3f 91       	pop	r19
    4e0a:	2f 91       	pop	r18
    4e0c:	0f 90       	pop	r0
    4e0e:	0b be       	out	0x3b, r0	; 59
    4e10:	0f 90       	pop	r0
    4e12:	0f be       	out	0x3f, r0	; 63
    4e14:	0f 90       	pop	r0
    4e16:	1f 90       	pop	r1
    4e18:	18 95       	reti

00004e1a <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4e1a:	1f 92       	push	r1
    4e1c:	0f 92       	push	r0
    4e1e:	0f b6       	in	r0, 0x3f	; 63
    4e20:	0f 92       	push	r0
    4e22:	0b b6       	in	r0, 0x3b	; 59
    4e24:	0f 92       	push	r0
    4e26:	11 24       	eor	r1, r1
    4e28:	2f 93       	push	r18
    4e2a:	3f 93       	push	r19
    4e2c:	4f 93       	push	r20
    4e2e:	5f 93       	push	r21
    4e30:	6f 93       	push	r22
    4e32:	7f 93       	push	r23
    4e34:	8f 93       	push	r24
    4e36:	9f 93       	push	r25
    4e38:	af 93       	push	r26
    4e3a:	bf 93       	push	r27
    4e3c:	ef 93       	push	r30
    4e3e:	ff 93       	push	r31
	if (--ax.a[Z].postscale_counter != 0) {
    4e40:	80 91 5b 22 	lds	r24, 0x225B
    4e44:	90 91 5c 22 	lds	r25, 0x225C
    4e48:	01 97       	sbiw	r24, 0x01	; 1
    4e4a:	80 93 5b 22 	sts	0x225B, r24
    4e4e:	90 93 5c 22 	sts	0x225C, r25
    4e52:	89 2b       	or	r24, r25
    4e54:	a1 f5       	brne	.+104    	; 0x4ebe <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4e56:	e0 e8       	ldi	r30, 0x80	; 128
    4e58:	f6 e0       	ldi	r31, 0x06	; 6
    4e5a:	81 e0       	ldi	r24, 0x01	; 1
    4e5c:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    4e5e:	80 91 53 22 	lds	r24, 0x2253
    4e62:	90 91 54 22 	lds	r25, 0x2254
    4e66:	a0 91 55 22 	lds	r26, 0x2255
    4e6a:	b0 91 56 22 	lds	r27, 0x2256
    4e6e:	01 97       	sbiw	r24, 0x01	; 1
    4e70:	a1 09       	sbc	r26, r1
    4e72:	b1 09       	sbc	r27, r1
    4e74:	80 93 53 22 	sts	0x2253, r24
    4e78:	90 93 54 22 	sts	0x2254, r25
    4e7c:	a0 93 55 22 	sts	0x2255, r26
    4e80:	b0 93 56 22 	sts	0x2256, r27
    4e84:	00 97       	sbiw	r24, 0x00	; 0
    4e86:	a1 05       	cpc	r26, r1
    4e88:	b1 05       	cpc	r27, r1
    4e8a:	69 f4       	brne	.+26     	; 0x4ea6 <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4e8c:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4e90:	84 e0       	ldi	r24, 0x04	; 4
    4e92:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4e94:	80 91 30 22 	lds	r24, 0x2230
    4e98:	8d 7f       	andi	r24, 0xFD	; 253
    4e9a:	80 93 30 22 	sts	0x2230, r24
		if (ax.active_axes == 0) {
    4e9e:	88 23       	and	r24, r24
    4ea0:	11 f4       	brne	.+4      	; 0x4ea6 <__vector_47+0x8c>
			st_execute_move();
    4ea2:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    4ea6:	80 91 59 22 	lds	r24, 0x2259
    4eaa:	90 91 5a 22 	lds	r25, 0x225A
    4eae:	80 93 5b 22 	sts	0x225B, r24
    4eb2:	90 93 5c 22 	sts	0x225C, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4eb6:	81 e0       	ldi	r24, 0x01	; 1
    4eb8:	e0 e8       	ldi	r30, 0x80	; 128
    4eba:	f6 e0       	ldi	r31, 0x06	; 6
    4ebc:	86 83       	std	Z+6, r24	; 0x06
}
    4ebe:	ff 91       	pop	r31
    4ec0:	ef 91       	pop	r30
    4ec2:	bf 91       	pop	r27
    4ec4:	af 91       	pop	r26
    4ec6:	9f 91       	pop	r25
    4ec8:	8f 91       	pop	r24
    4eca:	7f 91       	pop	r23
    4ecc:	6f 91       	pop	r22
    4ece:	5f 91       	pop	r21
    4ed0:	4f 91       	pop	r20
    4ed2:	3f 91       	pop	r19
    4ed4:	2f 91       	pop	r18
    4ed6:	0f 90       	pop	r0
    4ed8:	0b be       	out	0x3b, r0	; 59
    4eda:	0f 90       	pop	r0
    4edc:	0f be       	out	0x3f, r0	; 63
    4ede:	0f 90       	pop	r0
    4ee0:	1f 90       	pop	r1
    4ee2:	18 95       	reti

00004ee4 <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4ee4:	1f 92       	push	r1
    4ee6:	0f 92       	push	r0
    4ee8:	0f b6       	in	r0, 0x3f	; 63
    4eea:	0f 92       	push	r0
    4eec:	0b b6       	in	r0, 0x3b	; 59
    4eee:	0f 92       	push	r0
    4ef0:	11 24       	eor	r1, r1
    4ef2:	2f 93       	push	r18
    4ef4:	3f 93       	push	r19
    4ef6:	4f 93       	push	r20
    4ef8:	5f 93       	push	r21
    4efa:	6f 93       	push	r22
    4efc:	7f 93       	push	r23
    4efe:	8f 93       	push	r24
    4f00:	9f 93       	push	r25
    4f02:	af 93       	push	r26
    4f04:	bf 93       	push	r27
    4f06:	ef 93       	push	r30
    4f08:	ff 93       	push	r31
	if (--ax.a[Y].postscale_counter != 0) {
    4f0a:	80 91 4b 22 	lds	r24, 0x224B
    4f0e:	90 91 4c 22 	lds	r25, 0x224C
    4f12:	01 97       	sbiw	r24, 0x01	; 1
    4f14:	80 93 4b 22 	sts	0x224B, r24
    4f18:	90 93 4c 22 	sts	0x224C, r25
    4f1c:	89 2b       	or	r24, r25
    4f1e:	a1 f5       	brne	.+104    	; 0x4f88 <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4f20:	e0 ea       	ldi	r30, 0xA0	; 160
    4f22:	f6 e0       	ldi	r31, 0x06	; 6
    4f24:	81 e0       	ldi	r24, 0x01	; 1
    4f26:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    4f28:	80 91 43 22 	lds	r24, 0x2243
    4f2c:	90 91 44 22 	lds	r25, 0x2244
    4f30:	a0 91 45 22 	lds	r26, 0x2245
    4f34:	b0 91 46 22 	lds	r27, 0x2246
    4f38:	01 97       	sbiw	r24, 0x01	; 1
    4f3a:	a1 09       	sbc	r26, r1
    4f3c:	b1 09       	sbc	r27, r1
    4f3e:	80 93 43 22 	sts	0x2243, r24
    4f42:	90 93 44 22 	sts	0x2244, r25
    4f46:	a0 93 45 22 	sts	0x2245, r26
    4f4a:	b0 93 46 22 	sts	0x2246, r27
    4f4e:	00 97       	sbiw	r24, 0x00	; 0
    4f50:	a1 05       	cpc	r26, r1
    4f52:	b1 05       	cpc	r27, r1
    4f54:	69 f4       	brne	.+26     	; 0x4f70 <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4f56:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4f5a:	84 e0       	ldi	r24, 0x04	; 4
    4f5c:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4f5e:	80 91 30 22 	lds	r24, 0x2230
    4f62:	8b 7f       	andi	r24, 0xFB	; 251
    4f64:	80 93 30 22 	sts	0x2230, r24
		if (ax.active_axes == 0) {
    4f68:	88 23       	and	r24, r24
    4f6a:	11 f4       	brne	.+4      	; 0x4f70 <__vector_77+0x8c>
			st_execute_move();
    4f6c:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    4f70:	80 91 49 22 	lds	r24, 0x2249
    4f74:	90 91 4a 22 	lds	r25, 0x224A
    4f78:	80 93 4b 22 	sts	0x224B, r24
    4f7c:	90 93 4c 22 	sts	0x224C, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4f80:	81 e0       	ldi	r24, 0x01	; 1
    4f82:	e0 ea       	ldi	r30, 0xA0	; 160
    4f84:	f6 e0       	ldi	r31, 0x06	; 6
    4f86:	86 83       	std	Z+6, r24	; 0x06
}
    4f88:	ff 91       	pop	r31
    4f8a:	ef 91       	pop	r30
    4f8c:	bf 91       	pop	r27
    4f8e:	af 91       	pop	r26
    4f90:	9f 91       	pop	r25
    4f92:	8f 91       	pop	r24
    4f94:	7f 91       	pop	r23
    4f96:	6f 91       	pop	r22
    4f98:	5f 91       	pop	r21
    4f9a:	4f 91       	pop	r20
    4f9c:	3f 91       	pop	r19
    4f9e:	2f 91       	pop	r18
    4fa0:	0f 90       	pop	r0
    4fa2:	0b be       	out	0x3b, r0	; 59
    4fa4:	0f 90       	pop	r0
    4fa6:	0f be       	out	0x3f, r0	; 63
    4fa8:	0f 90       	pop	r0
    4faa:	1f 90       	pop	r1
    4fac:	18 95       	reti

00004fae <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4fae:	1f 92       	push	r1
    4fb0:	0f 92       	push	r0
    4fb2:	0f b6       	in	r0, 0x3f	; 63
    4fb4:	0f 92       	push	r0
    4fb6:	0b b6       	in	r0, 0x3b	; 59
    4fb8:	0f 92       	push	r0
    4fba:	11 24       	eor	r1, r1
    4fbc:	2f 93       	push	r18
    4fbe:	3f 93       	push	r19
    4fc0:	4f 93       	push	r20
    4fc2:	5f 93       	push	r21
    4fc4:	6f 93       	push	r22
    4fc6:	7f 93       	push	r23
    4fc8:	8f 93       	push	r24
    4fca:	9f 93       	push	r25
    4fcc:	af 93       	push	r26
    4fce:	bf 93       	push	r27
    4fd0:	ef 93       	push	r30
    4fd2:	ff 93       	push	r31
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    4fd4:	80 91 3b 22 	lds	r24, 0x223B
    4fd8:	90 91 3c 22 	lds	r25, 0x223C
    4fdc:	01 97       	sbiw	r24, 0x01	; 1
    4fde:	80 93 3b 22 	sts	0x223B, r24
    4fe2:	90 93 3c 22 	sts	0x223C, r25
    4fe6:	89 2b       	or	r24, r25
    4fe8:	d1 f5       	brne	.+116    	; 0x505e <__vector_14+0xb0>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    4fea:	80 91 3e 22 	lds	r24, 0x223E
    4fee:	88 23       	and	r24, r24
    4ff0:	21 f4       	brne	.+8      	; 0x4ffa <__vector_14+0x4c>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    4ff2:	81 e0       	ldi	r24, 0x01	; 1
    4ff4:	e0 e0       	ldi	r30, 0x00	; 0
    4ff6:	f6 e0       	ldi	r31, 0x06	; 6
    4ff8:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    4ffa:	80 91 33 22 	lds	r24, 0x2233
    4ffe:	90 91 34 22 	lds	r25, 0x2234
    5002:	a0 91 35 22 	lds	r26, 0x2235
    5006:	b0 91 36 22 	lds	r27, 0x2236
    500a:	01 97       	sbiw	r24, 0x01	; 1
    500c:	a1 09       	sbc	r26, r1
    500e:	b1 09       	sbc	r27, r1
    5010:	80 93 33 22 	sts	0x2233, r24
    5014:	90 93 34 22 	sts	0x2234, r25
    5018:	a0 93 35 22 	sts	0x2235, r26
    501c:	b0 93 36 22 	sts	0x2236, r27
    5020:	00 97       	sbiw	r24, 0x00	; 0
    5022:	a1 05       	cpc	r26, r1
    5024:	b1 05       	cpc	r27, r1
    5026:	79 f4       	brne	.+30     	; 0x5046 <__vector_14+0x98>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    5028:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    502c:	84 e0       	ldi	r24, 0x04	; 4
    502e:	e0 e0       	ldi	r30, 0x00	; 0
    5030:	f6 e0       	ldi	r31, 0x06	; 6
    5032:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    5034:	80 91 30 22 	lds	r24, 0x2230
    5038:	87 7f       	andi	r24, 0xF7	; 247
    503a:	80 93 30 22 	sts	0x2230, r24
		if (ax.active_axes == 0) {				// if all axes are done
    503e:	88 23       	and	r24, r24
    5040:	11 f4       	brne	.+4      	; 0x5046 <__vector_14+0x98>
			st_execute_move();					// ...run the next move
    5042:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    5046:	80 91 39 22 	lds	r24, 0x2239
    504a:	90 91 3a 22 	lds	r25, 0x223A
    504e:	80 93 3b 22 	sts	0x223B, r24
    5052:	90 93 3c 22 	sts	0x223C, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    5056:	81 e0       	ldi	r24, 0x01	; 1
    5058:	e0 e0       	ldi	r30, 0x00	; 0
    505a:	f6 e0       	ldi	r31, 0x06	; 6
    505c:	86 83       	std	Z+6, r24	; 0x06
}
    505e:	ff 91       	pop	r31
    5060:	ef 91       	pop	r30
    5062:	bf 91       	pop	r27
    5064:	af 91       	pop	r26
    5066:	9f 91       	pop	r25
    5068:	8f 91       	pop	r24
    506a:	7f 91       	pop	r23
    506c:	6f 91       	pop	r22
    506e:	5f 91       	pop	r21
    5070:	4f 91       	pop	r20
    5072:	3f 91       	pop	r19
    5074:	2f 91       	pop	r18
    5076:	0f 90       	pop	r0
    5078:	0b be       	out	0x3b, r0	; 59
    507a:	0f 90       	pop	r0
    507c:	0f be       	out	0x3f, r0	; 63
    507e:	0f 90       	pop	r0
    5080:	1f 90       	pop	r1
    5082:	18 95       	reti

00005084 <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    5084:	e0 ea       	ldi	r30, 0xA0	; 160
    5086:	f0 e0       	ldi	r31, 0x00	; 0
    5088:	82 81       	ldd	r24, Z+2	; 0x02
    508a:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    508c:	98 ed       	ldi	r25, 0xD8	; 216
    508e:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    5090:	82 83       	std	Z+2, r24	; 0x02
}
    5092:	08 95       	ret

00005094 <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    5094:	e0 ea       	ldi	r30, 0xA0	; 160
    5096:	f0 e0       	ldi	r31, 0x00	; 0
    5098:	82 81       	ldd	r24, Z+2	; 0x02
    509a:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    509c:	98 ed       	ldi	r25, 0xD8	; 216
    509e:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    50a0:	82 83       	std	Z+2, r24	; 0x02
}
    50a2:	08 95       	ret

000050a4 <xio_setflags>:
 * xio_setflags()
 */

int xio_setflags(const uint8_t dev, const uint16_t control)
{
	struct xioDEVICE *d = &ds[dev];
    50a4:	97 e1       	ldi	r25, 0x17	; 23
    50a6:	89 9f       	mul	r24, r25
    50a8:	f0 01       	movw	r30, r0
    50aa:	11 24       	eor	r1, r1
    50ac:	ef 53       	subi	r30, 0x3F	; 63
    50ae:	fc 4d       	sbci	r31, 0xDC	; 220

	if (control & XIO_RD) {
    50b0:	64 ff       	sbrs	r22, 4
    50b2:	05 c0       	rjmp	.+10     	; 0x50be <xio_setflags+0x1a>
		d->flags |= XIO_FLAG_RD_bm;
    50b4:	80 81       	ld	r24, Z
    50b6:	91 81       	ldd	r25, Z+1	; 0x01
    50b8:	81 60       	ori	r24, 0x01	; 1
    50ba:	80 83       	st	Z, r24
    50bc:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_WR) {
    50be:	65 ff       	sbrs	r22, 5
    50c0:	05 c0       	rjmp	.+10     	; 0x50cc <xio_setflags+0x28>
		d->flags |= XIO_FLAG_WR_bm;
    50c2:	80 81       	ld	r24, Z
    50c4:	91 81       	ldd	r25, Z+1	; 0x01
    50c6:	82 60       	ori	r24, 0x02	; 2
    50c8:	80 83       	st	Z, r24
    50ca:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_BLOCK) {
    50cc:	66 ff       	sbrs	r22, 6
    50ce:	05 c0       	rjmp	.+10     	; 0x50da <xio_setflags+0x36>
		d->flags |= XIO_FLAG_BLOCK_bm;
    50d0:	80 81       	ld	r24, Z
    50d2:	91 81       	ldd	r25, Z+1	; 0x01
    50d4:	84 60       	ori	r24, 0x04	; 4
    50d6:	80 83       	st	Z, r24
    50d8:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOBLOCK) {
    50da:	67 ff       	sbrs	r22, 7
    50dc:	05 c0       	rjmp	.+10     	; 0x50e8 <xio_setflags+0x44>
		d->flags &= ~XIO_FLAG_BLOCK_bm;
    50de:	80 81       	ld	r24, Z
    50e0:	91 81       	ldd	r25, Z+1	; 0x01
    50e2:	8b 7f       	andi	r24, 0xFB	; 251
    50e4:	80 83       	st	Z, r24
    50e6:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_ECHO) {
    50e8:	70 ff       	sbrs	r23, 0
    50ea:	05 c0       	rjmp	.+10     	; 0x50f6 <xio_setflags+0x52>
		d->flags |= XIO_FLAG_ECHO_bm;
    50ec:	80 81       	ld	r24, Z
    50ee:	91 81       	ldd	r25, Z+1	; 0x01
    50f0:	80 61       	ori	r24, 0x10	; 16
    50f2:	80 83       	st	Z, r24
    50f4:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOECHO) {
    50f6:	71 ff       	sbrs	r23, 1
    50f8:	05 c0       	rjmp	.+10     	; 0x5104 <xio_setflags+0x60>
		d->flags &= ~XIO_FLAG_ECHO_bm;
    50fa:	80 81       	ld	r24, Z
    50fc:	91 81       	ldd	r25, Z+1	; 0x01
    50fe:	8f 7e       	andi	r24, 0xEF	; 239
    5100:	80 83       	st	Z, r24
    5102:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_CRLF) {
    5104:	72 ff       	sbrs	r23, 2
    5106:	05 c0       	rjmp	.+10     	; 0x5112 <xio_setflags+0x6e>
		d->flags |= XIO_FLAG_CRLF_bm;
    5108:	80 81       	ld	r24, Z
    510a:	91 81       	ldd	r25, Z+1	; 0x01
    510c:	80 62       	ori	r24, 0x20	; 32
    510e:	80 83       	st	Z, r24
    5110:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOCRLF) {
    5112:	73 ff       	sbrs	r23, 3
    5114:	05 c0       	rjmp	.+10     	; 0x5120 <xio_setflags+0x7c>
		d->flags &= ~XIO_FLAG_CRLF_bm;
    5116:	80 81       	ld	r24, Z
    5118:	91 81       	ldd	r25, Z+1	; 0x01
    511a:	8f 7d       	andi	r24, 0xDF	; 223
    511c:	80 83       	st	Z, r24
    511e:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_LINEMODE) {
    5120:	74 ff       	sbrs	r23, 4
    5122:	05 c0       	rjmp	.+10     	; 0x512e <xio_setflags+0x8a>
		d->flags |= XIO_FLAG_LINEMODE_bm;
    5124:	80 81       	ld	r24, Z
    5126:	91 81       	ldd	r25, Z+1	; 0x01
    5128:	80 64       	ori	r24, 0x40	; 64
    512a:	80 83       	st	Z, r24
    512c:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOLINEMODE) {
    512e:	75 ff       	sbrs	r23, 5
    5130:	05 c0       	rjmp	.+10     	; 0x513c <xio_setflags+0x98>
		d->flags &= ~XIO_FLAG_LINEMODE_bm;
    5132:	80 81       	ld	r24, Z
    5134:	91 81       	ldd	r25, Z+1	; 0x01
    5136:	8f 7b       	andi	r24, 0xBF	; 191
    5138:	80 83       	st	Z, r24
    513a:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_SEMICOLONS) {
    513c:	76 ff       	sbrs	r23, 6
    513e:	05 c0       	rjmp	.+10     	; 0x514a <xio_setflags+0xa6>
		d->flags |= XIO_FLAG_SEMICOLONS_bm;
    5140:	80 81       	ld	r24, Z
    5142:	91 81       	ldd	r25, Z+1	; 0x01
    5144:	80 68       	ori	r24, 0x80	; 128
    5146:	80 83       	st	Z, r24
    5148:	91 83       	std	Z+1, r25	; 0x01
	}
	if (control & XIO_NOSEMICOLONS) {
    514a:	77 ff       	sbrs	r23, 7
    514c:	05 c0       	rjmp	.+10     	; 0x5158 <xio_setflags+0xb4>
		d->flags &= ~XIO_FLAG_SEMICOLONS_bm;
    514e:	80 81       	ld	r24, Z
    5150:	91 81       	ldd	r25, Z+1	; 0x01
    5152:	8f 77       	andi	r24, 0x7F	; 127
    5154:	80 83       	st	Z, r24
    5156:	91 83       	std	Z+1, r25	; 0x01
	}
	return (XIO_OK);
}
    5158:	80 e0       	ldi	r24, 0x00	; 0
    515a:	90 e0       	ldi	r25, 0x00	; 0
    515c:	08 95       	ret

0000515e <xio_set_stdin>:
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	27 e1       	ldi	r18, 0x17	; 23
    5162:	30 e0       	ldi	r19, 0x00	; 0
    5164:	82 9f       	mul	r24, r18
    5166:	f0 01       	movw	r30, r0
    5168:	83 9f       	mul	r24, r19
    516a:	f0 0d       	add	r31, r0
    516c:	92 9f       	mul	r25, r18
    516e:	f0 0d       	add	r31, r0
    5170:	11 24       	eor	r1, r1
    5172:	ef 53       	subi	r30, 0x3F	; 63
    5174:	fc 4d       	sbci	r31, 0xDC	; 220
    5176:	83 89       	ldd	r24, Z+19	; 0x13
    5178:	94 89       	ldd	r25, Z+20	; 0x14
    517a:	80 93 00 25 	sts	0x2500, r24
    517e:	90 93 01 25 	sts	0x2501, r25
}
    5182:	08 95       	ret

00005184 <xio_set_stdout>:

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    5184:	90 e0       	ldi	r25, 0x00	; 0
    5186:	27 e1       	ldi	r18, 0x17	; 23
    5188:	30 e0       	ldi	r19, 0x00	; 0
    518a:	82 9f       	mul	r24, r18
    518c:	f0 01       	movw	r30, r0
    518e:	83 9f       	mul	r24, r19
    5190:	f0 0d       	add	r31, r0
    5192:	92 9f       	mul	r25, r18
    5194:	f0 0d       	add	r31, r0
    5196:	11 24       	eor	r1, r1
    5198:	ef 53       	subi	r30, 0x3F	; 63
    519a:	fc 4d       	sbci	r31, 0xDC	; 220
    519c:	83 89       	ldd	r24, Z+19	; 0x13
    519e:	94 89       	ldd	r25, Z+20	; 0x14
    51a0:	80 93 02 25 	sts	0x2502, r24
    51a4:	90 93 03 25 	sts	0x2503, r25
}
    51a8:	08 95       	ret

000051aa <xio_set_stderr>:

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	27 e1       	ldi	r18, 0x17	; 23
    51ae:	30 e0       	ldi	r19, 0x00	; 0
    51b0:	82 9f       	mul	r24, r18
    51b2:	f0 01       	movw	r30, r0
    51b4:	83 9f       	mul	r24, r19
    51b6:	f0 0d       	add	r31, r0
    51b8:	92 9f       	mul	r25, r18
    51ba:	f0 0d       	add	r31, r0
    51bc:	11 24       	eor	r1, r1
    51be:	ef 53       	subi	r30, 0x3F	; 63
    51c0:	fc 4d       	sbci	r31, 0xDC	; 220
    51c2:	83 89       	ldd	r24, Z+19	; 0x13
    51c4:	94 89       	ldd	r25, Z+20	; 0x14
    51c6:	80 93 04 25 	sts	0x2504, r24
    51ca:	90 93 05 25 	sts	0x2505, r25
}
    51ce:	08 95       	ret

000051d0 <xio_putc>:
/*
 * xio_putc() - common entry point for putc
 */

int xio_putc(const uint8_t dev, const char c)
{
    51d0:	46 2f       	mov	r20, r22
	if (dev < XIO_DEV_COUNT) {
    51d2:	88 30       	cpi	r24, 0x08	; 8
    51d4:	18 f0       	brcs	.+6      	; 0x51dc <xio_putc+0xc>
    51d6:	27 e0       	ldi	r18, 0x07	; 7
    51d8:	30 e0       	ldi	r19, 0x00	; 0
    51da:	15 c0       	rjmp	.+42     	; 0x5206 <xio_putc+0x36>
		return ds[dev].x_putc(c, ds[dev].fdev);
    51dc:	28 2f       	mov	r18, r24
    51de:	30 e0       	ldi	r19, 0x00	; 0
    51e0:	87 e1       	ldi	r24, 0x17	; 23
    51e2:	90 e0       	ldi	r25, 0x00	; 0
    51e4:	28 9f       	mul	r18, r24
    51e6:	f0 01       	movw	r30, r0
    51e8:	29 9f       	mul	r18, r25
    51ea:	f0 0d       	add	r31, r0
    51ec:	38 9f       	mul	r19, r24
    51ee:	f0 0d       	add	r31, r0
    51f0:	11 24       	eor	r1, r1
    51f2:	ef 53       	subi	r30, 0x3F	; 63
    51f4:	fc 4d       	sbci	r31, 0xDC	; 220
    51f6:	63 89       	ldd	r22, Z+19	; 0x13
    51f8:	74 89       	ldd	r23, Z+20	; 0x14
    51fa:	03 84       	ldd	r0, Z+11	; 0x0b
    51fc:	f4 85       	ldd	r31, Z+12	; 0x0c
    51fe:	e0 2d       	mov	r30, r0
    5200:	84 2f       	mov	r24, r20
    5202:	19 95       	eicall
    5204:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}
}
    5206:	c9 01       	movw	r24, r18
    5208:	08 95       	ret

0000520a <xio_getc>:
 * xio_getc() - common entry point for getc
 */

int xio_getc(const uint8_t dev)
{
	if (dev < XIO_DEV_COUNT) {
    520a:	88 30       	cpi	r24, 0x08	; 8
    520c:	18 f0       	brcs	.+6      	; 0x5214 <xio_getc+0xa>
    520e:	27 e0       	ldi	r18, 0x07	; 7
    5210:	30 e0       	ldi	r19, 0x00	; 0
    5212:	14 c0       	rjmp	.+40     	; 0x523c <xio_getc+0x32>
		return ds[dev].x_getc(ds[dev].fdev);
    5214:	28 2f       	mov	r18, r24
    5216:	30 e0       	ldi	r19, 0x00	; 0
    5218:	87 e1       	ldi	r24, 0x17	; 23
    521a:	90 e0       	ldi	r25, 0x00	; 0
    521c:	28 9f       	mul	r18, r24
    521e:	f0 01       	movw	r30, r0
    5220:	29 9f       	mul	r18, r25
    5222:	f0 0d       	add	r31, r0
    5224:	38 9f       	mul	r19, r24
    5226:	f0 0d       	add	r31, r0
    5228:	11 24       	eor	r1, r1
    522a:	ef 53       	subi	r30, 0x3F	; 63
    522c:	fc 4d       	sbci	r31, 0xDC	; 220
    522e:	25 85       	ldd	r18, Z+13	; 0x0d
    5230:	36 85       	ldd	r19, Z+14	; 0x0e
    5232:	83 89       	ldd	r24, Z+19	; 0x13
    5234:	94 89       	ldd	r25, Z+20	; 0x14
    5236:	f9 01       	movw	r30, r18
    5238:	19 95       	eicall
    523a:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}		
}
    523c:	c9 01       	movw	r24, r18
    523e:	08 95       	ret

00005240 <xio_readln>:
 *	size	size of text buffer in 1 offset form: e.g. use 80 instead of 79
 */

int xio_readln(const uint8_t dev, char *buf, const uint8_t size)
{
	if (dev < XIO_DEV_COUNT) {
    5240:	88 30       	cpi	r24, 0x08	; 8
    5242:	18 f0       	brcs	.+6      	; 0x524a <xio_readln+0xa>
    5244:	27 e0       	ldi	r18, 0x07	; 7
    5246:	30 e0       	ldi	r19, 0x00	; 0
    5248:	14 c0       	rjmp	.+40     	; 0x5272 <xio_readln+0x32>
		return ds[dev].x_readln(buf, size);
    524a:	28 2f       	mov	r18, r24
    524c:	30 e0       	ldi	r19, 0x00	; 0
    524e:	87 e1       	ldi	r24, 0x17	; 23
    5250:	90 e0       	ldi	r25, 0x00	; 0
    5252:	28 9f       	mul	r18, r24
    5254:	f0 01       	movw	r30, r0
    5256:	29 9f       	mul	r18, r25
    5258:	f0 0d       	add	r31, r0
    525a:	38 9f       	mul	r19, r24
    525c:	f0 0d       	add	r31, r0
    525e:	11 24       	eor	r1, r1
    5260:	ef 53       	subi	r30, 0x3F	; 63
    5262:	fc 4d       	sbci	r31, 0xDC	; 220
    5264:	07 84       	ldd	r0, Z+15	; 0x0f
    5266:	f0 89       	ldd	r31, Z+16	; 0x10
    5268:	e0 2d       	mov	r30, r0
    526a:	cb 01       	movw	r24, r22
    526c:	64 2f       	mov	r22, r20
    526e:	19 95       	eicall
    5270:	9c 01       	movw	r18, r24
	} else {
		return (XIO_NO_SUCH_DEVICE);
	}		
}
    5272:	c9 01       	movw	r24, r18
    5274:	08 95       	ret

00005276 <xio_init_dev>:
	int (*x_setflags)(const uint16_t control),// set device control flags
	int (*x_putc)(char, struct __file *),		// write char (stdio compatible)
	int (*x_getc)(struct __file *),			// read char (stdio compatible)
	int (*x_readln)(char *buf, uint8_t size)	// specialized line reader
	) 
{
    5276:	df 92       	push	r13
    5278:	ef 92       	push	r14
    527a:	ff 92       	push	r15
    527c:	0f 93       	push	r16
    527e:	1f 93       	push	r17
    5280:	cf 93       	push	r28
    5282:	df 93       	push	r29
	// clear device struct
	memset (&ds[dev], 0, sizeof(struct xioDEVICE));	
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	e7 e1       	ldi	r30, 0x17	; 23
    5288:	f0 e0       	ldi	r31, 0x00	; 0
    528a:	8e 9f       	mul	r24, r30
    528c:	d0 01       	movw	r26, r0
    528e:	8f 9f       	mul	r24, r31
    5290:	b0 0d       	add	r27, r0
    5292:	9e 9f       	mul	r25, r30
    5294:	b0 0d       	add	r27, r0
    5296:	11 24       	eor	r1, r1
    5298:	af 53       	subi	r26, 0x3F	; 63
    529a:	bc 4d       	sbci	r27, 0xDC	; 220
    529c:	0f 2e       	mov	r0, r31
    529e:	f7 e1       	ldi	r31, 0x17	; 23
    52a0:	df 2e       	mov	r13, r31
    52a2:	f0 2d       	mov	r31, r0
    52a4:	ed 01       	movw	r28, r26
    52a6:	19 92       	st	Y+, r1
    52a8:	da 94       	dec	r13
    52aa:	e9 f7       	brne	.-6      	; 0x52a6 <xio_init_dev+0x30>

	// bind functions
	ds[dev].x_open = x_open;	
    52ac:	17 96       	adiw	r26, 0x07	; 7
    52ae:	6d 93       	st	X+, r22
    52b0:	7c 93       	st	X, r23
    52b2:	18 97       	sbiw	r26, 0x08	; 8
	ds[dev].x_setflags = x_setflags;
    52b4:	19 96       	adiw	r26, 0x09	; 9
    52b6:	4d 93       	st	X+, r20
    52b8:	5c 93       	st	X, r21
    52ba:	1a 97       	sbiw	r26, 0x0a	; 10
	ds[dev].x_putc = x_putc;
    52bc:	1b 96       	adiw	r26, 0x0b	; 11
    52be:	2d 93       	st	X+, r18
    52c0:	3c 93       	st	X, r19
    52c2:	1c 97       	sbiw	r26, 0x0c	; 12
	ds[dev].x_getc = x_getc;
    52c4:	1d 96       	adiw	r26, 0x0d	; 13
    52c6:	0d 93       	st	X+, r16
    52c8:	1c 93       	st	X, r17
    52ca:	1e 97       	sbiw	r26, 0x0e	; 14
	ds[dev].x_readln = x_readln;
    52cc:	1f 96       	adiw	r26, 0x0f	; 15
    52ce:	ed 92       	st	X+, r14
    52d0:	fc 92       	st	X, r15
    52d2:	50 97       	sbiw	r26, 0x10	; 16

	// bind and setup stdio struct
	ds[dev].fdev = &ss[dev];					
    52d4:	88 0f       	add	r24, r24
    52d6:	99 1f       	adc	r25, r25
    52d8:	fc 01       	movw	r30, r24
    52da:	43 e0       	ldi	r20, 0x03	; 3
    52dc:	ee 0f       	add	r30, r30
    52de:	ff 1f       	adc	r31, r31
    52e0:	4a 95       	dec	r20
    52e2:	e1 f7       	brne	.-8      	; 0x52dc <xio_init_dev+0x66>
    52e4:	e8 1b       	sub	r30, r24
    52e6:	f9 0b       	sbc	r31, r25
    52e8:	e7 58       	subi	r30, 0x87	; 135
    52ea:	fb 4d       	sbci	r31, 0xDB	; 219
    52ec:	53 96       	adiw	r26, 0x13	; 19
    52ee:	ed 93       	st	X+, r30
    52f0:	fc 93       	st	X, r31
    52f2:	54 97       	sbiw	r26, 0x14	; 20
	fdev_setup_stream(ds[dev].fdev, x_putc, x_getc, _FDEV_SETUP_RW);
    52f4:	20 87       	std	Z+8, r18	; 0x08
    52f6:	31 87       	std	Z+9, r19	; 0x09
    52f8:	02 87       	std	Z+10, r16	; 0x0a
    52fa:	13 87       	std	Z+11, r17	; 0x0b
    52fc:	83 e0       	ldi	r24, 0x03	; 3
    52fe:	83 83       	std	Z+3, r24	; 0x03
    5300:	14 86       	std	Z+12, r1	; 0x0c
    5302:	15 86       	std	Z+13, r1	; 0x0d
}
    5304:	df 91       	pop	r29
    5306:	cf 91       	pop	r28
    5308:	1f 91       	pop	r17
    530a:	0f 91       	pop	r16
    530c:	ff 90       	pop	r15
    530e:	ef 90       	pop	r14
    5310:	df 90       	pop	r13
    5312:	08 95       	ret

00005314 <xio_init>:
/*
 *	xio_init() - initialize all active XIO devices
 */

void xio_init(void)
{	
    5314:	ef 92       	push	r14
    5316:	ff 92       	push	r15
    5318:	0f 93       	push	r16
    531a:	1f 93       	push	r17
	xio_init_rs485();
    531c:	0e 94 45 35 	call	0x6a8a	; 0x6a8a <xio_init_rs485>
	xio_init_usb();
    5320:	0e 94 33 34 	call	0x6866	; 0x6866 <xio_init_usb>

	// Program memory file device setup
	xio_init_dev(XIO_DEV_PGM, xio_open_pgm, xio_setflags_pgm, xio_putc_pgm, xio_getc_pgm, xio_readln_pgm);
    5324:	83 e0       	ldi	r24, 0x03	; 3
    5326:	67 e9       	ldi	r22, 0x97	; 151
    5328:	75 e3       	ldi	r23, 0x35	; 53
    532a:	45 e2       	ldi	r20, 0x25	; 37
    532c:	56 e3       	ldi	r21, 0x36	; 54
    532e:	2f ea       	ldi	r18, 0xAF	; 175
    5330:	35 e3       	ldi	r19, 0x35	; 53
    5332:	09 ed       	ldi	r16, 0xD9	; 217
    5334:	15 e3       	ldi	r17, 0x35	; 53
    5336:	92 eb       	ldi	r25, 0xB2	; 178
    5338:	e9 2e       	mov	r14, r25
    533a:	95 e3       	ldi	r25, 0x35	; 53
    533c:	f9 2e       	mov	r15, r25
    533e:	0e 94 3b 29 	call	0x5276	; 0x5276 <xio_init_dev>
	xio_init_pgm(XIO_DEV_PGM, XIO_DEV_PGM_OFFSET, PGM_INIT_bm);
    5342:	83 e0       	ldi	r24, 0x03	; 3
    5344:	60 e0       	ldi	r22, 0x00	; 0
    5346:	40 e5       	ldi	r20, 0x50	; 80
    5348:	55 e1       	ldi	r21, 0x15	; 21
    534a:	0e 94 2c 36 	call	0x6c58	; 0x6c58 <xio_init_pgm>
 * xio_set_std___() - functions to set standard IO devices from device numbers
 */

void xio_set_stdin(const uint8_t dev)
{
	stdin = ds[dev].fdev;
    534e:	80 91 eb 23 	lds	r24, 0x23EB
    5352:	90 91 ec 23 	lds	r25, 0x23EC
    5356:	80 93 00 25 	sts	0x2500, r24
    535a:	90 93 01 25 	sts	0x2501, r25
}

void xio_set_stdout(const uint8_t dev)
{
	stdout = ds[dev].fdev;
    535e:	80 93 02 25 	sts	0x2502, r24
    5362:	90 93 03 25 	sts	0x2503, r25
}

void xio_set_stderr(const uint8_t dev)
{
	stderr = ds[dev].fdev;
    5366:	80 93 04 25 	sts	0x2504, r24
    536a:	90 93 05 25 	sts	0x2505, r25
	xio_set_stdin(XIO_DEV_USB);
	xio_set_stdout(XIO_DEV_USB);
	xio_set_stderr(XIO_DEV_USB);

	// tell the world we are ready!
	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    536e:	0f 92       	push	r0
    5370:	0f 92       	push	r0
    5372:	88 e2       	ldi	r24, 0x28	; 40
    5374:	97 e0       	ldi	r25, 0x07	; 7
    5376:	ed b7       	in	r30, 0x3d	; 61
    5378:	fe b7       	in	r31, 0x3e	; 62
    537a:	81 83       	std	Z+1, r24	; 0x01
    537c:	92 83       	std	Z+2, r25	; 0x02
    537e:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
    5382:	0f 90       	pop	r0
    5384:	0f 90       	pop	r0
}
    5386:	1f 91       	pop	r17
    5388:	0f 91       	pop	r16
    538a:	ff 90       	pop	r15
    538c:	ef 90       	pop	r14
    538e:	08 95       	ret

00005390 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    5390:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5392:	e0 ec       	ldi	r30, 0xC0	; 192
    5394:	f1 e0       	ldi	r31, 0x01	; 1
    5396:	80 91 cf 01 	lds	r24, 0x01CF
    539a:	87 fd       	sbrc	r24, 7
    539c:	fa cf       	rjmp	.-12     	; 0x5392 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    539e:	26 2f       	mov	r18, r22
    53a0:	30 e0       	ldi	r19, 0x00	; 0
    53a2:	2f 71       	andi	r18, 0x1F	; 31
    53a4:	30 70       	andi	r19, 0x00	; 0
    53a6:	89 2f       	mov	r24, r25
    53a8:	90 e0       	ldi	r25, 0x00	; 0
    53aa:	45 e0       	ldi	r20, 0x05	; 5
    53ac:	88 0f       	add	r24, r24
    53ae:	99 1f       	adc	r25, r25
    53b0:	4a 95       	dec	r20
    53b2:	e1 f7       	brne	.-8      	; 0x53ac <EEPROM_ReadByte+0x1c>
    53b4:	28 2b       	or	r18, r24
    53b6:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    53b8:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    53bc:	83 2f       	mov	r24, r19
    53be:	8f 71       	andi	r24, 0x1F	; 31
    53c0:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    53c2:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    53c4:	86 e0       	ldi	r24, 0x06	; 6
    53c6:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    53c8:	ef 93       	push	r30
    53ca:	ff 93       	push	r31
    53cc:	0f 93       	push	r16
    53ce:	2f 93       	push	r18
    53d0:	eb ec       	ldi	r30, 0xCB	; 203
    53d2:	f1 e0       	ldi	r31, 0x01	; 1
    53d4:	08 ed       	ldi	r16, 0xD8	; 216
    53d6:	21 e0       	ldi	r18, 0x01	; 1
    53d8:	04 bf       	out	0x34, r16	; 52
    53da:	20 83       	st	Z, r18
    53dc:	2f 91       	pop	r18
    53de:	0f 91       	pop	r16
    53e0:	ff 91       	pop	r31
    53e2:	ef 91       	pop	r30

	return NVM.DATA0;
    53e4:	80 91 c4 01 	lds	r24, 0x01C4
}
    53e8:	08 95       	ret

000053ea <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    53ea:	68 2f       	mov	r22, r24
    53ec:	6f 71       	andi	r22, 0x1F	; 31
    53ee:	55 e0       	ldi	r21, 0x05	; 5
    53f0:	96 95       	lsr	r25
    53f2:	87 95       	ror	r24
    53f4:	5a 95       	dec	r21
    53f6:	e1 f7       	brne	.-8      	; 0x53f0 <eeprom_get_char+0x6>
    53f8:	0e 94 c8 29 	call	0x5390	; 0x5390 <EEPROM_ReadByte>
}
    53fc:	08 95       	ret

000053fe <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    53fe:	8f 92       	push	r8
    5400:	9f 92       	push	r9
    5402:	af 92       	push	r10
    5404:	bf 92       	push	r11
    5406:	cf 92       	push	r12
    5408:	df 92       	push	r13
    540a:	ff 92       	push	r15
    540c:	0f 93       	push	r16
    540e:	1f 93       	push	r17
    5410:	cf 93       	push	r28
    5412:	df 93       	push	r29
    5414:	4c 01       	movw	r8, r24
    5416:	5b 01       	movw	r10, r22
    5418:	6a 01       	movw	r12, r20
    541a:	8b 01       	movw	r16, r22
    541c:	ea 01       	movw	r28, r20
    541e:	ff 24       	eor	r15, r15
    5420:	18 c0       	rjmp	.+48     	; 0x5452 <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    5422:	c8 01       	movw	r24, r16
    5424:	0e 94 f5 29 	call	0x53ea	; 0x53ea <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    5428:	ff 20       	and	r15, r15
    542a:	19 f0       	breq	.+6      	; 0x5432 <memcpy_from_eeprom_with_checksum+0x34>
    542c:	21 e0       	ldi	r18, 0x01	; 1
    542e:	30 e0       	ldi	r19, 0x00	; 0
    5430:	08 c0       	rjmp	.+16     	; 0x5442 <memcpy_from_eeprom_with_checksum+0x44>
    5432:	2f 2d       	mov	r18, r15
    5434:	33 27       	eor	r19, r19
    5436:	27 fd       	sbrc	r18, 7
    5438:	30 95       	com	r19
    543a:	22 27       	eor	r18, r18
    543c:	33 0f       	add	r19, r19
    543e:	22 1f       	adc	r18, r18
    5440:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    5442:	0f 5f       	subi	r16, 0xFF	; 255
    5444:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    5446:	f8 2e       	mov	r15, r24
    5448:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    544a:	f4 01       	movw	r30, r8
    544c:	81 93       	st	Z+, r24
    544e:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    5450:	21 97       	sbiw	r28, 0x01	; 1
    5452:	20 97       	sbiw	r28, 0x00	; 0
    5454:	31 f7       	brne	.-52     	; 0x5422 <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    5456:	c6 01       	movw	r24, r12
    5458:	8a 0d       	add	r24, r10
    545a:	9b 1d       	adc	r25, r11
    545c:	0e 94 f5 29 	call	0x53ea	; 0x53ea <eeprom_get_char>
    5460:	20 e0       	ldi	r18, 0x00	; 0
    5462:	30 e0       	ldi	r19, 0x00	; 0
    5464:	f8 16       	cp	r15, r24
    5466:	11 f4       	brne	.+4      	; 0x546c <memcpy_from_eeprom_with_checksum+0x6e>
    5468:	21 e0       	ldi	r18, 0x01	; 1
    546a:	30 e0       	ldi	r19, 0x00	; 0
}
    546c:	c9 01       	movw	r24, r18
    546e:	df 91       	pop	r29
    5470:	cf 91       	pop	r28
    5472:	1f 91       	pop	r17
    5474:	0f 91       	pop	r16
    5476:	ff 90       	pop	r15
    5478:	df 90       	pop	r13
    547a:	cf 90       	pop	r12
    547c:	bf 90       	pop	r11
    547e:	af 90       	pop	r10
    5480:	9f 90       	pop	r9
    5482:	8f 90       	pop	r8
    5484:	08 95       	ret

00005486 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5486:	80 91 cf 01 	lds	r24, 0x01CF
    548a:	87 fd       	sbrc	r24, 7
    548c:	fc cf       	rjmp	.-8      	; 0x5486 <EEPROM_WaitForNVM>
}
    548e:	08 95       	ret

00005490 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5490:	80 91 cf 01 	lds	r24, 0x01CF
    5494:	87 fd       	sbrc	r24, 7
    5496:	fc cf       	rjmp	.-8      	; 0x5490 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    5498:	80 91 cf 01 	lds	r24, 0x01CF
    549c:	81 ff       	sbrs	r24, 1
    549e:	12 c0       	rjmp	.+36     	; 0x54c4 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    54a0:	86 e3       	ldi	r24, 0x36	; 54
    54a2:	e0 ec       	ldi	r30, 0xC0	; 192
    54a4:	f1 e0       	ldi	r31, 0x01	; 1
    54a6:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    54a8:	ef 93       	push	r30
    54aa:	ff 93       	push	r31
    54ac:	0f 93       	push	r16
    54ae:	2f 93       	push	r18
    54b0:	eb ec       	ldi	r30, 0xCB	; 203
    54b2:	f1 e0       	ldi	r31, 0x01	; 1
    54b4:	08 ed       	ldi	r16, 0xD8	; 216
    54b6:	21 e0       	ldi	r18, 0x01	; 1
    54b8:	04 bf       	out	0x34, r16	; 52
    54ba:	20 83       	st	Z, r18
    54bc:	2f 91       	pop	r18
    54be:	0f 91       	pop	r16
    54c0:	ff 91       	pop	r31
    54c2:	ef 91       	pop	r30
    54c4:	08 95       	ret

000054c6 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    54c6:	df 92       	push	r13
    54c8:	ef 92       	push	r14
    54ca:	ff 92       	push	r15
    54cc:	0f 93       	push	r16
    54ce:	1f 93       	push	r17
    54d0:	e8 2e       	mov	r14, r24
    54d2:	06 2f       	mov	r16, r22
    54d4:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    54d6:	0e 94 48 2a 	call	0x5490	; 0x5490 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    54da:	e0 ec       	ldi	r30, 0xC0	; 192
    54dc:	f1 e0       	ldi	r31, 0x01	; 1
    54de:	83 e3       	ldi	r24, 0x33	; 51
    54e0:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    54e2:	10 e0       	ldi	r17, 0x00	; 0
    54e4:	0f 71       	andi	r16, 0x1F	; 31
    54e6:	10 70       	andi	r17, 0x00	; 0
    54e8:	ff 24       	eor	r15, r15
    54ea:	75 e0       	ldi	r23, 0x05	; 5
    54ec:	ee 0c       	add	r14, r14
    54ee:	ff 1c       	adc	r15, r15
    54f0:	7a 95       	dec	r23
    54f2:	e1 f7       	brne	.-8      	; 0x54ec <EEPROM_WriteByte+0x26>
    54f4:	0e 29       	or	r16, r14
    54f6:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    54f8:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    54fa:	81 2f       	mov	r24, r17
    54fc:	8f 71       	andi	r24, 0x1F	; 31
    54fe:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5500:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5502:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5504:	85 e3       	ldi	r24, 0x35	; 53
    5506:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5508:	ef 93       	push	r30
    550a:	ff 93       	push	r31
    550c:	0f 93       	push	r16
    550e:	2f 93       	push	r18
    5510:	eb ec       	ldi	r30, 0xCB	; 203
    5512:	f1 e0       	ldi	r31, 0x01	; 1
    5514:	08 ed       	ldi	r16, 0xD8	; 216
    5516:	21 e0       	ldi	r18, 0x01	; 1
    5518:	04 bf       	out	0x34, r16	; 52
    551a:	20 83       	st	Z, r18
    551c:	2f 91       	pop	r18
    551e:	0f 91       	pop	r16
    5520:	ff 91       	pop	r31
    5522:	ef 91       	pop	r30
}
    5524:	1f 91       	pop	r17
    5526:	0f 91       	pop	r16
    5528:	ff 90       	pop	r15
    552a:	ef 90       	pop	r14
    552c:	df 90       	pop	r13
    552e:	08 95       	ret

00005530 <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    5530:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    5532:	68 2f       	mov	r22, r24
    5534:	6f 71       	andi	r22, 0x1F	; 31
    5536:	e5 e0       	ldi	r30, 0x05	; 5
    5538:	96 95       	lsr	r25
    553a:	87 95       	ror	r24
    553c:	ea 95       	dec	r30
    553e:	e1 f7       	brne	.-8      	; 0x5538 <eeprom_put_char+0x8>
    5540:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <EEPROM_WriteByte>
}
    5544:	08 95       	ret

00005546 <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    5546:	8f 92       	push	r8
    5548:	9f 92       	push	r9
    554a:	af 92       	push	r10
    554c:	bf 92       	push	r11
    554e:	cf 92       	push	r12
    5550:	df 92       	push	r13
    5552:	ef 92       	push	r14
    5554:	ff 92       	push	r15
    5556:	0f 93       	push	r16
    5558:	df 93       	push	r29
    555a:	cf 93       	push	r28
    555c:	0f 92       	push	r0
    555e:	0f 92       	push	r0
    5560:	cd b7       	in	r28, 0x3d	; 61
    5562:	de b7       	in	r29, 0x3e	; 62
    5564:	5c 01       	movw	r10, r24
    5566:	6b 01       	movw	r12, r22
    5568:	7a 01       	movw	r14, r20
    556a:	4a 01       	movw	r8, r20
    556c:	00 e0       	ldi	r16, 0x00	; 0
    556e:	1e c0       	rjmp	.+60     	; 0x55ac <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    5570:	00 23       	and	r16, r16
    5572:	19 f0       	breq	.+6      	; 0x557a <memcpy_to_eeprom_with_checksum+0x34>
    5574:	21 e0       	ldi	r18, 0x01	; 1
    5576:	30 e0       	ldi	r19, 0x00	; 0
    5578:	08 c0       	rjmp	.+16     	; 0x558a <memcpy_to_eeprom_with_checksum+0x44>
    557a:	20 2f       	mov	r18, r16
    557c:	33 27       	eor	r19, r19
    557e:	27 fd       	sbrc	r18, 7
    5580:	30 95       	com	r19
    5582:	22 27       	eor	r18, r18
    5584:	33 0f       	add	r19, r19
    5586:	22 1f       	adc	r18, r18
    5588:	33 27       	eor	r19, r19
    checksum += *source;
    558a:	f6 01       	movw	r30, r12
    558c:	61 91       	ld	r22, Z+
    558e:	6f 01       	movw	r12, r30
    5590:	06 2f       	mov	r16, r22
    5592:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    5594:	9c 01       	movw	r18, r24
    5596:	2f 5f       	subi	r18, 0xFF	; 255
    5598:	3f 4f       	sbci	r19, 0xFF	; 255
    559a:	29 83       	std	Y+1, r18	; 0x01
    559c:	3a 83       	std	Y+2, r19	; 0x02
    559e:	0e 94 98 2a 	call	0x5530	; 0x5530 <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    55a2:	08 94       	sec
    55a4:	81 08       	sbc	r8, r1
    55a6:	91 08       	sbc	r9, r1
    55a8:	89 81       	ldd	r24, Y+1	; 0x01
    55aa:	9a 81       	ldd	r25, Y+2	; 0x02
    55ac:	81 14       	cp	r8, r1
    55ae:	91 04       	cpc	r9, r1
    55b0:	f9 f6       	brne	.-66     	; 0x5570 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    55b2:	c7 01       	movw	r24, r14
    55b4:	8a 0d       	add	r24, r10
    55b6:	9b 1d       	adc	r25, r11
    55b8:	60 2f       	mov	r22, r16
    55ba:	0e 94 98 2a 	call	0x5530	; 0x5530 <eeprom_put_char>
}
    55be:	0f 90       	pop	r0
    55c0:	0f 90       	pop	r0
    55c2:	cf 91       	pop	r28
    55c4:	df 91       	pop	r29
    55c6:	0f 91       	pop	r16
    55c8:	ff 90       	pop	r15
    55ca:	ef 90       	pop	r14
    55cc:	df 90       	pop	r13
    55ce:	cf 90       	pop	r12
    55d0:	bf 90       	pop	r11
    55d2:	af 90       	pop	r10
    55d4:	9f 90       	pop	r9
    55d6:	8f 90       	pop	r8
    55d8:	08 95       	ret

000055da <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    55da:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    55dc:	e0 ec       	ldi	r30, 0xC0	; 192
    55de:	f1 e0       	ldi	r31, 0x01	; 1
    55e0:	80 91 cf 01 	lds	r24, 0x01CF
    55e4:	87 fd       	sbrc	r24, 7
    55e6:	fa cf       	rjmp	.-12     	; 0x55dc <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    55e8:	83 e3       	ldi	r24, 0x33	; 51
    55ea:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    55ec:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    55f0:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    55f2:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    55f4:	64 83       	std	Z+4, r22	; 0x04
}
    55f6:	08 95       	ret

000055f8 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    55f8:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    55fa:	e0 ec       	ldi	r30, 0xC0	; 192
    55fc:	f1 e0       	ldi	r31, 0x01	; 1
    55fe:	80 91 cf 01 	lds	r24, 0x01CF
    5602:	87 fd       	sbrc	r24, 7
    5604:	fa cf       	rjmp	.-12     	; 0x55fa <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5606:	83 e3       	ldi	r24, 0x33	; 51
    5608:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    560a:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    560c:	12 82       	std	Z+2, r1	; 0x02
    560e:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    5610:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    5614:	8d 91       	ld	r24, X+
    5616:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    5618:	9f 5f       	subi	r25, 0xFF	; 255
    561a:	90 32       	cpi	r25, 0x20	; 32
    561c:	c9 f7       	brne	.-14     	; 0x5610 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    561e:	08 95       	ret

00005620 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    5620:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5622:	e0 ec       	ldi	r30, 0xC0	; 192
    5624:	f1 e0       	ldi	r31, 0x01	; 1
    5626:	80 91 cf 01 	lds	r24, 0x01CF
    562a:	87 fd       	sbrc	r24, 7
    562c:	fa cf       	rjmp	.-12     	; 0x5622 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    562e:	89 2f       	mov	r24, r25
    5630:	90 e0       	ldi	r25, 0x00	; 0
    5632:	a5 e0       	ldi	r26, 0x05	; 5
    5634:	88 0f       	add	r24, r24
    5636:	99 1f       	adc	r25, r25
    5638:	aa 95       	dec	r26
    563a:	e1 f7       	brne	.-8      	; 0x5634 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    563c:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5640:	89 2f       	mov	r24, r25
    5642:	8f 71       	andi	r24, 0x1F	; 31
    5644:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5646:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5648:	85 e3       	ldi	r24, 0x35	; 53
    564a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    564c:	ef 93       	push	r30
    564e:	ff 93       	push	r31
    5650:	0f 93       	push	r16
    5652:	2f 93       	push	r18
    5654:	eb ec       	ldi	r30, 0xCB	; 203
    5656:	f1 e0       	ldi	r31, 0x01	; 1
    5658:	08 ed       	ldi	r16, 0xD8	; 216
    565a:	21 e0       	ldi	r18, 0x01	; 1
    565c:	04 bf       	out	0x34, r16	; 52
    565e:	20 83       	st	Z, r18
    5660:	2f 91       	pop	r18
    5662:	0f 91       	pop	r16
    5664:	ff 91       	pop	r31
    5666:	ef 91       	pop	r30
}
    5668:	08 95       	ret

0000566a <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    566a:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    566c:	e0 ec       	ldi	r30, 0xC0	; 192
    566e:	f1 e0       	ldi	r31, 0x01	; 1
    5670:	80 91 cf 01 	lds	r24, 0x01CF
    5674:	87 fd       	sbrc	r24, 7
    5676:	fa cf       	rjmp	.-12     	; 0x566c <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5678:	89 2f       	mov	r24, r25
    567a:	90 e0       	ldi	r25, 0x00	; 0
    567c:	b5 e0       	ldi	r27, 0x05	; 5
    567e:	88 0f       	add	r24, r24
    5680:	99 1f       	adc	r25, r25
    5682:	ba 95       	dec	r27
    5684:	e1 f7       	brne	.-8      	; 0x567e <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5686:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    568a:	89 2f       	mov	r24, r25
    568c:	8f 71       	andi	r24, 0x1F	; 31
    568e:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5690:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    5692:	82 e3       	ldi	r24, 0x32	; 50
    5694:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5696:	ef 93       	push	r30
    5698:	ff 93       	push	r31
    569a:	0f 93       	push	r16
    569c:	2f 93       	push	r18
    569e:	eb ec       	ldi	r30, 0xCB	; 203
    56a0:	f1 e0       	ldi	r31, 0x01	; 1
    56a2:	08 ed       	ldi	r16, 0xD8	; 216
    56a4:	21 e0       	ldi	r18, 0x01	; 1
    56a6:	04 bf       	out	0x34, r16	; 52
    56a8:	20 83       	st	Z, r18
    56aa:	2f 91       	pop	r18
    56ac:	0f 91       	pop	r16
    56ae:	ff 91       	pop	r31
    56b0:	ef 91       	pop	r30
}
    56b2:	08 95       	ret

000056b4 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    56b4:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    56b6:	e0 ec       	ldi	r30, 0xC0	; 192
    56b8:	f1 e0       	ldi	r31, 0x01	; 1
    56ba:	80 91 cf 01 	lds	r24, 0x01CF
    56be:	87 fd       	sbrc	r24, 7
    56c0:	fa cf       	rjmp	.-12     	; 0x56b6 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    56c2:	89 2f       	mov	r24, r25
    56c4:	90 e0       	ldi	r25, 0x00	; 0
    56c6:	25 e0       	ldi	r18, 0x05	; 5
    56c8:	88 0f       	add	r24, r24
    56ca:	99 1f       	adc	r25, r25
    56cc:	2a 95       	dec	r18
    56ce:	e1 f7       	brne	.-8      	; 0x56c8 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    56d0:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    56d4:	89 2f       	mov	r24, r25
    56d6:	8f 71       	andi	r24, 0x1F	; 31
    56d8:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    56da:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    56dc:	84 e3       	ldi	r24, 0x34	; 52
    56de:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    56e0:	ef 93       	push	r30
    56e2:	ff 93       	push	r31
    56e4:	0f 93       	push	r16
    56e6:	2f 93       	push	r18
    56e8:	eb ec       	ldi	r30, 0xCB	; 203
    56ea:	f1 e0       	ldi	r31, 0x01	; 1
    56ec:	08 ed       	ldi	r16, 0xD8	; 216
    56ee:	21 e0       	ldi	r18, 0x01	; 1
    56f0:	04 bf       	out	0x34, r16	; 52
    56f2:	20 83       	st	Z, r18
    56f4:	2f 91       	pop	r18
    56f6:	0f 91       	pop	r16
    56f8:	ff 91       	pop	r31
    56fa:	ef 91       	pop	r30
}
    56fc:	08 95       	ret

000056fe <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    56fe:	80 91 cf 01 	lds	r24, 0x01CF
    5702:	87 fd       	sbrc	r24, 7
    5704:	fc cf       	rjmp	.-8      	; 0x56fe <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    5706:	80 e3       	ldi	r24, 0x30	; 48
    5708:	e0 ec       	ldi	r30, 0xC0	; 192
    570a:	f1 e0       	ldi	r31, 0x01	; 1
    570c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    570e:	ef 93       	push	r30
    5710:	ff 93       	push	r31
    5712:	0f 93       	push	r16
    5714:	2f 93       	push	r18
    5716:	eb ec       	ldi	r30, 0xCB	; 203
    5718:	f1 e0       	ldi	r31, 0x01	; 1
    571a:	08 ed       	ldi	r16, 0xD8	; 216
    571c:	21 e0       	ldi	r18, 0x01	; 1
    571e:	04 bf       	out	0x34, r16	; 52
    5720:	20 83       	st	Z, r18
    5722:	2f 91       	pop	r18
    5724:	0f 91       	pop	r16
    5726:	ff 91       	pop	r31
    5728:	ef 91       	pop	r30
}
    572a:	08 95       	ret

0000572c <tg_reset_source>:
 * tg_reset_source()  Reset source to default input device
 */

void tg_reset_source()
{
	_tg_set_source(tg.default_src);
    572c:	80 91 8e 21 	lds	r24, 0x218E
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    5730:	80 93 8d 21 	sts	0x218D, r24
	if (tg.src == XIO_DEV_PGM) {
    5734:	83 30       	cpi	r24, 0x03	; 3
    5736:	21 f4       	brne	.+8      	; 0x5740 <tg_reset_source+0x14>
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    5738:	80 91 8a 21 	lds	r24, 0x218A
    573c:	8e 7f       	andi	r24, 0xFE	; 254
    573e:	03 c0       	rjmp	.+6      	; 0x5746 <tg_reset_source+0x1a>
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    5740:	80 91 8a 21 	lds	r24, 0x218A
    5744:	81 60       	ori	r24, 0x01	; 1
    5746:	80 93 8a 21 	sts	0x218A, r24
    574a:	08 95       	ret

0000574c <tg_print_status>:
	tgStatusMsg20
};

void tg_print_status(const uint8_t status_code, const char *textbuf)
{
	switch (status_code) {		// don't send messages for these status codes
    574c:	84 30       	cpi	r24, 0x04	; 4
    574e:	28 f4       	brcc	.+10     	; 0x575a <tg_print_status+0xe>
    5750:	82 30       	cpi	r24, 0x02	; 2
    5752:	28 f5       	brcc	.+74     	; 0x579e <tg_print_status+0x52>
    5754:	88 23       	and	r24, r24
    5756:	19 f1       	breq	.+70     	; 0x579e <tg_print_status+0x52>
    5758:	02 c0       	rjmp	.+4      	; 0x575e <tg_print_status+0x12>
    575a:	8b 30       	cpi	r24, 0x0B	; 11
    575c:	01 f1       	breq	.+64     	; 0x579e <tg_print_status+0x52>
		case TG_OK: return;
		case TG_EAGAIN: return;
		case TG_NOOP: return;
		case TG_QUIT: return;
	}
	printf_P(PSTR("%S: %s\n"),(PGM_P)pgm_read_word(&tgStatusStrings[status_code]), textbuf);
    575e:	e8 2f       	mov	r30, r24
    5760:	f0 e0       	ldi	r31, 0x00	; 0
    5762:	ee 0f       	add	r30, r30
    5764:	ff 1f       	adc	r31, r31
    5766:	e5 51       	subi	r30, 0x15	; 21
    5768:	f5 4e       	sbci	r31, 0xE5	; 229
    576a:	25 91       	lpm	r18, Z+
    576c:	34 91       	lpm	r19, Z+
    576e:	00 d0       	rcall	.+0      	; 0x5770 <tg_print_status+0x24>
    5770:	00 d0       	rcall	.+0      	; 0x5772 <tg_print_status+0x26>
    5772:	ed b7       	in	r30, 0x3d	; 61
    5774:	fe b7       	in	r31, 0x3e	; 62
    5776:	31 96       	adiw	r30, 0x01	; 1
    5778:	85 e1       	ldi	r24, 0x15	; 21
    577a:	9b e1       	ldi	r25, 0x1B	; 27
    577c:	ad b7       	in	r26, 0x3d	; 61
    577e:	be b7       	in	r27, 0x3e	; 62
    5780:	11 96       	adiw	r26, 0x01	; 1
    5782:	8d 93       	st	X+, r24
    5784:	9c 93       	st	X, r25
    5786:	12 97       	sbiw	r26, 0x02	; 2
    5788:	22 83       	std	Z+2, r18	; 0x02
    578a:	33 83       	std	Z+3, r19	; 0x03
    578c:	64 83       	std	Z+4, r22	; 0x04
    578e:	75 83       	std	Z+5, r23	; 0x05
    5790:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
    5794:	8d b7       	in	r24, 0x3d	; 61
    5796:	9e b7       	in	r25, 0x3e	; 62
    5798:	06 96       	adiw	r24, 0x06	; 6
    579a:	8d bf       	out	0x3d, r24	; 61
    579c:	9e bf       	out	0x3e, r25	; 62
    579e:	08 95       	ret

000057a0 <tg_init>:
 */

void tg_init() 
{
	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
    57a0:	81 e0       	ldi	r24, 0x01	; 1
    57a2:	80 93 8e 21 	sts	0x218E, r24
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    57a6:	ee e8       	ldi	r30, 0x8E	; 142
    57a8:	f1 e2       	ldi	r31, 0x21	; 33
    57aa:	80 93 8d 21 	sts	0x218D, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
	} else {
		tg.flags |= TG_FLAG_PROMPTS_bm;
    57ae:	34 97       	sbiw	r30, 0x04	; 4
    57b0:	80 81       	ld	r24, Z
    57b2:	81 60       	ori	r24, 0x01	; 1
    57b4:	80 83       	st	Z, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    57b6:	10 92 8c 21 	sts	0x218C, r1
{
	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
	_tg_set_source(tg.default_src);			// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode
	tg.state = TG_READY_UNPROMPTED;
    57ba:	10 92 89 21 	sts	0x2189, r1

	// version string
	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    57be:	00 d0       	rcall	.+0      	; 0x57c0 <tg_init+0x20>
    57c0:	0f 92       	push	r0
    57c2:	8a e4       	ldi	r24, 0x4A	; 74
    57c4:	9b e1       	ldi	r25, 0x1B	; 27
    57c6:	ed b7       	in	r30, 0x3d	; 61
    57c8:	fe b7       	in	r31, 0x3e	; 62
    57ca:	81 83       	std	Z+1, r24	; 0x01
    57cc:	92 83       	std	Z+2, r25	; 0x02
    57ce:	80 e4       	ldi	r24, 0x40	; 64
    57d0:	9b e1       	ldi	r25, 0x1B	; 27
    57d2:	83 83       	std	Z+3, r24	; 0x03
    57d4:	94 83       	std	Z+4, r25	; 0x04
    57d6:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
    57da:	0f 90       	pop	r0
    57dc:	0f 90       	pop	r0
    57de:	0f 90       	pop	r0
    57e0:	0f 90       	pop	r0
}
    57e2:	08 95       	ret

000057e4 <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    57e4:	cf 93       	push	r28
    57e6:	df 93       	push	r29
    57e8:	ec 01       	movw	r28, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    57ea:	80 91 8c 21 	lds	r24, 0x218C
    57ee:	88 23       	and	r24, r24
    57f0:	09 f0       	breq	.+2      	; 0x57f4 <tg_parser+0x10>
    57f2:	43 c0       	rjmp	.+134    	; 0x587a <tg_parser+0x96>
		switch (toupper(buf[0])) {
    57f4:	88 81       	ld	r24, Y
    57f6:	90 e0       	ldi	r25, 0x00	; 0
    57f8:	0e 94 76 48 	call	0x90ec	; 0x90ec <toupper>
    57fc:	86 34       	cpi	r24, 0x46	; 70
    57fe:	91 05       	cpc	r25, r1
    5800:	41 f1       	breq	.+80     	; 0x5852 <tg_parser+0x6e>
    5802:	87 34       	cpi	r24, 0x47	; 71
    5804:	91 05       	cpc	r25, r1
    5806:	84 f4       	brge	.+32     	; 0x5828 <tg_parser+0x44>
    5808:	83 34       	cpi	r24, 0x43	; 67
    580a:	91 05       	cpc	r25, r1
    580c:	e1 f0       	breq	.+56     	; 0x5846 <tg_parser+0x62>
    580e:	84 34       	cpi	r24, 0x44	; 68
    5810:	91 05       	cpc	r25, r1
    5812:	34 f4       	brge	.+12     	; 0x5820 <tg_parser+0x3c>
    5814:	88 32       	cpi	r24, 0x28	; 40
    5816:	91 05       	cpc	r25, r1
    5818:	a1 f0       	breq	.+40     	; 0x5842 <tg_parser+0x5e>
    581a:	cf 97       	sbiw	r24, 0x3f	; 63
    581c:	61 f5       	brne	.+88     	; 0x5876 <tg_parser+0x92>
    581e:	13 c0       	rjmp	.+38     	; 0x5846 <tg_parser+0x62>
    5820:	84 34       	cpi	r24, 0x44	; 68
    5822:	91 05       	cpc	r25, r1
    5824:	41 f5       	brne	.+80     	; 0x5876 <tg_parser+0x92>
    5826:	13 c0       	rjmp	.+38     	; 0x584e <tg_parser+0x6a>
    5828:	8f 34       	cpi	r24, 0x4F	; 79
    582a:	91 05       	cpc	r25, r1
    582c:	3c f4       	brge	.+14     	; 0x583c <tg_parser+0x58>
    582e:	8d 34       	cpi	r24, 0x4D	; 77
    5830:	91 05       	cpc	r25, r1
    5832:	3c f4       	brge	.+14     	; 0x5842 <tg_parser+0x5e>
    5834:	87 34       	cpi	r24, 0x47	; 71
    5836:	91 05       	cpc	r25, r1
    5838:	f1 f4       	brne	.+60     	; 0x5876 <tg_parser+0x92>
    583a:	03 c0       	rjmp	.+6      	; 0x5842 <tg_parser+0x5e>
    583c:	8c 35       	cpi	r24, 0x5C	; 92
    583e:	91 05       	cpc	r25, r1
    5840:	d1 f4       	brne	.+52     	; 0x5876 <tg_parser+0x92>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5842:	82 e0       	ldi	r24, 0x02	; 2
    5844:	01 c0       	rjmp	.+2      	; 0x5848 <tg_parser+0x64>
int tg_parser(char * buf)
{
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
		switch (toupper(buf[0])) {
			case 'G': case 'M': case 'N': case '(': case '\\': _tg_set_mode(TG_GCODE_MODE); break;
    5846:	81 e0       	ldi	r24, 0x01	; 1
    5848:	80 93 8c 21 	sts	0x218C, r24
    584c:	16 c0       	rjmp	.+44     	; 0x587a <tg_parser+0x96>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    584e:	83 e0       	ldi	r24, 0x03	; 3
    5850:	fb cf       	rjmp	.-10     	; 0x5848 <tg_parser+0x64>
//	xio_open_pgm(PGMFILE(&square_circle_test100));
//	xio_open_pgm(PGMFILE(&spiral_test50a));
//	xio_open_pgm(PGMFILE(&spiral_test5));
//	xio_open_pgm(PGMFILE(&dwell_test2));

	xio_open_pgm(PGMFILE(&contraptor_circle)); 	// contraptor circle test
    5852:	8c e8       	ldi	r24, 0x8C	; 140
    5854:	95 e1       	ldi	r25, 0x15	; 21
    5856:	0e 94 97 35 	call	0x6b2e	; 0x6b2e <xio_open_pgm>
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    585a:	83 e0       	ldi	r24, 0x03	; 3
    585c:	80 93 8d 21 	sts	0x218D, r24
	if (tg.src == XIO_DEV_PGM) {
		tg.flags &= ~TG_FLAG_PROMPTS_bm;
    5860:	80 91 8a 21 	lds	r24, 0x218A
    5864:	8e 7f       	andi	r24, 0xFE	; 254
    5866:	80 93 8a 21 	sts	0x218A, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    586a:	82 e0       	ldi	r24, 0x02	; 2
    586c:	80 93 8c 21 	sts	0x218C, r24
    5870:	20 e0       	ldi	r18, 0x00	; 0
    5872:	30 e0       	ldi	r19, 0x00	; 0
    5874:	1d c0       	rjmp	.+58     	; 0x58b0 <tg_parser+0xcc>
	if (tg.mode == TG_CONTROL_MODE) {
		switch (toupper(buf[0])) {
			case 'G': case 'M': case 'N': case '(': case '\\': _tg_set_mode(TG_GCODE_MODE); break;
			case 'C': case '?': _tg_set_mode(TG_CONFIG_MODE); break;
			case 'D': _tg_set_mode(TG_DIRECT_DRIVE_MODE); break;
			case 'F': return (_tg_test_file());
    5876:	10 92 8c 21 	sts	0x218C, r1
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    587a:	10 92 8b 21 	sts	0x218B, r1
	switch (tg.mode) {
    587e:	80 91 8c 21 	lds	r24, 0x218C
    5882:	82 30       	cpi	r24, 0x02	; 2
    5884:	41 f0       	breq	.+16     	; 0x5896 <tg_parser+0xb2>
    5886:	83 30       	cpi	r24, 0x03	; 3
    5888:	51 f0       	breq	.+20     	; 0x589e <tg_parser+0xba>
    588a:	81 30       	cpi	r24, 0x01	; 1
    588c:	69 f4       	brne	.+26     	; 0x58a8 <tg_parser+0xc4>
		case TG_CONFIG_MODE: tg.status = cfg_parse(buf); break;
    588e:	ce 01       	movw	r24, r28
    5890:	0e 94 8c 19 	call	0x3318	; 0x3318 <cfg_parse>
    5894:	07 c0       	rjmp	.+14     	; 0x58a4 <tg_parser+0xc0>
		case TG_GCODE_MODE: tg.status = gc_gcode_parser(buf); break;
    5896:	ce 01       	movw	r24, r28
    5898:	0e 94 dd 15 	call	0x2bba	; 0x2bba <gc_gcode_parser>
    589c:	03 c0       	rjmp	.+6      	; 0x58a4 <tg_parser+0xc0>
		case TG_DIRECT_DRIVE_MODE: tg.status = dd_parser(buf); break;
    589e:	ce 01       	movw	r24, r28
    58a0:	0e 94 c9 2c 	call	0x5992	; 0x5992 <dd_parser>
    58a4:	80 93 8b 21 	sts	0x218B, r24
	}
	return (tg.status);
    58a8:	80 91 8b 21 	lds	r24, 0x218B
    58ac:	28 2f       	mov	r18, r24
    58ae:	30 e0       	ldi	r19, 0x00	; 0
}
    58b0:	c9 01       	movw	r24, r18
    58b2:	df 91       	pop	r29
    58b4:	cf 91       	pop	r28
    58b6:	08 95       	ret

000058b8 <tg_controller>:
 */

void tg_controller()
{
	// top priority tasks
	st_execute_move();
    58b8:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <st_execute_move>

	// medium priority tasks
	switch (mc_line_continue()) {
    58bc:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <mc_line_continue>
    58c0:	00 97       	sbiw	r24, 0x00	; 0
    58c2:	51 f0       	breq	.+20     	; 0x58d8 <tg_controller+0x20>
    58c4:	02 97       	sbiw	r24, 0x02	; 2
    58c6:	09 f4       	brne	.+2      	; 0x58ca <tg_controller+0x12>
    58c8:	08 95       	ret
		case (TG_EAGAIN): return;
		case (TG_OK): tg.state = TG_READY_UNPROMPTED; return;
	}

	switch (mc_arc_continue()) {
    58ca:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <mc_arc_continue>
    58ce:	00 97       	sbiw	r24, 0x00	; 0
    58d0:	19 f0       	breq	.+6      	; 0x58d8 <tg_controller+0x20>
    58d2:	02 97       	sbiw	r24, 0x02	; 2
    58d4:	21 f4       	brne	.+8      	; 0x58de <tg_controller+0x26>
    58d6:	08 95       	ret
		case (TG_EAGAIN): return;
		case (TG_OK): tg.state = TG_READY_UNPROMPTED; return;
    58d8:	10 92 89 21 	sts	0x2189, r1
    58dc:	08 95       	ret
 */

static int _tg_read_next_line()
{
	// read input line or return if not a completed line
	if ((tg.status = xio_readln(tg.src, tg.buf, sizeof(tg.buf))) == TG_OK) {
    58de:	80 91 8d 21 	lds	r24, 0x218D
    58e2:	60 e9       	ldi	r22, 0x90	; 144
    58e4:	71 e2       	ldi	r23, 0x21	; 33
    58e6:	48 e2       	ldi	r20, 0x28	; 40
    58e8:	0e 94 20 29 	call	0x5240	; 0x5240 <xio_readln>
    58ec:	80 93 8b 21 	sts	0x218B, r24
    58f0:	88 23       	and	r24, r24
    58f2:	31 f4       	brne	.+12     	; 0x5900 <tg_controller+0x48>
		tg.status = tg_parser(tg.buf);				// dispatch to parser
    58f4:	80 e9       	ldi	r24, 0x90	; 144
    58f6:	91 e2       	ldi	r25, 0x21	; 33
    58f8:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <tg_parser>
    58fc:	80 93 8b 21 	sts	0x218B, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    5900:	80 91 8b 21 	lds	r24, 0x218B
    5904:	84 30       	cpi	r24, 0x04	; 4
    5906:	18 f4       	brcc	.+6      	; 0x590e <tg_controller+0x56>
    5908:	82 30       	cpi	r24, 0x02	; 2
    590a:	c0 f4       	brcc	.+48     	; 0x593c <tg_controller+0x84>
    590c:	15 c0       	rjmp	.+42     	; 0x5938 <tg_controller+0x80>
    590e:	85 30       	cpi	r24, 0x05	; 5
    5910:	29 f0       	breq	.+10     	; 0x591c <tg_controller+0x64>
    5912:	8b 30       	cpi	r24, 0x0B	; 11
    5914:	89 f4       	brne	.+34     	; 0x5938 <tg_controller+0x80>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5916:	10 92 8c 21 	sts	0x218C, r1
    591a:	0e c0       	rjmp	.+28     	; 0x5938 <tg_controller+0x80>
			_tg_set_mode(TG_CONTROL_MODE);
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
    591c:	0f 92       	push	r0
    591e:	0f 92       	push	r0
    5920:	8d e1       	ldi	r24, 0x1D	; 29
    5922:	9b e1       	ldi	r25, 0x1B	; 27
    5924:	ed b7       	in	r30, 0x3d	; 61
    5926:	fe b7       	in	r31, 0x3e	; 62
    5928:	81 83       	std	Z+1, r24	; 0x01
    592a:	92 83       	std	Z+2, r25	; 0x02
    592c:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
			tg_reset_source();						// reset to default src
    5930:	0f 90       	pop	r0
    5932:	0f 90       	pop	r0
    5934:	0e 94 96 2b 	call	0x572c	; 0x572c <tg_reset_source>
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		default: {
			tg.state = TG_READY_UNPROMPTED;			// traps various error returns
    5938:	10 92 89 21 	sts	0x2189, r1
		}
	}
	return (tg.status);
    593c:	80 91 8b 21 	lds	r24, 0x218B
		case (TG_EAGAIN): return;
		case (TG_OK): tg.state = TG_READY_UNPROMPTED; return;
	}

	// low priority tasks
	if ((tg.status = _tg_read_next_line()) == TG_EAGAIN) {	// input line
    5940:	82 30       	cpi	r24, 0x02	; 2
    5942:	29 f1       	breq	.+74     	; 0x598e <tg_controller+0xd6>
	tgModeStringDirect
};

void _tg_prompt()
{
	if (tg.state == TG_READY_UNPROMPTED) {
    5944:	80 91 89 21 	lds	r24, 0x2189
    5948:	88 23       	and	r24, r24
    594a:	09 f5       	brne	.+66     	; 0x598e <tg_controller+0xd6>
		if (tg.flags && TG_FLAG_PROMPTS_bm) {
    594c:	80 91 8a 21 	lds	r24, 0x218A
    5950:	88 23       	and	r24, r24
    5952:	d1 f0       	breq	.+52     	; 0x5988 <tg_controller+0xd0>
			printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5954:	80 91 8c 21 	lds	r24, 0x218C
    5958:	e8 2f       	mov	r30, r24
    595a:	f0 e0       	ldi	r31, 0x00	; 0
    595c:	ee 0f       	add	r30, r30
    595e:	ff 1f       	adc	r31, r31
    5960:	e2 56       	subi	r30, 0x62	; 98
    5962:	f6 4e       	sbci	r31, 0xE6	; 230
    5964:	25 91       	lpm	r18, Z+
    5966:	34 91       	lpm	r19, Z+
    5968:	00 d0       	rcall	.+0      	; 0x596a <tg_controller+0xb2>
    596a:	0f 92       	push	r0
    596c:	82 e3       	ldi	r24, 0x32	; 50
    596e:	9b e1       	ldi	r25, 0x1B	; 27
    5970:	ed b7       	in	r30, 0x3d	; 61
    5972:	fe b7       	in	r31, 0x3e	; 62
    5974:	81 83       	std	Z+1, r24	; 0x01
    5976:	92 83       	std	Z+2, r25	; 0x02
    5978:	23 83       	std	Z+3, r18	; 0x03
    597a:	34 83       	std	Z+4, r19	; 0x04
    597c:	0e 94 18 49 	call	0x9230	; 0x9230 <printf_P>
    5980:	0f 90       	pop	r0
    5982:	0f 90       	pop	r0
    5984:	0f 90       	pop	r0
    5986:	0f 90       	pop	r0
		}
		tg.state = TG_READY_PROMPTED;
    5988:	81 e0       	ldi	r24, 0x01	; 1
    598a:	80 93 89 21 	sts	0x2189, r24
    598e:	08 95       	ret

00005990 <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    5990:	08 95       	ret

00005992 <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    5992:	80 e0       	ldi	r24, 0x00	; 0
    5994:	90 e0       	ldi	r25, 0x00	; 0
    5996:	08 95       	ret

00005998 <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    5998:	10 92 d0 21 	sts	0x21D0, r1
	mv.move_buffer_tail = 0;
    599c:	10 92 d1 21 	sts	0x21D1, r1
}
    59a0:	08 95       	ret

000059a2 <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    59a2:	90 91 d0 21 	lds	r25, 0x21D0
    59a6:	80 91 d1 21 	lds	r24, 0x21D1
    59aa:	98 17       	cp	r25, r24
    59ac:	19 f4       	brne	.+6      	; 0x59b4 <mv_dequeue_move_buffer+0x12>
    59ae:	20 e0       	ldi	r18, 0x00	; 0
    59b0:	30 e0       	ldi	r19, 0x00	; 0
    59b2:	17 c0       	rjmp	.+46     	; 0x59e2 <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    59b4:	90 91 d1 21 	lds	r25, 0x21D1
    59b8:	8e e1       	ldi	r24, 0x1E	; 30
    59ba:	98 9f       	mul	r25, r24
    59bc:	90 01       	movw	r18, r0
    59be:	11 24       	eor	r1, r1
    59c0:	2c 52       	subi	r18, 0x2C	; 44
    59c2:	3e 4d       	sbci	r19, 0xDE	; 222
    59c4:	20 93 d2 21 	sts	0x21D2, r18
    59c8:	30 93 d3 21 	sts	0x21D3, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    59cc:	80 91 d1 21 	lds	r24, 0x21D1
    59d0:	8f 5f       	subi	r24, 0xFF	; 255
    59d2:	80 93 d1 21 	sts	0x21D1, r24
    59d6:	80 91 d1 21 	lds	r24, 0x21D1
    59da:	83 30       	cpi	r24, 0x03	; 3
    59dc:	10 f0       	brcs	.+4      	; 0x59e2 <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    59de:	10 92 d1 21 	sts	0x21D1, r1
	}
	return (mv.p); 
}
    59e2:	c9 01       	movw	r24, r18
    59e4:	08 95       	ret

000059e6 <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    59e6:	90 91 d0 21 	lds	r25, 0x21D0
    59ea:	9f 5f       	subi	r25, 0xFF	; 255
    59ec:	93 30       	cpi	r25, 0x03	; 3
    59ee:	08 f0       	brcs	.+2      	; 0x59f2 <mv_test_move_buffer_full+0xc>
    59f0:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    59f2:	80 91 d1 21 	lds	r24, 0x21D1
    59f6:	20 e0       	ldi	r18, 0x00	; 0
    59f8:	89 17       	cp	r24, r25
    59fa:	09 f4       	brne	.+2      	; 0x59fe <mv_test_move_buffer_full+0x18>
    59fc:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    59fe:	82 2f       	mov	r24, r18
    5a00:	08 95       	ret

00005a02 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    5a02:	0b c0       	rjmp	.+22     	; 0x5a1a <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    5a04:	80 91 48 00 	lds	r24, 0x0048
    5a08:	81 60       	ori	r24, 0x01	; 1
    5a0a:	80 93 48 00 	sts	0x0048, r24
    5a0e:	88 95       	sleep
    5a10:	80 91 48 00 	lds	r24, 0x0048
    5a14:	8e 7f       	andi	r24, 0xFE	; 254
    5a16:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    5a1a:	90 91 d1 21 	lds	r25, 0x21D1
    5a1e:	80 91 d0 21 	lds	r24, 0x21D0
    5a22:	98 17       	cp	r25, r24
    5a24:	79 f7       	brne	.-34     	; 0x5a04 <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    5a26:	08 95       	ret

00005a28 <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    5a28:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    5a2a:	80 91 d0 21 	lds	r24, 0x21D0
    5a2e:	80 93 d1 21 	sts	0x21D1, r24
	mv.p = NULL;
    5a32:	10 92 d2 21 	sts	0x21D2, r1
    5a36:	10 92 d3 21 	sts	0x21D3, r1
	sei();
    5a3a:	78 94       	sei
}
    5a3c:	08 95       	ret

00005a3e <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    5a3e:	2f 92       	push	r2
    5a40:	3f 92       	push	r3
    5a42:	4f 92       	push	r4
    5a44:	5f 92       	push	r5
    5a46:	6f 92       	push	r6
    5a48:	7f 92       	push	r7
    5a4a:	8f 92       	push	r8
    5a4c:	9f 92       	push	r9
    5a4e:	af 92       	push	r10
    5a50:	bf 92       	push	r11
    5a52:	cf 92       	push	r12
    5a54:	df 92       	push	r13
    5a56:	ef 92       	push	r14
    5a58:	ff 92       	push	r15
    5a5a:	0f 93       	push	r16
    5a5c:	1f 93       	push	r17
    5a5e:	df 93       	push	r29
    5a60:	cf 93       	push	r28
    5a62:	cd b7       	in	r28, 0x3d	; 61
    5a64:	de b7       	in	r29, 0x3e	; 62
    5a66:	2b 97       	sbiw	r28, 0x0b	; 11
    5a68:	cd bf       	out	0x3d, r28	; 61
    5a6a:	de bf       	out	0x3e, r29	; 62
    5a6c:	1b 01       	movw	r2, r22
    5a6e:	2c 01       	movw	r4, r24
    5a70:	2a 83       	std	Y+2, r18	; 0x02
    5a72:	3b 83       	std	Y+3, r19	; 0x03
    5a74:	4c 83       	std	Y+4, r20	; 0x04
    5a76:	5d 83       	std	Y+5, r21	; 0x05
    5a78:	ee 82       	std	Y+6, r14	; 0x06
    5a7a:	ff 82       	std	Y+7, r15	; 0x07
    5a7c:	08 87       	std	Y+8, r16	; 0x08
    5a7e:	19 87       	std	Y+9, r17	; 0x09
	uint8_t next_buffer_head;
	uint8_t i;

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    5a80:	80 91 d0 21 	lds	r24, 0x21D0
    5a84:	8f 5f       	subi	r24, 0xFF	; 255
    5a86:	89 83       	std	Y+1, r24	; 0x01
    5a88:	83 30       	cpi	r24, 0x03	; 3
    5a8a:	08 f0       	brcs	.+2      	; 0x5a8e <mv_queue_move_buffer+0x50>
    5a8c:	19 82       	std	Y+1, r1	; 0x01
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    5a8e:	80 91 d1 21 	lds	r24, 0x21D1
    5a92:	99 81       	ldd	r25, Y+1	; 0x01
    5a94:	89 17       	cp	r24, r25
    5a96:	11 f4       	brne	.+4      	; 0x5a9c <mv_queue_move_buffer+0x5e>
    5a98:	8a e0       	ldi	r24, 0x0A	; 10
    5a9a:	20 c2       	rjmp	.+1088   	; 0x5edc <mv_queue_move_buffer+0x49e>
		return (TG_BUFFER_FULL_NON_FATAL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    5a9c:	e0 91 d0 21 	lds	r30, 0x21D0
    5aa0:	8e e1       	ldi	r24, 0x1E	; 30
    5aa2:	e8 9f       	mul	r30, r24
    5aa4:	f0 01       	movw	r30, r0
    5aa6:	11 24       	eor	r1, r1
    5aa8:	ec 52       	subi	r30, 0x2C	; 44
    5aaa:	fe 4d       	sbci	r31, 0xDE	; 222
    5aac:	e0 93 d2 21 	sts	0x21D2, r30
    5ab0:	f0 93 d3 21 	sts	0x21D3, r31
	memset(mv.p, 0, sizeof(struct mvMove));
    5ab4:	df 01       	movw	r26, r30
    5ab6:	1d 92       	st	X+, r1
    5ab8:	8a 95       	dec	r24
    5aba:	e9 f7       	brne	.-6      	; 0x5ab6 <mv_queue_move_buffer+0x78>
	mv.p->a[X].steps = steps_x;
    5abc:	80 90 d2 21 	lds	r8, 0x21D2
    5ac0:	90 90 d3 21 	lds	r9, 0x21D3
    5ac4:	f4 01       	movw	r30, r8
    5ac6:	20 82       	st	Z, r2
    5ac8:	31 82       	std	Z+1, r3	; 0x01
    5aca:	42 82       	std	Z+2, r4	; 0x02
    5acc:	53 82       	std	Z+3, r5	; 0x03
	mv.p->a[Y].steps = steps_y;
    5ace:	8a 81       	ldd	r24, Y+2	; 0x02
    5ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    5ad2:	ac 81       	ldd	r26, Y+4	; 0x04
    5ad4:	bd 81       	ldd	r27, Y+5	; 0x05
    5ad6:	82 87       	std	Z+10, r24	; 0x0a
    5ad8:	93 87       	std	Z+11, r25	; 0x0b
    5ada:	a4 87       	std	Z+12, r26	; 0x0c
    5adc:	b5 87       	std	Z+13, r27	; 0x0d
	mv.p->a[Z].steps = steps_z;
    5ade:	8e 81       	ldd	r24, Y+6	; 0x06
    5ae0:	9f 81       	ldd	r25, Y+7	; 0x07
    5ae2:	a8 85       	ldd	r26, Y+8	; 0x08
    5ae4:	b9 85       	ldd	r27, Y+9	; 0x09
    5ae6:	84 8b       	std	Z+20, r24	; 0x14
    5ae8:	95 8b       	std	Z+21, r25	; 0x15
    5aea:	a6 8b       	std	Z+22, r26	; 0x16
    5aec:	b7 8b       	std	Z+23, r27	; 0x17
	mv.microseconds = (uint64_t)microseconds;			// cast to larger base
    5aee:	a0 92 c8 21 	sts	0x21C8, r10
    5af2:	b0 92 c9 21 	sts	0x21C9, r11
    5af6:	c0 92 ca 21 	sts	0x21CA, r12
    5afa:	d0 92 cb 21 	sts	0x21CB, r13
    5afe:	10 92 cc 21 	sts	0x21CC, r1
    5b02:	10 92 cd 21 	sts	0x21CD, r1
    5b06:	10 92 ce 21 	sts	0x21CE, r1
    5b0a:	10 92 cf 21 	sts	0x21CF, r1
	mv.ticks = mv.microseconds * TICKS_PER_MICROSECOND;
    5b0e:	95 01       	movw	r18, r10
    5b10:	a6 01       	movw	r20, r12
    5b12:	60 e0       	ldi	r22, 0x00	; 0
    5b14:	70 e0       	ldi	r23, 0x00	; 0
    5b16:	80 e0       	ldi	r24, 0x00	; 0
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	05 e0       	ldi	r16, 0x05	; 5
    5b1c:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <__ashldi3>
    5b20:	fc 01       	movw	r30, r24
    5b22:	98 eb       	ldi	r25, 0xB8	; 184
    5b24:	69 2e       	mov	r6, r25
    5b26:	91 e2       	ldi	r25, 0x21	; 33
    5b28:	79 2e       	mov	r7, r25
    5b2a:	20 93 b8 21 	sts	0x21B8, r18
    5b2e:	d3 01       	movw	r26, r6
    5b30:	11 96       	adiw	r26, 0x01	; 1
    5b32:	3c 93       	st	X, r19
    5b34:	11 97       	sbiw	r26, 0x01	; 1
    5b36:	12 96       	adiw	r26, 0x02	; 2
    5b38:	4c 93       	st	X, r20
    5b3a:	12 97       	sbiw	r26, 0x02	; 2
    5b3c:	13 96       	adiw	r26, 0x03	; 3
    5b3e:	5c 93       	st	X, r21
    5b40:	13 97       	sbiw	r26, 0x03	; 3
    5b42:	14 96       	adiw	r26, 0x04	; 4
    5b44:	6c 93       	st	X, r22
    5b46:	14 97       	sbiw	r26, 0x04	; 4
    5b48:	15 96       	adiw	r26, 0x05	; 5
    5b4a:	7c 93       	st	X, r23
    5b4c:	15 97       	sbiw	r26, 0x05	; 5
    5b4e:	16 96       	adiw	r26, 0x06	; 6
    5b50:	ec 93       	st	X, r30
    5b52:	16 97       	sbiw	r26, 0x06	; 6
    5b54:	17 96       	adiw	r26, 0x07	; 7
    5b56:	fc 93       	st	X, r31

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    5b58:	21 14       	cp	r2, r1
    5b5a:	31 04       	cpc	r3, r1
    5b5c:	41 04       	cpc	r4, r1
    5b5e:	51 04       	cpc	r5, r1
    5b60:	09 f0       	breq	.+2      	; 0x5b64 <mv_queue_move_buffer+0x126>
    5b62:	73 c0       	rjmp	.+230    	; 0x5c4a <mv_queue_move_buffer+0x20c>
    5b64:	8a 81       	ldd	r24, Y+2	; 0x02
    5b66:	9b 81       	ldd	r25, Y+3	; 0x03
    5b68:	ac 81       	ldd	r26, Y+4	; 0x04
    5b6a:	bd 81       	ldd	r27, Y+5	; 0x05
    5b6c:	00 97       	sbiw	r24, 0x00	; 0
    5b6e:	a1 05       	cpc	r26, r1
    5b70:	b1 05       	cpc	r27, r1
    5b72:	09 f0       	breq	.+2      	; 0x5b76 <mv_queue_move_buffer+0x138>
    5b74:	6a c0       	rjmp	.+212    	; 0x5c4a <mv_queue_move_buffer+0x20c>
    5b76:	8e 81       	ldd	r24, Y+6	; 0x06
    5b78:	9f 81       	ldd	r25, Y+7	; 0x07
    5b7a:	a8 85       	ldd	r26, Y+8	; 0x08
    5b7c:	b9 85       	ldd	r27, Y+9	; 0x09
    5b7e:	00 97       	sbiw	r24, 0x00	; 0
    5b80:	a1 05       	cpc	r26, r1
    5b82:	b1 05       	cpc	r27, r1
    5b84:	09 f0       	breq	.+2      	; 0x5b88 <mv_queue_move_buffer+0x14a>
    5b86:	61 c0       	rjmp	.+194    	; 0x5c4a <mv_queue_move_buffer+0x20c>
		mv.p->a[X].steps = (((mv.ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    5b88:	81 e0       	ldi	r24, 0x01	; 1
    5b8a:	e8 2e       	mov	r14, r24
    5b8c:	f1 2c       	mov	r15, r1
    5b8e:	01 2d       	mov	r16, r1
    5b90:	11 2d       	mov	r17, r1
    5b92:	d4 01       	movw	r26, r8
    5b94:	ed 92       	st	X+, r14
    5b96:	fd 92       	st	X+, r15
    5b98:	0d 93       	st	X+, r16
    5b9a:	1c 93       	st	X, r17
    5b9c:	13 97       	sbiw	r26, 0x03	; 3
		mv.p->a[X].postscale = 1;
    5b9e:	81 e0       	ldi	r24, 0x01	; 1
    5ba0:	90 e0       	ldi	r25, 0x00	; 0
    5ba2:	16 96       	adiw	r26, 0x06	; 6
    5ba4:	8d 93       	st	X+, r24
    5ba6:	9c 93       	st	X, r25
    5ba8:	17 97       	sbiw	r26, 0x07	; 7
		mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[X].steps); // expensive!
    5baa:	cf 01       	movw	r24, r30
    5bac:	aa 24       	eor	r10, r10
    5bae:	a3 94       	inc	r10
    5bb0:	bb 24       	eor	r11, r11
    5bb2:	cc 24       	eor	r12, r12
    5bb4:	dd 24       	eor	r13, r13
    5bb6:	ee 24       	eor	r14, r14
    5bb8:	ff 24       	eor	r15, r15
    5bba:	00 e0       	ldi	r16, 0x00	; 0
    5bbc:	10 e0       	ldi	r17, 0x00	; 0
    5bbe:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivdi3>
    5bc2:	f3 01       	movw	r30, r6
    5bc4:	38 96       	adiw	r30, 0x08	; 8
    5bc6:	20 93 c0 21 	sts	0x21C0, r18
    5bca:	31 83       	std	Z+1, r19	; 0x01
    5bcc:	42 83       	std	Z+2, r20	; 0x02
    5bce:	53 83       	std	Z+3, r21	; 0x03
    5bd0:	64 83       	std	Z+4, r22	; 0x04
    5bd2:	75 83       	std	Z+5, r23	; 0x05
    5bd4:	86 83       	std	Z+6, r24	; 0x06
    5bd6:	97 83       	std	Z+7, r25	; 0x07
		while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    5bd8:	7f 01       	movw	r14, r30
    5bda:	19 c0       	rjmp	.+50     	; 0x5c0e <mv_queue_move_buffer+0x1d0>
			mv.ticks_per_step >>= 1;
    5bdc:	8e 2f       	mov	r24, r30
    5bde:	01 e0       	ldi	r16, 0x01	; 1
    5be0:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <__lshrdi3>
    5be4:	20 93 c0 21 	sts	0x21C0, r18
    5be8:	f7 01       	movw	r30, r14
    5bea:	31 83       	std	Z+1, r19	; 0x01
    5bec:	42 83       	std	Z+2, r20	; 0x02
    5bee:	53 83       	std	Z+3, r21	; 0x03
    5bf0:	64 83       	std	Z+4, r22	; 0x04
    5bf2:	75 83       	std	Z+5, r23	; 0x05
    5bf4:	86 83       	std	Z+6, r24	; 0x06
    5bf6:	97 83       	std	Z+7, r25	; 0x07
			mv.p->a[X].postscale <<= 1;
    5bf8:	d4 01       	movw	r26, r8
    5bfa:	16 96       	adiw	r26, 0x06	; 6
    5bfc:	8d 91       	ld	r24, X+
    5bfe:	9c 91       	ld	r25, X
    5c00:	17 97       	sbiw	r26, 0x07	; 7
    5c02:	88 0f       	add	r24, r24
    5c04:	99 1f       	adc	r25, r25
    5c06:	16 96       	adiw	r26, 0x06	; 6
    5c08:	8d 93       	st	X+, r24
    5c0a:	9c 93       	st	X, r25
    5c0c:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((mv.ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[X].steps); // expensive!
		while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    5c0e:	20 91 c0 21 	lds	r18, 0x21C0
    5c12:	30 91 c1 21 	lds	r19, 0x21C1
    5c16:	40 91 c2 21 	lds	r20, 0x21C2
    5c1a:	50 91 c3 21 	lds	r21, 0x21C3
    5c1e:	60 91 c4 21 	lds	r22, 0x21C4
    5c22:	70 91 c5 21 	lds	r23, 0x21C5
    5c26:	e0 91 c6 21 	lds	r30, 0x21C6
    5c2a:	90 91 c7 21 	lds	r25, 0x21C7
    5c2e:	84 2f       	mov	r24, r20
    5c30:	85 2b       	or	r24, r21
    5c32:	86 2b       	or	r24, r22
    5c34:	87 2b       	or	r24, r23
    5c36:	8e 2b       	or	r24, r30
    5c38:	89 2b       	or	r24, r25
    5c3a:	81 f6       	brne	.-96     	; 0x5bdc <mv_queue_move_buffer+0x19e>
			mv.ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
    5c3c:	c9 01       	movw	r24, r18
    5c3e:	f4 01       	movw	r30, r8
    5c40:	84 83       	std	Z+4, r24	; 0x04
    5c42:	95 83       	std	Z+5, r25	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    5c44:	81 e0       	ldi	r24, 0x01	; 1
    5c46:	81 87       	std	Z+9, r24	; 0x09
    5c48:	43 c1       	rjmp	.+646    	; 0x5ed0 <mv_queue_move_buffer+0x492>
	mv.p->a[Z].steps = steps_z;
	mv.microseconds = (uint64_t)microseconds;			// cast to larger base
	mv.ticks = mv.microseconds * TICKS_PER_MICROSECOND;

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    5c4a:	44 24       	eor	r4, r4
    5c4c:	55 24       	eor	r5, r5
				mv.p->a[i].steps = labs(mv.p->a[i].steps);

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
    5c4e:	10 ec       	ldi	r17, 0xC0	; 192
    5c50:	21 2e       	mov	r2, r17
    5c52:	11 e2       	ldi	r17, 0x21	; 33
    5c54:	31 2e       	mov	r3, r17
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    5c56:	40 91 d2 21 	lds	r20, 0x21D2
    5c5a:	50 91 d3 21 	lds	r21, 0x21D3
    5c5e:	4a 86       	std	Y+10, r4	; 0x0a
    5c60:	5b 86       	std	Y+11, r5	; 0x0b
    5c62:	c2 01       	movw	r24, r4
    5c64:	f2 01       	movw	r30, r4
    5c66:	b3 e0       	ldi	r27, 0x03	; 3
    5c68:	ee 0f       	add	r30, r30
    5c6a:	ff 1f       	adc	r31, r31
    5c6c:	ba 95       	dec	r27
    5c6e:	e1 f7       	brne	.-8      	; 0x5c68 <mv_queue_move_buffer+0x22a>
    5c70:	88 0f       	add	r24, r24
    5c72:	99 1f       	adc	r25, r25
    5c74:	e8 0f       	add	r30, r24
    5c76:	f9 1f       	adc	r31, r25
    5c78:	e4 0f       	add	r30, r20
    5c7a:	f5 1f       	adc	r31, r21
    5c7c:	80 81       	ld	r24, Z
    5c7e:	91 81       	ldd	r25, Z+1	; 0x01
    5c80:	a2 81       	ldd	r26, Z+2	; 0x02
    5c82:	b3 81       	ldd	r27, Z+3	; 0x03
    5c84:	00 97       	sbiw	r24, 0x00	; 0
    5c86:	a1 05       	cpc	r26, r1
    5c88:	b1 05       	cpc	r27, r1
    5c8a:	09 f4       	brne	.+2      	; 0x5c8e <mv_queue_move_buffer+0x250>
    5c8c:	19 c1       	rjmp	.+562    	; 0x5ec0 <mv_queue_move_buffer+0x482>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    5c8e:	b7 ff       	sbrs	r27, 7
    5c90:	12 c0       	rjmp	.+36     	; 0x5cb6 <mv_queue_move_buffer+0x278>
    5c92:	c2 01       	movw	r24, r4
    5c94:	92 01       	movw	r18, r4
    5c96:	f3 e0       	ldi	r31, 0x03	; 3
    5c98:	22 0f       	add	r18, r18
    5c9a:	33 1f       	adc	r19, r19
    5c9c:	fa 95       	dec	r31
    5c9e:	e1 f7       	brne	.-8      	; 0x5c98 <mv_queue_move_buffer+0x25a>
    5ca0:	88 0f       	add	r24, r24
    5ca2:	99 1f       	adc	r25, r25
    5ca4:	28 0f       	add	r18, r24
    5ca6:	39 1f       	adc	r19, r25
    5ca8:	42 0f       	add	r20, r18
    5caa:	53 1f       	adc	r21, r19
    5cac:	81 e0       	ldi	r24, 0x01	; 1
    5cae:	da 01       	movw	r26, r20
    5cb0:	18 96       	adiw	r26, 0x08	; 8
    5cb2:	8c 93       	st	X, r24
    5cb4:	0f c0       	rjmp	.+30     	; 0x5cd4 <mv_queue_move_buffer+0x296>
    5cb6:	c2 01       	movw	r24, r4
    5cb8:	92 01       	movw	r18, r4
    5cba:	73 e0       	ldi	r23, 0x03	; 3
    5cbc:	22 0f       	add	r18, r18
    5cbe:	33 1f       	adc	r19, r19
    5cc0:	7a 95       	dec	r23
    5cc2:	e1 f7       	brne	.-8      	; 0x5cbc <mv_queue_move_buffer+0x27e>
    5cc4:	88 0f       	add	r24, r24
    5cc6:	99 1f       	adc	r25, r25
    5cc8:	28 0f       	add	r18, r24
    5cca:	39 1f       	adc	r19, r25
    5ccc:	42 0f       	add	r20, r18
    5cce:	53 1f       	adc	r21, r19
    5cd0:	fa 01       	movw	r30, r20
    5cd2:	10 86       	std	Z+8, r1	; 0x08
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    5cd4:	e0 91 d2 21 	lds	r30, 0x21D2
    5cd8:	f0 91 d3 21 	lds	r31, 0x21D3
    5cdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    5cde:	9b 85       	ldd	r25, Y+11	; 0x0b
    5ce0:	ac 01       	movw	r20, r24
    5ce2:	03 e0       	ldi	r16, 0x03	; 3
    5ce4:	44 0f       	add	r20, r20
    5ce6:	55 1f       	adc	r21, r21
    5ce8:	0a 95       	dec	r16
    5cea:	e1 f7       	brne	.-8      	; 0x5ce4 <mv_queue_move_buffer+0x2a6>
    5cec:	88 0f       	add	r24, r24
    5cee:	99 1f       	adc	r25, r25
    5cf0:	48 0f       	add	r20, r24
    5cf2:	59 1f       	adc	r21, r25
    5cf4:	4e 0f       	add	r20, r30
    5cf6:	5f 1f       	adc	r21, r31
    5cf8:	8a 85       	ldd	r24, Y+10	; 0x0a
    5cfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    5cfc:	9c 01       	movw	r18, r24
    5cfe:	b3 e0       	ldi	r27, 0x03	; 3
    5d00:	22 0f       	add	r18, r18
    5d02:	33 1f       	adc	r19, r19
    5d04:	ba 95       	dec	r27
    5d06:	e1 f7       	brne	.-8      	; 0x5d00 <mv_queue_move_buffer+0x2c2>
    5d08:	88 0f       	add	r24, r24
    5d0a:	99 1f       	adc	r25, r25
    5d0c:	28 0f       	add	r18, r24
    5d0e:	39 1f       	adc	r19, r25
    5d10:	e2 0f       	add	r30, r18
    5d12:	f3 1f       	adc	r31, r19
    5d14:	80 81       	ld	r24, Z
    5d16:	91 81       	ldd	r25, Z+1	; 0x01
    5d18:	a2 81       	ldd	r26, Z+2	; 0x02
    5d1a:	b3 81       	ldd	r27, Z+3	; 0x03
    5d1c:	b7 ff       	sbrs	r27, 7
    5d1e:	07 c0       	rjmp	.+14     	; 0x5d2e <mv_queue_move_buffer+0x2f0>
    5d20:	b0 95       	com	r27
    5d22:	a0 95       	com	r26
    5d24:	90 95       	com	r25
    5d26:	81 95       	neg	r24
    5d28:	9f 4f       	sbci	r25, 0xFF	; 255
    5d2a:	af 4f       	sbci	r26, 0xFF	; 255
    5d2c:	bf 4f       	sbci	r27, 0xFF	; 255
    5d2e:	fa 01       	movw	r30, r20
    5d30:	80 83       	st	Z, r24
    5d32:	91 83       	std	Z+1, r25	; 0x01
    5d34:	a2 83       	std	Z+2, r26	; 0x02
    5d36:	b3 83       	std	Z+3, r27	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    5d38:	a0 91 d2 21 	lds	r26, 0x21D2
    5d3c:	b0 91 d3 21 	lds	r27, 0x21D3
    5d40:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d42:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d44:	fc 01       	movw	r30, r24
    5d46:	73 e0       	ldi	r23, 0x03	; 3
    5d48:	ee 0f       	add	r30, r30
    5d4a:	ff 1f       	adc	r31, r31
    5d4c:	7a 95       	dec	r23
    5d4e:	e1 f7       	brne	.-8      	; 0x5d48 <mv_queue_move_buffer+0x30a>
    5d50:	88 0f       	add	r24, r24
    5d52:	99 1f       	adc	r25, r25
    5d54:	e8 0f       	add	r30, r24
    5d56:	f9 1f       	adc	r31, r25
    5d58:	ea 0f       	add	r30, r26
    5d5a:	fb 1f       	adc	r31, r27
    5d5c:	81 e0       	ldi	r24, 0x01	; 1
    5d5e:	90 e0       	ldi	r25, 0x00	; 0
    5d60:	86 83       	std	Z+6, r24	; 0x06
    5d62:	97 83       	std	Z+7, r25	; 0x07
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
    5d64:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d66:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d68:	9c 01       	movw	r18, r24
    5d6a:	53 e0       	ldi	r21, 0x03	; 3
    5d6c:	22 0f       	add	r18, r18
    5d6e:	33 1f       	adc	r19, r19
    5d70:	5a 95       	dec	r21
    5d72:	e1 f7       	brne	.-8      	; 0x5d6c <mv_queue_move_buffer+0x32e>
    5d74:	88 0f       	add	r24, r24
    5d76:	99 1f       	adc	r25, r25
    5d78:	28 0f       	add	r18, r24
    5d7a:	39 1f       	adc	r19, r25
    5d7c:	a2 0f       	add	r26, r18
    5d7e:	b3 1f       	adc	r27, r19
    5d80:	ed 90       	ld	r14, X+
    5d82:	fd 90       	ld	r15, X+
    5d84:	0d 91       	ld	r16, X+
    5d86:	1c 91       	ld	r17, X
    5d88:	37 01       	movw	r6, r14
    5d8a:	48 01       	movw	r8, r16
    5d8c:	99 0c       	add	r9, r9
    5d8e:	66 08       	sbc	r6, r6
    5d90:	76 2c       	mov	r7, r6
    5d92:	43 01       	movw	r8, r6
    5d94:	20 91 b8 21 	lds	r18, 0x21B8
    5d98:	30 91 b9 21 	lds	r19, 0x21B9
    5d9c:	40 91 ba 21 	lds	r20, 0x21BA
    5da0:	50 91 bb 21 	lds	r21, 0x21BB
    5da4:	60 91 bc 21 	lds	r22, 0x21BC
    5da8:	70 91 bd 21 	lds	r23, 0x21BD
    5dac:	80 91 be 21 	lds	r24, 0x21BE
    5db0:	90 91 bf 21 	lds	r25, 0x21BF
    5db4:	57 01       	movw	r10, r14
    5db6:	68 01       	movw	r12, r16
    5db8:	e6 2c       	mov	r14, r6
    5dba:	f6 2c       	mov	r15, r6
    5dbc:	06 2d       	mov	r16, r6
    5dbe:	16 2d       	mov	r17, r6
    5dc0:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivdi3>
    5dc4:	20 93 c0 21 	sts	0x21C0, r18
    5dc8:	d1 01       	movw	r26, r2
    5dca:	11 96       	adiw	r26, 0x01	; 1
    5dcc:	3c 93       	st	X, r19
    5dce:	11 97       	sbiw	r26, 0x01	; 1
    5dd0:	12 96       	adiw	r26, 0x02	; 2
    5dd2:	4c 93       	st	X, r20
    5dd4:	12 97       	sbiw	r26, 0x02	; 2
    5dd6:	13 96       	adiw	r26, 0x03	; 3
    5dd8:	5c 93       	st	X, r21
    5dda:	13 97       	sbiw	r26, 0x03	; 3
    5ddc:	14 96       	adiw	r26, 0x04	; 4
    5dde:	6c 93       	st	X, r22
    5de0:	14 97       	sbiw	r26, 0x04	; 4
    5de2:	15 96       	adiw	r26, 0x05	; 5
    5de4:	7c 93       	st	X, r23
    5de6:	15 97       	sbiw	r26, 0x05	; 5
    5de8:	16 96       	adiw	r26, 0x06	; 6
    5dea:	8c 93       	st	X, r24
    5dec:	16 97       	sbiw	r26, 0x06	; 6
    5dee:	17 96       	adiw	r26, 0x07	; 7
    5df0:	9c 93       	st	X, r25
    5df2:	38 c0       	rjmp	.+112    	; 0x5e64 <mv_queue_move_buffer+0x426>
				while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
					mv.ticks_per_step >>= 1;
    5df4:	9d 01       	movw	r18, r26
    5df6:	8e 2f       	mov	r24, r30
    5df8:	01 e0       	ldi	r16, 0x01	; 1
    5dfa:	0e 94 4e 36 	call	0x6c9c	; 0x6c9c <__lshrdi3>
    5dfe:	20 93 c0 21 	sts	0x21C0, r18
    5e02:	f1 01       	movw	r30, r2
    5e04:	31 83       	std	Z+1, r19	; 0x01
    5e06:	42 83       	std	Z+2, r20	; 0x02
    5e08:	53 83       	std	Z+3, r21	; 0x03
    5e0a:	64 83       	std	Z+4, r22	; 0x04
    5e0c:	75 83       	std	Z+5, r23	; 0x05
    5e0e:	86 83       	std	Z+6, r24	; 0x06
    5e10:	97 83       	std	Z+7, r25	; 0x07
					mv.p->a[i].postscale <<= 1;
    5e12:	40 91 d2 21 	lds	r20, 0x21D2
    5e16:	50 91 d3 21 	lds	r21, 0x21D3
    5e1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    5e1e:	fc 01       	movw	r30, r24
    5e20:	23 e0       	ldi	r18, 0x03	; 3
    5e22:	ee 0f       	add	r30, r30
    5e24:	ff 1f       	adc	r31, r31
    5e26:	2a 95       	dec	r18
    5e28:	e1 f7       	brne	.-8      	; 0x5e22 <mv_queue_move_buffer+0x3e4>
    5e2a:	88 0f       	add	r24, r24
    5e2c:	99 1f       	adc	r25, r25
    5e2e:	e8 0f       	add	r30, r24
    5e30:	f9 1f       	adc	r31, r25
    5e32:	e4 0f       	add	r30, r20
    5e34:	f5 1f       	adc	r31, r21
    5e36:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e38:	9b 85       	ldd	r25, Y+11	; 0x0b
    5e3a:	9c 01       	movw	r18, r24
    5e3c:	13 e0       	ldi	r17, 0x03	; 3
    5e3e:	22 0f       	add	r18, r18
    5e40:	33 1f       	adc	r19, r19
    5e42:	1a 95       	dec	r17
    5e44:	e1 f7       	brne	.-8      	; 0x5e3e <mv_queue_move_buffer+0x400>
    5e46:	88 0f       	add	r24, r24
    5e48:	99 1f       	adc	r25, r25
    5e4a:	28 0f       	add	r18, r24
    5e4c:	39 1f       	adc	r19, r25
    5e4e:	42 0f       	add	r20, r18
    5e50:	53 1f       	adc	r21, r19
    5e52:	da 01       	movw	r26, r20
    5e54:	16 96       	adiw	r26, 0x06	; 6
    5e56:	8d 91       	ld	r24, X+
    5e58:	9c 91       	ld	r25, X
    5e5a:	17 97       	sbiw	r26, 0x07	; 7
    5e5c:	88 0f       	add	r24, r24
    5e5e:	99 1f       	adc	r25, r25
    5e60:	86 83       	std	Z+6, r24	; 0x06
    5e62:	97 83       	std	Z+7, r25	; 0x07

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				mv.ticks_per_step = (uint64_t)(mv.ticks / mv.p->a[i].steps);// expensive!
				while (mv.ticks_per_step & 0xFFFFFFFFFFFF0000) {
    5e64:	a0 91 c0 21 	lds	r26, 0x21C0
    5e68:	b0 91 c1 21 	lds	r27, 0x21C1
    5e6c:	40 91 c2 21 	lds	r20, 0x21C2
    5e70:	50 91 c3 21 	lds	r21, 0x21C3
    5e74:	60 91 c4 21 	lds	r22, 0x21C4
    5e78:	70 91 c5 21 	lds	r23, 0x21C5
    5e7c:	e0 91 c6 21 	lds	r30, 0x21C6
    5e80:	90 91 c7 21 	lds	r25, 0x21C7
    5e84:	84 2f       	mov	r24, r20
    5e86:	85 2b       	or	r24, r21
    5e88:	86 2b       	or	r24, r22
    5e8a:	87 2b       	or	r24, r23
    5e8c:	8e 2b       	or	r24, r30
    5e8e:	89 2b       	or	r24, r25
    5e90:	09 f0       	breq	.+2      	; 0x5e94 <mv_queue_move_buffer+0x456>
    5e92:	b0 cf       	rjmp	.-160    	; 0x5df4 <mv_queue_move_buffer+0x3b6>
					mv.ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
    5e94:	40 91 d2 21 	lds	r20, 0x21D2
    5e98:	50 91 d3 21 	lds	r21, 0x21D3
    5e9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5ea0:	9c 01       	movw	r18, r24
    5ea2:	73 e0       	ldi	r23, 0x03	; 3
    5ea4:	22 0f       	add	r18, r18
    5ea6:	33 1f       	adc	r19, r19
    5ea8:	7a 95       	dec	r23
    5eaa:	e1 f7       	brne	.-8      	; 0x5ea4 <mv_queue_move_buffer+0x466>
    5eac:	88 0f       	add	r24, r24
    5eae:	99 1f       	adc	r25, r25
    5eb0:	28 0f       	add	r18, r24
    5eb2:	39 1f       	adc	r19, r25
    5eb4:	42 0f       	add	r20, r18
    5eb6:	53 1f       	adc	r21, r19
    5eb8:	cd 01       	movw	r24, r26
    5eba:	fa 01       	movw	r30, r20
    5ebc:	84 83       	std	Z+4, r24	; 0x04
    5ebe:	95 83       	std	Z+5, r25	; 0x05
    5ec0:	08 94       	sec
    5ec2:	41 1c       	adc	r4, r1
    5ec4:	51 1c       	adc	r5, r1
		}
		mv.p->a[X].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    5ec6:	f3 e0       	ldi	r31, 0x03	; 3
    5ec8:	4f 16       	cp	r4, r31
    5eca:	51 04       	cpc	r5, r1
    5ecc:	09 f0       	breq	.+2      	; 0x5ed0 <mv_queue_move_buffer+0x492>
    5ece:	c3 ce       	rjmp	.-634    	; 0x5c56 <mv_queue_move_buffer+0x218>
				}
				mv.p->a[i].period = (uint16_t)(mv.ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    5ed0:	89 81       	ldd	r24, Y+1	; 0x01
    5ed2:	80 93 d0 21 	sts	0x21D0, r24
	st_execute_move();
    5ed6:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <st_execute_move>
    5eda:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    5edc:	2b 96       	adiw	r28, 0x0b	; 11
    5ede:	cd bf       	out	0x3d, r28	; 61
    5ee0:	de bf       	out	0x3e, r29	; 62
    5ee2:	cf 91       	pop	r28
    5ee4:	df 91       	pop	r29
    5ee6:	1f 91       	pop	r17
    5ee8:	0f 91       	pop	r16
    5eea:	ff 90       	pop	r15
    5eec:	ef 90       	pop	r14
    5eee:	df 90       	pop	r13
    5ef0:	cf 90       	pop	r12
    5ef2:	bf 90       	pop	r11
    5ef4:	af 90       	pop	r10
    5ef6:	9f 90       	pop	r9
    5ef8:	8f 90       	pop	r8
    5efa:	7f 90       	pop	r7
    5efc:	6f 90       	pop	r6
    5efe:	5f 90       	pop	r5
    5f00:	4f 90       	pop	r4
    5f02:	3f 90       	pop	r3
    5f04:	2f 90       	pop	r2
    5f06:	08 95       	ret

00005f08 <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    5f08:	af e3       	ldi	r26, 0x3F	; 63
    5f0a:	b2 e2       	ldi	r27, 0x22	; 34
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5f0c:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5f0e:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5f10:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5f12:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    5f14:	ed 91       	ld	r30, X+
    5f16:	fc 91       	ld	r31, X
    5f18:	11 97       	sbiw	r26, 0x01	; 1
    5f1a:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    5f1c:	ed 91       	ld	r30, X+
    5f1e:	fc 91       	ld	r31, X
    5f20:	11 97       	sbiw	r26, 0x01	; 1
    5f22:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    5f24:	ed 91       	ld	r30, X+
    5f26:	fc 91       	ld	r31, X
    5f28:	11 97       	sbiw	r26, 0x01	; 1
    5f2a:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    5f2c:	ed 91       	ld	r30, X+
    5f2e:	fc 91       	ld	r31, X
    5f30:	11 97       	sbiw	r26, 0x01	; 1
    5f32:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    5f34:	ed 91       	ld	r30, X+
    5f36:	fc 91       	ld	r31, X
    5f38:	11 97       	sbiw	r26, 0x01	; 1
    5f3a:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    5f3c:	ed 91       	ld	r30, X+
    5f3e:	fc 91       	ld	r31, X
    5f40:	11 97       	sbiw	r26, 0x01	; 1
    5f42:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    5f44:	ed 91       	ld	r30, X+
    5f46:	fc 91       	ld	r31, X
    5f48:	11 97       	sbiw	r26, 0x01	; 1
    5f4a:	31 87       	std	Z+9, r19	; 0x09
    5f4c:	50 96       	adiw	r26, 0x10	; 16
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    5f4e:	42 e2       	ldi	r20, 0x22	; 34
    5f50:	af 37       	cpi	r26, 0x7F	; 127
    5f52:	b4 07       	cpc	r27, r20
    5f54:	f9 f6       	brne	.-66     	; 0x5f14 <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    5f56:	08 95       	ret

00005f58 <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    5f58:	1f 92       	push	r1
    5f5a:	0f 92       	push	r0
    5f5c:	0f b6       	in	r0, 0x3f	; 63
    5f5e:	0f 92       	push	r0
    5f60:	11 24       	eor	r1, r1
    5f62:	0f 90       	pop	r0
    5f64:	0f be       	out	0x3f, r0	; 63
    5f66:	0f 90       	pop	r0
    5f68:	1f 90       	pop	r1
    5f6a:	18 95       	reti

00005f6c <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    5f6c:	1f 92       	push	r1
    5f6e:	0f 92       	push	r0
    5f70:	0f b6       	in	r0, 0x3f	; 63
    5f72:	0f 92       	push	r0
    5f74:	11 24       	eor	r1, r1
    5f76:	0f 90       	pop	r0
    5f78:	0f be       	out	0x3f, r0	; 63
    5f7a:	0f 90       	pop	r0
    5f7c:	1f 90       	pop	r1
    5f7e:	18 95       	reti

00005f80 <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    5f80:	1f 92       	push	r1
    5f82:	0f 92       	push	r0
    5f84:	0f b6       	in	r0, 0x3f	; 63
    5f86:	0f 92       	push	r0
    5f88:	11 24       	eor	r1, r1
    5f8a:	0f 90       	pop	r0
    5f8c:	0f be       	out	0x3f, r0	; 63
    5f8e:	0f 90       	pop	r0
    5f90:	1f 90       	pop	r1
    5f92:	18 95       	reti

00005f94 <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    5f94:	1f 92       	push	r1
    5f96:	0f 92       	push	r0
    5f98:	0f b6       	in	r0, 0x3f	; 63
    5f9a:	0f 92       	push	r0
    5f9c:	11 24       	eor	r1, r1
    5f9e:	0f 90       	pop	r0
    5fa0:	0f be       	out	0x3f, r0	; 63
    5fa2:	0f 90       	pop	r0
    5fa4:	1f 90       	pop	r1
    5fa6:	18 95       	reti

00005fa8 <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    5fa8:	1f 92       	push	r1
    5faa:	0f 92       	push	r0
    5fac:	0f b6       	in	r0, 0x3f	; 63
    5fae:	0f 92       	push	r0
    5fb0:	11 24       	eor	r1, r1
    5fb2:	0f 90       	pop	r0
    5fb4:	0f be       	out	0x3f, r0	; 63
    5fb6:	0f 90       	pop	r0
    5fb8:	1f 90       	pop	r1
    5fba:	18 95       	reti

00005fbc <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    5fbc:	1f 92       	push	r1
    5fbe:	0f 92       	push	r0
    5fc0:	0f b6       	in	r0, 0x3f	; 63
    5fc2:	0f 92       	push	r0
    5fc4:	11 24       	eor	r1, r1
    5fc6:	0f 90       	pop	r0
    5fc8:	0f be       	out	0x3f, r0	; 63
    5fca:	0f 90       	pop	r0
    5fcc:	1f 90       	pop	r1
    5fce:	18 95       	reti

00005fd0 <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    5fd0:	1f 92       	push	r1
    5fd2:	0f 92       	push	r0
    5fd4:	0f b6       	in	r0, 0x3f	; 63
    5fd6:	0f 92       	push	r0
    5fd8:	11 24       	eor	r1, r1
    5fda:	0f 90       	pop	r0
    5fdc:	0f be       	out	0x3f, r0	; 63
    5fde:	0f 90       	pop	r0
    5fe0:	1f 90       	pop	r1
    5fe2:	18 95       	reti

00005fe4 <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    5fe4:	1f 92       	push	r1
    5fe6:	0f 92       	push	r0
    5fe8:	0f b6       	in	r0, 0x3f	; 63
    5fea:	0f 92       	push	r0
    5fec:	11 24       	eor	r1, r1
    5fee:	0f 90       	pop	r0
    5ff0:	0f be       	out	0x3f, r0	; 63
    5ff2:	0f 90       	pop	r0
    5ff4:	1f 90       	pop	r1
    5ff6:	18 95       	reti

00005ff8 <signal_etx>:
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx() {			// ^c
{
	tg_reset_source();					// return control to standard device
    5ff8:	0e 94 96 2b 	call	0x572c	; 0x572c <tg_reset_source>
	mc_motion_stop();					// stop computing and generating motions
    5ffc:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    6000:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <mv_flush>
	st_stop_steppers();					// stop the steppers
    6004:	0e 94 40 25 	call	0x4a80	; 0x4a80 <st_stop_steppers>
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
*/
}
    6008:	08 95       	ret

0000600a <xio_set_baud_usart>:
	dx->port->OUTCLR = outclr;
	dx->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
    600a:	cf 93       	push	r28
    600c:	df 93       	push	r29
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    600e:	90 e0       	ldi	r25, 0x00	; 0
    6010:	27 e1       	ldi	r18, 0x17	; 23
    6012:	30 e0       	ldi	r19, 0x00	; 0
    6014:	82 9f       	mul	r24, r18
    6016:	d0 01       	movw	r26, r0
    6018:	83 9f       	mul	r24, r19
    601a:	b0 0d       	add	r27, r0
    601c:	92 9f       	mul	r25, r18
    601e:	b0 0d       	add	r27, r0
    6020:	11 24       	eor	r1, r1
    6022:	af 53       	subi	r26, 0x3F	; 63
    6024:	bc 4d       	sbci	r27, 0xDC	; 220
    6026:	51 96       	adiw	r26, 0x11	; 17
    6028:	ed 91       	ld	r30, X+
    602a:	fc 91       	ld	r31, X
    602c:	52 97       	sbiw	r26, 0x12	; 18
    602e:	87 81       	ldd	r24, Z+7	; 0x07
    6030:	90 85       	ldd	r25, Z+8	; 0x08
    6032:	26 2f       	mov	r18, r22
    6034:	30 e0       	ldi	r19, 0x00	; 0
    6036:	f9 01       	movw	r30, r18
    6038:	e2 5a       	subi	r30, 0xA2	; 162
    603a:	f4 4e       	sbci	r31, 0xE4	; 228
    603c:	e4 91       	lpm	r30, Z+
    603e:	ec 01       	movw	r28, r24
    6040:	ee 83       	std	Y+6, r30	; 0x06
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    6042:	51 96       	adiw	r26, 0x11	; 17
    6044:	ed 91       	ld	r30, X+
    6046:	fc 91       	ld	r31, X
    6048:	52 97       	sbiw	r26, 0x12	; 18
    604a:	a7 81       	ldd	r26, Z+7	; 0x07
    604c:	b0 85       	ldd	r27, Z+8	; 0x08
    604e:	27 59       	subi	r18, 0x97	; 151
    6050:	34 4e       	sbci	r19, 0xE4	; 228
    6052:	f9 01       	movw	r30, r18
    6054:	64 91       	lpm	r22, Z+
    6056:	17 96       	adiw	r26, 0x07	; 7
    6058:	6c 93       	st	X, r22
}
    605a:	df 91       	pop	r29
    605c:	cf 91       	pop	r28
    605e:	08 95       	ret

00006060 <xio_putc_usart>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_putc_usart(const uint8_t dev, const char c, FILE *stream)
{
    6060:	cf 93       	push	r28
    6062:	df 93       	push	r29
    6064:	78 2f       	mov	r23, r24
    6066:	da 01       	movw	r26, r20
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
    6068:	87 e1       	ldi	r24, 0x17	; 23
    606a:	78 9f       	mul	r23, r24
    606c:	a0 01       	movw	r20, r0
    606e:	11 24       	eor	r1, r1
    6070:	4f 53       	subi	r20, 0x3F	; 63
    6072:	5c 4d       	sbci	r21, 0xDC	; 220
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6074:	27 2f       	mov	r18, r23
    6076:	30 e0       	ldi	r19, 0x00	; 0
    6078:	87 e1       	ldi	r24, 0x17	; 23
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	28 9f       	mul	r18, r24
    607e:	f0 01       	movw	r30, r0
    6080:	29 9f       	mul	r18, r25
    6082:	f0 0d       	add	r31, r0
    6084:	38 9f       	mul	r19, r24
    6086:	f0 0d       	add	r31, r0
    6088:	11 24       	eor	r1, r1
    608a:	ef 53       	subi	r30, 0x3F	; 63
    608c:	fc 4d       	sbci	r31, 0xDC	; 220
    608e:	c1 89       	ldd	r28, Z+17	; 0x11
    6090:	d2 89       	ldd	r29, Z+18	; 0x12

	if ((dx->next_tx_buf_head = (dx->tx_buf_head)-1) == 0) { // adv. head & wrap
    6092:	8d 81       	ldd	r24, Y+5	; 0x05
    6094:	81 50       	subi	r24, 0x01	; 1
    6096:	8e 83       	std	Y+6, r24	; 0x06
    6098:	88 23       	and	r24, r24
    609a:	11 f4       	brne	.+4      	; 0x60a0 <xio_putc_usart+0x40>
		dx->next_tx_buf_head = TX_BUFFER_SIZE-1;	 // -1 avoids the off-by-one
    609c:	81 e1       	ldi	r24, 0x11	; 17
    609e:	8e 83       	std	Y+6, r24	; 0x06
	}
	while(dx->next_tx_buf_head == dx->tx_buf_tail) { // buf full. sleep or ret
    60a0:	9e 81       	ldd	r25, Y+6	; 0x06
    60a2:	16 c0       	rjmp	.+44     	; 0x60d0 <xio_putc_usart+0x70>
		if (BLOCKING(d->flags)) {
    60a4:	fa 01       	movw	r30, r20
    60a6:	80 81       	ld	r24, Z
    60a8:	82 ff       	sbrs	r24, 2
    60aa:	0c c0       	rjmp	.+24     	; 0x60c4 <xio_putc_usart+0x64>
			sleep_mode();
    60ac:	80 91 48 00 	lds	r24, 0x0048
    60b0:	81 60       	ori	r24, 0x01	; 1
    60b2:	80 93 48 00 	sts	0x0048, r24
    60b6:	88 95       	sleep
    60b8:	80 91 48 00 	lds	r24, 0x0048
    60bc:	8e 7f       	andi	r24, 0xFE	; 254
    60be:	80 93 48 00 	sts	0x0048, r24
    60c2:	06 c0       	rjmp	.+12     	; 0x60d0 <xio_putc_usart+0x70>
		} else {
			d->sig = XIO_SIG_EAGAIN;
    60c4:	81 e0       	ldi	r24, 0x01	; 1
    60c6:	ea 01       	movw	r28, r20
    60c8:	8b 83       	std	Y+3, r24	; 0x03
    60ca:	2f ef       	ldi	r18, 0xFF	; 255
    60cc:	3f ef       	ldi	r19, 0xFF	; 255
    60ce:	52 c0       	rjmp	.+164    	; 0x6174 <xio_putc_usart+0x114>
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer

	if ((dx->next_tx_buf_head = (dx->tx_buf_head)-1) == 0) { // adv. head & wrap
		dx->next_tx_buf_head = TX_BUFFER_SIZE-1;	 // -1 avoids the off-by-one
	}
	while(dx->next_tx_buf_head == dx->tx_buf_tail) { // buf full. sleep or ret
    60d0:	8c 81       	ldd	r24, Y+4	; 0x04
    60d2:	98 17       	cp	r25, r24
    60d4:	39 f3       	breq	.-50     	; 0x60a4 <xio_putc_usart+0x44>
			d->sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	dx->tx_buf_head = dx->next_tx_buf_head;			// accept next buffer head
    60d6:	9d 83       	std	Y+5, r25	; 0x05
	dx->tx_buf[dx->tx_buf_head] = c;				// ...write char to buffer
    60d8:	8d 81       	ldd	r24, Y+5	; 0x05
    60da:	fe 01       	movw	r30, r28
    60dc:	e8 0f       	add	r30, r24
    60de:	f1 1d       	adc	r31, r1
    60e0:	65 8f       	std	Z+29, r22	; 0x1d

	if (CRLF(d->flags) && (c == '\n')) {			// detect LF & add CR
    60e2:	fa 01       	movw	r30, r20
    60e4:	20 81       	ld	r18, Z
    60e6:	31 81       	ldd	r19, Z+1	; 0x01
    60e8:	25 ff       	sbrs	r18, 5
    60ea:	0a c0       	rjmp	.+20     	; 0x6100 <xio_putc_usart+0xa0>
    60ec:	6a 30       	cpi	r22, 0x0A	; 10
    60ee:	41 f4       	brne	.+16     	; 0x6100 <xio_putc_usart+0xa0>
		return d->x_putc('\r', stream);				// recurse
    60f0:	03 84       	ldd	r0, Z+11	; 0x0b
    60f2:	f4 85       	ldd	r31, Z+12	; 0x0c
    60f4:	e0 2d       	mov	r30, r0
    60f6:	8d e0       	ldi	r24, 0x0D	; 13
    60f8:	bd 01       	movw	r22, r26
    60fa:	19 95       	eicall
    60fc:	9c 01       	movw	r18, r24
    60fe:	3a c0       	rjmp	.+116    	; 0x6174 <xio_putc_usart+0x114>
	}

	// dequeue the buffer if DATA register is ready
	if (dx->usart->STATUS & 0x20) {
    6100:	ef 81       	ldd	r30, Y+7	; 0x07
    6102:	f8 85       	ldd	r31, Y+8	; 0x08
    6104:	81 81       	ldd	r24, Z+1	; 0x01
    6106:	85 ff       	sbrs	r24, 5
    6108:	24 c0       	rjmp	.+72     	; 0x6152 <xio_putc_usart+0xf2>
		if (dx->tx_buf_head == dx->tx_buf_tail) {// buf might be empty if IRQ got it
    610a:	9d 81       	ldd	r25, Y+5	; 0x05
    610c:	8c 81       	ldd	r24, Y+4	; 0x04
    610e:	98 17       	cp	r25, r24
    6110:	79 f1       	breq	.+94     	; 0x6170 <xio_putc_usart+0x110>
			return (XIO_OK);
		}
		d->flags |= XIO_FLAG_TX_MUTEX_bm;			// mutual exclusion from ISR
    6112:	38 60       	ori	r19, 0x08	; 8
    6114:	fa 01       	movw	r30, r20
    6116:	20 83       	st	Z, r18
    6118:	31 83       	std	Z+1, r19	; 0x01
		if (--(dx->tx_buf_tail) == 0) {				// advance tail & wrap if needed
    611a:	8c 81       	ldd	r24, Y+4	; 0x04
    611c:	81 50       	subi	r24, 0x01	; 1
    611e:	8c 83       	std	Y+4, r24	; 0x04
    6120:	8c 81       	ldd	r24, Y+4	; 0x04
    6122:	88 23       	and	r24, r24
    6124:	11 f4       	brne	.+4      	; 0x612a <xio_putc_usart+0xca>
			dx->tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoid off-by-one err (OBOE)
    6126:	81 e1       	ldi	r24, 0x11	; 17
    6128:	8c 83       	std	Y+4, r24	; 0x04
		}
		if (dev == XIO_DEV_RS485) {						// HACK
    612a:	77 23       	and	r23, r23
    612c:	21 f4       	brne	.+8      	; 0x6136 <xio_putc_usart+0xd6>
			dx->port->OUTSET = (RS485_DE_bm | RS485_RE_bm);	// enable DE, disable RE
    612e:	e9 85       	ldd	r30, Y+9	; 0x09
    6130:	fa 85       	ldd	r31, Y+10	; 0x0a
    6132:	80 e3       	ldi	r24, 0x30	; 48
    6134:	85 83       	std	Z+5, r24	; 0x05
		}
		dx->usart->DATA = dx->tx_buf[dx->tx_buf_tail];// write to TX DATA reg
    6136:	af 81       	ldd	r26, Y+7	; 0x07
    6138:	b8 85       	ldd	r27, Y+8	; 0x08
    613a:	8c 81       	ldd	r24, Y+4	; 0x04
    613c:	fe 01       	movw	r30, r28
    613e:	e8 0f       	add	r30, r24
    6140:	f1 1d       	adc	r31, r1
    6142:	85 8d       	ldd	r24, Z+29	; 0x1d
    6144:	8c 93       	st	X, r24
		d->flags &= ~XIO_FLAG_TX_MUTEX_bm;			// release mutual exclusion lock
    6146:	fa 01       	movw	r30, r20
    6148:	80 81       	ld	r24, Z
    614a:	91 81       	ldd	r25, Z+1	; 0x01
    614c:	97 7f       	andi	r25, 0xF7	; 247
    614e:	80 83       	st	Z, r24
    6150:	91 83       	std	Z+1, r25	; 0x01
    6152:	ef 81       	ldd	r30, Y+7	; 0x07
    6154:	f8 85       	ldd	r31, Y+8	; 0x08
	}
	// enable interrupts regardless
	if (dev == XIO_DEV_RS485) {						// HACK
    6156:	77 23       	and	r23, r23
    6158:	11 f4       	brne	.+4      	; 0x615e <xio_putc_usart+0xfe>
		dx->usart->CTRLA = CTRLA_RXON_TXON_TXCON;	// doesn't work if you just |= it
    615a:	85 e2       	ldi	r24, 0x25	; 37
    615c:	01 c0       	rjmp	.+2      	; 0x6160 <xio_putc_usart+0x100>
	} else {
		dx->usart->CTRLA = CTRLA_RXON_TXON;			// doesn't work if you just |= it
    615e:	81 e2       	ldi	r24, 0x21	; 33
    6160:	83 83       	std	Z+3, r24	; 0x03
	}
	PMIC_EnableLowLevel(); 							// enable USART TX interrupts
    6162:	80 91 a2 00 	lds	r24, 0x00A2
    6166:	81 60       	ori	r24, 0x01	; 1
    6168:	e0 ea       	ldi	r30, 0xA0	; 160
    616a:	f0 e0       	ldi	r31, 0x00	; 0
    616c:	82 83       	std	Z+2, r24	; 0x02
	sei();											// enable global interrupts
    616e:	78 94       	sei
    6170:	20 e0       	ldi	r18, 0x00	; 0
    6172:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_OK);
}
    6174:	c9 01       	movw	r24, r18
    6176:	df 91       	pop	r29
    6178:	cf 91       	pop	r28
    617a:	08 95       	ret

0000617c <xio_getc_usart>:
 *		  character helper routines. See them for behaviors
 */

int xio_getc_usart(const uint8_t dev, FILE *stream)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
    617c:	97 e1       	ldi	r25, 0x17	; 23
    617e:	89 9f       	mul	r24, r25
    6180:	d0 01       	movw	r26, r0
    6182:	11 24       	eor	r1, r1
    6184:	af 53       	subi	r26, 0x3F	; 63
    6186:	bc 4d       	sbci	r27, 0xDC	; 220
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6188:	48 2f       	mov	r20, r24
    618a:	50 e0       	ldi	r21, 0x00	; 0
    618c:	27 e1       	ldi	r18, 0x17	; 23
    618e:	30 e0       	ldi	r19, 0x00	; 0
    6190:	42 9f       	mul	r20, r18
    6192:	f0 01       	movw	r30, r0
    6194:	43 9f       	mul	r20, r19
    6196:	f0 0d       	add	r31, r0
    6198:	52 9f       	mul	r21, r18
    619a:	f0 0d       	add	r31, r0
    619c:	11 24       	eor	r1, r1
    619e:	ef 53       	subi	r30, 0x3F	; 63
    61a0:	fc 4d       	sbci	r31, 0xDC	; 220
    61a2:	01 88       	ldd	r0, Z+17	; 0x11
    61a4:	f2 89       	ldd	r31, Z+18	; 0x12
    61a6:	e0 2d       	mov	r30, r0

	gdev = dev;										// set dev number global var
    61a8:	80 93 2e 22 	sts	0x222E, r24
    61ac:	15 c0       	rjmp	.+42     	; 0x61d8 <xio_getc_usart+0x5c>

	while (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(d->flags)) {
    61ae:	8c 91       	ld	r24, X
    61b0:	82 ff       	sbrs	r24, 2
    61b2:	0c c0       	rjmp	.+24     	; 0x61cc <xio_getc_usart+0x50>
			sleep_mode();
    61b4:	80 91 48 00 	lds	r24, 0x0048
    61b8:	81 60       	ori	r24, 0x01	; 1
    61ba:	80 93 48 00 	sts	0x0048, r24
    61be:	88 95       	sleep
    61c0:	80 91 48 00 	lds	r24, 0x0048
    61c4:	8e 7f       	andi	r24, 0xFE	; 254
    61c6:	80 93 48 00 	sts	0x0048, r24
    61ca:	06 c0       	rjmp	.+12     	; 0x61d8 <xio_getc_usart+0x5c>
		} else {
			d->sig = XIO_SIG_EAGAIN;
    61cc:	81 e0       	ldi	r24, 0x01	; 1
    61ce:	13 96       	adiw	r26, 0x03	; 3
    61d0:	8c 93       	st	X, r24
    61d2:	2f ef       	ldi	r18, 0xFF	; 255
    61d4:	3f ef       	ldi	r19, 0xFF	; 255
    61d6:	1e c0       	rjmp	.+60     	; 0x6214 <xio_getc_usart+0x98>
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer

	gdev = dev;										// set dev number global var

	while (dx->rx_buf_head == dx->rx_buf_tail) {	// RX ISR buffer empty
    61d8:	93 81       	ldd	r25, Z+3	; 0x03
    61da:	82 81       	ldd	r24, Z+2	; 0x02
    61dc:	98 17       	cp	r25, r24
    61de:	39 f3       	breq	.-50     	; 0x61ae <xio_getc_usart+0x32>
		} else {
			d->sig = XIO_SIG_EAGAIN;
			return(_FDEV_ERR);
		}
	}
	if (--(dx->rx_buf_tail) == 0) {				// advance RX tail (RXQ read ptr)
    61e0:	82 81       	ldd	r24, Z+2	; 0x02
    61e2:	81 50       	subi	r24, 0x01	; 1
    61e4:	82 83       	std	Z+2, r24	; 0x02
    61e6:	82 81       	ldd	r24, Z+2	; 0x02
    61e8:	88 23       	and	r24, r24
    61ea:	11 f4       	brne	.+4      	; 0x61f0 <xio_getc_usart+0x74>
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    61ec:	81 e1       	ldi	r24, 0x11	; 17
    61ee:	82 83       	std	Z+2, r24	; 0x02
	}
	d->c = (dx->rx_buf[dx->rx_buf_tail] & 0x007F);// get char from RX buf & mask MSB
    61f0:	82 81       	ldd	r24, Z+2	; 0x02
    61f2:	e8 0f       	add	r30, r24
    61f4:	f1 1d       	adc	r31, r1
    61f6:	83 85       	ldd	r24, Z+11	; 0x0b
    61f8:	8f 77       	andi	r24, 0x7F	; 127
    61fa:	14 96       	adiw	r26, 0x04	; 4
    61fc:	8c 93       	st	X, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[d->c])))());
    61fe:	90 e0       	ldi	r25, 0x00	; 0
    6200:	88 0f       	add	r24, r24
    6202:	99 1f       	adc	r25, r25
    6204:	8c 58       	subi	r24, 0x8C	; 140
    6206:	93 4e       	sbci	r25, 0xE3	; 227
    6208:	fc 01       	movw	r30, r24
    620a:	25 91       	lpm	r18, Z+
    620c:	34 91       	lpm	r19, Z+
    620e:	f9 01       	movw	r30, r18
    6210:	19 95       	eicall
    6212:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    6214:	c9 01       	movw	r24, r18
    6216:	08 95       	ret

00006218 <_getc_char>:

// xio_getc_usart helper routines

static int _getc_char(void)
{
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    6218:	80 91 2e 22 	lds	r24, 0x222E
    621c:	90 e0       	ldi	r25, 0x00	; 0
    621e:	27 e1       	ldi	r18, 0x17	; 23
    6220:	30 e0       	ldi	r19, 0x00	; 0
    6222:	82 9f       	mul	r24, r18
    6224:	d0 01       	movw	r26, r0
    6226:	83 9f       	mul	r24, r19
    6228:	b0 0d       	add	r27, r0
    622a:	92 9f       	mul	r25, r18
    622c:	b0 0d       	add	r27, r0
    622e:	11 24       	eor	r1, r1
    6230:	af 53       	subi	r26, 0x3F	; 63
    6232:	bc 4d       	sbci	r27, 0xDC	; 220
    6234:	8c 91       	ld	r24, X
    6236:	84 ff       	sbrs	r24, 4
    6238:	0b c0       	rjmp	.+22     	; 0x6250 <_getc_char+0x38>
    623a:	60 91 02 25 	lds	r22, 0x2502
    623e:	70 91 03 25 	lds	r23, 0x2503
    6242:	1b 96       	adiw	r26, 0x0b	; 11
    6244:	ed 91       	ld	r30, X+
    6246:	fc 91       	ld	r31, X
    6248:	1c 97       	sbiw	r26, 0x0c	; 12
    624a:	14 96       	adiw	r26, 0x04	; 4
    624c:	8c 91       	ld	r24, X
    624e:	19 95       	eicall
    6250:	80 91 2e 22 	lds	r24, 0x222E
    6254:	90 e0       	ldi	r25, 0x00	; 0
    6256:	27 e1       	ldi	r18, 0x17	; 23
    6258:	30 e0       	ldi	r19, 0x00	; 0
    625a:	82 9f       	mul	r24, r18
    625c:	f0 01       	movw	r30, r0
    625e:	83 9f       	mul	r24, r19
    6260:	f0 0d       	add	r31, r0
    6262:	92 9f       	mul	r25, r18
    6264:	f0 0d       	add	r31, r0
    6266:	11 24       	eor	r1, r1
    6268:	ef 53       	subi	r30, 0x3F	; 63
    626a:	fc 4d       	sbci	r31, 0xDC	; 220
	return(ds[gdev].c);
}
    626c:	84 81       	ldd	r24, Z+4	; 0x04
    626e:	90 e0       	ldi	r25, 0x00	; 0
    6270:	08 95       	ret

00006272 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(ds[gdev].flags)) ds[gdev].c = '\n';
    6272:	80 91 2e 22 	lds	r24, 0x222E
    6276:	28 2f       	mov	r18, r24
    6278:	30 e0       	ldi	r19, 0x00	; 0
    627a:	87 e1       	ldi	r24, 0x17	; 23
    627c:	90 e0       	ldi	r25, 0x00	; 0
    627e:	28 9f       	mul	r18, r24
    6280:	f0 01       	movw	r30, r0
    6282:	29 9f       	mul	r18, r25
    6284:	f0 0d       	add	r31, r0
    6286:	38 9f       	mul	r19, r24
    6288:	f0 0d       	add	r31, r0
    628a:	11 24       	eor	r1, r1
    628c:	ef 53       	subi	r30, 0x3F	; 63
    628e:	fc 4d       	sbci	r31, 0xDC	; 220
    6290:	80 81       	ld	r24, Z
    6292:	86 ff       	sbrs	r24, 6
    6294:	02 c0       	rjmp	.+4      	; 0x629a <_getc_NEWLINE+0x28>
    6296:	8a e0       	ldi	r24, 0x0A	; 10
    6298:	84 83       	std	Z+4, r24	; 0x04
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    629a:	87 e1       	ldi	r24, 0x17	; 23
    629c:	90 e0       	ldi	r25, 0x00	; 0
    629e:	28 9f       	mul	r18, r24
    62a0:	d0 01       	movw	r26, r0
    62a2:	29 9f       	mul	r18, r25
    62a4:	b0 0d       	add	r27, r0
    62a6:	38 9f       	mul	r19, r24
    62a8:	b0 0d       	add	r27, r0
    62aa:	11 24       	eor	r1, r1
    62ac:	af 53       	subi	r26, 0x3F	; 63
    62ae:	bc 4d       	sbci	r27, 0xDC	; 220
    62b0:	8c 91       	ld	r24, X
    62b2:	84 ff       	sbrs	r24, 4
    62b4:	0b c0       	rjmp	.+22     	; 0x62cc <_getc_NEWLINE+0x5a>
    62b6:	60 91 02 25 	lds	r22, 0x2502
    62ba:	70 91 03 25 	lds	r23, 0x2503
    62be:	1b 96       	adiw	r26, 0x0b	; 11
    62c0:	ed 91       	ld	r30, X+
    62c2:	fc 91       	ld	r31, X
    62c4:	1c 97       	sbiw	r26, 0x0c	; 12
    62c6:	14 96       	adiw	r26, 0x04	; 4
    62c8:	8c 91       	ld	r24, X
    62ca:	19 95       	eicall
    62cc:	80 91 2e 22 	lds	r24, 0x222E
    62d0:	90 e0       	ldi	r25, 0x00	; 0
    62d2:	27 e1       	ldi	r18, 0x17	; 23
    62d4:	30 e0       	ldi	r19, 0x00	; 0
    62d6:	82 9f       	mul	r24, r18
    62d8:	f0 01       	movw	r30, r0
    62da:	83 9f       	mul	r24, r19
    62dc:	f0 0d       	add	r31, r0
    62de:	92 9f       	mul	r25, r18
    62e0:	f0 0d       	add	r31, r0
    62e2:	11 24       	eor	r1, r1
    62e4:	ef 53       	subi	r30, 0x3F	; 63
    62e6:	fc 4d       	sbci	r31, 0xDC	; 220
	return(ds[gdev].c);
}
    62e8:	84 81       	ldd	r24, Z+4	; 0x04
    62ea:	90 e0       	ldi	r25, 0x00	; 0
    62ec:	08 95       	ret

000062ee <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(ds[gdev].flags)) {
    62ee:	80 91 2e 22 	lds	r24, 0x222E
    62f2:	90 e0       	ldi	r25, 0x00	; 0
    62f4:	27 e1       	ldi	r18, 0x17	; 23
    62f6:	30 e0       	ldi	r19, 0x00	; 0
    62f8:	82 9f       	mul	r24, r18
    62fa:	f0 01       	movw	r30, r0
    62fc:	83 9f       	mul	r24, r19
    62fe:	f0 0d       	add	r31, r0
    6300:	92 9f       	mul	r25, r18
    6302:	f0 0d       	add	r31, r0
    6304:	11 24       	eor	r1, r1
    6306:	ef 53       	subi	r30, 0x3F	; 63
    6308:	fc 4d       	sbci	r31, 0xDC	; 220
    630a:	80 81       	ld	r24, Z
    630c:	87 ff       	sbrs	r24, 7
    630e:	03 c0       	rjmp	.+6      	; 0x6316 <_getc_SEMICOLON+0x28>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    6310:	0e 94 39 31 	call	0x6272	; 0x6272 <_getc_NEWLINE>
    6314:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    6316:	0e 94 0c 31 	call	0x6218	; 0x6218 <_getc_char>
}
    631a:	08 95       	ret

0000631c <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	ds[gdev].sig = XIO_SIG_DELETE;
    631c:	80 91 2e 22 	lds	r24, 0x222E
    6320:	90 e0       	ldi	r25, 0x00	; 0
    6322:	27 e1       	ldi	r18, 0x17	; 23
    6324:	30 e0       	ldi	r19, 0x00	; 0
    6326:	82 9f       	mul	r24, r18
    6328:	f0 01       	movw	r30, r0
    632a:	83 9f       	mul	r24, r19
    632c:	f0 0d       	add	r31, r0
    632e:	92 9f       	mul	r25, r18
    6330:	f0 0d       	add	r31, r0
    6332:	11 24       	eor	r1, r1
    6334:	ef 53       	subi	r30, 0x3F	; 63
    6336:	fc 4d       	sbci	r31, 0xDC	; 220
    6338:	89 e0       	ldi	r24, 0x09	; 9
    633a:	83 83       	std	Z+3, r24	; 0x03
	return(_FDEV_ERR);
}
    633c:	8f ef       	ldi	r24, 0xFF	; 255
    633e:	9f ef       	ldi	r25, 0xFF	; 255
    6340:	08 95       	ret

00006342 <xio_readln_usart>:
 *
 *	Note: LINEMODE flag in device struct is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_usart(const uint8_t dev, char *buf, const uint8_t size)
{
    6342:	ff 92       	push	r15
    6344:	0f 93       	push	r16
    6346:	1f 93       	push	r17
    6348:	cf 93       	push	r28
    634a:	df 93       	push	r29
    634c:	28 2f       	mov	r18, r24
	struct xioDEVICE *d = &ds[dev];				// init device struct pointer
    634e:	87 e1       	ldi	r24, 0x17	; 23
    6350:	28 9f       	mul	r18, r24
    6352:	e0 01       	movw	r28, r0
    6354:	11 24       	eor	r1, r1
    6356:	cf 53       	subi	r28, 0x3F	; 63
    6358:	dc 4d       	sbci	r29, 0xDC	; 220
	
	gdev = dev;									// set the global device number
    635a:	20 93 2e 22 	sts	0x222E, r18

	if (!IN_LINE(d->flags)) {					// first time thru initializations
    635e:	88 81       	ld	r24, Y
    6360:	99 81       	ldd	r25, Y+1	; 0x01
    6362:	96 fd       	sbrc	r25, 6
    6364:	09 c0       	rjmp	.+18     	; 0x6378 <xio_readln_usart+0x36>
		d->len = 0;								// zero buffer
    6366:	1d 82       	std	Y+5, r1	; 0x05
		d->status = 0;
    6368:	1a 82       	std	Y+2, r1	; 0x02
		d->size = size;
    636a:	4e 83       	std	Y+6, r20	; 0x06
		d->buf = buf;
    636c:	6d 8b       	std	Y+21, r22	; 0x15
    636e:	7e 8b       	std	Y+22, r23	; 0x16
		d->sig = XIO_SIG_OK;					// reset signal register
    6370:	1b 82       	std	Y+3, r1	; 0x03
		d->flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    6372:	90 64       	ori	r25, 0x40	; 64
    6374:	88 83       	st	Y, r24
    6376:	99 83       	std	Y+1, r25	; 0x01
 */

static int _xio_readc_usart(const uint8_t dev, const char *buf)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6378:	30 e0       	ldi	r19, 0x00	; 0
    637a:	87 e1       	ldi	r24, 0x17	; 23
    637c:	90 e0       	ldi	r25, 0x00	; 0
    637e:	28 9f       	mul	r18, r24
    6380:	80 01       	movw	r16, r0
    6382:	29 9f       	mul	r18, r25
    6384:	10 0d       	add	r17, r0
    6386:	38 9f       	mul	r19, r24
    6388:	10 0d       	add	r17, r0
    638a:	11 24       	eor	r1, r1
    638c:	0e 52       	subi	r16, 0x2E	; 46
    638e:	1c 4d       	sbci	r17, 0xDC	; 220

	if (dx->rx_buf_head == dx->rx_buf_tail) {		// RX ISR buffer empty
		return(XIO_BUFFER_EMPTY);
	}
	if (--(dx->rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6390:	41 e1       	ldi	r20, 0x11	; 17
    6392:	f4 2e       	mov	r15, r20
 */

static int _xio_readc_usart(const uint8_t dev, const char *buf)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6394:	d8 01       	movw	r26, r16
    6396:	ed 91       	ld	r30, X+
    6398:	fc 91       	ld	r31, X

	if (dx->rx_buf_head == dx->rx_buf_tail) {		// RX ISR buffer empty
    639a:	93 81       	ldd	r25, Z+3	; 0x03
    639c:	82 81       	ldd	r24, Z+2	; 0x02
    639e:	98 17       	cp	r25, r24
    63a0:	19 f4       	brne	.+6      	; 0x63a8 <xio_readln_usart+0x66>
    63a2:	88 e0       	ldi	r24, 0x08	; 8
    63a4:	90 e0       	ldi	r25, 0x00	; 0
    63a6:	17 c0       	rjmp	.+46     	; 0x63d6 <xio_readln_usart+0x94>
		return(XIO_BUFFER_EMPTY);
	}
	if (--(dx->rx_buf_tail) == 0) {			// advance RX tail (RX q read ptr)
    63a8:	82 81       	ldd	r24, Z+2	; 0x02
    63aa:	81 50       	subi	r24, 0x01	; 1
    63ac:	82 83       	std	Z+2, r24	; 0x02
    63ae:	82 81       	ldd	r24, Z+2	; 0x02
    63b0:	88 23       	and	r24, r24
    63b2:	09 f4       	brne	.+2      	; 0x63b6 <xio_readln_usart+0x74>
		dx->rx_buf_tail = RX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    63b4:	f2 82       	std	Z+2, r15	; 0x02
	}
	d->c = (dx->rx_buf[dx->rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    63b6:	82 81       	ldd	r24, Z+2	; 0x02
    63b8:	e8 0f       	add	r30, r24
    63ba:	f1 1d       	adc	r31, r1
    63bc:	83 85       	ldd	r24, Z+11	; 0x0b
    63be:	8f 77       	andi	r24, 0x7F	; 127
    63c0:	8c 83       	std	Y+4, r24	; 0x04
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[d->c])))()); // dispatch char
    63c2:	90 e0       	ldi	r25, 0x00	; 0
    63c4:	88 0f       	add	r24, r24
    63c6:	99 1f       	adc	r25, r25
    63c8:	8c 58       	subi	r24, 0x8C	; 140
    63ca:	94 4e       	sbci	r25, 0xE4	; 228
    63cc:	fc 01       	movw	r30, r24
    63ce:	25 91       	lpm	r18, Z+
    63d0:	34 91       	lpm	r19, Z+
    63d2:	f9 01       	movw	r30, r18
    63d4:	19 95       	eicall
		d->buf = buf;
		d->sig = XIO_SIG_OK;					// reset signal register
		d->flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
	}
	while (TRUE) { 
		switch (d->status = _xio_readc_usart(dev, d->buf)) {
    63d6:	8a 83       	std	Y+2, r24	; 0x02
    63d8:	88 30       	cpi	r24, 0x08	; 8
    63da:	41 f0       	breq	.+16     	; 0x63ec <xio_readln_usart+0xaa>
    63dc:	8a 30       	cpi	r24, 0x0A	; 10
    63de:	19 f0       	breq	.+6      	; 0x63e6 <xio_readln_usart+0xa4>
    63e0:	84 30       	cpi	r24, 0x04	; 4
    63e2:	c1 f6       	brne	.-80     	; 0x6394 <xio_readln_usart+0x52>
    63e4:	06 c0       	rjmp	.+12     	; 0x63f2 <xio_readln_usart+0xb0>
    63e6:	2a e0       	ldi	r18, 0x0A	; 10
    63e8:	30 e0       	ldi	r19, 0x00	; 0
    63ea:	05 c0       	rjmp	.+10     	; 0x63f6 <xio_readln_usart+0xb4>
    63ec:	22 e0       	ldi	r18, 0x02	; 2
    63ee:	30 e0       	ldi	r19, 0x00	; 0
    63f0:	02 c0       	rjmp	.+4      	; 0x63f6 <xio_readln_usart+0xb4>
    63f2:	20 e0       	ldi	r18, 0x00	; 0
    63f4:	30 e0       	ldi	r19, 0x00	; 0
			case (XIO_EAGAIN): break;							// loop
		}
		// +++ put a size check here of buffers can overrun.
	}
	return (XIO_OK);
}
    63f6:	c9 01       	movw	r24, r18
    63f8:	df 91       	pop	r29
    63fa:	cf 91       	pop	r28
    63fc:	1f 91       	pop	r17
    63fe:	0f 91       	pop	r16
    6400:	ff 90       	pop	r15
    6402:	08 95       	ret

00006404 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (ds[gdev].len > ds[gdev].size) {			// trap buffer overflow
    6404:	80 91 2e 22 	lds	r24, 0x222E
    6408:	90 e0       	ldi	r25, 0x00	; 0
    640a:	27 e1       	ldi	r18, 0x17	; 23
    640c:	30 e0       	ldi	r19, 0x00	; 0
    640e:	82 9f       	mul	r24, r18
    6410:	d0 01       	movw	r26, r0
    6412:	83 9f       	mul	r24, r19
    6414:	b0 0d       	add	r27, r0
    6416:	92 9f       	mul	r25, r18
    6418:	b0 0d       	add	r27, r0
    641a:	11 24       	eor	r1, r1
    641c:	af 53       	subi	r26, 0x3F	; 63
    641e:	bc 4d       	sbci	r27, 0xDC	; 220
    6420:	15 96       	adiw	r26, 0x05	; 5
    6422:	9c 91       	ld	r25, X
    6424:	15 97       	sbiw	r26, 0x05	; 5
    6426:	16 96       	adiw	r26, 0x06	; 6
    6428:	2c 91       	ld	r18, X
    642a:	16 97       	sbiw	r26, 0x06	; 6
    642c:	29 17       	cp	r18, r25
    642e:	70 f4       	brcc	.+28     	; 0x644c <_readln_char+0x48>
		ds[gdev].sig = XIO_SIG_EOL;
    6430:	82 e0       	ldi	r24, 0x02	; 2
    6432:	13 96       	adiw	r26, 0x03	; 3
    6434:	8c 93       	st	X, r24
    6436:	13 97       	sbiw	r26, 0x03	; 3
		ds[gdev].buf[ds[gdev].size] = NUL;		// size is zero based
    6438:	55 96       	adiw	r26, 0x15	; 21
    643a:	ed 91       	ld	r30, X+
    643c:	fc 91       	ld	r31, X
    643e:	56 97       	sbiw	r26, 0x16	; 22
    6440:	e2 0f       	add	r30, r18
    6442:	f1 1d       	adc	r31, r1
    6444:	10 82       	st	Z, r1
    6446:	2a e0       	ldi	r18, 0x0A	; 10
    6448:	30 e0       	ldi	r19, 0x00	; 0
    644a:	1e c0       	rjmp	.+60     	; 0x6488 <_readln_char+0x84>
		return (XIO_BUFFER_FULL_NON_FATAL);
	}
	ds[gdev].buf[ds[gdev].len++] = ds[gdev].c;
    644c:	55 96       	adiw	r26, 0x15	; 21
    644e:	ed 91       	ld	r30, X+
    6450:	fc 91       	ld	r31, X
    6452:	56 97       	sbiw	r26, 0x16	; 22
    6454:	e9 0f       	add	r30, r25
    6456:	f1 1d       	adc	r31, r1
    6458:	14 96       	adiw	r26, 0x04	; 4
    645a:	8c 91       	ld	r24, X
    645c:	14 97       	sbiw	r26, 0x04	; 4
    645e:	80 83       	st	Z, r24
    6460:	9f 5f       	subi	r25, 0xFF	; 255
    6462:	15 96       	adiw	r26, 0x05	; 5
    6464:	9c 93       	st	X, r25
    6466:	15 97       	sbiw	r26, 0x05	; 5
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);// conditional echo
    6468:	8c 91       	ld	r24, X
    646a:	84 ff       	sbrs	r24, 4
    646c:	0b c0       	rjmp	.+22     	; 0x6484 <_readln_char+0x80>
    646e:	60 91 02 25 	lds	r22, 0x2502
    6472:	70 91 03 25 	lds	r23, 0x2503
    6476:	1b 96       	adiw	r26, 0x0b	; 11
    6478:	ed 91       	ld	r30, X+
    647a:	fc 91       	ld	r31, X
    647c:	1c 97       	sbiw	r26, 0x0c	; 12
    647e:	14 96       	adiw	r26, 0x04	; 4
    6480:	8c 91       	ld	r24, X
    6482:	19 95       	eicall
    6484:	22 e0       	ldi	r18, 0x02	; 2
    6486:	30 e0       	ldi	r19, 0x00	; 0
	return (XIO_EAGAIN);						// line is still in process
}
    6488:	c9 01       	movw	r24, r18
    648a:	08 95       	ret

0000648c <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	ds[gdev].sig = XIO_SIG_EOL;
    648c:	80 91 2e 22 	lds	r24, 0x222E
    6490:	90 e0       	ldi	r25, 0x00	; 0
    6492:	27 e1       	ldi	r18, 0x17	; 23
    6494:	30 e0       	ldi	r19, 0x00	; 0
    6496:	82 9f       	mul	r24, r18
    6498:	d0 01       	movw	r26, r0
    649a:	83 9f       	mul	r24, r19
    649c:	b0 0d       	add	r27, r0
    649e:	92 9f       	mul	r25, r18
    64a0:	b0 0d       	add	r27, r0
    64a2:	11 24       	eor	r1, r1
    64a4:	af 53       	subi	r26, 0x3F	; 63
    64a6:	bc 4d       	sbci	r27, 0xDC	; 220
    64a8:	82 e0       	ldi	r24, 0x02	; 2
    64aa:	13 96       	adiw	r26, 0x03	; 3
    64ac:	8c 93       	st	X, r24
    64ae:	13 97       	sbiw	r26, 0x03	; 3
	ds[gdev].buf[ds[gdev].len] = NUL;
    64b0:	15 96       	adiw	r26, 0x05	; 5
    64b2:	8c 91       	ld	r24, X
    64b4:	15 97       	sbiw	r26, 0x05	; 5
    64b6:	55 96       	adiw	r26, 0x15	; 21
    64b8:	ed 91       	ld	r30, X+
    64ba:	fc 91       	ld	r31, X
    64bc:	56 97       	sbiw	r26, 0x16	; 22
    64be:	e8 0f       	add	r30, r24
    64c0:	f1 1d       	adc	r31, r1
    64c2:	10 82       	st	Z, r1
	ds[gdev].flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    64c4:	2d 91       	ld	r18, X+
    64c6:	3c 91       	ld	r19, X
    64c8:	11 97       	sbiw	r26, 0x01	; 1
    64ca:	c9 01       	movw	r24, r18
    64cc:	9f 7b       	andi	r25, 0xBF	; 191
    64ce:	8d 93       	st	X+, r24
    64d0:	9c 93       	st	X, r25
    64d2:	11 97       	sbiw	r26, 0x01	; 1
	if (ECHO(ds[gdev].flags)) ds[gdev].x_putc('\n',stdout);// echo a newline
    64d4:	24 ff       	sbrs	r18, 4
    64d6:	0a c0       	rjmp	.+20     	; 0x64ec <_readln_NEWLINE+0x60>
    64d8:	60 91 02 25 	lds	r22, 0x2502
    64dc:	70 91 03 25 	lds	r23, 0x2503
    64e0:	1b 96       	adiw	r26, 0x0b	; 11
    64e2:	ed 91       	ld	r30, X+
    64e4:	fc 91       	ld	r31, X
    64e6:	1c 97       	sbiw	r26, 0x0c	; 12
    64e8:	8a e0       	ldi	r24, 0x0A	; 10
    64ea:	19 95       	eicall
	return (XIO_EOL);							// return for end-of-line
}
    64ec:	84 e0       	ldi	r24, 0x04	; 4
    64ee:	90 e0       	ldi	r25, 0x00	; 0
    64f0:	08 95       	ret

000064f2 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newln
{
	if (SEMICOLONS(ds[gdev].flags)) {
    64f2:	80 91 2e 22 	lds	r24, 0x222E
    64f6:	90 e0       	ldi	r25, 0x00	; 0
    64f8:	27 e1       	ldi	r18, 0x17	; 23
    64fa:	30 e0       	ldi	r19, 0x00	; 0
    64fc:	82 9f       	mul	r24, r18
    64fe:	f0 01       	movw	r30, r0
    6500:	83 9f       	mul	r24, r19
    6502:	f0 0d       	add	r31, r0
    6504:	92 9f       	mul	r25, r18
    6506:	f0 0d       	add	r31, r0
    6508:	11 24       	eor	r1, r1
    650a:	ef 53       	subi	r30, 0x3F	; 63
    650c:	fc 4d       	sbci	r31, 0xDC	; 220
    650e:	80 81       	ld	r24, Z
    6510:	87 ff       	sbrs	r24, 7
    6512:	03 c0       	rjmp	.+6      	; 0x651a <_readln_SEMICOLON+0x28>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    6514:	0e 94 46 32 	call	0x648c	; 0x648c <_readln_NEWLINE>
    6518:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    651a:	0e 94 02 32 	call	0x6404	; 0x6404 <_readln_char>
	}
}
    651e:	08 95       	ret

00006520 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--ds[gdev].len >= 0) {
    6520:	80 91 2e 22 	lds	r24, 0x222E
    6524:	90 e0       	ldi	r25, 0x00	; 0
    6526:	27 e1       	ldi	r18, 0x17	; 23
    6528:	30 e0       	ldi	r19, 0x00	; 0
    652a:	82 9f       	mul	r24, r18
    652c:	d0 01       	movw	r26, r0
    652e:	83 9f       	mul	r24, r19
    6530:	b0 0d       	add	r27, r0
    6532:	92 9f       	mul	r25, r18
    6534:	b0 0d       	add	r27, r0
    6536:	11 24       	eor	r1, r1
    6538:	af 53       	subi	r26, 0x3F	; 63
    653a:	bc 4d       	sbci	r27, 0xDC	; 220
    653c:	15 96       	adiw	r26, 0x05	; 5
    653e:	8c 91       	ld	r24, X
    6540:	15 97       	sbiw	r26, 0x05	; 5
    6542:	81 50       	subi	r24, 0x01	; 1
    6544:	15 96       	adiw	r26, 0x05	; 5
    6546:	8c 93       	st	X, r24
    6548:	15 97       	sbiw	r26, 0x05	; 5
		if (ECHO(ds[gdev].flags)) ds[gdev].x_putc(ds[gdev].c, stdout);
    654a:	8c 91       	ld	r24, X
    654c:	84 ff       	sbrs	r24, 4
    654e:	0b c0       	rjmp	.+22     	; 0x6566 <_readln_DELETE+0x46>
    6550:	60 91 02 25 	lds	r22, 0x2502
    6554:	70 91 03 25 	lds	r23, 0x2503
    6558:	1b 96       	adiw	r26, 0x0b	; 11
    655a:	ed 91       	ld	r30, X+
    655c:	fc 91       	ld	r31, X
    655e:	1c 97       	sbiw	r26, 0x0c	; 12
    6560:	14 96       	adiw	r26, 0x04	; 4
    6562:	8c 91       	ld	r24, X
    6564:	19 95       	eicall
	} else {
		ds[gdev].len = 0;
	}
	return (XIO_EAGAIN);						// line is still in process
}
    6566:	82 e0       	ldi	r24, 0x02	; 2
    6568:	90 e0       	ldi	r25, 0x00	; 0
    656a:	08 95       	ret

0000656c <xio_queue_RX_char_usart>:
 */

void xio_queue_RX_char_usart(const uint8_t dev, const char c)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    656c:	90 e0       	ldi	r25, 0x00	; 0
    656e:	27 e1       	ldi	r18, 0x17	; 23
    6570:	30 e0       	ldi	r19, 0x00	; 0
    6572:	82 9f       	mul	r24, r18
    6574:	f0 01       	movw	r30, r0
    6576:	83 9f       	mul	r24, r19
    6578:	f0 0d       	add	r31, r0
    657a:	92 9f       	mul	r25, r18
    657c:	f0 0d       	add	r31, r0
    657e:	11 24       	eor	r1, r1
    6580:	ef 53       	subi	r30, 0x3F	; 63
    6582:	fc 4d       	sbci	r31, 0xDC	; 220
    6584:	81 89       	ldd	r24, Z+17	; 0x11
    6586:	92 89       	ldd	r25, Z+18	; 0x12

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6588:	63 30       	cpi	r22, 0x03	; 3
    658a:	29 f4       	brne	.+10     	; 0x6596 <xio_queue_RX_char_usart+0x2a>
		d->sig = XIO_SIG_KILL;					// set signal value
    658c:	84 e0       	ldi	r24, 0x04	; 4
    658e:	83 83       	std	Z+3, r24	; 0x03
		signal_etx();							// call app-specific signal handler
    6590:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <signal_etx>
    6594:	08 95       	ret
 */

void xio_queue_RX_char_usart(const uint8_t dev, const char c)
{
	struct xioDEVICE *d = &ds[dev];					// init device struct pointer
	struct xioUSART *dx = ((struct xioUSART *)(ds[dev].x));	// init USART pointer
    6596:	fc 01       	movw	r30, r24
		signal_etx();							// call app-specific signal handler
		return;
	}

	// normal path
	if ((--dx->rx_buf_head) == 0) { 			// wrap condition
    6598:	83 81       	ldd	r24, Z+3	; 0x03
    659a:	81 50       	subi	r24, 0x01	; 1
    659c:	83 83       	std	Z+3, r24	; 0x03
    659e:	83 81       	ldd	r24, Z+3	; 0x03
    65a0:	88 23       	and	r24, r24
    65a2:	11 f4       	brne	.+4      	; 0x65a8 <xio_queue_RX_char_usart+0x3c>
		dx->rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    65a4:	81 e1       	ldi	r24, 0x11	; 17
    65a6:	83 83       	std	Z+3, r24	; 0x03
	}
	if (dx->rx_buf_head != dx->rx_buf_tail) {// write char unless buffer full
    65a8:	93 81       	ldd	r25, Z+3	; 0x03
    65aa:	82 81       	ldd	r24, Z+2	; 0x02
    65ac:	98 17       	cp	r25, r24
    65ae:	29 f0       	breq	.+10     	; 0x65ba <xio_queue_RX_char_usart+0x4e>
		dx->rx_buf[dx->rx_buf_head] = c;	// FAKE INPUT DATA
    65b0:	83 81       	ldd	r24, Z+3	; 0x03
    65b2:	e8 0f       	add	r30, r24
    65b4:	f1 1d       	adc	r31, r1
    65b6:	63 87       	std	Z+11, r22	; 0x0b
    65b8:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++dx->rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    65ba:	83 81       	ldd	r24, Z+3	; 0x03
    65bc:	8f 5f       	subi	r24, 0xFF	; 255
    65be:	83 83       	std	Z+3, r24	; 0x03
    65c0:	83 81       	ldd	r24, Z+3	; 0x03
    65c2:	82 31       	cpi	r24, 0x12	; 18
    65c4:	10 f0       	brcs	.+4      	; 0x65ca <xio_queue_RX_char_usart+0x5e>
		dx->rx_buf_head = 1;
    65c6:	81 e0       	ldi	r24, 0x01	; 1
    65c8:	83 83       	std	Z+3, r24	; 0x03
    65ca:	08 95       	ret

000065cc <xio_queue_RX_string_usart>:
/*
 * xio_queue_RX_string_usart() - fake ISR to put a string in the RX buffer
 */

void xio_queue_RX_string_usart(const uint8_t dev, const char *buf)
{
    65cc:	0f 93       	push	r16
    65ce:	1f 93       	push	r17
    65d0:	cf 93       	push	r28
    65d2:	df 93       	push	r29
    65d4:	08 2f       	mov	r16, r24
    65d6:	eb 01       	movw	r28, r22
    65d8:	10 e0       	ldi	r17, 0x00	; 0
    65da:	03 c0       	rjmp	.+6      	; 0x65e2 <xio_queue_RX_string_usart+0x16>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_queue_RX_char_usart(dev, c);
    65dc:	80 2f       	mov	r24, r16
    65de:	0e 94 b6 32 	call	0x656c	; 0x656c <xio_queue_RX_char_usart>
void xio_queue_RX_string_usart(const uint8_t dev, const char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    65e2:	fe 01       	movw	r30, r28
    65e4:	e1 0f       	add	r30, r17
    65e6:	f1 1d       	adc	r31, r1
    65e8:	60 81       	ld	r22, Z
    65ea:	1f 5f       	subi	r17, 0xFF	; 255
    65ec:	66 23       	and	r22, r22
    65ee:	b1 f7       	brne	.-20     	; 0x65dc <xio_queue_RX_string_usart+0x10>
		xio_queue_RX_char_usart(dev, c);
	}
}
    65f0:	df 91       	pop	r29
    65f2:	cf 91       	pop	r28
    65f4:	1f 91       	pop	r17
    65f6:	0f 91       	pop	r16
    65f8:	08 95       	ret

000065fa <xio_init_usart>:
					const struct PORT_struct *port_addr,
					const uint8_t dirclr, 
					const uint8_t dirset, 
					const uint8_t outclr, 
					const uint8_t outset) 
{
    65fa:	8f 92       	push	r8
    65fc:	9f 92       	push	r9
    65fe:	af 92       	push	r10
    6600:	bf 92       	push	r11
    6602:	cf 92       	push	r12
    6604:	df 92       	push	r13
    6606:	ef 92       	push	r14
    6608:	ff 92       	push	r15
    660a:	0f 93       	push	r16
    660c:	1f 93       	push	r17
    660e:	df 93       	push	r29
    6610:	cf 93       	push	r28
    6612:	cd b7       	in	r28, 0x3d	; 61
    6614:	de b7       	in	r29, 0x3e	; 62
    6616:	b8 2e       	mov	r11, r24
    6618:	f4 2e       	mov	r15, r20
    661a:	9c 2c       	mov	r9, r12
	// do all the bindings first (and in this order)
	struct xioDEVICE *d = &ds[dev];					// setup device struct pointer
	d->x = &us[offset];								// bind USART struct to device
    661c:	8f e2       	ldi	r24, 0x2F	; 47
    661e:	68 9f       	mul	r22, r24
    6620:	60 01       	movw	r12, r0
    6622:	11 24       	eor	r1, r1
    6624:	82 e2       	ldi	r24, 0x22	; 34
    6626:	93 e2       	ldi	r25, 0x23	; 35
    6628:	c8 0e       	add	r12, r24
    662a:	d9 1e       	adc	r13, r25
    662c:	6b 2d       	mov	r22, r11
    662e:	70 e0       	ldi	r23, 0x00	; 0
    6630:	87 e1       	ldi	r24, 0x17	; 23
    6632:	90 e0       	ldi	r25, 0x00	; 0
    6634:	68 9f       	mul	r22, r24
    6636:	f0 01       	movw	r30, r0
    6638:	69 9f       	mul	r22, r25
    663a:	f0 0d       	add	r31, r0
    663c:	78 9f       	mul	r23, r24
    663e:	f0 0d       	add	r31, r0
    6640:	11 24       	eor	r1, r1
    6642:	ef 53       	subi	r30, 0x3F	; 63
    6644:	fc 4d       	sbci	r31, 0xDC	; 220
    6646:	c1 8a       	std	Z+17, r12	; 0x11
    6648:	d2 8a       	std	Z+18, r13	; 0x12
	struct xioUSART *dx = (struct xioUSART *)d->x;	// setup USART struct pointer
	dx->usart = (struct USART_struct *)usart_addr;	// bind USART 
    664a:	d6 01       	movw	r26, r12
    664c:	17 96       	adiw	r26, 0x07	; 7
    664e:	2d 93       	st	X+, r18
    6650:	3c 93       	st	X, r19
    6652:	18 97       	sbiw	r26, 0x08	; 8
	dx->port = (struct PORT_struct *)port_addr;		// bind PORT
    6654:	19 96       	adiw	r26, 0x09	; 9
    6656:	0d 93       	st	X+, r16
    6658:	1c 93       	st	X, r17
    665a:	1a 97       	sbiw	r26, 0x0a	; 10

	// set flags
	xio_setflags(dev, control);		// generic setflags - doesn't validate flags
    665c:	8b 2d       	mov	r24, r11
    665e:	64 2f       	mov	r22, r20
    6660:	75 2f       	mov	r23, r21
    6662:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xio_setflags>

	// setup internal RX/TX buffers
	dx->rx_buf_head = 1;			// can't use location 0 in circular buffer
    6666:	81 e0       	ldi	r24, 0x01	; 1
    6668:	f6 01       	movw	r30, r12
    666a:	83 83       	std	Z+3, r24	; 0x03
	dx->rx_buf_tail = 1;
    666c:	82 83       	std	Z+2, r24	; 0x02
	dx->tx_buf_head = 1;
    666e:	85 83       	std	Z+5, r24	; 0x05
	dx->tx_buf_tail = 1;
    6670:	84 83       	std	Z+4, r24	; 0x04

	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    6672:	4f 2d       	mov	r20, r15
    6674:	4f 70       	andi	r20, 0x0F	; 15
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
    6676:	09 f4       	brne	.+2      	; 0x667a <xio_init_usart+0x80>
    6678:	45 e0       	ldi	r20, 0x05	; 5
	dx->port->OUTSET = outset;
}

void xio_set_baud_usart(const uint8_t dev, const uint8_t baud)
{
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    667a:	2b 2d       	mov	r18, r11
    667c:	30 e0       	ldi	r19, 0x00	; 0
    667e:	87 e1       	ldi	r24, 0x17	; 23
    6680:	90 e0       	ldi	r25, 0x00	; 0
    6682:	28 9f       	mul	r18, r24
    6684:	d0 01       	movw	r26, r0
    6686:	29 9f       	mul	r18, r25
    6688:	b0 0d       	add	r27, r0
    668a:	38 9f       	mul	r19, r24
    668c:	b0 0d       	add	r27, r0
    668e:	11 24       	eor	r1, r1
    6690:	af 53       	subi	r26, 0x3F	; 63
    6692:	bc 4d       	sbci	r27, 0xDC	; 220
    6694:	51 96       	adiw	r26, 0x11	; 17
    6696:	ed 91       	ld	r30, X+
    6698:	fc 91       	ld	r31, X
    669a:	52 97       	sbiw	r26, 0x12	; 18
    669c:	87 81       	ldd	r24, Z+7	; 0x07
    669e:	90 85       	ldd	r25, Z+8	; 0x08
    66a0:	24 2f       	mov	r18, r20
    66a2:	30 e0       	ldi	r19, 0x00	; 0
    66a4:	f9 01       	movw	r30, r18
    66a6:	e2 5a       	subi	r30, 0xA2	; 162
    66a8:	f4 4e       	sbci	r31, 0xE4	; 228
    66aa:	44 91       	lpm	r20, Z+
    66ac:	fc 01       	movw	r30, r24
    66ae:	46 83       	std	Z+6, r20	; 0x06
	((struct xioUSART *)(ds[dev].x))->usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    66b0:	51 96       	adiw	r26, 0x11	; 17
    66b2:	ed 91       	ld	r30, X+
    66b4:	fc 91       	ld	r31, X
    66b6:	52 97       	sbiw	r26, 0x12	; 18
    66b8:	a7 81       	ldd	r26, Z+7	; 0x07
    66ba:	b0 85       	ldd	r27, Z+8	; 0x08
    66bc:	27 59       	subi	r18, 0x97	; 151
    66be:	34 4e       	sbci	r19, 0xE4	; 228
    66c0:	f9 01       	movw	r30, r18
    66c2:	f4 90       	lpm	r15, Z+
    66c4:	17 96       	adiw	r26, 0x07	; 7
    66c6:	fc 92       	st	X, r15
	// baud rate and USART setup
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
	if (baud == XIO_BAUD_UNSPECIFIED) { baud = XIO_BAUD_DEFAULT; }
	xio_set_baud_usart(dev, baud);					// usart must be bound first

	dx->usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;// enable tx and rx
    66c8:	d6 01       	movw	r26, r12
    66ca:	17 96       	adiw	r26, 0x07	; 7
    66cc:	ed 91       	ld	r30, X+
    66ce:	fc 91       	ld	r31, X
    66d0:	18 97       	sbiw	r26, 0x08	; 8
    66d2:	88 e1       	ldi	r24, 0x18	; 24
    66d4:	84 83       	std	Z+4, r24	; 0x04
	dx->usart->CTRLA = CTRLA_RXON_TXON;			   // enable tx and rx IRQs
    66d6:	17 96       	adiw	r26, 0x07	; 7
    66d8:	ed 91       	ld	r30, X+
    66da:	fc 91       	ld	r31, X
    66dc:	18 97       	sbiw	r26, 0x08	; 8
    66de:	81 e2       	ldi	r24, 0x21	; 33
    66e0:	83 83       	std	Z+3, r24	; 0x03

	dx->port->DIRCLR = dirclr;
    66e2:	19 96       	adiw	r26, 0x09	; 9
    66e4:	ed 91       	ld	r30, X+
    66e6:	fc 91       	ld	r31, X
    66e8:	1a 97       	sbiw	r26, 0x0a	; 10
    66ea:	e2 82       	std	Z+2, r14	; 0x02
	dx->port->DIRSET = dirset;
    66ec:	19 96       	adiw	r26, 0x09	; 9
    66ee:	ed 91       	ld	r30, X+
    66f0:	fc 91       	ld	r31, X
    66f2:	1a 97       	sbiw	r26, 0x0a	; 10
    66f4:	91 82       	std	Z+1, r9	; 0x01
	dx->port->OUTCLR = outclr;
    66f6:	19 96       	adiw	r26, 0x09	; 9
    66f8:	ed 91       	ld	r30, X+
    66fa:	fc 91       	ld	r31, X
    66fc:	1a 97       	sbiw	r26, 0x0a	; 10
    66fe:	a6 82       	std	Z+6, r10	; 0x06
	dx->port->OUTSET = outset;
    6700:	19 96       	adiw	r26, 0x09	; 9
    6702:	ed 91       	ld	r30, X+
    6704:	fc 91       	ld	r31, X
    6706:	1a 97       	sbiw	r26, 0x0a	; 10
    6708:	85 82       	std	Z+5, r8	; 0x05
}
    670a:	cf 91       	pop	r28
    670c:	df 91       	pop	r29
    670e:	1f 91       	pop	r17
    6710:	0f 91       	pop	r16
    6712:	ff 90       	pop	r15
    6714:	ef 90       	pop	r14
    6716:	df 90       	pop	r13
    6718:	cf 90       	pop	r12
    671a:	bf 90       	pop	r11
    671c:	af 90       	pop	r10
    671e:	9f 90       	pop	r9
    6720:	8f 90       	pop	r8
    6722:	08 95       	ret

00006724 <xio_open_usb>:
#define USB ds[XIO_DEV_USB]						// device struct accessoor
#define USBu us[XIO_DEV_USB_OFFSET]				// usart extended struct accessor


/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
    6724:	80 91 eb 23 	lds	r24, 0x23EB
    6728:	90 91 ec 23 	lds	r25, 0x23EC
    672c:	08 95       	ret

0000672e <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)	//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    672e:	1f 92       	push	r1
    6730:	0f 92       	push	r0
    6732:	0f b6       	in	r0, 0x3f	; 63
    6734:	0f 92       	push	r0
    6736:	0b b6       	in	r0, 0x3b	; 59
    6738:	0f 92       	push	r0
    673a:	11 24       	eor	r1, r1
    673c:	8f 93       	push	r24
    673e:	9f 93       	push	r25
    6740:	af 93       	push	r26
    6742:	bf 93       	push	r27
    6744:	ef 93       	push	r30
    6746:	ff 93       	push	r31
	if (USBu.tx_buf_head == USBu.tx_buf_tail) {	// buffer empty - disable ints
    6748:	90 91 56 23 	lds	r25, 0x2356
    674c:	80 91 55 23 	lds	r24, 0x2355
    6750:	98 17       	cp	r25, r24
    6752:	39 f4       	brne	.+14     	; 0x6762 <__vector_26+0x34>
		USBu.usart->CTRLA = CTRLA_RXON_TXOFF;	// won't work if you just &= it
    6754:	e0 91 58 23 	lds	r30, 0x2358
    6758:	f0 91 59 23 	lds	r31, 0x2359
    675c:	80 e2       	ldi	r24, 0x20	; 32
    675e:	83 83       	std	Z+3, r24	; 0x03
    6760:	1d c0       	rjmp	.+58     	; 0x679c <__vector_26+0x6e>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(USB.flags)) {
    6762:	80 91 d8 23 	lds	r24, 0x23D8
    6766:	90 91 d9 23 	lds	r25, 0x23D9
    676a:	93 fd       	sbrc	r25, 3
    676c:	17 c0       	rjmp	.+46     	; 0x679c <__vector_26+0x6e>
		if (--(USBu.tx_buf_tail) == 0) {		// advance tail and wrap 
    676e:	80 91 55 23 	lds	r24, 0x2355
    6772:	81 50       	subi	r24, 0x01	; 1
    6774:	80 93 55 23 	sts	0x2355, r24
    6778:	80 91 55 23 	lds	r24, 0x2355
    677c:	88 23       	and	r24, r24
    677e:	19 f4       	brne	.+6      	; 0x6786 <__vector_26+0x58>
			USBu.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one err (OBOE)
    6780:	81 e1       	ldi	r24, 0x11	; 17
    6782:	80 93 55 23 	sts	0x2355, r24
		}
		USBu.usart->DATA = USBu.tx_buf[USBu.tx_buf_tail]; // write to TX DATA reg
    6786:	e0 91 58 23 	lds	r30, 0x2358
    678a:	f0 91 59 23 	lds	r31, 0x2359
    678e:	a0 91 55 23 	lds	r26, 0x2355
    6792:	b0 e0       	ldi	r27, 0x00	; 0
    6794:	a2 59       	subi	r26, 0x92	; 146
    6796:	bc 4d       	sbci	r27, 0xDC	; 220
    6798:	8c 91       	ld	r24, X
    679a:	80 83       	st	Z, r24
	}
}
    679c:	ff 91       	pop	r31
    679e:	ef 91       	pop	r30
    67a0:	bf 91       	pop	r27
    67a2:	af 91       	pop	r26
    67a4:	9f 91       	pop	r25
    67a6:	8f 91       	pop	r24
    67a8:	0f 90       	pop	r0
    67aa:	0b be       	out	0x3b, r0	; 59
    67ac:	0f 90       	pop	r0
    67ae:	0f be       	out	0x3f, r0	; 63
    67b0:	0f 90       	pop	r0
    67b2:	1f 90       	pop	r1
    67b4:	18 95       	reti

000067b6 <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular buffers work
 */

ISR(USB_RX_ISR_vect)	//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    67b6:	1f 92       	push	r1
    67b8:	0f 92       	push	r0
    67ba:	0f b6       	in	r0, 0x3f	; 63
    67bc:	0f 92       	push	r0
    67be:	0b b6       	in	r0, 0x3b	; 59
    67c0:	0f 92       	push	r0
    67c2:	11 24       	eor	r1, r1
    67c4:	2f 93       	push	r18
    67c6:	3f 93       	push	r19
    67c8:	4f 93       	push	r20
    67ca:	5f 93       	push	r21
    67cc:	6f 93       	push	r22
    67ce:	7f 93       	push	r23
    67d0:	8f 93       	push	r24
    67d2:	9f 93       	push	r25
    67d4:	af 93       	push	r26
    67d6:	bf 93       	push	r27
    67d8:	ef 93       	push	r30
    67da:	ff 93       	push	r31
	uint8_t c = USBu.usart->DATA;				// can only read DATA once
    67dc:	e0 91 58 23 	lds	r30, 0x2358
    67e0:	f0 91 59 23 	lds	r31, 0x2359
    67e4:	20 81       	ld	r18, Z

	// trap signals - do not insert character into RX queue
	if (c == ETX) {								// trap ^c signal
    67e6:	23 30       	cpi	r18, 0x03	; 3
    67e8:	31 f4       	brne	.+12     	; 0x67f6 <__vector_25+0x40>
		USB.sig = XIO_SIG_KILL;					// set signal value
    67ea:	84 e0       	ldi	r24, 0x04	; 4
    67ec:	80 93 db 23 	sts	0x23DB, r24
		signal_etx();							// call app-specific signal handler
    67f0:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <signal_etx>
    67f4:	25 c0       	rjmp	.+74     	; 0x6840 <__vector_25+0x8a>
		return;
	}

	// normal character path
	if ((--USBu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    67f6:	80 91 54 23 	lds	r24, 0x2354
    67fa:	81 50       	subi	r24, 0x01	; 1
    67fc:	80 93 54 23 	sts	0x2354, r24
    6800:	80 91 54 23 	lds	r24, 0x2354
    6804:	88 23       	and	r24, r24
    6806:	19 f4       	brne	.+6      	; 0x680e <__vector_25+0x58>
		USBu.rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
    6808:	81 e1       	ldi	r24, 0x11	; 17
    680a:	80 93 54 23 	sts	0x2354, r24
	}
	if (USBu.rx_buf_head != USBu.rx_buf_tail) {	// write char unless buffer full
    680e:	90 91 54 23 	lds	r25, 0x2354
    6812:	80 91 53 23 	lds	r24, 0x2353
    6816:	98 17       	cp	r25, r24
    6818:	39 f0       	breq	.+14     	; 0x6828 <__vector_25+0x72>
		USBu.rx_buf[USBu.rx_buf_head] = c;
    681a:	e0 91 54 23 	lds	r30, 0x2354
    681e:	f0 e0       	ldi	r31, 0x00	; 0
    6820:	ee 5d       	subi	r30, 0xDE	; 222
    6822:	fc 4d       	sbci	r31, 0xDC	; 220
    6824:	22 af       	std	Z+58, r18	; 0x3a
    6826:	0c c0       	rjmp	.+24     	; 0x6840 <__vector_25+0x8a>
		return;
	}
	// buffer-full handling
	if ((++USBu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6828:	80 91 54 23 	lds	r24, 0x2354
    682c:	8f 5f       	subi	r24, 0xFF	; 255
    682e:	80 93 54 23 	sts	0x2354, r24
    6832:	80 91 54 23 	lds	r24, 0x2354
    6836:	82 31       	cpi	r24, 0x12	; 18
    6838:	18 f0       	brcs	.+6      	; 0x6840 <__vector_25+0x8a>
		USBu.rx_buf_head = 1;
    683a:	81 e0       	ldi	r24, 0x01	; 1
    683c:	80 93 54 23 	sts	0x2354, r24
	}
	// activate flow control here or before it gets to this level
}
    6840:	ff 91       	pop	r31
    6842:	ef 91       	pop	r30
    6844:	bf 91       	pop	r27
    6846:	af 91       	pop	r26
    6848:	9f 91       	pop	r25
    684a:	8f 91       	pop	r24
    684c:	7f 91       	pop	r23
    684e:	6f 91       	pop	r22
    6850:	5f 91       	pop	r21
    6852:	4f 91       	pop	r20
    6854:	3f 91       	pop	r19
    6856:	2f 91       	pop	r18
    6858:	0f 90       	pop	r0
    685a:	0b be       	out	0x3b, r0	; 59
    685c:	0f 90       	pop	r0
    685e:	0f be       	out	0x3f, r0	; 63
    6860:	0f 90       	pop	r0
    6862:	1f 90       	pop	r1
    6864:	18 95       	reti

00006866 <xio_init_usb>:
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
void xio_queue_RX_string_usb(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_USB, buf);}
void xio_init_usb()	// USB inits
{
    6866:	8f 92       	push	r8
    6868:	af 92       	push	r10
    686a:	cf 92       	push	r12
    686c:	ef 92       	push	r14
    686e:	ff 92       	push	r15
    6870:	0f 93       	push	r16
    6872:	1f 93       	push	r17
	xio_init_dev(XIO_DEV_USB, xio_open_usb, xio_setflags_usb, xio_putc_usb, xio_getc_usb, xio_readln_usb);
    6874:	81 e0       	ldi	r24, 0x01	; 1
    6876:	62 e9       	ldi	r22, 0x92	; 146
    6878:	73 e3       	ldi	r23, 0x33	; 51
    687a:	4f e7       	ldi	r20, 0x7F	; 127
    687c:	54 e3       	ldi	r21, 0x34	; 52
    687e:	28 e7       	ldi	r18, 0x78	; 120
    6880:	34 e3       	ldi	r19, 0x34	; 52
    6882:	03 e7       	ldi	r16, 0x73	; 115
    6884:	14 e3       	ldi	r17, 0x34	; 52
    6886:	fc e6       	ldi	r31, 0x6C	; 108
    6888:	ef 2e       	mov	r14, r31
    688a:	f4 e3       	ldi	r31, 0x34	; 52
    688c:	ff 2e       	mov	r15, r31
    688e:	0e 94 3b 29 	call	0x5276	; 0x5276 <xio_init_dev>
	xio_init_usart(XIO_DEV_USB, XIO_DEV_USB_OFFSET, USB_INIT_bm, &USB_USART, &USB_PORT, USB_DIRCLR_bm, USB_DIRSET_bm, USB_OUTCLR_bm, USB_OUTSET_bm);
    6892:	81 e0       	ldi	r24, 0x01	; 1
    6894:	61 e0       	ldi	r22, 0x01	; 1
    6896:	45 e7       	ldi	r20, 0x75	; 117
    6898:	55 e5       	ldi	r21, 0x55	; 85
    689a:	20 ea       	ldi	r18, 0xA0	; 160
    689c:	38 e0       	ldi	r19, 0x08	; 8
    689e:	00 e4       	ldi	r16, 0x40	; 64
    68a0:	16 e0       	ldi	r17, 0x06	; 6
    68a2:	e5 e0       	ldi	r30, 0x05	; 5
    68a4:	ee 2e       	mov	r14, r30
    68a6:	7a e0       	ldi	r23, 0x0A	; 10
    68a8:	c7 2e       	mov	r12, r23
    68aa:	aa 24       	eor	r10, r10
    68ac:	9a e0       	ldi	r25, 0x0A	; 10
    68ae:	89 2e       	mov	r8, r25
    68b0:	0e 94 fd 32 	call	0x65fa	; 0x65fa <xio_init_usart>
}
    68b4:	1f 91       	pop	r17
    68b6:	0f 91       	pop	r16
    68b8:	ff 90       	pop	r15
    68ba:	ef 90       	pop	r14
    68bc:	cf 90       	pop	r12
    68be:	af 90       	pop	r10
    68c0:	8f 90       	pop	r8
    68c2:	08 95       	ret

000068c4 <xio_queue_RX_string_usb>:
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
void xio_queue_RX_string_usb(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_USB, buf);}
    68c4:	bc 01       	movw	r22, r24
    68c6:	81 e0       	ldi	r24, 0x01	; 1
    68c8:	0e 94 e6 32 	call	0x65cc	; 0x65cc <xio_queue_RX_string_usart>
    68cc:	08 95       	ret

000068ce <xio_queue_RX_char_usb>:
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
void xio_queue_RX_char_usb(const char c) {xio_queue_RX_char_usart(XIO_DEV_USB, c);}
    68ce:	68 2f       	mov	r22, r24
    68d0:	81 e0       	ldi	r24, 0x01	; 1
    68d2:	0e 94 b6 32 	call	0x656c	; 0x656c <xio_queue_RX_char_usart>
    68d6:	08 95       	ret

000068d8 <xio_readln_usb>:
/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
int xio_readln_usb(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_USB, buf, size);}
    68d8:	9c 01       	movw	r18, r24
    68da:	46 2f       	mov	r20, r22
    68dc:	81 e0       	ldi	r24, 0x01	; 1
    68de:	b9 01       	movw	r22, r18
    68e0:	0e 94 a1 31 	call	0x6342	; 0x6342 <xio_readln_usart>
    68e4:	08 95       	ret

000068e6 <xio_getc_usb>:

/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
int xio_getc_usb(FILE *stream) {return xio_getc_usart(XIO_DEV_USB, stream);}
    68e6:	bc 01       	movw	r22, r24
    68e8:	81 e0       	ldi	r24, 0x01	; 1
    68ea:	0e 94 be 30 	call	0x617c	; 0x617c <xio_getc_usart>
    68ee:	08 95       	ret

000068f0 <xio_putc_usb>:


/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
int xio_putc_usb(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_USB, c, stream);}
    68f0:	98 2f       	mov	r25, r24
    68f2:	ab 01       	movw	r20, r22
    68f4:	81 e0       	ldi	r24, 0x01	; 1
    68f6:	69 2f       	mov	r22, r25
    68f8:	0e 94 30 30 	call	0x6060	; 0x6060 <xio_putc_usart>
    68fc:	08 95       	ret

000068fe <xio_setflags_usb>:
#define USBu us[XIO_DEV_USB_OFFSET]				// usart extended struct accessor


/* USB Device specific entry points to USART routines */
FILE * xio_open_usb() {return(USB.fdev);}
int xio_setflags_usb(const uint16_t control) {return xio_setflags(XIO_DEV_USB, control);} // SEE NOTE
    68fe:	bc 01       	movw	r22, r24
    6900:	81 e0       	ldi	r24, 0x01	; 1
    6902:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xio_setflags>
    6906:	08 95       	ret

00006908 <xio_open_rs485>:
extern struct xioUSART us[XIO_DEV_USART_COUNT];	// ref USART extended IO structs
#define RS ds[XIO_DEV_RS485]					// device struct accessoor
#define RSu us[XIO_DEV_RS485]					// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
    6908:	80 91 d4 23 	lds	r24, 0x23D4
    690c:	90 91 d5 23 	lds	r25, 0x23D5
    6910:	08 95       	ret

00006912 <__vector_29>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC1 data register empty
{
    6912:	1f 92       	push	r1
    6914:	0f 92       	push	r0
    6916:	0f b6       	in	r0, 0x3f	; 63
    6918:	0f 92       	push	r0
    691a:	0b b6       	in	r0, 0x3b	; 59
    691c:	0f 92       	push	r0
    691e:	11 24       	eor	r1, r1
    6920:	8f 93       	push	r24
    6922:	9f 93       	push	r25
    6924:	af 93       	push	r26
    6926:	bf 93       	push	r27
    6928:	ef 93       	push	r30
    692a:	ff 93       	push	r31
	if (RSu.tx_buf_head == RSu.tx_buf_tail) {	// buffer empty - disable ints (Note)
    692c:	90 91 27 23 	lds	r25, 0x2327
    6930:	80 91 26 23 	lds	r24, 0x2326
    6934:	98 17       	cp	r25, r24
    6936:	39 f4       	brne	.+14     	; 0x6946 <__vector_29+0x34>
		RSu.usart->CTRLA = CTRLA_RXON_TXOFF_TXCON;	// doesn't work if you just &= it
    6938:	e0 91 29 23 	lds	r30, 0x2329
    693c:	f0 91 2a 23 	lds	r31, 0x232A
    6940:	84 e2       	ldi	r24, 0x24	; 36
    6942:	83 83       	std	Z+3, r24	; 0x03
    6944:	23 c0       	rjmp	.+70     	; 0x698c <__vector_29+0x7a>
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(RS.flags)) {
    6946:	80 91 c1 23 	lds	r24, 0x23C1
    694a:	90 91 c2 23 	lds	r25, 0x23C2
    694e:	93 fd       	sbrc	r25, 3
    6950:	1d c0       	rjmp	.+58     	; 0x698c <__vector_29+0x7a>
		if (--(RSu.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    6952:	80 91 26 23 	lds	r24, 0x2326
    6956:	81 50       	subi	r24, 0x01	; 1
    6958:	80 93 26 23 	sts	0x2326, r24
    695c:	80 91 26 23 	lds	r24, 0x2326
    6960:	88 23       	and	r24, r24
    6962:	19 f4       	brne	.+6      	; 0x696a <__vector_29+0x58>
			RSu.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6964:	81 e1       	ldi	r24, 0x11	; 17
    6966:	80 93 26 23 	sts	0x2326, r24
		}
		RSu.port->OUTSET = (RS485_DE_bm | RS485_RE_bm);	// enable DE (active hi)
    696a:	e0 91 2b 23 	lds	r30, 0x232B
    696e:	f0 91 2c 23 	lds	r31, 0x232C
    6972:	80 e3       	ldi	r24, 0x30	; 48
    6974:	85 83       	std	Z+5, r24	; 0x05
														// disable RE (active lo)
		RSu.usart->DATA = RSu.tx_buf[RSu.tx_buf_tail];	// write char to TX DATA reg
    6976:	a0 91 29 23 	lds	r26, 0x2329
    697a:	b0 91 2a 23 	lds	r27, 0x232A
    697e:	e0 91 26 23 	lds	r30, 0x2326
    6982:	f0 e0       	ldi	r31, 0x00	; 0
    6984:	ee 5d       	subi	r30, 0xDE	; 222
    6986:	fc 4d       	sbci	r31, 0xDC	; 220
    6988:	85 8d       	ldd	r24, Z+29	; 0x1d
    698a:	8c 93       	st	X, r24
	}
}
    698c:	ff 91       	pop	r31
    698e:	ef 91       	pop	r30
    6990:	bf 91       	pop	r27
    6992:	af 91       	pop	r26
    6994:	9f 91       	pop	r25
    6996:	8f 91       	pop	r24
    6998:	0f 90       	pop	r0
    699a:	0b be       	out	0x3b, r0	; 59
    699c:	0f 90       	pop	r0
    699e:	0f be       	out	0x3f, r0	; 63
    69a0:	0f 90       	pop	r0
    69a2:	1f 90       	pop	r1
    69a4:	18 95       	reti

000069a6 <__vector_30>:

/* Note: Finding a buffer empty condition on the first byte of a string is common 
 * as the TX byte is often written by the task itself */

ISR(RS485_TXC_ISR_vect)		// ISR(USARTC1_TXC_vect) // USARTC1 transmission complete
{
    69a6:	1f 92       	push	r1
    69a8:	0f 92       	push	r0
    69aa:	0f b6       	in	r0, 0x3f	; 63
    69ac:	0f 92       	push	r0
    69ae:	0b b6       	in	r0, 0x3b	; 59
    69b0:	0f 92       	push	r0
    69b2:	11 24       	eor	r1, r1
    69b4:	8f 93       	push	r24
    69b6:	ef 93       	push	r30
    69b8:	ff 93       	push	r31
		RSu.port->OUTCLR = (RS485_DE_bm | RS485_RE_bm);	// disable DE (active hi)
    69ba:	e0 91 2b 23 	lds	r30, 0x232B
    69be:	f0 91 2c 23 	lds	r31, 0x232C
    69c2:	80 e3       	ldi	r24, 0x30	; 48
    69c4:	86 83       	std	Z+6, r24	; 0x06
														// enable RE (active lo)
}
    69c6:	ff 91       	pop	r31
    69c8:	ef 91       	pop	r30
    69ca:	8f 91       	pop	r24
    69cc:	0f 90       	pop	r0
    69ce:	0b be       	out	0x3b, r0	; 59
    69d0:	0f 90       	pop	r0
    69d2:	0f be       	out	0x3f, r0	; 63
    69d4:	0f 90       	pop	r0
    69d6:	1f 90       	pop	r1
    69d8:	18 95       	reti

000069da <__vector_28>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(RS485_RX_ISR_vect)	//ISR(USARTC1_RXC_vect)	// serial port C0 RX interrupt 
{
    69da:	1f 92       	push	r1
    69dc:	0f 92       	push	r0
    69de:	0f b6       	in	r0, 0x3f	; 63
    69e0:	0f 92       	push	r0
    69e2:	0b b6       	in	r0, 0x3b	; 59
    69e4:	0f 92       	push	r0
    69e6:	11 24       	eor	r1, r1
    69e8:	2f 93       	push	r18
    69ea:	3f 93       	push	r19
    69ec:	4f 93       	push	r20
    69ee:	5f 93       	push	r21
    69f0:	6f 93       	push	r22
    69f2:	7f 93       	push	r23
    69f4:	8f 93       	push	r24
    69f6:	9f 93       	push	r25
    69f8:	af 93       	push	r26
    69fa:	bf 93       	push	r27
    69fc:	ef 93       	push	r30
    69fe:	ff 93       	push	r31
	uint8_t c = RSu.usart->DATA;				// can only read DATA once
    6a00:	e0 91 29 23 	lds	r30, 0x2329
    6a04:	f0 91 2a 23 	lds	r31, 0x232A
    6a08:	20 81       	ld	r18, Z

	// trap signals - do not insert into RX queue
	if (c == ETX) {								// trap ^c signal
    6a0a:	23 30       	cpi	r18, 0x03	; 3
    6a0c:	31 f4       	brne	.+12     	; 0x6a1a <__vector_28+0x40>
		RS.sig = XIO_SIG_KILL;					// set signal value
    6a0e:	84 e0       	ldi	r24, 0x04	; 4
    6a10:	80 93 c4 23 	sts	0x23C4, r24
		signal_etx();							// call app-specific signal handler
    6a14:	0e 94 fc 2f 	call	0x5ff8	; 0x5ff8 <signal_etx>
    6a18:	25 c0       	rjmp	.+74     	; 0x6a64 <__vector_28+0x8a>
		return;
	}

	// normal path
	if ((--RSu.rx_buf_head) == 0) { 			// advance buffer head with wrap
    6a1a:	80 91 25 23 	lds	r24, 0x2325
    6a1e:	81 50       	subi	r24, 0x01	; 1
    6a20:	80 93 25 23 	sts	0x2325, r24
    6a24:	80 91 25 23 	lds	r24, 0x2325
    6a28:	88 23       	and	r24, r24
    6a2a:	19 f4       	brne	.+6      	; 0x6a32 <__vector_28+0x58>
		RSu.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    6a2c:	81 e1       	ldi	r24, 0x11	; 17
    6a2e:	80 93 25 23 	sts	0x2325, r24
	}
	if (RSu.rx_buf_head != RSu.rx_buf_tail) {	// write char unless buffer full
    6a32:	90 91 25 23 	lds	r25, 0x2325
    6a36:	80 91 24 23 	lds	r24, 0x2324
    6a3a:	98 17       	cp	r25, r24
    6a3c:	39 f0       	breq	.+14     	; 0x6a4c <__vector_28+0x72>
		RSu.rx_buf[RSu.rx_buf_head] = c;		// (= USARTC0.DATA;)
    6a3e:	e0 91 25 23 	lds	r30, 0x2325
    6a42:	f0 e0       	ldi	r31, 0x00	; 0
    6a44:	ee 5d       	subi	r30, 0xDE	; 222
    6a46:	fc 4d       	sbci	r31, 0xDC	; 220
    6a48:	23 87       	std	Z+11, r18	; 0x0b
    6a4a:	0c c0       	rjmp	.+24     	; 0x6a64 <__vector_28+0x8a>
		return;
	}
	// buffer-full handling
	if ((++RSu.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    6a4c:	80 91 25 23 	lds	r24, 0x2325
    6a50:	8f 5f       	subi	r24, 0xFF	; 255
    6a52:	80 93 25 23 	sts	0x2325, r24
    6a56:	80 91 25 23 	lds	r24, 0x2325
    6a5a:	82 31       	cpi	r24, 0x12	; 18
    6a5c:	18 f0       	brcs	.+6      	; 0x6a64 <__vector_28+0x8a>
		RSu.rx_buf_head = 1;
    6a5e:	81 e0       	ldi	r24, 0x01	; 1
    6a60:	80 93 25 23 	sts	0x2325, r24
	}
	// activate flow control here or before it gets to this level
}
    6a64:	ff 91       	pop	r31
    6a66:	ef 91       	pop	r30
    6a68:	bf 91       	pop	r27
    6a6a:	af 91       	pop	r26
    6a6c:	9f 91       	pop	r25
    6a6e:	8f 91       	pop	r24
    6a70:	7f 91       	pop	r23
    6a72:	6f 91       	pop	r22
    6a74:	5f 91       	pop	r21
    6a76:	4f 91       	pop	r20
    6a78:	3f 91       	pop	r19
    6a7a:	2f 91       	pop	r18
    6a7c:	0f 90       	pop	r0
    6a7e:	0b be       	out	0x3b, r0	; 59
    6a80:	0f 90       	pop	r0
    6a82:	0f be       	out	0x3f, r0	; 63
    6a84:	0f 90       	pop	r0
    6a86:	1f 90       	pop	r1
    6a88:	18 95       	reti

00006a8a <xio_init_rs485>:
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
void xio_queue_RX_string_rs485(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_RS485, buf);}
void xio_init_rs485()	// RS485 init
{
    6a8a:	8f 92       	push	r8
    6a8c:	af 92       	push	r10
    6a8e:	cf 92       	push	r12
    6a90:	ef 92       	push	r14
    6a92:	ff 92       	push	r15
    6a94:	0f 93       	push	r16
    6a96:	1f 93       	push	r17
	xio_init_dev(XIO_DEV_RS485, xio_open_rs485, xio_setflags_rs485, xio_putc_rs485, xio_getc_rs485, xio_readln_rs485);
    6a98:	80 e0       	ldi	r24, 0x00	; 0
    6a9a:	64 e8       	ldi	r22, 0x84	; 132
    6a9c:	74 e3       	ldi	r23, 0x34	; 52
    6a9e:	42 e9       	ldi	r20, 0x92	; 146
    6aa0:	55 e3       	ldi	r21, 0x35	; 53
    6aa2:	2b e8       	ldi	r18, 0x8B	; 139
    6aa4:	35 e3       	ldi	r19, 0x35	; 53
    6aa6:	06 e8       	ldi	r16, 0x86	; 134
    6aa8:	15 e3       	ldi	r17, 0x35	; 53
    6aaa:	af e7       	ldi	r26, 0x7F	; 127
    6aac:	ea 2e       	mov	r14, r26
    6aae:	a5 e3       	ldi	r26, 0x35	; 53
    6ab0:	fa 2e       	mov	r15, r26
    6ab2:	0e 94 3b 29 	call	0x5276	; 0x5276 <xio_init_dev>
	xio_init_usart(XIO_DEV_RS485, XIO_DEV_RS485_OFFSET, RS485_INIT_bm, &RS485_USART, &RS485_PORT, RS485_DIRCLR_bm, RS485_DIRSET_bm, RS485_OUTCLR_bm, RS485_OUTSET_bm);
    6ab6:	80 e0       	ldi	r24, 0x00	; 0
    6ab8:	60 e0       	ldi	r22, 0x00	; 0
    6aba:	45 e7       	ldi	r20, 0x75	; 117
    6abc:	55 e1       	ldi	r21, 0x15	; 21
    6abe:	20 eb       	ldi	r18, 0xB0	; 176
    6ac0:	38 e0       	ldi	r19, 0x08	; 8
    6ac2:	00 e4       	ldi	r16, 0x40	; 64
    6ac4:	16 e0       	ldi	r17, 0x06	; 6
    6ac6:	f0 e4       	ldi	r31, 0x40	; 64
    6ac8:	ef 2e       	mov	r14, r31
    6aca:	e0 eb       	ldi	r30, 0xB0	; 176
    6acc:	ce 2e       	mov	r12, r30
    6ace:	70 e3       	ldi	r23, 0x30	; 48
    6ad0:	a7 2e       	mov	r10, r23
    6ad2:	90 e8       	ldi	r25, 0x80	; 128
    6ad4:	89 2e       	mov	r8, r25
    6ad6:	0e 94 fd 32 	call	0x65fa	; 0x65fa <xio_init_usart>
}
    6ada:	1f 91       	pop	r17
    6adc:	0f 91       	pop	r16
    6ade:	ff 90       	pop	r15
    6ae0:	ef 90       	pop	r14
    6ae2:	cf 90       	pop	r12
    6ae4:	af 90       	pop	r10
    6ae6:	8f 90       	pop	r8
    6ae8:	08 95       	ret

00006aea <xio_queue_RX_string_rs485>:
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
void xio_queue_RX_string_rs485(const char *buf) {xio_queue_RX_string_usart(XIO_DEV_RS485, buf);}
    6aea:	bc 01       	movw	r22, r24
    6aec:	80 e0       	ldi	r24, 0x00	; 0
    6aee:	0e 94 e6 32 	call	0x65cc	; 0x65cc <xio_queue_RX_string_usart>
    6af2:	08 95       	ret

00006af4 <xio_queue_RX_char_rs485>:
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
void xio_queue_RX_char_rs485(const char c) {xio_queue_RX_char_usart(XIO_DEV_RS485, c);}
    6af4:	68 2f       	mov	r22, r24
    6af6:	80 e0       	ldi	r24, 0x00	; 0
    6af8:	0e 94 b6 32 	call	0x656c	; 0x656c <xio_queue_RX_char_usart>
    6afc:	08 95       	ret

00006afe <xio_readln_rs485>:
/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
int xio_readln_rs485(char *buf, const uint8_t size) {return xio_readln_usart(XIO_DEV_RS485, buf, size);}
    6afe:	9c 01       	movw	r18, r24
    6b00:	46 2f       	mov	r20, r22
    6b02:	80 e0       	ldi	r24, 0x00	; 0
    6b04:	b9 01       	movw	r22, r18
    6b06:	0e 94 a1 31 	call	0x6342	; 0x6342 <xio_readln_usart>
    6b0a:	08 95       	ret

00006b0c <xio_getc_rs485>:

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
int xio_getc_rs485(FILE *stream) {return xio_getc_usart(XIO_DEV_RS485, stream);}
    6b0c:	bc 01       	movw	r22, r24
    6b0e:	80 e0       	ldi	r24, 0x00	; 0
    6b10:	0e 94 be 30 	call	0x617c	; 0x617c <xio_getc_usart>
    6b14:	08 95       	ret

00006b16 <xio_putc_rs485>:
#define RSu us[XIO_DEV_RS485]					// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
int xio_putc_rs485(const char c, FILE *stream) {return xio_putc_usart(XIO_DEV_RS485, c, stream);}
    6b16:	98 2f       	mov	r25, r24
    6b18:	ab 01       	movw	r20, r22
    6b1a:	80 e0       	ldi	r24, 0x00	; 0
    6b1c:	69 2f       	mov	r22, r25
    6b1e:	0e 94 30 30 	call	0x6060	; 0x6060 <xio_putc_usart>
    6b22:	08 95       	ret

00006b24 <xio_setflags_rs485>:
#define RS ds[XIO_DEV_RS485]					// device struct accessoor
#define RSu us[XIO_DEV_RS485]					// usart extended struct accessor

/* RS485 device specific entry points to USART routines */
struct __file * xio_open_rs485() { return(RS.fdev); }
int xio_setflags_rs485(const uint16_t control) {return xio_setflags(XIO_DEV_RS485, control);} // See NOTE
    6b24:	bc 01       	movw	r22, r24
    6b26:	80 e0       	ldi	r24, 0x00	; 0
    6b28:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xio_setflags>
    6b2c:	08 95       	ret

00006b2e <xio_open_pgm>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

struct __file * xio_open_pgm(const prog_char *addr)
{
	PGM.flags &= XIO_FLAG_RESET_gm;			// reset flag signaling bits
    6b2e:	20 91 06 24 	lds	r18, 0x2406
    6b32:	30 91 07 24 	lds	r19, 0x2407
    6b36:	3f 70       	andi	r19, 0x0F	; 15
    6b38:	20 93 06 24 	sts	0x2406, r18
    6b3c:	30 93 07 24 	sts	0x2407, r19
	PGM.sig = 0;							// reset signal
    6b40:	10 92 09 24 	sts	0x2409, r1
	PGMf.pgmbase_P = (PROGMEM char *)addr;	// might want to range check this
    6b44:	80 93 b3 23 	sts	0x23B3, r24
    6b48:	90 93 b4 23 	sts	0x23B4, r25
	PGMf.len = 0;							// initialize buffer pointer
    6b4c:	10 92 b1 23 	sts	0x23B1, r1
    6b50:	10 92 b2 23 	sts	0x23B2, r1
	return(PGM.fdev);							// return pointer to the fdev stream
}
    6b54:	80 91 19 24 	lds	r24, 0x2419
    6b58:	90 91 1a 24 	lds	r25, 0x241A
    6b5c:	08 95       	ret

00006b5e <xio_putc_pgm>:
 */

int xio_putc_pgm(const char c, struct __file *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    6b5e:	8f ef       	ldi	r24, 0xFF	; 255
    6b60:	9f ef       	ldi	r25, 0xFF	; 255
    6b62:	08 95       	ret

00006b64 <xio_readln_pgm>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_pgm(char *buf, const uint8_t size)
{
    6b64:	9c 01       	movw	r18, r24
	if (!(PGMf.pgmbase_P)) {					// return error if no file is open
    6b66:	80 91 b3 23 	lds	r24, 0x23B3
    6b6a:	90 91 b4 23 	lds	r25, 0x23B4
    6b6e:	89 2b       	or	r24, r25
    6b70:	19 f4       	brne	.+6      	; 0x6b78 <xio_readln_pgm+0x14>
    6b72:	26 e0       	ldi	r18, 0x06	; 6
    6b74:	30 e0       	ldi	r19, 0x00	; 0
    6b76:	1b c0       	rjmp	.+54     	; 0x6bae <xio_readln_pgm+0x4a>
		return (XIO_FILE_NOT_OPEN);
	}
	PGM.sig = XIO_SIG_OK;						// initialize signal
    6b78:	10 92 09 24 	sts	0x2409, r1
	if (fgets(buf, size, PGM.fdev) == NULL) {
    6b7c:	40 91 19 24 	lds	r20, 0x2419
    6b80:	50 91 1a 24 	lds	r21, 0x241A
    6b84:	c9 01       	movw	r24, r18
    6b86:	70 e0       	ldi	r23, 0x00	; 0
    6b88:	0e 94 b9 48 	call	0x9172	; 0x9172 <fgets>
    6b8c:	89 2b       	or	r24, r25
    6b8e:	19 f0       	breq	.+6      	; 0x6b96 <xio_readln_pgm+0x32>
    6b90:	20 e0       	ldi	r18, 0x00	; 0
    6b92:	30 e0       	ldi	r19, 0x00	; 0
    6b94:	0c c0       	rjmp	.+24     	; 0x6bae <xio_readln_pgm+0x4a>
		PGMf.pgmbase_P = NULL;
    6b96:	10 92 b3 23 	sts	0x23B3, r1
    6b9a:	10 92 b4 23 	sts	0x23B4, r1
		clearerr(PGM.fdev);
    6b9e:	80 91 19 24 	lds	r24, 0x2419
    6ba2:	90 91 1a 24 	lds	r25, 0x241A
    6ba6:	0e 94 b4 48 	call	0x9168	; 0x9168 <clearerr>
    6baa:	25 e0       	ldi	r18, 0x05	; 5
    6bac:	30 e0       	ldi	r19, 0x00	; 0
		return (XIO_EOF);
	}
	return (XIO_OK);
}
    6bae:	c9 01       	movw	r24, r18
    6bb0:	08 95       	ret

00006bb2 <xio_getc_pgm>:
 */

int xio_getc_pgm(struct __file *stream)
{

	if (PGM.flags & XIO_FLAG_EOF_bm) {
    6bb2:	20 91 06 24 	lds	r18, 0x2406
    6bb6:	30 91 07 24 	lds	r19, 0x2407
    6bba:	35 ff       	sbrs	r19, 5
    6bbc:	06 c0       	rjmp	.+12     	; 0x6bca <xio_getc_pgm+0x18>
		PGM.sig = XIO_SIG_EOF;
    6bbe:	83 e0       	ldi	r24, 0x03	; 3
    6bc0:	80 93 09 24 	sts	0x2409, r24
    6bc4:	2e ef       	ldi	r18, 0xFE	; 254
    6bc6:	3f ef       	ldi	r19, 0xFF	; 255
    6bc8:	3e c0       	rjmp	.+124    	; 0x6c46 <xio_getc_pgm+0x94>
		return (_FDEV_EOF);
	}
	if ((PGM.c = pgm_read_byte(&PGMf.pgmbase_P[PGMf.len])) == NUL) {
    6bca:	80 91 b1 23 	lds	r24, 0x23B1
    6bce:	90 91 b2 23 	lds	r25, 0x23B2
    6bd2:	e0 91 b3 23 	lds	r30, 0x23B3
    6bd6:	f0 91 b4 23 	lds	r31, 0x23B4
    6bda:	e8 0f       	add	r30, r24
    6bdc:	f9 1f       	adc	r31, r25
    6bde:	e4 91       	lpm	r30, Z+
    6be0:	e0 93 0a 24 	sts	0x240A, r30
    6be4:	ee 23       	and	r30, r30
    6be6:	29 f4       	brne	.+10     	; 0x6bf2 <xio_getc_pgm+0x40>
		PGM.flags |= XIO_FLAG_EOF_bm;
    6be8:	30 62       	ori	r19, 0x20	; 32
    6bea:	20 93 06 24 	sts	0x2406, r18
    6bee:	30 93 07 24 	sts	0x2407, r19
	}
	++PGMf.len;
    6bf2:	01 96       	adiw	r24, 0x01	; 1
    6bf4:	80 93 b1 23 	sts	0x23B1, r24
    6bf8:	90 93 b2 23 	sts	0x23B2, r25
	if (!LINEMODE(PGM.flags)) {			// processing is simple if not LINEMODE
    6bfc:	90 91 06 24 	lds	r25, 0x2406
    6c00:	96 fd       	sbrc	r25, 6
    6c02:	03 c0       	rjmp	.+6      	; 0x6c0a <xio_getc_pgm+0x58>
		if (ECHO(PGM.flags)) {
    6c04:	94 ff       	sbrs	r25, 4
    6c06:	1b c0       	rjmp	.+54     	; 0x6c3e <xio_getc_pgm+0x8c>
    6c08:	11 c0       	rjmp	.+34     	; 0x6c2c <xio_getc_pgm+0x7a>
			putchar(PGM.c);
		}
		return (PGM.c);
	}
	// now do the LINEMODE stuff
	if (PGM.c == NUL) {					// perform newline substitutions
    6c0a:	80 91 0a 24 	lds	r24, 0x240A
    6c0e:	88 23       	and	r24, r24
    6c10:	31 f0       	breq	.+12     	; 0x6c1e <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if (PGM.c == '\r') {
    6c12:	8d 30       	cpi	r24, 0x0D	; 13
    6c14:	21 f0       	breq	.+8      	; 0x6c1e <xio_getc_pgm+0x6c>
		PGM.c = '\n';
	} else if ((SEMICOLONS(PGM.flags)) && (PGM.c == ';')) {
    6c16:	97 ff       	sbrs	r25, 7
    6c18:	05 c0       	rjmp	.+10     	; 0x6c24 <xio_getc_pgm+0x72>
    6c1a:	8b 33       	cpi	r24, 0x3B	; 59
    6c1c:	19 f4       	brne	.+6      	; 0x6c24 <xio_getc_pgm+0x72>
		PGM.c = '\n';
    6c1e:	8a e0       	ldi	r24, 0x0A	; 10
    6c20:	80 93 0a 24 	sts	0x240A, r24
	}
	if (ECHO(PGM.flags)) {
    6c24:	80 91 06 24 	lds	r24, 0x2406
    6c28:	84 ff       	sbrs	r24, 4
    6c2a:	09 c0       	rjmp	.+18     	; 0x6c3e <xio_getc_pgm+0x8c>
		putchar(PGM.c);
    6c2c:	60 91 02 25 	lds	r22, 0x2502
    6c30:	70 91 03 25 	lds	r23, 0x2503
    6c34:	80 91 0a 24 	lds	r24, 0x240A
    6c38:	90 e0       	ldi	r25, 0x00	; 0
    6c3a:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
	}
	return (PGM.c);
    6c3e:	80 91 0a 24 	lds	r24, 0x240A
    6c42:	28 2f       	mov	r18, r24
    6c44:	30 e0       	ldi	r19, 0x00	; 0
}
    6c46:	c9 01       	movw	r24, r18
    6c48:	08 95       	ret

00006c4a <xio_setflags_pgm>:
/*
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
    6c4a:	bc 01       	movw	r22, r24
	xio_setflags(XIO_DEV_PGM, control);
    6c4c:	83 e0       	ldi	r24, 0x03	; 3
    6c4e:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xio_setflags>
	return (XIO_OK);									// for now it's always OK
}
    6c52:	80 e0       	ldi	r24, 0x00	; 0
    6c54:	90 e0       	ldi	r25, 0x00	; 0
    6c56:	08 95       	ret

00006c58 <xio_init_pgm>:
 */

void xio_init_pgm(const uint8_t dev, const uint8_t offset, const uint16_t control)
{
	// bind file struct to extended device parameters
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
    6c58:	90 e0       	ldi	r25, 0x00	; 0
    6c5a:	27 e1       	ldi	r18, 0x17	; 23
    6c5c:	30 e0       	ldi	r19, 0x00	; 0
    6c5e:	82 9f       	mul	r24, r18
    6c60:	f0 01       	movw	r30, r0
    6c62:	83 9f       	mul	r24, r19
    6c64:	f0 0d       	add	r31, r0
    6c66:	92 9f       	mul	r25, r18
    6c68:	f0 0d       	add	r31, r0
    6c6a:	11 24       	eor	r1, r1
    6c6c:	ef 53       	subi	r30, 0x3F	; 63
    6c6e:	fc 4d       	sbci	r31, 0xDC	; 220
    6c70:	86 e0       	ldi	r24, 0x06	; 6
    6c72:	68 9f       	mul	r22, r24
    6c74:	b0 01       	movw	r22, r0
    6c76:	11 24       	eor	r1, r1
    6c78:	61 55       	subi	r22, 0x51	; 81
    6c7a:	7c 4d       	sbci	r23, 0xDC	; 220
    6c7c:	61 8b       	std	Z+17, r22	; 0x11
    6c7e:	72 8b       	std	Z+18, r23	; 0x12
 *	xio_setflags_pgm() - check and set control flags for device
 */

int xio_setflags_pgm(const uint16_t control)
{
	xio_setflags(XIO_DEV_PGM, control);
    6c80:	83 e0       	ldi	r24, 0x03	; 3
    6c82:	ba 01       	movw	r22, r20
    6c84:	0e 94 52 28 	call	0x50a4	; 0x50a4 <xio_setflags>
	ds[dev].x = &fs[offset];		// bind pgm FILE struct
	// might be useful to sanity check the control bits before calling set flags
	//	- RD and BLOCK are mandatory
	// 	- WR and NOBLOCK are restricted
	xio_setflags_pgm(control);
}
    6c88:	08 95       	ret

00006c8a <net_init>:
 */

void net_init() 
{
	
}
    6c8a:	08 95       	ret

00006c8c <tg_repeater>:
void tg_repeater()
{
	char c;

	while (TRUE) {
		c = xio_getc(XIO_DEV_USB);		// blocking read
    6c8c:	81 e0       	ldi	r24, 0x01	; 1
    6c8e:	0e 94 05 29 	call	0x520a	; 0x520a <xio_getc>
    6c92:	68 2f       	mov	r22, r24
		xio_putc(XIO_DEV_RS485, c);		// transfer to RS485 port
    6c94:	80 e0       	ldi	r24, 0x00	; 0
    6c96:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <xio_putc>
    6c9a:	f8 cf       	rjmp	.-16     	; 0x6c8c <tg_repeater>

00006c9c <__lshrdi3>:
    6c9c:	ef 92       	push	r14
    6c9e:	ff 92       	push	r15
    6ca0:	0f 93       	push	r16
    6ca2:	df 93       	push	r29
    6ca4:	cf 93       	push	r28
    6ca6:	cd b7       	in	r28, 0x3d	; 61
    6ca8:	de b7       	in	r29, 0x3e	; 62
    6caa:	60 97       	sbiw	r28, 0x10	; 16
    6cac:	cd bf       	out	0x3d, r28	; 61
    6cae:	de bf       	out	0x3e, r29	; 62
    6cb0:	a8 2f       	mov	r26, r24
    6cb2:	00 23       	and	r16, r16
    6cb4:	09 f4       	brne	.+2      	; 0x6cb8 <__lshrdi3+0x1c>
    6cb6:	61 c0       	rjmp	.+194    	; 0x6d7a <__lshrdi3+0xde>
    6cb8:	7e 01       	movw	r14, r28
    6cba:	08 94       	sec
    6cbc:	e1 1c       	adc	r14, r1
    6cbe:	f1 1c       	adc	r15, r1
    6cc0:	88 e0       	ldi	r24, 0x08	; 8
    6cc2:	f7 01       	movw	r30, r14
    6cc4:	11 92       	st	Z+, r1
    6cc6:	8a 95       	dec	r24
    6cc8:	e9 f7       	brne	.-6      	; 0x6cc4 <__lshrdi3+0x28>
    6cca:	29 83       	std	Y+1, r18	; 0x01
    6ccc:	3a 83       	std	Y+2, r19	; 0x02
    6cce:	4b 83       	std	Y+3, r20	; 0x03
    6cd0:	5c 83       	std	Y+4, r21	; 0x04
    6cd2:	6d 83       	std	Y+5, r22	; 0x05
    6cd4:	7e 83       	std	Y+6, r23	; 0x06
    6cd6:	af 83       	std	Y+7, r26	; 0x07
    6cd8:	98 87       	std	Y+8, r25	; 0x08
    6cda:	80 e2       	ldi	r24, 0x20	; 32
    6cdc:	80 1b       	sub	r24, r16
    6cde:	e8 2f       	mov	r30, r24
    6ce0:	ff 27       	eor	r31, r31
    6ce2:	e7 fd       	sbrc	r30, 7
    6ce4:	f0 95       	com	r31
    6ce6:	4d 81       	ldd	r20, Y+5	; 0x05
    6ce8:	5e 81       	ldd	r21, Y+6	; 0x06
    6cea:	6f 81       	ldd	r22, Y+7	; 0x07
    6cec:	78 85       	ldd	r23, Y+8	; 0x08
    6cee:	18 16       	cp	r1, r24
    6cf0:	84 f0       	brlt	.+32     	; 0x6d12 <__lshrdi3+0x76>
    6cf2:	1d 86       	std	Y+13, r1	; 0x0d
    6cf4:	1e 86       	std	Y+14, r1	; 0x0e
    6cf6:	1f 86       	std	Y+15, r1	; 0x0f
    6cf8:	18 8a       	std	Y+16, r1	; 0x10
    6cfa:	88 27       	eor	r24, r24
    6cfc:	99 27       	eor	r25, r25
    6cfe:	8e 1b       	sub	r24, r30
    6d00:	9f 0b       	sbc	r25, r31
    6d02:	04 c0       	rjmp	.+8      	; 0x6d0c <__lshrdi3+0x70>
    6d04:	76 95       	lsr	r23
    6d06:	67 95       	ror	r22
    6d08:	57 95       	ror	r21
    6d0a:	47 95       	ror	r20
    6d0c:	8a 95       	dec	r24
    6d0e:	d2 f7       	brpl	.-12     	; 0x6d04 <__lshrdi3+0x68>
    6d10:	28 c0       	rjmp	.+80     	; 0x6d62 <__lshrdi3+0xc6>
    6d12:	20 2f       	mov	r18, r16
    6d14:	33 27       	eor	r19, r19
    6d16:	27 fd       	sbrc	r18, 7
    6d18:	30 95       	com	r19
    6d1a:	db 01       	movw	r26, r22
    6d1c:	ca 01       	movw	r24, r20
    6d1e:	02 2e       	mov	r0, r18
    6d20:	04 c0       	rjmp	.+8      	; 0x6d2a <__lshrdi3+0x8e>
    6d22:	b6 95       	lsr	r27
    6d24:	a7 95       	ror	r26
    6d26:	97 95       	ror	r25
    6d28:	87 95       	ror	r24
    6d2a:	0a 94       	dec	r0
    6d2c:	d2 f7       	brpl	.-12     	; 0x6d22 <__lshrdi3+0x86>
    6d2e:	8d 87       	std	Y+13, r24	; 0x0d
    6d30:	9e 87       	std	Y+14, r25	; 0x0e
    6d32:	af 87       	std	Y+15, r26	; 0x0f
    6d34:	b8 8b       	std	Y+16, r27	; 0x10
    6d36:	04 c0       	rjmp	.+8      	; 0x6d40 <__lshrdi3+0xa4>
    6d38:	44 0f       	add	r20, r20
    6d3a:	55 1f       	adc	r21, r21
    6d3c:	66 1f       	adc	r22, r22
    6d3e:	77 1f       	adc	r23, r23
    6d40:	ea 95       	dec	r30
    6d42:	d2 f7       	brpl	.-12     	; 0x6d38 <__lshrdi3+0x9c>
    6d44:	89 81       	ldd	r24, Y+1	; 0x01
    6d46:	9a 81       	ldd	r25, Y+2	; 0x02
    6d48:	ab 81       	ldd	r26, Y+3	; 0x03
    6d4a:	bc 81       	ldd	r27, Y+4	; 0x04
    6d4c:	04 c0       	rjmp	.+8      	; 0x6d56 <__lshrdi3+0xba>
    6d4e:	b6 95       	lsr	r27
    6d50:	a7 95       	ror	r26
    6d52:	97 95       	ror	r25
    6d54:	87 95       	ror	r24
    6d56:	2a 95       	dec	r18
    6d58:	d2 f7       	brpl	.-12     	; 0x6d4e <__lshrdi3+0xb2>
    6d5a:	48 2b       	or	r20, r24
    6d5c:	59 2b       	or	r21, r25
    6d5e:	6a 2b       	or	r22, r26
    6d60:	7b 2b       	or	r23, r27
    6d62:	49 87       	std	Y+9, r20	; 0x09
    6d64:	5a 87       	std	Y+10, r21	; 0x0a
    6d66:	6b 87       	std	Y+11, r22	; 0x0b
    6d68:	7c 87       	std	Y+12, r23	; 0x0c
    6d6a:	29 85       	ldd	r18, Y+9	; 0x09
    6d6c:	3a 85       	ldd	r19, Y+10	; 0x0a
    6d6e:	4b 85       	ldd	r20, Y+11	; 0x0b
    6d70:	5c 85       	ldd	r21, Y+12	; 0x0c
    6d72:	6d 85       	ldd	r22, Y+13	; 0x0d
    6d74:	7e 85       	ldd	r23, Y+14	; 0x0e
    6d76:	af 85       	ldd	r26, Y+15	; 0x0f
    6d78:	98 89       	ldd	r25, Y+16	; 0x10
    6d7a:	8a 2f       	mov	r24, r26
    6d7c:	60 96       	adiw	r28, 0x10	; 16
    6d7e:	cd bf       	out	0x3d, r28	; 61
    6d80:	de bf       	out	0x3e, r29	; 62
    6d82:	cf 91       	pop	r28
    6d84:	df 91       	pop	r29
    6d86:	0f 91       	pop	r16
    6d88:	ff 90       	pop	r15
    6d8a:	ef 90       	pop	r14
    6d8c:	08 95       	ret

00006d8e <__ashldi3>:
    6d8e:	ef 92       	push	r14
    6d90:	ff 92       	push	r15
    6d92:	0f 93       	push	r16
    6d94:	df 93       	push	r29
    6d96:	cf 93       	push	r28
    6d98:	cd b7       	in	r28, 0x3d	; 61
    6d9a:	de b7       	in	r29, 0x3e	; 62
    6d9c:	60 97       	sbiw	r28, 0x10	; 16
    6d9e:	cd bf       	out	0x3d, r28	; 61
    6da0:	de bf       	out	0x3e, r29	; 62
    6da2:	a8 2f       	mov	r26, r24
    6da4:	00 23       	and	r16, r16
    6da6:	09 f4       	brne	.+2      	; 0x6daa <__ashldi3+0x1c>
    6da8:	61 c0       	rjmp	.+194    	; 0x6e6c <__ashldi3+0xde>
    6daa:	7e 01       	movw	r14, r28
    6dac:	08 94       	sec
    6dae:	e1 1c       	adc	r14, r1
    6db0:	f1 1c       	adc	r15, r1
    6db2:	88 e0       	ldi	r24, 0x08	; 8
    6db4:	f7 01       	movw	r30, r14
    6db6:	11 92       	st	Z+, r1
    6db8:	8a 95       	dec	r24
    6dba:	e9 f7       	brne	.-6      	; 0x6db6 <__ashldi3+0x28>
    6dbc:	29 83       	std	Y+1, r18	; 0x01
    6dbe:	3a 83       	std	Y+2, r19	; 0x02
    6dc0:	4b 83       	std	Y+3, r20	; 0x03
    6dc2:	5c 83       	std	Y+4, r21	; 0x04
    6dc4:	6d 83       	std	Y+5, r22	; 0x05
    6dc6:	7e 83       	std	Y+6, r23	; 0x06
    6dc8:	af 83       	std	Y+7, r26	; 0x07
    6dca:	98 87       	std	Y+8, r25	; 0x08
    6dcc:	80 e2       	ldi	r24, 0x20	; 32
    6dce:	80 1b       	sub	r24, r16
    6dd0:	e8 2f       	mov	r30, r24
    6dd2:	ff 27       	eor	r31, r31
    6dd4:	e7 fd       	sbrc	r30, 7
    6dd6:	f0 95       	com	r31
    6dd8:	49 81       	ldd	r20, Y+1	; 0x01
    6dda:	5a 81       	ldd	r21, Y+2	; 0x02
    6ddc:	6b 81       	ldd	r22, Y+3	; 0x03
    6dde:	7c 81       	ldd	r23, Y+4	; 0x04
    6de0:	18 16       	cp	r1, r24
    6de2:	84 f0       	brlt	.+32     	; 0x6e04 <__ashldi3+0x76>
    6de4:	19 86       	std	Y+9, r1	; 0x09
    6de6:	1a 86       	std	Y+10, r1	; 0x0a
    6de8:	1b 86       	std	Y+11, r1	; 0x0b
    6dea:	1c 86       	std	Y+12, r1	; 0x0c
    6dec:	88 27       	eor	r24, r24
    6dee:	99 27       	eor	r25, r25
    6df0:	8e 1b       	sub	r24, r30
    6df2:	9f 0b       	sbc	r25, r31
    6df4:	04 c0       	rjmp	.+8      	; 0x6dfe <__ashldi3+0x70>
    6df6:	44 0f       	add	r20, r20
    6df8:	55 1f       	adc	r21, r21
    6dfa:	66 1f       	adc	r22, r22
    6dfc:	77 1f       	adc	r23, r23
    6dfe:	8a 95       	dec	r24
    6e00:	d2 f7       	brpl	.-12     	; 0x6df6 <__ashldi3+0x68>
    6e02:	28 c0       	rjmp	.+80     	; 0x6e54 <__ashldi3+0xc6>
    6e04:	20 2f       	mov	r18, r16
    6e06:	33 27       	eor	r19, r19
    6e08:	27 fd       	sbrc	r18, 7
    6e0a:	30 95       	com	r19
    6e0c:	db 01       	movw	r26, r22
    6e0e:	ca 01       	movw	r24, r20
    6e10:	02 2e       	mov	r0, r18
    6e12:	04 c0       	rjmp	.+8      	; 0x6e1c <__ashldi3+0x8e>
    6e14:	88 0f       	add	r24, r24
    6e16:	99 1f       	adc	r25, r25
    6e18:	aa 1f       	adc	r26, r26
    6e1a:	bb 1f       	adc	r27, r27
    6e1c:	0a 94       	dec	r0
    6e1e:	d2 f7       	brpl	.-12     	; 0x6e14 <__ashldi3+0x86>
    6e20:	89 87       	std	Y+9, r24	; 0x09
    6e22:	9a 87       	std	Y+10, r25	; 0x0a
    6e24:	ab 87       	std	Y+11, r26	; 0x0b
    6e26:	bc 87       	std	Y+12, r27	; 0x0c
    6e28:	04 c0       	rjmp	.+8      	; 0x6e32 <__ashldi3+0xa4>
    6e2a:	76 95       	lsr	r23
    6e2c:	67 95       	ror	r22
    6e2e:	57 95       	ror	r21
    6e30:	47 95       	ror	r20
    6e32:	ea 95       	dec	r30
    6e34:	d2 f7       	brpl	.-12     	; 0x6e2a <__ashldi3+0x9c>
    6e36:	8d 81       	ldd	r24, Y+5	; 0x05
    6e38:	9e 81       	ldd	r25, Y+6	; 0x06
    6e3a:	af 81       	ldd	r26, Y+7	; 0x07
    6e3c:	b8 85       	ldd	r27, Y+8	; 0x08
    6e3e:	04 c0       	rjmp	.+8      	; 0x6e48 <__ashldi3+0xba>
    6e40:	88 0f       	add	r24, r24
    6e42:	99 1f       	adc	r25, r25
    6e44:	aa 1f       	adc	r26, r26
    6e46:	bb 1f       	adc	r27, r27
    6e48:	2a 95       	dec	r18
    6e4a:	d2 f7       	brpl	.-12     	; 0x6e40 <__ashldi3+0xb2>
    6e4c:	48 2b       	or	r20, r24
    6e4e:	59 2b       	or	r21, r25
    6e50:	6a 2b       	or	r22, r26
    6e52:	7b 2b       	or	r23, r27
    6e54:	4d 87       	std	Y+13, r20	; 0x0d
    6e56:	5e 87       	std	Y+14, r21	; 0x0e
    6e58:	6f 87       	std	Y+15, r22	; 0x0f
    6e5a:	78 8b       	std	Y+16, r23	; 0x10
    6e5c:	29 85       	ldd	r18, Y+9	; 0x09
    6e5e:	3a 85       	ldd	r19, Y+10	; 0x0a
    6e60:	4b 85       	ldd	r20, Y+11	; 0x0b
    6e62:	5c 85       	ldd	r21, Y+12	; 0x0c
    6e64:	6d 85       	ldd	r22, Y+13	; 0x0d
    6e66:	7e 85       	ldd	r23, Y+14	; 0x0e
    6e68:	af 85       	ldd	r26, Y+15	; 0x0f
    6e6a:	98 89       	ldd	r25, Y+16	; 0x10
    6e6c:	8a 2f       	mov	r24, r26
    6e6e:	60 96       	adiw	r28, 0x10	; 16
    6e70:	cd bf       	out	0x3d, r28	; 61
    6e72:	de bf       	out	0x3e, r29	; 62
    6e74:	cf 91       	pop	r28
    6e76:	df 91       	pop	r29
    6e78:	0f 91       	pop	r16
    6e7a:	ff 90       	pop	r15
    6e7c:	ef 90       	pop	r14
    6e7e:	08 95       	ret

00006e80 <__udivdi3>:
    6e80:	ae e5       	ldi	r26, 0x5E	; 94
    6e82:	b0 e0       	ldi	r27, 0x00	; 0
    6e84:	e6 e4       	ldi	r30, 0x46	; 70
    6e86:	f7 e3       	ldi	r31, 0x37	; 55
    6e88:	0c 94 d3 45 	jmp	0x8ba6	; 0x8ba6 <__prologue_saves__>
    6e8c:	a8 e0       	ldi	r26, 0x08	; 8
    6e8e:	4e 01       	movw	r8, r28
    6e90:	08 94       	sec
    6e92:	81 1c       	adc	r8, r1
    6e94:	91 1c       	adc	r9, r1
    6e96:	f4 01       	movw	r30, r8
    6e98:	6a 2e       	mov	r6, r26
    6e9a:	11 92       	st	Z+, r1
    6e9c:	6a 94       	dec	r6
    6e9e:	e9 f7       	brne	.-6      	; 0x6e9a <__udivdi3+0x1a>
    6ea0:	29 83       	std	Y+1, r18	; 0x01
    6ea2:	3a 83       	std	Y+2, r19	; 0x02
    6ea4:	4b 83       	std	Y+3, r20	; 0x03
    6ea6:	5c 83       	std	Y+4, r21	; 0x04
    6ea8:	6d 83       	std	Y+5, r22	; 0x05
    6eaa:	7e 83       	std	Y+6, r23	; 0x06
    6eac:	8f 83       	std	Y+7, r24	; 0x07
    6eae:	98 87       	std	Y+8, r25	; 0x08
    6eb0:	ce 01       	movw	r24, r28
    6eb2:	09 96       	adiw	r24, 0x09	; 9
    6eb4:	fc 01       	movw	r30, r24
    6eb6:	11 92       	st	Z+, r1
    6eb8:	aa 95       	dec	r26
    6eba:	e9 f7       	brne	.-6      	; 0x6eb6 <__udivdi3+0x36>
    6ebc:	a9 86       	std	Y+9, r10	; 0x09
    6ebe:	ba 86       	std	Y+10, r11	; 0x0a
    6ec0:	cb 86       	std	Y+11, r12	; 0x0b
    6ec2:	dc 86       	std	Y+12, r13	; 0x0c
    6ec4:	ed 86       	std	Y+13, r14	; 0x0d
    6ec6:	fe 86       	std	Y+14, r15	; 0x0e
    6ec8:	0f 87       	std	Y+15, r16	; 0x0f
    6eca:	18 8b       	std	Y+16, r17	; 0x10
    6ecc:	29 84       	ldd	r2, Y+9	; 0x09
    6ece:	3a 84       	ldd	r3, Y+10	; 0x0a
    6ed0:	4b 84       	ldd	r4, Y+11	; 0x0b
    6ed2:	5c 84       	ldd	r5, Y+12	; 0x0c
    6ed4:	ed 84       	ldd	r14, Y+13	; 0x0d
    6ed6:	fe 84       	ldd	r15, Y+14	; 0x0e
    6ed8:	0f 85       	ldd	r16, Y+15	; 0x0f
    6eda:	18 89       	ldd	r17, Y+16	; 0x10
    6edc:	69 80       	ldd	r6, Y+1	; 0x01
    6ede:	7a 80       	ldd	r7, Y+2	; 0x02
    6ee0:	8b 80       	ldd	r8, Y+3	; 0x03
    6ee2:	9c 80       	ldd	r9, Y+4	; 0x04
    6ee4:	6d a6       	std	Y+45, r6	; 0x2d
    6ee6:	7e a6       	std	Y+46, r7	; 0x2e
    6ee8:	8f a6       	std	Y+47, r8	; 0x2f
    6eea:	98 aa       	std	Y+48, r9	; 0x30
    6eec:	6d 80       	ldd	r6, Y+5	; 0x05
    6eee:	7e 80       	ldd	r7, Y+6	; 0x06
    6ef0:	8f 80       	ldd	r8, Y+7	; 0x07
    6ef2:	98 84       	ldd	r9, Y+8	; 0x08
    6ef4:	e1 14       	cp	r14, r1
    6ef6:	f1 04       	cpc	r15, r1
    6ef8:	01 05       	cpc	r16, r1
    6efa:	11 05       	cpc	r17, r1
    6efc:	09 f0       	breq	.+2      	; 0x6f00 <__udivdi3+0x80>
    6efe:	b3 c3       	rjmp	.+1894   	; 0x7666 <__udivdi3+0x7e6>
    6f00:	62 14       	cp	r6, r2
    6f02:	73 04       	cpc	r7, r3
    6f04:	84 04       	cpc	r8, r4
    6f06:	95 04       	cpc	r9, r5
    6f08:	08 f0       	brcs	.+2      	; 0x6f0c <__udivdi3+0x8c>
    6f0a:	3d c1       	rjmp	.+634    	; 0x7186 <__udivdi3+0x306>
    6f0c:	00 e0       	ldi	r16, 0x00	; 0
    6f0e:	20 16       	cp	r2, r16
    6f10:	00 e0       	ldi	r16, 0x00	; 0
    6f12:	30 06       	cpc	r3, r16
    6f14:	01 e0       	ldi	r16, 0x01	; 1
    6f16:	40 06       	cpc	r4, r16
    6f18:	00 e0       	ldi	r16, 0x00	; 0
    6f1a:	50 06       	cpc	r5, r16
    6f1c:	88 f4       	brcc	.+34     	; 0x6f40 <__udivdi3+0xc0>
    6f1e:	1f ef       	ldi	r17, 0xFF	; 255
    6f20:	21 16       	cp	r2, r17
    6f22:	31 04       	cpc	r3, r1
    6f24:	41 04       	cpc	r4, r1
    6f26:	51 04       	cpc	r5, r1
    6f28:	39 f0       	breq	.+14     	; 0x6f38 <__udivdi3+0xb8>
    6f2a:	30 f0       	brcs	.+12     	; 0x6f38 <__udivdi3+0xb8>
    6f2c:	48 e0       	ldi	r20, 0x08	; 8
    6f2e:	e4 2e       	mov	r14, r20
    6f30:	f1 2c       	mov	r15, r1
    6f32:	01 2d       	mov	r16, r1
    6f34:	11 2d       	mov	r17, r1
    6f36:	18 c0       	rjmp	.+48     	; 0x6f68 <__udivdi3+0xe8>
    6f38:	ee 24       	eor	r14, r14
    6f3a:	ff 24       	eor	r15, r15
    6f3c:	87 01       	movw	r16, r14
    6f3e:	14 c0       	rjmp	.+40     	; 0x6f68 <__udivdi3+0xe8>
    6f40:	20 e0       	ldi	r18, 0x00	; 0
    6f42:	22 16       	cp	r2, r18
    6f44:	20 e0       	ldi	r18, 0x00	; 0
    6f46:	32 06       	cpc	r3, r18
    6f48:	20 e0       	ldi	r18, 0x00	; 0
    6f4a:	42 06       	cpc	r4, r18
    6f4c:	21 e0       	ldi	r18, 0x01	; 1
    6f4e:	52 06       	cpc	r5, r18
    6f50:	30 f0       	brcs	.+12     	; 0x6f5e <__udivdi3+0xde>
    6f52:	38 e1       	ldi	r19, 0x18	; 24
    6f54:	e3 2e       	mov	r14, r19
    6f56:	f1 2c       	mov	r15, r1
    6f58:	01 2d       	mov	r16, r1
    6f5a:	11 2d       	mov	r17, r1
    6f5c:	05 c0       	rjmp	.+10     	; 0x6f68 <__udivdi3+0xe8>
    6f5e:	20 e1       	ldi	r18, 0x10	; 16
    6f60:	e2 2e       	mov	r14, r18
    6f62:	f1 2c       	mov	r15, r1
    6f64:	01 2d       	mov	r16, r1
    6f66:	11 2d       	mov	r17, r1
    6f68:	d2 01       	movw	r26, r4
    6f6a:	c1 01       	movw	r24, r2
    6f6c:	0e 2c       	mov	r0, r14
    6f6e:	04 c0       	rjmp	.+8      	; 0x6f78 <__udivdi3+0xf8>
    6f70:	b6 95       	lsr	r27
    6f72:	a7 95       	ror	r26
    6f74:	97 95       	ror	r25
    6f76:	87 95       	ror	r24
    6f78:	0a 94       	dec	r0
    6f7a:	d2 f7       	brpl	.-12     	; 0x6f70 <__udivdi3+0xf0>
    6f7c:	8d 5f       	subi	r24, 0xFD	; 253
    6f7e:	9f 4d       	sbci	r25, 0xDF	; 223
    6f80:	dc 01       	movw	r26, r24
    6f82:	2c 91       	ld	r18, X
    6f84:	80 e2       	ldi	r24, 0x20	; 32
    6f86:	90 e0       	ldi	r25, 0x00	; 0
    6f88:	a0 e0       	ldi	r26, 0x00	; 0
    6f8a:	b0 e0       	ldi	r27, 0x00	; 0
    6f8c:	8e 19       	sub	r24, r14
    6f8e:	9f 09       	sbc	r25, r15
    6f90:	a0 0b       	sbc	r26, r16
    6f92:	b1 0b       	sbc	r27, r17
    6f94:	7c 01       	movw	r14, r24
    6f96:	8d 01       	movw	r16, r26
    6f98:	e2 1a       	sub	r14, r18
    6f9a:	f1 08       	sbc	r15, r1
    6f9c:	01 09       	sbc	r16, r1
    6f9e:	11 09       	sbc	r17, r1
    6fa0:	e1 14       	cp	r14, r1
    6fa2:	f1 04       	cpc	r15, r1
    6fa4:	01 05       	cpc	r16, r1
    6fa6:	11 05       	cpc	r17, r1
    6fa8:	a1 f1       	breq	.+104    	; 0x7012 <__udivdi3+0x192>
    6faa:	0e 2c       	mov	r0, r14
    6fac:	04 c0       	rjmp	.+8      	; 0x6fb6 <__udivdi3+0x136>
    6fae:	22 0c       	add	r2, r2
    6fb0:	33 1c       	adc	r3, r3
    6fb2:	44 1c       	adc	r4, r4
    6fb4:	55 1c       	adc	r5, r5
    6fb6:	0a 94       	dec	r0
    6fb8:	d2 f7       	brpl	.-12     	; 0x6fae <__udivdi3+0x12e>
    6fba:	a4 01       	movw	r20, r8
    6fbc:	93 01       	movw	r18, r6
    6fbe:	0e 2c       	mov	r0, r14
    6fc0:	04 c0       	rjmp	.+8      	; 0x6fca <__udivdi3+0x14a>
    6fc2:	22 0f       	add	r18, r18
    6fc4:	33 1f       	adc	r19, r19
    6fc6:	44 1f       	adc	r20, r20
    6fc8:	55 1f       	adc	r21, r21
    6fca:	0a 94       	dec	r0
    6fcc:	d2 f7       	brpl	.-12     	; 0x6fc2 <__udivdi3+0x142>
    6fce:	80 e2       	ldi	r24, 0x20	; 32
    6fd0:	90 e0       	ldi	r25, 0x00	; 0
    6fd2:	8e 19       	sub	r24, r14
    6fd4:	9f 09       	sbc	r25, r15
    6fd6:	6d a4       	ldd	r6, Y+45	; 0x2d
    6fd8:	7e a4       	ldd	r7, Y+46	; 0x2e
    6fda:	8f a4       	ldd	r8, Y+47	; 0x2f
    6fdc:	98 a8       	ldd	r9, Y+48	; 0x30
    6fde:	04 c0       	rjmp	.+8      	; 0x6fe8 <__udivdi3+0x168>
    6fe0:	96 94       	lsr	r9
    6fe2:	87 94       	ror	r8
    6fe4:	77 94       	ror	r7
    6fe6:	67 94       	ror	r6
    6fe8:	8a 95       	dec	r24
    6fea:	d2 f7       	brpl	.-12     	; 0x6fe0 <__udivdi3+0x160>
    6fec:	62 2a       	or	r6, r18
    6fee:	73 2a       	or	r7, r19
    6ff0:	84 2a       	or	r8, r20
    6ff2:	95 2a       	or	r9, r21
    6ff4:	ad a4       	ldd	r10, Y+45	; 0x2d
    6ff6:	be a4       	ldd	r11, Y+46	; 0x2e
    6ff8:	cf a4       	ldd	r12, Y+47	; 0x2f
    6ffa:	d8 a8       	ldd	r13, Y+48	; 0x30
    6ffc:	04 c0       	rjmp	.+8      	; 0x7006 <__udivdi3+0x186>
    6ffe:	aa 0c       	add	r10, r10
    7000:	bb 1c       	adc	r11, r11
    7002:	cc 1c       	adc	r12, r12
    7004:	dd 1c       	adc	r13, r13
    7006:	ea 94       	dec	r14
    7008:	d2 f7       	brpl	.-12     	; 0x6ffe <__udivdi3+0x17e>
    700a:	ad a6       	std	Y+45, r10	; 0x2d
    700c:	be a6       	std	Y+46, r11	; 0x2e
    700e:	cf a6       	std	Y+47, r12	; 0x2f
    7010:	d8 aa       	std	Y+48, r13	; 0x30
    7012:	62 01       	movw	r12, r4
    7014:	ee 24       	eor	r14, r14
    7016:	ff 24       	eor	r15, r15
    7018:	cd aa       	std	Y+53, r12	; 0x35
    701a:	de aa       	std	Y+54, r13	; 0x36
    701c:	ef aa       	std	Y+55, r14	; 0x37
    701e:	f8 ae       	std	Y+56, r15	; 0x38
    7020:	92 01       	movw	r18, r4
    7022:	81 01       	movw	r16, r2
    7024:	20 70       	andi	r18, 0x00	; 0
    7026:	30 70       	andi	r19, 0x00	; 0
    7028:	09 af       	std	Y+57, r16	; 0x39
    702a:	1a af       	std	Y+58, r17	; 0x3a
    702c:	2b af       	std	Y+59, r18	; 0x3b
    702e:	3c af       	std	Y+60, r19	; 0x3c
    7030:	c4 01       	movw	r24, r8
    7032:	b3 01       	movw	r22, r6
    7034:	a7 01       	movw	r20, r14
    7036:	96 01       	movw	r18, r12
    7038:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__udivmodsi4>
    703c:	7b 01       	movw	r14, r22
    703e:	8c 01       	movw	r16, r24
    7040:	c4 01       	movw	r24, r8
    7042:	b3 01       	movw	r22, r6
    7044:	2d a9       	ldd	r18, Y+53	; 0x35
    7046:	3e a9       	ldd	r19, Y+54	; 0x36
    7048:	4f a9       	ldd	r20, Y+55	; 0x37
    704a:	58 ad       	ldd	r21, Y+56	; 0x38
    704c:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__udivmodsi4>
    7050:	c9 01       	movw	r24, r18
    7052:	da 01       	movw	r26, r20
    7054:	3c 01       	movw	r6, r24
    7056:	4d 01       	movw	r8, r26
    7058:	c4 01       	movw	r24, r8
    705a:	b3 01       	movw	r22, r6
    705c:	29 ad       	ldd	r18, Y+57	; 0x39
    705e:	3a ad       	ldd	r19, Y+58	; 0x3a
    7060:	4b ad       	ldd	r20, Y+59	; 0x3b
    7062:	5c ad       	ldd	r21, Y+60	; 0x3c
    7064:	0e 94 92 45 	call	0x8b24	; 0x8b24 <__mulsi3>
    7068:	9b 01       	movw	r18, r22
    706a:	ac 01       	movw	r20, r24
    706c:	87 01       	movw	r16, r14
    706e:	ff 24       	eor	r15, r15
    7070:	ee 24       	eor	r14, r14
    7072:	ad a4       	ldd	r10, Y+45	; 0x2d
    7074:	be a4       	ldd	r11, Y+46	; 0x2e
    7076:	cf a4       	ldd	r12, Y+47	; 0x2f
    7078:	d8 a8       	ldd	r13, Y+48	; 0x30
    707a:	c6 01       	movw	r24, r12
    707c:	aa 27       	eor	r26, r26
    707e:	bb 27       	eor	r27, r27
    7080:	57 01       	movw	r10, r14
    7082:	68 01       	movw	r12, r16
    7084:	a8 2a       	or	r10, r24
    7086:	b9 2a       	or	r11, r25
    7088:	ca 2a       	or	r12, r26
    708a:	db 2a       	or	r13, r27
    708c:	a2 16       	cp	r10, r18
    708e:	b3 06       	cpc	r11, r19
    7090:	c4 06       	cpc	r12, r20
    7092:	d5 06       	cpc	r13, r21
    7094:	e0 f4       	brcc	.+56     	; 0x70ce <__udivdi3+0x24e>
    7096:	08 94       	sec
    7098:	61 08       	sbc	r6, r1
    709a:	71 08       	sbc	r7, r1
    709c:	81 08       	sbc	r8, r1
    709e:	91 08       	sbc	r9, r1
    70a0:	a2 0c       	add	r10, r2
    70a2:	b3 1c       	adc	r11, r3
    70a4:	c4 1c       	adc	r12, r4
    70a6:	d5 1c       	adc	r13, r5
    70a8:	a2 14       	cp	r10, r2
    70aa:	b3 04       	cpc	r11, r3
    70ac:	c4 04       	cpc	r12, r4
    70ae:	d5 04       	cpc	r13, r5
    70b0:	70 f0       	brcs	.+28     	; 0x70ce <__udivdi3+0x24e>
    70b2:	a2 16       	cp	r10, r18
    70b4:	b3 06       	cpc	r11, r19
    70b6:	c4 06       	cpc	r12, r20
    70b8:	d5 06       	cpc	r13, r21
    70ba:	48 f4       	brcc	.+18     	; 0x70ce <__udivdi3+0x24e>
    70bc:	08 94       	sec
    70be:	61 08       	sbc	r6, r1
    70c0:	71 08       	sbc	r7, r1
    70c2:	81 08       	sbc	r8, r1
    70c4:	91 08       	sbc	r9, r1
    70c6:	a2 0c       	add	r10, r2
    70c8:	b3 1c       	adc	r11, r3
    70ca:	c4 1c       	adc	r12, r4
    70cc:	d5 1c       	adc	r13, r5
    70ce:	a2 1a       	sub	r10, r18
    70d0:	b3 0a       	sbc	r11, r19
    70d2:	c4 0a       	sbc	r12, r20
    70d4:	d5 0a       	sbc	r13, r21
    70d6:	c6 01       	movw	r24, r12
    70d8:	b5 01       	movw	r22, r10
    70da:	2d a9       	ldd	r18, Y+53	; 0x35
    70dc:	3e a9       	ldd	r19, Y+54	; 0x36
    70de:	4f a9       	ldd	r20, Y+55	; 0x37
    70e0:	58 ad       	ldd	r21, Y+56	; 0x38
    70e2:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__udivmodsi4>
    70e6:	7b 01       	movw	r14, r22
    70e8:	8c 01       	movw	r16, r24
    70ea:	c6 01       	movw	r24, r12
    70ec:	b5 01       	movw	r22, r10
    70ee:	2d a9       	ldd	r18, Y+53	; 0x35
    70f0:	3e a9       	ldd	r19, Y+54	; 0x36
    70f2:	4f a9       	ldd	r20, Y+55	; 0x37
    70f4:	58 ad       	ldd	r21, Y+56	; 0x38
    70f6:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__udivmodsi4>
    70fa:	c9 01       	movw	r24, r18
    70fc:	da 01       	movw	r26, r20
    70fe:	5c 01       	movw	r10, r24
    7100:	6d 01       	movw	r12, r26
    7102:	c6 01       	movw	r24, r12
    7104:	b5 01       	movw	r22, r10
    7106:	29 ad       	ldd	r18, Y+57	; 0x39
    7108:	3a ad       	ldd	r19, Y+58	; 0x3a
    710a:	4b ad       	ldd	r20, Y+59	; 0x3b
    710c:	5c ad       	ldd	r21, Y+60	; 0x3c
    710e:	0e 94 92 45 	call	0x8b24	; 0x8b24 <__mulsi3>
    7112:	9b 01       	movw	r18, r22
    7114:	ac 01       	movw	r20, r24
    7116:	87 01       	movw	r16, r14
    7118:	ff 24       	eor	r15, r15
    711a:	ee 24       	eor	r14, r14
    711c:	8d a5       	ldd	r24, Y+45	; 0x2d
    711e:	9e a5       	ldd	r25, Y+46	; 0x2e
    7120:	af a5       	ldd	r26, Y+47	; 0x2f
    7122:	b8 a9       	ldd	r27, Y+48	; 0x30
    7124:	a0 70       	andi	r26, 0x00	; 0
    7126:	b0 70       	andi	r27, 0x00	; 0
    7128:	e8 2a       	or	r14, r24
    712a:	f9 2a       	or	r15, r25
    712c:	0a 2b       	or	r16, r26
    712e:	1b 2b       	or	r17, r27
    7130:	e2 16       	cp	r14, r18
    7132:	f3 06       	cpc	r15, r19
    7134:	04 07       	cpc	r16, r20
    7136:	15 07       	cpc	r17, r21
    7138:	c0 f4       	brcc	.+48     	; 0x716a <__udivdi3+0x2ea>
    713a:	08 94       	sec
    713c:	a1 08       	sbc	r10, r1
    713e:	b1 08       	sbc	r11, r1
    7140:	c1 08       	sbc	r12, r1
    7142:	d1 08       	sbc	r13, r1
    7144:	e2 0c       	add	r14, r2
    7146:	f3 1c       	adc	r15, r3
    7148:	04 1d       	adc	r16, r4
    714a:	15 1d       	adc	r17, r5
    714c:	e2 14       	cp	r14, r2
    714e:	f3 04       	cpc	r15, r3
    7150:	04 05       	cpc	r16, r4
    7152:	15 05       	cpc	r17, r5
    7154:	50 f0       	brcs	.+20     	; 0x716a <__udivdi3+0x2ea>
    7156:	e2 16       	cp	r14, r18
    7158:	f3 06       	cpc	r15, r19
    715a:	04 07       	cpc	r16, r20
    715c:	15 07       	cpc	r17, r21
    715e:	28 f4       	brcc	.+10     	; 0x716a <__udivdi3+0x2ea>
    7160:	08 94       	sec
    7162:	a1 08       	sbc	r10, r1
    7164:	b1 08       	sbc	r11, r1
    7166:	c1 08       	sbc	r12, r1
    7168:	d1 08       	sbc	r13, r1
    716a:	d3 01       	movw	r26, r6
    716c:	99 27       	eor	r25, r25
    716e:	88 27       	eor	r24, r24
    7170:	86 01       	movw	r16, r12
    7172:	75 01       	movw	r14, r10
    7174:	e8 2a       	or	r14, r24
    7176:	f9 2a       	or	r15, r25
    7178:	0a 2b       	or	r16, r26
    717a:	1b 2b       	or	r17, r27
    717c:	e9 aa       	std	Y+49, r14	; 0x31
    717e:	fa aa       	std	Y+50, r15	; 0x32
    7180:	0b ab       	std	Y+51, r16	; 0x33
    7182:	1c ab       	std	Y+52, r17	; 0x34
    7184:	cf c4       	rjmp	.+2462   	; 0x7b24 <__udivdi3+0xca4>
    7186:	21 14       	cp	r2, r1
    7188:	31 04       	cpc	r3, r1
    718a:	41 04       	cpc	r4, r1
    718c:	51 04       	cpc	r5, r1
    718e:	71 f4       	brne	.+28     	; 0x71ac <__udivdi3+0x32c>
    7190:	61 e0       	ldi	r22, 0x01	; 1
    7192:	70 e0       	ldi	r23, 0x00	; 0
    7194:	80 e0       	ldi	r24, 0x00	; 0
    7196:	90 e0       	ldi	r25, 0x00	; 0
    7198:	20 e0       	ldi	r18, 0x00	; 0
    719a:	30 e0       	ldi	r19, 0x00	; 0
    719c:	40 e0       	ldi	r20, 0x00	; 0
    719e:	50 e0       	ldi	r21, 0x00	; 0
    71a0:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__udivmodsi4>
    71a4:	c9 01       	movw	r24, r18
    71a6:	da 01       	movw	r26, r20
    71a8:	1c 01       	movw	r2, r24
    71aa:	2d 01       	movw	r4, r26
    71ac:	00 e0       	ldi	r16, 0x00	; 0
    71ae:	20 16       	cp	r2, r16
    71b0:	00 e0       	ldi	r16, 0x00	; 0
    71b2:	30 06       	cpc	r3, r16
    71b4:	01 e0       	ldi	r16, 0x01	; 1
    71b6:	40 06       	cpc	r4, r16
    71b8:	00 e0       	ldi	r16, 0x00	; 0
    71ba:	50 06       	cpc	r5, r16
    71bc:	88 f4       	brcc	.+34     	; 0x71e0 <__udivdi3+0x360>
    71be:	1f ef       	ldi	r17, 0xFF	; 255
    71c0:	21 16       	cp	r2, r17
    71c2:	31 04       	cpc	r3, r1
    71c4:	41 04       	cpc	r4, r1
    71c6:	51 04       	cpc	r5, r1
    71c8:	31 f0       	breq	.+12     	; 0x71d6 <__udivdi3+0x356>
    71ca:	28 f0       	brcs	.+10     	; 0x71d6 <__udivdi3+0x356>
    71cc:	48 e0       	ldi	r20, 0x08	; 8
    71ce:	50 e0       	ldi	r21, 0x00	; 0
    71d0:	60 e0       	ldi	r22, 0x00	; 0
    71d2:	70 e0       	ldi	r23, 0x00	; 0
    71d4:	17 c0       	rjmp	.+46     	; 0x7204 <__udivdi3+0x384>
    71d6:	40 e0       	ldi	r20, 0x00	; 0
    71d8:	50 e0       	ldi	r21, 0x00	; 0
    71da:	60 e0       	ldi	r22, 0x00	; 0
    71dc:	70 e0       	ldi	r23, 0x00	; 0
    71de:	12 c0       	rjmp	.+36     	; 0x7204 <__udivdi3+0x384>
    71e0:	20 e0       	ldi	r18, 0x00	; 0
    71e2:	22 16       	cp	r2, r18
    71e4:	20 e0       	ldi	r18, 0x00	; 0
    71e6:	32 06       	cpc	r3, r18
    71e8:	20 e0       	ldi	r18, 0x00	; 0
    71ea:	42 06       	cpc	r4, r18
    71ec:	21 e0       	ldi	r18, 0x01	; 1
    71ee:	52 06       	cpc	r5, r18
    71f0:	28 f0       	brcs	.+10     	; 0x71fc <__udivdi3+0x37c>
    71f2:	48 e1       	ldi	r20, 0x18	; 24
    71f4:	50 e0       	ldi	r21, 0x00	; 0
    71f6:	60 e0       	ldi	r22, 0x00	; 0
    71f8:	70 e0       	ldi	r23, 0x00	; 0
    71fa:	04 c0       	rjmp	.+8      	; 0x7204 <__udivdi3+0x384>
    71fc:	40 e1       	ldi	r20, 0x10	; 16
    71fe:	50 e0       	ldi	r21, 0x00	; 0
    7200:	60 e0       	ldi	r22, 0x00	; 0
    7202:	70 e0       	ldi	r23, 0x00	; 0
    7204:	d2 01       	movw	r26, r4
    7206:	c1 01       	movw	r24, r2
    7208:	04 2e       	mov	r0, r20
    720a:	04 c0       	rjmp	.+8      	; 0x7214 <__udivdi3+0x394>
    720c:	b6 95       	lsr	r27
    720e:	a7 95       	ror	r26
    7210:	97 95       	ror	r25
    7212:	87 95       	ror	r24
    7214:	0a 94       	dec	r0
    7216:	d2 f7       	brpl	.-12     	; 0x720c <__udivdi3+0x38c>
    7218:	8d 5f       	subi	r24, 0xFD	; 253
    721a:	9f 4d       	sbci	r25, 0xDF	; 223
    721c:	dc 01       	movw	r26, r24
    721e:	2c 91       	ld	r18, X
    7220:	e0 e2       	ldi	r30, 0x20	; 32
    7222:	ee 2e       	mov	r14, r30
    7224:	f1 2c       	mov	r15, r1
    7226:	01 2d       	mov	r16, r1
    7228:	11 2d       	mov	r17, r1
    722a:	d8 01       	movw	r26, r16
    722c:	c7 01       	movw	r24, r14
    722e:	84 1b       	sub	r24, r20
    7230:	95 0b       	sbc	r25, r21
    7232:	a6 0b       	sbc	r26, r22
    7234:	b7 0b       	sbc	r27, r23
    7236:	82 1b       	sub	r24, r18
    7238:	91 09       	sbc	r25, r1
    723a:	a1 09       	sbc	r26, r1
    723c:	b1 09       	sbc	r27, r1
    723e:	00 97       	sbiw	r24, 0x00	; 0
    7240:	a1 05       	cpc	r26, r1
    7242:	b1 05       	cpc	r27, r1
    7244:	61 f4       	brne	.+24     	; 0x725e <__udivdi3+0x3de>
    7246:	64 01       	movw	r12, r8
    7248:	53 01       	movw	r10, r6
    724a:	a2 18       	sub	r10, r2
    724c:	b3 08       	sbc	r11, r3
    724e:	c4 08       	sbc	r12, r4
    7250:	d5 08       	sbc	r13, r5
    7252:	31 e0       	ldi	r19, 0x01	; 1
    7254:	63 2e       	mov	r6, r19
    7256:	71 2c       	mov	r7, r1
    7258:	81 2c       	mov	r8, r1
    725a:	91 2c       	mov	r9, r1
    725c:	1e c1       	rjmp	.+572    	; 0x749a <__udivdi3+0x61a>
    725e:	6f 96       	adiw	r28, 0x1f	; 31
    7260:	8f af       	std	Y+63, r24	; 0x3f
    7262:	6f 97       	sbiw	r28, 0x1f	; 31
    7264:	08 2e       	mov	r0, r24
    7266:	04 c0       	rjmp	.+8      	; 0x7270 <__udivdi3+0x3f0>
    7268:	22 0c       	add	r2, r2
    726a:	33 1c       	adc	r3, r3
    726c:	44 1c       	adc	r4, r4
    726e:	55 1c       	adc	r5, r5
    7270:	0a 94       	dec	r0
    7272:	d2 f7       	brpl	.-12     	; 0x7268 <__udivdi3+0x3e8>
    7274:	ee 2d       	mov	r30, r14
    7276:	e8 1b       	sub	r30, r24
    7278:	64 01       	movw	r12, r8
    727a:	53 01       	movw	r10, r6
    727c:	0e 2e       	mov	r0, r30
    727e:	04 c0       	rjmp	.+8      	; 0x7288 <__udivdi3+0x408>
    7280:	d6 94       	lsr	r13
    7282:	c7 94       	ror	r12
    7284:	b7 94       	ror	r11
    7286:	a7 94       	ror	r10
    7288:	0a 94       	dec	r0
    728a:	d2 f7       	brpl	.-12     	; 0x7280 <__udivdi3+0x400>
    728c:	a4 01       	movw	r20, r8
    728e:	93 01       	movw	r18, r6
    7290:	6f 96       	adiw	r28, 0x1f	; 31
    7292:	0f ac       	ldd	r0, Y+63	; 0x3f
    7294:	6f 97       	sbiw	r28, 0x1f	; 31
    7296:	04 c0       	rjmp	.+8      	; 0x72a0 <__udivdi3+0x420>
    7298:	22 0f       	add	r18, r18
    729a:	33 1f       	adc	r19, r19
    729c:	44 1f       	adc	r20, r20
    729e:	55 1f       	adc	r21, r21
    72a0:	0a 94       	dec	r0
    72a2:	d2 f7       	brpl	.-12     	; 0x7298 <__udivdi3+0x418>
    72a4:	6d a4       	ldd	r6, Y+45	; 0x2d
    72a6:	7e a4       	ldd	r7, Y+46	; 0x2e
    72a8:	8f a4       	ldd	r8, Y+47	; 0x2f
    72aa:	98 a8       	ldd	r9, Y+48	; 0x30
    72ac:	0e 2e       	mov	r0, r30
    72ae:	04 c0       	rjmp	.+8      	; 0x72b8 <__udivdi3+0x438>
    72b0:	96 94       	lsr	r9
    72b2:	87 94       	ror	r8
    72b4:	77 94       	ror	r7
    72b6:	67 94       	ror	r6
    72b8:	0a 94       	dec	r0
    72ba:	d2 f7       	brpl	.-12     	; 0x72b0 <__udivdi3+0x430>
    72bc:	84 01       	movw	r16, r8
    72be:	73 01       	movw	r14, r6
    72c0:	e2 2a       	or	r14, r18
    72c2:	f3 2a       	or	r15, r19
    72c4:	04 2b       	or	r16, r20
    72c6:	15 2b       	or	r17, r21
    72c8:	e9 a6       	std	Y+41, r14	; 0x29
    72ca:	fa a6       	std	Y+42, r15	; 0x2a
    72cc:	0b a7       	std	Y+43, r16	; 0x2b
    72ce:	1c a7       	std	Y+44, r17	; 0x2c
    72d0:	32 01       	movw	r6, r4
    72d2:	88 24       	eor	r8, r8
    72d4:	99 24       	eor	r9, r9
    72d6:	92 01       	movw	r18, r4
    72d8:	81 01       	movw	r16, r2
    72da:	20 70       	andi	r18, 0x00	; 0
    72dc:	30 70       	andi	r19, 0x00	; 0
    72de:	21 96       	adiw	r28, 0x01	; 1
    72e0:	0c af       	std	Y+60, r16	; 0x3c
    72e2:	1d af       	std	Y+61, r17	; 0x3d
    72e4:	2e af       	std	Y+62, r18	; 0x3e
    72e6:	3f af       	std	Y+63, r19	; 0x3f
    72e8:	21 97       	sbiw	r28, 0x01	; 1
    72ea:	c6 01       	movw	r24, r12
    72ec:	b5 01       	movw	r22, r10
    72ee:	a4 01       	movw	r20, r8
    72f0:	93 01       	movw	r18, r6
    72f2:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__udivmodsi4>
    72f6:	7b 01       	movw	r14, r22
    72f8:	8c 01       	movw	r16, r24
    72fa:	c6 01       	movw	r24, r12
    72fc:	b5 01       	movw	r22, r10
    72fe:	a4 01       	movw	r20, r8
    7300:	93 01       	movw	r18, r6
    7302:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__udivmodsi4>
    7306:	c9 01       	movw	r24, r18
    7308:	da 01       	movw	r26, r20
    730a:	25 96       	adiw	r28, 0x05	; 5
    730c:	8c af       	std	Y+60, r24	; 0x3c
    730e:	9d af       	std	Y+61, r25	; 0x3d
    7310:	ae af       	std	Y+62, r26	; 0x3e
    7312:	bf af       	std	Y+63, r27	; 0x3f
    7314:	25 97       	sbiw	r28, 0x05	; 5
    7316:	bc 01       	movw	r22, r24
    7318:	cd 01       	movw	r24, r26
    731a:	21 96       	adiw	r28, 0x01	; 1
    731c:	2c ad       	ldd	r18, Y+60	; 0x3c
    731e:	3d ad       	ldd	r19, Y+61	; 0x3d
    7320:	4e ad       	ldd	r20, Y+62	; 0x3e
    7322:	5f ad       	ldd	r21, Y+63	; 0x3f
    7324:	21 97       	sbiw	r28, 0x01	; 1
    7326:	0e 94 92 45 	call	0x8b24	; 0x8b24 <__mulsi3>
    732a:	9b 01       	movw	r18, r22
    732c:	ac 01       	movw	r20, r24
    732e:	87 01       	movw	r16, r14
    7330:	ff 24       	eor	r15, r15
    7332:	ee 24       	eor	r14, r14
    7334:	a9 a4       	ldd	r10, Y+41	; 0x29
    7336:	ba a4       	ldd	r11, Y+42	; 0x2a
    7338:	cb a4       	ldd	r12, Y+43	; 0x2b
    733a:	dc a4       	ldd	r13, Y+44	; 0x2c
    733c:	c6 01       	movw	r24, r12
    733e:	aa 27       	eor	r26, r26
    7340:	bb 27       	eor	r27, r27
    7342:	5c 01       	movw	r10, r24
    7344:	6d 01       	movw	r12, r26
    7346:	ae 28       	or	r10, r14
    7348:	bf 28       	or	r11, r15
    734a:	c0 2a       	or	r12, r16
    734c:	d1 2a       	or	r13, r17
    734e:	a2 16       	cp	r10, r18
    7350:	b3 06       	cpc	r11, r19
    7352:	c4 06       	cpc	r12, r20
    7354:	d5 06       	cpc	r13, r21
    7356:	60 f5       	brcc	.+88     	; 0x73b0 <__udivdi3+0x530>
    7358:	25 96       	adiw	r28, 0x05	; 5
    735a:	6c ad       	ldd	r22, Y+60	; 0x3c
    735c:	7d ad       	ldd	r23, Y+61	; 0x3d
    735e:	8e ad       	ldd	r24, Y+62	; 0x3e
    7360:	9f ad       	ldd	r25, Y+63	; 0x3f
    7362:	25 97       	sbiw	r28, 0x05	; 5
    7364:	61 50       	subi	r22, 0x01	; 1
    7366:	70 40       	sbci	r23, 0x00	; 0
    7368:	80 40       	sbci	r24, 0x00	; 0
    736a:	90 40       	sbci	r25, 0x00	; 0
    736c:	25 96       	adiw	r28, 0x05	; 5
    736e:	6c af       	std	Y+60, r22	; 0x3c
    7370:	7d af       	std	Y+61, r23	; 0x3d
    7372:	8e af       	std	Y+62, r24	; 0x3e
    7374:	9f af       	std	Y+63, r25	; 0x3f
    7376:	25 97       	sbiw	r28, 0x05	; 5
    7378:	a2 0c       	add	r10, r2
    737a:	b3 1c       	adc	r11, r3
    737c:	c4 1c       	adc	r12, r4
    737e:	d5 1c       	adc	r13, r5
    7380:	a2 14       	cp	r10, r2
    7382:	b3 04       	cpc	r11, r3
    7384:	c4 04       	cpc	r12, r4
    7386:	d5 04       	cpc	r13, r5
    7388:	98 f0       	brcs	.+38     	; 0x73b0 <__udivdi3+0x530>
    738a:	a2 16       	cp	r10, r18
    738c:	b3 06       	cpc	r11, r19
    738e:	c4 06       	cpc	r12, r20
    7390:	d5 06       	cpc	r13, r21
    7392:	70 f4       	brcc	.+28     	; 0x73b0 <__udivdi3+0x530>
    7394:	61 50       	subi	r22, 0x01	; 1
    7396:	70 40       	sbci	r23, 0x00	; 0
    7398:	80 40       	sbci	r24, 0x00	; 0
    739a:	90 40       	sbci	r25, 0x00	; 0
    739c:	25 96       	adiw	r28, 0x05	; 5
    739e:	6c af       	std	Y+60, r22	; 0x3c
    73a0:	7d af       	std	Y+61, r23	; 0x3d
    73a2:	8e af       	std	Y+62, r24	; 0x3e
    73a4:	9f af       	std	Y+63, r25	; 0x3f
    73a6:	25 97       	sbiw	r28, 0x05	; 5
    73a8:	a2 0c       	add	r10, r2
    73aa:	b3 1c       	adc	r11, r3
    73ac:	c4 1c       	adc	r12, r4
    73ae:	d5 1c       	adc	r13, r5
    73b0:	a2 1a       	sub	r10, r18
    73b2:	b3 0a       	sbc	r11, r19
    73b4:	c4 0a       	sbc	r12, r20
    73b6:	d5 0a       	sbc	r13, r21
    73b8:	c6 01       	movw	r24, r12
    73ba:	b5 01       	movw	r22, r10
    73bc:	a4 01       	movw	r20, r8
    73be:	93 01       	movw	r18, r6
    73c0:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__udivmodsi4>
    73c4:	7b 01       	movw	r14, r22
    73c6:	8c 01       	movw	r16, r24
    73c8:	c6 01       	movw	r24, r12
    73ca:	b5 01       	movw	r22, r10
    73cc:	a4 01       	movw	r20, r8
    73ce:	93 01       	movw	r18, r6
    73d0:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__udivmodsi4>
    73d4:	c9 01       	movw	r24, r18
    73d6:	da 01       	movw	r26, r20
    73d8:	3c 01       	movw	r6, r24
    73da:	4d 01       	movw	r8, r26
    73dc:	c4 01       	movw	r24, r8
    73de:	b3 01       	movw	r22, r6
    73e0:	21 96       	adiw	r28, 0x01	; 1
    73e2:	2c ad       	ldd	r18, Y+60	; 0x3c
    73e4:	3d ad       	ldd	r19, Y+61	; 0x3d
    73e6:	4e ad       	ldd	r20, Y+62	; 0x3e
    73e8:	5f ad       	ldd	r21, Y+63	; 0x3f
    73ea:	21 97       	sbiw	r28, 0x01	; 1
    73ec:	0e 94 92 45 	call	0x8b24	; 0x8b24 <__mulsi3>
    73f0:	9b 01       	movw	r18, r22
    73f2:	ac 01       	movw	r20, r24
    73f4:	87 01       	movw	r16, r14
    73f6:	ff 24       	eor	r15, r15
    73f8:	ee 24       	eor	r14, r14
    73fa:	89 a5       	ldd	r24, Y+41	; 0x29
    73fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    73fe:	ab a5       	ldd	r26, Y+43	; 0x2b
    7400:	bc a5       	ldd	r27, Y+44	; 0x2c
    7402:	a0 70       	andi	r26, 0x00	; 0
    7404:	b0 70       	andi	r27, 0x00	; 0
    7406:	57 01       	movw	r10, r14
    7408:	68 01       	movw	r12, r16
    740a:	a8 2a       	or	r10, r24
    740c:	b9 2a       	or	r11, r25
    740e:	ca 2a       	or	r12, r26
    7410:	db 2a       	or	r13, r27
    7412:	a2 16       	cp	r10, r18
    7414:	b3 06       	cpc	r11, r19
    7416:	c4 06       	cpc	r12, r20
    7418:	d5 06       	cpc	r13, r21
    741a:	e0 f4       	brcc	.+56     	; 0x7454 <__udivdi3+0x5d4>
    741c:	08 94       	sec
    741e:	61 08       	sbc	r6, r1
    7420:	71 08       	sbc	r7, r1
    7422:	81 08       	sbc	r8, r1
    7424:	91 08       	sbc	r9, r1
    7426:	a2 0c       	add	r10, r2
    7428:	b3 1c       	adc	r11, r3
    742a:	c4 1c       	adc	r12, r4
    742c:	d5 1c       	adc	r13, r5
    742e:	a2 14       	cp	r10, r2
    7430:	b3 04       	cpc	r11, r3
    7432:	c4 04       	cpc	r12, r4
    7434:	d5 04       	cpc	r13, r5
    7436:	70 f0       	brcs	.+28     	; 0x7454 <__udivdi3+0x5d4>
    7438:	a2 16       	cp	r10, r18
    743a:	b3 06       	cpc	r11, r19
    743c:	c4 06       	cpc	r12, r20
    743e:	d5 06       	cpc	r13, r21
    7440:	48 f4       	brcc	.+18     	; 0x7454 <__udivdi3+0x5d4>
    7442:	08 94       	sec
    7444:	61 08       	sbc	r6, r1
    7446:	71 08       	sbc	r7, r1
    7448:	81 08       	sbc	r8, r1
    744a:	91 08       	sbc	r9, r1
    744c:	a2 0c       	add	r10, r2
    744e:	b3 1c       	adc	r11, r3
    7450:	c4 1c       	adc	r12, r4
    7452:	d5 1c       	adc	r13, r5
    7454:	8d a5       	ldd	r24, Y+45	; 0x2d
    7456:	9e a5       	ldd	r25, Y+46	; 0x2e
    7458:	af a5       	ldd	r26, Y+47	; 0x2f
    745a:	b8 a9       	ldd	r27, Y+48	; 0x30
    745c:	6f 96       	adiw	r28, 0x1f	; 31
    745e:	0f ac       	ldd	r0, Y+63	; 0x3f
    7460:	6f 97       	sbiw	r28, 0x1f	; 31
    7462:	04 c0       	rjmp	.+8      	; 0x746c <__udivdi3+0x5ec>
    7464:	88 0f       	add	r24, r24
    7466:	99 1f       	adc	r25, r25
    7468:	aa 1f       	adc	r26, r26
    746a:	bb 1f       	adc	r27, r27
    746c:	0a 94       	dec	r0
    746e:	d2 f7       	brpl	.-12     	; 0x7464 <__udivdi3+0x5e4>
    7470:	8d a7       	std	Y+45, r24	; 0x2d
    7472:	9e a7       	std	Y+46, r25	; 0x2e
    7474:	af a7       	std	Y+47, r26	; 0x2f
    7476:	b8 ab       	std	Y+48, r27	; 0x30
    7478:	a2 1a       	sub	r10, r18
    747a:	b3 0a       	sbc	r11, r19
    747c:	c4 0a       	sbc	r12, r20
    747e:	d5 0a       	sbc	r13, r21
    7480:	25 96       	adiw	r28, 0x05	; 5
    7482:	ec ac       	ldd	r14, Y+60	; 0x3c
    7484:	fd ac       	ldd	r15, Y+61	; 0x3d
    7486:	0e ad       	ldd	r16, Y+62	; 0x3e
    7488:	1f ad       	ldd	r17, Y+63	; 0x3f
    748a:	25 97       	sbiw	r28, 0x05	; 5
    748c:	d7 01       	movw	r26, r14
    748e:	99 27       	eor	r25, r25
    7490:	88 27       	eor	r24, r24
    7492:	68 2a       	or	r6, r24
    7494:	79 2a       	or	r7, r25
    7496:	8a 2a       	or	r8, r26
    7498:	9b 2a       	or	r9, r27
    749a:	82 01       	movw	r16, r4
    749c:	22 27       	eor	r18, r18
    749e:	33 27       	eor	r19, r19
    74a0:	29 96       	adiw	r28, 0x09	; 9
    74a2:	0c af       	std	Y+60, r16	; 0x3c
    74a4:	1d af       	std	Y+61, r17	; 0x3d
    74a6:	2e af       	std	Y+62, r18	; 0x3e
    74a8:	3f af       	std	Y+63, r19	; 0x3f
    74aa:	29 97       	sbiw	r28, 0x09	; 9
    74ac:	a2 01       	movw	r20, r4
    74ae:	91 01       	movw	r18, r2
    74b0:	40 70       	andi	r20, 0x00	; 0
    74b2:	50 70       	andi	r21, 0x00	; 0
    74b4:	2d 96       	adiw	r28, 0x0d	; 13
    74b6:	2c af       	std	Y+60, r18	; 0x3c
    74b8:	3d af       	std	Y+61, r19	; 0x3d
    74ba:	4e af       	std	Y+62, r20	; 0x3e
    74bc:	5f af       	std	Y+63, r21	; 0x3f
    74be:	2d 97       	sbiw	r28, 0x0d	; 13
    74c0:	c6 01       	movw	r24, r12
    74c2:	b5 01       	movw	r22, r10
    74c4:	29 96       	adiw	r28, 0x09	; 9
    74c6:	2c ad       	ldd	r18, Y+60	; 0x3c
    74c8:	3d ad       	ldd	r19, Y+61	; 0x3d
    74ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    74cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    74ce:	29 97       	sbiw	r28, 0x09	; 9
    74d0:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__udivmodsi4>
    74d4:	7b 01       	movw	r14, r22
    74d6:	8c 01       	movw	r16, r24
    74d8:	c6 01       	movw	r24, r12
    74da:	b5 01       	movw	r22, r10
    74dc:	29 96       	adiw	r28, 0x09	; 9
    74de:	2c ad       	ldd	r18, Y+60	; 0x3c
    74e0:	3d ad       	ldd	r19, Y+61	; 0x3d
    74e2:	4e ad       	ldd	r20, Y+62	; 0x3e
    74e4:	5f ad       	ldd	r21, Y+63	; 0x3f
    74e6:	29 97       	sbiw	r28, 0x09	; 9
    74e8:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__udivmodsi4>
    74ec:	c9 01       	movw	r24, r18
    74ee:	da 01       	movw	r26, r20
    74f0:	61 96       	adiw	r28, 0x11	; 17
    74f2:	8c af       	std	Y+60, r24	; 0x3c
    74f4:	9d af       	std	Y+61, r25	; 0x3d
    74f6:	ae af       	std	Y+62, r26	; 0x3e
    74f8:	bf af       	std	Y+63, r27	; 0x3f
    74fa:	61 97       	sbiw	r28, 0x11	; 17
    74fc:	bc 01       	movw	r22, r24
    74fe:	cd 01       	movw	r24, r26
    7500:	2d 96       	adiw	r28, 0x0d	; 13
    7502:	2c ad       	ldd	r18, Y+60	; 0x3c
    7504:	3d ad       	ldd	r19, Y+61	; 0x3d
    7506:	4e ad       	ldd	r20, Y+62	; 0x3e
    7508:	5f ad       	ldd	r21, Y+63	; 0x3f
    750a:	2d 97       	sbiw	r28, 0x0d	; 13
    750c:	0e 94 92 45 	call	0x8b24	; 0x8b24 <__mulsi3>
    7510:	9b 01       	movw	r18, r22
    7512:	ac 01       	movw	r20, r24
    7514:	87 01       	movw	r16, r14
    7516:	ff 24       	eor	r15, r15
    7518:	ee 24       	eor	r14, r14
    751a:	ad a4       	ldd	r10, Y+45	; 0x2d
    751c:	be a4       	ldd	r11, Y+46	; 0x2e
    751e:	cf a4       	ldd	r12, Y+47	; 0x2f
    7520:	d8 a8       	ldd	r13, Y+48	; 0x30
    7522:	c6 01       	movw	r24, r12
    7524:	aa 27       	eor	r26, r26
    7526:	bb 27       	eor	r27, r27
    7528:	57 01       	movw	r10, r14
    752a:	68 01       	movw	r12, r16
    752c:	a8 2a       	or	r10, r24
    752e:	b9 2a       	or	r11, r25
    7530:	ca 2a       	or	r12, r26
    7532:	db 2a       	or	r13, r27
    7534:	a2 16       	cp	r10, r18
    7536:	b3 06       	cpc	r11, r19
    7538:	c4 06       	cpc	r12, r20
    753a:	d5 06       	cpc	r13, r21
    753c:	60 f5       	brcc	.+88     	; 0x7596 <__udivdi3+0x716>
    753e:	61 96       	adiw	r28, 0x11	; 17
    7540:	6c ad       	ldd	r22, Y+60	; 0x3c
    7542:	7d ad       	ldd	r23, Y+61	; 0x3d
    7544:	8e ad       	ldd	r24, Y+62	; 0x3e
    7546:	9f ad       	ldd	r25, Y+63	; 0x3f
    7548:	61 97       	sbiw	r28, 0x11	; 17
    754a:	61 50       	subi	r22, 0x01	; 1
    754c:	70 40       	sbci	r23, 0x00	; 0
    754e:	80 40       	sbci	r24, 0x00	; 0
    7550:	90 40       	sbci	r25, 0x00	; 0
    7552:	61 96       	adiw	r28, 0x11	; 17
    7554:	6c af       	std	Y+60, r22	; 0x3c
    7556:	7d af       	std	Y+61, r23	; 0x3d
    7558:	8e af       	std	Y+62, r24	; 0x3e
    755a:	9f af       	std	Y+63, r25	; 0x3f
    755c:	61 97       	sbiw	r28, 0x11	; 17
    755e:	a2 0c       	add	r10, r2
    7560:	b3 1c       	adc	r11, r3
    7562:	c4 1c       	adc	r12, r4
    7564:	d5 1c       	adc	r13, r5
    7566:	a2 14       	cp	r10, r2
    7568:	b3 04       	cpc	r11, r3
    756a:	c4 04       	cpc	r12, r4
    756c:	d5 04       	cpc	r13, r5
    756e:	98 f0       	brcs	.+38     	; 0x7596 <__udivdi3+0x716>
    7570:	a2 16       	cp	r10, r18
    7572:	b3 06       	cpc	r11, r19
    7574:	c4 06       	cpc	r12, r20
    7576:	d5 06       	cpc	r13, r21
    7578:	70 f4       	brcc	.+28     	; 0x7596 <__udivdi3+0x716>
    757a:	61 50       	subi	r22, 0x01	; 1
    757c:	70 40       	sbci	r23, 0x00	; 0
    757e:	80 40       	sbci	r24, 0x00	; 0
    7580:	90 40       	sbci	r25, 0x00	; 0
    7582:	61 96       	adiw	r28, 0x11	; 17
    7584:	6c af       	std	Y+60, r22	; 0x3c
    7586:	7d af       	std	Y+61, r23	; 0x3d
    7588:	8e af       	std	Y+62, r24	; 0x3e
    758a:	9f af       	std	Y+63, r25	; 0x3f
    758c:	61 97       	sbiw	r28, 0x11	; 17
    758e:	a2 0c       	add	r10, r2
    7590:	b3 1c       	adc	r11, r3
    7592:	c4 1c       	adc	r12, r4
    7594:	d5 1c       	adc	r13, r5
    7596:	a2 1a       	sub	r10, r18
    7598:	b3 0a       	sbc	r11, r19
    759a:	c4 0a       	sbc	r12, r20
    759c:	d5 0a       	sbc	r13, r21
    759e:	c6 01       	movw	r24, r12
    75a0:	b5 01       	movw	r22, r10
    75a2:	29 96       	adiw	r28, 0x09	; 9
    75a4:	2c ad       	ldd	r18, Y+60	; 0x3c
    75a6:	3d ad       	ldd	r19, Y+61	; 0x3d
    75a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    75aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    75ac:	29 97       	sbiw	r28, 0x09	; 9
    75ae:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__udivmodsi4>
    75b2:	7b 01       	movw	r14, r22
    75b4:	8c 01       	movw	r16, r24
    75b6:	c6 01       	movw	r24, r12
    75b8:	b5 01       	movw	r22, r10
    75ba:	29 96       	adiw	r28, 0x09	; 9
    75bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    75be:	3d ad       	ldd	r19, Y+61	; 0x3d
    75c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    75c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    75c4:	29 97       	sbiw	r28, 0x09	; 9
    75c6:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__udivmodsi4>
    75ca:	c9 01       	movw	r24, r18
    75cc:	da 01       	movw	r26, r20
    75ce:	5c 01       	movw	r10, r24
    75d0:	6d 01       	movw	r12, r26
    75d2:	c6 01       	movw	r24, r12
    75d4:	b5 01       	movw	r22, r10
    75d6:	2d 96       	adiw	r28, 0x0d	; 13
    75d8:	2c ad       	ldd	r18, Y+60	; 0x3c
    75da:	3d ad       	ldd	r19, Y+61	; 0x3d
    75dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    75de:	5f ad       	ldd	r21, Y+63	; 0x3f
    75e0:	2d 97       	sbiw	r28, 0x0d	; 13
    75e2:	0e 94 92 45 	call	0x8b24	; 0x8b24 <__mulsi3>
    75e6:	9b 01       	movw	r18, r22
    75e8:	ac 01       	movw	r20, r24
    75ea:	87 01       	movw	r16, r14
    75ec:	ff 24       	eor	r15, r15
    75ee:	ee 24       	eor	r14, r14
    75f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    75f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    75f4:	af a5       	ldd	r26, Y+47	; 0x2f
    75f6:	b8 a9       	ldd	r27, Y+48	; 0x30
    75f8:	a0 70       	andi	r26, 0x00	; 0
    75fa:	b0 70       	andi	r27, 0x00	; 0
    75fc:	e8 2a       	or	r14, r24
    75fe:	f9 2a       	or	r15, r25
    7600:	0a 2b       	or	r16, r26
    7602:	1b 2b       	or	r17, r27
    7604:	e2 16       	cp	r14, r18
    7606:	f3 06       	cpc	r15, r19
    7608:	04 07       	cpc	r16, r20
    760a:	15 07       	cpc	r17, r21
    760c:	c0 f4       	brcc	.+48     	; 0x763e <__udivdi3+0x7be>
    760e:	08 94       	sec
    7610:	a1 08       	sbc	r10, r1
    7612:	b1 08       	sbc	r11, r1
    7614:	c1 08       	sbc	r12, r1
    7616:	d1 08       	sbc	r13, r1
    7618:	e2 0c       	add	r14, r2
    761a:	f3 1c       	adc	r15, r3
    761c:	04 1d       	adc	r16, r4
    761e:	15 1d       	adc	r17, r5
    7620:	e2 14       	cp	r14, r2
    7622:	f3 04       	cpc	r15, r3
    7624:	04 05       	cpc	r16, r4
    7626:	15 05       	cpc	r17, r5
    7628:	50 f0       	brcs	.+20     	; 0x763e <__udivdi3+0x7be>
    762a:	e2 16       	cp	r14, r18
    762c:	f3 06       	cpc	r15, r19
    762e:	04 07       	cpc	r16, r20
    7630:	15 07       	cpc	r17, r21
    7632:	28 f4       	brcc	.+10     	; 0x763e <__udivdi3+0x7be>
    7634:	08 94       	sec
    7636:	a1 08       	sbc	r10, r1
    7638:	b1 08       	sbc	r11, r1
    763a:	c1 08       	sbc	r12, r1
    763c:	d1 08       	sbc	r13, r1
    763e:	61 96       	adiw	r28, 0x11	; 17
    7640:	ec ac       	ldd	r14, Y+60	; 0x3c
    7642:	fd ac       	ldd	r15, Y+61	; 0x3d
    7644:	0e ad       	ldd	r16, Y+62	; 0x3e
    7646:	1f ad       	ldd	r17, Y+63	; 0x3f
    7648:	61 97       	sbiw	r28, 0x11	; 17
    764a:	d7 01       	movw	r26, r14
    764c:	99 27       	eor	r25, r25
    764e:	88 27       	eor	r24, r24
    7650:	96 01       	movw	r18, r12
    7652:	85 01       	movw	r16, r10
    7654:	08 2b       	or	r16, r24
    7656:	19 2b       	or	r17, r25
    7658:	2a 2b       	or	r18, r26
    765a:	3b 2b       	or	r19, r27
    765c:	09 ab       	std	Y+49, r16	; 0x31
    765e:	1a ab       	std	Y+50, r17	; 0x32
    7660:	2b ab       	std	Y+51, r18	; 0x33
    7662:	3c ab       	std	Y+52, r19	; 0x34
    7664:	62 c2       	rjmp	.+1220   	; 0x7b2a <__udivdi3+0xcaa>
    7666:	6e 14       	cp	r6, r14
    7668:	7f 04       	cpc	r7, r15
    766a:	80 06       	cpc	r8, r16
    766c:	91 06       	cpc	r9, r17
    766e:	08 f4       	brcc	.+2      	; 0x7672 <__udivdi3+0x7f2>
    7670:	51 c2       	rjmp	.+1186   	; 0x7b14 <__udivdi3+0xc94>
    7672:	20 e0       	ldi	r18, 0x00	; 0
    7674:	e2 16       	cp	r14, r18
    7676:	20 e0       	ldi	r18, 0x00	; 0
    7678:	f2 06       	cpc	r15, r18
    767a:	21 e0       	ldi	r18, 0x01	; 1
    767c:	02 07       	cpc	r16, r18
    767e:	20 e0       	ldi	r18, 0x00	; 0
    7680:	12 07       	cpc	r17, r18
    7682:	88 f4       	brcc	.+34     	; 0x76a6 <__udivdi3+0x826>
    7684:	3f ef       	ldi	r19, 0xFF	; 255
    7686:	e3 16       	cp	r14, r19
    7688:	f1 04       	cpc	r15, r1
    768a:	01 05       	cpc	r16, r1
    768c:	11 05       	cpc	r17, r1
    768e:	31 f0       	breq	.+12     	; 0x769c <__udivdi3+0x81c>
    7690:	28 f0       	brcs	.+10     	; 0x769c <__udivdi3+0x81c>
    7692:	48 e0       	ldi	r20, 0x08	; 8
    7694:	50 e0       	ldi	r21, 0x00	; 0
    7696:	60 e0       	ldi	r22, 0x00	; 0
    7698:	70 e0       	ldi	r23, 0x00	; 0
    769a:	17 c0       	rjmp	.+46     	; 0x76ca <__udivdi3+0x84a>
    769c:	40 e0       	ldi	r20, 0x00	; 0
    769e:	50 e0       	ldi	r21, 0x00	; 0
    76a0:	60 e0       	ldi	r22, 0x00	; 0
    76a2:	70 e0       	ldi	r23, 0x00	; 0
    76a4:	12 c0       	rjmp	.+36     	; 0x76ca <__udivdi3+0x84a>
    76a6:	40 e0       	ldi	r20, 0x00	; 0
    76a8:	e4 16       	cp	r14, r20
    76aa:	40 e0       	ldi	r20, 0x00	; 0
    76ac:	f4 06       	cpc	r15, r20
    76ae:	40 e0       	ldi	r20, 0x00	; 0
    76b0:	04 07       	cpc	r16, r20
    76b2:	41 e0       	ldi	r20, 0x01	; 1
    76b4:	14 07       	cpc	r17, r20
    76b6:	28 f0       	brcs	.+10     	; 0x76c2 <__udivdi3+0x842>
    76b8:	48 e1       	ldi	r20, 0x18	; 24
    76ba:	50 e0       	ldi	r21, 0x00	; 0
    76bc:	60 e0       	ldi	r22, 0x00	; 0
    76be:	70 e0       	ldi	r23, 0x00	; 0
    76c0:	04 c0       	rjmp	.+8      	; 0x76ca <__udivdi3+0x84a>
    76c2:	40 e1       	ldi	r20, 0x10	; 16
    76c4:	50 e0       	ldi	r21, 0x00	; 0
    76c6:	60 e0       	ldi	r22, 0x00	; 0
    76c8:	70 e0       	ldi	r23, 0x00	; 0
    76ca:	d8 01       	movw	r26, r16
    76cc:	c7 01       	movw	r24, r14
    76ce:	04 2e       	mov	r0, r20
    76d0:	04 c0       	rjmp	.+8      	; 0x76da <__udivdi3+0x85a>
    76d2:	b6 95       	lsr	r27
    76d4:	a7 95       	ror	r26
    76d6:	97 95       	ror	r25
    76d8:	87 95       	ror	r24
    76da:	0a 94       	dec	r0
    76dc:	d2 f7       	brpl	.-12     	; 0x76d2 <__udivdi3+0x852>
    76de:	8d 5f       	subi	r24, 0xFD	; 253
    76e0:	9f 4d       	sbci	r25, 0xDF	; 223
    76e2:	dc 01       	movw	r26, r24
    76e4:	2c 91       	ld	r18, X
    76e6:	30 e2       	ldi	r19, 0x20	; 32
    76e8:	a3 2e       	mov	r10, r19
    76ea:	b1 2c       	mov	r11, r1
    76ec:	c1 2c       	mov	r12, r1
    76ee:	d1 2c       	mov	r13, r1
    76f0:	d6 01       	movw	r26, r12
    76f2:	c5 01       	movw	r24, r10
    76f4:	84 1b       	sub	r24, r20
    76f6:	95 0b       	sbc	r25, r21
    76f8:	a6 0b       	sbc	r26, r22
    76fa:	b7 0b       	sbc	r27, r23
    76fc:	82 1b       	sub	r24, r18
    76fe:	91 09       	sbc	r25, r1
    7700:	a1 09       	sbc	r26, r1
    7702:	b1 09       	sbc	r27, r1
    7704:	00 97       	sbiw	r24, 0x00	; 0
    7706:	a1 05       	cpc	r26, r1
    7708:	b1 05       	cpc	r27, r1
    770a:	89 f4       	brne	.+34     	; 0x772e <__udivdi3+0x8ae>
    770c:	e6 14       	cp	r14, r6
    770e:	f7 04       	cpc	r15, r7
    7710:	08 05       	cpc	r16, r8
    7712:	19 05       	cpc	r17, r9
    7714:	08 f4       	brcc	.+2      	; 0x7718 <__udivdi3+0x898>
    7716:	f2 c1       	rjmp	.+996    	; 0x7afc <__udivdi3+0xc7c>
    7718:	6d a4       	ldd	r6, Y+45	; 0x2d
    771a:	7e a4       	ldd	r7, Y+46	; 0x2e
    771c:	8f a4       	ldd	r8, Y+47	; 0x2f
    771e:	98 a8       	ldd	r9, Y+48	; 0x30
    7720:	62 14       	cp	r6, r2
    7722:	73 04       	cpc	r7, r3
    7724:	84 04       	cpc	r8, r4
    7726:	95 04       	cpc	r9, r5
    7728:	08 f0       	brcs	.+2      	; 0x772c <__udivdi3+0x8ac>
    772a:	e8 c1       	rjmp	.+976    	; 0x7afc <__udivdi3+0xc7c>
    772c:	f3 c1       	rjmp	.+998    	; 0x7b14 <__udivdi3+0xc94>
    772e:	6e 96       	adiw	r28, 0x1e	; 30
    7730:	8f af       	std	Y+63, r24	; 0x3f
    7732:	6e 97       	sbiw	r28, 0x1e	; 30
    7734:	08 2e       	mov	r0, r24
    7736:	04 c0       	rjmp	.+8      	; 0x7740 <__udivdi3+0x8c0>
    7738:	ee 0c       	add	r14, r14
    773a:	ff 1c       	adc	r15, r15
    773c:	00 1f       	adc	r16, r16
    773e:	11 1f       	adc	r17, r17
    7740:	0a 94       	dec	r0
    7742:	d2 f7       	brpl	.-12     	; 0x7738 <__udivdi3+0x8b8>
    7744:	6a 2d       	mov	r22, r10
    7746:	68 1b       	sub	r22, r24
    7748:	d2 01       	movw	r26, r4
    774a:	c1 01       	movw	r24, r2
    774c:	06 2e       	mov	r0, r22
    774e:	04 c0       	rjmp	.+8      	; 0x7758 <__udivdi3+0x8d8>
    7750:	b6 95       	lsr	r27
    7752:	a7 95       	ror	r26
    7754:	97 95       	ror	r25
    7756:	87 95       	ror	r24
    7758:	0a 94       	dec	r0
    775a:	d2 f7       	brpl	.-12     	; 0x7750 <__udivdi3+0x8d0>
    775c:	5c 01       	movw	r10, r24
    775e:	6d 01       	movw	r12, r26
    7760:	ae 28       	or	r10, r14
    7762:	bf 28       	or	r11, r15
    7764:	c0 2a       	or	r12, r16
    7766:	d1 2a       	or	r13, r17
    7768:	ad a2       	std	Y+37, r10	; 0x25
    776a:	be a2       	std	Y+38, r11	; 0x26
    776c:	cf a2       	std	Y+39, r12	; 0x27
    776e:	d8 a6       	std	Y+40, r13	; 0x28
    7770:	72 01       	movw	r14, r4
    7772:	61 01       	movw	r12, r2
    7774:	6e 96       	adiw	r28, 0x1e	; 30
    7776:	0f ac       	ldd	r0, Y+63	; 0x3f
    7778:	6e 97       	sbiw	r28, 0x1e	; 30
    777a:	04 c0       	rjmp	.+8      	; 0x7784 <__udivdi3+0x904>
    777c:	cc 0c       	add	r12, r12
    777e:	dd 1c       	adc	r13, r13
    7780:	ee 1c       	adc	r14, r14
    7782:	ff 1c       	adc	r15, r15
    7784:	0a 94       	dec	r0
    7786:	d2 f7       	brpl	.-12     	; 0x777c <__udivdi3+0x8fc>
    7788:	c9 a2       	std	Y+33, r12	; 0x21
    778a:	da a2       	std	Y+34, r13	; 0x22
    778c:	eb a2       	std	Y+35, r14	; 0x23
    778e:	fc a2       	std	Y+36, r15	; 0x24
    7790:	64 01       	movw	r12, r8
    7792:	53 01       	movw	r10, r6
    7794:	06 2e       	mov	r0, r22
    7796:	04 c0       	rjmp	.+8      	; 0x77a0 <__udivdi3+0x920>
    7798:	d6 94       	lsr	r13
    779a:	c7 94       	ror	r12
    779c:	b7 94       	ror	r11
    779e:	a7 94       	ror	r10
    77a0:	0a 94       	dec	r0
    77a2:	d2 f7       	brpl	.-12     	; 0x7798 <__udivdi3+0x918>
    77a4:	d4 01       	movw	r26, r8
    77a6:	c3 01       	movw	r24, r6
    77a8:	6e 96       	adiw	r28, 0x1e	; 30
    77aa:	0f ac       	ldd	r0, Y+63	; 0x3f
    77ac:	6e 97       	sbiw	r28, 0x1e	; 30
    77ae:	04 c0       	rjmp	.+8      	; 0x77b8 <__udivdi3+0x938>
    77b0:	88 0f       	add	r24, r24
    77b2:	99 1f       	adc	r25, r25
    77b4:	aa 1f       	adc	r26, r26
    77b6:	bb 1f       	adc	r27, r27
    77b8:	0a 94       	dec	r0
    77ba:	d2 f7       	brpl	.-12     	; 0x77b0 <__udivdi3+0x930>
    77bc:	ed a4       	ldd	r14, Y+45	; 0x2d
    77be:	fe a4       	ldd	r15, Y+46	; 0x2e
    77c0:	0f a5       	ldd	r16, Y+47	; 0x2f
    77c2:	18 a9       	ldd	r17, Y+48	; 0x30
    77c4:	04 c0       	rjmp	.+8      	; 0x77ce <__udivdi3+0x94e>
    77c6:	16 95       	lsr	r17
    77c8:	07 95       	ror	r16
    77ca:	f7 94       	ror	r15
    77cc:	e7 94       	ror	r14
    77ce:	6a 95       	dec	r22
    77d0:	d2 f7       	brpl	.-12     	; 0x77c6 <__udivdi3+0x946>
    77d2:	37 01       	movw	r6, r14
    77d4:	48 01       	movw	r8, r16
    77d6:	68 2a       	or	r6, r24
    77d8:	79 2a       	or	r7, r25
    77da:	8a 2a       	or	r8, r26
    77dc:	9b 2a       	or	r9, r27
    77de:	6d 8e       	std	Y+29, r6	; 0x1d
    77e0:	7e 8e       	std	Y+30, r7	; 0x1e
    77e2:	8f 8e       	std	Y+31, r8	; 0x1f
    77e4:	98 a2       	std	Y+32, r9	; 0x20
    77e6:	ed a0       	ldd	r14, Y+37	; 0x25
    77e8:	fe a0       	ldd	r15, Y+38	; 0x26
    77ea:	0f a1       	ldd	r16, Y+39	; 0x27
    77ec:	18 a5       	ldd	r17, Y+40	; 0x28
    77ee:	38 01       	movw	r6, r16
    77f0:	88 24       	eor	r8, r8
    77f2:	99 24       	eor	r9, r9
    77f4:	98 01       	movw	r18, r16
    77f6:	87 01       	movw	r16, r14
    77f8:	20 70       	andi	r18, 0x00	; 0
    77fa:	30 70       	andi	r19, 0x00	; 0
    77fc:	65 96       	adiw	r28, 0x15	; 21
    77fe:	0c af       	std	Y+60, r16	; 0x3c
    7800:	1d af       	std	Y+61, r17	; 0x3d
    7802:	2e af       	std	Y+62, r18	; 0x3e
    7804:	3f af       	std	Y+63, r19	; 0x3f
    7806:	65 97       	sbiw	r28, 0x15	; 21
    7808:	c6 01       	movw	r24, r12
    780a:	b5 01       	movw	r22, r10
    780c:	a4 01       	movw	r20, r8
    780e:	93 01       	movw	r18, r6
    7810:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__udivmodsi4>
    7814:	7b 01       	movw	r14, r22
    7816:	8c 01       	movw	r16, r24
    7818:	c6 01       	movw	r24, r12
    781a:	b5 01       	movw	r22, r10
    781c:	a4 01       	movw	r20, r8
    781e:	93 01       	movw	r18, r6
    7820:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__udivmodsi4>
    7824:	c9 01       	movw	r24, r18
    7826:	da 01       	movw	r26, r20
    7828:	1c 01       	movw	r2, r24
    782a:	2d 01       	movw	r4, r26
    782c:	c2 01       	movw	r24, r4
    782e:	b1 01       	movw	r22, r2
    7830:	65 96       	adiw	r28, 0x15	; 21
    7832:	2c ad       	ldd	r18, Y+60	; 0x3c
    7834:	3d ad       	ldd	r19, Y+61	; 0x3d
    7836:	4e ad       	ldd	r20, Y+62	; 0x3e
    7838:	5f ad       	ldd	r21, Y+63	; 0x3f
    783a:	65 97       	sbiw	r28, 0x15	; 21
    783c:	0e 94 92 45 	call	0x8b24	; 0x8b24 <__mulsi3>
    7840:	9b 01       	movw	r18, r22
    7842:	ac 01       	movw	r20, r24
    7844:	87 01       	movw	r16, r14
    7846:	ff 24       	eor	r15, r15
    7848:	ee 24       	eor	r14, r14
    784a:	ad 8c       	ldd	r10, Y+29	; 0x1d
    784c:	be 8c       	ldd	r11, Y+30	; 0x1e
    784e:	cf 8c       	ldd	r12, Y+31	; 0x1f
    7850:	d8 a0       	ldd	r13, Y+32	; 0x20
    7852:	c6 01       	movw	r24, r12
    7854:	aa 27       	eor	r26, r26
    7856:	bb 27       	eor	r27, r27
    7858:	57 01       	movw	r10, r14
    785a:	68 01       	movw	r12, r16
    785c:	a8 2a       	or	r10, r24
    785e:	b9 2a       	or	r11, r25
    7860:	ca 2a       	or	r12, r26
    7862:	db 2a       	or	r13, r27
    7864:	a2 16       	cp	r10, r18
    7866:	b3 06       	cpc	r11, r19
    7868:	c4 06       	cpc	r12, r20
    786a:	d5 06       	cpc	r13, r21
    786c:	00 f5       	brcc	.+64     	; 0x78ae <__udivdi3+0xa2e>
    786e:	08 94       	sec
    7870:	21 08       	sbc	r2, r1
    7872:	31 08       	sbc	r3, r1
    7874:	41 08       	sbc	r4, r1
    7876:	51 08       	sbc	r5, r1
    7878:	ed a0       	ldd	r14, Y+37	; 0x25
    787a:	fe a0       	ldd	r15, Y+38	; 0x26
    787c:	0f a1       	ldd	r16, Y+39	; 0x27
    787e:	18 a5       	ldd	r17, Y+40	; 0x28
    7880:	ae 0c       	add	r10, r14
    7882:	bf 1c       	adc	r11, r15
    7884:	c0 1e       	adc	r12, r16
    7886:	d1 1e       	adc	r13, r17
    7888:	ae 14       	cp	r10, r14
    788a:	bf 04       	cpc	r11, r15
    788c:	c0 06       	cpc	r12, r16
    788e:	d1 06       	cpc	r13, r17
    7890:	70 f0       	brcs	.+28     	; 0x78ae <__udivdi3+0xa2e>
    7892:	a2 16       	cp	r10, r18
    7894:	b3 06       	cpc	r11, r19
    7896:	c4 06       	cpc	r12, r20
    7898:	d5 06       	cpc	r13, r21
    789a:	48 f4       	brcc	.+18     	; 0x78ae <__udivdi3+0xa2e>
    789c:	08 94       	sec
    789e:	21 08       	sbc	r2, r1
    78a0:	31 08       	sbc	r3, r1
    78a2:	41 08       	sbc	r4, r1
    78a4:	51 08       	sbc	r5, r1
    78a6:	ae 0c       	add	r10, r14
    78a8:	bf 1c       	adc	r11, r15
    78aa:	c0 1e       	adc	r12, r16
    78ac:	d1 1e       	adc	r13, r17
    78ae:	a2 1a       	sub	r10, r18
    78b0:	b3 0a       	sbc	r11, r19
    78b2:	c4 0a       	sbc	r12, r20
    78b4:	d5 0a       	sbc	r13, r21
    78b6:	c6 01       	movw	r24, r12
    78b8:	b5 01       	movw	r22, r10
    78ba:	a4 01       	movw	r20, r8
    78bc:	93 01       	movw	r18, r6
    78be:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__udivmodsi4>
    78c2:	7b 01       	movw	r14, r22
    78c4:	8c 01       	movw	r16, r24
    78c6:	c6 01       	movw	r24, r12
    78c8:	b5 01       	movw	r22, r10
    78ca:	a4 01       	movw	r20, r8
    78cc:	93 01       	movw	r18, r6
    78ce:	0e 94 b1 45 	call	0x8b62	; 0x8b62 <__udivmodsi4>
    78d2:	c9 01       	movw	r24, r18
    78d4:	da 01       	movw	r26, r20
    78d6:	3c 01       	movw	r6, r24
    78d8:	4d 01       	movw	r8, r26
    78da:	c4 01       	movw	r24, r8
    78dc:	b3 01       	movw	r22, r6
    78de:	65 96       	adiw	r28, 0x15	; 21
    78e0:	2c ad       	ldd	r18, Y+60	; 0x3c
    78e2:	3d ad       	ldd	r19, Y+61	; 0x3d
    78e4:	4e ad       	ldd	r20, Y+62	; 0x3e
    78e6:	5f ad       	ldd	r21, Y+63	; 0x3f
    78e8:	65 97       	sbiw	r28, 0x15	; 21
    78ea:	0e 94 92 45 	call	0x8b24	; 0x8b24 <__mulsi3>
    78ee:	9b 01       	movw	r18, r22
    78f0:	ac 01       	movw	r20, r24
    78f2:	87 01       	movw	r16, r14
    78f4:	ff 24       	eor	r15, r15
    78f6:	ee 24       	eor	r14, r14
    78f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    78fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    78fc:	af 8d       	ldd	r26, Y+31	; 0x1f
    78fe:	b8 a1       	ldd	r27, Y+32	; 0x20
    7900:	a0 70       	andi	r26, 0x00	; 0
    7902:	b0 70       	andi	r27, 0x00	; 0
    7904:	57 01       	movw	r10, r14
    7906:	68 01       	movw	r12, r16
    7908:	a8 2a       	or	r10, r24
    790a:	b9 2a       	or	r11, r25
    790c:	ca 2a       	or	r12, r26
    790e:	db 2a       	or	r13, r27
    7910:	a2 16       	cp	r10, r18
    7912:	b3 06       	cpc	r11, r19
    7914:	c4 06       	cpc	r12, r20
    7916:	d5 06       	cpc	r13, r21
    7918:	00 f5       	brcc	.+64     	; 0x795a <__udivdi3+0xada>
    791a:	08 94       	sec
    791c:	61 08       	sbc	r6, r1
    791e:	71 08       	sbc	r7, r1
    7920:	81 08       	sbc	r8, r1
    7922:	91 08       	sbc	r9, r1
    7924:	6d a1       	ldd	r22, Y+37	; 0x25
    7926:	7e a1       	ldd	r23, Y+38	; 0x26
    7928:	8f a1       	ldd	r24, Y+39	; 0x27
    792a:	98 a5       	ldd	r25, Y+40	; 0x28
    792c:	a6 0e       	add	r10, r22
    792e:	b7 1e       	adc	r11, r23
    7930:	c8 1e       	adc	r12, r24
    7932:	d9 1e       	adc	r13, r25
    7934:	a6 16       	cp	r10, r22
    7936:	b7 06       	cpc	r11, r23
    7938:	c8 06       	cpc	r12, r24
    793a:	d9 06       	cpc	r13, r25
    793c:	70 f0       	brcs	.+28     	; 0x795a <__udivdi3+0xada>
    793e:	a2 16       	cp	r10, r18
    7940:	b3 06       	cpc	r11, r19
    7942:	c4 06       	cpc	r12, r20
    7944:	d5 06       	cpc	r13, r21
    7946:	48 f4       	brcc	.+18     	; 0x795a <__udivdi3+0xada>
    7948:	08 94       	sec
    794a:	61 08       	sbc	r6, r1
    794c:	71 08       	sbc	r7, r1
    794e:	81 08       	sbc	r8, r1
    7950:	91 08       	sbc	r9, r1
    7952:	a6 0e       	add	r10, r22
    7954:	b7 1e       	adc	r11, r23
    7956:	c8 1e       	adc	r12, r24
    7958:	d9 1e       	adc	r13, r25
    795a:	d6 01       	movw	r26, r12
    795c:	c5 01       	movw	r24, r10
    795e:	82 1b       	sub	r24, r18
    7960:	93 0b       	sbc	r25, r19
    7962:	a4 0b       	sbc	r26, r20
    7964:	b5 0b       	sbc	r27, r21
    7966:	89 8f       	std	Y+25, r24	; 0x19
    7968:	9a 8f       	std	Y+26, r25	; 0x1a
    796a:	ab 8f       	std	Y+27, r26	; 0x1b
    796c:	bc 8f       	std	Y+28, r27	; 0x1c
    796e:	d1 01       	movw	r26, r2
    7970:	99 27       	eor	r25, r25
    7972:	88 27       	eor	r24, r24
    7974:	64 01       	movw	r12, r8
    7976:	53 01       	movw	r10, r6
    7978:	a8 2a       	or	r10, r24
    797a:	b9 2a       	or	r11, r25
    797c:	ca 2a       	or	r12, r26
    797e:	db 2a       	or	r13, r27
    7980:	a9 aa       	std	Y+49, r10	; 0x31
    7982:	ba aa       	std	Y+50, r11	; 0x32
    7984:	cb aa       	std	Y+51, r12	; 0x33
    7986:	dc aa       	std	Y+52, r13	; 0x34
    7988:	86 01       	movw	r16, r12
    798a:	75 01       	movw	r14, r10
    798c:	2f ef       	ldi	r18, 0xFF	; 255
    798e:	3f ef       	ldi	r19, 0xFF	; 255
    7990:	40 e0       	ldi	r20, 0x00	; 0
    7992:	50 e0       	ldi	r21, 0x00	; 0
    7994:	e2 22       	and	r14, r18
    7996:	f3 22       	and	r15, r19
    7998:	04 23       	and	r16, r20
    799a:	15 23       	and	r17, r21
    799c:	a6 01       	movw	r20, r12
    799e:	66 27       	eor	r22, r22
    79a0:	77 27       	eor	r23, r23
    79a2:	6d 96       	adiw	r28, 0x1d	; 29
    79a4:	4c af       	std	Y+60, r20	; 0x3c
    79a6:	5d af       	std	Y+61, r21	; 0x3d
    79a8:	6e af       	std	Y+62, r22	; 0x3e
    79aa:	7f af       	std	Y+63, r23	; 0x3f
    79ac:	6d 97       	sbiw	r28, 0x1d	; 29
    79ae:	a9 a0       	ldd	r10, Y+33	; 0x21
    79b0:	ba a0       	ldd	r11, Y+34	; 0x22
    79b2:	cb a0       	ldd	r12, Y+35	; 0x23
    79b4:	dc a0       	ldd	r13, Y+36	; 0x24
    79b6:	6f ef       	ldi	r22, 0xFF	; 255
    79b8:	7f ef       	ldi	r23, 0xFF	; 255
    79ba:	80 e0       	ldi	r24, 0x00	; 0
    79bc:	90 e0       	ldi	r25, 0x00	; 0
    79be:	a6 22       	and	r10, r22
    79c0:	b7 22       	and	r11, r23
    79c2:	c8 22       	and	r12, r24
    79c4:	d9 22       	and	r13, r25
    79c6:	89 a1       	ldd	r24, Y+33	; 0x21
    79c8:	9a a1       	ldd	r25, Y+34	; 0x22
    79ca:	ab a1       	ldd	r26, Y+35	; 0x23
    79cc:	bc a1       	ldd	r27, Y+36	; 0x24
    79ce:	1d 01       	movw	r2, r26
    79d0:	44 24       	eor	r4, r4
    79d2:	55 24       	eor	r5, r5
    79d4:	c8 01       	movw	r24, r16
    79d6:	b7 01       	movw	r22, r14
    79d8:	a6 01       	movw	r20, r12
    79da:	95 01       	movw	r18, r10
    79dc:	0e 94 92 45 	call	0x8b24	; 0x8b24 <__mulsi3>
    79e0:	69 96       	adiw	r28, 0x19	; 25
    79e2:	6c af       	std	Y+60, r22	; 0x3c
    79e4:	7d af       	std	Y+61, r23	; 0x3d
    79e6:	8e af       	std	Y+62, r24	; 0x3e
    79e8:	9f af       	std	Y+63, r25	; 0x3f
    79ea:	69 97       	sbiw	r28, 0x19	; 25
    79ec:	c8 01       	movw	r24, r16
    79ee:	b7 01       	movw	r22, r14
    79f0:	a2 01       	movw	r20, r4
    79f2:	91 01       	movw	r18, r2
    79f4:	0e 94 92 45 	call	0x8b24	; 0x8b24 <__mulsi3>
    79f8:	3b 01       	movw	r6, r22
    79fa:	4c 01       	movw	r8, r24
    79fc:	6d 96       	adiw	r28, 0x1d	; 29
    79fe:	6c ad       	ldd	r22, Y+60	; 0x3c
    7a00:	7d ad       	ldd	r23, Y+61	; 0x3d
    7a02:	8e ad       	ldd	r24, Y+62	; 0x3e
    7a04:	9f ad       	ldd	r25, Y+63	; 0x3f
    7a06:	6d 97       	sbiw	r28, 0x1d	; 29
    7a08:	a6 01       	movw	r20, r12
    7a0a:	95 01       	movw	r18, r10
    7a0c:	0e 94 92 45 	call	0x8b24	; 0x8b24 <__mulsi3>
    7a10:	7b 01       	movw	r14, r22
    7a12:	8c 01       	movw	r16, r24
    7a14:	6d 96       	adiw	r28, 0x1d	; 29
    7a16:	6c ad       	ldd	r22, Y+60	; 0x3c
    7a18:	7d ad       	ldd	r23, Y+61	; 0x3d
    7a1a:	8e ad       	ldd	r24, Y+62	; 0x3e
    7a1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    7a1e:	6d 97       	sbiw	r28, 0x1d	; 29
    7a20:	a2 01       	movw	r20, r4
    7a22:	91 01       	movw	r18, r2
    7a24:	0e 94 92 45 	call	0x8b24	; 0x8b24 <__mulsi3>
    7a28:	5b 01       	movw	r10, r22
    7a2a:	6c 01       	movw	r12, r24
    7a2c:	a8 01       	movw	r20, r16
    7a2e:	97 01       	movw	r18, r14
    7a30:	26 0d       	add	r18, r6
    7a32:	37 1d       	adc	r19, r7
    7a34:	48 1d       	adc	r20, r8
    7a36:	59 1d       	adc	r21, r9
    7a38:	69 96       	adiw	r28, 0x19	; 25
    7a3a:	6c ac       	ldd	r6, Y+60	; 0x3c
    7a3c:	7d ac       	ldd	r7, Y+61	; 0x3d
    7a3e:	8e ac       	ldd	r8, Y+62	; 0x3e
    7a40:	9f ac       	ldd	r9, Y+63	; 0x3f
    7a42:	69 97       	sbiw	r28, 0x19	; 25
    7a44:	c4 01       	movw	r24, r8
    7a46:	aa 27       	eor	r26, r26
    7a48:	bb 27       	eor	r27, r27
    7a4a:	28 0f       	add	r18, r24
    7a4c:	39 1f       	adc	r19, r25
    7a4e:	4a 1f       	adc	r20, r26
    7a50:	5b 1f       	adc	r21, r27
    7a52:	2e 15       	cp	r18, r14
    7a54:	3f 05       	cpc	r19, r15
    7a56:	40 07       	cpc	r20, r16
    7a58:	51 07       	cpc	r21, r17
    7a5a:	48 f4       	brcc	.+18     	; 0x7a6e <__udivdi3+0xbee>
    7a5c:	e1 2c       	mov	r14, r1
    7a5e:	f1 2c       	mov	r15, r1
    7a60:	61 e0       	ldi	r22, 0x01	; 1
    7a62:	06 2f       	mov	r16, r22
    7a64:	11 2d       	mov	r17, r1
    7a66:	ae 0c       	add	r10, r14
    7a68:	bf 1c       	adc	r11, r15
    7a6a:	c0 1e       	adc	r12, r16
    7a6c:	d1 1e       	adc	r13, r17
    7a6e:	ca 01       	movw	r24, r20
    7a70:	aa 27       	eor	r26, r26
    7a72:	bb 27       	eor	r27, r27
    7a74:	bc 01       	movw	r22, r24
    7a76:	cd 01       	movw	r24, r26
    7a78:	6a 0d       	add	r22, r10
    7a7a:	7b 1d       	adc	r23, r11
    7a7c:	8c 1d       	adc	r24, r12
    7a7e:	9d 1d       	adc	r25, r13
    7a80:	69 8c       	ldd	r6, Y+25	; 0x19
    7a82:	7a 8c       	ldd	r7, Y+26	; 0x1a
    7a84:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7a86:	9c 8c       	ldd	r9, Y+28	; 0x1c
    7a88:	66 16       	cp	r6, r22
    7a8a:	77 06       	cpc	r7, r23
    7a8c:	88 06       	cpc	r8, r24
    7a8e:	99 06       	cpc	r9, r25
    7a90:	40 f1       	brcs	.+80     	; 0x7ae2 <__udivdi3+0xc62>
    7a92:	66 15       	cp	r22, r6
    7a94:	77 05       	cpc	r23, r7
    7a96:	88 05       	cpc	r24, r8
    7a98:	99 05       	cpc	r25, r9
    7a9a:	09 f0       	breq	.+2      	; 0x7a9e <__udivdi3+0xc1e>
    7a9c:	43 c0       	rjmp	.+134    	; 0x7b24 <__udivdi3+0xca4>
    7a9e:	d9 01       	movw	r26, r18
    7aa0:	99 27       	eor	r25, r25
    7aa2:	88 27       	eor	r24, r24
    7aa4:	69 96       	adiw	r28, 0x19	; 25
    7aa6:	2c ad       	ldd	r18, Y+60	; 0x3c
    7aa8:	3d ad       	ldd	r19, Y+61	; 0x3d
    7aaa:	4e ad       	ldd	r20, Y+62	; 0x3e
    7aac:	5f ad       	ldd	r21, Y+63	; 0x3f
    7aae:	69 97       	sbiw	r28, 0x19	; 25
    7ab0:	40 70       	andi	r20, 0x00	; 0
    7ab2:	50 70       	andi	r21, 0x00	; 0
    7ab4:	82 0f       	add	r24, r18
    7ab6:	93 1f       	adc	r25, r19
    7ab8:	a4 1f       	adc	r26, r20
    7aba:	b5 1f       	adc	r27, r21
    7abc:	2d a5       	ldd	r18, Y+45	; 0x2d
    7abe:	3e a5       	ldd	r19, Y+46	; 0x2e
    7ac0:	4f a5       	ldd	r20, Y+47	; 0x2f
    7ac2:	58 a9       	ldd	r21, Y+48	; 0x30
    7ac4:	6e 96       	adiw	r28, 0x1e	; 30
    7ac6:	0f ac       	ldd	r0, Y+63	; 0x3f
    7ac8:	6e 97       	sbiw	r28, 0x1e	; 30
    7aca:	04 c0       	rjmp	.+8      	; 0x7ad4 <__udivdi3+0xc54>
    7acc:	22 0f       	add	r18, r18
    7ace:	33 1f       	adc	r19, r19
    7ad0:	44 1f       	adc	r20, r20
    7ad2:	55 1f       	adc	r21, r21
    7ad4:	0a 94       	dec	r0
    7ad6:	d2 f7       	brpl	.-12     	; 0x7acc <__udivdi3+0xc4c>
    7ad8:	28 17       	cp	r18, r24
    7ada:	39 07       	cpc	r19, r25
    7adc:	4a 07       	cpc	r20, r26
    7ade:	5b 07       	cpc	r21, r27
    7ae0:	08 f5       	brcc	.+66     	; 0x7b24 <__udivdi3+0xca4>
    7ae2:	09 a9       	ldd	r16, Y+49	; 0x31
    7ae4:	1a a9       	ldd	r17, Y+50	; 0x32
    7ae6:	2b a9       	ldd	r18, Y+51	; 0x33
    7ae8:	3c a9       	ldd	r19, Y+52	; 0x34
    7aea:	01 50       	subi	r16, 0x01	; 1
    7aec:	10 40       	sbci	r17, 0x00	; 0
    7aee:	20 40       	sbci	r18, 0x00	; 0
    7af0:	30 40       	sbci	r19, 0x00	; 0
    7af2:	09 ab       	std	Y+49, r16	; 0x31
    7af4:	1a ab       	std	Y+50, r17	; 0x32
    7af6:	2b ab       	std	Y+51, r18	; 0x33
    7af8:	3c ab       	std	Y+52, r19	; 0x34
    7afa:	14 c0       	rjmp	.+40     	; 0x7b24 <__udivdi3+0xca4>
    7afc:	66 24       	eor	r6, r6
    7afe:	77 24       	eor	r7, r7
    7b00:	43 01       	movw	r8, r6
    7b02:	21 e0       	ldi	r18, 0x01	; 1
    7b04:	30 e0       	ldi	r19, 0x00	; 0
    7b06:	40 e0       	ldi	r20, 0x00	; 0
    7b08:	50 e0       	ldi	r21, 0x00	; 0
    7b0a:	29 ab       	std	Y+49, r18	; 0x31
    7b0c:	3a ab       	std	Y+50, r19	; 0x32
    7b0e:	4b ab       	std	Y+51, r20	; 0x33
    7b10:	5c ab       	std	Y+52, r21	; 0x34
    7b12:	0b c0       	rjmp	.+22     	; 0x7b2a <__udivdi3+0xcaa>
    7b14:	66 24       	eor	r6, r6
    7b16:	77 24       	eor	r7, r7
    7b18:	43 01       	movw	r8, r6
    7b1a:	19 aa       	std	Y+49, r1	; 0x31
    7b1c:	1a aa       	std	Y+50, r1	; 0x32
    7b1e:	1b aa       	std	Y+51, r1	; 0x33
    7b20:	1c aa       	std	Y+52, r1	; 0x34
    7b22:	03 c0       	rjmp	.+6      	; 0x7b2a <__udivdi3+0xcaa>
    7b24:	66 24       	eor	r6, r6
    7b26:	77 24       	eor	r7, r7
    7b28:	43 01       	movw	r8, r6
    7b2a:	fe 01       	movw	r30, r28
    7b2c:	71 96       	adiw	r30, 0x11	; 17
    7b2e:	88 e0       	ldi	r24, 0x08	; 8
    7b30:	df 01       	movw	r26, r30
    7b32:	1d 92       	st	X+, r1
    7b34:	8a 95       	dec	r24
    7b36:	e9 f7       	brne	.-6      	; 0x7b32 <__udivdi3+0xcb2>
    7b38:	a9 a8       	ldd	r10, Y+49	; 0x31
    7b3a:	ba a8       	ldd	r11, Y+50	; 0x32
    7b3c:	cb a8       	ldd	r12, Y+51	; 0x33
    7b3e:	dc a8       	ldd	r13, Y+52	; 0x34
    7b40:	a9 8a       	std	Y+17, r10	; 0x11
    7b42:	ba 8a       	std	Y+18, r11	; 0x12
    7b44:	cb 8a       	std	Y+19, r12	; 0x13
    7b46:	dc 8a       	std	Y+20, r13	; 0x14
    7b48:	6d 8a       	std	Y+21, r6	; 0x15
    7b4a:	7e 8a       	std	Y+22, r7	; 0x16
    7b4c:	8f 8a       	std	Y+23, r8	; 0x17
    7b4e:	98 8e       	std	Y+24, r9	; 0x18
    7b50:	29 a9       	ldd	r18, Y+49	; 0x31
    7b52:	3a 89       	ldd	r19, Y+18	; 0x12
    7b54:	4b 89       	ldd	r20, Y+19	; 0x13
    7b56:	5c 89       	ldd	r21, Y+20	; 0x14
    7b58:	66 2d       	mov	r22, r6
    7b5a:	7e 89       	ldd	r23, Y+22	; 0x16
    7b5c:	8f 89       	ldd	r24, Y+23	; 0x17
    7b5e:	98 8d       	ldd	r25, Y+24	; 0x18
    7b60:	c2 5a       	subi	r28, 0xA2	; 162
    7b62:	df 4f       	sbci	r29, 0xFF	; 255
    7b64:	e2 e1       	ldi	r30, 0x12	; 18
    7b66:	0c 94 ef 45 	jmp	0x8bde	; 0x8bde <__epilogue_restores__>

00007b6a <vfprintf>:
    7b6a:	2f 92       	push	r2
    7b6c:	3f 92       	push	r3
    7b6e:	4f 92       	push	r4
    7b70:	5f 92       	push	r5
    7b72:	6f 92       	push	r6
    7b74:	7f 92       	push	r7
    7b76:	8f 92       	push	r8
    7b78:	9f 92       	push	r9
    7b7a:	af 92       	push	r10
    7b7c:	bf 92       	push	r11
    7b7e:	cf 92       	push	r12
    7b80:	df 92       	push	r13
    7b82:	ef 92       	push	r14
    7b84:	ff 92       	push	r15
    7b86:	0f 93       	push	r16
    7b88:	1f 93       	push	r17
    7b8a:	df 93       	push	r29
    7b8c:	cf 93       	push	r28
    7b8e:	cd b7       	in	r28, 0x3d	; 61
    7b90:	de b7       	in	r29, 0x3e	; 62
    7b92:	61 97       	sbiw	r28, 0x11	; 17
    7b94:	cd bf       	out	0x3d, r28	; 61
    7b96:	de bf       	out	0x3e, r29	; 62
    7b98:	3c 01       	movw	r6, r24
    7b9a:	6e 87       	std	Y+14, r22	; 0x0e
    7b9c:	7f 87       	std	Y+15, r23	; 0x0f
    7b9e:	6a 01       	movw	r12, r20
    7ba0:	fc 01       	movw	r30, r24
    7ba2:	16 82       	std	Z+6, r1	; 0x06
    7ba4:	17 82       	std	Z+7, r1	; 0x07
    7ba6:	83 81       	ldd	r24, Z+3	; 0x03
    7ba8:	81 fd       	sbrc	r24, 1
    7baa:	03 c0       	rjmp	.+6      	; 0x7bb2 <vfprintf+0x48>
    7bac:	6f ef       	ldi	r22, 0xFF	; 255
    7bae:	7f ef       	ldi	r23, 0xFF	; 255
    7bb0:	6f c3       	rjmp	.+1758   	; 0x8290 <vfprintf+0x726>
    7bb2:	9e 01       	movw	r18, r28
    7bb4:	2f 5f       	subi	r18, 0xFF	; 255
    7bb6:	3f 4f       	sbci	r19, 0xFF	; 255
    7bb8:	28 8b       	std	Y+16, r18	; 0x10
    7bba:	39 8b       	std	Y+17, r19	; 0x11
    7bbc:	f3 01       	movw	r30, r6
    7bbe:	23 81       	ldd	r18, Z+3	; 0x03
    7bc0:	ee 85       	ldd	r30, Y+14	; 0x0e
    7bc2:	ff 85       	ldd	r31, Y+15	; 0x0f
    7bc4:	23 fd       	sbrc	r18, 3
    7bc6:	85 91       	lpm	r24, Z+
    7bc8:	23 ff       	sbrs	r18, 3
    7bca:	81 91       	ld	r24, Z+
    7bcc:	ee 87       	std	Y+14, r30	; 0x0e
    7bce:	ff 87       	std	Y+15, r31	; 0x0f
    7bd0:	88 23       	and	r24, r24
    7bd2:	09 f4       	brne	.+2      	; 0x7bd6 <vfprintf+0x6c>
    7bd4:	5a c3       	rjmp	.+1716   	; 0x828a <vfprintf+0x720>
    7bd6:	85 32       	cpi	r24, 0x25	; 37
    7bd8:	51 f4       	brne	.+20     	; 0x7bee <vfprintf+0x84>
    7bda:	ee 85       	ldd	r30, Y+14	; 0x0e
    7bdc:	ff 85       	ldd	r31, Y+15	; 0x0f
    7bde:	23 fd       	sbrc	r18, 3
    7be0:	85 91       	lpm	r24, Z+
    7be2:	23 ff       	sbrs	r18, 3
    7be4:	81 91       	ld	r24, Z+
    7be6:	ee 87       	std	Y+14, r30	; 0x0e
    7be8:	ff 87       	std	Y+15, r31	; 0x0f
    7bea:	85 32       	cpi	r24, 0x25	; 37
    7bec:	29 f4       	brne	.+10     	; 0x7bf8 <vfprintf+0x8e>
    7bee:	90 e0       	ldi	r25, 0x00	; 0
    7bf0:	b3 01       	movw	r22, r6
    7bf2:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    7bf6:	e2 cf       	rjmp	.-60     	; 0x7bbc <vfprintf+0x52>
    7bf8:	98 2f       	mov	r25, r24
    7bfa:	10 e0       	ldi	r17, 0x00	; 0
    7bfc:	88 24       	eor	r8, r8
    7bfe:	99 24       	eor	r9, r9
    7c00:	10 32       	cpi	r17, 0x20	; 32
    7c02:	b0 f4       	brcc	.+44     	; 0x7c30 <vfprintf+0xc6>
    7c04:	9b 32       	cpi	r25, 0x2B	; 43
    7c06:	69 f0       	breq	.+26     	; 0x7c22 <vfprintf+0xb8>
    7c08:	9c 32       	cpi	r25, 0x2C	; 44
    7c0a:	28 f4       	brcc	.+10     	; 0x7c16 <vfprintf+0xac>
    7c0c:	90 32       	cpi	r25, 0x20	; 32
    7c0e:	51 f0       	breq	.+20     	; 0x7c24 <vfprintf+0xba>
    7c10:	93 32       	cpi	r25, 0x23	; 35
    7c12:	71 f4       	brne	.+28     	; 0x7c30 <vfprintf+0xc6>
    7c14:	0b c0       	rjmp	.+22     	; 0x7c2c <vfprintf+0xc2>
    7c16:	9d 32       	cpi	r25, 0x2D	; 45
    7c18:	39 f0       	breq	.+14     	; 0x7c28 <vfprintf+0xbe>
    7c1a:	90 33       	cpi	r25, 0x30	; 48
    7c1c:	49 f4       	brne	.+18     	; 0x7c30 <vfprintf+0xc6>
    7c1e:	11 60       	ori	r17, 0x01	; 1
    7c20:	28 c0       	rjmp	.+80     	; 0x7c72 <vfprintf+0x108>
    7c22:	12 60       	ori	r17, 0x02	; 2
    7c24:	14 60       	ori	r17, 0x04	; 4
    7c26:	25 c0       	rjmp	.+74     	; 0x7c72 <vfprintf+0x108>
    7c28:	18 60       	ori	r17, 0x08	; 8
    7c2a:	23 c0       	rjmp	.+70     	; 0x7c72 <vfprintf+0x108>
    7c2c:	10 61       	ori	r17, 0x10	; 16
    7c2e:	21 c0       	rjmp	.+66     	; 0x7c72 <vfprintf+0x108>
    7c30:	17 fd       	sbrc	r17, 7
    7c32:	2a c0       	rjmp	.+84     	; 0x7c88 <vfprintf+0x11e>
    7c34:	89 2f       	mov	r24, r25
    7c36:	80 53       	subi	r24, 0x30	; 48
    7c38:	8a 30       	cpi	r24, 0x0A	; 10
    7c3a:	78 f4       	brcc	.+30     	; 0x7c5a <vfprintf+0xf0>
    7c3c:	16 ff       	sbrs	r17, 6
    7c3e:	06 c0       	rjmp	.+12     	; 0x7c4c <vfprintf+0xe2>
    7c40:	fa e0       	ldi	r31, 0x0A	; 10
    7c42:	9f 9e       	mul	r9, r31
    7c44:	90 2c       	mov	r9, r0
    7c46:	11 24       	eor	r1, r1
    7c48:	98 0e       	add	r9, r24
    7c4a:	13 c0       	rjmp	.+38     	; 0x7c72 <vfprintf+0x108>
    7c4c:	3a e0       	ldi	r19, 0x0A	; 10
    7c4e:	83 9e       	mul	r8, r19
    7c50:	80 2c       	mov	r8, r0
    7c52:	11 24       	eor	r1, r1
    7c54:	88 0e       	add	r8, r24
    7c56:	10 62       	ori	r17, 0x20	; 32
    7c58:	0c c0       	rjmp	.+24     	; 0x7c72 <vfprintf+0x108>
    7c5a:	9e 32       	cpi	r25, 0x2E	; 46
    7c5c:	21 f4       	brne	.+8      	; 0x7c66 <vfprintf+0xfc>
    7c5e:	16 fd       	sbrc	r17, 6
    7c60:	14 c3       	rjmp	.+1576   	; 0x828a <vfprintf+0x720>
    7c62:	10 64       	ori	r17, 0x40	; 64
    7c64:	06 c0       	rjmp	.+12     	; 0x7c72 <vfprintf+0x108>
    7c66:	9c 36       	cpi	r25, 0x6C	; 108
    7c68:	11 f4       	brne	.+4      	; 0x7c6e <vfprintf+0x104>
    7c6a:	10 68       	ori	r17, 0x80	; 128
    7c6c:	02 c0       	rjmp	.+4      	; 0x7c72 <vfprintf+0x108>
    7c6e:	98 36       	cpi	r25, 0x68	; 104
    7c70:	59 f4       	brne	.+22     	; 0x7c88 <vfprintf+0x11e>
    7c72:	ee 85       	ldd	r30, Y+14	; 0x0e
    7c74:	ff 85       	ldd	r31, Y+15	; 0x0f
    7c76:	23 fd       	sbrc	r18, 3
    7c78:	95 91       	lpm	r25, Z+
    7c7a:	23 ff       	sbrs	r18, 3
    7c7c:	91 91       	ld	r25, Z+
    7c7e:	ee 87       	std	Y+14, r30	; 0x0e
    7c80:	ff 87       	std	Y+15, r31	; 0x0f
    7c82:	99 23       	and	r25, r25
    7c84:	09 f0       	breq	.+2      	; 0x7c88 <vfprintf+0x11e>
    7c86:	bc cf       	rjmp	.-136    	; 0x7c00 <vfprintf+0x96>
    7c88:	89 2f       	mov	r24, r25
    7c8a:	85 54       	subi	r24, 0x45	; 69
    7c8c:	83 30       	cpi	r24, 0x03	; 3
    7c8e:	20 f4       	brcc	.+8      	; 0x7c98 <vfprintf+0x12e>
    7c90:	81 2f       	mov	r24, r17
    7c92:	80 61       	ori	r24, 0x10	; 16
    7c94:	90 5e       	subi	r25, 0xE0	; 224
    7c96:	07 c0       	rjmp	.+14     	; 0x7ca6 <vfprintf+0x13c>
    7c98:	89 2f       	mov	r24, r25
    7c9a:	85 56       	subi	r24, 0x65	; 101
    7c9c:	83 30       	cpi	r24, 0x03	; 3
    7c9e:	08 f0       	brcs	.+2      	; 0x7ca2 <vfprintf+0x138>
    7ca0:	9f c1       	rjmp	.+830    	; 0x7fe0 <vfprintf+0x476>
    7ca2:	81 2f       	mov	r24, r17
    7ca4:	8f 7e       	andi	r24, 0xEF	; 239
    7ca6:	86 fd       	sbrc	r24, 6
    7ca8:	02 c0       	rjmp	.+4      	; 0x7cae <vfprintf+0x144>
    7caa:	76 e0       	ldi	r23, 0x06	; 6
    7cac:	97 2e       	mov	r9, r23
    7cae:	6f e3       	ldi	r22, 0x3F	; 63
    7cb0:	f6 2e       	mov	r15, r22
    7cb2:	f8 22       	and	r15, r24
    7cb4:	95 36       	cpi	r25, 0x65	; 101
    7cb6:	19 f4       	brne	.+6      	; 0x7cbe <vfprintf+0x154>
    7cb8:	f0 e4       	ldi	r31, 0x40	; 64
    7cba:	ff 2a       	or	r15, r31
    7cbc:	07 c0       	rjmp	.+14     	; 0x7ccc <vfprintf+0x162>
    7cbe:	96 36       	cpi	r25, 0x66	; 102
    7cc0:	19 f4       	brne	.+6      	; 0x7cc8 <vfprintf+0x15e>
    7cc2:	20 e8       	ldi	r18, 0x80	; 128
    7cc4:	f2 2a       	or	r15, r18
    7cc6:	02 c0       	rjmp	.+4      	; 0x7ccc <vfprintf+0x162>
    7cc8:	91 10       	cpse	r9, r1
    7cca:	9a 94       	dec	r9
    7ccc:	f7 fe       	sbrs	r15, 7
    7cce:	0a c0       	rjmp	.+20     	; 0x7ce4 <vfprintf+0x17a>
    7cd0:	3b e3       	ldi	r19, 0x3B	; 59
    7cd2:	39 15       	cp	r19, r9
    7cd4:	18 f4       	brcc	.+6      	; 0x7cdc <vfprintf+0x172>
    7cd6:	5c e3       	ldi	r21, 0x3C	; 60
    7cd8:	b5 2e       	mov	r11, r21
    7cda:	02 c0       	rjmp	.+4      	; 0x7ce0 <vfprintf+0x176>
    7cdc:	b9 2c       	mov	r11, r9
    7cde:	b3 94       	inc	r11
    7ce0:	27 e0       	ldi	r18, 0x07	; 7
    7ce2:	09 c0       	rjmp	.+18     	; 0x7cf6 <vfprintf+0x18c>
    7ce4:	47 e0       	ldi	r20, 0x07	; 7
    7ce6:	49 15       	cp	r20, r9
    7ce8:	20 f4       	brcc	.+8      	; 0x7cf2 <vfprintf+0x188>
    7cea:	bb 24       	eor	r11, r11
    7cec:	47 e0       	ldi	r20, 0x07	; 7
    7cee:	94 2e       	mov	r9, r20
    7cf0:	f7 cf       	rjmp	.-18     	; 0x7ce0 <vfprintf+0x176>
    7cf2:	29 2d       	mov	r18, r9
    7cf4:	bb 24       	eor	r11, r11
    7cf6:	c6 01       	movw	r24, r12
    7cf8:	04 96       	adiw	r24, 0x04	; 4
    7cfa:	8c 87       	std	Y+12, r24	; 0x0c
    7cfc:	9d 87       	std	Y+13, r25	; 0x0d
    7cfe:	f6 01       	movw	r30, r12
    7d00:	60 81       	ld	r22, Z
    7d02:	71 81       	ldd	r23, Z+1	; 0x01
    7d04:	82 81       	ldd	r24, Z+2	; 0x02
    7d06:	93 81       	ldd	r25, Z+3	; 0x03
    7d08:	ae 01       	movw	r20, r28
    7d0a:	4f 5f       	subi	r20, 0xFF	; 255
    7d0c:	5f 4f       	sbci	r21, 0xFF	; 255
    7d0e:	0b 2d       	mov	r16, r11
    7d10:	0e 94 96 47 	call	0x8f2c	; 0x8f2c <__ftoa_engine>
    7d14:	6c 01       	movw	r12, r24
    7d16:	09 81       	ldd	r16, Y+1	; 0x01
    7d18:	20 2e       	mov	r2, r16
    7d1a:	33 24       	eor	r3, r3
    7d1c:	00 ff       	sbrs	r16, 0
    7d1e:	04 c0       	rjmp	.+8      	; 0x7d28 <vfprintf+0x1be>
    7d20:	03 fd       	sbrc	r16, 3
    7d22:	02 c0       	rjmp	.+4      	; 0x7d28 <vfprintf+0x1be>
    7d24:	1d e2       	ldi	r17, 0x2D	; 45
    7d26:	09 c0       	rjmp	.+18     	; 0x7d3a <vfprintf+0x1d0>
    7d28:	f1 fe       	sbrs	r15, 1
    7d2a:	02 c0       	rjmp	.+4      	; 0x7d30 <vfprintf+0x1c6>
    7d2c:	1b e2       	ldi	r17, 0x2B	; 43
    7d2e:	05 c0       	rjmp	.+10     	; 0x7d3a <vfprintf+0x1d0>
    7d30:	f2 fc       	sbrc	r15, 2
    7d32:	02 c0       	rjmp	.+4      	; 0x7d38 <vfprintf+0x1ce>
    7d34:	10 e0       	ldi	r17, 0x00	; 0
    7d36:	01 c0       	rjmp	.+2      	; 0x7d3a <vfprintf+0x1d0>
    7d38:	10 e2       	ldi	r17, 0x20	; 32
    7d3a:	c1 01       	movw	r24, r2
    7d3c:	8c 70       	andi	r24, 0x0C	; 12
    7d3e:	90 70       	andi	r25, 0x00	; 0
    7d40:	89 2b       	or	r24, r25
    7d42:	b9 f1       	breq	.+110    	; 0x7db2 <vfprintf+0x248>
    7d44:	11 23       	and	r17, r17
    7d46:	11 f4       	brne	.+4      	; 0x7d4c <vfprintf+0x1e2>
    7d48:	83 e0       	ldi	r24, 0x03	; 3
    7d4a:	01 c0       	rjmp	.+2      	; 0x7d4e <vfprintf+0x1e4>
    7d4c:	84 e0       	ldi	r24, 0x04	; 4
    7d4e:	88 15       	cp	r24, r8
    7d50:	10 f0       	brcs	.+4      	; 0x7d56 <vfprintf+0x1ec>
    7d52:	88 24       	eor	r8, r8
    7d54:	0a c0       	rjmp	.+20     	; 0x7d6a <vfprintf+0x200>
    7d56:	88 1a       	sub	r8, r24
    7d58:	f3 fc       	sbrc	r15, 3
    7d5a:	07 c0       	rjmp	.+14     	; 0x7d6a <vfprintf+0x200>
    7d5c:	80 e2       	ldi	r24, 0x20	; 32
    7d5e:	90 e0       	ldi	r25, 0x00	; 0
    7d60:	b3 01       	movw	r22, r6
    7d62:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    7d66:	8a 94       	dec	r8
    7d68:	c9 f7       	brne	.-14     	; 0x7d5c <vfprintf+0x1f2>
    7d6a:	11 23       	and	r17, r17
    7d6c:	29 f0       	breq	.+10     	; 0x7d78 <vfprintf+0x20e>
    7d6e:	81 2f       	mov	r24, r17
    7d70:	90 e0       	ldi	r25, 0x00	; 0
    7d72:	b3 01       	movw	r22, r6
    7d74:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    7d78:	23 fe       	sbrs	r2, 3
    7d7a:	03 c0       	rjmp	.+6      	; 0x7d82 <vfprintf+0x218>
    7d7c:	03 e3       	ldi	r16, 0x33	; 51
    7d7e:	12 e0       	ldi	r17, 0x02	; 2
    7d80:	0e c0       	rjmp	.+28     	; 0x7d9e <vfprintf+0x234>
    7d82:	07 e3       	ldi	r16, 0x37	; 55
    7d84:	12 e0       	ldi	r17, 0x02	; 2
    7d86:	0b c0       	rjmp	.+22     	; 0x7d9e <vfprintf+0x234>
    7d88:	e1 14       	cp	r14, r1
    7d8a:	f1 04       	cpc	r15, r1
    7d8c:	09 f0       	breq	.+2      	; 0x7d90 <vfprintf+0x226>
    7d8e:	80 52       	subi	r24, 0x20	; 32
    7d90:	90 e0       	ldi	r25, 0x00	; 0
    7d92:	b3 01       	movw	r22, r6
    7d94:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    7d98:	0f 5f       	subi	r16, 0xFF	; 255
    7d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    7d9c:	05 c0       	rjmp	.+10     	; 0x7da8 <vfprintf+0x23e>
    7d9e:	ef 2c       	mov	r14, r15
    7da0:	ff 24       	eor	r15, r15
    7da2:	f0 e1       	ldi	r31, 0x10	; 16
    7da4:	ef 22       	and	r14, r31
    7da6:	ff 24       	eor	r15, r15
    7da8:	f8 01       	movw	r30, r16
    7daa:	84 91       	lpm	r24, Z+
    7dac:	88 23       	and	r24, r24
    7dae:	61 f7       	brne	.-40     	; 0x7d88 <vfprintf+0x21e>
    7db0:	14 c1       	rjmp	.+552    	; 0x7fda <vfprintf+0x470>
    7db2:	f7 fe       	sbrs	r15, 7
    7db4:	12 c0       	rjmp	.+36     	; 0x7dda <vfprintf+0x270>
    7db6:	bc 0c       	add	r11, r12
    7db8:	24 fe       	sbrs	r2, 4
    7dba:	04 c0       	rjmp	.+8      	; 0x7dc4 <vfprintf+0x25a>
    7dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    7dbe:	81 33       	cpi	r24, 0x31	; 49
    7dc0:	09 f4       	brne	.+2      	; 0x7dc4 <vfprintf+0x25a>
    7dc2:	ba 94       	dec	r11
    7dc4:	1b 14       	cp	r1, r11
    7dc6:	1c f0       	brlt	.+6      	; 0x7dce <vfprintf+0x264>
    7dc8:	bb 24       	eor	r11, r11
    7dca:	b3 94       	inc	r11
    7dcc:	2d c0       	rjmp	.+90     	; 0x7e28 <vfprintf+0x2be>
    7dce:	f8 e0       	ldi	r31, 0x08	; 8
    7dd0:	fb 15       	cp	r31, r11
    7dd2:	50 f5       	brcc	.+84     	; 0x7e28 <vfprintf+0x2be>
    7dd4:	38 e0       	ldi	r19, 0x08	; 8
    7dd6:	b3 2e       	mov	r11, r19
    7dd8:	27 c0       	rjmp	.+78     	; 0x7e28 <vfprintf+0x2be>
    7dda:	f6 fc       	sbrc	r15, 6
    7ddc:	25 c0       	rjmp	.+74     	; 0x7e28 <vfprintf+0x2be>
    7dde:	89 2d       	mov	r24, r9
    7de0:	90 e0       	ldi	r25, 0x00	; 0
    7de2:	8c 15       	cp	r24, r12
    7de4:	9d 05       	cpc	r25, r13
    7de6:	4c f0       	brlt	.+18     	; 0x7dfa <vfprintf+0x290>
    7de8:	2c ef       	ldi	r18, 0xFC	; 252
    7dea:	c2 16       	cp	r12, r18
    7dec:	2f ef       	ldi	r18, 0xFF	; 255
    7dee:	d2 06       	cpc	r13, r18
    7df0:	24 f0       	brlt	.+8      	; 0x7dfa <vfprintf+0x290>
    7df2:	30 e8       	ldi	r19, 0x80	; 128
    7df4:	f3 2a       	or	r15, r19
    7df6:	01 c0       	rjmp	.+2      	; 0x7dfa <vfprintf+0x290>
    7df8:	9a 94       	dec	r9
    7dfa:	99 20       	and	r9, r9
    7dfc:	49 f0       	breq	.+18     	; 0x7e10 <vfprintf+0x2a6>
    7dfe:	e2 e0       	ldi	r30, 0x02	; 2
    7e00:	f0 e0       	ldi	r31, 0x00	; 0
    7e02:	ec 0f       	add	r30, r28
    7e04:	fd 1f       	adc	r31, r29
    7e06:	e9 0d       	add	r30, r9
    7e08:	f1 1d       	adc	r31, r1
    7e0a:	80 81       	ld	r24, Z
    7e0c:	80 33       	cpi	r24, 0x30	; 48
    7e0e:	a1 f3       	breq	.-24     	; 0x7df8 <vfprintf+0x28e>
    7e10:	f7 fe       	sbrs	r15, 7
    7e12:	0a c0       	rjmp	.+20     	; 0x7e28 <vfprintf+0x2be>
    7e14:	b9 2c       	mov	r11, r9
    7e16:	b3 94       	inc	r11
    7e18:	89 2d       	mov	r24, r9
    7e1a:	90 e0       	ldi	r25, 0x00	; 0
    7e1c:	c8 16       	cp	r12, r24
    7e1e:	d9 06       	cpc	r13, r25
    7e20:	14 f0       	brlt	.+4      	; 0x7e26 <vfprintf+0x2bc>
    7e22:	99 24       	eor	r9, r9
    7e24:	01 c0       	rjmp	.+2      	; 0x7e28 <vfprintf+0x2be>
    7e26:	9c 18       	sub	r9, r12
    7e28:	f7 fc       	sbrc	r15, 7
    7e2a:	03 c0       	rjmp	.+6      	; 0x7e32 <vfprintf+0x2c8>
    7e2c:	25 e0       	ldi	r18, 0x05	; 5
    7e2e:	30 e0       	ldi	r19, 0x00	; 0
    7e30:	09 c0       	rjmp	.+18     	; 0x7e44 <vfprintf+0x2da>
    7e32:	1c 14       	cp	r1, r12
    7e34:	1d 04       	cpc	r1, r13
    7e36:	1c f0       	brlt	.+6      	; 0x7e3e <vfprintf+0x2d4>
    7e38:	21 e0       	ldi	r18, 0x01	; 1
    7e3a:	30 e0       	ldi	r19, 0x00	; 0
    7e3c:	03 c0       	rjmp	.+6      	; 0x7e44 <vfprintf+0x2da>
    7e3e:	96 01       	movw	r18, r12
    7e40:	2f 5f       	subi	r18, 0xFF	; 255
    7e42:	3f 4f       	sbci	r19, 0xFF	; 255
    7e44:	11 23       	and	r17, r17
    7e46:	11 f0       	breq	.+4      	; 0x7e4c <vfprintf+0x2e2>
    7e48:	2f 5f       	subi	r18, 0xFF	; 255
    7e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    7e4c:	99 20       	and	r9, r9
    7e4e:	29 f0       	breq	.+10     	; 0x7e5a <vfprintf+0x2f0>
    7e50:	89 2d       	mov	r24, r9
    7e52:	90 e0       	ldi	r25, 0x00	; 0
    7e54:	01 96       	adiw	r24, 0x01	; 1
    7e56:	28 0f       	add	r18, r24
    7e58:	39 1f       	adc	r19, r25
    7e5a:	88 2d       	mov	r24, r8
    7e5c:	90 e0       	ldi	r25, 0x00	; 0
    7e5e:	28 17       	cp	r18, r24
    7e60:	39 07       	cpc	r19, r25
    7e62:	14 f0       	brlt	.+4      	; 0x7e68 <vfprintf+0x2fe>
    7e64:	88 24       	eor	r8, r8
    7e66:	01 c0       	rjmp	.+2      	; 0x7e6a <vfprintf+0x300>
    7e68:	82 1a       	sub	r8, r18
    7e6a:	4f 2c       	mov	r4, r15
    7e6c:	55 24       	eor	r5, r5
    7e6e:	c2 01       	movw	r24, r4
    7e70:	89 70       	andi	r24, 0x09	; 9
    7e72:	90 70       	andi	r25, 0x00	; 0
    7e74:	89 2b       	or	r24, r25
    7e76:	39 f0       	breq	.+14     	; 0x7e86 <vfprintf+0x31c>
    7e78:	08 c0       	rjmp	.+16     	; 0x7e8a <vfprintf+0x320>
    7e7a:	80 e2       	ldi	r24, 0x20	; 32
    7e7c:	90 e0       	ldi	r25, 0x00	; 0
    7e7e:	b3 01       	movw	r22, r6
    7e80:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    7e84:	8a 94       	dec	r8
    7e86:	88 20       	and	r8, r8
    7e88:	c1 f7       	brne	.-16     	; 0x7e7a <vfprintf+0x310>
    7e8a:	11 23       	and	r17, r17
    7e8c:	29 f0       	breq	.+10     	; 0x7e98 <vfprintf+0x32e>
    7e8e:	81 2f       	mov	r24, r17
    7e90:	90 e0       	ldi	r25, 0x00	; 0
    7e92:	b3 01       	movw	r22, r6
    7e94:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    7e98:	43 fe       	sbrs	r4, 3
    7e9a:	07 c0       	rjmp	.+14     	; 0x7eaa <vfprintf+0x340>
    7e9c:	08 c0       	rjmp	.+16     	; 0x7eae <vfprintf+0x344>
    7e9e:	80 e3       	ldi	r24, 0x30	; 48
    7ea0:	90 e0       	ldi	r25, 0x00	; 0
    7ea2:	b3 01       	movw	r22, r6
    7ea4:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    7ea8:	8a 94       	dec	r8
    7eaa:	88 20       	and	r8, r8
    7eac:	c1 f7       	brne	.-16     	; 0x7e9e <vfprintf+0x334>
    7eae:	f7 fe       	sbrs	r15, 7
    7eb0:	46 c0       	rjmp	.+140    	; 0x7f3e <vfprintf+0x3d4>
    7eb2:	86 01       	movw	r16, r12
    7eb4:	d7 fe       	sbrs	r13, 7
    7eb6:	02 c0       	rjmp	.+4      	; 0x7ebc <vfprintf+0x352>
    7eb8:	00 e0       	ldi	r16, 0x00	; 0
    7eba:	10 e0       	ldi	r17, 0x00	; 0
    7ebc:	76 01       	movw	r14, r12
    7ebe:	08 94       	sec
    7ec0:	e1 1c       	adc	r14, r1
    7ec2:	f1 1c       	adc	r15, r1
    7ec4:	e0 1a       	sub	r14, r16
    7ec6:	f1 0a       	sbc	r15, r17
    7ec8:	41 e0       	ldi	r20, 0x01	; 1
    7eca:	50 e0       	ldi	r21, 0x00	; 0
    7ecc:	4c 0f       	add	r20, r28
    7ece:	5d 1f       	adc	r21, r29
    7ed0:	e4 0e       	add	r14, r20
    7ed2:	f5 1e       	adc	r15, r21
    7ed4:	26 01       	movw	r4, r12
    7ed6:	4b 18       	sub	r4, r11
    7ed8:	51 08       	sbc	r5, r1
    7eda:	89 2d       	mov	r24, r9
    7edc:	90 e0       	ldi	r25, 0x00	; 0
    7ede:	aa 24       	eor	r10, r10
    7ee0:	bb 24       	eor	r11, r11
    7ee2:	a8 1a       	sub	r10, r24
    7ee4:	b9 0a       	sbc	r11, r25
    7ee6:	5f ef       	ldi	r21, 0xFF	; 255
    7ee8:	0f 3f       	cpi	r16, 0xFF	; 255
    7eea:	15 07       	cpc	r17, r21
    7eec:	29 f4       	brne	.+10     	; 0x7ef8 <vfprintf+0x38e>
    7eee:	8e e2       	ldi	r24, 0x2E	; 46
    7ef0:	90 e0       	ldi	r25, 0x00	; 0
    7ef2:	b3 01       	movw	r22, r6
    7ef4:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    7ef8:	c0 16       	cp	r12, r16
    7efa:	d1 06       	cpc	r13, r17
    7efc:	34 f0       	brlt	.+12     	; 0x7f0a <vfprintf+0x3a0>
    7efe:	40 16       	cp	r4, r16
    7f00:	51 06       	cpc	r5, r17
    7f02:	1c f4       	brge	.+6      	; 0x7f0a <vfprintf+0x3a0>
    7f04:	f7 01       	movw	r30, r14
    7f06:	80 81       	ld	r24, Z
    7f08:	01 c0       	rjmp	.+2      	; 0x7f0c <vfprintf+0x3a2>
    7f0a:	80 e3       	ldi	r24, 0x30	; 48
    7f0c:	01 50       	subi	r16, 0x01	; 1
    7f0e:	10 40       	sbci	r17, 0x00	; 0
    7f10:	08 94       	sec
    7f12:	e1 1c       	adc	r14, r1
    7f14:	f1 1c       	adc	r15, r1
    7f16:	0a 15       	cp	r16, r10
    7f18:	1b 05       	cpc	r17, r11
    7f1a:	2c f0       	brlt	.+10     	; 0x7f26 <vfprintf+0x3bc>
    7f1c:	90 e0       	ldi	r25, 0x00	; 0
    7f1e:	b3 01       	movw	r22, r6
    7f20:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    7f24:	e0 cf       	rjmp	.-64     	; 0x7ee6 <vfprintf+0x37c>
    7f26:	0c 15       	cp	r16, r12
    7f28:	1d 05       	cpc	r17, r13
    7f2a:	39 f4       	brne	.+14     	; 0x7f3a <vfprintf+0x3d0>
    7f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    7f2e:	96 33       	cpi	r25, 0x36	; 54
    7f30:	18 f4       	brcc	.+6      	; 0x7f38 <vfprintf+0x3ce>
    7f32:	95 33       	cpi	r25, 0x35	; 53
    7f34:	11 f4       	brne	.+4      	; 0x7f3a <vfprintf+0x3d0>
    7f36:	24 fe       	sbrs	r2, 4
    7f38:	81 e3       	ldi	r24, 0x31	; 49
    7f3a:	90 e0       	ldi	r25, 0x00	; 0
    7f3c:	4b c0       	rjmp	.+150    	; 0x7fd4 <vfprintf+0x46a>
    7f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    7f40:	81 33       	cpi	r24, 0x31	; 49
    7f42:	09 f0       	breq	.+2      	; 0x7f46 <vfprintf+0x3dc>
    7f44:	0f 7e       	andi	r16, 0xEF	; 239
    7f46:	90 e0       	ldi	r25, 0x00	; 0
    7f48:	b3 01       	movw	r22, r6
    7f4a:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    7f4e:	99 20       	and	r9, r9
    7f50:	a1 f0       	breq	.+40     	; 0x7f7a <vfprintf+0x410>
    7f52:	8e e2       	ldi	r24, 0x2E	; 46
    7f54:	90 e0       	ldi	r25, 0x00	; 0
    7f56:	b3 01       	movw	r22, r6
    7f58:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    7f5c:	12 e0       	ldi	r17, 0x02	; 2
    7f5e:	e1 e0       	ldi	r30, 0x01	; 1
    7f60:	f0 e0       	ldi	r31, 0x00	; 0
    7f62:	ec 0f       	add	r30, r28
    7f64:	fd 1f       	adc	r31, r29
    7f66:	e1 0f       	add	r30, r17
    7f68:	f1 1d       	adc	r31, r1
    7f6a:	1f 5f       	subi	r17, 0xFF	; 255
    7f6c:	80 81       	ld	r24, Z
    7f6e:	90 e0       	ldi	r25, 0x00	; 0
    7f70:	b3 01       	movw	r22, r6
    7f72:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    7f76:	9a 94       	dec	r9
    7f78:	91 f7       	brne	.-28     	; 0x7f5e <vfprintf+0x3f4>
    7f7a:	44 fc       	sbrc	r4, 4
    7f7c:	03 c0       	rjmp	.+6      	; 0x7f84 <vfprintf+0x41a>
    7f7e:	85 e6       	ldi	r24, 0x65	; 101
    7f80:	90 e0       	ldi	r25, 0x00	; 0
    7f82:	02 c0       	rjmp	.+4      	; 0x7f88 <vfprintf+0x41e>
    7f84:	85 e4       	ldi	r24, 0x45	; 69
    7f86:	90 e0       	ldi	r25, 0x00	; 0
    7f88:	b3 01       	movw	r22, r6
    7f8a:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    7f8e:	d7 fc       	sbrc	r13, 7
    7f90:	05 c0       	rjmp	.+10     	; 0x7f9c <vfprintf+0x432>
    7f92:	c1 14       	cp	r12, r1
    7f94:	d1 04       	cpc	r13, r1
    7f96:	41 f4       	brne	.+16     	; 0x7fa8 <vfprintf+0x43e>
    7f98:	04 ff       	sbrs	r16, 4
    7f9a:	06 c0       	rjmp	.+12     	; 0x7fa8 <vfprintf+0x43e>
    7f9c:	d0 94       	com	r13
    7f9e:	c1 94       	neg	r12
    7fa0:	d1 08       	sbc	r13, r1
    7fa2:	d3 94       	inc	r13
    7fa4:	8d e2       	ldi	r24, 0x2D	; 45
    7fa6:	01 c0       	rjmp	.+2      	; 0x7faa <vfprintf+0x440>
    7fa8:	8b e2       	ldi	r24, 0x2B	; 43
    7faa:	90 e0       	ldi	r25, 0x00	; 0
    7fac:	b3 01       	movw	r22, r6
    7fae:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    7fb2:	80 e3       	ldi	r24, 0x30	; 48
    7fb4:	05 c0       	rjmp	.+10     	; 0x7fc0 <vfprintf+0x456>
    7fb6:	8f 5f       	subi	r24, 0xFF	; 255
    7fb8:	26 ef       	ldi	r18, 0xF6	; 246
    7fba:	3f ef       	ldi	r19, 0xFF	; 255
    7fbc:	c2 0e       	add	r12, r18
    7fbe:	d3 1e       	adc	r13, r19
    7fc0:	3a e0       	ldi	r19, 0x0A	; 10
    7fc2:	c3 16       	cp	r12, r19
    7fc4:	d1 04       	cpc	r13, r1
    7fc6:	bc f7       	brge	.-18     	; 0x7fb6 <vfprintf+0x44c>
    7fc8:	90 e0       	ldi	r25, 0x00	; 0
    7fca:	b3 01       	movw	r22, r6
    7fcc:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    7fd0:	c6 01       	movw	r24, r12
    7fd2:	c0 96       	adiw	r24, 0x30	; 48
    7fd4:	b3 01       	movw	r22, r6
    7fd6:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    7fda:	cc 84       	ldd	r12, Y+12	; 0x0c
    7fdc:	dd 84       	ldd	r13, Y+13	; 0x0d
    7fde:	52 c1       	rjmp	.+676    	; 0x8284 <vfprintf+0x71a>
    7fe0:	93 36       	cpi	r25, 0x63	; 99
    7fe2:	31 f0       	breq	.+12     	; 0x7ff0 <vfprintf+0x486>
    7fe4:	93 37       	cpi	r25, 0x73	; 115
    7fe6:	99 f0       	breq	.+38     	; 0x800e <vfprintf+0x4a4>
    7fe8:	93 35       	cpi	r25, 0x53	; 83
    7fea:	09 f0       	breq	.+2      	; 0x7fee <vfprintf+0x484>
    7fec:	59 c0       	rjmp	.+178    	; 0x80a0 <vfprintf+0x536>
    7fee:	23 c0       	rjmp	.+70     	; 0x8036 <vfprintf+0x4cc>
    7ff0:	f6 01       	movw	r30, r12
    7ff2:	80 81       	ld	r24, Z
    7ff4:	89 83       	std	Y+1, r24	; 0x01
    7ff6:	5e 01       	movw	r10, r28
    7ff8:	08 94       	sec
    7ffa:	a1 1c       	adc	r10, r1
    7ffc:	b1 1c       	adc	r11, r1
    7ffe:	22 e0       	ldi	r18, 0x02	; 2
    8000:	30 e0       	ldi	r19, 0x00	; 0
    8002:	c2 0e       	add	r12, r18
    8004:	d3 1e       	adc	r13, r19
    8006:	21 e0       	ldi	r18, 0x01	; 1
    8008:	e2 2e       	mov	r14, r18
    800a:	f1 2c       	mov	r15, r1
    800c:	12 c0       	rjmp	.+36     	; 0x8032 <vfprintf+0x4c8>
    800e:	f6 01       	movw	r30, r12
    8010:	a0 80       	ld	r10, Z
    8012:	b1 80       	ldd	r11, Z+1	; 0x01
    8014:	16 fd       	sbrc	r17, 6
    8016:	03 c0       	rjmp	.+6      	; 0x801e <vfprintf+0x4b4>
    8018:	6f ef       	ldi	r22, 0xFF	; 255
    801a:	7f ef       	ldi	r23, 0xFF	; 255
    801c:	02 c0       	rjmp	.+4      	; 0x8022 <vfprintf+0x4b8>
    801e:	69 2d       	mov	r22, r9
    8020:	70 e0       	ldi	r23, 0x00	; 0
    8022:	22 e0       	ldi	r18, 0x02	; 2
    8024:	30 e0       	ldi	r19, 0x00	; 0
    8026:	c2 0e       	add	r12, r18
    8028:	d3 1e       	adc	r13, r19
    802a:	c5 01       	movw	r24, r10
    802c:	0e 94 a1 48 	call	0x9142	; 0x9142 <strnlen>
    8030:	7c 01       	movw	r14, r24
    8032:	1f 77       	andi	r17, 0x7F	; 127
    8034:	13 c0       	rjmp	.+38     	; 0x805c <vfprintf+0x4f2>
    8036:	f6 01       	movw	r30, r12
    8038:	a0 80       	ld	r10, Z
    803a:	b1 80       	ldd	r11, Z+1	; 0x01
    803c:	16 fd       	sbrc	r17, 6
    803e:	03 c0       	rjmp	.+6      	; 0x8046 <vfprintf+0x4dc>
    8040:	6f ef       	ldi	r22, 0xFF	; 255
    8042:	7f ef       	ldi	r23, 0xFF	; 255
    8044:	02 c0       	rjmp	.+4      	; 0x804a <vfprintf+0x4e0>
    8046:	69 2d       	mov	r22, r9
    8048:	70 e0       	ldi	r23, 0x00	; 0
    804a:	22 e0       	ldi	r18, 0x02	; 2
    804c:	30 e0       	ldi	r19, 0x00	; 0
    804e:	c2 0e       	add	r12, r18
    8050:	d3 1e       	adc	r13, r19
    8052:	c5 01       	movw	r24, r10
    8054:	0e 94 96 48 	call	0x912c	; 0x912c <strnlen_P>
    8058:	7c 01       	movw	r14, r24
    805a:	10 68       	ori	r17, 0x80	; 128
    805c:	13 ff       	sbrs	r17, 3
    805e:	07 c0       	rjmp	.+14     	; 0x806e <vfprintf+0x504>
    8060:	1b c0       	rjmp	.+54     	; 0x8098 <vfprintf+0x52e>
    8062:	80 e2       	ldi	r24, 0x20	; 32
    8064:	90 e0       	ldi	r25, 0x00	; 0
    8066:	b3 01       	movw	r22, r6
    8068:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    806c:	8a 94       	dec	r8
    806e:	88 2d       	mov	r24, r8
    8070:	90 e0       	ldi	r25, 0x00	; 0
    8072:	e8 16       	cp	r14, r24
    8074:	f9 06       	cpc	r15, r25
    8076:	a8 f3       	brcs	.-22     	; 0x8062 <vfprintf+0x4f8>
    8078:	0f c0       	rjmp	.+30     	; 0x8098 <vfprintf+0x52e>
    807a:	f5 01       	movw	r30, r10
    807c:	17 fd       	sbrc	r17, 7
    807e:	85 91       	lpm	r24, Z+
    8080:	17 ff       	sbrs	r17, 7
    8082:	81 91       	ld	r24, Z+
    8084:	5f 01       	movw	r10, r30
    8086:	90 e0       	ldi	r25, 0x00	; 0
    8088:	b3 01       	movw	r22, r6
    808a:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    808e:	81 10       	cpse	r8, r1
    8090:	8a 94       	dec	r8
    8092:	08 94       	sec
    8094:	e1 08       	sbc	r14, r1
    8096:	f1 08       	sbc	r15, r1
    8098:	e1 14       	cp	r14, r1
    809a:	f1 04       	cpc	r15, r1
    809c:	71 f7       	brne	.-36     	; 0x807a <vfprintf+0x510>
    809e:	f2 c0       	rjmp	.+484    	; 0x8284 <vfprintf+0x71a>
    80a0:	94 36       	cpi	r25, 0x64	; 100
    80a2:	11 f0       	breq	.+4      	; 0x80a8 <vfprintf+0x53e>
    80a4:	99 36       	cpi	r25, 0x69	; 105
    80a6:	89 f5       	brne	.+98     	; 0x810a <vfprintf+0x5a0>
    80a8:	17 ff       	sbrs	r17, 7
    80aa:	08 c0       	rjmp	.+16     	; 0x80bc <vfprintf+0x552>
    80ac:	f6 01       	movw	r30, r12
    80ae:	20 81       	ld	r18, Z
    80b0:	31 81       	ldd	r19, Z+1	; 0x01
    80b2:	42 81       	ldd	r20, Z+2	; 0x02
    80b4:	53 81       	ldd	r21, Z+3	; 0x03
    80b6:	84 e0       	ldi	r24, 0x04	; 4
    80b8:	90 e0       	ldi	r25, 0x00	; 0
    80ba:	0a c0       	rjmp	.+20     	; 0x80d0 <vfprintf+0x566>
    80bc:	f6 01       	movw	r30, r12
    80be:	80 81       	ld	r24, Z
    80c0:	91 81       	ldd	r25, Z+1	; 0x01
    80c2:	9c 01       	movw	r18, r24
    80c4:	44 27       	eor	r20, r20
    80c6:	37 fd       	sbrc	r19, 7
    80c8:	40 95       	com	r20
    80ca:	54 2f       	mov	r21, r20
    80cc:	82 e0       	ldi	r24, 0x02	; 2
    80ce:	90 e0       	ldi	r25, 0x00	; 0
    80d0:	c8 0e       	add	r12, r24
    80d2:	d9 1e       	adc	r13, r25
    80d4:	9f e6       	ldi	r25, 0x6F	; 111
    80d6:	f9 2e       	mov	r15, r25
    80d8:	f1 22       	and	r15, r17
    80da:	57 ff       	sbrs	r21, 7
    80dc:	09 c0       	rjmp	.+18     	; 0x80f0 <vfprintf+0x586>
    80de:	50 95       	com	r21
    80e0:	40 95       	com	r20
    80e2:	30 95       	com	r19
    80e4:	21 95       	neg	r18
    80e6:	3f 4f       	sbci	r19, 0xFF	; 255
    80e8:	4f 4f       	sbci	r20, 0xFF	; 255
    80ea:	5f 4f       	sbci	r21, 0xFF	; 255
    80ec:	90 e8       	ldi	r25, 0x80	; 128
    80ee:	f9 2a       	or	r15, r25
    80f0:	ca 01       	movw	r24, r20
    80f2:	b9 01       	movw	r22, r18
    80f4:	ae 01       	movw	r20, r28
    80f6:	4f 5f       	subi	r20, 0xFF	; 255
    80f8:	5f 4f       	sbci	r21, 0xFF	; 255
    80fa:	2a e0       	ldi	r18, 0x0A	; 10
    80fc:	30 e0       	ldi	r19, 0x00	; 0
    80fe:	0e 94 3b 49 	call	0x9276	; 0x9276 <__ultoa_invert>
    8102:	e8 2e       	mov	r14, r24
    8104:	e8 89       	ldd	r30, Y+16	; 0x10
    8106:	ee 1a       	sub	r14, r30
    8108:	41 c0       	rjmp	.+130    	; 0x818c <vfprintf+0x622>
    810a:	95 37       	cpi	r25, 0x75	; 117
    810c:	21 f4       	brne	.+8      	; 0x8116 <vfprintf+0x5ac>
    810e:	1f 7e       	andi	r17, 0xEF	; 239
    8110:	2a e0       	ldi	r18, 0x0A	; 10
    8112:	30 e0       	ldi	r19, 0x00	; 0
    8114:	1c c0       	rjmp	.+56     	; 0x814e <vfprintf+0x5e4>
    8116:	19 7f       	andi	r17, 0xF9	; 249
    8118:	9f 36       	cpi	r25, 0x6F	; 111
    811a:	61 f0       	breq	.+24     	; 0x8134 <vfprintf+0x5ca>
    811c:	90 37       	cpi	r25, 0x70	; 112
    811e:	20 f4       	brcc	.+8      	; 0x8128 <vfprintf+0x5be>
    8120:	98 35       	cpi	r25, 0x58	; 88
    8122:	09 f0       	breq	.+2      	; 0x8126 <vfprintf+0x5bc>
    8124:	b2 c0       	rjmp	.+356    	; 0x828a <vfprintf+0x720>
    8126:	0f c0       	rjmp	.+30     	; 0x8146 <vfprintf+0x5dc>
    8128:	90 37       	cpi	r25, 0x70	; 112
    812a:	39 f0       	breq	.+14     	; 0x813a <vfprintf+0x5d0>
    812c:	98 37       	cpi	r25, 0x78	; 120
    812e:	09 f0       	breq	.+2      	; 0x8132 <vfprintf+0x5c8>
    8130:	ac c0       	rjmp	.+344    	; 0x828a <vfprintf+0x720>
    8132:	04 c0       	rjmp	.+8      	; 0x813c <vfprintf+0x5d2>
    8134:	28 e0       	ldi	r18, 0x08	; 8
    8136:	30 e0       	ldi	r19, 0x00	; 0
    8138:	0a c0       	rjmp	.+20     	; 0x814e <vfprintf+0x5e4>
    813a:	10 61       	ori	r17, 0x10	; 16
    813c:	14 fd       	sbrc	r17, 4
    813e:	14 60       	ori	r17, 0x04	; 4
    8140:	20 e1       	ldi	r18, 0x10	; 16
    8142:	30 e0       	ldi	r19, 0x00	; 0
    8144:	04 c0       	rjmp	.+8      	; 0x814e <vfprintf+0x5e4>
    8146:	14 fd       	sbrc	r17, 4
    8148:	16 60       	ori	r17, 0x06	; 6
    814a:	20 e1       	ldi	r18, 0x10	; 16
    814c:	32 e0       	ldi	r19, 0x02	; 2
    814e:	17 ff       	sbrs	r17, 7
    8150:	08 c0       	rjmp	.+16     	; 0x8162 <vfprintf+0x5f8>
    8152:	f6 01       	movw	r30, r12
    8154:	60 81       	ld	r22, Z
    8156:	71 81       	ldd	r23, Z+1	; 0x01
    8158:	82 81       	ldd	r24, Z+2	; 0x02
    815a:	93 81       	ldd	r25, Z+3	; 0x03
    815c:	44 e0       	ldi	r20, 0x04	; 4
    815e:	50 e0       	ldi	r21, 0x00	; 0
    8160:	08 c0       	rjmp	.+16     	; 0x8172 <vfprintf+0x608>
    8162:	f6 01       	movw	r30, r12
    8164:	80 81       	ld	r24, Z
    8166:	91 81       	ldd	r25, Z+1	; 0x01
    8168:	bc 01       	movw	r22, r24
    816a:	80 e0       	ldi	r24, 0x00	; 0
    816c:	90 e0       	ldi	r25, 0x00	; 0
    816e:	42 e0       	ldi	r20, 0x02	; 2
    8170:	50 e0       	ldi	r21, 0x00	; 0
    8172:	c4 0e       	add	r12, r20
    8174:	d5 1e       	adc	r13, r21
    8176:	ae 01       	movw	r20, r28
    8178:	4f 5f       	subi	r20, 0xFF	; 255
    817a:	5f 4f       	sbci	r21, 0xFF	; 255
    817c:	0e 94 3b 49 	call	0x9276	; 0x9276 <__ultoa_invert>
    8180:	e8 2e       	mov	r14, r24
    8182:	58 89       	ldd	r21, Y+16	; 0x10
    8184:	e5 1a       	sub	r14, r21
    8186:	8f e7       	ldi	r24, 0x7F	; 127
    8188:	f8 2e       	mov	r15, r24
    818a:	f1 22       	and	r15, r17
    818c:	f6 fe       	sbrs	r15, 6
    818e:	0b c0       	rjmp	.+22     	; 0x81a6 <vfprintf+0x63c>
    8190:	8e ef       	ldi	r24, 0xFE	; 254
    8192:	f8 22       	and	r15, r24
    8194:	e9 14       	cp	r14, r9
    8196:	38 f4       	brcc	.+14     	; 0x81a6 <vfprintf+0x63c>
    8198:	f4 fe       	sbrs	r15, 4
    819a:	07 c0       	rjmp	.+14     	; 0x81aa <vfprintf+0x640>
    819c:	f2 fc       	sbrc	r15, 2
    819e:	05 c0       	rjmp	.+10     	; 0x81aa <vfprintf+0x640>
    81a0:	9f ee       	ldi	r25, 0xEF	; 239
    81a2:	f9 22       	and	r15, r25
    81a4:	02 c0       	rjmp	.+4      	; 0x81aa <vfprintf+0x640>
    81a6:	1e 2d       	mov	r17, r14
    81a8:	01 c0       	rjmp	.+2      	; 0x81ac <vfprintf+0x642>
    81aa:	19 2d       	mov	r17, r9
    81ac:	f4 fe       	sbrs	r15, 4
    81ae:	0d c0       	rjmp	.+26     	; 0x81ca <vfprintf+0x660>
    81b0:	fe 01       	movw	r30, r28
    81b2:	ee 0d       	add	r30, r14
    81b4:	f1 1d       	adc	r31, r1
    81b6:	80 81       	ld	r24, Z
    81b8:	80 33       	cpi	r24, 0x30	; 48
    81ba:	19 f4       	brne	.+6      	; 0x81c2 <vfprintf+0x658>
    81bc:	e9 ee       	ldi	r30, 0xE9	; 233
    81be:	fe 22       	and	r15, r30
    81c0:	08 c0       	rjmp	.+16     	; 0x81d2 <vfprintf+0x668>
    81c2:	1f 5f       	subi	r17, 0xFF	; 255
    81c4:	f2 fe       	sbrs	r15, 2
    81c6:	05 c0       	rjmp	.+10     	; 0x81d2 <vfprintf+0x668>
    81c8:	03 c0       	rjmp	.+6      	; 0x81d0 <vfprintf+0x666>
    81ca:	8f 2d       	mov	r24, r15
    81cc:	86 78       	andi	r24, 0x86	; 134
    81ce:	09 f0       	breq	.+2      	; 0x81d2 <vfprintf+0x668>
    81d0:	1f 5f       	subi	r17, 0xFF	; 255
    81d2:	0f 2d       	mov	r16, r15
    81d4:	f3 fc       	sbrc	r15, 3
    81d6:	14 c0       	rjmp	.+40     	; 0x8200 <vfprintf+0x696>
    81d8:	f0 fe       	sbrs	r15, 0
    81da:	0f c0       	rjmp	.+30     	; 0x81fa <vfprintf+0x690>
    81dc:	18 15       	cp	r17, r8
    81de:	10 f0       	brcs	.+4      	; 0x81e4 <vfprintf+0x67a>
    81e0:	9e 2c       	mov	r9, r14
    81e2:	0b c0       	rjmp	.+22     	; 0x81fa <vfprintf+0x690>
    81e4:	9e 2c       	mov	r9, r14
    81e6:	98 0c       	add	r9, r8
    81e8:	91 1a       	sub	r9, r17
    81ea:	18 2d       	mov	r17, r8
    81ec:	06 c0       	rjmp	.+12     	; 0x81fa <vfprintf+0x690>
    81ee:	80 e2       	ldi	r24, 0x20	; 32
    81f0:	90 e0       	ldi	r25, 0x00	; 0
    81f2:	b3 01       	movw	r22, r6
    81f4:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    81f8:	1f 5f       	subi	r17, 0xFF	; 255
    81fa:	18 15       	cp	r17, r8
    81fc:	c0 f3       	brcs	.-16     	; 0x81ee <vfprintf+0x684>
    81fe:	04 c0       	rjmp	.+8      	; 0x8208 <vfprintf+0x69e>
    8200:	18 15       	cp	r17, r8
    8202:	10 f4       	brcc	.+4      	; 0x8208 <vfprintf+0x69e>
    8204:	81 1a       	sub	r8, r17
    8206:	01 c0       	rjmp	.+2      	; 0x820a <vfprintf+0x6a0>
    8208:	88 24       	eor	r8, r8
    820a:	04 ff       	sbrs	r16, 4
    820c:	0f c0       	rjmp	.+30     	; 0x822c <vfprintf+0x6c2>
    820e:	80 e3       	ldi	r24, 0x30	; 48
    8210:	90 e0       	ldi	r25, 0x00	; 0
    8212:	b3 01       	movw	r22, r6
    8214:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    8218:	02 ff       	sbrs	r16, 2
    821a:	1d c0       	rjmp	.+58     	; 0x8256 <vfprintf+0x6ec>
    821c:	01 fd       	sbrc	r16, 1
    821e:	03 c0       	rjmp	.+6      	; 0x8226 <vfprintf+0x6bc>
    8220:	88 e7       	ldi	r24, 0x78	; 120
    8222:	90 e0       	ldi	r25, 0x00	; 0
    8224:	0e c0       	rjmp	.+28     	; 0x8242 <vfprintf+0x6d8>
    8226:	88 e5       	ldi	r24, 0x58	; 88
    8228:	90 e0       	ldi	r25, 0x00	; 0
    822a:	0b c0       	rjmp	.+22     	; 0x8242 <vfprintf+0x6d8>
    822c:	80 2f       	mov	r24, r16
    822e:	86 78       	andi	r24, 0x86	; 134
    8230:	91 f0       	breq	.+36     	; 0x8256 <vfprintf+0x6ec>
    8232:	01 ff       	sbrs	r16, 1
    8234:	02 c0       	rjmp	.+4      	; 0x823a <vfprintf+0x6d0>
    8236:	8b e2       	ldi	r24, 0x2B	; 43
    8238:	01 c0       	rjmp	.+2      	; 0x823c <vfprintf+0x6d2>
    823a:	80 e2       	ldi	r24, 0x20	; 32
    823c:	f7 fc       	sbrc	r15, 7
    823e:	8d e2       	ldi	r24, 0x2D	; 45
    8240:	90 e0       	ldi	r25, 0x00	; 0
    8242:	b3 01       	movw	r22, r6
    8244:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    8248:	06 c0       	rjmp	.+12     	; 0x8256 <vfprintf+0x6ec>
    824a:	80 e3       	ldi	r24, 0x30	; 48
    824c:	90 e0       	ldi	r25, 0x00	; 0
    824e:	b3 01       	movw	r22, r6
    8250:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    8254:	9a 94       	dec	r9
    8256:	e9 14       	cp	r14, r9
    8258:	c0 f3       	brcs	.-16     	; 0x824a <vfprintf+0x6e0>
    825a:	ea 94       	dec	r14
    825c:	e1 e0       	ldi	r30, 0x01	; 1
    825e:	f0 e0       	ldi	r31, 0x00	; 0
    8260:	ec 0f       	add	r30, r28
    8262:	fd 1f       	adc	r31, r29
    8264:	ee 0d       	add	r30, r14
    8266:	f1 1d       	adc	r31, r1
    8268:	80 81       	ld	r24, Z
    826a:	90 e0       	ldi	r25, 0x00	; 0
    826c:	b3 01       	movw	r22, r6
    826e:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    8272:	ee 20       	and	r14, r14
    8274:	91 f7       	brne	.-28     	; 0x825a <vfprintf+0x6f0>
    8276:	06 c0       	rjmp	.+12     	; 0x8284 <vfprintf+0x71a>
    8278:	80 e2       	ldi	r24, 0x20	; 32
    827a:	90 e0       	ldi	r25, 0x00	; 0
    827c:	b3 01       	movw	r22, r6
    827e:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <fputc>
    8282:	8a 94       	dec	r8
    8284:	88 20       	and	r8, r8
    8286:	c1 f7       	brne	.-16     	; 0x8278 <vfprintf+0x70e>
    8288:	99 cc       	rjmp	.-1742   	; 0x7bbc <vfprintf+0x52>
    828a:	f3 01       	movw	r30, r6
    828c:	66 81       	ldd	r22, Z+6	; 0x06
    828e:	77 81       	ldd	r23, Z+7	; 0x07
    8290:	cb 01       	movw	r24, r22
    8292:	61 96       	adiw	r28, 0x11	; 17
    8294:	cd bf       	out	0x3d, r28	; 61
    8296:	de bf       	out	0x3e, r29	; 62
    8298:	cf 91       	pop	r28
    829a:	df 91       	pop	r29
    829c:	1f 91       	pop	r17
    829e:	0f 91       	pop	r16
    82a0:	ff 90       	pop	r15
    82a2:	ef 90       	pop	r14
    82a4:	df 90       	pop	r13
    82a6:	cf 90       	pop	r12
    82a8:	bf 90       	pop	r11
    82aa:	af 90       	pop	r10
    82ac:	9f 90       	pop	r9
    82ae:	8f 90       	pop	r8
    82b0:	7f 90       	pop	r7
    82b2:	6f 90       	pop	r6
    82b4:	5f 90       	pop	r5
    82b6:	4f 90       	pop	r4
    82b8:	3f 90       	pop	r3
    82ba:	2f 90       	pop	r2
    82bc:	08 95       	ret

000082be <__subsf3>:
    82be:	50 58       	subi	r21, 0x80	; 128

000082c0 <__addsf3>:
    82c0:	bb 27       	eor	r27, r27
    82c2:	aa 27       	eor	r26, r26
    82c4:	0e d0       	rcall	.+28     	; 0x82e2 <__addsf3x>
    82c6:	29 c2       	rjmp	.+1106   	; 0x871a <__fp_round>
    82c8:	f2 d1       	rcall	.+996    	; 0x86ae <__fp_pscA>
    82ca:	30 f0       	brcs	.+12     	; 0x82d8 <__addsf3+0x18>
    82cc:	f7 d1       	rcall	.+1006   	; 0x86bc <__fp_pscB>
    82ce:	20 f0       	brcs	.+8      	; 0x82d8 <__addsf3+0x18>
    82d0:	31 f4       	brne	.+12     	; 0x82de <__addsf3+0x1e>
    82d2:	9f 3f       	cpi	r25, 0xFF	; 255
    82d4:	11 f4       	brne	.+4      	; 0x82da <__addsf3+0x1a>
    82d6:	1e f4       	brtc	.+6      	; 0x82de <__addsf3+0x1e>
    82d8:	c2 c1       	rjmp	.+900    	; 0x865e <__fp_nan>
    82da:	0e f4       	brtc	.+2      	; 0x82de <__addsf3+0x1e>
    82dc:	e0 95       	com	r30
    82de:	e7 fb       	bst	r30, 7
    82e0:	8f c1       	rjmp	.+798    	; 0x8600 <__fp_inf>

000082e2 <__addsf3x>:
    82e2:	e9 2f       	mov	r30, r25
    82e4:	3c d2       	rcall	.+1144   	; 0x875e <__fp_split3>
    82e6:	80 f3       	brcs	.-32     	; 0x82c8 <__addsf3+0x8>
    82e8:	ba 17       	cp	r27, r26
    82ea:	62 07       	cpc	r22, r18
    82ec:	73 07       	cpc	r23, r19
    82ee:	84 07       	cpc	r24, r20
    82f0:	95 07       	cpc	r25, r21
    82f2:	18 f0       	brcs	.+6      	; 0x82fa <__addsf3x+0x18>
    82f4:	71 f4       	brne	.+28     	; 0x8312 <__addsf3x+0x30>
    82f6:	9e f5       	brtc	.+102    	; 0x835e <__addsf3x+0x7c>
    82f8:	6b c2       	rjmp	.+1238   	; 0x87d0 <__fp_zero>
    82fa:	0e f4       	brtc	.+2      	; 0x82fe <__addsf3x+0x1c>
    82fc:	e0 95       	com	r30
    82fe:	0b 2e       	mov	r0, r27
    8300:	ba 2f       	mov	r27, r26
    8302:	a0 2d       	mov	r26, r0
    8304:	0b 01       	movw	r0, r22
    8306:	b9 01       	movw	r22, r18
    8308:	90 01       	movw	r18, r0
    830a:	0c 01       	movw	r0, r24
    830c:	ca 01       	movw	r24, r20
    830e:	a0 01       	movw	r20, r0
    8310:	11 24       	eor	r1, r1
    8312:	ff 27       	eor	r31, r31
    8314:	59 1b       	sub	r21, r25
    8316:	99 f0       	breq	.+38     	; 0x833e <__addsf3x+0x5c>
    8318:	59 3f       	cpi	r21, 0xF9	; 249
    831a:	50 f4       	brcc	.+20     	; 0x8330 <__addsf3x+0x4e>
    831c:	50 3e       	cpi	r21, 0xE0	; 224
    831e:	68 f1       	brcs	.+90     	; 0x837a <__addsf3x+0x98>
    8320:	1a 16       	cp	r1, r26
    8322:	f0 40       	sbci	r31, 0x00	; 0
    8324:	a2 2f       	mov	r26, r18
    8326:	23 2f       	mov	r18, r19
    8328:	34 2f       	mov	r19, r20
    832a:	44 27       	eor	r20, r20
    832c:	58 5f       	subi	r21, 0xF8	; 248
    832e:	f3 cf       	rjmp	.-26     	; 0x8316 <__addsf3x+0x34>
    8330:	46 95       	lsr	r20
    8332:	37 95       	ror	r19
    8334:	27 95       	ror	r18
    8336:	a7 95       	ror	r26
    8338:	f0 40       	sbci	r31, 0x00	; 0
    833a:	53 95       	inc	r21
    833c:	c9 f7       	brne	.-14     	; 0x8330 <__addsf3x+0x4e>
    833e:	7e f4       	brtc	.+30     	; 0x835e <__addsf3x+0x7c>
    8340:	1f 16       	cp	r1, r31
    8342:	ba 0b       	sbc	r27, r26
    8344:	62 0b       	sbc	r22, r18
    8346:	73 0b       	sbc	r23, r19
    8348:	84 0b       	sbc	r24, r20
    834a:	ba f0       	brmi	.+46     	; 0x837a <__addsf3x+0x98>
    834c:	91 50       	subi	r25, 0x01	; 1
    834e:	a1 f0       	breq	.+40     	; 0x8378 <__addsf3x+0x96>
    8350:	ff 0f       	add	r31, r31
    8352:	bb 1f       	adc	r27, r27
    8354:	66 1f       	adc	r22, r22
    8356:	77 1f       	adc	r23, r23
    8358:	88 1f       	adc	r24, r24
    835a:	c2 f7       	brpl	.-16     	; 0x834c <__addsf3x+0x6a>
    835c:	0e c0       	rjmp	.+28     	; 0x837a <__addsf3x+0x98>
    835e:	ba 0f       	add	r27, r26
    8360:	62 1f       	adc	r22, r18
    8362:	73 1f       	adc	r23, r19
    8364:	84 1f       	adc	r24, r20
    8366:	48 f4       	brcc	.+18     	; 0x837a <__addsf3x+0x98>
    8368:	87 95       	ror	r24
    836a:	77 95       	ror	r23
    836c:	67 95       	ror	r22
    836e:	b7 95       	ror	r27
    8370:	f7 95       	ror	r31
    8372:	9e 3f       	cpi	r25, 0xFE	; 254
    8374:	08 f0       	brcs	.+2      	; 0x8378 <__addsf3x+0x96>
    8376:	b3 cf       	rjmp	.-154    	; 0x82de <__addsf3+0x1e>
    8378:	93 95       	inc	r25
    837a:	88 0f       	add	r24, r24
    837c:	08 f0       	brcs	.+2      	; 0x8380 <__addsf3x+0x9e>
    837e:	99 27       	eor	r25, r25
    8380:	ee 0f       	add	r30, r30
    8382:	97 95       	ror	r25
    8384:	87 95       	ror	r24
    8386:	08 95       	ret

00008388 <atan>:
    8388:	df 93       	push	r29
    838a:	dd 27       	eor	r29, r29
    838c:	b9 2f       	mov	r27, r25
    838e:	bf 77       	andi	r27, 0x7F	; 127
    8390:	40 e8       	ldi	r20, 0x80	; 128
    8392:	5f e3       	ldi	r21, 0x3F	; 63
    8394:	16 16       	cp	r1, r22
    8396:	17 06       	cpc	r1, r23
    8398:	48 07       	cpc	r20, r24
    839a:	5b 07       	cpc	r21, r27
    839c:	10 f4       	brcc	.+4      	; 0x83a2 <atan+0x1a>
    839e:	d9 2f       	mov	r29, r25
    83a0:	83 d2       	rcall	.+1286   	; 0x88a8 <inverse>
    83a2:	9f 93       	push	r25
    83a4:	8f 93       	push	r24
    83a6:	7f 93       	push	r23
    83a8:	6f 93       	push	r22
    83aa:	96 d3       	rcall	.+1836   	; 0x8ad8 <square>
    83ac:	e8 ee       	ldi	r30, 0xE8	; 232
    83ae:	f1 e0       	ldi	r31, 0x01	; 1
    83b0:	59 d1       	rcall	.+690    	; 0x8664 <__fp_powser>
    83b2:	b3 d1       	rcall	.+870    	; 0x871a <__fp_round>
    83b4:	2f 91       	pop	r18
    83b6:	3f 91       	pop	r19
    83b8:	4f 91       	pop	r20
    83ba:	5f 91       	pop	r21
    83bc:	ee d2       	rcall	.+1500   	; 0x899a <__mulsf3x>
    83be:	dd 23       	and	r29, r29
    83c0:	49 f0       	breq	.+18     	; 0x83d4 <atan+0x4c>
    83c2:	90 58       	subi	r25, 0x80	; 128
    83c4:	a2 ea       	ldi	r26, 0xA2	; 162
    83c6:	2a ed       	ldi	r18, 0xDA	; 218
    83c8:	3f e0       	ldi	r19, 0x0F	; 15
    83ca:	49 ec       	ldi	r20, 0xC9	; 201
    83cc:	5f e3       	ldi	r21, 0x3F	; 63
    83ce:	d0 78       	andi	r29, 0x80	; 128
    83d0:	5d 27       	eor	r21, r29
    83d2:	87 df       	rcall	.-242    	; 0x82e2 <__addsf3x>
    83d4:	df 91       	pop	r29
    83d6:	a1 c1       	rjmp	.+834    	; 0x871a <__fp_round>

000083d8 <ceil>:
    83d8:	e4 d1       	rcall	.+968    	; 0x87a2 <__fp_trunc>
    83da:	80 f0       	brcs	.+32     	; 0x83fc <ceil+0x24>
    83dc:	9f 37       	cpi	r25, 0x7F	; 127
    83de:	40 f4       	brcc	.+16     	; 0x83f0 <ceil+0x18>
    83e0:	91 11       	cpse	r25, r1
    83e2:	0e f4       	brtc	.+2      	; 0x83e6 <ceil+0xe>
    83e4:	f6 c1       	rjmp	.+1004   	; 0x87d2 <__fp_szero>
    83e6:	60 e0       	ldi	r22, 0x00	; 0
    83e8:	70 e0       	ldi	r23, 0x00	; 0
    83ea:	80 e8       	ldi	r24, 0x80	; 128
    83ec:	9f e3       	ldi	r25, 0x3F	; 63
    83ee:	08 95       	ret
    83f0:	26 f0       	brts	.+8      	; 0x83fa <ceil+0x22>
    83f2:	1b 16       	cp	r1, r27
    83f4:	61 1d       	adc	r22, r1
    83f6:	71 1d       	adc	r23, r1
    83f8:	81 1d       	adc	r24, r1
    83fa:	08 c1       	rjmp	.+528    	; 0x860c <__fp_mintl>
    83fc:	22 c1       	rjmp	.+580    	; 0x8642 <__fp_mpack>

000083fe <__cmpsf2>:
    83fe:	dc d0       	rcall	.+440    	; 0x85b8 <__fp_cmp>
    8400:	08 f4       	brcc	.+2      	; 0x8404 <__cmpsf2+0x6>
    8402:	81 e0       	ldi	r24, 0x01	; 1
    8404:	08 95       	ret

00008406 <cos>:
    8406:	62 d1       	rcall	.+708    	; 0x86cc <__fp_rempio2>
    8408:	e3 95       	inc	r30
    840a:	98 c1       	rjmp	.+816    	; 0x873c <__fp_sinus>

0000840c <__divsf3>:
    840c:	0c d0       	rcall	.+24     	; 0x8426 <__divsf3x>
    840e:	85 c1       	rjmp	.+778    	; 0x871a <__fp_round>
    8410:	55 d1       	rcall	.+682    	; 0x86bc <__fp_pscB>
    8412:	40 f0       	brcs	.+16     	; 0x8424 <__divsf3+0x18>
    8414:	4c d1       	rcall	.+664    	; 0x86ae <__fp_pscA>
    8416:	30 f0       	brcs	.+12     	; 0x8424 <__divsf3+0x18>
    8418:	21 f4       	brne	.+8      	; 0x8422 <__divsf3+0x16>
    841a:	5f 3f       	cpi	r21, 0xFF	; 255
    841c:	19 f0       	breq	.+6      	; 0x8424 <__divsf3+0x18>
    841e:	f0 c0       	rjmp	.+480    	; 0x8600 <__fp_inf>
    8420:	51 11       	cpse	r21, r1
    8422:	d7 c1       	rjmp	.+942    	; 0x87d2 <__fp_szero>
    8424:	1c c1       	rjmp	.+568    	; 0x865e <__fp_nan>

00008426 <__divsf3x>:
    8426:	9b d1       	rcall	.+822    	; 0x875e <__fp_split3>
    8428:	98 f3       	brcs	.-26     	; 0x8410 <__divsf3+0x4>

0000842a <__divsf3_pse>:
    842a:	99 23       	and	r25, r25
    842c:	c9 f3       	breq	.-14     	; 0x8420 <__divsf3+0x14>
    842e:	55 23       	and	r21, r21
    8430:	b1 f3       	breq	.-20     	; 0x841e <__divsf3+0x12>
    8432:	95 1b       	sub	r25, r21
    8434:	55 0b       	sbc	r21, r21
    8436:	bb 27       	eor	r27, r27
    8438:	aa 27       	eor	r26, r26
    843a:	62 17       	cp	r22, r18
    843c:	73 07       	cpc	r23, r19
    843e:	84 07       	cpc	r24, r20
    8440:	38 f0       	brcs	.+14     	; 0x8450 <__divsf3_pse+0x26>
    8442:	9f 5f       	subi	r25, 0xFF	; 255
    8444:	5f 4f       	sbci	r21, 0xFF	; 255
    8446:	22 0f       	add	r18, r18
    8448:	33 1f       	adc	r19, r19
    844a:	44 1f       	adc	r20, r20
    844c:	aa 1f       	adc	r26, r26
    844e:	a9 f3       	breq	.-22     	; 0x843a <__divsf3_pse+0x10>
    8450:	33 d0       	rcall	.+102    	; 0x84b8 <__divsf3_pse+0x8e>
    8452:	0e 2e       	mov	r0, r30
    8454:	3a f0       	brmi	.+14     	; 0x8464 <__divsf3_pse+0x3a>
    8456:	e0 e8       	ldi	r30, 0x80	; 128
    8458:	30 d0       	rcall	.+96     	; 0x84ba <__divsf3_pse+0x90>
    845a:	91 50       	subi	r25, 0x01	; 1
    845c:	50 40       	sbci	r21, 0x00	; 0
    845e:	e6 95       	lsr	r30
    8460:	00 1c       	adc	r0, r0
    8462:	ca f7       	brpl	.-14     	; 0x8456 <__divsf3_pse+0x2c>
    8464:	29 d0       	rcall	.+82     	; 0x84b8 <__divsf3_pse+0x8e>
    8466:	fe 2f       	mov	r31, r30
    8468:	27 d0       	rcall	.+78     	; 0x84b8 <__divsf3_pse+0x8e>
    846a:	66 0f       	add	r22, r22
    846c:	77 1f       	adc	r23, r23
    846e:	88 1f       	adc	r24, r24
    8470:	bb 1f       	adc	r27, r27
    8472:	26 17       	cp	r18, r22
    8474:	37 07       	cpc	r19, r23
    8476:	48 07       	cpc	r20, r24
    8478:	ab 07       	cpc	r26, r27
    847a:	b0 e8       	ldi	r27, 0x80	; 128
    847c:	09 f0       	breq	.+2      	; 0x8480 <__divsf3_pse+0x56>
    847e:	bb 0b       	sbc	r27, r27
    8480:	80 2d       	mov	r24, r0
    8482:	bf 01       	movw	r22, r30
    8484:	ff 27       	eor	r31, r31
    8486:	93 58       	subi	r25, 0x83	; 131
    8488:	5f 4f       	sbci	r21, 0xFF	; 255
    848a:	2a f0       	brmi	.+10     	; 0x8496 <__divsf3_pse+0x6c>
    848c:	9e 3f       	cpi	r25, 0xFE	; 254
    848e:	51 05       	cpc	r21, r1
    8490:	68 f0       	brcs	.+26     	; 0x84ac <__divsf3_pse+0x82>
    8492:	b6 c0       	rjmp	.+364    	; 0x8600 <__fp_inf>
    8494:	9e c1       	rjmp	.+828    	; 0x87d2 <__fp_szero>
    8496:	5f 3f       	cpi	r21, 0xFF	; 255
    8498:	ec f3       	brlt	.-6      	; 0x8494 <__divsf3_pse+0x6a>
    849a:	98 3e       	cpi	r25, 0xE8	; 232
    849c:	dc f3       	brlt	.-10     	; 0x8494 <__divsf3_pse+0x6a>
    849e:	86 95       	lsr	r24
    84a0:	77 95       	ror	r23
    84a2:	67 95       	ror	r22
    84a4:	b7 95       	ror	r27
    84a6:	f7 95       	ror	r31
    84a8:	9f 5f       	subi	r25, 0xFF	; 255
    84aa:	c9 f7       	brne	.-14     	; 0x849e <__divsf3_pse+0x74>
    84ac:	88 0f       	add	r24, r24
    84ae:	91 1d       	adc	r25, r1
    84b0:	96 95       	lsr	r25
    84b2:	87 95       	ror	r24
    84b4:	97 f9       	bld	r25, 7
    84b6:	08 95       	ret
    84b8:	e1 e0       	ldi	r30, 0x01	; 1
    84ba:	66 0f       	add	r22, r22
    84bc:	77 1f       	adc	r23, r23
    84be:	88 1f       	adc	r24, r24
    84c0:	bb 1f       	adc	r27, r27
    84c2:	62 17       	cp	r22, r18
    84c4:	73 07       	cpc	r23, r19
    84c6:	84 07       	cpc	r24, r20
    84c8:	ba 07       	cpc	r27, r26
    84ca:	20 f0       	brcs	.+8      	; 0x84d4 <__divsf3_pse+0xaa>
    84cc:	62 1b       	sub	r22, r18
    84ce:	73 0b       	sbc	r23, r19
    84d0:	84 0b       	sbc	r24, r20
    84d2:	ba 0b       	sbc	r27, r26
    84d4:	ee 1f       	adc	r30, r30
    84d6:	88 f7       	brcc	.-30     	; 0x84ba <__divsf3_pse+0x90>
    84d8:	e0 95       	com	r30
    84da:	08 95       	ret

000084dc <__fixsfsi>:
    84dc:	04 d0       	rcall	.+8      	; 0x84e6 <__fixunssfsi>
    84de:	68 94       	set
    84e0:	b1 11       	cpse	r27, r1
    84e2:	77 c1       	rjmp	.+750    	; 0x87d2 <__fp_szero>
    84e4:	08 95       	ret

000084e6 <__fixunssfsi>:
    84e6:	43 d1       	rcall	.+646    	; 0x876e <__fp_splitA>
    84e8:	88 f0       	brcs	.+34     	; 0x850c <__fixunssfsi+0x26>
    84ea:	9f 57       	subi	r25, 0x7F	; 127
    84ec:	90 f0       	brcs	.+36     	; 0x8512 <__fixunssfsi+0x2c>
    84ee:	b9 2f       	mov	r27, r25
    84f0:	99 27       	eor	r25, r25
    84f2:	b7 51       	subi	r27, 0x17	; 23
    84f4:	a0 f0       	brcs	.+40     	; 0x851e <__fixunssfsi+0x38>
    84f6:	d1 f0       	breq	.+52     	; 0x852c <__fixunssfsi+0x46>
    84f8:	66 0f       	add	r22, r22
    84fa:	77 1f       	adc	r23, r23
    84fc:	88 1f       	adc	r24, r24
    84fe:	99 1f       	adc	r25, r25
    8500:	1a f0       	brmi	.+6      	; 0x8508 <__fixunssfsi+0x22>
    8502:	ba 95       	dec	r27
    8504:	c9 f7       	brne	.-14     	; 0x84f8 <__fixunssfsi+0x12>
    8506:	12 c0       	rjmp	.+36     	; 0x852c <__fixunssfsi+0x46>
    8508:	b1 30       	cpi	r27, 0x01	; 1
    850a:	81 f0       	breq	.+32     	; 0x852c <__fixunssfsi+0x46>
    850c:	61 d1       	rcall	.+706    	; 0x87d0 <__fp_zero>
    850e:	b1 e0       	ldi	r27, 0x01	; 1
    8510:	08 95       	ret
    8512:	5e c1       	rjmp	.+700    	; 0x87d0 <__fp_zero>
    8514:	67 2f       	mov	r22, r23
    8516:	78 2f       	mov	r23, r24
    8518:	88 27       	eor	r24, r24
    851a:	b8 5f       	subi	r27, 0xF8	; 248
    851c:	39 f0       	breq	.+14     	; 0x852c <__fixunssfsi+0x46>
    851e:	b9 3f       	cpi	r27, 0xF9	; 249
    8520:	cc f3       	brlt	.-14     	; 0x8514 <__fixunssfsi+0x2e>
    8522:	86 95       	lsr	r24
    8524:	77 95       	ror	r23
    8526:	67 95       	ror	r22
    8528:	b3 95       	inc	r27
    852a:	d9 f7       	brne	.-10     	; 0x8522 <__fixunssfsi+0x3c>
    852c:	3e f4       	brtc	.+14     	; 0x853c <__fixunssfsi+0x56>
    852e:	90 95       	com	r25
    8530:	80 95       	com	r24
    8532:	70 95       	com	r23
    8534:	61 95       	neg	r22
    8536:	7f 4f       	sbci	r23, 0xFF	; 255
    8538:	8f 4f       	sbci	r24, 0xFF	; 255
    853a:	9f 4f       	sbci	r25, 0xFF	; 255
    853c:	08 95       	ret

0000853e <__floatunsisf>:
    853e:	e8 94       	clt
    8540:	09 c0       	rjmp	.+18     	; 0x8554 <__floatsisf+0x12>

00008542 <__floatsisf>:
    8542:	97 fb       	bst	r25, 7
    8544:	3e f4       	brtc	.+14     	; 0x8554 <__floatsisf+0x12>
    8546:	90 95       	com	r25
    8548:	80 95       	com	r24
    854a:	70 95       	com	r23
    854c:	61 95       	neg	r22
    854e:	7f 4f       	sbci	r23, 0xFF	; 255
    8550:	8f 4f       	sbci	r24, 0xFF	; 255
    8552:	9f 4f       	sbci	r25, 0xFF	; 255
    8554:	99 23       	and	r25, r25
    8556:	a9 f0       	breq	.+42     	; 0x8582 <__floatsisf+0x40>
    8558:	f9 2f       	mov	r31, r25
    855a:	96 e9       	ldi	r25, 0x96	; 150
    855c:	bb 27       	eor	r27, r27
    855e:	93 95       	inc	r25
    8560:	f6 95       	lsr	r31
    8562:	87 95       	ror	r24
    8564:	77 95       	ror	r23
    8566:	67 95       	ror	r22
    8568:	b7 95       	ror	r27
    856a:	f1 11       	cpse	r31, r1
    856c:	f8 cf       	rjmp	.-16     	; 0x855e <__floatsisf+0x1c>
    856e:	fa f4       	brpl	.+62     	; 0x85ae <__floatsisf+0x6c>
    8570:	bb 0f       	add	r27, r27
    8572:	11 f4       	brne	.+4      	; 0x8578 <__floatsisf+0x36>
    8574:	60 ff       	sbrs	r22, 0
    8576:	1b c0       	rjmp	.+54     	; 0x85ae <__floatsisf+0x6c>
    8578:	6f 5f       	subi	r22, 0xFF	; 255
    857a:	7f 4f       	sbci	r23, 0xFF	; 255
    857c:	8f 4f       	sbci	r24, 0xFF	; 255
    857e:	9f 4f       	sbci	r25, 0xFF	; 255
    8580:	16 c0       	rjmp	.+44     	; 0x85ae <__floatsisf+0x6c>
    8582:	88 23       	and	r24, r24
    8584:	11 f0       	breq	.+4      	; 0x858a <__floatsisf+0x48>
    8586:	96 e9       	ldi	r25, 0x96	; 150
    8588:	11 c0       	rjmp	.+34     	; 0x85ac <__floatsisf+0x6a>
    858a:	77 23       	and	r23, r23
    858c:	21 f0       	breq	.+8      	; 0x8596 <__floatsisf+0x54>
    858e:	9e e8       	ldi	r25, 0x8E	; 142
    8590:	87 2f       	mov	r24, r23
    8592:	76 2f       	mov	r23, r22
    8594:	05 c0       	rjmp	.+10     	; 0x85a0 <__floatsisf+0x5e>
    8596:	66 23       	and	r22, r22
    8598:	71 f0       	breq	.+28     	; 0x85b6 <__floatsisf+0x74>
    859a:	96 e8       	ldi	r25, 0x86	; 134
    859c:	86 2f       	mov	r24, r22
    859e:	70 e0       	ldi	r23, 0x00	; 0
    85a0:	60 e0       	ldi	r22, 0x00	; 0
    85a2:	2a f0       	brmi	.+10     	; 0x85ae <__floatsisf+0x6c>
    85a4:	9a 95       	dec	r25
    85a6:	66 0f       	add	r22, r22
    85a8:	77 1f       	adc	r23, r23
    85aa:	88 1f       	adc	r24, r24
    85ac:	da f7       	brpl	.-10     	; 0x85a4 <__floatsisf+0x62>
    85ae:	88 0f       	add	r24, r24
    85b0:	96 95       	lsr	r25
    85b2:	87 95       	ror	r24
    85b4:	97 f9       	bld	r25, 7
    85b6:	08 95       	ret

000085b8 <__fp_cmp>:
    85b8:	99 0f       	add	r25, r25
    85ba:	00 08       	sbc	r0, r0
    85bc:	55 0f       	add	r21, r21
    85be:	aa 0b       	sbc	r26, r26
    85c0:	e0 e8       	ldi	r30, 0x80	; 128
    85c2:	fe ef       	ldi	r31, 0xFE	; 254
    85c4:	16 16       	cp	r1, r22
    85c6:	17 06       	cpc	r1, r23
    85c8:	e8 07       	cpc	r30, r24
    85ca:	f9 07       	cpc	r31, r25
    85cc:	c0 f0       	brcs	.+48     	; 0x85fe <__fp_cmp+0x46>
    85ce:	12 16       	cp	r1, r18
    85d0:	13 06       	cpc	r1, r19
    85d2:	e4 07       	cpc	r30, r20
    85d4:	f5 07       	cpc	r31, r21
    85d6:	98 f0       	brcs	.+38     	; 0x85fe <__fp_cmp+0x46>
    85d8:	62 1b       	sub	r22, r18
    85da:	73 0b       	sbc	r23, r19
    85dc:	84 0b       	sbc	r24, r20
    85de:	95 0b       	sbc	r25, r21
    85e0:	39 f4       	brne	.+14     	; 0x85f0 <__fp_cmp+0x38>
    85e2:	0a 26       	eor	r0, r26
    85e4:	61 f0       	breq	.+24     	; 0x85fe <__fp_cmp+0x46>
    85e6:	23 2b       	or	r18, r19
    85e8:	24 2b       	or	r18, r20
    85ea:	25 2b       	or	r18, r21
    85ec:	21 f4       	brne	.+8      	; 0x85f6 <__fp_cmp+0x3e>
    85ee:	08 95       	ret
    85f0:	0a 26       	eor	r0, r26
    85f2:	09 f4       	brne	.+2      	; 0x85f6 <__fp_cmp+0x3e>
    85f4:	a1 40       	sbci	r26, 0x01	; 1
    85f6:	a6 95       	lsr	r26
    85f8:	8f ef       	ldi	r24, 0xFF	; 255
    85fa:	81 1d       	adc	r24, r1
    85fc:	81 1d       	adc	r24, r1
    85fe:	08 95       	ret

00008600 <__fp_inf>:
    8600:	97 f9       	bld	r25, 7
    8602:	9f 67       	ori	r25, 0x7F	; 127
    8604:	80 e8       	ldi	r24, 0x80	; 128
    8606:	70 e0       	ldi	r23, 0x00	; 0
    8608:	60 e0       	ldi	r22, 0x00	; 0
    860a:	08 95       	ret

0000860c <__fp_mintl>:
    860c:	88 23       	and	r24, r24
    860e:	71 f4       	brne	.+28     	; 0x862c <__fp_mintl+0x20>
    8610:	77 23       	and	r23, r23
    8612:	21 f0       	breq	.+8      	; 0x861c <__fp_mintl+0x10>
    8614:	98 50       	subi	r25, 0x08	; 8
    8616:	87 2b       	or	r24, r23
    8618:	76 2f       	mov	r23, r22
    861a:	07 c0       	rjmp	.+14     	; 0x862a <__fp_mintl+0x1e>
    861c:	66 23       	and	r22, r22
    861e:	11 f4       	brne	.+4      	; 0x8624 <__fp_mintl+0x18>
    8620:	99 27       	eor	r25, r25
    8622:	0d c0       	rjmp	.+26     	; 0x863e <__fp_mintl+0x32>
    8624:	90 51       	subi	r25, 0x10	; 16
    8626:	86 2b       	or	r24, r22
    8628:	70 e0       	ldi	r23, 0x00	; 0
    862a:	60 e0       	ldi	r22, 0x00	; 0
    862c:	2a f0       	brmi	.+10     	; 0x8638 <__fp_mintl+0x2c>
    862e:	9a 95       	dec	r25
    8630:	66 0f       	add	r22, r22
    8632:	77 1f       	adc	r23, r23
    8634:	88 1f       	adc	r24, r24
    8636:	da f7       	brpl	.-10     	; 0x862e <__fp_mintl+0x22>
    8638:	88 0f       	add	r24, r24
    863a:	96 95       	lsr	r25
    863c:	87 95       	ror	r24
    863e:	97 f9       	bld	r25, 7
    8640:	08 95       	ret

00008642 <__fp_mpack>:
    8642:	9f 3f       	cpi	r25, 0xFF	; 255
    8644:	31 f0       	breq	.+12     	; 0x8652 <__fp_mpack_finite+0xc>

00008646 <__fp_mpack_finite>:
    8646:	91 50       	subi	r25, 0x01	; 1
    8648:	20 f4       	brcc	.+8      	; 0x8652 <__fp_mpack_finite+0xc>
    864a:	87 95       	ror	r24
    864c:	77 95       	ror	r23
    864e:	67 95       	ror	r22
    8650:	b7 95       	ror	r27
    8652:	88 0f       	add	r24, r24
    8654:	91 1d       	adc	r25, r1
    8656:	96 95       	lsr	r25
    8658:	87 95       	ror	r24
    865a:	97 f9       	bld	r25, 7
    865c:	08 95       	ret

0000865e <__fp_nan>:
    865e:	9f ef       	ldi	r25, 0xFF	; 255
    8660:	80 ec       	ldi	r24, 0xC0	; 192
    8662:	08 95       	ret

00008664 <__fp_powser>:
    8664:	df 93       	push	r29
    8666:	cf 93       	push	r28
    8668:	1f 93       	push	r17
    866a:	0f 93       	push	r16
    866c:	ff 92       	push	r15
    866e:	ef 92       	push	r14
    8670:	df 92       	push	r13
    8672:	7b 01       	movw	r14, r22
    8674:	8c 01       	movw	r16, r24
    8676:	68 94       	set
    8678:	05 c0       	rjmp	.+10     	; 0x8684 <__fp_powser+0x20>
    867a:	da 2e       	mov	r13, r26
    867c:	ef 01       	movw	r28, r30
    867e:	8d d1       	rcall	.+794    	; 0x899a <__mulsf3x>
    8680:	fe 01       	movw	r30, r28
    8682:	e8 94       	clt
    8684:	a5 91       	lpm	r26, Z+
    8686:	25 91       	lpm	r18, Z+
    8688:	35 91       	lpm	r19, Z+
    868a:	45 91       	lpm	r20, Z+
    868c:	55 91       	lpm	r21, Z+
    868e:	ae f3       	brts	.-22     	; 0x867a <__fp_powser+0x16>
    8690:	ef 01       	movw	r28, r30
    8692:	27 de       	rcall	.-946    	; 0x82e2 <__addsf3x>
    8694:	fe 01       	movw	r30, r28
    8696:	97 01       	movw	r18, r14
    8698:	a8 01       	movw	r20, r16
    869a:	da 94       	dec	r13
    869c:	79 f7       	brne	.-34     	; 0x867c <__fp_powser+0x18>
    869e:	df 90       	pop	r13
    86a0:	ef 90       	pop	r14
    86a2:	ff 90       	pop	r15
    86a4:	0f 91       	pop	r16
    86a6:	1f 91       	pop	r17
    86a8:	cf 91       	pop	r28
    86aa:	df 91       	pop	r29
    86ac:	08 95       	ret

000086ae <__fp_pscA>:
    86ae:	00 24       	eor	r0, r0
    86b0:	0a 94       	dec	r0
    86b2:	16 16       	cp	r1, r22
    86b4:	17 06       	cpc	r1, r23
    86b6:	18 06       	cpc	r1, r24
    86b8:	09 06       	cpc	r0, r25
    86ba:	08 95       	ret

000086bc <__fp_pscB>:
    86bc:	00 24       	eor	r0, r0
    86be:	0a 94       	dec	r0
    86c0:	12 16       	cp	r1, r18
    86c2:	13 06       	cpc	r1, r19
    86c4:	14 06       	cpc	r1, r20
    86c6:	05 06       	cpc	r0, r21
    86c8:	08 95       	ret
    86ca:	c9 cf       	rjmp	.-110    	; 0x865e <__fp_nan>

000086cc <__fp_rempio2>:
    86cc:	50 d0       	rcall	.+160    	; 0x876e <__fp_splitA>
    86ce:	e8 f3       	brcs	.-6      	; 0x86ca <__fp_pscB+0xe>
    86d0:	e8 94       	clt
    86d2:	e0 e0       	ldi	r30, 0x00	; 0
    86d4:	bb 27       	eor	r27, r27
    86d6:	9f 57       	subi	r25, 0x7F	; 127
    86d8:	f0 f0       	brcs	.+60     	; 0x8716 <__fp_rempio2+0x4a>
    86da:	2a ed       	ldi	r18, 0xDA	; 218
    86dc:	3f e0       	ldi	r19, 0x0F	; 15
    86de:	49 ec       	ldi	r20, 0xC9	; 201
    86e0:	06 c0       	rjmp	.+12     	; 0x86ee <__fp_rempio2+0x22>
    86e2:	ee 0f       	add	r30, r30
    86e4:	bb 0f       	add	r27, r27
    86e6:	66 1f       	adc	r22, r22
    86e8:	77 1f       	adc	r23, r23
    86ea:	88 1f       	adc	r24, r24
    86ec:	28 f0       	brcs	.+10     	; 0x86f8 <__fp_rempio2+0x2c>
    86ee:	b2 3a       	cpi	r27, 0xA2	; 162
    86f0:	62 07       	cpc	r22, r18
    86f2:	73 07       	cpc	r23, r19
    86f4:	84 07       	cpc	r24, r20
    86f6:	28 f0       	brcs	.+10     	; 0x8702 <__fp_rempio2+0x36>
    86f8:	b2 5a       	subi	r27, 0xA2	; 162
    86fa:	62 0b       	sbc	r22, r18
    86fc:	73 0b       	sbc	r23, r19
    86fe:	84 0b       	sbc	r24, r20
    8700:	e3 95       	inc	r30
    8702:	9a 95       	dec	r25
    8704:	72 f7       	brpl	.-36     	; 0x86e2 <__fp_rempio2+0x16>
    8706:	80 38       	cpi	r24, 0x80	; 128
    8708:	30 f4       	brcc	.+12     	; 0x8716 <__fp_rempio2+0x4a>
    870a:	9a 95       	dec	r25
    870c:	bb 0f       	add	r27, r27
    870e:	66 1f       	adc	r22, r22
    8710:	77 1f       	adc	r23, r23
    8712:	88 1f       	adc	r24, r24
    8714:	d2 f7       	brpl	.-12     	; 0x870a <__fp_rempio2+0x3e>
    8716:	90 48       	sbci	r25, 0x80	; 128
    8718:	96 cf       	rjmp	.-212    	; 0x8646 <__fp_mpack_finite>

0000871a <__fp_round>:
    871a:	09 2e       	mov	r0, r25
    871c:	03 94       	inc	r0
    871e:	00 0c       	add	r0, r0
    8720:	11 f4       	brne	.+4      	; 0x8726 <__fp_round+0xc>
    8722:	88 23       	and	r24, r24
    8724:	52 f0       	brmi	.+20     	; 0x873a <__fp_round+0x20>
    8726:	bb 0f       	add	r27, r27
    8728:	40 f4       	brcc	.+16     	; 0x873a <__fp_round+0x20>
    872a:	bf 2b       	or	r27, r31
    872c:	11 f4       	brne	.+4      	; 0x8732 <__fp_round+0x18>
    872e:	60 ff       	sbrs	r22, 0
    8730:	04 c0       	rjmp	.+8      	; 0x873a <__fp_round+0x20>
    8732:	6f 5f       	subi	r22, 0xFF	; 255
    8734:	7f 4f       	sbci	r23, 0xFF	; 255
    8736:	8f 4f       	sbci	r24, 0xFF	; 255
    8738:	9f 4f       	sbci	r25, 0xFF	; 255
    873a:	08 95       	ret

0000873c <__fp_sinus>:
    873c:	ef 93       	push	r30
    873e:	e0 ff       	sbrs	r30, 0
    8740:	06 c0       	rjmp	.+12     	; 0x874e <__fp_sinus+0x12>
    8742:	a2 ea       	ldi	r26, 0xA2	; 162
    8744:	2a ed       	ldi	r18, 0xDA	; 218
    8746:	3f e0       	ldi	r19, 0x0F	; 15
    8748:	49 ec       	ldi	r20, 0xC9	; 201
    874a:	5f eb       	ldi	r21, 0xBF	; 191
    874c:	ca dd       	rcall	.-1132   	; 0x82e2 <__addsf3x>
    874e:	e5 df       	rcall	.-54     	; 0x871a <__fp_round>
    8750:	0f 90       	pop	r0
    8752:	03 94       	inc	r0
    8754:	01 fc       	sbrc	r0, 1
    8756:	90 58       	subi	r25, 0x80	; 128
    8758:	e5 e1       	ldi	r30, 0x15	; 21
    875a:	f2 e0       	ldi	r31, 0x02	; 2
    875c:	d2 c1       	rjmp	.+932    	; 0x8b02 <__fp_powsodd>

0000875e <__fp_split3>:
    875e:	57 fd       	sbrc	r21, 7
    8760:	90 58       	subi	r25, 0x80	; 128
    8762:	44 0f       	add	r20, r20
    8764:	55 1f       	adc	r21, r21
    8766:	59 f0       	breq	.+22     	; 0x877e <__fp_splitA+0x10>
    8768:	5f 3f       	cpi	r21, 0xFF	; 255
    876a:	71 f0       	breq	.+28     	; 0x8788 <__fp_splitA+0x1a>
    876c:	47 95       	ror	r20

0000876e <__fp_splitA>:
    876e:	88 0f       	add	r24, r24
    8770:	97 fb       	bst	r25, 7
    8772:	99 1f       	adc	r25, r25
    8774:	61 f0       	breq	.+24     	; 0x878e <__fp_splitA+0x20>
    8776:	9f 3f       	cpi	r25, 0xFF	; 255
    8778:	79 f0       	breq	.+30     	; 0x8798 <__fp_splitA+0x2a>
    877a:	87 95       	ror	r24
    877c:	08 95       	ret
    877e:	12 16       	cp	r1, r18
    8780:	13 06       	cpc	r1, r19
    8782:	14 06       	cpc	r1, r20
    8784:	55 1f       	adc	r21, r21
    8786:	f2 cf       	rjmp	.-28     	; 0x876c <__fp_split3+0xe>
    8788:	46 95       	lsr	r20
    878a:	f1 df       	rcall	.-30     	; 0x876e <__fp_splitA>
    878c:	08 c0       	rjmp	.+16     	; 0x879e <__fp_splitA+0x30>
    878e:	16 16       	cp	r1, r22
    8790:	17 06       	cpc	r1, r23
    8792:	18 06       	cpc	r1, r24
    8794:	99 1f       	adc	r25, r25
    8796:	f1 cf       	rjmp	.-30     	; 0x877a <__fp_splitA+0xc>
    8798:	86 95       	lsr	r24
    879a:	71 05       	cpc	r23, r1
    879c:	61 05       	cpc	r22, r1
    879e:	08 94       	sec
    87a0:	08 95       	ret

000087a2 <__fp_trunc>:
    87a2:	e5 df       	rcall	.-54     	; 0x876e <__fp_splitA>
    87a4:	a0 f0       	brcs	.+40     	; 0x87ce <__fp_trunc+0x2c>
    87a6:	be e7       	ldi	r27, 0x7E	; 126
    87a8:	b9 17       	cp	r27, r25
    87aa:	88 f4       	brcc	.+34     	; 0x87ce <__fp_trunc+0x2c>
    87ac:	bb 27       	eor	r27, r27
    87ae:	9f 38       	cpi	r25, 0x8F	; 143
    87b0:	60 f4       	brcc	.+24     	; 0x87ca <__fp_trunc+0x28>
    87b2:	16 16       	cp	r1, r22
    87b4:	b1 1d       	adc	r27, r1
    87b6:	67 2f       	mov	r22, r23
    87b8:	78 2f       	mov	r23, r24
    87ba:	88 27       	eor	r24, r24
    87bc:	98 5f       	subi	r25, 0xF8	; 248
    87be:	f7 cf       	rjmp	.-18     	; 0x87ae <__fp_trunc+0xc>
    87c0:	86 95       	lsr	r24
    87c2:	77 95       	ror	r23
    87c4:	67 95       	ror	r22
    87c6:	b1 1d       	adc	r27, r1
    87c8:	93 95       	inc	r25
    87ca:	96 39       	cpi	r25, 0x96	; 150
    87cc:	c8 f3       	brcs	.-14     	; 0x87c0 <__fp_trunc+0x1e>
    87ce:	08 95       	ret

000087d0 <__fp_zero>:
    87d0:	e8 94       	clt

000087d2 <__fp_szero>:
    87d2:	bb 27       	eor	r27, r27
    87d4:	66 27       	eor	r22, r22
    87d6:	77 27       	eor	r23, r23
    87d8:	cb 01       	movw	r24, r22
    87da:	97 f9       	bld	r25, 7
    87dc:	08 95       	ret

000087de <__gesf2>:
    87de:	ec de       	rcall	.-552    	; 0x85b8 <__fp_cmp>
    87e0:	08 f4       	brcc	.+2      	; 0x87e4 <__gesf2+0x6>
    87e2:	8f ef       	ldi	r24, 0xFF	; 255
    87e4:	08 95       	ret
    87e6:	63 df       	rcall	.-314    	; 0x86ae <__fp_pscA>
    87e8:	19 f0       	breq	.+6      	; 0x87f0 <__gesf2+0x12>
    87ea:	68 df       	rcall	.-304    	; 0x86bc <__fp_pscB>
    87ec:	09 f0       	breq	.+2      	; 0x87f0 <__gesf2+0x12>
    87ee:	37 cf       	rjmp	.-402    	; 0x865e <__fp_nan>
    87f0:	07 cf       	rjmp	.-498    	; 0x8600 <__fp_inf>
    87f2:	b9 01       	movw	r22, r18
    87f4:	ca 01       	movw	r24, r20
    87f6:	25 cf       	rjmp	.-438    	; 0x8642 <__fp_mpack>

000087f8 <hypot>:
    87f8:	9f 77       	andi	r25, 0x7F	; 127
    87fa:	5f 77       	andi	r21, 0x7F	; 127
    87fc:	b0 df       	rcall	.-160    	; 0x875e <__fp_split3>
    87fe:	98 f3       	brcs	.-26     	; 0x87e6 <__gesf2+0x8>
    8800:	99 23       	and	r25, r25
    8802:	b9 f3       	breq	.-18     	; 0x87f2 <__gesf2+0x14>
    8804:	55 23       	and	r21, r21
    8806:	b9 f3       	breq	.-18     	; 0x87f6 <__gesf2+0x18>
    8808:	ff 27       	eor	r31, r31
    880a:	95 17       	cp	r25, r21
    880c:	58 f4       	brcc	.+22     	; 0x8824 <hypot+0x2c>
    880e:	e5 2f       	mov	r30, r21
    8810:	e9 1b       	sub	r30, r25
    8812:	ed 30       	cpi	r30, 0x0D	; 13
    8814:	70 f7       	brcc	.-36     	; 0x87f2 <__gesf2+0x14>
    8816:	5e 3b       	cpi	r21, 0xBE	; 190
    8818:	10 f0       	brcs	.+4      	; 0x881e <hypot+0x26>
    881a:	f1 e4       	ldi	r31, 0x41	; 65
    881c:	1c c0       	rjmp	.+56     	; 0x8856 <hypot+0x5e>
    881e:	90 34       	cpi	r25, 0x40	; 64
    8820:	e0 f4       	brcc	.+56     	; 0x885a <hypot+0x62>
    8822:	0a c0       	rjmp	.+20     	; 0x8838 <hypot+0x40>
    8824:	e9 2f       	mov	r30, r25
    8826:	e5 1b       	sub	r30, r21
    8828:	ed 30       	cpi	r30, 0x0D	; 13
    882a:	28 f7       	brcc	.-54     	; 0x87f6 <__gesf2+0x18>
    882c:	9e 3b       	cpi	r25, 0xBE	; 190
    882e:	10 f0       	brcs	.+4      	; 0x8834 <hypot+0x3c>
    8830:	f1 e4       	ldi	r31, 0x41	; 65
    8832:	11 c0       	rjmp	.+34     	; 0x8856 <hypot+0x5e>
    8834:	50 34       	cpi	r21, 0x40	; 64
    8836:	88 f4       	brcc	.+34     	; 0x885a <hypot+0x62>
    8838:	f9 ea       	ldi	r31, 0xA9	; 169
    883a:	88 23       	and	r24, r24
    883c:	2a f0       	brmi	.+10     	; 0x8848 <hypot+0x50>
    883e:	9a 95       	dec	r25
    8840:	66 0f       	add	r22, r22
    8842:	77 1f       	adc	r23, r23
    8844:	88 1f       	adc	r24, r24
    8846:	da f7       	brpl	.-10     	; 0x883e <hypot+0x46>
    8848:	44 23       	and	r20, r20
    884a:	2a f0       	brmi	.+10     	; 0x8856 <hypot+0x5e>
    884c:	5a 95       	dec	r21
    884e:	22 0f       	add	r18, r18
    8850:	33 1f       	adc	r19, r19
    8852:	44 1f       	adc	r20, r20
    8854:	da f7       	brpl	.-10     	; 0x884c <hypot+0x54>
    8856:	9f 1b       	sub	r25, r31
    8858:	5f 1b       	sub	r21, r31
    885a:	ff 93       	push	r31
    885c:	1f 93       	push	r17
    885e:	0f 93       	push	r16
    8860:	ff 92       	push	r15
    8862:	ef 92       	push	r14
    8864:	79 01       	movw	r14, r18
    8866:	8a 01       	movw	r16, r20
    8868:	bb 27       	eor	r27, r27
    886a:	ab 2f       	mov	r26, r27
    886c:	9b 01       	movw	r18, r22
    886e:	ac 01       	movw	r20, r24
    8870:	96 d0       	rcall	.+300    	; 0x899e <__mulsf3_pse>
    8872:	97 01       	movw	r18, r14
    8874:	a8 01       	movw	r20, r16
    8876:	bf 93       	push	r27
    8878:	7b 01       	movw	r14, r22
    887a:	8c 01       	movw	r16, r24
    887c:	aa 27       	eor	r26, r26
    887e:	ba 2f       	mov	r27, r26
    8880:	b9 01       	movw	r22, r18
    8882:	ca 01       	movw	r24, r20
    8884:	8c d0       	rcall	.+280    	; 0x899e <__mulsf3_pse>
    8886:	af 91       	pop	r26
    8888:	97 01       	movw	r18, r14
    888a:	a8 01       	movw	r20, r16
    888c:	ef 90       	pop	r14
    888e:	ff 90       	pop	r15
    8890:	0f 91       	pop	r16
    8892:	1f 91       	pop	r17
    8894:	26 dd       	rcall	.-1460   	; 0x82e2 <__addsf3x>
    8896:	41 df       	rcall	.-382    	; 0x871a <__fp_round>
    8898:	e1 d0       	rcall	.+450    	; 0x8a5c <sqrt>
    889a:	4f 91       	pop	r20
    889c:	40 ff       	sbrs	r20, 0
    889e:	08 95       	ret
    88a0:	55 27       	eor	r21, r21
    88a2:	47 fd       	sbrc	r20, 7
    88a4:	50 95       	com	r21
    88a6:	09 c0       	rjmp	.+18     	; 0x88ba <ldexp>

000088a8 <inverse>:
    88a8:	9b 01       	movw	r18, r22
    88aa:	ac 01       	movw	r20, r24
    88ac:	60 e0       	ldi	r22, 0x00	; 0
    88ae:	70 e0       	ldi	r23, 0x00	; 0
    88b0:	80 e8       	ldi	r24, 0x80	; 128
    88b2:	9f e3       	ldi	r25, 0x3F	; 63
    88b4:	ab cd       	rjmp	.-1194   	; 0x840c <__divsf3>
    88b6:	a4 ce       	rjmp	.-696    	; 0x8600 <__fp_inf>
    88b8:	c4 ce       	rjmp	.-632    	; 0x8642 <__fp_mpack>

000088ba <ldexp>:
    88ba:	59 df       	rcall	.-334    	; 0x876e <__fp_splitA>
    88bc:	e8 f3       	brcs	.-6      	; 0x88b8 <inverse+0x10>
    88be:	99 23       	and	r25, r25
    88c0:	d9 f3       	breq	.-10     	; 0x88b8 <inverse+0x10>
    88c2:	94 0f       	add	r25, r20
    88c4:	51 1d       	adc	r21, r1
    88c6:	bb f3       	brvs	.-18     	; 0x88b6 <inverse+0xe>
    88c8:	91 50       	subi	r25, 0x01	; 1
    88ca:	50 40       	sbci	r21, 0x00	; 0
    88cc:	94 f0       	brlt	.+36     	; 0x88f2 <ldexp+0x38>
    88ce:	59 f0       	breq	.+22     	; 0x88e6 <ldexp+0x2c>
    88d0:	88 23       	and	r24, r24
    88d2:	32 f0       	brmi	.+12     	; 0x88e0 <ldexp+0x26>
    88d4:	66 0f       	add	r22, r22
    88d6:	77 1f       	adc	r23, r23
    88d8:	88 1f       	adc	r24, r24
    88da:	91 50       	subi	r25, 0x01	; 1
    88dc:	50 40       	sbci	r21, 0x00	; 0
    88de:	c1 f7       	brne	.-16     	; 0x88d0 <ldexp+0x16>
    88e0:	9e 3f       	cpi	r25, 0xFE	; 254
    88e2:	51 05       	cpc	r21, r1
    88e4:	44 f7       	brge	.-48     	; 0x88b6 <inverse+0xe>
    88e6:	88 0f       	add	r24, r24
    88e8:	91 1d       	adc	r25, r1
    88ea:	96 95       	lsr	r25
    88ec:	87 95       	ror	r24
    88ee:	97 f9       	bld	r25, 7
    88f0:	08 95       	ret
    88f2:	5f 3f       	cpi	r21, 0xFF	; 255
    88f4:	ac f0       	brlt	.+42     	; 0x8920 <ldexp+0x66>
    88f6:	98 3e       	cpi	r25, 0xE8	; 232
    88f8:	9c f0       	brlt	.+38     	; 0x8920 <ldexp+0x66>
    88fa:	bb 27       	eor	r27, r27
    88fc:	86 95       	lsr	r24
    88fe:	77 95       	ror	r23
    8900:	67 95       	ror	r22
    8902:	b7 95       	ror	r27
    8904:	08 f4       	brcc	.+2      	; 0x8908 <ldexp+0x4e>
    8906:	b1 60       	ori	r27, 0x01	; 1
    8908:	93 95       	inc	r25
    890a:	c1 f7       	brne	.-16     	; 0x88fc <ldexp+0x42>
    890c:	bb 0f       	add	r27, r27
    890e:	58 f7       	brcc	.-42     	; 0x88e6 <ldexp+0x2c>
    8910:	11 f4       	brne	.+4      	; 0x8916 <ldexp+0x5c>
    8912:	60 ff       	sbrs	r22, 0
    8914:	e8 cf       	rjmp	.-48     	; 0x88e6 <ldexp+0x2c>
    8916:	6f 5f       	subi	r22, 0xFF	; 255
    8918:	7f 4f       	sbci	r23, 0xFF	; 255
    891a:	8f 4f       	sbci	r24, 0xFF	; 255
    891c:	9f 4f       	sbci	r25, 0xFF	; 255
    891e:	e3 cf       	rjmp	.-58     	; 0x88e6 <ldexp+0x2c>
    8920:	58 cf       	rjmp	.-336    	; 0x87d2 <__fp_szero>

00008922 <lround>:
    8922:	25 df       	rcall	.-438    	; 0x876e <__fp_splitA>
    8924:	58 f1       	brcs	.+86     	; 0x897c <lround+0x5a>
    8926:	9e 57       	subi	r25, 0x7E	; 126
    8928:	58 f1       	brcs	.+86     	; 0x8980 <lround+0x5e>
    892a:	98 51       	subi	r25, 0x18	; 24
    892c:	a0 f0       	brcs	.+40     	; 0x8956 <lround+0x34>
    892e:	e9 f0       	breq	.+58     	; 0x896a <lround+0x48>
    8930:	98 30       	cpi	r25, 0x08	; 8
    8932:	20 f5       	brcc	.+72     	; 0x897c <lround+0x5a>
    8934:	09 2e       	mov	r0, r25
    8936:	99 27       	eor	r25, r25
    8938:	66 0f       	add	r22, r22
    893a:	77 1f       	adc	r23, r23
    893c:	88 1f       	adc	r24, r24
    893e:	99 1f       	adc	r25, r25
    8940:	0a 94       	dec	r0
    8942:	d1 f7       	brne	.-12     	; 0x8938 <lround+0x16>
    8944:	12 c0       	rjmp	.+36     	; 0x896a <lround+0x48>
    8946:	06 2e       	mov	r0, r22
    8948:	67 2f       	mov	r22, r23
    894a:	78 2f       	mov	r23, r24
    894c:	88 27       	eor	r24, r24
    894e:	98 5f       	subi	r25, 0xF8	; 248
    8950:	11 f4       	brne	.+4      	; 0x8956 <lround+0x34>
    8952:	00 0c       	add	r0, r0
    8954:	07 c0       	rjmp	.+14     	; 0x8964 <lround+0x42>
    8956:	99 3f       	cpi	r25, 0xF9	; 249
    8958:	b4 f3       	brlt	.-20     	; 0x8946 <lround+0x24>
    895a:	86 95       	lsr	r24
    895c:	77 95       	ror	r23
    895e:	67 95       	ror	r22
    8960:	93 95       	inc	r25
    8962:	d9 f7       	brne	.-10     	; 0x895a <lround+0x38>
    8964:	61 1d       	adc	r22, r1
    8966:	71 1d       	adc	r23, r1
    8968:	81 1d       	adc	r24, r1
    896a:	3e f4       	brtc	.+14     	; 0x897a <lround+0x58>
    896c:	90 95       	com	r25
    896e:	80 95       	com	r24
    8970:	70 95       	com	r23
    8972:	61 95       	neg	r22
    8974:	7f 4f       	sbci	r23, 0xFF	; 255
    8976:	8f 4f       	sbci	r24, 0xFF	; 255
    8978:	9f 4f       	sbci	r25, 0xFF	; 255
    897a:	08 95       	ret
    897c:	68 94       	set
    897e:	29 cf       	rjmp	.-430    	; 0x87d2 <__fp_szero>
    8980:	27 cf       	rjmp	.-434    	; 0x87d0 <__fp_zero>

00008982 <__mulsf3>:
    8982:	0b d0       	rcall	.+22     	; 0x899a <__mulsf3x>
    8984:	ca ce       	rjmp	.-620    	; 0x871a <__fp_round>
    8986:	93 de       	rcall	.-730    	; 0x86ae <__fp_pscA>
    8988:	28 f0       	brcs	.+10     	; 0x8994 <__mulsf3+0x12>
    898a:	98 de       	rcall	.-720    	; 0x86bc <__fp_pscB>
    898c:	18 f0       	brcs	.+6      	; 0x8994 <__mulsf3+0x12>
    898e:	95 23       	and	r25, r21
    8990:	09 f0       	breq	.+2      	; 0x8994 <__mulsf3+0x12>
    8992:	36 ce       	rjmp	.-916    	; 0x8600 <__fp_inf>
    8994:	64 ce       	rjmp	.-824    	; 0x865e <__fp_nan>
    8996:	11 24       	eor	r1, r1
    8998:	1c cf       	rjmp	.-456    	; 0x87d2 <__fp_szero>

0000899a <__mulsf3x>:
    899a:	e1 de       	rcall	.-574    	; 0x875e <__fp_split3>
    899c:	a0 f3       	brcs	.-24     	; 0x8986 <__mulsf3+0x4>

0000899e <__mulsf3_pse>:
    899e:	95 9f       	mul	r25, r21
    89a0:	d1 f3       	breq	.-12     	; 0x8996 <__mulsf3+0x14>
    89a2:	95 0f       	add	r25, r21
    89a4:	50 e0       	ldi	r21, 0x00	; 0
    89a6:	55 1f       	adc	r21, r21
    89a8:	62 9f       	mul	r22, r18
    89aa:	f0 01       	movw	r30, r0
    89ac:	72 9f       	mul	r23, r18
    89ae:	bb 27       	eor	r27, r27
    89b0:	f0 0d       	add	r31, r0
    89b2:	b1 1d       	adc	r27, r1
    89b4:	63 9f       	mul	r22, r19
    89b6:	aa 27       	eor	r26, r26
    89b8:	f0 0d       	add	r31, r0
    89ba:	b1 1d       	adc	r27, r1
    89bc:	aa 1f       	adc	r26, r26
    89be:	64 9f       	mul	r22, r20
    89c0:	66 27       	eor	r22, r22
    89c2:	b0 0d       	add	r27, r0
    89c4:	a1 1d       	adc	r26, r1
    89c6:	66 1f       	adc	r22, r22
    89c8:	82 9f       	mul	r24, r18
    89ca:	22 27       	eor	r18, r18
    89cc:	b0 0d       	add	r27, r0
    89ce:	a1 1d       	adc	r26, r1
    89d0:	62 1f       	adc	r22, r18
    89d2:	73 9f       	mul	r23, r19
    89d4:	b0 0d       	add	r27, r0
    89d6:	a1 1d       	adc	r26, r1
    89d8:	62 1f       	adc	r22, r18
    89da:	83 9f       	mul	r24, r19
    89dc:	a0 0d       	add	r26, r0
    89de:	61 1d       	adc	r22, r1
    89e0:	22 1f       	adc	r18, r18
    89e2:	74 9f       	mul	r23, r20
    89e4:	33 27       	eor	r19, r19
    89e6:	a0 0d       	add	r26, r0
    89e8:	61 1d       	adc	r22, r1
    89ea:	23 1f       	adc	r18, r19
    89ec:	84 9f       	mul	r24, r20
    89ee:	60 0d       	add	r22, r0
    89f0:	21 1d       	adc	r18, r1
    89f2:	82 2f       	mov	r24, r18
    89f4:	76 2f       	mov	r23, r22
    89f6:	6a 2f       	mov	r22, r26
    89f8:	11 24       	eor	r1, r1
    89fa:	9f 57       	subi	r25, 0x7F	; 127
    89fc:	50 40       	sbci	r21, 0x00	; 0
    89fe:	8a f0       	brmi	.+34     	; 0x8a22 <__mulsf3_pse+0x84>
    8a00:	e1 f0       	breq	.+56     	; 0x8a3a <__mulsf3_pse+0x9c>
    8a02:	88 23       	and	r24, r24
    8a04:	4a f0       	brmi	.+18     	; 0x8a18 <__mulsf3_pse+0x7a>
    8a06:	ee 0f       	add	r30, r30
    8a08:	ff 1f       	adc	r31, r31
    8a0a:	bb 1f       	adc	r27, r27
    8a0c:	66 1f       	adc	r22, r22
    8a0e:	77 1f       	adc	r23, r23
    8a10:	88 1f       	adc	r24, r24
    8a12:	91 50       	subi	r25, 0x01	; 1
    8a14:	50 40       	sbci	r21, 0x00	; 0
    8a16:	a9 f7       	brne	.-22     	; 0x8a02 <__mulsf3_pse+0x64>
    8a18:	9e 3f       	cpi	r25, 0xFE	; 254
    8a1a:	51 05       	cpc	r21, r1
    8a1c:	70 f0       	brcs	.+28     	; 0x8a3a <__mulsf3_pse+0x9c>
    8a1e:	f0 cd       	rjmp	.-1056   	; 0x8600 <__fp_inf>
    8a20:	d8 ce       	rjmp	.-592    	; 0x87d2 <__fp_szero>
    8a22:	5f 3f       	cpi	r21, 0xFF	; 255
    8a24:	ec f3       	brlt	.-6      	; 0x8a20 <__mulsf3_pse+0x82>
    8a26:	98 3e       	cpi	r25, 0xE8	; 232
    8a28:	dc f3       	brlt	.-10     	; 0x8a20 <__mulsf3_pse+0x82>
    8a2a:	86 95       	lsr	r24
    8a2c:	77 95       	ror	r23
    8a2e:	67 95       	ror	r22
    8a30:	b7 95       	ror	r27
    8a32:	f7 95       	ror	r31
    8a34:	e7 95       	ror	r30
    8a36:	9f 5f       	subi	r25, 0xFF	; 255
    8a38:	c1 f7       	brne	.-16     	; 0x8a2a <__mulsf3_pse+0x8c>
    8a3a:	fe 2b       	or	r31, r30
    8a3c:	88 0f       	add	r24, r24
    8a3e:	91 1d       	adc	r25, r1
    8a40:	96 95       	lsr	r25
    8a42:	87 95       	ror	r24
    8a44:	97 f9       	bld	r25, 7
    8a46:	08 95       	ret

00008a48 <sin>:
    8a48:	9f 93       	push	r25
    8a4a:	40 de       	rcall	.-896    	; 0x86cc <__fp_rempio2>
    8a4c:	0f 90       	pop	r0
    8a4e:	07 fc       	sbrc	r0, 7
    8a50:	ee 5f       	subi	r30, 0xFE	; 254
    8a52:	74 ce       	rjmp	.-792    	; 0x873c <__fp_sinus>
    8a54:	11 f4       	brne	.+4      	; 0x8a5a <sin+0x12>
    8a56:	0e f4       	brtc	.+2      	; 0x8a5a <sin+0x12>
    8a58:	02 ce       	rjmp	.-1020   	; 0x865e <__fp_nan>
    8a5a:	f3 cd       	rjmp	.-1050   	; 0x8642 <__fp_mpack>

00008a5c <sqrt>:
    8a5c:	88 de       	rcall	.-752    	; 0x876e <__fp_splitA>
    8a5e:	d0 f3       	brcs	.-12     	; 0x8a54 <sin+0xc>
    8a60:	99 23       	and	r25, r25
    8a62:	d9 f3       	breq	.-10     	; 0x8a5a <sin+0x12>
    8a64:	ce f3       	brts	.-14     	; 0x8a58 <sin+0x10>
    8a66:	9f 57       	subi	r25, 0x7F	; 127
    8a68:	55 0b       	sbc	r21, r21
    8a6a:	87 ff       	sbrs	r24, 7
    8a6c:	43 d0       	rcall	.+134    	; 0x8af4 <__fp_norm2>
    8a6e:	00 24       	eor	r0, r0
    8a70:	a0 e6       	ldi	r26, 0x60	; 96
    8a72:	40 ea       	ldi	r20, 0xA0	; 160
    8a74:	90 01       	movw	r18, r0
    8a76:	80 58       	subi	r24, 0x80	; 128
    8a78:	56 95       	lsr	r21
    8a7a:	97 95       	ror	r25
    8a7c:	28 f4       	brcc	.+10     	; 0x8a88 <sqrt+0x2c>
    8a7e:	80 5c       	subi	r24, 0xC0	; 192
    8a80:	66 0f       	add	r22, r22
    8a82:	77 1f       	adc	r23, r23
    8a84:	88 1f       	adc	r24, r24
    8a86:	20 f0       	brcs	.+8      	; 0x8a90 <sqrt+0x34>
    8a88:	26 17       	cp	r18, r22
    8a8a:	37 07       	cpc	r19, r23
    8a8c:	48 07       	cpc	r20, r24
    8a8e:	30 f4       	brcc	.+12     	; 0x8a9c <sqrt+0x40>
    8a90:	62 1b       	sub	r22, r18
    8a92:	73 0b       	sbc	r23, r19
    8a94:	84 0b       	sbc	r24, r20
    8a96:	20 29       	or	r18, r0
    8a98:	31 29       	or	r19, r1
    8a9a:	4a 2b       	or	r20, r26
    8a9c:	a6 95       	lsr	r26
    8a9e:	17 94       	ror	r1
    8aa0:	07 94       	ror	r0
    8aa2:	20 25       	eor	r18, r0
    8aa4:	31 25       	eor	r19, r1
    8aa6:	4a 27       	eor	r20, r26
    8aa8:	58 f7       	brcc	.-42     	; 0x8a80 <sqrt+0x24>
    8aaa:	66 0f       	add	r22, r22
    8aac:	77 1f       	adc	r23, r23
    8aae:	88 1f       	adc	r24, r24
    8ab0:	20 f0       	brcs	.+8      	; 0x8aba <sqrt+0x5e>
    8ab2:	26 17       	cp	r18, r22
    8ab4:	37 07       	cpc	r19, r23
    8ab6:	48 07       	cpc	r20, r24
    8ab8:	30 f4       	brcc	.+12     	; 0x8ac6 <sqrt+0x6a>
    8aba:	62 0b       	sbc	r22, r18
    8abc:	73 0b       	sbc	r23, r19
    8abe:	84 0b       	sbc	r24, r20
    8ac0:	20 0d       	add	r18, r0
    8ac2:	31 1d       	adc	r19, r1
    8ac4:	41 1d       	adc	r20, r1
    8ac6:	a0 95       	com	r26
    8ac8:	81 f7       	brne	.-32     	; 0x8aaa <sqrt+0x4e>
    8aca:	b9 01       	movw	r22, r18
    8acc:	84 2f       	mov	r24, r20
    8ace:	91 58       	subi	r25, 0x81	; 129
    8ad0:	88 0f       	add	r24, r24
    8ad2:	96 95       	lsr	r25
    8ad4:	87 95       	ror	r24
    8ad6:	08 95       	ret

00008ad8 <square>:
    8ad8:	9b 01       	movw	r18, r22
    8ada:	ac 01       	movw	r20, r24
    8adc:	52 cf       	rjmp	.-348    	; 0x8982 <__mulsf3>

00008ade <trunc>:
    8ade:	61 de       	rcall	.-830    	; 0x87a2 <__fp_trunc>
    8ae0:	20 f0       	brcs	.+8      	; 0x8aea <trunc+0xc>
    8ae2:	9f 37       	cpi	r25, 0x7F	; 127
    8ae4:	08 f4       	brcc	.+2      	; 0x8ae8 <trunc+0xa>
    8ae6:	75 ce       	rjmp	.-790    	; 0x87d2 <__fp_szero>
    8ae8:	91 cd       	rjmp	.-1246   	; 0x860c <__fp_mintl>
    8aea:	ab cd       	rjmp	.-1194   	; 0x8642 <__fp_mpack>

00008aec <__unordsf2>:
    8aec:	65 dd       	rcall	.-1334   	; 0x85b8 <__fp_cmp>
    8aee:	88 0b       	sbc	r24, r24
    8af0:	99 0b       	sbc	r25, r25
    8af2:	08 95       	ret

00008af4 <__fp_norm2>:
    8af4:	91 50       	subi	r25, 0x01	; 1
    8af6:	50 40       	sbci	r21, 0x00	; 0
    8af8:	66 0f       	add	r22, r22
    8afa:	77 1f       	adc	r23, r23
    8afc:	88 1f       	adc	r24, r24
    8afe:	d2 f7       	brpl	.-12     	; 0x8af4 <__fp_norm2>
    8b00:	08 95       	ret

00008b02 <__fp_powsodd>:
    8b02:	9f 93       	push	r25
    8b04:	8f 93       	push	r24
    8b06:	7f 93       	push	r23
    8b08:	6f 93       	push	r22
    8b0a:	ff 93       	push	r31
    8b0c:	ef 93       	push	r30
    8b0e:	9b 01       	movw	r18, r22
    8b10:	ac 01       	movw	r20, r24
    8b12:	37 df       	rcall	.-402    	; 0x8982 <__mulsf3>
    8b14:	ef 91       	pop	r30
    8b16:	ff 91       	pop	r31
    8b18:	a5 dd       	rcall	.-1206   	; 0x8664 <__fp_powser>
    8b1a:	2f 91       	pop	r18
    8b1c:	3f 91       	pop	r19
    8b1e:	4f 91       	pop	r20
    8b20:	5f 91       	pop	r21
    8b22:	2f cf       	rjmp	.-418    	; 0x8982 <__mulsf3>

00008b24 <__mulsi3>:
    8b24:	62 9f       	mul	r22, r18
    8b26:	d0 01       	movw	r26, r0
    8b28:	73 9f       	mul	r23, r19
    8b2a:	f0 01       	movw	r30, r0
    8b2c:	82 9f       	mul	r24, r18
    8b2e:	e0 0d       	add	r30, r0
    8b30:	f1 1d       	adc	r31, r1
    8b32:	64 9f       	mul	r22, r20
    8b34:	e0 0d       	add	r30, r0
    8b36:	f1 1d       	adc	r31, r1
    8b38:	92 9f       	mul	r25, r18
    8b3a:	f0 0d       	add	r31, r0
    8b3c:	83 9f       	mul	r24, r19
    8b3e:	f0 0d       	add	r31, r0
    8b40:	74 9f       	mul	r23, r20
    8b42:	f0 0d       	add	r31, r0
    8b44:	65 9f       	mul	r22, r21
    8b46:	f0 0d       	add	r31, r0
    8b48:	99 27       	eor	r25, r25
    8b4a:	72 9f       	mul	r23, r18
    8b4c:	b0 0d       	add	r27, r0
    8b4e:	e1 1d       	adc	r30, r1
    8b50:	f9 1f       	adc	r31, r25
    8b52:	63 9f       	mul	r22, r19
    8b54:	b0 0d       	add	r27, r0
    8b56:	e1 1d       	adc	r30, r1
    8b58:	f9 1f       	adc	r31, r25
    8b5a:	bd 01       	movw	r22, r26
    8b5c:	cf 01       	movw	r24, r30
    8b5e:	11 24       	eor	r1, r1
    8b60:	08 95       	ret

00008b62 <__udivmodsi4>:
    8b62:	a1 e2       	ldi	r26, 0x21	; 33
    8b64:	1a 2e       	mov	r1, r26
    8b66:	aa 1b       	sub	r26, r26
    8b68:	bb 1b       	sub	r27, r27
    8b6a:	fd 01       	movw	r30, r26
    8b6c:	0d c0       	rjmp	.+26     	; 0x8b88 <__udivmodsi4_ep>

00008b6e <__udivmodsi4_loop>:
    8b6e:	aa 1f       	adc	r26, r26
    8b70:	bb 1f       	adc	r27, r27
    8b72:	ee 1f       	adc	r30, r30
    8b74:	ff 1f       	adc	r31, r31
    8b76:	a2 17       	cp	r26, r18
    8b78:	b3 07       	cpc	r27, r19
    8b7a:	e4 07       	cpc	r30, r20
    8b7c:	f5 07       	cpc	r31, r21
    8b7e:	20 f0       	brcs	.+8      	; 0x8b88 <__udivmodsi4_ep>
    8b80:	a2 1b       	sub	r26, r18
    8b82:	b3 0b       	sbc	r27, r19
    8b84:	e4 0b       	sbc	r30, r20
    8b86:	f5 0b       	sbc	r31, r21

00008b88 <__udivmodsi4_ep>:
    8b88:	66 1f       	adc	r22, r22
    8b8a:	77 1f       	adc	r23, r23
    8b8c:	88 1f       	adc	r24, r24
    8b8e:	99 1f       	adc	r25, r25
    8b90:	1a 94       	dec	r1
    8b92:	69 f7       	brne	.-38     	; 0x8b6e <__udivmodsi4_loop>
    8b94:	60 95       	com	r22
    8b96:	70 95       	com	r23
    8b98:	80 95       	com	r24
    8b9a:	90 95       	com	r25
    8b9c:	9b 01       	movw	r18, r22
    8b9e:	ac 01       	movw	r20, r24
    8ba0:	bd 01       	movw	r22, r26
    8ba2:	cf 01       	movw	r24, r30
    8ba4:	08 95       	ret

00008ba6 <__prologue_saves__>:
    8ba6:	2f 92       	push	r2
    8ba8:	3f 92       	push	r3
    8baa:	4f 92       	push	r4
    8bac:	5f 92       	push	r5
    8bae:	6f 92       	push	r6
    8bb0:	7f 92       	push	r7
    8bb2:	8f 92       	push	r8
    8bb4:	9f 92       	push	r9
    8bb6:	af 92       	push	r10
    8bb8:	bf 92       	push	r11
    8bba:	cf 92       	push	r12
    8bbc:	df 92       	push	r13
    8bbe:	ef 92       	push	r14
    8bc0:	ff 92       	push	r15
    8bc2:	0f 93       	push	r16
    8bc4:	1f 93       	push	r17
    8bc6:	cf 93       	push	r28
    8bc8:	df 93       	push	r29
    8bca:	cd b7       	in	r28, 0x3d	; 61
    8bcc:	de b7       	in	r29, 0x3e	; 62
    8bce:	ca 1b       	sub	r28, r26
    8bd0:	db 0b       	sbc	r29, r27
    8bd2:	0f b6       	in	r0, 0x3f	; 63
    8bd4:	f8 94       	cli
    8bd6:	de bf       	out	0x3e, r29	; 62
    8bd8:	0f be       	out	0x3f, r0	; 63
    8bda:	cd bf       	out	0x3d, r28	; 61
    8bdc:	19 94       	eijmp

00008bde <__epilogue_restores__>:
    8bde:	2a 88       	ldd	r2, Y+18	; 0x12
    8be0:	39 88       	ldd	r3, Y+17	; 0x11
    8be2:	48 88       	ldd	r4, Y+16	; 0x10
    8be4:	5f 84       	ldd	r5, Y+15	; 0x0f
    8be6:	6e 84       	ldd	r6, Y+14	; 0x0e
    8be8:	7d 84       	ldd	r7, Y+13	; 0x0d
    8bea:	8c 84       	ldd	r8, Y+12	; 0x0c
    8bec:	9b 84       	ldd	r9, Y+11	; 0x0b
    8bee:	aa 84       	ldd	r10, Y+10	; 0x0a
    8bf0:	b9 84       	ldd	r11, Y+9	; 0x09
    8bf2:	c8 84       	ldd	r12, Y+8	; 0x08
    8bf4:	df 80       	ldd	r13, Y+7	; 0x07
    8bf6:	ee 80       	ldd	r14, Y+6	; 0x06
    8bf8:	fd 80       	ldd	r15, Y+5	; 0x05
    8bfa:	0c 81       	ldd	r16, Y+4	; 0x04
    8bfc:	1b 81       	ldd	r17, Y+3	; 0x03
    8bfe:	aa 81       	ldd	r26, Y+2	; 0x02
    8c00:	b9 81       	ldd	r27, Y+1	; 0x01
    8c02:	ce 0f       	add	r28, r30
    8c04:	d1 1d       	adc	r29, r1
    8c06:	0f b6       	in	r0, 0x3f	; 63
    8c08:	f8 94       	cli
    8c0a:	de bf       	out	0x3e, r29	; 62
    8c0c:	0f be       	out	0x3f, r0	; 63
    8c0e:	cd bf       	out	0x3d, r28	; 61
    8c10:	ed 01       	movw	r28, r26
    8c12:	08 95       	ret

00008c14 <strtod>:
    8c14:	8f 92       	push	r8
    8c16:	9f 92       	push	r9
    8c18:	af 92       	push	r10
    8c1a:	bf 92       	push	r11
    8c1c:	cf 92       	push	r12
    8c1e:	df 92       	push	r13
    8c20:	ef 92       	push	r14
    8c22:	ff 92       	push	r15
    8c24:	0f 93       	push	r16
    8c26:	1f 93       	push	r17
    8c28:	cf 93       	push	r28
    8c2a:	df 93       	push	r29
    8c2c:	ec 01       	movw	r28, r24
    8c2e:	5b 01       	movw	r10, r22
    8c30:	61 15       	cp	r22, r1
    8c32:	71 05       	cpc	r23, r1
    8c34:	19 f0       	breq	.+6      	; 0x8c3c <strtod+0x28>
    8c36:	fb 01       	movw	r30, r22
    8c38:	80 83       	st	Z, r24
    8c3a:	91 83       	std	Z+1, r25	; 0x01
    8c3c:	f9 90       	ld	r15, Y+
    8c3e:	8f 2d       	mov	r24, r15
    8c40:	90 e0       	ldi	r25, 0x00	; 0
    8c42:	0e 94 6e 48 	call	0x90dc	; 0x90dc <isspace>
    8c46:	89 2b       	or	r24, r25
    8c48:	c9 f7       	brne	.-14     	; 0x8c3c <strtod+0x28>
    8c4a:	fd e2       	ldi	r31, 0x2D	; 45
    8c4c:	ff 16       	cp	r15, r31
    8c4e:	21 f4       	brne	.+8      	; 0x8c58 <strtod+0x44>
    8c50:	f9 90       	ld	r15, Y+
    8c52:	ee 24       	eor	r14, r14
    8c54:	e3 94       	inc	r14
    8c56:	05 c0       	rjmp	.+10     	; 0x8c62 <strtod+0x4e>
    8c58:	2b e2       	ldi	r18, 0x2B	; 43
    8c5a:	f2 16       	cp	r15, r18
    8c5c:	09 f4       	brne	.+2      	; 0x8c60 <strtod+0x4c>
    8c5e:	f9 90       	ld	r15, Y+
    8c60:	ee 24       	eor	r14, r14
    8c62:	8e 01       	movw	r16, r28
    8c64:	01 50       	subi	r16, 0x01	; 1
    8c66:	10 40       	sbci	r17, 0x00	; 0
    8c68:	c8 01       	movw	r24, r16
    8c6a:	64 e7       	ldi	r22, 0x74	; 116
    8c6c:	7d e1       	ldi	r23, 0x1D	; 29
    8c6e:	43 e0       	ldi	r20, 0x03	; 3
    8c70:	50 e0       	ldi	r21, 0x00	; 0
    8c72:	0e 94 7e 48 	call	0x90fc	; 0x90fc <strncasecmp_P>
    8c76:	89 2b       	or	r24, r25
    8c78:	01 f5       	brne	.+64     	; 0x8cba <strtod+0xa6>
    8c7a:	8e 01       	movw	r16, r28
    8c7c:	0e 5f       	subi	r16, 0xFE	; 254
    8c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    8c80:	c8 01       	movw	r24, r16
    8c82:	67 e7       	ldi	r22, 0x77	; 119
    8c84:	7d e1       	ldi	r23, 0x1D	; 29
    8c86:	45 e0       	ldi	r20, 0x05	; 5
    8c88:	50 e0       	ldi	r21, 0x00	; 0
    8c8a:	0e 94 7e 48 	call	0x90fc	; 0x90fc <strncasecmp_P>
    8c8e:	89 2b       	or	r24, r25
    8c90:	19 f4       	brne	.+6      	; 0x8c98 <strtod+0x84>
    8c92:	8e 01       	movw	r16, r28
    8c94:	09 5f       	subi	r16, 0xF9	; 249
    8c96:	1f 4f       	sbci	r17, 0xFF	; 255
    8c98:	a1 14       	cp	r10, r1
    8c9a:	b1 04       	cpc	r11, r1
    8c9c:	19 f0       	breq	.+6      	; 0x8ca4 <strtod+0x90>
    8c9e:	f5 01       	movw	r30, r10
    8ca0:	00 83       	st	Z, r16
    8ca2:	11 83       	std	Z+1, r17	; 0x01
    8ca4:	e0 fc       	sbrc	r14, 0
    8ca6:	04 c0       	rjmp	.+8      	; 0x8cb0 <strtod+0x9c>
    8ca8:	70 e0       	ldi	r23, 0x00	; 0
    8caa:	90 e0       	ldi	r25, 0x00	; 0
    8cac:	80 e8       	ldi	r24, 0x80	; 128
    8cae:	14 c0       	rjmp	.+40     	; 0x8cd8 <strtod+0xc4>
    8cb0:	70 e0       	ldi	r23, 0x00	; 0
    8cb2:	90 e0       	ldi	r25, 0x00	; 0
    8cb4:	80 e8       	ldi	r24, 0x80	; 128
    8cb6:	6f ef       	ldi	r22, 0xFF	; 255
    8cb8:	08 c1       	rjmp	.+528    	; 0x8eca <strtod+0x2b6>
    8cba:	c8 01       	movw	r24, r16
    8cbc:	6c e7       	ldi	r22, 0x7C	; 124
    8cbe:	7d e1       	ldi	r23, 0x1D	; 29
    8cc0:	43 e0       	ldi	r20, 0x03	; 3
    8cc2:	50 e0       	ldi	r21, 0x00	; 0
    8cc4:	0e 94 7e 48 	call	0x90fc	; 0x90fc <strncasecmp_P>
    8cc8:	89 2b       	or	r24, r25
    8cca:	69 f4       	brne	.+26     	; 0x8ce6 <strtod+0xd2>
    8ccc:	a1 14       	cp	r10, r1
    8cce:	b1 04       	cpc	r11, r1
    8cd0:	29 f4       	brne	.+10     	; 0x8cdc <strtod+0xc8>
    8cd2:	70 e0       	ldi	r23, 0x00	; 0
    8cd4:	90 e0       	ldi	r25, 0x00	; 0
    8cd6:	80 ec       	ldi	r24, 0xC0	; 192
    8cd8:	6f e7       	ldi	r22, 0x7F	; 127
    8cda:	f7 c0       	rjmp	.+494    	; 0x8eca <strtod+0x2b6>
    8cdc:	22 96       	adiw	r28, 0x02	; 2
    8cde:	f5 01       	movw	r30, r10
    8ce0:	c0 83       	st	Z, r28
    8ce2:	d1 83       	std	Z+1, r29	; 0x01
    8ce4:	f6 cf       	rjmp	.-20     	; 0x8cd2 <strtod+0xbe>
    8ce6:	88 24       	eor	r8, r8
    8ce8:	99 24       	eor	r9, r9
    8cea:	40 e0       	ldi	r20, 0x00	; 0
    8cec:	50 e0       	ldi	r21, 0x00	; 0
    8cee:	60 e0       	ldi	r22, 0x00	; 0
    8cf0:	70 e0       	ldi	r23, 0x00	; 0
    8cf2:	ef 2d       	mov	r30, r15
    8cf4:	e0 53       	subi	r30, 0x30	; 48
    8cf6:	ea 30       	cpi	r30, 0x0A	; 10
    8cf8:	a0 f5       	brcc	.+104    	; 0x8d62 <strtod+0x14e>
    8cfa:	f2 e0       	ldi	r31, 0x02	; 2
    8cfc:	ef 2a       	or	r14, r31
    8cfe:	8e 2d       	mov	r24, r14
    8d00:	90 e0       	ldi	r25, 0x00	; 0
    8d02:	9c 01       	movw	r18, r24
    8d04:	28 70       	andi	r18, 0x08	; 8
    8d06:	30 70       	andi	r19, 0x00	; 0
    8d08:	e2 fe       	sbrs	r14, 2
    8d0a:	06 c0       	rjmp	.+12     	; 0x8d18 <strtod+0x104>
    8d0c:	23 2b       	or	r18, r19
    8d0e:	79 f5       	brne	.+94     	; 0x8d6e <strtod+0x15a>
    8d10:	08 94       	sec
    8d12:	81 1c       	adc	r8, r1
    8d14:	91 1c       	adc	r9, r1
    8d16:	2b c0       	rjmp	.+86     	; 0x8d6e <strtod+0x15a>
    8d18:	23 2b       	or	r18, r19
    8d1a:	19 f0       	breq	.+6      	; 0x8d22 <strtod+0x10e>
    8d1c:	08 94       	sec
    8d1e:	81 08       	sbc	r8, r1
    8d20:	91 08       	sbc	r9, r1
    8d22:	db 01       	movw	r26, r22
    8d24:	ca 01       	movw	r24, r20
    8d26:	12 e0       	ldi	r17, 0x02	; 2
    8d28:	88 0f       	add	r24, r24
    8d2a:	99 1f       	adc	r25, r25
    8d2c:	aa 1f       	adc	r26, r26
    8d2e:	bb 1f       	adc	r27, r27
    8d30:	1a 95       	dec	r17
    8d32:	d1 f7       	brne	.-12     	; 0x8d28 <strtod+0x114>
    8d34:	48 0f       	add	r20, r24
    8d36:	59 1f       	adc	r21, r25
    8d38:	6a 1f       	adc	r22, r26
    8d3a:	7b 1f       	adc	r23, r27
    8d3c:	44 0f       	add	r20, r20
    8d3e:	55 1f       	adc	r21, r21
    8d40:	66 1f       	adc	r22, r22
    8d42:	77 1f       	adc	r23, r23
    8d44:	4e 0f       	add	r20, r30
    8d46:	51 1d       	adc	r21, r1
    8d48:	61 1d       	adc	r22, r1
    8d4a:	71 1d       	adc	r23, r1
    8d4c:	48 39       	cpi	r20, 0x98	; 152
    8d4e:	29 e9       	ldi	r18, 0x99	; 153
    8d50:	52 07       	cpc	r21, r18
    8d52:	29 e9       	ldi	r18, 0x99	; 153
    8d54:	62 07       	cpc	r22, r18
    8d56:	29 e1       	ldi	r18, 0x19	; 25
    8d58:	72 07       	cpc	r23, r18
    8d5a:	48 f0       	brcs	.+18     	; 0x8d6e <strtod+0x15a>
    8d5c:	84 e0       	ldi	r24, 0x04	; 4
    8d5e:	e8 2a       	or	r14, r24
    8d60:	06 c0       	rjmp	.+12     	; 0x8d6e <strtod+0x15a>
    8d62:	ee 3f       	cpi	r30, 0xFE	; 254
    8d64:	31 f4       	brne	.+12     	; 0x8d72 <strtod+0x15e>
    8d66:	e3 fc       	sbrc	r14, 3
    8d68:	39 c0       	rjmp	.+114    	; 0x8ddc <strtod+0x1c8>
    8d6a:	98 e0       	ldi	r25, 0x08	; 8
    8d6c:	e9 2a       	or	r14, r25
    8d6e:	f9 90       	ld	r15, Y+
    8d70:	c0 cf       	rjmp	.-128    	; 0x8cf2 <strtod+0xde>
    8d72:	e5 33       	cpi	r30, 0x35	; 53
    8d74:	11 f0       	breq	.+4      	; 0x8d7a <strtod+0x166>
    8d76:	e5 31       	cpi	r30, 0x15	; 21
    8d78:	89 f5       	brne	.+98     	; 0x8ddc <strtod+0x1c8>
    8d7a:	29 91       	ld	r18, Y+
    8d7c:	2d 32       	cpi	r18, 0x2D	; 45
    8d7e:	19 f4       	brne	.+6      	; 0x8d86 <strtod+0x172>
    8d80:	e0 e1       	ldi	r30, 0x10	; 16
    8d82:	ee 2a       	or	r14, r30
    8d84:	05 c0       	rjmp	.+10     	; 0x8d90 <strtod+0x17c>
    8d86:	2b 32       	cpi	r18, 0x2B	; 43
    8d88:	19 f0       	breq	.+6      	; 0x8d90 <strtod+0x17c>
    8d8a:	81 e0       	ldi	r24, 0x01	; 1
    8d8c:	90 e0       	ldi	r25, 0x00	; 0
    8d8e:	03 c0       	rjmp	.+6      	; 0x8d96 <strtod+0x182>
    8d90:	29 91       	ld	r18, Y+
    8d92:	82 e0       	ldi	r24, 0x02	; 2
    8d94:	90 e0       	ldi	r25, 0x00	; 0
    8d96:	e2 2f       	mov	r30, r18
    8d98:	e0 53       	subi	r30, 0x30	; 48
    8d9a:	ea 30       	cpi	r30, 0x0A	; 10
    8d9c:	18 f0       	brcs	.+6      	; 0x8da4 <strtod+0x190>
    8d9e:	c8 1b       	sub	r28, r24
    8da0:	d9 0b       	sbc	r29, r25
    8da2:	1c c0       	rjmp	.+56     	; 0x8ddc <strtod+0x1c8>
    8da4:	20 e0       	ldi	r18, 0x00	; 0
    8da6:	30 e0       	ldi	r19, 0x00	; 0
    8da8:	fc e0       	ldi	r31, 0x0C	; 12
    8daa:	20 38       	cpi	r18, 0x80	; 128
    8dac:	3f 07       	cpc	r19, r31
    8dae:	5c f4       	brge	.+22     	; 0x8dc6 <strtod+0x1b2>
    8db0:	c9 01       	movw	r24, r18
    8db2:	88 0f       	add	r24, r24
    8db4:	99 1f       	adc	r25, r25
    8db6:	88 0f       	add	r24, r24
    8db8:	99 1f       	adc	r25, r25
    8dba:	28 0f       	add	r18, r24
    8dbc:	39 1f       	adc	r19, r25
    8dbe:	22 0f       	add	r18, r18
    8dc0:	33 1f       	adc	r19, r19
    8dc2:	2e 0f       	add	r18, r30
    8dc4:	31 1d       	adc	r19, r1
    8dc6:	e9 91       	ld	r30, Y+
    8dc8:	e0 53       	subi	r30, 0x30	; 48
    8dca:	ea 30       	cpi	r30, 0x0A	; 10
    8dcc:	68 f3       	brcs	.-38     	; 0x8da8 <strtod+0x194>
    8dce:	e4 fe       	sbrs	r14, 4
    8dd0:	03 c0       	rjmp	.+6      	; 0x8dd8 <strtod+0x1c4>
    8dd2:	30 95       	com	r19
    8dd4:	21 95       	neg	r18
    8dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    8dd8:	82 0e       	add	r8, r18
    8dda:	93 1e       	adc	r9, r19
    8ddc:	ce 2c       	mov	r12, r14
    8dde:	dd 24       	eor	r13, r13
    8de0:	e1 fe       	sbrs	r14, 1
    8de2:	07 c0       	rjmp	.+14     	; 0x8df2 <strtod+0x1de>
    8de4:	a1 14       	cp	r10, r1
    8de6:	b1 04       	cpc	r11, r1
    8de8:	21 f0       	breq	.+8      	; 0x8df2 <strtod+0x1de>
    8dea:	21 97       	sbiw	r28, 0x01	; 1
    8dec:	f5 01       	movw	r30, r10
    8dee:	c0 83       	st	Z, r28
    8df0:	d1 83       	std	Z+1, r29	; 0x01
    8df2:	cb 01       	movw	r24, r22
    8df4:	ba 01       	movw	r22, r20
    8df6:	0e 94 9f 42 	call	0x853e	; 0x853e <__floatunsisf>
    8dfa:	7b 01       	movw	r14, r22
    8dfc:	8c 01       	movw	r16, r24
    8dfe:	f3 e0       	ldi	r31, 0x03	; 3
    8e00:	cf 22       	and	r12, r31
    8e02:	dd 24       	eor	r13, r13
    8e04:	23 e0       	ldi	r18, 0x03	; 3
    8e06:	c2 16       	cp	r12, r18
    8e08:	d1 04       	cpc	r13, r1
    8e0a:	21 f4       	brne	.+8      	; 0x8e14 <strtod+0x200>
    8e0c:	17 fb       	bst	r17, 7
    8e0e:	10 95       	com	r17
    8e10:	17 f9       	bld	r17, 7
    8e12:	10 95       	com	r17
    8e14:	57 01       	movw	r10, r14
    8e16:	68 01       	movw	r12, r16
    8e18:	c8 01       	movw	r24, r16
    8e1a:	b7 01       	movw	r22, r14
    8e1c:	20 e0       	ldi	r18, 0x00	; 0
    8e1e:	30 e0       	ldi	r19, 0x00	; 0
    8e20:	40 e0       	ldi	r20, 0x00	; 0
    8e22:	50 e0       	ldi	r21, 0x00	; 0
    8e24:	0e 94 ff 41 	call	0x83fe	; 0x83fe <__cmpsf2>
    8e28:	88 23       	and	r24, r24
    8e2a:	09 f4       	brne	.+2      	; 0x8e2e <strtod+0x21a>
    8e2c:	4a c0       	rjmp	.+148    	; 0x8ec2 <strtod+0x2ae>
    8e2e:	97 fe       	sbrs	r9, 7
    8e30:	0d c0       	rjmp	.+26     	; 0x8e4c <strtod+0x238>
    8e32:	23 e9       	ldi	r18, 0x93	; 147
    8e34:	e2 2e       	mov	r14, r18
    8e36:	2d e1       	ldi	r18, 0x1D	; 29
    8e38:	f2 2e       	mov	r15, r18
    8e3a:	90 94       	com	r9
    8e3c:	81 94       	neg	r8
    8e3e:	91 08       	sbc	r9, r1
    8e40:	93 94       	inc	r9
    8e42:	c0 e2       	ldi	r28, 0x20	; 32
    8e44:	d0 e0       	ldi	r29, 0x00	; 0
    8e46:	00 e0       	ldi	r16, 0x00	; 0
    8e48:	10 e0       	ldi	r17, 0x00	; 0
    8e4a:	12 c0       	rjmp	.+36     	; 0x8e70 <strtod+0x25c>
    8e4c:	9b ea       	ldi	r25, 0xAB	; 171
    8e4e:	e9 2e       	mov	r14, r25
    8e50:	9d e1       	ldi	r25, 0x1D	; 29
    8e52:	f9 2e       	mov	r15, r25
    8e54:	f6 cf       	rjmp	.-20     	; 0x8e42 <strtod+0x22e>
    8e56:	f7 01       	movw	r30, r14
    8e58:	25 91       	lpm	r18, Z+
    8e5a:	35 91       	lpm	r19, Z+
    8e5c:	45 91       	lpm	r20, Z+
    8e5e:	54 91       	lpm	r21, Z+
    8e60:	c6 01       	movw	r24, r12
    8e62:	b5 01       	movw	r22, r10
    8e64:	0e 94 c1 44 	call	0x8982	; 0x8982 <__mulsf3>
    8e68:	5b 01       	movw	r10, r22
    8e6a:	6c 01       	movw	r12, r24
    8e6c:	8c 1a       	sub	r8, r28
    8e6e:	9d 0a       	sbc	r9, r29
    8e70:	8c 16       	cp	r8, r28
    8e72:	9d 06       	cpc	r9, r29
    8e74:	84 f7       	brge	.-32     	; 0x8e56 <strtod+0x242>
    8e76:	d5 95       	asr	r29
    8e78:	c7 95       	ror	r28
    8e7a:	0f 5f       	subi	r16, 0xFF	; 255
    8e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    8e7e:	06 30       	cpi	r16, 0x06	; 6
    8e80:	11 05       	cpc	r17, r1
    8e82:	29 f0       	breq	.+10     	; 0x8e8e <strtod+0x27a>
    8e84:	8c ef       	ldi	r24, 0xFC	; 252
    8e86:	9f ef       	ldi	r25, 0xFF	; 255
    8e88:	e8 0e       	add	r14, r24
    8e8a:	f9 1e       	adc	r15, r25
    8e8c:	f1 cf       	rjmp	.-30     	; 0x8e70 <strtod+0x25c>
    8e8e:	c5 01       	movw	r24, r10
    8e90:	d6 01       	movw	r26, r12
    8e92:	7c 01       	movw	r14, r24
    8e94:	8d 01       	movw	r16, r26
    8e96:	8c 2d       	mov	r24, r12
    8e98:	88 0f       	add	r24, r24
    8e9a:	8d 2d       	mov	r24, r13
    8e9c:	88 1f       	adc	r24, r24
    8e9e:	8f 3f       	cpi	r24, 0xFF	; 255
    8ea0:	51 f0       	breq	.+20     	; 0x8eb6 <strtod+0x2a2>
    8ea2:	c6 01       	movw	r24, r12
    8ea4:	b5 01       	movw	r22, r10
    8ea6:	20 e0       	ldi	r18, 0x00	; 0
    8ea8:	30 e0       	ldi	r19, 0x00	; 0
    8eaa:	40 e0       	ldi	r20, 0x00	; 0
    8eac:	50 e0       	ldi	r21, 0x00	; 0
    8eae:	0e 94 ff 41 	call	0x83fe	; 0x83fe <__cmpsf2>
    8eb2:	88 23       	and	r24, r24
    8eb4:	31 f4       	brne	.+12     	; 0x8ec2 <strtod+0x2ae>
    8eb6:	82 e2       	ldi	r24, 0x22	; 34
    8eb8:	90 e0       	ldi	r25, 0x00	; 0
    8eba:	80 93 06 25 	sts	0x2506, r24
    8ebe:	90 93 07 25 	sts	0x2507, r25
    8ec2:	7e 2d       	mov	r23, r14
    8ec4:	9f 2d       	mov	r25, r15
    8ec6:	80 2f       	mov	r24, r16
    8ec8:	61 2f       	mov	r22, r17
    8eca:	27 2f       	mov	r18, r23
    8ecc:	39 2f       	mov	r19, r25
    8ece:	48 2f       	mov	r20, r24
    8ed0:	56 2f       	mov	r21, r22
    8ed2:	b9 01       	movw	r22, r18
    8ed4:	ca 01       	movw	r24, r20
    8ed6:	df 91       	pop	r29
    8ed8:	cf 91       	pop	r28
    8eda:	1f 91       	pop	r17
    8edc:	0f 91       	pop	r16
    8ede:	ff 90       	pop	r15
    8ee0:	ef 90       	pop	r14
    8ee2:	df 90       	pop	r13
    8ee4:	cf 90       	pop	r12
    8ee6:	bf 90       	pop	r11
    8ee8:	af 90       	pop	r10
    8eea:	9f 90       	pop	r9
    8eec:	8f 90       	pop	r8
    8eee:	08 95       	ret

00008ef0 <atoi>:
    8ef0:	fc 01       	movw	r30, r24
    8ef2:	88 27       	eor	r24, r24
    8ef4:	99 27       	eor	r25, r25
    8ef6:	e8 94       	clt
    8ef8:	21 91       	ld	r18, Z+
    8efa:	20 32       	cpi	r18, 0x20	; 32
    8efc:	e9 f3       	breq	.-6      	; 0x8ef8 <atoi+0x8>
    8efe:	29 30       	cpi	r18, 0x09	; 9
    8f00:	10 f0       	brcs	.+4      	; 0x8f06 <atoi+0x16>
    8f02:	2e 30       	cpi	r18, 0x0E	; 14
    8f04:	c8 f3       	brcs	.-14     	; 0x8ef8 <atoi+0x8>
    8f06:	2b 32       	cpi	r18, 0x2B	; 43
    8f08:	41 f0       	breq	.+16     	; 0x8f1a <atoi+0x2a>
    8f0a:	2d 32       	cpi	r18, 0x2D	; 45
    8f0c:	39 f4       	brne	.+14     	; 0x8f1c <atoi+0x2c>
    8f0e:	68 94       	set
    8f10:	04 c0       	rjmp	.+8      	; 0x8f1a <atoi+0x2a>
    8f12:	0e 94 ac 48 	call	0x9158	; 0x9158 <__mulhi_const_10>
    8f16:	82 0f       	add	r24, r18
    8f18:	91 1d       	adc	r25, r1
    8f1a:	21 91       	ld	r18, Z+
    8f1c:	20 53       	subi	r18, 0x30	; 48
    8f1e:	2a 30       	cpi	r18, 0x0A	; 10
    8f20:	c0 f3       	brcs	.-16     	; 0x8f12 <atoi+0x22>
    8f22:	1e f4       	brtc	.+6      	; 0x8f2a <atoi+0x3a>
    8f24:	90 95       	com	r25
    8f26:	81 95       	neg	r24
    8f28:	9f 4f       	sbci	r25, 0xFF	; 255
    8f2a:	08 95       	ret

00008f2c <__ftoa_engine>:
    8f2c:	28 30       	cpi	r18, 0x08	; 8
    8f2e:	08 f0       	brcs	.+2      	; 0x8f32 <__ftoa_engine+0x6>
    8f30:	27 e0       	ldi	r18, 0x07	; 7
    8f32:	33 27       	eor	r19, r19
    8f34:	da 01       	movw	r26, r20
    8f36:	99 0f       	add	r25, r25
    8f38:	31 1d       	adc	r19, r1
    8f3a:	87 fd       	sbrc	r24, 7
    8f3c:	91 60       	ori	r25, 0x01	; 1
    8f3e:	00 96       	adiw	r24, 0x00	; 0
    8f40:	61 05       	cpc	r22, r1
    8f42:	71 05       	cpc	r23, r1
    8f44:	39 f4       	brne	.+14     	; 0x8f54 <__ftoa_engine+0x28>
    8f46:	32 60       	ori	r19, 0x02	; 2
    8f48:	2e 5f       	subi	r18, 0xFE	; 254
    8f4a:	3d 93       	st	X+, r19
    8f4c:	30 e3       	ldi	r19, 0x30	; 48
    8f4e:	2a 95       	dec	r18
    8f50:	e1 f7       	brne	.-8      	; 0x8f4a <__ftoa_engine+0x1e>
    8f52:	08 95       	ret
    8f54:	9f 3f       	cpi	r25, 0xFF	; 255
    8f56:	30 f0       	brcs	.+12     	; 0x8f64 <__ftoa_engine+0x38>
    8f58:	80 38       	cpi	r24, 0x80	; 128
    8f5a:	71 05       	cpc	r23, r1
    8f5c:	61 05       	cpc	r22, r1
    8f5e:	09 f0       	breq	.+2      	; 0x8f62 <__ftoa_engine+0x36>
    8f60:	3c 5f       	subi	r19, 0xFC	; 252
    8f62:	3c 5f       	subi	r19, 0xFC	; 252
    8f64:	3d 93       	st	X+, r19
    8f66:	91 30       	cpi	r25, 0x01	; 1
    8f68:	08 f0       	brcs	.+2      	; 0x8f6c <__ftoa_engine+0x40>
    8f6a:	80 68       	ori	r24, 0x80	; 128
    8f6c:	91 1d       	adc	r25, r1
    8f6e:	df 93       	push	r29
    8f70:	cf 93       	push	r28
    8f72:	1f 93       	push	r17
    8f74:	0f 93       	push	r16
    8f76:	ff 92       	push	r15
    8f78:	ef 92       	push	r14
    8f7a:	19 2f       	mov	r17, r25
    8f7c:	98 7f       	andi	r25, 0xF8	; 248
    8f7e:	96 95       	lsr	r25
    8f80:	e9 2f       	mov	r30, r25
    8f82:	96 95       	lsr	r25
    8f84:	96 95       	lsr	r25
    8f86:	e9 0f       	add	r30, r25
    8f88:	ff 27       	eor	r31, r31
    8f8a:	e7 5f       	subi	r30, 0xF7	; 247
    8f8c:	f1 4e       	sbci	r31, 0xE1	; 225
    8f8e:	99 27       	eor	r25, r25
    8f90:	33 27       	eor	r19, r19
    8f92:	ee 24       	eor	r14, r14
    8f94:	ff 24       	eor	r15, r15
    8f96:	a7 01       	movw	r20, r14
    8f98:	e7 01       	movw	r28, r14
    8f9a:	05 90       	lpm	r0, Z+
    8f9c:	08 94       	sec
    8f9e:	07 94       	ror	r0
    8fa0:	28 f4       	brcc	.+10     	; 0x8fac <__ftoa_engine+0x80>
    8fa2:	36 0f       	add	r19, r22
    8fa4:	e7 1e       	adc	r14, r23
    8fa6:	f8 1e       	adc	r15, r24
    8fa8:	49 1f       	adc	r20, r25
    8faa:	51 1d       	adc	r21, r1
    8fac:	66 0f       	add	r22, r22
    8fae:	77 1f       	adc	r23, r23
    8fb0:	88 1f       	adc	r24, r24
    8fb2:	99 1f       	adc	r25, r25
    8fb4:	06 94       	lsr	r0
    8fb6:	a1 f7       	brne	.-24     	; 0x8fa0 <__ftoa_engine+0x74>
    8fb8:	05 90       	lpm	r0, Z+
    8fba:	07 94       	ror	r0
    8fbc:	28 f4       	brcc	.+10     	; 0x8fc8 <__ftoa_engine+0x9c>
    8fbe:	e7 0e       	add	r14, r23
    8fc0:	f8 1e       	adc	r15, r24
    8fc2:	49 1f       	adc	r20, r25
    8fc4:	56 1f       	adc	r21, r22
    8fc6:	c1 1d       	adc	r28, r1
    8fc8:	77 0f       	add	r23, r23
    8fca:	88 1f       	adc	r24, r24
    8fcc:	99 1f       	adc	r25, r25
    8fce:	66 1f       	adc	r22, r22
    8fd0:	06 94       	lsr	r0
    8fd2:	a1 f7       	brne	.-24     	; 0x8fbc <__ftoa_engine+0x90>
    8fd4:	05 90       	lpm	r0, Z+
    8fd6:	07 94       	ror	r0
    8fd8:	28 f4       	brcc	.+10     	; 0x8fe4 <__ftoa_engine+0xb8>
    8fda:	f8 0e       	add	r15, r24
    8fdc:	49 1f       	adc	r20, r25
    8fde:	56 1f       	adc	r21, r22
    8fe0:	c7 1f       	adc	r28, r23
    8fe2:	d1 1d       	adc	r29, r1
    8fe4:	88 0f       	add	r24, r24
    8fe6:	99 1f       	adc	r25, r25
    8fe8:	66 1f       	adc	r22, r22
    8fea:	77 1f       	adc	r23, r23
    8fec:	06 94       	lsr	r0
    8fee:	a1 f7       	brne	.-24     	; 0x8fd8 <__ftoa_engine+0xac>
    8ff0:	05 90       	lpm	r0, Z+
    8ff2:	07 94       	ror	r0
    8ff4:	20 f4       	brcc	.+8      	; 0x8ffe <__ftoa_engine+0xd2>
    8ff6:	49 0f       	add	r20, r25
    8ff8:	56 1f       	adc	r21, r22
    8ffa:	c7 1f       	adc	r28, r23
    8ffc:	d8 1f       	adc	r29, r24
    8ffe:	99 0f       	add	r25, r25
    9000:	66 1f       	adc	r22, r22
    9002:	77 1f       	adc	r23, r23
    9004:	88 1f       	adc	r24, r24
    9006:	06 94       	lsr	r0
    9008:	a9 f7       	brne	.-22     	; 0x8ff4 <__ftoa_engine+0xc8>
    900a:	84 91       	lpm	r24, Z+
    900c:	10 95       	com	r17
    900e:	17 70       	andi	r17, 0x07	; 7
    9010:	41 f0       	breq	.+16     	; 0x9022 <__ftoa_engine+0xf6>
    9012:	d6 95       	lsr	r29
    9014:	c7 95       	ror	r28
    9016:	57 95       	ror	r21
    9018:	47 95       	ror	r20
    901a:	f7 94       	ror	r15
    901c:	e7 94       	ror	r14
    901e:	1a 95       	dec	r17
    9020:	c1 f7       	brne	.-16     	; 0x9012 <__ftoa_engine+0xe6>
    9022:	ef ea       	ldi	r30, 0xAF	; 175
    9024:	fd e1       	ldi	r31, 0x1D	; 29
    9026:	68 94       	set
    9028:	15 90       	lpm	r1, Z+
    902a:	15 91       	lpm	r17, Z+
    902c:	35 91       	lpm	r19, Z+
    902e:	65 91       	lpm	r22, Z+
    9030:	95 91       	lpm	r25, Z+
    9032:	05 90       	lpm	r0, Z+
    9034:	7f e2       	ldi	r23, 0x2F	; 47
    9036:	73 95       	inc	r23
    9038:	e1 18       	sub	r14, r1
    903a:	f1 0a       	sbc	r15, r17
    903c:	43 0b       	sbc	r20, r19
    903e:	56 0b       	sbc	r21, r22
    9040:	c9 0b       	sbc	r28, r25
    9042:	d0 09       	sbc	r29, r0
    9044:	c0 f7       	brcc	.-16     	; 0x9036 <__ftoa_engine+0x10a>
    9046:	e1 0c       	add	r14, r1
    9048:	f1 1e       	adc	r15, r17
    904a:	43 1f       	adc	r20, r19
    904c:	56 1f       	adc	r21, r22
    904e:	c9 1f       	adc	r28, r25
    9050:	d0 1d       	adc	r29, r0
    9052:	7e f4       	brtc	.+30     	; 0x9072 <__ftoa_engine+0x146>
    9054:	70 33       	cpi	r23, 0x30	; 48
    9056:	11 f4       	brne	.+4      	; 0x905c <__ftoa_engine+0x130>
    9058:	8a 95       	dec	r24
    905a:	e6 cf       	rjmp	.-52     	; 0x9028 <__ftoa_engine+0xfc>
    905c:	e8 94       	clt
    905e:	01 50       	subi	r16, 0x01	; 1
    9060:	30 f0       	brcs	.+12     	; 0x906e <__ftoa_engine+0x142>
    9062:	08 0f       	add	r16, r24
    9064:	0a f4       	brpl	.+2      	; 0x9068 <__ftoa_engine+0x13c>
    9066:	00 27       	eor	r16, r16
    9068:	02 17       	cp	r16, r18
    906a:	08 f4       	brcc	.+2      	; 0x906e <__ftoa_engine+0x142>
    906c:	20 2f       	mov	r18, r16
    906e:	23 95       	inc	r18
    9070:	02 2f       	mov	r16, r18
    9072:	7a 33       	cpi	r23, 0x3A	; 58
    9074:	28 f0       	brcs	.+10     	; 0x9080 <__ftoa_engine+0x154>
    9076:	79 e3       	ldi	r23, 0x39	; 57
    9078:	7d 93       	st	X+, r23
    907a:	2a 95       	dec	r18
    907c:	e9 f7       	brne	.-6      	; 0x9078 <__ftoa_engine+0x14c>
    907e:	10 c0       	rjmp	.+32     	; 0x90a0 <__ftoa_engine+0x174>
    9080:	7d 93       	st	X+, r23
    9082:	2a 95       	dec	r18
    9084:	89 f6       	brne	.-94     	; 0x9028 <__ftoa_engine+0xfc>
    9086:	06 94       	lsr	r0
    9088:	97 95       	ror	r25
    908a:	67 95       	ror	r22
    908c:	37 95       	ror	r19
    908e:	17 95       	ror	r17
    9090:	17 94       	ror	r1
    9092:	e1 18       	sub	r14, r1
    9094:	f1 0a       	sbc	r15, r17
    9096:	43 0b       	sbc	r20, r19
    9098:	56 0b       	sbc	r21, r22
    909a:	c9 0b       	sbc	r28, r25
    909c:	d0 09       	sbc	r29, r0
    909e:	98 f0       	brcs	.+38     	; 0x90c6 <__ftoa_engine+0x19a>
    90a0:	23 95       	inc	r18
    90a2:	7e 91       	ld	r23, -X
    90a4:	73 95       	inc	r23
    90a6:	7a 33       	cpi	r23, 0x3A	; 58
    90a8:	08 f0       	brcs	.+2      	; 0x90ac <__ftoa_engine+0x180>
    90aa:	70 e3       	ldi	r23, 0x30	; 48
    90ac:	7c 93       	st	X, r23
    90ae:	20 13       	cpse	r18, r16
    90b0:	b8 f7       	brcc	.-18     	; 0x90a0 <__ftoa_engine+0x174>
    90b2:	7e 91       	ld	r23, -X
    90b4:	70 61       	ori	r23, 0x10	; 16
    90b6:	7d 93       	st	X+, r23
    90b8:	30 f0       	brcs	.+12     	; 0x90c6 <__ftoa_engine+0x19a>
    90ba:	83 95       	inc	r24
    90bc:	71 e3       	ldi	r23, 0x31	; 49
    90be:	7d 93       	st	X+, r23
    90c0:	70 e3       	ldi	r23, 0x30	; 48
    90c2:	2a 95       	dec	r18
    90c4:	e1 f7       	brne	.-8      	; 0x90be <__ftoa_engine+0x192>
    90c6:	11 24       	eor	r1, r1
    90c8:	ef 90       	pop	r14
    90ca:	ff 90       	pop	r15
    90cc:	0f 91       	pop	r16
    90ce:	1f 91       	pop	r17
    90d0:	cf 91       	pop	r28
    90d2:	df 91       	pop	r29
    90d4:	99 27       	eor	r25, r25
    90d6:	87 fd       	sbrc	r24, 7
    90d8:	90 95       	com	r25
    90da:	08 95       	ret

000090dc <isspace>:
    90dc:	91 11       	cpse	r25, r1
    90de:	29 c1       	rjmp	.+594    	; 0x9332 <__ctype_isfalse>
    90e0:	80 32       	cpi	r24, 0x20	; 32
    90e2:	19 f0       	breq	.+6      	; 0x90ea <isspace+0xe>
    90e4:	89 50       	subi	r24, 0x09	; 9
    90e6:	85 50       	subi	r24, 0x05	; 5
    90e8:	d0 f7       	brcc	.-12     	; 0x90de <isspace+0x2>
    90ea:	08 95       	ret

000090ec <toupper>:
    90ec:	91 11       	cpse	r25, r1
    90ee:	08 95       	ret
    90f0:	81 56       	subi	r24, 0x61	; 97
    90f2:	8a 51       	subi	r24, 0x1A	; 26
    90f4:	08 f4       	brcc	.+2      	; 0x90f8 <toupper+0xc>
    90f6:	80 52       	subi	r24, 0x20	; 32
    90f8:	85 58       	subi	r24, 0x85	; 133
    90fa:	08 95       	ret

000090fc <strncasecmp_P>:
    90fc:	fb 01       	movw	r30, r22
    90fe:	dc 01       	movw	r26, r24
    9100:	41 50       	subi	r20, 0x01	; 1
    9102:	50 40       	sbci	r21, 0x00	; 0
    9104:	88 f0       	brcs	.+34     	; 0x9128 <strncasecmp_P+0x2c>
    9106:	8d 91       	ld	r24, X+
    9108:	81 34       	cpi	r24, 0x41	; 65
    910a:	1c f0       	brlt	.+6      	; 0x9112 <strncasecmp_P+0x16>
    910c:	8b 35       	cpi	r24, 0x5B	; 91
    910e:	0c f4       	brge	.+2      	; 0x9112 <strncasecmp_P+0x16>
    9110:	80 5e       	subi	r24, 0xE0	; 224
    9112:	65 91       	lpm	r22, Z+
    9114:	61 34       	cpi	r22, 0x41	; 65
    9116:	1c f0       	brlt	.+6      	; 0x911e <strncasecmp_P+0x22>
    9118:	6b 35       	cpi	r22, 0x5B	; 91
    911a:	0c f4       	brge	.+2      	; 0x911e <strncasecmp_P+0x22>
    911c:	60 5e       	subi	r22, 0xE0	; 224
    911e:	86 1b       	sub	r24, r22
    9120:	61 11       	cpse	r22, r1
    9122:	71 f3       	breq	.-36     	; 0x9100 <strncasecmp_P+0x4>
    9124:	99 0b       	sbc	r25, r25
    9126:	08 95       	ret
    9128:	88 1b       	sub	r24, r24
    912a:	fc cf       	rjmp	.-8      	; 0x9124 <strncasecmp_P+0x28>

0000912c <strnlen_P>:
    912c:	fc 01       	movw	r30, r24
    912e:	05 90       	lpm	r0, Z+
    9130:	61 50       	subi	r22, 0x01	; 1
    9132:	70 40       	sbci	r23, 0x00	; 0
    9134:	01 10       	cpse	r0, r1
    9136:	d8 f7       	brcc	.-10     	; 0x912e <strnlen_P+0x2>
    9138:	80 95       	com	r24
    913a:	90 95       	com	r25
    913c:	8e 0f       	add	r24, r30
    913e:	9f 1f       	adc	r25, r31
    9140:	08 95       	ret

00009142 <strnlen>:
    9142:	fc 01       	movw	r30, r24
    9144:	61 50       	subi	r22, 0x01	; 1
    9146:	70 40       	sbci	r23, 0x00	; 0
    9148:	01 90       	ld	r0, Z+
    914a:	01 10       	cpse	r0, r1
    914c:	d8 f7       	brcc	.-10     	; 0x9144 <strnlen+0x2>
    914e:	80 95       	com	r24
    9150:	90 95       	com	r25
    9152:	8e 0f       	add	r24, r30
    9154:	9f 1f       	adc	r25, r31
    9156:	08 95       	ret

00009158 <__mulhi_const_10>:
    9158:	7a e0       	ldi	r23, 0x0A	; 10
    915a:	97 9f       	mul	r25, r23
    915c:	90 2d       	mov	r25, r0
    915e:	87 9f       	mul	r24, r23
    9160:	80 2d       	mov	r24, r0
    9162:	91 0d       	add	r25, r1
    9164:	11 24       	eor	r1, r1
    9166:	08 95       	ret

00009168 <clearerr>:
    9168:	fc 01       	movw	r30, r24
    916a:	83 81       	ldd	r24, Z+3	; 0x03
    916c:	8f 7c       	andi	r24, 0xCF	; 207
    916e:	83 83       	std	Z+3, r24	; 0x03
    9170:	08 95       	ret

00009172 <fgets>:
    9172:	cf 92       	push	r12
    9174:	df 92       	push	r13
    9176:	ef 92       	push	r14
    9178:	ff 92       	push	r15
    917a:	0f 93       	push	r16
    917c:	1f 93       	push	r17
    917e:	cf 93       	push	r28
    9180:	df 93       	push	r29
    9182:	7c 01       	movw	r14, r24
    9184:	6a 01       	movw	r12, r20
    9186:	fa 01       	movw	r30, r20
    9188:	83 81       	ldd	r24, Z+3	; 0x03
    918a:	80 ff       	sbrs	r24, 0
    918c:	19 c0       	rjmp	.+50     	; 0x91c0 <fgets+0x4e>
    918e:	16 16       	cp	r1, r22
    9190:	17 06       	cpc	r1, r23
    9192:	b4 f4       	brge	.+44     	; 0x91c0 <fgets+0x4e>
    9194:	eb 01       	movw	r28, r22
    9196:	21 97       	sbiw	r28, 0x01	; 1
    9198:	87 01       	movw	r16, r14
    919a:	0d c0       	rjmp	.+26     	; 0x91b6 <fgets+0x44>
    919c:	c6 01       	movw	r24, r12
    919e:	0e 94 9c 49 	call	0x9338	; 0x9338 <fgetc>
    91a2:	ff ef       	ldi	r31, 0xFF	; 255
    91a4:	8f 3f       	cpi	r24, 0xFF	; 255
    91a6:	9f 07       	cpc	r25, r31
    91a8:	59 f0       	breq	.+22     	; 0x91c0 <fgets+0x4e>
    91aa:	f8 01       	movw	r30, r16
    91ac:	81 93       	st	Z+, r24
    91ae:	8f 01       	movw	r16, r30
    91b0:	0a 97       	sbiw	r24, 0x0a	; 10
    91b2:	19 f0       	breq	.+6      	; 0x91ba <fgets+0x48>
    91b4:	21 97       	sbiw	r28, 0x01	; 1
    91b6:	20 97       	sbiw	r28, 0x00	; 0
    91b8:	89 f7       	brne	.-30     	; 0x919c <fgets+0x2a>
    91ba:	f8 01       	movw	r30, r16
    91bc:	10 82       	st	Z, r1
    91be:	02 c0       	rjmp	.+4      	; 0x91c4 <fgets+0x52>
    91c0:	ee 24       	eor	r14, r14
    91c2:	ff 24       	eor	r15, r15
    91c4:	c7 01       	movw	r24, r14
    91c6:	df 91       	pop	r29
    91c8:	cf 91       	pop	r28
    91ca:	1f 91       	pop	r17
    91cc:	0f 91       	pop	r16
    91ce:	ff 90       	pop	r15
    91d0:	ef 90       	pop	r14
    91d2:	df 90       	pop	r13
    91d4:	cf 90       	pop	r12
    91d6:	08 95       	ret

000091d8 <fputc>:
    91d8:	0f 93       	push	r16
    91da:	1f 93       	push	r17
    91dc:	cf 93       	push	r28
    91de:	df 93       	push	r29
    91e0:	8c 01       	movw	r16, r24
    91e2:	eb 01       	movw	r28, r22
    91e4:	8b 81       	ldd	r24, Y+3	; 0x03
    91e6:	81 ff       	sbrs	r24, 1
    91e8:	1b c0       	rjmp	.+54     	; 0x9220 <fputc+0x48>
    91ea:	82 ff       	sbrs	r24, 2
    91ec:	0d c0       	rjmp	.+26     	; 0x9208 <fputc+0x30>
    91ee:	2e 81       	ldd	r18, Y+6	; 0x06
    91f0:	3f 81       	ldd	r19, Y+7	; 0x07
    91f2:	8c 81       	ldd	r24, Y+4	; 0x04
    91f4:	9d 81       	ldd	r25, Y+5	; 0x05
    91f6:	28 17       	cp	r18, r24
    91f8:	39 07       	cpc	r19, r25
    91fa:	64 f4       	brge	.+24     	; 0x9214 <fputc+0x3c>
    91fc:	e8 81       	ld	r30, Y
    91fe:	f9 81       	ldd	r31, Y+1	; 0x01
    9200:	01 93       	st	Z+, r16
    9202:	e8 83       	st	Y, r30
    9204:	f9 83       	std	Y+1, r31	; 0x01
    9206:	06 c0       	rjmp	.+12     	; 0x9214 <fputc+0x3c>
    9208:	e8 85       	ldd	r30, Y+8	; 0x08
    920a:	f9 85       	ldd	r31, Y+9	; 0x09
    920c:	80 2f       	mov	r24, r16
    920e:	19 95       	eicall
    9210:	89 2b       	or	r24, r25
    9212:	31 f4       	brne	.+12     	; 0x9220 <fputc+0x48>
    9214:	8e 81       	ldd	r24, Y+6	; 0x06
    9216:	9f 81       	ldd	r25, Y+7	; 0x07
    9218:	01 96       	adiw	r24, 0x01	; 1
    921a:	8e 83       	std	Y+6, r24	; 0x06
    921c:	9f 83       	std	Y+7, r25	; 0x07
    921e:	02 c0       	rjmp	.+4      	; 0x9224 <fputc+0x4c>
    9220:	0f ef       	ldi	r16, 0xFF	; 255
    9222:	1f ef       	ldi	r17, 0xFF	; 255
    9224:	c8 01       	movw	r24, r16
    9226:	df 91       	pop	r29
    9228:	cf 91       	pop	r28
    922a:	1f 91       	pop	r17
    922c:	0f 91       	pop	r16
    922e:	08 95       	ret

00009230 <printf_P>:
    9230:	df 93       	push	r29
    9232:	cf 93       	push	r28
    9234:	cd b7       	in	r28, 0x3d	; 61
    9236:	de b7       	in	r29, 0x3e	; 62
    9238:	fe 01       	movw	r30, r28
    923a:	36 96       	adiw	r30, 0x06	; 6
    923c:	61 91       	ld	r22, Z+
    923e:	71 91       	ld	r23, Z+
    9240:	a0 91 02 25 	lds	r26, 0x2502
    9244:	b0 91 03 25 	lds	r27, 0x2503
    9248:	13 96       	adiw	r26, 0x03	; 3
    924a:	8c 91       	ld	r24, X
    924c:	13 97       	sbiw	r26, 0x03	; 3
    924e:	88 60       	ori	r24, 0x08	; 8
    9250:	13 96       	adiw	r26, 0x03	; 3
    9252:	8c 93       	st	X, r24
    9254:	80 91 02 25 	lds	r24, 0x2502
    9258:	90 91 03 25 	lds	r25, 0x2503
    925c:	af 01       	movw	r20, r30
    925e:	0e 94 b5 3d 	call	0x7b6a	; 0x7b6a <vfprintf>
    9262:	e0 91 02 25 	lds	r30, 0x2502
    9266:	f0 91 03 25 	lds	r31, 0x2503
    926a:	23 81       	ldd	r18, Z+3	; 0x03
    926c:	27 7f       	andi	r18, 0xF7	; 247
    926e:	23 83       	std	Z+3, r18	; 0x03
    9270:	cf 91       	pop	r28
    9272:	df 91       	pop	r29
    9274:	08 95       	ret

00009276 <__ultoa_invert>:
    9276:	fa 01       	movw	r30, r20
    9278:	aa 27       	eor	r26, r26
    927a:	28 30       	cpi	r18, 0x08	; 8
    927c:	51 f1       	breq	.+84     	; 0x92d2 <__ultoa_invert+0x5c>
    927e:	20 31       	cpi	r18, 0x10	; 16
    9280:	81 f1       	breq	.+96     	; 0x92e2 <__ultoa_invert+0x6c>
    9282:	e8 94       	clt
    9284:	6f 93       	push	r22
    9286:	6e 7f       	andi	r22, 0xFE	; 254
    9288:	6e 5f       	subi	r22, 0xFE	; 254
    928a:	7f 4f       	sbci	r23, 0xFF	; 255
    928c:	8f 4f       	sbci	r24, 0xFF	; 255
    928e:	9f 4f       	sbci	r25, 0xFF	; 255
    9290:	af 4f       	sbci	r26, 0xFF	; 255
    9292:	b1 e0       	ldi	r27, 0x01	; 1
    9294:	3e d0       	rcall	.+124    	; 0x9312 <__ultoa_invert+0x9c>
    9296:	b4 e0       	ldi	r27, 0x04	; 4
    9298:	3c d0       	rcall	.+120    	; 0x9312 <__ultoa_invert+0x9c>
    929a:	67 0f       	add	r22, r23
    929c:	78 1f       	adc	r23, r24
    929e:	89 1f       	adc	r24, r25
    92a0:	9a 1f       	adc	r25, r26
    92a2:	a1 1d       	adc	r26, r1
    92a4:	68 0f       	add	r22, r24
    92a6:	79 1f       	adc	r23, r25
    92a8:	8a 1f       	adc	r24, r26
    92aa:	91 1d       	adc	r25, r1
    92ac:	a1 1d       	adc	r26, r1
    92ae:	6a 0f       	add	r22, r26
    92b0:	71 1d       	adc	r23, r1
    92b2:	81 1d       	adc	r24, r1
    92b4:	91 1d       	adc	r25, r1
    92b6:	a1 1d       	adc	r26, r1
    92b8:	20 d0       	rcall	.+64     	; 0x92fa <__ultoa_invert+0x84>
    92ba:	09 f4       	brne	.+2      	; 0x92be <__ultoa_invert+0x48>
    92bc:	68 94       	set
    92be:	3f 91       	pop	r19
    92c0:	2a e0       	ldi	r18, 0x0A	; 10
    92c2:	26 9f       	mul	r18, r22
    92c4:	11 24       	eor	r1, r1
    92c6:	30 19       	sub	r19, r0
    92c8:	30 5d       	subi	r19, 0xD0	; 208
    92ca:	31 93       	st	Z+, r19
    92cc:	de f6       	brtc	.-74     	; 0x9284 <__ultoa_invert+0xe>
    92ce:	cf 01       	movw	r24, r30
    92d0:	08 95       	ret
    92d2:	46 2f       	mov	r20, r22
    92d4:	47 70       	andi	r20, 0x07	; 7
    92d6:	40 5d       	subi	r20, 0xD0	; 208
    92d8:	41 93       	st	Z+, r20
    92da:	b3 e0       	ldi	r27, 0x03	; 3
    92dc:	0f d0       	rcall	.+30     	; 0x92fc <__ultoa_invert+0x86>
    92de:	c9 f7       	brne	.-14     	; 0x92d2 <__ultoa_invert+0x5c>
    92e0:	f6 cf       	rjmp	.-20     	; 0x92ce <__ultoa_invert+0x58>
    92e2:	46 2f       	mov	r20, r22
    92e4:	4f 70       	andi	r20, 0x0F	; 15
    92e6:	40 5d       	subi	r20, 0xD0	; 208
    92e8:	4a 33       	cpi	r20, 0x3A	; 58
    92ea:	18 f0       	brcs	.+6      	; 0x92f2 <__ultoa_invert+0x7c>
    92ec:	49 5d       	subi	r20, 0xD9	; 217
    92ee:	31 fd       	sbrc	r19, 1
    92f0:	40 52       	subi	r20, 0x20	; 32
    92f2:	41 93       	st	Z+, r20
    92f4:	02 d0       	rcall	.+4      	; 0x92fa <__ultoa_invert+0x84>
    92f6:	a9 f7       	brne	.-22     	; 0x92e2 <__ultoa_invert+0x6c>
    92f8:	ea cf       	rjmp	.-44     	; 0x92ce <__ultoa_invert+0x58>
    92fa:	b4 e0       	ldi	r27, 0x04	; 4
    92fc:	a6 95       	lsr	r26
    92fe:	97 95       	ror	r25
    9300:	87 95       	ror	r24
    9302:	77 95       	ror	r23
    9304:	67 95       	ror	r22
    9306:	ba 95       	dec	r27
    9308:	c9 f7       	brne	.-14     	; 0x92fc <__ultoa_invert+0x86>
    930a:	00 97       	sbiw	r24, 0x00	; 0
    930c:	61 05       	cpc	r22, r1
    930e:	71 05       	cpc	r23, r1
    9310:	08 95       	ret
    9312:	9b 01       	movw	r18, r22
    9314:	ac 01       	movw	r20, r24
    9316:	0a 2e       	mov	r0, r26
    9318:	06 94       	lsr	r0
    931a:	57 95       	ror	r21
    931c:	47 95       	ror	r20
    931e:	37 95       	ror	r19
    9320:	27 95       	ror	r18
    9322:	ba 95       	dec	r27
    9324:	c9 f7       	brne	.-14     	; 0x9318 <__ultoa_invert+0xa2>
    9326:	62 0f       	add	r22, r18
    9328:	73 1f       	adc	r23, r19
    932a:	84 1f       	adc	r24, r20
    932c:	95 1f       	adc	r25, r21
    932e:	a0 1d       	adc	r26, r0
    9330:	08 95       	ret

00009332 <__ctype_isfalse>:
    9332:	99 27       	eor	r25, r25
    9334:	88 27       	eor	r24, r24

00009336 <__ctype_istrue>:
    9336:	08 95       	ret

00009338 <fgetc>:
    9338:	cf 93       	push	r28
    933a:	df 93       	push	r29
    933c:	ec 01       	movw	r28, r24
    933e:	4b 81       	ldd	r20, Y+3	; 0x03
    9340:	40 ff       	sbrs	r20, 0
    9342:	1a c0       	rjmp	.+52     	; 0x9378 <fgetc+0x40>
    9344:	46 ff       	sbrs	r20, 6
    9346:	0a c0       	rjmp	.+20     	; 0x935c <fgetc+0x24>
    9348:	4f 7b       	andi	r20, 0xBF	; 191
    934a:	4b 83       	std	Y+3, r20	; 0x03
    934c:	8e 81       	ldd	r24, Y+6	; 0x06
    934e:	9f 81       	ldd	r25, Y+7	; 0x07
    9350:	01 96       	adiw	r24, 0x01	; 1
    9352:	8e 83       	std	Y+6, r24	; 0x06
    9354:	9f 83       	std	Y+7, r25	; 0x07
    9356:	8a 81       	ldd	r24, Y+2	; 0x02
    9358:	28 2f       	mov	r18, r24
    935a:	2b c0       	rjmp	.+86     	; 0x93b2 <fgetc+0x7a>
    935c:	42 ff       	sbrs	r20, 2
    935e:	13 c0       	rjmp	.+38     	; 0x9386 <fgetc+0x4e>
    9360:	e8 81       	ld	r30, Y
    9362:	f9 81       	ldd	r31, Y+1	; 0x01
    9364:	80 81       	ld	r24, Z
    9366:	28 2f       	mov	r18, r24
    9368:	33 27       	eor	r19, r19
    936a:	27 fd       	sbrc	r18, 7
    936c:	30 95       	com	r19
    936e:	21 15       	cp	r18, r1
    9370:	31 05       	cpc	r19, r1
    9372:	29 f4       	brne	.+10     	; 0x937e <fgetc+0x46>
    9374:	40 62       	ori	r20, 0x20	; 32
    9376:	4b 83       	std	Y+3, r20	; 0x03
    9378:	2f ef       	ldi	r18, 0xFF	; 255
    937a:	3f ef       	ldi	r19, 0xFF	; 255
    937c:	1b c0       	rjmp	.+54     	; 0x93b4 <fgetc+0x7c>
    937e:	31 96       	adiw	r30, 0x01	; 1
    9380:	e8 83       	st	Y, r30
    9382:	f9 83       	std	Y+1, r31	; 0x01
    9384:	11 c0       	rjmp	.+34     	; 0x93a8 <fgetc+0x70>
    9386:	ea 85       	ldd	r30, Y+10	; 0x0a
    9388:	fb 85       	ldd	r31, Y+11	; 0x0b
    938a:	ce 01       	movw	r24, r28
    938c:	19 95       	eicall
    938e:	9c 01       	movw	r18, r24
    9390:	97 ff       	sbrs	r25, 7
    9392:	0a c0       	rjmp	.+20     	; 0x93a8 <fgetc+0x70>
    9394:	9b 81       	ldd	r25, Y+3	; 0x03
    9396:	2f 5f       	subi	r18, 0xFF	; 255
    9398:	3f 4f       	sbci	r19, 0xFF	; 255
    939a:	11 f0       	breq	.+4      	; 0x93a0 <fgetc+0x68>
    939c:	80 e2       	ldi	r24, 0x20	; 32
    939e:	01 c0       	rjmp	.+2      	; 0x93a2 <fgetc+0x6a>
    93a0:	80 e1       	ldi	r24, 0x10	; 16
    93a2:	89 2b       	or	r24, r25
    93a4:	8b 83       	std	Y+3, r24	; 0x03
    93a6:	e8 cf       	rjmp	.-48     	; 0x9378 <fgetc+0x40>
    93a8:	8e 81       	ldd	r24, Y+6	; 0x06
    93aa:	9f 81       	ldd	r25, Y+7	; 0x07
    93ac:	01 96       	adiw	r24, 0x01	; 1
    93ae:	8e 83       	std	Y+6, r24	; 0x06
    93b0:	9f 83       	std	Y+7, r25	; 0x07
    93b2:	30 e0       	ldi	r19, 0x00	; 0
    93b4:	c9 01       	movw	r24, r18
    93b6:	df 91       	pop	r29
    93b8:	cf 91       	pop	r28
    93ba:	08 95       	ret

000093bc <_exit>:
    93bc:	f8 94       	cli

000093be <__stop_program>:
    93be:	ff cf       	rjmp	.-2      	; 0x93be <__stop_program>
