/* TINYG DOCUMENTATION - USING TINYG
   Copyright (c) 2010 - 2011 Alden S. Hart Jr.

  Related documents include:
        OVERVIEW 		- Basic understanding of the application (this document)
  ----> USING TINYG	- Connecting to the board, configuration, flashing, etc.
        DEVELOPERS  	- Discussion of program internals, Setup in AVRstudio

	Formatting may be a little weird as it's actually source text for the wiki.
*/

/*---- Connecting using USB ----

*/

/*---- Driving TinyG from Cooterm ----

*/

/*---- Using "screen" on Mac OSX to drive it ----

  Procedure to use the USB port from mac OSX:
	- Install the FTDI virtual serial port driver for your OS.
	- Find your tty device in /dev directory, e.g.
		/dev/tty.usbserial-A700eUQo
	- Invoke screen using your tty device at 115200 baud. 
	  	e.g: user$  screen /dev/tty.usbserial-A700eUQo 115200

  If you are running screen (under terminal) in OSX you may want to do 
  	this first (except it doesn't seem to have any effect when I try it):
	in terminal, enter: "defaults write com.apple.Terminal TermCapString xterm"
						"export TERM=xterm"
  (ref: http://atomized.org/2006/05/fixing-backspace-in-screen-in-terminal-on-os-x/)
*/

/*---- Configuration and Settings ----

  Background

  "Everything should be made as simple as possible, but not simpler." - Albert Einstein

  TinyG configuration is an attempt to adhere to Einstein's advice.

  The following assumptions are made:
	- TinyG can be used for cartesian or non-cartesian kinematics
	- TinyG supports 6 gcode axes (not 3, or 9)
	- Multiple TinyG boards can be networks to drive more than 4 motors
	- Various application-specific modes exist and will continue to be added (e.g. extruder mode)

  TinyG configuration is organized into the following groups of related settings:

	- Motor groups:		There are 4 motor groups, numbered 1.2,3,4 as labeled on the TinyG board
	- Axis groups:		There are 6 axis groups, one for each of X,Y,Z,A,B,C
	- General group:	A single group contains general machine and communication settings:
							Gcode defaults
							Machine and software parameters
							Communications settings

  The motor groups (technically "joints") contains parameters that don't change if the 
	machine is simple cartesian (e.g. XYZ table), complex cartesian - e.g. dual X axis, 
	or non-cartesian, e.g. scara or hexapod robots - to provide a serial and a parallel robot example.
  
  Motor settings include:
	- Motor mapping (to axis)
	- Step angle
	- Microsteps
	- Polarity
	- Power management mode
	- Travel per motor revolution 

  The axis groups contain parameters that describe "task space" - the XYZ space the robot is operating in.
  These include:
	- Axis mode
	- Maximum velocity (e.g. seek rate or traverse rate)
	- Maximum feed rate
	- Travel hard limit
	- Travel soft limit
	- Radius setting (rotational axes only)
	- Limit switch settings
	- Homing settings; homing enable and other homing parameters

  The general group does the following:

	- Gcode defaults are the initial values that machine will power up with, or revert to during
		reset or ESTOP. Setting these does NOT change the current machine mode, only the initial mode.
		(++++CONFIRM OR FIX)
	- Machine and software parameters include a variety of general machine settings
	- Communications settings configure the serial port behaviors


  Configuring TinyG

  Machine configuration is displayed and set by lines starting with '$'
  The $ must be the first character of the line.
  Each configuration parameter is a "setting". 
  Related settings are organized into settings "groups", such as general settings, an axis, or a motor. 
  Configuration is non-moded; that is, configuration lines and Gcode blocks can be freely intermixed without changing modes

  Displaying Settings

  The following commands will display settings groups.
 	$    Show general settings
  	$1   Show motor 1 settings (or whatever motor you want 1,2,3,4)
	$x   Show X axis settings (or whatever axis you want x,y,z,a,b,c)
	$m   Show all motor settings
	$n   Show all axis settings
	$$   Show all settings
	$h   Show this help screen

  Input is case insensitive.

  Updating Settings

  To update settings enter a token and a value:
	$ <token> <value>

  Tokens are a 2 letter mnemonic, with a motor number or axis prefix. General settings have no prefix.

  For example, type the follogin the to set the Y max feed rate to 800 mm/minute.
	$yfr800 
	<++++screencap this line>

  This value taken is echoed, or an error message if there was a problem

  Input is forgiving of caps, extra characters and spaces. 
	The following are all valid ways to set the step angle for motor 2 to 0.9 degrees per step
	$2sa0.9
	$2 sa 0.900
	$2SA=0.9
	$2sa=+0.9
	$2SA=.9

+++ Verify all the above
+++ See how hard it is to enter axes to MA as characters (probably pretty hard)

  Motor Settings

	$nMA	MAp motor to axis. As you might expect, mapping motor 1 to X will cause movement in X to move motor 1.
			Axes must be input as numbers, with X=0, Y=1, Z=2, A=3, B=4 and C=5

				$1ma0	maps motor 1 to the X axis
				$2ma0	maps motor 2 to the X axis
				$3ma1	maps motor 3 to the Y axis
				$4ma2	maps motor 4 to the Z axis

			The above configuration is a way to run a dual-X gantry such as the LumenLabs micRo v3.
			Movement in X will drive both motor1 and motor2. In the case of the micRo v3, all other
			motor settings for motors 1 and 2 should be identical.

	$nSA	Step Angle for the motor. This is often 1.8 degrees per step, but should reflect the motors in use.

				$1sa1.8	This is a typical value for most motors. You might also fin 0.9, 3.6, 7.5 or other values


	$nTR	Travel per Revolution. This is the amount of travel in mm, or inches for X, Y or Z axes. 
			The value will be interpreted and echoed in the prevailing units; G20 sets inches, G21 sets mm.
			This value is usually the result of the lead screw pitch. A 10 TPI leadscrew moves 0.100" / rev.
			Belt drives are (roughly) the circumference of the pulley.

			A, B and C axes are entered in degrees. This value will be 360 degrees for an axis that is not geared down.
			The value for a geared rotary axis is 360 divided by the gear ratio. 
			For example, a rotray table with a gear ratio of 90:1 will be 4. 

			Note that travel per revolution is a motor parameter, not an axis parameter. 
			Consider the case of a dual X gantry with lead screws of different pitch (how weird).
			The travel per revolution would be different for each motor.

	$nMI	MIcrosteps. The following values are supported:
				1 = no microsteps (whole steps)
				2 = half stepping
				4 = quarter stepping
				8 = eighth stepping

			Please consider that while microstepping level has an effect on motion smoothness, the
			quality of the pulse train delivered to the stepper drivers actually matters more. Also, 
			that the total power delivered to the motor (and hence torque) goes up as you approach 
			whole steps. Don't just assume that 1/8 microstepping is the right setting for your
			application. Try out different settings to balance smoothness and power. 
			You might be surprised.

	$nPW	PoWer mode. Set to one of the following:
				0 = Leave motor powered on when stopped
				1 = Turn motor power off when stopped

			Stepper motors actually consume maximum power when idle. They hold torque and get hot. 
			If you shut off power the motor has (almost) no holding torque.
			Some motor configurations are OK if you shut off the power on idle (like most leadscrew machines),
			others are not (some belt/pully configs and some non-cartesian robots)

  Axis Settings
 
	$xMO	Axis MOde sets the function of the axis. The following modes are supported for all axes.

				0 = Disable. All input to that axis will be ignored, and the axis will not move.

				1 = Standard. Linear axes move in length units. Rotary axes move in degrees.

				2 = Inhibited. Axis values are taken into account when planning moves, but the 
					axis will not move. Use this to perform a Z kill.

			Example, $xmo0 will disable the X axis; $amo1 sets the A axis to standard mode

			Rotary axes can have these additional modes.

				3 = Radius.mode. In radius mode the gcode values for that axis are interpreted 
					as linear units; either inches or mm depending on the prevailing G20/G21 setting. 
					The conversion of linear units to degrees is accomplished using the radius
					setting for that axis. Setting the radius to 1" means that the Gcode block 
					G0 A6.283 (inches) will make A perform one revolution (1" * 2 * pi).

					In radius mode all configuration is still done in degrees. All the radius
					does is convert the incoming gcode value internally to degrees.


				4 = Slave X mode - rotary axis slaved to movement in X dimension
				5 = Slave Y mode - rotary axis slaved to movement in Y dimension
				6 = Slave Z mode - rotary axis slaved to movement in Z dimension
				7 = Slave XY mode - rotary axis slaved to movement in XY plane
				8 = Slave XZ mode - rotary axis slaved to movement in XZ plane
				9 = Slave YZ mode - rotary axis slaved to movement in YZ plane
				10 = Slave XYZ mode - rotary axis slaved to movement in XYZ space

					Slave modes use the distance traveled in one or more linear dimensions
					as the linear input to the rotational axis. They ignore any value that 
					might have been (erroneously) provided to the slaved axis via a Gcode word.

					How does this work? The linear distance traveled in one, two or three 
					of the XYZ dimensions is computed. The distance is then applied as a 
					linear distance value for the rotational axis. The linear value is 
					converted to degrees using the radius setting - similarly to operation
					in Radius mode.

	$aRA	Radius value. The radius value is used by a rotational axis when in radius mode or 
			in a slaved mode. See Axis Mode for details.

	$xSR	Seek Rate (also known as maximum velocity). Sets the maximum velocity the axis can move
			during a traverse (G0). This is set in length units per minute for linear axes, degrees per
			minute for rotary axes.

				$xsr1200	sets X to 1200 mm/min - assuming G21 is active
				$zsr30.0	sets Z to 30 inches per minute - assuming G20 is active
				$asr3600	sets A to 10 revolutions per minute (360 * 10)

	$xFR	Maximum Feed Rate. Sets the maximum velocity the axis can move during a feed (G1, G2, G3).
			Units work similarly to seek rate. Feed rate should be less than seek rate.

			See Setting Feed and Seek Rates for more details.

	$xTH	Travel Hard limit. Defines the maximum extent of travel in that axis. This is used
			during homing.

	$xTS	Travel Soft limit. Defines the safe work envelope in that axis, which is something 
			less than the hard limit. If this value is non-zero it is used for This is used for 

	$xLI	LImit switch mode

	$xHE	Homing Enable

	$xHR	Homing Rate

	$xHC	Homing Close rate

	$xHO	Homing Offset

	$xHB	Homing Backoff

/*---- Setting Feed and Seek Rates ----

	Seek rates are the upper limit of the machine under minimal load.
	The maximum feed rates are typically less than seek rates. Set seek 
	rates before feed rates. The following example discusses setting 
	the seek rate ($xsr) to the maximum speed of reliable travel, or 
	the "top speed" of the machine. 

	A good seek rate will drive the motor reliably at high speed and allow
	for a little headroom where the motor is still running well. Attempting
	to set the seek rate too much above this speed should cause the motor to 
	stall.

	Notes: 
		Values in this example are in inches [and mm]. MM values may be 
		approximate but accurate enough for these purposes. 

		Settings strings in this example, such as $xsr show the x axis.
		Other axes are similar, such as $ysr, or $asr for Y and A axes.

	Make sure motor setting such as step angle ($xsa), microsteps ($xmi), 
	and polarity ($xpo) are correct for the motor and the setup. Make sure 
	the travel per revolution ($xtr) is set correctly for your machine.
	Typical values are $xsa = 1.8 degrees per step, $xmi = 8 microsteps,
	$xpo = 0 (not inverted), and $xtr = 0.100 as the reciprocal of lead 
	screw pitch, e.g. 1/(10 TPI). [or 2.54 in mm].

	Set an acceleration value ($jl) where you can audibly hear the motor 
	come up to speed. A value of 2,000,000 [50,000,000] is good. 
	Note: commas are accepted but ignored by config.

	Test seek rate with a G0, such as G0 X5 [G0 X100]. The motor should 
	accelerate, cruise at speed, then decelerate to a stop. The motor should 
	not stall or fail to start. Lower the seek rate if this is the case.

	If the motor hums but doesn't start it's probably not getting enough 
	current. Alternately, if the motor stops and starts; or stutters; 
	and the driver chips are excessively hot the motor is getting too much 
	current. See Setting Motor Current.

	If the the motor more or less works but seems to be dropping steps it 
	could be any of the mechanical system (too much friction), the current
	setting, or the seek rate being too high. Probably some combination of 
	all three. Experimentation is required. It's best to try to fix them in 
	that order.

	It's worth noting that the mechanics of the axes may not be identical, 
	and the achieveable seek rates may differ.

	Set feed rates ($xfr) similarly. These often require adjustment for a 
	given job or material as the cutting loads may vary. The seek rates 
	should not require job-by-job adjustment.

 */
/*---- Rotational Axis Settings and Modes ----

	Rotational Axis Settings

	The rotational axes (ABC) run natively in degrees mode. All gcode 
	values for the ABC axes are in degrees. The configuration settings 
	of the rotational axes are also all in degrees (with the exception 
	of the Radius setting as described below).

	Seek and feed rates are in degrees per minute and behave as per 
	RS274NGCv3 feed rate defintions.

	Travel per revolution means the number of degrees the machine moves per
	motor revolution - it expresses gearing. For example a rotary table has
	a 90:1 gear ratio. The travel per revolution should be set to 4. 
	(360 / 90).
	
	Travel hard and soft limits are in degrees. Most of the time rotational
	axes are "wrapped" axes that have no limits. In this case the limits 
	should be set to -1.

	All homing cycle values (rates and distances) are also in degrees,
	although the meanings may vary depening on homing modes. 


	Slaved Extruder Example

	Take the case of a stepper controlled extruder for 3d printing. The
	stepper motor is configured on the A axis. 

	The A axis max feed rate is initially set to a degrees per minute that 
	is somewhat lower than the stepper can deliver. 1000 steps per second 
	for a 1.8 degree stepper equals 108,000 degrees per second. If this 
	rate is faster than the extruder and/or stepper can handle it should 
	be lowered - as it is used to limit the maximum rate an extrusion 
	move can be executed. 

	The travel_per_revolution setting accounts for the gearing of the 
	stepper to the extrusion mechanism. Let's say the gearing is 50:1.
	Travel per revolution is set to 360/50 = 7.2 

	Once these 2 settings are established they need not be changed.

	The A axis radius is used to set the extrusion rate. This is 
	experimental will probably change depending on the part being built,
	and can change dynamically during a build by issuing a $araNNN command
	(or MXXX command once we get that linked).

	Now when there is movement in the XY plane the extruder will feed
	at a rate proportional to the movement. The extrusion rate will also 
	obey the same acceleration/deceleration as the extruder head. 
	Movement in Z will not affect the extrusion rate.

	So why is there a separate EXTRUDER mode? Extruder mode works as above,
	but additionally it only extrudes for G1, G2 and G3. It does not extrude
	during seeks (G0).

*/


/*---- FLASH Programming notes ----

	If you want to preserve the EEPROM contents (config settings) during 
	reprogramming you must tell the programmer not to erase EEPROM during 
	programming. Erasing EEPROM is the default setting for AVRstudio.
*/
