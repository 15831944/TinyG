
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000883e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00802000  0000883e  000088d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003f8  0080211c  0080211c  000089ee  2**0
                  ALLOC
  3 .debug_aranges 00000300  00000000  00000000  000089ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000be4  00000000  00000000  00008cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000075a1  00000000  00000000  000098d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000242b  00000000  00000000  00010e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000045fc  00000000  00000000  0001329e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000980  00000000  00000000  0001789c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000213c  00000000  00000000  0001821c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000380d  00000000  00000000  0001a358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  0001db65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__ctors_end>
       4:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
       8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
       c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      10:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      14:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      18:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      1c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      20:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      24:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      28:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      2c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      30:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      34:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      38:	0c 94 fc 25 	jmp	0x4bf8	; 0x4bf8 <__vector_14>
      3c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      40:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      44:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      48:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      4c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      50:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      54:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      58:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      5c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      60:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      64:	0c 94 37 28 	jmp	0x506e	; 0x506e <__vector_25>
      68:	0c 94 b5 28 	jmp	0x516a	; 0x516a <__vector_26>
      6c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      70:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      74:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      78:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      7c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      80:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      84:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      88:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      8c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      90:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      94:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      98:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      9c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      a0:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      a4:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      a8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      ac:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      b0:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      b4:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      b8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      bc:	0c 94 32 25 	jmp	0x4a64	; 0x4a64 <__vector_47>
      c0:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      c4:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      c8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      cc:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      d0:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      d4:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      d8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      dc:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      e0:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      e4:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      e8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      ec:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      f0:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      f4:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      f8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
      fc:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     100:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     104:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     108:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     10c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     110:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     114:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     118:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     11c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     120:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     124:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     128:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     12c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     130:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     134:	0c 94 97 25 	jmp	0x4b2e	; 0x4b2e <__vector_77>
     138:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     13c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     140:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     144:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     148:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     14c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     150:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     154:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     158:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     15c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     160:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     164:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     168:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     16c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     170:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     174:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     178:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     17c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     180:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     184:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     188:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     18c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     190:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     194:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     198:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     19c:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1a0:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1a4:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1a8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1ac:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1b0:	0c 94 cd 24 	jmp	0x499a	; 0x499a <__vector_108>
     1b4:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1b8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1bc:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1c0:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1c4:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1c8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1cc:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1d0:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1d4:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1d8:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1dc:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1e0:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1e4:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <__c.4247>:
     23b:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     24b:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

00000256 <__c.4244>:
     256:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     266:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

00000270 <__c.4241>:
     270:	4d 6f 74 69 6f 6e 20 43 6f 6e 74 72 6f 6c 20 45     Motion Control E
     280:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

0000028a <__c.4238>:
     28a:	55 6e 73 75 70 70 6f 72 74 65 64 20 53 74 61 74     Unsupported Stat
     29a:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

000002a5 <__c.4235>:
     2a5:	45 78 70 65 63 74 65 64 20 43 6f 6d 6d 61 6e 64     Expected Command
     2b5:	20 4c 65 74 74 65 72 3a 20 25 73 0a 00               Letter: %s..

000002c2 <__c.4232>:
     2c2:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     2d2:	74 3a 20 25 73 0a 00                                t: %s..

000002d9 <__c.4229>:
     2d9:	51 75 69 74 74 69 6e 67 20 47 63 6f 64 65 20 4d     Quitting Gcode M
     2e9:	6f 64 65 0a 00                                      ode..

000002ee <__c.4225>:
     2ee:	4e 6f 20 6f 70 65 72 61 74 69 6f 6e 0a 00           No operation..

000002fc <__c.4221>:
     2fc:	25 73 0a 00                                         %s..

00000300 <cfgMsgXaxis>:
     300:	58 00                                               X.

00000302 <cfgMsgYaxis>:
     302:	59 00                                               Y.

00000304 <cfgMsgZaxis>:
     304:	5a 00                                               Z.

00000306 <cfgMsgAaxis>:
     306:	41 00                                               A.

00000308 <cfgMsgs>:
     308:	00 03 02 03 04 03 06 03                             ........

00000310 <configs_P>:
     310:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     320:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     330:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     340:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     350:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     360:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     370:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     380:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     390:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     3a0:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     3b0:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     3c0:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     3d0:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     3e0:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     3f0:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     400:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     410:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     420:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     430:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     440:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     450:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

0000045e <__c.3815>:
     45e:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     46e:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

00000479 <__c.3812>:
     479:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     489:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

00000493 <__c.3809>:
     493:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     4a3:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

000004ad <__c.3806>:
     4ad:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     4bd:	74 3a 20 25 73 0a 00                                t: %s..

000004c4 <__c.3803>:
     4c4:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     4d4:	4d 6f 64 65 0a 00                                   Mode..

000004da <__c.3800>:
     4da:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     4ea:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

000004f7 <__c.3732>:
     4f7:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     507:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     517:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     527:	29 0a 0a 00                                         )...

0000052b <__c.3730>:
     52b:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     53b:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     54b:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

0000055b <__c.3728>:
     55b:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     56b:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     57b:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

0000058c <__c.3726>:
     58c:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     59c:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     5ac:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000005bd <__c.3724>:
     5bd:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     5cd:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     5dd:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     5ed:	6c 0a 00                                            l..

000005f0 <__c.3722>:
     5f0:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     600:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     610:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     620:	6e 0a 00                                            n..

00000623 <__c.3720>:
     623:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     633:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     643:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     653:	74 65 70 73 29 0a 00                                teps)..

0000065a <__c.3718>:
     65a:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     66a:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     67a:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     68a:	70 0a 00                                            p..

0000068d <__c.3716>:
     68d:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     69d:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     6ad:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     6bd:	73 74 65 70 73 29 0a 00                             steps)..

000006c5 <__c.3714>:
     6c5:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     6d5:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     6e5:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     6f5:	73 74 65 70 73 29 0a 00                             steps)..

000006fd <__c.3709>:
     6fd:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     70d:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

0000071b <__c.3695>:
     71b:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     72b:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     73b:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000746 <__c.3693>:
     746:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     756:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     766:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

00000770 <__c.3691>:
     770:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     780:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     790:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

0000079a <__c.3689>:
     79a:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     7aa:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     7ba:	73 20 2d 2d 2d 0a 00                                s ---..

000007c1 <__c.3687>:
     7c1:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     7d1:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     7e1:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

000007e9 <bsel>:
     7e9:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

000007f4 <bscale>:
     7f4:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

000007ff <__c.3505>:
     7ff:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     80f:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     81f:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

0000082b <readlnFuncs>:
     82b:	77 2a 4c 2a 4c 2a be 2a 4c 2a 4c 2a 4c 2a 4c 2a     w*L*L*.*L*L*L*L*
     83b:	aa 2a 4c 2a 77 2a 4c 2a 4c 2a 77 2a d9 2a e2 2a     .*L*w*L*L*w*.*.*
     84b:	4c 2a d0 2a 4c 2a c7 2a 4c 2a 4c 2a 4c 2a 4c 2a     L*.*L*.*L*L*L*L*
     85b:	be 2a 4c 2a 4c 2a be 2a 4c 2a 4c 2a 4c 2a 4c 2a     .*L*L*.*L*L*L*L*
     86b:	4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a     L*L*L*L*L*L*L*L*
     87b:	4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a     L*L*L*L*L*L*L*L*
     88b:	4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a     L*L*L*L*L*L*L*L*
     89b:	4c 2a 4c 2a 4c 2a a0 2a 4c 2a 4c 2a 4c 2a 4c 2a     L*L*L*.*L*L*L*L*
     8ab:	4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a     L*L*L*L*L*L*L*L*
     8bb:	4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a     L*L*L*L*L*L*L*L*
     8cb:	4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a     L*L*L*L*L*L*L*L*
     8db:	4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a     L*L*L*L*L*L*L*L*
     8eb:	4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a     L*L*L*L*L*L*L*L*
     8fb:	4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a     L*L*L*L*L*L*L*L*
     90b:	4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a     L*L*L*L*L*L*L*L*
     91b:	4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a 4c 2a aa 2a     L*L*L*L*L*L*L*.*

0000092b <getcFuncs>:
     92b:	cb 29 bb 29 bb 29 f0 29 bb 29 bb 29 bb 29 bb 29     .).).).).).).).)
     93b:	ea 29 bb 29 cb 29 bb 29 bb 29 cb 29 02 2a 08 2a     .).).).).).).*.*
     94b:	bb 29 fc 29 bb 29 f6 29 bb 29 bb 29 bb 29 bb 29     .).).).).).).).)
     95b:	f0 29 bb 29 bb 29 f0 29 bb 29 bb 29 bb 29 bb 29     .).).).).).).).)
     96b:	bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29     .).).).).).).).)
     97b:	bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29     .).).).).).).).)
     98b:	bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29     .).).).).).).).)
     99b:	bb 29 bb 29 bb 29 e0 29 bb 29 bb 29 bb 29 bb 29     .).).).).).).).)
     9ab:	bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29     .).).).).).).).)
     9bb:	bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29     .).).).).).).).)
     9cb:	bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29     .).).).).).).).)
     9db:	bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29     .).).).).).).).)
     9eb:	bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29     .).).).).).).).)
     9fb:	bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29     .).).).).).).).)
     a0b:	bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29     .).).).).).).).)
     a1b:	bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 bb 29 ea 29     .).).).).).).).)

00000a2b <square_test1>:
     a2b:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     a3b:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     a4b:	78 30 20 79 30 00                                   x0 y0.

00000a51 <square_test2>:
     a51:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     a61:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     a71:	78 30 20 79 30 00                                   x0 y0.

00000a77 <square_test10>:
     a77:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     a87:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     a97:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000aa3 <circle_test10>:
     aa3:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     ab3:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     ac3:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     ad3:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     ae3:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     af3:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     b03:	30 00                                               0.

00000b05 <square_circle_test10>:
     b05:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     b15:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     b25:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     b35:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     b45:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     b55:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     b65:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     b75:	31 30 20 79 30 00                                   10 y0.

00000b7b <square_circle_test100>:
     b7b:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     b8b:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     b9b:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     bab:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     bbb:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     bcb:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     bdb:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     beb:	35 30 20 6a 30 00                                   50 j0.

00000bf1 <spiral_test5>:
     bf1:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     c01:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     c11:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     c21:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     c31:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     c41:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     c51:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     c61:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

00000c6b <spiral_test50a>:
     c6b:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     c7b:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

00000c8b <g0_test1>:
     c8b:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     c9b:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000cab <g0_test2>:
     cab:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     cbb:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     ccb:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     cdb:	79 30 20 7a 30 00                                   y0 z0.

00000ce1 <g0_test3>:
     ce1:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     cf1:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     d01:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000d0f <radius_arc_test1>:
     d0f:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     d1f:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     d2f:	72 35 30 0a 00                                      r50..

00000d34 <radius_arc_test2>:
     d34:	67 32 0a 00                                         g2..

00000d38 <zoetrope>:
     d38:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     d48:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     d58:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     d68:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     d78:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     d88:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     d98:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     da8:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     db8:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     dc8:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     dd8:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     de8:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     df8:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     e08:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     e18:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     e28:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     e38:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     e48:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     e58:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     e68:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     e78:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     e88:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     e98:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     ea8:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     eb8:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     ec8:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     ed8:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     ee8:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     ef8:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     f08:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     f18:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     f28:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     f38:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     f48:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     f58:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     f68:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
     f78:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
     f88:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
     f98:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
     fa8:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
     fb8:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
     fc8:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
     fd8:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
     fe8:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
     ff8:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
    1008:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
    1018:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
    1028:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
    1038:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
    1048:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
    1058:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
    1068:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
    1078:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
    1088:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
    1098:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
    10a8:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
    10b8:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
    10c8:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
    10d8:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
    10e8:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
    10f8:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
    1108:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
    1118:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
    1128:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
    1138:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
    1148:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
    1158:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
    1168:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    1178:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    1188:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    1198:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    11a8:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    11b8:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    11c8:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    11d8:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    11e8:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    11f8:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    1208:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    1218:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    1228:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    1238:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    1248:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    1258:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    1268:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    1278:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    1288:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    1298:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    12a8:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    12b8:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    12c8:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    12d8:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    12e8:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    12f8:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    1308:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    1318:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    1328:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    1338:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    1348:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    1358:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    1368:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    1378:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    1388:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    1398:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    13a8:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    13b8:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    13c8:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    13d8:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    13e8:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    13f8:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    1408:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    1418:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    1428:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    1438:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    1448:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    1458:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    1468:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    1478:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    1488:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    1498:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    14a8:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    14b8:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    14c8:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    14d8:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    14e8:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    14f8:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    1508:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    1518:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    1528:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    1538:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    1548:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    1558:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    1568:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    1578:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    1588:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    1598:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    15a8:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    15b8:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    15c8:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    15d8:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    15e8:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    15f8:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    1608:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    1618:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    1628:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    1638:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    1648:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    1658:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    1668:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    1678:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    1688:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    1698:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    16a8:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    16b8:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    16c8:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    16d8:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    16e8:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

000016f3 <contraptor_circle>:
    16f3:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    1703:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    1713:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    1723:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    1733:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    1743:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    1753:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    1763:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    1773:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    1783:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    1793:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    17a3:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    17b3:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    17c3:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    17d3:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    17e3:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    17f3:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    1803:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    1813:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    1823:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    1833:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    1843:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    1853:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    1863:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    1873:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    1883:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    1893:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    18a3:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    18b3:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    18c3:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    18d3:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    18e3:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    18f3:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    1903:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    1913:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    1923:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    1933:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    1943:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    1953:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    1963:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    1973:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1983:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1993:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    19a3:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    19b3:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    19c3:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    19d3:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    19e3:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    19f3:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1a03:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    1a13:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    1a23:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    1a33:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    1a43:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    1a53:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    1a63:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    1a73:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1a83:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1a93:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1aa3:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1ab3:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1ac3:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001ad3 <tgModeStringControl>:
    1ad3:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001ae0 <tgModeStringConfig>:
    1ae0:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001aec <tgModeStringGCode>:
    1aec:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

00001af8 <tgModeStringDirect>:
    1af8:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

00001b05 <tgModeStrings>:
    1b05:	d3 1a e0 1a ec 1a f8 1a                             ........

00001b0d <__c.3936>:
    1b0d:	0d 0a 45 6e 64 20 6f 66 20 66 69 6c 65 20 65 6e     ..End of file en
    1b1d:	63 6f 75 6e 74 65 72 65 64 0d 0a 00                 countered...

00001b29 <__c.3883>:
    1b29:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001b37 <__c.3904>:
    1b37:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1b47:	69 6c 65 0a 00                                      ile..

00001b4c <__c.3815>:
    1b4c:	62 75 69 6c 64 20 31 39 37 00                       build 197.

00001b56 <__c.3813>:
    1b56:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1b66:	25 53 0a 00                                         %S..

00001b6a <pstr_inf>:
    1b6a:	49 4e 46                                            INF

00001b6d <pstr_inity>:
    1b6d:	49 4e 49 54 59                                      INITY

00001b72 <pstr_nan>:
    1b72:	4e 41 4e                                            NAN

00001b75 <pwr_m10>:
    1b75:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1b85:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001b8d <pwr_p10>:
    1b8d:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1b9d:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1bad:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1bbd:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1bcd:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1bdd:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1bed:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1bfd:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1c0d:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1c1d:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1c2d:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1c3d:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1c4d:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1c5d:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1c6d:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1c7d:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1c8d:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1c9d:	3d 27 00                                            ='.

00001ca0 <__ctors_end>:
    1ca0:	11 24       	eor	r1, r1
    1ca2:	1f be       	out	0x3f, r1	; 63
    1ca4:	cf ef       	ldi	r28, 0xFF	; 255
    1ca6:	df e5       	ldi	r29, 0x5F	; 95
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	00 e0       	ldi	r16, 0x00	; 0
    1cae:	0c bf       	out	0x3c, r16	; 60

00001cb0 <__do_copy_data>:
    1cb0:	11 e2       	ldi	r17, 0x21	; 33
    1cb2:	a0 e0       	ldi	r26, 0x00	; 0
    1cb4:	b0 e2       	ldi	r27, 0x20	; 32
    1cb6:	ee e3       	ldi	r30, 0x3E	; 62
    1cb8:	f8 e8       	ldi	r31, 0x88	; 136
    1cba:	00 e0       	ldi	r16, 0x00	; 0
    1cbc:	0b bf       	out	0x3b, r16	; 59
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <__do_copy_data+0x14>
    1cc0:	07 90       	elpm	r0, Z+
    1cc2:	0d 92       	st	X+, r0
    1cc4:	ac 31       	cpi	r26, 0x1C	; 28
    1cc6:	b1 07       	cpc	r27, r17
    1cc8:	d9 f7       	brne	.-10     	; 0x1cc0 <__do_copy_data+0x10>

00001cca <__do_clear_bss>:
    1cca:	15 e2       	ldi	r17, 0x25	; 37
    1ccc:	ac e1       	ldi	r26, 0x1C	; 28
    1cce:	b1 e2       	ldi	r27, 0x21	; 33
    1cd0:	01 c0       	rjmp	.+2      	; 0x1cd4 <.do_clear_bss_start>

00001cd2 <.do_clear_bss_loop>:
    1cd2:	1d 92       	st	X+, r1

00001cd4 <.do_clear_bss_start>:
    1cd4:	a4 31       	cpi	r26, 0x14	; 20
    1cd6:	b1 07       	cpc	r27, r17
    1cd8:	e1 f7       	brne	.-8      	; 0x1cd2 <.do_clear_bss_loop>
    1cda:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <main>
    1cde:	0c 94 1d 44 	jmp	0x883a	; 0x883a <_exit>

00001ce2 <__bad_interrupt>:
    1ce2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001ce6 <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1ce6:	f8 94       	cli
	xmega_init();				// xmega setup
    1ce8:	0e 94 96 1a 	call	0x352c	; 0x352c <xmega_init>
	xio_init();					// xmega io subsystem
    1cec:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <xio_init>

	cfg_init();					// get config record from eeprom
    1cf0:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <cfg_init>
	st_init(); 					// stepper subsystem
    1cf4:	0e 94 27 23 	call	0x464e	; 0x464e <st_init>
	mv_init();					// move buffers
    1cf8:	0e 94 14 30 	call	0x6028	; 0x6028 <mv_init>
	mc_init();					// motion control subsystem
    1cfc:	0e 94 b6 1a 	call	0x356c	; 0x356c <mc_init>
	spindle_init();				// spindle controller
    1d00:	0e 94 0b 23 	call	0x4616	; 0x4616 <spindle_init>
	en_init();					// encoders
    1d04:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <en_init>
	gc_init();					// gcode-parser
    1d08:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <gc_init>
	dd_init();					// direct drive commands
    1d0c:	0e 94 10 30 	call	0x6020	; 0x6020 <dd_init>
	tg_init();					// tinyg parsers
    1d10:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1d14:	0e 94 69 26 	call	0x4cd2	; 0x4cd2 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1d18:	e0 ea       	ldi	r30, 0xA0	; 160
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 91 a2 00 	lds	r24, 0x00A2
    1d20:	81 60       	ori	r24, 0x01	; 1
    1d22:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1d24:	80 91 a2 00 	lds	r24, 0x00A2
    1d28:	82 60       	ori	r24, 0x02	; 2
    1d2a:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1d2c:	80 91 a2 00 	lds	r24, 0x00A2
    1d30:	84 60       	ori	r24, 0x04	; 4
    1d32:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1d34:	78 94       	sei
//	xio_usb_queue_RX_string("f\n");
//	xio_usb_queue_RX_string("?\n");
//	xio_usb_queue_RX_string("g0x10y10z25\n");

	for(;;){
		tg_controller();
    1d36:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <tg_controller>
    1d3a:	fd cf       	rjmp	.-6      	; 0x1d36 <main+0x50>

00001d3c <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1d3c:	80 93 69 21 	sts	0x2169, r24
	gc.plane_axis_1 = axis_1;
    1d40:	60 93 6a 21 	sts	0x216A, r22
	gc.plane_axis_2 = axis_2;
    1d44:	40 93 6b 21 	sts	0x216B, r20
}
    1d48:	08 95       	ret

00001d4a <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1d4a:	ef 92       	push	r14
    1d4c:	ff 92       	push	r15
    1d4e:	0f 93       	push	r16
    1d50:	1f 93       	push	r17
    1d52:	7b 01       	movw	r14, r22
    1d54:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    1d56:	80 91 29 21 	lds	r24, 0x2129
    1d5a:	88 23       	and	r24, r24
    1d5c:	51 f0       	breq	.+20     	; 0x1d72 <to_millimeters+0x28>
    1d5e:	c8 01       	movw	r24, r16
    1d60:	b7 01       	movw	r22, r14
    1d62:	25 e8       	ldi	r18, 0x85	; 133
    1d64:	32 e4       	ldi	r19, 0x42	; 66
    1d66:	41 e2       	ldi	r20, 0x21	; 33
    1d68:	5d e3       	ldi	r21, 0x3D	; 61
    1d6a:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    1d6e:	7b 01       	movw	r14, r22
    1d70:	8c 01       	movw	r16, r24
}
    1d72:	b7 01       	movw	r22, r14
    1d74:	c8 01       	movw	r24, r16
    1d76:	1f 91       	pop	r17
    1d78:	0f 91       	pop	r16
    1d7a:	ff 90       	pop	r15
    1d7c:	ef 90       	pop	r14
    1d7e:	08 95       	ret

00001d80 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    1d80:	86 e5       	ldi	r24, 0x56	; 86
    1d82:	ec e1       	ldi	r30, 0x1C	; 28
    1d84:	f1 e2       	ldi	r31, 0x21	; 33
    1d86:	df 01       	movw	r26, r30
    1d88:	1d 92       	st	X+, r1
    1d8a:	8a 95       	dec	r24
    1d8c:	e9 f7       	brne	.-6      	; 0x1d88 <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	a0 e0       	ldi	r26, 0x00	; 0
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	80 93 2d 21 	sts	0x212D, r24
    1d9a:	90 93 2e 21 	sts	0x212E, r25
    1d9e:	a0 93 2f 21 	sts	0x212F, r26
    1da2:	b0 93 30 21 	sts	0x2130, r27
	gc.radius = 0;							// radius value
    1da6:	80 93 31 21 	sts	0x2131, r24
    1daa:	90 93 32 21 	sts	0x2132, r25
    1dae:	a0 93 33 21 	sts	0x2133, r26
    1db2:	b0 93 34 21 	sts	0x2134, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    1db6:	80 91 4a 24 	lds	r24, 0x244A
    1dba:	90 91 4b 24 	lds	r25, 0x244B
    1dbe:	a0 91 4c 24 	lds	r26, 0x244C
    1dc2:	b0 91 4d 24 	lds	r27, 0x244D
    1dc6:	80 93 35 21 	sts	0x2135, r24
    1dca:	90 93 36 21 	sts	0x2136, r25
    1dce:	a0 93 37 21 	sts	0x2137, r26
    1dd2:	b0 93 38 21 	sts	0x2138, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    1dd6:	80 91 4e 24 	lds	r24, 0x244E
    1dda:	90 91 4f 24 	lds	r25, 0x244F
    1dde:	a0 91 50 24 	lds	r26, 0x2450
    1de2:	b0 91 51 24 	lds	r27, 0x2451
    1de6:	80 93 39 21 	sts	0x2139, r24
    1dea:	90 93 3a 21 	sts	0x213A, r25
    1dee:	a0 93 3b 21 	sts	0x213B, r26
    1df2:	b0 93 3c 21 	sts	0x213C, r27

	gc.absolute_mode = TRUE;
    1df6:	21 e0       	ldi	r18, 0x01	; 1
    1df8:	20 93 2a 21 	sts	0x212A, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	a0 e8       	ldi	r26, 0x80	; 128
    1e02:	bf eb       	ldi	r27, 0xBF	; 191
    1e04:	80 93 41 21 	sts	0x2141, r24
    1e08:	90 93 42 21 	sts	0x2142, r25
    1e0c:	a0 93 43 21 	sts	0x2143, r26
    1e10:	b0 93 44 21 	sts	0x2144, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    1e14:	10 92 2b 21 	sts	0x212B, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    1e18:	10 92 70 21 	sts	0x2170, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    1e1c:	10 92 71 21 	sts	0x2171, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1e20:	10 92 69 21 	sts	0x2169, r1
	gc.plane_axis_1 = axis_1;
    1e24:	20 93 6a 21 	sts	0x216A, r18
	gc.plane_axis_2 = axis_2;
    1e28:	82 e0       	ldi	r24, 0x02	; 2
    1e2a:	80 93 6b 21 	sts	0x216B, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X_AXIS, Y_AXIS, Z_AXIS);
}
    1e2e:	08 95       	ret

00001e30 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    1e30:	4f 92       	push	r4
    1e32:	5f 92       	push	r5
    1e34:	6f 92       	push	r6
    1e36:	7f 92       	push	r7
    1e38:	8f 92       	push	r8
    1e3a:	9f 92       	push	r9
    1e3c:	af 92       	push	r10
    1e3e:	bf 92       	push	r11
    1e40:	cf 92       	push	r12
    1e42:	df 92       	push	r13
    1e44:	ef 92       	push	r14
    1e46:	ff 92       	push	r15
    1e48:	0f 93       	push	r16
    1e4a:	1f 93       	push	r17
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	0f 92       	push	r0
    1e52:	0f 92       	push	r0
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	3b 01       	movw	r6, r22
    1e5a:	2a 01       	movw	r4, r20
    1e5c:	49 01       	movw	r8, r18
    1e5e:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    1e60:	d8 01       	movw	r26, r16
    1e62:	ed 91       	ld	r30, X+
    1e64:	fc 91       	ld	r31, X
    1e66:	e2 0f       	add	r30, r18
    1e68:	f3 1f       	adc	r31, r19
    1e6a:	e0 81       	ld	r30, Z
    1e6c:	ee 23       	and	r30, r30
    1e6e:	41 f0       	breq	.+16     	; 0x1e80 <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    1e70:	dc 01       	movw	r26, r24
    1e72:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    1e74:	e1 54       	subi	r30, 0x41	; 65
    1e76:	ea 31       	cpi	r30, 0x1A	; 26
    1e78:	30 f0       	brcs	.+12     	; 0x1e86 <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    1e7a:	88 e0       	ldi	r24, 0x08	; 8
    1e7c:	80 93 1c 21 	sts	0x211C, r24
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	35 c0       	rjmp	.+106    	; 0x1ef0 <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    1e86:	f8 01       	movw	r30, r16
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	01 96       	adiw	r24, 0x01	; 1
    1e8e:	80 83       	st	Z, r24
    1e90:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    1e92:	89 01       	movw	r16, r18
    1e94:	08 0f       	add	r16, r24
    1e96:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    1e98:	c8 01       	movw	r24, r16
    1e9a:	be 01       	movw	r22, r28
    1e9c:	6f 5f       	subi	r22, 0xFF	; 255
    1e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea0:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strtod>
    1ea4:	6b 01       	movw	r12, r22
    1ea6:	7c 01       	movw	r14, r24
    1ea8:	d3 01       	movw	r26, r6
    1eaa:	6d 93       	st	X+, r22
    1eac:	7d 93       	st	X+, r23
    1eae:	8d 93       	st	X+, r24
    1eb0:	9c 93       	st	X, r25
    1eb2:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb8:	80 17       	cp	r24, r16
    1eba:	91 07       	cpc	r25, r17
    1ebc:	11 f4       	brne	.+4      	; 0x1ec2 <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    1ebe:	8c e0       	ldi	r24, 0x0C	; 12
    1ec0:	dd cf       	rjmp	.-70     	; 0x1e7c <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    1ec2:	88 19       	sub	r24, r8
    1ec4:	99 09       	sbc	r25, r9
    1ec6:	f5 01       	movw	r30, r10
    1ec8:	80 83       	st	Z, r24
    1eca:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    1ecc:	c7 01       	movw	r24, r14
    1ece:	b6 01       	movw	r22, r12
    1ed0:	0e 94 b6 3f 	call	0x7f6c	; 0x7f6c <trunc>
    1ed4:	9b 01       	movw	r18, r22
    1ed6:	ac 01       	movw	r20, r24
    1ed8:	c7 01       	movw	r24, r14
    1eda:	b6 01       	movw	r22, r12
    1edc:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    1ee0:	d2 01       	movw	r26, r4
    1ee2:	6d 93       	st	X+, r22
    1ee4:	7d 93       	st	X+, r23
    1ee6:	8d 93       	st	X+, r24
    1ee8:	9c 93       	st	X, r25
    1eea:	13 97       	sbiw	r26, 0x03	; 3
    1eec:	21 e0       	ldi	r18, 0x01	; 1
    1eee:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    1ef0:	c9 01       	movw	r24, r18
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	1f 91       	pop	r17
    1efc:	0f 91       	pop	r16
    1efe:	ff 90       	pop	r15
    1f00:	ef 90       	pop	r14
    1f02:	df 90       	pop	r13
    1f04:	cf 90       	pop	r12
    1f06:	bf 90       	pop	r11
    1f08:	af 90       	pop	r10
    1f0a:	9f 90       	pop	r9
    1f0c:	8f 90       	pop	r8
    1f0e:	7f 90       	pop	r7
    1f10:	6f 90       	pop	r6
    1f12:	5f 90       	pop	r5
    1f14:	4f 90       	pop	r4
    1f16:	08 95       	ret

00001f18 <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    1f18:	af 92       	push	r10
    1f1a:	bf 92       	push	r11
    1f1c:	cf 92       	push	r12
    1f1e:	df 92       	push	r13
    1f20:	ef 92       	push	r14
    1f22:	ff 92       	push	r15
    1f24:	0f 93       	push	r16
    1f26:	1f 93       	push	r17
    1f28:	79 01       	movw	r14, r18
    1f2a:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    1f2c:	5f 77       	andi	r21, 0x7F	; 127
    1f2e:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    1f32:	0e 94 0b 3c 	call	0x7816	; 0x7816 <atan>
    1f36:	5b 01       	movw	r10, r22
    1f38:	6c 01       	movw	r12, r24

	if (y>0) {
    1f3a:	c8 01       	movw	r24, r16
    1f3c:	b7 01       	movw	r22, r14
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	50 e0       	ldi	r21, 0x00	; 0
    1f46:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <__gesf2>
    1f4a:	18 16       	cp	r1, r24
    1f4c:	cc f0       	brlt	.+50     	; 0x1f80 <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    1f4e:	c6 01       	movw	r24, r12
    1f50:	b5 01       	movw	r22, r10
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <__gesf2>
    1f5e:	18 16       	cp	r1, r24
    1f60:	2c f4       	brge	.+10     	; 0x1f6c <theta+0x54>
	    {
			return(M_PI-theta);
    1f62:	6b ed       	ldi	r22, 0xDB	; 219
    1f64:	7f e0       	ldi	r23, 0x0F	; 15
    1f66:	89 e4       	ldi	r24, 0x49	; 73
    1f68:	90 e4       	ldi	r25, 0x40	; 64
    1f6a:	04 c0       	rjmp	.+8      	; 0x1f74 <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    1f6c:	6b ed       	ldi	r22, 0xDB	; 219
    1f6e:	7f e0       	ldi	r23, 0x0F	; 15
    1f70:	89 e4       	ldi	r24, 0x49	; 73
    1f72:	90 ec       	ldi	r25, 0xC0	; 192
    1f74:	a6 01       	movw	r20, r12
    1f76:	95 01       	movw	r18, r10
    1f78:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    1f7c:	5b 01       	movw	r10, r22
    1f7e:	6c 01       	movw	r12, r24
		}
	}
}
    1f80:	b5 01       	movw	r22, r10
    1f82:	c6 01       	movw	r24, r12
    1f84:	1f 91       	pop	r17
    1f86:	0f 91       	pop	r16
    1f88:	ff 90       	pop	r15
    1f8a:	ef 90       	pop	r14
    1f8c:	df 90       	pop	r13
    1f8e:	cf 90       	pop	r12
    1f90:	bf 90       	pop	r11
    1f92:	af 90       	pop	r10
    1f94:	08 95       	ret

00001f96 <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    1f96:	2f 92       	push	r2
    1f98:	3f 92       	push	r3
    1f9a:	4f 92       	push	r4
    1f9c:	5f 92       	push	r5
    1f9e:	6f 92       	push	r6
    1fa0:	7f 92       	push	r7
    1fa2:	8f 92       	push	r8
    1fa4:	9f 92       	push	r9
    1fa6:	af 92       	push	r10
    1fa8:	bf 92       	push	r11
    1faa:	cf 92       	push	r12
    1fac:	df 92       	push	r13
    1fae:	ef 92       	push	r14
    1fb0:	ff 92       	push	r15
    1fb2:	0f 93       	push	r16
    1fb4:	1f 93       	push	r17
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	68 97       	sbiw	r28, 0x18	; 24
    1fc0:	cd bf       	out	0x3d, r28	; 61
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    1fc6:	19 82       	std	Y+1, r1	; 0x01
    1fc8:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    1fca:	e1 e5       	ldi	r30, 0x51	; 81
    1fcc:	f1 e2       	ldi	r31, 0x21	; 33
    1fce:	8c e0       	ldi	r24, 0x0C	; 12
    1fd0:	df 01       	movw	r26, r30
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	1d 92       	st	X+, r1
    1fd6:	2a 95       	dec	r18
    1fd8:	e9 f7       	brne	.-6      	; 0x1fd4 <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    1fda:	3c 96       	adiw	r30, 0x0c	; 12
    1fdc:	df 01       	movw	r26, r30
    1fde:	1d 92       	st	X+, r1
    1fe0:	8a 95       	dec	r24
    1fe2:	e9 f7       	brne	.-6      	; 0x1fde <gc_execute_block+0x48>

	gc.status = TG_OK;
    1fe4:	10 92 1c 21 	sts	0x211C, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    1fe8:	10 92 2c 21 	sts	0x212C, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    1fec:	6e 01       	movw	r12, r28
    1fee:	08 94       	sec
    1ff0:	c1 1c       	adc	r12, r1
    1ff2:	d1 1c       	adc	r13, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    1ff4:	ff 24       	eor	r15, r15
    1ff6:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    1ff8:	ba e0       	ldi	r27, 0x0A	; 10
    1ffa:	bb 2e       	mov	r11, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    1ffc:	a2 e0       	ldi	r26, 0x02	; 2
    1ffe:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    2000:	77 24       	eor	r7, r7
    2002:	7a 94       	dec	r7
					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }
					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2004:	f4 e0       	ldi	r31, 0x04	; 4
    2006:	6f 2e       	mov	r6, r31
			case 'G':
				switch((int)gc.value) {
					case 0:  { gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
					case 1:  { gc.motion_mode = MOTION_MODE_LINEAR; break; }
					case 2:  { gc.motion_mode = MOTION_MODE_CW_ARC; break; }
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    2008:	e3 e0       	ldi	r30, 0x03	; 3
    200a:	ae 2e       	mov	r10, r30
    200c:	02 c1       	rjmp	.+516    	; 0x2212 <gc_execute_block+0x27c>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    200e:	80 91 1d 21 	lds	r24, 0x211D
    2012:	8d 34       	cpi	r24, 0x4D	; 77
    2014:	09 f4       	brne	.+2      	; 0x2018 <gc_execute_block+0x82>
    2016:	b6 c0       	rjmp	.+364    	; 0x2184 <gc_execute_block+0x1ee>
    2018:	84 35       	cpi	r24, 0x54	; 84
    201a:	09 f4       	brne	.+2      	; 0x201e <gc_execute_block+0x88>
    201c:	e8 c0       	rjmp	.+464    	; 0x21ee <gc_execute_block+0x258>
    201e:	87 34       	cpi	r24, 0x47	; 71
    2020:	09 f0       	breq	.+2      	; 0x2024 <gc_execute_block+0x8e>
    2022:	f3 c0       	rjmp	.+486    	; 0x220a <gc_execute_block+0x274>
			case 'G':
				switch((int)gc.value) {
    2024:	60 91 1e 21 	lds	r22, 0x211E
    2028:	70 91 1f 21 	lds	r23, 0x211F
    202c:	80 91 20 21 	lds	r24, 0x2120
    2030:	90 91 21 21 	lds	r25, 0x2121
    2034:	0e 94 b5 3c 	call	0x796a	; 0x796a <__fixsfsi>
    2038:	65 31       	cpi	r22, 0x15	; 21
    203a:	71 05       	cpc	r23, r1
    203c:	09 f4       	brne	.+2      	; 0x2040 <gc_execute_block+0xaa>
    203e:	87 c0       	rjmp	.+270    	; 0x214e <gc_execute_block+0x1b8>
    2040:	66 31       	cpi	r22, 0x16	; 22
    2042:	71 05       	cpc	r23, r1
    2044:	84 f5       	brge	.+96     	; 0x20a6 <gc_execute_block+0x110>
    2046:	64 30       	cpi	r22, 0x04	; 4
    2048:	71 05       	cpc	r23, r1
    204a:	09 f4       	brne	.+2      	; 0x204e <gc_execute_block+0xb8>
    204c:	65 c0       	rjmp	.+202    	; 0x2118 <gc_execute_block+0x182>
    204e:	65 30       	cpi	r22, 0x05	; 5
    2050:	71 05       	cpc	r23, r1
    2052:	a4 f4       	brge	.+40     	; 0x207c <gc_execute_block+0xe6>
    2054:	61 30       	cpi	r22, 0x01	; 1
    2056:	71 05       	cpc	r23, r1
    2058:	09 f4       	brne	.+2      	; 0x205c <gc_execute_block+0xc6>
    205a:	55 c0       	rjmp	.+170    	; 0x2106 <gc_execute_block+0x170>
    205c:	62 30       	cpi	r22, 0x02	; 2
    205e:	71 05       	cpc	r23, r1
    2060:	24 f4       	brge	.+8      	; 0x206a <gc_execute_block+0xd4>
    2062:	67 2b       	or	r22, r23
    2064:	09 f4       	brne	.+2      	; 0x2068 <gc_execute_block+0xd2>
    2066:	4c c0       	rjmp	.+152    	; 0x2100 <gc_execute_block+0x16a>
    2068:	bf c0       	rjmp	.+382    	; 0x21e8 <gc_execute_block+0x252>
    206a:	62 30       	cpi	r22, 0x02	; 2
    206c:	71 05       	cpc	r23, r1
    206e:	09 f4       	brne	.+2      	; 0x2072 <gc_execute_block+0xdc>
    2070:	4d c0       	rjmp	.+154    	; 0x210c <gc_execute_block+0x176>
    2072:	63 30       	cpi	r22, 0x03	; 3
    2074:	71 05       	cpc	r23, r1
    2076:	09 f0       	breq	.+2      	; 0x207a <gc_execute_block+0xe4>
    2078:	b7 c0       	rjmp	.+366    	; 0x21e8 <gc_execute_block+0x252>
    207a:	4b c0       	rjmp	.+150    	; 0x2112 <gc_execute_block+0x17c>
    207c:	62 31       	cpi	r22, 0x12	; 18
    207e:	71 05       	cpc	r23, r1
    2080:	09 f4       	brne	.+2      	; 0x2084 <gc_execute_block+0xee>
    2082:	54 c0       	rjmp	.+168    	; 0x212c <gc_execute_block+0x196>
    2084:	63 31       	cpi	r22, 0x13	; 19
    2086:	71 05       	cpc	r23, r1
    2088:	2c f4       	brge	.+10     	; 0x2094 <gc_execute_block+0xfe>
    208a:	61 31       	cpi	r22, 0x11	; 17
    208c:	71 05       	cpc	r23, r1
    208e:	09 f0       	breq	.+2      	; 0x2092 <gc_execute_block+0xfc>
    2090:	ab c0       	rjmp	.+342    	; 0x21e8 <gc_execute_block+0x252>
    2092:	45 c0       	rjmp	.+138    	; 0x211e <gc_execute_block+0x188>
    2094:	63 31       	cpi	r22, 0x13	; 19
    2096:	71 05       	cpc	r23, r1
    2098:	09 f4       	brne	.+2      	; 0x209c <gc_execute_block+0x106>
    209a:	4f c0       	rjmp	.+158    	; 0x213a <gc_execute_block+0x1a4>
    209c:	64 31       	cpi	r22, 0x14	; 20
    209e:	71 05       	cpc	r23, r1
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <gc_execute_block+0x10e>
    20a2:	a2 c0       	rjmp	.+324    	; 0x21e8 <gc_execute_block+0x252>
    20a4:	51 c0       	rjmp	.+162    	; 0x2148 <gc_execute_block+0x1b2>
    20a6:	6a 35       	cpi	r22, 0x5A	; 90
    20a8:	71 05       	cpc	r23, r1
    20aa:	09 f4       	brne	.+2      	; 0x20ae <gc_execute_block+0x118>
    20ac:	5c c0       	rjmp	.+184    	; 0x2166 <gc_execute_block+0x1d0>
    20ae:	6b 35       	cpi	r22, 0x5B	; 91
    20b0:	71 05       	cpc	r23, r1
    20b2:	ac f4       	brge	.+42     	; 0x20de <gc_execute_block+0x148>
    20b4:	6e 31       	cpi	r22, 0x1E	; 30
    20b6:	71 05       	cpc	r23, r1
    20b8:	09 f4       	brne	.+2      	; 0x20bc <gc_execute_block+0x126>
    20ba:	4c c0       	rjmp	.+152    	; 0x2154 <gc_execute_block+0x1be>
    20bc:	6f 31       	cpi	r22, 0x1F	; 31
    20be:	71 05       	cpc	r23, r1
    20c0:	2c f4       	brge	.+10     	; 0x20cc <gc_execute_block+0x136>
    20c2:	6c 31       	cpi	r22, 0x1C	; 28
    20c4:	71 05       	cpc	r23, r1
    20c6:	09 f0       	breq	.+2      	; 0x20ca <gc_execute_block+0x134>
    20c8:	8f c0       	rjmp	.+286    	; 0x21e8 <gc_execute_block+0x252>
    20ca:	44 c0       	rjmp	.+136    	; 0x2154 <gc_execute_block+0x1be>
    20cc:	65 33       	cpi	r22, 0x35	; 53
    20ce:	71 05       	cpc	r23, r1
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <gc_execute_block+0x13e>
    20d2:	43 c0       	rjmp	.+134    	; 0x215a <gc_execute_block+0x1c4>
    20d4:	60 35       	cpi	r22, 0x50	; 80
    20d6:	71 05       	cpc	r23, r1
    20d8:	09 f0       	breq	.+2      	; 0x20dc <gc_execute_block+0x146>
    20da:	86 c0       	rjmp	.+268    	; 0x21e8 <gc_execute_block+0x252>
    20dc:	41 c0       	rjmp	.+130    	; 0x2160 <gc_execute_block+0x1ca>
    20de:	6c 35       	cpi	r22, 0x5C	; 92
    20e0:	71 05       	cpc	r23, r1
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <gc_execute_block+0x150>
    20e4:	46 c0       	rjmp	.+140    	; 0x2172 <gc_execute_block+0x1dc>
    20e6:	6c 35       	cpi	r22, 0x5C	; 92
    20e8:	71 05       	cpc	r23, r1
    20ea:	0c f4       	brge	.+2      	; 0x20ee <gc_execute_block+0x158>
    20ec:	3f c0       	rjmp	.+126    	; 0x216c <gc_execute_block+0x1d6>
    20ee:	6d 35       	cpi	r22, 0x5D	; 93
    20f0:	71 05       	cpc	r23, r1
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <gc_execute_block+0x160>
    20f4:	41 c0       	rjmp	.+130    	; 0x2178 <gc_execute_block+0x1e2>
    20f6:	6e 35       	cpi	r22, 0x5E	; 94
    20f8:	71 05       	cpc	r23, r1
    20fa:	09 f0       	breq	.+2      	; 0x20fe <gc_execute_block+0x168>
    20fc:	75 c0       	rjmp	.+234    	; 0x21e8 <gc_execute_block+0x252>
    20fe:	3f c0       	rjmp	.+126    	; 0x217e <gc_execute_block+0x1e8>
					case 0:  { gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    2100:	10 92 27 21 	sts	0x2127, r1
    2104:	82 c0       	rjmp	.+260    	; 0x220a <gc_execute_block+0x274>
					case 1:  { gc.motion_mode = MOTION_MODE_LINEAR; break; }
    2106:	f0 92 27 21 	sts	0x2127, r15
    210a:	7f c0       	rjmp	.+254    	; 0x220a <gc_execute_block+0x274>
					case 2:  { gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    210c:	e0 92 27 21 	sts	0x2127, r14
    2110:	7c c0       	rjmp	.+248    	; 0x220a <gc_execute_block+0x274>
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    2112:	a0 92 27 21 	sts	0x2127, r10
    2116:	79 c0       	rjmp	.+242    	; 0x220a <gc_execute_block+0x274>
					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    2118:	f0 92 71 21 	sts	0x2171, r15
    211c:	76 c0       	rjmp	.+236    	; 0x220a <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    211e:	10 92 69 21 	sts	0x2169, r1
	gc.plane_axis_1 = axis_1;
    2122:	f0 92 6a 21 	sts	0x216A, r15
	gc.plane_axis_2 = axis_2;
    2126:	e0 92 6b 21 	sts	0x216B, r14
    212a:	6f c0       	rjmp	.+222    	; 0x220a <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    212c:	10 92 69 21 	sts	0x2169, r1
	gc.plane_axis_1 = axis_1;
    2130:	e0 92 6a 21 	sts	0x216A, r14
	gc.plane_axis_2 = axis_2;
    2134:	f0 92 6b 21 	sts	0x216B, r15
    2138:	68 c0       	rjmp	.+208    	; 0x220a <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    213a:	f0 92 69 21 	sts	0x2169, r15
	gc.plane_axis_1 = axis_1;
    213e:	e0 92 6a 21 	sts	0x216A, r14
	gc.plane_axis_2 = axis_2;
    2142:	10 92 6b 21 	sts	0x216B, r1
    2146:	61 c0       	rjmp	.+194    	; 0x220a <gc_execute_block+0x274>
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
					case 17: { select_plane(X_AXIS, Y_AXIS, Z_AXIS); break; }
					case 18: { select_plane(X_AXIS, Z_AXIS, Y_AXIS); break; }
					case 19: { select_plane(Y_AXIS, Z_AXIS, X_AXIS); break; }
					case 20: { gc.inches_mode = TRUE; break; }
    2148:	f0 92 29 21 	sts	0x2129, r15
    214c:	5e c0       	rjmp	.+188    	; 0x220a <gc_execute_block+0x274>
					case 21: { gc.inches_mode = FALSE; break; }
    214e:	10 92 29 21 	sts	0x2129, r1
    2152:	5b c0       	rjmp	.+182    	; 0x220a <gc_execute_block+0x274>
					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    2154:	e0 92 71 21 	sts	0x2171, r14
    2158:	58 c0       	rjmp	.+176    	; 0x220a <gc_execute_block+0x274>
					case 53: { gc.absolute_override = TRUE; break; }
    215a:	f0 92 70 21 	sts	0x2170, r15
    215e:	55 c0       	rjmp	.+170    	; 0x220a <gc_execute_block+0x274>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2160:	60 92 27 21 	sts	0x2127, r6
    2164:	52 c0       	rjmp	.+164    	; 0x220a <gc_execute_block+0x274>
					case 90: { gc.absolute_mode = TRUE; break; }
    2166:	f0 92 2a 21 	sts	0x212A, r15
    216a:	4f c0       	rjmp	.+158    	; 0x220a <gc_execute_block+0x274>
					case 91: { gc.absolute_mode = FALSE; break; }
    216c:	10 92 2a 21 	sts	0x212A, r1
    2170:	4c c0       	rjmp	.+152    	; 0x220a <gc_execute_block+0x274>
					case 92: { gc.set_origin_mode = TRUE; break; }
    2172:	f0 92 2c 21 	sts	0x212C, r15
    2176:	49 c0       	rjmp	.+146    	; 0x220a <gc_execute_block+0x274>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    2178:	f0 92 28 21 	sts	0x2128, r15
    217c:	46 c0       	rjmp	.+140    	; 0x220a <gc_execute_block+0x274>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    217e:	10 92 28 21 	sts	0x2128, r1
    2182:	43 c0       	rjmp	.+134    	; 0x220a <gc_execute_block+0x274>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    2184:	60 91 1e 21 	lds	r22, 0x211E
    2188:	70 91 1f 21 	lds	r23, 0x211F
    218c:	80 91 20 21 	lds	r24, 0x2120
    2190:	90 91 21 21 	lds	r25, 0x2121
    2194:	0e 94 b5 3c 	call	0x796a	; 0x796a <__fixsfsi>
    2198:	63 30       	cpi	r22, 0x03	; 3
    219a:	71 05       	cpc	r23, r1
    219c:	e1 f0       	breq	.+56     	; 0x21d6 <gc_execute_block+0x240>
    219e:	64 30       	cpi	r22, 0x04	; 4
    21a0:	71 05       	cpc	r23, r1
    21a2:	34 f4       	brge	.+12     	; 0x21b0 <gc_execute_block+0x21a>
    21a4:	77 fd       	sbrc	r23, 7
    21a6:	20 c0       	rjmp	.+64     	; 0x21e8 <gc_execute_block+0x252>
    21a8:	62 30       	cpi	r22, 0x02	; 2
    21aa:	71 05       	cpc	r23, r1
    21ac:	74 f0       	brlt	.+28     	; 0x21ca <gc_execute_block+0x234>
    21ae:	10 c0       	rjmp	.+32     	; 0x21d0 <gc_execute_block+0x23a>
    21b0:	65 30       	cpi	r22, 0x05	; 5
    21b2:	71 05       	cpc	r23, r1
    21b4:	b1 f0       	breq	.+44     	; 0x21e2 <gc_execute_block+0x24c>
    21b6:	65 30       	cpi	r22, 0x05	; 5
    21b8:	71 05       	cpc	r23, r1
    21ba:	84 f0       	brlt	.+32     	; 0x21dc <gc_execute_block+0x246>
    21bc:	6e 31       	cpi	r22, 0x1E	; 30
    21be:	71 05       	cpc	r23, r1
    21c0:	39 f0       	breq	.+14     	; 0x21d0 <gc_execute_block+0x23a>
    21c2:	6c 33       	cpi	r22, 0x3C	; 60
    21c4:	71 05       	cpc	r23, r1
    21c6:	81 f4       	brne	.+32     	; 0x21e8 <gc_execute_block+0x252>
    21c8:	03 c0       	rjmp	.+6      	; 0x21d0 <gc_execute_block+0x23a>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    21ca:	f0 92 26 21 	sts	0x2126, r15
    21ce:	1d c0       	rjmp	.+58     	; 0x220a <gc_execute_block+0x274>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    21d0:	e0 92 26 21 	sts	0x2126, r14
    21d4:	1a c0       	rjmp	.+52     	; 0x220a <gc_execute_block+0x274>
					case 3: gc.spindle_direction = 1; break;
    21d6:	f0 92 6d 21 	sts	0x216D, r15
    21da:	17 c0       	rjmp	.+46     	; 0x220a <gc_execute_block+0x274>
					case 4: gc.spindle_direction = -1; break;
    21dc:	70 92 6d 21 	sts	0x216D, r7
    21e0:	14 c0       	rjmp	.+40     	; 0x220a <gc_execute_block+0x274>
					case 5: gc.spindle_direction = 0; break;
    21e2:	10 92 6d 21 	sts	0x216D, r1
    21e6:	11 c0       	rjmp	.+34     	; 0x220a <gc_execute_block+0x274>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    21e8:	b0 92 1c 21 	sts	0x211C, r11
    21ec:	0e c0       	rjmp	.+28     	; 0x220a <gc_execute_block+0x274>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    21ee:	60 91 1e 21 	lds	r22, 0x211E
    21f2:	70 91 1f 21 	lds	r23, 0x211F
    21f6:	80 91 20 21 	lds	r24, 0x2120
    21fa:	90 91 21 21 	lds	r25, 0x2121
    21fe:	0e 94 b6 3f 	call	0x7f6c	; 0x7f6c <trunc>
    2202:	0e 94 ba 3c 	call	0x7974	; 0x7974 <__fixunssfsi>
    2206:	60 93 6c 21 	sts	0x216C, r22
		}
		if(gc.status) {
    220a:	80 91 1c 21 	lds	r24, 0x211C
    220e:	88 23       	and	r24, r24
    2210:	69 f4       	brne	.+26     	; 0x222c <gc_execute_block+0x296>

	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2212:	8d e1       	ldi	r24, 0x1D	; 29
    2214:	91 e2       	ldi	r25, 0x21	; 33
    2216:	6e e1       	ldi	r22, 0x1E	; 30
    2218:	71 e2       	ldi	r23, 0x21	; 33
    221a:	42 e2       	ldi	r20, 0x22	; 34
    221c:	51 e2       	ldi	r21, 0x21	; 33
    221e:	94 01       	movw	r18, r8
    2220:	86 01       	movw	r16, r12
    2222:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_gc_next_statement>
    2226:	89 2b       	or	r24, r25
    2228:	09 f0       	breq	.+2      	; 0x222c <gc_execute_block+0x296>
    222a:	f1 ce       	rjmp	.-542    	; 0x200e <gc_execute_block+0x78>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    222c:	80 91 1c 21 	lds	r24, 0x211C
    2230:	88 23       	and	r24, r24
    2232:	09 f0       	breq	.+2      	; 0x2236 <gc_execute_block+0x2a0>
    2234:	9d c3       	rjmp	.+1850   	; 0x2970 <gc_execute_block+0x9da>
		return(gc.status); 
	}

	i = 0;
    2236:	19 82       	std	Y+1, r1	; 0x01
    2238:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    223a:	ed e5       	ldi	r30, 0x5D	; 93
    223c:	f1 e2       	ldi	r31, 0x21	; 33
    223e:	8c e0       	ldi	r24, 0x0C	; 12
    2240:	df 01       	movw	r26, r30
    2242:	1d 92       	st	X+, r1
    2244:	8a 95       	dec	r24
    2246:	e9 f7       	brne	.-6      	; 0x2242 <gc_execute_block+0x2ac>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    2248:	df 01       	movw	r26, r30
    224a:	1c 97       	sbiw	r26, 0x0c	; 12
    224c:	78 97       	sbiw	r30, 0x18	; 24
    224e:	8c e0       	ldi	r24, 0x0C	; 12
    2250:	01 90       	ld	r0, Z+
    2252:	0d 92       	st	X+, r0
    2254:	81 50       	subi	r24, 0x01	; 1
    2256:	e1 f7       	brne	.-8      	; 0x2250 <gc_execute_block+0x2ba>
    2258:	c6 c0       	rjmp	.+396    	; 0x23e6 <gc_execute_block+0x450>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    225a:	c0 90 1e 21 	lds	r12, 0x211E
    225e:	d0 90 1f 21 	lds	r13, 0x211F
    2262:	e0 90 20 21 	lds	r14, 0x2120
    2266:	f0 90 21 21 	lds	r15, 0x2121
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    226a:	80 91 29 21 	lds	r24, 0x2129
    226e:	88 23       	and	r24, r24
    2270:	19 f4       	brne	.+6      	; 0x2278 <gc_execute_block+0x2e2>
    2272:	a7 01       	movw	r20, r14
    2274:	96 01       	movw	r18, r12
    2276:	0a c0       	rjmp	.+20     	; 0x228c <gc_execute_block+0x2f6>
    2278:	c7 01       	movw	r24, r14
    227a:	b6 01       	movw	r22, r12
    227c:	25 e8       	ldi	r18, 0x85	; 133
    227e:	32 e4       	ldi	r19, 0x42	; 66
    2280:	41 e2       	ldi	r20, 0x21	; 33
    2282:	5d e3       	ldi	r21, 0x3D	; 61
    2284:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    2288:	9b 01       	movw	r18, r22
    228a:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    228c:	20 93 3d 21 	sts	0x213D, r18
    2290:	30 93 3e 21 	sts	0x213E, r19
    2294:	40 93 3f 21 	sts	0x213F, r20
    2298:	50 93 40 21 	sts	0x2140, r21
		switch(gc.letter) {
    229c:	00 91 1d 21 	lds	r16, 0x211D
    22a0:	00 35       	cpi	r16, 0x50	; 80
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <gc_execute_block+0x310>
    22a4:	47 c0       	rjmp	.+142    	; 0x2334 <gc_execute_block+0x39e>
    22a6:	01 35       	cpi	r16, 0x51	; 81
    22a8:	58 f4       	brcc	.+22     	; 0x22c0 <gc_execute_block+0x32a>
    22aa:	06 34       	cpi	r16, 0x46	; 70
    22ac:	c1 f0       	breq	.+48     	; 0x22de <gc_execute_block+0x348>
    22ae:	06 34       	cpi	r16, 0x46	; 70
    22b0:	08 f4       	brcc	.+2      	; 0x22b4 <gc_execute_block+0x31e>
    22b2:	9f c0       	rjmp	.+318    	; 0x23f2 <gc_execute_block+0x45c>
    22b4:	80 2f       	mov	r24, r16
    22b6:	89 54       	subi	r24, 0x49	; 73
    22b8:	83 30       	cpi	r24, 0x03	; 3
    22ba:	08 f0       	brcs	.+2      	; 0x22be <gc_execute_block+0x328>
    22bc:	9a c0       	rjmp	.+308    	; 0x23f2 <gc_execute_block+0x45c>
    22be:	2d c0       	rjmp	.+90     	; 0x231a <gc_execute_block+0x384>
    22c0:	03 35       	cpi	r16, 0x53	; 83
    22c2:	09 f4       	brne	.+2      	; 0x22c6 <gc_execute_block+0x330>
    22c4:	4b c0       	rjmp	.+150    	; 0x235c <gc_execute_block+0x3c6>
    22c6:	04 35       	cpi	r16, 0x54	; 84
    22c8:	20 f4       	brcc	.+8      	; 0x22d2 <gc_execute_block+0x33c>
    22ca:	02 35       	cpi	r16, 0x52	; 82
    22cc:	09 f0       	breq	.+2      	; 0x22d0 <gc_execute_block+0x33a>
    22ce:	91 c0       	rjmp	.+290    	; 0x23f2 <gc_execute_block+0x45c>
    22d0:	3a c0       	rjmp	.+116    	; 0x2346 <gc_execute_block+0x3b0>
    22d2:	80 2f       	mov	r24, r16
    22d4:	88 55       	subi	r24, 0x58	; 88
    22d6:	83 30       	cpi	r24, 0x03	; 3
    22d8:	08 f0       	brcs	.+2      	; 0x22dc <gc_execute_block+0x346>
    22da:	8b c0       	rjmp	.+278    	; 0x23f2 <gc_execute_block+0x45c>
    22dc:	48 c0       	rjmp	.+144    	; 0x236e <gc_execute_block+0x3d8>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    22de:	80 91 28 21 	lds	r24, 0x2128
    22e2:	88 23       	and	r24, r24
    22e4:	49 f0       	breq	.+18     	; 0x22f8 <gc_execute_block+0x362>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    22e6:	20 93 41 21 	sts	0x2141, r18
    22ea:	30 93 42 21 	sts	0x2142, r19
    22ee:	40 93 43 21 	sts	0x2143, r20
    22f2:	50 93 44 21 	sts	0x2144, r21
    22f6:	7d c0       	rjmp	.+250    	; 0x23f2 <gc_execute_block+0x45c>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    22f8:	ca 01       	movw	r24, r20
    22fa:	b9 01       	movw	r22, r18
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e7       	ldi	r20, 0x70	; 112
    2302:	52 e4       	ldi	r21, 0x42	; 66
    2304:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    2308:	60 93 35 21 	sts	0x2135, r22
    230c:	70 93 36 21 	sts	0x2136, r23
    2310:	80 93 37 21 	sts	0x2137, r24
    2314:	90 93 38 21 	sts	0x2138, r25
    2318:	6c c0       	rjmp	.+216    	; 0x23f2 <gc_execute_block+0x45c>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    231a:	e0 2f       	mov	r30, r16
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	ee 0f       	add	r30, r30
    2320:	ff 1f       	adc	r31, r31
    2322:	ee 0f       	add	r30, r30
    2324:	ff 1f       	adc	r31, r31
    2326:	e7 5c       	subi	r30, 0xC7	; 199
    2328:	ff 4d       	sbci	r31, 0xDF	; 223
    232a:	20 83       	st	Z, r18
    232c:	31 83       	std	Z+1, r19	; 0x01
    232e:	42 83       	std	Z+2, r20	; 0x02
    2330:	53 83       	std	Z+3, r21	; 0x03
    2332:	5f c0       	rjmp	.+190    	; 0x23f2 <gc_execute_block+0x45c>
			case 'P': gc.dwell_time = gc.value; break;
    2334:	c0 92 2d 21 	sts	0x212D, r12
    2338:	d0 92 2e 21 	sts	0x212E, r13
    233c:	e0 92 2f 21 	sts	0x212F, r14
    2340:	f0 92 30 21 	sts	0x2130, r15
    2344:	56 c0       	rjmp	.+172    	; 0x23f2 <gc_execute_block+0x45c>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    2346:	20 93 31 21 	sts	0x2131, r18
    234a:	30 93 32 21 	sts	0x2132, r19
    234e:	40 93 33 21 	sts	0x2133, r20
    2352:	50 93 34 21 	sts	0x2134, r21
    2356:	70 92 2b 21 	sts	0x212B, r7
    235a:	4b c0       	rjmp	.+150    	; 0x23f2 <gc_execute_block+0x45c>
			case 'S': gc.spindle_speed = gc.value; break;
    235c:	c7 01       	movw	r24, r14
    235e:	b6 01       	movw	r22, r12
    2360:	0e 94 b5 3c 	call	0x796a	; 0x796a <__fixsfsi>
    2364:	60 93 6e 21 	sts	0x216E, r22
    2368:	70 93 6f 21 	sts	0x216F, r23
    236c:	42 c0       	rjmp	.+132    	; 0x23f2 <gc_execute_block+0x45c>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    236e:	80 91 2c 21 	lds	r24, 0x212C
    2372:	88 23       	and	r24, r24
    2374:	69 f0       	breq	.+26     	; 0x2390 <gc_execute_block+0x3fa>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    2376:	e0 2f       	mov	r30, r16
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	ee 0f       	add	r30, r30
    237c:	ff 1f       	adc	r31, r31
    237e:	ee 0f       	add	r30, r30
    2380:	ff 1f       	adc	r31, r31
    2382:	e4 54       	subi	r30, 0x44	; 68
    2384:	f0 4e       	sbci	r31, 0xE0	; 224
    2386:	21 a7       	std	Z+41, r18	; 0x29
    2388:	32 a7       	std	Z+42, r19	; 0x2a
    238a:	43 a7       	std	Z+43, r20	; 0x2b
    238c:	54 a7       	std	Z+44, r21	; 0x2c
    238e:	31 c0       	rjmp	.+98     	; 0x23f2 <gc_execute_block+0x45c>
				} else if (gc.absolute_mode || gc.absolute_override) {
    2390:	80 91 2a 21 	lds	r24, 0x212A
    2394:	88 23       	and	r24, r24
    2396:	21 f4       	brne	.+8      	; 0x23a0 <gc_execute_block+0x40a>
    2398:	80 91 70 21 	lds	r24, 0x2170
    239c:	88 23       	and	r24, r24
    239e:	69 f0       	breq	.+26     	; 0x23ba <gc_execute_block+0x424>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    23a0:	e0 2f       	mov	r30, r16
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	ee 0f       	add	r30, r30
    23a6:	ff 1f       	adc	r31, r31
    23a8:	ee 0f       	add	r30, r30
    23aa:	ff 1f       	adc	r31, r31
    23ac:	e4 54       	subi	r30, 0x44	; 68
    23ae:	f0 4e       	sbci	r31, 0xE0	; 224
    23b0:	25 ab       	std	Z+53, r18	; 0x35
    23b2:	36 ab       	std	Z+54, r19	; 0x36
    23b4:	47 ab       	std	Z+55, r20	; 0x37
    23b6:	50 af       	std	Z+56, r21	; 0x38
    23b8:	1c c0       	rjmp	.+56     	; 0x23f2 <gc_execute_block+0x45c>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    23ba:	10 e0       	ldi	r17, 0x00	; 0
    23bc:	00 0f       	add	r16, r16
    23be:	11 1f       	adc	r17, r17
    23c0:	00 0f       	add	r16, r16
    23c2:	11 1f       	adc	r17, r17
    23c4:	04 54       	subi	r16, 0x44	; 68
    23c6:	10 4e       	sbci	r17, 0xE0	; 224
    23c8:	f8 01       	movw	r30, r16
    23ca:	65 a9       	ldd	r22, Z+53	; 0x35
    23cc:	76 a9       	ldd	r23, Z+54	; 0x36
    23ce:	87 a9       	ldd	r24, Z+55	; 0x37
    23d0:	90 ad       	ldd	r25, Z+56	; 0x38
    23d2:	0e 94 a7 3b 	call	0x774e	; 0x774e <__addsf3>
    23d6:	d8 01       	movw	r26, r16
    23d8:	d5 96       	adiw	r26, 0x35	; 53
    23da:	6d 93       	st	X+, r22
    23dc:	7d 93       	st	X+, r23
    23de:	8d 93       	st	X+, r24
    23e0:	9c 93       	st	X, r25
    23e2:	d8 97       	sbiw	r26, 0x38	; 56
    23e4:	06 c0       	rjmp	.+12     	; 0x23f2 <gc_execute_block+0x45c>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    23e6:	5e 01       	movw	r10, r28
    23e8:	08 94       	sec
    23ea:	a1 1c       	adc	r10, r1
    23ec:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    23ee:	77 24       	eor	r7, r7
    23f0:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    23f2:	8d e1       	ldi	r24, 0x1D	; 29
    23f4:	91 e2       	ldi	r25, 0x21	; 33
    23f6:	6e e1       	ldi	r22, 0x1E	; 30
    23f8:	71 e2       	ldi	r23, 0x21	; 33
    23fa:	42 e2       	ldi	r20, 0x22	; 34
    23fc:	51 e2       	ldi	r21, 0x21	; 33
    23fe:	94 01       	movw	r18, r8
    2400:	85 01       	movw	r16, r10
    2402:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_gc_next_statement>
    2406:	89 2b       	or	r24, r25
    2408:	09 f0       	breq	.+2      	; 0x240c <gc_execute_block+0x476>
    240a:	27 cf       	rjmp	.-434    	; 0x225a <gc_execute_block+0x2c4>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    240c:	80 91 1c 21 	lds	r24, 0x211C
    2410:	88 23       	and	r24, r24
    2412:	09 f0       	breq	.+2      	; 0x2416 <gc_execute_block+0x480>
    2414:	ad c2       	rjmp	.+1370   	; 0x2970 <gc_execute_block+0x9da>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    2416:	80 91 6d 21 	lds	r24, 0x216D
    241a:	88 23       	and	r24, r24
    241c:	71 f0       	breq	.+28     	; 0x243a <gc_execute_block+0x4a4>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    241e:	40 91 6e 21 	lds	r20, 0x216E
    2422:	50 91 6f 21 	lds	r21, 0x216F
    2426:	66 27       	eor	r22, r22
    2428:	57 fd       	sbrc	r21, 7
    242a:	60 95       	com	r22
    242c:	76 2f       	mov	r23, r22
    242e:	99 27       	eor	r25, r25
    2430:	87 fd       	sbrc	r24, 7
    2432:	90 95       	com	r25
    2434:	0e 94 12 23 	call	0x4624	; 0x4624 <spindle_run>
    2438:	02 c0       	rjmp	.+4      	; 0x243e <gc_execute_block+0x4a8>
	} else {
		spindle_stop();
    243a:	0e 94 22 23 	call	0x4644	; 0x4644 <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    243e:	80 91 71 21 	lds	r24, 0x2171
    2442:	81 30       	cpi	r24, 0x01	; 1
    2444:	41 f0       	breq	.+16     	; 0x2456 <gc_execute_block+0x4c0>
    2446:	81 30       	cpi	r24, 0x01	; 1
    2448:	c8 f0       	brcs	.+50     	; 0x247c <gc_execute_block+0x4e6>
    244a:	82 30       	cpi	r24, 0x02	; 2
    244c:	09 f0       	breq	.+2      	; 0x2450 <gc_execute_block+0x4ba>
    244e:	81 c2       	rjmp	.+1282   	; 0x2952 <gc_execute_block+0x9bc>
    	case NEXT_ACTION_GO_HOME: mc_go_home(); break;
    2450:	0e 94 ae 1a 	call	0x355c	; 0x355c <mc_go_home>
    2454:	7e c2       	rjmp	.+1276   	; 0x2952 <gc_execute_block+0x9bc>
		case NEXT_ACTION_DWELL: mc_dwell(trunc(gc.dwell_time*1000)); break;
    2456:	60 91 2d 21 	lds	r22, 0x212D
    245a:	70 91 2e 21 	lds	r23, 0x212E
    245e:	80 91 2f 21 	lds	r24, 0x212F
    2462:	90 91 30 21 	lds	r25, 0x2130
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	4a e7       	ldi	r20, 0x7A	; 122
    246c:	54 e4       	ldi	r21, 0x44	; 68
    246e:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    2472:	0e 94 ba 3c 	call	0x7974	; 0x7974 <__fixunssfsi>
    2476:	0e 94 c2 1a 	call	0x3584	; 0x3584 <mc_dwell>
    247a:	6b c2       	rjmp	.+1238   	; 0x2952 <gc_execute_block+0x9bc>
		case NEXT_ACTION_DEFAULT: 
 		switch (gc.motion_mode) {
    247c:	b0 91 27 21 	lds	r27, 0x2127
    2480:	b8 8f       	std	Y+24, r27	; 0x18
    2482:	b2 30       	cpi	r27, 0x02	; 2
    2484:	20 f0       	brcs	.+8      	; 0x248e <gc_execute_block+0x4f8>
    2486:	b4 30       	cpi	r27, 0x04	; 4
    2488:	08 f0       	brcs	.+2      	; 0x248c <gc_execute_block+0x4f6>
    248a:	63 c2       	rjmp	.+1222   	; 0x2952 <gc_execute_block+0x9bc>
    248c:	31 c0       	rjmp	.+98     	; 0x24f0 <gc_execute_block+0x55a>
			case MOTION_MODE_CANCEL: break;
			case MOTION_MODE_RAPID_LINEAR:
			case MOTION_MODE_LINEAR:
				gc.status = mc_line_nonblock(gc.target[X_AXIS], 
    248e:	60 91 51 21 	lds	r22, 0x2151
    2492:	70 91 52 21 	lds	r23, 0x2152
    2496:	80 91 53 21 	lds	r24, 0x2153
    249a:	90 91 54 21 	lds	r25, 0x2154
    249e:	20 91 55 21 	lds	r18, 0x2155
    24a2:	30 91 56 21 	lds	r19, 0x2156
    24a6:	40 91 57 21 	lds	r20, 0x2157
    24aa:	50 91 58 21 	lds	r21, 0x2158
    24ae:	e0 90 59 21 	lds	r14, 0x2159
    24b2:	f0 90 5a 21 	lds	r15, 0x215A
    24b6:	00 91 5b 21 	lds	r16, 0x215B
    24ba:	10 91 5c 21 	lds	r17, 0x215C
    24be:	80 90 28 21 	lds	r8, 0x2128
    24c2:	88 20       	and	r8, r8
    24c4:	49 f0       	breq	.+18     	; 0x24d8 <gc_execute_block+0x542>
    24c6:	a0 90 41 21 	lds	r10, 0x2141
    24ca:	b0 90 42 21 	lds	r11, 0x2142
    24ce:	c0 90 43 21 	lds	r12, 0x2143
    24d2:	d0 90 44 21 	lds	r13, 0x2144
    24d6:	08 c0       	rjmp	.+16     	; 0x24e8 <gc_execute_block+0x552>
    24d8:	a0 90 35 21 	lds	r10, 0x2135
    24dc:	b0 90 36 21 	lds	r11, 0x2136
    24e0:	c0 90 37 21 	lds	r12, 0x2137
    24e4:	d0 90 38 21 	lds	r13, 0x2138
    24e8:	99 24       	eor	r9, r9
    24ea:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <mc_line_nonblock>
    24ee:	16 c1       	rjmp	.+556    	; 0x271c <gc_execute_block+0x786>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    24f0:	80 91 2b 21 	lds	r24, 0x212B
    24f4:	88 23       	and	r24, r24
    24f6:	09 f4       	brne	.+2      	; 0x24fa <gc_execute_block+0x564>
    24f8:	e8 c0       	rjmp	.+464    	; 0x26ca <gc_execute_block+0x734>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    24fa:	e0 91 69 21 	lds	r30, 0x2169
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	ee 0f       	add	r30, r30
    2502:	ff 1f       	adc	r31, r31
    2504:	ee 0f       	add	r30, r30
    2506:	ff 1f       	adc	r31, r31
    2508:	e4 5e       	subi	r30, 0xE4	; 228
    250a:	fe 4d       	sbci	r31, 0xDE	; 222
    250c:	65 a9       	ldd	r22, Z+53	; 0x35
    250e:	76 a9       	ldd	r23, Z+54	; 0x36
    2510:	87 a9       	ldd	r24, Z+55	; 0x37
    2512:	90 ad       	ldd	r25, Z+56	; 0x38
    2514:	21 a5       	ldd	r18, Z+41	; 0x29
    2516:	32 a5       	ldd	r19, Z+42	; 0x2a
    2518:	43 a5       	ldd	r20, Z+43	; 0x2b
    251a:	54 a5       	ldd	r21, Z+44	; 0x2c
    251c:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    2520:	6f 83       	std	Y+7, r22	; 0x07
    2522:	78 87       	std	Y+8, r23	; 0x08
    2524:	89 87       	std	Y+9, r24	; 0x09
    2526:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    2528:	e0 91 6a 21 	lds	r30, 0x216A
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	ee 0f       	add	r30, r30
    2530:	ff 1f       	adc	r31, r31
    2532:	ee 0f       	add	r30, r30
    2534:	ff 1f       	adc	r31, r31
    2536:	e4 5e       	subi	r30, 0xE4	; 228
    2538:	fe 4d       	sbci	r31, 0xDE	; 222
    253a:	65 a9       	ldd	r22, Z+53	; 0x35
    253c:	76 a9       	ldd	r23, Z+54	; 0x36
    253e:	87 a9       	ldd	r24, Z+55	; 0x37
    2540:	90 ad       	ldd	r25, Z+56	; 0x38
    2542:	21 a5       	ldd	r18, Z+41	; 0x29
    2544:	32 a5       	ldd	r19, Z+42	; 0x2a
    2546:	43 a5       	ldd	r20, Z+43	; 0x2b
    2548:	54 a5       	ldd	r21, Z+44	; 0x2c
    254a:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    254e:	1b 01       	movw	r2, r22
    2550:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    2552:	10 92 5d 21 	sts	0x215D, r1
    2556:	10 92 5e 21 	sts	0x215E, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    255a:	60 90 31 21 	lds	r6, 0x2131
    255e:	70 90 32 21 	lds	r7, 0x2132
    2562:	80 90 33 21 	lds	r8, 0x2133
    2566:	90 90 34 21 	lds	r9, 0x2134
    256a:	c4 01       	movw	r24, r8
    256c:	b3 01       	movw	r22, r6
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e8       	ldi	r20, 0x80	; 128
    2574:	50 e4       	ldi	r21, 0x40	; 64
    2576:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    257a:	a4 01       	movw	r20, r8
    257c:	93 01       	movw	r18, r6
    257e:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    2582:	5b 01       	movw	r10, r22
    2584:	6c 01       	movw	r12, r24
    2586:	6f 81       	ldd	r22, Y+7	; 0x07
    2588:	78 85       	ldd	r23, Y+8	; 0x08
    258a:	89 85       	ldd	r24, Y+9	; 0x09
    258c:	9a 85       	ldd	r25, Y+10	; 0x0a
    258e:	9b 01       	movw	r18, r22
    2590:	ac 01       	movw	r20, r24
    2592:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    2596:	7b 01       	movw	r14, r22
    2598:	8c 01       	movw	r16, r24
    259a:	c2 01       	movw	r24, r4
    259c:	b1 01       	movw	r22, r2
    259e:	a2 01       	movw	r20, r4
    25a0:	91 01       	movw	r18, r2
    25a2:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    25a6:	9b 01       	movw	r18, r22
    25a8:	ac 01       	movw	r20, r24
    25aa:	c8 01       	movw	r24, r16
    25ac:	b7 01       	movw	r22, r14
    25ae:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    25b2:	9b 01       	movw	r18, r22
    25b4:	ac 01       	movw	r20, r24
    25b6:	c6 01       	movw	r24, r12
    25b8:	b5 01       	movw	r22, r10
    25ba:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    25be:	0e 94 75 3f 	call	0x7eea	; 0x7eea <sqrt>
    25c2:	7b 01       	movw	r14, r22
    25c4:	8c 01       	movw	r16, r24
    25c6:	6f 81       	ldd	r22, Y+7	; 0x07
    25c8:	78 85       	ldd	r23, Y+8	; 0x08
    25ca:	89 85       	ldd	r24, Y+9	; 0x09
    25cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ce:	a2 01       	movw	r20, r4
    25d0:	91 01       	movw	r18, r2
    25d2:	0e 94 43 3e 	call	0x7c86	; 0x7c86 <hypot>
    25d6:	9b 01       	movw	r18, r22
    25d8:	ac 01       	movw	r20, r24
    25da:	17 fb       	bst	r17, 7
    25dc:	10 95       	com	r17
    25de:	17 f9       	bld	r17, 7
    25e0:	10 95       	com	r17
    25e2:	c8 01       	movw	r24, r16
    25e4:	b7 01       	movw	r22, r14
    25e6:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    25ea:	7b 01       	movw	r14, r22
    25ec:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    25ee:	a8 01       	movw	r20, r16
    25f0:	97 01       	movw	r18, r14
    25f2:	0e 94 bd 3f 	call	0x7f7a	; 0x7f7a <__unordsf2>
    25f6:	88 23       	and	r24, r24
    25f8:	11 f0       	breq	.+4      	; 0x25fe <gc_execute_block+0x668>
		FAIL(TG_FLOATING_POINT_ERROR); 
    25fa:	8d e0       	ldi	r24, 0x0D	; 13
    25fc:	8f c0       	rjmp	.+286    	; 0x271c <gc_execute_block+0x786>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    25fe:	e8 8d       	ldd	r30, Y+24	; 0x18
    2600:	e3 30       	cpi	r30, 0x03	; 3
    2602:	21 f4       	brne	.+8      	; 0x260c <gc_execute_block+0x676>
		h_x2_div_d = -h_x2_div_d;
    2604:	17 fb       	bst	r17, 7
    2606:	10 95       	com	r17
    2608:	17 f9       	bld	r17, 7
    260a:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    260c:	c4 01       	movw	r24, r8
    260e:	b3 01       	movw	r22, r6
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	50 e0       	ldi	r21, 0x00	; 0
    2618:	0e 94 46 3c 	call	0x788c	; 0x788c <__cmpsf2>
    261c:	88 23       	and	r24, r24
    261e:	24 f4       	brge	.+8      	; 0x2628 <gc_execute_block+0x692>
		h_x2_div_d = -h_x2_div_d; 
    2620:	17 fb       	bst	r17, 7
    2622:	10 95       	com	r17
    2624:	17 f9       	bld	r17, 7
    2626:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    2628:	80 91 69 21 	lds	r24, 0x2169
    262c:	c8 2e       	mov	r12, r24
    262e:	dd 24       	eor	r13, r13
    2630:	cc 0c       	add	r12, r12
    2632:	dd 1c       	adc	r13, r13
    2634:	cc 0c       	add	r12, r12
    2636:	dd 1c       	adc	r13, r13
    2638:	2d e5       	ldi	r18, 0x5D	; 93
    263a:	31 e2       	ldi	r19, 0x21	; 33
    263c:	c2 0e       	add	r12, r18
    263e:	d3 1e       	adc	r13, r19
    2640:	c2 01       	movw	r24, r4
    2642:	b1 01       	movw	r22, r2
    2644:	a8 01       	movw	r20, r16
    2646:	97 01       	movw	r18, r14
    2648:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    264c:	9b 01       	movw	r18, r22
    264e:	ac 01       	movw	r20, r24
    2650:	6f 81       	ldd	r22, Y+7	; 0x07
    2652:	78 85       	ldd	r23, Y+8	; 0x08
    2654:	89 85       	ldd	r24, Y+9	; 0x09
    2656:	9a 85       	ldd	r25, Y+10	; 0x0a
    2658:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e0       	ldi	r20, 0x00	; 0
    2662:	5f e3       	ldi	r21, 0x3F	; 63
    2664:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    2668:	d6 01       	movw	r26, r12
    266a:	6d 93       	st	X+, r22
    266c:	7d 93       	st	X+, r23
    266e:	8d 93       	st	X+, r24
    2670:	9c 93       	st	X, r25
    2672:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    2674:	80 91 6a 21 	lds	r24, 0x216A
    2678:	c8 2e       	mov	r12, r24
    267a:	dd 24       	eor	r13, r13
    267c:	cc 0c       	add	r12, r12
    267e:	dd 1c       	adc	r13, r13
    2680:	cc 0c       	add	r12, r12
    2682:	dd 1c       	adc	r13, r13
    2684:	ed e5       	ldi	r30, 0x5D	; 93
    2686:	f1 e2       	ldi	r31, 0x21	; 33
    2688:	ce 0e       	add	r12, r30
    268a:	df 1e       	adc	r13, r31
    268c:	6f 81       	ldd	r22, Y+7	; 0x07
    268e:	78 85       	ldd	r23, Y+8	; 0x08
    2690:	89 85       	ldd	r24, Y+9	; 0x09
    2692:	9a 85       	ldd	r25, Y+10	; 0x0a
    2694:	a8 01       	movw	r20, r16
    2696:	97 01       	movw	r18, r14
    2698:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    269c:	9b 01       	movw	r18, r22
    269e:	ac 01       	movw	r20, r24
    26a0:	c2 01       	movw	r24, r4
    26a2:	b1 01       	movw	r22, r2
    26a4:	0e 94 a7 3b 	call	0x774e	; 0x774e <__addsf3>
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e0       	ldi	r20, 0x00	; 0
    26ae:	5f e3       	ldi	r21, 0x3F	; 63
    26b0:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    26b4:	d6 01       	movw	r26, r12
    26b6:	6d 93       	st	X+, r22
    26b8:	7d 93       	st	X+, r23
    26ba:	8d 93       	st	X+, r24
    26bc:	9c 93       	st	X, r25
    26be:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    26c0:	80 91 1c 21 	lds	r24, 0x211C
    26c4:	88 23       	and	r24, r24
    26c6:	09 f0       	breq	.+2      	; 0x26ca <gc_execute_block+0x734>
    26c8:	44 c1       	rjmp	.+648    	; 0x2952 <gc_execute_block+0x9bc>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    26ca:	e0 91 69 21 	lds	r30, 0x2169
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	ee 0f       	add	r30, r30
    26d2:	ff 1f       	adc	r31, r31
    26d4:	ee 0f       	add	r30, r30
    26d6:	ff 1f       	adc	r31, r31
    26d8:	e3 5a       	subi	r30, 0xA3	; 163
    26da:	fe 4d       	sbci	r31, 0xDE	; 222
    26dc:	60 81       	ld	r22, Z
    26de:	71 81       	ldd	r23, Z+1	; 0x01
    26e0:	82 81       	ldd	r24, Z+2	; 0x02
    26e2:	93 81       	ldd	r25, Z+3	; 0x03
    26e4:	90 58       	subi	r25, 0x80	; 128
    26e6:	e0 91 6a 21 	lds	r30, 0x216A
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	ee 0f       	add	r30, r30
    26ee:	ff 1f       	adc	r31, r31
    26f0:	ee 0f       	add	r30, r30
    26f2:	ff 1f       	adc	r31, r31
    26f4:	e3 5a       	subi	r30, 0xA3	; 163
    26f6:	fe 4d       	sbci	r31, 0xDE	; 222
    26f8:	20 81       	ld	r18, Z
    26fa:	31 81       	ldd	r19, Z+1	; 0x01
    26fc:	42 81       	ldd	r20, Z+2	; 0x02
    26fe:	53 81       	ldd	r21, Z+3	; 0x03
    2700:	50 58       	subi	r21, 0x80	; 128
    2702:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <theta>
    2706:	6f 87       	std	Y+15, r22	; 0x0f
    2708:	78 8b       	std	Y+16, r23	; 0x10
    270a:	89 8b       	std	Y+17, r24	; 0x11
    270c:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    270e:	9b 01       	movw	r18, r22
    2710:	ac 01       	movw	r20, r24
    2712:	0e 94 bd 3f 	call	0x7f7a	; 0x7f7a <__unordsf2>
    2716:	88 23       	and	r24, r24
    2718:	21 f0       	breq	.+8      	; 0x2722 <gc_execute_block+0x78c>
		FAIL(TG_ARC_ERROR); 
    271a:	8f e0       	ldi	r24, 0x0F	; 15
    271c:	80 93 1c 21 	sts	0x211C, r24
    2720:	18 c1       	rjmp	.+560    	; 0x2952 <gc_execute_block+0x9bc>
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    2722:	e0 91 69 21 	lds	r30, 0x2169
    2726:	0e 2f       	mov	r16, r30
    2728:	10 e0       	ldi	r17, 0x00	; 0
    272a:	e0 91 6a 21 	lds	r30, 0x216A
    272e:	ce 2e       	mov	r12, r30
    2730:	dd 24       	eor	r13, r13
    2732:	00 0f       	add	r16, r16
    2734:	11 1f       	adc	r17, r17
    2736:	00 0f       	add	r16, r16
    2738:	11 1f       	adc	r17, r17
    273a:	04 5e       	subi	r16, 0xE4	; 228
    273c:	1e 4d       	sbci	r17, 0xDE	; 222
    273e:	f8 01       	movw	r30, r16
    2740:	ef 5b       	subi	r30, 0xBF	; 191
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	d8 01       	movw	r26, r16
    2746:	d5 96       	adiw	r26, 0x35	; 53
    2748:	6d 91       	ld	r22, X+
    274a:	7d 91       	ld	r23, X+
    274c:	8d 91       	ld	r24, X+
    274e:	9c 91       	ld	r25, X
    2750:	d8 97       	sbiw	r26, 0x38	; 56
    2752:	20 81       	ld	r18, Z
    2754:	31 81       	ldd	r19, Z+1	; 0x01
    2756:	42 81       	ldd	r20, Z+2	; 0x02
    2758:	53 81       	ldd	r21, Z+3	; 0x03
    275a:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    275e:	f8 01       	movw	r30, r16
    2760:	21 a5       	ldd	r18, Z+41	; 0x29
    2762:	32 a5       	ldd	r19, Z+42	; 0x2a
    2764:	43 a5       	ldd	r20, Z+43	; 0x2b
    2766:	54 a5       	ldd	r21, Z+44	; 0x2c
    2768:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    276c:	7b 01       	movw	r14, r22
    276e:	8c 01       	movw	r16, r24
    2770:	cc 0c       	add	r12, r12
    2772:	dd 1c       	adc	r13, r13
    2774:	cc 0c       	add	r12, r12
    2776:	dd 1c       	adc	r13, r13
    2778:	2c e1       	ldi	r18, 0x1C	; 28
    277a:	31 e2       	ldi	r19, 0x21	; 33
    277c:	c2 0e       	add	r12, r18
    277e:	d3 1e       	adc	r13, r19
    2780:	f6 01       	movw	r30, r12
    2782:	ef 5b       	subi	r30, 0xBF	; 191
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	d6 01       	movw	r26, r12
    2788:	d5 96       	adiw	r26, 0x35	; 53
    278a:	6d 91       	ld	r22, X+
    278c:	7d 91       	ld	r23, X+
    278e:	8d 91       	ld	r24, X+
    2790:	9c 91       	ld	r25, X
    2792:	d8 97       	sbiw	r26, 0x38	; 56
    2794:	20 81       	ld	r18, Z
    2796:	31 81       	ldd	r19, Z+1	; 0x01
    2798:	42 81       	ldd	r20, Z+2	; 0x02
    279a:	53 81       	ldd	r21, Z+3	; 0x03
    279c:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    27a0:	f6 01       	movw	r30, r12
    27a2:	21 a5       	ldd	r18, Z+41	; 0x29
    27a4:	32 a5       	ldd	r19, Z+42	; 0x2a
    27a6:	43 a5       	ldd	r20, Z+43	; 0x2b
    27a8:	54 a5       	ldd	r21, Z+44	; 0x2c
    27aa:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    27ae:	9b 01       	movw	r18, r22
    27b0:	ac 01       	movw	r20, r24
    27b2:	c8 01       	movw	r24, r16
    27b4:	b7 01       	movw	r22, r14
    27b6:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <theta>
    27ba:	7b 01       	movw	r14, r22
    27bc:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    27be:	a8 01       	movw	r20, r16
    27c0:	97 01       	movw	r18, r14
    27c2:	0e 94 bd 3f 	call	0x7f7a	; 0x7f7a <__unordsf2>
    27c6:	88 23       	and	r24, r24
    27c8:	09 f0       	breq	.+2      	; 0x27cc <gc_execute_block+0x836>
    27ca:	a7 cf       	rjmp	.-178    	; 0x271a <gc_execute_block+0x784>
		FAIL(TG_ARC_ERROR); 
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    27cc:	c8 01       	movw	r24, r16
    27ce:	b7 01       	movw	r22, r14
    27d0:	2f 85       	ldd	r18, Y+15	; 0x0f
    27d2:	38 89       	ldd	r19, Y+16	; 0x10
    27d4:	49 89       	ldd	r20, Y+17	; 0x11
    27d6:	5a 89       	ldd	r21, Y+18	; 0x12
    27d8:	0e 94 46 3c 	call	0x788c	; 0x788c <__cmpsf2>
    27dc:	88 23       	and	r24, r24
    27de:	54 f4       	brge	.+20     	; 0x27f4 <gc_execute_block+0x85e>
		theta_end += 2*M_PI;
    27e0:	c8 01       	movw	r24, r16
    27e2:	b7 01       	movw	r22, r14
    27e4:	2b ed       	ldi	r18, 0xDB	; 219
    27e6:	3f e0       	ldi	r19, 0x0F	; 15
    27e8:	49 ec       	ldi	r20, 0xC9	; 201
    27ea:	50 e4       	ldi	r21, 0x40	; 64
    27ec:	0e 94 a7 3b 	call	0x774e	; 0x774e <__addsf3>
    27f0:	7b 01       	movw	r14, r22
    27f2:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    27f4:	c8 01       	movw	r24, r16
    27f6:	b7 01       	movw	r22, r14
    27f8:	2f 85       	ldd	r18, Y+15	; 0x0f
    27fa:	38 89       	ldd	r19, Y+16	; 0x10
    27fc:	49 89       	ldd	r20, Y+17	; 0x11
    27fe:	5a 89       	ldd	r21, Y+18	; 0x12
    2800:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    2804:	6b 87       	std	Y+11, r22	; 0x0b
    2806:	7c 87       	std	Y+12, r23	; 0x0c
    2808:	8d 87       	std	Y+13, r24	; 0x0d
    280a:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    280c:	80 91 27 21 	lds	r24, 0x2127
    2810:	83 30       	cpi	r24, 0x03	; 3
    2812:	71 f4       	brne	.+28     	; 0x2830 <gc_execute_block+0x89a>
		angular_travel = angular_travel - 2*M_PI;
    2814:	6b 85       	ldd	r22, Y+11	; 0x0b
    2816:	7c 85       	ldd	r23, Y+12	; 0x0c
    2818:	8d 85       	ldd	r24, Y+13	; 0x0d
    281a:	9e 85       	ldd	r25, Y+14	; 0x0e
    281c:	2b ed       	ldi	r18, 0xDB	; 219
    281e:	3f e0       	ldi	r19, 0x0F	; 15
    2820:	49 ec       	ldi	r20, 0xC9	; 201
    2822:	50 e4       	ldi	r21, 0x40	; 64
    2824:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    2828:	6b 87       	std	Y+11, r22	; 0x0b
    282a:	7c 87       	std	Y+12, r23	; 0x0c
    282c:	8d 87       	std	Y+13, r24	; 0x0d
    282e:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2830:	80 91 69 21 	lds	r24, 0x2169
    2834:	28 2f       	mov	r18, r24
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	2d 83       	std	Y+5, r18	; 0x05
    283a:	3e 83       	std	Y+6, r19	; 0x06
    283c:	f9 01       	movw	r30, r18
    283e:	ee 0f       	add	r30, r30
    2840:	ff 1f       	adc	r31, r31
    2842:	ee 0f       	add	r30, r30
    2844:	ff 1f       	adc	r31, r31
    2846:	e3 5a       	subi	r30, 0xA3	; 163
    2848:	fe 4d       	sbci	r31, 0xDE	; 222
    284a:	e0 80       	ld	r14, Z
    284c:	f1 80       	ldd	r15, Z+1	; 0x01
    284e:	02 81       	ldd	r16, Z+2	; 0x02
    2850:	13 81       	ldd	r17, Z+3	; 0x03
    2852:	80 91 6a 21 	lds	r24, 0x216A
    2856:	a8 2f       	mov	r26, r24
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	ab 83       	std	Y+3, r26	; 0x03
    285c:	bc 83       	std	Y+4, r27	; 0x04
    285e:	fd 01       	movw	r30, r26
    2860:	ee 0f       	add	r30, r30
    2862:	ff 1f       	adc	r31, r31
    2864:	ee 0f       	add	r30, r30
    2866:	ff 1f       	adc	r31, r31
    2868:	e3 5a       	subi	r30, 0xA3	; 163
    286a:	fe 4d       	sbci	r31, 0xDE	; 222
    286c:	20 81       	ld	r18, Z
    286e:	31 81       	ldd	r19, Z+1	; 0x01
    2870:	42 81       	ldd	r20, Z+2	; 0x02
    2872:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    2874:	80 91 6b 21 	lds	r24, 0x216B
    2878:	28 2e       	mov	r2, r24
    287a:	33 24       	eor	r3, r3
    287c:	f1 01       	movw	r30, r2
    287e:	ee 0f       	add	r30, r30
    2880:	ff 1f       	adc	r31, r31
    2882:	ee 0f       	add	r30, r30
    2884:	ff 1f       	adc	r31, r31
    2886:	e4 5e       	subi	r30, 0xE4	; 228
    2888:	fe 4d       	sbci	r31, 0xDE	; 222
    288a:	85 a9       	ldd	r24, Z+53	; 0x35
    288c:	96 a9       	ldd	r25, Z+54	; 0x36
    288e:	a7 a9       	ldd	r26, Z+55	; 0x37
    2890:	b0 ad       	ldd	r27, Z+56	; 0x38
    2892:	8c 8b       	std	Y+20, r24	; 0x14
    2894:	9d 8b       	std	Y+21, r25	; 0x15
    2896:	ae 8b       	std	Y+22, r26	; 0x16
    2898:	bf 8b       	std	Y+23, r27	; 0x17
    289a:	a1 a4       	ldd	r10, Z+41	; 0x29
    289c:	b2 a4       	ldd	r11, Z+42	; 0x2a
    289e:	c3 a4       	ldd	r12, Z+43	; 0x2b
    28a0:	d4 a4       	ldd	r13, Z+44	; 0x2c

	// Trace the arc
	gc.status = mc_arc_nonblock(theta_start, 
    28a2:	90 91 28 21 	lds	r25, 0x2128
    28a6:	9b 8b       	std	Y+19, r25	; 0x13
    28a8:	99 23       	and	r25, r25
    28aa:	49 f0       	breq	.+18     	; 0x28be <gc_execute_block+0x928>
    28ac:	40 90 41 21 	lds	r4, 0x2141
    28b0:	50 90 42 21 	lds	r5, 0x2142
    28b4:	60 90 43 21 	lds	r6, 0x2143
    28b8:	70 90 44 21 	lds	r7, 0x2144
    28bc:	08 c0       	rjmp	.+16     	; 0x28ce <gc_execute_block+0x938>
    28be:	40 90 35 21 	lds	r4, 0x2135
    28c2:	50 90 36 21 	lds	r5, 0x2136
    28c6:	60 90 37 21 	lds	r6, 0x2137
    28ca:	70 90 38 21 	lds	r7, 0x2138
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    28ce:	c8 01       	movw	r24, r16
    28d0:	b7 01       	movw	r22, r14
    28d2:	0e 94 43 3e 	call	0x7c86	; 0x7c86 <hypot>
    28d6:	7b 01       	movw	r14, r22
    28d8:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc_nonblock(theta_start, 
    28da:	ad b7       	in	r26, 0x3d	; 61
    28dc:	be b7       	in	r27, 0x3e	; 62
    28de:	1a 97       	sbiw	r26, 0x0a	; 10
    28e0:	ad bf       	out	0x3d, r26	; 61
    28e2:	be bf       	out	0x3e, r27	; 62
    28e4:	8d b6       	in	r8, 0x3d	; 61
    28e6:	9e b6       	in	r9, 0x3e	; 62
    28e8:	08 94       	sec
    28ea:	81 1c       	adc	r8, r1
    28ec:	91 1c       	adc	r9, r1
    28ee:	6c 89       	ldd	r22, Y+20	; 0x14
    28f0:	7d 89       	ldd	r23, Y+21	; 0x15
    28f2:	8e 89       	ldd	r24, Y+22	; 0x16
    28f4:	9f 89       	ldd	r25, Y+23	; 0x17
    28f6:	a6 01       	movw	r20, r12
    28f8:	95 01       	movw	r18, r10
    28fa:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    28fe:	5b 01       	movw	r10, r22
    2900:	6c 01       	movw	r12, r24
    2902:	2b 81       	ldd	r18, Y+3	; 0x03
    2904:	3c 81       	ldd	r19, Y+4	; 0x04
    2906:	f4 01       	movw	r30, r8
    2908:	20 83       	st	Z, r18
    290a:	31 83       	std	Z+1, r19	; 0x01
    290c:	22 82       	std	Z+2, r2	; 0x02
    290e:	33 82       	std	Z+3, r3	; 0x03
    2910:	d4 01       	movw	r26, r8
    2912:	14 96       	adiw	r26, 0x04	; 4
    2914:	4d 92       	st	X+, r4
    2916:	5d 92       	st	X+, r5
    2918:	6d 92       	st	X+, r6
    291a:	7c 92       	st	X, r7
    291c:	17 97       	sbiw	r26, 0x07	; 7
    291e:	eb 89       	ldd	r30, Y+19	; 0x13
    2920:	18 96       	adiw	r26, 0x08	; 8
    2922:	ec 93       	st	X, r30
    2924:	18 97       	sbiw	r26, 0x08	; 8
    2926:	19 96       	adiw	r26, 0x09	; 9
    2928:	1c 92       	st	X, r1
    292a:	6f 85       	ldd	r22, Y+15	; 0x0f
    292c:	78 89       	ldd	r23, Y+16	; 0x10
    292e:	89 89       	ldd	r24, Y+17	; 0x11
    2930:	9a 89       	ldd	r25, Y+18	; 0x12
    2932:	2b 85       	ldd	r18, Y+11	; 0x0b
    2934:	3c 85       	ldd	r19, Y+12	; 0x0c
    2936:	4d 85       	ldd	r20, Y+13	; 0x0d
    2938:	5e 85       	ldd	r21, Y+14	; 0x0e
    293a:	8d 80       	ldd	r8, Y+5	; 0x05
    293c:	9e 80       	ldd	r9, Y+6	; 0x06
    293e:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <mc_arc_nonblock>
    2942:	80 93 1c 21 	sts	0x211C, r24
    2946:	2d b7       	in	r18, 0x3d	; 61
    2948:	3e b7       	in	r19, 0x3e	; 62
    294a:	26 5f       	subi	r18, 0xF6	; 246
    294c:	3f 4f       	sbci	r19, 0xFF	; 255
    294e:	2d bf       	out	0x3d, r18	; 61
    2950:	3e bf       	out	0x3e, r19	; 62
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_CONTINUE)) {
    2952:	80 91 1c 21 	lds	r24, 0x211C
    2956:	88 23       	and	r24, r24
    2958:	11 f0       	breq	.+4      	; 0x295e <gc_execute_block+0x9c8>
    295a:	82 30       	cpi	r24, 0x02	; 2
    295c:	49 f4       	brne	.+18     	; 0x2970 <gc_execute_block+0x9da>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    295e:	e5 e4       	ldi	r30, 0x45	; 69
    2960:	f1 e2       	ldi	r31, 0x21	; 33
    2962:	df 01       	movw	r26, r30
    2964:	1c 96       	adiw	r26, 0x0c	; 12
    2966:	9c e0       	ldi	r25, 0x0C	; 12
    2968:	0d 90       	ld	r0, X+
    296a:	01 92       	st	Z+, r0
    296c:	91 50       	subi	r25, 0x01	; 1
    296e:	e1 f7       	brne	.-8      	; 0x2968 <gc_execute_block+0x9d2>
	};
	return(gc.status);
}
    2970:	68 96       	adiw	r28, 0x18	; 24
    2972:	cd bf       	out	0x3d, r28	; 61
    2974:	de bf       	out	0x3e, r29	; 62
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	ff 90       	pop	r15
    2980:	ef 90       	pop	r14
    2982:	df 90       	pop	r13
    2984:	cf 90       	pop	r12
    2986:	bf 90       	pop	r11
    2988:	af 90       	pop	r10
    298a:	9f 90       	pop	r9
    298c:	8f 90       	pop	r8
    298e:	7f 90       	pop	r7
    2990:	6f 90       	pop	r6
    2992:	5f 90       	pop	r5
    2994:	4f 90       	pop	r4
    2996:	3f 90       	pop	r3
    2998:	2f 90       	pop	r2
    299a:	08 95       	ret

0000299c <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	ec 01       	movw	r28, r24
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	10 c0       	rjmp	.+32     	; 0x29c8 <gc_gcode_parser+0x2c>
	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
		if (c <= ' ' ) {					// throw away WS & ctrl chars
    29a8:	e1 32       	cpi	r30, 0x21	; 33
    29aa:	70 f0       	brcs	.+28     	; 0x29c8 <gc_gcode_parser+0x2c>
			continue;
		} else if (c >= 'a' && c <= 'z') {	// convert lower to upper
    29ac:	8e 2f       	mov	r24, r30
    29ae:	81 56       	subi	r24, 0x61	; 97
    29b0:	a9 2f       	mov	r26, r25
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	9f 5f       	subi	r25, 0xFF	; 255
    29b6:	8a 31       	cpi	r24, 0x1A	; 26
    29b8:	20 f4       	brcc	.+8      	; 0x29c2 <gc_gcode_parser+0x26>
			block[j++] = c-'a'+'A';
    29ba:	ac 0f       	add	r26, r28
    29bc:	bd 1f       	adc	r27, r29
    29be:	e0 52       	subi	r30, 0x20	; 32
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <gc_gcode_parser+0x2a>
		} else {
			block[j++] = c;
    29c2:	ac 0f       	add	r26, r28
    29c4:	bd 1f       	adc	r27, r29
    29c6:	ec 93       	st	X, r30

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
    29c8:	fe 01       	movw	r30, r28
    29ca:	e2 0f       	add	r30, r18
    29cc:	f1 1d       	adc	r31, r1
    29ce:	e0 81       	ld	r30, Z
    29d0:	2f 5f       	subi	r18, 0xFF	; 255
    29d2:	ee 23       	and	r30, r30
    29d4:	49 f7       	brne	.-46     	; 0x29a8 <gc_gcode_parser+0xc>
			block[j++] = c-'a'+'A';
		} else {
			block[j++] = c;
		}
	}
	block[j] = 0;
    29d6:	fe 01       	movw	r30, r28
    29d8:	e9 0f       	add	r30, r25
    29da:	f1 1d       	adc	r31, r1
    29dc:	10 82       	st	Z, r1
{
	_gc_normalize_gcode_block(block);
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    29de:	88 81       	ld	r24, Y
    29e0:	88 32       	cpi	r24, 0x28	; 40
    29e2:	09 f4       	brne	.+2      	; 0x29e6 <gc_gcode_parser+0x4a>
    29e4:	6b c0       	rjmp	.+214    	; 0x2abc <gc_gcode_parser+0x120>
		return(TG_OK);
	}
	if (block[0] == 'Q') { 					// quit
    29e6:	81 35       	cpi	r24, 0x51	; 81
    29e8:	11 f4       	brne	.+4      	; 0x29ee <gc_gcode_parser+0x52>
    29ea:	83 e0       	ldi	r24, 0x03	; 3
    29ec:	68 c0       	rjmp	.+208    	; 0x2abe <gc_gcode_parser+0x122>
		return(TG_QUIT);
	} 
	if (block[0] == '/') { 					// ignore block delete
    29ee:	8f 32       	cpi	r24, 0x2F	; 47
    29f0:	09 f4       	brne	.+2      	; 0x29f4 <gc_gcode_parser+0x58>
    29f2:	64 c0       	rjmp	.+200    	; 0x2abc <gc_gcode_parser+0x120>
		return(TG_OK);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    29f4:	ce 01       	movw	r24, r28
    29f6:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <gc_execute_block>
    29fa:	80 93 1c 21 	sts	0x211C, r24
 * _gc_print_status
 */

void _gc_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    29fe:	8a 30       	cpi	r24, 0x0A	; 10
    2a00:	d9 f1       	breq	.+118    	; 0x2a78 <gc_gcode_parser+0xdc>
    2a02:	8b 30       	cpi	r24, 0x0B	; 11
    2a04:	50 f4       	brcc	.+20     	; 0x2a1a <gc_gcode_parser+0x7e>
    2a06:	81 30       	cpi	r24, 0x01	; 1
    2a08:	d9 f0       	breq	.+54     	; 0x2a40 <gc_gcode_parser+0xa4>
    2a0a:	81 30       	cpi	r24, 0x01	; 1
    2a0c:	a0 f0       	brcs	.+40     	; 0x2a36 <gc_gcode_parser+0x9a>
    2a0e:	83 30       	cpi	r24, 0x03	; 3
    2a10:	e1 f0       	breq	.+56     	; 0x2a4a <gc_gcode_parser+0xae>
    2a12:	88 30       	cpi	r24, 0x08	; 8
    2a14:	09 f0       	breq	.+2      	; 0x2a18 <gc_gcode_parser+0x7c>
    2a16:	4f c0       	rjmp	.+158    	; 0x2ab6 <gc_gcode_parser+0x11a>
    2a18:	2a c0       	rjmp	.+84     	; 0x2a6e <gc_gcode_parser+0xd2>
    2a1a:	8d 30       	cpi	r24, 0x0D	; 13
    2a1c:	b9 f1       	breq	.+110    	; 0x2a8c <gc_gcode_parser+0xf0>
    2a1e:	8e 30       	cpi	r24, 0x0E	; 14
    2a20:	20 f4       	brcc	.+8      	; 0x2a2a <gc_gcode_parser+0x8e>
    2a22:	8c 30       	cpi	r24, 0x0C	; 12
    2a24:	09 f0       	breq	.+2      	; 0x2a28 <gc_gcode_parser+0x8c>
    2a26:	47 c0       	rjmp	.+142    	; 0x2ab6 <gc_gcode_parser+0x11a>
    2a28:	1d c0       	rjmp	.+58     	; 0x2a64 <gc_gcode_parser+0xc8>
    2a2a:	8e 30       	cpi	r24, 0x0E	; 14
    2a2c:	51 f1       	breq	.+84     	; 0x2a82 <gc_gcode_parser+0xe6>
    2a2e:	8f 30       	cpi	r24, 0x0F	; 15
    2a30:	09 f0       	breq	.+2      	; 0x2a34 <gc_gcode_parser+0x98>
    2a32:	41 c0       	rjmp	.+130    	; 0x2ab6 <gc_gcode_parser+0x11a>
    2a34:	30 c0       	rjmp	.+96     	; 0x2a96 <gc_gcode_parser+0xfa>
		case TG_OK: {
			printf_P(PSTR("%s\n"), textbuf);
    2a36:	00 d0       	rcall	.+0      	; 0x2a38 <gc_gcode_parser+0x9c>
    2a38:	0f 92       	push	r0
    2a3a:	8c ef       	ldi	r24, 0xFC	; 252
    2a3c:	92 e0       	ldi	r25, 0x02	; 2
    2a3e:	2f c0       	rjmp	.+94     	; 0x2a9e <gc_gcode_parser+0x102>
#endif
			break; 
		};

		case TG_NOOP: 
			printf_P(PSTR("No operation\n")); 
    2a40:	0f 92       	push	r0
    2a42:	0f 92       	push	r0
    2a44:	8e ee       	ldi	r24, 0xEE	; 238
    2a46:	92 e0       	ldi	r25, 0x02	; 2
    2a48:	04 c0       	rjmp	.+8      	; 0x2a52 <gc_gcode_parser+0xb6>
			printf_P(PSTR("Gcode Continuation for: %s\n"), textbuf); 
#endif
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Gcode Mode\n")); 
    2a4a:	0f 92       	push	r0
    2a4c:	0f 92       	push	r0
    2a4e:	89 ed       	ldi	r24, 0xD9	; 217
    2a50:	92 e0       	ldi	r25, 0x02	; 2
    2a52:	ed b7       	in	r30, 0x3d	; 61
    2a54:	fe b7       	in	r31, 0x3e	; 62
    2a56:	81 83       	std	Z+1, r24	; 0x01
    2a58:	92 83       	std	Z+2, r25	; 0x02
    2a5a:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	29 c0       	rjmp	.+82     	; 0x2ab6 <gc_gcode_parser+0x11a>
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2a64:	00 d0       	rcall	.+0      	; 0x2a66 <gc_gcode_parser+0xca>
    2a66:	0f 92       	push	r0
    2a68:	82 ec       	ldi	r24, 0xC2	; 194
    2a6a:	92 e0       	ldi	r25, 0x02	; 2
    2a6c:	18 c0       	rjmp	.+48     	; 0x2a9e <gc_gcode_parser+0x102>
			break;

		case TG_EXPECTED_COMMAND_LETTER: 
			printf_P(PSTR("Expected Command Letter: %s\n"), textbuf); 
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <gc_gcode_parser+0xd4>
    2a70:	0f 92       	push	r0
    2a72:	85 ea       	ldi	r24, 0xA5	; 165
    2a74:	92 e0       	ldi	r25, 0x02	; 2
    2a76:	13 c0       	rjmp	.+38     	; 0x2a9e <gc_gcode_parser+0x102>
			break;

		case TG_UNSUPPORTED_STATEMENT: 
			printf_P(PSTR("Unsupported Statement: %s\n"), textbuf); 
    2a78:	00 d0       	rcall	.+0      	; 0x2a7a <gc_gcode_parser+0xde>
    2a7a:	0f 92       	push	r0
    2a7c:	8a e8       	ldi	r24, 0x8A	; 138
    2a7e:	92 e0       	ldi	r25, 0x02	; 2
    2a80:	0e c0       	rjmp	.+28     	; 0x2a9e <gc_gcode_parser+0x102>
			break;

		case TG_MOTION_CONTROL_ERROR: 
			printf_P(PSTR("Motion Control Error: %s\n"), textbuf); 
    2a82:	00 d0       	rcall	.+0      	; 0x2a84 <gc_gcode_parser+0xe8>
    2a84:	0f 92       	push	r0
    2a86:	80 e7       	ldi	r24, 0x70	; 112
    2a88:	92 e0       	ldi	r25, 0x02	; 2
    2a8a:	09 c0       	rjmp	.+18     	; 0x2a9e <gc_gcode_parser+0x102>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2a8c:	00 d0       	rcall	.+0      	; 0x2a8e <gc_gcode_parser+0xf2>
    2a8e:	0f 92       	push	r0
    2a90:	86 e5       	ldi	r24, 0x56	; 86
    2a92:	92 e0       	ldi	r25, 0x02	; 2
    2a94:	04 c0       	rjmp	.+8      	; 0x2a9e <gc_gcode_parser+0x102>
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    2a96:	00 d0       	rcall	.+0      	; 0x2a98 <gc_gcode_parser+0xfc>
    2a98:	0f 92       	push	r0
    2a9a:	8b e3       	ldi	r24, 0x3B	; 59
    2a9c:	92 e0       	ldi	r25, 0x02	; 2
    2a9e:	ed b7       	in	r30, 0x3d	; 61
    2aa0:	fe b7       	in	r31, 0x3e	; 62
    2aa2:	81 83       	std	Z+1, r24	; 0x01
    2aa4:	92 83       	std	Z+2, r25	; 0x02
    2aa6:	c3 83       	std	Z+3, r28	; 0x03
    2aa8:	d4 83       	std	Z+4, r29	; 0x04
    2aaa:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
	if (block[0] == '/') { 					// ignore block delete
		return(TG_OK);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
	_gc_print_status(gc.status, block);
	return (gc.status);
    2ab6:	80 91 1c 21 	lds	r24, 0x211C
    2aba:	01 c0       	rjmp	.+2      	; 0x2abe <gc_gcode_parser+0x122>
    2abc:	80 e0       	ldi	r24, 0x00	; 0
}
    2abe:	df 91       	pop	r29
    2ac0:	cf 91       	pop	r28
    2ac2:	08 95       	ret

00002ac4 <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2ac4:	cf 92       	push	r12
    2ac6:	df 92       	push	r13
    2ac8:	ef 92       	push	r14
    2aca:	ff 92       	push	r15
    2acc:	0f 93       	push	r16
    2ace:	1f 93       	push	r17
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	c2 e5       	ldi	r28, 0x52	; 82
    2ad6:	d4 e2       	ldi	r29, 0x24	; 36
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (int i = X_AXIS; i <= A_AXIS; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2ad8:	68 81       	ld	r22, Y
    2ada:	70 e0       	ldi	r23, 0x00	; 0
    2adc:	88 27       	eor	r24, r24
    2ade:	77 fd       	sbrc	r23, 7
    2ae0:	80 95       	com	r24
    2ae2:	98 2f       	mov	r25, r24
    2ae4:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    2ae8:	9b 01       	movw	r18, r22
    2aea:	ac 01       	movw	r20, r24
    2aec:	6f 81       	ldd	r22, Y+7	; 0x07
    2aee:	78 85       	ldd	r23, Y+8	; 0x08
    2af0:	89 85       	ldd	r24, Y+9	; 0x09
    2af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af4:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    2af8:	9b 01       	movw	r18, r22
    2afa:	ac 01       	movw	r20, r24
    2afc:	60 e0       	ldi	r22, 0x00	; 0
    2afe:	70 e0       	ldi	r23, 0x00	; 0
    2b00:	84 eb       	ldi	r24, 0xB4	; 180
    2b02:	93 e4       	ldi	r25, 0x43	; 67
    2b04:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    2b08:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b0a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b0c:	4d 85       	ldd	r20, Y+13	; 0x0d
    2b0e:	5e 85       	ldd	r21, Y+14	; 0x0e
    2b10:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    2b14:	6b 8b       	std	Y+19, r22	; 0x13
    2b16:	7c 8b       	std	Y+20, r23	; 0x14
    2b18:	8d 8b       	std	Y+21, r24	; 0x15
    2b1a:	9e 8b       	std	Y+22, r25	; 0x16
    2b1c:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (int i = X_AXIS; i <= A_AXIS; i++) {
    2b1e:	84 e2       	ldi	r24, 0x24	; 36
    2b20:	c2 3b       	cpi	r28, 0xB2	; 178
    2b22:	d8 07       	cpc	r29, r24
    2b24:	c9 f6       	brne	.-78     	; 0x2ad8 <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X_AXIS].feed_steps_sec * 
    2b26:	00 91 52 24 	lds	r16, 0x2452
    2b2a:	10 e0       	ldi	r17, 0x00	; 0
    2b2c:	b8 01       	movw	r22, r16
    2b2e:	88 27       	eor	r24, r24
    2b30:	77 fd       	sbrc	r23, 7
    2b32:	80 95       	com	r24
    2b34:	98 2f       	mov	r25, r24
    2b36:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    2b3a:	9b 01       	movw	r18, r22
    2b3c:	ac 01       	movw	r20, r24
    2b3e:	60 91 59 24 	lds	r22, 0x2459
    2b42:	70 91 5a 24 	lds	r23, 0x245A
    2b46:	80 91 5b 24 	lds	r24, 0x245B
    2b4a:	90 91 5c 24 	lds	r25, 0x245C
    2b4e:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    2b52:	9b 01       	movw	r18, r22
    2b54:	ac 01       	movw	r20, r24
    2b56:	60 e0       	ldi	r22, 0x00	; 0
    2b58:	70 e0       	ldi	r23, 0x00	; 0
    2b5a:	84 eb       	ldi	r24, 0xB4	; 180
    2b5c:	93 e4       	ldi	r25, 0x43	; 67
    2b5e:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    2b62:	6b 01       	movw	r12, r22
    2b64:	7c 01       	movw	r14, r24
    2b66:	80 91 57 24 	lds	r24, 0x2457
    2b6a:	90 91 58 24 	lds	r25, 0x2458
    2b6e:	08 9f       	mul	r16, r24
    2b70:	b0 01       	movw	r22, r0
    2b72:	09 9f       	mul	r16, r25
    2b74:	70 0d       	add	r23, r0
    2b76:	18 9f       	mul	r17, r24
    2b78:	70 0d       	add	r23, r0
    2b7a:	11 24       	eor	r1, r1
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	0e 94 e6 3c 	call	0x79cc	; 0x79cc <__floatunsisf>
    2b84:	a7 01       	movw	r20, r14
    2b86:	96 01       	movw	r18, r12
    2b88:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    2b8c:	60 93 4a 24 	sts	0x244A, r22
    2b90:	70 93 4b 24 	sts	0x244B, r23
    2b94:	80 93 4c 24 	sts	0x244C, r24
    2b98:	90 93 4d 24 	sts	0x244D, r25
							  cfg.a[X_AXIS].microstep) / 
							 (360/(cfg.a[X_AXIS].degree_per_step / 
							 	   cfg.a[X_AXIS].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X_AXIS].seek_steps_sec * 
    2b9c:	80 91 55 24 	lds	r24, 0x2455
    2ba0:	90 91 56 24 	lds	r25, 0x2456
    2ba4:	08 9f       	mul	r16, r24
    2ba6:	b0 01       	movw	r22, r0
    2ba8:	09 9f       	mul	r16, r25
    2baa:	70 0d       	add	r23, r0
    2bac:	18 9f       	mul	r17, r24
    2bae:	70 0d       	add	r23, r0
    2bb0:	11 24       	eor	r1, r1
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	0e 94 e6 3c 	call	0x79cc	; 0x79cc <__floatunsisf>
    2bba:	a7 01       	movw	r20, r14
    2bbc:	96 01       	movw	r18, r12
    2bbe:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    2bc2:	60 93 4e 24 	sts	0x244E, r22
    2bc6:	70 93 4f 24 	sts	0x244F, r23
    2bca:	80 93 50 24 	sts	0x2450, r24
    2bce:	90 93 51 24 	sts	0x2451, r25
							  cfg.a[X_AXIS].microstep) / 
							 (360/(cfg.a[X_AXIS].degree_per_step / 
							 	   cfg.a[X_AXIS].microstep));
}
    2bd2:	df 91       	pop	r29
    2bd4:	cf 91       	pop	r28
    2bd6:	1f 91       	pop	r17
    2bd8:	0f 91       	pop	r16
    2bda:	ff 90       	pop	r15
    2bdc:	ef 90       	pop	r14
    2bde:	df 90       	pop	r13
    2be0:	cf 90       	pop	r12
    2be2:	08 95       	ret

00002be4 <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = CONFIG_VERSION;
    2be4:	e4 e4       	ldi	r30, 0x44	; 68
    2be6:	f4 e2       	ldi	r31, 0x24	; 36
    2be8:	84 e6       	ldi	r24, 0x64	; 100
    2bea:	80 93 44 24 	sts	0x2444, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2bee:	8a e0       	ldi	r24, 0x0A	; 10
    2bf0:	97 ed       	ldi	r25, 0xD7	; 215
    2bf2:	a3 e2       	ldi	r26, 0x23	; 35
    2bf4:	bc e3       	ldi	r27, 0x3C	; 60
    2bf6:	80 93 46 24 	sts	0x2446, r24
    2bfa:	90 93 47 24 	sts	0x2447, r25
    2bfe:	a0 93 48 24 	sts	0x2448, r26
    2c02:	b0 93 49 24 	sts	0x2449, r27

	cfg.a[X_AXIS].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2c06:	8c ed       	ldi	r24, 0xDC	; 220
    2c08:	95 e0       	ldi	r25, 0x05	; 5
    2c0a:	80 93 55 24 	sts	0x2455, r24
    2c0e:	90 93 56 24 	sts	0x2456, r25
	cfg.a[Y_AXIS].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2c12:	80 93 6d 24 	sts	0x246D, r24
    2c16:	90 93 6e 24 	sts	0x246E, r25
	cfg.a[Z_AXIS].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2c1a:	80 93 85 24 	sts	0x2485, r24
    2c1e:	90 93 86 24 	sts	0x2486, r25
	cfg.a[A_AXIS].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2c22:	80 93 9d 24 	sts	0x249D, r24
    2c26:	90 93 9e 24 	sts	0x249E, r25

	cfg.a[X_AXIS].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2c2a:	80 93 57 24 	sts	0x2457, r24
    2c2e:	90 93 58 24 	sts	0x2458, r25
	cfg.a[Y_AXIS].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2c32:	80 93 6f 24 	sts	0x246F, r24
    2c36:	90 93 70 24 	sts	0x2470, r25
	cfg.a[Z_AXIS].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2c3a:	80 93 87 24 	sts	0x2487, r24
    2c3e:	90 93 88 24 	sts	0x2488, r25
	cfg.a[A_AXIS].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2c42:	80 93 9f 24 	sts	0x249F, r24
    2c46:	90 93 a0 24 	sts	0x24A0, r25

	cfg.a[X_AXIS].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2c4a:	86 e6       	ldi	r24, 0x66	; 102
    2c4c:	96 e6       	ldi	r25, 0x66	; 102
    2c4e:	a6 ee       	ldi	r26, 0xE6	; 230
    2c50:	bf e3       	ldi	r27, 0x3F	; 63
    2c52:	80 93 59 24 	sts	0x2459, r24
    2c56:	90 93 5a 24 	sts	0x245A, r25
    2c5a:	a0 93 5b 24 	sts	0x245B, r26
    2c5e:	b0 93 5c 24 	sts	0x245C, r27
	cfg.a[Y_AXIS].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2c62:	80 93 71 24 	sts	0x2471, r24
    2c66:	90 93 72 24 	sts	0x2472, r25
    2c6a:	a0 93 73 24 	sts	0x2473, r26
    2c6e:	b0 93 74 24 	sts	0x2474, r27
	cfg.a[Z_AXIS].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2c72:	80 93 89 24 	sts	0x2489, r24
    2c76:	90 93 8a 24 	sts	0x248A, r25
    2c7a:	a0 93 8b 24 	sts	0x248B, r26
    2c7e:	b0 93 8c 24 	sts	0x248C, r27
	cfg.a[A_AXIS].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2c82:	80 93 a1 24 	sts	0x24A1, r24
    2c86:	90 93 a2 24 	sts	0x24A2, r25
    2c8a:	a0 93 a3 24 	sts	0x24A3, r26
    2c8e:	b0 93 a4 24 	sts	0x24A4, r27

	cfg.a[X_AXIS].mm_per_rev = X_MM_PER_REVOLUTION;
    2c92:	8c e5       	ldi	r24, 0x5C	; 92
    2c94:	9f e8       	ldi	r25, 0x8F	; 143
    2c96:	a2 ea       	ldi	r26, 0xA2	; 162
    2c98:	bf e3       	ldi	r27, 0x3F	; 63
    2c9a:	80 93 5d 24 	sts	0x245D, r24
    2c9e:	90 93 5e 24 	sts	0x245E, r25
    2ca2:	a0 93 5f 24 	sts	0x245F, r26
    2ca6:	b0 93 60 24 	sts	0x2460, r27
	cfg.a[Y_AXIS].mm_per_rev = Y_MM_PER_REVOLUTION;
    2caa:	80 93 75 24 	sts	0x2475, r24
    2cae:	90 93 76 24 	sts	0x2476, r25
    2cb2:	a0 93 77 24 	sts	0x2477, r26
    2cb6:	b0 93 78 24 	sts	0x2478, r27
	cfg.a[Z_AXIS].mm_per_rev = Z_MM_PER_REVOLUTION;
    2cba:	80 93 8d 24 	sts	0x248D, r24
    2cbe:	90 93 8e 24 	sts	0x248E, r25
    2cc2:	a0 93 8f 24 	sts	0x248F, r26
    2cc6:	b0 93 90 24 	sts	0x2490, r27
	cfg.a[A_AXIS].mm_per_rev = A_MM_PER_REVOLUTION;
    2cca:	80 93 a5 24 	sts	0x24A5, r24
    2cce:	90 93 a6 24 	sts	0x24A6, r25
    2cd2:	a0 93 a7 24 	sts	0x24A7, r26
    2cd6:	b0 93 a8 24 	sts	0x24A8, r27
	
	cfg.a[X_AXIS].mm_travel = X_MM_TRAVEL;
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	a8 ec       	ldi	r26, 0xC8	; 200
    2ce0:	b3 e4       	ldi	r27, 0x43	; 67
    2ce2:	80 93 61 24 	sts	0x2461, r24
    2ce6:	90 93 62 24 	sts	0x2462, r25
    2cea:	a0 93 63 24 	sts	0x2463, r26
    2cee:	b0 93 64 24 	sts	0x2464, r27
	cfg.a[Y_AXIS].mm_travel = Y_MM_TRAVEL;
    2cf2:	80 93 79 24 	sts	0x2479, r24
    2cf6:	90 93 7a 24 	sts	0x247A, r25
    2cfa:	a0 93 7b 24 	sts	0x247B, r26
    2cfe:	b0 93 7c 24 	sts	0x247C, r27
	cfg.a[Z_AXIS].mm_travel = Z_MM_TRAVEL;
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	a6 e9       	ldi	r26, 0x96	; 150
    2d08:	b3 e4       	ldi	r27, 0x43	; 67
    2d0a:	80 93 91 24 	sts	0x2491, r24
    2d0e:	90 93 92 24 	sts	0x2492, r25
    2d12:	a0 93 93 24 	sts	0x2493, r26
    2d16:	b0 93 94 24 	sts	0x2494, r27
	cfg.a[A_AXIS].mm_travel = A_MM_TRAVEL;
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	a0 e8       	ldi	r26, 0x80	; 128
    2d20:	bf eb       	ldi	r27, 0xBF	; 191
    2d22:	80 93 a9 24 	sts	0x24A9, r24
    2d26:	90 93 aa 24 	sts	0x24AA, r25
    2d2a:	a0 93 ab 24 	sts	0x24AB, r26
    2d2e:	b0 93 ac 24 	sts	0x24AC, r27
	
	cfg.a[X_AXIS].microstep = X_MICROSTEPS;
    2d32:	88 e0       	ldi	r24, 0x08	; 8
    2d34:	80 93 52 24 	sts	0x2452, r24
	cfg.a[Y_AXIS].microstep = Y_MICROSTEPS;
    2d38:	80 93 6a 24 	sts	0x246A, r24
	cfg.a[Z_AXIS].microstep = Z_MICROSTEPS;
    2d3c:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A_AXIS].microstep = A_MICROSTEPS;
    2d3e:	80 93 9a 24 	sts	0x249A, r24

	cfg.a[X_AXIS].polarity = X_POLARITY;
    2d42:	10 92 54 24 	sts	0x2454, r1
	cfg.a[Y_AXIS].polarity = Y_POLARITY;
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	80 93 6c 24 	sts	0x246C, r24
	cfg.a[Z_AXIS].polarity = Z_POLARITY;
    2d4c:	10 92 84 24 	sts	0x2484, r1
	cfg.a[A_AXIS].polarity = A_POLARITY;
    2d50:	10 92 9c 24 	sts	0x249C, r1

	cfg.a[X_AXIS].limit_enable = X_LIMIT_ENABLE;
    2d54:	80 93 69 24 	sts	0x2469, r24
	cfg.a[Y_AXIS].limit_enable = Y_LIMIT_ENABLE;
    2d58:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z_AXIS].limit_enable = Z_LIMIT_ENABLE;
    2d5a:	80 93 99 24 	sts	0x2499, r24
	cfg.a[A_AXIS].limit_enable = A_LIMIT_ENABLE;
    2d5e:	10 92 b1 24 	sts	0x24B1, r1

	cfg.a[X_AXIS].low_pwr_idle = X_LOW_POWER_IDLE;
    2d62:	80 93 53 24 	sts	0x2453, r24
	cfg.a[Y_AXIS].low_pwr_idle = Y_LOW_POWER_IDLE;
    2d66:	80 93 6b 24 	sts	0x246B, r24
	cfg.a[Z_AXIS].low_pwr_idle = Z_LOW_POWER_IDLE;
    2d6a:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A_AXIS].low_pwr_idle = A_LOW_POWER_IDLE;
    2d6c:	80 93 9b 24 	sts	0x249B, r24

	_cfg_computed();		// generate computed values from the above
    2d70:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <_cfg_computed>
}
    2d74:	08 95       	ret

00002d76 <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2d76:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <cfg_reset>
}
    2d7a:	08 95       	ret

00002d7c <_cfg_print_status>:
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    2d7c:	87 30       	cpi	r24, 0x07	; 7
    2d7e:	31 f1       	breq	.+76     	; 0x2dcc <_cfg_print_status+0x50>
    2d80:	88 30       	cpi	r24, 0x08	; 8
    2d82:	30 f4       	brcc	.+12     	; 0x2d90 <_cfg_print_status+0x14>
    2d84:	82 30       	cpi	r24, 0x02	; 2
    2d86:	59 f0       	breq	.+22     	; 0x2d9e <_cfg_print_status+0x22>
    2d88:	83 30       	cpi	r24, 0x03	; 3
    2d8a:	09 f0       	breq	.+2      	; 0x2d8e <_cfg_print_status+0x12>
    2d8c:	45 c0       	rjmp	.+138    	; 0x2e18 <_cfg_print_status+0x9c>
    2d8e:	0c c0       	rjmp	.+24     	; 0x2da8 <_cfg_print_status+0x2c>
    2d90:	8d 30       	cpi	r24, 0x0D	; 13
    2d92:	09 f1       	breq	.+66     	; 0x2dd6 <_cfg_print_status+0x5a>
    2d94:	8f 30       	cpi	r24, 0x0F	; 15
    2d96:	81 f1       	breq	.+96     	; 0x2df8 <_cfg_print_status+0x7c>
    2d98:	8c 30       	cpi	r24, 0x0C	; 12
    2d9a:	f1 f5       	brne	.+124    	; 0x2e18 <_cfg_print_status+0x9c>
    2d9c:	12 c0       	rjmp	.+36     	; 0x2dc2 <_cfg_print_status+0x46>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_CONTINUE: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    2d9e:	00 d0       	rcall	.+0      	; 0x2da0 <_cfg_print_status+0x24>
    2da0:	0f 92       	push	r0
    2da2:	8a ed       	ldi	r24, 0xDA	; 218
    2da4:	94 e0       	ldi	r25, 0x04	; 4
    2da6:	1b c0       	rjmp	.+54     	; 0x2dde <_cfg_print_status+0x62>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    2da8:	0f 92       	push	r0
    2daa:	0f 92       	push	r0
    2dac:	84 ec       	ldi	r24, 0xC4	; 196
    2dae:	94 e0       	ldi	r25, 0x04	; 4
    2db0:	ed b7       	in	r30, 0x3d	; 61
    2db2:	fe b7       	in	r31, 0x3e	; 62
    2db4:	81 83       	std	Z+1, r24	; 0x01
    2db6:	92 83       	std	Z+2, r25	; 0x02
    2db8:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	08 95       	ret
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2dc2:	00 d0       	rcall	.+0      	; 0x2dc4 <_cfg_print_status+0x48>
    2dc4:	0f 92       	push	r0
    2dc6:	8d ea       	ldi	r24, 0xAD	; 173
    2dc8:	94 e0       	ldi	r25, 0x04	; 4
    2dca:	09 c0       	rjmp	.+18     	; 0x2dde <_cfg_print_status+0x62>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    2dcc:	00 d0       	rcall	.+0      	; 0x2dce <_cfg_print_status+0x52>
    2dce:	0f 92       	push	r0
    2dd0:	83 e9       	ldi	r24, 0x93	; 147
    2dd2:	94 e0       	ldi	r25, 0x04	; 4
    2dd4:	04 c0       	rjmp	.+8      	; 0x2dde <_cfg_print_status+0x62>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2dd6:	00 d0       	rcall	.+0      	; 0x2dd8 <_cfg_print_status+0x5c>
    2dd8:	0f 92       	push	r0
    2dda:	89 e7       	ldi	r24, 0x79	; 121
    2ddc:	94 e0       	ldi	r25, 0x04	; 4
    2dde:	ed b7       	in	r30, 0x3d	; 61
    2de0:	fe b7       	in	r31, 0x3e	; 62
    2de2:	81 83       	std	Z+1, r24	; 0x01
    2de4:	92 83       	std	Z+2, r25	; 0x02
    2de6:	63 83       	std	Z+3, r22	; 0x03
    2de8:	74 83       	std	Z+4, r23	; 0x04
    2dea:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	08 95       	ret
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    2df8:	00 d0       	rcall	.+0      	; 0x2dfa <_cfg_print_status+0x7e>
    2dfa:	0f 92       	push	r0
    2dfc:	8e e5       	ldi	r24, 0x5E	; 94
    2dfe:	94 e0       	ldi	r25, 0x04	; 4
    2e00:	ed b7       	in	r30, 0x3d	; 61
    2e02:	fe b7       	in	r31, 0x3e	; 62
    2e04:	81 83       	std	Z+1, r24	; 0x01
    2e06:	92 83       	std	Z+2, r25	; 0x02
    2e08:	63 83       	std	Z+3, r22	; 0x03
    2e0a:	74 83       	std	Z+4, r23	; 0x04
    2e0c:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
    2e10:	0f 90       	pop	r0
    2e12:	0f 90       	pop	r0
    2e14:	0f 90       	pop	r0
    2e16:	0f 90       	pop	r0
    2e18:	08 95       	ret

00002e1a <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    2e1a:	ef 92       	push	r14
    2e1c:	ff 92       	push	r15
    2e1e:	0f 93       	push	r16
    2e20:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    2e22:	e8 2e       	mov	r14, r24
    2e24:	ff 24       	eor	r15, r15
    2e26:	87 01       	movw	r16, r14
    2e28:	00 0f       	add	r16, r16
    2e2a:	11 1f       	adc	r17, r17
    2e2c:	f8 01       	movw	r30, r16
    2e2e:	e8 5f       	subi	r30, 0xF8	; 248
    2e30:	fc 4f       	sbci	r31, 0xFC	; 252
    2e32:	25 91       	lpm	r18, Z+
    2e34:	34 91       	lpm	r19, Z+
    2e36:	00 d0       	rcall	.+0      	; 0x2e38 <_cfg_dump_axis+0x1e>
    2e38:	0f 92       	push	r0
    2e3a:	8d ef       	ldi	r24, 0xFD	; 253
    2e3c:	96 e0       	ldi	r25, 0x06	; 6
    2e3e:	ad b7       	in	r26, 0x3d	; 61
    2e40:	be b7       	in	r27, 0x3e	; 62
    2e42:	11 96       	adiw	r26, 0x01	; 1
    2e44:	8d 93       	st	X+, r24
    2e46:	9c 93       	st	X, r25
    2e48:	12 97       	sbiw	r26, 0x02	; 2
    2e4a:	13 96       	adiw	r26, 0x03	; 3
    2e4c:	2d 93       	st	X+, r18
    2e4e:	3c 93       	st	X, r19
    2e50:	14 97       	sbiw	r26, 0x04	; 4
    2e52:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    2e56:	85 ec       	ldi	r24, 0xC5	; 197
    2e58:	96 e0       	ldi	r25, 0x06	; 6
    2e5a:	ed b7       	in	r30, 0x3d	; 61
    2e5c:	fe b7       	in	r31, 0x3e	; 62
    2e5e:	81 83       	std	Z+1, r24	; 0x01
    2e60:	92 83       	std	Z+2, r25	; 0x02
    2e62:	0e 0d       	add	r16, r14
    2e64:	1f 1d       	adc	r17, r15
    2e66:	83 e0       	ldi	r24, 0x03	; 3
    2e68:	00 0f       	add	r16, r16
    2e6a:	11 1f       	adc	r17, r17
    2e6c:	8a 95       	dec	r24
    2e6e:	e1 f7       	brne	.-8      	; 0x2e68 <_cfg_dump_axis+0x4e>
    2e70:	0c 5b       	subi	r16, 0xBC	; 188
    2e72:	1b 4d       	sbci	r17, 0xDB	; 219
    2e74:	d8 01       	movw	r26, r16
    2e76:	51 96       	adiw	r26, 0x11	; 17
    2e78:	8d 91       	ld	r24, X+
    2e7a:	9c 91       	ld	r25, X
    2e7c:	52 97       	sbiw	r26, 0x12	; 18
    2e7e:	83 83       	std	Z+3, r24	; 0x03
    2e80:	94 83       	std	Z+4, r25	; 0x04
    2e82:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    2e86:	8d e8       	ldi	r24, 0x8D	; 141
    2e88:	96 e0       	ldi	r25, 0x06	; 6
    2e8a:	ed b7       	in	r30, 0x3d	; 61
    2e8c:	fe b7       	in	r31, 0x3e	; 62
    2e8e:	81 83       	std	Z+1, r24	; 0x01
    2e90:	92 83       	std	Z+2, r25	; 0x02
    2e92:	d8 01       	movw	r26, r16
    2e94:	53 96       	adiw	r26, 0x13	; 19
    2e96:	8d 91       	ld	r24, X+
    2e98:	9c 91       	ld	r25, X
    2e9a:	54 97       	sbiw	r26, 0x14	; 20
    2e9c:	83 83       	std	Z+3, r24	; 0x03
    2e9e:	94 83       	std	Z+4, r25	; 0x04
    2ea0:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    2ea4:	ed b7       	in	r30, 0x3d	; 61
    2ea6:	fe b7       	in	r31, 0x3e	; 62
    2ea8:	31 96       	adiw	r30, 0x01	; 1
    2eaa:	8a e5       	ldi	r24, 0x5A	; 90
    2eac:	96 e0       	ldi	r25, 0x06	; 6
    2eae:	ad b7       	in	r26, 0x3d	; 61
    2eb0:	be b7       	in	r27, 0x3e	; 62
    2eb2:	11 96       	adiw	r26, 0x01	; 1
    2eb4:	8d 93       	st	X+, r24
    2eb6:	9c 93       	st	X, r25
    2eb8:	12 97       	sbiw	r26, 0x02	; 2
    2eba:	d8 01       	movw	r26, r16
    2ebc:	1e 96       	adiw	r26, 0x0e	; 14
    2ebe:	8c 91       	ld	r24, X
    2ec0:	82 83       	std	Z+2, r24	; 0x02
    2ec2:	13 82       	std	Z+3, r1	; 0x03
    2ec4:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    2ec8:	0f 92       	push	r0
    2eca:	0f 92       	push	r0
    2ecc:	83 e2       	ldi	r24, 0x23	; 35
    2ece:	96 e0       	ldi	r25, 0x06	; 6
    2ed0:	ed b7       	in	r30, 0x3d	; 61
    2ed2:	fe b7       	in	r31, 0x3e	; 62
    2ed4:	81 83       	std	Z+1, r24	; 0x01
    2ed6:	92 83       	std	Z+2, r25	; 0x02
    2ed8:	f8 01       	movw	r30, r16
    2eda:	85 89       	ldd	r24, Z+21	; 0x15
    2edc:	96 89       	ldd	r25, Z+22	; 0x16
    2ede:	a7 89       	ldd	r26, Z+23	; 0x17
    2ee0:	b0 8d       	ldd	r27, Z+24	; 0x18
    2ee2:	ed b7       	in	r30, 0x3d	; 61
    2ee4:	fe b7       	in	r31, 0x3e	; 62
    2ee6:	83 83       	std	Z+3, r24	; 0x03
    2ee8:	94 83       	std	Z+4, r25	; 0x04
    2eea:	a5 83       	std	Z+5, r26	; 0x05
    2eec:	b6 83       	std	Z+6, r27	; 0x06
    2eee:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    2ef2:	80 ef       	ldi	r24, 0xF0	; 240
    2ef4:	95 e0       	ldi	r25, 0x05	; 5
    2ef6:	ad b7       	in	r26, 0x3d	; 61
    2ef8:	be b7       	in	r27, 0x3e	; 62
    2efa:	11 96       	adiw	r26, 0x01	; 1
    2efc:	8d 93       	st	X+, r24
    2efe:	9c 93       	st	X, r25
    2f00:	12 97       	sbiw	r26, 0x02	; 2
    2f02:	f8 01       	movw	r30, r16
    2f04:	81 8d       	ldd	r24, Z+25	; 0x19
    2f06:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f08:	a3 8d       	ldd	r26, Z+27	; 0x1b
    2f0a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    2f0c:	ed b7       	in	r30, 0x3d	; 61
    2f0e:	fe b7       	in	r31, 0x3e	; 62
    2f10:	83 83       	std	Z+3, r24	; 0x03
    2f12:	94 83       	std	Z+4, r25	; 0x04
    2f14:	a5 83       	std	Z+5, r26	; 0x05
    2f16:	b6 83       	std	Z+6, r27	; 0x06
    2f18:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    2f1c:	8d eb       	ldi	r24, 0xBD	; 189
    2f1e:	95 e0       	ldi	r25, 0x05	; 5
    2f20:	ad b7       	in	r26, 0x3d	; 61
    2f22:	be b7       	in	r27, 0x3e	; 62
    2f24:	11 96       	adiw	r26, 0x01	; 1
    2f26:	8d 93       	st	X+, r24
    2f28:	9c 93       	st	X, r25
    2f2a:	12 97       	sbiw	r26, 0x02	; 2
    2f2c:	f8 01       	movw	r30, r16
    2f2e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2f30:	96 8d       	ldd	r25, Z+30	; 0x1e
    2f32:	a7 8d       	ldd	r26, Z+31	; 0x1f
    2f34:	b0 a1       	ldd	r27, Z+32	; 0x20
    2f36:	ed b7       	in	r30, 0x3d	; 61
    2f38:	fe b7       	in	r31, 0x3e	; 62
    2f3a:	83 83       	std	Z+3, r24	; 0x03
    2f3c:	94 83       	std	Z+4, r25	; 0x04
    2f3e:	a5 83       	std	Z+5, r26	; 0x05
    2f40:	b6 83       	std	Z+6, r27	; 0x06
    2f42:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	ed b7       	in	r30, 0x3d	; 61
    2f4c:	fe b7       	in	r31, 0x3e	; 62
    2f4e:	31 96       	adiw	r30, 0x01	; 1
    2f50:	8c e8       	ldi	r24, 0x8C	; 140
    2f52:	95 e0       	ldi	r25, 0x05	; 5
    2f54:	ad b7       	in	r26, 0x3d	; 61
    2f56:	be b7       	in	r27, 0x3e	; 62
    2f58:	11 96       	adiw	r26, 0x01	; 1
    2f5a:	8d 93       	st	X+, r24
    2f5c:	9c 93       	st	X, r25
    2f5e:	12 97       	sbiw	r26, 0x02	; 2
    2f60:	d8 01       	movw	r26, r16
    2f62:	95 96       	adiw	r26, 0x25	; 37
    2f64:	8c 91       	ld	r24, X
    2f66:	82 83       	std	Z+2, r24	; 0x02
    2f68:	13 82       	std	Z+3, r1	; 0x03
    2f6a:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    2f6e:	ed b7       	in	r30, 0x3d	; 61
    2f70:	fe b7       	in	r31, 0x3e	; 62
    2f72:	31 96       	adiw	r30, 0x01	; 1
    2f74:	8b e5       	ldi	r24, 0x5B	; 91
    2f76:	95 e0       	ldi	r25, 0x05	; 5
    2f78:	ad b7       	in	r26, 0x3d	; 61
    2f7a:	be b7       	in	r27, 0x3e	; 62
    2f7c:	11 96       	adiw	r26, 0x01	; 1
    2f7e:	8d 93       	st	X+, r24
    2f80:	9c 93       	st	X, r25
    2f82:	12 97       	sbiw	r26, 0x02	; 2
    2f84:	d8 01       	movw	r26, r16
    2f86:	1f 96       	adiw	r26, 0x0f	; 15
    2f88:	8c 91       	ld	r24, X
    2f8a:	82 83       	std	Z+2, r24	; 0x02
    2f8c:	13 82       	std	Z+3, r1	; 0x03
    2f8e:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    2f92:	ed b7       	in	r30, 0x3d	; 61
    2f94:	fe b7       	in	r31, 0x3e	; 62
    2f96:	31 96       	adiw	r30, 0x01	; 1
    2f98:	8b e2       	ldi	r24, 0x2B	; 43
    2f9a:	95 e0       	ldi	r25, 0x05	; 5
    2f9c:	ad b7       	in	r26, 0x3d	; 61
    2f9e:	be b7       	in	r27, 0x3e	; 62
    2fa0:	11 96       	adiw	r26, 0x01	; 1
    2fa2:	8d 93       	st	X+, r24
    2fa4:	9c 93       	st	X, r25
    2fa6:	12 97       	sbiw	r26, 0x02	; 2
    2fa8:	d8 01       	movw	r26, r16
    2faa:	50 96       	adiw	r26, 0x10	; 16
    2fac:	8c 91       	ld	r24, X
    2fae:	82 83       	std	Z+2, r24	; 0x02
    2fb0:	13 82       	std	Z+3, r1	; 0x03
    2fb2:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    2fb6:	0f 92       	push	r0
    2fb8:	0f 92       	push	r0
    2fba:	87 ef       	ldi	r24, 0xF7	; 247
    2fbc:	94 e0       	ldi	r25, 0x04	; 4
    2fbe:	ed b7       	in	r30, 0x3d	; 61
    2fc0:	fe b7       	in	r31, 0x3e	; 62
    2fc2:	81 83       	std	Z+1, r24	; 0x01
    2fc4:	92 83       	std	Z+2, r25	; 0x02
    2fc6:	f8 01       	movw	r30, r16
    2fc8:	81 a1       	ldd	r24, Z+33	; 0x21
    2fca:	92 a1       	ldd	r25, Z+34	; 0x22
    2fcc:	a3 a1       	ldd	r26, Z+35	; 0x23
    2fce:	b4 a1       	ldd	r27, Z+36	; 0x24
    2fd0:	ed b7       	in	r30, 0x3d	; 61
    2fd2:	fe b7       	in	r31, 0x3e	; 62
    2fd4:	83 83       	std	Z+3, r24	; 0x03
    2fd6:	94 83       	std	Z+4, r25	; 0x04
    2fd8:	a5 83       	std	Z+5, r26	; 0x05
    2fda:	b6 83       	std	Z+6, r27	; 0x06
    2fdc:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
    2fe0:	8d b7       	in	r24, 0x3d	; 61
    2fe2:	9e b7       	in	r25, 0x3e	; 62
    2fe4:	06 96       	adiw	r24, 0x06	; 6
    2fe6:	8d bf       	out	0x3d, r24	; 61
    2fe8:	9e bf       	out	0x3e, r25	; 62
}
    2fea:	1f 91       	pop	r17
    2fec:	0f 91       	pop	r16
    2fee:	ff 90       	pop	r15
    2ff0:	ef 90       	pop	r14
    2ff2:	08 95       	ret

00002ff4 <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    2ff4:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    2ff6:	00 d0       	rcall	.+0      	; 0x2ff8 <cfg_dump+0x4>
    2ff8:	0f 92       	push	r0
    2ffa:	ed b7       	in	r30, 0x3d	; 61
    2ffc:	fe b7       	in	r31, 0x3e	; 62
    2ffe:	31 96       	adiw	r30, 0x01	; 1
    3000:	81 ec       	ldi	r24, 0xC1	; 193
    3002:	97 e0       	ldi	r25, 0x07	; 7
    3004:	ad b7       	in	r26, 0x3d	; 61
    3006:	be b7       	in	r27, 0x3e	; 62
    3008:	11 96       	adiw	r26, 0x01	; 1
    300a:	8d 93       	st	X+, r24
    300c:	9c 93       	st	X, r25
    300e:	12 97       	sbiw	r26, 0x02	; 2
    3010:	80 91 44 24 	lds	r24, 0x2444
    3014:	82 83       	std	Z+2, r24	; 0x02
    3016:	13 82       	std	Z+3, r1	; 0x03
    3018:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	8a e9       	ldi	r24, 0x9A	; 154
    3022:	97 e0       	ldi	r25, 0x07	; 7
    3024:	ed b7       	in	r30, 0x3d	; 61
    3026:	fe b7       	in	r31, 0x3e	; 62
    3028:	81 83       	std	Z+1, r24	; 0x01
    302a:	92 83       	std	Z+2, r25	; 0x02
    302c:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    3030:	00 d0       	rcall	.+0      	; 0x3032 <cfg_dump+0x3e>
    3032:	0f 92       	push	r0
    3034:	80 e7       	ldi	r24, 0x70	; 112
    3036:	97 e0       	ldi	r25, 0x07	; 7
    3038:	ad b7       	in	r26, 0x3d	; 61
    303a:	be b7       	in	r27, 0x3e	; 62
    303c:	11 96       	adiw	r26, 0x01	; 1
    303e:	8d 93       	st	X+, r24
    3040:	9c 93       	st	X, r25
    3042:	12 97       	sbiw	r26, 0x02	; 2
    3044:	80 91 46 24 	lds	r24, 0x2446
    3048:	90 91 47 24 	lds	r25, 0x2447
    304c:	a0 91 48 24 	lds	r26, 0x2448
    3050:	b0 91 49 24 	lds	r27, 0x2449
    3054:	ed b7       	in	r30, 0x3d	; 61
    3056:	fe b7       	in	r31, 0x3e	; 62
    3058:	83 83       	std	Z+3, r24	; 0x03
    305a:	94 83       	std	Z+4, r25	; 0x04
    305c:	a5 83       	std	Z+5, r26	; 0x05
    305e:	b6 83       	std	Z+6, r27	; 0x06
    3060:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    3064:	86 e4       	ldi	r24, 0x46	; 70
    3066:	97 e0       	ldi	r25, 0x07	; 7
    3068:	ad b7       	in	r26, 0x3d	; 61
    306a:	be b7       	in	r27, 0x3e	; 62
    306c:	11 96       	adiw	r26, 0x01	; 1
    306e:	8d 93       	st	X+, r24
    3070:	9c 93       	st	X, r25
    3072:	12 97       	sbiw	r26, 0x02	; 2
    3074:	80 91 4e 24 	lds	r24, 0x244E
    3078:	90 91 4f 24 	lds	r25, 0x244F
    307c:	a0 91 50 24 	lds	r26, 0x2450
    3080:	b0 91 51 24 	lds	r27, 0x2451
    3084:	ed b7       	in	r30, 0x3d	; 61
    3086:	fe b7       	in	r31, 0x3e	; 62
    3088:	83 83       	std	Z+3, r24	; 0x03
    308a:	94 83       	std	Z+4, r25	; 0x04
    308c:	a5 83       	std	Z+5, r26	; 0x05
    308e:	b6 83       	std	Z+6, r27	; 0x06
    3090:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    3094:	8b e1       	ldi	r24, 0x1B	; 27
    3096:	97 e0       	ldi	r25, 0x07	; 7
    3098:	ad b7       	in	r26, 0x3d	; 61
    309a:	be b7       	in	r27, 0x3e	; 62
    309c:	11 96       	adiw	r26, 0x01	; 1
    309e:	8d 93       	st	X+, r24
    30a0:	9c 93       	st	X, r25
    30a2:	12 97       	sbiw	r26, 0x02	; 2
    30a4:	80 91 4a 24 	lds	r24, 0x244A
    30a8:	90 91 4b 24 	lds	r25, 0x244B
    30ac:	a0 91 4c 24 	lds	r26, 0x244C
    30b0:	b0 91 4d 24 	lds	r27, 0x244D
    30b4:	ed b7       	in	r30, 0x3d	; 61
    30b6:	fe b7       	in	r31, 0x3e	; 62
    30b8:	83 83       	std	Z+3, r24	; 0x03
    30ba:	94 83       	std	Z+4, r25	; 0x04
    30bc:	a5 83       	std	Z+5, r26	; 0x05
    30be:	b6 83       	std	Z+6, r27	; 0x06
    30c0:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
    30c4:	10 e0       	ldi	r17, 0x00	; 0
    30c6:	8d b7       	in	r24, 0x3d	; 61
    30c8:	9e b7       	in	r25, 0x3e	; 62
    30ca:	06 96       	adiw	r24, 0x06	; 6
    30cc:	8d bf       	out	0x3d, r24	; 61
    30ce:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis = 0; axis <= A_AXIS; axis++) {
		_cfg_dump_axis(axis);
    30d0:	81 2f       	mov	r24, r17
    30d2:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis = 0; axis <= A_AXIS; axis++) {
    30d6:	1f 5f       	subi	r17, 0xFF	; 255
    30d8:	14 30       	cpi	r17, 0x04	; 4
    30da:	d1 f7       	brne	.-12     	; 0x30d0 <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    30dc:	1f 91       	pop	r17
    30de:	08 95       	ret

000030e0 <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	64 e4       	ldi	r22, 0x44	; 68
    30e6:	74 e2       	ldi	r23, 0x24	; 36
    30e8:	4e e6       	ldi	r20, 0x6E	; 110
    30ea:	50 e0       	ldi	r21, 0x00	; 0
    30ec:	0e 94 c6 2b 	call	0x578c	; 0x578c <memcpy_to_eeprom_with_checksum>
}
    30f0:	08 95       	ret

000030f2 <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	0e 94 18 2b 	call	0x5630	; 0x5630 <eeprom_get_char>

	if (version != CONFIG_VERSION) {		// Read config-record and check checksum
    30fa:	84 36       	cpi	r24, 0x64	; 100
    30fc:	19 f0       	breq	.+6      	; 0x3104 <cfg_read+0x12>
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	0d c0       	rjmp	.+26     	; 0x311e <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    3104:	84 e4       	ldi	r24, 0x44	; 68
    3106:	94 e2       	ldi	r25, 0x24	; 36
    3108:	60 e0       	ldi	r22, 0x00	; 0
    310a:	70 e0       	ldi	r23, 0x00	; 0
    310c:	4e e6       	ldi	r20, 0x6E	; 110
    310e:	50 e0       	ldi	r21, 0x00	; 0
    3110:	0e 94 22 2b 	call	0x5644	; 0x5644 <memcpy_from_eeprom_with_checksum>
    3114:	00 97       	sbiw	r24, 0x00	; 0
    3116:	11 f0       	breq	.+4      	; 0x311c <cfg_read+0x2a>
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    311e:	c9 01       	movw	r24, r18
    3120:	08 95       	ret

00003122 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    3122:	cf 92       	push	r12
    3124:	df 92       	push	r13
    3126:	ef 92       	push	r14
    3128:	ff 92       	push	r15
    312a:	1f 93       	push	r17
    312c:	df 93       	push	r29
    312e:	cf 93       	push	r28
    3130:	0f 92       	push	r0
    3132:	0f 92       	push	r0
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    313a:	19 82       	std	Y+1, r1	; 0x01
    313c:	1a 82       	std	Y+2, r1	; 0x02
    313e:	cc 24       	eor	r12, r12
    3140:	dd 24       	eor	r13, r13
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	2b c0       	rjmp	.+86     	; 0x319e <cfg_parse+0x7c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
		if (c == '=') {							// handle separator
    3148:	9d 33       	cpi	r25, 0x3D	; 61
    314a:	49 f4       	brne	.+18     	; 0x315e <cfg_parse+0x3c>
			text[j++] = 0;						// terminate tag at separator
    314c:	f7 01       	movw	r30, r14
    314e:	e2 0f       	add	r30, r18
    3150:	f1 1d       	adc	r31, r1
    3152:	10 82       	st	Z, r1
    3154:	2f 5f       	subi	r18, 0xFF	; 255
			val = &text[j];						// new string starts at value
    3156:	67 01       	movw	r12, r14
    3158:	c2 0e       	add	r12, r18
    315a:	d1 1c       	adc	r13, r1
    315c:	20 c0       	rjmp	.+64     	; 0x319e <cfg_parse+0x7c>
		} else if ( (c == '-') || 				// pass special characters
    315e:	9d 32       	cpi	r25, 0x2D	; 45
    3160:	c9 f0       	breq	.+50     	; 0x3194 <cfg_parse+0x72>
    3162:	9b 32       	cpi	r25, 0x2B	; 43
    3164:	b9 f0       	breq	.+46     	; 0x3194 <cfg_parse+0x72>
    3166:	9e 32       	cpi	r25, 0x2E	; 46
    3168:	a9 f0       	breq	.+42     	; 0x3194 <cfg_parse+0x72>
    316a:	9f 33       	cpi	r25, 0x3F	; 63
    316c:	99 f0       	breq	.+38     	; 0x3194 <cfg_parse+0x72>
    316e:	98 32       	cpi	r25, 0x28	; 40
    3170:	89 f0       	breq	.+34     	; 0x3194 <cfg_parse+0x72>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'a' && c <= 'z') {		// convert lower to upper
    3172:	89 2f       	mov	r24, r25
    3174:	81 56       	subi	r24, 0x61	; 97
    3176:	8a 31       	cpi	r24, 0x1A	; 26
    3178:	28 f4       	brcc	.+10     	; 0x3184 <cfg_parse+0x62>
			text[j++] = c-'a'+'A';
    317a:	f7 01       	movw	r30, r14
    317c:	e2 0f       	add	r30, r18
    317e:	f1 1d       	adc	r31, r1
    3180:	90 52       	subi	r25, 0x20	; 32
    3182:	0b c0       	rjmp	.+22     	; 0x319a <cfg_parse+0x78>
		} else if (c >= 'A' && c <= 'Z') {		// pass upper case letters
    3184:	89 2f       	mov	r24, r25
    3186:	81 54       	subi	r24, 0x41	; 65
    3188:	8a 31       	cpi	r24, 0x1A	; 26
    318a:	20 f0       	brcs	.+8      	; 0x3194 <cfg_parse+0x72>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
    318c:	89 2f       	mov	r24, r25
    318e:	80 53       	subi	r24, 0x30	; 48
    3190:	8a 30       	cpi	r24, 0x0A	; 10
    3192:	28 f4       	brcc	.+10     	; 0x319e <cfg_parse+0x7c>
			text[j++] = c;
    3194:	f7 01       	movw	r30, r14
    3196:	e2 0f       	add	r30, r18
    3198:	f1 1d       	adc	r31, r1
    319a:	90 83       	st	Z, r25
    319c:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
    319e:	f7 01       	movw	r30, r14
    31a0:	e3 0f       	add	r30, r19
    31a2:	f1 1d       	adc	r31, r1
    31a4:	90 81       	ld	r25, Z
    31a6:	3f 5f       	subi	r19, 0xFF	; 255
    31a8:	99 23       	and	r25, r25
    31aa:	71 f6       	brne	.-100    	; 0x3148 <cfg_parse+0x26>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// terminate line
    31ac:	f7 01       	movw	r30, r14
    31ae:	e2 0f       	add	r30, r18
    31b0:	f1 1d       	adc	r31, r1
    31b2:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    31b4:	2f 5f       	subi	r18, 0xFF	; 255
    31b6:	c7 01       	movw	r24, r14
    31b8:	82 0f       	add	r24, r18
    31ba:	91 1d       	adc	r25, r1
    31bc:	89 83       	std	Y+1, r24	; 0x01
    31be:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    31c0:	10 92 45 24 	sts	0x2445, r1
	switch (text[0]) {
    31c4:	f7 01       	movw	r30, r14
    31c6:	80 81       	ld	r24, Z
    31c8:	81 35       	cpi	r24, 0x51	; 81
    31ca:	d1 f0       	breq	.+52     	; 0x3200 <cfg_parse+0xde>
    31cc:	82 35       	cpi	r24, 0x52	; 82
    31ce:	60 f4       	brcc	.+24     	; 0x31e8 <cfg_parse+0xc6>
    31d0:	81 34       	cpi	r24, 0x41	; 65
    31d2:	59 f1       	breq	.+86     	; 0x322a <cfg_parse+0x108>
    31d4:	82 34       	cpi	r24, 0x42	; 66
    31d6:	28 f4       	brcc	.+10     	; 0x31e2 <cfg_parse+0xc0>
    31d8:	88 32       	cpi	r24, 0x28	; 40
    31da:	11 f1       	breq	.+68     	; 0x3220 <cfg_parse+0xfe>
    31dc:	8f 33       	cpi	r24, 0x3F	; 63
    31de:	39 f5       	brne	.+78     	; 0x322e <cfg_parse+0x10c>
    31e0:	0c c0       	rjmp	.+24     	; 0x31fa <cfg_parse+0xd8>
    31e2:	8d 34       	cpi	r24, 0x4D	; 77
    31e4:	21 f5       	brne	.+72     	; 0x322e <cfg_parse+0x10c>
    31e6:	0e c0       	rjmp	.+28     	; 0x3204 <cfg_parse+0xe2>
    31e8:	89 35       	cpi	r24, 0x59	; 89
    31ea:	29 f0       	breq	.+10     	; 0x31f6 <cfg_parse+0xd4>
    31ec:	8a 35       	cpi	r24, 0x5A	; 90
    31ee:	d9 f0       	breq	.+54     	; 0x3226 <cfg_parse+0x104>
    31f0:	88 35       	cpi	r24, 0x58	; 88
    31f2:	e9 f4       	brne	.+58     	; 0x322e <cfg_parse+0x10c>
    31f4:	1f c0       	rjmp	.+62     	; 0x3234 <cfg_parse+0x112>
    31f6:	11 e0       	ldi	r17, 0x01	; 1
    31f8:	1e c0       	rjmp	.+60     	; 0x3236 <cfg_parse+0x114>
		case '?': cfg_dump(); status (TG_OK); break;
    31fa:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <cfg_dump>
    31fe:	10 c0       	rjmp	.+32     	; 0x3220 <cfg_parse+0xfe>
		case '(': status (TG_OK);	break;			// ignore comment lines
		case 'Q': status (TG_QUIT); break;
    3200:	83 e0       	ldi	r24, 0x03	; 3
    3202:	16 c0       	rjmp	.+44     	; 0x3230 <cfg_parse+0x10e>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    3204:	c6 01       	movw	r24, r12
    3206:	be 01       	movw	r22, r28
    3208:	6f 5f       	subi	r22, 0xFF	; 255
    320a:	7f 4f       	sbci	r23, 0xFF	; 255
    320c:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strtod>
    3210:	60 93 46 24 	sts	0x2446, r22
    3214:	70 93 47 24 	sts	0x2447, r23
    3218:	80 93 48 24 	sts	0x2448, r24
    321c:	90 93 49 24 	sts	0x2449, r25
				  status(TG_OK); 
    3220:	10 92 45 24 	sts	0x2445, r1
    3224:	07 c0       	rjmp	.+14     	; 0x3234 <cfg_parse+0x112>
				  break;
    3226:	12 e0       	ldi	r17, 0x02	; 2
    3228:	06 c0       	rjmp	.+12     	; 0x3236 <cfg_parse+0x114>

		case 'X': axis = X_AXIS; break;
		case 'Y': axis = Y_AXIS; break;
		case 'Z': axis = Z_AXIS; break;
    322a:	13 e0       	ldi	r17, 0x03	; 3
    322c:	04 c0       	rjmp	.+8      	; 0x3236 <cfg_parse+0x114>
		case 'A': axis = A_AXIS; break;

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    322e:	87 e0       	ldi	r24, 0x07	; 7
    3230:	80 93 45 24 	sts	0x2445, r24
    3234:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    3236:	80 91 45 24 	lds	r24, 0x2445
    323a:	88 23       	and	r24, r24
    323c:	09 f0       	breq	.+2      	; 0x3240 <cfg_parse+0x11e>
    323e:	ee c0       	rjmp	.+476    	; 0x341c <cfg_parse+0x2fa>
		status(TG_OK);							// pre-emptive setting
    3240:	10 92 45 24 	sts	0x2445, r1
		switch (text[1]) {
    3244:	f7 01       	movw	r30, r14
    3246:	81 81       	ldd	r24, Z+1	; 0x01
    3248:	8c 34       	cpi	r24, 0x4C	; 76
    324a:	09 f4       	brne	.+2      	; 0x324e <cfg_parse+0x12c>
    324c:	b8 c0       	rjmp	.+368    	; 0x33be <cfg_parse+0x29c>
    324e:	8d 34       	cpi	r24, 0x4D	; 77
    3250:	30 f4       	brcc	.+12     	; 0x325e <cfg_parse+0x13c>
    3252:	84 34       	cpi	r24, 0x44	; 68
    3254:	a9 f1       	breq	.+106    	; 0x32c0 <cfg_parse+0x19e>
    3256:	86 34       	cpi	r24, 0x46	; 70
    3258:	09 f0       	breq	.+2      	; 0x325c <cfg_parse+0x13a>
    325a:	dd c0       	rjmp	.+442    	; 0x3416 <cfg_parse+0x2f4>
    325c:	1d c0       	rjmp	.+58     	; 0x3298 <cfg_parse+0x176>
    325e:	80 35       	cpi	r24, 0x50	; 80
    3260:	09 f4       	brne	.+2      	; 0x3264 <cfg_parse+0x142>
    3262:	47 c0       	rjmp	.+142    	; 0x32f2 <cfg_parse+0x1d0>
    3264:	83 35       	cpi	r24, 0x53	; 83
    3266:	21 f0       	breq	.+8      	; 0x3270 <cfg_parse+0x14e>
    3268:	8d 34       	cpi	r24, 0x4D	; 77
    326a:	09 f0       	breq	.+2      	; 0x326e <cfg_parse+0x14c>
    326c:	d4 c0       	rjmp	.+424    	; 0x3416 <cfg_parse+0x2f4>
    326e:	58 c0       	rjmp	.+176    	; 0x3320 <cfg_parse+0x1fe>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    3270:	c6 01       	movw	r24, r12
    3272:	0e 94 bf 41 	call	0x837e	; 0x837e <atoi>
    3276:	21 2f       	mov	r18, r17
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	f9 01       	movw	r30, r18
    327c:	ee 0f       	add	r30, r30
    327e:	ff 1f       	adc	r31, r31
    3280:	e2 0f       	add	r30, r18
    3282:	f3 1f       	adc	r31, r19
    3284:	53 e0       	ldi	r21, 0x03	; 3
    3286:	ee 0f       	add	r30, r30
    3288:	ff 1f       	adc	r31, r31
    328a:	5a 95       	dec	r21
    328c:	e1 f7       	brne	.-8      	; 0x3286 <cfg_parse+0x164>
    328e:	ec 5b       	subi	r30, 0xBC	; 188
    3290:	fb 4d       	sbci	r31, 0xDB	; 219
    3292:	81 8b       	std	Z+17, r24	; 0x11
    3294:	92 8b       	std	Z+18, r25	; 0x12
    3296:	c2 c0       	rjmp	.+388    	; 0x341c <cfg_parse+0x2fa>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    3298:	c6 01       	movw	r24, r12
    329a:	0e 94 bf 41 	call	0x837e	; 0x837e <atoi>
    329e:	21 2f       	mov	r18, r17
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	f9 01       	movw	r30, r18
    32a4:	ee 0f       	add	r30, r30
    32a6:	ff 1f       	adc	r31, r31
    32a8:	e2 0f       	add	r30, r18
    32aa:	f3 1f       	adc	r31, r19
    32ac:	23 e0       	ldi	r18, 0x03	; 3
    32ae:	ee 0f       	add	r30, r30
    32b0:	ff 1f       	adc	r31, r31
    32b2:	2a 95       	dec	r18
    32b4:	e1 f7       	brne	.-8      	; 0x32ae <cfg_parse+0x18c>
    32b6:	ec 5b       	subi	r30, 0xBC	; 188
    32b8:	fb 4d       	sbci	r31, 0xDB	; 219
    32ba:	83 8b       	std	Z+19, r24	; 0x13
    32bc:	94 8b       	std	Z+20, r25	; 0x14
    32be:	ae c0       	rjmp	.+348    	; 0x341c <cfg_parse+0x2fa>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    32c0:	c6 01       	movw	r24, r12
    32c2:	be 01       	movw	r22, r28
    32c4:	6f 5f       	subi	r22, 0xFF	; 255
    32c6:	7f 4f       	sbci	r23, 0xFF	; 255
    32c8:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strtod>
    32cc:	21 2f       	mov	r18, r17
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	f9 01       	movw	r30, r18
    32d2:	ee 0f       	add	r30, r30
    32d4:	ff 1f       	adc	r31, r31
    32d6:	e2 0f       	add	r30, r18
    32d8:	f3 1f       	adc	r31, r19
    32da:	b3 e0       	ldi	r27, 0x03	; 3
    32dc:	ee 0f       	add	r30, r30
    32de:	ff 1f       	adc	r31, r31
    32e0:	ba 95       	dec	r27
    32e2:	e1 f7       	brne	.-8      	; 0x32dc <cfg_parse+0x1ba>
    32e4:	ec 5b       	subi	r30, 0xBC	; 188
    32e6:	fb 4d       	sbci	r31, 0xDB	; 219
    32e8:	65 8b       	std	Z+21, r22	; 0x15
    32ea:	76 8b       	std	Z+22, r23	; 0x16
    32ec:	87 8b       	std	Z+23, r24	; 0x17
    32ee:	90 8f       	std	Z+24, r25	; 0x18
    32f0:	95 c0       	rjmp	.+298    	; 0x341c <cfg_parse+0x2fa>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    32f2:	c6 01       	movw	r24, r12
    32f4:	0e 94 bf 41 	call	0x837e	; 0x837e <atoi>
    32f8:	68 2f       	mov	r22, r24
    32fa:	81 2f       	mov	r24, r17
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	fc 01       	movw	r30, r24
    3300:	ee 0f       	add	r30, r30
    3302:	ff 1f       	adc	r31, r31
    3304:	e8 0f       	add	r30, r24
    3306:	f9 1f       	adc	r31, r25
    3308:	73 e0       	ldi	r23, 0x03	; 3
    330a:	ee 0f       	add	r30, r30
    330c:	ff 1f       	adc	r31, r31
    330e:	7a 95       	dec	r23
    3310:	e1 f7       	brne	.-8      	; 0x330a <cfg_parse+0x1e8>
    3312:	ec 5b       	subi	r30, 0xBC	; 188
    3314:	fb 4d       	sbci	r31, 0xDB	; 219
    3316:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    3318:	81 2f       	mov	r24, r17
    331a:	0e 94 80 23 	call	0x4700	; 0x4700 <st_set_polarity>
    331e:	7e c0       	rjmp	.+252    	; 0x341c <cfg_parse+0x2fa>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    3320:	f7 01       	movw	r30, r14
    3322:	82 81       	ldd	r24, Z+2	; 0x02
    3324:	89 34       	cpi	r24, 0x49	; 73
    3326:	99 f4       	brne	.+38     	; 0x334e <cfg_parse+0x22c>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    3328:	c6 01       	movw	r24, r12
    332a:	0e 94 bf 41 	call	0x837e	; 0x837e <atoi>
    332e:	21 2f       	mov	r18, r17
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	f9 01       	movw	r30, r18
    3334:	ee 0f       	add	r30, r30
    3336:	ff 1f       	adc	r31, r31
    3338:	e2 0f       	add	r30, r18
    333a:	f3 1f       	adc	r31, r19
    333c:	53 e0       	ldi	r21, 0x03	; 3
    333e:	ee 0f       	add	r30, r30
    3340:	ff 1f       	adc	r31, r31
    3342:	5a 95       	dec	r21
    3344:	e1 f7       	brne	.-8      	; 0x333e <cfg_parse+0x21c>
    3346:	ec 5b       	subi	r30, 0xBC	; 188
    3348:	fb 4d       	sbci	r31, 0xDB	; 219
    334a:	86 87       	std	Z+14, r24	; 0x0e
    334c:	67 c0       	rjmp	.+206    	; 0x341c <cfg_parse+0x2fa>
				} else if (text[3] == 'R') {
    334e:	f7 01       	movw	r30, r14
    3350:	83 81       	ldd	r24, Z+3	; 0x03
    3352:	82 35       	cpi	r24, 0x52	; 82
    3354:	c9 f4       	brne	.+50     	; 0x3388 <cfg_parse+0x266>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    3356:	c6 01       	movw	r24, r12
    3358:	be 01       	movw	r22, r28
    335a:	6f 5f       	subi	r22, 0xFF	; 255
    335c:	7f 4f       	sbci	r23, 0xFF	; 255
    335e:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strtod>
    3362:	21 2f       	mov	r18, r17
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	f9 01       	movw	r30, r18
    3368:	ee 0f       	add	r30, r30
    336a:	ff 1f       	adc	r31, r31
    336c:	e2 0f       	add	r30, r18
    336e:	f3 1f       	adc	r31, r19
    3370:	13 e0       	ldi	r17, 0x03	; 3
    3372:	ee 0f       	add	r30, r30
    3374:	ff 1f       	adc	r31, r31
    3376:	1a 95       	dec	r17
    3378:	e1 f7       	brne	.-8      	; 0x3372 <cfg_parse+0x250>
    337a:	ec 5b       	subi	r30, 0xBC	; 188
    337c:	fb 4d       	sbci	r31, 0xDB	; 219
    337e:	61 8f       	std	Z+25, r22	; 0x19
    3380:	72 8f       	std	Z+26, r23	; 0x1a
    3382:	83 8f       	std	Z+27, r24	; 0x1b
    3384:	94 8f       	std	Z+28, r25	; 0x1c
    3386:	4a c0       	rjmp	.+148    	; 0x341c <cfg_parse+0x2fa>
				} else if (text[3] == 'T') {
    3388:	84 35       	cpi	r24, 0x54	; 84
    338a:	c9 f4       	brne	.+50     	; 0x33be <cfg_parse+0x29c>
					CFG(axis).mm_travel = strtod(val, &end); break;
    338c:	c6 01       	movw	r24, r12
    338e:	be 01       	movw	r22, r28
    3390:	6f 5f       	subi	r22, 0xFF	; 255
    3392:	7f 4f       	sbci	r23, 0xFF	; 255
    3394:	0e 94 51 40 	call	0x80a2	; 0x80a2 <strtod>
    3398:	21 2f       	mov	r18, r17
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	f9 01       	movw	r30, r18
    339e:	ee 0f       	add	r30, r30
    33a0:	ff 1f       	adc	r31, r31
    33a2:	e2 0f       	add	r30, r18
    33a4:	f3 1f       	adc	r31, r19
    33a6:	a3 e0       	ldi	r26, 0x03	; 3
    33a8:	ee 0f       	add	r30, r30
    33aa:	ff 1f       	adc	r31, r31
    33ac:	aa 95       	dec	r26
    33ae:	e1 f7       	brne	.-8      	; 0x33a8 <cfg_parse+0x286>
    33b0:	ec 5b       	subi	r30, 0xBC	; 188
    33b2:	fb 4d       	sbci	r31, 0xDB	; 219
    33b4:	65 8f       	std	Z+29, r22	; 0x1d
    33b6:	76 8f       	std	Z+30, r23	; 0x1e
    33b8:	87 8f       	std	Z+31, r24	; 0x1f
    33ba:	90 a3       	std	Z+32, r25	; 0x20
    33bc:	2f c0       	rjmp	.+94     	; 0x341c <cfg_parse+0x2fa>
				}
			case 'L': 
				if (text[2] == 'O') {
    33be:	f7 01       	movw	r30, r14
    33c0:	82 81       	ldd	r24, Z+2	; 0x02
    33c2:	8f 34       	cpi	r24, 0x4F	; 79
    33c4:	99 f4       	brne	.+38     	; 0x33ec <cfg_parse+0x2ca>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    33c6:	c6 01       	movw	r24, r12
    33c8:	0e 94 bf 41 	call	0x837e	; 0x837e <atoi>
    33cc:	21 2f       	mov	r18, r17
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	f9 01       	movw	r30, r18
    33d2:	ee 0f       	add	r30, r30
    33d4:	ff 1f       	adc	r31, r31
    33d6:	e2 0f       	add	r30, r18
    33d8:	f3 1f       	adc	r31, r19
    33da:	53 e0       	ldi	r21, 0x03	; 3
    33dc:	ee 0f       	add	r30, r30
    33de:	ff 1f       	adc	r31, r31
    33e0:	5a 95       	dec	r21
    33e2:	e1 f7       	brne	.-8      	; 0x33dc <cfg_parse+0x2ba>
    33e4:	ec 5b       	subi	r30, 0xBC	; 188
    33e6:	fb 4d       	sbci	r31, 0xDB	; 219
    33e8:	87 87       	std	Z+15, r24	; 0x0f
    33ea:	18 c0       	rjmp	.+48     	; 0x341c <cfg_parse+0x2fa>
				} else if (text[2] == 'I') {
    33ec:	89 34       	cpi	r24, 0x49	; 73
    33ee:	99 f4       	brne	.+38     	; 0x3416 <cfg_parse+0x2f4>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    33f0:	c6 01       	movw	r24, r12
    33f2:	0e 94 bf 41 	call	0x837e	; 0x837e <atoi>
    33f6:	21 2f       	mov	r18, r17
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	f9 01       	movw	r30, r18
    33fc:	ee 0f       	add	r30, r30
    33fe:	ff 1f       	adc	r31, r31
    3400:	e2 0f       	add	r30, r18
    3402:	f3 1f       	adc	r31, r19
    3404:	23 e0       	ldi	r18, 0x03	; 3
    3406:	ee 0f       	add	r30, r30
    3408:	ff 1f       	adc	r31, r31
    340a:	2a 95       	dec	r18
    340c:	e1 f7       	brne	.-8      	; 0x3406 <cfg_parse+0x2e4>
    340e:	ec 5b       	subi	r30, 0xBC	; 188
    3410:	fb 4d       	sbci	r31, 0xDB	; 219
    3412:	85 a3       	std	Z+37, r24	; 0x25
    3414:	03 c0       	rjmp	.+6      	; 0x341c <cfg_parse+0x2fa>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    3416:	87 e0       	ldi	r24, 0x07	; 7
    3418:	80 93 45 24 	sts	0x2445, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    341c:	80 91 45 24 	lds	r24, 0x2445
    3420:	b7 01       	movw	r22, r14
    3422:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
}
    3426:	80 91 45 24 	lds	r24, 0x2445
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	cf 91       	pop	r28
    3432:	df 91       	pop	r29
    3434:	1f 91       	pop	r17
    3436:	ff 90       	pop	r15
    3438:	ef 90       	pop	r14
    343a:	df 90       	pop	r13
    343c:	cf 90       	pop	r12
    343e:	08 95       	ret

00003440 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3440:	ef 92       	push	r14
    3442:	ff 92       	push	r15
    3444:	0f 93       	push	r16
    3446:	1f 93       	push	r17
    3448:	df 93       	push	r29
    344a:	cf 93       	push	r28
    344c:	cd b7       	in	r28, 0x3d	; 61
    344e:	de b7       	in	r29, 0x3e	; 62
    3450:	a8 97       	sbiw	r28, 0x28	; 40
    3452:	cd bf       	out	0x3d, r28	; 61
    3454:	de bf       	out	0x3e, r29	; 62
    3456:	00 e1       	ldi	r16, 0x10	; 16
    3458:	13 e0       	ldi	r17, 0x03	; 3
    345a:	a0 e0       	ldi	r26, 0x00	; 0
    345c:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    345e:	7e 01       	movw	r14, r28
    3460:	08 94       	sec
    3462:	e1 1c       	adc	r14, r1
    3464:	f1 1c       	adc	r15, r1
    3466:	02 c0       	rjmp	.+4      	; 0x346c <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3468:	0f 5f       	subi	r16, 0xFF	; 255
    346a:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    346c:	f8 01       	movw	r30, r16
    346e:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    3470:	88 23       	and	r24, r24
    3472:	89 f4       	brne	.+34     	; 0x3496 <cfg_test+0x56>
			text[j] = 0;
    3474:	ce 01       	movw	r24, r28
    3476:	01 96       	adiw	r24, 0x01	; 1
    3478:	a8 0f       	add	r26, r24
    347a:	b9 1f       	adc	r27, r25
    347c:	1c 92       	st	X, r1
			cfg_parse(text);
    347e:	0e 94 91 18 	call	0x3122	; 0x3122 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    3482:	a8 96       	adiw	r28, 0x28	; 40
    3484:	cd bf       	out	0x3d, r28	; 61
    3486:	de bf       	out	0x3e, r29	; 62
    3488:	cf 91       	pop	r28
    348a:	df 91       	pop	r29
    348c:	1f 91       	pop	r17
    348e:	0f 91       	pop	r16
    3490:	ff 90       	pop	r15
    3492:	ef 90       	pop	r14
    3494:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    3496:	8d 30       	cpi	r24, 0x0D	; 13
    3498:	21 f0       	breq	.+8      	; 0x34a2 <cfg_test+0x62>
    349a:	8a 30       	cpi	r24, 0x0A	; 10
    349c:	11 f0       	breq	.+4      	; 0x34a2 <cfg_test+0x62>
    349e:	8b 33       	cpi	r24, 0x3B	; 59
    34a0:	49 f4       	brne	.+18     	; 0x34b4 <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    34a2:	ae 0d       	add	r26, r14
    34a4:	bf 1d       	adc	r27, r15
    34a6:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    34a8:	c7 01       	movw	r24, r14
    34aa:	0e 94 91 18 	call	0x3122	; 0x3122 <cfg_parse>
    34ae:	a0 e0       	ldi	r26, 0x00	; 0
    34b0:	b0 e0       	ldi	r27, 0x00	; 0
    34b2:	da cf       	rjmp	.-76     	; 0x3468 <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    34b4:	81 32       	cpi	r24, 0x21	; 33
    34b6:	c0 f2       	brcs	.-80     	; 0x3468 <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    34b8:	f7 01       	movw	r30, r14
    34ba:	ea 0f       	add	r30, r26
    34bc:	fb 1f       	adc	r31, r27
    34be:	80 83       	st	Z, r24
    34c0:	11 96       	adiw	r26, 0x01	; 1
    34c2:	d2 cf       	rjmp	.-92     	; 0x3468 <cfg_test+0x28>

000034c4 <en_init>:

#include "encoder.h"

void en_init(void) {

}
    34c4:	08 95       	ret

000034c6 <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    34c6:	0f 93       	push	r16
    34c8:	df 93       	push	r29
    34ca:	cf 93       	push	r28
    34cc:	0f 92       	push	r0
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
	OSC.XOSCCTRL = 0x4B;	// 2-9 MHz crystal; 0.4-16 MHz XTAL w/16K CLK Start Up
    34d2:	8b e4       	ldi	r24, 0x4B	; 75
    34d4:	e0 e5       	ldi	r30, 0x50	; 80
    34d6:	f0 e0       	ldi	r31, 0x00	; 0
    34d8:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    34da:	88 e0       	ldi	r24, 0x08	; 8
    34dc:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    34e0:	80 91 51 00 	lds	r24, 0x0051
    34e4:	83 ff       	sbrs	r24, 3
    34e6:	fc cf       	rjmp	.-8      	; 0x34e0 <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC4;		// XOSC is PLL Source; 4x Factor (32 MHz) 
    34e8:	84 ec       	ldi	r24, 0xC4	; 196
    34ea:	e0 e5       	ldi	r30, 0x50	; 80
    34ec:	f0 e0       	ldi	r31, 0x00	; 0
    34ee:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    34f0:	88 e1       	ldi	r24, 0x18	; 24
    34f2:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    34f6:	80 91 51 00 	lds	r24, 0x0051
    34fa:	84 ff       	sbrs	r24, 4
    34fc:	fc cf       	rjmp	.-8      	; 0x34f6 <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    34fe:	8f b7       	in	r24, 0x3f	; 63
    3500:	89 83       	std	Y+1, r24	; 0x01
    3502:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3504:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3506:	24 e0       	ldi	r18, 0x04	; 4
    3508:	80 e4       	ldi	r24, 0x40	; 64
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	fc 01       	movw	r30, r24
    350e:	08 ed       	ldi	r16, 0xD8	; 216
    3510:	04 bf       	out	0x34, r16	; 52
    3512:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3514:	89 81       	ldd	r24, Y+1	; 0x01
    3516:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC4;		// XOSC is PLL Source; 4x Factor (32 MHz) 
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    3518:	80 91 50 00 	lds	r24, 0x0050
    351c:	8e 7f       	andi	r24, 0xFE	; 254
    351e:	80 93 50 00 	sts	0x0050, r24
}
    3522:	0f 90       	pop	r0
    3524:	cf 91       	pop	r28
    3526:	df 91       	pop	r29
    3528:	0f 91       	pop	r16
    352a:	08 95       	ret

0000352c <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    352c:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <xmega_init_clocks>
}
    3530:	08 95       	ret

00003532 <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3532:	0f 93       	push	r16
    3534:	df 93       	push	r29
    3536:	cf 93       	push	r28
    3538:	0f 92       	push	r0
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    353e:	2f b7       	in	r18, 0x3f	; 63
    3540:	29 83       	std	Y+1, r18	; 0x01
    3542:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3544:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3546:	fc 01       	movw	r30, r24
    3548:	08 ed       	ldi	r16, 0xD8	; 216
    354a:	04 bf       	out	0x34, r16	; 52
    354c:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    354e:	89 81       	ldd	r24, Y+1	; 0x01
    3550:	8f bf       	out	0x3f, r24	; 63
#endif
}
    3552:	0f 90       	pop	r0
    3554:	cf 91       	pop	r28
    3556:	df 91       	pop	r29
    3558:	0f 91       	pop	r16
    355a:	08 95       	ret

0000355c <mc_go_home>:
 */

void mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    355c:	8c e0       	ldi	r24, 0x0C	; 12
    355e:	e3 e7       	ldi	r30, 0x73	; 115
    3560:	f1 e2       	ldi	r31, 0x21	; 33
    3562:	df 01       	movw	r26, r30
    3564:	1d 92       	st	X+, r1
    3566:	8a 95       	dec	r24
    3568:	e9 f7       	brne	.-6      	; 0x3564 <mc_go_home+0x8>
}
    356a:	08 95       	ret

0000356c <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    356c:	8c e0       	ldi	r24, 0x0C	; 12
    356e:	e3 e7       	ldi	r30, 0x73	; 115
    3570:	f1 e2       	ldi	r31, 0x21	; 33
    3572:	df 01       	movw	r26, r30
    3574:	1d 92       	st	X+, r1
    3576:	8a 95       	dec	r24
    3578:	e9 f7       	brne	.-6      	; 0x3574 <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    357a:	10 92 72 21 	sts	0x2172, r1
	ma.arc_state = MC_STATE_OFF;
    357e:	10 92 b4 24 	sts	0x24B4, r1
}
    3582:	08 95       	ret

00003584 <mc_dwell>:
/* 
 * mc_dwell() 
 */

void mc_dwell(uint32_t milliseconds) 
{
    3584:	af 92       	push	r10
    3586:	bf 92       	push	r11
    3588:	cf 92       	push	r12
    358a:	df 92       	push	r13
    358c:	ef 92       	push	r14
    358e:	ff 92       	push	r15
    3590:	0f 93       	push	r16
    3592:	1f 93       	push	r17
    3594:	7b 01       	movw	r14, r22
    3596:	8c 01       	movw	r16, r24
	mv_synchronize();
    3598:	0e 94 49 30 	call	0x6092	; 0x6092 <mv_synchronize>
	_delay_ms(milliseconds);
    359c:	c8 01       	movw	r24, r16
    359e:	b7 01       	movw	r22, r14
    35a0:	0e 94 e6 3c 	call	0x79cc	; 0x79cc <__floatunsisf>
    35a4:	5b 01       	movw	r10, r22
    35a6:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35a8:	20 e0       	ldi	r18, 0x00	; 0
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	4a ef       	ldi	r20, 0xFA	; 250
    35ae:	55 e4       	ldi	r21, 0x45	; 69
    35b0:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    35b4:	7b 01       	movw	r14, r22
    35b6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	40 e8       	ldi	r20, 0x80	; 128
    35be:	5f e3       	ldi	r21, 0x3F	; 63
    35c0:	0e 94 46 3c 	call	0x788c	; 0x788c <__cmpsf2>
    35c4:	88 23       	and	r24, r24
    35c6:	1c f4       	brge	.+6      	; 0x35ce <mc_dwell+0x4a>
    35c8:	61 e0       	ldi	r22, 0x01	; 1
    35ca:	70 e0       	ldi	r23, 0x00	; 0
    35cc:	24 c0       	rjmp	.+72     	; 0x3616 <mc_dwell+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
    35ce:	c8 01       	movw	r24, r16
    35d0:	b7 01       	movw	r22, r14
    35d2:	20 e0       	ldi	r18, 0x00	; 0
    35d4:	3f ef       	ldi	r19, 0xFF	; 255
    35d6:	4f e7       	ldi	r20, 0x7F	; 127
    35d8:	57 e4       	ldi	r21, 0x47	; 71
    35da:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <__gesf2>
    35de:	18 16       	cp	r1, r24
    35e0:	b4 f4       	brge	.+44     	; 0x360e <mc_dwell+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35e2:	c6 01       	movw	r24, r12
    35e4:	b5 01       	movw	r22, r10
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	40 e2       	ldi	r20, 0x20	; 32
    35ec:	51 e4       	ldi	r21, 0x41	; 65
    35ee:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    35f2:	0e 94 ba 3c 	call	0x7974	; 0x7974 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35f6:	80 e2       	ldi	r24, 0x20	; 32
    35f8:	93 e0       	ldi	r25, 0x03	; 3
    35fa:	05 c0       	rjmp	.+10     	; 0x3606 <mc_dwell+0x82>
    35fc:	fc 01       	movw	r30, r24
    35fe:	31 97       	sbiw	r30, 0x01	; 1
    3600:	f1 f7       	brne	.-4      	; 0x35fe <mc_dwell+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3602:	61 50       	subi	r22, 0x01	; 1
    3604:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3606:	61 15       	cp	r22, r1
    3608:	71 05       	cpc	r23, r1
    360a:	c1 f7       	brne	.-16     	; 0x35fc <mc_dwell+0x78>
    360c:	07 c0       	rjmp	.+14     	; 0x361c <mc_dwell+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    360e:	c8 01       	movw	r24, r16
    3610:	b7 01       	movw	r22, r14
    3612:	0e 94 ba 3c 	call	0x7974	; 0x7974 <__fixunssfsi>
    3616:	cb 01       	movw	r24, r22
    3618:	01 97       	sbiw	r24, 0x01	; 1
    361a:	f1 f7       	brne	.-4      	; 0x3618 <mc_dwell+0x94>
}
    361c:	1f 91       	pop	r17
    361e:	0f 91       	pop	r16
    3620:	ff 90       	pop	r15
    3622:	ef 90       	pop	r14
    3624:	df 90       	pop	r13
    3626:	cf 90       	pop	r12
    3628:	bf 90       	pop	r11
    362a:	af 90       	pop	r10
    362c:	08 95       	ret

0000362e <mc_line_continuation>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continuation() 
{
    362e:	af 92       	push	r10
    3630:	bf 92       	push	r11
    3632:	cf 92       	push	r12
    3634:	df 92       	push	r13
    3636:	ef 92       	push	r14
    3638:	ff 92       	push	r15
    363a:	0f 93       	push	r16
    363c:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    363e:	80 91 72 21 	lds	r24, 0x2172
    3642:	88 23       	and	r24, r24
    3644:	19 f4       	brne	.+6      	; 0x364c <mc_line_continuation+0x1e>
    3646:	21 e0       	ldi	r18, 0x01	; 1
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	30 c0       	rjmp	.+96     	; 0x36ac <mc_line_continuation+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    364c:	82 e0       	ldi	r24, 0x02	; 2
    364e:	80 93 72 21 	sts	0x2172, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    3652:	0e 94 3b 30 	call	0x6076	; 0x6076 <mv_test_move_buffer_full>
    3656:	88 23       	and	r24, r24
    3658:	19 f0       	breq	.+6      	; 0x3660 <mc_line_continuation+0x32>
    365a:	22 e0       	ldi	r18, 0x02	; 2
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	26 c0       	rjmp	.+76     	; 0x36ac <mc_line_continuation+0x7e>
		return (TG_CONTINUE);
	}
	mv_queue_move_buffer(mc.steps[X_AXIS], mc.steps[Y_AXIS], mc.steps[Z_AXIS], mc.microseconds); 
    3660:	60 91 8b 21 	lds	r22, 0x218B
    3664:	70 91 8c 21 	lds	r23, 0x218C
    3668:	80 91 8d 21 	lds	r24, 0x218D
    366c:	90 91 8e 21 	lds	r25, 0x218E
    3670:	20 91 8f 21 	lds	r18, 0x218F
    3674:	30 91 90 21 	lds	r19, 0x2190
    3678:	40 91 91 21 	lds	r20, 0x2191
    367c:	50 91 92 21 	lds	r21, 0x2192
    3680:	e0 90 93 21 	lds	r14, 0x2193
    3684:	f0 90 94 21 	lds	r15, 0x2194
    3688:	00 91 95 21 	lds	r16, 0x2195
    368c:	10 91 96 21 	lds	r17, 0x2196
    3690:	a0 90 97 21 	lds	r10, 0x2197
    3694:	b0 90 98 21 	lds	r11, 0x2198
    3698:	c0 90 99 21 	lds	r12, 0x2199
    369c:	d0 90 9a 21 	lds	r13, 0x219A
    36a0:	0e 94 67 30 	call	0x60ce	; 0x60ce <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    36a4:	10 92 72 21 	sts	0x2172, r1
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    36ac:	c9 01       	movw	r24, r18
    36ae:	1f 91       	pop	r17
    36b0:	0f 91       	pop	r16
    36b2:	ff 90       	pop	r15
    36b4:	ef 90       	pop	r14
    36b6:	df 90       	pop	r13
    36b8:	cf 90       	pop	r12
    36ba:	bf 90       	pop	r11
    36bc:	af 90       	pop	r10
    36be:	08 95       	ret

000036c0 <mc_line_nonblock>:
/* 
 * mc_line_nonblock() - mc_line with non-blocking behavior
 */

int mc_line_nonblock(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    36c0:	2f 92       	push	r2
    36c2:	3f 92       	push	r3
    36c4:	4f 92       	push	r4
    36c6:	5f 92       	push	r5
    36c8:	6f 92       	push	r6
    36ca:	7f 92       	push	r7
    36cc:	8f 92       	push	r8
    36ce:	9f 92       	push	r9
    36d0:	af 92       	push	r10
    36d2:	bf 92       	push	r11
    36d4:	cf 92       	push	r12
    36d6:	df 92       	push	r13
    36d8:	ef 92       	push	r14
    36da:	ff 92       	push	r15
    36dc:	0f 93       	push	r16
    36de:	1f 93       	push	r17
    36e0:	df 93       	push	r29
    36e2:	cf 93       	push	r28
    36e4:	cd b7       	in	r28, 0x3d	; 61
    36e6:	de b7       	in	r29, 0x3e	; 62
    36e8:	64 97       	sbiw	r28, 0x14	; 20
    36ea:	cd bf       	out	0x3d, r28	; 61
    36ec:	de bf       	out	0x3e, r29	; 62
    36ee:	2d 87       	std	Y+13, r18	; 0x0d
    36f0:	3e 87       	std	Y+14, r19	; 0x0e
    36f2:	4f 87       	std	Y+15, r20	; 0x0f
    36f4:	58 8b       	std	Y+16, r21	; 0x10
    36f6:	a9 8a       	std	Y+17, r10	; 0x11
    36f8:	ba 8a       	std	Y+18, r11	; 0x12
    36fa:	cb 8a       	std	Y+19, r12	; 0x13
    36fc:	dc 8a       	std	Y+20, r13	; 0x14
	mc.target[X_AXIS] = lround(x*CFG(X_AXIS).steps_per_mm);
    36fe:	20 91 65 24 	lds	r18, 0x2465
    3702:	30 91 66 24 	lds	r19, 0x2466
    3706:	40 91 67 24 	lds	r20, 0x2467
    370a:	50 91 68 24 	lds	r21, 0x2468
    370e:	29 87       	std	Y+9, r18	; 0x09
    3710:	3a 87       	std	Y+10, r19	; 0x0a
    3712:	4b 87       	std	Y+11, r20	; 0x0b
    3714:	5c 87       	std	Y+12, r21	; 0x0c
    3716:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    371a:	0e 94 d8 3e 	call	0x7db0	; 0x7db0 <lround>
    371e:	2b 01       	movw	r4, r22
    3720:	3c 01       	movw	r6, r24
    3722:	40 92 7f 21 	sts	0x217F, r4
    3726:	50 92 80 21 	sts	0x2180, r5
    372a:	60 92 81 21 	sts	0x2181, r6
    372e:	70 92 82 21 	sts	0x2182, r7
	mc.target[Y_AXIS] = lround(y*CFG(Y_AXIS).steps_per_mm);
    3732:	80 91 7d 24 	lds	r24, 0x247D
    3736:	90 91 7e 24 	lds	r25, 0x247E
    373a:	a0 91 7f 24 	lds	r26, 0x247F
    373e:	b0 91 80 24 	lds	r27, 0x2480
    3742:	8d 83       	std	Y+5, r24	; 0x05
    3744:	9e 83       	std	Y+6, r25	; 0x06
    3746:	af 83       	std	Y+7, r26	; 0x07
    3748:	b8 87       	std	Y+8, r27	; 0x08
    374a:	6d 85       	ldd	r22, Y+13	; 0x0d
    374c:	7e 85       	ldd	r23, Y+14	; 0x0e
    374e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3750:	98 89       	ldd	r25, Y+16	; 0x10
    3752:	2d 81       	ldd	r18, Y+5	; 0x05
    3754:	3e 81       	ldd	r19, Y+6	; 0x06
    3756:	4f 81       	ldd	r20, Y+7	; 0x07
    3758:	58 85       	ldd	r21, Y+8	; 0x08
    375a:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    375e:	0e 94 d8 3e 	call	0x7db0	; 0x7db0 <lround>
    3762:	5b 01       	movw	r10, r22
    3764:	6c 01       	movw	r12, r24
    3766:	a0 92 83 21 	sts	0x2183, r10
    376a:	b0 92 84 21 	sts	0x2184, r11
    376e:	c0 92 85 21 	sts	0x2185, r12
    3772:	d0 92 86 21 	sts	0x2186, r13
	mc.target[Z_AXIS] = lround(z*CFG(Z_AXIS).steps_per_mm); 
    3776:	20 91 95 24 	lds	r18, 0x2495
    377a:	30 91 96 24 	lds	r19, 0x2496
    377e:	40 91 97 24 	lds	r20, 0x2497
    3782:	50 91 98 24 	lds	r21, 0x2498
    3786:	29 83       	std	Y+1, r18	; 0x01
    3788:	3a 83       	std	Y+2, r19	; 0x02
    378a:	4b 83       	std	Y+3, r20	; 0x03
    378c:	5c 83       	std	Y+4, r21	; 0x04
    378e:	c8 01       	movw	r24, r16
    3790:	b7 01       	movw	r22, r14
    3792:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    3796:	0e 94 d8 3e 	call	0x7db0	; 0x7db0 <lround>
    379a:	9b 01       	movw	r18, r22
    379c:	ac 01       	movw	r20, r24
    379e:	20 93 87 21 	sts	0x2187, r18
    37a2:	30 93 88 21 	sts	0x2188, r19
    37a6:	40 93 89 21 	sts	0x2189, r20
    37aa:	50 93 8a 21 	sts	0x218A, r21

	mc.steps[X_AXIS] = mc.target[X_AXIS]-mc.position[X_AXIS];
    37ae:	80 91 73 21 	lds	r24, 0x2173
    37b2:	90 91 74 21 	lds	r25, 0x2174
    37b6:	a0 91 75 21 	lds	r26, 0x2175
    37ba:	b0 91 76 21 	lds	r27, 0x2176
    37be:	83 01       	movw	r16, r6
    37c0:	72 01       	movw	r14, r4
    37c2:	e8 1a       	sub	r14, r24
    37c4:	f9 0a       	sbc	r15, r25
    37c6:	0a 0b       	sbc	r16, r26
    37c8:	1b 0b       	sbc	r17, r27
    37ca:	e0 92 8b 21 	sts	0x218B, r14
    37ce:	f0 92 8c 21 	sts	0x218C, r15
    37d2:	00 93 8d 21 	sts	0x218D, r16
    37d6:	10 93 8e 21 	sts	0x218E, r17
	mc.steps[Y_AXIS] = mc.target[Y_AXIS]-mc.position[Y_AXIS];
    37da:	80 91 77 21 	lds	r24, 0x2177
    37de:	90 91 78 21 	lds	r25, 0x2178
    37e2:	a0 91 79 21 	lds	r26, 0x2179
    37e6:	b0 91 7a 21 	lds	r27, 0x217A
    37ea:	a8 1a       	sub	r10, r24
    37ec:	b9 0a       	sbc	r11, r25
    37ee:	ca 0a       	sbc	r12, r26
    37f0:	db 0a       	sbc	r13, r27
    37f2:	a0 92 8f 21 	sts	0x218F, r10
    37f6:	b0 92 90 21 	sts	0x2190, r11
    37fa:	c0 92 91 21 	sts	0x2191, r12
    37fe:	d0 92 92 21 	sts	0x2192, r13
	mc.steps[Z_AXIS] = mc.target[Z_AXIS]-mc.position[Z_AXIS];
    3802:	80 91 7b 21 	lds	r24, 0x217B
    3806:	90 91 7c 21 	lds	r25, 0x217C
    380a:	a0 91 7d 21 	lds	r26, 0x217D
    380e:	b0 91 7e 21 	lds	r27, 0x217E
    3812:	19 01       	movw	r2, r18
    3814:	2a 01       	movw	r4, r20
    3816:	28 1a       	sub	r2, r24
    3818:	39 0a       	sbc	r3, r25
    381a:	4a 0a       	sbc	r4, r26
    381c:	5b 0a       	sbc	r5, r27
    381e:	20 92 93 21 	sts	0x2193, r2
    3822:	30 92 94 21 	sts	0x2194, r3
    3826:	40 92 95 21 	sts	0x2195, r4
    382a:	50 92 96 21 	sts	0x2196, r5

	if (invert_feed_rate) {
    382e:	89 28       	or	r8, r9
    3830:	59 f0       	breq	.+22     	; 0x3848 <mc_line_nonblock+0x188>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3832:	60 ec       	ldi	r22, 0xC0	; 192
    3834:	71 ee       	ldi	r23, 0xE1	; 225
    3836:	84 e6       	ldi	r24, 0x64	; 100
    3838:	9c e4       	ldi	r25, 0x4C	; 76
    383a:	29 89       	ldd	r18, Y+17	; 0x11
    383c:	3a 89       	ldd	r19, Y+18	; 0x12
    383e:	4b 89       	ldd	r20, Y+19	; 0x13
    3840:	5c 89       	ldd	r21, Y+20	; 0x14
    3842:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    3846:	4a c0       	rjmp	.+148    	; 0x38dc <mc_line_nonblock+0x21c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X_AXIS]/CFG(X_AXIS).steps_per_mm) + 
    3848:	c8 01       	movw	r24, r16
    384a:	b7 01       	movw	r22, r14
    384c:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    3850:	29 85       	ldd	r18, Y+9	; 0x09
    3852:	3a 85       	ldd	r19, Y+10	; 0x0a
    3854:	4b 85       	ldd	r20, Y+11	; 0x0b
    3856:	5c 85       	ldd	r21, Y+12	; 0x0c
    3858:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    385c:	0e 94 b3 3f 	call	0x7f66	; 0x7f66 <square>
    3860:	3b 01       	movw	r6, r22
    3862:	4c 01       	movw	r8, r24
    3864:	c6 01       	movw	r24, r12
    3866:	b5 01       	movw	r22, r10
    3868:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    386c:	2d 81       	ldd	r18, Y+5	; 0x05
    386e:	3e 81       	ldd	r19, Y+6	; 0x06
    3870:	4f 81       	ldd	r20, Y+7	; 0x07
    3872:	58 85       	ldd	r21, Y+8	; 0x08
    3874:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    3878:	0e 94 b3 3f 	call	0x7f66	; 0x7f66 <square>
    387c:	5b 01       	movw	r10, r22
    387e:	6c 01       	movw	r12, r24
    3880:	c2 01       	movw	r24, r4
    3882:	b1 01       	movw	r22, r2
    3884:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    3888:	29 81       	ldd	r18, Y+1	; 0x01
    388a:	3a 81       	ldd	r19, Y+2	; 0x02
    388c:	4b 81       	ldd	r20, Y+3	; 0x03
    388e:	5c 81       	ldd	r21, Y+4	; 0x04
    3890:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    3894:	0e 94 b3 3f 	call	0x7f66	; 0x7f66 <square>
    3898:	7b 01       	movw	r14, r22
    389a:	8c 01       	movw	r16, r24
    389c:	c4 01       	movw	r24, r8
    389e:	b3 01       	movw	r22, r6
    38a0:	a6 01       	movw	r20, r12
    38a2:	95 01       	movw	r18, r10
    38a4:	0e 94 a7 3b 	call	0x774e	; 0x774e <__addsf3>
    38a8:	a8 01       	movw	r20, r16
    38aa:	97 01       	movw	r18, r14
    38ac:	0e 94 a7 3b 	call	0x774e	; 0x774e <__addsf3>
    38b0:	0e 94 75 3f 	call	0x7eea	; 0x7eea <sqrt>
    38b4:	60 93 9b 21 	sts	0x219B, r22
    38b8:	70 93 9c 21 	sts	0x219C, r23
    38bc:	80 93 9d 21 	sts	0x219D, r24
    38c0:	90 93 9e 21 	sts	0x219E, r25
							   square(mc.steps[Y_AXIS]/CFG(Y_AXIS).steps_per_mm) + 
							   square(mc.steps[Z_AXIS]/CFG(Z_AXIS).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    38c4:	29 89       	ldd	r18, Y+17	; 0x11
    38c6:	3a 89       	ldd	r19, Y+18	; 0x12
    38c8:	4b 89       	ldd	r20, Y+19	; 0x13
    38ca:	5c 89       	ldd	r21, Y+20	; 0x14
    38cc:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	34 e2       	ldi	r19, 0x24	; 36
    38d4:	44 e7       	ldi	r20, 0x74	; 116
    38d6:	59 e4       	ldi	r21, 0x49	; 73
    38d8:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    38dc:	0e 94 d8 3e 	call	0x7db0	; 0x7db0 <lround>
    38e0:	60 93 97 21 	sts	0x2197, r22
    38e4:	70 93 98 21 	sts	0x2198, r23
    38e8:	80 93 99 21 	sts	0x2199, r24
    38ec:	90 93 9a 21 	sts	0x219A, r25
	}
	mc.line_state = MC_STATE_NEW;
    38f0:	81 e0       	ldi	r24, 0x01	; 1
    38f2:	80 93 72 21 	sts	0x2172, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    38f6:	e3 e7       	ldi	r30, 0x73	; 115
    38f8:	f1 e2       	ldi	r31, 0x21	; 33
    38fa:	df 01       	movw	r26, r30
    38fc:	1c 96       	adiw	r26, 0x0c	; 12
    38fe:	8c e0       	ldi	r24, 0x0C	; 12
    3900:	0d 90       	ld	r0, X+
    3902:	01 92       	st	Z+, r0
    3904:	81 50       	subi	r24, 0x01	; 1
    3906:	e1 f7       	brne	.-8      	; 0x3900 <mc_line_nonblock+0x240>
	return (mc_line_continuation());
    3908:	0e 94 17 1b 	call	0x362e	; 0x362e <mc_line_continuation>
}
    390c:	64 96       	adiw	r28, 0x14	; 20
    390e:	cd bf       	out	0x3d, r28	; 61
    3910:	de bf       	out	0x3e, r29	; 62
    3912:	cf 91       	pop	r28
    3914:	df 91       	pop	r29
    3916:	1f 91       	pop	r17
    3918:	0f 91       	pop	r16
    391a:	ff 90       	pop	r15
    391c:	ef 90       	pop	r14
    391e:	df 90       	pop	r13
    3920:	cf 90       	pop	r12
    3922:	bf 90       	pop	r11
    3924:	af 90       	pop	r10
    3926:	9f 90       	pop	r9
    3928:	8f 90       	pop	r8
    392a:	7f 90       	pop	r7
    392c:	6f 90       	pop	r6
    392e:	5f 90       	pop	r5
    3930:	4f 90       	pop	r4
    3932:	3f 90       	pop	r3
    3934:	2f 90       	pop	r2
    3936:	08 95       	ret

00003938 <mc_line>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    3938:	2f 92       	push	r2
    393a:	3f 92       	push	r3
    393c:	4f 92       	push	r4
    393e:	5f 92       	push	r5
    3940:	6f 92       	push	r6
    3942:	7f 92       	push	r7
    3944:	8f 92       	push	r8
    3946:	9f 92       	push	r9
    3948:	af 92       	push	r10
    394a:	bf 92       	push	r11
    394c:	cf 92       	push	r12
    394e:	df 92       	push	r13
    3950:	ef 92       	push	r14
    3952:	ff 92       	push	r15
    3954:	0f 93       	push	r16
    3956:	1f 93       	push	r17
    3958:	df 93       	push	r29
    395a:	cf 93       	push	r28
    395c:	cd b7       	in	r28, 0x3d	; 61
    395e:	de b7       	in	r29, 0x3e	; 62
    3960:	6c 97       	sbiw	r28, 0x1c	; 28
    3962:	cd bf       	out	0x3d, r28	; 61
    3964:	de bf       	out	0x3e, r29	; 62
    3966:	2d 8b       	std	Y+21, r18	; 0x15
    3968:	3e 8b       	std	Y+22, r19	; 0x16
    396a:	4f 8b       	std	Y+23, r20	; 0x17
    396c:	58 8f       	std	Y+24, r21	; 0x18
    396e:	a9 8e       	std	Y+25, r10	; 0x19
    3970:	ba 8e       	std	Y+26, r11	; 0x1a
    3972:	cb 8e       	std	Y+27, r12	; 0x1b
    3974:	dc 8e       	std	Y+28, r13	; 0x1c
	mc.target[X_AXIS] = lround(x*CFG(X_AXIS).steps_per_mm);
    3976:	20 91 65 24 	lds	r18, 0x2465
    397a:	30 91 66 24 	lds	r19, 0x2466
    397e:	40 91 67 24 	lds	r20, 0x2467
    3982:	50 91 68 24 	lds	r21, 0x2468
    3986:	29 8b       	std	Y+17, r18	; 0x11
    3988:	3a 8b       	std	Y+18, r19	; 0x12
    398a:	4b 8b       	std	Y+19, r20	; 0x13
    398c:	5c 8b       	std	Y+20, r21	; 0x14
    398e:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    3992:	0e 94 d8 3e 	call	0x7db0	; 0x7db0 <lround>
    3996:	2b 01       	movw	r4, r22
    3998:	3c 01       	movw	r6, r24
    399a:	40 92 7f 21 	sts	0x217F, r4
    399e:	50 92 80 21 	sts	0x2180, r5
    39a2:	60 92 81 21 	sts	0x2181, r6
    39a6:	70 92 82 21 	sts	0x2182, r7
	mc.target[Y_AXIS] = lround(y*CFG(Y_AXIS).steps_per_mm);
    39aa:	80 91 7d 24 	lds	r24, 0x247D
    39ae:	90 91 7e 24 	lds	r25, 0x247E
    39b2:	a0 91 7f 24 	lds	r26, 0x247F
    39b6:	b0 91 80 24 	lds	r27, 0x2480
    39ba:	8d 87       	std	Y+13, r24	; 0x0d
    39bc:	9e 87       	std	Y+14, r25	; 0x0e
    39be:	af 87       	std	Y+15, r26	; 0x0f
    39c0:	b8 8b       	std	Y+16, r27	; 0x10
    39c2:	6d 89       	ldd	r22, Y+21	; 0x15
    39c4:	7e 89       	ldd	r23, Y+22	; 0x16
    39c6:	8f 89       	ldd	r24, Y+23	; 0x17
    39c8:	98 8d       	ldd	r25, Y+24	; 0x18
    39ca:	2d 85       	ldd	r18, Y+13	; 0x0d
    39cc:	3e 85       	ldd	r19, Y+14	; 0x0e
    39ce:	4f 85       	ldd	r20, Y+15	; 0x0f
    39d0:	58 89       	ldd	r21, Y+16	; 0x10
    39d2:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    39d6:	0e 94 d8 3e 	call	0x7db0	; 0x7db0 <lround>
    39da:	5b 01       	movw	r10, r22
    39dc:	6c 01       	movw	r12, r24
    39de:	a0 92 83 21 	sts	0x2183, r10
    39e2:	b0 92 84 21 	sts	0x2184, r11
    39e6:	c0 92 85 21 	sts	0x2185, r12
    39ea:	d0 92 86 21 	sts	0x2186, r13
	mc.target[Z_AXIS] = lround(z*CFG(Z_AXIS).steps_per_mm); 
    39ee:	20 91 95 24 	lds	r18, 0x2495
    39f2:	30 91 96 24 	lds	r19, 0x2496
    39f6:	40 91 97 24 	lds	r20, 0x2497
    39fa:	50 91 98 24 	lds	r21, 0x2498
    39fe:	29 87       	std	Y+9, r18	; 0x09
    3a00:	3a 87       	std	Y+10, r19	; 0x0a
    3a02:	4b 87       	std	Y+11, r20	; 0x0b
    3a04:	5c 87       	std	Y+12, r21	; 0x0c
    3a06:	c8 01       	movw	r24, r16
    3a08:	b7 01       	movw	r22, r14
    3a0a:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    3a0e:	0e 94 d8 3e 	call	0x7db0	; 0x7db0 <lround>
    3a12:	9b 01       	movw	r18, r22
    3a14:	ac 01       	movw	r20, r24
    3a16:	20 93 87 21 	sts	0x2187, r18
    3a1a:	30 93 88 21 	sts	0x2188, r19
    3a1e:	40 93 89 21 	sts	0x2189, r20
    3a22:	50 93 8a 21 	sts	0x218A, r21

	mc.steps[X_AXIS] = mc.target[X_AXIS]-mc.position[X_AXIS];
    3a26:	80 91 73 21 	lds	r24, 0x2173
    3a2a:	90 91 74 21 	lds	r25, 0x2174
    3a2e:	a0 91 75 21 	lds	r26, 0x2175
    3a32:	b0 91 76 21 	lds	r27, 0x2176
    3a36:	83 01       	movw	r16, r6
    3a38:	72 01       	movw	r14, r4
    3a3a:	e8 1a       	sub	r14, r24
    3a3c:	f9 0a       	sbc	r15, r25
    3a3e:	0a 0b       	sbc	r16, r26
    3a40:	1b 0b       	sbc	r17, r27
    3a42:	ed 82       	std	Y+5, r14	; 0x05
    3a44:	fe 82       	std	Y+6, r15	; 0x06
    3a46:	0f 83       	std	Y+7, r16	; 0x07
    3a48:	18 87       	std	Y+8, r17	; 0x08
    3a4a:	e0 92 8b 21 	sts	0x218B, r14
    3a4e:	f0 92 8c 21 	sts	0x218C, r15
    3a52:	00 93 8d 21 	sts	0x218D, r16
    3a56:	10 93 8e 21 	sts	0x218E, r17
	mc.steps[Y_AXIS] = mc.target[Y_AXIS]-mc.position[Y_AXIS];
    3a5a:	80 91 77 21 	lds	r24, 0x2177
    3a5e:	90 91 78 21 	lds	r25, 0x2178
    3a62:	a0 91 79 21 	lds	r26, 0x2179
    3a66:	b0 91 7a 21 	lds	r27, 0x217A
    3a6a:	86 01       	movw	r16, r12
    3a6c:	75 01       	movw	r14, r10
    3a6e:	e8 1a       	sub	r14, r24
    3a70:	f9 0a       	sbc	r15, r25
    3a72:	0a 0b       	sbc	r16, r26
    3a74:	1b 0b       	sbc	r17, r27
    3a76:	e9 82       	std	Y+1, r14	; 0x01
    3a78:	fa 82       	std	Y+2, r15	; 0x02
    3a7a:	0b 83       	std	Y+3, r16	; 0x03
    3a7c:	1c 83       	std	Y+4, r17	; 0x04
    3a7e:	e0 92 8f 21 	sts	0x218F, r14
    3a82:	f0 92 90 21 	sts	0x2190, r15
    3a86:	00 93 91 21 	sts	0x2191, r16
    3a8a:	10 93 92 21 	sts	0x2192, r17
	mc.steps[Z_AXIS] = mc.target[Z_AXIS]-mc.position[Z_AXIS];
    3a8e:	80 91 7b 21 	lds	r24, 0x217B
    3a92:	90 91 7c 21 	lds	r25, 0x217C
    3a96:	a0 91 7d 21 	lds	r26, 0x217D
    3a9a:	b0 91 7e 21 	lds	r27, 0x217E
    3a9e:	19 01       	movw	r2, r18
    3aa0:	2a 01       	movw	r4, r20
    3aa2:	28 1a       	sub	r2, r24
    3aa4:	39 0a       	sbc	r3, r25
    3aa6:	4a 0a       	sbc	r4, r26
    3aa8:	5b 0a       	sbc	r5, r27
    3aaa:	20 92 93 21 	sts	0x2193, r2
    3aae:	30 92 94 21 	sts	0x2194, r3
    3ab2:	40 92 95 21 	sts	0x2195, r4
    3ab6:	50 92 96 21 	sts	0x2196, r5

	if (invert_feed_rate) {
    3aba:	89 28       	or	r8, r9
    3abc:	59 f0       	breq	.+22     	; 0x3ad4 <mc_line+0x19c>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3abe:	60 ec       	ldi	r22, 0xC0	; 192
    3ac0:	71 ee       	ldi	r23, 0xE1	; 225
    3ac2:	84 e6       	ldi	r24, 0x64	; 100
    3ac4:	9c e4       	ldi	r25, 0x4C	; 76
    3ac6:	29 8d       	ldd	r18, Y+25	; 0x19
    3ac8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3aca:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3acc:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3ace:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    3ad2:	4e c0       	rjmp	.+156    	; 0x3b70 <mc_line+0x238>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X_AXIS]/CFG(X_AXIS).steps_per_mm) + 
    3ad4:	6d 81       	ldd	r22, Y+5	; 0x05
    3ad6:	7e 81       	ldd	r23, Y+6	; 0x06
    3ad8:	8f 81       	ldd	r24, Y+7	; 0x07
    3ada:	98 85       	ldd	r25, Y+8	; 0x08
    3adc:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    3ae0:	29 89       	ldd	r18, Y+17	; 0x11
    3ae2:	3a 89       	ldd	r19, Y+18	; 0x12
    3ae4:	4b 89       	ldd	r20, Y+19	; 0x13
    3ae6:	5c 89       	ldd	r21, Y+20	; 0x14
    3ae8:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    3aec:	0e 94 b3 3f 	call	0x7f66	; 0x7f66 <square>
    3af0:	3b 01       	movw	r6, r22
    3af2:	4c 01       	movw	r8, r24
    3af4:	69 81       	ldd	r22, Y+1	; 0x01
    3af6:	7a 81       	ldd	r23, Y+2	; 0x02
    3af8:	8b 81       	ldd	r24, Y+3	; 0x03
    3afa:	9c 81       	ldd	r25, Y+4	; 0x04
    3afc:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    3b00:	2d 85       	ldd	r18, Y+13	; 0x0d
    3b02:	3e 85       	ldd	r19, Y+14	; 0x0e
    3b04:	4f 85       	ldd	r20, Y+15	; 0x0f
    3b06:	58 89       	ldd	r21, Y+16	; 0x10
    3b08:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    3b0c:	0e 94 b3 3f 	call	0x7f66	; 0x7f66 <square>
    3b10:	5b 01       	movw	r10, r22
    3b12:	6c 01       	movw	r12, r24
    3b14:	c2 01       	movw	r24, r4
    3b16:	b1 01       	movw	r22, r2
    3b18:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    3b1c:	29 85       	ldd	r18, Y+9	; 0x09
    3b1e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3b20:	4b 85       	ldd	r20, Y+11	; 0x0b
    3b22:	5c 85       	ldd	r21, Y+12	; 0x0c
    3b24:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    3b28:	0e 94 b3 3f 	call	0x7f66	; 0x7f66 <square>
    3b2c:	7b 01       	movw	r14, r22
    3b2e:	8c 01       	movw	r16, r24
    3b30:	c4 01       	movw	r24, r8
    3b32:	b3 01       	movw	r22, r6
    3b34:	a6 01       	movw	r20, r12
    3b36:	95 01       	movw	r18, r10
    3b38:	0e 94 a7 3b 	call	0x774e	; 0x774e <__addsf3>
    3b3c:	a8 01       	movw	r20, r16
    3b3e:	97 01       	movw	r18, r14
    3b40:	0e 94 a7 3b 	call	0x774e	; 0x774e <__addsf3>
    3b44:	0e 94 75 3f 	call	0x7eea	; 0x7eea <sqrt>
    3b48:	60 93 9b 21 	sts	0x219B, r22
    3b4c:	70 93 9c 21 	sts	0x219C, r23
    3b50:	80 93 9d 21 	sts	0x219D, r24
    3b54:	90 93 9e 21 	sts	0x219E, r25
							   square(mc.steps[Y_AXIS]/CFG(Y_AXIS).steps_per_mm) + 
							   square(mc.steps[Z_AXIS]/CFG(Z_AXIS).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3b58:	29 8d       	ldd	r18, Y+25	; 0x19
    3b5a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3b5c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3b5e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3b60:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	34 e2       	ldi	r19, 0x24	; 36
    3b68:	44 e7       	ldi	r20, 0x74	; 116
    3b6a:	59 e4       	ldi	r21, 0x49	; 73
    3b6c:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    3b70:	0e 94 d8 3e 	call	0x7db0	; 0x7db0 <lround>
    3b74:	60 93 97 21 	sts	0x2197, r22
    3b78:	70 93 98 21 	sts	0x2198, r23
    3b7c:	80 93 99 21 	sts	0x2199, r24
    3b80:	90 93 9a 21 	sts	0x219A, r25
	}
    mv_queue_move_buffer(mc.steps[X_AXIS], mc.steps[Y_AXIS], mc.steps[Z_AXIS], mc.microseconds); 
    3b84:	a0 90 97 21 	lds	r10, 0x2197
    3b88:	b0 90 98 21 	lds	r11, 0x2198
    3b8c:	c0 90 99 21 	lds	r12, 0x2199
    3b90:	d0 90 9a 21 	lds	r13, 0x219A
    3b94:	6d 81       	ldd	r22, Y+5	; 0x05
    3b96:	7e 81       	ldd	r23, Y+6	; 0x06
    3b98:	8f 81       	ldd	r24, Y+7	; 0x07
    3b9a:	98 85       	ldd	r25, Y+8	; 0x08
    3b9c:	29 81       	ldd	r18, Y+1	; 0x01
    3b9e:	3a 81       	ldd	r19, Y+2	; 0x02
    3ba0:	4b 81       	ldd	r20, Y+3	; 0x03
    3ba2:	5c 81       	ldd	r21, Y+4	; 0x04
    3ba4:	82 01       	movw	r16, r4
    3ba6:	71 01       	movw	r14, r2
    3ba8:	0e 94 67 30 	call	0x60ce	; 0x60ce <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3bac:	e3 e7       	ldi	r30, 0x73	; 115
    3bae:	f1 e2       	ldi	r31, 0x21	; 33
    3bb0:	df 01       	movw	r26, r30
    3bb2:	1c 96       	adiw	r26, 0x0c	; 12
    3bb4:	8c e0       	ldi	r24, 0x0C	; 12
    3bb6:	0d 90       	ld	r0, X+
    3bb8:	01 92       	st	Z+, r0
    3bba:	81 50       	subi	r24, 0x01	; 1
    3bbc:	e1 f7       	brne	.-8      	; 0x3bb6 <mc_line+0x27e>
	return (TG_OK);
}
    3bbe:	80 e0       	ldi	r24, 0x00	; 0
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	6c 96       	adiw	r28, 0x1c	; 28
    3bc4:	cd bf       	out	0x3d, r28	; 61
    3bc6:	de bf       	out	0x3e, r29	; 62
    3bc8:	cf 91       	pop	r28
    3bca:	df 91       	pop	r29
    3bcc:	1f 91       	pop	r17
    3bce:	0f 91       	pop	r16
    3bd0:	ff 90       	pop	r15
    3bd2:	ef 90       	pop	r14
    3bd4:	df 90       	pop	r13
    3bd6:	cf 90       	pop	r12
    3bd8:	bf 90       	pop	r11
    3bda:	af 90       	pop	r10
    3bdc:	9f 90       	pop	r9
    3bde:	8f 90       	pop	r8
    3be0:	7f 90       	pop	r7
    3be2:	6f 90       	pop	r6
    3be4:	5f 90       	pop	r5
    3be6:	4f 90       	pop	r4
    3be8:	3f 90       	pop	r3
    3bea:	2f 90       	pop	r2
    3bec:	08 95       	ret

00003bee <mc_arc_continuation>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continuation() 
{
    3bee:	8f 92       	push	r8
    3bf0:	9f 92       	push	r9
    3bf2:	af 92       	push	r10
    3bf4:	bf 92       	push	r11
    3bf6:	cf 92       	push	r12
    3bf8:	df 92       	push	r13
    3bfa:	ef 92       	push	r14
    3bfc:	ff 92       	push	r15
    3bfe:	0f 93       	push	r16
    3c00:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3c02:	80 91 b4 24 	lds	r24, 0x24B4
    3c06:	88 23       	and	r24, r24
    3c08:	19 f4       	brne	.+6      	; 0x3c10 <mc_arc_continuation+0x22>
    3c0a:	21 e0       	ldi	r18, 0x01	; 1
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	dd c0       	rjmp	.+442    	; 0x3dca <mc_arc_continuation+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3c10:	81 30       	cpi	r24, 0x01	; 1
    3c12:	09 f0       	breq	.+2      	; 0x3c16 <mc_arc_continuation+0x28>
    3c14:	ca c0       	rjmp	.+404    	; 0x3daa <mc_arc_continuation+0x1bc>
		ma.segment_counter=0;
    3c16:	10 92 b7 24 	sts	0x24B7, r1
    3c1a:	10 92 b8 24 	sts	0x24B8, r1
		ma.arc_state = MC_STATE_RUNNING;
    3c1e:	82 e0       	ldi	r24, 0x02	; 2
    3c20:	80 93 b4 24 	sts	0x24B4, r24
    3c24:	c2 c0       	rjmp	.+388    	; 0x3daa <mc_arc_continuation+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3c26:	0e 94 3b 30 	call	0x6076	; 0x6076 <mv_test_move_buffer_full>
    3c2a:	88 23       	and	r24, r24
    3c2c:	19 f0       	breq	.+6      	; 0x3c34 <mc_arc_continuation+0x46>
    3c2e:	22 e0       	ldi	r18, 0x02	; 2
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	cb c0       	rjmp	.+406    	; 0x3dca <mc_arc_continuation+0x1dc>
			return (TG_CONTINUE);
		}
		ma.segment_counter++;
    3c34:	80 91 b7 24 	lds	r24, 0x24B7
    3c38:	90 91 b8 24 	lds	r25, 0x24B8
    3c3c:	01 96       	adiw	r24, 0x01	; 1
    3c3e:	80 93 b7 24 	sts	0x24B7, r24
    3c42:	90 93 b8 24 	sts	0x24B8, r25
		ma.theta += ma.theta_per_segment;
    3c46:	60 91 d9 24 	lds	r22, 0x24D9
    3c4a:	70 91 da 24 	lds	r23, 0x24DA
    3c4e:	80 91 db 24 	lds	r24, 0x24DB
    3c52:	90 91 dc 24 	lds	r25, 0x24DC
    3c56:	20 91 e5 24 	lds	r18, 0x24E5
    3c5a:	30 91 e6 24 	lds	r19, 0x24E6
    3c5e:	40 91 e7 24 	lds	r20, 0x24E7
    3c62:	50 91 e8 24 	lds	r21, 0x24E8
    3c66:	0e 94 a7 3b 	call	0x774e	; 0x774e <__addsf3>
    3c6a:	7b 01       	movw	r14, r22
    3c6c:	8c 01       	movw	r16, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	d8 01       	movw	r26, r16
    3c72:	80 93 d9 24 	sts	0x24D9, r24
    3c76:	90 93 da 24 	sts	0x24DA, r25
    3c7a:	a0 93 db 24 	sts	0x24DB, r26
    3c7e:	b0 93 dc 24 	sts	0x24DC, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3c82:	b7 01       	movw	r22, r14
    3c84:	c8 01       	movw	r24, r16
    3c86:	0e 94 6b 3f 	call	0x7ed6	; 0x7ed6 <sin>
    3c8a:	80 90 dd 24 	lds	r8, 0x24DD
    3c8e:	90 90 de 24 	lds	r9, 0x24DE
    3c92:	a0 90 df 24 	lds	r10, 0x24DF
    3c96:	b0 90 e0 24 	lds	r11, 0x24E0
    3c9a:	c0 90 bb 24 	lds	r12, 0x24BB
    3c9e:	d0 90 bc 24 	lds	r13, 0x24BC
    3ca2:	cc 0c       	add	r12, r12
    3ca4:	dd 1c       	adc	r13, r13
    3ca6:	cc 0c       	add	r12, r12
    3ca8:	dd 1c       	adc	r13, r13
    3caa:	24 eb       	ldi	r18, 0xB4	; 180
    3cac:	34 e2       	ldi	r19, 0x24	; 36
    3cae:	c2 0e       	add	r12, r18
    3cb0:	d3 1e       	adc	r13, r19
    3cb2:	a5 01       	movw	r20, r10
    3cb4:	94 01       	movw	r18, r8
    3cb6:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    3cba:	9b 01       	movw	r18, r22
    3cbc:	ac 01       	movw	r20, r24
    3cbe:	60 91 d1 24 	lds	r22, 0x24D1
    3cc2:	70 91 d2 24 	lds	r23, 0x24D2
    3cc6:	80 91 d3 24 	lds	r24, 0x24D3
    3cca:	90 91 d4 24 	lds	r25, 0x24D4
    3cce:	0e 94 a7 3b 	call	0x774e	; 0x774e <__addsf3>
    3cd2:	f6 01       	movw	r30, r12
    3cd4:	65 87       	std	Z+13, r22	; 0x0d
    3cd6:	76 87       	std	Z+14, r23	; 0x0e
    3cd8:	87 87       	std	Z+15, r24	; 0x0f
    3cda:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3cdc:	b7 01       	movw	r22, r14
    3cde:	c8 01       	movw	r24, r16
    3ce0:	0e 94 4a 3c 	call	0x7894	; 0x7894 <cos>
    3ce4:	00 91 bd 24 	lds	r16, 0x24BD
    3ce8:	10 91 be 24 	lds	r17, 0x24BE
    3cec:	00 0f       	add	r16, r16
    3cee:	11 1f       	adc	r17, r17
    3cf0:	00 0f       	add	r16, r16
    3cf2:	11 1f       	adc	r17, r17
    3cf4:	0c 54       	subi	r16, 0x4C	; 76
    3cf6:	1b 4d       	sbci	r17, 0xDB	; 219
    3cf8:	a5 01       	movw	r20, r10
    3cfa:	94 01       	movw	r18, r8
    3cfc:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    3d00:	9b 01       	movw	r18, r22
    3d02:	ac 01       	movw	r20, r24
    3d04:	60 91 d5 24 	lds	r22, 0x24D5
    3d08:	70 91 d6 24 	lds	r23, 0x24D6
    3d0c:	80 91 d7 24 	lds	r24, 0x24D7
    3d10:	90 91 d8 24 	lds	r25, 0x24D8
    3d14:	0e 94 a7 3b 	call	0x774e	; 0x774e <__addsf3>
    3d18:	f8 01       	movw	r30, r16
    3d1a:	65 87       	std	Z+13, r22	; 0x0d
    3d1c:	76 87       	std	Z+14, r23	; 0x0e
    3d1e:	87 87       	std	Z+15, r24	; 0x0f
    3d20:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3d22:	00 91 bf 24 	lds	r16, 0x24BF
    3d26:	10 91 c0 24 	lds	r17, 0x24C0
    3d2a:	00 0f       	add	r16, r16
    3d2c:	11 1f       	adc	r17, r17
    3d2e:	00 0f       	add	r16, r16
    3d30:	11 1f       	adc	r17, r17
    3d32:	0c 54       	subi	r16, 0x4C	; 76
    3d34:	1b 4d       	sbci	r17, 0xDB	; 219
    3d36:	f8 01       	movw	r30, r16
    3d38:	65 85       	ldd	r22, Z+13	; 0x0d
    3d3a:	76 85       	ldd	r23, Z+14	; 0x0e
    3d3c:	87 85       	ldd	r24, Z+15	; 0x0f
    3d3e:	90 89       	ldd	r25, Z+16	; 0x10
    3d40:	20 91 e9 24 	lds	r18, 0x24E9
    3d44:	30 91 ea 24 	lds	r19, 0x24EA
    3d48:	40 91 eb 24 	lds	r20, 0x24EB
    3d4c:	50 91 ec 24 	lds	r21, 0x24EC
    3d50:	0e 94 a7 3b 	call	0x774e	; 0x774e <__addsf3>
    3d54:	f8 01       	movw	r30, r16
    3d56:	65 87       	std	Z+13, r22	; 0x0d
    3d58:	76 87       	std	Z+14, r23	; 0x0e
    3d5a:	87 87       	std	Z+15, r24	; 0x0f
    3d5c:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X_AXIS], 
    3d5e:	60 91 c1 24 	lds	r22, 0x24C1
    3d62:	70 91 c2 24 	lds	r23, 0x24C2
    3d66:	80 91 c3 24 	lds	r24, 0x24C3
    3d6a:	90 91 c4 24 	lds	r25, 0x24C4
    3d6e:	20 91 c5 24 	lds	r18, 0x24C5
    3d72:	30 91 c6 24 	lds	r19, 0x24C6
    3d76:	40 91 c7 24 	lds	r20, 0x24C7
    3d7a:	50 91 c8 24 	lds	r21, 0x24C8
    3d7e:	e0 90 c9 24 	lds	r14, 0x24C9
    3d82:	f0 90 ca 24 	lds	r15, 0x24CA
    3d86:	00 91 cb 24 	lds	r16, 0x24CB
    3d8a:	10 91 cc 24 	lds	r17, 0x24CC
    3d8e:	a0 90 e1 24 	lds	r10, 0x24E1
    3d92:	b0 90 e2 24 	lds	r11, 0x24E2
    3d96:	c0 90 e3 24 	lds	r12, 0x24E3
    3d9a:	d0 90 e4 24 	lds	r13, 0x24E4
    3d9e:	80 90 b9 24 	lds	r8, 0x24B9
    3da2:	90 90 ba 24 	lds	r9, 0x24BA
    3da6:	0e 94 9c 1c 	call	0x3938	; 0x3938 <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3daa:	20 91 b7 24 	lds	r18, 0x24B7
    3dae:	30 91 b8 24 	lds	r19, 0x24B8
    3db2:	80 91 b5 24 	lds	r24, 0x24B5
    3db6:	90 91 b6 24 	lds	r25, 0x24B6
    3dba:	82 17       	cp	r24, r18
    3dbc:	93 07       	cpc	r25, r19
    3dbe:	0c f0       	brlt	.+2      	; 0x3dc2 <mc_arc_continuation+0x1d4>
    3dc0:	32 cf       	rjmp	.-412    	; 0x3c26 <mc_arc_continuation+0x38>
				ma.dtarget[Y_AXIS], 
				ma.dtarget[Z_AXIS], 
				ma.feed_rate, 
				ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3dc2:	10 92 b4 24 	sts	0x24B4, r1
    3dc6:	20 e0       	ldi	r18, 0x00	; 0
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3dca:	c9 01       	movw	r24, r18
    3dcc:	1f 91       	pop	r17
    3dce:	0f 91       	pop	r16
    3dd0:	ff 90       	pop	r15
    3dd2:	ef 90       	pop	r14
    3dd4:	df 90       	pop	r13
    3dd6:	cf 90       	pop	r12
    3dd8:	bf 90       	pop	r11
    3dda:	af 90       	pop	r10
    3ddc:	9f 90       	pop	r9
    3dde:	8f 90       	pop	r8
    3de0:	08 95       	ret

00003de2 <mc_arc_nonblock>:

int mc_arc_nonblock(double theta, double angular_travel, 
					double radius, double linear_travel, 
					int axis_1, int axis_2, int axis_linear, 
					double feed_rate, int invert_feed_rate)
{
    3de2:	2f 92       	push	r2
    3de4:	3f 92       	push	r3
    3de6:	4f 92       	push	r4
    3de8:	5f 92       	push	r5
    3dea:	6f 92       	push	r6
    3dec:	7f 92       	push	r7
    3dee:	8f 92       	push	r8
    3df0:	9f 92       	push	r9
    3df2:	af 92       	push	r10
    3df4:	bf 92       	push	r11
    3df6:	cf 92       	push	r12
    3df8:	df 92       	push	r13
    3dfa:	ef 92       	push	r14
    3dfc:	ff 92       	push	r15
    3dfe:	0f 93       	push	r16
    3e00:	1f 93       	push	r17
    3e02:	df 93       	push	r29
    3e04:	cf 93       	push	r28
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
    3e0a:	28 97       	sbiw	r28, 0x08	; 8
    3e0c:	cd bf       	out	0x3d, r28	; 61
    3e0e:	de bf       	out	0x3e, r29	; 62
    3e10:	69 83       	std	Y+1, r22	; 0x01
    3e12:	7a 83       	std	Y+2, r23	; 0x02
    3e14:	8b 83       	std	Y+3, r24	; 0x03
    3e16:	9c 83       	std	Y+4, r25	; 0x04
    3e18:	29 01       	movw	r4, r18
    3e1a:	3a 01       	movw	r6, r20
    3e1c:	ed 82       	std	Y+5, r14	; 0x05
    3e1e:	fe 82       	std	Y+6, r15	; 0x06
    3e20:	0f 83       	std	Y+7, r16	; 0x07
    3e22:	18 87       	std	Y+8, r17	; 0x08
    3e24:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3e26:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3e28:	60 93 d9 24 	sts	0x24D9, r22
    3e2c:	70 93 da 24 	sts	0x24DA, r23
    3e30:	80 93 db 24 	sts	0x24DB, r24
    3e34:	90 93 dc 24 	sts	0x24DC, r25
	ma.radius = radius;
    3e38:	e0 92 dd 24 	sts	0x24DD, r14
    3e3c:	f0 92 de 24 	sts	0x24DE, r15
    3e40:	00 93 df 24 	sts	0x24DF, r16
    3e44:	10 93 e0 24 	sts	0x24E0, r17
	ma.angular_travel = angular_travel;
    3e48:	20 93 ed 24 	sts	0x24ED, r18
    3e4c:	30 93 ee 24 	sts	0x24EE, r19
    3e50:	40 93 ef 24 	sts	0x24EF, r20
    3e54:	50 93 f0 24 	sts	0x24F0, r21
	ma.linear_travel = linear_travel;
    3e58:	a0 92 f1 24 	sts	0x24F1, r10
    3e5c:	b0 92 f2 24 	sts	0x24F2, r11
    3e60:	c0 92 f3 24 	sts	0x24F3, r12
    3e64:	d0 92 f4 24 	sts	0x24F4, r13
	ma.feed_rate = feed_rate;
    3e68:	8a a1       	ldd	r24, Y+34	; 0x22
    3e6a:	9b a1       	ldd	r25, Y+35	; 0x23
    3e6c:	ac a1       	ldd	r26, Y+36	; 0x24
    3e6e:	bd a1       	ldd	r27, Y+37	; 0x25
    3e70:	80 93 e1 24 	sts	0x24E1, r24
    3e74:	90 93 e2 24 	sts	0x24E2, r25
    3e78:	a0 93 e3 24 	sts	0x24E3, r26
    3e7c:	b0 93 e4 24 	sts	0x24E4, r27
	ma.invert_feed_rate = invert_feed_rate;
    3e80:	ae a1       	ldd	r26, Y+38	; 0x26
    3e82:	bf a1       	ldd	r27, Y+39	; 0x27
    3e84:	a0 93 b9 24 	sts	0x24B9, r26
    3e88:	b0 93 ba 24 	sts	0x24BA, r27
	ma.axis_1 = axis_1;
    3e8c:	80 92 bb 24 	sts	0x24BB, r8
    3e90:	90 92 bc 24 	sts	0x24BC, r9
	ma.axis_2 = axis_2;
    3e94:	20 92 bd 24 	sts	0x24BD, r2
    3e98:	30 92 be 24 	sts	0x24BE, r3
	ma.axis_linear = axis_linear;
    3e9c:	e8 a1       	ldd	r30, Y+32	; 0x20
    3e9e:	f9 a1       	ldd	r31, Y+33	; 0x21
    3ea0:	e0 93 bf 24 	sts	0x24BF, r30
    3ea4:	f0 93 c0 24 	sts	0x24C0, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3ea8:	ca 01       	movw	r24, r20
    3eaa:	b9 01       	movw	r22, r18
    3eac:	a8 01       	movw	r20, r16
    3eae:	97 01       	movw	r18, r14
    3eb0:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    3eb4:	7b 01       	movw	r14, r22
    3eb6:	8c 01       	movw	r16, r24
    3eb8:	c6 01       	movw	r24, r12
    3eba:	b5 01       	movw	r22, r10
    3ebc:	0e 94 b5 3c 	call	0x796a	; 0x796a <__fixsfsi>
    3ec0:	97 ff       	sbrs	r25, 7
    3ec2:	07 c0       	rjmp	.+14     	; 0x3ed2 <mc_arc_nonblock+0xf0>
    3ec4:	90 95       	com	r25
    3ec6:	80 95       	com	r24
    3ec8:	70 95       	com	r23
    3eca:	61 95       	neg	r22
    3ecc:	7f 4f       	sbci	r23, 0xFF	; 255
    3ece:	8f 4f       	sbci	r24, 0xFF	; 255
    3ed0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed2:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    3ed6:	9b 01       	movw	r18, r22
    3ed8:	ac 01       	movw	r20, r24
    3eda:	c8 01       	movw	r24, r16
    3edc:	b7 01       	movw	r22, r14
    3ede:	0e 94 43 3e 	call	0x7c86	; 0x7c86 <hypot>
    3ee2:	7b 01       	movw	r14, r22
    3ee4:	8c 01       	movw	r16, r24
    3ee6:	60 93 cd 24 	sts	0x24CD, r22
    3eea:	70 93 ce 24 	sts	0x24CE, r23
    3eee:	80 93 cf 24 	sts	0x24CF, r24
    3ef2:	90 93 d0 24 	sts	0x24D0, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3ef6:	2a e0       	ldi	r18, 0x0A	; 10
    3ef8:	37 ed       	ldi	r19, 0xD7	; 215
    3efa:	43 e2       	ldi	r20, 0x23	; 35
    3efc:	5c e3       	ldi	r21, 0x3C	; 60
    3efe:	0e 94 46 3c 	call	0x788c	; 0x788c <__cmpsf2>
    3f02:	88 23       	and	r24, r24
    3f04:	1c f4       	brge	.+6      	; 0x3f0c <mc_arc_nonblock+0x12a>
    3f06:	2f e0       	ldi	r18, 0x0F	; 15
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	fb c0       	rjmp	.+502    	; 0x4102 <mc_arc_nonblock+0x320>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3f0c:	c8 01       	movw	r24, r16
    3f0e:	b7 01       	movw	r22, r14
    3f10:	20 91 46 24 	lds	r18, 0x2446
    3f14:	30 91 47 24 	lds	r19, 0x2447
    3f18:	40 91 48 24 	lds	r20, 0x2448
    3f1c:	50 91 49 24 	lds	r21, 0x2449
    3f20:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    3f24:	0e 94 33 3c 	call	0x7866	; 0x7866 <ceil>
    3f28:	0e 94 b5 3c 	call	0x796a	; 0x796a <__fixsfsi>
    3f2c:	8b 01       	movw	r16, r22
    3f2e:	60 93 b5 24 	sts	0x24B5, r22
    3f32:	70 93 b6 24 	sts	0x24B6, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    3f36:	8e a1       	ldd	r24, Y+38	; 0x26
    3f38:	9f a1       	ldd	r25, Y+39	; 0x27
    3f3a:	89 2b       	or	r24, r25
    3f3c:	b9 f0       	breq	.+46     	; 0x3f6c <mc_arc_nonblock+0x18a>
		ma.feed_rate *= ma.segments; 
    3f3e:	b8 01       	movw	r22, r16
    3f40:	88 27       	eor	r24, r24
    3f42:	77 fd       	sbrc	r23, 7
    3f44:	80 95       	com	r24
    3f46:	98 2f       	mov	r25, r24
    3f48:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    3f4c:	9b 01       	movw	r18, r22
    3f4e:	ac 01       	movw	r20, r24
    3f50:	6a a1       	ldd	r22, Y+34	; 0x22
    3f52:	7b a1       	ldd	r23, Y+35	; 0x23
    3f54:	8c a1       	ldd	r24, Y+36	; 0x24
    3f56:	9d a1       	ldd	r25, Y+37	; 0x25
    3f58:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    3f5c:	60 93 e1 24 	sts	0x24E1, r22
    3f60:	70 93 e2 24 	sts	0x24E2, r23
    3f64:	80 93 e3 24 	sts	0x24E3, r24
    3f68:	90 93 e4 24 	sts	0x24E4, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    3f6c:	b8 01       	movw	r22, r16
    3f6e:	88 27       	eor	r24, r24
    3f70:	77 fd       	sbrc	r23, 7
    3f72:	80 95       	com	r24
    3f74:	98 2f       	mov	r25, r24
    3f76:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    3f7a:	7b 01       	movw	r14, r22
    3f7c:	8c 01       	movw	r16, r24
    3f7e:	c3 01       	movw	r24, r6
    3f80:	b2 01       	movw	r22, r4
    3f82:	a8 01       	movw	r20, r16
    3f84:	97 01       	movw	r18, r14
    3f86:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    3f8a:	60 93 e5 24 	sts	0x24E5, r22
    3f8e:	70 93 e6 24 	sts	0x24E6, r23
    3f92:	80 93 e7 24 	sts	0x24E7, r24
    3f96:	90 93 e8 24 	sts	0x24E8, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    3f9a:	c6 01       	movw	r24, r12
    3f9c:	b5 01       	movw	r22, r10
    3f9e:	a8 01       	movw	r20, r16
    3fa0:	97 01       	movw	r18, r14
    3fa2:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    3fa6:	60 93 e9 24 	sts	0x24E9, r22
    3faa:	70 93 ea 24 	sts	0x24EA, r23
    3fae:	80 93 eb 24 	sts	0x24EB, r24
    3fb2:	90 93 ec 24 	sts	0x24EC, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    3fb6:	69 81       	ldd	r22, Y+1	; 0x01
    3fb8:	7a 81       	ldd	r23, Y+2	; 0x02
    3fba:	8b 81       	ldd	r24, Y+3	; 0x03
    3fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    3fbe:	0e 94 6b 3f 	call	0x7ed6	; 0x7ed6 <sin>
    3fc2:	5b 01       	movw	r10, r22
    3fc4:	6c 01       	movw	r12, r24
    3fc6:	f4 01       	movw	r30, r8
    3fc8:	ee 0f       	add	r30, r30
    3fca:	ff 1f       	adc	r31, r31
    3fcc:	ee 0f       	add	r30, r30
    3fce:	ff 1f       	adc	r31, r31
    3fd0:	ee 58       	subi	r30, 0x8E	; 142
    3fd2:	fe 4d       	sbci	r31, 0xDE	; 222
    3fd4:	61 81       	ldd	r22, Z+1	; 0x01
    3fd6:	72 81       	ldd	r23, Z+2	; 0x02
    3fd8:	83 81       	ldd	r24, Z+3	; 0x03
    3fda:	94 81       	ldd	r25, Z+4	; 0x04
    3fdc:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    3fe0:	f4 01       	movw	r30, r8
    3fe2:	ee 0f       	add	r30, r30
    3fe4:	ff 1f       	adc	r31, r31
    3fe6:	e8 0d       	add	r30, r8
    3fe8:	f9 1d       	adc	r31, r9
    3fea:	13 e0       	ldi	r17, 0x03	; 3
    3fec:	ee 0f       	add	r30, r30
    3fee:	ff 1f       	adc	r31, r31
    3ff0:	1a 95       	dec	r17
    3ff2:	e1 f7       	brne	.-8      	; 0x3fec <mc_arc_nonblock+0x20a>
    3ff4:	ec 5b       	subi	r30, 0xBC	; 188
    3ff6:	fb 4d       	sbci	r31, 0xDB	; 219
    3ff8:	21 a1       	ldd	r18, Z+33	; 0x21
    3ffa:	32 a1       	ldd	r19, Z+34	; 0x22
    3ffc:	43 a1       	ldd	r20, Z+35	; 0x23
    3ffe:	54 a1       	ldd	r21, Z+36	; 0x24
    4000:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    4004:	7b 01       	movw	r14, r22
    4006:	8c 01       	movw	r16, r24
    4008:	c6 01       	movw	r24, r12
    400a:	b5 01       	movw	r22, r10
    400c:	2d 81       	ldd	r18, Y+5	; 0x05
    400e:	3e 81       	ldd	r19, Y+6	; 0x06
    4010:	4f 81       	ldd	r20, Y+7	; 0x07
    4012:	58 85       	ldd	r21, Y+8	; 0x08
    4014:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    4018:	9b 01       	movw	r18, r22
    401a:	ac 01       	movw	r20, r24
    401c:	c8 01       	movw	r24, r16
    401e:	b7 01       	movw	r22, r14
    4020:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    4024:	60 93 d1 24 	sts	0x24D1, r22
    4028:	70 93 d2 24 	sts	0x24D2, r23
    402c:	80 93 d3 24 	sts	0x24D3, r24
    4030:	90 93 d4 24 	sts	0x24D4, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    4034:	69 81       	ldd	r22, Y+1	; 0x01
    4036:	7a 81       	ldd	r23, Y+2	; 0x02
    4038:	8b 81       	ldd	r24, Y+3	; 0x03
    403a:	9c 81       	ldd	r25, Y+4	; 0x04
    403c:	0e 94 4a 3c 	call	0x7894	; 0x7894 <cos>
    4040:	5b 01       	movw	r10, r22
    4042:	6c 01       	movw	r12, r24
    4044:	f1 01       	movw	r30, r2
    4046:	ee 0f       	add	r30, r30
    4048:	ff 1f       	adc	r31, r31
    404a:	ee 0f       	add	r30, r30
    404c:	ff 1f       	adc	r31, r31
    404e:	ee 58       	subi	r30, 0x8E	; 142
    4050:	fe 4d       	sbci	r31, 0xDE	; 222
    4052:	61 81       	ldd	r22, Z+1	; 0x01
    4054:	72 81       	ldd	r23, Z+2	; 0x02
    4056:	83 81       	ldd	r24, Z+3	; 0x03
    4058:	94 81       	ldd	r25, Z+4	; 0x04
    405a:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    405e:	f1 01       	movw	r30, r2
    4060:	ee 0f       	add	r30, r30
    4062:	ff 1f       	adc	r31, r31
    4064:	e2 0d       	add	r30, r2
    4066:	f3 1d       	adc	r31, r3
    4068:	53 e0       	ldi	r21, 0x03	; 3
    406a:	ee 0f       	add	r30, r30
    406c:	ff 1f       	adc	r31, r31
    406e:	5a 95       	dec	r21
    4070:	e1 f7       	brne	.-8      	; 0x406a <mc_arc_nonblock+0x288>
    4072:	ec 5b       	subi	r30, 0xBC	; 188
    4074:	fb 4d       	sbci	r31, 0xDB	; 219
    4076:	21 a1       	ldd	r18, Z+33	; 0x21
    4078:	32 a1       	ldd	r19, Z+34	; 0x22
    407a:	43 a1       	ldd	r20, Z+35	; 0x23
    407c:	54 a1       	ldd	r21, Z+36	; 0x24
    407e:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    4082:	7b 01       	movw	r14, r22
    4084:	8c 01       	movw	r16, r24
    4086:	c6 01       	movw	r24, r12
    4088:	b5 01       	movw	r22, r10
    408a:	2d 81       	ldd	r18, Y+5	; 0x05
    408c:	3e 81       	ldd	r19, Y+6	; 0x06
    408e:	4f 81       	ldd	r20, Y+7	; 0x07
    4090:	58 85       	ldd	r21, Y+8	; 0x08
    4092:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    4096:	9b 01       	movw	r18, r22
    4098:	ac 01       	movw	r20, r24
    409a:	c8 01       	movw	r24, r16
    409c:	b7 01       	movw	r22, r14
    409e:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    40a2:	60 93 d5 24 	sts	0x24D5, r22
    40a6:	70 93 d6 24 	sts	0x24D6, r23
    40aa:	80 93 d7 24 	sts	0x24D7, r24
    40ae:	90 93 d8 24 	sts	0x24D8, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
    40b2:	e8 a1       	ldd	r30, Y+32	; 0x20
    40b4:	f9 a1       	ldd	r31, Y+33	; 0x21
    40b6:	ee 0f       	add	r30, r30
    40b8:	ff 1f       	adc	r31, r31
    40ba:	ee 0f       	add	r30, r30
    40bc:	ff 1f       	adc	r31, r31
    40be:	8f 01       	movw	r16, r30
    40c0:	0c 54       	subi	r16, 0x4C	; 76
    40c2:	1b 4d       	sbci	r17, 0xDB	; 219
    40c4:	ee 58       	subi	r30, 0x8E	; 142
    40c6:	fe 4d       	sbci	r31, 0xDE	; 222
    40c8:	61 81       	ldd	r22, Z+1	; 0x01
    40ca:	72 81       	ldd	r23, Z+2	; 0x02
    40cc:	83 81       	ldd	r24, Z+3	; 0x03
    40ce:	94 81       	ldd	r25, Z+4	; 0x04
    40d0:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    40d4:	20 91 95 24 	lds	r18, 0x2495
    40d8:	30 91 96 24 	lds	r19, 0x2496
    40dc:	40 91 97 24 	lds	r20, 0x2497
    40e0:	50 91 98 24 	lds	r21, 0x2498
    40e4:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    40e8:	d8 01       	movw	r26, r16
    40ea:	1d 96       	adiw	r26, 0x0d	; 13
    40ec:	6d 93       	st	X+, r22
    40ee:	7d 93       	st	X+, r23
    40f0:	8d 93       	st	X+, r24
    40f2:	9c 93       	st	X, r25
    40f4:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	80 93 b4 24 	sts	0x24B4, r24
	return (mc_arc_continuation());
    40fc:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <mc_arc_continuation>
    4100:	9c 01       	movw	r18, r24
}
    4102:	c9 01       	movw	r24, r18
    4104:	28 96       	adiw	r28, 0x08	; 8
    4106:	cd bf       	out	0x3d, r28	; 61
    4108:	de bf       	out	0x3e, r29	; 62
    410a:	cf 91       	pop	r28
    410c:	df 91       	pop	r29
    410e:	1f 91       	pop	r17
    4110:	0f 91       	pop	r16
    4112:	ff 90       	pop	r15
    4114:	ef 90       	pop	r14
    4116:	df 90       	pop	r13
    4118:	cf 90       	pop	r12
    411a:	bf 90       	pop	r11
    411c:	af 90       	pop	r10
    411e:	9f 90       	pop	r9
    4120:	8f 90       	pop	r8
    4122:	7f 90       	pop	r7
    4124:	6f 90       	pop	r6
    4126:	5f 90       	pop	r5
    4128:	4f 90       	pop	r4
    412a:	3f 90       	pop	r3
    412c:	2f 90       	pop	r2
    412e:	08 95       	ret

00004130 <mc_arc>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    4130:	2f 92       	push	r2
    4132:	3f 92       	push	r3
    4134:	4f 92       	push	r4
    4136:	5f 92       	push	r5
    4138:	6f 92       	push	r6
    413a:	7f 92       	push	r7
    413c:	8f 92       	push	r8
    413e:	9f 92       	push	r9
    4140:	af 92       	push	r10
    4142:	bf 92       	push	r11
    4144:	cf 92       	push	r12
    4146:	df 92       	push	r13
    4148:	ef 92       	push	r14
    414a:	ff 92       	push	r15
    414c:	0f 93       	push	r16
    414e:	1f 93       	push	r17
    4150:	df 93       	push	r29
    4152:	cf 93       	push	r28
    4154:	cd b7       	in	r28, 0x3d	; 61
    4156:	de b7       	in	r29, 0x3e	; 62
    4158:	28 97       	sbiw	r28, 0x08	; 8
    415a:	cd bf       	out	0x3d, r28	; 61
    415c:	de bf       	out	0x3e, r29	; 62
    415e:	69 83       	std	Y+1, r22	; 0x01
    4160:	7a 83       	std	Y+2, r23	; 0x02
    4162:	8b 83       	std	Y+3, r24	; 0x03
    4164:	9c 83       	std	Y+4, r25	; 0x04
    4166:	29 01       	movw	r4, r18
    4168:	3a 01       	movw	r6, r20
    416a:	ed 82       	std	Y+5, r14	; 0x05
    416c:	fe 82       	std	Y+6, r15	; 0x06
    416e:	0f 83       	std	Y+7, r16	; 0x07
    4170:	18 87       	std	Y+8, r17	; 0x08
    4172:	2e 8c       	ldd	r2, Y+30	; 0x1e
    4174:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    4176:	60 93 d9 24 	sts	0x24D9, r22
    417a:	70 93 da 24 	sts	0x24DA, r23
    417e:	80 93 db 24 	sts	0x24DB, r24
    4182:	90 93 dc 24 	sts	0x24DC, r25
	ma.radius = radius;
    4186:	e0 92 dd 24 	sts	0x24DD, r14
    418a:	f0 92 de 24 	sts	0x24DE, r15
    418e:	00 93 df 24 	sts	0x24DF, r16
    4192:	10 93 e0 24 	sts	0x24E0, r17
	ma.angular_travel = angular_travel;
    4196:	20 93 ed 24 	sts	0x24ED, r18
    419a:	30 93 ee 24 	sts	0x24EE, r19
    419e:	40 93 ef 24 	sts	0x24EF, r20
    41a2:	50 93 f0 24 	sts	0x24F0, r21
	ma.linear_travel = linear_travel;
    41a6:	a0 92 f1 24 	sts	0x24F1, r10
    41aa:	b0 92 f2 24 	sts	0x24F2, r11
    41ae:	c0 92 f3 24 	sts	0x24F3, r12
    41b2:	d0 92 f4 24 	sts	0x24F4, r13
	ma.feed_rate = feed_rate;
    41b6:	8a a1       	ldd	r24, Y+34	; 0x22
    41b8:	9b a1       	ldd	r25, Y+35	; 0x23
    41ba:	ac a1       	ldd	r26, Y+36	; 0x24
    41bc:	bd a1       	ldd	r27, Y+37	; 0x25
    41be:	80 93 e1 24 	sts	0x24E1, r24
    41c2:	90 93 e2 24 	sts	0x24E2, r25
    41c6:	a0 93 e3 24 	sts	0x24E3, r26
    41ca:	b0 93 e4 24 	sts	0x24E4, r27
	ma.invert_feed_rate = invert_feed_rate;
    41ce:	ae a1       	ldd	r26, Y+38	; 0x26
    41d0:	bf a1       	ldd	r27, Y+39	; 0x27
    41d2:	a0 93 b9 24 	sts	0x24B9, r26
    41d6:	b0 93 ba 24 	sts	0x24BA, r27
	ma.axis_1 = axis_1;
    41da:	80 92 bb 24 	sts	0x24BB, r8
    41de:	90 92 bc 24 	sts	0x24BC, r9
	ma.axis_2 = axis_2;
    41e2:	20 92 bd 24 	sts	0x24BD, r2
    41e6:	30 92 be 24 	sts	0x24BE, r3
	ma.axis_linear = axis_linear;
    41ea:	e8 a1       	ldd	r30, Y+32	; 0x20
    41ec:	f9 a1       	ldd	r31, Y+33	; 0x21
    41ee:	e0 93 bf 24 	sts	0x24BF, r30
    41f2:	f0 93 c0 24 	sts	0x24C0, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    41f6:	ca 01       	movw	r24, r20
    41f8:	b9 01       	movw	r22, r18
    41fa:	a8 01       	movw	r20, r16
    41fc:	97 01       	movw	r18, r14
    41fe:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    4202:	7b 01       	movw	r14, r22
    4204:	8c 01       	movw	r16, r24
    4206:	c6 01       	movw	r24, r12
    4208:	b5 01       	movw	r22, r10
    420a:	0e 94 b5 3c 	call	0x796a	; 0x796a <__fixsfsi>
    420e:	97 ff       	sbrs	r25, 7
    4210:	07 c0       	rjmp	.+14     	; 0x4220 <mc_arc+0xf0>
    4212:	90 95       	com	r25
    4214:	80 95       	com	r24
    4216:	70 95       	com	r23
    4218:	61 95       	neg	r22
    421a:	7f 4f       	sbci	r23, 0xFF	; 255
    421c:	8f 4f       	sbci	r24, 0xFF	; 255
    421e:	9f 4f       	sbci	r25, 0xFF	; 255
    4220:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    4224:	9b 01       	movw	r18, r22
    4226:	ac 01       	movw	r20, r24
    4228:	c8 01       	movw	r24, r16
    422a:	b7 01       	movw	r22, r14
    422c:	0e 94 43 3e 	call	0x7c86	; 0x7c86 <hypot>
    4230:	7b 01       	movw	r14, r22
    4232:	8c 01       	movw	r16, r24
    4234:	60 93 cd 24 	sts	0x24CD, r22
    4238:	70 93 ce 24 	sts	0x24CE, r23
    423c:	80 93 cf 24 	sts	0x24CF, r24
    4240:	90 93 d0 24 	sts	0x24D0, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    4244:	2a e0       	ldi	r18, 0x0A	; 10
    4246:	37 ed       	ldi	r19, 0xD7	; 215
    4248:	43 e2       	ldi	r20, 0x23	; 35
    424a:	5c e3       	ldi	r21, 0x3C	; 60
    424c:	0e 94 46 3c 	call	0x788c	; 0x788c <__cmpsf2>
    4250:	88 23       	and	r24, r24
    4252:	1c f4       	brge	.+6      	; 0x425a <mc_arc+0x12a>
    4254:	2f e0       	ldi	r18, 0x0F	; 15
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	c7 c1       	rjmp	.+910    	; 0x45e8 <mc_arc+0x4b8>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    425a:	c8 01       	movw	r24, r16
    425c:	b7 01       	movw	r22, r14
    425e:	20 91 46 24 	lds	r18, 0x2446
    4262:	30 91 47 24 	lds	r19, 0x2447
    4266:	40 91 48 24 	lds	r20, 0x2448
    426a:	50 91 49 24 	lds	r21, 0x2449
    426e:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    4272:	0e 94 33 3c 	call	0x7866	; 0x7866 <ceil>
    4276:	0e 94 b5 3c 	call	0x796a	; 0x796a <__fixsfsi>
    427a:	8b 01       	movw	r16, r22
    427c:	60 93 b5 24 	sts	0x24B5, r22
    4280:	70 93 b6 24 	sts	0x24B6, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    4284:	2e a1       	ldd	r18, Y+38	; 0x26
    4286:	3f a1       	ldd	r19, Y+39	; 0x27
    4288:	23 2b       	or	r18, r19
    428a:	b9 f0       	breq	.+46     	; 0x42ba <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    428c:	b8 01       	movw	r22, r16
    428e:	88 27       	eor	r24, r24
    4290:	77 fd       	sbrc	r23, 7
    4292:	80 95       	com	r24
    4294:	98 2f       	mov	r25, r24
    4296:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    429a:	9b 01       	movw	r18, r22
    429c:	ac 01       	movw	r20, r24
    429e:	6a a1       	ldd	r22, Y+34	; 0x22
    42a0:	7b a1       	ldd	r23, Y+35	; 0x23
    42a2:	8c a1       	ldd	r24, Y+36	; 0x24
    42a4:	9d a1       	ldd	r25, Y+37	; 0x25
    42a6:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    42aa:	60 93 e1 24 	sts	0x24E1, r22
    42ae:	70 93 e2 24 	sts	0x24E2, r23
    42b2:	80 93 e3 24 	sts	0x24E3, r24
    42b6:	90 93 e4 24 	sts	0x24E4, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    42ba:	b8 01       	movw	r22, r16
    42bc:	88 27       	eor	r24, r24
    42be:	77 fd       	sbrc	r23, 7
    42c0:	80 95       	com	r24
    42c2:	98 2f       	mov	r25, r24
    42c4:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    42c8:	7b 01       	movw	r14, r22
    42ca:	8c 01       	movw	r16, r24
    42cc:	c3 01       	movw	r24, r6
    42ce:	b2 01       	movw	r22, r4
    42d0:	a8 01       	movw	r20, r16
    42d2:	97 01       	movw	r18, r14
    42d4:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    42d8:	60 93 e5 24 	sts	0x24E5, r22
    42dc:	70 93 e6 24 	sts	0x24E6, r23
    42e0:	80 93 e7 24 	sts	0x24E7, r24
    42e4:	90 93 e8 24 	sts	0x24E8, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    42e8:	c6 01       	movw	r24, r12
    42ea:	b5 01       	movw	r22, r10
    42ec:	a8 01       	movw	r20, r16
    42ee:	97 01       	movw	r18, r14
    42f0:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    42f4:	60 93 e9 24 	sts	0x24E9, r22
    42f8:	70 93 ea 24 	sts	0x24EA, r23
    42fc:	80 93 eb 24 	sts	0x24EB, r24
    4300:	90 93 ec 24 	sts	0x24EC, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    4304:	69 81       	ldd	r22, Y+1	; 0x01
    4306:	7a 81       	ldd	r23, Y+2	; 0x02
    4308:	8b 81       	ldd	r24, Y+3	; 0x03
    430a:	9c 81       	ldd	r25, Y+4	; 0x04
    430c:	0e 94 6b 3f 	call	0x7ed6	; 0x7ed6 <sin>
    4310:	5b 01       	movw	r10, r22
    4312:	6c 01       	movw	r12, r24
    4314:	f4 01       	movw	r30, r8
    4316:	ee 0f       	add	r30, r30
    4318:	ff 1f       	adc	r31, r31
    431a:	ee 0f       	add	r30, r30
    431c:	ff 1f       	adc	r31, r31
    431e:	ee 58       	subi	r30, 0x8E	; 142
    4320:	fe 4d       	sbci	r31, 0xDE	; 222
    4322:	61 81       	ldd	r22, Z+1	; 0x01
    4324:	72 81       	ldd	r23, Z+2	; 0x02
    4326:	83 81       	ldd	r24, Z+3	; 0x03
    4328:	94 81       	ldd	r25, Z+4	; 0x04
    432a:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    432e:	f4 01       	movw	r30, r8
    4330:	ee 0f       	add	r30, r30
    4332:	ff 1f       	adc	r31, r31
    4334:	e8 0d       	add	r30, r8
    4336:	f9 1d       	adc	r31, r9
    4338:	13 e0       	ldi	r17, 0x03	; 3
    433a:	ee 0f       	add	r30, r30
    433c:	ff 1f       	adc	r31, r31
    433e:	1a 95       	dec	r17
    4340:	e1 f7       	brne	.-8      	; 0x433a <mc_arc+0x20a>
    4342:	ec 5b       	subi	r30, 0xBC	; 188
    4344:	fb 4d       	sbci	r31, 0xDB	; 219
    4346:	21 a1       	ldd	r18, Z+33	; 0x21
    4348:	32 a1       	ldd	r19, Z+34	; 0x22
    434a:	43 a1       	ldd	r20, Z+35	; 0x23
    434c:	54 a1       	ldd	r21, Z+36	; 0x24
    434e:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    4352:	7b 01       	movw	r14, r22
    4354:	8c 01       	movw	r16, r24
    4356:	c6 01       	movw	r24, r12
    4358:	b5 01       	movw	r22, r10
    435a:	2d 81       	ldd	r18, Y+5	; 0x05
    435c:	3e 81       	ldd	r19, Y+6	; 0x06
    435e:	4f 81       	ldd	r20, Y+7	; 0x07
    4360:	58 85       	ldd	r21, Y+8	; 0x08
    4362:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    4366:	9b 01       	movw	r18, r22
    4368:	ac 01       	movw	r20, r24
    436a:	c8 01       	movw	r24, r16
    436c:	b7 01       	movw	r22, r14
    436e:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    4372:	60 93 d1 24 	sts	0x24D1, r22
    4376:	70 93 d2 24 	sts	0x24D2, r23
    437a:	80 93 d3 24 	sts	0x24D3, r24
    437e:	90 93 d4 24 	sts	0x24D4, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    4382:	69 81       	ldd	r22, Y+1	; 0x01
    4384:	7a 81       	ldd	r23, Y+2	; 0x02
    4386:	8b 81       	ldd	r24, Y+3	; 0x03
    4388:	9c 81       	ldd	r25, Y+4	; 0x04
    438a:	0e 94 4a 3c 	call	0x7894	; 0x7894 <cos>
    438e:	5b 01       	movw	r10, r22
    4390:	6c 01       	movw	r12, r24
    4392:	f1 01       	movw	r30, r2
    4394:	ee 0f       	add	r30, r30
    4396:	ff 1f       	adc	r31, r31
    4398:	ee 0f       	add	r30, r30
    439a:	ff 1f       	adc	r31, r31
    439c:	ee 58       	subi	r30, 0x8E	; 142
    439e:	fe 4d       	sbci	r31, 0xDE	; 222
    43a0:	61 81       	ldd	r22, Z+1	; 0x01
    43a2:	72 81       	ldd	r23, Z+2	; 0x02
    43a4:	83 81       	ldd	r24, Z+3	; 0x03
    43a6:	94 81       	ldd	r25, Z+4	; 0x04
    43a8:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    43ac:	f1 01       	movw	r30, r2
    43ae:	ee 0f       	add	r30, r30
    43b0:	ff 1f       	adc	r31, r31
    43b2:	e2 0d       	add	r30, r2
    43b4:	f3 1d       	adc	r31, r3
    43b6:	53 e0       	ldi	r21, 0x03	; 3
    43b8:	ee 0f       	add	r30, r30
    43ba:	ff 1f       	adc	r31, r31
    43bc:	5a 95       	dec	r21
    43be:	e1 f7       	brne	.-8      	; 0x43b8 <mc_arc+0x288>
    43c0:	ec 5b       	subi	r30, 0xBC	; 188
    43c2:	fb 4d       	sbci	r31, 0xDB	; 219
    43c4:	21 a1       	ldd	r18, Z+33	; 0x21
    43c6:	32 a1       	ldd	r19, Z+34	; 0x22
    43c8:	43 a1       	ldd	r20, Z+35	; 0x23
    43ca:	54 a1       	ldd	r21, Z+36	; 0x24
    43cc:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    43d0:	7b 01       	movw	r14, r22
    43d2:	8c 01       	movw	r16, r24
    43d4:	c6 01       	movw	r24, r12
    43d6:	b5 01       	movw	r22, r10
    43d8:	2d 81       	ldd	r18, Y+5	; 0x05
    43da:	3e 81       	ldd	r19, Y+6	; 0x06
    43dc:	4f 81       	ldd	r20, Y+7	; 0x07
    43de:	58 85       	ldd	r21, Y+8	; 0x08
    43e0:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    43e4:	9b 01       	movw	r18, r22
    43e6:	ac 01       	movw	r20, r24
    43e8:	c8 01       	movw	r24, r16
    43ea:	b7 01       	movw	r22, r14
    43ec:	0e 94 a6 3b 	call	0x774c	; 0x774c <__subsf3>
    43f0:	60 93 d5 24 	sts	0x24D5, r22
    43f4:	70 93 d6 24 	sts	0x24D6, r23
    43f8:	80 93 d7 24 	sts	0x24D7, r24
    43fc:	90 93 d8 24 	sts	0x24D8, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
    4400:	e8 a1       	ldd	r30, Y+32	; 0x20
    4402:	f9 a1       	ldd	r31, Y+33	; 0x21
    4404:	ee 0f       	add	r30, r30
    4406:	ff 1f       	adc	r31, r31
    4408:	ee 0f       	add	r30, r30
    440a:	ff 1f       	adc	r31, r31
    440c:	8f 01       	movw	r16, r30
    440e:	0c 54       	subi	r16, 0x4C	; 76
    4410:	1b 4d       	sbci	r17, 0xDB	; 219
    4412:	ee 58       	subi	r30, 0x8E	; 142
    4414:	fe 4d       	sbci	r31, 0xDE	; 222
    4416:	61 81       	ldd	r22, Z+1	; 0x01
    4418:	72 81       	ldd	r23, Z+2	; 0x02
    441a:	83 81       	ldd	r24, Z+3	; 0x03
    441c:	94 81       	ldd	r25, Z+4	; 0x04
    441e:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <__floatsisf>
    4422:	20 91 95 24 	lds	r18, 0x2495
    4426:	30 91 96 24 	lds	r19, 0x2496
    442a:	40 91 97 24 	lds	r20, 0x2497
    442e:	50 91 98 24 	lds	r21, 0x2498
    4432:	0e 94 4d 3c 	call	0x789a	; 0x789a <__divsf3>
    4436:	d8 01       	movw	r26, r16
    4438:	1d 96       	adiw	r26, 0x0d	; 13
    443a:	6d 93       	st	X+, r22
    443c:	7d 93       	st	X+, r23
    443e:	8d 93       	st	X+, r24
    4440:	9c 93       	st	X, r25
    4442:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    4444:	10 92 b7 24 	sts	0x24B7, r1
    4448:	10 92 b8 24 	sts	0x24B8, r1
    444c:	bf c0       	rjmp	.+382    	; 0x45cc <mc_arc+0x49c>
		ma.theta += ma.theta_per_segment;
    444e:	60 91 d9 24 	lds	r22, 0x24D9
    4452:	70 91 da 24 	lds	r23, 0x24DA
    4456:	80 91 db 24 	lds	r24, 0x24DB
    445a:	90 91 dc 24 	lds	r25, 0x24DC
    445e:	20 91 e5 24 	lds	r18, 0x24E5
    4462:	30 91 e6 24 	lds	r19, 0x24E6
    4466:	40 91 e7 24 	lds	r20, 0x24E7
    446a:	50 91 e8 24 	lds	r21, 0x24E8
    446e:	0e 94 a7 3b 	call	0x774e	; 0x774e <__addsf3>
    4472:	7b 01       	movw	r14, r22
    4474:	8c 01       	movw	r16, r24
    4476:	cb 01       	movw	r24, r22
    4478:	d8 01       	movw	r26, r16
    447a:	80 93 d9 24 	sts	0x24D9, r24
    447e:	90 93 da 24 	sts	0x24DA, r25
    4482:	a0 93 db 24 	sts	0x24DB, r26
    4486:	b0 93 dc 24 	sts	0x24DC, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    448a:	b7 01       	movw	r22, r14
    448c:	c8 01       	movw	r24, r16
    448e:	0e 94 6b 3f 	call	0x7ed6	; 0x7ed6 <sin>
    4492:	80 90 dd 24 	lds	r8, 0x24DD
    4496:	90 90 de 24 	lds	r9, 0x24DE
    449a:	a0 90 df 24 	lds	r10, 0x24DF
    449e:	b0 90 e0 24 	lds	r11, 0x24E0
    44a2:	c0 90 bb 24 	lds	r12, 0x24BB
    44a6:	d0 90 bc 24 	lds	r13, 0x24BC
    44aa:	cc 0c       	add	r12, r12
    44ac:	dd 1c       	adc	r13, r13
    44ae:	cc 0c       	add	r12, r12
    44b0:	dd 1c       	adc	r13, r13
    44b2:	e4 eb       	ldi	r30, 0xB4	; 180
    44b4:	f4 e2       	ldi	r31, 0x24	; 36
    44b6:	ce 0e       	add	r12, r30
    44b8:	df 1e       	adc	r13, r31
    44ba:	a5 01       	movw	r20, r10
    44bc:	94 01       	movw	r18, r8
    44be:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    44c2:	9b 01       	movw	r18, r22
    44c4:	ac 01       	movw	r20, r24
    44c6:	60 91 d1 24 	lds	r22, 0x24D1
    44ca:	70 91 d2 24 	lds	r23, 0x24D2
    44ce:	80 91 d3 24 	lds	r24, 0x24D3
    44d2:	90 91 d4 24 	lds	r25, 0x24D4
    44d6:	0e 94 a7 3b 	call	0x774e	; 0x774e <__addsf3>
    44da:	d6 01       	movw	r26, r12
    44dc:	1d 96       	adiw	r26, 0x0d	; 13
    44de:	6d 93       	st	X+, r22
    44e0:	7d 93       	st	X+, r23
    44e2:	8d 93       	st	X+, r24
    44e4:	9c 93       	st	X, r25
    44e6:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    44e8:	b7 01       	movw	r22, r14
    44ea:	c8 01       	movw	r24, r16
    44ec:	0e 94 4a 3c 	call	0x7894	; 0x7894 <cos>
    44f0:	00 91 bd 24 	lds	r16, 0x24BD
    44f4:	10 91 be 24 	lds	r17, 0x24BE
    44f8:	00 0f       	add	r16, r16
    44fa:	11 1f       	adc	r17, r17
    44fc:	00 0f       	add	r16, r16
    44fe:	11 1f       	adc	r17, r17
    4500:	0c 54       	subi	r16, 0x4C	; 76
    4502:	1b 4d       	sbci	r17, 0xDB	; 219
    4504:	a5 01       	movw	r20, r10
    4506:	94 01       	movw	r18, r8
    4508:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    450c:	9b 01       	movw	r18, r22
    450e:	ac 01       	movw	r20, r24
    4510:	60 91 d5 24 	lds	r22, 0x24D5
    4514:	70 91 d6 24 	lds	r23, 0x24D6
    4518:	80 91 d7 24 	lds	r24, 0x24D7
    451c:	90 91 d8 24 	lds	r25, 0x24D8
    4520:	0e 94 a7 3b 	call	0x774e	; 0x774e <__addsf3>
    4524:	f8 01       	movw	r30, r16
    4526:	65 87       	std	Z+13, r22	; 0x0d
    4528:	76 87       	std	Z+14, r23	; 0x0e
    452a:	87 87       	std	Z+15, r24	; 0x0f
    452c:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    452e:	00 91 bf 24 	lds	r16, 0x24BF
    4532:	10 91 c0 24 	lds	r17, 0x24C0
    4536:	00 0f       	add	r16, r16
    4538:	11 1f       	adc	r17, r17
    453a:	00 0f       	add	r16, r16
    453c:	11 1f       	adc	r17, r17
    453e:	0c 54       	subi	r16, 0x4C	; 76
    4540:	1b 4d       	sbci	r17, 0xDB	; 219
    4542:	d8 01       	movw	r26, r16
    4544:	1d 96       	adiw	r26, 0x0d	; 13
    4546:	6d 91       	ld	r22, X+
    4548:	7d 91       	ld	r23, X+
    454a:	8d 91       	ld	r24, X+
    454c:	9c 91       	ld	r25, X
    454e:	50 97       	sbiw	r26, 0x10	; 16
    4550:	20 91 e9 24 	lds	r18, 0x24E9
    4554:	30 91 ea 24 	lds	r19, 0x24EA
    4558:	40 91 eb 24 	lds	r20, 0x24EB
    455c:	50 91 ec 24 	lds	r21, 0x24EC
    4560:	0e 94 a7 3b 	call	0x774e	; 0x774e <__addsf3>
    4564:	f8 01       	movw	r30, r16
    4566:	65 87       	std	Z+13, r22	; 0x0d
    4568:	76 87       	std	Z+14, r23	; 0x0e
    456a:	87 87       	std	Z+15, r24	; 0x0f
    456c:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X_AXIS], 
    456e:	60 91 c1 24 	lds	r22, 0x24C1
    4572:	70 91 c2 24 	lds	r23, 0x24C2
    4576:	80 91 c3 24 	lds	r24, 0x24C3
    457a:	90 91 c4 24 	lds	r25, 0x24C4
    457e:	20 91 c5 24 	lds	r18, 0x24C5
    4582:	30 91 c6 24 	lds	r19, 0x24C6
    4586:	40 91 c7 24 	lds	r20, 0x24C7
    458a:	50 91 c8 24 	lds	r21, 0x24C8
    458e:	e0 90 c9 24 	lds	r14, 0x24C9
    4592:	f0 90 ca 24 	lds	r15, 0x24CA
    4596:	00 91 cb 24 	lds	r16, 0x24CB
    459a:	10 91 cc 24 	lds	r17, 0x24CC
    459e:	a0 90 e1 24 	lds	r10, 0x24E1
    45a2:	b0 90 e2 24 	lds	r11, 0x24E2
    45a6:	c0 90 e3 24 	lds	r12, 0x24E3
    45aa:	d0 90 e4 24 	lds	r13, 0x24E4
    45ae:	80 90 b9 24 	lds	r8, 0x24B9
    45b2:	90 90 ba 24 	lds	r9, 0x24BA
    45b6:	0e 94 9c 1c 	call	0x3938	; 0x3938 <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    45ba:	80 91 b7 24 	lds	r24, 0x24B7
    45be:	90 91 b8 24 	lds	r25, 0x24B8
    45c2:	01 96       	adiw	r24, 0x01	; 1
    45c4:	80 93 b7 24 	sts	0x24B7, r24
    45c8:	90 93 b8 24 	sts	0x24B8, r25
    45cc:	20 91 b7 24 	lds	r18, 0x24B7
    45d0:	30 91 b8 24 	lds	r19, 0x24B8
    45d4:	80 91 b5 24 	lds	r24, 0x24B5
    45d8:	90 91 b6 24 	lds	r25, 0x24B6
    45dc:	82 17       	cp	r24, r18
    45de:	93 07       	cpc	r25, r19
    45e0:	0c f0       	brlt	.+2      	; 0x45e4 <mc_arc+0x4b4>
    45e2:	35 cf       	rjmp	.-406    	; 0x444e <mc_arc+0x31e>
    45e4:	20 e0       	ldi	r18, 0x00	; 0
    45e6:	30 e0       	ldi	r19, 0x00	; 0
				ma.dtarget[Z_AXIS], 
				ma.feed_rate, 
				ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    45e8:	c9 01       	movw	r24, r18
    45ea:	28 96       	adiw	r28, 0x08	; 8
    45ec:	cd bf       	out	0x3d, r28	; 61
    45ee:	de bf       	out	0x3e, r29	; 62
    45f0:	cf 91       	pop	r28
    45f2:	df 91       	pop	r29
    45f4:	1f 91       	pop	r17
    45f6:	0f 91       	pop	r16
    45f8:	ff 90       	pop	r15
    45fa:	ef 90       	pop	r14
    45fc:	df 90       	pop	r13
    45fe:	cf 90       	pop	r12
    4600:	bf 90       	pop	r11
    4602:	af 90       	pop	r10
    4604:	9f 90       	pop	r9
    4606:	8f 90       	pop	r8
    4608:	7f 90       	pop	r7
    460a:	6f 90       	pop	r6
    460c:	5f 90       	pop	r5
    460e:	4f 90       	pop	r4
    4610:	3f 90       	pop	r3
    4612:	2f 90       	pop	r2
    4614:	08 95       	ret

00004616 <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    4616:	e0 e6       	ldi	r30, 0x60	; 96
    4618:	f6 e0       	ldi	r31, 0x06	; 6
    461a:	80 e4       	ldi	r24, 0x40	; 64
    461c:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    461e:	80 e8       	ldi	r24, 0x80	; 128
    4620:	81 83       	std	Z+1, r24	; 0x01
}
    4622:	08 95       	ret

00004624 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    4624:	97 fd       	sbrc	r25, 7
    4626:	05 c0       	rjmp	.+10     	; 0x4632 <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    4628:	80 e8       	ldi	r24, 0x80	; 128
    462a:	e0 e6       	ldi	r30, 0x60	; 96
    462c:	f6 e0       	ldi	r31, 0x06	; 6
    462e:	85 83       	std	Z+5, r24	; 0x05
    4630:	04 c0       	rjmp	.+8      	; 0x463a <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    4632:	80 e8       	ldi	r24, 0x80	; 128
    4634:	e0 e6       	ldi	r30, 0x60	; 96
    4636:	f6 e0       	ldi	r31, 0x06	; 6
    4638:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    463a:	80 e4       	ldi	r24, 0x40	; 64
    463c:	e0 e6       	ldi	r30, 0x60	; 96
    463e:	f6 e0       	ldi	r31, 0x06	; 6
    4640:	85 83       	std	Z+5, r24	; 0x05
}
    4642:	08 95       	ret

00004644 <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    4644:	80 e4       	ldi	r24, 0x40	; 64
    4646:	e0 e6       	ldi	r30, 0x60	; 96
    4648:	f6 e0       	ldi	r31, 0x06	; 6
    464a:	86 83       	std	Z+6, r24	; 0x06
}
    464c:	08 95       	ret

0000464e <st_init>:
 *
 *  Note: high level interrupts must be enabled in main()
 */

void st_init()
{
    464e:	cf 93       	push	r28
    4650:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    4652:	10 92 a0 21 	sts	0x21A0, r1
	ax.exec_mutex = FALSE;
    4656:	10 92 9f 21 	sts	0x219F, r1

	ax.a[X_AXIS].port = &X_MOTOR_PORT;				// bind PORTs to structs
    465a:	80 e0       	ldi	r24, 0x00	; 0
    465c:	96 e0       	ldi	r25, 0x06	; 6
    465e:	80 93 ae 21 	sts	0x21AE, r24
    4662:	90 93 af 21 	sts	0x21AF, r25
	ax.a[Y_AXIS].port = &Y_MOTOR_PORT;
    4666:	80 ea       	ldi	r24, 0xA0	; 160
    4668:	96 e0       	ldi	r25, 0x06	; 6
    466a:	80 93 bd 21 	sts	0x21BD, r24
    466e:	90 93 be 21 	sts	0x21BE, r25
	ax.a[Z_AXIS].port = &Z_MOTOR_PORT;
    4672:	80 e8       	ldi	r24, 0x80	; 128
    4674:	96 e0       	ldi	r25, 0x06	; 6
    4676:	80 93 cc 21 	sts	0x21CC, r24
    467a:	90 93 cd 21 	sts	0x21CD, r25
	ax.a[A_AXIS].port = &A_MOTOR_PORT;
    467e:	80 e6       	ldi	r24, 0x60	; 96
    4680:	96 e0       	ldi	r25, 0x06	; 6
    4682:	80 93 db 21 	sts	0x21DB, r24
    4686:	90 93 dc 21 	sts	0x21DC, r25

	ax.a[X_AXIS].timer = &X_TIMER;					// bind TIMERs to structs
    468a:	80 e0       	ldi	r24, 0x00	; 0
    468c:	98 e0       	ldi	r25, 0x08	; 8
    468e:	80 93 b0 21 	sts	0x21B0, r24
    4692:	90 93 b1 21 	sts	0x21B1, r25
	ax.a[Y_AXIS].timer = &Y_TIMER;
    4696:	80 e0       	ldi	r24, 0x00	; 0
    4698:	99 e0       	ldi	r25, 0x09	; 9
    469a:	80 93 bf 21 	sts	0x21BF, r24
    469e:	90 93 c0 21 	sts	0x21C0, r25
	ax.a[Z_AXIS].timer = &Z_TIMER;
    46a2:	80 e0       	ldi	r24, 0x00	; 0
    46a4:	9a e0       	ldi	r25, 0x0A	; 10
    46a6:	80 93 ce 21 	sts	0x21CE, r24
    46aa:	90 93 cf 21 	sts	0x21CF, r25
	ax.a[A_AXIS].timer = &A_TIMER;
    46ae:	80 e0       	ldi	r24, 0x00	; 0
    46b0:	9b e0       	ldi	r25, 0x0B	; 11
    46b2:	80 93 dd 21 	sts	0x21DD, r24
    46b6:	90 93 de 21 	sts	0x21DE, r25
    46ba:	c4 e5       	ldi	r28, 0x54	; 84
    46bc:	d4 e2       	ldi	r29, 0x24	; 36
    46be:	ad ea       	ldi	r26, 0xAD	; 173
    46c0:	b1 e2       	ldi	r27, 0x21	; 33

	for (uint8_t i=0; i <= A_AXIS; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    46c2:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero initially
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    46c4:	24 e0       	ldi	r18, 0x04	; 4

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    46c6:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y_AXIS].timer = &Y_TIMER;
	ax.a[Z_AXIS].timer = &Z_TIMER;
	ax.a[A_AXIS].timer = &A_TIMER;

	for (uint8_t i=0; i <= A_AXIS; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    46c8:	88 81       	ld	r24, Y
    46ca:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    46cc:	11 96       	adiw	r26, 0x01	; 1
    46ce:	ed 91       	ld	r30, X+
    46d0:	fc 91       	ld	r31, X
    46d2:	12 97       	sbiw	r26, 0x02	; 2
    46d4:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero initially
    46d6:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
    46d8:	84 81       	ldd	r24, Z+4	; 0x04
    46da:	88 61       	ori	r24, 0x18	; 24
    46dc:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    46de:	25 83       	std	Z+5, r18	; 0x05

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    46e0:	13 96       	adiw	r26, 0x03	; 3
    46e2:	ed 91       	ld	r30, X+
    46e4:	fc 91       	ld	r31, X
    46e6:	14 97       	sbiw	r26, 0x04	; 4
    46e8:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    46ea:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    46ec:	96 83       	std	Z+6, r25	; 0x06
    46ee:	68 96       	adiw	r28, 0x18	; 24
    46f0:	1f 96       	adiw	r26, 0x0f	; 15
	ax.a[X_AXIS].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y_AXIS].timer = &Y_TIMER;
	ax.a[Z_AXIS].timer = &Z_TIMER;
	ax.a[A_AXIS].timer = &A_TIMER;

	for (uint8_t i=0; i <= A_AXIS; i++) {
    46f2:	84 e2       	ldi	r24, 0x24	; 36
    46f4:	c4 3b       	cpi	r28, 0xB4	; 180
    46f6:	d8 07       	cpc	r29, r24
    46f8:	39 f7       	brne	.-50     	; 0x46c8 <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    46fa:	df 91       	pop	r29
    46fc:	cf 91       	pop	r28
    46fe:	08 95       	ret

00004700 <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    4700:	90 e0       	ldi	r25, 0x00	; 0
    4702:	fc 01       	movw	r30, r24
    4704:	24 e0       	ldi	r18, 0x04	; 4
    4706:	ee 0f       	add	r30, r30
    4708:	ff 1f       	adc	r31, r31
    470a:	2a 95       	dec	r18
    470c:	e1 f7       	brne	.-8      	; 0x4706 <st_set_polarity+0x6>
    470e:	e8 1b       	sub	r30, r24
    4710:	f9 0b       	sbc	r31, r25
    4712:	e1 56       	subi	r30, 0x61	; 97
    4714:	fe 4d       	sbci	r31, 0xDE	; 222
    4716:	66 87       	std	Z+14, r22	; 0x0e
}
    4718:	08 95       	ret

0000471a <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X_AXIS].step_counter = 0x00001000;
    471a:	80 e0       	ldi	r24, 0x00	; 0
    471c:	90 e1       	ldi	r25, 0x10	; 16
    471e:	a0 e0       	ldi	r26, 0x00	; 0
    4720:	b0 e0       	ldi	r27, 0x00	; 0
    4722:	80 93 a3 21 	sts	0x21A3, r24
    4726:	90 93 a4 21 	sts	0x21A4, r25
    472a:	a0 93 a5 21 	sts	0x21A5, r26
    472e:	b0 93 a6 21 	sts	0x21A6, r27
	ax.a[X_AXIS].timer->PER = 0x1000;					// step rate (period)
    4732:	e0 91 b0 21 	lds	r30, 0x21B0
    4736:	f0 91 b1 21 	lds	r31, 0x21B1
    473a:	80 e0       	ldi	r24, 0x00	; 0
    473c:	90 e1       	ldi	r25, 0x10	; 16
    473e:	86 a3       	std	Z+38, r24	; 0x26
    4740:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X_AXIS].timer->CTRLA = TC_CLK_ON;				// start clock
    4742:	21 e0       	ldi	r18, 0x01	; 1
    4744:	20 83       	st	Z, r18

	ax.a[Y_AXIS].step_counter = 0x00000800;
    4746:	80 e0       	ldi	r24, 0x00	; 0
    4748:	98 e0       	ldi	r25, 0x08	; 8
    474a:	a0 e0       	ldi	r26, 0x00	; 0
    474c:	b0 e0       	ldi	r27, 0x00	; 0
    474e:	80 93 b2 21 	sts	0x21B2, r24
    4752:	90 93 b3 21 	sts	0x21B3, r25
    4756:	a0 93 b4 21 	sts	0x21B4, r26
    475a:	b0 93 b5 21 	sts	0x21B5, r27
	ax.a[Y_AXIS].timer->PER = 0x2000;
    475e:	e0 91 bf 21 	lds	r30, 0x21BF
    4762:	f0 91 c0 21 	lds	r31, 0x21C0
    4766:	80 e0       	ldi	r24, 0x00	; 0
    4768:	90 e2       	ldi	r25, 0x20	; 32
    476a:	86 a3       	std	Z+38, r24	; 0x26
    476c:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y_AXIS].timer->CTRLA = TC_CLK_ON;
    476e:	20 83       	st	Z, r18

	ax.a[Z_AXIS].step_counter = 0x00000600;
    4770:	80 e0       	ldi	r24, 0x00	; 0
    4772:	96 e0       	ldi	r25, 0x06	; 6
    4774:	a0 e0       	ldi	r26, 0x00	; 0
    4776:	b0 e0       	ldi	r27, 0x00	; 0
    4778:	80 93 c1 21 	sts	0x21C1, r24
    477c:	90 93 c2 21 	sts	0x21C2, r25
    4780:	a0 93 c3 21 	sts	0x21C3, r26
    4784:	b0 93 c4 21 	sts	0x21C4, r27
	ax.a[Z_AXIS].timer->PER = 0x3000;
    4788:	e0 91 ce 21 	lds	r30, 0x21CE
    478c:	f0 91 cf 21 	lds	r31, 0x21CF
    4790:	80 e0       	ldi	r24, 0x00	; 0
    4792:	90 e3       	ldi	r25, 0x30	; 48
    4794:	86 a3       	std	Z+38, r24	; 0x26
    4796:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z_AXIS].timer->CTRLA = TC_CLK_ON;
    4798:	20 83       	st	Z, r18

	ax.a[A_AXIS].step_counter = 0x00000400;
    479a:	80 e0       	ldi	r24, 0x00	; 0
    479c:	94 e0       	ldi	r25, 0x04	; 4
    479e:	a0 e0       	ldi	r26, 0x00	; 0
    47a0:	b0 e0       	ldi	r27, 0x00	; 0
    47a2:	80 93 d0 21 	sts	0x21D0, r24
    47a6:	90 93 d1 21 	sts	0x21D1, r25
    47aa:	a0 93 d2 21 	sts	0x21D2, r26
    47ae:	b0 93 d3 21 	sts	0x21D3, r27
	ax.a[A_AXIS].timer->PER = 0x4000;
    47b2:	e0 91 dd 21 	lds	r30, 0x21DD
    47b6:	f0 91 de 21 	lds	r31, 0x21DE
    47ba:	80 e0       	ldi	r24, 0x00	; 0
    47bc:	90 e4       	ldi	r25, 0x40	; 64
    47be:	86 a3       	std	Z+38, r24	; 0x26
    47c0:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A_AXIS].timer->CTRLA = TC_CLK_ON;
    47c2:	20 83       	st	Z, r18

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    47c4:	e0 ea       	ldi	r30, 0xA0	; 160
    47c6:	f1 e2       	ldi	r31, 0x21	; 33
    47c8:	80 81       	ld	r24, Z
    47ca:	8f 60       	ori	r24, 0x0F	; 15
    47cc:	80 83       	st	Z, r24
}
    47ce:	08 95       	ret

000047d0 <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    47d0:	f8 94       	cli
	mv_flush();									// flush the move buffer
    47d2:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <mv_flush>
	sei();
    47d6:	78 94       	sei
}
    47d8:	08 95       	ret

000047da <st_kill>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_kill()
{
	cli();										// stop intewrrupts
    47da:	f8 94       	cli
	ax.a[X_AXIS].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    47dc:	e0 91 b0 21 	lds	r30, 0x21B0
    47e0:	f0 91 b1 21 	lds	r31, 0x21B1
    47e4:	10 82       	st	Z, r1
	ax.a[Y_AXIS].timer->CTRLA = TC_CLK_OFF;
    47e6:	e0 91 bf 21 	lds	r30, 0x21BF
    47ea:	f0 91 c0 21 	lds	r31, 0x21C0
    47ee:	10 82       	st	Z, r1
	ax.a[Z_AXIS].timer->CTRLA = TC_CLK_OFF;
    47f0:	e0 91 ce 21 	lds	r30, 0x21CE
    47f4:	f0 91 cf 21 	lds	r31, 0x21CF
    47f8:	10 82       	st	Z, r1
	ax.a[A_AXIS].timer->CTRLA = TC_CLK_OFF;
    47fa:	e0 91 dd 21 	lds	r30, 0x21DD
    47fe:	f0 91 de 21 	lds	r31, 0x21DE
    4802:	10 82       	st	Z, r1
	
	mv_flush();									// flush the move buffer
    4804:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    4808:	10 92 a0 21 	sts	0x21A0, r1
	sei();
    480c:	78 94       	sei
}
    480e:	08 95       	ret

00004810 <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    4810:	cf 93       	push	r28
    4812:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    4814:	80 91 9f 21 	lds	r24, 0x219F
    4818:	88 23       	and	r24, r24
    481a:	09 f0       	breq	.+2      	; 0x481e <st_execute_move+0xe>
    481c:	b6 c0       	rjmp	.+364    	; 0x498a <st_execute_move+0x17a>
		return;
	}
	ax.exec_mutex = TRUE;
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	80 93 9f 21 	sts	0x219F, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    4824:	80 91 a0 21 	lds	r24, 0x21A0
    4828:	88 23       	and	r24, r24
    482a:	09 f0       	breq	.+2      	; 0x482e <st_execute_move+0x1e>
    482c:	ac c0       	rjmp	.+344    	; 0x4986 <st_execute_move+0x176>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    482e:	0e 94 19 30 	call	0x6032	; 0x6032 <mv_dequeue_move_buffer>
    4832:	80 93 a1 21 	sts	0x21A1, r24
    4836:	90 93 a2 21 	sts	0x21A2, r25
    483a:	89 2b       	or	r24, r25
    483c:	09 f4       	brne	.+2      	; 0x4840 <st_execute_move+0x30>
    483e:	a3 c0       	rjmp	.+326    	; 0x4986 <st_execute_move+0x176>
		ax.exec_mutex = FALSE;
		return;
    4840:	c3 ea       	ldi	r28, 0xA3	; 163
    4842:	d1 e2       	ldi	r29, 0x21	; 33
    4844:	20 e0       	ldi	r18, 0x00	; 0
    4846:	30 e0       	ldi	r19, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4848:	54 e0       	ldi	r21, 0x04	; 4
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
			continue;
		}
		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    484a:	42 e0       	ldi	r20, 0x02	; 2
	_st_fake_move();
	return;
#endif

	for (i = X_AXIS; i <= Z_AXIS; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    484c:	ed 85       	ldd	r30, Y+13	; 0x0d
    484e:	fe 85       	ldd	r31, Y+14	; 0x0e
    4850:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    4852:	e0 91 a1 21 	lds	r30, 0x21A1
    4856:	f0 91 a2 21 	lds	r31, 0x21A2
    485a:	c9 01       	movw	r24, r18
    485c:	73 e0       	ldi	r23, 0x03	; 3
    485e:	88 0f       	add	r24, r24
    4860:	99 1f       	adc	r25, r25
    4862:	7a 95       	dec	r23
    4864:	e1 f7       	brne	.-8      	; 0x485e <st_execute_move+0x4e>
    4866:	82 0f       	add	r24, r18
    4868:	93 1f       	adc	r25, r19
    486a:	e8 0f       	add	r30, r24
    486c:	f9 1f       	adc	r31, r25
    486e:	80 81       	ld	r24, Z
    4870:	91 81       	ldd	r25, Z+1	; 0x01
    4872:	a2 81       	ldd	r26, Z+2	; 0x02
    4874:	b3 81       	ldd	r27, Z+3	; 0x03
    4876:	00 97       	sbiw	r24, 0x00	; 0
    4878:	a1 05       	cpc	r26, r1
    487a:	b1 05       	cpc	r27, r1
    487c:	b1 f1       	breq	.+108    	; 0x48ea <st_execute_move+0xda>
			continue;
		}
		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    487e:	90 85       	ldd	r25, Z+8	; 0x08
    4880:	8a 85       	ldd	r24, Y+10	; 0x0a
    4882:	eb 85       	ldd	r30, Y+11	; 0x0b
    4884:	fc 85       	ldd	r31, Y+12	; 0x0c
    4886:	98 17       	cp	r25, r24
    4888:	11 f0       	breq	.+4      	; 0x488e <st_execute_move+0x7e>
    488a:	45 83       	std	Z+5, r20	; 0x05
    488c:	01 c0       	rjmp	.+2      	; 0x4890 <st_execute_move+0x80>
    488e:	46 83       	std	Z+6, r20	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    4890:	e0 91 a1 21 	lds	r30, 0x21A1
    4894:	f0 91 a2 21 	lds	r31, 0x21A2
    4898:	c9 01       	movw	r24, r18
    489a:	63 e0       	ldi	r22, 0x03	; 3
    489c:	88 0f       	add	r24, r24
    489e:	99 1f       	adc	r25, r25
    48a0:	6a 95       	dec	r22
    48a2:	e1 f7       	brne	.-8      	; 0x489c <st_execute_move+0x8c>
    48a4:	82 0f       	add	r24, r18
    48a6:	93 1f       	adc	r25, r19
    48a8:	e8 0f       	add	r30, r24
    48aa:	f9 1f       	adc	r31, r25
    48ac:	80 81       	ld	r24, Z
    48ae:	91 81       	ldd	r25, Z+1	; 0x01
    48b0:	a2 81       	ldd	r26, Z+2	; 0x02
    48b2:	b3 81       	ldd	r27, Z+3	; 0x03
    48b4:	88 83       	st	Y, r24
    48b6:	99 83       	std	Y+1, r25	; 0x01
    48b8:	aa 83       	std	Y+2, r26	; 0x02
    48ba:	bb 83       	std	Y+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    48bc:	86 81       	ldd	r24, Z+6	; 0x06
    48be:	97 81       	ldd	r25, Z+7	; 0x07
    48c0:	8e 83       	std	Y+6, r24	; 0x06
    48c2:	9f 83       	std	Y+7, r25	; 0x07
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    48c4:	86 81       	ldd	r24, Z+6	; 0x06
    48c6:	97 81       	ldd	r25, Z+7	; 0x07
    48c8:	88 87       	std	Y+8, r24	; 0x08
    48ca:	99 87       	std	Y+9, r25	; 0x09
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    48cc:	84 81       	ldd	r24, Z+4	; 0x04
    48ce:	95 81       	ldd	r25, Z+5	; 0x05
    48d0:	8c 83       	std	Y+4, r24	; 0x04
    48d2:	9d 83       	std	Y+5, r25	; 0x05
		ax.a[i].timer->PER = ax.p->a[i].period;
    48d4:	ad 85       	ldd	r26, Y+13	; 0x0d
    48d6:	be 85       	ldd	r27, Y+14	; 0x0e
    48d8:	84 81       	ldd	r24, Z+4	; 0x04
    48da:	95 81       	ldd	r25, Z+5	; 0x05
    48dc:	96 96       	adiw	r26, 0x26	; 38
    48de:	8d 93       	st	X+, r24
    48e0:	9c 93       	st	X, r25
    48e2:	97 97       	sbiw	r26, 0x27	; 39
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    48e4:	eb 85       	ldd	r30, Y+11	; 0x0b
    48e6:	fc 85       	ldd	r31, Y+12	; 0x0c
    48e8:	56 83       	std	Z+6, r21	; 0x06
    48ea:	2f 5f       	subi	r18, 0xFF	; 255
    48ec:	3f 4f       	sbci	r19, 0xFF	; 255
    48ee:	2f 96       	adiw	r28, 0x0f	; 15
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i = X_AXIS; i <= Z_AXIS; i++) {
    48f0:	23 30       	cpi	r18, 0x03	; 3
    48f2:	31 05       	cpc	r19, r1
    48f4:	09 f0       	breq	.+2      	; 0x48f8 <st_execute_move+0xe8>
    48f6:	aa cf       	rjmp	.-172    	; 0x484c <st_execute_move+0x3c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    48f8:	10 92 a0 21 	sts	0x21A0, r1
	if (ax.a[X_AXIS].step_counter) { 
    48fc:	80 91 a3 21 	lds	r24, 0x21A3
    4900:	90 91 a4 21 	lds	r25, 0x21A4
    4904:	a0 91 a5 21 	lds	r26, 0x21A5
    4908:	b0 91 a6 21 	lds	r27, 0x21A6
    490c:	00 97       	sbiw	r24, 0x00	; 0
    490e:	a1 05       	cpc	r26, r1
    4910:	b1 05       	cpc	r27, r1
    4912:	59 f0       	breq	.+22     	; 0x492a <st_execute_move+0x11a>
		ax.a[X_AXIS].timer->CTRLA = TC_CLK_ON;
    4914:	e0 91 b0 21 	lds	r30, 0x21B0
    4918:	f0 91 b1 21 	lds	r31, 0x21B1
    491c:	81 e0       	ldi	r24, 0x01	; 1
    491e:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4920:	80 91 a0 21 	lds	r24, 0x21A0
    4924:	88 60       	ori	r24, 0x08	; 8
    4926:	80 93 a0 21 	sts	0x21A0, r24
	}
	if (ax.a[Y_AXIS].step_counter) {
    492a:	80 91 b2 21 	lds	r24, 0x21B2
    492e:	90 91 b3 21 	lds	r25, 0x21B3
    4932:	a0 91 b4 21 	lds	r26, 0x21B4
    4936:	b0 91 b5 21 	lds	r27, 0x21B5
    493a:	00 97       	sbiw	r24, 0x00	; 0
    493c:	a1 05       	cpc	r26, r1
    493e:	b1 05       	cpc	r27, r1
    4940:	59 f0       	breq	.+22     	; 0x4958 <st_execute_move+0x148>
		ax.a[Y_AXIS].timer->CTRLA = TC_CLK_ON;
    4942:	e0 91 bf 21 	lds	r30, 0x21BF
    4946:	f0 91 c0 21 	lds	r31, 0x21C0
    494a:	81 e0       	ldi	r24, 0x01	; 1
    494c:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    494e:	80 91 a0 21 	lds	r24, 0x21A0
    4952:	84 60       	ori	r24, 0x04	; 4
    4954:	80 93 a0 21 	sts	0x21A0, r24
	}
	if (ax.a[Z_AXIS].step_counter) {
    4958:	80 91 c1 21 	lds	r24, 0x21C1
    495c:	90 91 c2 21 	lds	r25, 0x21C2
    4960:	a0 91 c3 21 	lds	r26, 0x21C3
    4964:	b0 91 c4 21 	lds	r27, 0x21C4
    4968:	00 97       	sbiw	r24, 0x00	; 0
    496a:	a1 05       	cpc	r26, r1
    496c:	b1 05       	cpc	r27, r1
    496e:	59 f0       	breq	.+22     	; 0x4986 <st_execute_move+0x176>
		ax.a[Z_AXIS].timer->CTRLA = TC_CLK_ON;
    4970:	e0 91 ce 21 	lds	r30, 0x21CE
    4974:	f0 91 cf 21 	lds	r31, 0x21CF
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    497c:	80 91 a0 21 	lds	r24, 0x21A0
    4980:	82 60       	ori	r24, 0x02	; 2
    4982:	80 93 a0 21 	sts	0x21A0, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4986:	10 92 9f 21 	sts	0x219F, r1
}
    498a:	df 91       	pop	r29
    498c:	cf 91       	pop	r28
    498e:	08 95       	ret

00004990 <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4990:	10 92 9f 21 	sts	0x219F, r1
	st_execute_move();		// recursively empty the move queue
    4994:	0e 94 08 24 	call	0x4810	; 0x4810 <st_execute_move>
	return;
}
    4998:	08 95       	ret

0000499a <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_vect)
{
    499a:	1f 92       	push	r1
    499c:	0f 92       	push	r0
    499e:	0f b6       	in	r0, 0x3f	; 63
    49a0:	0f 92       	push	r0
    49a2:	0b b6       	in	r0, 0x3b	; 59
    49a4:	0f 92       	push	r0
    49a6:	11 24       	eor	r1, r1
    49a8:	2f 93       	push	r18
    49aa:	3f 93       	push	r19
    49ac:	4f 93       	push	r20
    49ae:	5f 93       	push	r21
    49b0:	6f 93       	push	r22
    49b2:	7f 93       	push	r23
    49b4:	8f 93       	push	r24
    49b6:	9f 93       	push	r25
    49b8:	af 93       	push	r26
    49ba:	bf 93       	push	r27
    49bc:	ef 93       	push	r30
    49be:	ff 93       	push	r31
	if (--ax.a[A_AXIS].postscale_counter != 0) {
    49c0:	80 91 d8 21 	lds	r24, 0x21D8
    49c4:	90 91 d9 21 	lds	r25, 0x21D9
    49c8:	01 97       	sbiw	r24, 0x01	; 1
    49ca:	80 93 d8 21 	sts	0x21D8, r24
    49ce:	90 93 d9 21 	sts	0x21D9, r25
    49d2:	89 2b       	or	r24, r25
    49d4:	a1 f5       	brne	.+104    	; 0x4a3e <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    49d6:	e0 e6       	ldi	r30, 0x60	; 96
    49d8:	f6 e0       	ldi	r31, 0x06	; 6
    49da:	81 e0       	ldi	r24, 0x01	; 1
    49dc:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A_AXIS].step_counter == 0) {
    49de:	80 91 d0 21 	lds	r24, 0x21D0
    49e2:	90 91 d1 21 	lds	r25, 0x21D1
    49e6:	a0 91 d2 21 	lds	r26, 0x21D2
    49ea:	b0 91 d3 21 	lds	r27, 0x21D3
    49ee:	01 97       	sbiw	r24, 0x01	; 1
    49f0:	a1 09       	sbc	r26, r1
    49f2:	b1 09       	sbc	r27, r1
    49f4:	80 93 d0 21 	sts	0x21D0, r24
    49f8:	90 93 d1 21 	sts	0x21D1, r25
    49fc:	a0 93 d2 21 	sts	0x21D2, r26
    4a00:	b0 93 d3 21 	sts	0x21D3, r27
    4a04:	00 97       	sbiw	r24, 0x00	; 0
    4a06:	a1 05       	cpc	r26, r1
    4a08:	b1 05       	cpc	r27, r1
    4a0a:	69 f4       	brne	.+26     	; 0x4a26 <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4a0c:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4a10:	84 e0       	ldi	r24, 0x04	; 4
    4a12:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4a14:	80 91 a0 21 	lds	r24, 0x21A0
    4a18:	8e 7f       	andi	r24, 0xFE	; 254
    4a1a:	80 93 a0 21 	sts	0x21A0, r24
		if (ax.active_axes == 0) {
    4a1e:	88 23       	and	r24, r24
    4a20:	11 f4       	brne	.+4      	; 0x4a26 <__vector_108+0x8c>
			st_execute_move();
    4a22:	0e 94 08 24 	call	0x4810	; 0x4810 <st_execute_move>
		}
	}
	ax.a[A_AXIS].postscale_counter = ax.a[A_AXIS].postscale_value;
    4a26:	80 91 d6 21 	lds	r24, 0x21D6
    4a2a:	90 91 d7 21 	lds	r25, 0x21D7
    4a2e:	80 93 d8 21 	sts	0x21D8, r24
    4a32:	90 93 d9 21 	sts	0x21D9, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4a36:	81 e0       	ldi	r24, 0x01	; 1
    4a38:	e0 e6       	ldi	r30, 0x60	; 96
    4a3a:	f6 e0       	ldi	r31, 0x06	; 6
    4a3c:	86 83       	std	Z+6, r24	; 0x06
}
    4a3e:	ff 91       	pop	r31
    4a40:	ef 91       	pop	r30
    4a42:	bf 91       	pop	r27
    4a44:	af 91       	pop	r26
    4a46:	9f 91       	pop	r25
    4a48:	8f 91       	pop	r24
    4a4a:	7f 91       	pop	r23
    4a4c:	6f 91       	pop	r22
    4a4e:	5f 91       	pop	r21
    4a50:	4f 91       	pop	r20
    4a52:	3f 91       	pop	r19
    4a54:	2f 91       	pop	r18
    4a56:	0f 90       	pop	r0
    4a58:	0b be       	out	0x3b, r0	; 59
    4a5a:	0f 90       	pop	r0
    4a5c:	0f be       	out	0x3f, r0	; 63
    4a5e:	0f 90       	pop	r0
    4a60:	1f 90       	pop	r1
    4a62:	18 95       	reti

00004a64 <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_vect)
{
    4a64:	1f 92       	push	r1
    4a66:	0f 92       	push	r0
    4a68:	0f b6       	in	r0, 0x3f	; 63
    4a6a:	0f 92       	push	r0
    4a6c:	0b b6       	in	r0, 0x3b	; 59
    4a6e:	0f 92       	push	r0
    4a70:	11 24       	eor	r1, r1
    4a72:	2f 93       	push	r18
    4a74:	3f 93       	push	r19
    4a76:	4f 93       	push	r20
    4a78:	5f 93       	push	r21
    4a7a:	6f 93       	push	r22
    4a7c:	7f 93       	push	r23
    4a7e:	8f 93       	push	r24
    4a80:	9f 93       	push	r25
    4a82:	af 93       	push	r26
    4a84:	bf 93       	push	r27
    4a86:	ef 93       	push	r30
    4a88:	ff 93       	push	r31
	if (--ax.a[Z_AXIS].postscale_counter != 0) {
    4a8a:	80 91 c9 21 	lds	r24, 0x21C9
    4a8e:	90 91 ca 21 	lds	r25, 0x21CA
    4a92:	01 97       	sbiw	r24, 0x01	; 1
    4a94:	80 93 c9 21 	sts	0x21C9, r24
    4a98:	90 93 ca 21 	sts	0x21CA, r25
    4a9c:	89 2b       	or	r24, r25
    4a9e:	a1 f5       	brne	.+104    	; 0x4b08 <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4aa0:	e0 e8       	ldi	r30, 0x80	; 128
    4aa2:	f6 e0       	ldi	r31, 0x06	; 6
    4aa4:	81 e0       	ldi	r24, 0x01	; 1
    4aa6:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z_AXIS].step_counter == 0) {
    4aa8:	80 91 c1 21 	lds	r24, 0x21C1
    4aac:	90 91 c2 21 	lds	r25, 0x21C2
    4ab0:	a0 91 c3 21 	lds	r26, 0x21C3
    4ab4:	b0 91 c4 21 	lds	r27, 0x21C4
    4ab8:	01 97       	sbiw	r24, 0x01	; 1
    4aba:	a1 09       	sbc	r26, r1
    4abc:	b1 09       	sbc	r27, r1
    4abe:	80 93 c1 21 	sts	0x21C1, r24
    4ac2:	90 93 c2 21 	sts	0x21C2, r25
    4ac6:	a0 93 c3 21 	sts	0x21C3, r26
    4aca:	b0 93 c4 21 	sts	0x21C4, r27
    4ace:	00 97       	sbiw	r24, 0x00	; 0
    4ad0:	a1 05       	cpc	r26, r1
    4ad2:	b1 05       	cpc	r27, r1
    4ad4:	69 f4       	brne	.+26     	; 0x4af0 <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4ad6:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4ada:	84 e0       	ldi	r24, 0x04	; 4
    4adc:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4ade:	80 91 a0 21 	lds	r24, 0x21A0
    4ae2:	8d 7f       	andi	r24, 0xFD	; 253
    4ae4:	80 93 a0 21 	sts	0x21A0, r24
		if (ax.active_axes == 0) {
    4ae8:	88 23       	and	r24, r24
    4aea:	11 f4       	brne	.+4      	; 0x4af0 <__vector_47+0x8c>
			st_execute_move();
    4aec:	0e 94 08 24 	call	0x4810	; 0x4810 <st_execute_move>
		}
	}
	ax.a[Z_AXIS].postscale_counter = ax.a[Z_AXIS].postscale_value;
    4af0:	80 91 c7 21 	lds	r24, 0x21C7
    4af4:	90 91 c8 21 	lds	r25, 0x21C8
    4af8:	80 93 c9 21 	sts	0x21C9, r24
    4afc:	90 93 ca 21 	sts	0x21CA, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4b00:	81 e0       	ldi	r24, 0x01	; 1
    4b02:	e0 e8       	ldi	r30, 0x80	; 128
    4b04:	f6 e0       	ldi	r31, 0x06	; 6
    4b06:	86 83       	std	Z+6, r24	; 0x06
}
    4b08:	ff 91       	pop	r31
    4b0a:	ef 91       	pop	r30
    4b0c:	bf 91       	pop	r27
    4b0e:	af 91       	pop	r26
    4b10:	9f 91       	pop	r25
    4b12:	8f 91       	pop	r24
    4b14:	7f 91       	pop	r23
    4b16:	6f 91       	pop	r22
    4b18:	5f 91       	pop	r21
    4b1a:	4f 91       	pop	r20
    4b1c:	3f 91       	pop	r19
    4b1e:	2f 91       	pop	r18
    4b20:	0f 90       	pop	r0
    4b22:	0b be       	out	0x3b, r0	; 59
    4b24:	0f 90       	pop	r0
    4b26:	0f be       	out	0x3f, r0	; 63
    4b28:	0f 90       	pop	r0
    4b2a:	1f 90       	pop	r1
    4b2c:	18 95       	reti

00004b2e <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_vect)
{
    4b2e:	1f 92       	push	r1
    4b30:	0f 92       	push	r0
    4b32:	0f b6       	in	r0, 0x3f	; 63
    4b34:	0f 92       	push	r0
    4b36:	0b b6       	in	r0, 0x3b	; 59
    4b38:	0f 92       	push	r0
    4b3a:	11 24       	eor	r1, r1
    4b3c:	2f 93       	push	r18
    4b3e:	3f 93       	push	r19
    4b40:	4f 93       	push	r20
    4b42:	5f 93       	push	r21
    4b44:	6f 93       	push	r22
    4b46:	7f 93       	push	r23
    4b48:	8f 93       	push	r24
    4b4a:	9f 93       	push	r25
    4b4c:	af 93       	push	r26
    4b4e:	bf 93       	push	r27
    4b50:	ef 93       	push	r30
    4b52:	ff 93       	push	r31
	if (--ax.a[Y_AXIS].postscale_counter != 0) {
    4b54:	80 91 ba 21 	lds	r24, 0x21BA
    4b58:	90 91 bb 21 	lds	r25, 0x21BB
    4b5c:	01 97       	sbiw	r24, 0x01	; 1
    4b5e:	80 93 ba 21 	sts	0x21BA, r24
    4b62:	90 93 bb 21 	sts	0x21BB, r25
    4b66:	89 2b       	or	r24, r25
    4b68:	a1 f5       	brne	.+104    	; 0x4bd2 <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4b6a:	e0 ea       	ldi	r30, 0xA0	; 160
    4b6c:	f6 e0       	ldi	r31, 0x06	; 6
    4b6e:	81 e0       	ldi	r24, 0x01	; 1
    4b70:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y_AXIS].step_counter == 0) {
    4b72:	80 91 b2 21 	lds	r24, 0x21B2
    4b76:	90 91 b3 21 	lds	r25, 0x21B3
    4b7a:	a0 91 b4 21 	lds	r26, 0x21B4
    4b7e:	b0 91 b5 21 	lds	r27, 0x21B5
    4b82:	01 97       	sbiw	r24, 0x01	; 1
    4b84:	a1 09       	sbc	r26, r1
    4b86:	b1 09       	sbc	r27, r1
    4b88:	80 93 b2 21 	sts	0x21B2, r24
    4b8c:	90 93 b3 21 	sts	0x21B3, r25
    4b90:	a0 93 b4 21 	sts	0x21B4, r26
    4b94:	b0 93 b5 21 	sts	0x21B5, r27
    4b98:	00 97       	sbiw	r24, 0x00	; 0
    4b9a:	a1 05       	cpc	r26, r1
    4b9c:	b1 05       	cpc	r27, r1
    4b9e:	69 f4       	brne	.+26     	; 0x4bba <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4ba0:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4ba4:	84 e0       	ldi	r24, 0x04	; 4
    4ba6:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4ba8:	80 91 a0 21 	lds	r24, 0x21A0
    4bac:	8b 7f       	andi	r24, 0xFB	; 251
    4bae:	80 93 a0 21 	sts	0x21A0, r24
		if (ax.active_axes == 0) {
    4bb2:	88 23       	and	r24, r24
    4bb4:	11 f4       	brne	.+4      	; 0x4bba <__vector_77+0x8c>
			st_execute_move();
    4bb6:	0e 94 08 24 	call	0x4810	; 0x4810 <st_execute_move>
		}
	}
	ax.a[Y_AXIS].postscale_counter = ax.a[Y_AXIS].postscale_value;
    4bba:	80 91 b8 21 	lds	r24, 0x21B8
    4bbe:	90 91 b9 21 	lds	r25, 0x21B9
    4bc2:	80 93 ba 21 	sts	0x21BA, r24
    4bc6:	90 93 bb 21 	sts	0x21BB, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4bca:	81 e0       	ldi	r24, 0x01	; 1
    4bcc:	e0 ea       	ldi	r30, 0xA0	; 160
    4bce:	f6 e0       	ldi	r31, 0x06	; 6
    4bd0:	86 83       	std	Z+6, r24	; 0x06
}
    4bd2:	ff 91       	pop	r31
    4bd4:	ef 91       	pop	r30
    4bd6:	bf 91       	pop	r27
    4bd8:	af 91       	pop	r26
    4bda:	9f 91       	pop	r25
    4bdc:	8f 91       	pop	r24
    4bde:	7f 91       	pop	r23
    4be0:	6f 91       	pop	r22
    4be2:	5f 91       	pop	r21
    4be4:	4f 91       	pop	r20
    4be6:	3f 91       	pop	r19
    4be8:	2f 91       	pop	r18
    4bea:	0f 90       	pop	r0
    4bec:	0b be       	out	0x3b, r0	; 59
    4bee:	0f 90       	pop	r0
    4bf0:	0f be       	out	0x3f, r0	; 63
    4bf2:	0f 90       	pop	r0
    4bf4:	1f 90       	pop	r1
    4bf6:	18 95       	reti

00004bf8 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices becuase it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_vect)
{
    4bf8:	1f 92       	push	r1
    4bfa:	0f 92       	push	r0
    4bfc:	0f b6       	in	r0, 0x3f	; 63
    4bfe:	0f 92       	push	r0
    4c00:	0b b6       	in	r0, 0x3b	; 59
    4c02:	0f 92       	push	r0
    4c04:	11 24       	eor	r1, r1
    4c06:	2f 93       	push	r18
    4c08:	3f 93       	push	r19
    4c0a:	4f 93       	push	r20
    4c0c:	5f 93       	push	r21
    4c0e:	6f 93       	push	r22
    4c10:	7f 93       	push	r23
    4c12:	8f 93       	push	r24
    4c14:	9f 93       	push	r25
    4c16:	af 93       	push	r26
    4c18:	bf 93       	push	r27
    4c1a:	ef 93       	push	r30
    4c1c:	ff 93       	push	r31
	if (--ax.a[X_AXIS].postscale_counter != 0) {// get out fast, if you need to
    4c1e:	80 91 ab 21 	lds	r24, 0x21AB
    4c22:	90 91 ac 21 	lds	r25, 0x21AC
    4c26:	01 97       	sbiw	r24, 0x01	; 1
    4c28:	80 93 ab 21 	sts	0x21AB, r24
    4c2c:	90 93 ac 21 	sts	0x21AC, r25
    4c30:	89 2b       	or	r24, r25
    4c32:	a1 f5       	brne	.+104    	; 0x4c9c <__vector_14+0xa4>
		return;
	}
	X_MOTOR_PORT.OUTSET = STEP_BIT_bm;			// turn X step bit on
    4c34:	e0 e0       	ldi	r30, 0x00	; 0
    4c36:	f6 e0       	ldi	r31, 0x06	; 6
    4c38:	81 e0       	ldi	r24, 0x01	; 1
    4c3a:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[X_AXIS].step_counter == 0) {		// end-of-move processing
    4c3c:	80 91 a3 21 	lds	r24, 0x21A3
    4c40:	90 91 a4 21 	lds	r25, 0x21A4
    4c44:	a0 91 a5 21 	lds	r26, 0x21A5
    4c48:	b0 91 a6 21 	lds	r27, 0x21A6
    4c4c:	01 97       	sbiw	r24, 0x01	; 1
    4c4e:	a1 09       	sbc	r26, r1
    4c50:	b1 09       	sbc	r27, r1
    4c52:	80 93 a3 21 	sts	0x21A3, r24
    4c56:	90 93 a4 21 	sts	0x21A4, r25
    4c5a:	a0 93 a5 21 	sts	0x21A5, r26
    4c5e:	b0 93 a6 21 	sts	0x21A6, r27
    4c62:	00 97       	sbiw	r24, 0x00	; 0
    4c64:	a1 05       	cpc	r26, r1
    4c66:	b1 05       	cpc	r27, r1
    4c68:	69 f4       	brne	.+26     	; 0x4c84 <__vector_14+0x8c>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    4c6a:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4c6e:	84 e0       	ldi	r24, 0x04	; 4
    4c70:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    4c72:	80 91 a0 21 	lds	r24, 0x21A0
    4c76:	87 7f       	andi	r24, 0xF7	; 247
    4c78:	80 93 a0 21 	sts	0x21A0, r24
		if (ax.active_axes == 0) {				// if all axes are done
    4c7c:	88 23       	and	r24, r24
    4c7e:	11 f4       	brne	.+4      	; 0x4c84 <__vector_14+0x8c>
			st_execute_move();					// ...run the next move
    4c80:	0e 94 08 24 	call	0x4810	; 0x4810 <st_execute_move>
		}
	}
	ax.a[X_AXIS].postscale_counter = ax.a[X_AXIS].postscale_value;// reset post-scaler counter
    4c84:	80 91 a9 21 	lds	r24, 0x21A9
    4c88:	90 91 aa 21 	lds	r25, 0x21AA
    4c8c:	80 93 ab 21 	sts	0x21AB, r24
    4c90:	90 93 ac 21 	sts	0x21AC, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    4c94:	81 e0       	ldi	r24, 0x01	; 1
    4c96:	e0 e0       	ldi	r30, 0x00	; 0
    4c98:	f6 e0       	ldi	r31, 0x06	; 6
    4c9a:	86 83       	std	Z+6, r24	; 0x06
}
    4c9c:	ff 91       	pop	r31
    4c9e:	ef 91       	pop	r30
    4ca0:	bf 91       	pop	r27
    4ca2:	af 91       	pop	r26
    4ca4:	9f 91       	pop	r25
    4ca6:	8f 91       	pop	r24
    4ca8:	7f 91       	pop	r23
    4caa:	6f 91       	pop	r22
    4cac:	5f 91       	pop	r21
    4cae:	4f 91       	pop	r20
    4cb0:	3f 91       	pop	r19
    4cb2:	2f 91       	pop	r18
    4cb4:	0f 90       	pop	r0
    4cb6:	0b be       	out	0x3b, r0	; 59
    4cb8:	0f 90       	pop	r0
    4cba:	0f be       	out	0x3f, r0	; 63
    4cbc:	0f 90       	pop	r0
    4cbe:	1f 90       	pop	r1
    4cc0:	18 95       	reti

00004cc2 <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    4cc2:	e0 ea       	ldi	r30, 0xA0	; 160
    4cc4:	f0 e0       	ldi	r31, 0x00	; 0
    4cc6:	82 81       	ldd	r24, Z+2	; 0x02
    4cc8:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    4cca:	98 ed       	ldi	r25, 0xD8	; 216
    4ccc:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4cce:	82 83       	std	Z+2, r24	; 0x02
}
    4cd0:	08 95       	ret

00004cd2 <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    4cd2:	e0 ea       	ldi	r30, 0xA0	; 160
    4cd4:	f0 e0       	ldi	r31, 0x00	; 0
    4cd6:	82 81       	ldd	r24, Z+2	; 0x02
    4cd8:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    4cda:	98 ed       	ldi	r25, 0xD8	; 216
    4cdc:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4cde:	82 83       	std	Z+2, r24	; 0x02
}
    4ce0:	08 95       	ret

00004ce2 <xio_null_signal>:
 */

int xio_null_signal(uint8_t sig)
{
	return (TG_NOOP);
}
    4ce2:	81 e0       	ldi	r24, 0x01	; 1
    4ce4:	90 e0       	ldi	r25, 0x00	; 0
    4ce6:	08 95       	ret

00004ce8 <xio_null_line>:
 */

int xio_null_line(char * buf)
{
	return (TG_OK);
}
    4ce8:	80 e0       	ldi	r24, 0x00	; 0
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	08 95       	ret

00004cee <xio_fget_ln>:
 *	dev		XIO device enumeration
 */

int xio_fget_ln(uint8_t dev, char *buf, uint8_t len)
{
	switch (dev) {
    4cee:	81 30       	cpi	r24, 0x01	; 1
    4cf0:	51 f0       	breq	.+20     	; 0x4d06 <xio_fget_ln+0x18>
    4cf2:	81 30       	cpi	r24, 0x01	; 1
    4cf4:	28 f0       	brcs	.+10     	; 0x4d00 <xio_fget_ln+0x12>
    4cf6:	84 30       	cpi	r24, 0x04	; 4
    4cf8:	59 f0       	breq	.+22     	; 0x4d10 <xio_fget_ln+0x22>
    4cfa:	20 e1       	ldi	r18, 0x10	; 16
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	0d c0       	rjmp	.+26     	; 0x4d1a <xio_fget_ln+0x2c>
    4d00:	20 e0       	ldi	r18, 0x00	; 0
    4d02:	30 e0       	ldi	r19, 0x00	; 0
    4d04:	0a c0       	rjmp	.+20     	; 0x4d1a <xio_fget_ln+0x2c>
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): return (xio_usb_readln(buf, len));
    4d06:	cb 01       	movw	r24, r22
    4d08:	64 2f       	mov	r22, r20
    4d0a:	0e 94 0e 2a 	call	0x541c	; 0x541c <xio_usb_readln>
    4d0e:	04 c0       	rjmp	.+8      	; 0x4d18 <xio_fget_ln+0x2a>
//		case (XIO_DEV_AUX): return (xio_aux_readln(buf, len));
//		case (XIO_DEV_RS485): return (xio_rs485_readln(buf, len));
		case (XIO_DEV_PGM): return (xio_pgm_readln(buf, len));
    4d10:	cb 01       	movw	r24, r22
    4d12:	64 2f       	mov	r22, r20
    4d14:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <xio_pgm_readln>
    4d18:	9c 01       	movw	r18, r24
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4d1a:	c9 01       	movw	r24, r18
    4d1c:	08 95       	ret

00004d1e <xio_control>:
 * xio_control() - common entry point for device control functions
 */

int8_t xio_control(uint8_t dev, const uint16_t control, const int16_t arg)
{
	switch (dev) {
    4d1e:	81 30       	cpi	r24, 0x01	; 1
    4d20:	41 f0       	breq	.+16     	; 0x4d32 <xio_control+0x14>
    4d22:	81 30       	cpi	r24, 0x01	; 1
    4d24:	20 f0       	brcs	.+8      	; 0x4d2e <xio_control+0x10>
    4d26:	84 30       	cpi	r24, 0x04	; 4
    4d28:	49 f0       	breq	.+18     	; 0x4d3c <xio_control+0x1e>
    4d2a:	80 e1       	ldi	r24, 0x10	; 16
    4d2c:	08 95       	ret
    4d2e:	80 e0       	ldi	r24, 0x00	; 0
    4d30:	08 95       	ret
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): return (xio_usb_control(control, arg));
    4d32:	cb 01       	movw	r24, r22
    4d34:	ba 01       	movw	r22, r20
    4d36:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <xio_usb_control>
    4d3a:	08 95       	ret
//		case (XIO_DEV_AUX): return (xio_aux_control(control, arg));
//		case (XIO_DEV_RS485): return (xio_rs485_control(control, arg));
		case (XIO_DEV_PGM): return (xio_pgm_control(control, arg));
    4d3c:	cb 01       	movw	r24, r22
    4d3e:	ba 01       	movw	r22, r20
    4d40:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <xio_pgm_control>
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4d44:	08 95       	ret

00004d46 <xio_dev_init>:
 * xio_dev_init() - common entry point for device init functions
 */

int8_t xio_dev_init(uint8_t dev, const int16_t arg)
{
	switch (dev) {
    4d46:	81 30       	cpi	r24, 0x01	; 1
    4d48:	31 f0       	breq	.+12     	; 0x4d56 <xio_dev_init+0x10>
    4d4a:	81 30       	cpi	r24, 0x01	; 1
    4d4c:	38 f0       	brcs	.+14     	; 0x4d5c <xio_dev_init+0x16>
    4d4e:	84 30       	cpi	r24, 0x04	; 4
    4d50:	39 f0       	breq	.+14     	; 0x4d60 <xio_dev_init+0x1a>
    4d52:	80 e1       	ldi	r24, 0x10	; 16
    4d54:	08 95       	ret
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): xio_usb_init(arg); return (TG_OK);
    4d56:	cb 01       	movw	r24, r22
    4d58:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <xio_usb_init>
    4d5c:	80 e0       	ldi	r24, 0x00	; 0
    4d5e:	08 95       	ret
//		case (XIO_DEV_AUX): xio_aux_init(arg); return (TG_OK);
//		case (XIO_DEV_RS485): xio_rs485_init(arg); return (TG_OK);
		case (XIO_DEV_PGM): xio_pgm_init(arg); return (TG_OK);
    4d60:	cb 01       	movw	r24, r22
    4d62:	0e 94 b9 2c 	call	0x5972	; 0x5972 <xio_pgm_init>
    4d66:	80 e0       	ldi	r24, 0x00	; 0
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4d68:	08 95       	ret

00004d6a <xio_init>:
 */

void xio_init(void)
{	
	// USB port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_SEMICOLONS | XIO_BAUD_115200);
    4d6a:	85 e0       	ldi	r24, 0x05	; 5
    4d6c:	90 e5       	ldi	r25, 0x50	; 80
    4d6e:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <xio_usb_init>

	// PGM file defaults are:	XIO_RD | XIO_BLOCK
//	xio_pgm_init(XIO_ECHO | XIO_CRLF | XIO_LINEMODE | XIO_SEMICOLONS);
	xio_pgm_init(XIO_LINEMODE);
    4d72:	80 e0       	ldi	r24, 0x00	; 0
    4d74:	90 e1       	ldi	r25, 0x10	; 16
    4d76:	0e 94 b9 2c 	call	0x5972	; 0x5972 <xio_pgm_init>

	stddev = &dev_usb;				// stddev is a convenience
    4d7a:	80 e0       	ldi	r24, 0x00	; 0
    4d7c:	90 e2       	ldi	r25, 0x20	; 32
    4d7e:	80 93 b2 24 	sts	0x24B2, r24
    4d82:	90 93 b3 24 	sts	0x24B3, r25
	stdin = &dev_usb;				// define the console device
    4d86:	80 93 0c 25 	sts	0x250C, r24
    4d8a:	90 93 0d 25 	sts	0x250D, r25
	stdout = &dev_usb;				// ...
    4d8e:	80 93 0e 25 	sts	0x250E, r24
    4d92:	90 93 0f 25 	sts	0x250F, r25
	stderr = &dev_usb;				// ...
    4d96:	80 93 10 25 	sts	0x2510, r24
    4d9a:	90 93 11 25 	sts	0x2511, r25

	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    4d9e:	0f 92       	push	r0
    4da0:	0f 92       	push	r0
    4da2:	8f ef       	ldi	r24, 0xFF	; 255
    4da4:	97 e0       	ldi	r25, 0x07	; 7
    4da6:	ed b7       	in	r30, 0x3d	; 61
    4da8:	fe b7       	in	r31, 0x3e	; 62
    4daa:	81 83       	std	Z+1, r24	; 0x01
    4dac:	92 83       	std	Z+2, r25	; 0x02
    4dae:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
    4db2:	0f 90       	pop	r0
    4db4:	0f 90       	pop	r0
}
    4db6:	08 95       	ret

00004db8 <xio_usb_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_usb_init(const uint16_t control)
{
    4db8:	9c 01       	movw	r18, r24
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    4dba:	e8 2f       	mov	r30, r24
    4dbc:	ef 70       	andi	r30, 0x0F	; 15

	// transfer control flags to internal flag bits
	f.flags = XIO_FLAG_USB_DEFS_gm;		// set flags to defaults & initial state
    4dbe:	87 e3       	ldi	r24, 0x37	; 55
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	80 93 df 21 	sts	0x21DF, r24
    4dc6:	90 93 e0 21 	sts	0x21E0, r25
		f.flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		f.flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    4dca:	26 ff       	sbrs	r18, 6
    4dcc:	06 c0       	rjmp	.+12     	; 0x4dda <xio_usb_init+0x22>
		f.flags |= XIO_FLAG_BLOCK_bm;
    4dce:	87 e3       	ldi	r24, 0x37	; 55
    4dd0:	90 e0       	ldi	r25, 0x00	; 0
    4dd2:	80 93 df 21 	sts	0x21DF, r24
    4dd6:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOBLOCK) {
    4dda:	27 ff       	sbrs	r18, 7
    4ddc:	06 c0       	rjmp	.+12     	; 0x4dea <xio_usb_init+0x32>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    4dde:	83 e3       	ldi	r24, 0x33	; 51
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	80 93 df 21 	sts	0x21DF, r24
    4de6:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_ECHO) {
    4dea:	30 ff       	sbrs	r19, 0
    4dec:	09 c0       	rjmp	.+18     	; 0x4e00 <xio_usb_init+0x48>
		f.flags |= XIO_FLAG_ECHO_bm;
    4dee:	80 91 df 21 	lds	r24, 0x21DF
    4df2:	90 91 e0 21 	lds	r25, 0x21E0
    4df6:	80 61       	ori	r24, 0x10	; 16
    4df8:	80 93 df 21 	sts	0x21DF, r24
    4dfc:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOECHO) {
    4e00:	31 ff       	sbrs	r19, 1
    4e02:	09 c0       	rjmp	.+18     	; 0x4e16 <xio_usb_init+0x5e>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    4e04:	80 91 df 21 	lds	r24, 0x21DF
    4e08:	90 91 e0 21 	lds	r25, 0x21E0
    4e0c:	8f 7e       	andi	r24, 0xEF	; 239
    4e0e:	80 93 df 21 	sts	0x21DF, r24
    4e12:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_CRLF) {
    4e16:	32 ff       	sbrs	r19, 2
    4e18:	09 c0       	rjmp	.+18     	; 0x4e2c <xio_usb_init+0x74>
		f.flags |= XIO_FLAG_CRLF_bm;
    4e1a:	80 91 df 21 	lds	r24, 0x21DF
    4e1e:	90 91 e0 21 	lds	r25, 0x21E0
    4e22:	80 62       	ori	r24, 0x20	; 32
    4e24:	80 93 df 21 	sts	0x21DF, r24
    4e28:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOCRLF) {
    4e2c:	33 ff       	sbrs	r19, 3
    4e2e:	09 c0       	rjmp	.+18     	; 0x4e42 <xio_usb_init+0x8a>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    4e30:	80 91 df 21 	lds	r24, 0x21DF
    4e34:	90 91 e0 21 	lds	r25, 0x21E0
    4e38:	8f 7d       	andi	r24, 0xDF	; 223
    4e3a:	80 93 df 21 	sts	0x21DF, r24
    4e3e:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_LINEMODE) {
    4e42:	34 ff       	sbrs	r19, 4
    4e44:	09 c0       	rjmp	.+18     	; 0x4e58 <xio_usb_init+0xa0>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    4e46:	80 91 df 21 	lds	r24, 0x21DF
    4e4a:	90 91 e0 21 	lds	r25, 0x21E0
    4e4e:	80 64       	ori	r24, 0x40	; 64
    4e50:	80 93 df 21 	sts	0x21DF, r24
    4e54:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOLINEMODE) {
    4e58:	35 ff       	sbrs	r19, 5
    4e5a:	09 c0       	rjmp	.+18     	; 0x4e6e <xio_usb_init+0xb6>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    4e5c:	80 91 df 21 	lds	r24, 0x21DF
    4e60:	90 91 e0 21 	lds	r25, 0x21E0
    4e64:	8f 7b       	andi	r24, 0xBF	; 191
    4e66:	80 93 df 21 	sts	0x21DF, r24
    4e6a:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_SEMICOLONS) {
    4e6e:	36 ff       	sbrs	r19, 6
    4e70:	09 c0       	rjmp	.+18     	; 0x4e84 <xio_usb_init+0xcc>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    4e72:	80 91 df 21 	lds	r24, 0x21DF
    4e76:	90 91 e0 21 	lds	r25, 0x21E0
    4e7a:	80 68       	ori	r24, 0x80	; 128
    4e7c:	80 93 df 21 	sts	0x21DF, r24
    4e80:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    4e84:	37 ff       	sbrs	r19, 7
    4e86:	09 c0       	rjmp	.+18     	; 0x4e9a <xio_usb_init+0xe2>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    4e88:	80 91 df 21 	lds	r24, 0x21DF
    4e8c:	90 91 e0 21 	lds	r25, 0x21E0
    4e90:	8f 77       	andi	r24, 0x7F	; 127
    4e92:	80 93 df 21 	sts	0x21DF, r24
    4e96:	90 93 e0 21 	sts	0x21E0, r25
	}

	// character signals and error returns
	f.sig = 0;
    4e9a:	10 92 e1 21 	sts	0x21E1, r1
	dev_usb.udata = &(f.sig);				// bind sig register to FILE struct
    4e9e:	81 ee       	ldi	r24, 0xE1	; 225
    4ea0:	91 e2       	ldi	r25, 0x21	; 33
    4ea2:	80 93 0c 20 	sts	0x200C, r24
    4ea6:	90 93 0d 20 	sts	0x200D, r25

	// setup internal RX/TX buffers
	f.rx_buf_head = 1;						// can't use location 0
    4eaa:	81 e0       	ldi	r24, 0x01	; 1
    4eac:	80 93 ec 21 	sts	0x21EC, r24
	f.rx_buf_tail = 1;
    4eb0:	80 93 eb 21 	sts	0x21EB, r24
	f.tx_buf_head = 1;
    4eb4:	80 93 ee 21 	sts	0x21EE, r24
	f.tx_buf_tail = 1;
    4eb8:	80 93 ed 21 	sts	0x21ED, r24
	f.len = sizeof(f.buf);					// offset to zero
    4ebc:	82 e0       	ldi	r24, 0x02	; 2
    4ebe:	80 93 e4 21 	sts	0x21E4, r24

	// bindings
	f.sig_func = &xio_null_signal;			// bind null signal handler
    4ec2:	81 e7       	ldi	r24, 0x71	; 113
    4ec4:	96 e2       	ldi	r25, 0x26	; 38
    4ec6:	80 93 e7 21 	sts	0x21E7, r24
    4eca:	90 93 e8 21 	sts	0x21E8, r25
	f.line_func = &xio_null_line;			// bind null line handler
    4ece:	84 e7       	ldi	r24, 0x74	; 116
    4ed0:	96 e2       	ldi	r25, 0x26	; 38
    4ed2:	80 93 e9 21 	sts	0x21E9, r24
    4ed6:	90 93 ea 21 	sts	0x21EA, r25

	f.usart = &USB_USART;					// bind USART structure
    4eda:	80 ea       	ldi	r24, 0xA0	; 160
    4edc:	98 e0       	ldi	r25, 0x08	; 8
    4ede:	80 93 14 22 	sts	0x2214, r24
    4ee2:	90 93 15 22 	sts	0x2215, r25
	f.port = &USB_PORT;						// bind PORT structure
    4ee6:	80 e4       	ldi	r24, 0x40	; 64
    4ee8:	96 e0       	ldi	r25, 0x06	; 6
    4eea:	80 93 16 22 	sts	0x2216, r24
    4eee:	90 93 17 22 	sts	0x2217, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    4ef2:	ee 23       	and	r30, r30
    4ef4:	09 f4       	brne	.+2      	; 0x4ef8 <xio_usb_init+0x140>
    4ef6:	e5 e0       	ldi	r30, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    4ef8:	8e 2f       	mov	r24, r30
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	fc 01       	movw	r30, r24
    4efe:	e7 51       	subi	r30, 0x17	; 23
    4f00:	f8 4f       	sbci	r31, 0xF8	; 248
    4f02:	e4 91       	lpm	r30, Z+
    4f04:	a0 ea       	ldi	r26, 0xA0	; 160
    4f06:	b8 e0       	ldi	r27, 0x08	; 8
    4f08:	16 96       	adiw	r26, 0x06	; 6
    4f0a:	ec 93       	st	X, r30
    4f0c:	16 97       	sbiw	r26, 0x06	; 6
	f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    4f0e:	8c 50       	subi	r24, 0x0C	; 12
    4f10:	98 4f       	sbci	r25, 0xF8	; 248
    4f12:	fc 01       	movw	r30, r24
    4f14:	84 91       	lpm	r24, Z+
    4f16:	17 96       	adiw	r26, 0x07	; 7
    4f18:	8c 93       	st	X, r24
    4f1a:	17 97       	sbiw	r26, 0x07	; 7
	f.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm; // enable tx and rx on USART
    4f1c:	88 e1       	ldi	r24, 0x18	; 24
    4f1e:	14 96       	adiw	r26, 0x04	; 4
    4f20:	8c 93       	st	X, r24
    4f22:	14 97       	sbiw	r26, 0x04	; 4
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    4f24:	81 e2       	ldi	r24, 0x21	; 33
    4f26:	13 96       	adiw	r26, 0x03	; 3
    4f28:	8c 93       	st	X, r24

	f.port->DIRCLR = USB_RX_bm;	 			// clr RX pin as input
    4f2a:	e0 e4       	ldi	r30, 0x40	; 64
    4f2c:	f6 e0       	ldi	r31, 0x06	; 6
    4f2e:	84 e0       	ldi	r24, 0x04	; 4
    4f30:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_TX_bm; 			// set TX pin as output
    4f32:	88 e0       	ldi	r24, 0x08	; 8
    4f34:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_TX_bm;				// set TX HI as initial state
    4f36:	85 83       	std	Z+5, r24	; 0x05
	f.port->DIRCLR = USB_CTS_bm; 			// set CTS pin as input
    4f38:	81 e0       	ldi	r24, 0x01	; 1
    4f3a:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_RTS_bm; 			// set RTS pin as output
    4f3c:	82 e0       	ldi	r24, 0x02	; 2
    4f3e:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
    4f40:	85 83       	std	Z+5, r24	; 0x05
//	f.port->OUTCLR = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
}
    4f42:	08 95       	ret

00004f44 <xio_usb_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_usb_control(const uint16_t control, const int16_t arg)
{
    4f44:	ac 01       	movw	r20, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    4f46:	84 ff       	sbrs	r24, 4
    4f48:	05 c0       	rjmp	.+10     	; 0x4f54 <xio_usb_control+0x10>
		f.sig_func = (fptr_int_uint8)arg;
    4f4a:	60 93 e7 21 	sts	0x21E7, r22
    4f4e:	70 93 e8 21 	sts	0x21E8, r23
    4f52:	8b c0       	rjmp	.+278    	; 0x506a <xio_usb_control+0x126>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    4f54:	85 ff       	sbrs	r24, 5
    4f56:	05 c0       	rjmp	.+10     	; 0x4f62 <xio_usb_control+0x1e>
		f.line_func = (fptr_int_char_p)arg;
    4f58:	60 93 e9 21 	sts	0x21E9, r22
    4f5c:	70 93 ea 21 	sts	0x21EA, r23
    4f60:	84 c0       	rjmp	.+264    	; 0x506a <xio_usb_control+0x126>
		return (0);
	}
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    4f62:	8f 70       	andi	r24, 0x0F	; 15
    4f64:	90 70       	andi	r25, 0x00	; 0
    4f66:	00 97       	sbiw	r24, 0x00	; 0
    4f68:	91 f0       	breq	.+36     	; 0x4f8e <xio_usb_control+0x4a>
		f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    4f6a:	a0 91 14 22 	lds	r26, 0x2214
    4f6e:	b0 91 15 22 	lds	r27, 0x2215
    4f72:	9c 01       	movw	r18, r24
    4f74:	27 51       	subi	r18, 0x17	; 23
    4f76:	38 4f       	sbci	r19, 0xF8	; 248
    4f78:	f9 01       	movw	r30, r18
    4f7a:	24 91       	lpm	r18, Z+
    4f7c:	16 96       	adiw	r26, 0x06	; 6
    4f7e:	2c 93       	st	X, r18
    4f80:	16 97       	sbiw	r26, 0x06	; 6
		f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    4f82:	8c 50       	subi	r24, 0x0C	; 12
    4f84:	98 4f       	sbci	r25, 0xF8	; 248
    4f86:	fc 01       	movw	r30, r24
    4f88:	84 91       	lpm	r24, Z+
    4f8a:	17 96       	adiw	r26, 0x07	; 7
    4f8c:	8c 93       	st	X, r24
	}
	if (control & XIO_BLOCK) {
    4f8e:	46 ff       	sbrs	r20, 6
    4f90:	09 c0       	rjmp	.+18     	; 0x4fa4 <xio_usb_control+0x60>
		f.flags |= XIO_FLAG_BLOCK_bm;
    4f92:	80 91 df 21 	lds	r24, 0x21DF
    4f96:	90 91 e0 21 	lds	r25, 0x21E0
    4f9a:	84 60       	ori	r24, 0x04	; 4
    4f9c:	80 93 df 21 	sts	0x21DF, r24
    4fa0:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOBLOCK) {
    4fa4:	47 ff       	sbrs	r20, 7
    4fa6:	09 c0       	rjmp	.+18     	; 0x4fba <xio_usb_control+0x76>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    4fa8:	80 91 df 21 	lds	r24, 0x21DF
    4fac:	90 91 e0 21 	lds	r25, 0x21E0
    4fb0:	8b 7f       	andi	r24, 0xFB	; 251
    4fb2:	80 93 df 21 	sts	0x21DF, r24
    4fb6:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_ECHO) {
    4fba:	50 ff       	sbrs	r21, 0
    4fbc:	09 c0       	rjmp	.+18     	; 0x4fd0 <xio_usb_control+0x8c>
		f.flags |= XIO_FLAG_ECHO_bm;
    4fbe:	80 91 df 21 	lds	r24, 0x21DF
    4fc2:	90 91 e0 21 	lds	r25, 0x21E0
    4fc6:	80 61       	ori	r24, 0x10	; 16
    4fc8:	80 93 df 21 	sts	0x21DF, r24
    4fcc:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOECHO) {
    4fd0:	51 ff       	sbrs	r21, 1
    4fd2:	09 c0       	rjmp	.+18     	; 0x4fe6 <xio_usb_control+0xa2>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    4fd4:	80 91 df 21 	lds	r24, 0x21DF
    4fd8:	90 91 e0 21 	lds	r25, 0x21E0
    4fdc:	8f 7e       	andi	r24, 0xEF	; 239
    4fde:	80 93 df 21 	sts	0x21DF, r24
    4fe2:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_CRLF) {
    4fe6:	52 ff       	sbrs	r21, 2
    4fe8:	09 c0       	rjmp	.+18     	; 0x4ffc <xio_usb_control+0xb8>
		f.flags |= XIO_FLAG_CRLF_bm;
    4fea:	80 91 df 21 	lds	r24, 0x21DF
    4fee:	90 91 e0 21 	lds	r25, 0x21E0
    4ff2:	80 62       	ori	r24, 0x20	; 32
    4ff4:	80 93 df 21 	sts	0x21DF, r24
    4ff8:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOCRLF) {
    4ffc:	53 ff       	sbrs	r21, 3
    4ffe:	09 c0       	rjmp	.+18     	; 0x5012 <xio_usb_control+0xce>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    5000:	80 91 df 21 	lds	r24, 0x21DF
    5004:	90 91 e0 21 	lds	r25, 0x21E0
    5008:	8f 7d       	andi	r24, 0xDF	; 223
    500a:	80 93 df 21 	sts	0x21DF, r24
    500e:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_LINEMODE) {
    5012:	54 ff       	sbrs	r21, 4
    5014:	09 c0       	rjmp	.+18     	; 0x5028 <xio_usb_control+0xe4>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    5016:	80 91 df 21 	lds	r24, 0x21DF
    501a:	90 91 e0 21 	lds	r25, 0x21E0
    501e:	80 64       	ori	r24, 0x40	; 64
    5020:	80 93 df 21 	sts	0x21DF, r24
    5024:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOLINEMODE) {
    5028:	55 ff       	sbrs	r21, 5
    502a:	09 c0       	rjmp	.+18     	; 0x503e <xio_usb_control+0xfa>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    502c:	80 91 df 21 	lds	r24, 0x21DF
    5030:	90 91 e0 21 	lds	r25, 0x21E0
    5034:	8f 7b       	andi	r24, 0xBF	; 191
    5036:	80 93 df 21 	sts	0x21DF, r24
    503a:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_SEMICOLONS) {
    503e:	56 ff       	sbrs	r21, 6
    5040:	09 c0       	rjmp	.+18     	; 0x5054 <xio_usb_control+0x110>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    5042:	80 91 df 21 	lds	r24, 0x21DF
    5046:	90 91 e0 21 	lds	r25, 0x21E0
    504a:	80 68       	ori	r24, 0x80	; 128
    504c:	80 93 df 21 	sts	0x21DF, r24
    5050:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5054:	57 ff       	sbrs	r21, 7
    5056:	09 c0       	rjmp	.+18     	; 0x506a <xio_usb_control+0x126>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5058:	80 91 df 21 	lds	r24, 0x21DF
    505c:	90 91 e0 21 	lds	r25, 0x21E0
    5060:	8f 77       	andi	r24, 0x7F	; 127
    5062:	80 93 df 21 	sts	0x21DF, r24
    5066:	90 93 e0 21 	sts	0x21E0, r25
	}
	return (0);
}
    506a:	80 e0       	ldi	r24, 0x00	; 0
    506c:	08 95       	ret

0000506e <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(USB_RX_ISR_vect)		//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    506e:	1f 92       	push	r1
    5070:	0f 92       	push	r0
    5072:	0f b6       	in	r0, 0x3f	; 63
    5074:	0f 92       	push	r0
    5076:	0b b6       	in	r0, 0x3b	; 59
    5078:	0f 92       	push	r0
    507a:	11 24       	eor	r1, r1
    507c:	8f 93       	push	r24
    507e:	9f 93       	push	r25
    5080:	af 93       	push	r26
    5082:	bf 93       	push	r27
    5084:	ef 93       	push	r30
    5086:	ff 93       	push	r31
	// normal path
	if ((--f.rx_buf_head) == 0) { 				// advance buffer head with wrap
    5088:	80 91 ec 21 	lds	r24, 0x21EC
    508c:	81 50       	subi	r24, 0x01	; 1
    508e:	80 93 ec 21 	sts	0x21EC, r24
    5092:	80 91 ec 21 	lds	r24, 0x21EC
    5096:	88 23       	and	r24, r24
    5098:	19 f4       	brne	.+6      	; 0x50a0 <__vector_25+0x32>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    509a:	81 e1       	ldi	r24, 0x11	; 17
    509c:	80 93 ec 21 	sts	0x21EC, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    50a0:	90 91 ec 21 	lds	r25, 0x21EC
    50a4:	80 91 eb 21 	lds	r24, 0x21EB
    50a8:	98 17       	cp	r25, r24
    50aa:	61 f0       	breq	.+24     	; 0x50c4 <__vector_25+0x56>
		f.rx_buf[f.rx_buf_head] = f.usart->DATA;// (= USARTC0.DATA;)
    50ac:	e0 91 ec 21 	lds	r30, 0x21EC
    50b0:	f0 e0       	ldi	r31, 0x00	; 0
    50b2:	a0 91 14 22 	lds	r26, 0x2214
    50b6:	b0 91 15 22 	lds	r27, 0x2215
    50ba:	8c 91       	ld	r24, X
    50bc:	e1 52       	subi	r30, 0x21	; 33
    50be:	fe 4d       	sbci	r31, 0xDE	; 222
    50c0:	81 8b       	std	Z+17, r24	; 0x11
    50c2:	0c c0       	rjmp	.+24     	; 0x50dc <__vector_25+0x6e>
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    50c4:	80 91 ec 21 	lds	r24, 0x21EC
    50c8:	8f 5f       	subi	r24, 0xFF	; 255
    50ca:	80 93 ec 21 	sts	0x21EC, r24
    50ce:	80 91 ec 21 	lds	r24, 0x21EC
    50d2:	82 31       	cpi	r24, 0x12	; 18
    50d4:	18 f0       	brcs	.+6      	; 0x50dc <__vector_25+0x6e>
		f.rx_buf_head = 1;
    50d6:	81 e0       	ldi	r24, 0x01	; 1
    50d8:	80 93 ec 21 	sts	0x21EC, r24
	}
	// activate flow control here or before it gets to this level
}
    50dc:	ff 91       	pop	r31
    50de:	ef 91       	pop	r30
    50e0:	bf 91       	pop	r27
    50e2:	af 91       	pop	r26
    50e4:	9f 91       	pop	r25
    50e6:	8f 91       	pop	r24
    50e8:	0f 90       	pop	r0
    50ea:	0b be       	out	0x3b, r0	; 59
    50ec:	0f 90       	pop	r0
    50ee:	0f be       	out	0x3f, r0	; 63
    50f0:	0f 90       	pop	r0
    50f2:	1f 90       	pop	r1
    50f4:	18 95       	reti

000050f6 <xio_usb_queue_RX_char>:
/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_usb_queue_RX_char(const char c)
{
    50f6:	28 2f       	mov	r18, r24
	// normal path
	if ((--f.rx_buf_head) == 0) { 				// wrap condition
    50f8:	80 91 ec 21 	lds	r24, 0x21EC
    50fc:	81 50       	subi	r24, 0x01	; 1
    50fe:	80 93 ec 21 	sts	0x21EC, r24
    5102:	80 91 ec 21 	lds	r24, 0x21EC
    5106:	88 23       	and	r24, r24
    5108:	19 f4       	brne	.+6      	; 0x5110 <xio_usb_queue_RX_char+0x1a>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    510a:	81 e1       	ldi	r24, 0x11	; 17
    510c:	80 93 ec 21 	sts	0x21EC, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    5110:	90 91 ec 21 	lds	r25, 0x21EC
    5114:	80 91 eb 21 	lds	r24, 0x21EB
    5118:	98 17       	cp	r25, r24
    511a:	39 f0       	breq	.+14     	; 0x512a <xio_usb_queue_RX_char+0x34>
		f.rx_buf[f.rx_buf_head] = c;			// FAKE INPUT DATA
    511c:	e0 91 ec 21 	lds	r30, 0x21EC
    5120:	f0 e0       	ldi	r31, 0x00	; 0
    5122:	e1 52       	subi	r30, 0x21	; 33
    5124:	fe 4d       	sbci	r31, 0xDE	; 222
    5126:	21 8b       	std	Z+17, r18	; 0x11
    5128:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    512a:	80 91 ec 21 	lds	r24, 0x21EC
    512e:	8f 5f       	subi	r24, 0xFF	; 255
    5130:	80 93 ec 21 	sts	0x21EC, r24
    5134:	80 91 ec 21 	lds	r24, 0x21EC
    5138:	82 31       	cpi	r24, 0x12	; 18
    513a:	18 f0       	brcs	.+6      	; 0x5142 <xio_usb_queue_RX_char+0x4c>
		f.rx_buf_head = 1;
    513c:	81 e0       	ldi	r24, 0x01	; 1
    513e:	80 93 ec 21 	sts	0x21EC, r24
    5142:	08 95       	ret

00005144 <xio_usb_queue_RX_string>:
/*
 * xio_usb_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_usb_queue_RX_string(char *buf)
{
    5144:	1f 93       	push	r17
    5146:	cf 93       	push	r28
    5148:	df 93       	push	r29
    514a:	ec 01       	movw	r28, r24
    514c:	10 e0       	ldi	r17, 0x00	; 0
    514e:	02 c0       	rjmp	.+4      	; 0x5154 <xio_usb_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_usb_queue_RX_char(c);
    5150:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <xio_usb_queue_RX_char>
void xio_usb_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    5154:	fe 01       	movw	r30, r28
    5156:	e1 0f       	add	r30, r17
    5158:	f1 1d       	adc	r31, r1
    515a:	80 81       	ld	r24, Z
    515c:	1f 5f       	subi	r17, 0xFF	; 255
    515e:	88 23       	and	r24, r24
    5160:	b9 f7       	brne	.-18     	; 0x5150 <xio_usb_queue_RX_string+0xc>
		xio_usb_queue_RX_char(c);
	}
}
    5162:	df 91       	pop	r29
    5164:	cf 91       	pop	r28
    5166:	1f 91       	pop	r17
    5168:	08 95       	ret

0000516a <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)		//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    516a:	1f 92       	push	r1
    516c:	0f 92       	push	r0
    516e:	0f b6       	in	r0, 0x3f	; 63
    5170:	0f 92       	push	r0
    5172:	0b b6       	in	r0, 0x3b	; 59
    5174:	0f 92       	push	r0
    5176:	11 24       	eor	r1, r1
    5178:	8f 93       	push	r24
    517a:	9f 93       	push	r25
    517c:	af 93       	push	r26
    517e:	bf 93       	push	r27
    5180:	ef 93       	push	r30
    5182:	ff 93       	push	r31
	if (f.tx_buf_head == f.tx_buf_tail) {			// buffer empty - disable ints
    5184:	90 91 ee 21 	lds	r25, 0x21EE
    5188:	80 91 ed 21 	lds	r24, 0x21ED
    518c:	98 17       	cp	r25, r24
    518e:	39 f4       	brne	.+14     	; 0x519e <__vector_26+0x34>
		f.usart->CTRLA = USARTC0_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    5190:	e0 91 14 22 	lds	r30, 0x2214
    5194:	f0 91 15 22 	lds	r31, 0x2215
    5198:	80 e2       	ldi	r24, 0x20	; 32
    519a:	83 83       	std	Z+3, r24	; 0x03
    519c:	1e c0       	rjmp	.+60     	; 0x51da <__vector_26+0x70>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(f.flags)) {
    519e:	80 91 df 21 	lds	r24, 0x21DF
    51a2:	90 91 e0 21 	lds	r25, 0x21E0
    51a6:	93 fd       	sbrc	r25, 3
    51a8:	18 c0       	rjmp	.+48     	; 0x51da <__vector_26+0x70>
		if (--(f.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    51aa:	80 91 ed 21 	lds	r24, 0x21ED
    51ae:	81 50       	subi	r24, 0x01	; 1
    51b0:	80 93 ed 21 	sts	0x21ED, r24
    51b4:	80 91 ed 21 	lds	r24, 0x21ED
    51b8:	88 23       	and	r24, r24
    51ba:	19 f4       	brne	.+6      	; 0x51c2 <__vector_26+0x58>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    51bc:	81 e1       	ldi	r24, 0x11	; 17
    51be:	80 93 ed 21 	sts	0x21ED, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];	// write char to TX DATA register
    51c2:	e0 91 14 22 	lds	r30, 0x2214
    51c6:	f0 91 15 22 	lds	r31, 0x2215
    51ca:	a0 91 ed 21 	lds	r26, 0x21ED
    51ce:	b0 e0       	ldi	r27, 0x00	; 0
    51d0:	a1 52       	subi	r26, 0x21	; 33
    51d2:	be 4d       	sbci	r27, 0xDE	; 222
    51d4:	93 96       	adiw	r26, 0x23	; 35
    51d6:	8c 91       	ld	r24, X
    51d8:	80 83       	st	Z, r24
	}
}
    51da:	ff 91       	pop	r31
    51dc:	ef 91       	pop	r30
    51de:	bf 91       	pop	r27
    51e0:	af 91       	pop	r26
    51e2:	9f 91       	pop	r25
    51e4:	8f 91       	pop	r24
    51e6:	0f 90       	pop	r0
    51e8:	0b be       	out	0x3b, r0	; 59
    51ea:	0f 90       	pop	r0
    51ec:	0f be       	out	0x3f, r0	; 63
    51ee:	0f 90       	pop	r0
    51f0:	1f 90       	pop	r1
    51f2:	18 95       	reti

000051f4 <xio_usb_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
    51f4:	48 2f       	mov	r20, r24
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    51f6:	20 91 df 21 	lds	r18, 0x21DF
    51fa:	30 91 e0 21 	lds	r19, 0x21E0
    51fe:	d9 01       	movw	r26, r18
    5200:	a4 70       	andi	r26, 0x04	; 4
    5202:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    5204:	b9 01       	movw	r22, r18
    5206:	60 72       	andi	r22, 0x20	; 32
    5208:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
    520a:	90 91 ee 21 	lds	r25, 0x21EE
    520e:	91 50       	subi	r25, 0x01	; 1
    5210:	c1 f4       	brne	.+48     	; 0x5242 <xio_usb_putc+0x4e>
    5212:	91 e1       	ldi	r25, 0x11	; 17
    5214:	16 c0       	rjmp	.+44     	; 0x5242 <xio_usb_putc+0x4e>
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    5216:	10 97       	sbiw	r26, 0x00	; 0
    5218:	61 f0       	breq	.+24     	; 0x5232 <xio_usb_putc+0x3e>
			sleep_mode();
    521a:	80 91 48 00 	lds	r24, 0x0048
    521e:	81 60       	ori	r24, 0x01	; 1
    5220:	80 93 48 00 	sts	0x0048, r24
    5224:	88 95       	sleep
    5226:	80 91 48 00 	lds	r24, 0x0048
    522a:	8e 7f       	andi	r24, 0xFE	; 254
    522c:	80 93 48 00 	sts	0x0048, r24
    5230:	08 c0       	rjmp	.+16     	; 0x5242 <xio_usb_putc+0x4e>
    5232:	90 93 ef 21 	sts	0x21EF, r25
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    5236:	83 e0       	ldi	r24, 0x03	; 3
    5238:	80 93 e1 21 	sts	0x21E1, r24
    523c:	2f ef       	ldi	r18, 0xFF	; 255
    523e:	3f ef       	ldi	r19, 0xFF	; 255
    5240:	54 c0       	rjmp	.+168    	; 0x52ea <xio_usb_putc+0xf6>
int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
    5242:	80 91 ed 21 	lds	r24, 0x21ED
    5246:	98 17       	cp	r25, r24
    5248:	31 f3       	breq	.-52     	; 0x5216 <xio_usb_putc+0x22>
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
    524a:	90 93 ee 21 	sts	0x21EE, r25
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer
    524e:	e0 91 ee 21 	lds	r30, 0x21EE
    5252:	f0 e0       	ldi	r31, 0x00	; 0
    5254:	e1 52       	subi	r30, 0x21	; 33
    5256:	fe 4d       	sbci	r31, 0xDE	; 222
    5258:	43 a3       	std	Z+35, r20	; 0x23

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    525a:	61 15       	cp	r22, r1
    525c:	71 05       	cpc	r23, r1
    525e:	21 f0       	breq	.+8      	; 0x5268 <xio_usb_putc+0x74>
    5260:	4a 30       	cpi	r20, 0x0A	; 10
    5262:	11 f4       	brne	.+4      	; 0x5268 <xio_usb_putc+0x74>
    5264:	4d e0       	ldi	r20, 0x0D	; 13
    5266:	d1 cf       	rjmp	.-94     	; 0x520a <xio_usb_putc+0x16>
    5268:	90 93 ef 21 	sts	0x21EF, r25
		return xio_usb_putc('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (f.usart->STATUS & 0x20) {
    526c:	a0 91 14 22 	lds	r26, 0x2214
    5270:	b0 91 15 22 	lds	r27, 0x2215
    5274:	11 96       	adiw	r26, 0x01	; 1
    5276:	8c 91       	ld	r24, X
    5278:	11 97       	sbiw	r26, 0x01	; 1
    527a:	85 ff       	sbrs	r24, 5
    527c:	27 c0       	rjmp	.+78     	; 0x52cc <xio_usb_putc+0xd8>
		if (f.tx_buf_head == f.tx_buf_tail) {	// buf might be empty if IRQ got it
    527e:	90 91 ee 21 	lds	r25, 0x21EE
    5282:	80 91 ed 21 	lds	r24, 0x21ED
    5286:	98 17       	cp	r25, r24
    5288:	71 f1       	breq	.+92     	; 0x52e6 <xio_usb_putc+0xf2>
			return (0);
		}
		f.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    528a:	38 60       	ori	r19, 0x08	; 8
    528c:	20 93 df 21 	sts	0x21DF, r18
    5290:	30 93 e0 21 	sts	0x21E0, r19
		if (--(f.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    5294:	80 91 ed 21 	lds	r24, 0x21ED
    5298:	81 50       	subi	r24, 0x01	; 1
    529a:	80 93 ed 21 	sts	0x21ED, r24
    529e:	80 91 ed 21 	lds	r24, 0x21ED
    52a2:	88 23       	and	r24, r24
    52a4:	19 f4       	brne	.+6      	; 0x52ac <xio_usb_putc+0xb8>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    52a6:	81 e1       	ldi	r24, 0x11	; 17
    52a8:	80 93 ed 21 	sts	0x21ED, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];// write char to TX DATA register
    52ac:	e0 91 ed 21 	lds	r30, 0x21ED
    52b0:	f0 e0       	ldi	r31, 0x00	; 0
    52b2:	e1 52       	subi	r30, 0x21	; 33
    52b4:	fe 4d       	sbci	r31, 0xDE	; 222
    52b6:	83 a1       	ldd	r24, Z+35	; 0x23
    52b8:	8c 93       	st	X, r24
		f.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    52ba:	80 91 df 21 	lds	r24, 0x21DF
    52be:	90 91 e0 21 	lds	r25, 0x21E0
    52c2:	97 7f       	andi	r25, 0xF7	; 247
    52c4:	80 93 df 21 	sts	0x21DF, r24
    52c8:	90 93 e0 21 	sts	0x21E0, r25
	}
	// enable interrupts regardless
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    52cc:	e0 91 14 22 	lds	r30, 0x2214
    52d0:	f0 91 15 22 	lds	r31, 0x2215
    52d4:	81 e2       	ldi	r24, 0x21	; 33
    52d6:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    52d8:	80 91 a2 00 	lds	r24, 0x00A2
    52dc:	81 60       	ori	r24, 0x01	; 1
    52de:	e0 ea       	ldi	r30, 0xA0	; 160
    52e0:	f0 e0       	ldi	r31, 0x00	; 0
    52e2:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    52e4:	78 94       	sei
    52e6:	20 e0       	ldi	r18, 0x00	; 0
    52e8:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    52ea:	c9 01       	movw	r24, r18
    52ec:	08 95       	ret

000052ee <xio_usb_getc>:
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(f.flags)) {
    52ee:	20 91 df 21 	lds	r18, 0x21DF
    52f2:	30 91 e0 21 	lds	r19, 0x21E0
    52f6:	24 70       	andi	r18, 0x04	; 4
    52f8:	30 70       	andi	r19, 0x00	; 0
    52fa:	15 c0       	rjmp	.+42     	; 0x5326 <xio_usb_getc+0x38>
    52fc:	21 15       	cp	r18, r1
    52fe:	31 05       	cpc	r19, r1
    5300:	61 f0       	breq	.+24     	; 0x531a <xio_usb_getc+0x2c>
			sleep_mode();
    5302:	80 91 48 00 	lds	r24, 0x0048
    5306:	81 60       	ori	r24, 0x01	; 1
    5308:	80 93 48 00 	sts	0x0048, r24
    530c:	88 95       	sleep
    530e:	80 91 48 00 	lds	r24, 0x0048
    5312:	8e 7f       	andi	r24, 0xFE	; 254
    5314:	80 93 48 00 	sts	0x0048, r24
    5318:	06 c0       	rjmp	.+12     	; 0x5326 <xio_usb_getc+0x38>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    531a:	83 e0       	ldi	r24, 0x03	; 3
    531c:	80 93 e1 21 	sts	0x21E1, r24
    5320:	2f ef       	ldi	r18, 0xFF	; 255
    5322:	3f ef       	ldi	r19, 0xFF	; 255
    5324:	26 c0       	rjmp	.+76     	; 0x5372 <xio_usb_getc+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
    5326:	90 91 ec 21 	lds	r25, 0x21EC
    532a:	80 91 eb 21 	lds	r24, 0x21EB
    532e:	98 17       	cp	r25, r24
    5330:	29 f3       	breq	.-54     	; 0x52fc <xio_usb_getc+0xe>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    5332:	80 91 eb 21 	lds	r24, 0x21EB
    5336:	81 50       	subi	r24, 0x01	; 1
    5338:	80 93 eb 21 	sts	0x21EB, r24
    533c:	80 91 eb 21 	lds	r24, 0x21EB
    5340:	88 23       	and	r24, r24
    5342:	19 f4       	brne	.+6      	; 0x534a <xio_usb_getc+0x5c>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    5344:	81 e1       	ldi	r24, 0x11	; 17
    5346:	80 93 eb 21 	sts	0x21EB, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    534a:	e0 91 eb 21 	lds	r30, 0x21EB
    534e:	f0 e0       	ldi	r31, 0x00	; 0
    5350:	e1 52       	subi	r30, 0x21	; 33
    5352:	fe 4d       	sbci	r31, 0xDE	; 222
    5354:	81 89       	ldd	r24, Z+17	; 0x11
    5356:	8f 77       	andi	r24, 0x7F	; 127
    5358:	80 93 e2 21 	sts	0x21E2, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[f.c])))());
    535c:	90 e0       	ldi	r25, 0x00	; 0
    535e:	88 0f       	add	r24, r24
    5360:	99 1f       	adc	r25, r25
    5362:	85 5d       	subi	r24, 0xD5	; 213
    5364:	96 4f       	sbci	r25, 0xF6	; 246
    5366:	fc 01       	movw	r30, r24
    5368:	25 91       	lpm	r18, Z+
    536a:	34 91       	lpm	r19, Z+
    536c:	f9 01       	movw	r30, r18
    536e:	19 95       	eicall
    5370:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    5372:	c9 01       	movw	r24, r18
    5374:	08 95       	ret

00005376 <_getc_char>:

/* xio_usb_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    5376:	80 91 df 21 	lds	r24, 0x21DF
    537a:	84 ff       	sbrs	r24, 4
    537c:	08 c0       	rjmp	.+16     	; 0x538e <_getc_char+0x18>
    537e:	60 91 0e 25 	lds	r22, 0x250E
    5382:	70 91 0f 25 	lds	r23, 0x250F
    5386:	80 91 e2 21 	lds	r24, 0x21E2
    538a:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <xio_usb_putc>
	return(f.c);
}
    538e:	80 91 e2 21 	lds	r24, 0x21E2
    5392:	90 e0       	ldi	r25, 0x00	; 0
    5394:	08 95       	ret

00005396 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(f.flags)) f.c = '\n';
    5396:	90 91 df 21 	lds	r25, 0x21DF
    539a:	96 ff       	sbrs	r25, 6
    539c:	03 c0       	rjmp	.+6      	; 0x53a4 <_getc_NEWLINE+0xe>
    539e:	8a e0       	ldi	r24, 0x0A	; 10
    53a0:	80 93 e2 21 	sts	0x21E2, r24
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    53a4:	94 ff       	sbrs	r25, 4
    53a6:	08 c0       	rjmp	.+16     	; 0x53b8 <_getc_NEWLINE+0x22>
    53a8:	60 91 0e 25 	lds	r22, 0x250E
    53ac:	70 91 0f 25 	lds	r23, 0x250F
    53b0:	80 91 e2 21 	lds	r24, 0x21E2
    53b4:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <xio_usb_putc>
	return(f.c);
}
    53b8:	80 91 e2 21 	lds	r24, 0x21E2
    53bc:	90 e0       	ldi	r25, 0x00	; 0
    53be:	08 95       	ret

000053c0 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(f.flags)) {
    53c0:	80 91 df 21 	lds	r24, 0x21DF
    53c4:	87 ff       	sbrs	r24, 7
    53c6:	03 c0       	rjmp	.+6      	; 0x53ce <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    53c8:	0e 94 cb 29 	call	0x5396	; 0x5396 <_getc_NEWLINE>
    53cc:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    53ce:	0e 94 bb 29 	call	0x5376	; 0x5376 <_getc_char>
}
    53d2:	08 95       	ret

000053d4 <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	f.sig = XIO_SIG_DELETE;
    53d4:	8a e0       	ldi	r24, 0x0A	; 10
    53d6:	80 93 e1 21 	sts	0x21E1, r24
	return(_FDEV_ERR);
}
    53da:	8f ef       	ldi	r24, 0xFF	; 255
    53dc:	9f ef       	ldi	r25, 0xFF	; 255
    53de:	08 95       	ret

000053e0 <_getc_KILL>:

static int _getc_KILL(void)
{
	f.sig = XIO_SIG_KILL;
    53e0:	84 e0       	ldi	r24, 0x04	; 4
    53e2:	80 93 e1 21 	sts	0x21E1, r24
	return(_FDEV_ERR);
}
    53e6:	8f ef       	ldi	r24, 0xFF	; 255
    53e8:	9f ef       	ldi	r25, 0xFF	; 255
    53ea:	08 95       	ret

000053ec <_getc_PAUSE>:

static int _getc_PAUSE(void)
{
	f.sig = XIO_SIG_PAUSE;
    53ec:	86 e0       	ldi	r24, 0x06	; 6
    53ee:	80 93 e1 21 	sts	0x21E1, r24
	return(_FDEV_ERR);
}
    53f2:	8f ef       	ldi	r24, 0xFF	; 255
    53f4:	9f ef       	ldi	r25, 0xFF	; 255
    53f6:	08 95       	ret

000053f8 <_getc_RESUME>:

static int _getc_RESUME(void)
{
	f.sig = XIO_SIG_RESUME;
    53f8:	87 e0       	ldi	r24, 0x07	; 7
    53fa:	80 93 e1 21 	sts	0x21E1, r24
	return(_FDEV_ERR);
}
    53fe:	8f ef       	ldi	r24, 0xFF	; 255
    5400:	9f ef       	ldi	r25, 0xFF	; 255
    5402:	08 95       	ret

00005404 <_getc_SHIFTOUT>:

static int _getc_SHIFTOUT(void)
{
	f.sig = XIO_SIG_SHIFTOUT;
    5404:	88 e0       	ldi	r24, 0x08	; 8
    5406:	80 93 e1 21 	sts	0x21E1, r24
	return(_FDEV_ERR);
}
    540a:	8f ef       	ldi	r24, 0xFF	; 255
    540c:	9f ef       	ldi	r25, 0xFF	; 255
    540e:	08 95       	ret

00005410 <_getc_SHIFTIN>:

static int _getc_SHIFTIN(void)
{
	f.sig = XIO_SIG_SHIFTIN;
    5410:	89 e0       	ldi	r24, 0x09	; 9
    5412:	80 93 e1 21 	sts	0x21E1, r24
	return(_FDEV_ERR);
}
    5416:	8f ef       	ldi	r24, 0xFF	; 255
    5418:	9f ef       	ldi	r25, 0xFF	; 255
    541a:	08 95       	ret

0000541c <xio_usb_readln>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_usb_readln(char *buf, uint8_t len)
{
	if (!IN_LINE(f.flags)) {					// first time thru initializations
    541c:	20 91 df 21 	lds	r18, 0x21DF
    5420:	30 91 e0 21 	lds	r19, 0x21E0
    5424:	36 fd       	sbrc	r19, 6
    5426:	0d c0       	rjmp	.+26     	; 0x5442 <xio_usb_readln+0x26>
		f.i = 0;								// zero buffer
    5428:	10 92 e3 21 	sts	0x21E3, r1
		f.len = len;							// save arg into struct 
    542c:	60 93 e4 21 	sts	0x21E4, r22
		f.buf = buf;							// save arg into struct 
    5430:	80 93 e5 21 	sts	0x21E5, r24
    5434:	90 93 e6 21 	sts	0x21E6, r25
//		f.sig = XIO_SIG_OK;						// no signal action
		f.flags |= XIO_FLAG_IN_LINE_bm;			// yes, we are busy getting a line
    5438:	30 64       	ori	r19, 0x40	; 64
    543a:	20 93 df 21 	sts	0x21DF, r18
    543e:	30 93 e0 21 	sts	0x21E0, r19
	}
	if (f.rx_buf_head == f.rx_buf_tail) {		// RX ISR buffer empty
    5442:	90 91 ec 21 	lds	r25, 0x21EC
    5446:	80 91 eb 21 	lds	r24, 0x21EB
    544a:	98 17       	cp	r25, r24
    544c:	19 f4       	brne	.+6      	; 0x5454 <xio_usb_readln+0x38>
    544e:	22 e0       	ldi	r18, 0x02	; 2
    5450:	30 e0       	ldi	r19, 0x00	; 0
    5452:	20 c0       	rjmp	.+64     	; 0x5494 <xio_usb_readln+0x78>
//		f.sig = XIO_SIG_WOULDBLOCK;
		return(TG_CONTINUE);
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    5454:	80 91 eb 21 	lds	r24, 0x21EB
    5458:	81 50       	subi	r24, 0x01	; 1
    545a:	80 93 eb 21 	sts	0x21EB, r24
    545e:	80 91 eb 21 	lds	r24, 0x21EB
    5462:	88 23       	and	r24, r24
    5464:	19 f4       	brne	.+6      	; 0x546c <xio_usb_readln+0x50>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    5466:	81 e1       	ldi	r24, 0x11	; 17
    5468:	80 93 eb 21 	sts	0x21EB, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    546c:	e0 91 eb 21 	lds	r30, 0x21EB
    5470:	f0 e0       	ldi	r31, 0x00	; 0
    5472:	e1 52       	subi	r30, 0x21	; 33
    5474:	fe 4d       	sbci	r31, 0xDE	; 222
    5476:	81 89       	ldd	r24, Z+17	; 0x11
    5478:	8f 77       	andi	r24, 0x7F	; 127
    547a:	80 93 e2 21 	sts	0x21E2, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[f.c])))()); // dispatch on character
    547e:	90 e0       	ldi	r25, 0x00	; 0
    5480:	88 0f       	add	r24, r24
    5482:	99 1f       	adc	r25, r25
    5484:	85 5d       	subi	r24, 0xD5	; 213
    5486:	97 4f       	sbci	r25, 0xF7	; 247
    5488:	fc 01       	movw	r30, r24
    548a:	25 91       	lpm	r18, Z+
    548c:	34 91       	lpm	r19, Z+
    548e:	f9 01       	movw	r30, r18
    5490:	19 95       	eicall
    5492:	9c 01       	movw	r18, r24
}
    5494:	c9 01       	movw	r24, r18
    5496:	08 95       	ret

00005498 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (f.i > f.len) {							// trap buffer overflow
    5498:	90 91 e3 21 	lds	r25, 0x21E3
    549c:	20 91 e4 21 	lds	r18, 0x21E4
    54a0:	e0 91 e5 21 	lds	r30, 0x21E5
    54a4:	f0 91 e6 21 	lds	r31, 0x21E6
    54a8:	29 17       	cp	r18, r25
    54aa:	48 f4       	brcc	.+18     	; 0x54be <_readln_char+0x26>
		f.sig = XIO_SIG_EOL;
    54ac:	81 e0       	ldi	r24, 0x01	; 1
    54ae:	80 93 e1 21 	sts	0x21E1, r24
		f.buf[f.len] = NUL;						// f.len is zero based
    54b2:	e2 0f       	add	r30, r18
    54b4:	f1 1d       	adc	r31, r1
    54b6:	10 82       	st	Z, r1
    54b8:	26 e0       	ldi	r18, 0x06	; 6
    54ba:	30 e0       	ldi	r19, 0x00	; 0
    54bc:	16 c0       	rjmp	.+44     	; 0x54ea <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	f.buf[f.i++] = f.c;
    54be:	e9 0f       	add	r30, r25
    54c0:	f1 1d       	adc	r31, r1
    54c2:	80 91 e2 21 	lds	r24, 0x21E2
    54c6:	80 83       	st	Z, r24
    54c8:	9f 5f       	subi	r25, 0xFF	; 255
    54ca:	90 93 e3 21 	sts	0x21E3, r25
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);// conditional echo
    54ce:	80 91 df 21 	lds	r24, 0x21DF
    54d2:	84 ff       	sbrs	r24, 4
    54d4:	08 c0       	rjmp	.+16     	; 0x54e6 <_readln_char+0x4e>
    54d6:	60 91 0e 25 	lds	r22, 0x250E
    54da:	70 91 0f 25 	lds	r23, 0x250F
    54de:	80 91 e2 21 	lds	r24, 0x21E2
    54e2:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <xio_usb_putc>
    54e6:	22 e0       	ldi	r18, 0x02	; 2
    54e8:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_CONTINUE);						// line is still in process
}
    54ea:	c9 01       	movw	r24, r18
    54ec:	08 95       	ret

000054ee <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	f.sig = XIO_SIG_EOL;
    54ee:	81 e0       	ldi	r24, 0x01	; 1
    54f0:	80 93 e1 21 	sts	0x21E1, r24
	f.buf[f.i] = NUL;
    54f4:	80 91 e3 21 	lds	r24, 0x21E3
    54f8:	e0 91 e5 21 	lds	r30, 0x21E5
    54fc:	f0 91 e6 21 	lds	r31, 0x21E6
    5500:	e8 0f       	add	r30, r24
    5502:	f1 1d       	adc	r31, r1
    5504:	10 82       	st	Z, r1
	f.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    5506:	20 91 df 21 	lds	r18, 0x21DF
    550a:	30 91 e0 21 	lds	r19, 0x21E0
    550e:	c9 01       	movw	r24, r18
    5510:	9f 7b       	andi	r25, 0xBF	; 191
    5512:	80 93 df 21 	sts	0x21DF, r24
    5516:	90 93 e0 21 	sts	0x21E0, r25
	if (ECHO(f.flags)) xio_usb_putc('\n',stdout);// echo a newline
    551a:	24 ff       	sbrs	r18, 4
    551c:	07 c0       	rjmp	.+14     	; 0x552c <_readln_NEWLINE+0x3e>
    551e:	60 91 0e 25 	lds	r22, 0x250E
    5522:	70 91 0f 25 	lds	r23, 0x250F
    5526:	8a e0       	ldi	r24, 0x0A	; 10
    5528:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <xio_usb_putc>
	return ((int)f.line_func(f.buf));			// call line handler function
    552c:	e0 91 e9 21 	lds	r30, 0x21E9
    5530:	f0 91 ea 21 	lds	r31, 0x21EA
    5534:	80 91 e5 21 	lds	r24, 0x21E5
    5538:	90 91 e6 21 	lds	r25, 0x21E6
    553c:	19 95       	eicall
}
    553e:	08 95       	ret

00005540 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(f.flags)) {
    5540:	80 91 df 21 	lds	r24, 0x21DF
    5544:	87 ff       	sbrs	r24, 7
    5546:	03 c0       	rjmp	.+6      	; 0x554e <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    5548:	0e 94 77 2a 	call	0x54ee	; 0x54ee <_readln_NEWLINE>
    554c:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    554e:	0e 94 4c 2a 	call	0x5498	; 0x5498 <_readln_char>
	}
}
    5552:	08 95       	ret

00005554 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--f.i >= 0) {
    5554:	80 91 e3 21 	lds	r24, 0x21E3
    5558:	81 50       	subi	r24, 0x01	; 1
    555a:	80 93 e3 21 	sts	0x21E3, r24
		if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    555e:	80 91 df 21 	lds	r24, 0x21DF
    5562:	84 ff       	sbrs	r24, 4
    5564:	08 c0       	rjmp	.+16     	; 0x5576 <_readln_DELETE+0x22>
    5566:	60 91 0e 25 	lds	r22, 0x250E
    556a:	70 91 0f 25 	lds	r23, 0x250F
    556e:	80 91 e2 21 	lds	r24, 0x21E2
    5572:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <xio_usb_putc>
	} else {
		f.i = 0;
	}
	return (TG_CONTINUE);						// line is still in process
}
    5576:	82 e0       	ldi	r24, 0x02	; 2
    5578:	90 e0       	ldi	r25, 0x00	; 0
    557a:	08 95       	ret

0000557c <_readln_KILL>:

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    557c:	84 e0       	ldi	r24, 0x04	; 4
    557e:	80 93 e1 21 	sts	0x21E1, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    5582:	e0 91 e7 21 	lds	r30, 0x21E7
    5586:	f0 91 e8 21 	lds	r31, 0x21E8
    558a:	19 95       	eicall
}

static int _readln_KILL(void)
{
	return _readln_SIG(XIO_SIG_KILL);
}
    558c:	08 95       	ret

0000558e <_readln_PAUSE>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    558e:	86 e0       	ldi	r24, 0x06	; 6
    5590:	80 93 e1 21 	sts	0x21E1, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    5594:	e0 91 e7 21 	lds	r30, 0x21E7
    5598:	f0 91 e8 21 	lds	r31, 0x21E8
    559c:	19 95       	eicall
}

static int _readln_PAUSE(void)
{
	return _readln_SIG(XIO_SIG_PAUSE);
}
    559e:	08 95       	ret

000055a0 <_readln_RESUME>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    55a0:	87 e0       	ldi	r24, 0x07	; 7
    55a2:	80 93 e1 21 	sts	0x21E1, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    55a6:	e0 91 e7 21 	lds	r30, 0x21E7
    55aa:	f0 91 e8 21 	lds	r31, 0x21E8
    55ae:	19 95       	eicall
}

static int _readln_RESUME(void)
{
	return _readln_SIG(XIO_SIG_RESUME);
}
    55b0:	08 95       	ret

000055b2 <_readln_SHIFTOUT>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    55b2:	88 e0       	ldi	r24, 0x08	; 8
    55b4:	80 93 e1 21 	sts	0x21E1, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    55b8:	e0 91 e7 21 	lds	r30, 0x21E7
    55bc:	f0 91 e8 21 	lds	r31, 0x21E8
    55c0:	19 95       	eicall
}

static int _readln_SHIFTOUT(void)
{
	return _readln_SIG(XIO_SIG_SHIFTOUT);
}
    55c2:	08 95       	ret

000055c4 <_readln_SHIFTIN>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    55c4:	89 e0       	ldi	r24, 0x09	; 9
    55c6:	80 93 e1 21 	sts	0x21E1, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    55ca:	e0 91 e7 21 	lds	r30, 0x21E7
    55ce:	f0 91 e8 21 	lds	r31, 0x21E8
    55d2:	19 95       	eicall
}

static int _readln_SHIFTIN(void)
{
	return _readln_SIG(XIO_SIG_SHIFTIN);
}
    55d4:	08 95       	ret

000055d6 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    55d6:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    55d8:	e0 ec       	ldi	r30, 0xC0	; 192
    55da:	f1 e0       	ldi	r31, 0x01	; 1
    55dc:	80 91 cf 01 	lds	r24, 0x01CF
    55e0:	87 fd       	sbrc	r24, 7
    55e2:	fa cf       	rjmp	.-12     	; 0x55d8 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    55e4:	26 2f       	mov	r18, r22
    55e6:	30 e0       	ldi	r19, 0x00	; 0
    55e8:	2f 71       	andi	r18, 0x1F	; 31
    55ea:	30 70       	andi	r19, 0x00	; 0
    55ec:	89 2f       	mov	r24, r25
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	45 e0       	ldi	r20, 0x05	; 5
    55f2:	88 0f       	add	r24, r24
    55f4:	99 1f       	adc	r25, r25
    55f6:	4a 95       	dec	r20
    55f8:	e1 f7       	brne	.-8      	; 0x55f2 <EEPROM_ReadByte+0x1c>
    55fa:	28 2b       	or	r18, r24
    55fc:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    55fe:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5602:	83 2f       	mov	r24, r19
    5604:	8f 71       	andi	r24, 0x1F	; 31
    5606:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5608:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    560a:	86 e0       	ldi	r24, 0x06	; 6
    560c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    560e:	ef 93       	push	r30
    5610:	ff 93       	push	r31
    5612:	0f 93       	push	r16
    5614:	2f 93       	push	r18
    5616:	eb ec       	ldi	r30, 0xCB	; 203
    5618:	f1 e0       	ldi	r31, 0x01	; 1
    561a:	08 ed       	ldi	r16, 0xD8	; 216
    561c:	21 e0       	ldi	r18, 0x01	; 1
    561e:	04 bf       	out	0x34, r16	; 52
    5620:	20 83       	st	Z, r18
    5622:	2f 91       	pop	r18
    5624:	0f 91       	pop	r16
    5626:	ff 91       	pop	r31
    5628:	ef 91       	pop	r30

	return NVM.DATA0;
    562a:	80 91 c4 01 	lds	r24, 0x01C4
}
    562e:	08 95       	ret

00005630 <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    5630:	68 2f       	mov	r22, r24
    5632:	6f 71       	andi	r22, 0x1F	; 31
    5634:	55 e0       	ldi	r21, 0x05	; 5
    5636:	96 95       	lsr	r25
    5638:	87 95       	ror	r24
    563a:	5a 95       	dec	r21
    563c:	e1 f7       	brne	.-8      	; 0x5636 <eeprom_get_char+0x6>
    563e:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <EEPROM_ReadByte>
}
    5642:	08 95       	ret

00005644 <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    5644:	8f 92       	push	r8
    5646:	9f 92       	push	r9
    5648:	af 92       	push	r10
    564a:	bf 92       	push	r11
    564c:	cf 92       	push	r12
    564e:	df 92       	push	r13
    5650:	ff 92       	push	r15
    5652:	0f 93       	push	r16
    5654:	1f 93       	push	r17
    5656:	cf 93       	push	r28
    5658:	df 93       	push	r29
    565a:	4c 01       	movw	r8, r24
    565c:	5b 01       	movw	r10, r22
    565e:	6a 01       	movw	r12, r20
    5660:	8b 01       	movw	r16, r22
    5662:	ea 01       	movw	r28, r20
    5664:	ff 24       	eor	r15, r15
    5666:	18 c0       	rjmp	.+48     	; 0x5698 <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    5668:	c8 01       	movw	r24, r16
    566a:	0e 94 18 2b 	call	0x5630	; 0x5630 <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    566e:	ff 20       	and	r15, r15
    5670:	19 f0       	breq	.+6      	; 0x5678 <memcpy_from_eeprom_with_checksum+0x34>
    5672:	21 e0       	ldi	r18, 0x01	; 1
    5674:	30 e0       	ldi	r19, 0x00	; 0
    5676:	08 c0       	rjmp	.+16     	; 0x5688 <memcpy_from_eeprom_with_checksum+0x44>
    5678:	2f 2d       	mov	r18, r15
    567a:	33 27       	eor	r19, r19
    567c:	27 fd       	sbrc	r18, 7
    567e:	30 95       	com	r19
    5680:	22 27       	eor	r18, r18
    5682:	33 0f       	add	r19, r19
    5684:	22 1f       	adc	r18, r18
    5686:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    5688:	0f 5f       	subi	r16, 0xFF	; 255
    568a:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    568c:	f8 2e       	mov	r15, r24
    568e:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    5690:	f4 01       	movw	r30, r8
    5692:	81 93       	st	Z+, r24
    5694:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    5696:	21 97       	sbiw	r28, 0x01	; 1
    5698:	20 97       	sbiw	r28, 0x00	; 0
    569a:	31 f7       	brne	.-52     	; 0x5668 <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    569c:	c6 01       	movw	r24, r12
    569e:	8a 0d       	add	r24, r10
    56a0:	9b 1d       	adc	r25, r11
    56a2:	0e 94 18 2b 	call	0x5630	; 0x5630 <eeprom_get_char>
    56a6:	20 e0       	ldi	r18, 0x00	; 0
    56a8:	30 e0       	ldi	r19, 0x00	; 0
    56aa:	f8 16       	cp	r15, r24
    56ac:	11 f4       	brne	.+4      	; 0x56b2 <memcpy_from_eeprom_with_checksum+0x6e>
    56ae:	21 e0       	ldi	r18, 0x01	; 1
    56b0:	30 e0       	ldi	r19, 0x00	; 0
}
    56b2:	c9 01       	movw	r24, r18
    56b4:	df 91       	pop	r29
    56b6:	cf 91       	pop	r28
    56b8:	1f 91       	pop	r17
    56ba:	0f 91       	pop	r16
    56bc:	ff 90       	pop	r15
    56be:	df 90       	pop	r13
    56c0:	cf 90       	pop	r12
    56c2:	bf 90       	pop	r11
    56c4:	af 90       	pop	r10
    56c6:	9f 90       	pop	r9
    56c8:	8f 90       	pop	r8
    56ca:	08 95       	ret

000056cc <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    56cc:	80 91 cf 01 	lds	r24, 0x01CF
    56d0:	87 fd       	sbrc	r24, 7
    56d2:	fc cf       	rjmp	.-8      	; 0x56cc <EEPROM_WaitForNVM>
}
    56d4:	08 95       	ret

000056d6 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    56d6:	80 91 cf 01 	lds	r24, 0x01CF
    56da:	87 fd       	sbrc	r24, 7
    56dc:	fc cf       	rjmp	.-8      	; 0x56d6 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    56de:	80 91 cf 01 	lds	r24, 0x01CF
    56e2:	81 ff       	sbrs	r24, 1
    56e4:	12 c0       	rjmp	.+36     	; 0x570a <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    56e6:	86 e3       	ldi	r24, 0x36	; 54
    56e8:	e0 ec       	ldi	r30, 0xC0	; 192
    56ea:	f1 e0       	ldi	r31, 0x01	; 1
    56ec:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    56ee:	ef 93       	push	r30
    56f0:	ff 93       	push	r31
    56f2:	0f 93       	push	r16
    56f4:	2f 93       	push	r18
    56f6:	eb ec       	ldi	r30, 0xCB	; 203
    56f8:	f1 e0       	ldi	r31, 0x01	; 1
    56fa:	08 ed       	ldi	r16, 0xD8	; 216
    56fc:	21 e0       	ldi	r18, 0x01	; 1
    56fe:	04 bf       	out	0x34, r16	; 52
    5700:	20 83       	st	Z, r18
    5702:	2f 91       	pop	r18
    5704:	0f 91       	pop	r16
    5706:	ff 91       	pop	r31
    5708:	ef 91       	pop	r30
    570a:	08 95       	ret

0000570c <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    570c:	df 92       	push	r13
    570e:	ef 92       	push	r14
    5710:	ff 92       	push	r15
    5712:	0f 93       	push	r16
    5714:	1f 93       	push	r17
    5716:	e8 2e       	mov	r14, r24
    5718:	06 2f       	mov	r16, r22
    571a:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    571c:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5720:	e0 ec       	ldi	r30, 0xC0	; 192
    5722:	f1 e0       	ldi	r31, 0x01	; 1
    5724:	83 e3       	ldi	r24, 0x33	; 51
    5726:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    5728:	10 e0       	ldi	r17, 0x00	; 0
    572a:	0f 71       	andi	r16, 0x1F	; 31
    572c:	10 70       	andi	r17, 0x00	; 0
    572e:	ff 24       	eor	r15, r15
    5730:	75 e0       	ldi	r23, 0x05	; 5
    5732:	ee 0c       	add	r14, r14
    5734:	ff 1c       	adc	r15, r15
    5736:	7a 95       	dec	r23
    5738:	e1 f7       	brne	.-8      	; 0x5732 <EEPROM_WriteByte+0x26>
    573a:	0e 29       	or	r16, r14
    573c:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    573e:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5740:	81 2f       	mov	r24, r17
    5742:	8f 71       	andi	r24, 0x1F	; 31
    5744:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5746:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5748:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    574a:	85 e3       	ldi	r24, 0x35	; 53
    574c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    574e:	ef 93       	push	r30
    5750:	ff 93       	push	r31
    5752:	0f 93       	push	r16
    5754:	2f 93       	push	r18
    5756:	eb ec       	ldi	r30, 0xCB	; 203
    5758:	f1 e0       	ldi	r31, 0x01	; 1
    575a:	08 ed       	ldi	r16, 0xD8	; 216
    575c:	21 e0       	ldi	r18, 0x01	; 1
    575e:	04 bf       	out	0x34, r16	; 52
    5760:	20 83       	st	Z, r18
    5762:	2f 91       	pop	r18
    5764:	0f 91       	pop	r16
    5766:	ff 91       	pop	r31
    5768:	ef 91       	pop	r30
}
    576a:	1f 91       	pop	r17
    576c:	0f 91       	pop	r16
    576e:	ff 90       	pop	r15
    5770:	ef 90       	pop	r14
    5772:	df 90       	pop	r13
    5774:	08 95       	ret

00005776 <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    5776:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    5778:	68 2f       	mov	r22, r24
    577a:	6f 71       	andi	r22, 0x1F	; 31
    577c:	e5 e0       	ldi	r30, 0x05	; 5
    577e:	96 95       	lsr	r25
    5780:	87 95       	ror	r24
    5782:	ea 95       	dec	r30
    5784:	e1 f7       	brne	.-8      	; 0x577e <eeprom_put_char+0x8>
    5786:	0e 94 86 2b 	call	0x570c	; 0x570c <EEPROM_WriteByte>
}
    578a:	08 95       	ret

0000578c <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    578c:	8f 92       	push	r8
    578e:	9f 92       	push	r9
    5790:	af 92       	push	r10
    5792:	bf 92       	push	r11
    5794:	cf 92       	push	r12
    5796:	df 92       	push	r13
    5798:	ef 92       	push	r14
    579a:	ff 92       	push	r15
    579c:	0f 93       	push	r16
    579e:	df 93       	push	r29
    57a0:	cf 93       	push	r28
    57a2:	0f 92       	push	r0
    57a4:	0f 92       	push	r0
    57a6:	cd b7       	in	r28, 0x3d	; 61
    57a8:	de b7       	in	r29, 0x3e	; 62
    57aa:	5c 01       	movw	r10, r24
    57ac:	6b 01       	movw	r12, r22
    57ae:	7a 01       	movw	r14, r20
    57b0:	4a 01       	movw	r8, r20
    57b2:	00 e0       	ldi	r16, 0x00	; 0
    57b4:	1e c0       	rjmp	.+60     	; 0x57f2 <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    57b6:	00 23       	and	r16, r16
    57b8:	19 f0       	breq	.+6      	; 0x57c0 <memcpy_to_eeprom_with_checksum+0x34>
    57ba:	21 e0       	ldi	r18, 0x01	; 1
    57bc:	30 e0       	ldi	r19, 0x00	; 0
    57be:	08 c0       	rjmp	.+16     	; 0x57d0 <memcpy_to_eeprom_with_checksum+0x44>
    57c0:	20 2f       	mov	r18, r16
    57c2:	33 27       	eor	r19, r19
    57c4:	27 fd       	sbrc	r18, 7
    57c6:	30 95       	com	r19
    57c8:	22 27       	eor	r18, r18
    57ca:	33 0f       	add	r19, r19
    57cc:	22 1f       	adc	r18, r18
    57ce:	33 27       	eor	r19, r19
    checksum += *source;
    57d0:	f6 01       	movw	r30, r12
    57d2:	61 91       	ld	r22, Z+
    57d4:	6f 01       	movw	r12, r30
    57d6:	06 2f       	mov	r16, r22
    57d8:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    57da:	9c 01       	movw	r18, r24
    57dc:	2f 5f       	subi	r18, 0xFF	; 255
    57de:	3f 4f       	sbci	r19, 0xFF	; 255
    57e0:	29 83       	std	Y+1, r18	; 0x01
    57e2:	3a 83       	std	Y+2, r19	; 0x02
    57e4:	0e 94 bb 2b 	call	0x5776	; 0x5776 <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    57e8:	08 94       	sec
    57ea:	81 08       	sbc	r8, r1
    57ec:	91 08       	sbc	r9, r1
    57ee:	89 81       	ldd	r24, Y+1	; 0x01
    57f0:	9a 81       	ldd	r25, Y+2	; 0x02
    57f2:	81 14       	cp	r8, r1
    57f4:	91 04       	cpc	r9, r1
    57f6:	f9 f6       	brne	.-66     	; 0x57b6 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    57f8:	c7 01       	movw	r24, r14
    57fa:	8a 0d       	add	r24, r10
    57fc:	9b 1d       	adc	r25, r11
    57fe:	60 2f       	mov	r22, r16
    5800:	0e 94 bb 2b 	call	0x5776	; 0x5776 <eeprom_put_char>
}
    5804:	0f 90       	pop	r0
    5806:	0f 90       	pop	r0
    5808:	cf 91       	pop	r28
    580a:	df 91       	pop	r29
    580c:	0f 91       	pop	r16
    580e:	ff 90       	pop	r15
    5810:	ef 90       	pop	r14
    5812:	df 90       	pop	r13
    5814:	cf 90       	pop	r12
    5816:	bf 90       	pop	r11
    5818:	af 90       	pop	r10
    581a:	9f 90       	pop	r9
    581c:	8f 90       	pop	r8
    581e:	08 95       	ret

00005820 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    5820:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5822:	e0 ec       	ldi	r30, 0xC0	; 192
    5824:	f1 e0       	ldi	r31, 0x01	; 1
    5826:	80 91 cf 01 	lds	r24, 0x01CF
    582a:	87 fd       	sbrc	r24, 7
    582c:	fa cf       	rjmp	.-12     	; 0x5822 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    582e:	83 e3       	ldi	r24, 0x33	; 51
    5830:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    5832:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    5836:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5838:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    583a:	64 83       	std	Z+4, r22	; 0x04
}
    583c:	08 95       	ret

0000583e <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    583e:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5840:	e0 ec       	ldi	r30, 0xC0	; 192
    5842:	f1 e0       	ldi	r31, 0x01	; 1
    5844:	80 91 cf 01 	lds	r24, 0x01CF
    5848:	87 fd       	sbrc	r24, 7
    584a:	fa cf       	rjmp	.-12     	; 0x5840 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    584c:	83 e3       	ldi	r24, 0x33	; 51
    584e:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    5850:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5852:	12 82       	std	Z+2, r1	; 0x02
    5854:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    5856:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    585a:	8d 91       	ld	r24, X+
    585c:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    585e:	9f 5f       	subi	r25, 0xFF	; 255
    5860:	90 32       	cpi	r25, 0x20	; 32
    5862:	c9 f7       	brne	.-14     	; 0x5856 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    5864:	08 95       	ret

00005866 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    5866:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5868:	e0 ec       	ldi	r30, 0xC0	; 192
    586a:	f1 e0       	ldi	r31, 0x01	; 1
    586c:	80 91 cf 01 	lds	r24, 0x01CF
    5870:	87 fd       	sbrc	r24, 7
    5872:	fa cf       	rjmp	.-12     	; 0x5868 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5874:	89 2f       	mov	r24, r25
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	a5 e0       	ldi	r26, 0x05	; 5
    587a:	88 0f       	add	r24, r24
    587c:	99 1f       	adc	r25, r25
    587e:	aa 95       	dec	r26
    5880:	e1 f7       	brne	.-8      	; 0x587a <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5882:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5886:	89 2f       	mov	r24, r25
    5888:	8f 71       	andi	r24, 0x1F	; 31
    588a:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    588c:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    588e:	85 e3       	ldi	r24, 0x35	; 53
    5890:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5892:	ef 93       	push	r30
    5894:	ff 93       	push	r31
    5896:	0f 93       	push	r16
    5898:	2f 93       	push	r18
    589a:	eb ec       	ldi	r30, 0xCB	; 203
    589c:	f1 e0       	ldi	r31, 0x01	; 1
    589e:	08 ed       	ldi	r16, 0xD8	; 216
    58a0:	21 e0       	ldi	r18, 0x01	; 1
    58a2:	04 bf       	out	0x34, r16	; 52
    58a4:	20 83       	st	Z, r18
    58a6:	2f 91       	pop	r18
    58a8:	0f 91       	pop	r16
    58aa:	ff 91       	pop	r31
    58ac:	ef 91       	pop	r30
}
    58ae:	08 95       	ret

000058b0 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    58b0:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    58b2:	e0 ec       	ldi	r30, 0xC0	; 192
    58b4:	f1 e0       	ldi	r31, 0x01	; 1
    58b6:	80 91 cf 01 	lds	r24, 0x01CF
    58ba:	87 fd       	sbrc	r24, 7
    58bc:	fa cf       	rjmp	.-12     	; 0x58b2 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    58be:	89 2f       	mov	r24, r25
    58c0:	90 e0       	ldi	r25, 0x00	; 0
    58c2:	b5 e0       	ldi	r27, 0x05	; 5
    58c4:	88 0f       	add	r24, r24
    58c6:	99 1f       	adc	r25, r25
    58c8:	ba 95       	dec	r27
    58ca:	e1 f7       	brne	.-8      	; 0x58c4 <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    58cc:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    58d0:	89 2f       	mov	r24, r25
    58d2:	8f 71       	andi	r24, 0x1F	; 31
    58d4:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    58d6:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    58d8:	82 e3       	ldi	r24, 0x32	; 50
    58da:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    58dc:	ef 93       	push	r30
    58de:	ff 93       	push	r31
    58e0:	0f 93       	push	r16
    58e2:	2f 93       	push	r18
    58e4:	eb ec       	ldi	r30, 0xCB	; 203
    58e6:	f1 e0       	ldi	r31, 0x01	; 1
    58e8:	08 ed       	ldi	r16, 0xD8	; 216
    58ea:	21 e0       	ldi	r18, 0x01	; 1
    58ec:	04 bf       	out	0x34, r16	; 52
    58ee:	20 83       	st	Z, r18
    58f0:	2f 91       	pop	r18
    58f2:	0f 91       	pop	r16
    58f4:	ff 91       	pop	r31
    58f6:	ef 91       	pop	r30
}
    58f8:	08 95       	ret

000058fa <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    58fa:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    58fc:	e0 ec       	ldi	r30, 0xC0	; 192
    58fe:	f1 e0       	ldi	r31, 0x01	; 1
    5900:	80 91 cf 01 	lds	r24, 0x01CF
    5904:	87 fd       	sbrc	r24, 7
    5906:	fa cf       	rjmp	.-12     	; 0x58fc <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5908:	89 2f       	mov	r24, r25
    590a:	90 e0       	ldi	r25, 0x00	; 0
    590c:	25 e0       	ldi	r18, 0x05	; 5
    590e:	88 0f       	add	r24, r24
    5910:	99 1f       	adc	r25, r25
    5912:	2a 95       	dec	r18
    5914:	e1 f7       	brne	.-8      	; 0x590e <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5916:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    591a:	89 2f       	mov	r24, r25
    591c:	8f 71       	andi	r24, 0x1F	; 31
    591e:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5920:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    5922:	84 e3       	ldi	r24, 0x34	; 52
    5924:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5926:	ef 93       	push	r30
    5928:	ff 93       	push	r31
    592a:	0f 93       	push	r16
    592c:	2f 93       	push	r18
    592e:	eb ec       	ldi	r30, 0xCB	; 203
    5930:	f1 e0       	ldi	r31, 0x01	; 1
    5932:	08 ed       	ldi	r16, 0xD8	; 216
    5934:	21 e0       	ldi	r18, 0x01	; 1
    5936:	04 bf       	out	0x34, r16	; 52
    5938:	20 83       	st	Z, r18
    593a:	2f 91       	pop	r18
    593c:	0f 91       	pop	r16
    593e:	ff 91       	pop	r31
    5940:	ef 91       	pop	r30
}
    5942:	08 95       	ret

00005944 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5944:	80 91 cf 01 	lds	r24, 0x01CF
    5948:	87 fd       	sbrc	r24, 7
    594a:	fc cf       	rjmp	.-8      	; 0x5944 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    594c:	80 e3       	ldi	r24, 0x30	; 48
    594e:	e0 ec       	ldi	r30, 0xC0	; 192
    5950:	f1 e0       	ldi	r31, 0x01	; 1
    5952:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5954:	ef 93       	push	r30
    5956:	ff 93       	push	r31
    5958:	0f 93       	push	r16
    595a:	2f 93       	push	r18
    595c:	eb ec       	ldi	r30, 0xCB	; 203
    595e:	f1 e0       	ldi	r31, 0x01	; 1
    5960:	08 ed       	ldi	r16, 0xD8	; 216
    5962:	21 e0       	ldi	r18, 0x01	; 1
    5964:	04 bf       	out	0x34, r16	; 52
    5966:	20 83       	st	Z, r18
    5968:	2f 91       	pop	r18
    596a:	0f 91       	pop	r16
    596c:	ff 91       	pop	r31
    596e:	ef 91       	pop	r30
}
    5970:	08 95       	ret

00005972 <xio_pgm_init>:
 *
 *  Control parameters are defaulted and may be set using xio_pgm_control()
 */

void xio_pgm_init(const uint16_t control)
{
    5972:	9c 01       	movw	r18, r24
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;	// set flags to defaults & initial state
    5974:	85 e0       	ldi	r24, 0x05	; 5
    5976:	90 e0       	ldi	r25, 0x00	; 0
    5978:	80 93 18 22 	sts	0x2218, r24
    597c:	90 93 19 22 	sts	0x2219, r25
	if (control & XIO_WR) {				// this is actually an error. Ignore for now.
    5980:	25 ff       	sbrs	r18, 5
    5982:	06 c0       	rjmp	.+12     	; 0x5990 <xio_pgm_init+0x1e>
		fpgm.flags |= XIO_FLAG_WR_bm;
    5984:	87 e0       	ldi	r24, 0x07	; 7
    5986:	90 e0       	ldi	r25, 0x00	; 0
    5988:	80 93 18 22 	sts	0x2218, r24
    598c:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOBLOCK) {		// this is also technically a config error.
    5990:	27 ff       	sbrs	r18, 7
    5992:	09 c0       	rjmp	.+18     	; 0x59a6 <xio_pgm_init+0x34>
		fpgm.flags &= ~XIO_FLAG_BLOCK_bm;
    5994:	80 91 18 22 	lds	r24, 0x2218
    5998:	90 91 19 22 	lds	r25, 0x2219
    599c:	8b 7f       	andi	r24, 0xFB	; 251
    599e:	80 93 18 22 	sts	0x2218, r24
    59a2:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_ECHO) {
    59a6:	30 ff       	sbrs	r19, 0
    59a8:	09 c0       	rjmp	.+18     	; 0x59bc <xio_pgm_init+0x4a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    59aa:	80 91 18 22 	lds	r24, 0x2218
    59ae:	90 91 19 22 	lds	r25, 0x2219
    59b2:	80 61       	ori	r24, 0x10	; 16
    59b4:	80 93 18 22 	sts	0x2218, r24
    59b8:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOECHO) {
    59bc:	31 ff       	sbrs	r19, 1
    59be:	09 c0       	rjmp	.+18     	; 0x59d2 <xio_pgm_init+0x60>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    59c0:	80 91 18 22 	lds	r24, 0x2218
    59c4:	90 91 19 22 	lds	r25, 0x2219
    59c8:	8f 7e       	andi	r24, 0xEF	; 239
    59ca:	80 93 18 22 	sts	0x2218, r24
    59ce:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_CRLF) {
    59d2:	32 ff       	sbrs	r19, 2
    59d4:	09 c0       	rjmp	.+18     	; 0x59e8 <xio_pgm_init+0x76>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    59d6:	80 91 18 22 	lds	r24, 0x2218
    59da:	90 91 19 22 	lds	r25, 0x2219
    59de:	80 62       	ori	r24, 0x20	; 32
    59e0:	80 93 18 22 	sts	0x2218, r24
    59e4:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOCRLF) {
    59e8:	33 ff       	sbrs	r19, 3
    59ea:	09 c0       	rjmp	.+18     	; 0x59fe <xio_pgm_init+0x8c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    59ec:	80 91 18 22 	lds	r24, 0x2218
    59f0:	90 91 19 22 	lds	r25, 0x2219
    59f4:	8f 7d       	andi	r24, 0xDF	; 223
    59f6:	80 93 18 22 	sts	0x2218, r24
    59fa:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_LINEMODE) {
    59fe:	34 ff       	sbrs	r19, 4
    5a00:	09 c0       	rjmp	.+18     	; 0x5a14 <xio_pgm_init+0xa2>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5a02:	80 91 18 22 	lds	r24, 0x2218
    5a06:	90 91 19 22 	lds	r25, 0x2219
    5a0a:	80 64       	ori	r24, 0x40	; 64
    5a0c:	80 93 18 22 	sts	0x2218, r24
    5a10:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOLINEMODE) {
    5a14:	35 ff       	sbrs	r19, 5
    5a16:	09 c0       	rjmp	.+18     	; 0x5a2a <xio_pgm_init+0xb8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5a18:	80 91 18 22 	lds	r24, 0x2218
    5a1c:	90 91 19 22 	lds	r25, 0x2219
    5a20:	8f 7b       	andi	r24, 0xBF	; 191
    5a22:	80 93 18 22 	sts	0x2218, r24
    5a26:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_SEMICOLONS) {
    5a2a:	36 ff       	sbrs	r19, 6
    5a2c:	09 c0       	rjmp	.+18     	; 0x5a40 <xio_pgm_init+0xce>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5a2e:	80 91 18 22 	lds	r24, 0x2218
    5a32:	90 91 19 22 	lds	r25, 0x2219
    5a36:	80 68       	ori	r24, 0x80	; 128
    5a38:	80 93 18 22 	sts	0x2218, r24
    5a3c:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5a40:	37 ff       	sbrs	r19, 7
    5a42:	09 c0       	rjmp	.+18     	; 0x5a56 <xio_pgm_init+0xe4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5a44:	80 91 18 22 	lds	r24, 0x2218
    5a48:	90 91 19 22 	lds	r25, 0x2219
    5a4c:	8f 77       	andi	r24, 0x7F	; 127
    5a4e:	80 93 18 22 	sts	0x2218, r24
    5a52:	90 93 19 22 	sts	0x2219, r25
	}

	fpgm.idx = 0;
    5a56:	10 92 26 22 	sts	0x2226, r1
    5a5a:	10 92 27 22 	sts	0x2227, r1
	fpgm.sig = 0;
    5a5e:	10 92 1a 22 	sts	0x221A, r1
	dev_pgm.udata = &(fpgm.sig); 	// bind signals register to pgm FILE struct
    5a62:	8a e1       	ldi	r24, 0x1A	; 26
    5a64:	92 e2       	ldi	r25, 0x22	; 34
    5a66:	80 93 1a 20 	sts	0x201A, r24
    5a6a:	90 93 1b 20 	sts	0x201B, r25
	fpgm.len = sizeof(fpgm.buf);
    5a6e:	82 e0       	ldi	r24, 0x02	; 2
    5a70:	80 93 1d 22 	sts	0x221D, r24

	fpgm.sig_func = &xio_null_signal;			// bind null signal handler
    5a74:	81 e7       	ldi	r24, 0x71	; 113
    5a76:	96 e2       	ldi	r25, 0x26	; 38
    5a78:	80 93 1e 22 	sts	0x221E, r24
    5a7c:	90 93 1f 22 	sts	0x221F, r25
	fpgm.line_func = &xio_null_line;			// bind null line handler
    5a80:	84 e7       	ldi	r24, 0x74	; 116
    5a82:	96 e2       	ldi	r25, 0x26	; 38
    5a84:	80 93 20 22 	sts	0x2220, r24
    5a88:	90 93 21 22 	sts	0x2221, r25
}
    5a8c:	08 95       	ret

00005a8e <xio_pgm_open>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

FILE * xio_pgm_open(const prog_char *addr)
{
	fpgm.flags &= XIO_FLAG_RESET_gm;			// reset the signaling bits
    5a8e:	20 91 18 22 	lds	r18, 0x2218
    5a92:	30 91 19 22 	lds	r19, 0x2219
    5a96:	3f 70       	andi	r19, 0x0F	; 15
    5a98:	20 93 18 22 	sts	0x2218, r18
    5a9c:	30 93 19 22 	sts	0x2219, r19
	fpgm.pgmbase_P = (PROGMEM char *)addr;		// might want to range check this
    5aa0:	80 93 24 22 	sts	0x2224, r24
    5aa4:	90 93 25 22 	sts	0x2225, r25
	fpgm.idx = 0;
    5aa8:	10 92 26 22 	sts	0x2226, r1
    5aac:	10 92 27 22 	sts	0x2227, r1
	return(&dev_pgm);
}
    5ab0:	8e e0       	ldi	r24, 0x0E	; 14
    5ab2:	90 e2       	ldi	r25, 0x20	; 32
    5ab4:	08 95       	ret

00005ab6 <xio_pgm_control>:
 *	XIO_SEMICOLONS <null>		Treat semicolons as line breaks
 *	XIO_NOSEMICOLONS <null>	Y	Don't treat semicolons as line breaks
 */

int8_t xio_pgm_control(const uint16_t control, const int16_t arg)
{
    5ab6:	9c 01       	movw	r18, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    5ab8:	84 ff       	sbrs	r24, 4
    5aba:	05 c0       	rjmp	.+10     	; 0x5ac6 <xio_pgm_control+0x10>
		fpgm.sig_func = (fptr_int_uint8)arg;
    5abc:	60 93 1e 22 	sts	0x221E, r22
    5ac0:	70 93 1f 22 	sts	0x221F, r23
    5ac4:	62 c0       	rjmp	.+196    	; 0x5b8a <xio_pgm_control+0xd4>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    5ac6:	85 ff       	sbrs	r24, 5
    5ac8:	05 c0       	rjmp	.+10     	; 0x5ad4 <xio_pgm_control+0x1e>
		fpgm.line_func = (fptr_int_char_p)arg;
    5aca:	60 93 20 22 	sts	0x2220, r22
    5ace:	70 93 21 22 	sts	0x2221, r23
    5ad2:	5b c0       	rjmp	.+182    	; 0x5b8a <xio_pgm_control+0xd4>
		return (0);
	}
	// transfer control flags to internal flag bits
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;		// set flags to defaults & initial state
    5ad4:	85 e0       	ldi	r24, 0x05	; 5
    5ad6:	90 e0       	ldi	r25, 0x00	; 0
    5ad8:	80 93 18 22 	sts	0x2218, r24
    5adc:	90 93 19 22 	sts	0x2219, r25
	if (control & XIO_ECHO) {
    5ae0:	30 ff       	sbrs	r19, 0
    5ae2:	06 c0       	rjmp	.+12     	; 0x5af0 <xio_pgm_control+0x3a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5ae4:	85 e1       	ldi	r24, 0x15	; 21
    5ae6:	90 e0       	ldi	r25, 0x00	; 0
    5ae8:	80 93 18 22 	sts	0x2218, r24
    5aec:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOECHO) {
    5af0:	31 ff       	sbrs	r19, 1
    5af2:	09 c0       	rjmp	.+18     	; 0x5b06 <xio_pgm_control+0x50>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5af4:	80 91 18 22 	lds	r24, 0x2218
    5af8:	90 91 19 22 	lds	r25, 0x2219
    5afc:	8f 7e       	andi	r24, 0xEF	; 239
    5afe:	80 93 18 22 	sts	0x2218, r24
    5b02:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_CRLF) {
    5b06:	32 ff       	sbrs	r19, 2
    5b08:	09 c0       	rjmp	.+18     	; 0x5b1c <xio_pgm_control+0x66>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5b0a:	80 91 18 22 	lds	r24, 0x2218
    5b0e:	90 91 19 22 	lds	r25, 0x2219
    5b12:	80 62       	ori	r24, 0x20	; 32
    5b14:	80 93 18 22 	sts	0x2218, r24
    5b18:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOCRLF) {
    5b1c:	33 ff       	sbrs	r19, 3
    5b1e:	09 c0       	rjmp	.+18     	; 0x5b32 <xio_pgm_control+0x7c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5b20:	80 91 18 22 	lds	r24, 0x2218
    5b24:	90 91 19 22 	lds	r25, 0x2219
    5b28:	8f 7d       	andi	r24, 0xDF	; 223
    5b2a:	80 93 18 22 	sts	0x2218, r24
    5b2e:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_LINEMODE) {
    5b32:	34 ff       	sbrs	r19, 4
    5b34:	09 c0       	rjmp	.+18     	; 0x5b48 <xio_pgm_control+0x92>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5b36:	80 91 18 22 	lds	r24, 0x2218
    5b3a:	90 91 19 22 	lds	r25, 0x2219
    5b3e:	80 64       	ori	r24, 0x40	; 64
    5b40:	80 93 18 22 	sts	0x2218, r24
    5b44:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOLINEMODE) {
    5b48:	35 ff       	sbrs	r19, 5
    5b4a:	09 c0       	rjmp	.+18     	; 0x5b5e <xio_pgm_control+0xa8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5b4c:	80 91 18 22 	lds	r24, 0x2218
    5b50:	90 91 19 22 	lds	r25, 0x2219
    5b54:	8f 7b       	andi	r24, 0xBF	; 191
    5b56:	80 93 18 22 	sts	0x2218, r24
    5b5a:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_SEMICOLONS) {
    5b5e:	36 ff       	sbrs	r19, 6
    5b60:	09 c0       	rjmp	.+18     	; 0x5b74 <xio_pgm_control+0xbe>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5b62:	80 91 18 22 	lds	r24, 0x2218
    5b66:	90 91 19 22 	lds	r25, 0x2219
    5b6a:	80 68       	ori	r24, 0x80	; 128
    5b6c:	80 93 18 22 	sts	0x2218, r24
    5b70:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5b74:	37 ff       	sbrs	r19, 7
    5b76:	09 c0       	rjmp	.+18     	; 0x5b8a <xio_pgm_control+0xd4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5b78:	80 91 18 22 	lds	r24, 0x2218
    5b7c:	90 91 19 22 	lds	r25, 0x2219
    5b80:	8f 77       	andi	r24, 0x7F	; 127
    5b82:	80 93 18 22 	sts	0x2218, r24
    5b86:	90 93 19 22 	sts	0x2219, r25
	}
	return (0);
}
    5b8a:	80 e0       	ldi	r24, 0x00	; 0
    5b8c:	08 95       	ret

00005b8e <xio_pgm_putc>:
 */

int xio_pgm_putc(const char c, FILE *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    5b8e:	8f ef       	ldi	r24, 0xFF	; 255
    5b90:	9f ef       	ldi	r25, 0xFF	; 255
    5b92:	08 95       	ret

00005b94 <xio_pgm_readln>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_pgm_readln(char *buf, uint8_t len)
{
    5b94:	9c 01       	movw	r18, r24
	if (!(fpgm.pgmbase_P)) {					// return OK if no file is open
    5b96:	80 91 24 22 	lds	r24, 0x2224
    5b9a:	90 91 25 22 	lds	r25, 0x2225
    5b9e:	89 2b       	or	r24, r25
    5ba0:	a9 f0       	breq	.+42     	; 0x5bcc <xio_pgm_readln+0x38>
		return (TG_OK);					 
	}
	fpgm.sig = XIO_SIG_OK;						// initialize signal
    5ba2:	10 92 1a 22 	sts	0x221A, r1
	if (fgets(buf, len, &dev_pgm) == NULL) {
    5ba6:	c9 01       	movw	r24, r18
    5ba8:	70 e0       	ldi	r23, 0x00	; 0
    5baa:	4e e0       	ldi	r20, 0x0E	; 14
    5bac:	50 e2       	ldi	r21, 0x20	; 32
    5bae:	0e 94 f8 42 	call	0x85f0	; 0x85f0 <fgets>
    5bb2:	89 2b       	or	r24, r25
    5bb4:	59 f4       	brne	.+22     	; 0x5bcc <xio_pgm_readln+0x38>
		fpgm.pgmbase_P = NULL;
    5bb6:	10 92 24 22 	sts	0x2224, r1
    5bba:	10 92 25 22 	sts	0x2225, r1
		clearerr(&dev_pgm);
    5bbe:	8e e0       	ldi	r24, 0x0E	; 14
    5bc0:	90 e2       	ldi	r25, 0x20	; 32
    5bc2:	0e 94 f3 42 	call	0x85e6	; 0x85e6 <clearerr>
    5bc6:	24 e0       	ldi	r18, 0x04	; 4
    5bc8:	30 e0       	ldi	r19, 0x00	; 0
    5bca:	02 c0       	rjmp	.+4      	; 0x5bd0 <xio_pgm_readln+0x3c>
		return (TG_EOF);
    5bcc:	20 e0       	ldi	r18, 0x00	; 0
    5bce:	30 e0       	ldi	r19, 0x00	; 0
//	return (fpgm.status);

	// return directly without dispatch through line function callback
//	fpgm.status = ((int)fpgm.line_func(buf));	// call line handler function
	return (TG_OK);
}
    5bd0:	c9 01       	movw	r24, r18
    5bd2:	08 95       	ret

00005bd4 <xio_pgm_getc>:
 *		- Note: putc should expand newlines to <cr><lf>
 */

int xio_pgm_getc(FILE *stream)
{
	if (fpgm.flags & XIO_FLAG_EOF_bm) {
    5bd4:	40 91 18 22 	lds	r20, 0x2218
    5bd8:	50 91 19 22 	lds	r21, 0x2219
    5bdc:	55 ff       	sbrs	r21, 5
    5bde:	06 c0       	rjmp	.+12     	; 0x5bec <xio_pgm_getc+0x18>
		fpgm.sig = XIO_SIG_EOF;
    5be0:	82 e0       	ldi	r24, 0x02	; 2
    5be2:	80 93 1a 22 	sts	0x221A, r24
    5be6:	2e ef       	ldi	r18, 0xFE	; 254
    5be8:	3f ef       	ldi	r19, 0xFF	; 255
    5bea:	3f c0       	rjmp	.+126    	; 0x5c6a <xio_pgm_getc+0x96>
		return (_FDEV_EOF);
	}
	if ((fpgm.c = pgm_read_byte(&fpgm.pgmbase_P[fpgm.idx])) == NUL) {
    5bec:	20 91 26 22 	lds	r18, 0x2226
    5bf0:	30 91 27 22 	lds	r19, 0x2227
    5bf4:	e0 91 24 22 	lds	r30, 0x2224
    5bf8:	f0 91 25 22 	lds	r31, 0x2225
    5bfc:	e2 0f       	add	r30, r18
    5bfe:	f3 1f       	adc	r31, r19
    5c00:	84 91       	lpm	r24, Z+
    5c02:	80 93 1b 22 	sts	0x221B, r24
    5c06:	88 23       	and	r24, r24
    5c08:	29 f4       	brne	.+10     	; 0x5c14 <xio_pgm_getc+0x40>
		fpgm.flags |= XIO_FLAG_EOF_bm;
    5c0a:	50 62       	ori	r21, 0x20	; 32
    5c0c:	40 93 18 22 	sts	0x2218, r20
    5c10:	50 93 19 22 	sts	0x2219, r21
	}
	++fpgm.idx;
    5c14:	2f 5f       	subi	r18, 0xFF	; 255
    5c16:	3f 4f       	sbci	r19, 0xFF	; 255
    5c18:	20 93 26 22 	sts	0x2226, r18
    5c1c:	30 93 27 22 	sts	0x2227, r19
	if (!LINEMODE(fpgm.flags)) {		// processing is simple if not LINEMODE
    5c20:	90 91 18 22 	lds	r25, 0x2218
    5c24:	96 fd       	sbrc	r25, 6
    5c26:	07 c0       	rjmp	.+14     	; 0x5c36 <xio_pgm_getc+0x62>
		if (ECHO(fpgm.flags)) {
    5c28:	94 ff       	sbrs	r25, 4
    5c2a:	1b c0       	rjmp	.+54     	; 0x5c62 <xio_pgm_getc+0x8e>
			putchar(fpgm.c);
    5c2c:	60 91 0e 25 	lds	r22, 0x250E
    5c30:	70 91 0f 25 	lds	r23, 0x250F
    5c34:	13 c0       	rjmp	.+38     	; 0x5c5c <xio_pgm_getc+0x88>
		}
		return (fpgm.c);
	}
	// now do the LINEMODE stuff
	if (fpgm.c == NUL) {				// perform newline substitutions
    5c36:	88 23       	and	r24, r24
    5c38:	31 f0       	breq	.+12     	; 0x5c46 <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if (fpgm.c == '\r') {
    5c3a:	8d 30       	cpi	r24, 0x0D	; 13
    5c3c:	21 f0       	breq	.+8      	; 0x5c46 <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if ((SEMICOLONS(fpgm.flags)) && (fpgm.c == ';')) {
    5c3e:	97 ff       	sbrs	r25, 7
    5c40:	05 c0       	rjmp	.+10     	; 0x5c4c <xio_pgm_getc+0x78>
    5c42:	8b 33       	cpi	r24, 0x3B	; 59
    5c44:	19 f4       	brne	.+6      	; 0x5c4c <xio_pgm_getc+0x78>
		fpgm.c = '\n';
    5c46:	8a e0       	ldi	r24, 0x0A	; 10
    5c48:	80 93 1b 22 	sts	0x221B, r24
	}
	if (ECHO(fpgm.flags)) {
    5c4c:	94 ff       	sbrs	r25, 4
    5c4e:	09 c0       	rjmp	.+18     	; 0x5c62 <xio_pgm_getc+0x8e>
		putchar(fpgm.c);
    5c50:	60 91 0e 25 	lds	r22, 0x250E
    5c54:	70 91 0f 25 	lds	r23, 0x250F
    5c58:	80 91 1b 22 	lds	r24, 0x221B
    5c5c:	90 e0       	ldi	r25, 0x00	; 0
    5c5e:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
	}
	return (fpgm.c);
    5c62:	80 91 1b 22 	lds	r24, 0x221B
    5c66:	28 2f       	mov	r18, r24
    5c68:	30 e0       	ldi	r19, 0x00	; 0
}
    5c6a:	c9 01       	movw	r24, r18
    5c6c:	08 95       	ret

00005c6e <_tg_set_source>:
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.source = d;									// d = XIO device #. See xio.h
    5c6e:	80 93 2c 22 	sts	0x222C, r24
	tg.prompts = TRUE;
    5c72:	61 e0       	ldi	r22, 0x01	; 1
    5c74:	60 93 2e 22 	sts	0x222E, r22

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5c78:	42 e0       	ldi	r20, 0x02	; 2
    5c7a:	40 93 84 22 	sts	0x2284, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5c7e:	2e e8       	ldi	r18, 0x8E	; 142
    5c80:	3f e2       	ldi	r19, 0x2F	; 47
    5c82:	20 93 86 22 	sts	0x2286, r18
    5c86:	30 93 87 22 	sts	0x2287, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5c8a:	90 e5       	ldi	r25, 0x50	; 80
    5c8c:	90 93 85 22 	sts	0x2285, r25
	tg.source = d;									// d = XIO device #. See xio.h
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5c90:	40 93 d8 22 	sts	0x22D8, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5c94:	20 93 da 22 	sts	0x22DA, r18
    5c98:	30 93 db 22 	sts	0x22DB, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5c9c:	90 93 d9 22 	sts	0x22D9, r25
	tg.source = d;									// d = XIO device #. See xio.h
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5ca0:	40 93 2c 23 	sts	0x232C, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5ca4:	20 93 2e 23 	sts	0x232E, r18
    5ca8:	30 93 2f 23 	sts	0x232F, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5cac:	90 93 2d 23 	sts	0x232D, r25
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
		tg.dev[i].poll_func = &_tg_poll_signal;
    5cb0:	20 93 82 23 	sts	0x2382, r18
    5cb4:	30 93 83 23 	sts	0x2383, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5cb8:	90 93 81 23 	sts	0x2381, r25
	}
	tg.dev[XIO_DEV_PGM].state = TG_SRC_INACTIVE;	// program memory is an exception
    5cbc:	10 92 80 23 	sts	0x2380, r1

	// make selected device active
	tg.dev[d].state = TG_SRC_ACTIVE;	
    5cc0:	48 2f       	mov	r20, r24
    5cc2:	50 e0       	ldi	r21, 0x00	; 0
    5cc4:	24 e5       	ldi	r18, 0x54	; 84
    5cc6:	30 e0       	ldi	r19, 0x00	; 0
    5cc8:	42 9f       	mul	r20, r18
    5cca:	f0 01       	movw	r30, r0
    5ccc:	43 9f       	mul	r20, r19
    5cce:	f0 0d       	add	r31, r0
    5cd0:	52 9f       	mul	r21, r18
    5cd2:	f0 0d       	add	r31, r0
    5cd4:	11 24       	eor	r1, r1
    5cd6:	e7 5d       	subi	r30, 0xD7	; 215
    5cd8:	fd 4d       	sbci	r31, 0xDD	; 221
    5cda:	67 83       	std	Z+7, r22	; 0x07
	tg.dev[d].poll_func = &_tg_poll_active;
    5cdc:	2a e2       	ldi	r18, 0x2A	; 42
    5cde:	30 e0       	ldi	r19, 0x00	; 0
    5ce0:	42 9f       	mul	r20, r18
    5ce2:	f0 01       	movw	r30, r0
    5ce4:	43 9f       	mul	r20, r19
    5ce6:	f0 0d       	add	r31, r0
    5ce8:	52 9f       	mul	r21, r18
    5cea:	f0 0d       	add	r31, r0
    5cec:	11 24       	eor	r1, r1
    5cee:	ee 0f       	add	r30, r30
    5cf0:	ff 1f       	adc	r31, r31
    5cf2:	e5 5d       	subi	r30, 0xD5	; 213
    5cf4:	fd 4d       	sbci	r31, 0xDD	; 221
    5cf6:	2d e1       	ldi	r18, 0x1D	; 29
    5cf8:	3f e2       	ldi	r19, 0x2F	; 47
    5cfa:	27 83       	std	Z+7, r18	; 0x07
    5cfc:	30 87       	std	Z+8, r19	; 0x08
	if (d == XIO_DEV_PGM) {
    5cfe:	84 30       	cpi	r24, 0x04	; 4
    5d00:	11 f4       	brne	.+4      	; 0x5d06 <_tg_set_source+0x98>
		tg.prompts = FALSE;							// no prompts for file input
    5d02:	10 92 2e 22 	sts	0x222E, r1
    5d06:	08 95       	ret

00005d08 <tg_pause>:
}

void tg_pause()
{
	return;
}
    5d08:	08 95       	ret

00005d0a <tg_resume>:

void tg_resume()
{
	return;
}
    5d0a:	08 95       	ret

00005d0c <tg_terminate>:
	return;
}

void tg_terminate()
{
	st_kill();
    5d0c:	0e 94 ed 23 	call	0x47da	; 0x47da <st_kill>
	return;
}
    5d10:	08 95       	ret

00005d12 <tg_kill>:
	return (0);
}

void tg_kill()
{
	st_kill();
    5d12:	0e 94 ed 23 	call	0x47da	; 0x47da <st_kill>
	return;
}
    5d16:	08 95       	ret

00005d18 <_tg_prompt>:
	tgModeStringDirect
};

void _tg_prompt()
{
	if ((tg.prompts) && (tg.state == TG_STATE_READY_UNPROMPTED)) {
    5d18:	80 91 2e 22 	lds	r24, 0x222E
    5d1c:	88 23       	and	r24, r24
    5d1e:	09 f1       	breq	.+66     	; 0x5d62 <_tg_prompt+0x4a>
    5d20:	80 91 29 22 	lds	r24, 0x2229
    5d24:	88 23       	and	r24, r24
    5d26:	e9 f4       	brne	.+58     	; 0x5d62 <_tg_prompt+0x4a>
		printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5d28:	80 91 2b 22 	lds	r24, 0x222B
    5d2c:	e8 2f       	mov	r30, r24
    5d2e:	f0 e0       	ldi	r31, 0x00	; 0
    5d30:	ee 0f       	add	r30, r30
    5d32:	ff 1f       	adc	r31, r31
    5d34:	eb 5f       	subi	r30, 0xFB	; 251
    5d36:	f4 4e       	sbci	r31, 0xE4	; 228
    5d38:	25 91       	lpm	r18, Z+
    5d3a:	34 91       	lpm	r19, Z+
    5d3c:	00 d0       	rcall	.+0      	; 0x5d3e <_tg_prompt+0x26>
    5d3e:	0f 92       	push	r0
    5d40:	89 e2       	ldi	r24, 0x29	; 41
    5d42:	9b e1       	ldi	r25, 0x1B	; 27
    5d44:	ed b7       	in	r30, 0x3d	; 61
    5d46:	fe b7       	in	r31, 0x3e	; 62
    5d48:	81 83       	std	Z+1, r24	; 0x01
    5d4a:	92 83       	std	Z+2, r25	; 0x02
    5d4c:	23 83       	std	Z+3, r18	; 0x03
    5d4e:	34 83       	std	Z+4, r19	; 0x04
    5d50:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
		tg.state = TG_STATE_READY_PROMPTED;
    5d54:	81 e0       	ldi	r24, 0x01	; 1
    5d56:	80 93 29 22 	sts	0x2229, r24
    5d5a:	0f 90       	pop	r0
    5d5c:	0f 90       	pop	r0
    5d5e:	0f 90       	pop	r0
    5d60:	0f 90       	pop	r0
    5d62:	08 95       	ret

00005d64 <tg_signal>:
 * tg_signal() - default signal handler to bind to the line readers
 */

int tg_signal(uint8_t sig)
{
	switch (sig) {
    5d64:	84 30       	cpi	r24, 0x04	; 4
    5d66:	99 f0       	breq	.+38     	; 0x5d8e <tg_signal+0x2a>
    5d68:	85 30       	cpi	r24, 0x05	; 5
    5d6a:	89 f0       	breq	.+34     	; 0x5d8e <tg_signal+0x2a>
    5d6c:	82 30       	cpi	r24, 0x02	; 2
    5d6e:	89 f4       	brne	.+34     	; 0x5d92 <tg_signal+0x2e>
		case XIO_SIG_OK: break;
 		case XIO_SIG_EOL: break;

		case XIO_SIG_EOF:
			printf_P(PSTR("\r\nEnd of file encountered\r\n"));
    5d70:	0f 92       	push	r0
    5d72:	0f 92       	push	r0
    5d74:	8d e0       	ldi	r24, 0x0D	; 13
    5d76:	9b e1       	ldi	r25, 0x1B	; 27
    5d78:	ed b7       	in	r30, 0x3d	; 61
    5d7a:	fe b7       	in	r31, 0x3e	; 62
    5d7c:	81 83       	std	Z+1, r24	; 0x01
    5d7e:	92 83       	std	Z+2, r25	; 0x02
    5d80:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
//			tg.srcin = stdin;
			_tg_prompt();
    5d84:	0f 90       	pop	r0
    5d86:	0f 90       	pop	r0
    5d88:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <_tg_prompt>
    5d8c:	02 c0       	rjmp	.+4      	; 0x5d92 <tg_signal+0x2e>
	return;
}

void tg_terminate()
{
	st_kill();
    5d8e:	0e 94 ed 23 	call	0x47da	; 0x47da <st_kill>
		case XIO_SIG_SHIFTOUT: break;
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
}
    5d92:	80 e0       	ldi	r24, 0x00	; 0
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	08 95       	ret

00005d98 <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    5d98:	fc 01       	movw	r30, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    5d9a:	80 91 2b 22 	lds	r24, 0x222B
    5d9e:	88 23       	and	r24, r24
    5da0:	79 f5       	brne	.+94     	; 0x5e00 <tg_parser+0x68>
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
    5da2:	90 81       	ld	r25, Z
    5da4:	89 2f       	mov	r24, r25
    5da6:	81 56       	subi	r24, 0x61	; 97
    5da8:	8a 31       	cpi	r24, 0x1A	; 26
    5daa:	10 f4       	brcc	.+4      	; 0x5db0 <tg_parser+0x18>
			buf[0] = buf[0]-'a'+'A';
    5dac:	90 52       	subi	r25, 0x20	; 32
    5dae:	90 83       	st	Z, r25
		}
		switch (buf[0]) {
    5db0:	80 81       	ld	r24, Z
    5db2:	86 34       	cpi	r24, 0x46	; 70
    5db4:	b1 f0       	breq	.+44     	; 0x5de2 <tg_parser+0x4a>
    5db6:	87 34       	cpi	r24, 0x47	; 71
    5db8:	38 f4       	brcc	.+14     	; 0x5dc8 <tg_parser+0x30>
    5dba:	83 34       	cpi	r24, 0x43	; 67
    5dbc:	61 f0       	breq	.+24     	; 0x5dd6 <tg_parser+0x3e>
    5dbe:	84 34       	cpi	r24, 0x44	; 68
    5dc0:	71 f0       	breq	.+28     	; 0x5dde <tg_parser+0x46>
    5dc2:	8f 33       	cpi	r24, 0x3F	; 63
    5dc4:	d9 f4       	brne	.+54     	; 0x5dfc <tg_parser+0x64>
    5dc6:	07 c0       	rjmp	.+14     	; 0x5dd6 <tg_parser+0x3e>
    5dc8:	87 34       	cpi	r24, 0x47	; 71
    5dca:	19 f0       	breq	.+6      	; 0x5dd2 <tg_parser+0x3a>
    5dcc:	8d 54       	subi	r24, 0x4D	; 77
    5dce:	82 30       	cpi	r24, 0x02	; 2
    5dd0:	a8 f4       	brcc	.+42     	; 0x5dfc <tg_parser+0x64>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5dd2:	82 e0       	ldi	r24, 0x02	; 2
    5dd4:	01 c0       	rjmp	.+2      	; 0x5dd8 <tg_parser+0x40>
	if (tg.mode == TG_CONTROL_MODE) {
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
			buf[0] = buf[0]-'a'+'A';
		}
		switch (buf[0]) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    5dd6:	81 e0       	ldi	r24, 0x01	; 1
    5dd8:	80 93 2b 22 	sts	0x222B, r24
    5ddc:	11 c0       	rjmp	.+34     	; 0x5e00 <tg_parser+0x68>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5dde:	83 e0       	ldi	r24, 0x03	; 3
    5de0:	fb cf       	rjmp	.-10     	; 0x5dd8 <tg_parser+0x40>
//	xio_pgm_open(PGMFILE(&square_circle_test100));
//	xio_pgm_open(PGMFILE(&spiral_test50a));
//	xio_pgm_open(PGMFILE(&spiral_test5));

//	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
	xio_pgm_open(PGMFILE(&zoetrope));
    5de2:	88 e3       	ldi	r24, 0x38	; 56
    5de4:	9d e0       	ldi	r25, 0x0D	; 13
    5de6:	0e 94 47 2d 	call	0x5a8e	; 0x5a8e <xio_pgm_open>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5dea:	82 e0       	ldi	r24, 0x02	; 2
    5dec:	80 93 2b 22 	sts	0x222B, r24
//	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
	xio_pgm_open(PGMFILE(&zoetrope));

	// set mode and source for file mode
	_tg_set_mode(TG_GCODE_MODE);
	_tg_set_source(XIO_DEV_PGM);
    5df0:	84 e0       	ldi	r24, 0x04	; 4
    5df2:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <_tg_set_source>
    5df6:	20 e0       	ldi	r18, 0x00	; 0
    5df8:	30 e0       	ldi	r19, 0x00	; 0
    5dfa:	1d c0       	rjmp	.+58     	; 0x5e36 <tg_parser+0x9e>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5dfc:	10 92 2b 22 	sts	0x222B, r1
			case 'F': return (_tg_test_file());
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    5e00:	10 92 2a 22 	sts	0x222A, r1
	switch (tg.mode) {
    5e04:	80 91 2b 22 	lds	r24, 0x222B
    5e08:	82 30       	cpi	r24, 0x02	; 2
    5e0a:	41 f0       	breq	.+16     	; 0x5e1c <tg_parser+0x84>
    5e0c:	83 30       	cpi	r24, 0x03	; 3
    5e0e:	51 f0       	breq	.+20     	; 0x5e24 <tg_parser+0x8c>
    5e10:	81 30       	cpi	r24, 0x01	; 1
    5e12:	69 f4       	brne	.+26     	; 0x5e2e <tg_parser+0x96>
//		case TG_CONTROL_MODE: 
//			break;

		case TG_CONFIG_MODE:
			tg.status = cfg_parse(buf);
    5e14:	cf 01       	movw	r24, r30
    5e16:	0e 94 91 18 	call	0x3122	; 0x3122 <cfg_parse>
    5e1a:	07 c0       	rjmp	.+14     	; 0x5e2a <tg_parser+0x92>
			break;

		case TG_GCODE_MODE: 
			tg.status = gc_gcode_parser(buf);
    5e1c:	cf 01       	movw	r24, r30
    5e1e:	0e 94 ce 14 	call	0x299c	; 0x299c <gc_gcode_parser>
    5e22:	03 c0       	rjmp	.+6      	; 0x5e2a <tg_parser+0x92>
			break;

		case TG_DIRECT_DRIVE_MODE:
			tg.status = dd_parser(buf);
    5e24:	cf 01       	movw	r24, r30
    5e26:	0e 94 11 30 	call	0x6022	; 0x6022 <dd_parser>
    5e2a:	80 93 2a 22 	sts	0x222A, r24
			break;
	}
	return (tg.status);
    5e2e:	80 91 2a 22 	lds	r24, 0x222A
    5e32:	28 2f       	mov	r18, r24
    5e34:	30 e0       	ldi	r19, 0x00	; 0
}
    5e36:	c9 01       	movw	r24, r18
    5e38:	08 95       	ret

00005e3a <_tg_poll_active>:
/* 
 * _tg_poll_active() - Perform a non-blocking line read from active input device
 */

static void _tg_poll_active(uint8_t d)
{
    5e3a:	cf 93       	push	r28
    5e3c:	df 93       	push	r29
    5e3e:	48 2f       	mov	r20, r24
	if (tg.dev[d].state != TG_SRC_ACTIVE) {			// sanity check
    5e40:	28 2f       	mov	r18, r24
    5e42:	30 e0       	ldi	r19, 0x00	; 0
    5e44:	84 e5       	ldi	r24, 0x54	; 84
    5e46:	90 e0       	ldi	r25, 0x00	; 0
    5e48:	28 9f       	mul	r18, r24
    5e4a:	f0 01       	movw	r30, r0
    5e4c:	29 9f       	mul	r18, r25
    5e4e:	f0 0d       	add	r31, r0
    5e50:	38 9f       	mul	r19, r24
    5e52:	f0 0d       	add	r31, r0
    5e54:	11 24       	eor	r1, r1
    5e56:	e7 5d       	subi	r30, 0xD7	; 215
    5e58:	fd 4d       	sbci	r31, 0xDD	; 221
    5e5a:	97 81       	ldd	r25, Z+7	; 0x07
    5e5c:	91 30       	cpi	r25, 0x01	; 1
    5e5e:	09 f0       	breq	.+2      	; 0x5e62 <_tg_poll_active+0x28>
    5e60:	5a c0       	rjmp	.+180    	; 0x5f16 <_tg_poll_active+0xdc>
		return;
	}

	// special handling for file sources
	if (tg.source == XIO_DEV_PGM) {
    5e62:	80 91 2c 22 	lds	r24, 0x222C
    5e66:	84 30       	cpi	r24, 0x04	; 4
    5e68:	39 f4       	brne	.+14     	; 0x5e78 <_tg_poll_active+0x3e>
		if (tg.state == TG_STATE_READY_UNPROMPTED) {
    5e6a:	80 91 29 22 	lds	r24, 0x2229
    5e6e:	88 23       	and	r24, r24
    5e70:	09 f0       	breq	.+2      	; 0x5e74 <_tg_poll_active+0x3a>
    5e72:	51 c0       	rjmp	.+162    	; 0x5f16 <_tg_poll_active+0xdc>
			tg.state = TG_STATE_READY_PROMPTED; 	// issue "virtual prompt"
    5e74:	90 93 29 22 	sts	0x2229, r25
			return;									// not ready for next line
		}
	}

	// read input line or return if not a completed line
	if ((tg.status = xio_fget_ln(d, tg.dev[d].buf, tg.dev[d].len)) == TG_OK) {
    5e78:	85 e1       	ldi	r24, 0x15	; 21
    5e7a:	90 e0       	ldi	r25, 0x00	; 0
    5e7c:	28 9f       	mul	r18, r24
    5e7e:	e0 01       	movw	r28, r0
    5e80:	29 9f       	mul	r18, r25
    5e82:	d0 0d       	add	r29, r0
    5e84:	38 9f       	mul	r19, r24
    5e86:	d0 0d       	add	r29, r0
    5e88:	11 24       	eor	r1, r1
    5e8a:	cc 0f       	add	r28, r28
    5e8c:	dd 1f       	adc	r29, r29
    5e8e:	cc 0f       	add	r28, r28
    5e90:	dd 1f       	adc	r29, r29
    5e92:	cc 5c       	subi	r28, 0xCC	; 204
    5e94:	dd 4d       	sbci	r29, 0xDD	; 221
    5e96:	84 e5       	ldi	r24, 0x54	; 84
    5e98:	90 e0       	ldi	r25, 0x00	; 0
    5e9a:	28 9f       	mul	r18, r24
    5e9c:	f0 01       	movw	r30, r0
    5e9e:	29 9f       	mul	r18, r25
    5ea0:	f0 0d       	add	r31, r0
    5ea2:	38 9f       	mul	r19, r24
    5ea4:	f0 0d       	add	r31, r0
    5ea6:	11 24       	eor	r1, r1
    5ea8:	e7 5d       	subi	r30, 0xD7	; 215
    5eaa:	fd 4d       	sbci	r31, 0xDD	; 221
    5eac:	84 2f       	mov	r24, r20
    5eae:	be 01       	movw	r22, r28
    5eb0:	40 85       	ldd	r20, Z+8	; 0x08
    5eb2:	0e 94 77 26 	call	0x4cee	; 0x4cee <xio_fget_ln>
    5eb6:	80 93 2a 22 	sts	0x222A, r24
    5eba:	88 23       	and	r24, r24
    5ebc:	29 f4       	brne	.+10     	; 0x5ec8 <_tg_poll_active+0x8e>
		tg.status = tg_parser(tg.dev[d].buf);	// dispatch to parser
    5ebe:	ce 01       	movw	r24, r28
    5ec0:	0e 94 cc 2e 	call	0x5d98	; 0x5d98 <tg_parser>
    5ec4:	80 93 2a 22 	sts	0x222A, r24
	}
	switch (tg.status) {
    5ec8:	80 91 2a 22 	lds	r24, 0x222A
    5ecc:	82 30       	cpi	r24, 0x02	; 2
    5ece:	61 f0       	breq	.+24     	; 0x5ee8 <_tg_poll_active+0xae>
    5ed0:	83 30       	cpi	r24, 0x03	; 3
    5ed2:	28 f4       	brcc	.+10     	; 0x5ede <_tg_poll_active+0xa4>
    5ed4:	88 23       	and	r24, r24
    5ed6:	e9 f0       	breq	.+58     	; 0x5f12 <_tg_poll_active+0xd8>
    5ed8:	81 30       	cpi	r24, 0x01	; 1
    5eda:	d9 f4       	brne	.+54     	; 0x5f12 <_tg_poll_active+0xd8>
    5edc:	1c c0       	rjmp	.+56     	; 0x5f16 <_tg_poll_active+0xdc>
    5ede:	83 30       	cpi	r24, 0x03	; 3
    5ee0:	31 f0       	breq	.+12     	; 0x5eee <_tg_poll_active+0xb4>
    5ee2:	84 30       	cpi	r24, 0x04	; 4
    5ee4:	b1 f4       	brne	.+44     	; 0x5f12 <_tg_poll_active+0xd8>
    5ee6:	05 c0       	rjmp	.+10     	; 0x5ef2 <_tg_poll_active+0xb8>
		case TG_NOOP: {
			break;
		}

		case TG_CONTINUE: { 						// returned without a new line
			tg.state = TG_STATE_READING_COMMAND; 
    5ee8:	80 93 29 22 	sts	0x2229, r24
    5eec:	14 c0       	rjmp	.+40     	; 0x5f16 <_tg_poll_active+0xdc>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5eee:	10 92 2b 22 	sts	0x222B, r1
//			tg.state = TG_STATE_READY_UNPROMPTED;	// left commented for clarity
//			break;
		}
					  	
		case TG_EOF: {								// file devices only
			printf_P(PSTR("End of command file\n"));
    5ef2:	0f 92       	push	r0
    5ef4:	0f 92       	push	r0
    5ef6:	87 e3       	ldi	r24, 0x37	; 55
    5ef8:	9b e1       	ldi	r25, 0x1B	; 27
    5efa:	ed b7       	in	r30, 0x3d	; 61
    5efc:	fe b7       	in	r31, 0x3e	; 62
    5efe:	81 83       	std	Z+1, r24	; 0x01
    5f00:	92 83       	std	Z+2, r25	; 0x02
    5f02:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
			_tg_set_source(tg.source_default);		// reset to default src
    5f06:	0f 90       	pop	r0
    5f08:	0f 90       	pop	r0
    5f0a:	80 91 2d 22 	lds	r24, 0x222D
    5f0e:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <_tg_set_source>
//			tg.state = TG_STATE_READY_UNPROMPTED;	// left commented for clarity
//			break;
		}
		default: {
			tg.state = TG_STATE_READY_UNPROMPTED;	// traps various error returns
    5f12:	10 92 29 22 	sts	0x2229, r1
		}
	}
}
    5f16:	df 91       	pop	r29
    5f18:	cf 91       	pop	r28
    5f1a:	08 95       	ret

00005f1c <_tg_poll_signal>:
 *	If a signal is received it's dispatched from the low-level line reader
 *	Any line that's read is ignored (tossed)
 */

static void _tg_poll_signal(uint8_t d)
{
    5f1c:	48 2f       	mov	r20, r24
	if (tg.dev[d].state != TG_SRC_SIGNAL) {			// sanity check
    5f1e:	28 2f       	mov	r18, r24
    5f20:	30 e0       	ldi	r19, 0x00	; 0
    5f22:	84 e5       	ldi	r24, 0x54	; 84
    5f24:	90 e0       	ldi	r25, 0x00	; 0
    5f26:	28 9f       	mul	r18, r24
    5f28:	f0 01       	movw	r30, r0
    5f2a:	29 9f       	mul	r18, r25
    5f2c:	f0 0d       	add	r31, r0
    5f2e:	38 9f       	mul	r19, r24
    5f30:	f0 0d       	add	r31, r0
    5f32:	11 24       	eor	r1, r1
    5f34:	e7 5d       	subi	r30, 0xD7	; 215
    5f36:	fd 4d       	sbci	r31, 0xDD	; 221
    5f38:	87 81       	ldd	r24, Z+7	; 0x07
    5f3a:	82 30       	cpi	r24, 0x02	; 2
    5f3c:	a9 f4       	brne	.+42     	; 0x5f68 <_tg_poll_signal+0x4c>
		return;
	}
	tg.status = xio_fget_ln(d, tg.dev[d].buf, tg.dev[d].len);
    5f3e:	85 e1       	ldi	r24, 0x15	; 21
    5f40:	90 e0       	ldi	r25, 0x00	; 0
    5f42:	28 9f       	mul	r18, r24
    5f44:	b0 01       	movw	r22, r0
    5f46:	29 9f       	mul	r18, r25
    5f48:	70 0d       	add	r23, r0
    5f4a:	38 9f       	mul	r19, r24
    5f4c:	70 0d       	add	r23, r0
    5f4e:	11 24       	eor	r1, r1
    5f50:	66 0f       	add	r22, r22
    5f52:	77 1f       	adc	r23, r23
    5f54:	66 0f       	add	r22, r22
    5f56:	77 1f       	adc	r23, r23
    5f58:	6c 5c       	subi	r22, 0xCC	; 204
    5f5a:	7d 4d       	sbci	r23, 0xDD	; 221
    5f5c:	84 2f       	mov	r24, r20
    5f5e:	40 85       	ldd	r20, Z+8	; 0x08
    5f60:	0e 94 77 26 	call	0x4cee	; 0x4cee <xio_fget_ln>
    5f64:	80 93 2a 22 	sts	0x222A, r24
    5f68:	08 95       	ret

00005f6a <tg_controller>:
 *	more to the point - a hack. If the flow of control gets much more complicated 
 *	it will make sense to replace this section with an event driven dispatcher.
 */

void tg_controller()
{
    5f6a:	cf 93       	push	r28
    5f6c:	df 93       	push	r29
//	uint8_t i = 1;

	_tg_prompt();		// Send a prompt - but only if controller is ready for input
    5f6e:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <_tg_prompt>

	if ((tg.status = mc_line_continuation()) == TG_OK) { // Run the line generator 
    5f72:	0e 94 17 1b 	call	0x362e	; 0x362e <mc_line_continuation>
    5f76:	80 93 2a 22 	sts	0x222A, r24
    5f7a:	88 23       	and	r24, r24
    5f7c:	11 f4       	brne	.+4      	; 0x5f82 <tg_controller+0x18>
		tg.state = TG_STATE_READY_UNPROMPTED;
    5f7e:	10 92 29 22 	sts	0x2229, r1
	}

	if ((tg.status = mc_arc_continuation()) == TG_OK) {	 // Run the arc generator 
    5f82:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <mc_arc_continuation>
    5f86:	80 93 2a 22 	sts	0x222A, r24
    5f8a:	88 23       	and	r24, r24
    5f8c:	11 f4       	brne	.+4      	; 0x5f92 <tg_controller+0x28>
		tg.state = TG_STATE_READY_UNPROMPTED; 
    5f8e:	10 92 29 22 	sts	0x2229, r1
	}

	for (tg.i=1; tg.i < XIO_DEV_MAX; tg.i++) {	// Scan all input devices 
    5f92:	81 e0       	ldi	r24, 0x01	; 1
    5f94:	80 93 2f 22 	sts	0x222F, r24
		tg.dev[tg.i].poll_func(tg.i);			//   ...(except /dev/null)
    5f98:	ca e2       	ldi	r28, 0x2A	; 42
    5f9a:	d0 e0       	ldi	r29, 0x00	; 0
    5f9c:	17 c0       	rjmp	.+46     	; 0x5fcc <tg_controller+0x62>
    5f9e:	82 2f       	mov	r24, r18
    5fa0:	90 e0       	ldi	r25, 0x00	; 0
    5fa2:	8c 9f       	mul	r24, r28
    5fa4:	f0 01       	movw	r30, r0
    5fa6:	8d 9f       	mul	r24, r29
    5fa8:	f0 0d       	add	r31, r0
    5faa:	9c 9f       	mul	r25, r28
    5fac:	f0 0d       	add	r31, r0
    5fae:	11 24       	eor	r1, r1
    5fb0:	ee 0f       	add	r30, r30
    5fb2:	ff 1f       	adc	r31, r31
    5fb4:	e5 5d       	subi	r30, 0xD5	; 213
    5fb6:	fd 4d       	sbci	r31, 0xDD	; 221
    5fb8:	07 80       	ldd	r0, Z+7	; 0x07
    5fba:	f0 85       	ldd	r31, Z+8	; 0x08
    5fbc:	e0 2d       	mov	r30, r0
    5fbe:	82 2f       	mov	r24, r18
    5fc0:	19 95       	eicall

	if ((tg.status = mc_arc_continuation()) == TG_OK) {	 // Run the arc generator 
		tg.state = TG_STATE_READY_UNPROMPTED; 
	}

	for (tg.i=1; tg.i < XIO_DEV_MAX; tg.i++) {	// Scan all input devices 
    5fc2:	80 91 2f 22 	lds	r24, 0x222F
    5fc6:	8f 5f       	subi	r24, 0xFF	; 255
    5fc8:	80 93 2f 22 	sts	0x222F, r24
    5fcc:	20 91 2f 22 	lds	r18, 0x222F
    5fd0:	25 30       	cpi	r18, 0x05	; 5
    5fd2:	28 f3       	brcs	.-54     	; 0x5f9e <tg_controller+0x34>
		tg.dev[tg.i].poll_func(tg.i);			//   ...(except /dev/null)
	}
}
    5fd4:	df 91       	pop	r29
    5fd6:	cf 91       	pop	r28
    5fd8:	08 95       	ret

00005fda <tg_init>:
 * tg_init()
 */

void tg_init() 
{
	xio_control(XIO_DEV_USB, XIO_SIG_FUNC, (int)&tg_signal); // bind sig handler
    5fda:	81 e0       	ldi	r24, 0x01	; 1
    5fdc:	60 e1       	ldi	r22, 0x10	; 16
    5fde:	70 e0       	ldi	r23, 0x00	; 0
    5fe0:	42 eb       	ldi	r20, 0xB2	; 178
    5fe2:	5e e2       	ldi	r21, 0x2E	; 46
    5fe4:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <xio_control>
//	xio_control(XIO_DEV_AUX, XIO_SIG_FUNC, (int)&tg_signal);
//	xio_control(XIO_DEV_RS485, XIO_SIG_FUNC, (int)&tg_signal);

	tg.source_default = XIO_DEV_USB; 
    5fe8:	81 e0       	ldi	r24, 0x01	; 1
    5fea:	80 93 2d 22 	sts	0x222D, r24
	tg.state = TG_STATE_READY_UNPROMPTED;
    5fee:	10 92 29 22 	sts	0x2229, r1
	_tg_set_source(tg.source_default);		// set initial active source
    5ff2:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <_tg_set_source>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5ff6:	10 92 2b 22 	sts	0x222B, r1
	tg.source_default = XIO_DEV_USB; 
	tg.state = TG_STATE_READY_UNPROMPTED;
	_tg_set_source(tg.source_default);		// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode

	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    5ffa:	00 d0       	rcall	.+0      	; 0x5ffc <tg_init+0x22>
    5ffc:	0f 92       	push	r0
    5ffe:	86 e5       	ldi	r24, 0x56	; 86
    6000:	9b e1       	ldi	r25, 0x1B	; 27
    6002:	ed b7       	in	r30, 0x3d	; 61
    6004:	fe b7       	in	r31, 0x3e	; 62
    6006:	81 83       	std	Z+1, r24	; 0x01
    6008:	92 83       	std	Z+2, r25	; 0x02
    600a:	8c e4       	ldi	r24, 0x4C	; 76
    600c:	9b e1       	ldi	r25, 0x1B	; 27
    600e:	83 83       	std	Z+3, r24	; 0x03
    6010:	94 83       	std	Z+4, r25	; 0x04
    6012:	0e 94 57 43 	call	0x86ae	; 0x86ae <printf_P>
    6016:	0f 90       	pop	r0
    6018:	0f 90       	pop	r0
    601a:	0f 90       	pop	r0
    601c:	0f 90       	pop	r0
}
    601e:	08 95       	ret

00006020 <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    6020:	08 95       	ret

00006022 <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    6022:	80 e0       	ldi	r24, 0x00	; 0
    6024:	90 e0       	ldi	r25, 0x00	; 0
    6026:	08 95       	ret

00006028 <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    6028:	10 92 d4 23 	sts	0x23D4, r1
	mv.move_buffer_tail = 0;
    602c:	10 92 d5 23 	sts	0x23D5, r1
}
    6030:	08 95       	ret

00006032 <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    6032:	90 91 d4 23 	lds	r25, 0x23D4
    6036:	80 91 d5 23 	lds	r24, 0x23D5
    603a:	98 17       	cp	r25, r24
    603c:	19 f4       	brne	.+6      	; 0x6044 <mv_dequeue_move_buffer+0x12>
    603e:	20 e0       	ldi	r18, 0x00	; 0
    6040:	30 e0       	ldi	r19, 0x00	; 0
    6042:	17 c0       	rjmp	.+46     	; 0x6072 <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    6044:	90 91 d5 23 	lds	r25, 0x23D5
    6048:	8b e1       	ldi	r24, 0x1B	; 27
    604a:	98 9f       	mul	r25, r24
    604c:	90 01       	movw	r18, r0
    604e:	11 24       	eor	r1, r1
    6050:	28 52       	subi	r18, 0x28	; 40
    6052:	3c 4d       	sbci	r19, 0xDC	; 220
    6054:	20 93 d6 23 	sts	0x23D6, r18
    6058:	30 93 d7 23 	sts	0x23D7, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    605c:	80 91 d5 23 	lds	r24, 0x23D5
    6060:	8f 5f       	subi	r24, 0xFF	; 255
    6062:	80 93 d5 23 	sts	0x23D5, r24
    6066:	80 91 d5 23 	lds	r24, 0x23D5
    606a:	84 30       	cpi	r24, 0x04	; 4
    606c:	10 f0       	brcs	.+4      	; 0x6072 <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    606e:	10 92 d5 23 	sts	0x23D5, r1
	}
	return (mv.p); 
}
    6072:	c9 01       	movw	r24, r18
    6074:	08 95       	ret

00006076 <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    6076:	90 91 d4 23 	lds	r25, 0x23D4
    607a:	9f 5f       	subi	r25, 0xFF	; 255
    607c:	94 30       	cpi	r25, 0x04	; 4
    607e:	08 f0       	brcs	.+2      	; 0x6082 <mv_test_move_buffer_full+0xc>
    6080:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    6082:	80 91 d5 23 	lds	r24, 0x23D5
    6086:	20 e0       	ldi	r18, 0x00	; 0
    6088:	89 17       	cp	r24, r25
    608a:	09 f4       	brne	.+2      	; 0x608e <mv_test_move_buffer_full+0x18>
    608c:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    608e:	82 2f       	mov	r24, r18
    6090:	08 95       	ret

00006092 <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    6092:	0b c0       	rjmp	.+22     	; 0x60aa <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    6094:	80 91 48 00 	lds	r24, 0x0048
    6098:	81 60       	ori	r24, 0x01	; 1
    609a:	80 93 48 00 	sts	0x0048, r24
    609e:	88 95       	sleep
    60a0:	80 91 48 00 	lds	r24, 0x0048
    60a4:	8e 7f       	andi	r24, 0xFE	; 254
    60a6:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    60aa:	90 91 d5 23 	lds	r25, 0x23D5
    60ae:	80 91 d4 23 	lds	r24, 0x23D4
    60b2:	98 17       	cp	r25, r24
    60b4:	79 f7       	brne	.-34     	; 0x6094 <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    60b6:	08 95       	ret

000060b8 <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    60b8:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    60ba:	80 91 d4 23 	lds	r24, 0x23D4
    60be:	80 93 d5 23 	sts	0x23D5, r24
	mv.p = NULL;
    60c2:	10 92 d6 23 	sts	0x23D6, r1
    60c6:	10 92 d7 23 	sts	0x23D7, r1
	sei();
    60ca:	78 94       	sei
}
    60cc:	08 95       	ret

000060ce <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    60ce:	2f 92       	push	r2
    60d0:	4f 92       	push	r4
    60d2:	5f 92       	push	r5
    60d4:	6f 92       	push	r6
    60d6:	7f 92       	push	r7
    60d8:	8f 92       	push	r8
    60da:	9f 92       	push	r9
    60dc:	af 92       	push	r10
    60de:	bf 92       	push	r11
    60e0:	cf 92       	push	r12
    60e2:	df 92       	push	r13
    60e4:	ef 92       	push	r14
    60e6:	ff 92       	push	r15
    60e8:	0f 93       	push	r16
    60ea:	1f 93       	push	r17
    60ec:	df 93       	push	r29
    60ee:	cf 93       	push	r28
    60f0:	cd b7       	in	r28, 0x3d	; 61
    60f2:	de b7       	in	r29, 0x3e	; 62
    60f4:	2e 97       	sbiw	r28, 0x0e	; 14
    60f6:	cd bf       	out	0x3d, r28	; 61
    60f8:	de bf       	out	0x3e, r29	; 62
    60fa:	3b 01       	movw	r6, r22
    60fc:	4c 01       	movw	r8, r24
					// Using 64 bits is expensive! The division goes from ~640 
					// cycles at 32 bits to ~3800 cycles using 64 bits
	uint32_t ticks_per_step; // temp variable

	// Bail on a zero length line (perhaps test for abs val < min line length)
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    60fe:	61 15       	cp	r22, r1
    6100:	71 05       	cpc	r23, r1
    6102:	81 05       	cpc	r24, r1
    6104:	91 05       	cpc	r25, r1
    6106:	61 f4       	brne	.+24     	; 0x6120 <mv_queue_move_buffer+0x52>
    6108:	21 15       	cp	r18, r1
    610a:	31 05       	cpc	r19, r1
    610c:	41 05       	cpc	r20, r1
    610e:	51 05       	cpc	r21, r1
    6110:	39 f4       	brne	.+14     	; 0x6120 <mv_queue_move_buffer+0x52>
    6112:	e1 14       	cp	r14, r1
    6114:	f1 04       	cpc	r15, r1
    6116:	01 05       	cpc	r16, r1
    6118:	11 05       	cpc	r17, r1
    611a:	11 f4       	brne	.+4      	; 0x6120 <mv_queue_move_buffer+0x52>
    611c:	89 e0       	ldi	r24, 0x09	; 9
    611e:	e2 c0       	rjmp	.+452    	; 0x62e4 <mv_queue_move_buffer+0x216>
		return (TG_ZERO_LENGTH_LINE);
	}

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    6120:	20 90 d4 23 	lds	r2, 0x23D4
    6124:	23 94       	inc	r2
    6126:	63 e0       	ldi	r22, 0x03	; 3
    6128:	62 15       	cp	r22, r2
    612a:	08 f4       	brcc	.+2      	; 0x612e <mv_queue_move_buffer+0x60>
    612c:	22 24       	eor	r2, r2
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    612e:	80 91 d5 23 	lds	r24, 0x23D5
    6132:	82 15       	cp	r24, r2
    6134:	11 f4       	brne	.+4      	; 0x613a <mv_queue_move_buffer+0x6c>
    6136:	86 e0       	ldi	r24, 0x06	; 6
    6138:	d5 c0       	rjmp	.+426    	; 0x62e4 <mv_queue_move_buffer+0x216>
		return (TG_BUFFER_FULL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    613a:	e0 91 d4 23 	lds	r30, 0x23D4
    613e:	8b e1       	ldi	r24, 0x1B	; 27
    6140:	e8 9f       	mul	r30, r24
    6142:	f0 01       	movw	r30, r0
    6144:	11 24       	eor	r1, r1
    6146:	e8 52       	subi	r30, 0x28	; 40
    6148:	fc 4d       	sbci	r31, 0xDC	; 220
    614a:	e0 93 d6 23 	sts	0x23D6, r30
    614e:	f0 93 d7 23 	sts	0x23D7, r31
	mv.p->a[X_AXIS].steps = steps_x;
    6152:	60 82       	st	Z, r6
    6154:	71 82       	std	Z+1, r7	; 0x01
    6156:	82 82       	std	Z+2, r8	; 0x02
    6158:	93 82       	std	Z+3, r9	; 0x03
	mv.p->a[Y_AXIS].steps = steps_y;
    615a:	21 87       	std	Z+9, r18	; 0x09
    615c:	32 87       	std	Z+10, r19	; 0x0a
    615e:	43 87       	std	Z+11, r20	; 0x0b
    6160:	54 87       	std	Z+12, r21	; 0x0c
	mv.p->a[Z_AXIS].steps = steps_z;
    6162:	e2 8a       	std	Z+18, r14	; 0x12
    6164:	f3 8a       	std	Z+19, r15	; 0x13
    6166:	04 8b       	std	Z+20, r16	; 0x14
    6168:	15 8b       	std	Z+21, r17	; 0x15

	ticks = microseconds * TICKS_PER_MICROSECOND;
    616a:	65 e0       	ldi	r22, 0x05	; 5
    616c:	aa 0c       	add	r10, r10
    616e:	bb 1c       	adc	r11, r11
    6170:	cc 1c       	adc	r12, r12
    6172:	dd 1c       	adc	r13, r13
    6174:	6a 95       	dec	r22
    6176:	d1 f7       	brne	.-12     	; 0x616c <mv_queue_move_buffer+0x9e>
    6178:	a6 01       	movw	r20, r12
    617a:	95 01       	movw	r18, r10
    617c:	60 e0       	ldi	r22, 0x00	; 0
    617e:	70 e0       	ldi	r23, 0x00	; 0
    6180:	80 e0       	ldi	r24, 0x00	; 0
    6182:	90 e0       	ldi	r25, 0x00	; 0
    6184:	ab 82       	std	Y+3, r10	; 0x03
    6186:	3c 83       	std	Y+4, r19	; 0x04
    6188:	4d 83       	std	Y+5, r20	; 0x05
    618a:	5e 83       	std	Y+6, r21	; 0x06
    618c:	6f 83       	std	Y+7, r22	; 0x07
    618e:	78 87       	std	Y+8, r23	; 0x08
    6190:	89 87       	std	Y+9, r24	; 0x09
    6192:	9a 87       	std	Y+10, r25	; 0x0a
    6194:	1d 86       	std	Y+13, r1	; 0x0d
    6196:	1e 86       	std	Y+14, r1	; 0x0e

	// load axis values
	for (i = X_AXIS; i <= Z_AXIS; i++) {

		if (mv.p->a[i].steps) { 				// skip axes with zero steps
    6198:	20 91 d6 23 	lds	r18, 0x23D6
    619c:	30 91 d7 23 	lds	r19, 0x23D7
    61a0:	ed 85       	ldd	r30, Y+13	; 0x0d
    61a2:	fe 85       	ldd	r31, Y+14	; 0x0e
    61a4:	53 e0       	ldi	r21, 0x03	; 3
    61a6:	ee 0f       	add	r30, r30
    61a8:	ff 1f       	adc	r31, r31
    61aa:	5a 95       	dec	r21
    61ac:	e1 f7       	brne	.-8      	; 0x61a6 <mv_queue_move_buffer+0xd8>
    61ae:	4d 85       	ldd	r20, Y+13	; 0x0d
    61b0:	5e 85       	ldd	r21, Y+14	; 0x0e
    61b2:	e4 0f       	add	r30, r20
    61b4:	f5 1f       	adc	r31, r21
    61b6:	e2 0f       	add	r30, r18
    61b8:	f3 1f       	adc	r31, r19
    61ba:	80 81       	ld	r24, Z
    61bc:	91 81       	ldd	r25, Z+1	; 0x01
    61be:	a2 81       	ldd	r26, Z+2	; 0x02
    61c0:	b3 81       	ldd	r27, Z+3	; 0x03
    61c2:	00 97       	sbiw	r24, 0x00	; 0
    61c4:	a1 05       	cpc	r26, r1
    61c6:	b1 05       	cpc	r27, r1
    61c8:	09 f4       	brne	.+2      	; 0x61cc <mv_queue_move_buffer+0xfe>
    61ca:	7f c0       	rjmp	.+254    	; 0x62ca <mv_queue_move_buffer+0x1fc>

			// set direction: (polarity is corrected during execute move)
			(mv.p->a[i].steps < 0) ? 
    61cc:	b7 ff       	sbrs	r27, 7
    61ce:	03 c0       	rjmp	.+6      	; 0x61d6 <mv_queue_move_buffer+0x108>
    61d0:	51 e0       	ldi	r21, 0x01	; 1
    61d2:	50 87       	std	Z+8, r21	; 0x08
    61d4:	01 c0       	rjmp	.+2      	; 0x61d8 <mv_queue_move_buffer+0x10a>
    61d6:	10 86       	std	Z+8, r1	; 0x08
			(mv.p->a[i].direction = 1): 		// CCW = 1 
			(mv.p->a[i].direction = 0);			// CW = 0

			// set steps to absolute value
			mv.p->a[i].steps = labs(mv.p->a[i].steps);
    61d8:	ed 85       	ldd	r30, Y+13	; 0x0d
    61da:	fe 85       	ldd	r31, Y+14	; 0x0e
    61dc:	43 e0       	ldi	r20, 0x03	; 3
    61de:	ee 0f       	add	r30, r30
    61e0:	ff 1f       	adc	r31, r31
    61e2:	4a 95       	dec	r20
    61e4:	e1 f7       	brne	.-8      	; 0x61de <mv_queue_move_buffer+0x110>
    61e6:	6d 85       	ldd	r22, Y+13	; 0x0d
    61e8:	7e 85       	ldd	r23, Y+14	; 0x0e
    61ea:	e6 0f       	add	r30, r22
    61ec:	f7 1f       	adc	r31, r23
    61ee:	e2 0f       	add	r30, r18
    61f0:	f3 1f       	adc	r31, r19
    61f2:	80 81       	ld	r24, Z
    61f4:	91 81       	ldd	r25, Z+1	; 0x01
    61f6:	a2 81       	ldd	r26, Z+2	; 0x02
    61f8:	b3 81       	ldd	r27, Z+3	; 0x03
    61fa:	b7 ff       	sbrs	r27, 7
    61fc:	07 c0       	rjmp	.+14     	; 0x620c <mv_queue_move_buffer+0x13e>
    61fe:	b0 95       	com	r27
    6200:	a0 95       	com	r26
    6202:	90 95       	com	r25
    6204:	81 95       	neg	r24
    6206:	9f 4f       	sbci	r25, 0xFF	; 255
    6208:	af 4f       	sbci	r26, 0xFF	; 255
    620a:	bf 4f       	sbci	r27, 0xFF	; 255
    620c:	80 83       	st	Z, r24
    620e:	91 83       	std	Z+1, r25	; 0x01
    6210:	a2 83       	std	Z+2, r26	; 0x02
    6212:	b3 83       	std	Z+3, r27	; 0x03

			// Normalize ticks_per_step by right shifting until the MSword = 0
			// Accumulate LSBs shifted out of ticks_per_step into postscale
			mv.p->a[i].postscale = 1;
    6214:	80 91 d6 23 	lds	r24, 0x23D6
    6218:	90 91 d7 23 	lds	r25, 0x23D7
    621c:	89 83       	std	Y+1, r24	; 0x01
    621e:	9a 83       	std	Y+2, r25	; 0x02
    6220:	4d 84       	ldd	r4, Y+13	; 0x0d
    6222:	5e 84       	ldd	r5, Y+14	; 0x0e
    6224:	23 e0       	ldi	r18, 0x03	; 3
    6226:	44 0c       	add	r4, r4
    6228:	55 1c       	adc	r5, r5
    622a:	2a 95       	dec	r18
    622c:	e1 f7       	brne	.-8      	; 0x6226 <mv_queue_move_buffer+0x158>
    622e:	ed 85       	ldd	r30, Y+13	; 0x0d
    6230:	fe 85       	ldd	r31, Y+14	; 0x0e
    6232:	e4 0d       	add	r30, r4
    6234:	f5 1d       	adc	r31, r5
    6236:	e8 0f       	add	r30, r24
    6238:	f9 1f       	adc	r31, r25
    623a:	df 01       	movw	r26, r30
    623c:	16 96       	adiw	r26, 0x06	; 6
    623e:	ab 87       	std	Y+11, r26	; 0x0b
    6240:	bc 87       	std	Y+12, r27	; 0x0c
    6242:	21 e0       	ldi	r18, 0x01	; 1
    6244:	30 e0       	ldi	r19, 0x00	; 0
    6246:	26 83       	std	Z+6, r18	; 0x06
    6248:	37 83       	std	Z+7, r19	; 0x07
			ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
    624a:	e0 80       	ld	r14, Z
    624c:	f1 80       	ldd	r15, Z+1	; 0x01
    624e:	02 81       	ldd	r16, Z+2	; 0x02
    6250:	13 81       	ldd	r17, Z+3	; 0x03
    6252:	37 01       	movw	r6, r14
    6254:	48 01       	movw	r8, r16
    6256:	99 0c       	add	r9, r9
    6258:	66 08       	sbc	r6, r6
    625a:	76 2c       	mov	r7, r6
    625c:	43 01       	movw	r8, r6
    625e:	2b 81       	ldd	r18, Y+3	; 0x03
    6260:	3c 81       	ldd	r19, Y+4	; 0x04
    6262:	4d 81       	ldd	r20, Y+5	; 0x05
    6264:	5e 81       	ldd	r21, Y+6	; 0x06
    6266:	6f 81       	ldd	r22, Y+7	; 0x07
    6268:	78 85       	ldd	r23, Y+8	; 0x08
    626a:	89 85       	ldd	r24, Y+9	; 0x09
    626c:	9a 85       	ldd	r25, Y+10	; 0x0a
    626e:	57 01       	movw	r10, r14
    6270:	68 01       	movw	r12, r16
    6272:	e6 2c       	mov	r14, r6
    6274:	f6 2c       	mov	r15, r6
    6276:	06 2d       	mov	r16, r6
    6278:	16 2d       	mov	r17, r6
    627a:	0e 94 87 31 	call	0x630e	; 0x630e <__udivdi3>
    627e:	c9 01       	movw	r24, r18
    6280:	da 01       	movw	r26, r20
    6282:	9c 01       	movw	r18, r24
    6284:	ad 01       	movw	r20, r26
    6286:	b2 01       	movw	r22, r4
			while (ticks_per_step & 0xFFFF0000) {
				ticks_per_step >>= 1;
				mv.p->a[i].postscale <<= 1;
    6288:	eb 85       	ldd	r30, Y+11	; 0x0b
    628a:	fc 85       	ldd	r31, Y+12	; 0x0c
    628c:	0a c0       	rjmp	.+20     	; 0x62a2 <mv_queue_move_buffer+0x1d4>
			// Normalize ticks_per_step by right shifting until the MSword = 0
			// Accumulate LSBs shifted out of ticks_per_step into postscale
			mv.p->a[i].postscale = 1;
			ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
			while (ticks_per_step & 0xFFFF0000) {
				ticks_per_step >>= 1;
    628e:	56 95       	lsr	r21
    6290:	47 95       	ror	r20
    6292:	37 95       	ror	r19
    6294:	27 95       	ror	r18
				mv.p->a[i].postscale <<= 1;
    6296:	80 81       	ld	r24, Z
    6298:	91 81       	ldd	r25, Z+1	; 0x01
    629a:	88 0f       	add	r24, r24
    629c:	99 1f       	adc	r25, r25
    629e:	80 83       	st	Z, r24
    62a0:	91 83       	std	Z+1, r25	; 0x01

			// Normalize ticks_per_step by right shifting until the MSword = 0
			// Accumulate LSBs shifted out of ticks_per_step into postscale
			mv.p->a[i].postscale = 1;
			ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
			while (ticks_per_step & 0xFFFF0000) {
    62a2:	da 01       	movw	r26, r20
    62a4:	c9 01       	movw	r24, r18
    62a6:	80 70       	andi	r24, 0x00	; 0
    62a8:	90 70       	andi	r25, 0x00	; 0
    62aa:	00 97       	sbiw	r24, 0x00	; 0
    62ac:	a1 05       	cpc	r26, r1
    62ae:	b1 05       	cpc	r27, r1
    62b0:	71 f7       	brne	.-36     	; 0x628e <mv_queue_move_buffer+0x1c0>
				ticks_per_step >>= 1;
				mv.p->a[i].postscale <<= 1;
			}
			mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    62b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    62b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    62b6:	68 0f       	add	r22, r24
    62b8:	79 1f       	adc	r23, r25
    62ba:	a9 81       	ldd	r26, Y+1	; 0x01
    62bc:	ba 81       	ldd	r27, Y+2	; 0x02
    62be:	a6 0f       	add	r26, r22
    62c0:	b7 1f       	adc	r27, r23
    62c2:	14 96       	adiw	r26, 0x04	; 4
    62c4:	2d 93       	st	X+, r18
    62c6:	3c 93       	st	X, r19
    62c8:	15 97       	sbiw	r26, 0x05	; 5
    62ca:	ed 85       	ldd	r30, Y+13	; 0x0d
    62cc:	fe 85       	ldd	r31, Y+14	; 0x0e
    62ce:	31 96       	adiw	r30, 0x01	; 1
    62d0:	ed 87       	std	Y+13, r30	; 0x0d
    62d2:	fe 87       	std	Y+14, r31	; 0x0e
	mv.p->a[Z_AXIS].steps = steps_z;

	ticks = microseconds * TICKS_PER_MICROSECOND;

	// load axis values
	for (i = X_AXIS; i <= Z_AXIS; i++) {
    62d4:	33 97       	sbiw	r30, 0x03	; 3
    62d6:	09 f0       	breq	.+2      	; 0x62da <mv_queue_move_buffer+0x20c>
    62d8:	5f cf       	rjmp	.-322    	; 0x6198 <mv_queue_move_buffer+0xca>
				mv.p->a[i].postscale <<= 1;
			}
			mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		}
	}
	mv.move_buffer_head = next_buffer_head;
    62da:	20 92 d4 23 	sts	0x23D4, r2
	st_execute_move();
    62de:	0e 94 08 24 	call	0x4810	; 0x4810 <st_execute_move>
    62e2:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    62e4:	2e 96       	adiw	r28, 0x0e	; 14
    62e6:	cd bf       	out	0x3d, r28	; 61
    62e8:	de bf       	out	0x3e, r29	; 62
    62ea:	cf 91       	pop	r28
    62ec:	df 91       	pop	r29
    62ee:	1f 91       	pop	r17
    62f0:	0f 91       	pop	r16
    62f2:	ff 90       	pop	r15
    62f4:	ef 90       	pop	r14
    62f6:	df 90       	pop	r13
    62f8:	cf 90       	pop	r12
    62fa:	bf 90       	pop	r11
    62fc:	af 90       	pop	r10
    62fe:	9f 90       	pop	r9
    6300:	8f 90       	pop	r8
    6302:	7f 90       	pop	r7
    6304:	6f 90       	pop	r6
    6306:	5f 90       	pop	r5
    6308:	4f 90       	pop	r4
    630a:	2f 90       	pop	r2
    630c:	08 95       	ret

0000630e <__udivdi3>:
    630e:	ae e5       	ldi	r26, 0x5E	; 94
    6310:	b0 e0       	ldi	r27, 0x00	; 0
    6312:	ed e8       	ldi	r30, 0x8D	; 141
    6314:	f1 e3       	ldi	r31, 0x31	; 49
    6316:	0c 94 1a 40 	jmp	0x8034	; 0x8034 <__prologue_saves__>
    631a:	a8 e0       	ldi	r26, 0x08	; 8
    631c:	4e 01       	movw	r8, r28
    631e:	08 94       	sec
    6320:	81 1c       	adc	r8, r1
    6322:	91 1c       	adc	r9, r1
    6324:	f4 01       	movw	r30, r8
    6326:	6a 2e       	mov	r6, r26
    6328:	11 92       	st	Z+, r1
    632a:	6a 94       	dec	r6
    632c:	e9 f7       	brne	.-6      	; 0x6328 <__udivdi3+0x1a>
    632e:	29 83       	std	Y+1, r18	; 0x01
    6330:	3a 83       	std	Y+2, r19	; 0x02
    6332:	4b 83       	std	Y+3, r20	; 0x03
    6334:	5c 83       	std	Y+4, r21	; 0x04
    6336:	6d 83       	std	Y+5, r22	; 0x05
    6338:	7e 83       	std	Y+6, r23	; 0x06
    633a:	8f 83       	std	Y+7, r24	; 0x07
    633c:	98 87       	std	Y+8, r25	; 0x08
    633e:	ce 01       	movw	r24, r28
    6340:	09 96       	adiw	r24, 0x09	; 9
    6342:	fc 01       	movw	r30, r24
    6344:	11 92       	st	Z+, r1
    6346:	aa 95       	dec	r26
    6348:	e9 f7       	brne	.-6      	; 0x6344 <__udivdi3+0x36>
    634a:	a9 86       	std	Y+9, r10	; 0x09
    634c:	ba 86       	std	Y+10, r11	; 0x0a
    634e:	cb 86       	std	Y+11, r12	; 0x0b
    6350:	dc 86       	std	Y+12, r13	; 0x0c
    6352:	ed 86       	std	Y+13, r14	; 0x0d
    6354:	fe 86       	std	Y+14, r15	; 0x0e
    6356:	0f 87       	std	Y+15, r16	; 0x0f
    6358:	18 8b       	std	Y+16, r17	; 0x10
    635a:	29 84       	ldd	r2, Y+9	; 0x09
    635c:	3a 84       	ldd	r3, Y+10	; 0x0a
    635e:	4b 84       	ldd	r4, Y+11	; 0x0b
    6360:	5c 84       	ldd	r5, Y+12	; 0x0c
    6362:	ed 84       	ldd	r14, Y+13	; 0x0d
    6364:	fe 84       	ldd	r15, Y+14	; 0x0e
    6366:	0f 85       	ldd	r16, Y+15	; 0x0f
    6368:	18 89       	ldd	r17, Y+16	; 0x10
    636a:	69 80       	ldd	r6, Y+1	; 0x01
    636c:	7a 80       	ldd	r7, Y+2	; 0x02
    636e:	8b 80       	ldd	r8, Y+3	; 0x03
    6370:	9c 80       	ldd	r9, Y+4	; 0x04
    6372:	6d a6       	std	Y+45, r6	; 0x2d
    6374:	7e a6       	std	Y+46, r7	; 0x2e
    6376:	8f a6       	std	Y+47, r8	; 0x2f
    6378:	98 aa       	std	Y+48, r9	; 0x30
    637a:	6d 80       	ldd	r6, Y+5	; 0x05
    637c:	7e 80       	ldd	r7, Y+6	; 0x06
    637e:	8f 80       	ldd	r8, Y+7	; 0x07
    6380:	98 84       	ldd	r9, Y+8	; 0x08
    6382:	e1 14       	cp	r14, r1
    6384:	f1 04       	cpc	r15, r1
    6386:	01 05       	cpc	r16, r1
    6388:	11 05       	cpc	r17, r1
    638a:	09 f0       	breq	.+2      	; 0x638e <__udivdi3+0x80>
    638c:	b3 c3       	rjmp	.+1894   	; 0x6af4 <__udivdi3+0x7e6>
    638e:	62 14       	cp	r6, r2
    6390:	73 04       	cpc	r7, r3
    6392:	84 04       	cpc	r8, r4
    6394:	95 04       	cpc	r9, r5
    6396:	08 f0       	brcs	.+2      	; 0x639a <__udivdi3+0x8c>
    6398:	3d c1       	rjmp	.+634    	; 0x6614 <__udivdi3+0x306>
    639a:	00 e0       	ldi	r16, 0x00	; 0
    639c:	20 16       	cp	r2, r16
    639e:	00 e0       	ldi	r16, 0x00	; 0
    63a0:	30 06       	cpc	r3, r16
    63a2:	01 e0       	ldi	r16, 0x01	; 1
    63a4:	40 06       	cpc	r4, r16
    63a6:	00 e0       	ldi	r16, 0x00	; 0
    63a8:	50 06       	cpc	r5, r16
    63aa:	88 f4       	brcc	.+34     	; 0x63ce <__udivdi3+0xc0>
    63ac:	1f ef       	ldi	r17, 0xFF	; 255
    63ae:	21 16       	cp	r2, r17
    63b0:	31 04       	cpc	r3, r1
    63b2:	41 04       	cpc	r4, r1
    63b4:	51 04       	cpc	r5, r1
    63b6:	39 f0       	breq	.+14     	; 0x63c6 <__udivdi3+0xb8>
    63b8:	30 f0       	brcs	.+12     	; 0x63c6 <__udivdi3+0xb8>
    63ba:	48 e0       	ldi	r20, 0x08	; 8
    63bc:	e4 2e       	mov	r14, r20
    63be:	f1 2c       	mov	r15, r1
    63c0:	01 2d       	mov	r16, r1
    63c2:	11 2d       	mov	r17, r1
    63c4:	18 c0       	rjmp	.+48     	; 0x63f6 <__udivdi3+0xe8>
    63c6:	ee 24       	eor	r14, r14
    63c8:	ff 24       	eor	r15, r15
    63ca:	87 01       	movw	r16, r14
    63cc:	14 c0       	rjmp	.+40     	; 0x63f6 <__udivdi3+0xe8>
    63ce:	20 e0       	ldi	r18, 0x00	; 0
    63d0:	22 16       	cp	r2, r18
    63d2:	20 e0       	ldi	r18, 0x00	; 0
    63d4:	32 06       	cpc	r3, r18
    63d6:	20 e0       	ldi	r18, 0x00	; 0
    63d8:	42 06       	cpc	r4, r18
    63da:	21 e0       	ldi	r18, 0x01	; 1
    63dc:	52 06       	cpc	r5, r18
    63de:	30 f0       	brcs	.+12     	; 0x63ec <__udivdi3+0xde>
    63e0:	38 e1       	ldi	r19, 0x18	; 24
    63e2:	e3 2e       	mov	r14, r19
    63e4:	f1 2c       	mov	r15, r1
    63e6:	01 2d       	mov	r16, r1
    63e8:	11 2d       	mov	r17, r1
    63ea:	05 c0       	rjmp	.+10     	; 0x63f6 <__udivdi3+0xe8>
    63ec:	20 e1       	ldi	r18, 0x10	; 16
    63ee:	e2 2e       	mov	r14, r18
    63f0:	f1 2c       	mov	r15, r1
    63f2:	01 2d       	mov	r16, r1
    63f4:	11 2d       	mov	r17, r1
    63f6:	d2 01       	movw	r26, r4
    63f8:	c1 01       	movw	r24, r2
    63fa:	0e 2c       	mov	r0, r14
    63fc:	04 c0       	rjmp	.+8      	; 0x6406 <__udivdi3+0xf8>
    63fe:	b6 95       	lsr	r27
    6400:	a7 95       	ror	r26
    6402:	97 95       	ror	r25
    6404:	87 95       	ror	r24
    6406:	0a 94       	dec	r0
    6408:	d2 f7       	brpl	.-12     	; 0x63fe <__udivdi3+0xf0>
    640a:	84 5e       	subi	r24, 0xE4	; 228
    640c:	9f 4d       	sbci	r25, 0xDF	; 223
    640e:	dc 01       	movw	r26, r24
    6410:	2c 91       	ld	r18, X
    6412:	80 e2       	ldi	r24, 0x20	; 32
    6414:	90 e0       	ldi	r25, 0x00	; 0
    6416:	a0 e0       	ldi	r26, 0x00	; 0
    6418:	b0 e0       	ldi	r27, 0x00	; 0
    641a:	8e 19       	sub	r24, r14
    641c:	9f 09       	sbc	r25, r15
    641e:	a0 0b       	sbc	r26, r16
    6420:	b1 0b       	sbc	r27, r17
    6422:	7c 01       	movw	r14, r24
    6424:	8d 01       	movw	r16, r26
    6426:	e2 1a       	sub	r14, r18
    6428:	f1 08       	sbc	r15, r1
    642a:	01 09       	sbc	r16, r1
    642c:	11 09       	sbc	r17, r1
    642e:	e1 14       	cp	r14, r1
    6430:	f1 04       	cpc	r15, r1
    6432:	01 05       	cpc	r16, r1
    6434:	11 05       	cpc	r17, r1
    6436:	a1 f1       	breq	.+104    	; 0x64a0 <__udivdi3+0x192>
    6438:	0e 2c       	mov	r0, r14
    643a:	04 c0       	rjmp	.+8      	; 0x6444 <__udivdi3+0x136>
    643c:	22 0c       	add	r2, r2
    643e:	33 1c       	adc	r3, r3
    6440:	44 1c       	adc	r4, r4
    6442:	55 1c       	adc	r5, r5
    6444:	0a 94       	dec	r0
    6446:	d2 f7       	brpl	.-12     	; 0x643c <__udivdi3+0x12e>
    6448:	a4 01       	movw	r20, r8
    644a:	93 01       	movw	r18, r6
    644c:	0e 2c       	mov	r0, r14
    644e:	04 c0       	rjmp	.+8      	; 0x6458 <__udivdi3+0x14a>
    6450:	22 0f       	add	r18, r18
    6452:	33 1f       	adc	r19, r19
    6454:	44 1f       	adc	r20, r20
    6456:	55 1f       	adc	r21, r21
    6458:	0a 94       	dec	r0
    645a:	d2 f7       	brpl	.-12     	; 0x6450 <__udivdi3+0x142>
    645c:	80 e2       	ldi	r24, 0x20	; 32
    645e:	90 e0       	ldi	r25, 0x00	; 0
    6460:	8e 19       	sub	r24, r14
    6462:	9f 09       	sbc	r25, r15
    6464:	6d a4       	ldd	r6, Y+45	; 0x2d
    6466:	7e a4       	ldd	r7, Y+46	; 0x2e
    6468:	8f a4       	ldd	r8, Y+47	; 0x2f
    646a:	98 a8       	ldd	r9, Y+48	; 0x30
    646c:	04 c0       	rjmp	.+8      	; 0x6476 <__udivdi3+0x168>
    646e:	96 94       	lsr	r9
    6470:	87 94       	ror	r8
    6472:	77 94       	ror	r7
    6474:	67 94       	ror	r6
    6476:	8a 95       	dec	r24
    6478:	d2 f7       	brpl	.-12     	; 0x646e <__udivdi3+0x160>
    647a:	62 2a       	or	r6, r18
    647c:	73 2a       	or	r7, r19
    647e:	84 2a       	or	r8, r20
    6480:	95 2a       	or	r9, r21
    6482:	ad a4       	ldd	r10, Y+45	; 0x2d
    6484:	be a4       	ldd	r11, Y+46	; 0x2e
    6486:	cf a4       	ldd	r12, Y+47	; 0x2f
    6488:	d8 a8       	ldd	r13, Y+48	; 0x30
    648a:	04 c0       	rjmp	.+8      	; 0x6494 <__udivdi3+0x186>
    648c:	aa 0c       	add	r10, r10
    648e:	bb 1c       	adc	r11, r11
    6490:	cc 1c       	adc	r12, r12
    6492:	dd 1c       	adc	r13, r13
    6494:	ea 94       	dec	r14
    6496:	d2 f7       	brpl	.-12     	; 0x648c <__udivdi3+0x17e>
    6498:	ad a6       	std	Y+45, r10	; 0x2d
    649a:	be a6       	std	Y+46, r11	; 0x2e
    649c:	cf a6       	std	Y+47, r12	; 0x2f
    649e:	d8 aa       	std	Y+48, r13	; 0x30
    64a0:	62 01       	movw	r12, r4
    64a2:	ee 24       	eor	r14, r14
    64a4:	ff 24       	eor	r15, r15
    64a6:	cd aa       	std	Y+53, r12	; 0x35
    64a8:	de aa       	std	Y+54, r13	; 0x36
    64aa:	ef aa       	std	Y+55, r14	; 0x37
    64ac:	f8 ae       	std	Y+56, r15	; 0x38
    64ae:	92 01       	movw	r18, r4
    64b0:	81 01       	movw	r16, r2
    64b2:	20 70       	andi	r18, 0x00	; 0
    64b4:	30 70       	andi	r19, 0x00	; 0
    64b6:	09 af       	std	Y+57, r16	; 0x39
    64b8:	1a af       	std	Y+58, r17	; 0x3a
    64ba:	2b af       	std	Y+59, r18	; 0x3b
    64bc:	3c af       	std	Y+60, r19	; 0x3c
    64be:	c4 01       	movw	r24, r8
    64c0:	b3 01       	movw	r22, r6
    64c2:	a7 01       	movw	r20, r14
    64c4:	96 01       	movw	r18, r12
    64c6:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__udivmodsi4>
    64ca:	7b 01       	movw	r14, r22
    64cc:	8c 01       	movw	r16, r24
    64ce:	c4 01       	movw	r24, r8
    64d0:	b3 01       	movw	r22, r6
    64d2:	2d a9       	ldd	r18, Y+53	; 0x35
    64d4:	3e a9       	ldd	r19, Y+54	; 0x36
    64d6:	4f a9       	ldd	r20, Y+55	; 0x37
    64d8:	58 ad       	ldd	r21, Y+56	; 0x38
    64da:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__udivmodsi4>
    64de:	c9 01       	movw	r24, r18
    64e0:	da 01       	movw	r26, r20
    64e2:	3c 01       	movw	r6, r24
    64e4:	4d 01       	movw	r8, r26
    64e6:	c4 01       	movw	r24, r8
    64e8:	b3 01       	movw	r22, r6
    64ea:	29 ad       	ldd	r18, Y+57	; 0x39
    64ec:	3a ad       	ldd	r19, Y+58	; 0x3a
    64ee:	4b ad       	ldd	r20, Y+59	; 0x3b
    64f0:	5c ad       	ldd	r21, Y+60	; 0x3c
    64f2:	0e 94 d9 3f 	call	0x7fb2	; 0x7fb2 <__mulsi3>
    64f6:	9b 01       	movw	r18, r22
    64f8:	ac 01       	movw	r20, r24
    64fa:	87 01       	movw	r16, r14
    64fc:	ff 24       	eor	r15, r15
    64fe:	ee 24       	eor	r14, r14
    6500:	ad a4       	ldd	r10, Y+45	; 0x2d
    6502:	be a4       	ldd	r11, Y+46	; 0x2e
    6504:	cf a4       	ldd	r12, Y+47	; 0x2f
    6506:	d8 a8       	ldd	r13, Y+48	; 0x30
    6508:	c6 01       	movw	r24, r12
    650a:	aa 27       	eor	r26, r26
    650c:	bb 27       	eor	r27, r27
    650e:	57 01       	movw	r10, r14
    6510:	68 01       	movw	r12, r16
    6512:	a8 2a       	or	r10, r24
    6514:	b9 2a       	or	r11, r25
    6516:	ca 2a       	or	r12, r26
    6518:	db 2a       	or	r13, r27
    651a:	a2 16       	cp	r10, r18
    651c:	b3 06       	cpc	r11, r19
    651e:	c4 06       	cpc	r12, r20
    6520:	d5 06       	cpc	r13, r21
    6522:	e0 f4       	brcc	.+56     	; 0x655c <__udivdi3+0x24e>
    6524:	08 94       	sec
    6526:	61 08       	sbc	r6, r1
    6528:	71 08       	sbc	r7, r1
    652a:	81 08       	sbc	r8, r1
    652c:	91 08       	sbc	r9, r1
    652e:	a2 0c       	add	r10, r2
    6530:	b3 1c       	adc	r11, r3
    6532:	c4 1c       	adc	r12, r4
    6534:	d5 1c       	adc	r13, r5
    6536:	a2 14       	cp	r10, r2
    6538:	b3 04       	cpc	r11, r3
    653a:	c4 04       	cpc	r12, r4
    653c:	d5 04       	cpc	r13, r5
    653e:	70 f0       	brcs	.+28     	; 0x655c <__udivdi3+0x24e>
    6540:	a2 16       	cp	r10, r18
    6542:	b3 06       	cpc	r11, r19
    6544:	c4 06       	cpc	r12, r20
    6546:	d5 06       	cpc	r13, r21
    6548:	48 f4       	brcc	.+18     	; 0x655c <__udivdi3+0x24e>
    654a:	08 94       	sec
    654c:	61 08       	sbc	r6, r1
    654e:	71 08       	sbc	r7, r1
    6550:	81 08       	sbc	r8, r1
    6552:	91 08       	sbc	r9, r1
    6554:	a2 0c       	add	r10, r2
    6556:	b3 1c       	adc	r11, r3
    6558:	c4 1c       	adc	r12, r4
    655a:	d5 1c       	adc	r13, r5
    655c:	a2 1a       	sub	r10, r18
    655e:	b3 0a       	sbc	r11, r19
    6560:	c4 0a       	sbc	r12, r20
    6562:	d5 0a       	sbc	r13, r21
    6564:	c6 01       	movw	r24, r12
    6566:	b5 01       	movw	r22, r10
    6568:	2d a9       	ldd	r18, Y+53	; 0x35
    656a:	3e a9       	ldd	r19, Y+54	; 0x36
    656c:	4f a9       	ldd	r20, Y+55	; 0x37
    656e:	58 ad       	ldd	r21, Y+56	; 0x38
    6570:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__udivmodsi4>
    6574:	7b 01       	movw	r14, r22
    6576:	8c 01       	movw	r16, r24
    6578:	c6 01       	movw	r24, r12
    657a:	b5 01       	movw	r22, r10
    657c:	2d a9       	ldd	r18, Y+53	; 0x35
    657e:	3e a9       	ldd	r19, Y+54	; 0x36
    6580:	4f a9       	ldd	r20, Y+55	; 0x37
    6582:	58 ad       	ldd	r21, Y+56	; 0x38
    6584:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__udivmodsi4>
    6588:	c9 01       	movw	r24, r18
    658a:	da 01       	movw	r26, r20
    658c:	5c 01       	movw	r10, r24
    658e:	6d 01       	movw	r12, r26
    6590:	c6 01       	movw	r24, r12
    6592:	b5 01       	movw	r22, r10
    6594:	29 ad       	ldd	r18, Y+57	; 0x39
    6596:	3a ad       	ldd	r19, Y+58	; 0x3a
    6598:	4b ad       	ldd	r20, Y+59	; 0x3b
    659a:	5c ad       	ldd	r21, Y+60	; 0x3c
    659c:	0e 94 d9 3f 	call	0x7fb2	; 0x7fb2 <__mulsi3>
    65a0:	9b 01       	movw	r18, r22
    65a2:	ac 01       	movw	r20, r24
    65a4:	87 01       	movw	r16, r14
    65a6:	ff 24       	eor	r15, r15
    65a8:	ee 24       	eor	r14, r14
    65aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    65ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    65ae:	af a5       	ldd	r26, Y+47	; 0x2f
    65b0:	b8 a9       	ldd	r27, Y+48	; 0x30
    65b2:	a0 70       	andi	r26, 0x00	; 0
    65b4:	b0 70       	andi	r27, 0x00	; 0
    65b6:	e8 2a       	or	r14, r24
    65b8:	f9 2a       	or	r15, r25
    65ba:	0a 2b       	or	r16, r26
    65bc:	1b 2b       	or	r17, r27
    65be:	e2 16       	cp	r14, r18
    65c0:	f3 06       	cpc	r15, r19
    65c2:	04 07       	cpc	r16, r20
    65c4:	15 07       	cpc	r17, r21
    65c6:	c0 f4       	brcc	.+48     	; 0x65f8 <__udivdi3+0x2ea>
    65c8:	08 94       	sec
    65ca:	a1 08       	sbc	r10, r1
    65cc:	b1 08       	sbc	r11, r1
    65ce:	c1 08       	sbc	r12, r1
    65d0:	d1 08       	sbc	r13, r1
    65d2:	e2 0c       	add	r14, r2
    65d4:	f3 1c       	adc	r15, r3
    65d6:	04 1d       	adc	r16, r4
    65d8:	15 1d       	adc	r17, r5
    65da:	e2 14       	cp	r14, r2
    65dc:	f3 04       	cpc	r15, r3
    65de:	04 05       	cpc	r16, r4
    65e0:	15 05       	cpc	r17, r5
    65e2:	50 f0       	brcs	.+20     	; 0x65f8 <__udivdi3+0x2ea>
    65e4:	e2 16       	cp	r14, r18
    65e6:	f3 06       	cpc	r15, r19
    65e8:	04 07       	cpc	r16, r20
    65ea:	15 07       	cpc	r17, r21
    65ec:	28 f4       	brcc	.+10     	; 0x65f8 <__udivdi3+0x2ea>
    65ee:	08 94       	sec
    65f0:	a1 08       	sbc	r10, r1
    65f2:	b1 08       	sbc	r11, r1
    65f4:	c1 08       	sbc	r12, r1
    65f6:	d1 08       	sbc	r13, r1
    65f8:	d3 01       	movw	r26, r6
    65fa:	99 27       	eor	r25, r25
    65fc:	88 27       	eor	r24, r24
    65fe:	86 01       	movw	r16, r12
    6600:	75 01       	movw	r14, r10
    6602:	e8 2a       	or	r14, r24
    6604:	f9 2a       	or	r15, r25
    6606:	0a 2b       	or	r16, r26
    6608:	1b 2b       	or	r17, r27
    660a:	e9 aa       	std	Y+49, r14	; 0x31
    660c:	fa aa       	std	Y+50, r15	; 0x32
    660e:	0b ab       	std	Y+51, r16	; 0x33
    6610:	1c ab       	std	Y+52, r17	; 0x34
    6612:	cf c4       	rjmp	.+2462   	; 0x6fb2 <__udivdi3+0xca4>
    6614:	21 14       	cp	r2, r1
    6616:	31 04       	cpc	r3, r1
    6618:	41 04       	cpc	r4, r1
    661a:	51 04       	cpc	r5, r1
    661c:	71 f4       	brne	.+28     	; 0x663a <__udivdi3+0x32c>
    661e:	61 e0       	ldi	r22, 0x01	; 1
    6620:	70 e0       	ldi	r23, 0x00	; 0
    6622:	80 e0       	ldi	r24, 0x00	; 0
    6624:	90 e0       	ldi	r25, 0x00	; 0
    6626:	20 e0       	ldi	r18, 0x00	; 0
    6628:	30 e0       	ldi	r19, 0x00	; 0
    662a:	40 e0       	ldi	r20, 0x00	; 0
    662c:	50 e0       	ldi	r21, 0x00	; 0
    662e:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__udivmodsi4>
    6632:	c9 01       	movw	r24, r18
    6634:	da 01       	movw	r26, r20
    6636:	1c 01       	movw	r2, r24
    6638:	2d 01       	movw	r4, r26
    663a:	00 e0       	ldi	r16, 0x00	; 0
    663c:	20 16       	cp	r2, r16
    663e:	00 e0       	ldi	r16, 0x00	; 0
    6640:	30 06       	cpc	r3, r16
    6642:	01 e0       	ldi	r16, 0x01	; 1
    6644:	40 06       	cpc	r4, r16
    6646:	00 e0       	ldi	r16, 0x00	; 0
    6648:	50 06       	cpc	r5, r16
    664a:	88 f4       	brcc	.+34     	; 0x666e <__udivdi3+0x360>
    664c:	1f ef       	ldi	r17, 0xFF	; 255
    664e:	21 16       	cp	r2, r17
    6650:	31 04       	cpc	r3, r1
    6652:	41 04       	cpc	r4, r1
    6654:	51 04       	cpc	r5, r1
    6656:	31 f0       	breq	.+12     	; 0x6664 <__udivdi3+0x356>
    6658:	28 f0       	brcs	.+10     	; 0x6664 <__udivdi3+0x356>
    665a:	48 e0       	ldi	r20, 0x08	; 8
    665c:	50 e0       	ldi	r21, 0x00	; 0
    665e:	60 e0       	ldi	r22, 0x00	; 0
    6660:	70 e0       	ldi	r23, 0x00	; 0
    6662:	17 c0       	rjmp	.+46     	; 0x6692 <__udivdi3+0x384>
    6664:	40 e0       	ldi	r20, 0x00	; 0
    6666:	50 e0       	ldi	r21, 0x00	; 0
    6668:	60 e0       	ldi	r22, 0x00	; 0
    666a:	70 e0       	ldi	r23, 0x00	; 0
    666c:	12 c0       	rjmp	.+36     	; 0x6692 <__udivdi3+0x384>
    666e:	20 e0       	ldi	r18, 0x00	; 0
    6670:	22 16       	cp	r2, r18
    6672:	20 e0       	ldi	r18, 0x00	; 0
    6674:	32 06       	cpc	r3, r18
    6676:	20 e0       	ldi	r18, 0x00	; 0
    6678:	42 06       	cpc	r4, r18
    667a:	21 e0       	ldi	r18, 0x01	; 1
    667c:	52 06       	cpc	r5, r18
    667e:	28 f0       	brcs	.+10     	; 0x668a <__udivdi3+0x37c>
    6680:	48 e1       	ldi	r20, 0x18	; 24
    6682:	50 e0       	ldi	r21, 0x00	; 0
    6684:	60 e0       	ldi	r22, 0x00	; 0
    6686:	70 e0       	ldi	r23, 0x00	; 0
    6688:	04 c0       	rjmp	.+8      	; 0x6692 <__udivdi3+0x384>
    668a:	40 e1       	ldi	r20, 0x10	; 16
    668c:	50 e0       	ldi	r21, 0x00	; 0
    668e:	60 e0       	ldi	r22, 0x00	; 0
    6690:	70 e0       	ldi	r23, 0x00	; 0
    6692:	d2 01       	movw	r26, r4
    6694:	c1 01       	movw	r24, r2
    6696:	04 2e       	mov	r0, r20
    6698:	04 c0       	rjmp	.+8      	; 0x66a2 <__udivdi3+0x394>
    669a:	b6 95       	lsr	r27
    669c:	a7 95       	ror	r26
    669e:	97 95       	ror	r25
    66a0:	87 95       	ror	r24
    66a2:	0a 94       	dec	r0
    66a4:	d2 f7       	brpl	.-12     	; 0x669a <__udivdi3+0x38c>
    66a6:	84 5e       	subi	r24, 0xE4	; 228
    66a8:	9f 4d       	sbci	r25, 0xDF	; 223
    66aa:	dc 01       	movw	r26, r24
    66ac:	2c 91       	ld	r18, X
    66ae:	e0 e2       	ldi	r30, 0x20	; 32
    66b0:	ee 2e       	mov	r14, r30
    66b2:	f1 2c       	mov	r15, r1
    66b4:	01 2d       	mov	r16, r1
    66b6:	11 2d       	mov	r17, r1
    66b8:	d8 01       	movw	r26, r16
    66ba:	c7 01       	movw	r24, r14
    66bc:	84 1b       	sub	r24, r20
    66be:	95 0b       	sbc	r25, r21
    66c0:	a6 0b       	sbc	r26, r22
    66c2:	b7 0b       	sbc	r27, r23
    66c4:	82 1b       	sub	r24, r18
    66c6:	91 09       	sbc	r25, r1
    66c8:	a1 09       	sbc	r26, r1
    66ca:	b1 09       	sbc	r27, r1
    66cc:	00 97       	sbiw	r24, 0x00	; 0
    66ce:	a1 05       	cpc	r26, r1
    66d0:	b1 05       	cpc	r27, r1
    66d2:	61 f4       	brne	.+24     	; 0x66ec <__udivdi3+0x3de>
    66d4:	64 01       	movw	r12, r8
    66d6:	53 01       	movw	r10, r6
    66d8:	a2 18       	sub	r10, r2
    66da:	b3 08       	sbc	r11, r3
    66dc:	c4 08       	sbc	r12, r4
    66de:	d5 08       	sbc	r13, r5
    66e0:	31 e0       	ldi	r19, 0x01	; 1
    66e2:	63 2e       	mov	r6, r19
    66e4:	71 2c       	mov	r7, r1
    66e6:	81 2c       	mov	r8, r1
    66e8:	91 2c       	mov	r9, r1
    66ea:	1e c1       	rjmp	.+572    	; 0x6928 <__udivdi3+0x61a>
    66ec:	6f 96       	adiw	r28, 0x1f	; 31
    66ee:	8f af       	std	Y+63, r24	; 0x3f
    66f0:	6f 97       	sbiw	r28, 0x1f	; 31
    66f2:	08 2e       	mov	r0, r24
    66f4:	04 c0       	rjmp	.+8      	; 0x66fe <__udivdi3+0x3f0>
    66f6:	22 0c       	add	r2, r2
    66f8:	33 1c       	adc	r3, r3
    66fa:	44 1c       	adc	r4, r4
    66fc:	55 1c       	adc	r5, r5
    66fe:	0a 94       	dec	r0
    6700:	d2 f7       	brpl	.-12     	; 0x66f6 <__udivdi3+0x3e8>
    6702:	ee 2d       	mov	r30, r14
    6704:	e8 1b       	sub	r30, r24
    6706:	64 01       	movw	r12, r8
    6708:	53 01       	movw	r10, r6
    670a:	0e 2e       	mov	r0, r30
    670c:	04 c0       	rjmp	.+8      	; 0x6716 <__udivdi3+0x408>
    670e:	d6 94       	lsr	r13
    6710:	c7 94       	ror	r12
    6712:	b7 94       	ror	r11
    6714:	a7 94       	ror	r10
    6716:	0a 94       	dec	r0
    6718:	d2 f7       	brpl	.-12     	; 0x670e <__udivdi3+0x400>
    671a:	a4 01       	movw	r20, r8
    671c:	93 01       	movw	r18, r6
    671e:	6f 96       	adiw	r28, 0x1f	; 31
    6720:	0f ac       	ldd	r0, Y+63	; 0x3f
    6722:	6f 97       	sbiw	r28, 0x1f	; 31
    6724:	04 c0       	rjmp	.+8      	; 0x672e <__udivdi3+0x420>
    6726:	22 0f       	add	r18, r18
    6728:	33 1f       	adc	r19, r19
    672a:	44 1f       	adc	r20, r20
    672c:	55 1f       	adc	r21, r21
    672e:	0a 94       	dec	r0
    6730:	d2 f7       	brpl	.-12     	; 0x6726 <__udivdi3+0x418>
    6732:	6d a4       	ldd	r6, Y+45	; 0x2d
    6734:	7e a4       	ldd	r7, Y+46	; 0x2e
    6736:	8f a4       	ldd	r8, Y+47	; 0x2f
    6738:	98 a8       	ldd	r9, Y+48	; 0x30
    673a:	0e 2e       	mov	r0, r30
    673c:	04 c0       	rjmp	.+8      	; 0x6746 <__udivdi3+0x438>
    673e:	96 94       	lsr	r9
    6740:	87 94       	ror	r8
    6742:	77 94       	ror	r7
    6744:	67 94       	ror	r6
    6746:	0a 94       	dec	r0
    6748:	d2 f7       	brpl	.-12     	; 0x673e <__udivdi3+0x430>
    674a:	84 01       	movw	r16, r8
    674c:	73 01       	movw	r14, r6
    674e:	e2 2a       	or	r14, r18
    6750:	f3 2a       	or	r15, r19
    6752:	04 2b       	or	r16, r20
    6754:	15 2b       	or	r17, r21
    6756:	e9 a6       	std	Y+41, r14	; 0x29
    6758:	fa a6       	std	Y+42, r15	; 0x2a
    675a:	0b a7       	std	Y+43, r16	; 0x2b
    675c:	1c a7       	std	Y+44, r17	; 0x2c
    675e:	32 01       	movw	r6, r4
    6760:	88 24       	eor	r8, r8
    6762:	99 24       	eor	r9, r9
    6764:	92 01       	movw	r18, r4
    6766:	81 01       	movw	r16, r2
    6768:	20 70       	andi	r18, 0x00	; 0
    676a:	30 70       	andi	r19, 0x00	; 0
    676c:	21 96       	adiw	r28, 0x01	; 1
    676e:	0c af       	std	Y+60, r16	; 0x3c
    6770:	1d af       	std	Y+61, r17	; 0x3d
    6772:	2e af       	std	Y+62, r18	; 0x3e
    6774:	3f af       	std	Y+63, r19	; 0x3f
    6776:	21 97       	sbiw	r28, 0x01	; 1
    6778:	c6 01       	movw	r24, r12
    677a:	b5 01       	movw	r22, r10
    677c:	a4 01       	movw	r20, r8
    677e:	93 01       	movw	r18, r6
    6780:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__udivmodsi4>
    6784:	7b 01       	movw	r14, r22
    6786:	8c 01       	movw	r16, r24
    6788:	c6 01       	movw	r24, r12
    678a:	b5 01       	movw	r22, r10
    678c:	a4 01       	movw	r20, r8
    678e:	93 01       	movw	r18, r6
    6790:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__udivmodsi4>
    6794:	c9 01       	movw	r24, r18
    6796:	da 01       	movw	r26, r20
    6798:	25 96       	adiw	r28, 0x05	; 5
    679a:	8c af       	std	Y+60, r24	; 0x3c
    679c:	9d af       	std	Y+61, r25	; 0x3d
    679e:	ae af       	std	Y+62, r26	; 0x3e
    67a0:	bf af       	std	Y+63, r27	; 0x3f
    67a2:	25 97       	sbiw	r28, 0x05	; 5
    67a4:	bc 01       	movw	r22, r24
    67a6:	cd 01       	movw	r24, r26
    67a8:	21 96       	adiw	r28, 0x01	; 1
    67aa:	2c ad       	ldd	r18, Y+60	; 0x3c
    67ac:	3d ad       	ldd	r19, Y+61	; 0x3d
    67ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    67b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    67b2:	21 97       	sbiw	r28, 0x01	; 1
    67b4:	0e 94 d9 3f 	call	0x7fb2	; 0x7fb2 <__mulsi3>
    67b8:	9b 01       	movw	r18, r22
    67ba:	ac 01       	movw	r20, r24
    67bc:	87 01       	movw	r16, r14
    67be:	ff 24       	eor	r15, r15
    67c0:	ee 24       	eor	r14, r14
    67c2:	a9 a4       	ldd	r10, Y+41	; 0x29
    67c4:	ba a4       	ldd	r11, Y+42	; 0x2a
    67c6:	cb a4       	ldd	r12, Y+43	; 0x2b
    67c8:	dc a4       	ldd	r13, Y+44	; 0x2c
    67ca:	c6 01       	movw	r24, r12
    67cc:	aa 27       	eor	r26, r26
    67ce:	bb 27       	eor	r27, r27
    67d0:	5c 01       	movw	r10, r24
    67d2:	6d 01       	movw	r12, r26
    67d4:	ae 28       	or	r10, r14
    67d6:	bf 28       	or	r11, r15
    67d8:	c0 2a       	or	r12, r16
    67da:	d1 2a       	or	r13, r17
    67dc:	a2 16       	cp	r10, r18
    67de:	b3 06       	cpc	r11, r19
    67e0:	c4 06       	cpc	r12, r20
    67e2:	d5 06       	cpc	r13, r21
    67e4:	60 f5       	brcc	.+88     	; 0x683e <__udivdi3+0x530>
    67e6:	25 96       	adiw	r28, 0x05	; 5
    67e8:	6c ad       	ldd	r22, Y+60	; 0x3c
    67ea:	7d ad       	ldd	r23, Y+61	; 0x3d
    67ec:	8e ad       	ldd	r24, Y+62	; 0x3e
    67ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    67f0:	25 97       	sbiw	r28, 0x05	; 5
    67f2:	61 50       	subi	r22, 0x01	; 1
    67f4:	70 40       	sbci	r23, 0x00	; 0
    67f6:	80 40       	sbci	r24, 0x00	; 0
    67f8:	90 40       	sbci	r25, 0x00	; 0
    67fa:	25 96       	adiw	r28, 0x05	; 5
    67fc:	6c af       	std	Y+60, r22	; 0x3c
    67fe:	7d af       	std	Y+61, r23	; 0x3d
    6800:	8e af       	std	Y+62, r24	; 0x3e
    6802:	9f af       	std	Y+63, r25	; 0x3f
    6804:	25 97       	sbiw	r28, 0x05	; 5
    6806:	a2 0c       	add	r10, r2
    6808:	b3 1c       	adc	r11, r3
    680a:	c4 1c       	adc	r12, r4
    680c:	d5 1c       	adc	r13, r5
    680e:	a2 14       	cp	r10, r2
    6810:	b3 04       	cpc	r11, r3
    6812:	c4 04       	cpc	r12, r4
    6814:	d5 04       	cpc	r13, r5
    6816:	98 f0       	brcs	.+38     	; 0x683e <__udivdi3+0x530>
    6818:	a2 16       	cp	r10, r18
    681a:	b3 06       	cpc	r11, r19
    681c:	c4 06       	cpc	r12, r20
    681e:	d5 06       	cpc	r13, r21
    6820:	70 f4       	brcc	.+28     	; 0x683e <__udivdi3+0x530>
    6822:	61 50       	subi	r22, 0x01	; 1
    6824:	70 40       	sbci	r23, 0x00	; 0
    6826:	80 40       	sbci	r24, 0x00	; 0
    6828:	90 40       	sbci	r25, 0x00	; 0
    682a:	25 96       	adiw	r28, 0x05	; 5
    682c:	6c af       	std	Y+60, r22	; 0x3c
    682e:	7d af       	std	Y+61, r23	; 0x3d
    6830:	8e af       	std	Y+62, r24	; 0x3e
    6832:	9f af       	std	Y+63, r25	; 0x3f
    6834:	25 97       	sbiw	r28, 0x05	; 5
    6836:	a2 0c       	add	r10, r2
    6838:	b3 1c       	adc	r11, r3
    683a:	c4 1c       	adc	r12, r4
    683c:	d5 1c       	adc	r13, r5
    683e:	a2 1a       	sub	r10, r18
    6840:	b3 0a       	sbc	r11, r19
    6842:	c4 0a       	sbc	r12, r20
    6844:	d5 0a       	sbc	r13, r21
    6846:	c6 01       	movw	r24, r12
    6848:	b5 01       	movw	r22, r10
    684a:	a4 01       	movw	r20, r8
    684c:	93 01       	movw	r18, r6
    684e:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__udivmodsi4>
    6852:	7b 01       	movw	r14, r22
    6854:	8c 01       	movw	r16, r24
    6856:	c6 01       	movw	r24, r12
    6858:	b5 01       	movw	r22, r10
    685a:	a4 01       	movw	r20, r8
    685c:	93 01       	movw	r18, r6
    685e:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__udivmodsi4>
    6862:	c9 01       	movw	r24, r18
    6864:	da 01       	movw	r26, r20
    6866:	3c 01       	movw	r6, r24
    6868:	4d 01       	movw	r8, r26
    686a:	c4 01       	movw	r24, r8
    686c:	b3 01       	movw	r22, r6
    686e:	21 96       	adiw	r28, 0x01	; 1
    6870:	2c ad       	ldd	r18, Y+60	; 0x3c
    6872:	3d ad       	ldd	r19, Y+61	; 0x3d
    6874:	4e ad       	ldd	r20, Y+62	; 0x3e
    6876:	5f ad       	ldd	r21, Y+63	; 0x3f
    6878:	21 97       	sbiw	r28, 0x01	; 1
    687a:	0e 94 d9 3f 	call	0x7fb2	; 0x7fb2 <__mulsi3>
    687e:	9b 01       	movw	r18, r22
    6880:	ac 01       	movw	r20, r24
    6882:	87 01       	movw	r16, r14
    6884:	ff 24       	eor	r15, r15
    6886:	ee 24       	eor	r14, r14
    6888:	89 a5       	ldd	r24, Y+41	; 0x29
    688a:	9a a5       	ldd	r25, Y+42	; 0x2a
    688c:	ab a5       	ldd	r26, Y+43	; 0x2b
    688e:	bc a5       	ldd	r27, Y+44	; 0x2c
    6890:	a0 70       	andi	r26, 0x00	; 0
    6892:	b0 70       	andi	r27, 0x00	; 0
    6894:	57 01       	movw	r10, r14
    6896:	68 01       	movw	r12, r16
    6898:	a8 2a       	or	r10, r24
    689a:	b9 2a       	or	r11, r25
    689c:	ca 2a       	or	r12, r26
    689e:	db 2a       	or	r13, r27
    68a0:	a2 16       	cp	r10, r18
    68a2:	b3 06       	cpc	r11, r19
    68a4:	c4 06       	cpc	r12, r20
    68a6:	d5 06       	cpc	r13, r21
    68a8:	e0 f4       	brcc	.+56     	; 0x68e2 <__udivdi3+0x5d4>
    68aa:	08 94       	sec
    68ac:	61 08       	sbc	r6, r1
    68ae:	71 08       	sbc	r7, r1
    68b0:	81 08       	sbc	r8, r1
    68b2:	91 08       	sbc	r9, r1
    68b4:	a2 0c       	add	r10, r2
    68b6:	b3 1c       	adc	r11, r3
    68b8:	c4 1c       	adc	r12, r4
    68ba:	d5 1c       	adc	r13, r5
    68bc:	a2 14       	cp	r10, r2
    68be:	b3 04       	cpc	r11, r3
    68c0:	c4 04       	cpc	r12, r4
    68c2:	d5 04       	cpc	r13, r5
    68c4:	70 f0       	brcs	.+28     	; 0x68e2 <__udivdi3+0x5d4>
    68c6:	a2 16       	cp	r10, r18
    68c8:	b3 06       	cpc	r11, r19
    68ca:	c4 06       	cpc	r12, r20
    68cc:	d5 06       	cpc	r13, r21
    68ce:	48 f4       	brcc	.+18     	; 0x68e2 <__udivdi3+0x5d4>
    68d0:	08 94       	sec
    68d2:	61 08       	sbc	r6, r1
    68d4:	71 08       	sbc	r7, r1
    68d6:	81 08       	sbc	r8, r1
    68d8:	91 08       	sbc	r9, r1
    68da:	a2 0c       	add	r10, r2
    68dc:	b3 1c       	adc	r11, r3
    68de:	c4 1c       	adc	r12, r4
    68e0:	d5 1c       	adc	r13, r5
    68e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    68e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    68e6:	af a5       	ldd	r26, Y+47	; 0x2f
    68e8:	b8 a9       	ldd	r27, Y+48	; 0x30
    68ea:	6f 96       	adiw	r28, 0x1f	; 31
    68ec:	0f ac       	ldd	r0, Y+63	; 0x3f
    68ee:	6f 97       	sbiw	r28, 0x1f	; 31
    68f0:	04 c0       	rjmp	.+8      	; 0x68fa <__udivdi3+0x5ec>
    68f2:	88 0f       	add	r24, r24
    68f4:	99 1f       	adc	r25, r25
    68f6:	aa 1f       	adc	r26, r26
    68f8:	bb 1f       	adc	r27, r27
    68fa:	0a 94       	dec	r0
    68fc:	d2 f7       	brpl	.-12     	; 0x68f2 <__udivdi3+0x5e4>
    68fe:	8d a7       	std	Y+45, r24	; 0x2d
    6900:	9e a7       	std	Y+46, r25	; 0x2e
    6902:	af a7       	std	Y+47, r26	; 0x2f
    6904:	b8 ab       	std	Y+48, r27	; 0x30
    6906:	a2 1a       	sub	r10, r18
    6908:	b3 0a       	sbc	r11, r19
    690a:	c4 0a       	sbc	r12, r20
    690c:	d5 0a       	sbc	r13, r21
    690e:	25 96       	adiw	r28, 0x05	; 5
    6910:	ec ac       	ldd	r14, Y+60	; 0x3c
    6912:	fd ac       	ldd	r15, Y+61	; 0x3d
    6914:	0e ad       	ldd	r16, Y+62	; 0x3e
    6916:	1f ad       	ldd	r17, Y+63	; 0x3f
    6918:	25 97       	sbiw	r28, 0x05	; 5
    691a:	d7 01       	movw	r26, r14
    691c:	99 27       	eor	r25, r25
    691e:	88 27       	eor	r24, r24
    6920:	68 2a       	or	r6, r24
    6922:	79 2a       	or	r7, r25
    6924:	8a 2a       	or	r8, r26
    6926:	9b 2a       	or	r9, r27
    6928:	82 01       	movw	r16, r4
    692a:	22 27       	eor	r18, r18
    692c:	33 27       	eor	r19, r19
    692e:	29 96       	adiw	r28, 0x09	; 9
    6930:	0c af       	std	Y+60, r16	; 0x3c
    6932:	1d af       	std	Y+61, r17	; 0x3d
    6934:	2e af       	std	Y+62, r18	; 0x3e
    6936:	3f af       	std	Y+63, r19	; 0x3f
    6938:	29 97       	sbiw	r28, 0x09	; 9
    693a:	a2 01       	movw	r20, r4
    693c:	91 01       	movw	r18, r2
    693e:	40 70       	andi	r20, 0x00	; 0
    6940:	50 70       	andi	r21, 0x00	; 0
    6942:	2d 96       	adiw	r28, 0x0d	; 13
    6944:	2c af       	std	Y+60, r18	; 0x3c
    6946:	3d af       	std	Y+61, r19	; 0x3d
    6948:	4e af       	std	Y+62, r20	; 0x3e
    694a:	5f af       	std	Y+63, r21	; 0x3f
    694c:	2d 97       	sbiw	r28, 0x0d	; 13
    694e:	c6 01       	movw	r24, r12
    6950:	b5 01       	movw	r22, r10
    6952:	29 96       	adiw	r28, 0x09	; 9
    6954:	2c ad       	ldd	r18, Y+60	; 0x3c
    6956:	3d ad       	ldd	r19, Y+61	; 0x3d
    6958:	4e ad       	ldd	r20, Y+62	; 0x3e
    695a:	5f ad       	ldd	r21, Y+63	; 0x3f
    695c:	29 97       	sbiw	r28, 0x09	; 9
    695e:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__udivmodsi4>
    6962:	7b 01       	movw	r14, r22
    6964:	8c 01       	movw	r16, r24
    6966:	c6 01       	movw	r24, r12
    6968:	b5 01       	movw	r22, r10
    696a:	29 96       	adiw	r28, 0x09	; 9
    696c:	2c ad       	ldd	r18, Y+60	; 0x3c
    696e:	3d ad       	ldd	r19, Y+61	; 0x3d
    6970:	4e ad       	ldd	r20, Y+62	; 0x3e
    6972:	5f ad       	ldd	r21, Y+63	; 0x3f
    6974:	29 97       	sbiw	r28, 0x09	; 9
    6976:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__udivmodsi4>
    697a:	c9 01       	movw	r24, r18
    697c:	da 01       	movw	r26, r20
    697e:	61 96       	adiw	r28, 0x11	; 17
    6980:	8c af       	std	Y+60, r24	; 0x3c
    6982:	9d af       	std	Y+61, r25	; 0x3d
    6984:	ae af       	std	Y+62, r26	; 0x3e
    6986:	bf af       	std	Y+63, r27	; 0x3f
    6988:	61 97       	sbiw	r28, 0x11	; 17
    698a:	bc 01       	movw	r22, r24
    698c:	cd 01       	movw	r24, r26
    698e:	2d 96       	adiw	r28, 0x0d	; 13
    6990:	2c ad       	ldd	r18, Y+60	; 0x3c
    6992:	3d ad       	ldd	r19, Y+61	; 0x3d
    6994:	4e ad       	ldd	r20, Y+62	; 0x3e
    6996:	5f ad       	ldd	r21, Y+63	; 0x3f
    6998:	2d 97       	sbiw	r28, 0x0d	; 13
    699a:	0e 94 d9 3f 	call	0x7fb2	; 0x7fb2 <__mulsi3>
    699e:	9b 01       	movw	r18, r22
    69a0:	ac 01       	movw	r20, r24
    69a2:	87 01       	movw	r16, r14
    69a4:	ff 24       	eor	r15, r15
    69a6:	ee 24       	eor	r14, r14
    69a8:	ad a4       	ldd	r10, Y+45	; 0x2d
    69aa:	be a4       	ldd	r11, Y+46	; 0x2e
    69ac:	cf a4       	ldd	r12, Y+47	; 0x2f
    69ae:	d8 a8       	ldd	r13, Y+48	; 0x30
    69b0:	c6 01       	movw	r24, r12
    69b2:	aa 27       	eor	r26, r26
    69b4:	bb 27       	eor	r27, r27
    69b6:	57 01       	movw	r10, r14
    69b8:	68 01       	movw	r12, r16
    69ba:	a8 2a       	or	r10, r24
    69bc:	b9 2a       	or	r11, r25
    69be:	ca 2a       	or	r12, r26
    69c0:	db 2a       	or	r13, r27
    69c2:	a2 16       	cp	r10, r18
    69c4:	b3 06       	cpc	r11, r19
    69c6:	c4 06       	cpc	r12, r20
    69c8:	d5 06       	cpc	r13, r21
    69ca:	60 f5       	brcc	.+88     	; 0x6a24 <__udivdi3+0x716>
    69cc:	61 96       	adiw	r28, 0x11	; 17
    69ce:	6c ad       	ldd	r22, Y+60	; 0x3c
    69d0:	7d ad       	ldd	r23, Y+61	; 0x3d
    69d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    69d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    69d6:	61 97       	sbiw	r28, 0x11	; 17
    69d8:	61 50       	subi	r22, 0x01	; 1
    69da:	70 40       	sbci	r23, 0x00	; 0
    69dc:	80 40       	sbci	r24, 0x00	; 0
    69de:	90 40       	sbci	r25, 0x00	; 0
    69e0:	61 96       	adiw	r28, 0x11	; 17
    69e2:	6c af       	std	Y+60, r22	; 0x3c
    69e4:	7d af       	std	Y+61, r23	; 0x3d
    69e6:	8e af       	std	Y+62, r24	; 0x3e
    69e8:	9f af       	std	Y+63, r25	; 0x3f
    69ea:	61 97       	sbiw	r28, 0x11	; 17
    69ec:	a2 0c       	add	r10, r2
    69ee:	b3 1c       	adc	r11, r3
    69f0:	c4 1c       	adc	r12, r4
    69f2:	d5 1c       	adc	r13, r5
    69f4:	a2 14       	cp	r10, r2
    69f6:	b3 04       	cpc	r11, r3
    69f8:	c4 04       	cpc	r12, r4
    69fa:	d5 04       	cpc	r13, r5
    69fc:	98 f0       	brcs	.+38     	; 0x6a24 <__udivdi3+0x716>
    69fe:	a2 16       	cp	r10, r18
    6a00:	b3 06       	cpc	r11, r19
    6a02:	c4 06       	cpc	r12, r20
    6a04:	d5 06       	cpc	r13, r21
    6a06:	70 f4       	brcc	.+28     	; 0x6a24 <__udivdi3+0x716>
    6a08:	61 50       	subi	r22, 0x01	; 1
    6a0a:	70 40       	sbci	r23, 0x00	; 0
    6a0c:	80 40       	sbci	r24, 0x00	; 0
    6a0e:	90 40       	sbci	r25, 0x00	; 0
    6a10:	61 96       	adiw	r28, 0x11	; 17
    6a12:	6c af       	std	Y+60, r22	; 0x3c
    6a14:	7d af       	std	Y+61, r23	; 0x3d
    6a16:	8e af       	std	Y+62, r24	; 0x3e
    6a18:	9f af       	std	Y+63, r25	; 0x3f
    6a1a:	61 97       	sbiw	r28, 0x11	; 17
    6a1c:	a2 0c       	add	r10, r2
    6a1e:	b3 1c       	adc	r11, r3
    6a20:	c4 1c       	adc	r12, r4
    6a22:	d5 1c       	adc	r13, r5
    6a24:	a2 1a       	sub	r10, r18
    6a26:	b3 0a       	sbc	r11, r19
    6a28:	c4 0a       	sbc	r12, r20
    6a2a:	d5 0a       	sbc	r13, r21
    6a2c:	c6 01       	movw	r24, r12
    6a2e:	b5 01       	movw	r22, r10
    6a30:	29 96       	adiw	r28, 0x09	; 9
    6a32:	2c ad       	ldd	r18, Y+60	; 0x3c
    6a34:	3d ad       	ldd	r19, Y+61	; 0x3d
    6a36:	4e ad       	ldd	r20, Y+62	; 0x3e
    6a38:	5f ad       	ldd	r21, Y+63	; 0x3f
    6a3a:	29 97       	sbiw	r28, 0x09	; 9
    6a3c:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__udivmodsi4>
    6a40:	7b 01       	movw	r14, r22
    6a42:	8c 01       	movw	r16, r24
    6a44:	c6 01       	movw	r24, r12
    6a46:	b5 01       	movw	r22, r10
    6a48:	29 96       	adiw	r28, 0x09	; 9
    6a4a:	2c ad       	ldd	r18, Y+60	; 0x3c
    6a4c:	3d ad       	ldd	r19, Y+61	; 0x3d
    6a4e:	4e ad       	ldd	r20, Y+62	; 0x3e
    6a50:	5f ad       	ldd	r21, Y+63	; 0x3f
    6a52:	29 97       	sbiw	r28, 0x09	; 9
    6a54:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__udivmodsi4>
    6a58:	c9 01       	movw	r24, r18
    6a5a:	da 01       	movw	r26, r20
    6a5c:	5c 01       	movw	r10, r24
    6a5e:	6d 01       	movw	r12, r26
    6a60:	c6 01       	movw	r24, r12
    6a62:	b5 01       	movw	r22, r10
    6a64:	2d 96       	adiw	r28, 0x0d	; 13
    6a66:	2c ad       	ldd	r18, Y+60	; 0x3c
    6a68:	3d ad       	ldd	r19, Y+61	; 0x3d
    6a6a:	4e ad       	ldd	r20, Y+62	; 0x3e
    6a6c:	5f ad       	ldd	r21, Y+63	; 0x3f
    6a6e:	2d 97       	sbiw	r28, 0x0d	; 13
    6a70:	0e 94 d9 3f 	call	0x7fb2	; 0x7fb2 <__mulsi3>
    6a74:	9b 01       	movw	r18, r22
    6a76:	ac 01       	movw	r20, r24
    6a78:	87 01       	movw	r16, r14
    6a7a:	ff 24       	eor	r15, r15
    6a7c:	ee 24       	eor	r14, r14
    6a7e:	8d a5       	ldd	r24, Y+45	; 0x2d
    6a80:	9e a5       	ldd	r25, Y+46	; 0x2e
    6a82:	af a5       	ldd	r26, Y+47	; 0x2f
    6a84:	b8 a9       	ldd	r27, Y+48	; 0x30
    6a86:	a0 70       	andi	r26, 0x00	; 0
    6a88:	b0 70       	andi	r27, 0x00	; 0
    6a8a:	e8 2a       	or	r14, r24
    6a8c:	f9 2a       	or	r15, r25
    6a8e:	0a 2b       	or	r16, r26
    6a90:	1b 2b       	or	r17, r27
    6a92:	e2 16       	cp	r14, r18
    6a94:	f3 06       	cpc	r15, r19
    6a96:	04 07       	cpc	r16, r20
    6a98:	15 07       	cpc	r17, r21
    6a9a:	c0 f4       	brcc	.+48     	; 0x6acc <__udivdi3+0x7be>
    6a9c:	08 94       	sec
    6a9e:	a1 08       	sbc	r10, r1
    6aa0:	b1 08       	sbc	r11, r1
    6aa2:	c1 08       	sbc	r12, r1
    6aa4:	d1 08       	sbc	r13, r1
    6aa6:	e2 0c       	add	r14, r2
    6aa8:	f3 1c       	adc	r15, r3
    6aaa:	04 1d       	adc	r16, r4
    6aac:	15 1d       	adc	r17, r5
    6aae:	e2 14       	cp	r14, r2
    6ab0:	f3 04       	cpc	r15, r3
    6ab2:	04 05       	cpc	r16, r4
    6ab4:	15 05       	cpc	r17, r5
    6ab6:	50 f0       	brcs	.+20     	; 0x6acc <__udivdi3+0x7be>
    6ab8:	e2 16       	cp	r14, r18
    6aba:	f3 06       	cpc	r15, r19
    6abc:	04 07       	cpc	r16, r20
    6abe:	15 07       	cpc	r17, r21
    6ac0:	28 f4       	brcc	.+10     	; 0x6acc <__udivdi3+0x7be>
    6ac2:	08 94       	sec
    6ac4:	a1 08       	sbc	r10, r1
    6ac6:	b1 08       	sbc	r11, r1
    6ac8:	c1 08       	sbc	r12, r1
    6aca:	d1 08       	sbc	r13, r1
    6acc:	61 96       	adiw	r28, 0x11	; 17
    6ace:	ec ac       	ldd	r14, Y+60	; 0x3c
    6ad0:	fd ac       	ldd	r15, Y+61	; 0x3d
    6ad2:	0e ad       	ldd	r16, Y+62	; 0x3e
    6ad4:	1f ad       	ldd	r17, Y+63	; 0x3f
    6ad6:	61 97       	sbiw	r28, 0x11	; 17
    6ad8:	d7 01       	movw	r26, r14
    6ada:	99 27       	eor	r25, r25
    6adc:	88 27       	eor	r24, r24
    6ade:	96 01       	movw	r18, r12
    6ae0:	85 01       	movw	r16, r10
    6ae2:	08 2b       	or	r16, r24
    6ae4:	19 2b       	or	r17, r25
    6ae6:	2a 2b       	or	r18, r26
    6ae8:	3b 2b       	or	r19, r27
    6aea:	09 ab       	std	Y+49, r16	; 0x31
    6aec:	1a ab       	std	Y+50, r17	; 0x32
    6aee:	2b ab       	std	Y+51, r18	; 0x33
    6af0:	3c ab       	std	Y+52, r19	; 0x34
    6af2:	62 c2       	rjmp	.+1220   	; 0x6fb8 <__udivdi3+0xcaa>
    6af4:	6e 14       	cp	r6, r14
    6af6:	7f 04       	cpc	r7, r15
    6af8:	80 06       	cpc	r8, r16
    6afa:	91 06       	cpc	r9, r17
    6afc:	08 f4       	brcc	.+2      	; 0x6b00 <__udivdi3+0x7f2>
    6afe:	51 c2       	rjmp	.+1186   	; 0x6fa2 <__udivdi3+0xc94>
    6b00:	20 e0       	ldi	r18, 0x00	; 0
    6b02:	e2 16       	cp	r14, r18
    6b04:	20 e0       	ldi	r18, 0x00	; 0
    6b06:	f2 06       	cpc	r15, r18
    6b08:	21 e0       	ldi	r18, 0x01	; 1
    6b0a:	02 07       	cpc	r16, r18
    6b0c:	20 e0       	ldi	r18, 0x00	; 0
    6b0e:	12 07       	cpc	r17, r18
    6b10:	88 f4       	brcc	.+34     	; 0x6b34 <__udivdi3+0x826>
    6b12:	3f ef       	ldi	r19, 0xFF	; 255
    6b14:	e3 16       	cp	r14, r19
    6b16:	f1 04       	cpc	r15, r1
    6b18:	01 05       	cpc	r16, r1
    6b1a:	11 05       	cpc	r17, r1
    6b1c:	31 f0       	breq	.+12     	; 0x6b2a <__udivdi3+0x81c>
    6b1e:	28 f0       	brcs	.+10     	; 0x6b2a <__udivdi3+0x81c>
    6b20:	48 e0       	ldi	r20, 0x08	; 8
    6b22:	50 e0       	ldi	r21, 0x00	; 0
    6b24:	60 e0       	ldi	r22, 0x00	; 0
    6b26:	70 e0       	ldi	r23, 0x00	; 0
    6b28:	17 c0       	rjmp	.+46     	; 0x6b58 <__udivdi3+0x84a>
    6b2a:	40 e0       	ldi	r20, 0x00	; 0
    6b2c:	50 e0       	ldi	r21, 0x00	; 0
    6b2e:	60 e0       	ldi	r22, 0x00	; 0
    6b30:	70 e0       	ldi	r23, 0x00	; 0
    6b32:	12 c0       	rjmp	.+36     	; 0x6b58 <__udivdi3+0x84a>
    6b34:	40 e0       	ldi	r20, 0x00	; 0
    6b36:	e4 16       	cp	r14, r20
    6b38:	40 e0       	ldi	r20, 0x00	; 0
    6b3a:	f4 06       	cpc	r15, r20
    6b3c:	40 e0       	ldi	r20, 0x00	; 0
    6b3e:	04 07       	cpc	r16, r20
    6b40:	41 e0       	ldi	r20, 0x01	; 1
    6b42:	14 07       	cpc	r17, r20
    6b44:	28 f0       	brcs	.+10     	; 0x6b50 <__udivdi3+0x842>
    6b46:	48 e1       	ldi	r20, 0x18	; 24
    6b48:	50 e0       	ldi	r21, 0x00	; 0
    6b4a:	60 e0       	ldi	r22, 0x00	; 0
    6b4c:	70 e0       	ldi	r23, 0x00	; 0
    6b4e:	04 c0       	rjmp	.+8      	; 0x6b58 <__udivdi3+0x84a>
    6b50:	40 e1       	ldi	r20, 0x10	; 16
    6b52:	50 e0       	ldi	r21, 0x00	; 0
    6b54:	60 e0       	ldi	r22, 0x00	; 0
    6b56:	70 e0       	ldi	r23, 0x00	; 0
    6b58:	d8 01       	movw	r26, r16
    6b5a:	c7 01       	movw	r24, r14
    6b5c:	04 2e       	mov	r0, r20
    6b5e:	04 c0       	rjmp	.+8      	; 0x6b68 <__udivdi3+0x85a>
    6b60:	b6 95       	lsr	r27
    6b62:	a7 95       	ror	r26
    6b64:	97 95       	ror	r25
    6b66:	87 95       	ror	r24
    6b68:	0a 94       	dec	r0
    6b6a:	d2 f7       	brpl	.-12     	; 0x6b60 <__udivdi3+0x852>
    6b6c:	84 5e       	subi	r24, 0xE4	; 228
    6b6e:	9f 4d       	sbci	r25, 0xDF	; 223
    6b70:	dc 01       	movw	r26, r24
    6b72:	2c 91       	ld	r18, X
    6b74:	30 e2       	ldi	r19, 0x20	; 32
    6b76:	a3 2e       	mov	r10, r19
    6b78:	b1 2c       	mov	r11, r1
    6b7a:	c1 2c       	mov	r12, r1
    6b7c:	d1 2c       	mov	r13, r1
    6b7e:	d6 01       	movw	r26, r12
    6b80:	c5 01       	movw	r24, r10
    6b82:	84 1b       	sub	r24, r20
    6b84:	95 0b       	sbc	r25, r21
    6b86:	a6 0b       	sbc	r26, r22
    6b88:	b7 0b       	sbc	r27, r23
    6b8a:	82 1b       	sub	r24, r18
    6b8c:	91 09       	sbc	r25, r1
    6b8e:	a1 09       	sbc	r26, r1
    6b90:	b1 09       	sbc	r27, r1
    6b92:	00 97       	sbiw	r24, 0x00	; 0
    6b94:	a1 05       	cpc	r26, r1
    6b96:	b1 05       	cpc	r27, r1
    6b98:	89 f4       	brne	.+34     	; 0x6bbc <__udivdi3+0x8ae>
    6b9a:	e6 14       	cp	r14, r6
    6b9c:	f7 04       	cpc	r15, r7
    6b9e:	08 05       	cpc	r16, r8
    6ba0:	19 05       	cpc	r17, r9
    6ba2:	08 f4       	brcc	.+2      	; 0x6ba6 <__udivdi3+0x898>
    6ba4:	f2 c1       	rjmp	.+996    	; 0x6f8a <__udivdi3+0xc7c>
    6ba6:	6d a4       	ldd	r6, Y+45	; 0x2d
    6ba8:	7e a4       	ldd	r7, Y+46	; 0x2e
    6baa:	8f a4       	ldd	r8, Y+47	; 0x2f
    6bac:	98 a8       	ldd	r9, Y+48	; 0x30
    6bae:	62 14       	cp	r6, r2
    6bb0:	73 04       	cpc	r7, r3
    6bb2:	84 04       	cpc	r8, r4
    6bb4:	95 04       	cpc	r9, r5
    6bb6:	08 f0       	brcs	.+2      	; 0x6bba <__udivdi3+0x8ac>
    6bb8:	e8 c1       	rjmp	.+976    	; 0x6f8a <__udivdi3+0xc7c>
    6bba:	f3 c1       	rjmp	.+998    	; 0x6fa2 <__udivdi3+0xc94>
    6bbc:	6e 96       	adiw	r28, 0x1e	; 30
    6bbe:	8f af       	std	Y+63, r24	; 0x3f
    6bc0:	6e 97       	sbiw	r28, 0x1e	; 30
    6bc2:	08 2e       	mov	r0, r24
    6bc4:	04 c0       	rjmp	.+8      	; 0x6bce <__udivdi3+0x8c0>
    6bc6:	ee 0c       	add	r14, r14
    6bc8:	ff 1c       	adc	r15, r15
    6bca:	00 1f       	adc	r16, r16
    6bcc:	11 1f       	adc	r17, r17
    6bce:	0a 94       	dec	r0
    6bd0:	d2 f7       	brpl	.-12     	; 0x6bc6 <__udivdi3+0x8b8>
    6bd2:	6a 2d       	mov	r22, r10
    6bd4:	68 1b       	sub	r22, r24
    6bd6:	d2 01       	movw	r26, r4
    6bd8:	c1 01       	movw	r24, r2
    6bda:	06 2e       	mov	r0, r22
    6bdc:	04 c0       	rjmp	.+8      	; 0x6be6 <__udivdi3+0x8d8>
    6bde:	b6 95       	lsr	r27
    6be0:	a7 95       	ror	r26
    6be2:	97 95       	ror	r25
    6be4:	87 95       	ror	r24
    6be6:	0a 94       	dec	r0
    6be8:	d2 f7       	brpl	.-12     	; 0x6bde <__udivdi3+0x8d0>
    6bea:	5c 01       	movw	r10, r24
    6bec:	6d 01       	movw	r12, r26
    6bee:	ae 28       	or	r10, r14
    6bf0:	bf 28       	or	r11, r15
    6bf2:	c0 2a       	or	r12, r16
    6bf4:	d1 2a       	or	r13, r17
    6bf6:	ad a2       	std	Y+37, r10	; 0x25
    6bf8:	be a2       	std	Y+38, r11	; 0x26
    6bfa:	cf a2       	std	Y+39, r12	; 0x27
    6bfc:	d8 a6       	std	Y+40, r13	; 0x28
    6bfe:	72 01       	movw	r14, r4
    6c00:	61 01       	movw	r12, r2
    6c02:	6e 96       	adiw	r28, 0x1e	; 30
    6c04:	0f ac       	ldd	r0, Y+63	; 0x3f
    6c06:	6e 97       	sbiw	r28, 0x1e	; 30
    6c08:	04 c0       	rjmp	.+8      	; 0x6c12 <__udivdi3+0x904>
    6c0a:	cc 0c       	add	r12, r12
    6c0c:	dd 1c       	adc	r13, r13
    6c0e:	ee 1c       	adc	r14, r14
    6c10:	ff 1c       	adc	r15, r15
    6c12:	0a 94       	dec	r0
    6c14:	d2 f7       	brpl	.-12     	; 0x6c0a <__udivdi3+0x8fc>
    6c16:	c9 a2       	std	Y+33, r12	; 0x21
    6c18:	da a2       	std	Y+34, r13	; 0x22
    6c1a:	eb a2       	std	Y+35, r14	; 0x23
    6c1c:	fc a2       	std	Y+36, r15	; 0x24
    6c1e:	64 01       	movw	r12, r8
    6c20:	53 01       	movw	r10, r6
    6c22:	06 2e       	mov	r0, r22
    6c24:	04 c0       	rjmp	.+8      	; 0x6c2e <__udivdi3+0x920>
    6c26:	d6 94       	lsr	r13
    6c28:	c7 94       	ror	r12
    6c2a:	b7 94       	ror	r11
    6c2c:	a7 94       	ror	r10
    6c2e:	0a 94       	dec	r0
    6c30:	d2 f7       	brpl	.-12     	; 0x6c26 <__udivdi3+0x918>
    6c32:	d4 01       	movw	r26, r8
    6c34:	c3 01       	movw	r24, r6
    6c36:	6e 96       	adiw	r28, 0x1e	; 30
    6c38:	0f ac       	ldd	r0, Y+63	; 0x3f
    6c3a:	6e 97       	sbiw	r28, 0x1e	; 30
    6c3c:	04 c0       	rjmp	.+8      	; 0x6c46 <__udivdi3+0x938>
    6c3e:	88 0f       	add	r24, r24
    6c40:	99 1f       	adc	r25, r25
    6c42:	aa 1f       	adc	r26, r26
    6c44:	bb 1f       	adc	r27, r27
    6c46:	0a 94       	dec	r0
    6c48:	d2 f7       	brpl	.-12     	; 0x6c3e <__udivdi3+0x930>
    6c4a:	ed a4       	ldd	r14, Y+45	; 0x2d
    6c4c:	fe a4       	ldd	r15, Y+46	; 0x2e
    6c4e:	0f a5       	ldd	r16, Y+47	; 0x2f
    6c50:	18 a9       	ldd	r17, Y+48	; 0x30
    6c52:	04 c0       	rjmp	.+8      	; 0x6c5c <__udivdi3+0x94e>
    6c54:	16 95       	lsr	r17
    6c56:	07 95       	ror	r16
    6c58:	f7 94       	ror	r15
    6c5a:	e7 94       	ror	r14
    6c5c:	6a 95       	dec	r22
    6c5e:	d2 f7       	brpl	.-12     	; 0x6c54 <__udivdi3+0x946>
    6c60:	37 01       	movw	r6, r14
    6c62:	48 01       	movw	r8, r16
    6c64:	68 2a       	or	r6, r24
    6c66:	79 2a       	or	r7, r25
    6c68:	8a 2a       	or	r8, r26
    6c6a:	9b 2a       	or	r9, r27
    6c6c:	6d 8e       	std	Y+29, r6	; 0x1d
    6c6e:	7e 8e       	std	Y+30, r7	; 0x1e
    6c70:	8f 8e       	std	Y+31, r8	; 0x1f
    6c72:	98 a2       	std	Y+32, r9	; 0x20
    6c74:	ed a0       	ldd	r14, Y+37	; 0x25
    6c76:	fe a0       	ldd	r15, Y+38	; 0x26
    6c78:	0f a1       	ldd	r16, Y+39	; 0x27
    6c7a:	18 a5       	ldd	r17, Y+40	; 0x28
    6c7c:	38 01       	movw	r6, r16
    6c7e:	88 24       	eor	r8, r8
    6c80:	99 24       	eor	r9, r9
    6c82:	98 01       	movw	r18, r16
    6c84:	87 01       	movw	r16, r14
    6c86:	20 70       	andi	r18, 0x00	; 0
    6c88:	30 70       	andi	r19, 0x00	; 0
    6c8a:	65 96       	adiw	r28, 0x15	; 21
    6c8c:	0c af       	std	Y+60, r16	; 0x3c
    6c8e:	1d af       	std	Y+61, r17	; 0x3d
    6c90:	2e af       	std	Y+62, r18	; 0x3e
    6c92:	3f af       	std	Y+63, r19	; 0x3f
    6c94:	65 97       	sbiw	r28, 0x15	; 21
    6c96:	c6 01       	movw	r24, r12
    6c98:	b5 01       	movw	r22, r10
    6c9a:	a4 01       	movw	r20, r8
    6c9c:	93 01       	movw	r18, r6
    6c9e:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__udivmodsi4>
    6ca2:	7b 01       	movw	r14, r22
    6ca4:	8c 01       	movw	r16, r24
    6ca6:	c6 01       	movw	r24, r12
    6ca8:	b5 01       	movw	r22, r10
    6caa:	a4 01       	movw	r20, r8
    6cac:	93 01       	movw	r18, r6
    6cae:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__udivmodsi4>
    6cb2:	c9 01       	movw	r24, r18
    6cb4:	da 01       	movw	r26, r20
    6cb6:	1c 01       	movw	r2, r24
    6cb8:	2d 01       	movw	r4, r26
    6cba:	c2 01       	movw	r24, r4
    6cbc:	b1 01       	movw	r22, r2
    6cbe:	65 96       	adiw	r28, 0x15	; 21
    6cc0:	2c ad       	ldd	r18, Y+60	; 0x3c
    6cc2:	3d ad       	ldd	r19, Y+61	; 0x3d
    6cc4:	4e ad       	ldd	r20, Y+62	; 0x3e
    6cc6:	5f ad       	ldd	r21, Y+63	; 0x3f
    6cc8:	65 97       	sbiw	r28, 0x15	; 21
    6cca:	0e 94 d9 3f 	call	0x7fb2	; 0x7fb2 <__mulsi3>
    6cce:	9b 01       	movw	r18, r22
    6cd0:	ac 01       	movw	r20, r24
    6cd2:	87 01       	movw	r16, r14
    6cd4:	ff 24       	eor	r15, r15
    6cd6:	ee 24       	eor	r14, r14
    6cd8:	ad 8c       	ldd	r10, Y+29	; 0x1d
    6cda:	be 8c       	ldd	r11, Y+30	; 0x1e
    6cdc:	cf 8c       	ldd	r12, Y+31	; 0x1f
    6cde:	d8 a0       	ldd	r13, Y+32	; 0x20
    6ce0:	c6 01       	movw	r24, r12
    6ce2:	aa 27       	eor	r26, r26
    6ce4:	bb 27       	eor	r27, r27
    6ce6:	57 01       	movw	r10, r14
    6ce8:	68 01       	movw	r12, r16
    6cea:	a8 2a       	or	r10, r24
    6cec:	b9 2a       	or	r11, r25
    6cee:	ca 2a       	or	r12, r26
    6cf0:	db 2a       	or	r13, r27
    6cf2:	a2 16       	cp	r10, r18
    6cf4:	b3 06       	cpc	r11, r19
    6cf6:	c4 06       	cpc	r12, r20
    6cf8:	d5 06       	cpc	r13, r21
    6cfa:	00 f5       	brcc	.+64     	; 0x6d3c <__udivdi3+0xa2e>
    6cfc:	08 94       	sec
    6cfe:	21 08       	sbc	r2, r1
    6d00:	31 08       	sbc	r3, r1
    6d02:	41 08       	sbc	r4, r1
    6d04:	51 08       	sbc	r5, r1
    6d06:	ed a0       	ldd	r14, Y+37	; 0x25
    6d08:	fe a0       	ldd	r15, Y+38	; 0x26
    6d0a:	0f a1       	ldd	r16, Y+39	; 0x27
    6d0c:	18 a5       	ldd	r17, Y+40	; 0x28
    6d0e:	ae 0c       	add	r10, r14
    6d10:	bf 1c       	adc	r11, r15
    6d12:	c0 1e       	adc	r12, r16
    6d14:	d1 1e       	adc	r13, r17
    6d16:	ae 14       	cp	r10, r14
    6d18:	bf 04       	cpc	r11, r15
    6d1a:	c0 06       	cpc	r12, r16
    6d1c:	d1 06       	cpc	r13, r17
    6d1e:	70 f0       	brcs	.+28     	; 0x6d3c <__udivdi3+0xa2e>
    6d20:	a2 16       	cp	r10, r18
    6d22:	b3 06       	cpc	r11, r19
    6d24:	c4 06       	cpc	r12, r20
    6d26:	d5 06       	cpc	r13, r21
    6d28:	48 f4       	brcc	.+18     	; 0x6d3c <__udivdi3+0xa2e>
    6d2a:	08 94       	sec
    6d2c:	21 08       	sbc	r2, r1
    6d2e:	31 08       	sbc	r3, r1
    6d30:	41 08       	sbc	r4, r1
    6d32:	51 08       	sbc	r5, r1
    6d34:	ae 0c       	add	r10, r14
    6d36:	bf 1c       	adc	r11, r15
    6d38:	c0 1e       	adc	r12, r16
    6d3a:	d1 1e       	adc	r13, r17
    6d3c:	a2 1a       	sub	r10, r18
    6d3e:	b3 0a       	sbc	r11, r19
    6d40:	c4 0a       	sbc	r12, r20
    6d42:	d5 0a       	sbc	r13, r21
    6d44:	c6 01       	movw	r24, r12
    6d46:	b5 01       	movw	r22, r10
    6d48:	a4 01       	movw	r20, r8
    6d4a:	93 01       	movw	r18, r6
    6d4c:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__udivmodsi4>
    6d50:	7b 01       	movw	r14, r22
    6d52:	8c 01       	movw	r16, r24
    6d54:	c6 01       	movw	r24, r12
    6d56:	b5 01       	movw	r22, r10
    6d58:	a4 01       	movw	r20, r8
    6d5a:	93 01       	movw	r18, r6
    6d5c:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <__udivmodsi4>
    6d60:	c9 01       	movw	r24, r18
    6d62:	da 01       	movw	r26, r20
    6d64:	3c 01       	movw	r6, r24
    6d66:	4d 01       	movw	r8, r26
    6d68:	c4 01       	movw	r24, r8
    6d6a:	b3 01       	movw	r22, r6
    6d6c:	65 96       	adiw	r28, 0x15	; 21
    6d6e:	2c ad       	ldd	r18, Y+60	; 0x3c
    6d70:	3d ad       	ldd	r19, Y+61	; 0x3d
    6d72:	4e ad       	ldd	r20, Y+62	; 0x3e
    6d74:	5f ad       	ldd	r21, Y+63	; 0x3f
    6d76:	65 97       	sbiw	r28, 0x15	; 21
    6d78:	0e 94 d9 3f 	call	0x7fb2	; 0x7fb2 <__mulsi3>
    6d7c:	9b 01       	movw	r18, r22
    6d7e:	ac 01       	movw	r20, r24
    6d80:	87 01       	movw	r16, r14
    6d82:	ff 24       	eor	r15, r15
    6d84:	ee 24       	eor	r14, r14
    6d86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6d88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6d8a:	af 8d       	ldd	r26, Y+31	; 0x1f
    6d8c:	b8 a1       	ldd	r27, Y+32	; 0x20
    6d8e:	a0 70       	andi	r26, 0x00	; 0
    6d90:	b0 70       	andi	r27, 0x00	; 0
    6d92:	57 01       	movw	r10, r14
    6d94:	68 01       	movw	r12, r16
    6d96:	a8 2a       	or	r10, r24
    6d98:	b9 2a       	or	r11, r25
    6d9a:	ca 2a       	or	r12, r26
    6d9c:	db 2a       	or	r13, r27
    6d9e:	a2 16       	cp	r10, r18
    6da0:	b3 06       	cpc	r11, r19
    6da2:	c4 06       	cpc	r12, r20
    6da4:	d5 06       	cpc	r13, r21
    6da6:	00 f5       	brcc	.+64     	; 0x6de8 <__udivdi3+0xada>
    6da8:	08 94       	sec
    6daa:	61 08       	sbc	r6, r1
    6dac:	71 08       	sbc	r7, r1
    6dae:	81 08       	sbc	r8, r1
    6db0:	91 08       	sbc	r9, r1
    6db2:	6d a1       	ldd	r22, Y+37	; 0x25
    6db4:	7e a1       	ldd	r23, Y+38	; 0x26
    6db6:	8f a1       	ldd	r24, Y+39	; 0x27
    6db8:	98 a5       	ldd	r25, Y+40	; 0x28
    6dba:	a6 0e       	add	r10, r22
    6dbc:	b7 1e       	adc	r11, r23
    6dbe:	c8 1e       	adc	r12, r24
    6dc0:	d9 1e       	adc	r13, r25
    6dc2:	a6 16       	cp	r10, r22
    6dc4:	b7 06       	cpc	r11, r23
    6dc6:	c8 06       	cpc	r12, r24
    6dc8:	d9 06       	cpc	r13, r25
    6dca:	70 f0       	brcs	.+28     	; 0x6de8 <__udivdi3+0xada>
    6dcc:	a2 16       	cp	r10, r18
    6dce:	b3 06       	cpc	r11, r19
    6dd0:	c4 06       	cpc	r12, r20
    6dd2:	d5 06       	cpc	r13, r21
    6dd4:	48 f4       	brcc	.+18     	; 0x6de8 <__udivdi3+0xada>
    6dd6:	08 94       	sec
    6dd8:	61 08       	sbc	r6, r1
    6dda:	71 08       	sbc	r7, r1
    6ddc:	81 08       	sbc	r8, r1
    6dde:	91 08       	sbc	r9, r1
    6de0:	a6 0e       	add	r10, r22
    6de2:	b7 1e       	adc	r11, r23
    6de4:	c8 1e       	adc	r12, r24
    6de6:	d9 1e       	adc	r13, r25
    6de8:	d6 01       	movw	r26, r12
    6dea:	c5 01       	movw	r24, r10
    6dec:	82 1b       	sub	r24, r18
    6dee:	93 0b       	sbc	r25, r19
    6df0:	a4 0b       	sbc	r26, r20
    6df2:	b5 0b       	sbc	r27, r21
    6df4:	89 8f       	std	Y+25, r24	; 0x19
    6df6:	9a 8f       	std	Y+26, r25	; 0x1a
    6df8:	ab 8f       	std	Y+27, r26	; 0x1b
    6dfa:	bc 8f       	std	Y+28, r27	; 0x1c
    6dfc:	d1 01       	movw	r26, r2
    6dfe:	99 27       	eor	r25, r25
    6e00:	88 27       	eor	r24, r24
    6e02:	64 01       	movw	r12, r8
    6e04:	53 01       	movw	r10, r6
    6e06:	a8 2a       	or	r10, r24
    6e08:	b9 2a       	or	r11, r25
    6e0a:	ca 2a       	or	r12, r26
    6e0c:	db 2a       	or	r13, r27
    6e0e:	a9 aa       	std	Y+49, r10	; 0x31
    6e10:	ba aa       	std	Y+50, r11	; 0x32
    6e12:	cb aa       	std	Y+51, r12	; 0x33
    6e14:	dc aa       	std	Y+52, r13	; 0x34
    6e16:	86 01       	movw	r16, r12
    6e18:	75 01       	movw	r14, r10
    6e1a:	2f ef       	ldi	r18, 0xFF	; 255
    6e1c:	3f ef       	ldi	r19, 0xFF	; 255
    6e1e:	40 e0       	ldi	r20, 0x00	; 0
    6e20:	50 e0       	ldi	r21, 0x00	; 0
    6e22:	e2 22       	and	r14, r18
    6e24:	f3 22       	and	r15, r19
    6e26:	04 23       	and	r16, r20
    6e28:	15 23       	and	r17, r21
    6e2a:	a6 01       	movw	r20, r12
    6e2c:	66 27       	eor	r22, r22
    6e2e:	77 27       	eor	r23, r23
    6e30:	6d 96       	adiw	r28, 0x1d	; 29
    6e32:	4c af       	std	Y+60, r20	; 0x3c
    6e34:	5d af       	std	Y+61, r21	; 0x3d
    6e36:	6e af       	std	Y+62, r22	; 0x3e
    6e38:	7f af       	std	Y+63, r23	; 0x3f
    6e3a:	6d 97       	sbiw	r28, 0x1d	; 29
    6e3c:	a9 a0       	ldd	r10, Y+33	; 0x21
    6e3e:	ba a0       	ldd	r11, Y+34	; 0x22
    6e40:	cb a0       	ldd	r12, Y+35	; 0x23
    6e42:	dc a0       	ldd	r13, Y+36	; 0x24
    6e44:	6f ef       	ldi	r22, 0xFF	; 255
    6e46:	7f ef       	ldi	r23, 0xFF	; 255
    6e48:	80 e0       	ldi	r24, 0x00	; 0
    6e4a:	90 e0       	ldi	r25, 0x00	; 0
    6e4c:	a6 22       	and	r10, r22
    6e4e:	b7 22       	and	r11, r23
    6e50:	c8 22       	and	r12, r24
    6e52:	d9 22       	and	r13, r25
    6e54:	89 a1       	ldd	r24, Y+33	; 0x21
    6e56:	9a a1       	ldd	r25, Y+34	; 0x22
    6e58:	ab a1       	ldd	r26, Y+35	; 0x23
    6e5a:	bc a1       	ldd	r27, Y+36	; 0x24
    6e5c:	1d 01       	movw	r2, r26
    6e5e:	44 24       	eor	r4, r4
    6e60:	55 24       	eor	r5, r5
    6e62:	c8 01       	movw	r24, r16
    6e64:	b7 01       	movw	r22, r14
    6e66:	a6 01       	movw	r20, r12
    6e68:	95 01       	movw	r18, r10
    6e6a:	0e 94 d9 3f 	call	0x7fb2	; 0x7fb2 <__mulsi3>
    6e6e:	69 96       	adiw	r28, 0x19	; 25
    6e70:	6c af       	std	Y+60, r22	; 0x3c
    6e72:	7d af       	std	Y+61, r23	; 0x3d
    6e74:	8e af       	std	Y+62, r24	; 0x3e
    6e76:	9f af       	std	Y+63, r25	; 0x3f
    6e78:	69 97       	sbiw	r28, 0x19	; 25
    6e7a:	c8 01       	movw	r24, r16
    6e7c:	b7 01       	movw	r22, r14
    6e7e:	a2 01       	movw	r20, r4
    6e80:	91 01       	movw	r18, r2
    6e82:	0e 94 d9 3f 	call	0x7fb2	; 0x7fb2 <__mulsi3>
    6e86:	3b 01       	movw	r6, r22
    6e88:	4c 01       	movw	r8, r24
    6e8a:	6d 96       	adiw	r28, 0x1d	; 29
    6e8c:	6c ad       	ldd	r22, Y+60	; 0x3c
    6e8e:	7d ad       	ldd	r23, Y+61	; 0x3d
    6e90:	8e ad       	ldd	r24, Y+62	; 0x3e
    6e92:	9f ad       	ldd	r25, Y+63	; 0x3f
    6e94:	6d 97       	sbiw	r28, 0x1d	; 29
    6e96:	a6 01       	movw	r20, r12
    6e98:	95 01       	movw	r18, r10
    6e9a:	0e 94 d9 3f 	call	0x7fb2	; 0x7fb2 <__mulsi3>
    6e9e:	7b 01       	movw	r14, r22
    6ea0:	8c 01       	movw	r16, r24
    6ea2:	6d 96       	adiw	r28, 0x1d	; 29
    6ea4:	6c ad       	ldd	r22, Y+60	; 0x3c
    6ea6:	7d ad       	ldd	r23, Y+61	; 0x3d
    6ea8:	8e ad       	ldd	r24, Y+62	; 0x3e
    6eaa:	9f ad       	ldd	r25, Y+63	; 0x3f
    6eac:	6d 97       	sbiw	r28, 0x1d	; 29
    6eae:	a2 01       	movw	r20, r4
    6eb0:	91 01       	movw	r18, r2
    6eb2:	0e 94 d9 3f 	call	0x7fb2	; 0x7fb2 <__mulsi3>
    6eb6:	5b 01       	movw	r10, r22
    6eb8:	6c 01       	movw	r12, r24
    6eba:	a8 01       	movw	r20, r16
    6ebc:	97 01       	movw	r18, r14
    6ebe:	26 0d       	add	r18, r6
    6ec0:	37 1d       	adc	r19, r7
    6ec2:	48 1d       	adc	r20, r8
    6ec4:	59 1d       	adc	r21, r9
    6ec6:	69 96       	adiw	r28, 0x19	; 25
    6ec8:	6c ac       	ldd	r6, Y+60	; 0x3c
    6eca:	7d ac       	ldd	r7, Y+61	; 0x3d
    6ecc:	8e ac       	ldd	r8, Y+62	; 0x3e
    6ece:	9f ac       	ldd	r9, Y+63	; 0x3f
    6ed0:	69 97       	sbiw	r28, 0x19	; 25
    6ed2:	c4 01       	movw	r24, r8
    6ed4:	aa 27       	eor	r26, r26
    6ed6:	bb 27       	eor	r27, r27
    6ed8:	28 0f       	add	r18, r24
    6eda:	39 1f       	adc	r19, r25
    6edc:	4a 1f       	adc	r20, r26
    6ede:	5b 1f       	adc	r21, r27
    6ee0:	2e 15       	cp	r18, r14
    6ee2:	3f 05       	cpc	r19, r15
    6ee4:	40 07       	cpc	r20, r16
    6ee6:	51 07       	cpc	r21, r17
    6ee8:	48 f4       	brcc	.+18     	; 0x6efc <__udivdi3+0xbee>
    6eea:	e1 2c       	mov	r14, r1
    6eec:	f1 2c       	mov	r15, r1
    6eee:	61 e0       	ldi	r22, 0x01	; 1
    6ef0:	06 2f       	mov	r16, r22
    6ef2:	11 2d       	mov	r17, r1
    6ef4:	ae 0c       	add	r10, r14
    6ef6:	bf 1c       	adc	r11, r15
    6ef8:	c0 1e       	adc	r12, r16
    6efa:	d1 1e       	adc	r13, r17
    6efc:	ca 01       	movw	r24, r20
    6efe:	aa 27       	eor	r26, r26
    6f00:	bb 27       	eor	r27, r27
    6f02:	bc 01       	movw	r22, r24
    6f04:	cd 01       	movw	r24, r26
    6f06:	6a 0d       	add	r22, r10
    6f08:	7b 1d       	adc	r23, r11
    6f0a:	8c 1d       	adc	r24, r12
    6f0c:	9d 1d       	adc	r25, r13
    6f0e:	69 8c       	ldd	r6, Y+25	; 0x19
    6f10:	7a 8c       	ldd	r7, Y+26	; 0x1a
    6f12:	8b 8c       	ldd	r8, Y+27	; 0x1b
    6f14:	9c 8c       	ldd	r9, Y+28	; 0x1c
    6f16:	66 16       	cp	r6, r22
    6f18:	77 06       	cpc	r7, r23
    6f1a:	88 06       	cpc	r8, r24
    6f1c:	99 06       	cpc	r9, r25
    6f1e:	40 f1       	brcs	.+80     	; 0x6f70 <__udivdi3+0xc62>
    6f20:	66 15       	cp	r22, r6
    6f22:	77 05       	cpc	r23, r7
    6f24:	88 05       	cpc	r24, r8
    6f26:	99 05       	cpc	r25, r9
    6f28:	09 f0       	breq	.+2      	; 0x6f2c <__udivdi3+0xc1e>
    6f2a:	43 c0       	rjmp	.+134    	; 0x6fb2 <__udivdi3+0xca4>
    6f2c:	d9 01       	movw	r26, r18
    6f2e:	99 27       	eor	r25, r25
    6f30:	88 27       	eor	r24, r24
    6f32:	69 96       	adiw	r28, 0x19	; 25
    6f34:	2c ad       	ldd	r18, Y+60	; 0x3c
    6f36:	3d ad       	ldd	r19, Y+61	; 0x3d
    6f38:	4e ad       	ldd	r20, Y+62	; 0x3e
    6f3a:	5f ad       	ldd	r21, Y+63	; 0x3f
    6f3c:	69 97       	sbiw	r28, 0x19	; 25
    6f3e:	40 70       	andi	r20, 0x00	; 0
    6f40:	50 70       	andi	r21, 0x00	; 0
    6f42:	82 0f       	add	r24, r18
    6f44:	93 1f       	adc	r25, r19
    6f46:	a4 1f       	adc	r26, r20
    6f48:	b5 1f       	adc	r27, r21
    6f4a:	2d a5       	ldd	r18, Y+45	; 0x2d
    6f4c:	3e a5       	ldd	r19, Y+46	; 0x2e
    6f4e:	4f a5       	ldd	r20, Y+47	; 0x2f
    6f50:	58 a9       	ldd	r21, Y+48	; 0x30
    6f52:	6e 96       	adiw	r28, 0x1e	; 30
    6f54:	0f ac       	ldd	r0, Y+63	; 0x3f
    6f56:	6e 97       	sbiw	r28, 0x1e	; 30
    6f58:	04 c0       	rjmp	.+8      	; 0x6f62 <__udivdi3+0xc54>
    6f5a:	22 0f       	add	r18, r18
    6f5c:	33 1f       	adc	r19, r19
    6f5e:	44 1f       	adc	r20, r20
    6f60:	55 1f       	adc	r21, r21
    6f62:	0a 94       	dec	r0
    6f64:	d2 f7       	brpl	.-12     	; 0x6f5a <__udivdi3+0xc4c>
    6f66:	28 17       	cp	r18, r24
    6f68:	39 07       	cpc	r19, r25
    6f6a:	4a 07       	cpc	r20, r26
    6f6c:	5b 07       	cpc	r21, r27
    6f6e:	08 f5       	brcc	.+66     	; 0x6fb2 <__udivdi3+0xca4>
    6f70:	09 a9       	ldd	r16, Y+49	; 0x31
    6f72:	1a a9       	ldd	r17, Y+50	; 0x32
    6f74:	2b a9       	ldd	r18, Y+51	; 0x33
    6f76:	3c a9       	ldd	r19, Y+52	; 0x34
    6f78:	01 50       	subi	r16, 0x01	; 1
    6f7a:	10 40       	sbci	r17, 0x00	; 0
    6f7c:	20 40       	sbci	r18, 0x00	; 0
    6f7e:	30 40       	sbci	r19, 0x00	; 0
    6f80:	09 ab       	std	Y+49, r16	; 0x31
    6f82:	1a ab       	std	Y+50, r17	; 0x32
    6f84:	2b ab       	std	Y+51, r18	; 0x33
    6f86:	3c ab       	std	Y+52, r19	; 0x34
    6f88:	14 c0       	rjmp	.+40     	; 0x6fb2 <__udivdi3+0xca4>
    6f8a:	66 24       	eor	r6, r6
    6f8c:	77 24       	eor	r7, r7
    6f8e:	43 01       	movw	r8, r6
    6f90:	21 e0       	ldi	r18, 0x01	; 1
    6f92:	30 e0       	ldi	r19, 0x00	; 0
    6f94:	40 e0       	ldi	r20, 0x00	; 0
    6f96:	50 e0       	ldi	r21, 0x00	; 0
    6f98:	29 ab       	std	Y+49, r18	; 0x31
    6f9a:	3a ab       	std	Y+50, r19	; 0x32
    6f9c:	4b ab       	std	Y+51, r20	; 0x33
    6f9e:	5c ab       	std	Y+52, r21	; 0x34
    6fa0:	0b c0       	rjmp	.+22     	; 0x6fb8 <__udivdi3+0xcaa>
    6fa2:	66 24       	eor	r6, r6
    6fa4:	77 24       	eor	r7, r7
    6fa6:	43 01       	movw	r8, r6
    6fa8:	19 aa       	std	Y+49, r1	; 0x31
    6faa:	1a aa       	std	Y+50, r1	; 0x32
    6fac:	1b aa       	std	Y+51, r1	; 0x33
    6fae:	1c aa       	std	Y+52, r1	; 0x34
    6fb0:	03 c0       	rjmp	.+6      	; 0x6fb8 <__udivdi3+0xcaa>
    6fb2:	66 24       	eor	r6, r6
    6fb4:	77 24       	eor	r7, r7
    6fb6:	43 01       	movw	r8, r6
    6fb8:	fe 01       	movw	r30, r28
    6fba:	71 96       	adiw	r30, 0x11	; 17
    6fbc:	88 e0       	ldi	r24, 0x08	; 8
    6fbe:	df 01       	movw	r26, r30
    6fc0:	1d 92       	st	X+, r1
    6fc2:	8a 95       	dec	r24
    6fc4:	e9 f7       	brne	.-6      	; 0x6fc0 <__udivdi3+0xcb2>
    6fc6:	a9 a8       	ldd	r10, Y+49	; 0x31
    6fc8:	ba a8       	ldd	r11, Y+50	; 0x32
    6fca:	cb a8       	ldd	r12, Y+51	; 0x33
    6fcc:	dc a8       	ldd	r13, Y+52	; 0x34
    6fce:	a9 8a       	std	Y+17, r10	; 0x11
    6fd0:	ba 8a       	std	Y+18, r11	; 0x12
    6fd2:	cb 8a       	std	Y+19, r12	; 0x13
    6fd4:	dc 8a       	std	Y+20, r13	; 0x14
    6fd6:	6d 8a       	std	Y+21, r6	; 0x15
    6fd8:	7e 8a       	std	Y+22, r7	; 0x16
    6fda:	8f 8a       	std	Y+23, r8	; 0x17
    6fdc:	98 8e       	std	Y+24, r9	; 0x18
    6fde:	29 a9       	ldd	r18, Y+49	; 0x31
    6fe0:	3a 89       	ldd	r19, Y+18	; 0x12
    6fe2:	4b 89       	ldd	r20, Y+19	; 0x13
    6fe4:	5c 89       	ldd	r21, Y+20	; 0x14
    6fe6:	66 2d       	mov	r22, r6
    6fe8:	7e 89       	ldd	r23, Y+22	; 0x16
    6fea:	8f 89       	ldd	r24, Y+23	; 0x17
    6fec:	98 8d       	ldd	r25, Y+24	; 0x18
    6fee:	c2 5a       	subi	r28, 0xA2	; 162
    6ff0:	df 4f       	sbci	r29, 0xFF	; 255
    6ff2:	e2 e1       	ldi	r30, 0x12	; 18
    6ff4:	0c 94 36 40 	jmp	0x806c	; 0x806c <__epilogue_restores__>

00006ff8 <vfprintf>:
    6ff8:	2f 92       	push	r2
    6ffa:	3f 92       	push	r3
    6ffc:	4f 92       	push	r4
    6ffe:	5f 92       	push	r5
    7000:	6f 92       	push	r6
    7002:	7f 92       	push	r7
    7004:	8f 92       	push	r8
    7006:	9f 92       	push	r9
    7008:	af 92       	push	r10
    700a:	bf 92       	push	r11
    700c:	cf 92       	push	r12
    700e:	df 92       	push	r13
    7010:	ef 92       	push	r14
    7012:	ff 92       	push	r15
    7014:	0f 93       	push	r16
    7016:	1f 93       	push	r17
    7018:	df 93       	push	r29
    701a:	cf 93       	push	r28
    701c:	cd b7       	in	r28, 0x3d	; 61
    701e:	de b7       	in	r29, 0x3e	; 62
    7020:	61 97       	sbiw	r28, 0x11	; 17
    7022:	cd bf       	out	0x3d, r28	; 61
    7024:	de bf       	out	0x3e, r29	; 62
    7026:	3c 01       	movw	r6, r24
    7028:	6e 87       	std	Y+14, r22	; 0x0e
    702a:	7f 87       	std	Y+15, r23	; 0x0f
    702c:	6a 01       	movw	r12, r20
    702e:	fc 01       	movw	r30, r24
    7030:	16 82       	std	Z+6, r1	; 0x06
    7032:	17 82       	std	Z+7, r1	; 0x07
    7034:	83 81       	ldd	r24, Z+3	; 0x03
    7036:	81 fd       	sbrc	r24, 1
    7038:	03 c0       	rjmp	.+6      	; 0x7040 <vfprintf+0x48>
    703a:	6f ef       	ldi	r22, 0xFF	; 255
    703c:	7f ef       	ldi	r23, 0xFF	; 255
    703e:	6f c3       	rjmp	.+1758   	; 0x771e <vfprintf+0x726>
    7040:	9e 01       	movw	r18, r28
    7042:	2f 5f       	subi	r18, 0xFF	; 255
    7044:	3f 4f       	sbci	r19, 0xFF	; 255
    7046:	28 8b       	std	Y+16, r18	; 0x10
    7048:	39 8b       	std	Y+17, r19	; 0x11
    704a:	f3 01       	movw	r30, r6
    704c:	23 81       	ldd	r18, Z+3	; 0x03
    704e:	ee 85       	ldd	r30, Y+14	; 0x0e
    7050:	ff 85       	ldd	r31, Y+15	; 0x0f
    7052:	23 fd       	sbrc	r18, 3
    7054:	85 91       	lpm	r24, Z+
    7056:	23 ff       	sbrs	r18, 3
    7058:	81 91       	ld	r24, Z+
    705a:	ee 87       	std	Y+14, r30	; 0x0e
    705c:	ff 87       	std	Y+15, r31	; 0x0f
    705e:	88 23       	and	r24, r24
    7060:	09 f4       	brne	.+2      	; 0x7064 <vfprintf+0x6c>
    7062:	5a c3       	rjmp	.+1716   	; 0x7718 <vfprintf+0x720>
    7064:	85 32       	cpi	r24, 0x25	; 37
    7066:	51 f4       	brne	.+20     	; 0x707c <vfprintf+0x84>
    7068:	ee 85       	ldd	r30, Y+14	; 0x0e
    706a:	ff 85       	ldd	r31, Y+15	; 0x0f
    706c:	23 fd       	sbrc	r18, 3
    706e:	85 91       	lpm	r24, Z+
    7070:	23 ff       	sbrs	r18, 3
    7072:	81 91       	ld	r24, Z+
    7074:	ee 87       	std	Y+14, r30	; 0x0e
    7076:	ff 87       	std	Y+15, r31	; 0x0f
    7078:	85 32       	cpi	r24, 0x25	; 37
    707a:	29 f4       	brne	.+10     	; 0x7086 <vfprintf+0x8e>
    707c:	90 e0       	ldi	r25, 0x00	; 0
    707e:	b3 01       	movw	r22, r6
    7080:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    7084:	e2 cf       	rjmp	.-60     	; 0x704a <vfprintf+0x52>
    7086:	98 2f       	mov	r25, r24
    7088:	10 e0       	ldi	r17, 0x00	; 0
    708a:	88 24       	eor	r8, r8
    708c:	99 24       	eor	r9, r9
    708e:	10 32       	cpi	r17, 0x20	; 32
    7090:	b0 f4       	brcc	.+44     	; 0x70be <vfprintf+0xc6>
    7092:	9b 32       	cpi	r25, 0x2B	; 43
    7094:	69 f0       	breq	.+26     	; 0x70b0 <vfprintf+0xb8>
    7096:	9c 32       	cpi	r25, 0x2C	; 44
    7098:	28 f4       	brcc	.+10     	; 0x70a4 <vfprintf+0xac>
    709a:	90 32       	cpi	r25, 0x20	; 32
    709c:	51 f0       	breq	.+20     	; 0x70b2 <vfprintf+0xba>
    709e:	93 32       	cpi	r25, 0x23	; 35
    70a0:	71 f4       	brne	.+28     	; 0x70be <vfprintf+0xc6>
    70a2:	0b c0       	rjmp	.+22     	; 0x70ba <vfprintf+0xc2>
    70a4:	9d 32       	cpi	r25, 0x2D	; 45
    70a6:	39 f0       	breq	.+14     	; 0x70b6 <vfprintf+0xbe>
    70a8:	90 33       	cpi	r25, 0x30	; 48
    70aa:	49 f4       	brne	.+18     	; 0x70be <vfprintf+0xc6>
    70ac:	11 60       	ori	r17, 0x01	; 1
    70ae:	28 c0       	rjmp	.+80     	; 0x7100 <vfprintf+0x108>
    70b0:	12 60       	ori	r17, 0x02	; 2
    70b2:	14 60       	ori	r17, 0x04	; 4
    70b4:	25 c0       	rjmp	.+74     	; 0x7100 <vfprintf+0x108>
    70b6:	18 60       	ori	r17, 0x08	; 8
    70b8:	23 c0       	rjmp	.+70     	; 0x7100 <vfprintf+0x108>
    70ba:	10 61       	ori	r17, 0x10	; 16
    70bc:	21 c0       	rjmp	.+66     	; 0x7100 <vfprintf+0x108>
    70be:	17 fd       	sbrc	r17, 7
    70c0:	2a c0       	rjmp	.+84     	; 0x7116 <vfprintf+0x11e>
    70c2:	89 2f       	mov	r24, r25
    70c4:	80 53       	subi	r24, 0x30	; 48
    70c6:	8a 30       	cpi	r24, 0x0A	; 10
    70c8:	78 f4       	brcc	.+30     	; 0x70e8 <vfprintf+0xf0>
    70ca:	16 ff       	sbrs	r17, 6
    70cc:	06 c0       	rjmp	.+12     	; 0x70da <vfprintf+0xe2>
    70ce:	fa e0       	ldi	r31, 0x0A	; 10
    70d0:	9f 9e       	mul	r9, r31
    70d2:	90 2c       	mov	r9, r0
    70d4:	11 24       	eor	r1, r1
    70d6:	98 0e       	add	r9, r24
    70d8:	13 c0       	rjmp	.+38     	; 0x7100 <vfprintf+0x108>
    70da:	3a e0       	ldi	r19, 0x0A	; 10
    70dc:	83 9e       	mul	r8, r19
    70de:	80 2c       	mov	r8, r0
    70e0:	11 24       	eor	r1, r1
    70e2:	88 0e       	add	r8, r24
    70e4:	10 62       	ori	r17, 0x20	; 32
    70e6:	0c c0       	rjmp	.+24     	; 0x7100 <vfprintf+0x108>
    70e8:	9e 32       	cpi	r25, 0x2E	; 46
    70ea:	21 f4       	brne	.+8      	; 0x70f4 <vfprintf+0xfc>
    70ec:	16 fd       	sbrc	r17, 6
    70ee:	14 c3       	rjmp	.+1576   	; 0x7718 <vfprintf+0x720>
    70f0:	10 64       	ori	r17, 0x40	; 64
    70f2:	06 c0       	rjmp	.+12     	; 0x7100 <vfprintf+0x108>
    70f4:	9c 36       	cpi	r25, 0x6C	; 108
    70f6:	11 f4       	brne	.+4      	; 0x70fc <vfprintf+0x104>
    70f8:	10 68       	ori	r17, 0x80	; 128
    70fa:	02 c0       	rjmp	.+4      	; 0x7100 <vfprintf+0x108>
    70fc:	98 36       	cpi	r25, 0x68	; 104
    70fe:	59 f4       	brne	.+22     	; 0x7116 <vfprintf+0x11e>
    7100:	ee 85       	ldd	r30, Y+14	; 0x0e
    7102:	ff 85       	ldd	r31, Y+15	; 0x0f
    7104:	23 fd       	sbrc	r18, 3
    7106:	95 91       	lpm	r25, Z+
    7108:	23 ff       	sbrs	r18, 3
    710a:	91 91       	ld	r25, Z+
    710c:	ee 87       	std	Y+14, r30	; 0x0e
    710e:	ff 87       	std	Y+15, r31	; 0x0f
    7110:	99 23       	and	r25, r25
    7112:	09 f0       	breq	.+2      	; 0x7116 <vfprintf+0x11e>
    7114:	bc cf       	rjmp	.-136    	; 0x708e <vfprintf+0x96>
    7116:	89 2f       	mov	r24, r25
    7118:	85 54       	subi	r24, 0x45	; 69
    711a:	83 30       	cpi	r24, 0x03	; 3
    711c:	20 f4       	brcc	.+8      	; 0x7126 <vfprintf+0x12e>
    711e:	81 2f       	mov	r24, r17
    7120:	80 61       	ori	r24, 0x10	; 16
    7122:	90 5e       	subi	r25, 0xE0	; 224
    7124:	07 c0       	rjmp	.+14     	; 0x7134 <vfprintf+0x13c>
    7126:	89 2f       	mov	r24, r25
    7128:	85 56       	subi	r24, 0x65	; 101
    712a:	83 30       	cpi	r24, 0x03	; 3
    712c:	08 f0       	brcs	.+2      	; 0x7130 <vfprintf+0x138>
    712e:	9f c1       	rjmp	.+830    	; 0x746e <vfprintf+0x476>
    7130:	81 2f       	mov	r24, r17
    7132:	8f 7e       	andi	r24, 0xEF	; 239
    7134:	86 fd       	sbrc	r24, 6
    7136:	02 c0       	rjmp	.+4      	; 0x713c <vfprintf+0x144>
    7138:	76 e0       	ldi	r23, 0x06	; 6
    713a:	97 2e       	mov	r9, r23
    713c:	6f e3       	ldi	r22, 0x3F	; 63
    713e:	f6 2e       	mov	r15, r22
    7140:	f8 22       	and	r15, r24
    7142:	95 36       	cpi	r25, 0x65	; 101
    7144:	19 f4       	brne	.+6      	; 0x714c <vfprintf+0x154>
    7146:	f0 e4       	ldi	r31, 0x40	; 64
    7148:	ff 2a       	or	r15, r31
    714a:	07 c0       	rjmp	.+14     	; 0x715a <vfprintf+0x162>
    714c:	96 36       	cpi	r25, 0x66	; 102
    714e:	19 f4       	brne	.+6      	; 0x7156 <vfprintf+0x15e>
    7150:	20 e8       	ldi	r18, 0x80	; 128
    7152:	f2 2a       	or	r15, r18
    7154:	02 c0       	rjmp	.+4      	; 0x715a <vfprintf+0x162>
    7156:	91 10       	cpse	r9, r1
    7158:	9a 94       	dec	r9
    715a:	f7 fe       	sbrs	r15, 7
    715c:	0a c0       	rjmp	.+20     	; 0x7172 <vfprintf+0x17a>
    715e:	3b e3       	ldi	r19, 0x3B	; 59
    7160:	39 15       	cp	r19, r9
    7162:	18 f4       	brcc	.+6      	; 0x716a <vfprintf+0x172>
    7164:	5c e3       	ldi	r21, 0x3C	; 60
    7166:	b5 2e       	mov	r11, r21
    7168:	02 c0       	rjmp	.+4      	; 0x716e <vfprintf+0x176>
    716a:	b9 2c       	mov	r11, r9
    716c:	b3 94       	inc	r11
    716e:	27 e0       	ldi	r18, 0x07	; 7
    7170:	09 c0       	rjmp	.+18     	; 0x7184 <vfprintf+0x18c>
    7172:	47 e0       	ldi	r20, 0x07	; 7
    7174:	49 15       	cp	r20, r9
    7176:	20 f4       	brcc	.+8      	; 0x7180 <vfprintf+0x188>
    7178:	bb 24       	eor	r11, r11
    717a:	47 e0       	ldi	r20, 0x07	; 7
    717c:	94 2e       	mov	r9, r20
    717e:	f7 cf       	rjmp	.-18     	; 0x716e <vfprintf+0x176>
    7180:	29 2d       	mov	r18, r9
    7182:	bb 24       	eor	r11, r11
    7184:	c6 01       	movw	r24, r12
    7186:	04 96       	adiw	r24, 0x04	; 4
    7188:	8c 87       	std	Y+12, r24	; 0x0c
    718a:	9d 87       	std	Y+13, r25	; 0x0d
    718c:	f6 01       	movw	r30, r12
    718e:	60 81       	ld	r22, Z
    7190:	71 81       	ldd	r23, Z+1	; 0x01
    7192:	82 81       	ldd	r24, Z+2	; 0x02
    7194:	93 81       	ldd	r25, Z+3	; 0x03
    7196:	ae 01       	movw	r20, r28
    7198:	4f 5f       	subi	r20, 0xFF	; 255
    719a:	5f 4f       	sbci	r21, 0xFF	; 255
    719c:	0b 2d       	mov	r16, r11
    719e:	0e 94 dd 41 	call	0x83ba	; 0x83ba <__ftoa_engine>
    71a2:	6c 01       	movw	r12, r24
    71a4:	09 81       	ldd	r16, Y+1	; 0x01
    71a6:	20 2e       	mov	r2, r16
    71a8:	33 24       	eor	r3, r3
    71aa:	00 ff       	sbrs	r16, 0
    71ac:	04 c0       	rjmp	.+8      	; 0x71b6 <vfprintf+0x1be>
    71ae:	03 fd       	sbrc	r16, 3
    71b0:	02 c0       	rjmp	.+4      	; 0x71b6 <vfprintf+0x1be>
    71b2:	1d e2       	ldi	r17, 0x2D	; 45
    71b4:	09 c0       	rjmp	.+18     	; 0x71c8 <vfprintf+0x1d0>
    71b6:	f1 fe       	sbrs	r15, 1
    71b8:	02 c0       	rjmp	.+4      	; 0x71be <vfprintf+0x1c6>
    71ba:	1b e2       	ldi	r17, 0x2B	; 43
    71bc:	05 c0       	rjmp	.+10     	; 0x71c8 <vfprintf+0x1d0>
    71be:	f2 fc       	sbrc	r15, 2
    71c0:	02 c0       	rjmp	.+4      	; 0x71c6 <vfprintf+0x1ce>
    71c2:	10 e0       	ldi	r17, 0x00	; 0
    71c4:	01 c0       	rjmp	.+2      	; 0x71c8 <vfprintf+0x1d0>
    71c6:	10 e2       	ldi	r17, 0x20	; 32
    71c8:	c1 01       	movw	r24, r2
    71ca:	8c 70       	andi	r24, 0x0C	; 12
    71cc:	90 70       	andi	r25, 0x00	; 0
    71ce:	89 2b       	or	r24, r25
    71d0:	b9 f1       	breq	.+110    	; 0x7240 <vfprintf+0x248>
    71d2:	11 23       	and	r17, r17
    71d4:	11 f4       	brne	.+4      	; 0x71da <vfprintf+0x1e2>
    71d6:	83 e0       	ldi	r24, 0x03	; 3
    71d8:	01 c0       	rjmp	.+2      	; 0x71dc <vfprintf+0x1e4>
    71da:	84 e0       	ldi	r24, 0x04	; 4
    71dc:	88 15       	cp	r24, r8
    71de:	10 f0       	brcs	.+4      	; 0x71e4 <vfprintf+0x1ec>
    71e0:	88 24       	eor	r8, r8
    71e2:	0a c0       	rjmp	.+20     	; 0x71f8 <vfprintf+0x200>
    71e4:	88 1a       	sub	r8, r24
    71e6:	f3 fc       	sbrc	r15, 3
    71e8:	07 c0       	rjmp	.+14     	; 0x71f8 <vfprintf+0x200>
    71ea:	80 e2       	ldi	r24, 0x20	; 32
    71ec:	90 e0       	ldi	r25, 0x00	; 0
    71ee:	b3 01       	movw	r22, r6
    71f0:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    71f4:	8a 94       	dec	r8
    71f6:	c9 f7       	brne	.-14     	; 0x71ea <vfprintf+0x1f2>
    71f8:	11 23       	and	r17, r17
    71fa:	29 f0       	breq	.+10     	; 0x7206 <vfprintf+0x20e>
    71fc:	81 2f       	mov	r24, r17
    71fe:	90 e0       	ldi	r25, 0x00	; 0
    7200:	b3 01       	movw	r22, r6
    7202:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    7206:	23 fe       	sbrs	r2, 3
    7208:	03 c0       	rjmp	.+6      	; 0x7210 <vfprintf+0x218>
    720a:	03 e3       	ldi	r16, 0x33	; 51
    720c:	12 e0       	ldi	r17, 0x02	; 2
    720e:	0e c0       	rjmp	.+28     	; 0x722c <vfprintf+0x234>
    7210:	07 e3       	ldi	r16, 0x37	; 55
    7212:	12 e0       	ldi	r17, 0x02	; 2
    7214:	0b c0       	rjmp	.+22     	; 0x722c <vfprintf+0x234>
    7216:	e1 14       	cp	r14, r1
    7218:	f1 04       	cpc	r15, r1
    721a:	09 f0       	breq	.+2      	; 0x721e <vfprintf+0x226>
    721c:	80 52       	subi	r24, 0x20	; 32
    721e:	90 e0       	ldi	r25, 0x00	; 0
    7220:	b3 01       	movw	r22, r6
    7222:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    7226:	0f 5f       	subi	r16, 0xFF	; 255
    7228:	1f 4f       	sbci	r17, 0xFF	; 255
    722a:	05 c0       	rjmp	.+10     	; 0x7236 <vfprintf+0x23e>
    722c:	ef 2c       	mov	r14, r15
    722e:	ff 24       	eor	r15, r15
    7230:	f0 e1       	ldi	r31, 0x10	; 16
    7232:	ef 22       	and	r14, r31
    7234:	ff 24       	eor	r15, r15
    7236:	f8 01       	movw	r30, r16
    7238:	84 91       	lpm	r24, Z+
    723a:	88 23       	and	r24, r24
    723c:	61 f7       	brne	.-40     	; 0x7216 <vfprintf+0x21e>
    723e:	14 c1       	rjmp	.+552    	; 0x7468 <vfprintf+0x470>
    7240:	f7 fe       	sbrs	r15, 7
    7242:	12 c0       	rjmp	.+36     	; 0x7268 <vfprintf+0x270>
    7244:	bc 0c       	add	r11, r12
    7246:	24 fe       	sbrs	r2, 4
    7248:	04 c0       	rjmp	.+8      	; 0x7252 <vfprintf+0x25a>
    724a:	8a 81       	ldd	r24, Y+2	; 0x02
    724c:	81 33       	cpi	r24, 0x31	; 49
    724e:	09 f4       	brne	.+2      	; 0x7252 <vfprintf+0x25a>
    7250:	ba 94       	dec	r11
    7252:	1b 14       	cp	r1, r11
    7254:	1c f0       	brlt	.+6      	; 0x725c <vfprintf+0x264>
    7256:	bb 24       	eor	r11, r11
    7258:	b3 94       	inc	r11
    725a:	2d c0       	rjmp	.+90     	; 0x72b6 <vfprintf+0x2be>
    725c:	f8 e0       	ldi	r31, 0x08	; 8
    725e:	fb 15       	cp	r31, r11
    7260:	50 f5       	brcc	.+84     	; 0x72b6 <vfprintf+0x2be>
    7262:	38 e0       	ldi	r19, 0x08	; 8
    7264:	b3 2e       	mov	r11, r19
    7266:	27 c0       	rjmp	.+78     	; 0x72b6 <vfprintf+0x2be>
    7268:	f6 fc       	sbrc	r15, 6
    726a:	25 c0       	rjmp	.+74     	; 0x72b6 <vfprintf+0x2be>
    726c:	89 2d       	mov	r24, r9
    726e:	90 e0       	ldi	r25, 0x00	; 0
    7270:	8c 15       	cp	r24, r12
    7272:	9d 05       	cpc	r25, r13
    7274:	4c f0       	brlt	.+18     	; 0x7288 <vfprintf+0x290>
    7276:	2c ef       	ldi	r18, 0xFC	; 252
    7278:	c2 16       	cp	r12, r18
    727a:	2f ef       	ldi	r18, 0xFF	; 255
    727c:	d2 06       	cpc	r13, r18
    727e:	24 f0       	brlt	.+8      	; 0x7288 <vfprintf+0x290>
    7280:	30 e8       	ldi	r19, 0x80	; 128
    7282:	f3 2a       	or	r15, r19
    7284:	01 c0       	rjmp	.+2      	; 0x7288 <vfprintf+0x290>
    7286:	9a 94       	dec	r9
    7288:	99 20       	and	r9, r9
    728a:	49 f0       	breq	.+18     	; 0x729e <vfprintf+0x2a6>
    728c:	e2 e0       	ldi	r30, 0x02	; 2
    728e:	f0 e0       	ldi	r31, 0x00	; 0
    7290:	ec 0f       	add	r30, r28
    7292:	fd 1f       	adc	r31, r29
    7294:	e9 0d       	add	r30, r9
    7296:	f1 1d       	adc	r31, r1
    7298:	80 81       	ld	r24, Z
    729a:	80 33       	cpi	r24, 0x30	; 48
    729c:	a1 f3       	breq	.-24     	; 0x7286 <vfprintf+0x28e>
    729e:	f7 fe       	sbrs	r15, 7
    72a0:	0a c0       	rjmp	.+20     	; 0x72b6 <vfprintf+0x2be>
    72a2:	b9 2c       	mov	r11, r9
    72a4:	b3 94       	inc	r11
    72a6:	89 2d       	mov	r24, r9
    72a8:	90 e0       	ldi	r25, 0x00	; 0
    72aa:	c8 16       	cp	r12, r24
    72ac:	d9 06       	cpc	r13, r25
    72ae:	14 f0       	brlt	.+4      	; 0x72b4 <vfprintf+0x2bc>
    72b0:	99 24       	eor	r9, r9
    72b2:	01 c0       	rjmp	.+2      	; 0x72b6 <vfprintf+0x2be>
    72b4:	9c 18       	sub	r9, r12
    72b6:	f7 fc       	sbrc	r15, 7
    72b8:	03 c0       	rjmp	.+6      	; 0x72c0 <vfprintf+0x2c8>
    72ba:	25 e0       	ldi	r18, 0x05	; 5
    72bc:	30 e0       	ldi	r19, 0x00	; 0
    72be:	09 c0       	rjmp	.+18     	; 0x72d2 <vfprintf+0x2da>
    72c0:	1c 14       	cp	r1, r12
    72c2:	1d 04       	cpc	r1, r13
    72c4:	1c f0       	brlt	.+6      	; 0x72cc <vfprintf+0x2d4>
    72c6:	21 e0       	ldi	r18, 0x01	; 1
    72c8:	30 e0       	ldi	r19, 0x00	; 0
    72ca:	03 c0       	rjmp	.+6      	; 0x72d2 <vfprintf+0x2da>
    72cc:	96 01       	movw	r18, r12
    72ce:	2f 5f       	subi	r18, 0xFF	; 255
    72d0:	3f 4f       	sbci	r19, 0xFF	; 255
    72d2:	11 23       	and	r17, r17
    72d4:	11 f0       	breq	.+4      	; 0x72da <vfprintf+0x2e2>
    72d6:	2f 5f       	subi	r18, 0xFF	; 255
    72d8:	3f 4f       	sbci	r19, 0xFF	; 255
    72da:	99 20       	and	r9, r9
    72dc:	29 f0       	breq	.+10     	; 0x72e8 <vfprintf+0x2f0>
    72de:	89 2d       	mov	r24, r9
    72e0:	90 e0       	ldi	r25, 0x00	; 0
    72e2:	01 96       	adiw	r24, 0x01	; 1
    72e4:	28 0f       	add	r18, r24
    72e6:	39 1f       	adc	r19, r25
    72e8:	88 2d       	mov	r24, r8
    72ea:	90 e0       	ldi	r25, 0x00	; 0
    72ec:	28 17       	cp	r18, r24
    72ee:	39 07       	cpc	r19, r25
    72f0:	14 f0       	brlt	.+4      	; 0x72f6 <vfprintf+0x2fe>
    72f2:	88 24       	eor	r8, r8
    72f4:	01 c0       	rjmp	.+2      	; 0x72f8 <vfprintf+0x300>
    72f6:	82 1a       	sub	r8, r18
    72f8:	4f 2c       	mov	r4, r15
    72fa:	55 24       	eor	r5, r5
    72fc:	c2 01       	movw	r24, r4
    72fe:	89 70       	andi	r24, 0x09	; 9
    7300:	90 70       	andi	r25, 0x00	; 0
    7302:	89 2b       	or	r24, r25
    7304:	39 f0       	breq	.+14     	; 0x7314 <vfprintf+0x31c>
    7306:	08 c0       	rjmp	.+16     	; 0x7318 <vfprintf+0x320>
    7308:	80 e2       	ldi	r24, 0x20	; 32
    730a:	90 e0       	ldi	r25, 0x00	; 0
    730c:	b3 01       	movw	r22, r6
    730e:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    7312:	8a 94       	dec	r8
    7314:	88 20       	and	r8, r8
    7316:	c1 f7       	brne	.-16     	; 0x7308 <vfprintf+0x310>
    7318:	11 23       	and	r17, r17
    731a:	29 f0       	breq	.+10     	; 0x7326 <vfprintf+0x32e>
    731c:	81 2f       	mov	r24, r17
    731e:	90 e0       	ldi	r25, 0x00	; 0
    7320:	b3 01       	movw	r22, r6
    7322:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    7326:	43 fe       	sbrs	r4, 3
    7328:	07 c0       	rjmp	.+14     	; 0x7338 <vfprintf+0x340>
    732a:	08 c0       	rjmp	.+16     	; 0x733c <vfprintf+0x344>
    732c:	80 e3       	ldi	r24, 0x30	; 48
    732e:	90 e0       	ldi	r25, 0x00	; 0
    7330:	b3 01       	movw	r22, r6
    7332:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    7336:	8a 94       	dec	r8
    7338:	88 20       	and	r8, r8
    733a:	c1 f7       	brne	.-16     	; 0x732c <vfprintf+0x334>
    733c:	f7 fe       	sbrs	r15, 7
    733e:	46 c0       	rjmp	.+140    	; 0x73cc <vfprintf+0x3d4>
    7340:	86 01       	movw	r16, r12
    7342:	d7 fe       	sbrs	r13, 7
    7344:	02 c0       	rjmp	.+4      	; 0x734a <vfprintf+0x352>
    7346:	00 e0       	ldi	r16, 0x00	; 0
    7348:	10 e0       	ldi	r17, 0x00	; 0
    734a:	76 01       	movw	r14, r12
    734c:	08 94       	sec
    734e:	e1 1c       	adc	r14, r1
    7350:	f1 1c       	adc	r15, r1
    7352:	e0 1a       	sub	r14, r16
    7354:	f1 0a       	sbc	r15, r17
    7356:	41 e0       	ldi	r20, 0x01	; 1
    7358:	50 e0       	ldi	r21, 0x00	; 0
    735a:	4c 0f       	add	r20, r28
    735c:	5d 1f       	adc	r21, r29
    735e:	e4 0e       	add	r14, r20
    7360:	f5 1e       	adc	r15, r21
    7362:	26 01       	movw	r4, r12
    7364:	4b 18       	sub	r4, r11
    7366:	51 08       	sbc	r5, r1
    7368:	89 2d       	mov	r24, r9
    736a:	90 e0       	ldi	r25, 0x00	; 0
    736c:	aa 24       	eor	r10, r10
    736e:	bb 24       	eor	r11, r11
    7370:	a8 1a       	sub	r10, r24
    7372:	b9 0a       	sbc	r11, r25
    7374:	5f ef       	ldi	r21, 0xFF	; 255
    7376:	0f 3f       	cpi	r16, 0xFF	; 255
    7378:	15 07       	cpc	r17, r21
    737a:	29 f4       	brne	.+10     	; 0x7386 <vfprintf+0x38e>
    737c:	8e e2       	ldi	r24, 0x2E	; 46
    737e:	90 e0       	ldi	r25, 0x00	; 0
    7380:	b3 01       	movw	r22, r6
    7382:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    7386:	c0 16       	cp	r12, r16
    7388:	d1 06       	cpc	r13, r17
    738a:	34 f0       	brlt	.+12     	; 0x7398 <vfprintf+0x3a0>
    738c:	40 16       	cp	r4, r16
    738e:	51 06       	cpc	r5, r17
    7390:	1c f4       	brge	.+6      	; 0x7398 <vfprintf+0x3a0>
    7392:	f7 01       	movw	r30, r14
    7394:	80 81       	ld	r24, Z
    7396:	01 c0       	rjmp	.+2      	; 0x739a <vfprintf+0x3a2>
    7398:	80 e3       	ldi	r24, 0x30	; 48
    739a:	01 50       	subi	r16, 0x01	; 1
    739c:	10 40       	sbci	r17, 0x00	; 0
    739e:	08 94       	sec
    73a0:	e1 1c       	adc	r14, r1
    73a2:	f1 1c       	adc	r15, r1
    73a4:	0a 15       	cp	r16, r10
    73a6:	1b 05       	cpc	r17, r11
    73a8:	2c f0       	brlt	.+10     	; 0x73b4 <vfprintf+0x3bc>
    73aa:	90 e0       	ldi	r25, 0x00	; 0
    73ac:	b3 01       	movw	r22, r6
    73ae:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    73b2:	e0 cf       	rjmp	.-64     	; 0x7374 <vfprintf+0x37c>
    73b4:	0c 15       	cp	r16, r12
    73b6:	1d 05       	cpc	r17, r13
    73b8:	39 f4       	brne	.+14     	; 0x73c8 <vfprintf+0x3d0>
    73ba:	9a 81       	ldd	r25, Y+2	; 0x02
    73bc:	96 33       	cpi	r25, 0x36	; 54
    73be:	18 f4       	brcc	.+6      	; 0x73c6 <vfprintf+0x3ce>
    73c0:	95 33       	cpi	r25, 0x35	; 53
    73c2:	11 f4       	brne	.+4      	; 0x73c8 <vfprintf+0x3d0>
    73c4:	24 fe       	sbrs	r2, 4
    73c6:	81 e3       	ldi	r24, 0x31	; 49
    73c8:	90 e0       	ldi	r25, 0x00	; 0
    73ca:	4b c0       	rjmp	.+150    	; 0x7462 <vfprintf+0x46a>
    73cc:	8a 81       	ldd	r24, Y+2	; 0x02
    73ce:	81 33       	cpi	r24, 0x31	; 49
    73d0:	09 f0       	breq	.+2      	; 0x73d4 <vfprintf+0x3dc>
    73d2:	0f 7e       	andi	r16, 0xEF	; 239
    73d4:	90 e0       	ldi	r25, 0x00	; 0
    73d6:	b3 01       	movw	r22, r6
    73d8:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    73dc:	99 20       	and	r9, r9
    73de:	a1 f0       	breq	.+40     	; 0x7408 <vfprintf+0x410>
    73e0:	8e e2       	ldi	r24, 0x2E	; 46
    73e2:	90 e0       	ldi	r25, 0x00	; 0
    73e4:	b3 01       	movw	r22, r6
    73e6:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    73ea:	12 e0       	ldi	r17, 0x02	; 2
    73ec:	e1 e0       	ldi	r30, 0x01	; 1
    73ee:	f0 e0       	ldi	r31, 0x00	; 0
    73f0:	ec 0f       	add	r30, r28
    73f2:	fd 1f       	adc	r31, r29
    73f4:	e1 0f       	add	r30, r17
    73f6:	f1 1d       	adc	r31, r1
    73f8:	1f 5f       	subi	r17, 0xFF	; 255
    73fa:	80 81       	ld	r24, Z
    73fc:	90 e0       	ldi	r25, 0x00	; 0
    73fe:	b3 01       	movw	r22, r6
    7400:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    7404:	9a 94       	dec	r9
    7406:	91 f7       	brne	.-28     	; 0x73ec <vfprintf+0x3f4>
    7408:	44 fc       	sbrc	r4, 4
    740a:	03 c0       	rjmp	.+6      	; 0x7412 <vfprintf+0x41a>
    740c:	85 e6       	ldi	r24, 0x65	; 101
    740e:	90 e0       	ldi	r25, 0x00	; 0
    7410:	02 c0       	rjmp	.+4      	; 0x7416 <vfprintf+0x41e>
    7412:	85 e4       	ldi	r24, 0x45	; 69
    7414:	90 e0       	ldi	r25, 0x00	; 0
    7416:	b3 01       	movw	r22, r6
    7418:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    741c:	d7 fc       	sbrc	r13, 7
    741e:	05 c0       	rjmp	.+10     	; 0x742a <vfprintf+0x432>
    7420:	c1 14       	cp	r12, r1
    7422:	d1 04       	cpc	r13, r1
    7424:	41 f4       	brne	.+16     	; 0x7436 <vfprintf+0x43e>
    7426:	04 ff       	sbrs	r16, 4
    7428:	06 c0       	rjmp	.+12     	; 0x7436 <vfprintf+0x43e>
    742a:	d0 94       	com	r13
    742c:	c1 94       	neg	r12
    742e:	d1 08       	sbc	r13, r1
    7430:	d3 94       	inc	r13
    7432:	8d e2       	ldi	r24, 0x2D	; 45
    7434:	01 c0       	rjmp	.+2      	; 0x7438 <vfprintf+0x440>
    7436:	8b e2       	ldi	r24, 0x2B	; 43
    7438:	90 e0       	ldi	r25, 0x00	; 0
    743a:	b3 01       	movw	r22, r6
    743c:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    7440:	80 e3       	ldi	r24, 0x30	; 48
    7442:	05 c0       	rjmp	.+10     	; 0x744e <vfprintf+0x456>
    7444:	8f 5f       	subi	r24, 0xFF	; 255
    7446:	26 ef       	ldi	r18, 0xF6	; 246
    7448:	3f ef       	ldi	r19, 0xFF	; 255
    744a:	c2 0e       	add	r12, r18
    744c:	d3 1e       	adc	r13, r19
    744e:	3a e0       	ldi	r19, 0x0A	; 10
    7450:	c3 16       	cp	r12, r19
    7452:	d1 04       	cpc	r13, r1
    7454:	bc f7       	brge	.-18     	; 0x7444 <vfprintf+0x44c>
    7456:	90 e0       	ldi	r25, 0x00	; 0
    7458:	b3 01       	movw	r22, r6
    745a:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    745e:	c6 01       	movw	r24, r12
    7460:	c0 96       	adiw	r24, 0x30	; 48
    7462:	b3 01       	movw	r22, r6
    7464:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    7468:	cc 84       	ldd	r12, Y+12	; 0x0c
    746a:	dd 84       	ldd	r13, Y+13	; 0x0d
    746c:	52 c1       	rjmp	.+676    	; 0x7712 <vfprintf+0x71a>
    746e:	93 36       	cpi	r25, 0x63	; 99
    7470:	31 f0       	breq	.+12     	; 0x747e <vfprintf+0x486>
    7472:	93 37       	cpi	r25, 0x73	; 115
    7474:	99 f0       	breq	.+38     	; 0x749c <vfprintf+0x4a4>
    7476:	93 35       	cpi	r25, 0x53	; 83
    7478:	09 f0       	breq	.+2      	; 0x747c <vfprintf+0x484>
    747a:	59 c0       	rjmp	.+178    	; 0x752e <vfprintf+0x536>
    747c:	23 c0       	rjmp	.+70     	; 0x74c4 <vfprintf+0x4cc>
    747e:	f6 01       	movw	r30, r12
    7480:	80 81       	ld	r24, Z
    7482:	89 83       	std	Y+1, r24	; 0x01
    7484:	5e 01       	movw	r10, r28
    7486:	08 94       	sec
    7488:	a1 1c       	adc	r10, r1
    748a:	b1 1c       	adc	r11, r1
    748c:	22 e0       	ldi	r18, 0x02	; 2
    748e:	30 e0       	ldi	r19, 0x00	; 0
    7490:	c2 0e       	add	r12, r18
    7492:	d3 1e       	adc	r13, r19
    7494:	21 e0       	ldi	r18, 0x01	; 1
    7496:	e2 2e       	mov	r14, r18
    7498:	f1 2c       	mov	r15, r1
    749a:	12 c0       	rjmp	.+36     	; 0x74c0 <vfprintf+0x4c8>
    749c:	f6 01       	movw	r30, r12
    749e:	a0 80       	ld	r10, Z
    74a0:	b1 80       	ldd	r11, Z+1	; 0x01
    74a2:	16 fd       	sbrc	r17, 6
    74a4:	03 c0       	rjmp	.+6      	; 0x74ac <vfprintf+0x4b4>
    74a6:	6f ef       	ldi	r22, 0xFF	; 255
    74a8:	7f ef       	ldi	r23, 0xFF	; 255
    74aa:	02 c0       	rjmp	.+4      	; 0x74b0 <vfprintf+0x4b8>
    74ac:	69 2d       	mov	r22, r9
    74ae:	70 e0       	ldi	r23, 0x00	; 0
    74b0:	22 e0       	ldi	r18, 0x02	; 2
    74b2:	30 e0       	ldi	r19, 0x00	; 0
    74b4:	c2 0e       	add	r12, r18
    74b6:	d3 1e       	adc	r13, r19
    74b8:	c5 01       	movw	r24, r10
    74ba:	0e 94 e0 42 	call	0x85c0	; 0x85c0 <strnlen>
    74be:	7c 01       	movw	r14, r24
    74c0:	1f 77       	andi	r17, 0x7F	; 127
    74c2:	13 c0       	rjmp	.+38     	; 0x74ea <vfprintf+0x4f2>
    74c4:	f6 01       	movw	r30, r12
    74c6:	a0 80       	ld	r10, Z
    74c8:	b1 80       	ldd	r11, Z+1	; 0x01
    74ca:	16 fd       	sbrc	r17, 6
    74cc:	03 c0       	rjmp	.+6      	; 0x74d4 <vfprintf+0x4dc>
    74ce:	6f ef       	ldi	r22, 0xFF	; 255
    74d0:	7f ef       	ldi	r23, 0xFF	; 255
    74d2:	02 c0       	rjmp	.+4      	; 0x74d8 <vfprintf+0x4e0>
    74d4:	69 2d       	mov	r22, r9
    74d6:	70 e0       	ldi	r23, 0x00	; 0
    74d8:	22 e0       	ldi	r18, 0x02	; 2
    74da:	30 e0       	ldi	r19, 0x00	; 0
    74dc:	c2 0e       	add	r12, r18
    74de:	d3 1e       	adc	r13, r19
    74e0:	c5 01       	movw	r24, r10
    74e2:	0e 94 d5 42 	call	0x85aa	; 0x85aa <strnlen_P>
    74e6:	7c 01       	movw	r14, r24
    74e8:	10 68       	ori	r17, 0x80	; 128
    74ea:	13 ff       	sbrs	r17, 3
    74ec:	07 c0       	rjmp	.+14     	; 0x74fc <vfprintf+0x504>
    74ee:	1b c0       	rjmp	.+54     	; 0x7526 <vfprintf+0x52e>
    74f0:	80 e2       	ldi	r24, 0x20	; 32
    74f2:	90 e0       	ldi	r25, 0x00	; 0
    74f4:	b3 01       	movw	r22, r6
    74f6:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    74fa:	8a 94       	dec	r8
    74fc:	88 2d       	mov	r24, r8
    74fe:	90 e0       	ldi	r25, 0x00	; 0
    7500:	e8 16       	cp	r14, r24
    7502:	f9 06       	cpc	r15, r25
    7504:	a8 f3       	brcs	.-22     	; 0x74f0 <vfprintf+0x4f8>
    7506:	0f c0       	rjmp	.+30     	; 0x7526 <vfprintf+0x52e>
    7508:	f5 01       	movw	r30, r10
    750a:	17 fd       	sbrc	r17, 7
    750c:	85 91       	lpm	r24, Z+
    750e:	17 ff       	sbrs	r17, 7
    7510:	81 91       	ld	r24, Z+
    7512:	5f 01       	movw	r10, r30
    7514:	90 e0       	ldi	r25, 0x00	; 0
    7516:	b3 01       	movw	r22, r6
    7518:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    751c:	81 10       	cpse	r8, r1
    751e:	8a 94       	dec	r8
    7520:	08 94       	sec
    7522:	e1 08       	sbc	r14, r1
    7524:	f1 08       	sbc	r15, r1
    7526:	e1 14       	cp	r14, r1
    7528:	f1 04       	cpc	r15, r1
    752a:	71 f7       	brne	.-36     	; 0x7508 <vfprintf+0x510>
    752c:	f2 c0       	rjmp	.+484    	; 0x7712 <vfprintf+0x71a>
    752e:	94 36       	cpi	r25, 0x64	; 100
    7530:	11 f0       	breq	.+4      	; 0x7536 <vfprintf+0x53e>
    7532:	99 36       	cpi	r25, 0x69	; 105
    7534:	89 f5       	brne	.+98     	; 0x7598 <vfprintf+0x5a0>
    7536:	17 ff       	sbrs	r17, 7
    7538:	08 c0       	rjmp	.+16     	; 0x754a <vfprintf+0x552>
    753a:	f6 01       	movw	r30, r12
    753c:	20 81       	ld	r18, Z
    753e:	31 81       	ldd	r19, Z+1	; 0x01
    7540:	42 81       	ldd	r20, Z+2	; 0x02
    7542:	53 81       	ldd	r21, Z+3	; 0x03
    7544:	84 e0       	ldi	r24, 0x04	; 4
    7546:	90 e0       	ldi	r25, 0x00	; 0
    7548:	0a c0       	rjmp	.+20     	; 0x755e <vfprintf+0x566>
    754a:	f6 01       	movw	r30, r12
    754c:	80 81       	ld	r24, Z
    754e:	91 81       	ldd	r25, Z+1	; 0x01
    7550:	9c 01       	movw	r18, r24
    7552:	44 27       	eor	r20, r20
    7554:	37 fd       	sbrc	r19, 7
    7556:	40 95       	com	r20
    7558:	54 2f       	mov	r21, r20
    755a:	82 e0       	ldi	r24, 0x02	; 2
    755c:	90 e0       	ldi	r25, 0x00	; 0
    755e:	c8 0e       	add	r12, r24
    7560:	d9 1e       	adc	r13, r25
    7562:	9f e6       	ldi	r25, 0x6F	; 111
    7564:	f9 2e       	mov	r15, r25
    7566:	f1 22       	and	r15, r17
    7568:	57 ff       	sbrs	r21, 7
    756a:	09 c0       	rjmp	.+18     	; 0x757e <vfprintf+0x586>
    756c:	50 95       	com	r21
    756e:	40 95       	com	r20
    7570:	30 95       	com	r19
    7572:	21 95       	neg	r18
    7574:	3f 4f       	sbci	r19, 0xFF	; 255
    7576:	4f 4f       	sbci	r20, 0xFF	; 255
    7578:	5f 4f       	sbci	r21, 0xFF	; 255
    757a:	90 e8       	ldi	r25, 0x80	; 128
    757c:	f9 2a       	or	r15, r25
    757e:	ca 01       	movw	r24, r20
    7580:	b9 01       	movw	r22, r18
    7582:	ae 01       	movw	r20, r28
    7584:	4f 5f       	subi	r20, 0xFF	; 255
    7586:	5f 4f       	sbci	r21, 0xFF	; 255
    7588:	2a e0       	ldi	r18, 0x0A	; 10
    758a:	30 e0       	ldi	r19, 0x00	; 0
    758c:	0e 94 7a 43 	call	0x86f4	; 0x86f4 <__ultoa_invert>
    7590:	e8 2e       	mov	r14, r24
    7592:	e8 89       	ldd	r30, Y+16	; 0x10
    7594:	ee 1a       	sub	r14, r30
    7596:	41 c0       	rjmp	.+130    	; 0x761a <vfprintf+0x622>
    7598:	95 37       	cpi	r25, 0x75	; 117
    759a:	21 f4       	brne	.+8      	; 0x75a4 <vfprintf+0x5ac>
    759c:	1f 7e       	andi	r17, 0xEF	; 239
    759e:	2a e0       	ldi	r18, 0x0A	; 10
    75a0:	30 e0       	ldi	r19, 0x00	; 0
    75a2:	1c c0       	rjmp	.+56     	; 0x75dc <vfprintf+0x5e4>
    75a4:	19 7f       	andi	r17, 0xF9	; 249
    75a6:	9f 36       	cpi	r25, 0x6F	; 111
    75a8:	61 f0       	breq	.+24     	; 0x75c2 <vfprintf+0x5ca>
    75aa:	90 37       	cpi	r25, 0x70	; 112
    75ac:	20 f4       	brcc	.+8      	; 0x75b6 <vfprintf+0x5be>
    75ae:	98 35       	cpi	r25, 0x58	; 88
    75b0:	09 f0       	breq	.+2      	; 0x75b4 <vfprintf+0x5bc>
    75b2:	b2 c0       	rjmp	.+356    	; 0x7718 <vfprintf+0x720>
    75b4:	0f c0       	rjmp	.+30     	; 0x75d4 <vfprintf+0x5dc>
    75b6:	90 37       	cpi	r25, 0x70	; 112
    75b8:	39 f0       	breq	.+14     	; 0x75c8 <vfprintf+0x5d0>
    75ba:	98 37       	cpi	r25, 0x78	; 120
    75bc:	09 f0       	breq	.+2      	; 0x75c0 <vfprintf+0x5c8>
    75be:	ac c0       	rjmp	.+344    	; 0x7718 <vfprintf+0x720>
    75c0:	04 c0       	rjmp	.+8      	; 0x75ca <vfprintf+0x5d2>
    75c2:	28 e0       	ldi	r18, 0x08	; 8
    75c4:	30 e0       	ldi	r19, 0x00	; 0
    75c6:	0a c0       	rjmp	.+20     	; 0x75dc <vfprintf+0x5e4>
    75c8:	10 61       	ori	r17, 0x10	; 16
    75ca:	14 fd       	sbrc	r17, 4
    75cc:	14 60       	ori	r17, 0x04	; 4
    75ce:	20 e1       	ldi	r18, 0x10	; 16
    75d0:	30 e0       	ldi	r19, 0x00	; 0
    75d2:	04 c0       	rjmp	.+8      	; 0x75dc <vfprintf+0x5e4>
    75d4:	14 fd       	sbrc	r17, 4
    75d6:	16 60       	ori	r17, 0x06	; 6
    75d8:	20 e1       	ldi	r18, 0x10	; 16
    75da:	32 e0       	ldi	r19, 0x02	; 2
    75dc:	17 ff       	sbrs	r17, 7
    75de:	08 c0       	rjmp	.+16     	; 0x75f0 <vfprintf+0x5f8>
    75e0:	f6 01       	movw	r30, r12
    75e2:	60 81       	ld	r22, Z
    75e4:	71 81       	ldd	r23, Z+1	; 0x01
    75e6:	82 81       	ldd	r24, Z+2	; 0x02
    75e8:	93 81       	ldd	r25, Z+3	; 0x03
    75ea:	44 e0       	ldi	r20, 0x04	; 4
    75ec:	50 e0       	ldi	r21, 0x00	; 0
    75ee:	08 c0       	rjmp	.+16     	; 0x7600 <vfprintf+0x608>
    75f0:	f6 01       	movw	r30, r12
    75f2:	80 81       	ld	r24, Z
    75f4:	91 81       	ldd	r25, Z+1	; 0x01
    75f6:	bc 01       	movw	r22, r24
    75f8:	80 e0       	ldi	r24, 0x00	; 0
    75fa:	90 e0       	ldi	r25, 0x00	; 0
    75fc:	42 e0       	ldi	r20, 0x02	; 2
    75fe:	50 e0       	ldi	r21, 0x00	; 0
    7600:	c4 0e       	add	r12, r20
    7602:	d5 1e       	adc	r13, r21
    7604:	ae 01       	movw	r20, r28
    7606:	4f 5f       	subi	r20, 0xFF	; 255
    7608:	5f 4f       	sbci	r21, 0xFF	; 255
    760a:	0e 94 7a 43 	call	0x86f4	; 0x86f4 <__ultoa_invert>
    760e:	e8 2e       	mov	r14, r24
    7610:	58 89       	ldd	r21, Y+16	; 0x10
    7612:	e5 1a       	sub	r14, r21
    7614:	8f e7       	ldi	r24, 0x7F	; 127
    7616:	f8 2e       	mov	r15, r24
    7618:	f1 22       	and	r15, r17
    761a:	f6 fe       	sbrs	r15, 6
    761c:	0b c0       	rjmp	.+22     	; 0x7634 <vfprintf+0x63c>
    761e:	8e ef       	ldi	r24, 0xFE	; 254
    7620:	f8 22       	and	r15, r24
    7622:	e9 14       	cp	r14, r9
    7624:	38 f4       	brcc	.+14     	; 0x7634 <vfprintf+0x63c>
    7626:	f4 fe       	sbrs	r15, 4
    7628:	07 c0       	rjmp	.+14     	; 0x7638 <vfprintf+0x640>
    762a:	f2 fc       	sbrc	r15, 2
    762c:	05 c0       	rjmp	.+10     	; 0x7638 <vfprintf+0x640>
    762e:	9f ee       	ldi	r25, 0xEF	; 239
    7630:	f9 22       	and	r15, r25
    7632:	02 c0       	rjmp	.+4      	; 0x7638 <vfprintf+0x640>
    7634:	1e 2d       	mov	r17, r14
    7636:	01 c0       	rjmp	.+2      	; 0x763a <vfprintf+0x642>
    7638:	19 2d       	mov	r17, r9
    763a:	f4 fe       	sbrs	r15, 4
    763c:	0d c0       	rjmp	.+26     	; 0x7658 <vfprintf+0x660>
    763e:	fe 01       	movw	r30, r28
    7640:	ee 0d       	add	r30, r14
    7642:	f1 1d       	adc	r31, r1
    7644:	80 81       	ld	r24, Z
    7646:	80 33       	cpi	r24, 0x30	; 48
    7648:	19 f4       	brne	.+6      	; 0x7650 <vfprintf+0x658>
    764a:	e9 ee       	ldi	r30, 0xE9	; 233
    764c:	fe 22       	and	r15, r30
    764e:	08 c0       	rjmp	.+16     	; 0x7660 <vfprintf+0x668>
    7650:	1f 5f       	subi	r17, 0xFF	; 255
    7652:	f2 fe       	sbrs	r15, 2
    7654:	05 c0       	rjmp	.+10     	; 0x7660 <vfprintf+0x668>
    7656:	03 c0       	rjmp	.+6      	; 0x765e <vfprintf+0x666>
    7658:	8f 2d       	mov	r24, r15
    765a:	86 78       	andi	r24, 0x86	; 134
    765c:	09 f0       	breq	.+2      	; 0x7660 <vfprintf+0x668>
    765e:	1f 5f       	subi	r17, 0xFF	; 255
    7660:	0f 2d       	mov	r16, r15
    7662:	f3 fc       	sbrc	r15, 3
    7664:	14 c0       	rjmp	.+40     	; 0x768e <vfprintf+0x696>
    7666:	f0 fe       	sbrs	r15, 0
    7668:	0f c0       	rjmp	.+30     	; 0x7688 <vfprintf+0x690>
    766a:	18 15       	cp	r17, r8
    766c:	10 f0       	brcs	.+4      	; 0x7672 <vfprintf+0x67a>
    766e:	9e 2c       	mov	r9, r14
    7670:	0b c0       	rjmp	.+22     	; 0x7688 <vfprintf+0x690>
    7672:	9e 2c       	mov	r9, r14
    7674:	98 0c       	add	r9, r8
    7676:	91 1a       	sub	r9, r17
    7678:	18 2d       	mov	r17, r8
    767a:	06 c0       	rjmp	.+12     	; 0x7688 <vfprintf+0x690>
    767c:	80 e2       	ldi	r24, 0x20	; 32
    767e:	90 e0       	ldi	r25, 0x00	; 0
    7680:	b3 01       	movw	r22, r6
    7682:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    7686:	1f 5f       	subi	r17, 0xFF	; 255
    7688:	18 15       	cp	r17, r8
    768a:	c0 f3       	brcs	.-16     	; 0x767c <vfprintf+0x684>
    768c:	04 c0       	rjmp	.+8      	; 0x7696 <vfprintf+0x69e>
    768e:	18 15       	cp	r17, r8
    7690:	10 f4       	brcc	.+4      	; 0x7696 <vfprintf+0x69e>
    7692:	81 1a       	sub	r8, r17
    7694:	01 c0       	rjmp	.+2      	; 0x7698 <vfprintf+0x6a0>
    7696:	88 24       	eor	r8, r8
    7698:	04 ff       	sbrs	r16, 4
    769a:	0f c0       	rjmp	.+30     	; 0x76ba <vfprintf+0x6c2>
    769c:	80 e3       	ldi	r24, 0x30	; 48
    769e:	90 e0       	ldi	r25, 0x00	; 0
    76a0:	b3 01       	movw	r22, r6
    76a2:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    76a6:	02 ff       	sbrs	r16, 2
    76a8:	1d c0       	rjmp	.+58     	; 0x76e4 <vfprintf+0x6ec>
    76aa:	01 fd       	sbrc	r16, 1
    76ac:	03 c0       	rjmp	.+6      	; 0x76b4 <vfprintf+0x6bc>
    76ae:	88 e7       	ldi	r24, 0x78	; 120
    76b0:	90 e0       	ldi	r25, 0x00	; 0
    76b2:	0e c0       	rjmp	.+28     	; 0x76d0 <vfprintf+0x6d8>
    76b4:	88 e5       	ldi	r24, 0x58	; 88
    76b6:	90 e0       	ldi	r25, 0x00	; 0
    76b8:	0b c0       	rjmp	.+22     	; 0x76d0 <vfprintf+0x6d8>
    76ba:	80 2f       	mov	r24, r16
    76bc:	86 78       	andi	r24, 0x86	; 134
    76be:	91 f0       	breq	.+36     	; 0x76e4 <vfprintf+0x6ec>
    76c0:	01 ff       	sbrs	r16, 1
    76c2:	02 c0       	rjmp	.+4      	; 0x76c8 <vfprintf+0x6d0>
    76c4:	8b e2       	ldi	r24, 0x2B	; 43
    76c6:	01 c0       	rjmp	.+2      	; 0x76ca <vfprintf+0x6d2>
    76c8:	80 e2       	ldi	r24, 0x20	; 32
    76ca:	f7 fc       	sbrc	r15, 7
    76cc:	8d e2       	ldi	r24, 0x2D	; 45
    76ce:	90 e0       	ldi	r25, 0x00	; 0
    76d0:	b3 01       	movw	r22, r6
    76d2:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    76d6:	06 c0       	rjmp	.+12     	; 0x76e4 <vfprintf+0x6ec>
    76d8:	80 e3       	ldi	r24, 0x30	; 48
    76da:	90 e0       	ldi	r25, 0x00	; 0
    76dc:	b3 01       	movw	r22, r6
    76de:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    76e2:	9a 94       	dec	r9
    76e4:	e9 14       	cp	r14, r9
    76e6:	c0 f3       	brcs	.-16     	; 0x76d8 <vfprintf+0x6e0>
    76e8:	ea 94       	dec	r14
    76ea:	e1 e0       	ldi	r30, 0x01	; 1
    76ec:	f0 e0       	ldi	r31, 0x00	; 0
    76ee:	ec 0f       	add	r30, r28
    76f0:	fd 1f       	adc	r31, r29
    76f2:	ee 0d       	add	r30, r14
    76f4:	f1 1d       	adc	r31, r1
    76f6:	80 81       	ld	r24, Z
    76f8:	90 e0       	ldi	r25, 0x00	; 0
    76fa:	b3 01       	movw	r22, r6
    76fc:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    7700:	ee 20       	and	r14, r14
    7702:	91 f7       	brne	.-28     	; 0x76e8 <vfprintf+0x6f0>
    7704:	06 c0       	rjmp	.+12     	; 0x7712 <vfprintf+0x71a>
    7706:	80 e2       	ldi	r24, 0x20	; 32
    7708:	90 e0       	ldi	r25, 0x00	; 0
    770a:	b3 01       	movw	r22, r6
    770c:	0e 94 2b 43 	call	0x8656	; 0x8656 <fputc>
    7710:	8a 94       	dec	r8
    7712:	88 20       	and	r8, r8
    7714:	c1 f7       	brne	.-16     	; 0x7706 <vfprintf+0x70e>
    7716:	99 cc       	rjmp	.-1742   	; 0x704a <vfprintf+0x52>
    7718:	f3 01       	movw	r30, r6
    771a:	66 81       	ldd	r22, Z+6	; 0x06
    771c:	77 81       	ldd	r23, Z+7	; 0x07
    771e:	cb 01       	movw	r24, r22
    7720:	61 96       	adiw	r28, 0x11	; 17
    7722:	cd bf       	out	0x3d, r28	; 61
    7724:	de bf       	out	0x3e, r29	; 62
    7726:	cf 91       	pop	r28
    7728:	df 91       	pop	r29
    772a:	1f 91       	pop	r17
    772c:	0f 91       	pop	r16
    772e:	ff 90       	pop	r15
    7730:	ef 90       	pop	r14
    7732:	df 90       	pop	r13
    7734:	cf 90       	pop	r12
    7736:	bf 90       	pop	r11
    7738:	af 90       	pop	r10
    773a:	9f 90       	pop	r9
    773c:	8f 90       	pop	r8
    773e:	7f 90       	pop	r7
    7740:	6f 90       	pop	r6
    7742:	5f 90       	pop	r5
    7744:	4f 90       	pop	r4
    7746:	3f 90       	pop	r3
    7748:	2f 90       	pop	r2
    774a:	08 95       	ret

0000774c <__subsf3>:
    774c:	50 58       	subi	r21, 0x80	; 128

0000774e <__addsf3>:
    774e:	bb 27       	eor	r27, r27
    7750:	aa 27       	eor	r26, r26
    7752:	0e d0       	rcall	.+28     	; 0x7770 <__addsf3x>
    7754:	29 c2       	rjmp	.+1106   	; 0x7ba8 <__fp_round>
    7756:	f2 d1       	rcall	.+996    	; 0x7b3c <__fp_pscA>
    7758:	30 f0       	brcs	.+12     	; 0x7766 <__addsf3+0x18>
    775a:	f7 d1       	rcall	.+1006   	; 0x7b4a <__fp_pscB>
    775c:	20 f0       	brcs	.+8      	; 0x7766 <__addsf3+0x18>
    775e:	31 f4       	brne	.+12     	; 0x776c <__addsf3+0x1e>
    7760:	9f 3f       	cpi	r25, 0xFF	; 255
    7762:	11 f4       	brne	.+4      	; 0x7768 <__addsf3+0x1a>
    7764:	1e f4       	brtc	.+6      	; 0x776c <__addsf3+0x1e>
    7766:	c2 c1       	rjmp	.+900    	; 0x7aec <__fp_nan>
    7768:	0e f4       	brtc	.+2      	; 0x776c <__addsf3+0x1e>
    776a:	e0 95       	com	r30
    776c:	e7 fb       	bst	r30, 7
    776e:	8f c1       	rjmp	.+798    	; 0x7a8e <__fp_inf>

00007770 <__addsf3x>:
    7770:	e9 2f       	mov	r30, r25
    7772:	3c d2       	rcall	.+1144   	; 0x7bec <__fp_split3>
    7774:	80 f3       	brcs	.-32     	; 0x7756 <__addsf3+0x8>
    7776:	ba 17       	cp	r27, r26
    7778:	62 07       	cpc	r22, r18
    777a:	73 07       	cpc	r23, r19
    777c:	84 07       	cpc	r24, r20
    777e:	95 07       	cpc	r25, r21
    7780:	18 f0       	brcs	.+6      	; 0x7788 <__addsf3x+0x18>
    7782:	71 f4       	brne	.+28     	; 0x77a0 <__addsf3x+0x30>
    7784:	9e f5       	brtc	.+102    	; 0x77ec <__addsf3x+0x7c>
    7786:	6b c2       	rjmp	.+1238   	; 0x7c5e <__fp_zero>
    7788:	0e f4       	brtc	.+2      	; 0x778c <__addsf3x+0x1c>
    778a:	e0 95       	com	r30
    778c:	0b 2e       	mov	r0, r27
    778e:	ba 2f       	mov	r27, r26
    7790:	a0 2d       	mov	r26, r0
    7792:	0b 01       	movw	r0, r22
    7794:	b9 01       	movw	r22, r18
    7796:	90 01       	movw	r18, r0
    7798:	0c 01       	movw	r0, r24
    779a:	ca 01       	movw	r24, r20
    779c:	a0 01       	movw	r20, r0
    779e:	11 24       	eor	r1, r1
    77a0:	ff 27       	eor	r31, r31
    77a2:	59 1b       	sub	r21, r25
    77a4:	99 f0       	breq	.+38     	; 0x77cc <__addsf3x+0x5c>
    77a6:	59 3f       	cpi	r21, 0xF9	; 249
    77a8:	50 f4       	brcc	.+20     	; 0x77be <__addsf3x+0x4e>
    77aa:	50 3e       	cpi	r21, 0xE0	; 224
    77ac:	68 f1       	brcs	.+90     	; 0x7808 <__addsf3x+0x98>
    77ae:	1a 16       	cp	r1, r26
    77b0:	f0 40       	sbci	r31, 0x00	; 0
    77b2:	a2 2f       	mov	r26, r18
    77b4:	23 2f       	mov	r18, r19
    77b6:	34 2f       	mov	r19, r20
    77b8:	44 27       	eor	r20, r20
    77ba:	58 5f       	subi	r21, 0xF8	; 248
    77bc:	f3 cf       	rjmp	.-26     	; 0x77a4 <__addsf3x+0x34>
    77be:	46 95       	lsr	r20
    77c0:	37 95       	ror	r19
    77c2:	27 95       	ror	r18
    77c4:	a7 95       	ror	r26
    77c6:	f0 40       	sbci	r31, 0x00	; 0
    77c8:	53 95       	inc	r21
    77ca:	c9 f7       	brne	.-14     	; 0x77be <__addsf3x+0x4e>
    77cc:	7e f4       	brtc	.+30     	; 0x77ec <__addsf3x+0x7c>
    77ce:	1f 16       	cp	r1, r31
    77d0:	ba 0b       	sbc	r27, r26
    77d2:	62 0b       	sbc	r22, r18
    77d4:	73 0b       	sbc	r23, r19
    77d6:	84 0b       	sbc	r24, r20
    77d8:	ba f0       	brmi	.+46     	; 0x7808 <__addsf3x+0x98>
    77da:	91 50       	subi	r25, 0x01	; 1
    77dc:	a1 f0       	breq	.+40     	; 0x7806 <__addsf3x+0x96>
    77de:	ff 0f       	add	r31, r31
    77e0:	bb 1f       	adc	r27, r27
    77e2:	66 1f       	adc	r22, r22
    77e4:	77 1f       	adc	r23, r23
    77e6:	88 1f       	adc	r24, r24
    77e8:	c2 f7       	brpl	.-16     	; 0x77da <__addsf3x+0x6a>
    77ea:	0e c0       	rjmp	.+28     	; 0x7808 <__addsf3x+0x98>
    77ec:	ba 0f       	add	r27, r26
    77ee:	62 1f       	adc	r22, r18
    77f0:	73 1f       	adc	r23, r19
    77f2:	84 1f       	adc	r24, r20
    77f4:	48 f4       	brcc	.+18     	; 0x7808 <__addsf3x+0x98>
    77f6:	87 95       	ror	r24
    77f8:	77 95       	ror	r23
    77fa:	67 95       	ror	r22
    77fc:	b7 95       	ror	r27
    77fe:	f7 95       	ror	r31
    7800:	9e 3f       	cpi	r25, 0xFE	; 254
    7802:	08 f0       	brcs	.+2      	; 0x7806 <__addsf3x+0x96>
    7804:	b3 cf       	rjmp	.-154    	; 0x776c <__addsf3+0x1e>
    7806:	93 95       	inc	r25
    7808:	88 0f       	add	r24, r24
    780a:	08 f0       	brcs	.+2      	; 0x780e <__addsf3x+0x9e>
    780c:	99 27       	eor	r25, r25
    780e:	ee 0f       	add	r30, r30
    7810:	97 95       	ror	r25
    7812:	87 95       	ror	r24
    7814:	08 95       	ret

00007816 <atan>:
    7816:	df 93       	push	r29
    7818:	dd 27       	eor	r29, r29
    781a:	b9 2f       	mov	r27, r25
    781c:	bf 77       	andi	r27, 0x7F	; 127
    781e:	40 e8       	ldi	r20, 0x80	; 128
    7820:	5f e3       	ldi	r21, 0x3F	; 63
    7822:	16 16       	cp	r1, r22
    7824:	17 06       	cpc	r1, r23
    7826:	48 07       	cpc	r20, r24
    7828:	5b 07       	cpc	r21, r27
    782a:	10 f4       	brcc	.+4      	; 0x7830 <atan+0x1a>
    782c:	d9 2f       	mov	r29, r25
    782e:	83 d2       	rcall	.+1286   	; 0x7d36 <inverse>
    7830:	9f 93       	push	r25
    7832:	8f 93       	push	r24
    7834:	7f 93       	push	r23
    7836:	6f 93       	push	r22
    7838:	96 d3       	rcall	.+1836   	; 0x7f66 <square>
    783a:	e8 ee       	ldi	r30, 0xE8	; 232
    783c:	f1 e0       	ldi	r31, 0x01	; 1
    783e:	59 d1       	rcall	.+690    	; 0x7af2 <__fp_powser>
    7840:	b3 d1       	rcall	.+870    	; 0x7ba8 <__fp_round>
    7842:	2f 91       	pop	r18
    7844:	3f 91       	pop	r19
    7846:	4f 91       	pop	r20
    7848:	5f 91       	pop	r21
    784a:	ee d2       	rcall	.+1500   	; 0x7e28 <__mulsf3x>
    784c:	dd 23       	and	r29, r29
    784e:	49 f0       	breq	.+18     	; 0x7862 <atan+0x4c>
    7850:	90 58       	subi	r25, 0x80	; 128
    7852:	a2 ea       	ldi	r26, 0xA2	; 162
    7854:	2a ed       	ldi	r18, 0xDA	; 218
    7856:	3f e0       	ldi	r19, 0x0F	; 15
    7858:	49 ec       	ldi	r20, 0xC9	; 201
    785a:	5f e3       	ldi	r21, 0x3F	; 63
    785c:	d0 78       	andi	r29, 0x80	; 128
    785e:	5d 27       	eor	r21, r29
    7860:	87 df       	rcall	.-242    	; 0x7770 <__addsf3x>
    7862:	df 91       	pop	r29
    7864:	a1 c1       	rjmp	.+834    	; 0x7ba8 <__fp_round>

00007866 <ceil>:
    7866:	e4 d1       	rcall	.+968    	; 0x7c30 <__fp_trunc>
    7868:	80 f0       	brcs	.+32     	; 0x788a <ceil+0x24>
    786a:	9f 37       	cpi	r25, 0x7F	; 127
    786c:	40 f4       	brcc	.+16     	; 0x787e <ceil+0x18>
    786e:	91 11       	cpse	r25, r1
    7870:	0e f4       	brtc	.+2      	; 0x7874 <ceil+0xe>
    7872:	f6 c1       	rjmp	.+1004   	; 0x7c60 <__fp_szero>
    7874:	60 e0       	ldi	r22, 0x00	; 0
    7876:	70 e0       	ldi	r23, 0x00	; 0
    7878:	80 e8       	ldi	r24, 0x80	; 128
    787a:	9f e3       	ldi	r25, 0x3F	; 63
    787c:	08 95       	ret
    787e:	26 f0       	brts	.+8      	; 0x7888 <ceil+0x22>
    7880:	1b 16       	cp	r1, r27
    7882:	61 1d       	adc	r22, r1
    7884:	71 1d       	adc	r23, r1
    7886:	81 1d       	adc	r24, r1
    7888:	08 c1       	rjmp	.+528    	; 0x7a9a <__fp_mintl>
    788a:	22 c1       	rjmp	.+580    	; 0x7ad0 <__fp_mpack>

0000788c <__cmpsf2>:
    788c:	dc d0       	rcall	.+440    	; 0x7a46 <__fp_cmp>
    788e:	08 f4       	brcc	.+2      	; 0x7892 <__cmpsf2+0x6>
    7890:	81 e0       	ldi	r24, 0x01	; 1
    7892:	08 95       	ret

00007894 <cos>:
    7894:	62 d1       	rcall	.+708    	; 0x7b5a <__fp_rempio2>
    7896:	e3 95       	inc	r30
    7898:	98 c1       	rjmp	.+816    	; 0x7bca <__fp_sinus>

0000789a <__divsf3>:
    789a:	0c d0       	rcall	.+24     	; 0x78b4 <__divsf3x>
    789c:	85 c1       	rjmp	.+778    	; 0x7ba8 <__fp_round>
    789e:	55 d1       	rcall	.+682    	; 0x7b4a <__fp_pscB>
    78a0:	40 f0       	brcs	.+16     	; 0x78b2 <__divsf3+0x18>
    78a2:	4c d1       	rcall	.+664    	; 0x7b3c <__fp_pscA>
    78a4:	30 f0       	brcs	.+12     	; 0x78b2 <__divsf3+0x18>
    78a6:	21 f4       	brne	.+8      	; 0x78b0 <__divsf3+0x16>
    78a8:	5f 3f       	cpi	r21, 0xFF	; 255
    78aa:	19 f0       	breq	.+6      	; 0x78b2 <__divsf3+0x18>
    78ac:	f0 c0       	rjmp	.+480    	; 0x7a8e <__fp_inf>
    78ae:	51 11       	cpse	r21, r1
    78b0:	d7 c1       	rjmp	.+942    	; 0x7c60 <__fp_szero>
    78b2:	1c c1       	rjmp	.+568    	; 0x7aec <__fp_nan>

000078b4 <__divsf3x>:
    78b4:	9b d1       	rcall	.+822    	; 0x7bec <__fp_split3>
    78b6:	98 f3       	brcs	.-26     	; 0x789e <__divsf3+0x4>

000078b8 <__divsf3_pse>:
    78b8:	99 23       	and	r25, r25
    78ba:	c9 f3       	breq	.-14     	; 0x78ae <__divsf3+0x14>
    78bc:	55 23       	and	r21, r21
    78be:	b1 f3       	breq	.-20     	; 0x78ac <__divsf3+0x12>
    78c0:	95 1b       	sub	r25, r21
    78c2:	55 0b       	sbc	r21, r21
    78c4:	bb 27       	eor	r27, r27
    78c6:	aa 27       	eor	r26, r26
    78c8:	62 17       	cp	r22, r18
    78ca:	73 07       	cpc	r23, r19
    78cc:	84 07       	cpc	r24, r20
    78ce:	38 f0       	brcs	.+14     	; 0x78de <__divsf3_pse+0x26>
    78d0:	9f 5f       	subi	r25, 0xFF	; 255
    78d2:	5f 4f       	sbci	r21, 0xFF	; 255
    78d4:	22 0f       	add	r18, r18
    78d6:	33 1f       	adc	r19, r19
    78d8:	44 1f       	adc	r20, r20
    78da:	aa 1f       	adc	r26, r26
    78dc:	a9 f3       	breq	.-22     	; 0x78c8 <__divsf3_pse+0x10>
    78de:	33 d0       	rcall	.+102    	; 0x7946 <__divsf3_pse+0x8e>
    78e0:	0e 2e       	mov	r0, r30
    78e2:	3a f0       	brmi	.+14     	; 0x78f2 <__divsf3_pse+0x3a>
    78e4:	e0 e8       	ldi	r30, 0x80	; 128
    78e6:	30 d0       	rcall	.+96     	; 0x7948 <__divsf3_pse+0x90>
    78e8:	91 50       	subi	r25, 0x01	; 1
    78ea:	50 40       	sbci	r21, 0x00	; 0
    78ec:	e6 95       	lsr	r30
    78ee:	00 1c       	adc	r0, r0
    78f0:	ca f7       	brpl	.-14     	; 0x78e4 <__divsf3_pse+0x2c>
    78f2:	29 d0       	rcall	.+82     	; 0x7946 <__divsf3_pse+0x8e>
    78f4:	fe 2f       	mov	r31, r30
    78f6:	27 d0       	rcall	.+78     	; 0x7946 <__divsf3_pse+0x8e>
    78f8:	66 0f       	add	r22, r22
    78fa:	77 1f       	adc	r23, r23
    78fc:	88 1f       	adc	r24, r24
    78fe:	bb 1f       	adc	r27, r27
    7900:	26 17       	cp	r18, r22
    7902:	37 07       	cpc	r19, r23
    7904:	48 07       	cpc	r20, r24
    7906:	ab 07       	cpc	r26, r27
    7908:	b0 e8       	ldi	r27, 0x80	; 128
    790a:	09 f0       	breq	.+2      	; 0x790e <__divsf3_pse+0x56>
    790c:	bb 0b       	sbc	r27, r27
    790e:	80 2d       	mov	r24, r0
    7910:	bf 01       	movw	r22, r30
    7912:	ff 27       	eor	r31, r31
    7914:	93 58       	subi	r25, 0x83	; 131
    7916:	5f 4f       	sbci	r21, 0xFF	; 255
    7918:	2a f0       	brmi	.+10     	; 0x7924 <__divsf3_pse+0x6c>
    791a:	9e 3f       	cpi	r25, 0xFE	; 254
    791c:	51 05       	cpc	r21, r1
    791e:	68 f0       	brcs	.+26     	; 0x793a <__divsf3_pse+0x82>
    7920:	b6 c0       	rjmp	.+364    	; 0x7a8e <__fp_inf>
    7922:	9e c1       	rjmp	.+828    	; 0x7c60 <__fp_szero>
    7924:	5f 3f       	cpi	r21, 0xFF	; 255
    7926:	ec f3       	brlt	.-6      	; 0x7922 <__divsf3_pse+0x6a>
    7928:	98 3e       	cpi	r25, 0xE8	; 232
    792a:	dc f3       	brlt	.-10     	; 0x7922 <__divsf3_pse+0x6a>
    792c:	86 95       	lsr	r24
    792e:	77 95       	ror	r23
    7930:	67 95       	ror	r22
    7932:	b7 95       	ror	r27
    7934:	f7 95       	ror	r31
    7936:	9f 5f       	subi	r25, 0xFF	; 255
    7938:	c9 f7       	brne	.-14     	; 0x792c <__divsf3_pse+0x74>
    793a:	88 0f       	add	r24, r24
    793c:	91 1d       	adc	r25, r1
    793e:	96 95       	lsr	r25
    7940:	87 95       	ror	r24
    7942:	97 f9       	bld	r25, 7
    7944:	08 95       	ret
    7946:	e1 e0       	ldi	r30, 0x01	; 1
    7948:	66 0f       	add	r22, r22
    794a:	77 1f       	adc	r23, r23
    794c:	88 1f       	adc	r24, r24
    794e:	bb 1f       	adc	r27, r27
    7950:	62 17       	cp	r22, r18
    7952:	73 07       	cpc	r23, r19
    7954:	84 07       	cpc	r24, r20
    7956:	ba 07       	cpc	r27, r26
    7958:	20 f0       	brcs	.+8      	; 0x7962 <__divsf3_pse+0xaa>
    795a:	62 1b       	sub	r22, r18
    795c:	73 0b       	sbc	r23, r19
    795e:	84 0b       	sbc	r24, r20
    7960:	ba 0b       	sbc	r27, r26
    7962:	ee 1f       	adc	r30, r30
    7964:	88 f7       	brcc	.-30     	; 0x7948 <__divsf3_pse+0x90>
    7966:	e0 95       	com	r30
    7968:	08 95       	ret

0000796a <__fixsfsi>:
    796a:	04 d0       	rcall	.+8      	; 0x7974 <__fixunssfsi>
    796c:	68 94       	set
    796e:	b1 11       	cpse	r27, r1
    7970:	77 c1       	rjmp	.+750    	; 0x7c60 <__fp_szero>
    7972:	08 95       	ret

00007974 <__fixunssfsi>:
    7974:	43 d1       	rcall	.+646    	; 0x7bfc <__fp_splitA>
    7976:	88 f0       	brcs	.+34     	; 0x799a <__fixunssfsi+0x26>
    7978:	9f 57       	subi	r25, 0x7F	; 127
    797a:	90 f0       	brcs	.+36     	; 0x79a0 <__fixunssfsi+0x2c>
    797c:	b9 2f       	mov	r27, r25
    797e:	99 27       	eor	r25, r25
    7980:	b7 51       	subi	r27, 0x17	; 23
    7982:	a0 f0       	brcs	.+40     	; 0x79ac <__fixunssfsi+0x38>
    7984:	d1 f0       	breq	.+52     	; 0x79ba <__fixunssfsi+0x46>
    7986:	66 0f       	add	r22, r22
    7988:	77 1f       	adc	r23, r23
    798a:	88 1f       	adc	r24, r24
    798c:	99 1f       	adc	r25, r25
    798e:	1a f0       	brmi	.+6      	; 0x7996 <__fixunssfsi+0x22>
    7990:	ba 95       	dec	r27
    7992:	c9 f7       	brne	.-14     	; 0x7986 <__fixunssfsi+0x12>
    7994:	12 c0       	rjmp	.+36     	; 0x79ba <__fixunssfsi+0x46>
    7996:	b1 30       	cpi	r27, 0x01	; 1
    7998:	81 f0       	breq	.+32     	; 0x79ba <__fixunssfsi+0x46>
    799a:	61 d1       	rcall	.+706    	; 0x7c5e <__fp_zero>
    799c:	b1 e0       	ldi	r27, 0x01	; 1
    799e:	08 95       	ret
    79a0:	5e c1       	rjmp	.+700    	; 0x7c5e <__fp_zero>
    79a2:	67 2f       	mov	r22, r23
    79a4:	78 2f       	mov	r23, r24
    79a6:	88 27       	eor	r24, r24
    79a8:	b8 5f       	subi	r27, 0xF8	; 248
    79aa:	39 f0       	breq	.+14     	; 0x79ba <__fixunssfsi+0x46>
    79ac:	b9 3f       	cpi	r27, 0xF9	; 249
    79ae:	cc f3       	brlt	.-14     	; 0x79a2 <__fixunssfsi+0x2e>
    79b0:	86 95       	lsr	r24
    79b2:	77 95       	ror	r23
    79b4:	67 95       	ror	r22
    79b6:	b3 95       	inc	r27
    79b8:	d9 f7       	brne	.-10     	; 0x79b0 <__fixunssfsi+0x3c>
    79ba:	3e f4       	brtc	.+14     	; 0x79ca <__fixunssfsi+0x56>
    79bc:	90 95       	com	r25
    79be:	80 95       	com	r24
    79c0:	70 95       	com	r23
    79c2:	61 95       	neg	r22
    79c4:	7f 4f       	sbci	r23, 0xFF	; 255
    79c6:	8f 4f       	sbci	r24, 0xFF	; 255
    79c8:	9f 4f       	sbci	r25, 0xFF	; 255
    79ca:	08 95       	ret

000079cc <__floatunsisf>:
    79cc:	e8 94       	clt
    79ce:	09 c0       	rjmp	.+18     	; 0x79e2 <__floatsisf+0x12>

000079d0 <__floatsisf>:
    79d0:	97 fb       	bst	r25, 7
    79d2:	3e f4       	brtc	.+14     	; 0x79e2 <__floatsisf+0x12>
    79d4:	90 95       	com	r25
    79d6:	80 95       	com	r24
    79d8:	70 95       	com	r23
    79da:	61 95       	neg	r22
    79dc:	7f 4f       	sbci	r23, 0xFF	; 255
    79de:	8f 4f       	sbci	r24, 0xFF	; 255
    79e0:	9f 4f       	sbci	r25, 0xFF	; 255
    79e2:	99 23       	and	r25, r25
    79e4:	a9 f0       	breq	.+42     	; 0x7a10 <__floatsisf+0x40>
    79e6:	f9 2f       	mov	r31, r25
    79e8:	96 e9       	ldi	r25, 0x96	; 150
    79ea:	bb 27       	eor	r27, r27
    79ec:	93 95       	inc	r25
    79ee:	f6 95       	lsr	r31
    79f0:	87 95       	ror	r24
    79f2:	77 95       	ror	r23
    79f4:	67 95       	ror	r22
    79f6:	b7 95       	ror	r27
    79f8:	f1 11       	cpse	r31, r1
    79fa:	f8 cf       	rjmp	.-16     	; 0x79ec <__floatsisf+0x1c>
    79fc:	fa f4       	brpl	.+62     	; 0x7a3c <__floatsisf+0x6c>
    79fe:	bb 0f       	add	r27, r27
    7a00:	11 f4       	brne	.+4      	; 0x7a06 <__floatsisf+0x36>
    7a02:	60 ff       	sbrs	r22, 0
    7a04:	1b c0       	rjmp	.+54     	; 0x7a3c <__floatsisf+0x6c>
    7a06:	6f 5f       	subi	r22, 0xFF	; 255
    7a08:	7f 4f       	sbci	r23, 0xFF	; 255
    7a0a:	8f 4f       	sbci	r24, 0xFF	; 255
    7a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    7a0e:	16 c0       	rjmp	.+44     	; 0x7a3c <__floatsisf+0x6c>
    7a10:	88 23       	and	r24, r24
    7a12:	11 f0       	breq	.+4      	; 0x7a18 <__floatsisf+0x48>
    7a14:	96 e9       	ldi	r25, 0x96	; 150
    7a16:	11 c0       	rjmp	.+34     	; 0x7a3a <__floatsisf+0x6a>
    7a18:	77 23       	and	r23, r23
    7a1a:	21 f0       	breq	.+8      	; 0x7a24 <__floatsisf+0x54>
    7a1c:	9e e8       	ldi	r25, 0x8E	; 142
    7a1e:	87 2f       	mov	r24, r23
    7a20:	76 2f       	mov	r23, r22
    7a22:	05 c0       	rjmp	.+10     	; 0x7a2e <__floatsisf+0x5e>
    7a24:	66 23       	and	r22, r22
    7a26:	71 f0       	breq	.+28     	; 0x7a44 <__floatsisf+0x74>
    7a28:	96 e8       	ldi	r25, 0x86	; 134
    7a2a:	86 2f       	mov	r24, r22
    7a2c:	70 e0       	ldi	r23, 0x00	; 0
    7a2e:	60 e0       	ldi	r22, 0x00	; 0
    7a30:	2a f0       	brmi	.+10     	; 0x7a3c <__floatsisf+0x6c>
    7a32:	9a 95       	dec	r25
    7a34:	66 0f       	add	r22, r22
    7a36:	77 1f       	adc	r23, r23
    7a38:	88 1f       	adc	r24, r24
    7a3a:	da f7       	brpl	.-10     	; 0x7a32 <__floatsisf+0x62>
    7a3c:	88 0f       	add	r24, r24
    7a3e:	96 95       	lsr	r25
    7a40:	87 95       	ror	r24
    7a42:	97 f9       	bld	r25, 7
    7a44:	08 95       	ret

00007a46 <__fp_cmp>:
    7a46:	99 0f       	add	r25, r25
    7a48:	00 08       	sbc	r0, r0
    7a4a:	55 0f       	add	r21, r21
    7a4c:	aa 0b       	sbc	r26, r26
    7a4e:	e0 e8       	ldi	r30, 0x80	; 128
    7a50:	fe ef       	ldi	r31, 0xFE	; 254
    7a52:	16 16       	cp	r1, r22
    7a54:	17 06       	cpc	r1, r23
    7a56:	e8 07       	cpc	r30, r24
    7a58:	f9 07       	cpc	r31, r25
    7a5a:	c0 f0       	brcs	.+48     	; 0x7a8c <__fp_cmp+0x46>
    7a5c:	12 16       	cp	r1, r18
    7a5e:	13 06       	cpc	r1, r19
    7a60:	e4 07       	cpc	r30, r20
    7a62:	f5 07       	cpc	r31, r21
    7a64:	98 f0       	brcs	.+38     	; 0x7a8c <__fp_cmp+0x46>
    7a66:	62 1b       	sub	r22, r18
    7a68:	73 0b       	sbc	r23, r19
    7a6a:	84 0b       	sbc	r24, r20
    7a6c:	95 0b       	sbc	r25, r21
    7a6e:	39 f4       	brne	.+14     	; 0x7a7e <__fp_cmp+0x38>
    7a70:	0a 26       	eor	r0, r26
    7a72:	61 f0       	breq	.+24     	; 0x7a8c <__fp_cmp+0x46>
    7a74:	23 2b       	or	r18, r19
    7a76:	24 2b       	or	r18, r20
    7a78:	25 2b       	or	r18, r21
    7a7a:	21 f4       	brne	.+8      	; 0x7a84 <__fp_cmp+0x3e>
    7a7c:	08 95       	ret
    7a7e:	0a 26       	eor	r0, r26
    7a80:	09 f4       	brne	.+2      	; 0x7a84 <__fp_cmp+0x3e>
    7a82:	a1 40       	sbci	r26, 0x01	; 1
    7a84:	a6 95       	lsr	r26
    7a86:	8f ef       	ldi	r24, 0xFF	; 255
    7a88:	81 1d       	adc	r24, r1
    7a8a:	81 1d       	adc	r24, r1
    7a8c:	08 95       	ret

00007a8e <__fp_inf>:
    7a8e:	97 f9       	bld	r25, 7
    7a90:	9f 67       	ori	r25, 0x7F	; 127
    7a92:	80 e8       	ldi	r24, 0x80	; 128
    7a94:	70 e0       	ldi	r23, 0x00	; 0
    7a96:	60 e0       	ldi	r22, 0x00	; 0
    7a98:	08 95       	ret

00007a9a <__fp_mintl>:
    7a9a:	88 23       	and	r24, r24
    7a9c:	71 f4       	brne	.+28     	; 0x7aba <__fp_mintl+0x20>
    7a9e:	77 23       	and	r23, r23
    7aa0:	21 f0       	breq	.+8      	; 0x7aaa <__fp_mintl+0x10>
    7aa2:	98 50       	subi	r25, 0x08	; 8
    7aa4:	87 2b       	or	r24, r23
    7aa6:	76 2f       	mov	r23, r22
    7aa8:	07 c0       	rjmp	.+14     	; 0x7ab8 <__fp_mintl+0x1e>
    7aaa:	66 23       	and	r22, r22
    7aac:	11 f4       	brne	.+4      	; 0x7ab2 <__fp_mintl+0x18>
    7aae:	99 27       	eor	r25, r25
    7ab0:	0d c0       	rjmp	.+26     	; 0x7acc <__fp_mintl+0x32>
    7ab2:	90 51       	subi	r25, 0x10	; 16
    7ab4:	86 2b       	or	r24, r22
    7ab6:	70 e0       	ldi	r23, 0x00	; 0
    7ab8:	60 e0       	ldi	r22, 0x00	; 0
    7aba:	2a f0       	brmi	.+10     	; 0x7ac6 <__fp_mintl+0x2c>
    7abc:	9a 95       	dec	r25
    7abe:	66 0f       	add	r22, r22
    7ac0:	77 1f       	adc	r23, r23
    7ac2:	88 1f       	adc	r24, r24
    7ac4:	da f7       	brpl	.-10     	; 0x7abc <__fp_mintl+0x22>
    7ac6:	88 0f       	add	r24, r24
    7ac8:	96 95       	lsr	r25
    7aca:	87 95       	ror	r24
    7acc:	97 f9       	bld	r25, 7
    7ace:	08 95       	ret

00007ad0 <__fp_mpack>:
    7ad0:	9f 3f       	cpi	r25, 0xFF	; 255
    7ad2:	31 f0       	breq	.+12     	; 0x7ae0 <__fp_mpack_finite+0xc>

00007ad4 <__fp_mpack_finite>:
    7ad4:	91 50       	subi	r25, 0x01	; 1
    7ad6:	20 f4       	brcc	.+8      	; 0x7ae0 <__fp_mpack_finite+0xc>
    7ad8:	87 95       	ror	r24
    7ada:	77 95       	ror	r23
    7adc:	67 95       	ror	r22
    7ade:	b7 95       	ror	r27
    7ae0:	88 0f       	add	r24, r24
    7ae2:	91 1d       	adc	r25, r1
    7ae4:	96 95       	lsr	r25
    7ae6:	87 95       	ror	r24
    7ae8:	97 f9       	bld	r25, 7
    7aea:	08 95       	ret

00007aec <__fp_nan>:
    7aec:	9f ef       	ldi	r25, 0xFF	; 255
    7aee:	80 ec       	ldi	r24, 0xC0	; 192
    7af0:	08 95       	ret

00007af2 <__fp_powser>:
    7af2:	df 93       	push	r29
    7af4:	cf 93       	push	r28
    7af6:	1f 93       	push	r17
    7af8:	0f 93       	push	r16
    7afa:	ff 92       	push	r15
    7afc:	ef 92       	push	r14
    7afe:	df 92       	push	r13
    7b00:	7b 01       	movw	r14, r22
    7b02:	8c 01       	movw	r16, r24
    7b04:	68 94       	set
    7b06:	05 c0       	rjmp	.+10     	; 0x7b12 <__fp_powser+0x20>
    7b08:	da 2e       	mov	r13, r26
    7b0a:	ef 01       	movw	r28, r30
    7b0c:	8d d1       	rcall	.+794    	; 0x7e28 <__mulsf3x>
    7b0e:	fe 01       	movw	r30, r28
    7b10:	e8 94       	clt
    7b12:	a5 91       	lpm	r26, Z+
    7b14:	25 91       	lpm	r18, Z+
    7b16:	35 91       	lpm	r19, Z+
    7b18:	45 91       	lpm	r20, Z+
    7b1a:	55 91       	lpm	r21, Z+
    7b1c:	ae f3       	brts	.-22     	; 0x7b08 <__fp_powser+0x16>
    7b1e:	ef 01       	movw	r28, r30
    7b20:	27 de       	rcall	.-946    	; 0x7770 <__addsf3x>
    7b22:	fe 01       	movw	r30, r28
    7b24:	97 01       	movw	r18, r14
    7b26:	a8 01       	movw	r20, r16
    7b28:	da 94       	dec	r13
    7b2a:	79 f7       	brne	.-34     	; 0x7b0a <__fp_powser+0x18>
    7b2c:	df 90       	pop	r13
    7b2e:	ef 90       	pop	r14
    7b30:	ff 90       	pop	r15
    7b32:	0f 91       	pop	r16
    7b34:	1f 91       	pop	r17
    7b36:	cf 91       	pop	r28
    7b38:	df 91       	pop	r29
    7b3a:	08 95       	ret

00007b3c <__fp_pscA>:
    7b3c:	00 24       	eor	r0, r0
    7b3e:	0a 94       	dec	r0
    7b40:	16 16       	cp	r1, r22
    7b42:	17 06       	cpc	r1, r23
    7b44:	18 06       	cpc	r1, r24
    7b46:	09 06       	cpc	r0, r25
    7b48:	08 95       	ret

00007b4a <__fp_pscB>:
    7b4a:	00 24       	eor	r0, r0
    7b4c:	0a 94       	dec	r0
    7b4e:	12 16       	cp	r1, r18
    7b50:	13 06       	cpc	r1, r19
    7b52:	14 06       	cpc	r1, r20
    7b54:	05 06       	cpc	r0, r21
    7b56:	08 95       	ret
    7b58:	c9 cf       	rjmp	.-110    	; 0x7aec <__fp_nan>

00007b5a <__fp_rempio2>:
    7b5a:	50 d0       	rcall	.+160    	; 0x7bfc <__fp_splitA>
    7b5c:	e8 f3       	brcs	.-6      	; 0x7b58 <__fp_pscB+0xe>
    7b5e:	e8 94       	clt
    7b60:	e0 e0       	ldi	r30, 0x00	; 0
    7b62:	bb 27       	eor	r27, r27
    7b64:	9f 57       	subi	r25, 0x7F	; 127
    7b66:	f0 f0       	brcs	.+60     	; 0x7ba4 <__fp_rempio2+0x4a>
    7b68:	2a ed       	ldi	r18, 0xDA	; 218
    7b6a:	3f e0       	ldi	r19, 0x0F	; 15
    7b6c:	49 ec       	ldi	r20, 0xC9	; 201
    7b6e:	06 c0       	rjmp	.+12     	; 0x7b7c <__fp_rempio2+0x22>
    7b70:	ee 0f       	add	r30, r30
    7b72:	bb 0f       	add	r27, r27
    7b74:	66 1f       	adc	r22, r22
    7b76:	77 1f       	adc	r23, r23
    7b78:	88 1f       	adc	r24, r24
    7b7a:	28 f0       	brcs	.+10     	; 0x7b86 <__fp_rempio2+0x2c>
    7b7c:	b2 3a       	cpi	r27, 0xA2	; 162
    7b7e:	62 07       	cpc	r22, r18
    7b80:	73 07       	cpc	r23, r19
    7b82:	84 07       	cpc	r24, r20
    7b84:	28 f0       	brcs	.+10     	; 0x7b90 <__fp_rempio2+0x36>
    7b86:	b2 5a       	subi	r27, 0xA2	; 162
    7b88:	62 0b       	sbc	r22, r18
    7b8a:	73 0b       	sbc	r23, r19
    7b8c:	84 0b       	sbc	r24, r20
    7b8e:	e3 95       	inc	r30
    7b90:	9a 95       	dec	r25
    7b92:	72 f7       	brpl	.-36     	; 0x7b70 <__fp_rempio2+0x16>
    7b94:	80 38       	cpi	r24, 0x80	; 128
    7b96:	30 f4       	brcc	.+12     	; 0x7ba4 <__fp_rempio2+0x4a>
    7b98:	9a 95       	dec	r25
    7b9a:	bb 0f       	add	r27, r27
    7b9c:	66 1f       	adc	r22, r22
    7b9e:	77 1f       	adc	r23, r23
    7ba0:	88 1f       	adc	r24, r24
    7ba2:	d2 f7       	brpl	.-12     	; 0x7b98 <__fp_rempio2+0x3e>
    7ba4:	90 48       	sbci	r25, 0x80	; 128
    7ba6:	96 cf       	rjmp	.-212    	; 0x7ad4 <__fp_mpack_finite>

00007ba8 <__fp_round>:
    7ba8:	09 2e       	mov	r0, r25
    7baa:	03 94       	inc	r0
    7bac:	00 0c       	add	r0, r0
    7bae:	11 f4       	brne	.+4      	; 0x7bb4 <__fp_round+0xc>
    7bb0:	88 23       	and	r24, r24
    7bb2:	52 f0       	brmi	.+20     	; 0x7bc8 <__fp_round+0x20>
    7bb4:	bb 0f       	add	r27, r27
    7bb6:	40 f4       	brcc	.+16     	; 0x7bc8 <__fp_round+0x20>
    7bb8:	bf 2b       	or	r27, r31
    7bba:	11 f4       	brne	.+4      	; 0x7bc0 <__fp_round+0x18>
    7bbc:	60 ff       	sbrs	r22, 0
    7bbe:	04 c0       	rjmp	.+8      	; 0x7bc8 <__fp_round+0x20>
    7bc0:	6f 5f       	subi	r22, 0xFF	; 255
    7bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    7bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    7bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    7bc8:	08 95       	ret

00007bca <__fp_sinus>:
    7bca:	ef 93       	push	r30
    7bcc:	e0 ff       	sbrs	r30, 0
    7bce:	06 c0       	rjmp	.+12     	; 0x7bdc <__fp_sinus+0x12>
    7bd0:	a2 ea       	ldi	r26, 0xA2	; 162
    7bd2:	2a ed       	ldi	r18, 0xDA	; 218
    7bd4:	3f e0       	ldi	r19, 0x0F	; 15
    7bd6:	49 ec       	ldi	r20, 0xC9	; 201
    7bd8:	5f eb       	ldi	r21, 0xBF	; 191
    7bda:	ca dd       	rcall	.-1132   	; 0x7770 <__addsf3x>
    7bdc:	e5 df       	rcall	.-54     	; 0x7ba8 <__fp_round>
    7bde:	0f 90       	pop	r0
    7be0:	03 94       	inc	r0
    7be2:	01 fc       	sbrc	r0, 1
    7be4:	90 58       	subi	r25, 0x80	; 128
    7be6:	e5 e1       	ldi	r30, 0x15	; 21
    7be8:	f2 e0       	ldi	r31, 0x02	; 2
    7bea:	d2 c1       	rjmp	.+932    	; 0x7f90 <__fp_powsodd>

00007bec <__fp_split3>:
    7bec:	57 fd       	sbrc	r21, 7
    7bee:	90 58       	subi	r25, 0x80	; 128
    7bf0:	44 0f       	add	r20, r20
    7bf2:	55 1f       	adc	r21, r21
    7bf4:	59 f0       	breq	.+22     	; 0x7c0c <__fp_splitA+0x10>
    7bf6:	5f 3f       	cpi	r21, 0xFF	; 255
    7bf8:	71 f0       	breq	.+28     	; 0x7c16 <__fp_splitA+0x1a>
    7bfa:	47 95       	ror	r20

00007bfc <__fp_splitA>:
    7bfc:	88 0f       	add	r24, r24
    7bfe:	97 fb       	bst	r25, 7
    7c00:	99 1f       	adc	r25, r25
    7c02:	61 f0       	breq	.+24     	; 0x7c1c <__fp_splitA+0x20>
    7c04:	9f 3f       	cpi	r25, 0xFF	; 255
    7c06:	79 f0       	breq	.+30     	; 0x7c26 <__fp_splitA+0x2a>
    7c08:	87 95       	ror	r24
    7c0a:	08 95       	ret
    7c0c:	12 16       	cp	r1, r18
    7c0e:	13 06       	cpc	r1, r19
    7c10:	14 06       	cpc	r1, r20
    7c12:	55 1f       	adc	r21, r21
    7c14:	f2 cf       	rjmp	.-28     	; 0x7bfa <__fp_split3+0xe>
    7c16:	46 95       	lsr	r20
    7c18:	f1 df       	rcall	.-30     	; 0x7bfc <__fp_splitA>
    7c1a:	08 c0       	rjmp	.+16     	; 0x7c2c <__fp_splitA+0x30>
    7c1c:	16 16       	cp	r1, r22
    7c1e:	17 06       	cpc	r1, r23
    7c20:	18 06       	cpc	r1, r24
    7c22:	99 1f       	adc	r25, r25
    7c24:	f1 cf       	rjmp	.-30     	; 0x7c08 <__fp_splitA+0xc>
    7c26:	86 95       	lsr	r24
    7c28:	71 05       	cpc	r23, r1
    7c2a:	61 05       	cpc	r22, r1
    7c2c:	08 94       	sec
    7c2e:	08 95       	ret

00007c30 <__fp_trunc>:
    7c30:	e5 df       	rcall	.-54     	; 0x7bfc <__fp_splitA>
    7c32:	a0 f0       	brcs	.+40     	; 0x7c5c <__fp_trunc+0x2c>
    7c34:	be e7       	ldi	r27, 0x7E	; 126
    7c36:	b9 17       	cp	r27, r25
    7c38:	88 f4       	brcc	.+34     	; 0x7c5c <__fp_trunc+0x2c>
    7c3a:	bb 27       	eor	r27, r27
    7c3c:	9f 38       	cpi	r25, 0x8F	; 143
    7c3e:	60 f4       	brcc	.+24     	; 0x7c58 <__fp_trunc+0x28>
    7c40:	16 16       	cp	r1, r22
    7c42:	b1 1d       	adc	r27, r1
    7c44:	67 2f       	mov	r22, r23
    7c46:	78 2f       	mov	r23, r24
    7c48:	88 27       	eor	r24, r24
    7c4a:	98 5f       	subi	r25, 0xF8	; 248
    7c4c:	f7 cf       	rjmp	.-18     	; 0x7c3c <__fp_trunc+0xc>
    7c4e:	86 95       	lsr	r24
    7c50:	77 95       	ror	r23
    7c52:	67 95       	ror	r22
    7c54:	b1 1d       	adc	r27, r1
    7c56:	93 95       	inc	r25
    7c58:	96 39       	cpi	r25, 0x96	; 150
    7c5a:	c8 f3       	brcs	.-14     	; 0x7c4e <__fp_trunc+0x1e>
    7c5c:	08 95       	ret

00007c5e <__fp_zero>:
    7c5e:	e8 94       	clt

00007c60 <__fp_szero>:
    7c60:	bb 27       	eor	r27, r27
    7c62:	66 27       	eor	r22, r22
    7c64:	77 27       	eor	r23, r23
    7c66:	cb 01       	movw	r24, r22
    7c68:	97 f9       	bld	r25, 7
    7c6a:	08 95       	ret

00007c6c <__gesf2>:
    7c6c:	ec de       	rcall	.-552    	; 0x7a46 <__fp_cmp>
    7c6e:	08 f4       	brcc	.+2      	; 0x7c72 <__gesf2+0x6>
    7c70:	8f ef       	ldi	r24, 0xFF	; 255
    7c72:	08 95       	ret
    7c74:	63 df       	rcall	.-314    	; 0x7b3c <__fp_pscA>
    7c76:	19 f0       	breq	.+6      	; 0x7c7e <__gesf2+0x12>
    7c78:	68 df       	rcall	.-304    	; 0x7b4a <__fp_pscB>
    7c7a:	09 f0       	breq	.+2      	; 0x7c7e <__gesf2+0x12>
    7c7c:	37 cf       	rjmp	.-402    	; 0x7aec <__fp_nan>
    7c7e:	07 cf       	rjmp	.-498    	; 0x7a8e <__fp_inf>
    7c80:	b9 01       	movw	r22, r18
    7c82:	ca 01       	movw	r24, r20
    7c84:	25 cf       	rjmp	.-438    	; 0x7ad0 <__fp_mpack>

00007c86 <hypot>:
    7c86:	9f 77       	andi	r25, 0x7F	; 127
    7c88:	5f 77       	andi	r21, 0x7F	; 127
    7c8a:	b0 df       	rcall	.-160    	; 0x7bec <__fp_split3>
    7c8c:	98 f3       	brcs	.-26     	; 0x7c74 <__gesf2+0x8>
    7c8e:	99 23       	and	r25, r25
    7c90:	b9 f3       	breq	.-18     	; 0x7c80 <__gesf2+0x14>
    7c92:	55 23       	and	r21, r21
    7c94:	b9 f3       	breq	.-18     	; 0x7c84 <__gesf2+0x18>
    7c96:	ff 27       	eor	r31, r31
    7c98:	95 17       	cp	r25, r21
    7c9a:	58 f4       	brcc	.+22     	; 0x7cb2 <hypot+0x2c>
    7c9c:	e5 2f       	mov	r30, r21
    7c9e:	e9 1b       	sub	r30, r25
    7ca0:	ed 30       	cpi	r30, 0x0D	; 13
    7ca2:	70 f7       	brcc	.-36     	; 0x7c80 <__gesf2+0x14>
    7ca4:	5e 3b       	cpi	r21, 0xBE	; 190
    7ca6:	10 f0       	brcs	.+4      	; 0x7cac <hypot+0x26>
    7ca8:	f1 e4       	ldi	r31, 0x41	; 65
    7caa:	1c c0       	rjmp	.+56     	; 0x7ce4 <hypot+0x5e>
    7cac:	90 34       	cpi	r25, 0x40	; 64
    7cae:	e0 f4       	brcc	.+56     	; 0x7ce8 <hypot+0x62>
    7cb0:	0a c0       	rjmp	.+20     	; 0x7cc6 <hypot+0x40>
    7cb2:	e9 2f       	mov	r30, r25
    7cb4:	e5 1b       	sub	r30, r21
    7cb6:	ed 30       	cpi	r30, 0x0D	; 13
    7cb8:	28 f7       	brcc	.-54     	; 0x7c84 <__gesf2+0x18>
    7cba:	9e 3b       	cpi	r25, 0xBE	; 190
    7cbc:	10 f0       	brcs	.+4      	; 0x7cc2 <hypot+0x3c>
    7cbe:	f1 e4       	ldi	r31, 0x41	; 65
    7cc0:	11 c0       	rjmp	.+34     	; 0x7ce4 <hypot+0x5e>
    7cc2:	50 34       	cpi	r21, 0x40	; 64
    7cc4:	88 f4       	brcc	.+34     	; 0x7ce8 <hypot+0x62>
    7cc6:	f9 ea       	ldi	r31, 0xA9	; 169
    7cc8:	88 23       	and	r24, r24
    7cca:	2a f0       	brmi	.+10     	; 0x7cd6 <hypot+0x50>
    7ccc:	9a 95       	dec	r25
    7cce:	66 0f       	add	r22, r22
    7cd0:	77 1f       	adc	r23, r23
    7cd2:	88 1f       	adc	r24, r24
    7cd4:	da f7       	brpl	.-10     	; 0x7ccc <hypot+0x46>
    7cd6:	44 23       	and	r20, r20
    7cd8:	2a f0       	brmi	.+10     	; 0x7ce4 <hypot+0x5e>
    7cda:	5a 95       	dec	r21
    7cdc:	22 0f       	add	r18, r18
    7cde:	33 1f       	adc	r19, r19
    7ce0:	44 1f       	adc	r20, r20
    7ce2:	da f7       	brpl	.-10     	; 0x7cda <hypot+0x54>
    7ce4:	9f 1b       	sub	r25, r31
    7ce6:	5f 1b       	sub	r21, r31
    7ce8:	ff 93       	push	r31
    7cea:	1f 93       	push	r17
    7cec:	0f 93       	push	r16
    7cee:	ff 92       	push	r15
    7cf0:	ef 92       	push	r14
    7cf2:	79 01       	movw	r14, r18
    7cf4:	8a 01       	movw	r16, r20
    7cf6:	bb 27       	eor	r27, r27
    7cf8:	ab 2f       	mov	r26, r27
    7cfa:	9b 01       	movw	r18, r22
    7cfc:	ac 01       	movw	r20, r24
    7cfe:	96 d0       	rcall	.+300    	; 0x7e2c <__mulsf3_pse>
    7d00:	97 01       	movw	r18, r14
    7d02:	a8 01       	movw	r20, r16
    7d04:	bf 93       	push	r27
    7d06:	7b 01       	movw	r14, r22
    7d08:	8c 01       	movw	r16, r24
    7d0a:	aa 27       	eor	r26, r26
    7d0c:	ba 2f       	mov	r27, r26
    7d0e:	b9 01       	movw	r22, r18
    7d10:	ca 01       	movw	r24, r20
    7d12:	8c d0       	rcall	.+280    	; 0x7e2c <__mulsf3_pse>
    7d14:	af 91       	pop	r26
    7d16:	97 01       	movw	r18, r14
    7d18:	a8 01       	movw	r20, r16
    7d1a:	ef 90       	pop	r14
    7d1c:	ff 90       	pop	r15
    7d1e:	0f 91       	pop	r16
    7d20:	1f 91       	pop	r17
    7d22:	26 dd       	rcall	.-1460   	; 0x7770 <__addsf3x>
    7d24:	41 df       	rcall	.-382    	; 0x7ba8 <__fp_round>
    7d26:	e1 d0       	rcall	.+450    	; 0x7eea <sqrt>
    7d28:	4f 91       	pop	r20
    7d2a:	40 ff       	sbrs	r20, 0
    7d2c:	08 95       	ret
    7d2e:	55 27       	eor	r21, r21
    7d30:	47 fd       	sbrc	r20, 7
    7d32:	50 95       	com	r21
    7d34:	09 c0       	rjmp	.+18     	; 0x7d48 <ldexp>

00007d36 <inverse>:
    7d36:	9b 01       	movw	r18, r22
    7d38:	ac 01       	movw	r20, r24
    7d3a:	60 e0       	ldi	r22, 0x00	; 0
    7d3c:	70 e0       	ldi	r23, 0x00	; 0
    7d3e:	80 e8       	ldi	r24, 0x80	; 128
    7d40:	9f e3       	ldi	r25, 0x3F	; 63
    7d42:	ab cd       	rjmp	.-1194   	; 0x789a <__divsf3>
    7d44:	a4 ce       	rjmp	.-696    	; 0x7a8e <__fp_inf>
    7d46:	c4 ce       	rjmp	.-632    	; 0x7ad0 <__fp_mpack>

00007d48 <ldexp>:
    7d48:	59 df       	rcall	.-334    	; 0x7bfc <__fp_splitA>
    7d4a:	e8 f3       	brcs	.-6      	; 0x7d46 <inverse+0x10>
    7d4c:	99 23       	and	r25, r25
    7d4e:	d9 f3       	breq	.-10     	; 0x7d46 <inverse+0x10>
    7d50:	94 0f       	add	r25, r20
    7d52:	51 1d       	adc	r21, r1
    7d54:	bb f3       	brvs	.-18     	; 0x7d44 <inverse+0xe>
    7d56:	91 50       	subi	r25, 0x01	; 1
    7d58:	50 40       	sbci	r21, 0x00	; 0
    7d5a:	94 f0       	brlt	.+36     	; 0x7d80 <ldexp+0x38>
    7d5c:	59 f0       	breq	.+22     	; 0x7d74 <ldexp+0x2c>
    7d5e:	88 23       	and	r24, r24
    7d60:	32 f0       	brmi	.+12     	; 0x7d6e <ldexp+0x26>
    7d62:	66 0f       	add	r22, r22
    7d64:	77 1f       	adc	r23, r23
    7d66:	88 1f       	adc	r24, r24
    7d68:	91 50       	subi	r25, 0x01	; 1
    7d6a:	50 40       	sbci	r21, 0x00	; 0
    7d6c:	c1 f7       	brne	.-16     	; 0x7d5e <ldexp+0x16>
    7d6e:	9e 3f       	cpi	r25, 0xFE	; 254
    7d70:	51 05       	cpc	r21, r1
    7d72:	44 f7       	brge	.-48     	; 0x7d44 <inverse+0xe>
    7d74:	88 0f       	add	r24, r24
    7d76:	91 1d       	adc	r25, r1
    7d78:	96 95       	lsr	r25
    7d7a:	87 95       	ror	r24
    7d7c:	97 f9       	bld	r25, 7
    7d7e:	08 95       	ret
    7d80:	5f 3f       	cpi	r21, 0xFF	; 255
    7d82:	ac f0       	brlt	.+42     	; 0x7dae <ldexp+0x66>
    7d84:	98 3e       	cpi	r25, 0xE8	; 232
    7d86:	9c f0       	brlt	.+38     	; 0x7dae <ldexp+0x66>
    7d88:	bb 27       	eor	r27, r27
    7d8a:	86 95       	lsr	r24
    7d8c:	77 95       	ror	r23
    7d8e:	67 95       	ror	r22
    7d90:	b7 95       	ror	r27
    7d92:	08 f4       	brcc	.+2      	; 0x7d96 <ldexp+0x4e>
    7d94:	b1 60       	ori	r27, 0x01	; 1
    7d96:	93 95       	inc	r25
    7d98:	c1 f7       	brne	.-16     	; 0x7d8a <ldexp+0x42>
    7d9a:	bb 0f       	add	r27, r27
    7d9c:	58 f7       	brcc	.-42     	; 0x7d74 <ldexp+0x2c>
    7d9e:	11 f4       	brne	.+4      	; 0x7da4 <ldexp+0x5c>
    7da0:	60 ff       	sbrs	r22, 0
    7da2:	e8 cf       	rjmp	.-48     	; 0x7d74 <ldexp+0x2c>
    7da4:	6f 5f       	subi	r22, 0xFF	; 255
    7da6:	7f 4f       	sbci	r23, 0xFF	; 255
    7da8:	8f 4f       	sbci	r24, 0xFF	; 255
    7daa:	9f 4f       	sbci	r25, 0xFF	; 255
    7dac:	e3 cf       	rjmp	.-58     	; 0x7d74 <ldexp+0x2c>
    7dae:	58 cf       	rjmp	.-336    	; 0x7c60 <__fp_szero>

00007db0 <lround>:
    7db0:	25 df       	rcall	.-438    	; 0x7bfc <__fp_splitA>
    7db2:	58 f1       	brcs	.+86     	; 0x7e0a <lround+0x5a>
    7db4:	9e 57       	subi	r25, 0x7E	; 126
    7db6:	58 f1       	brcs	.+86     	; 0x7e0e <lround+0x5e>
    7db8:	98 51       	subi	r25, 0x18	; 24
    7dba:	a0 f0       	brcs	.+40     	; 0x7de4 <lround+0x34>
    7dbc:	e9 f0       	breq	.+58     	; 0x7df8 <lround+0x48>
    7dbe:	98 30       	cpi	r25, 0x08	; 8
    7dc0:	20 f5       	brcc	.+72     	; 0x7e0a <lround+0x5a>
    7dc2:	09 2e       	mov	r0, r25
    7dc4:	99 27       	eor	r25, r25
    7dc6:	66 0f       	add	r22, r22
    7dc8:	77 1f       	adc	r23, r23
    7dca:	88 1f       	adc	r24, r24
    7dcc:	99 1f       	adc	r25, r25
    7dce:	0a 94       	dec	r0
    7dd0:	d1 f7       	brne	.-12     	; 0x7dc6 <lround+0x16>
    7dd2:	12 c0       	rjmp	.+36     	; 0x7df8 <lround+0x48>
    7dd4:	06 2e       	mov	r0, r22
    7dd6:	67 2f       	mov	r22, r23
    7dd8:	78 2f       	mov	r23, r24
    7dda:	88 27       	eor	r24, r24
    7ddc:	98 5f       	subi	r25, 0xF8	; 248
    7dde:	11 f4       	brne	.+4      	; 0x7de4 <lround+0x34>
    7de0:	00 0c       	add	r0, r0
    7de2:	07 c0       	rjmp	.+14     	; 0x7df2 <lround+0x42>
    7de4:	99 3f       	cpi	r25, 0xF9	; 249
    7de6:	b4 f3       	brlt	.-20     	; 0x7dd4 <lround+0x24>
    7de8:	86 95       	lsr	r24
    7dea:	77 95       	ror	r23
    7dec:	67 95       	ror	r22
    7dee:	93 95       	inc	r25
    7df0:	d9 f7       	brne	.-10     	; 0x7de8 <lround+0x38>
    7df2:	61 1d       	adc	r22, r1
    7df4:	71 1d       	adc	r23, r1
    7df6:	81 1d       	adc	r24, r1
    7df8:	3e f4       	brtc	.+14     	; 0x7e08 <lround+0x58>
    7dfa:	90 95       	com	r25
    7dfc:	80 95       	com	r24
    7dfe:	70 95       	com	r23
    7e00:	61 95       	neg	r22
    7e02:	7f 4f       	sbci	r23, 0xFF	; 255
    7e04:	8f 4f       	sbci	r24, 0xFF	; 255
    7e06:	9f 4f       	sbci	r25, 0xFF	; 255
    7e08:	08 95       	ret
    7e0a:	68 94       	set
    7e0c:	29 cf       	rjmp	.-430    	; 0x7c60 <__fp_szero>
    7e0e:	27 cf       	rjmp	.-434    	; 0x7c5e <__fp_zero>

00007e10 <__mulsf3>:
    7e10:	0b d0       	rcall	.+22     	; 0x7e28 <__mulsf3x>
    7e12:	ca ce       	rjmp	.-620    	; 0x7ba8 <__fp_round>
    7e14:	93 de       	rcall	.-730    	; 0x7b3c <__fp_pscA>
    7e16:	28 f0       	brcs	.+10     	; 0x7e22 <__mulsf3+0x12>
    7e18:	98 de       	rcall	.-720    	; 0x7b4a <__fp_pscB>
    7e1a:	18 f0       	brcs	.+6      	; 0x7e22 <__mulsf3+0x12>
    7e1c:	95 23       	and	r25, r21
    7e1e:	09 f0       	breq	.+2      	; 0x7e22 <__mulsf3+0x12>
    7e20:	36 ce       	rjmp	.-916    	; 0x7a8e <__fp_inf>
    7e22:	64 ce       	rjmp	.-824    	; 0x7aec <__fp_nan>
    7e24:	11 24       	eor	r1, r1
    7e26:	1c cf       	rjmp	.-456    	; 0x7c60 <__fp_szero>

00007e28 <__mulsf3x>:
    7e28:	e1 de       	rcall	.-574    	; 0x7bec <__fp_split3>
    7e2a:	a0 f3       	brcs	.-24     	; 0x7e14 <__mulsf3+0x4>

00007e2c <__mulsf3_pse>:
    7e2c:	95 9f       	mul	r25, r21
    7e2e:	d1 f3       	breq	.-12     	; 0x7e24 <__mulsf3+0x14>
    7e30:	95 0f       	add	r25, r21
    7e32:	50 e0       	ldi	r21, 0x00	; 0
    7e34:	55 1f       	adc	r21, r21
    7e36:	62 9f       	mul	r22, r18
    7e38:	f0 01       	movw	r30, r0
    7e3a:	72 9f       	mul	r23, r18
    7e3c:	bb 27       	eor	r27, r27
    7e3e:	f0 0d       	add	r31, r0
    7e40:	b1 1d       	adc	r27, r1
    7e42:	63 9f       	mul	r22, r19
    7e44:	aa 27       	eor	r26, r26
    7e46:	f0 0d       	add	r31, r0
    7e48:	b1 1d       	adc	r27, r1
    7e4a:	aa 1f       	adc	r26, r26
    7e4c:	64 9f       	mul	r22, r20
    7e4e:	66 27       	eor	r22, r22
    7e50:	b0 0d       	add	r27, r0
    7e52:	a1 1d       	adc	r26, r1
    7e54:	66 1f       	adc	r22, r22
    7e56:	82 9f       	mul	r24, r18
    7e58:	22 27       	eor	r18, r18
    7e5a:	b0 0d       	add	r27, r0
    7e5c:	a1 1d       	adc	r26, r1
    7e5e:	62 1f       	adc	r22, r18
    7e60:	73 9f       	mul	r23, r19
    7e62:	b0 0d       	add	r27, r0
    7e64:	a1 1d       	adc	r26, r1
    7e66:	62 1f       	adc	r22, r18
    7e68:	83 9f       	mul	r24, r19
    7e6a:	a0 0d       	add	r26, r0
    7e6c:	61 1d       	adc	r22, r1
    7e6e:	22 1f       	adc	r18, r18
    7e70:	74 9f       	mul	r23, r20
    7e72:	33 27       	eor	r19, r19
    7e74:	a0 0d       	add	r26, r0
    7e76:	61 1d       	adc	r22, r1
    7e78:	23 1f       	adc	r18, r19
    7e7a:	84 9f       	mul	r24, r20
    7e7c:	60 0d       	add	r22, r0
    7e7e:	21 1d       	adc	r18, r1
    7e80:	82 2f       	mov	r24, r18
    7e82:	76 2f       	mov	r23, r22
    7e84:	6a 2f       	mov	r22, r26
    7e86:	11 24       	eor	r1, r1
    7e88:	9f 57       	subi	r25, 0x7F	; 127
    7e8a:	50 40       	sbci	r21, 0x00	; 0
    7e8c:	8a f0       	brmi	.+34     	; 0x7eb0 <__mulsf3_pse+0x84>
    7e8e:	e1 f0       	breq	.+56     	; 0x7ec8 <__mulsf3_pse+0x9c>
    7e90:	88 23       	and	r24, r24
    7e92:	4a f0       	brmi	.+18     	; 0x7ea6 <__mulsf3_pse+0x7a>
    7e94:	ee 0f       	add	r30, r30
    7e96:	ff 1f       	adc	r31, r31
    7e98:	bb 1f       	adc	r27, r27
    7e9a:	66 1f       	adc	r22, r22
    7e9c:	77 1f       	adc	r23, r23
    7e9e:	88 1f       	adc	r24, r24
    7ea0:	91 50       	subi	r25, 0x01	; 1
    7ea2:	50 40       	sbci	r21, 0x00	; 0
    7ea4:	a9 f7       	brne	.-22     	; 0x7e90 <__mulsf3_pse+0x64>
    7ea6:	9e 3f       	cpi	r25, 0xFE	; 254
    7ea8:	51 05       	cpc	r21, r1
    7eaa:	70 f0       	brcs	.+28     	; 0x7ec8 <__mulsf3_pse+0x9c>
    7eac:	f0 cd       	rjmp	.-1056   	; 0x7a8e <__fp_inf>
    7eae:	d8 ce       	rjmp	.-592    	; 0x7c60 <__fp_szero>
    7eb0:	5f 3f       	cpi	r21, 0xFF	; 255
    7eb2:	ec f3       	brlt	.-6      	; 0x7eae <__mulsf3_pse+0x82>
    7eb4:	98 3e       	cpi	r25, 0xE8	; 232
    7eb6:	dc f3       	brlt	.-10     	; 0x7eae <__mulsf3_pse+0x82>
    7eb8:	86 95       	lsr	r24
    7eba:	77 95       	ror	r23
    7ebc:	67 95       	ror	r22
    7ebe:	b7 95       	ror	r27
    7ec0:	f7 95       	ror	r31
    7ec2:	e7 95       	ror	r30
    7ec4:	9f 5f       	subi	r25, 0xFF	; 255
    7ec6:	c1 f7       	brne	.-16     	; 0x7eb8 <__mulsf3_pse+0x8c>
    7ec8:	fe 2b       	or	r31, r30
    7eca:	88 0f       	add	r24, r24
    7ecc:	91 1d       	adc	r25, r1
    7ece:	96 95       	lsr	r25
    7ed0:	87 95       	ror	r24
    7ed2:	97 f9       	bld	r25, 7
    7ed4:	08 95       	ret

00007ed6 <sin>:
    7ed6:	9f 93       	push	r25
    7ed8:	40 de       	rcall	.-896    	; 0x7b5a <__fp_rempio2>
    7eda:	0f 90       	pop	r0
    7edc:	07 fc       	sbrc	r0, 7
    7ede:	ee 5f       	subi	r30, 0xFE	; 254
    7ee0:	74 ce       	rjmp	.-792    	; 0x7bca <__fp_sinus>
    7ee2:	11 f4       	brne	.+4      	; 0x7ee8 <sin+0x12>
    7ee4:	0e f4       	brtc	.+2      	; 0x7ee8 <sin+0x12>
    7ee6:	02 ce       	rjmp	.-1020   	; 0x7aec <__fp_nan>
    7ee8:	f3 cd       	rjmp	.-1050   	; 0x7ad0 <__fp_mpack>

00007eea <sqrt>:
    7eea:	88 de       	rcall	.-752    	; 0x7bfc <__fp_splitA>
    7eec:	d0 f3       	brcs	.-12     	; 0x7ee2 <sin+0xc>
    7eee:	99 23       	and	r25, r25
    7ef0:	d9 f3       	breq	.-10     	; 0x7ee8 <sin+0x12>
    7ef2:	ce f3       	brts	.-14     	; 0x7ee6 <sin+0x10>
    7ef4:	9f 57       	subi	r25, 0x7F	; 127
    7ef6:	55 0b       	sbc	r21, r21
    7ef8:	87 ff       	sbrs	r24, 7
    7efa:	43 d0       	rcall	.+134    	; 0x7f82 <__fp_norm2>
    7efc:	00 24       	eor	r0, r0
    7efe:	a0 e6       	ldi	r26, 0x60	; 96
    7f00:	40 ea       	ldi	r20, 0xA0	; 160
    7f02:	90 01       	movw	r18, r0
    7f04:	80 58       	subi	r24, 0x80	; 128
    7f06:	56 95       	lsr	r21
    7f08:	97 95       	ror	r25
    7f0a:	28 f4       	brcc	.+10     	; 0x7f16 <sqrt+0x2c>
    7f0c:	80 5c       	subi	r24, 0xC0	; 192
    7f0e:	66 0f       	add	r22, r22
    7f10:	77 1f       	adc	r23, r23
    7f12:	88 1f       	adc	r24, r24
    7f14:	20 f0       	brcs	.+8      	; 0x7f1e <sqrt+0x34>
    7f16:	26 17       	cp	r18, r22
    7f18:	37 07       	cpc	r19, r23
    7f1a:	48 07       	cpc	r20, r24
    7f1c:	30 f4       	brcc	.+12     	; 0x7f2a <sqrt+0x40>
    7f1e:	62 1b       	sub	r22, r18
    7f20:	73 0b       	sbc	r23, r19
    7f22:	84 0b       	sbc	r24, r20
    7f24:	20 29       	or	r18, r0
    7f26:	31 29       	or	r19, r1
    7f28:	4a 2b       	or	r20, r26
    7f2a:	a6 95       	lsr	r26
    7f2c:	17 94       	ror	r1
    7f2e:	07 94       	ror	r0
    7f30:	20 25       	eor	r18, r0
    7f32:	31 25       	eor	r19, r1
    7f34:	4a 27       	eor	r20, r26
    7f36:	58 f7       	brcc	.-42     	; 0x7f0e <sqrt+0x24>
    7f38:	66 0f       	add	r22, r22
    7f3a:	77 1f       	adc	r23, r23
    7f3c:	88 1f       	adc	r24, r24
    7f3e:	20 f0       	brcs	.+8      	; 0x7f48 <sqrt+0x5e>
    7f40:	26 17       	cp	r18, r22
    7f42:	37 07       	cpc	r19, r23
    7f44:	48 07       	cpc	r20, r24
    7f46:	30 f4       	brcc	.+12     	; 0x7f54 <sqrt+0x6a>
    7f48:	62 0b       	sbc	r22, r18
    7f4a:	73 0b       	sbc	r23, r19
    7f4c:	84 0b       	sbc	r24, r20
    7f4e:	20 0d       	add	r18, r0
    7f50:	31 1d       	adc	r19, r1
    7f52:	41 1d       	adc	r20, r1
    7f54:	a0 95       	com	r26
    7f56:	81 f7       	brne	.-32     	; 0x7f38 <sqrt+0x4e>
    7f58:	b9 01       	movw	r22, r18
    7f5a:	84 2f       	mov	r24, r20
    7f5c:	91 58       	subi	r25, 0x81	; 129
    7f5e:	88 0f       	add	r24, r24
    7f60:	96 95       	lsr	r25
    7f62:	87 95       	ror	r24
    7f64:	08 95       	ret

00007f66 <square>:
    7f66:	9b 01       	movw	r18, r22
    7f68:	ac 01       	movw	r20, r24
    7f6a:	52 cf       	rjmp	.-348    	; 0x7e10 <__mulsf3>

00007f6c <trunc>:
    7f6c:	61 de       	rcall	.-830    	; 0x7c30 <__fp_trunc>
    7f6e:	20 f0       	brcs	.+8      	; 0x7f78 <trunc+0xc>
    7f70:	9f 37       	cpi	r25, 0x7F	; 127
    7f72:	08 f4       	brcc	.+2      	; 0x7f76 <trunc+0xa>
    7f74:	75 ce       	rjmp	.-790    	; 0x7c60 <__fp_szero>
    7f76:	91 cd       	rjmp	.-1246   	; 0x7a9a <__fp_mintl>
    7f78:	ab cd       	rjmp	.-1194   	; 0x7ad0 <__fp_mpack>

00007f7a <__unordsf2>:
    7f7a:	65 dd       	rcall	.-1334   	; 0x7a46 <__fp_cmp>
    7f7c:	88 0b       	sbc	r24, r24
    7f7e:	99 0b       	sbc	r25, r25
    7f80:	08 95       	ret

00007f82 <__fp_norm2>:
    7f82:	91 50       	subi	r25, 0x01	; 1
    7f84:	50 40       	sbci	r21, 0x00	; 0
    7f86:	66 0f       	add	r22, r22
    7f88:	77 1f       	adc	r23, r23
    7f8a:	88 1f       	adc	r24, r24
    7f8c:	d2 f7       	brpl	.-12     	; 0x7f82 <__fp_norm2>
    7f8e:	08 95       	ret

00007f90 <__fp_powsodd>:
    7f90:	9f 93       	push	r25
    7f92:	8f 93       	push	r24
    7f94:	7f 93       	push	r23
    7f96:	6f 93       	push	r22
    7f98:	ff 93       	push	r31
    7f9a:	ef 93       	push	r30
    7f9c:	9b 01       	movw	r18, r22
    7f9e:	ac 01       	movw	r20, r24
    7fa0:	37 df       	rcall	.-402    	; 0x7e10 <__mulsf3>
    7fa2:	ef 91       	pop	r30
    7fa4:	ff 91       	pop	r31
    7fa6:	a5 dd       	rcall	.-1206   	; 0x7af2 <__fp_powser>
    7fa8:	2f 91       	pop	r18
    7faa:	3f 91       	pop	r19
    7fac:	4f 91       	pop	r20
    7fae:	5f 91       	pop	r21
    7fb0:	2f cf       	rjmp	.-418    	; 0x7e10 <__mulsf3>

00007fb2 <__mulsi3>:
    7fb2:	62 9f       	mul	r22, r18
    7fb4:	d0 01       	movw	r26, r0
    7fb6:	73 9f       	mul	r23, r19
    7fb8:	f0 01       	movw	r30, r0
    7fba:	82 9f       	mul	r24, r18
    7fbc:	e0 0d       	add	r30, r0
    7fbe:	f1 1d       	adc	r31, r1
    7fc0:	64 9f       	mul	r22, r20
    7fc2:	e0 0d       	add	r30, r0
    7fc4:	f1 1d       	adc	r31, r1
    7fc6:	92 9f       	mul	r25, r18
    7fc8:	f0 0d       	add	r31, r0
    7fca:	83 9f       	mul	r24, r19
    7fcc:	f0 0d       	add	r31, r0
    7fce:	74 9f       	mul	r23, r20
    7fd0:	f0 0d       	add	r31, r0
    7fd2:	65 9f       	mul	r22, r21
    7fd4:	f0 0d       	add	r31, r0
    7fd6:	99 27       	eor	r25, r25
    7fd8:	72 9f       	mul	r23, r18
    7fda:	b0 0d       	add	r27, r0
    7fdc:	e1 1d       	adc	r30, r1
    7fde:	f9 1f       	adc	r31, r25
    7fe0:	63 9f       	mul	r22, r19
    7fe2:	b0 0d       	add	r27, r0
    7fe4:	e1 1d       	adc	r30, r1
    7fe6:	f9 1f       	adc	r31, r25
    7fe8:	bd 01       	movw	r22, r26
    7fea:	cf 01       	movw	r24, r30
    7fec:	11 24       	eor	r1, r1
    7fee:	08 95       	ret

00007ff0 <__udivmodsi4>:
    7ff0:	a1 e2       	ldi	r26, 0x21	; 33
    7ff2:	1a 2e       	mov	r1, r26
    7ff4:	aa 1b       	sub	r26, r26
    7ff6:	bb 1b       	sub	r27, r27
    7ff8:	fd 01       	movw	r30, r26
    7ffa:	0d c0       	rjmp	.+26     	; 0x8016 <__udivmodsi4_ep>

00007ffc <__udivmodsi4_loop>:
    7ffc:	aa 1f       	adc	r26, r26
    7ffe:	bb 1f       	adc	r27, r27
    8000:	ee 1f       	adc	r30, r30
    8002:	ff 1f       	adc	r31, r31
    8004:	a2 17       	cp	r26, r18
    8006:	b3 07       	cpc	r27, r19
    8008:	e4 07       	cpc	r30, r20
    800a:	f5 07       	cpc	r31, r21
    800c:	20 f0       	brcs	.+8      	; 0x8016 <__udivmodsi4_ep>
    800e:	a2 1b       	sub	r26, r18
    8010:	b3 0b       	sbc	r27, r19
    8012:	e4 0b       	sbc	r30, r20
    8014:	f5 0b       	sbc	r31, r21

00008016 <__udivmodsi4_ep>:
    8016:	66 1f       	adc	r22, r22
    8018:	77 1f       	adc	r23, r23
    801a:	88 1f       	adc	r24, r24
    801c:	99 1f       	adc	r25, r25
    801e:	1a 94       	dec	r1
    8020:	69 f7       	brne	.-38     	; 0x7ffc <__udivmodsi4_loop>
    8022:	60 95       	com	r22
    8024:	70 95       	com	r23
    8026:	80 95       	com	r24
    8028:	90 95       	com	r25
    802a:	9b 01       	movw	r18, r22
    802c:	ac 01       	movw	r20, r24
    802e:	bd 01       	movw	r22, r26
    8030:	cf 01       	movw	r24, r30
    8032:	08 95       	ret

00008034 <__prologue_saves__>:
    8034:	2f 92       	push	r2
    8036:	3f 92       	push	r3
    8038:	4f 92       	push	r4
    803a:	5f 92       	push	r5
    803c:	6f 92       	push	r6
    803e:	7f 92       	push	r7
    8040:	8f 92       	push	r8
    8042:	9f 92       	push	r9
    8044:	af 92       	push	r10
    8046:	bf 92       	push	r11
    8048:	cf 92       	push	r12
    804a:	df 92       	push	r13
    804c:	ef 92       	push	r14
    804e:	ff 92       	push	r15
    8050:	0f 93       	push	r16
    8052:	1f 93       	push	r17
    8054:	cf 93       	push	r28
    8056:	df 93       	push	r29
    8058:	cd b7       	in	r28, 0x3d	; 61
    805a:	de b7       	in	r29, 0x3e	; 62
    805c:	ca 1b       	sub	r28, r26
    805e:	db 0b       	sbc	r29, r27
    8060:	0f b6       	in	r0, 0x3f	; 63
    8062:	f8 94       	cli
    8064:	de bf       	out	0x3e, r29	; 62
    8066:	0f be       	out	0x3f, r0	; 63
    8068:	cd bf       	out	0x3d, r28	; 61
    806a:	19 94       	eijmp

0000806c <__epilogue_restores__>:
    806c:	2a 88       	ldd	r2, Y+18	; 0x12
    806e:	39 88       	ldd	r3, Y+17	; 0x11
    8070:	48 88       	ldd	r4, Y+16	; 0x10
    8072:	5f 84       	ldd	r5, Y+15	; 0x0f
    8074:	6e 84       	ldd	r6, Y+14	; 0x0e
    8076:	7d 84       	ldd	r7, Y+13	; 0x0d
    8078:	8c 84       	ldd	r8, Y+12	; 0x0c
    807a:	9b 84       	ldd	r9, Y+11	; 0x0b
    807c:	aa 84       	ldd	r10, Y+10	; 0x0a
    807e:	b9 84       	ldd	r11, Y+9	; 0x09
    8080:	c8 84       	ldd	r12, Y+8	; 0x08
    8082:	df 80       	ldd	r13, Y+7	; 0x07
    8084:	ee 80       	ldd	r14, Y+6	; 0x06
    8086:	fd 80       	ldd	r15, Y+5	; 0x05
    8088:	0c 81       	ldd	r16, Y+4	; 0x04
    808a:	1b 81       	ldd	r17, Y+3	; 0x03
    808c:	aa 81       	ldd	r26, Y+2	; 0x02
    808e:	b9 81       	ldd	r27, Y+1	; 0x01
    8090:	ce 0f       	add	r28, r30
    8092:	d1 1d       	adc	r29, r1
    8094:	0f b6       	in	r0, 0x3f	; 63
    8096:	f8 94       	cli
    8098:	de bf       	out	0x3e, r29	; 62
    809a:	0f be       	out	0x3f, r0	; 63
    809c:	cd bf       	out	0x3d, r28	; 61
    809e:	ed 01       	movw	r28, r26
    80a0:	08 95       	ret

000080a2 <strtod>:
    80a2:	8f 92       	push	r8
    80a4:	9f 92       	push	r9
    80a6:	af 92       	push	r10
    80a8:	bf 92       	push	r11
    80aa:	cf 92       	push	r12
    80ac:	df 92       	push	r13
    80ae:	ef 92       	push	r14
    80b0:	ff 92       	push	r15
    80b2:	0f 93       	push	r16
    80b4:	1f 93       	push	r17
    80b6:	cf 93       	push	r28
    80b8:	df 93       	push	r29
    80ba:	ec 01       	movw	r28, r24
    80bc:	5b 01       	movw	r10, r22
    80be:	61 15       	cp	r22, r1
    80c0:	71 05       	cpc	r23, r1
    80c2:	19 f0       	breq	.+6      	; 0x80ca <strtod+0x28>
    80c4:	fb 01       	movw	r30, r22
    80c6:	80 83       	st	Z, r24
    80c8:	91 83       	std	Z+1, r25	; 0x01
    80ca:	f9 90       	ld	r15, Y+
    80cc:	8f 2d       	mov	r24, r15
    80ce:	90 e0       	ldi	r25, 0x00	; 0
    80d0:	0e 94 b5 42 	call	0x856a	; 0x856a <isspace>
    80d4:	89 2b       	or	r24, r25
    80d6:	c9 f7       	brne	.-14     	; 0x80ca <strtod+0x28>
    80d8:	fd e2       	ldi	r31, 0x2D	; 45
    80da:	ff 16       	cp	r15, r31
    80dc:	21 f4       	brne	.+8      	; 0x80e6 <strtod+0x44>
    80de:	f9 90       	ld	r15, Y+
    80e0:	ee 24       	eor	r14, r14
    80e2:	e3 94       	inc	r14
    80e4:	05 c0       	rjmp	.+10     	; 0x80f0 <strtod+0x4e>
    80e6:	2b e2       	ldi	r18, 0x2B	; 43
    80e8:	f2 16       	cp	r15, r18
    80ea:	09 f4       	brne	.+2      	; 0x80ee <strtod+0x4c>
    80ec:	f9 90       	ld	r15, Y+
    80ee:	ee 24       	eor	r14, r14
    80f0:	8e 01       	movw	r16, r28
    80f2:	01 50       	subi	r16, 0x01	; 1
    80f4:	10 40       	sbci	r17, 0x00	; 0
    80f6:	c8 01       	movw	r24, r16
    80f8:	6a e6       	ldi	r22, 0x6A	; 106
    80fa:	7b e1       	ldi	r23, 0x1B	; 27
    80fc:	43 e0       	ldi	r20, 0x03	; 3
    80fe:	50 e0       	ldi	r21, 0x00	; 0
    8100:	0e 94 bd 42 	call	0x857a	; 0x857a <strncasecmp_P>
    8104:	89 2b       	or	r24, r25
    8106:	01 f5       	brne	.+64     	; 0x8148 <strtod+0xa6>
    8108:	8e 01       	movw	r16, r28
    810a:	0e 5f       	subi	r16, 0xFE	; 254
    810c:	1f 4f       	sbci	r17, 0xFF	; 255
    810e:	c8 01       	movw	r24, r16
    8110:	6d e6       	ldi	r22, 0x6D	; 109
    8112:	7b e1       	ldi	r23, 0x1B	; 27
    8114:	45 e0       	ldi	r20, 0x05	; 5
    8116:	50 e0       	ldi	r21, 0x00	; 0
    8118:	0e 94 bd 42 	call	0x857a	; 0x857a <strncasecmp_P>
    811c:	89 2b       	or	r24, r25
    811e:	19 f4       	brne	.+6      	; 0x8126 <strtod+0x84>
    8120:	8e 01       	movw	r16, r28
    8122:	09 5f       	subi	r16, 0xF9	; 249
    8124:	1f 4f       	sbci	r17, 0xFF	; 255
    8126:	a1 14       	cp	r10, r1
    8128:	b1 04       	cpc	r11, r1
    812a:	19 f0       	breq	.+6      	; 0x8132 <strtod+0x90>
    812c:	f5 01       	movw	r30, r10
    812e:	00 83       	st	Z, r16
    8130:	11 83       	std	Z+1, r17	; 0x01
    8132:	e0 fc       	sbrc	r14, 0
    8134:	04 c0       	rjmp	.+8      	; 0x813e <strtod+0x9c>
    8136:	70 e0       	ldi	r23, 0x00	; 0
    8138:	90 e0       	ldi	r25, 0x00	; 0
    813a:	80 e8       	ldi	r24, 0x80	; 128
    813c:	14 c0       	rjmp	.+40     	; 0x8166 <strtod+0xc4>
    813e:	70 e0       	ldi	r23, 0x00	; 0
    8140:	90 e0       	ldi	r25, 0x00	; 0
    8142:	80 e8       	ldi	r24, 0x80	; 128
    8144:	6f ef       	ldi	r22, 0xFF	; 255
    8146:	08 c1       	rjmp	.+528    	; 0x8358 <strtod+0x2b6>
    8148:	c8 01       	movw	r24, r16
    814a:	62 e7       	ldi	r22, 0x72	; 114
    814c:	7b e1       	ldi	r23, 0x1B	; 27
    814e:	43 e0       	ldi	r20, 0x03	; 3
    8150:	50 e0       	ldi	r21, 0x00	; 0
    8152:	0e 94 bd 42 	call	0x857a	; 0x857a <strncasecmp_P>
    8156:	89 2b       	or	r24, r25
    8158:	69 f4       	brne	.+26     	; 0x8174 <strtod+0xd2>
    815a:	a1 14       	cp	r10, r1
    815c:	b1 04       	cpc	r11, r1
    815e:	29 f4       	brne	.+10     	; 0x816a <strtod+0xc8>
    8160:	70 e0       	ldi	r23, 0x00	; 0
    8162:	90 e0       	ldi	r25, 0x00	; 0
    8164:	80 ec       	ldi	r24, 0xC0	; 192
    8166:	6f e7       	ldi	r22, 0x7F	; 127
    8168:	f7 c0       	rjmp	.+494    	; 0x8358 <strtod+0x2b6>
    816a:	22 96       	adiw	r28, 0x02	; 2
    816c:	f5 01       	movw	r30, r10
    816e:	c0 83       	st	Z, r28
    8170:	d1 83       	std	Z+1, r29	; 0x01
    8172:	f6 cf       	rjmp	.-20     	; 0x8160 <strtod+0xbe>
    8174:	88 24       	eor	r8, r8
    8176:	99 24       	eor	r9, r9
    8178:	40 e0       	ldi	r20, 0x00	; 0
    817a:	50 e0       	ldi	r21, 0x00	; 0
    817c:	60 e0       	ldi	r22, 0x00	; 0
    817e:	70 e0       	ldi	r23, 0x00	; 0
    8180:	ef 2d       	mov	r30, r15
    8182:	e0 53       	subi	r30, 0x30	; 48
    8184:	ea 30       	cpi	r30, 0x0A	; 10
    8186:	a0 f5       	brcc	.+104    	; 0x81f0 <strtod+0x14e>
    8188:	f2 e0       	ldi	r31, 0x02	; 2
    818a:	ef 2a       	or	r14, r31
    818c:	8e 2d       	mov	r24, r14
    818e:	90 e0       	ldi	r25, 0x00	; 0
    8190:	9c 01       	movw	r18, r24
    8192:	28 70       	andi	r18, 0x08	; 8
    8194:	30 70       	andi	r19, 0x00	; 0
    8196:	e2 fe       	sbrs	r14, 2
    8198:	06 c0       	rjmp	.+12     	; 0x81a6 <strtod+0x104>
    819a:	23 2b       	or	r18, r19
    819c:	79 f5       	brne	.+94     	; 0x81fc <strtod+0x15a>
    819e:	08 94       	sec
    81a0:	81 1c       	adc	r8, r1
    81a2:	91 1c       	adc	r9, r1
    81a4:	2b c0       	rjmp	.+86     	; 0x81fc <strtod+0x15a>
    81a6:	23 2b       	or	r18, r19
    81a8:	19 f0       	breq	.+6      	; 0x81b0 <strtod+0x10e>
    81aa:	08 94       	sec
    81ac:	81 08       	sbc	r8, r1
    81ae:	91 08       	sbc	r9, r1
    81b0:	db 01       	movw	r26, r22
    81b2:	ca 01       	movw	r24, r20
    81b4:	12 e0       	ldi	r17, 0x02	; 2
    81b6:	88 0f       	add	r24, r24
    81b8:	99 1f       	adc	r25, r25
    81ba:	aa 1f       	adc	r26, r26
    81bc:	bb 1f       	adc	r27, r27
    81be:	1a 95       	dec	r17
    81c0:	d1 f7       	brne	.-12     	; 0x81b6 <strtod+0x114>
    81c2:	48 0f       	add	r20, r24
    81c4:	59 1f       	adc	r21, r25
    81c6:	6a 1f       	adc	r22, r26
    81c8:	7b 1f       	adc	r23, r27
    81ca:	44 0f       	add	r20, r20
    81cc:	55 1f       	adc	r21, r21
    81ce:	66 1f       	adc	r22, r22
    81d0:	77 1f       	adc	r23, r23
    81d2:	4e 0f       	add	r20, r30
    81d4:	51 1d       	adc	r21, r1
    81d6:	61 1d       	adc	r22, r1
    81d8:	71 1d       	adc	r23, r1
    81da:	48 39       	cpi	r20, 0x98	; 152
    81dc:	29 e9       	ldi	r18, 0x99	; 153
    81de:	52 07       	cpc	r21, r18
    81e0:	29 e9       	ldi	r18, 0x99	; 153
    81e2:	62 07       	cpc	r22, r18
    81e4:	29 e1       	ldi	r18, 0x19	; 25
    81e6:	72 07       	cpc	r23, r18
    81e8:	48 f0       	brcs	.+18     	; 0x81fc <strtod+0x15a>
    81ea:	84 e0       	ldi	r24, 0x04	; 4
    81ec:	e8 2a       	or	r14, r24
    81ee:	06 c0       	rjmp	.+12     	; 0x81fc <strtod+0x15a>
    81f0:	ee 3f       	cpi	r30, 0xFE	; 254
    81f2:	31 f4       	brne	.+12     	; 0x8200 <strtod+0x15e>
    81f4:	e3 fc       	sbrc	r14, 3
    81f6:	39 c0       	rjmp	.+114    	; 0x826a <strtod+0x1c8>
    81f8:	98 e0       	ldi	r25, 0x08	; 8
    81fa:	e9 2a       	or	r14, r25
    81fc:	f9 90       	ld	r15, Y+
    81fe:	c0 cf       	rjmp	.-128    	; 0x8180 <strtod+0xde>
    8200:	e5 33       	cpi	r30, 0x35	; 53
    8202:	11 f0       	breq	.+4      	; 0x8208 <strtod+0x166>
    8204:	e5 31       	cpi	r30, 0x15	; 21
    8206:	89 f5       	brne	.+98     	; 0x826a <strtod+0x1c8>
    8208:	29 91       	ld	r18, Y+
    820a:	2d 32       	cpi	r18, 0x2D	; 45
    820c:	19 f4       	brne	.+6      	; 0x8214 <strtod+0x172>
    820e:	e0 e1       	ldi	r30, 0x10	; 16
    8210:	ee 2a       	or	r14, r30
    8212:	05 c0       	rjmp	.+10     	; 0x821e <strtod+0x17c>
    8214:	2b 32       	cpi	r18, 0x2B	; 43
    8216:	19 f0       	breq	.+6      	; 0x821e <strtod+0x17c>
    8218:	81 e0       	ldi	r24, 0x01	; 1
    821a:	90 e0       	ldi	r25, 0x00	; 0
    821c:	03 c0       	rjmp	.+6      	; 0x8224 <strtod+0x182>
    821e:	29 91       	ld	r18, Y+
    8220:	82 e0       	ldi	r24, 0x02	; 2
    8222:	90 e0       	ldi	r25, 0x00	; 0
    8224:	e2 2f       	mov	r30, r18
    8226:	e0 53       	subi	r30, 0x30	; 48
    8228:	ea 30       	cpi	r30, 0x0A	; 10
    822a:	18 f0       	brcs	.+6      	; 0x8232 <strtod+0x190>
    822c:	c8 1b       	sub	r28, r24
    822e:	d9 0b       	sbc	r29, r25
    8230:	1c c0       	rjmp	.+56     	; 0x826a <strtod+0x1c8>
    8232:	20 e0       	ldi	r18, 0x00	; 0
    8234:	30 e0       	ldi	r19, 0x00	; 0
    8236:	fc e0       	ldi	r31, 0x0C	; 12
    8238:	20 38       	cpi	r18, 0x80	; 128
    823a:	3f 07       	cpc	r19, r31
    823c:	5c f4       	brge	.+22     	; 0x8254 <strtod+0x1b2>
    823e:	c9 01       	movw	r24, r18
    8240:	88 0f       	add	r24, r24
    8242:	99 1f       	adc	r25, r25
    8244:	88 0f       	add	r24, r24
    8246:	99 1f       	adc	r25, r25
    8248:	28 0f       	add	r18, r24
    824a:	39 1f       	adc	r19, r25
    824c:	22 0f       	add	r18, r18
    824e:	33 1f       	adc	r19, r19
    8250:	2e 0f       	add	r18, r30
    8252:	31 1d       	adc	r19, r1
    8254:	e9 91       	ld	r30, Y+
    8256:	e0 53       	subi	r30, 0x30	; 48
    8258:	ea 30       	cpi	r30, 0x0A	; 10
    825a:	68 f3       	brcs	.-38     	; 0x8236 <strtod+0x194>
    825c:	e4 fe       	sbrs	r14, 4
    825e:	03 c0       	rjmp	.+6      	; 0x8266 <strtod+0x1c4>
    8260:	30 95       	com	r19
    8262:	21 95       	neg	r18
    8264:	3f 4f       	sbci	r19, 0xFF	; 255
    8266:	82 0e       	add	r8, r18
    8268:	93 1e       	adc	r9, r19
    826a:	ce 2c       	mov	r12, r14
    826c:	dd 24       	eor	r13, r13
    826e:	e1 fe       	sbrs	r14, 1
    8270:	07 c0       	rjmp	.+14     	; 0x8280 <strtod+0x1de>
    8272:	a1 14       	cp	r10, r1
    8274:	b1 04       	cpc	r11, r1
    8276:	21 f0       	breq	.+8      	; 0x8280 <strtod+0x1de>
    8278:	21 97       	sbiw	r28, 0x01	; 1
    827a:	f5 01       	movw	r30, r10
    827c:	c0 83       	st	Z, r28
    827e:	d1 83       	std	Z+1, r29	; 0x01
    8280:	cb 01       	movw	r24, r22
    8282:	ba 01       	movw	r22, r20
    8284:	0e 94 e6 3c 	call	0x79cc	; 0x79cc <__floatunsisf>
    8288:	7b 01       	movw	r14, r22
    828a:	8c 01       	movw	r16, r24
    828c:	f3 e0       	ldi	r31, 0x03	; 3
    828e:	cf 22       	and	r12, r31
    8290:	dd 24       	eor	r13, r13
    8292:	23 e0       	ldi	r18, 0x03	; 3
    8294:	c2 16       	cp	r12, r18
    8296:	d1 04       	cpc	r13, r1
    8298:	21 f4       	brne	.+8      	; 0x82a2 <strtod+0x200>
    829a:	17 fb       	bst	r17, 7
    829c:	10 95       	com	r17
    829e:	17 f9       	bld	r17, 7
    82a0:	10 95       	com	r17
    82a2:	57 01       	movw	r10, r14
    82a4:	68 01       	movw	r12, r16
    82a6:	c8 01       	movw	r24, r16
    82a8:	b7 01       	movw	r22, r14
    82aa:	20 e0       	ldi	r18, 0x00	; 0
    82ac:	30 e0       	ldi	r19, 0x00	; 0
    82ae:	40 e0       	ldi	r20, 0x00	; 0
    82b0:	50 e0       	ldi	r21, 0x00	; 0
    82b2:	0e 94 46 3c 	call	0x788c	; 0x788c <__cmpsf2>
    82b6:	88 23       	and	r24, r24
    82b8:	09 f4       	brne	.+2      	; 0x82bc <strtod+0x21a>
    82ba:	4a c0       	rjmp	.+148    	; 0x8350 <strtod+0x2ae>
    82bc:	97 fe       	sbrs	r9, 7
    82be:	0d c0       	rjmp	.+26     	; 0x82da <strtod+0x238>
    82c0:	29 e8       	ldi	r18, 0x89	; 137
    82c2:	e2 2e       	mov	r14, r18
    82c4:	2b e1       	ldi	r18, 0x1B	; 27
    82c6:	f2 2e       	mov	r15, r18
    82c8:	90 94       	com	r9
    82ca:	81 94       	neg	r8
    82cc:	91 08       	sbc	r9, r1
    82ce:	93 94       	inc	r9
    82d0:	c0 e2       	ldi	r28, 0x20	; 32
    82d2:	d0 e0       	ldi	r29, 0x00	; 0
    82d4:	00 e0       	ldi	r16, 0x00	; 0
    82d6:	10 e0       	ldi	r17, 0x00	; 0
    82d8:	12 c0       	rjmp	.+36     	; 0x82fe <strtod+0x25c>
    82da:	91 ea       	ldi	r25, 0xA1	; 161
    82dc:	e9 2e       	mov	r14, r25
    82de:	9b e1       	ldi	r25, 0x1B	; 27
    82e0:	f9 2e       	mov	r15, r25
    82e2:	f6 cf       	rjmp	.-20     	; 0x82d0 <strtod+0x22e>
    82e4:	f7 01       	movw	r30, r14
    82e6:	25 91       	lpm	r18, Z+
    82e8:	35 91       	lpm	r19, Z+
    82ea:	45 91       	lpm	r20, Z+
    82ec:	54 91       	lpm	r21, Z+
    82ee:	c6 01       	movw	r24, r12
    82f0:	b5 01       	movw	r22, r10
    82f2:	0e 94 08 3f 	call	0x7e10	; 0x7e10 <__mulsf3>
    82f6:	5b 01       	movw	r10, r22
    82f8:	6c 01       	movw	r12, r24
    82fa:	8c 1a       	sub	r8, r28
    82fc:	9d 0a       	sbc	r9, r29
    82fe:	8c 16       	cp	r8, r28
    8300:	9d 06       	cpc	r9, r29
    8302:	84 f7       	brge	.-32     	; 0x82e4 <strtod+0x242>
    8304:	d5 95       	asr	r29
    8306:	c7 95       	ror	r28
    8308:	0f 5f       	subi	r16, 0xFF	; 255
    830a:	1f 4f       	sbci	r17, 0xFF	; 255
    830c:	06 30       	cpi	r16, 0x06	; 6
    830e:	11 05       	cpc	r17, r1
    8310:	29 f0       	breq	.+10     	; 0x831c <strtod+0x27a>
    8312:	8c ef       	ldi	r24, 0xFC	; 252
    8314:	9f ef       	ldi	r25, 0xFF	; 255
    8316:	e8 0e       	add	r14, r24
    8318:	f9 1e       	adc	r15, r25
    831a:	f1 cf       	rjmp	.-30     	; 0x82fe <strtod+0x25c>
    831c:	c5 01       	movw	r24, r10
    831e:	d6 01       	movw	r26, r12
    8320:	7c 01       	movw	r14, r24
    8322:	8d 01       	movw	r16, r26
    8324:	8c 2d       	mov	r24, r12
    8326:	88 0f       	add	r24, r24
    8328:	8d 2d       	mov	r24, r13
    832a:	88 1f       	adc	r24, r24
    832c:	8f 3f       	cpi	r24, 0xFF	; 255
    832e:	51 f0       	breq	.+20     	; 0x8344 <strtod+0x2a2>
    8330:	c6 01       	movw	r24, r12
    8332:	b5 01       	movw	r22, r10
    8334:	20 e0       	ldi	r18, 0x00	; 0
    8336:	30 e0       	ldi	r19, 0x00	; 0
    8338:	40 e0       	ldi	r20, 0x00	; 0
    833a:	50 e0       	ldi	r21, 0x00	; 0
    833c:	0e 94 46 3c 	call	0x788c	; 0x788c <__cmpsf2>
    8340:	88 23       	and	r24, r24
    8342:	31 f4       	brne	.+12     	; 0x8350 <strtod+0x2ae>
    8344:	82 e2       	ldi	r24, 0x22	; 34
    8346:	90 e0       	ldi	r25, 0x00	; 0
    8348:	80 93 12 25 	sts	0x2512, r24
    834c:	90 93 13 25 	sts	0x2513, r25
    8350:	7e 2d       	mov	r23, r14
    8352:	9f 2d       	mov	r25, r15
    8354:	80 2f       	mov	r24, r16
    8356:	61 2f       	mov	r22, r17
    8358:	27 2f       	mov	r18, r23
    835a:	39 2f       	mov	r19, r25
    835c:	48 2f       	mov	r20, r24
    835e:	56 2f       	mov	r21, r22
    8360:	b9 01       	movw	r22, r18
    8362:	ca 01       	movw	r24, r20
    8364:	df 91       	pop	r29
    8366:	cf 91       	pop	r28
    8368:	1f 91       	pop	r17
    836a:	0f 91       	pop	r16
    836c:	ff 90       	pop	r15
    836e:	ef 90       	pop	r14
    8370:	df 90       	pop	r13
    8372:	cf 90       	pop	r12
    8374:	bf 90       	pop	r11
    8376:	af 90       	pop	r10
    8378:	9f 90       	pop	r9
    837a:	8f 90       	pop	r8
    837c:	08 95       	ret

0000837e <atoi>:
    837e:	fc 01       	movw	r30, r24
    8380:	88 27       	eor	r24, r24
    8382:	99 27       	eor	r25, r25
    8384:	e8 94       	clt
    8386:	21 91       	ld	r18, Z+
    8388:	20 32       	cpi	r18, 0x20	; 32
    838a:	e9 f3       	breq	.-6      	; 0x8386 <atoi+0x8>
    838c:	29 30       	cpi	r18, 0x09	; 9
    838e:	10 f0       	brcs	.+4      	; 0x8394 <atoi+0x16>
    8390:	2e 30       	cpi	r18, 0x0E	; 14
    8392:	c8 f3       	brcs	.-14     	; 0x8386 <atoi+0x8>
    8394:	2b 32       	cpi	r18, 0x2B	; 43
    8396:	41 f0       	breq	.+16     	; 0x83a8 <atoi+0x2a>
    8398:	2d 32       	cpi	r18, 0x2D	; 45
    839a:	39 f4       	brne	.+14     	; 0x83aa <atoi+0x2c>
    839c:	68 94       	set
    839e:	04 c0       	rjmp	.+8      	; 0x83a8 <atoi+0x2a>
    83a0:	0e 94 eb 42 	call	0x85d6	; 0x85d6 <__mulhi_const_10>
    83a4:	82 0f       	add	r24, r18
    83a6:	91 1d       	adc	r25, r1
    83a8:	21 91       	ld	r18, Z+
    83aa:	20 53       	subi	r18, 0x30	; 48
    83ac:	2a 30       	cpi	r18, 0x0A	; 10
    83ae:	c0 f3       	brcs	.-16     	; 0x83a0 <atoi+0x22>
    83b0:	1e f4       	brtc	.+6      	; 0x83b8 <atoi+0x3a>
    83b2:	90 95       	com	r25
    83b4:	81 95       	neg	r24
    83b6:	9f 4f       	sbci	r25, 0xFF	; 255
    83b8:	08 95       	ret

000083ba <__ftoa_engine>:
    83ba:	28 30       	cpi	r18, 0x08	; 8
    83bc:	08 f0       	brcs	.+2      	; 0x83c0 <__ftoa_engine+0x6>
    83be:	27 e0       	ldi	r18, 0x07	; 7
    83c0:	33 27       	eor	r19, r19
    83c2:	da 01       	movw	r26, r20
    83c4:	99 0f       	add	r25, r25
    83c6:	31 1d       	adc	r19, r1
    83c8:	87 fd       	sbrc	r24, 7
    83ca:	91 60       	ori	r25, 0x01	; 1
    83cc:	00 96       	adiw	r24, 0x00	; 0
    83ce:	61 05       	cpc	r22, r1
    83d0:	71 05       	cpc	r23, r1
    83d2:	39 f4       	brne	.+14     	; 0x83e2 <__ftoa_engine+0x28>
    83d4:	32 60       	ori	r19, 0x02	; 2
    83d6:	2e 5f       	subi	r18, 0xFE	; 254
    83d8:	3d 93       	st	X+, r19
    83da:	30 e3       	ldi	r19, 0x30	; 48
    83dc:	2a 95       	dec	r18
    83de:	e1 f7       	brne	.-8      	; 0x83d8 <__ftoa_engine+0x1e>
    83e0:	08 95       	ret
    83e2:	9f 3f       	cpi	r25, 0xFF	; 255
    83e4:	30 f0       	brcs	.+12     	; 0x83f2 <__ftoa_engine+0x38>
    83e6:	80 38       	cpi	r24, 0x80	; 128
    83e8:	71 05       	cpc	r23, r1
    83ea:	61 05       	cpc	r22, r1
    83ec:	09 f0       	breq	.+2      	; 0x83f0 <__ftoa_engine+0x36>
    83ee:	3c 5f       	subi	r19, 0xFC	; 252
    83f0:	3c 5f       	subi	r19, 0xFC	; 252
    83f2:	3d 93       	st	X+, r19
    83f4:	91 30       	cpi	r25, 0x01	; 1
    83f6:	08 f0       	brcs	.+2      	; 0x83fa <__ftoa_engine+0x40>
    83f8:	80 68       	ori	r24, 0x80	; 128
    83fa:	91 1d       	adc	r25, r1
    83fc:	df 93       	push	r29
    83fe:	cf 93       	push	r28
    8400:	1f 93       	push	r17
    8402:	0f 93       	push	r16
    8404:	ff 92       	push	r15
    8406:	ef 92       	push	r14
    8408:	19 2f       	mov	r17, r25
    840a:	98 7f       	andi	r25, 0xF8	; 248
    840c:	96 95       	lsr	r25
    840e:	e9 2f       	mov	r30, r25
    8410:	96 95       	lsr	r25
    8412:	96 95       	lsr	r25
    8414:	e9 0f       	add	r30, r25
    8416:	ff 27       	eor	r31, r31
    8418:	e1 50       	subi	r30, 0x01	; 1
    841a:	f4 4e       	sbci	r31, 0xE4	; 228
    841c:	99 27       	eor	r25, r25
    841e:	33 27       	eor	r19, r19
    8420:	ee 24       	eor	r14, r14
    8422:	ff 24       	eor	r15, r15
    8424:	a7 01       	movw	r20, r14
    8426:	e7 01       	movw	r28, r14
    8428:	05 90       	lpm	r0, Z+
    842a:	08 94       	sec
    842c:	07 94       	ror	r0
    842e:	28 f4       	brcc	.+10     	; 0x843a <__ftoa_engine+0x80>
    8430:	36 0f       	add	r19, r22
    8432:	e7 1e       	adc	r14, r23
    8434:	f8 1e       	adc	r15, r24
    8436:	49 1f       	adc	r20, r25
    8438:	51 1d       	adc	r21, r1
    843a:	66 0f       	add	r22, r22
    843c:	77 1f       	adc	r23, r23
    843e:	88 1f       	adc	r24, r24
    8440:	99 1f       	adc	r25, r25
    8442:	06 94       	lsr	r0
    8444:	a1 f7       	brne	.-24     	; 0x842e <__ftoa_engine+0x74>
    8446:	05 90       	lpm	r0, Z+
    8448:	07 94       	ror	r0
    844a:	28 f4       	brcc	.+10     	; 0x8456 <__ftoa_engine+0x9c>
    844c:	e7 0e       	add	r14, r23
    844e:	f8 1e       	adc	r15, r24
    8450:	49 1f       	adc	r20, r25
    8452:	56 1f       	adc	r21, r22
    8454:	c1 1d       	adc	r28, r1
    8456:	77 0f       	add	r23, r23
    8458:	88 1f       	adc	r24, r24
    845a:	99 1f       	adc	r25, r25
    845c:	66 1f       	adc	r22, r22
    845e:	06 94       	lsr	r0
    8460:	a1 f7       	brne	.-24     	; 0x844a <__ftoa_engine+0x90>
    8462:	05 90       	lpm	r0, Z+
    8464:	07 94       	ror	r0
    8466:	28 f4       	brcc	.+10     	; 0x8472 <__ftoa_engine+0xb8>
    8468:	f8 0e       	add	r15, r24
    846a:	49 1f       	adc	r20, r25
    846c:	56 1f       	adc	r21, r22
    846e:	c7 1f       	adc	r28, r23
    8470:	d1 1d       	adc	r29, r1
    8472:	88 0f       	add	r24, r24
    8474:	99 1f       	adc	r25, r25
    8476:	66 1f       	adc	r22, r22
    8478:	77 1f       	adc	r23, r23
    847a:	06 94       	lsr	r0
    847c:	a1 f7       	brne	.-24     	; 0x8466 <__ftoa_engine+0xac>
    847e:	05 90       	lpm	r0, Z+
    8480:	07 94       	ror	r0
    8482:	20 f4       	brcc	.+8      	; 0x848c <__ftoa_engine+0xd2>
    8484:	49 0f       	add	r20, r25
    8486:	56 1f       	adc	r21, r22
    8488:	c7 1f       	adc	r28, r23
    848a:	d8 1f       	adc	r29, r24
    848c:	99 0f       	add	r25, r25
    848e:	66 1f       	adc	r22, r22
    8490:	77 1f       	adc	r23, r23
    8492:	88 1f       	adc	r24, r24
    8494:	06 94       	lsr	r0
    8496:	a9 f7       	brne	.-22     	; 0x8482 <__ftoa_engine+0xc8>
    8498:	84 91       	lpm	r24, Z+
    849a:	10 95       	com	r17
    849c:	17 70       	andi	r17, 0x07	; 7
    849e:	41 f0       	breq	.+16     	; 0x84b0 <__ftoa_engine+0xf6>
    84a0:	d6 95       	lsr	r29
    84a2:	c7 95       	ror	r28
    84a4:	57 95       	ror	r21
    84a6:	47 95       	ror	r20
    84a8:	f7 94       	ror	r15
    84aa:	e7 94       	ror	r14
    84ac:	1a 95       	dec	r17
    84ae:	c1 f7       	brne	.-16     	; 0x84a0 <__ftoa_engine+0xe6>
    84b0:	e5 ea       	ldi	r30, 0xA5	; 165
    84b2:	fb e1       	ldi	r31, 0x1B	; 27
    84b4:	68 94       	set
    84b6:	15 90       	lpm	r1, Z+
    84b8:	15 91       	lpm	r17, Z+
    84ba:	35 91       	lpm	r19, Z+
    84bc:	65 91       	lpm	r22, Z+
    84be:	95 91       	lpm	r25, Z+
    84c0:	05 90       	lpm	r0, Z+
    84c2:	7f e2       	ldi	r23, 0x2F	; 47
    84c4:	73 95       	inc	r23
    84c6:	e1 18       	sub	r14, r1
    84c8:	f1 0a       	sbc	r15, r17
    84ca:	43 0b       	sbc	r20, r19
    84cc:	56 0b       	sbc	r21, r22
    84ce:	c9 0b       	sbc	r28, r25
    84d0:	d0 09       	sbc	r29, r0
    84d2:	c0 f7       	brcc	.-16     	; 0x84c4 <__ftoa_engine+0x10a>
    84d4:	e1 0c       	add	r14, r1
    84d6:	f1 1e       	adc	r15, r17
    84d8:	43 1f       	adc	r20, r19
    84da:	56 1f       	adc	r21, r22
    84dc:	c9 1f       	adc	r28, r25
    84de:	d0 1d       	adc	r29, r0
    84e0:	7e f4       	brtc	.+30     	; 0x8500 <__ftoa_engine+0x146>
    84e2:	70 33       	cpi	r23, 0x30	; 48
    84e4:	11 f4       	brne	.+4      	; 0x84ea <__ftoa_engine+0x130>
    84e6:	8a 95       	dec	r24
    84e8:	e6 cf       	rjmp	.-52     	; 0x84b6 <__ftoa_engine+0xfc>
    84ea:	e8 94       	clt
    84ec:	01 50       	subi	r16, 0x01	; 1
    84ee:	30 f0       	brcs	.+12     	; 0x84fc <__ftoa_engine+0x142>
    84f0:	08 0f       	add	r16, r24
    84f2:	0a f4       	brpl	.+2      	; 0x84f6 <__ftoa_engine+0x13c>
    84f4:	00 27       	eor	r16, r16
    84f6:	02 17       	cp	r16, r18
    84f8:	08 f4       	brcc	.+2      	; 0x84fc <__ftoa_engine+0x142>
    84fa:	20 2f       	mov	r18, r16
    84fc:	23 95       	inc	r18
    84fe:	02 2f       	mov	r16, r18
    8500:	7a 33       	cpi	r23, 0x3A	; 58
    8502:	28 f0       	brcs	.+10     	; 0x850e <__ftoa_engine+0x154>
    8504:	79 e3       	ldi	r23, 0x39	; 57
    8506:	7d 93       	st	X+, r23
    8508:	2a 95       	dec	r18
    850a:	e9 f7       	brne	.-6      	; 0x8506 <__ftoa_engine+0x14c>
    850c:	10 c0       	rjmp	.+32     	; 0x852e <__ftoa_engine+0x174>
    850e:	7d 93       	st	X+, r23
    8510:	2a 95       	dec	r18
    8512:	89 f6       	brne	.-94     	; 0x84b6 <__ftoa_engine+0xfc>
    8514:	06 94       	lsr	r0
    8516:	97 95       	ror	r25
    8518:	67 95       	ror	r22
    851a:	37 95       	ror	r19
    851c:	17 95       	ror	r17
    851e:	17 94       	ror	r1
    8520:	e1 18       	sub	r14, r1
    8522:	f1 0a       	sbc	r15, r17
    8524:	43 0b       	sbc	r20, r19
    8526:	56 0b       	sbc	r21, r22
    8528:	c9 0b       	sbc	r28, r25
    852a:	d0 09       	sbc	r29, r0
    852c:	98 f0       	brcs	.+38     	; 0x8554 <__ftoa_engine+0x19a>
    852e:	23 95       	inc	r18
    8530:	7e 91       	ld	r23, -X
    8532:	73 95       	inc	r23
    8534:	7a 33       	cpi	r23, 0x3A	; 58
    8536:	08 f0       	brcs	.+2      	; 0x853a <__ftoa_engine+0x180>
    8538:	70 e3       	ldi	r23, 0x30	; 48
    853a:	7c 93       	st	X, r23
    853c:	20 13       	cpse	r18, r16
    853e:	b8 f7       	brcc	.-18     	; 0x852e <__ftoa_engine+0x174>
    8540:	7e 91       	ld	r23, -X
    8542:	70 61       	ori	r23, 0x10	; 16
    8544:	7d 93       	st	X+, r23
    8546:	30 f0       	brcs	.+12     	; 0x8554 <__ftoa_engine+0x19a>
    8548:	83 95       	inc	r24
    854a:	71 e3       	ldi	r23, 0x31	; 49
    854c:	7d 93       	st	X+, r23
    854e:	70 e3       	ldi	r23, 0x30	; 48
    8550:	2a 95       	dec	r18
    8552:	e1 f7       	brne	.-8      	; 0x854c <__ftoa_engine+0x192>
    8554:	11 24       	eor	r1, r1
    8556:	ef 90       	pop	r14
    8558:	ff 90       	pop	r15
    855a:	0f 91       	pop	r16
    855c:	1f 91       	pop	r17
    855e:	cf 91       	pop	r28
    8560:	df 91       	pop	r29
    8562:	99 27       	eor	r25, r25
    8564:	87 fd       	sbrc	r24, 7
    8566:	90 95       	com	r25
    8568:	08 95       	ret

0000856a <isspace>:
    856a:	91 11       	cpse	r25, r1
    856c:	21 c1       	rjmp	.+578    	; 0x87b0 <__ctype_isfalse>
    856e:	80 32       	cpi	r24, 0x20	; 32
    8570:	19 f0       	breq	.+6      	; 0x8578 <isspace+0xe>
    8572:	89 50       	subi	r24, 0x09	; 9
    8574:	85 50       	subi	r24, 0x05	; 5
    8576:	d0 f7       	brcc	.-12     	; 0x856c <isspace+0x2>
    8578:	08 95       	ret

0000857a <strncasecmp_P>:
    857a:	fb 01       	movw	r30, r22
    857c:	dc 01       	movw	r26, r24
    857e:	41 50       	subi	r20, 0x01	; 1
    8580:	50 40       	sbci	r21, 0x00	; 0
    8582:	88 f0       	brcs	.+34     	; 0x85a6 <strncasecmp_P+0x2c>
    8584:	8d 91       	ld	r24, X+
    8586:	81 34       	cpi	r24, 0x41	; 65
    8588:	1c f0       	brlt	.+6      	; 0x8590 <strncasecmp_P+0x16>
    858a:	8b 35       	cpi	r24, 0x5B	; 91
    858c:	0c f4       	brge	.+2      	; 0x8590 <strncasecmp_P+0x16>
    858e:	80 5e       	subi	r24, 0xE0	; 224
    8590:	65 91       	lpm	r22, Z+
    8592:	61 34       	cpi	r22, 0x41	; 65
    8594:	1c f0       	brlt	.+6      	; 0x859c <strncasecmp_P+0x22>
    8596:	6b 35       	cpi	r22, 0x5B	; 91
    8598:	0c f4       	brge	.+2      	; 0x859c <strncasecmp_P+0x22>
    859a:	60 5e       	subi	r22, 0xE0	; 224
    859c:	86 1b       	sub	r24, r22
    859e:	61 11       	cpse	r22, r1
    85a0:	71 f3       	breq	.-36     	; 0x857e <strncasecmp_P+0x4>
    85a2:	99 0b       	sbc	r25, r25
    85a4:	08 95       	ret
    85a6:	88 1b       	sub	r24, r24
    85a8:	fc cf       	rjmp	.-8      	; 0x85a2 <strncasecmp_P+0x28>

000085aa <strnlen_P>:
    85aa:	fc 01       	movw	r30, r24
    85ac:	05 90       	lpm	r0, Z+
    85ae:	61 50       	subi	r22, 0x01	; 1
    85b0:	70 40       	sbci	r23, 0x00	; 0
    85b2:	01 10       	cpse	r0, r1
    85b4:	d8 f7       	brcc	.-10     	; 0x85ac <strnlen_P+0x2>
    85b6:	80 95       	com	r24
    85b8:	90 95       	com	r25
    85ba:	8e 0f       	add	r24, r30
    85bc:	9f 1f       	adc	r25, r31
    85be:	08 95       	ret

000085c0 <strnlen>:
    85c0:	fc 01       	movw	r30, r24
    85c2:	61 50       	subi	r22, 0x01	; 1
    85c4:	70 40       	sbci	r23, 0x00	; 0
    85c6:	01 90       	ld	r0, Z+
    85c8:	01 10       	cpse	r0, r1
    85ca:	d8 f7       	brcc	.-10     	; 0x85c2 <strnlen+0x2>
    85cc:	80 95       	com	r24
    85ce:	90 95       	com	r25
    85d0:	8e 0f       	add	r24, r30
    85d2:	9f 1f       	adc	r25, r31
    85d4:	08 95       	ret

000085d6 <__mulhi_const_10>:
    85d6:	7a e0       	ldi	r23, 0x0A	; 10
    85d8:	97 9f       	mul	r25, r23
    85da:	90 2d       	mov	r25, r0
    85dc:	87 9f       	mul	r24, r23
    85de:	80 2d       	mov	r24, r0
    85e0:	91 0d       	add	r25, r1
    85e2:	11 24       	eor	r1, r1
    85e4:	08 95       	ret

000085e6 <clearerr>:
    85e6:	fc 01       	movw	r30, r24
    85e8:	83 81       	ldd	r24, Z+3	; 0x03
    85ea:	8f 7c       	andi	r24, 0xCF	; 207
    85ec:	83 83       	std	Z+3, r24	; 0x03
    85ee:	08 95       	ret

000085f0 <fgets>:
    85f0:	cf 92       	push	r12
    85f2:	df 92       	push	r13
    85f4:	ef 92       	push	r14
    85f6:	ff 92       	push	r15
    85f8:	0f 93       	push	r16
    85fa:	1f 93       	push	r17
    85fc:	cf 93       	push	r28
    85fe:	df 93       	push	r29
    8600:	7c 01       	movw	r14, r24
    8602:	6a 01       	movw	r12, r20
    8604:	fa 01       	movw	r30, r20
    8606:	83 81       	ldd	r24, Z+3	; 0x03
    8608:	80 ff       	sbrs	r24, 0
    860a:	19 c0       	rjmp	.+50     	; 0x863e <fgets+0x4e>
    860c:	16 16       	cp	r1, r22
    860e:	17 06       	cpc	r1, r23
    8610:	b4 f4       	brge	.+44     	; 0x863e <fgets+0x4e>
    8612:	eb 01       	movw	r28, r22
    8614:	21 97       	sbiw	r28, 0x01	; 1
    8616:	87 01       	movw	r16, r14
    8618:	0d c0       	rjmp	.+26     	; 0x8634 <fgets+0x44>
    861a:	c6 01       	movw	r24, r12
    861c:	0e 94 db 43 	call	0x87b6	; 0x87b6 <fgetc>
    8620:	ff ef       	ldi	r31, 0xFF	; 255
    8622:	8f 3f       	cpi	r24, 0xFF	; 255
    8624:	9f 07       	cpc	r25, r31
    8626:	59 f0       	breq	.+22     	; 0x863e <fgets+0x4e>
    8628:	f8 01       	movw	r30, r16
    862a:	81 93       	st	Z+, r24
    862c:	8f 01       	movw	r16, r30
    862e:	0a 97       	sbiw	r24, 0x0a	; 10
    8630:	19 f0       	breq	.+6      	; 0x8638 <fgets+0x48>
    8632:	21 97       	sbiw	r28, 0x01	; 1
    8634:	20 97       	sbiw	r28, 0x00	; 0
    8636:	89 f7       	brne	.-30     	; 0x861a <fgets+0x2a>
    8638:	f8 01       	movw	r30, r16
    863a:	10 82       	st	Z, r1
    863c:	02 c0       	rjmp	.+4      	; 0x8642 <fgets+0x52>
    863e:	ee 24       	eor	r14, r14
    8640:	ff 24       	eor	r15, r15
    8642:	c7 01       	movw	r24, r14
    8644:	df 91       	pop	r29
    8646:	cf 91       	pop	r28
    8648:	1f 91       	pop	r17
    864a:	0f 91       	pop	r16
    864c:	ff 90       	pop	r15
    864e:	ef 90       	pop	r14
    8650:	df 90       	pop	r13
    8652:	cf 90       	pop	r12
    8654:	08 95       	ret

00008656 <fputc>:
    8656:	0f 93       	push	r16
    8658:	1f 93       	push	r17
    865a:	cf 93       	push	r28
    865c:	df 93       	push	r29
    865e:	8c 01       	movw	r16, r24
    8660:	eb 01       	movw	r28, r22
    8662:	8b 81       	ldd	r24, Y+3	; 0x03
    8664:	81 ff       	sbrs	r24, 1
    8666:	1b c0       	rjmp	.+54     	; 0x869e <fputc+0x48>
    8668:	82 ff       	sbrs	r24, 2
    866a:	0d c0       	rjmp	.+26     	; 0x8686 <fputc+0x30>
    866c:	2e 81       	ldd	r18, Y+6	; 0x06
    866e:	3f 81       	ldd	r19, Y+7	; 0x07
    8670:	8c 81       	ldd	r24, Y+4	; 0x04
    8672:	9d 81       	ldd	r25, Y+5	; 0x05
    8674:	28 17       	cp	r18, r24
    8676:	39 07       	cpc	r19, r25
    8678:	64 f4       	brge	.+24     	; 0x8692 <fputc+0x3c>
    867a:	e8 81       	ld	r30, Y
    867c:	f9 81       	ldd	r31, Y+1	; 0x01
    867e:	01 93       	st	Z+, r16
    8680:	e8 83       	st	Y, r30
    8682:	f9 83       	std	Y+1, r31	; 0x01
    8684:	06 c0       	rjmp	.+12     	; 0x8692 <fputc+0x3c>
    8686:	e8 85       	ldd	r30, Y+8	; 0x08
    8688:	f9 85       	ldd	r31, Y+9	; 0x09
    868a:	80 2f       	mov	r24, r16
    868c:	19 95       	eicall
    868e:	89 2b       	or	r24, r25
    8690:	31 f4       	brne	.+12     	; 0x869e <fputc+0x48>
    8692:	8e 81       	ldd	r24, Y+6	; 0x06
    8694:	9f 81       	ldd	r25, Y+7	; 0x07
    8696:	01 96       	adiw	r24, 0x01	; 1
    8698:	8e 83       	std	Y+6, r24	; 0x06
    869a:	9f 83       	std	Y+7, r25	; 0x07
    869c:	02 c0       	rjmp	.+4      	; 0x86a2 <fputc+0x4c>
    869e:	0f ef       	ldi	r16, 0xFF	; 255
    86a0:	1f ef       	ldi	r17, 0xFF	; 255
    86a2:	c8 01       	movw	r24, r16
    86a4:	df 91       	pop	r29
    86a6:	cf 91       	pop	r28
    86a8:	1f 91       	pop	r17
    86aa:	0f 91       	pop	r16
    86ac:	08 95       	ret

000086ae <printf_P>:
    86ae:	df 93       	push	r29
    86b0:	cf 93       	push	r28
    86b2:	cd b7       	in	r28, 0x3d	; 61
    86b4:	de b7       	in	r29, 0x3e	; 62
    86b6:	fe 01       	movw	r30, r28
    86b8:	36 96       	adiw	r30, 0x06	; 6
    86ba:	61 91       	ld	r22, Z+
    86bc:	71 91       	ld	r23, Z+
    86be:	a0 91 0e 25 	lds	r26, 0x250E
    86c2:	b0 91 0f 25 	lds	r27, 0x250F
    86c6:	13 96       	adiw	r26, 0x03	; 3
    86c8:	8c 91       	ld	r24, X
    86ca:	13 97       	sbiw	r26, 0x03	; 3
    86cc:	88 60       	ori	r24, 0x08	; 8
    86ce:	13 96       	adiw	r26, 0x03	; 3
    86d0:	8c 93       	st	X, r24
    86d2:	80 91 0e 25 	lds	r24, 0x250E
    86d6:	90 91 0f 25 	lds	r25, 0x250F
    86da:	af 01       	movw	r20, r30
    86dc:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <vfprintf>
    86e0:	e0 91 0e 25 	lds	r30, 0x250E
    86e4:	f0 91 0f 25 	lds	r31, 0x250F
    86e8:	23 81       	ldd	r18, Z+3	; 0x03
    86ea:	27 7f       	andi	r18, 0xF7	; 247
    86ec:	23 83       	std	Z+3, r18	; 0x03
    86ee:	cf 91       	pop	r28
    86f0:	df 91       	pop	r29
    86f2:	08 95       	ret

000086f4 <__ultoa_invert>:
    86f4:	fa 01       	movw	r30, r20
    86f6:	aa 27       	eor	r26, r26
    86f8:	28 30       	cpi	r18, 0x08	; 8
    86fa:	51 f1       	breq	.+84     	; 0x8750 <__ultoa_invert+0x5c>
    86fc:	20 31       	cpi	r18, 0x10	; 16
    86fe:	81 f1       	breq	.+96     	; 0x8760 <__ultoa_invert+0x6c>
    8700:	e8 94       	clt
    8702:	6f 93       	push	r22
    8704:	6e 7f       	andi	r22, 0xFE	; 254
    8706:	6e 5f       	subi	r22, 0xFE	; 254
    8708:	7f 4f       	sbci	r23, 0xFF	; 255
    870a:	8f 4f       	sbci	r24, 0xFF	; 255
    870c:	9f 4f       	sbci	r25, 0xFF	; 255
    870e:	af 4f       	sbci	r26, 0xFF	; 255
    8710:	b1 e0       	ldi	r27, 0x01	; 1
    8712:	3e d0       	rcall	.+124    	; 0x8790 <__ultoa_invert+0x9c>
    8714:	b4 e0       	ldi	r27, 0x04	; 4
    8716:	3c d0       	rcall	.+120    	; 0x8790 <__ultoa_invert+0x9c>
    8718:	67 0f       	add	r22, r23
    871a:	78 1f       	adc	r23, r24
    871c:	89 1f       	adc	r24, r25
    871e:	9a 1f       	adc	r25, r26
    8720:	a1 1d       	adc	r26, r1
    8722:	68 0f       	add	r22, r24
    8724:	79 1f       	adc	r23, r25
    8726:	8a 1f       	adc	r24, r26
    8728:	91 1d       	adc	r25, r1
    872a:	a1 1d       	adc	r26, r1
    872c:	6a 0f       	add	r22, r26
    872e:	71 1d       	adc	r23, r1
    8730:	81 1d       	adc	r24, r1
    8732:	91 1d       	adc	r25, r1
    8734:	a1 1d       	adc	r26, r1
    8736:	20 d0       	rcall	.+64     	; 0x8778 <__ultoa_invert+0x84>
    8738:	09 f4       	brne	.+2      	; 0x873c <__ultoa_invert+0x48>
    873a:	68 94       	set
    873c:	3f 91       	pop	r19
    873e:	2a e0       	ldi	r18, 0x0A	; 10
    8740:	26 9f       	mul	r18, r22
    8742:	11 24       	eor	r1, r1
    8744:	30 19       	sub	r19, r0
    8746:	30 5d       	subi	r19, 0xD0	; 208
    8748:	31 93       	st	Z+, r19
    874a:	de f6       	brtc	.-74     	; 0x8702 <__ultoa_invert+0xe>
    874c:	cf 01       	movw	r24, r30
    874e:	08 95       	ret
    8750:	46 2f       	mov	r20, r22
    8752:	47 70       	andi	r20, 0x07	; 7
    8754:	40 5d       	subi	r20, 0xD0	; 208
    8756:	41 93       	st	Z+, r20
    8758:	b3 e0       	ldi	r27, 0x03	; 3
    875a:	0f d0       	rcall	.+30     	; 0x877a <__ultoa_invert+0x86>
    875c:	c9 f7       	brne	.-14     	; 0x8750 <__ultoa_invert+0x5c>
    875e:	f6 cf       	rjmp	.-20     	; 0x874c <__ultoa_invert+0x58>
    8760:	46 2f       	mov	r20, r22
    8762:	4f 70       	andi	r20, 0x0F	; 15
    8764:	40 5d       	subi	r20, 0xD0	; 208
    8766:	4a 33       	cpi	r20, 0x3A	; 58
    8768:	18 f0       	brcs	.+6      	; 0x8770 <__ultoa_invert+0x7c>
    876a:	49 5d       	subi	r20, 0xD9	; 217
    876c:	31 fd       	sbrc	r19, 1
    876e:	40 52       	subi	r20, 0x20	; 32
    8770:	41 93       	st	Z+, r20
    8772:	02 d0       	rcall	.+4      	; 0x8778 <__ultoa_invert+0x84>
    8774:	a9 f7       	brne	.-22     	; 0x8760 <__ultoa_invert+0x6c>
    8776:	ea cf       	rjmp	.-44     	; 0x874c <__ultoa_invert+0x58>
    8778:	b4 e0       	ldi	r27, 0x04	; 4
    877a:	a6 95       	lsr	r26
    877c:	97 95       	ror	r25
    877e:	87 95       	ror	r24
    8780:	77 95       	ror	r23
    8782:	67 95       	ror	r22
    8784:	ba 95       	dec	r27
    8786:	c9 f7       	brne	.-14     	; 0x877a <__ultoa_invert+0x86>
    8788:	00 97       	sbiw	r24, 0x00	; 0
    878a:	61 05       	cpc	r22, r1
    878c:	71 05       	cpc	r23, r1
    878e:	08 95       	ret
    8790:	9b 01       	movw	r18, r22
    8792:	ac 01       	movw	r20, r24
    8794:	0a 2e       	mov	r0, r26
    8796:	06 94       	lsr	r0
    8798:	57 95       	ror	r21
    879a:	47 95       	ror	r20
    879c:	37 95       	ror	r19
    879e:	27 95       	ror	r18
    87a0:	ba 95       	dec	r27
    87a2:	c9 f7       	brne	.-14     	; 0x8796 <__ultoa_invert+0xa2>
    87a4:	62 0f       	add	r22, r18
    87a6:	73 1f       	adc	r23, r19
    87a8:	84 1f       	adc	r24, r20
    87aa:	95 1f       	adc	r25, r21
    87ac:	a0 1d       	adc	r26, r0
    87ae:	08 95       	ret

000087b0 <__ctype_isfalse>:
    87b0:	99 27       	eor	r25, r25
    87b2:	88 27       	eor	r24, r24

000087b4 <__ctype_istrue>:
    87b4:	08 95       	ret

000087b6 <fgetc>:
    87b6:	cf 93       	push	r28
    87b8:	df 93       	push	r29
    87ba:	ec 01       	movw	r28, r24
    87bc:	4b 81       	ldd	r20, Y+3	; 0x03
    87be:	40 ff       	sbrs	r20, 0
    87c0:	1a c0       	rjmp	.+52     	; 0x87f6 <fgetc+0x40>
    87c2:	46 ff       	sbrs	r20, 6
    87c4:	0a c0       	rjmp	.+20     	; 0x87da <fgetc+0x24>
    87c6:	4f 7b       	andi	r20, 0xBF	; 191
    87c8:	4b 83       	std	Y+3, r20	; 0x03
    87ca:	8e 81       	ldd	r24, Y+6	; 0x06
    87cc:	9f 81       	ldd	r25, Y+7	; 0x07
    87ce:	01 96       	adiw	r24, 0x01	; 1
    87d0:	8e 83       	std	Y+6, r24	; 0x06
    87d2:	9f 83       	std	Y+7, r25	; 0x07
    87d4:	8a 81       	ldd	r24, Y+2	; 0x02
    87d6:	28 2f       	mov	r18, r24
    87d8:	2b c0       	rjmp	.+86     	; 0x8830 <fgetc+0x7a>
    87da:	42 ff       	sbrs	r20, 2
    87dc:	13 c0       	rjmp	.+38     	; 0x8804 <fgetc+0x4e>
    87de:	e8 81       	ld	r30, Y
    87e0:	f9 81       	ldd	r31, Y+1	; 0x01
    87e2:	80 81       	ld	r24, Z
    87e4:	28 2f       	mov	r18, r24
    87e6:	33 27       	eor	r19, r19
    87e8:	27 fd       	sbrc	r18, 7
    87ea:	30 95       	com	r19
    87ec:	21 15       	cp	r18, r1
    87ee:	31 05       	cpc	r19, r1
    87f0:	29 f4       	brne	.+10     	; 0x87fc <fgetc+0x46>
    87f2:	40 62       	ori	r20, 0x20	; 32
    87f4:	4b 83       	std	Y+3, r20	; 0x03
    87f6:	2f ef       	ldi	r18, 0xFF	; 255
    87f8:	3f ef       	ldi	r19, 0xFF	; 255
    87fa:	1b c0       	rjmp	.+54     	; 0x8832 <fgetc+0x7c>
    87fc:	31 96       	adiw	r30, 0x01	; 1
    87fe:	e8 83       	st	Y, r30
    8800:	f9 83       	std	Y+1, r31	; 0x01
    8802:	11 c0       	rjmp	.+34     	; 0x8826 <fgetc+0x70>
    8804:	ea 85       	ldd	r30, Y+10	; 0x0a
    8806:	fb 85       	ldd	r31, Y+11	; 0x0b
    8808:	ce 01       	movw	r24, r28
    880a:	19 95       	eicall
    880c:	9c 01       	movw	r18, r24
    880e:	97 ff       	sbrs	r25, 7
    8810:	0a c0       	rjmp	.+20     	; 0x8826 <fgetc+0x70>
    8812:	9b 81       	ldd	r25, Y+3	; 0x03
    8814:	2f 5f       	subi	r18, 0xFF	; 255
    8816:	3f 4f       	sbci	r19, 0xFF	; 255
    8818:	11 f0       	breq	.+4      	; 0x881e <fgetc+0x68>
    881a:	80 e2       	ldi	r24, 0x20	; 32
    881c:	01 c0       	rjmp	.+2      	; 0x8820 <fgetc+0x6a>
    881e:	80 e1       	ldi	r24, 0x10	; 16
    8820:	89 2b       	or	r24, r25
    8822:	8b 83       	std	Y+3, r24	; 0x03
    8824:	e8 cf       	rjmp	.-48     	; 0x87f6 <fgetc+0x40>
    8826:	8e 81       	ldd	r24, Y+6	; 0x06
    8828:	9f 81       	ldd	r25, Y+7	; 0x07
    882a:	01 96       	adiw	r24, 0x01	; 1
    882c:	8e 83       	std	Y+6, r24	; 0x06
    882e:	9f 83       	std	Y+7, r25	; 0x07
    8830:	30 e0       	ldi	r19, 0x00	; 0
    8832:	c9 01       	movw	r24, r18
    8834:	df 91       	pop	r29
    8836:	cf 91       	pop	r28
    8838:	08 95       	ret

0000883a <_exit>:
    883a:	f8 94       	cli

0000883c <__stop_program>:
    883c:	ff cf       	rjmp	.-2      	; 0x883c <__stop_program>
