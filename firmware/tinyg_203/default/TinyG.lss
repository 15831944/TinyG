
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000093f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00802000  000093f8  0000948c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000041c  0080212a  0080212a  000095b6  2**0
                  ALLOC
  3 .debug_aranges 00000360  00000000  00000000  000095b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000df4  00000000  00000000  00009916  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ce1c  00000000  00000000  0000a70a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002c15  00000000  00000000  00017526  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005088  00000000  00000000  0001a13b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000af0  00000000  00000000  0001f1c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000024f9  00000000  00000000  0001fcb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003af9  00000000  00000000  000221ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00025ca6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <__ctors_end>
       4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
       8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
       c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      10:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      14:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      18:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      1c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      20:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      24:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      28:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      2c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      30:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      34:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      38:	0c 94 a3 27 	jmp	0x4f46	; 0x4f46 <__vector_14>
      3c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      40:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      44:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      48:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      4c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      50:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      54:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      58:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      5c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      60:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      64:	0c 94 43 2c 	jmp	0x5886	; 0x5886 <__vector_25>
      68:	0c 94 dc 29 	jmp	0x53b8	; 0x53b8 <__vector_26>
      6c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      70:	0c 94 03 37 	jmp	0x6e06	; 0x6e06 <__vector_28>
      74:	0c 94 bf 34 	jmp	0x697e	; 0x697e <__vector_29>
      78:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      7c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      80:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      84:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      88:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      8c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      90:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      94:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      98:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      9c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      a0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      a4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      a8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      ac:	0c 94 55 33 	jmp	0x66aa	; 0x66aa <__vector_43>
      b0:	0c 94 5f 33 	jmp	0x66be	; 0x66be <__vector_44>
      b4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      b8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      bc:	0c 94 d9 26 	jmp	0x4db2	; 0x4db2 <__vector_47>
      c0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      c4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      c8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      cc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      d0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      d4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      d8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      dc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      e0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      e4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      e8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      ec:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      f0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      f4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      f8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
      fc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     100:	0c 94 69 33 	jmp	0x66d2	; 0x66d2 <__vector_64>
     104:	0c 94 73 33 	jmp	0x66e6	; 0x66e6 <__vector_65>
     108:	0c 94 2d 33 	jmp	0x665a	; 0x665a <__vector_66>
     10c:	0c 94 37 33 	jmp	0x666e	; 0x666e <__vector_67>
     110:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     114:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     118:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     11c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     120:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     124:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     128:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     12c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     130:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     134:	0c 94 3e 27 	jmp	0x4e7c	; 0x4e7c <__vector_77>
     138:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     13c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     140:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     144:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     148:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     14c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     150:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     154:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     158:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     15c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     160:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     164:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     168:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     16c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     170:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     174:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     178:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     17c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     180:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     184:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     188:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     18c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     190:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     194:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     198:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     19c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1a0:	0c 94 41 33 	jmp	0x6682	; 0x6682 <__vector_104>
     1a4:	0c 94 4b 33 	jmp	0x6696	; 0x6696 <__vector_105>
     1a8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1ac:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1b0:	0c 94 74 26 	jmp	0x4ce8	; 0x4ce8 <__vector_108>
     1b4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1b8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1bc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1c0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1c4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1c8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1cc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1d0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1d4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1d8:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1dc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1e0:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1e4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <cfgMsgXaxis>:
     23b:	58 00                                               X.

0000023d <cfgMsgYaxis>:
     23d:	59 00                                               Y.

0000023f <cfgMsgZaxis>:
     23f:	5a 00                                               Z.

00000241 <cfgMsgAaxis>:
     241:	41 00                                               A.

00000243 <cfgMsgs>:
     243:	3b 02 3d 02 3f 02 41 02                             ;.=.?.A.

0000024b <configs_P>:
     24b:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25b:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26b:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27b:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28b:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29b:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2ab:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bb:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2db:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2eb:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2fb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30b:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31b:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32b:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33b:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34b:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35b:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36b:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37b:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38b:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

00000399 <__c.3833>:
     399:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     3a9:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

000003b4 <__c.3830>:
     3b4:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     3c4:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

000003ce <__c.3827>:
     3ce:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     3de:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

000003e8 <__c.3824>:
     3e8:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     3f8:	74 3a 20 25 73 0a 00                                t: %s..

000003ff <__c.3821>:
     3ff:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     40f:	4d 6f 64 65 0a 00                                   Mode..

00000415 <__c.3818>:
     415:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     425:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

00000432 <__c.3750>:
     432:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     442:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     452:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     462:	29 0a 0a 00                                         )...

00000466 <__c.3748>:
     466:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     476:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     486:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000496 <__c.3746>:
     496:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     4a6:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4b6:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004c7 <__c.3744>:
     4c7:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     4d7:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4e7:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004f8 <__c.3742>:
     4f8:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     508:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     518:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     528:	6c 0a 00                                            l..

0000052b <__c.3740>:
     52b:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     53b:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     54b:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     55b:	6e 0a 00                                            n..

0000055e <__c.3738>:
     55e:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     56e:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     57e:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     58e:	74 65 70 73 29 0a 00                                teps)..

00000595 <__c.3736>:
     595:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     5a5:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     5b5:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     5c5:	70 0a 00                                            p..

000005c8 <__c.3734>:
     5c8:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     5d8:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     5e8:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     5f8:	73 74 65 70 73 29 0a 00                             steps)..

00000600 <__c.3732>:
     600:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     610:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     620:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     630:	73 74 65 70 73 29 0a 00                             steps)..

00000638 <__c.3727>:
     638:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     648:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

00000656 <__c.3713>:
     656:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     666:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     676:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000681 <__c.3711>:
     681:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     691:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     6a1:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000006ab <__c.3709>:
     6ab:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     6bb:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     6cb:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000006d5 <__c.3707>:
     6d5:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     6e5:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     6f5:	73 20 2d 2d 2d 0a 00                                s ---..

000006fc <__c.3705>:
     6fc:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     70c:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     71c:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000724 <bsel>:
     724:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

0000072f <bscale>:
     72f:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

0000073a <__c.3533>:
     73a:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     74a:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     75a:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000766 <readlnFuncs>:
     766:	a3 2b 78 2b 78 2b e3 2b 78 2b 78 2b 78 2b 78 2b     .+x+x+.+x+x+x+x+
     776:	cf 2b 78 2b a3 2b 78 2b 78 2b a3 2b f5 2b fb 2b     .+x+.+x+x+.+.+.+
     786:	78 2b ef 2b 78 2b e9 2b 78 2b 78 2b 78 2b 78 2b     x+.+x+.+x+x+x+x+
     796:	e3 2b 78 2b 78 2b e3 2b 78 2b 78 2b 78 2b 78 2b     .+x+x+.+x+x+x+x+
     7a6:	78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b     x+x+x+x+x+x+x+x+
     7b6:	78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b     x+x+x+x+x+x+x+x+
     7c6:	78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b     x+x+x+x+x+x+x+x+
     7d6:	78 2b 78 2b 78 2b c5 2b 78 2b 78 2b 78 2b 78 2b     x+x+x+.+x+x+x+x+
     7e6:	78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b     x+x+x+x+x+x+x+x+
     7f6:	78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b     x+x+x+x+x+x+x+x+
     806:	78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b     x+x+x+x+x+x+x+x+
     816:	78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b     x+x+x+x+x+x+x+x+
     826:	78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b     x+x+x+x+x+x+x+x+
     836:	78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b     x+x+x+x+x+x+x+x+
     846:	78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b     x+x+x+x+x+x+x+x+
     856:	78 2b 78 2b 78 2b 78 2b 78 2b 78 2b 78 2b cf 2b     x+x+x+x+x+x+x+.+

00000866 <getcFuncs>:
     866:	f2 2a e2 2a e2 2a e3 2b e2 2a e2 2a e2 2a e2 2a     .*.*.*.+.*.*.*.*
     876:	11 2b e2 2a f2 2a e2 2a e2 2a f2 2a f5 2b fb 2b     .+.*.*.*.*.*.+.+
     886:	e2 2a ef 2b e2 2a e9 2b e2 2a e2 2a e2 2a e2 2a     .*.+.*.+.*.*.*.*
     896:	e3 2b e2 2a e2 2a e3 2b e2 2a e2 2a e2 2a e2 2a     .+.*.*.+.*.*.*.*
     8a6:	e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a     .*.*.*.*.*.*.*.*
     8b6:	e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a     .*.*.*.*.*.*.*.*
     8c6:	e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a     .*.*.*.*.*.*.*.*
     8d6:	e2 2a e2 2a e2 2a 07 2b e2 2a e2 2a e2 2a e2 2a     .*.*.*.+.*.*.*.*
     8e6:	e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a     .*.*.*.*.*.*.*.*
     8f6:	e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a     .*.*.*.*.*.*.*.*
     906:	e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a     .*.*.*.*.*.*.*.*
     916:	e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a     .*.*.*.*.*.*.*.*
     926:	e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a     .*.*.*.*.*.*.*.*
     936:	e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a     .*.*.*.*.*.*.*.*
     946:	e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a     .*.*.*.*.*.*.*.*
     956:	e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a e2 2a 11 2b     .*.*.*.*.*.*.*.+

00000966 <square_test1>:
     966:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     976:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     986:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     996:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     9a6:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     9b6:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     9c6:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000009d4 <square_test2>:
     9d4:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     9e4:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     9f4:	78 30 20 79 30 00                                   x0 y0.

000009fa <square_test10>:
     9fa:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     a0a:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     a1a:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000a26 <circle_test10>:
     a26:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     a36:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     a46:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     a56:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     a66:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     a76:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     a86:	30 00                                               0.

00000a88 <square_circle_test10>:
     a88:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     a98:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     aa8:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     ab8:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     ac8:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     ad8:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     ae8:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     af8:	31 30 20 79 30 00                                   10 y0.

00000afe <square_circle_test100>:
     afe:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     b0e:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     b1e:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     b2e:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     b3e:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     b4e:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     b5e:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     b6e:	35 30 20 6a 30 00                                   50 j0.

00000b74 <spiral_test5>:
     b74:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     b84:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     b94:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     ba4:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     bb4:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     bc4:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     bd4:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     be4:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

00000bee <spiral_test50a>:
     bee:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     bfe:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

00000c0e <dwell_test1>:
     c0e:	67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30 20     g0 x10.g4 p1.g0 
     c1e:	78 32 30 0a 67 34 20 70 31 0a 67 30 20 78 31 30     x20.g4 p1.g0 x10
     c2e:	0a 67 34 20 70 31 0a 67 30 20 78 30 30 0a 67 34     .g4 p1.g0 x00.g4
     c3e:	20 70 31 0a 67 30 20 78 31 30 0a 67 34 20 70 31      p1.g0 x10.g4 p1
     c4e:	0a 67 30 20 78 32 30 0a 67 34 20 70 31 0a 67 30     .g0 x20.g4 p1.g0
     c5e:	20 78 31 30 0a 67 34 20 70 31 0a 67 30 20 78 30      x10.g4 p1.g0 x0
     c6e:	0a 67 34 20 70 31 0a 67 30 20 78 31 30 0a 67 34     .g4 p1.g0 x10.g4
     c7e:	20 70 31 0a 67 30 20 78 32 30 0a 67 34 20 70 31      p1.g0 x20.g4 p1
     c8e:	0a 67 30 20 78 31 30 0a 67 34 20 70 31 0a 67 30     .g0 x10.g4 p1.g0
     c9e:	20 78 30 00                                          x0.

00000ca2 <dwell_test2>:
     ca2:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     cb2:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     cc2:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     cd2:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     ce2:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     cf2:	20 70 31 0a 67 30 20 78 30 0a 67 34 20 70 31 0a      p1.g0 x0.g4 p1.
     d02:	67 30 20 78 31 0a 67 34 20 70 31 0a 67 30 20 78     g0 x1.g4 p1.g0 x
     d12:	32 0a 67 34 20 70 31 0a 67 30 20 78 31 0a 67 34     2.g4 p1.g0 x1.g4
     d22:	20 70 31 0a 67 30 20 78 30 00                        p1.g0 x0.

00000d2c <dwell_testMax>:
     d2c:	67 34 20 70 32 30 30 2e 31 00                       g4 p200.1.

00000d36 <g0_test1>:
     d36:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     d46:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000d56 <g0_test2>:
     d56:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     d66:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     d76:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     d86:	79 30 20 7a 30 00                                   y0 z0.

00000d8c <g0_test3>:
     d8c:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     d9c:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     dac:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000dba <radius_arc_test1>:
     dba:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     dca:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     dda:	72 35 30 0a 00                                      r50..

00000ddf <radius_arc_test2>:
     ddf:	67 32 0a 00                                         g2..

00000de3 <zoetrope>:
     de3:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     df3:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     e03:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     e13:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     e23:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     e33:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     e43:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     e53:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     e63:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     e73:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     e83:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     e93:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     ea3:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     eb3:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     ec3:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     ed3:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     ee3:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     ef3:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     f03:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     f13:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     f23:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     f33:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     f43:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     f53:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     f63:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     f73:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     f83:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     f93:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     fa3:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     fb3:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     fc3:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     fd3:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     fe3:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     ff3:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
    1003:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
    1013:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
    1023:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
    1033:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
    1043:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
    1053:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
    1063:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
    1073:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
    1083:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
    1093:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
    10a3:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
    10b3:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
    10c3:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
    10d3:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
    10e3:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
    10f3:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
    1103:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
    1113:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
    1123:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
    1133:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
    1143:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
    1153:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
    1163:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
    1173:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
    1183:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
    1193:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
    11a3:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
    11b3:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
    11c3:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
    11d3:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
    11e3:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
    11f3:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
    1203:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
    1213:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    1223:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    1233:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    1243:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    1253:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    1263:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    1273:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    1283:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    1293:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    12a3:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    12b3:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    12c3:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    12d3:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    12e3:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    12f3:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    1303:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    1313:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    1323:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    1333:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    1343:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    1353:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    1363:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    1373:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    1383:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    1393:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    13a3:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    13b3:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    13c3:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    13d3:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    13e3:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    13f3:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    1403:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    1413:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    1423:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    1433:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    1443:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    1453:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    1463:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    1473:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    1483:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    1493:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    14a3:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    14b3:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    14c3:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    14d3:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    14e3:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    14f3:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    1503:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    1513:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    1523:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    1533:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    1543:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    1553:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    1563:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    1573:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    1583:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    1593:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    15a3:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    15b3:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    15c3:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    15d3:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    15e3:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    15f3:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    1603:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    1613:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    1623:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    1633:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    1643:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    1653:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    1663:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    1673:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    1683:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    1693:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    16a3:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    16b3:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    16c3:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    16d3:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    16e3:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    16f3:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    1703:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    1713:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    1723:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    1733:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    1743:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    1753:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    1763:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    1773:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    1783:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    1793:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

0000179e <contraptor_circle>:
    179e:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    17ae:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    17be:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    17ce:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    17de:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    17ee:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    17fe:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    180e:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    181e:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    182e:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    183e:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    184e:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    185e:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    186e:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    187e:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    188e:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    189e:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    18ae:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    18be:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    18ce:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    18de:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    18ee:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    18fe:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    190e:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    191e:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    192e:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    193e:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    194e:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    195e:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    196e:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    197e:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    198e:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    199e:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    19ae:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    19be:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    19ce:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    19de:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    19ee:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    19fe:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    1a0e:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    1a1e:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1a2e:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1a3e:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    1a4e:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    1a5e:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    1a6e:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    1a7e:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    1a8e:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    1a9e:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1aae:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    1abe:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    1ace:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    1ade:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    1aee:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    1afe:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    1b0e:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    1b1e:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1b2e:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1b3e:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1b4e:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1b5e:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1b6e:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001b7e <tgModeStringControl>:
    1b7e:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001b8b <tgModeStringConfig>:
    1b8b:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001b97 <tgModeStringGCode>:
    1b97:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

00001ba3 <tgModeStringDirect>:
    1ba3:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

00001bb0 <tgModeStrings>:
    1bb0:	7e 1b 8b 1b 97 1b a3 1b                             ~.......

00001bb8 <__c.3882>:
    1bb8:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1bc8:	69 6c 65 0a 00                                      ile..

00001bcd <__c.3943>:
    1bcd:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001bdb <__c.3861>:
    1bdb:	62 75 69 6c 64 20 32 30 33 00                       build 203.

00001be5 <__c.3859>:
    1be5:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1bf5:	25 53 0a 00                                         %S..

00001bf9 <readlnFuncs>:
    1bf9:	63 36 38 36 38 36 a3 36 38 36 38 36 38 36 38 36     c68686.686868686
    1c09:	8f 36 38 36 63 36 38 36 38 36 63 36 b5 36 bb 36     .686c68686c6.6.6
    1c19:	38 36 af 36 38 36 a9 36 38 36 38 36 38 36 38 36     86.686.686868686
    1c29:	a3 36 38 36 38 36 a3 36 38 36 38 36 38 36 38 36     .68686.686868686
    1c39:	38 36 38 36 38 36 38 36 38 36 38 36 38 36 38 36     8686868686868686
    1c49:	38 36 38 36 38 36 38 36 38 36 38 36 38 36 38 36     8686868686868686
    1c59:	38 36 38 36 38 36 38 36 38 36 38 36 38 36 38 36     8686868686868686
    1c69:	38 36 38 36 38 36 85 36 38 36 38 36 38 36 38 36     868686.686868686
    1c79:	38 36 38 36 38 36 38 36 38 36 38 36 38 36 38 36     8686868686868686
    1c89:	38 36 38 36 38 36 38 36 38 36 38 36 38 36 38 36     8686868686868686
    1c99:	38 36 38 36 38 36 38 36 38 36 38 36 38 36 38 36     8686868686868686
    1ca9:	38 36 38 36 38 36 38 36 38 36 38 36 38 36 38 36     8686868686868686
    1cb9:	38 36 38 36 38 36 38 36 38 36 38 36 38 36 38 36     8686868686868686
    1cc9:	38 36 38 36 38 36 38 36 38 36 38 36 38 36 38 36     8686868686868686
    1cd9:	38 36 38 36 38 36 38 36 38 36 38 36 38 36 38 36     8686868686868686
    1ce9:	38 36 38 36 38 36 38 36 38 36 38 36 38 36 8f 36     86868686868686.6

00001cf9 <getcFuncs>:
    1cf9:	d5 35 c5 35 c5 35 a3 36 c5 35 c5 35 c5 35 c5 35     .5.5.5.6.5.5.5.5
    1d09:	f4 35 c5 35 d5 35 c5 35 c5 35 d5 35 b5 36 bb 36     .5.5.5.5.5.5.6.6
    1d19:	c5 35 af 36 c5 35 a9 36 c5 35 c5 35 c5 35 c5 35     .5.6.5.6.5.5.5.5
    1d29:	a3 36 c5 35 c5 35 a3 36 c5 35 c5 35 c5 35 c5 35     .6.5.5.6.5.5.5.5
    1d39:	c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35     .5.5.5.5.5.5.5.5
    1d49:	c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35     .5.5.5.5.5.5.5.5
    1d59:	c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35     .5.5.5.5.5.5.5.5
    1d69:	c5 35 c5 35 c5 35 ea 35 c5 35 c5 35 c5 35 c5 35     .5.5.5.5.5.5.5.5
    1d79:	c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35     .5.5.5.5.5.5.5.5
    1d89:	c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35     .5.5.5.5.5.5.5.5
    1d99:	c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35     .5.5.5.5.5.5.5.5
    1da9:	c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35     .5.5.5.5.5.5.5.5
    1db9:	c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35     .5.5.5.5.5.5.5.5
    1dc9:	c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35     .5.5.5.5.5.5.5.5
    1dd9:	c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35     .5.5.5.5.5.5.5.5
    1de9:	c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 c5 35 f4 35     .5.5.5.5.5.5.5.5

00001df9 <pstr_inf>:
    1df9:	49 4e 46                                            INF

00001dfc <pstr_inity>:
    1dfc:	49 4e 49 54 59                                      INITY

00001e01 <pstr_nan>:
    1e01:	4e 41 4e                                            NAN

00001e04 <pwr_m10>:
    1e04:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1e14:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001e1c <pwr_p10>:
    1e1c:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1e2c:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1e3c:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1e4c:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1e5c:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1e6c:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1e7c:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1e8c:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1e9c:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1eac:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1ebc:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1ecc:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1edc:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1eec:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1efc:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1f0c:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1f1c:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1f2c:	3d 27                                               ='

00001f2e <__ctors_end>:
    1f2e:	11 24       	eor	r1, r1
    1f30:	1f be       	out	0x3f, r1	; 63
    1f32:	cf ef       	ldi	r28, 0xFF	; 255
    1f34:	df e5       	ldi	r29, 0x5F	; 95
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	00 e0       	ldi	r16, 0x00	; 0
    1f3c:	0c bf       	out	0x3c, r16	; 60

00001f3e <__do_copy_data>:
    1f3e:	11 e2       	ldi	r17, 0x21	; 33
    1f40:	a0 e0       	ldi	r26, 0x00	; 0
    1f42:	b0 e2       	ldi	r27, 0x20	; 32
    1f44:	e8 ef       	ldi	r30, 0xF8	; 248
    1f46:	f3 e9       	ldi	r31, 0x93	; 147
    1f48:	00 e0       	ldi	r16, 0x00	; 0
    1f4a:	0b bf       	out	0x3b, r16	; 59
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <__do_copy_data+0x14>
    1f4e:	07 90       	elpm	r0, Z+
    1f50:	0d 92       	st	X+, r0
    1f52:	aa 32       	cpi	r26, 0x2A	; 42
    1f54:	b1 07       	cpc	r27, r17
    1f56:	d9 f7       	brne	.-10     	; 0x1f4e <__do_copy_data+0x10>

00001f58 <__do_clear_bss>:
    1f58:	15 e2       	ldi	r17, 0x25	; 37
    1f5a:	aa e2       	ldi	r26, 0x2A	; 42
    1f5c:	b1 e2       	ldi	r27, 0x21	; 33
    1f5e:	01 c0       	rjmp	.+2      	; 0x1f62 <.do_clear_bss_start>

00001f60 <.do_clear_bss_loop>:
    1f60:	1d 92       	st	X+, r1

00001f62 <.do_clear_bss_start>:
    1f62:	a6 34       	cpi	r26, 0x46	; 70
    1f64:	b1 07       	cpc	r27, r17
    1f66:	e1 f7       	brne	.-8      	; 0x1f60 <.do_clear_bss_loop>
    1f68:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <main>
    1f6c:	0c 94 fa 49 	jmp	0x93f4	; 0x93f4 <_exit>

00001f70 <__bad_interrupt>:
    1f70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001f74 <main>:

int main(void) 
{
	/* These inits are order dependent */
	cli();
	xmega_init();				// xmega setup
    1f74:	f8 94       	cli
	xio_init();					// xmega io subsystem
    1f76:	0e 94 b1 1b 	call	0x3762	; 0x3762 <xmega_init>

    1f7a:	0e 94 70 28 	call	0x50e0	; 0x50e0 <xio_init>
	cfg_init();					// get config record from eeprom
	st_init(); 					// stepper subsystem
    1f7e:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <cfg_init>
	ls_init();					// limit switches
    1f82:	0e 94 30 24 	call	0x4860	; 0x4860 <st_init>
	mv_init();					// move buffers
    1f86:	0e 94 05 33 	call	0x660a	; 0x660a <ls_init>
	mc_init();					// motion control subsystem
    1f8a:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <mv_init>
	spindle_init();				// spindle controller
    1f8e:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <mc_init>
	en_init();					// encoders
    1f92:	0e 94 14 24 	call	0x4828	; 0x4828 <spindle_init>
	gc_init();					// gcode-parser
    1f96:	0e 94 4f 1b 	call	0x369e	; 0x369e <en_init>
	dd_init();					// direct drive commands
    1f9a:	0e 94 09 10 	call	0x2012	; 0x2012 <gc_init>
	tg_init();					// tinyg parsers
    1f9e:	0e 94 dd 30 	call	0x61ba	; 0x61ba <dd_init>

    1fa2:	0e 94 b4 30 	call	0x6168	; 0x6168 <tg_init>
	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
	PMIC_EnableLowLevel();		// enable TX interrupts
    1fa6:	0e 94 16 28 	call	0x502c	; 0x502c <PMIC_SetVectorLocationToApplication>
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1faa:	e0 ea       	ldi	r30, 0xA0	; 160
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 91 a2 00 	lds	r24, 0x00A2
    1fb2:	81 60       	ori	r24, 0x01	; 1
    1fb4:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1fb6:	80 91 a2 00 	lds	r24, 0x00A2
    1fba:	82 60       	ori	r24, 0x02	; 2
    1fbc:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1fbe:	80 91 a2 00 	lds	r24, 0x00A2
    1fc2:	84 60       	ori	r24, 0x04	; 4
    1fc4:	82 83       	std	Z+2, r24	; 0x02

    1fc6:	78 94       	sei
//	xio_usb_queue_RX_string("?\n");
//	xio_usb_queue_RX_string("g0x10y10z25\n");

	for(;;){
		tg_controller();
	}
    1fc8:	0e 94 26 30 	call	0x604c	; 0x604c <tg_controller>
    1fcc:	fd cf       	rjmp	.-6      	; 0x1fc8 <main+0x54>

00001fce <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1fce:	80 93 77 21 	sts	0x2177, r24
	gc.plane_axis_1 = axis_1;
    1fd2:	60 93 78 21 	sts	0x2178, r22
	gc.plane_axis_2 = axis_2;
    1fd6:	40 93 79 21 	sts	0x2179, r20
}
    1fda:	08 95       	ret

00001fdc <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1fdc:	ef 92       	push	r14
    1fde:	ff 92       	push	r15
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	7b 01       	movw	r14, r22
    1fe6:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    1fe8:	80 91 37 21 	lds	r24, 0x2137
    1fec:	88 23       	and	r24, r24
    1fee:	51 f0       	breq	.+20     	; 0x2004 <to_millimeters+0x28>
    1ff0:	c8 01       	movw	r24, r16
    1ff2:	b7 01       	movw	r22, r14
    1ff4:	25 e8       	ldi	r18, 0x85	; 133
    1ff6:	32 e4       	ldi	r19, 0x42	; 66
    1ff8:	41 e2       	ldi	r20, 0x21	; 33
    1ffa:	5d e3       	ldi	r21, 0x3D	; 61
    1ffc:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    2000:	7b 01       	movw	r14, r22
    2002:	8c 01       	movw	r16, r24
}
    2004:	b7 01       	movw	r22, r14
    2006:	c8 01       	movw	r24, r16
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	ff 90       	pop	r15
    200e:	ef 90       	pop	r14
    2010:	08 95       	ret

00002012 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    2012:	86 e5       	ldi	r24, 0x56	; 86
    2014:	ea e2       	ldi	r30, 0x2A	; 42
    2016:	f1 e2       	ldi	r31, 0x21	; 33
    2018:	df 01       	movw	r26, r30
    201a:	1d 92       	st	X+, r1
    201c:	8a 95       	dec	r24
    201e:	e9 f7       	brne	.-6      	; 0x201a <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a0 e0       	ldi	r26, 0x00	; 0
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	80 93 3b 21 	sts	0x213B, r24
    202c:	90 93 3c 21 	sts	0x213C, r25
    2030:	a0 93 3d 21 	sts	0x213D, r26
    2034:	b0 93 3e 21 	sts	0x213E, r27
	gc.radius = 0;							// radius value
    2038:	80 93 3f 21 	sts	0x213F, r24
    203c:	90 93 40 21 	sts	0x2140, r25
    2040:	a0 93 41 21 	sts	0x2141, r26
    2044:	b0 93 42 21 	sts	0x2142, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    2048:	80 91 7c 24 	lds	r24, 0x247C
    204c:	90 91 7d 24 	lds	r25, 0x247D
    2050:	a0 91 7e 24 	lds	r26, 0x247E
    2054:	b0 91 7f 24 	lds	r27, 0x247F
    2058:	80 93 43 21 	sts	0x2143, r24
    205c:	90 93 44 21 	sts	0x2144, r25
    2060:	a0 93 45 21 	sts	0x2145, r26
    2064:	b0 93 46 21 	sts	0x2146, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    2068:	80 91 80 24 	lds	r24, 0x2480
    206c:	90 91 81 24 	lds	r25, 0x2481
    2070:	a0 91 82 24 	lds	r26, 0x2482
    2074:	b0 91 83 24 	lds	r27, 0x2483
    2078:	80 93 47 21 	sts	0x2147, r24
    207c:	90 93 48 21 	sts	0x2148, r25
    2080:	a0 93 49 21 	sts	0x2149, r26
    2084:	b0 93 4a 21 	sts	0x214A, r27

	gc.absolute_mode = TRUE;
    2088:	21 e0       	ldi	r18, 0x01	; 1
    208a:	20 93 38 21 	sts	0x2138, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	a0 e8       	ldi	r26, 0x80	; 128
    2094:	bf eb       	ldi	r27, 0xBF	; 191
    2096:	80 93 4f 21 	sts	0x214F, r24
    209a:	90 93 50 21 	sts	0x2150, r25
    209e:	a0 93 51 21 	sts	0x2151, r26
    20a2:	b0 93 52 21 	sts	0x2152, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    20a6:	10 92 39 21 	sts	0x2139, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    20aa:	10 92 7e 21 	sts	0x217E, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    20ae:	10 92 7f 21 	sts	0x217F, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    20b2:	10 92 77 21 	sts	0x2177, r1
	gc.plane_axis_1 = axis_1;
    20b6:	20 93 78 21 	sts	0x2178, r18
	gc.plane_axis_2 = axis_2;
    20ba:	82 e0       	ldi	r24, 0x02	; 2
    20bc:	80 93 79 21 	sts	0x2179, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X, Y, Z);
}
    20c0:	08 95       	ret

000020c2 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    20c2:	4f 92       	push	r4
    20c4:	5f 92       	push	r5
    20c6:	6f 92       	push	r6
    20c8:	7f 92       	push	r7
    20ca:	8f 92       	push	r8
    20cc:	9f 92       	push	r9
    20ce:	af 92       	push	r10
    20d0:	bf 92       	push	r11
    20d2:	cf 92       	push	r12
    20d4:	df 92       	push	r13
    20d6:	ef 92       	push	r14
    20d8:	ff 92       	push	r15
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	0f 92       	push	r0
    20e4:	0f 92       	push	r0
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	3b 01       	movw	r6, r22
    20ec:	2a 01       	movw	r4, r20
    20ee:	49 01       	movw	r8, r18
    20f0:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    20f2:	d8 01       	movw	r26, r16
    20f4:	ed 91       	ld	r30, X+
    20f6:	fc 91       	ld	r31, X
    20f8:	e2 0f       	add	r30, r18
    20fa:	f3 1f       	adc	r31, r19
    20fc:	e0 81       	ld	r30, Z
    20fe:	ee 23       	and	r30, r30
    2100:	41 f0       	breq	.+16     	; 0x2112 <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    2102:	dc 01       	movw	r26, r24
    2104:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    2106:	e1 54       	subi	r30, 0x41	; 65
    2108:	ea 31       	cpi	r30, 0x1A	; 26
    210a:	30 f0       	brcs	.+12     	; 0x2118 <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    210c:	8a e0       	ldi	r24, 0x0A	; 10
    210e:	80 93 2a 21 	sts	0x212A, r24
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	35 c0       	rjmp	.+106    	; 0x2182 <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    2118:	f8 01       	movw	r30, r16
    211a:	80 81       	ld	r24, Z
    211c:	91 81       	ldd	r25, Z+1	; 0x01
    211e:	01 96       	adiw	r24, 0x01	; 1
    2120:	80 83       	st	Z, r24
    2122:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    2124:	89 01       	movw	r16, r18
    2126:	08 0f       	add	r16, r24
    2128:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    212a:	c8 01       	movw	r24, r16
    212c:	be 01       	movw	r22, r28
    212e:	6f 5f       	subi	r22, 0xFF	; 255
    2130:	7f 4f       	sbci	r23, 0xFF	; 255
    2132:	0e 94 2e 46 	call	0x8c5c	; 0x8c5c <strtod>
    2136:	6b 01       	movw	r12, r22
    2138:	7c 01       	movw	r14, r24
    213a:	d3 01       	movw	r26, r6
    213c:	6d 93       	st	X+, r22
    213e:	7d 93       	st	X+, r23
    2140:	8d 93       	st	X+, r24
    2142:	9c 93       	st	X, r25
    2144:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	9a 81       	ldd	r25, Y+2	; 0x02
    214a:	80 17       	cp	r24, r16
    214c:	91 07       	cpc	r25, r17
    214e:	11 f4       	brne	.+4      	; 0x2154 <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    2150:	8d e0       	ldi	r24, 0x0D	; 13
    2152:	dd cf       	rjmp	.-70     	; 0x210e <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    2154:	88 19       	sub	r24, r8
    2156:	99 09       	sbc	r25, r9
    2158:	f5 01       	movw	r30, r10
    215a:	80 83       	st	Z, r24
    215c:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    215e:	c7 01       	movw	r24, r14
    2160:	b6 01       	movw	r22, r12
    2162:	0e 94 93 45 	call	0x8b26	; 0x8b26 <trunc>
    2166:	9b 01       	movw	r18, r22
    2168:	ac 01       	movw	r20, r24
    216a:	c7 01       	movw	r24, r14
    216c:	b6 01       	movw	r22, r12
    216e:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    2172:	d2 01       	movw	r26, r4
    2174:	6d 93       	st	X+, r22
    2176:	7d 93       	st	X+, r23
    2178:	8d 93       	st	X+, r24
    217a:	9c 93       	st	X, r25
    217c:	13 97       	sbiw	r26, 0x03	; 3
    217e:	21 e0       	ldi	r18, 0x01	; 1
    2180:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    2182:	c9 01       	movw	r24, r18
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	1f 91       	pop	r17
    218e:	0f 91       	pop	r16
    2190:	ff 90       	pop	r15
    2192:	ef 90       	pop	r14
    2194:	df 90       	pop	r13
    2196:	cf 90       	pop	r12
    2198:	bf 90       	pop	r11
    219a:	af 90       	pop	r10
    219c:	9f 90       	pop	r9
    219e:	8f 90       	pop	r8
    21a0:	7f 90       	pop	r7
    21a2:	6f 90       	pop	r6
    21a4:	5f 90       	pop	r5
    21a6:	4f 90       	pop	r4
    21a8:	08 95       	ret

000021aa <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    21aa:	af 92       	push	r10
    21ac:	bf 92       	push	r11
    21ae:	cf 92       	push	r12
    21b0:	df 92       	push	r13
    21b2:	ef 92       	push	r14
    21b4:	ff 92       	push	r15
    21b6:	0f 93       	push	r16
    21b8:	1f 93       	push	r17
    21ba:	79 01       	movw	r14, r18
    21bc:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    21be:	5f 77       	andi	r21, 0x7F	; 127
    21c0:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    21c4:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <atan>
    21c8:	5b 01       	movw	r10, r22
    21ca:	6c 01       	movw	r12, r24

	if (y>0) {
    21cc:	c8 01       	movw	r24, r16
    21ce:	b7 01       	movw	r22, r14
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	50 e0       	ldi	r21, 0x00	; 0
    21d8:	0e 94 13 44 	call	0x8826	; 0x8826 <__gesf2>
    21dc:	18 16       	cp	r1, r24
    21de:	cc f0       	brlt	.+50     	; 0x2212 <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    21e0:	c6 01       	movw	r24, r12
    21e2:	b5 01       	movw	r22, r10
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	0e 94 13 44 	call	0x8826	; 0x8826 <__gesf2>
    21f0:	18 16       	cp	r1, r24
    21f2:	2c f4       	brge	.+10     	; 0x21fe <theta+0x54>
	    {
			return(M_PI-theta);
    21f4:	6b ed       	ldi	r22, 0xDB	; 219
    21f6:	7f e0       	ldi	r23, 0x0F	; 15
    21f8:	89 e4       	ldi	r24, 0x49	; 73
    21fa:	90 e4       	ldi	r25, 0x40	; 64
    21fc:	04 c0       	rjmp	.+8      	; 0x2206 <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    21fe:	6b ed       	ldi	r22, 0xDB	; 219
    2200:	7f e0       	ldi	r23, 0x0F	; 15
    2202:	89 e4       	ldi	r24, 0x49	; 73
    2204:	90 ec       	ldi	r25, 0xC0	; 192
    2206:	a6 01       	movw	r20, r12
    2208:	95 01       	movw	r18, r10
    220a:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    220e:	5b 01       	movw	r10, r22
    2210:	6c 01       	movw	r12, r24
		}
	}
}
    2212:	b5 01       	movw	r22, r10
    2214:	c6 01       	movw	r24, r12
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	ff 90       	pop	r15
    221c:	ef 90       	pop	r14
    221e:	df 90       	pop	r13
    2220:	cf 90       	pop	r12
    2222:	bf 90       	pop	r11
    2224:	af 90       	pop	r10
    2226:	08 95       	ret

00002228 <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    2228:	2f 92       	push	r2
    222a:	3f 92       	push	r3
    222c:	4f 92       	push	r4
    222e:	5f 92       	push	r5
    2230:	6f 92       	push	r6
    2232:	7f 92       	push	r7
    2234:	8f 92       	push	r8
    2236:	9f 92       	push	r9
    2238:	af 92       	push	r10
    223a:	bf 92       	push	r11
    223c:	cf 92       	push	r12
    223e:	df 92       	push	r13
    2240:	ef 92       	push	r14
    2242:	ff 92       	push	r15
    2244:	0f 93       	push	r16
    2246:	1f 93       	push	r17
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	68 97       	sbiw	r28, 0x18	; 24
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    2258:	19 82       	std	Y+1, r1	; 0x01
    225a:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    225c:	ef e5       	ldi	r30, 0x5F	; 95
    225e:	f1 e2       	ldi	r31, 0x21	; 33
    2260:	8c e0       	ldi	r24, 0x0C	; 12
    2262:	df 01       	movw	r26, r30
    2264:	28 2f       	mov	r18, r24
    2266:	1d 92       	st	X+, r1
    2268:	2a 95       	dec	r18
    226a:	e9 f7       	brne	.-6      	; 0x2266 <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    226c:	3c 96       	adiw	r30, 0x0c	; 12
    226e:	df 01       	movw	r26, r30
    2270:	1d 92       	st	X+, r1
    2272:	8a 95       	dec	r24
    2274:	e9 f7       	brne	.-6      	; 0x2270 <gc_execute_block+0x48>

	gc.status = TG_OK;
    2276:	10 92 2a 21 	sts	0x212A, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    227a:	10 92 3a 21 	sts	0x213A, r1
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set
    227e:	10 92 7f 21 	sts	0x217F, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2282:	5e 01       	movw	r10, r28
    2284:	08 94       	sec
    2286:	a1 1c       	adc	r10, r1
    2288:	b1 1c       	adc	r11, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    228a:	ff 24       	eor	r15, r15
    228c:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    228e:	bc e0       	ldi	r27, 0x0C	; 12
    2290:	cb 2e       	mov	r12, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2292:	a2 e0       	ldi	r26, 0x02	; 2
    2294:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    2296:	77 24       	eor	r7, r7
    2298:	7a 94       	dec	r7

					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    229a:	f3 e0       	ldi	r31, 0x03	; 3
    229c:	df 2e       	mov	r13, r31

					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    229e:	e4 e0       	ldi	r30, 0x04	; 4
    22a0:	6e 2e       	mov	r6, r30
    22a2:	0a c1       	rjmp	.+532    	; 0x24b8 <gc_execute_block+0x290>
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    22a4:	80 91 2b 21 	lds	r24, 0x212B
    22a8:	8d 34       	cpi	r24, 0x4D	; 77
    22aa:	09 f4       	brne	.+2      	; 0x22ae <gc_execute_block+0x86>
    22ac:	be c0       	rjmp	.+380    	; 0x242a <gc_execute_block+0x202>
    22ae:	84 35       	cpi	r24, 0x54	; 84
    22b0:	09 f4       	brne	.+2      	; 0x22b4 <gc_execute_block+0x8c>
    22b2:	f0 c0       	rjmp	.+480    	; 0x2494 <gc_execute_block+0x26c>
    22b4:	87 34       	cpi	r24, 0x47	; 71
    22b6:	09 f0       	breq	.+2      	; 0x22ba <gc_execute_block+0x92>
    22b8:	fb c0       	rjmp	.+502    	; 0x24b0 <gc_execute_block+0x288>
			case 'G':
				switch((int)gc.value) {
    22ba:	60 91 2c 21 	lds	r22, 0x212C
    22be:	70 91 2d 21 	lds	r23, 0x212D
    22c2:	80 91 2e 21 	lds	r24, 0x212E
    22c6:	90 91 2f 21 	lds	r25, 0x212F
    22ca:	0e 94 92 42 	call	0x8524	; 0x8524 <__fixsfsi>
    22ce:	65 31       	cpi	r22, 0x15	; 21
    22d0:	71 05       	cpc	r23, r1
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <gc_execute_block+0xae>
    22d4:	8f c0       	rjmp	.+286    	; 0x23f4 <gc_execute_block+0x1cc>
    22d6:	66 31       	cpi	r22, 0x16	; 22
    22d8:	71 05       	cpc	r23, r1
    22da:	84 f5       	brge	.+96     	; 0x233c <gc_execute_block+0x114>
    22dc:	64 30       	cpi	r22, 0x04	; 4
    22de:	71 05       	cpc	r23, r1
    22e0:	09 f4       	brne	.+2      	; 0x22e4 <gc_execute_block+0xbc>
    22e2:	6d c0       	rjmp	.+218    	; 0x23be <gc_execute_block+0x196>
    22e4:	65 30       	cpi	r22, 0x05	; 5
    22e6:	71 05       	cpc	r23, r1
    22e8:	a4 f4       	brge	.+40     	; 0x2312 <gc_execute_block+0xea>
    22ea:	61 30       	cpi	r22, 0x01	; 1
    22ec:	71 05       	cpc	r23, r1
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <gc_execute_block+0xca>
    22f0:	57 c0       	rjmp	.+174    	; 0x23a0 <gc_execute_block+0x178>
    22f2:	62 30       	cpi	r22, 0x02	; 2
    22f4:	71 05       	cpc	r23, r1
    22f6:	24 f4       	brge	.+8      	; 0x2300 <gc_execute_block+0xd8>
    22f8:	67 2b       	or	r22, r23
    22fa:	09 f4       	brne	.+2      	; 0x22fe <gc_execute_block+0xd6>
    22fc:	4c c0       	rjmp	.+152    	; 0x2396 <gc_execute_block+0x16e>
    22fe:	c7 c0       	rjmp	.+398    	; 0x248e <gc_execute_block+0x266>
    2300:	62 30       	cpi	r22, 0x02	; 2
    2302:	71 05       	cpc	r23, r1
    2304:	09 f4       	brne	.+2      	; 0x2308 <gc_execute_block+0xe0>
    2306:	51 c0       	rjmp	.+162    	; 0x23aa <gc_execute_block+0x182>
    2308:	63 30       	cpi	r22, 0x03	; 3
    230a:	71 05       	cpc	r23, r1
    230c:	09 f0       	breq	.+2      	; 0x2310 <gc_execute_block+0xe8>
    230e:	bf c0       	rjmp	.+382    	; 0x248e <gc_execute_block+0x266>
    2310:	51 c0       	rjmp	.+162    	; 0x23b4 <gc_execute_block+0x18c>
    2312:	62 31       	cpi	r22, 0x12	; 18
    2314:	71 05       	cpc	r23, r1
    2316:	09 f4       	brne	.+2      	; 0x231a <gc_execute_block+0xf2>
    2318:	5c c0       	rjmp	.+184    	; 0x23d2 <gc_execute_block+0x1aa>
    231a:	63 31       	cpi	r22, 0x13	; 19
    231c:	71 05       	cpc	r23, r1
    231e:	2c f4       	brge	.+10     	; 0x232a <gc_execute_block+0x102>
    2320:	61 31       	cpi	r22, 0x11	; 17
    2322:	71 05       	cpc	r23, r1
    2324:	09 f0       	breq	.+2      	; 0x2328 <gc_execute_block+0x100>
    2326:	b3 c0       	rjmp	.+358    	; 0x248e <gc_execute_block+0x266>
    2328:	4d c0       	rjmp	.+154    	; 0x23c4 <gc_execute_block+0x19c>
    232a:	63 31       	cpi	r22, 0x13	; 19
    232c:	71 05       	cpc	r23, r1
    232e:	09 f4       	brne	.+2      	; 0x2332 <gc_execute_block+0x10a>
    2330:	57 c0       	rjmp	.+174    	; 0x23e0 <gc_execute_block+0x1b8>
    2332:	64 31       	cpi	r22, 0x14	; 20
    2334:	71 05       	cpc	r23, r1
    2336:	09 f0       	breq	.+2      	; 0x233a <gc_execute_block+0x112>
    2338:	aa c0       	rjmp	.+340    	; 0x248e <gc_execute_block+0x266>
    233a:	59 c0       	rjmp	.+178    	; 0x23ee <gc_execute_block+0x1c6>
    233c:	6a 35       	cpi	r22, 0x5A	; 90
    233e:	71 05       	cpc	r23, r1
    2340:	09 f4       	brne	.+2      	; 0x2344 <gc_execute_block+0x11c>
    2342:	64 c0       	rjmp	.+200    	; 0x240c <gc_execute_block+0x1e4>
    2344:	6b 35       	cpi	r22, 0x5B	; 91
    2346:	71 05       	cpc	r23, r1
    2348:	ac f4       	brge	.+42     	; 0x2374 <gc_execute_block+0x14c>
    234a:	6e 31       	cpi	r22, 0x1E	; 30
    234c:	71 05       	cpc	r23, r1
    234e:	09 f4       	brne	.+2      	; 0x2352 <gc_execute_block+0x12a>
    2350:	54 c0       	rjmp	.+168    	; 0x23fa <gc_execute_block+0x1d2>
    2352:	6f 31       	cpi	r22, 0x1F	; 31
    2354:	71 05       	cpc	r23, r1
    2356:	2c f4       	brge	.+10     	; 0x2362 <gc_execute_block+0x13a>
    2358:	6c 31       	cpi	r22, 0x1C	; 28
    235a:	71 05       	cpc	r23, r1
    235c:	09 f0       	breq	.+2      	; 0x2360 <gc_execute_block+0x138>
    235e:	97 c0       	rjmp	.+302    	; 0x248e <gc_execute_block+0x266>
    2360:	4c c0       	rjmp	.+152    	; 0x23fa <gc_execute_block+0x1d2>
    2362:	65 33       	cpi	r22, 0x35	; 53
    2364:	71 05       	cpc	r23, r1
    2366:	09 f4       	brne	.+2      	; 0x236a <gc_execute_block+0x142>
    2368:	4b c0       	rjmp	.+150    	; 0x2400 <gc_execute_block+0x1d8>
    236a:	60 35       	cpi	r22, 0x50	; 80
    236c:	71 05       	cpc	r23, r1
    236e:	09 f0       	breq	.+2      	; 0x2372 <gc_execute_block+0x14a>
    2370:	8e c0       	rjmp	.+284    	; 0x248e <gc_execute_block+0x266>
    2372:	49 c0       	rjmp	.+146    	; 0x2406 <gc_execute_block+0x1de>
    2374:	6c 35       	cpi	r22, 0x5C	; 92
    2376:	71 05       	cpc	r23, r1
    2378:	09 f4       	brne	.+2      	; 0x237c <gc_execute_block+0x154>
    237a:	4e c0       	rjmp	.+156    	; 0x2418 <gc_execute_block+0x1f0>
    237c:	6c 35       	cpi	r22, 0x5C	; 92
    237e:	71 05       	cpc	r23, r1
    2380:	0c f4       	brge	.+2      	; 0x2384 <gc_execute_block+0x15c>
    2382:	47 c0       	rjmp	.+142    	; 0x2412 <gc_execute_block+0x1ea>
    2384:	6d 35       	cpi	r22, 0x5D	; 93
    2386:	71 05       	cpc	r23, r1
    2388:	09 f4       	brne	.+2      	; 0x238c <gc_execute_block+0x164>
    238a:	49 c0       	rjmp	.+146    	; 0x241e <gc_execute_block+0x1f6>
    238c:	6e 35       	cpi	r22, 0x5E	; 94
    238e:	71 05       	cpc	r23, r1
    2390:	09 f0       	breq	.+2      	; 0x2394 <gc_execute_block+0x16c>
    2392:	7d c0       	rjmp	.+250    	; 0x248e <gc_execute_block+0x266>
    2394:	47 c0       	rjmp	.+142    	; 0x2424 <gc_execute_block+0x1fc>
					case 0:  { gc.next_action = NEXT_ACTION_MOTION;
    2396:	f0 92 7f 21 	sts	0x217F, r15
							   gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    239a:	10 92 35 21 	sts	0x2135, r1
    239e:	88 c0       	rjmp	.+272    	; 0x24b0 <gc_execute_block+0x288>

					case 1:  { gc.next_action = NEXT_ACTION_MOTION;
    23a0:	f0 92 7f 21 	sts	0x217F, r15
							   gc.motion_mode = MOTION_MODE_LINEAR; break; }
    23a4:	f0 92 35 21 	sts	0x2135, r15
    23a8:	83 c0       	rjmp	.+262    	; 0x24b0 <gc_execute_block+0x288>

					case 2:  { gc.next_action = NEXT_ACTION_MOTION;
    23aa:	f0 92 7f 21 	sts	0x217F, r15
					           gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    23ae:	e0 92 35 21 	sts	0x2135, r14
    23b2:	7e c0       	rjmp	.+252    	; 0x24b0 <gc_execute_block+0x288>

					case 3:  { gc.next_action = NEXT_ACTION_MOTION;
    23b4:	f0 92 7f 21 	sts	0x217F, r15
					           gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    23b8:	d0 92 35 21 	sts	0x2135, r13
    23bc:	79 c0       	rjmp	.+242    	; 0x24b0 <gc_execute_block+0x288>

					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    23be:	e0 92 7f 21 	sts	0x217F, r14
    23c2:	76 c0       	rjmp	.+236    	; 0x24b0 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23c4:	10 92 77 21 	sts	0x2177, r1
	gc.plane_axis_1 = axis_1;
    23c8:	f0 92 78 21 	sts	0x2178, r15
	gc.plane_axis_2 = axis_2;
    23cc:	e0 92 79 21 	sts	0x2179, r14
    23d0:	6f c0       	rjmp	.+222    	; 0x24b0 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23d2:	10 92 77 21 	sts	0x2177, r1
	gc.plane_axis_1 = axis_1;
    23d6:	e0 92 78 21 	sts	0x2178, r14
	gc.plane_axis_2 = axis_2;
    23da:	f0 92 79 21 	sts	0x2179, r15
    23de:	68 c0       	rjmp	.+208    	; 0x24b0 <gc_execute_block+0x288>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    23e0:	f0 92 77 21 	sts	0x2177, r15
	gc.plane_axis_1 = axis_1;
    23e4:	e0 92 78 21 	sts	0x2178, r14
	gc.plane_axis_2 = axis_2;
    23e8:	10 92 79 21 	sts	0x2179, r1
    23ec:	61 c0       	rjmp	.+194    	; 0x24b0 <gc_execute_block+0x288>

					case 17: { select_plane(X, Y, Z); break; }
					case 18: { select_plane(X, Z, Y); break; }
					case 19: { select_plane(Y, Z, X); break; }

					case 20: { gc.inches_mode = TRUE; break; }
    23ee:	f0 92 37 21 	sts	0x2137, r15
    23f2:	5e c0       	rjmp	.+188    	; 0x24b0 <gc_execute_block+0x288>
					case 21: { gc.inches_mode = FALSE; break; }
    23f4:	10 92 37 21 	sts	0x2137, r1
    23f8:	5b c0       	rjmp	.+182    	; 0x24b0 <gc_execute_block+0x288>

					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    23fa:	d0 92 7f 21 	sts	0x217F, r13
    23fe:	58 c0       	rjmp	.+176    	; 0x24b0 <gc_execute_block+0x288>

					case 53: { gc.absolute_override = TRUE; break; }
    2400:	f0 92 7e 21 	sts	0x217E, r15
    2404:	55 c0       	rjmp	.+170    	; 0x24b0 <gc_execute_block+0x288>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2406:	60 92 35 21 	sts	0x2135, r6
    240a:	52 c0       	rjmp	.+164    	; 0x24b0 <gc_execute_block+0x288>
					case 90: { gc.absolute_mode = TRUE; break; }
    240c:	f0 92 38 21 	sts	0x2138, r15
    2410:	4f c0       	rjmp	.+158    	; 0x24b0 <gc_execute_block+0x288>
					case 91: { gc.absolute_mode = FALSE; break; }
    2412:	10 92 38 21 	sts	0x2138, r1
    2416:	4c c0       	rjmp	.+152    	; 0x24b0 <gc_execute_block+0x288>
					case 92: { gc.set_origin_mode = TRUE; break; }
    2418:	f0 92 3a 21 	sts	0x213A, r15
    241c:	49 c0       	rjmp	.+146    	; 0x24b0 <gc_execute_block+0x288>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    241e:	f0 92 36 21 	sts	0x2136, r15
    2422:	46 c0       	rjmp	.+140    	; 0x24b0 <gc_execute_block+0x288>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    2424:	10 92 36 21 	sts	0x2136, r1
    2428:	43 c0       	rjmp	.+134    	; 0x24b0 <gc_execute_block+0x288>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    242a:	60 91 2c 21 	lds	r22, 0x212C
    242e:	70 91 2d 21 	lds	r23, 0x212D
    2432:	80 91 2e 21 	lds	r24, 0x212E
    2436:	90 91 2f 21 	lds	r25, 0x212F
    243a:	0e 94 92 42 	call	0x8524	; 0x8524 <__fixsfsi>
    243e:	63 30       	cpi	r22, 0x03	; 3
    2440:	71 05       	cpc	r23, r1
    2442:	e1 f0       	breq	.+56     	; 0x247c <gc_execute_block+0x254>
    2444:	64 30       	cpi	r22, 0x04	; 4
    2446:	71 05       	cpc	r23, r1
    2448:	34 f4       	brge	.+12     	; 0x2456 <gc_execute_block+0x22e>
    244a:	77 fd       	sbrc	r23, 7
    244c:	20 c0       	rjmp	.+64     	; 0x248e <gc_execute_block+0x266>
    244e:	62 30       	cpi	r22, 0x02	; 2
    2450:	71 05       	cpc	r23, r1
    2452:	74 f0       	brlt	.+28     	; 0x2470 <gc_execute_block+0x248>
    2454:	10 c0       	rjmp	.+32     	; 0x2476 <gc_execute_block+0x24e>
    2456:	65 30       	cpi	r22, 0x05	; 5
    2458:	71 05       	cpc	r23, r1
    245a:	b1 f0       	breq	.+44     	; 0x2488 <gc_execute_block+0x260>
    245c:	65 30       	cpi	r22, 0x05	; 5
    245e:	71 05       	cpc	r23, r1
    2460:	84 f0       	brlt	.+32     	; 0x2482 <gc_execute_block+0x25a>
    2462:	6e 31       	cpi	r22, 0x1E	; 30
    2464:	71 05       	cpc	r23, r1
    2466:	39 f0       	breq	.+14     	; 0x2476 <gc_execute_block+0x24e>
    2468:	6c 33       	cpi	r22, 0x3C	; 60
    246a:	71 05       	cpc	r23, r1
    246c:	81 f4       	brne	.+32     	; 0x248e <gc_execute_block+0x266>
    246e:	03 c0       	rjmp	.+6      	; 0x2476 <gc_execute_block+0x24e>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    2470:	f0 92 34 21 	sts	0x2134, r15
    2474:	1d c0       	rjmp	.+58     	; 0x24b0 <gc_execute_block+0x288>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2476:	e0 92 34 21 	sts	0x2134, r14
    247a:	1a c0       	rjmp	.+52     	; 0x24b0 <gc_execute_block+0x288>
					case 3: gc.spindle_direction = 1; break;
    247c:	f0 92 7b 21 	sts	0x217B, r15
    2480:	17 c0       	rjmp	.+46     	; 0x24b0 <gc_execute_block+0x288>
					case 4: gc.spindle_direction = -1; break;
    2482:	70 92 7b 21 	sts	0x217B, r7
    2486:	14 c0       	rjmp	.+40     	; 0x24b0 <gc_execute_block+0x288>
					case 5: gc.spindle_direction = 0; break;
    2488:	10 92 7b 21 	sts	0x217B, r1
    248c:	11 c0       	rjmp	.+34     	; 0x24b0 <gc_execute_block+0x288>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    248e:	c0 92 2a 21 	sts	0x212A, r12
    2492:	0e c0       	rjmp	.+28     	; 0x24b0 <gc_execute_block+0x288>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    2494:	60 91 2c 21 	lds	r22, 0x212C
    2498:	70 91 2d 21 	lds	r23, 0x212D
    249c:	80 91 2e 21 	lds	r24, 0x212E
    24a0:	90 91 2f 21 	lds	r25, 0x212F
    24a4:	0e 94 93 45 	call	0x8b26	; 0x8b26 <trunc>
    24a8:	0e 94 97 42 	call	0x852e	; 0x852e <__fixunssfsi>
    24ac:	60 93 7a 21 	sts	0x217A, r22
		}
		if(gc.status) {
    24b0:	80 91 2a 21 	lds	r24, 0x212A
    24b4:	88 23       	and	r24, r24
    24b6:	69 f4       	brne	.+26     	; 0x24d2 <gc_execute_block+0x2aa>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
	gc.next_action  = NEXT_ACTION_DEFAULT;	// start each block with no action set

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    24b8:	8b e2       	ldi	r24, 0x2B	; 43
    24ba:	91 e2       	ldi	r25, 0x21	; 33
    24bc:	6c e2       	ldi	r22, 0x2C	; 44
    24be:	71 e2       	ldi	r23, 0x21	; 33
    24c0:	40 e3       	ldi	r20, 0x30	; 48
    24c2:	51 e2       	ldi	r21, 0x21	; 33
    24c4:	94 01       	movw	r18, r8
    24c6:	85 01       	movw	r16, r10
    24c8:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_gc_next_statement>
    24cc:	89 2b       	or	r24, r25
    24ce:	09 f0       	breq	.+2      	; 0x24d2 <gc_execute_block+0x2aa>
    24d0:	e9 ce       	rjmp	.-558    	; 0x22a4 <gc_execute_block+0x7c>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    24d2:	80 91 2a 21 	lds	r24, 0x212A
    24d6:	88 23       	and	r24, r24
    24d8:	09 f0       	breq	.+2      	; 0x24dc <gc_execute_block+0x2b4>
    24da:	97 c3       	rjmp	.+1838   	; 0x2c0a <gc_execute_block+0x9e2>
		return(gc.status); 
	}

	i = 0;
    24dc:	19 82       	std	Y+1, r1	; 0x01
    24de:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    24e0:	eb e6       	ldi	r30, 0x6B	; 107
    24e2:	f1 e2       	ldi	r31, 0x21	; 33
    24e4:	8c e0       	ldi	r24, 0x0C	; 12
    24e6:	df 01       	movw	r26, r30
    24e8:	1d 92       	st	X+, r1
    24ea:	8a 95       	dec	r24
    24ec:	e9 f7       	brne	.-6      	; 0x24e8 <gc_execute_block+0x2c0>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    24ee:	df 01       	movw	r26, r30
    24f0:	1c 97       	sbiw	r26, 0x0c	; 12
    24f2:	78 97       	sbiw	r30, 0x18	; 24
    24f4:	8c e0       	ldi	r24, 0x0C	; 12
    24f6:	01 90       	ld	r0, Z+
    24f8:	0d 92       	st	X+, r0
    24fa:	81 50       	subi	r24, 0x01	; 1
    24fc:	e1 f7       	brne	.-8      	; 0x24f6 <gc_execute_block+0x2ce>
    24fe:	c6 c0       	rjmp	.+396    	; 0x268c <gc_execute_block+0x464>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2500:	c0 90 2c 21 	lds	r12, 0x212C
    2504:	d0 90 2d 21 	lds	r13, 0x212D
    2508:	e0 90 2e 21 	lds	r14, 0x212E
    250c:	f0 90 2f 21 	lds	r15, 0x212F
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    2510:	80 91 37 21 	lds	r24, 0x2137
    2514:	88 23       	and	r24, r24
    2516:	19 f4       	brne	.+6      	; 0x251e <gc_execute_block+0x2f6>
    2518:	a7 01       	movw	r20, r14
    251a:	96 01       	movw	r18, r12
    251c:	0a c0       	rjmp	.+20     	; 0x2532 <gc_execute_block+0x30a>
    251e:	c7 01       	movw	r24, r14
    2520:	b6 01       	movw	r22, r12
    2522:	25 e8       	ldi	r18, 0x85	; 133
    2524:	32 e4       	ldi	r19, 0x42	; 66
    2526:	41 e2       	ldi	r20, 0x21	; 33
    2528:	5d e3       	ldi	r21, 0x3D	; 61
    252a:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    252e:	9b 01       	movw	r18, r22
    2530:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2532:	20 93 4b 21 	sts	0x214B, r18
    2536:	30 93 4c 21 	sts	0x214C, r19
    253a:	40 93 4d 21 	sts	0x214D, r20
    253e:	50 93 4e 21 	sts	0x214E, r21
		switch(gc.letter) {
    2542:	00 91 2b 21 	lds	r16, 0x212B
    2546:	00 35       	cpi	r16, 0x50	; 80
    2548:	09 f4       	brne	.+2      	; 0x254c <gc_execute_block+0x324>
    254a:	47 c0       	rjmp	.+142    	; 0x25da <gc_execute_block+0x3b2>
    254c:	01 35       	cpi	r16, 0x51	; 81
    254e:	58 f4       	brcc	.+22     	; 0x2566 <gc_execute_block+0x33e>
    2550:	06 34       	cpi	r16, 0x46	; 70
    2552:	c1 f0       	breq	.+48     	; 0x2584 <gc_execute_block+0x35c>
    2554:	06 34       	cpi	r16, 0x46	; 70
    2556:	08 f4       	brcc	.+2      	; 0x255a <gc_execute_block+0x332>
    2558:	9f c0       	rjmp	.+318    	; 0x2698 <gc_execute_block+0x470>
    255a:	80 2f       	mov	r24, r16
    255c:	89 54       	subi	r24, 0x49	; 73
    255e:	83 30       	cpi	r24, 0x03	; 3
    2560:	08 f0       	brcs	.+2      	; 0x2564 <gc_execute_block+0x33c>
    2562:	9a c0       	rjmp	.+308    	; 0x2698 <gc_execute_block+0x470>
    2564:	2d c0       	rjmp	.+90     	; 0x25c0 <gc_execute_block+0x398>
    2566:	03 35       	cpi	r16, 0x53	; 83
    2568:	09 f4       	brne	.+2      	; 0x256c <gc_execute_block+0x344>
    256a:	4b c0       	rjmp	.+150    	; 0x2602 <gc_execute_block+0x3da>
    256c:	04 35       	cpi	r16, 0x54	; 84
    256e:	20 f4       	brcc	.+8      	; 0x2578 <gc_execute_block+0x350>
    2570:	02 35       	cpi	r16, 0x52	; 82
    2572:	09 f0       	breq	.+2      	; 0x2576 <gc_execute_block+0x34e>
    2574:	91 c0       	rjmp	.+290    	; 0x2698 <gc_execute_block+0x470>
    2576:	3a c0       	rjmp	.+116    	; 0x25ec <gc_execute_block+0x3c4>
    2578:	80 2f       	mov	r24, r16
    257a:	88 55       	subi	r24, 0x58	; 88
    257c:	83 30       	cpi	r24, 0x03	; 3
    257e:	08 f0       	brcs	.+2      	; 0x2582 <gc_execute_block+0x35a>
    2580:	8b c0       	rjmp	.+278    	; 0x2698 <gc_execute_block+0x470>
    2582:	48 c0       	rjmp	.+144    	; 0x2614 <gc_execute_block+0x3ec>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    2584:	80 91 36 21 	lds	r24, 0x2136
    2588:	88 23       	and	r24, r24
    258a:	49 f0       	breq	.+18     	; 0x259e <gc_execute_block+0x376>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    258c:	20 93 4f 21 	sts	0x214F, r18
    2590:	30 93 50 21 	sts	0x2150, r19
    2594:	40 93 51 21 	sts	0x2151, r20
    2598:	50 93 52 21 	sts	0x2152, r21
    259c:	7d c0       	rjmp	.+250    	; 0x2698 <gc_execute_block+0x470>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    259e:	ca 01       	movw	r24, r20
    25a0:	b9 01       	movw	r22, r18
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e7       	ldi	r20, 0x70	; 112
    25a8:	52 e4       	ldi	r21, 0x42	; 66
    25aa:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    25ae:	60 93 43 21 	sts	0x2143, r22
    25b2:	70 93 44 21 	sts	0x2144, r23
    25b6:	80 93 45 21 	sts	0x2145, r24
    25ba:	90 93 46 21 	sts	0x2146, r25
    25be:	6c c0       	rjmp	.+216    	; 0x2698 <gc_execute_block+0x470>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    25c0:	e0 2f       	mov	r30, r16
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	ee 0f       	add	r30, r30
    25c6:	ff 1f       	adc	r31, r31
    25c8:	ee 0f       	add	r30, r30
    25ca:	ff 1f       	adc	r31, r31
    25cc:	e9 5b       	subi	r30, 0xB9	; 185
    25ce:	ff 4d       	sbci	r31, 0xDF	; 223
    25d0:	20 83       	st	Z, r18
    25d2:	31 83       	std	Z+1, r19	; 0x01
    25d4:	42 83       	std	Z+2, r20	; 0x02
    25d6:	53 83       	std	Z+3, r21	; 0x03
    25d8:	5f c0       	rjmp	.+190    	; 0x2698 <gc_execute_block+0x470>
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
    25da:	c0 92 3b 21 	sts	0x213B, r12
    25de:	d0 92 3c 21 	sts	0x213C, r13
    25e2:	e0 92 3d 21 	sts	0x213D, r14
    25e6:	f0 92 3e 21 	sts	0x213E, r15
    25ea:	56 c0       	rjmp	.+172    	; 0x2698 <gc_execute_block+0x470>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    25ec:	20 93 3f 21 	sts	0x213F, r18
    25f0:	30 93 40 21 	sts	0x2140, r19
    25f4:	40 93 41 21 	sts	0x2141, r20
    25f8:	50 93 42 21 	sts	0x2142, r21
    25fc:	70 92 39 21 	sts	0x2139, r7
    2600:	4b c0       	rjmp	.+150    	; 0x2698 <gc_execute_block+0x470>
			case 'S': gc.spindle_speed = gc.value; break;
    2602:	c7 01       	movw	r24, r14
    2604:	b6 01       	movw	r22, r12
    2606:	0e 94 92 42 	call	0x8524	; 0x8524 <__fixsfsi>
    260a:	60 93 7c 21 	sts	0x217C, r22
    260e:	70 93 7d 21 	sts	0x217D, r23
    2612:	42 c0       	rjmp	.+132    	; 0x2698 <gc_execute_block+0x470>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    2614:	80 91 3a 21 	lds	r24, 0x213A
    2618:	88 23       	and	r24, r24
    261a:	69 f0       	breq	.+26     	; 0x2636 <gc_execute_block+0x40e>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    261c:	e0 2f       	mov	r30, r16
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	ee 0f       	add	r30, r30
    2622:	ff 1f       	adc	r31, r31
    2624:	ee 0f       	add	r30, r30
    2626:	ff 1f       	adc	r31, r31
    2628:	e6 53       	subi	r30, 0x36	; 54
    262a:	f0 4e       	sbci	r31, 0xE0	; 224
    262c:	21 a7       	std	Z+41, r18	; 0x29
    262e:	32 a7       	std	Z+42, r19	; 0x2a
    2630:	43 a7       	std	Z+43, r20	; 0x2b
    2632:	54 a7       	std	Z+44, r21	; 0x2c
    2634:	31 c0       	rjmp	.+98     	; 0x2698 <gc_execute_block+0x470>
				} else if (gc.absolute_mode || gc.absolute_override) {
    2636:	80 91 38 21 	lds	r24, 0x2138
    263a:	88 23       	and	r24, r24
    263c:	21 f4       	brne	.+8      	; 0x2646 <gc_execute_block+0x41e>
    263e:	80 91 7e 21 	lds	r24, 0x217E
    2642:	88 23       	and	r24, r24
    2644:	69 f0       	breq	.+26     	; 0x2660 <gc_execute_block+0x438>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    2646:	e0 2f       	mov	r30, r16
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	ee 0f       	add	r30, r30
    264c:	ff 1f       	adc	r31, r31
    264e:	ee 0f       	add	r30, r30
    2650:	ff 1f       	adc	r31, r31
    2652:	e6 53       	subi	r30, 0x36	; 54
    2654:	f0 4e       	sbci	r31, 0xE0	; 224
    2656:	25 ab       	std	Z+53, r18	; 0x35
    2658:	36 ab       	std	Z+54, r19	; 0x36
    265a:	47 ab       	std	Z+55, r20	; 0x37
    265c:	50 af       	std	Z+56, r21	; 0x38
    265e:	1c c0       	rjmp	.+56     	; 0x2698 <gc_execute_block+0x470>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    2660:	10 e0       	ldi	r17, 0x00	; 0
    2662:	00 0f       	add	r16, r16
    2664:	11 1f       	adc	r17, r17
    2666:	00 0f       	add	r16, r16
    2668:	11 1f       	adc	r17, r17
    266a:	06 53       	subi	r16, 0x36	; 54
    266c:	10 4e       	sbci	r17, 0xE0	; 224
    266e:	f8 01       	movw	r30, r16
    2670:	65 a9       	ldd	r22, Z+53	; 0x35
    2672:	76 a9       	ldd	r23, Z+54	; 0x36
    2674:	87 a9       	ldd	r24, Z+55	; 0x37
    2676:	90 ad       	ldd	r25, Z+56	; 0x38
    2678:	0e 94 84 41 	call	0x8308	; 0x8308 <__addsf3>
    267c:	d8 01       	movw	r26, r16
    267e:	d5 96       	adiw	r26, 0x35	; 53
    2680:	6d 93       	st	X+, r22
    2682:	7d 93       	st	X+, r23
    2684:	8d 93       	st	X+, r24
    2686:	9c 93       	st	X, r25
    2688:	d8 97       	sbiw	r26, 0x38	; 56
    268a:	06 c0       	rjmp	.+12     	; 0x2698 <gc_execute_block+0x470>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    268c:	5e 01       	movw	r10, r28
    268e:	08 94       	sec
    2690:	a1 1c       	adc	r10, r1
    2692:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;			// dwell time in seconds
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    2694:	77 24       	eor	r7, r7
    2696:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2698:	8b e2       	ldi	r24, 0x2B	; 43
    269a:	91 e2       	ldi	r25, 0x21	; 33
    269c:	6c e2       	ldi	r22, 0x2C	; 44
    269e:	71 e2       	ldi	r23, 0x21	; 33
    26a0:	40 e3       	ldi	r20, 0x30	; 48
    26a2:	51 e2       	ldi	r21, 0x21	; 33
    26a4:	94 01       	movw	r18, r8
    26a6:	85 01       	movw	r16, r10
    26a8:	0e 94 61 10 	call	0x20c2	; 0x20c2 <_gc_next_statement>
    26ac:	89 2b       	or	r24, r25
    26ae:	09 f0       	breq	.+2      	; 0x26b2 <gc_execute_block+0x48a>
    26b0:	27 cf       	rjmp	.-434    	; 0x2500 <gc_execute_block+0x2d8>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    26b2:	80 91 2a 21 	lds	r24, 0x212A
    26b6:	88 23       	and	r24, r24
    26b8:	09 f0       	breq	.+2      	; 0x26bc <gc_execute_block+0x494>
    26ba:	a7 c2       	rjmp	.+1358   	; 0x2c0a <gc_execute_block+0x9e2>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    26bc:	80 91 7b 21 	lds	r24, 0x217B
    26c0:	88 23       	and	r24, r24
    26c2:	71 f0       	breq	.+28     	; 0x26e0 <gc_execute_block+0x4b8>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    26c4:	40 91 7c 21 	lds	r20, 0x217C
    26c8:	50 91 7d 21 	lds	r21, 0x217D
    26cc:	66 27       	eor	r22, r22
    26ce:	57 fd       	sbrc	r21, 7
    26d0:	60 95       	com	r22
    26d2:	76 2f       	mov	r23, r22
    26d4:	99 27       	eor	r25, r25
    26d6:	87 fd       	sbrc	r24, 7
    26d8:	90 95       	com	r25
    26da:	0e 94 1b 24 	call	0x4836	; 0x4836 <spindle_run>
    26de:	02 c0       	rjmp	.+4      	; 0x26e4 <gc_execute_block+0x4bc>
	} else {
		spindle_stop();
    26e0:	0e 94 2b 24 	call	0x4856	; 0x4856 <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    26e4:	80 91 7f 21 	lds	r24, 0x217F
    26e8:	82 30       	cpi	r24, 0x02	; 2
    26ea:	49 f0       	breq	.+18     	; 0x26fe <gc_execute_block+0x4d6>
    26ec:	83 30       	cpi	r24, 0x03	; 3
    26ee:	21 f0       	breq	.+8      	; 0x26f8 <gc_execute_block+0x4d0>
    26f0:	81 30       	cpi	r24, 0x01	; 1
    26f2:	09 f0       	breq	.+2      	; 0x26f6 <gc_execute_block+0x4ce>
    26f4:	7d c2       	rjmp	.+1274   	; 0x2bf0 <gc_execute_block+0x9c8>
    26f6:	0e c0       	rjmp	.+28     	; 0x2714 <gc_execute_block+0x4ec>
		case NEXT_ACTION_DEFAULT: {				// nothing to do here
			break;
		}

		case NEXT_ACTION_GO_HOME: { 
			gc.status = mc_go_home(); 
    26f8:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <mc_go_home>
    26fc:	77 c2       	rjmp	.+1262   	; 0x2bec <gc_execute_block+0x9c4>
			break;
		}

		case NEXT_ACTION_DWELL: {
			gc.status = mc_dwell(gc.dwell_time); 
    26fe:	60 91 3b 21 	lds	r22, 0x213B
    2702:	70 91 3c 21 	lds	r23, 0x213C
    2706:	80 91 3d 21 	lds	r24, 0x213D
    270a:	90 91 3e 21 	lds	r25, 0x213E
    270e:	0e 94 2f 1c 	call	0x385e	; 0x385e <mc_dwell>
    2712:	6c c2       	rjmp	.+1240   	; 0x2bec <gc_execute_block+0x9c4>
			break;
		}

		case NEXT_ACTION_MOTION: {
			switch (gc.motion_mode) {
    2714:	b0 91 35 21 	lds	r27, 0x2135
    2718:	b8 8f       	std	Y+24, r27	; 0x18
    271a:	b2 30       	cpi	r27, 0x02	; 2
    271c:	20 f0       	brcs	.+8      	; 0x2726 <gc_execute_block+0x4fe>
    271e:	b4 30       	cpi	r27, 0x04	; 4
    2720:	08 f0       	brcs	.+2      	; 0x2724 <gc_execute_block+0x4fc>
    2722:	66 c2       	rjmp	.+1228   	; 0x2bf0 <gc_execute_block+0x9c8>
    2724:	31 c0       	rjmp	.+98     	; 0x2788 <gc_execute_block+0x560>
				case MOTION_MODE_CANCEL: {
					break;
				}

				case MOTION_MODE_RAPID_LINEAR: case MOTION_MODE_LINEAR: {
					gc.status = mc_line(gc.target[X], gc.target[Y], gc.target[Z],
    2726:	60 91 5f 21 	lds	r22, 0x215F
    272a:	70 91 60 21 	lds	r23, 0x2160
    272e:	80 91 61 21 	lds	r24, 0x2161
    2732:	90 91 62 21 	lds	r25, 0x2162
    2736:	20 91 63 21 	lds	r18, 0x2163
    273a:	30 91 64 21 	lds	r19, 0x2164
    273e:	40 91 65 21 	lds	r20, 0x2165
    2742:	50 91 66 21 	lds	r21, 0x2166
    2746:	e0 90 67 21 	lds	r14, 0x2167
    274a:	f0 90 68 21 	lds	r15, 0x2168
    274e:	00 91 69 21 	lds	r16, 0x2169
    2752:	10 91 6a 21 	lds	r17, 0x216A
    2756:	80 90 36 21 	lds	r8, 0x2136
    275a:	88 20       	and	r8, r8
    275c:	49 f0       	breq	.+18     	; 0x2770 <gc_execute_block+0x548>
    275e:	a0 90 4f 21 	lds	r10, 0x214F
    2762:	b0 90 50 21 	lds	r11, 0x2150
    2766:	c0 90 51 21 	lds	r12, 0x2151
    276a:	d0 90 52 21 	lds	r13, 0x2152
    276e:	08 c0       	rjmp	.+16     	; 0x2780 <gc_execute_block+0x558>
    2770:	a0 90 43 21 	lds	r10, 0x2143
    2774:	b0 90 44 21 	lds	r11, 0x2144
    2778:	c0 90 45 21 	lds	r12, 0x2145
    277c:	d0 90 46 21 	lds	r13, 0x2146
    2780:	99 24       	eor	r9, r9
    2782:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <mc_line>
    2786:	32 c2       	rjmp	.+1124   	; 0x2bec <gc_execute_block+0x9c4>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    2788:	80 91 39 21 	lds	r24, 0x2139
    278c:	88 23       	and	r24, r24
    278e:	09 f4       	brne	.+2      	; 0x2792 <gc_execute_block+0x56a>
    2790:	ec c0       	rjmp	.+472    	; 0x296a <gc_execute_block+0x742>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    2792:	e0 91 77 21 	lds	r30, 0x2177
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	ee 0f       	add	r30, r30
    279a:	ff 1f       	adc	r31, r31
    279c:	ee 0f       	add	r30, r30
    279e:	ff 1f       	adc	r31, r31
    27a0:	e6 5d       	subi	r30, 0xD6	; 214
    27a2:	fe 4d       	sbci	r31, 0xDE	; 222
    27a4:	65 a9       	ldd	r22, Z+53	; 0x35
    27a6:	76 a9       	ldd	r23, Z+54	; 0x36
    27a8:	87 a9       	ldd	r24, Z+55	; 0x37
    27aa:	90 ad       	ldd	r25, Z+56	; 0x38
    27ac:	21 a5       	ldd	r18, Z+41	; 0x29
    27ae:	32 a5       	ldd	r19, Z+42	; 0x2a
    27b0:	43 a5       	ldd	r20, Z+43	; 0x2b
    27b2:	54 a5       	ldd	r21, Z+44	; 0x2c
    27b4:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    27b8:	6f 83       	std	Y+7, r22	; 0x07
    27ba:	78 87       	std	Y+8, r23	; 0x08
    27bc:	89 87       	std	Y+9, r24	; 0x09
    27be:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    27c0:	e0 91 78 21 	lds	r30, 0x2178
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	ee 0f       	add	r30, r30
    27c8:	ff 1f       	adc	r31, r31
    27ca:	ee 0f       	add	r30, r30
    27cc:	ff 1f       	adc	r31, r31
    27ce:	e6 5d       	subi	r30, 0xD6	; 214
    27d0:	fe 4d       	sbci	r31, 0xDE	; 222
    27d2:	65 a9       	ldd	r22, Z+53	; 0x35
    27d4:	76 a9       	ldd	r23, Z+54	; 0x36
    27d6:	87 a9       	ldd	r24, Z+55	; 0x37
    27d8:	90 ad       	ldd	r25, Z+56	; 0x38
    27da:	21 a5       	ldd	r18, Z+41	; 0x29
    27dc:	32 a5       	ldd	r19, Z+42	; 0x2a
    27de:	43 a5       	ldd	r20, Z+43	; 0x2b
    27e0:	54 a5       	ldd	r21, Z+44	; 0x2c
    27e2:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    27e6:	1b 01       	movw	r2, r22
    27e8:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    27ea:	10 92 6b 21 	sts	0x216B, r1
    27ee:	10 92 6c 21 	sts	0x216C, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    27f2:	60 90 3f 21 	lds	r6, 0x213F
    27f6:	70 90 40 21 	lds	r7, 0x2140
    27fa:	80 90 41 21 	lds	r8, 0x2141
    27fe:	90 90 42 21 	lds	r9, 0x2142
    2802:	c4 01       	movw	r24, r8
    2804:	b3 01       	movw	r22, r6
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	40 e8       	ldi	r20, 0x80	; 128
    280c:	50 e4       	ldi	r21, 0x40	; 64
    280e:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    2812:	a4 01       	movw	r20, r8
    2814:	93 01       	movw	r18, r6
    2816:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    281a:	5b 01       	movw	r10, r22
    281c:	6c 01       	movw	r12, r24
    281e:	6f 81       	ldd	r22, Y+7	; 0x07
    2820:	78 85       	ldd	r23, Y+8	; 0x08
    2822:	89 85       	ldd	r24, Y+9	; 0x09
    2824:	9a 85       	ldd	r25, Y+10	; 0x0a
    2826:	9b 01       	movw	r18, r22
    2828:	ac 01       	movw	r20, r24
    282a:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    282e:	7b 01       	movw	r14, r22
    2830:	8c 01       	movw	r16, r24
    2832:	c2 01       	movw	r24, r4
    2834:	b1 01       	movw	r22, r2
    2836:	a2 01       	movw	r20, r4
    2838:	91 01       	movw	r18, r2
    283a:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    283e:	9b 01       	movw	r18, r22
    2840:	ac 01       	movw	r20, r24
    2842:	c8 01       	movw	r24, r16
    2844:	b7 01       	movw	r22, r14
    2846:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    284a:	9b 01       	movw	r18, r22
    284c:	ac 01       	movw	r20, r24
    284e:	c6 01       	movw	r24, r12
    2850:	b5 01       	movw	r22, r10
    2852:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    2856:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <sqrt>
    285a:	7b 01       	movw	r14, r22
    285c:	8c 01       	movw	r16, r24
    285e:	6f 81       	ldd	r22, Y+7	; 0x07
    2860:	78 85       	ldd	r23, Y+8	; 0x08
    2862:	89 85       	ldd	r24, Y+9	; 0x09
    2864:	9a 85       	ldd	r25, Y+10	; 0x0a
    2866:	a2 01       	movw	r20, r4
    2868:	91 01       	movw	r18, r2
    286a:	0e 94 20 44 	call	0x8840	; 0x8840 <hypot>
    286e:	9b 01       	movw	r18, r22
    2870:	ac 01       	movw	r20, r24
    2872:	17 fb       	bst	r17, 7
    2874:	10 95       	com	r17
    2876:	17 f9       	bld	r17, 7
    2878:	10 95       	com	r17
    287a:	c8 01       	movw	r24, r16
    287c:	b7 01       	movw	r22, r14
    287e:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    2882:	7b 01       	movw	r14, r22
    2884:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    2886:	a8 01       	movw	r20, r16
    2888:	97 01       	movw	r18, r14
    288a:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__unordsf2>
    288e:	88 23       	and	r24, r24
    2890:	21 f0       	breq	.+8      	; 0x289a <gc_execute_block+0x672>
		FAIL(TG_FLOATING_POINT_ERROR); 
    2892:	8e e0       	ldi	r24, 0x0E	; 14
    2894:	80 93 2a 21 	sts	0x212A, r24
    2898:	65 c0       	rjmp	.+202    	; 0x2964 <gc_execute_block+0x73c>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    289a:	e8 8d       	ldd	r30, Y+24	; 0x18
    289c:	e3 30       	cpi	r30, 0x03	; 3
    289e:	21 f4       	brne	.+8      	; 0x28a8 <gc_execute_block+0x680>
		h_x2_div_d = -h_x2_div_d;
    28a0:	17 fb       	bst	r17, 7
    28a2:	10 95       	com	r17
    28a4:	17 f9       	bld	r17, 7
    28a6:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    28a8:	c4 01       	movw	r24, r8
    28aa:	b3 01       	movw	r22, r6
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	0e 94 23 42 	call	0x8446	; 0x8446 <__cmpsf2>
    28b8:	88 23       	and	r24, r24
    28ba:	24 f4       	brge	.+8      	; 0x28c4 <gc_execute_block+0x69c>
		h_x2_div_d = -h_x2_div_d; 
    28bc:	17 fb       	bst	r17, 7
    28be:	10 95       	com	r17
    28c0:	17 f9       	bld	r17, 7
    28c2:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    28c4:	80 91 77 21 	lds	r24, 0x2177
    28c8:	c8 2e       	mov	r12, r24
    28ca:	dd 24       	eor	r13, r13
    28cc:	cc 0c       	add	r12, r12
    28ce:	dd 1c       	adc	r13, r13
    28d0:	cc 0c       	add	r12, r12
    28d2:	dd 1c       	adc	r13, r13
    28d4:	2b e6       	ldi	r18, 0x6B	; 107
    28d6:	31 e2       	ldi	r19, 0x21	; 33
    28d8:	c2 0e       	add	r12, r18
    28da:	d3 1e       	adc	r13, r19
    28dc:	c2 01       	movw	r24, r4
    28de:	b1 01       	movw	r22, r2
    28e0:	a8 01       	movw	r20, r16
    28e2:	97 01       	movw	r18, r14
    28e4:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    28e8:	9b 01       	movw	r18, r22
    28ea:	ac 01       	movw	r20, r24
    28ec:	6f 81       	ldd	r22, Y+7	; 0x07
    28ee:	78 85       	ldd	r23, Y+8	; 0x08
    28f0:	89 85       	ldd	r24, Y+9	; 0x09
    28f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f4:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e0       	ldi	r20, 0x00	; 0
    28fe:	5f e3       	ldi	r21, 0x3F	; 63
    2900:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    2904:	d6 01       	movw	r26, r12
    2906:	6d 93       	st	X+, r22
    2908:	7d 93       	st	X+, r23
    290a:	8d 93       	st	X+, r24
    290c:	9c 93       	st	X, r25
    290e:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    2910:	80 91 78 21 	lds	r24, 0x2178
    2914:	c8 2e       	mov	r12, r24
    2916:	dd 24       	eor	r13, r13
    2918:	cc 0c       	add	r12, r12
    291a:	dd 1c       	adc	r13, r13
    291c:	cc 0c       	add	r12, r12
    291e:	dd 1c       	adc	r13, r13
    2920:	eb e6       	ldi	r30, 0x6B	; 107
    2922:	f1 e2       	ldi	r31, 0x21	; 33
    2924:	ce 0e       	add	r12, r30
    2926:	df 1e       	adc	r13, r31
    2928:	6f 81       	ldd	r22, Y+7	; 0x07
    292a:	78 85       	ldd	r23, Y+8	; 0x08
    292c:	89 85       	ldd	r24, Y+9	; 0x09
    292e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2930:	a8 01       	movw	r20, r16
    2932:	97 01       	movw	r18, r14
    2934:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    2938:	9b 01       	movw	r18, r22
    293a:	ac 01       	movw	r20, r24
    293c:	c2 01       	movw	r24, r4
    293e:	b1 01       	movw	r22, r2
    2940:	0e 94 84 41 	call	0x8308	; 0x8308 <__addsf3>
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e0       	ldi	r20, 0x00	; 0
    294a:	5f e3       	ldi	r21, 0x3F	; 63
    294c:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    2950:	d6 01       	movw	r26, r12
    2952:	6d 93       	st	X+, r22
    2954:	7d 93       	st	X+, r23
    2956:	8d 93       	st	X+, r24
    2958:	9c 93       	st	X, r25
    295a:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    295c:	80 91 2a 21 	lds	r24, 0x212A
    2960:	88 23       	and	r24, r24
    2962:	19 f0       	breq	.+6      	; 0x296a <gc_execute_block+0x742>
			return (gc.status);
    2964:	80 91 2a 21 	lds	r24, 0x212A
    2968:	41 c1       	rjmp	.+642    	; 0x2bec <gc_execute_block+0x9c4>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    296a:	e0 91 77 21 	lds	r30, 0x2177
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	ee 0f       	add	r30, r30
    2972:	ff 1f       	adc	r31, r31
    2974:	ee 0f       	add	r30, r30
    2976:	ff 1f       	adc	r31, r31
    2978:	e5 59       	subi	r30, 0x95	; 149
    297a:	fe 4d       	sbci	r31, 0xDE	; 222
    297c:	60 81       	ld	r22, Z
    297e:	71 81       	ldd	r23, Z+1	; 0x01
    2980:	82 81       	ldd	r24, Z+2	; 0x02
    2982:	93 81       	ldd	r25, Z+3	; 0x03
    2984:	90 58       	subi	r25, 0x80	; 128
    2986:	e0 91 78 21 	lds	r30, 0x2178
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	ee 0f       	add	r30, r30
    298e:	ff 1f       	adc	r31, r31
    2990:	ee 0f       	add	r30, r30
    2992:	ff 1f       	adc	r31, r31
    2994:	e5 59       	subi	r30, 0x95	; 149
    2996:	fe 4d       	sbci	r31, 0xDE	; 222
    2998:	20 81       	ld	r18, Z
    299a:	31 81       	ldd	r19, Z+1	; 0x01
    299c:	42 81       	ldd	r20, Z+2	; 0x02
    299e:	53 81       	ldd	r21, Z+3	; 0x03
    29a0:	50 58       	subi	r21, 0x80	; 128
    29a2:	0e 94 d5 10 	call	0x21aa	; 0x21aa <theta>
    29a6:	6f 87       	std	Y+15, r22	; 0x0f
    29a8:	78 8b       	std	Y+16, r23	; 0x10
    29aa:	89 8b       	std	Y+17, r24	; 0x11
    29ac:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    29ae:	9b 01       	movw	r18, r22
    29b0:	ac 01       	movw	r20, r24
    29b2:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__unordsf2>
    29b6:	88 23       	and	r24, r24
    29b8:	09 f0       	breq	.+2      	; 0x29bc <gc_execute_block+0x794>
    29ba:	54 c0       	rjmp	.+168    	; 0x2a64 <gc_execute_block+0x83c>
		FAIL(TG_ARC_ERROR); 
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    29bc:	e0 91 77 21 	lds	r30, 0x2177
    29c0:	0e 2f       	mov	r16, r30
    29c2:	10 e0       	ldi	r17, 0x00	; 0
    29c4:	e0 91 78 21 	lds	r30, 0x2178
    29c8:	ce 2e       	mov	r12, r30
    29ca:	dd 24       	eor	r13, r13
    29cc:	00 0f       	add	r16, r16
    29ce:	11 1f       	adc	r17, r17
    29d0:	00 0f       	add	r16, r16
    29d2:	11 1f       	adc	r17, r17
    29d4:	06 5d       	subi	r16, 0xD6	; 214
    29d6:	1e 4d       	sbci	r17, 0xDE	; 222
    29d8:	f8 01       	movw	r30, r16
    29da:	ef 5b       	subi	r30, 0xBF	; 191
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	d8 01       	movw	r26, r16
    29e0:	d5 96       	adiw	r26, 0x35	; 53
    29e2:	6d 91       	ld	r22, X+
    29e4:	7d 91       	ld	r23, X+
    29e6:	8d 91       	ld	r24, X+
    29e8:	9c 91       	ld	r25, X
    29ea:	d8 97       	sbiw	r26, 0x38	; 56
    29ec:	20 81       	ld	r18, Z
    29ee:	31 81       	ldd	r19, Z+1	; 0x01
    29f0:	42 81       	ldd	r20, Z+2	; 0x02
    29f2:	53 81       	ldd	r21, Z+3	; 0x03
    29f4:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    29f8:	f8 01       	movw	r30, r16
    29fa:	21 a5       	ldd	r18, Z+41	; 0x29
    29fc:	32 a5       	ldd	r19, Z+42	; 0x2a
    29fe:	43 a5       	ldd	r20, Z+43	; 0x2b
    2a00:	54 a5       	ldd	r21, Z+44	; 0x2c
    2a02:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    2a06:	7b 01       	movw	r14, r22
    2a08:	8c 01       	movw	r16, r24
    2a0a:	cc 0c       	add	r12, r12
    2a0c:	dd 1c       	adc	r13, r13
    2a0e:	cc 0c       	add	r12, r12
    2a10:	dd 1c       	adc	r13, r13
    2a12:	2a e2       	ldi	r18, 0x2A	; 42
    2a14:	31 e2       	ldi	r19, 0x21	; 33
    2a16:	c2 0e       	add	r12, r18
    2a18:	d3 1e       	adc	r13, r19
    2a1a:	f6 01       	movw	r30, r12
    2a1c:	ef 5b       	subi	r30, 0xBF	; 191
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	d6 01       	movw	r26, r12
    2a22:	d5 96       	adiw	r26, 0x35	; 53
    2a24:	6d 91       	ld	r22, X+
    2a26:	7d 91       	ld	r23, X+
    2a28:	8d 91       	ld	r24, X+
    2a2a:	9c 91       	ld	r25, X
    2a2c:	d8 97       	sbiw	r26, 0x38	; 56
    2a2e:	20 81       	ld	r18, Z
    2a30:	31 81       	ldd	r19, Z+1	; 0x01
    2a32:	42 81       	ldd	r20, Z+2	; 0x02
    2a34:	53 81       	ldd	r21, Z+3	; 0x03
    2a36:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    2a3a:	f6 01       	movw	r30, r12
    2a3c:	21 a5       	ldd	r18, Z+41	; 0x29
    2a3e:	32 a5       	ldd	r19, Z+42	; 0x2a
    2a40:	43 a5       	ldd	r20, Z+43	; 0x2b
    2a42:	54 a5       	ldd	r21, Z+44	; 0x2c
    2a44:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    2a48:	9b 01       	movw	r18, r22
    2a4a:	ac 01       	movw	r20, r24
    2a4c:	c8 01       	movw	r24, r16
    2a4e:	b7 01       	movw	r22, r14
    2a50:	0e 94 d5 10 	call	0x21aa	; 0x21aa <theta>
    2a54:	7b 01       	movw	r14, r22
    2a56:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    2a58:	a8 01       	movw	r20, r16
    2a5a:	97 01       	movw	r18, r14
    2a5c:	0e 94 9a 45 	call	0x8b34	; 0x8b34 <__unordsf2>
    2a60:	88 23       	and	r24, r24
    2a62:	19 f0       	breq	.+6      	; 0x2a6a <gc_execute_block+0x842>
		FAIL(TG_ARC_ERROR); 
    2a64:	80 e1       	ldi	r24, 0x10	; 16
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	c1 c0       	rjmp	.+386    	; 0x2bec <gc_execute_block+0x9c4>
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    2a6a:	c8 01       	movw	r24, r16
    2a6c:	b7 01       	movw	r22, r14
    2a6e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2a70:	38 89       	ldd	r19, Y+16	; 0x10
    2a72:	49 89       	ldd	r20, Y+17	; 0x11
    2a74:	5a 89       	ldd	r21, Y+18	; 0x12
    2a76:	0e 94 23 42 	call	0x8446	; 0x8446 <__cmpsf2>
    2a7a:	88 23       	and	r24, r24
    2a7c:	54 f4       	brge	.+20     	; 0x2a92 <gc_execute_block+0x86a>
		theta_end += 2*M_PI;
    2a7e:	c8 01       	movw	r24, r16
    2a80:	b7 01       	movw	r22, r14
    2a82:	2b ed       	ldi	r18, 0xDB	; 219
    2a84:	3f e0       	ldi	r19, 0x0F	; 15
    2a86:	49 ec       	ldi	r20, 0xC9	; 201
    2a88:	50 e4       	ldi	r21, 0x40	; 64
    2a8a:	0e 94 84 41 	call	0x8308	; 0x8308 <__addsf3>
    2a8e:	7b 01       	movw	r14, r22
    2a90:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    2a92:	c8 01       	movw	r24, r16
    2a94:	b7 01       	movw	r22, r14
    2a96:	2f 85       	ldd	r18, Y+15	; 0x0f
    2a98:	38 89       	ldd	r19, Y+16	; 0x10
    2a9a:	49 89       	ldd	r20, Y+17	; 0x11
    2a9c:	5a 89       	ldd	r21, Y+18	; 0x12
    2a9e:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    2aa2:	6b 87       	std	Y+11, r22	; 0x0b
    2aa4:	7c 87       	std	Y+12, r23	; 0x0c
    2aa6:	8d 87       	std	Y+13, r24	; 0x0d
    2aa8:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2aaa:	80 91 35 21 	lds	r24, 0x2135
    2aae:	83 30       	cpi	r24, 0x03	; 3
    2ab0:	71 f4       	brne	.+28     	; 0x2ace <gc_execute_block+0x8a6>
		angular_travel = angular_travel - 2*M_PI;
    2ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aba:	2b ed       	ldi	r18, 0xDB	; 219
    2abc:	3f e0       	ldi	r19, 0x0F	; 15
    2abe:	49 ec       	ldi	r20, 0xC9	; 201
    2ac0:	50 e4       	ldi	r21, 0x40	; 64
    2ac2:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    2ac6:	6b 87       	std	Y+11, r22	; 0x0b
    2ac8:	7c 87       	std	Y+12, r23	; 0x0c
    2aca:	8d 87       	std	Y+13, r24	; 0x0d
    2acc:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2ace:	80 91 77 21 	lds	r24, 0x2177
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	2d 83       	std	Y+5, r18	; 0x05
    2ad8:	3e 83       	std	Y+6, r19	; 0x06
    2ada:	f9 01       	movw	r30, r18
    2adc:	ee 0f       	add	r30, r30
    2ade:	ff 1f       	adc	r31, r31
    2ae0:	ee 0f       	add	r30, r30
    2ae2:	ff 1f       	adc	r31, r31
    2ae4:	e5 59       	subi	r30, 0x95	; 149
    2ae6:	fe 4d       	sbci	r31, 0xDE	; 222
    2ae8:	e0 80       	ld	r14, Z
    2aea:	f1 80       	ldd	r15, Z+1	; 0x01
    2aec:	02 81       	ldd	r16, Z+2	; 0x02
    2aee:	13 81       	ldd	r17, Z+3	; 0x03
    2af0:	80 91 78 21 	lds	r24, 0x2178
    2af4:	a8 2f       	mov	r26, r24
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	ab 83       	std	Y+3, r26	; 0x03
    2afa:	bc 83       	std	Y+4, r27	; 0x04
    2afc:	fd 01       	movw	r30, r26
    2afe:	ee 0f       	add	r30, r30
    2b00:	ff 1f       	adc	r31, r31
    2b02:	ee 0f       	add	r30, r30
    2b04:	ff 1f       	adc	r31, r31
    2b06:	e5 59       	subi	r30, 0x95	; 149
    2b08:	fe 4d       	sbci	r31, 0xDE	; 222
    2b0a:	20 81       	ld	r18, Z
    2b0c:	31 81       	ldd	r19, Z+1	; 0x01
    2b0e:	42 81       	ldd	r20, Z+2	; 0x02
    2b10:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    2b12:	80 91 79 21 	lds	r24, 0x2179
    2b16:	28 2e       	mov	r2, r24
    2b18:	33 24       	eor	r3, r3
    2b1a:	f1 01       	movw	r30, r2
    2b1c:	ee 0f       	add	r30, r30
    2b1e:	ff 1f       	adc	r31, r31
    2b20:	ee 0f       	add	r30, r30
    2b22:	ff 1f       	adc	r31, r31
    2b24:	e6 5d       	subi	r30, 0xD6	; 214
    2b26:	fe 4d       	sbci	r31, 0xDE	; 222
    2b28:	85 a9       	ldd	r24, Z+53	; 0x35
    2b2a:	96 a9       	ldd	r25, Z+54	; 0x36
    2b2c:	a7 a9       	ldd	r26, Z+55	; 0x37
    2b2e:	b0 ad       	ldd	r27, Z+56	; 0x38
    2b30:	8c 8b       	std	Y+20, r24	; 0x14
    2b32:	9d 8b       	std	Y+21, r25	; 0x15
    2b34:	ae 8b       	std	Y+22, r26	; 0x16
    2b36:	bf 8b       	std	Y+23, r27	; 0x17
    2b38:	a1 a4       	ldd	r10, Z+41	; 0x29
    2b3a:	b2 a4       	ldd	r11, Z+42	; 0x2a
    2b3c:	c3 a4       	ldd	r12, Z+43	; 0x2b
    2b3e:	d4 a4       	ldd	r13, Z+44	; 0x2c

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2b40:	90 91 36 21 	lds	r25, 0x2136
    2b44:	9b 8b       	std	Y+19, r25	; 0x13
    2b46:	99 23       	and	r25, r25
    2b48:	49 f0       	breq	.+18     	; 0x2b5c <gc_execute_block+0x934>
    2b4a:	40 90 4f 21 	lds	r4, 0x214F
    2b4e:	50 90 50 21 	lds	r5, 0x2150
    2b52:	60 90 51 21 	lds	r6, 0x2151
    2b56:	70 90 52 21 	lds	r7, 0x2152
    2b5a:	08 c0       	rjmp	.+16     	; 0x2b6c <gc_execute_block+0x944>
    2b5c:	40 90 43 21 	lds	r4, 0x2143
    2b60:	50 90 44 21 	lds	r5, 0x2144
    2b64:	60 90 45 21 	lds	r6, 0x2145
    2b68:	70 90 46 21 	lds	r7, 0x2146
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2b6c:	c8 01       	movw	r24, r16
    2b6e:	b7 01       	movw	r22, r14
    2b70:	0e 94 20 44 	call	0x8840	; 0x8840 <hypot>
    2b74:	7b 01       	movw	r14, r22
    2b76:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc(theta_start, angular_travel, radius_tmp, depth, 
    2b78:	ad b7       	in	r26, 0x3d	; 61
    2b7a:	be b7       	in	r27, 0x3e	; 62
    2b7c:	1a 97       	sbiw	r26, 0x0a	; 10
    2b7e:	ad bf       	out	0x3d, r26	; 61
    2b80:	be bf       	out	0x3e, r27	; 62
    2b82:	8d b6       	in	r8, 0x3d	; 61
    2b84:	9e b6       	in	r9, 0x3e	; 62
    2b86:	08 94       	sec
    2b88:	81 1c       	adc	r8, r1
    2b8a:	91 1c       	adc	r9, r1
    2b8c:	6c 89       	ldd	r22, Y+20	; 0x14
    2b8e:	7d 89       	ldd	r23, Y+21	; 0x15
    2b90:	8e 89       	ldd	r24, Y+22	; 0x16
    2b92:	9f 89       	ldd	r25, Y+23	; 0x17
    2b94:	a6 01       	movw	r20, r12
    2b96:	95 01       	movw	r18, r10
    2b98:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    2b9c:	5b 01       	movw	r10, r22
    2b9e:	6c 01       	movw	r12, r24
    2ba0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ba2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ba4:	f4 01       	movw	r30, r8
    2ba6:	20 83       	st	Z, r18
    2ba8:	31 83       	std	Z+1, r19	; 0x01
    2baa:	22 82       	std	Z+2, r2	; 0x02
    2bac:	33 82       	std	Z+3, r3	; 0x03
    2bae:	d4 01       	movw	r26, r8
    2bb0:	14 96       	adiw	r26, 0x04	; 4
    2bb2:	4d 92       	st	X+, r4
    2bb4:	5d 92       	st	X+, r5
    2bb6:	6d 92       	st	X+, r6
    2bb8:	7c 92       	st	X, r7
    2bba:	17 97       	sbiw	r26, 0x07	; 7
    2bbc:	eb 89       	ldd	r30, Y+19	; 0x13
    2bbe:	18 96       	adiw	r26, 0x08	; 8
    2bc0:	ec 93       	st	X, r30
    2bc2:	18 97       	sbiw	r26, 0x08	; 8
    2bc4:	19 96       	adiw	r26, 0x09	; 9
    2bc6:	1c 92       	st	X, r1
    2bc8:	6f 85       	ldd	r22, Y+15	; 0x0f
    2bca:	78 89       	ldd	r23, Y+16	; 0x10
    2bcc:	89 89       	ldd	r24, Y+17	; 0x11
    2bce:	9a 89       	ldd	r25, Y+18	; 0x12
    2bd0:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bd2:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bd4:	4d 85       	ldd	r20, Y+13	; 0x0d
    2bd6:	5e 85       	ldd	r21, Y+14	; 0x0e
    2bd8:	8d 80       	ldd	r8, Y+5	; 0x05
    2bda:	9e 80       	ldd	r9, Y+6	; 0x06
    2bdc:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <mc_arc>
	// has completed the arc. So the endpoint should be passed to the generator and
	// executed there.
//	gc.status = mc_line(gc.target[X_AXIS], gc.target[Y_AXIS], gc.target[Z_AXIS], 
//					   (gc.inverse_feed_rate_mode) ? gc.inverse_feed_rate : 
//						gc.feed_rate, gc.inverse_feed_rate_mode);
	return (gc.status);
    2be0:	2d b7       	in	r18, 0x3d	; 61
    2be2:	3e b7       	in	r19, 0x3e	; 62
    2be4:	26 5f       	subi	r18, 0xF6	; 246
    2be6:	3f 4f       	sbci	r19, 0xFF	; 255
    2be8:	2d bf       	out	0x3d, r18	; 61
    2bea:	3e bf       	out	0x3e, r19	; 62
										gc.inverse_feed_rate_mode); 
					break;
				}

				case MOTION_MODE_CW_ARC: case MOTION_MODE_CCW_ARC: {
					gc.status = _gc_compute_arc(); 
    2bec:	80 93 2a 21 	sts	0x212A, r24
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_EAGAIN)) {
    2bf0:	80 91 2a 21 	lds	r24, 0x212A
    2bf4:	82 30       	cpi	r24, 0x02	; 2
    2bf6:	48 f4       	brcc	.+18     	; 0x2c0a <gc_execute_block+0x9e2>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2bf8:	e3 e5       	ldi	r30, 0x53	; 83
    2bfa:	f1 e2       	ldi	r31, 0x21	; 33
    2bfc:	df 01       	movw	r26, r30
    2bfe:	1c 96       	adiw	r26, 0x0c	; 12
    2c00:	9c e0       	ldi	r25, 0x0C	; 12
    2c02:	0d 90       	ld	r0, X+
    2c04:	01 92       	st	Z+, r0
    2c06:	91 50       	subi	r25, 0x01	; 1
    2c08:	e1 f7       	brne	.-8      	; 0x2c02 <gc_execute_block+0x9da>
	};
	return(gc.status);
}
    2c0a:	68 96       	adiw	r28, 0x18	; 24
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	de bf       	out	0x3e, r29	; 62
    2c10:	cf 91       	pop	r28
    2c12:	df 91       	pop	r29
    2c14:	1f 91       	pop	r17
    2c16:	0f 91       	pop	r16
    2c18:	ff 90       	pop	r15
    2c1a:	ef 90       	pop	r14
    2c1c:	df 90       	pop	r13
    2c1e:	cf 90       	pop	r12
    2c20:	bf 90       	pop	r11
    2c22:	af 90       	pop	r10
    2c24:	9f 90       	pop	r9
    2c26:	8f 90       	pop	r8
    2c28:	7f 90       	pop	r7
    2c2a:	6f 90       	pop	r6
    2c2c:	5f 90       	pop	r5
    2c2e:	4f 90       	pop	r4
    2c30:	3f 90       	pop	r3
    2c32:	2f 90       	pop	r2
    2c34:	08 95       	ret

00002c36 <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2c36:	cf 93       	push	r28
    2c38:	df 93       	push	r29
    2c3a:	ec 01       	movw	r28, r24
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	10 c0       	rjmp	.+32     	; 0x2c62 <gc_gcode_parser+0x2c>
	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
		if (c <= ' ' ) {					// throw away WS & ctrl chars
    2c42:	e1 32       	cpi	r30, 0x21	; 33
    2c44:	70 f0       	brcs	.+28     	; 0x2c62 <gc_gcode_parser+0x2c>
			continue;
		} else if (c >= 'a' && c <= 'z') {	// convert lower to upper
    2c46:	8e 2f       	mov	r24, r30
    2c48:	81 56       	subi	r24, 0x61	; 97
    2c4a:	a9 2f       	mov	r26, r25
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	9f 5f       	subi	r25, 0xFF	; 255
    2c50:	8a 31       	cpi	r24, 0x1A	; 26
    2c52:	20 f4       	brcc	.+8      	; 0x2c5c <gc_gcode_parser+0x26>
			block[j++] = c-'a'+'A';
    2c54:	ac 0f       	add	r26, r28
    2c56:	bd 1f       	adc	r27, r29
    2c58:	e0 52       	subi	r30, 0x20	; 32
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <gc_gcode_parser+0x2a>
		} else {
			block[j++] = c;
    2c5c:	ac 0f       	add	r26, r28
    2c5e:	bd 1f       	adc	r27, r29
    2c60:	ec 93       	st	X, r30

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
    2c62:	fe 01       	movw	r30, r28
    2c64:	e2 0f       	add	r30, r18
    2c66:	f1 1d       	adc	r31, r1
    2c68:	e0 81       	ld	r30, Z
    2c6a:	2f 5f       	subi	r18, 0xFF	; 255
    2c6c:	ee 23       	and	r30, r30
    2c6e:	49 f7       	brne	.-46     	; 0x2c42 <gc_gcode_parser+0xc>
			block[j++] = c-'a'+'A';
		} else {
			block[j++] = c;
		}
	}
	block[j] = 0;
    2c70:	fe 01       	movw	r30, r28
    2c72:	e9 0f       	add	r30, r25
    2c74:	f1 1d       	adc	r31, r1
    2c76:	10 82       	st	Z, r1
{
	_gc_normalize_gcode_block(block);
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    2c78:	88 81       	ld	r24, Y
    2c7a:	88 32       	cpi	r24, 0x28	; 40
    2c7c:	61 f0       	breq	.+24     	; 0x2c96 <gc_gcode_parser+0x60>
		return(TG_OK);
	}
	if (block[0] == 'Q') { 					// quit
    2c7e:	81 35       	cpi	r24, 0x51	; 81
    2c80:	11 f4       	brne	.+4      	; 0x2c86 <gc_gcode_parser+0x50>
    2c82:	83 e0       	ldi	r24, 0x03	; 3
    2c84:	09 c0       	rjmp	.+18     	; 0x2c98 <gc_gcode_parser+0x62>
		return(TG_QUIT);
	} 
	if (block[0] == '/') { 					// ignore block delete
    2c86:	8f 32       	cpi	r24, 0x2F	; 47
    2c88:	31 f0       	breq	.+12     	; 0x2c96 <gc_gcode_parser+0x60>
		return(TG_OK);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2c8a:	ce 01       	movw	r24, r28
    2c8c:	0e 94 14 11 	call	0x2228	; 0x2228 <gc_execute_block>
    2c90:	80 93 2a 21 	sts	0x212A, r24
    2c94:	01 c0       	rjmp	.+2      	; 0x2c98 <gc_gcode_parser+0x62>
#ifdef __ECHO
	_gc_print_status(gc.status, block);
#endif
	return (gc.status);
    2c96:	80 e0       	ldi	r24, 0x00	; 0
}
    2c98:	df 91       	pop	r29
    2c9a:	cf 91       	pop	r28
    2c9c:	08 95       	ret

00002c9e <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2c9e:	cf 92       	push	r12
    2ca0:	df 92       	push	r13
    2ca2:	ef 92       	push	r14
    2ca4:	ff 92       	push	r15
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	c4 e8       	ldi	r28, 0x84	; 132
    2cb0:	d4 e2       	ldi	r29, 0x24	; 36
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    2cb2:	68 81       	ld	r22, Y
    2cb4:	70 e0       	ldi	r23, 0x00	; 0
    2cb6:	88 27       	eor	r24, r24
    2cb8:	77 fd       	sbrc	r23, 7
    2cba:	80 95       	com	r24
    2cbc:	98 2f       	mov	r25, r24
    2cbe:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    2cc2:	9b 01       	movw	r18, r22
    2cc4:	ac 01       	movw	r20, r24
    2cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc8:	78 85       	ldd	r23, Y+8	; 0x08
    2cca:	89 85       	ldd	r24, Y+9	; 0x09
    2ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cce:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    2cd2:	9b 01       	movw	r18, r22
    2cd4:	ac 01       	movw	r20, r24
    2cd6:	60 e0       	ldi	r22, 0x00	; 0
    2cd8:	70 e0       	ldi	r23, 0x00	; 0
    2cda:	84 eb       	ldi	r24, 0xB4	; 180
    2cdc:	93 e4       	ldi	r25, 0x43	; 67
    2cde:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    2ce2:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ce4:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ce6:	4d 85       	ldd	r20, Y+13	; 0x0d
    2ce8:	5e 85       	ldd	r21, Y+14	; 0x0e
    2cea:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    2cee:	6b 8b       	std	Y+19, r22	; 0x13
    2cf0:	7c 8b       	std	Y+20, r23	; 0x14
    2cf2:	8d 8b       	std	Y+21, r24	; 0x15
    2cf4:	9e 8b       	std	Y+22, r25	; 0x16
    2cf6:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (uint8_t i=X; i<=A; i++) {
    2cf8:	84 e2       	ldi	r24, 0x24	; 36
    2cfa:	c4 3e       	cpi	r28, 0xE4	; 228
    2cfc:	d8 07       	cpc	r29, r24
    2cfe:	c9 f6       	brne	.-78     	; 0x2cb2 <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X].feed_steps_sec * cfg.a[X].microstep) / 
    2d00:	00 91 84 24 	lds	r16, 0x2484
    2d04:	10 e0       	ldi	r17, 0x00	; 0
    2d06:	b8 01       	movw	r22, r16
    2d08:	88 27       	eor	r24, r24
    2d0a:	77 fd       	sbrc	r23, 7
    2d0c:	80 95       	com	r24
    2d0e:	98 2f       	mov	r25, r24
    2d10:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    2d14:	9b 01       	movw	r18, r22
    2d16:	ac 01       	movw	r20, r24
    2d18:	60 91 8b 24 	lds	r22, 0x248B
    2d1c:	70 91 8c 24 	lds	r23, 0x248C
    2d20:	80 91 8d 24 	lds	r24, 0x248D
    2d24:	90 91 8e 24 	lds	r25, 0x248E
    2d28:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    2d2c:	9b 01       	movw	r18, r22
    2d2e:	ac 01       	movw	r20, r24
    2d30:	60 e0       	ldi	r22, 0x00	; 0
    2d32:	70 e0       	ldi	r23, 0x00	; 0
    2d34:	84 eb       	ldi	r24, 0xB4	; 180
    2d36:	93 e4       	ldi	r25, 0x43	; 67
    2d38:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    2d3c:	6b 01       	movw	r12, r22
    2d3e:	7c 01       	movw	r14, r24
    2d40:	80 91 89 24 	lds	r24, 0x2489
    2d44:	90 91 8a 24 	lds	r25, 0x248A
    2d48:	08 9f       	mul	r16, r24
    2d4a:	b0 01       	movw	r22, r0
    2d4c:	09 9f       	mul	r16, r25
    2d4e:	70 0d       	add	r23, r0
    2d50:	18 9f       	mul	r17, r24
    2d52:	70 0d       	add	r23, r0
    2d54:	11 24       	eor	r1, r1
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	0e 94 c3 42 	call	0x8586	; 0x8586 <__floatunsisf>
    2d5e:	a7 01       	movw	r20, r14
    2d60:	96 01       	movw	r18, r12
    2d62:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    2d66:	60 93 7c 24 	sts	0x247C, r22
    2d6a:	70 93 7d 24 	sts	0x247D, r23
    2d6e:	80 93 7e 24 	sts	0x247E, r24
    2d72:	90 93 7f 24 	sts	0x247F, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X].seek_steps_sec * cfg.a[X].microstep) / 
    2d76:	80 91 87 24 	lds	r24, 0x2487
    2d7a:	90 91 88 24 	lds	r25, 0x2488
    2d7e:	08 9f       	mul	r16, r24
    2d80:	b0 01       	movw	r22, r0
    2d82:	09 9f       	mul	r16, r25
    2d84:	70 0d       	add	r23, r0
    2d86:	18 9f       	mul	r17, r24
    2d88:	70 0d       	add	r23, r0
    2d8a:	11 24       	eor	r1, r1
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	0e 94 c3 42 	call	0x8586	; 0x8586 <__floatunsisf>
    2d94:	a7 01       	movw	r20, r14
    2d96:	96 01       	movw	r18, r12
    2d98:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    2d9c:	60 93 80 24 	sts	0x2480, r22
    2da0:	70 93 81 24 	sts	0x2481, r23
    2da4:	80 93 82 24 	sts	0x2482, r24
    2da8:	90 93 83 24 	sts	0x2483, r25
							(360/(cfg.a[X].degree_per_step / cfg.a[X].microstep));
}
    2dac:	df 91       	pop	r29
    2dae:	cf 91       	pop	r28
    2db0:	1f 91       	pop	r17
    2db2:	0f 91       	pop	r16
    2db4:	ff 90       	pop	r15
    2db6:	ef 90       	pop	r14
    2db8:	df 90       	pop	r13
    2dba:	cf 90       	pop	r12
    2dbc:	08 95       	ret

00002dbe <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = EEPROM_DATA_VERSION;
    2dbe:	e6 e7       	ldi	r30, 0x76	; 118
    2dc0:	f4 e2       	ldi	r31, 0x24	; 36
    2dc2:	84 e6       	ldi	r24, 0x64	; 100
    2dc4:	80 93 76 24 	sts	0x2476, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2dc8:	8a e0       	ldi	r24, 0x0A	; 10
    2dca:	97 ed       	ldi	r25, 0xD7	; 215
    2dcc:	a3 e2       	ldi	r26, 0x23	; 35
    2dce:	bc e3       	ldi	r27, 0x3C	; 60
    2dd0:	80 93 78 24 	sts	0x2478, r24
    2dd4:	90 93 79 24 	sts	0x2479, r25
    2dd8:	a0 93 7a 24 	sts	0x247A, r26
    2ddc:	b0 93 7b 24 	sts	0x247B, r27

	cfg.a[X].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2de0:	8c ed       	ldi	r24, 0xDC	; 220
    2de2:	95 e0       	ldi	r25, 0x05	; 5
    2de4:	80 93 87 24 	sts	0x2487, r24
    2de8:	90 93 88 24 	sts	0x2488, r25
	cfg.a[Y].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2dec:	80 93 9f 24 	sts	0x249F, r24
    2df0:	90 93 a0 24 	sts	0x24A0, r25
	cfg.a[Z].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2df4:	80 93 b7 24 	sts	0x24B7, r24
    2df8:	90 93 b8 24 	sts	0x24B8, r25
	cfg.a[A].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2dfc:	80 93 cf 24 	sts	0x24CF, r24
    2e00:	90 93 d0 24 	sts	0x24D0, r25

	cfg.a[X].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2e04:	80 93 89 24 	sts	0x2489, r24
    2e08:	90 93 8a 24 	sts	0x248A, r25
	cfg.a[Y].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2e0c:	80 93 a1 24 	sts	0x24A1, r24
    2e10:	90 93 a2 24 	sts	0x24A2, r25
	cfg.a[Z].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2e14:	80 93 b9 24 	sts	0x24B9, r24
    2e18:	90 93 ba 24 	sts	0x24BA, r25
	cfg.a[A].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2e1c:	80 93 d1 24 	sts	0x24D1, r24
    2e20:	90 93 d2 24 	sts	0x24D2, r25

	cfg.a[X].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2e24:	86 e6       	ldi	r24, 0x66	; 102
    2e26:	96 e6       	ldi	r25, 0x66	; 102
    2e28:	a6 ee       	ldi	r26, 0xE6	; 230
    2e2a:	bf e3       	ldi	r27, 0x3F	; 63
    2e2c:	80 93 8b 24 	sts	0x248B, r24
    2e30:	90 93 8c 24 	sts	0x248C, r25
    2e34:	a0 93 8d 24 	sts	0x248D, r26
    2e38:	b0 93 8e 24 	sts	0x248E, r27
	cfg.a[Y].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2e3c:	80 93 a3 24 	sts	0x24A3, r24
    2e40:	90 93 a4 24 	sts	0x24A4, r25
    2e44:	a0 93 a5 24 	sts	0x24A5, r26
    2e48:	b0 93 a6 24 	sts	0x24A6, r27
	cfg.a[Z].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2e4c:	80 93 bb 24 	sts	0x24BB, r24
    2e50:	90 93 bc 24 	sts	0x24BC, r25
    2e54:	a0 93 bd 24 	sts	0x24BD, r26
    2e58:	b0 93 be 24 	sts	0x24BE, r27
	cfg.a[A].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2e5c:	80 93 d3 24 	sts	0x24D3, r24
    2e60:	90 93 d4 24 	sts	0x24D4, r25
    2e64:	a0 93 d5 24 	sts	0x24D5, r26
    2e68:	b0 93 d6 24 	sts	0x24D6, r27

	cfg.a[X].mm_per_rev = X_MM_PER_REVOLUTION;
    2e6c:	8c e5       	ldi	r24, 0x5C	; 92
    2e6e:	9f e8       	ldi	r25, 0x8F	; 143
    2e70:	a2 ea       	ldi	r26, 0xA2	; 162
    2e72:	bf e3       	ldi	r27, 0x3F	; 63
    2e74:	80 93 8f 24 	sts	0x248F, r24
    2e78:	90 93 90 24 	sts	0x2490, r25
    2e7c:	a0 93 91 24 	sts	0x2491, r26
    2e80:	b0 93 92 24 	sts	0x2492, r27
	cfg.a[Y].mm_per_rev = Y_MM_PER_REVOLUTION;
    2e84:	80 93 a7 24 	sts	0x24A7, r24
    2e88:	90 93 a8 24 	sts	0x24A8, r25
    2e8c:	a0 93 a9 24 	sts	0x24A9, r26
    2e90:	b0 93 aa 24 	sts	0x24AA, r27
	cfg.a[Z].mm_per_rev = Z_MM_PER_REVOLUTION;
    2e94:	80 93 bf 24 	sts	0x24BF, r24
    2e98:	90 93 c0 24 	sts	0x24C0, r25
    2e9c:	a0 93 c1 24 	sts	0x24C1, r26
    2ea0:	b0 93 c2 24 	sts	0x24C2, r27
	cfg.a[A].mm_per_rev = A_MM_PER_REVOLUTION;
    2ea4:	80 93 d7 24 	sts	0x24D7, r24
    2ea8:	90 93 d8 24 	sts	0x24D8, r25
    2eac:	a0 93 d9 24 	sts	0x24D9, r26
    2eb0:	b0 93 da 24 	sts	0x24DA, r27
	
	cfg.a[X].mm_travel = X_MM_TRAVEL;
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	a8 ec       	ldi	r26, 0xC8	; 200
    2eba:	b3 e4       	ldi	r27, 0x43	; 67
    2ebc:	80 93 93 24 	sts	0x2493, r24
    2ec0:	90 93 94 24 	sts	0x2494, r25
    2ec4:	a0 93 95 24 	sts	0x2495, r26
    2ec8:	b0 93 96 24 	sts	0x2496, r27
	cfg.a[Y].mm_travel = Y_MM_TRAVEL;
    2ecc:	80 93 ab 24 	sts	0x24AB, r24
    2ed0:	90 93 ac 24 	sts	0x24AC, r25
    2ed4:	a0 93 ad 24 	sts	0x24AD, r26
    2ed8:	b0 93 ae 24 	sts	0x24AE, r27
	cfg.a[Z].mm_travel = Z_MM_TRAVEL;
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	a6 e9       	ldi	r26, 0x96	; 150
    2ee2:	b3 e4       	ldi	r27, 0x43	; 67
    2ee4:	80 93 c3 24 	sts	0x24C3, r24
    2ee8:	90 93 c4 24 	sts	0x24C4, r25
    2eec:	a0 93 c5 24 	sts	0x24C5, r26
    2ef0:	b0 93 c6 24 	sts	0x24C6, r27
	cfg.a[A].mm_travel = A_MM_TRAVEL;
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	a0 e8       	ldi	r26, 0x80	; 128
    2efa:	bf eb       	ldi	r27, 0xBF	; 191
    2efc:	80 93 db 24 	sts	0x24DB, r24
    2f00:	90 93 dc 24 	sts	0x24DC, r25
    2f04:	a0 93 dd 24 	sts	0x24DD, r26
    2f08:	b0 93 de 24 	sts	0x24DE, r27
	
	cfg.a[X].microstep = X_MICROSTEPS;
    2f0c:	88 e0       	ldi	r24, 0x08	; 8
    2f0e:	80 93 84 24 	sts	0x2484, r24
	cfg.a[Y].microstep = Y_MICROSTEPS;
    2f12:	80 93 9c 24 	sts	0x249C, r24
	cfg.a[Z].microstep = Z_MICROSTEPS;
    2f16:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A].microstep = A_MICROSTEPS;
    2f18:	80 93 cc 24 	sts	0x24CC, r24

	cfg.a[X].polarity = X_POLARITY;
    2f1c:	10 92 86 24 	sts	0x2486, r1
	cfg.a[Y].polarity = Y_POLARITY;
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	80 93 9e 24 	sts	0x249E, r24
	cfg.a[Z].polarity = Z_POLARITY;
    2f26:	10 92 b6 24 	sts	0x24B6, r1
	cfg.a[A].polarity = A_POLARITY;
    2f2a:	10 92 ce 24 	sts	0x24CE, r1

	cfg.a[X].limit_enable = X_LIMIT_ENABLE;
    2f2e:	80 93 9b 24 	sts	0x249B, r24
	cfg.a[Y].limit_enable = Y_LIMIT_ENABLE;
    2f32:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z].limit_enable = Z_LIMIT_ENABLE;
    2f34:	80 93 cb 24 	sts	0x24CB, r24
	cfg.a[A].limit_enable = A_LIMIT_ENABLE;
    2f38:	10 92 e3 24 	sts	0x24E3, r1

	cfg.a[X].low_pwr_idle = X_LOW_POWER_IDLE;
    2f3c:	80 93 85 24 	sts	0x2485, r24
	cfg.a[Y].low_pwr_idle = Y_LOW_POWER_IDLE;
    2f40:	80 93 9d 24 	sts	0x249D, r24
	cfg.a[Z].low_pwr_idle = Z_LOW_POWER_IDLE;
    2f44:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A].low_pwr_idle = A_LOW_POWER_IDLE;
    2f46:	80 93 cd 24 	sts	0x24CD, r24

	_cfg_computed();		// generate computed values from the above
    2f4a:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <_cfg_computed>
}
    2f4e:	08 95       	ret

00002f50 <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2f50:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <cfg_reset>
}
    2f54:	08 95       	ret

00002f56 <_cfg_print_status>:
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    2f56:	89 30       	cpi	r24, 0x09	; 9
    2f58:	31 f1       	breq	.+76     	; 0x2fa6 <_cfg_print_status+0x50>
    2f5a:	8a 30       	cpi	r24, 0x0A	; 10
    2f5c:	30 f4       	brcc	.+12     	; 0x2f6a <_cfg_print_status+0x14>
    2f5e:	81 30       	cpi	r24, 0x01	; 1
    2f60:	59 f0       	breq	.+22     	; 0x2f78 <_cfg_print_status+0x22>
    2f62:	83 30       	cpi	r24, 0x03	; 3
    2f64:	09 f0       	breq	.+2      	; 0x2f68 <_cfg_print_status+0x12>
    2f66:	45 c0       	rjmp	.+138    	; 0x2ff2 <_cfg_print_status+0x9c>
    2f68:	0c c0       	rjmp	.+24     	; 0x2f82 <_cfg_print_status+0x2c>
    2f6a:	8e 30       	cpi	r24, 0x0E	; 14
    2f6c:	09 f1       	breq	.+66     	; 0x2fb0 <_cfg_print_status+0x5a>
    2f6e:	80 31       	cpi	r24, 0x10	; 16
    2f70:	81 f1       	breq	.+96     	; 0x2fd2 <_cfg_print_status+0x7c>
    2f72:	8d 30       	cpi	r24, 0x0D	; 13
    2f74:	f1 f5       	brne	.+124    	; 0x2ff2 <_cfg_print_status+0x9c>
    2f76:	12 c0       	rjmp	.+36     	; 0x2f9c <_cfg_print_status+0x46>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_EAGAIN: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    2f78:	00 d0       	rcall	.+0      	; 0x2f7a <_cfg_print_status+0x24>
    2f7a:	0f 92       	push	r0
    2f7c:	85 e1       	ldi	r24, 0x15	; 21
    2f7e:	94 e0       	ldi	r25, 0x04	; 4
    2f80:	1b c0       	rjmp	.+54     	; 0x2fb8 <_cfg_print_status+0x62>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    2f82:	0f 92       	push	r0
    2f84:	0f 92       	push	r0
    2f86:	8f ef       	ldi	r24, 0xFF	; 255
    2f88:	93 e0       	ldi	r25, 0x03	; 3
    2f8a:	ed b7       	in	r30, 0x3d	; 61
    2f8c:	fe b7       	in	r31, 0x3e	; 62
    2f8e:	81 83       	std	Z+1, r24	; 0x01
    2f90:	92 83       	std	Z+2, r25	; 0x02
    2f92:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
    2f96:	0f 90       	pop	r0
    2f98:	0f 90       	pop	r0
    2f9a:	08 95       	ret
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2f9c:	00 d0       	rcall	.+0      	; 0x2f9e <_cfg_print_status+0x48>
    2f9e:	0f 92       	push	r0
    2fa0:	88 ee       	ldi	r24, 0xE8	; 232
    2fa2:	93 e0       	ldi	r25, 0x03	; 3
    2fa4:	09 c0       	rjmp	.+18     	; 0x2fb8 <_cfg_print_status+0x62>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    2fa6:	00 d0       	rcall	.+0      	; 0x2fa8 <_cfg_print_status+0x52>
    2fa8:	0f 92       	push	r0
    2faa:	8e ec       	ldi	r24, 0xCE	; 206
    2fac:	93 e0       	ldi	r25, 0x03	; 3
    2fae:	04 c0       	rjmp	.+8      	; 0x2fb8 <_cfg_print_status+0x62>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2fb0:	00 d0       	rcall	.+0      	; 0x2fb2 <_cfg_print_status+0x5c>
    2fb2:	0f 92       	push	r0
    2fb4:	84 eb       	ldi	r24, 0xB4	; 180
    2fb6:	93 e0       	ldi	r25, 0x03	; 3
    2fb8:	ed b7       	in	r30, 0x3d	; 61
    2fba:	fe b7       	in	r31, 0x3e	; 62
    2fbc:	81 83       	std	Z+1, r24	; 0x01
    2fbe:	92 83       	std	Z+2, r25	; 0x02
    2fc0:	63 83       	std	Z+3, r22	; 0x03
    2fc2:	74 83       	std	Z+4, r23	; 0x04
    2fc4:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	08 95       	ret
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    2fd2:	00 d0       	rcall	.+0      	; 0x2fd4 <_cfg_print_status+0x7e>
    2fd4:	0f 92       	push	r0
    2fd6:	89 e9       	ldi	r24, 0x99	; 153
    2fd8:	93 e0       	ldi	r25, 0x03	; 3
    2fda:	ed b7       	in	r30, 0x3d	; 61
    2fdc:	fe b7       	in	r31, 0x3e	; 62
    2fde:	81 83       	std	Z+1, r24	; 0x01
    2fe0:	92 83       	std	Z+2, r25	; 0x02
    2fe2:	63 83       	std	Z+3, r22	; 0x03
    2fe4:	74 83       	std	Z+4, r23	; 0x04
    2fe6:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
    2fea:	0f 90       	pop	r0
    2fec:	0f 90       	pop	r0
    2fee:	0f 90       	pop	r0
    2ff0:	0f 90       	pop	r0
    2ff2:	08 95       	ret

00002ff4 <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    2ff4:	ef 92       	push	r14
    2ff6:	ff 92       	push	r15
    2ff8:	0f 93       	push	r16
    2ffa:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    2ffc:	e8 2e       	mov	r14, r24
    2ffe:	ff 24       	eor	r15, r15
    3000:	87 01       	movw	r16, r14
    3002:	00 0f       	add	r16, r16
    3004:	11 1f       	adc	r17, r17
    3006:	f8 01       	movw	r30, r16
    3008:	ed 5b       	subi	r30, 0xBD	; 189
    300a:	fd 4f       	sbci	r31, 0xFD	; 253
    300c:	25 91       	lpm	r18, Z+
    300e:	34 91       	lpm	r19, Z+
    3010:	00 d0       	rcall	.+0      	; 0x3012 <_cfg_dump_axis+0x1e>
    3012:	0f 92       	push	r0
    3014:	88 e3       	ldi	r24, 0x38	; 56
    3016:	96 e0       	ldi	r25, 0x06	; 6
    3018:	ad b7       	in	r26, 0x3d	; 61
    301a:	be b7       	in	r27, 0x3e	; 62
    301c:	11 96       	adiw	r26, 0x01	; 1
    301e:	8d 93       	st	X+, r24
    3020:	9c 93       	st	X, r25
    3022:	12 97       	sbiw	r26, 0x02	; 2
    3024:	13 96       	adiw	r26, 0x03	; 3
    3026:	2d 93       	st	X+, r18
    3028:	3c 93       	st	X, r19
    302a:	14 97       	sbiw	r26, 0x04	; 4
    302c:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	96 e0       	ldi	r25, 0x06	; 6
    3034:	ed b7       	in	r30, 0x3d	; 61
    3036:	fe b7       	in	r31, 0x3e	; 62
    3038:	81 83       	std	Z+1, r24	; 0x01
    303a:	92 83       	std	Z+2, r25	; 0x02
    303c:	0e 0d       	add	r16, r14
    303e:	1f 1d       	adc	r17, r15
    3040:	83 e0       	ldi	r24, 0x03	; 3
    3042:	00 0f       	add	r16, r16
    3044:	11 1f       	adc	r17, r17
    3046:	8a 95       	dec	r24
    3048:	e1 f7       	brne	.-8      	; 0x3042 <_cfg_dump_axis+0x4e>
    304a:	0a 58       	subi	r16, 0x8A	; 138
    304c:	1b 4d       	sbci	r17, 0xDB	; 219
    304e:	d8 01       	movw	r26, r16
    3050:	51 96       	adiw	r26, 0x11	; 17
    3052:	8d 91       	ld	r24, X+
    3054:	9c 91       	ld	r25, X
    3056:	52 97       	sbiw	r26, 0x12	; 18
    3058:	83 83       	std	Z+3, r24	; 0x03
    305a:	94 83       	std	Z+4, r25	; 0x04
    305c:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    3060:	88 ec       	ldi	r24, 0xC8	; 200
    3062:	95 e0       	ldi	r25, 0x05	; 5
    3064:	ed b7       	in	r30, 0x3d	; 61
    3066:	fe b7       	in	r31, 0x3e	; 62
    3068:	81 83       	std	Z+1, r24	; 0x01
    306a:	92 83       	std	Z+2, r25	; 0x02
    306c:	d8 01       	movw	r26, r16
    306e:	53 96       	adiw	r26, 0x13	; 19
    3070:	8d 91       	ld	r24, X+
    3072:	9c 91       	ld	r25, X
    3074:	54 97       	sbiw	r26, 0x14	; 20
    3076:	83 83       	std	Z+3, r24	; 0x03
    3078:	94 83       	std	Z+4, r25	; 0x04
    307a:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    307e:	ed b7       	in	r30, 0x3d	; 61
    3080:	fe b7       	in	r31, 0x3e	; 62
    3082:	31 96       	adiw	r30, 0x01	; 1
    3084:	85 e9       	ldi	r24, 0x95	; 149
    3086:	95 e0       	ldi	r25, 0x05	; 5
    3088:	ad b7       	in	r26, 0x3d	; 61
    308a:	be b7       	in	r27, 0x3e	; 62
    308c:	11 96       	adiw	r26, 0x01	; 1
    308e:	8d 93       	st	X+, r24
    3090:	9c 93       	st	X, r25
    3092:	12 97       	sbiw	r26, 0x02	; 2
    3094:	d8 01       	movw	r26, r16
    3096:	1e 96       	adiw	r26, 0x0e	; 14
    3098:	8c 91       	ld	r24, X
    309a:	82 83       	std	Z+2, r24	; 0x02
    309c:	13 82       	std	Z+3, r1	; 0x03
    309e:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    30a2:	0f 92       	push	r0
    30a4:	0f 92       	push	r0
    30a6:	8e e5       	ldi	r24, 0x5E	; 94
    30a8:	95 e0       	ldi	r25, 0x05	; 5
    30aa:	ed b7       	in	r30, 0x3d	; 61
    30ac:	fe b7       	in	r31, 0x3e	; 62
    30ae:	81 83       	std	Z+1, r24	; 0x01
    30b0:	92 83       	std	Z+2, r25	; 0x02
    30b2:	f8 01       	movw	r30, r16
    30b4:	85 89       	ldd	r24, Z+21	; 0x15
    30b6:	96 89       	ldd	r25, Z+22	; 0x16
    30b8:	a7 89       	ldd	r26, Z+23	; 0x17
    30ba:	b0 8d       	ldd	r27, Z+24	; 0x18
    30bc:	ed b7       	in	r30, 0x3d	; 61
    30be:	fe b7       	in	r31, 0x3e	; 62
    30c0:	83 83       	std	Z+3, r24	; 0x03
    30c2:	94 83       	std	Z+4, r25	; 0x04
    30c4:	a5 83       	std	Z+5, r26	; 0x05
    30c6:	b6 83       	std	Z+6, r27	; 0x06
    30c8:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    30cc:	8b e2       	ldi	r24, 0x2B	; 43
    30ce:	95 e0       	ldi	r25, 0x05	; 5
    30d0:	ad b7       	in	r26, 0x3d	; 61
    30d2:	be b7       	in	r27, 0x3e	; 62
    30d4:	11 96       	adiw	r26, 0x01	; 1
    30d6:	8d 93       	st	X+, r24
    30d8:	9c 93       	st	X, r25
    30da:	12 97       	sbiw	r26, 0x02	; 2
    30dc:	f8 01       	movw	r30, r16
    30de:	81 8d       	ldd	r24, Z+25	; 0x19
    30e0:	92 8d       	ldd	r25, Z+26	; 0x1a
    30e2:	a3 8d       	ldd	r26, Z+27	; 0x1b
    30e4:	b4 8d       	ldd	r27, Z+28	; 0x1c
    30e6:	ed b7       	in	r30, 0x3d	; 61
    30e8:	fe b7       	in	r31, 0x3e	; 62
    30ea:	83 83       	std	Z+3, r24	; 0x03
    30ec:	94 83       	std	Z+4, r25	; 0x04
    30ee:	a5 83       	std	Z+5, r26	; 0x05
    30f0:	b6 83       	std	Z+6, r27	; 0x06
    30f2:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    30f6:	88 ef       	ldi	r24, 0xF8	; 248
    30f8:	94 e0       	ldi	r25, 0x04	; 4
    30fa:	ad b7       	in	r26, 0x3d	; 61
    30fc:	be b7       	in	r27, 0x3e	; 62
    30fe:	11 96       	adiw	r26, 0x01	; 1
    3100:	8d 93       	st	X+, r24
    3102:	9c 93       	st	X, r25
    3104:	12 97       	sbiw	r26, 0x02	; 2
    3106:	f8 01       	movw	r30, r16
    3108:	85 8d       	ldd	r24, Z+29	; 0x1d
    310a:	96 8d       	ldd	r25, Z+30	; 0x1e
    310c:	a7 8d       	ldd	r26, Z+31	; 0x1f
    310e:	b0 a1       	ldd	r27, Z+32	; 0x20
    3110:	ed b7       	in	r30, 0x3d	; 61
    3112:	fe b7       	in	r31, 0x3e	; 62
    3114:	83 83       	std	Z+3, r24	; 0x03
    3116:	94 83       	std	Z+4, r25	; 0x04
    3118:	a5 83       	std	Z+5, r26	; 0x05
    311a:	b6 83       	std	Z+6, r27	; 0x06
    311c:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    3120:	0f 90       	pop	r0
    3122:	0f 90       	pop	r0
    3124:	ed b7       	in	r30, 0x3d	; 61
    3126:	fe b7       	in	r31, 0x3e	; 62
    3128:	31 96       	adiw	r30, 0x01	; 1
    312a:	87 ec       	ldi	r24, 0xC7	; 199
    312c:	94 e0       	ldi	r25, 0x04	; 4
    312e:	ad b7       	in	r26, 0x3d	; 61
    3130:	be b7       	in	r27, 0x3e	; 62
    3132:	11 96       	adiw	r26, 0x01	; 1
    3134:	8d 93       	st	X+, r24
    3136:	9c 93       	st	X, r25
    3138:	12 97       	sbiw	r26, 0x02	; 2
    313a:	d8 01       	movw	r26, r16
    313c:	95 96       	adiw	r26, 0x25	; 37
    313e:	8c 91       	ld	r24, X
    3140:	82 83       	std	Z+2, r24	; 0x02
    3142:	13 82       	std	Z+3, r1	; 0x03
    3144:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    3148:	ed b7       	in	r30, 0x3d	; 61
    314a:	fe b7       	in	r31, 0x3e	; 62
    314c:	31 96       	adiw	r30, 0x01	; 1
    314e:	86 e9       	ldi	r24, 0x96	; 150
    3150:	94 e0       	ldi	r25, 0x04	; 4
    3152:	ad b7       	in	r26, 0x3d	; 61
    3154:	be b7       	in	r27, 0x3e	; 62
    3156:	11 96       	adiw	r26, 0x01	; 1
    3158:	8d 93       	st	X+, r24
    315a:	9c 93       	st	X, r25
    315c:	12 97       	sbiw	r26, 0x02	; 2
    315e:	d8 01       	movw	r26, r16
    3160:	1f 96       	adiw	r26, 0x0f	; 15
    3162:	8c 91       	ld	r24, X
    3164:	82 83       	std	Z+2, r24	; 0x02
    3166:	13 82       	std	Z+3, r1	; 0x03
    3168:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    316c:	ed b7       	in	r30, 0x3d	; 61
    316e:	fe b7       	in	r31, 0x3e	; 62
    3170:	31 96       	adiw	r30, 0x01	; 1
    3172:	86 e6       	ldi	r24, 0x66	; 102
    3174:	94 e0       	ldi	r25, 0x04	; 4
    3176:	ad b7       	in	r26, 0x3d	; 61
    3178:	be b7       	in	r27, 0x3e	; 62
    317a:	11 96       	adiw	r26, 0x01	; 1
    317c:	8d 93       	st	X+, r24
    317e:	9c 93       	st	X, r25
    3180:	12 97       	sbiw	r26, 0x02	; 2
    3182:	d8 01       	movw	r26, r16
    3184:	50 96       	adiw	r26, 0x10	; 16
    3186:	8c 91       	ld	r24, X
    3188:	82 83       	std	Z+2, r24	; 0x02
    318a:	13 82       	std	Z+3, r1	; 0x03
    318c:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    3190:	0f 92       	push	r0
    3192:	0f 92       	push	r0
    3194:	82 e3       	ldi	r24, 0x32	; 50
    3196:	94 e0       	ldi	r25, 0x04	; 4
    3198:	ed b7       	in	r30, 0x3d	; 61
    319a:	fe b7       	in	r31, 0x3e	; 62
    319c:	81 83       	std	Z+1, r24	; 0x01
    319e:	92 83       	std	Z+2, r25	; 0x02
    31a0:	f8 01       	movw	r30, r16
    31a2:	81 a1       	ldd	r24, Z+33	; 0x21
    31a4:	92 a1       	ldd	r25, Z+34	; 0x22
    31a6:	a3 a1       	ldd	r26, Z+35	; 0x23
    31a8:	b4 a1       	ldd	r27, Z+36	; 0x24
    31aa:	ed b7       	in	r30, 0x3d	; 61
    31ac:	fe b7       	in	r31, 0x3e	; 62
    31ae:	83 83       	std	Z+3, r24	; 0x03
    31b0:	94 83       	std	Z+4, r25	; 0x04
    31b2:	a5 83       	std	Z+5, r26	; 0x05
    31b4:	b6 83       	std	Z+6, r27	; 0x06
    31b6:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
    31ba:	8d b7       	in	r24, 0x3d	; 61
    31bc:	9e b7       	in	r25, 0x3e	; 62
    31be:	06 96       	adiw	r24, 0x06	; 6
    31c0:	8d bf       	out	0x3d, r24	; 61
    31c2:	9e bf       	out	0x3e, r25	; 62
}
    31c4:	1f 91       	pop	r17
    31c6:	0f 91       	pop	r16
    31c8:	ff 90       	pop	r15
    31ca:	ef 90       	pop	r14
    31cc:	08 95       	ret

000031ce <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    31ce:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    31d0:	00 d0       	rcall	.+0      	; 0x31d2 <cfg_dump+0x4>
    31d2:	0f 92       	push	r0
    31d4:	ed b7       	in	r30, 0x3d	; 61
    31d6:	fe b7       	in	r31, 0x3e	; 62
    31d8:	31 96       	adiw	r30, 0x01	; 1
    31da:	8c ef       	ldi	r24, 0xFC	; 252
    31dc:	96 e0       	ldi	r25, 0x06	; 6
    31de:	ad b7       	in	r26, 0x3d	; 61
    31e0:	be b7       	in	r27, 0x3e	; 62
    31e2:	11 96       	adiw	r26, 0x01	; 1
    31e4:	8d 93       	st	X+, r24
    31e6:	9c 93       	st	X, r25
    31e8:	12 97       	sbiw	r26, 0x02	; 2
    31ea:	80 91 76 24 	lds	r24, 0x2476
    31ee:	82 83       	std	Z+2, r24	; 0x02
    31f0:	13 82       	std	Z+3, r1	; 0x03
    31f2:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	85 ed       	ldi	r24, 0xD5	; 213
    31fc:	96 e0       	ldi	r25, 0x06	; 6
    31fe:	ed b7       	in	r30, 0x3d	; 61
    3200:	fe b7       	in	r31, 0x3e	; 62
    3202:	81 83       	std	Z+1, r24	; 0x01
    3204:	92 83       	std	Z+2, r25	; 0x02
    3206:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    320a:	00 d0       	rcall	.+0      	; 0x320c <cfg_dump+0x3e>
    320c:	0f 92       	push	r0
    320e:	8b ea       	ldi	r24, 0xAB	; 171
    3210:	96 e0       	ldi	r25, 0x06	; 6
    3212:	ad b7       	in	r26, 0x3d	; 61
    3214:	be b7       	in	r27, 0x3e	; 62
    3216:	11 96       	adiw	r26, 0x01	; 1
    3218:	8d 93       	st	X+, r24
    321a:	9c 93       	st	X, r25
    321c:	12 97       	sbiw	r26, 0x02	; 2
    321e:	80 91 78 24 	lds	r24, 0x2478
    3222:	90 91 79 24 	lds	r25, 0x2479
    3226:	a0 91 7a 24 	lds	r26, 0x247A
    322a:	b0 91 7b 24 	lds	r27, 0x247B
    322e:	ed b7       	in	r30, 0x3d	; 61
    3230:	fe b7       	in	r31, 0x3e	; 62
    3232:	83 83       	std	Z+3, r24	; 0x03
    3234:	94 83       	std	Z+4, r25	; 0x04
    3236:	a5 83       	std	Z+5, r26	; 0x05
    3238:	b6 83       	std	Z+6, r27	; 0x06
    323a:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    323e:	81 e8       	ldi	r24, 0x81	; 129
    3240:	96 e0       	ldi	r25, 0x06	; 6
    3242:	ad b7       	in	r26, 0x3d	; 61
    3244:	be b7       	in	r27, 0x3e	; 62
    3246:	11 96       	adiw	r26, 0x01	; 1
    3248:	8d 93       	st	X+, r24
    324a:	9c 93       	st	X, r25
    324c:	12 97       	sbiw	r26, 0x02	; 2
    324e:	80 91 80 24 	lds	r24, 0x2480
    3252:	90 91 81 24 	lds	r25, 0x2481
    3256:	a0 91 82 24 	lds	r26, 0x2482
    325a:	b0 91 83 24 	lds	r27, 0x2483
    325e:	ed b7       	in	r30, 0x3d	; 61
    3260:	fe b7       	in	r31, 0x3e	; 62
    3262:	83 83       	std	Z+3, r24	; 0x03
    3264:	94 83       	std	Z+4, r25	; 0x04
    3266:	a5 83       	std	Z+5, r26	; 0x05
    3268:	b6 83       	std	Z+6, r27	; 0x06
    326a:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    326e:	86 e5       	ldi	r24, 0x56	; 86
    3270:	96 e0       	ldi	r25, 0x06	; 6
    3272:	ad b7       	in	r26, 0x3d	; 61
    3274:	be b7       	in	r27, 0x3e	; 62
    3276:	11 96       	adiw	r26, 0x01	; 1
    3278:	8d 93       	st	X+, r24
    327a:	9c 93       	st	X, r25
    327c:	12 97       	sbiw	r26, 0x02	; 2
    327e:	80 91 7c 24 	lds	r24, 0x247C
    3282:	90 91 7d 24 	lds	r25, 0x247D
    3286:	a0 91 7e 24 	lds	r26, 0x247E
    328a:	b0 91 7f 24 	lds	r27, 0x247F
    328e:	ed b7       	in	r30, 0x3d	; 61
    3290:	fe b7       	in	r31, 0x3e	; 62
    3292:	83 83       	std	Z+3, r24	; 0x03
    3294:	94 83       	std	Z+4, r25	; 0x04
    3296:	a5 83       	std	Z+5, r26	; 0x05
    3298:	b6 83       	std	Z+6, r27	; 0x06
    329a:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
    329e:	10 e0       	ldi	r17, 0x00	; 0
    32a0:	8d b7       	in	r24, 0x3d	; 61
    32a2:	9e b7       	in	r25, 0x3e	; 62
    32a4:	06 96       	adiw	r24, 0x06	; 6
    32a6:	8d bf       	out	0x3d, r24	; 61
    32a8:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis=X; axis<=A; axis++) {
		_cfg_dump_axis(axis);
    32aa:	81 2f       	mov	r24, r17
    32ac:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis=X; axis<=A; axis++) {
    32b0:	1f 5f       	subi	r17, 0xFF	; 255
    32b2:	14 30       	cpi	r17, 0x04	; 4
    32b4:	d1 f7       	brne	.-12     	; 0x32aa <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    32b6:	1f 91       	pop	r17
    32b8:	08 95       	ret

000032ba <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	66 e7       	ldi	r22, 0x76	; 118
    32c0:	74 e2       	ldi	r23, 0x24	; 36
    32c2:	4e e6       	ldi	r20, 0x6E	; 110
    32c4:	50 e0       	ldi	r21, 0x00	; 0
    32c6:	0e 94 76 2d 	call	0x5aec	; 0x5aec <memcpy_to_eeprom_with_checksum>
}
    32ca:	08 95       	ret

000032cc <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    32cc:	80 e0       	ldi	r24, 0x00	; 0
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	0e 94 c8 2c 	call	0x5990	; 0x5990 <eeprom_get_char>

	if (version != EEPROM_DATA_VERSION) {	// Read config-record and check checksum
    32d4:	84 36       	cpi	r24, 0x64	; 100
    32d6:	19 f0       	breq	.+6      	; 0x32de <cfg_read+0x12>
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	0d c0       	rjmp	.+26     	; 0x32f8 <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    32de:	86 e7       	ldi	r24, 0x76	; 118
    32e0:	94 e2       	ldi	r25, 0x24	; 36
    32e2:	60 e0       	ldi	r22, 0x00	; 0
    32e4:	70 e0       	ldi	r23, 0x00	; 0
    32e6:	4e e6       	ldi	r20, 0x6E	; 110
    32e8:	50 e0       	ldi	r21, 0x00	; 0
    32ea:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <memcpy_from_eeprom_with_checksum>
    32ee:	00 97       	sbiw	r24, 0x00	; 0
    32f0:	11 f0       	breq	.+4      	; 0x32f6 <cfg_read+0x2a>
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    32f8:	c9 01       	movw	r24, r18
    32fa:	08 95       	ret

000032fc <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    32fc:	cf 92       	push	r12
    32fe:	df 92       	push	r13
    3300:	ef 92       	push	r14
    3302:	ff 92       	push	r15
    3304:	1f 93       	push	r17
    3306:	df 93       	push	r29
    3308:	cf 93       	push	r28
    330a:	0f 92       	push	r0
    330c:	0f 92       	push	r0
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
    3312:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    3314:	19 82       	std	Y+1, r1	; 0x01
    3316:	1a 82       	std	Y+2, r1	; 0x02
    3318:	cc 24       	eor	r12, r12
    331a:	dd 24       	eor	r13, r13
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	2b c0       	rjmp	.+86     	; 0x3378 <cfg_parse+0x7c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
		if (c == '=') {							// handle separator
    3322:	9d 33       	cpi	r25, 0x3D	; 61
    3324:	49 f4       	brne	.+18     	; 0x3338 <cfg_parse+0x3c>
			text[j++] = 0;						// terminate tag at separator
    3326:	f7 01       	movw	r30, r14
    3328:	e2 0f       	add	r30, r18
    332a:	f1 1d       	adc	r31, r1
    332c:	10 82       	st	Z, r1
    332e:	2f 5f       	subi	r18, 0xFF	; 255
			val = &text[j];						// new string starts at value
    3330:	67 01       	movw	r12, r14
    3332:	c2 0e       	add	r12, r18
    3334:	d1 1c       	adc	r13, r1
    3336:	20 c0       	rjmp	.+64     	; 0x3378 <cfg_parse+0x7c>
		} else if ( (c == '-') || 				// pass special characters
    3338:	9d 32       	cpi	r25, 0x2D	; 45
    333a:	c9 f0       	breq	.+50     	; 0x336e <cfg_parse+0x72>
    333c:	9b 32       	cpi	r25, 0x2B	; 43
    333e:	b9 f0       	breq	.+46     	; 0x336e <cfg_parse+0x72>
    3340:	9e 32       	cpi	r25, 0x2E	; 46
    3342:	a9 f0       	breq	.+42     	; 0x336e <cfg_parse+0x72>
    3344:	9f 33       	cpi	r25, 0x3F	; 63
    3346:	99 f0       	breq	.+38     	; 0x336e <cfg_parse+0x72>
    3348:	98 32       	cpi	r25, 0x28	; 40
    334a:	89 f0       	breq	.+34     	; 0x336e <cfg_parse+0x72>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'a' && c <= 'z') {		// convert lower to upper
    334c:	89 2f       	mov	r24, r25
    334e:	81 56       	subi	r24, 0x61	; 97
    3350:	8a 31       	cpi	r24, 0x1A	; 26
    3352:	28 f4       	brcc	.+10     	; 0x335e <cfg_parse+0x62>
			text[j++] = c-'a'+'A';
    3354:	f7 01       	movw	r30, r14
    3356:	e2 0f       	add	r30, r18
    3358:	f1 1d       	adc	r31, r1
    335a:	90 52       	subi	r25, 0x20	; 32
    335c:	0b c0       	rjmp	.+22     	; 0x3374 <cfg_parse+0x78>
		} else if (c >= 'A' && c <= 'Z') {		// pass upper case letters
    335e:	89 2f       	mov	r24, r25
    3360:	81 54       	subi	r24, 0x41	; 65
    3362:	8a 31       	cpi	r24, 0x1A	; 26
    3364:	20 f0       	brcs	.+8      	; 0x336e <cfg_parse+0x72>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
    3366:	89 2f       	mov	r24, r25
    3368:	80 53       	subi	r24, 0x30	; 48
    336a:	8a 30       	cpi	r24, 0x0A	; 10
    336c:	28 f4       	brcc	.+10     	; 0x3378 <cfg_parse+0x7c>
			text[j++] = c;
    336e:	f7 01       	movw	r30, r14
    3370:	e2 0f       	add	r30, r18
    3372:	f1 1d       	adc	r31, r1
    3374:	90 83       	st	Z, r25
    3376:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
    3378:	f7 01       	movw	r30, r14
    337a:	e3 0f       	add	r30, r19
    337c:	f1 1d       	adc	r31, r1
    337e:	90 81       	ld	r25, Z
    3380:	3f 5f       	subi	r19, 0xFF	; 255
    3382:	99 23       	and	r25, r25
    3384:	71 f6       	brne	.-100    	; 0x3322 <cfg_parse+0x26>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// terminate line
    3386:	f7 01       	movw	r30, r14
    3388:	e2 0f       	add	r30, r18
    338a:	f1 1d       	adc	r31, r1
    338c:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    338e:	2f 5f       	subi	r18, 0xFF	; 255
    3390:	c7 01       	movw	r24, r14
    3392:	82 0f       	add	r24, r18
    3394:	91 1d       	adc	r25, r1
    3396:	89 83       	std	Y+1, r24	; 0x01
    3398:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    339a:	10 92 77 24 	sts	0x2477, r1
	switch (text[0]) {
    339e:	f7 01       	movw	r30, r14
    33a0:	80 81       	ld	r24, Z
    33a2:	81 35       	cpi	r24, 0x51	; 81
    33a4:	d1 f0       	breq	.+52     	; 0x33da <cfg_parse+0xde>
    33a6:	82 35       	cpi	r24, 0x52	; 82
    33a8:	60 f4       	brcc	.+24     	; 0x33c2 <cfg_parse+0xc6>
    33aa:	81 34       	cpi	r24, 0x41	; 65
    33ac:	59 f1       	breq	.+86     	; 0x3404 <cfg_parse+0x108>
    33ae:	82 34       	cpi	r24, 0x42	; 66
    33b0:	28 f4       	brcc	.+10     	; 0x33bc <cfg_parse+0xc0>
    33b2:	88 32       	cpi	r24, 0x28	; 40
    33b4:	11 f1       	breq	.+68     	; 0x33fa <cfg_parse+0xfe>
    33b6:	8f 33       	cpi	r24, 0x3F	; 63
    33b8:	39 f5       	brne	.+78     	; 0x3408 <cfg_parse+0x10c>
    33ba:	0c c0       	rjmp	.+24     	; 0x33d4 <cfg_parse+0xd8>
    33bc:	8d 34       	cpi	r24, 0x4D	; 77
    33be:	21 f5       	brne	.+72     	; 0x3408 <cfg_parse+0x10c>
    33c0:	0e c0       	rjmp	.+28     	; 0x33de <cfg_parse+0xe2>
    33c2:	89 35       	cpi	r24, 0x59	; 89
    33c4:	29 f0       	breq	.+10     	; 0x33d0 <cfg_parse+0xd4>
    33c6:	8a 35       	cpi	r24, 0x5A	; 90
    33c8:	d9 f0       	breq	.+54     	; 0x3400 <cfg_parse+0x104>
    33ca:	88 35       	cpi	r24, 0x58	; 88
    33cc:	e9 f4       	brne	.+58     	; 0x3408 <cfg_parse+0x10c>
    33ce:	1f c0       	rjmp	.+62     	; 0x340e <cfg_parse+0x112>
    33d0:	11 e0       	ldi	r17, 0x01	; 1
    33d2:	1e c0       	rjmp	.+60     	; 0x3410 <cfg_parse+0x114>
		case '?': cfg_dump(); status (TG_OK); break;
    33d4:	0e 94 e7 18 	call	0x31ce	; 0x31ce <cfg_dump>
    33d8:	10 c0       	rjmp	.+32     	; 0x33fa <cfg_parse+0xfe>
		case '(': status (TG_OK);	break;			// ignore comment lines
		case 'Q': status (TG_QUIT); break;
    33da:	83 e0       	ldi	r24, 0x03	; 3
    33dc:	16 c0       	rjmp	.+44     	; 0x340a <cfg_parse+0x10e>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    33de:	c6 01       	movw	r24, r12
    33e0:	be 01       	movw	r22, r28
    33e2:	6f 5f       	subi	r22, 0xFF	; 255
    33e4:	7f 4f       	sbci	r23, 0xFF	; 255
    33e6:	0e 94 2e 46 	call	0x8c5c	; 0x8c5c <strtod>
    33ea:	60 93 78 24 	sts	0x2478, r22
    33ee:	70 93 79 24 	sts	0x2479, r23
    33f2:	80 93 7a 24 	sts	0x247A, r24
    33f6:	90 93 7b 24 	sts	0x247B, r25
				  status(TG_OK); 
    33fa:	10 92 77 24 	sts	0x2477, r1
    33fe:	07 c0       	rjmp	.+14     	; 0x340e <cfg_parse+0x112>
				  break;
    3400:	12 e0       	ldi	r17, 0x02	; 2
    3402:	06 c0       	rjmp	.+12     	; 0x3410 <cfg_parse+0x114>

		case 'X': axis = X; break;
		case 'Y': axis = Y; break;
		case 'Z': axis = Z; break;
    3404:	13 e0       	ldi	r17, 0x03	; 3
    3406:	04 c0       	rjmp	.+8      	; 0x3410 <cfg_parse+0x114>
		case 'A': axis = A; break;

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    3408:	89 e0       	ldi	r24, 0x09	; 9
    340a:	80 93 77 24 	sts	0x2477, r24
    340e:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    3410:	80 91 77 24 	lds	r24, 0x2477
    3414:	88 23       	and	r24, r24
    3416:	09 f0       	breq	.+2      	; 0x341a <cfg_parse+0x11e>
    3418:	ee c0       	rjmp	.+476    	; 0x35f6 <cfg_parse+0x2fa>
		status(TG_OK);							// pre-emptive setting
    341a:	10 92 77 24 	sts	0x2477, r1
		switch (text[1]) {
    341e:	f7 01       	movw	r30, r14
    3420:	81 81       	ldd	r24, Z+1	; 0x01
    3422:	8c 34       	cpi	r24, 0x4C	; 76
    3424:	09 f4       	brne	.+2      	; 0x3428 <cfg_parse+0x12c>
    3426:	b8 c0       	rjmp	.+368    	; 0x3598 <cfg_parse+0x29c>
    3428:	8d 34       	cpi	r24, 0x4D	; 77
    342a:	30 f4       	brcc	.+12     	; 0x3438 <cfg_parse+0x13c>
    342c:	84 34       	cpi	r24, 0x44	; 68
    342e:	a9 f1       	breq	.+106    	; 0x349a <cfg_parse+0x19e>
    3430:	86 34       	cpi	r24, 0x46	; 70
    3432:	09 f0       	breq	.+2      	; 0x3436 <cfg_parse+0x13a>
    3434:	dd c0       	rjmp	.+442    	; 0x35f0 <cfg_parse+0x2f4>
    3436:	1d c0       	rjmp	.+58     	; 0x3472 <cfg_parse+0x176>
    3438:	80 35       	cpi	r24, 0x50	; 80
    343a:	09 f4       	brne	.+2      	; 0x343e <cfg_parse+0x142>
    343c:	47 c0       	rjmp	.+142    	; 0x34cc <cfg_parse+0x1d0>
    343e:	83 35       	cpi	r24, 0x53	; 83
    3440:	21 f0       	breq	.+8      	; 0x344a <cfg_parse+0x14e>
    3442:	8d 34       	cpi	r24, 0x4D	; 77
    3444:	09 f0       	breq	.+2      	; 0x3448 <cfg_parse+0x14c>
    3446:	d4 c0       	rjmp	.+424    	; 0x35f0 <cfg_parse+0x2f4>
    3448:	58 c0       	rjmp	.+176    	; 0x34fa <cfg_parse+0x1fe>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    344a:	c6 01       	movw	r24, r12
    344c:	0e 94 9c 47 	call	0x8f38	; 0x8f38 <atoi>
    3450:	21 2f       	mov	r18, r17
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	f9 01       	movw	r30, r18
    3456:	ee 0f       	add	r30, r30
    3458:	ff 1f       	adc	r31, r31
    345a:	e2 0f       	add	r30, r18
    345c:	f3 1f       	adc	r31, r19
    345e:	53 e0       	ldi	r21, 0x03	; 3
    3460:	ee 0f       	add	r30, r30
    3462:	ff 1f       	adc	r31, r31
    3464:	5a 95       	dec	r21
    3466:	e1 f7       	brne	.-8      	; 0x3460 <cfg_parse+0x164>
    3468:	ea 58       	subi	r30, 0x8A	; 138
    346a:	fb 4d       	sbci	r31, 0xDB	; 219
    346c:	81 8b       	std	Z+17, r24	; 0x11
    346e:	92 8b       	std	Z+18, r25	; 0x12
    3470:	c2 c0       	rjmp	.+388    	; 0x35f6 <cfg_parse+0x2fa>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    3472:	c6 01       	movw	r24, r12
    3474:	0e 94 9c 47 	call	0x8f38	; 0x8f38 <atoi>
    3478:	21 2f       	mov	r18, r17
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	f9 01       	movw	r30, r18
    347e:	ee 0f       	add	r30, r30
    3480:	ff 1f       	adc	r31, r31
    3482:	e2 0f       	add	r30, r18
    3484:	f3 1f       	adc	r31, r19
    3486:	23 e0       	ldi	r18, 0x03	; 3
    3488:	ee 0f       	add	r30, r30
    348a:	ff 1f       	adc	r31, r31
    348c:	2a 95       	dec	r18
    348e:	e1 f7       	brne	.-8      	; 0x3488 <cfg_parse+0x18c>
    3490:	ea 58       	subi	r30, 0x8A	; 138
    3492:	fb 4d       	sbci	r31, 0xDB	; 219
    3494:	83 8b       	std	Z+19, r24	; 0x13
    3496:	94 8b       	std	Z+20, r25	; 0x14
    3498:	ae c0       	rjmp	.+348    	; 0x35f6 <cfg_parse+0x2fa>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    349a:	c6 01       	movw	r24, r12
    349c:	be 01       	movw	r22, r28
    349e:	6f 5f       	subi	r22, 0xFF	; 255
    34a0:	7f 4f       	sbci	r23, 0xFF	; 255
    34a2:	0e 94 2e 46 	call	0x8c5c	; 0x8c5c <strtod>
    34a6:	21 2f       	mov	r18, r17
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	f9 01       	movw	r30, r18
    34ac:	ee 0f       	add	r30, r30
    34ae:	ff 1f       	adc	r31, r31
    34b0:	e2 0f       	add	r30, r18
    34b2:	f3 1f       	adc	r31, r19
    34b4:	b3 e0       	ldi	r27, 0x03	; 3
    34b6:	ee 0f       	add	r30, r30
    34b8:	ff 1f       	adc	r31, r31
    34ba:	ba 95       	dec	r27
    34bc:	e1 f7       	brne	.-8      	; 0x34b6 <cfg_parse+0x1ba>
    34be:	ea 58       	subi	r30, 0x8A	; 138
    34c0:	fb 4d       	sbci	r31, 0xDB	; 219
    34c2:	65 8b       	std	Z+21, r22	; 0x15
    34c4:	76 8b       	std	Z+22, r23	; 0x16
    34c6:	87 8b       	std	Z+23, r24	; 0x17
    34c8:	90 8f       	std	Z+24, r25	; 0x18
    34ca:	95 c0       	rjmp	.+298    	; 0x35f6 <cfg_parse+0x2fa>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    34cc:	c6 01       	movw	r24, r12
    34ce:	0e 94 9c 47 	call	0x8f38	; 0x8f38 <atoi>
    34d2:	68 2f       	mov	r22, r24
    34d4:	81 2f       	mov	r24, r17
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	fc 01       	movw	r30, r24
    34da:	ee 0f       	add	r30, r30
    34dc:	ff 1f       	adc	r31, r31
    34de:	e8 0f       	add	r30, r24
    34e0:	f9 1f       	adc	r31, r25
    34e2:	73 e0       	ldi	r23, 0x03	; 3
    34e4:	ee 0f       	add	r30, r30
    34e6:	ff 1f       	adc	r31, r31
    34e8:	7a 95       	dec	r23
    34ea:	e1 f7       	brne	.-8      	; 0x34e4 <cfg_parse+0x1e8>
    34ec:	ea 58       	subi	r30, 0x8A	; 138
    34ee:	fb 4d       	sbci	r31, 0xDB	; 219
    34f0:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    34f2:	81 2f       	mov	r24, r17
    34f4:	0e 94 9d 24 	call	0x493a	; 0x493a <st_set_polarity>
    34f8:	7e c0       	rjmp	.+252    	; 0x35f6 <cfg_parse+0x2fa>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    34fa:	f7 01       	movw	r30, r14
    34fc:	82 81       	ldd	r24, Z+2	; 0x02
    34fe:	89 34       	cpi	r24, 0x49	; 73
    3500:	99 f4       	brne	.+38     	; 0x3528 <cfg_parse+0x22c>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    3502:	c6 01       	movw	r24, r12
    3504:	0e 94 9c 47 	call	0x8f38	; 0x8f38 <atoi>
    3508:	21 2f       	mov	r18, r17
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	f9 01       	movw	r30, r18
    350e:	ee 0f       	add	r30, r30
    3510:	ff 1f       	adc	r31, r31
    3512:	e2 0f       	add	r30, r18
    3514:	f3 1f       	adc	r31, r19
    3516:	53 e0       	ldi	r21, 0x03	; 3
    3518:	ee 0f       	add	r30, r30
    351a:	ff 1f       	adc	r31, r31
    351c:	5a 95       	dec	r21
    351e:	e1 f7       	brne	.-8      	; 0x3518 <cfg_parse+0x21c>
    3520:	ea 58       	subi	r30, 0x8A	; 138
    3522:	fb 4d       	sbci	r31, 0xDB	; 219
    3524:	86 87       	std	Z+14, r24	; 0x0e
    3526:	67 c0       	rjmp	.+206    	; 0x35f6 <cfg_parse+0x2fa>
				} else if (text[3] == 'R') {
    3528:	f7 01       	movw	r30, r14
    352a:	83 81       	ldd	r24, Z+3	; 0x03
    352c:	82 35       	cpi	r24, 0x52	; 82
    352e:	c9 f4       	brne	.+50     	; 0x3562 <cfg_parse+0x266>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    3530:	c6 01       	movw	r24, r12
    3532:	be 01       	movw	r22, r28
    3534:	6f 5f       	subi	r22, 0xFF	; 255
    3536:	7f 4f       	sbci	r23, 0xFF	; 255
    3538:	0e 94 2e 46 	call	0x8c5c	; 0x8c5c <strtod>
    353c:	21 2f       	mov	r18, r17
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	f9 01       	movw	r30, r18
    3542:	ee 0f       	add	r30, r30
    3544:	ff 1f       	adc	r31, r31
    3546:	e2 0f       	add	r30, r18
    3548:	f3 1f       	adc	r31, r19
    354a:	13 e0       	ldi	r17, 0x03	; 3
    354c:	ee 0f       	add	r30, r30
    354e:	ff 1f       	adc	r31, r31
    3550:	1a 95       	dec	r17
    3552:	e1 f7       	brne	.-8      	; 0x354c <cfg_parse+0x250>
    3554:	ea 58       	subi	r30, 0x8A	; 138
    3556:	fb 4d       	sbci	r31, 0xDB	; 219
    3558:	61 8f       	std	Z+25, r22	; 0x19
    355a:	72 8f       	std	Z+26, r23	; 0x1a
    355c:	83 8f       	std	Z+27, r24	; 0x1b
    355e:	94 8f       	std	Z+28, r25	; 0x1c
    3560:	4a c0       	rjmp	.+148    	; 0x35f6 <cfg_parse+0x2fa>
				} else if (text[3] == 'T') {
    3562:	84 35       	cpi	r24, 0x54	; 84
    3564:	c9 f4       	brne	.+50     	; 0x3598 <cfg_parse+0x29c>
					CFG(axis).mm_travel = strtod(val, &end); break;
    3566:	c6 01       	movw	r24, r12
    3568:	be 01       	movw	r22, r28
    356a:	6f 5f       	subi	r22, 0xFF	; 255
    356c:	7f 4f       	sbci	r23, 0xFF	; 255
    356e:	0e 94 2e 46 	call	0x8c5c	; 0x8c5c <strtod>
    3572:	21 2f       	mov	r18, r17
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	f9 01       	movw	r30, r18
    3578:	ee 0f       	add	r30, r30
    357a:	ff 1f       	adc	r31, r31
    357c:	e2 0f       	add	r30, r18
    357e:	f3 1f       	adc	r31, r19
    3580:	a3 e0       	ldi	r26, 0x03	; 3
    3582:	ee 0f       	add	r30, r30
    3584:	ff 1f       	adc	r31, r31
    3586:	aa 95       	dec	r26
    3588:	e1 f7       	brne	.-8      	; 0x3582 <cfg_parse+0x286>
    358a:	ea 58       	subi	r30, 0x8A	; 138
    358c:	fb 4d       	sbci	r31, 0xDB	; 219
    358e:	65 8f       	std	Z+29, r22	; 0x1d
    3590:	76 8f       	std	Z+30, r23	; 0x1e
    3592:	87 8f       	std	Z+31, r24	; 0x1f
    3594:	90 a3       	std	Z+32, r25	; 0x20
    3596:	2f c0       	rjmp	.+94     	; 0x35f6 <cfg_parse+0x2fa>
				}
			case 'L': 
				if (text[2] == 'O') {
    3598:	f7 01       	movw	r30, r14
    359a:	82 81       	ldd	r24, Z+2	; 0x02
    359c:	8f 34       	cpi	r24, 0x4F	; 79
    359e:	99 f4       	brne	.+38     	; 0x35c6 <cfg_parse+0x2ca>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    35a0:	c6 01       	movw	r24, r12
    35a2:	0e 94 9c 47 	call	0x8f38	; 0x8f38 <atoi>
    35a6:	21 2f       	mov	r18, r17
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	f9 01       	movw	r30, r18
    35ac:	ee 0f       	add	r30, r30
    35ae:	ff 1f       	adc	r31, r31
    35b0:	e2 0f       	add	r30, r18
    35b2:	f3 1f       	adc	r31, r19
    35b4:	53 e0       	ldi	r21, 0x03	; 3
    35b6:	ee 0f       	add	r30, r30
    35b8:	ff 1f       	adc	r31, r31
    35ba:	5a 95       	dec	r21
    35bc:	e1 f7       	brne	.-8      	; 0x35b6 <cfg_parse+0x2ba>
    35be:	ea 58       	subi	r30, 0x8A	; 138
    35c0:	fb 4d       	sbci	r31, 0xDB	; 219
    35c2:	87 87       	std	Z+15, r24	; 0x0f
    35c4:	18 c0       	rjmp	.+48     	; 0x35f6 <cfg_parse+0x2fa>
				} else if (text[2] == 'I') {
    35c6:	89 34       	cpi	r24, 0x49	; 73
    35c8:	99 f4       	brne	.+38     	; 0x35f0 <cfg_parse+0x2f4>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    35ca:	c6 01       	movw	r24, r12
    35cc:	0e 94 9c 47 	call	0x8f38	; 0x8f38 <atoi>
    35d0:	21 2f       	mov	r18, r17
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	f9 01       	movw	r30, r18
    35d6:	ee 0f       	add	r30, r30
    35d8:	ff 1f       	adc	r31, r31
    35da:	e2 0f       	add	r30, r18
    35dc:	f3 1f       	adc	r31, r19
    35de:	23 e0       	ldi	r18, 0x03	; 3
    35e0:	ee 0f       	add	r30, r30
    35e2:	ff 1f       	adc	r31, r31
    35e4:	2a 95       	dec	r18
    35e6:	e1 f7       	brne	.-8      	; 0x35e0 <cfg_parse+0x2e4>
    35e8:	ea 58       	subi	r30, 0x8A	; 138
    35ea:	fb 4d       	sbci	r31, 0xDB	; 219
    35ec:	85 a3       	std	Z+37, r24	; 0x25
    35ee:	03 c0       	rjmp	.+6      	; 0x35f6 <cfg_parse+0x2fa>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    35f0:	89 e0       	ldi	r24, 0x09	; 9
    35f2:	80 93 77 24 	sts	0x2477, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    35f6:	80 91 77 24 	lds	r24, 0x2477
    35fa:	b7 01       	movw	r22, r14
    35fc:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
}
    3600:	80 91 77 24 	lds	r24, 0x2477
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	0f 90       	pop	r0
    3608:	0f 90       	pop	r0
    360a:	cf 91       	pop	r28
    360c:	df 91       	pop	r29
    360e:	1f 91       	pop	r17
    3610:	ff 90       	pop	r15
    3612:	ef 90       	pop	r14
    3614:	df 90       	pop	r13
    3616:	cf 90       	pop	r12
    3618:	08 95       	ret

0000361a <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    361a:	ef 92       	push	r14
    361c:	ff 92       	push	r15
    361e:	0f 93       	push	r16
    3620:	1f 93       	push	r17
    3622:	df 93       	push	r29
    3624:	cf 93       	push	r28
    3626:	cd b7       	in	r28, 0x3d	; 61
    3628:	de b7       	in	r29, 0x3e	; 62
    362a:	a8 97       	sbiw	r28, 0x28	; 40
    362c:	cd bf       	out	0x3d, r28	; 61
    362e:	de bf       	out	0x3e, r29	; 62
    3630:	0b e4       	ldi	r16, 0x4B	; 75
    3632:	12 e0       	ldi	r17, 0x02	; 2
    3634:	a0 e0       	ldi	r26, 0x00	; 0
    3636:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    3638:	7e 01       	movw	r14, r28
    363a:	08 94       	sec
    363c:	e1 1c       	adc	r14, r1
    363e:	f1 1c       	adc	r15, r1
    3640:	02 c0       	rjmp	.+4      	; 0x3646 <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3642:	0f 5f       	subi	r16, 0xFF	; 255
    3644:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    3646:	f8 01       	movw	r30, r16
    3648:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    364a:	88 23       	and	r24, r24
    364c:	89 f4       	brne	.+34     	; 0x3670 <cfg_test+0x56>
			text[j] = 0;
    364e:	ce 01       	movw	r24, r28
    3650:	01 96       	adiw	r24, 0x01	; 1
    3652:	a8 0f       	add	r26, r24
    3654:	b9 1f       	adc	r27, r25
    3656:	1c 92       	st	X, r1
			cfg_parse(text);
    3658:	0e 94 7e 19 	call	0x32fc	; 0x32fc <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    365c:	a8 96       	adiw	r28, 0x28	; 40
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	de bf       	out	0x3e, r29	; 62
    3662:	cf 91       	pop	r28
    3664:	df 91       	pop	r29
    3666:	1f 91       	pop	r17
    3668:	0f 91       	pop	r16
    366a:	ff 90       	pop	r15
    366c:	ef 90       	pop	r14
    366e:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    3670:	8d 30       	cpi	r24, 0x0D	; 13
    3672:	21 f0       	breq	.+8      	; 0x367c <cfg_test+0x62>
    3674:	8a 30       	cpi	r24, 0x0A	; 10
    3676:	11 f0       	breq	.+4      	; 0x367c <cfg_test+0x62>
    3678:	8b 33       	cpi	r24, 0x3B	; 59
    367a:	49 f4       	brne	.+18     	; 0x368e <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    367c:	ae 0d       	add	r26, r14
    367e:	bf 1d       	adc	r27, r15
    3680:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    3682:	c7 01       	movw	r24, r14
    3684:	0e 94 7e 19 	call	0x32fc	; 0x32fc <cfg_parse>
    3688:	a0 e0       	ldi	r26, 0x00	; 0
    368a:	b0 e0       	ldi	r27, 0x00	; 0
    368c:	da cf       	rjmp	.-76     	; 0x3642 <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    368e:	81 32       	cpi	r24, 0x21	; 33
    3690:	c0 f2       	brcs	.-80     	; 0x3642 <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    3692:	f7 01       	movw	r30, r14
    3694:	ea 0f       	add	r30, r26
    3696:	fb 1f       	adc	r31, r27
    3698:	80 83       	st	Z, r24
    369a:	11 96       	adiw	r26, 0x01	; 1
    369c:	d2 cf       	rjmp	.-92     	; 0x3642 <cfg_test+0x28>

0000369e <en_init>:


void en_init(void) 
{
	return;
}
    369e:	08 95       	ret

000036a0 <en_write>:
 * bits all over the place becuase we have no more contiguous ports left. 
 */

void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
    36a0:	88 23       	and	r24, r24
    36a2:	b1 f0       	breq	.+44     	; 0x36d0 <en_write+0x30>
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
    36a4:	e0 91 72 24 	lds	r30, 0x2472
    36a8:	f0 91 73 24 	lds	r31, 0x2473
    36ac:	80 e2       	ldi	r24, 0x20	; 32
    36ae:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
    36b0:	e0 91 62 24 	lds	r30, 0x2462
    36b4:	f0 91 63 24 	lds	r31, 0x2463
    36b8:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
    36ba:	e0 91 52 24 	lds	r30, 0x2452
    36be:	f0 91 53 24 	lds	r31, 0x2453
    36c2:	85 83       	std	Z+5, r24	; 0x05
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
    36c4:	e0 91 42 24 	lds	r30, 0x2442
    36c8:	f0 91 43 24 	lds	r31, 0x2443
    36cc:	85 83       	std	Z+5, r24	; 0x05
    36ce:	08 95       	ret
void en_write(uint8_t b)
{
	if (b && 0x01) { 								// b0 is on A axis
		AXIS(A).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(A).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36d0:	e0 91 72 24 	lds	r30, 0x2472
    36d4:	f0 91 73 24 	lds	r31, 0x2473
    36d8:	80 e2       	ldi	r24, 0x20	; 32
    36da:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x02) { 								// b1 is on Z axis
		AXIS(Z).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Z).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36dc:	e0 91 62 24 	lds	r30, 0x2462
    36e0:	f0 91 63 24 	lds	r31, 0x2463
    36e4:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x04) { 								// b2 is on Y axis
		AXIS(Y).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(Y).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36e6:	e0 91 52 24 	lds	r30, 0x2452
    36ea:	f0 91 53 24 	lds	r31, 0x2453
    36ee:	86 83       	std	Z+6, r24	; 0x06
	}

	if (b && 0x08) { 								// b3 is on X axis
		AXIS(X).port->OUTSET = ENCODER_OUT_BIT_bm;
	} else {
		AXIS(X).port->OUTCLR = ENCODER_OUT_BIT_bm;
    36f0:	e0 91 42 24 	lds	r30, 0x2442
    36f4:	f0 91 43 24 	lds	r31, 0x2443
    36f8:	86 83       	std	Z+6, r24	; 0x06
    36fa:	08 95       	ret

000036fc <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    36fc:	0f 93       	push	r16
    36fe:	df 93       	push	r29
    3700:	cf 93       	push	r28
    3702:	0f 92       	push	r0
    3704:	cd b7       	in	r28, 0x3d	; 61
    3706:	de b7       	in	r29, 0x3e	; 62
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
#endif

#ifdef __CLOCK_EXTERNAL_16MHZ // external 16 Mhx Xtal with 2x PLL = 32 Mhz
	OSC.XOSCCTRL = 0xCB;	// 12-16 MHz crystal; 0.4-16 MHz XTAL w/16K CLK startup
    3708:	8b ec       	ldi	r24, 0xCB	; 203
    370a:	e0 e5       	ldi	r30, 0x50	; 80
    370c:	f0 e0       	ldi	r31, 0x00	; 0
    370e:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    3710:	88 e0       	ldi	r24, 0x08	; 8
    3712:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    3716:	80 91 51 00 	lds	r24, 0x0051
    371a:	83 ff       	sbrs	r24, 3
    371c:	fc cf       	rjmp	.-8      	; 0x3716 <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
    371e:	82 ec       	ldi	r24, 0xC2	; 194
    3720:	e0 e5       	ldi	r30, 0x50	; 80
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    3726:	88 e1       	ldi	r24, 0x18	; 24
    3728:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    372c:	80 91 51 00 	lds	r24, 0x0051
    3730:	84 ff       	sbrs	r24, 4
    3732:	fc cf       	rjmp	.-8      	; 0x372c <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3734:	8f b7       	in	r24, 0x3f	; 63
    3736:	89 83       	std	Y+1, r24	; 0x01
    3738:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    373a:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    373c:	24 e0       	ldi	r18, 0x04	; 4
    373e:	80 e4       	ldi	r24, 0x40	; 64
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	fc 01       	movw	r30, r24
    3744:	08 ed       	ldi	r16, 0xD8	; 216
    3746:	04 bf       	out	0x34, r16	; 52
    3748:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    374a:	89 81       	ldd	r24, Y+1	; 0x01
    374c:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC2;		// XOSC is PLL Source; 2x Factor (32 MHz sys clock)
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    374e:	80 91 50 00 	lds	r24, 0x0050
    3752:	8e 7f       	andi	r24, 0xFE	; 254
    3754:	80 93 50 00 	sts	0x0050, r24
	OSC.CTRL = OSC_RC32MEN_bm; 					// enable internal 32MHz oscillator
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); 	// wait for oscillator ready
	CCP = CCP_IOREG_gc; 						// Security Signature to modify clk
	CLK.CTRL = 0x01; 							// select sysclock 32MHz osc
#endif
}
    3758:	0f 90       	pop	r0
    375a:	cf 91       	pop	r28
    375c:	df 91       	pop	r29
    375e:	0f 91       	pop	r16
    3760:	08 95       	ret

00003762 <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    3762:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <xmega_init_clocks>
}
    3766:	08 95       	ret

00003768 <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3768:	0f 93       	push	r16
    376a:	df 93       	push	r29
    376c:	cf 93       	push	r28
    376e:	0f 92       	push	r0
    3770:	cd b7       	in	r28, 0x3d	; 61
    3772:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3774:	2f b7       	in	r18, 0x3f	; 63
    3776:	29 83       	std	Y+1, r18	; 0x01
    3778:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    377a:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    377c:	fc 01       	movw	r30, r24
    377e:	08 ed       	ldi	r16, 0xD8	; 216
    3780:	04 bf       	out	0x34, r16	; 52
    3782:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3784:	89 81       	ldd	r24, Y+1	; 0x01
    3786:	8f bf       	out	0x3f, r24	; 63
#endif
}
    3788:	0f 90       	pop	r0
    378a:	cf 91       	pop	r28
    378c:	df 91       	pop	r29
    378e:	0f 91       	pop	r16
    3790:	08 95       	ret

00003792 <mc_motion_stop>:
 * mc_motion_stop() - stop all current motions
 */

int mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    3792:	10 92 80 21 	sts	0x2180, r1
	ma.arc_state = MC_STATE_OFF;
    3796:	10 92 e6 24 	sts	0x24E6, r1
	return (TG_OK);
}
    379a:	80 e0       	ldi	r24, 0x00	; 0
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	08 95       	ret

000037a0 <mc_go_home>:
 */

int mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    37a0:	8c e0       	ldi	r24, 0x0C	; 12
    37a2:	e1 e8       	ldi	r30, 0x81	; 129
    37a4:	f1 e2       	ldi	r31, 0x21	; 33
    37a6:	df 01       	movw	r26, r30
    37a8:	1d 92       	st	X+, r1
    37aa:	8a 95       	dec	r24
    37ac:	e9 f7       	brne	.-6      	; 0x37a8 <mc_go_home+0x8>
	return (TG_OK);
}
    37ae:	80 e0       	ldi	r24, 0x00	; 0
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	08 95       	ret

000037b4 <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    37b4:	8c e0       	ldi	r24, 0x0C	; 12
    37b6:	e1 e8       	ldi	r30, 0x81	; 129
    37b8:	f1 e2       	ldi	r31, 0x21	; 33
    37ba:	df 01       	movw	r26, r30
    37bc:	1d 92       	st	X+, r1
    37be:	8a 95       	dec	r24
    37c0:	e9 f7       	brne	.-6      	; 0x37bc <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    37c2:	10 92 80 21 	sts	0x2180, r1
	ma.arc_state = MC_STATE_OFF;
    37c6:	10 92 e6 24 	sts	0x24E6, r1
}
    37ca:	08 95       	ret

000037cc <mc_line_continue>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continue() 
{
    37cc:	af 92       	push	r10
    37ce:	bf 92       	push	r11
    37d0:	cf 92       	push	r12
    37d2:	df 92       	push	r13
    37d4:	ef 92       	push	r14
    37d6:	ff 92       	push	r15
    37d8:	0f 93       	push	r16
    37da:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    37dc:	80 91 80 21 	lds	r24, 0x2180
    37e0:	88 23       	and	r24, r24
    37e2:	19 f4       	brne	.+6      	; 0x37ea <mc_line_continue+0x1e>
    37e4:	22 e0       	ldi	r18, 0x02	; 2
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	30 c0       	rjmp	.+96     	; 0x384a <mc_line_continue+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    37ea:	82 e0       	ldi	r24, 0x02	; 2
    37ec:	80 93 80 21 	sts	0x2180, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    37f0:	0e 94 08 31 	call	0x6210	; 0x6210 <mv_test_move_buffer_full>
    37f4:	88 23       	and	r24, r24
    37f6:	19 f0       	breq	.+6      	; 0x37fe <mc_line_continue+0x32>
    37f8:	21 e0       	ldi	r18, 0x01	; 1
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	26 c0       	rjmp	.+76     	; 0x384a <mc_line_continue+0x7e>
		return (TG_EAGAIN);
	}
	mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    37fe:	60 91 99 21 	lds	r22, 0x2199
    3802:	70 91 9a 21 	lds	r23, 0x219A
    3806:	80 91 9b 21 	lds	r24, 0x219B
    380a:	90 91 9c 21 	lds	r25, 0x219C
    380e:	20 91 9d 21 	lds	r18, 0x219D
    3812:	30 91 9e 21 	lds	r19, 0x219E
    3816:	40 91 9f 21 	lds	r20, 0x219F
    381a:	50 91 a0 21 	lds	r21, 0x21A0
    381e:	e0 90 a1 21 	lds	r14, 0x21A1
    3822:	f0 90 a2 21 	lds	r15, 0x21A2
    3826:	00 91 a3 21 	lds	r16, 0x21A3
    382a:	10 91 a4 21 	lds	r17, 0x21A4
    382e:	a0 90 a5 21 	lds	r10, 0x21A5
    3832:	b0 90 a6 21 	lds	r11, 0x21A6
    3836:	c0 90 a7 21 	lds	r12, 0x21A7
    383a:	d0 90 a8 21 	lds	r13, 0x21A8
    383e:	0e 94 34 31 	call	0x6268	; 0x6268 <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    3842:	10 92 80 21 	sts	0x2180, r1
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    384a:	c9 01       	movw	r24, r18
    384c:	1f 91       	pop	r17
    384e:	0f 91       	pop	r16
    3850:	ff 90       	pop	r15
    3852:	ef 90       	pop	r14
    3854:	df 90       	pop	r13
    3856:	cf 90       	pop	r12
    3858:	bf 90       	pop	r11
    385a:	af 90       	pop	r10
    385c:	08 95       	ret

0000385e <mc_dwell>:
 * NOTE: It's not necessary to set the target as this is set correctly in the Gcode. 
 */

int mc_dwell(double seconds) 
{
	mc.steps[X] = 0;
    385e:	10 92 99 21 	sts	0x2199, r1
    3862:	10 92 9a 21 	sts	0x219A, r1
    3866:	10 92 9b 21 	sts	0x219B, r1
    386a:	10 92 9c 21 	sts	0x219C, r1
	mc.steps[Y] = 0;
    386e:	10 92 9d 21 	sts	0x219D, r1
    3872:	10 92 9e 21 	sts	0x219E, r1
    3876:	10 92 9f 21 	sts	0x219F, r1
    387a:	10 92 a0 21 	sts	0x21A0, r1
	mc.steps[Z] = 0;
    387e:	10 92 a1 21 	sts	0x21A1, r1
    3882:	10 92 a2 21 	sts	0x21A2, r1
    3886:	10 92 a3 21 	sts	0x21A3, r1
    388a:	10 92 a4 21 	sts	0x21A4, r1
	mc.mm_of_travel = 0;	// not actually used, but makes debug make more sense
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	40 e0       	ldi	r20, 0x00	; 0
    3894:	50 e0       	ldi	r21, 0x00	; 0
    3896:	20 93 a9 21 	sts	0x21A9, r18
    389a:	30 93 aa 21 	sts	0x21AA, r19
    389e:	40 93 ab 21 	sts	0x21AB, r20
    38a2:	50 93 ac 21 	sts	0x21AC, r21
	mc.microseconds = trunc(seconds*1000000);
    38a6:	20 e0       	ldi	r18, 0x00	; 0
    38a8:	34 e2       	ldi	r19, 0x24	; 36
    38aa:	44 e7       	ldi	r20, 0x74	; 116
    38ac:	59 e4       	ldi	r21, 0x49	; 73
    38ae:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    38b2:	0e 94 97 42 	call	0x852e	; 0x852e <__fixunssfsi>
    38b6:	60 93 a5 21 	sts	0x21A5, r22
    38ba:	70 93 a6 21 	sts	0x21A6, r23
    38be:	80 93 a7 21 	sts	0x21A7, r24
    38c2:	90 93 a8 21 	sts	0x21A8, r25
	mc.line_state = MC_STATE_NEW;
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	80 93 80 21 	sts	0x2180, r24
	return (mc_line_continue());
    38cc:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <mc_line_continue>
}
    38d0:	08 95       	ret

000038d2 <mc_line>:
/* 
 * mc_line() - queue a line move; non-blocking version
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    38d2:	2f 92       	push	r2
    38d4:	3f 92       	push	r3
    38d6:	4f 92       	push	r4
    38d8:	5f 92       	push	r5
    38da:	6f 92       	push	r6
    38dc:	7f 92       	push	r7
    38de:	8f 92       	push	r8
    38e0:	9f 92       	push	r9
    38e2:	af 92       	push	r10
    38e4:	bf 92       	push	r11
    38e6:	cf 92       	push	r12
    38e8:	df 92       	push	r13
    38ea:	ef 92       	push	r14
    38ec:	ff 92       	push	r15
    38ee:	0f 93       	push	r16
    38f0:	1f 93       	push	r17
    38f2:	df 93       	push	r29
    38f4:	cf 93       	push	r28
    38f6:	cd b7       	in	r28, 0x3d	; 61
    38f8:	de b7       	in	r29, 0x3e	; 62
    38fa:	64 97       	sbiw	r28, 0x14	; 20
    38fc:	cd bf       	out	0x3d, r28	; 61
    38fe:	de bf       	out	0x3e, r29	; 62
    3900:	2d 87       	std	Y+13, r18	; 0x0d
    3902:	3e 87       	std	Y+14, r19	; 0x0e
    3904:	4f 87       	std	Y+15, r20	; 0x0f
    3906:	58 8b       	std	Y+16, r21	; 0x10
    3908:	a9 8a       	std	Y+17, r10	; 0x11
    390a:	ba 8a       	std	Y+18, r11	; 0x12
    390c:	cb 8a       	std	Y+19, r12	; 0x13
    390e:	dc 8a       	std	Y+20, r13	; 0x14
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    3910:	20 91 97 24 	lds	r18, 0x2497
    3914:	30 91 98 24 	lds	r19, 0x2498
    3918:	40 91 99 24 	lds	r20, 0x2499
    391c:	50 91 9a 24 	lds	r21, 0x249A
    3920:	29 87       	std	Y+9, r18	; 0x09
    3922:	3a 87       	std	Y+10, r19	; 0x0a
    3924:	4b 87       	std	Y+11, r20	; 0x0b
    3926:	5c 87       	std	Y+12, r21	; 0x0c
    3928:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    392c:	0e 94 b5 44 	call	0x896a	; 0x896a <lround>
    3930:	2b 01       	movw	r4, r22
    3932:	3c 01       	movw	r6, r24
    3934:	40 92 8d 21 	sts	0x218D, r4
    3938:	50 92 8e 21 	sts	0x218E, r5
    393c:	60 92 8f 21 	sts	0x218F, r6
    3940:	70 92 90 21 	sts	0x2190, r7
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    3944:	80 91 af 24 	lds	r24, 0x24AF
    3948:	90 91 b0 24 	lds	r25, 0x24B0
    394c:	a0 91 b1 24 	lds	r26, 0x24B1
    3950:	b0 91 b2 24 	lds	r27, 0x24B2
    3954:	8d 83       	std	Y+5, r24	; 0x05
    3956:	9e 83       	std	Y+6, r25	; 0x06
    3958:	af 83       	std	Y+7, r26	; 0x07
    395a:	b8 87       	std	Y+8, r27	; 0x08
    395c:	6d 85       	ldd	r22, Y+13	; 0x0d
    395e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3960:	8f 85       	ldd	r24, Y+15	; 0x0f
    3962:	98 89       	ldd	r25, Y+16	; 0x10
    3964:	2d 81       	ldd	r18, Y+5	; 0x05
    3966:	3e 81       	ldd	r19, Y+6	; 0x06
    3968:	4f 81       	ldd	r20, Y+7	; 0x07
    396a:	58 85       	ldd	r21, Y+8	; 0x08
    396c:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    3970:	0e 94 b5 44 	call	0x896a	; 0x896a <lround>
    3974:	5b 01       	movw	r10, r22
    3976:	6c 01       	movw	r12, r24
    3978:	a0 92 91 21 	sts	0x2191, r10
    397c:	b0 92 92 21 	sts	0x2192, r11
    3980:	c0 92 93 21 	sts	0x2193, r12
    3984:	d0 92 94 21 	sts	0x2194, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    3988:	20 91 c7 24 	lds	r18, 0x24C7
    398c:	30 91 c8 24 	lds	r19, 0x24C8
    3990:	40 91 c9 24 	lds	r20, 0x24C9
    3994:	50 91 ca 24 	lds	r21, 0x24CA
    3998:	29 83       	std	Y+1, r18	; 0x01
    399a:	3a 83       	std	Y+2, r19	; 0x02
    399c:	4b 83       	std	Y+3, r20	; 0x03
    399e:	5c 83       	std	Y+4, r21	; 0x04
    39a0:	c8 01       	movw	r24, r16
    39a2:	b7 01       	movw	r22, r14
    39a4:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    39a8:	0e 94 b5 44 	call	0x896a	; 0x896a <lround>
    39ac:	9b 01       	movw	r18, r22
    39ae:	ac 01       	movw	r20, r24
    39b0:	20 93 95 21 	sts	0x2195, r18
    39b4:	30 93 96 21 	sts	0x2196, r19
    39b8:	40 93 97 21 	sts	0x2197, r20
    39bc:	50 93 98 21 	sts	0x2198, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    39c0:	80 91 81 21 	lds	r24, 0x2181
    39c4:	90 91 82 21 	lds	r25, 0x2182
    39c8:	a0 91 83 21 	lds	r26, 0x2183
    39cc:	b0 91 84 21 	lds	r27, 0x2184
    39d0:	83 01       	movw	r16, r6
    39d2:	72 01       	movw	r14, r4
    39d4:	e8 1a       	sub	r14, r24
    39d6:	f9 0a       	sbc	r15, r25
    39d8:	0a 0b       	sbc	r16, r26
    39da:	1b 0b       	sbc	r17, r27
    39dc:	e0 92 99 21 	sts	0x2199, r14
    39e0:	f0 92 9a 21 	sts	0x219A, r15
    39e4:	00 93 9b 21 	sts	0x219B, r16
    39e8:	10 93 9c 21 	sts	0x219C, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    39ec:	80 91 85 21 	lds	r24, 0x2185
    39f0:	90 91 86 21 	lds	r25, 0x2186
    39f4:	a0 91 87 21 	lds	r26, 0x2187
    39f8:	b0 91 88 21 	lds	r27, 0x2188
    39fc:	a8 1a       	sub	r10, r24
    39fe:	b9 0a       	sbc	r11, r25
    3a00:	ca 0a       	sbc	r12, r26
    3a02:	db 0a       	sbc	r13, r27
    3a04:	a0 92 9d 21 	sts	0x219D, r10
    3a08:	b0 92 9e 21 	sts	0x219E, r11
    3a0c:	c0 92 9f 21 	sts	0x219F, r12
    3a10:	d0 92 a0 21 	sts	0x21A0, r13
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    3a14:	80 91 89 21 	lds	r24, 0x2189
    3a18:	90 91 8a 21 	lds	r25, 0x218A
    3a1c:	a0 91 8b 21 	lds	r26, 0x218B
    3a20:	b0 91 8c 21 	lds	r27, 0x218C
    3a24:	19 01       	movw	r2, r18
    3a26:	2a 01       	movw	r4, r20
    3a28:	28 1a       	sub	r2, r24
    3a2a:	39 0a       	sbc	r3, r25
    3a2c:	4a 0a       	sbc	r4, r26
    3a2e:	5b 0a       	sbc	r5, r27
    3a30:	20 92 a1 21 	sts	0x21A1, r2
    3a34:	30 92 a2 21 	sts	0x21A2, r3
    3a38:	40 92 a3 21 	sts	0x21A3, r4
    3a3c:	50 92 a4 21 	sts	0x21A4, r5

	if (invert_feed_rate) {
    3a40:	89 28       	or	r8, r9
    3a42:	59 f0       	breq	.+22     	; 0x3a5a <mc_line+0x188>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3a44:	60 ec       	ldi	r22, 0xC0	; 192
    3a46:	71 ee       	ldi	r23, 0xE1	; 225
    3a48:	84 e6       	ldi	r24, 0x64	; 100
    3a4a:	9c e4       	ldi	r25, 0x4C	; 76
    3a4c:	29 89       	ldd	r18, Y+17	; 0x11
    3a4e:	3a 89       	ldd	r19, Y+18	; 0x12
    3a50:	4b 89       	ldd	r20, Y+19	; 0x13
    3a52:	5c 89       	ldd	r21, Y+20	; 0x14
    3a54:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    3a58:	4a c0       	rjmp	.+148    	; 0x3aee <mc_line+0x21c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    3a5a:	c8 01       	movw	r24, r16
    3a5c:	b7 01       	movw	r22, r14
    3a5e:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    3a62:	29 85       	ldd	r18, Y+9	; 0x09
    3a64:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a66:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a68:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a6a:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    3a6e:	0e 94 90 45 	call	0x8b20	; 0x8b20 <square>
    3a72:	3b 01       	movw	r6, r22
    3a74:	4c 01       	movw	r8, r24
    3a76:	c6 01       	movw	r24, r12
    3a78:	b5 01       	movw	r22, r10
    3a7a:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    3a7e:	2d 81       	ldd	r18, Y+5	; 0x05
    3a80:	3e 81       	ldd	r19, Y+6	; 0x06
    3a82:	4f 81       	ldd	r20, Y+7	; 0x07
    3a84:	58 85       	ldd	r21, Y+8	; 0x08
    3a86:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    3a8a:	0e 94 90 45 	call	0x8b20	; 0x8b20 <square>
    3a8e:	5b 01       	movw	r10, r22
    3a90:	6c 01       	movw	r12, r24
    3a92:	c2 01       	movw	r24, r4
    3a94:	b1 01       	movw	r22, r2
    3a96:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    3a9a:	29 81       	ldd	r18, Y+1	; 0x01
    3a9c:	3a 81       	ldd	r19, Y+2	; 0x02
    3a9e:	4b 81       	ldd	r20, Y+3	; 0x03
    3aa0:	5c 81       	ldd	r21, Y+4	; 0x04
    3aa2:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    3aa6:	0e 94 90 45 	call	0x8b20	; 0x8b20 <square>
    3aaa:	7b 01       	movw	r14, r22
    3aac:	8c 01       	movw	r16, r24
    3aae:	c4 01       	movw	r24, r8
    3ab0:	b3 01       	movw	r22, r6
    3ab2:	a6 01       	movw	r20, r12
    3ab4:	95 01       	movw	r18, r10
    3ab6:	0e 94 84 41 	call	0x8308	; 0x8308 <__addsf3>
    3aba:	a8 01       	movw	r20, r16
    3abc:	97 01       	movw	r18, r14
    3abe:	0e 94 84 41 	call	0x8308	; 0x8308 <__addsf3>
    3ac2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <sqrt>
    3ac6:	60 93 a9 21 	sts	0x21A9, r22
    3aca:	70 93 aa 21 	sts	0x21AA, r23
    3ace:	80 93 ab 21 	sts	0x21AB, r24
    3ad2:	90 93 ac 21 	sts	0x21AC, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3ad6:	29 89       	ldd	r18, Y+17	; 0x11
    3ad8:	3a 89       	ldd	r19, Y+18	; 0x12
    3ada:	4b 89       	ldd	r20, Y+19	; 0x13
    3adc:	5c 89       	ldd	r21, Y+20	; 0x14
    3ade:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	34 e2       	ldi	r19, 0x24	; 36
    3ae6:	44 e7       	ldi	r20, 0x74	; 116
    3ae8:	59 e4       	ldi	r21, 0x49	; 73
    3aea:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    3aee:	0e 94 b5 44 	call	0x896a	; 0x896a <lround>
    3af2:	60 93 a5 21 	sts	0x21A5, r22
    3af6:	70 93 a6 21 	sts	0x21A6, r23
    3afa:	80 93 a7 21 	sts	0x21A7, r24
    3afe:	90 93 a8 21 	sts	0x21A8, r25
	}
	mc.line_state = MC_STATE_NEW;
    3b02:	81 e0       	ldi	r24, 0x01	; 1
    3b04:	80 93 80 21 	sts	0x2180, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3b08:	e1 e8       	ldi	r30, 0x81	; 129
    3b0a:	f1 e2       	ldi	r31, 0x21	; 33
    3b0c:	df 01       	movw	r26, r30
    3b0e:	1c 96       	adiw	r26, 0x0c	; 12
    3b10:	8c e0       	ldi	r24, 0x0C	; 12
    3b12:	0d 90       	ld	r0, X+
    3b14:	01 92       	st	Z+, r0
    3b16:	81 50       	subi	r24, 0x01	; 1
    3b18:	e1 f7       	brne	.-8      	; 0x3b12 <mc_line+0x240>
	return (mc_line_continue());
    3b1a:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <mc_line_continue>
}
    3b1e:	64 96       	adiw	r28, 0x14	; 20
    3b20:	cd bf       	out	0x3d, r28	; 61
    3b22:	de bf       	out	0x3e, r29	; 62
    3b24:	cf 91       	pop	r28
    3b26:	df 91       	pop	r29
    3b28:	1f 91       	pop	r17
    3b2a:	0f 91       	pop	r16
    3b2c:	ff 90       	pop	r15
    3b2e:	ef 90       	pop	r14
    3b30:	df 90       	pop	r13
    3b32:	cf 90       	pop	r12
    3b34:	bf 90       	pop	r11
    3b36:	af 90       	pop	r10
    3b38:	9f 90       	pop	r9
    3b3a:	8f 90       	pop	r8
    3b3c:	7f 90       	pop	r7
    3b3e:	6f 90       	pop	r6
    3b40:	5f 90       	pop	r5
    3b42:	4f 90       	pop	r4
    3b44:	3f 90       	pop	r3
    3b46:	2f 90       	pop	r2
    3b48:	08 95       	ret

00003b4a <mc_arc_continue>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continue() 
{
    3b4a:	8f 92       	push	r8
    3b4c:	9f 92       	push	r9
    3b4e:	af 92       	push	r10
    3b50:	bf 92       	push	r11
    3b52:	cf 92       	push	r12
    3b54:	df 92       	push	r13
    3b56:	ef 92       	push	r14
    3b58:	ff 92       	push	r15
    3b5a:	0f 93       	push	r16
    3b5c:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3b5e:	80 91 e6 24 	lds	r24, 0x24E6
    3b62:	88 23       	and	r24, r24
    3b64:	19 f4       	brne	.+6      	; 0x3b6c <mc_arc_continue+0x22>
    3b66:	22 e0       	ldi	r18, 0x02	; 2
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	dd c0       	rjmp	.+442    	; 0x3d26 <mc_arc_continue+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3b6c:	81 30       	cpi	r24, 0x01	; 1
    3b6e:	09 f0       	breq	.+2      	; 0x3b72 <mc_arc_continue+0x28>
    3b70:	ca c0       	rjmp	.+404    	; 0x3d06 <mc_arc_continue+0x1bc>
		ma.segment_counter=0;
    3b72:	10 92 e9 24 	sts	0x24E9, r1
    3b76:	10 92 ea 24 	sts	0x24EA, r1
		ma.arc_state = MC_STATE_RUNNING;
    3b7a:	82 e0       	ldi	r24, 0x02	; 2
    3b7c:	80 93 e6 24 	sts	0x24E6, r24
    3b80:	c2 c0       	rjmp	.+388    	; 0x3d06 <mc_arc_continue+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3b82:	0e 94 08 31 	call	0x6210	; 0x6210 <mv_test_move_buffer_full>
    3b86:	88 23       	and	r24, r24
    3b88:	19 f0       	breq	.+6      	; 0x3b90 <mc_arc_continue+0x46>
    3b8a:	21 e0       	ldi	r18, 0x01	; 1
    3b8c:	30 e0       	ldi	r19, 0x00	; 0
    3b8e:	cb c0       	rjmp	.+406    	; 0x3d26 <mc_arc_continue+0x1dc>
			return (TG_EAGAIN);
		}
		ma.segment_counter++;
    3b90:	80 91 e9 24 	lds	r24, 0x24E9
    3b94:	90 91 ea 24 	lds	r25, 0x24EA
    3b98:	01 96       	adiw	r24, 0x01	; 1
    3b9a:	80 93 e9 24 	sts	0x24E9, r24
    3b9e:	90 93 ea 24 	sts	0x24EA, r25
		ma.theta += ma.theta_per_segment;
    3ba2:	60 91 0b 25 	lds	r22, 0x250B
    3ba6:	70 91 0c 25 	lds	r23, 0x250C
    3baa:	80 91 0d 25 	lds	r24, 0x250D
    3bae:	90 91 0e 25 	lds	r25, 0x250E
    3bb2:	20 91 17 25 	lds	r18, 0x2517
    3bb6:	30 91 18 25 	lds	r19, 0x2518
    3bba:	40 91 19 25 	lds	r20, 0x2519
    3bbe:	50 91 1a 25 	lds	r21, 0x251A
    3bc2:	0e 94 84 41 	call	0x8308	; 0x8308 <__addsf3>
    3bc6:	7b 01       	movw	r14, r22
    3bc8:	8c 01       	movw	r16, r24
    3bca:	cb 01       	movw	r24, r22
    3bcc:	d8 01       	movw	r26, r16
    3bce:	80 93 0b 25 	sts	0x250B, r24
    3bd2:	90 93 0c 25 	sts	0x250C, r25
    3bd6:	a0 93 0d 25 	sts	0x250D, r26
    3bda:	b0 93 0e 25 	sts	0x250E, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3bde:	b7 01       	movw	r22, r14
    3be0:	c8 01       	movw	r24, r16
    3be2:	0e 94 48 45 	call	0x8a90	; 0x8a90 <sin>
    3be6:	80 90 0f 25 	lds	r8, 0x250F
    3bea:	90 90 10 25 	lds	r9, 0x2510
    3bee:	a0 90 11 25 	lds	r10, 0x2511
    3bf2:	b0 90 12 25 	lds	r11, 0x2512
    3bf6:	c0 90 ed 24 	lds	r12, 0x24ED
    3bfa:	d0 90 ee 24 	lds	r13, 0x24EE
    3bfe:	cc 0c       	add	r12, r12
    3c00:	dd 1c       	adc	r13, r13
    3c02:	cc 0c       	add	r12, r12
    3c04:	dd 1c       	adc	r13, r13
    3c06:	26 ee       	ldi	r18, 0xE6	; 230
    3c08:	34 e2       	ldi	r19, 0x24	; 36
    3c0a:	c2 0e       	add	r12, r18
    3c0c:	d3 1e       	adc	r13, r19
    3c0e:	a5 01       	movw	r20, r10
    3c10:	94 01       	movw	r18, r8
    3c12:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    3c16:	9b 01       	movw	r18, r22
    3c18:	ac 01       	movw	r20, r24
    3c1a:	60 91 03 25 	lds	r22, 0x2503
    3c1e:	70 91 04 25 	lds	r23, 0x2504
    3c22:	80 91 05 25 	lds	r24, 0x2505
    3c26:	90 91 06 25 	lds	r25, 0x2506
    3c2a:	0e 94 84 41 	call	0x8308	; 0x8308 <__addsf3>
    3c2e:	f6 01       	movw	r30, r12
    3c30:	65 87       	std	Z+13, r22	; 0x0d
    3c32:	76 87       	std	Z+14, r23	; 0x0e
    3c34:	87 87       	std	Z+15, r24	; 0x0f
    3c36:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3c38:	b7 01       	movw	r22, r14
    3c3a:	c8 01       	movw	r24, r16
    3c3c:	0e 94 27 42 	call	0x844e	; 0x844e <cos>
    3c40:	00 91 ef 24 	lds	r16, 0x24EF
    3c44:	10 91 f0 24 	lds	r17, 0x24F0
    3c48:	00 0f       	add	r16, r16
    3c4a:	11 1f       	adc	r17, r17
    3c4c:	00 0f       	add	r16, r16
    3c4e:	11 1f       	adc	r17, r17
    3c50:	0a 51       	subi	r16, 0x1A	; 26
    3c52:	1b 4d       	sbci	r17, 0xDB	; 219
    3c54:	a5 01       	movw	r20, r10
    3c56:	94 01       	movw	r18, r8
    3c58:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    3c5c:	9b 01       	movw	r18, r22
    3c5e:	ac 01       	movw	r20, r24
    3c60:	60 91 07 25 	lds	r22, 0x2507
    3c64:	70 91 08 25 	lds	r23, 0x2508
    3c68:	80 91 09 25 	lds	r24, 0x2509
    3c6c:	90 91 0a 25 	lds	r25, 0x250A
    3c70:	0e 94 84 41 	call	0x8308	; 0x8308 <__addsf3>
    3c74:	f8 01       	movw	r30, r16
    3c76:	65 87       	std	Z+13, r22	; 0x0d
    3c78:	76 87       	std	Z+14, r23	; 0x0e
    3c7a:	87 87       	std	Z+15, r24	; 0x0f
    3c7c:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3c7e:	00 91 f1 24 	lds	r16, 0x24F1
    3c82:	10 91 f2 24 	lds	r17, 0x24F2
    3c86:	00 0f       	add	r16, r16
    3c88:	11 1f       	adc	r17, r17
    3c8a:	00 0f       	add	r16, r16
    3c8c:	11 1f       	adc	r17, r17
    3c8e:	0a 51       	subi	r16, 0x1A	; 26
    3c90:	1b 4d       	sbci	r17, 0xDB	; 219
    3c92:	f8 01       	movw	r30, r16
    3c94:	65 85       	ldd	r22, Z+13	; 0x0d
    3c96:	76 85       	ldd	r23, Z+14	; 0x0e
    3c98:	87 85       	ldd	r24, Z+15	; 0x0f
    3c9a:	90 89       	ldd	r25, Z+16	; 0x10
    3c9c:	20 91 1b 25 	lds	r18, 0x251B
    3ca0:	30 91 1c 25 	lds	r19, 0x251C
    3ca4:	40 91 1d 25 	lds	r20, 0x251D
    3ca8:	50 91 1e 25 	lds	r21, 0x251E
    3cac:	0e 94 84 41 	call	0x8308	; 0x8308 <__addsf3>
    3cb0:	f8 01       	movw	r30, r16
    3cb2:	65 87       	std	Z+13, r22	; 0x0d
    3cb4:	76 87       	std	Z+14, r23	; 0x0e
    3cb6:	87 87       	std	Z+15, r24	; 0x0f
    3cb8:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    3cba:	60 91 f3 24 	lds	r22, 0x24F3
    3cbe:	70 91 f4 24 	lds	r23, 0x24F4
    3cc2:	80 91 f5 24 	lds	r24, 0x24F5
    3cc6:	90 91 f6 24 	lds	r25, 0x24F6
    3cca:	20 91 f7 24 	lds	r18, 0x24F7
    3cce:	30 91 f8 24 	lds	r19, 0x24F8
    3cd2:	40 91 f9 24 	lds	r20, 0x24F9
    3cd6:	50 91 fa 24 	lds	r21, 0x24FA
    3cda:	e0 90 fb 24 	lds	r14, 0x24FB
    3cde:	f0 90 fc 24 	lds	r15, 0x24FC
    3ce2:	00 91 fd 24 	lds	r16, 0x24FD
    3ce6:	10 91 fe 24 	lds	r17, 0x24FE
    3cea:	a0 90 13 25 	lds	r10, 0x2513
    3cee:	b0 90 14 25 	lds	r11, 0x2514
    3cf2:	c0 90 15 25 	lds	r12, 0x2515
    3cf6:	d0 90 16 25 	lds	r13, 0x2516
    3cfa:	80 90 eb 24 	lds	r8, 0x24EB
    3cfe:	90 90 ec 24 	lds	r9, 0x24EC
    3d02:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3d06:	20 91 e9 24 	lds	r18, 0x24E9
    3d0a:	30 91 ea 24 	lds	r19, 0x24EA
    3d0e:	80 91 e7 24 	lds	r24, 0x24E7
    3d12:	90 91 e8 24 	lds	r25, 0x24E8
    3d16:	82 17       	cp	r24, r18
    3d18:	93 07       	cpc	r25, r19
    3d1a:	0c f0       	brlt	.+2      	; 0x3d1e <mc_arc_continue+0x1d4>
    3d1c:	32 cf       	rjmp	.-412    	; 0x3b82 <mc_arc_continue+0x38>
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3d1e:	10 92 e6 24 	sts	0x24E6, r1
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3d26:	c9 01       	movw	r24, r18
    3d28:	1f 91       	pop	r17
    3d2a:	0f 91       	pop	r16
    3d2c:	ff 90       	pop	r15
    3d2e:	ef 90       	pop	r14
    3d30:	df 90       	pop	r13
    3d32:	cf 90       	pop	r12
    3d34:	bf 90       	pop	r11
    3d36:	af 90       	pop	r10
    3d38:	9f 90       	pop	r9
    3d3a:	8f 90       	pop	r8
    3d3c:	08 95       	ret

00003d3e <mc_arc>:
 */

int mc_arc(double theta, double angular_travel, double radius, 
		   double linear_travel, int axis_1, int axis_2, int axis_linear, 
		   double feed_rate, int invert_feed_rate)
{
    3d3e:	2f 92       	push	r2
    3d40:	3f 92       	push	r3
    3d42:	4f 92       	push	r4
    3d44:	5f 92       	push	r5
    3d46:	6f 92       	push	r6
    3d48:	7f 92       	push	r7
    3d4a:	8f 92       	push	r8
    3d4c:	9f 92       	push	r9
    3d4e:	af 92       	push	r10
    3d50:	bf 92       	push	r11
    3d52:	cf 92       	push	r12
    3d54:	df 92       	push	r13
    3d56:	ef 92       	push	r14
    3d58:	ff 92       	push	r15
    3d5a:	0f 93       	push	r16
    3d5c:	1f 93       	push	r17
    3d5e:	df 93       	push	r29
    3d60:	cf 93       	push	r28
    3d62:	cd b7       	in	r28, 0x3d	; 61
    3d64:	de b7       	in	r29, 0x3e	; 62
    3d66:	28 97       	sbiw	r28, 0x08	; 8
    3d68:	cd bf       	out	0x3d, r28	; 61
    3d6a:	de bf       	out	0x3e, r29	; 62
    3d6c:	69 83       	std	Y+1, r22	; 0x01
    3d6e:	7a 83       	std	Y+2, r23	; 0x02
    3d70:	8b 83       	std	Y+3, r24	; 0x03
    3d72:	9c 83       	std	Y+4, r25	; 0x04
    3d74:	29 01       	movw	r4, r18
    3d76:	3a 01       	movw	r6, r20
    3d78:	ed 82       	std	Y+5, r14	; 0x05
    3d7a:	fe 82       	std	Y+6, r15	; 0x06
    3d7c:	0f 83       	std	Y+7, r16	; 0x07
    3d7e:	18 87       	std	Y+8, r17	; 0x08
    3d80:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3d82:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3d84:	60 93 0b 25 	sts	0x250B, r22
    3d88:	70 93 0c 25 	sts	0x250C, r23
    3d8c:	80 93 0d 25 	sts	0x250D, r24
    3d90:	90 93 0e 25 	sts	0x250E, r25
	ma.radius = radius;
    3d94:	e0 92 0f 25 	sts	0x250F, r14
    3d98:	f0 92 10 25 	sts	0x2510, r15
    3d9c:	00 93 11 25 	sts	0x2511, r16
    3da0:	10 93 12 25 	sts	0x2512, r17
	ma.angular_travel = angular_travel;
    3da4:	20 93 1f 25 	sts	0x251F, r18
    3da8:	30 93 20 25 	sts	0x2520, r19
    3dac:	40 93 21 25 	sts	0x2521, r20
    3db0:	50 93 22 25 	sts	0x2522, r21
	ma.linear_travel = linear_travel;
    3db4:	a0 92 23 25 	sts	0x2523, r10
    3db8:	b0 92 24 25 	sts	0x2524, r11
    3dbc:	c0 92 25 25 	sts	0x2525, r12
    3dc0:	d0 92 26 25 	sts	0x2526, r13
	ma.feed_rate = feed_rate;
    3dc4:	8a a1       	ldd	r24, Y+34	; 0x22
    3dc6:	9b a1       	ldd	r25, Y+35	; 0x23
    3dc8:	ac a1       	ldd	r26, Y+36	; 0x24
    3dca:	bd a1       	ldd	r27, Y+37	; 0x25
    3dcc:	80 93 13 25 	sts	0x2513, r24
    3dd0:	90 93 14 25 	sts	0x2514, r25
    3dd4:	a0 93 15 25 	sts	0x2515, r26
    3dd8:	b0 93 16 25 	sts	0x2516, r27
	ma.invert_feed_rate = invert_feed_rate;
    3ddc:	ae a1       	ldd	r26, Y+38	; 0x26
    3dde:	bf a1       	ldd	r27, Y+39	; 0x27
    3de0:	a0 93 eb 24 	sts	0x24EB, r26
    3de4:	b0 93 ec 24 	sts	0x24EC, r27
	ma.axis_1 = axis_1;
    3de8:	80 92 ed 24 	sts	0x24ED, r8
    3dec:	90 92 ee 24 	sts	0x24EE, r9
	ma.axis_2 = axis_2;
    3df0:	20 92 ef 24 	sts	0x24EF, r2
    3df4:	30 92 f0 24 	sts	0x24F0, r3
	ma.axis_linear = axis_linear;
    3df8:	e8 a1       	ldd	r30, Y+32	; 0x20
    3dfa:	f9 a1       	ldd	r31, Y+33	; 0x21
    3dfc:	e0 93 f1 24 	sts	0x24F1, r30
    3e00:	f0 93 f2 24 	sts	0x24F2, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3e04:	ca 01       	movw	r24, r20
    3e06:	b9 01       	movw	r22, r18
    3e08:	a8 01       	movw	r20, r16
    3e0a:	97 01       	movw	r18, r14
    3e0c:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    3e10:	7b 01       	movw	r14, r22
    3e12:	8c 01       	movw	r16, r24
    3e14:	c6 01       	movw	r24, r12
    3e16:	b5 01       	movw	r22, r10
    3e18:	0e 94 92 42 	call	0x8524	; 0x8524 <__fixsfsi>
    3e1c:	97 ff       	sbrs	r25, 7
    3e1e:	07 c0       	rjmp	.+14     	; 0x3e2e <mc_arc+0xf0>
    3e20:	90 95       	com	r25
    3e22:	80 95       	com	r24
    3e24:	70 95       	com	r23
    3e26:	61 95       	neg	r22
    3e28:	7f 4f       	sbci	r23, 0xFF	; 255
    3e2a:	8f 4f       	sbci	r24, 0xFF	; 255
    3e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e2e:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    3e32:	9b 01       	movw	r18, r22
    3e34:	ac 01       	movw	r20, r24
    3e36:	c8 01       	movw	r24, r16
    3e38:	b7 01       	movw	r22, r14
    3e3a:	0e 94 20 44 	call	0x8840	; 0x8840 <hypot>
    3e3e:	7b 01       	movw	r14, r22
    3e40:	8c 01       	movw	r16, r24
    3e42:	60 93 ff 24 	sts	0x24FF, r22
    3e46:	70 93 00 25 	sts	0x2500, r23
    3e4a:	80 93 01 25 	sts	0x2501, r24
    3e4e:	90 93 02 25 	sts	0x2502, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3e52:	2a e0       	ldi	r18, 0x0A	; 10
    3e54:	37 ed       	ldi	r19, 0xD7	; 215
    3e56:	43 e2       	ldi	r20, 0x23	; 35
    3e58:	5c e3       	ldi	r21, 0x3C	; 60
    3e5a:	0e 94 23 42 	call	0x8446	; 0x8446 <__cmpsf2>
    3e5e:	88 23       	and	r24, r24
    3e60:	1c f4       	brge	.+6      	; 0x3e68 <mc_arc+0x12a>
    3e62:	20 e1       	ldi	r18, 0x10	; 16
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	fb c0       	rjmp	.+502    	; 0x405e <mc_arc+0x320>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3e68:	c8 01       	movw	r24, r16
    3e6a:	b7 01       	movw	r22, r14
    3e6c:	20 91 78 24 	lds	r18, 0x2478
    3e70:	30 91 79 24 	lds	r19, 0x2479
    3e74:	40 91 7a 24 	lds	r20, 0x247A
    3e78:	50 91 7b 24 	lds	r21, 0x247B
    3e7c:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    3e80:	0e 94 10 42 	call	0x8420	; 0x8420 <ceil>
    3e84:	0e 94 92 42 	call	0x8524	; 0x8524 <__fixsfsi>
    3e88:	8b 01       	movw	r16, r22
    3e8a:	60 93 e7 24 	sts	0x24E7, r22
    3e8e:	70 93 e8 24 	sts	0x24E8, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    3e92:	8e a1       	ldd	r24, Y+38	; 0x26
    3e94:	9f a1       	ldd	r25, Y+39	; 0x27
    3e96:	89 2b       	or	r24, r25
    3e98:	b9 f0       	breq	.+46     	; 0x3ec8 <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    3e9a:	b8 01       	movw	r22, r16
    3e9c:	88 27       	eor	r24, r24
    3e9e:	77 fd       	sbrc	r23, 7
    3ea0:	80 95       	com	r24
    3ea2:	98 2f       	mov	r25, r24
    3ea4:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    3ea8:	9b 01       	movw	r18, r22
    3eaa:	ac 01       	movw	r20, r24
    3eac:	6a a1       	ldd	r22, Y+34	; 0x22
    3eae:	7b a1       	ldd	r23, Y+35	; 0x23
    3eb0:	8c a1       	ldd	r24, Y+36	; 0x24
    3eb2:	9d a1       	ldd	r25, Y+37	; 0x25
    3eb4:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    3eb8:	60 93 13 25 	sts	0x2513, r22
    3ebc:	70 93 14 25 	sts	0x2514, r23
    3ec0:	80 93 15 25 	sts	0x2515, r24
    3ec4:	90 93 16 25 	sts	0x2516, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    3ec8:	b8 01       	movw	r22, r16
    3eca:	88 27       	eor	r24, r24
    3ecc:	77 fd       	sbrc	r23, 7
    3ece:	80 95       	com	r24
    3ed0:	98 2f       	mov	r25, r24
    3ed2:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    3ed6:	7b 01       	movw	r14, r22
    3ed8:	8c 01       	movw	r16, r24
    3eda:	c3 01       	movw	r24, r6
    3edc:	b2 01       	movw	r22, r4
    3ede:	a8 01       	movw	r20, r16
    3ee0:	97 01       	movw	r18, r14
    3ee2:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    3ee6:	60 93 17 25 	sts	0x2517, r22
    3eea:	70 93 18 25 	sts	0x2518, r23
    3eee:	80 93 19 25 	sts	0x2519, r24
    3ef2:	90 93 1a 25 	sts	0x251A, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    3ef6:	c6 01       	movw	r24, r12
    3ef8:	b5 01       	movw	r22, r10
    3efa:	a8 01       	movw	r20, r16
    3efc:	97 01       	movw	r18, r14
    3efe:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    3f02:	60 93 1b 25 	sts	0x251B, r22
    3f06:	70 93 1c 25 	sts	0x251C, r23
    3f0a:	80 93 1d 25 	sts	0x251D, r24
    3f0e:	90 93 1e 25 	sts	0x251E, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    3f12:	69 81       	ldd	r22, Y+1	; 0x01
    3f14:	7a 81       	ldd	r23, Y+2	; 0x02
    3f16:	8b 81       	ldd	r24, Y+3	; 0x03
    3f18:	9c 81       	ldd	r25, Y+4	; 0x04
    3f1a:	0e 94 48 45 	call	0x8a90	; 0x8a90 <sin>
    3f1e:	5b 01       	movw	r10, r22
    3f20:	6c 01       	movw	r12, r24
    3f22:	f4 01       	movw	r30, r8
    3f24:	ee 0f       	add	r30, r30
    3f26:	ff 1f       	adc	r31, r31
    3f28:	ee 0f       	add	r30, r30
    3f2a:	ff 1f       	adc	r31, r31
    3f2c:	e0 58       	subi	r30, 0x80	; 128
    3f2e:	fe 4d       	sbci	r31, 0xDE	; 222
    3f30:	61 81       	ldd	r22, Z+1	; 0x01
    3f32:	72 81       	ldd	r23, Z+2	; 0x02
    3f34:	83 81       	ldd	r24, Z+3	; 0x03
    3f36:	94 81       	ldd	r25, Z+4	; 0x04
    3f38:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    3f3c:	f4 01       	movw	r30, r8
    3f3e:	ee 0f       	add	r30, r30
    3f40:	ff 1f       	adc	r31, r31
    3f42:	e8 0d       	add	r30, r8
    3f44:	f9 1d       	adc	r31, r9
    3f46:	13 e0       	ldi	r17, 0x03	; 3
    3f48:	ee 0f       	add	r30, r30
    3f4a:	ff 1f       	adc	r31, r31
    3f4c:	1a 95       	dec	r17
    3f4e:	e1 f7       	brne	.-8      	; 0x3f48 <mc_arc+0x20a>
    3f50:	ea 58       	subi	r30, 0x8A	; 138
    3f52:	fb 4d       	sbci	r31, 0xDB	; 219
    3f54:	21 a1       	ldd	r18, Z+33	; 0x21
    3f56:	32 a1       	ldd	r19, Z+34	; 0x22
    3f58:	43 a1       	ldd	r20, Z+35	; 0x23
    3f5a:	54 a1       	ldd	r21, Z+36	; 0x24
    3f5c:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    3f60:	7b 01       	movw	r14, r22
    3f62:	8c 01       	movw	r16, r24
    3f64:	c6 01       	movw	r24, r12
    3f66:	b5 01       	movw	r22, r10
    3f68:	2d 81       	ldd	r18, Y+5	; 0x05
    3f6a:	3e 81       	ldd	r19, Y+6	; 0x06
    3f6c:	4f 81       	ldd	r20, Y+7	; 0x07
    3f6e:	58 85       	ldd	r21, Y+8	; 0x08
    3f70:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    3f74:	9b 01       	movw	r18, r22
    3f76:	ac 01       	movw	r20, r24
    3f78:	c8 01       	movw	r24, r16
    3f7a:	b7 01       	movw	r22, r14
    3f7c:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    3f80:	60 93 03 25 	sts	0x2503, r22
    3f84:	70 93 04 25 	sts	0x2504, r23
    3f88:	80 93 05 25 	sts	0x2505, r24
    3f8c:	90 93 06 25 	sts	0x2506, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    3f90:	69 81       	ldd	r22, Y+1	; 0x01
    3f92:	7a 81       	ldd	r23, Y+2	; 0x02
    3f94:	8b 81       	ldd	r24, Y+3	; 0x03
    3f96:	9c 81       	ldd	r25, Y+4	; 0x04
    3f98:	0e 94 27 42 	call	0x844e	; 0x844e <cos>
    3f9c:	5b 01       	movw	r10, r22
    3f9e:	6c 01       	movw	r12, r24
    3fa0:	f1 01       	movw	r30, r2
    3fa2:	ee 0f       	add	r30, r30
    3fa4:	ff 1f       	adc	r31, r31
    3fa6:	ee 0f       	add	r30, r30
    3fa8:	ff 1f       	adc	r31, r31
    3faa:	e0 58       	subi	r30, 0x80	; 128
    3fac:	fe 4d       	sbci	r31, 0xDE	; 222
    3fae:	61 81       	ldd	r22, Z+1	; 0x01
    3fb0:	72 81       	ldd	r23, Z+2	; 0x02
    3fb2:	83 81       	ldd	r24, Z+3	; 0x03
    3fb4:	94 81       	ldd	r25, Z+4	; 0x04
    3fb6:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    3fba:	f1 01       	movw	r30, r2
    3fbc:	ee 0f       	add	r30, r30
    3fbe:	ff 1f       	adc	r31, r31
    3fc0:	e2 0d       	add	r30, r2
    3fc2:	f3 1d       	adc	r31, r3
    3fc4:	53 e0       	ldi	r21, 0x03	; 3
    3fc6:	ee 0f       	add	r30, r30
    3fc8:	ff 1f       	adc	r31, r31
    3fca:	5a 95       	dec	r21
    3fcc:	e1 f7       	brne	.-8      	; 0x3fc6 <mc_arc+0x288>
    3fce:	ea 58       	subi	r30, 0x8A	; 138
    3fd0:	fb 4d       	sbci	r31, 0xDB	; 219
    3fd2:	21 a1       	ldd	r18, Z+33	; 0x21
    3fd4:	32 a1       	ldd	r19, Z+34	; 0x22
    3fd6:	43 a1       	ldd	r20, Z+35	; 0x23
    3fd8:	54 a1       	ldd	r21, Z+36	; 0x24
    3fda:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    3fde:	7b 01       	movw	r14, r22
    3fe0:	8c 01       	movw	r16, r24
    3fe2:	c6 01       	movw	r24, r12
    3fe4:	b5 01       	movw	r22, r10
    3fe6:	2d 81       	ldd	r18, Y+5	; 0x05
    3fe8:	3e 81       	ldd	r19, Y+6	; 0x06
    3fea:	4f 81       	ldd	r20, Y+7	; 0x07
    3fec:	58 85       	ldd	r21, Y+8	; 0x08
    3fee:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    3ff2:	9b 01       	movw	r18, r22
    3ff4:	ac 01       	movw	r20, r24
    3ff6:	c8 01       	movw	r24, r16
    3ff8:	b7 01       	movw	r22, r14
    3ffa:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    3ffe:	60 93 07 25 	sts	0x2507, r22
    4002:	70 93 08 25 	sts	0x2508, r23
    4006:	80 93 09 25 	sts	0x2509, r24
    400a:	90 93 0a 25 	sts	0x250A, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    400e:	e8 a1       	ldd	r30, Y+32	; 0x20
    4010:	f9 a1       	ldd	r31, Y+33	; 0x21
    4012:	ee 0f       	add	r30, r30
    4014:	ff 1f       	adc	r31, r31
    4016:	ee 0f       	add	r30, r30
    4018:	ff 1f       	adc	r31, r31
    401a:	8f 01       	movw	r16, r30
    401c:	0a 51       	subi	r16, 0x1A	; 26
    401e:	1b 4d       	sbci	r17, 0xDB	; 219
    4020:	e0 58       	subi	r30, 0x80	; 128
    4022:	fe 4d       	sbci	r31, 0xDE	; 222
    4024:	61 81       	ldd	r22, Z+1	; 0x01
    4026:	72 81       	ldd	r23, Z+2	; 0x02
    4028:	83 81       	ldd	r24, Z+3	; 0x03
    402a:	94 81       	ldd	r25, Z+4	; 0x04
    402c:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    4030:	20 91 c7 24 	lds	r18, 0x24C7
    4034:	30 91 c8 24 	lds	r19, 0x24C8
    4038:	40 91 c9 24 	lds	r20, 0x24C9
    403c:	50 91 ca 24 	lds	r21, 0x24CA
    4040:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    4044:	d8 01       	movw	r26, r16
    4046:	1d 96       	adiw	r26, 0x0d	; 13
    4048:	6d 93       	st	X+, r22
    404a:	7d 93       	st	X+, r23
    404c:	8d 93       	st	X+, r24
    404e:	9c 93       	st	X, r25
    4050:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    4052:	81 e0       	ldi	r24, 0x01	; 1
    4054:	80 93 e6 24 	sts	0x24E6, r24
	return (mc_arc_continue());
    4058:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <mc_arc_continue>
    405c:	9c 01       	movw	r18, r24
}
    405e:	c9 01       	movw	r24, r18
    4060:	28 96       	adiw	r28, 0x08	; 8
    4062:	cd bf       	out	0x3d, r28	; 61
    4064:	de bf       	out	0x3e, r29	; 62
    4066:	cf 91       	pop	r28
    4068:	df 91       	pop	r29
    406a:	1f 91       	pop	r17
    406c:	0f 91       	pop	r16
    406e:	ff 90       	pop	r15
    4070:	ef 90       	pop	r14
    4072:	df 90       	pop	r13
    4074:	cf 90       	pop	r12
    4076:	bf 90       	pop	r11
    4078:	af 90       	pop	r10
    407a:	9f 90       	pop	r9
    407c:	8f 90       	pop	r8
    407e:	7f 90       	pop	r7
    4080:	6f 90       	pop	r6
    4082:	5f 90       	pop	r5
    4084:	4f 90       	pop	r4
    4086:	3f 90       	pop	r3
    4088:	2f 90       	pop	r2
    408a:	08 95       	ret

0000408c <mc_arc_blocking>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc_blocking(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    408c:	2f 92       	push	r2
    408e:	3f 92       	push	r3
    4090:	4f 92       	push	r4
    4092:	5f 92       	push	r5
    4094:	6f 92       	push	r6
    4096:	7f 92       	push	r7
    4098:	8f 92       	push	r8
    409a:	9f 92       	push	r9
    409c:	af 92       	push	r10
    409e:	bf 92       	push	r11
    40a0:	cf 92       	push	r12
    40a2:	df 92       	push	r13
    40a4:	ef 92       	push	r14
    40a6:	ff 92       	push	r15
    40a8:	0f 93       	push	r16
    40aa:	1f 93       	push	r17
    40ac:	df 93       	push	r29
    40ae:	cf 93       	push	r28
    40b0:	cd b7       	in	r28, 0x3d	; 61
    40b2:	de b7       	in	r29, 0x3e	; 62
    40b4:	28 97       	sbiw	r28, 0x08	; 8
    40b6:	cd bf       	out	0x3d, r28	; 61
    40b8:	de bf       	out	0x3e, r29	; 62
    40ba:	69 83       	std	Y+1, r22	; 0x01
    40bc:	7a 83       	std	Y+2, r23	; 0x02
    40be:	8b 83       	std	Y+3, r24	; 0x03
    40c0:	9c 83       	std	Y+4, r25	; 0x04
    40c2:	29 01       	movw	r4, r18
    40c4:	3a 01       	movw	r6, r20
    40c6:	ed 82       	std	Y+5, r14	; 0x05
    40c8:	fe 82       	std	Y+6, r15	; 0x06
    40ca:	0f 83       	std	Y+7, r16	; 0x07
    40cc:	18 87       	std	Y+8, r17	; 0x08
    40ce:	2e 8c       	ldd	r2, Y+30	; 0x1e
    40d0:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    40d2:	60 93 0b 25 	sts	0x250B, r22
    40d6:	70 93 0c 25 	sts	0x250C, r23
    40da:	80 93 0d 25 	sts	0x250D, r24
    40de:	90 93 0e 25 	sts	0x250E, r25
	ma.radius = radius;
    40e2:	e0 92 0f 25 	sts	0x250F, r14
    40e6:	f0 92 10 25 	sts	0x2510, r15
    40ea:	00 93 11 25 	sts	0x2511, r16
    40ee:	10 93 12 25 	sts	0x2512, r17
	ma.angular_travel = angular_travel;
    40f2:	20 93 1f 25 	sts	0x251F, r18
    40f6:	30 93 20 25 	sts	0x2520, r19
    40fa:	40 93 21 25 	sts	0x2521, r20
    40fe:	50 93 22 25 	sts	0x2522, r21
	ma.linear_travel = linear_travel;
    4102:	a0 92 23 25 	sts	0x2523, r10
    4106:	b0 92 24 25 	sts	0x2524, r11
    410a:	c0 92 25 25 	sts	0x2525, r12
    410e:	d0 92 26 25 	sts	0x2526, r13
	ma.feed_rate = feed_rate;
    4112:	8a a1       	ldd	r24, Y+34	; 0x22
    4114:	9b a1       	ldd	r25, Y+35	; 0x23
    4116:	ac a1       	ldd	r26, Y+36	; 0x24
    4118:	bd a1       	ldd	r27, Y+37	; 0x25
    411a:	80 93 13 25 	sts	0x2513, r24
    411e:	90 93 14 25 	sts	0x2514, r25
    4122:	a0 93 15 25 	sts	0x2515, r26
    4126:	b0 93 16 25 	sts	0x2516, r27
	ma.invert_feed_rate = invert_feed_rate;
    412a:	ae a1       	ldd	r26, Y+38	; 0x26
    412c:	bf a1       	ldd	r27, Y+39	; 0x27
    412e:	a0 93 eb 24 	sts	0x24EB, r26
    4132:	b0 93 ec 24 	sts	0x24EC, r27
	ma.axis_1 = axis_1;
    4136:	80 92 ed 24 	sts	0x24ED, r8
    413a:	90 92 ee 24 	sts	0x24EE, r9
	ma.axis_2 = axis_2;
    413e:	20 92 ef 24 	sts	0x24EF, r2
    4142:	30 92 f0 24 	sts	0x24F0, r3
	ma.axis_linear = axis_linear;
    4146:	e8 a1       	ldd	r30, Y+32	; 0x20
    4148:	f9 a1       	ldd	r31, Y+33	; 0x21
    414a:	e0 93 f1 24 	sts	0x24F1, r30
    414e:	f0 93 f2 24 	sts	0x24F2, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    4152:	ca 01       	movw	r24, r20
    4154:	b9 01       	movw	r22, r18
    4156:	a8 01       	movw	r20, r16
    4158:	97 01       	movw	r18, r14
    415a:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    415e:	7b 01       	movw	r14, r22
    4160:	8c 01       	movw	r16, r24
    4162:	c6 01       	movw	r24, r12
    4164:	b5 01       	movw	r22, r10
    4166:	0e 94 92 42 	call	0x8524	; 0x8524 <__fixsfsi>
    416a:	97 ff       	sbrs	r25, 7
    416c:	07 c0       	rjmp	.+14     	; 0x417c <mc_arc_blocking+0xf0>
    416e:	90 95       	com	r25
    4170:	80 95       	com	r24
    4172:	70 95       	com	r23
    4174:	61 95       	neg	r22
    4176:	7f 4f       	sbci	r23, 0xFF	; 255
    4178:	8f 4f       	sbci	r24, 0xFF	; 255
    417a:	9f 4f       	sbci	r25, 0xFF	; 255
    417c:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    4180:	9b 01       	movw	r18, r22
    4182:	ac 01       	movw	r20, r24
    4184:	c8 01       	movw	r24, r16
    4186:	b7 01       	movw	r22, r14
    4188:	0e 94 20 44 	call	0x8840	; 0x8840 <hypot>
    418c:	7b 01       	movw	r14, r22
    418e:	8c 01       	movw	r16, r24
    4190:	60 93 ff 24 	sts	0x24FF, r22
    4194:	70 93 00 25 	sts	0x2500, r23
    4198:	80 93 01 25 	sts	0x2501, r24
    419c:	90 93 02 25 	sts	0x2502, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    41a0:	2a e0       	ldi	r18, 0x0A	; 10
    41a2:	37 ed       	ldi	r19, 0xD7	; 215
    41a4:	43 e2       	ldi	r20, 0x23	; 35
    41a6:	5c e3       	ldi	r21, 0x3C	; 60
    41a8:	0e 94 23 42 	call	0x8446	; 0x8446 <__cmpsf2>
    41ac:	88 23       	and	r24, r24
    41ae:	1c f4       	brge	.+6      	; 0x41b6 <mc_arc_blocking+0x12a>
    41b0:	20 e1       	ldi	r18, 0x10	; 16
    41b2:	30 e0       	ldi	r19, 0x00	; 0
    41b4:	c7 c1       	rjmp	.+910    	; 0x4544 <mc_arc_blocking+0x4b8>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    41b6:	c8 01       	movw	r24, r16
    41b8:	b7 01       	movw	r22, r14
    41ba:	20 91 78 24 	lds	r18, 0x2478
    41be:	30 91 79 24 	lds	r19, 0x2479
    41c2:	40 91 7a 24 	lds	r20, 0x247A
    41c6:	50 91 7b 24 	lds	r21, 0x247B
    41ca:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    41ce:	0e 94 10 42 	call	0x8420	; 0x8420 <ceil>
    41d2:	0e 94 92 42 	call	0x8524	; 0x8524 <__fixsfsi>
    41d6:	8b 01       	movw	r16, r22
    41d8:	60 93 e7 24 	sts	0x24E7, r22
    41dc:	70 93 e8 24 	sts	0x24E8, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    41e0:	2e a1       	ldd	r18, Y+38	; 0x26
    41e2:	3f a1       	ldd	r19, Y+39	; 0x27
    41e4:	23 2b       	or	r18, r19
    41e6:	b9 f0       	breq	.+46     	; 0x4216 <mc_arc_blocking+0x18a>
		ma.feed_rate *= ma.segments; 
    41e8:	b8 01       	movw	r22, r16
    41ea:	88 27       	eor	r24, r24
    41ec:	77 fd       	sbrc	r23, 7
    41ee:	80 95       	com	r24
    41f0:	98 2f       	mov	r25, r24
    41f2:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    41f6:	9b 01       	movw	r18, r22
    41f8:	ac 01       	movw	r20, r24
    41fa:	6a a1       	ldd	r22, Y+34	; 0x22
    41fc:	7b a1       	ldd	r23, Y+35	; 0x23
    41fe:	8c a1       	ldd	r24, Y+36	; 0x24
    4200:	9d a1       	ldd	r25, Y+37	; 0x25
    4202:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    4206:	60 93 13 25 	sts	0x2513, r22
    420a:	70 93 14 25 	sts	0x2514, r23
    420e:	80 93 15 25 	sts	0x2515, r24
    4212:	90 93 16 25 	sts	0x2516, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    4216:	b8 01       	movw	r22, r16
    4218:	88 27       	eor	r24, r24
    421a:	77 fd       	sbrc	r23, 7
    421c:	80 95       	com	r24
    421e:	98 2f       	mov	r25, r24
    4220:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    4224:	7b 01       	movw	r14, r22
    4226:	8c 01       	movw	r16, r24
    4228:	c3 01       	movw	r24, r6
    422a:	b2 01       	movw	r22, r4
    422c:	a8 01       	movw	r20, r16
    422e:	97 01       	movw	r18, r14
    4230:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    4234:	60 93 17 25 	sts	0x2517, r22
    4238:	70 93 18 25 	sts	0x2518, r23
    423c:	80 93 19 25 	sts	0x2519, r24
    4240:	90 93 1a 25 	sts	0x251A, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    4244:	c6 01       	movw	r24, r12
    4246:	b5 01       	movw	r22, r10
    4248:	a8 01       	movw	r20, r16
    424a:	97 01       	movw	r18, r14
    424c:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    4250:	60 93 1b 25 	sts	0x251B, r22
    4254:	70 93 1c 25 	sts	0x251C, r23
    4258:	80 93 1d 25 	sts	0x251D, r24
    425c:	90 93 1e 25 	sts	0x251E, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    4260:	69 81       	ldd	r22, Y+1	; 0x01
    4262:	7a 81       	ldd	r23, Y+2	; 0x02
    4264:	8b 81       	ldd	r24, Y+3	; 0x03
    4266:	9c 81       	ldd	r25, Y+4	; 0x04
    4268:	0e 94 48 45 	call	0x8a90	; 0x8a90 <sin>
    426c:	5b 01       	movw	r10, r22
    426e:	6c 01       	movw	r12, r24
    4270:	f4 01       	movw	r30, r8
    4272:	ee 0f       	add	r30, r30
    4274:	ff 1f       	adc	r31, r31
    4276:	ee 0f       	add	r30, r30
    4278:	ff 1f       	adc	r31, r31
    427a:	e0 58       	subi	r30, 0x80	; 128
    427c:	fe 4d       	sbci	r31, 0xDE	; 222
    427e:	61 81       	ldd	r22, Z+1	; 0x01
    4280:	72 81       	ldd	r23, Z+2	; 0x02
    4282:	83 81       	ldd	r24, Z+3	; 0x03
    4284:	94 81       	ldd	r25, Z+4	; 0x04
    4286:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    428a:	f4 01       	movw	r30, r8
    428c:	ee 0f       	add	r30, r30
    428e:	ff 1f       	adc	r31, r31
    4290:	e8 0d       	add	r30, r8
    4292:	f9 1d       	adc	r31, r9
    4294:	13 e0       	ldi	r17, 0x03	; 3
    4296:	ee 0f       	add	r30, r30
    4298:	ff 1f       	adc	r31, r31
    429a:	1a 95       	dec	r17
    429c:	e1 f7       	brne	.-8      	; 0x4296 <mc_arc_blocking+0x20a>
    429e:	ea 58       	subi	r30, 0x8A	; 138
    42a0:	fb 4d       	sbci	r31, 0xDB	; 219
    42a2:	21 a1       	ldd	r18, Z+33	; 0x21
    42a4:	32 a1       	ldd	r19, Z+34	; 0x22
    42a6:	43 a1       	ldd	r20, Z+35	; 0x23
    42a8:	54 a1       	ldd	r21, Z+36	; 0x24
    42aa:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    42ae:	7b 01       	movw	r14, r22
    42b0:	8c 01       	movw	r16, r24
    42b2:	c6 01       	movw	r24, r12
    42b4:	b5 01       	movw	r22, r10
    42b6:	2d 81       	ldd	r18, Y+5	; 0x05
    42b8:	3e 81       	ldd	r19, Y+6	; 0x06
    42ba:	4f 81       	ldd	r20, Y+7	; 0x07
    42bc:	58 85       	ldd	r21, Y+8	; 0x08
    42be:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    42c2:	9b 01       	movw	r18, r22
    42c4:	ac 01       	movw	r20, r24
    42c6:	c8 01       	movw	r24, r16
    42c8:	b7 01       	movw	r22, r14
    42ca:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    42ce:	60 93 03 25 	sts	0x2503, r22
    42d2:	70 93 04 25 	sts	0x2504, r23
    42d6:	80 93 05 25 	sts	0x2505, r24
    42da:	90 93 06 25 	sts	0x2506, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    42de:	69 81       	ldd	r22, Y+1	; 0x01
    42e0:	7a 81       	ldd	r23, Y+2	; 0x02
    42e2:	8b 81       	ldd	r24, Y+3	; 0x03
    42e4:	9c 81       	ldd	r25, Y+4	; 0x04
    42e6:	0e 94 27 42 	call	0x844e	; 0x844e <cos>
    42ea:	5b 01       	movw	r10, r22
    42ec:	6c 01       	movw	r12, r24
    42ee:	f1 01       	movw	r30, r2
    42f0:	ee 0f       	add	r30, r30
    42f2:	ff 1f       	adc	r31, r31
    42f4:	ee 0f       	add	r30, r30
    42f6:	ff 1f       	adc	r31, r31
    42f8:	e0 58       	subi	r30, 0x80	; 128
    42fa:	fe 4d       	sbci	r31, 0xDE	; 222
    42fc:	61 81       	ldd	r22, Z+1	; 0x01
    42fe:	72 81       	ldd	r23, Z+2	; 0x02
    4300:	83 81       	ldd	r24, Z+3	; 0x03
    4302:	94 81       	ldd	r25, Z+4	; 0x04
    4304:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    4308:	f1 01       	movw	r30, r2
    430a:	ee 0f       	add	r30, r30
    430c:	ff 1f       	adc	r31, r31
    430e:	e2 0d       	add	r30, r2
    4310:	f3 1d       	adc	r31, r3
    4312:	53 e0       	ldi	r21, 0x03	; 3
    4314:	ee 0f       	add	r30, r30
    4316:	ff 1f       	adc	r31, r31
    4318:	5a 95       	dec	r21
    431a:	e1 f7       	brne	.-8      	; 0x4314 <mc_arc_blocking+0x288>
    431c:	ea 58       	subi	r30, 0x8A	; 138
    431e:	fb 4d       	sbci	r31, 0xDB	; 219
    4320:	21 a1       	ldd	r18, Z+33	; 0x21
    4322:	32 a1       	ldd	r19, Z+34	; 0x22
    4324:	43 a1       	ldd	r20, Z+35	; 0x23
    4326:	54 a1       	ldd	r21, Z+36	; 0x24
    4328:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    432c:	7b 01       	movw	r14, r22
    432e:	8c 01       	movw	r16, r24
    4330:	c6 01       	movw	r24, r12
    4332:	b5 01       	movw	r22, r10
    4334:	2d 81       	ldd	r18, Y+5	; 0x05
    4336:	3e 81       	ldd	r19, Y+6	; 0x06
    4338:	4f 81       	ldd	r20, Y+7	; 0x07
    433a:	58 85       	ldd	r21, Y+8	; 0x08
    433c:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    4340:	9b 01       	movw	r18, r22
    4342:	ac 01       	movw	r20, r24
    4344:	c8 01       	movw	r24, r16
    4346:	b7 01       	movw	r22, r14
    4348:	0e 94 83 41 	call	0x8306	; 0x8306 <__subsf3>
    434c:	60 93 07 25 	sts	0x2507, r22
    4350:	70 93 08 25 	sts	0x2508, r23
    4354:	80 93 09 25 	sts	0x2509, r24
    4358:	90 93 0a 25 	sts	0x250A, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
    435c:	e8 a1       	ldd	r30, Y+32	; 0x20
    435e:	f9 a1       	ldd	r31, Y+33	; 0x21
    4360:	ee 0f       	add	r30, r30
    4362:	ff 1f       	adc	r31, r31
    4364:	ee 0f       	add	r30, r30
    4366:	ff 1f       	adc	r31, r31
    4368:	8f 01       	movw	r16, r30
    436a:	0a 51       	subi	r16, 0x1A	; 26
    436c:	1b 4d       	sbci	r17, 0xDB	; 219
    436e:	e0 58       	subi	r30, 0x80	; 128
    4370:	fe 4d       	sbci	r31, 0xDE	; 222
    4372:	61 81       	ldd	r22, Z+1	; 0x01
    4374:	72 81       	ldd	r23, Z+2	; 0x02
    4376:	83 81       	ldd	r24, Z+3	; 0x03
    4378:	94 81       	ldd	r25, Z+4	; 0x04
    437a:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    437e:	20 91 c7 24 	lds	r18, 0x24C7
    4382:	30 91 c8 24 	lds	r19, 0x24C8
    4386:	40 91 c9 24 	lds	r20, 0x24C9
    438a:	50 91 ca 24 	lds	r21, 0x24CA
    438e:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    4392:	d8 01       	movw	r26, r16
    4394:	1d 96       	adiw	r26, 0x0d	; 13
    4396:	6d 93       	st	X+, r22
    4398:	7d 93       	st	X+, r23
    439a:	8d 93       	st	X+, r24
    439c:	9c 93       	st	X, r25
    439e:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    43a0:	10 92 e9 24 	sts	0x24E9, r1
    43a4:	10 92 ea 24 	sts	0x24EA, r1
    43a8:	bf c0       	rjmp	.+382    	; 0x4528 <mc_arc_blocking+0x49c>
		ma.theta += ma.theta_per_segment;
    43aa:	60 91 0b 25 	lds	r22, 0x250B
    43ae:	70 91 0c 25 	lds	r23, 0x250C
    43b2:	80 91 0d 25 	lds	r24, 0x250D
    43b6:	90 91 0e 25 	lds	r25, 0x250E
    43ba:	20 91 17 25 	lds	r18, 0x2517
    43be:	30 91 18 25 	lds	r19, 0x2518
    43c2:	40 91 19 25 	lds	r20, 0x2519
    43c6:	50 91 1a 25 	lds	r21, 0x251A
    43ca:	0e 94 84 41 	call	0x8308	; 0x8308 <__addsf3>
    43ce:	7b 01       	movw	r14, r22
    43d0:	8c 01       	movw	r16, r24
    43d2:	cb 01       	movw	r24, r22
    43d4:	d8 01       	movw	r26, r16
    43d6:	80 93 0b 25 	sts	0x250B, r24
    43da:	90 93 0c 25 	sts	0x250C, r25
    43de:	a0 93 0d 25 	sts	0x250D, r26
    43e2:	b0 93 0e 25 	sts	0x250E, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    43e6:	b7 01       	movw	r22, r14
    43e8:	c8 01       	movw	r24, r16
    43ea:	0e 94 48 45 	call	0x8a90	; 0x8a90 <sin>
    43ee:	80 90 0f 25 	lds	r8, 0x250F
    43f2:	90 90 10 25 	lds	r9, 0x2510
    43f6:	a0 90 11 25 	lds	r10, 0x2511
    43fa:	b0 90 12 25 	lds	r11, 0x2512
    43fe:	c0 90 ed 24 	lds	r12, 0x24ED
    4402:	d0 90 ee 24 	lds	r13, 0x24EE
    4406:	cc 0c       	add	r12, r12
    4408:	dd 1c       	adc	r13, r13
    440a:	cc 0c       	add	r12, r12
    440c:	dd 1c       	adc	r13, r13
    440e:	e6 ee       	ldi	r30, 0xE6	; 230
    4410:	f4 e2       	ldi	r31, 0x24	; 36
    4412:	ce 0e       	add	r12, r30
    4414:	df 1e       	adc	r13, r31
    4416:	a5 01       	movw	r20, r10
    4418:	94 01       	movw	r18, r8
    441a:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    441e:	9b 01       	movw	r18, r22
    4420:	ac 01       	movw	r20, r24
    4422:	60 91 03 25 	lds	r22, 0x2503
    4426:	70 91 04 25 	lds	r23, 0x2504
    442a:	80 91 05 25 	lds	r24, 0x2505
    442e:	90 91 06 25 	lds	r25, 0x2506
    4432:	0e 94 84 41 	call	0x8308	; 0x8308 <__addsf3>
    4436:	d6 01       	movw	r26, r12
    4438:	1d 96       	adiw	r26, 0x0d	; 13
    443a:	6d 93       	st	X+, r22
    443c:	7d 93       	st	X+, r23
    443e:	8d 93       	st	X+, r24
    4440:	9c 93       	st	X, r25
    4442:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    4444:	b7 01       	movw	r22, r14
    4446:	c8 01       	movw	r24, r16
    4448:	0e 94 27 42 	call	0x844e	; 0x844e <cos>
    444c:	00 91 ef 24 	lds	r16, 0x24EF
    4450:	10 91 f0 24 	lds	r17, 0x24F0
    4454:	00 0f       	add	r16, r16
    4456:	11 1f       	adc	r17, r17
    4458:	00 0f       	add	r16, r16
    445a:	11 1f       	adc	r17, r17
    445c:	0a 51       	subi	r16, 0x1A	; 26
    445e:	1b 4d       	sbci	r17, 0xDB	; 219
    4460:	a5 01       	movw	r20, r10
    4462:	94 01       	movw	r18, r8
    4464:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    4468:	9b 01       	movw	r18, r22
    446a:	ac 01       	movw	r20, r24
    446c:	60 91 07 25 	lds	r22, 0x2507
    4470:	70 91 08 25 	lds	r23, 0x2508
    4474:	80 91 09 25 	lds	r24, 0x2509
    4478:	90 91 0a 25 	lds	r25, 0x250A
    447c:	0e 94 84 41 	call	0x8308	; 0x8308 <__addsf3>
    4480:	f8 01       	movw	r30, r16
    4482:	65 87       	std	Z+13, r22	; 0x0d
    4484:	76 87       	std	Z+14, r23	; 0x0e
    4486:	87 87       	std	Z+15, r24	; 0x0f
    4488:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    448a:	00 91 f1 24 	lds	r16, 0x24F1
    448e:	10 91 f2 24 	lds	r17, 0x24F2
    4492:	00 0f       	add	r16, r16
    4494:	11 1f       	adc	r17, r17
    4496:	00 0f       	add	r16, r16
    4498:	11 1f       	adc	r17, r17
    449a:	0a 51       	subi	r16, 0x1A	; 26
    449c:	1b 4d       	sbci	r17, 0xDB	; 219
    449e:	d8 01       	movw	r26, r16
    44a0:	1d 96       	adiw	r26, 0x0d	; 13
    44a2:	6d 91       	ld	r22, X+
    44a4:	7d 91       	ld	r23, X+
    44a6:	8d 91       	ld	r24, X+
    44a8:	9c 91       	ld	r25, X
    44aa:	50 97       	sbiw	r26, 0x10	; 16
    44ac:	20 91 1b 25 	lds	r18, 0x251B
    44b0:	30 91 1c 25 	lds	r19, 0x251C
    44b4:	40 91 1d 25 	lds	r20, 0x251D
    44b8:	50 91 1e 25 	lds	r21, 0x251E
    44bc:	0e 94 84 41 	call	0x8308	; 0x8308 <__addsf3>
    44c0:	f8 01       	movw	r30, r16
    44c2:	65 87       	std	Z+13, r22	; 0x0d
    44c4:	76 87       	std	Z+14, r23	; 0x0e
    44c6:	87 87       	std	Z+15, r24	; 0x0f
    44c8:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
    44ca:	60 91 f3 24 	lds	r22, 0x24F3
    44ce:	70 91 f4 24 	lds	r23, 0x24F4
    44d2:	80 91 f5 24 	lds	r24, 0x24F5
    44d6:	90 91 f6 24 	lds	r25, 0x24F6
    44da:	20 91 f7 24 	lds	r18, 0x24F7
    44de:	30 91 f8 24 	lds	r19, 0x24F8
    44e2:	40 91 f9 24 	lds	r20, 0x24F9
    44e6:	50 91 fa 24 	lds	r21, 0x24FA
    44ea:	e0 90 fb 24 	lds	r14, 0x24FB
    44ee:	f0 90 fc 24 	lds	r15, 0x24FC
    44f2:	00 91 fd 24 	lds	r16, 0x24FD
    44f6:	10 91 fe 24 	lds	r17, 0x24FE
    44fa:	a0 90 13 25 	lds	r10, 0x2513
    44fe:	b0 90 14 25 	lds	r11, 0x2514
    4502:	c0 90 15 25 	lds	r12, 0x2515
    4506:	d0 90 16 25 	lds	r13, 0x2516
    450a:	80 90 eb 24 	lds	r8, 0x24EB
    450e:	90 90 ec 24 	lds	r9, 0x24EC
    4512:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    4516:	80 91 e9 24 	lds	r24, 0x24E9
    451a:	90 91 ea 24 	lds	r25, 0x24EA
    451e:	01 96       	adiw	r24, 0x01	; 1
    4520:	80 93 e9 24 	sts	0x24E9, r24
    4524:	90 93 ea 24 	sts	0x24EA, r25
    4528:	20 91 e9 24 	lds	r18, 0x24E9
    452c:	30 91 ea 24 	lds	r19, 0x24EA
    4530:	80 91 e7 24 	lds	r24, 0x24E7
    4534:	90 91 e8 24 	lds	r25, 0x24E8
    4538:	82 17       	cp	r24, r18
    453a:	93 07       	cpc	r25, r19
    453c:	0c f0       	brlt	.+2      	; 0x4540 <mc_arc_blocking+0x4b4>
    453e:	35 cf       	rjmp	.-406    	; 0x43aa <mc_arc_blocking+0x31e>
    4540:	20 e0       	ldi	r18, 0x00	; 0
    4542:	30 e0       	ldi	r19, 0x00	; 0
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
		mc_line(ma.dtarget[X], ma.dtarget[Y], ma.dtarget[Z], ma.feed_rate, ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    4544:	c9 01       	movw	r24, r18
    4546:	28 96       	adiw	r28, 0x08	; 8
    4548:	cd bf       	out	0x3d, r28	; 61
    454a:	de bf       	out	0x3e, r29	; 62
    454c:	cf 91       	pop	r28
    454e:	df 91       	pop	r29
    4550:	1f 91       	pop	r17
    4552:	0f 91       	pop	r16
    4554:	ff 90       	pop	r15
    4556:	ef 90       	pop	r14
    4558:	df 90       	pop	r13
    455a:	cf 90       	pop	r12
    455c:	bf 90       	pop	r11
    455e:	af 90       	pop	r10
    4560:	9f 90       	pop	r9
    4562:	8f 90       	pop	r8
    4564:	7f 90       	pop	r7
    4566:	6f 90       	pop	r6
    4568:	5f 90       	pop	r5
    456a:	4f 90       	pop	r4
    456c:	3f 90       	pop	r3
    456e:	2f 90       	pop	r2
    4570:	08 95       	ret

00004572 <mc_line_blocking>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line_blocking(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    4572:	2f 92       	push	r2
    4574:	3f 92       	push	r3
    4576:	4f 92       	push	r4
    4578:	5f 92       	push	r5
    457a:	6f 92       	push	r6
    457c:	7f 92       	push	r7
    457e:	8f 92       	push	r8
    4580:	9f 92       	push	r9
    4582:	af 92       	push	r10
    4584:	bf 92       	push	r11
    4586:	cf 92       	push	r12
    4588:	df 92       	push	r13
    458a:	ef 92       	push	r14
    458c:	ff 92       	push	r15
    458e:	0f 93       	push	r16
    4590:	1f 93       	push	r17
    4592:	df 93       	push	r29
    4594:	cf 93       	push	r28
    4596:	cd b7       	in	r28, 0x3d	; 61
    4598:	de b7       	in	r29, 0x3e	; 62
    459a:	6c 97       	sbiw	r28, 0x1c	; 28
    459c:	cd bf       	out	0x3d, r28	; 61
    459e:	de bf       	out	0x3e, r29	; 62
    45a0:	2d 8b       	std	Y+21, r18	; 0x15
    45a2:	3e 8b       	std	Y+22, r19	; 0x16
    45a4:	4f 8b       	std	Y+23, r20	; 0x17
    45a6:	58 8f       	std	Y+24, r21	; 0x18
    45a8:	a9 8e       	std	Y+25, r10	; 0x19
    45aa:	ba 8e       	std	Y+26, r11	; 0x1a
    45ac:	cb 8e       	std	Y+27, r12	; 0x1b
    45ae:	dc 8e       	std	Y+28, r13	; 0x1c
	mc.target[X] = lround(x*CFG(X).steps_per_mm);
    45b0:	20 91 97 24 	lds	r18, 0x2497
    45b4:	30 91 98 24 	lds	r19, 0x2498
    45b8:	40 91 99 24 	lds	r20, 0x2499
    45bc:	50 91 9a 24 	lds	r21, 0x249A
    45c0:	29 8b       	std	Y+17, r18	; 0x11
    45c2:	3a 8b       	std	Y+18, r19	; 0x12
    45c4:	4b 8b       	std	Y+19, r20	; 0x13
    45c6:	5c 8b       	std	Y+20, r21	; 0x14
    45c8:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    45cc:	0e 94 b5 44 	call	0x896a	; 0x896a <lround>
    45d0:	2b 01       	movw	r4, r22
    45d2:	3c 01       	movw	r6, r24
    45d4:	40 92 8d 21 	sts	0x218D, r4
    45d8:	50 92 8e 21 	sts	0x218E, r5
    45dc:	60 92 8f 21 	sts	0x218F, r6
    45e0:	70 92 90 21 	sts	0x2190, r7
	mc.target[Y] = lround(y*CFG(Y).steps_per_mm);
    45e4:	80 91 af 24 	lds	r24, 0x24AF
    45e8:	90 91 b0 24 	lds	r25, 0x24B0
    45ec:	a0 91 b1 24 	lds	r26, 0x24B1
    45f0:	b0 91 b2 24 	lds	r27, 0x24B2
    45f4:	8d 87       	std	Y+13, r24	; 0x0d
    45f6:	9e 87       	std	Y+14, r25	; 0x0e
    45f8:	af 87       	std	Y+15, r26	; 0x0f
    45fa:	b8 8b       	std	Y+16, r27	; 0x10
    45fc:	6d 89       	ldd	r22, Y+21	; 0x15
    45fe:	7e 89       	ldd	r23, Y+22	; 0x16
    4600:	8f 89       	ldd	r24, Y+23	; 0x17
    4602:	98 8d       	ldd	r25, Y+24	; 0x18
    4604:	2d 85       	ldd	r18, Y+13	; 0x0d
    4606:	3e 85       	ldd	r19, Y+14	; 0x0e
    4608:	4f 85       	ldd	r20, Y+15	; 0x0f
    460a:	58 89       	ldd	r21, Y+16	; 0x10
    460c:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    4610:	0e 94 b5 44 	call	0x896a	; 0x896a <lround>
    4614:	5b 01       	movw	r10, r22
    4616:	6c 01       	movw	r12, r24
    4618:	a0 92 91 21 	sts	0x2191, r10
    461c:	b0 92 92 21 	sts	0x2192, r11
    4620:	c0 92 93 21 	sts	0x2193, r12
    4624:	d0 92 94 21 	sts	0x2194, r13
	mc.target[Z] = lround(z*CFG(Z).steps_per_mm); 
    4628:	20 91 c7 24 	lds	r18, 0x24C7
    462c:	30 91 c8 24 	lds	r19, 0x24C8
    4630:	40 91 c9 24 	lds	r20, 0x24C9
    4634:	50 91 ca 24 	lds	r21, 0x24CA
    4638:	29 87       	std	Y+9, r18	; 0x09
    463a:	3a 87       	std	Y+10, r19	; 0x0a
    463c:	4b 87       	std	Y+11, r20	; 0x0b
    463e:	5c 87       	std	Y+12, r21	; 0x0c
    4640:	c8 01       	movw	r24, r16
    4642:	b7 01       	movw	r22, r14
    4644:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    4648:	0e 94 b5 44 	call	0x896a	; 0x896a <lround>
    464c:	9b 01       	movw	r18, r22
    464e:	ac 01       	movw	r20, r24
    4650:	20 93 95 21 	sts	0x2195, r18
    4654:	30 93 96 21 	sts	0x2196, r19
    4658:	40 93 97 21 	sts	0x2197, r20
    465c:	50 93 98 21 	sts	0x2198, r21

	mc.steps[X] = mc.target[X]-mc.position[X];
    4660:	80 91 81 21 	lds	r24, 0x2181
    4664:	90 91 82 21 	lds	r25, 0x2182
    4668:	a0 91 83 21 	lds	r26, 0x2183
    466c:	b0 91 84 21 	lds	r27, 0x2184
    4670:	83 01       	movw	r16, r6
    4672:	72 01       	movw	r14, r4
    4674:	e8 1a       	sub	r14, r24
    4676:	f9 0a       	sbc	r15, r25
    4678:	0a 0b       	sbc	r16, r26
    467a:	1b 0b       	sbc	r17, r27
    467c:	ed 82       	std	Y+5, r14	; 0x05
    467e:	fe 82       	std	Y+6, r15	; 0x06
    4680:	0f 83       	std	Y+7, r16	; 0x07
    4682:	18 87       	std	Y+8, r17	; 0x08
    4684:	e0 92 99 21 	sts	0x2199, r14
    4688:	f0 92 9a 21 	sts	0x219A, r15
    468c:	00 93 9b 21 	sts	0x219B, r16
    4690:	10 93 9c 21 	sts	0x219C, r17
	mc.steps[Y] = mc.target[Y]-mc.position[Y];
    4694:	80 91 85 21 	lds	r24, 0x2185
    4698:	90 91 86 21 	lds	r25, 0x2186
    469c:	a0 91 87 21 	lds	r26, 0x2187
    46a0:	b0 91 88 21 	lds	r27, 0x2188
    46a4:	86 01       	movw	r16, r12
    46a6:	75 01       	movw	r14, r10
    46a8:	e8 1a       	sub	r14, r24
    46aa:	f9 0a       	sbc	r15, r25
    46ac:	0a 0b       	sbc	r16, r26
    46ae:	1b 0b       	sbc	r17, r27
    46b0:	e9 82       	std	Y+1, r14	; 0x01
    46b2:	fa 82       	std	Y+2, r15	; 0x02
    46b4:	0b 83       	std	Y+3, r16	; 0x03
    46b6:	1c 83       	std	Y+4, r17	; 0x04
    46b8:	e0 92 9d 21 	sts	0x219D, r14
    46bc:	f0 92 9e 21 	sts	0x219E, r15
    46c0:	00 93 9f 21 	sts	0x219F, r16
    46c4:	10 93 a0 21 	sts	0x21A0, r17
	mc.steps[Z] = mc.target[Z]-mc.position[Z];
    46c8:	80 91 89 21 	lds	r24, 0x2189
    46cc:	90 91 8a 21 	lds	r25, 0x218A
    46d0:	a0 91 8b 21 	lds	r26, 0x218B
    46d4:	b0 91 8c 21 	lds	r27, 0x218C
    46d8:	19 01       	movw	r2, r18
    46da:	2a 01       	movw	r4, r20
    46dc:	28 1a       	sub	r2, r24
    46de:	39 0a       	sbc	r3, r25
    46e0:	4a 0a       	sbc	r4, r26
    46e2:	5b 0a       	sbc	r5, r27
    46e4:	20 92 a1 21 	sts	0x21A1, r2
    46e8:	30 92 a2 21 	sts	0x21A2, r3
    46ec:	40 92 a3 21 	sts	0x21A3, r4
    46f0:	50 92 a4 21 	sts	0x21A4, r5

	if (invert_feed_rate) {
    46f4:	89 28       	or	r8, r9
    46f6:	59 f0       	breq	.+22     	; 0x470e <mc_line_blocking+0x19c>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    46f8:	60 ec       	ldi	r22, 0xC0	; 192
    46fa:	71 ee       	ldi	r23, 0xE1	; 225
    46fc:	84 e6       	ldi	r24, 0x64	; 100
    46fe:	9c e4       	ldi	r25, 0x4C	; 76
    4700:	29 8d       	ldd	r18, Y+25	; 0x19
    4702:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4704:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4706:	5c 8d       	ldd	r21, Y+28	; 0x1c
    4708:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    470c:	4e c0       	rjmp	.+156    	; 0x47aa <mc_line_blocking+0x238>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X]/CFG(X).steps_per_mm) + 
    470e:	6d 81       	ldd	r22, Y+5	; 0x05
    4710:	7e 81       	ldd	r23, Y+6	; 0x06
    4712:	8f 81       	ldd	r24, Y+7	; 0x07
    4714:	98 85       	ldd	r25, Y+8	; 0x08
    4716:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    471a:	29 89       	ldd	r18, Y+17	; 0x11
    471c:	3a 89       	ldd	r19, Y+18	; 0x12
    471e:	4b 89       	ldd	r20, Y+19	; 0x13
    4720:	5c 89       	ldd	r21, Y+20	; 0x14
    4722:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    4726:	0e 94 90 45 	call	0x8b20	; 0x8b20 <square>
    472a:	3b 01       	movw	r6, r22
    472c:	4c 01       	movw	r8, r24
    472e:	69 81       	ldd	r22, Y+1	; 0x01
    4730:	7a 81       	ldd	r23, Y+2	; 0x02
    4732:	8b 81       	ldd	r24, Y+3	; 0x03
    4734:	9c 81       	ldd	r25, Y+4	; 0x04
    4736:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    473a:	2d 85       	ldd	r18, Y+13	; 0x0d
    473c:	3e 85       	ldd	r19, Y+14	; 0x0e
    473e:	4f 85       	ldd	r20, Y+15	; 0x0f
    4740:	58 89       	ldd	r21, Y+16	; 0x10
    4742:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    4746:	0e 94 90 45 	call	0x8b20	; 0x8b20 <square>
    474a:	5b 01       	movw	r10, r22
    474c:	6c 01       	movw	r12, r24
    474e:	c2 01       	movw	r24, r4
    4750:	b1 01       	movw	r22, r2
    4752:	0e 94 c5 42 	call	0x858a	; 0x858a <__floatsisf>
    4756:	29 85       	ldd	r18, Y+9	; 0x09
    4758:	3a 85       	ldd	r19, Y+10	; 0x0a
    475a:	4b 85       	ldd	r20, Y+11	; 0x0b
    475c:	5c 85       	ldd	r21, Y+12	; 0x0c
    475e:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    4762:	0e 94 90 45 	call	0x8b20	; 0x8b20 <square>
    4766:	7b 01       	movw	r14, r22
    4768:	8c 01       	movw	r16, r24
    476a:	c4 01       	movw	r24, r8
    476c:	b3 01       	movw	r22, r6
    476e:	a6 01       	movw	r20, r12
    4770:	95 01       	movw	r18, r10
    4772:	0e 94 84 41 	call	0x8308	; 0x8308 <__addsf3>
    4776:	a8 01       	movw	r20, r16
    4778:	97 01       	movw	r18, r14
    477a:	0e 94 84 41 	call	0x8308	; 0x8308 <__addsf3>
    477e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <sqrt>
    4782:	60 93 a9 21 	sts	0x21A9, r22
    4786:	70 93 aa 21 	sts	0x21AA, r23
    478a:	80 93 ab 21 	sts	0x21AB, r24
    478e:	90 93 ac 21 	sts	0x21AC, r25
							   square(mc.steps[Y]/CFG(Y).steps_per_mm) + 
							   square(mc.steps[Z]/CFG(Z).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    4792:	29 8d       	ldd	r18, Y+25	; 0x19
    4794:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4796:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4798:	5c 8d       	ldd	r21, Y+28	; 0x1c
    479a:	0e 94 2a 42 	call	0x8454	; 0x8454 <__divsf3>
    479e:	20 e0       	ldi	r18, 0x00	; 0
    47a0:	34 e2       	ldi	r19, 0x24	; 36
    47a2:	44 e7       	ldi	r20, 0x74	; 116
    47a4:	59 e4       	ldi	r21, 0x49	; 73
    47a6:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    47aa:	0e 94 b5 44 	call	0x896a	; 0x896a <lround>
    47ae:	60 93 a5 21 	sts	0x21A5, r22
    47b2:	70 93 a6 21 	sts	0x21A6, r23
    47b6:	80 93 a7 21 	sts	0x21A7, r24
    47ba:	90 93 a8 21 	sts	0x21A8, r25
	}
    mv_queue_move_buffer(mc.steps[X], mc.steps[Y], mc.steps[Z], mc.microseconds); 
    47be:	a0 90 a5 21 	lds	r10, 0x21A5
    47c2:	b0 90 a6 21 	lds	r11, 0x21A6
    47c6:	c0 90 a7 21 	lds	r12, 0x21A7
    47ca:	d0 90 a8 21 	lds	r13, 0x21A8
    47ce:	6d 81       	ldd	r22, Y+5	; 0x05
    47d0:	7e 81       	ldd	r23, Y+6	; 0x06
    47d2:	8f 81       	ldd	r24, Y+7	; 0x07
    47d4:	98 85       	ldd	r25, Y+8	; 0x08
    47d6:	29 81       	ldd	r18, Y+1	; 0x01
    47d8:	3a 81       	ldd	r19, Y+2	; 0x02
    47da:	4b 81       	ldd	r20, Y+3	; 0x03
    47dc:	5c 81       	ldd	r21, Y+4	; 0x04
    47de:	82 01       	movw	r16, r4
    47e0:	71 01       	movw	r14, r2
    47e2:	0e 94 34 31 	call	0x6268	; 0x6268 <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    47e6:	e1 e8       	ldi	r30, 0x81	; 129
    47e8:	f1 e2       	ldi	r31, 0x21	; 33
    47ea:	df 01       	movw	r26, r30
    47ec:	1c 96       	adiw	r26, 0x0c	; 12
    47ee:	8c e0       	ldi	r24, 0x0C	; 12
    47f0:	0d 90       	ld	r0, X+
    47f2:	01 92       	st	Z+, r0
    47f4:	81 50       	subi	r24, 0x01	; 1
    47f6:	e1 f7       	brne	.-8      	; 0x47f0 <mc_line_blocking+0x27e>
	return (TG_OK);
}
    47f8:	80 e0       	ldi	r24, 0x00	; 0
    47fa:	90 e0       	ldi	r25, 0x00	; 0
    47fc:	6c 96       	adiw	r28, 0x1c	; 28
    47fe:	cd bf       	out	0x3d, r28	; 61
    4800:	de bf       	out	0x3e, r29	; 62
    4802:	cf 91       	pop	r28
    4804:	df 91       	pop	r29
    4806:	1f 91       	pop	r17
    4808:	0f 91       	pop	r16
    480a:	ff 90       	pop	r15
    480c:	ef 90       	pop	r14
    480e:	df 90       	pop	r13
    4810:	cf 90       	pop	r12
    4812:	bf 90       	pop	r11
    4814:	af 90       	pop	r10
    4816:	9f 90       	pop	r9
    4818:	8f 90       	pop	r8
    481a:	7f 90       	pop	r7
    481c:	6f 90       	pop	r6
    481e:	5f 90       	pop	r5
    4820:	4f 90       	pop	r4
    4822:	3f 90       	pop	r3
    4824:	2f 90       	pop	r2
    4826:	08 95       	ret

00004828 <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    4828:	e0 e6       	ldi	r30, 0x60	; 96
    482a:	f6 e0       	ldi	r31, 0x06	; 6
    482c:	80 e4       	ldi	r24, 0x40	; 64
    482e:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    4830:	80 e8       	ldi	r24, 0x80	; 128
    4832:	81 83       	std	Z+1, r24	; 0x01
}
    4834:	08 95       	ret

00004836 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    4836:	97 fd       	sbrc	r25, 7
    4838:	05 c0       	rjmp	.+10     	; 0x4844 <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    483a:	80 e8       	ldi	r24, 0x80	; 128
    483c:	e0 e6       	ldi	r30, 0x60	; 96
    483e:	f6 e0       	ldi	r31, 0x06	; 6
    4840:	85 83       	std	Z+5, r24	; 0x05
    4842:	04 c0       	rjmp	.+8      	; 0x484c <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    4844:	80 e8       	ldi	r24, 0x80	; 128
    4846:	e0 e6       	ldi	r30, 0x60	; 96
    4848:	f6 e0       	ldi	r31, 0x06	; 6
    484a:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    484c:	80 e4       	ldi	r24, 0x40	; 64
    484e:	e0 e6       	ldi	r30, 0x60	; 96
    4850:	f6 e0       	ldi	r31, 0x06	; 6
    4852:	85 83       	std	Z+5, r24	; 0x05
}
    4854:	08 95       	ret

00004856 <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    4856:	80 e4       	ldi	r24, 0x40	; 64
    4858:	e0 e6       	ldi	r30, 0x60	; 96
    485a:	f6 e0       	ldi	r31, 0x06	; 6
    485c:	86 83       	std	Z+6, r24	; 0x06
}
    485e:	08 95       	ret

00004860 <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    4860:	cf 93       	push	r28
    4862:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    4864:	10 92 33 24 	sts	0x2433, r1
	ax.exec_mutex = FALSE;
    4868:	10 92 32 24 	sts	0x2432, r1

	ax.a[X].port = &X_MOTOR_PORT;				// bind PORTs to structs
    486c:	80 e0       	ldi	r24, 0x00	; 0
    486e:	96 e0       	ldi	r25, 0x06	; 6
    4870:	80 93 42 24 	sts	0x2442, r24
    4874:	90 93 43 24 	sts	0x2443, r25
	ax.a[Y].port = &Y_MOTOR_PORT;
    4878:	80 ea       	ldi	r24, 0xA0	; 160
    487a:	96 e0       	ldi	r25, 0x06	; 6
    487c:	80 93 52 24 	sts	0x2452, r24
    4880:	90 93 53 24 	sts	0x2453, r25
	ax.a[Z].port = &Z_MOTOR_PORT;
    4884:	80 e8       	ldi	r24, 0x80	; 128
    4886:	96 e0       	ldi	r25, 0x06	; 6
    4888:	80 93 62 24 	sts	0x2462, r24
    488c:	90 93 63 24 	sts	0x2463, r25
	ax.a[A].port = &A_MOTOR_PORT;
    4890:	80 e6       	ldi	r24, 0x60	; 96
    4892:	96 e0       	ldi	r25, 0x06	; 6
    4894:	80 93 72 24 	sts	0x2472, r24
    4898:	90 93 73 24 	sts	0x2473, r25

	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
    489c:	80 e0       	ldi	r24, 0x00	; 0
    489e:	98 e0       	ldi	r25, 0x08	; 8
    48a0:	80 93 44 24 	sts	0x2444, r24
    48a4:	90 93 45 24 	sts	0x2445, r25
	ax.a[Y].timer = &Y_TIMER;
    48a8:	80 e0       	ldi	r24, 0x00	; 0
    48aa:	99 e0       	ldi	r25, 0x09	; 9
    48ac:	80 93 54 24 	sts	0x2454, r24
    48b0:	90 93 55 24 	sts	0x2455, r25
	ax.a[Z].timer = &Z_TIMER;
    48b4:	80 e0       	ldi	r24, 0x00	; 0
    48b6:	9a e0       	ldi	r25, 0x0A	; 10
    48b8:	80 93 64 24 	sts	0x2464, r24
    48bc:	90 93 65 24 	sts	0x2465, r25
	ax.a[A].timer = &A_TIMER;
    48c0:	80 e0       	ldi	r24, 0x00	; 0
    48c2:	9b e0       	ldi	r25, 0x0B	; 11
    48c4:	80 93 74 24 	sts	0x2474, r24
    48c8:	90 93 75 24 	sts	0x2475, r25
    48cc:	c6 e8       	ldi	r28, 0x86	; 134
    48ce:	d4 e2       	ldi	r29, 0x24	; 36
    48d0:	a0 e4       	ldi	r26, 0x40	; 64
    48d2:	b4 e2       	ldi	r27, 0x24	; 36

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    48d4:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    48d6:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    48d8:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    48da:	88 81       	ld	r24, Y
    48dc:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    48de:	12 96       	adiw	r26, 0x02	; 2
    48e0:	ed 91       	ld	r30, X+
    48e2:	fc 91       	ld	r31, X
    48e4:	13 97       	sbiw	r26, 0x03	; 3
    48e6:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    48e8:	12 96       	adiw	r26, 0x02	; 2
    48ea:	ed 91       	ld	r30, X+
    48ec:	fc 91       	ld	r31, X
    48ee:	13 97       	sbiw	r26, 0x03	; 3
    48f0:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_BITS_bm;		// set microstep bits
    48f2:	12 96       	adiw	r26, 0x02	; 2
    48f4:	ed 91       	ld	r30, X+
    48f6:	fc 91       	ld	r31, X
    48f8:	13 97       	sbiw	r26, 0x03	; 3
    48fa:	84 81       	ldd	r24, Z+4	; 0x04
    48fc:	88 61       	ori	r24, 0x18	; 24
    48fe:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4900:	12 96       	adiw	r26, 0x02	; 2
    4902:	ed 91       	ld	r30, X+
    4904:	fc 91       	ld	r31, X
    4906:	13 97       	sbiw	r26, 0x03	; 3
    4908:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    490a:	14 96       	adiw	r26, 0x04	; 4
    490c:	ed 91       	ld	r30, X+
    490e:	fc 91       	ld	r31, X
    4910:	15 97       	sbiw	r26, 0x05	; 5
    4912:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    4914:	14 96       	adiw	r26, 0x04	; 4
    4916:	ed 91       	ld	r30, X+
    4918:	fc 91       	ld	r31, X
    491a:	15 97       	sbiw	r26, 0x05	; 5
    491c:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    491e:	14 96       	adiw	r26, 0x04	; 4
    4920:	ed 91       	ld	r30, X+
    4922:	fc 91       	ld	r31, X
    4924:	15 97       	sbiw	r26, 0x05	; 5
    4926:	96 83       	std	Z+6, r25	; 0x06
    4928:	68 96       	adiw	r28, 0x18	; 24
    492a:	50 96       	adiw	r26, 0x10	; 16
	ax.a[X].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y].timer = &Y_TIMER;
	ax.a[Z].timer = &Z_TIMER;
	ax.a[A].timer = &A_TIMER;

	for (uint8_t i=X; i<=A; i++) {
    492c:	84 e2       	ldi	r24, 0x24	; 36
    492e:	c6 3e       	cpi	r28, 0xE6	; 230
    4930:	d8 07       	cpc	r29, r24
    4932:	99 f6       	brne	.-90     	; 0x48da <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    4934:	df 91       	pop	r29
    4936:	cf 91       	pop	r28
    4938:	08 95       	ret

0000493a <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    493a:	e8 2f       	mov	r30, r24
    493c:	f0 e0       	ldi	r31, 0x00	; 0
    493e:	84 e0       	ldi	r24, 0x04	; 4
    4940:	ee 0f       	add	r30, r30
    4942:	ff 1f       	adc	r31, r31
    4944:	8a 95       	dec	r24
    4946:	e1 f7       	brne	.-8      	; 0x4940 <st_set_polarity+0x6>
    4948:	ee 5c       	subi	r30, 0xCE	; 206
    494a:	fb 4d       	sbci	r31, 0xDB	; 219
    494c:	66 87       	std	Z+14, r22	; 0x0e
}
    494e:	08 95       	ret

00004950 <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X].step_counter = 0x00001000;
    4950:	26 e3       	ldi	r18, 0x36	; 54
    4952:	34 e2       	ldi	r19, 0x24	; 36
    4954:	80 e0       	ldi	r24, 0x00	; 0
    4956:	90 e1       	ldi	r25, 0x10	; 16
    4958:	a0 e0       	ldi	r26, 0x00	; 0
    495a:	b0 e0       	ldi	r27, 0x00	; 0
    495c:	80 93 36 24 	sts	0x2436, r24
    4960:	90 93 37 24 	sts	0x2437, r25
    4964:	a0 93 38 24 	sts	0x2438, r26
    4968:	b0 93 39 24 	sts	0x2439, r27
	ax.a[X].timer->PER = 0x1000;			// step rate (period)
    496c:	e0 91 44 24 	lds	r30, 0x2444
    4970:	f0 91 45 24 	lds	r31, 0x2445
    4974:	80 e0       	ldi	r24, 0x00	; 0
    4976:	90 e1       	ldi	r25, 0x10	; 16
    4978:	86 a3       	std	Z+38, r24	; 0x26
    497a:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X].timer->CTRLA = TC_CLK_ON;		// start clock
    497c:	41 e0       	ldi	r20, 0x01	; 1
    497e:	40 83       	st	Z, r20

	ax.a[Y].step_counter = 0x00000800;
    4980:	80 e0       	ldi	r24, 0x00	; 0
    4982:	98 e0       	ldi	r25, 0x08	; 8
    4984:	a0 e0       	ldi	r26, 0x00	; 0
    4986:	b0 e0       	ldi	r27, 0x00	; 0
    4988:	80 93 46 24 	sts	0x2446, r24
    498c:	90 93 47 24 	sts	0x2447, r25
    4990:	a0 93 48 24 	sts	0x2448, r26
    4994:	b0 93 49 24 	sts	0x2449, r27
	ax.a[Y].timer->PER = 0x2000;
    4998:	e0 91 54 24 	lds	r30, 0x2454
    499c:	f0 91 55 24 	lds	r31, 0x2455
    49a0:	80 e0       	ldi	r24, 0x00	; 0
    49a2:	90 e2       	ldi	r25, 0x20	; 32
    49a4:	86 a3       	std	Z+38, r24	; 0x26
    49a6:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y].timer->CTRLA = TC_CLK_ON;
    49a8:	40 83       	st	Z, r20

	ax.a[Z].step_counter = 0x00000600;
    49aa:	80 e0       	ldi	r24, 0x00	; 0
    49ac:	96 e0       	ldi	r25, 0x06	; 6
    49ae:	a0 e0       	ldi	r26, 0x00	; 0
    49b0:	b0 e0       	ldi	r27, 0x00	; 0
    49b2:	80 93 56 24 	sts	0x2456, r24
    49b6:	90 93 57 24 	sts	0x2457, r25
    49ba:	a0 93 58 24 	sts	0x2458, r26
    49be:	b0 93 59 24 	sts	0x2459, r27
	ax.a[Z].timer->PER = 0x3000;
    49c2:	e0 91 64 24 	lds	r30, 0x2464
    49c6:	f0 91 65 24 	lds	r31, 0x2465
    49ca:	80 e0       	ldi	r24, 0x00	; 0
    49cc:	90 e3       	ldi	r25, 0x30	; 48
    49ce:	86 a3       	std	Z+38, r24	; 0x26
    49d0:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z].timer->CTRLA = TC_CLK_ON;
    49d2:	40 83       	st	Z, r20

	ax.a[A].step_counter = 0x00000400;
    49d4:	80 e0       	ldi	r24, 0x00	; 0
    49d6:	94 e0       	ldi	r25, 0x04	; 4
    49d8:	a0 e0       	ldi	r26, 0x00	; 0
    49da:	b0 e0       	ldi	r27, 0x00	; 0
    49dc:	80 93 66 24 	sts	0x2466, r24
    49e0:	90 93 67 24 	sts	0x2467, r25
    49e4:	a0 93 68 24 	sts	0x2468, r26
    49e8:	b0 93 69 24 	sts	0x2469, r27
	ax.a[A].timer->PER = 0x4000;
    49ec:	d9 01       	movw	r26, r18
    49ee:	de 96       	adiw	r26, 0x3e	; 62
    49f0:	ed 91       	ld	r30, X+
    49f2:	fc 91       	ld	r31, X
    49f4:	df 97       	sbiw	r26, 0x3f	; 63
    49f6:	80 e0       	ldi	r24, 0x00	; 0
    49f8:	90 e4       	ldi	r25, 0x40	; 64
    49fa:	86 a3       	std	Z+38, r24	; 0x26
    49fc:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A].timer->CTRLA = TC_CLK_ON;
    49fe:	40 83       	st	Z, r20

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    4a00:	23 50       	subi	r18, 0x03	; 3
    4a02:	30 40       	sbci	r19, 0x00	; 0
    4a04:	f9 01       	movw	r30, r18
    4a06:	80 81       	ld	r24, Z
    4a08:	8f 60       	ori	r24, 0x0F	; 15
    4a0a:	80 83       	st	Z, r24
}
    4a0c:	08 95       	ret

00004a0e <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    4a0e:	f8 94       	cli
	mv_flush();									// flush the move buffer
    4a10:	0e 94 29 31 	call	0x6252	; 0x6252 <mv_flush>
	sei();
    4a14:	78 94       	sei
}
    4a16:	08 95       	ret

00004a18 <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    4a18:	f8 94       	cli
	for (uint8_t i=X; i<=A; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    4a1a:	e0 91 44 24 	lds	r30, 0x2444
    4a1e:	f0 91 45 24 	lds	r31, 0x2445
    4a22:	10 82       	st	Z, r1
    4a24:	e0 91 54 24 	lds	r30, 0x2454
    4a28:	f0 91 55 24 	lds	r31, 0x2455
    4a2c:	10 82       	st	Z, r1
    4a2e:	e0 91 64 24 	lds	r30, 0x2464
    4a32:	f0 91 65 24 	lds	r31, 0x2465
    4a36:	10 82       	st	Z, r1
    4a38:	e0 91 74 24 	lds	r30, 0x2474
    4a3c:	f0 91 75 24 	lds	r31, 0x2475
    4a40:	10 82       	st	Z, r1
	}	
	mv_flush();									// flush the move buffer
    4a42:	0e 94 29 31 	call	0x6252	; 0x6252 <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    4a46:	10 92 33 24 	sts	0x2433, r1
	sei();
    4a4a:	78 94       	sei
}
    4a4c:	08 95       	ret

00004a4e <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    4a4e:	cf 92       	push	r12
    4a50:	df 92       	push	r13
    4a52:	ef 92       	push	r14
    4a54:	ff 92       	push	r15
    4a56:	0f 93       	push	r16
    4a58:	1f 93       	push	r17
    4a5a:	cf 93       	push	r28
    4a5c:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    4a5e:	80 91 32 24 	lds	r24, 0x2432
    4a62:	88 23       	and	r24, r24
    4a64:	09 f0       	breq	.+2      	; 0x4a68 <st_execute_move+0x1a>
    4a66:	32 c1       	rjmp	.+612    	; 0x4ccc <st_execute_move+0x27e>
		return;
	}
	ax.exec_mutex = TRUE;
    4a68:	81 e0       	ldi	r24, 0x01	; 1
    4a6a:	80 93 32 24 	sts	0x2432, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    4a6e:	80 91 33 24 	lds	r24, 0x2433
    4a72:	88 23       	and	r24, r24
    4a74:	09 f0       	breq	.+2      	; 0x4a78 <st_execute_move+0x2a>
    4a76:	28 c1       	rjmp	.+592    	; 0x4cc8 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    4a78:	0e 94 e6 30 	call	0x61cc	; 0x61cc <mv_dequeue_move_buffer>
    4a7c:	80 93 34 24 	sts	0x2434, r24
    4a80:	90 93 35 24 	sts	0x2435, r25
    4a84:	89 2b       	or	r24, r25
    4a86:	09 f4       	brne	.+2      	; 0x4a8a <st_execute_move+0x3c>
    4a88:	1f c1       	rjmp	.+574    	; 0x4cc8 <st_execute_move+0x27a>
		ax.exec_mutex = FALSE;
		return;
    4a8a:	66 e3       	ldi	r22, 0x36	; 54
    4a8c:	74 e2       	ldi	r23, 0x24	; 36
    4a8e:	00 e0       	ldi	r16, 0x00	; 0
    4a90:	10 e0       	ldi	r17, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4a92:	94 e0       	ldi	r25, 0x04	; 4
    4a94:	c9 2e       	mov	r12, r25
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4a96:	82 e0       	ldi	r24, 0x02	; 2
    4a98:	d8 2e       	mov	r13, r24
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
		ax.exec_mutex = FALSE;
		return;
    4a9a:	f0 2e       	mov	r15, r16
    4a9c:	e1 2e       	mov	r14, r17
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    4a9e:	db 01       	movw	r26, r22
    4aa0:	1e 96       	adiw	r26, 0x0e	; 14
    4aa2:	ed 91       	ld	r30, X+
    4aa4:	fc 91       	ld	r31, X
    4aa6:	1f 97       	sbiw	r26, 0x0f	; 15
    4aa8:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    4aaa:	c0 91 34 24 	lds	r28, 0x2434
    4aae:	d0 91 35 24 	lds	r29, 0x2435
    4ab2:	c8 01       	movw	r24, r16
    4ab4:	fc 01       	movw	r30, r24
    4ab6:	b3 e0       	ldi	r27, 0x03	; 3
    4ab8:	ee 0f       	add	r30, r30
    4aba:	ff 1f       	adc	r31, r31
    4abc:	ba 95       	dec	r27
    4abe:	e1 f7       	brne	.-8      	; 0x4ab8 <st_execute_move+0x6a>
    4ac0:	88 0f       	add	r24, r24
    4ac2:	99 1f       	adc	r25, r25
    4ac4:	e8 0f       	add	r30, r24
    4ac6:	f9 1f       	adc	r31, r25
    4ac8:	ec 0f       	add	r30, r28
    4aca:	fd 1f       	adc	r31, r29
    4acc:	80 81       	ld	r24, Z
    4ace:	91 81       	ldd	r25, Z+1	; 0x01
    4ad0:	a2 81       	ldd	r26, Z+2	; 0x02
    4ad2:	b3 81       	ldd	r27, Z+3	; 0x03
    4ad4:	00 97       	sbiw	r24, 0x00	; 0
    4ad6:	a1 05       	cpc	r26, r1
    4ad8:	b1 05       	cpc	r27, r1
    4ada:	09 f4       	brne	.+2      	; 0x4ade <st_execute_move+0x90>
    4adc:	a6 c0       	rjmp	.+332    	; 0x4c2a <st_execute_move+0x1dc>
			continue;
		}

		ax.a[i].flags = ax.p->a[i].flags; 		// import flags from queued move
    4ade:	c8 01       	movw	r24, r16
    4ae0:	9c 01       	movw	r18, r24
    4ae2:	f3 e0       	ldi	r31, 0x03	; 3
    4ae4:	22 0f       	add	r18, r18
    4ae6:	33 1f       	adc	r19, r19
    4ae8:	fa 95       	dec	r31
    4aea:	e1 f7       	brne	.-8      	; 0x4ae4 <st_execute_move+0x96>
    4aec:	88 0f       	add	r24, r24
    4aee:	99 1f       	adc	r25, r25
    4af0:	28 0f       	add	r18, r24
    4af2:	39 1f       	adc	r19, r25
    4af4:	c2 0f       	add	r28, r18
    4af6:	d3 1f       	adc	r29, r19
    4af8:	89 85       	ldd	r24, Y+9	; 0x09
    4afa:	fb 01       	movw	r30, r22
    4afc:	83 87       	std	Z+11, r24	; 0x0b

		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4afe:	e0 91 34 24 	lds	r30, 0x2434
    4b02:	f0 91 35 24 	lds	r31, 0x2435
    4b06:	c8 01       	movw	r24, r16
    4b08:	9c 01       	movw	r18, r24
    4b0a:	53 e0       	ldi	r21, 0x03	; 3
    4b0c:	22 0f       	add	r18, r18
    4b0e:	33 1f       	adc	r19, r19
    4b10:	5a 95       	dec	r21
    4b12:	e1 f7       	brne	.-8      	; 0x4b0c <st_execute_move+0xbe>
    4b14:	88 0f       	add	r24, r24
    4b16:	99 1f       	adc	r25, r25
    4b18:	28 0f       	add	r18, r24
    4b1a:	39 1f       	adc	r19, r25
    4b1c:	e2 0f       	add	r30, r18
    4b1e:	f3 1f       	adc	r31, r19
    4b20:	90 85       	ldd	r25, Z+8	; 0x08
    4b22:	db 01       	movw	r26, r22
    4b24:	1a 96       	adiw	r26, 0x0a	; 10
    4b26:	8c 91       	ld	r24, X
    4b28:	1a 97       	sbiw	r26, 0x0a	; 10
    4b2a:	1c 96       	adiw	r26, 0x0c	; 12
    4b2c:	ed 91       	ld	r30, X+
    4b2e:	fc 91       	ld	r31, X
    4b30:	1d 97       	sbiw	r26, 0x0d	; 13
    4b32:	98 17       	cp	r25, r24
    4b34:	11 f0       	breq	.+4      	; 0x4b3a <st_execute_move+0xec>
    4b36:	d5 82       	std	Z+5, r13	; 0x05
    4b38:	01 c0       	rjmp	.+2      	; 0x4b3c <st_execute_move+0xee>
    4b3a:	d6 82       	std	Z+6, r13	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    4b3c:	40 91 34 24 	lds	r20, 0x2434
    4b40:	50 91 35 24 	lds	r21, 0x2435
    4b44:	8f 2d       	mov	r24, r15
    4b46:	9e 2d       	mov	r25, r14
    4b48:	fc 01       	movw	r30, r24
    4b4a:	33 e0       	ldi	r19, 0x03	; 3
    4b4c:	ee 0f       	add	r30, r30
    4b4e:	ff 1f       	adc	r31, r31
    4b50:	3a 95       	dec	r19
    4b52:	e1 f7       	brne	.-8      	; 0x4b4c <st_execute_move+0xfe>
    4b54:	88 0f       	add	r24, r24
    4b56:	99 1f       	adc	r25, r25
    4b58:	e8 0f       	add	r30, r24
    4b5a:	f9 1f       	adc	r31, r25
    4b5c:	e4 0f       	add	r30, r20
    4b5e:	f5 1f       	adc	r31, r21
    4b60:	80 81       	ld	r24, Z
    4b62:	91 81       	ldd	r25, Z+1	; 0x01
    4b64:	a2 81       	ldd	r26, Z+2	; 0x02
    4b66:	b3 81       	ldd	r27, Z+3	; 0x03
    4b68:	fb 01       	movw	r30, r22
    4b6a:	80 83       	st	Z, r24
    4b6c:	91 83       	std	Z+1, r25	; 0x01
    4b6e:	a2 83       	std	Z+2, r26	; 0x02
    4b70:	b3 83       	std	Z+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    4b72:	8f 2d       	mov	r24, r15
    4b74:	9e 2d       	mov	r25, r14
    4b76:	fc 01       	movw	r30, r24
    4b78:	b3 e0       	ldi	r27, 0x03	; 3
    4b7a:	ee 0f       	add	r30, r30
    4b7c:	ff 1f       	adc	r31, r31
    4b7e:	ba 95       	dec	r27
    4b80:	e1 f7       	brne	.-8      	; 0x4b7a <st_execute_move+0x12c>
    4b82:	88 0f       	add	r24, r24
    4b84:	99 1f       	adc	r25, r25
    4b86:	e8 0f       	add	r30, r24
    4b88:	f9 1f       	adc	r31, r25
    4b8a:	e4 0f       	add	r30, r20
    4b8c:	f5 1f       	adc	r31, r21
    4b8e:	86 81       	ldd	r24, Z+6	; 0x06
    4b90:	97 81       	ldd	r25, Z+7	; 0x07
    4b92:	db 01       	movw	r26, r22
    4b94:	16 96       	adiw	r26, 0x06	; 6
    4b96:	8d 93       	st	X+, r24
    4b98:	9c 93       	st	X, r25
    4b9a:	17 97       	sbiw	r26, 0x07	; 7
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    4b9c:	8f 2d       	mov	r24, r15
    4b9e:	9e 2d       	mov	r25, r14
    4ba0:	fc 01       	movw	r30, r24
    4ba2:	33 e0       	ldi	r19, 0x03	; 3
    4ba4:	ee 0f       	add	r30, r30
    4ba6:	ff 1f       	adc	r31, r31
    4ba8:	3a 95       	dec	r19
    4baa:	e1 f7       	brne	.-8      	; 0x4ba4 <st_execute_move+0x156>
    4bac:	88 0f       	add	r24, r24
    4bae:	99 1f       	adc	r25, r25
    4bb0:	e8 0f       	add	r30, r24
    4bb2:	f9 1f       	adc	r31, r25
    4bb4:	e4 0f       	add	r30, r20
    4bb6:	f5 1f       	adc	r31, r21
    4bb8:	86 81       	ldd	r24, Z+6	; 0x06
    4bba:	97 81       	ldd	r25, Z+7	; 0x07
    4bbc:	18 96       	adiw	r26, 0x08	; 8
    4bbe:	8d 93       	st	X+, r24
    4bc0:	9c 93       	st	X, r25
    4bc2:	19 97       	sbiw	r26, 0x09	; 9
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    4bc4:	8f 2d       	mov	r24, r15
    4bc6:	9e 2d       	mov	r25, r14
    4bc8:	fc 01       	movw	r30, r24
    4bca:	33 e0       	ldi	r19, 0x03	; 3
    4bcc:	ee 0f       	add	r30, r30
    4bce:	ff 1f       	adc	r31, r31
    4bd0:	3a 95       	dec	r19
    4bd2:	e1 f7       	brne	.-8      	; 0x4bcc <st_execute_move+0x17e>
    4bd4:	88 0f       	add	r24, r24
    4bd6:	99 1f       	adc	r25, r25
    4bd8:	e8 0f       	add	r30, r24
    4bda:	f9 1f       	adc	r31, r25
    4bdc:	e4 0f       	add	r30, r20
    4bde:	f5 1f       	adc	r31, r21
    4be0:	84 81       	ldd	r24, Z+4	; 0x04
    4be2:	95 81       	ldd	r25, Z+5	; 0x05
    4be4:	14 96       	adiw	r26, 0x04	; 4
    4be6:	8d 93       	st	X+, r24
    4be8:	9c 93       	st	X, r25
    4bea:	15 97       	sbiw	r26, 0x05	; 5
		ax.a[i].timer->PER = ax.p->a[i].period;
    4bec:	1e 96       	adiw	r26, 0x0e	; 14
    4bee:	ed 91       	ld	r30, X+
    4bf0:	fc 91       	ld	r31, X
    4bf2:	1f 97       	sbiw	r26, 0x0f	; 15
    4bf4:	8f 2d       	mov	r24, r15
    4bf6:	9e 2d       	mov	r25, r14
    4bf8:	9c 01       	movw	r18, r24
    4bfa:	b3 e0       	ldi	r27, 0x03	; 3
    4bfc:	22 0f       	add	r18, r18
    4bfe:	33 1f       	adc	r19, r19
    4c00:	ba 95       	dec	r27
    4c02:	e1 f7       	brne	.-8      	; 0x4bfc <st_execute_move+0x1ae>
    4c04:	88 0f       	add	r24, r24
    4c06:	99 1f       	adc	r25, r25
    4c08:	28 0f       	add	r18, r24
    4c0a:	39 1f       	adc	r19, r25
    4c0c:	42 0f       	add	r20, r18
    4c0e:	53 1f       	adc	r21, r19
    4c10:	da 01       	movw	r26, r20
    4c12:	14 96       	adiw	r26, 0x04	; 4
    4c14:	8d 91       	ld	r24, X+
    4c16:	9c 91       	ld	r25, X
    4c18:	15 97       	sbiw	r26, 0x05	; 5
    4c1a:	86 a3       	std	Z+38, r24	; 0x26
    4c1c:	97 a3       	std	Z+39, r25	; 0x27
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4c1e:	db 01       	movw	r26, r22
    4c20:	1c 96       	adiw	r26, 0x0c	; 12
    4c22:	ed 91       	ld	r30, X+
    4c24:	fc 91       	ld	r31, X
    4c26:	1d 97       	sbiw	r26, 0x0d	; 13
    4c28:	c6 82       	std	Z+6, r12	; 0x06
    4c2a:	0f 5f       	subi	r16, 0xFF	; 255
    4c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c2e:	60 5f       	subi	r22, 0xF0	; 240
    4c30:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i=X; i<=Z; i++) {
    4c32:	03 30       	cpi	r16, 0x03	; 3
    4c34:	11 05       	cpc	r17, r1
    4c36:	09 f0       	breq	.+2      	; 0x4c3a <st_execute_move+0x1ec>
    4c38:	30 cf       	rjmp	.-416    	; 0x4a9a <st_execute_move+0x4c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4c3a:	10 92 33 24 	sts	0x2433, r1
	if (ax.a[X].step_counter) { 
    4c3e:	80 91 36 24 	lds	r24, 0x2436
    4c42:	90 91 37 24 	lds	r25, 0x2437
    4c46:	a0 91 38 24 	lds	r26, 0x2438
    4c4a:	b0 91 39 24 	lds	r27, 0x2439
    4c4e:	00 97       	sbiw	r24, 0x00	; 0
    4c50:	a1 05       	cpc	r26, r1
    4c52:	b1 05       	cpc	r27, r1
    4c54:	59 f0       	breq	.+22     	; 0x4c6c <st_execute_move+0x21e>
		ax.a[X].timer->CTRLA = TC_CLK_ON;
    4c56:	e0 91 44 24 	lds	r30, 0x2444
    4c5a:	f0 91 45 24 	lds	r31, 0x2445
    4c5e:	81 e0       	ldi	r24, 0x01	; 1
    4c60:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    4c62:	80 91 33 24 	lds	r24, 0x2433
    4c66:	88 60       	ori	r24, 0x08	; 8
    4c68:	80 93 33 24 	sts	0x2433, r24
	}
	if (ax.a[Y].step_counter) {
    4c6c:	80 91 46 24 	lds	r24, 0x2446
    4c70:	90 91 47 24 	lds	r25, 0x2447
    4c74:	a0 91 48 24 	lds	r26, 0x2448
    4c78:	b0 91 49 24 	lds	r27, 0x2449
    4c7c:	00 97       	sbiw	r24, 0x00	; 0
    4c7e:	a1 05       	cpc	r26, r1
    4c80:	b1 05       	cpc	r27, r1
    4c82:	59 f0       	breq	.+22     	; 0x4c9a <st_execute_move+0x24c>
		ax.a[Y].timer->CTRLA = TC_CLK_ON;
    4c84:	e0 91 54 24 	lds	r30, 0x2454
    4c88:	f0 91 55 24 	lds	r31, 0x2455
    4c8c:	81 e0       	ldi	r24, 0x01	; 1
    4c8e:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4c90:	80 91 33 24 	lds	r24, 0x2433
    4c94:	84 60       	ori	r24, 0x04	; 4
    4c96:	80 93 33 24 	sts	0x2433, r24
	}
	if (ax.a[Z].step_counter) {
    4c9a:	80 91 56 24 	lds	r24, 0x2456
    4c9e:	90 91 57 24 	lds	r25, 0x2457
    4ca2:	a0 91 58 24 	lds	r26, 0x2458
    4ca6:	b0 91 59 24 	lds	r27, 0x2459
    4caa:	00 97       	sbiw	r24, 0x00	; 0
    4cac:	a1 05       	cpc	r26, r1
    4cae:	b1 05       	cpc	r27, r1
    4cb0:	59 f0       	breq	.+22     	; 0x4cc8 <st_execute_move+0x27a>
		ax.a[Z].timer->CTRLA = TC_CLK_ON;
    4cb2:	e0 91 64 24 	lds	r30, 0x2464
    4cb6:	f0 91 65 24 	lds	r31, 0x2465
    4cba:	81 e0       	ldi	r24, 0x01	; 1
    4cbc:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4cbe:	80 91 33 24 	lds	r24, 0x2433
    4cc2:	82 60       	ori	r24, 0x02	; 2
    4cc4:	80 93 33 24 	sts	0x2433, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    4cc8:	10 92 32 24 	sts	0x2432, r1
}
    4ccc:	df 91       	pop	r29
    4cce:	cf 91       	pop	r28
    4cd0:	1f 91       	pop	r17
    4cd2:	0f 91       	pop	r16
    4cd4:	ff 90       	pop	r15
    4cd6:	ef 90       	pop	r14
    4cd8:	df 90       	pop	r13
    4cda:	cf 90       	pop	r12
    4cdc:	08 95       	ret

00004cde <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4cde:	10 92 32 24 	sts	0x2432, r1
	st_execute_move();		// recursively empty the move queue
    4ce2:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <st_execute_move>
	return;
}
    4ce6:	08 95       	ret

00004ce8 <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    4ce8:	1f 92       	push	r1
    4cea:	0f 92       	push	r0
    4cec:	0f b6       	in	r0, 0x3f	; 63
    4cee:	0f 92       	push	r0
    4cf0:	0b b6       	in	r0, 0x3b	; 59
    4cf2:	0f 92       	push	r0
    4cf4:	11 24       	eor	r1, r1
    4cf6:	2f 93       	push	r18
    4cf8:	3f 93       	push	r19
    4cfa:	4f 93       	push	r20
    4cfc:	5f 93       	push	r21
    4cfe:	6f 93       	push	r22
    4d00:	7f 93       	push	r23
    4d02:	8f 93       	push	r24
    4d04:	9f 93       	push	r25
    4d06:	af 93       	push	r26
    4d08:	bf 93       	push	r27
    4d0a:	ef 93       	push	r30
    4d0c:	ff 93       	push	r31
	if (--ax.a[A].postscale_counter != 0) {
    4d0e:	80 91 6e 24 	lds	r24, 0x246E
    4d12:	90 91 6f 24 	lds	r25, 0x246F
    4d16:	01 97       	sbiw	r24, 0x01	; 1
    4d18:	80 93 6e 24 	sts	0x246E, r24
    4d1c:	90 93 6f 24 	sts	0x246F, r25
    4d20:	89 2b       	or	r24, r25
    4d22:	a1 f5       	brne	.+104    	; 0x4d8c <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4d24:	e0 e6       	ldi	r30, 0x60	; 96
    4d26:	f6 e0       	ldi	r31, 0x06	; 6
    4d28:	81 e0       	ldi	r24, 0x01	; 1
    4d2a:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A].step_counter == 0) {
    4d2c:	80 91 66 24 	lds	r24, 0x2466
    4d30:	90 91 67 24 	lds	r25, 0x2467
    4d34:	a0 91 68 24 	lds	r26, 0x2468
    4d38:	b0 91 69 24 	lds	r27, 0x2469
    4d3c:	01 97       	sbiw	r24, 0x01	; 1
    4d3e:	a1 09       	sbc	r26, r1
    4d40:	b1 09       	sbc	r27, r1
    4d42:	80 93 66 24 	sts	0x2466, r24
    4d46:	90 93 67 24 	sts	0x2467, r25
    4d4a:	a0 93 68 24 	sts	0x2468, r26
    4d4e:	b0 93 69 24 	sts	0x2469, r27
    4d52:	00 97       	sbiw	r24, 0x00	; 0
    4d54:	a1 05       	cpc	r26, r1
    4d56:	b1 05       	cpc	r27, r1
    4d58:	69 f4       	brne	.+26     	; 0x4d74 <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    4d5a:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4d5e:	84 e0       	ldi	r24, 0x04	; 4
    4d60:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4d62:	80 91 33 24 	lds	r24, 0x2433
    4d66:	8e 7f       	andi	r24, 0xFE	; 254
    4d68:	80 93 33 24 	sts	0x2433, r24
		if (ax.active_axes == 0) {
    4d6c:	88 23       	and	r24, r24
    4d6e:	11 f4       	brne	.+4      	; 0x4d74 <__vector_108+0x8c>
			st_execute_move();
    4d70:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <st_execute_move>
		}
	}
	ax.a[A].postscale_counter = ax.a[A].postscale_value;
    4d74:	80 91 6c 24 	lds	r24, 0x246C
    4d78:	90 91 6d 24 	lds	r25, 0x246D
    4d7c:	80 93 6e 24 	sts	0x246E, r24
    4d80:	90 93 6f 24 	sts	0x246F, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4d84:	81 e0       	ldi	r24, 0x01	; 1
    4d86:	e0 e6       	ldi	r30, 0x60	; 96
    4d88:	f6 e0       	ldi	r31, 0x06	; 6
    4d8a:	86 83       	std	Z+6, r24	; 0x06
}
    4d8c:	ff 91       	pop	r31
    4d8e:	ef 91       	pop	r30
    4d90:	bf 91       	pop	r27
    4d92:	af 91       	pop	r26
    4d94:	9f 91       	pop	r25
    4d96:	8f 91       	pop	r24
    4d98:	7f 91       	pop	r23
    4d9a:	6f 91       	pop	r22
    4d9c:	5f 91       	pop	r21
    4d9e:	4f 91       	pop	r20
    4da0:	3f 91       	pop	r19
    4da2:	2f 91       	pop	r18
    4da4:	0f 90       	pop	r0
    4da6:	0b be       	out	0x3b, r0	; 59
    4da8:	0f 90       	pop	r0
    4daa:	0f be       	out	0x3f, r0	; 63
    4dac:	0f 90       	pop	r0
    4dae:	1f 90       	pop	r1
    4db0:	18 95       	reti

00004db2 <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4db2:	1f 92       	push	r1
    4db4:	0f 92       	push	r0
    4db6:	0f b6       	in	r0, 0x3f	; 63
    4db8:	0f 92       	push	r0
    4dba:	0b b6       	in	r0, 0x3b	; 59
    4dbc:	0f 92       	push	r0
    4dbe:	11 24       	eor	r1, r1
    4dc0:	2f 93       	push	r18
    4dc2:	3f 93       	push	r19
    4dc4:	4f 93       	push	r20
    4dc6:	5f 93       	push	r21
    4dc8:	6f 93       	push	r22
    4dca:	7f 93       	push	r23
    4dcc:	8f 93       	push	r24
    4dce:	9f 93       	push	r25
    4dd0:	af 93       	push	r26
    4dd2:	bf 93       	push	r27
    4dd4:	ef 93       	push	r30
    4dd6:	ff 93       	push	r31
	if (--ax.a[Z].postscale_counter != 0) {
    4dd8:	80 91 5e 24 	lds	r24, 0x245E
    4ddc:	90 91 5f 24 	lds	r25, 0x245F
    4de0:	01 97       	sbiw	r24, 0x01	; 1
    4de2:	80 93 5e 24 	sts	0x245E, r24
    4de6:	90 93 5f 24 	sts	0x245F, r25
    4dea:	89 2b       	or	r24, r25
    4dec:	a1 f5       	brne	.+104    	; 0x4e56 <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4dee:	e0 e8       	ldi	r30, 0x80	; 128
    4df0:	f6 e0       	ldi	r31, 0x06	; 6
    4df2:	81 e0       	ldi	r24, 0x01	; 1
    4df4:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z].step_counter == 0) {
    4df6:	80 91 56 24 	lds	r24, 0x2456
    4dfa:	90 91 57 24 	lds	r25, 0x2457
    4dfe:	a0 91 58 24 	lds	r26, 0x2458
    4e02:	b0 91 59 24 	lds	r27, 0x2459
    4e06:	01 97       	sbiw	r24, 0x01	; 1
    4e08:	a1 09       	sbc	r26, r1
    4e0a:	b1 09       	sbc	r27, r1
    4e0c:	80 93 56 24 	sts	0x2456, r24
    4e10:	90 93 57 24 	sts	0x2457, r25
    4e14:	a0 93 58 24 	sts	0x2458, r26
    4e18:	b0 93 59 24 	sts	0x2459, r27
    4e1c:	00 97       	sbiw	r24, 0x00	; 0
    4e1e:	a1 05       	cpc	r26, r1
    4e20:	b1 05       	cpc	r27, r1
    4e22:	69 f4       	brne	.+26     	; 0x4e3e <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    4e24:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4e28:	84 e0       	ldi	r24, 0x04	; 4
    4e2a:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    4e2c:	80 91 33 24 	lds	r24, 0x2433
    4e30:	8d 7f       	andi	r24, 0xFD	; 253
    4e32:	80 93 33 24 	sts	0x2433, r24
		if (ax.active_axes == 0) {
    4e36:	88 23       	and	r24, r24
    4e38:	11 f4       	brne	.+4      	; 0x4e3e <__vector_47+0x8c>
			st_execute_move();
    4e3a:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <st_execute_move>
		}
	}
	ax.a[Z].postscale_counter = ax.a[Z].postscale_value;
    4e3e:	80 91 5c 24 	lds	r24, 0x245C
    4e42:	90 91 5d 24 	lds	r25, 0x245D
    4e46:	80 93 5e 24 	sts	0x245E, r24
    4e4a:	90 93 5f 24 	sts	0x245F, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4e4e:	81 e0       	ldi	r24, 0x01	; 1
    4e50:	e0 e8       	ldi	r30, 0x80	; 128
    4e52:	f6 e0       	ldi	r31, 0x06	; 6
    4e54:	86 83       	std	Z+6, r24	; 0x06
}
    4e56:	ff 91       	pop	r31
    4e58:	ef 91       	pop	r30
    4e5a:	bf 91       	pop	r27
    4e5c:	af 91       	pop	r26
    4e5e:	9f 91       	pop	r25
    4e60:	8f 91       	pop	r24
    4e62:	7f 91       	pop	r23
    4e64:	6f 91       	pop	r22
    4e66:	5f 91       	pop	r21
    4e68:	4f 91       	pop	r20
    4e6a:	3f 91       	pop	r19
    4e6c:	2f 91       	pop	r18
    4e6e:	0f 90       	pop	r0
    4e70:	0b be       	out	0x3b, r0	; 59
    4e72:	0f 90       	pop	r0
    4e74:	0f be       	out	0x3f, r0	; 63
    4e76:	0f 90       	pop	r0
    4e78:	1f 90       	pop	r1
    4e7a:	18 95       	reti

00004e7c <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4e7c:	1f 92       	push	r1
    4e7e:	0f 92       	push	r0
    4e80:	0f b6       	in	r0, 0x3f	; 63
    4e82:	0f 92       	push	r0
    4e84:	0b b6       	in	r0, 0x3b	; 59
    4e86:	0f 92       	push	r0
    4e88:	11 24       	eor	r1, r1
    4e8a:	2f 93       	push	r18
    4e8c:	3f 93       	push	r19
    4e8e:	4f 93       	push	r20
    4e90:	5f 93       	push	r21
    4e92:	6f 93       	push	r22
    4e94:	7f 93       	push	r23
    4e96:	8f 93       	push	r24
    4e98:	9f 93       	push	r25
    4e9a:	af 93       	push	r26
    4e9c:	bf 93       	push	r27
    4e9e:	ef 93       	push	r30
    4ea0:	ff 93       	push	r31
	if (--ax.a[Y].postscale_counter != 0) {
    4ea2:	80 91 4e 24 	lds	r24, 0x244E
    4ea6:	90 91 4f 24 	lds	r25, 0x244F
    4eaa:	01 97       	sbiw	r24, 0x01	; 1
    4eac:	80 93 4e 24 	sts	0x244E, r24
    4eb0:	90 93 4f 24 	sts	0x244F, r25
    4eb4:	89 2b       	or	r24, r25
    4eb6:	a1 f5       	brne	.+104    	; 0x4f20 <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4eb8:	e0 ea       	ldi	r30, 0xA0	; 160
    4eba:	f6 e0       	ldi	r31, 0x06	; 6
    4ebc:	81 e0       	ldi	r24, 0x01	; 1
    4ebe:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y].step_counter == 0) {
    4ec0:	80 91 46 24 	lds	r24, 0x2446
    4ec4:	90 91 47 24 	lds	r25, 0x2447
    4ec8:	a0 91 48 24 	lds	r26, 0x2448
    4ecc:	b0 91 49 24 	lds	r27, 0x2449
    4ed0:	01 97       	sbiw	r24, 0x01	; 1
    4ed2:	a1 09       	sbc	r26, r1
    4ed4:	b1 09       	sbc	r27, r1
    4ed6:	80 93 46 24 	sts	0x2446, r24
    4eda:	90 93 47 24 	sts	0x2447, r25
    4ede:	a0 93 48 24 	sts	0x2448, r26
    4ee2:	b0 93 49 24 	sts	0x2449, r27
    4ee6:	00 97       	sbiw	r24, 0x00	; 0
    4ee8:	a1 05       	cpc	r26, r1
    4eea:	b1 05       	cpc	r27, r1
    4eec:	69 f4       	brne	.+26     	; 0x4f08 <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4eee:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4ef2:	84 e0       	ldi	r24, 0x04	; 4
    4ef4:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4ef6:	80 91 33 24 	lds	r24, 0x2433
    4efa:	8b 7f       	andi	r24, 0xFB	; 251
    4efc:	80 93 33 24 	sts	0x2433, r24
		if (ax.active_axes == 0) {
    4f00:	88 23       	and	r24, r24
    4f02:	11 f4       	brne	.+4      	; 0x4f08 <__vector_77+0x8c>
			st_execute_move();
    4f04:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <st_execute_move>
		}
	}
	ax.a[Y].postscale_counter = ax.a[Y].postscale_value;
    4f08:	80 91 4c 24 	lds	r24, 0x244C
    4f0c:	90 91 4d 24 	lds	r25, 0x244D
    4f10:	80 93 4e 24 	sts	0x244E, r24
    4f14:	90 93 4f 24 	sts	0x244F, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4f18:	81 e0       	ldi	r24, 0x01	; 1
    4f1a:	e0 ea       	ldi	r30, 0xA0	; 160
    4f1c:	f6 e0       	ldi	r31, 0x06	; 6
    4f1e:	86 83       	std	Z+6, r24	; 0x06
}
    4f20:	ff 91       	pop	r31
    4f22:	ef 91       	pop	r30
    4f24:	bf 91       	pop	r27
    4f26:	af 91       	pop	r26
    4f28:	9f 91       	pop	r25
    4f2a:	8f 91       	pop	r24
    4f2c:	7f 91       	pop	r23
    4f2e:	6f 91       	pop	r22
    4f30:	5f 91       	pop	r21
    4f32:	4f 91       	pop	r20
    4f34:	3f 91       	pop	r19
    4f36:	2f 91       	pop	r18
    4f38:	0f 90       	pop	r0
    4f3a:	0b be       	out	0x3b, r0	; 59
    4f3c:	0f 90       	pop	r0
    4f3e:	0f be       	out	0x3f, r0	; 63
    4f40:	0f 90       	pop	r0
    4f42:	1f 90       	pop	r1
    4f44:	18 95       	reti

00004f46 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4f46:	1f 92       	push	r1
    4f48:	0f 92       	push	r0
    4f4a:	0f b6       	in	r0, 0x3f	; 63
    4f4c:	0f 92       	push	r0
    4f4e:	0b b6       	in	r0, 0x3b	; 59
    4f50:	0f 92       	push	r0
    4f52:	11 24       	eor	r1, r1
    4f54:	2f 93       	push	r18
    4f56:	3f 93       	push	r19
    4f58:	4f 93       	push	r20
    4f5a:	5f 93       	push	r21
    4f5c:	6f 93       	push	r22
    4f5e:	7f 93       	push	r23
    4f60:	8f 93       	push	r24
    4f62:	9f 93       	push	r25
    4f64:	af 93       	push	r26
    4f66:	bf 93       	push	r27
    4f68:	ef 93       	push	r30
    4f6a:	ff 93       	push	r31
	if (--ax.a[X].postscale_counter != 0) {		// get out fast, if you need to
    4f6c:	80 91 3e 24 	lds	r24, 0x243E
    4f70:	90 91 3f 24 	lds	r25, 0x243F
    4f74:	01 97       	sbiw	r24, 0x01	; 1
    4f76:	80 93 3e 24 	sts	0x243E, r24
    4f7a:	90 93 3f 24 	sts	0x243F, r25
    4f7e:	89 2b       	or	r24, r25
    4f80:	d1 f5       	brne	.+116    	; 0x4ff6 <__vector_14+0xb0>
		return;
	}
	if (!(ax.a[X].flags && DWELL_FLAG_bm)) {	// issue a pulse if not a dwell
    4f82:	80 91 41 24 	lds	r24, 0x2441
    4f86:	88 23       	and	r24, r24
    4f88:	21 f4       	brne	.+8      	; 0x4f92 <__vector_14+0x4c>
		X_MOTOR_PORT.OUTSET = STEP_BIT_bm;		// turn X step bit on
    4f8a:	81 e0       	ldi	r24, 0x01	; 1
    4f8c:	e0 e0       	ldi	r30, 0x00	; 0
    4f8e:	f6 e0       	ldi	r31, 0x06	; 6
    4f90:	85 83       	std	Z+5, r24	; 0x05
	}
	if (--ax.a[X].step_counter == 0) {			// end-of-move processing
    4f92:	80 91 36 24 	lds	r24, 0x2436
    4f96:	90 91 37 24 	lds	r25, 0x2437
    4f9a:	a0 91 38 24 	lds	r26, 0x2438
    4f9e:	b0 91 39 24 	lds	r27, 0x2439
    4fa2:	01 97       	sbiw	r24, 0x01	; 1
    4fa4:	a1 09       	sbc	r26, r1
    4fa6:	b1 09       	sbc	r27, r1
    4fa8:	80 93 36 24 	sts	0x2436, r24
    4fac:	90 93 37 24 	sts	0x2437, r25
    4fb0:	a0 93 38 24 	sts	0x2438, r26
    4fb4:	b0 93 39 24 	sts	0x2439, r27
    4fb8:	00 97       	sbiw	r24, 0x00	; 0
    4fba:	a1 05       	cpc	r26, r1
    4fbc:	b1 05       	cpc	r27, r1
    4fbe:	79 f4       	brne	.+30     	; 0x4fde <__vector_14+0x98>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    4fc0:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4fc4:	84 e0       	ldi	r24, 0x04	; 4
    4fc6:	e0 e0       	ldi	r30, 0x00	; 0
    4fc8:	f6 e0       	ldi	r31, 0x06	; 6
    4fca:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    4fcc:	80 91 33 24 	lds	r24, 0x2433
    4fd0:	87 7f       	andi	r24, 0xF7	; 247
    4fd2:	80 93 33 24 	sts	0x2433, r24
		if (ax.active_axes == 0) {				// if all axes are done
    4fd6:	88 23       	and	r24, r24
    4fd8:	11 f4       	brne	.+4      	; 0x4fde <__vector_14+0x98>
			st_execute_move();					// ...run the next move
    4fda:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <st_execute_move>
		}
	}
	ax.a[X].postscale_counter = ax.a[X].postscale_value;// reset post-scaler counter
    4fde:	80 91 3c 24 	lds	r24, 0x243C
    4fe2:	90 91 3d 24 	lds	r25, 0x243D
    4fe6:	80 93 3e 24 	sts	0x243E, r24
    4fea:	90 93 3f 24 	sts	0x243F, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    4fee:	81 e0       	ldi	r24, 0x01	; 1
    4ff0:	e0 e0       	ldi	r30, 0x00	; 0
    4ff2:	f6 e0       	ldi	r31, 0x06	; 6
    4ff4:	86 83       	std	Z+6, r24	; 0x06
}
    4ff6:	ff 91       	pop	r31
    4ff8:	ef 91       	pop	r30
    4ffa:	bf 91       	pop	r27
    4ffc:	af 91       	pop	r26
    4ffe:	9f 91       	pop	r25
    5000:	8f 91       	pop	r24
    5002:	7f 91       	pop	r23
    5004:	6f 91       	pop	r22
    5006:	5f 91       	pop	r21
    5008:	4f 91       	pop	r20
    500a:	3f 91       	pop	r19
    500c:	2f 91       	pop	r18
    500e:	0f 90       	pop	r0
    5010:	0b be       	out	0x3b, r0	; 59
    5012:	0f 90       	pop	r0
    5014:	0f be       	out	0x3f, r0	; 63
    5016:	0f 90       	pop	r0
    5018:	1f 90       	pop	r1
    501a:	18 95       	reti

0000501c <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    501c:	e0 ea       	ldi	r30, 0xA0	; 160
    501e:	f0 e0       	ldi	r31, 0x00	; 0
    5020:	82 81       	ldd	r24, Z+2	; 0x02
    5022:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    5024:	98 ed       	ldi	r25, 0xD8	; 216
    5026:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    5028:	82 83       	std	Z+2, r24	; 0x02
}
    502a:	08 95       	ret

0000502c <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    502c:	e0 ea       	ldi	r30, 0xA0	; 160
    502e:	f0 e0       	ldi	r31, 0x00	; 0
    5030:	82 81       	ldd	r24, Z+2	; 0x02
    5032:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    5034:	98 ed       	ldi	r25, 0xD8	; 216
    5036:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    5038:	82 83       	std	Z+2, r24	; 0x02
}
    503a:	08 95       	ret

0000503c <xio_fget_ln>:
		d->flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		d->flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    503c:	81 30       	cpi	r24, 0x01	; 1
    503e:	61 f0       	breq	.+24     	; 0x5058 <xio_fget_ln+0x1c>
    5040:	81 30       	cpi	r24, 0x01	; 1
    5042:	38 f0       	brcs	.+14     	; 0x5052 <xio_fget_ln+0x16>
    5044:	82 30       	cpi	r24, 0x02	; 2
    5046:	69 f0       	breq	.+26     	; 0x5062 <xio_fget_ln+0x26>
    5048:	84 30       	cpi	r24, 0x04	; 4
    504a:	81 f0       	breq	.+32     	; 0x506c <xio_fget_ln+0x30>
    504c:	21 e1       	ldi	r18, 0x11	; 17
    504e:	30 e0       	ldi	r19, 0x00	; 0
    5050:	12 c0       	rjmp	.+36     	; 0x5076 <xio_fget_ln+0x3a>
    5052:	20 e0       	ldi	r18, 0x00	; 0
    5054:	30 e0       	ldi	r19, 0x00	; 0
    5056:	0f c0       	rjmp	.+30     	; 0x5076 <xio_fget_ln+0x3a>
		d->flags |= XIO_FLAG_BLOCK_bm;
	}
    5058:	cb 01       	movw	r24, r22
    505a:	64 2f       	mov	r22, r20
    505c:	0e 94 42 2b 	call	0x5684	; 0x5684 <xio_usb_readln>
    5060:	09 c0       	rjmp	.+18     	; 0x5074 <xio_fget_ln+0x38>
	if (control & XIO_NOBLOCK) {
    5062:	cb 01       	movw	r24, r22
    5064:	64 2f       	mov	r22, r20
    5066:	0e 94 fa 35 	call	0x6bf4	; 0x6bf4 <xio_rs485_readln>
    506a:	04 c0       	rjmp	.+8      	; 0x5074 <xio_fget_ln+0x38>
		d->flags &= ~XIO_FLAG_BLOCK_bm;
	}
    506c:	cb 01       	movw	r24, r22
    506e:	64 2f       	mov	r22, r20
    5070:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <xio_pgm_readln>
    5074:	9c 01       	movw	r18, r24
	if (control & XIO_ECHO) {
		d->flags |= XIO_FLAG_ECHO_bm;
	}
	if (control & XIO_NOECHO) {
    5076:	c9 01       	movw	r24, r18
    5078:	08 95       	ret

0000507a <xio_control>:
/*
int8_t xio_dev_init(uint8_t dev, const int16_t arg)
{
	switch (dev) {
		case (XIO_DEV_RS485): xio_rs485_init(arg); return (TG_OK);
		case (XIO_DEV_USB): xio_usb_init(arg); return (TG_OK);
    507a:	81 30       	cpi	r24, 0x01	; 1
    507c:	51 f0       	breq	.+20     	; 0x5092 <xio_control+0x18>
    507e:	81 30       	cpi	r24, 0x01	; 1
    5080:	30 f0       	brcs	.+12     	; 0x508e <xio_control+0x14>
    5082:	82 30       	cpi	r24, 0x02	; 2
    5084:	59 f0       	breq	.+22     	; 0x509c <xio_control+0x22>
    5086:	84 30       	cpi	r24, 0x04	; 4
    5088:	71 f0       	breq	.+28     	; 0x50a6 <xio_control+0x2c>
    508a:	81 e1       	ldi	r24, 0x11	; 17
    508c:	08 95       	ret
    508e:	80 e0       	ldi	r24, 0x00	; 0
    5090:	08 95       	ret
//		case (XIO_DEV_AUX): xio_aux_init(arg); return (TG_OK);
		case (XIO_DEV_PGM): xio_pgm_init(arg); return (TG_OK);
    5092:	cb 01       	movw	r24, r22
    5094:	ba 01       	movw	r22, r20
    5096:	0e 94 55 29 	call	0x52aa	; 0x52aa <xio_usb_control>
    509a:	08 95       	ret
		default: return (TG_UNRECOGNIZED_DEVICE);
    509c:	cb 01       	movw	r24, r22
    509e:	ba 01       	movw	r22, r20
    50a0:	0e 94 38 34 	call	0x6870	; 0x6870 <xio_rs485_control>
    50a4:	08 95       	ret
	}
	return (TG_ERROR);		// never should hit this
    50a6:	cb 01       	movw	r24, r22
    50a8:	ba 01       	movw	r22, r20
    50aa:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <xio_pgm_control>
}
*/

/*
    50ae:	08 95       	ret

000050b0 <xio_dev_init>:
		USB_DIRCLR_bm, USB_DIRSET_bm, USB_OUTCLR_bm, USB_OUTSET_bm);
	ds[i].dev_putc = &xio_putc_usb;
	ds[i].dev_getc = &xio_getc_usb;
	ds[i].dev_readln = &xio_readln_usb;
	fdev_setup_stream(&(ds[i].fs), xio_putc_usb, xio_getc_usb, _FDEV_SETUP_RW);

    50b0:	81 30       	cpi	r24, 0x01	; 1
    50b2:	41 f0       	breq	.+16     	; 0x50c4 <xio_dev_init+0x14>
    50b4:	81 30       	cpi	r24, 0x01	; 1
    50b6:	68 f0       	brcs	.+26     	; 0x50d2 <xio_dev_init+0x22>
    50b8:	82 30       	cpi	r24, 0x02	; 2
    50ba:	41 f0       	breq	.+16     	; 0x50cc <xio_dev_init+0x1c>
    50bc:	84 30       	cpi	r24, 0x04	; 4
    50be:	59 f0       	breq	.+22     	; 0x50d6 <xio_dev_init+0x26>
    50c0:	81 e1       	ldi	r24, 0x11	; 17
    50c2:	08 95       	ret
	// do stdio bindings
	stddev = &dev_usb;				// stddev is a convenience
    50c4:	cb 01       	movw	r24, r22
    50c6:	0e 94 9b 28 	call	0x5136	; 0x5136 <xio_usb_init>
    50ca:	03 c0       	rjmp	.+6      	; 0x50d2 <xio_dev_init+0x22>
	stdin = &dev_usb;				// define the console device
    50cc:	cb 01       	movw	r24, r22
    50ce:	0e 94 7d 33 	call	0x66fa	; 0x66fa <xio_rs485_init>
    50d2:	80 e0       	ldi	r24, 0x00	; 0
    50d4:	08 95       	ret
	stdout = &dev_usb;				// ...
	stderr = &dev_usb;				// ...
    50d6:	cb 01       	movw	r24, r22
    50d8:	0e 94 69 2e 	call	0x5cd2	; 0x5cd2 <xio_pgm_init>
    50dc:	80 e0       	ldi	r24, 0x00	; 0

	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
}

    50de:	08 95       	ret

000050e0 <xio_init>:
 */

void xio_init(void)
{	
	uint8_t i=0;

    50e0:	85 e0       	ldi	r24, 0x05	; 5
    50e2:	90 e5       	ldi	r25, 0x50	; 80
    50e4:	0e 94 9b 28 	call	0x5136	; 0x5136 <xio_usb_init>
	// RS485 setup
	i = XIO_DEV_RS485;
	memset (&ds[i], 0, sizeof(struct xioDEVICE));
    50e8:	85 e0       	ldi	r24, 0x05	; 5
    50ea:	90 e1       	ldi	r25, 0x10	; 16
    50ec:	0e 94 9b 28 	call	0x5136	; 0x5136 <xio_usb_init>
	ds[i].xio = &us[i];							// bind USART extended struct
	ds[i].size = sizeof(ds[i].buf);
	xio_init_usart(i, RS485_INIT_bm, &RS485_USART, &RS485_PORT, 
		RS485_DIRCLR_bm,RS485_DIRSET_bm,RS485_OUTCLR_bm,RS485_OUTSET_bm);
    50f0:	80 e0       	ldi	r24, 0x00	; 0
    50f2:	95 e1       	ldi	r25, 0x15	; 21
    50f4:	0e 94 69 2e 	call	0x5cd2	; 0x5cd2 <xio_pgm_init>
	ds[i].dev_putc = &xio_putc_rs485;
	ds[i].dev_getc = &xio_getc_rs485;
	ds[i].dev_readln = &xio_readln_rs485;
    50f8:	80 e0       	ldi	r24, 0x00	; 0
    50fa:	90 e2       	ldi	r25, 0x20	; 32
    50fc:	80 93 e4 24 	sts	0x24E4, r24
    5100:	90 93 e5 24 	sts	0x24E5, r25
	fdev_setup_stream(&(ds[i].fs), xio_putc_rs485, xio_getc_rs485, _FDEV_SETUP_RW);
    5104:	80 93 3e 25 	sts	0x253E, r24
    5108:	90 93 3f 25 	sts	0x253F, r25

    510c:	80 93 40 25 	sts	0x2540, r24
    5110:	90 93 41 25 	sts	0x2541, r25
	// USB setup
    5114:	80 93 42 25 	sts	0x2542, r24
    5118:	90 93 43 25 	sts	0x2543, r25
	i = XIO_DEV_USB;
	memset (&ds[i], 0, sizeof(struct xioDEVICE));
    511c:	0f 92       	push	r0
    511e:	0f 92       	push	r0
    5120:	8a e3       	ldi	r24, 0x3A	; 58
    5122:	97 e0       	ldi	r25, 0x07	; 7
    5124:	ed b7       	in	r30, 0x3d	; 61
    5126:	fe b7       	in	r31, 0x3e	; 62
    5128:	81 83       	std	Z+1, r24	; 0x01
    512a:	92 83       	std	Z+2, r25	; 0x02
    512c:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
    5130:	0f 90       	pop	r0
    5132:	0f 90       	pop	r0
	ds[i].xio = &us[i];							// bind USART extended struct
    5134:	08 95       	ret

00005136 <xio_usb_init>:
	// activate flow control here or before it gets to this level
}

/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */
    5136:	9c 01       	movw	r18, r24

    5138:	e8 2f       	mov	r30, r24
    513a:	ef 70       	andi	r30, 0x0F	; 15
void xio_usb_queue_RX_char(const char c)
{
	// trap signals - do not insert into RX queue
    513c:	87 e3       	ldi	r24, 0x37	; 55
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	80 93 ad 21 	sts	0x21AD, r24
    5144:	90 93 ae 21 	sts	0x21AE, r25
		USB.sig = XIO_SIG_KILL;					// set signal value
		signal_etx();							// call app-specific signal handler
		return;
	}

	// normal path
    5148:	26 ff       	sbrs	r18, 6
    514a:	06 c0       	rjmp	.+12     	; 0x5158 <xio_usb_init+0x22>
	if ((--USBx.rx_buf_head) == 0) { 			// wrap condition
    514c:	87 e3       	ldi	r24, 0x37	; 55
    514e:	90 e0       	ldi	r25, 0x00	; 0
    5150:	80 93 ad 21 	sts	0x21AD, r24
    5154:	90 93 ae 21 	sts	0x21AE, r25
		USBx.rx_buf_head = RX_BUFFER_SIZE-1;	// -1 avoids the off-by-one error
	}
    5158:	27 ff       	sbrs	r18, 7
    515a:	06 c0       	rjmp	.+12     	; 0x5168 <xio_usb_init+0x32>
	if (USBx.rx_buf_head != USBx.rx_buf_tail) {	// write char unless buffer full
    515c:	83 e3       	ldi	r24, 0x33	; 51
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	80 93 ad 21 	sts	0x21AD, r24
    5164:	90 93 ae 21 	sts	0x21AE, r25
		USBx.rx_buf[USBx.rx_buf_head] = c;		// FAKE INPUT DATA
		return;
    5168:	30 ff       	sbrs	r19, 0
    516a:	09 c0       	rjmp	.+18     	; 0x517e <xio_usb_init+0x48>
	}
    516c:	80 91 ad 21 	lds	r24, 0x21AD
    5170:	90 91 ae 21 	lds	r25, 0x21AE
    5174:	80 61       	ori	r24, 0x10	; 16
    5176:	80 93 ad 21 	sts	0x21AD, r24
    517a:	90 93 ae 21 	sts	0x21AE, r25
	// buffer-full handling
	if ((++USBx.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    517e:	31 ff       	sbrs	r19, 1
    5180:	09 c0       	rjmp	.+18     	; 0x5194 <xio_usb_init+0x5e>
		USBx.rx_buf_head = 1;
    5182:	80 91 ad 21 	lds	r24, 0x21AD
    5186:	90 91 ae 21 	lds	r25, 0x21AE
    518a:	8f 7e       	andi	r24, 0xEF	; 239
    518c:	80 93 ad 21 	sts	0x21AD, r24
    5190:	90 93 ae 21 	sts	0x21AE, r25
	}
}
    5194:	32 ff       	sbrs	r19, 2
    5196:	09 c0       	rjmp	.+18     	; 0x51aa <xio_usb_init+0x74>

    5198:	80 91 ad 21 	lds	r24, 0x21AD
    519c:	90 91 ae 21 	lds	r25, 0x21AE
    51a0:	80 62       	ori	r24, 0x20	; 32
    51a2:	80 93 ad 21 	sts	0x21AD, r24
    51a6:	90 93 ae 21 	sts	0x21AE, r25
/*
 * xio_usb_queue_RX_string() - fake ISR to put a string in the RX buffer
    51aa:	33 ff       	sbrs	r19, 3
    51ac:	09 c0       	rjmp	.+18     	; 0x51c0 <xio_usb_init+0x8a>
 */
    51ae:	80 91 ad 21 	lds	r24, 0x21AD
    51b2:	90 91 ae 21 	lds	r25, 0x21AE
    51b6:	8f 7d       	andi	r24, 0xDF	; 223
    51b8:	80 93 ad 21 	sts	0x21AD, r24
    51bc:	90 93 ae 21 	sts	0x21AE, r25

void xio_usb_queue_RX_string(char *buf)
    51c0:	34 ff       	sbrs	r19, 4
    51c2:	09 c0       	rjmp	.+18     	; 0x51d6 <xio_usb_init+0xa0>
{
    51c4:	80 91 ad 21 	lds	r24, 0x21AD
    51c8:	90 91 ae 21 	lds	r25, 0x21AE
    51cc:	80 64       	ori	r24, 0x40	; 64
    51ce:	80 93 ad 21 	sts	0x21AD, r24
    51d2:	90 93 ae 21 	sts	0x21AE, r25
	char c;
	uint8_t i=0;
    51d6:	35 ff       	sbrs	r19, 5
    51d8:	09 c0       	rjmp	.+18     	; 0x51ec <xio_usb_init+0xb6>

    51da:	80 91 ad 21 	lds	r24, 0x21AD
    51de:	90 91 ae 21 	lds	r25, 0x21AE
    51e2:	8f 7b       	andi	r24, 0xBF	; 191
    51e4:	80 93 ad 21 	sts	0x21AD, r24
    51e8:	90 93 ae 21 	sts	0x21AE, r25
	while ((c = buf[i++]) != NUL) {
		xio_usb_queue_RX_char(c);
    51ec:	36 ff       	sbrs	r19, 6
    51ee:	09 c0       	rjmp	.+18     	; 0x5202 <xio_usb_init+0xcc>
	}
    51f0:	80 91 ad 21 	lds	r24, 0x21AD
    51f4:	90 91 ae 21 	lds	r25, 0x21AE
    51f8:	80 68       	ori	r24, 0x80	; 128
    51fa:	80 93 ad 21 	sts	0x21AD, r24
    51fe:	90 93 ae 21 	sts	0x21AE, r25
}

    5202:	37 ff       	sbrs	r19, 7
    5204:	09 c0       	rjmp	.+18     	; 0x5218 <xio_usb_init+0xe2>
/* 
    5206:	80 91 ad 21 	lds	r24, 0x21AD
    520a:	90 91 ae 21 	lds	r25, 0x21AE
    520e:	8f 77       	andi	r24, 0x7F	; 127
    5210:	80 93 ad 21 	sts	0x21AD, r24
    5214:	90 93 ae 21 	sts	0x21AE, r25
 * USB_TX_ISR - USB transmitter interrupt (TX)
 *
 * The TX interrupt dilemma: TX interrupts occur when the USART DATA register is 
 * empty (and the ISR must disable interrupts when nothing's left to read, or they 
    5218:	10 92 b0 21 	sts	0x21B0, r1
 * keep firing). If the TX buffer is completely empty (TXCIF is set) then enabling
    521c:	80 eb       	ldi	r24, 0xB0	; 176
    521e:	91 e2       	ldi	r25, 0x21	; 33
    5220:	80 93 0c 20 	sts	0x200C, r24
    5224:	90 93 0d 20 	sts	0x200D, r25
 * interrupts does no good. The USART won't interrupt and the TX circular buffer 
 * never empties.
 *
    5228:	81 e0       	ldi	r24, 0x01	; 1
    522a:	80 93 b7 21 	sts	0x21B7, r24
 * So we define a dequeue function that can be called from either the ISR or be 
    522e:	80 93 b6 21 	sts	0x21B6, r24
 * called from the putc() if it detects TXCIF. Care should be taken to make sure 
    5232:	80 93 b9 21 	sts	0x21B9, r24
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
    5236:	80 93 b8 21 	sts	0x21B8, r24
 * the dequeue has occurred).
    523a:	82 e0       	ldi	r24, 0x02	; 2
    523c:	80 93 b3 21 	sts	0x21B3, r24
 */

    5240:	80 ea       	ldi	r24, 0xA0	; 160
    5242:	98 e0       	ldi	r25, 0x08	; 8
    5244:	80 93 e6 21 	sts	0x21E6, r24
    5248:	90 93 e7 21 	sts	0x21E7, r25
ISR(USB_TX_ISR_vect)	//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
    524c:	80 e4       	ldi	r24, 0x40	; 64
    524e:	96 e0       	ldi	r25, 0x06	; 6
    5250:	80 93 e8 21 	sts	0x21E8, r24
    5254:	90 93 e9 21 	sts	0x21E9, r25
{
	if (USBx.tx_buf_head == USBx.tx_buf_tail) {	// buffer empty - disable ints
		USBx.usart->CTRLA = CTRLA_RXON_TXOFF;	// won't work if you just &= it
    5258:	ee 23       	and	r30, r30
    525a:	09 f4       	brne	.+2      	; 0x525e <xio_usb_init+0x128>
    525c:	e5 e0       	ldi	r30, 0x05	; 5
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
		return;
	}
    525e:	8e 2f       	mov	r24, r30
    5260:	90 e0       	ldi	r25, 0x00	; 0
    5262:	fc 01       	movw	r30, r24
    5264:	ec 5d       	subi	r30, 0xDC	; 220
    5266:	f8 4f       	sbci	r31, 0xF8	; 248
    5268:	e4 91       	lpm	r30, Z+
    526a:	a0 ea       	ldi	r26, 0xA0	; 160
    526c:	b8 e0       	ldi	r27, 0x08	; 8
    526e:	16 96       	adiw	r26, 0x06	; 6
    5270:	ec 93       	st	X, r30
    5272:	16 97       	sbiw	r26, 0x06	; 6
	if (!TX_MUTEX(USB.flags)) {
    5274:	81 5d       	subi	r24, 0xD1	; 209
    5276:	98 4f       	sbci	r25, 0xF8	; 248
    5278:	fc 01       	movw	r30, r24
    527a:	84 91       	lpm	r24, Z+
    527c:	17 96       	adiw	r26, 0x07	; 7
    527e:	8c 93       	st	X, r24
    5280:	17 97       	sbiw	r26, 0x07	; 7
		if (--(USBx.tx_buf_tail) == 0) {		// advance tail and wrap 
    5282:	88 e1       	ldi	r24, 0x18	; 24
    5284:	14 96       	adiw	r26, 0x04	; 4
    5286:	8c 93       	st	X, r24
    5288:	14 97       	sbiw	r26, 0x04	; 4
			USBx.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one err (OBOE)
    528a:	81 e2       	ldi	r24, 0x21	; 33
    528c:	13 96       	adiw	r26, 0x03	; 3
    528e:	8c 93       	st	X, r24
		}
		USBx.usart->DATA = USBx.tx_buf[USBx.tx_buf_tail]; // write to TX DATA reg
    5290:	e0 e4       	ldi	r30, 0x40	; 64
    5292:	f6 e0       	ldi	r31, 0x06	; 6
    5294:	84 e0       	ldi	r24, 0x04	; 4
    5296:	82 83       	std	Z+2, r24	; 0x02
	}
    5298:	88 e0       	ldi	r24, 0x08	; 8
    529a:	81 83       	std	Z+1, r24	; 0x01
}
    529c:	85 83       	std	Z+5, r24	; 0x05

    529e:	81 e0       	ldi	r24, 0x01	; 1
    52a0:	82 83       	std	Z+2, r24	; 0x02
/* 
    52a2:	82 e0       	ldi	r24, 0x02	; 2
    52a4:	81 83       	std	Z+1, r24	; 0x01
 * xio_putc_usb() - blocking and nonblocking char writer for USB device 
    52a6:	85 83       	std	Z+5, r24	; 0x05
 *
 *	Compatible with stdio system - may be bound to a FILE handle
    52a8:	08 95       	ret

000052aa <xio_usb_control>:
		}
	};
	// write to data register
	USBx.tx_buf_head = USBx.next_tx_buf_head;	// accept the next buffer head value
	USBx.tx_buf[USBx.tx_buf_head] = c;			// ...and write char to buffer

    52aa:	ac 01       	movw	r20, r24
	if (CRLF(USB.flags) && (c == '\n')) {		// detect LF and add a CR
		return xio_putc_usb('\r', stream);		// recursion.
    52ac:	8f 70       	andi	r24, 0x0F	; 15
    52ae:	90 70       	andi	r25, 0x00	; 0
    52b0:	00 97       	sbiw	r24, 0x00	; 0
    52b2:	91 f0       	breq	.+36     	; 0x52d8 <xio_usb_control+0x2e>
	}
    52b4:	a0 91 e6 21 	lds	r26, 0x21E6
    52b8:	b0 91 e7 21 	lds	r27, 0x21E7
    52bc:	9c 01       	movw	r18, r24
    52be:	2c 5d       	subi	r18, 0xDC	; 220
    52c0:	38 4f       	sbci	r19, 0xF8	; 248
    52c2:	f9 01       	movw	r30, r18
    52c4:	24 91       	lpm	r18, Z+
    52c6:	16 96       	adiw	r26, 0x06	; 6
    52c8:	2c 93       	st	X, r18
    52ca:	16 97       	sbiw	r26, 0x06	; 6

    52cc:	81 5d       	subi	r24, 0xD1	; 209
    52ce:	98 4f       	sbci	r25, 0xF8	; 248
    52d0:	fc 01       	movw	r30, r24
    52d2:	84 91       	lpm	r24, Z+
    52d4:	17 96       	adiw	r26, 0x07	; 7
    52d6:	8c 93       	st	X, r24
	// dequeue the buffer if DATA register is ready
	if (USBx.usart->STATUS & 0x20) {
    52d8:	46 ff       	sbrs	r20, 6
    52da:	09 c0       	rjmp	.+18     	; 0x52ee <xio_usb_control+0x44>
		if (USBx.tx_buf_head == USBx.tx_buf_tail) {	// buf might be empty if IRQ got it
    52dc:	80 91 ad 21 	lds	r24, 0x21AD
    52e0:	90 91 ae 21 	lds	r25, 0x21AE
    52e4:	84 60       	ori	r24, 0x04	; 4
    52e6:	80 93 ad 21 	sts	0x21AD, r24
    52ea:	90 93 ae 21 	sts	0x21AE, r25
			return (0);
		}
    52ee:	47 ff       	sbrs	r20, 7
    52f0:	09 c0       	rjmp	.+18     	; 0x5304 <xio_usb_control+0x5a>
		USB.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    52f2:	80 91 ad 21 	lds	r24, 0x21AD
    52f6:	90 91 ae 21 	lds	r25, 0x21AE
    52fa:	8b 7f       	andi	r24, 0xFB	; 251
    52fc:	80 93 ad 21 	sts	0x21AD, r24
    5300:	90 93 ae 21 	sts	0x21AE, r25
		if (--(USBx.tx_buf_tail) == 0) {		// advance tail and wrap if needed
			USBx.tx_buf_tail = TX_BUFFER_SIZE-1;// -1 avoids off-by-one error (OBOE)
    5304:	50 ff       	sbrs	r21, 0
    5306:	09 c0       	rjmp	.+18     	; 0x531a <xio_usb_control+0x70>
		}
    5308:	80 91 ad 21 	lds	r24, 0x21AD
    530c:	90 91 ae 21 	lds	r25, 0x21AE
    5310:	80 61       	ori	r24, 0x10	; 16
    5312:	80 93 ad 21 	sts	0x21AD, r24
    5316:	90 93 ae 21 	sts	0x21AE, r25
		USBx.usart->DATA = USBx.tx_buf[USBx.tx_buf_tail];// write char to TX DATA reg
		USB.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    531a:	51 ff       	sbrs	r21, 1
    531c:	09 c0       	rjmp	.+18     	; 0x5330 <xio_usb_control+0x86>
	}
    531e:	80 91 ad 21 	lds	r24, 0x21AD
    5322:	90 91 ae 21 	lds	r25, 0x21AE
    5326:	8f 7e       	andi	r24, 0xEF	; 239
    5328:	80 93 ad 21 	sts	0x21AD, r24
    532c:	90 93 ae 21 	sts	0x21AE, r25
	// enable interrupts regardless
	USBx.usart->CTRLA = CTRLA_RXON_TXON;		// doesn't work if you just |= it
    5330:	52 ff       	sbrs	r21, 2
    5332:	09 c0       	rjmp	.+18     	; 0x5346 <xio_usb_control+0x9c>
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    5334:	80 91 ad 21 	lds	r24, 0x21AD
    5338:	90 91 ae 21 	lds	r25, 0x21AE
    533c:	80 62       	ori	r24, 0x20	; 32
    533e:	80 93 ad 21 	sts	0x21AD, r24
    5342:	90 93 ae 21 	sts	0x21AE, r25
	sei();										// enable global interrupts

    5346:	53 ff       	sbrs	r21, 3
    5348:	09 c0       	rjmp	.+18     	; 0x535c <xio_usb_control+0xb2>
	return (0);	// 0 = OK
    534a:	80 91 ad 21 	lds	r24, 0x21AD
    534e:	90 91 ae 21 	lds	r25, 0x21AE
    5352:	8f 7d       	andi	r24, 0xDF	; 223
    5354:	80 93 ad 21 	sts	0x21AD, r24
    5358:	90 93 ae 21 	sts	0x21AE, r25
}

    535c:	54 ff       	sbrs	r21, 4
    535e:	09 c0       	rjmp	.+18     	; 0x5372 <xio_usb_control+0xc8>
/* 
    5360:	80 91 ad 21 	lds	r24, 0x21AD
    5364:	90 91 ae 21 	lds	r25, 0x21AE
    5368:	80 64       	ori	r24, 0x40	; 64
    536a:	80 93 ad 21 	sts	0x21AD, r24
    536e:	90 93 ae 21 	sts	0x21AE, r25
 *  dispatch table for xio_usb_getc
 *
    5372:	55 ff       	sbrs	r21, 5
    5374:	09 c0       	rjmp	.+18     	; 0x5388 <xio_usb_control+0xde>
 *  Functions take no input but use static USB.c, USB.signals, and others
    5376:	80 91 ad 21 	lds	r24, 0x21AD
    537a:	90 91 ae 21 	lds	r25, 0x21AE
    537e:	8f 7b       	andi	r24, 0xBF	; 191
    5380:	80 93 ad 21 	sts	0x21AD, r24
    5384:	90 93 ae 21 	sts	0x21AE, r25
 *  Returns c (may be translated depending on the function)
 *
    5388:	56 ff       	sbrs	r21, 6
    538a:	09 c0       	rjmp	.+18     	; 0x539e <xio_usb_control+0xf4>
 *  NOTE: As of build 203 the signal dispatchers (KILL, SHIFTOUT...) are unused. 
    538c:	80 91 ad 21 	lds	r24, 0x21AD
    5390:	90 91 ae 21 	lds	r25, 0x21AE
    5394:	80 68       	ori	r24, 0x80	; 128
    5396:	80 93 ad 21 	sts	0x21AD, r24
    539a:	90 93 ae 21 	sts	0x21AE, r25
 *	Signal chars are trapped in the ISR and are never inserted into the RX queue
 *	Their dispatchers are left in for clarity and stubbed out
    539e:	57 ff       	sbrs	r21, 7
    53a0:	09 c0       	rjmp	.+18     	; 0x53b4 <xio_usb_control+0x10a>
 */
    53a2:	80 91 ad 21 	lds	r24, 0x21AD
    53a6:	90 91 ae 21 	lds	r25, 0x21AE
    53aa:	8f 77       	andi	r24, 0x7F	; 127
    53ac:	80 93 ad 21 	sts	0x21AD, r24
    53b0:	90 93 ae 21 	sts	0x21AE, r25

static int (*getcFuncs[])(void) PROGMEM = { 	// use if you want it in FLASH
//static int (*getcFuncs[])(void) = {			// ALTERNATE: put table in SRAM
    53b4:	80 e0       	ldi	r24, 0x00	; 0
    53b6:	08 95       	ret

000053b8 <__vector_26>:
		_getc_char,			//	99	63	c	
		_getc_char,			//	100	64	d	
		_getc_char,			//	101	65	e	
		_getc_char,			//	102	66	f	
		_getc_char,			//	103	67	g	
		_getc_char,			//	104	68	h	
    53b8:	1f 92       	push	r1
    53ba:	0f 92       	push	r0
    53bc:	0f b6       	in	r0, 0x3f	; 63
    53be:	0f 92       	push	r0
    53c0:	0b b6       	in	r0, 0x3b	; 59
    53c2:	0f 92       	push	r0
    53c4:	11 24       	eor	r1, r1
    53c6:	8f 93       	push	r24
    53c8:	9f 93       	push	r25
    53ca:	af 93       	push	r26
    53cc:	bf 93       	push	r27
    53ce:	ef 93       	push	r30
    53d0:	ff 93       	push	r31
		_getc_char,			//	105	69	i	
    53d2:	90 91 b9 21 	lds	r25, 0x21B9
    53d6:	80 91 b8 21 	lds	r24, 0x21B8
    53da:	98 17       	cp	r25, r24
    53dc:	39 f4       	brne	.+14     	; 0x53ec <__vector_26+0x34>
		_getc_char,			//	106	6A	j	
    53de:	e0 91 e6 21 	lds	r30, 0x21E6
    53e2:	f0 91 e7 21 	lds	r31, 0x21E7
    53e6:	80 e2       	ldi	r24, 0x20	; 32
    53e8:	83 83       	std	Z+3, r24	; 0x03
    53ea:	1e c0       	rjmp	.+60     	; 0x5428 <__vector_26+0x70>
		_getc_char,			//	107	6B	k	
		_getc_char,			//	108	6C	l	
		_getc_char,			//	109	6D	m	
		_getc_char,			//	110	6E	n	
    53ec:	80 91 ad 21 	lds	r24, 0x21AD
    53f0:	90 91 ae 21 	lds	r25, 0x21AE
    53f4:	93 fd       	sbrc	r25, 3
    53f6:	18 c0       	rjmp	.+48     	; 0x5428 <__vector_26+0x70>
		_getc_char,			//	111	6F	o	
    53f8:	80 91 b8 21 	lds	r24, 0x21B8
    53fc:	81 50       	subi	r24, 0x01	; 1
    53fe:	80 93 b8 21 	sts	0x21B8, r24
    5402:	80 91 b8 21 	lds	r24, 0x21B8
    5406:	88 23       	and	r24, r24
    5408:	19 f4       	brne	.+6      	; 0x5410 <__vector_26+0x58>
		_getc_char,			//	112	70	p	
    540a:	81 e1       	ldi	r24, 0x11	; 17
    540c:	80 93 b8 21 	sts	0x21B8, r24
		_getc_char,			//	113	71	q	
		_getc_char,			//	114	72	r	
    5410:	e0 91 e6 21 	lds	r30, 0x21E6
    5414:	f0 91 e7 21 	lds	r31, 0x21E7
    5418:	a0 91 b8 21 	lds	r26, 0x21B8
    541c:	b0 e0       	ldi	r27, 0x00	; 0
    541e:	a3 55       	subi	r26, 0x53	; 83
    5420:	be 4d       	sbci	r27, 0xDE	; 222
    5422:	97 96       	adiw	r26, 0x27	; 39
    5424:	8c 91       	ld	r24, X
    5426:	80 83       	st	Z, r24
		_getc_char,			//	115	73	s	
		_getc_char,			//	116	74	t	
    5428:	ff 91       	pop	r31
    542a:	ef 91       	pop	r30
    542c:	bf 91       	pop	r27
    542e:	af 91       	pop	r26
    5430:	9f 91       	pop	r25
    5432:	8f 91       	pop	r24
    5434:	0f 90       	pop	r0
    5436:	0b be       	out	0x3b, r0	; 59
    5438:	0f 90       	pop	r0
    543a:	0f be       	out	0x3f, r0	; 63
    543c:	0f 90       	pop	r0
    543e:	1f 90       	pop	r1
    5440:	18 95       	reti

00005442 <xio_usb_putc>:
		_getc_char,			//	126	7E	~	(tilde)
		_getc_DELETE		//	127	7F	DEL	(delete)
};

/*
 *  xio_getc_getc() - char reader for USB device
    5442:	48 2f       	mov	r20, r24
 *
 *	Compatible with stdio system - may be bound to a FILE handle
 *
 *  Get next character from RX buffer.
 *	See "Notes on the circular buffers" at end of xio.h for buffer details.
    5444:	20 91 ad 21 	lds	r18, 0x21AD
    5448:	30 91 ae 21 	lds	r19, 0x21AE
    544c:	d9 01       	movw	r26, r18
    544e:	a4 70       	andi	r26, 0x04	; 4
    5450:	b0 70       	andi	r27, 0x00	; 0
 *
 *  Flags that affect behavior:
 *
 *  BLOCKING behaviors
 *	 	- execute blocking or non-blocking read depending on controls
 *		- return character or -1 & XIO_SIG_WOULDBLOCK if non-blocking
    5452:	b9 01       	movw	r22, r18
    5454:	60 72       	andi	r22, 0x20	; 32
    5456:	70 70       	andi	r23, 0x00	; 0
		_getc_DELETE		//	127	7F	DEL	(delete)
};

/*
 *  xio_getc_getc() - char reader for USB device
 *
    5458:	90 91 b9 21 	lds	r25, 0x21B9
    545c:	91 50       	subi	r25, 0x01	; 1
    545e:	c1 f4       	brne	.+48     	; 0x5490 <xio_usb_putc+0x4e>
    5460:	91 e1       	ldi	r25, 0x11	; 17
    5462:	16 c0       	rjmp	.+44     	; 0x5490 <xio_usb_putc+0x4e>
 *	Compatible with stdio system - may be bound to a FILE handle
 *
 *  Get next character from RX buffer.
 *	See "Notes on the circular buffers" at end of xio.h for buffer details.
    5464:	10 97       	sbiw	r26, 0x00	; 0
    5466:	61 f0       	breq	.+24     	; 0x5480 <xio_usb_putc+0x3e>
 *
    5468:	80 91 48 00 	lds	r24, 0x0048
    546c:	81 60       	ori	r24, 0x01	; 1
    546e:	80 93 48 00 	sts	0x0048, r24
    5472:	88 95       	sleep
    5474:	80 91 48 00 	lds	r24, 0x0048
    5478:	8e 7f       	andi	r24, 0xFE	; 254
    547a:	80 93 48 00 	sts	0x0048, r24
    547e:	08 c0       	rjmp	.+16     	; 0x5490 <xio_usb_putc+0x4e>
    5480:	90 93 ba 21 	sts	0x21BA, r25
 *	This routine returns a single character from the RX buffer to the caller.
 *	It's typically called by fgets() and is useful for single-threaded IO cases.
    5484:	83 e0       	ldi	r24, 0x03	; 3
    5486:	80 93 b0 21 	sts	0x21B0, r24
    548a:	2f ef       	ldi	r18, 0xFF	; 255
    548c:	3f ef       	ldi	r19, 0xFF	; 255
    548e:	54 c0       	rjmp	.+168    	; 0x5538 <xio_usb_putc+0xf6>
/*
 *  xio_getc_getc() - char reader for USB device
 *
 *	Compatible with stdio system - may be bound to a FILE handle
 *
 *  Get next character from RX buffer.
    5490:	80 91 b8 21 	lds	r24, 0x21B8
    5494:	98 17       	cp	r25, r24
    5496:	31 f3       	breq	.-52     	; 0x5464 <xio_usb_putc+0x22>
 *	It's typically called by fgets() and is useful for single-threaded IO cases.
 *	Cases with multiple concurrent IO streams may want to use the readln() function
 *	which is incompatible with the stdio system. 
 *
 *  Flags that affect behavior:
 *
    5498:	90 93 b9 21 	sts	0x21B9, r25
 *  BLOCKING behaviors
    549c:	e0 91 b9 21 	lds	r30, 0x21B9
    54a0:	f0 e0       	ldi	r31, 0x00	; 0
    54a2:	e3 55       	subi	r30, 0x53	; 83
    54a4:	fe 4d       	sbci	r31, 0xDE	; 222
    54a6:	47 a3       	std	Z+39, r20	; 0x27
 *	 	- execute blocking or non-blocking read depending on controls
 *		- return character or -1 & XIO_SIG_WOULDBLOCK if non-blocking
    54a8:	61 15       	cp	r22, r1
    54aa:	71 05       	cpc	r23, r1
    54ac:	21 f0       	breq	.+8      	; 0x54b6 <xio_usb_putc+0x74>
    54ae:	4a 30       	cpi	r20, 0x0A	; 10
    54b0:	11 f4       	brne	.+4      	; 0x54b6 <xio_usb_putc+0x74>
    54b2:	4d e0       	ldi	r20, 0x0D	; 13
    54b4:	d1 cf       	rjmp	.-94     	; 0x5458 <xio_usb_putc+0x16>
    54b6:	90 93 ba 21 	sts	0x21BA, r25
 *		- return character or sleep() if blocking
 *
 *  ECHO behaviors
 *		- if ECHO is enabled echo character to stdout
 *		- echo all line termination chars as newlines ('\n')
    54ba:	a0 91 e6 21 	lds	r26, 0x21E6
    54be:	b0 91 e7 21 	lds	r27, 0x21E7
    54c2:	11 96       	adiw	r26, 0x01	; 1
    54c4:	8c 91       	ld	r24, X
    54c6:	11 97       	sbiw	r26, 0x01	; 1
    54c8:	85 ff       	sbrs	r24, 5
    54ca:	27 c0       	rjmp	.+78     	; 0x551a <xio_usb_putc+0xd8>
 *		- Note: putc is responsible for expanding newlines to <cr><lf> if needed
    54cc:	90 91 b9 21 	lds	r25, 0x21B9
    54d0:	80 91 b8 21 	lds	r24, 0x21B8
    54d4:	98 17       	cp	r25, r24
    54d6:	71 f1       	breq	.+92     	; 0x5534 <xio_usb_putc+0xf2>
 *
 *  SPECIAL CHARACTERS 
 *		- special characters such as EOL and control chars are handled by the
    54d8:	38 60       	ori	r19, 0x08	; 8
    54da:	20 93 ad 21 	sts	0x21AD, r18
    54de:	30 93 ae 21 	sts	0x21AE, r19
 *		  character helper routines. See them for behaviors
    54e2:	80 91 b8 21 	lds	r24, 0x21B8
    54e6:	81 50       	subi	r24, 0x01	; 1
    54e8:	80 93 b8 21 	sts	0x21B8, r24
    54ec:	80 91 b8 21 	lds	r24, 0x21B8
    54f0:	88 23       	and	r24, r24
    54f2:	19 f4       	brne	.+6      	; 0x54fa <xio_usb_putc+0xb8>
 */
    54f4:	81 e1       	ldi	r24, 0x11	; 17
    54f6:	80 93 b8 21 	sts	0x21B8, r24

int xio_getc_usb(FILE *stream)
    54fa:	e0 91 b8 21 	lds	r30, 0x21B8
    54fe:	f0 e0       	ldi	r31, 0x00	; 0
    5500:	e3 55       	subi	r30, 0x53	; 83
    5502:	fe 4d       	sbci	r31, 0xDE	; 222
    5504:	87 a1       	ldd	r24, Z+39	; 0x27
    5506:	8c 93       	st	X, r24
{
    5508:	80 91 ad 21 	lds	r24, 0x21AD
    550c:	90 91 ae 21 	lds	r25, 0x21AE
    5510:	97 7f       	andi	r25, 0xF7	; 247
    5512:	80 93 ad 21 	sts	0x21AD, r24
    5516:	90 93 ae 21 	sts	0x21AE, r25
	while (USBx.rx_buf_head == USBx.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(USB.flags)) {
			sleep_mode();
    551a:	e0 91 e6 21 	lds	r30, 0x21E6
    551e:	f0 91 e7 21 	lds	r31, 0x21E7
    5522:	81 e2       	ldi	r24, 0x21	; 33
    5524:	83 83       	std	Z+3, r24	; 0x03
		} else {
    5526:	80 91 a2 00 	lds	r24, 0x00A2
    552a:	81 60       	ori	r24, 0x01	; 1
    552c:	e0 ea       	ldi	r30, 0xA0	; 160
    552e:	f0 e0       	ldi	r31, 0x00	; 0
    5530:	82 83       	std	Z+2, r24	; 0x02
			USB.sig = XIO_SIG_EAGAIN;
    5532:	78 94       	sei
    5534:	20 e0       	ldi	r18, 0x00	; 0
    5536:	30 e0       	ldi	r19, 0x00	; 0
			return(_FDEV_ERR);
		}
	}
    5538:	c9 01       	movw	r24, r18
    553a:	08 95       	ret

0000553c <xio_usb_getc>:
		_readln_char,		//	120	78	x	
		_readln_char,		//	121	79	y	
		_readln_char,		//	122	7A	z	
		_readln_char,		//	123	7B	{	(left/opening brace)
		_readln_char,		//	124	7C	|	(vertical bar)
		_readln_char,		//	125	7D	}	(right/closing brace)
    553c:	20 91 ad 21 	lds	r18, 0x21AD
    5540:	30 91 ae 21 	lds	r19, 0x21AE
    5544:	24 70       	andi	r18, 0x04	; 4
    5546:	30 70       	andi	r19, 0x00	; 0
    5548:	15 c0       	rjmp	.+42     	; 0x5574 <xio_usb_getc+0x38>
    554a:	21 15       	cp	r18, r1
    554c:	31 05       	cpc	r19, r1
    554e:	61 f0       	breq	.+24     	; 0x5568 <xio_usb_getc+0x2c>
		_readln_char,		//	126	7E	~	(tilde)
    5550:	80 91 48 00 	lds	r24, 0x0048
    5554:	81 60       	ori	r24, 0x01	; 1
    5556:	80 93 48 00 	sts	0x0048, r24
    555a:	88 95       	sleep
    555c:	80 91 48 00 	lds	r24, 0x0048
    5560:	8e 7f       	andi	r24, 0xFE	; 254
    5562:	80 93 48 00 	sts	0x0048, r24
    5566:	06 c0       	rjmp	.+12     	; 0x5574 <xio_usb_getc+0x38>
		_readln_DELETE		//	127	7F	DEL	(delete)
};
    5568:	83 e0       	ldi	r24, 0x03	; 3
    556a:	80 93 b0 21 	sts	0x21B0, r24
    556e:	2f ef       	ldi	r18, 0xFF	; 255
    5570:	3f ef       	ldi	r19, 0xFF	; 255
    5572:	26 c0       	rjmp	.+76     	; 0x55c0 <xio_usb_getc+0x84>
		_readln_char,		//	119	77	w	
		_readln_char,		//	120	78	x	
		_readln_char,		//	121	79	y	
		_readln_char,		//	122	7A	z	
		_readln_char,		//	123	7B	{	(left/opening brace)
		_readln_char,		//	124	7C	|	(vertical bar)
    5574:	90 91 b7 21 	lds	r25, 0x21B7
    5578:	80 91 b6 21 	lds	r24, 0x21B6
    557c:	98 17       	cp	r25, r24
    557e:	29 f3       	breq	.-54     	; 0x554a <xio_usb_getc+0xe>
		_readln_DELETE		//	127	7F	DEL	(delete)
};

/* 
 *	xio_readln_usb() - main loop task for USB device
 *
    5580:	80 91 b6 21 	lds	r24, 0x21B6
    5584:	81 50       	subi	r24, 0x01	; 1
    5586:	80 93 b6 21 	sts	0x21B6, r24
    558a:	80 91 b6 21 	lds	r24, 0x21B6
    558e:	88 23       	and	r24, r24
    5590:	19 f4       	brne	.+6      	; 0x5598 <xio_usb_getc+0x5c>
 *	Read a complete (newline terminated) line from the USB device. 
    5592:	88 e1       	ldi	r24, 0x18	; 24
    5594:	80 93 b6 21 	sts	0x21B6, r24
 *	Retains line context across calls - so it can be called multiple times.
 *	Reads as many characters as it can until any of the following is true:
    5598:	e0 91 b6 21 	lds	r30, 0x21B6
    559c:	f0 e0       	ldi	r31, 0x00	; 0
    559e:	e3 55       	subi	r30, 0x53	; 83
    55a0:	fe 4d       	sbci	r31, 0xDE	; 222
    55a2:	86 85       	ldd	r24, Z+14	; 0x0e
    55a4:	8f 77       	andi	r24, 0x7F	; 127
    55a6:	80 93 b1 21 	sts	0x21B1, r24
 *
 *	  - RX buffer is empty on entry (return TG_EAGAIN)
    55aa:	90 e0       	ldi	r25, 0x00	; 0
    55ac:	88 0f       	add	r24, r24
    55ae:	99 1f       	adc	r25, r25
    55b0:	8a 59       	subi	r24, 0x9A	; 154
    55b2:	97 4f       	sbci	r25, 0xF7	; 247
    55b4:	fc 01       	movw	r30, r24
    55b6:	25 91       	lpm	r18, Z+
    55b8:	34 91       	lpm	r19, Z+
    55ba:	f9 01       	movw	r30, r18
    55bc:	19 95       	eicall
    55be:	9c 01       	movw	r18, r24
 *	  - no more chars to read from RX buffer (return TG_EAGAIN)
 *	  - read would cause output buffer overflow (return TG_BUFFER_FULL)
    55c0:	c9 01       	movw	r24, r18
    55c2:	08 95       	ret

000055c4 <_getc_char>:
 *	  - read returns complete line (returns TG_OK)
 *
 *	Note: LINEMODE flag in device struct is ignored. It's ALWAYS LINEMODE here.
 */

int xio_readln_usb(char *buf, uint8_t size)
    55c4:	80 91 ad 21 	lds	r24, 0x21AD
    55c8:	84 ff       	sbrs	r24, 4
    55ca:	08 c0       	rjmp	.+16     	; 0x55dc <_getc_char+0x18>
    55cc:	60 91 40 25 	lds	r22, 0x2540
    55d0:	70 91 41 25 	lds	r23, 0x2541
    55d4:	80 91 b1 21 	lds	r24, 0x21B1
    55d8:	0e 94 21 2a 	call	0x5442	; 0x5442 <xio_usb_putc>
{
//	uint8_t status = 0;
    55dc:	80 91 b1 21 	lds	r24, 0x21B1
    55e0:	90 e0       	ldi	r25, 0x00	; 0
    55e2:	08 95       	ret

000055e4 <_getc_NEWLINE>:

	if (!IN_LINE(USB.flags)) {					// first time thru initializations
		USB.len = 0;							// zero buffer
		USB.status = 0;
    55e4:	90 91 ad 21 	lds	r25, 0x21AD
    55e8:	96 ff       	sbrs	r25, 6
    55ea:	03 c0       	rjmp	.+6      	; 0x55f2 <_getc_NEWLINE+0xe>
    55ec:	8a e0       	ldi	r24, 0x0A	; 10
    55ee:	80 93 b1 21 	sts	0x21B1, r24
		USB.size = size;
    55f2:	94 ff       	sbrs	r25, 4
    55f4:	08 c0       	rjmp	.+16     	; 0x5606 <_getc_NEWLINE+0x22>
    55f6:	60 91 40 25 	lds	r22, 0x2540
    55fa:	70 91 41 25 	lds	r23, 0x2541
    55fe:	80 91 b1 21 	lds	r24, 0x21B1
    5602:	0e 94 21 2a 	call	0x5442	; 0x5442 <xio_usb_putc>
		USB.sig = XIO_SIG_OK;					// reset signal register
		USB.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    5606:	80 91 b1 21 	lds	r24, 0x21B1
    560a:	90 e0       	ldi	r25, 0x00	; 0
    560c:	08 95       	ret

0000560e <_getc_SEMICOLON>:
	}
	while (TRUE) { 
		switch (USB.status = _xio_usb_readchar(USB.buf, USB.size)) {
			case (TG_BUFFER_EMPTY): return (TG_EAGAIN); break;	// empty condition
    560e:	80 91 ad 21 	lds	r24, 0x21AD
    5612:	87 ff       	sbrs	r24, 7
    5614:	03 c0       	rjmp	.+6      	; 0x561c <_getc_SEMICOLON+0xe>
			case (TG_BUFFER_FULL): return (USB.status); break;	// overrun error
    5616:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <_getc_NEWLINE>
    561a:	08 95       	ret
			case (TG_EOL): return (TG_OK); break;				// got completed line
			case (TG_EAGAIN): break;							// loop
    561c:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <_getc_char>
		}
    5620:	08 95       	ret

00005622 <_getc_DELETE>:
	}
}

int _xio_usb_readchar(char *buf, uint8_t len)
    5622:	8a e0       	ldi	r24, 0x0A	; 10
    5624:	80 93 b0 21 	sts	0x21B0, r24
{
	if (USBx.rx_buf_head == USBx.rx_buf_tail) {	// RX ISR buffer empty
    5628:	8f ef       	ldi	r24, 0xFF	; 255
    562a:	9f ef       	ldi	r25, 0xFF	; 255
    562c:	08 95       	ret

0000562e <_xio_usb_readchar>:
    562e:	90 91 b7 21 	lds	r25, 0x21B7
    5632:	80 91 b6 21 	lds	r24, 0x21B6
    5636:	98 17       	cp	r25, r24
    5638:	19 f4       	brne	.+6      	; 0x5640 <_xio_usb_readchar+0x12>
    563a:	28 e0       	ldi	r18, 0x08	; 8
    563c:	30 e0       	ldi	r19, 0x00	; 0
    563e:	20 c0       	rjmp	.+64     	; 0x5680 <_xio_usb_readchar+0x52>
    5640:	80 91 b6 21 	lds	r24, 0x21B6
    5644:	81 50       	subi	r24, 0x01	; 1
    5646:	80 93 b6 21 	sts	0x21B6, r24
    564a:	80 91 b6 21 	lds	r24, 0x21B6
    564e:	88 23       	and	r24, r24
    5650:	19 f4       	brne	.+6      	; 0x5658 <_xio_usb_readchar+0x2a>
    5652:	88 e1       	ldi	r24, 0x18	; 24
    5654:	80 93 b6 21 	sts	0x21B6, r24
    5658:	e0 91 b6 21 	lds	r30, 0x21B6
    565c:	f0 e0       	ldi	r31, 0x00	; 0
    565e:	e3 55       	subi	r30, 0x53	; 83
    5660:	fe 4d       	sbci	r31, 0xDE	; 222
    5662:	86 85       	ldd	r24, Z+14	; 0x0e
    5664:	8f 77       	andi	r24, 0x7F	; 127
    5666:	80 93 b1 21 	sts	0x21B1, r24
    566a:	90 e0       	ldi	r25, 0x00	; 0
    566c:	88 0f       	add	r24, r24
    566e:	99 1f       	adc	r25, r25
    5670:	8a 59       	subi	r24, 0x9A	; 154
    5672:	98 4f       	sbci	r25, 0xF8	; 248
    5674:	fc 01       	movw	r30, r24
    5676:	25 91       	lpm	r18, Z+
    5678:	34 91       	lpm	r19, Z+
    567a:	f9 01       	movw	r30, r18
    567c:	19 95       	eicall
    567e:	9c 01       	movw	r18, r24
    5680:	c9 01       	movw	r24, r18
    5682:	08 95       	ret

00005684 <xio_usb_readln>:
    5684:	1f 93       	push	r17
    5686:	cf 93       	push	r28
    5688:	df 93       	push	r29
    568a:	ec 01       	movw	r28, r24
    568c:	16 2f       	mov	r17, r22
    568e:	80 91 ad 21 	lds	r24, 0x21AD
    5692:	90 91 ae 21 	lds	r25, 0x21AE
    5696:	96 fd       	sbrc	r25, 6
    5698:	11 c0       	rjmp	.+34     	; 0x56bc <xio_usb_readln+0x38>
    569a:	10 92 b2 21 	sts	0x21B2, r1
    569e:	10 92 af 21 	sts	0x21AF, r1
    56a2:	60 93 b3 21 	sts	0x21B3, r22
    56a6:	c0 93 b4 21 	sts	0x21B4, r28
    56aa:	d0 93 b5 21 	sts	0x21B5, r29
    56ae:	10 92 b0 21 	sts	0x21B0, r1
    56b2:	90 64       	ori	r25, 0x40	; 64
    56b4:	80 93 ad 21 	sts	0x21AD, r24
    56b8:	90 93 ae 21 	sts	0x21AE, r25
    56bc:	ce 01       	movw	r24, r28
    56be:	61 2f       	mov	r22, r17
    56c0:	0e 94 17 2b 	call	0x562e	; 0x562e <_xio_usb_readchar>
    56c4:	80 93 af 21 	sts	0x21AF, r24
    56c8:	87 30       	cpi	r24, 0x07	; 7
    56ca:	29 f0       	breq	.+10     	; 0x56d6 <xio_usb_readln+0x52>
    56cc:	88 30       	cpi	r24, 0x08	; 8
    56ce:	31 f0       	breq	.+12     	; 0x56dc <xio_usb_readln+0x58>
    56d0:	84 30       	cpi	r24, 0x04	; 4
    56d2:	a1 f7       	brne	.-24     	; 0x56bc <xio_usb_readln+0x38>
    56d4:	06 c0       	rjmp	.+12     	; 0x56e2 <xio_usb_readln+0x5e>
    56d6:	27 e0       	ldi	r18, 0x07	; 7
    56d8:	30 e0       	ldi	r19, 0x00	; 0
    56da:	05 c0       	rjmp	.+10     	; 0x56e6 <xio_usb_readln+0x62>
    56dc:	21 e0       	ldi	r18, 0x01	; 1
    56de:	30 e0       	ldi	r19, 0x00	; 0
    56e0:	02 c0       	rjmp	.+4      	; 0x56e6 <xio_usb_readln+0x62>
    56e2:	20 e0       	ldi	r18, 0x00	; 0
    56e4:	30 e0       	ldi	r19, 0x00	; 0
    56e6:	c9 01       	movw	r24, r18
    56e8:	df 91       	pop	r29
    56ea:	cf 91       	pop	r28
    56ec:	1f 91       	pop	r17
    56ee:	08 95       	ret

000056f0 <_readln_char>:
    56f0:	90 91 b2 21 	lds	r25, 0x21B2
    56f4:	20 91 b3 21 	lds	r18, 0x21B3
    56f8:	e0 91 b4 21 	lds	r30, 0x21B4
    56fc:	f0 91 b5 21 	lds	r31, 0x21B5
    5700:	29 17       	cp	r18, r25
    5702:	48 f4       	brcc	.+18     	; 0x5716 <_readln_char+0x26>
    5704:	81 e0       	ldi	r24, 0x01	; 1
    5706:	80 93 b0 21 	sts	0x21B0, r24
    570a:	e2 0f       	add	r30, r18
    570c:	f1 1d       	adc	r31, r1
    570e:	10 82       	st	Z, r1
    5710:	27 e0       	ldi	r18, 0x07	; 7
    5712:	30 e0       	ldi	r19, 0x00	; 0
    5714:	16 c0       	rjmp	.+44     	; 0x5742 <_readln_char+0x52>
    5716:	e9 0f       	add	r30, r25
    5718:	f1 1d       	adc	r31, r1
    571a:	80 91 b1 21 	lds	r24, 0x21B1
    571e:	80 83       	st	Z, r24
    5720:	9f 5f       	subi	r25, 0xFF	; 255
    5722:	90 93 b2 21 	sts	0x21B2, r25
    5726:	80 91 ad 21 	lds	r24, 0x21AD
    572a:	84 ff       	sbrs	r24, 4
    572c:	08 c0       	rjmp	.+16     	; 0x573e <_readln_char+0x4e>
    572e:	60 91 40 25 	lds	r22, 0x2540
    5732:	70 91 41 25 	lds	r23, 0x2541
    5736:	80 91 b1 21 	lds	r24, 0x21B1
    573a:	0e 94 21 2a 	call	0x5442	; 0x5442 <xio_usb_putc>
    573e:	21 e0       	ldi	r18, 0x01	; 1
    5740:	30 e0       	ldi	r19, 0x00	; 0
    5742:	c9 01       	movw	r24, r18
    5744:	08 95       	ret

00005746 <_readln_NEWLINE>:
    5746:	81 e0       	ldi	r24, 0x01	; 1
    5748:	80 93 b0 21 	sts	0x21B0, r24
    574c:	80 91 b2 21 	lds	r24, 0x21B2
    5750:	e0 91 b4 21 	lds	r30, 0x21B4
    5754:	f0 91 b5 21 	lds	r31, 0x21B5
    5758:	e8 0f       	add	r30, r24
    575a:	f1 1d       	adc	r31, r1
    575c:	10 82       	st	Z, r1
    575e:	20 91 ad 21 	lds	r18, 0x21AD
    5762:	30 91 ae 21 	lds	r19, 0x21AE
    5766:	c9 01       	movw	r24, r18
    5768:	9f 7b       	andi	r25, 0xBF	; 191
    576a:	80 93 ad 21 	sts	0x21AD, r24
    576e:	90 93 ae 21 	sts	0x21AE, r25
    5772:	24 ff       	sbrs	r18, 4
    5774:	07 c0       	rjmp	.+14     	; 0x5784 <_readln_NEWLINE+0x3e>
    5776:	60 91 40 25 	lds	r22, 0x2540
    577a:	70 91 41 25 	lds	r23, 0x2541
    577e:	8a e0       	ldi	r24, 0x0A	; 10
    5780:	0e 94 21 2a 	call	0x5442	; 0x5442 <xio_usb_putc>
    5784:	84 e0       	ldi	r24, 0x04	; 4
    5786:	90 e0       	ldi	r25, 0x00	; 0
    5788:	08 95       	ret

0000578a <_readln_SEMICOLON>:
    578a:	80 91 ad 21 	lds	r24, 0x21AD
    578e:	87 ff       	sbrs	r24, 7
    5790:	03 c0       	rjmp	.+6      	; 0x5798 <_readln_SEMICOLON+0xe>
    5792:	0e 94 a3 2b 	call	0x5746	; 0x5746 <_readln_NEWLINE>
    5796:	08 95       	ret
    5798:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <_readln_char>
    579c:	08 95       	ret

0000579e <_readln_DELETE>:
    579e:	80 91 b2 21 	lds	r24, 0x21B2
    57a2:	81 50       	subi	r24, 0x01	; 1
    57a4:	80 93 b2 21 	sts	0x21B2, r24
    57a8:	80 91 ad 21 	lds	r24, 0x21AD
    57ac:	84 ff       	sbrs	r24, 4
    57ae:	08 c0       	rjmp	.+16     	; 0x57c0 <_readln_DELETE+0x22>
    57b0:	60 91 40 25 	lds	r22, 0x2540
    57b4:	70 91 41 25 	lds	r23, 0x2541
    57b8:	80 91 b1 21 	lds	r24, 0x21B1
    57bc:	0e 94 21 2a 	call	0x5442	; 0x5442 <xio_usb_putc>
    57c0:	81 e0       	ldi	r24, 0x01	; 1
    57c2:	90 e0       	ldi	r25, 0x00	; 0
    57c4:	08 95       	ret

000057c6 <_sig_KILL>:
    57c6:	84 e0       	ldi	r24, 0x04	; 4
    57c8:	80 93 b0 21 	sts	0x21B0, r24
    57cc:	8f ef       	ldi	r24, 0xFF	; 255
    57ce:	9f ef       	ldi	r25, 0xFF	; 255
    57d0:	08 95       	ret

000057d2 <_sig_PAUSE>:
    57d2:	86 e0       	ldi	r24, 0x06	; 6
    57d4:	80 93 b0 21 	sts	0x21B0, r24
    57d8:	8f ef       	ldi	r24, 0xFF	; 255
    57da:	9f ef       	ldi	r25, 0xFF	; 255
    57dc:	08 95       	ret

000057de <_sig_RESUME>:
    57de:	87 e0       	ldi	r24, 0x07	; 7
    57e0:	80 93 b0 21 	sts	0x21B0, r24
    57e4:	8f ef       	ldi	r24, 0xFF	; 255
    57e6:	9f ef       	ldi	r25, 0xFF	; 255
    57e8:	08 95       	ret

000057ea <_sig_SHIFTOUT>:
    57ea:	88 e0       	ldi	r24, 0x08	; 8
    57ec:	80 93 b0 21 	sts	0x21B0, r24
    57f0:	8f ef       	ldi	r24, 0xFF	; 255
    57f2:	9f ef       	ldi	r25, 0xFF	; 255
    57f4:	08 95       	ret

000057f6 <_sig_SHIFTIN>:
    57f6:	89 e0       	ldi	r24, 0x09	; 9
    57f8:	80 93 b0 21 	sts	0x21B0, r24
    57fc:	8f ef       	ldi	r24, 0xFF	; 255
    57fe:	9f ef       	ldi	r25, 0xFF	; 255
    5800:	08 95       	ret

00005802 <xio_usb_queue_RX_char>:
		_getc_char,	 		//	47	2F	/	(forward slash)
		_getc_char, 		//	48	30	0	
		_getc_char, 		//	49	31	1	
		_getc_char, 		//	50	32	2	
		_getc_char, 		//	51	33	3	
		_getc_char, 		//	52	34	4	
    5802:	28 2f       	mov	r18, r24
		_getc_char, 		//	53	35	5	
		_getc_char, 		//	54	36	6	
    5804:	83 30       	cpi	r24, 0x03	; 3
    5806:	31 f4       	brne	.+12     	; 0x5814 <xio_usb_queue_RX_char+0x12>
		_getc_char, 		//	55	37	7	
    5808:	84 e0       	ldi	r24, 0x04	; 4
    580a:	80 93 b0 21 	sts	0x21B0, r24
		_getc_char, 		//	56	38	8	
    580e:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <signal_etx>
    5812:	08 95       	ret
		_getc_char, 		//	57	39	9	
		_getc_char, 		//	58	3A	:	(colon)
		_getc_SEMICOLON,	//	59	3B	;	(semi-colon)
		_getc_char, 		//	60	3C	<	(less than)
		_getc_char, 		//	61	3D	=	(equal sign)
    5814:	80 91 b7 21 	lds	r24, 0x21B7
    5818:	81 50       	subi	r24, 0x01	; 1
    581a:	80 93 b7 21 	sts	0x21B7, r24
    581e:	80 91 b7 21 	lds	r24, 0x21B7
    5822:	88 23       	and	r24, r24
    5824:	19 f4       	brne	.+6      	; 0x582c <xio_usb_queue_RX_char+0x2a>
		_getc_char, 		//	62	3E	>	(greater than)
    5826:	88 e1       	ldi	r24, 0x18	; 24
    5828:	80 93 b7 21 	sts	0x21B7, r24
		_getc_char, 		//	63	3F	?	(question mark)
		_getc_char, 		//	64	40	@	(AT symbol)
    582c:	90 91 b7 21 	lds	r25, 0x21B7
    5830:	80 91 b6 21 	lds	r24, 0x21B6
    5834:	98 17       	cp	r25, r24
    5836:	39 f0       	breq	.+14     	; 0x5846 <xio_usb_queue_RX_char+0x44>
		_getc_char,			//	65	41	A	
    5838:	e0 91 b7 21 	lds	r30, 0x21B7
    583c:	f0 e0       	ldi	r31, 0x00	; 0
    583e:	e3 55       	subi	r30, 0x53	; 83
    5840:	fe 4d       	sbci	r31, 0xDE	; 222
    5842:	26 87       	std	Z+14, r18	; 0x0e
    5844:	08 95       	ret
		_getc_char,			//	66	42	B	
		_getc_char,			//	67	43	C	
		_getc_char,			//	68	44	D	
		_getc_char,			//	69	45	E	
    5846:	80 91 b7 21 	lds	r24, 0x21B7
    584a:	8f 5f       	subi	r24, 0xFF	; 255
    584c:	80 93 b7 21 	sts	0x21B7, r24
    5850:	80 91 b7 21 	lds	r24, 0x21B7
    5854:	89 31       	cpi	r24, 0x19	; 25
    5856:	18 f0       	brcs	.+6      	; 0x585e <xio_usb_queue_RX_char+0x5c>
		_getc_char,			//	70	46	F	
    5858:	81 e0       	ldi	r24, 0x01	; 1
    585a:	80 93 b7 21 	sts	0x21B7, r24
    585e:	08 95       	ret

00005860 <xio_usb_queue_RX_string>:
		_getc_char,			//	74	4A	J	
		_getc_char,			//	75	4B	K	
		_getc_char,			//	76	4C	L	
		_getc_char,			//	77	4D	M	
		_getc_char,			//	78	4E	N	
		_getc_char,			//	79	4F	O	
    5860:	1f 93       	push	r17
    5862:	cf 93       	push	r28
    5864:	df 93       	push	r29
    5866:	ec 01       	movw	r28, r24
    5868:	10 e0       	ldi	r17, 0x00	; 0
    586a:	02 c0       	rjmp	.+4      	; 0x5870 <xio_usb_queue_RX_string+0x10>
		_getc_char,			//	80	50	P	
		_getc_char,			//	81	51	Q	
		_getc_char,			//	82	52	R	
		_getc_char,			//	83	53	S	
		_getc_char,			//	84	54	T	
    586c:	0e 94 01 2c 	call	0x5802	; 0x5802 <xio_usb_queue_RX_char>
		_getc_char,			//	78	4E	N	
		_getc_char,			//	79	4F	O	
		_getc_char,			//	80	50	P	
		_getc_char,			//	81	51	Q	
		_getc_char,			//	82	52	R	
		_getc_char,			//	83	53	S	
    5870:	fe 01       	movw	r30, r28
    5872:	e1 0f       	add	r30, r17
    5874:	f1 1d       	adc	r31, r1
    5876:	80 81       	ld	r24, Z
    5878:	1f 5f       	subi	r17, 0xFF	; 255
    587a:	88 23       	and	r24, r24
    587c:	b9 f7       	brne	.-18     	; 0x586c <xio_usb_queue_RX_string+0xc>
		_getc_char,			//	84	54	T	
		_getc_char,			//	85	55	U	
		_getc_char,			//	86	56	V	
    587e:	df 91       	pop	r29
    5880:	cf 91       	pop	r28
    5882:	1f 91       	pop	r17
    5884:	08 95       	ret

00005886 <__vector_25>:
		_sig_RESUME, 		//	17	11	DC1 (XON) (Device Control 1) ^q	
		_getc_char, 		//	18	12	DC2	(Device Control 2)
		_sig_PAUSE,	 		//	19	13	DC3 (XOFF)(Device Control 3) ^s	
		_getc_char, 		//	20	14	DC4	(Device Control 4)
		_getc_char, 		//	21	15	NAK (Negativ Acknowledgemnt)	
		_getc_char, 		//	22	16	SYN	(Synchronous Idle)
    5886:	1f 92       	push	r1
    5888:	0f 92       	push	r0
    588a:	0f b6       	in	r0, 0x3f	; 63
    588c:	0f 92       	push	r0
    588e:	0b b6       	in	r0, 0x3b	; 59
    5890:	0f 92       	push	r0
    5892:	11 24       	eor	r1, r1
    5894:	2f 93       	push	r18
    5896:	3f 93       	push	r19
    5898:	4f 93       	push	r20
    589a:	5f 93       	push	r21
    589c:	6f 93       	push	r22
    589e:	7f 93       	push	r23
    58a0:	8f 93       	push	r24
    58a2:	9f 93       	push	r25
    58a4:	af 93       	push	r26
    58a6:	bf 93       	push	r27
    58a8:	ef 93       	push	r30
    58aa:	ff 93       	push	r31
		_getc_char, 		//	23	17	ETB	(End of Trans. Block)
    58ac:	e0 91 e6 21 	lds	r30, 0x21E6
    58b0:	f0 91 e7 21 	lds	r31, 0x21E7
    58b4:	20 81       	ld	r18, Z
		_sig_KILL,	 		//	24	18	CAN	(Cancel) ^x
		_getc_char, 		//	25	19	EM	(End of Medium)
		_getc_char, 		//	26	1A	SUB	(Substitute)
    58b6:	23 30       	cpi	r18, 0x03	; 3
    58b8:	31 f4       	brne	.+12     	; 0x58c6 <__vector_25+0x40>
		_sig_KILL, 			//	27	1B	ESC	(Escape)
    58ba:	84 e0       	ldi	r24, 0x04	; 4
    58bc:	80 93 b0 21 	sts	0x21B0, r24
		_getc_char, 		//	28	1C	FS	(File Separator)
    58c0:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <signal_etx>
    58c4:	25 c0       	rjmp	.+74     	; 0x5910 <__vector_25+0x8a>
		_getc_char, 		//	29	1D	GS	(Group Separator)
		_getc_char, 		//	30	1E	RS  (Reqst to Send)(Record Sep.)	
		_getc_char, 		//	31	1F	US	(Unit Separator)
		_getc_char, 		//	32	20	SP	(Space)
		_getc_char, 		//	33	21	!	(exclamation mark)
    58c6:	80 91 b7 21 	lds	r24, 0x21B7
    58ca:	81 50       	subi	r24, 0x01	; 1
    58cc:	80 93 b7 21 	sts	0x21B7, r24
    58d0:	80 91 b7 21 	lds	r24, 0x21B7
    58d4:	88 23       	and	r24, r24
    58d6:	19 f4       	brne	.+6      	; 0x58de <__vector_25+0x58>
		_getc_char, 		//	34	22	,	(double quote)	
    58d8:	88 e1       	ldi	r24, 0x18	; 24
    58da:	80 93 b7 21 	sts	0x21B7, r24
		_getc_char, 		//	35	23	#	(number sign)
		_getc_char, 		//	36	24	$	(dollar sign)
    58de:	90 91 b7 21 	lds	r25, 0x21B7
    58e2:	80 91 b6 21 	lds	r24, 0x21B6
    58e6:	98 17       	cp	r25, r24
    58e8:	39 f0       	breq	.+14     	; 0x58f8 <__vector_25+0x72>
		_getc_char, 		//	37	25	%	(percent)
    58ea:	e0 91 b7 21 	lds	r30, 0x21B7
    58ee:	f0 e0       	ldi	r31, 0x00	; 0
    58f0:	e3 55       	subi	r30, 0x53	; 83
    58f2:	fe 4d       	sbci	r31, 0xDE	; 222
    58f4:	26 87       	std	Z+14, r18	; 0x0e
    58f6:	0c c0       	rjmp	.+24     	; 0x5910 <__vector_25+0x8a>
		_getc_char, 		//	38	26	&	(ampersand)
		_getc_char, 		//	39	27	'	(single quote)
		_getc_char, 		//	40	28	(	(left/open parenthesis)
		_getc_char, 		//	41	29	)	(right/closing parenth.)
    58f8:	80 91 b7 21 	lds	r24, 0x21B7
    58fc:	8f 5f       	subi	r24, 0xFF	; 255
    58fe:	80 93 b7 21 	sts	0x21B7, r24
    5902:	80 91 b7 21 	lds	r24, 0x21B7
    5906:	89 31       	cpi	r24, 0x19	; 25
    5908:	18 f0       	brcs	.+6      	; 0x5910 <__vector_25+0x8a>
		_getc_char, 		//	42	2A	*	(asterisk)
    590a:	81 e0       	ldi	r24, 0x01	; 1
    590c:	80 93 b7 21 	sts	0x21B7, r24
		_getc_char, 		//	43	2B	+	(plus)
		_getc_char, 		//	44	2C		(comma)
		_getc_char,	 		//	45	2D	-	(minus or dash)
    5910:	ff 91       	pop	r31
    5912:	ef 91       	pop	r30
    5914:	bf 91       	pop	r27
    5916:	af 91       	pop	r26
    5918:	9f 91       	pop	r25
    591a:	8f 91       	pop	r24
    591c:	7f 91       	pop	r23
    591e:	6f 91       	pop	r22
    5920:	5f 91       	pop	r21
    5922:	4f 91       	pop	r20
    5924:	3f 91       	pop	r19
    5926:	2f 91       	pop	r18
    5928:	0f 90       	pop	r0
    592a:	0b be       	out	0x3b, r0	; 59
    592c:	0f 90       	pop	r0
    592e:	0f be       	out	0x3f, r0	; 63
    5930:	0f 90       	pop	r0
    5932:	1f 90       	pop	r1
    5934:	18 95       	reti

00005936 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    5936:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5938:	e0 ec       	ldi	r30, 0xC0	; 192
    593a:	f1 e0       	ldi	r31, 0x01	; 1
    593c:	80 91 cf 01 	lds	r24, 0x01CF
    5940:	87 fd       	sbrc	r24, 7
    5942:	fa cf       	rjmp	.-12     	; 0x5938 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    5944:	26 2f       	mov	r18, r22
    5946:	30 e0       	ldi	r19, 0x00	; 0
    5948:	2f 71       	andi	r18, 0x1F	; 31
    594a:	30 70       	andi	r19, 0x00	; 0
    594c:	89 2f       	mov	r24, r25
    594e:	90 e0       	ldi	r25, 0x00	; 0
    5950:	45 e0       	ldi	r20, 0x05	; 5
    5952:	88 0f       	add	r24, r24
    5954:	99 1f       	adc	r25, r25
    5956:	4a 95       	dec	r20
    5958:	e1 f7       	brne	.-8      	; 0x5952 <EEPROM_ReadByte+0x1c>
    595a:	28 2b       	or	r18, r24
    595c:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    595e:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5962:	83 2f       	mov	r24, r19
    5964:	8f 71       	andi	r24, 0x1F	; 31
    5966:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5968:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    596a:	86 e0       	ldi	r24, 0x06	; 6
    596c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    596e:	ef 93       	push	r30
    5970:	ff 93       	push	r31
    5972:	0f 93       	push	r16
    5974:	2f 93       	push	r18
    5976:	eb ec       	ldi	r30, 0xCB	; 203
    5978:	f1 e0       	ldi	r31, 0x01	; 1
    597a:	08 ed       	ldi	r16, 0xD8	; 216
    597c:	21 e0       	ldi	r18, 0x01	; 1
    597e:	04 bf       	out	0x34, r16	; 52
    5980:	20 83       	st	Z, r18
    5982:	2f 91       	pop	r18
    5984:	0f 91       	pop	r16
    5986:	ff 91       	pop	r31
    5988:	ef 91       	pop	r30

	return NVM.DATA0;
    598a:	80 91 c4 01 	lds	r24, 0x01C4
}
    598e:	08 95       	ret

00005990 <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    5990:	68 2f       	mov	r22, r24
    5992:	6f 71       	andi	r22, 0x1F	; 31
    5994:	55 e0       	ldi	r21, 0x05	; 5
    5996:	96 95       	lsr	r25
    5998:	87 95       	ror	r24
    599a:	5a 95       	dec	r21
    599c:	e1 f7       	brne	.-8      	; 0x5996 <eeprom_get_char+0x6>
    599e:	0e 94 9b 2c 	call	0x5936	; 0x5936 <EEPROM_ReadByte>
}
    59a2:	08 95       	ret

000059a4 <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    59a4:	8f 92       	push	r8
    59a6:	9f 92       	push	r9
    59a8:	af 92       	push	r10
    59aa:	bf 92       	push	r11
    59ac:	cf 92       	push	r12
    59ae:	df 92       	push	r13
    59b0:	ff 92       	push	r15
    59b2:	0f 93       	push	r16
    59b4:	1f 93       	push	r17
    59b6:	cf 93       	push	r28
    59b8:	df 93       	push	r29
    59ba:	4c 01       	movw	r8, r24
    59bc:	5b 01       	movw	r10, r22
    59be:	6a 01       	movw	r12, r20
    59c0:	8b 01       	movw	r16, r22
    59c2:	ea 01       	movw	r28, r20
    59c4:	ff 24       	eor	r15, r15
    59c6:	18 c0       	rjmp	.+48     	; 0x59f8 <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    59c8:	c8 01       	movw	r24, r16
    59ca:	0e 94 c8 2c 	call	0x5990	; 0x5990 <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    59ce:	ff 20       	and	r15, r15
    59d0:	19 f0       	breq	.+6      	; 0x59d8 <memcpy_from_eeprom_with_checksum+0x34>
    59d2:	21 e0       	ldi	r18, 0x01	; 1
    59d4:	30 e0       	ldi	r19, 0x00	; 0
    59d6:	08 c0       	rjmp	.+16     	; 0x59e8 <memcpy_from_eeprom_with_checksum+0x44>
    59d8:	2f 2d       	mov	r18, r15
    59da:	33 27       	eor	r19, r19
    59dc:	27 fd       	sbrc	r18, 7
    59de:	30 95       	com	r19
    59e0:	22 27       	eor	r18, r18
    59e2:	33 0f       	add	r19, r19
    59e4:	22 1f       	adc	r18, r18
    59e6:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    59e8:	0f 5f       	subi	r16, 0xFF	; 255
    59ea:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    59ec:	f8 2e       	mov	r15, r24
    59ee:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    59f0:	f4 01       	movw	r30, r8
    59f2:	81 93       	st	Z+, r24
    59f4:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    59f6:	21 97       	sbiw	r28, 0x01	; 1
    59f8:	20 97       	sbiw	r28, 0x00	; 0
    59fa:	31 f7       	brne	.-52     	; 0x59c8 <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    59fc:	c6 01       	movw	r24, r12
    59fe:	8a 0d       	add	r24, r10
    5a00:	9b 1d       	adc	r25, r11
    5a02:	0e 94 c8 2c 	call	0x5990	; 0x5990 <eeprom_get_char>
    5a06:	20 e0       	ldi	r18, 0x00	; 0
    5a08:	30 e0       	ldi	r19, 0x00	; 0
    5a0a:	f8 16       	cp	r15, r24
    5a0c:	11 f4       	brne	.+4      	; 0x5a12 <memcpy_from_eeprom_with_checksum+0x6e>
    5a0e:	21 e0       	ldi	r18, 0x01	; 1
    5a10:	30 e0       	ldi	r19, 0x00	; 0
}
    5a12:	c9 01       	movw	r24, r18
    5a14:	df 91       	pop	r29
    5a16:	cf 91       	pop	r28
    5a18:	1f 91       	pop	r17
    5a1a:	0f 91       	pop	r16
    5a1c:	ff 90       	pop	r15
    5a1e:	df 90       	pop	r13
    5a20:	cf 90       	pop	r12
    5a22:	bf 90       	pop	r11
    5a24:	af 90       	pop	r10
    5a26:	9f 90       	pop	r9
    5a28:	8f 90       	pop	r8
    5a2a:	08 95       	ret

00005a2c <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a2c:	80 91 cf 01 	lds	r24, 0x01CF
    5a30:	87 fd       	sbrc	r24, 7
    5a32:	fc cf       	rjmp	.-8      	; 0x5a2c <EEPROM_WaitForNVM>
}
    5a34:	08 95       	ret

00005a36 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a36:	80 91 cf 01 	lds	r24, 0x01CF
    5a3a:	87 fd       	sbrc	r24, 7
    5a3c:	fc cf       	rjmp	.-8      	; 0x5a36 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    5a3e:	80 91 cf 01 	lds	r24, 0x01CF
    5a42:	81 ff       	sbrs	r24, 1
    5a44:	12 c0       	rjmp	.+36     	; 0x5a6a <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    5a46:	86 e3       	ldi	r24, 0x36	; 54
    5a48:	e0 ec       	ldi	r30, 0xC0	; 192
    5a4a:	f1 e0       	ldi	r31, 0x01	; 1
    5a4c:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    5a4e:	ef 93       	push	r30
    5a50:	ff 93       	push	r31
    5a52:	0f 93       	push	r16
    5a54:	2f 93       	push	r18
    5a56:	eb ec       	ldi	r30, 0xCB	; 203
    5a58:	f1 e0       	ldi	r31, 0x01	; 1
    5a5a:	08 ed       	ldi	r16, 0xD8	; 216
    5a5c:	21 e0       	ldi	r18, 0x01	; 1
    5a5e:	04 bf       	out	0x34, r16	; 52
    5a60:	20 83       	st	Z, r18
    5a62:	2f 91       	pop	r18
    5a64:	0f 91       	pop	r16
    5a66:	ff 91       	pop	r31
    5a68:	ef 91       	pop	r30
    5a6a:	08 95       	ret

00005a6c <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    5a6c:	df 92       	push	r13
    5a6e:	ef 92       	push	r14
    5a70:	ff 92       	push	r15
    5a72:	0f 93       	push	r16
    5a74:	1f 93       	push	r17
    5a76:	e8 2e       	mov	r14, r24
    5a78:	06 2f       	mov	r16, r22
    5a7a:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    5a7c:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5a80:	e0 ec       	ldi	r30, 0xC0	; 192
    5a82:	f1 e0       	ldi	r31, 0x01	; 1
    5a84:	83 e3       	ldi	r24, 0x33	; 51
    5a86:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    5a88:	10 e0       	ldi	r17, 0x00	; 0
    5a8a:	0f 71       	andi	r16, 0x1F	; 31
    5a8c:	10 70       	andi	r17, 0x00	; 0
    5a8e:	ff 24       	eor	r15, r15
    5a90:	75 e0       	ldi	r23, 0x05	; 5
    5a92:	ee 0c       	add	r14, r14
    5a94:	ff 1c       	adc	r15, r15
    5a96:	7a 95       	dec	r23
    5a98:	e1 f7       	brne	.-8      	; 0x5a92 <EEPROM_WriteByte+0x26>
    5a9a:	0e 29       	or	r16, r14
    5a9c:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    5a9e:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5aa0:	81 2f       	mov	r24, r17
    5aa2:	8f 71       	andi	r24, 0x1F	; 31
    5aa4:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5aa6:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5aa8:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5aaa:	85 e3       	ldi	r24, 0x35	; 53
    5aac:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5aae:	ef 93       	push	r30
    5ab0:	ff 93       	push	r31
    5ab2:	0f 93       	push	r16
    5ab4:	2f 93       	push	r18
    5ab6:	eb ec       	ldi	r30, 0xCB	; 203
    5ab8:	f1 e0       	ldi	r31, 0x01	; 1
    5aba:	08 ed       	ldi	r16, 0xD8	; 216
    5abc:	21 e0       	ldi	r18, 0x01	; 1
    5abe:	04 bf       	out	0x34, r16	; 52
    5ac0:	20 83       	st	Z, r18
    5ac2:	2f 91       	pop	r18
    5ac4:	0f 91       	pop	r16
    5ac6:	ff 91       	pop	r31
    5ac8:	ef 91       	pop	r30
}
    5aca:	1f 91       	pop	r17
    5acc:	0f 91       	pop	r16
    5ace:	ff 90       	pop	r15
    5ad0:	ef 90       	pop	r14
    5ad2:	df 90       	pop	r13
    5ad4:	08 95       	ret

00005ad6 <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    5ad6:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    5ad8:	68 2f       	mov	r22, r24
    5ada:	6f 71       	andi	r22, 0x1F	; 31
    5adc:	e5 e0       	ldi	r30, 0x05	; 5
    5ade:	96 95       	lsr	r25
    5ae0:	87 95       	ror	r24
    5ae2:	ea 95       	dec	r30
    5ae4:	e1 f7       	brne	.-8      	; 0x5ade <eeprom_put_char+0x8>
    5ae6:	0e 94 36 2d 	call	0x5a6c	; 0x5a6c <EEPROM_WriteByte>
}
    5aea:	08 95       	ret

00005aec <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    5aec:	8f 92       	push	r8
    5aee:	9f 92       	push	r9
    5af0:	af 92       	push	r10
    5af2:	bf 92       	push	r11
    5af4:	cf 92       	push	r12
    5af6:	df 92       	push	r13
    5af8:	ef 92       	push	r14
    5afa:	ff 92       	push	r15
    5afc:	0f 93       	push	r16
    5afe:	df 93       	push	r29
    5b00:	cf 93       	push	r28
    5b02:	0f 92       	push	r0
    5b04:	0f 92       	push	r0
    5b06:	cd b7       	in	r28, 0x3d	; 61
    5b08:	de b7       	in	r29, 0x3e	; 62
    5b0a:	5c 01       	movw	r10, r24
    5b0c:	6b 01       	movw	r12, r22
    5b0e:	7a 01       	movw	r14, r20
    5b10:	4a 01       	movw	r8, r20
    5b12:	00 e0       	ldi	r16, 0x00	; 0
    5b14:	1e c0       	rjmp	.+60     	; 0x5b52 <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    5b16:	00 23       	and	r16, r16
    5b18:	19 f0       	breq	.+6      	; 0x5b20 <memcpy_to_eeprom_with_checksum+0x34>
    5b1a:	21 e0       	ldi	r18, 0x01	; 1
    5b1c:	30 e0       	ldi	r19, 0x00	; 0
    5b1e:	08 c0       	rjmp	.+16     	; 0x5b30 <memcpy_to_eeprom_with_checksum+0x44>
    5b20:	20 2f       	mov	r18, r16
    5b22:	33 27       	eor	r19, r19
    5b24:	27 fd       	sbrc	r18, 7
    5b26:	30 95       	com	r19
    5b28:	22 27       	eor	r18, r18
    5b2a:	33 0f       	add	r19, r19
    5b2c:	22 1f       	adc	r18, r18
    5b2e:	33 27       	eor	r19, r19
    checksum += *source;
    5b30:	f6 01       	movw	r30, r12
    5b32:	61 91       	ld	r22, Z+
    5b34:	6f 01       	movw	r12, r30
    5b36:	06 2f       	mov	r16, r22
    5b38:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    5b3a:	9c 01       	movw	r18, r24
    5b3c:	2f 5f       	subi	r18, 0xFF	; 255
    5b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    5b40:	29 83       	std	Y+1, r18	; 0x01
    5b42:	3a 83       	std	Y+2, r19	; 0x02
    5b44:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    5b48:	08 94       	sec
    5b4a:	81 08       	sbc	r8, r1
    5b4c:	91 08       	sbc	r9, r1
    5b4e:	89 81       	ldd	r24, Y+1	; 0x01
    5b50:	9a 81       	ldd	r25, Y+2	; 0x02
    5b52:	81 14       	cp	r8, r1
    5b54:	91 04       	cpc	r9, r1
    5b56:	f9 f6       	brne	.-66     	; 0x5b16 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    5b58:	c7 01       	movw	r24, r14
    5b5a:	8a 0d       	add	r24, r10
    5b5c:	9b 1d       	adc	r25, r11
    5b5e:	60 2f       	mov	r22, r16
    5b60:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <eeprom_put_char>
}
    5b64:	0f 90       	pop	r0
    5b66:	0f 90       	pop	r0
    5b68:	cf 91       	pop	r28
    5b6a:	df 91       	pop	r29
    5b6c:	0f 91       	pop	r16
    5b6e:	ff 90       	pop	r15
    5b70:	ef 90       	pop	r14
    5b72:	df 90       	pop	r13
    5b74:	cf 90       	pop	r12
    5b76:	bf 90       	pop	r11
    5b78:	af 90       	pop	r10
    5b7a:	9f 90       	pop	r9
    5b7c:	8f 90       	pop	r8
    5b7e:	08 95       	ret

00005b80 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    5b80:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5b82:	e0 ec       	ldi	r30, 0xC0	; 192
    5b84:	f1 e0       	ldi	r31, 0x01	; 1
    5b86:	80 91 cf 01 	lds	r24, 0x01CF
    5b8a:	87 fd       	sbrc	r24, 7
    5b8c:	fa cf       	rjmp	.-12     	; 0x5b82 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5b8e:	83 e3       	ldi	r24, 0x33	; 51
    5b90:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    5b92:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    5b96:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5b98:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5b9a:	64 83       	std	Z+4, r22	; 0x04
}
    5b9c:	08 95       	ret

00005b9e <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    5b9e:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5ba0:	e0 ec       	ldi	r30, 0xC0	; 192
    5ba2:	f1 e0       	ldi	r31, 0x01	; 1
    5ba4:	80 91 cf 01 	lds	r24, 0x01CF
    5ba8:	87 fd       	sbrc	r24, 7
    5baa:	fa cf       	rjmp	.-12     	; 0x5ba0 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5bac:	83 e3       	ldi	r24, 0x33	; 51
    5bae:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    5bb0:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5bb2:	12 82       	std	Z+2, r1	; 0x02
    5bb4:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    5bb6:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    5bba:	8d 91       	ld	r24, X+
    5bbc:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    5bbe:	9f 5f       	subi	r25, 0xFF	; 255
    5bc0:	90 32       	cpi	r25, 0x20	; 32
    5bc2:	c9 f7       	brne	.-14     	; 0x5bb6 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    5bc4:	08 95       	ret

00005bc6 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    5bc6:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5bc8:	e0 ec       	ldi	r30, 0xC0	; 192
    5bca:	f1 e0       	ldi	r31, 0x01	; 1
    5bcc:	80 91 cf 01 	lds	r24, 0x01CF
    5bd0:	87 fd       	sbrc	r24, 7
    5bd2:	fa cf       	rjmp	.-12     	; 0x5bc8 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5bd4:	89 2f       	mov	r24, r25
    5bd6:	90 e0       	ldi	r25, 0x00	; 0
    5bd8:	a5 e0       	ldi	r26, 0x05	; 5
    5bda:	88 0f       	add	r24, r24
    5bdc:	99 1f       	adc	r25, r25
    5bde:	aa 95       	dec	r26
    5be0:	e1 f7       	brne	.-8      	; 0x5bda <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5be2:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5be6:	89 2f       	mov	r24, r25
    5be8:	8f 71       	andi	r24, 0x1F	; 31
    5bea:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5bec:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5bee:	85 e3       	ldi	r24, 0x35	; 53
    5bf0:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5bf2:	ef 93       	push	r30
    5bf4:	ff 93       	push	r31
    5bf6:	0f 93       	push	r16
    5bf8:	2f 93       	push	r18
    5bfa:	eb ec       	ldi	r30, 0xCB	; 203
    5bfc:	f1 e0       	ldi	r31, 0x01	; 1
    5bfe:	08 ed       	ldi	r16, 0xD8	; 216
    5c00:	21 e0       	ldi	r18, 0x01	; 1
    5c02:	04 bf       	out	0x34, r16	; 52
    5c04:	20 83       	st	Z, r18
    5c06:	2f 91       	pop	r18
    5c08:	0f 91       	pop	r16
    5c0a:	ff 91       	pop	r31
    5c0c:	ef 91       	pop	r30
}
    5c0e:	08 95       	ret

00005c10 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    5c10:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5c12:	e0 ec       	ldi	r30, 0xC0	; 192
    5c14:	f1 e0       	ldi	r31, 0x01	; 1
    5c16:	80 91 cf 01 	lds	r24, 0x01CF
    5c1a:	87 fd       	sbrc	r24, 7
    5c1c:	fa cf       	rjmp	.-12     	; 0x5c12 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5c1e:	89 2f       	mov	r24, r25
    5c20:	90 e0       	ldi	r25, 0x00	; 0
    5c22:	b5 e0       	ldi	r27, 0x05	; 5
    5c24:	88 0f       	add	r24, r24
    5c26:	99 1f       	adc	r25, r25
    5c28:	ba 95       	dec	r27
    5c2a:	e1 f7       	brne	.-8      	; 0x5c24 <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5c2c:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5c30:	89 2f       	mov	r24, r25
    5c32:	8f 71       	andi	r24, 0x1F	; 31
    5c34:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5c36:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    5c38:	82 e3       	ldi	r24, 0x32	; 50
    5c3a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5c3c:	ef 93       	push	r30
    5c3e:	ff 93       	push	r31
    5c40:	0f 93       	push	r16
    5c42:	2f 93       	push	r18
    5c44:	eb ec       	ldi	r30, 0xCB	; 203
    5c46:	f1 e0       	ldi	r31, 0x01	; 1
    5c48:	08 ed       	ldi	r16, 0xD8	; 216
    5c4a:	21 e0       	ldi	r18, 0x01	; 1
    5c4c:	04 bf       	out	0x34, r16	; 52
    5c4e:	20 83       	st	Z, r18
    5c50:	2f 91       	pop	r18
    5c52:	0f 91       	pop	r16
    5c54:	ff 91       	pop	r31
    5c56:	ef 91       	pop	r30
}
    5c58:	08 95       	ret

00005c5a <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    5c5a:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5c5c:	e0 ec       	ldi	r30, 0xC0	; 192
    5c5e:	f1 e0       	ldi	r31, 0x01	; 1
    5c60:	80 91 cf 01 	lds	r24, 0x01CF
    5c64:	87 fd       	sbrc	r24, 7
    5c66:	fa cf       	rjmp	.-12     	; 0x5c5c <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5c68:	89 2f       	mov	r24, r25
    5c6a:	90 e0       	ldi	r25, 0x00	; 0
    5c6c:	25 e0       	ldi	r18, 0x05	; 5
    5c6e:	88 0f       	add	r24, r24
    5c70:	99 1f       	adc	r25, r25
    5c72:	2a 95       	dec	r18
    5c74:	e1 f7       	brne	.-8      	; 0x5c6e <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5c76:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5c7a:	89 2f       	mov	r24, r25
    5c7c:	8f 71       	andi	r24, 0x1F	; 31
    5c7e:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5c80:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    5c82:	84 e3       	ldi	r24, 0x34	; 52
    5c84:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5c86:	ef 93       	push	r30
    5c88:	ff 93       	push	r31
    5c8a:	0f 93       	push	r16
    5c8c:	2f 93       	push	r18
    5c8e:	eb ec       	ldi	r30, 0xCB	; 203
    5c90:	f1 e0       	ldi	r31, 0x01	; 1
    5c92:	08 ed       	ldi	r16, 0xD8	; 216
    5c94:	21 e0       	ldi	r18, 0x01	; 1
    5c96:	04 bf       	out	0x34, r16	; 52
    5c98:	20 83       	st	Z, r18
    5c9a:	2f 91       	pop	r18
    5c9c:	0f 91       	pop	r16
    5c9e:	ff 91       	pop	r31
    5ca0:	ef 91       	pop	r30
}
    5ca2:	08 95       	ret

00005ca4 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5ca4:	80 91 cf 01 	lds	r24, 0x01CF
    5ca8:	87 fd       	sbrc	r24, 7
    5caa:	fc cf       	rjmp	.-8      	; 0x5ca4 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    5cac:	80 e3       	ldi	r24, 0x30	; 48
    5cae:	e0 ec       	ldi	r30, 0xC0	; 192
    5cb0:	f1 e0       	ldi	r31, 0x01	; 1
    5cb2:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5cb4:	ef 93       	push	r30
    5cb6:	ff 93       	push	r31
    5cb8:	0f 93       	push	r16
    5cba:	2f 93       	push	r18
    5cbc:	eb ec       	ldi	r30, 0xCB	; 203
    5cbe:	f1 e0       	ldi	r31, 0x01	; 1
    5cc0:	08 ed       	ldi	r16, 0xD8	; 216
    5cc2:	21 e0       	ldi	r18, 0x01	; 1
    5cc4:	04 bf       	out	0x34, r16	; 52
    5cc6:	20 83       	st	Z, r18
    5cc8:	2f 91       	pop	r18
    5cca:	0f 91       	pop	r16
    5ccc:	ff 91       	pop	r31
    5cce:	ef 91       	pop	r30
}
    5cd0:	08 95       	ret

00005cd2 <xio_pgm_init>:
 *
 *  Control parameters are defaulted and may be set using xio_pgm_control()
 */

void xio_pgm_init(const uint16_t control)
{
    5cd2:	9c 01       	movw	r18, r24
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;	// set flags to defaults & initial state
    5cd4:	85 e0       	ldi	r24, 0x05	; 5
    5cd6:	90 e0       	ldi	r25, 0x00	; 0
    5cd8:	80 93 ea 21 	sts	0x21EA, r24
    5cdc:	90 93 eb 21 	sts	0x21EB, r25
	if (control & XIO_WR) {				// this is actually an error. Ignore for now.
    5ce0:	25 ff       	sbrs	r18, 5
    5ce2:	06 c0       	rjmp	.+12     	; 0x5cf0 <xio_pgm_init+0x1e>
		fpgm.flags |= XIO_FLAG_WR_bm;
    5ce4:	87 e0       	ldi	r24, 0x07	; 7
    5ce6:	90 e0       	ldi	r25, 0x00	; 0
    5ce8:	80 93 ea 21 	sts	0x21EA, r24
    5cec:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOBLOCK) {		// this is also technically a config error.
    5cf0:	27 ff       	sbrs	r18, 7
    5cf2:	09 c0       	rjmp	.+18     	; 0x5d06 <xio_pgm_init+0x34>
		fpgm.flags &= ~XIO_FLAG_BLOCK_bm;
    5cf4:	80 91 ea 21 	lds	r24, 0x21EA
    5cf8:	90 91 eb 21 	lds	r25, 0x21EB
    5cfc:	8b 7f       	andi	r24, 0xFB	; 251
    5cfe:	80 93 ea 21 	sts	0x21EA, r24
    5d02:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_ECHO) {
    5d06:	30 ff       	sbrs	r19, 0
    5d08:	09 c0       	rjmp	.+18     	; 0x5d1c <xio_pgm_init+0x4a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5d0a:	80 91 ea 21 	lds	r24, 0x21EA
    5d0e:	90 91 eb 21 	lds	r25, 0x21EB
    5d12:	80 61       	ori	r24, 0x10	; 16
    5d14:	80 93 ea 21 	sts	0x21EA, r24
    5d18:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOECHO) {
    5d1c:	31 ff       	sbrs	r19, 1
    5d1e:	09 c0       	rjmp	.+18     	; 0x5d32 <xio_pgm_init+0x60>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5d20:	80 91 ea 21 	lds	r24, 0x21EA
    5d24:	90 91 eb 21 	lds	r25, 0x21EB
    5d28:	8f 7e       	andi	r24, 0xEF	; 239
    5d2a:	80 93 ea 21 	sts	0x21EA, r24
    5d2e:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_CRLF) {
    5d32:	32 ff       	sbrs	r19, 2
    5d34:	09 c0       	rjmp	.+18     	; 0x5d48 <xio_pgm_init+0x76>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5d36:	80 91 ea 21 	lds	r24, 0x21EA
    5d3a:	90 91 eb 21 	lds	r25, 0x21EB
    5d3e:	80 62       	ori	r24, 0x20	; 32
    5d40:	80 93 ea 21 	sts	0x21EA, r24
    5d44:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOCRLF) {
    5d48:	33 ff       	sbrs	r19, 3
    5d4a:	09 c0       	rjmp	.+18     	; 0x5d5e <xio_pgm_init+0x8c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5d4c:	80 91 ea 21 	lds	r24, 0x21EA
    5d50:	90 91 eb 21 	lds	r25, 0x21EB
    5d54:	8f 7d       	andi	r24, 0xDF	; 223
    5d56:	80 93 ea 21 	sts	0x21EA, r24
    5d5a:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_LINEMODE) {
    5d5e:	34 ff       	sbrs	r19, 4
    5d60:	09 c0       	rjmp	.+18     	; 0x5d74 <xio_pgm_init+0xa2>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5d62:	80 91 ea 21 	lds	r24, 0x21EA
    5d66:	90 91 eb 21 	lds	r25, 0x21EB
    5d6a:	80 64       	ori	r24, 0x40	; 64
    5d6c:	80 93 ea 21 	sts	0x21EA, r24
    5d70:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOLINEMODE) {
    5d74:	35 ff       	sbrs	r19, 5
    5d76:	09 c0       	rjmp	.+18     	; 0x5d8a <xio_pgm_init+0xb8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5d78:	80 91 ea 21 	lds	r24, 0x21EA
    5d7c:	90 91 eb 21 	lds	r25, 0x21EB
    5d80:	8f 7b       	andi	r24, 0xBF	; 191
    5d82:	80 93 ea 21 	sts	0x21EA, r24
    5d86:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_SEMICOLONS) {
    5d8a:	36 ff       	sbrs	r19, 6
    5d8c:	09 c0       	rjmp	.+18     	; 0x5da0 <xio_pgm_init+0xce>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5d8e:	80 91 ea 21 	lds	r24, 0x21EA
    5d92:	90 91 eb 21 	lds	r25, 0x21EB
    5d96:	80 68       	ori	r24, 0x80	; 128
    5d98:	80 93 ea 21 	sts	0x21EA, r24
    5d9c:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5da0:	37 ff       	sbrs	r19, 7
    5da2:	09 c0       	rjmp	.+18     	; 0x5db6 <xio_pgm_init+0xe4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5da4:	80 91 ea 21 	lds	r24, 0x21EA
    5da8:	90 91 eb 21 	lds	r25, 0x21EB
    5dac:	8f 77       	andi	r24, 0x7F	; 127
    5dae:	80 93 ea 21 	sts	0x21EA, r24
    5db2:	90 93 eb 21 	sts	0x21EB, r25
	}
	fpgm.idx = 0;
    5db6:	10 92 f5 21 	sts	0x21F5, r1
    5dba:	10 92 f6 21 	sts	0x21F6, r1
	fpgm.sig = 0;
    5dbe:	10 92 ed 21 	sts	0x21ED, r1
	dev_pgm.udata = &(fpgm.sig); 	// bind signals register to pgm FILE struct
    5dc2:	8d ee       	ldi	r24, 0xED	; 237
    5dc4:	91 e2       	ldi	r25, 0x21	; 33
    5dc6:	80 93 1a 20 	sts	0x201A, r24
    5dca:	90 93 1b 20 	sts	0x201B, r25
	fpgm.len = sizeof(fpgm.buf);
    5dce:	82 e0       	ldi	r24, 0x02	; 2
    5dd0:	80 93 f0 21 	sts	0x21F0, r24
}
    5dd4:	08 95       	ret

00005dd6 <xio_pgm_open>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

FILE * xio_pgm_open(const prog_char *addr)
{
	fpgm.flags &= XIO_FLAG_RESET_gm;			// reset the signaling bits
    5dd6:	20 91 ea 21 	lds	r18, 0x21EA
    5dda:	30 91 eb 21 	lds	r19, 0x21EB
    5dde:	3f 70       	andi	r19, 0x0F	; 15
    5de0:	20 93 ea 21 	sts	0x21EA, r18
    5de4:	30 93 eb 21 	sts	0x21EB, r19
	fpgm.pgmbase_P = (PROGMEM char *)addr;		// might want to range check this
    5de8:	80 93 f3 21 	sts	0x21F3, r24
    5dec:	90 93 f4 21 	sts	0x21F4, r25
	fpgm.idx = 0;
    5df0:	10 92 f5 21 	sts	0x21F5, r1
    5df4:	10 92 f6 21 	sts	0x21F6, r1
	return(&dev_pgm);
}
    5df8:	8e e0       	ldi	r24, 0x0E	; 14
    5dfa:	90 e2       	ldi	r25, 0x20	; 32
    5dfc:	08 95       	ret

00005dfe <xio_pgm_control>:
 *	XIO_SEMICOLONS <null>		Treat semicolons as line breaks
 *	XIO_NOSEMICOLONS <null>	Y	Don't treat semicolons as line breaks
 */

int8_t xio_pgm_control(const uint16_t control, const int16_t arg)
{
    5dfe:	9c 01       	movw	r18, r24
	// transfer control flags to internal flag bits
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;		// set flags to defaults & initial state
    5e00:	85 e0       	ldi	r24, 0x05	; 5
    5e02:	90 e0       	ldi	r25, 0x00	; 0
    5e04:	80 93 ea 21 	sts	0x21EA, r24
    5e08:	90 93 eb 21 	sts	0x21EB, r25
	if (control & XIO_ECHO) {
    5e0c:	30 ff       	sbrs	r19, 0
    5e0e:	06 c0       	rjmp	.+12     	; 0x5e1c <xio_pgm_control+0x1e>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5e10:	85 e1       	ldi	r24, 0x15	; 21
    5e12:	90 e0       	ldi	r25, 0x00	; 0
    5e14:	80 93 ea 21 	sts	0x21EA, r24
    5e18:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOECHO) {
    5e1c:	31 ff       	sbrs	r19, 1
    5e1e:	09 c0       	rjmp	.+18     	; 0x5e32 <xio_pgm_control+0x34>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5e20:	80 91 ea 21 	lds	r24, 0x21EA
    5e24:	90 91 eb 21 	lds	r25, 0x21EB
    5e28:	8f 7e       	andi	r24, 0xEF	; 239
    5e2a:	80 93 ea 21 	sts	0x21EA, r24
    5e2e:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_CRLF) {
    5e32:	32 ff       	sbrs	r19, 2
    5e34:	09 c0       	rjmp	.+18     	; 0x5e48 <xio_pgm_control+0x4a>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5e36:	80 91 ea 21 	lds	r24, 0x21EA
    5e3a:	90 91 eb 21 	lds	r25, 0x21EB
    5e3e:	80 62       	ori	r24, 0x20	; 32
    5e40:	80 93 ea 21 	sts	0x21EA, r24
    5e44:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOCRLF) {
    5e48:	33 ff       	sbrs	r19, 3
    5e4a:	09 c0       	rjmp	.+18     	; 0x5e5e <xio_pgm_control+0x60>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5e4c:	80 91 ea 21 	lds	r24, 0x21EA
    5e50:	90 91 eb 21 	lds	r25, 0x21EB
    5e54:	8f 7d       	andi	r24, 0xDF	; 223
    5e56:	80 93 ea 21 	sts	0x21EA, r24
    5e5a:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_LINEMODE) {
    5e5e:	34 ff       	sbrs	r19, 4
    5e60:	09 c0       	rjmp	.+18     	; 0x5e74 <xio_pgm_control+0x76>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5e62:	80 91 ea 21 	lds	r24, 0x21EA
    5e66:	90 91 eb 21 	lds	r25, 0x21EB
    5e6a:	80 64       	ori	r24, 0x40	; 64
    5e6c:	80 93 ea 21 	sts	0x21EA, r24
    5e70:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOLINEMODE) {
    5e74:	35 ff       	sbrs	r19, 5
    5e76:	09 c0       	rjmp	.+18     	; 0x5e8a <xio_pgm_control+0x8c>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5e78:	80 91 ea 21 	lds	r24, 0x21EA
    5e7c:	90 91 eb 21 	lds	r25, 0x21EB
    5e80:	8f 7b       	andi	r24, 0xBF	; 191
    5e82:	80 93 ea 21 	sts	0x21EA, r24
    5e86:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_SEMICOLONS) {
    5e8a:	36 ff       	sbrs	r19, 6
    5e8c:	09 c0       	rjmp	.+18     	; 0x5ea0 <xio_pgm_control+0xa2>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5e8e:	80 91 ea 21 	lds	r24, 0x21EA
    5e92:	90 91 eb 21 	lds	r25, 0x21EB
    5e96:	80 68       	ori	r24, 0x80	; 128
    5e98:	80 93 ea 21 	sts	0x21EA, r24
    5e9c:	90 93 eb 21 	sts	0x21EB, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5ea0:	37 ff       	sbrs	r19, 7
    5ea2:	09 c0       	rjmp	.+18     	; 0x5eb6 <xio_pgm_control+0xb8>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5ea4:	80 91 ea 21 	lds	r24, 0x21EA
    5ea8:	90 91 eb 21 	lds	r25, 0x21EB
    5eac:	8f 77       	andi	r24, 0x7F	; 127
    5eae:	80 93 ea 21 	sts	0x21EA, r24
    5eb2:	90 93 eb 21 	sts	0x21EB, r25
	}
	return (0);
}
    5eb6:	80 e0       	ldi	r24, 0x00	; 0
    5eb8:	08 95       	ret

00005eba <xio_pgm_putc>:
 */

int xio_pgm_putc(const char c, FILE *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    5eba:	8f ef       	ldi	r24, 0xFF	; 255
    5ebc:	9f ef       	ldi	r25, 0xFF	; 255
    5ebe:	08 95       	ret

00005ec0 <xio_pgm_readln>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_pgm_readln(char *buf, uint8_t len)
{
    5ec0:	9c 01       	movw	r18, r24
	if (!(fpgm.pgmbase_P)) {					// return error if no file is open
    5ec2:	80 91 f3 21 	lds	r24, 0x21F3
    5ec6:	90 91 f4 21 	lds	r25, 0x21F4
    5eca:	89 2b       	or	r24, r25
    5ecc:	19 f4       	brne	.+6      	; 0x5ed4 <xio_pgm_readln+0x14>
    5ece:	22 e1       	ldi	r18, 0x12	; 18
    5ed0:	30 e0       	ldi	r19, 0x00	; 0
    5ed2:	17 c0       	rjmp	.+46     	; 0x5f02 <xio_pgm_readln+0x42>
		return (TG_FILE_NOT_OPEN);
	}
	fpgm.sig = XIO_SIG_OK;						// initialize signal
    5ed4:	10 92 ed 21 	sts	0x21ED, r1
	if (fgets(buf, len, &dev_pgm) == NULL) {
    5ed8:	c9 01       	movw	r24, r18
    5eda:	70 e0       	ldi	r23, 0x00	; 0
    5edc:	4e e0       	ldi	r20, 0x0E	; 14
    5ede:	50 e2       	ldi	r21, 0x20	; 32
    5ee0:	0e 94 d5 48 	call	0x91aa	; 0x91aa <fgets>
    5ee4:	89 2b       	or	r24, r25
    5ee6:	19 f0       	breq	.+6      	; 0x5eee <xio_pgm_readln+0x2e>
    5ee8:	20 e0       	ldi	r18, 0x00	; 0
    5eea:	30 e0       	ldi	r19, 0x00	; 0
    5eec:	0a c0       	rjmp	.+20     	; 0x5f02 <xio_pgm_readln+0x42>
		fpgm.pgmbase_P = NULL;
    5eee:	10 92 f3 21 	sts	0x21F3, r1
    5ef2:	10 92 f4 21 	sts	0x21F4, r1
		clearerr(&dev_pgm);
    5ef6:	8e e0       	ldi	r24, 0x0E	; 14
    5ef8:	90 e2       	ldi	r25, 0x20	; 32
    5efa:	0e 94 d0 48 	call	0x91a0	; 0x91a0 <clearerr>
    5efe:	25 e0       	ldi	r18, 0x05	; 5
    5f00:	30 e0       	ldi	r19, 0x00	; 0
		return (TG_EOF);
	}
	return (TG_OK);
}
    5f02:	c9 01       	movw	r24, r18
    5f04:	08 95       	ret

00005f06 <xio_pgm_getc>:
 *		- Note: putc should expand newlines to <cr><lf>
 */

int xio_pgm_getc(FILE *stream)
{
	if (fpgm.flags & XIO_FLAG_EOF_bm) {
    5f06:	40 91 ea 21 	lds	r20, 0x21EA
    5f0a:	50 91 eb 21 	lds	r21, 0x21EB
    5f0e:	55 ff       	sbrs	r21, 5
    5f10:	06 c0       	rjmp	.+12     	; 0x5f1e <xio_pgm_getc+0x18>
		fpgm.sig = XIO_SIG_EOF;
    5f12:	82 e0       	ldi	r24, 0x02	; 2
    5f14:	80 93 ed 21 	sts	0x21ED, r24
    5f18:	2e ef       	ldi	r18, 0xFE	; 254
    5f1a:	3f ef       	ldi	r19, 0xFF	; 255
    5f1c:	3f c0       	rjmp	.+126    	; 0x5f9c <xio_pgm_getc+0x96>
		return (_FDEV_EOF);
	}
	if ((fpgm.c = pgm_read_byte(&fpgm.pgmbase_P[fpgm.idx])) == NUL) {
    5f1e:	20 91 f5 21 	lds	r18, 0x21F5
    5f22:	30 91 f6 21 	lds	r19, 0x21F6
    5f26:	e0 91 f3 21 	lds	r30, 0x21F3
    5f2a:	f0 91 f4 21 	lds	r31, 0x21F4
    5f2e:	e2 0f       	add	r30, r18
    5f30:	f3 1f       	adc	r31, r19
    5f32:	84 91       	lpm	r24, Z+
    5f34:	80 93 ee 21 	sts	0x21EE, r24
    5f38:	88 23       	and	r24, r24
    5f3a:	29 f4       	brne	.+10     	; 0x5f46 <xio_pgm_getc+0x40>
		fpgm.flags |= XIO_FLAG_EOF_bm;
    5f3c:	50 62       	ori	r21, 0x20	; 32
    5f3e:	40 93 ea 21 	sts	0x21EA, r20
    5f42:	50 93 eb 21 	sts	0x21EB, r21
	}
	++fpgm.idx;
    5f46:	2f 5f       	subi	r18, 0xFF	; 255
    5f48:	3f 4f       	sbci	r19, 0xFF	; 255
    5f4a:	20 93 f5 21 	sts	0x21F5, r18
    5f4e:	30 93 f6 21 	sts	0x21F6, r19
	if (!LINEMODE(fpgm.flags)) {		// processing is simple if not LINEMODE
    5f52:	90 91 ea 21 	lds	r25, 0x21EA
    5f56:	96 fd       	sbrc	r25, 6
    5f58:	07 c0       	rjmp	.+14     	; 0x5f68 <xio_pgm_getc+0x62>
		if (ECHO(fpgm.flags)) {
    5f5a:	94 ff       	sbrs	r25, 4
    5f5c:	1b c0       	rjmp	.+54     	; 0x5f94 <xio_pgm_getc+0x8e>
			putchar(fpgm.c);
    5f5e:	60 91 40 25 	lds	r22, 0x2540
    5f62:	70 91 41 25 	lds	r23, 0x2541
    5f66:	13 c0       	rjmp	.+38     	; 0x5f8e <xio_pgm_getc+0x88>
		}
		return (fpgm.c);
	}
	// now do the LINEMODE stuff
	if (fpgm.c == NUL) {				// perform newline substitutions
    5f68:	88 23       	and	r24, r24
    5f6a:	31 f0       	breq	.+12     	; 0x5f78 <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if (fpgm.c == '\r') {
    5f6c:	8d 30       	cpi	r24, 0x0D	; 13
    5f6e:	21 f0       	breq	.+8      	; 0x5f78 <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if ((SEMICOLONS(fpgm.flags)) && (fpgm.c == ';')) {
    5f70:	97 ff       	sbrs	r25, 7
    5f72:	05 c0       	rjmp	.+10     	; 0x5f7e <xio_pgm_getc+0x78>
    5f74:	8b 33       	cpi	r24, 0x3B	; 59
    5f76:	19 f4       	brne	.+6      	; 0x5f7e <xio_pgm_getc+0x78>
		fpgm.c = '\n';
    5f78:	8a e0       	ldi	r24, 0x0A	; 10
    5f7a:	80 93 ee 21 	sts	0x21EE, r24
	}
	if (ECHO(fpgm.flags)) {
    5f7e:	94 ff       	sbrs	r25, 4
    5f80:	09 c0       	rjmp	.+18     	; 0x5f94 <xio_pgm_getc+0x8e>
		putchar(fpgm.c);
    5f82:	60 91 40 25 	lds	r22, 0x2540
    5f86:	70 91 41 25 	lds	r23, 0x2541
    5f8a:	80 91 ee 21 	lds	r24, 0x21EE
    5f8e:	90 e0       	ldi	r25, 0x00	; 0
    5f90:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
	}
	return (fpgm.c);
    5f94:	80 91 ee 21 	lds	r24, 0x21EE
    5f98:	28 2f       	mov	r18, r24
    5f9a:	30 e0       	ldi	r19, 0x00	; 0
}
    5f9c:	c9 01       	movw	r24, r18
    5f9e:	08 95       	ret

00005fa0 <tg_reset_source>:
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    5fa0:	80 91 fb 21 	lds	r24, 0x21FB
    5fa4:	80 93 fa 21 	sts	0x21FA, r24
 */

void tg_reset_source()
{
	_tg_set_source(tg.default_src);
}
    5fa8:	08 95       	ret

00005faa <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    5faa:	fc 01       	movw	r30, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    5fac:	80 91 f9 21 	lds	r24, 0x21F9
    5fb0:	88 23       	and	r24, r24
    5fb2:	79 f5       	brne	.+94     	; 0x6012 <__stack+0x13>
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
    5fb4:	90 81       	ld	r25, Z
    5fb6:	89 2f       	mov	r24, r25
    5fb8:	81 56       	subi	r24, 0x61	; 97
    5fba:	8a 31       	cpi	r24, 0x1A	; 26
    5fbc:	10 f4       	brcc	.+4      	; 0x5fc2 <tg_parser+0x18>
			buf[0] = buf[0]-'a'+'A';
    5fbe:	90 52       	subi	r25, 0x20	; 32
    5fc0:	90 83       	st	Z, r25
		}
		switch (buf[0]) {
    5fc2:	80 81       	ld	r24, Z
    5fc4:	86 34       	cpi	r24, 0x46	; 70
    5fc6:	b1 f0       	breq	.+44     	; 0x5ff4 <tg_parser+0x4a>
    5fc8:	87 34       	cpi	r24, 0x47	; 71
    5fca:	38 f4       	brcc	.+14     	; 0x5fda <tg_parser+0x30>
    5fcc:	83 34       	cpi	r24, 0x43	; 67
    5fce:	61 f0       	breq	.+24     	; 0x5fe8 <tg_parser+0x3e>
    5fd0:	84 34       	cpi	r24, 0x44	; 68
    5fd2:	71 f0       	breq	.+28     	; 0x5ff0 <tg_parser+0x46>
    5fd4:	8f 33       	cpi	r24, 0x3F	; 63
    5fd6:	d9 f4       	brne	.+54     	; 0x600e <__stack+0xf>
    5fd8:	07 c0       	rjmp	.+14     	; 0x5fe8 <tg_parser+0x3e>
    5fda:	87 34       	cpi	r24, 0x47	; 71
    5fdc:	19 f0       	breq	.+6      	; 0x5fe4 <tg_parser+0x3a>
    5fde:	8d 54       	subi	r24, 0x4D	; 77
    5fe0:	82 30       	cpi	r24, 0x02	; 2
    5fe2:	a8 f4       	brcc	.+42     	; 0x600e <__stack+0xf>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5fe4:	82 e0       	ldi	r24, 0x02	; 2
    5fe6:	01 c0       	rjmp	.+2      	; 0x5fea <tg_parser+0x40>
	if (tg.mode == TG_CONTROL_MODE) {
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
			buf[0] = buf[0]-'a'+'A';
		}
		switch (buf[0]) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    5fe8:	81 e0       	ldi	r24, 0x01	; 1
    5fea:	80 93 f9 21 	sts	0x21F9, r24
    5fee:	11 c0       	rjmp	.+34     	; 0x6012 <__stack+0x13>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5ff0:	83 e0       	ldi	r24, 0x03	; 3
    5ff2:	fb cf       	rjmp	.-10     	; 0x5fea <tg_parser+0x40>
//	xio_pgm_open(PGMFILE(&spiral_test50a));
//	xio_pgm_open(PGMFILE(&spiral_test5));
//	xio_pgm_open(PGMFILE(&dwell_test2));

//	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
	xio_pgm_open(PGMFILE(&zoetrope));			// crazy noisy zoetrope file
    5ff4:	83 ee       	ldi	r24, 0xE3	; 227
    5ff6:	9d e0       	ldi	r25, 0x0D	; 13
    5ff8:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <xio_pgm_open>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5ffc:	82 e0       	ldi	r24, 0x02	; 2
    5ffe:	80 93 f9 21 	sts	0x21F9, r24
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    6002:	84 e0       	ldi	r24, 0x04	; 4
    6004:	80 93 fa 21 	sts	0x21FA, r24
    6008:	20 e0       	ldi	r18, 0x00	; 0
    600a:	30 e0       	ldi	r19, 0x00	; 0
    600c:	1d c0       	rjmp	.+58     	; 0x6048 <__stack+0x49>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    600e:	10 92 f9 21 	sts	0x21F9, r1
			case 'F': return (_tg_test_file());
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    6012:	10 92 f8 21 	sts	0x21F8, r1
	switch (tg.mode) {
    6016:	80 91 f9 21 	lds	r24, 0x21F9
    601a:	82 30       	cpi	r24, 0x02	; 2
    601c:	41 f0       	breq	.+16     	; 0x602e <__stack+0x2f>
    601e:	83 30       	cpi	r24, 0x03	; 3
    6020:	51 f0       	breq	.+20     	; 0x6036 <__stack+0x37>
    6022:	81 30       	cpi	r24, 0x01	; 1
    6024:	69 f4       	brne	.+26     	; 0x6040 <__stack+0x41>
		case TG_CONFIG_MODE: tg.status = cfg_parse(buf); break;
    6026:	cf 01       	movw	r24, r30
    6028:	0e 94 7e 19 	call	0x32fc	; 0x32fc <cfg_parse>
    602c:	07 c0       	rjmp	.+14     	; 0x603c <__stack+0x3d>
		case TG_GCODE_MODE: tg.status = gc_gcode_parser(buf); break;
    602e:	cf 01       	movw	r24, r30
    6030:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <gc_gcode_parser>
    6034:	03 c0       	rjmp	.+6      	; 0x603c <__stack+0x3d>
		case TG_DIRECT_DRIVE_MODE: tg.status = dd_parser(buf); break;
    6036:	cf 01       	movw	r24, r30
    6038:	0e 94 de 30 	call	0x61bc	; 0x61bc <dd_parser>
    603c:	80 93 f8 21 	sts	0x21F8, r24
	}
	return (tg.status);
    6040:	80 91 f8 21 	lds	r24, 0x21F8
    6044:	28 2f       	mov	r18, r24
    6046:	30 e0       	ldi	r19, 0x00	; 0
}
    6048:	c9 01       	movw	r24, r18
    604a:	08 95       	ret

0000604c <tg_controller>:
 */

void tg_controller()
{
	// top priority tasks
	st_execute_move();
    604c:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <st_execute_move>

	// medium priority tasks
	if ((tg.status = mc_line_continue()) == TG_EAGAIN) {	// line generator
    6050:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <mc_line_continue>
    6054:	80 93 f8 21 	sts	0x21F8, r24
    6058:	81 30       	cpi	r24, 0x01	; 1
    605a:	09 f4       	brne	.+2      	; 0x605e <tg_controller+0x12>
    605c:	84 c0       	rjmp	.+264    	; 0x6166 <tg_controller+0x11a>
		return;
	}
	if ((tg.status = mc_arc_continue()) == TG_EAGAIN) {	 	// arc generator 
    605e:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <mc_arc_continue>
    6062:	80 93 f8 21 	sts	0x21F8, r24
    6066:	81 30       	cpi	r24, 0x01	; 1
    6068:	09 f4       	brne	.+2      	; 0x606c <tg_controller+0x20>
    606a:	7d c0       	rjmp	.+250    	; 0x6166 <tg_controller+0x11a>
 */

static int _tg_read_next_line()
{
	// read input line or return if not a completed line
	if ((tg.status = xio_fget_ln(tg.src, tg.dev[tg.src].buf, tg.dev[tg.src].len)) == TG_OK) {
    606c:	80 91 fa 21 	lds	r24, 0x21FA
    6070:	48 2f       	mov	r20, r24
    6072:	50 e0       	ldi	r21, 0x00	; 0
    6074:	22 e5       	ldi	r18, 0x52	; 82
    6076:	30 e0       	ldi	r19, 0x00	; 0
    6078:	42 9f       	mul	r20, r18
    607a:	b0 01       	movw	r22, r0
    607c:	43 9f       	mul	r20, r19
    607e:	70 0d       	add	r23, r0
    6080:	52 9f       	mul	r21, r18
    6082:	70 0d       	add	r23, r0
    6084:	11 24       	eor	r1, r1
    6086:	fb 01       	movw	r30, r22
    6088:	e9 50       	subi	r30, 0x09	; 9
    608a:	fe 4d       	sbci	r31, 0xDE	; 222
    608c:	61 50       	subi	r22, 0x01	; 1
    608e:	7e 4d       	sbci	r23, 0xDE	; 222
    6090:	47 81       	ldd	r20, Z+7	; 0x07
    6092:	0e 94 1e 28 	call	0x503c	; 0x503c <xio_fget_ln>
    6096:	80 93 f8 21 	sts	0x21F8, r24
    609a:	88 23       	and	r24, r24
    609c:	61 f4       	brne	.+24     	; 0x60b6 <tg_controller+0x6a>
		tg.status = tg_parser(tg.dev[tg.src].buf);	// dispatch to parser
    609e:	80 91 fa 21 	lds	r24, 0x21FA
    60a2:	22 e5       	ldi	r18, 0x52	; 82
    60a4:	82 9f       	mul	r24, r18
    60a6:	c0 01       	movw	r24, r0
    60a8:	11 24       	eor	r1, r1
    60aa:	81 50       	subi	r24, 0x01	; 1
    60ac:	9e 4d       	sbci	r25, 0xDE	; 222
    60ae:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <tg_parser>
    60b2:	80 93 f8 21 	sts	0x21F8, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    60b6:	80 91 f8 21 	lds	r24, 0x21F8
    60ba:	83 30       	cpi	r24, 0x03	; 3
    60bc:	18 f4       	brcc	.+6      	; 0x60c4 <tg_controller+0x78>
    60be:	81 30       	cpi	r24, 0x01	; 1
    60c0:	f0 f4       	brcc	.+60     	; 0x60fe <tg_controller+0xb2>
    60c2:	1b c0       	rjmp	.+54     	; 0x60fa <tg_controller+0xae>
    60c4:	83 30       	cpi	r24, 0x03	; 3
    60c6:	19 f0       	breq	.+6      	; 0x60ce <tg_controller+0x82>
    60c8:	85 30       	cpi	r24, 0x05	; 5
    60ca:	b9 f4       	brne	.+46     	; 0x60fa <tg_controller+0xae>
    60cc:	03 c0       	rjmp	.+6      	; 0x60d4 <tg_controller+0x88>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    60ce:	10 92 f9 21 	sts	0x21F9, r1
    60d2:	13 c0       	rjmp	.+38     	; 0x60fa <tg_controller+0xae>
			_tg_set_mode(TG_CONTROL_MODE);
			tg.state = TG_READY_UNPROMPTED;
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
    60d4:	0f 92       	push	r0
    60d6:	0f 92       	push	r0
    60d8:	88 eb       	ldi	r24, 0xB8	; 184
    60da:	9b e1       	ldi	r25, 0x1B	; 27
    60dc:	ed b7       	in	r30, 0x3d	; 61
    60de:	fe b7       	in	r31, 0x3e	; 62
    60e0:	81 83       	std	Z+1, r24	; 0x01
    60e2:	92 83       	std	Z+2, r25	; 0x02
    60e4:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    60e8:	80 91 fb 21 	lds	r24, 0x21FB
    60ec:	80 93 fa 21 	sts	0x21FA, r24
			break;
		}
		case TG_EOF: {								// EOF comes from file devs only
			printf_P(PSTR("End of command file\n"));
			tg_reset_source();						// reset to default src
			tg.state = TG_READY_UNPROMPTED;
    60f0:	10 92 f7 21 	sts	0x21F7, r1
    60f4:	0f 90       	pop	r0
    60f6:	0f 90       	pop	r0
    60f8:	02 c0       	rjmp	.+4      	; 0x60fe <tg_controller+0xb2>
			break;
		}
		default: {
			tg.state = TG_READY_UNPROMPTED;			// traps various error returns
    60fa:	10 92 f7 21 	sts	0x21F7, r1
	if ((tg.status = mc_arc_continue()) == TG_EAGAIN) {	 	// arc generator 
		return;
	}

	// low priority tasks
	if ((tg.status = _tg_read_next_line()) == TG_EAGAIN) {	// input line
    60fe:	10 92 f8 21 	sts	0x21F8, r1
	tgModeStringDirect
};

void _tg_prompt()
{
	if (tg.state == TG_READY_UNPROMPTED) {
    6102:	80 91 f7 21 	lds	r24, 0x21F7
    6106:	88 23       	and	r24, r24
    6108:	71 f5       	brne	.+92     	; 0x6166 <tg_controller+0x11a>
		if (tg.dev[tg.src].flags && XIO_FLAG_PROMPTS_bm) {
    610a:	80 91 fa 21 	lds	r24, 0x21FA
    610e:	90 e0       	ldi	r25, 0x00	; 0
    6110:	22 e5       	ldi	r18, 0x52	; 82
    6112:	30 e0       	ldi	r19, 0x00	; 0
    6114:	82 9f       	mul	r24, r18
    6116:	f0 01       	movw	r30, r0
    6118:	83 9f       	mul	r24, r19
    611a:	f0 0d       	add	r31, r0
    611c:	92 9f       	mul	r25, r18
    611e:	f0 0d       	add	r31, r0
    6120:	11 24       	eor	r1, r1
    6122:	e9 50       	subi	r30, 0x09	; 9
    6124:	fe 4d       	sbci	r31, 0xDE	; 222
    6126:	86 81       	ldd	r24, Z+6	; 0x06
    6128:	88 23       	and	r24, r24
    612a:	d1 f0       	breq	.+52     	; 0x6160 <tg_controller+0x114>
			printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    612c:	80 91 f9 21 	lds	r24, 0x21F9
    6130:	e8 2f       	mov	r30, r24
    6132:	f0 e0       	ldi	r31, 0x00	; 0
    6134:	ee 0f       	add	r30, r30
    6136:	ff 1f       	adc	r31, r31
    6138:	e0 55       	subi	r30, 0x50	; 80
    613a:	f4 4e       	sbci	r31, 0xE4	; 228
    613c:	25 91       	lpm	r18, Z+
    613e:	34 91       	lpm	r19, Z+
    6140:	00 d0       	rcall	.+0      	; 0x6142 <tg_controller+0xf6>
    6142:	0f 92       	push	r0
    6144:	8d ec       	ldi	r24, 0xCD	; 205
    6146:	9b e1       	ldi	r25, 0x1B	; 27
    6148:	ed b7       	in	r30, 0x3d	; 61
    614a:	fe b7       	in	r31, 0x3e	; 62
    614c:	81 83       	std	Z+1, r24	; 0x01
    614e:	92 83       	std	Z+2, r25	; 0x02
    6150:	23 83       	std	Z+3, r18	; 0x03
    6152:	34 83       	std	Z+4, r19	; 0x04
    6154:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
    6158:	0f 90       	pop	r0
    615a:	0f 90       	pop	r0
    615c:	0f 90       	pop	r0
    615e:	0f 90       	pop	r0
		}
		tg.state = TG_READY_PROMPTED;
    6160:	81 e0       	ldi	r24, 0x01	; 1
    6162:	80 93 f7 21 	sts	0x21F7, r24
    6166:	08 95       	ret

00006168 <tg_init>:
/*
 * tg_init()
 */

void tg_init() 
{
    6168:	ef e4       	ldi	r30, 0x4F	; 79
    616a:	f2 e2       	ldi	r31, 0x22	; 34
	// initialize devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) { // don't bother with /dev/null
		tg.dev[i].flags = XIO_FLAG_PROMPTS_bm;
    616c:	81 e0       	ldi	r24, 0x01	; 1
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    616e:	90 e5       	ldi	r25, 0x50	; 80

void tg_init() 
{
	// initialize devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) { // don't bother with /dev/null
		tg.dev[i].flags = XIO_FLAG_PROMPTS_bm;
    6170:	80 83       	st	Z, r24
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    6172:	91 83       	std	Z+1, r25	; 0x01
    6174:	ee 5a       	subi	r30, 0xAE	; 174
    6176:	ff 4f       	sbci	r31, 0xFF	; 255
 */

void tg_init() 
{
	// initialize devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) { // don't bother with /dev/null
    6178:	23 e2       	ldi	r18, 0x23	; 35
    617a:	e7 39       	cpi	r30, 0x97	; 151
    617c:	f2 07       	cpc	r31, r18
    617e:	c1 f7       	brne	.-16     	; 0x6170 <tg_init+0x8>
		tg.dev[i].flags = XIO_FLAG_PROMPTS_bm;
		tg.dev[i].len = sizeof(tg.dev[i].buf);
	}
	tg.dev[XIO_DEV_PGM].flags = 0;			// no asterisks on file devices
    6180:	10 92 45 23 	sts	0x2345, r1

	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
    6184:	80 93 fb 21 	sts	0x21FB, r24
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.src = d;									// d = XIO device #. See xio.h
    6188:	80 93 fa 21 	sts	0x21FA, r24
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    618c:	10 92 f9 21 	sts	0x21F9, r1

	// set input source
	tg.default_src = XIO_DEV_USB; 			// hard-wire input to USB (for now)
	_tg_set_source(tg.default_src);			// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode
	tg.state = TG_READY_UNPROMPTED;
    6190:	10 92 f7 21 	sts	0x21F7, r1

	// version string
	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    6194:	00 d0       	rcall	.+0      	; 0x6196 <tg_init+0x2e>
    6196:	0f 92       	push	r0
    6198:	85 ee       	ldi	r24, 0xE5	; 229
    619a:	9b e1       	ldi	r25, 0x1B	; 27
    619c:	ed b7       	in	r30, 0x3d	; 61
    619e:	fe b7       	in	r31, 0x3e	; 62
    61a0:	81 83       	std	Z+1, r24	; 0x01
    61a2:	92 83       	std	Z+2, r25	; 0x02
    61a4:	8b ed       	ldi	r24, 0xDB	; 219
    61a6:	9b e1       	ldi	r25, 0x1B	; 27
    61a8:	83 83       	std	Z+3, r24	; 0x03
    61aa:	94 83       	std	Z+4, r25	; 0x04
    61ac:	0e 94 34 49 	call	0x9268	; 0x9268 <printf_P>
    61b0:	0f 90       	pop	r0
    61b2:	0f 90       	pop	r0
    61b4:	0f 90       	pop	r0
    61b6:	0f 90       	pop	r0
}
    61b8:	08 95       	ret

000061ba <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    61ba:	08 95       	ret

000061bc <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    61bc:	80 e0       	ldi	r24, 0x00	; 0
    61be:	90 e0       	ldi	r25, 0x00	; 0
    61c0:	08 95       	ret

000061c2 <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    61c2:	10 92 97 23 	sts	0x2397, r1
	mv.move_buffer_tail = 0;
    61c6:	10 92 98 23 	sts	0x2398, r1
}
    61ca:	08 95       	ret

000061cc <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    61cc:	90 91 97 23 	lds	r25, 0x2397
    61d0:	80 91 98 23 	lds	r24, 0x2398
    61d4:	98 17       	cp	r25, r24
    61d6:	19 f4       	brne	.+6      	; 0x61de <mv_dequeue_move_buffer+0x12>
    61d8:	20 e0       	ldi	r18, 0x00	; 0
    61da:	30 e0       	ldi	r19, 0x00	; 0
    61dc:	17 c0       	rjmp	.+46     	; 0x620c <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    61de:	90 91 98 23 	lds	r25, 0x2398
    61e2:	8e e1       	ldi	r24, 0x1E	; 30
    61e4:	98 9f       	mul	r25, r24
    61e6:	90 01       	movw	r18, r0
    61e8:	11 24       	eor	r1, r1
    61ea:	25 56       	subi	r18, 0x65	; 101
    61ec:	3c 4d       	sbci	r19, 0xDC	; 220
    61ee:	20 93 99 23 	sts	0x2399, r18
    61f2:	30 93 9a 23 	sts	0x239A, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    61f6:	80 91 98 23 	lds	r24, 0x2398
    61fa:	8f 5f       	subi	r24, 0xFF	; 255
    61fc:	80 93 98 23 	sts	0x2398, r24
    6200:	80 91 98 23 	lds	r24, 0x2398
    6204:	83 30       	cpi	r24, 0x03	; 3
    6206:	10 f0       	brcs	.+4      	; 0x620c <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    6208:	10 92 98 23 	sts	0x2398, r1
	}
	return (mv.p); 
}
    620c:	c9 01       	movw	r24, r18
    620e:	08 95       	ret

00006210 <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    6210:	90 91 97 23 	lds	r25, 0x2397
    6214:	9f 5f       	subi	r25, 0xFF	; 255
    6216:	93 30       	cpi	r25, 0x03	; 3
    6218:	08 f0       	brcs	.+2      	; 0x621c <mv_test_move_buffer_full+0xc>
    621a:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    621c:	80 91 98 23 	lds	r24, 0x2398
    6220:	20 e0       	ldi	r18, 0x00	; 0
    6222:	89 17       	cp	r24, r25
    6224:	09 f4       	brne	.+2      	; 0x6228 <mv_test_move_buffer_full+0x18>
    6226:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    6228:	82 2f       	mov	r24, r18
    622a:	08 95       	ret

0000622c <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    622c:	0b c0       	rjmp	.+22     	; 0x6244 <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    622e:	80 91 48 00 	lds	r24, 0x0048
    6232:	81 60       	ori	r24, 0x01	; 1
    6234:	80 93 48 00 	sts	0x0048, r24
    6238:	88 95       	sleep
    623a:	80 91 48 00 	lds	r24, 0x0048
    623e:	8e 7f       	andi	r24, 0xFE	; 254
    6240:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    6244:	90 91 98 23 	lds	r25, 0x2398
    6248:	80 91 97 23 	lds	r24, 0x2397
    624c:	98 17       	cp	r25, r24
    624e:	79 f7       	brne	.-34     	; 0x622e <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    6250:	08 95       	ret

00006252 <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    6252:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    6254:	80 91 97 23 	lds	r24, 0x2397
    6258:	80 93 98 23 	sts	0x2398, r24
	mv.p = NULL;
    625c:	10 92 99 23 	sts	0x2399, r1
    6260:	10 92 9a 23 	sts	0x239A, r1
	sei();
    6264:	78 94       	sei
}
    6266:	08 95       	ret

00006268 <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    6268:	2f 92       	push	r2
    626a:	3f 92       	push	r3
    626c:	4f 92       	push	r4
    626e:	5f 92       	push	r5
    6270:	6f 92       	push	r6
    6272:	7f 92       	push	r7
    6274:	8f 92       	push	r8
    6276:	9f 92       	push	r9
    6278:	af 92       	push	r10
    627a:	bf 92       	push	r11
    627c:	cf 92       	push	r12
    627e:	df 92       	push	r13
    6280:	ef 92       	push	r14
    6282:	ff 92       	push	r15
    6284:	0f 93       	push	r16
    6286:	1f 93       	push	r17
    6288:	df 93       	push	r29
    628a:	cf 93       	push	r28
    628c:	cd b7       	in	r28, 0x3d	; 61
    628e:	de b7       	in	r29, 0x3e	; 62
    6290:	2b 97       	sbiw	r28, 0x0b	; 11
    6292:	cd bf       	out	0x3d, r28	; 61
    6294:	de bf       	out	0x3e, r29	; 62
    6296:	3b 01       	movw	r6, r22
    6298:	4c 01       	movw	r8, r24
    629a:	19 01       	movw	r2, r18
    629c:	2a 01       	movw	r4, r20
					// Using 64 bits is expensive! The division goes from ~640 
					// cycles at 32 bits to ~3800 cycles using 64 bits
	uint32_t ticks_per_step; // temp variable

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    629e:	20 91 97 23 	lds	r18, 0x2397
    62a2:	2f 5f       	subi	r18, 0xFF	; 255
    62a4:	29 87       	std	Y+9, r18	; 0x09
    62a6:	23 30       	cpi	r18, 0x03	; 3
    62a8:	08 f0       	brcs	.+2      	; 0x62ac <mv_queue_move_buffer+0x44>
    62aa:	19 86       	std	Y+9, r1	; 0x09
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    62ac:	80 91 98 23 	lds	r24, 0x2398
    62b0:	39 85       	ldd	r19, Y+9	; 0x09
    62b2:	83 17       	cp	r24, r19
    62b4:	11 f4       	brne	.+4      	; 0x62ba <mv_queue_move_buffer+0x52>
    62b6:	87 e0       	ldi	r24, 0x07	; 7
    62b8:	92 c1       	rjmp	.+804    	; 0x65de <mv_queue_move_buffer+0x376>
		return (TG_BUFFER_FULL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup the move struct and ticks value
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    62ba:	e0 91 97 23 	lds	r30, 0x2397
    62be:	8e e1       	ldi	r24, 0x1E	; 30
    62c0:	e8 9f       	mul	r30, r24
    62c2:	f0 01       	movw	r30, r0
    62c4:	11 24       	eor	r1, r1
    62c6:	e5 56       	subi	r30, 0x65	; 101
    62c8:	fc 4d       	sbci	r31, 0xDC	; 220
    62ca:	e0 93 99 23 	sts	0x2399, r30
    62ce:	f0 93 9a 23 	sts	0x239A, r31
	memset(mv.p, 0, sizeof(struct mvMove));
    62d2:	df 01       	movw	r26, r30
    62d4:	1d 92       	st	X+, r1
    62d6:	8a 95       	dec	r24
    62d8:	e9 f7       	brne	.-6      	; 0x62d4 <mv_queue_move_buffer+0x6c>
	mv.p->a[X].steps = steps_x;
    62da:	e0 91 99 23 	lds	r30, 0x2399
    62de:	f0 91 9a 23 	lds	r31, 0x239A
    62e2:	ea 87       	std	Y+10, r30	; 0x0a
    62e4:	fb 87       	std	Y+11, r31	; 0x0b
    62e6:	60 82       	st	Z, r6
    62e8:	71 82       	std	Z+1, r7	; 0x01
    62ea:	82 82       	std	Z+2, r8	; 0x02
    62ec:	93 82       	std	Z+3, r9	; 0x03
	mv.p->a[Y].steps = steps_y;
    62ee:	22 86       	std	Z+10, r2	; 0x0a
    62f0:	33 86       	std	Z+11, r3	; 0x0b
    62f2:	44 86       	std	Z+12, r4	; 0x0c
    62f4:	55 86       	std	Z+13, r5	; 0x0d
	mv.p->a[Z].steps = steps_z;
    62f6:	e4 8a       	std	Z+20, r14	; 0x14
    62f8:	f5 8a       	std	Z+21, r15	; 0x15
    62fa:	06 8b       	std	Z+22, r16	; 0x16
    62fc:	17 8b       	std	Z+23, r17	; 0x17
	ticks = microseconds * TICKS_PER_MICROSECOND;
    62fe:	a5 e0       	ldi	r26, 0x05	; 5
    6300:	aa 0c       	add	r10, r10
    6302:	bb 1c       	adc	r11, r11
    6304:	cc 1c       	adc	r12, r12
    6306:	dd 1c       	adc	r13, r13
    6308:	aa 95       	dec	r26
    630a:	d1 f7       	brne	.-12     	; 0x6300 <mv_queue_move_buffer+0x98>
    630c:	a6 01       	movw	r20, r12
    630e:	95 01       	movw	r18, r10
    6310:	60 e0       	ldi	r22, 0x00	; 0
    6312:	70 e0       	ldi	r23, 0x00	; 0
    6314:	80 e0       	ldi	r24, 0x00	; 0
    6316:	90 e0       	ldi	r25, 0x00	; 0
    6318:	a9 82       	std	Y+1, r10	; 0x01
    631a:	3a 83       	std	Y+2, r19	; 0x02
    631c:	4b 83       	std	Y+3, r20	; 0x03
    631e:	5c 83       	std	Y+4, r21	; 0x04
    6320:	6d 83       	std	Y+5, r22	; 0x05
    6322:	7e 83       	std	Y+6, r23	; 0x06
    6324:	8f 83       	std	Y+7, r24	; 0x07
    6326:	98 87       	std	Y+8, r25	; 0x08

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    6328:	61 14       	cp	r6, r1
    632a:	71 04       	cpc	r7, r1
    632c:	81 04       	cpc	r8, r1
    632e:	91 04       	cpc	r9, r1
    6330:	09 f0       	breq	.+2      	; 0x6334 <mv_queue_move_buffer+0xcc>
    6332:	4b c0       	rjmp	.+150    	; 0x63ca <mv_queue_move_buffer+0x162>
    6334:	21 14       	cp	r2, r1
    6336:	31 04       	cpc	r3, r1
    6338:	41 04       	cpc	r4, r1
    633a:	51 04       	cpc	r5, r1
    633c:	09 f0       	breq	.+2      	; 0x6340 <mv_queue_move_buffer+0xd8>
    633e:	45 c0       	rjmp	.+138    	; 0x63ca <mv_queue_move_buffer+0x162>
    6340:	e1 14       	cp	r14, r1
    6342:	f1 04       	cpc	r15, r1
    6344:	01 05       	cpc	r16, r1
    6346:	11 05       	cpc	r17, r1
    6348:	09 f0       	breq	.+2      	; 0x634c <mv_queue_move_buffer+0xe4>
    634a:	3f c0       	rjmp	.+126    	; 0x63ca <mv_queue_move_buffer+0x162>
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
    634c:	81 e0       	ldi	r24, 0x01	; 1
    634e:	90 e0       	ldi	r25, 0x00	; 0
    6350:	a0 e0       	ldi	r26, 0x00	; 0
    6352:	b0 e0       	ldi	r27, 0x00	; 0
    6354:	80 83       	st	Z, r24
    6356:	91 83       	std	Z+1, r25	; 0x01
    6358:	a2 83       	std	Z+2, r26	; 0x02
    635a:	b3 83       	std	Z+3, r27	; 0x03
		mv.p->a[X].postscale = 1;
    635c:	81 e0       	ldi	r24, 0x01	; 1
    635e:	90 e0       	ldi	r25, 0x00	; 0
    6360:	86 83       	std	Z+6, r24	; 0x06
    6362:	97 83       	std	Z+7, r25	; 0x07
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
    6364:	60 e0       	ldi	r22, 0x00	; 0
    6366:	70 e0       	ldi	r23, 0x00	; 0
    6368:	80 e0       	ldi	r24, 0x00	; 0
    636a:	90 e0       	ldi	r25, 0x00	; 0
    636c:	aa 24       	eor	r10, r10
    636e:	a3 94       	inc	r10
    6370:	bb 24       	eor	r11, r11
    6372:	cc 24       	eor	r12, r12
    6374:	dd 24       	eor	r13, r13
    6376:	ee 24       	eor	r14, r14
    6378:	ff 24       	eor	r15, r15
    637a:	00 e0       	ldi	r16, 0x00	; 0
    637c:	10 e0       	ldi	r17, 0x00	; 0
    637e:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__udivdi3>
    6382:	c9 01       	movw	r24, r18
    6384:	da 01       	movw	r26, r20
    6386:	9c 01       	movw	r18, r24
    6388:	ad 01       	movw	r20, r26
    638a:	10 c0       	rjmp	.+32     	; 0x63ac <mv_queue_move_buffer+0x144>
		while (ticks_per_step & 0xFFFF0000) {
			ticks_per_step >>= 1;
    638c:	56 95       	lsr	r21
    638e:	47 95       	ror	r20
    6390:	37 95       	ror	r19
    6392:	27 95       	ror	r18
			mv.p->a[X].postscale <<= 1;
    6394:	aa 85       	ldd	r26, Y+10	; 0x0a
    6396:	bb 85       	ldd	r27, Y+11	; 0x0b
    6398:	16 96       	adiw	r26, 0x06	; 6
    639a:	8d 91       	ld	r24, X+
    639c:	9c 91       	ld	r25, X
    639e:	17 97       	sbiw	r26, 0x07	; 7
    63a0:	88 0f       	add	r24, r24
    63a2:	99 1f       	adc	r25, r25
    63a4:	16 96       	adiw	r26, 0x06	; 6
    63a6:	8d 93       	st	X+, r24
    63a8:	9c 93       	st	X, r25
    63aa:	17 97       	sbiw	r26, 0x07	; 7
	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
		mv.p->a[X].steps = (((ticks & 0xFFFF0000)>>32)+1);	// compute # of steps
		mv.p->a[X].postscale = 1;
		ticks_per_step = (uint32_t)(ticks / mv.p->a[X].steps); // expensive!
		while (ticks_per_step & 0xFFFF0000) {
    63ac:	da 01       	movw	r26, r20
    63ae:	c9 01       	movw	r24, r18
    63b0:	80 70       	andi	r24, 0x00	; 0
    63b2:	90 70       	andi	r25, 0x00	; 0
    63b4:	00 97       	sbiw	r24, 0x00	; 0
    63b6:	a1 05       	cpc	r26, r1
    63b8:	b1 05       	cpc	r27, r1
    63ba:	41 f7       	brne	.-48     	; 0x638c <mv_queue_move_buffer+0x124>
			ticks_per_step >>= 1;
			mv.p->a[X].postscale <<= 1;
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    63bc:	ea 85       	ldd	r30, Y+10	; 0x0a
    63be:	fb 85       	ldd	r31, Y+11	; 0x0b
    63c0:	24 83       	std	Z+4, r18	; 0x04
    63c2:	35 83       	std	Z+5, r19	; 0x05
		mv.p->a[X].flags = DWELL_FLAG_bm;
    63c4:	81 e0       	ldi	r24, 0x01	; 1
    63c6:	81 87       	std	Z+9, r24	; 0x09
    63c8:	04 c1       	rjmp	.+520    	; 0x65d2 <mv_queue_move_buffer+0x36a>
	mv.p->a[Y].steps = steps_y;
	mv.p->a[Z].steps = steps_z;
	ticks = microseconds * TICKS_PER_MICROSECOND;

	// Zero length lines are DWELL commands. Load dwell timing into X axis.
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    63ca:	44 24       	eor	r4, r4
    63cc:	55 24       	eor	r5, r5
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
			if (mv.p->a[i].steps) { 				// skip axes with zero steps
    63ce:	40 91 99 23 	lds	r20, 0x2399
    63d2:	50 91 9a 23 	lds	r21, 0x239A
    63d6:	34 2c       	mov	r3, r4
    63d8:	25 2c       	mov	r2, r5
    63da:	c2 01       	movw	r24, r4
    63dc:	fc 01       	movw	r30, r24
    63de:	73 e0       	ldi	r23, 0x03	; 3
    63e0:	ee 0f       	add	r30, r30
    63e2:	ff 1f       	adc	r31, r31
    63e4:	7a 95       	dec	r23
    63e6:	e1 f7       	brne	.-8      	; 0x63e0 <mv_queue_move_buffer+0x178>
    63e8:	88 0f       	add	r24, r24
    63ea:	99 1f       	adc	r25, r25
    63ec:	e8 0f       	add	r30, r24
    63ee:	f9 1f       	adc	r31, r25
    63f0:	e4 0f       	add	r30, r20
    63f2:	f5 1f       	adc	r31, r21
    63f4:	80 81       	ld	r24, Z
    63f6:	91 81       	ldd	r25, Z+1	; 0x01
    63f8:	a2 81       	ldd	r26, Z+2	; 0x02
    63fa:	b3 81       	ldd	r27, Z+3	; 0x03
    63fc:	00 97       	sbiw	r24, 0x00	; 0
    63fe:	a1 05       	cpc	r26, r1
    6400:	b1 05       	cpc	r27, r1
    6402:	09 f4       	brne	.+2      	; 0x6406 <mv_queue_move_buffer+0x19e>
    6404:	de c0       	rjmp	.+444    	; 0x65c2 <mv_queue_move_buffer+0x35a>

				// set direction: (polarity is corrected during execute move)
				(mv.p->a[i].steps < 0) ? 
    6406:	b7 ff       	sbrs	r27, 7
    6408:	10 c0       	rjmp	.+32     	; 0x642a <mv_queue_move_buffer+0x1c2>
    640a:	c2 01       	movw	r24, r4
    640c:	fc 01       	movw	r30, r24
    640e:	33 e0       	ldi	r19, 0x03	; 3
    6410:	ee 0f       	add	r30, r30
    6412:	ff 1f       	adc	r31, r31
    6414:	3a 95       	dec	r19
    6416:	e1 f7       	brne	.-8      	; 0x6410 <mv_queue_move_buffer+0x1a8>
    6418:	88 0f       	add	r24, r24
    641a:	99 1f       	adc	r25, r25
    641c:	e8 0f       	add	r30, r24
    641e:	f9 1f       	adc	r31, r25
    6420:	e4 0f       	add	r30, r20
    6422:	f5 1f       	adc	r31, r21
    6424:	21 e0       	ldi	r18, 0x01	; 1
    6426:	20 87       	std	Z+8, r18	; 0x08
    6428:	0e c0       	rjmp	.+28     	; 0x6446 <mv_queue_move_buffer+0x1de>
    642a:	c2 01       	movw	r24, r4
    642c:	fc 01       	movw	r30, r24
    642e:	03 e0       	ldi	r16, 0x03	; 3
    6430:	ee 0f       	add	r30, r30
    6432:	ff 1f       	adc	r31, r31
    6434:	0a 95       	dec	r16
    6436:	e1 f7       	brne	.-8      	; 0x6430 <mv_queue_move_buffer+0x1c8>
    6438:	88 0f       	add	r24, r24
    643a:	99 1f       	adc	r25, r25
    643c:	e8 0f       	add	r30, r24
    643e:	f9 1f       	adc	r31, r25
    6440:	e4 0f       	add	r30, r20
    6442:	f5 1f       	adc	r31, r21
    6444:	10 86       	std	Z+8, r1	; 0x08
				(mv.p->a[i].direction = 1): 		// CCW = 1 
				(mv.p->a[i].direction = 0);			// CW = 0

				// set steps to absolute value
				mv.p->a[i].steps = labs(mv.p->a[i].steps);
    6446:	83 2d       	mov	r24, r3
    6448:	92 2d       	mov	r25, r2
    644a:	fc 01       	movw	r30, r24
    644c:	b3 e0       	ldi	r27, 0x03	; 3
    644e:	ee 0f       	add	r30, r30
    6450:	ff 1f       	adc	r31, r31
    6452:	ba 95       	dec	r27
    6454:	e1 f7       	brne	.-8      	; 0x644e <mv_queue_move_buffer+0x1e6>
    6456:	88 0f       	add	r24, r24
    6458:	99 1f       	adc	r25, r25
    645a:	e8 0f       	add	r30, r24
    645c:	f9 1f       	adc	r31, r25
    645e:	e4 0f       	add	r30, r20
    6460:	f5 1f       	adc	r31, r21
    6462:	83 2d       	mov	r24, r3
    6464:	92 2d       	mov	r25, r2
    6466:	9c 01       	movw	r18, r24
    6468:	73 e0       	ldi	r23, 0x03	; 3
    646a:	22 0f       	add	r18, r18
    646c:	33 1f       	adc	r19, r19
    646e:	7a 95       	dec	r23
    6470:	e1 f7       	brne	.-8      	; 0x646a <mv_queue_move_buffer+0x202>
    6472:	88 0f       	add	r24, r24
    6474:	99 1f       	adc	r25, r25
    6476:	28 0f       	add	r18, r24
    6478:	39 1f       	adc	r19, r25
    647a:	42 0f       	add	r20, r18
    647c:	53 1f       	adc	r21, r19
    647e:	da 01       	movw	r26, r20
    6480:	2d 91       	ld	r18, X+
    6482:	3d 91       	ld	r19, X+
    6484:	4d 91       	ld	r20, X+
    6486:	5c 91       	ld	r21, X
    6488:	57 ff       	sbrs	r21, 7
    648a:	07 c0       	rjmp	.+14     	; 0x649a <mv_queue_move_buffer+0x232>
    648c:	50 95       	com	r21
    648e:	40 95       	com	r20
    6490:	30 95       	com	r19
    6492:	21 95       	neg	r18
    6494:	3f 4f       	sbci	r19, 0xFF	; 255
    6496:	4f 4f       	sbci	r20, 0xFF	; 255
    6498:	5f 4f       	sbci	r21, 0xFF	; 255
    649a:	20 83       	st	Z, r18
    649c:	31 83       	std	Z+1, r19	; 0x01
    649e:	42 83       	std	Z+2, r20	; 0x02
    64a0:	53 83       	std	Z+3, r21	; 0x03

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
    64a2:	e0 91 99 23 	lds	r30, 0x2399
    64a6:	f0 91 9a 23 	lds	r31, 0x239A
    64aa:	ea 87       	std	Y+10, r30	; 0x0a
    64ac:	fb 87       	std	Y+11, r31	; 0x0b
    64ae:	83 2d       	mov	r24, r3
    64b0:	92 2d       	mov	r25, r2
    64b2:	fc 01       	movw	r30, r24
    64b4:	03 e0       	ldi	r16, 0x03	; 3
    64b6:	ee 0f       	add	r30, r30
    64b8:	ff 1f       	adc	r31, r31
    64ba:	0a 95       	dec	r16
    64bc:	e1 f7       	brne	.-8      	; 0x64b6 <mv_queue_move_buffer+0x24e>
    64be:	88 0f       	add	r24, r24
    64c0:	99 1f       	adc	r25, r25
    64c2:	e8 0f       	add	r30, r24
    64c4:	f9 1f       	adc	r31, r25
    64c6:	2a 85       	ldd	r18, Y+10	; 0x0a
    64c8:	3b 85       	ldd	r19, Y+11	; 0x0b
    64ca:	e2 0f       	add	r30, r18
    64cc:	f3 1f       	adc	r31, r19
    64ce:	41 e0       	ldi	r20, 0x01	; 1
    64d0:	50 e0       	ldi	r21, 0x00	; 0
    64d2:	46 83       	std	Z+6, r20	; 0x06
    64d4:	57 83       	std	Z+7, r21	; 0x07
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
    64d6:	83 2d       	mov	r24, r3
    64d8:	92 2d       	mov	r25, r2
    64da:	fc 01       	movw	r30, r24
    64dc:	b3 e0       	ldi	r27, 0x03	; 3
    64de:	ee 0f       	add	r30, r30
    64e0:	ff 1f       	adc	r31, r31
    64e2:	ba 95       	dec	r27
    64e4:	e1 f7       	brne	.-8      	; 0x64de <mv_queue_move_buffer+0x276>
    64e6:	88 0f       	add	r24, r24
    64e8:	99 1f       	adc	r25, r25
    64ea:	e8 0f       	add	r30, r24
    64ec:	f9 1f       	adc	r31, r25
    64ee:	e2 0f       	add	r30, r18
    64f0:	f3 1f       	adc	r31, r19
    64f2:	e0 80       	ld	r14, Z
    64f4:	f1 80       	ldd	r15, Z+1	; 0x01
    64f6:	02 81       	ldd	r16, Z+2	; 0x02
    64f8:	13 81       	ldd	r17, Z+3	; 0x03
    64fa:	37 01       	movw	r6, r14
    64fc:	48 01       	movw	r8, r16
    64fe:	99 0c       	add	r9, r9
    6500:	66 08       	sbc	r6, r6
    6502:	76 2c       	mov	r7, r6
    6504:	43 01       	movw	r8, r6
    6506:	29 81       	ldd	r18, Y+1	; 0x01
    6508:	3a 81       	ldd	r19, Y+2	; 0x02
    650a:	4b 81       	ldd	r20, Y+3	; 0x03
    650c:	5c 81       	ldd	r21, Y+4	; 0x04
    650e:	6d 81       	ldd	r22, Y+5	; 0x05
    6510:	7e 81       	ldd	r23, Y+6	; 0x06
    6512:	8f 81       	ldd	r24, Y+7	; 0x07
    6514:	98 85       	ldd	r25, Y+8	; 0x08
    6516:	57 01       	movw	r10, r14
    6518:	68 01       	movw	r12, r16
    651a:	e6 2c       	mov	r14, r6
    651c:	f6 2c       	mov	r15, r6
    651e:	06 2d       	mov	r16, r6
    6520:	16 2d       	mov	r17, r6
    6522:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <__udivdi3>
    6526:	c9 01       	movw	r24, r18
    6528:	da 01       	movw	r26, r20
    652a:	ac 01       	movw	r20, r24
    652c:	bd 01       	movw	r22, r26
    652e:	2c c0       	rjmp	.+88     	; 0x6588 <mv_queue_move_buffer+0x320>
				while (ticks_per_step & 0xFFFF0000) {
					ticks_per_step >>= 1;
    6530:	76 95       	lsr	r23
    6532:	67 95       	ror	r22
    6534:	57 95       	ror	r21
    6536:	47 95       	ror	r20
					mv.p->a[i].postscale <<= 1;
    6538:	83 2d       	mov	r24, r3
    653a:	92 2d       	mov	r25, r2
    653c:	dc 01       	movw	r26, r24
    653e:	33 e0       	ldi	r19, 0x03	; 3
    6540:	aa 0f       	add	r26, r26
    6542:	bb 1f       	adc	r27, r27
    6544:	3a 95       	dec	r19
    6546:	e1 f7       	brne	.-8      	; 0x6540 <mv_queue_move_buffer+0x2d8>
    6548:	88 0f       	add	r24, r24
    654a:	99 1f       	adc	r25, r25
    654c:	a8 0f       	add	r26, r24
    654e:	b9 1f       	adc	r27, r25
    6550:	8a 85       	ldd	r24, Y+10	; 0x0a
    6552:	9b 85       	ldd	r25, Y+11	; 0x0b
    6554:	a8 0f       	add	r26, r24
    6556:	b9 1f       	adc	r27, r25
    6558:	83 2d       	mov	r24, r3
    655a:	92 2d       	mov	r25, r2
    655c:	fc 01       	movw	r30, r24
    655e:	03 e0       	ldi	r16, 0x03	; 3
    6560:	ee 0f       	add	r30, r30
    6562:	ff 1f       	adc	r31, r31
    6564:	0a 95       	dec	r16
    6566:	e1 f7       	brne	.-8      	; 0x6560 <mv_queue_move_buffer+0x2f8>
    6568:	88 0f       	add	r24, r24
    656a:	99 1f       	adc	r25, r25
    656c:	e8 0f       	add	r30, r24
    656e:	f9 1f       	adc	r31, r25
    6570:	2a 85       	ldd	r18, Y+10	; 0x0a
    6572:	3b 85       	ldd	r19, Y+11	; 0x0b
    6574:	e2 0f       	add	r30, r18
    6576:	f3 1f       	adc	r31, r19
    6578:	86 81       	ldd	r24, Z+6	; 0x06
    657a:	97 81       	ldd	r25, Z+7	; 0x07
    657c:	88 0f       	add	r24, r24
    657e:	99 1f       	adc	r25, r25
    6580:	16 96       	adiw	r26, 0x06	; 6
    6582:	8d 93       	st	X+, r24
    6584:	9c 93       	st	X, r25
    6586:	17 97       	sbiw	r26, 0x07	; 7

				// Normalize ticks_per_step by right shifting until the MSword = 0
				// Accumulate LSBs shifted out of ticks_per_step into postscale
				mv.p->a[i].postscale = 1;
				ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
				while (ticks_per_step & 0xFFFF0000) {
    6588:	db 01       	movw	r26, r22
    658a:	ca 01       	movw	r24, r20
    658c:	80 70       	andi	r24, 0x00	; 0
    658e:	90 70       	andi	r25, 0x00	; 0
    6590:	00 97       	sbiw	r24, 0x00	; 0
    6592:	a1 05       	cpc	r26, r1
    6594:	b1 05       	cpc	r27, r1
    6596:	61 f6       	brne	.-104    	; 0x6530 <mv_queue_move_buffer+0x2c8>
					ticks_per_step >>= 1;
					mv.p->a[i].postscale <<= 1;
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    6598:	83 2d       	mov	r24, r3
    659a:	92 2d       	mov	r25, r2
    659c:	9c 01       	movw	r18, r24
    659e:	73 e0       	ldi	r23, 0x03	; 3
    65a0:	22 0f       	add	r18, r18
    65a2:	33 1f       	adc	r19, r19
    65a4:	7a 95       	dec	r23
    65a6:	e1 f7       	brne	.-8      	; 0x65a0 <mv_queue_move_buffer+0x338>
    65a8:	88 0f       	add	r24, r24
    65aa:	99 1f       	adc	r25, r25
    65ac:	28 0f       	add	r18, r24
    65ae:	39 1f       	adc	r19, r25
    65b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    65b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    65b4:	82 0f       	add	r24, r18
    65b6:	93 1f       	adc	r25, r19
    65b8:	dc 01       	movw	r26, r24
    65ba:	14 96       	adiw	r26, 0x04	; 4
    65bc:	4d 93       	st	X+, r20
    65be:	5c 93       	st	X, r21
    65c0:	15 97       	sbiw	r26, 0x05	; 5
    65c2:	08 94       	sec
    65c4:	41 1c       	adc	r4, r1
    65c6:	51 1c       	adc	r5, r1
		}
		mv.p->a[X].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		mv.p->a[X].flags = DWELL_FLAG_bm;

	} else {		// load axis values for line
		for (i = X; i <= Z; i++) {
    65c8:	b3 e0       	ldi	r27, 0x03	; 3
    65ca:	4b 16       	cp	r4, r27
    65cc:	51 04       	cpc	r5, r1
    65ce:	09 f0       	breq	.+2      	; 0x65d2 <mv_queue_move_buffer+0x36a>
    65d0:	fe ce       	rjmp	.-516    	; 0x63ce <mv_queue_move_buffer+0x166>
				}
				mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
			}
		}
	}
	mv.move_buffer_head = next_buffer_head;
    65d2:	e9 85       	ldd	r30, Y+9	; 0x09
    65d4:	e0 93 97 23 	sts	0x2397, r30
	st_execute_move();
    65d8:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <st_execute_move>
    65dc:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    65de:	2b 96       	adiw	r28, 0x0b	; 11
    65e0:	cd bf       	out	0x3d, r28	; 61
    65e2:	de bf       	out	0x3e, r29	; 62
    65e4:	cf 91       	pop	r28
    65e6:	df 91       	pop	r29
    65e8:	1f 91       	pop	r17
    65ea:	0f 91       	pop	r16
    65ec:	ff 90       	pop	r15
    65ee:	ef 90       	pop	r14
    65f0:	df 90       	pop	r13
    65f2:	cf 90       	pop	r12
    65f4:	bf 90       	pop	r11
    65f6:	af 90       	pop	r10
    65f8:	9f 90       	pop	r9
    65fa:	8f 90       	pop	r8
    65fc:	7f 90       	pop	r7
    65fe:	6f 90       	pop	r6
    6600:	5f 90       	pop	r5
    6602:	4f 90       	pop	r4
    6604:	3f 90       	pop	r3
    6606:	2f 90       	pop	r2
    6608:	08 95       	ret

0000660a <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    660a:	a2 e4       	ldi	r26, 0x42	; 66
    660c:	b4 e2       	ldi	r27, 0x24	; 36
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    660e:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    6610:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    6612:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    6614:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    6616:	ed 91       	ld	r30, X+
    6618:	fc 91       	ld	r31, X
    661a:	11 97       	sbiw	r26, 0x01	; 1
    661c:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    661e:	ed 91       	ld	r30, X+
    6620:	fc 91       	ld	r31, X
    6622:	11 97       	sbiw	r26, 0x01	; 1
    6624:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    6626:	ed 91       	ld	r30, X+
    6628:	fc 91       	ld	r31, X
    662a:	11 97       	sbiw	r26, 0x01	; 1
    662c:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    662e:	ed 91       	ld	r30, X+
    6630:	fc 91       	ld	r31, X
    6632:	11 97       	sbiw	r26, 0x01	; 1
    6634:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    6636:	ed 91       	ld	r30, X+
    6638:	fc 91       	ld	r31, X
    663a:	11 97       	sbiw	r26, 0x01	; 1
    663c:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    663e:	ed 91       	ld	r30, X+
    6640:	fc 91       	ld	r31, X
    6642:	11 97       	sbiw	r26, 0x01	; 1
    6644:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    6646:	ed 91       	ld	r30, X+
    6648:	fc 91       	ld	r31, X
    664a:	11 97       	sbiw	r26, 0x01	; 1
    664c:	31 87       	std	Z+9, r19	; 0x09
    664e:	50 96       	adiw	r26, 0x10	; 16
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=X; i<=A; i++) {
    6650:	44 e2       	ldi	r20, 0x24	; 36
    6652:	a2 38       	cpi	r26, 0x82	; 130
    6654:	b4 07       	cpc	r27, r20
    6656:	f9 f6       	brne	.-66     	; 0x6616 <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    6658:	08 95       	ret

0000665a <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    665a:	1f 92       	push	r1
    665c:	0f 92       	push	r0
    665e:	0f b6       	in	r0, 0x3f	; 63
    6660:	0f 92       	push	r0
    6662:	11 24       	eor	r1, r1
    6664:	0f 90       	pop	r0
    6666:	0f be       	out	0x3f, r0	; 63
    6668:	0f 90       	pop	r0
    666a:	1f 90       	pop	r1
    666c:	18 95       	reti

0000666e <__vector_67>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    666e:	1f 92       	push	r1
    6670:	0f 92       	push	r0
    6672:	0f b6       	in	r0, 0x3f	; 63
    6674:	0f 92       	push	r0
    6676:	11 24       	eor	r1, r1
    6678:	0f 90       	pop	r0
    667a:	0f be       	out	0x3f, r0	; 63
    667c:	0f 90       	pop	r0
    667e:	1f 90       	pop	r1
    6680:	18 95       	reti

00006682 <__vector_104>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    6682:	1f 92       	push	r1
    6684:	0f 92       	push	r0
    6686:	0f b6       	in	r0, 0x3f	; 63
    6688:	0f 92       	push	r0
    668a:	11 24       	eor	r1, r1
    668c:	0f 90       	pop	r0
    668e:	0f be       	out	0x3f, r0	; 63
    6690:	0f 90       	pop	r0
    6692:	1f 90       	pop	r1
    6694:	18 95       	reti

00006696 <__vector_105>:
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    6696:	1f 92       	push	r1
    6698:	0f 92       	push	r0
    669a:	0f b6       	in	r0, 0x3f	; 63
    669c:	0f 92       	push	r0
    669e:	11 24       	eor	r1, r1
    66a0:	0f 90       	pop	r0
    66a2:	0f be       	out	0x3f, r0	; 63
    66a4:	0f 90       	pop	r0
    66a6:	1f 90       	pop	r1
    66a8:	18 95       	reti

000066aa <__vector_43>:
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    66aa:	1f 92       	push	r1
    66ac:	0f 92       	push	r0
    66ae:	0f b6       	in	r0, 0x3f	; 63
    66b0:	0f 92       	push	r0
    66b2:	11 24       	eor	r1, r1
    66b4:	0f 90       	pop	r0
    66b6:	0f be       	out	0x3f, r0	; 63
    66b8:	0f 90       	pop	r0
    66ba:	1f 90       	pop	r1
    66bc:	18 95       	reti

000066be <__vector_44>:
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    66be:	1f 92       	push	r1
    66c0:	0f 92       	push	r0
    66c2:	0f b6       	in	r0, 0x3f	; 63
    66c4:	0f 92       	push	r0
    66c6:	11 24       	eor	r1, r1
    66c8:	0f 90       	pop	r0
    66ca:	0f be       	out	0x3f, r0	; 63
    66cc:	0f 90       	pop	r0
    66ce:	1f 90       	pop	r1
    66d0:	18 95       	reti

000066d2 <__vector_64>:
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    66d2:	1f 92       	push	r1
    66d4:	0f 92       	push	r0
    66d6:	0f b6       	in	r0, 0x3f	; 63
    66d8:	0f 92       	push	r0
    66da:	11 24       	eor	r1, r1
    66dc:	0f 90       	pop	r0
    66de:	0f be       	out	0x3f, r0	; 63
    66e0:	0f 90       	pop	r0
    66e2:	1f 90       	pop	r1
    66e4:	18 95       	reti

000066e6 <__vector_65>:
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    66e6:	1f 92       	push	r1
    66e8:	0f 92       	push	r0
    66ea:	0f b6       	in	r0, 0x3f	; 63
    66ec:	0f 92       	push	r0
    66ee:	11 24       	eor	r1, r1
    66f0:	0f 90       	pop	r0
    66f2:	0f be       	out	0x3f, r0	; 63
    66f4:	0f 90       	pop	r0
    66f6:	1f 90       	pop	r1
    66f8:	18 95       	reti

000066fa <xio_rs485_init>:
	if (c == ETX) {								// trap ^c signal
		RS.sig = XIO_SIG_KILL;					// set signal value
		signal_etx();							// call app-specific signal handler
		return;
	}

    66fa:	9c 01       	movw	r18, r24
	// normal path
    66fc:	e8 2f       	mov	r30, r24
    66fe:	ef 70       	andi	r30, 0x0F	; 15
	if ((--RSx.rx_buf_head) == 0) { 			// wrap condition
		RSx.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
	}
    6700:	87 e3       	ldi	r24, 0x37	; 55
    6702:	90 e0       	ldi	r25, 0x00	; 0
    6704:	80 93 f5 23 	sts	0x23F5, r24
    6708:	90 93 f6 23 	sts	0x23F6, r25
		RSx.rx_buf[RSx.rx_buf_head] = c;		// FAKE INPUT DATA
		return;
	}
	// buffer-full handling
	if ((++RSx.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
		RSx.rx_buf_head = 1;
    670c:	26 ff       	sbrs	r18, 6
    670e:	06 c0       	rjmp	.+12     	; 0x671c <xio_rs485_init+0x22>
	}
    6710:	87 e3       	ldi	r24, 0x37	; 55
    6712:	90 e0       	ldi	r25, 0x00	; 0
    6714:	80 93 f5 23 	sts	0x23F5, r24
    6718:	90 93 f6 23 	sts	0x23F6, r25
}

    671c:	27 ff       	sbrs	r18, 7
    671e:	06 c0       	rjmp	.+12     	; 0x672c <xio_rs485_init+0x32>
/*
    6720:	83 e3       	ldi	r24, 0x33	; 51
    6722:	90 e0       	ldi	r25, 0x00	; 0
    6724:	80 93 f5 23 	sts	0x23F5, r24
    6728:	90 93 f6 23 	sts	0x23F6, r25
 * xio_rs485_queue_RX_string() - fake ISR to put a string in the RX buffer
 */
    672c:	30 ff       	sbrs	r19, 0
    672e:	09 c0       	rjmp	.+18     	; 0x6742 <xio_rs485_init+0x48>

    6730:	80 91 f5 23 	lds	r24, 0x23F5
    6734:	90 91 f6 23 	lds	r25, 0x23F6
    6738:	80 61       	ori	r24, 0x10	; 16
    673a:	80 93 f5 23 	sts	0x23F5, r24
    673e:	90 93 f6 23 	sts	0x23F6, r25
void xio_rs485_queue_RX_string(char *buf)
{
    6742:	31 ff       	sbrs	r19, 1
    6744:	09 c0       	rjmp	.+18     	; 0x6758 <xio_rs485_init+0x5e>
	char c;
    6746:	80 91 f5 23 	lds	r24, 0x23F5
    674a:	90 91 f6 23 	lds	r25, 0x23F6
    674e:	8f 7e       	andi	r24, 0xEF	; 239
    6750:	80 93 f5 23 	sts	0x23F5, r24
    6754:	90 93 f6 23 	sts	0x23F6, r25
	uint8_t i=0;

    6758:	32 ff       	sbrs	r19, 2
    675a:	09 c0       	rjmp	.+18     	; 0x676e <xio_rs485_init+0x74>
	while ((c = buf[i++]) != NUL) {
    675c:	80 91 f5 23 	lds	r24, 0x23F5
    6760:	90 91 f6 23 	lds	r25, 0x23F6
    6764:	80 62       	ori	r24, 0x20	; 32
    6766:	80 93 f5 23 	sts	0x23F5, r24
    676a:	90 93 f6 23 	sts	0x23F6, r25
		xio_rs485_queue_RX_char(c);
	}
    676e:	33 ff       	sbrs	r19, 3
    6770:	09 c0       	rjmp	.+18     	; 0x6784 <xio_rs485_init+0x8a>
}
    6772:	80 91 f5 23 	lds	r24, 0x23F5
    6776:	90 91 f6 23 	lds	r25, 0x23F6
    677a:	8f 7d       	andi	r24, 0xDF	; 223
    677c:	80 93 f5 23 	sts	0x23F5, r24
    6780:	90 93 f6 23 	sts	0x23F6, r25

/* 
    6784:	34 ff       	sbrs	r19, 4
    6786:	09 c0       	rjmp	.+18     	; 0x679a <xio_rs485_init+0xa0>
 * USB_TX_ISR - USB transmitter interrupt (TX)
    6788:	80 91 f5 23 	lds	r24, 0x23F5
    678c:	90 91 f6 23 	lds	r25, 0x23F6
    6790:	80 64       	ori	r24, 0x40	; 64
    6792:	80 93 f5 23 	sts	0x23F5, r24
    6796:	90 93 f6 23 	sts	0x23F6, r25
 *
 * The TX interrupt dilemma: TX interrupts occur when the USART DATA register is 
    679a:	35 ff       	sbrs	r19, 5
    679c:	09 c0       	rjmp	.+18     	; 0x67b0 <xio_rs485_init+0xb6>
 * empty (and the ISR must disable interrupts when nothing's left to read, or they 
    679e:	80 91 f5 23 	lds	r24, 0x23F5
    67a2:	90 91 f6 23 	lds	r25, 0x23F6
    67a6:	8f 7b       	andi	r24, 0xBF	; 191
    67a8:	80 93 f5 23 	sts	0x23F5, r24
    67ac:	90 93 f6 23 	sts	0x23F6, r25
 * keep firing). If the TX buffer is completely empty (TXCIF is set) then enabling
 * interrupts does no good. The USART won't interrupt and the TX circular buffer 
    67b0:	36 ff       	sbrs	r19, 6
    67b2:	09 c0       	rjmp	.+18     	; 0x67c6 <xio_rs485_init+0xcc>
 * never empties.
    67b4:	80 91 f5 23 	lds	r24, 0x23F5
    67b8:	90 91 f6 23 	lds	r25, 0x23F6
    67bc:	80 68       	ori	r24, 0x80	; 128
    67be:	80 93 f5 23 	sts	0x23F5, r24
    67c2:	90 93 f6 23 	sts	0x23F6, r25
 *
 * So we define a dequeue function that can be called from either the ISR or be 
    67c6:	37 ff       	sbrs	r19, 7
    67c8:	09 c0       	rjmp	.+18     	; 0x67dc <xio_rs485_init+0xe2>
 * called from the putc() if it detects TXCIfr. Care should be taken to make sure 
    67ca:	80 91 f5 23 	lds	r24, 0x23F5
    67ce:	90 91 f6 23 	lds	r25, 0x23F6
    67d2:	8f 77       	andi	r24, 0x7F	; 127
    67d4:	80 93 f5 23 	sts	0x23F5, r24
    67d8:	90 93 f6 23 	sts	0x23F6, r25
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

    67dc:	10 92 f8 23 	sts	0x23F8, r1
ISR(RS485_TX_ISR_vect)		//ISR(USARTC1_DRE_vect)	// USARTC0 data register empty
    67e0:	88 ef       	ldi	r24, 0xF8	; 248
    67e2:	93 e2       	ldi	r25, 0x23	; 35
    67e4:	80 93 28 20 	sts	0x2028, r24
    67e8:	90 93 29 20 	sts	0x2029, r25
{
	if (RSx.tx_buf_head == RSx.tx_buf_tail) {	// buffer empty - disable ints
		RSx.usart->CTRLA = CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    67ec:	81 e0       	ldi	r24, 0x01	; 1
    67ee:	80 93 ff 23 	sts	0x23FF, r24
//		PMIC_DisableLowLevel(); 				// disable USART TX interrupts
    67f2:	80 93 fe 23 	sts	0x23FE, r24
		return;
    67f6:	80 93 01 24 	sts	0x2401, r24
	}
    67fa:	80 93 00 24 	sts	0x2400, r24
	if (!TX_MUTEX(RS.flags)) {
    67fe:	82 e0       	ldi	r24, 0x02	; 2
    6800:	80 93 fb 23 	sts	0x23FB, r24
		if (--(RSx.tx_buf_tail) == 0) {			// advance tail and wrap if needed
			RSx.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6804:	80 eb       	ldi	r24, 0xB0	; 176
    6806:	98 e0       	ldi	r25, 0x08	; 8
    6808:	80 93 2e 24 	sts	0x242E, r24
    680c:	90 93 2f 24 	sts	0x242F, r25
		}
    6810:	80 e4       	ldi	r24, 0x40	; 64
    6812:	96 e0       	ldi	r25, 0x06	; 6
    6814:	80 93 30 24 	sts	0x2430, r24
    6818:	90 93 31 24 	sts	0x2431, r25
		RSx.usart->DATA = RSx.tx_buf[RSx.tx_buf_tail];	// write char to TX DATA reg
	}
}
    681c:	ee 23       	and	r30, r30
    681e:	09 f4       	brne	.+2      	; 0x6822 <xio_rs485_init+0x128>
    6820:	e5 e0       	ldi	r30, 0x05	; 5

/* 
 * xio_putc_rs485() - blocking and nonblocking char writer for USB device 
    6822:	8e 2f       	mov	r24, r30
    6824:	90 e0       	ldi	r25, 0x00	; 0
    6826:	fc 01       	movw	r30, r24
    6828:	ec 5d       	subi	r30, 0xDC	; 220
    682a:	f8 4f       	sbci	r31, 0xF8	; 248
    682c:	e4 91       	lpm	r30, Z+
    682e:	a0 eb       	ldi	r26, 0xB0	; 176
    6830:	b8 e0       	ldi	r27, 0x08	; 8
    6832:	16 96       	adiw	r26, 0x06	; 6
    6834:	ec 93       	st	X, r30
    6836:	16 97       	sbiw	r26, 0x06	; 6
 *
    6838:	81 5d       	subi	r24, 0xD1	; 209
    683a:	98 4f       	sbci	r25, 0xF8	; 248
    683c:	fc 01       	movw	r30, r24
    683e:	84 91       	lpm	r24, Z+
    6840:	17 96       	adiw	r26, 0x07	; 7
    6842:	8c 93       	st	X, r24
    6844:	17 97       	sbiw	r26, 0x07	; 7
 *	Compatible with stdio system - may be bound to a FILE handle
    6846:	88 e1       	ldi	r24, 0x18	; 24
    6848:	14 96       	adiw	r26, 0x04	; 4
    684a:	8c 93       	st	X, r24
    684c:	14 97       	sbiw	r26, 0x04	; 4
 *
    684e:	81 e2       	ldi	r24, 0x21	; 33
    6850:	13 96       	adiw	r26, 0x03	; 3
    6852:	8c 93       	st	X, r24
 *	Note: Originally I had the routine advancing the buffer head and comparing 
 *		  against the buffer tail to detect buffer full (it would sleep if the 
    6854:	e0 e4       	ldi	r30, 0x40	; 64
    6856:	f6 e0       	ldi	r31, 0x06	; 6
    6858:	80 e4       	ldi	r24, 0x40	; 64
    685a:	82 83       	std	Z+2, r24	; 0x02
 *		  buffer was full). This unfortunately collides with the buffer empty 
    685c:	80 e8       	ldi	r24, 0x80	; 128
    685e:	81 83       	std	Z+1, r24	; 0x01
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
    6860:	85 83       	std	Z+5, r24	; 0x05
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
    6862:	90 e2       	ldi	r25, 0x20	; 32
    6864:	91 83       	std	Z+1, r25	; 0x01
 */
    6866:	80 e1       	ldi	r24, 0x10	; 16
    6868:	81 83       	std	Z+1, r24	; 0x01

    686a:	96 83       	std	Z+6, r25	; 0x06
int xio_putc_rs485(const char c, FILE *stream)
    686c:	86 83       	std	Z+6, r24	; 0x06
{
    686e:	08 95       	ret

00006870 <xio_rs485_control>:
	// dequeue the buffer if DATA register is ready
	if (RSx.usart->STATUS & 0x20) {
		if (RSx.tx_buf_head == RSx.tx_buf_tail) {	// buf may be empty if IRQ got it
			return (0);
		}
		RS.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    6870:	ac 01       	movw	r20, r24
		if (--(RSx.tx_buf_tail) == 0) {			// advance tail and wrap if needed
			RSx.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    6872:	8f 70       	andi	r24, 0x0F	; 15
    6874:	90 70       	andi	r25, 0x00	; 0
    6876:	00 97       	sbiw	r24, 0x00	; 0
    6878:	91 f0       	breq	.+36     	; 0x689e <xio_rs485_control+0x2e>
		}
    687a:	a0 91 2e 24 	lds	r26, 0x242E
    687e:	b0 91 2f 24 	lds	r27, 0x242F
    6882:	9c 01       	movw	r18, r24
    6884:	2c 5d       	subi	r18, 0xDC	; 220
    6886:	38 4f       	sbci	r19, 0xF8	; 248
    6888:	f9 01       	movw	r30, r18
    688a:	24 91       	lpm	r18, Z+
    688c:	16 96       	adiw	r26, 0x06	; 6
    688e:	2c 93       	st	X, r18
    6890:	16 97       	sbiw	r26, 0x06	; 6
		RSx.usart->DATA = RSx.tx_buf[RSx.tx_buf_tail];// write char to TX DATA reg
    6892:	81 5d       	subi	r24, 0xD1	; 209
    6894:	98 4f       	sbci	r25, 0xF8	; 248
    6896:	fc 01       	movw	r30, r24
    6898:	84 91       	lpm	r24, Z+
    689a:	17 96       	adiw	r26, 0x07	; 7
    689c:	8c 93       	st	X, r24
		RS.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
	}
    689e:	46 ff       	sbrs	r20, 6
    68a0:	09 c0       	rjmp	.+18     	; 0x68b4 <xio_rs485_control+0x44>
	// enable interrupts regardless
    68a2:	80 91 f5 23 	lds	r24, 0x23F5
    68a6:	90 91 f6 23 	lds	r25, 0x23F6
    68aa:	84 60       	ori	r24, 0x04	; 4
    68ac:	80 93 f5 23 	sts	0x23F5, r24
    68b0:	90 93 f6 23 	sts	0x23F6, r25
	RSx.usart->CTRLA = CTRLA_RXON_TXON;			// won't work if you just |= it
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    68b4:	47 ff       	sbrs	r20, 7
    68b6:	09 c0       	rjmp	.+18     	; 0x68ca <xio_rs485_control+0x5a>
	sei();										// enable global interrupts
    68b8:	80 91 f5 23 	lds	r24, 0x23F5
    68bc:	90 91 f6 23 	lds	r25, 0x23F6
    68c0:	8b 7f       	andi	r24, 0xFB	; 251
    68c2:	80 93 f5 23 	sts	0x23F5, r24
    68c6:	90 93 f6 23 	sts	0x23F6, r25

	return (0);	// 0 = OK
    68ca:	50 ff       	sbrs	r21, 0
    68cc:	09 c0       	rjmp	.+18     	; 0x68e0 <xio_rs485_control+0x70>
}
    68ce:	80 91 f5 23 	lds	r24, 0x23F5
    68d2:	90 91 f6 23 	lds	r25, 0x23F6
    68d6:	80 61       	ori	r24, 0x10	; 16
    68d8:	80 93 f5 23 	sts	0x23F5, r24
    68dc:	90 93 f6 23 	sts	0x23F6, r25

/* 
    68e0:	51 ff       	sbrs	r21, 1
    68e2:	09 c0       	rjmp	.+18     	; 0x68f6 <xio_rs485_control+0x86>
 * xio_getc_rs485 character dispatch functions
    68e4:	80 91 f5 23 	lds	r24, 0x23F5
    68e8:	90 91 f6 23 	lds	r25, 0x23F6
    68ec:	8f 7e       	andi	r24, 0xEF	; 239
    68ee:	80 93 f5 23 	sts	0x23F5, r24
    68f2:	90 93 f6 23 	sts	0x23F6, r25
 *
 *  Functions take no input but use static RS.c, RS.signals, and others
    68f6:	52 ff       	sbrs	r21, 2
    68f8:	09 c0       	rjmp	.+18     	; 0x690c <xio_rs485_control+0x9c>
 *  Returns c (may be translated depending on the function)
    68fa:	80 91 f5 23 	lds	r24, 0x23F5
    68fe:	90 91 f6 23 	lds	r25, 0x23F6
    6902:	80 62       	ori	r24, 0x20	; 32
    6904:	80 93 f5 23 	sts	0x23F5, r24
    6908:	90 93 f6 23 	sts	0x23F6, r25
 */

    690c:	53 ff       	sbrs	r21, 3
    690e:	09 c0       	rjmp	.+18     	; 0x6922 <xio_rs485_control+0xb2>
static int (*getcFuncs[])(void) PROGMEM = { 	// use if you want it in FLASH
    6910:	80 91 f5 23 	lds	r24, 0x23F5
    6914:	90 91 f6 23 	lds	r25, 0x23F6
    6918:	8f 7d       	andi	r24, 0xDF	; 223
    691a:	80 93 f5 23 	sts	0x23F5, r24
    691e:	90 93 f6 23 	sts	0x23F6, r25
//static int (*getcFuncs[])(void) = {			// ALTERNATE: put table in SRAM

    6922:	54 ff       	sbrs	r21, 4
    6924:	09 c0       	rjmp	.+18     	; 0x6938 <xio_rs485_control+0xc8>
							// dec  hex symbol
    6926:	80 91 f5 23 	lds	r24, 0x23F5
    692a:	90 91 f6 23 	lds	r25, 0x23F6
    692e:	80 64       	ori	r24, 0x40	; 64
    6930:	80 93 f5 23 	sts	0x23F5, r24
    6934:	90 93 f6 23 	sts	0x23F6, r25
		_getc_NEWLINE, 		//	0	00	NUL	(Null char)		(TREATED AS NEWLINE)
		_getc_char, 		//	1	01	SOH	(Start of Header)
    6938:	55 ff       	sbrs	r21, 5
    693a:	09 c0       	rjmp	.+18     	; 0x694e <xio_rs485_control+0xde>
		_getc_char, 		//	2	02	STX	(Start of Text)
    693c:	80 91 f5 23 	lds	r24, 0x23F5
    6940:	90 91 f6 23 	lds	r25, 0x23F6
    6944:	8f 7b       	andi	r24, 0xBF	; 191
    6946:	80 93 f5 23 	sts	0x23F5, r24
    694a:	90 93 f6 23 	sts	0x23F6, r25
		_sig_KILL,		 	//	3	03	ETX (End of Text) ^c
		_getc_char, 		//	4	04	EOT	(End of Transmission)
    694e:	56 ff       	sbrs	r21, 6
    6950:	09 c0       	rjmp	.+18     	; 0x6964 <xio_rs485_control+0xf4>
		_getc_char, 		//	5	05	ENQ	(Enquiry)
    6952:	80 91 f5 23 	lds	r24, 0x23F5
    6956:	90 91 f6 23 	lds	r25, 0x23F6
    695a:	80 68       	ori	r24, 0x80	; 128
    695c:	80 93 f5 23 	sts	0x23F5, r24
    6960:	90 93 f6 23 	sts	0x23F6, r25
		_getc_char, 		//	6	06	ACK	(Acknowledgment)
		_getc_char, 		//	7	07	BEL	(Bell)
    6964:	57 ff       	sbrs	r21, 7
    6966:	09 c0       	rjmp	.+18     	; 0x697a <xio_rs485_control+0x10a>
		_getc_DELETE, 		//	8	08	BS	(Backspace)
    6968:	80 91 f5 23 	lds	r24, 0x23F5
    696c:	90 91 f6 23 	lds	r25, 0x23F6
    6970:	8f 77       	andi	r24, 0x7F	; 127
    6972:	80 93 f5 23 	sts	0x23F5, r24
    6976:	90 93 f6 23 	sts	0x23F6, r25
		_getc_char, 		//	9	09	HT	(Horizontal Tab)
		_getc_NEWLINE, 		//	10	0A	LF	(Line Feed)
		_getc_char, 		//	11	0B	VT	(Vertical Tab)
    697a:	80 e0       	ldi	r24, 0x00	; 0
    697c:	08 95       	ret

0000697e <__vector_29>:
		_getc_char,			//	107	6B	k	
		_getc_char,			//	108	6C	l	
		_getc_char,			//	109	6D	m	
		_getc_char,			//	110	6E	n	
		_getc_char,			//	111	6F	o	
		_getc_char,			//	112	70	p	
    697e:	1f 92       	push	r1
    6980:	0f 92       	push	r0
    6982:	0f b6       	in	r0, 0x3f	; 63
    6984:	0f 92       	push	r0
    6986:	0b b6       	in	r0, 0x3b	; 59
    6988:	0f 92       	push	r0
    698a:	11 24       	eor	r1, r1
    698c:	8f 93       	push	r24
    698e:	9f 93       	push	r25
    6990:	af 93       	push	r26
    6992:	bf 93       	push	r27
    6994:	ef 93       	push	r30
    6996:	ff 93       	push	r31
		_getc_char,			//	113	71	q	
    6998:	90 91 01 24 	lds	r25, 0x2401
    699c:	80 91 00 24 	lds	r24, 0x2400
    69a0:	98 17       	cp	r25, r24
    69a2:	39 f4       	brne	.+14     	; 0x69b2 <__vector_29+0x34>
		_getc_char,			//	114	72	r	
    69a4:	e0 91 2e 24 	lds	r30, 0x242E
    69a8:	f0 91 2f 24 	lds	r31, 0x242F
    69ac:	80 e2       	ldi	r24, 0x20	; 32
    69ae:	83 83       	std	Z+3, r24	; 0x03
    69b0:	1e c0       	rjmp	.+60     	; 0x69ee <__vector_29+0x70>
		_getc_char,			//	115	73	s	
		_getc_char,			//	116	74	t	
		_getc_char,			//	117	75	u	
		_getc_char,			//	118	76	v	
    69b2:	80 91 f5 23 	lds	r24, 0x23F5
    69b6:	90 91 f6 23 	lds	r25, 0x23F6
    69ba:	93 fd       	sbrc	r25, 3
    69bc:	18 c0       	rjmp	.+48     	; 0x69ee <__vector_29+0x70>
		_getc_char,			//	119	77	w	
    69be:	80 91 00 24 	lds	r24, 0x2400
    69c2:	81 50       	subi	r24, 0x01	; 1
    69c4:	80 93 00 24 	sts	0x2400, r24
    69c8:	80 91 00 24 	lds	r24, 0x2400
    69cc:	88 23       	and	r24, r24
    69ce:	19 f4       	brne	.+6      	; 0x69d6 <__vector_29+0x58>
		_getc_char,			//	120	78	x	
    69d0:	81 e1       	ldi	r24, 0x11	; 17
    69d2:	80 93 00 24 	sts	0x2400, r24
		_getc_char,			//	121	79	y	
		_getc_char,			//	122	7A	z	
    69d6:	e0 91 2e 24 	lds	r30, 0x242E
    69da:	f0 91 2f 24 	lds	r31, 0x242F
    69de:	a0 91 00 24 	lds	r26, 0x2400
    69e2:	b0 e0       	ldi	r27, 0x00	; 0
    69e4:	ab 50       	subi	r26, 0x0B	; 11
    69e6:	bc 4d       	sbci	r27, 0xDC	; 220
    69e8:	97 96       	adiw	r26, 0x27	; 39
    69ea:	8c 91       	ld	r24, X
    69ec:	80 83       	st	Z, r24
		_getc_char,			//	123	7B	{	(left/opening brace)
		_getc_char,			//	124	7C	|	(vertical bar)
    69ee:	ff 91       	pop	r31
    69f0:	ef 91       	pop	r30
    69f2:	bf 91       	pop	r27
    69f4:	af 91       	pop	r26
    69f6:	9f 91       	pop	r25
    69f8:	8f 91       	pop	r24
    69fa:	0f 90       	pop	r0
    69fc:	0b be       	out	0x3b, r0	; 59
    69fe:	0f 90       	pop	r0
    6a00:	0f be       	out	0x3f, r0	; 63
    6a02:	0f 90       	pop	r0
    6a04:	1f 90       	pop	r1
    6a06:	18 95       	reti

00006a08 <xio_rs485_putc>:
 *
 *  Get next character from RX buffer.
 *	See "Notes on the circular buffers" at end of xio.h for buffer details.
 *
 *	This routine returns a single character from the RX buffer to the caller.
 *	It's typically called by fgets() and is useful for single-threaded IO cases.
    6a08:	48 2f       	mov	r20, r24
 *	Cases with multiple concurrent IO streams may want to use the readln() function
 *	which is incompatible with the stdio system. 
 *
 *  Flags that affect behavior:
 *
    6a0a:	20 91 f5 23 	lds	r18, 0x23F5
    6a0e:	30 91 f6 23 	lds	r19, 0x23F6
    6a12:	d9 01       	movw	r26, r18
    6a14:	a4 70       	andi	r26, 0x04	; 4
    6a16:	b0 70       	andi	r27, 0x00	; 0
 *  ECHO behaviors
 *		- if ECHO is enabled echo character to stdout
 *		- echo all line termination chars as newlines ('\n')
 *		- Note: putc is responsible for expanding newlines to <cr><lf> if needed
 *
 *  SPECIAL CHARACTERS 
    6a18:	b9 01       	movw	r22, r18
    6a1a:	60 72       	andi	r22, 0x20	; 32
    6a1c:	70 70       	andi	r23, 0x00	; 0
 *  Get next character from RX buffer.
 *	See "Notes on the circular buffers" at end of xio.h for buffer details.
 *
 *	This routine returns a single character from the RX buffer to the caller.
 *	It's typically called by fgets() and is useful for single-threaded IO cases.
 *	Cases with multiple concurrent IO streams may want to use the readln() function
    6a1e:	90 91 01 24 	lds	r25, 0x2401
    6a22:	91 50       	subi	r25, 0x01	; 1
    6a24:	c1 f4       	brne	.+48     	; 0x6a56 <xio_rs485_putc+0x4e>
    6a26:	91 e1       	ldi	r25, 0x11	; 17
    6a28:	16 c0       	rjmp	.+44     	; 0x6a56 <xio_rs485_putc+0x4e>
 *	which is incompatible with the stdio system. 
 *
 *  Flags that affect behavior:
 *
    6a2a:	10 97       	sbiw	r26, 0x00	; 0
    6a2c:	61 f0       	breq	.+24     	; 0x6a46 <xio_rs485_putc+0x3e>
 *  BLOCKING behaviors
    6a2e:	80 91 48 00 	lds	r24, 0x0048
    6a32:	81 60       	ori	r24, 0x01	; 1
    6a34:	80 93 48 00 	sts	0x0048, r24
    6a38:	88 95       	sleep
    6a3a:	80 91 48 00 	lds	r24, 0x0048
    6a3e:	8e 7f       	andi	r24, 0xFE	; 254
    6a40:	80 93 48 00 	sts	0x0048, r24
    6a44:	08 c0       	rjmp	.+16     	; 0x6a56 <xio_rs485_putc+0x4e>
    6a46:	90 93 02 24 	sts	0x2402, r25
 *	 	- execute blocking or non-blocking read depending on controls
 *		- return character or -1 & XIO_SIG_WOULDBLOCK if non-blocking
    6a4a:	83 e0       	ldi	r24, 0x03	; 3
    6a4c:	80 93 f8 23 	sts	0x23F8, r24
    6a50:	2f ef       	ldi	r18, 0xFF	; 255
    6a52:	3f ef       	ldi	r19, 0xFF	; 255
    6a54:	54 c0       	rjmp	.+168    	; 0x6afe <xio_rs485_putc+0xf6>
 *	This routine returns a single character from the RX buffer to the caller.
 *	It's typically called by fgets() and is useful for single-threaded IO cases.
 *	Cases with multiple concurrent IO streams may want to use the readln() function
 *	which is incompatible with the stdio system. 
 *
 *  Flags that affect behavior:
    6a56:	80 91 00 24 	lds	r24, 0x2400
    6a5a:	98 17       	cp	r25, r24
    6a5c:	31 f3       	breq	.-52     	; 0x6a2a <xio_rs485_putc+0x22>
 *		- return character or -1 & XIO_SIG_WOULDBLOCK if non-blocking
 *		- return character or sleep() if blocking
 *
 *  ECHO behaviors
 *		- if ECHO is enabled echo character to stdout
 *		- echo all line termination chars as newlines ('\n')
    6a5e:	90 93 01 24 	sts	0x2401, r25
 *		- Note: putc is responsible for expanding newlines to <cr><lf> if needed
    6a62:	e0 91 01 24 	lds	r30, 0x2401
    6a66:	f0 e0       	ldi	r31, 0x00	; 0
    6a68:	eb 50       	subi	r30, 0x0B	; 11
    6a6a:	fc 4d       	sbci	r31, 0xDC	; 220
    6a6c:	47 a3       	std	Z+39, r20	; 0x27
 *
 *  SPECIAL CHARACTERS 
    6a6e:	61 15       	cp	r22, r1
    6a70:	71 05       	cpc	r23, r1
    6a72:	21 f0       	breq	.+8      	; 0x6a7c <xio_rs485_putc+0x74>
    6a74:	4a 30       	cpi	r20, 0x0A	; 10
    6a76:	11 f4       	brne	.+4      	; 0x6a7c <xio_rs485_putc+0x74>
    6a78:	4d e0       	ldi	r20, 0x0D	; 13
    6a7a:	d1 cf       	rjmp	.-94     	; 0x6a1e <xio_rs485_putc+0x16>
    6a7c:	90 93 02 24 	sts	0x2402, r25
 *		- special characters such as EOL and control chars are handled by the
 *		  character helper routines. See them for behaviors
 */

int xio_getc_rs485(FILE *stream)
    6a80:	a0 91 2e 24 	lds	r26, 0x242E
    6a84:	b0 91 2f 24 	lds	r27, 0x242F
    6a88:	11 96       	adiw	r26, 0x01	; 1
    6a8a:	8c 91       	ld	r24, X
    6a8c:	11 97       	sbiw	r26, 0x01	; 1
    6a8e:	85 ff       	sbrs	r24, 5
    6a90:	27 c0       	rjmp	.+78     	; 0x6ae0 <xio_rs485_putc+0xd8>
{
    6a92:	90 91 01 24 	lds	r25, 0x2401
    6a96:	80 91 00 24 	lds	r24, 0x2400
    6a9a:	98 17       	cp	r25, r24
    6a9c:	71 f1       	breq	.+92     	; 0x6afa <xio_rs485_putc+0xf2>
	while (RSx.rx_buf_head == RSx.rx_buf_tail) {// RX ISR buffer empty
		if (BLOCKING(RS.flags)) {
			sleep_mode();
    6a9e:	38 60       	ori	r19, 0x08	; 8
    6aa0:	20 93 f5 23 	sts	0x23F5, r18
    6aa4:	30 93 f6 23 	sts	0x23F6, r19
		} else {
    6aa8:	80 91 00 24 	lds	r24, 0x2400
    6aac:	81 50       	subi	r24, 0x01	; 1
    6aae:	80 93 00 24 	sts	0x2400, r24
    6ab2:	80 91 00 24 	lds	r24, 0x2400
    6ab6:	88 23       	and	r24, r24
    6ab8:	19 f4       	brne	.+6      	; 0x6ac0 <xio_rs485_putc+0xb8>
			RS.sig = XIO_SIG_EAGAIN;
    6aba:	81 e1       	ldi	r24, 0x11	; 17
    6abc:	80 93 00 24 	sts	0x2400, r24
			return(_FDEV_ERR);
		}
    6ac0:	e0 91 00 24 	lds	r30, 0x2400
    6ac4:	f0 e0       	ldi	r31, 0x00	; 0
    6ac6:	eb 50       	subi	r30, 0x0B	; 11
    6ac8:	fc 4d       	sbci	r31, 0xDC	; 220
    6aca:	87 a1       	ldd	r24, Z+39	; 0x27
    6acc:	8c 93       	st	X, r24
	}
    6ace:	80 91 f5 23 	lds	r24, 0x23F5
    6ad2:	90 91 f6 23 	lds	r25, 0x23F6
    6ad6:	97 7f       	andi	r25, 0xF7	; 247
    6ad8:	80 93 f5 23 	sts	0x23F5, r24
    6adc:	90 93 f6 23 	sts	0x23F6, r25
	if (--(RSx.rx_buf_tail) == 0) {				// advance RX tail (RXQ read ptr)
		RSx.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
	}
    6ae0:	e0 91 2e 24 	lds	r30, 0x242E
    6ae4:	f0 91 2f 24 	lds	r31, 0x242F
    6ae8:	81 e2       	ldi	r24, 0x21	; 33
    6aea:	83 83       	std	Z+3, r24	; 0x03
	RS.c = (RSx.rx_buf[RSx.rx_buf_tail] & 0x007F);	// get char from RX & mask MSB
    6aec:	80 91 a2 00 	lds	r24, 0x00A2
    6af0:	81 60       	ori	r24, 0x01	; 1
    6af2:	e0 ea       	ldi	r30, 0xA0	; 160
    6af4:	f0 e0       	ldi	r31, 0x00	; 0
    6af6:	82 83       	std	Z+2, r24	; 0x02
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
    6af8:	78 94       	sei
    6afa:	20 e0       	ldi	r18, 0x00	; 0
    6afc:	30 e0       	ldi	r19, 0x00	; 0
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[RS.c])))());
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    6afe:	c9 01       	movw	r24, r18
    6b00:	08 95       	ret

00006b02 <xio_rs485_getc>:

/* 
 *	xio_readln_rs485() - main loop task for USB device
 *
 *	Non-blocking, run-to-completion task for handling incoming data from USB port.
 *
    6b02:	20 91 f5 23 	lds	r18, 0x23F5
    6b06:	30 91 f6 23 	lds	r19, 0x23F6
    6b0a:	24 70       	andi	r18, 0x04	; 4
    6b0c:	30 70       	andi	r19, 0x00	; 0
    6b0e:	15 c0       	rjmp	.+42     	; 0x6b3a <xio_rs485_getc+0x38>
    6b10:	21 15       	cp	r18, r1
    6b12:	31 05       	cpc	r19, r1
    6b14:	61 f0       	breq	.+24     	; 0x6b2e <xio_rs485_getc+0x2c>
 *	Runs non-blocking (port scan) and retains line context across calls.
    6b16:	80 91 48 00 	lds	r24, 0x0048
    6b1a:	81 60       	ori	r24, 0x01	; 1
    6b1c:	80 93 48 00 	sts	0x0048, r24
    6b20:	88 95       	sleep
    6b22:	80 91 48 00 	lds	r24, 0x0048
    6b26:	8e 7f       	andi	r24, 0xFE	; 254
    6b28:	80 93 48 00 	sts	0x0048, r24
    6b2c:	06 c0       	rjmp	.+12     	; 0x6b3a <xio_rs485_getc+0x38>
 *  Should be called each time a character is received by the RX ISR, but can be 
 *	called randomly and multiple times without damage. 
    6b2e:	83 e0       	ldi	r24, 0x03	; 3
    6b30:	80 93 f8 23 	sts	0x23F8, r24
    6b34:	2f ef       	ldi	r18, 0xFF	; 255
    6b36:	3f ef       	ldi	r19, 0xFF	; 255
    6b38:	26 c0       	rjmp	.+76     	; 0x6b86 <xio_rs485_getc+0x84>
};

/* 
 *	xio_readln_rs485() - main loop task for USB device
 *
 *	Non-blocking, run-to-completion task for handling incoming data from USB port.
    6b3a:	90 91 ff 23 	lds	r25, 0x23FF
    6b3e:	80 91 fe 23 	lds	r24, 0x23FE
    6b42:	98 17       	cp	r25, r24
    6b44:	29 f3       	breq	.-54     	; 0x6b10 <xio_rs485_getc+0xe>
 *  Should be called each time a character is received by the RX ISR, but can be 
 *	called randomly and multiple times without damage. 
 *
 *	Reads a complete (newline terminated) line from the USB device and invokes
 *	the registered line handler function once line is complete.
 *
    6b46:	80 91 fe 23 	lds	r24, 0x23FE
    6b4a:	81 50       	subi	r24, 0x01	; 1
    6b4c:	80 93 fe 23 	sts	0x23FE, r24
    6b50:	80 91 fe 23 	lds	r24, 0x23FE
    6b54:	88 23       	and	r24, r24
    6b56:	19 f4       	brne	.+6      	; 0x6b5e <xio_rs485_getc+0x5c>
 *	Traps signals (e.g. ^c) and dispatches to registered signal handler(s).
    6b58:	88 e1       	ldi	r24, 0x18	; 24
    6b5a:	80 93 fe 23 	sts	0x23FE, r24
 *	Signals leave the line buffer intact, so it either can continue to be collected
 *	of it should be wiped.
    6b5e:	e0 91 fe 23 	lds	r30, 0x23FE
    6b62:	f0 e0       	ldi	r31, 0x00	; 0
    6b64:	eb 50       	subi	r30, 0x0B	; 11
    6b66:	fc 4d       	sbci	r31, 0xDC	; 220
    6b68:	86 85       	ldd	r24, Z+14	; 0x0e
    6b6a:	8f 77       	andi	r24, 0x7F	; 127
    6b6c:	80 93 f9 23 	sts	0x23F9, r24
 *
 *  Performs the following functions:
    6b70:	90 e0       	ldi	r25, 0x00	; 0
    6b72:	88 0f       	add	r24, r24
    6b74:	99 1f       	adc	r25, r25
    6b76:	87 50       	subi	r24, 0x07	; 7
    6b78:	93 4e       	sbci	r25, 0xE3	; 227
    6b7a:	fc 01       	movw	r30, r24
    6b7c:	25 91       	lpm	r18, Z+
    6b7e:	34 91       	lpm	r19, Z+
    6b80:	f9 01       	movw	r30, r18
    6b82:	19 95       	eicall
    6b84:	9c 01       	movw	r18, r24
 *		- read character from RX buffer
 *		- strip signals and dispatch them to signal handler
    6b86:	c9 01       	movw	r24, r18
    6b88:	08 95       	ret

00006b8a <_getc_char>:
 *		- collect complete line and pass to line handler function
 *		- trap buffer overflow condition and return an error
 *
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

    6b8a:	80 91 f5 23 	lds	r24, 0x23F5
    6b8e:	84 ff       	sbrs	r24, 4
    6b90:	08 c0       	rjmp	.+16     	; 0x6ba2 <_getc_char+0x18>
    6b92:	60 91 40 25 	lds	r22, 0x2540
    6b96:	70 91 41 25 	lds	r23, 0x2541
    6b9a:	80 91 f9 23 	lds	r24, 0x23F9
    6b9e:	0e 94 04 35 	call	0x6a08	; 0x6a08 <xio_rs485_putc>
int xio_readln_rs485(char *buf, uint8_t len)
{
    6ba2:	80 91 f9 23 	lds	r24, 0x23F9
    6ba6:	90 e0       	ldi	r25, 0x00	; 0
    6ba8:	08 95       	ret

00006baa <_getc_NEWLINE>:
	if (!IN_LINE(RS.flags)) {					// first time thru initializations
		RS.len = 0;								// zero buffer
		RS.status = 0;
		RS.sig = XIO_SIG_OK;					// no signal action
    6baa:	90 91 f5 23 	lds	r25, 0x23F5
    6bae:	96 ff       	sbrs	r25, 6
    6bb0:	03 c0       	rjmp	.+6      	; 0x6bb8 <_getc_NEWLINE+0xe>
    6bb2:	8a e0       	ldi	r24, 0x0A	; 10
    6bb4:	80 93 f9 23 	sts	0x23F9, r24
		RS.flags |= XIO_FLAG_IN_LINE_bm;		// yes, we are busy getting a line
    6bb8:	94 ff       	sbrs	r25, 4
    6bba:	08 c0       	rjmp	.+16     	; 0x6bcc <_getc_NEWLINE+0x22>
    6bbc:	60 91 40 25 	lds	r22, 0x2540
    6bc0:	70 91 41 25 	lds	r23, 0x2541
    6bc4:	80 91 f9 23 	lds	r24, 0x23F9
    6bc8:	0e 94 04 35 	call	0x6a08	; 0x6a08 <xio_rs485_putc>
	}
	if (RSx.rx_buf_head == RSx.rx_buf_tail) {	// RX ISR buffer empty
    6bcc:	80 91 f9 23 	lds	r24, 0x23F9
    6bd0:	90 e0       	ldi	r25, 0x00	; 0
    6bd2:	08 95       	ret

00006bd4 <_getc_SEMICOLON>:
//		RS.sig = XIO_SIG_EAGAIN;
		return(TG_EAGAIN);
	}
	if (--(RSx.rx_buf_tail) == 0) {				// advance RX tail (RXQ read ptr)
    6bd4:	80 91 f5 23 	lds	r24, 0x23F5
    6bd8:	87 ff       	sbrs	r24, 7
    6bda:	03 c0       	rjmp	.+6      	; 0x6be2 <_getc_SEMICOLON+0xe>
		RSx.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    6bdc:	0e 94 d5 35 	call	0x6baa	; 0x6baa <_getc_NEWLINE>
    6be0:	08 95       	ret
	}
	RS.c = (RSx.rx_buf[RSx.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    6be2:	0e 94 c5 35 	call	0x6b8a	; 0x6b8a <_getc_char>
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[RS.c])))()); // dispatch char
    6be6:	08 95       	ret

00006be8 <_getc_DELETE>:
}

/* xio_rs485_readln helper routines */

    6be8:	8a e0       	ldi	r24, 0x0A	; 10
    6bea:	80 93 f8 23 	sts	0x23F8, r24
static int _readln_char(void)
{
    6bee:	8f ef       	ldi	r24, 0xFF	; 255
    6bf0:	9f ef       	ldi	r25, 0xFF	; 255
    6bf2:	08 95       	ret

00006bf4 <xio_rs485_readln>:
    6bf4:	20 91 f5 23 	lds	r18, 0x23F5
    6bf8:	30 91 f6 23 	lds	r19, 0x23F6
    6bfc:	36 fd       	sbrc	r19, 6
    6bfe:	0d c0       	rjmp	.+26     	; 0x6c1a <xio_rs485_readln+0x26>
    6c00:	10 92 fa 23 	sts	0x23FA, r1
    6c04:	60 93 fb 23 	sts	0x23FB, r22
    6c08:	80 93 fc 23 	sts	0x23FC, r24
    6c0c:	90 93 fd 23 	sts	0x23FD, r25
    6c10:	30 64       	ori	r19, 0x40	; 64
    6c12:	20 93 f5 23 	sts	0x23F5, r18
    6c16:	30 93 f6 23 	sts	0x23F6, r19
    6c1a:	90 91 ff 23 	lds	r25, 0x23FF
    6c1e:	80 91 fe 23 	lds	r24, 0x23FE
    6c22:	98 17       	cp	r25, r24
    6c24:	19 f4       	brne	.+6      	; 0x6c2c <xio_rs485_readln+0x38>
    6c26:	21 e0       	ldi	r18, 0x01	; 1
    6c28:	30 e0       	ldi	r19, 0x00	; 0
    6c2a:	20 c0       	rjmp	.+64     	; 0x6c6c <xio_rs485_readln+0x78>
    6c2c:	80 91 fe 23 	lds	r24, 0x23FE
    6c30:	81 50       	subi	r24, 0x01	; 1
    6c32:	80 93 fe 23 	sts	0x23FE, r24
    6c36:	80 91 fe 23 	lds	r24, 0x23FE
    6c3a:	88 23       	and	r24, r24
    6c3c:	19 f4       	brne	.+6      	; 0x6c44 <xio_rs485_readln+0x50>
    6c3e:	88 e1       	ldi	r24, 0x18	; 24
    6c40:	80 93 fe 23 	sts	0x23FE, r24
    6c44:	e0 91 fe 23 	lds	r30, 0x23FE
    6c48:	f0 e0       	ldi	r31, 0x00	; 0
    6c4a:	eb 50       	subi	r30, 0x0B	; 11
    6c4c:	fc 4d       	sbci	r31, 0xDC	; 220
    6c4e:	86 85       	ldd	r24, Z+14	; 0x0e
    6c50:	8f 77       	andi	r24, 0x7F	; 127
    6c52:	80 93 f9 23 	sts	0x23F9, r24
    6c56:	90 e0       	ldi	r25, 0x00	; 0
    6c58:	88 0f       	add	r24, r24
    6c5a:	99 1f       	adc	r25, r25
    6c5c:	87 50       	subi	r24, 0x07	; 7
    6c5e:	94 4e       	sbci	r25, 0xE4	; 228
    6c60:	fc 01       	movw	r30, r24
    6c62:	25 91       	lpm	r18, Z+
    6c64:	34 91       	lpm	r19, Z+
    6c66:	f9 01       	movw	r30, r18
    6c68:	19 95       	eicall
    6c6a:	9c 01       	movw	r18, r24
    6c6c:	c9 01       	movw	r24, r18
    6c6e:	08 95       	ret

00006c70 <_readln_char>:
    6c70:	90 91 fa 23 	lds	r25, 0x23FA
    6c74:	20 91 fb 23 	lds	r18, 0x23FB
    6c78:	e0 91 fc 23 	lds	r30, 0x23FC
    6c7c:	f0 91 fd 23 	lds	r31, 0x23FD
    6c80:	29 17       	cp	r18, r25
    6c82:	48 f4       	brcc	.+18     	; 0x6c96 <_readln_char+0x26>
    6c84:	81 e0       	ldi	r24, 0x01	; 1
    6c86:	80 93 f8 23 	sts	0x23F8, r24
    6c8a:	e2 0f       	add	r30, r18
    6c8c:	f1 1d       	adc	r31, r1
    6c8e:	10 82       	st	Z, r1
    6c90:	27 e0       	ldi	r18, 0x07	; 7
    6c92:	30 e0       	ldi	r19, 0x00	; 0
    6c94:	16 c0       	rjmp	.+44     	; 0x6cc2 <_readln_char+0x52>
    6c96:	e9 0f       	add	r30, r25
    6c98:	f1 1d       	adc	r31, r1
    6c9a:	80 91 f9 23 	lds	r24, 0x23F9
    6c9e:	80 83       	st	Z, r24
    6ca0:	9f 5f       	subi	r25, 0xFF	; 255
    6ca2:	90 93 fa 23 	sts	0x23FA, r25
    6ca6:	80 91 f5 23 	lds	r24, 0x23F5
    6caa:	84 ff       	sbrs	r24, 4
    6cac:	08 c0       	rjmp	.+16     	; 0x6cbe <_readln_char+0x4e>
    6cae:	60 91 40 25 	lds	r22, 0x2540
    6cb2:	70 91 41 25 	lds	r23, 0x2541
    6cb6:	80 91 f9 23 	lds	r24, 0x23F9
    6cba:	0e 94 04 35 	call	0x6a08	; 0x6a08 <xio_rs485_putc>
    6cbe:	21 e0       	ldi	r18, 0x01	; 1
    6cc0:	30 e0       	ldi	r19, 0x00	; 0
    6cc2:	c9 01       	movw	r24, r18
    6cc4:	08 95       	ret

00006cc6 <_readln_NEWLINE>:
    6cc6:	81 e0       	ldi	r24, 0x01	; 1
    6cc8:	80 93 f8 23 	sts	0x23F8, r24
    6ccc:	80 91 fa 23 	lds	r24, 0x23FA
    6cd0:	e0 91 fc 23 	lds	r30, 0x23FC
    6cd4:	f0 91 fd 23 	lds	r31, 0x23FD
    6cd8:	e8 0f       	add	r30, r24
    6cda:	f1 1d       	adc	r31, r1
    6cdc:	10 82       	st	Z, r1
    6cde:	20 91 f5 23 	lds	r18, 0x23F5
    6ce2:	30 91 f6 23 	lds	r19, 0x23F6
    6ce6:	c9 01       	movw	r24, r18
    6ce8:	9f 7b       	andi	r25, 0xBF	; 191
    6cea:	80 93 f5 23 	sts	0x23F5, r24
    6cee:	90 93 f6 23 	sts	0x23F6, r25
    6cf2:	24 ff       	sbrs	r18, 4
    6cf4:	07 c0       	rjmp	.+14     	; 0x6d04 <_readln_NEWLINE+0x3e>
    6cf6:	60 91 40 25 	lds	r22, 0x2540
    6cfa:	70 91 41 25 	lds	r23, 0x2541
    6cfe:	8a e0       	ldi	r24, 0x0A	; 10
    6d00:	0e 94 04 35 	call	0x6a08	; 0x6a08 <xio_rs485_putc>
    6d04:	80 e0       	ldi	r24, 0x00	; 0
    6d06:	90 e0       	ldi	r25, 0x00	; 0
    6d08:	08 95       	ret

00006d0a <_readln_SEMICOLON>:
    6d0a:	80 91 f5 23 	lds	r24, 0x23F5
    6d0e:	87 ff       	sbrs	r24, 7
    6d10:	03 c0       	rjmp	.+6      	; 0x6d18 <_readln_SEMICOLON+0xe>
    6d12:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <_readln_NEWLINE>
    6d16:	08 95       	ret
    6d18:	0e 94 38 36 	call	0x6c70	; 0x6c70 <_readln_char>
    6d1c:	08 95       	ret

00006d1e <_readln_DELETE>:
    6d1e:	80 91 fa 23 	lds	r24, 0x23FA
    6d22:	81 50       	subi	r24, 0x01	; 1
    6d24:	80 93 fa 23 	sts	0x23FA, r24
    6d28:	80 91 f5 23 	lds	r24, 0x23F5
    6d2c:	84 ff       	sbrs	r24, 4
    6d2e:	08 c0       	rjmp	.+16     	; 0x6d40 <_readln_DELETE+0x22>
    6d30:	60 91 40 25 	lds	r22, 0x2540
    6d34:	70 91 41 25 	lds	r23, 0x2541
    6d38:	80 91 f9 23 	lds	r24, 0x23F9
    6d3c:	0e 94 04 35 	call	0x6a08	; 0x6a08 <xio_rs485_putc>
    6d40:	81 e0       	ldi	r24, 0x01	; 1
    6d42:	90 e0       	ldi	r25, 0x00	; 0
    6d44:	08 95       	ret

00006d46 <_sig_KILL>:
    6d46:	84 e0       	ldi	r24, 0x04	; 4
    6d48:	80 93 f8 23 	sts	0x23F8, r24
    6d4c:	8f ef       	ldi	r24, 0xFF	; 255
    6d4e:	9f ef       	ldi	r25, 0xFF	; 255
    6d50:	08 95       	ret

00006d52 <_sig_PAUSE>:
    6d52:	86 e0       	ldi	r24, 0x06	; 6
    6d54:	80 93 f8 23 	sts	0x23F8, r24
    6d58:	8f ef       	ldi	r24, 0xFF	; 255
    6d5a:	9f ef       	ldi	r25, 0xFF	; 255
    6d5c:	08 95       	ret

00006d5e <_sig_RESUME>:
    6d5e:	87 e0       	ldi	r24, 0x07	; 7
    6d60:	80 93 f8 23 	sts	0x23F8, r24
    6d64:	8f ef       	ldi	r24, 0xFF	; 255
    6d66:	9f ef       	ldi	r25, 0xFF	; 255
    6d68:	08 95       	ret

00006d6a <_sig_SHIFTOUT>:
    6d6a:	88 e0       	ldi	r24, 0x08	; 8
    6d6c:	80 93 f8 23 	sts	0x23F8, r24
    6d70:	8f ef       	ldi	r24, 0xFF	; 255
    6d72:	9f ef       	ldi	r25, 0xFF	; 255
    6d74:	08 95       	ret

00006d76 <_sig_SHIFTIN>:
    6d76:	89 e0       	ldi	r24, 0x09	; 9
    6d78:	80 93 f8 23 	sts	0x23F8, r24
    6d7c:	8f ef       	ldi	r24, 0xFF	; 255
    6d7e:	9f ef       	ldi	r25, 0xFF	; 255
    6d80:	08 95       	ret

00006d82 <xio_rs485_queue_RX_char>:
		_getc_char, 		//	55	37	7	
		_getc_char, 		//	56	38	8	
		_getc_char, 		//	57	39	9	
		_getc_char, 		//	58	3A	:	(colon)
		_getc_SEMICOLON,	//	59	3B	;	(semi-colon)
		_getc_char, 		//	60	3C	<	(less than)
    6d82:	28 2f       	mov	r18, r24
		_getc_char, 		//	61	3D	=	(equal sign)
		_getc_char, 		//	62	3E	>	(greater than)
    6d84:	83 30       	cpi	r24, 0x03	; 3
    6d86:	31 f4       	brne	.+12     	; 0x6d94 <xio_rs485_queue_RX_char+0x12>
		_getc_char, 		//	63	3F	?	(question mark)
    6d88:	84 e0       	ldi	r24, 0x04	; 4
    6d8a:	80 93 f8 23 	sts	0x23F8, r24
		_getc_char, 		//	64	40	@	(AT symbol)
    6d8e:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <signal_etx>
    6d92:	08 95       	ret
		_getc_char,			//	65	41	A	
		_getc_char,			//	66	42	B	
		_getc_char,			//	67	43	C	
		_getc_char,			//	68	44	D	
		_getc_char,			//	69	45	E	
    6d94:	80 91 ff 23 	lds	r24, 0x23FF
    6d98:	81 50       	subi	r24, 0x01	; 1
    6d9a:	80 93 ff 23 	sts	0x23FF, r24
    6d9e:	80 91 ff 23 	lds	r24, 0x23FF
    6da2:	88 23       	and	r24, r24
    6da4:	19 f4       	brne	.+6      	; 0x6dac <xio_rs485_queue_RX_char+0x2a>
		_getc_char,			//	70	46	F	
    6da6:	88 e1       	ldi	r24, 0x18	; 24
    6da8:	80 93 ff 23 	sts	0x23FF, r24
		_getc_char,			//	71	47	G	
		_getc_char,			//	72	48	H	
    6dac:	90 91 ff 23 	lds	r25, 0x23FF
    6db0:	80 91 fe 23 	lds	r24, 0x23FE
    6db4:	98 17       	cp	r25, r24
    6db6:	39 f0       	breq	.+14     	; 0x6dc6 <xio_rs485_queue_RX_char+0x44>
		_getc_char,			//	73	49	I	
    6db8:	e0 91 ff 23 	lds	r30, 0x23FF
    6dbc:	f0 e0       	ldi	r31, 0x00	; 0
    6dbe:	eb 50       	subi	r30, 0x0B	; 11
    6dc0:	fc 4d       	sbci	r31, 0xDC	; 220
    6dc2:	26 87       	std	Z+14, r18	; 0x0e
    6dc4:	08 95       	ret
		_getc_char,			//	74	4A	J	
		_getc_char,			//	75	4B	K	
		_getc_char,			//	76	4C	L	
		_getc_char,			//	77	4D	M	
    6dc6:	80 91 ff 23 	lds	r24, 0x23FF
    6dca:	8f 5f       	subi	r24, 0xFF	; 255
    6dcc:	80 93 ff 23 	sts	0x23FF, r24
    6dd0:	80 91 ff 23 	lds	r24, 0x23FF
    6dd4:	89 31       	cpi	r24, 0x19	; 25
    6dd6:	18 f0       	brcs	.+6      	; 0x6dde <xio_rs485_queue_RX_char+0x5c>
		_getc_char,			//	78	4E	N	
    6dd8:	81 e0       	ldi	r24, 0x01	; 1
    6dda:	80 93 ff 23 	sts	0x23FF, r24
    6dde:	08 95       	ret

00006de0 <xio_rs485_queue_RX_string>:
		_getc_char,			//	82	52	R	
		_getc_char,			//	83	53	S	
		_getc_char,			//	84	54	T	
		_getc_char,			//	85	55	U	
		_getc_char,			//	86	56	V	
		_getc_char,			//	87	57	W	
    6de0:	1f 93       	push	r17
    6de2:	cf 93       	push	r28
    6de4:	df 93       	push	r29
    6de6:	ec 01       	movw	r28, r24
    6de8:	10 e0       	ldi	r17, 0x00	; 0
    6dea:	02 c0       	rjmp	.+4      	; 0x6df0 <xio_rs485_queue_RX_string+0x10>
		_getc_char,			//	88	58	X	
		_getc_char,			//	89	59	Y	
		_getc_char,			//	90	5A	Z	
		_getc_char,			//	91	5B	[	(left/opening bracket)
		_getc_char,			//	92	5C	\	(back slash)
    6dec:	0e 94 c1 36 	call	0x6d82	; 0x6d82 <xio_rs485_queue_RX_char>
		_getc_char,			//	86	56	V	
		_getc_char,			//	87	57	W	
		_getc_char,			//	88	58	X	
		_getc_char,			//	89	59	Y	
		_getc_char,			//	90	5A	Z	
		_getc_char,			//	91	5B	[	(left/opening bracket)
    6df0:	fe 01       	movw	r30, r28
    6df2:	e1 0f       	add	r30, r17
    6df4:	f1 1d       	adc	r31, r1
    6df6:	80 81       	ld	r24, Z
    6df8:	1f 5f       	subi	r17, 0xFF	; 255
    6dfa:	88 23       	and	r24, r24
    6dfc:	b9 f7       	brne	.-18     	; 0x6dec <xio_rs485_queue_RX_string+0xc>
		_getc_char,			//	92	5C	\	(back slash)
		_getc_char,			//	93	5D	]	(right/closing bracket)
		_getc_char,			//	94	5E	^	(caret/circumflex)
    6dfe:	df 91       	pop	r29
    6e00:	cf 91       	pop	r28
    6e02:	1f 91       	pop	r17
    6e04:	08 95       	ret

00006e06 <__vector_28>:
		_getc_char, 		//	25	19	EM	(End of Medium)
		_getc_char, 		//	26	1A	SUB	(Substitute)
		_sig_KILL, 			//	27	1B	ESC	(Escape)
		_getc_char, 		//	28	1C	FS	(File Separator)
		_getc_char, 		//	29	1D	GS	(Group Separator)
		_getc_char, 		//	30	1E	RS  (Reqst to Send)(Record Sep.)	
    6e06:	1f 92       	push	r1
    6e08:	0f 92       	push	r0
    6e0a:	0f b6       	in	r0, 0x3f	; 63
    6e0c:	0f 92       	push	r0
    6e0e:	0b b6       	in	r0, 0x3b	; 59
    6e10:	0f 92       	push	r0
    6e12:	11 24       	eor	r1, r1
    6e14:	2f 93       	push	r18
    6e16:	3f 93       	push	r19
    6e18:	4f 93       	push	r20
    6e1a:	5f 93       	push	r21
    6e1c:	6f 93       	push	r22
    6e1e:	7f 93       	push	r23
    6e20:	8f 93       	push	r24
    6e22:	9f 93       	push	r25
    6e24:	af 93       	push	r26
    6e26:	bf 93       	push	r27
    6e28:	ef 93       	push	r30
    6e2a:	ff 93       	push	r31
		_getc_char, 		//	31	1F	US	(Unit Separator)
    6e2c:	e0 91 2e 24 	lds	r30, 0x242E
    6e30:	f0 91 2f 24 	lds	r31, 0x242F
    6e34:	20 81       	ld	r18, Z
		_getc_char, 		//	32	20	SP	(Space)
		_getc_char, 		//	33	21	!	(exclamation mark)
		_getc_char, 		//	34	22	,	(double quote)	
    6e36:	23 30       	cpi	r18, 0x03	; 3
    6e38:	31 f4       	brne	.+12     	; 0x6e46 <__vector_28+0x40>
		_getc_char, 		//	35	23	#	(number sign)
    6e3a:	84 e0       	ldi	r24, 0x04	; 4
    6e3c:	80 93 f8 23 	sts	0x23F8, r24
		_getc_char, 		//	36	24	$	(dollar sign)
    6e40:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <signal_etx>
    6e44:	25 c0       	rjmp	.+74     	; 0x6e90 <__vector_28+0x8a>
		_getc_char, 		//	37	25	%	(percent)
		_getc_char, 		//	38	26	&	(ampersand)
		_getc_char, 		//	39	27	'	(single quote)
		_getc_char, 		//	40	28	(	(left/open parenthesis)
		_getc_char, 		//	41	29	)	(right/closing parenth.)
    6e46:	80 91 ff 23 	lds	r24, 0x23FF
    6e4a:	81 50       	subi	r24, 0x01	; 1
    6e4c:	80 93 ff 23 	sts	0x23FF, r24
    6e50:	80 91 ff 23 	lds	r24, 0x23FF
    6e54:	88 23       	and	r24, r24
    6e56:	19 f4       	brne	.+6      	; 0x6e5e <__vector_28+0x58>
		_getc_char, 		//	42	2A	*	(asterisk)
    6e58:	88 e1       	ldi	r24, 0x18	; 24
    6e5a:	80 93 ff 23 	sts	0x23FF, r24
		_getc_char, 		//	43	2B	+	(plus)
		_getc_char, 		//	44	2C		(comma)
    6e5e:	90 91 ff 23 	lds	r25, 0x23FF
    6e62:	80 91 fe 23 	lds	r24, 0x23FE
    6e66:	98 17       	cp	r25, r24
    6e68:	39 f0       	breq	.+14     	; 0x6e78 <__vector_28+0x72>
		_getc_char,	 		//	45	2D	-	(minus or dash)
    6e6a:	e0 91 ff 23 	lds	r30, 0x23FF
    6e6e:	f0 e0       	ldi	r31, 0x00	; 0
    6e70:	eb 50       	subi	r30, 0x0B	; 11
    6e72:	fc 4d       	sbci	r31, 0xDC	; 220
    6e74:	26 87       	std	Z+14, r18	; 0x0e
    6e76:	0c c0       	rjmp	.+24     	; 0x6e90 <__vector_28+0x8a>
		_getc_char, 		//	46	2E	.	(dot)
		_getc_char,	 		//	47	2F	/	(forward slash)
		_getc_char, 		//	48	30	0	
		_getc_char, 		//	49	31	1	
    6e78:	80 91 ff 23 	lds	r24, 0x23FF
    6e7c:	8f 5f       	subi	r24, 0xFF	; 255
    6e7e:	80 93 ff 23 	sts	0x23FF, r24
    6e82:	80 91 ff 23 	lds	r24, 0x23FF
    6e86:	89 31       	cpi	r24, 0x19	; 25
    6e88:	18 f0       	brcs	.+6      	; 0x6e90 <__vector_28+0x8a>
		_getc_char, 		//	50	32	2	
    6e8a:	81 e0       	ldi	r24, 0x01	; 1
    6e8c:	80 93 ff 23 	sts	0x23FF, r24
		_getc_char, 		//	51	33	3	
		_getc_char, 		//	52	34	4	
		_getc_char, 		//	53	35	5	
    6e90:	ff 91       	pop	r31
    6e92:	ef 91       	pop	r30
    6e94:	bf 91       	pop	r27
    6e96:	af 91       	pop	r26
    6e98:	9f 91       	pop	r25
    6e9a:	8f 91       	pop	r24
    6e9c:	7f 91       	pop	r23
    6e9e:	6f 91       	pop	r22
    6ea0:	5f 91       	pop	r21
    6ea2:	4f 91       	pop	r20
    6ea4:	3f 91       	pop	r19
    6ea6:	2f 91       	pop	r18
    6ea8:	0f 90       	pop	r0
    6eaa:	0b be       	out	0x3b, r0	; 59
    6eac:	0f 90       	pop	r0
    6eae:	0f be       	out	0x3f, r0	; 63
    6eb0:	0f 90       	pop	r0
    6eb2:	1f 90       	pop	r1
    6eb4:	18 95       	reti

00006eb6 <signal_etx>:
 * signal_etx() - trap and dispatch ^c
 */

void signal_etx() {			// ^c
{
	tg_reset_source();					// return control to standard device
    6eb6:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <tg_reset_source>
	mc_motion_stop();					// stop computing and generating motions
    6eba:	0e 94 c9 1b 	call	0x3792	; 0x3792 <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    6ebe:	0e 94 29 31 	call	0x6252	; 0x6252 <mv_flush>
	st_stop_steppers();					// stop the steppers
    6ec2:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <st_stop_steppers>
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
*/
}
    6ec6:	08 95       	ret

00006ec8 <__udivdi3>:
    6ec8:	ae e5       	ldi	r26, 0x5E	; 94
    6eca:	b0 e0       	ldi	r27, 0x00	; 0
    6ecc:	ea e6       	ldi	r30, 0x6A	; 106
    6ece:	f7 e3       	ldi	r31, 0x37	; 55
    6ed0:	0c 94 f7 45 	jmp	0x8bee	; 0x8bee <__prologue_saves__>
    6ed4:	a8 e0       	ldi	r26, 0x08	; 8
    6ed6:	4e 01       	movw	r8, r28
    6ed8:	08 94       	sec
    6eda:	81 1c       	adc	r8, r1
    6edc:	91 1c       	adc	r9, r1
    6ede:	f4 01       	movw	r30, r8
    6ee0:	6a 2e       	mov	r6, r26
    6ee2:	11 92       	st	Z+, r1
    6ee4:	6a 94       	dec	r6
    6ee6:	e9 f7       	brne	.-6      	; 0x6ee2 <__udivdi3+0x1a>
    6ee8:	29 83       	std	Y+1, r18	; 0x01
    6eea:	3a 83       	std	Y+2, r19	; 0x02
    6eec:	4b 83       	std	Y+3, r20	; 0x03
    6eee:	5c 83       	std	Y+4, r21	; 0x04
    6ef0:	6d 83       	std	Y+5, r22	; 0x05
    6ef2:	7e 83       	std	Y+6, r23	; 0x06
    6ef4:	8f 83       	std	Y+7, r24	; 0x07
    6ef6:	98 87       	std	Y+8, r25	; 0x08
    6ef8:	ce 01       	movw	r24, r28
    6efa:	09 96       	adiw	r24, 0x09	; 9
    6efc:	fc 01       	movw	r30, r24
    6efe:	11 92       	st	Z+, r1
    6f00:	aa 95       	dec	r26
    6f02:	e9 f7       	brne	.-6      	; 0x6efe <__udivdi3+0x36>
    6f04:	a9 86       	std	Y+9, r10	; 0x09
    6f06:	ba 86       	std	Y+10, r11	; 0x0a
    6f08:	cb 86       	std	Y+11, r12	; 0x0b
    6f0a:	dc 86       	std	Y+12, r13	; 0x0c
    6f0c:	ed 86       	std	Y+13, r14	; 0x0d
    6f0e:	fe 86       	std	Y+14, r15	; 0x0e
    6f10:	0f 87       	std	Y+15, r16	; 0x0f
    6f12:	18 8b       	std	Y+16, r17	; 0x10
    6f14:	29 84       	ldd	r2, Y+9	; 0x09
    6f16:	3a 84       	ldd	r3, Y+10	; 0x0a
    6f18:	4b 84       	ldd	r4, Y+11	; 0x0b
    6f1a:	5c 84       	ldd	r5, Y+12	; 0x0c
    6f1c:	ed 84       	ldd	r14, Y+13	; 0x0d
    6f1e:	fe 84       	ldd	r15, Y+14	; 0x0e
    6f20:	0f 85       	ldd	r16, Y+15	; 0x0f
    6f22:	18 89       	ldd	r17, Y+16	; 0x10
    6f24:	69 80       	ldd	r6, Y+1	; 0x01
    6f26:	7a 80       	ldd	r7, Y+2	; 0x02
    6f28:	8b 80       	ldd	r8, Y+3	; 0x03
    6f2a:	9c 80       	ldd	r9, Y+4	; 0x04
    6f2c:	6d a6       	std	Y+45, r6	; 0x2d
    6f2e:	7e a6       	std	Y+46, r7	; 0x2e
    6f30:	8f a6       	std	Y+47, r8	; 0x2f
    6f32:	98 aa       	std	Y+48, r9	; 0x30
    6f34:	6d 80       	ldd	r6, Y+5	; 0x05
    6f36:	7e 80       	ldd	r7, Y+6	; 0x06
    6f38:	8f 80       	ldd	r8, Y+7	; 0x07
    6f3a:	98 84       	ldd	r9, Y+8	; 0x08
    6f3c:	e1 14       	cp	r14, r1
    6f3e:	f1 04       	cpc	r15, r1
    6f40:	01 05       	cpc	r16, r1
    6f42:	11 05       	cpc	r17, r1
    6f44:	09 f0       	breq	.+2      	; 0x6f48 <__udivdi3+0x80>
    6f46:	b3 c3       	rjmp	.+1894   	; 0x76ae <__udivdi3+0x7e6>
    6f48:	62 14       	cp	r6, r2
    6f4a:	73 04       	cpc	r7, r3
    6f4c:	84 04       	cpc	r8, r4
    6f4e:	95 04       	cpc	r9, r5
    6f50:	08 f0       	brcs	.+2      	; 0x6f54 <__udivdi3+0x8c>
    6f52:	3d c1       	rjmp	.+634    	; 0x71ce <__udivdi3+0x306>
    6f54:	00 e0       	ldi	r16, 0x00	; 0
    6f56:	20 16       	cp	r2, r16
    6f58:	00 e0       	ldi	r16, 0x00	; 0
    6f5a:	30 06       	cpc	r3, r16
    6f5c:	01 e0       	ldi	r16, 0x01	; 1
    6f5e:	40 06       	cpc	r4, r16
    6f60:	00 e0       	ldi	r16, 0x00	; 0
    6f62:	50 06       	cpc	r5, r16
    6f64:	88 f4       	brcc	.+34     	; 0x6f88 <__udivdi3+0xc0>
    6f66:	1f ef       	ldi	r17, 0xFF	; 255
    6f68:	21 16       	cp	r2, r17
    6f6a:	31 04       	cpc	r3, r1
    6f6c:	41 04       	cpc	r4, r1
    6f6e:	51 04       	cpc	r5, r1
    6f70:	39 f0       	breq	.+14     	; 0x6f80 <__udivdi3+0xb8>
    6f72:	30 f0       	brcs	.+12     	; 0x6f80 <__udivdi3+0xb8>
    6f74:	48 e0       	ldi	r20, 0x08	; 8
    6f76:	e4 2e       	mov	r14, r20
    6f78:	f1 2c       	mov	r15, r1
    6f7a:	01 2d       	mov	r16, r1
    6f7c:	11 2d       	mov	r17, r1
    6f7e:	18 c0       	rjmp	.+48     	; 0x6fb0 <__udivdi3+0xe8>
    6f80:	ee 24       	eor	r14, r14
    6f82:	ff 24       	eor	r15, r15
    6f84:	87 01       	movw	r16, r14
    6f86:	14 c0       	rjmp	.+40     	; 0x6fb0 <__udivdi3+0xe8>
    6f88:	20 e0       	ldi	r18, 0x00	; 0
    6f8a:	22 16       	cp	r2, r18
    6f8c:	20 e0       	ldi	r18, 0x00	; 0
    6f8e:	32 06       	cpc	r3, r18
    6f90:	20 e0       	ldi	r18, 0x00	; 0
    6f92:	42 06       	cpc	r4, r18
    6f94:	21 e0       	ldi	r18, 0x01	; 1
    6f96:	52 06       	cpc	r5, r18
    6f98:	30 f0       	brcs	.+12     	; 0x6fa6 <__udivdi3+0xde>
    6f9a:	38 e1       	ldi	r19, 0x18	; 24
    6f9c:	e3 2e       	mov	r14, r19
    6f9e:	f1 2c       	mov	r15, r1
    6fa0:	01 2d       	mov	r16, r1
    6fa2:	11 2d       	mov	r17, r1
    6fa4:	05 c0       	rjmp	.+10     	; 0x6fb0 <__udivdi3+0xe8>
    6fa6:	20 e1       	ldi	r18, 0x10	; 16
    6fa8:	e2 2e       	mov	r14, r18
    6faa:	f1 2c       	mov	r15, r1
    6fac:	01 2d       	mov	r16, r1
    6fae:	11 2d       	mov	r17, r1
    6fb0:	d2 01       	movw	r26, r4
    6fb2:	c1 01       	movw	r24, r2
    6fb4:	0e 2c       	mov	r0, r14
    6fb6:	04 c0       	rjmp	.+8      	; 0x6fc0 <__udivdi3+0xf8>
    6fb8:	b6 95       	lsr	r27
    6fba:	a7 95       	ror	r26
    6fbc:	97 95       	ror	r25
    6fbe:	87 95       	ror	r24
    6fc0:	0a 94       	dec	r0
    6fc2:	d2 f7       	brpl	.-12     	; 0x6fb8 <__udivdi3+0xf0>
    6fc4:	86 5d       	subi	r24, 0xD6	; 214
    6fc6:	9f 4d       	sbci	r25, 0xDF	; 223
    6fc8:	dc 01       	movw	r26, r24
    6fca:	2c 91       	ld	r18, X
    6fcc:	80 e2       	ldi	r24, 0x20	; 32
    6fce:	90 e0       	ldi	r25, 0x00	; 0
    6fd0:	a0 e0       	ldi	r26, 0x00	; 0
    6fd2:	b0 e0       	ldi	r27, 0x00	; 0
    6fd4:	8e 19       	sub	r24, r14
    6fd6:	9f 09       	sbc	r25, r15
    6fd8:	a0 0b       	sbc	r26, r16
    6fda:	b1 0b       	sbc	r27, r17
    6fdc:	7c 01       	movw	r14, r24
    6fde:	8d 01       	movw	r16, r26
    6fe0:	e2 1a       	sub	r14, r18
    6fe2:	f1 08       	sbc	r15, r1
    6fe4:	01 09       	sbc	r16, r1
    6fe6:	11 09       	sbc	r17, r1
    6fe8:	e1 14       	cp	r14, r1
    6fea:	f1 04       	cpc	r15, r1
    6fec:	01 05       	cpc	r16, r1
    6fee:	11 05       	cpc	r17, r1
    6ff0:	a1 f1       	breq	.+104    	; 0x705a <__udivdi3+0x192>
    6ff2:	0e 2c       	mov	r0, r14
    6ff4:	04 c0       	rjmp	.+8      	; 0x6ffe <__udivdi3+0x136>
    6ff6:	22 0c       	add	r2, r2
    6ff8:	33 1c       	adc	r3, r3
    6ffa:	44 1c       	adc	r4, r4
    6ffc:	55 1c       	adc	r5, r5
    6ffe:	0a 94       	dec	r0
    7000:	d2 f7       	brpl	.-12     	; 0x6ff6 <__udivdi3+0x12e>
    7002:	a4 01       	movw	r20, r8
    7004:	93 01       	movw	r18, r6
    7006:	0e 2c       	mov	r0, r14
    7008:	04 c0       	rjmp	.+8      	; 0x7012 <__udivdi3+0x14a>
    700a:	22 0f       	add	r18, r18
    700c:	33 1f       	adc	r19, r19
    700e:	44 1f       	adc	r20, r20
    7010:	55 1f       	adc	r21, r21
    7012:	0a 94       	dec	r0
    7014:	d2 f7       	brpl	.-12     	; 0x700a <__udivdi3+0x142>
    7016:	80 e2       	ldi	r24, 0x20	; 32
    7018:	90 e0       	ldi	r25, 0x00	; 0
    701a:	8e 19       	sub	r24, r14
    701c:	9f 09       	sbc	r25, r15
    701e:	6d a4       	ldd	r6, Y+45	; 0x2d
    7020:	7e a4       	ldd	r7, Y+46	; 0x2e
    7022:	8f a4       	ldd	r8, Y+47	; 0x2f
    7024:	98 a8       	ldd	r9, Y+48	; 0x30
    7026:	04 c0       	rjmp	.+8      	; 0x7030 <__udivdi3+0x168>
    7028:	96 94       	lsr	r9
    702a:	87 94       	ror	r8
    702c:	77 94       	ror	r7
    702e:	67 94       	ror	r6
    7030:	8a 95       	dec	r24
    7032:	d2 f7       	brpl	.-12     	; 0x7028 <__udivdi3+0x160>
    7034:	62 2a       	or	r6, r18
    7036:	73 2a       	or	r7, r19
    7038:	84 2a       	or	r8, r20
    703a:	95 2a       	or	r9, r21
    703c:	ad a4       	ldd	r10, Y+45	; 0x2d
    703e:	be a4       	ldd	r11, Y+46	; 0x2e
    7040:	cf a4       	ldd	r12, Y+47	; 0x2f
    7042:	d8 a8       	ldd	r13, Y+48	; 0x30
    7044:	04 c0       	rjmp	.+8      	; 0x704e <__udivdi3+0x186>
    7046:	aa 0c       	add	r10, r10
    7048:	bb 1c       	adc	r11, r11
    704a:	cc 1c       	adc	r12, r12
    704c:	dd 1c       	adc	r13, r13
    704e:	ea 94       	dec	r14
    7050:	d2 f7       	brpl	.-12     	; 0x7046 <__udivdi3+0x17e>
    7052:	ad a6       	std	Y+45, r10	; 0x2d
    7054:	be a6       	std	Y+46, r11	; 0x2e
    7056:	cf a6       	std	Y+47, r12	; 0x2f
    7058:	d8 aa       	std	Y+48, r13	; 0x30
    705a:	62 01       	movw	r12, r4
    705c:	ee 24       	eor	r14, r14
    705e:	ff 24       	eor	r15, r15
    7060:	cd aa       	std	Y+53, r12	; 0x35
    7062:	de aa       	std	Y+54, r13	; 0x36
    7064:	ef aa       	std	Y+55, r14	; 0x37
    7066:	f8 ae       	std	Y+56, r15	; 0x38
    7068:	92 01       	movw	r18, r4
    706a:	81 01       	movw	r16, r2
    706c:	20 70       	andi	r18, 0x00	; 0
    706e:	30 70       	andi	r19, 0x00	; 0
    7070:	09 af       	std	Y+57, r16	; 0x39
    7072:	1a af       	std	Y+58, r17	; 0x3a
    7074:	2b af       	std	Y+59, r18	; 0x3b
    7076:	3c af       	std	Y+60, r19	; 0x3c
    7078:	c4 01       	movw	r24, r8
    707a:	b3 01       	movw	r22, r6
    707c:	a7 01       	movw	r20, r14
    707e:	96 01       	movw	r18, r12
    7080:	0e 94 d5 45 	call	0x8baa	; 0x8baa <__udivmodsi4>
    7084:	7b 01       	movw	r14, r22
    7086:	8c 01       	movw	r16, r24
    7088:	c4 01       	movw	r24, r8
    708a:	b3 01       	movw	r22, r6
    708c:	2d a9       	ldd	r18, Y+53	; 0x35
    708e:	3e a9       	ldd	r19, Y+54	; 0x36
    7090:	4f a9       	ldd	r20, Y+55	; 0x37
    7092:	58 ad       	ldd	r21, Y+56	; 0x38
    7094:	0e 94 d5 45 	call	0x8baa	; 0x8baa <__udivmodsi4>
    7098:	c9 01       	movw	r24, r18
    709a:	da 01       	movw	r26, r20
    709c:	3c 01       	movw	r6, r24
    709e:	4d 01       	movw	r8, r26
    70a0:	c4 01       	movw	r24, r8
    70a2:	b3 01       	movw	r22, r6
    70a4:	29 ad       	ldd	r18, Y+57	; 0x39
    70a6:	3a ad       	ldd	r19, Y+58	; 0x3a
    70a8:	4b ad       	ldd	r20, Y+59	; 0x3b
    70aa:	5c ad       	ldd	r21, Y+60	; 0x3c
    70ac:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <__mulsi3>
    70b0:	9b 01       	movw	r18, r22
    70b2:	ac 01       	movw	r20, r24
    70b4:	87 01       	movw	r16, r14
    70b6:	ff 24       	eor	r15, r15
    70b8:	ee 24       	eor	r14, r14
    70ba:	ad a4       	ldd	r10, Y+45	; 0x2d
    70bc:	be a4       	ldd	r11, Y+46	; 0x2e
    70be:	cf a4       	ldd	r12, Y+47	; 0x2f
    70c0:	d8 a8       	ldd	r13, Y+48	; 0x30
    70c2:	c6 01       	movw	r24, r12
    70c4:	aa 27       	eor	r26, r26
    70c6:	bb 27       	eor	r27, r27
    70c8:	57 01       	movw	r10, r14
    70ca:	68 01       	movw	r12, r16
    70cc:	a8 2a       	or	r10, r24
    70ce:	b9 2a       	or	r11, r25
    70d0:	ca 2a       	or	r12, r26
    70d2:	db 2a       	or	r13, r27
    70d4:	a2 16       	cp	r10, r18
    70d6:	b3 06       	cpc	r11, r19
    70d8:	c4 06       	cpc	r12, r20
    70da:	d5 06       	cpc	r13, r21
    70dc:	e0 f4       	brcc	.+56     	; 0x7116 <__udivdi3+0x24e>
    70de:	08 94       	sec
    70e0:	61 08       	sbc	r6, r1
    70e2:	71 08       	sbc	r7, r1
    70e4:	81 08       	sbc	r8, r1
    70e6:	91 08       	sbc	r9, r1
    70e8:	a2 0c       	add	r10, r2
    70ea:	b3 1c       	adc	r11, r3
    70ec:	c4 1c       	adc	r12, r4
    70ee:	d5 1c       	adc	r13, r5
    70f0:	a2 14       	cp	r10, r2
    70f2:	b3 04       	cpc	r11, r3
    70f4:	c4 04       	cpc	r12, r4
    70f6:	d5 04       	cpc	r13, r5
    70f8:	70 f0       	brcs	.+28     	; 0x7116 <__udivdi3+0x24e>
    70fa:	a2 16       	cp	r10, r18
    70fc:	b3 06       	cpc	r11, r19
    70fe:	c4 06       	cpc	r12, r20
    7100:	d5 06       	cpc	r13, r21
    7102:	48 f4       	brcc	.+18     	; 0x7116 <__udivdi3+0x24e>
    7104:	08 94       	sec
    7106:	61 08       	sbc	r6, r1
    7108:	71 08       	sbc	r7, r1
    710a:	81 08       	sbc	r8, r1
    710c:	91 08       	sbc	r9, r1
    710e:	a2 0c       	add	r10, r2
    7110:	b3 1c       	adc	r11, r3
    7112:	c4 1c       	adc	r12, r4
    7114:	d5 1c       	adc	r13, r5
    7116:	a2 1a       	sub	r10, r18
    7118:	b3 0a       	sbc	r11, r19
    711a:	c4 0a       	sbc	r12, r20
    711c:	d5 0a       	sbc	r13, r21
    711e:	c6 01       	movw	r24, r12
    7120:	b5 01       	movw	r22, r10
    7122:	2d a9       	ldd	r18, Y+53	; 0x35
    7124:	3e a9       	ldd	r19, Y+54	; 0x36
    7126:	4f a9       	ldd	r20, Y+55	; 0x37
    7128:	58 ad       	ldd	r21, Y+56	; 0x38
    712a:	0e 94 d5 45 	call	0x8baa	; 0x8baa <__udivmodsi4>
    712e:	7b 01       	movw	r14, r22
    7130:	8c 01       	movw	r16, r24
    7132:	c6 01       	movw	r24, r12
    7134:	b5 01       	movw	r22, r10
    7136:	2d a9       	ldd	r18, Y+53	; 0x35
    7138:	3e a9       	ldd	r19, Y+54	; 0x36
    713a:	4f a9       	ldd	r20, Y+55	; 0x37
    713c:	58 ad       	ldd	r21, Y+56	; 0x38
    713e:	0e 94 d5 45 	call	0x8baa	; 0x8baa <__udivmodsi4>
    7142:	c9 01       	movw	r24, r18
    7144:	da 01       	movw	r26, r20
    7146:	5c 01       	movw	r10, r24
    7148:	6d 01       	movw	r12, r26
    714a:	c6 01       	movw	r24, r12
    714c:	b5 01       	movw	r22, r10
    714e:	29 ad       	ldd	r18, Y+57	; 0x39
    7150:	3a ad       	ldd	r19, Y+58	; 0x3a
    7152:	4b ad       	ldd	r20, Y+59	; 0x3b
    7154:	5c ad       	ldd	r21, Y+60	; 0x3c
    7156:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <__mulsi3>
    715a:	9b 01       	movw	r18, r22
    715c:	ac 01       	movw	r20, r24
    715e:	87 01       	movw	r16, r14
    7160:	ff 24       	eor	r15, r15
    7162:	ee 24       	eor	r14, r14
    7164:	8d a5       	ldd	r24, Y+45	; 0x2d
    7166:	9e a5       	ldd	r25, Y+46	; 0x2e
    7168:	af a5       	ldd	r26, Y+47	; 0x2f
    716a:	b8 a9       	ldd	r27, Y+48	; 0x30
    716c:	a0 70       	andi	r26, 0x00	; 0
    716e:	b0 70       	andi	r27, 0x00	; 0
    7170:	e8 2a       	or	r14, r24
    7172:	f9 2a       	or	r15, r25
    7174:	0a 2b       	or	r16, r26
    7176:	1b 2b       	or	r17, r27
    7178:	e2 16       	cp	r14, r18
    717a:	f3 06       	cpc	r15, r19
    717c:	04 07       	cpc	r16, r20
    717e:	15 07       	cpc	r17, r21
    7180:	c0 f4       	brcc	.+48     	; 0x71b2 <__udivdi3+0x2ea>
    7182:	08 94       	sec
    7184:	a1 08       	sbc	r10, r1
    7186:	b1 08       	sbc	r11, r1
    7188:	c1 08       	sbc	r12, r1
    718a:	d1 08       	sbc	r13, r1
    718c:	e2 0c       	add	r14, r2
    718e:	f3 1c       	adc	r15, r3
    7190:	04 1d       	adc	r16, r4
    7192:	15 1d       	adc	r17, r5
    7194:	e2 14       	cp	r14, r2
    7196:	f3 04       	cpc	r15, r3
    7198:	04 05       	cpc	r16, r4
    719a:	15 05       	cpc	r17, r5
    719c:	50 f0       	brcs	.+20     	; 0x71b2 <__udivdi3+0x2ea>
    719e:	e2 16       	cp	r14, r18
    71a0:	f3 06       	cpc	r15, r19
    71a2:	04 07       	cpc	r16, r20
    71a4:	15 07       	cpc	r17, r21
    71a6:	28 f4       	brcc	.+10     	; 0x71b2 <__udivdi3+0x2ea>
    71a8:	08 94       	sec
    71aa:	a1 08       	sbc	r10, r1
    71ac:	b1 08       	sbc	r11, r1
    71ae:	c1 08       	sbc	r12, r1
    71b0:	d1 08       	sbc	r13, r1
    71b2:	d3 01       	movw	r26, r6
    71b4:	99 27       	eor	r25, r25
    71b6:	88 27       	eor	r24, r24
    71b8:	86 01       	movw	r16, r12
    71ba:	75 01       	movw	r14, r10
    71bc:	e8 2a       	or	r14, r24
    71be:	f9 2a       	or	r15, r25
    71c0:	0a 2b       	or	r16, r26
    71c2:	1b 2b       	or	r17, r27
    71c4:	e9 aa       	std	Y+49, r14	; 0x31
    71c6:	fa aa       	std	Y+50, r15	; 0x32
    71c8:	0b ab       	std	Y+51, r16	; 0x33
    71ca:	1c ab       	std	Y+52, r17	; 0x34
    71cc:	cf c4       	rjmp	.+2462   	; 0x7b6c <__udivdi3+0xca4>
    71ce:	21 14       	cp	r2, r1
    71d0:	31 04       	cpc	r3, r1
    71d2:	41 04       	cpc	r4, r1
    71d4:	51 04       	cpc	r5, r1
    71d6:	71 f4       	brne	.+28     	; 0x71f4 <__udivdi3+0x32c>
    71d8:	61 e0       	ldi	r22, 0x01	; 1
    71da:	70 e0       	ldi	r23, 0x00	; 0
    71dc:	80 e0       	ldi	r24, 0x00	; 0
    71de:	90 e0       	ldi	r25, 0x00	; 0
    71e0:	20 e0       	ldi	r18, 0x00	; 0
    71e2:	30 e0       	ldi	r19, 0x00	; 0
    71e4:	40 e0       	ldi	r20, 0x00	; 0
    71e6:	50 e0       	ldi	r21, 0x00	; 0
    71e8:	0e 94 d5 45 	call	0x8baa	; 0x8baa <__udivmodsi4>
    71ec:	c9 01       	movw	r24, r18
    71ee:	da 01       	movw	r26, r20
    71f0:	1c 01       	movw	r2, r24
    71f2:	2d 01       	movw	r4, r26
    71f4:	00 e0       	ldi	r16, 0x00	; 0
    71f6:	20 16       	cp	r2, r16
    71f8:	00 e0       	ldi	r16, 0x00	; 0
    71fa:	30 06       	cpc	r3, r16
    71fc:	01 e0       	ldi	r16, 0x01	; 1
    71fe:	40 06       	cpc	r4, r16
    7200:	00 e0       	ldi	r16, 0x00	; 0
    7202:	50 06       	cpc	r5, r16
    7204:	88 f4       	brcc	.+34     	; 0x7228 <__udivdi3+0x360>
    7206:	1f ef       	ldi	r17, 0xFF	; 255
    7208:	21 16       	cp	r2, r17
    720a:	31 04       	cpc	r3, r1
    720c:	41 04       	cpc	r4, r1
    720e:	51 04       	cpc	r5, r1
    7210:	31 f0       	breq	.+12     	; 0x721e <__udivdi3+0x356>
    7212:	28 f0       	brcs	.+10     	; 0x721e <__udivdi3+0x356>
    7214:	48 e0       	ldi	r20, 0x08	; 8
    7216:	50 e0       	ldi	r21, 0x00	; 0
    7218:	60 e0       	ldi	r22, 0x00	; 0
    721a:	70 e0       	ldi	r23, 0x00	; 0
    721c:	17 c0       	rjmp	.+46     	; 0x724c <__udivdi3+0x384>
    721e:	40 e0       	ldi	r20, 0x00	; 0
    7220:	50 e0       	ldi	r21, 0x00	; 0
    7222:	60 e0       	ldi	r22, 0x00	; 0
    7224:	70 e0       	ldi	r23, 0x00	; 0
    7226:	12 c0       	rjmp	.+36     	; 0x724c <__udivdi3+0x384>
    7228:	20 e0       	ldi	r18, 0x00	; 0
    722a:	22 16       	cp	r2, r18
    722c:	20 e0       	ldi	r18, 0x00	; 0
    722e:	32 06       	cpc	r3, r18
    7230:	20 e0       	ldi	r18, 0x00	; 0
    7232:	42 06       	cpc	r4, r18
    7234:	21 e0       	ldi	r18, 0x01	; 1
    7236:	52 06       	cpc	r5, r18
    7238:	28 f0       	brcs	.+10     	; 0x7244 <__udivdi3+0x37c>
    723a:	48 e1       	ldi	r20, 0x18	; 24
    723c:	50 e0       	ldi	r21, 0x00	; 0
    723e:	60 e0       	ldi	r22, 0x00	; 0
    7240:	70 e0       	ldi	r23, 0x00	; 0
    7242:	04 c0       	rjmp	.+8      	; 0x724c <__udivdi3+0x384>
    7244:	40 e1       	ldi	r20, 0x10	; 16
    7246:	50 e0       	ldi	r21, 0x00	; 0
    7248:	60 e0       	ldi	r22, 0x00	; 0
    724a:	70 e0       	ldi	r23, 0x00	; 0
    724c:	d2 01       	movw	r26, r4
    724e:	c1 01       	movw	r24, r2
    7250:	04 2e       	mov	r0, r20
    7252:	04 c0       	rjmp	.+8      	; 0x725c <__udivdi3+0x394>
    7254:	b6 95       	lsr	r27
    7256:	a7 95       	ror	r26
    7258:	97 95       	ror	r25
    725a:	87 95       	ror	r24
    725c:	0a 94       	dec	r0
    725e:	d2 f7       	brpl	.-12     	; 0x7254 <__udivdi3+0x38c>
    7260:	86 5d       	subi	r24, 0xD6	; 214
    7262:	9f 4d       	sbci	r25, 0xDF	; 223
    7264:	dc 01       	movw	r26, r24
    7266:	2c 91       	ld	r18, X
    7268:	e0 e2       	ldi	r30, 0x20	; 32
    726a:	ee 2e       	mov	r14, r30
    726c:	f1 2c       	mov	r15, r1
    726e:	01 2d       	mov	r16, r1
    7270:	11 2d       	mov	r17, r1
    7272:	d8 01       	movw	r26, r16
    7274:	c7 01       	movw	r24, r14
    7276:	84 1b       	sub	r24, r20
    7278:	95 0b       	sbc	r25, r21
    727a:	a6 0b       	sbc	r26, r22
    727c:	b7 0b       	sbc	r27, r23
    727e:	82 1b       	sub	r24, r18
    7280:	91 09       	sbc	r25, r1
    7282:	a1 09       	sbc	r26, r1
    7284:	b1 09       	sbc	r27, r1
    7286:	00 97       	sbiw	r24, 0x00	; 0
    7288:	a1 05       	cpc	r26, r1
    728a:	b1 05       	cpc	r27, r1
    728c:	61 f4       	brne	.+24     	; 0x72a6 <__udivdi3+0x3de>
    728e:	64 01       	movw	r12, r8
    7290:	53 01       	movw	r10, r6
    7292:	a2 18       	sub	r10, r2
    7294:	b3 08       	sbc	r11, r3
    7296:	c4 08       	sbc	r12, r4
    7298:	d5 08       	sbc	r13, r5
    729a:	31 e0       	ldi	r19, 0x01	; 1
    729c:	63 2e       	mov	r6, r19
    729e:	71 2c       	mov	r7, r1
    72a0:	81 2c       	mov	r8, r1
    72a2:	91 2c       	mov	r9, r1
    72a4:	1e c1       	rjmp	.+572    	; 0x74e2 <__udivdi3+0x61a>
    72a6:	6f 96       	adiw	r28, 0x1f	; 31
    72a8:	8f af       	std	Y+63, r24	; 0x3f
    72aa:	6f 97       	sbiw	r28, 0x1f	; 31
    72ac:	08 2e       	mov	r0, r24
    72ae:	04 c0       	rjmp	.+8      	; 0x72b8 <__udivdi3+0x3f0>
    72b0:	22 0c       	add	r2, r2
    72b2:	33 1c       	adc	r3, r3
    72b4:	44 1c       	adc	r4, r4
    72b6:	55 1c       	adc	r5, r5
    72b8:	0a 94       	dec	r0
    72ba:	d2 f7       	brpl	.-12     	; 0x72b0 <__udivdi3+0x3e8>
    72bc:	ee 2d       	mov	r30, r14
    72be:	e8 1b       	sub	r30, r24
    72c0:	64 01       	movw	r12, r8
    72c2:	53 01       	movw	r10, r6
    72c4:	0e 2e       	mov	r0, r30
    72c6:	04 c0       	rjmp	.+8      	; 0x72d0 <__udivdi3+0x408>
    72c8:	d6 94       	lsr	r13
    72ca:	c7 94       	ror	r12
    72cc:	b7 94       	ror	r11
    72ce:	a7 94       	ror	r10
    72d0:	0a 94       	dec	r0
    72d2:	d2 f7       	brpl	.-12     	; 0x72c8 <__udivdi3+0x400>
    72d4:	a4 01       	movw	r20, r8
    72d6:	93 01       	movw	r18, r6
    72d8:	6f 96       	adiw	r28, 0x1f	; 31
    72da:	0f ac       	ldd	r0, Y+63	; 0x3f
    72dc:	6f 97       	sbiw	r28, 0x1f	; 31
    72de:	04 c0       	rjmp	.+8      	; 0x72e8 <__udivdi3+0x420>
    72e0:	22 0f       	add	r18, r18
    72e2:	33 1f       	adc	r19, r19
    72e4:	44 1f       	adc	r20, r20
    72e6:	55 1f       	adc	r21, r21
    72e8:	0a 94       	dec	r0
    72ea:	d2 f7       	brpl	.-12     	; 0x72e0 <__udivdi3+0x418>
    72ec:	6d a4       	ldd	r6, Y+45	; 0x2d
    72ee:	7e a4       	ldd	r7, Y+46	; 0x2e
    72f0:	8f a4       	ldd	r8, Y+47	; 0x2f
    72f2:	98 a8       	ldd	r9, Y+48	; 0x30
    72f4:	0e 2e       	mov	r0, r30
    72f6:	04 c0       	rjmp	.+8      	; 0x7300 <__udivdi3+0x438>
    72f8:	96 94       	lsr	r9
    72fa:	87 94       	ror	r8
    72fc:	77 94       	ror	r7
    72fe:	67 94       	ror	r6
    7300:	0a 94       	dec	r0
    7302:	d2 f7       	brpl	.-12     	; 0x72f8 <__udivdi3+0x430>
    7304:	84 01       	movw	r16, r8
    7306:	73 01       	movw	r14, r6
    7308:	e2 2a       	or	r14, r18
    730a:	f3 2a       	or	r15, r19
    730c:	04 2b       	or	r16, r20
    730e:	15 2b       	or	r17, r21
    7310:	e9 a6       	std	Y+41, r14	; 0x29
    7312:	fa a6       	std	Y+42, r15	; 0x2a
    7314:	0b a7       	std	Y+43, r16	; 0x2b
    7316:	1c a7       	std	Y+44, r17	; 0x2c
    7318:	32 01       	movw	r6, r4
    731a:	88 24       	eor	r8, r8
    731c:	99 24       	eor	r9, r9
    731e:	92 01       	movw	r18, r4
    7320:	81 01       	movw	r16, r2
    7322:	20 70       	andi	r18, 0x00	; 0
    7324:	30 70       	andi	r19, 0x00	; 0
    7326:	21 96       	adiw	r28, 0x01	; 1
    7328:	0c af       	std	Y+60, r16	; 0x3c
    732a:	1d af       	std	Y+61, r17	; 0x3d
    732c:	2e af       	std	Y+62, r18	; 0x3e
    732e:	3f af       	std	Y+63, r19	; 0x3f
    7330:	21 97       	sbiw	r28, 0x01	; 1
    7332:	c6 01       	movw	r24, r12
    7334:	b5 01       	movw	r22, r10
    7336:	a4 01       	movw	r20, r8
    7338:	93 01       	movw	r18, r6
    733a:	0e 94 d5 45 	call	0x8baa	; 0x8baa <__udivmodsi4>
    733e:	7b 01       	movw	r14, r22
    7340:	8c 01       	movw	r16, r24
    7342:	c6 01       	movw	r24, r12
    7344:	b5 01       	movw	r22, r10
    7346:	a4 01       	movw	r20, r8
    7348:	93 01       	movw	r18, r6
    734a:	0e 94 d5 45 	call	0x8baa	; 0x8baa <__udivmodsi4>
    734e:	c9 01       	movw	r24, r18
    7350:	da 01       	movw	r26, r20
    7352:	25 96       	adiw	r28, 0x05	; 5
    7354:	8c af       	std	Y+60, r24	; 0x3c
    7356:	9d af       	std	Y+61, r25	; 0x3d
    7358:	ae af       	std	Y+62, r26	; 0x3e
    735a:	bf af       	std	Y+63, r27	; 0x3f
    735c:	25 97       	sbiw	r28, 0x05	; 5
    735e:	bc 01       	movw	r22, r24
    7360:	cd 01       	movw	r24, r26
    7362:	21 96       	adiw	r28, 0x01	; 1
    7364:	2c ad       	ldd	r18, Y+60	; 0x3c
    7366:	3d ad       	ldd	r19, Y+61	; 0x3d
    7368:	4e ad       	ldd	r20, Y+62	; 0x3e
    736a:	5f ad       	ldd	r21, Y+63	; 0x3f
    736c:	21 97       	sbiw	r28, 0x01	; 1
    736e:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <__mulsi3>
    7372:	9b 01       	movw	r18, r22
    7374:	ac 01       	movw	r20, r24
    7376:	87 01       	movw	r16, r14
    7378:	ff 24       	eor	r15, r15
    737a:	ee 24       	eor	r14, r14
    737c:	a9 a4       	ldd	r10, Y+41	; 0x29
    737e:	ba a4       	ldd	r11, Y+42	; 0x2a
    7380:	cb a4       	ldd	r12, Y+43	; 0x2b
    7382:	dc a4       	ldd	r13, Y+44	; 0x2c
    7384:	c6 01       	movw	r24, r12
    7386:	aa 27       	eor	r26, r26
    7388:	bb 27       	eor	r27, r27
    738a:	5c 01       	movw	r10, r24
    738c:	6d 01       	movw	r12, r26
    738e:	ae 28       	or	r10, r14
    7390:	bf 28       	or	r11, r15
    7392:	c0 2a       	or	r12, r16
    7394:	d1 2a       	or	r13, r17
    7396:	a2 16       	cp	r10, r18
    7398:	b3 06       	cpc	r11, r19
    739a:	c4 06       	cpc	r12, r20
    739c:	d5 06       	cpc	r13, r21
    739e:	60 f5       	brcc	.+88     	; 0x73f8 <__udivdi3+0x530>
    73a0:	25 96       	adiw	r28, 0x05	; 5
    73a2:	6c ad       	ldd	r22, Y+60	; 0x3c
    73a4:	7d ad       	ldd	r23, Y+61	; 0x3d
    73a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    73a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    73aa:	25 97       	sbiw	r28, 0x05	; 5
    73ac:	61 50       	subi	r22, 0x01	; 1
    73ae:	70 40       	sbci	r23, 0x00	; 0
    73b0:	80 40       	sbci	r24, 0x00	; 0
    73b2:	90 40       	sbci	r25, 0x00	; 0
    73b4:	25 96       	adiw	r28, 0x05	; 5
    73b6:	6c af       	std	Y+60, r22	; 0x3c
    73b8:	7d af       	std	Y+61, r23	; 0x3d
    73ba:	8e af       	std	Y+62, r24	; 0x3e
    73bc:	9f af       	std	Y+63, r25	; 0x3f
    73be:	25 97       	sbiw	r28, 0x05	; 5
    73c0:	a2 0c       	add	r10, r2
    73c2:	b3 1c       	adc	r11, r3
    73c4:	c4 1c       	adc	r12, r4
    73c6:	d5 1c       	adc	r13, r5
    73c8:	a2 14       	cp	r10, r2
    73ca:	b3 04       	cpc	r11, r3
    73cc:	c4 04       	cpc	r12, r4
    73ce:	d5 04       	cpc	r13, r5
    73d0:	98 f0       	brcs	.+38     	; 0x73f8 <__udivdi3+0x530>
    73d2:	a2 16       	cp	r10, r18
    73d4:	b3 06       	cpc	r11, r19
    73d6:	c4 06       	cpc	r12, r20
    73d8:	d5 06       	cpc	r13, r21
    73da:	70 f4       	brcc	.+28     	; 0x73f8 <__udivdi3+0x530>
    73dc:	61 50       	subi	r22, 0x01	; 1
    73de:	70 40       	sbci	r23, 0x00	; 0
    73e0:	80 40       	sbci	r24, 0x00	; 0
    73e2:	90 40       	sbci	r25, 0x00	; 0
    73e4:	25 96       	adiw	r28, 0x05	; 5
    73e6:	6c af       	std	Y+60, r22	; 0x3c
    73e8:	7d af       	std	Y+61, r23	; 0x3d
    73ea:	8e af       	std	Y+62, r24	; 0x3e
    73ec:	9f af       	std	Y+63, r25	; 0x3f
    73ee:	25 97       	sbiw	r28, 0x05	; 5
    73f0:	a2 0c       	add	r10, r2
    73f2:	b3 1c       	adc	r11, r3
    73f4:	c4 1c       	adc	r12, r4
    73f6:	d5 1c       	adc	r13, r5
    73f8:	a2 1a       	sub	r10, r18
    73fa:	b3 0a       	sbc	r11, r19
    73fc:	c4 0a       	sbc	r12, r20
    73fe:	d5 0a       	sbc	r13, r21
    7400:	c6 01       	movw	r24, r12
    7402:	b5 01       	movw	r22, r10
    7404:	a4 01       	movw	r20, r8
    7406:	93 01       	movw	r18, r6
    7408:	0e 94 d5 45 	call	0x8baa	; 0x8baa <__udivmodsi4>
    740c:	7b 01       	movw	r14, r22
    740e:	8c 01       	movw	r16, r24
    7410:	c6 01       	movw	r24, r12
    7412:	b5 01       	movw	r22, r10
    7414:	a4 01       	movw	r20, r8
    7416:	93 01       	movw	r18, r6
    7418:	0e 94 d5 45 	call	0x8baa	; 0x8baa <__udivmodsi4>
    741c:	c9 01       	movw	r24, r18
    741e:	da 01       	movw	r26, r20
    7420:	3c 01       	movw	r6, r24
    7422:	4d 01       	movw	r8, r26
    7424:	c4 01       	movw	r24, r8
    7426:	b3 01       	movw	r22, r6
    7428:	21 96       	adiw	r28, 0x01	; 1
    742a:	2c ad       	ldd	r18, Y+60	; 0x3c
    742c:	3d ad       	ldd	r19, Y+61	; 0x3d
    742e:	4e ad       	ldd	r20, Y+62	; 0x3e
    7430:	5f ad       	ldd	r21, Y+63	; 0x3f
    7432:	21 97       	sbiw	r28, 0x01	; 1
    7434:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <__mulsi3>
    7438:	9b 01       	movw	r18, r22
    743a:	ac 01       	movw	r20, r24
    743c:	87 01       	movw	r16, r14
    743e:	ff 24       	eor	r15, r15
    7440:	ee 24       	eor	r14, r14
    7442:	89 a5       	ldd	r24, Y+41	; 0x29
    7444:	9a a5       	ldd	r25, Y+42	; 0x2a
    7446:	ab a5       	ldd	r26, Y+43	; 0x2b
    7448:	bc a5       	ldd	r27, Y+44	; 0x2c
    744a:	a0 70       	andi	r26, 0x00	; 0
    744c:	b0 70       	andi	r27, 0x00	; 0
    744e:	57 01       	movw	r10, r14
    7450:	68 01       	movw	r12, r16
    7452:	a8 2a       	or	r10, r24
    7454:	b9 2a       	or	r11, r25
    7456:	ca 2a       	or	r12, r26
    7458:	db 2a       	or	r13, r27
    745a:	a2 16       	cp	r10, r18
    745c:	b3 06       	cpc	r11, r19
    745e:	c4 06       	cpc	r12, r20
    7460:	d5 06       	cpc	r13, r21
    7462:	e0 f4       	brcc	.+56     	; 0x749c <__udivdi3+0x5d4>
    7464:	08 94       	sec
    7466:	61 08       	sbc	r6, r1
    7468:	71 08       	sbc	r7, r1
    746a:	81 08       	sbc	r8, r1
    746c:	91 08       	sbc	r9, r1
    746e:	a2 0c       	add	r10, r2
    7470:	b3 1c       	adc	r11, r3
    7472:	c4 1c       	adc	r12, r4
    7474:	d5 1c       	adc	r13, r5
    7476:	a2 14       	cp	r10, r2
    7478:	b3 04       	cpc	r11, r3
    747a:	c4 04       	cpc	r12, r4
    747c:	d5 04       	cpc	r13, r5
    747e:	70 f0       	brcs	.+28     	; 0x749c <__udivdi3+0x5d4>
    7480:	a2 16       	cp	r10, r18
    7482:	b3 06       	cpc	r11, r19
    7484:	c4 06       	cpc	r12, r20
    7486:	d5 06       	cpc	r13, r21
    7488:	48 f4       	brcc	.+18     	; 0x749c <__udivdi3+0x5d4>
    748a:	08 94       	sec
    748c:	61 08       	sbc	r6, r1
    748e:	71 08       	sbc	r7, r1
    7490:	81 08       	sbc	r8, r1
    7492:	91 08       	sbc	r9, r1
    7494:	a2 0c       	add	r10, r2
    7496:	b3 1c       	adc	r11, r3
    7498:	c4 1c       	adc	r12, r4
    749a:	d5 1c       	adc	r13, r5
    749c:	8d a5       	ldd	r24, Y+45	; 0x2d
    749e:	9e a5       	ldd	r25, Y+46	; 0x2e
    74a0:	af a5       	ldd	r26, Y+47	; 0x2f
    74a2:	b8 a9       	ldd	r27, Y+48	; 0x30
    74a4:	6f 96       	adiw	r28, 0x1f	; 31
    74a6:	0f ac       	ldd	r0, Y+63	; 0x3f
    74a8:	6f 97       	sbiw	r28, 0x1f	; 31
    74aa:	04 c0       	rjmp	.+8      	; 0x74b4 <__udivdi3+0x5ec>
    74ac:	88 0f       	add	r24, r24
    74ae:	99 1f       	adc	r25, r25
    74b0:	aa 1f       	adc	r26, r26
    74b2:	bb 1f       	adc	r27, r27
    74b4:	0a 94       	dec	r0
    74b6:	d2 f7       	brpl	.-12     	; 0x74ac <__udivdi3+0x5e4>
    74b8:	8d a7       	std	Y+45, r24	; 0x2d
    74ba:	9e a7       	std	Y+46, r25	; 0x2e
    74bc:	af a7       	std	Y+47, r26	; 0x2f
    74be:	b8 ab       	std	Y+48, r27	; 0x30
    74c0:	a2 1a       	sub	r10, r18
    74c2:	b3 0a       	sbc	r11, r19
    74c4:	c4 0a       	sbc	r12, r20
    74c6:	d5 0a       	sbc	r13, r21
    74c8:	25 96       	adiw	r28, 0x05	; 5
    74ca:	ec ac       	ldd	r14, Y+60	; 0x3c
    74cc:	fd ac       	ldd	r15, Y+61	; 0x3d
    74ce:	0e ad       	ldd	r16, Y+62	; 0x3e
    74d0:	1f ad       	ldd	r17, Y+63	; 0x3f
    74d2:	25 97       	sbiw	r28, 0x05	; 5
    74d4:	d7 01       	movw	r26, r14
    74d6:	99 27       	eor	r25, r25
    74d8:	88 27       	eor	r24, r24
    74da:	68 2a       	or	r6, r24
    74dc:	79 2a       	or	r7, r25
    74de:	8a 2a       	or	r8, r26
    74e0:	9b 2a       	or	r9, r27
    74e2:	82 01       	movw	r16, r4
    74e4:	22 27       	eor	r18, r18
    74e6:	33 27       	eor	r19, r19
    74e8:	29 96       	adiw	r28, 0x09	; 9
    74ea:	0c af       	std	Y+60, r16	; 0x3c
    74ec:	1d af       	std	Y+61, r17	; 0x3d
    74ee:	2e af       	std	Y+62, r18	; 0x3e
    74f0:	3f af       	std	Y+63, r19	; 0x3f
    74f2:	29 97       	sbiw	r28, 0x09	; 9
    74f4:	a2 01       	movw	r20, r4
    74f6:	91 01       	movw	r18, r2
    74f8:	40 70       	andi	r20, 0x00	; 0
    74fa:	50 70       	andi	r21, 0x00	; 0
    74fc:	2d 96       	adiw	r28, 0x0d	; 13
    74fe:	2c af       	std	Y+60, r18	; 0x3c
    7500:	3d af       	std	Y+61, r19	; 0x3d
    7502:	4e af       	std	Y+62, r20	; 0x3e
    7504:	5f af       	std	Y+63, r21	; 0x3f
    7506:	2d 97       	sbiw	r28, 0x0d	; 13
    7508:	c6 01       	movw	r24, r12
    750a:	b5 01       	movw	r22, r10
    750c:	29 96       	adiw	r28, 0x09	; 9
    750e:	2c ad       	ldd	r18, Y+60	; 0x3c
    7510:	3d ad       	ldd	r19, Y+61	; 0x3d
    7512:	4e ad       	ldd	r20, Y+62	; 0x3e
    7514:	5f ad       	ldd	r21, Y+63	; 0x3f
    7516:	29 97       	sbiw	r28, 0x09	; 9
    7518:	0e 94 d5 45 	call	0x8baa	; 0x8baa <__udivmodsi4>
    751c:	7b 01       	movw	r14, r22
    751e:	8c 01       	movw	r16, r24
    7520:	c6 01       	movw	r24, r12
    7522:	b5 01       	movw	r22, r10
    7524:	29 96       	adiw	r28, 0x09	; 9
    7526:	2c ad       	ldd	r18, Y+60	; 0x3c
    7528:	3d ad       	ldd	r19, Y+61	; 0x3d
    752a:	4e ad       	ldd	r20, Y+62	; 0x3e
    752c:	5f ad       	ldd	r21, Y+63	; 0x3f
    752e:	29 97       	sbiw	r28, 0x09	; 9
    7530:	0e 94 d5 45 	call	0x8baa	; 0x8baa <__udivmodsi4>
    7534:	c9 01       	movw	r24, r18
    7536:	da 01       	movw	r26, r20
    7538:	61 96       	adiw	r28, 0x11	; 17
    753a:	8c af       	std	Y+60, r24	; 0x3c
    753c:	9d af       	std	Y+61, r25	; 0x3d
    753e:	ae af       	std	Y+62, r26	; 0x3e
    7540:	bf af       	std	Y+63, r27	; 0x3f
    7542:	61 97       	sbiw	r28, 0x11	; 17
    7544:	bc 01       	movw	r22, r24
    7546:	cd 01       	movw	r24, r26
    7548:	2d 96       	adiw	r28, 0x0d	; 13
    754a:	2c ad       	ldd	r18, Y+60	; 0x3c
    754c:	3d ad       	ldd	r19, Y+61	; 0x3d
    754e:	4e ad       	ldd	r20, Y+62	; 0x3e
    7550:	5f ad       	ldd	r21, Y+63	; 0x3f
    7552:	2d 97       	sbiw	r28, 0x0d	; 13
    7554:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <__mulsi3>
    7558:	9b 01       	movw	r18, r22
    755a:	ac 01       	movw	r20, r24
    755c:	87 01       	movw	r16, r14
    755e:	ff 24       	eor	r15, r15
    7560:	ee 24       	eor	r14, r14
    7562:	ad a4       	ldd	r10, Y+45	; 0x2d
    7564:	be a4       	ldd	r11, Y+46	; 0x2e
    7566:	cf a4       	ldd	r12, Y+47	; 0x2f
    7568:	d8 a8       	ldd	r13, Y+48	; 0x30
    756a:	c6 01       	movw	r24, r12
    756c:	aa 27       	eor	r26, r26
    756e:	bb 27       	eor	r27, r27
    7570:	57 01       	movw	r10, r14
    7572:	68 01       	movw	r12, r16
    7574:	a8 2a       	or	r10, r24
    7576:	b9 2a       	or	r11, r25
    7578:	ca 2a       	or	r12, r26
    757a:	db 2a       	or	r13, r27
    757c:	a2 16       	cp	r10, r18
    757e:	b3 06       	cpc	r11, r19
    7580:	c4 06       	cpc	r12, r20
    7582:	d5 06       	cpc	r13, r21
    7584:	60 f5       	brcc	.+88     	; 0x75de <__udivdi3+0x716>
    7586:	61 96       	adiw	r28, 0x11	; 17
    7588:	6c ad       	ldd	r22, Y+60	; 0x3c
    758a:	7d ad       	ldd	r23, Y+61	; 0x3d
    758c:	8e ad       	ldd	r24, Y+62	; 0x3e
    758e:	9f ad       	ldd	r25, Y+63	; 0x3f
    7590:	61 97       	sbiw	r28, 0x11	; 17
    7592:	61 50       	subi	r22, 0x01	; 1
    7594:	70 40       	sbci	r23, 0x00	; 0
    7596:	80 40       	sbci	r24, 0x00	; 0
    7598:	90 40       	sbci	r25, 0x00	; 0
    759a:	61 96       	adiw	r28, 0x11	; 17
    759c:	6c af       	std	Y+60, r22	; 0x3c
    759e:	7d af       	std	Y+61, r23	; 0x3d
    75a0:	8e af       	std	Y+62, r24	; 0x3e
    75a2:	9f af       	std	Y+63, r25	; 0x3f
    75a4:	61 97       	sbiw	r28, 0x11	; 17
    75a6:	a2 0c       	add	r10, r2
    75a8:	b3 1c       	adc	r11, r3
    75aa:	c4 1c       	adc	r12, r4
    75ac:	d5 1c       	adc	r13, r5
    75ae:	a2 14       	cp	r10, r2
    75b0:	b3 04       	cpc	r11, r3
    75b2:	c4 04       	cpc	r12, r4
    75b4:	d5 04       	cpc	r13, r5
    75b6:	98 f0       	brcs	.+38     	; 0x75de <__udivdi3+0x716>
    75b8:	a2 16       	cp	r10, r18
    75ba:	b3 06       	cpc	r11, r19
    75bc:	c4 06       	cpc	r12, r20
    75be:	d5 06       	cpc	r13, r21
    75c0:	70 f4       	brcc	.+28     	; 0x75de <__udivdi3+0x716>
    75c2:	61 50       	subi	r22, 0x01	; 1
    75c4:	70 40       	sbci	r23, 0x00	; 0
    75c6:	80 40       	sbci	r24, 0x00	; 0
    75c8:	90 40       	sbci	r25, 0x00	; 0
    75ca:	61 96       	adiw	r28, 0x11	; 17
    75cc:	6c af       	std	Y+60, r22	; 0x3c
    75ce:	7d af       	std	Y+61, r23	; 0x3d
    75d0:	8e af       	std	Y+62, r24	; 0x3e
    75d2:	9f af       	std	Y+63, r25	; 0x3f
    75d4:	61 97       	sbiw	r28, 0x11	; 17
    75d6:	a2 0c       	add	r10, r2
    75d8:	b3 1c       	adc	r11, r3
    75da:	c4 1c       	adc	r12, r4
    75dc:	d5 1c       	adc	r13, r5
    75de:	a2 1a       	sub	r10, r18
    75e0:	b3 0a       	sbc	r11, r19
    75e2:	c4 0a       	sbc	r12, r20
    75e4:	d5 0a       	sbc	r13, r21
    75e6:	c6 01       	movw	r24, r12
    75e8:	b5 01       	movw	r22, r10
    75ea:	29 96       	adiw	r28, 0x09	; 9
    75ec:	2c ad       	ldd	r18, Y+60	; 0x3c
    75ee:	3d ad       	ldd	r19, Y+61	; 0x3d
    75f0:	4e ad       	ldd	r20, Y+62	; 0x3e
    75f2:	5f ad       	ldd	r21, Y+63	; 0x3f
    75f4:	29 97       	sbiw	r28, 0x09	; 9
    75f6:	0e 94 d5 45 	call	0x8baa	; 0x8baa <__udivmodsi4>
    75fa:	7b 01       	movw	r14, r22
    75fc:	8c 01       	movw	r16, r24
    75fe:	c6 01       	movw	r24, r12
    7600:	b5 01       	movw	r22, r10
    7602:	29 96       	adiw	r28, 0x09	; 9
    7604:	2c ad       	ldd	r18, Y+60	; 0x3c
    7606:	3d ad       	ldd	r19, Y+61	; 0x3d
    7608:	4e ad       	ldd	r20, Y+62	; 0x3e
    760a:	5f ad       	ldd	r21, Y+63	; 0x3f
    760c:	29 97       	sbiw	r28, 0x09	; 9
    760e:	0e 94 d5 45 	call	0x8baa	; 0x8baa <__udivmodsi4>
    7612:	c9 01       	movw	r24, r18
    7614:	da 01       	movw	r26, r20
    7616:	5c 01       	movw	r10, r24
    7618:	6d 01       	movw	r12, r26
    761a:	c6 01       	movw	r24, r12
    761c:	b5 01       	movw	r22, r10
    761e:	2d 96       	adiw	r28, 0x0d	; 13
    7620:	2c ad       	ldd	r18, Y+60	; 0x3c
    7622:	3d ad       	ldd	r19, Y+61	; 0x3d
    7624:	4e ad       	ldd	r20, Y+62	; 0x3e
    7626:	5f ad       	ldd	r21, Y+63	; 0x3f
    7628:	2d 97       	sbiw	r28, 0x0d	; 13
    762a:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <__mulsi3>
    762e:	9b 01       	movw	r18, r22
    7630:	ac 01       	movw	r20, r24
    7632:	87 01       	movw	r16, r14
    7634:	ff 24       	eor	r15, r15
    7636:	ee 24       	eor	r14, r14
    7638:	8d a5       	ldd	r24, Y+45	; 0x2d
    763a:	9e a5       	ldd	r25, Y+46	; 0x2e
    763c:	af a5       	ldd	r26, Y+47	; 0x2f
    763e:	b8 a9       	ldd	r27, Y+48	; 0x30
    7640:	a0 70       	andi	r26, 0x00	; 0
    7642:	b0 70       	andi	r27, 0x00	; 0
    7644:	e8 2a       	or	r14, r24
    7646:	f9 2a       	or	r15, r25
    7648:	0a 2b       	or	r16, r26
    764a:	1b 2b       	or	r17, r27
    764c:	e2 16       	cp	r14, r18
    764e:	f3 06       	cpc	r15, r19
    7650:	04 07       	cpc	r16, r20
    7652:	15 07       	cpc	r17, r21
    7654:	c0 f4       	brcc	.+48     	; 0x7686 <__udivdi3+0x7be>
    7656:	08 94       	sec
    7658:	a1 08       	sbc	r10, r1
    765a:	b1 08       	sbc	r11, r1
    765c:	c1 08       	sbc	r12, r1
    765e:	d1 08       	sbc	r13, r1
    7660:	e2 0c       	add	r14, r2
    7662:	f3 1c       	adc	r15, r3
    7664:	04 1d       	adc	r16, r4
    7666:	15 1d       	adc	r17, r5
    7668:	e2 14       	cp	r14, r2
    766a:	f3 04       	cpc	r15, r3
    766c:	04 05       	cpc	r16, r4
    766e:	15 05       	cpc	r17, r5
    7670:	50 f0       	brcs	.+20     	; 0x7686 <__udivdi3+0x7be>
    7672:	e2 16       	cp	r14, r18
    7674:	f3 06       	cpc	r15, r19
    7676:	04 07       	cpc	r16, r20
    7678:	15 07       	cpc	r17, r21
    767a:	28 f4       	brcc	.+10     	; 0x7686 <__udivdi3+0x7be>
    767c:	08 94       	sec
    767e:	a1 08       	sbc	r10, r1
    7680:	b1 08       	sbc	r11, r1
    7682:	c1 08       	sbc	r12, r1
    7684:	d1 08       	sbc	r13, r1
    7686:	61 96       	adiw	r28, 0x11	; 17
    7688:	ec ac       	ldd	r14, Y+60	; 0x3c
    768a:	fd ac       	ldd	r15, Y+61	; 0x3d
    768c:	0e ad       	ldd	r16, Y+62	; 0x3e
    768e:	1f ad       	ldd	r17, Y+63	; 0x3f
    7690:	61 97       	sbiw	r28, 0x11	; 17
    7692:	d7 01       	movw	r26, r14
    7694:	99 27       	eor	r25, r25
    7696:	88 27       	eor	r24, r24
    7698:	96 01       	movw	r18, r12
    769a:	85 01       	movw	r16, r10
    769c:	08 2b       	or	r16, r24
    769e:	19 2b       	or	r17, r25
    76a0:	2a 2b       	or	r18, r26
    76a2:	3b 2b       	or	r19, r27
    76a4:	09 ab       	std	Y+49, r16	; 0x31
    76a6:	1a ab       	std	Y+50, r17	; 0x32
    76a8:	2b ab       	std	Y+51, r18	; 0x33
    76aa:	3c ab       	std	Y+52, r19	; 0x34
    76ac:	62 c2       	rjmp	.+1220   	; 0x7b72 <__udivdi3+0xcaa>
    76ae:	6e 14       	cp	r6, r14
    76b0:	7f 04       	cpc	r7, r15
    76b2:	80 06       	cpc	r8, r16
    76b4:	91 06       	cpc	r9, r17
    76b6:	08 f4       	brcc	.+2      	; 0x76ba <__udivdi3+0x7f2>
    76b8:	51 c2       	rjmp	.+1186   	; 0x7b5c <__udivdi3+0xc94>
    76ba:	20 e0       	ldi	r18, 0x00	; 0
    76bc:	e2 16       	cp	r14, r18
    76be:	20 e0       	ldi	r18, 0x00	; 0
    76c0:	f2 06       	cpc	r15, r18
    76c2:	21 e0       	ldi	r18, 0x01	; 1
    76c4:	02 07       	cpc	r16, r18
    76c6:	20 e0       	ldi	r18, 0x00	; 0
    76c8:	12 07       	cpc	r17, r18
    76ca:	88 f4       	brcc	.+34     	; 0x76ee <__udivdi3+0x826>
    76cc:	3f ef       	ldi	r19, 0xFF	; 255
    76ce:	e3 16       	cp	r14, r19
    76d0:	f1 04       	cpc	r15, r1
    76d2:	01 05       	cpc	r16, r1
    76d4:	11 05       	cpc	r17, r1
    76d6:	31 f0       	breq	.+12     	; 0x76e4 <__udivdi3+0x81c>
    76d8:	28 f0       	brcs	.+10     	; 0x76e4 <__udivdi3+0x81c>
    76da:	48 e0       	ldi	r20, 0x08	; 8
    76dc:	50 e0       	ldi	r21, 0x00	; 0
    76de:	60 e0       	ldi	r22, 0x00	; 0
    76e0:	70 e0       	ldi	r23, 0x00	; 0
    76e2:	17 c0       	rjmp	.+46     	; 0x7712 <__udivdi3+0x84a>
    76e4:	40 e0       	ldi	r20, 0x00	; 0
    76e6:	50 e0       	ldi	r21, 0x00	; 0
    76e8:	60 e0       	ldi	r22, 0x00	; 0
    76ea:	70 e0       	ldi	r23, 0x00	; 0
    76ec:	12 c0       	rjmp	.+36     	; 0x7712 <__udivdi3+0x84a>
    76ee:	40 e0       	ldi	r20, 0x00	; 0
    76f0:	e4 16       	cp	r14, r20
    76f2:	40 e0       	ldi	r20, 0x00	; 0
    76f4:	f4 06       	cpc	r15, r20
    76f6:	40 e0       	ldi	r20, 0x00	; 0
    76f8:	04 07       	cpc	r16, r20
    76fa:	41 e0       	ldi	r20, 0x01	; 1
    76fc:	14 07       	cpc	r17, r20
    76fe:	28 f0       	brcs	.+10     	; 0x770a <__udivdi3+0x842>
    7700:	48 e1       	ldi	r20, 0x18	; 24
    7702:	50 e0       	ldi	r21, 0x00	; 0
    7704:	60 e0       	ldi	r22, 0x00	; 0
    7706:	70 e0       	ldi	r23, 0x00	; 0
    7708:	04 c0       	rjmp	.+8      	; 0x7712 <__udivdi3+0x84a>
    770a:	40 e1       	ldi	r20, 0x10	; 16
    770c:	50 e0       	ldi	r21, 0x00	; 0
    770e:	60 e0       	ldi	r22, 0x00	; 0
    7710:	70 e0       	ldi	r23, 0x00	; 0
    7712:	d8 01       	movw	r26, r16
    7714:	c7 01       	movw	r24, r14
    7716:	04 2e       	mov	r0, r20
    7718:	04 c0       	rjmp	.+8      	; 0x7722 <__udivdi3+0x85a>
    771a:	b6 95       	lsr	r27
    771c:	a7 95       	ror	r26
    771e:	97 95       	ror	r25
    7720:	87 95       	ror	r24
    7722:	0a 94       	dec	r0
    7724:	d2 f7       	brpl	.-12     	; 0x771a <__udivdi3+0x852>
    7726:	86 5d       	subi	r24, 0xD6	; 214
    7728:	9f 4d       	sbci	r25, 0xDF	; 223
    772a:	dc 01       	movw	r26, r24
    772c:	2c 91       	ld	r18, X
    772e:	30 e2       	ldi	r19, 0x20	; 32
    7730:	a3 2e       	mov	r10, r19
    7732:	b1 2c       	mov	r11, r1
    7734:	c1 2c       	mov	r12, r1
    7736:	d1 2c       	mov	r13, r1
    7738:	d6 01       	movw	r26, r12
    773a:	c5 01       	movw	r24, r10
    773c:	84 1b       	sub	r24, r20
    773e:	95 0b       	sbc	r25, r21
    7740:	a6 0b       	sbc	r26, r22
    7742:	b7 0b       	sbc	r27, r23
    7744:	82 1b       	sub	r24, r18
    7746:	91 09       	sbc	r25, r1
    7748:	a1 09       	sbc	r26, r1
    774a:	b1 09       	sbc	r27, r1
    774c:	00 97       	sbiw	r24, 0x00	; 0
    774e:	a1 05       	cpc	r26, r1
    7750:	b1 05       	cpc	r27, r1
    7752:	89 f4       	brne	.+34     	; 0x7776 <__udivdi3+0x8ae>
    7754:	e6 14       	cp	r14, r6
    7756:	f7 04       	cpc	r15, r7
    7758:	08 05       	cpc	r16, r8
    775a:	19 05       	cpc	r17, r9
    775c:	08 f4       	brcc	.+2      	; 0x7760 <__udivdi3+0x898>
    775e:	f2 c1       	rjmp	.+996    	; 0x7b44 <__udivdi3+0xc7c>
    7760:	6d a4       	ldd	r6, Y+45	; 0x2d
    7762:	7e a4       	ldd	r7, Y+46	; 0x2e
    7764:	8f a4       	ldd	r8, Y+47	; 0x2f
    7766:	98 a8       	ldd	r9, Y+48	; 0x30
    7768:	62 14       	cp	r6, r2
    776a:	73 04       	cpc	r7, r3
    776c:	84 04       	cpc	r8, r4
    776e:	95 04       	cpc	r9, r5
    7770:	08 f0       	brcs	.+2      	; 0x7774 <__udivdi3+0x8ac>
    7772:	e8 c1       	rjmp	.+976    	; 0x7b44 <__udivdi3+0xc7c>
    7774:	f3 c1       	rjmp	.+998    	; 0x7b5c <__udivdi3+0xc94>
    7776:	6e 96       	adiw	r28, 0x1e	; 30
    7778:	8f af       	std	Y+63, r24	; 0x3f
    777a:	6e 97       	sbiw	r28, 0x1e	; 30
    777c:	08 2e       	mov	r0, r24
    777e:	04 c0       	rjmp	.+8      	; 0x7788 <__udivdi3+0x8c0>
    7780:	ee 0c       	add	r14, r14
    7782:	ff 1c       	adc	r15, r15
    7784:	00 1f       	adc	r16, r16
    7786:	11 1f       	adc	r17, r17
    7788:	0a 94       	dec	r0
    778a:	d2 f7       	brpl	.-12     	; 0x7780 <__udivdi3+0x8b8>
    778c:	6a 2d       	mov	r22, r10
    778e:	68 1b       	sub	r22, r24
    7790:	d2 01       	movw	r26, r4
    7792:	c1 01       	movw	r24, r2
    7794:	06 2e       	mov	r0, r22
    7796:	04 c0       	rjmp	.+8      	; 0x77a0 <__udivdi3+0x8d8>
    7798:	b6 95       	lsr	r27
    779a:	a7 95       	ror	r26
    779c:	97 95       	ror	r25
    779e:	87 95       	ror	r24
    77a0:	0a 94       	dec	r0
    77a2:	d2 f7       	brpl	.-12     	; 0x7798 <__udivdi3+0x8d0>
    77a4:	5c 01       	movw	r10, r24
    77a6:	6d 01       	movw	r12, r26
    77a8:	ae 28       	or	r10, r14
    77aa:	bf 28       	or	r11, r15
    77ac:	c0 2a       	or	r12, r16
    77ae:	d1 2a       	or	r13, r17
    77b0:	ad a2       	std	Y+37, r10	; 0x25
    77b2:	be a2       	std	Y+38, r11	; 0x26
    77b4:	cf a2       	std	Y+39, r12	; 0x27
    77b6:	d8 a6       	std	Y+40, r13	; 0x28
    77b8:	72 01       	movw	r14, r4
    77ba:	61 01       	movw	r12, r2
    77bc:	6e 96       	adiw	r28, 0x1e	; 30
    77be:	0f ac       	ldd	r0, Y+63	; 0x3f
    77c0:	6e 97       	sbiw	r28, 0x1e	; 30
    77c2:	04 c0       	rjmp	.+8      	; 0x77cc <__udivdi3+0x904>
    77c4:	cc 0c       	add	r12, r12
    77c6:	dd 1c       	adc	r13, r13
    77c8:	ee 1c       	adc	r14, r14
    77ca:	ff 1c       	adc	r15, r15
    77cc:	0a 94       	dec	r0
    77ce:	d2 f7       	brpl	.-12     	; 0x77c4 <__udivdi3+0x8fc>
    77d0:	c9 a2       	std	Y+33, r12	; 0x21
    77d2:	da a2       	std	Y+34, r13	; 0x22
    77d4:	eb a2       	std	Y+35, r14	; 0x23
    77d6:	fc a2       	std	Y+36, r15	; 0x24
    77d8:	64 01       	movw	r12, r8
    77da:	53 01       	movw	r10, r6
    77dc:	06 2e       	mov	r0, r22
    77de:	04 c0       	rjmp	.+8      	; 0x77e8 <__udivdi3+0x920>
    77e0:	d6 94       	lsr	r13
    77e2:	c7 94       	ror	r12
    77e4:	b7 94       	ror	r11
    77e6:	a7 94       	ror	r10
    77e8:	0a 94       	dec	r0
    77ea:	d2 f7       	brpl	.-12     	; 0x77e0 <__udivdi3+0x918>
    77ec:	d4 01       	movw	r26, r8
    77ee:	c3 01       	movw	r24, r6
    77f0:	6e 96       	adiw	r28, 0x1e	; 30
    77f2:	0f ac       	ldd	r0, Y+63	; 0x3f
    77f4:	6e 97       	sbiw	r28, 0x1e	; 30
    77f6:	04 c0       	rjmp	.+8      	; 0x7800 <__udivdi3+0x938>
    77f8:	88 0f       	add	r24, r24
    77fa:	99 1f       	adc	r25, r25
    77fc:	aa 1f       	adc	r26, r26
    77fe:	bb 1f       	adc	r27, r27
    7800:	0a 94       	dec	r0
    7802:	d2 f7       	brpl	.-12     	; 0x77f8 <__udivdi3+0x930>
    7804:	ed a4       	ldd	r14, Y+45	; 0x2d
    7806:	fe a4       	ldd	r15, Y+46	; 0x2e
    7808:	0f a5       	ldd	r16, Y+47	; 0x2f
    780a:	18 a9       	ldd	r17, Y+48	; 0x30
    780c:	04 c0       	rjmp	.+8      	; 0x7816 <__udivdi3+0x94e>
    780e:	16 95       	lsr	r17
    7810:	07 95       	ror	r16
    7812:	f7 94       	ror	r15
    7814:	e7 94       	ror	r14
    7816:	6a 95       	dec	r22
    7818:	d2 f7       	brpl	.-12     	; 0x780e <__udivdi3+0x946>
    781a:	37 01       	movw	r6, r14
    781c:	48 01       	movw	r8, r16
    781e:	68 2a       	or	r6, r24
    7820:	79 2a       	or	r7, r25
    7822:	8a 2a       	or	r8, r26
    7824:	9b 2a       	or	r9, r27
    7826:	6d 8e       	std	Y+29, r6	; 0x1d
    7828:	7e 8e       	std	Y+30, r7	; 0x1e
    782a:	8f 8e       	std	Y+31, r8	; 0x1f
    782c:	98 a2       	std	Y+32, r9	; 0x20
    782e:	ed a0       	ldd	r14, Y+37	; 0x25
    7830:	fe a0       	ldd	r15, Y+38	; 0x26
    7832:	0f a1       	ldd	r16, Y+39	; 0x27
    7834:	18 a5       	ldd	r17, Y+40	; 0x28
    7836:	38 01       	movw	r6, r16
    7838:	88 24       	eor	r8, r8
    783a:	99 24       	eor	r9, r9
    783c:	98 01       	movw	r18, r16
    783e:	87 01       	movw	r16, r14
    7840:	20 70       	andi	r18, 0x00	; 0
    7842:	30 70       	andi	r19, 0x00	; 0
    7844:	65 96       	adiw	r28, 0x15	; 21
    7846:	0c af       	std	Y+60, r16	; 0x3c
    7848:	1d af       	std	Y+61, r17	; 0x3d
    784a:	2e af       	std	Y+62, r18	; 0x3e
    784c:	3f af       	std	Y+63, r19	; 0x3f
    784e:	65 97       	sbiw	r28, 0x15	; 21
    7850:	c6 01       	movw	r24, r12
    7852:	b5 01       	movw	r22, r10
    7854:	a4 01       	movw	r20, r8
    7856:	93 01       	movw	r18, r6
    7858:	0e 94 d5 45 	call	0x8baa	; 0x8baa <__udivmodsi4>
    785c:	7b 01       	movw	r14, r22
    785e:	8c 01       	movw	r16, r24
    7860:	c6 01       	movw	r24, r12
    7862:	b5 01       	movw	r22, r10
    7864:	a4 01       	movw	r20, r8
    7866:	93 01       	movw	r18, r6
    7868:	0e 94 d5 45 	call	0x8baa	; 0x8baa <__udivmodsi4>
    786c:	c9 01       	movw	r24, r18
    786e:	da 01       	movw	r26, r20
    7870:	1c 01       	movw	r2, r24
    7872:	2d 01       	movw	r4, r26
    7874:	c2 01       	movw	r24, r4
    7876:	b1 01       	movw	r22, r2
    7878:	65 96       	adiw	r28, 0x15	; 21
    787a:	2c ad       	ldd	r18, Y+60	; 0x3c
    787c:	3d ad       	ldd	r19, Y+61	; 0x3d
    787e:	4e ad       	ldd	r20, Y+62	; 0x3e
    7880:	5f ad       	ldd	r21, Y+63	; 0x3f
    7882:	65 97       	sbiw	r28, 0x15	; 21
    7884:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <__mulsi3>
    7888:	9b 01       	movw	r18, r22
    788a:	ac 01       	movw	r20, r24
    788c:	87 01       	movw	r16, r14
    788e:	ff 24       	eor	r15, r15
    7890:	ee 24       	eor	r14, r14
    7892:	ad 8c       	ldd	r10, Y+29	; 0x1d
    7894:	be 8c       	ldd	r11, Y+30	; 0x1e
    7896:	cf 8c       	ldd	r12, Y+31	; 0x1f
    7898:	d8 a0       	ldd	r13, Y+32	; 0x20
    789a:	c6 01       	movw	r24, r12
    789c:	aa 27       	eor	r26, r26
    789e:	bb 27       	eor	r27, r27
    78a0:	57 01       	movw	r10, r14
    78a2:	68 01       	movw	r12, r16
    78a4:	a8 2a       	or	r10, r24
    78a6:	b9 2a       	or	r11, r25
    78a8:	ca 2a       	or	r12, r26
    78aa:	db 2a       	or	r13, r27
    78ac:	a2 16       	cp	r10, r18
    78ae:	b3 06       	cpc	r11, r19
    78b0:	c4 06       	cpc	r12, r20
    78b2:	d5 06       	cpc	r13, r21
    78b4:	00 f5       	brcc	.+64     	; 0x78f6 <__udivdi3+0xa2e>
    78b6:	08 94       	sec
    78b8:	21 08       	sbc	r2, r1
    78ba:	31 08       	sbc	r3, r1
    78bc:	41 08       	sbc	r4, r1
    78be:	51 08       	sbc	r5, r1
    78c0:	ed a0       	ldd	r14, Y+37	; 0x25
    78c2:	fe a0       	ldd	r15, Y+38	; 0x26
    78c4:	0f a1       	ldd	r16, Y+39	; 0x27
    78c6:	18 a5       	ldd	r17, Y+40	; 0x28
    78c8:	ae 0c       	add	r10, r14
    78ca:	bf 1c       	adc	r11, r15
    78cc:	c0 1e       	adc	r12, r16
    78ce:	d1 1e       	adc	r13, r17
    78d0:	ae 14       	cp	r10, r14
    78d2:	bf 04       	cpc	r11, r15
    78d4:	c0 06       	cpc	r12, r16
    78d6:	d1 06       	cpc	r13, r17
    78d8:	70 f0       	brcs	.+28     	; 0x78f6 <__udivdi3+0xa2e>
    78da:	a2 16       	cp	r10, r18
    78dc:	b3 06       	cpc	r11, r19
    78de:	c4 06       	cpc	r12, r20
    78e0:	d5 06       	cpc	r13, r21
    78e2:	48 f4       	brcc	.+18     	; 0x78f6 <__udivdi3+0xa2e>
    78e4:	08 94       	sec
    78e6:	21 08       	sbc	r2, r1
    78e8:	31 08       	sbc	r3, r1
    78ea:	41 08       	sbc	r4, r1
    78ec:	51 08       	sbc	r5, r1
    78ee:	ae 0c       	add	r10, r14
    78f0:	bf 1c       	adc	r11, r15
    78f2:	c0 1e       	adc	r12, r16
    78f4:	d1 1e       	adc	r13, r17
    78f6:	a2 1a       	sub	r10, r18
    78f8:	b3 0a       	sbc	r11, r19
    78fa:	c4 0a       	sbc	r12, r20
    78fc:	d5 0a       	sbc	r13, r21
    78fe:	c6 01       	movw	r24, r12
    7900:	b5 01       	movw	r22, r10
    7902:	a4 01       	movw	r20, r8
    7904:	93 01       	movw	r18, r6
    7906:	0e 94 d5 45 	call	0x8baa	; 0x8baa <__udivmodsi4>
    790a:	7b 01       	movw	r14, r22
    790c:	8c 01       	movw	r16, r24
    790e:	c6 01       	movw	r24, r12
    7910:	b5 01       	movw	r22, r10
    7912:	a4 01       	movw	r20, r8
    7914:	93 01       	movw	r18, r6
    7916:	0e 94 d5 45 	call	0x8baa	; 0x8baa <__udivmodsi4>
    791a:	c9 01       	movw	r24, r18
    791c:	da 01       	movw	r26, r20
    791e:	3c 01       	movw	r6, r24
    7920:	4d 01       	movw	r8, r26
    7922:	c4 01       	movw	r24, r8
    7924:	b3 01       	movw	r22, r6
    7926:	65 96       	adiw	r28, 0x15	; 21
    7928:	2c ad       	ldd	r18, Y+60	; 0x3c
    792a:	3d ad       	ldd	r19, Y+61	; 0x3d
    792c:	4e ad       	ldd	r20, Y+62	; 0x3e
    792e:	5f ad       	ldd	r21, Y+63	; 0x3f
    7930:	65 97       	sbiw	r28, 0x15	; 21
    7932:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <__mulsi3>
    7936:	9b 01       	movw	r18, r22
    7938:	ac 01       	movw	r20, r24
    793a:	87 01       	movw	r16, r14
    793c:	ff 24       	eor	r15, r15
    793e:	ee 24       	eor	r14, r14
    7940:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7942:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7944:	af 8d       	ldd	r26, Y+31	; 0x1f
    7946:	b8 a1       	ldd	r27, Y+32	; 0x20
    7948:	a0 70       	andi	r26, 0x00	; 0
    794a:	b0 70       	andi	r27, 0x00	; 0
    794c:	57 01       	movw	r10, r14
    794e:	68 01       	movw	r12, r16
    7950:	a8 2a       	or	r10, r24
    7952:	b9 2a       	or	r11, r25
    7954:	ca 2a       	or	r12, r26
    7956:	db 2a       	or	r13, r27
    7958:	a2 16       	cp	r10, r18
    795a:	b3 06       	cpc	r11, r19
    795c:	c4 06       	cpc	r12, r20
    795e:	d5 06       	cpc	r13, r21
    7960:	00 f5       	brcc	.+64     	; 0x79a2 <__udivdi3+0xada>
    7962:	08 94       	sec
    7964:	61 08       	sbc	r6, r1
    7966:	71 08       	sbc	r7, r1
    7968:	81 08       	sbc	r8, r1
    796a:	91 08       	sbc	r9, r1
    796c:	6d a1       	ldd	r22, Y+37	; 0x25
    796e:	7e a1       	ldd	r23, Y+38	; 0x26
    7970:	8f a1       	ldd	r24, Y+39	; 0x27
    7972:	98 a5       	ldd	r25, Y+40	; 0x28
    7974:	a6 0e       	add	r10, r22
    7976:	b7 1e       	adc	r11, r23
    7978:	c8 1e       	adc	r12, r24
    797a:	d9 1e       	adc	r13, r25
    797c:	a6 16       	cp	r10, r22
    797e:	b7 06       	cpc	r11, r23
    7980:	c8 06       	cpc	r12, r24
    7982:	d9 06       	cpc	r13, r25
    7984:	70 f0       	brcs	.+28     	; 0x79a2 <__udivdi3+0xada>
    7986:	a2 16       	cp	r10, r18
    7988:	b3 06       	cpc	r11, r19
    798a:	c4 06       	cpc	r12, r20
    798c:	d5 06       	cpc	r13, r21
    798e:	48 f4       	brcc	.+18     	; 0x79a2 <__udivdi3+0xada>
    7990:	08 94       	sec
    7992:	61 08       	sbc	r6, r1
    7994:	71 08       	sbc	r7, r1
    7996:	81 08       	sbc	r8, r1
    7998:	91 08       	sbc	r9, r1
    799a:	a6 0e       	add	r10, r22
    799c:	b7 1e       	adc	r11, r23
    799e:	c8 1e       	adc	r12, r24
    79a0:	d9 1e       	adc	r13, r25
    79a2:	d6 01       	movw	r26, r12
    79a4:	c5 01       	movw	r24, r10
    79a6:	82 1b       	sub	r24, r18
    79a8:	93 0b       	sbc	r25, r19
    79aa:	a4 0b       	sbc	r26, r20
    79ac:	b5 0b       	sbc	r27, r21
    79ae:	89 8f       	std	Y+25, r24	; 0x19
    79b0:	9a 8f       	std	Y+26, r25	; 0x1a
    79b2:	ab 8f       	std	Y+27, r26	; 0x1b
    79b4:	bc 8f       	std	Y+28, r27	; 0x1c
    79b6:	d1 01       	movw	r26, r2
    79b8:	99 27       	eor	r25, r25
    79ba:	88 27       	eor	r24, r24
    79bc:	64 01       	movw	r12, r8
    79be:	53 01       	movw	r10, r6
    79c0:	a8 2a       	or	r10, r24
    79c2:	b9 2a       	or	r11, r25
    79c4:	ca 2a       	or	r12, r26
    79c6:	db 2a       	or	r13, r27
    79c8:	a9 aa       	std	Y+49, r10	; 0x31
    79ca:	ba aa       	std	Y+50, r11	; 0x32
    79cc:	cb aa       	std	Y+51, r12	; 0x33
    79ce:	dc aa       	std	Y+52, r13	; 0x34
    79d0:	86 01       	movw	r16, r12
    79d2:	75 01       	movw	r14, r10
    79d4:	2f ef       	ldi	r18, 0xFF	; 255
    79d6:	3f ef       	ldi	r19, 0xFF	; 255
    79d8:	40 e0       	ldi	r20, 0x00	; 0
    79da:	50 e0       	ldi	r21, 0x00	; 0
    79dc:	e2 22       	and	r14, r18
    79de:	f3 22       	and	r15, r19
    79e0:	04 23       	and	r16, r20
    79e2:	15 23       	and	r17, r21
    79e4:	a6 01       	movw	r20, r12
    79e6:	66 27       	eor	r22, r22
    79e8:	77 27       	eor	r23, r23
    79ea:	6d 96       	adiw	r28, 0x1d	; 29
    79ec:	4c af       	std	Y+60, r20	; 0x3c
    79ee:	5d af       	std	Y+61, r21	; 0x3d
    79f0:	6e af       	std	Y+62, r22	; 0x3e
    79f2:	7f af       	std	Y+63, r23	; 0x3f
    79f4:	6d 97       	sbiw	r28, 0x1d	; 29
    79f6:	a9 a0       	ldd	r10, Y+33	; 0x21
    79f8:	ba a0       	ldd	r11, Y+34	; 0x22
    79fa:	cb a0       	ldd	r12, Y+35	; 0x23
    79fc:	dc a0       	ldd	r13, Y+36	; 0x24
    79fe:	6f ef       	ldi	r22, 0xFF	; 255
    7a00:	7f ef       	ldi	r23, 0xFF	; 255
    7a02:	80 e0       	ldi	r24, 0x00	; 0
    7a04:	90 e0       	ldi	r25, 0x00	; 0
    7a06:	a6 22       	and	r10, r22
    7a08:	b7 22       	and	r11, r23
    7a0a:	c8 22       	and	r12, r24
    7a0c:	d9 22       	and	r13, r25
    7a0e:	89 a1       	ldd	r24, Y+33	; 0x21
    7a10:	9a a1       	ldd	r25, Y+34	; 0x22
    7a12:	ab a1       	ldd	r26, Y+35	; 0x23
    7a14:	bc a1       	ldd	r27, Y+36	; 0x24
    7a16:	1d 01       	movw	r2, r26
    7a18:	44 24       	eor	r4, r4
    7a1a:	55 24       	eor	r5, r5
    7a1c:	c8 01       	movw	r24, r16
    7a1e:	b7 01       	movw	r22, r14
    7a20:	a6 01       	movw	r20, r12
    7a22:	95 01       	movw	r18, r10
    7a24:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <__mulsi3>
    7a28:	69 96       	adiw	r28, 0x19	; 25
    7a2a:	6c af       	std	Y+60, r22	; 0x3c
    7a2c:	7d af       	std	Y+61, r23	; 0x3d
    7a2e:	8e af       	std	Y+62, r24	; 0x3e
    7a30:	9f af       	std	Y+63, r25	; 0x3f
    7a32:	69 97       	sbiw	r28, 0x19	; 25
    7a34:	c8 01       	movw	r24, r16
    7a36:	b7 01       	movw	r22, r14
    7a38:	a2 01       	movw	r20, r4
    7a3a:	91 01       	movw	r18, r2
    7a3c:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <__mulsi3>
    7a40:	3b 01       	movw	r6, r22
    7a42:	4c 01       	movw	r8, r24
    7a44:	6d 96       	adiw	r28, 0x1d	; 29
    7a46:	6c ad       	ldd	r22, Y+60	; 0x3c
    7a48:	7d ad       	ldd	r23, Y+61	; 0x3d
    7a4a:	8e ad       	ldd	r24, Y+62	; 0x3e
    7a4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    7a4e:	6d 97       	sbiw	r28, 0x1d	; 29
    7a50:	a6 01       	movw	r20, r12
    7a52:	95 01       	movw	r18, r10
    7a54:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <__mulsi3>
    7a58:	7b 01       	movw	r14, r22
    7a5a:	8c 01       	movw	r16, r24
    7a5c:	6d 96       	adiw	r28, 0x1d	; 29
    7a5e:	6c ad       	ldd	r22, Y+60	; 0x3c
    7a60:	7d ad       	ldd	r23, Y+61	; 0x3d
    7a62:	8e ad       	ldd	r24, Y+62	; 0x3e
    7a64:	9f ad       	ldd	r25, Y+63	; 0x3f
    7a66:	6d 97       	sbiw	r28, 0x1d	; 29
    7a68:	a2 01       	movw	r20, r4
    7a6a:	91 01       	movw	r18, r2
    7a6c:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <__mulsi3>
    7a70:	5b 01       	movw	r10, r22
    7a72:	6c 01       	movw	r12, r24
    7a74:	a8 01       	movw	r20, r16
    7a76:	97 01       	movw	r18, r14
    7a78:	26 0d       	add	r18, r6
    7a7a:	37 1d       	adc	r19, r7
    7a7c:	48 1d       	adc	r20, r8
    7a7e:	59 1d       	adc	r21, r9
    7a80:	69 96       	adiw	r28, 0x19	; 25
    7a82:	6c ac       	ldd	r6, Y+60	; 0x3c
    7a84:	7d ac       	ldd	r7, Y+61	; 0x3d
    7a86:	8e ac       	ldd	r8, Y+62	; 0x3e
    7a88:	9f ac       	ldd	r9, Y+63	; 0x3f
    7a8a:	69 97       	sbiw	r28, 0x19	; 25
    7a8c:	c4 01       	movw	r24, r8
    7a8e:	aa 27       	eor	r26, r26
    7a90:	bb 27       	eor	r27, r27
    7a92:	28 0f       	add	r18, r24
    7a94:	39 1f       	adc	r19, r25
    7a96:	4a 1f       	adc	r20, r26
    7a98:	5b 1f       	adc	r21, r27
    7a9a:	2e 15       	cp	r18, r14
    7a9c:	3f 05       	cpc	r19, r15
    7a9e:	40 07       	cpc	r20, r16
    7aa0:	51 07       	cpc	r21, r17
    7aa2:	48 f4       	brcc	.+18     	; 0x7ab6 <__udivdi3+0xbee>
    7aa4:	e1 2c       	mov	r14, r1
    7aa6:	f1 2c       	mov	r15, r1
    7aa8:	61 e0       	ldi	r22, 0x01	; 1
    7aaa:	06 2f       	mov	r16, r22
    7aac:	11 2d       	mov	r17, r1
    7aae:	ae 0c       	add	r10, r14
    7ab0:	bf 1c       	adc	r11, r15
    7ab2:	c0 1e       	adc	r12, r16
    7ab4:	d1 1e       	adc	r13, r17
    7ab6:	ca 01       	movw	r24, r20
    7ab8:	aa 27       	eor	r26, r26
    7aba:	bb 27       	eor	r27, r27
    7abc:	bc 01       	movw	r22, r24
    7abe:	cd 01       	movw	r24, r26
    7ac0:	6a 0d       	add	r22, r10
    7ac2:	7b 1d       	adc	r23, r11
    7ac4:	8c 1d       	adc	r24, r12
    7ac6:	9d 1d       	adc	r25, r13
    7ac8:	69 8c       	ldd	r6, Y+25	; 0x19
    7aca:	7a 8c       	ldd	r7, Y+26	; 0x1a
    7acc:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7ace:	9c 8c       	ldd	r9, Y+28	; 0x1c
    7ad0:	66 16       	cp	r6, r22
    7ad2:	77 06       	cpc	r7, r23
    7ad4:	88 06       	cpc	r8, r24
    7ad6:	99 06       	cpc	r9, r25
    7ad8:	40 f1       	brcs	.+80     	; 0x7b2a <__udivdi3+0xc62>
    7ada:	66 15       	cp	r22, r6
    7adc:	77 05       	cpc	r23, r7
    7ade:	88 05       	cpc	r24, r8
    7ae0:	99 05       	cpc	r25, r9
    7ae2:	09 f0       	breq	.+2      	; 0x7ae6 <__udivdi3+0xc1e>
    7ae4:	43 c0       	rjmp	.+134    	; 0x7b6c <__udivdi3+0xca4>
    7ae6:	d9 01       	movw	r26, r18
    7ae8:	99 27       	eor	r25, r25
    7aea:	88 27       	eor	r24, r24
    7aec:	69 96       	adiw	r28, 0x19	; 25
    7aee:	2c ad       	ldd	r18, Y+60	; 0x3c
    7af0:	3d ad       	ldd	r19, Y+61	; 0x3d
    7af2:	4e ad       	ldd	r20, Y+62	; 0x3e
    7af4:	5f ad       	ldd	r21, Y+63	; 0x3f
    7af6:	69 97       	sbiw	r28, 0x19	; 25
    7af8:	40 70       	andi	r20, 0x00	; 0
    7afa:	50 70       	andi	r21, 0x00	; 0
    7afc:	82 0f       	add	r24, r18
    7afe:	93 1f       	adc	r25, r19
    7b00:	a4 1f       	adc	r26, r20
    7b02:	b5 1f       	adc	r27, r21
    7b04:	2d a5       	ldd	r18, Y+45	; 0x2d
    7b06:	3e a5       	ldd	r19, Y+46	; 0x2e
    7b08:	4f a5       	ldd	r20, Y+47	; 0x2f
    7b0a:	58 a9       	ldd	r21, Y+48	; 0x30
    7b0c:	6e 96       	adiw	r28, 0x1e	; 30
    7b0e:	0f ac       	ldd	r0, Y+63	; 0x3f
    7b10:	6e 97       	sbiw	r28, 0x1e	; 30
    7b12:	04 c0       	rjmp	.+8      	; 0x7b1c <__udivdi3+0xc54>
    7b14:	22 0f       	add	r18, r18
    7b16:	33 1f       	adc	r19, r19
    7b18:	44 1f       	adc	r20, r20
    7b1a:	55 1f       	adc	r21, r21
    7b1c:	0a 94       	dec	r0
    7b1e:	d2 f7       	brpl	.-12     	; 0x7b14 <__udivdi3+0xc4c>
    7b20:	28 17       	cp	r18, r24
    7b22:	39 07       	cpc	r19, r25
    7b24:	4a 07       	cpc	r20, r26
    7b26:	5b 07       	cpc	r21, r27
    7b28:	08 f5       	brcc	.+66     	; 0x7b6c <__udivdi3+0xca4>
    7b2a:	09 a9       	ldd	r16, Y+49	; 0x31
    7b2c:	1a a9       	ldd	r17, Y+50	; 0x32
    7b2e:	2b a9       	ldd	r18, Y+51	; 0x33
    7b30:	3c a9       	ldd	r19, Y+52	; 0x34
    7b32:	01 50       	subi	r16, 0x01	; 1
    7b34:	10 40       	sbci	r17, 0x00	; 0
    7b36:	20 40       	sbci	r18, 0x00	; 0
    7b38:	30 40       	sbci	r19, 0x00	; 0
    7b3a:	09 ab       	std	Y+49, r16	; 0x31
    7b3c:	1a ab       	std	Y+50, r17	; 0x32
    7b3e:	2b ab       	std	Y+51, r18	; 0x33
    7b40:	3c ab       	std	Y+52, r19	; 0x34
    7b42:	14 c0       	rjmp	.+40     	; 0x7b6c <__udivdi3+0xca4>
    7b44:	66 24       	eor	r6, r6
    7b46:	77 24       	eor	r7, r7
    7b48:	43 01       	movw	r8, r6
    7b4a:	21 e0       	ldi	r18, 0x01	; 1
    7b4c:	30 e0       	ldi	r19, 0x00	; 0
    7b4e:	40 e0       	ldi	r20, 0x00	; 0
    7b50:	50 e0       	ldi	r21, 0x00	; 0
    7b52:	29 ab       	std	Y+49, r18	; 0x31
    7b54:	3a ab       	std	Y+50, r19	; 0x32
    7b56:	4b ab       	std	Y+51, r20	; 0x33
    7b58:	5c ab       	std	Y+52, r21	; 0x34
    7b5a:	0b c0       	rjmp	.+22     	; 0x7b72 <__udivdi3+0xcaa>
    7b5c:	66 24       	eor	r6, r6
    7b5e:	77 24       	eor	r7, r7
    7b60:	43 01       	movw	r8, r6
    7b62:	19 aa       	std	Y+49, r1	; 0x31
    7b64:	1a aa       	std	Y+50, r1	; 0x32
    7b66:	1b aa       	std	Y+51, r1	; 0x33
    7b68:	1c aa       	std	Y+52, r1	; 0x34
    7b6a:	03 c0       	rjmp	.+6      	; 0x7b72 <__udivdi3+0xcaa>
    7b6c:	66 24       	eor	r6, r6
    7b6e:	77 24       	eor	r7, r7
    7b70:	43 01       	movw	r8, r6
    7b72:	fe 01       	movw	r30, r28
    7b74:	71 96       	adiw	r30, 0x11	; 17
    7b76:	88 e0       	ldi	r24, 0x08	; 8
    7b78:	df 01       	movw	r26, r30
    7b7a:	1d 92       	st	X+, r1
    7b7c:	8a 95       	dec	r24
    7b7e:	e9 f7       	brne	.-6      	; 0x7b7a <__udivdi3+0xcb2>
    7b80:	a9 a8       	ldd	r10, Y+49	; 0x31
    7b82:	ba a8       	ldd	r11, Y+50	; 0x32
    7b84:	cb a8       	ldd	r12, Y+51	; 0x33
    7b86:	dc a8       	ldd	r13, Y+52	; 0x34
    7b88:	a9 8a       	std	Y+17, r10	; 0x11
    7b8a:	ba 8a       	std	Y+18, r11	; 0x12
    7b8c:	cb 8a       	std	Y+19, r12	; 0x13
    7b8e:	dc 8a       	std	Y+20, r13	; 0x14
    7b90:	6d 8a       	std	Y+21, r6	; 0x15
    7b92:	7e 8a       	std	Y+22, r7	; 0x16
    7b94:	8f 8a       	std	Y+23, r8	; 0x17
    7b96:	98 8e       	std	Y+24, r9	; 0x18
    7b98:	29 a9       	ldd	r18, Y+49	; 0x31
    7b9a:	3a 89       	ldd	r19, Y+18	; 0x12
    7b9c:	4b 89       	ldd	r20, Y+19	; 0x13
    7b9e:	5c 89       	ldd	r21, Y+20	; 0x14
    7ba0:	66 2d       	mov	r22, r6
    7ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    7ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    7ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    7ba8:	c2 5a       	subi	r28, 0xA2	; 162
    7baa:	df 4f       	sbci	r29, 0xFF	; 255
    7bac:	e2 e1       	ldi	r30, 0x12	; 18
    7bae:	0c 94 13 46 	jmp	0x8c26	; 0x8c26 <__epilogue_restores__>

00007bb2 <vfprintf>:
    7bb2:	2f 92       	push	r2
    7bb4:	3f 92       	push	r3
    7bb6:	4f 92       	push	r4
    7bb8:	5f 92       	push	r5
    7bba:	6f 92       	push	r6
    7bbc:	7f 92       	push	r7
    7bbe:	8f 92       	push	r8
    7bc0:	9f 92       	push	r9
    7bc2:	af 92       	push	r10
    7bc4:	bf 92       	push	r11
    7bc6:	cf 92       	push	r12
    7bc8:	df 92       	push	r13
    7bca:	ef 92       	push	r14
    7bcc:	ff 92       	push	r15
    7bce:	0f 93       	push	r16
    7bd0:	1f 93       	push	r17
    7bd2:	df 93       	push	r29
    7bd4:	cf 93       	push	r28
    7bd6:	cd b7       	in	r28, 0x3d	; 61
    7bd8:	de b7       	in	r29, 0x3e	; 62
    7bda:	61 97       	sbiw	r28, 0x11	; 17
    7bdc:	cd bf       	out	0x3d, r28	; 61
    7bde:	de bf       	out	0x3e, r29	; 62
    7be0:	3c 01       	movw	r6, r24
    7be2:	6e 87       	std	Y+14, r22	; 0x0e
    7be4:	7f 87       	std	Y+15, r23	; 0x0f
    7be6:	6a 01       	movw	r12, r20
    7be8:	fc 01       	movw	r30, r24
    7bea:	16 82       	std	Z+6, r1	; 0x06
    7bec:	17 82       	std	Z+7, r1	; 0x07
    7bee:	83 81       	ldd	r24, Z+3	; 0x03
    7bf0:	81 fd       	sbrc	r24, 1
    7bf2:	03 c0       	rjmp	.+6      	; 0x7bfa <vfprintf+0x48>
    7bf4:	6f ef       	ldi	r22, 0xFF	; 255
    7bf6:	7f ef       	ldi	r23, 0xFF	; 255
    7bf8:	6f c3       	rjmp	.+1758   	; 0x82d8 <vfprintf+0x726>
    7bfa:	9e 01       	movw	r18, r28
    7bfc:	2f 5f       	subi	r18, 0xFF	; 255
    7bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    7c00:	28 8b       	std	Y+16, r18	; 0x10
    7c02:	39 8b       	std	Y+17, r19	; 0x11
    7c04:	f3 01       	movw	r30, r6
    7c06:	23 81       	ldd	r18, Z+3	; 0x03
    7c08:	ee 85       	ldd	r30, Y+14	; 0x0e
    7c0a:	ff 85       	ldd	r31, Y+15	; 0x0f
    7c0c:	23 fd       	sbrc	r18, 3
    7c0e:	85 91       	lpm	r24, Z+
    7c10:	23 ff       	sbrs	r18, 3
    7c12:	81 91       	ld	r24, Z+
    7c14:	ee 87       	std	Y+14, r30	; 0x0e
    7c16:	ff 87       	std	Y+15, r31	; 0x0f
    7c18:	88 23       	and	r24, r24
    7c1a:	09 f4       	brne	.+2      	; 0x7c1e <vfprintf+0x6c>
    7c1c:	5a c3       	rjmp	.+1716   	; 0x82d2 <vfprintf+0x720>
    7c1e:	85 32       	cpi	r24, 0x25	; 37
    7c20:	51 f4       	brne	.+20     	; 0x7c36 <vfprintf+0x84>
    7c22:	ee 85       	ldd	r30, Y+14	; 0x0e
    7c24:	ff 85       	ldd	r31, Y+15	; 0x0f
    7c26:	23 fd       	sbrc	r18, 3
    7c28:	85 91       	lpm	r24, Z+
    7c2a:	23 ff       	sbrs	r18, 3
    7c2c:	81 91       	ld	r24, Z+
    7c2e:	ee 87       	std	Y+14, r30	; 0x0e
    7c30:	ff 87       	std	Y+15, r31	; 0x0f
    7c32:	85 32       	cpi	r24, 0x25	; 37
    7c34:	29 f4       	brne	.+10     	; 0x7c40 <vfprintf+0x8e>
    7c36:	90 e0       	ldi	r25, 0x00	; 0
    7c38:	b3 01       	movw	r22, r6
    7c3a:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    7c3e:	e2 cf       	rjmp	.-60     	; 0x7c04 <vfprintf+0x52>
    7c40:	98 2f       	mov	r25, r24
    7c42:	10 e0       	ldi	r17, 0x00	; 0
    7c44:	88 24       	eor	r8, r8
    7c46:	99 24       	eor	r9, r9
    7c48:	10 32       	cpi	r17, 0x20	; 32
    7c4a:	b0 f4       	brcc	.+44     	; 0x7c78 <vfprintf+0xc6>
    7c4c:	9b 32       	cpi	r25, 0x2B	; 43
    7c4e:	69 f0       	breq	.+26     	; 0x7c6a <vfprintf+0xb8>
    7c50:	9c 32       	cpi	r25, 0x2C	; 44
    7c52:	28 f4       	brcc	.+10     	; 0x7c5e <vfprintf+0xac>
    7c54:	90 32       	cpi	r25, 0x20	; 32
    7c56:	51 f0       	breq	.+20     	; 0x7c6c <vfprintf+0xba>
    7c58:	93 32       	cpi	r25, 0x23	; 35
    7c5a:	71 f4       	brne	.+28     	; 0x7c78 <vfprintf+0xc6>
    7c5c:	0b c0       	rjmp	.+22     	; 0x7c74 <vfprintf+0xc2>
    7c5e:	9d 32       	cpi	r25, 0x2D	; 45
    7c60:	39 f0       	breq	.+14     	; 0x7c70 <vfprintf+0xbe>
    7c62:	90 33       	cpi	r25, 0x30	; 48
    7c64:	49 f4       	brne	.+18     	; 0x7c78 <vfprintf+0xc6>
    7c66:	11 60       	ori	r17, 0x01	; 1
    7c68:	28 c0       	rjmp	.+80     	; 0x7cba <vfprintf+0x108>
    7c6a:	12 60       	ori	r17, 0x02	; 2
    7c6c:	14 60       	ori	r17, 0x04	; 4
    7c6e:	25 c0       	rjmp	.+74     	; 0x7cba <vfprintf+0x108>
    7c70:	18 60       	ori	r17, 0x08	; 8
    7c72:	23 c0       	rjmp	.+70     	; 0x7cba <vfprintf+0x108>
    7c74:	10 61       	ori	r17, 0x10	; 16
    7c76:	21 c0       	rjmp	.+66     	; 0x7cba <vfprintf+0x108>
    7c78:	17 fd       	sbrc	r17, 7
    7c7a:	2a c0       	rjmp	.+84     	; 0x7cd0 <vfprintf+0x11e>
    7c7c:	89 2f       	mov	r24, r25
    7c7e:	80 53       	subi	r24, 0x30	; 48
    7c80:	8a 30       	cpi	r24, 0x0A	; 10
    7c82:	78 f4       	brcc	.+30     	; 0x7ca2 <vfprintf+0xf0>
    7c84:	16 ff       	sbrs	r17, 6
    7c86:	06 c0       	rjmp	.+12     	; 0x7c94 <vfprintf+0xe2>
    7c88:	fa e0       	ldi	r31, 0x0A	; 10
    7c8a:	9f 9e       	mul	r9, r31
    7c8c:	90 2c       	mov	r9, r0
    7c8e:	11 24       	eor	r1, r1
    7c90:	98 0e       	add	r9, r24
    7c92:	13 c0       	rjmp	.+38     	; 0x7cba <vfprintf+0x108>
    7c94:	3a e0       	ldi	r19, 0x0A	; 10
    7c96:	83 9e       	mul	r8, r19
    7c98:	80 2c       	mov	r8, r0
    7c9a:	11 24       	eor	r1, r1
    7c9c:	88 0e       	add	r8, r24
    7c9e:	10 62       	ori	r17, 0x20	; 32
    7ca0:	0c c0       	rjmp	.+24     	; 0x7cba <vfprintf+0x108>
    7ca2:	9e 32       	cpi	r25, 0x2E	; 46
    7ca4:	21 f4       	brne	.+8      	; 0x7cae <vfprintf+0xfc>
    7ca6:	16 fd       	sbrc	r17, 6
    7ca8:	14 c3       	rjmp	.+1576   	; 0x82d2 <vfprintf+0x720>
    7caa:	10 64       	ori	r17, 0x40	; 64
    7cac:	06 c0       	rjmp	.+12     	; 0x7cba <vfprintf+0x108>
    7cae:	9c 36       	cpi	r25, 0x6C	; 108
    7cb0:	11 f4       	brne	.+4      	; 0x7cb6 <vfprintf+0x104>
    7cb2:	10 68       	ori	r17, 0x80	; 128
    7cb4:	02 c0       	rjmp	.+4      	; 0x7cba <vfprintf+0x108>
    7cb6:	98 36       	cpi	r25, 0x68	; 104
    7cb8:	59 f4       	brne	.+22     	; 0x7cd0 <vfprintf+0x11e>
    7cba:	ee 85       	ldd	r30, Y+14	; 0x0e
    7cbc:	ff 85       	ldd	r31, Y+15	; 0x0f
    7cbe:	23 fd       	sbrc	r18, 3
    7cc0:	95 91       	lpm	r25, Z+
    7cc2:	23 ff       	sbrs	r18, 3
    7cc4:	91 91       	ld	r25, Z+
    7cc6:	ee 87       	std	Y+14, r30	; 0x0e
    7cc8:	ff 87       	std	Y+15, r31	; 0x0f
    7cca:	99 23       	and	r25, r25
    7ccc:	09 f0       	breq	.+2      	; 0x7cd0 <vfprintf+0x11e>
    7cce:	bc cf       	rjmp	.-136    	; 0x7c48 <vfprintf+0x96>
    7cd0:	89 2f       	mov	r24, r25
    7cd2:	85 54       	subi	r24, 0x45	; 69
    7cd4:	83 30       	cpi	r24, 0x03	; 3
    7cd6:	20 f4       	brcc	.+8      	; 0x7ce0 <vfprintf+0x12e>
    7cd8:	81 2f       	mov	r24, r17
    7cda:	80 61       	ori	r24, 0x10	; 16
    7cdc:	90 5e       	subi	r25, 0xE0	; 224
    7cde:	07 c0       	rjmp	.+14     	; 0x7cee <vfprintf+0x13c>
    7ce0:	89 2f       	mov	r24, r25
    7ce2:	85 56       	subi	r24, 0x65	; 101
    7ce4:	83 30       	cpi	r24, 0x03	; 3
    7ce6:	08 f0       	brcs	.+2      	; 0x7cea <vfprintf+0x138>
    7ce8:	9f c1       	rjmp	.+830    	; 0x8028 <vfprintf+0x476>
    7cea:	81 2f       	mov	r24, r17
    7cec:	8f 7e       	andi	r24, 0xEF	; 239
    7cee:	86 fd       	sbrc	r24, 6
    7cf0:	02 c0       	rjmp	.+4      	; 0x7cf6 <vfprintf+0x144>
    7cf2:	76 e0       	ldi	r23, 0x06	; 6
    7cf4:	97 2e       	mov	r9, r23
    7cf6:	6f e3       	ldi	r22, 0x3F	; 63
    7cf8:	f6 2e       	mov	r15, r22
    7cfa:	f8 22       	and	r15, r24
    7cfc:	95 36       	cpi	r25, 0x65	; 101
    7cfe:	19 f4       	brne	.+6      	; 0x7d06 <vfprintf+0x154>
    7d00:	f0 e4       	ldi	r31, 0x40	; 64
    7d02:	ff 2a       	or	r15, r31
    7d04:	07 c0       	rjmp	.+14     	; 0x7d14 <vfprintf+0x162>
    7d06:	96 36       	cpi	r25, 0x66	; 102
    7d08:	19 f4       	brne	.+6      	; 0x7d10 <vfprintf+0x15e>
    7d0a:	20 e8       	ldi	r18, 0x80	; 128
    7d0c:	f2 2a       	or	r15, r18
    7d0e:	02 c0       	rjmp	.+4      	; 0x7d14 <vfprintf+0x162>
    7d10:	91 10       	cpse	r9, r1
    7d12:	9a 94       	dec	r9
    7d14:	f7 fe       	sbrs	r15, 7
    7d16:	0a c0       	rjmp	.+20     	; 0x7d2c <vfprintf+0x17a>
    7d18:	3b e3       	ldi	r19, 0x3B	; 59
    7d1a:	39 15       	cp	r19, r9
    7d1c:	18 f4       	brcc	.+6      	; 0x7d24 <vfprintf+0x172>
    7d1e:	5c e3       	ldi	r21, 0x3C	; 60
    7d20:	b5 2e       	mov	r11, r21
    7d22:	02 c0       	rjmp	.+4      	; 0x7d28 <vfprintf+0x176>
    7d24:	b9 2c       	mov	r11, r9
    7d26:	b3 94       	inc	r11
    7d28:	27 e0       	ldi	r18, 0x07	; 7
    7d2a:	09 c0       	rjmp	.+18     	; 0x7d3e <vfprintf+0x18c>
    7d2c:	47 e0       	ldi	r20, 0x07	; 7
    7d2e:	49 15       	cp	r20, r9
    7d30:	20 f4       	brcc	.+8      	; 0x7d3a <vfprintf+0x188>
    7d32:	bb 24       	eor	r11, r11
    7d34:	47 e0       	ldi	r20, 0x07	; 7
    7d36:	94 2e       	mov	r9, r20
    7d38:	f7 cf       	rjmp	.-18     	; 0x7d28 <vfprintf+0x176>
    7d3a:	29 2d       	mov	r18, r9
    7d3c:	bb 24       	eor	r11, r11
    7d3e:	c6 01       	movw	r24, r12
    7d40:	04 96       	adiw	r24, 0x04	; 4
    7d42:	8c 87       	std	Y+12, r24	; 0x0c
    7d44:	9d 87       	std	Y+13, r25	; 0x0d
    7d46:	f6 01       	movw	r30, r12
    7d48:	60 81       	ld	r22, Z
    7d4a:	71 81       	ldd	r23, Z+1	; 0x01
    7d4c:	82 81       	ldd	r24, Z+2	; 0x02
    7d4e:	93 81       	ldd	r25, Z+3	; 0x03
    7d50:	ae 01       	movw	r20, r28
    7d52:	4f 5f       	subi	r20, 0xFF	; 255
    7d54:	5f 4f       	sbci	r21, 0xFF	; 255
    7d56:	0b 2d       	mov	r16, r11
    7d58:	0e 94 ba 47 	call	0x8f74	; 0x8f74 <__ftoa_engine>
    7d5c:	6c 01       	movw	r12, r24
    7d5e:	09 81       	ldd	r16, Y+1	; 0x01
    7d60:	20 2e       	mov	r2, r16
    7d62:	33 24       	eor	r3, r3
    7d64:	00 ff       	sbrs	r16, 0
    7d66:	04 c0       	rjmp	.+8      	; 0x7d70 <vfprintf+0x1be>
    7d68:	03 fd       	sbrc	r16, 3
    7d6a:	02 c0       	rjmp	.+4      	; 0x7d70 <vfprintf+0x1be>
    7d6c:	1d e2       	ldi	r17, 0x2D	; 45
    7d6e:	09 c0       	rjmp	.+18     	; 0x7d82 <vfprintf+0x1d0>
    7d70:	f1 fe       	sbrs	r15, 1
    7d72:	02 c0       	rjmp	.+4      	; 0x7d78 <vfprintf+0x1c6>
    7d74:	1b e2       	ldi	r17, 0x2B	; 43
    7d76:	05 c0       	rjmp	.+10     	; 0x7d82 <vfprintf+0x1d0>
    7d78:	f2 fc       	sbrc	r15, 2
    7d7a:	02 c0       	rjmp	.+4      	; 0x7d80 <vfprintf+0x1ce>
    7d7c:	10 e0       	ldi	r17, 0x00	; 0
    7d7e:	01 c0       	rjmp	.+2      	; 0x7d82 <vfprintf+0x1d0>
    7d80:	10 e2       	ldi	r17, 0x20	; 32
    7d82:	c1 01       	movw	r24, r2
    7d84:	8c 70       	andi	r24, 0x0C	; 12
    7d86:	90 70       	andi	r25, 0x00	; 0
    7d88:	89 2b       	or	r24, r25
    7d8a:	b9 f1       	breq	.+110    	; 0x7dfa <vfprintf+0x248>
    7d8c:	11 23       	and	r17, r17
    7d8e:	11 f4       	brne	.+4      	; 0x7d94 <vfprintf+0x1e2>
    7d90:	83 e0       	ldi	r24, 0x03	; 3
    7d92:	01 c0       	rjmp	.+2      	; 0x7d96 <vfprintf+0x1e4>
    7d94:	84 e0       	ldi	r24, 0x04	; 4
    7d96:	88 15       	cp	r24, r8
    7d98:	10 f0       	brcs	.+4      	; 0x7d9e <vfprintf+0x1ec>
    7d9a:	88 24       	eor	r8, r8
    7d9c:	0a c0       	rjmp	.+20     	; 0x7db2 <vfprintf+0x200>
    7d9e:	88 1a       	sub	r8, r24
    7da0:	f3 fc       	sbrc	r15, 3
    7da2:	07 c0       	rjmp	.+14     	; 0x7db2 <vfprintf+0x200>
    7da4:	80 e2       	ldi	r24, 0x20	; 32
    7da6:	90 e0       	ldi	r25, 0x00	; 0
    7da8:	b3 01       	movw	r22, r6
    7daa:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    7dae:	8a 94       	dec	r8
    7db0:	c9 f7       	brne	.-14     	; 0x7da4 <vfprintf+0x1f2>
    7db2:	11 23       	and	r17, r17
    7db4:	29 f0       	breq	.+10     	; 0x7dc0 <vfprintf+0x20e>
    7db6:	81 2f       	mov	r24, r17
    7db8:	90 e0       	ldi	r25, 0x00	; 0
    7dba:	b3 01       	movw	r22, r6
    7dbc:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    7dc0:	23 fe       	sbrs	r2, 3
    7dc2:	03 c0       	rjmp	.+6      	; 0x7dca <vfprintf+0x218>
    7dc4:	03 e3       	ldi	r16, 0x33	; 51
    7dc6:	12 e0       	ldi	r17, 0x02	; 2
    7dc8:	0e c0       	rjmp	.+28     	; 0x7de6 <vfprintf+0x234>
    7dca:	07 e3       	ldi	r16, 0x37	; 55
    7dcc:	12 e0       	ldi	r17, 0x02	; 2
    7dce:	0b c0       	rjmp	.+22     	; 0x7de6 <vfprintf+0x234>
    7dd0:	e1 14       	cp	r14, r1
    7dd2:	f1 04       	cpc	r15, r1
    7dd4:	09 f0       	breq	.+2      	; 0x7dd8 <vfprintf+0x226>
    7dd6:	80 52       	subi	r24, 0x20	; 32
    7dd8:	90 e0       	ldi	r25, 0x00	; 0
    7dda:	b3 01       	movw	r22, r6
    7ddc:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    7de0:	0f 5f       	subi	r16, 0xFF	; 255
    7de2:	1f 4f       	sbci	r17, 0xFF	; 255
    7de4:	05 c0       	rjmp	.+10     	; 0x7df0 <vfprintf+0x23e>
    7de6:	ef 2c       	mov	r14, r15
    7de8:	ff 24       	eor	r15, r15
    7dea:	f0 e1       	ldi	r31, 0x10	; 16
    7dec:	ef 22       	and	r14, r31
    7dee:	ff 24       	eor	r15, r15
    7df0:	f8 01       	movw	r30, r16
    7df2:	84 91       	lpm	r24, Z+
    7df4:	88 23       	and	r24, r24
    7df6:	61 f7       	brne	.-40     	; 0x7dd0 <vfprintf+0x21e>
    7df8:	14 c1       	rjmp	.+552    	; 0x8022 <vfprintf+0x470>
    7dfa:	f7 fe       	sbrs	r15, 7
    7dfc:	12 c0       	rjmp	.+36     	; 0x7e22 <vfprintf+0x270>
    7dfe:	bc 0c       	add	r11, r12
    7e00:	24 fe       	sbrs	r2, 4
    7e02:	04 c0       	rjmp	.+8      	; 0x7e0c <vfprintf+0x25a>
    7e04:	8a 81       	ldd	r24, Y+2	; 0x02
    7e06:	81 33       	cpi	r24, 0x31	; 49
    7e08:	09 f4       	brne	.+2      	; 0x7e0c <vfprintf+0x25a>
    7e0a:	ba 94       	dec	r11
    7e0c:	1b 14       	cp	r1, r11
    7e0e:	1c f0       	brlt	.+6      	; 0x7e16 <vfprintf+0x264>
    7e10:	bb 24       	eor	r11, r11
    7e12:	b3 94       	inc	r11
    7e14:	2d c0       	rjmp	.+90     	; 0x7e70 <vfprintf+0x2be>
    7e16:	f8 e0       	ldi	r31, 0x08	; 8
    7e18:	fb 15       	cp	r31, r11
    7e1a:	50 f5       	brcc	.+84     	; 0x7e70 <vfprintf+0x2be>
    7e1c:	38 e0       	ldi	r19, 0x08	; 8
    7e1e:	b3 2e       	mov	r11, r19
    7e20:	27 c0       	rjmp	.+78     	; 0x7e70 <vfprintf+0x2be>
    7e22:	f6 fc       	sbrc	r15, 6
    7e24:	25 c0       	rjmp	.+74     	; 0x7e70 <vfprintf+0x2be>
    7e26:	89 2d       	mov	r24, r9
    7e28:	90 e0       	ldi	r25, 0x00	; 0
    7e2a:	8c 15       	cp	r24, r12
    7e2c:	9d 05       	cpc	r25, r13
    7e2e:	4c f0       	brlt	.+18     	; 0x7e42 <vfprintf+0x290>
    7e30:	2c ef       	ldi	r18, 0xFC	; 252
    7e32:	c2 16       	cp	r12, r18
    7e34:	2f ef       	ldi	r18, 0xFF	; 255
    7e36:	d2 06       	cpc	r13, r18
    7e38:	24 f0       	brlt	.+8      	; 0x7e42 <vfprintf+0x290>
    7e3a:	30 e8       	ldi	r19, 0x80	; 128
    7e3c:	f3 2a       	or	r15, r19
    7e3e:	01 c0       	rjmp	.+2      	; 0x7e42 <vfprintf+0x290>
    7e40:	9a 94       	dec	r9
    7e42:	99 20       	and	r9, r9
    7e44:	49 f0       	breq	.+18     	; 0x7e58 <vfprintf+0x2a6>
    7e46:	e2 e0       	ldi	r30, 0x02	; 2
    7e48:	f0 e0       	ldi	r31, 0x00	; 0
    7e4a:	ec 0f       	add	r30, r28
    7e4c:	fd 1f       	adc	r31, r29
    7e4e:	e9 0d       	add	r30, r9
    7e50:	f1 1d       	adc	r31, r1
    7e52:	80 81       	ld	r24, Z
    7e54:	80 33       	cpi	r24, 0x30	; 48
    7e56:	a1 f3       	breq	.-24     	; 0x7e40 <vfprintf+0x28e>
    7e58:	f7 fe       	sbrs	r15, 7
    7e5a:	0a c0       	rjmp	.+20     	; 0x7e70 <vfprintf+0x2be>
    7e5c:	b9 2c       	mov	r11, r9
    7e5e:	b3 94       	inc	r11
    7e60:	89 2d       	mov	r24, r9
    7e62:	90 e0       	ldi	r25, 0x00	; 0
    7e64:	c8 16       	cp	r12, r24
    7e66:	d9 06       	cpc	r13, r25
    7e68:	14 f0       	brlt	.+4      	; 0x7e6e <vfprintf+0x2bc>
    7e6a:	99 24       	eor	r9, r9
    7e6c:	01 c0       	rjmp	.+2      	; 0x7e70 <vfprintf+0x2be>
    7e6e:	9c 18       	sub	r9, r12
    7e70:	f7 fc       	sbrc	r15, 7
    7e72:	03 c0       	rjmp	.+6      	; 0x7e7a <vfprintf+0x2c8>
    7e74:	25 e0       	ldi	r18, 0x05	; 5
    7e76:	30 e0       	ldi	r19, 0x00	; 0
    7e78:	09 c0       	rjmp	.+18     	; 0x7e8c <vfprintf+0x2da>
    7e7a:	1c 14       	cp	r1, r12
    7e7c:	1d 04       	cpc	r1, r13
    7e7e:	1c f0       	brlt	.+6      	; 0x7e86 <vfprintf+0x2d4>
    7e80:	21 e0       	ldi	r18, 0x01	; 1
    7e82:	30 e0       	ldi	r19, 0x00	; 0
    7e84:	03 c0       	rjmp	.+6      	; 0x7e8c <vfprintf+0x2da>
    7e86:	96 01       	movw	r18, r12
    7e88:	2f 5f       	subi	r18, 0xFF	; 255
    7e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    7e8c:	11 23       	and	r17, r17
    7e8e:	11 f0       	breq	.+4      	; 0x7e94 <vfprintf+0x2e2>
    7e90:	2f 5f       	subi	r18, 0xFF	; 255
    7e92:	3f 4f       	sbci	r19, 0xFF	; 255
    7e94:	99 20       	and	r9, r9
    7e96:	29 f0       	breq	.+10     	; 0x7ea2 <vfprintf+0x2f0>
    7e98:	89 2d       	mov	r24, r9
    7e9a:	90 e0       	ldi	r25, 0x00	; 0
    7e9c:	01 96       	adiw	r24, 0x01	; 1
    7e9e:	28 0f       	add	r18, r24
    7ea0:	39 1f       	adc	r19, r25
    7ea2:	88 2d       	mov	r24, r8
    7ea4:	90 e0       	ldi	r25, 0x00	; 0
    7ea6:	28 17       	cp	r18, r24
    7ea8:	39 07       	cpc	r19, r25
    7eaa:	14 f0       	brlt	.+4      	; 0x7eb0 <vfprintf+0x2fe>
    7eac:	88 24       	eor	r8, r8
    7eae:	01 c0       	rjmp	.+2      	; 0x7eb2 <vfprintf+0x300>
    7eb0:	82 1a       	sub	r8, r18
    7eb2:	4f 2c       	mov	r4, r15
    7eb4:	55 24       	eor	r5, r5
    7eb6:	c2 01       	movw	r24, r4
    7eb8:	89 70       	andi	r24, 0x09	; 9
    7eba:	90 70       	andi	r25, 0x00	; 0
    7ebc:	89 2b       	or	r24, r25
    7ebe:	39 f0       	breq	.+14     	; 0x7ece <vfprintf+0x31c>
    7ec0:	08 c0       	rjmp	.+16     	; 0x7ed2 <vfprintf+0x320>
    7ec2:	80 e2       	ldi	r24, 0x20	; 32
    7ec4:	90 e0       	ldi	r25, 0x00	; 0
    7ec6:	b3 01       	movw	r22, r6
    7ec8:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    7ecc:	8a 94       	dec	r8
    7ece:	88 20       	and	r8, r8
    7ed0:	c1 f7       	brne	.-16     	; 0x7ec2 <vfprintf+0x310>
    7ed2:	11 23       	and	r17, r17
    7ed4:	29 f0       	breq	.+10     	; 0x7ee0 <vfprintf+0x32e>
    7ed6:	81 2f       	mov	r24, r17
    7ed8:	90 e0       	ldi	r25, 0x00	; 0
    7eda:	b3 01       	movw	r22, r6
    7edc:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    7ee0:	43 fe       	sbrs	r4, 3
    7ee2:	07 c0       	rjmp	.+14     	; 0x7ef2 <vfprintf+0x340>
    7ee4:	08 c0       	rjmp	.+16     	; 0x7ef6 <vfprintf+0x344>
    7ee6:	80 e3       	ldi	r24, 0x30	; 48
    7ee8:	90 e0       	ldi	r25, 0x00	; 0
    7eea:	b3 01       	movw	r22, r6
    7eec:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    7ef0:	8a 94       	dec	r8
    7ef2:	88 20       	and	r8, r8
    7ef4:	c1 f7       	brne	.-16     	; 0x7ee6 <vfprintf+0x334>
    7ef6:	f7 fe       	sbrs	r15, 7
    7ef8:	46 c0       	rjmp	.+140    	; 0x7f86 <vfprintf+0x3d4>
    7efa:	86 01       	movw	r16, r12
    7efc:	d7 fe       	sbrs	r13, 7
    7efe:	02 c0       	rjmp	.+4      	; 0x7f04 <vfprintf+0x352>
    7f00:	00 e0       	ldi	r16, 0x00	; 0
    7f02:	10 e0       	ldi	r17, 0x00	; 0
    7f04:	76 01       	movw	r14, r12
    7f06:	08 94       	sec
    7f08:	e1 1c       	adc	r14, r1
    7f0a:	f1 1c       	adc	r15, r1
    7f0c:	e0 1a       	sub	r14, r16
    7f0e:	f1 0a       	sbc	r15, r17
    7f10:	41 e0       	ldi	r20, 0x01	; 1
    7f12:	50 e0       	ldi	r21, 0x00	; 0
    7f14:	4c 0f       	add	r20, r28
    7f16:	5d 1f       	adc	r21, r29
    7f18:	e4 0e       	add	r14, r20
    7f1a:	f5 1e       	adc	r15, r21
    7f1c:	26 01       	movw	r4, r12
    7f1e:	4b 18       	sub	r4, r11
    7f20:	51 08       	sbc	r5, r1
    7f22:	89 2d       	mov	r24, r9
    7f24:	90 e0       	ldi	r25, 0x00	; 0
    7f26:	aa 24       	eor	r10, r10
    7f28:	bb 24       	eor	r11, r11
    7f2a:	a8 1a       	sub	r10, r24
    7f2c:	b9 0a       	sbc	r11, r25
    7f2e:	5f ef       	ldi	r21, 0xFF	; 255
    7f30:	0f 3f       	cpi	r16, 0xFF	; 255
    7f32:	15 07       	cpc	r17, r21
    7f34:	29 f4       	brne	.+10     	; 0x7f40 <vfprintf+0x38e>
    7f36:	8e e2       	ldi	r24, 0x2E	; 46
    7f38:	90 e0       	ldi	r25, 0x00	; 0
    7f3a:	b3 01       	movw	r22, r6
    7f3c:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    7f40:	c0 16       	cp	r12, r16
    7f42:	d1 06       	cpc	r13, r17
    7f44:	34 f0       	brlt	.+12     	; 0x7f52 <vfprintf+0x3a0>
    7f46:	40 16       	cp	r4, r16
    7f48:	51 06       	cpc	r5, r17
    7f4a:	1c f4       	brge	.+6      	; 0x7f52 <vfprintf+0x3a0>
    7f4c:	f7 01       	movw	r30, r14
    7f4e:	80 81       	ld	r24, Z
    7f50:	01 c0       	rjmp	.+2      	; 0x7f54 <vfprintf+0x3a2>
    7f52:	80 e3       	ldi	r24, 0x30	; 48
    7f54:	01 50       	subi	r16, 0x01	; 1
    7f56:	10 40       	sbci	r17, 0x00	; 0
    7f58:	08 94       	sec
    7f5a:	e1 1c       	adc	r14, r1
    7f5c:	f1 1c       	adc	r15, r1
    7f5e:	0a 15       	cp	r16, r10
    7f60:	1b 05       	cpc	r17, r11
    7f62:	2c f0       	brlt	.+10     	; 0x7f6e <vfprintf+0x3bc>
    7f64:	90 e0       	ldi	r25, 0x00	; 0
    7f66:	b3 01       	movw	r22, r6
    7f68:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    7f6c:	e0 cf       	rjmp	.-64     	; 0x7f2e <vfprintf+0x37c>
    7f6e:	0c 15       	cp	r16, r12
    7f70:	1d 05       	cpc	r17, r13
    7f72:	39 f4       	brne	.+14     	; 0x7f82 <vfprintf+0x3d0>
    7f74:	9a 81       	ldd	r25, Y+2	; 0x02
    7f76:	96 33       	cpi	r25, 0x36	; 54
    7f78:	18 f4       	brcc	.+6      	; 0x7f80 <vfprintf+0x3ce>
    7f7a:	95 33       	cpi	r25, 0x35	; 53
    7f7c:	11 f4       	brne	.+4      	; 0x7f82 <vfprintf+0x3d0>
    7f7e:	24 fe       	sbrs	r2, 4
    7f80:	81 e3       	ldi	r24, 0x31	; 49
    7f82:	90 e0       	ldi	r25, 0x00	; 0
    7f84:	4b c0       	rjmp	.+150    	; 0x801c <vfprintf+0x46a>
    7f86:	8a 81       	ldd	r24, Y+2	; 0x02
    7f88:	81 33       	cpi	r24, 0x31	; 49
    7f8a:	09 f0       	breq	.+2      	; 0x7f8e <vfprintf+0x3dc>
    7f8c:	0f 7e       	andi	r16, 0xEF	; 239
    7f8e:	90 e0       	ldi	r25, 0x00	; 0
    7f90:	b3 01       	movw	r22, r6
    7f92:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    7f96:	99 20       	and	r9, r9
    7f98:	a1 f0       	breq	.+40     	; 0x7fc2 <vfprintf+0x410>
    7f9a:	8e e2       	ldi	r24, 0x2E	; 46
    7f9c:	90 e0       	ldi	r25, 0x00	; 0
    7f9e:	b3 01       	movw	r22, r6
    7fa0:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    7fa4:	12 e0       	ldi	r17, 0x02	; 2
    7fa6:	e1 e0       	ldi	r30, 0x01	; 1
    7fa8:	f0 e0       	ldi	r31, 0x00	; 0
    7faa:	ec 0f       	add	r30, r28
    7fac:	fd 1f       	adc	r31, r29
    7fae:	e1 0f       	add	r30, r17
    7fb0:	f1 1d       	adc	r31, r1
    7fb2:	1f 5f       	subi	r17, 0xFF	; 255
    7fb4:	80 81       	ld	r24, Z
    7fb6:	90 e0       	ldi	r25, 0x00	; 0
    7fb8:	b3 01       	movw	r22, r6
    7fba:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    7fbe:	9a 94       	dec	r9
    7fc0:	91 f7       	brne	.-28     	; 0x7fa6 <vfprintf+0x3f4>
    7fc2:	44 fc       	sbrc	r4, 4
    7fc4:	03 c0       	rjmp	.+6      	; 0x7fcc <vfprintf+0x41a>
    7fc6:	85 e6       	ldi	r24, 0x65	; 101
    7fc8:	90 e0       	ldi	r25, 0x00	; 0
    7fca:	02 c0       	rjmp	.+4      	; 0x7fd0 <vfprintf+0x41e>
    7fcc:	85 e4       	ldi	r24, 0x45	; 69
    7fce:	90 e0       	ldi	r25, 0x00	; 0
    7fd0:	b3 01       	movw	r22, r6
    7fd2:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    7fd6:	d7 fc       	sbrc	r13, 7
    7fd8:	05 c0       	rjmp	.+10     	; 0x7fe4 <vfprintf+0x432>
    7fda:	c1 14       	cp	r12, r1
    7fdc:	d1 04       	cpc	r13, r1
    7fde:	41 f4       	brne	.+16     	; 0x7ff0 <vfprintf+0x43e>
    7fe0:	04 ff       	sbrs	r16, 4
    7fe2:	06 c0       	rjmp	.+12     	; 0x7ff0 <vfprintf+0x43e>
    7fe4:	d0 94       	com	r13
    7fe6:	c1 94       	neg	r12
    7fe8:	d1 08       	sbc	r13, r1
    7fea:	d3 94       	inc	r13
    7fec:	8d e2       	ldi	r24, 0x2D	; 45
    7fee:	01 c0       	rjmp	.+2      	; 0x7ff2 <vfprintf+0x440>
    7ff0:	8b e2       	ldi	r24, 0x2B	; 43
    7ff2:	90 e0       	ldi	r25, 0x00	; 0
    7ff4:	b3 01       	movw	r22, r6
    7ff6:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    7ffa:	80 e3       	ldi	r24, 0x30	; 48
    7ffc:	05 c0       	rjmp	.+10     	; 0x8008 <vfprintf+0x456>
    7ffe:	8f 5f       	subi	r24, 0xFF	; 255
    8000:	26 ef       	ldi	r18, 0xF6	; 246
    8002:	3f ef       	ldi	r19, 0xFF	; 255
    8004:	c2 0e       	add	r12, r18
    8006:	d3 1e       	adc	r13, r19
    8008:	3a e0       	ldi	r19, 0x0A	; 10
    800a:	c3 16       	cp	r12, r19
    800c:	d1 04       	cpc	r13, r1
    800e:	bc f7       	brge	.-18     	; 0x7ffe <vfprintf+0x44c>
    8010:	90 e0       	ldi	r25, 0x00	; 0
    8012:	b3 01       	movw	r22, r6
    8014:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    8018:	c6 01       	movw	r24, r12
    801a:	c0 96       	adiw	r24, 0x30	; 48
    801c:	b3 01       	movw	r22, r6
    801e:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    8022:	cc 84       	ldd	r12, Y+12	; 0x0c
    8024:	dd 84       	ldd	r13, Y+13	; 0x0d
    8026:	52 c1       	rjmp	.+676    	; 0x82cc <vfprintf+0x71a>
    8028:	93 36       	cpi	r25, 0x63	; 99
    802a:	31 f0       	breq	.+12     	; 0x8038 <vfprintf+0x486>
    802c:	93 37       	cpi	r25, 0x73	; 115
    802e:	99 f0       	breq	.+38     	; 0x8056 <vfprintf+0x4a4>
    8030:	93 35       	cpi	r25, 0x53	; 83
    8032:	09 f0       	breq	.+2      	; 0x8036 <vfprintf+0x484>
    8034:	59 c0       	rjmp	.+178    	; 0x80e8 <vfprintf+0x536>
    8036:	23 c0       	rjmp	.+70     	; 0x807e <vfprintf+0x4cc>
    8038:	f6 01       	movw	r30, r12
    803a:	80 81       	ld	r24, Z
    803c:	89 83       	std	Y+1, r24	; 0x01
    803e:	5e 01       	movw	r10, r28
    8040:	08 94       	sec
    8042:	a1 1c       	adc	r10, r1
    8044:	b1 1c       	adc	r11, r1
    8046:	22 e0       	ldi	r18, 0x02	; 2
    8048:	30 e0       	ldi	r19, 0x00	; 0
    804a:	c2 0e       	add	r12, r18
    804c:	d3 1e       	adc	r13, r19
    804e:	21 e0       	ldi	r18, 0x01	; 1
    8050:	e2 2e       	mov	r14, r18
    8052:	f1 2c       	mov	r15, r1
    8054:	12 c0       	rjmp	.+36     	; 0x807a <vfprintf+0x4c8>
    8056:	f6 01       	movw	r30, r12
    8058:	a0 80       	ld	r10, Z
    805a:	b1 80       	ldd	r11, Z+1	; 0x01
    805c:	16 fd       	sbrc	r17, 6
    805e:	03 c0       	rjmp	.+6      	; 0x8066 <vfprintf+0x4b4>
    8060:	6f ef       	ldi	r22, 0xFF	; 255
    8062:	7f ef       	ldi	r23, 0xFF	; 255
    8064:	02 c0       	rjmp	.+4      	; 0x806a <vfprintf+0x4b8>
    8066:	69 2d       	mov	r22, r9
    8068:	70 e0       	ldi	r23, 0x00	; 0
    806a:	22 e0       	ldi	r18, 0x02	; 2
    806c:	30 e0       	ldi	r19, 0x00	; 0
    806e:	c2 0e       	add	r12, r18
    8070:	d3 1e       	adc	r13, r19
    8072:	c5 01       	movw	r24, r10
    8074:	0e 94 bd 48 	call	0x917a	; 0x917a <strnlen>
    8078:	7c 01       	movw	r14, r24
    807a:	1f 77       	andi	r17, 0x7F	; 127
    807c:	13 c0       	rjmp	.+38     	; 0x80a4 <vfprintf+0x4f2>
    807e:	f6 01       	movw	r30, r12
    8080:	a0 80       	ld	r10, Z
    8082:	b1 80       	ldd	r11, Z+1	; 0x01
    8084:	16 fd       	sbrc	r17, 6
    8086:	03 c0       	rjmp	.+6      	; 0x808e <vfprintf+0x4dc>
    8088:	6f ef       	ldi	r22, 0xFF	; 255
    808a:	7f ef       	ldi	r23, 0xFF	; 255
    808c:	02 c0       	rjmp	.+4      	; 0x8092 <vfprintf+0x4e0>
    808e:	69 2d       	mov	r22, r9
    8090:	70 e0       	ldi	r23, 0x00	; 0
    8092:	22 e0       	ldi	r18, 0x02	; 2
    8094:	30 e0       	ldi	r19, 0x00	; 0
    8096:	c2 0e       	add	r12, r18
    8098:	d3 1e       	adc	r13, r19
    809a:	c5 01       	movw	r24, r10
    809c:	0e 94 b2 48 	call	0x9164	; 0x9164 <strnlen_P>
    80a0:	7c 01       	movw	r14, r24
    80a2:	10 68       	ori	r17, 0x80	; 128
    80a4:	13 ff       	sbrs	r17, 3
    80a6:	07 c0       	rjmp	.+14     	; 0x80b6 <vfprintf+0x504>
    80a8:	1b c0       	rjmp	.+54     	; 0x80e0 <vfprintf+0x52e>
    80aa:	80 e2       	ldi	r24, 0x20	; 32
    80ac:	90 e0       	ldi	r25, 0x00	; 0
    80ae:	b3 01       	movw	r22, r6
    80b0:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    80b4:	8a 94       	dec	r8
    80b6:	88 2d       	mov	r24, r8
    80b8:	90 e0       	ldi	r25, 0x00	; 0
    80ba:	e8 16       	cp	r14, r24
    80bc:	f9 06       	cpc	r15, r25
    80be:	a8 f3       	brcs	.-22     	; 0x80aa <vfprintf+0x4f8>
    80c0:	0f c0       	rjmp	.+30     	; 0x80e0 <vfprintf+0x52e>
    80c2:	f5 01       	movw	r30, r10
    80c4:	17 fd       	sbrc	r17, 7
    80c6:	85 91       	lpm	r24, Z+
    80c8:	17 ff       	sbrs	r17, 7
    80ca:	81 91       	ld	r24, Z+
    80cc:	5f 01       	movw	r10, r30
    80ce:	90 e0       	ldi	r25, 0x00	; 0
    80d0:	b3 01       	movw	r22, r6
    80d2:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    80d6:	81 10       	cpse	r8, r1
    80d8:	8a 94       	dec	r8
    80da:	08 94       	sec
    80dc:	e1 08       	sbc	r14, r1
    80de:	f1 08       	sbc	r15, r1
    80e0:	e1 14       	cp	r14, r1
    80e2:	f1 04       	cpc	r15, r1
    80e4:	71 f7       	brne	.-36     	; 0x80c2 <vfprintf+0x510>
    80e6:	f2 c0       	rjmp	.+484    	; 0x82cc <vfprintf+0x71a>
    80e8:	94 36       	cpi	r25, 0x64	; 100
    80ea:	11 f0       	breq	.+4      	; 0x80f0 <vfprintf+0x53e>
    80ec:	99 36       	cpi	r25, 0x69	; 105
    80ee:	89 f5       	brne	.+98     	; 0x8152 <vfprintf+0x5a0>
    80f0:	17 ff       	sbrs	r17, 7
    80f2:	08 c0       	rjmp	.+16     	; 0x8104 <vfprintf+0x552>
    80f4:	f6 01       	movw	r30, r12
    80f6:	20 81       	ld	r18, Z
    80f8:	31 81       	ldd	r19, Z+1	; 0x01
    80fa:	42 81       	ldd	r20, Z+2	; 0x02
    80fc:	53 81       	ldd	r21, Z+3	; 0x03
    80fe:	84 e0       	ldi	r24, 0x04	; 4
    8100:	90 e0       	ldi	r25, 0x00	; 0
    8102:	0a c0       	rjmp	.+20     	; 0x8118 <vfprintf+0x566>
    8104:	f6 01       	movw	r30, r12
    8106:	80 81       	ld	r24, Z
    8108:	91 81       	ldd	r25, Z+1	; 0x01
    810a:	9c 01       	movw	r18, r24
    810c:	44 27       	eor	r20, r20
    810e:	37 fd       	sbrc	r19, 7
    8110:	40 95       	com	r20
    8112:	54 2f       	mov	r21, r20
    8114:	82 e0       	ldi	r24, 0x02	; 2
    8116:	90 e0       	ldi	r25, 0x00	; 0
    8118:	c8 0e       	add	r12, r24
    811a:	d9 1e       	adc	r13, r25
    811c:	9f e6       	ldi	r25, 0x6F	; 111
    811e:	f9 2e       	mov	r15, r25
    8120:	f1 22       	and	r15, r17
    8122:	57 ff       	sbrs	r21, 7
    8124:	09 c0       	rjmp	.+18     	; 0x8138 <vfprintf+0x586>
    8126:	50 95       	com	r21
    8128:	40 95       	com	r20
    812a:	30 95       	com	r19
    812c:	21 95       	neg	r18
    812e:	3f 4f       	sbci	r19, 0xFF	; 255
    8130:	4f 4f       	sbci	r20, 0xFF	; 255
    8132:	5f 4f       	sbci	r21, 0xFF	; 255
    8134:	90 e8       	ldi	r25, 0x80	; 128
    8136:	f9 2a       	or	r15, r25
    8138:	ca 01       	movw	r24, r20
    813a:	b9 01       	movw	r22, r18
    813c:	ae 01       	movw	r20, r28
    813e:	4f 5f       	subi	r20, 0xFF	; 255
    8140:	5f 4f       	sbci	r21, 0xFF	; 255
    8142:	2a e0       	ldi	r18, 0x0A	; 10
    8144:	30 e0       	ldi	r19, 0x00	; 0
    8146:	0e 94 57 49 	call	0x92ae	; 0x92ae <__ultoa_invert>
    814a:	e8 2e       	mov	r14, r24
    814c:	e8 89       	ldd	r30, Y+16	; 0x10
    814e:	ee 1a       	sub	r14, r30
    8150:	41 c0       	rjmp	.+130    	; 0x81d4 <vfprintf+0x622>
    8152:	95 37       	cpi	r25, 0x75	; 117
    8154:	21 f4       	brne	.+8      	; 0x815e <vfprintf+0x5ac>
    8156:	1f 7e       	andi	r17, 0xEF	; 239
    8158:	2a e0       	ldi	r18, 0x0A	; 10
    815a:	30 e0       	ldi	r19, 0x00	; 0
    815c:	1c c0       	rjmp	.+56     	; 0x8196 <vfprintf+0x5e4>
    815e:	19 7f       	andi	r17, 0xF9	; 249
    8160:	9f 36       	cpi	r25, 0x6F	; 111
    8162:	61 f0       	breq	.+24     	; 0x817c <vfprintf+0x5ca>
    8164:	90 37       	cpi	r25, 0x70	; 112
    8166:	20 f4       	brcc	.+8      	; 0x8170 <vfprintf+0x5be>
    8168:	98 35       	cpi	r25, 0x58	; 88
    816a:	09 f0       	breq	.+2      	; 0x816e <vfprintf+0x5bc>
    816c:	b2 c0       	rjmp	.+356    	; 0x82d2 <vfprintf+0x720>
    816e:	0f c0       	rjmp	.+30     	; 0x818e <vfprintf+0x5dc>
    8170:	90 37       	cpi	r25, 0x70	; 112
    8172:	39 f0       	breq	.+14     	; 0x8182 <vfprintf+0x5d0>
    8174:	98 37       	cpi	r25, 0x78	; 120
    8176:	09 f0       	breq	.+2      	; 0x817a <vfprintf+0x5c8>
    8178:	ac c0       	rjmp	.+344    	; 0x82d2 <vfprintf+0x720>
    817a:	04 c0       	rjmp	.+8      	; 0x8184 <vfprintf+0x5d2>
    817c:	28 e0       	ldi	r18, 0x08	; 8
    817e:	30 e0       	ldi	r19, 0x00	; 0
    8180:	0a c0       	rjmp	.+20     	; 0x8196 <vfprintf+0x5e4>
    8182:	10 61       	ori	r17, 0x10	; 16
    8184:	14 fd       	sbrc	r17, 4
    8186:	14 60       	ori	r17, 0x04	; 4
    8188:	20 e1       	ldi	r18, 0x10	; 16
    818a:	30 e0       	ldi	r19, 0x00	; 0
    818c:	04 c0       	rjmp	.+8      	; 0x8196 <vfprintf+0x5e4>
    818e:	14 fd       	sbrc	r17, 4
    8190:	16 60       	ori	r17, 0x06	; 6
    8192:	20 e1       	ldi	r18, 0x10	; 16
    8194:	32 e0       	ldi	r19, 0x02	; 2
    8196:	17 ff       	sbrs	r17, 7
    8198:	08 c0       	rjmp	.+16     	; 0x81aa <vfprintf+0x5f8>
    819a:	f6 01       	movw	r30, r12
    819c:	60 81       	ld	r22, Z
    819e:	71 81       	ldd	r23, Z+1	; 0x01
    81a0:	82 81       	ldd	r24, Z+2	; 0x02
    81a2:	93 81       	ldd	r25, Z+3	; 0x03
    81a4:	44 e0       	ldi	r20, 0x04	; 4
    81a6:	50 e0       	ldi	r21, 0x00	; 0
    81a8:	08 c0       	rjmp	.+16     	; 0x81ba <vfprintf+0x608>
    81aa:	f6 01       	movw	r30, r12
    81ac:	80 81       	ld	r24, Z
    81ae:	91 81       	ldd	r25, Z+1	; 0x01
    81b0:	bc 01       	movw	r22, r24
    81b2:	80 e0       	ldi	r24, 0x00	; 0
    81b4:	90 e0       	ldi	r25, 0x00	; 0
    81b6:	42 e0       	ldi	r20, 0x02	; 2
    81b8:	50 e0       	ldi	r21, 0x00	; 0
    81ba:	c4 0e       	add	r12, r20
    81bc:	d5 1e       	adc	r13, r21
    81be:	ae 01       	movw	r20, r28
    81c0:	4f 5f       	subi	r20, 0xFF	; 255
    81c2:	5f 4f       	sbci	r21, 0xFF	; 255
    81c4:	0e 94 57 49 	call	0x92ae	; 0x92ae <__ultoa_invert>
    81c8:	e8 2e       	mov	r14, r24
    81ca:	58 89       	ldd	r21, Y+16	; 0x10
    81cc:	e5 1a       	sub	r14, r21
    81ce:	8f e7       	ldi	r24, 0x7F	; 127
    81d0:	f8 2e       	mov	r15, r24
    81d2:	f1 22       	and	r15, r17
    81d4:	f6 fe       	sbrs	r15, 6
    81d6:	0b c0       	rjmp	.+22     	; 0x81ee <vfprintf+0x63c>
    81d8:	8e ef       	ldi	r24, 0xFE	; 254
    81da:	f8 22       	and	r15, r24
    81dc:	e9 14       	cp	r14, r9
    81de:	38 f4       	brcc	.+14     	; 0x81ee <vfprintf+0x63c>
    81e0:	f4 fe       	sbrs	r15, 4
    81e2:	07 c0       	rjmp	.+14     	; 0x81f2 <vfprintf+0x640>
    81e4:	f2 fc       	sbrc	r15, 2
    81e6:	05 c0       	rjmp	.+10     	; 0x81f2 <vfprintf+0x640>
    81e8:	9f ee       	ldi	r25, 0xEF	; 239
    81ea:	f9 22       	and	r15, r25
    81ec:	02 c0       	rjmp	.+4      	; 0x81f2 <vfprintf+0x640>
    81ee:	1e 2d       	mov	r17, r14
    81f0:	01 c0       	rjmp	.+2      	; 0x81f4 <vfprintf+0x642>
    81f2:	19 2d       	mov	r17, r9
    81f4:	f4 fe       	sbrs	r15, 4
    81f6:	0d c0       	rjmp	.+26     	; 0x8212 <vfprintf+0x660>
    81f8:	fe 01       	movw	r30, r28
    81fa:	ee 0d       	add	r30, r14
    81fc:	f1 1d       	adc	r31, r1
    81fe:	80 81       	ld	r24, Z
    8200:	80 33       	cpi	r24, 0x30	; 48
    8202:	19 f4       	brne	.+6      	; 0x820a <vfprintf+0x658>
    8204:	e9 ee       	ldi	r30, 0xE9	; 233
    8206:	fe 22       	and	r15, r30
    8208:	08 c0       	rjmp	.+16     	; 0x821a <vfprintf+0x668>
    820a:	1f 5f       	subi	r17, 0xFF	; 255
    820c:	f2 fe       	sbrs	r15, 2
    820e:	05 c0       	rjmp	.+10     	; 0x821a <vfprintf+0x668>
    8210:	03 c0       	rjmp	.+6      	; 0x8218 <vfprintf+0x666>
    8212:	8f 2d       	mov	r24, r15
    8214:	86 78       	andi	r24, 0x86	; 134
    8216:	09 f0       	breq	.+2      	; 0x821a <vfprintf+0x668>
    8218:	1f 5f       	subi	r17, 0xFF	; 255
    821a:	0f 2d       	mov	r16, r15
    821c:	f3 fc       	sbrc	r15, 3
    821e:	14 c0       	rjmp	.+40     	; 0x8248 <vfprintf+0x696>
    8220:	f0 fe       	sbrs	r15, 0
    8222:	0f c0       	rjmp	.+30     	; 0x8242 <vfprintf+0x690>
    8224:	18 15       	cp	r17, r8
    8226:	10 f0       	brcs	.+4      	; 0x822c <vfprintf+0x67a>
    8228:	9e 2c       	mov	r9, r14
    822a:	0b c0       	rjmp	.+22     	; 0x8242 <vfprintf+0x690>
    822c:	9e 2c       	mov	r9, r14
    822e:	98 0c       	add	r9, r8
    8230:	91 1a       	sub	r9, r17
    8232:	18 2d       	mov	r17, r8
    8234:	06 c0       	rjmp	.+12     	; 0x8242 <vfprintf+0x690>
    8236:	80 e2       	ldi	r24, 0x20	; 32
    8238:	90 e0       	ldi	r25, 0x00	; 0
    823a:	b3 01       	movw	r22, r6
    823c:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    8240:	1f 5f       	subi	r17, 0xFF	; 255
    8242:	18 15       	cp	r17, r8
    8244:	c0 f3       	brcs	.-16     	; 0x8236 <vfprintf+0x684>
    8246:	04 c0       	rjmp	.+8      	; 0x8250 <vfprintf+0x69e>
    8248:	18 15       	cp	r17, r8
    824a:	10 f4       	brcc	.+4      	; 0x8250 <vfprintf+0x69e>
    824c:	81 1a       	sub	r8, r17
    824e:	01 c0       	rjmp	.+2      	; 0x8252 <vfprintf+0x6a0>
    8250:	88 24       	eor	r8, r8
    8252:	04 ff       	sbrs	r16, 4
    8254:	0f c0       	rjmp	.+30     	; 0x8274 <vfprintf+0x6c2>
    8256:	80 e3       	ldi	r24, 0x30	; 48
    8258:	90 e0       	ldi	r25, 0x00	; 0
    825a:	b3 01       	movw	r22, r6
    825c:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    8260:	02 ff       	sbrs	r16, 2
    8262:	1d c0       	rjmp	.+58     	; 0x829e <vfprintf+0x6ec>
    8264:	01 fd       	sbrc	r16, 1
    8266:	03 c0       	rjmp	.+6      	; 0x826e <vfprintf+0x6bc>
    8268:	88 e7       	ldi	r24, 0x78	; 120
    826a:	90 e0       	ldi	r25, 0x00	; 0
    826c:	0e c0       	rjmp	.+28     	; 0x828a <vfprintf+0x6d8>
    826e:	88 e5       	ldi	r24, 0x58	; 88
    8270:	90 e0       	ldi	r25, 0x00	; 0
    8272:	0b c0       	rjmp	.+22     	; 0x828a <vfprintf+0x6d8>
    8274:	80 2f       	mov	r24, r16
    8276:	86 78       	andi	r24, 0x86	; 134
    8278:	91 f0       	breq	.+36     	; 0x829e <vfprintf+0x6ec>
    827a:	01 ff       	sbrs	r16, 1
    827c:	02 c0       	rjmp	.+4      	; 0x8282 <vfprintf+0x6d0>
    827e:	8b e2       	ldi	r24, 0x2B	; 43
    8280:	01 c0       	rjmp	.+2      	; 0x8284 <vfprintf+0x6d2>
    8282:	80 e2       	ldi	r24, 0x20	; 32
    8284:	f7 fc       	sbrc	r15, 7
    8286:	8d e2       	ldi	r24, 0x2D	; 45
    8288:	90 e0       	ldi	r25, 0x00	; 0
    828a:	b3 01       	movw	r22, r6
    828c:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    8290:	06 c0       	rjmp	.+12     	; 0x829e <vfprintf+0x6ec>
    8292:	80 e3       	ldi	r24, 0x30	; 48
    8294:	90 e0       	ldi	r25, 0x00	; 0
    8296:	b3 01       	movw	r22, r6
    8298:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    829c:	9a 94       	dec	r9
    829e:	e9 14       	cp	r14, r9
    82a0:	c0 f3       	brcs	.-16     	; 0x8292 <vfprintf+0x6e0>
    82a2:	ea 94       	dec	r14
    82a4:	e1 e0       	ldi	r30, 0x01	; 1
    82a6:	f0 e0       	ldi	r31, 0x00	; 0
    82a8:	ec 0f       	add	r30, r28
    82aa:	fd 1f       	adc	r31, r29
    82ac:	ee 0d       	add	r30, r14
    82ae:	f1 1d       	adc	r31, r1
    82b0:	80 81       	ld	r24, Z
    82b2:	90 e0       	ldi	r25, 0x00	; 0
    82b4:	b3 01       	movw	r22, r6
    82b6:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    82ba:	ee 20       	and	r14, r14
    82bc:	91 f7       	brne	.-28     	; 0x82a2 <vfprintf+0x6f0>
    82be:	06 c0       	rjmp	.+12     	; 0x82cc <vfprintf+0x71a>
    82c0:	80 e2       	ldi	r24, 0x20	; 32
    82c2:	90 e0       	ldi	r25, 0x00	; 0
    82c4:	b3 01       	movw	r22, r6
    82c6:	0e 94 08 49 	call	0x9210	; 0x9210 <fputc>
    82ca:	8a 94       	dec	r8
    82cc:	88 20       	and	r8, r8
    82ce:	c1 f7       	brne	.-16     	; 0x82c0 <vfprintf+0x70e>
    82d0:	99 cc       	rjmp	.-1742   	; 0x7c04 <vfprintf+0x52>
    82d2:	f3 01       	movw	r30, r6
    82d4:	66 81       	ldd	r22, Z+6	; 0x06
    82d6:	77 81       	ldd	r23, Z+7	; 0x07
    82d8:	cb 01       	movw	r24, r22
    82da:	61 96       	adiw	r28, 0x11	; 17
    82dc:	cd bf       	out	0x3d, r28	; 61
    82de:	de bf       	out	0x3e, r29	; 62
    82e0:	cf 91       	pop	r28
    82e2:	df 91       	pop	r29
    82e4:	1f 91       	pop	r17
    82e6:	0f 91       	pop	r16
    82e8:	ff 90       	pop	r15
    82ea:	ef 90       	pop	r14
    82ec:	df 90       	pop	r13
    82ee:	cf 90       	pop	r12
    82f0:	bf 90       	pop	r11
    82f2:	af 90       	pop	r10
    82f4:	9f 90       	pop	r9
    82f6:	8f 90       	pop	r8
    82f8:	7f 90       	pop	r7
    82fa:	6f 90       	pop	r6
    82fc:	5f 90       	pop	r5
    82fe:	4f 90       	pop	r4
    8300:	3f 90       	pop	r3
    8302:	2f 90       	pop	r2
    8304:	08 95       	ret

00008306 <__subsf3>:
    8306:	50 58       	subi	r21, 0x80	; 128

00008308 <__addsf3>:
    8308:	bb 27       	eor	r27, r27
    830a:	aa 27       	eor	r26, r26
    830c:	0e d0       	rcall	.+28     	; 0x832a <__addsf3x>
    830e:	29 c2       	rjmp	.+1106   	; 0x8762 <__fp_round>
    8310:	f2 d1       	rcall	.+996    	; 0x86f6 <__fp_pscA>
    8312:	30 f0       	brcs	.+12     	; 0x8320 <__addsf3+0x18>
    8314:	f7 d1       	rcall	.+1006   	; 0x8704 <__fp_pscB>
    8316:	20 f0       	brcs	.+8      	; 0x8320 <__addsf3+0x18>
    8318:	31 f4       	brne	.+12     	; 0x8326 <__addsf3+0x1e>
    831a:	9f 3f       	cpi	r25, 0xFF	; 255
    831c:	11 f4       	brne	.+4      	; 0x8322 <__addsf3+0x1a>
    831e:	1e f4       	brtc	.+6      	; 0x8326 <__addsf3+0x1e>
    8320:	c2 c1       	rjmp	.+900    	; 0x86a6 <__fp_nan>
    8322:	0e f4       	brtc	.+2      	; 0x8326 <__addsf3+0x1e>
    8324:	e0 95       	com	r30
    8326:	e7 fb       	bst	r30, 7
    8328:	8f c1       	rjmp	.+798    	; 0x8648 <__fp_inf>

0000832a <__addsf3x>:
    832a:	e9 2f       	mov	r30, r25
    832c:	3c d2       	rcall	.+1144   	; 0x87a6 <__fp_split3>
    832e:	80 f3       	brcs	.-32     	; 0x8310 <__addsf3+0x8>
    8330:	ba 17       	cp	r27, r26
    8332:	62 07       	cpc	r22, r18
    8334:	73 07       	cpc	r23, r19
    8336:	84 07       	cpc	r24, r20
    8338:	95 07       	cpc	r25, r21
    833a:	18 f0       	brcs	.+6      	; 0x8342 <__addsf3x+0x18>
    833c:	71 f4       	brne	.+28     	; 0x835a <__addsf3x+0x30>
    833e:	9e f5       	brtc	.+102    	; 0x83a6 <__addsf3x+0x7c>
    8340:	6b c2       	rjmp	.+1238   	; 0x8818 <__fp_zero>
    8342:	0e f4       	brtc	.+2      	; 0x8346 <__addsf3x+0x1c>
    8344:	e0 95       	com	r30
    8346:	0b 2e       	mov	r0, r27
    8348:	ba 2f       	mov	r27, r26
    834a:	a0 2d       	mov	r26, r0
    834c:	0b 01       	movw	r0, r22
    834e:	b9 01       	movw	r22, r18
    8350:	90 01       	movw	r18, r0
    8352:	0c 01       	movw	r0, r24
    8354:	ca 01       	movw	r24, r20
    8356:	a0 01       	movw	r20, r0
    8358:	11 24       	eor	r1, r1
    835a:	ff 27       	eor	r31, r31
    835c:	59 1b       	sub	r21, r25
    835e:	99 f0       	breq	.+38     	; 0x8386 <__addsf3x+0x5c>
    8360:	59 3f       	cpi	r21, 0xF9	; 249
    8362:	50 f4       	brcc	.+20     	; 0x8378 <__addsf3x+0x4e>
    8364:	50 3e       	cpi	r21, 0xE0	; 224
    8366:	68 f1       	brcs	.+90     	; 0x83c2 <__addsf3x+0x98>
    8368:	1a 16       	cp	r1, r26
    836a:	f0 40       	sbci	r31, 0x00	; 0
    836c:	a2 2f       	mov	r26, r18
    836e:	23 2f       	mov	r18, r19
    8370:	34 2f       	mov	r19, r20
    8372:	44 27       	eor	r20, r20
    8374:	58 5f       	subi	r21, 0xF8	; 248
    8376:	f3 cf       	rjmp	.-26     	; 0x835e <__addsf3x+0x34>
    8378:	46 95       	lsr	r20
    837a:	37 95       	ror	r19
    837c:	27 95       	ror	r18
    837e:	a7 95       	ror	r26
    8380:	f0 40       	sbci	r31, 0x00	; 0
    8382:	53 95       	inc	r21
    8384:	c9 f7       	brne	.-14     	; 0x8378 <__addsf3x+0x4e>
    8386:	7e f4       	brtc	.+30     	; 0x83a6 <__addsf3x+0x7c>
    8388:	1f 16       	cp	r1, r31
    838a:	ba 0b       	sbc	r27, r26
    838c:	62 0b       	sbc	r22, r18
    838e:	73 0b       	sbc	r23, r19
    8390:	84 0b       	sbc	r24, r20
    8392:	ba f0       	brmi	.+46     	; 0x83c2 <__addsf3x+0x98>
    8394:	91 50       	subi	r25, 0x01	; 1
    8396:	a1 f0       	breq	.+40     	; 0x83c0 <__addsf3x+0x96>
    8398:	ff 0f       	add	r31, r31
    839a:	bb 1f       	adc	r27, r27
    839c:	66 1f       	adc	r22, r22
    839e:	77 1f       	adc	r23, r23
    83a0:	88 1f       	adc	r24, r24
    83a2:	c2 f7       	brpl	.-16     	; 0x8394 <__addsf3x+0x6a>
    83a4:	0e c0       	rjmp	.+28     	; 0x83c2 <__addsf3x+0x98>
    83a6:	ba 0f       	add	r27, r26
    83a8:	62 1f       	adc	r22, r18
    83aa:	73 1f       	adc	r23, r19
    83ac:	84 1f       	adc	r24, r20
    83ae:	48 f4       	brcc	.+18     	; 0x83c2 <__addsf3x+0x98>
    83b0:	87 95       	ror	r24
    83b2:	77 95       	ror	r23
    83b4:	67 95       	ror	r22
    83b6:	b7 95       	ror	r27
    83b8:	f7 95       	ror	r31
    83ba:	9e 3f       	cpi	r25, 0xFE	; 254
    83bc:	08 f0       	brcs	.+2      	; 0x83c0 <__addsf3x+0x96>
    83be:	b3 cf       	rjmp	.-154    	; 0x8326 <__addsf3+0x1e>
    83c0:	93 95       	inc	r25
    83c2:	88 0f       	add	r24, r24
    83c4:	08 f0       	brcs	.+2      	; 0x83c8 <__addsf3x+0x9e>
    83c6:	99 27       	eor	r25, r25
    83c8:	ee 0f       	add	r30, r30
    83ca:	97 95       	ror	r25
    83cc:	87 95       	ror	r24
    83ce:	08 95       	ret

000083d0 <atan>:
    83d0:	df 93       	push	r29
    83d2:	dd 27       	eor	r29, r29
    83d4:	b9 2f       	mov	r27, r25
    83d6:	bf 77       	andi	r27, 0x7F	; 127
    83d8:	40 e8       	ldi	r20, 0x80	; 128
    83da:	5f e3       	ldi	r21, 0x3F	; 63
    83dc:	16 16       	cp	r1, r22
    83de:	17 06       	cpc	r1, r23
    83e0:	48 07       	cpc	r20, r24
    83e2:	5b 07       	cpc	r21, r27
    83e4:	10 f4       	brcc	.+4      	; 0x83ea <atan+0x1a>
    83e6:	d9 2f       	mov	r29, r25
    83e8:	83 d2       	rcall	.+1286   	; 0x88f0 <inverse>
    83ea:	9f 93       	push	r25
    83ec:	8f 93       	push	r24
    83ee:	7f 93       	push	r23
    83f0:	6f 93       	push	r22
    83f2:	96 d3       	rcall	.+1836   	; 0x8b20 <square>
    83f4:	e8 ee       	ldi	r30, 0xE8	; 232
    83f6:	f1 e0       	ldi	r31, 0x01	; 1
    83f8:	59 d1       	rcall	.+690    	; 0x86ac <__fp_powser>
    83fa:	b3 d1       	rcall	.+870    	; 0x8762 <__fp_round>
    83fc:	2f 91       	pop	r18
    83fe:	3f 91       	pop	r19
    8400:	4f 91       	pop	r20
    8402:	5f 91       	pop	r21
    8404:	ee d2       	rcall	.+1500   	; 0x89e2 <__mulsf3x>
    8406:	dd 23       	and	r29, r29
    8408:	49 f0       	breq	.+18     	; 0x841c <atan+0x4c>
    840a:	90 58       	subi	r25, 0x80	; 128
    840c:	a2 ea       	ldi	r26, 0xA2	; 162
    840e:	2a ed       	ldi	r18, 0xDA	; 218
    8410:	3f e0       	ldi	r19, 0x0F	; 15
    8412:	49 ec       	ldi	r20, 0xC9	; 201
    8414:	5f e3       	ldi	r21, 0x3F	; 63
    8416:	d0 78       	andi	r29, 0x80	; 128
    8418:	5d 27       	eor	r21, r29
    841a:	87 df       	rcall	.-242    	; 0x832a <__addsf3x>
    841c:	df 91       	pop	r29
    841e:	a1 c1       	rjmp	.+834    	; 0x8762 <__fp_round>

00008420 <ceil>:
    8420:	e4 d1       	rcall	.+968    	; 0x87ea <__fp_trunc>
    8422:	80 f0       	brcs	.+32     	; 0x8444 <ceil+0x24>
    8424:	9f 37       	cpi	r25, 0x7F	; 127
    8426:	40 f4       	brcc	.+16     	; 0x8438 <ceil+0x18>
    8428:	91 11       	cpse	r25, r1
    842a:	0e f4       	brtc	.+2      	; 0x842e <ceil+0xe>
    842c:	f6 c1       	rjmp	.+1004   	; 0x881a <__fp_szero>
    842e:	60 e0       	ldi	r22, 0x00	; 0
    8430:	70 e0       	ldi	r23, 0x00	; 0
    8432:	80 e8       	ldi	r24, 0x80	; 128
    8434:	9f e3       	ldi	r25, 0x3F	; 63
    8436:	08 95       	ret
    8438:	26 f0       	brts	.+8      	; 0x8442 <ceil+0x22>
    843a:	1b 16       	cp	r1, r27
    843c:	61 1d       	adc	r22, r1
    843e:	71 1d       	adc	r23, r1
    8440:	81 1d       	adc	r24, r1
    8442:	08 c1       	rjmp	.+528    	; 0x8654 <__fp_mintl>
    8444:	22 c1       	rjmp	.+580    	; 0x868a <__fp_mpack>

00008446 <__cmpsf2>:
    8446:	dc d0       	rcall	.+440    	; 0x8600 <__fp_cmp>
    8448:	08 f4       	brcc	.+2      	; 0x844c <__cmpsf2+0x6>
    844a:	81 e0       	ldi	r24, 0x01	; 1
    844c:	08 95       	ret

0000844e <cos>:
    844e:	62 d1       	rcall	.+708    	; 0x8714 <__fp_rempio2>
    8450:	e3 95       	inc	r30
    8452:	98 c1       	rjmp	.+816    	; 0x8784 <__fp_sinus>

00008454 <__divsf3>:
    8454:	0c d0       	rcall	.+24     	; 0x846e <__divsf3x>
    8456:	85 c1       	rjmp	.+778    	; 0x8762 <__fp_round>
    8458:	55 d1       	rcall	.+682    	; 0x8704 <__fp_pscB>
    845a:	40 f0       	brcs	.+16     	; 0x846c <__divsf3+0x18>
    845c:	4c d1       	rcall	.+664    	; 0x86f6 <__fp_pscA>
    845e:	30 f0       	brcs	.+12     	; 0x846c <__divsf3+0x18>
    8460:	21 f4       	brne	.+8      	; 0x846a <__divsf3+0x16>
    8462:	5f 3f       	cpi	r21, 0xFF	; 255
    8464:	19 f0       	breq	.+6      	; 0x846c <__divsf3+0x18>
    8466:	f0 c0       	rjmp	.+480    	; 0x8648 <__fp_inf>
    8468:	51 11       	cpse	r21, r1
    846a:	d7 c1       	rjmp	.+942    	; 0x881a <__fp_szero>
    846c:	1c c1       	rjmp	.+568    	; 0x86a6 <__fp_nan>

0000846e <__divsf3x>:
    846e:	9b d1       	rcall	.+822    	; 0x87a6 <__fp_split3>
    8470:	98 f3       	brcs	.-26     	; 0x8458 <__divsf3+0x4>

00008472 <__divsf3_pse>:
    8472:	99 23       	and	r25, r25
    8474:	c9 f3       	breq	.-14     	; 0x8468 <__divsf3+0x14>
    8476:	55 23       	and	r21, r21
    8478:	b1 f3       	breq	.-20     	; 0x8466 <__divsf3+0x12>
    847a:	95 1b       	sub	r25, r21
    847c:	55 0b       	sbc	r21, r21
    847e:	bb 27       	eor	r27, r27
    8480:	aa 27       	eor	r26, r26
    8482:	62 17       	cp	r22, r18
    8484:	73 07       	cpc	r23, r19
    8486:	84 07       	cpc	r24, r20
    8488:	38 f0       	brcs	.+14     	; 0x8498 <__divsf3_pse+0x26>
    848a:	9f 5f       	subi	r25, 0xFF	; 255
    848c:	5f 4f       	sbci	r21, 0xFF	; 255
    848e:	22 0f       	add	r18, r18
    8490:	33 1f       	adc	r19, r19
    8492:	44 1f       	adc	r20, r20
    8494:	aa 1f       	adc	r26, r26
    8496:	a9 f3       	breq	.-22     	; 0x8482 <__divsf3_pse+0x10>
    8498:	33 d0       	rcall	.+102    	; 0x8500 <__divsf3_pse+0x8e>
    849a:	0e 2e       	mov	r0, r30
    849c:	3a f0       	brmi	.+14     	; 0x84ac <__divsf3_pse+0x3a>
    849e:	e0 e8       	ldi	r30, 0x80	; 128
    84a0:	30 d0       	rcall	.+96     	; 0x8502 <__divsf3_pse+0x90>
    84a2:	91 50       	subi	r25, 0x01	; 1
    84a4:	50 40       	sbci	r21, 0x00	; 0
    84a6:	e6 95       	lsr	r30
    84a8:	00 1c       	adc	r0, r0
    84aa:	ca f7       	brpl	.-14     	; 0x849e <__divsf3_pse+0x2c>
    84ac:	29 d0       	rcall	.+82     	; 0x8500 <__divsf3_pse+0x8e>
    84ae:	fe 2f       	mov	r31, r30
    84b0:	27 d0       	rcall	.+78     	; 0x8500 <__divsf3_pse+0x8e>
    84b2:	66 0f       	add	r22, r22
    84b4:	77 1f       	adc	r23, r23
    84b6:	88 1f       	adc	r24, r24
    84b8:	bb 1f       	adc	r27, r27
    84ba:	26 17       	cp	r18, r22
    84bc:	37 07       	cpc	r19, r23
    84be:	48 07       	cpc	r20, r24
    84c0:	ab 07       	cpc	r26, r27
    84c2:	b0 e8       	ldi	r27, 0x80	; 128
    84c4:	09 f0       	breq	.+2      	; 0x84c8 <__divsf3_pse+0x56>
    84c6:	bb 0b       	sbc	r27, r27
    84c8:	80 2d       	mov	r24, r0
    84ca:	bf 01       	movw	r22, r30
    84cc:	ff 27       	eor	r31, r31
    84ce:	93 58       	subi	r25, 0x83	; 131
    84d0:	5f 4f       	sbci	r21, 0xFF	; 255
    84d2:	2a f0       	brmi	.+10     	; 0x84de <__divsf3_pse+0x6c>
    84d4:	9e 3f       	cpi	r25, 0xFE	; 254
    84d6:	51 05       	cpc	r21, r1
    84d8:	68 f0       	brcs	.+26     	; 0x84f4 <__divsf3_pse+0x82>
    84da:	b6 c0       	rjmp	.+364    	; 0x8648 <__fp_inf>
    84dc:	9e c1       	rjmp	.+828    	; 0x881a <__fp_szero>
    84de:	5f 3f       	cpi	r21, 0xFF	; 255
    84e0:	ec f3       	brlt	.-6      	; 0x84dc <__divsf3_pse+0x6a>
    84e2:	98 3e       	cpi	r25, 0xE8	; 232
    84e4:	dc f3       	brlt	.-10     	; 0x84dc <__divsf3_pse+0x6a>
    84e6:	86 95       	lsr	r24
    84e8:	77 95       	ror	r23
    84ea:	67 95       	ror	r22
    84ec:	b7 95       	ror	r27
    84ee:	f7 95       	ror	r31
    84f0:	9f 5f       	subi	r25, 0xFF	; 255
    84f2:	c9 f7       	brne	.-14     	; 0x84e6 <__divsf3_pse+0x74>
    84f4:	88 0f       	add	r24, r24
    84f6:	91 1d       	adc	r25, r1
    84f8:	96 95       	lsr	r25
    84fa:	87 95       	ror	r24
    84fc:	97 f9       	bld	r25, 7
    84fe:	08 95       	ret
    8500:	e1 e0       	ldi	r30, 0x01	; 1
    8502:	66 0f       	add	r22, r22
    8504:	77 1f       	adc	r23, r23
    8506:	88 1f       	adc	r24, r24
    8508:	bb 1f       	adc	r27, r27
    850a:	62 17       	cp	r22, r18
    850c:	73 07       	cpc	r23, r19
    850e:	84 07       	cpc	r24, r20
    8510:	ba 07       	cpc	r27, r26
    8512:	20 f0       	brcs	.+8      	; 0x851c <__divsf3_pse+0xaa>
    8514:	62 1b       	sub	r22, r18
    8516:	73 0b       	sbc	r23, r19
    8518:	84 0b       	sbc	r24, r20
    851a:	ba 0b       	sbc	r27, r26
    851c:	ee 1f       	adc	r30, r30
    851e:	88 f7       	brcc	.-30     	; 0x8502 <__divsf3_pse+0x90>
    8520:	e0 95       	com	r30
    8522:	08 95       	ret

00008524 <__fixsfsi>:
    8524:	04 d0       	rcall	.+8      	; 0x852e <__fixunssfsi>
    8526:	68 94       	set
    8528:	b1 11       	cpse	r27, r1
    852a:	77 c1       	rjmp	.+750    	; 0x881a <__fp_szero>
    852c:	08 95       	ret

0000852e <__fixunssfsi>:
    852e:	43 d1       	rcall	.+646    	; 0x87b6 <__fp_splitA>
    8530:	88 f0       	brcs	.+34     	; 0x8554 <__fixunssfsi+0x26>
    8532:	9f 57       	subi	r25, 0x7F	; 127
    8534:	90 f0       	brcs	.+36     	; 0x855a <__fixunssfsi+0x2c>
    8536:	b9 2f       	mov	r27, r25
    8538:	99 27       	eor	r25, r25
    853a:	b7 51       	subi	r27, 0x17	; 23
    853c:	a0 f0       	brcs	.+40     	; 0x8566 <__fixunssfsi+0x38>
    853e:	d1 f0       	breq	.+52     	; 0x8574 <__fixunssfsi+0x46>
    8540:	66 0f       	add	r22, r22
    8542:	77 1f       	adc	r23, r23
    8544:	88 1f       	adc	r24, r24
    8546:	99 1f       	adc	r25, r25
    8548:	1a f0       	brmi	.+6      	; 0x8550 <__fixunssfsi+0x22>
    854a:	ba 95       	dec	r27
    854c:	c9 f7       	brne	.-14     	; 0x8540 <__fixunssfsi+0x12>
    854e:	12 c0       	rjmp	.+36     	; 0x8574 <__fixunssfsi+0x46>
    8550:	b1 30       	cpi	r27, 0x01	; 1
    8552:	81 f0       	breq	.+32     	; 0x8574 <__fixunssfsi+0x46>
    8554:	61 d1       	rcall	.+706    	; 0x8818 <__fp_zero>
    8556:	b1 e0       	ldi	r27, 0x01	; 1
    8558:	08 95       	ret
    855a:	5e c1       	rjmp	.+700    	; 0x8818 <__fp_zero>
    855c:	67 2f       	mov	r22, r23
    855e:	78 2f       	mov	r23, r24
    8560:	88 27       	eor	r24, r24
    8562:	b8 5f       	subi	r27, 0xF8	; 248
    8564:	39 f0       	breq	.+14     	; 0x8574 <__fixunssfsi+0x46>
    8566:	b9 3f       	cpi	r27, 0xF9	; 249
    8568:	cc f3       	brlt	.-14     	; 0x855c <__fixunssfsi+0x2e>
    856a:	86 95       	lsr	r24
    856c:	77 95       	ror	r23
    856e:	67 95       	ror	r22
    8570:	b3 95       	inc	r27
    8572:	d9 f7       	brne	.-10     	; 0x856a <__fixunssfsi+0x3c>
    8574:	3e f4       	brtc	.+14     	; 0x8584 <__fixunssfsi+0x56>
    8576:	90 95       	com	r25
    8578:	80 95       	com	r24
    857a:	70 95       	com	r23
    857c:	61 95       	neg	r22
    857e:	7f 4f       	sbci	r23, 0xFF	; 255
    8580:	8f 4f       	sbci	r24, 0xFF	; 255
    8582:	9f 4f       	sbci	r25, 0xFF	; 255
    8584:	08 95       	ret

00008586 <__floatunsisf>:
    8586:	e8 94       	clt
    8588:	09 c0       	rjmp	.+18     	; 0x859c <__floatsisf+0x12>

0000858a <__floatsisf>:
    858a:	97 fb       	bst	r25, 7
    858c:	3e f4       	brtc	.+14     	; 0x859c <__floatsisf+0x12>
    858e:	90 95       	com	r25
    8590:	80 95       	com	r24
    8592:	70 95       	com	r23
    8594:	61 95       	neg	r22
    8596:	7f 4f       	sbci	r23, 0xFF	; 255
    8598:	8f 4f       	sbci	r24, 0xFF	; 255
    859a:	9f 4f       	sbci	r25, 0xFF	; 255
    859c:	99 23       	and	r25, r25
    859e:	a9 f0       	breq	.+42     	; 0x85ca <__floatsisf+0x40>
    85a0:	f9 2f       	mov	r31, r25
    85a2:	96 e9       	ldi	r25, 0x96	; 150
    85a4:	bb 27       	eor	r27, r27
    85a6:	93 95       	inc	r25
    85a8:	f6 95       	lsr	r31
    85aa:	87 95       	ror	r24
    85ac:	77 95       	ror	r23
    85ae:	67 95       	ror	r22
    85b0:	b7 95       	ror	r27
    85b2:	f1 11       	cpse	r31, r1
    85b4:	f8 cf       	rjmp	.-16     	; 0x85a6 <__floatsisf+0x1c>
    85b6:	fa f4       	brpl	.+62     	; 0x85f6 <__floatsisf+0x6c>
    85b8:	bb 0f       	add	r27, r27
    85ba:	11 f4       	brne	.+4      	; 0x85c0 <__floatsisf+0x36>
    85bc:	60 ff       	sbrs	r22, 0
    85be:	1b c0       	rjmp	.+54     	; 0x85f6 <__floatsisf+0x6c>
    85c0:	6f 5f       	subi	r22, 0xFF	; 255
    85c2:	7f 4f       	sbci	r23, 0xFF	; 255
    85c4:	8f 4f       	sbci	r24, 0xFF	; 255
    85c6:	9f 4f       	sbci	r25, 0xFF	; 255
    85c8:	16 c0       	rjmp	.+44     	; 0x85f6 <__floatsisf+0x6c>
    85ca:	88 23       	and	r24, r24
    85cc:	11 f0       	breq	.+4      	; 0x85d2 <__floatsisf+0x48>
    85ce:	96 e9       	ldi	r25, 0x96	; 150
    85d0:	11 c0       	rjmp	.+34     	; 0x85f4 <__floatsisf+0x6a>
    85d2:	77 23       	and	r23, r23
    85d4:	21 f0       	breq	.+8      	; 0x85de <__floatsisf+0x54>
    85d6:	9e e8       	ldi	r25, 0x8E	; 142
    85d8:	87 2f       	mov	r24, r23
    85da:	76 2f       	mov	r23, r22
    85dc:	05 c0       	rjmp	.+10     	; 0x85e8 <__floatsisf+0x5e>
    85de:	66 23       	and	r22, r22
    85e0:	71 f0       	breq	.+28     	; 0x85fe <__floatsisf+0x74>
    85e2:	96 e8       	ldi	r25, 0x86	; 134
    85e4:	86 2f       	mov	r24, r22
    85e6:	70 e0       	ldi	r23, 0x00	; 0
    85e8:	60 e0       	ldi	r22, 0x00	; 0
    85ea:	2a f0       	brmi	.+10     	; 0x85f6 <__floatsisf+0x6c>
    85ec:	9a 95       	dec	r25
    85ee:	66 0f       	add	r22, r22
    85f0:	77 1f       	adc	r23, r23
    85f2:	88 1f       	adc	r24, r24
    85f4:	da f7       	brpl	.-10     	; 0x85ec <__floatsisf+0x62>
    85f6:	88 0f       	add	r24, r24
    85f8:	96 95       	lsr	r25
    85fa:	87 95       	ror	r24
    85fc:	97 f9       	bld	r25, 7
    85fe:	08 95       	ret

00008600 <__fp_cmp>:
    8600:	99 0f       	add	r25, r25
    8602:	00 08       	sbc	r0, r0
    8604:	55 0f       	add	r21, r21
    8606:	aa 0b       	sbc	r26, r26
    8608:	e0 e8       	ldi	r30, 0x80	; 128
    860a:	fe ef       	ldi	r31, 0xFE	; 254
    860c:	16 16       	cp	r1, r22
    860e:	17 06       	cpc	r1, r23
    8610:	e8 07       	cpc	r30, r24
    8612:	f9 07       	cpc	r31, r25
    8614:	c0 f0       	brcs	.+48     	; 0x8646 <__fp_cmp+0x46>
    8616:	12 16       	cp	r1, r18
    8618:	13 06       	cpc	r1, r19
    861a:	e4 07       	cpc	r30, r20
    861c:	f5 07       	cpc	r31, r21
    861e:	98 f0       	brcs	.+38     	; 0x8646 <__fp_cmp+0x46>
    8620:	62 1b       	sub	r22, r18
    8622:	73 0b       	sbc	r23, r19
    8624:	84 0b       	sbc	r24, r20
    8626:	95 0b       	sbc	r25, r21
    8628:	39 f4       	brne	.+14     	; 0x8638 <__fp_cmp+0x38>
    862a:	0a 26       	eor	r0, r26
    862c:	61 f0       	breq	.+24     	; 0x8646 <__fp_cmp+0x46>
    862e:	23 2b       	or	r18, r19
    8630:	24 2b       	or	r18, r20
    8632:	25 2b       	or	r18, r21
    8634:	21 f4       	brne	.+8      	; 0x863e <__fp_cmp+0x3e>
    8636:	08 95       	ret
    8638:	0a 26       	eor	r0, r26
    863a:	09 f4       	brne	.+2      	; 0x863e <__fp_cmp+0x3e>
    863c:	a1 40       	sbci	r26, 0x01	; 1
    863e:	a6 95       	lsr	r26
    8640:	8f ef       	ldi	r24, 0xFF	; 255
    8642:	81 1d       	adc	r24, r1
    8644:	81 1d       	adc	r24, r1
    8646:	08 95       	ret

00008648 <__fp_inf>:
    8648:	97 f9       	bld	r25, 7
    864a:	9f 67       	ori	r25, 0x7F	; 127
    864c:	80 e8       	ldi	r24, 0x80	; 128
    864e:	70 e0       	ldi	r23, 0x00	; 0
    8650:	60 e0       	ldi	r22, 0x00	; 0
    8652:	08 95       	ret

00008654 <__fp_mintl>:
    8654:	88 23       	and	r24, r24
    8656:	71 f4       	brne	.+28     	; 0x8674 <__fp_mintl+0x20>
    8658:	77 23       	and	r23, r23
    865a:	21 f0       	breq	.+8      	; 0x8664 <__fp_mintl+0x10>
    865c:	98 50       	subi	r25, 0x08	; 8
    865e:	87 2b       	or	r24, r23
    8660:	76 2f       	mov	r23, r22
    8662:	07 c0       	rjmp	.+14     	; 0x8672 <__fp_mintl+0x1e>
    8664:	66 23       	and	r22, r22
    8666:	11 f4       	brne	.+4      	; 0x866c <__fp_mintl+0x18>
    8668:	99 27       	eor	r25, r25
    866a:	0d c0       	rjmp	.+26     	; 0x8686 <__fp_mintl+0x32>
    866c:	90 51       	subi	r25, 0x10	; 16
    866e:	86 2b       	or	r24, r22
    8670:	70 e0       	ldi	r23, 0x00	; 0
    8672:	60 e0       	ldi	r22, 0x00	; 0
    8674:	2a f0       	brmi	.+10     	; 0x8680 <__fp_mintl+0x2c>
    8676:	9a 95       	dec	r25
    8678:	66 0f       	add	r22, r22
    867a:	77 1f       	adc	r23, r23
    867c:	88 1f       	adc	r24, r24
    867e:	da f7       	brpl	.-10     	; 0x8676 <__fp_mintl+0x22>
    8680:	88 0f       	add	r24, r24
    8682:	96 95       	lsr	r25
    8684:	87 95       	ror	r24
    8686:	97 f9       	bld	r25, 7
    8688:	08 95       	ret

0000868a <__fp_mpack>:
    868a:	9f 3f       	cpi	r25, 0xFF	; 255
    868c:	31 f0       	breq	.+12     	; 0x869a <__fp_mpack_finite+0xc>

0000868e <__fp_mpack_finite>:
    868e:	91 50       	subi	r25, 0x01	; 1
    8690:	20 f4       	brcc	.+8      	; 0x869a <__fp_mpack_finite+0xc>
    8692:	87 95       	ror	r24
    8694:	77 95       	ror	r23
    8696:	67 95       	ror	r22
    8698:	b7 95       	ror	r27
    869a:	88 0f       	add	r24, r24
    869c:	91 1d       	adc	r25, r1
    869e:	96 95       	lsr	r25
    86a0:	87 95       	ror	r24
    86a2:	97 f9       	bld	r25, 7
    86a4:	08 95       	ret

000086a6 <__fp_nan>:
    86a6:	9f ef       	ldi	r25, 0xFF	; 255
    86a8:	80 ec       	ldi	r24, 0xC0	; 192
    86aa:	08 95       	ret

000086ac <__fp_powser>:
    86ac:	df 93       	push	r29
    86ae:	cf 93       	push	r28
    86b0:	1f 93       	push	r17
    86b2:	0f 93       	push	r16
    86b4:	ff 92       	push	r15
    86b6:	ef 92       	push	r14
    86b8:	df 92       	push	r13
    86ba:	7b 01       	movw	r14, r22
    86bc:	8c 01       	movw	r16, r24
    86be:	68 94       	set
    86c0:	05 c0       	rjmp	.+10     	; 0x86cc <__fp_powser+0x20>
    86c2:	da 2e       	mov	r13, r26
    86c4:	ef 01       	movw	r28, r30
    86c6:	8d d1       	rcall	.+794    	; 0x89e2 <__mulsf3x>
    86c8:	fe 01       	movw	r30, r28
    86ca:	e8 94       	clt
    86cc:	a5 91       	lpm	r26, Z+
    86ce:	25 91       	lpm	r18, Z+
    86d0:	35 91       	lpm	r19, Z+
    86d2:	45 91       	lpm	r20, Z+
    86d4:	55 91       	lpm	r21, Z+
    86d6:	ae f3       	brts	.-22     	; 0x86c2 <__fp_powser+0x16>
    86d8:	ef 01       	movw	r28, r30
    86da:	27 de       	rcall	.-946    	; 0x832a <__addsf3x>
    86dc:	fe 01       	movw	r30, r28
    86de:	97 01       	movw	r18, r14
    86e0:	a8 01       	movw	r20, r16
    86e2:	da 94       	dec	r13
    86e4:	79 f7       	brne	.-34     	; 0x86c4 <__fp_powser+0x18>
    86e6:	df 90       	pop	r13
    86e8:	ef 90       	pop	r14
    86ea:	ff 90       	pop	r15
    86ec:	0f 91       	pop	r16
    86ee:	1f 91       	pop	r17
    86f0:	cf 91       	pop	r28
    86f2:	df 91       	pop	r29
    86f4:	08 95       	ret

000086f6 <__fp_pscA>:
    86f6:	00 24       	eor	r0, r0
    86f8:	0a 94       	dec	r0
    86fa:	16 16       	cp	r1, r22
    86fc:	17 06       	cpc	r1, r23
    86fe:	18 06       	cpc	r1, r24
    8700:	09 06       	cpc	r0, r25
    8702:	08 95       	ret

00008704 <__fp_pscB>:
    8704:	00 24       	eor	r0, r0
    8706:	0a 94       	dec	r0
    8708:	12 16       	cp	r1, r18
    870a:	13 06       	cpc	r1, r19
    870c:	14 06       	cpc	r1, r20
    870e:	05 06       	cpc	r0, r21
    8710:	08 95       	ret
    8712:	c9 cf       	rjmp	.-110    	; 0x86a6 <__fp_nan>

00008714 <__fp_rempio2>:
    8714:	50 d0       	rcall	.+160    	; 0x87b6 <__fp_splitA>
    8716:	e8 f3       	brcs	.-6      	; 0x8712 <__fp_pscB+0xe>
    8718:	e8 94       	clt
    871a:	e0 e0       	ldi	r30, 0x00	; 0
    871c:	bb 27       	eor	r27, r27
    871e:	9f 57       	subi	r25, 0x7F	; 127
    8720:	f0 f0       	brcs	.+60     	; 0x875e <__fp_rempio2+0x4a>
    8722:	2a ed       	ldi	r18, 0xDA	; 218
    8724:	3f e0       	ldi	r19, 0x0F	; 15
    8726:	49 ec       	ldi	r20, 0xC9	; 201
    8728:	06 c0       	rjmp	.+12     	; 0x8736 <__fp_rempio2+0x22>
    872a:	ee 0f       	add	r30, r30
    872c:	bb 0f       	add	r27, r27
    872e:	66 1f       	adc	r22, r22
    8730:	77 1f       	adc	r23, r23
    8732:	88 1f       	adc	r24, r24
    8734:	28 f0       	brcs	.+10     	; 0x8740 <__fp_rempio2+0x2c>
    8736:	b2 3a       	cpi	r27, 0xA2	; 162
    8738:	62 07       	cpc	r22, r18
    873a:	73 07       	cpc	r23, r19
    873c:	84 07       	cpc	r24, r20
    873e:	28 f0       	brcs	.+10     	; 0x874a <__fp_rempio2+0x36>
    8740:	b2 5a       	subi	r27, 0xA2	; 162
    8742:	62 0b       	sbc	r22, r18
    8744:	73 0b       	sbc	r23, r19
    8746:	84 0b       	sbc	r24, r20
    8748:	e3 95       	inc	r30
    874a:	9a 95       	dec	r25
    874c:	72 f7       	brpl	.-36     	; 0x872a <__fp_rempio2+0x16>
    874e:	80 38       	cpi	r24, 0x80	; 128
    8750:	30 f4       	brcc	.+12     	; 0x875e <__fp_rempio2+0x4a>
    8752:	9a 95       	dec	r25
    8754:	bb 0f       	add	r27, r27
    8756:	66 1f       	adc	r22, r22
    8758:	77 1f       	adc	r23, r23
    875a:	88 1f       	adc	r24, r24
    875c:	d2 f7       	brpl	.-12     	; 0x8752 <__fp_rempio2+0x3e>
    875e:	90 48       	sbci	r25, 0x80	; 128
    8760:	96 cf       	rjmp	.-212    	; 0x868e <__fp_mpack_finite>

00008762 <__fp_round>:
    8762:	09 2e       	mov	r0, r25
    8764:	03 94       	inc	r0
    8766:	00 0c       	add	r0, r0
    8768:	11 f4       	brne	.+4      	; 0x876e <__fp_round+0xc>
    876a:	88 23       	and	r24, r24
    876c:	52 f0       	brmi	.+20     	; 0x8782 <__fp_round+0x20>
    876e:	bb 0f       	add	r27, r27
    8770:	40 f4       	brcc	.+16     	; 0x8782 <__fp_round+0x20>
    8772:	bf 2b       	or	r27, r31
    8774:	11 f4       	brne	.+4      	; 0x877a <__fp_round+0x18>
    8776:	60 ff       	sbrs	r22, 0
    8778:	04 c0       	rjmp	.+8      	; 0x8782 <__fp_round+0x20>
    877a:	6f 5f       	subi	r22, 0xFF	; 255
    877c:	7f 4f       	sbci	r23, 0xFF	; 255
    877e:	8f 4f       	sbci	r24, 0xFF	; 255
    8780:	9f 4f       	sbci	r25, 0xFF	; 255
    8782:	08 95       	ret

00008784 <__fp_sinus>:
    8784:	ef 93       	push	r30
    8786:	e0 ff       	sbrs	r30, 0
    8788:	06 c0       	rjmp	.+12     	; 0x8796 <__fp_sinus+0x12>
    878a:	a2 ea       	ldi	r26, 0xA2	; 162
    878c:	2a ed       	ldi	r18, 0xDA	; 218
    878e:	3f e0       	ldi	r19, 0x0F	; 15
    8790:	49 ec       	ldi	r20, 0xC9	; 201
    8792:	5f eb       	ldi	r21, 0xBF	; 191
    8794:	ca dd       	rcall	.-1132   	; 0x832a <__addsf3x>
    8796:	e5 df       	rcall	.-54     	; 0x8762 <__fp_round>
    8798:	0f 90       	pop	r0
    879a:	03 94       	inc	r0
    879c:	01 fc       	sbrc	r0, 1
    879e:	90 58       	subi	r25, 0x80	; 128
    87a0:	e5 e1       	ldi	r30, 0x15	; 21
    87a2:	f2 e0       	ldi	r31, 0x02	; 2
    87a4:	d2 c1       	rjmp	.+932    	; 0x8b4a <__fp_powsodd>

000087a6 <__fp_split3>:
    87a6:	57 fd       	sbrc	r21, 7
    87a8:	90 58       	subi	r25, 0x80	; 128
    87aa:	44 0f       	add	r20, r20
    87ac:	55 1f       	adc	r21, r21
    87ae:	59 f0       	breq	.+22     	; 0x87c6 <__fp_splitA+0x10>
    87b0:	5f 3f       	cpi	r21, 0xFF	; 255
    87b2:	71 f0       	breq	.+28     	; 0x87d0 <__fp_splitA+0x1a>
    87b4:	47 95       	ror	r20

000087b6 <__fp_splitA>:
    87b6:	88 0f       	add	r24, r24
    87b8:	97 fb       	bst	r25, 7
    87ba:	99 1f       	adc	r25, r25
    87bc:	61 f0       	breq	.+24     	; 0x87d6 <__fp_splitA+0x20>
    87be:	9f 3f       	cpi	r25, 0xFF	; 255
    87c0:	79 f0       	breq	.+30     	; 0x87e0 <__fp_splitA+0x2a>
    87c2:	87 95       	ror	r24
    87c4:	08 95       	ret
    87c6:	12 16       	cp	r1, r18
    87c8:	13 06       	cpc	r1, r19
    87ca:	14 06       	cpc	r1, r20
    87cc:	55 1f       	adc	r21, r21
    87ce:	f2 cf       	rjmp	.-28     	; 0x87b4 <__fp_split3+0xe>
    87d0:	46 95       	lsr	r20
    87d2:	f1 df       	rcall	.-30     	; 0x87b6 <__fp_splitA>
    87d4:	08 c0       	rjmp	.+16     	; 0x87e6 <__fp_splitA+0x30>
    87d6:	16 16       	cp	r1, r22
    87d8:	17 06       	cpc	r1, r23
    87da:	18 06       	cpc	r1, r24
    87dc:	99 1f       	adc	r25, r25
    87de:	f1 cf       	rjmp	.-30     	; 0x87c2 <__fp_splitA+0xc>
    87e0:	86 95       	lsr	r24
    87e2:	71 05       	cpc	r23, r1
    87e4:	61 05       	cpc	r22, r1
    87e6:	08 94       	sec
    87e8:	08 95       	ret

000087ea <__fp_trunc>:
    87ea:	e5 df       	rcall	.-54     	; 0x87b6 <__fp_splitA>
    87ec:	a0 f0       	brcs	.+40     	; 0x8816 <__fp_trunc+0x2c>
    87ee:	be e7       	ldi	r27, 0x7E	; 126
    87f0:	b9 17       	cp	r27, r25
    87f2:	88 f4       	brcc	.+34     	; 0x8816 <__fp_trunc+0x2c>
    87f4:	bb 27       	eor	r27, r27
    87f6:	9f 38       	cpi	r25, 0x8F	; 143
    87f8:	60 f4       	brcc	.+24     	; 0x8812 <__fp_trunc+0x28>
    87fa:	16 16       	cp	r1, r22
    87fc:	b1 1d       	adc	r27, r1
    87fe:	67 2f       	mov	r22, r23
    8800:	78 2f       	mov	r23, r24
    8802:	88 27       	eor	r24, r24
    8804:	98 5f       	subi	r25, 0xF8	; 248
    8806:	f7 cf       	rjmp	.-18     	; 0x87f6 <__fp_trunc+0xc>
    8808:	86 95       	lsr	r24
    880a:	77 95       	ror	r23
    880c:	67 95       	ror	r22
    880e:	b1 1d       	adc	r27, r1
    8810:	93 95       	inc	r25
    8812:	96 39       	cpi	r25, 0x96	; 150
    8814:	c8 f3       	brcs	.-14     	; 0x8808 <__fp_trunc+0x1e>
    8816:	08 95       	ret

00008818 <__fp_zero>:
    8818:	e8 94       	clt

0000881a <__fp_szero>:
    881a:	bb 27       	eor	r27, r27
    881c:	66 27       	eor	r22, r22
    881e:	77 27       	eor	r23, r23
    8820:	cb 01       	movw	r24, r22
    8822:	97 f9       	bld	r25, 7
    8824:	08 95       	ret

00008826 <__gesf2>:
    8826:	ec de       	rcall	.-552    	; 0x8600 <__fp_cmp>
    8828:	08 f4       	brcc	.+2      	; 0x882c <__gesf2+0x6>
    882a:	8f ef       	ldi	r24, 0xFF	; 255
    882c:	08 95       	ret
    882e:	63 df       	rcall	.-314    	; 0x86f6 <__fp_pscA>
    8830:	19 f0       	breq	.+6      	; 0x8838 <__gesf2+0x12>
    8832:	68 df       	rcall	.-304    	; 0x8704 <__fp_pscB>
    8834:	09 f0       	breq	.+2      	; 0x8838 <__gesf2+0x12>
    8836:	37 cf       	rjmp	.-402    	; 0x86a6 <__fp_nan>
    8838:	07 cf       	rjmp	.-498    	; 0x8648 <__fp_inf>
    883a:	b9 01       	movw	r22, r18
    883c:	ca 01       	movw	r24, r20
    883e:	25 cf       	rjmp	.-438    	; 0x868a <__fp_mpack>

00008840 <hypot>:
    8840:	9f 77       	andi	r25, 0x7F	; 127
    8842:	5f 77       	andi	r21, 0x7F	; 127
    8844:	b0 df       	rcall	.-160    	; 0x87a6 <__fp_split3>
    8846:	98 f3       	brcs	.-26     	; 0x882e <__gesf2+0x8>
    8848:	99 23       	and	r25, r25
    884a:	b9 f3       	breq	.-18     	; 0x883a <__gesf2+0x14>
    884c:	55 23       	and	r21, r21
    884e:	b9 f3       	breq	.-18     	; 0x883e <__gesf2+0x18>
    8850:	ff 27       	eor	r31, r31
    8852:	95 17       	cp	r25, r21
    8854:	58 f4       	brcc	.+22     	; 0x886c <hypot+0x2c>
    8856:	e5 2f       	mov	r30, r21
    8858:	e9 1b       	sub	r30, r25
    885a:	ed 30       	cpi	r30, 0x0D	; 13
    885c:	70 f7       	brcc	.-36     	; 0x883a <__gesf2+0x14>
    885e:	5e 3b       	cpi	r21, 0xBE	; 190
    8860:	10 f0       	brcs	.+4      	; 0x8866 <hypot+0x26>
    8862:	f1 e4       	ldi	r31, 0x41	; 65
    8864:	1c c0       	rjmp	.+56     	; 0x889e <hypot+0x5e>
    8866:	90 34       	cpi	r25, 0x40	; 64
    8868:	e0 f4       	brcc	.+56     	; 0x88a2 <hypot+0x62>
    886a:	0a c0       	rjmp	.+20     	; 0x8880 <hypot+0x40>
    886c:	e9 2f       	mov	r30, r25
    886e:	e5 1b       	sub	r30, r21
    8870:	ed 30       	cpi	r30, 0x0D	; 13
    8872:	28 f7       	brcc	.-54     	; 0x883e <__gesf2+0x18>
    8874:	9e 3b       	cpi	r25, 0xBE	; 190
    8876:	10 f0       	brcs	.+4      	; 0x887c <hypot+0x3c>
    8878:	f1 e4       	ldi	r31, 0x41	; 65
    887a:	11 c0       	rjmp	.+34     	; 0x889e <hypot+0x5e>
    887c:	50 34       	cpi	r21, 0x40	; 64
    887e:	88 f4       	brcc	.+34     	; 0x88a2 <hypot+0x62>
    8880:	f9 ea       	ldi	r31, 0xA9	; 169
    8882:	88 23       	and	r24, r24
    8884:	2a f0       	brmi	.+10     	; 0x8890 <hypot+0x50>
    8886:	9a 95       	dec	r25
    8888:	66 0f       	add	r22, r22
    888a:	77 1f       	adc	r23, r23
    888c:	88 1f       	adc	r24, r24
    888e:	da f7       	brpl	.-10     	; 0x8886 <hypot+0x46>
    8890:	44 23       	and	r20, r20
    8892:	2a f0       	brmi	.+10     	; 0x889e <hypot+0x5e>
    8894:	5a 95       	dec	r21
    8896:	22 0f       	add	r18, r18
    8898:	33 1f       	adc	r19, r19
    889a:	44 1f       	adc	r20, r20
    889c:	da f7       	brpl	.-10     	; 0x8894 <hypot+0x54>
    889e:	9f 1b       	sub	r25, r31
    88a0:	5f 1b       	sub	r21, r31
    88a2:	ff 93       	push	r31
    88a4:	1f 93       	push	r17
    88a6:	0f 93       	push	r16
    88a8:	ff 92       	push	r15
    88aa:	ef 92       	push	r14
    88ac:	79 01       	movw	r14, r18
    88ae:	8a 01       	movw	r16, r20
    88b0:	bb 27       	eor	r27, r27
    88b2:	ab 2f       	mov	r26, r27
    88b4:	9b 01       	movw	r18, r22
    88b6:	ac 01       	movw	r20, r24
    88b8:	96 d0       	rcall	.+300    	; 0x89e6 <__mulsf3_pse>
    88ba:	97 01       	movw	r18, r14
    88bc:	a8 01       	movw	r20, r16
    88be:	bf 93       	push	r27
    88c0:	7b 01       	movw	r14, r22
    88c2:	8c 01       	movw	r16, r24
    88c4:	aa 27       	eor	r26, r26
    88c6:	ba 2f       	mov	r27, r26
    88c8:	b9 01       	movw	r22, r18
    88ca:	ca 01       	movw	r24, r20
    88cc:	8c d0       	rcall	.+280    	; 0x89e6 <__mulsf3_pse>
    88ce:	af 91       	pop	r26
    88d0:	97 01       	movw	r18, r14
    88d2:	a8 01       	movw	r20, r16
    88d4:	ef 90       	pop	r14
    88d6:	ff 90       	pop	r15
    88d8:	0f 91       	pop	r16
    88da:	1f 91       	pop	r17
    88dc:	26 dd       	rcall	.-1460   	; 0x832a <__addsf3x>
    88de:	41 df       	rcall	.-382    	; 0x8762 <__fp_round>
    88e0:	e1 d0       	rcall	.+450    	; 0x8aa4 <sqrt>
    88e2:	4f 91       	pop	r20
    88e4:	40 ff       	sbrs	r20, 0
    88e6:	08 95       	ret
    88e8:	55 27       	eor	r21, r21
    88ea:	47 fd       	sbrc	r20, 7
    88ec:	50 95       	com	r21
    88ee:	09 c0       	rjmp	.+18     	; 0x8902 <ldexp>

000088f0 <inverse>:
    88f0:	9b 01       	movw	r18, r22
    88f2:	ac 01       	movw	r20, r24
    88f4:	60 e0       	ldi	r22, 0x00	; 0
    88f6:	70 e0       	ldi	r23, 0x00	; 0
    88f8:	80 e8       	ldi	r24, 0x80	; 128
    88fa:	9f e3       	ldi	r25, 0x3F	; 63
    88fc:	ab cd       	rjmp	.-1194   	; 0x8454 <__divsf3>
    88fe:	a4 ce       	rjmp	.-696    	; 0x8648 <__fp_inf>
    8900:	c4 ce       	rjmp	.-632    	; 0x868a <__fp_mpack>

00008902 <ldexp>:
    8902:	59 df       	rcall	.-334    	; 0x87b6 <__fp_splitA>
    8904:	e8 f3       	brcs	.-6      	; 0x8900 <inverse+0x10>
    8906:	99 23       	and	r25, r25
    8908:	d9 f3       	breq	.-10     	; 0x8900 <inverse+0x10>
    890a:	94 0f       	add	r25, r20
    890c:	51 1d       	adc	r21, r1
    890e:	bb f3       	brvs	.-18     	; 0x88fe <inverse+0xe>
    8910:	91 50       	subi	r25, 0x01	; 1
    8912:	50 40       	sbci	r21, 0x00	; 0
    8914:	94 f0       	brlt	.+36     	; 0x893a <ldexp+0x38>
    8916:	59 f0       	breq	.+22     	; 0x892e <ldexp+0x2c>
    8918:	88 23       	and	r24, r24
    891a:	32 f0       	brmi	.+12     	; 0x8928 <ldexp+0x26>
    891c:	66 0f       	add	r22, r22
    891e:	77 1f       	adc	r23, r23
    8920:	88 1f       	adc	r24, r24
    8922:	91 50       	subi	r25, 0x01	; 1
    8924:	50 40       	sbci	r21, 0x00	; 0
    8926:	c1 f7       	brne	.-16     	; 0x8918 <ldexp+0x16>
    8928:	9e 3f       	cpi	r25, 0xFE	; 254
    892a:	51 05       	cpc	r21, r1
    892c:	44 f7       	brge	.-48     	; 0x88fe <inverse+0xe>
    892e:	88 0f       	add	r24, r24
    8930:	91 1d       	adc	r25, r1
    8932:	96 95       	lsr	r25
    8934:	87 95       	ror	r24
    8936:	97 f9       	bld	r25, 7
    8938:	08 95       	ret
    893a:	5f 3f       	cpi	r21, 0xFF	; 255
    893c:	ac f0       	brlt	.+42     	; 0x8968 <ldexp+0x66>
    893e:	98 3e       	cpi	r25, 0xE8	; 232
    8940:	9c f0       	brlt	.+38     	; 0x8968 <ldexp+0x66>
    8942:	bb 27       	eor	r27, r27
    8944:	86 95       	lsr	r24
    8946:	77 95       	ror	r23
    8948:	67 95       	ror	r22
    894a:	b7 95       	ror	r27
    894c:	08 f4       	brcc	.+2      	; 0x8950 <ldexp+0x4e>
    894e:	b1 60       	ori	r27, 0x01	; 1
    8950:	93 95       	inc	r25
    8952:	c1 f7       	brne	.-16     	; 0x8944 <ldexp+0x42>
    8954:	bb 0f       	add	r27, r27
    8956:	58 f7       	brcc	.-42     	; 0x892e <ldexp+0x2c>
    8958:	11 f4       	brne	.+4      	; 0x895e <ldexp+0x5c>
    895a:	60 ff       	sbrs	r22, 0
    895c:	e8 cf       	rjmp	.-48     	; 0x892e <ldexp+0x2c>
    895e:	6f 5f       	subi	r22, 0xFF	; 255
    8960:	7f 4f       	sbci	r23, 0xFF	; 255
    8962:	8f 4f       	sbci	r24, 0xFF	; 255
    8964:	9f 4f       	sbci	r25, 0xFF	; 255
    8966:	e3 cf       	rjmp	.-58     	; 0x892e <ldexp+0x2c>
    8968:	58 cf       	rjmp	.-336    	; 0x881a <__fp_szero>

0000896a <lround>:
    896a:	25 df       	rcall	.-438    	; 0x87b6 <__fp_splitA>
    896c:	58 f1       	brcs	.+86     	; 0x89c4 <lround+0x5a>
    896e:	9e 57       	subi	r25, 0x7E	; 126
    8970:	58 f1       	brcs	.+86     	; 0x89c8 <lround+0x5e>
    8972:	98 51       	subi	r25, 0x18	; 24
    8974:	a0 f0       	brcs	.+40     	; 0x899e <lround+0x34>
    8976:	e9 f0       	breq	.+58     	; 0x89b2 <lround+0x48>
    8978:	98 30       	cpi	r25, 0x08	; 8
    897a:	20 f5       	brcc	.+72     	; 0x89c4 <lround+0x5a>
    897c:	09 2e       	mov	r0, r25
    897e:	99 27       	eor	r25, r25
    8980:	66 0f       	add	r22, r22
    8982:	77 1f       	adc	r23, r23
    8984:	88 1f       	adc	r24, r24
    8986:	99 1f       	adc	r25, r25
    8988:	0a 94       	dec	r0
    898a:	d1 f7       	brne	.-12     	; 0x8980 <lround+0x16>
    898c:	12 c0       	rjmp	.+36     	; 0x89b2 <lround+0x48>
    898e:	06 2e       	mov	r0, r22
    8990:	67 2f       	mov	r22, r23
    8992:	78 2f       	mov	r23, r24
    8994:	88 27       	eor	r24, r24
    8996:	98 5f       	subi	r25, 0xF8	; 248
    8998:	11 f4       	brne	.+4      	; 0x899e <lround+0x34>
    899a:	00 0c       	add	r0, r0
    899c:	07 c0       	rjmp	.+14     	; 0x89ac <lround+0x42>
    899e:	99 3f       	cpi	r25, 0xF9	; 249
    89a0:	b4 f3       	brlt	.-20     	; 0x898e <lround+0x24>
    89a2:	86 95       	lsr	r24
    89a4:	77 95       	ror	r23
    89a6:	67 95       	ror	r22
    89a8:	93 95       	inc	r25
    89aa:	d9 f7       	brne	.-10     	; 0x89a2 <lround+0x38>
    89ac:	61 1d       	adc	r22, r1
    89ae:	71 1d       	adc	r23, r1
    89b0:	81 1d       	adc	r24, r1
    89b2:	3e f4       	brtc	.+14     	; 0x89c2 <lround+0x58>
    89b4:	90 95       	com	r25
    89b6:	80 95       	com	r24
    89b8:	70 95       	com	r23
    89ba:	61 95       	neg	r22
    89bc:	7f 4f       	sbci	r23, 0xFF	; 255
    89be:	8f 4f       	sbci	r24, 0xFF	; 255
    89c0:	9f 4f       	sbci	r25, 0xFF	; 255
    89c2:	08 95       	ret
    89c4:	68 94       	set
    89c6:	29 cf       	rjmp	.-430    	; 0x881a <__fp_szero>
    89c8:	27 cf       	rjmp	.-434    	; 0x8818 <__fp_zero>

000089ca <__mulsf3>:
    89ca:	0b d0       	rcall	.+22     	; 0x89e2 <__mulsf3x>
    89cc:	ca ce       	rjmp	.-620    	; 0x8762 <__fp_round>
    89ce:	93 de       	rcall	.-730    	; 0x86f6 <__fp_pscA>
    89d0:	28 f0       	brcs	.+10     	; 0x89dc <__mulsf3+0x12>
    89d2:	98 de       	rcall	.-720    	; 0x8704 <__fp_pscB>
    89d4:	18 f0       	brcs	.+6      	; 0x89dc <__mulsf3+0x12>
    89d6:	95 23       	and	r25, r21
    89d8:	09 f0       	breq	.+2      	; 0x89dc <__mulsf3+0x12>
    89da:	36 ce       	rjmp	.-916    	; 0x8648 <__fp_inf>
    89dc:	64 ce       	rjmp	.-824    	; 0x86a6 <__fp_nan>
    89de:	11 24       	eor	r1, r1
    89e0:	1c cf       	rjmp	.-456    	; 0x881a <__fp_szero>

000089e2 <__mulsf3x>:
    89e2:	e1 de       	rcall	.-574    	; 0x87a6 <__fp_split3>
    89e4:	a0 f3       	brcs	.-24     	; 0x89ce <__mulsf3+0x4>

000089e6 <__mulsf3_pse>:
    89e6:	95 9f       	mul	r25, r21
    89e8:	d1 f3       	breq	.-12     	; 0x89de <__mulsf3+0x14>
    89ea:	95 0f       	add	r25, r21
    89ec:	50 e0       	ldi	r21, 0x00	; 0
    89ee:	55 1f       	adc	r21, r21
    89f0:	62 9f       	mul	r22, r18
    89f2:	f0 01       	movw	r30, r0
    89f4:	72 9f       	mul	r23, r18
    89f6:	bb 27       	eor	r27, r27
    89f8:	f0 0d       	add	r31, r0
    89fa:	b1 1d       	adc	r27, r1
    89fc:	63 9f       	mul	r22, r19
    89fe:	aa 27       	eor	r26, r26
    8a00:	f0 0d       	add	r31, r0
    8a02:	b1 1d       	adc	r27, r1
    8a04:	aa 1f       	adc	r26, r26
    8a06:	64 9f       	mul	r22, r20
    8a08:	66 27       	eor	r22, r22
    8a0a:	b0 0d       	add	r27, r0
    8a0c:	a1 1d       	adc	r26, r1
    8a0e:	66 1f       	adc	r22, r22
    8a10:	82 9f       	mul	r24, r18
    8a12:	22 27       	eor	r18, r18
    8a14:	b0 0d       	add	r27, r0
    8a16:	a1 1d       	adc	r26, r1
    8a18:	62 1f       	adc	r22, r18
    8a1a:	73 9f       	mul	r23, r19
    8a1c:	b0 0d       	add	r27, r0
    8a1e:	a1 1d       	adc	r26, r1
    8a20:	62 1f       	adc	r22, r18
    8a22:	83 9f       	mul	r24, r19
    8a24:	a0 0d       	add	r26, r0
    8a26:	61 1d       	adc	r22, r1
    8a28:	22 1f       	adc	r18, r18
    8a2a:	74 9f       	mul	r23, r20
    8a2c:	33 27       	eor	r19, r19
    8a2e:	a0 0d       	add	r26, r0
    8a30:	61 1d       	adc	r22, r1
    8a32:	23 1f       	adc	r18, r19
    8a34:	84 9f       	mul	r24, r20
    8a36:	60 0d       	add	r22, r0
    8a38:	21 1d       	adc	r18, r1
    8a3a:	82 2f       	mov	r24, r18
    8a3c:	76 2f       	mov	r23, r22
    8a3e:	6a 2f       	mov	r22, r26
    8a40:	11 24       	eor	r1, r1
    8a42:	9f 57       	subi	r25, 0x7F	; 127
    8a44:	50 40       	sbci	r21, 0x00	; 0
    8a46:	8a f0       	brmi	.+34     	; 0x8a6a <__mulsf3_pse+0x84>
    8a48:	e1 f0       	breq	.+56     	; 0x8a82 <__mulsf3_pse+0x9c>
    8a4a:	88 23       	and	r24, r24
    8a4c:	4a f0       	brmi	.+18     	; 0x8a60 <__mulsf3_pse+0x7a>
    8a4e:	ee 0f       	add	r30, r30
    8a50:	ff 1f       	adc	r31, r31
    8a52:	bb 1f       	adc	r27, r27
    8a54:	66 1f       	adc	r22, r22
    8a56:	77 1f       	adc	r23, r23
    8a58:	88 1f       	adc	r24, r24
    8a5a:	91 50       	subi	r25, 0x01	; 1
    8a5c:	50 40       	sbci	r21, 0x00	; 0
    8a5e:	a9 f7       	brne	.-22     	; 0x8a4a <__mulsf3_pse+0x64>
    8a60:	9e 3f       	cpi	r25, 0xFE	; 254
    8a62:	51 05       	cpc	r21, r1
    8a64:	70 f0       	brcs	.+28     	; 0x8a82 <__mulsf3_pse+0x9c>
    8a66:	f0 cd       	rjmp	.-1056   	; 0x8648 <__fp_inf>
    8a68:	d8 ce       	rjmp	.-592    	; 0x881a <__fp_szero>
    8a6a:	5f 3f       	cpi	r21, 0xFF	; 255
    8a6c:	ec f3       	brlt	.-6      	; 0x8a68 <__mulsf3_pse+0x82>
    8a6e:	98 3e       	cpi	r25, 0xE8	; 232
    8a70:	dc f3       	brlt	.-10     	; 0x8a68 <__mulsf3_pse+0x82>
    8a72:	86 95       	lsr	r24
    8a74:	77 95       	ror	r23
    8a76:	67 95       	ror	r22
    8a78:	b7 95       	ror	r27
    8a7a:	f7 95       	ror	r31
    8a7c:	e7 95       	ror	r30
    8a7e:	9f 5f       	subi	r25, 0xFF	; 255
    8a80:	c1 f7       	brne	.-16     	; 0x8a72 <__mulsf3_pse+0x8c>
    8a82:	fe 2b       	or	r31, r30
    8a84:	88 0f       	add	r24, r24
    8a86:	91 1d       	adc	r25, r1
    8a88:	96 95       	lsr	r25
    8a8a:	87 95       	ror	r24
    8a8c:	97 f9       	bld	r25, 7
    8a8e:	08 95       	ret

00008a90 <sin>:
    8a90:	9f 93       	push	r25
    8a92:	40 de       	rcall	.-896    	; 0x8714 <__fp_rempio2>
    8a94:	0f 90       	pop	r0
    8a96:	07 fc       	sbrc	r0, 7
    8a98:	ee 5f       	subi	r30, 0xFE	; 254
    8a9a:	74 ce       	rjmp	.-792    	; 0x8784 <__fp_sinus>
    8a9c:	11 f4       	brne	.+4      	; 0x8aa2 <sin+0x12>
    8a9e:	0e f4       	brtc	.+2      	; 0x8aa2 <sin+0x12>
    8aa0:	02 ce       	rjmp	.-1020   	; 0x86a6 <__fp_nan>
    8aa2:	f3 cd       	rjmp	.-1050   	; 0x868a <__fp_mpack>

00008aa4 <sqrt>:
    8aa4:	88 de       	rcall	.-752    	; 0x87b6 <__fp_splitA>
    8aa6:	d0 f3       	brcs	.-12     	; 0x8a9c <sin+0xc>
    8aa8:	99 23       	and	r25, r25
    8aaa:	d9 f3       	breq	.-10     	; 0x8aa2 <sin+0x12>
    8aac:	ce f3       	brts	.-14     	; 0x8aa0 <sin+0x10>
    8aae:	9f 57       	subi	r25, 0x7F	; 127
    8ab0:	55 0b       	sbc	r21, r21
    8ab2:	87 ff       	sbrs	r24, 7
    8ab4:	43 d0       	rcall	.+134    	; 0x8b3c <__fp_norm2>
    8ab6:	00 24       	eor	r0, r0
    8ab8:	a0 e6       	ldi	r26, 0x60	; 96
    8aba:	40 ea       	ldi	r20, 0xA0	; 160
    8abc:	90 01       	movw	r18, r0
    8abe:	80 58       	subi	r24, 0x80	; 128
    8ac0:	56 95       	lsr	r21
    8ac2:	97 95       	ror	r25
    8ac4:	28 f4       	brcc	.+10     	; 0x8ad0 <sqrt+0x2c>
    8ac6:	80 5c       	subi	r24, 0xC0	; 192
    8ac8:	66 0f       	add	r22, r22
    8aca:	77 1f       	adc	r23, r23
    8acc:	88 1f       	adc	r24, r24
    8ace:	20 f0       	brcs	.+8      	; 0x8ad8 <sqrt+0x34>
    8ad0:	26 17       	cp	r18, r22
    8ad2:	37 07       	cpc	r19, r23
    8ad4:	48 07       	cpc	r20, r24
    8ad6:	30 f4       	brcc	.+12     	; 0x8ae4 <sqrt+0x40>
    8ad8:	62 1b       	sub	r22, r18
    8ada:	73 0b       	sbc	r23, r19
    8adc:	84 0b       	sbc	r24, r20
    8ade:	20 29       	or	r18, r0
    8ae0:	31 29       	or	r19, r1
    8ae2:	4a 2b       	or	r20, r26
    8ae4:	a6 95       	lsr	r26
    8ae6:	17 94       	ror	r1
    8ae8:	07 94       	ror	r0
    8aea:	20 25       	eor	r18, r0
    8aec:	31 25       	eor	r19, r1
    8aee:	4a 27       	eor	r20, r26
    8af0:	58 f7       	brcc	.-42     	; 0x8ac8 <sqrt+0x24>
    8af2:	66 0f       	add	r22, r22
    8af4:	77 1f       	adc	r23, r23
    8af6:	88 1f       	adc	r24, r24
    8af8:	20 f0       	brcs	.+8      	; 0x8b02 <sqrt+0x5e>
    8afa:	26 17       	cp	r18, r22
    8afc:	37 07       	cpc	r19, r23
    8afe:	48 07       	cpc	r20, r24
    8b00:	30 f4       	brcc	.+12     	; 0x8b0e <sqrt+0x6a>
    8b02:	62 0b       	sbc	r22, r18
    8b04:	73 0b       	sbc	r23, r19
    8b06:	84 0b       	sbc	r24, r20
    8b08:	20 0d       	add	r18, r0
    8b0a:	31 1d       	adc	r19, r1
    8b0c:	41 1d       	adc	r20, r1
    8b0e:	a0 95       	com	r26
    8b10:	81 f7       	brne	.-32     	; 0x8af2 <sqrt+0x4e>
    8b12:	b9 01       	movw	r22, r18
    8b14:	84 2f       	mov	r24, r20
    8b16:	91 58       	subi	r25, 0x81	; 129
    8b18:	88 0f       	add	r24, r24
    8b1a:	96 95       	lsr	r25
    8b1c:	87 95       	ror	r24
    8b1e:	08 95       	ret

00008b20 <square>:
    8b20:	9b 01       	movw	r18, r22
    8b22:	ac 01       	movw	r20, r24
    8b24:	52 cf       	rjmp	.-348    	; 0x89ca <__mulsf3>

00008b26 <trunc>:
    8b26:	61 de       	rcall	.-830    	; 0x87ea <__fp_trunc>
    8b28:	20 f0       	brcs	.+8      	; 0x8b32 <trunc+0xc>
    8b2a:	9f 37       	cpi	r25, 0x7F	; 127
    8b2c:	08 f4       	brcc	.+2      	; 0x8b30 <trunc+0xa>
    8b2e:	75 ce       	rjmp	.-790    	; 0x881a <__fp_szero>
    8b30:	91 cd       	rjmp	.-1246   	; 0x8654 <__fp_mintl>
    8b32:	ab cd       	rjmp	.-1194   	; 0x868a <__fp_mpack>

00008b34 <__unordsf2>:
    8b34:	65 dd       	rcall	.-1334   	; 0x8600 <__fp_cmp>
    8b36:	88 0b       	sbc	r24, r24
    8b38:	99 0b       	sbc	r25, r25
    8b3a:	08 95       	ret

00008b3c <__fp_norm2>:
    8b3c:	91 50       	subi	r25, 0x01	; 1
    8b3e:	50 40       	sbci	r21, 0x00	; 0
    8b40:	66 0f       	add	r22, r22
    8b42:	77 1f       	adc	r23, r23
    8b44:	88 1f       	adc	r24, r24
    8b46:	d2 f7       	brpl	.-12     	; 0x8b3c <__fp_norm2>
    8b48:	08 95       	ret

00008b4a <__fp_powsodd>:
    8b4a:	9f 93       	push	r25
    8b4c:	8f 93       	push	r24
    8b4e:	7f 93       	push	r23
    8b50:	6f 93       	push	r22
    8b52:	ff 93       	push	r31
    8b54:	ef 93       	push	r30
    8b56:	9b 01       	movw	r18, r22
    8b58:	ac 01       	movw	r20, r24
    8b5a:	37 df       	rcall	.-402    	; 0x89ca <__mulsf3>
    8b5c:	ef 91       	pop	r30
    8b5e:	ff 91       	pop	r31
    8b60:	a5 dd       	rcall	.-1206   	; 0x86ac <__fp_powser>
    8b62:	2f 91       	pop	r18
    8b64:	3f 91       	pop	r19
    8b66:	4f 91       	pop	r20
    8b68:	5f 91       	pop	r21
    8b6a:	2f cf       	rjmp	.-418    	; 0x89ca <__mulsf3>

00008b6c <__mulsi3>:
    8b6c:	62 9f       	mul	r22, r18
    8b6e:	d0 01       	movw	r26, r0
    8b70:	73 9f       	mul	r23, r19
    8b72:	f0 01       	movw	r30, r0
    8b74:	82 9f       	mul	r24, r18
    8b76:	e0 0d       	add	r30, r0
    8b78:	f1 1d       	adc	r31, r1
    8b7a:	64 9f       	mul	r22, r20
    8b7c:	e0 0d       	add	r30, r0
    8b7e:	f1 1d       	adc	r31, r1
    8b80:	92 9f       	mul	r25, r18
    8b82:	f0 0d       	add	r31, r0
    8b84:	83 9f       	mul	r24, r19
    8b86:	f0 0d       	add	r31, r0
    8b88:	74 9f       	mul	r23, r20
    8b8a:	f0 0d       	add	r31, r0
    8b8c:	65 9f       	mul	r22, r21
    8b8e:	f0 0d       	add	r31, r0
    8b90:	99 27       	eor	r25, r25
    8b92:	72 9f       	mul	r23, r18
    8b94:	b0 0d       	add	r27, r0
    8b96:	e1 1d       	adc	r30, r1
    8b98:	f9 1f       	adc	r31, r25
    8b9a:	63 9f       	mul	r22, r19
    8b9c:	b0 0d       	add	r27, r0
    8b9e:	e1 1d       	adc	r30, r1
    8ba0:	f9 1f       	adc	r31, r25
    8ba2:	bd 01       	movw	r22, r26
    8ba4:	cf 01       	movw	r24, r30
    8ba6:	11 24       	eor	r1, r1
    8ba8:	08 95       	ret

00008baa <__udivmodsi4>:
    8baa:	a1 e2       	ldi	r26, 0x21	; 33
    8bac:	1a 2e       	mov	r1, r26
    8bae:	aa 1b       	sub	r26, r26
    8bb0:	bb 1b       	sub	r27, r27
    8bb2:	fd 01       	movw	r30, r26
    8bb4:	0d c0       	rjmp	.+26     	; 0x8bd0 <__udivmodsi4_ep>

00008bb6 <__udivmodsi4_loop>:
    8bb6:	aa 1f       	adc	r26, r26
    8bb8:	bb 1f       	adc	r27, r27
    8bba:	ee 1f       	adc	r30, r30
    8bbc:	ff 1f       	adc	r31, r31
    8bbe:	a2 17       	cp	r26, r18
    8bc0:	b3 07       	cpc	r27, r19
    8bc2:	e4 07       	cpc	r30, r20
    8bc4:	f5 07       	cpc	r31, r21
    8bc6:	20 f0       	brcs	.+8      	; 0x8bd0 <__udivmodsi4_ep>
    8bc8:	a2 1b       	sub	r26, r18
    8bca:	b3 0b       	sbc	r27, r19
    8bcc:	e4 0b       	sbc	r30, r20
    8bce:	f5 0b       	sbc	r31, r21

00008bd0 <__udivmodsi4_ep>:
    8bd0:	66 1f       	adc	r22, r22
    8bd2:	77 1f       	adc	r23, r23
    8bd4:	88 1f       	adc	r24, r24
    8bd6:	99 1f       	adc	r25, r25
    8bd8:	1a 94       	dec	r1
    8bda:	69 f7       	brne	.-38     	; 0x8bb6 <__udivmodsi4_loop>
    8bdc:	60 95       	com	r22
    8bde:	70 95       	com	r23
    8be0:	80 95       	com	r24
    8be2:	90 95       	com	r25
    8be4:	9b 01       	movw	r18, r22
    8be6:	ac 01       	movw	r20, r24
    8be8:	bd 01       	movw	r22, r26
    8bea:	cf 01       	movw	r24, r30
    8bec:	08 95       	ret

00008bee <__prologue_saves__>:
    8bee:	2f 92       	push	r2
    8bf0:	3f 92       	push	r3
    8bf2:	4f 92       	push	r4
    8bf4:	5f 92       	push	r5
    8bf6:	6f 92       	push	r6
    8bf8:	7f 92       	push	r7
    8bfa:	8f 92       	push	r8
    8bfc:	9f 92       	push	r9
    8bfe:	af 92       	push	r10
    8c00:	bf 92       	push	r11
    8c02:	cf 92       	push	r12
    8c04:	df 92       	push	r13
    8c06:	ef 92       	push	r14
    8c08:	ff 92       	push	r15
    8c0a:	0f 93       	push	r16
    8c0c:	1f 93       	push	r17
    8c0e:	cf 93       	push	r28
    8c10:	df 93       	push	r29
    8c12:	cd b7       	in	r28, 0x3d	; 61
    8c14:	de b7       	in	r29, 0x3e	; 62
    8c16:	ca 1b       	sub	r28, r26
    8c18:	db 0b       	sbc	r29, r27
    8c1a:	0f b6       	in	r0, 0x3f	; 63
    8c1c:	f8 94       	cli
    8c1e:	de bf       	out	0x3e, r29	; 62
    8c20:	0f be       	out	0x3f, r0	; 63
    8c22:	cd bf       	out	0x3d, r28	; 61
    8c24:	19 94       	eijmp

00008c26 <__epilogue_restores__>:
    8c26:	2a 88       	ldd	r2, Y+18	; 0x12
    8c28:	39 88       	ldd	r3, Y+17	; 0x11
    8c2a:	48 88       	ldd	r4, Y+16	; 0x10
    8c2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    8c2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    8c30:	7d 84       	ldd	r7, Y+13	; 0x0d
    8c32:	8c 84       	ldd	r8, Y+12	; 0x0c
    8c34:	9b 84       	ldd	r9, Y+11	; 0x0b
    8c36:	aa 84       	ldd	r10, Y+10	; 0x0a
    8c38:	b9 84       	ldd	r11, Y+9	; 0x09
    8c3a:	c8 84       	ldd	r12, Y+8	; 0x08
    8c3c:	df 80       	ldd	r13, Y+7	; 0x07
    8c3e:	ee 80       	ldd	r14, Y+6	; 0x06
    8c40:	fd 80       	ldd	r15, Y+5	; 0x05
    8c42:	0c 81       	ldd	r16, Y+4	; 0x04
    8c44:	1b 81       	ldd	r17, Y+3	; 0x03
    8c46:	aa 81       	ldd	r26, Y+2	; 0x02
    8c48:	b9 81       	ldd	r27, Y+1	; 0x01
    8c4a:	ce 0f       	add	r28, r30
    8c4c:	d1 1d       	adc	r29, r1
    8c4e:	0f b6       	in	r0, 0x3f	; 63
    8c50:	f8 94       	cli
    8c52:	de bf       	out	0x3e, r29	; 62
    8c54:	0f be       	out	0x3f, r0	; 63
    8c56:	cd bf       	out	0x3d, r28	; 61
    8c58:	ed 01       	movw	r28, r26
    8c5a:	08 95       	ret

00008c5c <strtod>:
    8c5c:	8f 92       	push	r8
    8c5e:	9f 92       	push	r9
    8c60:	af 92       	push	r10
    8c62:	bf 92       	push	r11
    8c64:	cf 92       	push	r12
    8c66:	df 92       	push	r13
    8c68:	ef 92       	push	r14
    8c6a:	ff 92       	push	r15
    8c6c:	0f 93       	push	r16
    8c6e:	1f 93       	push	r17
    8c70:	cf 93       	push	r28
    8c72:	df 93       	push	r29
    8c74:	ec 01       	movw	r28, r24
    8c76:	5b 01       	movw	r10, r22
    8c78:	61 15       	cp	r22, r1
    8c7a:	71 05       	cpc	r23, r1
    8c7c:	19 f0       	breq	.+6      	; 0x8c84 <strtod+0x28>
    8c7e:	fb 01       	movw	r30, r22
    8c80:	80 83       	st	Z, r24
    8c82:	91 83       	std	Z+1, r25	; 0x01
    8c84:	f9 90       	ld	r15, Y+
    8c86:	8f 2d       	mov	r24, r15
    8c88:	90 e0       	ldi	r25, 0x00	; 0
    8c8a:	0e 94 92 48 	call	0x9124	; 0x9124 <isspace>
    8c8e:	89 2b       	or	r24, r25
    8c90:	c9 f7       	brne	.-14     	; 0x8c84 <strtod+0x28>
    8c92:	fd e2       	ldi	r31, 0x2D	; 45
    8c94:	ff 16       	cp	r15, r31
    8c96:	21 f4       	brne	.+8      	; 0x8ca0 <strtod+0x44>
    8c98:	f9 90       	ld	r15, Y+
    8c9a:	ee 24       	eor	r14, r14
    8c9c:	e3 94       	inc	r14
    8c9e:	05 c0       	rjmp	.+10     	; 0x8caa <strtod+0x4e>
    8ca0:	2b e2       	ldi	r18, 0x2B	; 43
    8ca2:	f2 16       	cp	r15, r18
    8ca4:	09 f4       	brne	.+2      	; 0x8ca8 <strtod+0x4c>
    8ca6:	f9 90       	ld	r15, Y+
    8ca8:	ee 24       	eor	r14, r14
    8caa:	8e 01       	movw	r16, r28
    8cac:	01 50       	subi	r16, 0x01	; 1
    8cae:	10 40       	sbci	r17, 0x00	; 0
    8cb0:	c8 01       	movw	r24, r16
    8cb2:	69 ef       	ldi	r22, 0xF9	; 249
    8cb4:	7d e1       	ldi	r23, 0x1D	; 29
    8cb6:	43 e0       	ldi	r20, 0x03	; 3
    8cb8:	50 e0       	ldi	r21, 0x00	; 0
    8cba:	0e 94 9a 48 	call	0x9134	; 0x9134 <strncasecmp_P>
    8cbe:	89 2b       	or	r24, r25
    8cc0:	01 f5       	brne	.+64     	; 0x8d02 <strtod+0xa6>
    8cc2:	8e 01       	movw	r16, r28
    8cc4:	0e 5f       	subi	r16, 0xFE	; 254
    8cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    8cc8:	c8 01       	movw	r24, r16
    8cca:	6c ef       	ldi	r22, 0xFC	; 252
    8ccc:	7d e1       	ldi	r23, 0x1D	; 29
    8cce:	45 e0       	ldi	r20, 0x05	; 5
    8cd0:	50 e0       	ldi	r21, 0x00	; 0
    8cd2:	0e 94 9a 48 	call	0x9134	; 0x9134 <strncasecmp_P>
    8cd6:	89 2b       	or	r24, r25
    8cd8:	19 f4       	brne	.+6      	; 0x8ce0 <strtod+0x84>
    8cda:	8e 01       	movw	r16, r28
    8cdc:	09 5f       	subi	r16, 0xF9	; 249
    8cde:	1f 4f       	sbci	r17, 0xFF	; 255
    8ce0:	a1 14       	cp	r10, r1
    8ce2:	b1 04       	cpc	r11, r1
    8ce4:	19 f0       	breq	.+6      	; 0x8cec <strtod+0x90>
    8ce6:	f5 01       	movw	r30, r10
    8ce8:	00 83       	st	Z, r16
    8cea:	11 83       	std	Z+1, r17	; 0x01
    8cec:	e0 fc       	sbrc	r14, 0
    8cee:	04 c0       	rjmp	.+8      	; 0x8cf8 <strtod+0x9c>
    8cf0:	70 e0       	ldi	r23, 0x00	; 0
    8cf2:	90 e0       	ldi	r25, 0x00	; 0
    8cf4:	80 e8       	ldi	r24, 0x80	; 128
    8cf6:	14 c0       	rjmp	.+40     	; 0x8d20 <strtod+0xc4>
    8cf8:	70 e0       	ldi	r23, 0x00	; 0
    8cfa:	90 e0       	ldi	r25, 0x00	; 0
    8cfc:	80 e8       	ldi	r24, 0x80	; 128
    8cfe:	6f ef       	ldi	r22, 0xFF	; 255
    8d00:	08 c1       	rjmp	.+528    	; 0x8f12 <strtod+0x2b6>
    8d02:	c8 01       	movw	r24, r16
    8d04:	61 e0       	ldi	r22, 0x01	; 1
    8d06:	7e e1       	ldi	r23, 0x1E	; 30
    8d08:	43 e0       	ldi	r20, 0x03	; 3
    8d0a:	50 e0       	ldi	r21, 0x00	; 0
    8d0c:	0e 94 9a 48 	call	0x9134	; 0x9134 <strncasecmp_P>
    8d10:	89 2b       	or	r24, r25
    8d12:	69 f4       	brne	.+26     	; 0x8d2e <strtod+0xd2>
    8d14:	a1 14       	cp	r10, r1
    8d16:	b1 04       	cpc	r11, r1
    8d18:	29 f4       	brne	.+10     	; 0x8d24 <strtod+0xc8>
    8d1a:	70 e0       	ldi	r23, 0x00	; 0
    8d1c:	90 e0       	ldi	r25, 0x00	; 0
    8d1e:	80 ec       	ldi	r24, 0xC0	; 192
    8d20:	6f e7       	ldi	r22, 0x7F	; 127
    8d22:	f7 c0       	rjmp	.+494    	; 0x8f12 <strtod+0x2b6>
    8d24:	22 96       	adiw	r28, 0x02	; 2
    8d26:	f5 01       	movw	r30, r10
    8d28:	c0 83       	st	Z, r28
    8d2a:	d1 83       	std	Z+1, r29	; 0x01
    8d2c:	f6 cf       	rjmp	.-20     	; 0x8d1a <strtod+0xbe>
    8d2e:	88 24       	eor	r8, r8
    8d30:	99 24       	eor	r9, r9
    8d32:	40 e0       	ldi	r20, 0x00	; 0
    8d34:	50 e0       	ldi	r21, 0x00	; 0
    8d36:	60 e0       	ldi	r22, 0x00	; 0
    8d38:	70 e0       	ldi	r23, 0x00	; 0
    8d3a:	ef 2d       	mov	r30, r15
    8d3c:	e0 53       	subi	r30, 0x30	; 48
    8d3e:	ea 30       	cpi	r30, 0x0A	; 10
    8d40:	a0 f5       	brcc	.+104    	; 0x8daa <strtod+0x14e>
    8d42:	f2 e0       	ldi	r31, 0x02	; 2
    8d44:	ef 2a       	or	r14, r31
    8d46:	8e 2d       	mov	r24, r14
    8d48:	90 e0       	ldi	r25, 0x00	; 0
    8d4a:	9c 01       	movw	r18, r24
    8d4c:	28 70       	andi	r18, 0x08	; 8
    8d4e:	30 70       	andi	r19, 0x00	; 0
    8d50:	e2 fe       	sbrs	r14, 2
    8d52:	06 c0       	rjmp	.+12     	; 0x8d60 <strtod+0x104>
    8d54:	23 2b       	or	r18, r19
    8d56:	79 f5       	brne	.+94     	; 0x8db6 <strtod+0x15a>
    8d58:	08 94       	sec
    8d5a:	81 1c       	adc	r8, r1
    8d5c:	91 1c       	adc	r9, r1
    8d5e:	2b c0       	rjmp	.+86     	; 0x8db6 <strtod+0x15a>
    8d60:	23 2b       	or	r18, r19
    8d62:	19 f0       	breq	.+6      	; 0x8d6a <strtod+0x10e>
    8d64:	08 94       	sec
    8d66:	81 08       	sbc	r8, r1
    8d68:	91 08       	sbc	r9, r1
    8d6a:	db 01       	movw	r26, r22
    8d6c:	ca 01       	movw	r24, r20
    8d6e:	12 e0       	ldi	r17, 0x02	; 2
    8d70:	88 0f       	add	r24, r24
    8d72:	99 1f       	adc	r25, r25
    8d74:	aa 1f       	adc	r26, r26
    8d76:	bb 1f       	adc	r27, r27
    8d78:	1a 95       	dec	r17
    8d7a:	d1 f7       	brne	.-12     	; 0x8d70 <strtod+0x114>
    8d7c:	48 0f       	add	r20, r24
    8d7e:	59 1f       	adc	r21, r25
    8d80:	6a 1f       	adc	r22, r26
    8d82:	7b 1f       	adc	r23, r27
    8d84:	44 0f       	add	r20, r20
    8d86:	55 1f       	adc	r21, r21
    8d88:	66 1f       	adc	r22, r22
    8d8a:	77 1f       	adc	r23, r23
    8d8c:	4e 0f       	add	r20, r30
    8d8e:	51 1d       	adc	r21, r1
    8d90:	61 1d       	adc	r22, r1
    8d92:	71 1d       	adc	r23, r1
    8d94:	48 39       	cpi	r20, 0x98	; 152
    8d96:	29 e9       	ldi	r18, 0x99	; 153
    8d98:	52 07       	cpc	r21, r18
    8d9a:	29 e9       	ldi	r18, 0x99	; 153
    8d9c:	62 07       	cpc	r22, r18
    8d9e:	29 e1       	ldi	r18, 0x19	; 25
    8da0:	72 07       	cpc	r23, r18
    8da2:	48 f0       	brcs	.+18     	; 0x8db6 <strtod+0x15a>
    8da4:	84 e0       	ldi	r24, 0x04	; 4
    8da6:	e8 2a       	or	r14, r24
    8da8:	06 c0       	rjmp	.+12     	; 0x8db6 <strtod+0x15a>
    8daa:	ee 3f       	cpi	r30, 0xFE	; 254
    8dac:	31 f4       	brne	.+12     	; 0x8dba <strtod+0x15e>
    8dae:	e3 fc       	sbrc	r14, 3
    8db0:	39 c0       	rjmp	.+114    	; 0x8e24 <strtod+0x1c8>
    8db2:	98 e0       	ldi	r25, 0x08	; 8
    8db4:	e9 2a       	or	r14, r25
    8db6:	f9 90       	ld	r15, Y+
    8db8:	c0 cf       	rjmp	.-128    	; 0x8d3a <strtod+0xde>
    8dba:	e5 33       	cpi	r30, 0x35	; 53
    8dbc:	11 f0       	breq	.+4      	; 0x8dc2 <strtod+0x166>
    8dbe:	e5 31       	cpi	r30, 0x15	; 21
    8dc0:	89 f5       	brne	.+98     	; 0x8e24 <strtod+0x1c8>
    8dc2:	29 91       	ld	r18, Y+
    8dc4:	2d 32       	cpi	r18, 0x2D	; 45
    8dc6:	19 f4       	brne	.+6      	; 0x8dce <strtod+0x172>
    8dc8:	e0 e1       	ldi	r30, 0x10	; 16
    8dca:	ee 2a       	or	r14, r30
    8dcc:	05 c0       	rjmp	.+10     	; 0x8dd8 <strtod+0x17c>
    8dce:	2b 32       	cpi	r18, 0x2B	; 43
    8dd0:	19 f0       	breq	.+6      	; 0x8dd8 <strtod+0x17c>
    8dd2:	81 e0       	ldi	r24, 0x01	; 1
    8dd4:	90 e0       	ldi	r25, 0x00	; 0
    8dd6:	03 c0       	rjmp	.+6      	; 0x8dde <strtod+0x182>
    8dd8:	29 91       	ld	r18, Y+
    8dda:	82 e0       	ldi	r24, 0x02	; 2
    8ddc:	90 e0       	ldi	r25, 0x00	; 0
    8dde:	e2 2f       	mov	r30, r18
    8de0:	e0 53       	subi	r30, 0x30	; 48
    8de2:	ea 30       	cpi	r30, 0x0A	; 10
    8de4:	18 f0       	brcs	.+6      	; 0x8dec <strtod+0x190>
    8de6:	c8 1b       	sub	r28, r24
    8de8:	d9 0b       	sbc	r29, r25
    8dea:	1c c0       	rjmp	.+56     	; 0x8e24 <strtod+0x1c8>
    8dec:	20 e0       	ldi	r18, 0x00	; 0
    8dee:	30 e0       	ldi	r19, 0x00	; 0
    8df0:	fc e0       	ldi	r31, 0x0C	; 12
    8df2:	20 38       	cpi	r18, 0x80	; 128
    8df4:	3f 07       	cpc	r19, r31
    8df6:	5c f4       	brge	.+22     	; 0x8e0e <strtod+0x1b2>
    8df8:	c9 01       	movw	r24, r18
    8dfa:	88 0f       	add	r24, r24
    8dfc:	99 1f       	adc	r25, r25
    8dfe:	88 0f       	add	r24, r24
    8e00:	99 1f       	adc	r25, r25
    8e02:	28 0f       	add	r18, r24
    8e04:	39 1f       	adc	r19, r25
    8e06:	22 0f       	add	r18, r18
    8e08:	33 1f       	adc	r19, r19
    8e0a:	2e 0f       	add	r18, r30
    8e0c:	31 1d       	adc	r19, r1
    8e0e:	e9 91       	ld	r30, Y+
    8e10:	e0 53       	subi	r30, 0x30	; 48
    8e12:	ea 30       	cpi	r30, 0x0A	; 10
    8e14:	68 f3       	brcs	.-38     	; 0x8df0 <strtod+0x194>
    8e16:	e4 fe       	sbrs	r14, 4
    8e18:	03 c0       	rjmp	.+6      	; 0x8e20 <strtod+0x1c4>
    8e1a:	30 95       	com	r19
    8e1c:	21 95       	neg	r18
    8e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    8e20:	82 0e       	add	r8, r18
    8e22:	93 1e       	adc	r9, r19
    8e24:	ce 2c       	mov	r12, r14
    8e26:	dd 24       	eor	r13, r13
    8e28:	e1 fe       	sbrs	r14, 1
    8e2a:	07 c0       	rjmp	.+14     	; 0x8e3a <strtod+0x1de>
    8e2c:	a1 14       	cp	r10, r1
    8e2e:	b1 04       	cpc	r11, r1
    8e30:	21 f0       	breq	.+8      	; 0x8e3a <strtod+0x1de>
    8e32:	21 97       	sbiw	r28, 0x01	; 1
    8e34:	f5 01       	movw	r30, r10
    8e36:	c0 83       	st	Z, r28
    8e38:	d1 83       	std	Z+1, r29	; 0x01
    8e3a:	cb 01       	movw	r24, r22
    8e3c:	ba 01       	movw	r22, r20
    8e3e:	0e 94 c3 42 	call	0x8586	; 0x8586 <__floatunsisf>
    8e42:	7b 01       	movw	r14, r22
    8e44:	8c 01       	movw	r16, r24
    8e46:	f3 e0       	ldi	r31, 0x03	; 3
    8e48:	cf 22       	and	r12, r31
    8e4a:	dd 24       	eor	r13, r13
    8e4c:	23 e0       	ldi	r18, 0x03	; 3
    8e4e:	c2 16       	cp	r12, r18
    8e50:	d1 04       	cpc	r13, r1
    8e52:	21 f4       	brne	.+8      	; 0x8e5c <strtod+0x200>
    8e54:	17 fb       	bst	r17, 7
    8e56:	10 95       	com	r17
    8e58:	17 f9       	bld	r17, 7
    8e5a:	10 95       	com	r17
    8e5c:	57 01       	movw	r10, r14
    8e5e:	68 01       	movw	r12, r16
    8e60:	c8 01       	movw	r24, r16
    8e62:	b7 01       	movw	r22, r14
    8e64:	20 e0       	ldi	r18, 0x00	; 0
    8e66:	30 e0       	ldi	r19, 0x00	; 0
    8e68:	40 e0       	ldi	r20, 0x00	; 0
    8e6a:	50 e0       	ldi	r21, 0x00	; 0
    8e6c:	0e 94 23 42 	call	0x8446	; 0x8446 <__cmpsf2>
    8e70:	88 23       	and	r24, r24
    8e72:	09 f4       	brne	.+2      	; 0x8e76 <strtod+0x21a>
    8e74:	4a c0       	rjmp	.+148    	; 0x8f0a <strtod+0x2ae>
    8e76:	97 fe       	sbrs	r9, 7
    8e78:	0d c0       	rjmp	.+26     	; 0x8e94 <strtod+0x238>
    8e7a:	28 e1       	ldi	r18, 0x18	; 24
    8e7c:	e2 2e       	mov	r14, r18
    8e7e:	2e e1       	ldi	r18, 0x1E	; 30
    8e80:	f2 2e       	mov	r15, r18
    8e82:	90 94       	com	r9
    8e84:	81 94       	neg	r8
    8e86:	91 08       	sbc	r9, r1
    8e88:	93 94       	inc	r9
    8e8a:	c0 e2       	ldi	r28, 0x20	; 32
    8e8c:	d0 e0       	ldi	r29, 0x00	; 0
    8e8e:	00 e0       	ldi	r16, 0x00	; 0
    8e90:	10 e0       	ldi	r17, 0x00	; 0
    8e92:	12 c0       	rjmp	.+36     	; 0x8eb8 <strtod+0x25c>
    8e94:	90 e3       	ldi	r25, 0x30	; 48
    8e96:	e9 2e       	mov	r14, r25
    8e98:	9e e1       	ldi	r25, 0x1E	; 30
    8e9a:	f9 2e       	mov	r15, r25
    8e9c:	f6 cf       	rjmp	.-20     	; 0x8e8a <strtod+0x22e>
    8e9e:	f7 01       	movw	r30, r14
    8ea0:	25 91       	lpm	r18, Z+
    8ea2:	35 91       	lpm	r19, Z+
    8ea4:	45 91       	lpm	r20, Z+
    8ea6:	54 91       	lpm	r21, Z+
    8ea8:	c6 01       	movw	r24, r12
    8eaa:	b5 01       	movw	r22, r10
    8eac:	0e 94 e5 44 	call	0x89ca	; 0x89ca <__mulsf3>
    8eb0:	5b 01       	movw	r10, r22
    8eb2:	6c 01       	movw	r12, r24
    8eb4:	8c 1a       	sub	r8, r28
    8eb6:	9d 0a       	sbc	r9, r29
    8eb8:	8c 16       	cp	r8, r28
    8eba:	9d 06       	cpc	r9, r29
    8ebc:	84 f7       	brge	.-32     	; 0x8e9e <strtod+0x242>
    8ebe:	d5 95       	asr	r29
    8ec0:	c7 95       	ror	r28
    8ec2:	0f 5f       	subi	r16, 0xFF	; 255
    8ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    8ec6:	06 30       	cpi	r16, 0x06	; 6
    8ec8:	11 05       	cpc	r17, r1
    8eca:	29 f0       	breq	.+10     	; 0x8ed6 <strtod+0x27a>
    8ecc:	8c ef       	ldi	r24, 0xFC	; 252
    8ece:	9f ef       	ldi	r25, 0xFF	; 255
    8ed0:	e8 0e       	add	r14, r24
    8ed2:	f9 1e       	adc	r15, r25
    8ed4:	f1 cf       	rjmp	.-30     	; 0x8eb8 <strtod+0x25c>
    8ed6:	c5 01       	movw	r24, r10
    8ed8:	d6 01       	movw	r26, r12
    8eda:	7c 01       	movw	r14, r24
    8edc:	8d 01       	movw	r16, r26
    8ede:	8c 2d       	mov	r24, r12
    8ee0:	88 0f       	add	r24, r24
    8ee2:	8d 2d       	mov	r24, r13
    8ee4:	88 1f       	adc	r24, r24
    8ee6:	8f 3f       	cpi	r24, 0xFF	; 255
    8ee8:	51 f0       	breq	.+20     	; 0x8efe <strtod+0x2a2>
    8eea:	c6 01       	movw	r24, r12
    8eec:	b5 01       	movw	r22, r10
    8eee:	20 e0       	ldi	r18, 0x00	; 0
    8ef0:	30 e0       	ldi	r19, 0x00	; 0
    8ef2:	40 e0       	ldi	r20, 0x00	; 0
    8ef4:	50 e0       	ldi	r21, 0x00	; 0
    8ef6:	0e 94 23 42 	call	0x8446	; 0x8446 <__cmpsf2>
    8efa:	88 23       	and	r24, r24
    8efc:	31 f4       	brne	.+12     	; 0x8f0a <strtod+0x2ae>
    8efe:	82 e2       	ldi	r24, 0x22	; 34
    8f00:	90 e0       	ldi	r25, 0x00	; 0
    8f02:	80 93 44 25 	sts	0x2544, r24
    8f06:	90 93 45 25 	sts	0x2545, r25
    8f0a:	7e 2d       	mov	r23, r14
    8f0c:	9f 2d       	mov	r25, r15
    8f0e:	80 2f       	mov	r24, r16
    8f10:	61 2f       	mov	r22, r17
    8f12:	27 2f       	mov	r18, r23
    8f14:	39 2f       	mov	r19, r25
    8f16:	48 2f       	mov	r20, r24
    8f18:	56 2f       	mov	r21, r22
    8f1a:	b9 01       	movw	r22, r18
    8f1c:	ca 01       	movw	r24, r20
    8f1e:	df 91       	pop	r29
    8f20:	cf 91       	pop	r28
    8f22:	1f 91       	pop	r17
    8f24:	0f 91       	pop	r16
    8f26:	ff 90       	pop	r15
    8f28:	ef 90       	pop	r14
    8f2a:	df 90       	pop	r13
    8f2c:	cf 90       	pop	r12
    8f2e:	bf 90       	pop	r11
    8f30:	af 90       	pop	r10
    8f32:	9f 90       	pop	r9
    8f34:	8f 90       	pop	r8
    8f36:	08 95       	ret

00008f38 <atoi>:
    8f38:	fc 01       	movw	r30, r24
    8f3a:	88 27       	eor	r24, r24
    8f3c:	99 27       	eor	r25, r25
    8f3e:	e8 94       	clt
    8f40:	21 91       	ld	r18, Z+
    8f42:	20 32       	cpi	r18, 0x20	; 32
    8f44:	e9 f3       	breq	.-6      	; 0x8f40 <atoi+0x8>
    8f46:	29 30       	cpi	r18, 0x09	; 9
    8f48:	10 f0       	brcs	.+4      	; 0x8f4e <atoi+0x16>
    8f4a:	2e 30       	cpi	r18, 0x0E	; 14
    8f4c:	c8 f3       	brcs	.-14     	; 0x8f40 <atoi+0x8>
    8f4e:	2b 32       	cpi	r18, 0x2B	; 43
    8f50:	41 f0       	breq	.+16     	; 0x8f62 <atoi+0x2a>
    8f52:	2d 32       	cpi	r18, 0x2D	; 45
    8f54:	39 f4       	brne	.+14     	; 0x8f64 <atoi+0x2c>
    8f56:	68 94       	set
    8f58:	04 c0       	rjmp	.+8      	; 0x8f62 <atoi+0x2a>
    8f5a:	0e 94 c8 48 	call	0x9190	; 0x9190 <__mulhi_const_10>
    8f5e:	82 0f       	add	r24, r18
    8f60:	91 1d       	adc	r25, r1
    8f62:	21 91       	ld	r18, Z+
    8f64:	20 53       	subi	r18, 0x30	; 48
    8f66:	2a 30       	cpi	r18, 0x0A	; 10
    8f68:	c0 f3       	brcs	.-16     	; 0x8f5a <atoi+0x22>
    8f6a:	1e f4       	brtc	.+6      	; 0x8f72 <atoi+0x3a>
    8f6c:	90 95       	com	r25
    8f6e:	81 95       	neg	r24
    8f70:	9f 4f       	sbci	r25, 0xFF	; 255
    8f72:	08 95       	ret

00008f74 <__ftoa_engine>:
    8f74:	28 30       	cpi	r18, 0x08	; 8
    8f76:	08 f0       	brcs	.+2      	; 0x8f7a <__ftoa_engine+0x6>
    8f78:	27 e0       	ldi	r18, 0x07	; 7
    8f7a:	33 27       	eor	r19, r19
    8f7c:	da 01       	movw	r26, r20
    8f7e:	99 0f       	add	r25, r25
    8f80:	31 1d       	adc	r19, r1
    8f82:	87 fd       	sbrc	r24, 7
    8f84:	91 60       	ori	r25, 0x01	; 1
    8f86:	00 96       	adiw	r24, 0x00	; 0
    8f88:	61 05       	cpc	r22, r1
    8f8a:	71 05       	cpc	r23, r1
    8f8c:	39 f4       	brne	.+14     	; 0x8f9c <__ftoa_engine+0x28>
    8f8e:	32 60       	ori	r19, 0x02	; 2
    8f90:	2e 5f       	subi	r18, 0xFE	; 254
    8f92:	3d 93       	st	X+, r19
    8f94:	30 e3       	ldi	r19, 0x30	; 48
    8f96:	2a 95       	dec	r18
    8f98:	e1 f7       	brne	.-8      	; 0x8f92 <__ftoa_engine+0x1e>
    8f9a:	08 95       	ret
    8f9c:	9f 3f       	cpi	r25, 0xFF	; 255
    8f9e:	30 f0       	brcs	.+12     	; 0x8fac <__ftoa_engine+0x38>
    8fa0:	80 38       	cpi	r24, 0x80	; 128
    8fa2:	71 05       	cpc	r23, r1
    8fa4:	61 05       	cpc	r22, r1
    8fa6:	09 f0       	breq	.+2      	; 0x8faa <__ftoa_engine+0x36>
    8fa8:	3c 5f       	subi	r19, 0xFC	; 252
    8faa:	3c 5f       	subi	r19, 0xFC	; 252
    8fac:	3d 93       	st	X+, r19
    8fae:	91 30       	cpi	r25, 0x01	; 1
    8fb0:	08 f0       	brcs	.+2      	; 0x8fb4 <__ftoa_engine+0x40>
    8fb2:	80 68       	ori	r24, 0x80	; 128
    8fb4:	91 1d       	adc	r25, r1
    8fb6:	df 93       	push	r29
    8fb8:	cf 93       	push	r28
    8fba:	1f 93       	push	r17
    8fbc:	0f 93       	push	r16
    8fbe:	ff 92       	push	r15
    8fc0:	ef 92       	push	r14
    8fc2:	19 2f       	mov	r17, r25
    8fc4:	98 7f       	andi	r25, 0xF8	; 248
    8fc6:	96 95       	lsr	r25
    8fc8:	e9 2f       	mov	r30, r25
    8fca:	96 95       	lsr	r25
    8fcc:	96 95       	lsr	r25
    8fce:	e9 0f       	add	r30, r25
    8fd0:	ff 27       	eor	r31, r31
    8fd2:	e2 57       	subi	r30, 0x72	; 114
    8fd4:	f1 4e       	sbci	r31, 0xE1	; 225
    8fd6:	99 27       	eor	r25, r25
    8fd8:	33 27       	eor	r19, r19
    8fda:	ee 24       	eor	r14, r14
    8fdc:	ff 24       	eor	r15, r15
    8fde:	a7 01       	movw	r20, r14
    8fe0:	e7 01       	movw	r28, r14
    8fe2:	05 90       	lpm	r0, Z+
    8fe4:	08 94       	sec
    8fe6:	07 94       	ror	r0
    8fe8:	28 f4       	brcc	.+10     	; 0x8ff4 <__ftoa_engine+0x80>
    8fea:	36 0f       	add	r19, r22
    8fec:	e7 1e       	adc	r14, r23
    8fee:	f8 1e       	adc	r15, r24
    8ff0:	49 1f       	adc	r20, r25
    8ff2:	51 1d       	adc	r21, r1
    8ff4:	66 0f       	add	r22, r22
    8ff6:	77 1f       	adc	r23, r23
    8ff8:	88 1f       	adc	r24, r24
    8ffa:	99 1f       	adc	r25, r25
    8ffc:	06 94       	lsr	r0
    8ffe:	a1 f7       	brne	.-24     	; 0x8fe8 <__ftoa_engine+0x74>
    9000:	05 90       	lpm	r0, Z+
    9002:	07 94       	ror	r0
    9004:	28 f4       	brcc	.+10     	; 0x9010 <__ftoa_engine+0x9c>
    9006:	e7 0e       	add	r14, r23
    9008:	f8 1e       	adc	r15, r24
    900a:	49 1f       	adc	r20, r25
    900c:	56 1f       	adc	r21, r22
    900e:	c1 1d       	adc	r28, r1
    9010:	77 0f       	add	r23, r23
    9012:	88 1f       	adc	r24, r24
    9014:	99 1f       	adc	r25, r25
    9016:	66 1f       	adc	r22, r22
    9018:	06 94       	lsr	r0
    901a:	a1 f7       	brne	.-24     	; 0x9004 <__ftoa_engine+0x90>
    901c:	05 90       	lpm	r0, Z+
    901e:	07 94       	ror	r0
    9020:	28 f4       	brcc	.+10     	; 0x902c <__ftoa_engine+0xb8>
    9022:	f8 0e       	add	r15, r24
    9024:	49 1f       	adc	r20, r25
    9026:	56 1f       	adc	r21, r22
    9028:	c7 1f       	adc	r28, r23
    902a:	d1 1d       	adc	r29, r1
    902c:	88 0f       	add	r24, r24
    902e:	99 1f       	adc	r25, r25
    9030:	66 1f       	adc	r22, r22
    9032:	77 1f       	adc	r23, r23
    9034:	06 94       	lsr	r0
    9036:	a1 f7       	brne	.-24     	; 0x9020 <__ftoa_engine+0xac>
    9038:	05 90       	lpm	r0, Z+
    903a:	07 94       	ror	r0
    903c:	20 f4       	brcc	.+8      	; 0x9046 <__ftoa_engine+0xd2>
    903e:	49 0f       	add	r20, r25
    9040:	56 1f       	adc	r21, r22
    9042:	c7 1f       	adc	r28, r23
    9044:	d8 1f       	adc	r29, r24
    9046:	99 0f       	add	r25, r25
    9048:	66 1f       	adc	r22, r22
    904a:	77 1f       	adc	r23, r23
    904c:	88 1f       	adc	r24, r24
    904e:	06 94       	lsr	r0
    9050:	a9 f7       	brne	.-22     	; 0x903c <__ftoa_engine+0xc8>
    9052:	84 91       	lpm	r24, Z+
    9054:	10 95       	com	r17
    9056:	17 70       	andi	r17, 0x07	; 7
    9058:	41 f0       	breq	.+16     	; 0x906a <__ftoa_engine+0xf6>
    905a:	d6 95       	lsr	r29
    905c:	c7 95       	ror	r28
    905e:	57 95       	ror	r21
    9060:	47 95       	ror	r20
    9062:	f7 94       	ror	r15
    9064:	e7 94       	ror	r14
    9066:	1a 95       	dec	r17
    9068:	c1 f7       	brne	.-16     	; 0x905a <__ftoa_engine+0xe6>
    906a:	e4 e3       	ldi	r30, 0x34	; 52
    906c:	fe e1       	ldi	r31, 0x1E	; 30
    906e:	68 94       	set
    9070:	15 90       	lpm	r1, Z+
    9072:	15 91       	lpm	r17, Z+
    9074:	35 91       	lpm	r19, Z+
    9076:	65 91       	lpm	r22, Z+
    9078:	95 91       	lpm	r25, Z+
    907a:	05 90       	lpm	r0, Z+
    907c:	7f e2       	ldi	r23, 0x2F	; 47
    907e:	73 95       	inc	r23
    9080:	e1 18       	sub	r14, r1
    9082:	f1 0a       	sbc	r15, r17
    9084:	43 0b       	sbc	r20, r19
    9086:	56 0b       	sbc	r21, r22
    9088:	c9 0b       	sbc	r28, r25
    908a:	d0 09       	sbc	r29, r0
    908c:	c0 f7       	brcc	.-16     	; 0x907e <__ftoa_engine+0x10a>
    908e:	e1 0c       	add	r14, r1
    9090:	f1 1e       	adc	r15, r17
    9092:	43 1f       	adc	r20, r19
    9094:	56 1f       	adc	r21, r22
    9096:	c9 1f       	adc	r28, r25
    9098:	d0 1d       	adc	r29, r0
    909a:	7e f4       	brtc	.+30     	; 0x90ba <__ftoa_engine+0x146>
    909c:	70 33       	cpi	r23, 0x30	; 48
    909e:	11 f4       	brne	.+4      	; 0x90a4 <__ftoa_engine+0x130>
    90a0:	8a 95       	dec	r24
    90a2:	e6 cf       	rjmp	.-52     	; 0x9070 <__ftoa_engine+0xfc>
    90a4:	e8 94       	clt
    90a6:	01 50       	subi	r16, 0x01	; 1
    90a8:	30 f0       	brcs	.+12     	; 0x90b6 <__ftoa_engine+0x142>
    90aa:	08 0f       	add	r16, r24
    90ac:	0a f4       	brpl	.+2      	; 0x90b0 <__ftoa_engine+0x13c>
    90ae:	00 27       	eor	r16, r16
    90b0:	02 17       	cp	r16, r18
    90b2:	08 f4       	brcc	.+2      	; 0x90b6 <__ftoa_engine+0x142>
    90b4:	20 2f       	mov	r18, r16
    90b6:	23 95       	inc	r18
    90b8:	02 2f       	mov	r16, r18
    90ba:	7a 33       	cpi	r23, 0x3A	; 58
    90bc:	28 f0       	brcs	.+10     	; 0x90c8 <__ftoa_engine+0x154>
    90be:	79 e3       	ldi	r23, 0x39	; 57
    90c0:	7d 93       	st	X+, r23
    90c2:	2a 95       	dec	r18
    90c4:	e9 f7       	brne	.-6      	; 0x90c0 <__ftoa_engine+0x14c>
    90c6:	10 c0       	rjmp	.+32     	; 0x90e8 <__ftoa_engine+0x174>
    90c8:	7d 93       	st	X+, r23
    90ca:	2a 95       	dec	r18
    90cc:	89 f6       	brne	.-94     	; 0x9070 <__ftoa_engine+0xfc>
    90ce:	06 94       	lsr	r0
    90d0:	97 95       	ror	r25
    90d2:	67 95       	ror	r22
    90d4:	37 95       	ror	r19
    90d6:	17 95       	ror	r17
    90d8:	17 94       	ror	r1
    90da:	e1 18       	sub	r14, r1
    90dc:	f1 0a       	sbc	r15, r17
    90de:	43 0b       	sbc	r20, r19
    90e0:	56 0b       	sbc	r21, r22
    90e2:	c9 0b       	sbc	r28, r25
    90e4:	d0 09       	sbc	r29, r0
    90e6:	98 f0       	brcs	.+38     	; 0x910e <__ftoa_engine+0x19a>
    90e8:	23 95       	inc	r18
    90ea:	7e 91       	ld	r23, -X
    90ec:	73 95       	inc	r23
    90ee:	7a 33       	cpi	r23, 0x3A	; 58
    90f0:	08 f0       	brcs	.+2      	; 0x90f4 <__ftoa_engine+0x180>
    90f2:	70 e3       	ldi	r23, 0x30	; 48
    90f4:	7c 93       	st	X, r23
    90f6:	20 13       	cpse	r18, r16
    90f8:	b8 f7       	brcc	.-18     	; 0x90e8 <__ftoa_engine+0x174>
    90fa:	7e 91       	ld	r23, -X
    90fc:	70 61       	ori	r23, 0x10	; 16
    90fe:	7d 93       	st	X+, r23
    9100:	30 f0       	brcs	.+12     	; 0x910e <__ftoa_engine+0x19a>
    9102:	83 95       	inc	r24
    9104:	71 e3       	ldi	r23, 0x31	; 49
    9106:	7d 93       	st	X+, r23
    9108:	70 e3       	ldi	r23, 0x30	; 48
    910a:	2a 95       	dec	r18
    910c:	e1 f7       	brne	.-8      	; 0x9106 <__ftoa_engine+0x192>
    910e:	11 24       	eor	r1, r1
    9110:	ef 90       	pop	r14
    9112:	ff 90       	pop	r15
    9114:	0f 91       	pop	r16
    9116:	1f 91       	pop	r17
    9118:	cf 91       	pop	r28
    911a:	df 91       	pop	r29
    911c:	99 27       	eor	r25, r25
    911e:	87 fd       	sbrc	r24, 7
    9120:	90 95       	com	r25
    9122:	08 95       	ret

00009124 <isspace>:
    9124:	91 11       	cpse	r25, r1
    9126:	21 c1       	rjmp	.+578    	; 0x936a <__ctype_isfalse>
    9128:	80 32       	cpi	r24, 0x20	; 32
    912a:	19 f0       	breq	.+6      	; 0x9132 <isspace+0xe>
    912c:	89 50       	subi	r24, 0x09	; 9
    912e:	85 50       	subi	r24, 0x05	; 5
    9130:	d0 f7       	brcc	.-12     	; 0x9126 <isspace+0x2>
    9132:	08 95       	ret

00009134 <strncasecmp_P>:
    9134:	fb 01       	movw	r30, r22
    9136:	dc 01       	movw	r26, r24
    9138:	41 50       	subi	r20, 0x01	; 1
    913a:	50 40       	sbci	r21, 0x00	; 0
    913c:	88 f0       	brcs	.+34     	; 0x9160 <strncasecmp_P+0x2c>
    913e:	8d 91       	ld	r24, X+
    9140:	81 34       	cpi	r24, 0x41	; 65
    9142:	1c f0       	brlt	.+6      	; 0x914a <strncasecmp_P+0x16>
    9144:	8b 35       	cpi	r24, 0x5B	; 91
    9146:	0c f4       	brge	.+2      	; 0x914a <strncasecmp_P+0x16>
    9148:	80 5e       	subi	r24, 0xE0	; 224
    914a:	65 91       	lpm	r22, Z+
    914c:	61 34       	cpi	r22, 0x41	; 65
    914e:	1c f0       	brlt	.+6      	; 0x9156 <strncasecmp_P+0x22>
    9150:	6b 35       	cpi	r22, 0x5B	; 91
    9152:	0c f4       	brge	.+2      	; 0x9156 <strncasecmp_P+0x22>
    9154:	60 5e       	subi	r22, 0xE0	; 224
    9156:	86 1b       	sub	r24, r22
    9158:	61 11       	cpse	r22, r1
    915a:	71 f3       	breq	.-36     	; 0x9138 <strncasecmp_P+0x4>
    915c:	99 0b       	sbc	r25, r25
    915e:	08 95       	ret
    9160:	88 1b       	sub	r24, r24
    9162:	fc cf       	rjmp	.-8      	; 0x915c <strncasecmp_P+0x28>

00009164 <strnlen_P>:
    9164:	fc 01       	movw	r30, r24
    9166:	05 90       	lpm	r0, Z+
    9168:	61 50       	subi	r22, 0x01	; 1
    916a:	70 40       	sbci	r23, 0x00	; 0
    916c:	01 10       	cpse	r0, r1
    916e:	d8 f7       	brcc	.-10     	; 0x9166 <strnlen_P+0x2>
    9170:	80 95       	com	r24
    9172:	90 95       	com	r25
    9174:	8e 0f       	add	r24, r30
    9176:	9f 1f       	adc	r25, r31
    9178:	08 95       	ret

0000917a <strnlen>:
    917a:	fc 01       	movw	r30, r24
    917c:	61 50       	subi	r22, 0x01	; 1
    917e:	70 40       	sbci	r23, 0x00	; 0
    9180:	01 90       	ld	r0, Z+
    9182:	01 10       	cpse	r0, r1
    9184:	d8 f7       	brcc	.-10     	; 0x917c <strnlen+0x2>
    9186:	80 95       	com	r24
    9188:	90 95       	com	r25
    918a:	8e 0f       	add	r24, r30
    918c:	9f 1f       	adc	r25, r31
    918e:	08 95       	ret

00009190 <__mulhi_const_10>:
    9190:	7a e0       	ldi	r23, 0x0A	; 10
    9192:	97 9f       	mul	r25, r23
    9194:	90 2d       	mov	r25, r0
    9196:	87 9f       	mul	r24, r23
    9198:	80 2d       	mov	r24, r0
    919a:	91 0d       	add	r25, r1
    919c:	11 24       	eor	r1, r1
    919e:	08 95       	ret

000091a0 <clearerr>:
    91a0:	fc 01       	movw	r30, r24
    91a2:	83 81       	ldd	r24, Z+3	; 0x03
    91a4:	8f 7c       	andi	r24, 0xCF	; 207
    91a6:	83 83       	std	Z+3, r24	; 0x03
    91a8:	08 95       	ret

000091aa <fgets>:
    91aa:	cf 92       	push	r12
    91ac:	df 92       	push	r13
    91ae:	ef 92       	push	r14
    91b0:	ff 92       	push	r15
    91b2:	0f 93       	push	r16
    91b4:	1f 93       	push	r17
    91b6:	cf 93       	push	r28
    91b8:	df 93       	push	r29
    91ba:	7c 01       	movw	r14, r24
    91bc:	6a 01       	movw	r12, r20
    91be:	fa 01       	movw	r30, r20
    91c0:	83 81       	ldd	r24, Z+3	; 0x03
    91c2:	80 ff       	sbrs	r24, 0
    91c4:	19 c0       	rjmp	.+50     	; 0x91f8 <fgets+0x4e>
    91c6:	16 16       	cp	r1, r22
    91c8:	17 06       	cpc	r1, r23
    91ca:	b4 f4       	brge	.+44     	; 0x91f8 <fgets+0x4e>
    91cc:	eb 01       	movw	r28, r22
    91ce:	21 97       	sbiw	r28, 0x01	; 1
    91d0:	87 01       	movw	r16, r14
    91d2:	0d c0       	rjmp	.+26     	; 0x91ee <fgets+0x44>
    91d4:	c6 01       	movw	r24, r12
    91d6:	0e 94 b8 49 	call	0x9370	; 0x9370 <fgetc>
    91da:	ff ef       	ldi	r31, 0xFF	; 255
    91dc:	8f 3f       	cpi	r24, 0xFF	; 255
    91de:	9f 07       	cpc	r25, r31
    91e0:	59 f0       	breq	.+22     	; 0x91f8 <fgets+0x4e>
    91e2:	f8 01       	movw	r30, r16
    91e4:	81 93       	st	Z+, r24
    91e6:	8f 01       	movw	r16, r30
    91e8:	0a 97       	sbiw	r24, 0x0a	; 10
    91ea:	19 f0       	breq	.+6      	; 0x91f2 <fgets+0x48>
    91ec:	21 97       	sbiw	r28, 0x01	; 1
    91ee:	20 97       	sbiw	r28, 0x00	; 0
    91f0:	89 f7       	brne	.-30     	; 0x91d4 <fgets+0x2a>
    91f2:	f8 01       	movw	r30, r16
    91f4:	10 82       	st	Z, r1
    91f6:	02 c0       	rjmp	.+4      	; 0x91fc <fgets+0x52>
    91f8:	ee 24       	eor	r14, r14
    91fa:	ff 24       	eor	r15, r15
    91fc:	c7 01       	movw	r24, r14
    91fe:	df 91       	pop	r29
    9200:	cf 91       	pop	r28
    9202:	1f 91       	pop	r17
    9204:	0f 91       	pop	r16
    9206:	ff 90       	pop	r15
    9208:	ef 90       	pop	r14
    920a:	df 90       	pop	r13
    920c:	cf 90       	pop	r12
    920e:	08 95       	ret

00009210 <fputc>:
    9210:	0f 93       	push	r16
    9212:	1f 93       	push	r17
    9214:	cf 93       	push	r28
    9216:	df 93       	push	r29
    9218:	8c 01       	movw	r16, r24
    921a:	eb 01       	movw	r28, r22
    921c:	8b 81       	ldd	r24, Y+3	; 0x03
    921e:	81 ff       	sbrs	r24, 1
    9220:	1b c0       	rjmp	.+54     	; 0x9258 <fputc+0x48>
    9222:	82 ff       	sbrs	r24, 2
    9224:	0d c0       	rjmp	.+26     	; 0x9240 <fputc+0x30>
    9226:	2e 81       	ldd	r18, Y+6	; 0x06
    9228:	3f 81       	ldd	r19, Y+7	; 0x07
    922a:	8c 81       	ldd	r24, Y+4	; 0x04
    922c:	9d 81       	ldd	r25, Y+5	; 0x05
    922e:	28 17       	cp	r18, r24
    9230:	39 07       	cpc	r19, r25
    9232:	64 f4       	brge	.+24     	; 0x924c <fputc+0x3c>
    9234:	e8 81       	ld	r30, Y
    9236:	f9 81       	ldd	r31, Y+1	; 0x01
    9238:	01 93       	st	Z+, r16
    923a:	e8 83       	st	Y, r30
    923c:	f9 83       	std	Y+1, r31	; 0x01
    923e:	06 c0       	rjmp	.+12     	; 0x924c <fputc+0x3c>
    9240:	e8 85       	ldd	r30, Y+8	; 0x08
    9242:	f9 85       	ldd	r31, Y+9	; 0x09
    9244:	80 2f       	mov	r24, r16
    9246:	19 95       	eicall
    9248:	89 2b       	or	r24, r25
    924a:	31 f4       	brne	.+12     	; 0x9258 <fputc+0x48>
    924c:	8e 81       	ldd	r24, Y+6	; 0x06
    924e:	9f 81       	ldd	r25, Y+7	; 0x07
    9250:	01 96       	adiw	r24, 0x01	; 1
    9252:	8e 83       	std	Y+6, r24	; 0x06
    9254:	9f 83       	std	Y+7, r25	; 0x07
    9256:	02 c0       	rjmp	.+4      	; 0x925c <fputc+0x4c>
    9258:	0f ef       	ldi	r16, 0xFF	; 255
    925a:	1f ef       	ldi	r17, 0xFF	; 255
    925c:	c8 01       	movw	r24, r16
    925e:	df 91       	pop	r29
    9260:	cf 91       	pop	r28
    9262:	1f 91       	pop	r17
    9264:	0f 91       	pop	r16
    9266:	08 95       	ret

00009268 <printf_P>:
    9268:	df 93       	push	r29
    926a:	cf 93       	push	r28
    926c:	cd b7       	in	r28, 0x3d	; 61
    926e:	de b7       	in	r29, 0x3e	; 62
    9270:	fe 01       	movw	r30, r28
    9272:	36 96       	adiw	r30, 0x06	; 6
    9274:	61 91       	ld	r22, Z+
    9276:	71 91       	ld	r23, Z+
    9278:	a0 91 40 25 	lds	r26, 0x2540
    927c:	b0 91 41 25 	lds	r27, 0x2541
    9280:	13 96       	adiw	r26, 0x03	; 3
    9282:	8c 91       	ld	r24, X
    9284:	13 97       	sbiw	r26, 0x03	; 3
    9286:	88 60       	ori	r24, 0x08	; 8
    9288:	13 96       	adiw	r26, 0x03	; 3
    928a:	8c 93       	st	X, r24
    928c:	80 91 40 25 	lds	r24, 0x2540
    9290:	90 91 41 25 	lds	r25, 0x2541
    9294:	af 01       	movw	r20, r30
    9296:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <vfprintf>
    929a:	e0 91 40 25 	lds	r30, 0x2540
    929e:	f0 91 41 25 	lds	r31, 0x2541
    92a2:	23 81       	ldd	r18, Z+3	; 0x03
    92a4:	27 7f       	andi	r18, 0xF7	; 247
    92a6:	23 83       	std	Z+3, r18	; 0x03
    92a8:	cf 91       	pop	r28
    92aa:	df 91       	pop	r29
    92ac:	08 95       	ret

000092ae <__ultoa_invert>:
    92ae:	fa 01       	movw	r30, r20
    92b0:	aa 27       	eor	r26, r26
    92b2:	28 30       	cpi	r18, 0x08	; 8
    92b4:	51 f1       	breq	.+84     	; 0x930a <__ultoa_invert+0x5c>
    92b6:	20 31       	cpi	r18, 0x10	; 16
    92b8:	81 f1       	breq	.+96     	; 0x931a <__ultoa_invert+0x6c>
    92ba:	e8 94       	clt
    92bc:	6f 93       	push	r22
    92be:	6e 7f       	andi	r22, 0xFE	; 254
    92c0:	6e 5f       	subi	r22, 0xFE	; 254
    92c2:	7f 4f       	sbci	r23, 0xFF	; 255
    92c4:	8f 4f       	sbci	r24, 0xFF	; 255
    92c6:	9f 4f       	sbci	r25, 0xFF	; 255
    92c8:	af 4f       	sbci	r26, 0xFF	; 255
    92ca:	b1 e0       	ldi	r27, 0x01	; 1
    92cc:	3e d0       	rcall	.+124    	; 0x934a <__ultoa_invert+0x9c>
    92ce:	b4 e0       	ldi	r27, 0x04	; 4
    92d0:	3c d0       	rcall	.+120    	; 0x934a <__ultoa_invert+0x9c>
    92d2:	67 0f       	add	r22, r23
    92d4:	78 1f       	adc	r23, r24
    92d6:	89 1f       	adc	r24, r25
    92d8:	9a 1f       	adc	r25, r26
    92da:	a1 1d       	adc	r26, r1
    92dc:	68 0f       	add	r22, r24
    92de:	79 1f       	adc	r23, r25
    92e0:	8a 1f       	adc	r24, r26
    92e2:	91 1d       	adc	r25, r1
    92e4:	a1 1d       	adc	r26, r1
    92e6:	6a 0f       	add	r22, r26
    92e8:	71 1d       	adc	r23, r1
    92ea:	81 1d       	adc	r24, r1
    92ec:	91 1d       	adc	r25, r1
    92ee:	a1 1d       	adc	r26, r1
    92f0:	20 d0       	rcall	.+64     	; 0x9332 <__ultoa_invert+0x84>
    92f2:	09 f4       	brne	.+2      	; 0x92f6 <__ultoa_invert+0x48>
    92f4:	68 94       	set
    92f6:	3f 91       	pop	r19
    92f8:	2a e0       	ldi	r18, 0x0A	; 10
    92fa:	26 9f       	mul	r18, r22
    92fc:	11 24       	eor	r1, r1
    92fe:	30 19       	sub	r19, r0
    9300:	30 5d       	subi	r19, 0xD0	; 208
    9302:	31 93       	st	Z+, r19
    9304:	de f6       	brtc	.-74     	; 0x92bc <__ultoa_invert+0xe>
    9306:	cf 01       	movw	r24, r30
    9308:	08 95       	ret
    930a:	46 2f       	mov	r20, r22
    930c:	47 70       	andi	r20, 0x07	; 7
    930e:	40 5d       	subi	r20, 0xD0	; 208
    9310:	41 93       	st	Z+, r20
    9312:	b3 e0       	ldi	r27, 0x03	; 3
    9314:	0f d0       	rcall	.+30     	; 0x9334 <__ultoa_invert+0x86>
    9316:	c9 f7       	brne	.-14     	; 0x930a <__ultoa_invert+0x5c>
    9318:	f6 cf       	rjmp	.-20     	; 0x9306 <__ultoa_invert+0x58>
    931a:	46 2f       	mov	r20, r22
    931c:	4f 70       	andi	r20, 0x0F	; 15
    931e:	40 5d       	subi	r20, 0xD0	; 208
    9320:	4a 33       	cpi	r20, 0x3A	; 58
    9322:	18 f0       	brcs	.+6      	; 0x932a <__ultoa_invert+0x7c>
    9324:	49 5d       	subi	r20, 0xD9	; 217
    9326:	31 fd       	sbrc	r19, 1
    9328:	40 52       	subi	r20, 0x20	; 32
    932a:	41 93       	st	Z+, r20
    932c:	02 d0       	rcall	.+4      	; 0x9332 <__ultoa_invert+0x84>
    932e:	a9 f7       	brne	.-22     	; 0x931a <__ultoa_invert+0x6c>
    9330:	ea cf       	rjmp	.-44     	; 0x9306 <__ultoa_invert+0x58>
    9332:	b4 e0       	ldi	r27, 0x04	; 4
    9334:	a6 95       	lsr	r26
    9336:	97 95       	ror	r25
    9338:	87 95       	ror	r24
    933a:	77 95       	ror	r23
    933c:	67 95       	ror	r22
    933e:	ba 95       	dec	r27
    9340:	c9 f7       	brne	.-14     	; 0x9334 <__ultoa_invert+0x86>
    9342:	00 97       	sbiw	r24, 0x00	; 0
    9344:	61 05       	cpc	r22, r1
    9346:	71 05       	cpc	r23, r1
    9348:	08 95       	ret
    934a:	9b 01       	movw	r18, r22
    934c:	ac 01       	movw	r20, r24
    934e:	0a 2e       	mov	r0, r26
    9350:	06 94       	lsr	r0
    9352:	57 95       	ror	r21
    9354:	47 95       	ror	r20
    9356:	37 95       	ror	r19
    9358:	27 95       	ror	r18
    935a:	ba 95       	dec	r27
    935c:	c9 f7       	brne	.-14     	; 0x9350 <__ultoa_invert+0xa2>
    935e:	62 0f       	add	r22, r18
    9360:	73 1f       	adc	r23, r19
    9362:	84 1f       	adc	r24, r20
    9364:	95 1f       	adc	r25, r21
    9366:	a0 1d       	adc	r26, r0
    9368:	08 95       	ret

0000936a <__ctype_isfalse>:
    936a:	99 27       	eor	r25, r25
    936c:	88 27       	eor	r24, r24

0000936e <__ctype_istrue>:
    936e:	08 95       	ret

00009370 <fgetc>:
    9370:	cf 93       	push	r28
    9372:	df 93       	push	r29
    9374:	ec 01       	movw	r28, r24
    9376:	4b 81       	ldd	r20, Y+3	; 0x03
    9378:	40 ff       	sbrs	r20, 0
    937a:	1a c0       	rjmp	.+52     	; 0x93b0 <fgetc+0x40>
    937c:	46 ff       	sbrs	r20, 6
    937e:	0a c0       	rjmp	.+20     	; 0x9394 <fgetc+0x24>
    9380:	4f 7b       	andi	r20, 0xBF	; 191
    9382:	4b 83       	std	Y+3, r20	; 0x03
    9384:	8e 81       	ldd	r24, Y+6	; 0x06
    9386:	9f 81       	ldd	r25, Y+7	; 0x07
    9388:	01 96       	adiw	r24, 0x01	; 1
    938a:	8e 83       	std	Y+6, r24	; 0x06
    938c:	9f 83       	std	Y+7, r25	; 0x07
    938e:	8a 81       	ldd	r24, Y+2	; 0x02
    9390:	28 2f       	mov	r18, r24
    9392:	2b c0       	rjmp	.+86     	; 0x93ea <fgetc+0x7a>
    9394:	42 ff       	sbrs	r20, 2
    9396:	13 c0       	rjmp	.+38     	; 0x93be <fgetc+0x4e>
    9398:	e8 81       	ld	r30, Y
    939a:	f9 81       	ldd	r31, Y+1	; 0x01
    939c:	80 81       	ld	r24, Z
    939e:	28 2f       	mov	r18, r24
    93a0:	33 27       	eor	r19, r19
    93a2:	27 fd       	sbrc	r18, 7
    93a4:	30 95       	com	r19
    93a6:	21 15       	cp	r18, r1
    93a8:	31 05       	cpc	r19, r1
    93aa:	29 f4       	brne	.+10     	; 0x93b6 <fgetc+0x46>
    93ac:	40 62       	ori	r20, 0x20	; 32
    93ae:	4b 83       	std	Y+3, r20	; 0x03
    93b0:	2f ef       	ldi	r18, 0xFF	; 255
    93b2:	3f ef       	ldi	r19, 0xFF	; 255
    93b4:	1b c0       	rjmp	.+54     	; 0x93ec <fgetc+0x7c>
    93b6:	31 96       	adiw	r30, 0x01	; 1
    93b8:	e8 83       	st	Y, r30
    93ba:	f9 83       	std	Y+1, r31	; 0x01
    93bc:	11 c0       	rjmp	.+34     	; 0x93e0 <fgetc+0x70>
    93be:	ea 85       	ldd	r30, Y+10	; 0x0a
    93c0:	fb 85       	ldd	r31, Y+11	; 0x0b
    93c2:	ce 01       	movw	r24, r28
    93c4:	19 95       	eicall
    93c6:	9c 01       	movw	r18, r24
    93c8:	97 ff       	sbrs	r25, 7
    93ca:	0a c0       	rjmp	.+20     	; 0x93e0 <fgetc+0x70>
    93cc:	9b 81       	ldd	r25, Y+3	; 0x03
    93ce:	2f 5f       	subi	r18, 0xFF	; 255
    93d0:	3f 4f       	sbci	r19, 0xFF	; 255
    93d2:	11 f0       	breq	.+4      	; 0x93d8 <fgetc+0x68>
    93d4:	80 e2       	ldi	r24, 0x20	; 32
    93d6:	01 c0       	rjmp	.+2      	; 0x93da <fgetc+0x6a>
    93d8:	80 e1       	ldi	r24, 0x10	; 16
    93da:	89 2b       	or	r24, r25
    93dc:	8b 83       	std	Y+3, r24	; 0x03
    93de:	e8 cf       	rjmp	.-48     	; 0x93b0 <fgetc+0x40>
    93e0:	8e 81       	ldd	r24, Y+6	; 0x06
    93e2:	9f 81       	ldd	r25, Y+7	; 0x07
    93e4:	01 96       	adiw	r24, 0x01	; 1
    93e6:	8e 83       	std	Y+6, r24	; 0x06
    93e8:	9f 83       	std	Y+7, r25	; 0x07
    93ea:	30 e0       	ldi	r19, 0x00	; 0
    93ec:	c9 01       	movw	r24, r18
    93ee:	df 91       	pop	r29
    93f0:	cf 91       	pop	r28
    93f2:	08 95       	ret

000093f4 <_exit>:
    93f4:	f8 94       	cli

000093f6 <__stop_program>:
    93f6:	ff cf       	rjmp	.-2      	; 0x93f6 <__stop_program>
