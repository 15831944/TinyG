
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000875a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00802000  0000875a  000087ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003f8  0080211c  0080211c  0000890a  2**0
                  ALLOC
  3 .debug_aranges 00000320  00000000  00000000  0000890a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000c02  00000000  00000000  00008c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000074e1  00000000  00000000  0000982c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002435  00000000  00000000  00010d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000462f  00000000  00000000  00013142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009a0  00000000  00000000  00017774  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000021ff  00000000  00000000  00018114  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000383d  00000000  00000000  0001a313  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  0001db50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__ctors_end>
       4:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
       8:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
       c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      10:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      14:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      18:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      1c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      20:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      24:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      28:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      2c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      30:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      34:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      38:	0c 94 68 25 	jmp	0x4ad0	; 0x4ad0 <__vector_14>
      3c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      40:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      44:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      48:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      4c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      50:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      54:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      58:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      5c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      60:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      64:	0c 94 a3 27 	jmp	0x4f46	; 0x4f46 <__vector_25>
      68:	0c 94 21 28 	jmp	0x5042	; 0x5042 <__vector_26>
      6c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      70:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      74:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      78:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      7c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      80:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      84:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      88:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      8c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      90:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      94:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      98:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      9c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      a0:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      a4:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      a8:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      ac:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      b0:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      b4:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      b8:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      bc:	0c 94 9e 24 	jmp	0x493c	; 0x493c <__vector_47>
      c0:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      c4:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      c8:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      cc:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      d0:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      d4:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      d8:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      dc:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      e0:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      e4:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      e8:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      ec:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      f0:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      f4:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      f8:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
      fc:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     100:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     104:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     108:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     10c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     110:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     114:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     118:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     11c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     120:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     124:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     128:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     12c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     130:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     134:	0c 94 03 25 	jmp	0x4a06	; 0x4a06 <__vector_77>
     138:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     13c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     140:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     144:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     148:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     14c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     150:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     154:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     158:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     15c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     160:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     164:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     168:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     16c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     170:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     174:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     178:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     17c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     180:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     184:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     188:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     18c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     190:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     194:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     198:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     19c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1a0:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1a4:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1a8:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1ac:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1b0:	0c 94 39 24 	jmp	0x4872	; 0x4872 <__vector_108>
     1b4:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1b8:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1bc:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1c0:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1c4:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1c8:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1cc:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1d0:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1d4:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1d8:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1dc:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1e0:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1e4:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <cfgMsgXaxis>:
     23b:	58 00                                               X.

0000023d <cfgMsgYaxis>:
     23d:	59 00                                               Y.

0000023f <cfgMsgZaxis>:
     23f:	5a 00                                               Z.

00000241 <cfgMsgAaxis>:
     241:	41 00                                               A.

00000243 <cfgMsgs>:
     243:	3b 02 3d 02 3f 02 41 02                             ;.=.?.A.

0000024b <configs_P>:
     24b:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25b:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26b:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27b:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28b:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29b:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2ab:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bb:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2db:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2eb:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2fb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30b:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31b:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32b:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33b:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34b:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35b:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36b:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37b:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38b:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

00000399 <__c.3815>:
     399:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     3a9:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

000003b4 <__c.3812>:
     3b4:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     3c4:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

000003ce <__c.3809>:
     3ce:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     3de:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

000003e8 <__c.3806>:
     3e8:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     3f8:	74 3a 20 25 73 0a 00                                t: %s..

000003ff <__c.3803>:
     3ff:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     40f:	4d 6f 64 65 0a 00                                   Mode..

00000415 <__c.3800>:
     415:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     425:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

00000432 <__c.3732>:
     432:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     442:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     452:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     462:	29 0a 0a 00                                         )...

00000466 <__c.3730>:
     466:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     476:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     486:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000496 <__c.3728>:
     496:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     4a6:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4b6:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004c7 <__c.3726>:
     4c7:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     4d7:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4e7:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004f8 <__c.3724>:
     4f8:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     508:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     518:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     528:	6c 0a 00                                            l..

0000052b <__c.3722>:
     52b:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     53b:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     54b:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     55b:	6e 0a 00                                            n..

0000055e <__c.3720>:
     55e:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     56e:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     57e:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     58e:	74 65 70 73 29 0a 00                                teps)..

00000595 <__c.3718>:
     595:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     5a5:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     5b5:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     5c5:	70 0a 00                                            p..

000005c8 <__c.3716>:
     5c8:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     5d8:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     5e8:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     5f8:	73 74 65 70 73 29 0a 00                             steps)..

00000600 <__c.3714>:
     600:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     610:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     620:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     630:	73 74 65 70 73 29 0a 00                             steps)..

00000638 <__c.3709>:
     638:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     648:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

00000656 <__c.3695>:
     656:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     666:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     676:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000681 <__c.3693>:
     681:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     691:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     6a1:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000006ab <__c.3691>:
     6ab:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     6bb:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     6cb:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000006d5 <__c.3689>:
     6d5:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     6e5:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     6f5:	73 20 2d 2d 2d 0a 00                                s ---..

000006fc <__c.3687>:
     6fc:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     70c:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     71c:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000724 <bsel>:
     724:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

0000072f <bscale>:
     72f:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

0000073a <__c.3505>:
     73a:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     74a:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     75a:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000766 <readlnFuncs>:
     766:	e3 29 b8 29 b8 29 2a 2a b8 29 b8 29 b8 29 b8 29     .).).)**.).).).)
     776:	16 2a b8 29 e3 29 b8 29 b8 29 e3 29 45 2a 4e 2a     .*.).).).).)E*N*
     786:	b8 29 3c 2a b8 29 33 2a b8 29 b8 29 b8 29 b8 29     .)<*.)3*.).).).)
     796:	2a 2a b8 29 b8 29 2a 2a b8 29 b8 29 b8 29 b8 29     **.).)**.).).).)
     7a6:	b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29     .).).).).).).).)
     7b6:	b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29     .).).).).).).).)
     7c6:	b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29     .).).).).).).).)
     7d6:	b8 29 b8 29 b8 29 0c 2a b8 29 b8 29 b8 29 b8 29     .).).).*.).).).)
     7e6:	b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29     .).).).).).).).)
     7f6:	b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29     .).).).).).).).)
     806:	b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29     .).).).).).).).)
     816:	b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29     .).).).).).).).)
     826:	b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29     .).).).).).).).)
     836:	b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29     .).).).).).).).)
     846:	b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29     .).).).).).).).)
     856:	b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 b8 29 16 2a     .).).).).).).).*

00000866 <getcFuncs>:
     866:	37 29 27 29 27 29 5c 29 27 29 27 29 27 29 27 29     7)')')\)')')')')
     876:	56 29 27 29 37 29 27 29 27 29 37 29 6e 29 74 29     V)')7)')')7)n)t)
     886:	27 29 68 29 27 29 62 29 27 29 27 29 27 29 27 29     ')h)')b)')')')')
     896:	5c 29 27 29 27 29 5c 29 27 29 27 29 27 29 27 29     \)')')\)')')')')
     8a6:	27 29 27 29 27 29 27 29 27 29 27 29 27 29 27 29     ')')')')')')')')
     8b6:	27 29 27 29 27 29 27 29 27 29 27 29 27 29 27 29     ')')')')')')')')
     8c6:	27 29 27 29 27 29 27 29 27 29 27 29 27 29 27 29     ')')')')')')')')
     8d6:	27 29 27 29 27 29 4c 29 27 29 27 29 27 29 27 29     ')')')L)')')')')
     8e6:	27 29 27 29 27 29 27 29 27 29 27 29 27 29 27 29     ')')')')')')')')
     8f6:	27 29 27 29 27 29 27 29 27 29 27 29 27 29 27 29     ')')')')')')')')
     906:	27 29 27 29 27 29 27 29 27 29 27 29 27 29 27 29     ')')')')')')')')
     916:	27 29 27 29 27 29 27 29 27 29 27 29 27 29 27 29     ')')')')')')')')
     926:	27 29 27 29 27 29 27 29 27 29 27 29 27 29 27 29     ')')')')')')')')
     936:	27 29 27 29 27 29 27 29 27 29 27 29 27 29 27 29     ')')')')')')')')
     946:	27 29 27 29 27 29 27 29 27 29 27 29 27 29 27 29     ')')')')')')')')
     956:	27 29 27 29 27 29 27 29 27 29 27 29 27 29 56 29     ')')')')')')')V)

00000966 <square_test1>:
     966:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     976:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     986:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     996:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     9a6:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     9b6:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     9c6:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000009d4 <square_test2>:
     9d4:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     9e4:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     9f4:	78 30 20 79 30 00                                   x0 y0.

000009fa <square_test10>:
     9fa:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     a0a:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     a1a:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000a26 <circle_test10>:
     a26:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     a36:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     a46:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     a56:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     a66:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     a76:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     a86:	30 00                                               0.

00000a88 <square_circle_test10>:
     a88:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     a98:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     aa8:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     ab8:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     ac8:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     ad8:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     ae8:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     af8:	31 30 20 79 30 00                                   10 y0.

00000afe <square_circle_test100>:
     afe:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     b0e:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     b1e:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     b2e:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     b3e:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     b4e:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     b5e:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     b6e:	35 30 20 6a 30 00                                   50 j0.

00000b74 <spiral_test5>:
     b74:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     b84:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     b94:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     ba4:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     bb4:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     bc4:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     bd4:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     be4:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

00000bee <spiral_test50a>:
     bee:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     bfe:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

00000c0e <g0_test1>:
     c0e:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     c1e:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000c2e <g0_test2>:
     c2e:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     c3e:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     c4e:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     c5e:	79 30 20 7a 30 00                                   y0 z0.

00000c64 <g0_test3>:
     c64:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     c74:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     c84:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000c92 <radius_arc_test1>:
     c92:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     ca2:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     cb2:	72 35 30 0a 00                                      r50..

00000cb7 <radius_arc_test2>:
     cb7:	67 32 0a 00                                         g2..

00000cbb <zoetrope>:
     cbb:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     ccb:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     cdb:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     ceb:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     cfb:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     d0b:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     d1b:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     d2b:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     d3b:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     d4b:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     d5b:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     d6b:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     d7b:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     d8b:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     d9b:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     dab:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     dbb:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     dcb:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     ddb:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     deb:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     dfb:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     e0b:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     e1b:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     e2b:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     e3b:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     e4b:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     e5b:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     e6b:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     e7b:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     e8b:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     e9b:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     eab:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     ebb:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     ecb:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     edb:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     eeb:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
     efb:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
     f0b:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
     f1b:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
     f2b:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
     f3b:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
     f4b:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
     f5b:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
     f6b:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
     f7b:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
     f8b:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
     f9b:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
     fab:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
     fbb:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
     fcb:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
     fdb:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
     feb:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
     ffb:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
    100b:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
    101b:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
    102b:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
    103b:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
    104b:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
    105b:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
    106b:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
    107b:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
    108b:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
    109b:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
    10ab:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
    10bb:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
    10cb:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
    10db:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
    10eb:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    10fb:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    110b:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    111b:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    112b:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    113b:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    114b:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    115b:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    116b:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    117b:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    118b:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    119b:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    11ab:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    11bb:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    11cb:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    11db:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    11eb:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    11fb:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    120b:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    121b:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    122b:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    123b:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    124b:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    125b:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    126b:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    127b:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    128b:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    129b:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    12ab:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    12bb:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    12cb:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    12db:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    12eb:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    12fb:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    130b:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    131b:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    132b:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    133b:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    134b:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    135b:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    136b:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    137b:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    138b:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    139b:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    13ab:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    13bb:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    13cb:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    13db:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    13eb:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    13fb:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    140b:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    141b:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    142b:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    143b:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    144b:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    145b:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    146b:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    147b:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    148b:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    149b:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    14ab:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    14bb:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    14cb:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    14db:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    14eb:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    14fb:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    150b:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    151b:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    152b:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    153b:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    154b:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    155b:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    156b:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    157b:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    158b:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    159b:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    15ab:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    15bb:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    15cb:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    15db:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    15eb:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    15fb:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    160b:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    161b:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    162b:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    163b:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    164b:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    165b:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    166b:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

00001676 <contraptor_circle>:
    1676:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    1686:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    1696:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    16a6:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    16b6:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    16c6:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    16d6:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    16e6:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    16f6:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    1706:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    1716:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    1726:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    1736:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    1746:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    1756:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    1766:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    1776:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    1786:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    1796:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    17a6:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    17b6:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    17c6:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    17d6:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    17e6:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    17f6:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    1806:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    1816:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    1826:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    1836:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    1846:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    1856:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    1866:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    1876:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    1886:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    1896:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    18a6:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    18b6:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    18c6:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    18d6:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    18e6:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    18f6:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1906:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1916:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    1926:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    1936:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    1946:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    1956:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    1966:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    1976:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1986:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    1996:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    19a6:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    19b6:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    19c6:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    19d6:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    19e6:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    19f6:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1a06:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1a16:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1a26:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1a36:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1a46:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001a56 <tgModeStringControl>:
    1a56:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001a63 <tgModeStringConfig>:
    1a63:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001a6f <tgModeStringGCode>:
    1a6f:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

00001a7b <tgModeStringDirect>:
    1a7b:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

00001a88 <tgModeStrings>:
    1a88:	56 1a 63 1a 6f 1a 7b 1a                             V.c.o.{.

00001a90 <__c.3942>:
    1a90:	0d 0a 45 6e 64 20 6f 66 20 66 69 6c 65 20 65 6e     ..End of file en
    1aa0:	63 6f 75 6e 74 65 72 65 64 0d 0a 00                 countered...

00001aac <__c.3888>:
    1aac:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 0a 00        TinyG [%S]*> ..

00001abb <__c.3883>:
    1abb:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 0a 00        TinyG [%S]*> ..

00001aca <__c.3910>:
    1aca:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1ada:	69 6c 65 0a 00                                      ile..

00001adf <__c.3815>:
    1adf:	62 75 69 6c 64 20 31 39 38 00                       build 198.

00001ae9 <__c.3813>:
    1ae9:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1af9:	25 53 0a 00                                         %S..

00001afd <pstr_inf>:
    1afd:	49 4e 46                                            INF

00001b00 <pstr_inity>:
    1b00:	49 4e 49 54 59                                      INITY

00001b05 <pstr_nan>:
    1b05:	4e 41 4e                                            NAN

00001b08 <pwr_m10>:
    1b08:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1b18:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001b20 <pwr_p10>:
    1b20:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1b30:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1b40:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1b50:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1b60:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1b70:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1b80:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1b90:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1ba0:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1bb0:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1bc0:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1bd0:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1be0:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1bf0:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1c00:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1c10:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1c20:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1c30:	3d 27                                               ='

00001c32 <__ctors_end>:
    1c32:	11 24       	eor	r1, r1
    1c34:	1f be       	out	0x3f, r1	; 63
    1c36:	cf ef       	ldi	r28, 0xFF	; 255
    1c38:	df e5       	ldi	r29, 0x5F	; 95
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	00 e0       	ldi	r16, 0x00	; 0
    1c40:	0c bf       	out	0x3c, r16	; 60

00001c42 <__do_copy_data>:
    1c42:	11 e2       	ldi	r17, 0x21	; 33
    1c44:	a0 e0       	ldi	r26, 0x00	; 0
    1c46:	b0 e2       	ldi	r27, 0x20	; 32
    1c48:	ea e5       	ldi	r30, 0x5A	; 90
    1c4a:	f7 e8       	ldi	r31, 0x87	; 135
    1c4c:	00 e0       	ldi	r16, 0x00	; 0
    1c4e:	0b bf       	out	0x3b, r16	; 59
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <__do_copy_data+0x14>
    1c52:	07 90       	elpm	r0, Z+
    1c54:	0d 92       	st	X+, r0
    1c56:	ac 31       	cpi	r26, 0x1C	; 28
    1c58:	b1 07       	cpc	r27, r17
    1c5a:	d9 f7       	brne	.-10     	; 0x1c52 <__do_copy_data+0x10>

00001c5c <__do_clear_bss>:
    1c5c:	15 e2       	ldi	r17, 0x25	; 37
    1c5e:	ac e1       	ldi	r26, 0x1C	; 28
    1c60:	b1 e2       	ldi	r27, 0x21	; 33
    1c62:	01 c0       	rjmp	.+2      	; 0x1c66 <.do_clear_bss_start>

00001c64 <.do_clear_bss_loop>:
    1c64:	1d 92       	st	X+, r1

00001c66 <.do_clear_bss_start>:
    1c66:	a4 31       	cpi	r26, 0x14	; 20
    1c68:	b1 07       	cpc	r27, r17
    1c6a:	e1 f7       	brne	.-8      	; 0x1c64 <.do_clear_bss_loop>
    1c6c:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <main>
    1c70:	0c 94 ab 43 	jmp	0x8756	; 0x8756 <_exit>

00001c74 <__bad_interrupt>:
    1c74:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001c78 <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1c78:	f8 94       	cli
	xmega_init();				// xmega setup
    1c7a:	0e 94 ff 19 	call	0x33fe	; 0x33fe <xmega_init>
	xio_init();					// xmega io subsystem
    1c7e:	0e 94 21 26 	call	0x4c42	; 0x4c42 <xio_init>

	cfg_init();					// get config record from eeprom
    1c82:	0e 94 24 16 	call	0x2c48	; 0x2c48 <cfg_init>
	st_init(); 					// stepper subsystem
    1c86:	0e 94 90 22 	call	0x4520	; 0x4520 <st_init>
	mv_init();					// move buffers
    1c8a:	0e 94 a1 2f 	call	0x5f42	; 0x5f42 <mv_init>
	mc_init();					// motion control subsystem
    1c8e:	0e 94 1f 1a 	call	0x343e	; 0x343e <mc_init>
	spindle_init();				// spindle controller
    1c92:	0e 94 74 22 	call	0x44e8	; 0x44e8 <spindle_init>
	en_init();					// encoders
    1c96:	0e 94 cb 19 	call	0x3396	; 0x3396 <en_init>
	gc_init();					// gcode-parser
    1c9a:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <gc_init>
	dd_init();					// direct drive commands
    1c9e:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <dd_init>
	tg_init();					// tinyg parsers
    1ca2:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1ca6:	0e 94 d5 25 	call	0x4baa	; 0x4baa <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1caa:	e0 ea       	ldi	r30, 0xA0	; 160
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 91 a2 00 	lds	r24, 0x00A2
    1cb2:	81 60       	ori	r24, 0x01	; 1
    1cb4:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1cb6:	80 91 a2 00 	lds	r24, 0x00A2
    1cba:	82 60       	ori	r24, 0x02	; 2
    1cbc:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1cbe:	80 91 a2 00 	lds	r24, 0x00A2
    1cc2:	84 60       	ori	r24, 0x04	; 4
    1cc4:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1cc6:	78 94       	sei
//	xio_usb_queue_RX_string("f\n");
//	xio_usb_queue_RX_string("?\n");
//	xio_usb_queue_RX_string("g0x10y10z25\n");

	for(;;){
		tg_controller();
    1cc8:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <tg_controller>
    1ccc:	fd cf       	rjmp	.-6      	; 0x1cc8 <main+0x50>

00001cce <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1cce:	80 93 69 21 	sts	0x2169, r24
	gc.plane_axis_1 = axis_1;
    1cd2:	60 93 6a 21 	sts	0x216A, r22
	gc.plane_axis_2 = axis_2;
    1cd6:	40 93 6b 21 	sts	0x216B, r20
}
    1cda:	08 95       	ret

00001cdc <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1cdc:	ef 92       	push	r14
    1cde:	ff 92       	push	r15
    1ce0:	0f 93       	push	r16
    1ce2:	1f 93       	push	r17
    1ce4:	7b 01       	movw	r14, r22
    1ce6:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    1ce8:	80 91 29 21 	lds	r24, 0x2129
    1cec:	88 23       	and	r24, r24
    1cee:	51 f0       	breq	.+20     	; 0x1d04 <to_millimeters+0x28>
    1cf0:	c8 01       	movw	r24, r16
    1cf2:	b7 01       	movw	r22, r14
    1cf4:	25 e8       	ldi	r18, 0x85	; 133
    1cf6:	32 e4       	ldi	r19, 0x42	; 66
    1cf8:	41 e2       	ldi	r20, 0x21	; 33
    1cfa:	5d e3       	ldi	r21, 0x3D	; 61
    1cfc:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    1d00:	7b 01       	movw	r14, r22
    1d02:	8c 01       	movw	r16, r24
}
    1d04:	b7 01       	movw	r22, r14
    1d06:	c8 01       	movw	r24, r16
    1d08:	1f 91       	pop	r17
    1d0a:	0f 91       	pop	r16
    1d0c:	ff 90       	pop	r15
    1d0e:	ef 90       	pop	r14
    1d10:	08 95       	ret

00001d12 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    1d12:	86 e5       	ldi	r24, 0x56	; 86
    1d14:	ec e1       	ldi	r30, 0x1C	; 28
    1d16:	f1 e2       	ldi	r31, 0x21	; 33
    1d18:	df 01       	movw	r26, r30
    1d1a:	1d 92       	st	X+, r1
    1d1c:	8a 95       	dec	r24
    1d1e:	e9 f7       	brne	.-6      	; 0x1d1a <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	a0 e0       	ldi	r26, 0x00	; 0
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	80 93 2d 21 	sts	0x212D, r24
    1d2c:	90 93 2e 21 	sts	0x212E, r25
    1d30:	a0 93 2f 21 	sts	0x212F, r26
    1d34:	b0 93 30 21 	sts	0x2130, r27
	gc.radius = 0;							// radius value
    1d38:	80 93 31 21 	sts	0x2131, r24
    1d3c:	90 93 32 21 	sts	0x2132, r25
    1d40:	a0 93 33 21 	sts	0x2133, r26
    1d44:	b0 93 34 21 	sts	0x2134, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    1d48:	80 91 4a 24 	lds	r24, 0x244A
    1d4c:	90 91 4b 24 	lds	r25, 0x244B
    1d50:	a0 91 4c 24 	lds	r26, 0x244C
    1d54:	b0 91 4d 24 	lds	r27, 0x244D
    1d58:	80 93 35 21 	sts	0x2135, r24
    1d5c:	90 93 36 21 	sts	0x2136, r25
    1d60:	a0 93 37 21 	sts	0x2137, r26
    1d64:	b0 93 38 21 	sts	0x2138, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    1d68:	80 91 4e 24 	lds	r24, 0x244E
    1d6c:	90 91 4f 24 	lds	r25, 0x244F
    1d70:	a0 91 50 24 	lds	r26, 0x2450
    1d74:	b0 91 51 24 	lds	r27, 0x2451
    1d78:	80 93 39 21 	sts	0x2139, r24
    1d7c:	90 93 3a 21 	sts	0x213A, r25
    1d80:	a0 93 3b 21 	sts	0x213B, r26
    1d84:	b0 93 3c 21 	sts	0x213C, r27

	gc.absolute_mode = TRUE;
    1d88:	21 e0       	ldi	r18, 0x01	; 1
    1d8a:	20 93 2a 21 	sts	0x212A, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	a0 e8       	ldi	r26, 0x80	; 128
    1d94:	bf eb       	ldi	r27, 0xBF	; 191
    1d96:	80 93 41 21 	sts	0x2141, r24
    1d9a:	90 93 42 21 	sts	0x2142, r25
    1d9e:	a0 93 43 21 	sts	0x2143, r26
    1da2:	b0 93 44 21 	sts	0x2144, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    1da6:	10 92 2b 21 	sts	0x212B, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    1daa:	10 92 70 21 	sts	0x2170, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    1dae:	10 92 71 21 	sts	0x2171, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1db2:	10 92 69 21 	sts	0x2169, r1
	gc.plane_axis_1 = axis_1;
    1db6:	20 93 6a 21 	sts	0x216A, r18
	gc.plane_axis_2 = axis_2;
    1dba:	82 e0       	ldi	r24, 0x02	; 2
    1dbc:	80 93 6b 21 	sts	0x216B, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X_AXIS, Y_AXIS, Z_AXIS);
}
    1dc0:	08 95       	ret

00001dc2 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    1dc2:	4f 92       	push	r4
    1dc4:	5f 92       	push	r5
    1dc6:	6f 92       	push	r6
    1dc8:	7f 92       	push	r7
    1dca:	8f 92       	push	r8
    1dcc:	9f 92       	push	r9
    1dce:	af 92       	push	r10
    1dd0:	bf 92       	push	r11
    1dd2:	cf 92       	push	r12
    1dd4:	df 92       	push	r13
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	0f 92       	push	r0
    1de4:	0f 92       	push	r0
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	3b 01       	movw	r6, r22
    1dec:	2a 01       	movw	r4, r20
    1dee:	49 01       	movw	r8, r18
    1df0:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    1df2:	d8 01       	movw	r26, r16
    1df4:	ed 91       	ld	r30, X+
    1df6:	fc 91       	ld	r31, X
    1df8:	e2 0f       	add	r30, r18
    1dfa:	f3 1f       	adc	r31, r19
    1dfc:	e0 81       	ld	r30, Z
    1dfe:	ee 23       	and	r30, r30
    1e00:	41 f0       	breq	.+16     	; 0x1e12 <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    1e02:	dc 01       	movw	r26, r24
    1e04:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    1e06:	e1 54       	subi	r30, 0x41	; 65
    1e08:	ea 31       	cpi	r30, 0x1A	; 26
    1e0a:	30 f0       	brcs	.+12     	; 0x1e18 <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    1e0c:	88 e0       	ldi	r24, 0x08	; 8
    1e0e:	80 93 1c 21 	sts	0x211C, r24
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	35 c0       	rjmp	.+106    	; 0x1e82 <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    1e18:	f8 01       	movw	r30, r16
    1e1a:	80 81       	ld	r24, Z
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	01 96       	adiw	r24, 0x01	; 1
    1e20:	80 83       	st	Z, r24
    1e22:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    1e24:	89 01       	movw	r16, r18
    1e26:	08 0f       	add	r16, r24
    1e28:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    1e2a:	c8 01       	movw	r24, r16
    1e2c:	be 01       	movw	r22, r28
    1e2e:	6f 5f       	subi	r22, 0xFF	; 255
    1e30:	7f 4f       	sbci	r23, 0xFF	; 255
    1e32:	0e 94 df 3f 	call	0x7fbe	; 0x7fbe <strtod>
    1e36:	6b 01       	movw	r12, r22
    1e38:	7c 01       	movw	r14, r24
    1e3a:	d3 01       	movw	r26, r6
    1e3c:	6d 93       	st	X+, r22
    1e3e:	7d 93       	st	X+, r23
    1e40:	8d 93       	st	X+, r24
    1e42:	9c 93       	st	X, r25
    1e44:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4a:	80 17       	cp	r24, r16
    1e4c:	91 07       	cpc	r25, r17
    1e4e:	11 f4       	brne	.+4      	; 0x1e54 <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    1e50:	8c e0       	ldi	r24, 0x0C	; 12
    1e52:	dd cf       	rjmp	.-70     	; 0x1e0e <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    1e54:	88 19       	sub	r24, r8
    1e56:	99 09       	sbc	r25, r9
    1e58:	f5 01       	movw	r30, r10
    1e5a:	80 83       	st	Z, r24
    1e5c:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    1e5e:	c7 01       	movw	r24, r14
    1e60:	b6 01       	movw	r22, r12
    1e62:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <trunc>
    1e66:	9b 01       	movw	r18, r22
    1e68:	ac 01       	movw	r20, r24
    1e6a:	c7 01       	movw	r24, r14
    1e6c:	b6 01       	movw	r22, r12
    1e6e:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    1e72:	d2 01       	movw	r26, r4
    1e74:	6d 93       	st	X+, r22
    1e76:	7d 93       	st	X+, r23
    1e78:	8d 93       	st	X+, r24
    1e7a:	9c 93       	st	X, r25
    1e7c:	13 97       	sbiw	r26, 0x03	; 3
    1e7e:	21 e0       	ldi	r18, 0x01	; 1
    1e80:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    1e82:	c9 01       	movw	r24, r18
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	ff 90       	pop	r15
    1e92:	ef 90       	pop	r14
    1e94:	df 90       	pop	r13
    1e96:	cf 90       	pop	r12
    1e98:	bf 90       	pop	r11
    1e9a:	af 90       	pop	r10
    1e9c:	9f 90       	pop	r9
    1e9e:	8f 90       	pop	r8
    1ea0:	7f 90       	pop	r7
    1ea2:	6f 90       	pop	r6
    1ea4:	5f 90       	pop	r5
    1ea6:	4f 90       	pop	r4
    1ea8:	08 95       	ret

00001eaa <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    1eaa:	af 92       	push	r10
    1eac:	bf 92       	push	r11
    1eae:	cf 92       	push	r12
    1eb0:	df 92       	push	r13
    1eb2:	ef 92       	push	r14
    1eb4:	ff 92       	push	r15
    1eb6:	0f 93       	push	r16
    1eb8:	1f 93       	push	r17
    1eba:	79 01       	movw	r14, r18
    1ebc:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    1ebe:	5f 77       	andi	r21, 0x7F	; 127
    1ec0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    1ec4:	0e 94 99 3b 	call	0x7732	; 0x7732 <atan>
    1ec8:	5b 01       	movw	r10, r22
    1eca:	6c 01       	movw	r12, r24

	if (y>0) {
    1ecc:	c8 01       	movw	r24, r16
    1ece:	b7 01       	movw	r22, r14
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	0e 94 c4 3d 	call	0x7b88	; 0x7b88 <__gesf2>
    1edc:	18 16       	cp	r1, r24
    1ede:	cc f0       	brlt	.+50     	; 0x1f12 <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    1ee0:	c6 01       	movw	r24, r12
    1ee2:	b5 01       	movw	r22, r10
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	50 e0       	ldi	r21, 0x00	; 0
    1eec:	0e 94 c4 3d 	call	0x7b88	; 0x7b88 <__gesf2>
    1ef0:	18 16       	cp	r1, r24
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <theta+0x54>
	    {
			return(M_PI-theta);
    1ef4:	6b ed       	ldi	r22, 0xDB	; 219
    1ef6:	7f e0       	ldi	r23, 0x0F	; 15
    1ef8:	89 e4       	ldi	r24, 0x49	; 73
    1efa:	90 e4       	ldi	r25, 0x40	; 64
    1efc:	04 c0       	rjmp	.+8      	; 0x1f06 <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    1efe:	6b ed       	ldi	r22, 0xDB	; 219
    1f00:	7f e0       	ldi	r23, 0x0F	; 15
    1f02:	89 e4       	ldi	r24, 0x49	; 73
    1f04:	90 ec       	ldi	r25, 0xC0	; 192
    1f06:	a6 01       	movw	r20, r12
    1f08:	95 01       	movw	r18, r10
    1f0a:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    1f0e:	5b 01       	movw	r10, r22
    1f10:	6c 01       	movw	r12, r24
		}
	}
}
    1f12:	b5 01       	movw	r22, r10
    1f14:	c6 01       	movw	r24, r12
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	ff 90       	pop	r15
    1f1c:	ef 90       	pop	r14
    1f1e:	df 90       	pop	r13
    1f20:	cf 90       	pop	r12
    1f22:	bf 90       	pop	r11
    1f24:	af 90       	pop	r10
    1f26:	08 95       	ret

00001f28 <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    1f28:	2f 92       	push	r2
    1f2a:	3f 92       	push	r3
    1f2c:	4f 92       	push	r4
    1f2e:	5f 92       	push	r5
    1f30:	6f 92       	push	r6
    1f32:	7f 92       	push	r7
    1f34:	8f 92       	push	r8
    1f36:	9f 92       	push	r9
    1f38:	af 92       	push	r10
    1f3a:	bf 92       	push	r11
    1f3c:	cf 92       	push	r12
    1f3e:	df 92       	push	r13
    1f40:	ef 92       	push	r14
    1f42:	ff 92       	push	r15
    1f44:	0f 93       	push	r16
    1f46:	1f 93       	push	r17
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	68 97       	sbiw	r28, 0x18	; 24
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    1f58:	19 82       	std	Y+1, r1	; 0x01
    1f5a:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    1f5c:	e1 e5       	ldi	r30, 0x51	; 81
    1f5e:	f1 e2       	ldi	r31, 0x21	; 33
    1f60:	8c e0       	ldi	r24, 0x0C	; 12
    1f62:	df 01       	movw	r26, r30
    1f64:	28 2f       	mov	r18, r24
    1f66:	1d 92       	st	X+, r1
    1f68:	2a 95       	dec	r18
    1f6a:	e9 f7       	brne	.-6      	; 0x1f66 <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    1f6c:	3c 96       	adiw	r30, 0x0c	; 12
    1f6e:	df 01       	movw	r26, r30
    1f70:	1d 92       	st	X+, r1
    1f72:	8a 95       	dec	r24
    1f74:	e9 f7       	brne	.-6      	; 0x1f70 <gc_execute_block+0x48>

	gc.status = TG_OK;
    1f76:	10 92 1c 21 	sts	0x211C, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    1f7a:	10 92 2c 21 	sts	0x212C, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    1f7e:	6e 01       	movw	r12, r28
    1f80:	08 94       	sec
    1f82:	c1 1c       	adc	r12, r1
    1f84:	d1 1c       	adc	r13, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    1f86:	ff 24       	eor	r15, r15
    1f88:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    1f8a:	ba e0       	ldi	r27, 0x0A	; 10
    1f8c:	bb 2e       	mov	r11, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    1f8e:	a2 e0       	ldi	r26, 0x02	; 2
    1f90:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    1f92:	77 24       	eor	r7, r7
    1f94:	7a 94       	dec	r7
					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }
					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    1f96:	f4 e0       	ldi	r31, 0x04	; 4
    1f98:	6f 2e       	mov	r6, r31
			case 'G':
				switch((int)gc.value) {
					case 0:  { gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
					case 1:  { gc.motion_mode = MOTION_MODE_LINEAR; break; }
					case 2:  { gc.motion_mode = MOTION_MODE_CW_ARC; break; }
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    1f9a:	e3 e0       	ldi	r30, 0x03	; 3
    1f9c:	ae 2e       	mov	r10, r30
    1f9e:	02 c1       	rjmp	.+516    	; 0x21a4 <gc_execute_block+0x27c>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    1fa0:	80 91 1d 21 	lds	r24, 0x211D
    1fa4:	8d 34       	cpi	r24, 0x4D	; 77
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <gc_execute_block+0x82>
    1fa8:	b6 c0       	rjmp	.+364    	; 0x2116 <gc_execute_block+0x1ee>
    1faa:	84 35       	cpi	r24, 0x54	; 84
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <gc_execute_block+0x88>
    1fae:	e8 c0       	rjmp	.+464    	; 0x2180 <gc_execute_block+0x258>
    1fb0:	87 34       	cpi	r24, 0x47	; 71
    1fb2:	09 f0       	breq	.+2      	; 0x1fb6 <gc_execute_block+0x8e>
    1fb4:	f3 c0       	rjmp	.+486    	; 0x219c <gc_execute_block+0x274>
			case 'G':
				switch((int)gc.value) {
    1fb6:	60 91 1e 21 	lds	r22, 0x211E
    1fba:	70 91 1f 21 	lds	r23, 0x211F
    1fbe:	80 91 20 21 	lds	r24, 0x2120
    1fc2:	90 91 21 21 	lds	r25, 0x2121
    1fc6:	0e 94 43 3c 	call	0x7886	; 0x7886 <__fixsfsi>
    1fca:	65 31       	cpi	r22, 0x15	; 21
    1fcc:	71 05       	cpc	r23, r1
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <gc_execute_block+0xaa>
    1fd0:	87 c0       	rjmp	.+270    	; 0x20e0 <gc_execute_block+0x1b8>
    1fd2:	66 31       	cpi	r22, 0x16	; 22
    1fd4:	71 05       	cpc	r23, r1
    1fd6:	84 f5       	brge	.+96     	; 0x2038 <gc_execute_block+0x110>
    1fd8:	64 30       	cpi	r22, 0x04	; 4
    1fda:	71 05       	cpc	r23, r1
    1fdc:	09 f4       	brne	.+2      	; 0x1fe0 <gc_execute_block+0xb8>
    1fde:	65 c0       	rjmp	.+202    	; 0x20aa <gc_execute_block+0x182>
    1fe0:	65 30       	cpi	r22, 0x05	; 5
    1fe2:	71 05       	cpc	r23, r1
    1fe4:	a4 f4       	brge	.+40     	; 0x200e <gc_execute_block+0xe6>
    1fe6:	61 30       	cpi	r22, 0x01	; 1
    1fe8:	71 05       	cpc	r23, r1
    1fea:	09 f4       	brne	.+2      	; 0x1fee <gc_execute_block+0xc6>
    1fec:	55 c0       	rjmp	.+170    	; 0x2098 <gc_execute_block+0x170>
    1fee:	62 30       	cpi	r22, 0x02	; 2
    1ff0:	71 05       	cpc	r23, r1
    1ff2:	24 f4       	brge	.+8      	; 0x1ffc <gc_execute_block+0xd4>
    1ff4:	67 2b       	or	r22, r23
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <gc_execute_block+0xd2>
    1ff8:	4c c0       	rjmp	.+152    	; 0x2092 <gc_execute_block+0x16a>
    1ffa:	bf c0       	rjmp	.+382    	; 0x217a <gc_execute_block+0x252>
    1ffc:	62 30       	cpi	r22, 0x02	; 2
    1ffe:	71 05       	cpc	r23, r1
    2000:	09 f4       	brne	.+2      	; 0x2004 <gc_execute_block+0xdc>
    2002:	4d c0       	rjmp	.+154    	; 0x209e <gc_execute_block+0x176>
    2004:	63 30       	cpi	r22, 0x03	; 3
    2006:	71 05       	cpc	r23, r1
    2008:	09 f0       	breq	.+2      	; 0x200c <gc_execute_block+0xe4>
    200a:	b7 c0       	rjmp	.+366    	; 0x217a <gc_execute_block+0x252>
    200c:	4b c0       	rjmp	.+150    	; 0x20a4 <gc_execute_block+0x17c>
    200e:	62 31       	cpi	r22, 0x12	; 18
    2010:	71 05       	cpc	r23, r1
    2012:	09 f4       	brne	.+2      	; 0x2016 <gc_execute_block+0xee>
    2014:	54 c0       	rjmp	.+168    	; 0x20be <gc_execute_block+0x196>
    2016:	63 31       	cpi	r22, 0x13	; 19
    2018:	71 05       	cpc	r23, r1
    201a:	2c f4       	brge	.+10     	; 0x2026 <gc_execute_block+0xfe>
    201c:	61 31       	cpi	r22, 0x11	; 17
    201e:	71 05       	cpc	r23, r1
    2020:	09 f0       	breq	.+2      	; 0x2024 <gc_execute_block+0xfc>
    2022:	ab c0       	rjmp	.+342    	; 0x217a <gc_execute_block+0x252>
    2024:	45 c0       	rjmp	.+138    	; 0x20b0 <gc_execute_block+0x188>
    2026:	63 31       	cpi	r22, 0x13	; 19
    2028:	71 05       	cpc	r23, r1
    202a:	09 f4       	brne	.+2      	; 0x202e <gc_execute_block+0x106>
    202c:	4f c0       	rjmp	.+158    	; 0x20cc <gc_execute_block+0x1a4>
    202e:	64 31       	cpi	r22, 0x14	; 20
    2030:	71 05       	cpc	r23, r1
    2032:	09 f0       	breq	.+2      	; 0x2036 <gc_execute_block+0x10e>
    2034:	a2 c0       	rjmp	.+324    	; 0x217a <gc_execute_block+0x252>
    2036:	51 c0       	rjmp	.+162    	; 0x20da <gc_execute_block+0x1b2>
    2038:	6a 35       	cpi	r22, 0x5A	; 90
    203a:	71 05       	cpc	r23, r1
    203c:	09 f4       	brne	.+2      	; 0x2040 <gc_execute_block+0x118>
    203e:	5c c0       	rjmp	.+184    	; 0x20f8 <gc_execute_block+0x1d0>
    2040:	6b 35       	cpi	r22, 0x5B	; 91
    2042:	71 05       	cpc	r23, r1
    2044:	ac f4       	brge	.+42     	; 0x2070 <gc_execute_block+0x148>
    2046:	6e 31       	cpi	r22, 0x1E	; 30
    2048:	71 05       	cpc	r23, r1
    204a:	09 f4       	brne	.+2      	; 0x204e <gc_execute_block+0x126>
    204c:	4c c0       	rjmp	.+152    	; 0x20e6 <gc_execute_block+0x1be>
    204e:	6f 31       	cpi	r22, 0x1F	; 31
    2050:	71 05       	cpc	r23, r1
    2052:	2c f4       	brge	.+10     	; 0x205e <gc_execute_block+0x136>
    2054:	6c 31       	cpi	r22, 0x1C	; 28
    2056:	71 05       	cpc	r23, r1
    2058:	09 f0       	breq	.+2      	; 0x205c <gc_execute_block+0x134>
    205a:	8f c0       	rjmp	.+286    	; 0x217a <gc_execute_block+0x252>
    205c:	44 c0       	rjmp	.+136    	; 0x20e6 <gc_execute_block+0x1be>
    205e:	65 33       	cpi	r22, 0x35	; 53
    2060:	71 05       	cpc	r23, r1
    2062:	09 f4       	brne	.+2      	; 0x2066 <gc_execute_block+0x13e>
    2064:	43 c0       	rjmp	.+134    	; 0x20ec <gc_execute_block+0x1c4>
    2066:	60 35       	cpi	r22, 0x50	; 80
    2068:	71 05       	cpc	r23, r1
    206a:	09 f0       	breq	.+2      	; 0x206e <gc_execute_block+0x146>
    206c:	86 c0       	rjmp	.+268    	; 0x217a <gc_execute_block+0x252>
    206e:	41 c0       	rjmp	.+130    	; 0x20f2 <gc_execute_block+0x1ca>
    2070:	6c 35       	cpi	r22, 0x5C	; 92
    2072:	71 05       	cpc	r23, r1
    2074:	09 f4       	brne	.+2      	; 0x2078 <gc_execute_block+0x150>
    2076:	46 c0       	rjmp	.+140    	; 0x2104 <gc_execute_block+0x1dc>
    2078:	6c 35       	cpi	r22, 0x5C	; 92
    207a:	71 05       	cpc	r23, r1
    207c:	0c f4       	brge	.+2      	; 0x2080 <gc_execute_block+0x158>
    207e:	3f c0       	rjmp	.+126    	; 0x20fe <gc_execute_block+0x1d6>
    2080:	6d 35       	cpi	r22, 0x5D	; 93
    2082:	71 05       	cpc	r23, r1
    2084:	09 f4       	brne	.+2      	; 0x2088 <gc_execute_block+0x160>
    2086:	41 c0       	rjmp	.+130    	; 0x210a <gc_execute_block+0x1e2>
    2088:	6e 35       	cpi	r22, 0x5E	; 94
    208a:	71 05       	cpc	r23, r1
    208c:	09 f0       	breq	.+2      	; 0x2090 <gc_execute_block+0x168>
    208e:	75 c0       	rjmp	.+234    	; 0x217a <gc_execute_block+0x252>
    2090:	3f c0       	rjmp	.+126    	; 0x2110 <gc_execute_block+0x1e8>
					case 0:  { gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    2092:	10 92 27 21 	sts	0x2127, r1
    2096:	82 c0       	rjmp	.+260    	; 0x219c <gc_execute_block+0x274>
					case 1:  { gc.motion_mode = MOTION_MODE_LINEAR; break; }
    2098:	f0 92 27 21 	sts	0x2127, r15
    209c:	7f c0       	rjmp	.+254    	; 0x219c <gc_execute_block+0x274>
					case 2:  { gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    209e:	e0 92 27 21 	sts	0x2127, r14
    20a2:	7c c0       	rjmp	.+248    	; 0x219c <gc_execute_block+0x274>
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    20a4:	a0 92 27 21 	sts	0x2127, r10
    20a8:	79 c0       	rjmp	.+242    	; 0x219c <gc_execute_block+0x274>
					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    20aa:	f0 92 71 21 	sts	0x2171, r15
    20ae:	76 c0       	rjmp	.+236    	; 0x219c <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    20b0:	10 92 69 21 	sts	0x2169, r1
	gc.plane_axis_1 = axis_1;
    20b4:	f0 92 6a 21 	sts	0x216A, r15
	gc.plane_axis_2 = axis_2;
    20b8:	e0 92 6b 21 	sts	0x216B, r14
    20bc:	6f c0       	rjmp	.+222    	; 0x219c <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    20be:	10 92 69 21 	sts	0x2169, r1
	gc.plane_axis_1 = axis_1;
    20c2:	e0 92 6a 21 	sts	0x216A, r14
	gc.plane_axis_2 = axis_2;
    20c6:	f0 92 6b 21 	sts	0x216B, r15
    20ca:	68 c0       	rjmp	.+208    	; 0x219c <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    20cc:	f0 92 69 21 	sts	0x2169, r15
	gc.plane_axis_1 = axis_1;
    20d0:	e0 92 6a 21 	sts	0x216A, r14
	gc.plane_axis_2 = axis_2;
    20d4:	10 92 6b 21 	sts	0x216B, r1
    20d8:	61 c0       	rjmp	.+194    	; 0x219c <gc_execute_block+0x274>
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
					case 17: { select_plane(X_AXIS, Y_AXIS, Z_AXIS); break; }
					case 18: { select_plane(X_AXIS, Z_AXIS, Y_AXIS); break; }
					case 19: { select_plane(Y_AXIS, Z_AXIS, X_AXIS); break; }
					case 20: { gc.inches_mode = TRUE; break; }
    20da:	f0 92 29 21 	sts	0x2129, r15
    20de:	5e c0       	rjmp	.+188    	; 0x219c <gc_execute_block+0x274>
					case 21: { gc.inches_mode = FALSE; break; }
    20e0:	10 92 29 21 	sts	0x2129, r1
    20e4:	5b c0       	rjmp	.+182    	; 0x219c <gc_execute_block+0x274>
					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    20e6:	e0 92 71 21 	sts	0x2171, r14
    20ea:	58 c0       	rjmp	.+176    	; 0x219c <gc_execute_block+0x274>
					case 53: { gc.absolute_override = TRUE; break; }
    20ec:	f0 92 70 21 	sts	0x2170, r15
    20f0:	55 c0       	rjmp	.+170    	; 0x219c <gc_execute_block+0x274>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    20f2:	60 92 27 21 	sts	0x2127, r6
    20f6:	52 c0       	rjmp	.+164    	; 0x219c <gc_execute_block+0x274>
					case 90: { gc.absolute_mode = TRUE; break; }
    20f8:	f0 92 2a 21 	sts	0x212A, r15
    20fc:	4f c0       	rjmp	.+158    	; 0x219c <gc_execute_block+0x274>
					case 91: { gc.absolute_mode = FALSE; break; }
    20fe:	10 92 2a 21 	sts	0x212A, r1
    2102:	4c c0       	rjmp	.+152    	; 0x219c <gc_execute_block+0x274>
					case 92: { gc.set_origin_mode = TRUE; break; }
    2104:	f0 92 2c 21 	sts	0x212C, r15
    2108:	49 c0       	rjmp	.+146    	; 0x219c <gc_execute_block+0x274>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    210a:	f0 92 28 21 	sts	0x2128, r15
    210e:	46 c0       	rjmp	.+140    	; 0x219c <gc_execute_block+0x274>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    2110:	10 92 28 21 	sts	0x2128, r1
    2114:	43 c0       	rjmp	.+134    	; 0x219c <gc_execute_block+0x274>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    2116:	60 91 1e 21 	lds	r22, 0x211E
    211a:	70 91 1f 21 	lds	r23, 0x211F
    211e:	80 91 20 21 	lds	r24, 0x2120
    2122:	90 91 21 21 	lds	r25, 0x2121
    2126:	0e 94 43 3c 	call	0x7886	; 0x7886 <__fixsfsi>
    212a:	63 30       	cpi	r22, 0x03	; 3
    212c:	71 05       	cpc	r23, r1
    212e:	e1 f0       	breq	.+56     	; 0x2168 <gc_execute_block+0x240>
    2130:	64 30       	cpi	r22, 0x04	; 4
    2132:	71 05       	cpc	r23, r1
    2134:	34 f4       	brge	.+12     	; 0x2142 <gc_execute_block+0x21a>
    2136:	77 fd       	sbrc	r23, 7
    2138:	20 c0       	rjmp	.+64     	; 0x217a <gc_execute_block+0x252>
    213a:	62 30       	cpi	r22, 0x02	; 2
    213c:	71 05       	cpc	r23, r1
    213e:	74 f0       	brlt	.+28     	; 0x215c <gc_execute_block+0x234>
    2140:	10 c0       	rjmp	.+32     	; 0x2162 <gc_execute_block+0x23a>
    2142:	65 30       	cpi	r22, 0x05	; 5
    2144:	71 05       	cpc	r23, r1
    2146:	b1 f0       	breq	.+44     	; 0x2174 <gc_execute_block+0x24c>
    2148:	65 30       	cpi	r22, 0x05	; 5
    214a:	71 05       	cpc	r23, r1
    214c:	84 f0       	brlt	.+32     	; 0x216e <gc_execute_block+0x246>
    214e:	6e 31       	cpi	r22, 0x1E	; 30
    2150:	71 05       	cpc	r23, r1
    2152:	39 f0       	breq	.+14     	; 0x2162 <gc_execute_block+0x23a>
    2154:	6c 33       	cpi	r22, 0x3C	; 60
    2156:	71 05       	cpc	r23, r1
    2158:	81 f4       	brne	.+32     	; 0x217a <gc_execute_block+0x252>
    215a:	03 c0       	rjmp	.+6      	; 0x2162 <gc_execute_block+0x23a>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    215c:	f0 92 26 21 	sts	0x2126, r15
    2160:	1d c0       	rjmp	.+58     	; 0x219c <gc_execute_block+0x274>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2162:	e0 92 26 21 	sts	0x2126, r14
    2166:	1a c0       	rjmp	.+52     	; 0x219c <gc_execute_block+0x274>
					case 3: gc.spindle_direction = 1; break;
    2168:	f0 92 6d 21 	sts	0x216D, r15
    216c:	17 c0       	rjmp	.+46     	; 0x219c <gc_execute_block+0x274>
					case 4: gc.spindle_direction = -1; break;
    216e:	70 92 6d 21 	sts	0x216D, r7
    2172:	14 c0       	rjmp	.+40     	; 0x219c <gc_execute_block+0x274>
					case 5: gc.spindle_direction = 0; break;
    2174:	10 92 6d 21 	sts	0x216D, r1
    2178:	11 c0       	rjmp	.+34     	; 0x219c <gc_execute_block+0x274>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    217a:	b0 92 1c 21 	sts	0x211C, r11
    217e:	0e c0       	rjmp	.+28     	; 0x219c <gc_execute_block+0x274>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    2180:	60 91 1e 21 	lds	r22, 0x211E
    2184:	70 91 1f 21 	lds	r23, 0x211F
    2188:	80 91 20 21 	lds	r24, 0x2120
    218c:	90 91 21 21 	lds	r25, 0x2121
    2190:	0e 94 44 3f 	call	0x7e88	; 0x7e88 <trunc>
    2194:	0e 94 48 3c 	call	0x7890	; 0x7890 <__fixunssfsi>
    2198:	60 93 6c 21 	sts	0x216C, r22
		}
		if(gc.status) {
    219c:	80 91 1c 21 	lds	r24, 0x211C
    21a0:	88 23       	and	r24, r24
    21a2:	69 f4       	brne	.+26     	; 0x21be <gc_execute_block+0x296>

	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    21a4:	8d e1       	ldi	r24, 0x1D	; 29
    21a6:	91 e2       	ldi	r25, 0x21	; 33
    21a8:	6e e1       	ldi	r22, 0x1E	; 30
    21aa:	71 e2       	ldi	r23, 0x21	; 33
    21ac:	42 e2       	ldi	r20, 0x22	; 34
    21ae:	51 e2       	ldi	r21, 0x21	; 33
    21b0:	94 01       	movw	r18, r8
    21b2:	86 01       	movw	r16, r12
    21b4:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_gc_next_statement>
    21b8:	89 2b       	or	r24, r25
    21ba:	09 f0       	breq	.+2      	; 0x21be <gc_execute_block+0x296>
    21bc:	f1 ce       	rjmp	.-542    	; 0x1fa0 <gc_execute_block+0x78>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    21be:	80 91 1c 21 	lds	r24, 0x211C
    21c2:	88 23       	and	r24, r24
    21c4:	09 f0       	breq	.+2      	; 0x21c8 <gc_execute_block+0x2a0>
    21c6:	9d c3       	rjmp	.+1850   	; 0x2902 <gc_execute_block+0x9da>
		return(gc.status); 
	}

	i = 0;
    21c8:	19 82       	std	Y+1, r1	; 0x01
    21ca:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    21cc:	ed e5       	ldi	r30, 0x5D	; 93
    21ce:	f1 e2       	ldi	r31, 0x21	; 33
    21d0:	8c e0       	ldi	r24, 0x0C	; 12
    21d2:	df 01       	movw	r26, r30
    21d4:	1d 92       	st	X+, r1
    21d6:	8a 95       	dec	r24
    21d8:	e9 f7       	brne	.-6      	; 0x21d4 <gc_execute_block+0x2ac>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    21da:	df 01       	movw	r26, r30
    21dc:	1c 97       	sbiw	r26, 0x0c	; 12
    21de:	78 97       	sbiw	r30, 0x18	; 24
    21e0:	8c e0       	ldi	r24, 0x0C	; 12
    21e2:	01 90       	ld	r0, Z+
    21e4:	0d 92       	st	X+, r0
    21e6:	81 50       	subi	r24, 0x01	; 1
    21e8:	e1 f7       	brne	.-8      	; 0x21e2 <gc_execute_block+0x2ba>
    21ea:	c6 c0       	rjmp	.+396    	; 0x2378 <gc_execute_block+0x450>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    21ec:	c0 90 1e 21 	lds	r12, 0x211E
    21f0:	d0 90 1f 21 	lds	r13, 0x211F
    21f4:	e0 90 20 21 	lds	r14, 0x2120
    21f8:	f0 90 21 21 	lds	r15, 0x2121
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    21fc:	80 91 29 21 	lds	r24, 0x2129
    2200:	88 23       	and	r24, r24
    2202:	19 f4       	brne	.+6      	; 0x220a <gc_execute_block+0x2e2>
    2204:	a7 01       	movw	r20, r14
    2206:	96 01       	movw	r18, r12
    2208:	0a c0       	rjmp	.+20     	; 0x221e <gc_execute_block+0x2f6>
    220a:	c7 01       	movw	r24, r14
    220c:	b6 01       	movw	r22, r12
    220e:	25 e8       	ldi	r18, 0x85	; 133
    2210:	32 e4       	ldi	r19, 0x42	; 66
    2212:	41 e2       	ldi	r20, 0x21	; 33
    2214:	5d e3       	ldi	r21, 0x3D	; 61
    2216:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    221a:	9b 01       	movw	r18, r22
    221c:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    221e:	20 93 3d 21 	sts	0x213D, r18
    2222:	30 93 3e 21 	sts	0x213E, r19
    2226:	40 93 3f 21 	sts	0x213F, r20
    222a:	50 93 40 21 	sts	0x2140, r21
		switch(gc.letter) {
    222e:	00 91 1d 21 	lds	r16, 0x211D
    2232:	00 35       	cpi	r16, 0x50	; 80
    2234:	09 f4       	brne	.+2      	; 0x2238 <gc_execute_block+0x310>
    2236:	47 c0       	rjmp	.+142    	; 0x22c6 <gc_execute_block+0x39e>
    2238:	01 35       	cpi	r16, 0x51	; 81
    223a:	58 f4       	brcc	.+22     	; 0x2252 <gc_execute_block+0x32a>
    223c:	06 34       	cpi	r16, 0x46	; 70
    223e:	c1 f0       	breq	.+48     	; 0x2270 <gc_execute_block+0x348>
    2240:	06 34       	cpi	r16, 0x46	; 70
    2242:	08 f4       	brcc	.+2      	; 0x2246 <gc_execute_block+0x31e>
    2244:	9f c0       	rjmp	.+318    	; 0x2384 <gc_execute_block+0x45c>
    2246:	80 2f       	mov	r24, r16
    2248:	89 54       	subi	r24, 0x49	; 73
    224a:	83 30       	cpi	r24, 0x03	; 3
    224c:	08 f0       	brcs	.+2      	; 0x2250 <gc_execute_block+0x328>
    224e:	9a c0       	rjmp	.+308    	; 0x2384 <gc_execute_block+0x45c>
    2250:	2d c0       	rjmp	.+90     	; 0x22ac <gc_execute_block+0x384>
    2252:	03 35       	cpi	r16, 0x53	; 83
    2254:	09 f4       	brne	.+2      	; 0x2258 <gc_execute_block+0x330>
    2256:	4b c0       	rjmp	.+150    	; 0x22ee <gc_execute_block+0x3c6>
    2258:	04 35       	cpi	r16, 0x54	; 84
    225a:	20 f4       	brcc	.+8      	; 0x2264 <gc_execute_block+0x33c>
    225c:	02 35       	cpi	r16, 0x52	; 82
    225e:	09 f0       	breq	.+2      	; 0x2262 <gc_execute_block+0x33a>
    2260:	91 c0       	rjmp	.+290    	; 0x2384 <gc_execute_block+0x45c>
    2262:	3a c0       	rjmp	.+116    	; 0x22d8 <gc_execute_block+0x3b0>
    2264:	80 2f       	mov	r24, r16
    2266:	88 55       	subi	r24, 0x58	; 88
    2268:	83 30       	cpi	r24, 0x03	; 3
    226a:	08 f0       	brcs	.+2      	; 0x226e <gc_execute_block+0x346>
    226c:	8b c0       	rjmp	.+278    	; 0x2384 <gc_execute_block+0x45c>
    226e:	48 c0       	rjmp	.+144    	; 0x2300 <gc_execute_block+0x3d8>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    2270:	80 91 28 21 	lds	r24, 0x2128
    2274:	88 23       	and	r24, r24
    2276:	49 f0       	breq	.+18     	; 0x228a <gc_execute_block+0x362>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    2278:	20 93 41 21 	sts	0x2141, r18
    227c:	30 93 42 21 	sts	0x2142, r19
    2280:	40 93 43 21 	sts	0x2143, r20
    2284:	50 93 44 21 	sts	0x2144, r21
    2288:	7d c0       	rjmp	.+250    	; 0x2384 <gc_execute_block+0x45c>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    228a:	ca 01       	movw	r24, r20
    228c:	b9 01       	movw	r22, r18
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e7       	ldi	r20, 0x70	; 112
    2294:	52 e4       	ldi	r21, 0x42	; 66
    2296:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    229a:	60 93 35 21 	sts	0x2135, r22
    229e:	70 93 36 21 	sts	0x2136, r23
    22a2:	80 93 37 21 	sts	0x2137, r24
    22a6:	90 93 38 21 	sts	0x2138, r25
    22aa:	6c c0       	rjmp	.+216    	; 0x2384 <gc_execute_block+0x45c>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    22ac:	e0 2f       	mov	r30, r16
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	ee 0f       	add	r30, r30
    22b2:	ff 1f       	adc	r31, r31
    22b4:	ee 0f       	add	r30, r30
    22b6:	ff 1f       	adc	r31, r31
    22b8:	e7 5c       	subi	r30, 0xC7	; 199
    22ba:	ff 4d       	sbci	r31, 0xDF	; 223
    22bc:	20 83       	st	Z, r18
    22be:	31 83       	std	Z+1, r19	; 0x01
    22c0:	42 83       	std	Z+2, r20	; 0x02
    22c2:	53 83       	std	Z+3, r21	; 0x03
    22c4:	5f c0       	rjmp	.+190    	; 0x2384 <gc_execute_block+0x45c>
			case 'P': gc.dwell_time = gc.value; break;
    22c6:	c0 92 2d 21 	sts	0x212D, r12
    22ca:	d0 92 2e 21 	sts	0x212E, r13
    22ce:	e0 92 2f 21 	sts	0x212F, r14
    22d2:	f0 92 30 21 	sts	0x2130, r15
    22d6:	56 c0       	rjmp	.+172    	; 0x2384 <gc_execute_block+0x45c>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    22d8:	20 93 31 21 	sts	0x2131, r18
    22dc:	30 93 32 21 	sts	0x2132, r19
    22e0:	40 93 33 21 	sts	0x2133, r20
    22e4:	50 93 34 21 	sts	0x2134, r21
    22e8:	70 92 2b 21 	sts	0x212B, r7
    22ec:	4b c0       	rjmp	.+150    	; 0x2384 <gc_execute_block+0x45c>
			case 'S': gc.spindle_speed = gc.value; break;
    22ee:	c7 01       	movw	r24, r14
    22f0:	b6 01       	movw	r22, r12
    22f2:	0e 94 43 3c 	call	0x7886	; 0x7886 <__fixsfsi>
    22f6:	60 93 6e 21 	sts	0x216E, r22
    22fa:	70 93 6f 21 	sts	0x216F, r23
    22fe:	42 c0       	rjmp	.+132    	; 0x2384 <gc_execute_block+0x45c>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    2300:	80 91 2c 21 	lds	r24, 0x212C
    2304:	88 23       	and	r24, r24
    2306:	69 f0       	breq	.+26     	; 0x2322 <gc_execute_block+0x3fa>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    2308:	e0 2f       	mov	r30, r16
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	ee 0f       	add	r30, r30
    230e:	ff 1f       	adc	r31, r31
    2310:	ee 0f       	add	r30, r30
    2312:	ff 1f       	adc	r31, r31
    2314:	e4 54       	subi	r30, 0x44	; 68
    2316:	f0 4e       	sbci	r31, 0xE0	; 224
    2318:	21 a7       	std	Z+41, r18	; 0x29
    231a:	32 a7       	std	Z+42, r19	; 0x2a
    231c:	43 a7       	std	Z+43, r20	; 0x2b
    231e:	54 a7       	std	Z+44, r21	; 0x2c
    2320:	31 c0       	rjmp	.+98     	; 0x2384 <gc_execute_block+0x45c>
				} else if (gc.absolute_mode || gc.absolute_override) {
    2322:	80 91 2a 21 	lds	r24, 0x212A
    2326:	88 23       	and	r24, r24
    2328:	21 f4       	brne	.+8      	; 0x2332 <gc_execute_block+0x40a>
    232a:	80 91 70 21 	lds	r24, 0x2170
    232e:	88 23       	and	r24, r24
    2330:	69 f0       	breq	.+26     	; 0x234c <gc_execute_block+0x424>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    2332:	e0 2f       	mov	r30, r16
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	ee 0f       	add	r30, r30
    2338:	ff 1f       	adc	r31, r31
    233a:	ee 0f       	add	r30, r30
    233c:	ff 1f       	adc	r31, r31
    233e:	e4 54       	subi	r30, 0x44	; 68
    2340:	f0 4e       	sbci	r31, 0xE0	; 224
    2342:	25 ab       	std	Z+53, r18	; 0x35
    2344:	36 ab       	std	Z+54, r19	; 0x36
    2346:	47 ab       	std	Z+55, r20	; 0x37
    2348:	50 af       	std	Z+56, r21	; 0x38
    234a:	1c c0       	rjmp	.+56     	; 0x2384 <gc_execute_block+0x45c>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    234c:	10 e0       	ldi	r17, 0x00	; 0
    234e:	00 0f       	add	r16, r16
    2350:	11 1f       	adc	r17, r17
    2352:	00 0f       	add	r16, r16
    2354:	11 1f       	adc	r17, r17
    2356:	04 54       	subi	r16, 0x44	; 68
    2358:	10 4e       	sbci	r17, 0xE0	; 224
    235a:	f8 01       	movw	r30, r16
    235c:	65 a9       	ldd	r22, Z+53	; 0x35
    235e:	76 a9       	ldd	r23, Z+54	; 0x36
    2360:	87 a9       	ldd	r24, Z+55	; 0x37
    2362:	90 ad       	ldd	r25, Z+56	; 0x38
    2364:	0e 94 35 3b 	call	0x766a	; 0x766a <__addsf3>
    2368:	d8 01       	movw	r26, r16
    236a:	d5 96       	adiw	r26, 0x35	; 53
    236c:	6d 93       	st	X+, r22
    236e:	7d 93       	st	X+, r23
    2370:	8d 93       	st	X+, r24
    2372:	9c 93       	st	X, r25
    2374:	d8 97       	sbiw	r26, 0x38	; 56
    2376:	06 c0       	rjmp	.+12     	; 0x2384 <gc_execute_block+0x45c>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2378:	5e 01       	movw	r10, r28
    237a:	08 94       	sec
    237c:	a1 1c       	adc	r10, r1
    237e:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    2380:	77 24       	eor	r7, r7
    2382:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    2384:	8d e1       	ldi	r24, 0x1D	; 29
    2386:	91 e2       	ldi	r25, 0x21	; 33
    2388:	6e e1       	ldi	r22, 0x1E	; 30
    238a:	71 e2       	ldi	r23, 0x21	; 33
    238c:	42 e2       	ldi	r20, 0x22	; 34
    238e:	51 e2       	ldi	r21, 0x21	; 33
    2390:	94 01       	movw	r18, r8
    2392:	85 01       	movw	r16, r10
    2394:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_gc_next_statement>
    2398:	89 2b       	or	r24, r25
    239a:	09 f0       	breq	.+2      	; 0x239e <gc_execute_block+0x476>
    239c:	27 cf       	rjmp	.-434    	; 0x21ec <gc_execute_block+0x2c4>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    239e:	80 91 1c 21 	lds	r24, 0x211C
    23a2:	88 23       	and	r24, r24
    23a4:	09 f0       	breq	.+2      	; 0x23a8 <gc_execute_block+0x480>
    23a6:	ad c2       	rjmp	.+1370   	; 0x2902 <gc_execute_block+0x9da>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    23a8:	80 91 6d 21 	lds	r24, 0x216D
    23ac:	88 23       	and	r24, r24
    23ae:	71 f0       	breq	.+28     	; 0x23cc <gc_execute_block+0x4a4>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    23b0:	40 91 6e 21 	lds	r20, 0x216E
    23b4:	50 91 6f 21 	lds	r21, 0x216F
    23b8:	66 27       	eor	r22, r22
    23ba:	57 fd       	sbrc	r21, 7
    23bc:	60 95       	com	r22
    23be:	76 2f       	mov	r23, r22
    23c0:	99 27       	eor	r25, r25
    23c2:	87 fd       	sbrc	r24, 7
    23c4:	90 95       	com	r25
    23c6:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <spindle_run>
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <gc_execute_block+0x4a8>
	} else {
		spindle_stop();
    23cc:	0e 94 8b 22 	call	0x4516	; 0x4516 <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    23d0:	80 91 71 21 	lds	r24, 0x2171
    23d4:	81 30       	cpi	r24, 0x01	; 1
    23d6:	41 f0       	breq	.+16     	; 0x23e8 <gc_execute_block+0x4c0>
    23d8:	81 30       	cpi	r24, 0x01	; 1
    23da:	c8 f0       	brcs	.+50     	; 0x240e <gc_execute_block+0x4e6>
    23dc:	82 30       	cpi	r24, 0x02	; 2
    23de:	09 f0       	breq	.+2      	; 0x23e2 <gc_execute_block+0x4ba>
    23e0:	81 c2       	rjmp	.+1282   	; 0x28e4 <gc_execute_block+0x9bc>
    	case NEXT_ACTION_GO_HOME: mc_go_home(); break;
    23e2:	0e 94 17 1a 	call	0x342e	; 0x342e <mc_go_home>
    23e6:	7e c2       	rjmp	.+1276   	; 0x28e4 <gc_execute_block+0x9bc>
		case NEXT_ACTION_DWELL: mc_dwell(trunc(gc.dwell_time*1000)); break;
    23e8:	60 91 2d 21 	lds	r22, 0x212D
    23ec:	70 91 2e 21 	lds	r23, 0x212E
    23f0:	80 91 2f 21 	lds	r24, 0x212F
    23f4:	90 91 30 21 	lds	r25, 0x2130
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	4a e7       	ldi	r20, 0x7A	; 122
    23fe:	54 e4       	ldi	r21, 0x44	; 68
    2400:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    2404:	0e 94 48 3c 	call	0x7890	; 0x7890 <__fixunssfsi>
    2408:	0e 94 2b 1a 	call	0x3456	; 0x3456 <mc_dwell>
    240c:	6b c2       	rjmp	.+1238   	; 0x28e4 <gc_execute_block+0x9bc>
		case NEXT_ACTION_DEFAULT: 
 		switch (gc.motion_mode) {
    240e:	b0 91 27 21 	lds	r27, 0x2127
    2412:	b8 8f       	std	Y+24, r27	; 0x18
    2414:	b2 30       	cpi	r27, 0x02	; 2
    2416:	20 f0       	brcs	.+8      	; 0x2420 <gc_execute_block+0x4f8>
    2418:	b4 30       	cpi	r27, 0x04	; 4
    241a:	08 f0       	brcs	.+2      	; 0x241e <gc_execute_block+0x4f6>
    241c:	63 c2       	rjmp	.+1222   	; 0x28e4 <gc_execute_block+0x9bc>
    241e:	31 c0       	rjmp	.+98     	; 0x2482 <gc_execute_block+0x55a>
			case MOTION_MODE_CANCEL: break;
			case MOTION_MODE_RAPID_LINEAR:
			case MOTION_MODE_LINEAR:
				gc.status = mc_line_nonblock(gc.target[X_AXIS], 
    2420:	60 91 51 21 	lds	r22, 0x2151
    2424:	70 91 52 21 	lds	r23, 0x2152
    2428:	80 91 53 21 	lds	r24, 0x2153
    242c:	90 91 54 21 	lds	r25, 0x2154
    2430:	20 91 55 21 	lds	r18, 0x2155
    2434:	30 91 56 21 	lds	r19, 0x2156
    2438:	40 91 57 21 	lds	r20, 0x2157
    243c:	50 91 58 21 	lds	r21, 0x2158
    2440:	e0 90 59 21 	lds	r14, 0x2159
    2444:	f0 90 5a 21 	lds	r15, 0x215A
    2448:	00 91 5b 21 	lds	r16, 0x215B
    244c:	10 91 5c 21 	lds	r17, 0x215C
    2450:	80 90 28 21 	lds	r8, 0x2128
    2454:	88 20       	and	r8, r8
    2456:	49 f0       	breq	.+18     	; 0x246a <gc_execute_block+0x542>
    2458:	a0 90 41 21 	lds	r10, 0x2141
    245c:	b0 90 42 21 	lds	r11, 0x2142
    2460:	c0 90 43 21 	lds	r12, 0x2143
    2464:	d0 90 44 21 	lds	r13, 0x2144
    2468:	08 c0       	rjmp	.+16     	; 0x247a <gc_execute_block+0x552>
    246a:	a0 90 35 21 	lds	r10, 0x2135
    246e:	b0 90 36 21 	lds	r11, 0x2136
    2472:	c0 90 37 21 	lds	r12, 0x2137
    2476:	d0 90 38 21 	lds	r13, 0x2138
    247a:	99 24       	eor	r9, r9
    247c:	0e 94 c9 1a 	call	0x3592	; 0x3592 <mc_line_nonblock>
    2480:	16 c1       	rjmp	.+556    	; 0x26ae <gc_execute_block+0x786>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    2482:	80 91 2b 21 	lds	r24, 0x212B
    2486:	88 23       	and	r24, r24
    2488:	09 f4       	brne	.+2      	; 0x248c <gc_execute_block+0x564>
    248a:	e8 c0       	rjmp	.+464    	; 0x265c <gc_execute_block+0x734>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    248c:	e0 91 69 21 	lds	r30, 0x2169
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	ee 0f       	add	r30, r30
    2494:	ff 1f       	adc	r31, r31
    2496:	ee 0f       	add	r30, r30
    2498:	ff 1f       	adc	r31, r31
    249a:	e4 5e       	subi	r30, 0xE4	; 228
    249c:	fe 4d       	sbci	r31, 0xDE	; 222
    249e:	65 a9       	ldd	r22, Z+53	; 0x35
    24a0:	76 a9       	ldd	r23, Z+54	; 0x36
    24a2:	87 a9       	ldd	r24, Z+55	; 0x37
    24a4:	90 ad       	ldd	r25, Z+56	; 0x38
    24a6:	21 a5       	ldd	r18, Z+41	; 0x29
    24a8:	32 a5       	ldd	r19, Z+42	; 0x2a
    24aa:	43 a5       	ldd	r20, Z+43	; 0x2b
    24ac:	54 a5       	ldd	r21, Z+44	; 0x2c
    24ae:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    24b2:	6f 83       	std	Y+7, r22	; 0x07
    24b4:	78 87       	std	Y+8, r23	; 0x08
    24b6:	89 87       	std	Y+9, r24	; 0x09
    24b8:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    24ba:	e0 91 6a 21 	lds	r30, 0x216A
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	ee 0f       	add	r30, r30
    24c2:	ff 1f       	adc	r31, r31
    24c4:	ee 0f       	add	r30, r30
    24c6:	ff 1f       	adc	r31, r31
    24c8:	e4 5e       	subi	r30, 0xE4	; 228
    24ca:	fe 4d       	sbci	r31, 0xDE	; 222
    24cc:	65 a9       	ldd	r22, Z+53	; 0x35
    24ce:	76 a9       	ldd	r23, Z+54	; 0x36
    24d0:	87 a9       	ldd	r24, Z+55	; 0x37
    24d2:	90 ad       	ldd	r25, Z+56	; 0x38
    24d4:	21 a5       	ldd	r18, Z+41	; 0x29
    24d6:	32 a5       	ldd	r19, Z+42	; 0x2a
    24d8:	43 a5       	ldd	r20, Z+43	; 0x2b
    24da:	54 a5       	ldd	r21, Z+44	; 0x2c
    24dc:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    24e0:	1b 01       	movw	r2, r22
    24e2:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    24e4:	10 92 5d 21 	sts	0x215D, r1
    24e8:	10 92 5e 21 	sts	0x215E, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    24ec:	60 90 31 21 	lds	r6, 0x2131
    24f0:	70 90 32 21 	lds	r7, 0x2132
    24f4:	80 90 33 21 	lds	r8, 0x2133
    24f8:	90 90 34 21 	lds	r9, 0x2134
    24fc:	c4 01       	movw	r24, r8
    24fe:	b3 01       	movw	r22, r6
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	40 e8       	ldi	r20, 0x80	; 128
    2506:	50 e4       	ldi	r21, 0x40	; 64
    2508:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    250c:	a4 01       	movw	r20, r8
    250e:	93 01       	movw	r18, r6
    2510:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    2514:	5b 01       	movw	r10, r22
    2516:	6c 01       	movw	r12, r24
    2518:	6f 81       	ldd	r22, Y+7	; 0x07
    251a:	78 85       	ldd	r23, Y+8	; 0x08
    251c:	89 85       	ldd	r24, Y+9	; 0x09
    251e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2520:	9b 01       	movw	r18, r22
    2522:	ac 01       	movw	r20, r24
    2524:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    2528:	7b 01       	movw	r14, r22
    252a:	8c 01       	movw	r16, r24
    252c:	c2 01       	movw	r24, r4
    252e:	b1 01       	movw	r22, r2
    2530:	a2 01       	movw	r20, r4
    2532:	91 01       	movw	r18, r2
    2534:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    2538:	9b 01       	movw	r18, r22
    253a:	ac 01       	movw	r20, r24
    253c:	c8 01       	movw	r24, r16
    253e:	b7 01       	movw	r22, r14
    2540:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    2544:	9b 01       	movw	r18, r22
    2546:	ac 01       	movw	r20, r24
    2548:	c6 01       	movw	r24, r12
    254a:	b5 01       	movw	r22, r10
    254c:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    2550:	0e 94 03 3f 	call	0x7e06	; 0x7e06 <sqrt>
    2554:	7b 01       	movw	r14, r22
    2556:	8c 01       	movw	r16, r24
    2558:	6f 81       	ldd	r22, Y+7	; 0x07
    255a:	78 85       	ldd	r23, Y+8	; 0x08
    255c:	89 85       	ldd	r24, Y+9	; 0x09
    255e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2560:	a2 01       	movw	r20, r4
    2562:	91 01       	movw	r18, r2
    2564:	0e 94 d1 3d 	call	0x7ba2	; 0x7ba2 <hypot>
    2568:	9b 01       	movw	r18, r22
    256a:	ac 01       	movw	r20, r24
    256c:	17 fb       	bst	r17, 7
    256e:	10 95       	com	r17
    2570:	17 f9       	bld	r17, 7
    2572:	10 95       	com	r17
    2574:	c8 01       	movw	r24, r16
    2576:	b7 01       	movw	r22, r14
    2578:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    257c:	7b 01       	movw	r14, r22
    257e:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    2580:	a8 01       	movw	r20, r16
    2582:	97 01       	movw	r18, r14
    2584:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__unordsf2>
    2588:	88 23       	and	r24, r24
    258a:	11 f0       	breq	.+4      	; 0x2590 <gc_execute_block+0x668>
		FAIL(TG_FLOATING_POINT_ERROR); 
    258c:	8d e0       	ldi	r24, 0x0D	; 13
    258e:	8f c0       	rjmp	.+286    	; 0x26ae <gc_execute_block+0x786>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    2590:	e8 8d       	ldd	r30, Y+24	; 0x18
    2592:	e3 30       	cpi	r30, 0x03	; 3
    2594:	21 f4       	brne	.+8      	; 0x259e <gc_execute_block+0x676>
		h_x2_div_d = -h_x2_div_d;
    2596:	17 fb       	bst	r17, 7
    2598:	10 95       	com	r17
    259a:	17 f9       	bld	r17, 7
    259c:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    259e:	c4 01       	movw	r24, r8
    25a0:	b3 01       	movw	r22, r6
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e0       	ldi	r20, 0x00	; 0
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <__cmpsf2>
    25ae:	88 23       	and	r24, r24
    25b0:	24 f4       	brge	.+8      	; 0x25ba <gc_execute_block+0x692>
		h_x2_div_d = -h_x2_div_d; 
    25b2:	17 fb       	bst	r17, 7
    25b4:	10 95       	com	r17
    25b6:	17 f9       	bld	r17, 7
    25b8:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    25ba:	80 91 69 21 	lds	r24, 0x2169
    25be:	c8 2e       	mov	r12, r24
    25c0:	dd 24       	eor	r13, r13
    25c2:	cc 0c       	add	r12, r12
    25c4:	dd 1c       	adc	r13, r13
    25c6:	cc 0c       	add	r12, r12
    25c8:	dd 1c       	adc	r13, r13
    25ca:	2d e5       	ldi	r18, 0x5D	; 93
    25cc:	31 e2       	ldi	r19, 0x21	; 33
    25ce:	c2 0e       	add	r12, r18
    25d0:	d3 1e       	adc	r13, r19
    25d2:	c2 01       	movw	r24, r4
    25d4:	b1 01       	movw	r22, r2
    25d6:	a8 01       	movw	r20, r16
    25d8:	97 01       	movw	r18, r14
    25da:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    25de:	9b 01       	movw	r18, r22
    25e0:	ac 01       	movw	r20, r24
    25e2:	6f 81       	ldd	r22, Y+7	; 0x07
    25e4:	78 85       	ldd	r23, Y+8	; 0x08
    25e6:	89 85       	ldd	r24, Y+9	; 0x09
    25e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ea:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e0       	ldi	r20, 0x00	; 0
    25f4:	5f e3       	ldi	r21, 0x3F	; 63
    25f6:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    25fa:	d6 01       	movw	r26, r12
    25fc:	6d 93       	st	X+, r22
    25fe:	7d 93       	st	X+, r23
    2600:	8d 93       	st	X+, r24
    2602:	9c 93       	st	X, r25
    2604:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    2606:	80 91 6a 21 	lds	r24, 0x216A
    260a:	c8 2e       	mov	r12, r24
    260c:	dd 24       	eor	r13, r13
    260e:	cc 0c       	add	r12, r12
    2610:	dd 1c       	adc	r13, r13
    2612:	cc 0c       	add	r12, r12
    2614:	dd 1c       	adc	r13, r13
    2616:	ed e5       	ldi	r30, 0x5D	; 93
    2618:	f1 e2       	ldi	r31, 0x21	; 33
    261a:	ce 0e       	add	r12, r30
    261c:	df 1e       	adc	r13, r31
    261e:	6f 81       	ldd	r22, Y+7	; 0x07
    2620:	78 85       	ldd	r23, Y+8	; 0x08
    2622:	89 85       	ldd	r24, Y+9	; 0x09
    2624:	9a 85       	ldd	r25, Y+10	; 0x0a
    2626:	a8 01       	movw	r20, r16
    2628:	97 01       	movw	r18, r14
    262a:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    262e:	9b 01       	movw	r18, r22
    2630:	ac 01       	movw	r20, r24
    2632:	c2 01       	movw	r24, r4
    2634:	b1 01       	movw	r22, r2
    2636:	0e 94 35 3b 	call	0x766a	; 0x766a <__addsf3>
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	5f e3       	ldi	r21, 0x3F	; 63
    2642:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    2646:	d6 01       	movw	r26, r12
    2648:	6d 93       	st	X+, r22
    264a:	7d 93       	st	X+, r23
    264c:	8d 93       	st	X+, r24
    264e:	9c 93       	st	X, r25
    2650:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    2652:	80 91 1c 21 	lds	r24, 0x211C
    2656:	88 23       	and	r24, r24
    2658:	09 f0       	breq	.+2      	; 0x265c <gc_execute_block+0x734>
    265a:	44 c1       	rjmp	.+648    	; 0x28e4 <gc_execute_block+0x9bc>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    265c:	e0 91 69 21 	lds	r30, 0x2169
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	ee 0f       	add	r30, r30
    2664:	ff 1f       	adc	r31, r31
    2666:	ee 0f       	add	r30, r30
    2668:	ff 1f       	adc	r31, r31
    266a:	e3 5a       	subi	r30, 0xA3	; 163
    266c:	fe 4d       	sbci	r31, 0xDE	; 222
    266e:	60 81       	ld	r22, Z
    2670:	71 81       	ldd	r23, Z+1	; 0x01
    2672:	82 81       	ldd	r24, Z+2	; 0x02
    2674:	93 81       	ldd	r25, Z+3	; 0x03
    2676:	90 58       	subi	r25, 0x80	; 128
    2678:	e0 91 6a 21 	lds	r30, 0x216A
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	ee 0f       	add	r30, r30
    2680:	ff 1f       	adc	r31, r31
    2682:	ee 0f       	add	r30, r30
    2684:	ff 1f       	adc	r31, r31
    2686:	e3 5a       	subi	r30, 0xA3	; 163
    2688:	fe 4d       	sbci	r31, 0xDE	; 222
    268a:	20 81       	ld	r18, Z
    268c:	31 81       	ldd	r19, Z+1	; 0x01
    268e:	42 81       	ldd	r20, Z+2	; 0x02
    2690:	53 81       	ldd	r21, Z+3	; 0x03
    2692:	50 58       	subi	r21, 0x80	; 128
    2694:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <theta>
    2698:	6f 87       	std	Y+15, r22	; 0x0f
    269a:	78 8b       	std	Y+16, r23	; 0x10
    269c:	89 8b       	std	Y+17, r24	; 0x11
    269e:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    26a0:	9b 01       	movw	r18, r22
    26a2:	ac 01       	movw	r20, r24
    26a4:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__unordsf2>
    26a8:	88 23       	and	r24, r24
    26aa:	21 f0       	breq	.+8      	; 0x26b4 <gc_execute_block+0x78c>
		FAIL(TG_ARC_ERROR); 
    26ac:	8f e0       	ldi	r24, 0x0F	; 15
    26ae:	80 93 1c 21 	sts	0x211C, r24
    26b2:	18 c1       	rjmp	.+560    	; 0x28e4 <gc_execute_block+0x9bc>
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    26b4:	e0 91 69 21 	lds	r30, 0x2169
    26b8:	0e 2f       	mov	r16, r30
    26ba:	10 e0       	ldi	r17, 0x00	; 0
    26bc:	e0 91 6a 21 	lds	r30, 0x216A
    26c0:	ce 2e       	mov	r12, r30
    26c2:	dd 24       	eor	r13, r13
    26c4:	00 0f       	add	r16, r16
    26c6:	11 1f       	adc	r17, r17
    26c8:	00 0f       	add	r16, r16
    26ca:	11 1f       	adc	r17, r17
    26cc:	04 5e       	subi	r16, 0xE4	; 228
    26ce:	1e 4d       	sbci	r17, 0xDE	; 222
    26d0:	f8 01       	movw	r30, r16
    26d2:	ef 5b       	subi	r30, 0xBF	; 191
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	d8 01       	movw	r26, r16
    26d8:	d5 96       	adiw	r26, 0x35	; 53
    26da:	6d 91       	ld	r22, X+
    26dc:	7d 91       	ld	r23, X+
    26de:	8d 91       	ld	r24, X+
    26e0:	9c 91       	ld	r25, X
    26e2:	d8 97       	sbiw	r26, 0x38	; 56
    26e4:	20 81       	ld	r18, Z
    26e6:	31 81       	ldd	r19, Z+1	; 0x01
    26e8:	42 81       	ldd	r20, Z+2	; 0x02
    26ea:	53 81       	ldd	r21, Z+3	; 0x03
    26ec:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    26f0:	f8 01       	movw	r30, r16
    26f2:	21 a5       	ldd	r18, Z+41	; 0x29
    26f4:	32 a5       	ldd	r19, Z+42	; 0x2a
    26f6:	43 a5       	ldd	r20, Z+43	; 0x2b
    26f8:	54 a5       	ldd	r21, Z+44	; 0x2c
    26fa:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    26fe:	7b 01       	movw	r14, r22
    2700:	8c 01       	movw	r16, r24
    2702:	cc 0c       	add	r12, r12
    2704:	dd 1c       	adc	r13, r13
    2706:	cc 0c       	add	r12, r12
    2708:	dd 1c       	adc	r13, r13
    270a:	2c e1       	ldi	r18, 0x1C	; 28
    270c:	31 e2       	ldi	r19, 0x21	; 33
    270e:	c2 0e       	add	r12, r18
    2710:	d3 1e       	adc	r13, r19
    2712:	f6 01       	movw	r30, r12
    2714:	ef 5b       	subi	r30, 0xBF	; 191
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	d6 01       	movw	r26, r12
    271a:	d5 96       	adiw	r26, 0x35	; 53
    271c:	6d 91       	ld	r22, X+
    271e:	7d 91       	ld	r23, X+
    2720:	8d 91       	ld	r24, X+
    2722:	9c 91       	ld	r25, X
    2724:	d8 97       	sbiw	r26, 0x38	; 56
    2726:	20 81       	ld	r18, Z
    2728:	31 81       	ldd	r19, Z+1	; 0x01
    272a:	42 81       	ldd	r20, Z+2	; 0x02
    272c:	53 81       	ldd	r21, Z+3	; 0x03
    272e:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    2732:	f6 01       	movw	r30, r12
    2734:	21 a5       	ldd	r18, Z+41	; 0x29
    2736:	32 a5       	ldd	r19, Z+42	; 0x2a
    2738:	43 a5       	ldd	r20, Z+43	; 0x2b
    273a:	54 a5       	ldd	r21, Z+44	; 0x2c
    273c:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    2740:	9b 01       	movw	r18, r22
    2742:	ac 01       	movw	r20, r24
    2744:	c8 01       	movw	r24, r16
    2746:	b7 01       	movw	r22, r14
    2748:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <theta>
    274c:	7b 01       	movw	r14, r22
    274e:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    2750:	a8 01       	movw	r20, r16
    2752:	97 01       	movw	r18, r14
    2754:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <__unordsf2>
    2758:	88 23       	and	r24, r24
    275a:	09 f0       	breq	.+2      	; 0x275e <gc_execute_block+0x836>
    275c:	a7 cf       	rjmp	.-178    	; 0x26ac <gc_execute_block+0x784>
		FAIL(TG_ARC_ERROR); 
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    275e:	c8 01       	movw	r24, r16
    2760:	b7 01       	movw	r22, r14
    2762:	2f 85       	ldd	r18, Y+15	; 0x0f
    2764:	38 89       	ldd	r19, Y+16	; 0x10
    2766:	49 89       	ldd	r20, Y+17	; 0x11
    2768:	5a 89       	ldd	r21, Y+18	; 0x12
    276a:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <__cmpsf2>
    276e:	88 23       	and	r24, r24
    2770:	54 f4       	brge	.+20     	; 0x2786 <gc_execute_block+0x85e>
		theta_end += 2*M_PI;
    2772:	c8 01       	movw	r24, r16
    2774:	b7 01       	movw	r22, r14
    2776:	2b ed       	ldi	r18, 0xDB	; 219
    2778:	3f e0       	ldi	r19, 0x0F	; 15
    277a:	49 ec       	ldi	r20, 0xC9	; 201
    277c:	50 e4       	ldi	r21, 0x40	; 64
    277e:	0e 94 35 3b 	call	0x766a	; 0x766a <__addsf3>
    2782:	7b 01       	movw	r14, r22
    2784:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    2786:	c8 01       	movw	r24, r16
    2788:	b7 01       	movw	r22, r14
    278a:	2f 85       	ldd	r18, Y+15	; 0x0f
    278c:	38 89       	ldd	r19, Y+16	; 0x10
    278e:	49 89       	ldd	r20, Y+17	; 0x11
    2790:	5a 89       	ldd	r21, Y+18	; 0x12
    2792:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    2796:	6b 87       	std	Y+11, r22	; 0x0b
    2798:	7c 87       	std	Y+12, r23	; 0x0c
    279a:	8d 87       	std	Y+13, r24	; 0x0d
    279c:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    279e:	80 91 27 21 	lds	r24, 0x2127
    27a2:	83 30       	cpi	r24, 0x03	; 3
    27a4:	71 f4       	brne	.+28     	; 0x27c2 <gc_execute_block+0x89a>
		angular_travel = angular_travel - 2*M_PI;
    27a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ae:	2b ed       	ldi	r18, 0xDB	; 219
    27b0:	3f e0       	ldi	r19, 0x0F	; 15
    27b2:	49 ec       	ldi	r20, 0xC9	; 201
    27b4:	50 e4       	ldi	r21, 0x40	; 64
    27b6:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    27ba:	6b 87       	std	Y+11, r22	; 0x0b
    27bc:	7c 87       	std	Y+12, r23	; 0x0c
    27be:	8d 87       	std	Y+13, r24	; 0x0d
    27c0:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    27c2:	80 91 69 21 	lds	r24, 0x2169
    27c6:	28 2f       	mov	r18, r24
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	2d 83       	std	Y+5, r18	; 0x05
    27cc:	3e 83       	std	Y+6, r19	; 0x06
    27ce:	f9 01       	movw	r30, r18
    27d0:	ee 0f       	add	r30, r30
    27d2:	ff 1f       	adc	r31, r31
    27d4:	ee 0f       	add	r30, r30
    27d6:	ff 1f       	adc	r31, r31
    27d8:	e3 5a       	subi	r30, 0xA3	; 163
    27da:	fe 4d       	sbci	r31, 0xDE	; 222
    27dc:	e0 80       	ld	r14, Z
    27de:	f1 80       	ldd	r15, Z+1	; 0x01
    27e0:	02 81       	ldd	r16, Z+2	; 0x02
    27e2:	13 81       	ldd	r17, Z+3	; 0x03
    27e4:	80 91 6a 21 	lds	r24, 0x216A
    27e8:	a8 2f       	mov	r26, r24
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	ab 83       	std	Y+3, r26	; 0x03
    27ee:	bc 83       	std	Y+4, r27	; 0x04
    27f0:	fd 01       	movw	r30, r26
    27f2:	ee 0f       	add	r30, r30
    27f4:	ff 1f       	adc	r31, r31
    27f6:	ee 0f       	add	r30, r30
    27f8:	ff 1f       	adc	r31, r31
    27fa:	e3 5a       	subi	r30, 0xA3	; 163
    27fc:	fe 4d       	sbci	r31, 0xDE	; 222
    27fe:	20 81       	ld	r18, Z
    2800:	31 81       	ldd	r19, Z+1	; 0x01
    2802:	42 81       	ldd	r20, Z+2	; 0x02
    2804:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    2806:	80 91 6b 21 	lds	r24, 0x216B
    280a:	28 2e       	mov	r2, r24
    280c:	33 24       	eor	r3, r3
    280e:	f1 01       	movw	r30, r2
    2810:	ee 0f       	add	r30, r30
    2812:	ff 1f       	adc	r31, r31
    2814:	ee 0f       	add	r30, r30
    2816:	ff 1f       	adc	r31, r31
    2818:	e4 5e       	subi	r30, 0xE4	; 228
    281a:	fe 4d       	sbci	r31, 0xDE	; 222
    281c:	85 a9       	ldd	r24, Z+53	; 0x35
    281e:	96 a9       	ldd	r25, Z+54	; 0x36
    2820:	a7 a9       	ldd	r26, Z+55	; 0x37
    2822:	b0 ad       	ldd	r27, Z+56	; 0x38
    2824:	8c 8b       	std	Y+20, r24	; 0x14
    2826:	9d 8b       	std	Y+21, r25	; 0x15
    2828:	ae 8b       	std	Y+22, r26	; 0x16
    282a:	bf 8b       	std	Y+23, r27	; 0x17
    282c:	a1 a4       	ldd	r10, Z+41	; 0x29
    282e:	b2 a4       	ldd	r11, Z+42	; 0x2a
    2830:	c3 a4       	ldd	r12, Z+43	; 0x2b
    2832:	d4 a4       	ldd	r13, Z+44	; 0x2c

	// Trace the arc
	gc.status = mc_arc_nonblock(theta_start, 
    2834:	90 91 28 21 	lds	r25, 0x2128
    2838:	9b 8b       	std	Y+19, r25	; 0x13
    283a:	99 23       	and	r25, r25
    283c:	49 f0       	breq	.+18     	; 0x2850 <gc_execute_block+0x928>
    283e:	40 90 41 21 	lds	r4, 0x2141
    2842:	50 90 42 21 	lds	r5, 0x2142
    2846:	60 90 43 21 	lds	r6, 0x2143
    284a:	70 90 44 21 	lds	r7, 0x2144
    284e:	08 c0       	rjmp	.+16     	; 0x2860 <gc_execute_block+0x938>
    2850:	40 90 35 21 	lds	r4, 0x2135
    2854:	50 90 36 21 	lds	r5, 0x2136
    2858:	60 90 37 21 	lds	r6, 0x2137
    285c:	70 90 38 21 	lds	r7, 0x2138
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2860:	c8 01       	movw	r24, r16
    2862:	b7 01       	movw	r22, r14
    2864:	0e 94 d1 3d 	call	0x7ba2	; 0x7ba2 <hypot>
    2868:	7b 01       	movw	r14, r22
    286a:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc_nonblock(theta_start, 
    286c:	ad b7       	in	r26, 0x3d	; 61
    286e:	be b7       	in	r27, 0x3e	; 62
    2870:	1a 97       	sbiw	r26, 0x0a	; 10
    2872:	ad bf       	out	0x3d, r26	; 61
    2874:	be bf       	out	0x3e, r27	; 62
    2876:	8d b6       	in	r8, 0x3d	; 61
    2878:	9e b6       	in	r9, 0x3e	; 62
    287a:	08 94       	sec
    287c:	81 1c       	adc	r8, r1
    287e:	91 1c       	adc	r9, r1
    2880:	6c 89       	ldd	r22, Y+20	; 0x14
    2882:	7d 89       	ldd	r23, Y+21	; 0x15
    2884:	8e 89       	ldd	r24, Y+22	; 0x16
    2886:	9f 89       	ldd	r25, Y+23	; 0x17
    2888:	a6 01       	movw	r20, r12
    288a:	95 01       	movw	r18, r10
    288c:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    2890:	5b 01       	movw	r10, r22
    2892:	6c 01       	movw	r12, r24
    2894:	2b 81       	ldd	r18, Y+3	; 0x03
    2896:	3c 81       	ldd	r19, Y+4	; 0x04
    2898:	f4 01       	movw	r30, r8
    289a:	20 83       	st	Z, r18
    289c:	31 83       	std	Z+1, r19	; 0x01
    289e:	22 82       	std	Z+2, r2	; 0x02
    28a0:	33 82       	std	Z+3, r3	; 0x03
    28a2:	d4 01       	movw	r26, r8
    28a4:	14 96       	adiw	r26, 0x04	; 4
    28a6:	4d 92       	st	X+, r4
    28a8:	5d 92       	st	X+, r5
    28aa:	6d 92       	st	X+, r6
    28ac:	7c 92       	st	X, r7
    28ae:	17 97       	sbiw	r26, 0x07	; 7
    28b0:	eb 89       	ldd	r30, Y+19	; 0x13
    28b2:	18 96       	adiw	r26, 0x08	; 8
    28b4:	ec 93       	st	X, r30
    28b6:	18 97       	sbiw	r26, 0x08	; 8
    28b8:	19 96       	adiw	r26, 0x09	; 9
    28ba:	1c 92       	st	X, r1
    28bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    28be:	78 89       	ldd	r23, Y+16	; 0x10
    28c0:	89 89       	ldd	r24, Y+17	; 0x11
    28c2:	9a 89       	ldd	r25, Y+18	; 0x12
    28c4:	2b 85       	ldd	r18, Y+11	; 0x0b
    28c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    28c8:	4d 85       	ldd	r20, Y+13	; 0x0d
    28ca:	5e 85       	ldd	r21, Y+14	; 0x0e
    28cc:	8d 80       	ldd	r8, Y+5	; 0x05
    28ce:	9e 80       	ldd	r9, Y+6	; 0x06
    28d0:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <mc_arc_nonblock>
    28d4:	80 93 1c 21 	sts	0x211C, r24
    28d8:	2d b7       	in	r18, 0x3d	; 61
    28da:	3e b7       	in	r19, 0x3e	; 62
    28dc:	26 5f       	subi	r18, 0xF6	; 246
    28de:	3f 4f       	sbci	r19, 0xFF	; 255
    28e0:	2d bf       	out	0x3d, r18	; 61
    28e2:	3e bf       	out	0x3e, r19	; 62
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_CONTINUE)) {
    28e4:	80 91 1c 21 	lds	r24, 0x211C
    28e8:	88 23       	and	r24, r24
    28ea:	11 f0       	breq	.+4      	; 0x28f0 <gc_execute_block+0x9c8>
    28ec:	82 30       	cpi	r24, 0x02	; 2
    28ee:	49 f4       	brne	.+18     	; 0x2902 <gc_execute_block+0x9da>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    28f0:	e5 e4       	ldi	r30, 0x45	; 69
    28f2:	f1 e2       	ldi	r31, 0x21	; 33
    28f4:	df 01       	movw	r26, r30
    28f6:	1c 96       	adiw	r26, 0x0c	; 12
    28f8:	9c e0       	ldi	r25, 0x0C	; 12
    28fa:	0d 90       	ld	r0, X+
    28fc:	01 92       	st	Z+, r0
    28fe:	91 50       	subi	r25, 0x01	; 1
    2900:	e1 f7       	brne	.-8      	; 0x28fa <gc_execute_block+0x9d2>
	};
	return(gc.status);
}
    2902:	68 96       	adiw	r28, 0x18	; 24
    2904:	cd bf       	out	0x3d, r28	; 61
    2906:	de bf       	out	0x3e, r29	; 62
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	1f 91       	pop	r17
    290e:	0f 91       	pop	r16
    2910:	ff 90       	pop	r15
    2912:	ef 90       	pop	r14
    2914:	df 90       	pop	r13
    2916:	cf 90       	pop	r12
    2918:	bf 90       	pop	r11
    291a:	af 90       	pop	r10
    291c:	9f 90       	pop	r9
    291e:	8f 90       	pop	r8
    2920:	7f 90       	pop	r7
    2922:	6f 90       	pop	r6
    2924:	5f 90       	pop	r5
    2926:	4f 90       	pop	r4
    2928:	3f 90       	pop	r3
    292a:	2f 90       	pop	r2
    292c:	08 95       	ret

0000292e <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29
    2932:	ec 01       	movw	r28, r24
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	10 c0       	rjmp	.+32     	; 0x295a <gc_gcode_parser+0x2c>
	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
		if (c <= ' ' ) {					// throw away WS & ctrl chars
    293a:	e1 32       	cpi	r30, 0x21	; 33
    293c:	70 f0       	brcs	.+28     	; 0x295a <gc_gcode_parser+0x2c>
			continue;
		} else if (c >= 'a' && c <= 'z') {	// convert lower to upper
    293e:	8e 2f       	mov	r24, r30
    2940:	81 56       	subi	r24, 0x61	; 97
    2942:	a9 2f       	mov	r26, r25
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	9f 5f       	subi	r25, 0xFF	; 255
    2948:	8a 31       	cpi	r24, 0x1A	; 26
    294a:	20 f4       	brcc	.+8      	; 0x2954 <gc_gcode_parser+0x26>
			block[j++] = c-'a'+'A';
    294c:	ac 0f       	add	r26, r28
    294e:	bd 1f       	adc	r27, r29
    2950:	e0 52       	subi	r30, 0x20	; 32
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <gc_gcode_parser+0x2a>
		} else {
			block[j++] = c;
    2954:	ac 0f       	add	r26, r28
    2956:	bd 1f       	adc	r27, r29
    2958:	ec 93       	st	X, r30

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
    295a:	fe 01       	movw	r30, r28
    295c:	e2 0f       	add	r30, r18
    295e:	f1 1d       	adc	r31, r1
    2960:	e0 81       	ld	r30, Z
    2962:	2f 5f       	subi	r18, 0xFF	; 255
    2964:	ee 23       	and	r30, r30
    2966:	49 f7       	brne	.-46     	; 0x293a <gc_gcode_parser+0xc>
			block[j++] = c-'a'+'A';
		} else {
			block[j++] = c;
		}
	}
	block[j] = 0;
    2968:	fe 01       	movw	r30, r28
    296a:	e9 0f       	add	r30, r25
    296c:	f1 1d       	adc	r31, r1
    296e:	10 82       	st	Z, r1
{
	_gc_normalize_gcode_block(block);
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    2970:	88 81       	ld	r24, Y
    2972:	88 32       	cpi	r24, 0x28	; 40
    2974:	61 f0       	breq	.+24     	; 0x298e <gc_gcode_parser+0x60>
		return(TG_OK);
	}
	if (block[0] == 'Q') { 					// quit
    2976:	81 35       	cpi	r24, 0x51	; 81
    2978:	11 f4       	brne	.+4      	; 0x297e <gc_gcode_parser+0x50>
    297a:	83 e0       	ldi	r24, 0x03	; 3
    297c:	09 c0       	rjmp	.+18     	; 0x2990 <gc_gcode_parser+0x62>
		return(TG_QUIT);
	} 
	if (block[0] == '/') { 					// ignore block delete
    297e:	8f 32       	cpi	r24, 0x2F	; 47
    2980:	31 f0       	breq	.+12     	; 0x298e <gc_gcode_parser+0x60>
		return(TG_OK);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    2982:	ce 01       	movw	r24, r28
    2984:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <gc_execute_block>
    2988:	80 93 1c 21 	sts	0x211C, r24
    298c:	01 c0       	rjmp	.+2      	; 0x2990 <gc_gcode_parser+0x62>
#ifdef __ECHO
	_gc_print_status(gc.status, block);
#endif
	return (gc.status);
    298e:	80 e0       	ldi	r24, 0x00	; 0
}
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	08 95       	ret

00002996 <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    2996:	cf 92       	push	r12
    2998:	df 92       	push	r13
    299a:	ef 92       	push	r14
    299c:	ff 92       	push	r15
    299e:	0f 93       	push	r16
    29a0:	1f 93       	push	r17
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	c2 e5       	ldi	r28, 0x52	; 82
    29a8:	d4 e2       	ldi	r29, 0x24	; 36
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (int i = X_AXIS; i <= A_AXIS; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    29aa:	68 81       	ld	r22, Y
    29ac:	70 e0       	ldi	r23, 0x00	; 0
    29ae:	88 27       	eor	r24, r24
    29b0:	77 fd       	sbrc	r23, 7
    29b2:	80 95       	com	r24
    29b4:	98 2f       	mov	r25, r24
    29b6:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    29ba:	9b 01       	movw	r18, r22
    29bc:	ac 01       	movw	r20, r24
    29be:	6f 81       	ldd	r22, Y+7	; 0x07
    29c0:	78 85       	ldd	r23, Y+8	; 0x08
    29c2:	89 85       	ldd	r24, Y+9	; 0x09
    29c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c6:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    29ca:	9b 01       	movw	r18, r22
    29cc:	ac 01       	movw	r20, r24
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	70 e0       	ldi	r23, 0x00	; 0
    29d2:	84 eb       	ldi	r24, 0xB4	; 180
    29d4:	93 e4       	ldi	r25, 0x43	; 67
    29d6:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    29da:	2b 85       	ldd	r18, Y+11	; 0x0b
    29dc:	3c 85       	ldd	r19, Y+12	; 0x0c
    29de:	4d 85       	ldd	r20, Y+13	; 0x0d
    29e0:	5e 85       	ldd	r21, Y+14	; 0x0e
    29e2:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    29e6:	6b 8b       	std	Y+19, r22	; 0x13
    29e8:	7c 8b       	std	Y+20, r23	; 0x14
    29ea:	8d 8b       	std	Y+21, r24	; 0x15
    29ec:	9e 8b       	std	Y+22, r25	; 0x16
    29ee:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (int i = X_AXIS; i <= A_AXIS; i++) {
    29f0:	84 e2       	ldi	r24, 0x24	; 36
    29f2:	c2 3b       	cpi	r28, 0xB2	; 178
    29f4:	d8 07       	cpc	r29, r24
    29f6:	c9 f6       	brne	.-78     	; 0x29aa <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X_AXIS].feed_steps_sec * 
    29f8:	00 91 52 24 	lds	r16, 0x2452
    29fc:	10 e0       	ldi	r17, 0x00	; 0
    29fe:	b8 01       	movw	r22, r16
    2a00:	88 27       	eor	r24, r24
    2a02:	77 fd       	sbrc	r23, 7
    2a04:	80 95       	com	r24
    2a06:	98 2f       	mov	r25, r24
    2a08:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    2a0c:	9b 01       	movw	r18, r22
    2a0e:	ac 01       	movw	r20, r24
    2a10:	60 91 59 24 	lds	r22, 0x2459
    2a14:	70 91 5a 24 	lds	r23, 0x245A
    2a18:	80 91 5b 24 	lds	r24, 0x245B
    2a1c:	90 91 5c 24 	lds	r25, 0x245C
    2a20:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    2a24:	9b 01       	movw	r18, r22
    2a26:	ac 01       	movw	r20, r24
    2a28:	60 e0       	ldi	r22, 0x00	; 0
    2a2a:	70 e0       	ldi	r23, 0x00	; 0
    2a2c:	84 eb       	ldi	r24, 0xB4	; 180
    2a2e:	93 e4       	ldi	r25, 0x43	; 67
    2a30:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    2a34:	6b 01       	movw	r12, r22
    2a36:	7c 01       	movw	r14, r24
    2a38:	80 91 57 24 	lds	r24, 0x2457
    2a3c:	90 91 58 24 	lds	r25, 0x2458
    2a40:	08 9f       	mul	r16, r24
    2a42:	b0 01       	movw	r22, r0
    2a44:	09 9f       	mul	r16, r25
    2a46:	70 0d       	add	r23, r0
    2a48:	18 9f       	mul	r17, r24
    2a4a:	70 0d       	add	r23, r0
    2a4c:	11 24       	eor	r1, r1
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	0e 94 74 3c 	call	0x78e8	; 0x78e8 <__floatunsisf>
    2a56:	a7 01       	movw	r20, r14
    2a58:	96 01       	movw	r18, r12
    2a5a:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    2a5e:	60 93 4a 24 	sts	0x244A, r22
    2a62:	70 93 4b 24 	sts	0x244B, r23
    2a66:	80 93 4c 24 	sts	0x244C, r24
    2a6a:	90 93 4d 24 	sts	0x244D, r25
							  cfg.a[X_AXIS].microstep) / 
							 (360/(cfg.a[X_AXIS].degree_per_step / 
							 	   cfg.a[X_AXIS].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X_AXIS].seek_steps_sec * 
    2a6e:	80 91 55 24 	lds	r24, 0x2455
    2a72:	90 91 56 24 	lds	r25, 0x2456
    2a76:	08 9f       	mul	r16, r24
    2a78:	b0 01       	movw	r22, r0
    2a7a:	09 9f       	mul	r16, r25
    2a7c:	70 0d       	add	r23, r0
    2a7e:	18 9f       	mul	r17, r24
    2a80:	70 0d       	add	r23, r0
    2a82:	11 24       	eor	r1, r1
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	0e 94 74 3c 	call	0x78e8	; 0x78e8 <__floatunsisf>
    2a8c:	a7 01       	movw	r20, r14
    2a8e:	96 01       	movw	r18, r12
    2a90:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    2a94:	60 93 4e 24 	sts	0x244E, r22
    2a98:	70 93 4f 24 	sts	0x244F, r23
    2a9c:	80 93 50 24 	sts	0x2450, r24
    2aa0:	90 93 51 24 	sts	0x2451, r25
							  cfg.a[X_AXIS].microstep) / 
							 (360/(cfg.a[X_AXIS].degree_per_step / 
							 	   cfg.a[X_AXIS].microstep));
}
    2aa4:	df 91       	pop	r29
    2aa6:	cf 91       	pop	r28
    2aa8:	1f 91       	pop	r17
    2aaa:	0f 91       	pop	r16
    2aac:	ff 90       	pop	r15
    2aae:	ef 90       	pop	r14
    2ab0:	df 90       	pop	r13
    2ab2:	cf 90       	pop	r12
    2ab4:	08 95       	ret

00002ab6 <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = CONFIG_VERSION;
    2ab6:	e4 e4       	ldi	r30, 0x44	; 68
    2ab8:	f4 e2       	ldi	r31, 0x24	; 36
    2aba:	84 e6       	ldi	r24, 0x64	; 100
    2abc:	80 93 44 24 	sts	0x2444, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2ac0:	8a e0       	ldi	r24, 0x0A	; 10
    2ac2:	97 ed       	ldi	r25, 0xD7	; 215
    2ac4:	a3 e2       	ldi	r26, 0x23	; 35
    2ac6:	bc e3       	ldi	r27, 0x3C	; 60
    2ac8:	80 93 46 24 	sts	0x2446, r24
    2acc:	90 93 47 24 	sts	0x2447, r25
    2ad0:	a0 93 48 24 	sts	0x2448, r26
    2ad4:	b0 93 49 24 	sts	0x2449, r27

	cfg.a[X_AXIS].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2ad8:	8c ed       	ldi	r24, 0xDC	; 220
    2ada:	95 e0       	ldi	r25, 0x05	; 5
    2adc:	80 93 55 24 	sts	0x2455, r24
    2ae0:	90 93 56 24 	sts	0x2456, r25
	cfg.a[Y_AXIS].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2ae4:	80 93 6d 24 	sts	0x246D, r24
    2ae8:	90 93 6e 24 	sts	0x246E, r25
	cfg.a[Z_AXIS].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2aec:	80 93 85 24 	sts	0x2485, r24
    2af0:	90 93 86 24 	sts	0x2486, r25
	cfg.a[A_AXIS].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2af4:	80 93 9d 24 	sts	0x249D, r24
    2af8:	90 93 9e 24 	sts	0x249E, r25

	cfg.a[X_AXIS].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2afc:	80 93 57 24 	sts	0x2457, r24
    2b00:	90 93 58 24 	sts	0x2458, r25
	cfg.a[Y_AXIS].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2b04:	80 93 6f 24 	sts	0x246F, r24
    2b08:	90 93 70 24 	sts	0x2470, r25
	cfg.a[Z_AXIS].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2b0c:	80 93 87 24 	sts	0x2487, r24
    2b10:	90 93 88 24 	sts	0x2488, r25
	cfg.a[A_AXIS].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2b14:	80 93 9f 24 	sts	0x249F, r24
    2b18:	90 93 a0 24 	sts	0x24A0, r25

	cfg.a[X_AXIS].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2b1c:	86 e6       	ldi	r24, 0x66	; 102
    2b1e:	96 e6       	ldi	r25, 0x66	; 102
    2b20:	a6 ee       	ldi	r26, 0xE6	; 230
    2b22:	bf e3       	ldi	r27, 0x3F	; 63
    2b24:	80 93 59 24 	sts	0x2459, r24
    2b28:	90 93 5a 24 	sts	0x245A, r25
    2b2c:	a0 93 5b 24 	sts	0x245B, r26
    2b30:	b0 93 5c 24 	sts	0x245C, r27
	cfg.a[Y_AXIS].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2b34:	80 93 71 24 	sts	0x2471, r24
    2b38:	90 93 72 24 	sts	0x2472, r25
    2b3c:	a0 93 73 24 	sts	0x2473, r26
    2b40:	b0 93 74 24 	sts	0x2474, r27
	cfg.a[Z_AXIS].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2b44:	80 93 89 24 	sts	0x2489, r24
    2b48:	90 93 8a 24 	sts	0x248A, r25
    2b4c:	a0 93 8b 24 	sts	0x248B, r26
    2b50:	b0 93 8c 24 	sts	0x248C, r27
	cfg.a[A_AXIS].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2b54:	80 93 a1 24 	sts	0x24A1, r24
    2b58:	90 93 a2 24 	sts	0x24A2, r25
    2b5c:	a0 93 a3 24 	sts	0x24A3, r26
    2b60:	b0 93 a4 24 	sts	0x24A4, r27

	cfg.a[X_AXIS].mm_per_rev = X_MM_PER_REVOLUTION;
    2b64:	8c e5       	ldi	r24, 0x5C	; 92
    2b66:	9f e8       	ldi	r25, 0x8F	; 143
    2b68:	a2 ea       	ldi	r26, 0xA2	; 162
    2b6a:	bf e3       	ldi	r27, 0x3F	; 63
    2b6c:	80 93 5d 24 	sts	0x245D, r24
    2b70:	90 93 5e 24 	sts	0x245E, r25
    2b74:	a0 93 5f 24 	sts	0x245F, r26
    2b78:	b0 93 60 24 	sts	0x2460, r27
	cfg.a[Y_AXIS].mm_per_rev = Y_MM_PER_REVOLUTION;
    2b7c:	80 93 75 24 	sts	0x2475, r24
    2b80:	90 93 76 24 	sts	0x2476, r25
    2b84:	a0 93 77 24 	sts	0x2477, r26
    2b88:	b0 93 78 24 	sts	0x2478, r27
	cfg.a[Z_AXIS].mm_per_rev = Z_MM_PER_REVOLUTION;
    2b8c:	80 93 8d 24 	sts	0x248D, r24
    2b90:	90 93 8e 24 	sts	0x248E, r25
    2b94:	a0 93 8f 24 	sts	0x248F, r26
    2b98:	b0 93 90 24 	sts	0x2490, r27
	cfg.a[A_AXIS].mm_per_rev = A_MM_PER_REVOLUTION;
    2b9c:	80 93 a5 24 	sts	0x24A5, r24
    2ba0:	90 93 a6 24 	sts	0x24A6, r25
    2ba4:	a0 93 a7 24 	sts	0x24A7, r26
    2ba8:	b0 93 a8 24 	sts	0x24A8, r27
	
	cfg.a[X_AXIS].mm_travel = X_MM_TRAVEL;
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	a8 ec       	ldi	r26, 0xC8	; 200
    2bb2:	b3 e4       	ldi	r27, 0x43	; 67
    2bb4:	80 93 61 24 	sts	0x2461, r24
    2bb8:	90 93 62 24 	sts	0x2462, r25
    2bbc:	a0 93 63 24 	sts	0x2463, r26
    2bc0:	b0 93 64 24 	sts	0x2464, r27
	cfg.a[Y_AXIS].mm_travel = Y_MM_TRAVEL;
    2bc4:	80 93 79 24 	sts	0x2479, r24
    2bc8:	90 93 7a 24 	sts	0x247A, r25
    2bcc:	a0 93 7b 24 	sts	0x247B, r26
    2bd0:	b0 93 7c 24 	sts	0x247C, r27
	cfg.a[Z_AXIS].mm_travel = Z_MM_TRAVEL;
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	a6 e9       	ldi	r26, 0x96	; 150
    2bda:	b3 e4       	ldi	r27, 0x43	; 67
    2bdc:	80 93 91 24 	sts	0x2491, r24
    2be0:	90 93 92 24 	sts	0x2492, r25
    2be4:	a0 93 93 24 	sts	0x2493, r26
    2be8:	b0 93 94 24 	sts	0x2494, r27
	cfg.a[A_AXIS].mm_travel = A_MM_TRAVEL;
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	a0 e8       	ldi	r26, 0x80	; 128
    2bf2:	bf eb       	ldi	r27, 0xBF	; 191
    2bf4:	80 93 a9 24 	sts	0x24A9, r24
    2bf8:	90 93 aa 24 	sts	0x24AA, r25
    2bfc:	a0 93 ab 24 	sts	0x24AB, r26
    2c00:	b0 93 ac 24 	sts	0x24AC, r27
	
	cfg.a[X_AXIS].microstep = X_MICROSTEPS;
    2c04:	88 e0       	ldi	r24, 0x08	; 8
    2c06:	80 93 52 24 	sts	0x2452, r24
	cfg.a[Y_AXIS].microstep = Y_MICROSTEPS;
    2c0a:	80 93 6a 24 	sts	0x246A, r24
	cfg.a[Z_AXIS].microstep = Z_MICROSTEPS;
    2c0e:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A_AXIS].microstep = A_MICROSTEPS;
    2c10:	80 93 9a 24 	sts	0x249A, r24

	cfg.a[X_AXIS].polarity = X_POLARITY;
    2c14:	10 92 54 24 	sts	0x2454, r1
	cfg.a[Y_AXIS].polarity = Y_POLARITY;
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	80 93 6c 24 	sts	0x246C, r24
	cfg.a[Z_AXIS].polarity = Z_POLARITY;
    2c1e:	10 92 84 24 	sts	0x2484, r1
	cfg.a[A_AXIS].polarity = A_POLARITY;
    2c22:	10 92 9c 24 	sts	0x249C, r1

	cfg.a[X_AXIS].limit_enable = X_LIMIT_ENABLE;
    2c26:	80 93 69 24 	sts	0x2469, r24
	cfg.a[Y_AXIS].limit_enable = Y_LIMIT_ENABLE;
    2c2a:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z_AXIS].limit_enable = Z_LIMIT_ENABLE;
    2c2c:	80 93 99 24 	sts	0x2499, r24
	cfg.a[A_AXIS].limit_enable = A_LIMIT_ENABLE;
    2c30:	10 92 b1 24 	sts	0x24B1, r1

	cfg.a[X_AXIS].low_pwr_idle = X_LOW_POWER_IDLE;
    2c34:	80 93 53 24 	sts	0x2453, r24
	cfg.a[Y_AXIS].low_pwr_idle = Y_LOW_POWER_IDLE;
    2c38:	80 93 6b 24 	sts	0x246B, r24
	cfg.a[Z_AXIS].low_pwr_idle = Z_LOW_POWER_IDLE;
    2c3c:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A_AXIS].low_pwr_idle = A_LOW_POWER_IDLE;
    2c3e:	80 93 9b 24 	sts	0x249B, r24

	_cfg_computed();		// generate computed values from the above
    2c42:	0e 94 cb 14 	call	0x2996	; 0x2996 <_cfg_computed>
}
    2c46:	08 95       	ret

00002c48 <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2c48:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <cfg_reset>
}
    2c4c:	08 95       	ret

00002c4e <_cfg_print_status>:
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    2c4e:	87 30       	cpi	r24, 0x07	; 7
    2c50:	31 f1       	breq	.+76     	; 0x2c9e <_cfg_print_status+0x50>
    2c52:	88 30       	cpi	r24, 0x08	; 8
    2c54:	30 f4       	brcc	.+12     	; 0x2c62 <_cfg_print_status+0x14>
    2c56:	82 30       	cpi	r24, 0x02	; 2
    2c58:	59 f0       	breq	.+22     	; 0x2c70 <_cfg_print_status+0x22>
    2c5a:	83 30       	cpi	r24, 0x03	; 3
    2c5c:	09 f0       	breq	.+2      	; 0x2c60 <_cfg_print_status+0x12>
    2c5e:	45 c0       	rjmp	.+138    	; 0x2cea <_cfg_print_status+0x9c>
    2c60:	0c c0       	rjmp	.+24     	; 0x2c7a <_cfg_print_status+0x2c>
    2c62:	8d 30       	cpi	r24, 0x0D	; 13
    2c64:	09 f1       	breq	.+66     	; 0x2ca8 <_cfg_print_status+0x5a>
    2c66:	8f 30       	cpi	r24, 0x0F	; 15
    2c68:	81 f1       	breq	.+96     	; 0x2cca <_cfg_print_status+0x7c>
    2c6a:	8c 30       	cpi	r24, 0x0C	; 12
    2c6c:	f1 f5       	brne	.+124    	; 0x2cea <_cfg_print_status+0x9c>
    2c6e:	12 c0       	rjmp	.+36     	; 0x2c94 <_cfg_print_status+0x46>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_CONTINUE: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    2c70:	00 d0       	rcall	.+0      	; 0x2c72 <_cfg_print_status+0x24>
    2c72:	0f 92       	push	r0
    2c74:	85 e1       	ldi	r24, 0x15	; 21
    2c76:	94 e0       	ldi	r25, 0x04	; 4
    2c78:	1b c0       	rjmp	.+54     	; 0x2cb0 <_cfg_print_status+0x62>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    2c7a:	0f 92       	push	r0
    2c7c:	0f 92       	push	r0
    2c7e:	8f ef       	ldi	r24, 0xFF	; 255
    2c80:	93 e0       	ldi	r25, 0x03	; 3
    2c82:	ed b7       	in	r30, 0x3d	; 61
    2c84:	fe b7       	in	r31, 0x3e	; 62
    2c86:	81 83       	std	Z+1, r24	; 0x01
    2c88:	92 83       	std	Z+2, r25	; 0x02
    2c8a:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	08 95       	ret
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <_cfg_print_status+0x48>
    2c96:	0f 92       	push	r0
    2c98:	88 ee       	ldi	r24, 0xE8	; 232
    2c9a:	93 e0       	ldi	r25, 0x03	; 3
    2c9c:	09 c0       	rjmp	.+18     	; 0x2cb0 <_cfg_print_status+0x62>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    2c9e:	00 d0       	rcall	.+0      	; 0x2ca0 <_cfg_print_status+0x52>
    2ca0:	0f 92       	push	r0
    2ca2:	8e ec       	ldi	r24, 0xCE	; 206
    2ca4:	93 e0       	ldi	r25, 0x03	; 3
    2ca6:	04 c0       	rjmp	.+8      	; 0x2cb0 <_cfg_print_status+0x62>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2ca8:	00 d0       	rcall	.+0      	; 0x2caa <_cfg_print_status+0x5c>
    2caa:	0f 92       	push	r0
    2cac:	84 eb       	ldi	r24, 0xB4	; 180
    2cae:	93 e0       	ldi	r25, 0x03	; 3
    2cb0:	ed b7       	in	r30, 0x3d	; 61
    2cb2:	fe b7       	in	r31, 0x3e	; 62
    2cb4:	81 83       	std	Z+1, r24	; 0x01
    2cb6:	92 83       	std	Z+2, r25	; 0x02
    2cb8:	63 83       	std	Z+3, r22	; 0x03
    2cba:	74 83       	std	Z+4, r23	; 0x04
    2cbc:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	08 95       	ret
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    2cca:	00 d0       	rcall	.+0      	; 0x2ccc <_cfg_print_status+0x7e>
    2ccc:	0f 92       	push	r0
    2cce:	89 e9       	ldi	r24, 0x99	; 153
    2cd0:	93 e0       	ldi	r25, 0x03	; 3
    2cd2:	ed b7       	in	r30, 0x3d	; 61
    2cd4:	fe b7       	in	r31, 0x3e	; 62
    2cd6:	81 83       	std	Z+1, r24	; 0x01
    2cd8:	92 83       	std	Z+2, r25	; 0x02
    2cda:	63 83       	std	Z+3, r22	; 0x03
    2cdc:	74 83       	std	Z+4, r23	; 0x04
    2cde:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	08 95       	ret

00002cec <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    2cec:	ef 92       	push	r14
    2cee:	ff 92       	push	r15
    2cf0:	0f 93       	push	r16
    2cf2:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    2cf4:	e8 2e       	mov	r14, r24
    2cf6:	ff 24       	eor	r15, r15
    2cf8:	87 01       	movw	r16, r14
    2cfa:	00 0f       	add	r16, r16
    2cfc:	11 1f       	adc	r17, r17
    2cfe:	f8 01       	movw	r30, r16
    2d00:	ed 5b       	subi	r30, 0xBD	; 189
    2d02:	fd 4f       	sbci	r31, 0xFD	; 253
    2d04:	25 91       	lpm	r18, Z+
    2d06:	34 91       	lpm	r19, Z+
    2d08:	00 d0       	rcall	.+0      	; 0x2d0a <_cfg_dump_axis+0x1e>
    2d0a:	0f 92       	push	r0
    2d0c:	88 e3       	ldi	r24, 0x38	; 56
    2d0e:	96 e0       	ldi	r25, 0x06	; 6
    2d10:	ad b7       	in	r26, 0x3d	; 61
    2d12:	be b7       	in	r27, 0x3e	; 62
    2d14:	11 96       	adiw	r26, 0x01	; 1
    2d16:	8d 93       	st	X+, r24
    2d18:	9c 93       	st	X, r25
    2d1a:	12 97       	sbiw	r26, 0x02	; 2
    2d1c:	13 96       	adiw	r26, 0x03	; 3
    2d1e:	2d 93       	st	X+, r18
    2d20:	3c 93       	st	X, r19
    2d22:	14 97       	sbiw	r26, 0x04	; 4
    2d24:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	96 e0       	ldi	r25, 0x06	; 6
    2d2c:	ed b7       	in	r30, 0x3d	; 61
    2d2e:	fe b7       	in	r31, 0x3e	; 62
    2d30:	81 83       	std	Z+1, r24	; 0x01
    2d32:	92 83       	std	Z+2, r25	; 0x02
    2d34:	0e 0d       	add	r16, r14
    2d36:	1f 1d       	adc	r17, r15
    2d38:	83 e0       	ldi	r24, 0x03	; 3
    2d3a:	00 0f       	add	r16, r16
    2d3c:	11 1f       	adc	r17, r17
    2d3e:	8a 95       	dec	r24
    2d40:	e1 f7       	brne	.-8      	; 0x2d3a <_cfg_dump_axis+0x4e>
    2d42:	0c 5b       	subi	r16, 0xBC	; 188
    2d44:	1b 4d       	sbci	r17, 0xDB	; 219
    2d46:	d8 01       	movw	r26, r16
    2d48:	51 96       	adiw	r26, 0x11	; 17
    2d4a:	8d 91       	ld	r24, X+
    2d4c:	9c 91       	ld	r25, X
    2d4e:	52 97       	sbiw	r26, 0x12	; 18
    2d50:	83 83       	std	Z+3, r24	; 0x03
    2d52:	94 83       	std	Z+4, r25	; 0x04
    2d54:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    2d58:	88 ec       	ldi	r24, 0xC8	; 200
    2d5a:	95 e0       	ldi	r25, 0x05	; 5
    2d5c:	ed b7       	in	r30, 0x3d	; 61
    2d5e:	fe b7       	in	r31, 0x3e	; 62
    2d60:	81 83       	std	Z+1, r24	; 0x01
    2d62:	92 83       	std	Z+2, r25	; 0x02
    2d64:	d8 01       	movw	r26, r16
    2d66:	53 96       	adiw	r26, 0x13	; 19
    2d68:	8d 91       	ld	r24, X+
    2d6a:	9c 91       	ld	r25, X
    2d6c:	54 97       	sbiw	r26, 0x14	; 20
    2d6e:	83 83       	std	Z+3, r24	; 0x03
    2d70:	94 83       	std	Z+4, r25	; 0x04
    2d72:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    2d76:	ed b7       	in	r30, 0x3d	; 61
    2d78:	fe b7       	in	r31, 0x3e	; 62
    2d7a:	31 96       	adiw	r30, 0x01	; 1
    2d7c:	85 e9       	ldi	r24, 0x95	; 149
    2d7e:	95 e0       	ldi	r25, 0x05	; 5
    2d80:	ad b7       	in	r26, 0x3d	; 61
    2d82:	be b7       	in	r27, 0x3e	; 62
    2d84:	11 96       	adiw	r26, 0x01	; 1
    2d86:	8d 93       	st	X+, r24
    2d88:	9c 93       	st	X, r25
    2d8a:	12 97       	sbiw	r26, 0x02	; 2
    2d8c:	d8 01       	movw	r26, r16
    2d8e:	1e 96       	adiw	r26, 0x0e	; 14
    2d90:	8c 91       	ld	r24, X
    2d92:	82 83       	std	Z+2, r24	; 0x02
    2d94:	13 82       	std	Z+3, r1	; 0x03
    2d96:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    2d9a:	0f 92       	push	r0
    2d9c:	0f 92       	push	r0
    2d9e:	8e e5       	ldi	r24, 0x5E	; 94
    2da0:	95 e0       	ldi	r25, 0x05	; 5
    2da2:	ed b7       	in	r30, 0x3d	; 61
    2da4:	fe b7       	in	r31, 0x3e	; 62
    2da6:	81 83       	std	Z+1, r24	; 0x01
    2da8:	92 83       	std	Z+2, r25	; 0x02
    2daa:	f8 01       	movw	r30, r16
    2dac:	85 89       	ldd	r24, Z+21	; 0x15
    2dae:	96 89       	ldd	r25, Z+22	; 0x16
    2db0:	a7 89       	ldd	r26, Z+23	; 0x17
    2db2:	b0 8d       	ldd	r27, Z+24	; 0x18
    2db4:	ed b7       	in	r30, 0x3d	; 61
    2db6:	fe b7       	in	r31, 0x3e	; 62
    2db8:	83 83       	std	Z+3, r24	; 0x03
    2dba:	94 83       	std	Z+4, r25	; 0x04
    2dbc:	a5 83       	std	Z+5, r26	; 0x05
    2dbe:	b6 83       	std	Z+6, r27	; 0x06
    2dc0:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    2dc4:	8b e2       	ldi	r24, 0x2B	; 43
    2dc6:	95 e0       	ldi	r25, 0x05	; 5
    2dc8:	ad b7       	in	r26, 0x3d	; 61
    2dca:	be b7       	in	r27, 0x3e	; 62
    2dcc:	11 96       	adiw	r26, 0x01	; 1
    2dce:	8d 93       	st	X+, r24
    2dd0:	9c 93       	st	X, r25
    2dd2:	12 97       	sbiw	r26, 0x02	; 2
    2dd4:	f8 01       	movw	r30, r16
    2dd6:	81 8d       	ldd	r24, Z+25	; 0x19
    2dd8:	92 8d       	ldd	r25, Z+26	; 0x1a
    2dda:	a3 8d       	ldd	r26, Z+27	; 0x1b
    2ddc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    2dde:	ed b7       	in	r30, 0x3d	; 61
    2de0:	fe b7       	in	r31, 0x3e	; 62
    2de2:	83 83       	std	Z+3, r24	; 0x03
    2de4:	94 83       	std	Z+4, r25	; 0x04
    2de6:	a5 83       	std	Z+5, r26	; 0x05
    2de8:	b6 83       	std	Z+6, r27	; 0x06
    2dea:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    2dee:	88 ef       	ldi	r24, 0xF8	; 248
    2df0:	94 e0       	ldi	r25, 0x04	; 4
    2df2:	ad b7       	in	r26, 0x3d	; 61
    2df4:	be b7       	in	r27, 0x3e	; 62
    2df6:	11 96       	adiw	r26, 0x01	; 1
    2df8:	8d 93       	st	X+, r24
    2dfa:	9c 93       	st	X, r25
    2dfc:	12 97       	sbiw	r26, 0x02	; 2
    2dfe:	f8 01       	movw	r30, r16
    2e00:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e02:	96 8d       	ldd	r25, Z+30	; 0x1e
    2e04:	a7 8d       	ldd	r26, Z+31	; 0x1f
    2e06:	b0 a1       	ldd	r27, Z+32	; 0x20
    2e08:	ed b7       	in	r30, 0x3d	; 61
    2e0a:	fe b7       	in	r31, 0x3e	; 62
    2e0c:	83 83       	std	Z+3, r24	; 0x03
    2e0e:	94 83       	std	Z+4, r25	; 0x04
    2e10:	a5 83       	std	Z+5, r26	; 0x05
    2e12:	b6 83       	std	Z+6, r27	; 0x06
    2e14:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    2e18:	0f 90       	pop	r0
    2e1a:	0f 90       	pop	r0
    2e1c:	ed b7       	in	r30, 0x3d	; 61
    2e1e:	fe b7       	in	r31, 0x3e	; 62
    2e20:	31 96       	adiw	r30, 0x01	; 1
    2e22:	87 ec       	ldi	r24, 0xC7	; 199
    2e24:	94 e0       	ldi	r25, 0x04	; 4
    2e26:	ad b7       	in	r26, 0x3d	; 61
    2e28:	be b7       	in	r27, 0x3e	; 62
    2e2a:	11 96       	adiw	r26, 0x01	; 1
    2e2c:	8d 93       	st	X+, r24
    2e2e:	9c 93       	st	X, r25
    2e30:	12 97       	sbiw	r26, 0x02	; 2
    2e32:	d8 01       	movw	r26, r16
    2e34:	95 96       	adiw	r26, 0x25	; 37
    2e36:	8c 91       	ld	r24, X
    2e38:	82 83       	std	Z+2, r24	; 0x02
    2e3a:	13 82       	std	Z+3, r1	; 0x03
    2e3c:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    2e40:	ed b7       	in	r30, 0x3d	; 61
    2e42:	fe b7       	in	r31, 0x3e	; 62
    2e44:	31 96       	adiw	r30, 0x01	; 1
    2e46:	86 e9       	ldi	r24, 0x96	; 150
    2e48:	94 e0       	ldi	r25, 0x04	; 4
    2e4a:	ad b7       	in	r26, 0x3d	; 61
    2e4c:	be b7       	in	r27, 0x3e	; 62
    2e4e:	11 96       	adiw	r26, 0x01	; 1
    2e50:	8d 93       	st	X+, r24
    2e52:	9c 93       	st	X, r25
    2e54:	12 97       	sbiw	r26, 0x02	; 2
    2e56:	d8 01       	movw	r26, r16
    2e58:	1f 96       	adiw	r26, 0x0f	; 15
    2e5a:	8c 91       	ld	r24, X
    2e5c:	82 83       	std	Z+2, r24	; 0x02
    2e5e:	13 82       	std	Z+3, r1	; 0x03
    2e60:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    2e64:	ed b7       	in	r30, 0x3d	; 61
    2e66:	fe b7       	in	r31, 0x3e	; 62
    2e68:	31 96       	adiw	r30, 0x01	; 1
    2e6a:	86 e6       	ldi	r24, 0x66	; 102
    2e6c:	94 e0       	ldi	r25, 0x04	; 4
    2e6e:	ad b7       	in	r26, 0x3d	; 61
    2e70:	be b7       	in	r27, 0x3e	; 62
    2e72:	11 96       	adiw	r26, 0x01	; 1
    2e74:	8d 93       	st	X+, r24
    2e76:	9c 93       	st	X, r25
    2e78:	12 97       	sbiw	r26, 0x02	; 2
    2e7a:	d8 01       	movw	r26, r16
    2e7c:	50 96       	adiw	r26, 0x10	; 16
    2e7e:	8c 91       	ld	r24, X
    2e80:	82 83       	std	Z+2, r24	; 0x02
    2e82:	13 82       	std	Z+3, r1	; 0x03
    2e84:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    2e88:	0f 92       	push	r0
    2e8a:	0f 92       	push	r0
    2e8c:	82 e3       	ldi	r24, 0x32	; 50
    2e8e:	94 e0       	ldi	r25, 0x04	; 4
    2e90:	ed b7       	in	r30, 0x3d	; 61
    2e92:	fe b7       	in	r31, 0x3e	; 62
    2e94:	81 83       	std	Z+1, r24	; 0x01
    2e96:	92 83       	std	Z+2, r25	; 0x02
    2e98:	f8 01       	movw	r30, r16
    2e9a:	81 a1       	ldd	r24, Z+33	; 0x21
    2e9c:	92 a1       	ldd	r25, Z+34	; 0x22
    2e9e:	a3 a1       	ldd	r26, Z+35	; 0x23
    2ea0:	b4 a1       	ldd	r27, Z+36	; 0x24
    2ea2:	ed b7       	in	r30, 0x3d	; 61
    2ea4:	fe b7       	in	r31, 0x3e	; 62
    2ea6:	83 83       	std	Z+3, r24	; 0x03
    2ea8:	94 83       	std	Z+4, r25	; 0x04
    2eaa:	a5 83       	std	Z+5, r26	; 0x05
    2eac:	b6 83       	std	Z+6, r27	; 0x06
    2eae:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
    2eb2:	8d b7       	in	r24, 0x3d	; 61
    2eb4:	9e b7       	in	r25, 0x3e	; 62
    2eb6:	06 96       	adiw	r24, 0x06	; 6
    2eb8:	8d bf       	out	0x3d, r24	; 61
    2eba:	9e bf       	out	0x3e, r25	; 62
}
    2ebc:	1f 91       	pop	r17
    2ebe:	0f 91       	pop	r16
    2ec0:	ff 90       	pop	r15
    2ec2:	ef 90       	pop	r14
    2ec4:	08 95       	ret

00002ec6 <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    2ec6:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <cfg_dump+0x4>
    2eca:	0f 92       	push	r0
    2ecc:	ed b7       	in	r30, 0x3d	; 61
    2ece:	fe b7       	in	r31, 0x3e	; 62
    2ed0:	31 96       	adiw	r30, 0x01	; 1
    2ed2:	8c ef       	ldi	r24, 0xFC	; 252
    2ed4:	96 e0       	ldi	r25, 0x06	; 6
    2ed6:	ad b7       	in	r26, 0x3d	; 61
    2ed8:	be b7       	in	r27, 0x3e	; 62
    2eda:	11 96       	adiw	r26, 0x01	; 1
    2edc:	8d 93       	st	X+, r24
    2ede:	9c 93       	st	X, r25
    2ee0:	12 97       	sbiw	r26, 0x02	; 2
    2ee2:	80 91 44 24 	lds	r24, 0x2444
    2ee6:	82 83       	std	Z+2, r24	; 0x02
    2ee8:	13 82       	std	Z+3, r1	; 0x03
    2eea:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	85 ed       	ldi	r24, 0xD5	; 213
    2ef4:	96 e0       	ldi	r25, 0x06	; 6
    2ef6:	ed b7       	in	r30, 0x3d	; 61
    2ef8:	fe b7       	in	r31, 0x3e	; 62
    2efa:	81 83       	std	Z+1, r24	; 0x01
    2efc:	92 83       	std	Z+2, r25	; 0x02
    2efe:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <cfg_dump+0x3e>
    2f04:	0f 92       	push	r0
    2f06:	8b ea       	ldi	r24, 0xAB	; 171
    2f08:	96 e0       	ldi	r25, 0x06	; 6
    2f0a:	ad b7       	in	r26, 0x3d	; 61
    2f0c:	be b7       	in	r27, 0x3e	; 62
    2f0e:	11 96       	adiw	r26, 0x01	; 1
    2f10:	8d 93       	st	X+, r24
    2f12:	9c 93       	st	X, r25
    2f14:	12 97       	sbiw	r26, 0x02	; 2
    2f16:	80 91 46 24 	lds	r24, 0x2446
    2f1a:	90 91 47 24 	lds	r25, 0x2447
    2f1e:	a0 91 48 24 	lds	r26, 0x2448
    2f22:	b0 91 49 24 	lds	r27, 0x2449
    2f26:	ed b7       	in	r30, 0x3d	; 61
    2f28:	fe b7       	in	r31, 0x3e	; 62
    2f2a:	83 83       	std	Z+3, r24	; 0x03
    2f2c:	94 83       	std	Z+4, r25	; 0x04
    2f2e:	a5 83       	std	Z+5, r26	; 0x05
    2f30:	b6 83       	std	Z+6, r27	; 0x06
    2f32:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    2f36:	81 e8       	ldi	r24, 0x81	; 129
    2f38:	96 e0       	ldi	r25, 0x06	; 6
    2f3a:	ad b7       	in	r26, 0x3d	; 61
    2f3c:	be b7       	in	r27, 0x3e	; 62
    2f3e:	11 96       	adiw	r26, 0x01	; 1
    2f40:	8d 93       	st	X+, r24
    2f42:	9c 93       	st	X, r25
    2f44:	12 97       	sbiw	r26, 0x02	; 2
    2f46:	80 91 4e 24 	lds	r24, 0x244E
    2f4a:	90 91 4f 24 	lds	r25, 0x244F
    2f4e:	a0 91 50 24 	lds	r26, 0x2450
    2f52:	b0 91 51 24 	lds	r27, 0x2451
    2f56:	ed b7       	in	r30, 0x3d	; 61
    2f58:	fe b7       	in	r31, 0x3e	; 62
    2f5a:	83 83       	std	Z+3, r24	; 0x03
    2f5c:	94 83       	std	Z+4, r25	; 0x04
    2f5e:	a5 83       	std	Z+5, r26	; 0x05
    2f60:	b6 83       	std	Z+6, r27	; 0x06
    2f62:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    2f66:	86 e5       	ldi	r24, 0x56	; 86
    2f68:	96 e0       	ldi	r25, 0x06	; 6
    2f6a:	ad b7       	in	r26, 0x3d	; 61
    2f6c:	be b7       	in	r27, 0x3e	; 62
    2f6e:	11 96       	adiw	r26, 0x01	; 1
    2f70:	8d 93       	st	X+, r24
    2f72:	9c 93       	st	X, r25
    2f74:	12 97       	sbiw	r26, 0x02	; 2
    2f76:	80 91 4a 24 	lds	r24, 0x244A
    2f7a:	90 91 4b 24 	lds	r25, 0x244B
    2f7e:	a0 91 4c 24 	lds	r26, 0x244C
    2f82:	b0 91 4d 24 	lds	r27, 0x244D
    2f86:	ed b7       	in	r30, 0x3d	; 61
    2f88:	fe b7       	in	r31, 0x3e	; 62
    2f8a:	83 83       	std	Z+3, r24	; 0x03
    2f8c:	94 83       	std	Z+4, r25	; 0x04
    2f8e:	a5 83       	std	Z+5, r26	; 0x05
    2f90:	b6 83       	std	Z+6, r27	; 0x06
    2f92:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
    2f96:	10 e0       	ldi	r17, 0x00	; 0
    2f98:	8d b7       	in	r24, 0x3d	; 61
    2f9a:	9e b7       	in	r25, 0x3e	; 62
    2f9c:	06 96       	adiw	r24, 0x06	; 6
    2f9e:	8d bf       	out	0x3d, r24	; 61
    2fa0:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis = 0; axis <= A_AXIS; axis++) {
		_cfg_dump_axis(axis);
    2fa2:	81 2f       	mov	r24, r17
    2fa4:	0e 94 76 16 	call	0x2cec	; 0x2cec <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis = 0; axis <= A_AXIS; axis++) {
    2fa8:	1f 5f       	subi	r17, 0xFF	; 255
    2faa:	14 30       	cpi	r17, 0x04	; 4
    2fac:	d1 f7       	brne	.-12     	; 0x2fa2 <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    2fae:	1f 91       	pop	r17
    2fb0:	08 95       	ret

00002fb2 <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	64 e4       	ldi	r22, 0x44	; 68
    2fb8:	74 e2       	ldi	r23, 0x24	; 36
    2fba:	4e e6       	ldi	r20, 0x6E	; 110
    2fbc:	50 e0       	ldi	r21, 0x00	; 0
    2fbe:	0e 94 32 2b 	call	0x5664	; 0x5664 <memcpy_to_eeprom_with_checksum>
}
    2fc2:	08 95       	ret

00002fc4 <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	0e 94 84 2a 	call	0x5508	; 0x5508 <eeprom_get_char>

	if (version != CONFIG_VERSION) {		// Read config-record and check checksum
    2fcc:	84 36       	cpi	r24, 0x64	; 100
    2fce:	19 f0       	breq	.+6      	; 0x2fd6 <cfg_read+0x12>
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	0d c0       	rjmp	.+26     	; 0x2ff0 <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    2fd6:	84 e4       	ldi	r24, 0x44	; 68
    2fd8:	94 e2       	ldi	r25, 0x24	; 36
    2fda:	60 e0       	ldi	r22, 0x00	; 0
    2fdc:	70 e0       	ldi	r23, 0x00	; 0
    2fde:	4e e6       	ldi	r20, 0x6E	; 110
    2fe0:	50 e0       	ldi	r21, 0x00	; 0
    2fe2:	0e 94 8e 2a 	call	0x551c	; 0x551c <memcpy_from_eeprom_with_checksum>
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	11 f0       	breq	.+4      	; 0x2fee <cfg_read+0x2a>
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    2ff0:	c9 01       	movw	r24, r18
    2ff2:	08 95       	ret

00002ff4 <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    2ff4:	cf 92       	push	r12
    2ff6:	df 92       	push	r13
    2ff8:	ef 92       	push	r14
    2ffa:	ff 92       	push	r15
    2ffc:	1f 93       	push	r17
    2ffe:	df 93       	push	r29
    3000:	cf 93       	push	r28
    3002:	0f 92       	push	r0
    3004:	0f 92       	push	r0
    3006:	cd b7       	in	r28, 0x3d	; 61
    3008:	de b7       	in	r29, 0x3e	; 62
    300a:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    300c:	19 82       	std	Y+1, r1	; 0x01
    300e:	1a 82       	std	Y+2, r1	; 0x02
    3010:	cc 24       	eor	r12, r12
    3012:	dd 24       	eor	r13, r13
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	2b c0       	rjmp	.+86     	; 0x3070 <cfg_parse+0x7c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
		if (c == '=') {							// handle separator
    301a:	9d 33       	cpi	r25, 0x3D	; 61
    301c:	49 f4       	brne	.+18     	; 0x3030 <cfg_parse+0x3c>
			text[j++] = 0;						// terminate tag at separator
    301e:	f7 01       	movw	r30, r14
    3020:	e2 0f       	add	r30, r18
    3022:	f1 1d       	adc	r31, r1
    3024:	10 82       	st	Z, r1
    3026:	2f 5f       	subi	r18, 0xFF	; 255
			val = &text[j];						// new string starts at value
    3028:	67 01       	movw	r12, r14
    302a:	c2 0e       	add	r12, r18
    302c:	d1 1c       	adc	r13, r1
    302e:	20 c0       	rjmp	.+64     	; 0x3070 <cfg_parse+0x7c>
		} else if ( (c == '-') || 				// pass special characters
    3030:	9d 32       	cpi	r25, 0x2D	; 45
    3032:	c9 f0       	breq	.+50     	; 0x3066 <cfg_parse+0x72>
    3034:	9b 32       	cpi	r25, 0x2B	; 43
    3036:	b9 f0       	breq	.+46     	; 0x3066 <cfg_parse+0x72>
    3038:	9e 32       	cpi	r25, 0x2E	; 46
    303a:	a9 f0       	breq	.+42     	; 0x3066 <cfg_parse+0x72>
    303c:	9f 33       	cpi	r25, 0x3F	; 63
    303e:	99 f0       	breq	.+38     	; 0x3066 <cfg_parse+0x72>
    3040:	98 32       	cpi	r25, 0x28	; 40
    3042:	89 f0       	breq	.+34     	; 0x3066 <cfg_parse+0x72>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'a' && c <= 'z') {		// convert lower to upper
    3044:	89 2f       	mov	r24, r25
    3046:	81 56       	subi	r24, 0x61	; 97
    3048:	8a 31       	cpi	r24, 0x1A	; 26
    304a:	28 f4       	brcc	.+10     	; 0x3056 <cfg_parse+0x62>
			text[j++] = c-'a'+'A';
    304c:	f7 01       	movw	r30, r14
    304e:	e2 0f       	add	r30, r18
    3050:	f1 1d       	adc	r31, r1
    3052:	90 52       	subi	r25, 0x20	; 32
    3054:	0b c0       	rjmp	.+22     	; 0x306c <cfg_parse+0x78>
		} else if (c >= 'A' && c <= 'Z') {		// pass upper case letters
    3056:	89 2f       	mov	r24, r25
    3058:	81 54       	subi	r24, 0x41	; 65
    305a:	8a 31       	cpi	r24, 0x1A	; 26
    305c:	20 f0       	brcs	.+8      	; 0x3066 <cfg_parse+0x72>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
    305e:	89 2f       	mov	r24, r25
    3060:	80 53       	subi	r24, 0x30	; 48
    3062:	8a 30       	cpi	r24, 0x0A	; 10
    3064:	28 f4       	brcc	.+10     	; 0x3070 <cfg_parse+0x7c>
			text[j++] = c;
    3066:	f7 01       	movw	r30, r14
    3068:	e2 0f       	add	r30, r18
    306a:	f1 1d       	adc	r31, r1
    306c:	90 83       	st	Z, r25
    306e:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
    3070:	f7 01       	movw	r30, r14
    3072:	e3 0f       	add	r30, r19
    3074:	f1 1d       	adc	r31, r1
    3076:	90 81       	ld	r25, Z
    3078:	3f 5f       	subi	r19, 0xFF	; 255
    307a:	99 23       	and	r25, r25
    307c:	71 f6       	brne	.-100    	; 0x301a <cfg_parse+0x26>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// terminate line
    307e:	f7 01       	movw	r30, r14
    3080:	e2 0f       	add	r30, r18
    3082:	f1 1d       	adc	r31, r1
    3084:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    3086:	2f 5f       	subi	r18, 0xFF	; 255
    3088:	c7 01       	movw	r24, r14
    308a:	82 0f       	add	r24, r18
    308c:	91 1d       	adc	r25, r1
    308e:	89 83       	std	Y+1, r24	; 0x01
    3090:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    3092:	10 92 45 24 	sts	0x2445, r1
	switch (text[0]) {
    3096:	f7 01       	movw	r30, r14
    3098:	80 81       	ld	r24, Z
    309a:	81 35       	cpi	r24, 0x51	; 81
    309c:	d1 f0       	breq	.+52     	; 0x30d2 <cfg_parse+0xde>
    309e:	82 35       	cpi	r24, 0x52	; 82
    30a0:	60 f4       	brcc	.+24     	; 0x30ba <cfg_parse+0xc6>
    30a2:	81 34       	cpi	r24, 0x41	; 65
    30a4:	59 f1       	breq	.+86     	; 0x30fc <cfg_parse+0x108>
    30a6:	82 34       	cpi	r24, 0x42	; 66
    30a8:	28 f4       	brcc	.+10     	; 0x30b4 <cfg_parse+0xc0>
    30aa:	88 32       	cpi	r24, 0x28	; 40
    30ac:	11 f1       	breq	.+68     	; 0x30f2 <cfg_parse+0xfe>
    30ae:	8f 33       	cpi	r24, 0x3F	; 63
    30b0:	39 f5       	brne	.+78     	; 0x3100 <cfg_parse+0x10c>
    30b2:	0c c0       	rjmp	.+24     	; 0x30cc <cfg_parse+0xd8>
    30b4:	8d 34       	cpi	r24, 0x4D	; 77
    30b6:	21 f5       	brne	.+72     	; 0x3100 <cfg_parse+0x10c>
    30b8:	0e c0       	rjmp	.+28     	; 0x30d6 <cfg_parse+0xe2>
    30ba:	89 35       	cpi	r24, 0x59	; 89
    30bc:	29 f0       	breq	.+10     	; 0x30c8 <cfg_parse+0xd4>
    30be:	8a 35       	cpi	r24, 0x5A	; 90
    30c0:	d9 f0       	breq	.+54     	; 0x30f8 <cfg_parse+0x104>
    30c2:	88 35       	cpi	r24, 0x58	; 88
    30c4:	e9 f4       	brne	.+58     	; 0x3100 <cfg_parse+0x10c>
    30c6:	1f c0       	rjmp	.+62     	; 0x3106 <cfg_parse+0x112>
    30c8:	11 e0       	ldi	r17, 0x01	; 1
    30ca:	1e c0       	rjmp	.+60     	; 0x3108 <cfg_parse+0x114>
		case '?': cfg_dump(); status (TG_OK); break;
    30cc:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <cfg_dump>
    30d0:	10 c0       	rjmp	.+32     	; 0x30f2 <cfg_parse+0xfe>
		case '(': status (TG_OK);	break;			// ignore comment lines
		case 'Q': status (TG_QUIT); break;
    30d2:	83 e0       	ldi	r24, 0x03	; 3
    30d4:	16 c0       	rjmp	.+44     	; 0x3102 <cfg_parse+0x10e>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    30d6:	c6 01       	movw	r24, r12
    30d8:	be 01       	movw	r22, r28
    30da:	6f 5f       	subi	r22, 0xFF	; 255
    30dc:	7f 4f       	sbci	r23, 0xFF	; 255
    30de:	0e 94 df 3f 	call	0x7fbe	; 0x7fbe <strtod>
    30e2:	60 93 46 24 	sts	0x2446, r22
    30e6:	70 93 47 24 	sts	0x2447, r23
    30ea:	80 93 48 24 	sts	0x2448, r24
    30ee:	90 93 49 24 	sts	0x2449, r25
				  status(TG_OK); 
    30f2:	10 92 45 24 	sts	0x2445, r1
    30f6:	07 c0       	rjmp	.+14     	; 0x3106 <cfg_parse+0x112>
				  break;
    30f8:	12 e0       	ldi	r17, 0x02	; 2
    30fa:	06 c0       	rjmp	.+12     	; 0x3108 <cfg_parse+0x114>

		case 'X': axis = X_AXIS; break;
		case 'Y': axis = Y_AXIS; break;
		case 'Z': axis = Z_AXIS; break;
    30fc:	13 e0       	ldi	r17, 0x03	; 3
    30fe:	04 c0       	rjmp	.+8      	; 0x3108 <cfg_parse+0x114>
		case 'A': axis = A_AXIS; break;

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    3100:	87 e0       	ldi	r24, 0x07	; 7
    3102:	80 93 45 24 	sts	0x2445, r24
    3106:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    3108:	80 91 45 24 	lds	r24, 0x2445
    310c:	88 23       	and	r24, r24
    310e:	09 f0       	breq	.+2      	; 0x3112 <cfg_parse+0x11e>
    3110:	ee c0       	rjmp	.+476    	; 0x32ee <cfg_parse+0x2fa>
		status(TG_OK);							// pre-emptive setting
    3112:	10 92 45 24 	sts	0x2445, r1
		switch (text[1]) {
    3116:	f7 01       	movw	r30, r14
    3118:	81 81       	ldd	r24, Z+1	; 0x01
    311a:	8c 34       	cpi	r24, 0x4C	; 76
    311c:	09 f4       	brne	.+2      	; 0x3120 <cfg_parse+0x12c>
    311e:	b8 c0       	rjmp	.+368    	; 0x3290 <cfg_parse+0x29c>
    3120:	8d 34       	cpi	r24, 0x4D	; 77
    3122:	30 f4       	brcc	.+12     	; 0x3130 <cfg_parse+0x13c>
    3124:	84 34       	cpi	r24, 0x44	; 68
    3126:	a9 f1       	breq	.+106    	; 0x3192 <cfg_parse+0x19e>
    3128:	86 34       	cpi	r24, 0x46	; 70
    312a:	09 f0       	breq	.+2      	; 0x312e <cfg_parse+0x13a>
    312c:	dd c0       	rjmp	.+442    	; 0x32e8 <cfg_parse+0x2f4>
    312e:	1d c0       	rjmp	.+58     	; 0x316a <cfg_parse+0x176>
    3130:	80 35       	cpi	r24, 0x50	; 80
    3132:	09 f4       	brne	.+2      	; 0x3136 <cfg_parse+0x142>
    3134:	47 c0       	rjmp	.+142    	; 0x31c4 <cfg_parse+0x1d0>
    3136:	83 35       	cpi	r24, 0x53	; 83
    3138:	21 f0       	breq	.+8      	; 0x3142 <cfg_parse+0x14e>
    313a:	8d 34       	cpi	r24, 0x4D	; 77
    313c:	09 f0       	breq	.+2      	; 0x3140 <cfg_parse+0x14c>
    313e:	d4 c0       	rjmp	.+424    	; 0x32e8 <cfg_parse+0x2f4>
    3140:	58 c0       	rjmp	.+176    	; 0x31f2 <cfg_parse+0x1fe>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    3142:	c6 01       	movw	r24, r12
    3144:	0e 94 4d 41 	call	0x829a	; 0x829a <atoi>
    3148:	21 2f       	mov	r18, r17
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	f9 01       	movw	r30, r18
    314e:	ee 0f       	add	r30, r30
    3150:	ff 1f       	adc	r31, r31
    3152:	e2 0f       	add	r30, r18
    3154:	f3 1f       	adc	r31, r19
    3156:	53 e0       	ldi	r21, 0x03	; 3
    3158:	ee 0f       	add	r30, r30
    315a:	ff 1f       	adc	r31, r31
    315c:	5a 95       	dec	r21
    315e:	e1 f7       	brne	.-8      	; 0x3158 <cfg_parse+0x164>
    3160:	ec 5b       	subi	r30, 0xBC	; 188
    3162:	fb 4d       	sbci	r31, 0xDB	; 219
    3164:	81 8b       	std	Z+17, r24	; 0x11
    3166:	92 8b       	std	Z+18, r25	; 0x12
    3168:	c2 c0       	rjmp	.+388    	; 0x32ee <cfg_parse+0x2fa>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    316a:	c6 01       	movw	r24, r12
    316c:	0e 94 4d 41 	call	0x829a	; 0x829a <atoi>
    3170:	21 2f       	mov	r18, r17
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	f9 01       	movw	r30, r18
    3176:	ee 0f       	add	r30, r30
    3178:	ff 1f       	adc	r31, r31
    317a:	e2 0f       	add	r30, r18
    317c:	f3 1f       	adc	r31, r19
    317e:	23 e0       	ldi	r18, 0x03	; 3
    3180:	ee 0f       	add	r30, r30
    3182:	ff 1f       	adc	r31, r31
    3184:	2a 95       	dec	r18
    3186:	e1 f7       	brne	.-8      	; 0x3180 <cfg_parse+0x18c>
    3188:	ec 5b       	subi	r30, 0xBC	; 188
    318a:	fb 4d       	sbci	r31, 0xDB	; 219
    318c:	83 8b       	std	Z+19, r24	; 0x13
    318e:	94 8b       	std	Z+20, r25	; 0x14
    3190:	ae c0       	rjmp	.+348    	; 0x32ee <cfg_parse+0x2fa>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    3192:	c6 01       	movw	r24, r12
    3194:	be 01       	movw	r22, r28
    3196:	6f 5f       	subi	r22, 0xFF	; 255
    3198:	7f 4f       	sbci	r23, 0xFF	; 255
    319a:	0e 94 df 3f 	call	0x7fbe	; 0x7fbe <strtod>
    319e:	21 2f       	mov	r18, r17
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	f9 01       	movw	r30, r18
    31a4:	ee 0f       	add	r30, r30
    31a6:	ff 1f       	adc	r31, r31
    31a8:	e2 0f       	add	r30, r18
    31aa:	f3 1f       	adc	r31, r19
    31ac:	b3 e0       	ldi	r27, 0x03	; 3
    31ae:	ee 0f       	add	r30, r30
    31b0:	ff 1f       	adc	r31, r31
    31b2:	ba 95       	dec	r27
    31b4:	e1 f7       	brne	.-8      	; 0x31ae <cfg_parse+0x1ba>
    31b6:	ec 5b       	subi	r30, 0xBC	; 188
    31b8:	fb 4d       	sbci	r31, 0xDB	; 219
    31ba:	65 8b       	std	Z+21, r22	; 0x15
    31bc:	76 8b       	std	Z+22, r23	; 0x16
    31be:	87 8b       	std	Z+23, r24	; 0x17
    31c0:	90 8f       	std	Z+24, r25	; 0x18
    31c2:	95 c0       	rjmp	.+298    	; 0x32ee <cfg_parse+0x2fa>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    31c4:	c6 01       	movw	r24, r12
    31c6:	0e 94 4d 41 	call	0x829a	; 0x829a <atoi>
    31ca:	68 2f       	mov	r22, r24
    31cc:	81 2f       	mov	r24, r17
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	fc 01       	movw	r30, r24
    31d2:	ee 0f       	add	r30, r30
    31d4:	ff 1f       	adc	r31, r31
    31d6:	e8 0f       	add	r30, r24
    31d8:	f9 1f       	adc	r31, r25
    31da:	73 e0       	ldi	r23, 0x03	; 3
    31dc:	ee 0f       	add	r30, r30
    31de:	ff 1f       	adc	r31, r31
    31e0:	7a 95       	dec	r23
    31e2:	e1 f7       	brne	.-8      	; 0x31dc <cfg_parse+0x1e8>
    31e4:	ec 5b       	subi	r30, 0xBC	; 188
    31e6:	fb 4d       	sbci	r31, 0xDB	; 219
    31e8:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    31ea:	81 2f       	mov	r24, r17
    31ec:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <st_set_polarity>
    31f0:	7e c0       	rjmp	.+252    	; 0x32ee <cfg_parse+0x2fa>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    31f2:	f7 01       	movw	r30, r14
    31f4:	82 81       	ldd	r24, Z+2	; 0x02
    31f6:	89 34       	cpi	r24, 0x49	; 73
    31f8:	99 f4       	brne	.+38     	; 0x3220 <cfg_parse+0x22c>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    31fa:	c6 01       	movw	r24, r12
    31fc:	0e 94 4d 41 	call	0x829a	; 0x829a <atoi>
    3200:	21 2f       	mov	r18, r17
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	f9 01       	movw	r30, r18
    3206:	ee 0f       	add	r30, r30
    3208:	ff 1f       	adc	r31, r31
    320a:	e2 0f       	add	r30, r18
    320c:	f3 1f       	adc	r31, r19
    320e:	53 e0       	ldi	r21, 0x03	; 3
    3210:	ee 0f       	add	r30, r30
    3212:	ff 1f       	adc	r31, r31
    3214:	5a 95       	dec	r21
    3216:	e1 f7       	brne	.-8      	; 0x3210 <cfg_parse+0x21c>
    3218:	ec 5b       	subi	r30, 0xBC	; 188
    321a:	fb 4d       	sbci	r31, 0xDB	; 219
    321c:	86 87       	std	Z+14, r24	; 0x0e
    321e:	67 c0       	rjmp	.+206    	; 0x32ee <cfg_parse+0x2fa>
				} else if (text[3] == 'R') {
    3220:	f7 01       	movw	r30, r14
    3222:	83 81       	ldd	r24, Z+3	; 0x03
    3224:	82 35       	cpi	r24, 0x52	; 82
    3226:	c9 f4       	brne	.+50     	; 0x325a <cfg_parse+0x266>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    3228:	c6 01       	movw	r24, r12
    322a:	be 01       	movw	r22, r28
    322c:	6f 5f       	subi	r22, 0xFF	; 255
    322e:	7f 4f       	sbci	r23, 0xFF	; 255
    3230:	0e 94 df 3f 	call	0x7fbe	; 0x7fbe <strtod>
    3234:	21 2f       	mov	r18, r17
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	f9 01       	movw	r30, r18
    323a:	ee 0f       	add	r30, r30
    323c:	ff 1f       	adc	r31, r31
    323e:	e2 0f       	add	r30, r18
    3240:	f3 1f       	adc	r31, r19
    3242:	13 e0       	ldi	r17, 0x03	; 3
    3244:	ee 0f       	add	r30, r30
    3246:	ff 1f       	adc	r31, r31
    3248:	1a 95       	dec	r17
    324a:	e1 f7       	brne	.-8      	; 0x3244 <cfg_parse+0x250>
    324c:	ec 5b       	subi	r30, 0xBC	; 188
    324e:	fb 4d       	sbci	r31, 0xDB	; 219
    3250:	61 8f       	std	Z+25, r22	; 0x19
    3252:	72 8f       	std	Z+26, r23	; 0x1a
    3254:	83 8f       	std	Z+27, r24	; 0x1b
    3256:	94 8f       	std	Z+28, r25	; 0x1c
    3258:	4a c0       	rjmp	.+148    	; 0x32ee <cfg_parse+0x2fa>
				} else if (text[3] == 'T') {
    325a:	84 35       	cpi	r24, 0x54	; 84
    325c:	c9 f4       	brne	.+50     	; 0x3290 <cfg_parse+0x29c>
					CFG(axis).mm_travel = strtod(val, &end); break;
    325e:	c6 01       	movw	r24, r12
    3260:	be 01       	movw	r22, r28
    3262:	6f 5f       	subi	r22, 0xFF	; 255
    3264:	7f 4f       	sbci	r23, 0xFF	; 255
    3266:	0e 94 df 3f 	call	0x7fbe	; 0x7fbe <strtod>
    326a:	21 2f       	mov	r18, r17
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	f9 01       	movw	r30, r18
    3270:	ee 0f       	add	r30, r30
    3272:	ff 1f       	adc	r31, r31
    3274:	e2 0f       	add	r30, r18
    3276:	f3 1f       	adc	r31, r19
    3278:	a3 e0       	ldi	r26, 0x03	; 3
    327a:	ee 0f       	add	r30, r30
    327c:	ff 1f       	adc	r31, r31
    327e:	aa 95       	dec	r26
    3280:	e1 f7       	brne	.-8      	; 0x327a <cfg_parse+0x286>
    3282:	ec 5b       	subi	r30, 0xBC	; 188
    3284:	fb 4d       	sbci	r31, 0xDB	; 219
    3286:	65 8f       	std	Z+29, r22	; 0x1d
    3288:	76 8f       	std	Z+30, r23	; 0x1e
    328a:	87 8f       	std	Z+31, r24	; 0x1f
    328c:	90 a3       	std	Z+32, r25	; 0x20
    328e:	2f c0       	rjmp	.+94     	; 0x32ee <cfg_parse+0x2fa>
				}
			case 'L': 
				if (text[2] == 'O') {
    3290:	f7 01       	movw	r30, r14
    3292:	82 81       	ldd	r24, Z+2	; 0x02
    3294:	8f 34       	cpi	r24, 0x4F	; 79
    3296:	99 f4       	brne	.+38     	; 0x32be <cfg_parse+0x2ca>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    3298:	c6 01       	movw	r24, r12
    329a:	0e 94 4d 41 	call	0x829a	; 0x829a <atoi>
    329e:	21 2f       	mov	r18, r17
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	f9 01       	movw	r30, r18
    32a4:	ee 0f       	add	r30, r30
    32a6:	ff 1f       	adc	r31, r31
    32a8:	e2 0f       	add	r30, r18
    32aa:	f3 1f       	adc	r31, r19
    32ac:	53 e0       	ldi	r21, 0x03	; 3
    32ae:	ee 0f       	add	r30, r30
    32b0:	ff 1f       	adc	r31, r31
    32b2:	5a 95       	dec	r21
    32b4:	e1 f7       	brne	.-8      	; 0x32ae <cfg_parse+0x2ba>
    32b6:	ec 5b       	subi	r30, 0xBC	; 188
    32b8:	fb 4d       	sbci	r31, 0xDB	; 219
    32ba:	87 87       	std	Z+15, r24	; 0x0f
    32bc:	18 c0       	rjmp	.+48     	; 0x32ee <cfg_parse+0x2fa>
				} else if (text[2] == 'I') {
    32be:	89 34       	cpi	r24, 0x49	; 73
    32c0:	99 f4       	brne	.+38     	; 0x32e8 <cfg_parse+0x2f4>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    32c2:	c6 01       	movw	r24, r12
    32c4:	0e 94 4d 41 	call	0x829a	; 0x829a <atoi>
    32c8:	21 2f       	mov	r18, r17
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	f9 01       	movw	r30, r18
    32ce:	ee 0f       	add	r30, r30
    32d0:	ff 1f       	adc	r31, r31
    32d2:	e2 0f       	add	r30, r18
    32d4:	f3 1f       	adc	r31, r19
    32d6:	23 e0       	ldi	r18, 0x03	; 3
    32d8:	ee 0f       	add	r30, r30
    32da:	ff 1f       	adc	r31, r31
    32dc:	2a 95       	dec	r18
    32de:	e1 f7       	brne	.-8      	; 0x32d8 <cfg_parse+0x2e4>
    32e0:	ec 5b       	subi	r30, 0xBC	; 188
    32e2:	fb 4d       	sbci	r31, 0xDB	; 219
    32e4:	85 a3       	std	Z+37, r24	; 0x25
    32e6:	03 c0       	rjmp	.+6      	; 0x32ee <cfg_parse+0x2fa>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    32e8:	87 e0       	ldi	r24, 0x07	; 7
    32ea:	80 93 45 24 	sts	0x2445, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    32ee:	80 91 45 24 	lds	r24, 0x2445
    32f2:	b7 01       	movw	r22, r14
    32f4:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
}
    32f8:	80 91 45 24 	lds	r24, 0x2445
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	0f 90       	pop	r0
    3300:	0f 90       	pop	r0
    3302:	cf 91       	pop	r28
    3304:	df 91       	pop	r29
    3306:	1f 91       	pop	r17
    3308:	ff 90       	pop	r15
    330a:	ef 90       	pop	r14
    330c:	df 90       	pop	r13
    330e:	cf 90       	pop	r12
    3310:	08 95       	ret

00003312 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3312:	ef 92       	push	r14
    3314:	ff 92       	push	r15
    3316:	0f 93       	push	r16
    3318:	1f 93       	push	r17
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    3322:	a8 97       	sbiw	r28, 0x28	; 40
    3324:	cd bf       	out	0x3d, r28	; 61
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0b e4       	ldi	r16, 0x4B	; 75
    332a:	12 e0       	ldi	r17, 0x02	; 2
    332c:	a0 e0       	ldi	r26, 0x00	; 0
    332e:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    3330:	7e 01       	movw	r14, r28
    3332:	08 94       	sec
    3334:	e1 1c       	adc	r14, r1
    3336:	f1 1c       	adc	r15, r1
    3338:	02 c0       	rjmp	.+4      	; 0x333e <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    333a:	0f 5f       	subi	r16, 0xFF	; 255
    333c:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    333e:	f8 01       	movw	r30, r16
    3340:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    3342:	88 23       	and	r24, r24
    3344:	89 f4       	brne	.+34     	; 0x3368 <cfg_test+0x56>
			text[j] = 0;
    3346:	ce 01       	movw	r24, r28
    3348:	01 96       	adiw	r24, 0x01	; 1
    334a:	a8 0f       	add	r26, r24
    334c:	b9 1f       	adc	r27, r25
    334e:	1c 92       	st	X, r1
			cfg_parse(text);
    3350:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    3354:	a8 96       	adiw	r28, 0x28	; 40
    3356:	cd bf       	out	0x3d, r28	; 61
    3358:	de bf       	out	0x3e, r29	; 62
    335a:	cf 91       	pop	r28
    335c:	df 91       	pop	r29
    335e:	1f 91       	pop	r17
    3360:	0f 91       	pop	r16
    3362:	ff 90       	pop	r15
    3364:	ef 90       	pop	r14
    3366:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    3368:	8d 30       	cpi	r24, 0x0D	; 13
    336a:	21 f0       	breq	.+8      	; 0x3374 <cfg_test+0x62>
    336c:	8a 30       	cpi	r24, 0x0A	; 10
    336e:	11 f0       	breq	.+4      	; 0x3374 <cfg_test+0x62>
    3370:	8b 33       	cpi	r24, 0x3B	; 59
    3372:	49 f4       	brne	.+18     	; 0x3386 <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    3374:	ae 0d       	add	r26, r14
    3376:	bf 1d       	adc	r27, r15
    3378:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    337a:	c7 01       	movw	r24, r14
    337c:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <cfg_parse>
    3380:	a0 e0       	ldi	r26, 0x00	; 0
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	da cf       	rjmp	.-76     	; 0x333a <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    3386:	81 32       	cpi	r24, 0x21	; 33
    3388:	c0 f2       	brcs	.-80     	; 0x333a <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    338a:	f7 01       	movw	r30, r14
    338c:	ea 0f       	add	r30, r26
    338e:	fb 1f       	adc	r31, r27
    3390:	80 83       	st	Z, r24
    3392:	11 96       	adiw	r26, 0x01	; 1
    3394:	d2 cf       	rjmp	.-92     	; 0x333a <cfg_test+0x28>

00003396 <en_init>:

#include "encoder.h"

void en_init(void) {

}
    3396:	08 95       	ret

00003398 <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    3398:	0f 93       	push	r16
    339a:	df 93       	push	r29
    339c:	cf 93       	push	r28
    339e:	0f 92       	push	r0
    33a0:	cd b7       	in	r28, 0x3d	; 61
    33a2:	de b7       	in	r29, 0x3e	; 62
	OSC.XOSCCTRL = 0x4B;	// 2-9 MHz crystal; 0.4-16 MHz XTAL w/16K CLK Start Up
    33a4:	8b e4       	ldi	r24, 0x4B	; 75
    33a6:	e0 e5       	ldi	r30, 0x50	; 80
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    33ac:	88 e0       	ldi	r24, 0x08	; 8
    33ae:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    33b2:	80 91 51 00 	lds	r24, 0x0051
    33b6:	83 ff       	sbrs	r24, 3
    33b8:	fc cf       	rjmp	.-8      	; 0x33b2 <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC4;		// XOSC is PLL Source; 4x Factor (32 MHz) 
    33ba:	84 ec       	ldi	r24, 0xC4	; 196
    33bc:	e0 e5       	ldi	r30, 0x50	; 80
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    33c2:	88 e1       	ldi	r24, 0x18	; 24
    33c4:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    33c8:	80 91 51 00 	lds	r24, 0x0051
    33cc:	84 ff       	sbrs	r24, 4
    33ce:	fc cf       	rjmp	.-8      	; 0x33c8 <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    33d0:	8f b7       	in	r24, 0x3f	; 63
    33d2:	89 83       	std	Y+1, r24	; 0x01
    33d4:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    33d6:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    33d8:	24 e0       	ldi	r18, 0x04	; 4
    33da:	80 e4       	ldi	r24, 0x40	; 64
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	fc 01       	movw	r30, r24
    33e0:	08 ed       	ldi	r16, 0xD8	; 216
    33e2:	04 bf       	out	0x34, r16	; 52
    33e4:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    33e6:	89 81       	ldd	r24, Y+1	; 0x01
    33e8:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC4;		// XOSC is PLL Source; 4x Factor (32 MHz) 
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    33ea:	80 91 50 00 	lds	r24, 0x0050
    33ee:	8e 7f       	andi	r24, 0xFE	; 254
    33f0:	80 93 50 00 	sts	0x0050, r24
}
    33f4:	0f 90       	pop	r0
    33f6:	cf 91       	pop	r28
    33f8:	df 91       	pop	r29
    33fa:	0f 91       	pop	r16
    33fc:	08 95       	ret

000033fe <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    33fe:	0e 94 cc 19 	call	0x3398	; 0x3398 <xmega_init_clocks>
}
    3402:	08 95       	ret

00003404 <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3404:	0f 93       	push	r16
    3406:	df 93       	push	r29
    3408:	cf 93       	push	r28
    340a:	0f 92       	push	r0
    340c:	cd b7       	in	r28, 0x3d	; 61
    340e:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3410:	2f b7       	in	r18, 0x3f	; 63
    3412:	29 83       	std	Y+1, r18	; 0x01
    3414:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3416:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3418:	fc 01       	movw	r30, r24
    341a:	08 ed       	ldi	r16, 0xD8	; 216
    341c:	04 bf       	out	0x34, r16	; 52
    341e:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	8f bf       	out	0x3f, r24	; 63
#endif
}
    3424:	0f 90       	pop	r0
    3426:	cf 91       	pop	r28
    3428:	df 91       	pop	r29
    342a:	0f 91       	pop	r16
    342c:	08 95       	ret

0000342e <mc_go_home>:
 */

void mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    342e:	8c e0       	ldi	r24, 0x0C	; 12
    3430:	e3 e7       	ldi	r30, 0x73	; 115
    3432:	f1 e2       	ldi	r31, 0x21	; 33
    3434:	df 01       	movw	r26, r30
    3436:	1d 92       	st	X+, r1
    3438:	8a 95       	dec	r24
    343a:	e9 f7       	brne	.-6      	; 0x3436 <mc_go_home+0x8>
}
    343c:	08 95       	ret

0000343e <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    343e:	8c e0       	ldi	r24, 0x0C	; 12
    3440:	e3 e7       	ldi	r30, 0x73	; 115
    3442:	f1 e2       	ldi	r31, 0x21	; 33
    3444:	df 01       	movw	r26, r30
    3446:	1d 92       	st	X+, r1
    3448:	8a 95       	dec	r24
    344a:	e9 f7       	brne	.-6      	; 0x3446 <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    344c:	10 92 72 21 	sts	0x2172, r1
	ma.arc_state = MC_STATE_OFF;
    3450:	10 92 b4 24 	sts	0x24B4, r1
}
    3454:	08 95       	ret

00003456 <mc_dwell>:
/* 
 * mc_dwell() 
 */

void mc_dwell(uint32_t milliseconds) 
{
    3456:	af 92       	push	r10
    3458:	bf 92       	push	r11
    345a:	cf 92       	push	r12
    345c:	df 92       	push	r13
    345e:	ef 92       	push	r14
    3460:	ff 92       	push	r15
    3462:	0f 93       	push	r16
    3464:	1f 93       	push	r17
    3466:	7b 01       	movw	r14, r22
    3468:	8c 01       	movw	r16, r24
	mv_synchronize();
    346a:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <mv_synchronize>
	_delay_ms(milliseconds);
    346e:	c8 01       	movw	r24, r16
    3470:	b7 01       	movw	r22, r14
    3472:	0e 94 74 3c 	call	0x78e8	; 0x78e8 <__floatunsisf>
    3476:	5b 01       	movw	r10, r22
    3478:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	4a ef       	ldi	r20, 0xFA	; 250
    3480:	55 e4       	ldi	r21, 0x45	; 69
    3482:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    3486:	7b 01       	movw	r14, r22
    3488:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	40 e8       	ldi	r20, 0x80	; 128
    3490:	5f e3       	ldi	r21, 0x3F	; 63
    3492:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <__cmpsf2>
    3496:	88 23       	and	r24, r24
    3498:	1c f4       	brge	.+6      	; 0x34a0 <mc_dwell+0x4a>
    349a:	61 e0       	ldi	r22, 0x01	; 1
    349c:	70 e0       	ldi	r23, 0x00	; 0
    349e:	24 c0       	rjmp	.+72     	; 0x34e8 <mc_dwell+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
    34a0:	c8 01       	movw	r24, r16
    34a2:	b7 01       	movw	r22, r14
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	3f ef       	ldi	r19, 0xFF	; 255
    34a8:	4f e7       	ldi	r20, 0x7F	; 127
    34aa:	57 e4       	ldi	r21, 0x47	; 71
    34ac:	0e 94 c4 3d 	call	0x7b88	; 0x7b88 <__gesf2>
    34b0:	18 16       	cp	r1, r24
    34b2:	b4 f4       	brge	.+44     	; 0x34e0 <mc_dwell+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b4:	c6 01       	movw	r24, r12
    34b6:	b5 01       	movw	r22, r10
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	40 e2       	ldi	r20, 0x20	; 32
    34be:	51 e4       	ldi	r21, 0x41	; 65
    34c0:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    34c4:	0e 94 48 3c 	call	0x7890	; 0x7890 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34c8:	80 e2       	ldi	r24, 0x20	; 32
    34ca:	93 e0       	ldi	r25, 0x03	; 3
    34cc:	05 c0       	rjmp	.+10     	; 0x34d8 <mc_dwell+0x82>
    34ce:	fc 01       	movw	r30, r24
    34d0:	31 97       	sbiw	r30, 0x01	; 1
    34d2:	f1 f7       	brne	.-4      	; 0x34d0 <mc_dwell+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d4:	61 50       	subi	r22, 0x01	; 1
    34d6:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34d8:	61 15       	cp	r22, r1
    34da:	71 05       	cpc	r23, r1
    34dc:	c1 f7       	brne	.-16     	; 0x34ce <mc_dwell+0x78>
    34de:	07 c0       	rjmp	.+14     	; 0x34ee <mc_dwell+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34e0:	c8 01       	movw	r24, r16
    34e2:	b7 01       	movw	r22, r14
    34e4:	0e 94 48 3c 	call	0x7890	; 0x7890 <__fixunssfsi>
    34e8:	cb 01       	movw	r24, r22
    34ea:	01 97       	sbiw	r24, 0x01	; 1
    34ec:	f1 f7       	brne	.-4      	; 0x34ea <mc_dwell+0x94>
}
    34ee:	1f 91       	pop	r17
    34f0:	0f 91       	pop	r16
    34f2:	ff 90       	pop	r15
    34f4:	ef 90       	pop	r14
    34f6:	df 90       	pop	r13
    34f8:	cf 90       	pop	r12
    34fa:	bf 90       	pop	r11
    34fc:	af 90       	pop	r10
    34fe:	08 95       	ret

00003500 <mc_line_continuation>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continuation() 
{
    3500:	af 92       	push	r10
    3502:	bf 92       	push	r11
    3504:	cf 92       	push	r12
    3506:	df 92       	push	r13
    3508:	ef 92       	push	r14
    350a:	ff 92       	push	r15
    350c:	0f 93       	push	r16
    350e:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    3510:	80 91 72 21 	lds	r24, 0x2172
    3514:	88 23       	and	r24, r24
    3516:	19 f4       	brne	.+6      	; 0x351e <mc_line_continuation+0x1e>
    3518:	21 e0       	ldi	r18, 0x01	; 1
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	30 c0       	rjmp	.+96     	; 0x357e <mc_line_continuation+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    351e:	82 e0       	ldi	r24, 0x02	; 2
    3520:	80 93 72 21 	sts	0x2172, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    3524:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <mv_test_move_buffer_full>
    3528:	88 23       	and	r24, r24
    352a:	19 f0       	breq	.+6      	; 0x3532 <mc_line_continuation+0x32>
    352c:	22 e0       	ldi	r18, 0x02	; 2
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	26 c0       	rjmp	.+76     	; 0x357e <mc_line_continuation+0x7e>
		return (TG_CONTINUE);
	}
	mv_queue_move_buffer(mc.steps[X_AXIS], mc.steps[Y_AXIS], mc.steps[Z_AXIS], mc.microseconds); 
    3532:	60 91 8b 21 	lds	r22, 0x218B
    3536:	70 91 8c 21 	lds	r23, 0x218C
    353a:	80 91 8d 21 	lds	r24, 0x218D
    353e:	90 91 8e 21 	lds	r25, 0x218E
    3542:	20 91 8f 21 	lds	r18, 0x218F
    3546:	30 91 90 21 	lds	r19, 0x2190
    354a:	40 91 91 21 	lds	r20, 0x2191
    354e:	50 91 92 21 	lds	r21, 0x2192
    3552:	e0 90 93 21 	lds	r14, 0x2193
    3556:	f0 90 94 21 	lds	r15, 0x2194
    355a:	00 91 95 21 	lds	r16, 0x2195
    355e:	10 91 96 21 	lds	r17, 0x2196
    3562:	a0 90 97 21 	lds	r10, 0x2197
    3566:	b0 90 98 21 	lds	r11, 0x2198
    356a:	c0 90 99 21 	lds	r12, 0x2199
    356e:	d0 90 9a 21 	lds	r13, 0x219A
    3572:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    3576:	10 92 72 21 	sts	0x2172, r1
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    357e:	c9 01       	movw	r24, r18
    3580:	1f 91       	pop	r17
    3582:	0f 91       	pop	r16
    3584:	ff 90       	pop	r15
    3586:	ef 90       	pop	r14
    3588:	df 90       	pop	r13
    358a:	cf 90       	pop	r12
    358c:	bf 90       	pop	r11
    358e:	af 90       	pop	r10
    3590:	08 95       	ret

00003592 <mc_line_nonblock>:
/* 
 * mc_line_nonblock() - mc_line with non-blocking behavior
 */

int mc_line_nonblock(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    3592:	2f 92       	push	r2
    3594:	3f 92       	push	r3
    3596:	4f 92       	push	r4
    3598:	5f 92       	push	r5
    359a:	6f 92       	push	r6
    359c:	7f 92       	push	r7
    359e:	8f 92       	push	r8
    35a0:	9f 92       	push	r9
    35a2:	af 92       	push	r10
    35a4:	bf 92       	push	r11
    35a6:	cf 92       	push	r12
    35a8:	df 92       	push	r13
    35aa:	ef 92       	push	r14
    35ac:	ff 92       	push	r15
    35ae:	0f 93       	push	r16
    35b0:	1f 93       	push	r17
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
    35ba:	64 97       	sbiw	r28, 0x14	; 20
    35bc:	cd bf       	out	0x3d, r28	; 61
    35be:	de bf       	out	0x3e, r29	; 62
    35c0:	2d 87       	std	Y+13, r18	; 0x0d
    35c2:	3e 87       	std	Y+14, r19	; 0x0e
    35c4:	4f 87       	std	Y+15, r20	; 0x0f
    35c6:	58 8b       	std	Y+16, r21	; 0x10
    35c8:	a9 8a       	std	Y+17, r10	; 0x11
    35ca:	ba 8a       	std	Y+18, r11	; 0x12
    35cc:	cb 8a       	std	Y+19, r12	; 0x13
    35ce:	dc 8a       	std	Y+20, r13	; 0x14
	mc.target[X_AXIS] = lround(x*CFG(X_AXIS).steps_per_mm);
    35d0:	20 91 65 24 	lds	r18, 0x2465
    35d4:	30 91 66 24 	lds	r19, 0x2466
    35d8:	40 91 67 24 	lds	r20, 0x2467
    35dc:	50 91 68 24 	lds	r21, 0x2468
    35e0:	29 87       	std	Y+9, r18	; 0x09
    35e2:	3a 87       	std	Y+10, r19	; 0x0a
    35e4:	4b 87       	std	Y+11, r20	; 0x0b
    35e6:	5c 87       	std	Y+12, r21	; 0x0c
    35e8:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    35ec:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <lround>
    35f0:	2b 01       	movw	r4, r22
    35f2:	3c 01       	movw	r6, r24
    35f4:	40 92 7f 21 	sts	0x217F, r4
    35f8:	50 92 80 21 	sts	0x2180, r5
    35fc:	60 92 81 21 	sts	0x2181, r6
    3600:	70 92 82 21 	sts	0x2182, r7
	mc.target[Y_AXIS] = lround(y*CFG(Y_AXIS).steps_per_mm);
    3604:	80 91 7d 24 	lds	r24, 0x247D
    3608:	90 91 7e 24 	lds	r25, 0x247E
    360c:	a0 91 7f 24 	lds	r26, 0x247F
    3610:	b0 91 80 24 	lds	r27, 0x2480
    3614:	8d 83       	std	Y+5, r24	; 0x05
    3616:	9e 83       	std	Y+6, r25	; 0x06
    3618:	af 83       	std	Y+7, r26	; 0x07
    361a:	b8 87       	std	Y+8, r27	; 0x08
    361c:	6d 85       	ldd	r22, Y+13	; 0x0d
    361e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3620:	8f 85       	ldd	r24, Y+15	; 0x0f
    3622:	98 89       	ldd	r25, Y+16	; 0x10
    3624:	2d 81       	ldd	r18, Y+5	; 0x05
    3626:	3e 81       	ldd	r19, Y+6	; 0x06
    3628:	4f 81       	ldd	r20, Y+7	; 0x07
    362a:	58 85       	ldd	r21, Y+8	; 0x08
    362c:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    3630:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <lround>
    3634:	5b 01       	movw	r10, r22
    3636:	6c 01       	movw	r12, r24
    3638:	a0 92 83 21 	sts	0x2183, r10
    363c:	b0 92 84 21 	sts	0x2184, r11
    3640:	c0 92 85 21 	sts	0x2185, r12
    3644:	d0 92 86 21 	sts	0x2186, r13
	mc.target[Z_AXIS] = lround(z*CFG(Z_AXIS).steps_per_mm); 
    3648:	20 91 95 24 	lds	r18, 0x2495
    364c:	30 91 96 24 	lds	r19, 0x2496
    3650:	40 91 97 24 	lds	r20, 0x2497
    3654:	50 91 98 24 	lds	r21, 0x2498
    3658:	29 83       	std	Y+1, r18	; 0x01
    365a:	3a 83       	std	Y+2, r19	; 0x02
    365c:	4b 83       	std	Y+3, r20	; 0x03
    365e:	5c 83       	std	Y+4, r21	; 0x04
    3660:	c8 01       	movw	r24, r16
    3662:	b7 01       	movw	r22, r14
    3664:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    3668:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <lround>
    366c:	9b 01       	movw	r18, r22
    366e:	ac 01       	movw	r20, r24
    3670:	20 93 87 21 	sts	0x2187, r18
    3674:	30 93 88 21 	sts	0x2188, r19
    3678:	40 93 89 21 	sts	0x2189, r20
    367c:	50 93 8a 21 	sts	0x218A, r21

	mc.steps[X_AXIS] = mc.target[X_AXIS]-mc.position[X_AXIS];
    3680:	80 91 73 21 	lds	r24, 0x2173
    3684:	90 91 74 21 	lds	r25, 0x2174
    3688:	a0 91 75 21 	lds	r26, 0x2175
    368c:	b0 91 76 21 	lds	r27, 0x2176
    3690:	83 01       	movw	r16, r6
    3692:	72 01       	movw	r14, r4
    3694:	e8 1a       	sub	r14, r24
    3696:	f9 0a       	sbc	r15, r25
    3698:	0a 0b       	sbc	r16, r26
    369a:	1b 0b       	sbc	r17, r27
    369c:	e0 92 8b 21 	sts	0x218B, r14
    36a0:	f0 92 8c 21 	sts	0x218C, r15
    36a4:	00 93 8d 21 	sts	0x218D, r16
    36a8:	10 93 8e 21 	sts	0x218E, r17
	mc.steps[Y_AXIS] = mc.target[Y_AXIS]-mc.position[Y_AXIS];
    36ac:	80 91 77 21 	lds	r24, 0x2177
    36b0:	90 91 78 21 	lds	r25, 0x2178
    36b4:	a0 91 79 21 	lds	r26, 0x2179
    36b8:	b0 91 7a 21 	lds	r27, 0x217A
    36bc:	a8 1a       	sub	r10, r24
    36be:	b9 0a       	sbc	r11, r25
    36c0:	ca 0a       	sbc	r12, r26
    36c2:	db 0a       	sbc	r13, r27
    36c4:	a0 92 8f 21 	sts	0x218F, r10
    36c8:	b0 92 90 21 	sts	0x2190, r11
    36cc:	c0 92 91 21 	sts	0x2191, r12
    36d0:	d0 92 92 21 	sts	0x2192, r13
	mc.steps[Z_AXIS] = mc.target[Z_AXIS]-mc.position[Z_AXIS];
    36d4:	80 91 7b 21 	lds	r24, 0x217B
    36d8:	90 91 7c 21 	lds	r25, 0x217C
    36dc:	a0 91 7d 21 	lds	r26, 0x217D
    36e0:	b0 91 7e 21 	lds	r27, 0x217E
    36e4:	19 01       	movw	r2, r18
    36e6:	2a 01       	movw	r4, r20
    36e8:	28 1a       	sub	r2, r24
    36ea:	39 0a       	sbc	r3, r25
    36ec:	4a 0a       	sbc	r4, r26
    36ee:	5b 0a       	sbc	r5, r27
    36f0:	20 92 93 21 	sts	0x2193, r2
    36f4:	30 92 94 21 	sts	0x2194, r3
    36f8:	40 92 95 21 	sts	0x2195, r4
    36fc:	50 92 96 21 	sts	0x2196, r5

	if (invert_feed_rate) {
    3700:	89 28       	or	r8, r9
    3702:	59 f0       	breq	.+22     	; 0x371a <mc_line_nonblock+0x188>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3704:	60 ec       	ldi	r22, 0xC0	; 192
    3706:	71 ee       	ldi	r23, 0xE1	; 225
    3708:	84 e6       	ldi	r24, 0x64	; 100
    370a:	9c e4       	ldi	r25, 0x4C	; 76
    370c:	29 89       	ldd	r18, Y+17	; 0x11
    370e:	3a 89       	ldd	r19, Y+18	; 0x12
    3710:	4b 89       	ldd	r20, Y+19	; 0x13
    3712:	5c 89       	ldd	r21, Y+20	; 0x14
    3714:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    3718:	4a c0       	rjmp	.+148    	; 0x37ae <mc_line_nonblock+0x21c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X_AXIS]/CFG(X_AXIS).steps_per_mm) + 
    371a:	c8 01       	movw	r24, r16
    371c:	b7 01       	movw	r22, r14
    371e:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    3722:	29 85       	ldd	r18, Y+9	; 0x09
    3724:	3a 85       	ldd	r19, Y+10	; 0x0a
    3726:	4b 85       	ldd	r20, Y+11	; 0x0b
    3728:	5c 85       	ldd	r21, Y+12	; 0x0c
    372a:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    372e:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <square>
    3732:	3b 01       	movw	r6, r22
    3734:	4c 01       	movw	r8, r24
    3736:	c6 01       	movw	r24, r12
    3738:	b5 01       	movw	r22, r10
    373a:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    373e:	2d 81       	ldd	r18, Y+5	; 0x05
    3740:	3e 81       	ldd	r19, Y+6	; 0x06
    3742:	4f 81       	ldd	r20, Y+7	; 0x07
    3744:	58 85       	ldd	r21, Y+8	; 0x08
    3746:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    374a:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <square>
    374e:	5b 01       	movw	r10, r22
    3750:	6c 01       	movw	r12, r24
    3752:	c2 01       	movw	r24, r4
    3754:	b1 01       	movw	r22, r2
    3756:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    375a:	29 81       	ldd	r18, Y+1	; 0x01
    375c:	3a 81       	ldd	r19, Y+2	; 0x02
    375e:	4b 81       	ldd	r20, Y+3	; 0x03
    3760:	5c 81       	ldd	r21, Y+4	; 0x04
    3762:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    3766:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <square>
    376a:	7b 01       	movw	r14, r22
    376c:	8c 01       	movw	r16, r24
    376e:	c4 01       	movw	r24, r8
    3770:	b3 01       	movw	r22, r6
    3772:	a6 01       	movw	r20, r12
    3774:	95 01       	movw	r18, r10
    3776:	0e 94 35 3b 	call	0x766a	; 0x766a <__addsf3>
    377a:	a8 01       	movw	r20, r16
    377c:	97 01       	movw	r18, r14
    377e:	0e 94 35 3b 	call	0x766a	; 0x766a <__addsf3>
    3782:	0e 94 03 3f 	call	0x7e06	; 0x7e06 <sqrt>
    3786:	60 93 9b 21 	sts	0x219B, r22
    378a:	70 93 9c 21 	sts	0x219C, r23
    378e:	80 93 9d 21 	sts	0x219D, r24
    3792:	90 93 9e 21 	sts	0x219E, r25
							   square(mc.steps[Y_AXIS]/CFG(Y_AXIS).steps_per_mm) + 
							   square(mc.steps[Z_AXIS]/CFG(Z_AXIS).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3796:	29 89       	ldd	r18, Y+17	; 0x11
    3798:	3a 89       	ldd	r19, Y+18	; 0x12
    379a:	4b 89       	ldd	r20, Y+19	; 0x13
    379c:	5c 89       	ldd	r21, Y+20	; 0x14
    379e:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	34 e2       	ldi	r19, 0x24	; 36
    37a6:	44 e7       	ldi	r20, 0x74	; 116
    37a8:	59 e4       	ldi	r21, 0x49	; 73
    37aa:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    37ae:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <lround>
    37b2:	60 93 97 21 	sts	0x2197, r22
    37b6:	70 93 98 21 	sts	0x2198, r23
    37ba:	80 93 99 21 	sts	0x2199, r24
    37be:	90 93 9a 21 	sts	0x219A, r25
	}
	mc.line_state = MC_STATE_NEW;
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	80 93 72 21 	sts	0x2172, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    37c8:	e3 e7       	ldi	r30, 0x73	; 115
    37ca:	f1 e2       	ldi	r31, 0x21	; 33
    37cc:	df 01       	movw	r26, r30
    37ce:	1c 96       	adiw	r26, 0x0c	; 12
    37d0:	8c e0       	ldi	r24, 0x0C	; 12
    37d2:	0d 90       	ld	r0, X+
    37d4:	01 92       	st	Z+, r0
    37d6:	81 50       	subi	r24, 0x01	; 1
    37d8:	e1 f7       	brne	.-8      	; 0x37d2 <mc_line_nonblock+0x240>
	return (mc_line_continuation());
    37da:	0e 94 80 1a 	call	0x3500	; 0x3500 <mc_line_continuation>
}
    37de:	64 96       	adiw	r28, 0x14	; 20
    37e0:	cd bf       	out	0x3d, r28	; 61
    37e2:	de bf       	out	0x3e, r29	; 62
    37e4:	cf 91       	pop	r28
    37e6:	df 91       	pop	r29
    37e8:	1f 91       	pop	r17
    37ea:	0f 91       	pop	r16
    37ec:	ff 90       	pop	r15
    37ee:	ef 90       	pop	r14
    37f0:	df 90       	pop	r13
    37f2:	cf 90       	pop	r12
    37f4:	bf 90       	pop	r11
    37f6:	af 90       	pop	r10
    37f8:	9f 90       	pop	r9
    37fa:	8f 90       	pop	r8
    37fc:	7f 90       	pop	r7
    37fe:	6f 90       	pop	r6
    3800:	5f 90       	pop	r5
    3802:	4f 90       	pop	r4
    3804:	3f 90       	pop	r3
    3806:	2f 90       	pop	r2
    3808:	08 95       	ret

0000380a <mc_line>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    380a:	2f 92       	push	r2
    380c:	3f 92       	push	r3
    380e:	4f 92       	push	r4
    3810:	5f 92       	push	r5
    3812:	6f 92       	push	r6
    3814:	7f 92       	push	r7
    3816:	8f 92       	push	r8
    3818:	9f 92       	push	r9
    381a:	af 92       	push	r10
    381c:	bf 92       	push	r11
    381e:	cf 92       	push	r12
    3820:	df 92       	push	r13
    3822:	ef 92       	push	r14
    3824:	ff 92       	push	r15
    3826:	0f 93       	push	r16
    3828:	1f 93       	push	r17
    382a:	df 93       	push	r29
    382c:	cf 93       	push	r28
    382e:	cd b7       	in	r28, 0x3d	; 61
    3830:	de b7       	in	r29, 0x3e	; 62
    3832:	6c 97       	sbiw	r28, 0x1c	; 28
    3834:	cd bf       	out	0x3d, r28	; 61
    3836:	de bf       	out	0x3e, r29	; 62
    3838:	2d 8b       	std	Y+21, r18	; 0x15
    383a:	3e 8b       	std	Y+22, r19	; 0x16
    383c:	4f 8b       	std	Y+23, r20	; 0x17
    383e:	58 8f       	std	Y+24, r21	; 0x18
    3840:	a9 8e       	std	Y+25, r10	; 0x19
    3842:	ba 8e       	std	Y+26, r11	; 0x1a
    3844:	cb 8e       	std	Y+27, r12	; 0x1b
    3846:	dc 8e       	std	Y+28, r13	; 0x1c
	mc.target[X_AXIS] = lround(x*CFG(X_AXIS).steps_per_mm);
    3848:	20 91 65 24 	lds	r18, 0x2465
    384c:	30 91 66 24 	lds	r19, 0x2466
    3850:	40 91 67 24 	lds	r20, 0x2467
    3854:	50 91 68 24 	lds	r21, 0x2468
    3858:	29 8b       	std	Y+17, r18	; 0x11
    385a:	3a 8b       	std	Y+18, r19	; 0x12
    385c:	4b 8b       	std	Y+19, r20	; 0x13
    385e:	5c 8b       	std	Y+20, r21	; 0x14
    3860:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    3864:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <lround>
    3868:	2b 01       	movw	r4, r22
    386a:	3c 01       	movw	r6, r24
    386c:	40 92 7f 21 	sts	0x217F, r4
    3870:	50 92 80 21 	sts	0x2180, r5
    3874:	60 92 81 21 	sts	0x2181, r6
    3878:	70 92 82 21 	sts	0x2182, r7
	mc.target[Y_AXIS] = lround(y*CFG(Y_AXIS).steps_per_mm);
    387c:	80 91 7d 24 	lds	r24, 0x247D
    3880:	90 91 7e 24 	lds	r25, 0x247E
    3884:	a0 91 7f 24 	lds	r26, 0x247F
    3888:	b0 91 80 24 	lds	r27, 0x2480
    388c:	8d 87       	std	Y+13, r24	; 0x0d
    388e:	9e 87       	std	Y+14, r25	; 0x0e
    3890:	af 87       	std	Y+15, r26	; 0x0f
    3892:	b8 8b       	std	Y+16, r27	; 0x10
    3894:	6d 89       	ldd	r22, Y+21	; 0x15
    3896:	7e 89       	ldd	r23, Y+22	; 0x16
    3898:	8f 89       	ldd	r24, Y+23	; 0x17
    389a:	98 8d       	ldd	r25, Y+24	; 0x18
    389c:	2d 85       	ldd	r18, Y+13	; 0x0d
    389e:	3e 85       	ldd	r19, Y+14	; 0x0e
    38a0:	4f 85       	ldd	r20, Y+15	; 0x0f
    38a2:	58 89       	ldd	r21, Y+16	; 0x10
    38a4:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    38a8:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <lround>
    38ac:	5b 01       	movw	r10, r22
    38ae:	6c 01       	movw	r12, r24
    38b0:	a0 92 83 21 	sts	0x2183, r10
    38b4:	b0 92 84 21 	sts	0x2184, r11
    38b8:	c0 92 85 21 	sts	0x2185, r12
    38bc:	d0 92 86 21 	sts	0x2186, r13
	mc.target[Z_AXIS] = lround(z*CFG(Z_AXIS).steps_per_mm); 
    38c0:	20 91 95 24 	lds	r18, 0x2495
    38c4:	30 91 96 24 	lds	r19, 0x2496
    38c8:	40 91 97 24 	lds	r20, 0x2497
    38cc:	50 91 98 24 	lds	r21, 0x2498
    38d0:	29 87       	std	Y+9, r18	; 0x09
    38d2:	3a 87       	std	Y+10, r19	; 0x0a
    38d4:	4b 87       	std	Y+11, r20	; 0x0b
    38d6:	5c 87       	std	Y+12, r21	; 0x0c
    38d8:	c8 01       	movw	r24, r16
    38da:	b7 01       	movw	r22, r14
    38dc:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    38e0:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <lround>
    38e4:	9b 01       	movw	r18, r22
    38e6:	ac 01       	movw	r20, r24
    38e8:	20 93 87 21 	sts	0x2187, r18
    38ec:	30 93 88 21 	sts	0x2188, r19
    38f0:	40 93 89 21 	sts	0x2189, r20
    38f4:	50 93 8a 21 	sts	0x218A, r21

	mc.steps[X_AXIS] = mc.target[X_AXIS]-mc.position[X_AXIS];
    38f8:	80 91 73 21 	lds	r24, 0x2173
    38fc:	90 91 74 21 	lds	r25, 0x2174
    3900:	a0 91 75 21 	lds	r26, 0x2175
    3904:	b0 91 76 21 	lds	r27, 0x2176
    3908:	83 01       	movw	r16, r6
    390a:	72 01       	movw	r14, r4
    390c:	e8 1a       	sub	r14, r24
    390e:	f9 0a       	sbc	r15, r25
    3910:	0a 0b       	sbc	r16, r26
    3912:	1b 0b       	sbc	r17, r27
    3914:	ed 82       	std	Y+5, r14	; 0x05
    3916:	fe 82       	std	Y+6, r15	; 0x06
    3918:	0f 83       	std	Y+7, r16	; 0x07
    391a:	18 87       	std	Y+8, r17	; 0x08
    391c:	e0 92 8b 21 	sts	0x218B, r14
    3920:	f0 92 8c 21 	sts	0x218C, r15
    3924:	00 93 8d 21 	sts	0x218D, r16
    3928:	10 93 8e 21 	sts	0x218E, r17
	mc.steps[Y_AXIS] = mc.target[Y_AXIS]-mc.position[Y_AXIS];
    392c:	80 91 77 21 	lds	r24, 0x2177
    3930:	90 91 78 21 	lds	r25, 0x2178
    3934:	a0 91 79 21 	lds	r26, 0x2179
    3938:	b0 91 7a 21 	lds	r27, 0x217A
    393c:	86 01       	movw	r16, r12
    393e:	75 01       	movw	r14, r10
    3940:	e8 1a       	sub	r14, r24
    3942:	f9 0a       	sbc	r15, r25
    3944:	0a 0b       	sbc	r16, r26
    3946:	1b 0b       	sbc	r17, r27
    3948:	e9 82       	std	Y+1, r14	; 0x01
    394a:	fa 82       	std	Y+2, r15	; 0x02
    394c:	0b 83       	std	Y+3, r16	; 0x03
    394e:	1c 83       	std	Y+4, r17	; 0x04
    3950:	e0 92 8f 21 	sts	0x218F, r14
    3954:	f0 92 90 21 	sts	0x2190, r15
    3958:	00 93 91 21 	sts	0x2191, r16
    395c:	10 93 92 21 	sts	0x2192, r17
	mc.steps[Z_AXIS] = mc.target[Z_AXIS]-mc.position[Z_AXIS];
    3960:	80 91 7b 21 	lds	r24, 0x217B
    3964:	90 91 7c 21 	lds	r25, 0x217C
    3968:	a0 91 7d 21 	lds	r26, 0x217D
    396c:	b0 91 7e 21 	lds	r27, 0x217E
    3970:	19 01       	movw	r2, r18
    3972:	2a 01       	movw	r4, r20
    3974:	28 1a       	sub	r2, r24
    3976:	39 0a       	sbc	r3, r25
    3978:	4a 0a       	sbc	r4, r26
    397a:	5b 0a       	sbc	r5, r27
    397c:	20 92 93 21 	sts	0x2193, r2
    3980:	30 92 94 21 	sts	0x2194, r3
    3984:	40 92 95 21 	sts	0x2195, r4
    3988:	50 92 96 21 	sts	0x2196, r5

	if (invert_feed_rate) {
    398c:	89 28       	or	r8, r9
    398e:	59 f0       	breq	.+22     	; 0x39a6 <mc_line+0x19c>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3990:	60 ec       	ldi	r22, 0xC0	; 192
    3992:	71 ee       	ldi	r23, 0xE1	; 225
    3994:	84 e6       	ldi	r24, 0x64	; 100
    3996:	9c e4       	ldi	r25, 0x4C	; 76
    3998:	29 8d       	ldd	r18, Y+25	; 0x19
    399a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    399c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    399e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    39a0:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    39a4:	4e c0       	rjmp	.+156    	; 0x3a42 <mc_line+0x238>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X_AXIS]/CFG(X_AXIS).steps_per_mm) + 
    39a6:	6d 81       	ldd	r22, Y+5	; 0x05
    39a8:	7e 81       	ldd	r23, Y+6	; 0x06
    39aa:	8f 81       	ldd	r24, Y+7	; 0x07
    39ac:	98 85       	ldd	r25, Y+8	; 0x08
    39ae:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    39b2:	29 89       	ldd	r18, Y+17	; 0x11
    39b4:	3a 89       	ldd	r19, Y+18	; 0x12
    39b6:	4b 89       	ldd	r20, Y+19	; 0x13
    39b8:	5c 89       	ldd	r21, Y+20	; 0x14
    39ba:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    39be:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <square>
    39c2:	3b 01       	movw	r6, r22
    39c4:	4c 01       	movw	r8, r24
    39c6:	69 81       	ldd	r22, Y+1	; 0x01
    39c8:	7a 81       	ldd	r23, Y+2	; 0x02
    39ca:	8b 81       	ldd	r24, Y+3	; 0x03
    39cc:	9c 81       	ldd	r25, Y+4	; 0x04
    39ce:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    39d2:	2d 85       	ldd	r18, Y+13	; 0x0d
    39d4:	3e 85       	ldd	r19, Y+14	; 0x0e
    39d6:	4f 85       	ldd	r20, Y+15	; 0x0f
    39d8:	58 89       	ldd	r21, Y+16	; 0x10
    39da:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    39de:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <square>
    39e2:	5b 01       	movw	r10, r22
    39e4:	6c 01       	movw	r12, r24
    39e6:	c2 01       	movw	r24, r4
    39e8:	b1 01       	movw	r22, r2
    39ea:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    39ee:	29 85       	ldd	r18, Y+9	; 0x09
    39f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    39f2:	4b 85       	ldd	r20, Y+11	; 0x0b
    39f4:	5c 85       	ldd	r21, Y+12	; 0x0c
    39f6:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    39fa:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <square>
    39fe:	7b 01       	movw	r14, r22
    3a00:	8c 01       	movw	r16, r24
    3a02:	c4 01       	movw	r24, r8
    3a04:	b3 01       	movw	r22, r6
    3a06:	a6 01       	movw	r20, r12
    3a08:	95 01       	movw	r18, r10
    3a0a:	0e 94 35 3b 	call	0x766a	; 0x766a <__addsf3>
    3a0e:	a8 01       	movw	r20, r16
    3a10:	97 01       	movw	r18, r14
    3a12:	0e 94 35 3b 	call	0x766a	; 0x766a <__addsf3>
    3a16:	0e 94 03 3f 	call	0x7e06	; 0x7e06 <sqrt>
    3a1a:	60 93 9b 21 	sts	0x219B, r22
    3a1e:	70 93 9c 21 	sts	0x219C, r23
    3a22:	80 93 9d 21 	sts	0x219D, r24
    3a26:	90 93 9e 21 	sts	0x219E, r25
							   square(mc.steps[Y_AXIS]/CFG(Y_AXIS).steps_per_mm) + 
							   square(mc.steps[Z_AXIS]/CFG(Z_AXIS).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3a2a:	29 8d       	ldd	r18, Y+25	; 0x19
    3a2c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3a2e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3a30:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3a32:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	34 e2       	ldi	r19, 0x24	; 36
    3a3a:	44 e7       	ldi	r20, 0x74	; 116
    3a3c:	59 e4       	ldi	r21, 0x49	; 73
    3a3e:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    3a42:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <lround>
    3a46:	60 93 97 21 	sts	0x2197, r22
    3a4a:	70 93 98 21 	sts	0x2198, r23
    3a4e:	80 93 99 21 	sts	0x2199, r24
    3a52:	90 93 9a 21 	sts	0x219A, r25
	}
    mv_queue_move_buffer(mc.steps[X_AXIS], mc.steps[Y_AXIS], mc.steps[Z_AXIS], mc.microseconds); 
    3a56:	a0 90 97 21 	lds	r10, 0x2197
    3a5a:	b0 90 98 21 	lds	r11, 0x2198
    3a5e:	c0 90 99 21 	lds	r12, 0x2199
    3a62:	d0 90 9a 21 	lds	r13, 0x219A
    3a66:	6d 81       	ldd	r22, Y+5	; 0x05
    3a68:	7e 81       	ldd	r23, Y+6	; 0x06
    3a6a:	8f 81       	ldd	r24, Y+7	; 0x07
    3a6c:	98 85       	ldd	r25, Y+8	; 0x08
    3a6e:	29 81       	ldd	r18, Y+1	; 0x01
    3a70:	3a 81       	ldd	r19, Y+2	; 0x02
    3a72:	4b 81       	ldd	r20, Y+3	; 0x03
    3a74:	5c 81       	ldd	r21, Y+4	; 0x04
    3a76:	82 01       	movw	r16, r4
    3a78:	71 01       	movw	r14, r2
    3a7a:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3a7e:	e3 e7       	ldi	r30, 0x73	; 115
    3a80:	f1 e2       	ldi	r31, 0x21	; 33
    3a82:	df 01       	movw	r26, r30
    3a84:	1c 96       	adiw	r26, 0x0c	; 12
    3a86:	8c e0       	ldi	r24, 0x0C	; 12
    3a88:	0d 90       	ld	r0, X+
    3a8a:	01 92       	st	Z+, r0
    3a8c:	81 50       	subi	r24, 0x01	; 1
    3a8e:	e1 f7       	brne	.-8      	; 0x3a88 <mc_line+0x27e>
	return (TG_OK);
}
    3a90:	80 e0       	ldi	r24, 0x00	; 0
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	6c 96       	adiw	r28, 0x1c	; 28
    3a96:	cd bf       	out	0x3d, r28	; 61
    3a98:	de bf       	out	0x3e, r29	; 62
    3a9a:	cf 91       	pop	r28
    3a9c:	df 91       	pop	r29
    3a9e:	1f 91       	pop	r17
    3aa0:	0f 91       	pop	r16
    3aa2:	ff 90       	pop	r15
    3aa4:	ef 90       	pop	r14
    3aa6:	df 90       	pop	r13
    3aa8:	cf 90       	pop	r12
    3aaa:	bf 90       	pop	r11
    3aac:	af 90       	pop	r10
    3aae:	9f 90       	pop	r9
    3ab0:	8f 90       	pop	r8
    3ab2:	7f 90       	pop	r7
    3ab4:	6f 90       	pop	r6
    3ab6:	5f 90       	pop	r5
    3ab8:	4f 90       	pop	r4
    3aba:	3f 90       	pop	r3
    3abc:	2f 90       	pop	r2
    3abe:	08 95       	ret

00003ac0 <mc_arc_continuation>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continuation() 
{
    3ac0:	8f 92       	push	r8
    3ac2:	9f 92       	push	r9
    3ac4:	af 92       	push	r10
    3ac6:	bf 92       	push	r11
    3ac8:	cf 92       	push	r12
    3aca:	df 92       	push	r13
    3acc:	ef 92       	push	r14
    3ace:	ff 92       	push	r15
    3ad0:	0f 93       	push	r16
    3ad2:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3ad4:	80 91 b4 24 	lds	r24, 0x24B4
    3ad8:	88 23       	and	r24, r24
    3ada:	19 f4       	brne	.+6      	; 0x3ae2 <mc_arc_continuation+0x22>
    3adc:	21 e0       	ldi	r18, 0x01	; 1
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	dd c0       	rjmp	.+442    	; 0x3c9c <mc_arc_continuation+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3ae2:	81 30       	cpi	r24, 0x01	; 1
    3ae4:	09 f0       	breq	.+2      	; 0x3ae8 <mc_arc_continuation+0x28>
    3ae6:	ca c0       	rjmp	.+404    	; 0x3c7c <mc_arc_continuation+0x1bc>
		ma.segment_counter=0;
    3ae8:	10 92 b7 24 	sts	0x24B7, r1
    3aec:	10 92 b8 24 	sts	0x24B8, r1
		ma.arc_state = MC_STATE_RUNNING;
    3af0:	82 e0       	ldi	r24, 0x02	; 2
    3af2:	80 93 b4 24 	sts	0x24B4, r24
    3af6:	c2 c0       	rjmp	.+388    	; 0x3c7c <mc_arc_continuation+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3af8:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <mv_test_move_buffer_full>
    3afc:	88 23       	and	r24, r24
    3afe:	19 f0       	breq	.+6      	; 0x3b06 <mc_arc_continuation+0x46>
    3b00:	22 e0       	ldi	r18, 0x02	; 2
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	cb c0       	rjmp	.+406    	; 0x3c9c <mc_arc_continuation+0x1dc>
			return (TG_CONTINUE);
		}
		ma.segment_counter++;
    3b06:	80 91 b7 24 	lds	r24, 0x24B7
    3b0a:	90 91 b8 24 	lds	r25, 0x24B8
    3b0e:	01 96       	adiw	r24, 0x01	; 1
    3b10:	80 93 b7 24 	sts	0x24B7, r24
    3b14:	90 93 b8 24 	sts	0x24B8, r25
		ma.theta += ma.theta_per_segment;
    3b18:	60 91 d9 24 	lds	r22, 0x24D9
    3b1c:	70 91 da 24 	lds	r23, 0x24DA
    3b20:	80 91 db 24 	lds	r24, 0x24DB
    3b24:	90 91 dc 24 	lds	r25, 0x24DC
    3b28:	20 91 e5 24 	lds	r18, 0x24E5
    3b2c:	30 91 e6 24 	lds	r19, 0x24E6
    3b30:	40 91 e7 24 	lds	r20, 0x24E7
    3b34:	50 91 e8 24 	lds	r21, 0x24E8
    3b38:	0e 94 35 3b 	call	0x766a	; 0x766a <__addsf3>
    3b3c:	7b 01       	movw	r14, r22
    3b3e:	8c 01       	movw	r16, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	d8 01       	movw	r26, r16
    3b44:	80 93 d9 24 	sts	0x24D9, r24
    3b48:	90 93 da 24 	sts	0x24DA, r25
    3b4c:	a0 93 db 24 	sts	0x24DB, r26
    3b50:	b0 93 dc 24 	sts	0x24DC, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3b54:	b7 01       	movw	r22, r14
    3b56:	c8 01       	movw	r24, r16
    3b58:	0e 94 f9 3e 	call	0x7df2	; 0x7df2 <sin>
    3b5c:	80 90 dd 24 	lds	r8, 0x24DD
    3b60:	90 90 de 24 	lds	r9, 0x24DE
    3b64:	a0 90 df 24 	lds	r10, 0x24DF
    3b68:	b0 90 e0 24 	lds	r11, 0x24E0
    3b6c:	c0 90 bb 24 	lds	r12, 0x24BB
    3b70:	d0 90 bc 24 	lds	r13, 0x24BC
    3b74:	cc 0c       	add	r12, r12
    3b76:	dd 1c       	adc	r13, r13
    3b78:	cc 0c       	add	r12, r12
    3b7a:	dd 1c       	adc	r13, r13
    3b7c:	24 eb       	ldi	r18, 0xB4	; 180
    3b7e:	34 e2       	ldi	r19, 0x24	; 36
    3b80:	c2 0e       	add	r12, r18
    3b82:	d3 1e       	adc	r13, r19
    3b84:	a5 01       	movw	r20, r10
    3b86:	94 01       	movw	r18, r8
    3b88:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    3b8c:	9b 01       	movw	r18, r22
    3b8e:	ac 01       	movw	r20, r24
    3b90:	60 91 d1 24 	lds	r22, 0x24D1
    3b94:	70 91 d2 24 	lds	r23, 0x24D2
    3b98:	80 91 d3 24 	lds	r24, 0x24D3
    3b9c:	90 91 d4 24 	lds	r25, 0x24D4
    3ba0:	0e 94 35 3b 	call	0x766a	; 0x766a <__addsf3>
    3ba4:	f6 01       	movw	r30, r12
    3ba6:	65 87       	std	Z+13, r22	; 0x0d
    3ba8:	76 87       	std	Z+14, r23	; 0x0e
    3baa:	87 87       	std	Z+15, r24	; 0x0f
    3bac:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3bae:	b7 01       	movw	r22, r14
    3bb0:	c8 01       	movw	r24, r16
    3bb2:	0e 94 d8 3b 	call	0x77b0	; 0x77b0 <cos>
    3bb6:	00 91 bd 24 	lds	r16, 0x24BD
    3bba:	10 91 be 24 	lds	r17, 0x24BE
    3bbe:	00 0f       	add	r16, r16
    3bc0:	11 1f       	adc	r17, r17
    3bc2:	00 0f       	add	r16, r16
    3bc4:	11 1f       	adc	r17, r17
    3bc6:	0c 54       	subi	r16, 0x4C	; 76
    3bc8:	1b 4d       	sbci	r17, 0xDB	; 219
    3bca:	a5 01       	movw	r20, r10
    3bcc:	94 01       	movw	r18, r8
    3bce:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    3bd2:	9b 01       	movw	r18, r22
    3bd4:	ac 01       	movw	r20, r24
    3bd6:	60 91 d5 24 	lds	r22, 0x24D5
    3bda:	70 91 d6 24 	lds	r23, 0x24D6
    3bde:	80 91 d7 24 	lds	r24, 0x24D7
    3be2:	90 91 d8 24 	lds	r25, 0x24D8
    3be6:	0e 94 35 3b 	call	0x766a	; 0x766a <__addsf3>
    3bea:	f8 01       	movw	r30, r16
    3bec:	65 87       	std	Z+13, r22	; 0x0d
    3bee:	76 87       	std	Z+14, r23	; 0x0e
    3bf0:	87 87       	std	Z+15, r24	; 0x0f
    3bf2:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3bf4:	00 91 bf 24 	lds	r16, 0x24BF
    3bf8:	10 91 c0 24 	lds	r17, 0x24C0
    3bfc:	00 0f       	add	r16, r16
    3bfe:	11 1f       	adc	r17, r17
    3c00:	00 0f       	add	r16, r16
    3c02:	11 1f       	adc	r17, r17
    3c04:	0c 54       	subi	r16, 0x4C	; 76
    3c06:	1b 4d       	sbci	r17, 0xDB	; 219
    3c08:	f8 01       	movw	r30, r16
    3c0a:	65 85       	ldd	r22, Z+13	; 0x0d
    3c0c:	76 85       	ldd	r23, Z+14	; 0x0e
    3c0e:	87 85       	ldd	r24, Z+15	; 0x0f
    3c10:	90 89       	ldd	r25, Z+16	; 0x10
    3c12:	20 91 e9 24 	lds	r18, 0x24E9
    3c16:	30 91 ea 24 	lds	r19, 0x24EA
    3c1a:	40 91 eb 24 	lds	r20, 0x24EB
    3c1e:	50 91 ec 24 	lds	r21, 0x24EC
    3c22:	0e 94 35 3b 	call	0x766a	; 0x766a <__addsf3>
    3c26:	f8 01       	movw	r30, r16
    3c28:	65 87       	std	Z+13, r22	; 0x0d
    3c2a:	76 87       	std	Z+14, r23	; 0x0e
    3c2c:	87 87       	std	Z+15, r24	; 0x0f
    3c2e:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X_AXIS], 
    3c30:	60 91 c1 24 	lds	r22, 0x24C1
    3c34:	70 91 c2 24 	lds	r23, 0x24C2
    3c38:	80 91 c3 24 	lds	r24, 0x24C3
    3c3c:	90 91 c4 24 	lds	r25, 0x24C4
    3c40:	20 91 c5 24 	lds	r18, 0x24C5
    3c44:	30 91 c6 24 	lds	r19, 0x24C6
    3c48:	40 91 c7 24 	lds	r20, 0x24C7
    3c4c:	50 91 c8 24 	lds	r21, 0x24C8
    3c50:	e0 90 c9 24 	lds	r14, 0x24C9
    3c54:	f0 90 ca 24 	lds	r15, 0x24CA
    3c58:	00 91 cb 24 	lds	r16, 0x24CB
    3c5c:	10 91 cc 24 	lds	r17, 0x24CC
    3c60:	a0 90 e1 24 	lds	r10, 0x24E1
    3c64:	b0 90 e2 24 	lds	r11, 0x24E2
    3c68:	c0 90 e3 24 	lds	r12, 0x24E3
    3c6c:	d0 90 e4 24 	lds	r13, 0x24E4
    3c70:	80 90 b9 24 	lds	r8, 0x24B9
    3c74:	90 90 ba 24 	lds	r9, 0x24BA
    3c78:	0e 94 05 1c 	call	0x380a	; 0x380a <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3c7c:	20 91 b7 24 	lds	r18, 0x24B7
    3c80:	30 91 b8 24 	lds	r19, 0x24B8
    3c84:	80 91 b5 24 	lds	r24, 0x24B5
    3c88:	90 91 b6 24 	lds	r25, 0x24B6
    3c8c:	82 17       	cp	r24, r18
    3c8e:	93 07       	cpc	r25, r19
    3c90:	0c f0       	brlt	.+2      	; 0x3c94 <mc_arc_continuation+0x1d4>
    3c92:	32 cf       	rjmp	.-412    	; 0x3af8 <mc_arc_continuation+0x38>
				ma.dtarget[Y_AXIS], 
				ma.dtarget[Z_AXIS], 
				ma.feed_rate, 
				ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3c94:	10 92 b4 24 	sts	0x24B4, r1
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3c9c:	c9 01       	movw	r24, r18
    3c9e:	1f 91       	pop	r17
    3ca0:	0f 91       	pop	r16
    3ca2:	ff 90       	pop	r15
    3ca4:	ef 90       	pop	r14
    3ca6:	df 90       	pop	r13
    3ca8:	cf 90       	pop	r12
    3caa:	bf 90       	pop	r11
    3cac:	af 90       	pop	r10
    3cae:	9f 90       	pop	r9
    3cb0:	8f 90       	pop	r8
    3cb2:	08 95       	ret

00003cb4 <mc_arc_nonblock>:

int mc_arc_nonblock(double theta, double angular_travel, 
					double radius, double linear_travel, 
					int axis_1, int axis_2, int axis_linear, 
					double feed_rate, int invert_feed_rate)
{
    3cb4:	2f 92       	push	r2
    3cb6:	3f 92       	push	r3
    3cb8:	4f 92       	push	r4
    3cba:	5f 92       	push	r5
    3cbc:	6f 92       	push	r6
    3cbe:	7f 92       	push	r7
    3cc0:	8f 92       	push	r8
    3cc2:	9f 92       	push	r9
    3cc4:	af 92       	push	r10
    3cc6:	bf 92       	push	r11
    3cc8:	cf 92       	push	r12
    3cca:	df 92       	push	r13
    3ccc:	ef 92       	push	r14
    3cce:	ff 92       	push	r15
    3cd0:	0f 93       	push	r16
    3cd2:	1f 93       	push	r17
    3cd4:	df 93       	push	r29
    3cd6:	cf 93       	push	r28
    3cd8:	cd b7       	in	r28, 0x3d	; 61
    3cda:	de b7       	in	r29, 0x3e	; 62
    3cdc:	28 97       	sbiw	r28, 0x08	; 8
    3cde:	cd bf       	out	0x3d, r28	; 61
    3ce0:	de bf       	out	0x3e, r29	; 62
    3ce2:	69 83       	std	Y+1, r22	; 0x01
    3ce4:	7a 83       	std	Y+2, r23	; 0x02
    3ce6:	8b 83       	std	Y+3, r24	; 0x03
    3ce8:	9c 83       	std	Y+4, r25	; 0x04
    3cea:	29 01       	movw	r4, r18
    3cec:	3a 01       	movw	r6, r20
    3cee:	ed 82       	std	Y+5, r14	; 0x05
    3cf0:	fe 82       	std	Y+6, r15	; 0x06
    3cf2:	0f 83       	std	Y+7, r16	; 0x07
    3cf4:	18 87       	std	Y+8, r17	; 0x08
    3cf6:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3cf8:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3cfa:	60 93 d9 24 	sts	0x24D9, r22
    3cfe:	70 93 da 24 	sts	0x24DA, r23
    3d02:	80 93 db 24 	sts	0x24DB, r24
    3d06:	90 93 dc 24 	sts	0x24DC, r25
	ma.radius = radius;
    3d0a:	e0 92 dd 24 	sts	0x24DD, r14
    3d0e:	f0 92 de 24 	sts	0x24DE, r15
    3d12:	00 93 df 24 	sts	0x24DF, r16
    3d16:	10 93 e0 24 	sts	0x24E0, r17
	ma.angular_travel = angular_travel;
    3d1a:	20 93 ed 24 	sts	0x24ED, r18
    3d1e:	30 93 ee 24 	sts	0x24EE, r19
    3d22:	40 93 ef 24 	sts	0x24EF, r20
    3d26:	50 93 f0 24 	sts	0x24F0, r21
	ma.linear_travel = linear_travel;
    3d2a:	a0 92 f1 24 	sts	0x24F1, r10
    3d2e:	b0 92 f2 24 	sts	0x24F2, r11
    3d32:	c0 92 f3 24 	sts	0x24F3, r12
    3d36:	d0 92 f4 24 	sts	0x24F4, r13
	ma.feed_rate = feed_rate;
    3d3a:	8a a1       	ldd	r24, Y+34	; 0x22
    3d3c:	9b a1       	ldd	r25, Y+35	; 0x23
    3d3e:	ac a1       	ldd	r26, Y+36	; 0x24
    3d40:	bd a1       	ldd	r27, Y+37	; 0x25
    3d42:	80 93 e1 24 	sts	0x24E1, r24
    3d46:	90 93 e2 24 	sts	0x24E2, r25
    3d4a:	a0 93 e3 24 	sts	0x24E3, r26
    3d4e:	b0 93 e4 24 	sts	0x24E4, r27
	ma.invert_feed_rate = invert_feed_rate;
    3d52:	ae a1       	ldd	r26, Y+38	; 0x26
    3d54:	bf a1       	ldd	r27, Y+39	; 0x27
    3d56:	a0 93 b9 24 	sts	0x24B9, r26
    3d5a:	b0 93 ba 24 	sts	0x24BA, r27
	ma.axis_1 = axis_1;
    3d5e:	80 92 bb 24 	sts	0x24BB, r8
    3d62:	90 92 bc 24 	sts	0x24BC, r9
	ma.axis_2 = axis_2;
    3d66:	20 92 bd 24 	sts	0x24BD, r2
    3d6a:	30 92 be 24 	sts	0x24BE, r3
	ma.axis_linear = axis_linear;
    3d6e:	e8 a1       	ldd	r30, Y+32	; 0x20
    3d70:	f9 a1       	ldd	r31, Y+33	; 0x21
    3d72:	e0 93 bf 24 	sts	0x24BF, r30
    3d76:	f0 93 c0 24 	sts	0x24C0, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3d7a:	ca 01       	movw	r24, r20
    3d7c:	b9 01       	movw	r22, r18
    3d7e:	a8 01       	movw	r20, r16
    3d80:	97 01       	movw	r18, r14
    3d82:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    3d86:	7b 01       	movw	r14, r22
    3d88:	8c 01       	movw	r16, r24
    3d8a:	c6 01       	movw	r24, r12
    3d8c:	b5 01       	movw	r22, r10
    3d8e:	0e 94 43 3c 	call	0x7886	; 0x7886 <__fixsfsi>
    3d92:	97 ff       	sbrs	r25, 7
    3d94:	07 c0       	rjmp	.+14     	; 0x3da4 <mc_arc_nonblock+0xf0>
    3d96:	90 95       	com	r25
    3d98:	80 95       	com	r24
    3d9a:	70 95       	com	r23
    3d9c:	61 95       	neg	r22
    3d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3da0:	8f 4f       	sbci	r24, 0xFF	; 255
    3da2:	9f 4f       	sbci	r25, 0xFF	; 255
    3da4:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    3da8:	9b 01       	movw	r18, r22
    3daa:	ac 01       	movw	r20, r24
    3dac:	c8 01       	movw	r24, r16
    3dae:	b7 01       	movw	r22, r14
    3db0:	0e 94 d1 3d 	call	0x7ba2	; 0x7ba2 <hypot>
    3db4:	7b 01       	movw	r14, r22
    3db6:	8c 01       	movw	r16, r24
    3db8:	60 93 cd 24 	sts	0x24CD, r22
    3dbc:	70 93 ce 24 	sts	0x24CE, r23
    3dc0:	80 93 cf 24 	sts	0x24CF, r24
    3dc4:	90 93 d0 24 	sts	0x24D0, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3dc8:	2a e0       	ldi	r18, 0x0A	; 10
    3dca:	37 ed       	ldi	r19, 0xD7	; 215
    3dcc:	43 e2       	ldi	r20, 0x23	; 35
    3dce:	5c e3       	ldi	r21, 0x3C	; 60
    3dd0:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <__cmpsf2>
    3dd4:	88 23       	and	r24, r24
    3dd6:	1c f4       	brge	.+6      	; 0x3dde <mc_arc_nonblock+0x12a>
    3dd8:	2f e0       	ldi	r18, 0x0F	; 15
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	fb c0       	rjmp	.+502    	; 0x3fd4 <mc_arc_nonblock+0x320>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3dde:	c8 01       	movw	r24, r16
    3de0:	b7 01       	movw	r22, r14
    3de2:	20 91 46 24 	lds	r18, 0x2446
    3de6:	30 91 47 24 	lds	r19, 0x2447
    3dea:	40 91 48 24 	lds	r20, 0x2448
    3dee:	50 91 49 24 	lds	r21, 0x2449
    3df2:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    3df6:	0e 94 c1 3b 	call	0x7782	; 0x7782 <ceil>
    3dfa:	0e 94 43 3c 	call	0x7886	; 0x7886 <__fixsfsi>
    3dfe:	8b 01       	movw	r16, r22
    3e00:	60 93 b5 24 	sts	0x24B5, r22
    3e04:	70 93 b6 24 	sts	0x24B6, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    3e08:	8e a1       	ldd	r24, Y+38	; 0x26
    3e0a:	9f a1       	ldd	r25, Y+39	; 0x27
    3e0c:	89 2b       	or	r24, r25
    3e0e:	b9 f0       	breq	.+46     	; 0x3e3e <mc_arc_nonblock+0x18a>
		ma.feed_rate *= ma.segments; 
    3e10:	b8 01       	movw	r22, r16
    3e12:	88 27       	eor	r24, r24
    3e14:	77 fd       	sbrc	r23, 7
    3e16:	80 95       	com	r24
    3e18:	98 2f       	mov	r25, r24
    3e1a:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    3e1e:	9b 01       	movw	r18, r22
    3e20:	ac 01       	movw	r20, r24
    3e22:	6a a1       	ldd	r22, Y+34	; 0x22
    3e24:	7b a1       	ldd	r23, Y+35	; 0x23
    3e26:	8c a1       	ldd	r24, Y+36	; 0x24
    3e28:	9d a1       	ldd	r25, Y+37	; 0x25
    3e2a:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    3e2e:	60 93 e1 24 	sts	0x24E1, r22
    3e32:	70 93 e2 24 	sts	0x24E2, r23
    3e36:	80 93 e3 24 	sts	0x24E3, r24
    3e3a:	90 93 e4 24 	sts	0x24E4, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    3e3e:	b8 01       	movw	r22, r16
    3e40:	88 27       	eor	r24, r24
    3e42:	77 fd       	sbrc	r23, 7
    3e44:	80 95       	com	r24
    3e46:	98 2f       	mov	r25, r24
    3e48:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    3e4c:	7b 01       	movw	r14, r22
    3e4e:	8c 01       	movw	r16, r24
    3e50:	c3 01       	movw	r24, r6
    3e52:	b2 01       	movw	r22, r4
    3e54:	a8 01       	movw	r20, r16
    3e56:	97 01       	movw	r18, r14
    3e58:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    3e5c:	60 93 e5 24 	sts	0x24E5, r22
    3e60:	70 93 e6 24 	sts	0x24E6, r23
    3e64:	80 93 e7 24 	sts	0x24E7, r24
    3e68:	90 93 e8 24 	sts	0x24E8, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    3e6c:	c6 01       	movw	r24, r12
    3e6e:	b5 01       	movw	r22, r10
    3e70:	a8 01       	movw	r20, r16
    3e72:	97 01       	movw	r18, r14
    3e74:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    3e78:	60 93 e9 24 	sts	0x24E9, r22
    3e7c:	70 93 ea 24 	sts	0x24EA, r23
    3e80:	80 93 eb 24 	sts	0x24EB, r24
    3e84:	90 93 ec 24 	sts	0x24EC, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    3e88:	69 81       	ldd	r22, Y+1	; 0x01
    3e8a:	7a 81       	ldd	r23, Y+2	; 0x02
    3e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e90:	0e 94 f9 3e 	call	0x7df2	; 0x7df2 <sin>
    3e94:	5b 01       	movw	r10, r22
    3e96:	6c 01       	movw	r12, r24
    3e98:	f4 01       	movw	r30, r8
    3e9a:	ee 0f       	add	r30, r30
    3e9c:	ff 1f       	adc	r31, r31
    3e9e:	ee 0f       	add	r30, r30
    3ea0:	ff 1f       	adc	r31, r31
    3ea2:	ee 58       	subi	r30, 0x8E	; 142
    3ea4:	fe 4d       	sbci	r31, 0xDE	; 222
    3ea6:	61 81       	ldd	r22, Z+1	; 0x01
    3ea8:	72 81       	ldd	r23, Z+2	; 0x02
    3eaa:	83 81       	ldd	r24, Z+3	; 0x03
    3eac:	94 81       	ldd	r25, Z+4	; 0x04
    3eae:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    3eb2:	f4 01       	movw	r30, r8
    3eb4:	ee 0f       	add	r30, r30
    3eb6:	ff 1f       	adc	r31, r31
    3eb8:	e8 0d       	add	r30, r8
    3eba:	f9 1d       	adc	r31, r9
    3ebc:	13 e0       	ldi	r17, 0x03	; 3
    3ebe:	ee 0f       	add	r30, r30
    3ec0:	ff 1f       	adc	r31, r31
    3ec2:	1a 95       	dec	r17
    3ec4:	e1 f7       	brne	.-8      	; 0x3ebe <mc_arc_nonblock+0x20a>
    3ec6:	ec 5b       	subi	r30, 0xBC	; 188
    3ec8:	fb 4d       	sbci	r31, 0xDB	; 219
    3eca:	21 a1       	ldd	r18, Z+33	; 0x21
    3ecc:	32 a1       	ldd	r19, Z+34	; 0x22
    3ece:	43 a1       	ldd	r20, Z+35	; 0x23
    3ed0:	54 a1       	ldd	r21, Z+36	; 0x24
    3ed2:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    3ed6:	7b 01       	movw	r14, r22
    3ed8:	8c 01       	movw	r16, r24
    3eda:	c6 01       	movw	r24, r12
    3edc:	b5 01       	movw	r22, r10
    3ede:	2d 81       	ldd	r18, Y+5	; 0x05
    3ee0:	3e 81       	ldd	r19, Y+6	; 0x06
    3ee2:	4f 81       	ldd	r20, Y+7	; 0x07
    3ee4:	58 85       	ldd	r21, Y+8	; 0x08
    3ee6:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    3eea:	9b 01       	movw	r18, r22
    3eec:	ac 01       	movw	r20, r24
    3eee:	c8 01       	movw	r24, r16
    3ef0:	b7 01       	movw	r22, r14
    3ef2:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    3ef6:	60 93 d1 24 	sts	0x24D1, r22
    3efa:	70 93 d2 24 	sts	0x24D2, r23
    3efe:	80 93 d3 24 	sts	0x24D3, r24
    3f02:	90 93 d4 24 	sts	0x24D4, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    3f06:	69 81       	ldd	r22, Y+1	; 0x01
    3f08:	7a 81       	ldd	r23, Y+2	; 0x02
    3f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f0e:	0e 94 d8 3b 	call	0x77b0	; 0x77b0 <cos>
    3f12:	5b 01       	movw	r10, r22
    3f14:	6c 01       	movw	r12, r24
    3f16:	f1 01       	movw	r30, r2
    3f18:	ee 0f       	add	r30, r30
    3f1a:	ff 1f       	adc	r31, r31
    3f1c:	ee 0f       	add	r30, r30
    3f1e:	ff 1f       	adc	r31, r31
    3f20:	ee 58       	subi	r30, 0x8E	; 142
    3f22:	fe 4d       	sbci	r31, 0xDE	; 222
    3f24:	61 81       	ldd	r22, Z+1	; 0x01
    3f26:	72 81       	ldd	r23, Z+2	; 0x02
    3f28:	83 81       	ldd	r24, Z+3	; 0x03
    3f2a:	94 81       	ldd	r25, Z+4	; 0x04
    3f2c:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    3f30:	f1 01       	movw	r30, r2
    3f32:	ee 0f       	add	r30, r30
    3f34:	ff 1f       	adc	r31, r31
    3f36:	e2 0d       	add	r30, r2
    3f38:	f3 1d       	adc	r31, r3
    3f3a:	53 e0       	ldi	r21, 0x03	; 3
    3f3c:	ee 0f       	add	r30, r30
    3f3e:	ff 1f       	adc	r31, r31
    3f40:	5a 95       	dec	r21
    3f42:	e1 f7       	brne	.-8      	; 0x3f3c <mc_arc_nonblock+0x288>
    3f44:	ec 5b       	subi	r30, 0xBC	; 188
    3f46:	fb 4d       	sbci	r31, 0xDB	; 219
    3f48:	21 a1       	ldd	r18, Z+33	; 0x21
    3f4a:	32 a1       	ldd	r19, Z+34	; 0x22
    3f4c:	43 a1       	ldd	r20, Z+35	; 0x23
    3f4e:	54 a1       	ldd	r21, Z+36	; 0x24
    3f50:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    3f54:	7b 01       	movw	r14, r22
    3f56:	8c 01       	movw	r16, r24
    3f58:	c6 01       	movw	r24, r12
    3f5a:	b5 01       	movw	r22, r10
    3f5c:	2d 81       	ldd	r18, Y+5	; 0x05
    3f5e:	3e 81       	ldd	r19, Y+6	; 0x06
    3f60:	4f 81       	ldd	r20, Y+7	; 0x07
    3f62:	58 85       	ldd	r21, Y+8	; 0x08
    3f64:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    3f68:	9b 01       	movw	r18, r22
    3f6a:	ac 01       	movw	r20, r24
    3f6c:	c8 01       	movw	r24, r16
    3f6e:	b7 01       	movw	r22, r14
    3f70:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    3f74:	60 93 d5 24 	sts	0x24D5, r22
    3f78:	70 93 d6 24 	sts	0x24D6, r23
    3f7c:	80 93 d7 24 	sts	0x24D7, r24
    3f80:	90 93 d8 24 	sts	0x24D8, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
    3f84:	e8 a1       	ldd	r30, Y+32	; 0x20
    3f86:	f9 a1       	ldd	r31, Y+33	; 0x21
    3f88:	ee 0f       	add	r30, r30
    3f8a:	ff 1f       	adc	r31, r31
    3f8c:	ee 0f       	add	r30, r30
    3f8e:	ff 1f       	adc	r31, r31
    3f90:	8f 01       	movw	r16, r30
    3f92:	0c 54       	subi	r16, 0x4C	; 76
    3f94:	1b 4d       	sbci	r17, 0xDB	; 219
    3f96:	ee 58       	subi	r30, 0x8E	; 142
    3f98:	fe 4d       	sbci	r31, 0xDE	; 222
    3f9a:	61 81       	ldd	r22, Z+1	; 0x01
    3f9c:	72 81       	ldd	r23, Z+2	; 0x02
    3f9e:	83 81       	ldd	r24, Z+3	; 0x03
    3fa0:	94 81       	ldd	r25, Z+4	; 0x04
    3fa2:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    3fa6:	20 91 95 24 	lds	r18, 0x2495
    3faa:	30 91 96 24 	lds	r19, 0x2496
    3fae:	40 91 97 24 	lds	r20, 0x2497
    3fb2:	50 91 98 24 	lds	r21, 0x2498
    3fb6:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    3fba:	d8 01       	movw	r26, r16
    3fbc:	1d 96       	adiw	r26, 0x0d	; 13
    3fbe:	6d 93       	st	X+, r22
    3fc0:	7d 93       	st	X+, r23
    3fc2:	8d 93       	st	X+, r24
    3fc4:	9c 93       	st	X, r25
    3fc6:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	80 93 b4 24 	sts	0x24B4, r24
	return (mc_arc_continuation());
    3fce:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <mc_arc_continuation>
    3fd2:	9c 01       	movw	r18, r24
}
    3fd4:	c9 01       	movw	r24, r18
    3fd6:	28 96       	adiw	r28, 0x08	; 8
    3fd8:	cd bf       	out	0x3d, r28	; 61
    3fda:	de bf       	out	0x3e, r29	; 62
    3fdc:	cf 91       	pop	r28
    3fde:	df 91       	pop	r29
    3fe0:	1f 91       	pop	r17
    3fe2:	0f 91       	pop	r16
    3fe4:	ff 90       	pop	r15
    3fe6:	ef 90       	pop	r14
    3fe8:	df 90       	pop	r13
    3fea:	cf 90       	pop	r12
    3fec:	bf 90       	pop	r11
    3fee:	af 90       	pop	r10
    3ff0:	9f 90       	pop	r9
    3ff2:	8f 90       	pop	r8
    3ff4:	7f 90       	pop	r7
    3ff6:	6f 90       	pop	r6
    3ff8:	5f 90       	pop	r5
    3ffa:	4f 90       	pop	r4
    3ffc:	3f 90       	pop	r3
    3ffe:	2f 90       	pop	r2
    4000:	08 95       	ret

00004002 <mc_arc>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    4002:	2f 92       	push	r2
    4004:	3f 92       	push	r3
    4006:	4f 92       	push	r4
    4008:	5f 92       	push	r5
    400a:	6f 92       	push	r6
    400c:	7f 92       	push	r7
    400e:	8f 92       	push	r8
    4010:	9f 92       	push	r9
    4012:	af 92       	push	r10
    4014:	bf 92       	push	r11
    4016:	cf 92       	push	r12
    4018:	df 92       	push	r13
    401a:	ef 92       	push	r14
    401c:	ff 92       	push	r15
    401e:	0f 93       	push	r16
    4020:	1f 93       	push	r17
    4022:	df 93       	push	r29
    4024:	cf 93       	push	r28
    4026:	cd b7       	in	r28, 0x3d	; 61
    4028:	de b7       	in	r29, 0x3e	; 62
    402a:	28 97       	sbiw	r28, 0x08	; 8
    402c:	cd bf       	out	0x3d, r28	; 61
    402e:	de bf       	out	0x3e, r29	; 62
    4030:	69 83       	std	Y+1, r22	; 0x01
    4032:	7a 83       	std	Y+2, r23	; 0x02
    4034:	8b 83       	std	Y+3, r24	; 0x03
    4036:	9c 83       	std	Y+4, r25	; 0x04
    4038:	29 01       	movw	r4, r18
    403a:	3a 01       	movw	r6, r20
    403c:	ed 82       	std	Y+5, r14	; 0x05
    403e:	fe 82       	std	Y+6, r15	; 0x06
    4040:	0f 83       	std	Y+7, r16	; 0x07
    4042:	18 87       	std	Y+8, r17	; 0x08
    4044:	2e 8c       	ldd	r2, Y+30	; 0x1e
    4046:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    4048:	60 93 d9 24 	sts	0x24D9, r22
    404c:	70 93 da 24 	sts	0x24DA, r23
    4050:	80 93 db 24 	sts	0x24DB, r24
    4054:	90 93 dc 24 	sts	0x24DC, r25
	ma.radius = radius;
    4058:	e0 92 dd 24 	sts	0x24DD, r14
    405c:	f0 92 de 24 	sts	0x24DE, r15
    4060:	00 93 df 24 	sts	0x24DF, r16
    4064:	10 93 e0 24 	sts	0x24E0, r17
	ma.angular_travel = angular_travel;
    4068:	20 93 ed 24 	sts	0x24ED, r18
    406c:	30 93 ee 24 	sts	0x24EE, r19
    4070:	40 93 ef 24 	sts	0x24EF, r20
    4074:	50 93 f0 24 	sts	0x24F0, r21
	ma.linear_travel = linear_travel;
    4078:	a0 92 f1 24 	sts	0x24F1, r10
    407c:	b0 92 f2 24 	sts	0x24F2, r11
    4080:	c0 92 f3 24 	sts	0x24F3, r12
    4084:	d0 92 f4 24 	sts	0x24F4, r13
	ma.feed_rate = feed_rate;
    4088:	8a a1       	ldd	r24, Y+34	; 0x22
    408a:	9b a1       	ldd	r25, Y+35	; 0x23
    408c:	ac a1       	ldd	r26, Y+36	; 0x24
    408e:	bd a1       	ldd	r27, Y+37	; 0x25
    4090:	80 93 e1 24 	sts	0x24E1, r24
    4094:	90 93 e2 24 	sts	0x24E2, r25
    4098:	a0 93 e3 24 	sts	0x24E3, r26
    409c:	b0 93 e4 24 	sts	0x24E4, r27
	ma.invert_feed_rate = invert_feed_rate;
    40a0:	ae a1       	ldd	r26, Y+38	; 0x26
    40a2:	bf a1       	ldd	r27, Y+39	; 0x27
    40a4:	a0 93 b9 24 	sts	0x24B9, r26
    40a8:	b0 93 ba 24 	sts	0x24BA, r27
	ma.axis_1 = axis_1;
    40ac:	80 92 bb 24 	sts	0x24BB, r8
    40b0:	90 92 bc 24 	sts	0x24BC, r9
	ma.axis_2 = axis_2;
    40b4:	20 92 bd 24 	sts	0x24BD, r2
    40b8:	30 92 be 24 	sts	0x24BE, r3
	ma.axis_linear = axis_linear;
    40bc:	e8 a1       	ldd	r30, Y+32	; 0x20
    40be:	f9 a1       	ldd	r31, Y+33	; 0x21
    40c0:	e0 93 bf 24 	sts	0x24BF, r30
    40c4:	f0 93 c0 24 	sts	0x24C0, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    40c8:	ca 01       	movw	r24, r20
    40ca:	b9 01       	movw	r22, r18
    40cc:	a8 01       	movw	r20, r16
    40ce:	97 01       	movw	r18, r14
    40d0:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    40d4:	7b 01       	movw	r14, r22
    40d6:	8c 01       	movw	r16, r24
    40d8:	c6 01       	movw	r24, r12
    40da:	b5 01       	movw	r22, r10
    40dc:	0e 94 43 3c 	call	0x7886	; 0x7886 <__fixsfsi>
    40e0:	97 ff       	sbrs	r25, 7
    40e2:	07 c0       	rjmp	.+14     	; 0x40f2 <mc_arc+0xf0>
    40e4:	90 95       	com	r25
    40e6:	80 95       	com	r24
    40e8:	70 95       	com	r23
    40ea:	61 95       	neg	r22
    40ec:	7f 4f       	sbci	r23, 0xFF	; 255
    40ee:	8f 4f       	sbci	r24, 0xFF	; 255
    40f0:	9f 4f       	sbci	r25, 0xFF	; 255
    40f2:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    40f6:	9b 01       	movw	r18, r22
    40f8:	ac 01       	movw	r20, r24
    40fa:	c8 01       	movw	r24, r16
    40fc:	b7 01       	movw	r22, r14
    40fe:	0e 94 d1 3d 	call	0x7ba2	; 0x7ba2 <hypot>
    4102:	7b 01       	movw	r14, r22
    4104:	8c 01       	movw	r16, r24
    4106:	60 93 cd 24 	sts	0x24CD, r22
    410a:	70 93 ce 24 	sts	0x24CE, r23
    410e:	80 93 cf 24 	sts	0x24CF, r24
    4112:	90 93 d0 24 	sts	0x24D0, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    4116:	2a e0       	ldi	r18, 0x0A	; 10
    4118:	37 ed       	ldi	r19, 0xD7	; 215
    411a:	43 e2       	ldi	r20, 0x23	; 35
    411c:	5c e3       	ldi	r21, 0x3C	; 60
    411e:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <__cmpsf2>
    4122:	88 23       	and	r24, r24
    4124:	1c f4       	brge	.+6      	; 0x412c <mc_arc+0x12a>
    4126:	2f e0       	ldi	r18, 0x0F	; 15
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	c7 c1       	rjmp	.+910    	; 0x44ba <mc_arc+0x4b8>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    412c:	c8 01       	movw	r24, r16
    412e:	b7 01       	movw	r22, r14
    4130:	20 91 46 24 	lds	r18, 0x2446
    4134:	30 91 47 24 	lds	r19, 0x2447
    4138:	40 91 48 24 	lds	r20, 0x2448
    413c:	50 91 49 24 	lds	r21, 0x2449
    4140:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    4144:	0e 94 c1 3b 	call	0x7782	; 0x7782 <ceil>
    4148:	0e 94 43 3c 	call	0x7886	; 0x7886 <__fixsfsi>
    414c:	8b 01       	movw	r16, r22
    414e:	60 93 b5 24 	sts	0x24B5, r22
    4152:	70 93 b6 24 	sts	0x24B6, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    4156:	2e a1       	ldd	r18, Y+38	; 0x26
    4158:	3f a1       	ldd	r19, Y+39	; 0x27
    415a:	23 2b       	or	r18, r19
    415c:	b9 f0       	breq	.+46     	; 0x418c <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    415e:	b8 01       	movw	r22, r16
    4160:	88 27       	eor	r24, r24
    4162:	77 fd       	sbrc	r23, 7
    4164:	80 95       	com	r24
    4166:	98 2f       	mov	r25, r24
    4168:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    416c:	9b 01       	movw	r18, r22
    416e:	ac 01       	movw	r20, r24
    4170:	6a a1       	ldd	r22, Y+34	; 0x22
    4172:	7b a1       	ldd	r23, Y+35	; 0x23
    4174:	8c a1       	ldd	r24, Y+36	; 0x24
    4176:	9d a1       	ldd	r25, Y+37	; 0x25
    4178:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    417c:	60 93 e1 24 	sts	0x24E1, r22
    4180:	70 93 e2 24 	sts	0x24E2, r23
    4184:	80 93 e3 24 	sts	0x24E3, r24
    4188:	90 93 e4 24 	sts	0x24E4, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    418c:	b8 01       	movw	r22, r16
    418e:	88 27       	eor	r24, r24
    4190:	77 fd       	sbrc	r23, 7
    4192:	80 95       	com	r24
    4194:	98 2f       	mov	r25, r24
    4196:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    419a:	7b 01       	movw	r14, r22
    419c:	8c 01       	movw	r16, r24
    419e:	c3 01       	movw	r24, r6
    41a0:	b2 01       	movw	r22, r4
    41a2:	a8 01       	movw	r20, r16
    41a4:	97 01       	movw	r18, r14
    41a6:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    41aa:	60 93 e5 24 	sts	0x24E5, r22
    41ae:	70 93 e6 24 	sts	0x24E6, r23
    41b2:	80 93 e7 24 	sts	0x24E7, r24
    41b6:	90 93 e8 24 	sts	0x24E8, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    41ba:	c6 01       	movw	r24, r12
    41bc:	b5 01       	movw	r22, r10
    41be:	a8 01       	movw	r20, r16
    41c0:	97 01       	movw	r18, r14
    41c2:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    41c6:	60 93 e9 24 	sts	0x24E9, r22
    41ca:	70 93 ea 24 	sts	0x24EA, r23
    41ce:	80 93 eb 24 	sts	0x24EB, r24
    41d2:	90 93 ec 24 	sts	0x24EC, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    41d6:	69 81       	ldd	r22, Y+1	; 0x01
    41d8:	7a 81       	ldd	r23, Y+2	; 0x02
    41da:	8b 81       	ldd	r24, Y+3	; 0x03
    41dc:	9c 81       	ldd	r25, Y+4	; 0x04
    41de:	0e 94 f9 3e 	call	0x7df2	; 0x7df2 <sin>
    41e2:	5b 01       	movw	r10, r22
    41e4:	6c 01       	movw	r12, r24
    41e6:	f4 01       	movw	r30, r8
    41e8:	ee 0f       	add	r30, r30
    41ea:	ff 1f       	adc	r31, r31
    41ec:	ee 0f       	add	r30, r30
    41ee:	ff 1f       	adc	r31, r31
    41f0:	ee 58       	subi	r30, 0x8E	; 142
    41f2:	fe 4d       	sbci	r31, 0xDE	; 222
    41f4:	61 81       	ldd	r22, Z+1	; 0x01
    41f6:	72 81       	ldd	r23, Z+2	; 0x02
    41f8:	83 81       	ldd	r24, Z+3	; 0x03
    41fa:	94 81       	ldd	r25, Z+4	; 0x04
    41fc:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    4200:	f4 01       	movw	r30, r8
    4202:	ee 0f       	add	r30, r30
    4204:	ff 1f       	adc	r31, r31
    4206:	e8 0d       	add	r30, r8
    4208:	f9 1d       	adc	r31, r9
    420a:	13 e0       	ldi	r17, 0x03	; 3
    420c:	ee 0f       	add	r30, r30
    420e:	ff 1f       	adc	r31, r31
    4210:	1a 95       	dec	r17
    4212:	e1 f7       	brne	.-8      	; 0x420c <mc_arc+0x20a>
    4214:	ec 5b       	subi	r30, 0xBC	; 188
    4216:	fb 4d       	sbci	r31, 0xDB	; 219
    4218:	21 a1       	ldd	r18, Z+33	; 0x21
    421a:	32 a1       	ldd	r19, Z+34	; 0x22
    421c:	43 a1       	ldd	r20, Z+35	; 0x23
    421e:	54 a1       	ldd	r21, Z+36	; 0x24
    4220:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    4224:	7b 01       	movw	r14, r22
    4226:	8c 01       	movw	r16, r24
    4228:	c6 01       	movw	r24, r12
    422a:	b5 01       	movw	r22, r10
    422c:	2d 81       	ldd	r18, Y+5	; 0x05
    422e:	3e 81       	ldd	r19, Y+6	; 0x06
    4230:	4f 81       	ldd	r20, Y+7	; 0x07
    4232:	58 85       	ldd	r21, Y+8	; 0x08
    4234:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    4238:	9b 01       	movw	r18, r22
    423a:	ac 01       	movw	r20, r24
    423c:	c8 01       	movw	r24, r16
    423e:	b7 01       	movw	r22, r14
    4240:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    4244:	60 93 d1 24 	sts	0x24D1, r22
    4248:	70 93 d2 24 	sts	0x24D2, r23
    424c:	80 93 d3 24 	sts	0x24D3, r24
    4250:	90 93 d4 24 	sts	0x24D4, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    4254:	69 81       	ldd	r22, Y+1	; 0x01
    4256:	7a 81       	ldd	r23, Y+2	; 0x02
    4258:	8b 81       	ldd	r24, Y+3	; 0x03
    425a:	9c 81       	ldd	r25, Y+4	; 0x04
    425c:	0e 94 d8 3b 	call	0x77b0	; 0x77b0 <cos>
    4260:	5b 01       	movw	r10, r22
    4262:	6c 01       	movw	r12, r24
    4264:	f1 01       	movw	r30, r2
    4266:	ee 0f       	add	r30, r30
    4268:	ff 1f       	adc	r31, r31
    426a:	ee 0f       	add	r30, r30
    426c:	ff 1f       	adc	r31, r31
    426e:	ee 58       	subi	r30, 0x8E	; 142
    4270:	fe 4d       	sbci	r31, 0xDE	; 222
    4272:	61 81       	ldd	r22, Z+1	; 0x01
    4274:	72 81       	ldd	r23, Z+2	; 0x02
    4276:	83 81       	ldd	r24, Z+3	; 0x03
    4278:	94 81       	ldd	r25, Z+4	; 0x04
    427a:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    427e:	f1 01       	movw	r30, r2
    4280:	ee 0f       	add	r30, r30
    4282:	ff 1f       	adc	r31, r31
    4284:	e2 0d       	add	r30, r2
    4286:	f3 1d       	adc	r31, r3
    4288:	53 e0       	ldi	r21, 0x03	; 3
    428a:	ee 0f       	add	r30, r30
    428c:	ff 1f       	adc	r31, r31
    428e:	5a 95       	dec	r21
    4290:	e1 f7       	brne	.-8      	; 0x428a <mc_arc+0x288>
    4292:	ec 5b       	subi	r30, 0xBC	; 188
    4294:	fb 4d       	sbci	r31, 0xDB	; 219
    4296:	21 a1       	ldd	r18, Z+33	; 0x21
    4298:	32 a1       	ldd	r19, Z+34	; 0x22
    429a:	43 a1       	ldd	r20, Z+35	; 0x23
    429c:	54 a1       	ldd	r21, Z+36	; 0x24
    429e:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    42a2:	7b 01       	movw	r14, r22
    42a4:	8c 01       	movw	r16, r24
    42a6:	c6 01       	movw	r24, r12
    42a8:	b5 01       	movw	r22, r10
    42aa:	2d 81       	ldd	r18, Y+5	; 0x05
    42ac:	3e 81       	ldd	r19, Y+6	; 0x06
    42ae:	4f 81       	ldd	r20, Y+7	; 0x07
    42b0:	58 85       	ldd	r21, Y+8	; 0x08
    42b2:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    42b6:	9b 01       	movw	r18, r22
    42b8:	ac 01       	movw	r20, r24
    42ba:	c8 01       	movw	r24, r16
    42bc:	b7 01       	movw	r22, r14
    42be:	0e 94 34 3b 	call	0x7668	; 0x7668 <__subsf3>
    42c2:	60 93 d5 24 	sts	0x24D5, r22
    42c6:	70 93 d6 24 	sts	0x24D6, r23
    42ca:	80 93 d7 24 	sts	0x24D7, r24
    42ce:	90 93 d8 24 	sts	0x24D8, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
    42d2:	e8 a1       	ldd	r30, Y+32	; 0x20
    42d4:	f9 a1       	ldd	r31, Y+33	; 0x21
    42d6:	ee 0f       	add	r30, r30
    42d8:	ff 1f       	adc	r31, r31
    42da:	ee 0f       	add	r30, r30
    42dc:	ff 1f       	adc	r31, r31
    42de:	8f 01       	movw	r16, r30
    42e0:	0c 54       	subi	r16, 0x4C	; 76
    42e2:	1b 4d       	sbci	r17, 0xDB	; 219
    42e4:	ee 58       	subi	r30, 0x8E	; 142
    42e6:	fe 4d       	sbci	r31, 0xDE	; 222
    42e8:	61 81       	ldd	r22, Z+1	; 0x01
    42ea:	72 81       	ldd	r23, Z+2	; 0x02
    42ec:	83 81       	ldd	r24, Z+3	; 0x03
    42ee:	94 81       	ldd	r25, Z+4	; 0x04
    42f0:	0e 94 76 3c 	call	0x78ec	; 0x78ec <__floatsisf>
    42f4:	20 91 95 24 	lds	r18, 0x2495
    42f8:	30 91 96 24 	lds	r19, 0x2496
    42fc:	40 91 97 24 	lds	r20, 0x2497
    4300:	50 91 98 24 	lds	r21, 0x2498
    4304:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <__divsf3>
    4308:	d8 01       	movw	r26, r16
    430a:	1d 96       	adiw	r26, 0x0d	; 13
    430c:	6d 93       	st	X+, r22
    430e:	7d 93       	st	X+, r23
    4310:	8d 93       	st	X+, r24
    4312:	9c 93       	st	X, r25
    4314:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    4316:	10 92 b7 24 	sts	0x24B7, r1
    431a:	10 92 b8 24 	sts	0x24B8, r1
    431e:	bf c0       	rjmp	.+382    	; 0x449e <mc_arc+0x49c>
		ma.theta += ma.theta_per_segment;
    4320:	60 91 d9 24 	lds	r22, 0x24D9
    4324:	70 91 da 24 	lds	r23, 0x24DA
    4328:	80 91 db 24 	lds	r24, 0x24DB
    432c:	90 91 dc 24 	lds	r25, 0x24DC
    4330:	20 91 e5 24 	lds	r18, 0x24E5
    4334:	30 91 e6 24 	lds	r19, 0x24E6
    4338:	40 91 e7 24 	lds	r20, 0x24E7
    433c:	50 91 e8 24 	lds	r21, 0x24E8
    4340:	0e 94 35 3b 	call	0x766a	; 0x766a <__addsf3>
    4344:	7b 01       	movw	r14, r22
    4346:	8c 01       	movw	r16, r24
    4348:	cb 01       	movw	r24, r22
    434a:	d8 01       	movw	r26, r16
    434c:	80 93 d9 24 	sts	0x24D9, r24
    4350:	90 93 da 24 	sts	0x24DA, r25
    4354:	a0 93 db 24 	sts	0x24DB, r26
    4358:	b0 93 dc 24 	sts	0x24DC, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    435c:	b7 01       	movw	r22, r14
    435e:	c8 01       	movw	r24, r16
    4360:	0e 94 f9 3e 	call	0x7df2	; 0x7df2 <sin>
    4364:	80 90 dd 24 	lds	r8, 0x24DD
    4368:	90 90 de 24 	lds	r9, 0x24DE
    436c:	a0 90 df 24 	lds	r10, 0x24DF
    4370:	b0 90 e0 24 	lds	r11, 0x24E0
    4374:	c0 90 bb 24 	lds	r12, 0x24BB
    4378:	d0 90 bc 24 	lds	r13, 0x24BC
    437c:	cc 0c       	add	r12, r12
    437e:	dd 1c       	adc	r13, r13
    4380:	cc 0c       	add	r12, r12
    4382:	dd 1c       	adc	r13, r13
    4384:	e4 eb       	ldi	r30, 0xB4	; 180
    4386:	f4 e2       	ldi	r31, 0x24	; 36
    4388:	ce 0e       	add	r12, r30
    438a:	df 1e       	adc	r13, r31
    438c:	a5 01       	movw	r20, r10
    438e:	94 01       	movw	r18, r8
    4390:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    4394:	9b 01       	movw	r18, r22
    4396:	ac 01       	movw	r20, r24
    4398:	60 91 d1 24 	lds	r22, 0x24D1
    439c:	70 91 d2 24 	lds	r23, 0x24D2
    43a0:	80 91 d3 24 	lds	r24, 0x24D3
    43a4:	90 91 d4 24 	lds	r25, 0x24D4
    43a8:	0e 94 35 3b 	call	0x766a	; 0x766a <__addsf3>
    43ac:	d6 01       	movw	r26, r12
    43ae:	1d 96       	adiw	r26, 0x0d	; 13
    43b0:	6d 93       	st	X+, r22
    43b2:	7d 93       	st	X+, r23
    43b4:	8d 93       	st	X+, r24
    43b6:	9c 93       	st	X, r25
    43b8:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    43ba:	b7 01       	movw	r22, r14
    43bc:	c8 01       	movw	r24, r16
    43be:	0e 94 d8 3b 	call	0x77b0	; 0x77b0 <cos>
    43c2:	00 91 bd 24 	lds	r16, 0x24BD
    43c6:	10 91 be 24 	lds	r17, 0x24BE
    43ca:	00 0f       	add	r16, r16
    43cc:	11 1f       	adc	r17, r17
    43ce:	00 0f       	add	r16, r16
    43d0:	11 1f       	adc	r17, r17
    43d2:	0c 54       	subi	r16, 0x4C	; 76
    43d4:	1b 4d       	sbci	r17, 0xDB	; 219
    43d6:	a5 01       	movw	r20, r10
    43d8:	94 01       	movw	r18, r8
    43da:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    43de:	9b 01       	movw	r18, r22
    43e0:	ac 01       	movw	r20, r24
    43e2:	60 91 d5 24 	lds	r22, 0x24D5
    43e6:	70 91 d6 24 	lds	r23, 0x24D6
    43ea:	80 91 d7 24 	lds	r24, 0x24D7
    43ee:	90 91 d8 24 	lds	r25, 0x24D8
    43f2:	0e 94 35 3b 	call	0x766a	; 0x766a <__addsf3>
    43f6:	f8 01       	movw	r30, r16
    43f8:	65 87       	std	Z+13, r22	; 0x0d
    43fa:	76 87       	std	Z+14, r23	; 0x0e
    43fc:	87 87       	std	Z+15, r24	; 0x0f
    43fe:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    4400:	00 91 bf 24 	lds	r16, 0x24BF
    4404:	10 91 c0 24 	lds	r17, 0x24C0
    4408:	00 0f       	add	r16, r16
    440a:	11 1f       	adc	r17, r17
    440c:	00 0f       	add	r16, r16
    440e:	11 1f       	adc	r17, r17
    4410:	0c 54       	subi	r16, 0x4C	; 76
    4412:	1b 4d       	sbci	r17, 0xDB	; 219
    4414:	d8 01       	movw	r26, r16
    4416:	1d 96       	adiw	r26, 0x0d	; 13
    4418:	6d 91       	ld	r22, X+
    441a:	7d 91       	ld	r23, X+
    441c:	8d 91       	ld	r24, X+
    441e:	9c 91       	ld	r25, X
    4420:	50 97       	sbiw	r26, 0x10	; 16
    4422:	20 91 e9 24 	lds	r18, 0x24E9
    4426:	30 91 ea 24 	lds	r19, 0x24EA
    442a:	40 91 eb 24 	lds	r20, 0x24EB
    442e:	50 91 ec 24 	lds	r21, 0x24EC
    4432:	0e 94 35 3b 	call	0x766a	; 0x766a <__addsf3>
    4436:	f8 01       	movw	r30, r16
    4438:	65 87       	std	Z+13, r22	; 0x0d
    443a:	76 87       	std	Z+14, r23	; 0x0e
    443c:	87 87       	std	Z+15, r24	; 0x0f
    443e:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X_AXIS], 
    4440:	60 91 c1 24 	lds	r22, 0x24C1
    4444:	70 91 c2 24 	lds	r23, 0x24C2
    4448:	80 91 c3 24 	lds	r24, 0x24C3
    444c:	90 91 c4 24 	lds	r25, 0x24C4
    4450:	20 91 c5 24 	lds	r18, 0x24C5
    4454:	30 91 c6 24 	lds	r19, 0x24C6
    4458:	40 91 c7 24 	lds	r20, 0x24C7
    445c:	50 91 c8 24 	lds	r21, 0x24C8
    4460:	e0 90 c9 24 	lds	r14, 0x24C9
    4464:	f0 90 ca 24 	lds	r15, 0x24CA
    4468:	00 91 cb 24 	lds	r16, 0x24CB
    446c:	10 91 cc 24 	lds	r17, 0x24CC
    4470:	a0 90 e1 24 	lds	r10, 0x24E1
    4474:	b0 90 e2 24 	lds	r11, 0x24E2
    4478:	c0 90 e3 24 	lds	r12, 0x24E3
    447c:	d0 90 e4 24 	lds	r13, 0x24E4
    4480:	80 90 b9 24 	lds	r8, 0x24B9
    4484:	90 90 ba 24 	lds	r9, 0x24BA
    4488:	0e 94 05 1c 	call	0x380a	; 0x380a <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    448c:	80 91 b7 24 	lds	r24, 0x24B7
    4490:	90 91 b8 24 	lds	r25, 0x24B8
    4494:	01 96       	adiw	r24, 0x01	; 1
    4496:	80 93 b7 24 	sts	0x24B7, r24
    449a:	90 93 b8 24 	sts	0x24B8, r25
    449e:	20 91 b7 24 	lds	r18, 0x24B7
    44a2:	30 91 b8 24 	lds	r19, 0x24B8
    44a6:	80 91 b5 24 	lds	r24, 0x24B5
    44aa:	90 91 b6 24 	lds	r25, 0x24B6
    44ae:	82 17       	cp	r24, r18
    44b0:	93 07       	cpc	r25, r19
    44b2:	0c f0       	brlt	.+2      	; 0x44b6 <mc_arc+0x4b4>
    44b4:	35 cf       	rjmp	.-406    	; 0x4320 <mc_arc+0x31e>
    44b6:	20 e0       	ldi	r18, 0x00	; 0
    44b8:	30 e0       	ldi	r19, 0x00	; 0
				ma.dtarget[Z_AXIS], 
				ma.feed_rate, 
				ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    44ba:	c9 01       	movw	r24, r18
    44bc:	28 96       	adiw	r28, 0x08	; 8
    44be:	cd bf       	out	0x3d, r28	; 61
    44c0:	de bf       	out	0x3e, r29	; 62
    44c2:	cf 91       	pop	r28
    44c4:	df 91       	pop	r29
    44c6:	1f 91       	pop	r17
    44c8:	0f 91       	pop	r16
    44ca:	ff 90       	pop	r15
    44cc:	ef 90       	pop	r14
    44ce:	df 90       	pop	r13
    44d0:	cf 90       	pop	r12
    44d2:	bf 90       	pop	r11
    44d4:	af 90       	pop	r10
    44d6:	9f 90       	pop	r9
    44d8:	8f 90       	pop	r8
    44da:	7f 90       	pop	r7
    44dc:	6f 90       	pop	r6
    44de:	5f 90       	pop	r5
    44e0:	4f 90       	pop	r4
    44e2:	3f 90       	pop	r3
    44e4:	2f 90       	pop	r2
    44e6:	08 95       	ret

000044e8 <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    44e8:	e0 e6       	ldi	r30, 0x60	; 96
    44ea:	f6 e0       	ldi	r31, 0x06	; 6
    44ec:	80 e4       	ldi	r24, 0x40	; 64
    44ee:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    44f0:	80 e8       	ldi	r24, 0x80	; 128
    44f2:	81 83       	std	Z+1, r24	; 0x01
}
    44f4:	08 95       	ret

000044f6 <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    44f6:	97 fd       	sbrc	r25, 7
    44f8:	05 c0       	rjmp	.+10     	; 0x4504 <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    44fa:	80 e8       	ldi	r24, 0x80	; 128
    44fc:	e0 e6       	ldi	r30, 0x60	; 96
    44fe:	f6 e0       	ldi	r31, 0x06	; 6
    4500:	85 83       	std	Z+5, r24	; 0x05
    4502:	04 c0       	rjmp	.+8      	; 0x450c <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    4504:	80 e8       	ldi	r24, 0x80	; 128
    4506:	e0 e6       	ldi	r30, 0x60	; 96
    4508:	f6 e0       	ldi	r31, 0x06	; 6
    450a:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    450c:	80 e4       	ldi	r24, 0x40	; 64
    450e:	e0 e6       	ldi	r30, 0x60	; 96
    4510:	f6 e0       	ldi	r31, 0x06	; 6
    4512:	85 83       	std	Z+5, r24	; 0x05
}
    4514:	08 95       	ret

00004516 <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    4516:	80 e4       	ldi	r24, 0x40	; 64
    4518:	e0 e6       	ldi	r30, 0x60	; 96
    451a:	f6 e0       	ldi	r31, 0x06	; 6
    451c:	86 83       	std	Z+6, r24	; 0x06
}
    451e:	08 95       	ret

00004520 <st_init>:
 *
 *  Note: high level interrupts must be enabled in main()
 */

void st_init()
{
    4520:	cf 93       	push	r28
    4522:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    4524:	10 92 a0 21 	sts	0x21A0, r1
	ax.exec_mutex = FALSE;
    4528:	10 92 9f 21 	sts	0x219F, r1

	ax.a[X_AXIS].port = &X_MOTOR_PORT;				// bind PORTs to structs
    452c:	80 e0       	ldi	r24, 0x00	; 0
    452e:	96 e0       	ldi	r25, 0x06	; 6
    4530:	80 93 ae 21 	sts	0x21AE, r24
    4534:	90 93 af 21 	sts	0x21AF, r25
	ax.a[Y_AXIS].port = &Y_MOTOR_PORT;
    4538:	80 ea       	ldi	r24, 0xA0	; 160
    453a:	96 e0       	ldi	r25, 0x06	; 6
    453c:	80 93 bd 21 	sts	0x21BD, r24
    4540:	90 93 be 21 	sts	0x21BE, r25
	ax.a[Z_AXIS].port = &Z_MOTOR_PORT;
    4544:	80 e8       	ldi	r24, 0x80	; 128
    4546:	96 e0       	ldi	r25, 0x06	; 6
    4548:	80 93 cc 21 	sts	0x21CC, r24
    454c:	90 93 cd 21 	sts	0x21CD, r25
	ax.a[A_AXIS].port = &A_MOTOR_PORT;
    4550:	80 e6       	ldi	r24, 0x60	; 96
    4552:	96 e0       	ldi	r25, 0x06	; 6
    4554:	80 93 db 21 	sts	0x21DB, r24
    4558:	90 93 dc 21 	sts	0x21DC, r25

	ax.a[X_AXIS].timer = &X_TIMER;					// bind TIMERs to structs
    455c:	80 e0       	ldi	r24, 0x00	; 0
    455e:	98 e0       	ldi	r25, 0x08	; 8
    4560:	80 93 b0 21 	sts	0x21B0, r24
    4564:	90 93 b1 21 	sts	0x21B1, r25
	ax.a[Y_AXIS].timer = &Y_TIMER;
    4568:	80 e0       	ldi	r24, 0x00	; 0
    456a:	99 e0       	ldi	r25, 0x09	; 9
    456c:	80 93 bf 21 	sts	0x21BF, r24
    4570:	90 93 c0 21 	sts	0x21C0, r25
	ax.a[Z_AXIS].timer = &Z_TIMER;
    4574:	80 e0       	ldi	r24, 0x00	; 0
    4576:	9a e0       	ldi	r25, 0x0A	; 10
    4578:	80 93 ce 21 	sts	0x21CE, r24
    457c:	90 93 cf 21 	sts	0x21CF, r25
	ax.a[A_AXIS].timer = &A_TIMER;
    4580:	80 e0       	ldi	r24, 0x00	; 0
    4582:	9b e0       	ldi	r25, 0x0B	; 11
    4584:	80 93 dd 21 	sts	0x21DD, r24
    4588:	90 93 de 21 	sts	0x21DE, r25
    458c:	c4 e5       	ldi	r28, 0x54	; 84
    458e:	d4 e2       	ldi	r29, 0x24	; 36
    4590:	ad ea       	ldi	r26, 0xAD	; 173
    4592:	b1 e2       	ldi	r27, 0x21	; 33

	for (uint8_t i=0; i <= A_AXIS; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    4594:	4f e3       	ldi	r20, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero initially
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4596:	34 e0       	ldi	r19, 0x04	; 4
		ax.a[i].port->PIN6CTRL = LIMIT_BIT_SETUP_gc;// setup pin mode - limit MIN
    4598:	98 e1       	ldi	r25, 0x18	; 24
		ax.a[i].port->PIN7CTRL = LIMIT_BIT_SETUP_gc;// setup pin mode - limit MAX

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    459a:	23 e0       	ldi	r18, 0x03	; 3
	ax.a[Y_AXIS].timer = &Y_TIMER;
	ax.a[Z_AXIS].timer = &Z_TIMER;
	ax.a[A_AXIS].timer = &A_TIMER;

	for (uint8_t i=0; i <= A_AXIS; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    459c:	88 81       	ld	r24, Y
    459e:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    45a0:	11 96       	adiw	r26, 0x01	; 1
    45a2:	ed 91       	ld	r30, X+
    45a4:	fc 91       	ld	r31, X
    45a6:	12 97       	sbiw	r26, 0x02	; 2
    45a8:	40 83       	st	Z, r20
		ax.a[i].port->OUT = 0x00;					// set port bits to zero initially
    45aa:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
    45ac:	84 81       	ldd	r24, Z+4	; 0x04
    45ae:	88 61       	ori	r24, 0x18	; 24
    45b0:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    45b2:	35 83       	std	Z+5, r19	; 0x05
		ax.a[i].port->PIN6CTRL = LIMIT_BIT_SETUP_gc;// setup pin mode - limit MIN
    45b4:	96 8b       	std	Z+22, r25	; 0x16
		ax.a[i].port->PIN7CTRL = LIMIT_BIT_SETUP_gc;// setup pin mode - limit MAX
    45b6:	97 8b       	std	Z+23, r25	; 0x17

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    45b8:	13 96       	adiw	r26, 0x03	; 3
    45ba:	ed 91       	ld	r30, X+
    45bc:	fc 91       	ld	r31, X
    45be:	14 97       	sbiw	r26, 0x04	; 4
    45c0:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    45c2:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    45c4:	26 83       	std	Z+6, r18	; 0x06
    45c6:	68 96       	adiw	r28, 0x18	; 24
    45c8:	1f 96       	adiw	r26, 0x0f	; 15
	ax.a[X_AXIS].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y_AXIS].timer = &Y_TIMER;
	ax.a[Z_AXIS].timer = &Z_TIMER;
	ax.a[A_AXIS].timer = &A_TIMER;

	for (uint8_t i=0; i <= A_AXIS; i++) {
    45ca:	84 e2       	ldi	r24, 0x24	; 36
    45cc:	c4 3b       	cpi	r28, 0xB4	; 180
    45ce:	d8 07       	cpc	r29, r24
    45d0:	29 f7       	brne	.-54     	; 0x459c <st_init+0x7c>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    45d2:	df 91       	pop	r29
    45d4:	cf 91       	pop	r28
    45d6:	08 95       	ret

000045d8 <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	fc 01       	movw	r30, r24
    45dc:	24 e0       	ldi	r18, 0x04	; 4
    45de:	ee 0f       	add	r30, r30
    45e0:	ff 1f       	adc	r31, r31
    45e2:	2a 95       	dec	r18
    45e4:	e1 f7       	brne	.-8      	; 0x45de <st_set_polarity+0x6>
    45e6:	e8 1b       	sub	r30, r24
    45e8:	f9 0b       	sbc	r31, r25
    45ea:	e1 56       	subi	r30, 0x61	; 97
    45ec:	fe 4d       	sbci	r31, 0xDE	; 222
    45ee:	66 87       	std	Z+14, r22	; 0x0e
}
    45f0:	08 95       	ret

000045f2 <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X_AXIS].step_counter = 0x00001000;
    45f2:	80 e0       	ldi	r24, 0x00	; 0
    45f4:	90 e1       	ldi	r25, 0x10	; 16
    45f6:	a0 e0       	ldi	r26, 0x00	; 0
    45f8:	b0 e0       	ldi	r27, 0x00	; 0
    45fa:	80 93 a3 21 	sts	0x21A3, r24
    45fe:	90 93 a4 21 	sts	0x21A4, r25
    4602:	a0 93 a5 21 	sts	0x21A5, r26
    4606:	b0 93 a6 21 	sts	0x21A6, r27
	ax.a[X_AXIS].timer->PER = 0x1000;					// step rate (period)
    460a:	e0 91 b0 21 	lds	r30, 0x21B0
    460e:	f0 91 b1 21 	lds	r31, 0x21B1
    4612:	80 e0       	ldi	r24, 0x00	; 0
    4614:	90 e1       	ldi	r25, 0x10	; 16
    4616:	86 a3       	std	Z+38, r24	; 0x26
    4618:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X_AXIS].timer->CTRLA = TC_CLK_ON;				// start clock
    461a:	21 e0       	ldi	r18, 0x01	; 1
    461c:	20 83       	st	Z, r18

	ax.a[Y_AXIS].step_counter = 0x00000800;
    461e:	80 e0       	ldi	r24, 0x00	; 0
    4620:	98 e0       	ldi	r25, 0x08	; 8
    4622:	a0 e0       	ldi	r26, 0x00	; 0
    4624:	b0 e0       	ldi	r27, 0x00	; 0
    4626:	80 93 b2 21 	sts	0x21B2, r24
    462a:	90 93 b3 21 	sts	0x21B3, r25
    462e:	a0 93 b4 21 	sts	0x21B4, r26
    4632:	b0 93 b5 21 	sts	0x21B5, r27
	ax.a[Y_AXIS].timer->PER = 0x2000;
    4636:	e0 91 bf 21 	lds	r30, 0x21BF
    463a:	f0 91 c0 21 	lds	r31, 0x21C0
    463e:	80 e0       	ldi	r24, 0x00	; 0
    4640:	90 e2       	ldi	r25, 0x20	; 32
    4642:	86 a3       	std	Z+38, r24	; 0x26
    4644:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y_AXIS].timer->CTRLA = TC_CLK_ON;
    4646:	20 83       	st	Z, r18

	ax.a[Z_AXIS].step_counter = 0x00000600;
    4648:	80 e0       	ldi	r24, 0x00	; 0
    464a:	96 e0       	ldi	r25, 0x06	; 6
    464c:	a0 e0       	ldi	r26, 0x00	; 0
    464e:	b0 e0       	ldi	r27, 0x00	; 0
    4650:	80 93 c1 21 	sts	0x21C1, r24
    4654:	90 93 c2 21 	sts	0x21C2, r25
    4658:	a0 93 c3 21 	sts	0x21C3, r26
    465c:	b0 93 c4 21 	sts	0x21C4, r27
	ax.a[Z_AXIS].timer->PER = 0x3000;
    4660:	e0 91 ce 21 	lds	r30, 0x21CE
    4664:	f0 91 cf 21 	lds	r31, 0x21CF
    4668:	80 e0       	ldi	r24, 0x00	; 0
    466a:	90 e3       	ldi	r25, 0x30	; 48
    466c:	86 a3       	std	Z+38, r24	; 0x26
    466e:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z_AXIS].timer->CTRLA = TC_CLK_ON;
    4670:	20 83       	st	Z, r18

	ax.a[A_AXIS].step_counter = 0x00000400;
    4672:	80 e0       	ldi	r24, 0x00	; 0
    4674:	94 e0       	ldi	r25, 0x04	; 4
    4676:	a0 e0       	ldi	r26, 0x00	; 0
    4678:	b0 e0       	ldi	r27, 0x00	; 0
    467a:	80 93 d0 21 	sts	0x21D0, r24
    467e:	90 93 d1 21 	sts	0x21D1, r25
    4682:	a0 93 d2 21 	sts	0x21D2, r26
    4686:	b0 93 d3 21 	sts	0x21D3, r27
	ax.a[A_AXIS].timer->PER = 0x4000;
    468a:	e0 91 dd 21 	lds	r30, 0x21DD
    468e:	f0 91 de 21 	lds	r31, 0x21DE
    4692:	80 e0       	ldi	r24, 0x00	; 0
    4694:	90 e4       	ldi	r25, 0x40	; 64
    4696:	86 a3       	std	Z+38, r24	; 0x26
    4698:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A_AXIS].timer->CTRLA = TC_CLK_ON;
    469a:	20 83       	st	Z, r18

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    469c:	e0 ea       	ldi	r30, 0xA0	; 160
    469e:	f1 e2       	ldi	r31, 0x21	; 33
    46a0:	80 81       	ld	r24, Z
    46a2:	8f 60       	ori	r24, 0x0F	; 15
    46a4:	80 83       	st	Z, r24
}
    46a6:	08 95       	ret

000046a8 <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    46a8:	f8 94       	cli
	mv_flush();									// flush the move buffer
    46aa:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <mv_flush>
	sei();
    46ae:	78 94       	sei
}
    46b0:	08 95       	ret

000046b2 <st_kill>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_kill()
{
	cli();										// stop intewrrupts
    46b2:	f8 94       	cli
	ax.a[X_AXIS].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    46b4:	e0 91 b0 21 	lds	r30, 0x21B0
    46b8:	f0 91 b1 21 	lds	r31, 0x21B1
    46bc:	10 82       	st	Z, r1
	ax.a[Y_AXIS].timer->CTRLA = TC_CLK_OFF;
    46be:	e0 91 bf 21 	lds	r30, 0x21BF
    46c2:	f0 91 c0 21 	lds	r31, 0x21C0
    46c6:	10 82       	st	Z, r1
	ax.a[Z_AXIS].timer->CTRLA = TC_CLK_OFF;
    46c8:	e0 91 ce 21 	lds	r30, 0x21CE
    46cc:	f0 91 cf 21 	lds	r31, 0x21CF
    46d0:	10 82       	st	Z, r1
	ax.a[A_AXIS].timer->CTRLA = TC_CLK_OFF;
    46d2:	e0 91 dd 21 	lds	r30, 0x21DD
    46d6:	f0 91 de 21 	lds	r31, 0x21DE
    46da:	10 82       	st	Z, r1
	
	mv_flush();									// flush the move buffer
    46dc:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    46e0:	10 92 a0 21 	sts	0x21A0, r1
	sei();
    46e4:	78 94       	sei
}
    46e6:	08 95       	ret

000046e8 <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    46e8:	cf 93       	push	r28
    46ea:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    46ec:	80 91 9f 21 	lds	r24, 0x219F
    46f0:	88 23       	and	r24, r24
    46f2:	09 f0       	breq	.+2      	; 0x46f6 <st_execute_move+0xe>
    46f4:	b6 c0       	rjmp	.+364    	; 0x4862 <st_execute_move+0x17a>
		return;
	}
	ax.exec_mutex = TRUE;
    46f6:	81 e0       	ldi	r24, 0x01	; 1
    46f8:	80 93 9f 21 	sts	0x219F, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    46fc:	80 91 a0 21 	lds	r24, 0x21A0
    4700:	88 23       	and	r24, r24
    4702:	09 f0       	breq	.+2      	; 0x4706 <st_execute_move+0x1e>
    4704:	ac c0       	rjmp	.+344    	; 0x485e <st_execute_move+0x176>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    4706:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <mv_dequeue_move_buffer>
    470a:	80 93 a1 21 	sts	0x21A1, r24
    470e:	90 93 a2 21 	sts	0x21A2, r25
    4712:	89 2b       	or	r24, r25
    4714:	09 f4       	brne	.+2      	; 0x4718 <st_execute_move+0x30>
    4716:	a3 c0       	rjmp	.+326    	; 0x485e <st_execute_move+0x176>
		ax.exec_mutex = FALSE;
		return;
    4718:	c3 ea       	ldi	r28, 0xA3	; 163
    471a:	d1 e2       	ldi	r29, 0x21	; 33
    471c:	20 e0       	ldi	r18, 0x00	; 0
    471e:	30 e0       	ldi	r19, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4720:	54 e0       	ldi	r21, 0x04	; 4
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
			continue;
		}
		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4722:	42 e0       	ldi	r20, 0x02	; 2
	_st_fake_move();
	return;
#endif

	for (i = X_AXIS; i <= Z_AXIS; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    4724:	ed 85       	ldd	r30, Y+13	; 0x0d
    4726:	fe 85       	ldd	r31, Y+14	; 0x0e
    4728:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    472a:	e0 91 a1 21 	lds	r30, 0x21A1
    472e:	f0 91 a2 21 	lds	r31, 0x21A2
    4732:	c9 01       	movw	r24, r18
    4734:	73 e0       	ldi	r23, 0x03	; 3
    4736:	88 0f       	add	r24, r24
    4738:	99 1f       	adc	r25, r25
    473a:	7a 95       	dec	r23
    473c:	e1 f7       	brne	.-8      	; 0x4736 <st_execute_move+0x4e>
    473e:	82 0f       	add	r24, r18
    4740:	93 1f       	adc	r25, r19
    4742:	e8 0f       	add	r30, r24
    4744:	f9 1f       	adc	r31, r25
    4746:	80 81       	ld	r24, Z
    4748:	91 81       	ldd	r25, Z+1	; 0x01
    474a:	a2 81       	ldd	r26, Z+2	; 0x02
    474c:	b3 81       	ldd	r27, Z+3	; 0x03
    474e:	00 97       	sbiw	r24, 0x00	; 0
    4750:	a1 05       	cpc	r26, r1
    4752:	b1 05       	cpc	r27, r1
    4754:	b1 f1       	breq	.+108    	; 0x47c2 <st_execute_move+0xda>
			continue;
		}
		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4756:	90 85       	ldd	r25, Z+8	; 0x08
    4758:	8a 85       	ldd	r24, Y+10	; 0x0a
    475a:	eb 85       	ldd	r30, Y+11	; 0x0b
    475c:	fc 85       	ldd	r31, Y+12	; 0x0c
    475e:	98 17       	cp	r25, r24
    4760:	11 f0       	breq	.+4      	; 0x4766 <st_execute_move+0x7e>
    4762:	45 83       	std	Z+5, r20	; 0x05
    4764:	01 c0       	rjmp	.+2      	; 0x4768 <st_execute_move+0x80>
    4766:	46 83       	std	Z+6, r20	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    4768:	e0 91 a1 21 	lds	r30, 0x21A1
    476c:	f0 91 a2 21 	lds	r31, 0x21A2
    4770:	c9 01       	movw	r24, r18
    4772:	63 e0       	ldi	r22, 0x03	; 3
    4774:	88 0f       	add	r24, r24
    4776:	99 1f       	adc	r25, r25
    4778:	6a 95       	dec	r22
    477a:	e1 f7       	brne	.-8      	; 0x4774 <st_execute_move+0x8c>
    477c:	82 0f       	add	r24, r18
    477e:	93 1f       	adc	r25, r19
    4780:	e8 0f       	add	r30, r24
    4782:	f9 1f       	adc	r31, r25
    4784:	80 81       	ld	r24, Z
    4786:	91 81       	ldd	r25, Z+1	; 0x01
    4788:	a2 81       	ldd	r26, Z+2	; 0x02
    478a:	b3 81       	ldd	r27, Z+3	; 0x03
    478c:	88 83       	st	Y, r24
    478e:	99 83       	std	Y+1, r25	; 0x01
    4790:	aa 83       	std	Y+2, r26	; 0x02
    4792:	bb 83       	std	Y+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    4794:	86 81       	ldd	r24, Z+6	; 0x06
    4796:	97 81       	ldd	r25, Z+7	; 0x07
    4798:	8e 83       	std	Y+6, r24	; 0x06
    479a:	9f 83       	std	Y+7, r25	; 0x07
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    479c:	86 81       	ldd	r24, Z+6	; 0x06
    479e:	97 81       	ldd	r25, Z+7	; 0x07
    47a0:	88 87       	std	Y+8, r24	; 0x08
    47a2:	99 87       	std	Y+9, r25	; 0x09
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    47a4:	84 81       	ldd	r24, Z+4	; 0x04
    47a6:	95 81       	ldd	r25, Z+5	; 0x05
    47a8:	8c 83       	std	Y+4, r24	; 0x04
    47aa:	9d 83       	std	Y+5, r25	; 0x05
		ax.a[i].timer->PER = ax.p->a[i].period;
    47ac:	ad 85       	ldd	r26, Y+13	; 0x0d
    47ae:	be 85       	ldd	r27, Y+14	; 0x0e
    47b0:	84 81       	ldd	r24, Z+4	; 0x04
    47b2:	95 81       	ldd	r25, Z+5	; 0x05
    47b4:	96 96       	adiw	r26, 0x26	; 38
    47b6:	8d 93       	st	X+, r24
    47b8:	9c 93       	st	X, r25
    47ba:	97 97       	sbiw	r26, 0x27	; 39
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    47bc:	eb 85       	ldd	r30, Y+11	; 0x0b
    47be:	fc 85       	ldd	r31, Y+12	; 0x0c
    47c0:	56 83       	std	Z+6, r21	; 0x06
    47c2:	2f 5f       	subi	r18, 0xFF	; 255
    47c4:	3f 4f       	sbci	r19, 0xFF	; 255
    47c6:	2f 96       	adiw	r28, 0x0f	; 15
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i = X_AXIS; i <= Z_AXIS; i++) {
    47c8:	23 30       	cpi	r18, 0x03	; 3
    47ca:	31 05       	cpc	r19, r1
    47cc:	09 f0       	breq	.+2      	; 0x47d0 <st_execute_move+0xe8>
    47ce:	aa cf       	rjmp	.-172    	; 0x4724 <st_execute_move+0x3c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    47d0:	10 92 a0 21 	sts	0x21A0, r1
	if (ax.a[X_AXIS].step_counter) { 
    47d4:	80 91 a3 21 	lds	r24, 0x21A3
    47d8:	90 91 a4 21 	lds	r25, 0x21A4
    47dc:	a0 91 a5 21 	lds	r26, 0x21A5
    47e0:	b0 91 a6 21 	lds	r27, 0x21A6
    47e4:	00 97       	sbiw	r24, 0x00	; 0
    47e6:	a1 05       	cpc	r26, r1
    47e8:	b1 05       	cpc	r27, r1
    47ea:	59 f0       	breq	.+22     	; 0x4802 <st_execute_move+0x11a>
		ax.a[X_AXIS].timer->CTRLA = TC_CLK_ON;
    47ec:	e0 91 b0 21 	lds	r30, 0x21B0
    47f0:	f0 91 b1 21 	lds	r31, 0x21B1
    47f4:	81 e0       	ldi	r24, 0x01	; 1
    47f6:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    47f8:	80 91 a0 21 	lds	r24, 0x21A0
    47fc:	88 60       	ori	r24, 0x08	; 8
    47fe:	80 93 a0 21 	sts	0x21A0, r24
	}
	if (ax.a[Y_AXIS].step_counter) {
    4802:	80 91 b2 21 	lds	r24, 0x21B2
    4806:	90 91 b3 21 	lds	r25, 0x21B3
    480a:	a0 91 b4 21 	lds	r26, 0x21B4
    480e:	b0 91 b5 21 	lds	r27, 0x21B5
    4812:	00 97       	sbiw	r24, 0x00	; 0
    4814:	a1 05       	cpc	r26, r1
    4816:	b1 05       	cpc	r27, r1
    4818:	59 f0       	breq	.+22     	; 0x4830 <st_execute_move+0x148>
		ax.a[Y_AXIS].timer->CTRLA = TC_CLK_ON;
    481a:	e0 91 bf 21 	lds	r30, 0x21BF
    481e:	f0 91 c0 21 	lds	r31, 0x21C0
    4822:	81 e0       	ldi	r24, 0x01	; 1
    4824:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    4826:	80 91 a0 21 	lds	r24, 0x21A0
    482a:	84 60       	ori	r24, 0x04	; 4
    482c:	80 93 a0 21 	sts	0x21A0, r24
	}
	if (ax.a[Z_AXIS].step_counter) {
    4830:	80 91 c1 21 	lds	r24, 0x21C1
    4834:	90 91 c2 21 	lds	r25, 0x21C2
    4838:	a0 91 c3 21 	lds	r26, 0x21C3
    483c:	b0 91 c4 21 	lds	r27, 0x21C4
    4840:	00 97       	sbiw	r24, 0x00	; 0
    4842:	a1 05       	cpc	r26, r1
    4844:	b1 05       	cpc	r27, r1
    4846:	59 f0       	breq	.+22     	; 0x485e <st_execute_move+0x176>
		ax.a[Z_AXIS].timer->CTRLA = TC_CLK_ON;
    4848:	e0 91 ce 21 	lds	r30, 0x21CE
    484c:	f0 91 cf 21 	lds	r31, 0x21CF
    4850:	81 e0       	ldi	r24, 0x01	; 1
    4852:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    4854:	80 91 a0 21 	lds	r24, 0x21A0
    4858:	82 60       	ori	r24, 0x02	; 2
    485a:	80 93 a0 21 	sts	0x21A0, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    485e:	10 92 9f 21 	sts	0x219F, r1
}
    4862:	df 91       	pop	r29
    4864:	cf 91       	pop	r28
    4866:	08 95       	ret

00004868 <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    4868:	10 92 9f 21 	sts	0x219F, r1
	st_execute_move();		// recursively empty the move queue
    486c:	0e 94 74 23 	call	0x46e8	; 0x46e8 <st_execute_move>
	return;
}
    4870:	08 95       	ret

00004872 <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_vect)
{
    4872:	1f 92       	push	r1
    4874:	0f 92       	push	r0
    4876:	0f b6       	in	r0, 0x3f	; 63
    4878:	0f 92       	push	r0
    487a:	0b b6       	in	r0, 0x3b	; 59
    487c:	0f 92       	push	r0
    487e:	11 24       	eor	r1, r1
    4880:	2f 93       	push	r18
    4882:	3f 93       	push	r19
    4884:	4f 93       	push	r20
    4886:	5f 93       	push	r21
    4888:	6f 93       	push	r22
    488a:	7f 93       	push	r23
    488c:	8f 93       	push	r24
    488e:	9f 93       	push	r25
    4890:	af 93       	push	r26
    4892:	bf 93       	push	r27
    4894:	ef 93       	push	r30
    4896:	ff 93       	push	r31
	if (--ax.a[A_AXIS].postscale_counter != 0) {
    4898:	80 91 d8 21 	lds	r24, 0x21D8
    489c:	90 91 d9 21 	lds	r25, 0x21D9
    48a0:	01 97       	sbiw	r24, 0x01	; 1
    48a2:	80 93 d8 21 	sts	0x21D8, r24
    48a6:	90 93 d9 21 	sts	0x21D9, r25
    48aa:	89 2b       	or	r24, r25
    48ac:	a1 f5       	brne	.+104    	; 0x4916 <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    48ae:	e0 e6       	ldi	r30, 0x60	; 96
    48b0:	f6 e0       	ldi	r31, 0x06	; 6
    48b2:	81 e0       	ldi	r24, 0x01	; 1
    48b4:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A_AXIS].step_counter == 0) {
    48b6:	80 91 d0 21 	lds	r24, 0x21D0
    48ba:	90 91 d1 21 	lds	r25, 0x21D1
    48be:	a0 91 d2 21 	lds	r26, 0x21D2
    48c2:	b0 91 d3 21 	lds	r27, 0x21D3
    48c6:	01 97       	sbiw	r24, 0x01	; 1
    48c8:	a1 09       	sbc	r26, r1
    48ca:	b1 09       	sbc	r27, r1
    48cc:	80 93 d0 21 	sts	0x21D0, r24
    48d0:	90 93 d1 21 	sts	0x21D1, r25
    48d4:	a0 93 d2 21 	sts	0x21D2, r26
    48d8:	b0 93 d3 21 	sts	0x21D3, r27
    48dc:	00 97       	sbiw	r24, 0x00	; 0
    48de:	a1 05       	cpc	r26, r1
    48e0:	b1 05       	cpc	r27, r1
    48e2:	69 f4       	brne	.+26     	; 0x48fe <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    48e4:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    48e8:	84 e0       	ldi	r24, 0x04	; 4
    48ea:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    48ec:	80 91 a0 21 	lds	r24, 0x21A0
    48f0:	8e 7f       	andi	r24, 0xFE	; 254
    48f2:	80 93 a0 21 	sts	0x21A0, r24
		if (ax.active_axes == 0) {
    48f6:	88 23       	and	r24, r24
    48f8:	11 f4       	brne	.+4      	; 0x48fe <__vector_108+0x8c>
			st_execute_move();
    48fa:	0e 94 74 23 	call	0x46e8	; 0x46e8 <st_execute_move>
		}
	}
	ax.a[A_AXIS].postscale_counter = ax.a[A_AXIS].postscale_value;
    48fe:	80 91 d6 21 	lds	r24, 0x21D6
    4902:	90 91 d7 21 	lds	r25, 0x21D7
    4906:	80 93 d8 21 	sts	0x21D8, r24
    490a:	90 93 d9 21 	sts	0x21D9, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    490e:	81 e0       	ldi	r24, 0x01	; 1
    4910:	e0 e6       	ldi	r30, 0x60	; 96
    4912:	f6 e0       	ldi	r31, 0x06	; 6
    4914:	86 83       	std	Z+6, r24	; 0x06
}
    4916:	ff 91       	pop	r31
    4918:	ef 91       	pop	r30
    491a:	bf 91       	pop	r27
    491c:	af 91       	pop	r26
    491e:	9f 91       	pop	r25
    4920:	8f 91       	pop	r24
    4922:	7f 91       	pop	r23
    4924:	6f 91       	pop	r22
    4926:	5f 91       	pop	r21
    4928:	4f 91       	pop	r20
    492a:	3f 91       	pop	r19
    492c:	2f 91       	pop	r18
    492e:	0f 90       	pop	r0
    4930:	0b be       	out	0x3b, r0	; 59
    4932:	0f 90       	pop	r0
    4934:	0f be       	out	0x3f, r0	; 63
    4936:	0f 90       	pop	r0
    4938:	1f 90       	pop	r1
    493a:	18 95       	reti

0000493c <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_vect)
{
    493c:	1f 92       	push	r1
    493e:	0f 92       	push	r0
    4940:	0f b6       	in	r0, 0x3f	; 63
    4942:	0f 92       	push	r0
    4944:	0b b6       	in	r0, 0x3b	; 59
    4946:	0f 92       	push	r0
    4948:	11 24       	eor	r1, r1
    494a:	2f 93       	push	r18
    494c:	3f 93       	push	r19
    494e:	4f 93       	push	r20
    4950:	5f 93       	push	r21
    4952:	6f 93       	push	r22
    4954:	7f 93       	push	r23
    4956:	8f 93       	push	r24
    4958:	9f 93       	push	r25
    495a:	af 93       	push	r26
    495c:	bf 93       	push	r27
    495e:	ef 93       	push	r30
    4960:	ff 93       	push	r31
	if (--ax.a[Z_AXIS].postscale_counter != 0) {
    4962:	80 91 c9 21 	lds	r24, 0x21C9
    4966:	90 91 ca 21 	lds	r25, 0x21CA
    496a:	01 97       	sbiw	r24, 0x01	; 1
    496c:	80 93 c9 21 	sts	0x21C9, r24
    4970:	90 93 ca 21 	sts	0x21CA, r25
    4974:	89 2b       	or	r24, r25
    4976:	a1 f5       	brne	.+104    	; 0x49e0 <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4978:	e0 e8       	ldi	r30, 0x80	; 128
    497a:	f6 e0       	ldi	r31, 0x06	; 6
    497c:	81 e0       	ldi	r24, 0x01	; 1
    497e:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z_AXIS].step_counter == 0) {
    4980:	80 91 c1 21 	lds	r24, 0x21C1
    4984:	90 91 c2 21 	lds	r25, 0x21C2
    4988:	a0 91 c3 21 	lds	r26, 0x21C3
    498c:	b0 91 c4 21 	lds	r27, 0x21C4
    4990:	01 97       	sbiw	r24, 0x01	; 1
    4992:	a1 09       	sbc	r26, r1
    4994:	b1 09       	sbc	r27, r1
    4996:	80 93 c1 21 	sts	0x21C1, r24
    499a:	90 93 c2 21 	sts	0x21C2, r25
    499e:	a0 93 c3 21 	sts	0x21C3, r26
    49a2:	b0 93 c4 21 	sts	0x21C4, r27
    49a6:	00 97       	sbiw	r24, 0x00	; 0
    49a8:	a1 05       	cpc	r26, r1
    49aa:	b1 05       	cpc	r27, r1
    49ac:	69 f4       	brne	.+26     	; 0x49c8 <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    49ae:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    49b2:	84 e0       	ldi	r24, 0x04	; 4
    49b4:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    49b6:	80 91 a0 21 	lds	r24, 0x21A0
    49ba:	8d 7f       	andi	r24, 0xFD	; 253
    49bc:	80 93 a0 21 	sts	0x21A0, r24
		if (ax.active_axes == 0) {
    49c0:	88 23       	and	r24, r24
    49c2:	11 f4       	brne	.+4      	; 0x49c8 <__vector_47+0x8c>
			st_execute_move();
    49c4:	0e 94 74 23 	call	0x46e8	; 0x46e8 <st_execute_move>
		}
	}
	ax.a[Z_AXIS].postscale_counter = ax.a[Z_AXIS].postscale_value;
    49c8:	80 91 c7 21 	lds	r24, 0x21C7
    49cc:	90 91 c8 21 	lds	r25, 0x21C8
    49d0:	80 93 c9 21 	sts	0x21C9, r24
    49d4:	90 93 ca 21 	sts	0x21CA, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    49d8:	81 e0       	ldi	r24, 0x01	; 1
    49da:	e0 e8       	ldi	r30, 0x80	; 128
    49dc:	f6 e0       	ldi	r31, 0x06	; 6
    49de:	86 83       	std	Z+6, r24	; 0x06
}
    49e0:	ff 91       	pop	r31
    49e2:	ef 91       	pop	r30
    49e4:	bf 91       	pop	r27
    49e6:	af 91       	pop	r26
    49e8:	9f 91       	pop	r25
    49ea:	8f 91       	pop	r24
    49ec:	7f 91       	pop	r23
    49ee:	6f 91       	pop	r22
    49f0:	5f 91       	pop	r21
    49f2:	4f 91       	pop	r20
    49f4:	3f 91       	pop	r19
    49f6:	2f 91       	pop	r18
    49f8:	0f 90       	pop	r0
    49fa:	0b be       	out	0x3b, r0	; 59
    49fc:	0f 90       	pop	r0
    49fe:	0f be       	out	0x3f, r0	; 63
    4a00:	0f 90       	pop	r0
    4a02:	1f 90       	pop	r1
    4a04:	18 95       	reti

00004a06 <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_vect)
{
    4a06:	1f 92       	push	r1
    4a08:	0f 92       	push	r0
    4a0a:	0f b6       	in	r0, 0x3f	; 63
    4a0c:	0f 92       	push	r0
    4a0e:	0b b6       	in	r0, 0x3b	; 59
    4a10:	0f 92       	push	r0
    4a12:	11 24       	eor	r1, r1
    4a14:	2f 93       	push	r18
    4a16:	3f 93       	push	r19
    4a18:	4f 93       	push	r20
    4a1a:	5f 93       	push	r21
    4a1c:	6f 93       	push	r22
    4a1e:	7f 93       	push	r23
    4a20:	8f 93       	push	r24
    4a22:	9f 93       	push	r25
    4a24:	af 93       	push	r26
    4a26:	bf 93       	push	r27
    4a28:	ef 93       	push	r30
    4a2a:	ff 93       	push	r31
	if (--ax.a[Y_AXIS].postscale_counter != 0) {
    4a2c:	80 91 ba 21 	lds	r24, 0x21BA
    4a30:	90 91 bb 21 	lds	r25, 0x21BB
    4a34:	01 97       	sbiw	r24, 0x01	; 1
    4a36:	80 93 ba 21 	sts	0x21BA, r24
    4a3a:	90 93 bb 21 	sts	0x21BB, r25
    4a3e:	89 2b       	or	r24, r25
    4a40:	a1 f5       	brne	.+104    	; 0x4aaa <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4a42:	e0 ea       	ldi	r30, 0xA0	; 160
    4a44:	f6 e0       	ldi	r31, 0x06	; 6
    4a46:	81 e0       	ldi	r24, 0x01	; 1
    4a48:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y_AXIS].step_counter == 0) {
    4a4a:	80 91 b2 21 	lds	r24, 0x21B2
    4a4e:	90 91 b3 21 	lds	r25, 0x21B3
    4a52:	a0 91 b4 21 	lds	r26, 0x21B4
    4a56:	b0 91 b5 21 	lds	r27, 0x21B5
    4a5a:	01 97       	sbiw	r24, 0x01	; 1
    4a5c:	a1 09       	sbc	r26, r1
    4a5e:	b1 09       	sbc	r27, r1
    4a60:	80 93 b2 21 	sts	0x21B2, r24
    4a64:	90 93 b3 21 	sts	0x21B3, r25
    4a68:	a0 93 b4 21 	sts	0x21B4, r26
    4a6c:	b0 93 b5 21 	sts	0x21B5, r27
    4a70:	00 97       	sbiw	r24, 0x00	; 0
    4a72:	a1 05       	cpc	r26, r1
    4a74:	b1 05       	cpc	r27, r1
    4a76:	69 f4       	brne	.+26     	; 0x4a92 <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4a78:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4a7c:	84 e0       	ldi	r24, 0x04	; 4
    4a7e:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4a80:	80 91 a0 21 	lds	r24, 0x21A0
    4a84:	8b 7f       	andi	r24, 0xFB	; 251
    4a86:	80 93 a0 21 	sts	0x21A0, r24
		if (ax.active_axes == 0) {
    4a8a:	88 23       	and	r24, r24
    4a8c:	11 f4       	brne	.+4      	; 0x4a92 <__vector_77+0x8c>
			st_execute_move();
    4a8e:	0e 94 74 23 	call	0x46e8	; 0x46e8 <st_execute_move>
		}
	}
	ax.a[Y_AXIS].postscale_counter = ax.a[Y_AXIS].postscale_value;
    4a92:	80 91 b8 21 	lds	r24, 0x21B8
    4a96:	90 91 b9 21 	lds	r25, 0x21B9
    4a9a:	80 93 ba 21 	sts	0x21BA, r24
    4a9e:	90 93 bb 21 	sts	0x21BB, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4aa2:	81 e0       	ldi	r24, 0x01	; 1
    4aa4:	e0 ea       	ldi	r30, 0xA0	; 160
    4aa6:	f6 e0       	ldi	r31, 0x06	; 6
    4aa8:	86 83       	std	Z+6, r24	; 0x06
}
    4aaa:	ff 91       	pop	r31
    4aac:	ef 91       	pop	r30
    4aae:	bf 91       	pop	r27
    4ab0:	af 91       	pop	r26
    4ab2:	9f 91       	pop	r25
    4ab4:	8f 91       	pop	r24
    4ab6:	7f 91       	pop	r23
    4ab8:	6f 91       	pop	r22
    4aba:	5f 91       	pop	r21
    4abc:	4f 91       	pop	r20
    4abe:	3f 91       	pop	r19
    4ac0:	2f 91       	pop	r18
    4ac2:	0f 90       	pop	r0
    4ac4:	0b be       	out	0x3b, r0	; 59
    4ac6:	0f 90       	pop	r0
    4ac8:	0f be       	out	0x3f, r0	; 63
    4aca:	0f 90       	pop	r0
    4acc:	1f 90       	pop	r1
    4ace:	18 95       	reti

00004ad0 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices becuase it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_vect)
{
    4ad0:	1f 92       	push	r1
    4ad2:	0f 92       	push	r0
    4ad4:	0f b6       	in	r0, 0x3f	; 63
    4ad6:	0f 92       	push	r0
    4ad8:	0b b6       	in	r0, 0x3b	; 59
    4ada:	0f 92       	push	r0
    4adc:	11 24       	eor	r1, r1
    4ade:	2f 93       	push	r18
    4ae0:	3f 93       	push	r19
    4ae2:	4f 93       	push	r20
    4ae4:	5f 93       	push	r21
    4ae6:	6f 93       	push	r22
    4ae8:	7f 93       	push	r23
    4aea:	8f 93       	push	r24
    4aec:	9f 93       	push	r25
    4aee:	af 93       	push	r26
    4af0:	bf 93       	push	r27
    4af2:	ef 93       	push	r30
    4af4:	ff 93       	push	r31
	if (--ax.a[X_AXIS].postscale_counter != 0) {// get out fast, if you need to
    4af6:	80 91 ab 21 	lds	r24, 0x21AB
    4afa:	90 91 ac 21 	lds	r25, 0x21AC
    4afe:	01 97       	sbiw	r24, 0x01	; 1
    4b00:	80 93 ab 21 	sts	0x21AB, r24
    4b04:	90 93 ac 21 	sts	0x21AC, r25
    4b08:	89 2b       	or	r24, r25
    4b0a:	a1 f5       	brne	.+104    	; 0x4b74 <__vector_14+0xa4>
		return;
	}
	X_MOTOR_PORT.OUTSET = STEP_BIT_bm;			// turn X step bit on
    4b0c:	e0 e0       	ldi	r30, 0x00	; 0
    4b0e:	f6 e0       	ldi	r31, 0x06	; 6
    4b10:	81 e0       	ldi	r24, 0x01	; 1
    4b12:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[X_AXIS].step_counter == 0) {		// end-of-move processing
    4b14:	80 91 a3 21 	lds	r24, 0x21A3
    4b18:	90 91 a4 21 	lds	r25, 0x21A4
    4b1c:	a0 91 a5 21 	lds	r26, 0x21A5
    4b20:	b0 91 a6 21 	lds	r27, 0x21A6
    4b24:	01 97       	sbiw	r24, 0x01	; 1
    4b26:	a1 09       	sbc	r26, r1
    4b28:	b1 09       	sbc	r27, r1
    4b2a:	80 93 a3 21 	sts	0x21A3, r24
    4b2e:	90 93 a4 21 	sts	0x21A4, r25
    4b32:	a0 93 a5 21 	sts	0x21A5, r26
    4b36:	b0 93 a6 21 	sts	0x21A6, r27
    4b3a:	00 97       	sbiw	r24, 0x00	; 0
    4b3c:	a1 05       	cpc	r26, r1
    4b3e:	b1 05       	cpc	r27, r1
    4b40:	69 f4       	brne	.+26     	; 0x4b5c <__vector_14+0x8c>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    4b42:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4b46:	84 e0       	ldi	r24, 0x04	; 4
    4b48:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    4b4a:	80 91 a0 21 	lds	r24, 0x21A0
    4b4e:	87 7f       	andi	r24, 0xF7	; 247
    4b50:	80 93 a0 21 	sts	0x21A0, r24
		if (ax.active_axes == 0) {				// if all axes are done
    4b54:	88 23       	and	r24, r24
    4b56:	11 f4       	brne	.+4      	; 0x4b5c <__vector_14+0x8c>
			st_execute_move();					// ...run the next move
    4b58:	0e 94 74 23 	call	0x46e8	; 0x46e8 <st_execute_move>
		}
	}
	ax.a[X_AXIS].postscale_counter = ax.a[X_AXIS].postscale_value;// reset post-scaler counter
    4b5c:	80 91 a9 21 	lds	r24, 0x21A9
    4b60:	90 91 aa 21 	lds	r25, 0x21AA
    4b64:	80 93 ab 21 	sts	0x21AB, r24
    4b68:	90 93 ac 21 	sts	0x21AC, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    4b6c:	81 e0       	ldi	r24, 0x01	; 1
    4b6e:	e0 e0       	ldi	r30, 0x00	; 0
    4b70:	f6 e0       	ldi	r31, 0x06	; 6
    4b72:	86 83       	std	Z+6, r24	; 0x06
}
    4b74:	ff 91       	pop	r31
    4b76:	ef 91       	pop	r30
    4b78:	bf 91       	pop	r27
    4b7a:	af 91       	pop	r26
    4b7c:	9f 91       	pop	r25
    4b7e:	8f 91       	pop	r24
    4b80:	7f 91       	pop	r23
    4b82:	6f 91       	pop	r22
    4b84:	5f 91       	pop	r21
    4b86:	4f 91       	pop	r20
    4b88:	3f 91       	pop	r19
    4b8a:	2f 91       	pop	r18
    4b8c:	0f 90       	pop	r0
    4b8e:	0b be       	out	0x3b, r0	; 59
    4b90:	0f 90       	pop	r0
    4b92:	0f be       	out	0x3f, r0	; 63
    4b94:	0f 90       	pop	r0
    4b96:	1f 90       	pop	r1
    4b98:	18 95       	reti

00004b9a <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    4b9a:	e0 ea       	ldi	r30, 0xA0	; 160
    4b9c:	f0 e0       	ldi	r31, 0x00	; 0
    4b9e:	82 81       	ldd	r24, Z+2	; 0x02
    4ba0:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    4ba2:	98 ed       	ldi	r25, 0xD8	; 216
    4ba4:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4ba6:	82 83       	std	Z+2, r24	; 0x02
}
    4ba8:	08 95       	ret

00004baa <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    4baa:	e0 ea       	ldi	r30, 0xA0	; 160
    4bac:	f0 e0       	ldi	r31, 0x00	; 0
    4bae:	82 81       	ldd	r24, Z+2	; 0x02
    4bb0:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    4bb2:	98 ed       	ldi	r25, 0xD8	; 216
    4bb4:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4bb6:	82 83       	std	Z+2, r24	; 0x02
}
    4bb8:	08 95       	ret

00004bba <xio_null_signal>:
 */

int xio_null_signal(uint8_t sig)
{
	return (TG_NOOP);
}
    4bba:	81 e0       	ldi	r24, 0x01	; 1
    4bbc:	90 e0       	ldi	r25, 0x00	; 0
    4bbe:	08 95       	ret

00004bc0 <xio_null_line>:
 */

int xio_null_line(char * buf)
{
	return (TG_OK);
}
    4bc0:	80 e0       	ldi	r24, 0x00	; 0
    4bc2:	90 e0       	ldi	r25, 0x00	; 0
    4bc4:	08 95       	ret

00004bc6 <xio_fget_ln>:
 *	dev		XIO device enumeration
 */

int xio_fget_ln(uint8_t dev, char *buf, uint8_t len)
{
	switch (dev) {
    4bc6:	81 30       	cpi	r24, 0x01	; 1
    4bc8:	51 f0       	breq	.+20     	; 0x4bde <xio_fget_ln+0x18>
    4bca:	81 30       	cpi	r24, 0x01	; 1
    4bcc:	28 f0       	brcs	.+10     	; 0x4bd8 <xio_fget_ln+0x12>
    4bce:	84 30       	cpi	r24, 0x04	; 4
    4bd0:	59 f0       	breq	.+22     	; 0x4be8 <xio_fget_ln+0x22>
    4bd2:	20 e1       	ldi	r18, 0x10	; 16
    4bd4:	30 e0       	ldi	r19, 0x00	; 0
    4bd6:	0d c0       	rjmp	.+26     	; 0x4bf2 <xio_fget_ln+0x2c>
    4bd8:	20 e0       	ldi	r18, 0x00	; 0
    4bda:	30 e0       	ldi	r19, 0x00	; 0
    4bdc:	0a c0       	rjmp	.+20     	; 0x4bf2 <xio_fget_ln+0x2c>
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): return (xio_usb_readln(buf, len));
    4bde:	cb 01       	movw	r24, r22
    4be0:	64 2f       	mov	r22, r20
    4be2:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <xio_usb_readln>
    4be6:	04 c0       	rjmp	.+8      	; 0x4bf0 <xio_fget_ln+0x2a>
//		case (XIO_DEV_AUX): return (xio_aux_readln(buf, len));
//		case (XIO_DEV_RS485): return (xio_rs485_readln(buf, len));
		case (XIO_DEV_PGM): return (xio_pgm_readln(buf, len));
    4be8:	cb 01       	movw	r24, r22
    4bea:	64 2f       	mov	r22, r20
    4bec:	0e 94 36 2d 	call	0x5a6c	; 0x5a6c <xio_pgm_readln>
    4bf0:	9c 01       	movw	r18, r24
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4bf2:	c9 01       	movw	r24, r18
    4bf4:	08 95       	ret

00004bf6 <xio_control>:
 * xio_control() - common entry point for device control functions
 */

int8_t xio_control(uint8_t dev, const uint16_t control, const int16_t arg)
{
	switch (dev) {
    4bf6:	81 30       	cpi	r24, 0x01	; 1
    4bf8:	41 f0       	breq	.+16     	; 0x4c0a <xio_control+0x14>
    4bfa:	81 30       	cpi	r24, 0x01	; 1
    4bfc:	20 f0       	brcs	.+8      	; 0x4c06 <xio_control+0x10>
    4bfe:	84 30       	cpi	r24, 0x04	; 4
    4c00:	49 f0       	breq	.+18     	; 0x4c14 <xio_control+0x1e>
    4c02:	80 e1       	ldi	r24, 0x10	; 16
    4c04:	08 95       	ret
    4c06:	80 e0       	ldi	r24, 0x00	; 0
    4c08:	08 95       	ret
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): return (xio_usb_control(control, arg));
    4c0a:	cb 01       	movw	r24, r22
    4c0c:	ba 01       	movw	r22, r20
    4c0e:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <xio_usb_control>
    4c12:	08 95       	ret
//		case (XIO_DEV_AUX): return (xio_aux_control(control, arg));
//		case (XIO_DEV_RS485): return (xio_rs485_control(control, arg));
		case (XIO_DEV_PGM): return (xio_pgm_control(control, arg));
    4c14:	cb 01       	movw	r24, r22
    4c16:	ba 01       	movw	r22, r20
    4c18:	0e 94 c7 2c 	call	0x598e	; 0x598e <xio_pgm_control>
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4c1c:	08 95       	ret

00004c1e <xio_dev_init>:
 * xio_dev_init() - common entry point for device init functions
 */

int8_t xio_dev_init(uint8_t dev, const int16_t arg)
{
	switch (dev) {
    4c1e:	81 30       	cpi	r24, 0x01	; 1
    4c20:	31 f0       	breq	.+12     	; 0x4c2e <xio_dev_init+0x10>
    4c22:	81 30       	cpi	r24, 0x01	; 1
    4c24:	38 f0       	brcs	.+14     	; 0x4c34 <xio_dev_init+0x16>
    4c26:	84 30       	cpi	r24, 0x04	; 4
    4c28:	39 f0       	breq	.+14     	; 0x4c38 <xio_dev_init+0x1a>
    4c2a:	80 e1       	ldi	r24, 0x10	; 16
    4c2c:	08 95       	ret
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): xio_usb_init(arg); return (TG_OK);
    4c2e:	cb 01       	movw	r24, r22
    4c30:	0e 94 48 26 	call	0x4c90	; 0x4c90 <xio_usb_init>
    4c34:	80 e0       	ldi	r24, 0x00	; 0
    4c36:	08 95       	ret
//		case (XIO_DEV_AUX): xio_aux_init(arg); return (TG_OK);
//		case (XIO_DEV_RS485): xio_rs485_init(arg); return (TG_OK);
		case (XIO_DEV_PGM): xio_pgm_init(arg); return (TG_OK);
    4c38:	cb 01       	movw	r24, r22
    4c3a:	0e 94 25 2c 	call	0x584a	; 0x584a <xio_pgm_init>
    4c3e:	80 e0       	ldi	r24, 0x00	; 0
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4c40:	08 95       	ret

00004c42 <xio_init>:
 */

void xio_init(void)
{	
	// USB port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_SEMICOLONS | XIO_BAUD_115200);
    4c42:	85 e0       	ldi	r24, 0x05	; 5
    4c44:	90 e5       	ldi	r25, 0x50	; 80
    4c46:	0e 94 48 26 	call	0x4c90	; 0x4c90 <xio_usb_init>

	// PGM file defaults are:	XIO_RD | XIO_BLOCK
//	xio_pgm_init(XIO_ECHO | XIO_CRLF | XIO_LINEMODE | XIO_SEMICOLONS);
	xio_pgm_init(XIO_LINEMODE);
    4c4a:	80 e0       	ldi	r24, 0x00	; 0
    4c4c:	90 e1       	ldi	r25, 0x10	; 16
    4c4e:	0e 94 25 2c 	call	0x584a	; 0x584a <xio_pgm_init>

	stddev = &dev_usb;				// stddev is a convenience
    4c52:	80 e0       	ldi	r24, 0x00	; 0
    4c54:	90 e2       	ldi	r25, 0x20	; 32
    4c56:	80 93 b2 24 	sts	0x24B2, r24
    4c5a:	90 93 b3 24 	sts	0x24B3, r25
	stdin = &dev_usb;				// define the console device
    4c5e:	80 93 0c 25 	sts	0x250C, r24
    4c62:	90 93 0d 25 	sts	0x250D, r25
	stdout = &dev_usb;				// ...
    4c66:	80 93 0e 25 	sts	0x250E, r24
    4c6a:	90 93 0f 25 	sts	0x250F, r25
	stderr = &dev_usb;				// ...
    4c6e:	80 93 10 25 	sts	0x2510, r24
    4c72:	90 93 11 25 	sts	0x2511, r25

	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    4c76:	0f 92       	push	r0
    4c78:	0f 92       	push	r0
    4c7a:	8a e3       	ldi	r24, 0x3A	; 58
    4c7c:	97 e0       	ldi	r25, 0x07	; 7
    4c7e:	ed b7       	in	r30, 0x3d	; 61
    4c80:	fe b7       	in	r31, 0x3e	; 62
    4c82:	81 83       	std	Z+1, r24	; 0x01
    4c84:	92 83       	std	Z+2, r25	; 0x02
    4c86:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
    4c8a:	0f 90       	pop	r0
    4c8c:	0f 90       	pop	r0
}
    4c8e:	08 95       	ret

00004c90 <xio_usb_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_usb_init(const uint16_t control)
{
    4c90:	9c 01       	movw	r18, r24
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    4c92:	e8 2f       	mov	r30, r24
    4c94:	ef 70       	andi	r30, 0x0F	; 15

	// transfer control flags to internal flag bits
	f.flags = XIO_FLAG_USB_DEFS_gm;		// set flags to defaults & initial state
    4c96:	87 e3       	ldi	r24, 0x37	; 55
    4c98:	90 e0       	ldi	r25, 0x00	; 0
    4c9a:	80 93 df 21 	sts	0x21DF, r24
    4c9e:	90 93 e0 21 	sts	0x21E0, r25
		f.flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		f.flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    4ca2:	26 ff       	sbrs	r18, 6
    4ca4:	06 c0       	rjmp	.+12     	; 0x4cb2 <xio_usb_init+0x22>
		f.flags |= XIO_FLAG_BLOCK_bm;
    4ca6:	87 e3       	ldi	r24, 0x37	; 55
    4ca8:	90 e0       	ldi	r25, 0x00	; 0
    4caa:	80 93 df 21 	sts	0x21DF, r24
    4cae:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOBLOCK) {
    4cb2:	27 ff       	sbrs	r18, 7
    4cb4:	06 c0       	rjmp	.+12     	; 0x4cc2 <xio_usb_init+0x32>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    4cb6:	83 e3       	ldi	r24, 0x33	; 51
    4cb8:	90 e0       	ldi	r25, 0x00	; 0
    4cba:	80 93 df 21 	sts	0x21DF, r24
    4cbe:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_ECHO) {
    4cc2:	30 ff       	sbrs	r19, 0
    4cc4:	09 c0       	rjmp	.+18     	; 0x4cd8 <xio_usb_init+0x48>
		f.flags |= XIO_FLAG_ECHO_bm;
    4cc6:	80 91 df 21 	lds	r24, 0x21DF
    4cca:	90 91 e0 21 	lds	r25, 0x21E0
    4cce:	80 61       	ori	r24, 0x10	; 16
    4cd0:	80 93 df 21 	sts	0x21DF, r24
    4cd4:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOECHO) {
    4cd8:	31 ff       	sbrs	r19, 1
    4cda:	09 c0       	rjmp	.+18     	; 0x4cee <xio_usb_init+0x5e>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    4cdc:	80 91 df 21 	lds	r24, 0x21DF
    4ce0:	90 91 e0 21 	lds	r25, 0x21E0
    4ce4:	8f 7e       	andi	r24, 0xEF	; 239
    4ce6:	80 93 df 21 	sts	0x21DF, r24
    4cea:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_CRLF) {
    4cee:	32 ff       	sbrs	r19, 2
    4cf0:	09 c0       	rjmp	.+18     	; 0x4d04 <xio_usb_init+0x74>
		f.flags |= XIO_FLAG_CRLF_bm;
    4cf2:	80 91 df 21 	lds	r24, 0x21DF
    4cf6:	90 91 e0 21 	lds	r25, 0x21E0
    4cfa:	80 62       	ori	r24, 0x20	; 32
    4cfc:	80 93 df 21 	sts	0x21DF, r24
    4d00:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOCRLF) {
    4d04:	33 ff       	sbrs	r19, 3
    4d06:	09 c0       	rjmp	.+18     	; 0x4d1a <xio_usb_init+0x8a>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    4d08:	80 91 df 21 	lds	r24, 0x21DF
    4d0c:	90 91 e0 21 	lds	r25, 0x21E0
    4d10:	8f 7d       	andi	r24, 0xDF	; 223
    4d12:	80 93 df 21 	sts	0x21DF, r24
    4d16:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_LINEMODE) {
    4d1a:	34 ff       	sbrs	r19, 4
    4d1c:	09 c0       	rjmp	.+18     	; 0x4d30 <xio_usb_init+0xa0>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    4d1e:	80 91 df 21 	lds	r24, 0x21DF
    4d22:	90 91 e0 21 	lds	r25, 0x21E0
    4d26:	80 64       	ori	r24, 0x40	; 64
    4d28:	80 93 df 21 	sts	0x21DF, r24
    4d2c:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOLINEMODE) {
    4d30:	35 ff       	sbrs	r19, 5
    4d32:	09 c0       	rjmp	.+18     	; 0x4d46 <xio_usb_init+0xb6>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    4d34:	80 91 df 21 	lds	r24, 0x21DF
    4d38:	90 91 e0 21 	lds	r25, 0x21E0
    4d3c:	8f 7b       	andi	r24, 0xBF	; 191
    4d3e:	80 93 df 21 	sts	0x21DF, r24
    4d42:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_SEMICOLONS) {
    4d46:	36 ff       	sbrs	r19, 6
    4d48:	09 c0       	rjmp	.+18     	; 0x4d5c <xio_usb_init+0xcc>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    4d4a:	80 91 df 21 	lds	r24, 0x21DF
    4d4e:	90 91 e0 21 	lds	r25, 0x21E0
    4d52:	80 68       	ori	r24, 0x80	; 128
    4d54:	80 93 df 21 	sts	0x21DF, r24
    4d58:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    4d5c:	37 ff       	sbrs	r19, 7
    4d5e:	09 c0       	rjmp	.+18     	; 0x4d72 <xio_usb_init+0xe2>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    4d60:	80 91 df 21 	lds	r24, 0x21DF
    4d64:	90 91 e0 21 	lds	r25, 0x21E0
    4d68:	8f 77       	andi	r24, 0x7F	; 127
    4d6a:	80 93 df 21 	sts	0x21DF, r24
    4d6e:	90 93 e0 21 	sts	0x21E0, r25
	}

	// character signals and error returns
	f.sig = 0;
    4d72:	10 92 e1 21 	sts	0x21E1, r1
	dev_usb.udata = &(f.sig);				// bind sig register to FILE struct
    4d76:	81 ee       	ldi	r24, 0xE1	; 225
    4d78:	91 e2       	ldi	r25, 0x21	; 33
    4d7a:	80 93 0c 20 	sts	0x200C, r24
    4d7e:	90 93 0d 20 	sts	0x200D, r25

	// setup internal RX/TX buffers
	f.rx_buf_head = 1;						// can't use location 0
    4d82:	81 e0       	ldi	r24, 0x01	; 1
    4d84:	80 93 ec 21 	sts	0x21EC, r24
	f.rx_buf_tail = 1;
    4d88:	80 93 eb 21 	sts	0x21EB, r24
	f.tx_buf_head = 1;
    4d8c:	80 93 ee 21 	sts	0x21EE, r24
	f.tx_buf_tail = 1;
    4d90:	80 93 ed 21 	sts	0x21ED, r24
	f.len = sizeof(f.buf);					// offset to zero
    4d94:	82 e0       	ldi	r24, 0x02	; 2
    4d96:	80 93 e4 21 	sts	0x21E4, r24

	// bindings
	f.sig_func = &xio_null_signal;			// bind null signal handler
    4d9a:	8d ed       	ldi	r24, 0xDD	; 221
    4d9c:	95 e2       	ldi	r25, 0x25	; 37
    4d9e:	80 93 e7 21 	sts	0x21E7, r24
    4da2:	90 93 e8 21 	sts	0x21E8, r25
	f.line_func = &xio_null_line;			// bind null line handler
    4da6:	80 ee       	ldi	r24, 0xE0	; 224
    4da8:	95 e2       	ldi	r25, 0x25	; 37
    4daa:	80 93 e9 21 	sts	0x21E9, r24
    4dae:	90 93 ea 21 	sts	0x21EA, r25

	f.usart = &USB_USART;					// bind USART structure
    4db2:	80 ea       	ldi	r24, 0xA0	; 160
    4db4:	98 e0       	ldi	r25, 0x08	; 8
    4db6:	80 93 14 22 	sts	0x2214, r24
    4dba:	90 93 15 22 	sts	0x2215, r25
	f.port = &USB_PORT;						// bind PORT structure
    4dbe:	80 e4       	ldi	r24, 0x40	; 64
    4dc0:	96 e0       	ldi	r25, 0x06	; 6
    4dc2:	80 93 16 22 	sts	0x2216, r24
    4dc6:	90 93 17 22 	sts	0x2217, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    4dca:	ee 23       	and	r30, r30
    4dcc:	09 f4       	brne	.+2      	; 0x4dd0 <xio_usb_init+0x140>
    4dce:	e5 e0       	ldi	r30, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    4dd0:	8e 2f       	mov	r24, r30
    4dd2:	90 e0       	ldi	r25, 0x00	; 0
    4dd4:	fc 01       	movw	r30, r24
    4dd6:	ec 5d       	subi	r30, 0xDC	; 220
    4dd8:	f8 4f       	sbci	r31, 0xF8	; 248
    4dda:	e4 91       	lpm	r30, Z+
    4ddc:	a0 ea       	ldi	r26, 0xA0	; 160
    4dde:	b8 e0       	ldi	r27, 0x08	; 8
    4de0:	16 96       	adiw	r26, 0x06	; 6
    4de2:	ec 93       	st	X, r30
    4de4:	16 97       	sbiw	r26, 0x06	; 6
	f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    4de6:	81 5d       	subi	r24, 0xD1	; 209
    4de8:	98 4f       	sbci	r25, 0xF8	; 248
    4dea:	fc 01       	movw	r30, r24
    4dec:	84 91       	lpm	r24, Z+
    4dee:	17 96       	adiw	r26, 0x07	; 7
    4df0:	8c 93       	st	X, r24
    4df2:	17 97       	sbiw	r26, 0x07	; 7
	f.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm; // enable tx and rx on USART
    4df4:	88 e1       	ldi	r24, 0x18	; 24
    4df6:	14 96       	adiw	r26, 0x04	; 4
    4df8:	8c 93       	st	X, r24
    4dfa:	14 97       	sbiw	r26, 0x04	; 4
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    4dfc:	81 e2       	ldi	r24, 0x21	; 33
    4dfe:	13 96       	adiw	r26, 0x03	; 3
    4e00:	8c 93       	st	X, r24

	f.port->DIRCLR = USB_RX_bm;	 			// clr RX pin as input
    4e02:	e0 e4       	ldi	r30, 0x40	; 64
    4e04:	f6 e0       	ldi	r31, 0x06	; 6
    4e06:	84 e0       	ldi	r24, 0x04	; 4
    4e08:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_TX_bm; 			// set TX pin as output
    4e0a:	88 e0       	ldi	r24, 0x08	; 8
    4e0c:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_TX_bm;				// set TX HI as initial state
    4e0e:	85 83       	std	Z+5, r24	; 0x05
	f.port->DIRCLR = USB_CTS_bm; 			// set CTS pin as input
    4e10:	81 e0       	ldi	r24, 0x01	; 1
    4e12:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_RTS_bm; 			// set RTS pin as output
    4e14:	82 e0       	ldi	r24, 0x02	; 2
    4e16:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
    4e18:	85 83       	std	Z+5, r24	; 0x05
//	f.port->OUTCLR = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
}
    4e1a:	08 95       	ret

00004e1c <xio_usb_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_usb_control(const uint16_t control, const int16_t arg)
{
    4e1c:	ac 01       	movw	r20, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    4e1e:	84 ff       	sbrs	r24, 4
    4e20:	05 c0       	rjmp	.+10     	; 0x4e2c <xio_usb_control+0x10>
		f.sig_func = (fptr_int_uint8)arg;
    4e22:	60 93 e7 21 	sts	0x21E7, r22
    4e26:	70 93 e8 21 	sts	0x21E8, r23
    4e2a:	8b c0       	rjmp	.+278    	; 0x4f42 <xio_usb_control+0x126>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    4e2c:	85 ff       	sbrs	r24, 5
    4e2e:	05 c0       	rjmp	.+10     	; 0x4e3a <xio_usb_control+0x1e>
		f.line_func = (fptr_int_char_p)arg;
    4e30:	60 93 e9 21 	sts	0x21E9, r22
    4e34:	70 93 ea 21 	sts	0x21EA, r23
    4e38:	84 c0       	rjmp	.+264    	; 0x4f42 <xio_usb_control+0x126>
		return (0);
	}
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    4e3a:	8f 70       	andi	r24, 0x0F	; 15
    4e3c:	90 70       	andi	r25, 0x00	; 0
    4e3e:	00 97       	sbiw	r24, 0x00	; 0
    4e40:	91 f0       	breq	.+36     	; 0x4e66 <xio_usb_control+0x4a>
		f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    4e42:	a0 91 14 22 	lds	r26, 0x2214
    4e46:	b0 91 15 22 	lds	r27, 0x2215
    4e4a:	9c 01       	movw	r18, r24
    4e4c:	2c 5d       	subi	r18, 0xDC	; 220
    4e4e:	38 4f       	sbci	r19, 0xF8	; 248
    4e50:	f9 01       	movw	r30, r18
    4e52:	24 91       	lpm	r18, Z+
    4e54:	16 96       	adiw	r26, 0x06	; 6
    4e56:	2c 93       	st	X, r18
    4e58:	16 97       	sbiw	r26, 0x06	; 6
		f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    4e5a:	81 5d       	subi	r24, 0xD1	; 209
    4e5c:	98 4f       	sbci	r25, 0xF8	; 248
    4e5e:	fc 01       	movw	r30, r24
    4e60:	84 91       	lpm	r24, Z+
    4e62:	17 96       	adiw	r26, 0x07	; 7
    4e64:	8c 93       	st	X, r24
	}
	if (control & XIO_BLOCK) {
    4e66:	46 ff       	sbrs	r20, 6
    4e68:	09 c0       	rjmp	.+18     	; 0x4e7c <xio_usb_control+0x60>
		f.flags |= XIO_FLAG_BLOCK_bm;
    4e6a:	80 91 df 21 	lds	r24, 0x21DF
    4e6e:	90 91 e0 21 	lds	r25, 0x21E0
    4e72:	84 60       	ori	r24, 0x04	; 4
    4e74:	80 93 df 21 	sts	0x21DF, r24
    4e78:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOBLOCK) {
    4e7c:	47 ff       	sbrs	r20, 7
    4e7e:	09 c0       	rjmp	.+18     	; 0x4e92 <xio_usb_control+0x76>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    4e80:	80 91 df 21 	lds	r24, 0x21DF
    4e84:	90 91 e0 21 	lds	r25, 0x21E0
    4e88:	8b 7f       	andi	r24, 0xFB	; 251
    4e8a:	80 93 df 21 	sts	0x21DF, r24
    4e8e:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_ECHO) {
    4e92:	50 ff       	sbrs	r21, 0
    4e94:	09 c0       	rjmp	.+18     	; 0x4ea8 <xio_usb_control+0x8c>
		f.flags |= XIO_FLAG_ECHO_bm;
    4e96:	80 91 df 21 	lds	r24, 0x21DF
    4e9a:	90 91 e0 21 	lds	r25, 0x21E0
    4e9e:	80 61       	ori	r24, 0x10	; 16
    4ea0:	80 93 df 21 	sts	0x21DF, r24
    4ea4:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOECHO) {
    4ea8:	51 ff       	sbrs	r21, 1
    4eaa:	09 c0       	rjmp	.+18     	; 0x4ebe <xio_usb_control+0xa2>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    4eac:	80 91 df 21 	lds	r24, 0x21DF
    4eb0:	90 91 e0 21 	lds	r25, 0x21E0
    4eb4:	8f 7e       	andi	r24, 0xEF	; 239
    4eb6:	80 93 df 21 	sts	0x21DF, r24
    4eba:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_CRLF) {
    4ebe:	52 ff       	sbrs	r21, 2
    4ec0:	09 c0       	rjmp	.+18     	; 0x4ed4 <xio_usb_control+0xb8>
		f.flags |= XIO_FLAG_CRLF_bm;
    4ec2:	80 91 df 21 	lds	r24, 0x21DF
    4ec6:	90 91 e0 21 	lds	r25, 0x21E0
    4eca:	80 62       	ori	r24, 0x20	; 32
    4ecc:	80 93 df 21 	sts	0x21DF, r24
    4ed0:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOCRLF) {
    4ed4:	53 ff       	sbrs	r21, 3
    4ed6:	09 c0       	rjmp	.+18     	; 0x4eea <xio_usb_control+0xce>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    4ed8:	80 91 df 21 	lds	r24, 0x21DF
    4edc:	90 91 e0 21 	lds	r25, 0x21E0
    4ee0:	8f 7d       	andi	r24, 0xDF	; 223
    4ee2:	80 93 df 21 	sts	0x21DF, r24
    4ee6:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_LINEMODE) {
    4eea:	54 ff       	sbrs	r21, 4
    4eec:	09 c0       	rjmp	.+18     	; 0x4f00 <xio_usb_control+0xe4>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    4eee:	80 91 df 21 	lds	r24, 0x21DF
    4ef2:	90 91 e0 21 	lds	r25, 0x21E0
    4ef6:	80 64       	ori	r24, 0x40	; 64
    4ef8:	80 93 df 21 	sts	0x21DF, r24
    4efc:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOLINEMODE) {
    4f00:	55 ff       	sbrs	r21, 5
    4f02:	09 c0       	rjmp	.+18     	; 0x4f16 <xio_usb_control+0xfa>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    4f04:	80 91 df 21 	lds	r24, 0x21DF
    4f08:	90 91 e0 21 	lds	r25, 0x21E0
    4f0c:	8f 7b       	andi	r24, 0xBF	; 191
    4f0e:	80 93 df 21 	sts	0x21DF, r24
    4f12:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_SEMICOLONS) {
    4f16:	56 ff       	sbrs	r21, 6
    4f18:	09 c0       	rjmp	.+18     	; 0x4f2c <xio_usb_control+0x110>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    4f1a:	80 91 df 21 	lds	r24, 0x21DF
    4f1e:	90 91 e0 21 	lds	r25, 0x21E0
    4f22:	80 68       	ori	r24, 0x80	; 128
    4f24:	80 93 df 21 	sts	0x21DF, r24
    4f28:	90 93 e0 21 	sts	0x21E0, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    4f2c:	57 ff       	sbrs	r21, 7
    4f2e:	09 c0       	rjmp	.+18     	; 0x4f42 <xio_usb_control+0x126>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    4f30:	80 91 df 21 	lds	r24, 0x21DF
    4f34:	90 91 e0 21 	lds	r25, 0x21E0
    4f38:	8f 77       	andi	r24, 0x7F	; 127
    4f3a:	80 93 df 21 	sts	0x21DF, r24
    4f3e:	90 93 e0 21 	sts	0x21E0, r25
	}
	return (0);
}
    4f42:	80 e0       	ldi	r24, 0x00	; 0
    4f44:	08 95       	ret

00004f46 <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(USB_RX_ISR_vect)		//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    4f46:	1f 92       	push	r1
    4f48:	0f 92       	push	r0
    4f4a:	0f b6       	in	r0, 0x3f	; 63
    4f4c:	0f 92       	push	r0
    4f4e:	0b b6       	in	r0, 0x3b	; 59
    4f50:	0f 92       	push	r0
    4f52:	11 24       	eor	r1, r1
    4f54:	8f 93       	push	r24
    4f56:	9f 93       	push	r25
    4f58:	af 93       	push	r26
    4f5a:	bf 93       	push	r27
    4f5c:	ef 93       	push	r30
    4f5e:	ff 93       	push	r31
	// normal path
	if ((--f.rx_buf_head) == 0) { 				// advance buffer head with wrap
    4f60:	80 91 ec 21 	lds	r24, 0x21EC
    4f64:	81 50       	subi	r24, 0x01	; 1
    4f66:	80 93 ec 21 	sts	0x21EC, r24
    4f6a:	80 91 ec 21 	lds	r24, 0x21EC
    4f6e:	88 23       	and	r24, r24
    4f70:	19 f4       	brne	.+6      	; 0x4f78 <__vector_25+0x32>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    4f72:	81 e1       	ldi	r24, 0x11	; 17
    4f74:	80 93 ec 21 	sts	0x21EC, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    4f78:	90 91 ec 21 	lds	r25, 0x21EC
    4f7c:	80 91 eb 21 	lds	r24, 0x21EB
    4f80:	98 17       	cp	r25, r24
    4f82:	61 f0       	breq	.+24     	; 0x4f9c <__vector_25+0x56>
		f.rx_buf[f.rx_buf_head] = f.usart->DATA;// (= USARTC0.DATA;)
    4f84:	e0 91 ec 21 	lds	r30, 0x21EC
    4f88:	f0 e0       	ldi	r31, 0x00	; 0
    4f8a:	a0 91 14 22 	lds	r26, 0x2214
    4f8e:	b0 91 15 22 	lds	r27, 0x2215
    4f92:	8c 91       	ld	r24, X
    4f94:	e1 52       	subi	r30, 0x21	; 33
    4f96:	fe 4d       	sbci	r31, 0xDE	; 222
    4f98:	81 8b       	std	Z+17, r24	; 0x11
    4f9a:	0c c0       	rjmp	.+24     	; 0x4fb4 <__vector_25+0x6e>
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    4f9c:	80 91 ec 21 	lds	r24, 0x21EC
    4fa0:	8f 5f       	subi	r24, 0xFF	; 255
    4fa2:	80 93 ec 21 	sts	0x21EC, r24
    4fa6:	80 91 ec 21 	lds	r24, 0x21EC
    4faa:	82 31       	cpi	r24, 0x12	; 18
    4fac:	18 f0       	brcs	.+6      	; 0x4fb4 <__vector_25+0x6e>
		f.rx_buf_head = 1;
    4fae:	81 e0       	ldi	r24, 0x01	; 1
    4fb0:	80 93 ec 21 	sts	0x21EC, r24
	}
	// activate flow control here or before it gets to this level
}
    4fb4:	ff 91       	pop	r31
    4fb6:	ef 91       	pop	r30
    4fb8:	bf 91       	pop	r27
    4fba:	af 91       	pop	r26
    4fbc:	9f 91       	pop	r25
    4fbe:	8f 91       	pop	r24
    4fc0:	0f 90       	pop	r0
    4fc2:	0b be       	out	0x3b, r0	; 59
    4fc4:	0f 90       	pop	r0
    4fc6:	0f be       	out	0x3f, r0	; 63
    4fc8:	0f 90       	pop	r0
    4fca:	1f 90       	pop	r1
    4fcc:	18 95       	reti

00004fce <xio_usb_queue_RX_char>:
/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_usb_queue_RX_char(const char c)
{
    4fce:	28 2f       	mov	r18, r24
	// normal path
	if ((--f.rx_buf_head) == 0) { 				// wrap condition
    4fd0:	80 91 ec 21 	lds	r24, 0x21EC
    4fd4:	81 50       	subi	r24, 0x01	; 1
    4fd6:	80 93 ec 21 	sts	0x21EC, r24
    4fda:	80 91 ec 21 	lds	r24, 0x21EC
    4fde:	88 23       	and	r24, r24
    4fe0:	19 f4       	brne	.+6      	; 0x4fe8 <xio_usb_queue_RX_char+0x1a>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    4fe2:	81 e1       	ldi	r24, 0x11	; 17
    4fe4:	80 93 ec 21 	sts	0x21EC, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    4fe8:	90 91 ec 21 	lds	r25, 0x21EC
    4fec:	80 91 eb 21 	lds	r24, 0x21EB
    4ff0:	98 17       	cp	r25, r24
    4ff2:	39 f0       	breq	.+14     	; 0x5002 <xio_usb_queue_RX_char+0x34>
		f.rx_buf[f.rx_buf_head] = c;			// FAKE INPUT DATA
    4ff4:	e0 91 ec 21 	lds	r30, 0x21EC
    4ff8:	f0 e0       	ldi	r31, 0x00	; 0
    4ffa:	e1 52       	subi	r30, 0x21	; 33
    4ffc:	fe 4d       	sbci	r31, 0xDE	; 222
    4ffe:	21 8b       	std	Z+17, r18	; 0x11
    5000:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    5002:	80 91 ec 21 	lds	r24, 0x21EC
    5006:	8f 5f       	subi	r24, 0xFF	; 255
    5008:	80 93 ec 21 	sts	0x21EC, r24
    500c:	80 91 ec 21 	lds	r24, 0x21EC
    5010:	82 31       	cpi	r24, 0x12	; 18
    5012:	18 f0       	brcs	.+6      	; 0x501a <xio_usb_queue_RX_char+0x4c>
		f.rx_buf_head = 1;
    5014:	81 e0       	ldi	r24, 0x01	; 1
    5016:	80 93 ec 21 	sts	0x21EC, r24
    501a:	08 95       	ret

0000501c <xio_usb_queue_RX_string>:
/*
 * xio_usb_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_usb_queue_RX_string(char *buf)
{
    501c:	1f 93       	push	r17
    501e:	cf 93       	push	r28
    5020:	df 93       	push	r29
    5022:	ec 01       	movw	r28, r24
    5024:	10 e0       	ldi	r17, 0x00	; 0
    5026:	02 c0       	rjmp	.+4      	; 0x502c <xio_usb_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_usb_queue_RX_char(c);
    5028:	0e 94 e7 27 	call	0x4fce	; 0x4fce <xio_usb_queue_RX_char>
void xio_usb_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    502c:	fe 01       	movw	r30, r28
    502e:	e1 0f       	add	r30, r17
    5030:	f1 1d       	adc	r31, r1
    5032:	80 81       	ld	r24, Z
    5034:	1f 5f       	subi	r17, 0xFF	; 255
    5036:	88 23       	and	r24, r24
    5038:	b9 f7       	brne	.-18     	; 0x5028 <xio_usb_queue_RX_string+0xc>
		xio_usb_queue_RX_char(c);
	}
}
    503a:	df 91       	pop	r29
    503c:	cf 91       	pop	r28
    503e:	1f 91       	pop	r17
    5040:	08 95       	ret

00005042 <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)		//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    5042:	1f 92       	push	r1
    5044:	0f 92       	push	r0
    5046:	0f b6       	in	r0, 0x3f	; 63
    5048:	0f 92       	push	r0
    504a:	0b b6       	in	r0, 0x3b	; 59
    504c:	0f 92       	push	r0
    504e:	11 24       	eor	r1, r1
    5050:	8f 93       	push	r24
    5052:	9f 93       	push	r25
    5054:	af 93       	push	r26
    5056:	bf 93       	push	r27
    5058:	ef 93       	push	r30
    505a:	ff 93       	push	r31
	if (f.tx_buf_head == f.tx_buf_tail) {			// buffer empty - disable ints
    505c:	90 91 ee 21 	lds	r25, 0x21EE
    5060:	80 91 ed 21 	lds	r24, 0x21ED
    5064:	98 17       	cp	r25, r24
    5066:	39 f4       	brne	.+14     	; 0x5076 <__vector_26+0x34>
		f.usart->CTRLA = USARTC0_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    5068:	e0 91 14 22 	lds	r30, 0x2214
    506c:	f0 91 15 22 	lds	r31, 0x2215
    5070:	80 e2       	ldi	r24, 0x20	; 32
    5072:	83 83       	std	Z+3, r24	; 0x03
    5074:	1e c0       	rjmp	.+60     	; 0x50b2 <__vector_26+0x70>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(f.flags)) {
    5076:	80 91 df 21 	lds	r24, 0x21DF
    507a:	90 91 e0 21 	lds	r25, 0x21E0
    507e:	93 fd       	sbrc	r25, 3
    5080:	18 c0       	rjmp	.+48     	; 0x50b2 <__vector_26+0x70>
		if (--(f.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    5082:	80 91 ed 21 	lds	r24, 0x21ED
    5086:	81 50       	subi	r24, 0x01	; 1
    5088:	80 93 ed 21 	sts	0x21ED, r24
    508c:	80 91 ed 21 	lds	r24, 0x21ED
    5090:	88 23       	and	r24, r24
    5092:	19 f4       	brne	.+6      	; 0x509a <__vector_26+0x58>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    5094:	81 e1       	ldi	r24, 0x11	; 17
    5096:	80 93 ed 21 	sts	0x21ED, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];	// write char to TX DATA register
    509a:	e0 91 14 22 	lds	r30, 0x2214
    509e:	f0 91 15 22 	lds	r31, 0x2215
    50a2:	a0 91 ed 21 	lds	r26, 0x21ED
    50a6:	b0 e0       	ldi	r27, 0x00	; 0
    50a8:	a1 52       	subi	r26, 0x21	; 33
    50aa:	be 4d       	sbci	r27, 0xDE	; 222
    50ac:	93 96       	adiw	r26, 0x23	; 35
    50ae:	8c 91       	ld	r24, X
    50b0:	80 83       	st	Z, r24
	}
}
    50b2:	ff 91       	pop	r31
    50b4:	ef 91       	pop	r30
    50b6:	bf 91       	pop	r27
    50b8:	af 91       	pop	r26
    50ba:	9f 91       	pop	r25
    50bc:	8f 91       	pop	r24
    50be:	0f 90       	pop	r0
    50c0:	0b be       	out	0x3b, r0	; 59
    50c2:	0f 90       	pop	r0
    50c4:	0f be       	out	0x3f, r0	; 63
    50c6:	0f 90       	pop	r0
    50c8:	1f 90       	pop	r1
    50ca:	18 95       	reti

000050cc <xio_usb_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
    50cc:	48 2f       	mov	r20, r24
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    50ce:	20 91 df 21 	lds	r18, 0x21DF
    50d2:	30 91 e0 21 	lds	r19, 0x21E0
    50d6:	d9 01       	movw	r26, r18
    50d8:	a4 70       	andi	r26, 0x04	; 4
    50da:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    50dc:	b9 01       	movw	r22, r18
    50de:	60 72       	andi	r22, 0x20	; 32
    50e0:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
    50e2:	90 91 ee 21 	lds	r25, 0x21EE
    50e6:	91 50       	subi	r25, 0x01	; 1
    50e8:	c1 f4       	brne	.+48     	; 0x511a <xio_usb_putc+0x4e>
    50ea:	91 e1       	ldi	r25, 0x11	; 17
    50ec:	16 c0       	rjmp	.+44     	; 0x511a <xio_usb_putc+0x4e>
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    50ee:	10 97       	sbiw	r26, 0x00	; 0
    50f0:	61 f0       	breq	.+24     	; 0x510a <xio_usb_putc+0x3e>
			sleep_mode();
    50f2:	80 91 48 00 	lds	r24, 0x0048
    50f6:	81 60       	ori	r24, 0x01	; 1
    50f8:	80 93 48 00 	sts	0x0048, r24
    50fc:	88 95       	sleep
    50fe:	80 91 48 00 	lds	r24, 0x0048
    5102:	8e 7f       	andi	r24, 0xFE	; 254
    5104:	80 93 48 00 	sts	0x0048, r24
    5108:	08 c0       	rjmp	.+16     	; 0x511a <xio_usb_putc+0x4e>
    510a:	90 93 ef 21 	sts	0x21EF, r25
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    510e:	83 e0       	ldi	r24, 0x03	; 3
    5110:	80 93 e1 21 	sts	0x21E1, r24
    5114:	2f ef       	ldi	r18, 0xFF	; 255
    5116:	3f ef       	ldi	r19, 0xFF	; 255
    5118:	54 c0       	rjmp	.+168    	; 0x51c2 <xio_usb_putc+0xf6>
int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
    511a:	80 91 ed 21 	lds	r24, 0x21ED
    511e:	98 17       	cp	r25, r24
    5120:	31 f3       	breq	.-52     	; 0x50ee <xio_usb_putc+0x22>
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
    5122:	90 93 ee 21 	sts	0x21EE, r25
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer
    5126:	e0 91 ee 21 	lds	r30, 0x21EE
    512a:	f0 e0       	ldi	r31, 0x00	; 0
    512c:	e1 52       	subi	r30, 0x21	; 33
    512e:	fe 4d       	sbci	r31, 0xDE	; 222
    5130:	43 a3       	std	Z+35, r20	; 0x23

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    5132:	61 15       	cp	r22, r1
    5134:	71 05       	cpc	r23, r1
    5136:	21 f0       	breq	.+8      	; 0x5140 <xio_usb_putc+0x74>
    5138:	4a 30       	cpi	r20, 0x0A	; 10
    513a:	11 f4       	brne	.+4      	; 0x5140 <xio_usb_putc+0x74>
    513c:	4d e0       	ldi	r20, 0x0D	; 13
    513e:	d1 cf       	rjmp	.-94     	; 0x50e2 <xio_usb_putc+0x16>
    5140:	90 93 ef 21 	sts	0x21EF, r25
		return xio_usb_putc('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (f.usart->STATUS & 0x20) {
    5144:	a0 91 14 22 	lds	r26, 0x2214
    5148:	b0 91 15 22 	lds	r27, 0x2215
    514c:	11 96       	adiw	r26, 0x01	; 1
    514e:	8c 91       	ld	r24, X
    5150:	11 97       	sbiw	r26, 0x01	; 1
    5152:	85 ff       	sbrs	r24, 5
    5154:	27 c0       	rjmp	.+78     	; 0x51a4 <xio_usb_putc+0xd8>
		if (f.tx_buf_head == f.tx_buf_tail) {	// buf might be empty if IRQ got it
    5156:	90 91 ee 21 	lds	r25, 0x21EE
    515a:	80 91 ed 21 	lds	r24, 0x21ED
    515e:	98 17       	cp	r25, r24
    5160:	71 f1       	breq	.+92     	; 0x51be <xio_usb_putc+0xf2>
			return (0);
		}
		f.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    5162:	38 60       	ori	r19, 0x08	; 8
    5164:	20 93 df 21 	sts	0x21DF, r18
    5168:	30 93 e0 21 	sts	0x21E0, r19
		if (--(f.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    516c:	80 91 ed 21 	lds	r24, 0x21ED
    5170:	81 50       	subi	r24, 0x01	; 1
    5172:	80 93 ed 21 	sts	0x21ED, r24
    5176:	80 91 ed 21 	lds	r24, 0x21ED
    517a:	88 23       	and	r24, r24
    517c:	19 f4       	brne	.+6      	; 0x5184 <xio_usb_putc+0xb8>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    517e:	81 e1       	ldi	r24, 0x11	; 17
    5180:	80 93 ed 21 	sts	0x21ED, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];// write char to TX DATA register
    5184:	e0 91 ed 21 	lds	r30, 0x21ED
    5188:	f0 e0       	ldi	r31, 0x00	; 0
    518a:	e1 52       	subi	r30, 0x21	; 33
    518c:	fe 4d       	sbci	r31, 0xDE	; 222
    518e:	83 a1       	ldd	r24, Z+35	; 0x23
    5190:	8c 93       	st	X, r24
		f.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    5192:	80 91 df 21 	lds	r24, 0x21DF
    5196:	90 91 e0 21 	lds	r25, 0x21E0
    519a:	97 7f       	andi	r25, 0xF7	; 247
    519c:	80 93 df 21 	sts	0x21DF, r24
    51a0:	90 93 e0 21 	sts	0x21E0, r25
	}
	// enable interrupts regardless
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    51a4:	e0 91 14 22 	lds	r30, 0x2214
    51a8:	f0 91 15 22 	lds	r31, 0x2215
    51ac:	81 e2       	ldi	r24, 0x21	; 33
    51ae:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    51b0:	80 91 a2 00 	lds	r24, 0x00A2
    51b4:	81 60       	ori	r24, 0x01	; 1
    51b6:	e0 ea       	ldi	r30, 0xA0	; 160
    51b8:	f0 e0       	ldi	r31, 0x00	; 0
    51ba:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    51bc:	78 94       	sei
    51be:	20 e0       	ldi	r18, 0x00	; 0
    51c0:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    51c2:	c9 01       	movw	r24, r18
    51c4:	08 95       	ret

000051c6 <xio_usb_getc>:
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(f.flags)) {
    51c6:	20 91 df 21 	lds	r18, 0x21DF
    51ca:	30 91 e0 21 	lds	r19, 0x21E0
    51ce:	24 70       	andi	r18, 0x04	; 4
    51d0:	30 70       	andi	r19, 0x00	; 0
    51d2:	15 c0       	rjmp	.+42     	; 0x51fe <xio_usb_getc+0x38>
    51d4:	21 15       	cp	r18, r1
    51d6:	31 05       	cpc	r19, r1
    51d8:	61 f0       	breq	.+24     	; 0x51f2 <xio_usb_getc+0x2c>
			sleep_mode();
    51da:	80 91 48 00 	lds	r24, 0x0048
    51de:	81 60       	ori	r24, 0x01	; 1
    51e0:	80 93 48 00 	sts	0x0048, r24
    51e4:	88 95       	sleep
    51e6:	80 91 48 00 	lds	r24, 0x0048
    51ea:	8e 7f       	andi	r24, 0xFE	; 254
    51ec:	80 93 48 00 	sts	0x0048, r24
    51f0:	06 c0       	rjmp	.+12     	; 0x51fe <xio_usb_getc+0x38>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    51f2:	83 e0       	ldi	r24, 0x03	; 3
    51f4:	80 93 e1 21 	sts	0x21E1, r24
    51f8:	2f ef       	ldi	r18, 0xFF	; 255
    51fa:	3f ef       	ldi	r19, 0xFF	; 255
    51fc:	26 c0       	rjmp	.+76     	; 0x524a <xio_usb_getc+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
    51fe:	90 91 ec 21 	lds	r25, 0x21EC
    5202:	80 91 eb 21 	lds	r24, 0x21EB
    5206:	98 17       	cp	r25, r24
    5208:	29 f3       	breq	.-54     	; 0x51d4 <xio_usb_getc+0xe>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    520a:	80 91 eb 21 	lds	r24, 0x21EB
    520e:	81 50       	subi	r24, 0x01	; 1
    5210:	80 93 eb 21 	sts	0x21EB, r24
    5214:	80 91 eb 21 	lds	r24, 0x21EB
    5218:	88 23       	and	r24, r24
    521a:	19 f4       	brne	.+6      	; 0x5222 <xio_usb_getc+0x5c>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    521c:	81 e1       	ldi	r24, 0x11	; 17
    521e:	80 93 eb 21 	sts	0x21EB, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    5222:	e0 91 eb 21 	lds	r30, 0x21EB
    5226:	f0 e0       	ldi	r31, 0x00	; 0
    5228:	e1 52       	subi	r30, 0x21	; 33
    522a:	fe 4d       	sbci	r31, 0xDE	; 222
    522c:	81 89       	ldd	r24, Z+17	; 0x11
    522e:	8f 77       	andi	r24, 0x7F	; 127
    5230:	80 93 e2 21 	sts	0x21E2, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[f.c])))());
    5234:	90 e0       	ldi	r25, 0x00	; 0
    5236:	88 0f       	add	r24, r24
    5238:	99 1f       	adc	r25, r25
    523a:	8a 59       	subi	r24, 0x9A	; 154
    523c:	97 4f       	sbci	r25, 0xF7	; 247
    523e:	fc 01       	movw	r30, r24
    5240:	25 91       	lpm	r18, Z+
    5242:	34 91       	lpm	r19, Z+
    5244:	f9 01       	movw	r30, r18
    5246:	19 95       	eicall
    5248:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    524a:	c9 01       	movw	r24, r18
    524c:	08 95       	ret

0000524e <_getc_char>:

/* xio_usb_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    524e:	80 91 df 21 	lds	r24, 0x21DF
    5252:	84 ff       	sbrs	r24, 4
    5254:	08 c0       	rjmp	.+16     	; 0x5266 <_getc_char+0x18>
    5256:	60 91 0e 25 	lds	r22, 0x250E
    525a:	70 91 0f 25 	lds	r23, 0x250F
    525e:	80 91 e2 21 	lds	r24, 0x21E2
    5262:	0e 94 66 28 	call	0x50cc	; 0x50cc <xio_usb_putc>
	return(f.c);
}
    5266:	80 91 e2 21 	lds	r24, 0x21E2
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	08 95       	ret

0000526e <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(f.flags)) f.c = '\n';
    526e:	90 91 df 21 	lds	r25, 0x21DF
    5272:	96 ff       	sbrs	r25, 6
    5274:	03 c0       	rjmp	.+6      	; 0x527c <_getc_NEWLINE+0xe>
    5276:	8a e0       	ldi	r24, 0x0A	; 10
    5278:	80 93 e2 21 	sts	0x21E2, r24
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    527c:	94 ff       	sbrs	r25, 4
    527e:	08 c0       	rjmp	.+16     	; 0x5290 <_getc_NEWLINE+0x22>
    5280:	60 91 0e 25 	lds	r22, 0x250E
    5284:	70 91 0f 25 	lds	r23, 0x250F
    5288:	80 91 e2 21 	lds	r24, 0x21E2
    528c:	0e 94 66 28 	call	0x50cc	; 0x50cc <xio_usb_putc>
	return(f.c);
}
    5290:	80 91 e2 21 	lds	r24, 0x21E2
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	08 95       	ret

00005298 <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(f.flags)) {
    5298:	80 91 df 21 	lds	r24, 0x21DF
    529c:	87 ff       	sbrs	r24, 7
    529e:	03 c0       	rjmp	.+6      	; 0x52a6 <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    52a0:	0e 94 37 29 	call	0x526e	; 0x526e <_getc_NEWLINE>
    52a4:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    52a6:	0e 94 27 29 	call	0x524e	; 0x524e <_getc_char>
}
    52aa:	08 95       	ret

000052ac <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	f.sig = XIO_SIG_DELETE;
    52ac:	8a e0       	ldi	r24, 0x0A	; 10
    52ae:	80 93 e1 21 	sts	0x21E1, r24
	return(_FDEV_ERR);
}
    52b2:	8f ef       	ldi	r24, 0xFF	; 255
    52b4:	9f ef       	ldi	r25, 0xFF	; 255
    52b6:	08 95       	ret

000052b8 <_getc_KILL>:

static int _getc_KILL(void)
{
	f.sig = XIO_SIG_KILL;
    52b8:	84 e0       	ldi	r24, 0x04	; 4
    52ba:	80 93 e1 21 	sts	0x21E1, r24
	return(_FDEV_ERR);
}
    52be:	8f ef       	ldi	r24, 0xFF	; 255
    52c0:	9f ef       	ldi	r25, 0xFF	; 255
    52c2:	08 95       	ret

000052c4 <_getc_PAUSE>:

static int _getc_PAUSE(void)
{
	f.sig = XIO_SIG_PAUSE;
    52c4:	86 e0       	ldi	r24, 0x06	; 6
    52c6:	80 93 e1 21 	sts	0x21E1, r24
	return(_FDEV_ERR);
}
    52ca:	8f ef       	ldi	r24, 0xFF	; 255
    52cc:	9f ef       	ldi	r25, 0xFF	; 255
    52ce:	08 95       	ret

000052d0 <_getc_RESUME>:

static int _getc_RESUME(void)
{
	f.sig = XIO_SIG_RESUME;
    52d0:	87 e0       	ldi	r24, 0x07	; 7
    52d2:	80 93 e1 21 	sts	0x21E1, r24
	return(_FDEV_ERR);
}
    52d6:	8f ef       	ldi	r24, 0xFF	; 255
    52d8:	9f ef       	ldi	r25, 0xFF	; 255
    52da:	08 95       	ret

000052dc <_getc_SHIFTOUT>:

static int _getc_SHIFTOUT(void)
{
	f.sig = XIO_SIG_SHIFTOUT;
    52dc:	88 e0       	ldi	r24, 0x08	; 8
    52de:	80 93 e1 21 	sts	0x21E1, r24
	return(_FDEV_ERR);
}
    52e2:	8f ef       	ldi	r24, 0xFF	; 255
    52e4:	9f ef       	ldi	r25, 0xFF	; 255
    52e6:	08 95       	ret

000052e8 <_getc_SHIFTIN>:

static int _getc_SHIFTIN(void)
{
	f.sig = XIO_SIG_SHIFTIN;
    52e8:	89 e0       	ldi	r24, 0x09	; 9
    52ea:	80 93 e1 21 	sts	0x21E1, r24
	return(_FDEV_ERR);
}
    52ee:	8f ef       	ldi	r24, 0xFF	; 255
    52f0:	9f ef       	ldi	r25, 0xFF	; 255
    52f2:	08 95       	ret

000052f4 <xio_usb_readln>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_usb_readln(char *buf, uint8_t len)
{
	if (!IN_LINE(f.flags)) {					// first time thru initializations
    52f4:	20 91 df 21 	lds	r18, 0x21DF
    52f8:	30 91 e0 21 	lds	r19, 0x21E0
    52fc:	36 fd       	sbrc	r19, 6
    52fe:	0d c0       	rjmp	.+26     	; 0x531a <xio_usb_readln+0x26>
		f.i = 0;								// zero buffer
    5300:	10 92 e3 21 	sts	0x21E3, r1
		f.len = len;							// save arg into struct 
    5304:	60 93 e4 21 	sts	0x21E4, r22
		f.buf = buf;							// save arg into struct 
    5308:	80 93 e5 21 	sts	0x21E5, r24
    530c:	90 93 e6 21 	sts	0x21E6, r25
//		f.sig = XIO_SIG_OK;						// no signal action
		f.flags |= XIO_FLAG_IN_LINE_bm;			// yes, we are busy getting a line
    5310:	30 64       	ori	r19, 0x40	; 64
    5312:	20 93 df 21 	sts	0x21DF, r18
    5316:	30 93 e0 21 	sts	0x21E0, r19
	}
	if (f.rx_buf_head == f.rx_buf_tail) {		// RX ISR buffer empty
    531a:	90 91 ec 21 	lds	r25, 0x21EC
    531e:	80 91 eb 21 	lds	r24, 0x21EB
    5322:	98 17       	cp	r25, r24
    5324:	19 f4       	brne	.+6      	; 0x532c <xio_usb_readln+0x38>
    5326:	22 e0       	ldi	r18, 0x02	; 2
    5328:	30 e0       	ldi	r19, 0x00	; 0
    532a:	20 c0       	rjmp	.+64     	; 0x536c <xio_usb_readln+0x78>
//		f.sig = XIO_SIG_WOULDBLOCK;
		return(TG_CONTINUE);
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    532c:	80 91 eb 21 	lds	r24, 0x21EB
    5330:	81 50       	subi	r24, 0x01	; 1
    5332:	80 93 eb 21 	sts	0x21EB, r24
    5336:	80 91 eb 21 	lds	r24, 0x21EB
    533a:	88 23       	and	r24, r24
    533c:	19 f4       	brne	.+6      	; 0x5344 <xio_usb_readln+0x50>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    533e:	81 e1       	ldi	r24, 0x11	; 17
    5340:	80 93 eb 21 	sts	0x21EB, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    5344:	e0 91 eb 21 	lds	r30, 0x21EB
    5348:	f0 e0       	ldi	r31, 0x00	; 0
    534a:	e1 52       	subi	r30, 0x21	; 33
    534c:	fe 4d       	sbci	r31, 0xDE	; 222
    534e:	81 89       	ldd	r24, Z+17	; 0x11
    5350:	8f 77       	andi	r24, 0x7F	; 127
    5352:	80 93 e2 21 	sts	0x21E2, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[f.c])))()); // dispatch on character
    5356:	90 e0       	ldi	r25, 0x00	; 0
    5358:	88 0f       	add	r24, r24
    535a:	99 1f       	adc	r25, r25
    535c:	8a 59       	subi	r24, 0x9A	; 154
    535e:	98 4f       	sbci	r25, 0xF8	; 248
    5360:	fc 01       	movw	r30, r24
    5362:	25 91       	lpm	r18, Z+
    5364:	34 91       	lpm	r19, Z+
    5366:	f9 01       	movw	r30, r18
    5368:	19 95       	eicall
    536a:	9c 01       	movw	r18, r24
}
    536c:	c9 01       	movw	r24, r18
    536e:	08 95       	ret

00005370 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (f.i > f.len) {							// trap buffer overflow
    5370:	90 91 e3 21 	lds	r25, 0x21E3
    5374:	20 91 e4 21 	lds	r18, 0x21E4
    5378:	e0 91 e5 21 	lds	r30, 0x21E5
    537c:	f0 91 e6 21 	lds	r31, 0x21E6
    5380:	29 17       	cp	r18, r25
    5382:	48 f4       	brcc	.+18     	; 0x5396 <_readln_char+0x26>
		f.sig = XIO_SIG_EOL;
    5384:	81 e0       	ldi	r24, 0x01	; 1
    5386:	80 93 e1 21 	sts	0x21E1, r24
		f.buf[f.len] = NUL;						// f.len is zero based
    538a:	e2 0f       	add	r30, r18
    538c:	f1 1d       	adc	r31, r1
    538e:	10 82       	st	Z, r1
    5390:	26 e0       	ldi	r18, 0x06	; 6
    5392:	30 e0       	ldi	r19, 0x00	; 0
    5394:	16 c0       	rjmp	.+44     	; 0x53c2 <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	f.buf[f.i++] = f.c;
    5396:	e9 0f       	add	r30, r25
    5398:	f1 1d       	adc	r31, r1
    539a:	80 91 e2 21 	lds	r24, 0x21E2
    539e:	80 83       	st	Z, r24
    53a0:	9f 5f       	subi	r25, 0xFF	; 255
    53a2:	90 93 e3 21 	sts	0x21E3, r25
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);// conditional echo
    53a6:	80 91 df 21 	lds	r24, 0x21DF
    53aa:	84 ff       	sbrs	r24, 4
    53ac:	08 c0       	rjmp	.+16     	; 0x53be <_readln_char+0x4e>
    53ae:	60 91 0e 25 	lds	r22, 0x250E
    53b2:	70 91 0f 25 	lds	r23, 0x250F
    53b6:	80 91 e2 21 	lds	r24, 0x21E2
    53ba:	0e 94 66 28 	call	0x50cc	; 0x50cc <xio_usb_putc>
    53be:	22 e0       	ldi	r18, 0x02	; 2
    53c0:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_CONTINUE);						// line is still in process
}
    53c2:	c9 01       	movw	r24, r18
    53c4:	08 95       	ret

000053c6 <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	f.sig = XIO_SIG_EOL;
    53c6:	81 e0       	ldi	r24, 0x01	; 1
    53c8:	80 93 e1 21 	sts	0x21E1, r24
	f.buf[f.i] = NUL;
    53cc:	80 91 e3 21 	lds	r24, 0x21E3
    53d0:	e0 91 e5 21 	lds	r30, 0x21E5
    53d4:	f0 91 e6 21 	lds	r31, 0x21E6
    53d8:	e8 0f       	add	r30, r24
    53da:	f1 1d       	adc	r31, r1
    53dc:	10 82       	st	Z, r1
	f.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    53de:	20 91 df 21 	lds	r18, 0x21DF
    53e2:	30 91 e0 21 	lds	r19, 0x21E0
    53e6:	c9 01       	movw	r24, r18
    53e8:	9f 7b       	andi	r25, 0xBF	; 191
    53ea:	80 93 df 21 	sts	0x21DF, r24
    53ee:	90 93 e0 21 	sts	0x21E0, r25
	if (ECHO(f.flags)) xio_usb_putc('\n',stdout);// echo a newline
    53f2:	24 ff       	sbrs	r18, 4
    53f4:	07 c0       	rjmp	.+14     	; 0x5404 <_readln_NEWLINE+0x3e>
    53f6:	60 91 0e 25 	lds	r22, 0x250E
    53fa:	70 91 0f 25 	lds	r23, 0x250F
    53fe:	8a e0       	ldi	r24, 0x0A	; 10
    5400:	0e 94 66 28 	call	0x50cc	; 0x50cc <xio_usb_putc>
	return ((int)f.line_func(f.buf));			// call line handler function
    5404:	e0 91 e9 21 	lds	r30, 0x21E9
    5408:	f0 91 ea 21 	lds	r31, 0x21EA
    540c:	80 91 e5 21 	lds	r24, 0x21E5
    5410:	90 91 e6 21 	lds	r25, 0x21E6
    5414:	19 95       	eicall
}
    5416:	08 95       	ret

00005418 <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(f.flags)) {
    5418:	80 91 df 21 	lds	r24, 0x21DF
    541c:	87 ff       	sbrs	r24, 7
    541e:	03 c0       	rjmp	.+6      	; 0x5426 <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    5420:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <_readln_NEWLINE>
    5424:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    5426:	0e 94 b8 29 	call	0x5370	; 0x5370 <_readln_char>
	}
}
    542a:	08 95       	ret

0000542c <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--f.i >= 0) {
    542c:	80 91 e3 21 	lds	r24, 0x21E3
    5430:	81 50       	subi	r24, 0x01	; 1
    5432:	80 93 e3 21 	sts	0x21E3, r24
		if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    5436:	80 91 df 21 	lds	r24, 0x21DF
    543a:	84 ff       	sbrs	r24, 4
    543c:	08 c0       	rjmp	.+16     	; 0x544e <_readln_DELETE+0x22>
    543e:	60 91 0e 25 	lds	r22, 0x250E
    5442:	70 91 0f 25 	lds	r23, 0x250F
    5446:	80 91 e2 21 	lds	r24, 0x21E2
    544a:	0e 94 66 28 	call	0x50cc	; 0x50cc <xio_usb_putc>
	} else {
		f.i = 0;
	}
	return (TG_CONTINUE);						// line is still in process
}
    544e:	82 e0       	ldi	r24, 0x02	; 2
    5450:	90 e0       	ldi	r25, 0x00	; 0
    5452:	08 95       	ret

00005454 <_readln_KILL>:

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    5454:	84 e0       	ldi	r24, 0x04	; 4
    5456:	80 93 e1 21 	sts	0x21E1, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    545a:	e0 91 e7 21 	lds	r30, 0x21E7
    545e:	f0 91 e8 21 	lds	r31, 0x21E8
    5462:	19 95       	eicall
}

static int _readln_KILL(void)
{
	return _readln_SIG(XIO_SIG_KILL);
}
    5464:	08 95       	ret

00005466 <_readln_PAUSE>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    5466:	86 e0       	ldi	r24, 0x06	; 6
    5468:	80 93 e1 21 	sts	0x21E1, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    546c:	e0 91 e7 21 	lds	r30, 0x21E7
    5470:	f0 91 e8 21 	lds	r31, 0x21E8
    5474:	19 95       	eicall
}

static int _readln_PAUSE(void)
{
	return _readln_SIG(XIO_SIG_PAUSE);
}
    5476:	08 95       	ret

00005478 <_readln_RESUME>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    5478:	87 e0       	ldi	r24, 0x07	; 7
    547a:	80 93 e1 21 	sts	0x21E1, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    547e:	e0 91 e7 21 	lds	r30, 0x21E7
    5482:	f0 91 e8 21 	lds	r31, 0x21E8
    5486:	19 95       	eicall
}

static int _readln_RESUME(void)
{
	return _readln_SIG(XIO_SIG_RESUME);
}
    5488:	08 95       	ret

0000548a <_readln_SHIFTOUT>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    548a:	88 e0       	ldi	r24, 0x08	; 8
    548c:	80 93 e1 21 	sts	0x21E1, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    5490:	e0 91 e7 21 	lds	r30, 0x21E7
    5494:	f0 91 e8 21 	lds	r31, 0x21E8
    5498:	19 95       	eicall
}

static int _readln_SHIFTOUT(void)
{
	return _readln_SIG(XIO_SIG_SHIFTOUT);
}
    549a:	08 95       	ret

0000549c <_readln_SHIFTIN>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    549c:	89 e0       	ldi	r24, 0x09	; 9
    549e:	80 93 e1 21 	sts	0x21E1, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    54a2:	e0 91 e7 21 	lds	r30, 0x21E7
    54a6:	f0 91 e8 21 	lds	r31, 0x21E8
    54aa:	19 95       	eicall
}

static int _readln_SHIFTIN(void)
{
	return _readln_SIG(XIO_SIG_SHIFTIN);
}
    54ac:	08 95       	ret

000054ae <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    54ae:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    54b0:	e0 ec       	ldi	r30, 0xC0	; 192
    54b2:	f1 e0       	ldi	r31, 0x01	; 1
    54b4:	80 91 cf 01 	lds	r24, 0x01CF
    54b8:	87 fd       	sbrc	r24, 7
    54ba:	fa cf       	rjmp	.-12     	; 0x54b0 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    54bc:	26 2f       	mov	r18, r22
    54be:	30 e0       	ldi	r19, 0x00	; 0
    54c0:	2f 71       	andi	r18, 0x1F	; 31
    54c2:	30 70       	andi	r19, 0x00	; 0
    54c4:	89 2f       	mov	r24, r25
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	45 e0       	ldi	r20, 0x05	; 5
    54ca:	88 0f       	add	r24, r24
    54cc:	99 1f       	adc	r25, r25
    54ce:	4a 95       	dec	r20
    54d0:	e1 f7       	brne	.-8      	; 0x54ca <EEPROM_ReadByte+0x1c>
    54d2:	28 2b       	or	r18, r24
    54d4:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    54d6:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    54da:	83 2f       	mov	r24, r19
    54dc:	8f 71       	andi	r24, 0x1F	; 31
    54de:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    54e0:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    54e2:	86 e0       	ldi	r24, 0x06	; 6
    54e4:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    54e6:	ef 93       	push	r30
    54e8:	ff 93       	push	r31
    54ea:	0f 93       	push	r16
    54ec:	2f 93       	push	r18
    54ee:	eb ec       	ldi	r30, 0xCB	; 203
    54f0:	f1 e0       	ldi	r31, 0x01	; 1
    54f2:	08 ed       	ldi	r16, 0xD8	; 216
    54f4:	21 e0       	ldi	r18, 0x01	; 1
    54f6:	04 bf       	out	0x34, r16	; 52
    54f8:	20 83       	st	Z, r18
    54fa:	2f 91       	pop	r18
    54fc:	0f 91       	pop	r16
    54fe:	ff 91       	pop	r31
    5500:	ef 91       	pop	r30

	return NVM.DATA0;
    5502:	80 91 c4 01 	lds	r24, 0x01C4
}
    5506:	08 95       	ret

00005508 <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    5508:	68 2f       	mov	r22, r24
    550a:	6f 71       	andi	r22, 0x1F	; 31
    550c:	55 e0       	ldi	r21, 0x05	; 5
    550e:	96 95       	lsr	r25
    5510:	87 95       	ror	r24
    5512:	5a 95       	dec	r21
    5514:	e1 f7       	brne	.-8      	; 0x550e <eeprom_get_char+0x6>
    5516:	0e 94 57 2a 	call	0x54ae	; 0x54ae <EEPROM_ReadByte>
}
    551a:	08 95       	ret

0000551c <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    551c:	8f 92       	push	r8
    551e:	9f 92       	push	r9
    5520:	af 92       	push	r10
    5522:	bf 92       	push	r11
    5524:	cf 92       	push	r12
    5526:	df 92       	push	r13
    5528:	ff 92       	push	r15
    552a:	0f 93       	push	r16
    552c:	1f 93       	push	r17
    552e:	cf 93       	push	r28
    5530:	df 93       	push	r29
    5532:	4c 01       	movw	r8, r24
    5534:	5b 01       	movw	r10, r22
    5536:	6a 01       	movw	r12, r20
    5538:	8b 01       	movw	r16, r22
    553a:	ea 01       	movw	r28, r20
    553c:	ff 24       	eor	r15, r15
    553e:	18 c0       	rjmp	.+48     	; 0x5570 <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    5540:	c8 01       	movw	r24, r16
    5542:	0e 94 84 2a 	call	0x5508	; 0x5508 <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    5546:	ff 20       	and	r15, r15
    5548:	19 f0       	breq	.+6      	; 0x5550 <memcpy_from_eeprom_with_checksum+0x34>
    554a:	21 e0       	ldi	r18, 0x01	; 1
    554c:	30 e0       	ldi	r19, 0x00	; 0
    554e:	08 c0       	rjmp	.+16     	; 0x5560 <memcpy_from_eeprom_with_checksum+0x44>
    5550:	2f 2d       	mov	r18, r15
    5552:	33 27       	eor	r19, r19
    5554:	27 fd       	sbrc	r18, 7
    5556:	30 95       	com	r19
    5558:	22 27       	eor	r18, r18
    555a:	33 0f       	add	r19, r19
    555c:	22 1f       	adc	r18, r18
    555e:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    5560:	0f 5f       	subi	r16, 0xFF	; 255
    5562:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    5564:	f8 2e       	mov	r15, r24
    5566:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    5568:	f4 01       	movw	r30, r8
    556a:	81 93       	st	Z+, r24
    556c:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    556e:	21 97       	sbiw	r28, 0x01	; 1
    5570:	20 97       	sbiw	r28, 0x00	; 0
    5572:	31 f7       	brne	.-52     	; 0x5540 <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    5574:	c6 01       	movw	r24, r12
    5576:	8a 0d       	add	r24, r10
    5578:	9b 1d       	adc	r25, r11
    557a:	0e 94 84 2a 	call	0x5508	; 0x5508 <eeprom_get_char>
    557e:	20 e0       	ldi	r18, 0x00	; 0
    5580:	30 e0       	ldi	r19, 0x00	; 0
    5582:	f8 16       	cp	r15, r24
    5584:	11 f4       	brne	.+4      	; 0x558a <memcpy_from_eeprom_with_checksum+0x6e>
    5586:	21 e0       	ldi	r18, 0x01	; 1
    5588:	30 e0       	ldi	r19, 0x00	; 0
}
    558a:	c9 01       	movw	r24, r18
    558c:	df 91       	pop	r29
    558e:	cf 91       	pop	r28
    5590:	1f 91       	pop	r17
    5592:	0f 91       	pop	r16
    5594:	ff 90       	pop	r15
    5596:	df 90       	pop	r13
    5598:	cf 90       	pop	r12
    559a:	bf 90       	pop	r11
    559c:	af 90       	pop	r10
    559e:	9f 90       	pop	r9
    55a0:	8f 90       	pop	r8
    55a2:	08 95       	ret

000055a4 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    55a4:	80 91 cf 01 	lds	r24, 0x01CF
    55a8:	87 fd       	sbrc	r24, 7
    55aa:	fc cf       	rjmp	.-8      	; 0x55a4 <EEPROM_WaitForNVM>
}
    55ac:	08 95       	ret

000055ae <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    55ae:	80 91 cf 01 	lds	r24, 0x01CF
    55b2:	87 fd       	sbrc	r24, 7
    55b4:	fc cf       	rjmp	.-8      	; 0x55ae <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    55b6:	80 91 cf 01 	lds	r24, 0x01CF
    55ba:	81 ff       	sbrs	r24, 1
    55bc:	12 c0       	rjmp	.+36     	; 0x55e2 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    55be:	86 e3       	ldi	r24, 0x36	; 54
    55c0:	e0 ec       	ldi	r30, 0xC0	; 192
    55c2:	f1 e0       	ldi	r31, 0x01	; 1
    55c4:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    55c6:	ef 93       	push	r30
    55c8:	ff 93       	push	r31
    55ca:	0f 93       	push	r16
    55cc:	2f 93       	push	r18
    55ce:	eb ec       	ldi	r30, 0xCB	; 203
    55d0:	f1 e0       	ldi	r31, 0x01	; 1
    55d2:	08 ed       	ldi	r16, 0xD8	; 216
    55d4:	21 e0       	ldi	r18, 0x01	; 1
    55d6:	04 bf       	out	0x34, r16	; 52
    55d8:	20 83       	st	Z, r18
    55da:	2f 91       	pop	r18
    55dc:	0f 91       	pop	r16
    55de:	ff 91       	pop	r31
    55e0:	ef 91       	pop	r30
    55e2:	08 95       	ret

000055e4 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    55e4:	df 92       	push	r13
    55e6:	ef 92       	push	r14
    55e8:	ff 92       	push	r15
    55ea:	0f 93       	push	r16
    55ec:	1f 93       	push	r17
    55ee:	e8 2e       	mov	r14, r24
    55f0:	06 2f       	mov	r16, r22
    55f2:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    55f4:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    55f8:	e0 ec       	ldi	r30, 0xC0	; 192
    55fa:	f1 e0       	ldi	r31, 0x01	; 1
    55fc:	83 e3       	ldi	r24, 0x33	; 51
    55fe:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    5600:	10 e0       	ldi	r17, 0x00	; 0
    5602:	0f 71       	andi	r16, 0x1F	; 31
    5604:	10 70       	andi	r17, 0x00	; 0
    5606:	ff 24       	eor	r15, r15
    5608:	75 e0       	ldi	r23, 0x05	; 5
    560a:	ee 0c       	add	r14, r14
    560c:	ff 1c       	adc	r15, r15
    560e:	7a 95       	dec	r23
    5610:	e1 f7       	brne	.-8      	; 0x560a <EEPROM_WriteByte+0x26>
    5612:	0e 29       	or	r16, r14
    5614:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    5616:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5618:	81 2f       	mov	r24, r17
    561a:	8f 71       	andi	r24, 0x1F	; 31
    561c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    561e:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5620:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5622:	85 e3       	ldi	r24, 0x35	; 53
    5624:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5626:	ef 93       	push	r30
    5628:	ff 93       	push	r31
    562a:	0f 93       	push	r16
    562c:	2f 93       	push	r18
    562e:	eb ec       	ldi	r30, 0xCB	; 203
    5630:	f1 e0       	ldi	r31, 0x01	; 1
    5632:	08 ed       	ldi	r16, 0xD8	; 216
    5634:	21 e0       	ldi	r18, 0x01	; 1
    5636:	04 bf       	out	0x34, r16	; 52
    5638:	20 83       	st	Z, r18
    563a:	2f 91       	pop	r18
    563c:	0f 91       	pop	r16
    563e:	ff 91       	pop	r31
    5640:	ef 91       	pop	r30
}
    5642:	1f 91       	pop	r17
    5644:	0f 91       	pop	r16
    5646:	ff 90       	pop	r15
    5648:	ef 90       	pop	r14
    564a:	df 90       	pop	r13
    564c:	08 95       	ret

0000564e <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    564e:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    5650:	68 2f       	mov	r22, r24
    5652:	6f 71       	andi	r22, 0x1F	; 31
    5654:	e5 e0       	ldi	r30, 0x05	; 5
    5656:	96 95       	lsr	r25
    5658:	87 95       	ror	r24
    565a:	ea 95       	dec	r30
    565c:	e1 f7       	brne	.-8      	; 0x5656 <eeprom_put_char+0x8>
    565e:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <EEPROM_WriteByte>
}
    5662:	08 95       	ret

00005664 <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    5664:	8f 92       	push	r8
    5666:	9f 92       	push	r9
    5668:	af 92       	push	r10
    566a:	bf 92       	push	r11
    566c:	cf 92       	push	r12
    566e:	df 92       	push	r13
    5670:	ef 92       	push	r14
    5672:	ff 92       	push	r15
    5674:	0f 93       	push	r16
    5676:	df 93       	push	r29
    5678:	cf 93       	push	r28
    567a:	0f 92       	push	r0
    567c:	0f 92       	push	r0
    567e:	cd b7       	in	r28, 0x3d	; 61
    5680:	de b7       	in	r29, 0x3e	; 62
    5682:	5c 01       	movw	r10, r24
    5684:	6b 01       	movw	r12, r22
    5686:	7a 01       	movw	r14, r20
    5688:	4a 01       	movw	r8, r20
    568a:	00 e0       	ldi	r16, 0x00	; 0
    568c:	1e c0       	rjmp	.+60     	; 0x56ca <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    568e:	00 23       	and	r16, r16
    5690:	19 f0       	breq	.+6      	; 0x5698 <memcpy_to_eeprom_with_checksum+0x34>
    5692:	21 e0       	ldi	r18, 0x01	; 1
    5694:	30 e0       	ldi	r19, 0x00	; 0
    5696:	08 c0       	rjmp	.+16     	; 0x56a8 <memcpy_to_eeprom_with_checksum+0x44>
    5698:	20 2f       	mov	r18, r16
    569a:	33 27       	eor	r19, r19
    569c:	27 fd       	sbrc	r18, 7
    569e:	30 95       	com	r19
    56a0:	22 27       	eor	r18, r18
    56a2:	33 0f       	add	r19, r19
    56a4:	22 1f       	adc	r18, r18
    56a6:	33 27       	eor	r19, r19
    checksum += *source;
    56a8:	f6 01       	movw	r30, r12
    56aa:	61 91       	ld	r22, Z+
    56ac:	6f 01       	movw	r12, r30
    56ae:	06 2f       	mov	r16, r22
    56b0:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    56b2:	9c 01       	movw	r18, r24
    56b4:	2f 5f       	subi	r18, 0xFF	; 255
    56b6:	3f 4f       	sbci	r19, 0xFF	; 255
    56b8:	29 83       	std	Y+1, r18	; 0x01
    56ba:	3a 83       	std	Y+2, r19	; 0x02
    56bc:	0e 94 27 2b 	call	0x564e	; 0x564e <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    56c0:	08 94       	sec
    56c2:	81 08       	sbc	r8, r1
    56c4:	91 08       	sbc	r9, r1
    56c6:	89 81       	ldd	r24, Y+1	; 0x01
    56c8:	9a 81       	ldd	r25, Y+2	; 0x02
    56ca:	81 14       	cp	r8, r1
    56cc:	91 04       	cpc	r9, r1
    56ce:	f9 f6       	brne	.-66     	; 0x568e <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    56d0:	c7 01       	movw	r24, r14
    56d2:	8a 0d       	add	r24, r10
    56d4:	9b 1d       	adc	r25, r11
    56d6:	60 2f       	mov	r22, r16
    56d8:	0e 94 27 2b 	call	0x564e	; 0x564e <eeprom_put_char>
}
    56dc:	0f 90       	pop	r0
    56de:	0f 90       	pop	r0
    56e0:	cf 91       	pop	r28
    56e2:	df 91       	pop	r29
    56e4:	0f 91       	pop	r16
    56e6:	ff 90       	pop	r15
    56e8:	ef 90       	pop	r14
    56ea:	df 90       	pop	r13
    56ec:	cf 90       	pop	r12
    56ee:	bf 90       	pop	r11
    56f0:	af 90       	pop	r10
    56f2:	9f 90       	pop	r9
    56f4:	8f 90       	pop	r8
    56f6:	08 95       	ret

000056f8 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    56f8:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    56fa:	e0 ec       	ldi	r30, 0xC0	; 192
    56fc:	f1 e0       	ldi	r31, 0x01	; 1
    56fe:	80 91 cf 01 	lds	r24, 0x01CF
    5702:	87 fd       	sbrc	r24, 7
    5704:	fa cf       	rjmp	.-12     	; 0x56fa <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5706:	83 e3       	ldi	r24, 0x33	; 51
    5708:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    570a:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    570e:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5710:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5712:	64 83       	std	Z+4, r22	; 0x04
}
    5714:	08 95       	ret

00005716 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    5716:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5718:	e0 ec       	ldi	r30, 0xC0	; 192
    571a:	f1 e0       	ldi	r31, 0x01	; 1
    571c:	80 91 cf 01 	lds	r24, 0x01CF
    5720:	87 fd       	sbrc	r24, 7
    5722:	fa cf       	rjmp	.-12     	; 0x5718 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    5724:	83 e3       	ldi	r24, 0x33	; 51
    5726:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    5728:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    572a:	12 82       	std	Z+2, r1	; 0x02
    572c:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    572e:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    5732:	8d 91       	ld	r24, X+
    5734:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    5736:	9f 5f       	subi	r25, 0xFF	; 255
    5738:	90 32       	cpi	r25, 0x20	; 32
    573a:	c9 f7       	brne	.-14     	; 0x572e <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    573c:	08 95       	ret

0000573e <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    573e:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5740:	e0 ec       	ldi	r30, 0xC0	; 192
    5742:	f1 e0       	ldi	r31, 0x01	; 1
    5744:	80 91 cf 01 	lds	r24, 0x01CF
    5748:	87 fd       	sbrc	r24, 7
    574a:	fa cf       	rjmp	.-12     	; 0x5740 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    574c:	89 2f       	mov	r24, r25
    574e:	90 e0       	ldi	r25, 0x00	; 0
    5750:	a5 e0       	ldi	r26, 0x05	; 5
    5752:	88 0f       	add	r24, r24
    5754:	99 1f       	adc	r25, r25
    5756:	aa 95       	dec	r26
    5758:	e1 f7       	brne	.-8      	; 0x5752 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    575a:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    575e:	89 2f       	mov	r24, r25
    5760:	8f 71       	andi	r24, 0x1F	; 31
    5762:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5764:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5766:	85 e3       	ldi	r24, 0x35	; 53
    5768:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    576a:	ef 93       	push	r30
    576c:	ff 93       	push	r31
    576e:	0f 93       	push	r16
    5770:	2f 93       	push	r18
    5772:	eb ec       	ldi	r30, 0xCB	; 203
    5774:	f1 e0       	ldi	r31, 0x01	; 1
    5776:	08 ed       	ldi	r16, 0xD8	; 216
    5778:	21 e0       	ldi	r18, 0x01	; 1
    577a:	04 bf       	out	0x34, r16	; 52
    577c:	20 83       	st	Z, r18
    577e:	2f 91       	pop	r18
    5780:	0f 91       	pop	r16
    5782:	ff 91       	pop	r31
    5784:	ef 91       	pop	r30
}
    5786:	08 95       	ret

00005788 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    5788:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    578a:	e0 ec       	ldi	r30, 0xC0	; 192
    578c:	f1 e0       	ldi	r31, 0x01	; 1
    578e:	80 91 cf 01 	lds	r24, 0x01CF
    5792:	87 fd       	sbrc	r24, 7
    5794:	fa cf       	rjmp	.-12     	; 0x578a <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5796:	89 2f       	mov	r24, r25
    5798:	90 e0       	ldi	r25, 0x00	; 0
    579a:	b5 e0       	ldi	r27, 0x05	; 5
    579c:	88 0f       	add	r24, r24
    579e:	99 1f       	adc	r25, r25
    57a0:	ba 95       	dec	r27
    57a2:	e1 f7       	brne	.-8      	; 0x579c <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    57a4:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    57a8:	89 2f       	mov	r24, r25
    57aa:	8f 71       	andi	r24, 0x1F	; 31
    57ac:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    57ae:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    57b0:	82 e3       	ldi	r24, 0x32	; 50
    57b2:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    57b4:	ef 93       	push	r30
    57b6:	ff 93       	push	r31
    57b8:	0f 93       	push	r16
    57ba:	2f 93       	push	r18
    57bc:	eb ec       	ldi	r30, 0xCB	; 203
    57be:	f1 e0       	ldi	r31, 0x01	; 1
    57c0:	08 ed       	ldi	r16, 0xD8	; 216
    57c2:	21 e0       	ldi	r18, 0x01	; 1
    57c4:	04 bf       	out	0x34, r16	; 52
    57c6:	20 83       	st	Z, r18
    57c8:	2f 91       	pop	r18
    57ca:	0f 91       	pop	r16
    57cc:	ff 91       	pop	r31
    57ce:	ef 91       	pop	r30
}
    57d0:	08 95       	ret

000057d2 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    57d2:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    57d4:	e0 ec       	ldi	r30, 0xC0	; 192
    57d6:	f1 e0       	ldi	r31, 0x01	; 1
    57d8:	80 91 cf 01 	lds	r24, 0x01CF
    57dc:	87 fd       	sbrc	r24, 7
    57de:	fa cf       	rjmp	.-12     	; 0x57d4 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    57e0:	89 2f       	mov	r24, r25
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	25 e0       	ldi	r18, 0x05	; 5
    57e6:	88 0f       	add	r24, r24
    57e8:	99 1f       	adc	r25, r25
    57ea:	2a 95       	dec	r18
    57ec:	e1 f7       	brne	.-8      	; 0x57e6 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    57ee:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    57f2:	89 2f       	mov	r24, r25
    57f4:	8f 71       	andi	r24, 0x1F	; 31
    57f6:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    57f8:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    57fa:	84 e3       	ldi	r24, 0x34	; 52
    57fc:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    57fe:	ef 93       	push	r30
    5800:	ff 93       	push	r31
    5802:	0f 93       	push	r16
    5804:	2f 93       	push	r18
    5806:	eb ec       	ldi	r30, 0xCB	; 203
    5808:	f1 e0       	ldi	r31, 0x01	; 1
    580a:	08 ed       	ldi	r16, 0xD8	; 216
    580c:	21 e0       	ldi	r18, 0x01	; 1
    580e:	04 bf       	out	0x34, r16	; 52
    5810:	20 83       	st	Z, r18
    5812:	2f 91       	pop	r18
    5814:	0f 91       	pop	r16
    5816:	ff 91       	pop	r31
    5818:	ef 91       	pop	r30
}
    581a:	08 95       	ret

0000581c <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    581c:	80 91 cf 01 	lds	r24, 0x01CF
    5820:	87 fd       	sbrc	r24, 7
    5822:	fc cf       	rjmp	.-8      	; 0x581c <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    5824:	80 e3       	ldi	r24, 0x30	; 48
    5826:	e0 ec       	ldi	r30, 0xC0	; 192
    5828:	f1 e0       	ldi	r31, 0x01	; 1
    582a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    582c:	ef 93       	push	r30
    582e:	ff 93       	push	r31
    5830:	0f 93       	push	r16
    5832:	2f 93       	push	r18
    5834:	eb ec       	ldi	r30, 0xCB	; 203
    5836:	f1 e0       	ldi	r31, 0x01	; 1
    5838:	08 ed       	ldi	r16, 0xD8	; 216
    583a:	21 e0       	ldi	r18, 0x01	; 1
    583c:	04 bf       	out	0x34, r16	; 52
    583e:	20 83       	st	Z, r18
    5840:	2f 91       	pop	r18
    5842:	0f 91       	pop	r16
    5844:	ff 91       	pop	r31
    5846:	ef 91       	pop	r30
}
    5848:	08 95       	ret

0000584a <xio_pgm_init>:
 *
 *  Control parameters are defaulted and may be set using xio_pgm_control()
 */

void xio_pgm_init(const uint16_t control)
{
    584a:	9c 01       	movw	r18, r24
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;	// set flags to defaults & initial state
    584c:	85 e0       	ldi	r24, 0x05	; 5
    584e:	90 e0       	ldi	r25, 0x00	; 0
    5850:	80 93 18 22 	sts	0x2218, r24
    5854:	90 93 19 22 	sts	0x2219, r25
	if (control & XIO_WR) {				// this is actually an error. Ignore for now.
    5858:	25 ff       	sbrs	r18, 5
    585a:	06 c0       	rjmp	.+12     	; 0x5868 <xio_pgm_init+0x1e>
		fpgm.flags |= XIO_FLAG_WR_bm;
    585c:	87 e0       	ldi	r24, 0x07	; 7
    585e:	90 e0       	ldi	r25, 0x00	; 0
    5860:	80 93 18 22 	sts	0x2218, r24
    5864:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOBLOCK) {		// this is also technically a config error.
    5868:	27 ff       	sbrs	r18, 7
    586a:	09 c0       	rjmp	.+18     	; 0x587e <xio_pgm_init+0x34>
		fpgm.flags &= ~XIO_FLAG_BLOCK_bm;
    586c:	80 91 18 22 	lds	r24, 0x2218
    5870:	90 91 19 22 	lds	r25, 0x2219
    5874:	8b 7f       	andi	r24, 0xFB	; 251
    5876:	80 93 18 22 	sts	0x2218, r24
    587a:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_ECHO) {
    587e:	30 ff       	sbrs	r19, 0
    5880:	09 c0       	rjmp	.+18     	; 0x5894 <xio_pgm_init+0x4a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5882:	80 91 18 22 	lds	r24, 0x2218
    5886:	90 91 19 22 	lds	r25, 0x2219
    588a:	80 61       	ori	r24, 0x10	; 16
    588c:	80 93 18 22 	sts	0x2218, r24
    5890:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOECHO) {
    5894:	31 ff       	sbrs	r19, 1
    5896:	09 c0       	rjmp	.+18     	; 0x58aa <xio_pgm_init+0x60>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5898:	80 91 18 22 	lds	r24, 0x2218
    589c:	90 91 19 22 	lds	r25, 0x2219
    58a0:	8f 7e       	andi	r24, 0xEF	; 239
    58a2:	80 93 18 22 	sts	0x2218, r24
    58a6:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_CRLF) {
    58aa:	32 ff       	sbrs	r19, 2
    58ac:	09 c0       	rjmp	.+18     	; 0x58c0 <xio_pgm_init+0x76>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    58ae:	80 91 18 22 	lds	r24, 0x2218
    58b2:	90 91 19 22 	lds	r25, 0x2219
    58b6:	80 62       	ori	r24, 0x20	; 32
    58b8:	80 93 18 22 	sts	0x2218, r24
    58bc:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOCRLF) {
    58c0:	33 ff       	sbrs	r19, 3
    58c2:	09 c0       	rjmp	.+18     	; 0x58d6 <xio_pgm_init+0x8c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    58c4:	80 91 18 22 	lds	r24, 0x2218
    58c8:	90 91 19 22 	lds	r25, 0x2219
    58cc:	8f 7d       	andi	r24, 0xDF	; 223
    58ce:	80 93 18 22 	sts	0x2218, r24
    58d2:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_LINEMODE) {
    58d6:	34 ff       	sbrs	r19, 4
    58d8:	09 c0       	rjmp	.+18     	; 0x58ec <xio_pgm_init+0xa2>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    58da:	80 91 18 22 	lds	r24, 0x2218
    58de:	90 91 19 22 	lds	r25, 0x2219
    58e2:	80 64       	ori	r24, 0x40	; 64
    58e4:	80 93 18 22 	sts	0x2218, r24
    58e8:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOLINEMODE) {
    58ec:	35 ff       	sbrs	r19, 5
    58ee:	09 c0       	rjmp	.+18     	; 0x5902 <xio_pgm_init+0xb8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    58f0:	80 91 18 22 	lds	r24, 0x2218
    58f4:	90 91 19 22 	lds	r25, 0x2219
    58f8:	8f 7b       	andi	r24, 0xBF	; 191
    58fa:	80 93 18 22 	sts	0x2218, r24
    58fe:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_SEMICOLONS) {
    5902:	36 ff       	sbrs	r19, 6
    5904:	09 c0       	rjmp	.+18     	; 0x5918 <xio_pgm_init+0xce>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5906:	80 91 18 22 	lds	r24, 0x2218
    590a:	90 91 19 22 	lds	r25, 0x2219
    590e:	80 68       	ori	r24, 0x80	; 128
    5910:	80 93 18 22 	sts	0x2218, r24
    5914:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5918:	37 ff       	sbrs	r19, 7
    591a:	09 c0       	rjmp	.+18     	; 0x592e <xio_pgm_init+0xe4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    591c:	80 91 18 22 	lds	r24, 0x2218
    5920:	90 91 19 22 	lds	r25, 0x2219
    5924:	8f 77       	andi	r24, 0x7F	; 127
    5926:	80 93 18 22 	sts	0x2218, r24
    592a:	90 93 19 22 	sts	0x2219, r25
	}

	fpgm.idx = 0;
    592e:	10 92 26 22 	sts	0x2226, r1
    5932:	10 92 27 22 	sts	0x2227, r1
	fpgm.sig = 0;
    5936:	10 92 1a 22 	sts	0x221A, r1
	dev_pgm.udata = &(fpgm.sig); 	// bind signals register to pgm FILE struct
    593a:	8a e1       	ldi	r24, 0x1A	; 26
    593c:	92 e2       	ldi	r25, 0x22	; 34
    593e:	80 93 1a 20 	sts	0x201A, r24
    5942:	90 93 1b 20 	sts	0x201B, r25
	fpgm.len = sizeof(fpgm.buf);
    5946:	82 e0       	ldi	r24, 0x02	; 2
    5948:	80 93 1d 22 	sts	0x221D, r24

	fpgm.sig_func = &xio_null_signal;			// bind null signal handler
    594c:	8d ed       	ldi	r24, 0xDD	; 221
    594e:	95 e2       	ldi	r25, 0x25	; 37
    5950:	80 93 1e 22 	sts	0x221E, r24
    5954:	90 93 1f 22 	sts	0x221F, r25
	fpgm.line_func = &xio_null_line;			// bind null line handler
    5958:	80 ee       	ldi	r24, 0xE0	; 224
    595a:	95 e2       	ldi	r25, 0x25	; 37
    595c:	80 93 20 22 	sts	0x2220, r24
    5960:	90 93 21 22 	sts	0x2221, r25
}
    5964:	08 95       	ret

00005966 <xio_pgm_open>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

FILE * xio_pgm_open(const prog_char *addr)
{
	fpgm.flags &= XIO_FLAG_RESET_gm;			// reset the signaling bits
    5966:	20 91 18 22 	lds	r18, 0x2218
    596a:	30 91 19 22 	lds	r19, 0x2219
    596e:	3f 70       	andi	r19, 0x0F	; 15
    5970:	20 93 18 22 	sts	0x2218, r18
    5974:	30 93 19 22 	sts	0x2219, r19
	fpgm.pgmbase_P = (PROGMEM char *)addr;		// might want to range check this
    5978:	80 93 24 22 	sts	0x2224, r24
    597c:	90 93 25 22 	sts	0x2225, r25
	fpgm.idx = 0;
    5980:	10 92 26 22 	sts	0x2226, r1
    5984:	10 92 27 22 	sts	0x2227, r1
	return(&dev_pgm);
}
    5988:	8e e0       	ldi	r24, 0x0E	; 14
    598a:	90 e2       	ldi	r25, 0x20	; 32
    598c:	08 95       	ret

0000598e <xio_pgm_control>:
 *	XIO_SEMICOLONS <null>		Treat semicolons as line breaks
 *	XIO_NOSEMICOLONS <null>	Y	Don't treat semicolons as line breaks
 */

int8_t xio_pgm_control(const uint16_t control, const int16_t arg)
{
    598e:	9c 01       	movw	r18, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    5990:	84 ff       	sbrs	r24, 4
    5992:	05 c0       	rjmp	.+10     	; 0x599e <xio_pgm_control+0x10>
		fpgm.sig_func = (fptr_int_uint8)arg;
    5994:	60 93 1e 22 	sts	0x221E, r22
    5998:	70 93 1f 22 	sts	0x221F, r23
    599c:	62 c0       	rjmp	.+196    	; 0x5a62 <xio_pgm_control+0xd4>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    599e:	85 ff       	sbrs	r24, 5
    59a0:	05 c0       	rjmp	.+10     	; 0x59ac <xio_pgm_control+0x1e>
		fpgm.line_func = (fptr_int_char_p)arg;
    59a2:	60 93 20 22 	sts	0x2220, r22
    59a6:	70 93 21 22 	sts	0x2221, r23
    59aa:	5b c0       	rjmp	.+182    	; 0x5a62 <xio_pgm_control+0xd4>
		return (0);
	}
	// transfer control flags to internal flag bits
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;		// set flags to defaults & initial state
    59ac:	85 e0       	ldi	r24, 0x05	; 5
    59ae:	90 e0       	ldi	r25, 0x00	; 0
    59b0:	80 93 18 22 	sts	0x2218, r24
    59b4:	90 93 19 22 	sts	0x2219, r25
	if (control & XIO_ECHO) {
    59b8:	30 ff       	sbrs	r19, 0
    59ba:	06 c0       	rjmp	.+12     	; 0x59c8 <xio_pgm_control+0x3a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    59bc:	85 e1       	ldi	r24, 0x15	; 21
    59be:	90 e0       	ldi	r25, 0x00	; 0
    59c0:	80 93 18 22 	sts	0x2218, r24
    59c4:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOECHO) {
    59c8:	31 ff       	sbrs	r19, 1
    59ca:	09 c0       	rjmp	.+18     	; 0x59de <xio_pgm_control+0x50>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    59cc:	80 91 18 22 	lds	r24, 0x2218
    59d0:	90 91 19 22 	lds	r25, 0x2219
    59d4:	8f 7e       	andi	r24, 0xEF	; 239
    59d6:	80 93 18 22 	sts	0x2218, r24
    59da:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_CRLF) {
    59de:	32 ff       	sbrs	r19, 2
    59e0:	09 c0       	rjmp	.+18     	; 0x59f4 <xio_pgm_control+0x66>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    59e2:	80 91 18 22 	lds	r24, 0x2218
    59e6:	90 91 19 22 	lds	r25, 0x2219
    59ea:	80 62       	ori	r24, 0x20	; 32
    59ec:	80 93 18 22 	sts	0x2218, r24
    59f0:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOCRLF) {
    59f4:	33 ff       	sbrs	r19, 3
    59f6:	09 c0       	rjmp	.+18     	; 0x5a0a <xio_pgm_control+0x7c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    59f8:	80 91 18 22 	lds	r24, 0x2218
    59fc:	90 91 19 22 	lds	r25, 0x2219
    5a00:	8f 7d       	andi	r24, 0xDF	; 223
    5a02:	80 93 18 22 	sts	0x2218, r24
    5a06:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_LINEMODE) {
    5a0a:	34 ff       	sbrs	r19, 4
    5a0c:	09 c0       	rjmp	.+18     	; 0x5a20 <xio_pgm_control+0x92>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5a0e:	80 91 18 22 	lds	r24, 0x2218
    5a12:	90 91 19 22 	lds	r25, 0x2219
    5a16:	80 64       	ori	r24, 0x40	; 64
    5a18:	80 93 18 22 	sts	0x2218, r24
    5a1c:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOLINEMODE) {
    5a20:	35 ff       	sbrs	r19, 5
    5a22:	09 c0       	rjmp	.+18     	; 0x5a36 <xio_pgm_control+0xa8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5a24:	80 91 18 22 	lds	r24, 0x2218
    5a28:	90 91 19 22 	lds	r25, 0x2219
    5a2c:	8f 7b       	andi	r24, 0xBF	; 191
    5a2e:	80 93 18 22 	sts	0x2218, r24
    5a32:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_SEMICOLONS) {
    5a36:	36 ff       	sbrs	r19, 6
    5a38:	09 c0       	rjmp	.+18     	; 0x5a4c <xio_pgm_control+0xbe>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5a3a:	80 91 18 22 	lds	r24, 0x2218
    5a3e:	90 91 19 22 	lds	r25, 0x2219
    5a42:	80 68       	ori	r24, 0x80	; 128
    5a44:	80 93 18 22 	sts	0x2218, r24
    5a48:	90 93 19 22 	sts	0x2219, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5a4c:	37 ff       	sbrs	r19, 7
    5a4e:	09 c0       	rjmp	.+18     	; 0x5a62 <xio_pgm_control+0xd4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5a50:	80 91 18 22 	lds	r24, 0x2218
    5a54:	90 91 19 22 	lds	r25, 0x2219
    5a58:	8f 77       	andi	r24, 0x7F	; 127
    5a5a:	80 93 18 22 	sts	0x2218, r24
    5a5e:	90 93 19 22 	sts	0x2219, r25
	}
	return (0);
}
    5a62:	80 e0       	ldi	r24, 0x00	; 0
    5a64:	08 95       	ret

00005a66 <xio_pgm_putc>:
 */

int xio_pgm_putc(const char c, FILE *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    5a66:	8f ef       	ldi	r24, 0xFF	; 255
    5a68:	9f ef       	ldi	r25, 0xFF	; 255
    5a6a:	08 95       	ret

00005a6c <xio_pgm_readln>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_pgm_readln(char *buf, uint8_t len)
{
    5a6c:	9c 01       	movw	r18, r24
	if (!(fpgm.pgmbase_P)) {					// return OK if no file is open
    5a6e:	80 91 24 22 	lds	r24, 0x2224
    5a72:	90 91 25 22 	lds	r25, 0x2225
    5a76:	89 2b       	or	r24, r25
    5a78:	a9 f0       	breq	.+42     	; 0x5aa4 <xio_pgm_readln+0x38>
		return (TG_OK);					 
	}
	fpgm.sig = XIO_SIG_OK;						// initialize signal
    5a7a:	10 92 1a 22 	sts	0x221A, r1
	if (fgets(buf, len, &dev_pgm) == NULL) {
    5a7e:	c9 01       	movw	r24, r18
    5a80:	70 e0       	ldi	r23, 0x00	; 0
    5a82:	4e e0       	ldi	r20, 0x0E	; 14
    5a84:	50 e2       	ldi	r21, 0x20	; 32
    5a86:	0e 94 86 42 	call	0x850c	; 0x850c <fgets>
    5a8a:	89 2b       	or	r24, r25
    5a8c:	59 f4       	brne	.+22     	; 0x5aa4 <xio_pgm_readln+0x38>
		fpgm.pgmbase_P = NULL;
    5a8e:	10 92 24 22 	sts	0x2224, r1
    5a92:	10 92 25 22 	sts	0x2225, r1
		clearerr(&dev_pgm);
    5a96:	8e e0       	ldi	r24, 0x0E	; 14
    5a98:	90 e2       	ldi	r25, 0x20	; 32
    5a9a:	0e 94 81 42 	call	0x8502	; 0x8502 <clearerr>
    5a9e:	24 e0       	ldi	r18, 0x04	; 4
    5aa0:	30 e0       	ldi	r19, 0x00	; 0
    5aa2:	02 c0       	rjmp	.+4      	; 0x5aa8 <xio_pgm_readln+0x3c>
		return (TG_EOF);
    5aa4:	20 e0       	ldi	r18, 0x00	; 0
    5aa6:	30 e0       	ldi	r19, 0x00	; 0
//	return (fpgm.status);

	// return directly without dispatch through line function callback
//	fpgm.status = ((int)fpgm.line_func(buf));	// call line handler function
	return (TG_OK);
}
    5aa8:	c9 01       	movw	r24, r18
    5aaa:	08 95       	ret

00005aac <xio_pgm_getc>:
 *		- Note: putc should expand newlines to <cr><lf>
 */

int xio_pgm_getc(FILE *stream)
{
	if (fpgm.flags & XIO_FLAG_EOF_bm) {
    5aac:	40 91 18 22 	lds	r20, 0x2218
    5ab0:	50 91 19 22 	lds	r21, 0x2219
    5ab4:	55 ff       	sbrs	r21, 5
    5ab6:	06 c0       	rjmp	.+12     	; 0x5ac4 <xio_pgm_getc+0x18>
		fpgm.sig = XIO_SIG_EOF;
    5ab8:	82 e0       	ldi	r24, 0x02	; 2
    5aba:	80 93 1a 22 	sts	0x221A, r24
    5abe:	2e ef       	ldi	r18, 0xFE	; 254
    5ac0:	3f ef       	ldi	r19, 0xFF	; 255
    5ac2:	3f c0       	rjmp	.+126    	; 0x5b42 <xio_pgm_getc+0x96>
		return (_FDEV_EOF);
	}
	if ((fpgm.c = pgm_read_byte(&fpgm.pgmbase_P[fpgm.idx])) == NUL) {
    5ac4:	20 91 26 22 	lds	r18, 0x2226
    5ac8:	30 91 27 22 	lds	r19, 0x2227
    5acc:	e0 91 24 22 	lds	r30, 0x2224
    5ad0:	f0 91 25 22 	lds	r31, 0x2225
    5ad4:	e2 0f       	add	r30, r18
    5ad6:	f3 1f       	adc	r31, r19
    5ad8:	84 91       	lpm	r24, Z+
    5ada:	80 93 1b 22 	sts	0x221B, r24
    5ade:	88 23       	and	r24, r24
    5ae0:	29 f4       	brne	.+10     	; 0x5aec <xio_pgm_getc+0x40>
		fpgm.flags |= XIO_FLAG_EOF_bm;
    5ae2:	50 62       	ori	r21, 0x20	; 32
    5ae4:	40 93 18 22 	sts	0x2218, r20
    5ae8:	50 93 19 22 	sts	0x2219, r21
	}
	++fpgm.idx;
    5aec:	2f 5f       	subi	r18, 0xFF	; 255
    5aee:	3f 4f       	sbci	r19, 0xFF	; 255
    5af0:	20 93 26 22 	sts	0x2226, r18
    5af4:	30 93 27 22 	sts	0x2227, r19
	if (!LINEMODE(fpgm.flags)) {		// processing is simple if not LINEMODE
    5af8:	90 91 18 22 	lds	r25, 0x2218
    5afc:	96 fd       	sbrc	r25, 6
    5afe:	07 c0       	rjmp	.+14     	; 0x5b0e <xio_pgm_getc+0x62>
		if (ECHO(fpgm.flags)) {
    5b00:	94 ff       	sbrs	r25, 4
    5b02:	1b c0       	rjmp	.+54     	; 0x5b3a <xio_pgm_getc+0x8e>
			putchar(fpgm.c);
    5b04:	60 91 0e 25 	lds	r22, 0x250E
    5b08:	70 91 0f 25 	lds	r23, 0x250F
    5b0c:	13 c0       	rjmp	.+38     	; 0x5b34 <xio_pgm_getc+0x88>
		}
		return (fpgm.c);
	}
	// now do the LINEMODE stuff
	if (fpgm.c == NUL) {				// perform newline substitutions
    5b0e:	88 23       	and	r24, r24
    5b10:	31 f0       	breq	.+12     	; 0x5b1e <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if (fpgm.c == '\r') {
    5b12:	8d 30       	cpi	r24, 0x0D	; 13
    5b14:	21 f0       	breq	.+8      	; 0x5b1e <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if ((SEMICOLONS(fpgm.flags)) && (fpgm.c == ';')) {
    5b16:	97 ff       	sbrs	r25, 7
    5b18:	05 c0       	rjmp	.+10     	; 0x5b24 <xio_pgm_getc+0x78>
    5b1a:	8b 33       	cpi	r24, 0x3B	; 59
    5b1c:	19 f4       	brne	.+6      	; 0x5b24 <xio_pgm_getc+0x78>
		fpgm.c = '\n';
    5b1e:	8a e0       	ldi	r24, 0x0A	; 10
    5b20:	80 93 1b 22 	sts	0x221B, r24
	}
	if (ECHO(fpgm.flags)) {
    5b24:	94 ff       	sbrs	r25, 4
    5b26:	09 c0       	rjmp	.+18     	; 0x5b3a <xio_pgm_getc+0x8e>
		putchar(fpgm.c);
    5b28:	60 91 0e 25 	lds	r22, 0x250E
    5b2c:	70 91 0f 25 	lds	r23, 0x250F
    5b30:	80 91 1b 22 	lds	r24, 0x221B
    5b34:	90 e0       	ldi	r25, 0x00	; 0
    5b36:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
	}
	return (fpgm.c);
    5b3a:	80 91 1b 22 	lds	r24, 0x221B
    5b3e:	28 2f       	mov	r18, r24
    5b40:	30 e0       	ldi	r19, 0x00	; 0
}
    5b42:	c9 01       	movw	r24, r18
    5b44:	08 95       	ret

00005b46 <_tg_set_source>:
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.source = d;									// d = XIO device #. See xio.h
    5b46:	80 93 2c 22 	sts	0x222C, r24
	tg.prompts = TRUE;
    5b4a:	61 e0       	ldi	r22, 0x01	; 1
    5b4c:	60 93 2e 22 	sts	0x222E, r22

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5b50:	42 e0       	ldi	r20, 0x02	; 2
    5b52:	40 93 84 22 	sts	0x2284, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5b56:	2c e1       	ldi	r18, 0x1C	; 28
    5b58:	3f e2       	ldi	r19, 0x2F	; 47
    5b5a:	20 93 86 22 	sts	0x2286, r18
    5b5e:	30 93 87 22 	sts	0x2287, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5b62:	90 e5       	ldi	r25, 0x50	; 80
    5b64:	90 93 85 22 	sts	0x2285, r25
	tg.source = d;									// d = XIO device #. See xio.h
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5b68:	40 93 d8 22 	sts	0x22D8, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5b6c:	20 93 da 22 	sts	0x22DA, r18
    5b70:	30 93 db 22 	sts	0x22DB, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5b74:	90 93 d9 22 	sts	0x22D9, r25
	tg.source = d;									// d = XIO device #. See xio.h
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5b78:	40 93 2c 23 	sts	0x232C, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5b7c:	20 93 2e 23 	sts	0x232E, r18
    5b80:	30 93 2f 23 	sts	0x232F, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5b84:	90 93 2d 23 	sts	0x232D, r25
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
		tg.dev[i].poll_func = &_tg_poll_signal;
    5b88:	20 93 82 23 	sts	0x2382, r18
    5b8c:	30 93 83 23 	sts	0x2383, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5b90:	90 93 81 23 	sts	0x2381, r25
	}
	tg.dev[XIO_DEV_PGM].state = TG_SRC_INACTIVE;	// program memory is an exception
    5b94:	10 92 80 23 	sts	0x2380, r1

	// make selected device active
	tg.dev[d].state = TG_SRC_ACTIVE;	
    5b98:	48 2f       	mov	r20, r24
    5b9a:	50 e0       	ldi	r21, 0x00	; 0
    5b9c:	24 e5       	ldi	r18, 0x54	; 84
    5b9e:	30 e0       	ldi	r19, 0x00	; 0
    5ba0:	42 9f       	mul	r20, r18
    5ba2:	f0 01       	movw	r30, r0
    5ba4:	43 9f       	mul	r20, r19
    5ba6:	f0 0d       	add	r31, r0
    5ba8:	52 9f       	mul	r21, r18
    5baa:	f0 0d       	add	r31, r0
    5bac:	11 24       	eor	r1, r1
    5bae:	e7 5d       	subi	r30, 0xD7	; 215
    5bb0:	fd 4d       	sbci	r31, 0xDD	; 221
    5bb2:	67 83       	std	Z+7, r22	; 0x07
	tg.dev[d].poll_func = &_tg_poll_active;
    5bb4:	2a e2       	ldi	r18, 0x2A	; 42
    5bb6:	30 e0       	ldi	r19, 0x00	; 0
    5bb8:	42 9f       	mul	r20, r18
    5bba:	f0 01       	movw	r30, r0
    5bbc:	43 9f       	mul	r20, r19
    5bbe:	f0 0d       	add	r31, r0
    5bc0:	52 9f       	mul	r21, r18
    5bc2:	f0 0d       	add	r31, r0
    5bc4:	11 24       	eor	r1, r1
    5bc6:	ee 0f       	add	r30, r30
    5bc8:	ff 1f       	adc	r31, r31
    5bca:	e5 5d       	subi	r30, 0xD5	; 213
    5bcc:	fd 4d       	sbci	r31, 0xDD	; 221
    5bce:	2b ea       	ldi	r18, 0xAB	; 171
    5bd0:	3e e2       	ldi	r19, 0x2E	; 46
    5bd2:	27 83       	std	Z+7, r18	; 0x07
    5bd4:	30 87       	std	Z+8, r19	; 0x08
	if (d == XIO_DEV_PGM) {
    5bd6:	84 30       	cpi	r24, 0x04	; 4
    5bd8:	11 f4       	brne	.+4      	; 0x5bde <_tg_set_source+0x98>
		tg.prompts = FALSE;							// no prompts for file input
    5bda:	10 92 2e 22 	sts	0x222E, r1
    5bde:	08 95       	ret

00005be0 <tg_pause>:
}

void tg_pause()
{
	return;
}
    5be0:	08 95       	ret

00005be2 <tg_resume>:

void tg_resume()
{
	return;
}
    5be2:	08 95       	ret

00005be4 <tg_terminate>:
	return;
}

void tg_terminate()
{
	st_kill();
    5be4:	0e 94 59 23 	call	0x46b2	; 0x46b2 <st_kill>
	return;
}
    5be8:	08 95       	ret

00005bea <tg_kill>:
	return (0);
}

void tg_kill()
{
	st_kill();
    5bea:	0e 94 59 23 	call	0x46b2	; 0x46b2 <st_kill>
	return;
}
    5bee:	08 95       	ret

00005bf0 <_tg_prompt>:
	tgModeStringDirect
};

void _tg_prompt()
{
	if ((tg.prompts) && (tg.state == TG_STATE_READY_UNPROMPTED)) {
    5bf0:	80 91 2e 22 	lds	r24, 0x222E
    5bf4:	88 23       	and	r24, r24
    5bf6:	09 f1       	breq	.+66     	; 0x5c3a <_tg_prompt+0x4a>
    5bf8:	80 91 29 22 	lds	r24, 0x2229
    5bfc:	88 23       	and	r24, r24
    5bfe:	e9 f4       	brne	.+58     	; 0x5c3a <_tg_prompt+0x4a>
//		printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
		printf_P(PSTR("TinyG [%S]*> \n"),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5c00:	80 91 2b 22 	lds	r24, 0x222B
    5c04:	e8 2f       	mov	r30, r24
    5c06:	f0 e0       	ldi	r31, 0x00	; 0
    5c08:	ee 0f       	add	r30, r30
    5c0a:	ff 1f       	adc	r31, r31
    5c0c:	e8 57       	subi	r30, 0x78	; 120
    5c0e:	f5 4e       	sbci	r31, 0xE5	; 229
    5c10:	25 91       	lpm	r18, Z+
    5c12:	34 91       	lpm	r19, Z+
    5c14:	00 d0       	rcall	.+0      	; 0x5c16 <_tg_prompt+0x26>
    5c16:	0f 92       	push	r0
    5c18:	8b eb       	ldi	r24, 0xBB	; 187
    5c1a:	9a e1       	ldi	r25, 0x1A	; 26
    5c1c:	ed b7       	in	r30, 0x3d	; 61
    5c1e:	fe b7       	in	r31, 0x3e	; 62
    5c20:	81 83       	std	Z+1, r24	; 0x01
    5c22:	92 83       	std	Z+2, r25	; 0x02
    5c24:	23 83       	std	Z+3, r18	; 0x03
    5c26:	34 83       	std	Z+4, r19	; 0x04
    5c28:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
		tg.state = TG_STATE_READY_PROMPTED;
    5c2c:	81 e0       	ldi	r24, 0x01	; 1
    5c2e:	80 93 29 22 	sts	0x2229, r24
    5c32:	0f 90       	pop	r0
    5c34:	0f 90       	pop	r0
    5c36:	0f 90       	pop	r0
    5c38:	0f 90       	pop	r0
	}
	// bastardized prompts for file sources
	if ((!tg.prompts) && (tg.state == TG_STATE_READY_UNPROMPTED)) {
    5c3a:	80 91 2e 22 	lds	r24, 0x222E
    5c3e:	88 23       	and	r24, r24
    5c40:	f1 f4       	brne	.+60     	; 0x5c7e <_tg_prompt+0x8e>
    5c42:	80 91 29 22 	lds	r24, 0x2229
    5c46:	88 23       	and	r24, r24
    5c48:	d1 f4       	brne	.+52     	; 0x5c7e <_tg_prompt+0x8e>
//		printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
		printf_P(PSTR("TinyG [%S]*> \n"),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5c4a:	80 91 2b 22 	lds	r24, 0x222B
    5c4e:	e8 2f       	mov	r30, r24
    5c50:	f0 e0       	ldi	r31, 0x00	; 0
    5c52:	ee 0f       	add	r30, r30
    5c54:	ff 1f       	adc	r31, r31
    5c56:	e8 57       	subi	r30, 0x78	; 120
    5c58:	f5 4e       	sbci	r31, 0xE5	; 229
    5c5a:	25 91       	lpm	r18, Z+
    5c5c:	34 91       	lpm	r19, Z+
    5c5e:	00 d0       	rcall	.+0      	; 0x5c60 <_tg_prompt+0x70>
    5c60:	0f 92       	push	r0
    5c62:	8c ea       	ldi	r24, 0xAC	; 172
    5c64:	9a e1       	ldi	r25, 0x1A	; 26
    5c66:	ed b7       	in	r30, 0x3d	; 61
    5c68:	fe b7       	in	r31, 0x3e	; 62
    5c6a:	81 83       	std	Z+1, r24	; 0x01
    5c6c:	92 83       	std	Z+2, r25	; 0x02
    5c6e:	23 83       	std	Z+3, r18	; 0x03
    5c70:	34 83       	std	Z+4, r19	; 0x04
    5c72:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
    5c76:	0f 90       	pop	r0
    5c78:	0f 90       	pop	r0
    5c7a:	0f 90       	pop	r0
    5c7c:	0f 90       	pop	r0
    5c7e:	08 95       	ret

00005c80 <tg_signal>:
 * tg_signal() - default signal handler to bind to the line readers
 */

int tg_signal(uint8_t sig)
{
	switch (sig) {
    5c80:	84 30       	cpi	r24, 0x04	; 4
    5c82:	99 f0       	breq	.+38     	; 0x5caa <tg_signal+0x2a>
    5c84:	85 30       	cpi	r24, 0x05	; 5
    5c86:	89 f0       	breq	.+34     	; 0x5caa <tg_signal+0x2a>
    5c88:	82 30       	cpi	r24, 0x02	; 2
    5c8a:	89 f4       	brne	.+34     	; 0x5cae <tg_signal+0x2e>
		case XIO_SIG_OK: break;
 		case XIO_SIG_EOL: break;

		case XIO_SIG_EOF:
			printf_P(PSTR("\r\nEnd of file encountered\r\n"));
    5c8c:	0f 92       	push	r0
    5c8e:	0f 92       	push	r0
    5c90:	80 e9       	ldi	r24, 0x90	; 144
    5c92:	9a e1       	ldi	r25, 0x1A	; 26
    5c94:	ed b7       	in	r30, 0x3d	; 61
    5c96:	fe b7       	in	r31, 0x3e	; 62
    5c98:	81 83       	std	Z+1, r24	; 0x01
    5c9a:	92 83       	std	Z+2, r25	; 0x02
    5c9c:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
//			tg.srcin = stdin;
			_tg_prompt();
    5ca0:	0f 90       	pop	r0
    5ca2:	0f 90       	pop	r0
    5ca4:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <_tg_prompt>
    5ca8:	02 c0       	rjmp	.+4      	; 0x5cae <tg_signal+0x2e>
	return;
}

void tg_terminate()
{
	st_kill();
    5caa:	0e 94 59 23 	call	0x46b2	; 0x46b2 <st_kill>
		case XIO_SIG_SHIFTOUT: break;
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
}
    5cae:	80 e0       	ldi	r24, 0x00	; 0
    5cb0:	90 e0       	ldi	r25, 0x00	; 0
    5cb2:	08 95       	ret

00005cb4 <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    5cb4:	fc 01       	movw	r30, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    5cb6:	80 91 2b 22 	lds	r24, 0x222B
    5cba:	88 23       	and	r24, r24
    5cbc:	79 f5       	brne	.+94     	; 0x5d1c <tg_parser+0x68>
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
    5cbe:	90 81       	ld	r25, Z
    5cc0:	89 2f       	mov	r24, r25
    5cc2:	81 56       	subi	r24, 0x61	; 97
    5cc4:	8a 31       	cpi	r24, 0x1A	; 26
    5cc6:	10 f4       	brcc	.+4      	; 0x5ccc <tg_parser+0x18>
			buf[0] = buf[0]-'a'+'A';
    5cc8:	90 52       	subi	r25, 0x20	; 32
    5cca:	90 83       	st	Z, r25
		}
		switch (buf[0]) {
    5ccc:	80 81       	ld	r24, Z
    5cce:	86 34       	cpi	r24, 0x46	; 70
    5cd0:	b1 f0       	breq	.+44     	; 0x5cfe <tg_parser+0x4a>
    5cd2:	87 34       	cpi	r24, 0x47	; 71
    5cd4:	38 f4       	brcc	.+14     	; 0x5ce4 <tg_parser+0x30>
    5cd6:	83 34       	cpi	r24, 0x43	; 67
    5cd8:	61 f0       	breq	.+24     	; 0x5cf2 <tg_parser+0x3e>
    5cda:	84 34       	cpi	r24, 0x44	; 68
    5cdc:	71 f0       	breq	.+28     	; 0x5cfa <tg_parser+0x46>
    5cde:	8f 33       	cpi	r24, 0x3F	; 63
    5ce0:	d9 f4       	brne	.+54     	; 0x5d18 <tg_parser+0x64>
    5ce2:	07 c0       	rjmp	.+14     	; 0x5cf2 <tg_parser+0x3e>
    5ce4:	87 34       	cpi	r24, 0x47	; 71
    5ce6:	19 f0       	breq	.+6      	; 0x5cee <tg_parser+0x3a>
    5ce8:	8d 54       	subi	r24, 0x4D	; 77
    5cea:	82 30       	cpi	r24, 0x02	; 2
    5cec:	a8 f4       	brcc	.+42     	; 0x5d18 <tg_parser+0x64>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5cee:	82 e0       	ldi	r24, 0x02	; 2
    5cf0:	01 c0       	rjmp	.+2      	; 0x5cf4 <tg_parser+0x40>
	if (tg.mode == TG_CONTROL_MODE) {
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
			buf[0] = buf[0]-'a'+'A';
		}
		switch (buf[0]) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    5cf2:	81 e0       	ldi	r24, 0x01	; 1
    5cf4:	80 93 2b 22 	sts	0x222B, r24
    5cf8:	11 c0       	rjmp	.+34     	; 0x5d1c <tg_parser+0x68>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5cfa:	83 e0       	ldi	r24, 0x03	; 3
    5cfc:	fb cf       	rjmp	.-10     	; 0x5cf4 <tg_parser+0x40>
//	xio_pgm_open(PGMFILE(&square_circle_test100));
//	xio_pgm_open(PGMFILE(&spiral_test50a));
//	xio_pgm_open(PGMFILE(&spiral_test5));

//	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
	xio_pgm_open(PGMFILE(&zoetrope));
    5cfe:	8b eb       	ldi	r24, 0xBB	; 187
    5d00:	9c e0       	ldi	r25, 0x0C	; 12
    5d02:	0e 94 b3 2c 	call	0x5966	; 0x5966 <xio_pgm_open>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5d06:	82 e0       	ldi	r24, 0x02	; 2
    5d08:	80 93 2b 22 	sts	0x222B, r24
//	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
	xio_pgm_open(PGMFILE(&zoetrope));

	// set mode and source for file mode
	_tg_set_mode(TG_GCODE_MODE);
	_tg_set_source(XIO_DEV_PGM);
    5d0c:	84 e0       	ldi	r24, 0x04	; 4
    5d0e:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <_tg_set_source>
    5d12:	20 e0       	ldi	r18, 0x00	; 0
    5d14:	30 e0       	ldi	r19, 0x00	; 0
    5d16:	1d c0       	rjmp	.+58     	; 0x5d52 <tg_parser+0x9e>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5d18:	10 92 2b 22 	sts	0x222B, r1
			case 'F': return (_tg_test_file());
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    5d1c:	10 92 2a 22 	sts	0x222A, r1
	switch (tg.mode) {
    5d20:	80 91 2b 22 	lds	r24, 0x222B
    5d24:	82 30       	cpi	r24, 0x02	; 2
    5d26:	41 f0       	breq	.+16     	; 0x5d38 <tg_parser+0x84>
    5d28:	83 30       	cpi	r24, 0x03	; 3
    5d2a:	51 f0       	breq	.+20     	; 0x5d40 <tg_parser+0x8c>
    5d2c:	81 30       	cpi	r24, 0x01	; 1
    5d2e:	69 f4       	brne	.+26     	; 0x5d4a <tg_parser+0x96>
//		case TG_CONTROL_MODE: 
//			break;

		case TG_CONFIG_MODE:
			tg.status = cfg_parse(buf);
    5d30:	cf 01       	movw	r24, r30
    5d32:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <cfg_parse>
    5d36:	07 c0       	rjmp	.+14     	; 0x5d46 <tg_parser+0x92>
			break;

		case TG_GCODE_MODE: 
			tg.status = gc_gcode_parser(buf);
    5d38:	cf 01       	movw	r24, r30
    5d3a:	0e 94 97 14 	call	0x292e	; 0x292e <gc_gcode_parser>
    5d3e:	03 c0       	rjmp	.+6      	; 0x5d46 <tg_parser+0x92>
			break;

		case TG_DIRECT_DRIVE_MODE:
			tg.status = dd_parser(buf);
    5d40:	cf 01       	movw	r24, r30
    5d42:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <dd_parser>
    5d46:	80 93 2a 22 	sts	0x222A, r24
			break;
	}
	return (tg.status);
    5d4a:	80 91 2a 22 	lds	r24, 0x222A
    5d4e:	28 2f       	mov	r18, r24
    5d50:	30 e0       	ldi	r19, 0x00	; 0
}
    5d52:	c9 01       	movw	r24, r18
    5d54:	08 95       	ret

00005d56 <_tg_poll_active>:
/* 
 * _tg_poll_active() - Perform a non-blocking line read from active input device
 */

static void _tg_poll_active(uint8_t d)
{
    5d56:	cf 93       	push	r28
    5d58:	df 93       	push	r29
    5d5a:	48 2f       	mov	r20, r24
	if (tg.dev[d].state != TG_SRC_ACTIVE) {			// sanity check
    5d5c:	28 2f       	mov	r18, r24
    5d5e:	30 e0       	ldi	r19, 0x00	; 0
    5d60:	84 e5       	ldi	r24, 0x54	; 84
    5d62:	90 e0       	ldi	r25, 0x00	; 0
    5d64:	28 9f       	mul	r18, r24
    5d66:	f0 01       	movw	r30, r0
    5d68:	29 9f       	mul	r18, r25
    5d6a:	f0 0d       	add	r31, r0
    5d6c:	38 9f       	mul	r19, r24
    5d6e:	f0 0d       	add	r31, r0
    5d70:	11 24       	eor	r1, r1
    5d72:	e7 5d       	subi	r30, 0xD7	; 215
    5d74:	fd 4d       	sbci	r31, 0xDD	; 221
    5d76:	97 81       	ldd	r25, Z+7	; 0x07
    5d78:	91 30       	cpi	r25, 0x01	; 1
    5d7a:	09 f0       	breq	.+2      	; 0x5d7e <_tg_poll_active+0x28>
    5d7c:	5a c0       	rjmp	.+180    	; 0x5e32 <_tg_poll_active+0xdc>
		return;
	}

	// special handling for file sources
	if (tg.source == XIO_DEV_PGM) {
    5d7e:	80 91 2c 22 	lds	r24, 0x222C
    5d82:	84 30       	cpi	r24, 0x04	; 4
    5d84:	39 f4       	brne	.+14     	; 0x5d94 <_tg_poll_active+0x3e>
		if (tg.state == TG_STATE_READY_UNPROMPTED) {
    5d86:	80 91 29 22 	lds	r24, 0x2229
    5d8a:	88 23       	and	r24, r24
    5d8c:	09 f0       	breq	.+2      	; 0x5d90 <_tg_poll_active+0x3a>
    5d8e:	51 c0       	rjmp	.+162    	; 0x5e32 <_tg_poll_active+0xdc>
			tg.state = TG_STATE_READY_PROMPTED; 	// issue "virtual prompt"
    5d90:	90 93 29 22 	sts	0x2229, r25
			return;									// not ready for next line
		}
	}

	// read input line or return if not a completed line
	if ((tg.status = xio_fget_ln(d, tg.dev[d].buf, tg.dev[d].len)) == TG_OK) {
    5d94:	85 e1       	ldi	r24, 0x15	; 21
    5d96:	90 e0       	ldi	r25, 0x00	; 0
    5d98:	28 9f       	mul	r18, r24
    5d9a:	e0 01       	movw	r28, r0
    5d9c:	29 9f       	mul	r18, r25
    5d9e:	d0 0d       	add	r29, r0
    5da0:	38 9f       	mul	r19, r24
    5da2:	d0 0d       	add	r29, r0
    5da4:	11 24       	eor	r1, r1
    5da6:	cc 0f       	add	r28, r28
    5da8:	dd 1f       	adc	r29, r29
    5daa:	cc 0f       	add	r28, r28
    5dac:	dd 1f       	adc	r29, r29
    5dae:	cc 5c       	subi	r28, 0xCC	; 204
    5db0:	dd 4d       	sbci	r29, 0xDD	; 221
    5db2:	84 e5       	ldi	r24, 0x54	; 84
    5db4:	90 e0       	ldi	r25, 0x00	; 0
    5db6:	28 9f       	mul	r18, r24
    5db8:	f0 01       	movw	r30, r0
    5dba:	29 9f       	mul	r18, r25
    5dbc:	f0 0d       	add	r31, r0
    5dbe:	38 9f       	mul	r19, r24
    5dc0:	f0 0d       	add	r31, r0
    5dc2:	11 24       	eor	r1, r1
    5dc4:	e7 5d       	subi	r30, 0xD7	; 215
    5dc6:	fd 4d       	sbci	r31, 0xDD	; 221
    5dc8:	84 2f       	mov	r24, r20
    5dca:	be 01       	movw	r22, r28
    5dcc:	40 85       	ldd	r20, Z+8	; 0x08
    5dce:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <xio_fget_ln>
    5dd2:	80 93 2a 22 	sts	0x222A, r24
    5dd6:	88 23       	and	r24, r24
    5dd8:	29 f4       	brne	.+10     	; 0x5de4 <_tg_poll_active+0x8e>
		tg.status = tg_parser(tg.dev[d].buf);	// dispatch to parser
    5dda:	ce 01       	movw	r24, r28
    5ddc:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <tg_parser>
    5de0:	80 93 2a 22 	sts	0x222A, r24
	}
	switch (tg.status) {
    5de4:	80 91 2a 22 	lds	r24, 0x222A
    5de8:	82 30       	cpi	r24, 0x02	; 2
    5dea:	61 f0       	breq	.+24     	; 0x5e04 <_tg_poll_active+0xae>
    5dec:	83 30       	cpi	r24, 0x03	; 3
    5dee:	28 f4       	brcc	.+10     	; 0x5dfa <_tg_poll_active+0xa4>
    5df0:	88 23       	and	r24, r24
    5df2:	e9 f0       	breq	.+58     	; 0x5e2e <_tg_poll_active+0xd8>
    5df4:	81 30       	cpi	r24, 0x01	; 1
    5df6:	d9 f4       	brne	.+54     	; 0x5e2e <_tg_poll_active+0xd8>
    5df8:	1c c0       	rjmp	.+56     	; 0x5e32 <_tg_poll_active+0xdc>
    5dfa:	83 30       	cpi	r24, 0x03	; 3
    5dfc:	31 f0       	breq	.+12     	; 0x5e0a <_tg_poll_active+0xb4>
    5dfe:	84 30       	cpi	r24, 0x04	; 4
    5e00:	b1 f4       	brne	.+44     	; 0x5e2e <_tg_poll_active+0xd8>
    5e02:	05 c0       	rjmp	.+10     	; 0x5e0e <_tg_poll_active+0xb8>
		case TG_NOOP: {
			break;
		}

		case TG_CONTINUE: { 						// returned without a new line
			tg.state = TG_STATE_READING_COMMAND; 
    5e04:	80 93 29 22 	sts	0x2229, r24
    5e08:	14 c0       	rjmp	.+40     	; 0x5e32 <_tg_poll_active+0xdc>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5e0a:	10 92 2b 22 	sts	0x222B, r1
//			tg.state = TG_STATE_READY_UNPROMPTED;	// left commented for clarity
//			break;
		}
					  	
		case TG_EOF: {								// file devices only
			printf_P(PSTR("End of command file\n"));
    5e0e:	0f 92       	push	r0
    5e10:	0f 92       	push	r0
    5e12:	8a ec       	ldi	r24, 0xCA	; 202
    5e14:	9a e1       	ldi	r25, 0x1A	; 26
    5e16:	ed b7       	in	r30, 0x3d	; 61
    5e18:	fe b7       	in	r31, 0x3e	; 62
    5e1a:	81 83       	std	Z+1, r24	; 0x01
    5e1c:	92 83       	std	Z+2, r25	; 0x02
    5e1e:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
			_tg_set_source(tg.source_default);		// reset to default src
    5e22:	0f 90       	pop	r0
    5e24:	0f 90       	pop	r0
    5e26:	80 91 2d 22 	lds	r24, 0x222D
    5e2a:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <_tg_set_source>
//			tg.state = TG_STATE_READY_UNPROMPTED;	// left commented for clarity
//			break;
		}
		default: {
			tg.state = TG_STATE_READY_UNPROMPTED;	// traps various error returns
    5e2e:	10 92 29 22 	sts	0x2229, r1
		}
	}
}
    5e32:	df 91       	pop	r29
    5e34:	cf 91       	pop	r28
    5e36:	08 95       	ret

00005e38 <_tg_poll_signal>:
 *	If a signal is received it's dispatched from the low-level line reader
 *	Any line that's read is ignored (tossed)
 */

static void _tg_poll_signal(uint8_t d)
{
    5e38:	48 2f       	mov	r20, r24
	if (tg.dev[d].state != TG_SRC_SIGNAL) {			// sanity check
    5e3a:	28 2f       	mov	r18, r24
    5e3c:	30 e0       	ldi	r19, 0x00	; 0
    5e3e:	84 e5       	ldi	r24, 0x54	; 84
    5e40:	90 e0       	ldi	r25, 0x00	; 0
    5e42:	28 9f       	mul	r18, r24
    5e44:	f0 01       	movw	r30, r0
    5e46:	29 9f       	mul	r18, r25
    5e48:	f0 0d       	add	r31, r0
    5e4a:	38 9f       	mul	r19, r24
    5e4c:	f0 0d       	add	r31, r0
    5e4e:	11 24       	eor	r1, r1
    5e50:	e7 5d       	subi	r30, 0xD7	; 215
    5e52:	fd 4d       	sbci	r31, 0xDD	; 221
    5e54:	87 81       	ldd	r24, Z+7	; 0x07
    5e56:	82 30       	cpi	r24, 0x02	; 2
    5e58:	a9 f4       	brne	.+42     	; 0x5e84 <_tg_poll_signal+0x4c>
		return;
	}
	tg.status = xio_fget_ln(d, tg.dev[d].buf, tg.dev[d].len);
    5e5a:	85 e1       	ldi	r24, 0x15	; 21
    5e5c:	90 e0       	ldi	r25, 0x00	; 0
    5e5e:	28 9f       	mul	r18, r24
    5e60:	b0 01       	movw	r22, r0
    5e62:	29 9f       	mul	r18, r25
    5e64:	70 0d       	add	r23, r0
    5e66:	38 9f       	mul	r19, r24
    5e68:	70 0d       	add	r23, r0
    5e6a:	11 24       	eor	r1, r1
    5e6c:	66 0f       	add	r22, r22
    5e6e:	77 1f       	adc	r23, r23
    5e70:	66 0f       	add	r22, r22
    5e72:	77 1f       	adc	r23, r23
    5e74:	6c 5c       	subi	r22, 0xCC	; 204
    5e76:	7d 4d       	sbci	r23, 0xDD	; 221
    5e78:	84 2f       	mov	r24, r20
    5e7a:	40 85       	ldd	r20, Z+8	; 0x08
    5e7c:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <xio_fget_ln>
    5e80:	80 93 2a 22 	sts	0x222A, r24
    5e84:	08 95       	ret

00005e86 <tg_controller>:
 *	more to the point - a hack. If the flow of control gets much more complicated 
 *	it will make sense to replace this section with an event driven dispatcher.
 */

void tg_controller()
{
    5e86:	cf 93       	push	r28
    5e88:	df 93       	push	r29
//	uint8_t i = 1;

	_tg_prompt();		// Send a prompt - but only if controller is ready for input
    5e8a:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <_tg_prompt>

	if ((tg.status = mc_line_continuation()) == TG_OK) { // Run the line generator 
    5e8e:	0e 94 80 1a 	call	0x3500	; 0x3500 <mc_line_continuation>
    5e92:	80 93 2a 22 	sts	0x222A, r24
    5e96:	88 23       	and	r24, r24
    5e98:	31 f0       	breq	.+12     	; 0x5ea6 <tg_controller+0x20>
		tg.state = TG_STATE_READY_UNPROMPTED;
		return;
	}

	if ((tg.status = mc_arc_continuation()) == TG_OK) {	 // Run the arc generator 
    5e9a:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <mc_arc_continuation>
    5e9e:	80 93 2a 22 	sts	0x222A, r24
    5ea2:	88 23       	and	r24, r24
    5ea4:	19 f4       	brne	.+6      	; 0x5eac <tg_controller+0x26>
		tg.state = TG_STATE_READY_UNPROMPTED;
    5ea6:	10 92 29 22 	sts	0x2229, r1
    5eaa:	21 c0       	rjmp	.+66     	; 0x5eee <tg_controller+0x68>
		return;
	}

	for (tg.i=1; tg.i < XIO_DEV_MAX; tg.i++) {	// Scan all input devices 
    5eac:	81 e0       	ldi	r24, 0x01	; 1
    5eae:	80 93 2f 22 	sts	0x222F, r24
		tg.dev[tg.i].poll_func(tg.i);			//   ...(except /dev/null)
    5eb2:	ca e2       	ldi	r28, 0x2A	; 42
    5eb4:	d0 e0       	ldi	r29, 0x00	; 0
    5eb6:	17 c0       	rjmp	.+46     	; 0x5ee6 <tg_controller+0x60>
    5eb8:	82 2f       	mov	r24, r18
    5eba:	90 e0       	ldi	r25, 0x00	; 0
    5ebc:	8c 9f       	mul	r24, r28
    5ebe:	f0 01       	movw	r30, r0
    5ec0:	8d 9f       	mul	r24, r29
    5ec2:	f0 0d       	add	r31, r0
    5ec4:	9c 9f       	mul	r25, r28
    5ec6:	f0 0d       	add	r31, r0
    5ec8:	11 24       	eor	r1, r1
    5eca:	ee 0f       	add	r30, r30
    5ecc:	ff 1f       	adc	r31, r31
    5ece:	e5 5d       	subi	r30, 0xD5	; 213
    5ed0:	fd 4d       	sbci	r31, 0xDD	; 221
    5ed2:	07 80       	ldd	r0, Z+7	; 0x07
    5ed4:	f0 85       	ldd	r31, Z+8	; 0x08
    5ed6:	e0 2d       	mov	r30, r0
    5ed8:	82 2f       	mov	r24, r18
    5eda:	19 95       	eicall
	if ((tg.status = mc_arc_continuation()) == TG_OK) {	 // Run the arc generator 
		tg.state = TG_STATE_READY_UNPROMPTED;
		return;
	}

	for (tg.i=1; tg.i < XIO_DEV_MAX; tg.i++) {	// Scan all input devices 
    5edc:	80 91 2f 22 	lds	r24, 0x222F
    5ee0:	8f 5f       	subi	r24, 0xFF	; 255
    5ee2:	80 93 2f 22 	sts	0x222F, r24
    5ee6:	20 91 2f 22 	lds	r18, 0x222F
    5eea:	25 30       	cpi	r18, 0x05	; 5
    5eec:	28 f3       	brcs	.-54     	; 0x5eb8 <tg_controller+0x32>
		tg.dev[tg.i].poll_func(tg.i);			//   ...(except /dev/null)
	}
}
    5eee:	df 91       	pop	r29
    5ef0:	cf 91       	pop	r28
    5ef2:	08 95       	ret

00005ef4 <tg_init>:
 * tg_init()
 */

void tg_init() 
{
	xio_control(XIO_DEV_USB, XIO_SIG_FUNC, (int)&tg_signal); // bind sig handler
    5ef4:	81 e0       	ldi	r24, 0x01	; 1
    5ef6:	60 e1       	ldi	r22, 0x10	; 16
    5ef8:	70 e0       	ldi	r23, 0x00	; 0
    5efa:	40 e4       	ldi	r20, 0x40	; 64
    5efc:	5e e2       	ldi	r21, 0x2E	; 46
    5efe:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <xio_control>
//	xio_control(XIO_DEV_AUX, XIO_SIG_FUNC, (int)&tg_signal);
//	xio_control(XIO_DEV_RS485, XIO_SIG_FUNC, (int)&tg_signal);

	tg.source_default = XIO_DEV_USB; 
    5f02:	81 e0       	ldi	r24, 0x01	; 1
    5f04:	80 93 2d 22 	sts	0x222D, r24
	tg.state = TG_STATE_READY_UNPROMPTED;
    5f08:	10 92 29 22 	sts	0x2229, r1
	_tg_set_source(tg.source_default);		// set initial active source
    5f0c:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <_tg_set_source>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5f10:	10 92 2b 22 	sts	0x222B, r1
	tg.source_default = XIO_DEV_USB; 
	tg.state = TG_STATE_READY_UNPROMPTED;
	_tg_set_source(tg.source_default);		// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode

	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    5f14:	00 d0       	rcall	.+0      	; 0x5f16 <tg_init+0x22>
    5f16:	0f 92       	push	r0
    5f18:	89 ee       	ldi	r24, 0xE9	; 233
    5f1a:	9a e1       	ldi	r25, 0x1A	; 26
    5f1c:	ed b7       	in	r30, 0x3d	; 61
    5f1e:	fe b7       	in	r31, 0x3e	; 62
    5f20:	81 83       	std	Z+1, r24	; 0x01
    5f22:	92 83       	std	Z+2, r25	; 0x02
    5f24:	8f ed       	ldi	r24, 0xDF	; 223
    5f26:	9a e1       	ldi	r25, 0x1A	; 26
    5f28:	83 83       	std	Z+3, r24	; 0x03
    5f2a:	94 83       	std	Z+4, r25	; 0x04
    5f2c:	0e 94 e5 42 	call	0x85ca	; 0x85ca <printf_P>
    5f30:	0f 90       	pop	r0
    5f32:	0f 90       	pop	r0
    5f34:	0f 90       	pop	r0
    5f36:	0f 90       	pop	r0
}
    5f38:	08 95       	ret

00005f3a <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    5f3a:	08 95       	ret

00005f3c <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    5f3c:	80 e0       	ldi	r24, 0x00	; 0
    5f3e:	90 e0       	ldi	r25, 0x00	; 0
    5f40:	08 95       	ret

00005f42 <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    5f42:	10 92 d4 23 	sts	0x23D4, r1
	mv.move_buffer_tail = 0;
    5f46:	10 92 d5 23 	sts	0x23D5, r1
}
    5f4a:	08 95       	ret

00005f4c <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    5f4c:	90 91 d4 23 	lds	r25, 0x23D4
    5f50:	80 91 d5 23 	lds	r24, 0x23D5
    5f54:	98 17       	cp	r25, r24
    5f56:	19 f4       	brne	.+6      	; 0x5f5e <mv_dequeue_move_buffer+0x12>
    5f58:	20 e0       	ldi	r18, 0x00	; 0
    5f5a:	30 e0       	ldi	r19, 0x00	; 0
    5f5c:	17 c0       	rjmp	.+46     	; 0x5f8c <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    5f5e:	90 91 d5 23 	lds	r25, 0x23D5
    5f62:	8b e1       	ldi	r24, 0x1B	; 27
    5f64:	98 9f       	mul	r25, r24
    5f66:	90 01       	movw	r18, r0
    5f68:	11 24       	eor	r1, r1
    5f6a:	28 52       	subi	r18, 0x28	; 40
    5f6c:	3c 4d       	sbci	r19, 0xDC	; 220
    5f6e:	20 93 d6 23 	sts	0x23D6, r18
    5f72:	30 93 d7 23 	sts	0x23D7, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    5f76:	80 91 d5 23 	lds	r24, 0x23D5
    5f7a:	8f 5f       	subi	r24, 0xFF	; 255
    5f7c:	80 93 d5 23 	sts	0x23D5, r24
    5f80:	80 91 d5 23 	lds	r24, 0x23D5
    5f84:	84 30       	cpi	r24, 0x04	; 4
    5f86:	10 f0       	brcs	.+4      	; 0x5f8c <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    5f88:	10 92 d5 23 	sts	0x23D5, r1
	}
	return (mv.p); 
}
    5f8c:	c9 01       	movw	r24, r18
    5f8e:	08 95       	ret

00005f90 <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    5f90:	90 91 d4 23 	lds	r25, 0x23D4
    5f94:	9f 5f       	subi	r25, 0xFF	; 255
    5f96:	94 30       	cpi	r25, 0x04	; 4
    5f98:	08 f0       	brcs	.+2      	; 0x5f9c <mv_test_move_buffer_full+0xc>
    5f9a:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    5f9c:	80 91 d5 23 	lds	r24, 0x23D5
    5fa0:	20 e0       	ldi	r18, 0x00	; 0
    5fa2:	89 17       	cp	r24, r25
    5fa4:	09 f4       	brne	.+2      	; 0x5fa8 <mv_test_move_buffer_full+0x18>
    5fa6:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    5fa8:	82 2f       	mov	r24, r18
    5faa:	08 95       	ret

00005fac <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    5fac:	0b c0       	rjmp	.+22     	; 0x5fc4 <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    5fae:	80 91 48 00 	lds	r24, 0x0048
    5fb2:	81 60       	ori	r24, 0x01	; 1
    5fb4:	80 93 48 00 	sts	0x0048, r24
    5fb8:	88 95       	sleep
    5fba:	80 91 48 00 	lds	r24, 0x0048
    5fbe:	8e 7f       	andi	r24, 0xFE	; 254
    5fc0:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    5fc4:	90 91 d5 23 	lds	r25, 0x23D5
    5fc8:	80 91 d4 23 	lds	r24, 0x23D4
    5fcc:	98 17       	cp	r25, r24
    5fce:	79 f7       	brne	.-34     	; 0x5fae <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    5fd0:	08 95       	ret

00005fd2 <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    5fd2:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    5fd4:	80 91 d4 23 	lds	r24, 0x23D4
    5fd8:	80 93 d5 23 	sts	0x23D5, r24
	mv.p = NULL;
    5fdc:	10 92 d6 23 	sts	0x23D6, r1
    5fe0:	10 92 d7 23 	sts	0x23D7, r1
	sei();
    5fe4:	78 94       	sei
}
    5fe6:	08 95       	ret

00005fe8 <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    5fe8:	2f 92       	push	r2
    5fea:	4f 92       	push	r4
    5fec:	5f 92       	push	r5
    5fee:	6f 92       	push	r6
    5ff0:	7f 92       	push	r7
    5ff2:	8f 92       	push	r8
    5ff4:	9f 92       	push	r9
    5ff6:	af 92       	push	r10
    5ff8:	bf 92       	push	r11
    5ffa:	cf 92       	push	r12
    5ffc:	df 92       	push	r13
    5ffe:	ef 92       	push	r14
    6000:	ff 92       	push	r15
    6002:	0f 93       	push	r16
    6004:	1f 93       	push	r17
    6006:	df 93       	push	r29
    6008:	cf 93       	push	r28
    600a:	cd b7       	in	r28, 0x3d	; 61
    600c:	de b7       	in	r29, 0x3e	; 62
    600e:	2e 97       	sbiw	r28, 0x0e	; 14
    6010:	cd bf       	out	0x3d, r28	; 61
    6012:	de bf       	out	0x3e, r29	; 62
    6014:	3b 01       	movw	r6, r22
    6016:	4c 01       	movw	r8, r24
					// Using 64 bits is expensive! The division goes from ~640 
					// cycles at 32 bits to ~3800 cycles using 64 bits
	uint32_t ticks_per_step; // temp variable

	// Bail on a zero length line (perhaps test for abs val < min line length)
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    6018:	61 15       	cp	r22, r1
    601a:	71 05       	cpc	r23, r1
    601c:	81 05       	cpc	r24, r1
    601e:	91 05       	cpc	r25, r1
    6020:	61 f4       	brne	.+24     	; 0x603a <__stack+0x3b>
    6022:	21 15       	cp	r18, r1
    6024:	31 05       	cpc	r19, r1
    6026:	41 05       	cpc	r20, r1
    6028:	51 05       	cpc	r21, r1
    602a:	39 f4       	brne	.+14     	; 0x603a <__stack+0x3b>
    602c:	e1 14       	cp	r14, r1
    602e:	f1 04       	cpc	r15, r1
    6030:	01 05       	cpc	r16, r1
    6032:	11 05       	cpc	r17, r1
    6034:	11 f4       	brne	.+4      	; 0x603a <__stack+0x3b>
    6036:	89 e0       	ldi	r24, 0x09	; 9
    6038:	e2 c0       	rjmp	.+452    	; 0x61fe <__stack+0x1ff>
		return (TG_ZERO_LENGTH_LINE);
	}

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    603a:	20 90 d4 23 	lds	r2, 0x23D4
    603e:	23 94       	inc	r2
    6040:	63 e0       	ldi	r22, 0x03	; 3
    6042:	62 15       	cp	r22, r2
    6044:	08 f4       	brcc	.+2      	; 0x6048 <__stack+0x49>
    6046:	22 24       	eor	r2, r2
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    6048:	80 91 d5 23 	lds	r24, 0x23D5
    604c:	82 15       	cp	r24, r2
    604e:	11 f4       	brne	.+4      	; 0x6054 <__stack+0x55>
    6050:	86 e0       	ldi	r24, 0x06	; 6
    6052:	d5 c0       	rjmp	.+426    	; 0x61fe <__stack+0x1ff>
		return (TG_BUFFER_FULL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    6054:	e0 91 d4 23 	lds	r30, 0x23D4
    6058:	8b e1       	ldi	r24, 0x1B	; 27
    605a:	e8 9f       	mul	r30, r24
    605c:	f0 01       	movw	r30, r0
    605e:	11 24       	eor	r1, r1
    6060:	e8 52       	subi	r30, 0x28	; 40
    6062:	fc 4d       	sbci	r31, 0xDC	; 220
    6064:	e0 93 d6 23 	sts	0x23D6, r30
    6068:	f0 93 d7 23 	sts	0x23D7, r31
	mv.p->a[X_AXIS].steps = steps_x;
    606c:	60 82       	st	Z, r6
    606e:	71 82       	std	Z+1, r7	; 0x01
    6070:	82 82       	std	Z+2, r8	; 0x02
    6072:	93 82       	std	Z+3, r9	; 0x03
	mv.p->a[Y_AXIS].steps = steps_y;
    6074:	21 87       	std	Z+9, r18	; 0x09
    6076:	32 87       	std	Z+10, r19	; 0x0a
    6078:	43 87       	std	Z+11, r20	; 0x0b
    607a:	54 87       	std	Z+12, r21	; 0x0c
	mv.p->a[Z_AXIS].steps = steps_z;
    607c:	e2 8a       	std	Z+18, r14	; 0x12
    607e:	f3 8a       	std	Z+19, r15	; 0x13
    6080:	04 8b       	std	Z+20, r16	; 0x14
    6082:	15 8b       	std	Z+21, r17	; 0x15

	ticks = microseconds * TICKS_PER_MICROSECOND;
    6084:	65 e0       	ldi	r22, 0x05	; 5
    6086:	aa 0c       	add	r10, r10
    6088:	bb 1c       	adc	r11, r11
    608a:	cc 1c       	adc	r12, r12
    608c:	dd 1c       	adc	r13, r13
    608e:	6a 95       	dec	r22
    6090:	d1 f7       	brne	.-12     	; 0x6086 <__stack+0x87>
    6092:	a6 01       	movw	r20, r12
    6094:	95 01       	movw	r18, r10
    6096:	60 e0       	ldi	r22, 0x00	; 0
    6098:	70 e0       	ldi	r23, 0x00	; 0
    609a:	80 e0       	ldi	r24, 0x00	; 0
    609c:	90 e0       	ldi	r25, 0x00	; 0
    609e:	ab 82       	std	Y+3, r10	; 0x03
    60a0:	3c 83       	std	Y+4, r19	; 0x04
    60a2:	4d 83       	std	Y+5, r20	; 0x05
    60a4:	5e 83       	std	Y+6, r21	; 0x06
    60a6:	6f 83       	std	Y+7, r22	; 0x07
    60a8:	78 87       	std	Y+8, r23	; 0x08
    60aa:	89 87       	std	Y+9, r24	; 0x09
    60ac:	9a 87       	std	Y+10, r25	; 0x0a
    60ae:	1d 86       	std	Y+13, r1	; 0x0d
    60b0:	1e 86       	std	Y+14, r1	; 0x0e

	// load axis values
	for (i = X_AXIS; i <= Z_AXIS; i++) {

		if (mv.p->a[i].steps) { 				// skip axes with zero steps
    60b2:	20 91 d6 23 	lds	r18, 0x23D6
    60b6:	30 91 d7 23 	lds	r19, 0x23D7
    60ba:	ed 85       	ldd	r30, Y+13	; 0x0d
    60bc:	fe 85       	ldd	r31, Y+14	; 0x0e
    60be:	53 e0       	ldi	r21, 0x03	; 3
    60c0:	ee 0f       	add	r30, r30
    60c2:	ff 1f       	adc	r31, r31
    60c4:	5a 95       	dec	r21
    60c6:	e1 f7       	brne	.-8      	; 0x60c0 <__stack+0xc1>
    60c8:	4d 85       	ldd	r20, Y+13	; 0x0d
    60ca:	5e 85       	ldd	r21, Y+14	; 0x0e
    60cc:	e4 0f       	add	r30, r20
    60ce:	f5 1f       	adc	r31, r21
    60d0:	e2 0f       	add	r30, r18
    60d2:	f3 1f       	adc	r31, r19
    60d4:	80 81       	ld	r24, Z
    60d6:	91 81       	ldd	r25, Z+1	; 0x01
    60d8:	a2 81       	ldd	r26, Z+2	; 0x02
    60da:	b3 81       	ldd	r27, Z+3	; 0x03
    60dc:	00 97       	sbiw	r24, 0x00	; 0
    60de:	a1 05       	cpc	r26, r1
    60e0:	b1 05       	cpc	r27, r1
    60e2:	09 f4       	brne	.+2      	; 0x60e6 <__stack+0xe7>
    60e4:	7f c0       	rjmp	.+254    	; 0x61e4 <__stack+0x1e5>

			// set direction: (polarity is corrected during execute move)
			(mv.p->a[i].steps < 0) ? 
    60e6:	b7 ff       	sbrs	r27, 7
    60e8:	03 c0       	rjmp	.+6      	; 0x60f0 <__stack+0xf1>
    60ea:	51 e0       	ldi	r21, 0x01	; 1
    60ec:	50 87       	std	Z+8, r21	; 0x08
    60ee:	01 c0       	rjmp	.+2      	; 0x60f2 <__stack+0xf3>
    60f0:	10 86       	std	Z+8, r1	; 0x08
			(mv.p->a[i].direction = 1): 		// CCW = 1 
			(mv.p->a[i].direction = 0);			// CW = 0

			// set steps to absolute value
			mv.p->a[i].steps = labs(mv.p->a[i].steps);
    60f2:	ed 85       	ldd	r30, Y+13	; 0x0d
    60f4:	fe 85       	ldd	r31, Y+14	; 0x0e
    60f6:	43 e0       	ldi	r20, 0x03	; 3
    60f8:	ee 0f       	add	r30, r30
    60fa:	ff 1f       	adc	r31, r31
    60fc:	4a 95       	dec	r20
    60fe:	e1 f7       	brne	.-8      	; 0x60f8 <__stack+0xf9>
    6100:	6d 85       	ldd	r22, Y+13	; 0x0d
    6102:	7e 85       	ldd	r23, Y+14	; 0x0e
    6104:	e6 0f       	add	r30, r22
    6106:	f7 1f       	adc	r31, r23
    6108:	e2 0f       	add	r30, r18
    610a:	f3 1f       	adc	r31, r19
    610c:	80 81       	ld	r24, Z
    610e:	91 81       	ldd	r25, Z+1	; 0x01
    6110:	a2 81       	ldd	r26, Z+2	; 0x02
    6112:	b3 81       	ldd	r27, Z+3	; 0x03
    6114:	b7 ff       	sbrs	r27, 7
    6116:	07 c0       	rjmp	.+14     	; 0x6126 <__stack+0x127>
    6118:	b0 95       	com	r27
    611a:	a0 95       	com	r26
    611c:	90 95       	com	r25
    611e:	81 95       	neg	r24
    6120:	9f 4f       	sbci	r25, 0xFF	; 255
    6122:	af 4f       	sbci	r26, 0xFF	; 255
    6124:	bf 4f       	sbci	r27, 0xFF	; 255
    6126:	80 83       	st	Z, r24
    6128:	91 83       	std	Z+1, r25	; 0x01
    612a:	a2 83       	std	Z+2, r26	; 0x02
    612c:	b3 83       	std	Z+3, r27	; 0x03

			// Normalize ticks_per_step by right shifting until the MSword = 0
			// Accumulate LSBs shifted out of ticks_per_step into postscale
			mv.p->a[i].postscale = 1;
    612e:	80 91 d6 23 	lds	r24, 0x23D6
    6132:	90 91 d7 23 	lds	r25, 0x23D7
    6136:	89 83       	std	Y+1, r24	; 0x01
    6138:	9a 83       	std	Y+2, r25	; 0x02
    613a:	4d 84       	ldd	r4, Y+13	; 0x0d
    613c:	5e 84       	ldd	r5, Y+14	; 0x0e
    613e:	23 e0       	ldi	r18, 0x03	; 3
    6140:	44 0c       	add	r4, r4
    6142:	55 1c       	adc	r5, r5
    6144:	2a 95       	dec	r18
    6146:	e1 f7       	brne	.-8      	; 0x6140 <__stack+0x141>
    6148:	ed 85       	ldd	r30, Y+13	; 0x0d
    614a:	fe 85       	ldd	r31, Y+14	; 0x0e
    614c:	e4 0d       	add	r30, r4
    614e:	f5 1d       	adc	r31, r5
    6150:	e8 0f       	add	r30, r24
    6152:	f9 1f       	adc	r31, r25
    6154:	df 01       	movw	r26, r30
    6156:	16 96       	adiw	r26, 0x06	; 6
    6158:	ab 87       	std	Y+11, r26	; 0x0b
    615a:	bc 87       	std	Y+12, r27	; 0x0c
    615c:	21 e0       	ldi	r18, 0x01	; 1
    615e:	30 e0       	ldi	r19, 0x00	; 0
    6160:	26 83       	std	Z+6, r18	; 0x06
    6162:	37 83       	std	Z+7, r19	; 0x07
			ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
    6164:	e0 80       	ld	r14, Z
    6166:	f1 80       	ldd	r15, Z+1	; 0x01
    6168:	02 81       	ldd	r16, Z+2	; 0x02
    616a:	13 81       	ldd	r17, Z+3	; 0x03
    616c:	37 01       	movw	r6, r14
    616e:	48 01       	movw	r8, r16
    6170:	99 0c       	add	r9, r9
    6172:	66 08       	sbc	r6, r6
    6174:	76 2c       	mov	r7, r6
    6176:	43 01       	movw	r8, r6
    6178:	2b 81       	ldd	r18, Y+3	; 0x03
    617a:	3c 81       	ldd	r19, Y+4	; 0x04
    617c:	4d 81       	ldd	r20, Y+5	; 0x05
    617e:	5e 81       	ldd	r21, Y+6	; 0x06
    6180:	6f 81       	ldd	r22, Y+7	; 0x07
    6182:	78 85       	ldd	r23, Y+8	; 0x08
    6184:	89 85       	ldd	r24, Y+9	; 0x09
    6186:	9a 85       	ldd	r25, Y+10	; 0x0a
    6188:	57 01       	movw	r10, r14
    618a:	68 01       	movw	r12, r16
    618c:	e6 2c       	mov	r14, r6
    618e:	f6 2c       	mov	r15, r6
    6190:	06 2d       	mov	r16, r6
    6192:	16 2d       	mov	r17, r6
    6194:	0e 94 15 31 	call	0x622a	; 0x622a <__udivdi3>
    6198:	c9 01       	movw	r24, r18
    619a:	da 01       	movw	r26, r20
    619c:	9c 01       	movw	r18, r24
    619e:	ad 01       	movw	r20, r26
    61a0:	b2 01       	movw	r22, r4
			while (ticks_per_step & 0xFFFF0000) {
				ticks_per_step >>= 1;
				mv.p->a[i].postscale <<= 1;
    61a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    61a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    61a6:	0a c0       	rjmp	.+20     	; 0x61bc <__stack+0x1bd>
			// Normalize ticks_per_step by right shifting until the MSword = 0
			// Accumulate LSBs shifted out of ticks_per_step into postscale
			mv.p->a[i].postscale = 1;
			ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
			while (ticks_per_step & 0xFFFF0000) {
				ticks_per_step >>= 1;
    61a8:	56 95       	lsr	r21
    61aa:	47 95       	ror	r20
    61ac:	37 95       	ror	r19
    61ae:	27 95       	ror	r18
				mv.p->a[i].postscale <<= 1;
    61b0:	80 81       	ld	r24, Z
    61b2:	91 81       	ldd	r25, Z+1	; 0x01
    61b4:	88 0f       	add	r24, r24
    61b6:	99 1f       	adc	r25, r25
    61b8:	80 83       	st	Z, r24
    61ba:	91 83       	std	Z+1, r25	; 0x01

			// Normalize ticks_per_step by right shifting until the MSword = 0
			// Accumulate LSBs shifted out of ticks_per_step into postscale
			mv.p->a[i].postscale = 1;
			ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
			while (ticks_per_step & 0xFFFF0000) {
    61bc:	da 01       	movw	r26, r20
    61be:	c9 01       	movw	r24, r18
    61c0:	80 70       	andi	r24, 0x00	; 0
    61c2:	90 70       	andi	r25, 0x00	; 0
    61c4:	00 97       	sbiw	r24, 0x00	; 0
    61c6:	a1 05       	cpc	r26, r1
    61c8:	b1 05       	cpc	r27, r1
    61ca:	71 f7       	brne	.-36     	; 0x61a8 <__stack+0x1a9>
				ticks_per_step >>= 1;
				mv.p->a[i].postscale <<= 1;
			}
			mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    61cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    61ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    61d0:	68 0f       	add	r22, r24
    61d2:	79 1f       	adc	r23, r25
    61d4:	a9 81       	ldd	r26, Y+1	; 0x01
    61d6:	ba 81       	ldd	r27, Y+2	; 0x02
    61d8:	a6 0f       	add	r26, r22
    61da:	b7 1f       	adc	r27, r23
    61dc:	14 96       	adiw	r26, 0x04	; 4
    61de:	2d 93       	st	X+, r18
    61e0:	3c 93       	st	X, r19
    61e2:	15 97       	sbiw	r26, 0x05	; 5
    61e4:	ed 85       	ldd	r30, Y+13	; 0x0d
    61e6:	fe 85       	ldd	r31, Y+14	; 0x0e
    61e8:	31 96       	adiw	r30, 0x01	; 1
    61ea:	ed 87       	std	Y+13, r30	; 0x0d
    61ec:	fe 87       	std	Y+14, r31	; 0x0e
	mv.p->a[Z_AXIS].steps = steps_z;

	ticks = microseconds * TICKS_PER_MICROSECOND;

	// load axis values
	for (i = X_AXIS; i <= Z_AXIS; i++) {
    61ee:	33 97       	sbiw	r30, 0x03	; 3
    61f0:	09 f0       	breq	.+2      	; 0x61f4 <__stack+0x1f5>
    61f2:	5f cf       	rjmp	.-322    	; 0x60b2 <__stack+0xb3>
				mv.p->a[i].postscale <<= 1;
			}
			mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		}
	}
	mv.move_buffer_head = next_buffer_head;
    61f4:	20 92 d4 23 	sts	0x23D4, r2
	st_execute_move();
    61f8:	0e 94 74 23 	call	0x46e8	; 0x46e8 <st_execute_move>
    61fc:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    61fe:	2e 96       	adiw	r28, 0x0e	; 14
    6200:	cd bf       	out	0x3d, r28	; 61
    6202:	de bf       	out	0x3e, r29	; 62
    6204:	cf 91       	pop	r28
    6206:	df 91       	pop	r29
    6208:	1f 91       	pop	r17
    620a:	0f 91       	pop	r16
    620c:	ff 90       	pop	r15
    620e:	ef 90       	pop	r14
    6210:	df 90       	pop	r13
    6212:	cf 90       	pop	r12
    6214:	bf 90       	pop	r11
    6216:	af 90       	pop	r10
    6218:	9f 90       	pop	r9
    621a:	8f 90       	pop	r8
    621c:	7f 90       	pop	r7
    621e:	6f 90       	pop	r6
    6220:	5f 90       	pop	r5
    6222:	4f 90       	pop	r4
    6224:	2f 90       	pop	r2
    6226:	08 95       	ret

00006228 <ls_init>:
 */

void ls_init(void) 
{
	// no operation - see st_init for bit setups
}
    6228:	08 95       	ret

0000622a <__udivdi3>:
    622a:	ae e5       	ldi	r26, 0x5E	; 94
    622c:	b0 e0       	ldi	r27, 0x00	; 0
    622e:	eb e1       	ldi	r30, 0x1B	; 27
    6230:	f1 e3       	ldi	r31, 0x31	; 49
    6232:	0c 94 a8 3f 	jmp	0x7f50	; 0x7f50 <__prologue_saves__>
    6236:	a8 e0       	ldi	r26, 0x08	; 8
    6238:	4e 01       	movw	r8, r28
    623a:	08 94       	sec
    623c:	81 1c       	adc	r8, r1
    623e:	91 1c       	adc	r9, r1
    6240:	f4 01       	movw	r30, r8
    6242:	6a 2e       	mov	r6, r26
    6244:	11 92       	st	Z+, r1
    6246:	6a 94       	dec	r6
    6248:	e9 f7       	brne	.-6      	; 0x6244 <__udivdi3+0x1a>
    624a:	29 83       	std	Y+1, r18	; 0x01
    624c:	3a 83       	std	Y+2, r19	; 0x02
    624e:	4b 83       	std	Y+3, r20	; 0x03
    6250:	5c 83       	std	Y+4, r21	; 0x04
    6252:	6d 83       	std	Y+5, r22	; 0x05
    6254:	7e 83       	std	Y+6, r23	; 0x06
    6256:	8f 83       	std	Y+7, r24	; 0x07
    6258:	98 87       	std	Y+8, r25	; 0x08
    625a:	ce 01       	movw	r24, r28
    625c:	09 96       	adiw	r24, 0x09	; 9
    625e:	fc 01       	movw	r30, r24
    6260:	11 92       	st	Z+, r1
    6262:	aa 95       	dec	r26
    6264:	e9 f7       	brne	.-6      	; 0x6260 <__udivdi3+0x36>
    6266:	a9 86       	std	Y+9, r10	; 0x09
    6268:	ba 86       	std	Y+10, r11	; 0x0a
    626a:	cb 86       	std	Y+11, r12	; 0x0b
    626c:	dc 86       	std	Y+12, r13	; 0x0c
    626e:	ed 86       	std	Y+13, r14	; 0x0d
    6270:	fe 86       	std	Y+14, r15	; 0x0e
    6272:	0f 87       	std	Y+15, r16	; 0x0f
    6274:	18 8b       	std	Y+16, r17	; 0x10
    6276:	29 84       	ldd	r2, Y+9	; 0x09
    6278:	3a 84       	ldd	r3, Y+10	; 0x0a
    627a:	4b 84       	ldd	r4, Y+11	; 0x0b
    627c:	5c 84       	ldd	r5, Y+12	; 0x0c
    627e:	ed 84       	ldd	r14, Y+13	; 0x0d
    6280:	fe 84       	ldd	r15, Y+14	; 0x0e
    6282:	0f 85       	ldd	r16, Y+15	; 0x0f
    6284:	18 89       	ldd	r17, Y+16	; 0x10
    6286:	69 80       	ldd	r6, Y+1	; 0x01
    6288:	7a 80       	ldd	r7, Y+2	; 0x02
    628a:	8b 80       	ldd	r8, Y+3	; 0x03
    628c:	9c 80       	ldd	r9, Y+4	; 0x04
    628e:	6d a6       	std	Y+45, r6	; 0x2d
    6290:	7e a6       	std	Y+46, r7	; 0x2e
    6292:	8f a6       	std	Y+47, r8	; 0x2f
    6294:	98 aa       	std	Y+48, r9	; 0x30
    6296:	6d 80       	ldd	r6, Y+5	; 0x05
    6298:	7e 80       	ldd	r7, Y+6	; 0x06
    629a:	8f 80       	ldd	r8, Y+7	; 0x07
    629c:	98 84       	ldd	r9, Y+8	; 0x08
    629e:	e1 14       	cp	r14, r1
    62a0:	f1 04       	cpc	r15, r1
    62a2:	01 05       	cpc	r16, r1
    62a4:	11 05       	cpc	r17, r1
    62a6:	09 f0       	breq	.+2      	; 0x62aa <__udivdi3+0x80>
    62a8:	b3 c3       	rjmp	.+1894   	; 0x6a10 <__udivdi3+0x7e6>
    62aa:	62 14       	cp	r6, r2
    62ac:	73 04       	cpc	r7, r3
    62ae:	84 04       	cpc	r8, r4
    62b0:	95 04       	cpc	r9, r5
    62b2:	08 f0       	brcs	.+2      	; 0x62b6 <__udivdi3+0x8c>
    62b4:	3d c1       	rjmp	.+634    	; 0x6530 <__udivdi3+0x306>
    62b6:	00 e0       	ldi	r16, 0x00	; 0
    62b8:	20 16       	cp	r2, r16
    62ba:	00 e0       	ldi	r16, 0x00	; 0
    62bc:	30 06       	cpc	r3, r16
    62be:	01 e0       	ldi	r16, 0x01	; 1
    62c0:	40 06       	cpc	r4, r16
    62c2:	00 e0       	ldi	r16, 0x00	; 0
    62c4:	50 06       	cpc	r5, r16
    62c6:	88 f4       	brcc	.+34     	; 0x62ea <__udivdi3+0xc0>
    62c8:	1f ef       	ldi	r17, 0xFF	; 255
    62ca:	21 16       	cp	r2, r17
    62cc:	31 04       	cpc	r3, r1
    62ce:	41 04       	cpc	r4, r1
    62d0:	51 04       	cpc	r5, r1
    62d2:	39 f0       	breq	.+14     	; 0x62e2 <__udivdi3+0xb8>
    62d4:	30 f0       	brcs	.+12     	; 0x62e2 <__udivdi3+0xb8>
    62d6:	48 e0       	ldi	r20, 0x08	; 8
    62d8:	e4 2e       	mov	r14, r20
    62da:	f1 2c       	mov	r15, r1
    62dc:	01 2d       	mov	r16, r1
    62de:	11 2d       	mov	r17, r1
    62e0:	18 c0       	rjmp	.+48     	; 0x6312 <__udivdi3+0xe8>
    62e2:	ee 24       	eor	r14, r14
    62e4:	ff 24       	eor	r15, r15
    62e6:	87 01       	movw	r16, r14
    62e8:	14 c0       	rjmp	.+40     	; 0x6312 <__udivdi3+0xe8>
    62ea:	20 e0       	ldi	r18, 0x00	; 0
    62ec:	22 16       	cp	r2, r18
    62ee:	20 e0       	ldi	r18, 0x00	; 0
    62f0:	32 06       	cpc	r3, r18
    62f2:	20 e0       	ldi	r18, 0x00	; 0
    62f4:	42 06       	cpc	r4, r18
    62f6:	21 e0       	ldi	r18, 0x01	; 1
    62f8:	52 06       	cpc	r5, r18
    62fa:	30 f0       	brcs	.+12     	; 0x6308 <__udivdi3+0xde>
    62fc:	38 e1       	ldi	r19, 0x18	; 24
    62fe:	e3 2e       	mov	r14, r19
    6300:	f1 2c       	mov	r15, r1
    6302:	01 2d       	mov	r16, r1
    6304:	11 2d       	mov	r17, r1
    6306:	05 c0       	rjmp	.+10     	; 0x6312 <__udivdi3+0xe8>
    6308:	20 e1       	ldi	r18, 0x10	; 16
    630a:	e2 2e       	mov	r14, r18
    630c:	f1 2c       	mov	r15, r1
    630e:	01 2d       	mov	r16, r1
    6310:	11 2d       	mov	r17, r1
    6312:	d2 01       	movw	r26, r4
    6314:	c1 01       	movw	r24, r2
    6316:	0e 2c       	mov	r0, r14
    6318:	04 c0       	rjmp	.+8      	; 0x6322 <__udivdi3+0xf8>
    631a:	b6 95       	lsr	r27
    631c:	a7 95       	ror	r26
    631e:	97 95       	ror	r25
    6320:	87 95       	ror	r24
    6322:	0a 94       	dec	r0
    6324:	d2 f7       	brpl	.-12     	; 0x631a <__udivdi3+0xf0>
    6326:	84 5e       	subi	r24, 0xE4	; 228
    6328:	9f 4d       	sbci	r25, 0xDF	; 223
    632a:	dc 01       	movw	r26, r24
    632c:	2c 91       	ld	r18, X
    632e:	80 e2       	ldi	r24, 0x20	; 32
    6330:	90 e0       	ldi	r25, 0x00	; 0
    6332:	a0 e0       	ldi	r26, 0x00	; 0
    6334:	b0 e0       	ldi	r27, 0x00	; 0
    6336:	8e 19       	sub	r24, r14
    6338:	9f 09       	sbc	r25, r15
    633a:	a0 0b       	sbc	r26, r16
    633c:	b1 0b       	sbc	r27, r17
    633e:	7c 01       	movw	r14, r24
    6340:	8d 01       	movw	r16, r26
    6342:	e2 1a       	sub	r14, r18
    6344:	f1 08       	sbc	r15, r1
    6346:	01 09       	sbc	r16, r1
    6348:	11 09       	sbc	r17, r1
    634a:	e1 14       	cp	r14, r1
    634c:	f1 04       	cpc	r15, r1
    634e:	01 05       	cpc	r16, r1
    6350:	11 05       	cpc	r17, r1
    6352:	a1 f1       	breq	.+104    	; 0x63bc <__udivdi3+0x192>
    6354:	0e 2c       	mov	r0, r14
    6356:	04 c0       	rjmp	.+8      	; 0x6360 <__udivdi3+0x136>
    6358:	22 0c       	add	r2, r2
    635a:	33 1c       	adc	r3, r3
    635c:	44 1c       	adc	r4, r4
    635e:	55 1c       	adc	r5, r5
    6360:	0a 94       	dec	r0
    6362:	d2 f7       	brpl	.-12     	; 0x6358 <__udivdi3+0x12e>
    6364:	a4 01       	movw	r20, r8
    6366:	93 01       	movw	r18, r6
    6368:	0e 2c       	mov	r0, r14
    636a:	04 c0       	rjmp	.+8      	; 0x6374 <__udivdi3+0x14a>
    636c:	22 0f       	add	r18, r18
    636e:	33 1f       	adc	r19, r19
    6370:	44 1f       	adc	r20, r20
    6372:	55 1f       	adc	r21, r21
    6374:	0a 94       	dec	r0
    6376:	d2 f7       	brpl	.-12     	; 0x636c <__udivdi3+0x142>
    6378:	80 e2       	ldi	r24, 0x20	; 32
    637a:	90 e0       	ldi	r25, 0x00	; 0
    637c:	8e 19       	sub	r24, r14
    637e:	9f 09       	sbc	r25, r15
    6380:	6d a4       	ldd	r6, Y+45	; 0x2d
    6382:	7e a4       	ldd	r7, Y+46	; 0x2e
    6384:	8f a4       	ldd	r8, Y+47	; 0x2f
    6386:	98 a8       	ldd	r9, Y+48	; 0x30
    6388:	04 c0       	rjmp	.+8      	; 0x6392 <__udivdi3+0x168>
    638a:	96 94       	lsr	r9
    638c:	87 94       	ror	r8
    638e:	77 94       	ror	r7
    6390:	67 94       	ror	r6
    6392:	8a 95       	dec	r24
    6394:	d2 f7       	brpl	.-12     	; 0x638a <__udivdi3+0x160>
    6396:	62 2a       	or	r6, r18
    6398:	73 2a       	or	r7, r19
    639a:	84 2a       	or	r8, r20
    639c:	95 2a       	or	r9, r21
    639e:	ad a4       	ldd	r10, Y+45	; 0x2d
    63a0:	be a4       	ldd	r11, Y+46	; 0x2e
    63a2:	cf a4       	ldd	r12, Y+47	; 0x2f
    63a4:	d8 a8       	ldd	r13, Y+48	; 0x30
    63a6:	04 c0       	rjmp	.+8      	; 0x63b0 <__udivdi3+0x186>
    63a8:	aa 0c       	add	r10, r10
    63aa:	bb 1c       	adc	r11, r11
    63ac:	cc 1c       	adc	r12, r12
    63ae:	dd 1c       	adc	r13, r13
    63b0:	ea 94       	dec	r14
    63b2:	d2 f7       	brpl	.-12     	; 0x63a8 <__udivdi3+0x17e>
    63b4:	ad a6       	std	Y+45, r10	; 0x2d
    63b6:	be a6       	std	Y+46, r11	; 0x2e
    63b8:	cf a6       	std	Y+47, r12	; 0x2f
    63ba:	d8 aa       	std	Y+48, r13	; 0x30
    63bc:	62 01       	movw	r12, r4
    63be:	ee 24       	eor	r14, r14
    63c0:	ff 24       	eor	r15, r15
    63c2:	cd aa       	std	Y+53, r12	; 0x35
    63c4:	de aa       	std	Y+54, r13	; 0x36
    63c6:	ef aa       	std	Y+55, r14	; 0x37
    63c8:	f8 ae       	std	Y+56, r15	; 0x38
    63ca:	92 01       	movw	r18, r4
    63cc:	81 01       	movw	r16, r2
    63ce:	20 70       	andi	r18, 0x00	; 0
    63d0:	30 70       	andi	r19, 0x00	; 0
    63d2:	09 af       	std	Y+57, r16	; 0x39
    63d4:	1a af       	std	Y+58, r17	; 0x3a
    63d6:	2b af       	std	Y+59, r18	; 0x3b
    63d8:	3c af       	std	Y+60, r19	; 0x3c
    63da:	c4 01       	movw	r24, r8
    63dc:	b3 01       	movw	r22, r6
    63de:	a7 01       	movw	r20, r14
    63e0:	96 01       	movw	r18, r12
    63e2:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <__udivmodsi4>
    63e6:	7b 01       	movw	r14, r22
    63e8:	8c 01       	movw	r16, r24
    63ea:	c4 01       	movw	r24, r8
    63ec:	b3 01       	movw	r22, r6
    63ee:	2d a9       	ldd	r18, Y+53	; 0x35
    63f0:	3e a9       	ldd	r19, Y+54	; 0x36
    63f2:	4f a9       	ldd	r20, Y+55	; 0x37
    63f4:	58 ad       	ldd	r21, Y+56	; 0x38
    63f6:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <__udivmodsi4>
    63fa:	c9 01       	movw	r24, r18
    63fc:	da 01       	movw	r26, r20
    63fe:	3c 01       	movw	r6, r24
    6400:	4d 01       	movw	r8, r26
    6402:	c4 01       	movw	r24, r8
    6404:	b3 01       	movw	r22, r6
    6406:	29 ad       	ldd	r18, Y+57	; 0x39
    6408:	3a ad       	ldd	r19, Y+58	; 0x3a
    640a:	4b ad       	ldd	r20, Y+59	; 0x3b
    640c:	5c ad       	ldd	r21, Y+60	; 0x3c
    640e:	0e 94 67 3f 	call	0x7ece	; 0x7ece <__mulsi3>
    6412:	9b 01       	movw	r18, r22
    6414:	ac 01       	movw	r20, r24
    6416:	87 01       	movw	r16, r14
    6418:	ff 24       	eor	r15, r15
    641a:	ee 24       	eor	r14, r14
    641c:	ad a4       	ldd	r10, Y+45	; 0x2d
    641e:	be a4       	ldd	r11, Y+46	; 0x2e
    6420:	cf a4       	ldd	r12, Y+47	; 0x2f
    6422:	d8 a8       	ldd	r13, Y+48	; 0x30
    6424:	c6 01       	movw	r24, r12
    6426:	aa 27       	eor	r26, r26
    6428:	bb 27       	eor	r27, r27
    642a:	57 01       	movw	r10, r14
    642c:	68 01       	movw	r12, r16
    642e:	a8 2a       	or	r10, r24
    6430:	b9 2a       	or	r11, r25
    6432:	ca 2a       	or	r12, r26
    6434:	db 2a       	or	r13, r27
    6436:	a2 16       	cp	r10, r18
    6438:	b3 06       	cpc	r11, r19
    643a:	c4 06       	cpc	r12, r20
    643c:	d5 06       	cpc	r13, r21
    643e:	e0 f4       	brcc	.+56     	; 0x6478 <__udivdi3+0x24e>
    6440:	08 94       	sec
    6442:	61 08       	sbc	r6, r1
    6444:	71 08       	sbc	r7, r1
    6446:	81 08       	sbc	r8, r1
    6448:	91 08       	sbc	r9, r1
    644a:	a2 0c       	add	r10, r2
    644c:	b3 1c       	adc	r11, r3
    644e:	c4 1c       	adc	r12, r4
    6450:	d5 1c       	adc	r13, r5
    6452:	a2 14       	cp	r10, r2
    6454:	b3 04       	cpc	r11, r3
    6456:	c4 04       	cpc	r12, r4
    6458:	d5 04       	cpc	r13, r5
    645a:	70 f0       	brcs	.+28     	; 0x6478 <__udivdi3+0x24e>
    645c:	a2 16       	cp	r10, r18
    645e:	b3 06       	cpc	r11, r19
    6460:	c4 06       	cpc	r12, r20
    6462:	d5 06       	cpc	r13, r21
    6464:	48 f4       	brcc	.+18     	; 0x6478 <__udivdi3+0x24e>
    6466:	08 94       	sec
    6468:	61 08       	sbc	r6, r1
    646a:	71 08       	sbc	r7, r1
    646c:	81 08       	sbc	r8, r1
    646e:	91 08       	sbc	r9, r1
    6470:	a2 0c       	add	r10, r2
    6472:	b3 1c       	adc	r11, r3
    6474:	c4 1c       	adc	r12, r4
    6476:	d5 1c       	adc	r13, r5
    6478:	a2 1a       	sub	r10, r18
    647a:	b3 0a       	sbc	r11, r19
    647c:	c4 0a       	sbc	r12, r20
    647e:	d5 0a       	sbc	r13, r21
    6480:	c6 01       	movw	r24, r12
    6482:	b5 01       	movw	r22, r10
    6484:	2d a9       	ldd	r18, Y+53	; 0x35
    6486:	3e a9       	ldd	r19, Y+54	; 0x36
    6488:	4f a9       	ldd	r20, Y+55	; 0x37
    648a:	58 ad       	ldd	r21, Y+56	; 0x38
    648c:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <__udivmodsi4>
    6490:	7b 01       	movw	r14, r22
    6492:	8c 01       	movw	r16, r24
    6494:	c6 01       	movw	r24, r12
    6496:	b5 01       	movw	r22, r10
    6498:	2d a9       	ldd	r18, Y+53	; 0x35
    649a:	3e a9       	ldd	r19, Y+54	; 0x36
    649c:	4f a9       	ldd	r20, Y+55	; 0x37
    649e:	58 ad       	ldd	r21, Y+56	; 0x38
    64a0:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <__udivmodsi4>
    64a4:	c9 01       	movw	r24, r18
    64a6:	da 01       	movw	r26, r20
    64a8:	5c 01       	movw	r10, r24
    64aa:	6d 01       	movw	r12, r26
    64ac:	c6 01       	movw	r24, r12
    64ae:	b5 01       	movw	r22, r10
    64b0:	29 ad       	ldd	r18, Y+57	; 0x39
    64b2:	3a ad       	ldd	r19, Y+58	; 0x3a
    64b4:	4b ad       	ldd	r20, Y+59	; 0x3b
    64b6:	5c ad       	ldd	r21, Y+60	; 0x3c
    64b8:	0e 94 67 3f 	call	0x7ece	; 0x7ece <__mulsi3>
    64bc:	9b 01       	movw	r18, r22
    64be:	ac 01       	movw	r20, r24
    64c0:	87 01       	movw	r16, r14
    64c2:	ff 24       	eor	r15, r15
    64c4:	ee 24       	eor	r14, r14
    64c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    64c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    64ca:	af a5       	ldd	r26, Y+47	; 0x2f
    64cc:	b8 a9       	ldd	r27, Y+48	; 0x30
    64ce:	a0 70       	andi	r26, 0x00	; 0
    64d0:	b0 70       	andi	r27, 0x00	; 0
    64d2:	e8 2a       	or	r14, r24
    64d4:	f9 2a       	or	r15, r25
    64d6:	0a 2b       	or	r16, r26
    64d8:	1b 2b       	or	r17, r27
    64da:	e2 16       	cp	r14, r18
    64dc:	f3 06       	cpc	r15, r19
    64de:	04 07       	cpc	r16, r20
    64e0:	15 07       	cpc	r17, r21
    64e2:	c0 f4       	brcc	.+48     	; 0x6514 <__udivdi3+0x2ea>
    64e4:	08 94       	sec
    64e6:	a1 08       	sbc	r10, r1
    64e8:	b1 08       	sbc	r11, r1
    64ea:	c1 08       	sbc	r12, r1
    64ec:	d1 08       	sbc	r13, r1
    64ee:	e2 0c       	add	r14, r2
    64f0:	f3 1c       	adc	r15, r3
    64f2:	04 1d       	adc	r16, r4
    64f4:	15 1d       	adc	r17, r5
    64f6:	e2 14       	cp	r14, r2
    64f8:	f3 04       	cpc	r15, r3
    64fa:	04 05       	cpc	r16, r4
    64fc:	15 05       	cpc	r17, r5
    64fe:	50 f0       	brcs	.+20     	; 0x6514 <__udivdi3+0x2ea>
    6500:	e2 16       	cp	r14, r18
    6502:	f3 06       	cpc	r15, r19
    6504:	04 07       	cpc	r16, r20
    6506:	15 07       	cpc	r17, r21
    6508:	28 f4       	brcc	.+10     	; 0x6514 <__udivdi3+0x2ea>
    650a:	08 94       	sec
    650c:	a1 08       	sbc	r10, r1
    650e:	b1 08       	sbc	r11, r1
    6510:	c1 08       	sbc	r12, r1
    6512:	d1 08       	sbc	r13, r1
    6514:	d3 01       	movw	r26, r6
    6516:	99 27       	eor	r25, r25
    6518:	88 27       	eor	r24, r24
    651a:	86 01       	movw	r16, r12
    651c:	75 01       	movw	r14, r10
    651e:	e8 2a       	or	r14, r24
    6520:	f9 2a       	or	r15, r25
    6522:	0a 2b       	or	r16, r26
    6524:	1b 2b       	or	r17, r27
    6526:	e9 aa       	std	Y+49, r14	; 0x31
    6528:	fa aa       	std	Y+50, r15	; 0x32
    652a:	0b ab       	std	Y+51, r16	; 0x33
    652c:	1c ab       	std	Y+52, r17	; 0x34
    652e:	cf c4       	rjmp	.+2462   	; 0x6ece <__udivdi3+0xca4>
    6530:	21 14       	cp	r2, r1
    6532:	31 04       	cpc	r3, r1
    6534:	41 04       	cpc	r4, r1
    6536:	51 04       	cpc	r5, r1
    6538:	71 f4       	brne	.+28     	; 0x6556 <__udivdi3+0x32c>
    653a:	61 e0       	ldi	r22, 0x01	; 1
    653c:	70 e0       	ldi	r23, 0x00	; 0
    653e:	80 e0       	ldi	r24, 0x00	; 0
    6540:	90 e0       	ldi	r25, 0x00	; 0
    6542:	20 e0       	ldi	r18, 0x00	; 0
    6544:	30 e0       	ldi	r19, 0x00	; 0
    6546:	40 e0       	ldi	r20, 0x00	; 0
    6548:	50 e0       	ldi	r21, 0x00	; 0
    654a:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <__udivmodsi4>
    654e:	c9 01       	movw	r24, r18
    6550:	da 01       	movw	r26, r20
    6552:	1c 01       	movw	r2, r24
    6554:	2d 01       	movw	r4, r26
    6556:	00 e0       	ldi	r16, 0x00	; 0
    6558:	20 16       	cp	r2, r16
    655a:	00 e0       	ldi	r16, 0x00	; 0
    655c:	30 06       	cpc	r3, r16
    655e:	01 e0       	ldi	r16, 0x01	; 1
    6560:	40 06       	cpc	r4, r16
    6562:	00 e0       	ldi	r16, 0x00	; 0
    6564:	50 06       	cpc	r5, r16
    6566:	88 f4       	brcc	.+34     	; 0x658a <__udivdi3+0x360>
    6568:	1f ef       	ldi	r17, 0xFF	; 255
    656a:	21 16       	cp	r2, r17
    656c:	31 04       	cpc	r3, r1
    656e:	41 04       	cpc	r4, r1
    6570:	51 04       	cpc	r5, r1
    6572:	31 f0       	breq	.+12     	; 0x6580 <__udivdi3+0x356>
    6574:	28 f0       	brcs	.+10     	; 0x6580 <__udivdi3+0x356>
    6576:	48 e0       	ldi	r20, 0x08	; 8
    6578:	50 e0       	ldi	r21, 0x00	; 0
    657a:	60 e0       	ldi	r22, 0x00	; 0
    657c:	70 e0       	ldi	r23, 0x00	; 0
    657e:	17 c0       	rjmp	.+46     	; 0x65ae <__udivdi3+0x384>
    6580:	40 e0       	ldi	r20, 0x00	; 0
    6582:	50 e0       	ldi	r21, 0x00	; 0
    6584:	60 e0       	ldi	r22, 0x00	; 0
    6586:	70 e0       	ldi	r23, 0x00	; 0
    6588:	12 c0       	rjmp	.+36     	; 0x65ae <__udivdi3+0x384>
    658a:	20 e0       	ldi	r18, 0x00	; 0
    658c:	22 16       	cp	r2, r18
    658e:	20 e0       	ldi	r18, 0x00	; 0
    6590:	32 06       	cpc	r3, r18
    6592:	20 e0       	ldi	r18, 0x00	; 0
    6594:	42 06       	cpc	r4, r18
    6596:	21 e0       	ldi	r18, 0x01	; 1
    6598:	52 06       	cpc	r5, r18
    659a:	28 f0       	brcs	.+10     	; 0x65a6 <__udivdi3+0x37c>
    659c:	48 e1       	ldi	r20, 0x18	; 24
    659e:	50 e0       	ldi	r21, 0x00	; 0
    65a0:	60 e0       	ldi	r22, 0x00	; 0
    65a2:	70 e0       	ldi	r23, 0x00	; 0
    65a4:	04 c0       	rjmp	.+8      	; 0x65ae <__udivdi3+0x384>
    65a6:	40 e1       	ldi	r20, 0x10	; 16
    65a8:	50 e0       	ldi	r21, 0x00	; 0
    65aa:	60 e0       	ldi	r22, 0x00	; 0
    65ac:	70 e0       	ldi	r23, 0x00	; 0
    65ae:	d2 01       	movw	r26, r4
    65b0:	c1 01       	movw	r24, r2
    65b2:	04 2e       	mov	r0, r20
    65b4:	04 c0       	rjmp	.+8      	; 0x65be <__udivdi3+0x394>
    65b6:	b6 95       	lsr	r27
    65b8:	a7 95       	ror	r26
    65ba:	97 95       	ror	r25
    65bc:	87 95       	ror	r24
    65be:	0a 94       	dec	r0
    65c0:	d2 f7       	brpl	.-12     	; 0x65b6 <__udivdi3+0x38c>
    65c2:	84 5e       	subi	r24, 0xE4	; 228
    65c4:	9f 4d       	sbci	r25, 0xDF	; 223
    65c6:	dc 01       	movw	r26, r24
    65c8:	2c 91       	ld	r18, X
    65ca:	e0 e2       	ldi	r30, 0x20	; 32
    65cc:	ee 2e       	mov	r14, r30
    65ce:	f1 2c       	mov	r15, r1
    65d0:	01 2d       	mov	r16, r1
    65d2:	11 2d       	mov	r17, r1
    65d4:	d8 01       	movw	r26, r16
    65d6:	c7 01       	movw	r24, r14
    65d8:	84 1b       	sub	r24, r20
    65da:	95 0b       	sbc	r25, r21
    65dc:	a6 0b       	sbc	r26, r22
    65de:	b7 0b       	sbc	r27, r23
    65e0:	82 1b       	sub	r24, r18
    65e2:	91 09       	sbc	r25, r1
    65e4:	a1 09       	sbc	r26, r1
    65e6:	b1 09       	sbc	r27, r1
    65e8:	00 97       	sbiw	r24, 0x00	; 0
    65ea:	a1 05       	cpc	r26, r1
    65ec:	b1 05       	cpc	r27, r1
    65ee:	61 f4       	brne	.+24     	; 0x6608 <__udivdi3+0x3de>
    65f0:	64 01       	movw	r12, r8
    65f2:	53 01       	movw	r10, r6
    65f4:	a2 18       	sub	r10, r2
    65f6:	b3 08       	sbc	r11, r3
    65f8:	c4 08       	sbc	r12, r4
    65fa:	d5 08       	sbc	r13, r5
    65fc:	31 e0       	ldi	r19, 0x01	; 1
    65fe:	63 2e       	mov	r6, r19
    6600:	71 2c       	mov	r7, r1
    6602:	81 2c       	mov	r8, r1
    6604:	91 2c       	mov	r9, r1
    6606:	1e c1       	rjmp	.+572    	; 0x6844 <__udivdi3+0x61a>
    6608:	6f 96       	adiw	r28, 0x1f	; 31
    660a:	8f af       	std	Y+63, r24	; 0x3f
    660c:	6f 97       	sbiw	r28, 0x1f	; 31
    660e:	08 2e       	mov	r0, r24
    6610:	04 c0       	rjmp	.+8      	; 0x661a <__udivdi3+0x3f0>
    6612:	22 0c       	add	r2, r2
    6614:	33 1c       	adc	r3, r3
    6616:	44 1c       	adc	r4, r4
    6618:	55 1c       	adc	r5, r5
    661a:	0a 94       	dec	r0
    661c:	d2 f7       	brpl	.-12     	; 0x6612 <__udivdi3+0x3e8>
    661e:	ee 2d       	mov	r30, r14
    6620:	e8 1b       	sub	r30, r24
    6622:	64 01       	movw	r12, r8
    6624:	53 01       	movw	r10, r6
    6626:	0e 2e       	mov	r0, r30
    6628:	04 c0       	rjmp	.+8      	; 0x6632 <__udivdi3+0x408>
    662a:	d6 94       	lsr	r13
    662c:	c7 94       	ror	r12
    662e:	b7 94       	ror	r11
    6630:	a7 94       	ror	r10
    6632:	0a 94       	dec	r0
    6634:	d2 f7       	brpl	.-12     	; 0x662a <__udivdi3+0x400>
    6636:	a4 01       	movw	r20, r8
    6638:	93 01       	movw	r18, r6
    663a:	6f 96       	adiw	r28, 0x1f	; 31
    663c:	0f ac       	ldd	r0, Y+63	; 0x3f
    663e:	6f 97       	sbiw	r28, 0x1f	; 31
    6640:	04 c0       	rjmp	.+8      	; 0x664a <__udivdi3+0x420>
    6642:	22 0f       	add	r18, r18
    6644:	33 1f       	adc	r19, r19
    6646:	44 1f       	adc	r20, r20
    6648:	55 1f       	adc	r21, r21
    664a:	0a 94       	dec	r0
    664c:	d2 f7       	brpl	.-12     	; 0x6642 <__udivdi3+0x418>
    664e:	6d a4       	ldd	r6, Y+45	; 0x2d
    6650:	7e a4       	ldd	r7, Y+46	; 0x2e
    6652:	8f a4       	ldd	r8, Y+47	; 0x2f
    6654:	98 a8       	ldd	r9, Y+48	; 0x30
    6656:	0e 2e       	mov	r0, r30
    6658:	04 c0       	rjmp	.+8      	; 0x6662 <__udivdi3+0x438>
    665a:	96 94       	lsr	r9
    665c:	87 94       	ror	r8
    665e:	77 94       	ror	r7
    6660:	67 94       	ror	r6
    6662:	0a 94       	dec	r0
    6664:	d2 f7       	brpl	.-12     	; 0x665a <__udivdi3+0x430>
    6666:	84 01       	movw	r16, r8
    6668:	73 01       	movw	r14, r6
    666a:	e2 2a       	or	r14, r18
    666c:	f3 2a       	or	r15, r19
    666e:	04 2b       	or	r16, r20
    6670:	15 2b       	or	r17, r21
    6672:	e9 a6       	std	Y+41, r14	; 0x29
    6674:	fa a6       	std	Y+42, r15	; 0x2a
    6676:	0b a7       	std	Y+43, r16	; 0x2b
    6678:	1c a7       	std	Y+44, r17	; 0x2c
    667a:	32 01       	movw	r6, r4
    667c:	88 24       	eor	r8, r8
    667e:	99 24       	eor	r9, r9
    6680:	92 01       	movw	r18, r4
    6682:	81 01       	movw	r16, r2
    6684:	20 70       	andi	r18, 0x00	; 0
    6686:	30 70       	andi	r19, 0x00	; 0
    6688:	21 96       	adiw	r28, 0x01	; 1
    668a:	0c af       	std	Y+60, r16	; 0x3c
    668c:	1d af       	std	Y+61, r17	; 0x3d
    668e:	2e af       	std	Y+62, r18	; 0x3e
    6690:	3f af       	std	Y+63, r19	; 0x3f
    6692:	21 97       	sbiw	r28, 0x01	; 1
    6694:	c6 01       	movw	r24, r12
    6696:	b5 01       	movw	r22, r10
    6698:	a4 01       	movw	r20, r8
    669a:	93 01       	movw	r18, r6
    669c:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <__udivmodsi4>
    66a0:	7b 01       	movw	r14, r22
    66a2:	8c 01       	movw	r16, r24
    66a4:	c6 01       	movw	r24, r12
    66a6:	b5 01       	movw	r22, r10
    66a8:	a4 01       	movw	r20, r8
    66aa:	93 01       	movw	r18, r6
    66ac:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <__udivmodsi4>
    66b0:	c9 01       	movw	r24, r18
    66b2:	da 01       	movw	r26, r20
    66b4:	25 96       	adiw	r28, 0x05	; 5
    66b6:	8c af       	std	Y+60, r24	; 0x3c
    66b8:	9d af       	std	Y+61, r25	; 0x3d
    66ba:	ae af       	std	Y+62, r26	; 0x3e
    66bc:	bf af       	std	Y+63, r27	; 0x3f
    66be:	25 97       	sbiw	r28, 0x05	; 5
    66c0:	bc 01       	movw	r22, r24
    66c2:	cd 01       	movw	r24, r26
    66c4:	21 96       	adiw	r28, 0x01	; 1
    66c6:	2c ad       	ldd	r18, Y+60	; 0x3c
    66c8:	3d ad       	ldd	r19, Y+61	; 0x3d
    66ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    66cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    66ce:	21 97       	sbiw	r28, 0x01	; 1
    66d0:	0e 94 67 3f 	call	0x7ece	; 0x7ece <__mulsi3>
    66d4:	9b 01       	movw	r18, r22
    66d6:	ac 01       	movw	r20, r24
    66d8:	87 01       	movw	r16, r14
    66da:	ff 24       	eor	r15, r15
    66dc:	ee 24       	eor	r14, r14
    66de:	a9 a4       	ldd	r10, Y+41	; 0x29
    66e0:	ba a4       	ldd	r11, Y+42	; 0x2a
    66e2:	cb a4       	ldd	r12, Y+43	; 0x2b
    66e4:	dc a4       	ldd	r13, Y+44	; 0x2c
    66e6:	c6 01       	movw	r24, r12
    66e8:	aa 27       	eor	r26, r26
    66ea:	bb 27       	eor	r27, r27
    66ec:	5c 01       	movw	r10, r24
    66ee:	6d 01       	movw	r12, r26
    66f0:	ae 28       	or	r10, r14
    66f2:	bf 28       	or	r11, r15
    66f4:	c0 2a       	or	r12, r16
    66f6:	d1 2a       	or	r13, r17
    66f8:	a2 16       	cp	r10, r18
    66fa:	b3 06       	cpc	r11, r19
    66fc:	c4 06       	cpc	r12, r20
    66fe:	d5 06       	cpc	r13, r21
    6700:	60 f5       	brcc	.+88     	; 0x675a <__udivdi3+0x530>
    6702:	25 96       	adiw	r28, 0x05	; 5
    6704:	6c ad       	ldd	r22, Y+60	; 0x3c
    6706:	7d ad       	ldd	r23, Y+61	; 0x3d
    6708:	8e ad       	ldd	r24, Y+62	; 0x3e
    670a:	9f ad       	ldd	r25, Y+63	; 0x3f
    670c:	25 97       	sbiw	r28, 0x05	; 5
    670e:	61 50       	subi	r22, 0x01	; 1
    6710:	70 40       	sbci	r23, 0x00	; 0
    6712:	80 40       	sbci	r24, 0x00	; 0
    6714:	90 40       	sbci	r25, 0x00	; 0
    6716:	25 96       	adiw	r28, 0x05	; 5
    6718:	6c af       	std	Y+60, r22	; 0x3c
    671a:	7d af       	std	Y+61, r23	; 0x3d
    671c:	8e af       	std	Y+62, r24	; 0x3e
    671e:	9f af       	std	Y+63, r25	; 0x3f
    6720:	25 97       	sbiw	r28, 0x05	; 5
    6722:	a2 0c       	add	r10, r2
    6724:	b3 1c       	adc	r11, r3
    6726:	c4 1c       	adc	r12, r4
    6728:	d5 1c       	adc	r13, r5
    672a:	a2 14       	cp	r10, r2
    672c:	b3 04       	cpc	r11, r3
    672e:	c4 04       	cpc	r12, r4
    6730:	d5 04       	cpc	r13, r5
    6732:	98 f0       	brcs	.+38     	; 0x675a <__udivdi3+0x530>
    6734:	a2 16       	cp	r10, r18
    6736:	b3 06       	cpc	r11, r19
    6738:	c4 06       	cpc	r12, r20
    673a:	d5 06       	cpc	r13, r21
    673c:	70 f4       	brcc	.+28     	; 0x675a <__udivdi3+0x530>
    673e:	61 50       	subi	r22, 0x01	; 1
    6740:	70 40       	sbci	r23, 0x00	; 0
    6742:	80 40       	sbci	r24, 0x00	; 0
    6744:	90 40       	sbci	r25, 0x00	; 0
    6746:	25 96       	adiw	r28, 0x05	; 5
    6748:	6c af       	std	Y+60, r22	; 0x3c
    674a:	7d af       	std	Y+61, r23	; 0x3d
    674c:	8e af       	std	Y+62, r24	; 0x3e
    674e:	9f af       	std	Y+63, r25	; 0x3f
    6750:	25 97       	sbiw	r28, 0x05	; 5
    6752:	a2 0c       	add	r10, r2
    6754:	b3 1c       	adc	r11, r3
    6756:	c4 1c       	adc	r12, r4
    6758:	d5 1c       	adc	r13, r5
    675a:	a2 1a       	sub	r10, r18
    675c:	b3 0a       	sbc	r11, r19
    675e:	c4 0a       	sbc	r12, r20
    6760:	d5 0a       	sbc	r13, r21
    6762:	c6 01       	movw	r24, r12
    6764:	b5 01       	movw	r22, r10
    6766:	a4 01       	movw	r20, r8
    6768:	93 01       	movw	r18, r6
    676a:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <__udivmodsi4>
    676e:	7b 01       	movw	r14, r22
    6770:	8c 01       	movw	r16, r24
    6772:	c6 01       	movw	r24, r12
    6774:	b5 01       	movw	r22, r10
    6776:	a4 01       	movw	r20, r8
    6778:	93 01       	movw	r18, r6
    677a:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <__udivmodsi4>
    677e:	c9 01       	movw	r24, r18
    6780:	da 01       	movw	r26, r20
    6782:	3c 01       	movw	r6, r24
    6784:	4d 01       	movw	r8, r26
    6786:	c4 01       	movw	r24, r8
    6788:	b3 01       	movw	r22, r6
    678a:	21 96       	adiw	r28, 0x01	; 1
    678c:	2c ad       	ldd	r18, Y+60	; 0x3c
    678e:	3d ad       	ldd	r19, Y+61	; 0x3d
    6790:	4e ad       	ldd	r20, Y+62	; 0x3e
    6792:	5f ad       	ldd	r21, Y+63	; 0x3f
    6794:	21 97       	sbiw	r28, 0x01	; 1
    6796:	0e 94 67 3f 	call	0x7ece	; 0x7ece <__mulsi3>
    679a:	9b 01       	movw	r18, r22
    679c:	ac 01       	movw	r20, r24
    679e:	87 01       	movw	r16, r14
    67a0:	ff 24       	eor	r15, r15
    67a2:	ee 24       	eor	r14, r14
    67a4:	89 a5       	ldd	r24, Y+41	; 0x29
    67a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    67a8:	ab a5       	ldd	r26, Y+43	; 0x2b
    67aa:	bc a5       	ldd	r27, Y+44	; 0x2c
    67ac:	a0 70       	andi	r26, 0x00	; 0
    67ae:	b0 70       	andi	r27, 0x00	; 0
    67b0:	57 01       	movw	r10, r14
    67b2:	68 01       	movw	r12, r16
    67b4:	a8 2a       	or	r10, r24
    67b6:	b9 2a       	or	r11, r25
    67b8:	ca 2a       	or	r12, r26
    67ba:	db 2a       	or	r13, r27
    67bc:	a2 16       	cp	r10, r18
    67be:	b3 06       	cpc	r11, r19
    67c0:	c4 06       	cpc	r12, r20
    67c2:	d5 06       	cpc	r13, r21
    67c4:	e0 f4       	brcc	.+56     	; 0x67fe <__udivdi3+0x5d4>
    67c6:	08 94       	sec
    67c8:	61 08       	sbc	r6, r1
    67ca:	71 08       	sbc	r7, r1
    67cc:	81 08       	sbc	r8, r1
    67ce:	91 08       	sbc	r9, r1
    67d0:	a2 0c       	add	r10, r2
    67d2:	b3 1c       	adc	r11, r3
    67d4:	c4 1c       	adc	r12, r4
    67d6:	d5 1c       	adc	r13, r5
    67d8:	a2 14       	cp	r10, r2
    67da:	b3 04       	cpc	r11, r3
    67dc:	c4 04       	cpc	r12, r4
    67de:	d5 04       	cpc	r13, r5
    67e0:	70 f0       	brcs	.+28     	; 0x67fe <__udivdi3+0x5d4>
    67e2:	a2 16       	cp	r10, r18
    67e4:	b3 06       	cpc	r11, r19
    67e6:	c4 06       	cpc	r12, r20
    67e8:	d5 06       	cpc	r13, r21
    67ea:	48 f4       	brcc	.+18     	; 0x67fe <__udivdi3+0x5d4>
    67ec:	08 94       	sec
    67ee:	61 08       	sbc	r6, r1
    67f0:	71 08       	sbc	r7, r1
    67f2:	81 08       	sbc	r8, r1
    67f4:	91 08       	sbc	r9, r1
    67f6:	a2 0c       	add	r10, r2
    67f8:	b3 1c       	adc	r11, r3
    67fa:	c4 1c       	adc	r12, r4
    67fc:	d5 1c       	adc	r13, r5
    67fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    6800:	9e a5       	ldd	r25, Y+46	; 0x2e
    6802:	af a5       	ldd	r26, Y+47	; 0x2f
    6804:	b8 a9       	ldd	r27, Y+48	; 0x30
    6806:	6f 96       	adiw	r28, 0x1f	; 31
    6808:	0f ac       	ldd	r0, Y+63	; 0x3f
    680a:	6f 97       	sbiw	r28, 0x1f	; 31
    680c:	04 c0       	rjmp	.+8      	; 0x6816 <__udivdi3+0x5ec>
    680e:	88 0f       	add	r24, r24
    6810:	99 1f       	adc	r25, r25
    6812:	aa 1f       	adc	r26, r26
    6814:	bb 1f       	adc	r27, r27
    6816:	0a 94       	dec	r0
    6818:	d2 f7       	brpl	.-12     	; 0x680e <__udivdi3+0x5e4>
    681a:	8d a7       	std	Y+45, r24	; 0x2d
    681c:	9e a7       	std	Y+46, r25	; 0x2e
    681e:	af a7       	std	Y+47, r26	; 0x2f
    6820:	b8 ab       	std	Y+48, r27	; 0x30
    6822:	a2 1a       	sub	r10, r18
    6824:	b3 0a       	sbc	r11, r19
    6826:	c4 0a       	sbc	r12, r20
    6828:	d5 0a       	sbc	r13, r21
    682a:	25 96       	adiw	r28, 0x05	; 5
    682c:	ec ac       	ldd	r14, Y+60	; 0x3c
    682e:	fd ac       	ldd	r15, Y+61	; 0x3d
    6830:	0e ad       	ldd	r16, Y+62	; 0x3e
    6832:	1f ad       	ldd	r17, Y+63	; 0x3f
    6834:	25 97       	sbiw	r28, 0x05	; 5
    6836:	d7 01       	movw	r26, r14
    6838:	99 27       	eor	r25, r25
    683a:	88 27       	eor	r24, r24
    683c:	68 2a       	or	r6, r24
    683e:	79 2a       	or	r7, r25
    6840:	8a 2a       	or	r8, r26
    6842:	9b 2a       	or	r9, r27
    6844:	82 01       	movw	r16, r4
    6846:	22 27       	eor	r18, r18
    6848:	33 27       	eor	r19, r19
    684a:	29 96       	adiw	r28, 0x09	; 9
    684c:	0c af       	std	Y+60, r16	; 0x3c
    684e:	1d af       	std	Y+61, r17	; 0x3d
    6850:	2e af       	std	Y+62, r18	; 0x3e
    6852:	3f af       	std	Y+63, r19	; 0x3f
    6854:	29 97       	sbiw	r28, 0x09	; 9
    6856:	a2 01       	movw	r20, r4
    6858:	91 01       	movw	r18, r2
    685a:	40 70       	andi	r20, 0x00	; 0
    685c:	50 70       	andi	r21, 0x00	; 0
    685e:	2d 96       	adiw	r28, 0x0d	; 13
    6860:	2c af       	std	Y+60, r18	; 0x3c
    6862:	3d af       	std	Y+61, r19	; 0x3d
    6864:	4e af       	std	Y+62, r20	; 0x3e
    6866:	5f af       	std	Y+63, r21	; 0x3f
    6868:	2d 97       	sbiw	r28, 0x0d	; 13
    686a:	c6 01       	movw	r24, r12
    686c:	b5 01       	movw	r22, r10
    686e:	29 96       	adiw	r28, 0x09	; 9
    6870:	2c ad       	ldd	r18, Y+60	; 0x3c
    6872:	3d ad       	ldd	r19, Y+61	; 0x3d
    6874:	4e ad       	ldd	r20, Y+62	; 0x3e
    6876:	5f ad       	ldd	r21, Y+63	; 0x3f
    6878:	29 97       	sbiw	r28, 0x09	; 9
    687a:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <__udivmodsi4>
    687e:	7b 01       	movw	r14, r22
    6880:	8c 01       	movw	r16, r24
    6882:	c6 01       	movw	r24, r12
    6884:	b5 01       	movw	r22, r10
    6886:	29 96       	adiw	r28, 0x09	; 9
    6888:	2c ad       	ldd	r18, Y+60	; 0x3c
    688a:	3d ad       	ldd	r19, Y+61	; 0x3d
    688c:	4e ad       	ldd	r20, Y+62	; 0x3e
    688e:	5f ad       	ldd	r21, Y+63	; 0x3f
    6890:	29 97       	sbiw	r28, 0x09	; 9
    6892:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <__udivmodsi4>
    6896:	c9 01       	movw	r24, r18
    6898:	da 01       	movw	r26, r20
    689a:	61 96       	adiw	r28, 0x11	; 17
    689c:	8c af       	std	Y+60, r24	; 0x3c
    689e:	9d af       	std	Y+61, r25	; 0x3d
    68a0:	ae af       	std	Y+62, r26	; 0x3e
    68a2:	bf af       	std	Y+63, r27	; 0x3f
    68a4:	61 97       	sbiw	r28, 0x11	; 17
    68a6:	bc 01       	movw	r22, r24
    68a8:	cd 01       	movw	r24, r26
    68aa:	2d 96       	adiw	r28, 0x0d	; 13
    68ac:	2c ad       	ldd	r18, Y+60	; 0x3c
    68ae:	3d ad       	ldd	r19, Y+61	; 0x3d
    68b0:	4e ad       	ldd	r20, Y+62	; 0x3e
    68b2:	5f ad       	ldd	r21, Y+63	; 0x3f
    68b4:	2d 97       	sbiw	r28, 0x0d	; 13
    68b6:	0e 94 67 3f 	call	0x7ece	; 0x7ece <__mulsi3>
    68ba:	9b 01       	movw	r18, r22
    68bc:	ac 01       	movw	r20, r24
    68be:	87 01       	movw	r16, r14
    68c0:	ff 24       	eor	r15, r15
    68c2:	ee 24       	eor	r14, r14
    68c4:	ad a4       	ldd	r10, Y+45	; 0x2d
    68c6:	be a4       	ldd	r11, Y+46	; 0x2e
    68c8:	cf a4       	ldd	r12, Y+47	; 0x2f
    68ca:	d8 a8       	ldd	r13, Y+48	; 0x30
    68cc:	c6 01       	movw	r24, r12
    68ce:	aa 27       	eor	r26, r26
    68d0:	bb 27       	eor	r27, r27
    68d2:	57 01       	movw	r10, r14
    68d4:	68 01       	movw	r12, r16
    68d6:	a8 2a       	or	r10, r24
    68d8:	b9 2a       	or	r11, r25
    68da:	ca 2a       	or	r12, r26
    68dc:	db 2a       	or	r13, r27
    68de:	a2 16       	cp	r10, r18
    68e0:	b3 06       	cpc	r11, r19
    68e2:	c4 06       	cpc	r12, r20
    68e4:	d5 06       	cpc	r13, r21
    68e6:	60 f5       	brcc	.+88     	; 0x6940 <__udivdi3+0x716>
    68e8:	61 96       	adiw	r28, 0x11	; 17
    68ea:	6c ad       	ldd	r22, Y+60	; 0x3c
    68ec:	7d ad       	ldd	r23, Y+61	; 0x3d
    68ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    68f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    68f2:	61 97       	sbiw	r28, 0x11	; 17
    68f4:	61 50       	subi	r22, 0x01	; 1
    68f6:	70 40       	sbci	r23, 0x00	; 0
    68f8:	80 40       	sbci	r24, 0x00	; 0
    68fa:	90 40       	sbci	r25, 0x00	; 0
    68fc:	61 96       	adiw	r28, 0x11	; 17
    68fe:	6c af       	std	Y+60, r22	; 0x3c
    6900:	7d af       	std	Y+61, r23	; 0x3d
    6902:	8e af       	std	Y+62, r24	; 0x3e
    6904:	9f af       	std	Y+63, r25	; 0x3f
    6906:	61 97       	sbiw	r28, 0x11	; 17
    6908:	a2 0c       	add	r10, r2
    690a:	b3 1c       	adc	r11, r3
    690c:	c4 1c       	adc	r12, r4
    690e:	d5 1c       	adc	r13, r5
    6910:	a2 14       	cp	r10, r2
    6912:	b3 04       	cpc	r11, r3
    6914:	c4 04       	cpc	r12, r4
    6916:	d5 04       	cpc	r13, r5
    6918:	98 f0       	brcs	.+38     	; 0x6940 <__udivdi3+0x716>
    691a:	a2 16       	cp	r10, r18
    691c:	b3 06       	cpc	r11, r19
    691e:	c4 06       	cpc	r12, r20
    6920:	d5 06       	cpc	r13, r21
    6922:	70 f4       	brcc	.+28     	; 0x6940 <__udivdi3+0x716>
    6924:	61 50       	subi	r22, 0x01	; 1
    6926:	70 40       	sbci	r23, 0x00	; 0
    6928:	80 40       	sbci	r24, 0x00	; 0
    692a:	90 40       	sbci	r25, 0x00	; 0
    692c:	61 96       	adiw	r28, 0x11	; 17
    692e:	6c af       	std	Y+60, r22	; 0x3c
    6930:	7d af       	std	Y+61, r23	; 0x3d
    6932:	8e af       	std	Y+62, r24	; 0x3e
    6934:	9f af       	std	Y+63, r25	; 0x3f
    6936:	61 97       	sbiw	r28, 0x11	; 17
    6938:	a2 0c       	add	r10, r2
    693a:	b3 1c       	adc	r11, r3
    693c:	c4 1c       	adc	r12, r4
    693e:	d5 1c       	adc	r13, r5
    6940:	a2 1a       	sub	r10, r18
    6942:	b3 0a       	sbc	r11, r19
    6944:	c4 0a       	sbc	r12, r20
    6946:	d5 0a       	sbc	r13, r21
    6948:	c6 01       	movw	r24, r12
    694a:	b5 01       	movw	r22, r10
    694c:	29 96       	adiw	r28, 0x09	; 9
    694e:	2c ad       	ldd	r18, Y+60	; 0x3c
    6950:	3d ad       	ldd	r19, Y+61	; 0x3d
    6952:	4e ad       	ldd	r20, Y+62	; 0x3e
    6954:	5f ad       	ldd	r21, Y+63	; 0x3f
    6956:	29 97       	sbiw	r28, 0x09	; 9
    6958:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <__udivmodsi4>
    695c:	7b 01       	movw	r14, r22
    695e:	8c 01       	movw	r16, r24
    6960:	c6 01       	movw	r24, r12
    6962:	b5 01       	movw	r22, r10
    6964:	29 96       	adiw	r28, 0x09	; 9
    6966:	2c ad       	ldd	r18, Y+60	; 0x3c
    6968:	3d ad       	ldd	r19, Y+61	; 0x3d
    696a:	4e ad       	ldd	r20, Y+62	; 0x3e
    696c:	5f ad       	ldd	r21, Y+63	; 0x3f
    696e:	29 97       	sbiw	r28, 0x09	; 9
    6970:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <__udivmodsi4>
    6974:	c9 01       	movw	r24, r18
    6976:	da 01       	movw	r26, r20
    6978:	5c 01       	movw	r10, r24
    697a:	6d 01       	movw	r12, r26
    697c:	c6 01       	movw	r24, r12
    697e:	b5 01       	movw	r22, r10
    6980:	2d 96       	adiw	r28, 0x0d	; 13
    6982:	2c ad       	ldd	r18, Y+60	; 0x3c
    6984:	3d ad       	ldd	r19, Y+61	; 0x3d
    6986:	4e ad       	ldd	r20, Y+62	; 0x3e
    6988:	5f ad       	ldd	r21, Y+63	; 0x3f
    698a:	2d 97       	sbiw	r28, 0x0d	; 13
    698c:	0e 94 67 3f 	call	0x7ece	; 0x7ece <__mulsi3>
    6990:	9b 01       	movw	r18, r22
    6992:	ac 01       	movw	r20, r24
    6994:	87 01       	movw	r16, r14
    6996:	ff 24       	eor	r15, r15
    6998:	ee 24       	eor	r14, r14
    699a:	8d a5       	ldd	r24, Y+45	; 0x2d
    699c:	9e a5       	ldd	r25, Y+46	; 0x2e
    699e:	af a5       	ldd	r26, Y+47	; 0x2f
    69a0:	b8 a9       	ldd	r27, Y+48	; 0x30
    69a2:	a0 70       	andi	r26, 0x00	; 0
    69a4:	b0 70       	andi	r27, 0x00	; 0
    69a6:	e8 2a       	or	r14, r24
    69a8:	f9 2a       	or	r15, r25
    69aa:	0a 2b       	or	r16, r26
    69ac:	1b 2b       	or	r17, r27
    69ae:	e2 16       	cp	r14, r18
    69b0:	f3 06       	cpc	r15, r19
    69b2:	04 07       	cpc	r16, r20
    69b4:	15 07       	cpc	r17, r21
    69b6:	c0 f4       	brcc	.+48     	; 0x69e8 <__udivdi3+0x7be>
    69b8:	08 94       	sec
    69ba:	a1 08       	sbc	r10, r1
    69bc:	b1 08       	sbc	r11, r1
    69be:	c1 08       	sbc	r12, r1
    69c0:	d1 08       	sbc	r13, r1
    69c2:	e2 0c       	add	r14, r2
    69c4:	f3 1c       	adc	r15, r3
    69c6:	04 1d       	adc	r16, r4
    69c8:	15 1d       	adc	r17, r5
    69ca:	e2 14       	cp	r14, r2
    69cc:	f3 04       	cpc	r15, r3
    69ce:	04 05       	cpc	r16, r4
    69d0:	15 05       	cpc	r17, r5
    69d2:	50 f0       	brcs	.+20     	; 0x69e8 <__udivdi3+0x7be>
    69d4:	e2 16       	cp	r14, r18
    69d6:	f3 06       	cpc	r15, r19
    69d8:	04 07       	cpc	r16, r20
    69da:	15 07       	cpc	r17, r21
    69dc:	28 f4       	brcc	.+10     	; 0x69e8 <__udivdi3+0x7be>
    69de:	08 94       	sec
    69e0:	a1 08       	sbc	r10, r1
    69e2:	b1 08       	sbc	r11, r1
    69e4:	c1 08       	sbc	r12, r1
    69e6:	d1 08       	sbc	r13, r1
    69e8:	61 96       	adiw	r28, 0x11	; 17
    69ea:	ec ac       	ldd	r14, Y+60	; 0x3c
    69ec:	fd ac       	ldd	r15, Y+61	; 0x3d
    69ee:	0e ad       	ldd	r16, Y+62	; 0x3e
    69f0:	1f ad       	ldd	r17, Y+63	; 0x3f
    69f2:	61 97       	sbiw	r28, 0x11	; 17
    69f4:	d7 01       	movw	r26, r14
    69f6:	99 27       	eor	r25, r25
    69f8:	88 27       	eor	r24, r24
    69fa:	96 01       	movw	r18, r12
    69fc:	85 01       	movw	r16, r10
    69fe:	08 2b       	or	r16, r24
    6a00:	19 2b       	or	r17, r25
    6a02:	2a 2b       	or	r18, r26
    6a04:	3b 2b       	or	r19, r27
    6a06:	09 ab       	std	Y+49, r16	; 0x31
    6a08:	1a ab       	std	Y+50, r17	; 0x32
    6a0a:	2b ab       	std	Y+51, r18	; 0x33
    6a0c:	3c ab       	std	Y+52, r19	; 0x34
    6a0e:	62 c2       	rjmp	.+1220   	; 0x6ed4 <__udivdi3+0xcaa>
    6a10:	6e 14       	cp	r6, r14
    6a12:	7f 04       	cpc	r7, r15
    6a14:	80 06       	cpc	r8, r16
    6a16:	91 06       	cpc	r9, r17
    6a18:	08 f4       	brcc	.+2      	; 0x6a1c <__udivdi3+0x7f2>
    6a1a:	51 c2       	rjmp	.+1186   	; 0x6ebe <__udivdi3+0xc94>
    6a1c:	20 e0       	ldi	r18, 0x00	; 0
    6a1e:	e2 16       	cp	r14, r18
    6a20:	20 e0       	ldi	r18, 0x00	; 0
    6a22:	f2 06       	cpc	r15, r18
    6a24:	21 e0       	ldi	r18, 0x01	; 1
    6a26:	02 07       	cpc	r16, r18
    6a28:	20 e0       	ldi	r18, 0x00	; 0
    6a2a:	12 07       	cpc	r17, r18
    6a2c:	88 f4       	brcc	.+34     	; 0x6a50 <__udivdi3+0x826>
    6a2e:	3f ef       	ldi	r19, 0xFF	; 255
    6a30:	e3 16       	cp	r14, r19
    6a32:	f1 04       	cpc	r15, r1
    6a34:	01 05       	cpc	r16, r1
    6a36:	11 05       	cpc	r17, r1
    6a38:	31 f0       	breq	.+12     	; 0x6a46 <__udivdi3+0x81c>
    6a3a:	28 f0       	brcs	.+10     	; 0x6a46 <__udivdi3+0x81c>
    6a3c:	48 e0       	ldi	r20, 0x08	; 8
    6a3e:	50 e0       	ldi	r21, 0x00	; 0
    6a40:	60 e0       	ldi	r22, 0x00	; 0
    6a42:	70 e0       	ldi	r23, 0x00	; 0
    6a44:	17 c0       	rjmp	.+46     	; 0x6a74 <__udivdi3+0x84a>
    6a46:	40 e0       	ldi	r20, 0x00	; 0
    6a48:	50 e0       	ldi	r21, 0x00	; 0
    6a4a:	60 e0       	ldi	r22, 0x00	; 0
    6a4c:	70 e0       	ldi	r23, 0x00	; 0
    6a4e:	12 c0       	rjmp	.+36     	; 0x6a74 <__udivdi3+0x84a>
    6a50:	40 e0       	ldi	r20, 0x00	; 0
    6a52:	e4 16       	cp	r14, r20
    6a54:	40 e0       	ldi	r20, 0x00	; 0
    6a56:	f4 06       	cpc	r15, r20
    6a58:	40 e0       	ldi	r20, 0x00	; 0
    6a5a:	04 07       	cpc	r16, r20
    6a5c:	41 e0       	ldi	r20, 0x01	; 1
    6a5e:	14 07       	cpc	r17, r20
    6a60:	28 f0       	brcs	.+10     	; 0x6a6c <__udivdi3+0x842>
    6a62:	48 e1       	ldi	r20, 0x18	; 24
    6a64:	50 e0       	ldi	r21, 0x00	; 0
    6a66:	60 e0       	ldi	r22, 0x00	; 0
    6a68:	70 e0       	ldi	r23, 0x00	; 0
    6a6a:	04 c0       	rjmp	.+8      	; 0x6a74 <__udivdi3+0x84a>
    6a6c:	40 e1       	ldi	r20, 0x10	; 16
    6a6e:	50 e0       	ldi	r21, 0x00	; 0
    6a70:	60 e0       	ldi	r22, 0x00	; 0
    6a72:	70 e0       	ldi	r23, 0x00	; 0
    6a74:	d8 01       	movw	r26, r16
    6a76:	c7 01       	movw	r24, r14
    6a78:	04 2e       	mov	r0, r20
    6a7a:	04 c0       	rjmp	.+8      	; 0x6a84 <__udivdi3+0x85a>
    6a7c:	b6 95       	lsr	r27
    6a7e:	a7 95       	ror	r26
    6a80:	97 95       	ror	r25
    6a82:	87 95       	ror	r24
    6a84:	0a 94       	dec	r0
    6a86:	d2 f7       	brpl	.-12     	; 0x6a7c <__udivdi3+0x852>
    6a88:	84 5e       	subi	r24, 0xE4	; 228
    6a8a:	9f 4d       	sbci	r25, 0xDF	; 223
    6a8c:	dc 01       	movw	r26, r24
    6a8e:	2c 91       	ld	r18, X
    6a90:	30 e2       	ldi	r19, 0x20	; 32
    6a92:	a3 2e       	mov	r10, r19
    6a94:	b1 2c       	mov	r11, r1
    6a96:	c1 2c       	mov	r12, r1
    6a98:	d1 2c       	mov	r13, r1
    6a9a:	d6 01       	movw	r26, r12
    6a9c:	c5 01       	movw	r24, r10
    6a9e:	84 1b       	sub	r24, r20
    6aa0:	95 0b       	sbc	r25, r21
    6aa2:	a6 0b       	sbc	r26, r22
    6aa4:	b7 0b       	sbc	r27, r23
    6aa6:	82 1b       	sub	r24, r18
    6aa8:	91 09       	sbc	r25, r1
    6aaa:	a1 09       	sbc	r26, r1
    6aac:	b1 09       	sbc	r27, r1
    6aae:	00 97       	sbiw	r24, 0x00	; 0
    6ab0:	a1 05       	cpc	r26, r1
    6ab2:	b1 05       	cpc	r27, r1
    6ab4:	89 f4       	brne	.+34     	; 0x6ad8 <__udivdi3+0x8ae>
    6ab6:	e6 14       	cp	r14, r6
    6ab8:	f7 04       	cpc	r15, r7
    6aba:	08 05       	cpc	r16, r8
    6abc:	19 05       	cpc	r17, r9
    6abe:	08 f4       	brcc	.+2      	; 0x6ac2 <__udivdi3+0x898>
    6ac0:	f2 c1       	rjmp	.+996    	; 0x6ea6 <__udivdi3+0xc7c>
    6ac2:	6d a4       	ldd	r6, Y+45	; 0x2d
    6ac4:	7e a4       	ldd	r7, Y+46	; 0x2e
    6ac6:	8f a4       	ldd	r8, Y+47	; 0x2f
    6ac8:	98 a8       	ldd	r9, Y+48	; 0x30
    6aca:	62 14       	cp	r6, r2
    6acc:	73 04       	cpc	r7, r3
    6ace:	84 04       	cpc	r8, r4
    6ad0:	95 04       	cpc	r9, r5
    6ad2:	08 f0       	brcs	.+2      	; 0x6ad6 <__udivdi3+0x8ac>
    6ad4:	e8 c1       	rjmp	.+976    	; 0x6ea6 <__udivdi3+0xc7c>
    6ad6:	f3 c1       	rjmp	.+998    	; 0x6ebe <__udivdi3+0xc94>
    6ad8:	6e 96       	adiw	r28, 0x1e	; 30
    6ada:	8f af       	std	Y+63, r24	; 0x3f
    6adc:	6e 97       	sbiw	r28, 0x1e	; 30
    6ade:	08 2e       	mov	r0, r24
    6ae0:	04 c0       	rjmp	.+8      	; 0x6aea <__udivdi3+0x8c0>
    6ae2:	ee 0c       	add	r14, r14
    6ae4:	ff 1c       	adc	r15, r15
    6ae6:	00 1f       	adc	r16, r16
    6ae8:	11 1f       	adc	r17, r17
    6aea:	0a 94       	dec	r0
    6aec:	d2 f7       	brpl	.-12     	; 0x6ae2 <__udivdi3+0x8b8>
    6aee:	6a 2d       	mov	r22, r10
    6af0:	68 1b       	sub	r22, r24
    6af2:	d2 01       	movw	r26, r4
    6af4:	c1 01       	movw	r24, r2
    6af6:	06 2e       	mov	r0, r22
    6af8:	04 c0       	rjmp	.+8      	; 0x6b02 <__udivdi3+0x8d8>
    6afa:	b6 95       	lsr	r27
    6afc:	a7 95       	ror	r26
    6afe:	97 95       	ror	r25
    6b00:	87 95       	ror	r24
    6b02:	0a 94       	dec	r0
    6b04:	d2 f7       	brpl	.-12     	; 0x6afa <__udivdi3+0x8d0>
    6b06:	5c 01       	movw	r10, r24
    6b08:	6d 01       	movw	r12, r26
    6b0a:	ae 28       	or	r10, r14
    6b0c:	bf 28       	or	r11, r15
    6b0e:	c0 2a       	or	r12, r16
    6b10:	d1 2a       	or	r13, r17
    6b12:	ad a2       	std	Y+37, r10	; 0x25
    6b14:	be a2       	std	Y+38, r11	; 0x26
    6b16:	cf a2       	std	Y+39, r12	; 0x27
    6b18:	d8 a6       	std	Y+40, r13	; 0x28
    6b1a:	72 01       	movw	r14, r4
    6b1c:	61 01       	movw	r12, r2
    6b1e:	6e 96       	adiw	r28, 0x1e	; 30
    6b20:	0f ac       	ldd	r0, Y+63	; 0x3f
    6b22:	6e 97       	sbiw	r28, 0x1e	; 30
    6b24:	04 c0       	rjmp	.+8      	; 0x6b2e <__udivdi3+0x904>
    6b26:	cc 0c       	add	r12, r12
    6b28:	dd 1c       	adc	r13, r13
    6b2a:	ee 1c       	adc	r14, r14
    6b2c:	ff 1c       	adc	r15, r15
    6b2e:	0a 94       	dec	r0
    6b30:	d2 f7       	brpl	.-12     	; 0x6b26 <__udivdi3+0x8fc>
    6b32:	c9 a2       	std	Y+33, r12	; 0x21
    6b34:	da a2       	std	Y+34, r13	; 0x22
    6b36:	eb a2       	std	Y+35, r14	; 0x23
    6b38:	fc a2       	std	Y+36, r15	; 0x24
    6b3a:	64 01       	movw	r12, r8
    6b3c:	53 01       	movw	r10, r6
    6b3e:	06 2e       	mov	r0, r22
    6b40:	04 c0       	rjmp	.+8      	; 0x6b4a <__udivdi3+0x920>
    6b42:	d6 94       	lsr	r13
    6b44:	c7 94       	ror	r12
    6b46:	b7 94       	ror	r11
    6b48:	a7 94       	ror	r10
    6b4a:	0a 94       	dec	r0
    6b4c:	d2 f7       	brpl	.-12     	; 0x6b42 <__udivdi3+0x918>
    6b4e:	d4 01       	movw	r26, r8
    6b50:	c3 01       	movw	r24, r6
    6b52:	6e 96       	adiw	r28, 0x1e	; 30
    6b54:	0f ac       	ldd	r0, Y+63	; 0x3f
    6b56:	6e 97       	sbiw	r28, 0x1e	; 30
    6b58:	04 c0       	rjmp	.+8      	; 0x6b62 <__udivdi3+0x938>
    6b5a:	88 0f       	add	r24, r24
    6b5c:	99 1f       	adc	r25, r25
    6b5e:	aa 1f       	adc	r26, r26
    6b60:	bb 1f       	adc	r27, r27
    6b62:	0a 94       	dec	r0
    6b64:	d2 f7       	brpl	.-12     	; 0x6b5a <__udivdi3+0x930>
    6b66:	ed a4       	ldd	r14, Y+45	; 0x2d
    6b68:	fe a4       	ldd	r15, Y+46	; 0x2e
    6b6a:	0f a5       	ldd	r16, Y+47	; 0x2f
    6b6c:	18 a9       	ldd	r17, Y+48	; 0x30
    6b6e:	04 c0       	rjmp	.+8      	; 0x6b78 <__udivdi3+0x94e>
    6b70:	16 95       	lsr	r17
    6b72:	07 95       	ror	r16
    6b74:	f7 94       	ror	r15
    6b76:	e7 94       	ror	r14
    6b78:	6a 95       	dec	r22
    6b7a:	d2 f7       	brpl	.-12     	; 0x6b70 <__udivdi3+0x946>
    6b7c:	37 01       	movw	r6, r14
    6b7e:	48 01       	movw	r8, r16
    6b80:	68 2a       	or	r6, r24
    6b82:	79 2a       	or	r7, r25
    6b84:	8a 2a       	or	r8, r26
    6b86:	9b 2a       	or	r9, r27
    6b88:	6d 8e       	std	Y+29, r6	; 0x1d
    6b8a:	7e 8e       	std	Y+30, r7	; 0x1e
    6b8c:	8f 8e       	std	Y+31, r8	; 0x1f
    6b8e:	98 a2       	std	Y+32, r9	; 0x20
    6b90:	ed a0       	ldd	r14, Y+37	; 0x25
    6b92:	fe a0       	ldd	r15, Y+38	; 0x26
    6b94:	0f a1       	ldd	r16, Y+39	; 0x27
    6b96:	18 a5       	ldd	r17, Y+40	; 0x28
    6b98:	38 01       	movw	r6, r16
    6b9a:	88 24       	eor	r8, r8
    6b9c:	99 24       	eor	r9, r9
    6b9e:	98 01       	movw	r18, r16
    6ba0:	87 01       	movw	r16, r14
    6ba2:	20 70       	andi	r18, 0x00	; 0
    6ba4:	30 70       	andi	r19, 0x00	; 0
    6ba6:	65 96       	adiw	r28, 0x15	; 21
    6ba8:	0c af       	std	Y+60, r16	; 0x3c
    6baa:	1d af       	std	Y+61, r17	; 0x3d
    6bac:	2e af       	std	Y+62, r18	; 0x3e
    6bae:	3f af       	std	Y+63, r19	; 0x3f
    6bb0:	65 97       	sbiw	r28, 0x15	; 21
    6bb2:	c6 01       	movw	r24, r12
    6bb4:	b5 01       	movw	r22, r10
    6bb6:	a4 01       	movw	r20, r8
    6bb8:	93 01       	movw	r18, r6
    6bba:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <__udivmodsi4>
    6bbe:	7b 01       	movw	r14, r22
    6bc0:	8c 01       	movw	r16, r24
    6bc2:	c6 01       	movw	r24, r12
    6bc4:	b5 01       	movw	r22, r10
    6bc6:	a4 01       	movw	r20, r8
    6bc8:	93 01       	movw	r18, r6
    6bca:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <__udivmodsi4>
    6bce:	c9 01       	movw	r24, r18
    6bd0:	da 01       	movw	r26, r20
    6bd2:	1c 01       	movw	r2, r24
    6bd4:	2d 01       	movw	r4, r26
    6bd6:	c2 01       	movw	r24, r4
    6bd8:	b1 01       	movw	r22, r2
    6bda:	65 96       	adiw	r28, 0x15	; 21
    6bdc:	2c ad       	ldd	r18, Y+60	; 0x3c
    6bde:	3d ad       	ldd	r19, Y+61	; 0x3d
    6be0:	4e ad       	ldd	r20, Y+62	; 0x3e
    6be2:	5f ad       	ldd	r21, Y+63	; 0x3f
    6be4:	65 97       	sbiw	r28, 0x15	; 21
    6be6:	0e 94 67 3f 	call	0x7ece	; 0x7ece <__mulsi3>
    6bea:	9b 01       	movw	r18, r22
    6bec:	ac 01       	movw	r20, r24
    6bee:	87 01       	movw	r16, r14
    6bf0:	ff 24       	eor	r15, r15
    6bf2:	ee 24       	eor	r14, r14
    6bf4:	ad 8c       	ldd	r10, Y+29	; 0x1d
    6bf6:	be 8c       	ldd	r11, Y+30	; 0x1e
    6bf8:	cf 8c       	ldd	r12, Y+31	; 0x1f
    6bfa:	d8 a0       	ldd	r13, Y+32	; 0x20
    6bfc:	c6 01       	movw	r24, r12
    6bfe:	aa 27       	eor	r26, r26
    6c00:	bb 27       	eor	r27, r27
    6c02:	57 01       	movw	r10, r14
    6c04:	68 01       	movw	r12, r16
    6c06:	a8 2a       	or	r10, r24
    6c08:	b9 2a       	or	r11, r25
    6c0a:	ca 2a       	or	r12, r26
    6c0c:	db 2a       	or	r13, r27
    6c0e:	a2 16       	cp	r10, r18
    6c10:	b3 06       	cpc	r11, r19
    6c12:	c4 06       	cpc	r12, r20
    6c14:	d5 06       	cpc	r13, r21
    6c16:	00 f5       	brcc	.+64     	; 0x6c58 <__udivdi3+0xa2e>
    6c18:	08 94       	sec
    6c1a:	21 08       	sbc	r2, r1
    6c1c:	31 08       	sbc	r3, r1
    6c1e:	41 08       	sbc	r4, r1
    6c20:	51 08       	sbc	r5, r1
    6c22:	ed a0       	ldd	r14, Y+37	; 0x25
    6c24:	fe a0       	ldd	r15, Y+38	; 0x26
    6c26:	0f a1       	ldd	r16, Y+39	; 0x27
    6c28:	18 a5       	ldd	r17, Y+40	; 0x28
    6c2a:	ae 0c       	add	r10, r14
    6c2c:	bf 1c       	adc	r11, r15
    6c2e:	c0 1e       	adc	r12, r16
    6c30:	d1 1e       	adc	r13, r17
    6c32:	ae 14       	cp	r10, r14
    6c34:	bf 04       	cpc	r11, r15
    6c36:	c0 06       	cpc	r12, r16
    6c38:	d1 06       	cpc	r13, r17
    6c3a:	70 f0       	brcs	.+28     	; 0x6c58 <__udivdi3+0xa2e>
    6c3c:	a2 16       	cp	r10, r18
    6c3e:	b3 06       	cpc	r11, r19
    6c40:	c4 06       	cpc	r12, r20
    6c42:	d5 06       	cpc	r13, r21
    6c44:	48 f4       	brcc	.+18     	; 0x6c58 <__udivdi3+0xa2e>
    6c46:	08 94       	sec
    6c48:	21 08       	sbc	r2, r1
    6c4a:	31 08       	sbc	r3, r1
    6c4c:	41 08       	sbc	r4, r1
    6c4e:	51 08       	sbc	r5, r1
    6c50:	ae 0c       	add	r10, r14
    6c52:	bf 1c       	adc	r11, r15
    6c54:	c0 1e       	adc	r12, r16
    6c56:	d1 1e       	adc	r13, r17
    6c58:	a2 1a       	sub	r10, r18
    6c5a:	b3 0a       	sbc	r11, r19
    6c5c:	c4 0a       	sbc	r12, r20
    6c5e:	d5 0a       	sbc	r13, r21
    6c60:	c6 01       	movw	r24, r12
    6c62:	b5 01       	movw	r22, r10
    6c64:	a4 01       	movw	r20, r8
    6c66:	93 01       	movw	r18, r6
    6c68:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <__udivmodsi4>
    6c6c:	7b 01       	movw	r14, r22
    6c6e:	8c 01       	movw	r16, r24
    6c70:	c6 01       	movw	r24, r12
    6c72:	b5 01       	movw	r22, r10
    6c74:	a4 01       	movw	r20, r8
    6c76:	93 01       	movw	r18, r6
    6c78:	0e 94 86 3f 	call	0x7f0c	; 0x7f0c <__udivmodsi4>
    6c7c:	c9 01       	movw	r24, r18
    6c7e:	da 01       	movw	r26, r20
    6c80:	3c 01       	movw	r6, r24
    6c82:	4d 01       	movw	r8, r26
    6c84:	c4 01       	movw	r24, r8
    6c86:	b3 01       	movw	r22, r6
    6c88:	65 96       	adiw	r28, 0x15	; 21
    6c8a:	2c ad       	ldd	r18, Y+60	; 0x3c
    6c8c:	3d ad       	ldd	r19, Y+61	; 0x3d
    6c8e:	4e ad       	ldd	r20, Y+62	; 0x3e
    6c90:	5f ad       	ldd	r21, Y+63	; 0x3f
    6c92:	65 97       	sbiw	r28, 0x15	; 21
    6c94:	0e 94 67 3f 	call	0x7ece	; 0x7ece <__mulsi3>
    6c98:	9b 01       	movw	r18, r22
    6c9a:	ac 01       	movw	r20, r24
    6c9c:	87 01       	movw	r16, r14
    6c9e:	ff 24       	eor	r15, r15
    6ca0:	ee 24       	eor	r14, r14
    6ca2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6ca4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6ca6:	af 8d       	ldd	r26, Y+31	; 0x1f
    6ca8:	b8 a1       	ldd	r27, Y+32	; 0x20
    6caa:	a0 70       	andi	r26, 0x00	; 0
    6cac:	b0 70       	andi	r27, 0x00	; 0
    6cae:	57 01       	movw	r10, r14
    6cb0:	68 01       	movw	r12, r16
    6cb2:	a8 2a       	or	r10, r24
    6cb4:	b9 2a       	or	r11, r25
    6cb6:	ca 2a       	or	r12, r26
    6cb8:	db 2a       	or	r13, r27
    6cba:	a2 16       	cp	r10, r18
    6cbc:	b3 06       	cpc	r11, r19
    6cbe:	c4 06       	cpc	r12, r20
    6cc0:	d5 06       	cpc	r13, r21
    6cc2:	00 f5       	brcc	.+64     	; 0x6d04 <__udivdi3+0xada>
    6cc4:	08 94       	sec
    6cc6:	61 08       	sbc	r6, r1
    6cc8:	71 08       	sbc	r7, r1
    6cca:	81 08       	sbc	r8, r1
    6ccc:	91 08       	sbc	r9, r1
    6cce:	6d a1       	ldd	r22, Y+37	; 0x25
    6cd0:	7e a1       	ldd	r23, Y+38	; 0x26
    6cd2:	8f a1       	ldd	r24, Y+39	; 0x27
    6cd4:	98 a5       	ldd	r25, Y+40	; 0x28
    6cd6:	a6 0e       	add	r10, r22
    6cd8:	b7 1e       	adc	r11, r23
    6cda:	c8 1e       	adc	r12, r24
    6cdc:	d9 1e       	adc	r13, r25
    6cde:	a6 16       	cp	r10, r22
    6ce0:	b7 06       	cpc	r11, r23
    6ce2:	c8 06       	cpc	r12, r24
    6ce4:	d9 06       	cpc	r13, r25
    6ce6:	70 f0       	brcs	.+28     	; 0x6d04 <__udivdi3+0xada>
    6ce8:	a2 16       	cp	r10, r18
    6cea:	b3 06       	cpc	r11, r19
    6cec:	c4 06       	cpc	r12, r20
    6cee:	d5 06       	cpc	r13, r21
    6cf0:	48 f4       	brcc	.+18     	; 0x6d04 <__udivdi3+0xada>
    6cf2:	08 94       	sec
    6cf4:	61 08       	sbc	r6, r1
    6cf6:	71 08       	sbc	r7, r1
    6cf8:	81 08       	sbc	r8, r1
    6cfa:	91 08       	sbc	r9, r1
    6cfc:	a6 0e       	add	r10, r22
    6cfe:	b7 1e       	adc	r11, r23
    6d00:	c8 1e       	adc	r12, r24
    6d02:	d9 1e       	adc	r13, r25
    6d04:	d6 01       	movw	r26, r12
    6d06:	c5 01       	movw	r24, r10
    6d08:	82 1b       	sub	r24, r18
    6d0a:	93 0b       	sbc	r25, r19
    6d0c:	a4 0b       	sbc	r26, r20
    6d0e:	b5 0b       	sbc	r27, r21
    6d10:	89 8f       	std	Y+25, r24	; 0x19
    6d12:	9a 8f       	std	Y+26, r25	; 0x1a
    6d14:	ab 8f       	std	Y+27, r26	; 0x1b
    6d16:	bc 8f       	std	Y+28, r27	; 0x1c
    6d18:	d1 01       	movw	r26, r2
    6d1a:	99 27       	eor	r25, r25
    6d1c:	88 27       	eor	r24, r24
    6d1e:	64 01       	movw	r12, r8
    6d20:	53 01       	movw	r10, r6
    6d22:	a8 2a       	or	r10, r24
    6d24:	b9 2a       	or	r11, r25
    6d26:	ca 2a       	or	r12, r26
    6d28:	db 2a       	or	r13, r27
    6d2a:	a9 aa       	std	Y+49, r10	; 0x31
    6d2c:	ba aa       	std	Y+50, r11	; 0x32
    6d2e:	cb aa       	std	Y+51, r12	; 0x33
    6d30:	dc aa       	std	Y+52, r13	; 0x34
    6d32:	86 01       	movw	r16, r12
    6d34:	75 01       	movw	r14, r10
    6d36:	2f ef       	ldi	r18, 0xFF	; 255
    6d38:	3f ef       	ldi	r19, 0xFF	; 255
    6d3a:	40 e0       	ldi	r20, 0x00	; 0
    6d3c:	50 e0       	ldi	r21, 0x00	; 0
    6d3e:	e2 22       	and	r14, r18
    6d40:	f3 22       	and	r15, r19
    6d42:	04 23       	and	r16, r20
    6d44:	15 23       	and	r17, r21
    6d46:	a6 01       	movw	r20, r12
    6d48:	66 27       	eor	r22, r22
    6d4a:	77 27       	eor	r23, r23
    6d4c:	6d 96       	adiw	r28, 0x1d	; 29
    6d4e:	4c af       	std	Y+60, r20	; 0x3c
    6d50:	5d af       	std	Y+61, r21	; 0x3d
    6d52:	6e af       	std	Y+62, r22	; 0x3e
    6d54:	7f af       	std	Y+63, r23	; 0x3f
    6d56:	6d 97       	sbiw	r28, 0x1d	; 29
    6d58:	a9 a0       	ldd	r10, Y+33	; 0x21
    6d5a:	ba a0       	ldd	r11, Y+34	; 0x22
    6d5c:	cb a0       	ldd	r12, Y+35	; 0x23
    6d5e:	dc a0       	ldd	r13, Y+36	; 0x24
    6d60:	6f ef       	ldi	r22, 0xFF	; 255
    6d62:	7f ef       	ldi	r23, 0xFF	; 255
    6d64:	80 e0       	ldi	r24, 0x00	; 0
    6d66:	90 e0       	ldi	r25, 0x00	; 0
    6d68:	a6 22       	and	r10, r22
    6d6a:	b7 22       	and	r11, r23
    6d6c:	c8 22       	and	r12, r24
    6d6e:	d9 22       	and	r13, r25
    6d70:	89 a1       	ldd	r24, Y+33	; 0x21
    6d72:	9a a1       	ldd	r25, Y+34	; 0x22
    6d74:	ab a1       	ldd	r26, Y+35	; 0x23
    6d76:	bc a1       	ldd	r27, Y+36	; 0x24
    6d78:	1d 01       	movw	r2, r26
    6d7a:	44 24       	eor	r4, r4
    6d7c:	55 24       	eor	r5, r5
    6d7e:	c8 01       	movw	r24, r16
    6d80:	b7 01       	movw	r22, r14
    6d82:	a6 01       	movw	r20, r12
    6d84:	95 01       	movw	r18, r10
    6d86:	0e 94 67 3f 	call	0x7ece	; 0x7ece <__mulsi3>
    6d8a:	69 96       	adiw	r28, 0x19	; 25
    6d8c:	6c af       	std	Y+60, r22	; 0x3c
    6d8e:	7d af       	std	Y+61, r23	; 0x3d
    6d90:	8e af       	std	Y+62, r24	; 0x3e
    6d92:	9f af       	std	Y+63, r25	; 0x3f
    6d94:	69 97       	sbiw	r28, 0x19	; 25
    6d96:	c8 01       	movw	r24, r16
    6d98:	b7 01       	movw	r22, r14
    6d9a:	a2 01       	movw	r20, r4
    6d9c:	91 01       	movw	r18, r2
    6d9e:	0e 94 67 3f 	call	0x7ece	; 0x7ece <__mulsi3>
    6da2:	3b 01       	movw	r6, r22
    6da4:	4c 01       	movw	r8, r24
    6da6:	6d 96       	adiw	r28, 0x1d	; 29
    6da8:	6c ad       	ldd	r22, Y+60	; 0x3c
    6daa:	7d ad       	ldd	r23, Y+61	; 0x3d
    6dac:	8e ad       	ldd	r24, Y+62	; 0x3e
    6dae:	9f ad       	ldd	r25, Y+63	; 0x3f
    6db0:	6d 97       	sbiw	r28, 0x1d	; 29
    6db2:	a6 01       	movw	r20, r12
    6db4:	95 01       	movw	r18, r10
    6db6:	0e 94 67 3f 	call	0x7ece	; 0x7ece <__mulsi3>
    6dba:	7b 01       	movw	r14, r22
    6dbc:	8c 01       	movw	r16, r24
    6dbe:	6d 96       	adiw	r28, 0x1d	; 29
    6dc0:	6c ad       	ldd	r22, Y+60	; 0x3c
    6dc2:	7d ad       	ldd	r23, Y+61	; 0x3d
    6dc4:	8e ad       	ldd	r24, Y+62	; 0x3e
    6dc6:	9f ad       	ldd	r25, Y+63	; 0x3f
    6dc8:	6d 97       	sbiw	r28, 0x1d	; 29
    6dca:	a2 01       	movw	r20, r4
    6dcc:	91 01       	movw	r18, r2
    6dce:	0e 94 67 3f 	call	0x7ece	; 0x7ece <__mulsi3>
    6dd2:	5b 01       	movw	r10, r22
    6dd4:	6c 01       	movw	r12, r24
    6dd6:	a8 01       	movw	r20, r16
    6dd8:	97 01       	movw	r18, r14
    6dda:	26 0d       	add	r18, r6
    6ddc:	37 1d       	adc	r19, r7
    6dde:	48 1d       	adc	r20, r8
    6de0:	59 1d       	adc	r21, r9
    6de2:	69 96       	adiw	r28, 0x19	; 25
    6de4:	6c ac       	ldd	r6, Y+60	; 0x3c
    6de6:	7d ac       	ldd	r7, Y+61	; 0x3d
    6de8:	8e ac       	ldd	r8, Y+62	; 0x3e
    6dea:	9f ac       	ldd	r9, Y+63	; 0x3f
    6dec:	69 97       	sbiw	r28, 0x19	; 25
    6dee:	c4 01       	movw	r24, r8
    6df0:	aa 27       	eor	r26, r26
    6df2:	bb 27       	eor	r27, r27
    6df4:	28 0f       	add	r18, r24
    6df6:	39 1f       	adc	r19, r25
    6df8:	4a 1f       	adc	r20, r26
    6dfa:	5b 1f       	adc	r21, r27
    6dfc:	2e 15       	cp	r18, r14
    6dfe:	3f 05       	cpc	r19, r15
    6e00:	40 07       	cpc	r20, r16
    6e02:	51 07       	cpc	r21, r17
    6e04:	48 f4       	brcc	.+18     	; 0x6e18 <__udivdi3+0xbee>
    6e06:	e1 2c       	mov	r14, r1
    6e08:	f1 2c       	mov	r15, r1
    6e0a:	61 e0       	ldi	r22, 0x01	; 1
    6e0c:	06 2f       	mov	r16, r22
    6e0e:	11 2d       	mov	r17, r1
    6e10:	ae 0c       	add	r10, r14
    6e12:	bf 1c       	adc	r11, r15
    6e14:	c0 1e       	adc	r12, r16
    6e16:	d1 1e       	adc	r13, r17
    6e18:	ca 01       	movw	r24, r20
    6e1a:	aa 27       	eor	r26, r26
    6e1c:	bb 27       	eor	r27, r27
    6e1e:	bc 01       	movw	r22, r24
    6e20:	cd 01       	movw	r24, r26
    6e22:	6a 0d       	add	r22, r10
    6e24:	7b 1d       	adc	r23, r11
    6e26:	8c 1d       	adc	r24, r12
    6e28:	9d 1d       	adc	r25, r13
    6e2a:	69 8c       	ldd	r6, Y+25	; 0x19
    6e2c:	7a 8c       	ldd	r7, Y+26	; 0x1a
    6e2e:	8b 8c       	ldd	r8, Y+27	; 0x1b
    6e30:	9c 8c       	ldd	r9, Y+28	; 0x1c
    6e32:	66 16       	cp	r6, r22
    6e34:	77 06       	cpc	r7, r23
    6e36:	88 06       	cpc	r8, r24
    6e38:	99 06       	cpc	r9, r25
    6e3a:	40 f1       	brcs	.+80     	; 0x6e8c <__udivdi3+0xc62>
    6e3c:	66 15       	cp	r22, r6
    6e3e:	77 05       	cpc	r23, r7
    6e40:	88 05       	cpc	r24, r8
    6e42:	99 05       	cpc	r25, r9
    6e44:	09 f0       	breq	.+2      	; 0x6e48 <__udivdi3+0xc1e>
    6e46:	43 c0       	rjmp	.+134    	; 0x6ece <__udivdi3+0xca4>
    6e48:	d9 01       	movw	r26, r18
    6e4a:	99 27       	eor	r25, r25
    6e4c:	88 27       	eor	r24, r24
    6e4e:	69 96       	adiw	r28, 0x19	; 25
    6e50:	2c ad       	ldd	r18, Y+60	; 0x3c
    6e52:	3d ad       	ldd	r19, Y+61	; 0x3d
    6e54:	4e ad       	ldd	r20, Y+62	; 0x3e
    6e56:	5f ad       	ldd	r21, Y+63	; 0x3f
    6e58:	69 97       	sbiw	r28, 0x19	; 25
    6e5a:	40 70       	andi	r20, 0x00	; 0
    6e5c:	50 70       	andi	r21, 0x00	; 0
    6e5e:	82 0f       	add	r24, r18
    6e60:	93 1f       	adc	r25, r19
    6e62:	a4 1f       	adc	r26, r20
    6e64:	b5 1f       	adc	r27, r21
    6e66:	2d a5       	ldd	r18, Y+45	; 0x2d
    6e68:	3e a5       	ldd	r19, Y+46	; 0x2e
    6e6a:	4f a5       	ldd	r20, Y+47	; 0x2f
    6e6c:	58 a9       	ldd	r21, Y+48	; 0x30
    6e6e:	6e 96       	adiw	r28, 0x1e	; 30
    6e70:	0f ac       	ldd	r0, Y+63	; 0x3f
    6e72:	6e 97       	sbiw	r28, 0x1e	; 30
    6e74:	04 c0       	rjmp	.+8      	; 0x6e7e <__udivdi3+0xc54>
    6e76:	22 0f       	add	r18, r18
    6e78:	33 1f       	adc	r19, r19
    6e7a:	44 1f       	adc	r20, r20
    6e7c:	55 1f       	adc	r21, r21
    6e7e:	0a 94       	dec	r0
    6e80:	d2 f7       	brpl	.-12     	; 0x6e76 <__udivdi3+0xc4c>
    6e82:	28 17       	cp	r18, r24
    6e84:	39 07       	cpc	r19, r25
    6e86:	4a 07       	cpc	r20, r26
    6e88:	5b 07       	cpc	r21, r27
    6e8a:	08 f5       	brcc	.+66     	; 0x6ece <__udivdi3+0xca4>
    6e8c:	09 a9       	ldd	r16, Y+49	; 0x31
    6e8e:	1a a9       	ldd	r17, Y+50	; 0x32
    6e90:	2b a9       	ldd	r18, Y+51	; 0x33
    6e92:	3c a9       	ldd	r19, Y+52	; 0x34
    6e94:	01 50       	subi	r16, 0x01	; 1
    6e96:	10 40       	sbci	r17, 0x00	; 0
    6e98:	20 40       	sbci	r18, 0x00	; 0
    6e9a:	30 40       	sbci	r19, 0x00	; 0
    6e9c:	09 ab       	std	Y+49, r16	; 0x31
    6e9e:	1a ab       	std	Y+50, r17	; 0x32
    6ea0:	2b ab       	std	Y+51, r18	; 0x33
    6ea2:	3c ab       	std	Y+52, r19	; 0x34
    6ea4:	14 c0       	rjmp	.+40     	; 0x6ece <__udivdi3+0xca4>
    6ea6:	66 24       	eor	r6, r6
    6ea8:	77 24       	eor	r7, r7
    6eaa:	43 01       	movw	r8, r6
    6eac:	21 e0       	ldi	r18, 0x01	; 1
    6eae:	30 e0       	ldi	r19, 0x00	; 0
    6eb0:	40 e0       	ldi	r20, 0x00	; 0
    6eb2:	50 e0       	ldi	r21, 0x00	; 0
    6eb4:	29 ab       	std	Y+49, r18	; 0x31
    6eb6:	3a ab       	std	Y+50, r19	; 0x32
    6eb8:	4b ab       	std	Y+51, r20	; 0x33
    6eba:	5c ab       	std	Y+52, r21	; 0x34
    6ebc:	0b c0       	rjmp	.+22     	; 0x6ed4 <__udivdi3+0xcaa>
    6ebe:	66 24       	eor	r6, r6
    6ec0:	77 24       	eor	r7, r7
    6ec2:	43 01       	movw	r8, r6
    6ec4:	19 aa       	std	Y+49, r1	; 0x31
    6ec6:	1a aa       	std	Y+50, r1	; 0x32
    6ec8:	1b aa       	std	Y+51, r1	; 0x33
    6eca:	1c aa       	std	Y+52, r1	; 0x34
    6ecc:	03 c0       	rjmp	.+6      	; 0x6ed4 <__udivdi3+0xcaa>
    6ece:	66 24       	eor	r6, r6
    6ed0:	77 24       	eor	r7, r7
    6ed2:	43 01       	movw	r8, r6
    6ed4:	fe 01       	movw	r30, r28
    6ed6:	71 96       	adiw	r30, 0x11	; 17
    6ed8:	88 e0       	ldi	r24, 0x08	; 8
    6eda:	df 01       	movw	r26, r30
    6edc:	1d 92       	st	X+, r1
    6ede:	8a 95       	dec	r24
    6ee0:	e9 f7       	brne	.-6      	; 0x6edc <__udivdi3+0xcb2>
    6ee2:	a9 a8       	ldd	r10, Y+49	; 0x31
    6ee4:	ba a8       	ldd	r11, Y+50	; 0x32
    6ee6:	cb a8       	ldd	r12, Y+51	; 0x33
    6ee8:	dc a8       	ldd	r13, Y+52	; 0x34
    6eea:	a9 8a       	std	Y+17, r10	; 0x11
    6eec:	ba 8a       	std	Y+18, r11	; 0x12
    6eee:	cb 8a       	std	Y+19, r12	; 0x13
    6ef0:	dc 8a       	std	Y+20, r13	; 0x14
    6ef2:	6d 8a       	std	Y+21, r6	; 0x15
    6ef4:	7e 8a       	std	Y+22, r7	; 0x16
    6ef6:	8f 8a       	std	Y+23, r8	; 0x17
    6ef8:	98 8e       	std	Y+24, r9	; 0x18
    6efa:	29 a9       	ldd	r18, Y+49	; 0x31
    6efc:	3a 89       	ldd	r19, Y+18	; 0x12
    6efe:	4b 89       	ldd	r20, Y+19	; 0x13
    6f00:	5c 89       	ldd	r21, Y+20	; 0x14
    6f02:	66 2d       	mov	r22, r6
    6f04:	7e 89       	ldd	r23, Y+22	; 0x16
    6f06:	8f 89       	ldd	r24, Y+23	; 0x17
    6f08:	98 8d       	ldd	r25, Y+24	; 0x18
    6f0a:	c2 5a       	subi	r28, 0xA2	; 162
    6f0c:	df 4f       	sbci	r29, 0xFF	; 255
    6f0e:	e2 e1       	ldi	r30, 0x12	; 18
    6f10:	0c 94 c4 3f 	jmp	0x7f88	; 0x7f88 <__epilogue_restores__>

00006f14 <vfprintf>:
    6f14:	2f 92       	push	r2
    6f16:	3f 92       	push	r3
    6f18:	4f 92       	push	r4
    6f1a:	5f 92       	push	r5
    6f1c:	6f 92       	push	r6
    6f1e:	7f 92       	push	r7
    6f20:	8f 92       	push	r8
    6f22:	9f 92       	push	r9
    6f24:	af 92       	push	r10
    6f26:	bf 92       	push	r11
    6f28:	cf 92       	push	r12
    6f2a:	df 92       	push	r13
    6f2c:	ef 92       	push	r14
    6f2e:	ff 92       	push	r15
    6f30:	0f 93       	push	r16
    6f32:	1f 93       	push	r17
    6f34:	df 93       	push	r29
    6f36:	cf 93       	push	r28
    6f38:	cd b7       	in	r28, 0x3d	; 61
    6f3a:	de b7       	in	r29, 0x3e	; 62
    6f3c:	61 97       	sbiw	r28, 0x11	; 17
    6f3e:	cd bf       	out	0x3d, r28	; 61
    6f40:	de bf       	out	0x3e, r29	; 62
    6f42:	3c 01       	movw	r6, r24
    6f44:	6e 87       	std	Y+14, r22	; 0x0e
    6f46:	7f 87       	std	Y+15, r23	; 0x0f
    6f48:	6a 01       	movw	r12, r20
    6f4a:	fc 01       	movw	r30, r24
    6f4c:	16 82       	std	Z+6, r1	; 0x06
    6f4e:	17 82       	std	Z+7, r1	; 0x07
    6f50:	83 81       	ldd	r24, Z+3	; 0x03
    6f52:	81 fd       	sbrc	r24, 1
    6f54:	03 c0       	rjmp	.+6      	; 0x6f5c <vfprintf+0x48>
    6f56:	6f ef       	ldi	r22, 0xFF	; 255
    6f58:	7f ef       	ldi	r23, 0xFF	; 255
    6f5a:	6f c3       	rjmp	.+1758   	; 0x763a <vfprintf+0x726>
    6f5c:	9e 01       	movw	r18, r28
    6f5e:	2f 5f       	subi	r18, 0xFF	; 255
    6f60:	3f 4f       	sbci	r19, 0xFF	; 255
    6f62:	28 8b       	std	Y+16, r18	; 0x10
    6f64:	39 8b       	std	Y+17, r19	; 0x11
    6f66:	f3 01       	movw	r30, r6
    6f68:	23 81       	ldd	r18, Z+3	; 0x03
    6f6a:	ee 85       	ldd	r30, Y+14	; 0x0e
    6f6c:	ff 85       	ldd	r31, Y+15	; 0x0f
    6f6e:	23 fd       	sbrc	r18, 3
    6f70:	85 91       	lpm	r24, Z+
    6f72:	23 ff       	sbrs	r18, 3
    6f74:	81 91       	ld	r24, Z+
    6f76:	ee 87       	std	Y+14, r30	; 0x0e
    6f78:	ff 87       	std	Y+15, r31	; 0x0f
    6f7a:	88 23       	and	r24, r24
    6f7c:	09 f4       	brne	.+2      	; 0x6f80 <vfprintf+0x6c>
    6f7e:	5a c3       	rjmp	.+1716   	; 0x7634 <vfprintf+0x720>
    6f80:	85 32       	cpi	r24, 0x25	; 37
    6f82:	51 f4       	brne	.+20     	; 0x6f98 <vfprintf+0x84>
    6f84:	ee 85       	ldd	r30, Y+14	; 0x0e
    6f86:	ff 85       	ldd	r31, Y+15	; 0x0f
    6f88:	23 fd       	sbrc	r18, 3
    6f8a:	85 91       	lpm	r24, Z+
    6f8c:	23 ff       	sbrs	r18, 3
    6f8e:	81 91       	ld	r24, Z+
    6f90:	ee 87       	std	Y+14, r30	; 0x0e
    6f92:	ff 87       	std	Y+15, r31	; 0x0f
    6f94:	85 32       	cpi	r24, 0x25	; 37
    6f96:	29 f4       	brne	.+10     	; 0x6fa2 <vfprintf+0x8e>
    6f98:	90 e0       	ldi	r25, 0x00	; 0
    6f9a:	b3 01       	movw	r22, r6
    6f9c:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    6fa0:	e2 cf       	rjmp	.-60     	; 0x6f66 <vfprintf+0x52>
    6fa2:	98 2f       	mov	r25, r24
    6fa4:	10 e0       	ldi	r17, 0x00	; 0
    6fa6:	88 24       	eor	r8, r8
    6fa8:	99 24       	eor	r9, r9
    6faa:	10 32       	cpi	r17, 0x20	; 32
    6fac:	b0 f4       	brcc	.+44     	; 0x6fda <vfprintf+0xc6>
    6fae:	9b 32       	cpi	r25, 0x2B	; 43
    6fb0:	69 f0       	breq	.+26     	; 0x6fcc <vfprintf+0xb8>
    6fb2:	9c 32       	cpi	r25, 0x2C	; 44
    6fb4:	28 f4       	brcc	.+10     	; 0x6fc0 <vfprintf+0xac>
    6fb6:	90 32       	cpi	r25, 0x20	; 32
    6fb8:	51 f0       	breq	.+20     	; 0x6fce <vfprintf+0xba>
    6fba:	93 32       	cpi	r25, 0x23	; 35
    6fbc:	71 f4       	brne	.+28     	; 0x6fda <vfprintf+0xc6>
    6fbe:	0b c0       	rjmp	.+22     	; 0x6fd6 <vfprintf+0xc2>
    6fc0:	9d 32       	cpi	r25, 0x2D	; 45
    6fc2:	39 f0       	breq	.+14     	; 0x6fd2 <vfprintf+0xbe>
    6fc4:	90 33       	cpi	r25, 0x30	; 48
    6fc6:	49 f4       	brne	.+18     	; 0x6fda <vfprintf+0xc6>
    6fc8:	11 60       	ori	r17, 0x01	; 1
    6fca:	28 c0       	rjmp	.+80     	; 0x701c <vfprintf+0x108>
    6fcc:	12 60       	ori	r17, 0x02	; 2
    6fce:	14 60       	ori	r17, 0x04	; 4
    6fd0:	25 c0       	rjmp	.+74     	; 0x701c <vfprintf+0x108>
    6fd2:	18 60       	ori	r17, 0x08	; 8
    6fd4:	23 c0       	rjmp	.+70     	; 0x701c <vfprintf+0x108>
    6fd6:	10 61       	ori	r17, 0x10	; 16
    6fd8:	21 c0       	rjmp	.+66     	; 0x701c <vfprintf+0x108>
    6fda:	17 fd       	sbrc	r17, 7
    6fdc:	2a c0       	rjmp	.+84     	; 0x7032 <vfprintf+0x11e>
    6fde:	89 2f       	mov	r24, r25
    6fe0:	80 53       	subi	r24, 0x30	; 48
    6fe2:	8a 30       	cpi	r24, 0x0A	; 10
    6fe4:	78 f4       	brcc	.+30     	; 0x7004 <vfprintf+0xf0>
    6fe6:	16 ff       	sbrs	r17, 6
    6fe8:	06 c0       	rjmp	.+12     	; 0x6ff6 <vfprintf+0xe2>
    6fea:	fa e0       	ldi	r31, 0x0A	; 10
    6fec:	9f 9e       	mul	r9, r31
    6fee:	90 2c       	mov	r9, r0
    6ff0:	11 24       	eor	r1, r1
    6ff2:	98 0e       	add	r9, r24
    6ff4:	13 c0       	rjmp	.+38     	; 0x701c <vfprintf+0x108>
    6ff6:	3a e0       	ldi	r19, 0x0A	; 10
    6ff8:	83 9e       	mul	r8, r19
    6ffa:	80 2c       	mov	r8, r0
    6ffc:	11 24       	eor	r1, r1
    6ffe:	88 0e       	add	r8, r24
    7000:	10 62       	ori	r17, 0x20	; 32
    7002:	0c c0       	rjmp	.+24     	; 0x701c <vfprintf+0x108>
    7004:	9e 32       	cpi	r25, 0x2E	; 46
    7006:	21 f4       	brne	.+8      	; 0x7010 <vfprintf+0xfc>
    7008:	16 fd       	sbrc	r17, 6
    700a:	14 c3       	rjmp	.+1576   	; 0x7634 <vfprintf+0x720>
    700c:	10 64       	ori	r17, 0x40	; 64
    700e:	06 c0       	rjmp	.+12     	; 0x701c <vfprintf+0x108>
    7010:	9c 36       	cpi	r25, 0x6C	; 108
    7012:	11 f4       	brne	.+4      	; 0x7018 <vfprintf+0x104>
    7014:	10 68       	ori	r17, 0x80	; 128
    7016:	02 c0       	rjmp	.+4      	; 0x701c <vfprintf+0x108>
    7018:	98 36       	cpi	r25, 0x68	; 104
    701a:	59 f4       	brne	.+22     	; 0x7032 <vfprintf+0x11e>
    701c:	ee 85       	ldd	r30, Y+14	; 0x0e
    701e:	ff 85       	ldd	r31, Y+15	; 0x0f
    7020:	23 fd       	sbrc	r18, 3
    7022:	95 91       	lpm	r25, Z+
    7024:	23 ff       	sbrs	r18, 3
    7026:	91 91       	ld	r25, Z+
    7028:	ee 87       	std	Y+14, r30	; 0x0e
    702a:	ff 87       	std	Y+15, r31	; 0x0f
    702c:	99 23       	and	r25, r25
    702e:	09 f0       	breq	.+2      	; 0x7032 <vfprintf+0x11e>
    7030:	bc cf       	rjmp	.-136    	; 0x6faa <vfprintf+0x96>
    7032:	89 2f       	mov	r24, r25
    7034:	85 54       	subi	r24, 0x45	; 69
    7036:	83 30       	cpi	r24, 0x03	; 3
    7038:	20 f4       	brcc	.+8      	; 0x7042 <vfprintf+0x12e>
    703a:	81 2f       	mov	r24, r17
    703c:	80 61       	ori	r24, 0x10	; 16
    703e:	90 5e       	subi	r25, 0xE0	; 224
    7040:	07 c0       	rjmp	.+14     	; 0x7050 <vfprintf+0x13c>
    7042:	89 2f       	mov	r24, r25
    7044:	85 56       	subi	r24, 0x65	; 101
    7046:	83 30       	cpi	r24, 0x03	; 3
    7048:	08 f0       	brcs	.+2      	; 0x704c <vfprintf+0x138>
    704a:	9f c1       	rjmp	.+830    	; 0x738a <vfprintf+0x476>
    704c:	81 2f       	mov	r24, r17
    704e:	8f 7e       	andi	r24, 0xEF	; 239
    7050:	86 fd       	sbrc	r24, 6
    7052:	02 c0       	rjmp	.+4      	; 0x7058 <vfprintf+0x144>
    7054:	76 e0       	ldi	r23, 0x06	; 6
    7056:	97 2e       	mov	r9, r23
    7058:	6f e3       	ldi	r22, 0x3F	; 63
    705a:	f6 2e       	mov	r15, r22
    705c:	f8 22       	and	r15, r24
    705e:	95 36       	cpi	r25, 0x65	; 101
    7060:	19 f4       	brne	.+6      	; 0x7068 <vfprintf+0x154>
    7062:	f0 e4       	ldi	r31, 0x40	; 64
    7064:	ff 2a       	or	r15, r31
    7066:	07 c0       	rjmp	.+14     	; 0x7076 <vfprintf+0x162>
    7068:	96 36       	cpi	r25, 0x66	; 102
    706a:	19 f4       	brne	.+6      	; 0x7072 <vfprintf+0x15e>
    706c:	20 e8       	ldi	r18, 0x80	; 128
    706e:	f2 2a       	or	r15, r18
    7070:	02 c0       	rjmp	.+4      	; 0x7076 <vfprintf+0x162>
    7072:	91 10       	cpse	r9, r1
    7074:	9a 94       	dec	r9
    7076:	f7 fe       	sbrs	r15, 7
    7078:	0a c0       	rjmp	.+20     	; 0x708e <vfprintf+0x17a>
    707a:	3b e3       	ldi	r19, 0x3B	; 59
    707c:	39 15       	cp	r19, r9
    707e:	18 f4       	brcc	.+6      	; 0x7086 <vfprintf+0x172>
    7080:	5c e3       	ldi	r21, 0x3C	; 60
    7082:	b5 2e       	mov	r11, r21
    7084:	02 c0       	rjmp	.+4      	; 0x708a <vfprintf+0x176>
    7086:	b9 2c       	mov	r11, r9
    7088:	b3 94       	inc	r11
    708a:	27 e0       	ldi	r18, 0x07	; 7
    708c:	09 c0       	rjmp	.+18     	; 0x70a0 <vfprintf+0x18c>
    708e:	47 e0       	ldi	r20, 0x07	; 7
    7090:	49 15       	cp	r20, r9
    7092:	20 f4       	brcc	.+8      	; 0x709c <vfprintf+0x188>
    7094:	bb 24       	eor	r11, r11
    7096:	47 e0       	ldi	r20, 0x07	; 7
    7098:	94 2e       	mov	r9, r20
    709a:	f7 cf       	rjmp	.-18     	; 0x708a <vfprintf+0x176>
    709c:	29 2d       	mov	r18, r9
    709e:	bb 24       	eor	r11, r11
    70a0:	c6 01       	movw	r24, r12
    70a2:	04 96       	adiw	r24, 0x04	; 4
    70a4:	8c 87       	std	Y+12, r24	; 0x0c
    70a6:	9d 87       	std	Y+13, r25	; 0x0d
    70a8:	f6 01       	movw	r30, r12
    70aa:	60 81       	ld	r22, Z
    70ac:	71 81       	ldd	r23, Z+1	; 0x01
    70ae:	82 81       	ldd	r24, Z+2	; 0x02
    70b0:	93 81       	ldd	r25, Z+3	; 0x03
    70b2:	ae 01       	movw	r20, r28
    70b4:	4f 5f       	subi	r20, 0xFF	; 255
    70b6:	5f 4f       	sbci	r21, 0xFF	; 255
    70b8:	0b 2d       	mov	r16, r11
    70ba:	0e 94 6b 41 	call	0x82d6	; 0x82d6 <__ftoa_engine>
    70be:	6c 01       	movw	r12, r24
    70c0:	09 81       	ldd	r16, Y+1	; 0x01
    70c2:	20 2e       	mov	r2, r16
    70c4:	33 24       	eor	r3, r3
    70c6:	00 ff       	sbrs	r16, 0
    70c8:	04 c0       	rjmp	.+8      	; 0x70d2 <vfprintf+0x1be>
    70ca:	03 fd       	sbrc	r16, 3
    70cc:	02 c0       	rjmp	.+4      	; 0x70d2 <vfprintf+0x1be>
    70ce:	1d e2       	ldi	r17, 0x2D	; 45
    70d0:	09 c0       	rjmp	.+18     	; 0x70e4 <vfprintf+0x1d0>
    70d2:	f1 fe       	sbrs	r15, 1
    70d4:	02 c0       	rjmp	.+4      	; 0x70da <vfprintf+0x1c6>
    70d6:	1b e2       	ldi	r17, 0x2B	; 43
    70d8:	05 c0       	rjmp	.+10     	; 0x70e4 <vfprintf+0x1d0>
    70da:	f2 fc       	sbrc	r15, 2
    70dc:	02 c0       	rjmp	.+4      	; 0x70e2 <vfprintf+0x1ce>
    70de:	10 e0       	ldi	r17, 0x00	; 0
    70e0:	01 c0       	rjmp	.+2      	; 0x70e4 <vfprintf+0x1d0>
    70e2:	10 e2       	ldi	r17, 0x20	; 32
    70e4:	c1 01       	movw	r24, r2
    70e6:	8c 70       	andi	r24, 0x0C	; 12
    70e8:	90 70       	andi	r25, 0x00	; 0
    70ea:	89 2b       	or	r24, r25
    70ec:	b9 f1       	breq	.+110    	; 0x715c <vfprintf+0x248>
    70ee:	11 23       	and	r17, r17
    70f0:	11 f4       	brne	.+4      	; 0x70f6 <vfprintf+0x1e2>
    70f2:	83 e0       	ldi	r24, 0x03	; 3
    70f4:	01 c0       	rjmp	.+2      	; 0x70f8 <vfprintf+0x1e4>
    70f6:	84 e0       	ldi	r24, 0x04	; 4
    70f8:	88 15       	cp	r24, r8
    70fa:	10 f0       	brcs	.+4      	; 0x7100 <vfprintf+0x1ec>
    70fc:	88 24       	eor	r8, r8
    70fe:	0a c0       	rjmp	.+20     	; 0x7114 <vfprintf+0x200>
    7100:	88 1a       	sub	r8, r24
    7102:	f3 fc       	sbrc	r15, 3
    7104:	07 c0       	rjmp	.+14     	; 0x7114 <vfprintf+0x200>
    7106:	80 e2       	ldi	r24, 0x20	; 32
    7108:	90 e0       	ldi	r25, 0x00	; 0
    710a:	b3 01       	movw	r22, r6
    710c:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    7110:	8a 94       	dec	r8
    7112:	c9 f7       	brne	.-14     	; 0x7106 <vfprintf+0x1f2>
    7114:	11 23       	and	r17, r17
    7116:	29 f0       	breq	.+10     	; 0x7122 <vfprintf+0x20e>
    7118:	81 2f       	mov	r24, r17
    711a:	90 e0       	ldi	r25, 0x00	; 0
    711c:	b3 01       	movw	r22, r6
    711e:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    7122:	23 fe       	sbrs	r2, 3
    7124:	03 c0       	rjmp	.+6      	; 0x712c <vfprintf+0x218>
    7126:	03 e3       	ldi	r16, 0x33	; 51
    7128:	12 e0       	ldi	r17, 0x02	; 2
    712a:	0e c0       	rjmp	.+28     	; 0x7148 <vfprintf+0x234>
    712c:	07 e3       	ldi	r16, 0x37	; 55
    712e:	12 e0       	ldi	r17, 0x02	; 2
    7130:	0b c0       	rjmp	.+22     	; 0x7148 <vfprintf+0x234>
    7132:	e1 14       	cp	r14, r1
    7134:	f1 04       	cpc	r15, r1
    7136:	09 f0       	breq	.+2      	; 0x713a <vfprintf+0x226>
    7138:	80 52       	subi	r24, 0x20	; 32
    713a:	90 e0       	ldi	r25, 0x00	; 0
    713c:	b3 01       	movw	r22, r6
    713e:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    7142:	0f 5f       	subi	r16, 0xFF	; 255
    7144:	1f 4f       	sbci	r17, 0xFF	; 255
    7146:	05 c0       	rjmp	.+10     	; 0x7152 <vfprintf+0x23e>
    7148:	ef 2c       	mov	r14, r15
    714a:	ff 24       	eor	r15, r15
    714c:	f0 e1       	ldi	r31, 0x10	; 16
    714e:	ef 22       	and	r14, r31
    7150:	ff 24       	eor	r15, r15
    7152:	f8 01       	movw	r30, r16
    7154:	84 91       	lpm	r24, Z+
    7156:	88 23       	and	r24, r24
    7158:	61 f7       	brne	.-40     	; 0x7132 <vfprintf+0x21e>
    715a:	14 c1       	rjmp	.+552    	; 0x7384 <vfprintf+0x470>
    715c:	f7 fe       	sbrs	r15, 7
    715e:	12 c0       	rjmp	.+36     	; 0x7184 <vfprintf+0x270>
    7160:	bc 0c       	add	r11, r12
    7162:	24 fe       	sbrs	r2, 4
    7164:	04 c0       	rjmp	.+8      	; 0x716e <vfprintf+0x25a>
    7166:	8a 81       	ldd	r24, Y+2	; 0x02
    7168:	81 33       	cpi	r24, 0x31	; 49
    716a:	09 f4       	brne	.+2      	; 0x716e <vfprintf+0x25a>
    716c:	ba 94       	dec	r11
    716e:	1b 14       	cp	r1, r11
    7170:	1c f0       	brlt	.+6      	; 0x7178 <vfprintf+0x264>
    7172:	bb 24       	eor	r11, r11
    7174:	b3 94       	inc	r11
    7176:	2d c0       	rjmp	.+90     	; 0x71d2 <vfprintf+0x2be>
    7178:	f8 e0       	ldi	r31, 0x08	; 8
    717a:	fb 15       	cp	r31, r11
    717c:	50 f5       	brcc	.+84     	; 0x71d2 <vfprintf+0x2be>
    717e:	38 e0       	ldi	r19, 0x08	; 8
    7180:	b3 2e       	mov	r11, r19
    7182:	27 c0       	rjmp	.+78     	; 0x71d2 <vfprintf+0x2be>
    7184:	f6 fc       	sbrc	r15, 6
    7186:	25 c0       	rjmp	.+74     	; 0x71d2 <vfprintf+0x2be>
    7188:	89 2d       	mov	r24, r9
    718a:	90 e0       	ldi	r25, 0x00	; 0
    718c:	8c 15       	cp	r24, r12
    718e:	9d 05       	cpc	r25, r13
    7190:	4c f0       	brlt	.+18     	; 0x71a4 <vfprintf+0x290>
    7192:	2c ef       	ldi	r18, 0xFC	; 252
    7194:	c2 16       	cp	r12, r18
    7196:	2f ef       	ldi	r18, 0xFF	; 255
    7198:	d2 06       	cpc	r13, r18
    719a:	24 f0       	brlt	.+8      	; 0x71a4 <vfprintf+0x290>
    719c:	30 e8       	ldi	r19, 0x80	; 128
    719e:	f3 2a       	or	r15, r19
    71a0:	01 c0       	rjmp	.+2      	; 0x71a4 <vfprintf+0x290>
    71a2:	9a 94       	dec	r9
    71a4:	99 20       	and	r9, r9
    71a6:	49 f0       	breq	.+18     	; 0x71ba <vfprintf+0x2a6>
    71a8:	e2 e0       	ldi	r30, 0x02	; 2
    71aa:	f0 e0       	ldi	r31, 0x00	; 0
    71ac:	ec 0f       	add	r30, r28
    71ae:	fd 1f       	adc	r31, r29
    71b0:	e9 0d       	add	r30, r9
    71b2:	f1 1d       	adc	r31, r1
    71b4:	80 81       	ld	r24, Z
    71b6:	80 33       	cpi	r24, 0x30	; 48
    71b8:	a1 f3       	breq	.-24     	; 0x71a2 <vfprintf+0x28e>
    71ba:	f7 fe       	sbrs	r15, 7
    71bc:	0a c0       	rjmp	.+20     	; 0x71d2 <vfprintf+0x2be>
    71be:	b9 2c       	mov	r11, r9
    71c0:	b3 94       	inc	r11
    71c2:	89 2d       	mov	r24, r9
    71c4:	90 e0       	ldi	r25, 0x00	; 0
    71c6:	c8 16       	cp	r12, r24
    71c8:	d9 06       	cpc	r13, r25
    71ca:	14 f0       	brlt	.+4      	; 0x71d0 <vfprintf+0x2bc>
    71cc:	99 24       	eor	r9, r9
    71ce:	01 c0       	rjmp	.+2      	; 0x71d2 <vfprintf+0x2be>
    71d0:	9c 18       	sub	r9, r12
    71d2:	f7 fc       	sbrc	r15, 7
    71d4:	03 c0       	rjmp	.+6      	; 0x71dc <vfprintf+0x2c8>
    71d6:	25 e0       	ldi	r18, 0x05	; 5
    71d8:	30 e0       	ldi	r19, 0x00	; 0
    71da:	09 c0       	rjmp	.+18     	; 0x71ee <vfprintf+0x2da>
    71dc:	1c 14       	cp	r1, r12
    71de:	1d 04       	cpc	r1, r13
    71e0:	1c f0       	brlt	.+6      	; 0x71e8 <vfprintf+0x2d4>
    71e2:	21 e0       	ldi	r18, 0x01	; 1
    71e4:	30 e0       	ldi	r19, 0x00	; 0
    71e6:	03 c0       	rjmp	.+6      	; 0x71ee <vfprintf+0x2da>
    71e8:	96 01       	movw	r18, r12
    71ea:	2f 5f       	subi	r18, 0xFF	; 255
    71ec:	3f 4f       	sbci	r19, 0xFF	; 255
    71ee:	11 23       	and	r17, r17
    71f0:	11 f0       	breq	.+4      	; 0x71f6 <vfprintf+0x2e2>
    71f2:	2f 5f       	subi	r18, 0xFF	; 255
    71f4:	3f 4f       	sbci	r19, 0xFF	; 255
    71f6:	99 20       	and	r9, r9
    71f8:	29 f0       	breq	.+10     	; 0x7204 <vfprintf+0x2f0>
    71fa:	89 2d       	mov	r24, r9
    71fc:	90 e0       	ldi	r25, 0x00	; 0
    71fe:	01 96       	adiw	r24, 0x01	; 1
    7200:	28 0f       	add	r18, r24
    7202:	39 1f       	adc	r19, r25
    7204:	88 2d       	mov	r24, r8
    7206:	90 e0       	ldi	r25, 0x00	; 0
    7208:	28 17       	cp	r18, r24
    720a:	39 07       	cpc	r19, r25
    720c:	14 f0       	brlt	.+4      	; 0x7212 <vfprintf+0x2fe>
    720e:	88 24       	eor	r8, r8
    7210:	01 c0       	rjmp	.+2      	; 0x7214 <vfprintf+0x300>
    7212:	82 1a       	sub	r8, r18
    7214:	4f 2c       	mov	r4, r15
    7216:	55 24       	eor	r5, r5
    7218:	c2 01       	movw	r24, r4
    721a:	89 70       	andi	r24, 0x09	; 9
    721c:	90 70       	andi	r25, 0x00	; 0
    721e:	89 2b       	or	r24, r25
    7220:	39 f0       	breq	.+14     	; 0x7230 <vfprintf+0x31c>
    7222:	08 c0       	rjmp	.+16     	; 0x7234 <vfprintf+0x320>
    7224:	80 e2       	ldi	r24, 0x20	; 32
    7226:	90 e0       	ldi	r25, 0x00	; 0
    7228:	b3 01       	movw	r22, r6
    722a:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    722e:	8a 94       	dec	r8
    7230:	88 20       	and	r8, r8
    7232:	c1 f7       	brne	.-16     	; 0x7224 <vfprintf+0x310>
    7234:	11 23       	and	r17, r17
    7236:	29 f0       	breq	.+10     	; 0x7242 <vfprintf+0x32e>
    7238:	81 2f       	mov	r24, r17
    723a:	90 e0       	ldi	r25, 0x00	; 0
    723c:	b3 01       	movw	r22, r6
    723e:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    7242:	43 fe       	sbrs	r4, 3
    7244:	07 c0       	rjmp	.+14     	; 0x7254 <vfprintf+0x340>
    7246:	08 c0       	rjmp	.+16     	; 0x7258 <vfprintf+0x344>
    7248:	80 e3       	ldi	r24, 0x30	; 48
    724a:	90 e0       	ldi	r25, 0x00	; 0
    724c:	b3 01       	movw	r22, r6
    724e:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    7252:	8a 94       	dec	r8
    7254:	88 20       	and	r8, r8
    7256:	c1 f7       	brne	.-16     	; 0x7248 <vfprintf+0x334>
    7258:	f7 fe       	sbrs	r15, 7
    725a:	46 c0       	rjmp	.+140    	; 0x72e8 <vfprintf+0x3d4>
    725c:	86 01       	movw	r16, r12
    725e:	d7 fe       	sbrs	r13, 7
    7260:	02 c0       	rjmp	.+4      	; 0x7266 <vfprintf+0x352>
    7262:	00 e0       	ldi	r16, 0x00	; 0
    7264:	10 e0       	ldi	r17, 0x00	; 0
    7266:	76 01       	movw	r14, r12
    7268:	08 94       	sec
    726a:	e1 1c       	adc	r14, r1
    726c:	f1 1c       	adc	r15, r1
    726e:	e0 1a       	sub	r14, r16
    7270:	f1 0a       	sbc	r15, r17
    7272:	41 e0       	ldi	r20, 0x01	; 1
    7274:	50 e0       	ldi	r21, 0x00	; 0
    7276:	4c 0f       	add	r20, r28
    7278:	5d 1f       	adc	r21, r29
    727a:	e4 0e       	add	r14, r20
    727c:	f5 1e       	adc	r15, r21
    727e:	26 01       	movw	r4, r12
    7280:	4b 18       	sub	r4, r11
    7282:	51 08       	sbc	r5, r1
    7284:	89 2d       	mov	r24, r9
    7286:	90 e0       	ldi	r25, 0x00	; 0
    7288:	aa 24       	eor	r10, r10
    728a:	bb 24       	eor	r11, r11
    728c:	a8 1a       	sub	r10, r24
    728e:	b9 0a       	sbc	r11, r25
    7290:	5f ef       	ldi	r21, 0xFF	; 255
    7292:	0f 3f       	cpi	r16, 0xFF	; 255
    7294:	15 07       	cpc	r17, r21
    7296:	29 f4       	brne	.+10     	; 0x72a2 <vfprintf+0x38e>
    7298:	8e e2       	ldi	r24, 0x2E	; 46
    729a:	90 e0       	ldi	r25, 0x00	; 0
    729c:	b3 01       	movw	r22, r6
    729e:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    72a2:	c0 16       	cp	r12, r16
    72a4:	d1 06       	cpc	r13, r17
    72a6:	34 f0       	brlt	.+12     	; 0x72b4 <vfprintf+0x3a0>
    72a8:	40 16       	cp	r4, r16
    72aa:	51 06       	cpc	r5, r17
    72ac:	1c f4       	brge	.+6      	; 0x72b4 <vfprintf+0x3a0>
    72ae:	f7 01       	movw	r30, r14
    72b0:	80 81       	ld	r24, Z
    72b2:	01 c0       	rjmp	.+2      	; 0x72b6 <vfprintf+0x3a2>
    72b4:	80 e3       	ldi	r24, 0x30	; 48
    72b6:	01 50       	subi	r16, 0x01	; 1
    72b8:	10 40       	sbci	r17, 0x00	; 0
    72ba:	08 94       	sec
    72bc:	e1 1c       	adc	r14, r1
    72be:	f1 1c       	adc	r15, r1
    72c0:	0a 15       	cp	r16, r10
    72c2:	1b 05       	cpc	r17, r11
    72c4:	2c f0       	brlt	.+10     	; 0x72d0 <vfprintf+0x3bc>
    72c6:	90 e0       	ldi	r25, 0x00	; 0
    72c8:	b3 01       	movw	r22, r6
    72ca:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    72ce:	e0 cf       	rjmp	.-64     	; 0x7290 <vfprintf+0x37c>
    72d0:	0c 15       	cp	r16, r12
    72d2:	1d 05       	cpc	r17, r13
    72d4:	39 f4       	brne	.+14     	; 0x72e4 <vfprintf+0x3d0>
    72d6:	9a 81       	ldd	r25, Y+2	; 0x02
    72d8:	96 33       	cpi	r25, 0x36	; 54
    72da:	18 f4       	brcc	.+6      	; 0x72e2 <vfprintf+0x3ce>
    72dc:	95 33       	cpi	r25, 0x35	; 53
    72de:	11 f4       	brne	.+4      	; 0x72e4 <vfprintf+0x3d0>
    72e0:	24 fe       	sbrs	r2, 4
    72e2:	81 e3       	ldi	r24, 0x31	; 49
    72e4:	90 e0       	ldi	r25, 0x00	; 0
    72e6:	4b c0       	rjmp	.+150    	; 0x737e <vfprintf+0x46a>
    72e8:	8a 81       	ldd	r24, Y+2	; 0x02
    72ea:	81 33       	cpi	r24, 0x31	; 49
    72ec:	09 f0       	breq	.+2      	; 0x72f0 <vfprintf+0x3dc>
    72ee:	0f 7e       	andi	r16, 0xEF	; 239
    72f0:	90 e0       	ldi	r25, 0x00	; 0
    72f2:	b3 01       	movw	r22, r6
    72f4:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    72f8:	99 20       	and	r9, r9
    72fa:	a1 f0       	breq	.+40     	; 0x7324 <vfprintf+0x410>
    72fc:	8e e2       	ldi	r24, 0x2E	; 46
    72fe:	90 e0       	ldi	r25, 0x00	; 0
    7300:	b3 01       	movw	r22, r6
    7302:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    7306:	12 e0       	ldi	r17, 0x02	; 2
    7308:	e1 e0       	ldi	r30, 0x01	; 1
    730a:	f0 e0       	ldi	r31, 0x00	; 0
    730c:	ec 0f       	add	r30, r28
    730e:	fd 1f       	adc	r31, r29
    7310:	e1 0f       	add	r30, r17
    7312:	f1 1d       	adc	r31, r1
    7314:	1f 5f       	subi	r17, 0xFF	; 255
    7316:	80 81       	ld	r24, Z
    7318:	90 e0       	ldi	r25, 0x00	; 0
    731a:	b3 01       	movw	r22, r6
    731c:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    7320:	9a 94       	dec	r9
    7322:	91 f7       	brne	.-28     	; 0x7308 <vfprintf+0x3f4>
    7324:	44 fc       	sbrc	r4, 4
    7326:	03 c0       	rjmp	.+6      	; 0x732e <vfprintf+0x41a>
    7328:	85 e6       	ldi	r24, 0x65	; 101
    732a:	90 e0       	ldi	r25, 0x00	; 0
    732c:	02 c0       	rjmp	.+4      	; 0x7332 <vfprintf+0x41e>
    732e:	85 e4       	ldi	r24, 0x45	; 69
    7330:	90 e0       	ldi	r25, 0x00	; 0
    7332:	b3 01       	movw	r22, r6
    7334:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    7338:	d7 fc       	sbrc	r13, 7
    733a:	05 c0       	rjmp	.+10     	; 0x7346 <vfprintf+0x432>
    733c:	c1 14       	cp	r12, r1
    733e:	d1 04       	cpc	r13, r1
    7340:	41 f4       	brne	.+16     	; 0x7352 <vfprintf+0x43e>
    7342:	04 ff       	sbrs	r16, 4
    7344:	06 c0       	rjmp	.+12     	; 0x7352 <vfprintf+0x43e>
    7346:	d0 94       	com	r13
    7348:	c1 94       	neg	r12
    734a:	d1 08       	sbc	r13, r1
    734c:	d3 94       	inc	r13
    734e:	8d e2       	ldi	r24, 0x2D	; 45
    7350:	01 c0       	rjmp	.+2      	; 0x7354 <vfprintf+0x440>
    7352:	8b e2       	ldi	r24, 0x2B	; 43
    7354:	90 e0       	ldi	r25, 0x00	; 0
    7356:	b3 01       	movw	r22, r6
    7358:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    735c:	80 e3       	ldi	r24, 0x30	; 48
    735e:	05 c0       	rjmp	.+10     	; 0x736a <vfprintf+0x456>
    7360:	8f 5f       	subi	r24, 0xFF	; 255
    7362:	26 ef       	ldi	r18, 0xF6	; 246
    7364:	3f ef       	ldi	r19, 0xFF	; 255
    7366:	c2 0e       	add	r12, r18
    7368:	d3 1e       	adc	r13, r19
    736a:	3a e0       	ldi	r19, 0x0A	; 10
    736c:	c3 16       	cp	r12, r19
    736e:	d1 04       	cpc	r13, r1
    7370:	bc f7       	brge	.-18     	; 0x7360 <vfprintf+0x44c>
    7372:	90 e0       	ldi	r25, 0x00	; 0
    7374:	b3 01       	movw	r22, r6
    7376:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    737a:	c6 01       	movw	r24, r12
    737c:	c0 96       	adiw	r24, 0x30	; 48
    737e:	b3 01       	movw	r22, r6
    7380:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    7384:	cc 84       	ldd	r12, Y+12	; 0x0c
    7386:	dd 84       	ldd	r13, Y+13	; 0x0d
    7388:	52 c1       	rjmp	.+676    	; 0x762e <vfprintf+0x71a>
    738a:	93 36       	cpi	r25, 0x63	; 99
    738c:	31 f0       	breq	.+12     	; 0x739a <vfprintf+0x486>
    738e:	93 37       	cpi	r25, 0x73	; 115
    7390:	99 f0       	breq	.+38     	; 0x73b8 <vfprintf+0x4a4>
    7392:	93 35       	cpi	r25, 0x53	; 83
    7394:	09 f0       	breq	.+2      	; 0x7398 <vfprintf+0x484>
    7396:	59 c0       	rjmp	.+178    	; 0x744a <vfprintf+0x536>
    7398:	23 c0       	rjmp	.+70     	; 0x73e0 <vfprintf+0x4cc>
    739a:	f6 01       	movw	r30, r12
    739c:	80 81       	ld	r24, Z
    739e:	89 83       	std	Y+1, r24	; 0x01
    73a0:	5e 01       	movw	r10, r28
    73a2:	08 94       	sec
    73a4:	a1 1c       	adc	r10, r1
    73a6:	b1 1c       	adc	r11, r1
    73a8:	22 e0       	ldi	r18, 0x02	; 2
    73aa:	30 e0       	ldi	r19, 0x00	; 0
    73ac:	c2 0e       	add	r12, r18
    73ae:	d3 1e       	adc	r13, r19
    73b0:	21 e0       	ldi	r18, 0x01	; 1
    73b2:	e2 2e       	mov	r14, r18
    73b4:	f1 2c       	mov	r15, r1
    73b6:	12 c0       	rjmp	.+36     	; 0x73dc <vfprintf+0x4c8>
    73b8:	f6 01       	movw	r30, r12
    73ba:	a0 80       	ld	r10, Z
    73bc:	b1 80       	ldd	r11, Z+1	; 0x01
    73be:	16 fd       	sbrc	r17, 6
    73c0:	03 c0       	rjmp	.+6      	; 0x73c8 <vfprintf+0x4b4>
    73c2:	6f ef       	ldi	r22, 0xFF	; 255
    73c4:	7f ef       	ldi	r23, 0xFF	; 255
    73c6:	02 c0       	rjmp	.+4      	; 0x73cc <vfprintf+0x4b8>
    73c8:	69 2d       	mov	r22, r9
    73ca:	70 e0       	ldi	r23, 0x00	; 0
    73cc:	22 e0       	ldi	r18, 0x02	; 2
    73ce:	30 e0       	ldi	r19, 0x00	; 0
    73d0:	c2 0e       	add	r12, r18
    73d2:	d3 1e       	adc	r13, r19
    73d4:	c5 01       	movw	r24, r10
    73d6:	0e 94 6e 42 	call	0x84dc	; 0x84dc <strnlen>
    73da:	7c 01       	movw	r14, r24
    73dc:	1f 77       	andi	r17, 0x7F	; 127
    73de:	13 c0       	rjmp	.+38     	; 0x7406 <vfprintf+0x4f2>
    73e0:	f6 01       	movw	r30, r12
    73e2:	a0 80       	ld	r10, Z
    73e4:	b1 80       	ldd	r11, Z+1	; 0x01
    73e6:	16 fd       	sbrc	r17, 6
    73e8:	03 c0       	rjmp	.+6      	; 0x73f0 <vfprintf+0x4dc>
    73ea:	6f ef       	ldi	r22, 0xFF	; 255
    73ec:	7f ef       	ldi	r23, 0xFF	; 255
    73ee:	02 c0       	rjmp	.+4      	; 0x73f4 <vfprintf+0x4e0>
    73f0:	69 2d       	mov	r22, r9
    73f2:	70 e0       	ldi	r23, 0x00	; 0
    73f4:	22 e0       	ldi	r18, 0x02	; 2
    73f6:	30 e0       	ldi	r19, 0x00	; 0
    73f8:	c2 0e       	add	r12, r18
    73fa:	d3 1e       	adc	r13, r19
    73fc:	c5 01       	movw	r24, r10
    73fe:	0e 94 63 42 	call	0x84c6	; 0x84c6 <strnlen_P>
    7402:	7c 01       	movw	r14, r24
    7404:	10 68       	ori	r17, 0x80	; 128
    7406:	13 ff       	sbrs	r17, 3
    7408:	07 c0       	rjmp	.+14     	; 0x7418 <vfprintf+0x504>
    740a:	1b c0       	rjmp	.+54     	; 0x7442 <vfprintf+0x52e>
    740c:	80 e2       	ldi	r24, 0x20	; 32
    740e:	90 e0       	ldi	r25, 0x00	; 0
    7410:	b3 01       	movw	r22, r6
    7412:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    7416:	8a 94       	dec	r8
    7418:	88 2d       	mov	r24, r8
    741a:	90 e0       	ldi	r25, 0x00	; 0
    741c:	e8 16       	cp	r14, r24
    741e:	f9 06       	cpc	r15, r25
    7420:	a8 f3       	brcs	.-22     	; 0x740c <vfprintf+0x4f8>
    7422:	0f c0       	rjmp	.+30     	; 0x7442 <vfprintf+0x52e>
    7424:	f5 01       	movw	r30, r10
    7426:	17 fd       	sbrc	r17, 7
    7428:	85 91       	lpm	r24, Z+
    742a:	17 ff       	sbrs	r17, 7
    742c:	81 91       	ld	r24, Z+
    742e:	5f 01       	movw	r10, r30
    7430:	90 e0       	ldi	r25, 0x00	; 0
    7432:	b3 01       	movw	r22, r6
    7434:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    7438:	81 10       	cpse	r8, r1
    743a:	8a 94       	dec	r8
    743c:	08 94       	sec
    743e:	e1 08       	sbc	r14, r1
    7440:	f1 08       	sbc	r15, r1
    7442:	e1 14       	cp	r14, r1
    7444:	f1 04       	cpc	r15, r1
    7446:	71 f7       	brne	.-36     	; 0x7424 <vfprintf+0x510>
    7448:	f2 c0       	rjmp	.+484    	; 0x762e <vfprintf+0x71a>
    744a:	94 36       	cpi	r25, 0x64	; 100
    744c:	11 f0       	breq	.+4      	; 0x7452 <vfprintf+0x53e>
    744e:	99 36       	cpi	r25, 0x69	; 105
    7450:	89 f5       	brne	.+98     	; 0x74b4 <vfprintf+0x5a0>
    7452:	17 ff       	sbrs	r17, 7
    7454:	08 c0       	rjmp	.+16     	; 0x7466 <vfprintf+0x552>
    7456:	f6 01       	movw	r30, r12
    7458:	20 81       	ld	r18, Z
    745a:	31 81       	ldd	r19, Z+1	; 0x01
    745c:	42 81       	ldd	r20, Z+2	; 0x02
    745e:	53 81       	ldd	r21, Z+3	; 0x03
    7460:	84 e0       	ldi	r24, 0x04	; 4
    7462:	90 e0       	ldi	r25, 0x00	; 0
    7464:	0a c0       	rjmp	.+20     	; 0x747a <vfprintf+0x566>
    7466:	f6 01       	movw	r30, r12
    7468:	80 81       	ld	r24, Z
    746a:	91 81       	ldd	r25, Z+1	; 0x01
    746c:	9c 01       	movw	r18, r24
    746e:	44 27       	eor	r20, r20
    7470:	37 fd       	sbrc	r19, 7
    7472:	40 95       	com	r20
    7474:	54 2f       	mov	r21, r20
    7476:	82 e0       	ldi	r24, 0x02	; 2
    7478:	90 e0       	ldi	r25, 0x00	; 0
    747a:	c8 0e       	add	r12, r24
    747c:	d9 1e       	adc	r13, r25
    747e:	9f e6       	ldi	r25, 0x6F	; 111
    7480:	f9 2e       	mov	r15, r25
    7482:	f1 22       	and	r15, r17
    7484:	57 ff       	sbrs	r21, 7
    7486:	09 c0       	rjmp	.+18     	; 0x749a <vfprintf+0x586>
    7488:	50 95       	com	r21
    748a:	40 95       	com	r20
    748c:	30 95       	com	r19
    748e:	21 95       	neg	r18
    7490:	3f 4f       	sbci	r19, 0xFF	; 255
    7492:	4f 4f       	sbci	r20, 0xFF	; 255
    7494:	5f 4f       	sbci	r21, 0xFF	; 255
    7496:	90 e8       	ldi	r25, 0x80	; 128
    7498:	f9 2a       	or	r15, r25
    749a:	ca 01       	movw	r24, r20
    749c:	b9 01       	movw	r22, r18
    749e:	ae 01       	movw	r20, r28
    74a0:	4f 5f       	subi	r20, 0xFF	; 255
    74a2:	5f 4f       	sbci	r21, 0xFF	; 255
    74a4:	2a e0       	ldi	r18, 0x0A	; 10
    74a6:	30 e0       	ldi	r19, 0x00	; 0
    74a8:	0e 94 08 43 	call	0x8610	; 0x8610 <__ultoa_invert>
    74ac:	e8 2e       	mov	r14, r24
    74ae:	e8 89       	ldd	r30, Y+16	; 0x10
    74b0:	ee 1a       	sub	r14, r30
    74b2:	41 c0       	rjmp	.+130    	; 0x7536 <vfprintf+0x622>
    74b4:	95 37       	cpi	r25, 0x75	; 117
    74b6:	21 f4       	brne	.+8      	; 0x74c0 <vfprintf+0x5ac>
    74b8:	1f 7e       	andi	r17, 0xEF	; 239
    74ba:	2a e0       	ldi	r18, 0x0A	; 10
    74bc:	30 e0       	ldi	r19, 0x00	; 0
    74be:	1c c0       	rjmp	.+56     	; 0x74f8 <vfprintf+0x5e4>
    74c0:	19 7f       	andi	r17, 0xF9	; 249
    74c2:	9f 36       	cpi	r25, 0x6F	; 111
    74c4:	61 f0       	breq	.+24     	; 0x74de <vfprintf+0x5ca>
    74c6:	90 37       	cpi	r25, 0x70	; 112
    74c8:	20 f4       	brcc	.+8      	; 0x74d2 <vfprintf+0x5be>
    74ca:	98 35       	cpi	r25, 0x58	; 88
    74cc:	09 f0       	breq	.+2      	; 0x74d0 <vfprintf+0x5bc>
    74ce:	b2 c0       	rjmp	.+356    	; 0x7634 <vfprintf+0x720>
    74d0:	0f c0       	rjmp	.+30     	; 0x74f0 <vfprintf+0x5dc>
    74d2:	90 37       	cpi	r25, 0x70	; 112
    74d4:	39 f0       	breq	.+14     	; 0x74e4 <vfprintf+0x5d0>
    74d6:	98 37       	cpi	r25, 0x78	; 120
    74d8:	09 f0       	breq	.+2      	; 0x74dc <vfprintf+0x5c8>
    74da:	ac c0       	rjmp	.+344    	; 0x7634 <vfprintf+0x720>
    74dc:	04 c0       	rjmp	.+8      	; 0x74e6 <vfprintf+0x5d2>
    74de:	28 e0       	ldi	r18, 0x08	; 8
    74e0:	30 e0       	ldi	r19, 0x00	; 0
    74e2:	0a c0       	rjmp	.+20     	; 0x74f8 <vfprintf+0x5e4>
    74e4:	10 61       	ori	r17, 0x10	; 16
    74e6:	14 fd       	sbrc	r17, 4
    74e8:	14 60       	ori	r17, 0x04	; 4
    74ea:	20 e1       	ldi	r18, 0x10	; 16
    74ec:	30 e0       	ldi	r19, 0x00	; 0
    74ee:	04 c0       	rjmp	.+8      	; 0x74f8 <vfprintf+0x5e4>
    74f0:	14 fd       	sbrc	r17, 4
    74f2:	16 60       	ori	r17, 0x06	; 6
    74f4:	20 e1       	ldi	r18, 0x10	; 16
    74f6:	32 e0       	ldi	r19, 0x02	; 2
    74f8:	17 ff       	sbrs	r17, 7
    74fa:	08 c0       	rjmp	.+16     	; 0x750c <vfprintf+0x5f8>
    74fc:	f6 01       	movw	r30, r12
    74fe:	60 81       	ld	r22, Z
    7500:	71 81       	ldd	r23, Z+1	; 0x01
    7502:	82 81       	ldd	r24, Z+2	; 0x02
    7504:	93 81       	ldd	r25, Z+3	; 0x03
    7506:	44 e0       	ldi	r20, 0x04	; 4
    7508:	50 e0       	ldi	r21, 0x00	; 0
    750a:	08 c0       	rjmp	.+16     	; 0x751c <vfprintf+0x608>
    750c:	f6 01       	movw	r30, r12
    750e:	80 81       	ld	r24, Z
    7510:	91 81       	ldd	r25, Z+1	; 0x01
    7512:	bc 01       	movw	r22, r24
    7514:	80 e0       	ldi	r24, 0x00	; 0
    7516:	90 e0       	ldi	r25, 0x00	; 0
    7518:	42 e0       	ldi	r20, 0x02	; 2
    751a:	50 e0       	ldi	r21, 0x00	; 0
    751c:	c4 0e       	add	r12, r20
    751e:	d5 1e       	adc	r13, r21
    7520:	ae 01       	movw	r20, r28
    7522:	4f 5f       	subi	r20, 0xFF	; 255
    7524:	5f 4f       	sbci	r21, 0xFF	; 255
    7526:	0e 94 08 43 	call	0x8610	; 0x8610 <__ultoa_invert>
    752a:	e8 2e       	mov	r14, r24
    752c:	58 89       	ldd	r21, Y+16	; 0x10
    752e:	e5 1a       	sub	r14, r21
    7530:	8f e7       	ldi	r24, 0x7F	; 127
    7532:	f8 2e       	mov	r15, r24
    7534:	f1 22       	and	r15, r17
    7536:	f6 fe       	sbrs	r15, 6
    7538:	0b c0       	rjmp	.+22     	; 0x7550 <vfprintf+0x63c>
    753a:	8e ef       	ldi	r24, 0xFE	; 254
    753c:	f8 22       	and	r15, r24
    753e:	e9 14       	cp	r14, r9
    7540:	38 f4       	brcc	.+14     	; 0x7550 <vfprintf+0x63c>
    7542:	f4 fe       	sbrs	r15, 4
    7544:	07 c0       	rjmp	.+14     	; 0x7554 <vfprintf+0x640>
    7546:	f2 fc       	sbrc	r15, 2
    7548:	05 c0       	rjmp	.+10     	; 0x7554 <vfprintf+0x640>
    754a:	9f ee       	ldi	r25, 0xEF	; 239
    754c:	f9 22       	and	r15, r25
    754e:	02 c0       	rjmp	.+4      	; 0x7554 <vfprintf+0x640>
    7550:	1e 2d       	mov	r17, r14
    7552:	01 c0       	rjmp	.+2      	; 0x7556 <vfprintf+0x642>
    7554:	19 2d       	mov	r17, r9
    7556:	f4 fe       	sbrs	r15, 4
    7558:	0d c0       	rjmp	.+26     	; 0x7574 <vfprintf+0x660>
    755a:	fe 01       	movw	r30, r28
    755c:	ee 0d       	add	r30, r14
    755e:	f1 1d       	adc	r31, r1
    7560:	80 81       	ld	r24, Z
    7562:	80 33       	cpi	r24, 0x30	; 48
    7564:	19 f4       	brne	.+6      	; 0x756c <vfprintf+0x658>
    7566:	e9 ee       	ldi	r30, 0xE9	; 233
    7568:	fe 22       	and	r15, r30
    756a:	08 c0       	rjmp	.+16     	; 0x757c <vfprintf+0x668>
    756c:	1f 5f       	subi	r17, 0xFF	; 255
    756e:	f2 fe       	sbrs	r15, 2
    7570:	05 c0       	rjmp	.+10     	; 0x757c <vfprintf+0x668>
    7572:	03 c0       	rjmp	.+6      	; 0x757a <vfprintf+0x666>
    7574:	8f 2d       	mov	r24, r15
    7576:	86 78       	andi	r24, 0x86	; 134
    7578:	09 f0       	breq	.+2      	; 0x757c <vfprintf+0x668>
    757a:	1f 5f       	subi	r17, 0xFF	; 255
    757c:	0f 2d       	mov	r16, r15
    757e:	f3 fc       	sbrc	r15, 3
    7580:	14 c0       	rjmp	.+40     	; 0x75aa <vfprintf+0x696>
    7582:	f0 fe       	sbrs	r15, 0
    7584:	0f c0       	rjmp	.+30     	; 0x75a4 <vfprintf+0x690>
    7586:	18 15       	cp	r17, r8
    7588:	10 f0       	brcs	.+4      	; 0x758e <vfprintf+0x67a>
    758a:	9e 2c       	mov	r9, r14
    758c:	0b c0       	rjmp	.+22     	; 0x75a4 <vfprintf+0x690>
    758e:	9e 2c       	mov	r9, r14
    7590:	98 0c       	add	r9, r8
    7592:	91 1a       	sub	r9, r17
    7594:	18 2d       	mov	r17, r8
    7596:	06 c0       	rjmp	.+12     	; 0x75a4 <vfprintf+0x690>
    7598:	80 e2       	ldi	r24, 0x20	; 32
    759a:	90 e0       	ldi	r25, 0x00	; 0
    759c:	b3 01       	movw	r22, r6
    759e:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    75a2:	1f 5f       	subi	r17, 0xFF	; 255
    75a4:	18 15       	cp	r17, r8
    75a6:	c0 f3       	brcs	.-16     	; 0x7598 <vfprintf+0x684>
    75a8:	04 c0       	rjmp	.+8      	; 0x75b2 <vfprintf+0x69e>
    75aa:	18 15       	cp	r17, r8
    75ac:	10 f4       	brcc	.+4      	; 0x75b2 <vfprintf+0x69e>
    75ae:	81 1a       	sub	r8, r17
    75b0:	01 c0       	rjmp	.+2      	; 0x75b4 <vfprintf+0x6a0>
    75b2:	88 24       	eor	r8, r8
    75b4:	04 ff       	sbrs	r16, 4
    75b6:	0f c0       	rjmp	.+30     	; 0x75d6 <vfprintf+0x6c2>
    75b8:	80 e3       	ldi	r24, 0x30	; 48
    75ba:	90 e0       	ldi	r25, 0x00	; 0
    75bc:	b3 01       	movw	r22, r6
    75be:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    75c2:	02 ff       	sbrs	r16, 2
    75c4:	1d c0       	rjmp	.+58     	; 0x7600 <vfprintf+0x6ec>
    75c6:	01 fd       	sbrc	r16, 1
    75c8:	03 c0       	rjmp	.+6      	; 0x75d0 <vfprintf+0x6bc>
    75ca:	88 e7       	ldi	r24, 0x78	; 120
    75cc:	90 e0       	ldi	r25, 0x00	; 0
    75ce:	0e c0       	rjmp	.+28     	; 0x75ec <vfprintf+0x6d8>
    75d0:	88 e5       	ldi	r24, 0x58	; 88
    75d2:	90 e0       	ldi	r25, 0x00	; 0
    75d4:	0b c0       	rjmp	.+22     	; 0x75ec <vfprintf+0x6d8>
    75d6:	80 2f       	mov	r24, r16
    75d8:	86 78       	andi	r24, 0x86	; 134
    75da:	91 f0       	breq	.+36     	; 0x7600 <vfprintf+0x6ec>
    75dc:	01 ff       	sbrs	r16, 1
    75de:	02 c0       	rjmp	.+4      	; 0x75e4 <vfprintf+0x6d0>
    75e0:	8b e2       	ldi	r24, 0x2B	; 43
    75e2:	01 c0       	rjmp	.+2      	; 0x75e6 <vfprintf+0x6d2>
    75e4:	80 e2       	ldi	r24, 0x20	; 32
    75e6:	f7 fc       	sbrc	r15, 7
    75e8:	8d e2       	ldi	r24, 0x2D	; 45
    75ea:	90 e0       	ldi	r25, 0x00	; 0
    75ec:	b3 01       	movw	r22, r6
    75ee:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    75f2:	06 c0       	rjmp	.+12     	; 0x7600 <vfprintf+0x6ec>
    75f4:	80 e3       	ldi	r24, 0x30	; 48
    75f6:	90 e0       	ldi	r25, 0x00	; 0
    75f8:	b3 01       	movw	r22, r6
    75fa:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    75fe:	9a 94       	dec	r9
    7600:	e9 14       	cp	r14, r9
    7602:	c0 f3       	brcs	.-16     	; 0x75f4 <vfprintf+0x6e0>
    7604:	ea 94       	dec	r14
    7606:	e1 e0       	ldi	r30, 0x01	; 1
    7608:	f0 e0       	ldi	r31, 0x00	; 0
    760a:	ec 0f       	add	r30, r28
    760c:	fd 1f       	adc	r31, r29
    760e:	ee 0d       	add	r30, r14
    7610:	f1 1d       	adc	r31, r1
    7612:	80 81       	ld	r24, Z
    7614:	90 e0       	ldi	r25, 0x00	; 0
    7616:	b3 01       	movw	r22, r6
    7618:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    761c:	ee 20       	and	r14, r14
    761e:	91 f7       	brne	.-28     	; 0x7604 <vfprintf+0x6f0>
    7620:	06 c0       	rjmp	.+12     	; 0x762e <vfprintf+0x71a>
    7622:	80 e2       	ldi	r24, 0x20	; 32
    7624:	90 e0       	ldi	r25, 0x00	; 0
    7626:	b3 01       	movw	r22, r6
    7628:	0e 94 b9 42 	call	0x8572	; 0x8572 <fputc>
    762c:	8a 94       	dec	r8
    762e:	88 20       	and	r8, r8
    7630:	c1 f7       	brne	.-16     	; 0x7622 <vfprintf+0x70e>
    7632:	99 cc       	rjmp	.-1742   	; 0x6f66 <vfprintf+0x52>
    7634:	f3 01       	movw	r30, r6
    7636:	66 81       	ldd	r22, Z+6	; 0x06
    7638:	77 81       	ldd	r23, Z+7	; 0x07
    763a:	cb 01       	movw	r24, r22
    763c:	61 96       	adiw	r28, 0x11	; 17
    763e:	cd bf       	out	0x3d, r28	; 61
    7640:	de bf       	out	0x3e, r29	; 62
    7642:	cf 91       	pop	r28
    7644:	df 91       	pop	r29
    7646:	1f 91       	pop	r17
    7648:	0f 91       	pop	r16
    764a:	ff 90       	pop	r15
    764c:	ef 90       	pop	r14
    764e:	df 90       	pop	r13
    7650:	cf 90       	pop	r12
    7652:	bf 90       	pop	r11
    7654:	af 90       	pop	r10
    7656:	9f 90       	pop	r9
    7658:	8f 90       	pop	r8
    765a:	7f 90       	pop	r7
    765c:	6f 90       	pop	r6
    765e:	5f 90       	pop	r5
    7660:	4f 90       	pop	r4
    7662:	3f 90       	pop	r3
    7664:	2f 90       	pop	r2
    7666:	08 95       	ret

00007668 <__subsf3>:
    7668:	50 58       	subi	r21, 0x80	; 128

0000766a <__addsf3>:
    766a:	bb 27       	eor	r27, r27
    766c:	aa 27       	eor	r26, r26
    766e:	0e d0       	rcall	.+28     	; 0x768c <__addsf3x>
    7670:	29 c2       	rjmp	.+1106   	; 0x7ac4 <__fp_round>
    7672:	f2 d1       	rcall	.+996    	; 0x7a58 <__fp_pscA>
    7674:	30 f0       	brcs	.+12     	; 0x7682 <__addsf3+0x18>
    7676:	f7 d1       	rcall	.+1006   	; 0x7a66 <__fp_pscB>
    7678:	20 f0       	brcs	.+8      	; 0x7682 <__addsf3+0x18>
    767a:	31 f4       	brne	.+12     	; 0x7688 <__addsf3+0x1e>
    767c:	9f 3f       	cpi	r25, 0xFF	; 255
    767e:	11 f4       	brne	.+4      	; 0x7684 <__addsf3+0x1a>
    7680:	1e f4       	brtc	.+6      	; 0x7688 <__addsf3+0x1e>
    7682:	c2 c1       	rjmp	.+900    	; 0x7a08 <__fp_nan>
    7684:	0e f4       	brtc	.+2      	; 0x7688 <__addsf3+0x1e>
    7686:	e0 95       	com	r30
    7688:	e7 fb       	bst	r30, 7
    768a:	8f c1       	rjmp	.+798    	; 0x79aa <__fp_inf>

0000768c <__addsf3x>:
    768c:	e9 2f       	mov	r30, r25
    768e:	3c d2       	rcall	.+1144   	; 0x7b08 <__fp_split3>
    7690:	80 f3       	brcs	.-32     	; 0x7672 <__addsf3+0x8>
    7692:	ba 17       	cp	r27, r26
    7694:	62 07       	cpc	r22, r18
    7696:	73 07       	cpc	r23, r19
    7698:	84 07       	cpc	r24, r20
    769a:	95 07       	cpc	r25, r21
    769c:	18 f0       	brcs	.+6      	; 0x76a4 <__addsf3x+0x18>
    769e:	71 f4       	brne	.+28     	; 0x76bc <__addsf3x+0x30>
    76a0:	9e f5       	brtc	.+102    	; 0x7708 <__addsf3x+0x7c>
    76a2:	6b c2       	rjmp	.+1238   	; 0x7b7a <__fp_zero>
    76a4:	0e f4       	brtc	.+2      	; 0x76a8 <__addsf3x+0x1c>
    76a6:	e0 95       	com	r30
    76a8:	0b 2e       	mov	r0, r27
    76aa:	ba 2f       	mov	r27, r26
    76ac:	a0 2d       	mov	r26, r0
    76ae:	0b 01       	movw	r0, r22
    76b0:	b9 01       	movw	r22, r18
    76b2:	90 01       	movw	r18, r0
    76b4:	0c 01       	movw	r0, r24
    76b6:	ca 01       	movw	r24, r20
    76b8:	a0 01       	movw	r20, r0
    76ba:	11 24       	eor	r1, r1
    76bc:	ff 27       	eor	r31, r31
    76be:	59 1b       	sub	r21, r25
    76c0:	99 f0       	breq	.+38     	; 0x76e8 <__addsf3x+0x5c>
    76c2:	59 3f       	cpi	r21, 0xF9	; 249
    76c4:	50 f4       	brcc	.+20     	; 0x76da <__addsf3x+0x4e>
    76c6:	50 3e       	cpi	r21, 0xE0	; 224
    76c8:	68 f1       	brcs	.+90     	; 0x7724 <__addsf3x+0x98>
    76ca:	1a 16       	cp	r1, r26
    76cc:	f0 40       	sbci	r31, 0x00	; 0
    76ce:	a2 2f       	mov	r26, r18
    76d0:	23 2f       	mov	r18, r19
    76d2:	34 2f       	mov	r19, r20
    76d4:	44 27       	eor	r20, r20
    76d6:	58 5f       	subi	r21, 0xF8	; 248
    76d8:	f3 cf       	rjmp	.-26     	; 0x76c0 <__addsf3x+0x34>
    76da:	46 95       	lsr	r20
    76dc:	37 95       	ror	r19
    76de:	27 95       	ror	r18
    76e0:	a7 95       	ror	r26
    76e2:	f0 40       	sbci	r31, 0x00	; 0
    76e4:	53 95       	inc	r21
    76e6:	c9 f7       	brne	.-14     	; 0x76da <__addsf3x+0x4e>
    76e8:	7e f4       	brtc	.+30     	; 0x7708 <__addsf3x+0x7c>
    76ea:	1f 16       	cp	r1, r31
    76ec:	ba 0b       	sbc	r27, r26
    76ee:	62 0b       	sbc	r22, r18
    76f0:	73 0b       	sbc	r23, r19
    76f2:	84 0b       	sbc	r24, r20
    76f4:	ba f0       	brmi	.+46     	; 0x7724 <__addsf3x+0x98>
    76f6:	91 50       	subi	r25, 0x01	; 1
    76f8:	a1 f0       	breq	.+40     	; 0x7722 <__addsf3x+0x96>
    76fa:	ff 0f       	add	r31, r31
    76fc:	bb 1f       	adc	r27, r27
    76fe:	66 1f       	adc	r22, r22
    7700:	77 1f       	adc	r23, r23
    7702:	88 1f       	adc	r24, r24
    7704:	c2 f7       	brpl	.-16     	; 0x76f6 <__addsf3x+0x6a>
    7706:	0e c0       	rjmp	.+28     	; 0x7724 <__addsf3x+0x98>
    7708:	ba 0f       	add	r27, r26
    770a:	62 1f       	adc	r22, r18
    770c:	73 1f       	adc	r23, r19
    770e:	84 1f       	adc	r24, r20
    7710:	48 f4       	brcc	.+18     	; 0x7724 <__addsf3x+0x98>
    7712:	87 95       	ror	r24
    7714:	77 95       	ror	r23
    7716:	67 95       	ror	r22
    7718:	b7 95       	ror	r27
    771a:	f7 95       	ror	r31
    771c:	9e 3f       	cpi	r25, 0xFE	; 254
    771e:	08 f0       	brcs	.+2      	; 0x7722 <__addsf3x+0x96>
    7720:	b3 cf       	rjmp	.-154    	; 0x7688 <__addsf3+0x1e>
    7722:	93 95       	inc	r25
    7724:	88 0f       	add	r24, r24
    7726:	08 f0       	brcs	.+2      	; 0x772a <__addsf3x+0x9e>
    7728:	99 27       	eor	r25, r25
    772a:	ee 0f       	add	r30, r30
    772c:	97 95       	ror	r25
    772e:	87 95       	ror	r24
    7730:	08 95       	ret

00007732 <atan>:
    7732:	df 93       	push	r29
    7734:	dd 27       	eor	r29, r29
    7736:	b9 2f       	mov	r27, r25
    7738:	bf 77       	andi	r27, 0x7F	; 127
    773a:	40 e8       	ldi	r20, 0x80	; 128
    773c:	5f e3       	ldi	r21, 0x3F	; 63
    773e:	16 16       	cp	r1, r22
    7740:	17 06       	cpc	r1, r23
    7742:	48 07       	cpc	r20, r24
    7744:	5b 07       	cpc	r21, r27
    7746:	10 f4       	brcc	.+4      	; 0x774c <atan+0x1a>
    7748:	d9 2f       	mov	r29, r25
    774a:	83 d2       	rcall	.+1286   	; 0x7c52 <inverse>
    774c:	9f 93       	push	r25
    774e:	8f 93       	push	r24
    7750:	7f 93       	push	r23
    7752:	6f 93       	push	r22
    7754:	96 d3       	rcall	.+1836   	; 0x7e82 <square>
    7756:	e8 ee       	ldi	r30, 0xE8	; 232
    7758:	f1 e0       	ldi	r31, 0x01	; 1
    775a:	59 d1       	rcall	.+690    	; 0x7a0e <__fp_powser>
    775c:	b3 d1       	rcall	.+870    	; 0x7ac4 <__fp_round>
    775e:	2f 91       	pop	r18
    7760:	3f 91       	pop	r19
    7762:	4f 91       	pop	r20
    7764:	5f 91       	pop	r21
    7766:	ee d2       	rcall	.+1500   	; 0x7d44 <__mulsf3x>
    7768:	dd 23       	and	r29, r29
    776a:	49 f0       	breq	.+18     	; 0x777e <atan+0x4c>
    776c:	90 58       	subi	r25, 0x80	; 128
    776e:	a2 ea       	ldi	r26, 0xA2	; 162
    7770:	2a ed       	ldi	r18, 0xDA	; 218
    7772:	3f e0       	ldi	r19, 0x0F	; 15
    7774:	49 ec       	ldi	r20, 0xC9	; 201
    7776:	5f e3       	ldi	r21, 0x3F	; 63
    7778:	d0 78       	andi	r29, 0x80	; 128
    777a:	5d 27       	eor	r21, r29
    777c:	87 df       	rcall	.-242    	; 0x768c <__addsf3x>
    777e:	df 91       	pop	r29
    7780:	a1 c1       	rjmp	.+834    	; 0x7ac4 <__fp_round>

00007782 <ceil>:
    7782:	e4 d1       	rcall	.+968    	; 0x7b4c <__fp_trunc>
    7784:	80 f0       	brcs	.+32     	; 0x77a6 <ceil+0x24>
    7786:	9f 37       	cpi	r25, 0x7F	; 127
    7788:	40 f4       	brcc	.+16     	; 0x779a <ceil+0x18>
    778a:	91 11       	cpse	r25, r1
    778c:	0e f4       	brtc	.+2      	; 0x7790 <ceil+0xe>
    778e:	f6 c1       	rjmp	.+1004   	; 0x7b7c <__fp_szero>
    7790:	60 e0       	ldi	r22, 0x00	; 0
    7792:	70 e0       	ldi	r23, 0x00	; 0
    7794:	80 e8       	ldi	r24, 0x80	; 128
    7796:	9f e3       	ldi	r25, 0x3F	; 63
    7798:	08 95       	ret
    779a:	26 f0       	brts	.+8      	; 0x77a4 <ceil+0x22>
    779c:	1b 16       	cp	r1, r27
    779e:	61 1d       	adc	r22, r1
    77a0:	71 1d       	adc	r23, r1
    77a2:	81 1d       	adc	r24, r1
    77a4:	08 c1       	rjmp	.+528    	; 0x79b6 <__fp_mintl>
    77a6:	22 c1       	rjmp	.+580    	; 0x79ec <__fp_mpack>

000077a8 <__cmpsf2>:
    77a8:	dc d0       	rcall	.+440    	; 0x7962 <__fp_cmp>
    77aa:	08 f4       	brcc	.+2      	; 0x77ae <__cmpsf2+0x6>
    77ac:	81 e0       	ldi	r24, 0x01	; 1
    77ae:	08 95       	ret

000077b0 <cos>:
    77b0:	62 d1       	rcall	.+708    	; 0x7a76 <__fp_rempio2>
    77b2:	e3 95       	inc	r30
    77b4:	98 c1       	rjmp	.+816    	; 0x7ae6 <__fp_sinus>

000077b6 <__divsf3>:
    77b6:	0c d0       	rcall	.+24     	; 0x77d0 <__divsf3x>
    77b8:	85 c1       	rjmp	.+778    	; 0x7ac4 <__fp_round>
    77ba:	55 d1       	rcall	.+682    	; 0x7a66 <__fp_pscB>
    77bc:	40 f0       	brcs	.+16     	; 0x77ce <__divsf3+0x18>
    77be:	4c d1       	rcall	.+664    	; 0x7a58 <__fp_pscA>
    77c0:	30 f0       	brcs	.+12     	; 0x77ce <__divsf3+0x18>
    77c2:	21 f4       	brne	.+8      	; 0x77cc <__divsf3+0x16>
    77c4:	5f 3f       	cpi	r21, 0xFF	; 255
    77c6:	19 f0       	breq	.+6      	; 0x77ce <__divsf3+0x18>
    77c8:	f0 c0       	rjmp	.+480    	; 0x79aa <__fp_inf>
    77ca:	51 11       	cpse	r21, r1
    77cc:	d7 c1       	rjmp	.+942    	; 0x7b7c <__fp_szero>
    77ce:	1c c1       	rjmp	.+568    	; 0x7a08 <__fp_nan>

000077d0 <__divsf3x>:
    77d0:	9b d1       	rcall	.+822    	; 0x7b08 <__fp_split3>
    77d2:	98 f3       	brcs	.-26     	; 0x77ba <__divsf3+0x4>

000077d4 <__divsf3_pse>:
    77d4:	99 23       	and	r25, r25
    77d6:	c9 f3       	breq	.-14     	; 0x77ca <__divsf3+0x14>
    77d8:	55 23       	and	r21, r21
    77da:	b1 f3       	breq	.-20     	; 0x77c8 <__divsf3+0x12>
    77dc:	95 1b       	sub	r25, r21
    77de:	55 0b       	sbc	r21, r21
    77e0:	bb 27       	eor	r27, r27
    77e2:	aa 27       	eor	r26, r26
    77e4:	62 17       	cp	r22, r18
    77e6:	73 07       	cpc	r23, r19
    77e8:	84 07       	cpc	r24, r20
    77ea:	38 f0       	brcs	.+14     	; 0x77fa <__divsf3_pse+0x26>
    77ec:	9f 5f       	subi	r25, 0xFF	; 255
    77ee:	5f 4f       	sbci	r21, 0xFF	; 255
    77f0:	22 0f       	add	r18, r18
    77f2:	33 1f       	adc	r19, r19
    77f4:	44 1f       	adc	r20, r20
    77f6:	aa 1f       	adc	r26, r26
    77f8:	a9 f3       	breq	.-22     	; 0x77e4 <__divsf3_pse+0x10>
    77fa:	33 d0       	rcall	.+102    	; 0x7862 <__divsf3_pse+0x8e>
    77fc:	0e 2e       	mov	r0, r30
    77fe:	3a f0       	brmi	.+14     	; 0x780e <__divsf3_pse+0x3a>
    7800:	e0 e8       	ldi	r30, 0x80	; 128
    7802:	30 d0       	rcall	.+96     	; 0x7864 <__divsf3_pse+0x90>
    7804:	91 50       	subi	r25, 0x01	; 1
    7806:	50 40       	sbci	r21, 0x00	; 0
    7808:	e6 95       	lsr	r30
    780a:	00 1c       	adc	r0, r0
    780c:	ca f7       	brpl	.-14     	; 0x7800 <__divsf3_pse+0x2c>
    780e:	29 d0       	rcall	.+82     	; 0x7862 <__divsf3_pse+0x8e>
    7810:	fe 2f       	mov	r31, r30
    7812:	27 d0       	rcall	.+78     	; 0x7862 <__divsf3_pse+0x8e>
    7814:	66 0f       	add	r22, r22
    7816:	77 1f       	adc	r23, r23
    7818:	88 1f       	adc	r24, r24
    781a:	bb 1f       	adc	r27, r27
    781c:	26 17       	cp	r18, r22
    781e:	37 07       	cpc	r19, r23
    7820:	48 07       	cpc	r20, r24
    7822:	ab 07       	cpc	r26, r27
    7824:	b0 e8       	ldi	r27, 0x80	; 128
    7826:	09 f0       	breq	.+2      	; 0x782a <__divsf3_pse+0x56>
    7828:	bb 0b       	sbc	r27, r27
    782a:	80 2d       	mov	r24, r0
    782c:	bf 01       	movw	r22, r30
    782e:	ff 27       	eor	r31, r31
    7830:	93 58       	subi	r25, 0x83	; 131
    7832:	5f 4f       	sbci	r21, 0xFF	; 255
    7834:	2a f0       	brmi	.+10     	; 0x7840 <__divsf3_pse+0x6c>
    7836:	9e 3f       	cpi	r25, 0xFE	; 254
    7838:	51 05       	cpc	r21, r1
    783a:	68 f0       	brcs	.+26     	; 0x7856 <__divsf3_pse+0x82>
    783c:	b6 c0       	rjmp	.+364    	; 0x79aa <__fp_inf>
    783e:	9e c1       	rjmp	.+828    	; 0x7b7c <__fp_szero>
    7840:	5f 3f       	cpi	r21, 0xFF	; 255
    7842:	ec f3       	brlt	.-6      	; 0x783e <__divsf3_pse+0x6a>
    7844:	98 3e       	cpi	r25, 0xE8	; 232
    7846:	dc f3       	brlt	.-10     	; 0x783e <__divsf3_pse+0x6a>
    7848:	86 95       	lsr	r24
    784a:	77 95       	ror	r23
    784c:	67 95       	ror	r22
    784e:	b7 95       	ror	r27
    7850:	f7 95       	ror	r31
    7852:	9f 5f       	subi	r25, 0xFF	; 255
    7854:	c9 f7       	brne	.-14     	; 0x7848 <__divsf3_pse+0x74>
    7856:	88 0f       	add	r24, r24
    7858:	91 1d       	adc	r25, r1
    785a:	96 95       	lsr	r25
    785c:	87 95       	ror	r24
    785e:	97 f9       	bld	r25, 7
    7860:	08 95       	ret
    7862:	e1 e0       	ldi	r30, 0x01	; 1
    7864:	66 0f       	add	r22, r22
    7866:	77 1f       	adc	r23, r23
    7868:	88 1f       	adc	r24, r24
    786a:	bb 1f       	adc	r27, r27
    786c:	62 17       	cp	r22, r18
    786e:	73 07       	cpc	r23, r19
    7870:	84 07       	cpc	r24, r20
    7872:	ba 07       	cpc	r27, r26
    7874:	20 f0       	brcs	.+8      	; 0x787e <__divsf3_pse+0xaa>
    7876:	62 1b       	sub	r22, r18
    7878:	73 0b       	sbc	r23, r19
    787a:	84 0b       	sbc	r24, r20
    787c:	ba 0b       	sbc	r27, r26
    787e:	ee 1f       	adc	r30, r30
    7880:	88 f7       	brcc	.-30     	; 0x7864 <__divsf3_pse+0x90>
    7882:	e0 95       	com	r30
    7884:	08 95       	ret

00007886 <__fixsfsi>:
    7886:	04 d0       	rcall	.+8      	; 0x7890 <__fixunssfsi>
    7888:	68 94       	set
    788a:	b1 11       	cpse	r27, r1
    788c:	77 c1       	rjmp	.+750    	; 0x7b7c <__fp_szero>
    788e:	08 95       	ret

00007890 <__fixunssfsi>:
    7890:	43 d1       	rcall	.+646    	; 0x7b18 <__fp_splitA>
    7892:	88 f0       	brcs	.+34     	; 0x78b6 <__fixunssfsi+0x26>
    7894:	9f 57       	subi	r25, 0x7F	; 127
    7896:	90 f0       	brcs	.+36     	; 0x78bc <__fixunssfsi+0x2c>
    7898:	b9 2f       	mov	r27, r25
    789a:	99 27       	eor	r25, r25
    789c:	b7 51       	subi	r27, 0x17	; 23
    789e:	a0 f0       	brcs	.+40     	; 0x78c8 <__fixunssfsi+0x38>
    78a0:	d1 f0       	breq	.+52     	; 0x78d6 <__fixunssfsi+0x46>
    78a2:	66 0f       	add	r22, r22
    78a4:	77 1f       	adc	r23, r23
    78a6:	88 1f       	adc	r24, r24
    78a8:	99 1f       	adc	r25, r25
    78aa:	1a f0       	brmi	.+6      	; 0x78b2 <__fixunssfsi+0x22>
    78ac:	ba 95       	dec	r27
    78ae:	c9 f7       	brne	.-14     	; 0x78a2 <__fixunssfsi+0x12>
    78b0:	12 c0       	rjmp	.+36     	; 0x78d6 <__fixunssfsi+0x46>
    78b2:	b1 30       	cpi	r27, 0x01	; 1
    78b4:	81 f0       	breq	.+32     	; 0x78d6 <__fixunssfsi+0x46>
    78b6:	61 d1       	rcall	.+706    	; 0x7b7a <__fp_zero>
    78b8:	b1 e0       	ldi	r27, 0x01	; 1
    78ba:	08 95       	ret
    78bc:	5e c1       	rjmp	.+700    	; 0x7b7a <__fp_zero>
    78be:	67 2f       	mov	r22, r23
    78c0:	78 2f       	mov	r23, r24
    78c2:	88 27       	eor	r24, r24
    78c4:	b8 5f       	subi	r27, 0xF8	; 248
    78c6:	39 f0       	breq	.+14     	; 0x78d6 <__fixunssfsi+0x46>
    78c8:	b9 3f       	cpi	r27, 0xF9	; 249
    78ca:	cc f3       	brlt	.-14     	; 0x78be <__fixunssfsi+0x2e>
    78cc:	86 95       	lsr	r24
    78ce:	77 95       	ror	r23
    78d0:	67 95       	ror	r22
    78d2:	b3 95       	inc	r27
    78d4:	d9 f7       	brne	.-10     	; 0x78cc <__fixunssfsi+0x3c>
    78d6:	3e f4       	brtc	.+14     	; 0x78e6 <__fixunssfsi+0x56>
    78d8:	90 95       	com	r25
    78da:	80 95       	com	r24
    78dc:	70 95       	com	r23
    78de:	61 95       	neg	r22
    78e0:	7f 4f       	sbci	r23, 0xFF	; 255
    78e2:	8f 4f       	sbci	r24, 0xFF	; 255
    78e4:	9f 4f       	sbci	r25, 0xFF	; 255
    78e6:	08 95       	ret

000078e8 <__floatunsisf>:
    78e8:	e8 94       	clt
    78ea:	09 c0       	rjmp	.+18     	; 0x78fe <__floatsisf+0x12>

000078ec <__floatsisf>:
    78ec:	97 fb       	bst	r25, 7
    78ee:	3e f4       	brtc	.+14     	; 0x78fe <__floatsisf+0x12>
    78f0:	90 95       	com	r25
    78f2:	80 95       	com	r24
    78f4:	70 95       	com	r23
    78f6:	61 95       	neg	r22
    78f8:	7f 4f       	sbci	r23, 0xFF	; 255
    78fa:	8f 4f       	sbci	r24, 0xFF	; 255
    78fc:	9f 4f       	sbci	r25, 0xFF	; 255
    78fe:	99 23       	and	r25, r25
    7900:	a9 f0       	breq	.+42     	; 0x792c <__floatsisf+0x40>
    7902:	f9 2f       	mov	r31, r25
    7904:	96 e9       	ldi	r25, 0x96	; 150
    7906:	bb 27       	eor	r27, r27
    7908:	93 95       	inc	r25
    790a:	f6 95       	lsr	r31
    790c:	87 95       	ror	r24
    790e:	77 95       	ror	r23
    7910:	67 95       	ror	r22
    7912:	b7 95       	ror	r27
    7914:	f1 11       	cpse	r31, r1
    7916:	f8 cf       	rjmp	.-16     	; 0x7908 <__floatsisf+0x1c>
    7918:	fa f4       	brpl	.+62     	; 0x7958 <__floatsisf+0x6c>
    791a:	bb 0f       	add	r27, r27
    791c:	11 f4       	brne	.+4      	; 0x7922 <__floatsisf+0x36>
    791e:	60 ff       	sbrs	r22, 0
    7920:	1b c0       	rjmp	.+54     	; 0x7958 <__floatsisf+0x6c>
    7922:	6f 5f       	subi	r22, 0xFF	; 255
    7924:	7f 4f       	sbci	r23, 0xFF	; 255
    7926:	8f 4f       	sbci	r24, 0xFF	; 255
    7928:	9f 4f       	sbci	r25, 0xFF	; 255
    792a:	16 c0       	rjmp	.+44     	; 0x7958 <__floatsisf+0x6c>
    792c:	88 23       	and	r24, r24
    792e:	11 f0       	breq	.+4      	; 0x7934 <__floatsisf+0x48>
    7930:	96 e9       	ldi	r25, 0x96	; 150
    7932:	11 c0       	rjmp	.+34     	; 0x7956 <__floatsisf+0x6a>
    7934:	77 23       	and	r23, r23
    7936:	21 f0       	breq	.+8      	; 0x7940 <__floatsisf+0x54>
    7938:	9e e8       	ldi	r25, 0x8E	; 142
    793a:	87 2f       	mov	r24, r23
    793c:	76 2f       	mov	r23, r22
    793e:	05 c0       	rjmp	.+10     	; 0x794a <__floatsisf+0x5e>
    7940:	66 23       	and	r22, r22
    7942:	71 f0       	breq	.+28     	; 0x7960 <__floatsisf+0x74>
    7944:	96 e8       	ldi	r25, 0x86	; 134
    7946:	86 2f       	mov	r24, r22
    7948:	70 e0       	ldi	r23, 0x00	; 0
    794a:	60 e0       	ldi	r22, 0x00	; 0
    794c:	2a f0       	brmi	.+10     	; 0x7958 <__floatsisf+0x6c>
    794e:	9a 95       	dec	r25
    7950:	66 0f       	add	r22, r22
    7952:	77 1f       	adc	r23, r23
    7954:	88 1f       	adc	r24, r24
    7956:	da f7       	brpl	.-10     	; 0x794e <__floatsisf+0x62>
    7958:	88 0f       	add	r24, r24
    795a:	96 95       	lsr	r25
    795c:	87 95       	ror	r24
    795e:	97 f9       	bld	r25, 7
    7960:	08 95       	ret

00007962 <__fp_cmp>:
    7962:	99 0f       	add	r25, r25
    7964:	00 08       	sbc	r0, r0
    7966:	55 0f       	add	r21, r21
    7968:	aa 0b       	sbc	r26, r26
    796a:	e0 e8       	ldi	r30, 0x80	; 128
    796c:	fe ef       	ldi	r31, 0xFE	; 254
    796e:	16 16       	cp	r1, r22
    7970:	17 06       	cpc	r1, r23
    7972:	e8 07       	cpc	r30, r24
    7974:	f9 07       	cpc	r31, r25
    7976:	c0 f0       	brcs	.+48     	; 0x79a8 <__fp_cmp+0x46>
    7978:	12 16       	cp	r1, r18
    797a:	13 06       	cpc	r1, r19
    797c:	e4 07       	cpc	r30, r20
    797e:	f5 07       	cpc	r31, r21
    7980:	98 f0       	brcs	.+38     	; 0x79a8 <__fp_cmp+0x46>
    7982:	62 1b       	sub	r22, r18
    7984:	73 0b       	sbc	r23, r19
    7986:	84 0b       	sbc	r24, r20
    7988:	95 0b       	sbc	r25, r21
    798a:	39 f4       	brne	.+14     	; 0x799a <__fp_cmp+0x38>
    798c:	0a 26       	eor	r0, r26
    798e:	61 f0       	breq	.+24     	; 0x79a8 <__fp_cmp+0x46>
    7990:	23 2b       	or	r18, r19
    7992:	24 2b       	or	r18, r20
    7994:	25 2b       	or	r18, r21
    7996:	21 f4       	brne	.+8      	; 0x79a0 <__fp_cmp+0x3e>
    7998:	08 95       	ret
    799a:	0a 26       	eor	r0, r26
    799c:	09 f4       	brne	.+2      	; 0x79a0 <__fp_cmp+0x3e>
    799e:	a1 40       	sbci	r26, 0x01	; 1
    79a0:	a6 95       	lsr	r26
    79a2:	8f ef       	ldi	r24, 0xFF	; 255
    79a4:	81 1d       	adc	r24, r1
    79a6:	81 1d       	adc	r24, r1
    79a8:	08 95       	ret

000079aa <__fp_inf>:
    79aa:	97 f9       	bld	r25, 7
    79ac:	9f 67       	ori	r25, 0x7F	; 127
    79ae:	80 e8       	ldi	r24, 0x80	; 128
    79b0:	70 e0       	ldi	r23, 0x00	; 0
    79b2:	60 e0       	ldi	r22, 0x00	; 0
    79b4:	08 95       	ret

000079b6 <__fp_mintl>:
    79b6:	88 23       	and	r24, r24
    79b8:	71 f4       	brne	.+28     	; 0x79d6 <__fp_mintl+0x20>
    79ba:	77 23       	and	r23, r23
    79bc:	21 f0       	breq	.+8      	; 0x79c6 <__fp_mintl+0x10>
    79be:	98 50       	subi	r25, 0x08	; 8
    79c0:	87 2b       	or	r24, r23
    79c2:	76 2f       	mov	r23, r22
    79c4:	07 c0       	rjmp	.+14     	; 0x79d4 <__fp_mintl+0x1e>
    79c6:	66 23       	and	r22, r22
    79c8:	11 f4       	brne	.+4      	; 0x79ce <__fp_mintl+0x18>
    79ca:	99 27       	eor	r25, r25
    79cc:	0d c0       	rjmp	.+26     	; 0x79e8 <__fp_mintl+0x32>
    79ce:	90 51       	subi	r25, 0x10	; 16
    79d0:	86 2b       	or	r24, r22
    79d2:	70 e0       	ldi	r23, 0x00	; 0
    79d4:	60 e0       	ldi	r22, 0x00	; 0
    79d6:	2a f0       	brmi	.+10     	; 0x79e2 <__fp_mintl+0x2c>
    79d8:	9a 95       	dec	r25
    79da:	66 0f       	add	r22, r22
    79dc:	77 1f       	adc	r23, r23
    79de:	88 1f       	adc	r24, r24
    79e0:	da f7       	brpl	.-10     	; 0x79d8 <__fp_mintl+0x22>
    79e2:	88 0f       	add	r24, r24
    79e4:	96 95       	lsr	r25
    79e6:	87 95       	ror	r24
    79e8:	97 f9       	bld	r25, 7
    79ea:	08 95       	ret

000079ec <__fp_mpack>:
    79ec:	9f 3f       	cpi	r25, 0xFF	; 255
    79ee:	31 f0       	breq	.+12     	; 0x79fc <__fp_mpack_finite+0xc>

000079f0 <__fp_mpack_finite>:
    79f0:	91 50       	subi	r25, 0x01	; 1
    79f2:	20 f4       	brcc	.+8      	; 0x79fc <__fp_mpack_finite+0xc>
    79f4:	87 95       	ror	r24
    79f6:	77 95       	ror	r23
    79f8:	67 95       	ror	r22
    79fa:	b7 95       	ror	r27
    79fc:	88 0f       	add	r24, r24
    79fe:	91 1d       	adc	r25, r1
    7a00:	96 95       	lsr	r25
    7a02:	87 95       	ror	r24
    7a04:	97 f9       	bld	r25, 7
    7a06:	08 95       	ret

00007a08 <__fp_nan>:
    7a08:	9f ef       	ldi	r25, 0xFF	; 255
    7a0a:	80 ec       	ldi	r24, 0xC0	; 192
    7a0c:	08 95       	ret

00007a0e <__fp_powser>:
    7a0e:	df 93       	push	r29
    7a10:	cf 93       	push	r28
    7a12:	1f 93       	push	r17
    7a14:	0f 93       	push	r16
    7a16:	ff 92       	push	r15
    7a18:	ef 92       	push	r14
    7a1a:	df 92       	push	r13
    7a1c:	7b 01       	movw	r14, r22
    7a1e:	8c 01       	movw	r16, r24
    7a20:	68 94       	set
    7a22:	05 c0       	rjmp	.+10     	; 0x7a2e <__fp_powser+0x20>
    7a24:	da 2e       	mov	r13, r26
    7a26:	ef 01       	movw	r28, r30
    7a28:	8d d1       	rcall	.+794    	; 0x7d44 <__mulsf3x>
    7a2a:	fe 01       	movw	r30, r28
    7a2c:	e8 94       	clt
    7a2e:	a5 91       	lpm	r26, Z+
    7a30:	25 91       	lpm	r18, Z+
    7a32:	35 91       	lpm	r19, Z+
    7a34:	45 91       	lpm	r20, Z+
    7a36:	55 91       	lpm	r21, Z+
    7a38:	ae f3       	brts	.-22     	; 0x7a24 <__fp_powser+0x16>
    7a3a:	ef 01       	movw	r28, r30
    7a3c:	27 de       	rcall	.-946    	; 0x768c <__addsf3x>
    7a3e:	fe 01       	movw	r30, r28
    7a40:	97 01       	movw	r18, r14
    7a42:	a8 01       	movw	r20, r16
    7a44:	da 94       	dec	r13
    7a46:	79 f7       	brne	.-34     	; 0x7a26 <__fp_powser+0x18>
    7a48:	df 90       	pop	r13
    7a4a:	ef 90       	pop	r14
    7a4c:	ff 90       	pop	r15
    7a4e:	0f 91       	pop	r16
    7a50:	1f 91       	pop	r17
    7a52:	cf 91       	pop	r28
    7a54:	df 91       	pop	r29
    7a56:	08 95       	ret

00007a58 <__fp_pscA>:
    7a58:	00 24       	eor	r0, r0
    7a5a:	0a 94       	dec	r0
    7a5c:	16 16       	cp	r1, r22
    7a5e:	17 06       	cpc	r1, r23
    7a60:	18 06       	cpc	r1, r24
    7a62:	09 06       	cpc	r0, r25
    7a64:	08 95       	ret

00007a66 <__fp_pscB>:
    7a66:	00 24       	eor	r0, r0
    7a68:	0a 94       	dec	r0
    7a6a:	12 16       	cp	r1, r18
    7a6c:	13 06       	cpc	r1, r19
    7a6e:	14 06       	cpc	r1, r20
    7a70:	05 06       	cpc	r0, r21
    7a72:	08 95       	ret
    7a74:	c9 cf       	rjmp	.-110    	; 0x7a08 <__fp_nan>

00007a76 <__fp_rempio2>:
    7a76:	50 d0       	rcall	.+160    	; 0x7b18 <__fp_splitA>
    7a78:	e8 f3       	brcs	.-6      	; 0x7a74 <__fp_pscB+0xe>
    7a7a:	e8 94       	clt
    7a7c:	e0 e0       	ldi	r30, 0x00	; 0
    7a7e:	bb 27       	eor	r27, r27
    7a80:	9f 57       	subi	r25, 0x7F	; 127
    7a82:	f0 f0       	brcs	.+60     	; 0x7ac0 <__fp_rempio2+0x4a>
    7a84:	2a ed       	ldi	r18, 0xDA	; 218
    7a86:	3f e0       	ldi	r19, 0x0F	; 15
    7a88:	49 ec       	ldi	r20, 0xC9	; 201
    7a8a:	06 c0       	rjmp	.+12     	; 0x7a98 <__fp_rempio2+0x22>
    7a8c:	ee 0f       	add	r30, r30
    7a8e:	bb 0f       	add	r27, r27
    7a90:	66 1f       	adc	r22, r22
    7a92:	77 1f       	adc	r23, r23
    7a94:	88 1f       	adc	r24, r24
    7a96:	28 f0       	brcs	.+10     	; 0x7aa2 <__fp_rempio2+0x2c>
    7a98:	b2 3a       	cpi	r27, 0xA2	; 162
    7a9a:	62 07       	cpc	r22, r18
    7a9c:	73 07       	cpc	r23, r19
    7a9e:	84 07       	cpc	r24, r20
    7aa0:	28 f0       	brcs	.+10     	; 0x7aac <__fp_rempio2+0x36>
    7aa2:	b2 5a       	subi	r27, 0xA2	; 162
    7aa4:	62 0b       	sbc	r22, r18
    7aa6:	73 0b       	sbc	r23, r19
    7aa8:	84 0b       	sbc	r24, r20
    7aaa:	e3 95       	inc	r30
    7aac:	9a 95       	dec	r25
    7aae:	72 f7       	brpl	.-36     	; 0x7a8c <__fp_rempio2+0x16>
    7ab0:	80 38       	cpi	r24, 0x80	; 128
    7ab2:	30 f4       	brcc	.+12     	; 0x7ac0 <__fp_rempio2+0x4a>
    7ab4:	9a 95       	dec	r25
    7ab6:	bb 0f       	add	r27, r27
    7ab8:	66 1f       	adc	r22, r22
    7aba:	77 1f       	adc	r23, r23
    7abc:	88 1f       	adc	r24, r24
    7abe:	d2 f7       	brpl	.-12     	; 0x7ab4 <__fp_rempio2+0x3e>
    7ac0:	90 48       	sbci	r25, 0x80	; 128
    7ac2:	96 cf       	rjmp	.-212    	; 0x79f0 <__fp_mpack_finite>

00007ac4 <__fp_round>:
    7ac4:	09 2e       	mov	r0, r25
    7ac6:	03 94       	inc	r0
    7ac8:	00 0c       	add	r0, r0
    7aca:	11 f4       	brne	.+4      	; 0x7ad0 <__fp_round+0xc>
    7acc:	88 23       	and	r24, r24
    7ace:	52 f0       	brmi	.+20     	; 0x7ae4 <__fp_round+0x20>
    7ad0:	bb 0f       	add	r27, r27
    7ad2:	40 f4       	brcc	.+16     	; 0x7ae4 <__fp_round+0x20>
    7ad4:	bf 2b       	or	r27, r31
    7ad6:	11 f4       	brne	.+4      	; 0x7adc <__fp_round+0x18>
    7ad8:	60 ff       	sbrs	r22, 0
    7ada:	04 c0       	rjmp	.+8      	; 0x7ae4 <__fp_round+0x20>
    7adc:	6f 5f       	subi	r22, 0xFF	; 255
    7ade:	7f 4f       	sbci	r23, 0xFF	; 255
    7ae0:	8f 4f       	sbci	r24, 0xFF	; 255
    7ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    7ae4:	08 95       	ret

00007ae6 <__fp_sinus>:
    7ae6:	ef 93       	push	r30
    7ae8:	e0 ff       	sbrs	r30, 0
    7aea:	06 c0       	rjmp	.+12     	; 0x7af8 <__fp_sinus+0x12>
    7aec:	a2 ea       	ldi	r26, 0xA2	; 162
    7aee:	2a ed       	ldi	r18, 0xDA	; 218
    7af0:	3f e0       	ldi	r19, 0x0F	; 15
    7af2:	49 ec       	ldi	r20, 0xC9	; 201
    7af4:	5f eb       	ldi	r21, 0xBF	; 191
    7af6:	ca dd       	rcall	.-1132   	; 0x768c <__addsf3x>
    7af8:	e5 df       	rcall	.-54     	; 0x7ac4 <__fp_round>
    7afa:	0f 90       	pop	r0
    7afc:	03 94       	inc	r0
    7afe:	01 fc       	sbrc	r0, 1
    7b00:	90 58       	subi	r25, 0x80	; 128
    7b02:	e5 e1       	ldi	r30, 0x15	; 21
    7b04:	f2 e0       	ldi	r31, 0x02	; 2
    7b06:	d2 c1       	rjmp	.+932    	; 0x7eac <__fp_powsodd>

00007b08 <__fp_split3>:
    7b08:	57 fd       	sbrc	r21, 7
    7b0a:	90 58       	subi	r25, 0x80	; 128
    7b0c:	44 0f       	add	r20, r20
    7b0e:	55 1f       	adc	r21, r21
    7b10:	59 f0       	breq	.+22     	; 0x7b28 <__fp_splitA+0x10>
    7b12:	5f 3f       	cpi	r21, 0xFF	; 255
    7b14:	71 f0       	breq	.+28     	; 0x7b32 <__fp_splitA+0x1a>
    7b16:	47 95       	ror	r20

00007b18 <__fp_splitA>:
    7b18:	88 0f       	add	r24, r24
    7b1a:	97 fb       	bst	r25, 7
    7b1c:	99 1f       	adc	r25, r25
    7b1e:	61 f0       	breq	.+24     	; 0x7b38 <__fp_splitA+0x20>
    7b20:	9f 3f       	cpi	r25, 0xFF	; 255
    7b22:	79 f0       	breq	.+30     	; 0x7b42 <__fp_splitA+0x2a>
    7b24:	87 95       	ror	r24
    7b26:	08 95       	ret
    7b28:	12 16       	cp	r1, r18
    7b2a:	13 06       	cpc	r1, r19
    7b2c:	14 06       	cpc	r1, r20
    7b2e:	55 1f       	adc	r21, r21
    7b30:	f2 cf       	rjmp	.-28     	; 0x7b16 <__fp_split3+0xe>
    7b32:	46 95       	lsr	r20
    7b34:	f1 df       	rcall	.-30     	; 0x7b18 <__fp_splitA>
    7b36:	08 c0       	rjmp	.+16     	; 0x7b48 <__fp_splitA+0x30>
    7b38:	16 16       	cp	r1, r22
    7b3a:	17 06       	cpc	r1, r23
    7b3c:	18 06       	cpc	r1, r24
    7b3e:	99 1f       	adc	r25, r25
    7b40:	f1 cf       	rjmp	.-30     	; 0x7b24 <__fp_splitA+0xc>
    7b42:	86 95       	lsr	r24
    7b44:	71 05       	cpc	r23, r1
    7b46:	61 05       	cpc	r22, r1
    7b48:	08 94       	sec
    7b4a:	08 95       	ret

00007b4c <__fp_trunc>:
    7b4c:	e5 df       	rcall	.-54     	; 0x7b18 <__fp_splitA>
    7b4e:	a0 f0       	brcs	.+40     	; 0x7b78 <__fp_trunc+0x2c>
    7b50:	be e7       	ldi	r27, 0x7E	; 126
    7b52:	b9 17       	cp	r27, r25
    7b54:	88 f4       	brcc	.+34     	; 0x7b78 <__fp_trunc+0x2c>
    7b56:	bb 27       	eor	r27, r27
    7b58:	9f 38       	cpi	r25, 0x8F	; 143
    7b5a:	60 f4       	brcc	.+24     	; 0x7b74 <__fp_trunc+0x28>
    7b5c:	16 16       	cp	r1, r22
    7b5e:	b1 1d       	adc	r27, r1
    7b60:	67 2f       	mov	r22, r23
    7b62:	78 2f       	mov	r23, r24
    7b64:	88 27       	eor	r24, r24
    7b66:	98 5f       	subi	r25, 0xF8	; 248
    7b68:	f7 cf       	rjmp	.-18     	; 0x7b58 <__fp_trunc+0xc>
    7b6a:	86 95       	lsr	r24
    7b6c:	77 95       	ror	r23
    7b6e:	67 95       	ror	r22
    7b70:	b1 1d       	adc	r27, r1
    7b72:	93 95       	inc	r25
    7b74:	96 39       	cpi	r25, 0x96	; 150
    7b76:	c8 f3       	brcs	.-14     	; 0x7b6a <__fp_trunc+0x1e>
    7b78:	08 95       	ret

00007b7a <__fp_zero>:
    7b7a:	e8 94       	clt

00007b7c <__fp_szero>:
    7b7c:	bb 27       	eor	r27, r27
    7b7e:	66 27       	eor	r22, r22
    7b80:	77 27       	eor	r23, r23
    7b82:	cb 01       	movw	r24, r22
    7b84:	97 f9       	bld	r25, 7
    7b86:	08 95       	ret

00007b88 <__gesf2>:
    7b88:	ec de       	rcall	.-552    	; 0x7962 <__fp_cmp>
    7b8a:	08 f4       	brcc	.+2      	; 0x7b8e <__gesf2+0x6>
    7b8c:	8f ef       	ldi	r24, 0xFF	; 255
    7b8e:	08 95       	ret
    7b90:	63 df       	rcall	.-314    	; 0x7a58 <__fp_pscA>
    7b92:	19 f0       	breq	.+6      	; 0x7b9a <__gesf2+0x12>
    7b94:	68 df       	rcall	.-304    	; 0x7a66 <__fp_pscB>
    7b96:	09 f0       	breq	.+2      	; 0x7b9a <__gesf2+0x12>
    7b98:	37 cf       	rjmp	.-402    	; 0x7a08 <__fp_nan>
    7b9a:	07 cf       	rjmp	.-498    	; 0x79aa <__fp_inf>
    7b9c:	b9 01       	movw	r22, r18
    7b9e:	ca 01       	movw	r24, r20
    7ba0:	25 cf       	rjmp	.-438    	; 0x79ec <__fp_mpack>

00007ba2 <hypot>:
    7ba2:	9f 77       	andi	r25, 0x7F	; 127
    7ba4:	5f 77       	andi	r21, 0x7F	; 127
    7ba6:	b0 df       	rcall	.-160    	; 0x7b08 <__fp_split3>
    7ba8:	98 f3       	brcs	.-26     	; 0x7b90 <__gesf2+0x8>
    7baa:	99 23       	and	r25, r25
    7bac:	b9 f3       	breq	.-18     	; 0x7b9c <__gesf2+0x14>
    7bae:	55 23       	and	r21, r21
    7bb0:	b9 f3       	breq	.-18     	; 0x7ba0 <__gesf2+0x18>
    7bb2:	ff 27       	eor	r31, r31
    7bb4:	95 17       	cp	r25, r21
    7bb6:	58 f4       	brcc	.+22     	; 0x7bce <hypot+0x2c>
    7bb8:	e5 2f       	mov	r30, r21
    7bba:	e9 1b       	sub	r30, r25
    7bbc:	ed 30       	cpi	r30, 0x0D	; 13
    7bbe:	70 f7       	brcc	.-36     	; 0x7b9c <__gesf2+0x14>
    7bc0:	5e 3b       	cpi	r21, 0xBE	; 190
    7bc2:	10 f0       	brcs	.+4      	; 0x7bc8 <hypot+0x26>
    7bc4:	f1 e4       	ldi	r31, 0x41	; 65
    7bc6:	1c c0       	rjmp	.+56     	; 0x7c00 <hypot+0x5e>
    7bc8:	90 34       	cpi	r25, 0x40	; 64
    7bca:	e0 f4       	brcc	.+56     	; 0x7c04 <hypot+0x62>
    7bcc:	0a c0       	rjmp	.+20     	; 0x7be2 <hypot+0x40>
    7bce:	e9 2f       	mov	r30, r25
    7bd0:	e5 1b       	sub	r30, r21
    7bd2:	ed 30       	cpi	r30, 0x0D	; 13
    7bd4:	28 f7       	brcc	.-54     	; 0x7ba0 <__gesf2+0x18>
    7bd6:	9e 3b       	cpi	r25, 0xBE	; 190
    7bd8:	10 f0       	brcs	.+4      	; 0x7bde <hypot+0x3c>
    7bda:	f1 e4       	ldi	r31, 0x41	; 65
    7bdc:	11 c0       	rjmp	.+34     	; 0x7c00 <hypot+0x5e>
    7bde:	50 34       	cpi	r21, 0x40	; 64
    7be0:	88 f4       	brcc	.+34     	; 0x7c04 <hypot+0x62>
    7be2:	f9 ea       	ldi	r31, 0xA9	; 169
    7be4:	88 23       	and	r24, r24
    7be6:	2a f0       	brmi	.+10     	; 0x7bf2 <hypot+0x50>
    7be8:	9a 95       	dec	r25
    7bea:	66 0f       	add	r22, r22
    7bec:	77 1f       	adc	r23, r23
    7bee:	88 1f       	adc	r24, r24
    7bf0:	da f7       	brpl	.-10     	; 0x7be8 <hypot+0x46>
    7bf2:	44 23       	and	r20, r20
    7bf4:	2a f0       	brmi	.+10     	; 0x7c00 <hypot+0x5e>
    7bf6:	5a 95       	dec	r21
    7bf8:	22 0f       	add	r18, r18
    7bfa:	33 1f       	adc	r19, r19
    7bfc:	44 1f       	adc	r20, r20
    7bfe:	da f7       	brpl	.-10     	; 0x7bf6 <hypot+0x54>
    7c00:	9f 1b       	sub	r25, r31
    7c02:	5f 1b       	sub	r21, r31
    7c04:	ff 93       	push	r31
    7c06:	1f 93       	push	r17
    7c08:	0f 93       	push	r16
    7c0a:	ff 92       	push	r15
    7c0c:	ef 92       	push	r14
    7c0e:	79 01       	movw	r14, r18
    7c10:	8a 01       	movw	r16, r20
    7c12:	bb 27       	eor	r27, r27
    7c14:	ab 2f       	mov	r26, r27
    7c16:	9b 01       	movw	r18, r22
    7c18:	ac 01       	movw	r20, r24
    7c1a:	96 d0       	rcall	.+300    	; 0x7d48 <__mulsf3_pse>
    7c1c:	97 01       	movw	r18, r14
    7c1e:	a8 01       	movw	r20, r16
    7c20:	bf 93       	push	r27
    7c22:	7b 01       	movw	r14, r22
    7c24:	8c 01       	movw	r16, r24
    7c26:	aa 27       	eor	r26, r26
    7c28:	ba 2f       	mov	r27, r26
    7c2a:	b9 01       	movw	r22, r18
    7c2c:	ca 01       	movw	r24, r20
    7c2e:	8c d0       	rcall	.+280    	; 0x7d48 <__mulsf3_pse>
    7c30:	af 91       	pop	r26
    7c32:	97 01       	movw	r18, r14
    7c34:	a8 01       	movw	r20, r16
    7c36:	ef 90       	pop	r14
    7c38:	ff 90       	pop	r15
    7c3a:	0f 91       	pop	r16
    7c3c:	1f 91       	pop	r17
    7c3e:	26 dd       	rcall	.-1460   	; 0x768c <__addsf3x>
    7c40:	41 df       	rcall	.-382    	; 0x7ac4 <__fp_round>
    7c42:	e1 d0       	rcall	.+450    	; 0x7e06 <sqrt>
    7c44:	4f 91       	pop	r20
    7c46:	40 ff       	sbrs	r20, 0
    7c48:	08 95       	ret
    7c4a:	55 27       	eor	r21, r21
    7c4c:	47 fd       	sbrc	r20, 7
    7c4e:	50 95       	com	r21
    7c50:	09 c0       	rjmp	.+18     	; 0x7c64 <ldexp>

00007c52 <inverse>:
    7c52:	9b 01       	movw	r18, r22
    7c54:	ac 01       	movw	r20, r24
    7c56:	60 e0       	ldi	r22, 0x00	; 0
    7c58:	70 e0       	ldi	r23, 0x00	; 0
    7c5a:	80 e8       	ldi	r24, 0x80	; 128
    7c5c:	9f e3       	ldi	r25, 0x3F	; 63
    7c5e:	ab cd       	rjmp	.-1194   	; 0x77b6 <__divsf3>
    7c60:	a4 ce       	rjmp	.-696    	; 0x79aa <__fp_inf>
    7c62:	c4 ce       	rjmp	.-632    	; 0x79ec <__fp_mpack>

00007c64 <ldexp>:
    7c64:	59 df       	rcall	.-334    	; 0x7b18 <__fp_splitA>
    7c66:	e8 f3       	brcs	.-6      	; 0x7c62 <inverse+0x10>
    7c68:	99 23       	and	r25, r25
    7c6a:	d9 f3       	breq	.-10     	; 0x7c62 <inverse+0x10>
    7c6c:	94 0f       	add	r25, r20
    7c6e:	51 1d       	adc	r21, r1
    7c70:	bb f3       	brvs	.-18     	; 0x7c60 <inverse+0xe>
    7c72:	91 50       	subi	r25, 0x01	; 1
    7c74:	50 40       	sbci	r21, 0x00	; 0
    7c76:	94 f0       	brlt	.+36     	; 0x7c9c <ldexp+0x38>
    7c78:	59 f0       	breq	.+22     	; 0x7c90 <ldexp+0x2c>
    7c7a:	88 23       	and	r24, r24
    7c7c:	32 f0       	brmi	.+12     	; 0x7c8a <ldexp+0x26>
    7c7e:	66 0f       	add	r22, r22
    7c80:	77 1f       	adc	r23, r23
    7c82:	88 1f       	adc	r24, r24
    7c84:	91 50       	subi	r25, 0x01	; 1
    7c86:	50 40       	sbci	r21, 0x00	; 0
    7c88:	c1 f7       	brne	.-16     	; 0x7c7a <ldexp+0x16>
    7c8a:	9e 3f       	cpi	r25, 0xFE	; 254
    7c8c:	51 05       	cpc	r21, r1
    7c8e:	44 f7       	brge	.-48     	; 0x7c60 <inverse+0xe>
    7c90:	88 0f       	add	r24, r24
    7c92:	91 1d       	adc	r25, r1
    7c94:	96 95       	lsr	r25
    7c96:	87 95       	ror	r24
    7c98:	97 f9       	bld	r25, 7
    7c9a:	08 95       	ret
    7c9c:	5f 3f       	cpi	r21, 0xFF	; 255
    7c9e:	ac f0       	brlt	.+42     	; 0x7cca <ldexp+0x66>
    7ca0:	98 3e       	cpi	r25, 0xE8	; 232
    7ca2:	9c f0       	brlt	.+38     	; 0x7cca <ldexp+0x66>
    7ca4:	bb 27       	eor	r27, r27
    7ca6:	86 95       	lsr	r24
    7ca8:	77 95       	ror	r23
    7caa:	67 95       	ror	r22
    7cac:	b7 95       	ror	r27
    7cae:	08 f4       	brcc	.+2      	; 0x7cb2 <ldexp+0x4e>
    7cb0:	b1 60       	ori	r27, 0x01	; 1
    7cb2:	93 95       	inc	r25
    7cb4:	c1 f7       	brne	.-16     	; 0x7ca6 <ldexp+0x42>
    7cb6:	bb 0f       	add	r27, r27
    7cb8:	58 f7       	brcc	.-42     	; 0x7c90 <ldexp+0x2c>
    7cba:	11 f4       	brne	.+4      	; 0x7cc0 <ldexp+0x5c>
    7cbc:	60 ff       	sbrs	r22, 0
    7cbe:	e8 cf       	rjmp	.-48     	; 0x7c90 <ldexp+0x2c>
    7cc0:	6f 5f       	subi	r22, 0xFF	; 255
    7cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    7cc4:	8f 4f       	sbci	r24, 0xFF	; 255
    7cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    7cc8:	e3 cf       	rjmp	.-58     	; 0x7c90 <ldexp+0x2c>
    7cca:	58 cf       	rjmp	.-336    	; 0x7b7c <__fp_szero>

00007ccc <lround>:
    7ccc:	25 df       	rcall	.-438    	; 0x7b18 <__fp_splitA>
    7cce:	58 f1       	brcs	.+86     	; 0x7d26 <lround+0x5a>
    7cd0:	9e 57       	subi	r25, 0x7E	; 126
    7cd2:	58 f1       	brcs	.+86     	; 0x7d2a <lround+0x5e>
    7cd4:	98 51       	subi	r25, 0x18	; 24
    7cd6:	a0 f0       	brcs	.+40     	; 0x7d00 <lround+0x34>
    7cd8:	e9 f0       	breq	.+58     	; 0x7d14 <lround+0x48>
    7cda:	98 30       	cpi	r25, 0x08	; 8
    7cdc:	20 f5       	brcc	.+72     	; 0x7d26 <lround+0x5a>
    7cde:	09 2e       	mov	r0, r25
    7ce0:	99 27       	eor	r25, r25
    7ce2:	66 0f       	add	r22, r22
    7ce4:	77 1f       	adc	r23, r23
    7ce6:	88 1f       	adc	r24, r24
    7ce8:	99 1f       	adc	r25, r25
    7cea:	0a 94       	dec	r0
    7cec:	d1 f7       	brne	.-12     	; 0x7ce2 <lround+0x16>
    7cee:	12 c0       	rjmp	.+36     	; 0x7d14 <lround+0x48>
    7cf0:	06 2e       	mov	r0, r22
    7cf2:	67 2f       	mov	r22, r23
    7cf4:	78 2f       	mov	r23, r24
    7cf6:	88 27       	eor	r24, r24
    7cf8:	98 5f       	subi	r25, 0xF8	; 248
    7cfa:	11 f4       	brne	.+4      	; 0x7d00 <lround+0x34>
    7cfc:	00 0c       	add	r0, r0
    7cfe:	07 c0       	rjmp	.+14     	; 0x7d0e <lround+0x42>
    7d00:	99 3f       	cpi	r25, 0xF9	; 249
    7d02:	b4 f3       	brlt	.-20     	; 0x7cf0 <lround+0x24>
    7d04:	86 95       	lsr	r24
    7d06:	77 95       	ror	r23
    7d08:	67 95       	ror	r22
    7d0a:	93 95       	inc	r25
    7d0c:	d9 f7       	brne	.-10     	; 0x7d04 <lround+0x38>
    7d0e:	61 1d       	adc	r22, r1
    7d10:	71 1d       	adc	r23, r1
    7d12:	81 1d       	adc	r24, r1
    7d14:	3e f4       	brtc	.+14     	; 0x7d24 <lround+0x58>
    7d16:	90 95       	com	r25
    7d18:	80 95       	com	r24
    7d1a:	70 95       	com	r23
    7d1c:	61 95       	neg	r22
    7d1e:	7f 4f       	sbci	r23, 0xFF	; 255
    7d20:	8f 4f       	sbci	r24, 0xFF	; 255
    7d22:	9f 4f       	sbci	r25, 0xFF	; 255
    7d24:	08 95       	ret
    7d26:	68 94       	set
    7d28:	29 cf       	rjmp	.-430    	; 0x7b7c <__fp_szero>
    7d2a:	27 cf       	rjmp	.-434    	; 0x7b7a <__fp_zero>

00007d2c <__mulsf3>:
    7d2c:	0b d0       	rcall	.+22     	; 0x7d44 <__mulsf3x>
    7d2e:	ca ce       	rjmp	.-620    	; 0x7ac4 <__fp_round>
    7d30:	93 de       	rcall	.-730    	; 0x7a58 <__fp_pscA>
    7d32:	28 f0       	brcs	.+10     	; 0x7d3e <__mulsf3+0x12>
    7d34:	98 de       	rcall	.-720    	; 0x7a66 <__fp_pscB>
    7d36:	18 f0       	brcs	.+6      	; 0x7d3e <__mulsf3+0x12>
    7d38:	95 23       	and	r25, r21
    7d3a:	09 f0       	breq	.+2      	; 0x7d3e <__mulsf3+0x12>
    7d3c:	36 ce       	rjmp	.-916    	; 0x79aa <__fp_inf>
    7d3e:	64 ce       	rjmp	.-824    	; 0x7a08 <__fp_nan>
    7d40:	11 24       	eor	r1, r1
    7d42:	1c cf       	rjmp	.-456    	; 0x7b7c <__fp_szero>

00007d44 <__mulsf3x>:
    7d44:	e1 de       	rcall	.-574    	; 0x7b08 <__fp_split3>
    7d46:	a0 f3       	brcs	.-24     	; 0x7d30 <__mulsf3+0x4>

00007d48 <__mulsf3_pse>:
    7d48:	95 9f       	mul	r25, r21
    7d4a:	d1 f3       	breq	.-12     	; 0x7d40 <__mulsf3+0x14>
    7d4c:	95 0f       	add	r25, r21
    7d4e:	50 e0       	ldi	r21, 0x00	; 0
    7d50:	55 1f       	adc	r21, r21
    7d52:	62 9f       	mul	r22, r18
    7d54:	f0 01       	movw	r30, r0
    7d56:	72 9f       	mul	r23, r18
    7d58:	bb 27       	eor	r27, r27
    7d5a:	f0 0d       	add	r31, r0
    7d5c:	b1 1d       	adc	r27, r1
    7d5e:	63 9f       	mul	r22, r19
    7d60:	aa 27       	eor	r26, r26
    7d62:	f0 0d       	add	r31, r0
    7d64:	b1 1d       	adc	r27, r1
    7d66:	aa 1f       	adc	r26, r26
    7d68:	64 9f       	mul	r22, r20
    7d6a:	66 27       	eor	r22, r22
    7d6c:	b0 0d       	add	r27, r0
    7d6e:	a1 1d       	adc	r26, r1
    7d70:	66 1f       	adc	r22, r22
    7d72:	82 9f       	mul	r24, r18
    7d74:	22 27       	eor	r18, r18
    7d76:	b0 0d       	add	r27, r0
    7d78:	a1 1d       	adc	r26, r1
    7d7a:	62 1f       	adc	r22, r18
    7d7c:	73 9f       	mul	r23, r19
    7d7e:	b0 0d       	add	r27, r0
    7d80:	a1 1d       	adc	r26, r1
    7d82:	62 1f       	adc	r22, r18
    7d84:	83 9f       	mul	r24, r19
    7d86:	a0 0d       	add	r26, r0
    7d88:	61 1d       	adc	r22, r1
    7d8a:	22 1f       	adc	r18, r18
    7d8c:	74 9f       	mul	r23, r20
    7d8e:	33 27       	eor	r19, r19
    7d90:	a0 0d       	add	r26, r0
    7d92:	61 1d       	adc	r22, r1
    7d94:	23 1f       	adc	r18, r19
    7d96:	84 9f       	mul	r24, r20
    7d98:	60 0d       	add	r22, r0
    7d9a:	21 1d       	adc	r18, r1
    7d9c:	82 2f       	mov	r24, r18
    7d9e:	76 2f       	mov	r23, r22
    7da0:	6a 2f       	mov	r22, r26
    7da2:	11 24       	eor	r1, r1
    7da4:	9f 57       	subi	r25, 0x7F	; 127
    7da6:	50 40       	sbci	r21, 0x00	; 0
    7da8:	8a f0       	brmi	.+34     	; 0x7dcc <__mulsf3_pse+0x84>
    7daa:	e1 f0       	breq	.+56     	; 0x7de4 <__mulsf3_pse+0x9c>
    7dac:	88 23       	and	r24, r24
    7dae:	4a f0       	brmi	.+18     	; 0x7dc2 <__mulsf3_pse+0x7a>
    7db0:	ee 0f       	add	r30, r30
    7db2:	ff 1f       	adc	r31, r31
    7db4:	bb 1f       	adc	r27, r27
    7db6:	66 1f       	adc	r22, r22
    7db8:	77 1f       	adc	r23, r23
    7dba:	88 1f       	adc	r24, r24
    7dbc:	91 50       	subi	r25, 0x01	; 1
    7dbe:	50 40       	sbci	r21, 0x00	; 0
    7dc0:	a9 f7       	brne	.-22     	; 0x7dac <__mulsf3_pse+0x64>
    7dc2:	9e 3f       	cpi	r25, 0xFE	; 254
    7dc4:	51 05       	cpc	r21, r1
    7dc6:	70 f0       	brcs	.+28     	; 0x7de4 <__mulsf3_pse+0x9c>
    7dc8:	f0 cd       	rjmp	.-1056   	; 0x79aa <__fp_inf>
    7dca:	d8 ce       	rjmp	.-592    	; 0x7b7c <__fp_szero>
    7dcc:	5f 3f       	cpi	r21, 0xFF	; 255
    7dce:	ec f3       	brlt	.-6      	; 0x7dca <__mulsf3_pse+0x82>
    7dd0:	98 3e       	cpi	r25, 0xE8	; 232
    7dd2:	dc f3       	brlt	.-10     	; 0x7dca <__mulsf3_pse+0x82>
    7dd4:	86 95       	lsr	r24
    7dd6:	77 95       	ror	r23
    7dd8:	67 95       	ror	r22
    7dda:	b7 95       	ror	r27
    7ddc:	f7 95       	ror	r31
    7dde:	e7 95       	ror	r30
    7de0:	9f 5f       	subi	r25, 0xFF	; 255
    7de2:	c1 f7       	brne	.-16     	; 0x7dd4 <__mulsf3_pse+0x8c>
    7de4:	fe 2b       	or	r31, r30
    7de6:	88 0f       	add	r24, r24
    7de8:	91 1d       	adc	r25, r1
    7dea:	96 95       	lsr	r25
    7dec:	87 95       	ror	r24
    7dee:	97 f9       	bld	r25, 7
    7df0:	08 95       	ret

00007df2 <sin>:
    7df2:	9f 93       	push	r25
    7df4:	40 de       	rcall	.-896    	; 0x7a76 <__fp_rempio2>
    7df6:	0f 90       	pop	r0
    7df8:	07 fc       	sbrc	r0, 7
    7dfa:	ee 5f       	subi	r30, 0xFE	; 254
    7dfc:	74 ce       	rjmp	.-792    	; 0x7ae6 <__fp_sinus>
    7dfe:	11 f4       	brne	.+4      	; 0x7e04 <sin+0x12>
    7e00:	0e f4       	brtc	.+2      	; 0x7e04 <sin+0x12>
    7e02:	02 ce       	rjmp	.-1020   	; 0x7a08 <__fp_nan>
    7e04:	f3 cd       	rjmp	.-1050   	; 0x79ec <__fp_mpack>

00007e06 <sqrt>:
    7e06:	88 de       	rcall	.-752    	; 0x7b18 <__fp_splitA>
    7e08:	d0 f3       	brcs	.-12     	; 0x7dfe <sin+0xc>
    7e0a:	99 23       	and	r25, r25
    7e0c:	d9 f3       	breq	.-10     	; 0x7e04 <sin+0x12>
    7e0e:	ce f3       	brts	.-14     	; 0x7e02 <sin+0x10>
    7e10:	9f 57       	subi	r25, 0x7F	; 127
    7e12:	55 0b       	sbc	r21, r21
    7e14:	87 ff       	sbrs	r24, 7
    7e16:	43 d0       	rcall	.+134    	; 0x7e9e <__fp_norm2>
    7e18:	00 24       	eor	r0, r0
    7e1a:	a0 e6       	ldi	r26, 0x60	; 96
    7e1c:	40 ea       	ldi	r20, 0xA0	; 160
    7e1e:	90 01       	movw	r18, r0
    7e20:	80 58       	subi	r24, 0x80	; 128
    7e22:	56 95       	lsr	r21
    7e24:	97 95       	ror	r25
    7e26:	28 f4       	brcc	.+10     	; 0x7e32 <sqrt+0x2c>
    7e28:	80 5c       	subi	r24, 0xC0	; 192
    7e2a:	66 0f       	add	r22, r22
    7e2c:	77 1f       	adc	r23, r23
    7e2e:	88 1f       	adc	r24, r24
    7e30:	20 f0       	brcs	.+8      	; 0x7e3a <sqrt+0x34>
    7e32:	26 17       	cp	r18, r22
    7e34:	37 07       	cpc	r19, r23
    7e36:	48 07       	cpc	r20, r24
    7e38:	30 f4       	brcc	.+12     	; 0x7e46 <sqrt+0x40>
    7e3a:	62 1b       	sub	r22, r18
    7e3c:	73 0b       	sbc	r23, r19
    7e3e:	84 0b       	sbc	r24, r20
    7e40:	20 29       	or	r18, r0
    7e42:	31 29       	or	r19, r1
    7e44:	4a 2b       	or	r20, r26
    7e46:	a6 95       	lsr	r26
    7e48:	17 94       	ror	r1
    7e4a:	07 94       	ror	r0
    7e4c:	20 25       	eor	r18, r0
    7e4e:	31 25       	eor	r19, r1
    7e50:	4a 27       	eor	r20, r26
    7e52:	58 f7       	brcc	.-42     	; 0x7e2a <sqrt+0x24>
    7e54:	66 0f       	add	r22, r22
    7e56:	77 1f       	adc	r23, r23
    7e58:	88 1f       	adc	r24, r24
    7e5a:	20 f0       	brcs	.+8      	; 0x7e64 <sqrt+0x5e>
    7e5c:	26 17       	cp	r18, r22
    7e5e:	37 07       	cpc	r19, r23
    7e60:	48 07       	cpc	r20, r24
    7e62:	30 f4       	brcc	.+12     	; 0x7e70 <sqrt+0x6a>
    7e64:	62 0b       	sbc	r22, r18
    7e66:	73 0b       	sbc	r23, r19
    7e68:	84 0b       	sbc	r24, r20
    7e6a:	20 0d       	add	r18, r0
    7e6c:	31 1d       	adc	r19, r1
    7e6e:	41 1d       	adc	r20, r1
    7e70:	a0 95       	com	r26
    7e72:	81 f7       	brne	.-32     	; 0x7e54 <sqrt+0x4e>
    7e74:	b9 01       	movw	r22, r18
    7e76:	84 2f       	mov	r24, r20
    7e78:	91 58       	subi	r25, 0x81	; 129
    7e7a:	88 0f       	add	r24, r24
    7e7c:	96 95       	lsr	r25
    7e7e:	87 95       	ror	r24
    7e80:	08 95       	ret

00007e82 <square>:
    7e82:	9b 01       	movw	r18, r22
    7e84:	ac 01       	movw	r20, r24
    7e86:	52 cf       	rjmp	.-348    	; 0x7d2c <__mulsf3>

00007e88 <trunc>:
    7e88:	61 de       	rcall	.-830    	; 0x7b4c <__fp_trunc>
    7e8a:	20 f0       	brcs	.+8      	; 0x7e94 <trunc+0xc>
    7e8c:	9f 37       	cpi	r25, 0x7F	; 127
    7e8e:	08 f4       	brcc	.+2      	; 0x7e92 <trunc+0xa>
    7e90:	75 ce       	rjmp	.-790    	; 0x7b7c <__fp_szero>
    7e92:	91 cd       	rjmp	.-1246   	; 0x79b6 <__fp_mintl>
    7e94:	ab cd       	rjmp	.-1194   	; 0x79ec <__fp_mpack>

00007e96 <__unordsf2>:
    7e96:	65 dd       	rcall	.-1334   	; 0x7962 <__fp_cmp>
    7e98:	88 0b       	sbc	r24, r24
    7e9a:	99 0b       	sbc	r25, r25
    7e9c:	08 95       	ret

00007e9e <__fp_norm2>:
    7e9e:	91 50       	subi	r25, 0x01	; 1
    7ea0:	50 40       	sbci	r21, 0x00	; 0
    7ea2:	66 0f       	add	r22, r22
    7ea4:	77 1f       	adc	r23, r23
    7ea6:	88 1f       	adc	r24, r24
    7ea8:	d2 f7       	brpl	.-12     	; 0x7e9e <__fp_norm2>
    7eaa:	08 95       	ret

00007eac <__fp_powsodd>:
    7eac:	9f 93       	push	r25
    7eae:	8f 93       	push	r24
    7eb0:	7f 93       	push	r23
    7eb2:	6f 93       	push	r22
    7eb4:	ff 93       	push	r31
    7eb6:	ef 93       	push	r30
    7eb8:	9b 01       	movw	r18, r22
    7eba:	ac 01       	movw	r20, r24
    7ebc:	37 df       	rcall	.-402    	; 0x7d2c <__mulsf3>
    7ebe:	ef 91       	pop	r30
    7ec0:	ff 91       	pop	r31
    7ec2:	a5 dd       	rcall	.-1206   	; 0x7a0e <__fp_powser>
    7ec4:	2f 91       	pop	r18
    7ec6:	3f 91       	pop	r19
    7ec8:	4f 91       	pop	r20
    7eca:	5f 91       	pop	r21
    7ecc:	2f cf       	rjmp	.-418    	; 0x7d2c <__mulsf3>

00007ece <__mulsi3>:
    7ece:	62 9f       	mul	r22, r18
    7ed0:	d0 01       	movw	r26, r0
    7ed2:	73 9f       	mul	r23, r19
    7ed4:	f0 01       	movw	r30, r0
    7ed6:	82 9f       	mul	r24, r18
    7ed8:	e0 0d       	add	r30, r0
    7eda:	f1 1d       	adc	r31, r1
    7edc:	64 9f       	mul	r22, r20
    7ede:	e0 0d       	add	r30, r0
    7ee0:	f1 1d       	adc	r31, r1
    7ee2:	92 9f       	mul	r25, r18
    7ee4:	f0 0d       	add	r31, r0
    7ee6:	83 9f       	mul	r24, r19
    7ee8:	f0 0d       	add	r31, r0
    7eea:	74 9f       	mul	r23, r20
    7eec:	f0 0d       	add	r31, r0
    7eee:	65 9f       	mul	r22, r21
    7ef0:	f0 0d       	add	r31, r0
    7ef2:	99 27       	eor	r25, r25
    7ef4:	72 9f       	mul	r23, r18
    7ef6:	b0 0d       	add	r27, r0
    7ef8:	e1 1d       	adc	r30, r1
    7efa:	f9 1f       	adc	r31, r25
    7efc:	63 9f       	mul	r22, r19
    7efe:	b0 0d       	add	r27, r0
    7f00:	e1 1d       	adc	r30, r1
    7f02:	f9 1f       	adc	r31, r25
    7f04:	bd 01       	movw	r22, r26
    7f06:	cf 01       	movw	r24, r30
    7f08:	11 24       	eor	r1, r1
    7f0a:	08 95       	ret

00007f0c <__udivmodsi4>:
    7f0c:	a1 e2       	ldi	r26, 0x21	; 33
    7f0e:	1a 2e       	mov	r1, r26
    7f10:	aa 1b       	sub	r26, r26
    7f12:	bb 1b       	sub	r27, r27
    7f14:	fd 01       	movw	r30, r26
    7f16:	0d c0       	rjmp	.+26     	; 0x7f32 <__udivmodsi4_ep>

00007f18 <__udivmodsi4_loop>:
    7f18:	aa 1f       	adc	r26, r26
    7f1a:	bb 1f       	adc	r27, r27
    7f1c:	ee 1f       	adc	r30, r30
    7f1e:	ff 1f       	adc	r31, r31
    7f20:	a2 17       	cp	r26, r18
    7f22:	b3 07       	cpc	r27, r19
    7f24:	e4 07       	cpc	r30, r20
    7f26:	f5 07       	cpc	r31, r21
    7f28:	20 f0       	brcs	.+8      	; 0x7f32 <__udivmodsi4_ep>
    7f2a:	a2 1b       	sub	r26, r18
    7f2c:	b3 0b       	sbc	r27, r19
    7f2e:	e4 0b       	sbc	r30, r20
    7f30:	f5 0b       	sbc	r31, r21

00007f32 <__udivmodsi4_ep>:
    7f32:	66 1f       	adc	r22, r22
    7f34:	77 1f       	adc	r23, r23
    7f36:	88 1f       	adc	r24, r24
    7f38:	99 1f       	adc	r25, r25
    7f3a:	1a 94       	dec	r1
    7f3c:	69 f7       	brne	.-38     	; 0x7f18 <__udivmodsi4_loop>
    7f3e:	60 95       	com	r22
    7f40:	70 95       	com	r23
    7f42:	80 95       	com	r24
    7f44:	90 95       	com	r25
    7f46:	9b 01       	movw	r18, r22
    7f48:	ac 01       	movw	r20, r24
    7f4a:	bd 01       	movw	r22, r26
    7f4c:	cf 01       	movw	r24, r30
    7f4e:	08 95       	ret

00007f50 <__prologue_saves__>:
    7f50:	2f 92       	push	r2
    7f52:	3f 92       	push	r3
    7f54:	4f 92       	push	r4
    7f56:	5f 92       	push	r5
    7f58:	6f 92       	push	r6
    7f5a:	7f 92       	push	r7
    7f5c:	8f 92       	push	r8
    7f5e:	9f 92       	push	r9
    7f60:	af 92       	push	r10
    7f62:	bf 92       	push	r11
    7f64:	cf 92       	push	r12
    7f66:	df 92       	push	r13
    7f68:	ef 92       	push	r14
    7f6a:	ff 92       	push	r15
    7f6c:	0f 93       	push	r16
    7f6e:	1f 93       	push	r17
    7f70:	cf 93       	push	r28
    7f72:	df 93       	push	r29
    7f74:	cd b7       	in	r28, 0x3d	; 61
    7f76:	de b7       	in	r29, 0x3e	; 62
    7f78:	ca 1b       	sub	r28, r26
    7f7a:	db 0b       	sbc	r29, r27
    7f7c:	0f b6       	in	r0, 0x3f	; 63
    7f7e:	f8 94       	cli
    7f80:	de bf       	out	0x3e, r29	; 62
    7f82:	0f be       	out	0x3f, r0	; 63
    7f84:	cd bf       	out	0x3d, r28	; 61
    7f86:	19 94       	eijmp

00007f88 <__epilogue_restores__>:
    7f88:	2a 88       	ldd	r2, Y+18	; 0x12
    7f8a:	39 88       	ldd	r3, Y+17	; 0x11
    7f8c:	48 88       	ldd	r4, Y+16	; 0x10
    7f8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    7f90:	6e 84       	ldd	r6, Y+14	; 0x0e
    7f92:	7d 84       	ldd	r7, Y+13	; 0x0d
    7f94:	8c 84       	ldd	r8, Y+12	; 0x0c
    7f96:	9b 84       	ldd	r9, Y+11	; 0x0b
    7f98:	aa 84       	ldd	r10, Y+10	; 0x0a
    7f9a:	b9 84       	ldd	r11, Y+9	; 0x09
    7f9c:	c8 84       	ldd	r12, Y+8	; 0x08
    7f9e:	df 80       	ldd	r13, Y+7	; 0x07
    7fa0:	ee 80       	ldd	r14, Y+6	; 0x06
    7fa2:	fd 80       	ldd	r15, Y+5	; 0x05
    7fa4:	0c 81       	ldd	r16, Y+4	; 0x04
    7fa6:	1b 81       	ldd	r17, Y+3	; 0x03
    7fa8:	aa 81       	ldd	r26, Y+2	; 0x02
    7faa:	b9 81       	ldd	r27, Y+1	; 0x01
    7fac:	ce 0f       	add	r28, r30
    7fae:	d1 1d       	adc	r29, r1
    7fb0:	0f b6       	in	r0, 0x3f	; 63
    7fb2:	f8 94       	cli
    7fb4:	de bf       	out	0x3e, r29	; 62
    7fb6:	0f be       	out	0x3f, r0	; 63
    7fb8:	cd bf       	out	0x3d, r28	; 61
    7fba:	ed 01       	movw	r28, r26
    7fbc:	08 95       	ret

00007fbe <strtod>:
    7fbe:	8f 92       	push	r8
    7fc0:	9f 92       	push	r9
    7fc2:	af 92       	push	r10
    7fc4:	bf 92       	push	r11
    7fc6:	cf 92       	push	r12
    7fc8:	df 92       	push	r13
    7fca:	ef 92       	push	r14
    7fcc:	ff 92       	push	r15
    7fce:	0f 93       	push	r16
    7fd0:	1f 93       	push	r17
    7fd2:	cf 93       	push	r28
    7fd4:	df 93       	push	r29
    7fd6:	ec 01       	movw	r28, r24
    7fd8:	5b 01       	movw	r10, r22
    7fda:	61 15       	cp	r22, r1
    7fdc:	71 05       	cpc	r23, r1
    7fde:	19 f0       	breq	.+6      	; 0x7fe6 <strtod+0x28>
    7fe0:	fb 01       	movw	r30, r22
    7fe2:	80 83       	st	Z, r24
    7fe4:	91 83       	std	Z+1, r25	; 0x01
    7fe6:	f9 90       	ld	r15, Y+
    7fe8:	8f 2d       	mov	r24, r15
    7fea:	90 e0       	ldi	r25, 0x00	; 0
    7fec:	0e 94 43 42 	call	0x8486	; 0x8486 <isspace>
    7ff0:	89 2b       	or	r24, r25
    7ff2:	c9 f7       	brne	.-14     	; 0x7fe6 <strtod+0x28>
    7ff4:	fd e2       	ldi	r31, 0x2D	; 45
    7ff6:	ff 16       	cp	r15, r31
    7ff8:	21 f4       	brne	.+8      	; 0x8002 <strtod+0x44>
    7ffa:	f9 90       	ld	r15, Y+
    7ffc:	ee 24       	eor	r14, r14
    7ffe:	e3 94       	inc	r14
    8000:	05 c0       	rjmp	.+10     	; 0x800c <strtod+0x4e>
    8002:	2b e2       	ldi	r18, 0x2B	; 43
    8004:	f2 16       	cp	r15, r18
    8006:	09 f4       	brne	.+2      	; 0x800a <strtod+0x4c>
    8008:	f9 90       	ld	r15, Y+
    800a:	ee 24       	eor	r14, r14
    800c:	8e 01       	movw	r16, r28
    800e:	01 50       	subi	r16, 0x01	; 1
    8010:	10 40       	sbci	r17, 0x00	; 0
    8012:	c8 01       	movw	r24, r16
    8014:	6d ef       	ldi	r22, 0xFD	; 253
    8016:	7a e1       	ldi	r23, 0x1A	; 26
    8018:	43 e0       	ldi	r20, 0x03	; 3
    801a:	50 e0       	ldi	r21, 0x00	; 0
    801c:	0e 94 4b 42 	call	0x8496	; 0x8496 <strncasecmp_P>
    8020:	89 2b       	or	r24, r25
    8022:	01 f5       	brne	.+64     	; 0x8064 <strtod+0xa6>
    8024:	8e 01       	movw	r16, r28
    8026:	0e 5f       	subi	r16, 0xFE	; 254
    8028:	1f 4f       	sbci	r17, 0xFF	; 255
    802a:	c8 01       	movw	r24, r16
    802c:	60 e0       	ldi	r22, 0x00	; 0
    802e:	7b e1       	ldi	r23, 0x1B	; 27
    8030:	45 e0       	ldi	r20, 0x05	; 5
    8032:	50 e0       	ldi	r21, 0x00	; 0
    8034:	0e 94 4b 42 	call	0x8496	; 0x8496 <strncasecmp_P>
    8038:	89 2b       	or	r24, r25
    803a:	19 f4       	brne	.+6      	; 0x8042 <strtod+0x84>
    803c:	8e 01       	movw	r16, r28
    803e:	09 5f       	subi	r16, 0xF9	; 249
    8040:	1f 4f       	sbci	r17, 0xFF	; 255
    8042:	a1 14       	cp	r10, r1
    8044:	b1 04       	cpc	r11, r1
    8046:	19 f0       	breq	.+6      	; 0x804e <strtod+0x90>
    8048:	f5 01       	movw	r30, r10
    804a:	00 83       	st	Z, r16
    804c:	11 83       	std	Z+1, r17	; 0x01
    804e:	e0 fc       	sbrc	r14, 0
    8050:	04 c0       	rjmp	.+8      	; 0x805a <strtod+0x9c>
    8052:	70 e0       	ldi	r23, 0x00	; 0
    8054:	90 e0       	ldi	r25, 0x00	; 0
    8056:	80 e8       	ldi	r24, 0x80	; 128
    8058:	14 c0       	rjmp	.+40     	; 0x8082 <strtod+0xc4>
    805a:	70 e0       	ldi	r23, 0x00	; 0
    805c:	90 e0       	ldi	r25, 0x00	; 0
    805e:	80 e8       	ldi	r24, 0x80	; 128
    8060:	6f ef       	ldi	r22, 0xFF	; 255
    8062:	08 c1       	rjmp	.+528    	; 0x8274 <strtod+0x2b6>
    8064:	c8 01       	movw	r24, r16
    8066:	65 e0       	ldi	r22, 0x05	; 5
    8068:	7b e1       	ldi	r23, 0x1B	; 27
    806a:	43 e0       	ldi	r20, 0x03	; 3
    806c:	50 e0       	ldi	r21, 0x00	; 0
    806e:	0e 94 4b 42 	call	0x8496	; 0x8496 <strncasecmp_P>
    8072:	89 2b       	or	r24, r25
    8074:	69 f4       	brne	.+26     	; 0x8090 <strtod+0xd2>
    8076:	a1 14       	cp	r10, r1
    8078:	b1 04       	cpc	r11, r1
    807a:	29 f4       	brne	.+10     	; 0x8086 <strtod+0xc8>
    807c:	70 e0       	ldi	r23, 0x00	; 0
    807e:	90 e0       	ldi	r25, 0x00	; 0
    8080:	80 ec       	ldi	r24, 0xC0	; 192
    8082:	6f e7       	ldi	r22, 0x7F	; 127
    8084:	f7 c0       	rjmp	.+494    	; 0x8274 <strtod+0x2b6>
    8086:	22 96       	adiw	r28, 0x02	; 2
    8088:	f5 01       	movw	r30, r10
    808a:	c0 83       	st	Z, r28
    808c:	d1 83       	std	Z+1, r29	; 0x01
    808e:	f6 cf       	rjmp	.-20     	; 0x807c <strtod+0xbe>
    8090:	88 24       	eor	r8, r8
    8092:	99 24       	eor	r9, r9
    8094:	40 e0       	ldi	r20, 0x00	; 0
    8096:	50 e0       	ldi	r21, 0x00	; 0
    8098:	60 e0       	ldi	r22, 0x00	; 0
    809a:	70 e0       	ldi	r23, 0x00	; 0
    809c:	ef 2d       	mov	r30, r15
    809e:	e0 53       	subi	r30, 0x30	; 48
    80a0:	ea 30       	cpi	r30, 0x0A	; 10
    80a2:	a0 f5       	brcc	.+104    	; 0x810c <strtod+0x14e>
    80a4:	f2 e0       	ldi	r31, 0x02	; 2
    80a6:	ef 2a       	or	r14, r31
    80a8:	8e 2d       	mov	r24, r14
    80aa:	90 e0       	ldi	r25, 0x00	; 0
    80ac:	9c 01       	movw	r18, r24
    80ae:	28 70       	andi	r18, 0x08	; 8
    80b0:	30 70       	andi	r19, 0x00	; 0
    80b2:	e2 fe       	sbrs	r14, 2
    80b4:	06 c0       	rjmp	.+12     	; 0x80c2 <strtod+0x104>
    80b6:	23 2b       	or	r18, r19
    80b8:	79 f5       	brne	.+94     	; 0x8118 <strtod+0x15a>
    80ba:	08 94       	sec
    80bc:	81 1c       	adc	r8, r1
    80be:	91 1c       	adc	r9, r1
    80c0:	2b c0       	rjmp	.+86     	; 0x8118 <strtod+0x15a>
    80c2:	23 2b       	or	r18, r19
    80c4:	19 f0       	breq	.+6      	; 0x80cc <strtod+0x10e>
    80c6:	08 94       	sec
    80c8:	81 08       	sbc	r8, r1
    80ca:	91 08       	sbc	r9, r1
    80cc:	db 01       	movw	r26, r22
    80ce:	ca 01       	movw	r24, r20
    80d0:	12 e0       	ldi	r17, 0x02	; 2
    80d2:	88 0f       	add	r24, r24
    80d4:	99 1f       	adc	r25, r25
    80d6:	aa 1f       	adc	r26, r26
    80d8:	bb 1f       	adc	r27, r27
    80da:	1a 95       	dec	r17
    80dc:	d1 f7       	brne	.-12     	; 0x80d2 <strtod+0x114>
    80de:	48 0f       	add	r20, r24
    80e0:	59 1f       	adc	r21, r25
    80e2:	6a 1f       	adc	r22, r26
    80e4:	7b 1f       	adc	r23, r27
    80e6:	44 0f       	add	r20, r20
    80e8:	55 1f       	adc	r21, r21
    80ea:	66 1f       	adc	r22, r22
    80ec:	77 1f       	adc	r23, r23
    80ee:	4e 0f       	add	r20, r30
    80f0:	51 1d       	adc	r21, r1
    80f2:	61 1d       	adc	r22, r1
    80f4:	71 1d       	adc	r23, r1
    80f6:	48 39       	cpi	r20, 0x98	; 152
    80f8:	29 e9       	ldi	r18, 0x99	; 153
    80fa:	52 07       	cpc	r21, r18
    80fc:	29 e9       	ldi	r18, 0x99	; 153
    80fe:	62 07       	cpc	r22, r18
    8100:	29 e1       	ldi	r18, 0x19	; 25
    8102:	72 07       	cpc	r23, r18
    8104:	48 f0       	brcs	.+18     	; 0x8118 <strtod+0x15a>
    8106:	84 e0       	ldi	r24, 0x04	; 4
    8108:	e8 2a       	or	r14, r24
    810a:	06 c0       	rjmp	.+12     	; 0x8118 <strtod+0x15a>
    810c:	ee 3f       	cpi	r30, 0xFE	; 254
    810e:	31 f4       	brne	.+12     	; 0x811c <strtod+0x15e>
    8110:	e3 fc       	sbrc	r14, 3
    8112:	39 c0       	rjmp	.+114    	; 0x8186 <strtod+0x1c8>
    8114:	98 e0       	ldi	r25, 0x08	; 8
    8116:	e9 2a       	or	r14, r25
    8118:	f9 90       	ld	r15, Y+
    811a:	c0 cf       	rjmp	.-128    	; 0x809c <strtod+0xde>
    811c:	e5 33       	cpi	r30, 0x35	; 53
    811e:	11 f0       	breq	.+4      	; 0x8124 <strtod+0x166>
    8120:	e5 31       	cpi	r30, 0x15	; 21
    8122:	89 f5       	brne	.+98     	; 0x8186 <strtod+0x1c8>
    8124:	29 91       	ld	r18, Y+
    8126:	2d 32       	cpi	r18, 0x2D	; 45
    8128:	19 f4       	brne	.+6      	; 0x8130 <strtod+0x172>
    812a:	e0 e1       	ldi	r30, 0x10	; 16
    812c:	ee 2a       	or	r14, r30
    812e:	05 c0       	rjmp	.+10     	; 0x813a <strtod+0x17c>
    8130:	2b 32       	cpi	r18, 0x2B	; 43
    8132:	19 f0       	breq	.+6      	; 0x813a <strtod+0x17c>
    8134:	81 e0       	ldi	r24, 0x01	; 1
    8136:	90 e0       	ldi	r25, 0x00	; 0
    8138:	03 c0       	rjmp	.+6      	; 0x8140 <strtod+0x182>
    813a:	29 91       	ld	r18, Y+
    813c:	82 e0       	ldi	r24, 0x02	; 2
    813e:	90 e0       	ldi	r25, 0x00	; 0
    8140:	e2 2f       	mov	r30, r18
    8142:	e0 53       	subi	r30, 0x30	; 48
    8144:	ea 30       	cpi	r30, 0x0A	; 10
    8146:	18 f0       	brcs	.+6      	; 0x814e <strtod+0x190>
    8148:	c8 1b       	sub	r28, r24
    814a:	d9 0b       	sbc	r29, r25
    814c:	1c c0       	rjmp	.+56     	; 0x8186 <strtod+0x1c8>
    814e:	20 e0       	ldi	r18, 0x00	; 0
    8150:	30 e0       	ldi	r19, 0x00	; 0
    8152:	fc e0       	ldi	r31, 0x0C	; 12
    8154:	20 38       	cpi	r18, 0x80	; 128
    8156:	3f 07       	cpc	r19, r31
    8158:	5c f4       	brge	.+22     	; 0x8170 <strtod+0x1b2>
    815a:	c9 01       	movw	r24, r18
    815c:	88 0f       	add	r24, r24
    815e:	99 1f       	adc	r25, r25
    8160:	88 0f       	add	r24, r24
    8162:	99 1f       	adc	r25, r25
    8164:	28 0f       	add	r18, r24
    8166:	39 1f       	adc	r19, r25
    8168:	22 0f       	add	r18, r18
    816a:	33 1f       	adc	r19, r19
    816c:	2e 0f       	add	r18, r30
    816e:	31 1d       	adc	r19, r1
    8170:	e9 91       	ld	r30, Y+
    8172:	e0 53       	subi	r30, 0x30	; 48
    8174:	ea 30       	cpi	r30, 0x0A	; 10
    8176:	68 f3       	brcs	.-38     	; 0x8152 <strtod+0x194>
    8178:	e4 fe       	sbrs	r14, 4
    817a:	03 c0       	rjmp	.+6      	; 0x8182 <strtod+0x1c4>
    817c:	30 95       	com	r19
    817e:	21 95       	neg	r18
    8180:	3f 4f       	sbci	r19, 0xFF	; 255
    8182:	82 0e       	add	r8, r18
    8184:	93 1e       	adc	r9, r19
    8186:	ce 2c       	mov	r12, r14
    8188:	dd 24       	eor	r13, r13
    818a:	e1 fe       	sbrs	r14, 1
    818c:	07 c0       	rjmp	.+14     	; 0x819c <strtod+0x1de>
    818e:	a1 14       	cp	r10, r1
    8190:	b1 04       	cpc	r11, r1
    8192:	21 f0       	breq	.+8      	; 0x819c <strtod+0x1de>
    8194:	21 97       	sbiw	r28, 0x01	; 1
    8196:	f5 01       	movw	r30, r10
    8198:	c0 83       	st	Z, r28
    819a:	d1 83       	std	Z+1, r29	; 0x01
    819c:	cb 01       	movw	r24, r22
    819e:	ba 01       	movw	r22, r20
    81a0:	0e 94 74 3c 	call	0x78e8	; 0x78e8 <__floatunsisf>
    81a4:	7b 01       	movw	r14, r22
    81a6:	8c 01       	movw	r16, r24
    81a8:	f3 e0       	ldi	r31, 0x03	; 3
    81aa:	cf 22       	and	r12, r31
    81ac:	dd 24       	eor	r13, r13
    81ae:	23 e0       	ldi	r18, 0x03	; 3
    81b0:	c2 16       	cp	r12, r18
    81b2:	d1 04       	cpc	r13, r1
    81b4:	21 f4       	brne	.+8      	; 0x81be <strtod+0x200>
    81b6:	17 fb       	bst	r17, 7
    81b8:	10 95       	com	r17
    81ba:	17 f9       	bld	r17, 7
    81bc:	10 95       	com	r17
    81be:	57 01       	movw	r10, r14
    81c0:	68 01       	movw	r12, r16
    81c2:	c8 01       	movw	r24, r16
    81c4:	b7 01       	movw	r22, r14
    81c6:	20 e0       	ldi	r18, 0x00	; 0
    81c8:	30 e0       	ldi	r19, 0x00	; 0
    81ca:	40 e0       	ldi	r20, 0x00	; 0
    81cc:	50 e0       	ldi	r21, 0x00	; 0
    81ce:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <__cmpsf2>
    81d2:	88 23       	and	r24, r24
    81d4:	09 f4       	brne	.+2      	; 0x81d8 <strtod+0x21a>
    81d6:	4a c0       	rjmp	.+148    	; 0x826c <strtod+0x2ae>
    81d8:	97 fe       	sbrs	r9, 7
    81da:	0d c0       	rjmp	.+26     	; 0x81f6 <strtod+0x238>
    81dc:	2c e1       	ldi	r18, 0x1C	; 28
    81de:	e2 2e       	mov	r14, r18
    81e0:	2b e1       	ldi	r18, 0x1B	; 27
    81e2:	f2 2e       	mov	r15, r18
    81e4:	90 94       	com	r9
    81e6:	81 94       	neg	r8
    81e8:	91 08       	sbc	r9, r1
    81ea:	93 94       	inc	r9
    81ec:	c0 e2       	ldi	r28, 0x20	; 32
    81ee:	d0 e0       	ldi	r29, 0x00	; 0
    81f0:	00 e0       	ldi	r16, 0x00	; 0
    81f2:	10 e0       	ldi	r17, 0x00	; 0
    81f4:	12 c0       	rjmp	.+36     	; 0x821a <strtod+0x25c>
    81f6:	94 e3       	ldi	r25, 0x34	; 52
    81f8:	e9 2e       	mov	r14, r25
    81fa:	9b e1       	ldi	r25, 0x1B	; 27
    81fc:	f9 2e       	mov	r15, r25
    81fe:	f6 cf       	rjmp	.-20     	; 0x81ec <strtod+0x22e>
    8200:	f7 01       	movw	r30, r14
    8202:	25 91       	lpm	r18, Z+
    8204:	35 91       	lpm	r19, Z+
    8206:	45 91       	lpm	r20, Z+
    8208:	54 91       	lpm	r21, Z+
    820a:	c6 01       	movw	r24, r12
    820c:	b5 01       	movw	r22, r10
    820e:	0e 94 96 3e 	call	0x7d2c	; 0x7d2c <__mulsf3>
    8212:	5b 01       	movw	r10, r22
    8214:	6c 01       	movw	r12, r24
    8216:	8c 1a       	sub	r8, r28
    8218:	9d 0a       	sbc	r9, r29
    821a:	8c 16       	cp	r8, r28
    821c:	9d 06       	cpc	r9, r29
    821e:	84 f7       	brge	.-32     	; 0x8200 <strtod+0x242>
    8220:	d5 95       	asr	r29
    8222:	c7 95       	ror	r28
    8224:	0f 5f       	subi	r16, 0xFF	; 255
    8226:	1f 4f       	sbci	r17, 0xFF	; 255
    8228:	06 30       	cpi	r16, 0x06	; 6
    822a:	11 05       	cpc	r17, r1
    822c:	29 f0       	breq	.+10     	; 0x8238 <strtod+0x27a>
    822e:	8c ef       	ldi	r24, 0xFC	; 252
    8230:	9f ef       	ldi	r25, 0xFF	; 255
    8232:	e8 0e       	add	r14, r24
    8234:	f9 1e       	adc	r15, r25
    8236:	f1 cf       	rjmp	.-30     	; 0x821a <strtod+0x25c>
    8238:	c5 01       	movw	r24, r10
    823a:	d6 01       	movw	r26, r12
    823c:	7c 01       	movw	r14, r24
    823e:	8d 01       	movw	r16, r26
    8240:	8c 2d       	mov	r24, r12
    8242:	88 0f       	add	r24, r24
    8244:	8d 2d       	mov	r24, r13
    8246:	88 1f       	adc	r24, r24
    8248:	8f 3f       	cpi	r24, 0xFF	; 255
    824a:	51 f0       	breq	.+20     	; 0x8260 <strtod+0x2a2>
    824c:	c6 01       	movw	r24, r12
    824e:	b5 01       	movw	r22, r10
    8250:	20 e0       	ldi	r18, 0x00	; 0
    8252:	30 e0       	ldi	r19, 0x00	; 0
    8254:	40 e0       	ldi	r20, 0x00	; 0
    8256:	50 e0       	ldi	r21, 0x00	; 0
    8258:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <__cmpsf2>
    825c:	88 23       	and	r24, r24
    825e:	31 f4       	brne	.+12     	; 0x826c <strtod+0x2ae>
    8260:	82 e2       	ldi	r24, 0x22	; 34
    8262:	90 e0       	ldi	r25, 0x00	; 0
    8264:	80 93 12 25 	sts	0x2512, r24
    8268:	90 93 13 25 	sts	0x2513, r25
    826c:	7e 2d       	mov	r23, r14
    826e:	9f 2d       	mov	r25, r15
    8270:	80 2f       	mov	r24, r16
    8272:	61 2f       	mov	r22, r17
    8274:	27 2f       	mov	r18, r23
    8276:	39 2f       	mov	r19, r25
    8278:	48 2f       	mov	r20, r24
    827a:	56 2f       	mov	r21, r22
    827c:	b9 01       	movw	r22, r18
    827e:	ca 01       	movw	r24, r20
    8280:	df 91       	pop	r29
    8282:	cf 91       	pop	r28
    8284:	1f 91       	pop	r17
    8286:	0f 91       	pop	r16
    8288:	ff 90       	pop	r15
    828a:	ef 90       	pop	r14
    828c:	df 90       	pop	r13
    828e:	cf 90       	pop	r12
    8290:	bf 90       	pop	r11
    8292:	af 90       	pop	r10
    8294:	9f 90       	pop	r9
    8296:	8f 90       	pop	r8
    8298:	08 95       	ret

0000829a <atoi>:
    829a:	fc 01       	movw	r30, r24
    829c:	88 27       	eor	r24, r24
    829e:	99 27       	eor	r25, r25
    82a0:	e8 94       	clt
    82a2:	21 91       	ld	r18, Z+
    82a4:	20 32       	cpi	r18, 0x20	; 32
    82a6:	e9 f3       	breq	.-6      	; 0x82a2 <atoi+0x8>
    82a8:	29 30       	cpi	r18, 0x09	; 9
    82aa:	10 f0       	brcs	.+4      	; 0x82b0 <atoi+0x16>
    82ac:	2e 30       	cpi	r18, 0x0E	; 14
    82ae:	c8 f3       	brcs	.-14     	; 0x82a2 <atoi+0x8>
    82b0:	2b 32       	cpi	r18, 0x2B	; 43
    82b2:	41 f0       	breq	.+16     	; 0x82c4 <atoi+0x2a>
    82b4:	2d 32       	cpi	r18, 0x2D	; 45
    82b6:	39 f4       	brne	.+14     	; 0x82c6 <atoi+0x2c>
    82b8:	68 94       	set
    82ba:	04 c0       	rjmp	.+8      	; 0x82c4 <atoi+0x2a>
    82bc:	0e 94 79 42 	call	0x84f2	; 0x84f2 <__mulhi_const_10>
    82c0:	82 0f       	add	r24, r18
    82c2:	91 1d       	adc	r25, r1
    82c4:	21 91       	ld	r18, Z+
    82c6:	20 53       	subi	r18, 0x30	; 48
    82c8:	2a 30       	cpi	r18, 0x0A	; 10
    82ca:	c0 f3       	brcs	.-16     	; 0x82bc <atoi+0x22>
    82cc:	1e f4       	brtc	.+6      	; 0x82d4 <atoi+0x3a>
    82ce:	90 95       	com	r25
    82d0:	81 95       	neg	r24
    82d2:	9f 4f       	sbci	r25, 0xFF	; 255
    82d4:	08 95       	ret

000082d6 <__ftoa_engine>:
    82d6:	28 30       	cpi	r18, 0x08	; 8
    82d8:	08 f0       	brcs	.+2      	; 0x82dc <__ftoa_engine+0x6>
    82da:	27 e0       	ldi	r18, 0x07	; 7
    82dc:	33 27       	eor	r19, r19
    82de:	da 01       	movw	r26, r20
    82e0:	99 0f       	add	r25, r25
    82e2:	31 1d       	adc	r19, r1
    82e4:	87 fd       	sbrc	r24, 7
    82e6:	91 60       	ori	r25, 0x01	; 1
    82e8:	00 96       	adiw	r24, 0x00	; 0
    82ea:	61 05       	cpc	r22, r1
    82ec:	71 05       	cpc	r23, r1
    82ee:	39 f4       	brne	.+14     	; 0x82fe <__ftoa_engine+0x28>
    82f0:	32 60       	ori	r19, 0x02	; 2
    82f2:	2e 5f       	subi	r18, 0xFE	; 254
    82f4:	3d 93       	st	X+, r19
    82f6:	30 e3       	ldi	r19, 0x30	; 48
    82f8:	2a 95       	dec	r18
    82fa:	e1 f7       	brne	.-8      	; 0x82f4 <__ftoa_engine+0x1e>
    82fc:	08 95       	ret
    82fe:	9f 3f       	cpi	r25, 0xFF	; 255
    8300:	30 f0       	brcs	.+12     	; 0x830e <__ftoa_engine+0x38>
    8302:	80 38       	cpi	r24, 0x80	; 128
    8304:	71 05       	cpc	r23, r1
    8306:	61 05       	cpc	r22, r1
    8308:	09 f0       	breq	.+2      	; 0x830c <__ftoa_engine+0x36>
    830a:	3c 5f       	subi	r19, 0xFC	; 252
    830c:	3c 5f       	subi	r19, 0xFC	; 252
    830e:	3d 93       	st	X+, r19
    8310:	91 30       	cpi	r25, 0x01	; 1
    8312:	08 f0       	brcs	.+2      	; 0x8316 <__ftoa_engine+0x40>
    8314:	80 68       	ori	r24, 0x80	; 128
    8316:	91 1d       	adc	r25, r1
    8318:	df 93       	push	r29
    831a:	cf 93       	push	r28
    831c:	1f 93       	push	r17
    831e:	0f 93       	push	r16
    8320:	ff 92       	push	r15
    8322:	ef 92       	push	r14
    8324:	19 2f       	mov	r17, r25
    8326:	98 7f       	andi	r25, 0xF8	; 248
    8328:	96 95       	lsr	r25
    832a:	e9 2f       	mov	r30, r25
    832c:	96 95       	lsr	r25
    832e:	96 95       	lsr	r25
    8330:	e9 0f       	add	r30, r25
    8332:	ff 27       	eor	r31, r31
    8334:	ee 56       	subi	r30, 0x6E	; 110
    8336:	f4 4e       	sbci	r31, 0xE4	; 228
    8338:	99 27       	eor	r25, r25
    833a:	33 27       	eor	r19, r19
    833c:	ee 24       	eor	r14, r14
    833e:	ff 24       	eor	r15, r15
    8340:	a7 01       	movw	r20, r14
    8342:	e7 01       	movw	r28, r14
    8344:	05 90       	lpm	r0, Z+
    8346:	08 94       	sec
    8348:	07 94       	ror	r0
    834a:	28 f4       	brcc	.+10     	; 0x8356 <__ftoa_engine+0x80>
    834c:	36 0f       	add	r19, r22
    834e:	e7 1e       	adc	r14, r23
    8350:	f8 1e       	adc	r15, r24
    8352:	49 1f       	adc	r20, r25
    8354:	51 1d       	adc	r21, r1
    8356:	66 0f       	add	r22, r22
    8358:	77 1f       	adc	r23, r23
    835a:	88 1f       	adc	r24, r24
    835c:	99 1f       	adc	r25, r25
    835e:	06 94       	lsr	r0
    8360:	a1 f7       	brne	.-24     	; 0x834a <__ftoa_engine+0x74>
    8362:	05 90       	lpm	r0, Z+
    8364:	07 94       	ror	r0
    8366:	28 f4       	brcc	.+10     	; 0x8372 <__ftoa_engine+0x9c>
    8368:	e7 0e       	add	r14, r23
    836a:	f8 1e       	adc	r15, r24
    836c:	49 1f       	adc	r20, r25
    836e:	56 1f       	adc	r21, r22
    8370:	c1 1d       	adc	r28, r1
    8372:	77 0f       	add	r23, r23
    8374:	88 1f       	adc	r24, r24
    8376:	99 1f       	adc	r25, r25
    8378:	66 1f       	adc	r22, r22
    837a:	06 94       	lsr	r0
    837c:	a1 f7       	brne	.-24     	; 0x8366 <__ftoa_engine+0x90>
    837e:	05 90       	lpm	r0, Z+
    8380:	07 94       	ror	r0
    8382:	28 f4       	brcc	.+10     	; 0x838e <__ftoa_engine+0xb8>
    8384:	f8 0e       	add	r15, r24
    8386:	49 1f       	adc	r20, r25
    8388:	56 1f       	adc	r21, r22
    838a:	c7 1f       	adc	r28, r23
    838c:	d1 1d       	adc	r29, r1
    838e:	88 0f       	add	r24, r24
    8390:	99 1f       	adc	r25, r25
    8392:	66 1f       	adc	r22, r22
    8394:	77 1f       	adc	r23, r23
    8396:	06 94       	lsr	r0
    8398:	a1 f7       	brne	.-24     	; 0x8382 <__ftoa_engine+0xac>
    839a:	05 90       	lpm	r0, Z+
    839c:	07 94       	ror	r0
    839e:	20 f4       	brcc	.+8      	; 0x83a8 <__ftoa_engine+0xd2>
    83a0:	49 0f       	add	r20, r25
    83a2:	56 1f       	adc	r21, r22
    83a4:	c7 1f       	adc	r28, r23
    83a6:	d8 1f       	adc	r29, r24
    83a8:	99 0f       	add	r25, r25
    83aa:	66 1f       	adc	r22, r22
    83ac:	77 1f       	adc	r23, r23
    83ae:	88 1f       	adc	r24, r24
    83b0:	06 94       	lsr	r0
    83b2:	a9 f7       	brne	.-22     	; 0x839e <__ftoa_engine+0xc8>
    83b4:	84 91       	lpm	r24, Z+
    83b6:	10 95       	com	r17
    83b8:	17 70       	andi	r17, 0x07	; 7
    83ba:	41 f0       	breq	.+16     	; 0x83cc <__ftoa_engine+0xf6>
    83bc:	d6 95       	lsr	r29
    83be:	c7 95       	ror	r28
    83c0:	57 95       	ror	r21
    83c2:	47 95       	ror	r20
    83c4:	f7 94       	ror	r15
    83c6:	e7 94       	ror	r14
    83c8:	1a 95       	dec	r17
    83ca:	c1 f7       	brne	.-16     	; 0x83bc <__ftoa_engine+0xe6>
    83cc:	e8 e3       	ldi	r30, 0x38	; 56
    83ce:	fb e1       	ldi	r31, 0x1B	; 27
    83d0:	68 94       	set
    83d2:	15 90       	lpm	r1, Z+
    83d4:	15 91       	lpm	r17, Z+
    83d6:	35 91       	lpm	r19, Z+
    83d8:	65 91       	lpm	r22, Z+
    83da:	95 91       	lpm	r25, Z+
    83dc:	05 90       	lpm	r0, Z+
    83de:	7f e2       	ldi	r23, 0x2F	; 47
    83e0:	73 95       	inc	r23
    83e2:	e1 18       	sub	r14, r1
    83e4:	f1 0a       	sbc	r15, r17
    83e6:	43 0b       	sbc	r20, r19
    83e8:	56 0b       	sbc	r21, r22
    83ea:	c9 0b       	sbc	r28, r25
    83ec:	d0 09       	sbc	r29, r0
    83ee:	c0 f7       	brcc	.-16     	; 0x83e0 <__ftoa_engine+0x10a>
    83f0:	e1 0c       	add	r14, r1
    83f2:	f1 1e       	adc	r15, r17
    83f4:	43 1f       	adc	r20, r19
    83f6:	56 1f       	adc	r21, r22
    83f8:	c9 1f       	adc	r28, r25
    83fa:	d0 1d       	adc	r29, r0
    83fc:	7e f4       	brtc	.+30     	; 0x841c <__ftoa_engine+0x146>
    83fe:	70 33       	cpi	r23, 0x30	; 48
    8400:	11 f4       	brne	.+4      	; 0x8406 <__ftoa_engine+0x130>
    8402:	8a 95       	dec	r24
    8404:	e6 cf       	rjmp	.-52     	; 0x83d2 <__ftoa_engine+0xfc>
    8406:	e8 94       	clt
    8408:	01 50       	subi	r16, 0x01	; 1
    840a:	30 f0       	brcs	.+12     	; 0x8418 <__ftoa_engine+0x142>
    840c:	08 0f       	add	r16, r24
    840e:	0a f4       	brpl	.+2      	; 0x8412 <__ftoa_engine+0x13c>
    8410:	00 27       	eor	r16, r16
    8412:	02 17       	cp	r16, r18
    8414:	08 f4       	brcc	.+2      	; 0x8418 <__ftoa_engine+0x142>
    8416:	20 2f       	mov	r18, r16
    8418:	23 95       	inc	r18
    841a:	02 2f       	mov	r16, r18
    841c:	7a 33       	cpi	r23, 0x3A	; 58
    841e:	28 f0       	brcs	.+10     	; 0x842a <__ftoa_engine+0x154>
    8420:	79 e3       	ldi	r23, 0x39	; 57
    8422:	7d 93       	st	X+, r23
    8424:	2a 95       	dec	r18
    8426:	e9 f7       	brne	.-6      	; 0x8422 <__ftoa_engine+0x14c>
    8428:	10 c0       	rjmp	.+32     	; 0x844a <__ftoa_engine+0x174>
    842a:	7d 93       	st	X+, r23
    842c:	2a 95       	dec	r18
    842e:	89 f6       	brne	.-94     	; 0x83d2 <__ftoa_engine+0xfc>
    8430:	06 94       	lsr	r0
    8432:	97 95       	ror	r25
    8434:	67 95       	ror	r22
    8436:	37 95       	ror	r19
    8438:	17 95       	ror	r17
    843a:	17 94       	ror	r1
    843c:	e1 18       	sub	r14, r1
    843e:	f1 0a       	sbc	r15, r17
    8440:	43 0b       	sbc	r20, r19
    8442:	56 0b       	sbc	r21, r22
    8444:	c9 0b       	sbc	r28, r25
    8446:	d0 09       	sbc	r29, r0
    8448:	98 f0       	brcs	.+38     	; 0x8470 <__ftoa_engine+0x19a>
    844a:	23 95       	inc	r18
    844c:	7e 91       	ld	r23, -X
    844e:	73 95       	inc	r23
    8450:	7a 33       	cpi	r23, 0x3A	; 58
    8452:	08 f0       	brcs	.+2      	; 0x8456 <__ftoa_engine+0x180>
    8454:	70 e3       	ldi	r23, 0x30	; 48
    8456:	7c 93       	st	X, r23
    8458:	20 13       	cpse	r18, r16
    845a:	b8 f7       	brcc	.-18     	; 0x844a <__ftoa_engine+0x174>
    845c:	7e 91       	ld	r23, -X
    845e:	70 61       	ori	r23, 0x10	; 16
    8460:	7d 93       	st	X+, r23
    8462:	30 f0       	brcs	.+12     	; 0x8470 <__ftoa_engine+0x19a>
    8464:	83 95       	inc	r24
    8466:	71 e3       	ldi	r23, 0x31	; 49
    8468:	7d 93       	st	X+, r23
    846a:	70 e3       	ldi	r23, 0x30	; 48
    846c:	2a 95       	dec	r18
    846e:	e1 f7       	brne	.-8      	; 0x8468 <__ftoa_engine+0x192>
    8470:	11 24       	eor	r1, r1
    8472:	ef 90       	pop	r14
    8474:	ff 90       	pop	r15
    8476:	0f 91       	pop	r16
    8478:	1f 91       	pop	r17
    847a:	cf 91       	pop	r28
    847c:	df 91       	pop	r29
    847e:	99 27       	eor	r25, r25
    8480:	87 fd       	sbrc	r24, 7
    8482:	90 95       	com	r25
    8484:	08 95       	ret

00008486 <isspace>:
    8486:	91 11       	cpse	r25, r1
    8488:	21 c1       	rjmp	.+578    	; 0x86cc <__ctype_isfalse>
    848a:	80 32       	cpi	r24, 0x20	; 32
    848c:	19 f0       	breq	.+6      	; 0x8494 <isspace+0xe>
    848e:	89 50       	subi	r24, 0x09	; 9
    8490:	85 50       	subi	r24, 0x05	; 5
    8492:	d0 f7       	brcc	.-12     	; 0x8488 <isspace+0x2>
    8494:	08 95       	ret

00008496 <strncasecmp_P>:
    8496:	fb 01       	movw	r30, r22
    8498:	dc 01       	movw	r26, r24
    849a:	41 50       	subi	r20, 0x01	; 1
    849c:	50 40       	sbci	r21, 0x00	; 0
    849e:	88 f0       	brcs	.+34     	; 0x84c2 <strncasecmp_P+0x2c>
    84a0:	8d 91       	ld	r24, X+
    84a2:	81 34       	cpi	r24, 0x41	; 65
    84a4:	1c f0       	brlt	.+6      	; 0x84ac <strncasecmp_P+0x16>
    84a6:	8b 35       	cpi	r24, 0x5B	; 91
    84a8:	0c f4       	brge	.+2      	; 0x84ac <strncasecmp_P+0x16>
    84aa:	80 5e       	subi	r24, 0xE0	; 224
    84ac:	65 91       	lpm	r22, Z+
    84ae:	61 34       	cpi	r22, 0x41	; 65
    84b0:	1c f0       	brlt	.+6      	; 0x84b8 <strncasecmp_P+0x22>
    84b2:	6b 35       	cpi	r22, 0x5B	; 91
    84b4:	0c f4       	brge	.+2      	; 0x84b8 <strncasecmp_P+0x22>
    84b6:	60 5e       	subi	r22, 0xE0	; 224
    84b8:	86 1b       	sub	r24, r22
    84ba:	61 11       	cpse	r22, r1
    84bc:	71 f3       	breq	.-36     	; 0x849a <strncasecmp_P+0x4>
    84be:	99 0b       	sbc	r25, r25
    84c0:	08 95       	ret
    84c2:	88 1b       	sub	r24, r24
    84c4:	fc cf       	rjmp	.-8      	; 0x84be <strncasecmp_P+0x28>

000084c6 <strnlen_P>:
    84c6:	fc 01       	movw	r30, r24
    84c8:	05 90       	lpm	r0, Z+
    84ca:	61 50       	subi	r22, 0x01	; 1
    84cc:	70 40       	sbci	r23, 0x00	; 0
    84ce:	01 10       	cpse	r0, r1
    84d0:	d8 f7       	brcc	.-10     	; 0x84c8 <strnlen_P+0x2>
    84d2:	80 95       	com	r24
    84d4:	90 95       	com	r25
    84d6:	8e 0f       	add	r24, r30
    84d8:	9f 1f       	adc	r25, r31
    84da:	08 95       	ret

000084dc <strnlen>:
    84dc:	fc 01       	movw	r30, r24
    84de:	61 50       	subi	r22, 0x01	; 1
    84e0:	70 40       	sbci	r23, 0x00	; 0
    84e2:	01 90       	ld	r0, Z+
    84e4:	01 10       	cpse	r0, r1
    84e6:	d8 f7       	brcc	.-10     	; 0x84de <strnlen+0x2>
    84e8:	80 95       	com	r24
    84ea:	90 95       	com	r25
    84ec:	8e 0f       	add	r24, r30
    84ee:	9f 1f       	adc	r25, r31
    84f0:	08 95       	ret

000084f2 <__mulhi_const_10>:
    84f2:	7a e0       	ldi	r23, 0x0A	; 10
    84f4:	97 9f       	mul	r25, r23
    84f6:	90 2d       	mov	r25, r0
    84f8:	87 9f       	mul	r24, r23
    84fa:	80 2d       	mov	r24, r0
    84fc:	91 0d       	add	r25, r1
    84fe:	11 24       	eor	r1, r1
    8500:	08 95       	ret

00008502 <clearerr>:
    8502:	fc 01       	movw	r30, r24
    8504:	83 81       	ldd	r24, Z+3	; 0x03
    8506:	8f 7c       	andi	r24, 0xCF	; 207
    8508:	83 83       	std	Z+3, r24	; 0x03
    850a:	08 95       	ret

0000850c <fgets>:
    850c:	cf 92       	push	r12
    850e:	df 92       	push	r13
    8510:	ef 92       	push	r14
    8512:	ff 92       	push	r15
    8514:	0f 93       	push	r16
    8516:	1f 93       	push	r17
    8518:	cf 93       	push	r28
    851a:	df 93       	push	r29
    851c:	7c 01       	movw	r14, r24
    851e:	6a 01       	movw	r12, r20
    8520:	fa 01       	movw	r30, r20
    8522:	83 81       	ldd	r24, Z+3	; 0x03
    8524:	80 ff       	sbrs	r24, 0
    8526:	19 c0       	rjmp	.+50     	; 0x855a <fgets+0x4e>
    8528:	16 16       	cp	r1, r22
    852a:	17 06       	cpc	r1, r23
    852c:	b4 f4       	brge	.+44     	; 0x855a <fgets+0x4e>
    852e:	eb 01       	movw	r28, r22
    8530:	21 97       	sbiw	r28, 0x01	; 1
    8532:	87 01       	movw	r16, r14
    8534:	0d c0       	rjmp	.+26     	; 0x8550 <fgets+0x44>
    8536:	c6 01       	movw	r24, r12
    8538:	0e 94 69 43 	call	0x86d2	; 0x86d2 <fgetc>
    853c:	ff ef       	ldi	r31, 0xFF	; 255
    853e:	8f 3f       	cpi	r24, 0xFF	; 255
    8540:	9f 07       	cpc	r25, r31
    8542:	59 f0       	breq	.+22     	; 0x855a <fgets+0x4e>
    8544:	f8 01       	movw	r30, r16
    8546:	81 93       	st	Z+, r24
    8548:	8f 01       	movw	r16, r30
    854a:	0a 97       	sbiw	r24, 0x0a	; 10
    854c:	19 f0       	breq	.+6      	; 0x8554 <fgets+0x48>
    854e:	21 97       	sbiw	r28, 0x01	; 1
    8550:	20 97       	sbiw	r28, 0x00	; 0
    8552:	89 f7       	brne	.-30     	; 0x8536 <fgets+0x2a>
    8554:	f8 01       	movw	r30, r16
    8556:	10 82       	st	Z, r1
    8558:	02 c0       	rjmp	.+4      	; 0x855e <fgets+0x52>
    855a:	ee 24       	eor	r14, r14
    855c:	ff 24       	eor	r15, r15
    855e:	c7 01       	movw	r24, r14
    8560:	df 91       	pop	r29
    8562:	cf 91       	pop	r28
    8564:	1f 91       	pop	r17
    8566:	0f 91       	pop	r16
    8568:	ff 90       	pop	r15
    856a:	ef 90       	pop	r14
    856c:	df 90       	pop	r13
    856e:	cf 90       	pop	r12
    8570:	08 95       	ret

00008572 <fputc>:
    8572:	0f 93       	push	r16
    8574:	1f 93       	push	r17
    8576:	cf 93       	push	r28
    8578:	df 93       	push	r29
    857a:	8c 01       	movw	r16, r24
    857c:	eb 01       	movw	r28, r22
    857e:	8b 81       	ldd	r24, Y+3	; 0x03
    8580:	81 ff       	sbrs	r24, 1
    8582:	1b c0       	rjmp	.+54     	; 0x85ba <fputc+0x48>
    8584:	82 ff       	sbrs	r24, 2
    8586:	0d c0       	rjmp	.+26     	; 0x85a2 <fputc+0x30>
    8588:	2e 81       	ldd	r18, Y+6	; 0x06
    858a:	3f 81       	ldd	r19, Y+7	; 0x07
    858c:	8c 81       	ldd	r24, Y+4	; 0x04
    858e:	9d 81       	ldd	r25, Y+5	; 0x05
    8590:	28 17       	cp	r18, r24
    8592:	39 07       	cpc	r19, r25
    8594:	64 f4       	brge	.+24     	; 0x85ae <fputc+0x3c>
    8596:	e8 81       	ld	r30, Y
    8598:	f9 81       	ldd	r31, Y+1	; 0x01
    859a:	01 93       	st	Z+, r16
    859c:	e8 83       	st	Y, r30
    859e:	f9 83       	std	Y+1, r31	; 0x01
    85a0:	06 c0       	rjmp	.+12     	; 0x85ae <fputc+0x3c>
    85a2:	e8 85       	ldd	r30, Y+8	; 0x08
    85a4:	f9 85       	ldd	r31, Y+9	; 0x09
    85a6:	80 2f       	mov	r24, r16
    85a8:	19 95       	eicall
    85aa:	89 2b       	or	r24, r25
    85ac:	31 f4       	brne	.+12     	; 0x85ba <fputc+0x48>
    85ae:	8e 81       	ldd	r24, Y+6	; 0x06
    85b0:	9f 81       	ldd	r25, Y+7	; 0x07
    85b2:	01 96       	adiw	r24, 0x01	; 1
    85b4:	8e 83       	std	Y+6, r24	; 0x06
    85b6:	9f 83       	std	Y+7, r25	; 0x07
    85b8:	02 c0       	rjmp	.+4      	; 0x85be <fputc+0x4c>
    85ba:	0f ef       	ldi	r16, 0xFF	; 255
    85bc:	1f ef       	ldi	r17, 0xFF	; 255
    85be:	c8 01       	movw	r24, r16
    85c0:	df 91       	pop	r29
    85c2:	cf 91       	pop	r28
    85c4:	1f 91       	pop	r17
    85c6:	0f 91       	pop	r16
    85c8:	08 95       	ret

000085ca <printf_P>:
    85ca:	df 93       	push	r29
    85cc:	cf 93       	push	r28
    85ce:	cd b7       	in	r28, 0x3d	; 61
    85d0:	de b7       	in	r29, 0x3e	; 62
    85d2:	fe 01       	movw	r30, r28
    85d4:	36 96       	adiw	r30, 0x06	; 6
    85d6:	61 91       	ld	r22, Z+
    85d8:	71 91       	ld	r23, Z+
    85da:	a0 91 0e 25 	lds	r26, 0x250E
    85de:	b0 91 0f 25 	lds	r27, 0x250F
    85e2:	13 96       	adiw	r26, 0x03	; 3
    85e4:	8c 91       	ld	r24, X
    85e6:	13 97       	sbiw	r26, 0x03	; 3
    85e8:	88 60       	ori	r24, 0x08	; 8
    85ea:	13 96       	adiw	r26, 0x03	; 3
    85ec:	8c 93       	st	X, r24
    85ee:	80 91 0e 25 	lds	r24, 0x250E
    85f2:	90 91 0f 25 	lds	r25, 0x250F
    85f6:	af 01       	movw	r20, r30
    85f8:	0e 94 8a 37 	call	0x6f14	; 0x6f14 <vfprintf>
    85fc:	e0 91 0e 25 	lds	r30, 0x250E
    8600:	f0 91 0f 25 	lds	r31, 0x250F
    8604:	23 81       	ldd	r18, Z+3	; 0x03
    8606:	27 7f       	andi	r18, 0xF7	; 247
    8608:	23 83       	std	Z+3, r18	; 0x03
    860a:	cf 91       	pop	r28
    860c:	df 91       	pop	r29
    860e:	08 95       	ret

00008610 <__ultoa_invert>:
    8610:	fa 01       	movw	r30, r20
    8612:	aa 27       	eor	r26, r26
    8614:	28 30       	cpi	r18, 0x08	; 8
    8616:	51 f1       	breq	.+84     	; 0x866c <__ultoa_invert+0x5c>
    8618:	20 31       	cpi	r18, 0x10	; 16
    861a:	81 f1       	breq	.+96     	; 0x867c <__ultoa_invert+0x6c>
    861c:	e8 94       	clt
    861e:	6f 93       	push	r22
    8620:	6e 7f       	andi	r22, 0xFE	; 254
    8622:	6e 5f       	subi	r22, 0xFE	; 254
    8624:	7f 4f       	sbci	r23, 0xFF	; 255
    8626:	8f 4f       	sbci	r24, 0xFF	; 255
    8628:	9f 4f       	sbci	r25, 0xFF	; 255
    862a:	af 4f       	sbci	r26, 0xFF	; 255
    862c:	b1 e0       	ldi	r27, 0x01	; 1
    862e:	3e d0       	rcall	.+124    	; 0x86ac <__ultoa_invert+0x9c>
    8630:	b4 e0       	ldi	r27, 0x04	; 4
    8632:	3c d0       	rcall	.+120    	; 0x86ac <__ultoa_invert+0x9c>
    8634:	67 0f       	add	r22, r23
    8636:	78 1f       	adc	r23, r24
    8638:	89 1f       	adc	r24, r25
    863a:	9a 1f       	adc	r25, r26
    863c:	a1 1d       	adc	r26, r1
    863e:	68 0f       	add	r22, r24
    8640:	79 1f       	adc	r23, r25
    8642:	8a 1f       	adc	r24, r26
    8644:	91 1d       	adc	r25, r1
    8646:	a1 1d       	adc	r26, r1
    8648:	6a 0f       	add	r22, r26
    864a:	71 1d       	adc	r23, r1
    864c:	81 1d       	adc	r24, r1
    864e:	91 1d       	adc	r25, r1
    8650:	a1 1d       	adc	r26, r1
    8652:	20 d0       	rcall	.+64     	; 0x8694 <__ultoa_invert+0x84>
    8654:	09 f4       	brne	.+2      	; 0x8658 <__ultoa_invert+0x48>
    8656:	68 94       	set
    8658:	3f 91       	pop	r19
    865a:	2a e0       	ldi	r18, 0x0A	; 10
    865c:	26 9f       	mul	r18, r22
    865e:	11 24       	eor	r1, r1
    8660:	30 19       	sub	r19, r0
    8662:	30 5d       	subi	r19, 0xD0	; 208
    8664:	31 93       	st	Z+, r19
    8666:	de f6       	brtc	.-74     	; 0x861e <__ultoa_invert+0xe>
    8668:	cf 01       	movw	r24, r30
    866a:	08 95       	ret
    866c:	46 2f       	mov	r20, r22
    866e:	47 70       	andi	r20, 0x07	; 7
    8670:	40 5d       	subi	r20, 0xD0	; 208
    8672:	41 93       	st	Z+, r20
    8674:	b3 e0       	ldi	r27, 0x03	; 3
    8676:	0f d0       	rcall	.+30     	; 0x8696 <__ultoa_invert+0x86>
    8678:	c9 f7       	brne	.-14     	; 0x866c <__ultoa_invert+0x5c>
    867a:	f6 cf       	rjmp	.-20     	; 0x8668 <__ultoa_invert+0x58>
    867c:	46 2f       	mov	r20, r22
    867e:	4f 70       	andi	r20, 0x0F	; 15
    8680:	40 5d       	subi	r20, 0xD0	; 208
    8682:	4a 33       	cpi	r20, 0x3A	; 58
    8684:	18 f0       	brcs	.+6      	; 0x868c <__ultoa_invert+0x7c>
    8686:	49 5d       	subi	r20, 0xD9	; 217
    8688:	31 fd       	sbrc	r19, 1
    868a:	40 52       	subi	r20, 0x20	; 32
    868c:	41 93       	st	Z+, r20
    868e:	02 d0       	rcall	.+4      	; 0x8694 <__ultoa_invert+0x84>
    8690:	a9 f7       	brne	.-22     	; 0x867c <__ultoa_invert+0x6c>
    8692:	ea cf       	rjmp	.-44     	; 0x8668 <__ultoa_invert+0x58>
    8694:	b4 e0       	ldi	r27, 0x04	; 4
    8696:	a6 95       	lsr	r26
    8698:	97 95       	ror	r25
    869a:	87 95       	ror	r24
    869c:	77 95       	ror	r23
    869e:	67 95       	ror	r22
    86a0:	ba 95       	dec	r27
    86a2:	c9 f7       	brne	.-14     	; 0x8696 <__ultoa_invert+0x86>
    86a4:	00 97       	sbiw	r24, 0x00	; 0
    86a6:	61 05       	cpc	r22, r1
    86a8:	71 05       	cpc	r23, r1
    86aa:	08 95       	ret
    86ac:	9b 01       	movw	r18, r22
    86ae:	ac 01       	movw	r20, r24
    86b0:	0a 2e       	mov	r0, r26
    86b2:	06 94       	lsr	r0
    86b4:	57 95       	ror	r21
    86b6:	47 95       	ror	r20
    86b8:	37 95       	ror	r19
    86ba:	27 95       	ror	r18
    86bc:	ba 95       	dec	r27
    86be:	c9 f7       	brne	.-14     	; 0x86b2 <__ultoa_invert+0xa2>
    86c0:	62 0f       	add	r22, r18
    86c2:	73 1f       	adc	r23, r19
    86c4:	84 1f       	adc	r24, r20
    86c6:	95 1f       	adc	r25, r21
    86c8:	a0 1d       	adc	r26, r0
    86ca:	08 95       	ret

000086cc <__ctype_isfalse>:
    86cc:	99 27       	eor	r25, r25
    86ce:	88 27       	eor	r24, r24

000086d0 <__ctype_istrue>:
    86d0:	08 95       	ret

000086d2 <fgetc>:
    86d2:	cf 93       	push	r28
    86d4:	df 93       	push	r29
    86d6:	ec 01       	movw	r28, r24
    86d8:	4b 81       	ldd	r20, Y+3	; 0x03
    86da:	40 ff       	sbrs	r20, 0
    86dc:	1a c0       	rjmp	.+52     	; 0x8712 <fgetc+0x40>
    86de:	46 ff       	sbrs	r20, 6
    86e0:	0a c0       	rjmp	.+20     	; 0x86f6 <fgetc+0x24>
    86e2:	4f 7b       	andi	r20, 0xBF	; 191
    86e4:	4b 83       	std	Y+3, r20	; 0x03
    86e6:	8e 81       	ldd	r24, Y+6	; 0x06
    86e8:	9f 81       	ldd	r25, Y+7	; 0x07
    86ea:	01 96       	adiw	r24, 0x01	; 1
    86ec:	8e 83       	std	Y+6, r24	; 0x06
    86ee:	9f 83       	std	Y+7, r25	; 0x07
    86f0:	8a 81       	ldd	r24, Y+2	; 0x02
    86f2:	28 2f       	mov	r18, r24
    86f4:	2b c0       	rjmp	.+86     	; 0x874c <fgetc+0x7a>
    86f6:	42 ff       	sbrs	r20, 2
    86f8:	13 c0       	rjmp	.+38     	; 0x8720 <fgetc+0x4e>
    86fa:	e8 81       	ld	r30, Y
    86fc:	f9 81       	ldd	r31, Y+1	; 0x01
    86fe:	80 81       	ld	r24, Z
    8700:	28 2f       	mov	r18, r24
    8702:	33 27       	eor	r19, r19
    8704:	27 fd       	sbrc	r18, 7
    8706:	30 95       	com	r19
    8708:	21 15       	cp	r18, r1
    870a:	31 05       	cpc	r19, r1
    870c:	29 f4       	brne	.+10     	; 0x8718 <fgetc+0x46>
    870e:	40 62       	ori	r20, 0x20	; 32
    8710:	4b 83       	std	Y+3, r20	; 0x03
    8712:	2f ef       	ldi	r18, 0xFF	; 255
    8714:	3f ef       	ldi	r19, 0xFF	; 255
    8716:	1b c0       	rjmp	.+54     	; 0x874e <fgetc+0x7c>
    8718:	31 96       	adiw	r30, 0x01	; 1
    871a:	e8 83       	st	Y, r30
    871c:	f9 83       	std	Y+1, r31	; 0x01
    871e:	11 c0       	rjmp	.+34     	; 0x8742 <fgetc+0x70>
    8720:	ea 85       	ldd	r30, Y+10	; 0x0a
    8722:	fb 85       	ldd	r31, Y+11	; 0x0b
    8724:	ce 01       	movw	r24, r28
    8726:	19 95       	eicall
    8728:	9c 01       	movw	r18, r24
    872a:	97 ff       	sbrs	r25, 7
    872c:	0a c0       	rjmp	.+20     	; 0x8742 <fgetc+0x70>
    872e:	9b 81       	ldd	r25, Y+3	; 0x03
    8730:	2f 5f       	subi	r18, 0xFF	; 255
    8732:	3f 4f       	sbci	r19, 0xFF	; 255
    8734:	11 f0       	breq	.+4      	; 0x873a <fgetc+0x68>
    8736:	80 e2       	ldi	r24, 0x20	; 32
    8738:	01 c0       	rjmp	.+2      	; 0x873c <fgetc+0x6a>
    873a:	80 e1       	ldi	r24, 0x10	; 16
    873c:	89 2b       	or	r24, r25
    873e:	8b 83       	std	Y+3, r24	; 0x03
    8740:	e8 cf       	rjmp	.-48     	; 0x8712 <fgetc+0x40>
    8742:	8e 81       	ldd	r24, Y+6	; 0x06
    8744:	9f 81       	ldd	r25, Y+7	; 0x07
    8746:	01 96       	adiw	r24, 0x01	; 1
    8748:	8e 83       	std	Y+6, r24	; 0x06
    874a:	9f 83       	std	Y+7, r25	; 0x07
    874c:	30 e0       	ldi	r19, 0x00	; 0
    874e:	c9 01       	movw	r24, r18
    8750:	df 91       	pop	r29
    8752:	cf 91       	pop	r28
    8754:	08 95       	ret

00008756 <_exit>:
    8756:	f8 94       	cli

00008758 <__stop_program>:
    8758:	ff cf       	rjmp	.-2      	; 0x8758 <__stop_program>
