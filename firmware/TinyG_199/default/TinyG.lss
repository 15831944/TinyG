
TinyG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008a96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00802000  00008a96  00008b2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003f8  0080211c  0080211c  00008c46  2**0
                  ALLOC
  3 .debug_aranges 00000240  00000000  00000000  00008c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000bd9  00000000  00000000  00008e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a922  00000000  00000000  00009a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002051  00000000  00000000  00014381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003a40  00000000  00000000  000163d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000940  00000000  00000000  00019e14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002199  00000000  00000000  0001a754  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000029dd  00000000  00000000  0001c8ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0001f2ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <__ctors_end>
       4:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
       8:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
       c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      10:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      14:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      18:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      1c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      20:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      24:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      28:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      2c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      30:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      34:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      38:	0c 94 8b 25 	jmp	0x4b16	; 0x4b16 <__vector_14>
      3c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      40:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      44:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      48:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      4c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      50:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      54:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      58:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      5c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      60:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      64:	0c 94 c6 27 	jmp	0x4f8c	; 0x4f8c <__vector_25>
      68:	0c 94 44 28 	jmp	0x5088	; 0x5088 <__vector_26>
      6c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      70:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      74:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      78:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      7c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      80:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      84:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      88:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      8c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      90:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      94:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      98:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      9c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      a0:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      a4:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      a8:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      ac:	0c 94 eb 31 	jmp	0x63d6	; 0x63d6 <__vector_43>
      b0:	0c 94 c3 31 	jmp	0x6386	; 0x6386 <__vector_44>
      b4:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      b8:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      bc:	0c 94 c1 24 	jmp	0x4982	; 0x4982 <__vector_47>
      c0:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      c4:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      c8:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      cc:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      d0:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      d4:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      d8:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      dc:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      e0:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      e4:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      e8:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      ec:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      f0:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      f4:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      f8:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
      fc:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     100:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__vector_64>
     104:	0c 94 73 31 	jmp	0x62e6	; 0x62e6 <__vector_65>
     108:	0c 94 8b 32 	jmp	0x6516	; 0x6516 <__vector_66>
     10c:	0c 94 63 32 	jmp	0x64c6	; 0x64c6 <__vector_67>
     110:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     114:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     118:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     11c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     120:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     124:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     128:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     12c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     130:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     134:	0c 94 26 25 	jmp	0x4a4c	; 0x4a4c <__vector_77>
     138:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     13c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     140:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     144:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     148:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     14c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     150:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     154:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     158:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     15c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     160:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     164:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     168:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     16c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     170:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     174:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     178:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     17c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     180:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     184:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     188:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     18c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     190:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     194:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     198:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     19c:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     1a0:	0c 94 3b 32 	jmp	0x6476	; 0x6476 <__vector_104>
     1a4:	0c 94 13 32 	jmp	0x6426	; 0x6426 <__vector_105>
     1a8:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     1ac:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     1b0:	0c 94 5c 24 	jmp	0x48b8	; 0x48b8 <__vector_108>
     1b4:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     1b8:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     1bc:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     1c0:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     1c4:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     1c8:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     1cc:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     1d0:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     1d4:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     1d8:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     1dc:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     1e0:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     1e4:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__bad_interrupt>
     1e8:	08 4a       	sbci	r16, 0xA8	; 168
     1ea:	d7 3b       	cpi	r29, 0xB7	; 183
     1ec:	3b ce       	rjmp	.-906    	; 0xfffffe64 <__eeprom_end+0xff7efe64>
     1ee:	01 6e       	ori	r16, 0xE1	; 225
     1f0:	84 bc       	out	0x24, r8	; 36
     1f2:	bf fd       	.word	0xfdbf	; ????
     1f4:	c1 2f       	mov	r28, r17
     1f6:	3d 6c       	ori	r19, 0xCD	; 205
     1f8:	74 31       	cpi	r23, 0x14	; 20
     1fa:	9a bd       	out	0x2a, r25	; 42
     1fc:	56 83       	std	Z+6, r21	; 0x06
     1fe:	3d da       	rcall	.-2950   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     200:	3d 00       	.word	0x003d	; ????
     202:	c7 7f       	andi	r28, 0xF7	; 247
     204:	11 be       	out	0x31, r1	; 49
     206:	d9 e4       	ldi	r29, 0x49	; 73
     208:	bb 4c       	sbci	r27, 0xCB	; 203
     20a:	3e 91       	ld	r19, -X
     20c:	6b aa       	std	Y+51, r6	; 0x33
     20e:	aa be       	out	0x3a, r10	; 58
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	3f 05       	cpc	r19, r15
     216:	a8 4c       	sbci	r26, 0xC8	; 200
     218:	cd b2       	in	r12, 0x1d	; 29
     21a:	d4 4e       	sbci	r29, 0xE4	; 228
     21c:	b9 38       	cpi	r27, 0x89	; 137
     21e:	36 a9       	ldd	r19, Z+54	; 0x36
     220:	02 0c       	add	r0, r2
     222:	50 b9       	out	0x00, r21	; 0
     224:	91 86       	std	Z+9, r9	; 0x09
     226:	88 08       	sbc	r8, r8
     228:	3c a6       	std	Y+44, r3	; 0x2c
     22a:	aa aa       	std	Y+50, r10	; 0x32
     22c:	2a be       	out	0x3a, r2	; 58
     22e:	00 00       	nop
     230:	00 80       	ld	r0, Z
     232:	3f 6e       	ori	r19, 0xEF	; 239

00000233 <__c.1790>:
     233:	6e 61 6e 00                                         nan.

00000237 <__c.1788>:
     237:	69 6e 66 00                                         inf.

0000023b <cfgMsgXaxis>:
     23b:	58 00                                               X.

0000023d <cfgMsgYaxis>:
     23d:	59 00                                               Y.

0000023f <cfgMsgZaxis>:
     23f:	5a 00                                               Z.

00000241 <cfgMsgAaxis>:
     241:	41 00                                               A.

00000243 <cfgMsgs>:
     243:	3b 02 3d 02 3f 02 41 02                             ;.=.?.A.

0000024b <configs_P>:
     24b:	6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67 6d 65     mm_per_arc_segme
     25b:	6e 74 20 3d 20 30 2e 32 20 0a 78 5f 73 65 65 6b     nt = 0.2 .x_seek
     26b:	5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31 30 30     _steps_sec = 100
     27b:	30 20 0a 79 5f 73 65 65 6b 5f 73 74 65 70 73 5f     0 .y_seek_steps_
     28b:	73 65 63 20 3d 20 31 31 30 30 20 0a 7a 5f 73 65     sec = 1100 .z_se
     29b:	65 6b 5f 73 74 65 70 73 5f 73 65 63 20 3d 20 31     ek_steps_sec = 1
     2ab:	32 30 30 20 0a 61 5f 73 65 65 6b 5f 73 74 65 70     200 .a_seek_step
     2bb:	73 5f 73 65 63 20 3d 20 31 33 30 30 20 0a 78 5f     s_sec = 1300 .x_
     2cb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     2db:	20 36 30 30 20 0a 79 5f 66 65 65 64 5f 73 74 65      600 .y_feed_ste
     2eb:	70 73 5f 73 65 63 20 3d 20 37 30 30 20 0a 7a 5f     ps_sec = 700 .z_
     2fb:	66 65 65 64 5f 73 74 65 70 73 5f 73 65 63 20 3d     feed_steps_sec =
     30b:	20 38 30 30 20 0a 61 5f 66 65 65 64 5f 73 74 65      800 .a_feed_ste
     31b:	70 73 5f 73 65 63 20 3d 20 39 30 30 20 0a 78 5f     ps_sec = 900 .x_
     32b:	64 65 67 72 65 65 5f 73 74 65 70 20 3d 20 30 2e     degree_step = 0.
     33b:	39 09 0a 78 5f 6d 6d 5f 72 65 76 20 3d 20 35 2e     9..x_mm_rev = 5.
     34b:	30 20 0a 78 5f 6d 6d 5f 74 72 61 76 65 6c 09 3d     0 .x_mm_travel.=
     35b:	20 34 31 30 20 0a 7a 5f 6d 69 63 72 6f 73 74 65      410 .z_microste
     36b:	70 09 3d 20 32 09 20 0a 78 5f 6c 6f 77 5f 70 77     p.= 2. .x_low_pw
     37b:	72 5f 69 64 6c 65 20 3d 20 30 20 0a 78 5f 6c 69     r_idle = 0 .x_li
     38b:	6d 69 74 5f 65 6e 61 62 6c 65 3d 09 30 00           mit_enable=.0.

00000399 <__c.3831>:
     399:	49 6c 6c 65 67 61 6c 20 41 72 63 20 53 74 61 74     Illegal Arc Stat
     3a9:	65 6d 65 6e 74 3a 20 25 73 0a 00                    ement: %s..

000003b4 <__c.3828>:
     3b4:	46 6c 6f 61 74 69 6e 67 20 50 6f 69 6e 74 20 45     Floating Point E
     3c4:	72 72 6f 72 3a 20 25 73 0a 00                       rror: %s..

000003ce <__c.3825>:
     3ce:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
     3de:	6d 61 6e 64 3a 20 25 73 0a 00                       mand: %s..

000003e8 <__c.3822>:
     3e8:	42 61 64 20 4e 75 6d 62 65 72 20 46 6f 72 6d 61     Bad Number Forma
     3f8:	74 3a 20 25 73 0a 00                                t: %s..

000003ff <__c.3819>:
     3ff:	51 75 69 74 74 69 6e 67 20 43 6f 6e 66 69 67 20     Quitting Config 
     40f:	4d 6f 64 65 0a 00                                   Mode..

00000415 <__c.3816>:
     415:	43 6f 6e 66 69 67 20 43 6f 6e 74 69 6e 75 61 74     Config Continuat
     425:	69 6f 6e 20 66 6f 72 3a 20 25 73 0a 00              ion for: %s..

00000432 <__c.3748>:
     432:	20 28 73 74 65 70 73 5f 70 65 72 5f 6d 6d 3a 20      (steps_per_mm: 
     442:	20 20 20 25 37 2e 32 66 20 6d 69 63 72 6f 73 74        %7.2f microst
     452:	65 70 73 20 2f 20 6d 69 6c 6c 69 6d 65 74 65 72     eps / millimeter
     462:	29 0a 0a 00                                         )...

00000466 <__c.3746>:
     466:	20 20 70 6f 6c 61 72 69 74 79 3a 20 20 20 20 20       polarity:     
     476:	20 20 20 25 34 64 20 20 20 20 31 3d 69 6e 76 65        %4d    1=inve
     486:	72 74 65 64 2c 20 30 3d 6e 6f 72 6d 61 6c 0a 00     rted, 0=normal..

00000496 <__c.3744>:
     496:	20 20 6c 6f 77 5f 70 77 72 5f 69 64 6c 65 3a 20       low_pwr_idle: 
     4a6:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4b6:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004c7 <__c.3742>:
     4c7:	20 20 6c 69 6d 69 74 5f 65 6e 61 62 6c 65 3a 20       limit_enable: 
     4d7:	20 20 20 25 34 64 20 20 20 20 31 3d 65 6e 61 62        %4d    1=enab
     4e7:	6c 65 64 2c 20 30 3d 64 69 73 61 62 6c 65 64 0a     led, 0=disabled.
	...

000004f8 <__c.3740>:
     4f8:	20 20 6d 6d 5f 74 72 61 76 65 6c 3a 20 20 20 20       mm_travel:    
     508:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     518:	74 65 72 73 20 74 6f 74 61 6c 20 74 72 61 76 65     ters total trave
     528:	6c 0a 00                                            l..

0000052b <__c.3738>:
     52b:	20 20 6d 6d 5f 72 65 76 6f 6c 75 74 69 6f 6e 3a       mm_revolution:
     53b:	20 20 20 25 37 2e 32 66 20 6d 69 6c 6c 69 6d 65        %7.2f millime
     54b:	74 65 72 73 20 2f 20 72 65 76 6f 6c 75 74 69 6f     ters / revolutio
     55b:	6e 0a 00                                            n..

0000055e <__c.3736>:
     55e:	20 20 64 65 67 72 65 65 5f 70 65 72 5f 73 74 65       degree_per_ste
     56e:	70 3a 20 25 37 2e 32 66 20 64 65 67 72 65 65 73     p: %7.2f degrees
     57e:	20 2f 20 73 74 65 70 20 28 77 68 6f 6c 65 20 73      / step (whole s
     58e:	74 65 70 73 29 0a 00                                teps)..

00000595 <__c.3734>:
     595:	20 20 6d 69 63 72 6f 73 74 65 70 73 3a 20 20 20       microsteps:   
     5a5:	20 20 20 25 34 64 20 20 20 20 6d 69 63 72 6f 73        %4d    micros
     5b5:	74 65 70 73 20 2f 20 77 68 6f 6c 65 20 73 74 65     teps / whole ste
     5c5:	70 0a 00                                            p..

000005c8 <__c.3732>:
     5c8:	20 20 66 65 65 64 5f 73 74 65 70 73 5f 73 65 63       feed_steps_sec
     5d8:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     5e8:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     5f8:	73 74 65 70 73 29 0a 00                             steps)..

00000600 <__c.3730>:
     600:	20 20 73 65 65 6b 5f 73 74 65 70 73 5f 73 65 63       seek_steps_sec
     610:	3a 20 20 25 34 64 20 20 20 20 73 74 65 70 73 20     :  %4d    steps 
     620:	2f 20 73 65 63 6f 6e 64 20 28 77 68 6f 6c 65 20     / second (whole 
     630:	73 74 65 70 73 29 0a 00                             steps)..

00000638 <__c.3725>:
     638:	25 53 20 41 78 69 73 20 43 6f 6e 66 69 67 75 72     %S Axis Configur
     648:	61 74 69 6f 6e 20 56 61 6c 75 65 73 0a 00           ation Values..

00000656 <__c.3711>:
     656:	20 28 64 65 66 61 75 6c 74 5f 66 65 65 64 5f 72      (default_feed_r
     666:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     676:	20 73 65 63 6f 6e 64 29 0a 0a 00                     second)...

00000681 <__c.3709>:
     681:	20 28 64 65 66 61 75 6c 74 5f 73 65 65 6b 5f 72      (default_seek_r
     691:	61 74 65 3a 20 20 25 35 2e 33 66 20 6d 6d 20 2f     ate:  %5.3f mm /
     6a1:	20 73 65 63 6f 6e 64 29 0a 00                        second)..

000006ab <__c.3707>:
     6ab:	20 20 6d 6d 5f 70 65 72 5f 61 72 63 5f 73 65 67       mm_per_arc_seg
     6bb:	6d 65 6e 74 3a 20 25 35 2e 33 66 20 6d 6d 20 2f     ment: %5.3f mm /
     6cb:	20 73 65 67 6d 65 6e 74 0a 00                        segment..

000006d5 <__c.3705>:
     6d5:	47 2d 63 6f 64 65 20 4d 6f 64 65 6c 20 43 6f 6e     G-code Model Con
     6e5:	66 69 67 75 72 61 74 69 6f 6e 20 56 61 6c 75 65     figuration Value
     6f5:	73 20 2d 2d 2d 0a 00                                s ---..

000006fc <__c.3703>:
     6fc:	0a 2a 2a 2a 2a 2a 20 43 4f 4e 46 49 47 55 52 41     .***** CONFIGURA
     70c:	54 49 4f 4e 20 5b 76 65 72 73 69 6f 6e 20 25 64     TION [version %d
     71c:	5d 20 2a 2a 2a 2a 0a 00                             ] ****..

00000724 <bsel>:
     724:	00 cf 67 33 22 21 1f 1b 13 01 01                    ..g3"!.....

0000072f <bscale>:
     72f:	00 00 00 00 00 f0 e0 d0 c0 10 01                    ...........

0000073a <__c.3505>:
     73a:	0a 0a 2a 2a 2a 2a 20 58 6d 65 67 61 20 49 4f 20     ..**** Xmega IO 
     74a:	73 75 62 73 79 73 74 65 6d 20 69 6e 69 74 69 61     subsystem initia
     75a:	6c 69 7a 65 64 20 2a 2a 2a 2a 0a 00                 lized ****..

00000766 <readlnFuncs>:
     766:	06 2a db 29 db 29 4d 2a db 29 db 29 db 29 db 29     .*.).)M*.).).).)
     776:	39 2a db 29 06 2a db 29 db 29 06 2a 68 2a 71 2a     9*.).*.).).*h*q*
     786:	db 29 5f 2a db 29 56 2a db 29 db 29 db 29 db 29     .)_*.)V*.).).).)
     796:	4d 2a db 29 db 29 4d 2a db 29 db 29 db 29 db 29     M*.).)M*.).).).)
     7a6:	db 29 db 29 db 29 db 29 db 29 db 29 db 29 db 29     .).).).).).).).)
     7b6:	db 29 db 29 db 29 db 29 db 29 db 29 db 29 db 29     .).).).).).).).)
     7c6:	db 29 db 29 db 29 db 29 db 29 db 29 db 29 db 29     .).).).).).).).)
     7d6:	db 29 db 29 db 29 2f 2a db 29 db 29 db 29 db 29     .).).)/*.).).).)
     7e6:	db 29 db 29 db 29 db 29 db 29 db 29 db 29 db 29     .).).).).).).).)
     7f6:	db 29 db 29 db 29 db 29 db 29 db 29 db 29 db 29     .).).).).).).).)
     806:	db 29 db 29 db 29 db 29 db 29 db 29 db 29 db 29     .).).).).).).).)
     816:	db 29 db 29 db 29 db 29 db 29 db 29 db 29 db 29     .).).).).).).).)
     826:	db 29 db 29 db 29 db 29 db 29 db 29 db 29 db 29     .).).).).).).).)
     836:	db 29 db 29 db 29 db 29 db 29 db 29 db 29 db 29     .).).).).).).).)
     846:	db 29 db 29 db 29 db 29 db 29 db 29 db 29 db 29     .).).).).).).).)
     856:	db 29 db 29 db 29 db 29 db 29 db 29 db 29 39 2a     .).).).).).).)9*

00000866 <getcFuncs>:
     866:	5a 29 4a 29 4a 29 7f 29 4a 29 4a 29 4a 29 4a 29     Z)J)J).)J)J)J)J)
     876:	79 29 4a 29 5a 29 4a 29 4a 29 5a 29 91 29 97 29     y)J)Z)J)J)Z).).)
     886:	4a 29 8b 29 4a 29 85 29 4a 29 4a 29 4a 29 4a 29     J).)J).)J)J)J)J)
     896:	7f 29 4a 29 4a 29 7f 29 4a 29 4a 29 4a 29 4a 29     .)J)J).)J)J)J)J)
     8a6:	4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29     J)J)J)J)J)J)J)J)
     8b6:	4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29     J)J)J)J)J)J)J)J)
     8c6:	4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29     J)J)J)J)J)J)J)J)
     8d6:	4a 29 4a 29 4a 29 6f 29 4a 29 4a 29 4a 29 4a 29     J)J)J)o)J)J)J)J)
     8e6:	4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29     J)J)J)J)J)J)J)J)
     8f6:	4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29     J)J)J)J)J)J)J)J)
     906:	4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29     J)J)J)J)J)J)J)J)
     916:	4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29     J)J)J)J)J)J)J)J)
     926:	4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29     J)J)J)J)J)J)J)J)
     936:	4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29     J)J)J)J)J)J)J)J)
     946:	4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29     J)J)J)J)J)J)J)J)
     956:	4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 4a 29 79 29     J)J)J)J)J)J)J)y)

00000966 <square_test1>:
     966:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 31     g1 f333 x0 y0.x1
     976:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     986:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     996:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 0a 78 31     1.x0 y1.x0 y0.x1
     9a6:	20 79 30 0a 78 31 20 79 31 0a 78 30 20 79 31 0a      y0.x1 y1.x0 y1.
     9b6:	78 30 20 79 30 0a 78 31 20 79 30 0a 78 31 20 79     x0 y0.x1 y0.x1 y
     9c6:	31 0a 78 30 20 79 31 0a 78 30 20 79 30 00           1.x0 y1.x0 y0.

000009d4 <square_test2>:
     9d4:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 78 32     g1 f333 x0 y0.x2
     9e4:	20 79 30 0a 78 32 20 79 32 0a 78 30 20 79 32 0a      y0.x2 y2.x0 y2.
     9f4:	78 30 20 79 30 00                                   x0 y0.

000009fa <square_test10>:
     9fa:	67 31 20 66 33 33 33 20 78 2d 31 30 20 79 2d 35     g1 f333 x-10 y-5
     a0a:	0a 78 31 30 20 79 31 30 0a 78 30 20 79 31 30 0a     .x10 y10.x0 y10.
     a1a:	78 30 20 79 30 0a 78 35 20 79 35 00                 x0 y0.x5 y5.

00000a26 <circle_test10>:
     a26:	67 31 20 66 33 33 33 20 78 30 20 79 35 0a 67 33     g1 f333 x0 y5.g3
     a36:	20 66 33 33 33 20 78 31 30 20 79 35 20 69 30 20      f333 x10 y5 i0 
     a46:	6a 35 0a 67 33 20 78 35 20 79 31 30 20 69 2d 35     j5.g3 x5 y10 i-5
     a56:	20 6a 30 0a 67 33 20 78 30 20 79 35 20 69 30 20      j0.g3 x0 y5 i0 
     a66:	6a 2d 35 0a 67 33 20 78 35 20 79 30 20 69 35 20     j-5.g3 x5 y0 i5 
     a76:	6a 30 0a 67 31 20 66 33 33 33 20 78 31 30 20 79     j0.g1 f333 x10 y
     a86:	30 00                                               0.

00000a88 <square_circle_test10>:
     a88:	67 31 20 66 33 33 33 20 78 31 30 20 79 30 0a 78     g1 f333 x10 y0.x
     a98:	31 30 20 79 31 30 0a 78 30 20 79 31 30 0a 78 30     10 y10.x0 y10.x0
     aa8:	20 79 30 0a 78 35 0a 67 33 20 78 31 30 20 79 35      y0.x5.g3 x10 y5
     ab8:	20 69 30 20 6a 35 0a 67 33 20 78 35 20 79 31 30      i0 j5.g3 x5 y10
     ac8:	20 69 2d 35 20 6a 30 0a 67 33 20 78 30 20 79 35      i-5 j0.g3 x0 y5
     ad8:	20 69 30 20 6a 2d 35 0a 67 33 20 78 35 20 79 30      i0 j-5.g3 x5 y0
     ae8:	20 69 35 20 6a 30 0a 67 31 20 66 33 33 33 20 78      i5 j0.g1 f333 x
     af8:	31 30 20 79 30 00                                   10 y0.

00000afe <square_circle_test100>:
     afe:	67 31 20 66 33 33 33 20 78 31 30 30 20 79 30 0a     g1 f333 x100 y0.
     b0e:	78 31 30 30 20 79 31 30 30 0a 78 30 20 79 31 30     x100 y100.x0 y10
     b1e:	30 0a 78 30 20 79 30 0a 78 35 30 0a 67 33 20 78     0.x0 y0.x50.g3 x
     b2e:	31 30 30 20 79 35 30 20 69 30 20 6a 35 30 0a 67     100 y50 i0 j50.g
     b3e:	33 20 78 35 30 20 79 31 30 30 20 69 2d 35 30 20     3 x50 y100 i-50 
     b4e:	6a 30 0a 67 33 20 78 30 20 79 35 30 20 69 30 20     j0.g3 x0 y50 i0 
     b5e:	6a 2d 35 30 0a 67 33 20 78 35 30 20 79 30 20 69     j-50.g3 x50 y0 i
     b6e:	35 30 20 6a 30 00                                   50 j0.

00000b74 <spiral_test5>:
     b74:	67 31 20 66 33 30 30 20 78 2e 35 20 79 30 0a 67     g1 f300 x.5 y0.g
     b84:	32 78 31 59 30 49 30 4a 30 0a 67 32 78 31 2e 35     2x1Y0I0J0.g2x1.5
     b94:	59 30 49 30 4a 30 0a 67 32 78 32 59 30 49 30 4a     Y0I0J0.g2x2Y0I0J
     ba4:	30 0a 67 32 78 32 2e 35 59 30 49 30 4a 30 0a 67     0.g2x2.5Y0I0J0.g
     bb4:	32 78 33 59 30 49 30 4a 30 0a 67 32 78 33 2e 35     2x3Y0I0J0.g2x3.5
     bc4:	59 30 49 30 4a 30 0a 67 32 78 34 59 30 49 30 4a     Y0I0J0.g2x4Y0I0J
     bd4:	30 0a 67 32 78 34 2e 35 59 30 49 30 4a 30 0a 67     0.g2x4.5Y0I0J0.g
     be4:	32 78 35 59 30 49 30 4a 30 00                       2x5Y0I0J0.

00000bee <spiral_test50a>:
     bee:	67 31 20 66 33 33 33 20 78 30 20 79 30 0a 67 33     g1 f333 x0 y0.g3
     bfe:	20 78 35 30 20 79 35 30 20 69 30 20 6a 35 30 00      x50 y50 i0 j50.

00000c0e <g0_test1>:
     c0e:	67 30 20 78 31 30 20 79 32 30 20 7a 33 30 0a 67     g0 x10 y20 z30.g
     c1e:	30 20 78 30 20 79 32 31 20 7a 2d 33 34 2e 32 00     0 x0 y21 z-34.2.

00000c2e <g0_test2>:
     c2e:	67 30 20 78 31 30 20 79 32 30 20 7a 34 30 0a 67     g0 x10 y20 z40.g
     c3e:	30 20 78 30 20 79 30 20 7a 30 0a 67 30 20 78 31     0 x0 y0 z0.g0 x1
     c4e:	30 20 79 32 30 20 7a 34 30 0a 67 30 20 78 30 20     0 y20 z40.g0 x0 
     c5e:	79 30 20 7a 30 00                                   y0 z0.

00000c64 <g0_test3>:
     c64:	67 31 20 66 33 30 30 20 78 31 20 79 32 20 7a 33     g1 f300 x1 y2 z3
     c74:	0a 67 31 20 78 32 20 79 34 20 7a 36 0a 67 31 20     .g1 x2 y4 z6.g1 
     c84:	78 34 30 20 79 2d 36 37 20 7a 2d 31 32 00           x40 y-67 z-12.

00000c92 <radius_arc_test1>:
     c92:	67 31 20 66 33 30 30 20 78 31 20 79 31 0a 67 32     g1 f300 x1 y1.g2
     ca2:	20 66 33 32 30 20 78 31 30 31 20 79 31 30 31 20      f320 x101 y101 
     cb2:	72 35 30 0a 00                                      r50..

00000cb7 <radius_arc_test2>:
     cb7:	67 32 0a 00                                         g2..

00000cbb <zoetrope>:
     cbb:	47 39 30 0a 46 33 32 30 0a 47 31 20 58 2d 32 37     G90.F320.G1 X-27
     ccb:	2e 37 38 31 34 20 59 31 31 2e 33 32 32 32 20 0a     .7814 Y11.3222 .
     cdb:	47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31 2e     G1 X-13.7952 Y1.
     ceb:	39 39 38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37     99803 .G1 X-27.7
     cfb:	38 31 34 20 59 31 31 2e 33 32 32 32 20 0a 47 31     814 Y11.3222 .G1
     d0b:	20 58 2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39      X-27.7814 Y1.99
     d1b:	38 30 33 20 0a 47 31 20 58 2d 32 37 2e 37 38 31     803 .G1 X-27.781
     d2b:	34 20 59 31 31 2e 33 32 32 32 20 0a 47 31 20 58     4 Y11.3222 .G1 X
     d3b:	2d 32 37 2e 37 38 31 34 20 59 31 2e 39 39 38 30     -27.7814 Y1.9980
     d4b:	33 20 0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20     3 .G1 X-13.7952 
     d5b:	59 31 2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31     Y1.99803 .G1 X-1
     d6b:	33 2e 37 39 35 32 20 59 31 31 2e 33 32 32 32 20     3.7952 Y11.3222 
     d7b:	0a 47 31 20 58 2d 31 33 2e 37 39 35 32 20 59 31     .G1 X-13.7952 Y1
     d8b:	2e 39 39 38 30 33 20 0a 47 31 20 58 2d 31 30 2e     .99803 .G1 X-10.
     d9b:	38 30 35 35 20 59 32 31 2e 31 32 31 39 20 0a 47     8055 Y21.1219 .G
     dab:	31 20 58 2d 31 31 2e 33 39 36 31 20 59 31 39 2e     1 X-11.3961 Y19.
     dbb:	37 35 34 38 20 0a 47 31 20 58 2d 31 31 2e 35 35     7548 .G1 X-11.55
     dcb:	38 20 59 31 37 2e 38 37 38 20 0a 47 31 20 58 2d     8 Y17.878 .G1 X-
     ddb:	31 30 2e 37 38 31 34 20 59 31 35 2e 39 32 30 32     10.7814 Y15.9202
     deb:	20 0a 47 31 20 58 2d 39 2e 39 32 33 39 36 20 59      .G1 X-9.92396 Y
     dfb:	31 34 2e 39 30 30 39 20 0a 47 31 20 58 2d 38 2e     14.9009 .G1 X-8.
     e0b:	31 32 38 30 39 20 59 31 33 2e 38 30 30 37 20 0a     12809 Y13.8007 .
     e1b:	47 31 20 58 2d 36 2e 32 35 31 32 39 20 59 31 33     G1 X-6.25129 Y13
     e2b:	2e 36 33 38 38 20 0a 47 31 20 58 2d 34 2e 38 30     .6388 .G1 X-4.80
     e3b:	33 32 34 20 59 31 33 2e 39 38 36 36 20 0a 47 31     324 Y13.9866 .G1
     e4b:	20 58 2d 33 2e 32 37 34 32 35 20 59 31 35 2e 32      X-3.27425 Y15.2
     e5b:	37 32 38 20 0a 47 31 20 58 2d 32 2e 36 38 33 36     728 .G1 X-2.6836
     e6b:	37 20 59 31 36 2e 36 34 20 0a 47 31 20 58 2d 32     7 Y16.64 .G1 X-2
     e7b:	2e 35 32 31 38 32 20 59 31 38 2e 35 31 36 38 20     .52182 Y18.5168 
     e8b:	0a 47 31 20 58 2d 33 2e 32 39 38 33 37 20 59 32     .G1 X-3.29837 Y2
     e9b:	30 2e 34 37 34 35 20 0a 47 31 20 58 2d 34 2e 31     0.4745 .G1 X-4.1
     eab:	35 35 38 34 20 59 32 31 2e 34 39 33 38 20 0a 47     5584 Y21.4938 .G
     ebb:	31 20 58 2d 35 2e 39 35 31 37 31 20 59 32 32 2e     1 X-5.95171 Y22.
     ecb:	35 39 34 31 20 0a 47 31 20 58 2d 37 2e 38 32 38     5941 .G1 X-7.828
     edb:	35 20 59 32 32 2e 37 35 35 39 20 0a 47 31 20 58     5 Y22.7559 .G1 X
     eeb:	2d 39 2e 32 37 36 35 36 20 59 32 32 2e 34 30 38     -9.27656 Y22.408
     efb:	31 20 0a 47 31 20 58 2d 31 30 2e 38 30 35 35 20     1 .G1 X-10.8055 
     f0b:	59 32 31 2e 31 32 31 39 20 0a 47 31 20 58 34 2e     Y21.1219 .G1 X4.
     f1b:	32 37 35 37 36 20 59 31 38 2e 37 34 36 20 0a 47     27576 Y18.746 .G
     f2b:	31 20 58 31 32 2e 32 31 30 33 20 59 31 37 2e 37     1 X12.2103 Y17.7
     f3b:	38 38 20 0a 47 31 20 58 31 32 2e 33 36 39 39 20     88 .G1 X12.3699 
     f4b:	59 31 39 2e 31 31 30 34 20 0a 47 31 20 58 31 31     Y19.1104 .G1 X11
     f5b:	2e 38 36 38 34 20 59 32 30 2e 35 31 32 37 20 0a     .8684 Y20.5127 .
     f6b:	47 31 20 58 31 31 2e 32 38 37 20 59 32 31 2e 32     G1 X11.287 Y21.2
     f7b:	35 33 37 20 0a 47 31 20 58 31 30 2e 30 34 34 34     537 .G1 X10.0444
     f8b:	20 59 32 32 2e 30 37 34 36 20 0a 47 31 20 58 38      Y22.0746 .G1 X8
     f9b:	2e 30 36 30 37 37 20 59 32 32 2e 33 31 34 31 20     .06077 Y22.3141 
     fab:	0a 47 31 20 58 36 2e 36 35 38 35 33 20 59 32 31     .G1 X6.65853 Y21
     fbb:	2e 38 31 32 35 20 0a 47 31 20 58 35 2e 31 37 36     .8125 .G1 X5.176
     fcb:	34 35 20 59 32 30 2e 36 34 39 38 20 0a 47 31 20     45 Y20.6498 .G1 
     fdb:	58 34 2e 32 37 35 37 36 20 59 31 38 2e 37 34 36     X4.27576 Y18.746
     feb:	20 0a 47 31 20 58 34 2e 31 31 36 31 20 59 31 37      .G1 X4.1161 Y17
     ffb:	2e 34 32 33 35 20 0a 47 31 20 58 34 2e 35 33 37     .4235 .G1 X4.537
    100b:	38 33 20 59 31 35 2e 33 36 30 31 20 0a 47 31 20     83 Y15.3601 .G1 
    101b:	58 35 2e 37 30 30 35 39 20 59 31 33 2e 38 37 38     X5.70059 Y13.878
    102b:	20 0a 47 31 20 58 36 2e 39 34 33 31 37 20 59 31      .G1 X6.94317 Y1
    103b:	33 2e 30 35 37 32 20 0a 47 31 20 58 38 2e 39 32     3.0572 .G1 X8.92
    104b:	36 38 20 59 31 32 2e 38 31 37 37 20 0a 47 31 20     68 Y12.8177 .G1 
    105b:	58 31 30 2e 33 32 39 20 59 31 33 2e 33 31 39 32     X10.329 Y13.3192
    106b:	20 0a 47 31 20 58 31 31 2e 38 31 31 31 20 59 31      .G1 X11.8111 Y1
    107b:	34 2e 34 38 32 20 0a 47 31 20 58 32 33 2e 36 35     4.482 .G1 X23.65
    108b:	30 39 20 59 31 34 2e 39 35 31 20 0a 47 31 20 58     09 Y14.951 .G1 X
    109b:	31 34 2e 38 36 38 37 20 59 37 2e 38 30 35 30 39     14.8687 Y7.80509
    10ab:	20 0a 47 31 20 58 31 33 2e 37 33 39 32 20 59 36      .G1 X13.7392 Y6
    10bb:	2e 30 32 37 34 35 20 0a 47 31 20 58 31 34 2e 30     .02745 .G1 X14.0
    10cb:	36 33 33 20 59 34 2e 35 37 33 39 20 0a 47 31 20     633 Y4.5739 .G1 
    10db:	58 31 34 2e 39 30 34 20 59 33 2e 35 34 30 37 20     X14.904 Y3.5407 
    10eb:	0a 47 31 20 58 31 38 2e 37 37 33 37 20 59 31 33     .G1 X18.7737 Y13
    10fb:	2e 35 35 38 34 20 0a 47 31 20 58 32 31 2e 37 31     .5584 .G1 X21.71
    110b:	36 31 20 59 39 2e 39 34 32 31 34 20 0a 47 31 20     61 Y9.94214 .G1 
    111b:	58 31 38 2e 37 37 33 37 20 59 31 33 2e 35 35 38     X18.7737 Y13.558
    112b:	34 20 0a 47 31 20 58 32 33 2e 32 33 35 32 20 59     4 .G1 X23.2352 Y
    113b:	31 2e 33 31 35 33 33 20 0a 47 31 20 58 31 34 2e     1.31533 .G1 X14.
    114b:	30 34 37 34 20 59 2d 30 2e 32 37 33 38 34 38 20     0474 Y-0.273848 
    115b:	0a 47 31 20 58 32 33 2e 32 33 35 32 20 59 31 2e     .G1 X23.2352 Y1.
    116b:	33 31 35 33 33 20 0a 47 31 20 58 31 39 2e 32 39     31533 .G1 X19.29
    117b:	37 36 20 59 30 2e 36 33 34 32 35 32 20 0a 47 31     76 Y0.634252 .G1
    118b:	20 58 32 31 2e 33 37 39 39 20 59 30 2e 33 31 38      X21.3799 Y0.318
    119b:	35 32 34 20 0a 47 31 20 58 32 32 2e 39 31 39 34     524 .G1 X22.9194
    11ab:	20 59 2d 30 2e 37 36 36 39 38 31 20 0a 47 31 20      Y-0.766981 .G1 
    11bb:	58 32 33 2e 38 30 32 37 20 59 2d 31 2e 39 36 36     X23.8027 Y-1.966
    11cb:	20 0a 47 31 20 58 32 34 2e 31 34 33 33 20 59 2d      .G1 X24.1433 Y-
    11db:	33 2e 39 33 34 38 20 0a 47 31 20 58 31 38 2e 36     3.9348 .G1 X18.6
    11eb:	39 31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47     913 Y-14.6127 .G
    11fb:	31 20 58 31 38 2e 36 35 31 37 20 59 2d 31 33 2e     1 X18.6517 Y-13.
    120b:	31 32 33 39 20 0a 47 31 20 58 31 38 2e 30 30 38     1239 .G1 X18.008
    121b:	36 20 59 2d 31 31 2e 33 35 33 33 20 0a 47 31 20     6 Y-11.3533 .G1 
    122b:	58 31 36 2e 34 38 30 33 20 59 2d 39 2e 39 30 34     X16.4803 Y-9.904
    123b:	32 35 20 0a 47 31 20 58 31 35 2e 32 37 33 34 20     25 .G1 X15.2734 
    124b:	59 2d 39 2e 33 34 30 34 36 20 0a 47 31 20 58 31     Y-9.34046 .G1 X1
    125b:	33 2e 31 38 31 33 20 59 2d 39 2e 30 39 38 32 20     3.1813 Y-9.0982 
    126b:	0a 47 31 20 58 31 31 2e 34 31 30 37 20 59 2d 39     .G1 X11.4107 Y-9
    127b:	2e 37 34 31 32 35 20 0a 47 31 20 58 31 30 2e 32     .74125 .G1 X10.2
    128b:	34 33 35 20 59 2d 31 30 2e 36 36 36 32 20 0a 47     435 Y-10.6662 .G
    129b:	31 20 58 39 2e 33 39 37 38 34 20 59 2d 31 32 2e     1 X9.39784 Y-12.
    12ab:	34 37 36 34 20 0a 47 31 20 58 39 2e 34 33 37 34     4764 .G1 X9.4374
    12bb:	37 20 59 2d 31 33 2e 39 36 35 31 20 0a 47 31 20     7 Y-13.9651 .G1 
    12cb:	58 31 30 2e 30 38 30 35 20 59 2d 31 35 2e 37 33     X10.0805 Y-15.73
    12db:	35 37 20 0a 47 31 20 58 31 31 2e 36 30 38 39 20     57 .G1 X11.6089 
    12eb:	59 2d 31 37 2e 31 38 34 38 20 0a 47 31 20 58 31     Y-17.1848 .G1 X1
    12fb:	32 2e 38 31 35 37 20 59 2d 31 37 2e 37 34 38 36     2.8157 Y-17.7486
    130b:	20 0a 47 31 20 58 31 34 2e 39 30 37 38 20 59 2d      .G1 X14.9078 Y-
    131b:	31 37 2e 39 39 30 39 20 0a 47 31 20 58 31 36 2e     17.9909 .G1 X16.
    132b:	36 37 38 34 20 59 2d 31 37 2e 33 34 37 38 20 0a     6784 Y-17.3478 .
    133b:	47 31 20 58 31 37 2e 38 34 35 36 20 59 2d 31 36     G1 X17.8456 Y-16
    134b:	2e 34 32 32 39 20 0a 47 31 20 58 31 38 2e 36 39     .4229 .G1 X18.69
    135b:	31 33 20 59 2d 31 34 2e 36 31 32 37 20 0a 47 31     13 Y-14.6127 .G1
    136b:	20 58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38      X4.61246 Y-22.8
    137b:	31 30 37 20 0a 47 31 20 58 30 2e 32 38 39 34 31     107 .G1 X0.28941
    138b:	35 20 59 2d 39 2e 35 30 39 33 37 20 0a 47 31 20     5 Y-9.50937 .G1 
    139b:	58 34 2e 36 31 32 34 36 20 59 2d 32 32 2e 38 31     X4.61246 Y-22.81
    13ab:	30 37 20 0a 47 31 20 58 33 2e 39 39 34 38 38 20     07 .G1 X3.99488 
    13bb:	59 2d 32 30 2e 39 31 30 35 20 0a 47 31 20 58 33     Y-20.9105 .G1 X3
    13cb:	2e 31 33 39 38 31 20 59 2d 32 32 2e 35 38 39 20     .13981 Y-22.589 
    13db:	0a 47 31 20 58 32 2e 30 37 38 38 37 20 59 2d 32     .G1 X2.07887 Y-2
    13eb:	33 2e 36 33 34 31 20 0a 47 31 20 58 30 2e 31 37     3.6341 .G1 X0.17
    13fb:	38 36 38 34 20 59 2d 32 34 2e 32 35 31 37 20 0a     8684 Y-24.2517 .
    140b:	47 31 20 58 2d 31 2e 32 39 33 39 37 20 59 2d 32     G1 X-1.29397 Y-2
    141b:	34 2e 30 33 20 0a 47 31 20 58 2d 32 2e 39 37 32     4.03 .G1 X-2.972
    142b:	34 38 20 59 2d 32 33 2e 31 37 35 20 0a 47 31 20     48 Y-23.175 .G1 
    143b:	58 2d 34 2e 32 32 33 34 35 20 59 2d 32 31 2e 34     X-4.22345 Y-21.4
    144b:	38 30 36 20 0a 47 31 20 58 2d 34 2e 36 33 35 31     806 .G1 X-4.6351
    145b:	37 20 59 2d 32 30 2e 32 31 33 38 20 0a 47 31 20     7 Y-20.2138 .G1 
    146b:	58 2d 34 2e 36 31 39 33 35 20 59 2d 31 38 2e 31     X-4.61935 Y-18.1
    147b:	30 37 38 20 0a 47 31 20 58 2d 33 2e 37 36 34 32     078 .G1 X-3.7642
    148b:	38 20 59 2d 31 36 2e 34 32 39 33 20 0a 47 31 20     8 Y-16.4293 .G1 
    149b:	58 2d 32 2e 37 30 33 33 35 20 59 2d 31 35 2e 33     X-2.70335 Y-15.3
    14ab:	38 34 32 20 0a 47 31 20 58 2d 30 2e 38 30 33 31     842 .G1 X-0.8031
    14bb:	35 36 20 59 2d 31 34 2e 37 36 36 36 20 0a 47 31     56 Y-14.7666 .G1
    14cb:	20 58 30 2e 36 36 39 34 39 36 20 59 2d 31 34 2e      X0.669496 Y-14.
    14db:	39 38 38 33 20 0a 47 31 20 58 32 2e 33 34 38 30     9883 .G1 X2.3480
    14eb:	31 20 59 2d 31 35 2e 38 34 33 33 20 0a 47 31 20     1 Y-15.8433 .G1 
    14fb:	58 2d 31 30 2e 39 34 37 39 20 59 2d 31 35 2e 38     X-10.9479 Y-15.8
    150b:	30 36 32 20 0a 47 31 20 58 2d 31 37 2e 39 35 35     062 .G1 X-17.955
    151b:	33 20 59 2d 31 31 2e 39 36 32 39 20 0a 47 31 20     3 Y-11.9629 .G1 
    152b:	58 2d 31 38 2e 35 39 35 39 20 59 2d 31 33 2e 31     X-18.5959 Y-13.1
    153b:	33 30 38 20 0a 47 31 20 58 2d 31 38 2e 36 35 32     308 .G1 X-18.652
    154b:	35 20 59 2d 31 34 2e 36 31 39 20 0a 47 31 20 58     5 Y-14.619 .G1 X
    155b:	2d 31 38 2e 33 38 38 38 20 59 2d 31 35 2e 35 32     -18.3888 Y-15.52
    156b:	33 32 20 0a 47 31 20 58 2d 31 37 2e 35 34 31 32     32 .G1 X-17.5412
    157b:	20 59 2d 31 36 2e 37 34 37 37 20 0a 47 31 20 58      Y-16.7477 .G1 X
    158b:	2d 31 35 2e 37 38 39 33 20 59 2d 31 37 2e 37 30     -15.7893 Y-17.70
    159b:	38 35 20 0a 47 31 20 58 2d 31 34 2e 33 30 31 31     85 .G1 X-14.3011
    15ab:	20 59 2d 31 37 2e 37 36 35 31 20 0a 47 31 20 58      Y-17.7651 .G1 X
    15bb:	2d 31 32 2e 34 39 32 37 20 59 2d 31 37 2e 32 33     -12.4927 Y-17.23
    15cb:	37 38 20 0a 47 31 20 58 2d 31 30 2e 39 34 37 39     78 .G1 X-10.9479
    15db:	20 59 2d 31 35 2e 38 30 36 32 20 0a 47 31 20 58      Y-15.8062 .G1 X
    15eb:	2d 31 30 2e 33 30 37 34 20 59 2d 31 34 2e 36 33     -10.3074 Y-14.63
    15fb:	38 33 20 0a 47 31 20 58 2d 39 2e 39 33 30 35 32     83 .G1 X-9.93052
    160b:	20 59 2d 31 32 2e 35 36 36 32 20 0a 47 31 20 58      Y-12.5662 .G1 X
    161b:	2d 31 30 2e 34 35 37 39 20 59 2d 31 30 2e 37 35     -10.4579 Y-10.75
    162b:	37 37 20 0a 47 31 20 58 2d 31 31 2e 33 30 35 35     77 .G1 X-11.3055
    163b:	20 59 2d 39 2e 35 33 33 32 35 20 0a 47 31 20 58      Y-9.53325 .G1 X
    164b:	2d 31 33 2e 30 35 37 33 20 59 2d 38 2e 35 37 32     -13.0573 Y-8.572
    165b:	34 33 20 0a 47 31 20 58 2d 31 34 2e 35 34 35 35     43 .G1 X-14.5455
    166b:	20 59 2d 38 2e 35 31 35 38 33 00                     Y-8.51583.

00001676 <contraptor_circle>:
    1676:	47 32 31 0a 47 39 30 20 0a 47 30 20 5a 31 2e 35     G21.G90 .G0 Z1.5
    1686:	20 0a 47 31 37 20 0a 4d 33 20 53 30 20 0a 47 30      .G17 .M3 S0 .G0
    1696:	20 58 31 37 2e 36 30 37 35 20 59 33 35 2e 36 37      X17.6075 Y35.67
    16a6:	39 37 20 0a 47 31 20 46 31 30 30 2e 30 20 5a 2d     97 .G1 F100.0 Z-
    16b6:	30 2e 35 20 0a 47 31 20 46 32 30 30 2e 30 20 58     0.5 .G1 F200.0 X
    16c6:	32 31 2e 34 30 36 38 20 59 33 35 2e 32 36 35 34     21.4068 Y35.2654
    16d6:	20 0a 47 32 20 58 32 30 2e 31 38 31 39 20 59 33      .G2 X20.1819 Y3
    16e6:	32 2e 37 33 36 33 20 49 2d 39 2e 30 35 32 36 20     2.7363 I-9.0526 
    16f6:	4a 32 2e 38 32 33 33 20 0a 47 32 20 58 31 38 2e     J2.8233 .G2 X18.
    1706:	30 37 37 33 20 59 33 30 2e 37 30 37 32 20 49 2d     0773 Y30.7072 I-
    1716:	36 2e 35 34 20 4a 34 2e 36 37 37 33 20 0a 47 32     6.54 J4.6773 .G2
    1726:	20 58 31 35 2e 31 32 34 33 20 59 32 39 2e 34 34      X15.1243 Y29.44
    1736:	34 34 20 49 2d 34 2e 37 34 31 34 20 4a 37 2e 30     44 I-4.7414 J7.0
    1746:	30 33 37 20 0a 47 32 20 58 31 31 2e 38 36 37 37     037 .G2 X11.8677
    1756:	20 59 32 39 2e 30 38 35 37 20 49 2d 32 2e 39 36      Y29.0857 I-2.96
    1766:	30 35 20 4a 31 31 2e 39 31 34 37 20 0a 47 32 20     05 J11.9147 .G2 
    1776:	58 37 2e 37 38 30 33 20 59 32 39 2e 36 36 39 37     X7.7803 Y29.6697
    1786:	20 49 2d 30 2e 33 38 35 33 20 4a 31 31 2e 38 39      I-0.3853 J11.89
    1796:	39 20 0a 47 32 20 58 34 2e 33 31 20 59 33 31 2e     9 .G2 X4.31 Y31.
    17a6:	36 36 32 31 20 49 32 2e 34 37 39 31 20 4a 38 2e     6621 I2.4791 J8.
    17b6:	33 33 36 38 20 0a 47 32 20 58 32 2e 31 32 34 33     3368 .G2 X2.1243
    17c6:	20 59 33 35 2e 30 35 35 32 20 49 36 2e 30 35 37      Y35.0552 I6.057
    17d6:	34 20 4a 36 2e 33 30 32 34 20 0a 47 32 20 58 31     4 J6.3024 .G2 X1
    17e6:	2e 35 33 32 20 59 33 38 2e 39 32 32 37 20 49 31     .532 Y38.9227 I1
    17f6:	32 2e 37 34 33 33 20 4a 33 2e 39 33 30 36 20 0a     2.7433 J3.9306 .
    1806:	47 32 20 58 32 2e 31 32 38 36 20 59 34 32 2e 39     G2 X2.1286 Y42.9
    1816:	30 37 39 20 49 31 34 2e 30 32 38 31 20 4a 2d 30     079 I14.0281 J-0
    1826:	2e 30 36 33 20 0a 47 32 20 58 34 2e 33 35 30 38     .063 .G2 X4.3508
    1836:	20 59 34 36 2e 34 31 37 35 20 49 38 2e 35 31 36      Y46.4175 I8.516
    1846:	36 20 4a 2d 32 2e 39 33 34 32 20 0a 47 32 20 58     6 J-2.9342 .G2 X
    1856:	37 2e 36 37 39 34 20 59 34 38 2e 34 35 20 49 36     7.6794 Y48.45 I6
    1866:	2e 31 36 34 37 20 4a 2d 36 2e 33 35 33 39 20 0a     .1647 J-6.3539 .
    1876:	47 32 20 58 31 31 2e 36 36 33 35 20 59 34 39 2e     G2 X11.6635 Y49.
    1886:	30 38 34 20 49 33 2e 36 32 37 39 20 4a 2d 39 2e     084 I3.6279 J-9.
    1896:	39 36 33 36 20 0a 47 32 20 58 31 35 2e 35 33 39     9636 .G2 X15.539
    18a6:	33 20 59 34 38 2e 34 35 38 37 20 49 30 2e 33 34     3 Y48.4587 I0.34
    18b6:	33 33 20 4a 2d 31 30 2e 31 39 36 38 20 0a 47 32     33 J-10.1968 .G2
    18c6:	20 58 31 38 2e 37 37 31 38 20 59 34 36 2e 34 37      X18.7718 Y46.47
    18d6:	31 36 20 49 2d 32 2e 38 32 31 33 20 4a 2d 38 2e     16 I-2.8213 J-8.
    18e6:	32 31 32 34 20 0a 47 32 20 58 32 30 2e 39 34 36     2124 .G2 X20.946
    18f6:	35 20 59 34 33 2e 30 32 38 35 20 49 2d 36 2e 31     5 Y43.0285 I-6.1
    1906:	37 34 38 20 4a 2d 36 2e 33 30 38 33 20 0a 47 32     748 J-6.3083 .G2
    1916:	20 58 32 31 2e 35 32 39 34 20 59 33 39 2e 31 32      X21.5294 Y39.12
    1926:	30 39 20 49 2d 31 33 2e 32 31 39 32 20 4a 2d 33     09 I-13.2192 J-3
    1936:	2e 39 36 39 32 20 0a 47 32 20 58 32 31 2e 35 30     .9692 .G2 X21.50
    1946:	39 20 59 33 38 2e 32 35 36 31 20 49 2d 33 32 2e     9 Y38.2561 I-32.
    1956:	33 37 20 4a 30 2e 33 33 31 39 20 0a 47 31 20 58     37 J0.3319 .G1 X
    1966:	35 2e 33 33 31 33 20 0a 47 33 20 58 35 2e 38 35     5.3313 .G3 X5.85
    1976:	34 39 20 59 33 35 2e 36 38 33 31 20 49 39 2e 39     49 Y35.6831 I9.9
    1986:	33 32 32 20 4a 30 2e 36 38 31 36 20 0a 47 33 20     322 J0.6816 .G3 
    1996:	58 37 2e 33 35 33 35 20 59 33 33 2e 34 32 37 37     X7.3535 Y33.4277
    19a6:	20 49 35 2e 37 35 33 32 20 4a 32 2e 31 39 37 31      I5.7532 J2.1971
    19b6:	20 0a 47 33 20 58 31 31 2e 38 38 38 31 20 59 33      .G3 X11.8881 Y3
    19c6:	31 2e 37 35 32 32 20 49 34 2e 31 34 20 4a 34 2e     1.7522 I4.14 J4.
    19d6:	32 33 30 35 20 0a 47 33 20 58 31 35 2e 33 34 30     2305 .G3 X15.340
    19e6:	32 20 59 33 32 2e 36 38 39 20 49 30 2e 33 34 30     2 Y32.689 I0.340
    19f6:	34 20 4a 35 2e 35 37 34 32 20 0a 47 33 20 58 31     4 J5.5742 .G3 X1
    1a06:	36 2e 37 32 30 36 20 59 33 34 2e 30 33 38 39 20     6.7206 Y34.0389 
    1a16:	49 2d 32 2e 39 33 32 39 20 4a 34 2e 33 37 39 39     I-2.9329 J4.3799
    1a26:	20 0a 47 33 20 58 31 37 2e 36 30 37 35 20 59 33      .G3 X17.6075 Y3
    1a36:	35 2e 36 37 39 37 20 49 2d 37 2e 30 38 31 36 20     5.6797 I-7.0816 
    1a46:	4a 34 2e 38 38 38 20 0a 47 30 20 5a 31 2e 35 00     J4.888 .G0 Z1.5.

00001a56 <tgModeStringControl>:
    1a56:	43 4f 4e 54 52 4f 4c 20 4d 4f 44 45 00              CONTROL MODE.

00001a63 <tgModeStringConfig>:
    1a63:	43 4f 4e 46 49 47 20 4d 4f 44 45 00                 CONFIG MODE.

00001a6f <tgModeStringGCode>:
    1a6f:	47 2d 43 4f 44 45 20 4d 4f 44 45 00                 G-CODE MODE.

00001a7b <tgModeStringDirect>:
    1a7b:	44 49 52 45 43 54 20 44 52 49 56 45 00              DIRECT DRIVE.

00001a88 <tgModeStrings>:
    1a88:	56 1a 63 1a 6f 1a 7b 1a                             V.c.o.{.

00001a90 <__c.3998>:
    1a90:	47 6f 74 20 61 20 4b 49 4c 4c 20 63 6f 6d 6d 61     Got a KILL comma
    1aa0:	6e 64 20 6f 72 20 6c 69 6d 69 74 20 73 77 69 74     nd or limit swit
    1ab0:	63 68 0a 00                                         ch..

00001ab4 <__c.3951>:
    1ab4:	45 6e 64 20 6f 66 20 63 6f 6d 6d 61 6e 64 20 66     End of command f
    1ac4:	69 6c 65 0a 00                                      ile..

00001ac9 <__c.3983>:
    1ac9:	0d 0a 45 6e 64 20 6f 66 20 66 69 6c 65 20 65 6e     ..End of file en
    1ad9:	63 6f 75 6e 74 65 72 65 64 0d 0a 00                 countered...

00001ae5 <__c.3929>:
    1ae5:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001af3 <__c.3924>:
    1af3:	54 69 6e 79 47 20 5b 25 53 5d 2a 3e 20 00           TinyG [%S]*> .

00001b01 <__c.3856>:
    1b01:	62 75 69 6c 64 20 31 39 38 00                       build 198.

00001b0b <__c.3854>:
    1b0b:	54 69 6e 79 47 20 2d 20 56 65 72 73 69 6f 6e 20     TinyG - Version 
    1b1b:	25 53 0a 00                                         %S..

00001b1f <pstr_inf>:
    1b1f:	49 4e 46                                            INF

00001b22 <pstr_inity>:
    1b22:	49 4e 49 54 59                                      INITY

00001b27 <pstr_nan>:
    1b27:	4e 41 4e                                            NAN

00001b2a <pwr_m10>:
    1b2a:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    1b3a:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00001b42 <pwr_p10>:
    1b42:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    1b52:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
    1b62:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
    1b72:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
    1b82:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
    1b92:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
    1ba2:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
    1bb2:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
    1bc2:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
    1bd2:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
    1be2:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
    1bf2:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
    1c02:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
    1c12:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
    1c22:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
    1c32:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
    1c42:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
    1c52:	3d 27                                               ='

00001c54 <__ctors_end>:
    1c54:	11 24       	eor	r1, r1
    1c56:	1f be       	out	0x3f, r1	; 63
    1c58:	cf ef       	ldi	r28, 0xFF	; 255
    1c5a:	df e5       	ldi	r29, 0x5F	; 95
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	cd bf       	out	0x3d, r28	; 61
    1c60:	00 e0       	ldi	r16, 0x00	; 0
    1c62:	0c bf       	out	0x3c, r16	; 60

00001c64 <__do_copy_data>:
    1c64:	11 e2       	ldi	r17, 0x21	; 33
    1c66:	a0 e0       	ldi	r26, 0x00	; 0
    1c68:	b0 e2       	ldi	r27, 0x20	; 32
    1c6a:	e6 e9       	ldi	r30, 0x96	; 150
    1c6c:	fa e8       	ldi	r31, 0x8A	; 138
    1c6e:	00 e0       	ldi	r16, 0x00	; 0
    1c70:	0b bf       	out	0x3b, r16	; 59
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <__do_copy_data+0x14>
    1c74:	07 90       	elpm	r0, Z+
    1c76:	0d 92       	st	X+, r0
    1c78:	ac 31       	cpi	r26, 0x1C	; 28
    1c7a:	b1 07       	cpc	r27, r17
    1c7c:	d9 f7       	brne	.-10     	; 0x1c74 <__do_copy_data+0x10>

00001c7e <__do_clear_bss>:
    1c7e:	15 e2       	ldi	r17, 0x25	; 37
    1c80:	ac e1       	ldi	r26, 0x1C	; 28
    1c82:	b1 e2       	ldi	r27, 0x21	; 33
    1c84:	01 c0       	rjmp	.+2      	; 0x1c88 <.do_clear_bss_start>

00001c86 <.do_clear_bss_loop>:
    1c86:	1d 92       	st	X+, r1

00001c88 <.do_clear_bss_start>:
    1c88:	a4 31       	cpi	r26, 0x14	; 20
    1c8a:	b1 07       	cpc	r27, r17
    1c8c:	e1 f7       	brne	.-8      	; 0x1c86 <.do_clear_bss_loop>
    1c8e:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <main>
    1c92:	0c 94 49 45 	jmp	0x8a92	; 0x8a92 <_exit>

00001c96 <__bad_interrupt>:
    1c96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001c9a <main>:


int main(void) 
{
	/* These inits are order dependent */
	cli();
    1c9a:	f8 94       	cli
	xmega_init();				// xmega setup
    1c9c:	0e 94 12 1a 	call	0x3424	; 0x3424 <xmega_init>
	xio_init();					// xmega io subsystem
    1ca0:	0e 94 44 26 	call	0x4c88	; 0x4c88 <xio_init>

	cfg_init();					// get config record from eeprom
    1ca4:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <cfg_init>
	st_init(); 					// stepper subsystem
    1ca8:	0e 94 a2 22 	call	0x4544	; 0x4544 <st_init>
	ls_init();					// limit switches
    1cac:	0e 94 4b 31 	call	0x6296	; 0x6296 <ls_init>
	mv_init();					// move buffers
    1cb0:	0e 94 d8 2f 	call	0x5fb0	; 0x5fb0 <mv_init>
	mc_init();					// motion control subsystem
    1cb4:	0e 94 86 1a 	call	0x350c	; 0x350c <mc_init>
	spindle_init();				// spindle controller
    1cb8:	0e 94 86 22 	call	0x450c	; 0x450c <spindle_init>
	en_init();					// encoders
    1cbc:	0e 94 de 19 	call	0x33bc	; 0x33bc <en_init>
	gc_init();					// gcode-parser
    1cc0:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <gc_init>
	dd_init();					// direct drive commands
    1cc4:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <dd_init>
	tg_init();					// tinyg parsers
    1cc8:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <tg_init>

	PMIC_SetVectorLocationToApplication();  // as opposed to boot rom
    1ccc:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <PMIC_SetVectorLocationToApplication>
	PMIC_EnableLowLevel();		// enable TX interrupts
    1cd0:	e0 ea       	ldi	r30, 0xA0	; 160
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 91 a2 00 	lds	r24, 0x00A2
    1cd8:	81 60       	ori	r24, 0x01	; 1
    1cda:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableMediumLevel(); 	// enable RX interrupts
    1cdc:	80 91 a2 00 	lds	r24, 0x00A2
    1ce0:	82 60       	ori	r24, 0x02	; 2
    1ce2:	82 83       	std	Z+2, r24	; 0x02
	PMIC_EnableHighLevel();		// enable stepper timer interrupts
    1ce4:	80 91 a2 00 	lds	r24, 0x00A2
    1ce8:	84 60       	ori	r24, 0x04	; 4
    1cea:	82 83       	std	Z+2, r24	; 0x02
	sei();						// enable global interrupts
    1cec:	78 94       	sei
//	xio_usb_queue_RX_string("f\n");
//	xio_usb_queue_RX_string("?\n");
//	xio_usb_queue_RX_string("g0x10y10z25\n");

	for(;;){
		tg_controller();
    1cee:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <tg_controller>
    1cf2:	fd cf       	rjmp	.-6      	; 0x1cee <main+0x54>

00001cf4 <select_plane>:
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1cf4:	80 93 69 21 	sts	0x2169, r24
	gc.plane_axis_1 = axis_1;
    1cf8:	60 93 6a 21 	sts	0x216A, r22
	gc.plane_axis_2 = axis_2;
    1cfc:	40 93 6b 21 	sts	0x216B, r20
}
    1d00:	08 95       	ret

00001d02 <to_millimeters>:
 * to_millimeters()
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
    1d02:	ef 92       	push	r14
    1d04:	ff 92       	push	r15
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	7b 01       	movw	r14, r22
    1d0c:	8c 01       	movw	r16, r24
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    1d0e:	80 91 29 21 	lds	r24, 0x2129
    1d12:	88 23       	and	r24, r24
    1d14:	51 f0       	breq	.+20     	; 0x1d2a <to_millimeters+0x28>
    1d16:	c8 01       	movw	r24, r16
    1d18:	b7 01       	movw	r22, r14
    1d1a:	25 e8       	ldi	r18, 0x85	; 133
    1d1c:	32 e4       	ldi	r19, 0x42	; 66
    1d1e:	41 e2       	ldi	r20, 0x21	; 33
    1d20:	5d e3       	ldi	r21, 0x3D	; 61
    1d22:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    1d26:	7b 01       	movw	r14, r22
    1d28:	8c 01       	movw	r16, r24
}
    1d2a:	b7 01       	movw	r22, r14
    1d2c:	c8 01       	movw	r24, r16
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	ff 90       	pop	r15
    1d34:	ef 90       	pop	r14
    1d36:	08 95       	ret

00001d38 <gc_init>:
/* 
 * gc_init() 
 */

void gc_init() {
	memset(&gc, 0, sizeof(gc));				// must set doubles independently (true?)
    1d38:	86 e5       	ldi	r24, 0x56	; 86
    1d3a:	ec e1       	ldi	r30, 0x1C	; 28
    1d3c:	f1 e2       	ldi	r31, 0x21	; 33
    1d3e:	df 01       	movw	r26, r30
    1d40:	1d 92       	st	X+, r1
    1d42:	8a 95       	dec	r24
    1d44:	e9 f7       	brne	.-6      	; 0x1d40 <gc_init+0x8>
  	gc.dwell_time = 0; 						// was 'p' 
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a0 e0       	ldi	r26, 0x00	; 0
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	80 93 2d 21 	sts	0x212D, r24
    1d52:	90 93 2e 21 	sts	0x212E, r25
    1d56:	a0 93 2f 21 	sts	0x212F, r26
    1d5a:	b0 93 30 21 	sts	0x2130, r27
	gc.radius = 0;							// radius value
    1d5e:	80 93 31 21 	sts	0x2131, r24
    1d62:	90 93 32 21 	sts	0x2132, r25
    1d66:	a0 93 33 21 	sts	0x2133, r26
    1d6a:	b0 93 34 21 	sts	0x2134, r27
	gc.feed_rate = cfg.default_feed_rate;	// was divided by 60 in Grbl
    1d6e:	80 91 4a 24 	lds	r24, 0x244A
    1d72:	90 91 4b 24 	lds	r25, 0x244B
    1d76:	a0 91 4c 24 	lds	r26, 0x244C
    1d7a:	b0 91 4d 24 	lds	r27, 0x244D
    1d7e:	80 93 35 21 	sts	0x2135, r24
    1d82:	90 93 36 21 	sts	0x2136, r25
    1d86:	a0 93 37 21 	sts	0x2137, r26
    1d8a:	b0 93 38 21 	sts	0x2138, r27
	gc.seek_rate = cfg.default_seek_rate;	// was divided by 60 in Grbl
    1d8e:	80 91 4e 24 	lds	r24, 0x244E
    1d92:	90 91 4f 24 	lds	r25, 0x244F
    1d96:	a0 91 50 24 	lds	r26, 0x2450
    1d9a:	b0 91 51 24 	lds	r27, 0x2451
    1d9e:	80 93 39 21 	sts	0x2139, r24
    1da2:	90 93 3a 21 	sts	0x213A, r25
    1da6:	a0 93 3b 21 	sts	0x213B, r26
    1daa:	b0 93 3c 21 	sts	0x213C, r27

	gc.absolute_mode = TRUE;
    1dae:	21 e0       	ldi	r18, 0x01	; 1
    1db0:	20 93 2a 21 	sts	0x212A, r18
	gc.inverse_feed_rate = -1; 				// negative inverse_feed_rate means 
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a0 e8       	ldi	r26, 0x80	; 128
    1dba:	bf eb       	ldi	r27, 0xBF	; 191
    1dbc:	80 93 41 21 	sts	0x2141, r24
    1dc0:	90 93 42 21 	sts	0x2142, r25
    1dc4:	a0 93 43 21 	sts	0x2143, r26
    1dc8:	b0 93 44 21 	sts	0x2144, r27
											//	  no inverse_feed_rate specified
	gc.radius_mode = FALSE;
    1dcc:	10 92 2b 21 	sts	0x212B, r1
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
    1dd0:	10 92 70 21 	sts	0x2170, r1
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants
    1dd4:	10 92 71 21 	sts	0x2171, r1
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    1dd8:	10 92 69 21 	sts	0x2169, r1
	gc.plane_axis_1 = axis_1;
    1ddc:	20 93 6a 21 	sts	0x216A, r18
	gc.plane_axis_2 = axis_2;
    1de0:	82 e0       	ldi	r24, 0x02	; 2
    1de2:	80 93 6b 21 	sts	0x216B, r24
	gc.radius_mode = FALSE;
	gc.absolute_override = FALSE; 			// TRUE=absolute motion for this block only{G53}
	gc.next_action = NEXT_ACTION_DEFAULT; 	// One of the NEXT_ACTION_-constants

	select_plane(X_AXIS, Y_AXIS, Z_AXIS);
}
    1de6:	08 95       	ret

00001de8 <_gc_next_statement>:
 *	Returns TRUE if there was a statement, FALSE if end of string was reached
 *	or there was an error (check state.status).
 */

int _gc_next_statement(char *letter, double *value_ptr, 
					   double *fraction_ptr, char *buf, int *i) {
    1de8:	4f 92       	push	r4
    1dea:	5f 92       	push	r5
    1dec:	6f 92       	push	r6
    1dee:	7f 92       	push	r7
    1df0:	8f 92       	push	r8
    1df2:	9f 92       	push	r9
    1df4:	af 92       	push	r10
    1df6:	bf 92       	push	r11
    1df8:	cf 92       	push	r12
    1dfa:	df 92       	push	r13
    1dfc:	ef 92       	push	r14
    1dfe:	ff 92       	push	r15
    1e00:	0f 93       	push	r16
    1e02:	1f 93       	push	r17
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	0f 92       	push	r0
    1e0a:	0f 92       	push	r0
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	3b 01       	movw	r6, r22
    1e12:	2a 01       	movw	r4, r20
    1e14:	49 01       	movw	r8, r18
    1e16:	58 01       	movw	r10, r16
	if (buf[*i] == 0) {
    1e18:	d8 01       	movw	r26, r16
    1e1a:	ed 91       	ld	r30, X+
    1e1c:	fc 91       	ld	r31, X
    1e1e:	e2 0f       	add	r30, r18
    1e20:	f3 1f       	adc	r31, r19
    1e22:	e0 81       	ld	r30, Z
    1e24:	ee 23       	and	r30, r30
    1e26:	41 f0       	breq	.+16     	; 0x1e38 <_gc_next_statement+0x50>
		return(FALSE); // No more statements
	}
  
	*letter = buf[*i];
    1e28:	dc 01       	movw	r26, r24
    1e2a:	ec 93       	st	X, r30
	if((*letter < 'A') || (*letter > 'Z')) {
    1e2c:	e1 54       	subi	r30, 0x41	; 65
    1e2e:	ea 31       	cpi	r30, 0x1A	; 26
    1e30:	30 f0       	brcs	.+12     	; 0x1e3e <_gc_next_statement+0x56>
		FAIL(TG_EXPECTED_COMMAND_LETTER);
    1e32:	88 e0       	ldi	r24, 0x08	; 8
    1e34:	80 93 1c 21 	sts	0x211C, r24
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	35 c0       	rjmp	.+106    	; 0x1ea8 <_gc_next_statement+0xc0>
		return(FALSE);
	}
	(*i)++;
    1e3e:	f8 01       	movw	r30, r16
    1e40:	80 81       	ld	r24, Z
    1e42:	91 81       	ldd	r25, Z+1	; 0x01
    1e44:	01 96       	adiw	r24, 0x01	; 1
    1e46:	80 83       	st	Z, r24
    1e48:	91 83       	std	Z+1, r25	; 0x01
 *	double_ptr	pointer to double to be read
 */

int _gc_read_double(char *buf, int *i, double *double_ptr) 
{
	char *start = buf + *i;
    1e4a:	89 01       	movw	r16, r18
    1e4c:	08 0f       	add	r16, r24
    1e4e:	19 1f       	adc	r17, r25
	char *end;
  
	*double_ptr = strtod(start, &end);
    1e50:	c8 01       	movw	r24, r16
    1e52:	be 01       	movw	r22, r28
    1e54:	6f 5f       	subi	r22, 0xFF	; 255
    1e56:	7f 4f       	sbci	r23, 0xFF	; 255
    1e58:	0e 94 7d 41 	call	0x82fa	; 0x82fa <strtod>
    1e5c:	6b 01       	movw	r12, r22
    1e5e:	7c 01       	movw	r14, r24
    1e60:	d3 01       	movw	r26, r6
    1e62:	6d 93       	st	X+, r22
    1e64:	7d 93       	st	X+, r23
    1e66:	8d 93       	st	X+, r24
    1e68:	9c 93       	st	X, r25
    1e6a:	13 97       	sbiw	r26, 0x03	; 3
	if(end == start) { 
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e70:	80 17       	cp	r24, r16
    1e72:	91 07       	cpc	r25, r17
    1e74:	11 f4       	brne	.+4      	; 0x1e7a <_gc_next_statement+0x92>
		FAIL(TG_BAD_NUMBER_FORMAT); 
    1e76:	8c e0       	ldi	r24, 0x0C	; 12
    1e78:	dd cf       	rjmp	.-70     	; 0x1e34 <_gc_next_statement+0x4c>
		return(FALSE); 
	};
	*i = end - buf;
    1e7a:	88 19       	sub	r24, r8
    1e7c:	99 09       	sbc	r25, r9
    1e7e:	f5 01       	movw	r30, r10
    1e80:	80 83       	st	Z, r24
    1e82:	91 83       	std	Z+1, r25	; 0x01
	}
	(*i)++;
	if (!_gc_read_double(buf, i, value_ptr)) {
		return(FALSE);
	};
	*fraction_ptr = (*value_ptr - trunc(*value_ptr));
    1e84:	c7 01       	movw	r24, r14
    1e86:	b6 01       	movw	r22, r12
    1e88:	0e 94 e2 40 	call	0x81c4	; 0x81c4 <trunc>
    1e8c:	9b 01       	movw	r18, r22
    1e8e:	ac 01       	movw	r20, r24
    1e90:	c7 01       	movw	r24, r14
    1e92:	b6 01       	movw	r22, r12
    1e94:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    1e98:	d2 01       	movw	r26, r4
    1e9a:	6d 93       	st	X+, r22
    1e9c:	7d 93       	st	X+, r23
    1e9e:	8d 93       	st	X+, r24
    1ea0:	9c 93       	st	X, r25
    1ea2:	13 97       	sbiw	r26, 0x03	; 3
    1ea4:	21 e0       	ldi	r18, 0x01	; 1
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
	return(TRUE);
}
    1ea8:	c9 01       	movw	r24, r18
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	1f 91       	pop	r17
    1eb4:	0f 91       	pop	r16
    1eb6:	ff 90       	pop	r15
    1eb8:	ef 90       	pop	r14
    1eba:	df 90       	pop	r13
    1ebc:	cf 90       	pop	r12
    1ebe:	bf 90       	pop	r11
    1ec0:	af 90       	pop	r10
    1ec2:	9f 90       	pop	r9
    1ec4:	8f 90       	pop	r8
    1ec6:	7f 90       	pop	r7
    1ec8:	6f 90       	pop	r6
    1eca:	5f 90       	pop	r5
    1ecc:	4f 90       	pop	r4
    1ece:	08 95       	ret

00001ed0 <theta>:
 *	Find the angle in radians of deviance from the positive y axis. 
 *	negative angles to the left of y-axis, positive to the right.
 */

double theta(double x, double y)
{
    1ed0:	af 92       	push	r10
    1ed2:	bf 92       	push	r11
    1ed4:	cf 92       	push	r12
    1ed6:	df 92       	push	r13
    1ed8:	ef 92       	push	r14
    1eda:	ff 92       	push	r15
    1edc:	0f 93       	push	r16
    1ede:	1f 93       	push	r17
    1ee0:	79 01       	movw	r14, r18
    1ee2:	8a 01       	movw	r16, r20
	double theta = atan(x/fabs(y));
    1ee4:	5f 77       	andi	r21, 0x7F	; 127
    1ee6:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    1eea:	0e 94 37 3d 	call	0x7a6e	; 0x7a6e <atan>
    1eee:	5b 01       	movw	r10, r22
    1ef0:	6c 01       	movw	r12, r24

	if (y>0) {
    1ef2:	c8 01       	movw	r24, r16
    1ef4:	b7 01       	movw	r22, r14
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e0       	ldi	r20, 0x00	; 0
    1efc:	50 e0       	ldi	r21, 0x00	; 0
    1efe:	0e 94 62 3f 	call	0x7ec4	; 0x7ec4 <__gesf2>
    1f02:	18 16       	cp	r1, r24
    1f04:	cc f0       	brlt	.+50     	; 0x1f38 <theta+0x68>
		return(theta);
	} else {
		if (theta>0) 
    1f06:	c6 01       	movw	r24, r12
    1f08:	b5 01       	movw	r22, r10
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e0       	ldi	r20, 0x00	; 0
    1f10:	50 e0       	ldi	r21, 0x00	; 0
    1f12:	0e 94 62 3f 	call	0x7ec4	; 0x7ec4 <__gesf2>
    1f16:	18 16       	cp	r1, r24
    1f18:	2c f4       	brge	.+10     	; 0x1f24 <theta+0x54>
	    {
			return(M_PI-theta);
    1f1a:	6b ed       	ldi	r22, 0xDB	; 219
    1f1c:	7f e0       	ldi	r23, 0x0F	; 15
    1f1e:	89 e4       	ldi	r24, 0x49	; 73
    1f20:	90 e4       	ldi	r25, 0x40	; 64
    1f22:	04 c0       	rjmp	.+8      	; 0x1f2c <theta+0x5c>
    	} else {
			return(-M_PI-theta);
    1f24:	6b ed       	ldi	r22, 0xDB	; 219
    1f26:	7f e0       	ldi	r23, 0x0F	; 15
    1f28:	89 e4       	ldi	r24, 0x49	; 73
    1f2a:	90 ec       	ldi	r25, 0xC0	; 192
    1f2c:	a6 01       	movw	r20, r12
    1f2e:	95 01       	movw	r18, r10
    1f30:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    1f34:	5b 01       	movw	r10, r22
    1f36:	6c 01       	movw	r12, r24
		}
	}
}
    1f38:	b5 01       	movw	r22, r10
    1f3a:	c6 01       	movw	r24, r12
    1f3c:	1f 91       	pop	r17
    1f3e:	0f 91       	pop	r16
    1f40:	ff 90       	pop	r15
    1f42:	ef 90       	pop	r14
    1f44:	df 90       	pop	r13
    1f46:	cf 90       	pop	r12
    1f48:	bf 90       	pop	r11
    1f4a:	af 90       	pop	r10
    1f4c:	08 95       	ret

00001f4e <gc_execute_block>:
 *	The line is assumed to contain only uppercase characters and signed floats 
 *	(no whitespace).
 */

uint8_t gc_execute_block(char *buf) 
{
    1f4e:	2f 92       	push	r2
    1f50:	3f 92       	push	r3
    1f52:	4f 92       	push	r4
    1f54:	5f 92       	push	r5
    1f56:	6f 92       	push	r6
    1f58:	7f 92       	push	r7
    1f5a:	8f 92       	push	r8
    1f5c:	9f 92       	push	r9
    1f5e:	af 92       	push	r10
    1f60:	bf 92       	push	r11
    1f62:	cf 92       	push	r12
    1f64:	df 92       	push	r13
    1f66:	ef 92       	push	r14
    1f68:	ff 92       	push	r15
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	68 97       	sbiw	r28, 0x18	; 24
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	4c 01       	movw	r8, r24
	int i = 0;  				// index into Gcode block buffer (buf)
    1f7e:	19 82       	std	Y+1, r1	; 0x01
    1f80:	1a 82       	std	Y+2, r1	; 0x02
  
	clear_vector(gc.target);
    1f82:	e1 e5       	ldi	r30, 0x51	; 81
    1f84:	f1 e2       	ldi	r31, 0x21	; 33
    1f86:	8c e0       	ldi	r24, 0x0C	; 12
    1f88:	df 01       	movw	r26, r30
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	1d 92       	st	X+, r1
    1f8e:	2a 95       	dec	r18
    1f90:	e9 f7       	brne	.-6      	; 0x1f8c <gc_execute_block+0x3e>
	clear_vector(gc.offset);
    1f92:	3c 96       	adiw	r30, 0x0c	; 12
    1f94:	df 01       	movw	r26, r30
    1f96:	1d 92       	st	X+, r1
    1f98:	8a 95       	dec	r24
    1f9a:	e9 f7       	brne	.-6      	; 0x1f96 <gc_execute_block+0x48>

	gc.status = TG_OK;
    1f9c:	10 92 1c 21 	sts	0x211C, r1
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are
    1fa0:	10 92 2c 21 	sts	0x212C, r1

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    1fa4:	6e 01       	movw	r12, r28
    1fa6:	08 94       	sec
    1fa8:	c1 1c       	adc	r12, r1
    1faa:	d1 1c       	adc	r13, r1
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
					case 3: gc.spindle_direction = 1; break;
    1fac:	ff 24       	eor	r15, r15
    1fae:	f3 94       	inc	r15
					case 4: gc.spindle_direction = -1; break;
					case 5: gc.spindle_direction = 0; break;
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    1fb0:	ba e0       	ldi	r27, 0x0A	; 10
    1fb2:	bb 2e       	mov	r11, r27
				break;
      
			case 'M':
				switch((int)gc.value) {
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    1fb4:	a2 e0       	ldi	r26, 0x02	; 2
    1fb6:	ea 2e       	mov	r14, r26
					case 3: gc.spindle_direction = 1; break;
					case 4: gc.spindle_direction = -1; break;
    1fb8:	77 24       	eor	r7, r7
    1fba:	7a 94       	dec	r7
					case 20: { gc.inches_mode = TRUE; break; }
					case 21: { gc.inches_mode = FALSE; break; }
					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 53: { gc.absolute_override = TRUE; break; }
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    1fbc:	f4 e0       	ldi	r31, 0x04	; 4
    1fbe:	6f 2e       	mov	r6, r31
			case 'G':
				switch((int)gc.value) {
					case 0:  { gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
					case 1:  { gc.motion_mode = MOTION_MODE_LINEAR; break; }
					case 2:  { gc.motion_mode = MOTION_MODE_CW_ARC; break; }
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    1fc0:	e3 e0       	ldi	r30, 0x03	; 3
    1fc2:	ae 2e       	mov	r10, r30
    1fc4:	02 c1       	rjmp	.+516    	; 0x21ca <gc_execute_block+0x27c>
	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    	switch(gc.letter) {
    1fc6:	80 91 1d 21 	lds	r24, 0x211D
    1fca:	8d 34       	cpi	r24, 0x4D	; 77
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <gc_execute_block+0x82>
    1fce:	b6 c0       	rjmp	.+364    	; 0x213c <gc_execute_block+0x1ee>
    1fd0:	84 35       	cpi	r24, 0x54	; 84
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <gc_execute_block+0x88>
    1fd4:	e8 c0       	rjmp	.+464    	; 0x21a6 <gc_execute_block+0x258>
    1fd6:	87 34       	cpi	r24, 0x47	; 71
    1fd8:	09 f0       	breq	.+2      	; 0x1fdc <gc_execute_block+0x8e>
    1fda:	f3 c0       	rjmp	.+486    	; 0x21c2 <gc_execute_block+0x274>
			case 'G':
				switch((int)gc.value) {
    1fdc:	60 91 1e 21 	lds	r22, 0x211E
    1fe0:	70 91 1f 21 	lds	r23, 0x211F
    1fe4:	80 91 20 21 	lds	r24, 0x2120
    1fe8:	90 91 21 21 	lds	r25, 0x2121
    1fec:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__fixsfsi>
    1ff0:	65 31       	cpi	r22, 0x15	; 21
    1ff2:	71 05       	cpc	r23, r1
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <gc_execute_block+0xaa>
    1ff6:	87 c0       	rjmp	.+270    	; 0x2106 <gc_execute_block+0x1b8>
    1ff8:	66 31       	cpi	r22, 0x16	; 22
    1ffa:	71 05       	cpc	r23, r1
    1ffc:	84 f5       	brge	.+96     	; 0x205e <gc_execute_block+0x110>
    1ffe:	64 30       	cpi	r22, 0x04	; 4
    2000:	71 05       	cpc	r23, r1
    2002:	09 f4       	brne	.+2      	; 0x2006 <gc_execute_block+0xb8>
    2004:	65 c0       	rjmp	.+202    	; 0x20d0 <gc_execute_block+0x182>
    2006:	65 30       	cpi	r22, 0x05	; 5
    2008:	71 05       	cpc	r23, r1
    200a:	a4 f4       	brge	.+40     	; 0x2034 <gc_execute_block+0xe6>
    200c:	61 30       	cpi	r22, 0x01	; 1
    200e:	71 05       	cpc	r23, r1
    2010:	09 f4       	brne	.+2      	; 0x2014 <gc_execute_block+0xc6>
    2012:	55 c0       	rjmp	.+170    	; 0x20be <gc_execute_block+0x170>
    2014:	62 30       	cpi	r22, 0x02	; 2
    2016:	71 05       	cpc	r23, r1
    2018:	24 f4       	brge	.+8      	; 0x2022 <gc_execute_block+0xd4>
    201a:	67 2b       	or	r22, r23
    201c:	09 f4       	brne	.+2      	; 0x2020 <gc_execute_block+0xd2>
    201e:	4c c0       	rjmp	.+152    	; 0x20b8 <gc_execute_block+0x16a>
    2020:	bf c0       	rjmp	.+382    	; 0x21a0 <gc_execute_block+0x252>
    2022:	62 30       	cpi	r22, 0x02	; 2
    2024:	71 05       	cpc	r23, r1
    2026:	09 f4       	brne	.+2      	; 0x202a <gc_execute_block+0xdc>
    2028:	4d c0       	rjmp	.+154    	; 0x20c4 <gc_execute_block+0x176>
    202a:	63 30       	cpi	r22, 0x03	; 3
    202c:	71 05       	cpc	r23, r1
    202e:	09 f0       	breq	.+2      	; 0x2032 <gc_execute_block+0xe4>
    2030:	b7 c0       	rjmp	.+366    	; 0x21a0 <gc_execute_block+0x252>
    2032:	4b c0       	rjmp	.+150    	; 0x20ca <gc_execute_block+0x17c>
    2034:	62 31       	cpi	r22, 0x12	; 18
    2036:	71 05       	cpc	r23, r1
    2038:	09 f4       	brne	.+2      	; 0x203c <gc_execute_block+0xee>
    203a:	54 c0       	rjmp	.+168    	; 0x20e4 <gc_execute_block+0x196>
    203c:	63 31       	cpi	r22, 0x13	; 19
    203e:	71 05       	cpc	r23, r1
    2040:	2c f4       	brge	.+10     	; 0x204c <gc_execute_block+0xfe>
    2042:	61 31       	cpi	r22, 0x11	; 17
    2044:	71 05       	cpc	r23, r1
    2046:	09 f0       	breq	.+2      	; 0x204a <gc_execute_block+0xfc>
    2048:	ab c0       	rjmp	.+342    	; 0x21a0 <gc_execute_block+0x252>
    204a:	45 c0       	rjmp	.+138    	; 0x20d6 <gc_execute_block+0x188>
    204c:	63 31       	cpi	r22, 0x13	; 19
    204e:	71 05       	cpc	r23, r1
    2050:	09 f4       	brne	.+2      	; 0x2054 <gc_execute_block+0x106>
    2052:	4f c0       	rjmp	.+158    	; 0x20f2 <gc_execute_block+0x1a4>
    2054:	64 31       	cpi	r22, 0x14	; 20
    2056:	71 05       	cpc	r23, r1
    2058:	09 f0       	breq	.+2      	; 0x205c <gc_execute_block+0x10e>
    205a:	a2 c0       	rjmp	.+324    	; 0x21a0 <gc_execute_block+0x252>
    205c:	51 c0       	rjmp	.+162    	; 0x2100 <gc_execute_block+0x1b2>
    205e:	6a 35       	cpi	r22, 0x5A	; 90
    2060:	71 05       	cpc	r23, r1
    2062:	09 f4       	brne	.+2      	; 0x2066 <gc_execute_block+0x118>
    2064:	5c c0       	rjmp	.+184    	; 0x211e <gc_execute_block+0x1d0>
    2066:	6b 35       	cpi	r22, 0x5B	; 91
    2068:	71 05       	cpc	r23, r1
    206a:	ac f4       	brge	.+42     	; 0x2096 <gc_execute_block+0x148>
    206c:	6e 31       	cpi	r22, 0x1E	; 30
    206e:	71 05       	cpc	r23, r1
    2070:	09 f4       	brne	.+2      	; 0x2074 <gc_execute_block+0x126>
    2072:	4c c0       	rjmp	.+152    	; 0x210c <gc_execute_block+0x1be>
    2074:	6f 31       	cpi	r22, 0x1F	; 31
    2076:	71 05       	cpc	r23, r1
    2078:	2c f4       	brge	.+10     	; 0x2084 <gc_execute_block+0x136>
    207a:	6c 31       	cpi	r22, 0x1C	; 28
    207c:	71 05       	cpc	r23, r1
    207e:	09 f0       	breq	.+2      	; 0x2082 <gc_execute_block+0x134>
    2080:	8f c0       	rjmp	.+286    	; 0x21a0 <gc_execute_block+0x252>
    2082:	44 c0       	rjmp	.+136    	; 0x210c <gc_execute_block+0x1be>
    2084:	65 33       	cpi	r22, 0x35	; 53
    2086:	71 05       	cpc	r23, r1
    2088:	09 f4       	brne	.+2      	; 0x208c <gc_execute_block+0x13e>
    208a:	43 c0       	rjmp	.+134    	; 0x2112 <gc_execute_block+0x1c4>
    208c:	60 35       	cpi	r22, 0x50	; 80
    208e:	71 05       	cpc	r23, r1
    2090:	09 f0       	breq	.+2      	; 0x2094 <gc_execute_block+0x146>
    2092:	86 c0       	rjmp	.+268    	; 0x21a0 <gc_execute_block+0x252>
    2094:	41 c0       	rjmp	.+130    	; 0x2118 <gc_execute_block+0x1ca>
    2096:	6c 35       	cpi	r22, 0x5C	; 92
    2098:	71 05       	cpc	r23, r1
    209a:	09 f4       	brne	.+2      	; 0x209e <gc_execute_block+0x150>
    209c:	46 c0       	rjmp	.+140    	; 0x212a <gc_execute_block+0x1dc>
    209e:	6c 35       	cpi	r22, 0x5C	; 92
    20a0:	71 05       	cpc	r23, r1
    20a2:	0c f4       	brge	.+2      	; 0x20a6 <gc_execute_block+0x158>
    20a4:	3f c0       	rjmp	.+126    	; 0x2124 <gc_execute_block+0x1d6>
    20a6:	6d 35       	cpi	r22, 0x5D	; 93
    20a8:	71 05       	cpc	r23, r1
    20aa:	09 f4       	brne	.+2      	; 0x20ae <gc_execute_block+0x160>
    20ac:	41 c0       	rjmp	.+130    	; 0x2130 <gc_execute_block+0x1e2>
    20ae:	6e 35       	cpi	r22, 0x5E	; 94
    20b0:	71 05       	cpc	r23, r1
    20b2:	09 f0       	breq	.+2      	; 0x20b6 <gc_execute_block+0x168>
    20b4:	75 c0       	rjmp	.+234    	; 0x21a0 <gc_execute_block+0x252>
    20b6:	3f c0       	rjmp	.+126    	; 0x2136 <gc_execute_block+0x1e8>
					case 0:  { gc.motion_mode = MOTION_MODE_RAPID_LINEAR; break; }
    20b8:	10 92 27 21 	sts	0x2127, r1
    20bc:	82 c0       	rjmp	.+260    	; 0x21c2 <gc_execute_block+0x274>
					case 1:  { gc.motion_mode = MOTION_MODE_LINEAR; break; }
    20be:	f0 92 27 21 	sts	0x2127, r15
    20c2:	7f c0       	rjmp	.+254    	; 0x21c2 <gc_execute_block+0x274>
					case 2:  { gc.motion_mode = MOTION_MODE_CW_ARC; break; }
    20c4:	e0 92 27 21 	sts	0x2127, r14
    20c8:	7c c0       	rjmp	.+248    	; 0x21c2 <gc_execute_block+0x274>
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
    20ca:	a0 92 27 21 	sts	0x2127, r10
    20ce:	79 c0       	rjmp	.+242    	; 0x21c2 <gc_execute_block+0x274>
					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
    20d0:	f0 92 71 21 	sts	0x2171, r15
    20d4:	76 c0       	rjmp	.+236    	; 0x21c2 <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    20d6:	10 92 69 21 	sts	0x2169, r1
	gc.plane_axis_1 = axis_1;
    20da:	f0 92 6a 21 	sts	0x216A, r15
	gc.plane_axis_2 = axis_2;
    20de:	e0 92 6b 21 	sts	0x216B, r14
    20e2:	6f c0       	rjmp	.+222    	; 0x21c2 <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    20e4:	10 92 69 21 	sts	0x2169, r1
	gc.plane_axis_1 = axis_1;
    20e8:	e0 92 6a 21 	sts	0x216A, r14
	gc.plane_axis_2 = axis_2;
    20ec:	f0 92 6b 21 	sts	0x216B, r15
    20f0:	68 c0       	rjmp	.+208    	; 0x21c2 <gc_execute_block+0x274>
 * select_plane() - select axis plane 
 */

void select_plane(uint8_t axis_0, uint8_t axis_1, uint8_t axis_2) 
{
	gc.plane_axis_0 = axis_0;
    20f2:	f0 92 69 21 	sts	0x2169, r15
	gc.plane_axis_1 = axis_1;
    20f6:	e0 92 6a 21 	sts	0x216A, r14
	gc.plane_axis_2 = axis_2;
    20fa:	10 92 6b 21 	sts	0x216B, r1
    20fe:	61 c0       	rjmp	.+194    	; 0x21c2 <gc_execute_block+0x274>
					case 3:  { gc.motion_mode = MOTION_MODE_CCW_ARC; break; }
					case 4:  { gc.next_action = NEXT_ACTION_DWELL; break; }
					case 17: { select_plane(X_AXIS, Y_AXIS, Z_AXIS); break; }
					case 18: { select_plane(X_AXIS, Z_AXIS, Y_AXIS); break; }
					case 19: { select_plane(Y_AXIS, Z_AXIS, X_AXIS); break; }
					case 20: { gc.inches_mode = TRUE; break; }
    2100:	f0 92 29 21 	sts	0x2129, r15
    2104:	5e c0       	rjmp	.+188    	; 0x21c2 <gc_execute_block+0x274>
					case 21: { gc.inches_mode = FALSE; break; }
    2106:	10 92 29 21 	sts	0x2129, r1
    210a:	5b c0       	rjmp	.+182    	; 0x21c2 <gc_execute_block+0x274>
					case 28: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
					case 30: { gc.next_action = NEXT_ACTION_GO_HOME; break; }
    210c:	e0 92 71 21 	sts	0x2171, r14
    2110:	58 c0       	rjmp	.+176    	; 0x21c2 <gc_execute_block+0x274>
					case 53: { gc.absolute_override = TRUE; break; }
    2112:	f0 92 70 21 	sts	0x2170, r15
    2116:	55 c0       	rjmp	.+170    	; 0x21c2 <gc_execute_block+0x274>
					case 80: { gc.motion_mode = MOTION_MODE_CANCEL; break; }
    2118:	60 92 27 21 	sts	0x2127, r6
    211c:	52 c0       	rjmp	.+164    	; 0x21c2 <gc_execute_block+0x274>
					case 90: { gc.absolute_mode = TRUE; break; }
    211e:	f0 92 2a 21 	sts	0x212A, r15
    2122:	4f c0       	rjmp	.+158    	; 0x21c2 <gc_execute_block+0x274>
					case 91: { gc.absolute_mode = FALSE; break; }
    2124:	10 92 2a 21 	sts	0x212A, r1
    2128:	4c c0       	rjmp	.+152    	; 0x21c2 <gc_execute_block+0x274>
					case 92: { gc.set_origin_mode = TRUE; break; }
    212a:	f0 92 2c 21 	sts	0x212C, r15
    212e:	49 c0       	rjmp	.+146    	; 0x21c2 <gc_execute_block+0x274>
					case 93: { gc.inverse_feed_rate_mode = TRUE; break; }
    2130:	f0 92 28 21 	sts	0x2128, r15
    2134:	46 c0       	rjmp	.+140    	; 0x21c2 <gc_execute_block+0x274>
					case 94: { gc.inverse_feed_rate_mode = FALSE; break; }
    2136:	10 92 28 21 	sts	0x2128, r1
    213a:	43 c0       	rjmp	.+134    	; 0x21c2 <gc_execute_block+0x274>
					default: FAIL(TG_UNSUPPORTED_STATEMENT);
				}
				break;
      
			case 'M':
				switch((int)gc.value) {
    213c:	60 91 1e 21 	lds	r22, 0x211E
    2140:	70 91 1f 21 	lds	r23, 0x211F
    2144:	80 91 20 21 	lds	r24, 0x2120
    2148:	90 91 21 21 	lds	r25, 0x2121
    214c:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__fixsfsi>
    2150:	63 30       	cpi	r22, 0x03	; 3
    2152:	71 05       	cpc	r23, r1
    2154:	e1 f0       	breq	.+56     	; 0x218e <gc_execute_block+0x240>
    2156:	64 30       	cpi	r22, 0x04	; 4
    2158:	71 05       	cpc	r23, r1
    215a:	34 f4       	brge	.+12     	; 0x2168 <gc_execute_block+0x21a>
    215c:	77 fd       	sbrc	r23, 7
    215e:	20 c0       	rjmp	.+64     	; 0x21a0 <gc_execute_block+0x252>
    2160:	62 30       	cpi	r22, 0x02	; 2
    2162:	71 05       	cpc	r23, r1
    2164:	74 f0       	brlt	.+28     	; 0x2182 <gc_execute_block+0x234>
    2166:	10 c0       	rjmp	.+32     	; 0x2188 <gc_execute_block+0x23a>
    2168:	65 30       	cpi	r22, 0x05	; 5
    216a:	71 05       	cpc	r23, r1
    216c:	b1 f0       	breq	.+44     	; 0x219a <gc_execute_block+0x24c>
    216e:	65 30       	cpi	r22, 0x05	; 5
    2170:	71 05       	cpc	r23, r1
    2172:	84 f0       	brlt	.+32     	; 0x2194 <gc_execute_block+0x246>
    2174:	6e 31       	cpi	r22, 0x1E	; 30
    2176:	71 05       	cpc	r23, r1
    2178:	39 f0       	breq	.+14     	; 0x2188 <gc_execute_block+0x23a>
    217a:	6c 33       	cpi	r22, 0x3C	; 60
    217c:	71 05       	cpc	r23, r1
    217e:	81 f4       	brne	.+32     	; 0x21a0 <gc_execute_block+0x252>
    2180:	03 c0       	rjmp	.+6      	; 0x2188 <gc_execute_block+0x23a>
					case 0: case 1: gc.program_flow = PROGRAM_FLOW_PAUSED; break;
    2182:	f0 92 26 21 	sts	0x2126, r15
    2186:	1d c0       	rjmp	.+58     	; 0x21c2 <gc_execute_block+0x274>
					case 2: case 30: case 60: gc.program_flow = PROGRAM_FLOW_COMPLETED; break;
    2188:	e0 92 26 21 	sts	0x2126, r14
    218c:	1a c0       	rjmp	.+52     	; 0x21c2 <gc_execute_block+0x274>
					case 3: gc.spindle_direction = 1; break;
    218e:	f0 92 6d 21 	sts	0x216D, r15
    2192:	17 c0       	rjmp	.+46     	; 0x21c2 <gc_execute_block+0x274>
					case 4: gc.spindle_direction = -1; break;
    2194:	70 92 6d 21 	sts	0x216D, r7
    2198:	14 c0       	rjmp	.+40     	; 0x21c2 <gc_execute_block+0x274>
					case 5: gc.spindle_direction = 0; break;
    219a:	10 92 6d 21 	sts	0x216D, r1
    219e:	11 c0       	rjmp	.+34     	; 0x21c2 <gc_execute_block+0x274>
        			default: FAIL(TG_UNSUPPORTED_STATEMENT);
    21a0:	b0 92 1c 21 	sts	0x211C, r11
    21a4:	0e c0       	rjmp	.+28     	; 0x21c2 <gc_execute_block+0x274>
				}
				break;

			case 'T': gc.tool = trunc(gc.value); break;
    21a6:	60 91 1e 21 	lds	r22, 0x211E
    21aa:	70 91 1f 21 	lds	r23, 0x211F
    21ae:	80 91 20 21 	lds	r24, 0x2120
    21b2:	90 91 21 21 	lds	r25, 0x2121
    21b6:	0e 94 e2 40 	call	0x81c4	; 0x81c4 <trunc>
    21ba:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__fixunssfsi>
    21be:	60 93 6c 21 	sts	0x216C, r22
		}
		if(gc.status) {
    21c2:	80 91 1c 21 	lds	r24, 0x211C
    21c6:	88 23       	and	r24, r24
    21c8:	69 f4       	brne	.+26     	; 0x21e4 <gc_execute_block+0x296>

	gc.status = TG_OK;
	gc.set_origin_mode = 0;		// you are not in origin mode unless you say you are

  // Pass 1: Commands
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    21ca:	8d e1       	ldi	r24, 0x1D	; 29
    21cc:	91 e2       	ldi	r25, 0x21	; 33
    21ce:	6e e1       	ldi	r22, 0x1E	; 30
    21d0:	71 e2       	ldi	r23, 0x21	; 33
    21d2:	42 e2       	ldi	r20, 0x22	; 34
    21d4:	51 e2       	ldi	r21, 0x21	; 33
    21d6:	94 01       	movw	r18, r8
    21d8:	86 01       	movw	r16, r12
    21da:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <_gc_next_statement>
    21de:	89 2b       	or	r24, r25
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <gc_execute_block+0x296>
    21e2:	f1 ce       	rjmp	.-542    	; 0x1fc6 <gc_execute_block+0x78>
			break;
		}
	}
  
  // If there were any errors parsing this line return right away with the bad news
	if (gc.status) { 
    21e4:	80 91 1c 21 	lds	r24, 0x211C
    21e8:	88 23       	and	r24, r24
    21ea:	09 f0       	breq	.+2      	; 0x21ee <gc_execute_block+0x2a0>
    21ec:	9d c3       	rjmp	.+1850   	; 0x2928 <gc_execute_block+0x9da>
		return(gc.status); 
	}

	i = 0;
    21ee:	19 82       	std	Y+1, r1	; 0x01
    21f0:	1a 82       	std	Y+2, r1	; 0x02
	clear_vector(gc.offset);
    21f2:	ed e5       	ldi	r30, 0x5D	; 93
    21f4:	f1 e2       	ldi	r31, 0x21	; 33
    21f6:	8c e0       	ldi	r24, 0x0C	; 12
    21f8:	df 01       	movw	r26, r30
    21fa:	1d 92       	st	X+, r1
    21fc:	8a 95       	dec	r24
    21fe:	e9 f7       	brne	.-6      	; 0x21fa <gc_execute_block+0x2ac>
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position
    2200:	df 01       	movw	r26, r30
    2202:	1c 97       	sbiw	r26, 0x0c	; 12
    2204:	78 97       	sbiw	r30, 0x18	; 24
    2206:	8c e0       	ldi	r24, 0x0C	; 12
    2208:	01 90       	ld	r0, Z+
    220a:	0d 92       	st	X+, r0
    220c:	81 50       	subi	r24, 0x01	; 1
    220e:	e1 f7       	brne	.-8      	; 0x2208 <gc_execute_block+0x2ba>
    2210:	c6 c0       	rjmp	.+396    	; 0x239e <gc_execute_block+0x450>

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2212:	c0 90 1e 21 	lds	r12, 0x211E
    2216:	d0 90 1f 21 	lds	r13, 0x211F
    221a:	e0 90 20 21 	lds	r14, 0x2120
    221e:	f0 90 21 21 	lds	r15, 0x2121
 */

//inline float to_millimeters(double value) 	// inline won't compile at -O0
float to_millimeters(double value) 
{
	return(gc.inches_mode ? (value * INCHES_PER_MM) : value);
    2222:	80 91 29 21 	lds	r24, 0x2129
    2226:	88 23       	and	r24, r24
    2228:	19 f4       	brne	.+6      	; 0x2230 <gc_execute_block+0x2e2>
    222a:	a7 01       	movw	r20, r14
    222c:	96 01       	movw	r18, r12
    222e:	0a c0       	rjmp	.+20     	; 0x2244 <gc_execute_block+0x2f6>
    2230:	c7 01       	movw	r24, r14
    2232:	b6 01       	movw	r22, r12
    2234:	25 e8       	ldi	r18, 0x85	; 133
    2236:	32 e4       	ldi	r19, 0x42	; 66
    2238:	41 e2       	ldi	r20, 0x21	; 33
    223a:	5d e3       	ldi	r21, 0x3D	; 61
    223c:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    2240:	9b 01       	movw	r18, r22
    2242:	ac 01       	movw	r20, r24
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
		gc.unit_converted_value = to_millimeters(gc.value);
    2244:	20 93 3d 21 	sts	0x213D, r18
    2248:	30 93 3e 21 	sts	0x213E, r19
    224c:	40 93 3f 21 	sts	0x213F, r20
    2250:	50 93 40 21 	sts	0x2140, r21
		switch(gc.letter) {
    2254:	00 91 1d 21 	lds	r16, 0x211D
    2258:	00 35       	cpi	r16, 0x50	; 80
    225a:	09 f4       	brne	.+2      	; 0x225e <gc_execute_block+0x310>
    225c:	47 c0       	rjmp	.+142    	; 0x22ec <gc_execute_block+0x39e>
    225e:	01 35       	cpi	r16, 0x51	; 81
    2260:	58 f4       	brcc	.+22     	; 0x2278 <gc_execute_block+0x32a>
    2262:	06 34       	cpi	r16, 0x46	; 70
    2264:	c1 f0       	breq	.+48     	; 0x2296 <gc_execute_block+0x348>
    2266:	06 34       	cpi	r16, 0x46	; 70
    2268:	08 f4       	brcc	.+2      	; 0x226c <gc_execute_block+0x31e>
    226a:	9f c0       	rjmp	.+318    	; 0x23aa <gc_execute_block+0x45c>
    226c:	80 2f       	mov	r24, r16
    226e:	89 54       	subi	r24, 0x49	; 73
    2270:	83 30       	cpi	r24, 0x03	; 3
    2272:	08 f0       	brcs	.+2      	; 0x2276 <gc_execute_block+0x328>
    2274:	9a c0       	rjmp	.+308    	; 0x23aa <gc_execute_block+0x45c>
    2276:	2d c0       	rjmp	.+90     	; 0x22d2 <gc_execute_block+0x384>
    2278:	03 35       	cpi	r16, 0x53	; 83
    227a:	09 f4       	brne	.+2      	; 0x227e <gc_execute_block+0x330>
    227c:	4b c0       	rjmp	.+150    	; 0x2314 <gc_execute_block+0x3c6>
    227e:	04 35       	cpi	r16, 0x54	; 84
    2280:	20 f4       	brcc	.+8      	; 0x228a <gc_execute_block+0x33c>
    2282:	02 35       	cpi	r16, 0x52	; 82
    2284:	09 f0       	breq	.+2      	; 0x2288 <gc_execute_block+0x33a>
    2286:	91 c0       	rjmp	.+290    	; 0x23aa <gc_execute_block+0x45c>
    2288:	3a c0       	rjmp	.+116    	; 0x22fe <gc_execute_block+0x3b0>
    228a:	80 2f       	mov	r24, r16
    228c:	88 55       	subi	r24, 0x58	; 88
    228e:	83 30       	cpi	r24, 0x03	; 3
    2290:	08 f0       	brcs	.+2      	; 0x2294 <gc_execute_block+0x346>
    2292:	8b c0       	rjmp	.+278    	; 0x23aa <gc_execute_block+0x45c>
    2294:	48 c0       	rjmp	.+144    	; 0x2326 <gc_execute_block+0x3d8>
			case 'F': 
				if (gc.inverse_feed_rate_mode) {
    2296:	80 91 28 21 	lds	r24, 0x2128
    229a:	88 23       	and	r24, r24
    229c:	49 f0       	breq	.+18     	; 0x22b0 <gc_execute_block+0x362>
					gc.inverse_feed_rate = gc.unit_converted_value; // seconds per motion for this motion only
    229e:	20 93 41 21 	sts	0x2141, r18
    22a2:	30 93 42 21 	sts	0x2142, r19
    22a6:	40 93 43 21 	sts	0x2143, r20
    22aa:	50 93 44 21 	sts	0x2144, r21
    22ae:	7d c0       	rjmp	.+250    	; 0x23aa <gc_execute_block+0x45c>
				} else {
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
    22b0:	ca 01       	movw	r24, r20
    22b2:	b9 01       	movw	r22, r18
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e7       	ldi	r20, 0x70	; 112
    22ba:	52 e4       	ldi	r21, 0x42	; 66
    22bc:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    22c0:	60 93 35 21 	sts	0x2135, r22
    22c4:	70 93 36 21 	sts	0x2136, r23
    22c8:	80 93 37 21 	sts	0x2137, r24
    22cc:	90 93 38 21 	sts	0x2138, r25
    22d0:	6c c0       	rjmp	.+216    	; 0x23aa <gc_execute_block+0x45c>
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
    22d2:	e0 2f       	mov	r30, r16
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	ee 0f       	add	r30, r30
    22d8:	ff 1f       	adc	r31, r31
    22da:	ee 0f       	add	r30, r30
    22dc:	ff 1f       	adc	r31, r31
    22de:	e7 5c       	subi	r30, 0xC7	; 199
    22e0:	ff 4d       	sbci	r31, 0xDF	; 223
    22e2:	20 83       	st	Z, r18
    22e4:	31 83       	std	Z+1, r19	; 0x01
    22e6:	42 83       	std	Z+2, r20	; 0x02
    22e8:	53 83       	std	Z+3, r21	; 0x03
    22ea:	5f c0       	rjmp	.+190    	; 0x23aa <gc_execute_block+0x45c>
			case 'P': gc.dwell_time = gc.value; break;
    22ec:	c0 92 2d 21 	sts	0x212D, r12
    22f0:	d0 92 2e 21 	sts	0x212E, r13
    22f4:	e0 92 2f 21 	sts	0x212F, r14
    22f8:	f0 92 30 21 	sts	0x2130, r15
    22fc:	56 c0       	rjmp	.+172    	; 0x23aa <gc_execute_block+0x45c>
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    22fe:	20 93 31 21 	sts	0x2131, r18
    2302:	30 93 32 21 	sts	0x2132, r19
    2306:	40 93 33 21 	sts	0x2133, r20
    230a:	50 93 34 21 	sts	0x2134, r21
    230e:	70 92 2b 21 	sts	0x212B, r7
    2312:	4b c0       	rjmp	.+150    	; 0x23aa <gc_execute_block+0x45c>
			case 'S': gc.spindle_speed = gc.value; break;
    2314:	c7 01       	movw	r24, r14
    2316:	b6 01       	movw	r22, r12
    2318:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__fixsfsi>
    231c:	60 93 6e 21 	sts	0x216E, r22
    2320:	70 93 6f 21 	sts	0x216F, r23
    2324:	42 c0       	rjmp	.+132    	; 0x23aa <gc_execute_block+0x45c>
			case 'X': case 'Y': case 'Z':
				if (gc.set_origin_mode) {
    2326:	80 91 2c 21 	lds	r24, 0x212C
    232a:	88 23       	and	r24, r24
    232c:	69 f0       	breq	.+26     	; 0x2348 <gc_execute_block+0x3fa>
					gc.position[gc.letter - 'X'] = gc.unit_converted_value;
    232e:	e0 2f       	mov	r30, r16
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	ee 0f       	add	r30, r30
    2334:	ff 1f       	adc	r31, r31
    2336:	ee 0f       	add	r30, r30
    2338:	ff 1f       	adc	r31, r31
    233a:	e4 54       	subi	r30, 0x44	; 68
    233c:	f0 4e       	sbci	r31, 0xE0	; 224
    233e:	21 a7       	std	Z+41, r18	; 0x29
    2340:	32 a7       	std	Z+42, r19	; 0x2a
    2342:	43 a7       	std	Z+43, r20	; 0x2b
    2344:	54 a7       	std	Z+44, r21	; 0x2c
    2346:	31 c0       	rjmp	.+98     	; 0x23aa <gc_execute_block+0x45c>
				} else if (gc.absolute_mode || gc.absolute_override) {
    2348:	80 91 2a 21 	lds	r24, 0x212A
    234c:	88 23       	and	r24, r24
    234e:	21 f4       	brne	.+8      	; 0x2358 <gc_execute_block+0x40a>
    2350:	80 91 70 21 	lds	r24, 0x2170
    2354:	88 23       	and	r24, r24
    2356:	69 f0       	breq	.+26     	; 0x2372 <gc_execute_block+0x424>
					gc.target[gc.letter - 'X'] = gc.unit_converted_value;
    2358:	e0 2f       	mov	r30, r16
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	ee 0f       	add	r30, r30
    235e:	ff 1f       	adc	r31, r31
    2360:	ee 0f       	add	r30, r30
    2362:	ff 1f       	adc	r31, r31
    2364:	e4 54       	subi	r30, 0x44	; 68
    2366:	f0 4e       	sbci	r31, 0xE0	; 224
    2368:	25 ab       	std	Z+53, r18	; 0x35
    236a:	36 ab       	std	Z+54, r19	; 0x36
    236c:	47 ab       	std	Z+55, r20	; 0x37
    236e:	50 af       	std	Z+56, r21	; 0x38
    2370:	1c c0       	rjmp	.+56     	; 0x23aa <gc_execute_block+0x45c>
				} else {
					gc.target[gc.letter - 'X'] += gc.unit_converted_value;
    2372:	10 e0       	ldi	r17, 0x00	; 0
    2374:	00 0f       	add	r16, r16
    2376:	11 1f       	adc	r17, r17
    2378:	00 0f       	add	r16, r16
    237a:	11 1f       	adc	r17, r17
    237c:	04 54       	subi	r16, 0x44	; 68
    237e:	10 4e       	sbci	r17, 0xE0	; 224
    2380:	f8 01       	movw	r30, r16
    2382:	65 a9       	ldd	r22, Z+53	; 0x35
    2384:	76 a9       	ldd	r23, Z+54	; 0x36
    2386:	87 a9       	ldd	r24, Z+55	; 0x37
    2388:	90 ad       	ldd	r25, Z+56	; 0x38
    238a:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__addsf3>
    238e:	d8 01       	movw	r26, r16
    2390:	d5 96       	adiw	r26, 0x35	; 53
    2392:	6d 93       	st	X+, r22
    2394:	7d 93       	st	X+, r23
    2396:	8d 93       	st	X+, r24
    2398:	9c 93       	st	X, r25
    239a:	d8 97       	sbiw	r26, 0x38	; 56
    239c:	06 c0       	rjmp	.+12     	; 0x23aa <gc_execute_block+0x45c>
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    239e:	5e 01       	movw	r10, r28
    23a0:	08 94       	sec
    23a2:	a1 1c       	adc	r10, r1
    23a4:	b1 1c       	adc	r11, r1
					gc.feed_rate = gc.unit_converted_value/60; // mm per second
				}
				break;
			case 'I': case 'J': case 'K': gc.offset[gc.letter-'I'] = gc.unit_converted_value; break;
			case 'P': gc.dwell_time = gc.value; break;
			case 'R': gc.radius = gc.unit_converted_value; gc.radius_mode = TRUE; break;
    23a6:	77 24       	eor	r7, r7
    23a8:	73 94       	inc	r7
	i = 0;
	clear_vector(gc.offset);
	memcpy(gc.target, gc.position, sizeof(gc.target)); // target = gc.position

  // Pass 2: Parameters
	while(_gc_next_statement(&gc.letter, &gc.value, &gc.fraction, buf, &i)) {
    23aa:	8d e1       	ldi	r24, 0x1D	; 29
    23ac:	91 e2       	ldi	r25, 0x21	; 33
    23ae:	6e e1       	ldi	r22, 0x1E	; 30
    23b0:	71 e2       	ldi	r23, 0x21	; 33
    23b2:	42 e2       	ldi	r20, 0x22	; 34
    23b4:	51 e2       	ldi	r21, 0x21	; 33
    23b6:	94 01       	movw	r18, r8
    23b8:	85 01       	movw	r16, r10
    23ba:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <_gc_next_statement>
    23be:	89 2b       	or	r24, r25
    23c0:	09 f0       	breq	.+2      	; 0x23c4 <gc_execute_block+0x476>
    23c2:	27 cf       	rjmp	.-434    	; 0x2212 <gc_execute_block+0x2c4>
 				break;
		}	
	}
  
  // If there were any errors parsing this line return right away with the bad news
  	if (gc.status) {
    23c4:	80 91 1c 21 	lds	r24, 0x211C
    23c8:	88 23       	and	r24, r24
    23ca:	09 f0       	breq	.+2      	; 0x23ce <gc_execute_block+0x480>
    23cc:	ad c2       	rjmp	.+1370   	; 0x2928 <gc_execute_block+0x9da>
		return(gc.status); 
	}
    
  // Update spindle state
	if (gc.spindle_direction) {
    23ce:	80 91 6d 21 	lds	r24, 0x216D
    23d2:	88 23       	and	r24, r24
    23d4:	71 f0       	breq	.+28     	; 0x23f2 <gc_execute_block+0x4a4>
    	spindle_run(gc.spindle_direction, gc.spindle_speed);
    23d6:	40 91 6e 21 	lds	r20, 0x216E
    23da:	50 91 6f 21 	lds	r21, 0x216F
    23de:	66 27       	eor	r22, r22
    23e0:	57 fd       	sbrc	r21, 7
    23e2:	60 95       	com	r22
    23e4:	76 2f       	mov	r23, r22
    23e6:	99 27       	eor	r25, r25
    23e8:	87 fd       	sbrc	r24, 7
    23ea:	90 95       	com	r25
    23ec:	0e 94 8d 22 	call	0x451a	; 0x451a <spindle_run>
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <gc_execute_block+0x4a8>
	} else {
		spindle_stop();
    23f2:	0e 94 9d 22 	call	0x453a	; 0x453a <spindle_stop>
	}
  
  // Perform any physical actions
	switch (gc.next_action) {
    23f6:	80 91 71 21 	lds	r24, 0x2171
    23fa:	81 30       	cpi	r24, 0x01	; 1
    23fc:	41 f0       	breq	.+16     	; 0x240e <gc_execute_block+0x4c0>
    23fe:	81 30       	cpi	r24, 0x01	; 1
    2400:	c8 f0       	brcs	.+50     	; 0x2434 <gc_execute_block+0x4e6>
    2402:	82 30       	cpi	r24, 0x02	; 2
    2404:	09 f0       	breq	.+2      	; 0x2408 <gc_execute_block+0x4ba>
    2406:	81 c2       	rjmp	.+1282   	; 0x290a <gc_execute_block+0x9bc>
    	case NEXT_ACTION_GO_HOME: mc_go_home(); break;
    2408:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <mc_go_home>
    240c:	7e c2       	rjmp	.+1276   	; 0x290a <gc_execute_block+0x9bc>
		case NEXT_ACTION_DWELL: mc_dwell(trunc(gc.dwell_time*1000)); break;
    240e:	60 91 2d 21 	lds	r22, 0x212D
    2412:	70 91 2e 21 	lds	r23, 0x212E
    2416:	80 91 2f 21 	lds	r24, 0x212F
    241a:	90 91 30 21 	lds	r25, 0x2130
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	4a e7       	ldi	r20, 0x7A	; 122
    2424:	54 e4       	ldi	r21, 0x44	; 68
    2426:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    242a:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__fixunssfsi>
    242e:	0e 94 2f 1a 	call	0x345e	; 0x345e <mc_dwell>
    2432:	6b c2       	rjmp	.+1238   	; 0x290a <gc_execute_block+0x9bc>
		case NEXT_ACTION_DEFAULT: 
 		switch (gc.motion_mode) {
    2434:	b0 91 27 21 	lds	r27, 0x2127
    2438:	b8 8f       	std	Y+24, r27	; 0x18
    243a:	b2 30       	cpi	r27, 0x02	; 2
    243c:	20 f0       	brcs	.+8      	; 0x2446 <gc_execute_block+0x4f8>
    243e:	b4 30       	cpi	r27, 0x04	; 4
    2440:	08 f0       	brcs	.+2      	; 0x2444 <gc_execute_block+0x4f6>
    2442:	63 c2       	rjmp	.+1222   	; 0x290a <gc_execute_block+0x9bc>
    2444:	31 c0       	rjmp	.+98     	; 0x24a8 <gc_execute_block+0x55a>
			case MOTION_MODE_CANCEL: break;
			case MOTION_MODE_RAPID_LINEAR:
			case MOTION_MODE_LINEAR:
				gc.status = mc_line_nonblock(gc.target[X_AXIS], 
    2446:	60 91 51 21 	lds	r22, 0x2151
    244a:	70 91 52 21 	lds	r23, 0x2152
    244e:	80 91 53 21 	lds	r24, 0x2153
    2452:	90 91 54 21 	lds	r25, 0x2154
    2456:	20 91 55 21 	lds	r18, 0x2155
    245a:	30 91 56 21 	lds	r19, 0x2156
    245e:	40 91 57 21 	lds	r20, 0x2157
    2462:	50 91 58 21 	lds	r21, 0x2158
    2466:	e0 90 59 21 	lds	r14, 0x2159
    246a:	f0 90 5a 21 	lds	r15, 0x215A
    246e:	00 91 5b 21 	lds	r16, 0x215B
    2472:	10 91 5c 21 	lds	r17, 0x215C
    2476:	80 90 28 21 	lds	r8, 0x2128
    247a:	88 20       	and	r8, r8
    247c:	49 f0       	breq	.+18     	; 0x2490 <gc_execute_block+0x542>
    247e:	a0 90 41 21 	lds	r10, 0x2141
    2482:	b0 90 42 21 	lds	r11, 0x2142
    2486:	c0 90 43 21 	lds	r12, 0x2143
    248a:	d0 90 44 21 	lds	r13, 0x2144
    248e:	08 c0       	rjmp	.+16     	; 0x24a0 <gc_execute_block+0x552>
    2490:	a0 90 35 21 	lds	r10, 0x2135
    2494:	b0 90 36 21 	lds	r11, 0x2136
    2498:	c0 90 37 21 	lds	r12, 0x2137
    249c:	d0 90 38 21 	lds	r13, 0x2138
    24a0:	99 24       	eor	r9, r9
    24a2:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <mc_line_nonblock>
    24a6:	16 c1       	rjmp	.+556    	; 0x26d4 <gc_execute_block+0x786>
 * _gc_compute_arc() - arc computation helper routine 
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
    24a8:	80 91 2b 21 	lds	r24, 0x212B
    24ac:	88 23       	and	r24, r24
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <gc_execute_block+0x564>
    24b0:	e8 c0       	rjmp	.+464    	; 0x2682 <gc_execute_block+0x734>
      	i = (x - (y * h_x2_div_d))/2
      	j = (y + (x * h_x2_div_d))/2  
	*/
        
	// Calculate the change in position along each selected axis
	x = gc.target[gc.plane_axis_0]-gc.position[gc.plane_axis_0];
    24b2:	e0 91 69 21 	lds	r30, 0x2169
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	ee 0f       	add	r30, r30
    24ba:	ff 1f       	adc	r31, r31
    24bc:	ee 0f       	add	r30, r30
    24be:	ff 1f       	adc	r31, r31
    24c0:	e4 5e       	subi	r30, 0xE4	; 228
    24c2:	fe 4d       	sbci	r31, 0xDE	; 222
    24c4:	65 a9       	ldd	r22, Z+53	; 0x35
    24c6:	76 a9       	ldd	r23, Z+54	; 0x36
    24c8:	87 a9       	ldd	r24, Z+55	; 0x37
    24ca:	90 ad       	ldd	r25, Z+56	; 0x38
    24cc:	21 a5       	ldd	r18, Z+41	; 0x29
    24ce:	32 a5       	ldd	r19, Z+42	; 0x2a
    24d0:	43 a5       	ldd	r20, Z+43	; 0x2b
    24d2:	54 a5       	ldd	r21, Z+44	; 0x2c
    24d4:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    24d8:	6f 83       	std	Y+7, r22	; 0x07
    24da:	78 87       	std	Y+8, r23	; 0x08
    24dc:	89 87       	std	Y+9, r24	; 0x09
    24de:	9a 87       	std	Y+10, r25	; 0x0a
	y = gc.target[gc.plane_axis_1]-gc.position[gc.plane_axis_1];
    24e0:	e0 91 6a 21 	lds	r30, 0x216A
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	ee 0f       	add	r30, r30
    24e8:	ff 1f       	adc	r31, r31
    24ea:	ee 0f       	add	r30, r30
    24ec:	ff 1f       	adc	r31, r31
    24ee:	e4 5e       	subi	r30, 0xE4	; 228
    24f0:	fe 4d       	sbci	r31, 0xDE	; 222
    24f2:	65 a9       	ldd	r22, Z+53	; 0x35
    24f4:	76 a9       	ldd	r23, Z+54	; 0x36
    24f6:	87 a9       	ldd	r24, Z+55	; 0x37
    24f8:	90 ad       	ldd	r25, Z+56	; 0x38
    24fa:	21 a5       	ldd	r18, Z+41	; 0x29
    24fc:	32 a5       	ldd	r19, Z+42	; 0x2a
    24fe:	43 a5       	ldd	r20, Z+43	; 0x2b
    2500:	54 a5       	ldd	r21, Z+44	; 0x2c
    2502:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    2506:	1b 01       	movw	r2, r22
    2508:	2c 01       	movw	r4, r24
        
	clear_vector(&gc.offset);
    250a:	10 92 5d 21 	sts	0x215D, r1
    250e:	10 92 5e 21 	sts	0x215E, r1
	 // == -(h * 2 / d)
	h_x2_div_d = -sqrt(4 * gc.radius*gc.radius - ((x*x) - (y*y))) / hypot(x,y);
    2512:	60 90 31 21 	lds	r6, 0x2131
    2516:	70 90 32 21 	lds	r7, 0x2132
    251a:	80 90 33 21 	lds	r8, 0x2133
    251e:	90 90 34 21 	lds	r9, 0x2134
    2522:	c4 01       	movw	r24, r8
    2524:	b3 01       	movw	r22, r6
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	40 e8       	ldi	r20, 0x80	; 128
    252c:	50 e4       	ldi	r21, 0x40	; 64
    252e:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    2532:	a4 01       	movw	r20, r8
    2534:	93 01       	movw	r18, r6
    2536:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    253a:	5b 01       	movw	r10, r22
    253c:	6c 01       	movw	r12, r24
    253e:	6f 81       	ldd	r22, Y+7	; 0x07
    2540:	78 85       	ldd	r23, Y+8	; 0x08
    2542:	89 85       	ldd	r24, Y+9	; 0x09
    2544:	9a 85       	ldd	r25, Y+10	; 0x0a
    2546:	9b 01       	movw	r18, r22
    2548:	ac 01       	movw	r20, r24
    254a:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    254e:	7b 01       	movw	r14, r22
    2550:	8c 01       	movw	r16, r24
    2552:	c2 01       	movw	r24, r4
    2554:	b1 01       	movw	r22, r2
    2556:	a2 01       	movw	r20, r4
    2558:	91 01       	movw	r18, r2
    255a:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    255e:	9b 01       	movw	r18, r22
    2560:	ac 01       	movw	r20, r24
    2562:	c8 01       	movw	r24, r16
    2564:	b7 01       	movw	r22, r14
    2566:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    256a:	9b 01       	movw	r18, r22
    256c:	ac 01       	movw	r20, r24
    256e:	c6 01       	movw	r24, r12
    2570:	b5 01       	movw	r22, r10
    2572:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    2576:	0e 94 a1 40 	call	0x8142	; 0x8142 <sqrt>
    257a:	7b 01       	movw	r14, r22
    257c:	8c 01       	movw	r16, r24
    257e:	6f 81       	ldd	r22, Y+7	; 0x07
    2580:	78 85       	ldd	r23, Y+8	; 0x08
    2582:	89 85       	ldd	r24, Y+9	; 0x09
    2584:	9a 85       	ldd	r25, Y+10	; 0x0a
    2586:	a2 01       	movw	r20, r4
    2588:	91 01       	movw	r18, r2
    258a:	0e 94 6f 3f 	call	0x7ede	; 0x7ede <hypot>
    258e:	9b 01       	movw	r18, r22
    2590:	ac 01       	movw	r20, r24
    2592:	17 fb       	bst	r17, 7
    2594:	10 95       	com	r17
    2596:	17 f9       	bld	r17, 7
    2598:	10 95       	com	r17
    259a:	c8 01       	movw	r24, r16
    259c:	b7 01       	movw	r22, r14
    259e:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    25a2:	7b 01       	movw	r14, r22
    25a4:	8c 01       	movw	r16, r24

	// If r is smaller than d the arc is now traversing the complex plane beyond
	// the reach of any real CNC, and thus - for practical reasons - we will 
	// terminate promptly (well spoken Simen!)
	if(isnan(h_x2_div_d)) { 
    25a6:	a8 01       	movw	r20, r16
    25a8:	97 01       	movw	r18, r14
    25aa:	0e 94 e9 40 	call	0x81d2	; 0x81d2 <__unordsf2>
    25ae:	88 23       	and	r24, r24
    25b0:	11 f0       	breq	.+4      	; 0x25b6 <gc_execute_block+0x668>
		FAIL(TG_FLOATING_POINT_ERROR); 
    25b2:	8d e0       	ldi	r24, 0x0D	; 13
    25b4:	8f c0       	rjmp	.+286    	; 0x26d4 <gc_execute_block+0x786>
		return(gc.status); 
	}

	// Invert the sign of h_x2_div_d if circle is counter clockwise 
	// (see sketch below)
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    25b6:	e8 8d       	ldd	r30, Y+24	; 0x18
    25b8:	e3 30       	cpi	r30, 0x03	; 3
    25ba:	21 f4       	brne	.+8      	; 0x25c4 <gc_execute_block+0x676>
		h_x2_div_d = -h_x2_div_d;
    25bc:	17 fb       	bst	r17, 7
    25be:	10 95       	com	r17
    25c0:	17 f9       	bld	r17, 7
    25c2:	10 95       	com	r17
	// Negative R is g-code-alese for "I want a circle with more than 180 degrees
	// of travel" (go figure!), even though it is advised against ever generating
	// such circles in a single line of g-code. By inverting the sign of 
	// h_x2_div_d the center of the circles is placed on the opposite side of 
	// the line of travel and thus we get the unadvisably long arcs as prescribed.
	if (gc.radius < 0) { 
    25c4:	c4 01       	movw	r24, r8
    25c6:	b3 01       	movw	r22, r6
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	0e 94 72 3d 	call	0x7ae4	; 0x7ae4 <__cmpsf2>
    25d4:	88 23       	and	r24, r24
    25d6:	24 f4       	brge	.+8      	; 0x25e0 <gc_execute_block+0x692>
		h_x2_div_d = -h_x2_div_d; 
    25d8:	17 fb       	bst	r17, 7
    25da:	10 95       	com	r17
    25dc:	17 f9       	bld	r17, 7
    25de:	10 95       	com	r17
	}        
        
	// Complete the operation by calculating the actual center of the arc
	gc.offset[gc.plane_axis_0] = (x-(y*h_x2_div_d))/2;
    25e0:	80 91 69 21 	lds	r24, 0x2169
    25e4:	c8 2e       	mov	r12, r24
    25e6:	dd 24       	eor	r13, r13
    25e8:	cc 0c       	add	r12, r12
    25ea:	dd 1c       	adc	r13, r13
    25ec:	cc 0c       	add	r12, r12
    25ee:	dd 1c       	adc	r13, r13
    25f0:	2d e5       	ldi	r18, 0x5D	; 93
    25f2:	31 e2       	ldi	r19, 0x21	; 33
    25f4:	c2 0e       	add	r12, r18
    25f6:	d3 1e       	adc	r13, r19
    25f8:	c2 01       	movw	r24, r4
    25fa:	b1 01       	movw	r22, r2
    25fc:	a8 01       	movw	r20, r16
    25fe:	97 01       	movw	r18, r14
    2600:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    2604:	9b 01       	movw	r18, r22
    2606:	ac 01       	movw	r20, r24
    2608:	6f 81       	ldd	r22, Y+7	; 0x07
    260a:	78 85       	ldd	r23, Y+8	; 0x08
    260c:	89 85       	ldd	r24, Y+9	; 0x09
    260e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2610:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e0       	ldi	r20, 0x00	; 0
    261a:	5f e3       	ldi	r21, 0x3F	; 63
    261c:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    2620:	d6 01       	movw	r26, r12
    2622:	6d 93       	st	X+, r22
    2624:	7d 93       	st	X+, r23
    2626:	8d 93       	st	X+, r24
    2628:	9c 93       	st	X, r25
    262a:	13 97       	sbiw	r26, 0x03	; 3
	gc.offset[gc.plane_axis_1] = (y+(x*h_x2_div_d))/2;
    262c:	80 91 6a 21 	lds	r24, 0x216A
    2630:	c8 2e       	mov	r12, r24
    2632:	dd 24       	eor	r13, r13
    2634:	cc 0c       	add	r12, r12
    2636:	dd 1c       	adc	r13, r13
    2638:	cc 0c       	add	r12, r12
    263a:	dd 1c       	adc	r13, r13
    263c:	ed e5       	ldi	r30, 0x5D	; 93
    263e:	f1 e2       	ldi	r31, 0x21	; 33
    2640:	ce 0e       	add	r12, r30
    2642:	df 1e       	adc	r13, r31
    2644:	6f 81       	ldd	r22, Y+7	; 0x07
    2646:	78 85       	ldd	r23, Y+8	; 0x08
    2648:	89 85       	ldd	r24, Y+9	; 0x09
    264a:	9a 85       	ldd	r25, Y+10	; 0x0a
    264c:	a8 01       	movw	r20, r16
    264e:	97 01       	movw	r18, r14
    2650:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    2654:	9b 01       	movw	r18, r22
    2656:	ac 01       	movw	r20, r24
    2658:	c2 01       	movw	r24, r4
    265a:	b1 01       	movw	r22, r2
    265c:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__addsf3>
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	5f e3       	ldi	r21, 0x3F	; 63
    2668:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    266c:	d6 01       	movw	r26, r12
    266e:	6d 93       	st	X+, r22
    2670:	7d 93       	st	X+, r23
    2672:	8d 93       	st	X+, r24
    2674:	9c 93       	st	X, r25
    2676:	13 97       	sbiw	r26, 0x03	; 3
 */

int _gc_compute_arc()
{
	if (gc.radius_mode) {
		if ((_gc_compute_radius_arc() != TG_OK)) {
    2678:	80 91 1c 21 	lds	r24, 0x211C
    267c:	88 23       	and	r24, r24
    267e:	09 f0       	breq	.+2      	; 0x2682 <gc_execute_block+0x734>
    2680:	44 c1       	rjmp	.+648    	; 0x290a <gc_execute_block+0x9bc>
                  *   /
                    C   <- theta_start (e.g. -145 degrees: theta_start == -PI*(3/4))
 	*/

	// calculate the theta (angle) of the current point
	theta_start = theta(-gc.offset[gc.plane_axis_0], -gc.offset[gc.plane_axis_1]);
    2682:	e0 91 69 21 	lds	r30, 0x2169
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	ee 0f       	add	r30, r30
    268a:	ff 1f       	adc	r31, r31
    268c:	ee 0f       	add	r30, r30
    268e:	ff 1f       	adc	r31, r31
    2690:	e3 5a       	subi	r30, 0xA3	; 163
    2692:	fe 4d       	sbci	r31, 0xDE	; 222
    2694:	60 81       	ld	r22, Z
    2696:	71 81       	ldd	r23, Z+1	; 0x01
    2698:	82 81       	ldd	r24, Z+2	; 0x02
    269a:	93 81       	ldd	r25, Z+3	; 0x03
    269c:	90 58       	subi	r25, 0x80	; 128
    269e:	e0 91 6a 21 	lds	r30, 0x216A
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	ee 0f       	add	r30, r30
    26a6:	ff 1f       	adc	r31, r31
    26a8:	ee 0f       	add	r30, r30
    26aa:	ff 1f       	adc	r31, r31
    26ac:	e3 5a       	subi	r30, 0xA3	; 163
    26ae:	fe 4d       	sbci	r31, 0xDE	; 222
    26b0:	20 81       	ld	r18, Z
    26b2:	31 81       	ldd	r19, Z+1	; 0x01
    26b4:	42 81       	ldd	r20, Z+2	; 0x02
    26b6:	53 81       	ldd	r21, Z+3	; 0x03
    26b8:	50 58       	subi	r21, 0x80	; 128
    26ba:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <theta>
    26be:	6f 87       	std	Y+15, r22	; 0x0f
    26c0:	78 8b       	std	Y+16, r23	; 0x10
    26c2:	89 8b       	std	Y+17, r24	; 0x11
    26c4:	9a 8b       	std	Y+18, r25	; 0x12
	if(isnan(theta_start)) { 
    26c6:	9b 01       	movw	r18, r22
    26c8:	ac 01       	movw	r20, r24
    26ca:	0e 94 e9 40 	call	0x81d2	; 0x81d2 <__unordsf2>
    26ce:	88 23       	and	r24, r24
    26d0:	21 f0       	breq	.+8      	; 0x26da <gc_execute_block+0x78c>
		FAIL(TG_ARC_ERROR); 
    26d2:	8f e0       	ldi	r24, 0x0F	; 15
    26d4:	80 93 1c 21 	sts	0x211C, r24
    26d8:	18 c1       	rjmp	.+560    	; 0x290a <gc_execute_block+0x9bc>
		return(gc.status); 
	}

	// calculate the theta (angle) of the target point
	theta_end = theta(gc.target[gc.plane_axis_0] 
    26da:	e0 91 69 21 	lds	r30, 0x2169
    26de:	0e 2f       	mov	r16, r30
    26e0:	10 e0       	ldi	r17, 0x00	; 0
    26e2:	e0 91 6a 21 	lds	r30, 0x216A
    26e6:	ce 2e       	mov	r12, r30
    26e8:	dd 24       	eor	r13, r13
    26ea:	00 0f       	add	r16, r16
    26ec:	11 1f       	adc	r17, r17
    26ee:	00 0f       	add	r16, r16
    26f0:	11 1f       	adc	r17, r17
    26f2:	04 5e       	subi	r16, 0xE4	; 228
    26f4:	1e 4d       	sbci	r17, 0xDE	; 222
    26f6:	f8 01       	movw	r30, r16
    26f8:	ef 5b       	subi	r30, 0xBF	; 191
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	d8 01       	movw	r26, r16
    26fe:	d5 96       	adiw	r26, 0x35	; 53
    2700:	6d 91       	ld	r22, X+
    2702:	7d 91       	ld	r23, X+
    2704:	8d 91       	ld	r24, X+
    2706:	9c 91       	ld	r25, X
    2708:	d8 97       	sbiw	r26, 0x38	; 56
    270a:	20 81       	ld	r18, Z
    270c:	31 81       	ldd	r19, Z+1	; 0x01
    270e:	42 81       	ldd	r20, Z+2	; 0x02
    2710:	53 81       	ldd	r21, Z+3	; 0x03
    2712:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    2716:	f8 01       	movw	r30, r16
    2718:	21 a5       	ldd	r18, Z+41	; 0x29
    271a:	32 a5       	ldd	r19, Z+42	; 0x2a
    271c:	43 a5       	ldd	r20, Z+43	; 0x2b
    271e:	54 a5       	ldd	r21, Z+44	; 0x2c
    2720:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    2724:	7b 01       	movw	r14, r22
    2726:	8c 01       	movw	r16, r24
    2728:	cc 0c       	add	r12, r12
    272a:	dd 1c       	adc	r13, r13
    272c:	cc 0c       	add	r12, r12
    272e:	dd 1c       	adc	r13, r13
    2730:	2c e1       	ldi	r18, 0x1C	; 28
    2732:	31 e2       	ldi	r19, 0x21	; 33
    2734:	c2 0e       	add	r12, r18
    2736:	d3 1e       	adc	r13, r19
    2738:	f6 01       	movw	r30, r12
    273a:	ef 5b       	subi	r30, 0xBF	; 191
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	d6 01       	movw	r26, r12
    2740:	d5 96       	adiw	r26, 0x35	; 53
    2742:	6d 91       	ld	r22, X+
    2744:	7d 91       	ld	r23, X+
    2746:	8d 91       	ld	r24, X+
    2748:	9c 91       	ld	r25, X
    274a:	d8 97       	sbiw	r26, 0x38	; 56
    274c:	20 81       	ld	r18, Z
    274e:	31 81       	ldd	r19, Z+1	; 0x01
    2750:	42 81       	ldd	r20, Z+2	; 0x02
    2752:	53 81       	ldd	r21, Z+3	; 0x03
    2754:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    2758:	f6 01       	movw	r30, r12
    275a:	21 a5       	ldd	r18, Z+41	; 0x29
    275c:	32 a5       	ldd	r19, Z+42	; 0x2a
    275e:	43 a5       	ldd	r20, Z+43	; 0x2b
    2760:	54 a5       	ldd	r21, Z+44	; 0x2c
    2762:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    2766:	9b 01       	movw	r18, r22
    2768:	ac 01       	movw	r20, r24
    276a:	c8 01       	movw	r24, r16
    276c:	b7 01       	movw	r22, r14
    276e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <theta>
    2772:	7b 01       	movw	r14, r22
    2774:	8c 01       	movw	r16, r24
					- gc.position[gc.plane_axis_0], 
 					  gc.target[gc.plane_axis_1] 
					- gc.offset[gc.plane_axis_1] 
					- gc.position[gc.plane_axis_1]);

	if(isnan(theta_end)) { 
    2776:	a8 01       	movw	r20, r16
    2778:	97 01       	movw	r18, r14
    277a:	0e 94 e9 40 	call	0x81d2	; 0x81d2 <__unordsf2>
    277e:	88 23       	and	r24, r24
    2780:	09 f0       	breq	.+2      	; 0x2784 <gc_execute_block+0x836>
    2782:	a7 cf       	rjmp	.-178    	; 0x26d2 <gc_execute_block+0x784>
		FAIL(TG_ARC_ERROR); 
		return(gc.status); 
	}

	// ensure that the difference is positive so that we have clockwise travel
	if (theta_end < theta_start) {
    2784:	c8 01       	movw	r24, r16
    2786:	b7 01       	movw	r22, r14
    2788:	2f 85       	ldd	r18, Y+15	; 0x0f
    278a:	38 89       	ldd	r19, Y+16	; 0x10
    278c:	49 89       	ldd	r20, Y+17	; 0x11
    278e:	5a 89       	ldd	r21, Y+18	; 0x12
    2790:	0e 94 72 3d 	call	0x7ae4	; 0x7ae4 <__cmpsf2>
    2794:	88 23       	and	r24, r24
    2796:	54 f4       	brge	.+20     	; 0x27ac <gc_execute_block+0x85e>
		theta_end += 2*M_PI;
    2798:	c8 01       	movw	r24, r16
    279a:	b7 01       	movw	r22, r14
    279c:	2b ed       	ldi	r18, 0xDB	; 219
    279e:	3f e0       	ldi	r19, 0x0F	; 15
    27a0:	49 ec       	ldi	r20, 0xC9	; 201
    27a2:	50 e4       	ldi	r21, 0x40	; 64
    27a4:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__addsf3>
    27a8:	7b 01       	movw	r14, r22
    27aa:	8c 01       	movw	r16, r24
	}
	angular_travel = theta_end - theta_start;
    27ac:	c8 01       	movw	r24, r16
    27ae:	b7 01       	movw	r22, r14
    27b0:	2f 85       	ldd	r18, Y+15	; 0x0f
    27b2:	38 89       	ldd	r19, Y+16	; 0x10
    27b4:	49 89       	ldd	r20, Y+17	; 0x11
    27b6:	5a 89       	ldd	r21, Y+18	; 0x12
    27b8:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    27bc:	6b 87       	std	Y+11, r22	; 0x0b
    27be:	7c 87       	std	Y+12, r23	; 0x0c
    27c0:	8d 87       	std	Y+13, r24	; 0x0d
    27c2:	9e 87       	std	Y+14, r25	; 0x0e

	// Invert angular motion if the g-code wanted a counterclockwise arc
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
    27c4:	80 91 27 21 	lds	r24, 0x2127
    27c8:	83 30       	cpi	r24, 0x03	; 3
    27ca:	71 f4       	brne	.+28     	; 0x27e8 <gc_execute_block+0x89a>
		angular_travel = angular_travel - 2*M_PI;
    27cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d4:	2b ed       	ldi	r18, 0xDB	; 219
    27d6:	3f e0       	ldi	r19, 0x0F	; 15
    27d8:	49 ec       	ldi	r20, 0xC9	; 201
    27da:	50 e4       	ldi	r21, 0x40	; 64
    27dc:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    27e0:	6b 87       	std	Y+11, r22	; 0x0b
    27e2:	7c 87       	std	Y+12, r23	; 0x0c
    27e4:	8d 87       	std	Y+13, r24	; 0x0d
    27e6:	9e 87       	std	Y+14, r25	; 0x0e
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    27e8:	80 91 69 21 	lds	r24, 0x2169
    27ec:	28 2f       	mov	r18, r24
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	2d 83       	std	Y+5, r18	; 0x05
    27f2:	3e 83       	std	Y+6, r19	; 0x06
    27f4:	f9 01       	movw	r30, r18
    27f6:	ee 0f       	add	r30, r30
    27f8:	ff 1f       	adc	r31, r31
    27fa:	ee 0f       	add	r30, r30
    27fc:	ff 1f       	adc	r31, r31
    27fe:	e3 5a       	subi	r30, 0xA3	; 163
    2800:	fe 4d       	sbci	r31, 0xDE	; 222
    2802:	e0 80       	ld	r14, Z
    2804:	f1 80       	ldd	r15, Z+1	; 0x01
    2806:	02 81       	ldd	r16, Z+2	; 0x02
    2808:	13 81       	ldd	r17, Z+3	; 0x03
    280a:	80 91 6a 21 	lds	r24, 0x216A
    280e:	a8 2f       	mov	r26, r24
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	ab 83       	std	Y+3, r26	; 0x03
    2814:	bc 83       	std	Y+4, r27	; 0x04
    2816:	fd 01       	movw	r30, r26
    2818:	ee 0f       	add	r30, r30
    281a:	ff 1f       	adc	r31, r31
    281c:	ee 0f       	add	r30, r30
    281e:	ff 1f       	adc	r31, r31
    2820:	e3 5a       	subi	r30, 0xA3	; 163
    2822:	fe 4d       	sbci	r31, 0xDE	; 222
    2824:	20 81       	ld	r18, Z
    2826:	31 81       	ldd	r19, Z+1	; 0x01
    2828:	42 81       	ldd	r20, Z+2	; 0x02
    282a:	53 81       	ldd	r21, Z+3	; 0x03

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];
    282c:	80 91 6b 21 	lds	r24, 0x216B
    2830:	28 2e       	mov	r2, r24
    2832:	33 24       	eor	r3, r3
    2834:	f1 01       	movw	r30, r2
    2836:	ee 0f       	add	r30, r30
    2838:	ff 1f       	adc	r31, r31
    283a:	ee 0f       	add	r30, r30
    283c:	ff 1f       	adc	r31, r31
    283e:	e4 5e       	subi	r30, 0xE4	; 228
    2840:	fe 4d       	sbci	r31, 0xDE	; 222
    2842:	85 a9       	ldd	r24, Z+53	; 0x35
    2844:	96 a9       	ldd	r25, Z+54	; 0x36
    2846:	a7 a9       	ldd	r26, Z+55	; 0x37
    2848:	b0 ad       	ldd	r27, Z+56	; 0x38
    284a:	8c 8b       	std	Y+20, r24	; 0x14
    284c:	9d 8b       	std	Y+21, r25	; 0x15
    284e:	ae 8b       	std	Y+22, r26	; 0x16
    2850:	bf 8b       	std	Y+23, r27	; 0x17
    2852:	a1 a4       	ldd	r10, Z+41	; 0x29
    2854:	b2 a4       	ldd	r11, Z+42	; 0x2a
    2856:	c3 a4       	ldd	r12, Z+43	; 0x2b
    2858:	d4 a4       	ldd	r13, Z+44	; 0x2c

	// Trace the arc
	gc.status = mc_arc_nonblock(theta_start, 
    285a:	90 91 28 21 	lds	r25, 0x2128
    285e:	9b 8b       	std	Y+19, r25	; 0x13
    2860:	99 23       	and	r25, r25
    2862:	49 f0       	breq	.+18     	; 0x2876 <gc_execute_block+0x928>
    2864:	40 90 41 21 	lds	r4, 0x2141
    2868:	50 90 42 21 	lds	r5, 0x2142
    286c:	60 90 43 21 	lds	r6, 0x2143
    2870:	70 90 44 21 	lds	r7, 0x2144
    2874:	08 c0       	rjmp	.+16     	; 0x2886 <gc_execute_block+0x938>
    2876:	40 90 35 21 	lds	r4, 0x2135
    287a:	50 90 36 21 	lds	r5, 0x2136
    287e:	60 90 37 21 	lds	r6, 0x2137
    2882:	70 90 38 21 	lds	r7, 0x2138
	if (gc.motion_mode == MOTION_MODE_CCW_ARC) {
		angular_travel = angular_travel - 2*M_PI;
	}

	// Find the radius
	radius_tmp = hypot(gc.offset[gc.plane_axis_0], gc.offset[gc.plane_axis_1]);
    2886:	c8 01       	movw	r24, r16
    2888:	b7 01       	movw	r22, r14
    288a:	0e 94 6f 3f 	call	0x7ede	; 0x7ede <hypot>
    288e:	7b 01       	movw	r14, r22
    2890:	8c 01       	movw	r16, r24

	// Calculate the motion along the depth axis of the helix
	depth = gc.target[gc.plane_axis_2] - gc.position[gc.plane_axis_2];

	// Trace the arc
	gc.status = mc_arc_nonblock(theta_start, 
    2892:	ad b7       	in	r26, 0x3d	; 61
    2894:	be b7       	in	r27, 0x3e	; 62
    2896:	1a 97       	sbiw	r26, 0x0a	; 10
    2898:	ad bf       	out	0x3d, r26	; 61
    289a:	be bf       	out	0x3e, r27	; 62
    289c:	8d b6       	in	r8, 0x3d	; 61
    289e:	9e b6       	in	r9, 0x3e	; 62
    28a0:	08 94       	sec
    28a2:	81 1c       	adc	r8, r1
    28a4:	91 1c       	adc	r9, r1
    28a6:	6c 89       	ldd	r22, Y+20	; 0x14
    28a8:	7d 89       	ldd	r23, Y+21	; 0x15
    28aa:	8e 89       	ldd	r24, Y+22	; 0x16
    28ac:	9f 89       	ldd	r25, Y+23	; 0x17
    28ae:	a6 01       	movw	r20, r12
    28b0:	95 01       	movw	r18, r10
    28b2:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    28b6:	5b 01       	movw	r10, r22
    28b8:	6c 01       	movw	r12, r24
    28ba:	2b 81       	ldd	r18, Y+3	; 0x03
    28bc:	3c 81       	ldd	r19, Y+4	; 0x04
    28be:	f4 01       	movw	r30, r8
    28c0:	20 83       	st	Z, r18
    28c2:	31 83       	std	Z+1, r19	; 0x01
    28c4:	22 82       	std	Z+2, r2	; 0x02
    28c6:	33 82       	std	Z+3, r3	; 0x03
    28c8:	d4 01       	movw	r26, r8
    28ca:	14 96       	adiw	r26, 0x04	; 4
    28cc:	4d 92       	st	X+, r4
    28ce:	5d 92       	st	X+, r5
    28d0:	6d 92       	st	X+, r6
    28d2:	7c 92       	st	X, r7
    28d4:	17 97       	sbiw	r26, 0x07	; 7
    28d6:	eb 89       	ldd	r30, Y+19	; 0x13
    28d8:	18 96       	adiw	r26, 0x08	; 8
    28da:	ec 93       	st	X, r30
    28dc:	18 97       	sbiw	r26, 0x08	; 8
    28de:	19 96       	adiw	r26, 0x09	; 9
    28e0:	1c 92       	st	X, r1
    28e2:	6f 85       	ldd	r22, Y+15	; 0x0f
    28e4:	78 89       	ldd	r23, Y+16	; 0x10
    28e6:	89 89       	ldd	r24, Y+17	; 0x11
    28e8:	9a 89       	ldd	r25, Y+18	; 0x12
    28ea:	2b 85       	ldd	r18, Y+11	; 0x0b
    28ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    28ee:	4d 85       	ldd	r20, Y+13	; 0x0d
    28f0:	5e 85       	ldd	r21, Y+14	; 0x0e
    28f2:	8d 80       	ldd	r8, Y+5	; 0x05
    28f4:	9e 80       	ldd	r9, Y+6	; 0x06
    28f6:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <mc_arc_nonblock>
    28fa:	80 93 1c 21 	sts	0x211C, r24
    28fe:	2d b7       	in	r18, 0x3d	; 61
    2900:	3e b7       	in	r19, 0x3e	; 62
    2902:	26 5f       	subi	r18, 0xF6	; 246
    2904:	3f 4f       	sbci	r19, 0xFF	; 255
    2906:	2d bf       	out	0x3d, r18	; 61
    2908:	3e bf       	out	0x3e, r19	; 62
	/* As far as the g-code parser is concerned the position is now == target. 
	 * In reality, motion control / steppers will still be processing the action
	 * and the real tool position is still close to the starting point.
	 * The endpoint position is not moved if there has been an interpreter error.
	 */
	if ((gc.status == TG_OK) || (gc.status == TG_CONTINUE)) {
    290a:	80 91 1c 21 	lds	r24, 0x211C
    290e:	88 23       	and	r24, r24
    2910:	11 f0       	breq	.+4      	; 0x2916 <gc_execute_block+0x9c8>
    2912:	82 30       	cpi	r24, 0x02	; 2
    2914:	49 f4       	brne	.+18     	; 0x2928 <gc_execute_block+0x9da>
		memcpy(gc.position, gc.target, sizeof(gc.target));
    2916:	e5 e4       	ldi	r30, 0x45	; 69
    2918:	f1 e2       	ldi	r31, 0x21	; 33
    291a:	df 01       	movw	r26, r30
    291c:	1c 96       	adiw	r26, 0x0c	; 12
    291e:	9c e0       	ldi	r25, 0x0C	; 12
    2920:	0d 90       	ld	r0, X+
    2922:	01 92       	st	Z+, r0
    2924:	91 50       	subi	r25, 0x01	; 1
    2926:	e1 f7       	brne	.-8      	; 0x2920 <gc_execute_block+0x9d2>
	};
	return(gc.status);
}
    2928:	68 96       	adiw	r28, 0x18	; 24
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	de bf       	out	0x3e, r29	; 62
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	1f 91       	pop	r17
    2934:	0f 91       	pop	r16
    2936:	ff 90       	pop	r15
    2938:	ef 90       	pop	r14
    293a:	df 90       	pop	r13
    293c:	cf 90       	pop	r12
    293e:	bf 90       	pop	r11
    2940:	af 90       	pop	r10
    2942:	9f 90       	pop	r9
    2944:	8f 90       	pop	r8
    2946:	7f 90       	pop	r7
    2948:	6f 90       	pop	r6
    294a:	5f 90       	pop	r5
    294c:	4f 90       	pop	r4
    294e:	3f 90       	pop	r3
    2950:	2f 90       	pop	r2
    2952:	08 95       	ret

00002954 <gc_gcode_parser>:
/*
 * gc_gcode_parser() - parse a block (line) of gcode
 */

uint8_t gc_gcode_parser(char *block)
{
    2954:	cf 93       	push	r28
    2956:	df 93       	push	r29
    2958:	ec 01       	movw	r28, r24
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	10 c0       	rjmp	.+32     	; 0x2980 <gc_gcode_parser+0x2c>
	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
		if (c <= ' ' ) {					// throw away WS & ctrl chars
    2960:	e1 32       	cpi	r30, 0x21	; 33
    2962:	70 f0       	brcs	.+28     	; 0x2980 <gc_gcode_parser+0x2c>
			continue;
		} else if (c >= 'a' && c <= 'z') {	// convert lower to upper
    2964:	8e 2f       	mov	r24, r30
    2966:	81 56       	subi	r24, 0x61	; 97
    2968:	a9 2f       	mov	r26, r25
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	9f 5f       	subi	r25, 0xFF	; 255
    296e:	8a 31       	cpi	r24, 0x1A	; 26
    2970:	20 f4       	brcc	.+8      	; 0x297a <gc_gcode_parser+0x26>
			block[j++] = c-'a'+'A';
    2972:	ac 0f       	add	r26, r28
    2974:	bd 1f       	adc	r27, r29
    2976:	e0 52       	subi	r30, 0x20	; 32
    2978:	02 c0       	rjmp	.+4      	; 0x297e <gc_gcode_parser+0x2a>
		} else {
			block[j++] = c;
    297a:	ac 0f       	add	r26, r28
    297c:	bd 1f       	adc	r27, r29
    297e:	ec 93       	st	X, r30

	char c;
	uint8_t i = 0; 		// index for incoming characters
	uint8_t j = 0;		// index for normalized characters

	while ((c = block[i++]) != NUL) {
    2980:	fe 01       	movw	r30, r28
    2982:	e2 0f       	add	r30, r18
    2984:	f1 1d       	adc	r31, r1
    2986:	e0 81       	ld	r30, Z
    2988:	2f 5f       	subi	r18, 0xFF	; 255
    298a:	ee 23       	and	r30, r30
    298c:	49 f7       	brne	.-46     	; 0x2960 <gc_gcode_parser+0xc>
			block[j++] = c-'a'+'A';
		} else {
			block[j++] = c;
		}
	}
	block[j] = 0;
    298e:	fe 01       	movw	r30, r28
    2990:	e9 0f       	add	r30, r25
    2992:	f1 1d       	adc	r31, r1
    2994:	10 82       	st	Z, r1
{
	_gc_normalize_gcode_block(block);
#ifdef __DEBUG
	printf_P(PSTR("GCode read:   %s\n"), block);
#endif
	if (block[0] == '(') { 					// ignore comments
    2996:	88 81       	ld	r24, Y
    2998:	88 32       	cpi	r24, 0x28	; 40
    299a:	61 f0       	breq	.+24     	; 0x29b4 <gc_gcode_parser+0x60>
		return(TG_OK);
	}
	if (block[0] == 'Q') { 					// quit
    299c:	81 35       	cpi	r24, 0x51	; 81
    299e:	11 f4       	brne	.+4      	; 0x29a4 <gc_gcode_parser+0x50>
    29a0:	83 e0       	ldi	r24, 0x03	; 3
    29a2:	09 c0       	rjmp	.+18     	; 0x29b6 <gc_gcode_parser+0x62>
		return(TG_QUIT);
	} 
	if (block[0] == '/') { 					// ignore block delete
    29a4:	8f 32       	cpi	r24, 0x2F	; 47
    29a6:	31 f0       	breq	.+12     	; 0x29b4 <gc_gcode_parser+0x60>
		return(TG_OK);
	} 
	gc.status = gc_execute_block(block);	// execute gcode block
    29a8:	ce 01       	movw	r24, r28
    29aa:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <gc_execute_block>
    29ae:	80 93 1c 21 	sts	0x211C, r24
    29b2:	01 c0       	rjmp	.+2      	; 0x29b6 <gc_gcode_parser+0x62>
#ifdef __ECHO
	_gc_print_status(gc.status, block);
#endif
	return (gc.status);
    29b4:	80 e0       	ldi	r24, 0x00	; 0
}
    29b6:	df 91       	pop	r29
    29b8:	cf 91       	pop	r28
    29ba:	08 95       	ret

000029bc <_cfg_computed>:
 * _cfg_computed() - helper function to generate computed config values 
 *	call this every time you change any configs
 */

void _cfg_computed() 
{
    29bc:	cf 92       	push	r12
    29be:	df 92       	push	r13
    29c0:	ef 92       	push	r14
    29c2:	ff 92       	push	r15
    29c4:	0f 93       	push	r16
    29c6:	1f 93       	push	r17
    29c8:	cf 93       	push	r28
    29ca:	df 93       	push	r29
    29cc:	c2 e5       	ldi	r28, 0x52	; 82
    29ce:	d4 e2       	ldi	r29, 0x24	; 36
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (int i = X_AXIS; i <= A_AXIS; i++) {
		cfg.a[i].steps_per_mm = (360 / (cfg.a[i].degree_per_step / 
    29d0:	68 81       	ld	r22, Y
    29d2:	70 e0       	ldi	r23, 0x00	; 0
    29d4:	88 27       	eor	r24, r24
    29d6:	77 fd       	sbrc	r23, 7
    29d8:	80 95       	com	r24
    29da:	98 2f       	mov	r25, r24
    29dc:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    29e0:	9b 01       	movw	r18, r22
    29e2:	ac 01       	movw	r20, r24
    29e4:	6f 81       	ldd	r22, Y+7	; 0x07
    29e6:	78 85       	ldd	r23, Y+8	; 0x08
    29e8:	89 85       	ldd	r24, Y+9	; 0x09
    29ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ec:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    29f0:	9b 01       	movw	r18, r22
    29f2:	ac 01       	movw	r20, r24
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	70 e0       	ldi	r23, 0x00	; 0
    29f8:	84 eb       	ldi	r24, 0xB4	; 180
    29fa:	93 e4       	ldi	r25, 0x43	; 67
    29fc:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    2a00:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a02:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a04:	4d 85       	ldd	r20, Y+13	; 0x0d
    2a06:	5e 85       	ldd	r21, Y+14	; 0x0e
    2a08:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    2a0c:	6b 8b       	std	Y+19, r22	; 0x13
    2a0e:	7c 8b       	std	Y+20, r23	; 0x14
    2a10:	8d 8b       	std	Y+21, r24	; 0x15
    2a12:	9e 8b       	std	Y+22, r25	; 0x16
    2a14:	68 96       	adiw	r28, 0x18	; 24
 */

void _cfg_computed() 
{
	// = 360 / (degree_per_step/microstep) / mm_per_rev
	for (int i = X_AXIS; i <= A_AXIS; i++) {
    2a16:	84 e2       	ldi	r24, 0x24	; 36
    2a18:	c2 3b       	cpi	r28, 0xB2	; 178
    2a1a:	d8 07       	cpc	r29, r24
    2a1c:	c9 f6       	brne	.-78     	; 0x29d0 <_cfg_computed+0x14>
										cfg.a[i].microstep)) / 
										cfg.a[i].mm_per_rev;
	}

	// = feed_steps_sec / (360/degree_per_step/microstep)
	cfg.default_feed_rate = (cfg.a[X_AXIS].feed_steps_sec * 
    2a1e:	00 91 52 24 	lds	r16, 0x2452
    2a22:	10 e0       	ldi	r17, 0x00	; 0
    2a24:	b8 01       	movw	r22, r16
    2a26:	88 27       	eor	r24, r24
    2a28:	77 fd       	sbrc	r23, 7
    2a2a:	80 95       	com	r24
    2a2c:	98 2f       	mov	r25, r24
    2a2e:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    2a32:	9b 01       	movw	r18, r22
    2a34:	ac 01       	movw	r20, r24
    2a36:	60 91 59 24 	lds	r22, 0x2459
    2a3a:	70 91 5a 24 	lds	r23, 0x245A
    2a3e:	80 91 5b 24 	lds	r24, 0x245B
    2a42:	90 91 5c 24 	lds	r25, 0x245C
    2a46:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    2a4a:	9b 01       	movw	r18, r22
    2a4c:	ac 01       	movw	r20, r24
    2a4e:	60 e0       	ldi	r22, 0x00	; 0
    2a50:	70 e0       	ldi	r23, 0x00	; 0
    2a52:	84 eb       	ldi	r24, 0xB4	; 180
    2a54:	93 e4       	ldi	r25, 0x43	; 67
    2a56:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    2a5a:	6b 01       	movw	r12, r22
    2a5c:	7c 01       	movw	r14, r24
    2a5e:	80 91 57 24 	lds	r24, 0x2457
    2a62:	90 91 58 24 	lds	r25, 0x2458
    2a66:	08 9f       	mul	r16, r24
    2a68:	b0 01       	movw	r22, r0
    2a6a:	09 9f       	mul	r16, r25
    2a6c:	70 0d       	add	r23, r0
    2a6e:	18 9f       	mul	r17, r24
    2a70:	70 0d       	add	r23, r0
    2a72:	11 24       	eor	r1, r1
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__floatunsisf>
    2a7c:	a7 01       	movw	r20, r14
    2a7e:	96 01       	movw	r18, r12
    2a80:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    2a84:	60 93 4a 24 	sts	0x244A, r22
    2a88:	70 93 4b 24 	sts	0x244B, r23
    2a8c:	80 93 4c 24 	sts	0x244C, r24
    2a90:	90 93 4d 24 	sts	0x244D, r25
							  cfg.a[X_AXIS].microstep) / 
							 (360/(cfg.a[X_AXIS].degree_per_step / 
							 	   cfg.a[X_AXIS].microstep));

	// = seek_steps_sec / (360/degree_per_step/microstep)
	cfg.default_seek_rate = (cfg.a[X_AXIS].seek_steps_sec * 
    2a94:	80 91 55 24 	lds	r24, 0x2455
    2a98:	90 91 56 24 	lds	r25, 0x2456
    2a9c:	08 9f       	mul	r16, r24
    2a9e:	b0 01       	movw	r22, r0
    2aa0:	09 9f       	mul	r16, r25
    2aa2:	70 0d       	add	r23, r0
    2aa4:	18 9f       	mul	r17, r24
    2aa6:	70 0d       	add	r23, r0
    2aa8:	11 24       	eor	r1, r1
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__floatunsisf>
    2ab2:	a7 01       	movw	r20, r14
    2ab4:	96 01       	movw	r18, r12
    2ab6:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    2aba:	60 93 4e 24 	sts	0x244E, r22
    2abe:	70 93 4f 24 	sts	0x244F, r23
    2ac2:	80 93 50 24 	sts	0x2450, r24
    2ac6:	90 93 51 24 	sts	0x2451, r25
							  cfg.a[X_AXIS].microstep) / 
							 (360/(cfg.a[X_AXIS].degree_per_step / 
							 	   cfg.a[X_AXIS].microstep));
}
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	ff 90       	pop	r15
    2ad4:	ef 90       	pop	r14
    2ad6:	df 90       	pop	r13
    2ad8:	cf 90       	pop	r12
    2ada:	08 95       	ret

00002adc <cfg_reset>:
 * config_reset() - load default settings into config 
 */

void cfg_reset()
{
	cfg.config_version = CONFIG_VERSION;
    2adc:	e4 e4       	ldi	r30, 0x44	; 68
    2ade:	f4 e2       	ldi	r31, 0x24	; 36
    2ae0:	84 e6       	ldi	r24, 0x64	; 100
    2ae2:	80 93 44 24 	sts	0x2444, r24
	cfg.mm_per_arc_segment = MM_PER_ARC_SEGMENT;
    2ae6:	8a e0       	ldi	r24, 0x0A	; 10
    2ae8:	97 ed       	ldi	r25, 0xD7	; 215
    2aea:	a3 e2       	ldi	r26, 0x23	; 35
    2aec:	bc e3       	ldi	r27, 0x3C	; 60
    2aee:	80 93 46 24 	sts	0x2446, r24
    2af2:	90 93 47 24 	sts	0x2447, r25
    2af6:	a0 93 48 24 	sts	0x2448, r26
    2afa:	b0 93 49 24 	sts	0x2449, r27

	cfg.a[X_AXIS].seek_steps_sec = X_SEEK_WHOLE_STEPS_PER_SEC;
    2afe:	8c ed       	ldi	r24, 0xDC	; 220
    2b00:	95 e0       	ldi	r25, 0x05	; 5
    2b02:	80 93 55 24 	sts	0x2455, r24
    2b06:	90 93 56 24 	sts	0x2456, r25
	cfg.a[Y_AXIS].seek_steps_sec = Y_SEEK_WHOLE_STEPS_PER_SEC;
    2b0a:	80 93 6d 24 	sts	0x246D, r24
    2b0e:	90 93 6e 24 	sts	0x246E, r25
	cfg.a[Z_AXIS].seek_steps_sec = Z_SEEK_WHOLE_STEPS_PER_SEC;
    2b12:	80 93 85 24 	sts	0x2485, r24
    2b16:	90 93 86 24 	sts	0x2486, r25
	cfg.a[A_AXIS].seek_steps_sec = A_SEEK_WHOLE_STEPS_PER_SEC;
    2b1a:	80 93 9d 24 	sts	0x249D, r24
    2b1e:	90 93 9e 24 	sts	0x249E, r25

	cfg.a[X_AXIS].feed_steps_sec = X_FEED_WHOLE_STEPS_PER_SEC;
    2b22:	80 93 57 24 	sts	0x2457, r24
    2b26:	90 93 58 24 	sts	0x2458, r25
	cfg.a[Y_AXIS].feed_steps_sec = Y_FEED_WHOLE_STEPS_PER_SEC;
    2b2a:	80 93 6f 24 	sts	0x246F, r24
    2b2e:	90 93 70 24 	sts	0x2470, r25
	cfg.a[Z_AXIS].feed_steps_sec = Z_FEED_WHOLE_STEPS_PER_SEC;
    2b32:	80 93 87 24 	sts	0x2487, r24
    2b36:	90 93 88 24 	sts	0x2488, r25
	cfg.a[A_AXIS].feed_steps_sec = A_FEED_WHOLE_STEPS_PER_SEC;
    2b3a:	80 93 9f 24 	sts	0x249F, r24
    2b3e:	90 93 a0 24 	sts	0x24A0, r25

	cfg.a[X_AXIS].degree_per_step = X_DEGREE_PER_WHOLE_STEP;
    2b42:	86 e6       	ldi	r24, 0x66	; 102
    2b44:	96 e6       	ldi	r25, 0x66	; 102
    2b46:	a6 ee       	ldi	r26, 0xE6	; 230
    2b48:	bf e3       	ldi	r27, 0x3F	; 63
    2b4a:	80 93 59 24 	sts	0x2459, r24
    2b4e:	90 93 5a 24 	sts	0x245A, r25
    2b52:	a0 93 5b 24 	sts	0x245B, r26
    2b56:	b0 93 5c 24 	sts	0x245C, r27
	cfg.a[Y_AXIS].degree_per_step = Y_DEGREE_PER_WHOLE_STEP;
    2b5a:	80 93 71 24 	sts	0x2471, r24
    2b5e:	90 93 72 24 	sts	0x2472, r25
    2b62:	a0 93 73 24 	sts	0x2473, r26
    2b66:	b0 93 74 24 	sts	0x2474, r27
	cfg.a[Z_AXIS].degree_per_step = Z_DEGREE_PER_WHOLE_STEP;
    2b6a:	80 93 89 24 	sts	0x2489, r24
    2b6e:	90 93 8a 24 	sts	0x248A, r25
    2b72:	a0 93 8b 24 	sts	0x248B, r26
    2b76:	b0 93 8c 24 	sts	0x248C, r27
	cfg.a[A_AXIS].degree_per_step = A_DEGREE_PER_WHOLE_STEP;
    2b7a:	80 93 a1 24 	sts	0x24A1, r24
    2b7e:	90 93 a2 24 	sts	0x24A2, r25
    2b82:	a0 93 a3 24 	sts	0x24A3, r26
    2b86:	b0 93 a4 24 	sts	0x24A4, r27

	cfg.a[X_AXIS].mm_per_rev = X_MM_PER_REVOLUTION;
    2b8a:	8c e5       	ldi	r24, 0x5C	; 92
    2b8c:	9f e8       	ldi	r25, 0x8F	; 143
    2b8e:	a2 ea       	ldi	r26, 0xA2	; 162
    2b90:	bf e3       	ldi	r27, 0x3F	; 63
    2b92:	80 93 5d 24 	sts	0x245D, r24
    2b96:	90 93 5e 24 	sts	0x245E, r25
    2b9a:	a0 93 5f 24 	sts	0x245F, r26
    2b9e:	b0 93 60 24 	sts	0x2460, r27
	cfg.a[Y_AXIS].mm_per_rev = Y_MM_PER_REVOLUTION;
    2ba2:	80 93 75 24 	sts	0x2475, r24
    2ba6:	90 93 76 24 	sts	0x2476, r25
    2baa:	a0 93 77 24 	sts	0x2477, r26
    2bae:	b0 93 78 24 	sts	0x2478, r27
	cfg.a[Z_AXIS].mm_per_rev = Z_MM_PER_REVOLUTION;
    2bb2:	80 93 8d 24 	sts	0x248D, r24
    2bb6:	90 93 8e 24 	sts	0x248E, r25
    2bba:	a0 93 8f 24 	sts	0x248F, r26
    2bbe:	b0 93 90 24 	sts	0x2490, r27
	cfg.a[A_AXIS].mm_per_rev = A_MM_PER_REVOLUTION;
    2bc2:	80 93 a5 24 	sts	0x24A5, r24
    2bc6:	90 93 a6 24 	sts	0x24A6, r25
    2bca:	a0 93 a7 24 	sts	0x24A7, r26
    2bce:	b0 93 a8 24 	sts	0x24A8, r27
	
	cfg.a[X_AXIS].mm_travel = X_MM_TRAVEL;
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	a8 ec       	ldi	r26, 0xC8	; 200
    2bd8:	b3 e4       	ldi	r27, 0x43	; 67
    2bda:	80 93 61 24 	sts	0x2461, r24
    2bde:	90 93 62 24 	sts	0x2462, r25
    2be2:	a0 93 63 24 	sts	0x2463, r26
    2be6:	b0 93 64 24 	sts	0x2464, r27
	cfg.a[Y_AXIS].mm_travel = Y_MM_TRAVEL;
    2bea:	80 93 79 24 	sts	0x2479, r24
    2bee:	90 93 7a 24 	sts	0x247A, r25
    2bf2:	a0 93 7b 24 	sts	0x247B, r26
    2bf6:	b0 93 7c 24 	sts	0x247C, r27
	cfg.a[Z_AXIS].mm_travel = Z_MM_TRAVEL;
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	a6 e9       	ldi	r26, 0x96	; 150
    2c00:	b3 e4       	ldi	r27, 0x43	; 67
    2c02:	80 93 91 24 	sts	0x2491, r24
    2c06:	90 93 92 24 	sts	0x2492, r25
    2c0a:	a0 93 93 24 	sts	0x2493, r26
    2c0e:	b0 93 94 24 	sts	0x2494, r27
	cfg.a[A_AXIS].mm_travel = A_MM_TRAVEL;
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	a0 e8       	ldi	r26, 0x80	; 128
    2c18:	bf eb       	ldi	r27, 0xBF	; 191
    2c1a:	80 93 a9 24 	sts	0x24A9, r24
    2c1e:	90 93 aa 24 	sts	0x24AA, r25
    2c22:	a0 93 ab 24 	sts	0x24AB, r26
    2c26:	b0 93 ac 24 	sts	0x24AC, r27
	
	cfg.a[X_AXIS].microstep = X_MICROSTEPS;
    2c2a:	88 e0       	ldi	r24, 0x08	; 8
    2c2c:	80 93 52 24 	sts	0x2452, r24
	cfg.a[Y_AXIS].microstep = Y_MICROSTEPS;
    2c30:	80 93 6a 24 	sts	0x246A, r24
	cfg.a[Z_AXIS].microstep = Z_MICROSTEPS;
    2c34:	86 af       	std	Z+62, r24	; 0x3e
	cfg.a[A_AXIS].microstep = A_MICROSTEPS;
    2c36:	80 93 9a 24 	sts	0x249A, r24

	cfg.a[X_AXIS].polarity = X_POLARITY;
    2c3a:	10 92 54 24 	sts	0x2454, r1
	cfg.a[Y_AXIS].polarity = Y_POLARITY;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	80 93 6c 24 	sts	0x246C, r24
	cfg.a[Z_AXIS].polarity = Z_POLARITY;
    2c44:	10 92 84 24 	sts	0x2484, r1
	cfg.a[A_AXIS].polarity = A_POLARITY;
    2c48:	10 92 9c 24 	sts	0x249C, r1

	cfg.a[X_AXIS].limit_enable = X_LIMIT_ENABLE;
    2c4c:	80 93 69 24 	sts	0x2469, r24
	cfg.a[Y_AXIS].limit_enable = Y_LIMIT_ENABLE;
    2c50:	85 af       	std	Z+61, r24	; 0x3d
	cfg.a[Z_AXIS].limit_enable = Z_LIMIT_ENABLE;
    2c52:	80 93 99 24 	sts	0x2499, r24
	cfg.a[A_AXIS].limit_enable = A_LIMIT_ENABLE;
    2c56:	10 92 b1 24 	sts	0x24B1, r1

	cfg.a[X_AXIS].low_pwr_idle = X_LOW_POWER_IDLE;
    2c5a:	80 93 53 24 	sts	0x2453, r24
	cfg.a[Y_AXIS].low_pwr_idle = Y_LOW_POWER_IDLE;
    2c5e:	80 93 6b 24 	sts	0x246B, r24
	cfg.a[Z_AXIS].low_pwr_idle = Z_LOW_POWER_IDLE;
    2c62:	87 af       	std	Z+63, r24	; 0x3f
	cfg.a[A_AXIS].low_pwr_idle = A_LOW_POWER_IDLE;
    2c64:	80 93 9b 24 	sts	0x249B, r24

	_cfg_computed();		// generate computed values from the above
    2c68:	0e 94 de 14 	call	0x29bc	; 0x29bc <_cfg_computed>
}
    2c6c:	08 95       	ret

00002c6e <cfg_init>:
 * cfg_init() - initialize config system 
 */

void cfg_init() 
{
	cfg_reset();
    2c6e:	0e 94 6e 15 	call	0x2adc	; 0x2adc <cfg_reset>
}
    2c72:	08 95       	ret

00002c74 <_cfg_print_status>:
 * _cfg_print_status
 */

void _cfg_print_status(uint8_t status_code, char *textbuf)
{
	switch(status_code) {
    2c74:	87 30       	cpi	r24, 0x07	; 7
    2c76:	31 f1       	breq	.+76     	; 0x2cc4 <_cfg_print_status+0x50>
    2c78:	88 30       	cpi	r24, 0x08	; 8
    2c7a:	30 f4       	brcc	.+12     	; 0x2c88 <_cfg_print_status+0x14>
    2c7c:	82 30       	cpi	r24, 0x02	; 2
    2c7e:	59 f0       	breq	.+22     	; 0x2c96 <_cfg_print_status+0x22>
    2c80:	83 30       	cpi	r24, 0x03	; 3
    2c82:	09 f0       	breq	.+2      	; 0x2c86 <_cfg_print_status+0x12>
    2c84:	45 c0       	rjmp	.+138    	; 0x2d10 <_cfg_print_status+0x9c>
    2c86:	0c c0       	rjmp	.+24     	; 0x2ca0 <_cfg_print_status+0x2c>
    2c88:	8d 30       	cpi	r24, 0x0D	; 13
    2c8a:	09 f1       	breq	.+66     	; 0x2cce <_cfg_print_status+0x5a>
    2c8c:	8f 30       	cpi	r24, 0x0F	; 15
    2c8e:	81 f1       	breq	.+96     	; 0x2cf0 <_cfg_print_status+0x7c>
    2c90:	8c 30       	cpi	r24, 0x0C	; 12
    2c92:	f1 f5       	brne	.+124    	; 0x2d10 <_cfg_print_status+0x9c>
    2c94:	12 c0       	rjmp	.+36     	; 0x2cba <_cfg_print_status+0x46>
			printf_P(PSTR("Config command: %s\n"), textbuf);
#endif
			break;
		};
		case TG_CONTINUE: 
			printf_P(PSTR("Config Continuation for: %s\n"), textbuf); 
    2c96:	00 d0       	rcall	.+0      	; 0x2c98 <_cfg_print_status+0x24>
    2c98:	0f 92       	push	r0
    2c9a:	85 e1       	ldi	r24, 0x15	; 21
    2c9c:	94 e0       	ldi	r25, 0x04	; 4
    2c9e:	1b c0       	rjmp	.+54     	; 0x2cd6 <_cfg_print_status+0x62>
			break;

		case TG_QUIT: 
			printf_P(PSTR("Quitting Config Mode\n")); 
    2ca0:	0f 92       	push	r0
    2ca2:	0f 92       	push	r0
    2ca4:	8f ef       	ldi	r24, 0xFF	; 255
    2ca6:	93 e0       	ldi	r25, 0x03	; 3
    2ca8:	ed b7       	in	r30, 0x3d	; 61
    2caa:	fe b7       	in	r31, 0x3e	; 62
    2cac:	81 83       	std	Z+1, r24	; 0x01
    2cae:	92 83       	std	Z+2, r25	; 0x02
    2cb0:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	08 95       	ret
			break;

		case TG_BAD_NUMBER_FORMAT: 
			printf_P(PSTR("Bad Number Format: %s\n"), textbuf); 
    2cba:	00 d0       	rcall	.+0      	; 0x2cbc <_cfg_print_status+0x48>
    2cbc:	0f 92       	push	r0
    2cbe:	88 ee       	ldi	r24, 0xE8	; 232
    2cc0:	93 e0       	ldi	r25, 0x03	; 3
    2cc2:	09 c0       	rjmp	.+18     	; 0x2cd6 <_cfg_print_status+0x62>
			break;

		case TG_UNRECOGNIZED_COMMAND: 
			printf_P(PSTR("Unrecognized Command: %s\n"), textbuf); 
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <_cfg_print_status+0x52>
    2cc6:	0f 92       	push	r0
    2cc8:	8e ec       	ldi	r24, 0xCE	; 206
    2cca:	93 e0       	ldi	r25, 0x03	; 3
    2ccc:	04 c0       	rjmp	.+8      	; 0x2cd6 <_cfg_print_status+0x62>
			break;

		case TG_FLOATING_POINT_ERROR: 
			printf_P(PSTR("Floating Point Error: %s\n"), textbuf); 
    2cce:	00 d0       	rcall	.+0      	; 0x2cd0 <_cfg_print_status+0x5c>
    2cd0:	0f 92       	push	r0
    2cd2:	84 eb       	ldi	r24, 0xB4	; 180
    2cd4:	93 e0       	ldi	r25, 0x03	; 3
    2cd6:	ed b7       	in	r30, 0x3d	; 61
    2cd8:	fe b7       	in	r31, 0x3e	; 62
    2cda:	81 83       	std	Z+1, r24	; 0x01
    2cdc:	92 83       	std	Z+2, r25	; 0x02
    2cde:	63 83       	std	Z+3, r22	; 0x03
    2ce0:	74 83       	std	Z+4, r23	; 0x04
    2ce2:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	08 95       	ret
			break;

		case TG_ARC_ERROR:
			printf_P(PSTR("Illegal Arc Statement: %s\n"), textbuf); 
    2cf0:	00 d0       	rcall	.+0      	; 0x2cf2 <_cfg_print_status+0x7e>
    2cf2:	0f 92       	push	r0
    2cf4:	89 e9       	ldi	r24, 0x99	; 153
    2cf6:	93 e0       	ldi	r25, 0x03	; 3
    2cf8:	ed b7       	in	r30, 0x3d	; 61
    2cfa:	fe b7       	in	r31, 0x3e	; 62
    2cfc:	81 83       	std	Z+1, r24	; 0x01
    2cfe:	92 83       	std	Z+2, r25	; 0x02
    2d00:	63 83       	std	Z+3, r22	; 0x03
    2d02:	74 83       	std	Z+4, r23	; 0x04
    2d04:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	08 95       	ret

00002d12 <_cfg_dump_axis>:
		_cfg_dump_axis(axis);
	}
}

void _cfg_dump_axis(uint8_t	axis)
{
    2d12:	ef 92       	push	r14
    2d14:	ff 92       	push	r15
    2d16:	0f 93       	push	r16
    2d18:	1f 93       	push	r17
	printf_P(PSTR("%S Axis Configuration Values\n"),(PGM_P)pgm_read_word(&cfgMsgs[axis]));
    2d1a:	e8 2e       	mov	r14, r24
    2d1c:	ff 24       	eor	r15, r15
    2d1e:	87 01       	movw	r16, r14
    2d20:	00 0f       	add	r16, r16
    2d22:	11 1f       	adc	r17, r17
    2d24:	f8 01       	movw	r30, r16
    2d26:	ed 5b       	subi	r30, 0xBD	; 189
    2d28:	fd 4f       	sbci	r31, 0xFD	; 253
    2d2a:	25 91       	lpm	r18, Z+
    2d2c:	34 91       	lpm	r19, Z+
    2d2e:	00 d0       	rcall	.+0      	; 0x2d30 <_cfg_dump_axis+0x1e>
    2d30:	0f 92       	push	r0
    2d32:	88 e3       	ldi	r24, 0x38	; 56
    2d34:	96 e0       	ldi	r25, 0x06	; 6
    2d36:	ad b7       	in	r26, 0x3d	; 61
    2d38:	be b7       	in	r27, 0x3e	; 62
    2d3a:	11 96       	adiw	r26, 0x01	; 1
    2d3c:	8d 93       	st	X+, r24
    2d3e:	9c 93       	st	X, r25
    2d40:	12 97       	sbiw	r26, 0x02	; 2
    2d42:	13 96       	adiw	r26, 0x03	; 3
    2d44:	2d 93       	st	X+, r18
    2d46:	3c 93       	st	X, r19
    2d48:	14 97       	sbiw	r26, 0x04	; 4
    2d4a:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
	printf_P(PSTR("  seek_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).seek_steps_sec);
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	96 e0       	ldi	r25, 0x06	; 6
    2d52:	ed b7       	in	r30, 0x3d	; 61
    2d54:	fe b7       	in	r31, 0x3e	; 62
    2d56:	81 83       	std	Z+1, r24	; 0x01
    2d58:	92 83       	std	Z+2, r25	; 0x02
    2d5a:	0e 0d       	add	r16, r14
    2d5c:	1f 1d       	adc	r17, r15
    2d5e:	83 e0       	ldi	r24, 0x03	; 3
    2d60:	00 0f       	add	r16, r16
    2d62:	11 1f       	adc	r17, r17
    2d64:	8a 95       	dec	r24
    2d66:	e1 f7       	brne	.-8      	; 0x2d60 <_cfg_dump_axis+0x4e>
    2d68:	0c 5b       	subi	r16, 0xBC	; 188
    2d6a:	1b 4d       	sbci	r17, 0xDB	; 219
    2d6c:	d8 01       	movw	r26, r16
    2d6e:	51 96       	adiw	r26, 0x11	; 17
    2d70:	8d 91       	ld	r24, X+
    2d72:	9c 91       	ld	r25, X
    2d74:	52 97       	sbiw	r26, 0x12	; 18
    2d76:	83 83       	std	Z+3, r24	; 0x03
    2d78:	94 83       	std	Z+4, r25	; 0x04
    2d7a:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
	printf_P(PSTR("  feed_steps_sec:  %4d    steps / second (whole steps)\n"), CFG(axis).feed_steps_sec);
    2d7e:	88 ec       	ldi	r24, 0xC8	; 200
    2d80:	95 e0       	ldi	r25, 0x05	; 5
    2d82:	ed b7       	in	r30, 0x3d	; 61
    2d84:	fe b7       	in	r31, 0x3e	; 62
    2d86:	81 83       	std	Z+1, r24	; 0x01
    2d88:	92 83       	std	Z+2, r25	; 0x02
    2d8a:	d8 01       	movw	r26, r16
    2d8c:	53 96       	adiw	r26, 0x13	; 19
    2d8e:	8d 91       	ld	r24, X+
    2d90:	9c 91       	ld	r25, X
    2d92:	54 97       	sbiw	r26, 0x14	; 20
    2d94:	83 83       	std	Z+3, r24	; 0x03
    2d96:	94 83       	std	Z+4, r25	; 0x04
    2d98:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
	printf_P(PSTR("  microsteps:      %4d    microsteps / whole step\n"), CFG(axis).microstep);
    2d9c:	ed b7       	in	r30, 0x3d	; 61
    2d9e:	fe b7       	in	r31, 0x3e	; 62
    2da0:	31 96       	adiw	r30, 0x01	; 1
    2da2:	85 e9       	ldi	r24, 0x95	; 149
    2da4:	95 e0       	ldi	r25, 0x05	; 5
    2da6:	ad b7       	in	r26, 0x3d	; 61
    2da8:	be b7       	in	r27, 0x3e	; 62
    2daa:	11 96       	adiw	r26, 0x01	; 1
    2dac:	8d 93       	st	X+, r24
    2dae:	9c 93       	st	X, r25
    2db0:	12 97       	sbiw	r26, 0x02	; 2
    2db2:	d8 01       	movw	r26, r16
    2db4:	1e 96       	adiw	r26, 0x0e	; 14
    2db6:	8c 91       	ld	r24, X
    2db8:	82 83       	std	Z+2, r24	; 0x02
    2dba:	13 82       	std	Z+3, r1	; 0x03
    2dbc:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
	printf_P(PSTR("  degree_per_step: %7.2f degrees / step (whole steps)\n"), CFG(axis).degree_per_step);
    2dc0:	0f 92       	push	r0
    2dc2:	0f 92       	push	r0
    2dc4:	8e e5       	ldi	r24, 0x5E	; 94
    2dc6:	95 e0       	ldi	r25, 0x05	; 5
    2dc8:	ed b7       	in	r30, 0x3d	; 61
    2dca:	fe b7       	in	r31, 0x3e	; 62
    2dcc:	81 83       	std	Z+1, r24	; 0x01
    2dce:	92 83       	std	Z+2, r25	; 0x02
    2dd0:	f8 01       	movw	r30, r16
    2dd2:	85 89       	ldd	r24, Z+21	; 0x15
    2dd4:	96 89       	ldd	r25, Z+22	; 0x16
    2dd6:	a7 89       	ldd	r26, Z+23	; 0x17
    2dd8:	b0 8d       	ldd	r27, Z+24	; 0x18
    2dda:	ed b7       	in	r30, 0x3d	; 61
    2ddc:	fe b7       	in	r31, 0x3e	; 62
    2dde:	83 83       	std	Z+3, r24	; 0x03
    2de0:	94 83       	std	Z+4, r25	; 0x04
    2de2:	a5 83       	std	Z+5, r26	; 0x05
    2de4:	b6 83       	std	Z+6, r27	; 0x06
    2de6:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
	printf_P(PSTR("  mm_revolution:   %7.2f millimeters / revolution\n"), CFG(axis).mm_per_rev);
    2dea:	8b e2       	ldi	r24, 0x2B	; 43
    2dec:	95 e0       	ldi	r25, 0x05	; 5
    2dee:	ad b7       	in	r26, 0x3d	; 61
    2df0:	be b7       	in	r27, 0x3e	; 62
    2df2:	11 96       	adiw	r26, 0x01	; 1
    2df4:	8d 93       	st	X+, r24
    2df6:	9c 93       	st	X, r25
    2df8:	12 97       	sbiw	r26, 0x02	; 2
    2dfa:	f8 01       	movw	r30, r16
    2dfc:	81 8d       	ldd	r24, Z+25	; 0x19
    2dfe:	92 8d       	ldd	r25, Z+26	; 0x1a
    2e00:	a3 8d       	ldd	r26, Z+27	; 0x1b
    2e02:	b4 8d       	ldd	r27, Z+28	; 0x1c
    2e04:	ed b7       	in	r30, 0x3d	; 61
    2e06:	fe b7       	in	r31, 0x3e	; 62
    2e08:	83 83       	std	Z+3, r24	; 0x03
    2e0a:	94 83       	std	Z+4, r25	; 0x04
    2e0c:	a5 83       	std	Z+5, r26	; 0x05
    2e0e:	b6 83       	std	Z+6, r27	; 0x06
    2e10:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
	printf_P(PSTR("  mm_travel:       %7.2f millimeters total travel\n"), CFG(axis).mm_travel);
    2e14:	88 ef       	ldi	r24, 0xF8	; 248
    2e16:	94 e0       	ldi	r25, 0x04	; 4
    2e18:	ad b7       	in	r26, 0x3d	; 61
    2e1a:	be b7       	in	r27, 0x3e	; 62
    2e1c:	11 96       	adiw	r26, 0x01	; 1
    2e1e:	8d 93       	st	X+, r24
    2e20:	9c 93       	st	X, r25
    2e22:	12 97       	sbiw	r26, 0x02	; 2
    2e24:	f8 01       	movw	r30, r16
    2e26:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e28:	96 8d       	ldd	r25, Z+30	; 0x1e
    2e2a:	a7 8d       	ldd	r26, Z+31	; 0x1f
    2e2c:	b0 a1       	ldd	r27, Z+32	; 0x20
    2e2e:	ed b7       	in	r30, 0x3d	; 61
    2e30:	fe b7       	in	r31, 0x3e	; 62
    2e32:	83 83       	std	Z+3, r24	; 0x03
    2e34:	94 83       	std	Z+4, r25	; 0x04
    2e36:	a5 83       	std	Z+5, r26	; 0x05
    2e38:	b6 83       	std	Z+6, r27	; 0x06
    2e3a:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
	printf_P(PSTR("  limit_enable:    %4d    1=enabled, 0=disabled\n"), CFG(axis).limit_enable);
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	ed b7       	in	r30, 0x3d	; 61
    2e44:	fe b7       	in	r31, 0x3e	; 62
    2e46:	31 96       	adiw	r30, 0x01	; 1
    2e48:	87 ec       	ldi	r24, 0xC7	; 199
    2e4a:	94 e0       	ldi	r25, 0x04	; 4
    2e4c:	ad b7       	in	r26, 0x3d	; 61
    2e4e:	be b7       	in	r27, 0x3e	; 62
    2e50:	11 96       	adiw	r26, 0x01	; 1
    2e52:	8d 93       	st	X+, r24
    2e54:	9c 93       	st	X, r25
    2e56:	12 97       	sbiw	r26, 0x02	; 2
    2e58:	d8 01       	movw	r26, r16
    2e5a:	95 96       	adiw	r26, 0x25	; 37
    2e5c:	8c 91       	ld	r24, X
    2e5e:	82 83       	std	Z+2, r24	; 0x02
    2e60:	13 82       	std	Z+3, r1	; 0x03
    2e62:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
	printf_P(PSTR("  low_pwr_idle:    %4d    1=enabled, 0=disabled\n"), CFG(axis).low_pwr_idle);
    2e66:	ed b7       	in	r30, 0x3d	; 61
    2e68:	fe b7       	in	r31, 0x3e	; 62
    2e6a:	31 96       	adiw	r30, 0x01	; 1
    2e6c:	86 e9       	ldi	r24, 0x96	; 150
    2e6e:	94 e0       	ldi	r25, 0x04	; 4
    2e70:	ad b7       	in	r26, 0x3d	; 61
    2e72:	be b7       	in	r27, 0x3e	; 62
    2e74:	11 96       	adiw	r26, 0x01	; 1
    2e76:	8d 93       	st	X+, r24
    2e78:	9c 93       	st	X, r25
    2e7a:	12 97       	sbiw	r26, 0x02	; 2
    2e7c:	d8 01       	movw	r26, r16
    2e7e:	1f 96       	adiw	r26, 0x0f	; 15
    2e80:	8c 91       	ld	r24, X
    2e82:	82 83       	std	Z+2, r24	; 0x02
    2e84:	13 82       	std	Z+3, r1	; 0x03
    2e86:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
	printf_P(PSTR("  polarity:        %4d    1=inverted, 0=normal\n"), CFG(axis).polarity);
    2e8a:	ed b7       	in	r30, 0x3d	; 61
    2e8c:	fe b7       	in	r31, 0x3e	; 62
    2e8e:	31 96       	adiw	r30, 0x01	; 1
    2e90:	86 e6       	ldi	r24, 0x66	; 102
    2e92:	94 e0       	ldi	r25, 0x04	; 4
    2e94:	ad b7       	in	r26, 0x3d	; 61
    2e96:	be b7       	in	r27, 0x3e	; 62
    2e98:	11 96       	adiw	r26, 0x01	; 1
    2e9a:	8d 93       	st	X+, r24
    2e9c:	9c 93       	st	X, r25
    2e9e:	12 97       	sbiw	r26, 0x02	; 2
    2ea0:	d8 01       	movw	r26, r16
    2ea2:	50 96       	adiw	r26, 0x10	; 16
    2ea4:	8c 91       	ld	r24, X
    2ea6:	82 83       	std	Z+2, r24	; 0x02
    2ea8:	13 82       	std	Z+3, r1	; 0x03
    2eaa:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
	printf_P(PSTR(" (steps_per_mm:    %7.2f microsteps / millimeter)\n\n"), CFG(axis).steps_per_mm);
    2eae:	0f 92       	push	r0
    2eb0:	0f 92       	push	r0
    2eb2:	82 e3       	ldi	r24, 0x32	; 50
    2eb4:	94 e0       	ldi	r25, 0x04	; 4
    2eb6:	ed b7       	in	r30, 0x3d	; 61
    2eb8:	fe b7       	in	r31, 0x3e	; 62
    2eba:	81 83       	std	Z+1, r24	; 0x01
    2ebc:	92 83       	std	Z+2, r25	; 0x02
    2ebe:	f8 01       	movw	r30, r16
    2ec0:	81 a1       	ldd	r24, Z+33	; 0x21
    2ec2:	92 a1       	ldd	r25, Z+34	; 0x22
    2ec4:	a3 a1       	ldd	r26, Z+35	; 0x23
    2ec6:	b4 a1       	ldd	r27, Z+36	; 0x24
    2ec8:	ed b7       	in	r30, 0x3d	; 61
    2eca:	fe b7       	in	r31, 0x3e	; 62
    2ecc:	83 83       	std	Z+3, r24	; 0x03
    2ece:	94 83       	std	Z+4, r25	; 0x04
    2ed0:	a5 83       	std	Z+5, r26	; 0x05
    2ed2:	b6 83       	std	Z+6, r27	; 0x06
    2ed4:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
    2ed8:	8d b7       	in	r24, 0x3d	; 61
    2eda:	9e b7       	in	r25, 0x3e	; 62
    2edc:	06 96       	adiw	r24, 0x06	; 6
    2ede:	8d bf       	out	0x3d, r24	; 61
    2ee0:	9e bf       	out	0x3e, r25	; 62
}
    2ee2:	1f 91       	pop	r17
    2ee4:	0f 91       	pop	r16
    2ee6:	ff 90       	pop	r15
    2ee8:	ef 90       	pop	r14
    2eea:	08 95       	ret

00002eec <cfg_dump>:
	cfgMsgZaxis,
	cfgMsgAaxis
};

void cfg_dump()
{
    2eec:	1f 93       	push	r17
	printf_P(PSTR("\n***** CONFIGURATION [version %d] ****\n"), cfg.config_version);
    2eee:	00 d0       	rcall	.+0      	; 0x2ef0 <cfg_dump+0x4>
    2ef0:	0f 92       	push	r0
    2ef2:	ed b7       	in	r30, 0x3d	; 61
    2ef4:	fe b7       	in	r31, 0x3e	; 62
    2ef6:	31 96       	adiw	r30, 0x01	; 1
    2ef8:	8c ef       	ldi	r24, 0xFC	; 252
    2efa:	96 e0       	ldi	r25, 0x06	; 6
    2efc:	ad b7       	in	r26, 0x3d	; 61
    2efe:	be b7       	in	r27, 0x3e	; 62
    2f00:	11 96       	adiw	r26, 0x01	; 1
    2f02:	8d 93       	st	X+, r24
    2f04:	9c 93       	st	X, r25
    2f06:	12 97       	sbiw	r26, 0x02	; 2
    2f08:	80 91 44 24 	lds	r24, 0x2444
    2f0c:	82 83       	std	Z+2, r24	; 0x02
    2f0e:	13 82       	std	Z+3, r1	; 0x03
    2f10:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
    2f14:	0f 90       	pop	r0
    2f16:	0f 90       	pop	r0
    2f18:	85 ed       	ldi	r24, 0xD5	; 213
    2f1a:	96 e0       	ldi	r25, 0x06	; 6
    2f1c:	ed b7       	in	r30, 0x3d	; 61
    2f1e:	fe b7       	in	r31, 0x3e	; 62
    2f20:	81 83       	std	Z+1, r24	; 0x01
    2f22:	92 83       	std	Z+2, r25	; 0x02
    2f24:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
    2f28:	00 d0       	rcall	.+0      	; 0x2f2a <cfg_dump+0x3e>
    2f2a:	0f 92       	push	r0
    2f2c:	8b ea       	ldi	r24, 0xAB	; 171
    2f2e:	96 e0       	ldi	r25, 0x06	; 6
    2f30:	ad b7       	in	r26, 0x3d	; 61
    2f32:	be b7       	in	r27, 0x3e	; 62
    2f34:	11 96       	adiw	r26, 0x01	; 1
    2f36:	8d 93       	st	X+, r24
    2f38:	9c 93       	st	X, r25
    2f3a:	12 97       	sbiw	r26, 0x02	; 2
    2f3c:	80 91 46 24 	lds	r24, 0x2446
    2f40:	90 91 47 24 	lds	r25, 0x2447
    2f44:	a0 91 48 24 	lds	r26, 0x2448
    2f48:	b0 91 49 24 	lds	r27, 0x2449
    2f4c:	ed b7       	in	r30, 0x3d	; 61
    2f4e:	fe b7       	in	r31, 0x3e	; 62
    2f50:	83 83       	std	Z+3, r24	; 0x03
    2f52:	94 83       	std	Z+4, r25	; 0x04
    2f54:	a5 83       	std	Z+5, r26	; 0x05
    2f56:	b6 83       	std	Z+6, r27	; 0x06
    2f58:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
    2f5c:	81 e8       	ldi	r24, 0x81	; 129
    2f5e:	96 e0       	ldi	r25, 0x06	; 6
    2f60:	ad b7       	in	r26, 0x3d	; 61
    2f62:	be b7       	in	r27, 0x3e	; 62
    2f64:	11 96       	adiw	r26, 0x01	; 1
    2f66:	8d 93       	st	X+, r24
    2f68:	9c 93       	st	X, r25
    2f6a:	12 97       	sbiw	r26, 0x02	; 2
    2f6c:	80 91 4e 24 	lds	r24, 0x244E
    2f70:	90 91 4f 24 	lds	r25, 0x244F
    2f74:	a0 91 50 24 	lds	r26, 0x2450
    2f78:	b0 91 51 24 	lds	r27, 0x2451
    2f7c:	ed b7       	in	r30, 0x3d	; 61
    2f7e:	fe b7       	in	r31, 0x3e	; 62
    2f80:	83 83       	std	Z+3, r24	; 0x03
    2f82:	94 83       	std	Z+4, r25	; 0x04
    2f84:	a5 83       	std	Z+5, r26	; 0x05
    2f86:	b6 83       	std	Z+6, r27	; 0x06
    2f88:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);
    2f8c:	86 e5       	ldi	r24, 0x56	; 86
    2f8e:	96 e0       	ldi	r25, 0x06	; 6
    2f90:	ad b7       	in	r26, 0x3d	; 61
    2f92:	be b7       	in	r27, 0x3e	; 62
    2f94:	11 96       	adiw	r26, 0x01	; 1
    2f96:	8d 93       	st	X+, r24
    2f98:	9c 93       	st	X, r25
    2f9a:	12 97       	sbiw	r26, 0x02	; 2
    2f9c:	80 91 4a 24 	lds	r24, 0x244A
    2fa0:	90 91 4b 24 	lds	r25, 0x244B
    2fa4:	a0 91 4c 24 	lds	r26, 0x244C
    2fa8:	b0 91 4d 24 	lds	r27, 0x244D
    2fac:	ed b7       	in	r30, 0x3d	; 61
    2fae:	fe b7       	in	r31, 0x3e	; 62
    2fb0:	83 83       	std	Z+3, r24	; 0x03
    2fb2:	94 83       	std	Z+4, r25	; 0x04
    2fb4:	a5 83       	std	Z+5, r26	; 0x05
    2fb6:	b6 83       	std	Z+6, r27	; 0x06
    2fb8:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
    2fbc:	10 e0       	ldi	r17, 0x00	; 0
    2fbe:	8d b7       	in	r24, 0x3d	; 61
    2fc0:	9e b7       	in	r25, 0x3e	; 62
    2fc2:	06 96       	adiw	r24, 0x06	; 6
    2fc4:	8d bf       	out	0x3d, r24	; 61
    2fc6:	9e bf       	out	0x3e, r25	; 62

	for (uint8_t axis = 0; axis <= A_AXIS; axis++) {
		_cfg_dump_axis(axis);
    2fc8:	81 2f       	mov	r24, r17
    2fca:	0e 94 89 16 	call	0x2d12	; 0x2d12 <_cfg_dump_axis>
	printf_P(PSTR("G-code Model Configuration Values ---\n"));
	printf_P(PSTR("  mm_per_arc_segment: %5.3f mm / segment\n"), cfg.mm_per_arc_segment);
	printf_P(PSTR(" (default_seek_rate:  %5.3f mm / second)\n"), cfg.default_seek_rate);
	printf_P(PSTR(" (default_feed_rate:  %5.3f mm / second)\n\n"), cfg.default_feed_rate);

	for (uint8_t axis = 0; axis <= A_AXIS; axis++) {
    2fce:	1f 5f       	subi	r17, 0xFF	; 255
    2fd0:	14 30       	cpi	r17, 0x04	; 4
    2fd2:	d1 f7       	brne	.-12     	; 0x2fc8 <cfg_dump+0xdc>
		_cfg_dump_axis(axis);
	}
}
    2fd4:	1f 91       	pop	r17
    2fd6:	08 95       	ret

00002fd8 <cfg_write>:
 */

void cfg_write()
{
//	eeprom_put_char(0, CONFIG_VERSION);
	memcpy_to_eeprom_with_checksum(0, (char*)&cfg, sizeof(struct cfgStructGlobal));
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	64 e4       	ldi	r22, 0x44	; 68
    2fde:	74 e2       	ldi	r23, 0x24	; 36
    2fe0:	4e e6       	ldi	r20, 0x6E	; 110
    2fe2:	50 e0       	ldi	r21, 0x00	; 0
    2fe4:	0e 94 55 2b 	call	0x56aa	; 0x56aa <memcpy_to_eeprom_with_checksum>
}
    2fe8:	08 95       	ret

00002fea <cfg_read>:
 * cfg_read() - read config data from EEPROM into the config struct 
 */

int cfg_read()
{
	uint8_t version = eeprom_get_char(0);	// Check version-byte of eeprom
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	0e 94 a7 2a 	call	0x554e	; 0x554e <eeprom_get_char>

	if (version != CONFIG_VERSION) {		// Read config-record and check checksum
    2ff2:	84 36       	cpi	r24, 0x64	; 100
    2ff4:	19 f0       	breq	.+6      	; 0x2ffc <cfg_read+0x12>
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	0d c0       	rjmp	.+26     	; 0x3016 <cfg_read+0x2c>
		return(FALSE); 
	} 
  	if (!(memcpy_from_eeprom_with_checksum
    2ffc:	84 e4       	ldi	r24, 0x44	; 68
    2ffe:	94 e2       	ldi	r25, 0x24	; 36
    3000:	60 e0       	ldi	r22, 0x00	; 0
    3002:	70 e0       	ldi	r23, 0x00	; 0
    3004:	4e e6       	ldi	r20, 0x6E	; 110
    3006:	50 e0       	ldi	r21, 0x00	; 0
    3008:	0e 94 b1 2a 	call	0x5562	; 0x5562 <memcpy_from_eeprom_with_checksum>
    300c:	00 97       	sbiw	r24, 0x00	; 0
    300e:	11 f0       	breq	.+4      	; 0x3014 <cfg_read+0x2a>
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	9c 01       	movw	r18, r24
		((char*)&cfg, 0, sizeof(struct cfgStructGlobal)))) {
    	return(FALSE);
  	}
  	return(TRUE);
}
    3016:	c9 01       	movw	r24, r18
    3018:	08 95       	ret

0000301a <cfg_parse>:
 *		y_mm_revolution = 1.27	(mm per revolution of the Y axis)
 *		ymmr=1.27				(mm per revolution of the Y axis)
 */

int cfg_parse(char *text)
{
    301a:	cf 92       	push	r12
    301c:	df 92       	push	r13
    301e:	ef 92       	push	r14
    3020:	ff 92       	push	r15
    3022:	1f 93       	push	r17
    3024:	df 93       	push	r29
    3026:	cf 93       	push	r28
    3028:	0f 92       	push	r0
    302a:	0f 92       	push	r0
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
    3030:	7c 01       	movw	r14, r24
	char c;
	char *val = 0;				// pointer to normalized value 
	char *end = 0;				// pointer to end of value
    3032:	19 82       	std	Y+1, r1	; 0x01
    3034:	1a 82       	std	Y+2, r1	; 0x02
    3036:	cc 24       	eor	r12, r12
    3038:	dd 24       	eor	r13, r13
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	2b c0       	rjmp	.+86     	; 0x3096 <cfg_parse+0x7c>
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
		if (c == '=') {							// handle separator
    3040:	9d 33       	cpi	r25, 0x3D	; 61
    3042:	49 f4       	brne	.+18     	; 0x3056 <cfg_parse+0x3c>
			text[j++] = 0;						// terminate tag at separator
    3044:	f7 01       	movw	r30, r14
    3046:	e2 0f       	add	r30, r18
    3048:	f1 1d       	adc	r31, r1
    304a:	10 82       	st	Z, r1
    304c:	2f 5f       	subi	r18, 0xFF	; 255
			val = &text[j];						// new string starts at value
    304e:	67 01       	movw	r12, r14
    3050:	c2 0e       	add	r12, r18
    3052:	d1 1c       	adc	r13, r1
    3054:	20 c0       	rjmp	.+64     	; 0x3096 <cfg_parse+0x7c>
		} else if ( (c == '-') || 				// pass special characters
    3056:	9d 32       	cpi	r25, 0x2D	; 45
    3058:	c9 f0       	breq	.+50     	; 0x308c <cfg_parse+0x72>
    305a:	9b 32       	cpi	r25, 0x2B	; 43
    305c:	b9 f0       	breq	.+46     	; 0x308c <cfg_parse+0x72>
    305e:	9e 32       	cpi	r25, 0x2E	; 46
    3060:	a9 f0       	breq	.+42     	; 0x308c <cfg_parse+0x72>
    3062:	9f 33       	cpi	r25, 0x3F	; 63
    3064:	99 f0       	breq	.+38     	; 0x308c <cfg_parse+0x72>
    3066:	98 32       	cpi	r25, 0x28	; 40
    3068:	89 f0       	breq	.+34     	; 0x308c <cfg_parse+0x72>
					(c == '+') || 
					(c == '.') || 
					(c == '?') || 
					(c == '(')) { 
			text[j++] = c;
		} else if (c >= 'a' && c <= 'z') {		// convert lower to upper
    306a:	89 2f       	mov	r24, r25
    306c:	81 56       	subi	r24, 0x61	; 97
    306e:	8a 31       	cpi	r24, 0x1A	; 26
    3070:	28 f4       	brcc	.+10     	; 0x307c <cfg_parse+0x62>
			text[j++] = c-'a'+'A';
    3072:	f7 01       	movw	r30, r14
    3074:	e2 0f       	add	r30, r18
    3076:	f1 1d       	adc	r31, r1
    3078:	90 52       	subi	r25, 0x20	; 32
    307a:	0b c0       	rjmp	.+22     	; 0x3092 <cfg_parse+0x78>
		} else if (c >= 'A' && c <= 'Z') {		// pass upper case letters
    307c:	89 2f       	mov	r24, r25
    307e:	81 54       	subi	r24, 0x41	; 65
    3080:	8a 31       	cpi	r24, 0x1A	; 26
    3082:	20 f0       	brcs	.+8      	; 0x308c <cfg_parse+0x72>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
    3084:	89 2f       	mov	r24, r25
    3086:	80 53       	subi	r24, 0x30	; 48
    3088:	8a 30       	cpi	r24, 0x0A	; 10
    308a:	28 f4       	brcc	.+10     	; 0x3096 <cfg_parse+0x7c>
			text[j++] = c;
    308c:	f7 01       	movw	r30, r14
    308e:	e2 0f       	add	r30, r18
    3090:	f1 1d       	adc	r31, r1
    3092:	90 83       	st	Z, r25
    3094:	2f 5f       	subi	r18, 0xFF	; 255
	uint8_t i = 0;				// buffer read index (buf must be < 256 chars)
	uint8_t j = 0;				// buffer write index
	uint8_t	axis = 0;			// axis index

	// normalize and split text in place
	while ((c = text[i++]) != 0) {
    3096:	f7 01       	movw	r30, r14
    3098:	e3 0f       	add	r30, r19
    309a:	f1 1d       	adc	r31, r1
    309c:	90 81       	ld	r25, Z
    309e:	3f 5f       	subi	r19, 0xFF	; 255
    30a0:	99 23       	and	r25, r25
    30a2:	71 f6       	brne	.-100    	; 0x3040 <cfg_parse+0x26>
			text[j++] = c;
		} else if (c >= '0' && c <= '9') {		// pass numbers
			text[j++] = c;
		}
	}
	text[j++] = 0;								// terminate line
    30a4:	f7 01       	movw	r30, r14
    30a6:	e2 0f       	add	r30, r18
    30a8:	f1 1d       	adc	r31, r1
    30aa:	10 82       	st	Z, r1
	end = &text[j];								// needed for string-to-double
    30ac:	2f 5f       	subi	r18, 0xFF	; 255
    30ae:	c7 01       	movw	r24, r14
    30b0:	82 0f       	add	r24, r18
    30b2:	91 1d       	adc	r25, r1
    30b4:	89 83       	std	Y+1, r24	; 0x01
    30b6:	9a 83       	std	Y+2, r25	; 0x02

	// pick off tag characters starting with first character
	cfg.status = TG_OK;
    30b8:	10 92 45 24 	sts	0x2445, r1
	switch (text[0]) {
    30bc:	f7 01       	movw	r30, r14
    30be:	80 81       	ld	r24, Z
    30c0:	81 35       	cpi	r24, 0x51	; 81
    30c2:	d1 f0       	breq	.+52     	; 0x30f8 <cfg_parse+0xde>
    30c4:	82 35       	cpi	r24, 0x52	; 82
    30c6:	60 f4       	brcc	.+24     	; 0x30e0 <cfg_parse+0xc6>
    30c8:	81 34       	cpi	r24, 0x41	; 65
    30ca:	59 f1       	breq	.+86     	; 0x3122 <cfg_parse+0x108>
    30cc:	82 34       	cpi	r24, 0x42	; 66
    30ce:	28 f4       	brcc	.+10     	; 0x30da <cfg_parse+0xc0>
    30d0:	88 32       	cpi	r24, 0x28	; 40
    30d2:	11 f1       	breq	.+68     	; 0x3118 <cfg_parse+0xfe>
    30d4:	8f 33       	cpi	r24, 0x3F	; 63
    30d6:	39 f5       	brne	.+78     	; 0x3126 <cfg_parse+0x10c>
    30d8:	0c c0       	rjmp	.+24     	; 0x30f2 <cfg_parse+0xd8>
    30da:	8d 34       	cpi	r24, 0x4D	; 77
    30dc:	21 f5       	brne	.+72     	; 0x3126 <cfg_parse+0x10c>
    30de:	0e c0       	rjmp	.+28     	; 0x30fc <cfg_parse+0xe2>
    30e0:	89 35       	cpi	r24, 0x59	; 89
    30e2:	29 f0       	breq	.+10     	; 0x30ee <cfg_parse+0xd4>
    30e4:	8a 35       	cpi	r24, 0x5A	; 90
    30e6:	d9 f0       	breq	.+54     	; 0x311e <cfg_parse+0x104>
    30e8:	88 35       	cpi	r24, 0x58	; 88
    30ea:	e9 f4       	brne	.+58     	; 0x3126 <cfg_parse+0x10c>
    30ec:	1f c0       	rjmp	.+62     	; 0x312c <cfg_parse+0x112>
    30ee:	11 e0       	ldi	r17, 0x01	; 1
    30f0:	1e c0       	rjmp	.+60     	; 0x312e <cfg_parse+0x114>
		case '?': cfg_dump(); status (TG_OK); break;
    30f2:	0e 94 76 17 	call	0x2eec	; 0x2eec <cfg_dump>
    30f6:	10 c0       	rjmp	.+32     	; 0x3118 <cfg_parse+0xfe>
		case '(': status (TG_OK);	break;			// ignore comment lines
		case 'Q': status (TG_QUIT); break;
    30f8:	83 e0       	ldi	r24, 0x03	; 3
    30fa:	16 c0       	rjmp	.+44     	; 0x3128 <cfg_parse+0x10e>
		case 'M': cfg.mm_per_arc_segment = strtod(val, &end); 
    30fc:	c6 01       	movw	r24, r12
    30fe:	be 01       	movw	r22, r28
    3100:	6f 5f       	subi	r22, 0xFF	; 255
    3102:	7f 4f       	sbci	r23, 0xFF	; 255
    3104:	0e 94 7d 41 	call	0x82fa	; 0x82fa <strtod>
    3108:	60 93 46 24 	sts	0x2446, r22
    310c:	70 93 47 24 	sts	0x2447, r23
    3110:	80 93 48 24 	sts	0x2448, r24
    3114:	90 93 49 24 	sts	0x2449, r25
				  status(TG_OK); 
    3118:	10 92 45 24 	sts	0x2445, r1
    311c:	07 c0       	rjmp	.+14     	; 0x312c <cfg_parse+0x112>
				  break;
    311e:	12 e0       	ldi	r17, 0x02	; 2
    3120:	06 c0       	rjmp	.+12     	; 0x312e <cfg_parse+0x114>

		case 'X': axis = X_AXIS; break;
		case 'Y': axis = Y_AXIS; break;
		case 'Z': axis = Z_AXIS; break;
    3122:	13 e0       	ldi	r17, 0x03	; 3
    3124:	04 c0       	rjmp	.+8      	; 0x312e <cfg_parse+0x114>
		case 'A': axis = A_AXIS; break;

		default: status (TG_UNRECOGNIZED_COMMAND); 	// error return
    3126:	87 e0       	ldi	r24, 0x07	; 7
    3128:	80 93 45 24 	sts	0x2445, r24
    312c:	10 e0       	ldi	r17, 0x00	; 0
	}
	if (cfg.status == TG_OK) {
    312e:	80 91 45 24 	lds	r24, 0x2445
    3132:	88 23       	and	r24, r24
    3134:	09 f0       	breq	.+2      	; 0x3138 <cfg_parse+0x11e>
    3136:	ee c0       	rjmp	.+476    	; 0x3314 <cfg_parse+0x2fa>
		status(TG_OK);							// pre-emptive setting
    3138:	10 92 45 24 	sts	0x2445, r1
		switch (text[1]) {
    313c:	f7 01       	movw	r30, r14
    313e:	81 81       	ldd	r24, Z+1	; 0x01
    3140:	8c 34       	cpi	r24, 0x4C	; 76
    3142:	09 f4       	brne	.+2      	; 0x3146 <cfg_parse+0x12c>
    3144:	b8 c0       	rjmp	.+368    	; 0x32b6 <cfg_parse+0x29c>
    3146:	8d 34       	cpi	r24, 0x4D	; 77
    3148:	30 f4       	brcc	.+12     	; 0x3156 <cfg_parse+0x13c>
    314a:	84 34       	cpi	r24, 0x44	; 68
    314c:	a9 f1       	breq	.+106    	; 0x31b8 <cfg_parse+0x19e>
    314e:	86 34       	cpi	r24, 0x46	; 70
    3150:	09 f0       	breq	.+2      	; 0x3154 <cfg_parse+0x13a>
    3152:	dd c0       	rjmp	.+442    	; 0x330e <cfg_parse+0x2f4>
    3154:	1d c0       	rjmp	.+58     	; 0x3190 <cfg_parse+0x176>
    3156:	80 35       	cpi	r24, 0x50	; 80
    3158:	09 f4       	brne	.+2      	; 0x315c <cfg_parse+0x142>
    315a:	47 c0       	rjmp	.+142    	; 0x31ea <cfg_parse+0x1d0>
    315c:	83 35       	cpi	r24, 0x53	; 83
    315e:	21 f0       	breq	.+8      	; 0x3168 <cfg_parse+0x14e>
    3160:	8d 34       	cpi	r24, 0x4D	; 77
    3162:	09 f0       	breq	.+2      	; 0x3166 <cfg_parse+0x14c>
    3164:	d4 c0       	rjmp	.+424    	; 0x330e <cfg_parse+0x2f4>
    3166:	58 c0       	rjmp	.+176    	; 0x3218 <cfg_parse+0x1fe>
			case 'S': CFG(axis).seek_steps_sec = (uint16_t)atoi(val); break;
    3168:	c6 01       	movw	r24, r12
    316a:	0e 94 eb 42 	call	0x85d6	; 0x85d6 <atoi>
    316e:	21 2f       	mov	r18, r17
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	f9 01       	movw	r30, r18
    3174:	ee 0f       	add	r30, r30
    3176:	ff 1f       	adc	r31, r31
    3178:	e2 0f       	add	r30, r18
    317a:	f3 1f       	adc	r31, r19
    317c:	53 e0       	ldi	r21, 0x03	; 3
    317e:	ee 0f       	add	r30, r30
    3180:	ff 1f       	adc	r31, r31
    3182:	5a 95       	dec	r21
    3184:	e1 f7       	brne	.-8      	; 0x317e <cfg_parse+0x164>
    3186:	ec 5b       	subi	r30, 0xBC	; 188
    3188:	fb 4d       	sbci	r31, 0xDB	; 219
    318a:	81 8b       	std	Z+17, r24	; 0x11
    318c:	92 8b       	std	Z+18, r25	; 0x12
    318e:	c2 c0       	rjmp	.+388    	; 0x3314 <cfg_parse+0x2fa>
			case 'F': CFG(axis).feed_steps_sec = (uint16_t)atoi(val); break;
    3190:	c6 01       	movw	r24, r12
    3192:	0e 94 eb 42 	call	0x85d6	; 0x85d6 <atoi>
    3196:	21 2f       	mov	r18, r17
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	f9 01       	movw	r30, r18
    319c:	ee 0f       	add	r30, r30
    319e:	ff 1f       	adc	r31, r31
    31a0:	e2 0f       	add	r30, r18
    31a2:	f3 1f       	adc	r31, r19
    31a4:	23 e0       	ldi	r18, 0x03	; 3
    31a6:	ee 0f       	add	r30, r30
    31a8:	ff 1f       	adc	r31, r31
    31aa:	2a 95       	dec	r18
    31ac:	e1 f7       	brne	.-8      	; 0x31a6 <cfg_parse+0x18c>
    31ae:	ec 5b       	subi	r30, 0xBC	; 188
    31b0:	fb 4d       	sbci	r31, 0xDB	; 219
    31b2:	83 8b       	std	Z+19, r24	; 0x13
    31b4:	94 8b       	std	Z+20, r25	; 0x14
    31b6:	ae c0       	rjmp	.+348    	; 0x3314 <cfg_parse+0x2fa>
			case 'D': CFG(axis).degree_per_step = strtod(val, &end); break;
    31b8:	c6 01       	movw	r24, r12
    31ba:	be 01       	movw	r22, r28
    31bc:	6f 5f       	subi	r22, 0xFF	; 255
    31be:	7f 4f       	sbci	r23, 0xFF	; 255
    31c0:	0e 94 7d 41 	call	0x82fa	; 0x82fa <strtod>
    31c4:	21 2f       	mov	r18, r17
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	f9 01       	movw	r30, r18
    31ca:	ee 0f       	add	r30, r30
    31cc:	ff 1f       	adc	r31, r31
    31ce:	e2 0f       	add	r30, r18
    31d0:	f3 1f       	adc	r31, r19
    31d2:	b3 e0       	ldi	r27, 0x03	; 3
    31d4:	ee 0f       	add	r30, r30
    31d6:	ff 1f       	adc	r31, r31
    31d8:	ba 95       	dec	r27
    31da:	e1 f7       	brne	.-8      	; 0x31d4 <cfg_parse+0x1ba>
    31dc:	ec 5b       	subi	r30, 0xBC	; 188
    31de:	fb 4d       	sbci	r31, 0xDB	; 219
    31e0:	65 8b       	std	Z+21, r22	; 0x15
    31e2:	76 8b       	std	Z+22, r23	; 0x16
    31e4:	87 8b       	std	Z+23, r24	; 0x17
    31e6:	90 8f       	std	Z+24, r25	; 0x18
    31e8:	95 c0       	rjmp	.+298    	; 0x3314 <cfg_parse+0x2fa>
			case 'P': CFG(axis).polarity = (uint8_t)atoi(val);
    31ea:	c6 01       	movw	r24, r12
    31ec:	0e 94 eb 42 	call	0x85d6	; 0x85d6 <atoi>
    31f0:	68 2f       	mov	r22, r24
    31f2:	81 2f       	mov	r24, r17
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	fc 01       	movw	r30, r24
    31f8:	ee 0f       	add	r30, r30
    31fa:	ff 1f       	adc	r31, r31
    31fc:	e8 0f       	add	r30, r24
    31fe:	f9 1f       	adc	r31, r25
    3200:	73 e0       	ldi	r23, 0x03	; 3
    3202:	ee 0f       	add	r30, r30
    3204:	ff 1f       	adc	r31, r31
    3206:	7a 95       	dec	r23
    3208:	e1 f7       	brne	.-8      	; 0x3202 <cfg_parse+0x1e8>
    320a:	ec 5b       	subi	r30, 0xBC	; 188
    320c:	fb 4d       	sbci	r31, 0xDB	; 219
    320e:	60 8b       	std	Z+16, r22	; 0x10
					  st_set_polarity(axis, CFG(axis).polarity);
    3210:	81 2f       	mov	r24, r17
    3212:	0e 94 0f 23 	call	0x461e	; 0x461e <st_set_polarity>
    3216:	7e c0       	rjmp	.+252    	; 0x3314 <cfg_parse+0x2fa>
					  break;

			case 'M': 
				if (text[2] == 'I') {
    3218:	f7 01       	movw	r30, r14
    321a:	82 81       	ldd	r24, Z+2	; 0x02
    321c:	89 34       	cpi	r24, 0x49	; 73
    321e:	99 f4       	brne	.+38     	; 0x3246 <cfg_parse+0x22c>
					CFG(axis).microstep = (uint8_t)atoi(val); break;
    3220:	c6 01       	movw	r24, r12
    3222:	0e 94 eb 42 	call	0x85d6	; 0x85d6 <atoi>
    3226:	21 2f       	mov	r18, r17
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	f9 01       	movw	r30, r18
    322c:	ee 0f       	add	r30, r30
    322e:	ff 1f       	adc	r31, r31
    3230:	e2 0f       	add	r30, r18
    3232:	f3 1f       	adc	r31, r19
    3234:	53 e0       	ldi	r21, 0x03	; 3
    3236:	ee 0f       	add	r30, r30
    3238:	ff 1f       	adc	r31, r31
    323a:	5a 95       	dec	r21
    323c:	e1 f7       	brne	.-8      	; 0x3236 <cfg_parse+0x21c>
    323e:	ec 5b       	subi	r30, 0xBC	; 188
    3240:	fb 4d       	sbci	r31, 0xDB	; 219
    3242:	86 87       	std	Z+14, r24	; 0x0e
    3244:	67 c0       	rjmp	.+206    	; 0x3314 <cfg_parse+0x2fa>
				} else if (text[3] == 'R') {
    3246:	f7 01       	movw	r30, r14
    3248:	83 81       	ldd	r24, Z+3	; 0x03
    324a:	82 35       	cpi	r24, 0x52	; 82
    324c:	c9 f4       	brne	.+50     	; 0x3280 <cfg_parse+0x266>
					CFG(axis).mm_per_rev = strtod(val, &end); break;
    324e:	c6 01       	movw	r24, r12
    3250:	be 01       	movw	r22, r28
    3252:	6f 5f       	subi	r22, 0xFF	; 255
    3254:	7f 4f       	sbci	r23, 0xFF	; 255
    3256:	0e 94 7d 41 	call	0x82fa	; 0x82fa <strtod>
    325a:	21 2f       	mov	r18, r17
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	f9 01       	movw	r30, r18
    3260:	ee 0f       	add	r30, r30
    3262:	ff 1f       	adc	r31, r31
    3264:	e2 0f       	add	r30, r18
    3266:	f3 1f       	adc	r31, r19
    3268:	13 e0       	ldi	r17, 0x03	; 3
    326a:	ee 0f       	add	r30, r30
    326c:	ff 1f       	adc	r31, r31
    326e:	1a 95       	dec	r17
    3270:	e1 f7       	brne	.-8      	; 0x326a <cfg_parse+0x250>
    3272:	ec 5b       	subi	r30, 0xBC	; 188
    3274:	fb 4d       	sbci	r31, 0xDB	; 219
    3276:	61 8f       	std	Z+25, r22	; 0x19
    3278:	72 8f       	std	Z+26, r23	; 0x1a
    327a:	83 8f       	std	Z+27, r24	; 0x1b
    327c:	94 8f       	std	Z+28, r25	; 0x1c
    327e:	4a c0       	rjmp	.+148    	; 0x3314 <cfg_parse+0x2fa>
				} else if (text[3] == 'T') {
    3280:	84 35       	cpi	r24, 0x54	; 84
    3282:	c9 f4       	brne	.+50     	; 0x32b6 <cfg_parse+0x29c>
					CFG(axis).mm_travel = strtod(val, &end); break;
    3284:	c6 01       	movw	r24, r12
    3286:	be 01       	movw	r22, r28
    3288:	6f 5f       	subi	r22, 0xFF	; 255
    328a:	7f 4f       	sbci	r23, 0xFF	; 255
    328c:	0e 94 7d 41 	call	0x82fa	; 0x82fa <strtod>
    3290:	21 2f       	mov	r18, r17
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	f9 01       	movw	r30, r18
    3296:	ee 0f       	add	r30, r30
    3298:	ff 1f       	adc	r31, r31
    329a:	e2 0f       	add	r30, r18
    329c:	f3 1f       	adc	r31, r19
    329e:	a3 e0       	ldi	r26, 0x03	; 3
    32a0:	ee 0f       	add	r30, r30
    32a2:	ff 1f       	adc	r31, r31
    32a4:	aa 95       	dec	r26
    32a6:	e1 f7       	brne	.-8      	; 0x32a0 <cfg_parse+0x286>
    32a8:	ec 5b       	subi	r30, 0xBC	; 188
    32aa:	fb 4d       	sbci	r31, 0xDB	; 219
    32ac:	65 8f       	std	Z+29, r22	; 0x1d
    32ae:	76 8f       	std	Z+30, r23	; 0x1e
    32b0:	87 8f       	std	Z+31, r24	; 0x1f
    32b2:	90 a3       	std	Z+32, r25	; 0x20
    32b4:	2f c0       	rjmp	.+94     	; 0x3314 <cfg_parse+0x2fa>
				}
			case 'L': 
				if (text[2] == 'O') {
    32b6:	f7 01       	movw	r30, r14
    32b8:	82 81       	ldd	r24, Z+2	; 0x02
    32ba:	8f 34       	cpi	r24, 0x4F	; 79
    32bc:	99 f4       	brne	.+38     	; 0x32e4 <cfg_parse+0x2ca>
					CFG(axis).low_pwr_idle = (uint8_t)atoi(val); break;
    32be:	c6 01       	movw	r24, r12
    32c0:	0e 94 eb 42 	call	0x85d6	; 0x85d6 <atoi>
    32c4:	21 2f       	mov	r18, r17
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	f9 01       	movw	r30, r18
    32ca:	ee 0f       	add	r30, r30
    32cc:	ff 1f       	adc	r31, r31
    32ce:	e2 0f       	add	r30, r18
    32d0:	f3 1f       	adc	r31, r19
    32d2:	53 e0       	ldi	r21, 0x03	; 3
    32d4:	ee 0f       	add	r30, r30
    32d6:	ff 1f       	adc	r31, r31
    32d8:	5a 95       	dec	r21
    32da:	e1 f7       	brne	.-8      	; 0x32d4 <cfg_parse+0x2ba>
    32dc:	ec 5b       	subi	r30, 0xBC	; 188
    32de:	fb 4d       	sbci	r31, 0xDB	; 219
    32e0:	87 87       	std	Z+15, r24	; 0x0f
    32e2:	18 c0       	rjmp	.+48     	; 0x3314 <cfg_parse+0x2fa>
				} else if (text[2] == 'I') {
    32e4:	89 34       	cpi	r24, 0x49	; 73
    32e6:	99 f4       	brne	.+38     	; 0x330e <cfg_parse+0x2f4>
					CFG(axis).limit_enable = (uint8_t)atoi(val); break;
    32e8:	c6 01       	movw	r24, r12
    32ea:	0e 94 eb 42 	call	0x85d6	; 0x85d6 <atoi>
    32ee:	21 2f       	mov	r18, r17
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	f9 01       	movw	r30, r18
    32f4:	ee 0f       	add	r30, r30
    32f6:	ff 1f       	adc	r31, r31
    32f8:	e2 0f       	add	r30, r18
    32fa:	f3 1f       	adc	r31, r19
    32fc:	23 e0       	ldi	r18, 0x03	; 3
    32fe:	ee 0f       	add	r30, r30
    3300:	ff 1f       	adc	r31, r31
    3302:	2a 95       	dec	r18
    3304:	e1 f7       	brne	.-8      	; 0x32fe <cfg_parse+0x2e4>
    3306:	ec 5b       	subi	r30, 0xBC	; 188
    3308:	fb 4d       	sbci	r31, 0xDB	; 219
    330a:	85 a3       	std	Z+37, r24	; 0x25
    330c:	03 c0       	rjmp	.+6      	; 0x3314 <cfg_parse+0x2fa>
				}

			default: status (TG_UNRECOGNIZED_COMMAND);	// error return
    330e:	87 e0       	ldi	r24, 0x07	; 7
    3310:	80 93 45 24 	sts	0x2445, r24
		}
	}
	_cfg_print_status(cfg.status, text);
    3314:	80 91 45 24 	lds	r24, 0x2445
    3318:	b7 01       	movw	r22, r14
    331a:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <_cfg_print_status>
//	cfg_write();
	return (cfg.status);
}
    331e:	80 91 45 24 	lds	r24, 0x2445
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	0f 90       	pop	r0
    3326:	0f 90       	pop	r0
    3328:	cf 91       	pop	r28
    332a:	df 91       	pop	r29
    332c:	1f 91       	pop	r17
    332e:	ff 90       	pop	r15
    3330:	ef 90       	pop	r14
    3332:	df 90       	pop	r13
    3334:	cf 90       	pop	r12
    3336:	08 95       	ret

00003338 <cfg_test>:
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3338:	ef 92       	push	r14
    333a:	ff 92       	push	r15
    333c:	0f 93       	push	r16
    333e:	1f 93       	push	r17
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	a8 97       	sbiw	r28, 0x28	; 40
    334a:	cd bf       	out	0x3d, r28	; 61
    334c:	de bf       	out	0x3e, r29	; 62
    334e:	0b e4       	ldi	r16, 0x4B	; 75
    3350:	12 e0       	ldi	r17, 0x02	; 2
    3352:	a0 e0       	ldi	r26, 0x00	; 0
    3354:	b0 e0       	ldi	r27, 0x00	; 0
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
			text[j] = 0;							// terminate the string
    3356:	7e 01       	movw	r14, r28
    3358:	08 94       	sec
    335a:	e1 1c       	adc	r14, r1
    335c:	f1 1c       	adc	r15, r1
    335e:	02 c0       	rjmp	.+4      	; 0x3364 <cfg_test+0x2c>
z_microstep	= 2	 \n\
x_low_pwr_idle = 0 \n\
x_limit_enable=	0";

void cfg_test()
{
    3360:	0f 5f       	subi	r16, 0xFF	; 255
    3362:	1f 4f       	sbci	r17, 0xFF	; 255
	int j = 0;					// RAM buffer index (text)
	char c;

	// feed the parser one line at a time
	while (TRUE) {
		c = pgm_read_byte(&configs_P[i++]);
    3364:	f8 01       	movw	r30, r16
    3366:	84 91       	lpm	r24, Z+
		if (c == 0) {									// last line
    3368:	88 23       	and	r24, r24
    336a:	89 f4       	brne	.+34     	; 0x338e <cfg_test+0x56>
			text[j] = 0;
    336c:	ce 01       	movw	r24, r28
    336e:	01 96       	adiw	r24, 0x01	; 1
    3370:	a8 0f       	add	r26, r24
    3372:	b9 1f       	adc	r27, r25
    3374:	1c 92       	st	X, r1
			cfg_parse(text);
    3376:	0e 94 0d 18 	call	0x301a	; 0x301a <cfg_parse>
		} else if (c <= ' ') { 							// toss whitespace & ctrls
		} else {
			text[j++] = c;							// put characters into line
		}
	}
}
    337a:	a8 96       	adiw	r28, 0x28	; 40
    337c:	cd bf       	out	0x3d, r28	; 61
    337e:	de bf       	out	0x3e, r29	; 62
    3380:	cf 91       	pop	r28
    3382:	df 91       	pop	r29
    3384:	1f 91       	pop	r17
    3386:	0f 91       	pop	r16
    3388:	ff 90       	pop	r15
    338a:	ef 90       	pop	r14
    338c:	08 95       	ret
		c = pgm_read_byte(&configs_P[i++]);
		if (c == 0) {									// last line
			text[j] = 0;
			cfg_parse(text);
			break;			
		} else if ((c == '\r') || (c == '\n') || (c == ';')) {	// line complete
    338e:	8d 30       	cpi	r24, 0x0D	; 13
    3390:	21 f0       	breq	.+8      	; 0x339a <cfg_test+0x62>
    3392:	8a 30       	cpi	r24, 0x0A	; 10
    3394:	11 f0       	breq	.+4      	; 0x339a <cfg_test+0x62>
    3396:	8b 33       	cpi	r24, 0x3B	; 59
    3398:	49 f4       	brne	.+18     	; 0x33ac <cfg_test+0x74>
			text[j] = 0;							// terminate the string
    339a:	ae 0d       	add	r26, r14
    339c:	bf 1d       	adc	r27, r15
    339e:	1c 92       	st	X, r1
			cfg_parse(text);						// parse line 
    33a0:	c7 01       	movw	r24, r14
    33a2:	0e 94 0d 18 	call	0x301a	; 0x301a <cfg_parse>
    33a6:	a0 e0       	ldi	r26, 0x00	; 0
    33a8:	b0 e0       	ldi	r27, 0x00	; 0
    33aa:	da cf       	rjmp	.-76     	; 0x3360 <cfg_test+0x28>
			j = 0;			
		} else if (c <= ' ') { 							// toss whitespace & ctrls
    33ac:	81 32       	cpi	r24, 0x21	; 33
    33ae:	c0 f2       	brcs	.-80     	; 0x3360 <cfg_test+0x28>
		} else {
			text[j++] = c;							// put characters into line
    33b0:	f7 01       	movw	r30, r14
    33b2:	ea 0f       	add	r30, r26
    33b4:	fb 1f       	adc	r31, r27
    33b6:	80 83       	st	Z, r24
    33b8:	11 96       	adiw	r26, 0x01	; 1
    33ba:	d2 cf       	rjmp	.-92     	; 0x3360 <cfg_test+0x28>

000033bc <en_init>:

#include "encoder.h"

void en_init(void) {

}
    33bc:	08 95       	ret

000033be <xmega_init_clocks>:
	while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable 
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // Switch to PLL clock
 */

void xmega_init_clocks(void) 
{ 
    33be:	0f 93       	push	r16
    33c0:	df 93       	push	r29
    33c2:	cf 93       	push	r28
    33c4:	0f 92       	push	r0
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
	OSC.XOSCCTRL = 0x4B;	// 2-9 MHz crystal; 0.4-16 MHz XTAL w/16K CLK Start Up
    33ca:	8b e4       	ldi	r24, 0x4B	; 75
    33cc:	e0 e5       	ldi	r30, 0x50	; 80
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL = 0x08;        // enable external crystal oscillator 
    33d2:	88 e0       	ldi	r24, 0x08	; 8
    33d4:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
    33d8:	80 91 51 00 	lds	r24, 0x0051
    33dc:	83 ff       	sbrs	r24, 3
    33de:	fc cf       	rjmp	.-8      	; 0x33d8 <xmega_init_clocks+0x1a>
	OSC.PLLCTRL = 0xC4;		// XOSC is PLL Source; 4x Factor (32 MHz) 
    33e0:	84 ec       	ldi	r24, 0xC4	; 196
    33e2:	e0 e5       	ldi	r30, 0x50	; 80
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	85 83       	std	Z+5, r24	; 0x05
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
    33e8:	88 e1       	ldi	r24, 0x18	; 24
    33ea:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
    33ee:	80 91 51 00 	lds	r24, 0x0051
    33f2:	84 ff       	sbrs	r24, 4
    33f4:	fc cf       	rjmp	.-8      	; 0x33ee <xmega_init_clocks+0x30>

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    33f6:	8f b7       	in	r24, 0x3f	; 63
    33f8:	89 83       	std	Y+1, r24	; 0x01
    33fa:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    33fc:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    33fe:	24 e0       	ldi	r18, 0x04	; 4
    3400:	80 e4       	ldi	r24, 0x40	; 64
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	fc 01       	movw	r30, r24
    3406:	08 ed       	ldi	r16, 0xD8	; 216
    3408:	04 bf       	out	0x34, r16	; 52
    340a:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    340c:	89 81       	ldd	r24, Y+1	; 0x01
    340e:	8f bf       	out	0x3f, r24	; 63
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));		// wait for oscillator ready
	OSC.PLLCTRL = 0xC4;		// XOSC is PLL Source; 4x Factor (32 MHz) 
	OSC.CTRL = 0x18;        // Enable PLL & External Oscillator 
	while(!(OSC.STATUS & OSC_PLLRDY_bm));		// wait for PLL ready
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // switch to PLL clock
	OSC.CTRL &= ~OSC_RC2MEN_bm;					// disable internal 2 MHz clock
    3410:	80 91 50 00 	lds	r24, 0x0050
    3414:	8e 7f       	andi	r24, 0xFE	; 254
    3416:	80 93 50 00 	sts	0x0050, r24
}
    341a:	0f 90       	pop	r0
    341c:	cf 91       	pop	r28
    341e:	df 91       	pop	r29
    3420:	0f 91       	pop	r16
    3422:	08 95       	ret

00003424 <xmega_init>:
/*
 * xmega_init()
 */

void xmega_init(void) {
	xmega_init_clocks();
    3424:	0e 94 df 19 	call	0x33be	; 0x33be <xmega_init_clocks>
}
    3428:	08 95       	ret

0000342a <CCPWrite>:
 *  - address A pointer to the address to write to.
 *  - value   The value to put in to the register.
 */

void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    342a:	0f 93       	push	r16
    342c:	df 93       	push	r29
    342e:	cf 93       	push	r28
    3430:	0f 92       	push	r0
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION();
    3436:	2f b7       	in	r18, 0x3f	; 63
    3438:	29 83       	std	Y+1, r18	; 0x01
    343a:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    343c:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    343e:	fc 01       	movw	r30, r24
    3440:	08 ed       	ldi	r16, 0xD8	; 216
    3442:	04 bf       	out	0x34, r16	; 52
    3444:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION();
    3446:	89 81       	ldd	r24, Y+1	; 0x01
    3448:	8f bf       	out	0x3f, r24	; 63
#endif
}
    344a:	0f 90       	pop	r0
    344c:	cf 91       	pop	r28
    344e:	df 91       	pop	r29
    3450:	0f 91       	pop	r16
    3452:	08 95       	ret

00003454 <mc_motion_stop>:
 * mc_motion_stop() - stop all current motions
 */

void mc_motion_stop()
{
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    3454:	10 92 72 21 	sts	0x2172, r1
	ma.arc_state = MC_STATE_OFF;
    3458:	10 92 b4 24 	sts	0x24B4, r1
}
    345c:	08 95       	ret

0000345e <mc_dwell>:
/* 
 * mc_dwell() 
 */

void mc_dwell(uint32_t milliseconds) 
{
    345e:	af 92       	push	r10
    3460:	bf 92       	push	r11
    3462:	cf 92       	push	r12
    3464:	df 92       	push	r13
    3466:	ef 92       	push	r14
    3468:	ff 92       	push	r15
    346a:	0f 93       	push	r16
    346c:	1f 93       	push	r17
//	mv_synchronize();
	_delay_ms(milliseconds);
    346e:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__floatunsisf>
    3472:	5b 01       	movw	r10, r22
    3474:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	4a ef       	ldi	r20, 0xFA	; 250
    347c:	55 e4       	ldi	r21, 0x45	; 69
    347e:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    3482:	7b 01       	movw	r14, r22
    3484:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	40 e8       	ldi	r20, 0x80	; 128
    348c:	5f e3       	ldi	r21, 0x3F	; 63
    348e:	0e 94 72 3d 	call	0x7ae4	; 0x7ae4 <__cmpsf2>
    3492:	88 23       	and	r24, r24
    3494:	1c f4       	brge	.+6      	; 0x349c <mc_dwell+0x3e>
    3496:	61 e0       	ldi	r22, 0x01	; 1
    3498:	70 e0       	ldi	r23, 0x00	; 0
    349a:	24 c0       	rjmp	.+72     	; 0x34e4 <mc_dwell+0x86>
		__ticks = 1;
	else if (__tmp > 65535)
    349c:	c8 01       	movw	r24, r16
    349e:	b7 01       	movw	r22, r14
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	3f ef       	ldi	r19, 0xFF	; 255
    34a4:	4f e7       	ldi	r20, 0x7F	; 127
    34a6:	57 e4       	ldi	r21, 0x47	; 71
    34a8:	0e 94 62 3f 	call	0x7ec4	; 0x7ec4 <__gesf2>
    34ac:	18 16       	cp	r1, r24
    34ae:	b4 f4       	brge	.+44     	; 0x34dc <mc_dwell+0x7e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b0:	c6 01       	movw	r24, r12
    34b2:	b5 01       	movw	r22, r10
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	40 e2       	ldi	r20, 0x20	; 32
    34ba:	51 e4       	ldi	r21, 0x41	; 65
    34bc:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    34c0:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34c4:	80 e2       	ldi	r24, 0x20	; 32
    34c6:	93 e0       	ldi	r25, 0x03	; 3
    34c8:	05 c0       	rjmp	.+10     	; 0x34d4 <mc_dwell+0x76>
    34ca:	fc 01       	movw	r30, r24
    34cc:	31 97       	sbiw	r30, 0x01	; 1
    34ce:	f1 f7       	brne	.-4      	; 0x34cc <mc_dwell+0x6e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d0:	61 50       	subi	r22, 0x01	; 1
    34d2:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34d4:	61 15       	cp	r22, r1
    34d6:	71 05       	cpc	r23, r1
    34d8:	c1 f7       	brne	.-16     	; 0x34ca <mc_dwell+0x6c>
    34da:	07 c0       	rjmp	.+14     	; 0x34ea <mc_dwell+0x8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34dc:	c8 01       	movw	r24, r16
    34de:	b7 01       	movw	r22, r14
    34e0:	0e 94 e6 3d 	call	0x7bcc	; 0x7bcc <__fixunssfsi>
    34e4:	cb 01       	movw	r24, r22
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	f1 f7       	brne	.-4      	; 0x34e6 <mc_dwell+0x88>
}
    34ea:	1f 91       	pop	r17
    34ec:	0f 91       	pop	r16
    34ee:	ff 90       	pop	r15
    34f0:	ef 90       	pop	r14
    34f2:	df 90       	pop	r13
    34f4:	cf 90       	pop	r12
    34f6:	bf 90       	pop	r11
    34f8:	af 90       	pop	r10
    34fa:	08 95       	ret

000034fc <mc_go_home>:
 */

void mc_go_home()
{
//	st_go_home();
	clear_vector(mc.position); // By definition this is location [0, 0, 0]
    34fc:	8c e0       	ldi	r24, 0x0C	; 12
    34fe:	e3 e7       	ldi	r30, 0x73	; 115
    3500:	f1 e2       	ldi	r31, 0x21	; 33
    3502:	df 01       	movw	r26, r30
    3504:	1d 92       	st	X+, r1
    3506:	8a 95       	dec	r24
    3508:	e9 f7       	brne	.-6      	; 0x3504 <mc_go_home+0x8>
}
    350a:	08 95       	ret

0000350c <mc_init>:
 * mc_init() 
 */

void mc_init()
{
	clear_vector(mc.position);		// zero robot position
    350c:	8c e0       	ldi	r24, 0x0C	; 12
    350e:	e3 e7       	ldi	r30, 0x73	; 115
    3510:	f1 e2       	ldi	r31, 0x21	; 33
    3512:	df 01       	movw	r26, r30
    3514:	1d 92       	st	X+, r1
    3516:	8a 95       	dec	r24
    3518:	e9 f7       	brne	.-6      	; 0x3514 <mc_init+0x8>
	mc.line_state = MC_STATE_OFF;	// turn off the generators
    351a:	10 92 72 21 	sts	0x2172, r1
	ma.arc_state = MC_STATE_OFF;
    351e:	10 92 b4 24 	sts	0x24B4, r1
}
    3522:	08 95       	ret

00003524 <mc_line_continuation>:
 *
 *	This is a line generator that can be called multiple times until it can 
 *	successfully load the line into the move buffer.
 */
int mc_line_continuation() 
{
    3524:	af 92       	push	r10
    3526:	bf 92       	push	r11
    3528:	cf 92       	push	r12
    352a:	df 92       	push	r13
    352c:	ef 92       	push	r14
    352e:	ff 92       	push	r15
    3530:	0f 93       	push	r16
    3532:	1f 93       	push	r17
	if (mc.line_state == MC_STATE_OFF) {
    3534:	80 91 72 21 	lds	r24, 0x2172
    3538:	88 23       	and	r24, r24
    353a:	19 f4       	brne	.+6      	; 0x3542 <mc_line_continuation+0x1e>
    353c:	21 e0       	ldi	r18, 0x01	; 1
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	30 c0       	rjmp	.+96     	; 0x35a2 <mc_line_continuation+0x7e>
		return (TG_NOOP);				// return NULL for non-started line
	}
	mc.line_state = MC_STATE_RUNNING; // technically correct but not really needed
    3542:	82 e0       	ldi	r24, 0x02	; 2
    3544:	80 93 72 21 	sts	0x2172, r24
	if (mv_test_move_buffer_full()) { // this is where you would block
    3548:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <mv_test_move_buffer_full>
    354c:	88 23       	and	r24, r24
    354e:	19 f0       	breq	.+6      	; 0x3556 <mc_line_continuation+0x32>
    3550:	22 e0       	ldi	r18, 0x02	; 2
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	26 c0       	rjmp	.+76     	; 0x35a2 <mc_line_continuation+0x7e>
		return (TG_CONTINUE);
	}
	mv_queue_move_buffer(mc.steps[X_AXIS], mc.steps[Y_AXIS], mc.steps[Z_AXIS], mc.microseconds); 
    3556:	60 91 8b 21 	lds	r22, 0x218B
    355a:	70 91 8c 21 	lds	r23, 0x218C
    355e:	80 91 8d 21 	lds	r24, 0x218D
    3562:	90 91 8e 21 	lds	r25, 0x218E
    3566:	20 91 8f 21 	lds	r18, 0x218F
    356a:	30 91 90 21 	lds	r19, 0x2190
    356e:	40 91 91 21 	lds	r20, 0x2191
    3572:	50 91 92 21 	lds	r21, 0x2192
    3576:	e0 90 93 21 	lds	r14, 0x2193
    357a:	f0 90 94 21 	lds	r15, 0x2194
    357e:	00 91 95 21 	lds	r16, 0x2195
    3582:	10 91 96 21 	lds	r17, 0x2196
    3586:	a0 90 97 21 	lds	r10, 0x2197
    358a:	b0 90 98 21 	lds	r11, 0x2198
    358e:	c0 90 99 21 	lds	r12, 0x2199
    3592:	d0 90 9a 21 	lds	r13, 0x219A
    3596:	0e 94 2b 30 	call	0x6056	; 0x6056 <mv_queue_move_buffer>

	mc.line_state = MC_STATE_OFF;		// line is done. turn the generator off.
    359a:	10 92 72 21 	sts	0x2172, r1
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    35a2:	c9 01       	movw	r24, r18
    35a4:	1f 91       	pop	r17
    35a6:	0f 91       	pop	r16
    35a8:	ff 90       	pop	r15
    35aa:	ef 90       	pop	r14
    35ac:	df 90       	pop	r13
    35ae:	cf 90       	pop	r12
    35b0:	bf 90       	pop	r11
    35b2:	af 90       	pop	r10
    35b4:	08 95       	ret

000035b6 <mc_line_nonblock>:
/* 
 * mc_line_nonblock() - mc_line with non-blocking behavior
 */

int mc_line_nonblock(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    35b6:	2f 92       	push	r2
    35b8:	3f 92       	push	r3
    35ba:	4f 92       	push	r4
    35bc:	5f 92       	push	r5
    35be:	6f 92       	push	r6
    35c0:	7f 92       	push	r7
    35c2:	8f 92       	push	r8
    35c4:	9f 92       	push	r9
    35c6:	af 92       	push	r10
    35c8:	bf 92       	push	r11
    35ca:	cf 92       	push	r12
    35cc:	df 92       	push	r13
    35ce:	ef 92       	push	r14
    35d0:	ff 92       	push	r15
    35d2:	0f 93       	push	r16
    35d4:	1f 93       	push	r17
    35d6:	df 93       	push	r29
    35d8:	cf 93       	push	r28
    35da:	cd b7       	in	r28, 0x3d	; 61
    35dc:	de b7       	in	r29, 0x3e	; 62
    35de:	64 97       	sbiw	r28, 0x14	; 20
    35e0:	cd bf       	out	0x3d, r28	; 61
    35e2:	de bf       	out	0x3e, r29	; 62
    35e4:	2d 87       	std	Y+13, r18	; 0x0d
    35e6:	3e 87       	std	Y+14, r19	; 0x0e
    35e8:	4f 87       	std	Y+15, r20	; 0x0f
    35ea:	58 8b       	std	Y+16, r21	; 0x10
    35ec:	a9 8a       	std	Y+17, r10	; 0x11
    35ee:	ba 8a       	std	Y+18, r11	; 0x12
    35f0:	cb 8a       	std	Y+19, r12	; 0x13
    35f2:	dc 8a       	std	Y+20, r13	; 0x14
	mc.target[X_AXIS] = lround(x*CFG(X_AXIS).steps_per_mm);
    35f4:	20 91 65 24 	lds	r18, 0x2465
    35f8:	30 91 66 24 	lds	r19, 0x2466
    35fc:	40 91 67 24 	lds	r20, 0x2467
    3600:	50 91 68 24 	lds	r21, 0x2468
    3604:	29 87       	std	Y+9, r18	; 0x09
    3606:	3a 87       	std	Y+10, r19	; 0x0a
    3608:	4b 87       	std	Y+11, r20	; 0x0b
    360a:	5c 87       	std	Y+12, r21	; 0x0c
    360c:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    3610:	0e 94 04 40 	call	0x8008	; 0x8008 <lround>
    3614:	2b 01       	movw	r4, r22
    3616:	3c 01       	movw	r6, r24
    3618:	40 92 7f 21 	sts	0x217F, r4
    361c:	50 92 80 21 	sts	0x2180, r5
    3620:	60 92 81 21 	sts	0x2181, r6
    3624:	70 92 82 21 	sts	0x2182, r7
	mc.target[Y_AXIS] = lround(y*CFG(Y_AXIS).steps_per_mm);
    3628:	80 91 7d 24 	lds	r24, 0x247D
    362c:	90 91 7e 24 	lds	r25, 0x247E
    3630:	a0 91 7f 24 	lds	r26, 0x247F
    3634:	b0 91 80 24 	lds	r27, 0x2480
    3638:	8d 83       	std	Y+5, r24	; 0x05
    363a:	9e 83       	std	Y+6, r25	; 0x06
    363c:	af 83       	std	Y+7, r26	; 0x07
    363e:	b8 87       	std	Y+8, r27	; 0x08
    3640:	6d 85       	ldd	r22, Y+13	; 0x0d
    3642:	7e 85       	ldd	r23, Y+14	; 0x0e
    3644:	8f 85       	ldd	r24, Y+15	; 0x0f
    3646:	98 89       	ldd	r25, Y+16	; 0x10
    3648:	2d 81       	ldd	r18, Y+5	; 0x05
    364a:	3e 81       	ldd	r19, Y+6	; 0x06
    364c:	4f 81       	ldd	r20, Y+7	; 0x07
    364e:	58 85       	ldd	r21, Y+8	; 0x08
    3650:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    3654:	0e 94 04 40 	call	0x8008	; 0x8008 <lround>
    3658:	5b 01       	movw	r10, r22
    365a:	6c 01       	movw	r12, r24
    365c:	a0 92 83 21 	sts	0x2183, r10
    3660:	b0 92 84 21 	sts	0x2184, r11
    3664:	c0 92 85 21 	sts	0x2185, r12
    3668:	d0 92 86 21 	sts	0x2186, r13
	mc.target[Z_AXIS] = lround(z*CFG(Z_AXIS).steps_per_mm); 
    366c:	20 91 95 24 	lds	r18, 0x2495
    3670:	30 91 96 24 	lds	r19, 0x2496
    3674:	40 91 97 24 	lds	r20, 0x2497
    3678:	50 91 98 24 	lds	r21, 0x2498
    367c:	29 83       	std	Y+1, r18	; 0x01
    367e:	3a 83       	std	Y+2, r19	; 0x02
    3680:	4b 83       	std	Y+3, r20	; 0x03
    3682:	5c 83       	std	Y+4, r21	; 0x04
    3684:	c8 01       	movw	r24, r16
    3686:	b7 01       	movw	r22, r14
    3688:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    368c:	0e 94 04 40 	call	0x8008	; 0x8008 <lround>
    3690:	9b 01       	movw	r18, r22
    3692:	ac 01       	movw	r20, r24
    3694:	20 93 87 21 	sts	0x2187, r18
    3698:	30 93 88 21 	sts	0x2188, r19
    369c:	40 93 89 21 	sts	0x2189, r20
    36a0:	50 93 8a 21 	sts	0x218A, r21

	mc.steps[X_AXIS] = mc.target[X_AXIS]-mc.position[X_AXIS];
    36a4:	80 91 73 21 	lds	r24, 0x2173
    36a8:	90 91 74 21 	lds	r25, 0x2174
    36ac:	a0 91 75 21 	lds	r26, 0x2175
    36b0:	b0 91 76 21 	lds	r27, 0x2176
    36b4:	83 01       	movw	r16, r6
    36b6:	72 01       	movw	r14, r4
    36b8:	e8 1a       	sub	r14, r24
    36ba:	f9 0a       	sbc	r15, r25
    36bc:	0a 0b       	sbc	r16, r26
    36be:	1b 0b       	sbc	r17, r27
    36c0:	e0 92 8b 21 	sts	0x218B, r14
    36c4:	f0 92 8c 21 	sts	0x218C, r15
    36c8:	00 93 8d 21 	sts	0x218D, r16
    36cc:	10 93 8e 21 	sts	0x218E, r17
	mc.steps[Y_AXIS] = mc.target[Y_AXIS]-mc.position[Y_AXIS];
    36d0:	80 91 77 21 	lds	r24, 0x2177
    36d4:	90 91 78 21 	lds	r25, 0x2178
    36d8:	a0 91 79 21 	lds	r26, 0x2179
    36dc:	b0 91 7a 21 	lds	r27, 0x217A
    36e0:	a8 1a       	sub	r10, r24
    36e2:	b9 0a       	sbc	r11, r25
    36e4:	ca 0a       	sbc	r12, r26
    36e6:	db 0a       	sbc	r13, r27
    36e8:	a0 92 8f 21 	sts	0x218F, r10
    36ec:	b0 92 90 21 	sts	0x2190, r11
    36f0:	c0 92 91 21 	sts	0x2191, r12
    36f4:	d0 92 92 21 	sts	0x2192, r13
	mc.steps[Z_AXIS] = mc.target[Z_AXIS]-mc.position[Z_AXIS];
    36f8:	80 91 7b 21 	lds	r24, 0x217B
    36fc:	90 91 7c 21 	lds	r25, 0x217C
    3700:	a0 91 7d 21 	lds	r26, 0x217D
    3704:	b0 91 7e 21 	lds	r27, 0x217E
    3708:	19 01       	movw	r2, r18
    370a:	2a 01       	movw	r4, r20
    370c:	28 1a       	sub	r2, r24
    370e:	39 0a       	sbc	r3, r25
    3710:	4a 0a       	sbc	r4, r26
    3712:	5b 0a       	sbc	r5, r27
    3714:	20 92 93 21 	sts	0x2193, r2
    3718:	30 92 94 21 	sts	0x2194, r3
    371c:	40 92 95 21 	sts	0x2195, r4
    3720:	50 92 96 21 	sts	0x2196, r5

	if (invert_feed_rate) {
    3724:	89 28       	or	r8, r9
    3726:	59 f0       	breq	.+22     	; 0x373e <mc_line_nonblock+0x188>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    3728:	60 ec       	ldi	r22, 0xC0	; 192
    372a:	71 ee       	ldi	r23, 0xE1	; 225
    372c:	84 e6       	ldi	r24, 0x64	; 100
    372e:	9c e4       	ldi	r25, 0x4C	; 76
    3730:	29 89       	ldd	r18, Y+17	; 0x11
    3732:	3a 89       	ldd	r19, Y+18	; 0x12
    3734:	4b 89       	ldd	r20, Y+19	; 0x13
    3736:	5c 89       	ldd	r21, Y+20	; 0x14
    3738:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    373c:	4a c0       	rjmp	.+148    	; 0x37d2 <mc_line_nonblock+0x21c>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X_AXIS]/CFG(X_AXIS).steps_per_mm) + 
    373e:	c8 01       	movw	r24, r16
    3740:	b7 01       	movw	r22, r14
    3742:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    3746:	29 85       	ldd	r18, Y+9	; 0x09
    3748:	3a 85       	ldd	r19, Y+10	; 0x0a
    374a:	4b 85       	ldd	r20, Y+11	; 0x0b
    374c:	5c 85       	ldd	r21, Y+12	; 0x0c
    374e:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    3752:	0e 94 df 40 	call	0x81be	; 0x81be <square>
    3756:	3b 01       	movw	r6, r22
    3758:	4c 01       	movw	r8, r24
    375a:	c6 01       	movw	r24, r12
    375c:	b5 01       	movw	r22, r10
    375e:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    3762:	2d 81       	ldd	r18, Y+5	; 0x05
    3764:	3e 81       	ldd	r19, Y+6	; 0x06
    3766:	4f 81       	ldd	r20, Y+7	; 0x07
    3768:	58 85       	ldd	r21, Y+8	; 0x08
    376a:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    376e:	0e 94 df 40 	call	0x81be	; 0x81be <square>
    3772:	5b 01       	movw	r10, r22
    3774:	6c 01       	movw	r12, r24
    3776:	c2 01       	movw	r24, r4
    3778:	b1 01       	movw	r22, r2
    377a:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    377e:	29 81       	ldd	r18, Y+1	; 0x01
    3780:	3a 81       	ldd	r19, Y+2	; 0x02
    3782:	4b 81       	ldd	r20, Y+3	; 0x03
    3784:	5c 81       	ldd	r21, Y+4	; 0x04
    3786:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    378a:	0e 94 df 40 	call	0x81be	; 0x81be <square>
    378e:	7b 01       	movw	r14, r22
    3790:	8c 01       	movw	r16, r24
    3792:	c4 01       	movw	r24, r8
    3794:	b3 01       	movw	r22, r6
    3796:	a6 01       	movw	r20, r12
    3798:	95 01       	movw	r18, r10
    379a:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__addsf3>
    379e:	a8 01       	movw	r20, r16
    37a0:	97 01       	movw	r18, r14
    37a2:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__addsf3>
    37a6:	0e 94 a1 40 	call	0x8142	; 0x8142 <sqrt>
    37aa:	60 93 9b 21 	sts	0x219B, r22
    37ae:	70 93 9c 21 	sts	0x219C, r23
    37b2:	80 93 9d 21 	sts	0x219D, r24
    37b6:	90 93 9e 21 	sts	0x219E, r25
							   square(mc.steps[Y_AXIS]/CFG(Y_AXIS).steps_per_mm) + 
							   square(mc.steps[Z_AXIS]/CFG(Z_AXIS).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    37ba:	29 89       	ldd	r18, Y+17	; 0x11
    37bc:	3a 89       	ldd	r19, Y+18	; 0x12
    37be:	4b 89       	ldd	r20, Y+19	; 0x13
    37c0:	5c 89       	ldd	r21, Y+20	; 0x14
    37c2:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	34 e2       	ldi	r19, 0x24	; 36
    37ca:	44 e7       	ldi	r20, 0x74	; 116
    37cc:	59 e4       	ldi	r21, 0x49	; 73
    37ce:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    37d2:	0e 94 04 40 	call	0x8008	; 0x8008 <lround>
    37d6:	60 93 97 21 	sts	0x2197, r22
    37da:	70 93 98 21 	sts	0x2198, r23
    37de:	80 93 99 21 	sts	0x2199, r24
    37e2:	90 93 9a 21 	sts	0x219A, r25
	}
	mc.line_state = MC_STATE_NEW;
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	80 93 72 21 	sts	0x2172, r24
	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    37ec:	e3 e7       	ldi	r30, 0x73	; 115
    37ee:	f1 e2       	ldi	r31, 0x21	; 33
    37f0:	df 01       	movw	r26, r30
    37f2:	1c 96       	adiw	r26, 0x0c	; 12
    37f4:	8c e0       	ldi	r24, 0x0C	; 12
    37f6:	0d 90       	ld	r0, X+
    37f8:	01 92       	st	Z+, r0
    37fa:	81 50       	subi	r24, 0x01	; 1
    37fc:	e1 f7       	brne	.-8      	; 0x37f6 <mc_line_nonblock+0x240>
	return (mc_line_continuation());
    37fe:	0e 94 92 1a 	call	0x3524	; 0x3524 <mc_line_continuation>
}
    3802:	64 96       	adiw	r28, 0x14	; 20
    3804:	cd bf       	out	0x3d, r28	; 61
    3806:	de bf       	out	0x3e, r29	; 62
    3808:	cf 91       	pop	r28
    380a:	df 91       	pop	r29
    380c:	1f 91       	pop	r17
    380e:	0f 91       	pop	r16
    3810:	ff 90       	pop	r15
    3812:	ef 90       	pop	r14
    3814:	df 90       	pop	r13
    3816:	cf 90       	pop	r12
    3818:	bf 90       	pop	r11
    381a:	af 90       	pop	r10
    381c:	9f 90       	pop	r9
    381e:	8f 90       	pop	r8
    3820:	7f 90       	pop	r7
    3822:	6f 90       	pop	r6
    3824:	5f 90       	pop	r5
    3826:	4f 90       	pop	r4
    3828:	3f 90       	pop	r3
    382a:	2f 90       	pop	r2
    382c:	08 95       	ret

0000382e <mc_line>:
 *	Then the feed_rate means that the motion should be completed in 
 *	  1/feed_rate minutes
 */

int mc_line(double x, double y, double z, double feed_rate, int invert_feed_rate)
{
    382e:	2f 92       	push	r2
    3830:	3f 92       	push	r3
    3832:	4f 92       	push	r4
    3834:	5f 92       	push	r5
    3836:	6f 92       	push	r6
    3838:	7f 92       	push	r7
    383a:	8f 92       	push	r8
    383c:	9f 92       	push	r9
    383e:	af 92       	push	r10
    3840:	bf 92       	push	r11
    3842:	cf 92       	push	r12
    3844:	df 92       	push	r13
    3846:	ef 92       	push	r14
    3848:	ff 92       	push	r15
    384a:	0f 93       	push	r16
    384c:	1f 93       	push	r17
    384e:	df 93       	push	r29
    3850:	cf 93       	push	r28
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62
    3856:	6c 97       	sbiw	r28, 0x1c	; 28
    3858:	cd bf       	out	0x3d, r28	; 61
    385a:	de bf       	out	0x3e, r29	; 62
    385c:	2d 8b       	std	Y+21, r18	; 0x15
    385e:	3e 8b       	std	Y+22, r19	; 0x16
    3860:	4f 8b       	std	Y+23, r20	; 0x17
    3862:	58 8f       	std	Y+24, r21	; 0x18
    3864:	a9 8e       	std	Y+25, r10	; 0x19
    3866:	ba 8e       	std	Y+26, r11	; 0x1a
    3868:	cb 8e       	std	Y+27, r12	; 0x1b
    386a:	dc 8e       	std	Y+28, r13	; 0x1c
	mc.target[X_AXIS] = lround(x*CFG(X_AXIS).steps_per_mm);
    386c:	20 91 65 24 	lds	r18, 0x2465
    3870:	30 91 66 24 	lds	r19, 0x2466
    3874:	40 91 67 24 	lds	r20, 0x2467
    3878:	50 91 68 24 	lds	r21, 0x2468
    387c:	29 8b       	std	Y+17, r18	; 0x11
    387e:	3a 8b       	std	Y+18, r19	; 0x12
    3880:	4b 8b       	std	Y+19, r20	; 0x13
    3882:	5c 8b       	std	Y+20, r21	; 0x14
    3884:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    3888:	0e 94 04 40 	call	0x8008	; 0x8008 <lround>
    388c:	2b 01       	movw	r4, r22
    388e:	3c 01       	movw	r6, r24
    3890:	40 92 7f 21 	sts	0x217F, r4
    3894:	50 92 80 21 	sts	0x2180, r5
    3898:	60 92 81 21 	sts	0x2181, r6
    389c:	70 92 82 21 	sts	0x2182, r7
	mc.target[Y_AXIS] = lround(y*CFG(Y_AXIS).steps_per_mm);
    38a0:	80 91 7d 24 	lds	r24, 0x247D
    38a4:	90 91 7e 24 	lds	r25, 0x247E
    38a8:	a0 91 7f 24 	lds	r26, 0x247F
    38ac:	b0 91 80 24 	lds	r27, 0x2480
    38b0:	8d 87       	std	Y+13, r24	; 0x0d
    38b2:	9e 87       	std	Y+14, r25	; 0x0e
    38b4:	af 87       	std	Y+15, r26	; 0x0f
    38b6:	b8 8b       	std	Y+16, r27	; 0x10
    38b8:	6d 89       	ldd	r22, Y+21	; 0x15
    38ba:	7e 89       	ldd	r23, Y+22	; 0x16
    38bc:	8f 89       	ldd	r24, Y+23	; 0x17
    38be:	98 8d       	ldd	r25, Y+24	; 0x18
    38c0:	2d 85       	ldd	r18, Y+13	; 0x0d
    38c2:	3e 85       	ldd	r19, Y+14	; 0x0e
    38c4:	4f 85       	ldd	r20, Y+15	; 0x0f
    38c6:	58 89       	ldd	r21, Y+16	; 0x10
    38c8:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    38cc:	0e 94 04 40 	call	0x8008	; 0x8008 <lround>
    38d0:	5b 01       	movw	r10, r22
    38d2:	6c 01       	movw	r12, r24
    38d4:	a0 92 83 21 	sts	0x2183, r10
    38d8:	b0 92 84 21 	sts	0x2184, r11
    38dc:	c0 92 85 21 	sts	0x2185, r12
    38e0:	d0 92 86 21 	sts	0x2186, r13
	mc.target[Z_AXIS] = lround(z*CFG(Z_AXIS).steps_per_mm); 
    38e4:	20 91 95 24 	lds	r18, 0x2495
    38e8:	30 91 96 24 	lds	r19, 0x2496
    38ec:	40 91 97 24 	lds	r20, 0x2497
    38f0:	50 91 98 24 	lds	r21, 0x2498
    38f4:	29 87       	std	Y+9, r18	; 0x09
    38f6:	3a 87       	std	Y+10, r19	; 0x0a
    38f8:	4b 87       	std	Y+11, r20	; 0x0b
    38fa:	5c 87       	std	Y+12, r21	; 0x0c
    38fc:	c8 01       	movw	r24, r16
    38fe:	b7 01       	movw	r22, r14
    3900:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    3904:	0e 94 04 40 	call	0x8008	; 0x8008 <lround>
    3908:	9b 01       	movw	r18, r22
    390a:	ac 01       	movw	r20, r24
    390c:	20 93 87 21 	sts	0x2187, r18
    3910:	30 93 88 21 	sts	0x2188, r19
    3914:	40 93 89 21 	sts	0x2189, r20
    3918:	50 93 8a 21 	sts	0x218A, r21

	mc.steps[X_AXIS] = mc.target[X_AXIS]-mc.position[X_AXIS];
    391c:	80 91 73 21 	lds	r24, 0x2173
    3920:	90 91 74 21 	lds	r25, 0x2174
    3924:	a0 91 75 21 	lds	r26, 0x2175
    3928:	b0 91 76 21 	lds	r27, 0x2176
    392c:	83 01       	movw	r16, r6
    392e:	72 01       	movw	r14, r4
    3930:	e8 1a       	sub	r14, r24
    3932:	f9 0a       	sbc	r15, r25
    3934:	0a 0b       	sbc	r16, r26
    3936:	1b 0b       	sbc	r17, r27
    3938:	ed 82       	std	Y+5, r14	; 0x05
    393a:	fe 82       	std	Y+6, r15	; 0x06
    393c:	0f 83       	std	Y+7, r16	; 0x07
    393e:	18 87       	std	Y+8, r17	; 0x08
    3940:	e0 92 8b 21 	sts	0x218B, r14
    3944:	f0 92 8c 21 	sts	0x218C, r15
    3948:	00 93 8d 21 	sts	0x218D, r16
    394c:	10 93 8e 21 	sts	0x218E, r17
	mc.steps[Y_AXIS] = mc.target[Y_AXIS]-mc.position[Y_AXIS];
    3950:	80 91 77 21 	lds	r24, 0x2177
    3954:	90 91 78 21 	lds	r25, 0x2178
    3958:	a0 91 79 21 	lds	r26, 0x2179
    395c:	b0 91 7a 21 	lds	r27, 0x217A
    3960:	86 01       	movw	r16, r12
    3962:	75 01       	movw	r14, r10
    3964:	e8 1a       	sub	r14, r24
    3966:	f9 0a       	sbc	r15, r25
    3968:	0a 0b       	sbc	r16, r26
    396a:	1b 0b       	sbc	r17, r27
    396c:	e9 82       	std	Y+1, r14	; 0x01
    396e:	fa 82       	std	Y+2, r15	; 0x02
    3970:	0b 83       	std	Y+3, r16	; 0x03
    3972:	1c 83       	std	Y+4, r17	; 0x04
    3974:	e0 92 8f 21 	sts	0x218F, r14
    3978:	f0 92 90 21 	sts	0x2190, r15
    397c:	00 93 91 21 	sts	0x2191, r16
    3980:	10 93 92 21 	sts	0x2192, r17
	mc.steps[Z_AXIS] = mc.target[Z_AXIS]-mc.position[Z_AXIS];
    3984:	80 91 7b 21 	lds	r24, 0x217B
    3988:	90 91 7c 21 	lds	r25, 0x217C
    398c:	a0 91 7d 21 	lds	r26, 0x217D
    3990:	b0 91 7e 21 	lds	r27, 0x217E
    3994:	19 01       	movw	r2, r18
    3996:	2a 01       	movw	r4, r20
    3998:	28 1a       	sub	r2, r24
    399a:	39 0a       	sbc	r3, r25
    399c:	4a 0a       	sbc	r4, r26
    399e:	5b 0a       	sbc	r5, r27
    39a0:	20 92 93 21 	sts	0x2193, r2
    39a4:	30 92 94 21 	sts	0x2194, r3
    39a8:	40 92 95 21 	sts	0x2195, r4
    39ac:	50 92 96 21 	sts	0x2196, r5

	if (invert_feed_rate) {
    39b0:	89 28       	or	r8, r9
    39b2:	59 f0       	breq	.+22     	; 0x39ca <mc_line+0x19c>
		mc.microseconds = lround(ONE_MINUTE_OF_MICROSECONDS/feed_rate);
    39b4:	60 ec       	ldi	r22, 0xC0	; 192
    39b6:	71 ee       	ldi	r23, 0xE1	; 225
    39b8:	84 e6       	ldi	r24, 0x64	; 100
    39ba:	9c e4       	ldi	r25, 0x4C	; 76
    39bc:	29 8d       	ldd	r18, Y+25	; 0x19
    39be:	3a 8d       	ldd	r19, Y+26	; 0x1a
    39c0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    39c2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    39c4:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    39c8:	4e c0       	rjmp	.+156    	; 0x3a66 <mc_line+0x238>
	} else {  // Ask Phythagoras to estimate how many mm next move is going to take
 		mc.mm_of_travel = sqrt(square(mc.steps[X_AXIS]/CFG(X_AXIS).steps_per_mm) + 
    39ca:	6d 81       	ldd	r22, Y+5	; 0x05
    39cc:	7e 81       	ldd	r23, Y+6	; 0x06
    39ce:	8f 81       	ldd	r24, Y+7	; 0x07
    39d0:	98 85       	ldd	r25, Y+8	; 0x08
    39d2:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    39d6:	29 89       	ldd	r18, Y+17	; 0x11
    39d8:	3a 89       	ldd	r19, Y+18	; 0x12
    39da:	4b 89       	ldd	r20, Y+19	; 0x13
    39dc:	5c 89       	ldd	r21, Y+20	; 0x14
    39de:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    39e2:	0e 94 df 40 	call	0x81be	; 0x81be <square>
    39e6:	3b 01       	movw	r6, r22
    39e8:	4c 01       	movw	r8, r24
    39ea:	69 81       	ldd	r22, Y+1	; 0x01
    39ec:	7a 81       	ldd	r23, Y+2	; 0x02
    39ee:	8b 81       	ldd	r24, Y+3	; 0x03
    39f0:	9c 81       	ldd	r25, Y+4	; 0x04
    39f2:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    39f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    39f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    39fa:	4f 85       	ldd	r20, Y+15	; 0x0f
    39fc:	58 89       	ldd	r21, Y+16	; 0x10
    39fe:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    3a02:	0e 94 df 40 	call	0x81be	; 0x81be <square>
    3a06:	5b 01       	movw	r10, r22
    3a08:	6c 01       	movw	r12, r24
    3a0a:	c2 01       	movw	r24, r4
    3a0c:	b1 01       	movw	r22, r2
    3a0e:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    3a12:	29 85       	ldd	r18, Y+9	; 0x09
    3a14:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a16:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a18:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a1a:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    3a1e:	0e 94 df 40 	call	0x81be	; 0x81be <square>
    3a22:	7b 01       	movw	r14, r22
    3a24:	8c 01       	movw	r16, r24
    3a26:	c4 01       	movw	r24, r8
    3a28:	b3 01       	movw	r22, r6
    3a2a:	a6 01       	movw	r20, r12
    3a2c:	95 01       	movw	r18, r10
    3a2e:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__addsf3>
    3a32:	a8 01       	movw	r20, r16
    3a34:	97 01       	movw	r18, r14
    3a36:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__addsf3>
    3a3a:	0e 94 a1 40 	call	0x8142	; 0x8142 <sqrt>
    3a3e:	60 93 9b 21 	sts	0x219B, r22
    3a42:	70 93 9c 21 	sts	0x219C, r23
    3a46:	80 93 9d 21 	sts	0x219D, r24
    3a4a:	90 93 9e 21 	sts	0x219E, r25
							   square(mc.steps[Y_AXIS]/CFG(Y_AXIS).steps_per_mm) + 
							   square(mc.steps[Z_AXIS]/CFG(Z_AXIS).steps_per_mm));
		mc.microseconds = lround((mc.mm_of_travel/feed_rate)*1000000);
    3a4e:	29 8d       	ldd	r18, Y+25	; 0x19
    3a50:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3a52:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3a54:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3a56:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	34 e2       	ldi	r19, 0x24	; 36
    3a5e:	44 e7       	ldi	r20, 0x74	; 116
    3a60:	59 e4       	ldi	r21, 0x49	; 73
    3a62:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    3a66:	0e 94 04 40 	call	0x8008	; 0x8008 <lround>
    3a6a:	60 93 97 21 	sts	0x2197, r22
    3a6e:	70 93 98 21 	sts	0x2198, r23
    3a72:	80 93 99 21 	sts	0x2199, r24
    3a76:	90 93 9a 21 	sts	0x219A, r25
	}
    mv_queue_move_buffer(mc.steps[X_AXIS], mc.steps[Y_AXIS], mc.steps[Z_AXIS], mc.microseconds); 
    3a7a:	a0 90 97 21 	lds	r10, 0x2197
    3a7e:	b0 90 98 21 	lds	r11, 0x2198
    3a82:	c0 90 99 21 	lds	r12, 0x2199
    3a86:	d0 90 9a 21 	lds	r13, 0x219A
    3a8a:	6d 81       	ldd	r22, Y+5	; 0x05
    3a8c:	7e 81       	ldd	r23, Y+6	; 0x06
    3a8e:	8f 81       	ldd	r24, Y+7	; 0x07
    3a90:	98 85       	ldd	r25, Y+8	; 0x08
    3a92:	29 81       	ldd	r18, Y+1	; 0x01
    3a94:	3a 81       	ldd	r19, Y+2	; 0x02
    3a96:	4b 81       	ldd	r20, Y+3	; 0x03
    3a98:	5c 81       	ldd	r21, Y+4	; 0x04
    3a9a:	82 01       	movw	r16, r4
    3a9c:	71 01       	movw	r14, r2
    3a9e:	0e 94 2b 30 	call	0x6056	; 0x6056 <mv_queue_move_buffer>

	memcpy(mc.position, mc.target, sizeof(mc.target)); 	// record new robot position
    3aa2:	e3 e7       	ldi	r30, 0x73	; 115
    3aa4:	f1 e2       	ldi	r31, 0x21	; 33
    3aa6:	df 01       	movw	r26, r30
    3aa8:	1c 96       	adiw	r26, 0x0c	; 12
    3aaa:	8c e0       	ldi	r24, 0x0C	; 12
    3aac:	0d 90       	ld	r0, X+
    3aae:	01 92       	st	Z+, r0
    3ab0:	81 50       	subi	r24, 0x01	; 1
    3ab2:	e1 f7       	brne	.-8      	; 0x3aac <mc_line+0x27e>
	return (TG_OK);
}
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	6c 96       	adiw	r28, 0x1c	; 28
    3aba:	cd bf       	out	0x3d, r28	; 61
    3abc:	de bf       	out	0x3e, r29	; 62
    3abe:	cf 91       	pop	r28
    3ac0:	df 91       	pop	r29
    3ac2:	1f 91       	pop	r17
    3ac4:	0f 91       	pop	r16
    3ac6:	ff 90       	pop	r15
    3ac8:	ef 90       	pop	r14
    3aca:	df 90       	pop	r13
    3acc:	cf 90       	pop	r12
    3ace:	bf 90       	pop	r11
    3ad0:	af 90       	pop	r10
    3ad2:	9f 90       	pop	r9
    3ad4:	8f 90       	pop	r8
    3ad6:	7f 90       	pop	r7
    3ad8:	6f 90       	pop	r6
    3ada:	5f 90       	pop	r5
    3adc:	4f 90       	pop	r4
    3ade:	3f 90       	pop	r3
    3ae0:	2f 90       	pop	r2
    3ae2:	08 95       	ret

00003ae4 <mc_arc_continuation>:
 *	This only works because no ISRs queue this buffer, and this continuation 
 *	routine cannot be pre-empted. If these conditions change you need to 
 *	implement a critical region or mutex of some sort.
 */
int mc_arc_continuation() 
{
    3ae4:	8f 92       	push	r8
    3ae6:	9f 92       	push	r9
    3ae8:	af 92       	push	r10
    3aea:	bf 92       	push	r11
    3aec:	cf 92       	push	r12
    3aee:	df 92       	push	r13
    3af0:	ef 92       	push	r14
    3af2:	ff 92       	push	r15
    3af4:	0f 93       	push	r16
    3af6:	1f 93       	push	r17
	if (ma.arc_state == MC_STATE_OFF) {
    3af8:	80 91 b4 24 	lds	r24, 0x24B4
    3afc:	88 23       	and	r24, r24
    3afe:	19 f4       	brne	.+6      	; 0x3b06 <mc_arc_continuation+0x22>
    3b00:	21 e0       	ldi	r18, 0x01	; 1
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	dd c0       	rjmp	.+442    	; 0x3cc0 <mc_arc_continuation+0x1dc>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
    3b06:	81 30       	cpi	r24, 0x01	; 1
    3b08:	09 f0       	breq	.+2      	; 0x3b0c <mc_arc_continuation+0x28>
    3b0a:	ca c0       	rjmp	.+404    	; 0x3ca0 <mc_arc_continuation+0x1bc>
		ma.segment_counter=0;
    3b0c:	10 92 b7 24 	sts	0x24B7, r1
    3b10:	10 92 b8 24 	sts	0x24B8, r1
		ma.arc_state = MC_STATE_RUNNING;
    3b14:	82 e0       	ldi	r24, 0x02	; 2
    3b16:	80 93 b4 24 	sts	0x24B4, r24
    3b1a:	c2 c0       	rjmp	.+388    	; 0x3ca0 <mc_arc_continuation+0x1bc>
	}
	while (ma.segment_counter <= ma.segments) {
		if (mv_test_move_buffer_full()) {	// this is where you would block
    3b1c:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <mv_test_move_buffer_full>
    3b20:	88 23       	and	r24, r24
    3b22:	19 f0       	breq	.+6      	; 0x3b2a <mc_arc_continuation+0x46>
    3b24:	22 e0       	ldi	r18, 0x02	; 2
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	cb c0       	rjmp	.+406    	; 0x3cc0 <mc_arc_continuation+0x1dc>
			return (TG_CONTINUE);
		}
		ma.segment_counter++;
    3b2a:	80 91 b7 24 	lds	r24, 0x24B7
    3b2e:	90 91 b8 24 	lds	r25, 0x24B8
    3b32:	01 96       	adiw	r24, 0x01	; 1
    3b34:	80 93 b7 24 	sts	0x24B7, r24
    3b38:	90 93 b8 24 	sts	0x24B8, r25
		ma.theta += ma.theta_per_segment;
    3b3c:	60 91 d9 24 	lds	r22, 0x24D9
    3b40:	70 91 da 24 	lds	r23, 0x24DA
    3b44:	80 91 db 24 	lds	r24, 0x24DB
    3b48:	90 91 dc 24 	lds	r25, 0x24DC
    3b4c:	20 91 e5 24 	lds	r18, 0x24E5
    3b50:	30 91 e6 24 	lds	r19, 0x24E6
    3b54:	40 91 e7 24 	lds	r20, 0x24E7
    3b58:	50 91 e8 24 	lds	r21, 0x24E8
    3b5c:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__addsf3>
    3b60:	7b 01       	movw	r14, r22
    3b62:	8c 01       	movw	r16, r24
    3b64:	cb 01       	movw	r24, r22
    3b66:	d8 01       	movw	r26, r16
    3b68:	80 93 d9 24 	sts	0x24D9, r24
    3b6c:	90 93 da 24 	sts	0x24DA, r25
    3b70:	a0 93 db 24 	sts	0x24DB, r26
    3b74:	b0 93 dc 24 	sts	0x24DC, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    3b78:	b7 01       	movw	r22, r14
    3b7a:	c8 01       	movw	r24, r16
    3b7c:	0e 94 97 40 	call	0x812e	; 0x812e <sin>
    3b80:	80 90 dd 24 	lds	r8, 0x24DD
    3b84:	90 90 de 24 	lds	r9, 0x24DE
    3b88:	a0 90 df 24 	lds	r10, 0x24DF
    3b8c:	b0 90 e0 24 	lds	r11, 0x24E0
    3b90:	c0 90 bb 24 	lds	r12, 0x24BB
    3b94:	d0 90 bc 24 	lds	r13, 0x24BC
    3b98:	cc 0c       	add	r12, r12
    3b9a:	dd 1c       	adc	r13, r13
    3b9c:	cc 0c       	add	r12, r12
    3b9e:	dd 1c       	adc	r13, r13
    3ba0:	24 eb       	ldi	r18, 0xB4	; 180
    3ba2:	34 e2       	ldi	r19, 0x24	; 36
    3ba4:	c2 0e       	add	r12, r18
    3ba6:	d3 1e       	adc	r13, r19
    3ba8:	a5 01       	movw	r20, r10
    3baa:	94 01       	movw	r18, r8
    3bac:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    3bb0:	9b 01       	movw	r18, r22
    3bb2:	ac 01       	movw	r20, r24
    3bb4:	60 91 d1 24 	lds	r22, 0x24D1
    3bb8:	70 91 d2 24 	lds	r23, 0x24D2
    3bbc:	80 91 d3 24 	lds	r24, 0x24D3
    3bc0:	90 91 d4 24 	lds	r25, 0x24D4
    3bc4:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__addsf3>
    3bc8:	f6 01       	movw	r30, r12
    3bca:	65 87       	std	Z+13, r22	; 0x0d
    3bcc:	76 87       	std	Z+14, r23	; 0x0e
    3bce:	87 87       	std	Z+15, r24	; 0x0f
    3bd0:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    3bd2:	b7 01       	movw	r22, r14
    3bd4:	c8 01       	movw	r24, r16
    3bd6:	0e 94 76 3d 	call	0x7aec	; 0x7aec <cos>
    3bda:	00 91 bd 24 	lds	r16, 0x24BD
    3bde:	10 91 be 24 	lds	r17, 0x24BE
    3be2:	00 0f       	add	r16, r16
    3be4:	11 1f       	adc	r17, r17
    3be6:	00 0f       	add	r16, r16
    3be8:	11 1f       	adc	r17, r17
    3bea:	0c 54       	subi	r16, 0x4C	; 76
    3bec:	1b 4d       	sbci	r17, 0xDB	; 219
    3bee:	a5 01       	movw	r20, r10
    3bf0:	94 01       	movw	r18, r8
    3bf2:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    3bf6:	9b 01       	movw	r18, r22
    3bf8:	ac 01       	movw	r20, r24
    3bfa:	60 91 d5 24 	lds	r22, 0x24D5
    3bfe:	70 91 d6 24 	lds	r23, 0x24D6
    3c02:	80 91 d7 24 	lds	r24, 0x24D7
    3c06:	90 91 d8 24 	lds	r25, 0x24D8
    3c0a:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__addsf3>
    3c0e:	f8 01       	movw	r30, r16
    3c10:	65 87       	std	Z+13, r22	; 0x0d
    3c12:	76 87       	std	Z+14, r23	; 0x0e
    3c14:	87 87       	std	Z+15, r24	; 0x0f
    3c16:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    3c18:	00 91 bf 24 	lds	r16, 0x24BF
    3c1c:	10 91 c0 24 	lds	r17, 0x24C0
    3c20:	00 0f       	add	r16, r16
    3c22:	11 1f       	adc	r17, r17
    3c24:	00 0f       	add	r16, r16
    3c26:	11 1f       	adc	r17, r17
    3c28:	0c 54       	subi	r16, 0x4C	; 76
    3c2a:	1b 4d       	sbci	r17, 0xDB	; 219
    3c2c:	f8 01       	movw	r30, r16
    3c2e:	65 85       	ldd	r22, Z+13	; 0x0d
    3c30:	76 85       	ldd	r23, Z+14	; 0x0e
    3c32:	87 85       	ldd	r24, Z+15	; 0x0f
    3c34:	90 89       	ldd	r25, Z+16	; 0x10
    3c36:	20 91 e9 24 	lds	r18, 0x24E9
    3c3a:	30 91 ea 24 	lds	r19, 0x24EA
    3c3e:	40 91 eb 24 	lds	r20, 0x24EB
    3c42:	50 91 ec 24 	lds	r21, 0x24EC
    3c46:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__addsf3>
    3c4a:	f8 01       	movw	r30, r16
    3c4c:	65 87       	std	Z+13, r22	; 0x0d
    3c4e:	76 87       	std	Z+14, r23	; 0x0e
    3c50:	87 87       	std	Z+15, r24	; 0x0f
    3c52:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X_AXIS], 
    3c54:	60 91 c1 24 	lds	r22, 0x24C1
    3c58:	70 91 c2 24 	lds	r23, 0x24C2
    3c5c:	80 91 c3 24 	lds	r24, 0x24C3
    3c60:	90 91 c4 24 	lds	r25, 0x24C4
    3c64:	20 91 c5 24 	lds	r18, 0x24C5
    3c68:	30 91 c6 24 	lds	r19, 0x24C6
    3c6c:	40 91 c7 24 	lds	r20, 0x24C7
    3c70:	50 91 c8 24 	lds	r21, 0x24C8
    3c74:	e0 90 c9 24 	lds	r14, 0x24C9
    3c78:	f0 90 ca 24 	lds	r15, 0x24CA
    3c7c:	00 91 cb 24 	lds	r16, 0x24CB
    3c80:	10 91 cc 24 	lds	r17, 0x24CC
    3c84:	a0 90 e1 24 	lds	r10, 0x24E1
    3c88:	b0 90 e2 24 	lds	r11, 0x24E2
    3c8c:	c0 90 e3 24 	lds	r12, 0x24E3
    3c90:	d0 90 e4 24 	lds	r13, 0x24E4
    3c94:	80 90 b9 24 	lds	r8, 0x24B9
    3c98:	90 90 ba 24 	lds	r9, 0x24BA
    3c9c:	0e 94 17 1c 	call	0x382e	; 0x382e <mc_line>
		return (TG_NOOP);						// return NULL for non-started arc
	} else if (ma.arc_state == MC_STATE_NEW) {
		ma.segment_counter=0;
		ma.arc_state = MC_STATE_RUNNING;
	}
	while (ma.segment_counter <= ma.segments) {
    3ca0:	20 91 b7 24 	lds	r18, 0x24B7
    3ca4:	30 91 b8 24 	lds	r19, 0x24B8
    3ca8:	80 91 b5 24 	lds	r24, 0x24B5
    3cac:	90 91 b6 24 	lds	r25, 0x24B6
    3cb0:	82 17       	cp	r24, r18
    3cb2:	93 07       	cpc	r25, r19
    3cb4:	0c f0       	brlt	.+2      	; 0x3cb8 <mc_arc_continuation+0x1d4>
    3cb6:	32 cf       	rjmp	.-412    	; 0x3b1c <mc_arc_continuation+0x38>
				ma.dtarget[Y_AXIS], 
				ma.dtarget[Z_AXIS], 
				ma.feed_rate, 
				ma.invert_feed_rate);
  	}
	ma.arc_state = MC_STATE_OFF;		// arc is done. turn the generator off.
    3cb8:	10 92 b4 24 	sts	0x24B4, r1
    3cbc:	20 e0       	ldi	r18, 0x00	; 0
    3cbe:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_OK);
}
    3cc0:	c9 01       	movw	r24, r18
    3cc2:	1f 91       	pop	r17
    3cc4:	0f 91       	pop	r16
    3cc6:	ff 90       	pop	r15
    3cc8:	ef 90       	pop	r14
    3cca:	df 90       	pop	r13
    3ccc:	cf 90       	pop	r12
    3cce:	bf 90       	pop	r11
    3cd0:	af 90       	pop	r10
    3cd2:	9f 90       	pop	r9
    3cd4:	8f 90       	pop	r8
    3cd6:	08 95       	ret

00003cd8 <mc_arc_nonblock>:

int mc_arc_nonblock(double theta, double angular_travel, 
					double radius, double linear_travel, 
					int axis_1, int axis_2, int axis_linear, 
					double feed_rate, int invert_feed_rate)
{
    3cd8:	2f 92       	push	r2
    3cda:	3f 92       	push	r3
    3cdc:	4f 92       	push	r4
    3cde:	5f 92       	push	r5
    3ce0:	6f 92       	push	r6
    3ce2:	7f 92       	push	r7
    3ce4:	8f 92       	push	r8
    3ce6:	9f 92       	push	r9
    3ce8:	af 92       	push	r10
    3cea:	bf 92       	push	r11
    3cec:	cf 92       	push	r12
    3cee:	df 92       	push	r13
    3cf0:	ef 92       	push	r14
    3cf2:	ff 92       	push	r15
    3cf4:	0f 93       	push	r16
    3cf6:	1f 93       	push	r17
    3cf8:	df 93       	push	r29
    3cfa:	cf 93       	push	r28
    3cfc:	cd b7       	in	r28, 0x3d	; 61
    3cfe:	de b7       	in	r29, 0x3e	; 62
    3d00:	28 97       	sbiw	r28, 0x08	; 8
    3d02:	cd bf       	out	0x3d, r28	; 61
    3d04:	de bf       	out	0x3e, r29	; 62
    3d06:	69 83       	std	Y+1, r22	; 0x01
    3d08:	7a 83       	std	Y+2, r23	; 0x02
    3d0a:	8b 83       	std	Y+3, r24	; 0x03
    3d0c:	9c 83       	std	Y+4, r25	; 0x04
    3d0e:	29 01       	movw	r4, r18
    3d10:	3a 01       	movw	r6, r20
    3d12:	ed 82       	std	Y+5, r14	; 0x05
    3d14:	fe 82       	std	Y+6, r15	; 0x06
    3d16:	0f 83       	std	Y+7, r16	; 0x07
    3d18:	18 87       	std	Y+8, r17	; 0x08
    3d1a:	2e 8c       	ldd	r2, Y+30	; 0x1e
    3d1c:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    3d1e:	60 93 d9 24 	sts	0x24D9, r22
    3d22:	70 93 da 24 	sts	0x24DA, r23
    3d26:	80 93 db 24 	sts	0x24DB, r24
    3d2a:	90 93 dc 24 	sts	0x24DC, r25
	ma.radius = radius;
    3d2e:	e0 92 dd 24 	sts	0x24DD, r14
    3d32:	f0 92 de 24 	sts	0x24DE, r15
    3d36:	00 93 df 24 	sts	0x24DF, r16
    3d3a:	10 93 e0 24 	sts	0x24E0, r17
	ma.angular_travel = angular_travel;
    3d3e:	20 93 ed 24 	sts	0x24ED, r18
    3d42:	30 93 ee 24 	sts	0x24EE, r19
    3d46:	40 93 ef 24 	sts	0x24EF, r20
    3d4a:	50 93 f0 24 	sts	0x24F0, r21
	ma.linear_travel = linear_travel;
    3d4e:	a0 92 f1 24 	sts	0x24F1, r10
    3d52:	b0 92 f2 24 	sts	0x24F2, r11
    3d56:	c0 92 f3 24 	sts	0x24F3, r12
    3d5a:	d0 92 f4 24 	sts	0x24F4, r13
	ma.feed_rate = feed_rate;
    3d5e:	8a a1       	ldd	r24, Y+34	; 0x22
    3d60:	9b a1       	ldd	r25, Y+35	; 0x23
    3d62:	ac a1       	ldd	r26, Y+36	; 0x24
    3d64:	bd a1       	ldd	r27, Y+37	; 0x25
    3d66:	80 93 e1 24 	sts	0x24E1, r24
    3d6a:	90 93 e2 24 	sts	0x24E2, r25
    3d6e:	a0 93 e3 24 	sts	0x24E3, r26
    3d72:	b0 93 e4 24 	sts	0x24E4, r27
	ma.invert_feed_rate = invert_feed_rate;
    3d76:	ae a1       	ldd	r26, Y+38	; 0x26
    3d78:	bf a1       	ldd	r27, Y+39	; 0x27
    3d7a:	a0 93 b9 24 	sts	0x24B9, r26
    3d7e:	b0 93 ba 24 	sts	0x24BA, r27
	ma.axis_1 = axis_1;
    3d82:	80 92 bb 24 	sts	0x24BB, r8
    3d86:	90 92 bc 24 	sts	0x24BC, r9
	ma.axis_2 = axis_2;
    3d8a:	20 92 bd 24 	sts	0x24BD, r2
    3d8e:	30 92 be 24 	sts	0x24BE, r3
	ma.axis_linear = axis_linear;
    3d92:	e8 a1       	ldd	r30, Y+32	; 0x20
    3d94:	f9 a1       	ldd	r31, Y+33	; 0x21
    3d96:	e0 93 bf 24 	sts	0x24BF, r30
    3d9a:	f0 93 c0 24 	sts	0x24C0, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    3d9e:	ca 01       	movw	r24, r20
    3da0:	b9 01       	movw	r22, r18
    3da2:	a8 01       	movw	r20, r16
    3da4:	97 01       	movw	r18, r14
    3da6:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    3daa:	7b 01       	movw	r14, r22
    3dac:	8c 01       	movw	r16, r24
    3dae:	c6 01       	movw	r24, r12
    3db0:	b5 01       	movw	r22, r10
    3db2:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__fixsfsi>
    3db6:	97 ff       	sbrs	r25, 7
    3db8:	07 c0       	rjmp	.+14     	; 0x3dc8 <mc_arc_nonblock+0xf0>
    3dba:	90 95       	com	r25
    3dbc:	80 95       	com	r24
    3dbe:	70 95       	com	r23
    3dc0:	61 95       	neg	r22
    3dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    3dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc8:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    3dcc:	9b 01       	movw	r18, r22
    3dce:	ac 01       	movw	r20, r24
    3dd0:	c8 01       	movw	r24, r16
    3dd2:	b7 01       	movw	r22, r14
    3dd4:	0e 94 6f 3f 	call	0x7ede	; 0x7ede <hypot>
    3dd8:	7b 01       	movw	r14, r22
    3dda:	8c 01       	movw	r16, r24
    3ddc:	60 93 cd 24 	sts	0x24CD, r22
    3de0:	70 93 ce 24 	sts	0x24CE, r23
    3de4:	80 93 cf 24 	sts	0x24CF, r24
    3de8:	90 93 d0 24 	sts	0x24D0, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    3dec:	2a e0       	ldi	r18, 0x0A	; 10
    3dee:	37 ed       	ldi	r19, 0xD7	; 215
    3df0:	43 e2       	ldi	r20, 0x23	; 35
    3df2:	5c e3       	ldi	r21, 0x3C	; 60
    3df4:	0e 94 72 3d 	call	0x7ae4	; 0x7ae4 <__cmpsf2>
    3df8:	88 23       	and	r24, r24
    3dfa:	1c f4       	brge	.+6      	; 0x3e02 <mc_arc_nonblock+0x12a>
    3dfc:	2f e0       	ldi	r18, 0x0F	; 15
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	fb c0       	rjmp	.+502    	; 0x3ff8 <mc_arc_nonblock+0x320>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    3e02:	c8 01       	movw	r24, r16
    3e04:	b7 01       	movw	r22, r14
    3e06:	20 91 46 24 	lds	r18, 0x2446
    3e0a:	30 91 47 24 	lds	r19, 0x2447
    3e0e:	40 91 48 24 	lds	r20, 0x2448
    3e12:	50 91 49 24 	lds	r21, 0x2449
    3e16:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    3e1a:	0e 94 5f 3d 	call	0x7abe	; 0x7abe <ceil>
    3e1e:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__fixsfsi>
    3e22:	8b 01       	movw	r16, r22
    3e24:	60 93 b5 24 	sts	0x24B5, r22
    3e28:	70 93 b6 24 	sts	0x24B6, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement 
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.*/

	if (ma.invert_feed_rate) { 
    3e2c:	8e a1       	ldd	r24, Y+38	; 0x26
    3e2e:	9f a1       	ldd	r25, Y+39	; 0x27
    3e30:	89 2b       	or	r24, r25
    3e32:	b9 f0       	breq	.+46     	; 0x3e62 <mc_arc_nonblock+0x18a>
		ma.feed_rate *= ma.segments; 
    3e34:	b8 01       	movw	r22, r16
    3e36:	88 27       	eor	r24, r24
    3e38:	77 fd       	sbrc	r23, 7
    3e3a:	80 95       	com	r24
    3e3c:	98 2f       	mov	r25, r24
    3e3e:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    3e42:	9b 01       	movw	r18, r22
    3e44:	ac 01       	movw	r20, r24
    3e46:	6a a1       	ldd	r22, Y+34	; 0x22
    3e48:	7b a1       	ldd	r23, Y+35	; 0x23
    3e4a:	8c a1       	ldd	r24, Y+36	; 0x24
    3e4c:	9d a1       	ldd	r25, Y+37	; 0x25
    3e4e:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    3e52:	60 93 e1 24 	sts	0x24E1, r22
    3e56:	70 93 e2 24 	sts	0x24E2, r23
    3e5a:	80 93 e3 24 	sts	0x24E3, r24
    3e5e:	90 93 e4 24 	sts	0x24E4, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    3e62:	b8 01       	movw	r22, r16
    3e64:	88 27       	eor	r24, r24
    3e66:	77 fd       	sbrc	r23, 7
    3e68:	80 95       	com	r24
    3e6a:	98 2f       	mov	r25, r24
    3e6c:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    3e70:	7b 01       	movw	r14, r22
    3e72:	8c 01       	movw	r16, r24
    3e74:	c3 01       	movw	r24, r6
    3e76:	b2 01       	movw	r22, r4
    3e78:	a8 01       	movw	r20, r16
    3e7a:	97 01       	movw	r18, r14
    3e7c:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    3e80:	60 93 e5 24 	sts	0x24E5, r22
    3e84:	70 93 e6 24 	sts	0x24E6, r23
    3e88:	80 93 e7 24 	sts	0x24E7, r24
    3e8c:	90 93 e8 24 	sts	0x24E8, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    3e90:	c6 01       	movw	r24, r12
    3e92:	b5 01       	movw	r22, r10
    3e94:	a8 01       	movw	r20, r16
    3e96:	97 01       	movw	r18, r14
    3e98:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    3e9c:	60 93 e9 24 	sts	0x24E9, r22
    3ea0:	70 93 ea 24 	sts	0x24EA, r23
    3ea4:	80 93 eb 24 	sts	0x24EB, r24
    3ea8:	90 93 ec 24 	sts	0x24EC, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    3eac:	69 81       	ldd	r22, Y+1	; 0x01
    3eae:	7a 81       	ldd	r23, Y+2	; 0x02
    3eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb4:	0e 94 97 40 	call	0x812e	; 0x812e <sin>
    3eb8:	5b 01       	movw	r10, r22
    3eba:	6c 01       	movw	r12, r24
    3ebc:	f4 01       	movw	r30, r8
    3ebe:	ee 0f       	add	r30, r30
    3ec0:	ff 1f       	adc	r31, r31
    3ec2:	ee 0f       	add	r30, r30
    3ec4:	ff 1f       	adc	r31, r31
    3ec6:	ee 58       	subi	r30, 0x8E	; 142
    3ec8:	fe 4d       	sbci	r31, 0xDE	; 222
    3eca:	61 81       	ldd	r22, Z+1	; 0x01
    3ecc:	72 81       	ldd	r23, Z+2	; 0x02
    3ece:	83 81       	ldd	r24, Z+3	; 0x03
    3ed0:	94 81       	ldd	r25, Z+4	; 0x04
    3ed2:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    3ed6:	f4 01       	movw	r30, r8
    3ed8:	ee 0f       	add	r30, r30
    3eda:	ff 1f       	adc	r31, r31
    3edc:	e8 0d       	add	r30, r8
    3ede:	f9 1d       	adc	r31, r9
    3ee0:	13 e0       	ldi	r17, 0x03	; 3
    3ee2:	ee 0f       	add	r30, r30
    3ee4:	ff 1f       	adc	r31, r31
    3ee6:	1a 95       	dec	r17
    3ee8:	e1 f7       	brne	.-8      	; 0x3ee2 <mc_arc_nonblock+0x20a>
    3eea:	ec 5b       	subi	r30, 0xBC	; 188
    3eec:	fb 4d       	sbci	r31, 0xDB	; 219
    3eee:	21 a1       	ldd	r18, Z+33	; 0x21
    3ef0:	32 a1       	ldd	r19, Z+34	; 0x22
    3ef2:	43 a1       	ldd	r20, Z+35	; 0x23
    3ef4:	54 a1       	ldd	r21, Z+36	; 0x24
    3ef6:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    3efa:	7b 01       	movw	r14, r22
    3efc:	8c 01       	movw	r16, r24
    3efe:	c6 01       	movw	r24, r12
    3f00:	b5 01       	movw	r22, r10
    3f02:	2d 81       	ldd	r18, Y+5	; 0x05
    3f04:	3e 81       	ldd	r19, Y+6	; 0x06
    3f06:	4f 81       	ldd	r20, Y+7	; 0x07
    3f08:	58 85       	ldd	r21, Y+8	; 0x08
    3f0a:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    3f0e:	9b 01       	movw	r18, r22
    3f10:	ac 01       	movw	r20, r24
    3f12:	c8 01       	movw	r24, r16
    3f14:	b7 01       	movw	r22, r14
    3f16:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    3f1a:	60 93 d1 24 	sts	0x24D1, r22
    3f1e:	70 93 d2 24 	sts	0x24D2, r23
    3f22:	80 93 d3 24 	sts	0x24D3, r24
    3f26:	90 93 d4 24 	sts	0x24D4, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    3f2a:	69 81       	ldd	r22, Y+1	; 0x01
    3f2c:	7a 81       	ldd	r23, Y+2	; 0x02
    3f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f30:	9c 81       	ldd	r25, Y+4	; 0x04
    3f32:	0e 94 76 3d 	call	0x7aec	; 0x7aec <cos>
    3f36:	5b 01       	movw	r10, r22
    3f38:	6c 01       	movw	r12, r24
    3f3a:	f1 01       	movw	r30, r2
    3f3c:	ee 0f       	add	r30, r30
    3f3e:	ff 1f       	adc	r31, r31
    3f40:	ee 0f       	add	r30, r30
    3f42:	ff 1f       	adc	r31, r31
    3f44:	ee 58       	subi	r30, 0x8E	; 142
    3f46:	fe 4d       	sbci	r31, 0xDE	; 222
    3f48:	61 81       	ldd	r22, Z+1	; 0x01
    3f4a:	72 81       	ldd	r23, Z+2	; 0x02
    3f4c:	83 81       	ldd	r24, Z+3	; 0x03
    3f4e:	94 81       	ldd	r25, Z+4	; 0x04
    3f50:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    3f54:	f1 01       	movw	r30, r2
    3f56:	ee 0f       	add	r30, r30
    3f58:	ff 1f       	adc	r31, r31
    3f5a:	e2 0d       	add	r30, r2
    3f5c:	f3 1d       	adc	r31, r3
    3f5e:	53 e0       	ldi	r21, 0x03	; 3
    3f60:	ee 0f       	add	r30, r30
    3f62:	ff 1f       	adc	r31, r31
    3f64:	5a 95       	dec	r21
    3f66:	e1 f7       	brne	.-8      	; 0x3f60 <mc_arc_nonblock+0x288>
    3f68:	ec 5b       	subi	r30, 0xBC	; 188
    3f6a:	fb 4d       	sbci	r31, 0xDB	; 219
    3f6c:	21 a1       	ldd	r18, Z+33	; 0x21
    3f6e:	32 a1       	ldd	r19, Z+34	; 0x22
    3f70:	43 a1       	ldd	r20, Z+35	; 0x23
    3f72:	54 a1       	ldd	r21, Z+36	; 0x24
    3f74:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    3f78:	7b 01       	movw	r14, r22
    3f7a:	8c 01       	movw	r16, r24
    3f7c:	c6 01       	movw	r24, r12
    3f7e:	b5 01       	movw	r22, r10
    3f80:	2d 81       	ldd	r18, Y+5	; 0x05
    3f82:	3e 81       	ldd	r19, Y+6	; 0x06
    3f84:	4f 81       	ldd	r20, Y+7	; 0x07
    3f86:	58 85       	ldd	r21, Y+8	; 0x08
    3f88:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    3f8c:	9b 01       	movw	r18, r22
    3f8e:	ac 01       	movw	r20, r24
    3f90:	c8 01       	movw	r24, r16
    3f92:	b7 01       	movw	r22, r14
    3f94:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    3f98:	60 93 d5 24 	sts	0x24D5, r22
    3f9c:	70 93 d6 24 	sts	0x24D6, r23
    3fa0:	80 93 d7 24 	sts	0x24D7, r24
    3fa4:	90 93 d8 24 	sts	0x24D8, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
    3fa8:	e8 a1       	ldd	r30, Y+32	; 0x20
    3faa:	f9 a1       	ldd	r31, Y+33	; 0x21
    3fac:	ee 0f       	add	r30, r30
    3fae:	ff 1f       	adc	r31, r31
    3fb0:	ee 0f       	add	r30, r30
    3fb2:	ff 1f       	adc	r31, r31
    3fb4:	8f 01       	movw	r16, r30
    3fb6:	0c 54       	subi	r16, 0x4C	; 76
    3fb8:	1b 4d       	sbci	r17, 0xDB	; 219
    3fba:	ee 58       	subi	r30, 0x8E	; 142
    3fbc:	fe 4d       	sbci	r31, 0xDE	; 222
    3fbe:	61 81       	ldd	r22, Z+1	; 0x01
    3fc0:	72 81       	ldd	r23, Z+2	; 0x02
    3fc2:	83 81       	ldd	r24, Z+3	; 0x03
    3fc4:	94 81       	ldd	r25, Z+4	; 0x04
    3fc6:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    3fca:	20 91 95 24 	lds	r18, 0x2495
    3fce:	30 91 96 24 	lds	r19, 0x2496
    3fd2:	40 91 97 24 	lds	r20, 0x2497
    3fd6:	50 91 98 24 	lds	r21, 0x2498
    3fda:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    3fde:	d8 01       	movw	r26, r16
    3fe0:	1d 96       	adiw	r26, 0x0d	; 13
    3fe2:	6d 93       	st	X+, r22
    3fe4:	7d 93       	st	X+, r23
    3fe6:	8d 93       	st	X+, r24
    3fe8:	9c 93       	st	X, r25
    3fea:	50 97       	sbiw	r26, 0x10	; 16
	ma.arc_state = MC_STATE_NEW;	// new arc, NJ. (I'm here all week. Try the veal)
    3fec:	81 e0       	ldi	r24, 0x01	; 1
    3fee:	80 93 b4 24 	sts	0x24B4, r24
	return (mc_arc_continuation());
    3ff2:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <mc_arc_continuation>
    3ff6:	9c 01       	movw	r18, r24
}
    3ff8:	c9 01       	movw	r24, r18
    3ffa:	28 96       	adiw	r28, 0x08	; 8
    3ffc:	cd bf       	out	0x3d, r28	; 61
    3ffe:	de bf       	out	0x3e, r29	; 62
    4000:	cf 91       	pop	r28
    4002:	df 91       	pop	r29
    4004:	1f 91       	pop	r17
    4006:	0f 91       	pop	r16
    4008:	ff 90       	pop	r15
    400a:	ef 90       	pop	r14
    400c:	df 90       	pop	r13
    400e:	cf 90       	pop	r12
    4010:	bf 90       	pop	r11
    4012:	af 90       	pop	r10
    4014:	9f 90       	pop	r9
    4016:	8f 90       	pop	r8
    4018:	7f 90       	pop	r7
    401a:	6f 90       	pop	r6
    401c:	5f 90       	pop	r5
    401e:	4f 90       	pop	r4
    4020:	3f 90       	pop	r3
    4022:	2f 90       	pop	r2
    4024:	08 95       	ret

00004026 <mc_arc>:
 *	The length of each segment is configured in config.h by setting MM_PER_ARC_SEGMENT.  
 */

int mc_arc(double theta, double angular_travel, double radius, double linear_travel, 
	int axis_1, int axis_2, int axis_linear, double feed_rate, int invert_feed_rate)
{
    4026:	2f 92       	push	r2
    4028:	3f 92       	push	r3
    402a:	4f 92       	push	r4
    402c:	5f 92       	push	r5
    402e:	6f 92       	push	r6
    4030:	7f 92       	push	r7
    4032:	8f 92       	push	r8
    4034:	9f 92       	push	r9
    4036:	af 92       	push	r10
    4038:	bf 92       	push	r11
    403a:	cf 92       	push	r12
    403c:	df 92       	push	r13
    403e:	ef 92       	push	r14
    4040:	ff 92       	push	r15
    4042:	0f 93       	push	r16
    4044:	1f 93       	push	r17
    4046:	df 93       	push	r29
    4048:	cf 93       	push	r28
    404a:	cd b7       	in	r28, 0x3d	; 61
    404c:	de b7       	in	r29, 0x3e	; 62
    404e:	28 97       	sbiw	r28, 0x08	; 8
    4050:	cd bf       	out	0x3d, r28	; 61
    4052:	de bf       	out	0x3e, r29	; 62
    4054:	69 83       	std	Y+1, r22	; 0x01
    4056:	7a 83       	std	Y+2, r23	; 0x02
    4058:	8b 83       	std	Y+3, r24	; 0x03
    405a:	9c 83       	std	Y+4, r25	; 0x04
    405c:	29 01       	movw	r4, r18
    405e:	3a 01       	movw	r6, r20
    4060:	ed 82       	std	Y+5, r14	; 0x05
    4062:	fe 82       	std	Y+6, r15	; 0x06
    4064:	0f 83       	std	Y+7, r16	; 0x07
    4066:	18 87       	std	Y+8, r17	; 0x08
    4068:	2e 8c       	ldd	r2, Y+30	; 0x1e
    406a:	3f 8c       	ldd	r3, Y+31	; 0x1f
	// load the arc struct
	ma.theta = theta;
    406c:	60 93 d9 24 	sts	0x24D9, r22
    4070:	70 93 da 24 	sts	0x24DA, r23
    4074:	80 93 db 24 	sts	0x24DB, r24
    4078:	90 93 dc 24 	sts	0x24DC, r25
	ma.radius = radius;
    407c:	e0 92 dd 24 	sts	0x24DD, r14
    4080:	f0 92 de 24 	sts	0x24DE, r15
    4084:	00 93 df 24 	sts	0x24DF, r16
    4088:	10 93 e0 24 	sts	0x24E0, r17
	ma.angular_travel = angular_travel;
    408c:	20 93 ed 24 	sts	0x24ED, r18
    4090:	30 93 ee 24 	sts	0x24EE, r19
    4094:	40 93 ef 24 	sts	0x24EF, r20
    4098:	50 93 f0 24 	sts	0x24F0, r21
	ma.linear_travel = linear_travel;
    409c:	a0 92 f1 24 	sts	0x24F1, r10
    40a0:	b0 92 f2 24 	sts	0x24F2, r11
    40a4:	c0 92 f3 24 	sts	0x24F3, r12
    40a8:	d0 92 f4 24 	sts	0x24F4, r13
	ma.feed_rate = feed_rate;
    40ac:	8a a1       	ldd	r24, Y+34	; 0x22
    40ae:	9b a1       	ldd	r25, Y+35	; 0x23
    40b0:	ac a1       	ldd	r26, Y+36	; 0x24
    40b2:	bd a1       	ldd	r27, Y+37	; 0x25
    40b4:	80 93 e1 24 	sts	0x24E1, r24
    40b8:	90 93 e2 24 	sts	0x24E2, r25
    40bc:	a0 93 e3 24 	sts	0x24E3, r26
    40c0:	b0 93 e4 24 	sts	0x24E4, r27
	ma.invert_feed_rate = invert_feed_rate;
    40c4:	ae a1       	ldd	r26, Y+38	; 0x26
    40c6:	bf a1       	ldd	r27, Y+39	; 0x27
    40c8:	a0 93 b9 24 	sts	0x24B9, r26
    40cc:	b0 93 ba 24 	sts	0x24BA, r27
	ma.axis_1 = axis_1;
    40d0:	80 92 bb 24 	sts	0x24BB, r8
    40d4:	90 92 bc 24 	sts	0x24BC, r9
	ma.axis_2 = axis_2;
    40d8:	20 92 bd 24 	sts	0x24BD, r2
    40dc:	30 92 be 24 	sts	0x24BE, r3
	ma.axis_linear = axis_linear;
    40e0:	e8 a1       	ldd	r30, Y+32	; 0x20
    40e2:	f9 a1       	ldd	r31, Y+33	; 0x21
    40e4:	e0 93 bf 24 	sts	0x24BF, r30
    40e8:	f0 93 c0 24 	sts	0x24C0, r31
	ma.mm_of_travel = hypot(ma.angular_travel*ma.radius, labs(ma.linear_travel));
    40ec:	ca 01       	movw	r24, r20
    40ee:	b9 01       	movw	r22, r18
    40f0:	a8 01       	movw	r20, r16
    40f2:	97 01       	movw	r18, r14
    40f4:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    40f8:	7b 01       	movw	r14, r22
    40fa:	8c 01       	movw	r16, r24
    40fc:	c6 01       	movw	r24, r12
    40fe:	b5 01       	movw	r22, r10
    4100:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__fixsfsi>
    4104:	97 ff       	sbrs	r25, 7
    4106:	07 c0       	rjmp	.+14     	; 0x4116 <mc_arc+0xf0>
    4108:	90 95       	com	r25
    410a:	80 95       	com	r24
    410c:	70 95       	com	r23
    410e:	61 95       	neg	r22
    4110:	7f 4f       	sbci	r23, 0xFF	; 255
    4112:	8f 4f       	sbci	r24, 0xFF	; 255
    4114:	9f 4f       	sbci	r25, 0xFF	; 255
    4116:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    411a:	9b 01       	movw	r18, r22
    411c:	ac 01       	movw	r20, r24
    411e:	c8 01       	movw	r24, r16
    4120:	b7 01       	movw	r22, r14
    4122:	0e 94 6f 3f 	call	0x7ede	; 0x7ede <hypot>
    4126:	7b 01       	movw	r14, r22
    4128:	8c 01       	movw	r16, r24
    412a:	60 93 cd 24 	sts	0x24CD, r22
    412e:	70 93 ce 24 	sts	0x24CE, r23
    4132:	80 93 cf 24 	sts	0x24CF, r24
    4136:	90 93 d0 24 	sts	0x24D0, r25
	
	if (ma.mm_of_travel < MM_PER_ARC_SEGMENT) { 	// too short to draw
    413a:	2a e0       	ldi	r18, 0x0A	; 10
    413c:	37 ed       	ldi	r19, 0xD7	; 215
    413e:	43 e2       	ldi	r20, 0x23	; 35
    4140:	5c e3       	ldi	r21, 0x3C	; 60
    4142:	0e 94 72 3d 	call	0x7ae4	; 0x7ae4 <__cmpsf2>
    4146:	88 23       	and	r24, r24
    4148:	1c f4       	brge	.+6      	; 0x4150 <mc_arc+0x12a>
    414a:	2f e0       	ldi	r18, 0x0F	; 15
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	c7 c1       	rjmp	.+910    	; 0x44de <mc_arc+0x4b8>
		return (TG_ARC_ERROR);						// arc specification error
	}
	ma.segments = ceil(ma.mm_of_travel/cfg.mm_per_arc_segment);
    4150:	c8 01       	movw	r24, r16
    4152:	b7 01       	movw	r22, r14
    4154:	20 91 46 24 	lds	r18, 0x2446
    4158:	30 91 47 24 	lds	r19, 0x2447
    415c:	40 91 48 24 	lds	r20, 0x2448
    4160:	50 91 49 24 	lds	r21, 0x2449
    4164:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    4168:	0e 94 5f 3d 	call	0x7abe	; 0x7abe <ceil>
    416c:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <__fixsfsi>
    4170:	8b 01       	movw	r16, r22
    4172:	60 93 b5 24 	sts	0x24B5, r22
    4176:	70 93 b6 24 	sts	0x24B6, r23
  
  	/*  Multiply inverse feed_rate to compensate for the fact that this movement
	 *	is approximated by a number of discrete segments. 
	 *	The inverse feed_rate should be correct for the sum of all segments.
	 */
	if (ma.invert_feed_rate) { 
    417a:	2e a1       	ldd	r18, Y+38	; 0x26
    417c:	3f a1       	ldd	r19, Y+39	; 0x27
    417e:	23 2b       	or	r18, r19
    4180:	b9 f0       	breq	.+46     	; 0x41b0 <mc_arc+0x18a>
		ma.feed_rate *= ma.segments; 
    4182:	b8 01       	movw	r22, r16
    4184:	88 27       	eor	r24, r24
    4186:	77 fd       	sbrc	r23, 7
    4188:	80 95       	com	r24
    418a:	98 2f       	mov	r25, r24
    418c:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    4190:	9b 01       	movw	r18, r22
    4192:	ac 01       	movw	r20, r24
    4194:	6a a1       	ldd	r22, Y+34	; 0x22
    4196:	7b a1       	ldd	r23, Y+35	; 0x23
    4198:	8c a1       	ldd	r24, Y+36	; 0x24
    419a:	9d a1       	ldd	r25, Y+37	; 0x25
    419c:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    41a0:	60 93 e1 24 	sts	0x24E1, r22
    41a4:	70 93 e2 24 	sts	0x24E2, r23
    41a8:	80 93 e3 24 	sts	0x24E3, r24
    41ac:	90 93 e4 24 	sts	0x24E4, r25
	}
	ma.theta_per_segment = ma.angular_travel/ma.segments;
    41b0:	b8 01       	movw	r22, r16
    41b2:	88 27       	eor	r24, r24
    41b4:	77 fd       	sbrc	r23, 7
    41b6:	80 95       	com	r24
    41b8:	98 2f       	mov	r25, r24
    41ba:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    41be:	7b 01       	movw	r14, r22
    41c0:	8c 01       	movw	r16, r24
    41c2:	c3 01       	movw	r24, r6
    41c4:	b2 01       	movw	r22, r4
    41c6:	a8 01       	movw	r20, r16
    41c8:	97 01       	movw	r18, r14
    41ca:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    41ce:	60 93 e5 24 	sts	0x24E5, r22
    41d2:	70 93 e6 24 	sts	0x24E6, r23
    41d6:	80 93 e7 24 	sts	0x24E7, r24
    41da:	90 93 e8 24 	sts	0x24E8, r25
	ma.linear_per_segment = ma.linear_travel/ma.segments;
    41de:	c6 01       	movw	r24, r12
    41e0:	b5 01       	movw	r22, r10
    41e2:	a8 01       	movw	r20, r16
    41e4:	97 01       	movw	r18, r14
    41e6:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    41ea:	60 93 e9 24 	sts	0x24E9, r22
    41ee:	70 93 ea 24 	sts	0x24EA, r23
    41f2:	80 93 eb 24 	sts	0x24EB, r24
    41f6:	90 93 ec 24 	sts	0x24EC, r25
	ma.center_x = (mc.position[ma.axis_1]/CFG(ma.axis_1).steps_per_mm)-sin(ma.theta)*ma.radius;
    41fa:	69 81       	ldd	r22, Y+1	; 0x01
    41fc:	7a 81       	ldd	r23, Y+2	; 0x02
    41fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4200:	9c 81       	ldd	r25, Y+4	; 0x04
    4202:	0e 94 97 40 	call	0x812e	; 0x812e <sin>
    4206:	5b 01       	movw	r10, r22
    4208:	6c 01       	movw	r12, r24
    420a:	f4 01       	movw	r30, r8
    420c:	ee 0f       	add	r30, r30
    420e:	ff 1f       	adc	r31, r31
    4210:	ee 0f       	add	r30, r30
    4212:	ff 1f       	adc	r31, r31
    4214:	ee 58       	subi	r30, 0x8E	; 142
    4216:	fe 4d       	sbci	r31, 0xDE	; 222
    4218:	61 81       	ldd	r22, Z+1	; 0x01
    421a:	72 81       	ldd	r23, Z+2	; 0x02
    421c:	83 81       	ldd	r24, Z+3	; 0x03
    421e:	94 81       	ldd	r25, Z+4	; 0x04
    4220:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    4224:	f4 01       	movw	r30, r8
    4226:	ee 0f       	add	r30, r30
    4228:	ff 1f       	adc	r31, r31
    422a:	e8 0d       	add	r30, r8
    422c:	f9 1d       	adc	r31, r9
    422e:	13 e0       	ldi	r17, 0x03	; 3
    4230:	ee 0f       	add	r30, r30
    4232:	ff 1f       	adc	r31, r31
    4234:	1a 95       	dec	r17
    4236:	e1 f7       	brne	.-8      	; 0x4230 <mc_arc+0x20a>
    4238:	ec 5b       	subi	r30, 0xBC	; 188
    423a:	fb 4d       	sbci	r31, 0xDB	; 219
    423c:	21 a1       	ldd	r18, Z+33	; 0x21
    423e:	32 a1       	ldd	r19, Z+34	; 0x22
    4240:	43 a1       	ldd	r20, Z+35	; 0x23
    4242:	54 a1       	ldd	r21, Z+36	; 0x24
    4244:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    4248:	7b 01       	movw	r14, r22
    424a:	8c 01       	movw	r16, r24
    424c:	c6 01       	movw	r24, r12
    424e:	b5 01       	movw	r22, r10
    4250:	2d 81       	ldd	r18, Y+5	; 0x05
    4252:	3e 81       	ldd	r19, Y+6	; 0x06
    4254:	4f 81       	ldd	r20, Y+7	; 0x07
    4256:	58 85       	ldd	r21, Y+8	; 0x08
    4258:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    425c:	9b 01       	movw	r18, r22
    425e:	ac 01       	movw	r20, r24
    4260:	c8 01       	movw	r24, r16
    4262:	b7 01       	movw	r22, r14
    4264:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    4268:	60 93 d1 24 	sts	0x24D1, r22
    426c:	70 93 d2 24 	sts	0x24D2, r23
    4270:	80 93 d3 24 	sts	0x24D3, r24
    4274:	90 93 d4 24 	sts	0x24D4, r25
	ma.center_y = (mc.position[ma.axis_2]/CFG(ma.axis_2).steps_per_mm)-cos(ma.theta)*ma.radius;
    4278:	69 81       	ldd	r22, Y+1	; 0x01
    427a:	7a 81       	ldd	r23, Y+2	; 0x02
    427c:	8b 81       	ldd	r24, Y+3	; 0x03
    427e:	9c 81       	ldd	r25, Y+4	; 0x04
    4280:	0e 94 76 3d 	call	0x7aec	; 0x7aec <cos>
    4284:	5b 01       	movw	r10, r22
    4286:	6c 01       	movw	r12, r24
    4288:	f1 01       	movw	r30, r2
    428a:	ee 0f       	add	r30, r30
    428c:	ff 1f       	adc	r31, r31
    428e:	ee 0f       	add	r30, r30
    4290:	ff 1f       	adc	r31, r31
    4292:	ee 58       	subi	r30, 0x8E	; 142
    4294:	fe 4d       	sbci	r31, 0xDE	; 222
    4296:	61 81       	ldd	r22, Z+1	; 0x01
    4298:	72 81       	ldd	r23, Z+2	; 0x02
    429a:	83 81       	ldd	r24, Z+3	; 0x03
    429c:	94 81       	ldd	r25, Z+4	; 0x04
    429e:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    42a2:	f1 01       	movw	r30, r2
    42a4:	ee 0f       	add	r30, r30
    42a6:	ff 1f       	adc	r31, r31
    42a8:	e2 0d       	add	r30, r2
    42aa:	f3 1d       	adc	r31, r3
    42ac:	53 e0       	ldi	r21, 0x03	; 3
    42ae:	ee 0f       	add	r30, r30
    42b0:	ff 1f       	adc	r31, r31
    42b2:	5a 95       	dec	r21
    42b4:	e1 f7       	brne	.-8      	; 0x42ae <mc_arc+0x288>
    42b6:	ec 5b       	subi	r30, 0xBC	; 188
    42b8:	fb 4d       	sbci	r31, 0xDB	; 219
    42ba:	21 a1       	ldd	r18, Z+33	; 0x21
    42bc:	32 a1       	ldd	r19, Z+34	; 0x22
    42be:	43 a1       	ldd	r20, Z+35	; 0x23
    42c0:	54 a1       	ldd	r21, Z+36	; 0x24
    42c2:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    42c6:	7b 01       	movw	r14, r22
    42c8:	8c 01       	movw	r16, r24
    42ca:	c6 01       	movw	r24, r12
    42cc:	b5 01       	movw	r22, r10
    42ce:	2d 81       	ldd	r18, Y+5	; 0x05
    42d0:	3e 81       	ldd	r19, Y+6	; 0x06
    42d2:	4f 81       	ldd	r20, Y+7	; 0x07
    42d4:	58 85       	ldd	r21, Y+8	; 0x08
    42d6:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    42da:	9b 01       	movw	r18, r22
    42dc:	ac 01       	movw	r20, r24
    42de:	c8 01       	movw	r24, r16
    42e0:	b7 01       	movw	r22, r14
    42e2:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <__subsf3>
    42e6:	60 93 d5 24 	sts	0x24D5, r22
    42ea:	70 93 d6 24 	sts	0x24D6, r23
    42ee:	80 93 d7 24 	sts	0x24D7, r24
    42f2:	90 93 d8 24 	sts	0x24D8, r25

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
    42f6:	e8 a1       	ldd	r30, Y+32	; 0x20
    42f8:	f9 a1       	ldd	r31, Y+33	; 0x21
    42fa:	ee 0f       	add	r30, r30
    42fc:	ff 1f       	adc	r31, r31
    42fe:	ee 0f       	add	r30, r30
    4300:	ff 1f       	adc	r31, r31
    4302:	8f 01       	movw	r16, r30
    4304:	0c 54       	subi	r16, 0x4C	; 76
    4306:	1b 4d       	sbci	r17, 0xDB	; 219
    4308:	ee 58       	subi	r30, 0x8E	; 142
    430a:	fe 4d       	sbci	r31, 0xDE	; 222
    430c:	61 81       	ldd	r22, Z+1	; 0x01
    430e:	72 81       	ldd	r23, Z+2	; 0x02
    4310:	83 81       	ldd	r24, Z+3	; 0x03
    4312:	94 81       	ldd	r25, Z+4	; 0x04
    4314:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <__floatsisf>
    4318:	20 91 95 24 	lds	r18, 0x2495
    431c:	30 91 96 24 	lds	r19, 0x2496
    4320:	40 91 97 24 	lds	r20, 0x2497
    4324:	50 91 98 24 	lds	r21, 0x2498
    4328:	0e 94 79 3d 	call	0x7af2	; 0x7af2 <__divsf3>
    432c:	d8 01       	movw	r26, r16
    432e:	1d 96       	adiw	r26, 0x0d	; 13
    4330:	6d 93       	st	X+, r22
    4332:	7d 93       	st	X+, r23
    4334:	8d 93       	st	X+, r24
    4336:	9c 93       	st	X, r25
    4338:	50 97       	sbiw	r26, 0x10	; 16
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    433a:	10 92 b7 24 	sts	0x24B7, r1
    433e:	10 92 b8 24 	sts	0x24B8, r1
    4342:	bf c0       	rjmp	.+382    	; 0x44c2 <mc_arc+0x49c>
		ma.theta += ma.theta_per_segment;
    4344:	60 91 d9 24 	lds	r22, 0x24D9
    4348:	70 91 da 24 	lds	r23, 0x24DA
    434c:	80 91 db 24 	lds	r24, 0x24DB
    4350:	90 91 dc 24 	lds	r25, 0x24DC
    4354:	20 91 e5 24 	lds	r18, 0x24E5
    4358:	30 91 e6 24 	lds	r19, 0x24E6
    435c:	40 91 e7 24 	lds	r20, 0x24E7
    4360:	50 91 e8 24 	lds	r21, 0x24E8
    4364:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__addsf3>
    4368:	7b 01       	movw	r14, r22
    436a:	8c 01       	movw	r16, r24
    436c:	cb 01       	movw	r24, r22
    436e:	d8 01       	movw	r26, r16
    4370:	80 93 d9 24 	sts	0x24D9, r24
    4374:	90 93 da 24 	sts	0x24DA, r25
    4378:	a0 93 db 24 	sts	0x24DB, r26
    437c:	b0 93 dc 24 	sts	0x24DC, r27
		ma.dtarget[ma.axis_1] = ma.center_x+sin(ma.theta)*ma.radius;
    4380:	b7 01       	movw	r22, r14
    4382:	c8 01       	movw	r24, r16
    4384:	0e 94 97 40 	call	0x812e	; 0x812e <sin>
    4388:	80 90 dd 24 	lds	r8, 0x24DD
    438c:	90 90 de 24 	lds	r9, 0x24DE
    4390:	a0 90 df 24 	lds	r10, 0x24DF
    4394:	b0 90 e0 24 	lds	r11, 0x24E0
    4398:	c0 90 bb 24 	lds	r12, 0x24BB
    439c:	d0 90 bc 24 	lds	r13, 0x24BC
    43a0:	cc 0c       	add	r12, r12
    43a2:	dd 1c       	adc	r13, r13
    43a4:	cc 0c       	add	r12, r12
    43a6:	dd 1c       	adc	r13, r13
    43a8:	e4 eb       	ldi	r30, 0xB4	; 180
    43aa:	f4 e2       	ldi	r31, 0x24	; 36
    43ac:	ce 0e       	add	r12, r30
    43ae:	df 1e       	adc	r13, r31
    43b0:	a5 01       	movw	r20, r10
    43b2:	94 01       	movw	r18, r8
    43b4:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    43b8:	9b 01       	movw	r18, r22
    43ba:	ac 01       	movw	r20, r24
    43bc:	60 91 d1 24 	lds	r22, 0x24D1
    43c0:	70 91 d2 24 	lds	r23, 0x24D2
    43c4:	80 91 d3 24 	lds	r24, 0x24D3
    43c8:	90 91 d4 24 	lds	r25, 0x24D4
    43cc:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__addsf3>
    43d0:	d6 01       	movw	r26, r12
    43d2:	1d 96       	adiw	r26, 0x0d	; 13
    43d4:	6d 93       	st	X+, r22
    43d6:	7d 93       	st	X+, r23
    43d8:	8d 93       	st	X+, r24
    43da:	9c 93       	st	X, r25
    43dc:	50 97       	sbiw	r26, 0x10	; 16
		ma.dtarget[ma.axis_2] = ma.center_y+cos(ma.theta)*ma.radius;
    43de:	b7 01       	movw	r22, r14
    43e0:	c8 01       	movw	r24, r16
    43e2:	0e 94 76 3d 	call	0x7aec	; 0x7aec <cos>
    43e6:	00 91 bd 24 	lds	r16, 0x24BD
    43ea:	10 91 be 24 	lds	r17, 0x24BE
    43ee:	00 0f       	add	r16, r16
    43f0:	11 1f       	adc	r17, r17
    43f2:	00 0f       	add	r16, r16
    43f4:	11 1f       	adc	r17, r17
    43f6:	0c 54       	subi	r16, 0x4C	; 76
    43f8:	1b 4d       	sbci	r17, 0xDB	; 219
    43fa:	a5 01       	movw	r20, r10
    43fc:	94 01       	movw	r18, r8
    43fe:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    4402:	9b 01       	movw	r18, r22
    4404:	ac 01       	movw	r20, r24
    4406:	60 91 d5 24 	lds	r22, 0x24D5
    440a:	70 91 d6 24 	lds	r23, 0x24D6
    440e:	80 91 d7 24 	lds	r24, 0x24D7
    4412:	90 91 d8 24 	lds	r25, 0x24D8
    4416:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__addsf3>
    441a:	f8 01       	movw	r30, r16
    441c:	65 87       	std	Z+13, r22	; 0x0d
    441e:	76 87       	std	Z+14, r23	; 0x0e
    4420:	87 87       	std	Z+15, r24	; 0x0f
    4422:	90 8b       	std	Z+16, r25	; 0x10
		ma.dtarget[ma.axis_linear] += ma.linear_per_segment;
    4424:	00 91 bf 24 	lds	r16, 0x24BF
    4428:	10 91 c0 24 	lds	r17, 0x24C0
    442c:	00 0f       	add	r16, r16
    442e:	11 1f       	adc	r17, r17
    4430:	00 0f       	add	r16, r16
    4432:	11 1f       	adc	r17, r17
    4434:	0c 54       	subi	r16, 0x4C	; 76
    4436:	1b 4d       	sbci	r17, 0xDB	; 219
    4438:	d8 01       	movw	r26, r16
    443a:	1d 96       	adiw	r26, 0x0d	; 13
    443c:	6d 91       	ld	r22, X+
    443e:	7d 91       	ld	r23, X+
    4440:	8d 91       	ld	r24, X+
    4442:	9c 91       	ld	r25, X
    4444:	50 97       	sbiw	r26, 0x10	; 16
    4446:	20 91 e9 24 	lds	r18, 0x24E9
    444a:	30 91 ea 24 	lds	r19, 0x24EA
    444e:	40 91 eb 24 	lds	r20, 0x24EB
    4452:	50 91 ec 24 	lds	r21, 0x24EC
    4456:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <__addsf3>
    445a:	f8 01       	movw	r30, r16
    445c:	65 87       	std	Z+13, r22	; 0x0d
    445e:	76 87       	std	Z+14, r23	; 0x0e
    4460:	87 87       	std	Z+15, r24	; 0x0f
    4462:	90 8b       	std	Z+16, r25	; 0x10
		mc_line(ma.dtarget[X_AXIS], 
    4464:	60 91 c1 24 	lds	r22, 0x24C1
    4468:	70 91 c2 24 	lds	r23, 0x24C2
    446c:	80 91 c3 24 	lds	r24, 0x24C3
    4470:	90 91 c4 24 	lds	r25, 0x24C4
    4474:	20 91 c5 24 	lds	r18, 0x24C5
    4478:	30 91 c6 24 	lds	r19, 0x24C6
    447c:	40 91 c7 24 	lds	r20, 0x24C7
    4480:	50 91 c8 24 	lds	r21, 0x24C8
    4484:	e0 90 c9 24 	lds	r14, 0x24C9
    4488:	f0 90 ca 24 	lds	r15, 0x24CA
    448c:	00 91 cb 24 	lds	r16, 0x24CB
    4490:	10 91 cc 24 	lds	r17, 0x24CC
    4494:	a0 90 e1 24 	lds	r10, 0x24E1
    4498:	b0 90 e2 24 	lds	r11, 0x24E2
    449c:	c0 90 e3 24 	lds	r12, 0x24E3
    44a0:	d0 90 e4 24 	lds	r13, 0x24E4
    44a4:	80 90 b9 24 	lds	r8, 0x24B9
    44a8:	90 90 ba 24 	lds	r9, 0x24BA
    44ac:	0e 94 17 1c 	call	0x382e	; 0x382e <mc_line>

  	// 	A vector to track the end point of each segment. Initialize the linear axis
	ma.dtarget[ma.axis_linear] = mc.position[ma.axis_linear]/CFG(Z_AXIS).steps_per_mm;
	
	//	Generate and queue the line segments along the arc
	for (ma.segment_counter=0; ma.segment_counter<=ma.segments; ma.segment_counter++) {
    44b0:	80 91 b7 24 	lds	r24, 0x24B7
    44b4:	90 91 b8 24 	lds	r25, 0x24B8
    44b8:	01 96       	adiw	r24, 0x01	; 1
    44ba:	80 93 b7 24 	sts	0x24B7, r24
    44be:	90 93 b8 24 	sts	0x24B8, r25
    44c2:	20 91 b7 24 	lds	r18, 0x24B7
    44c6:	30 91 b8 24 	lds	r19, 0x24B8
    44ca:	80 91 b5 24 	lds	r24, 0x24B5
    44ce:	90 91 b6 24 	lds	r25, 0x24B6
    44d2:	82 17       	cp	r24, r18
    44d4:	93 07       	cpc	r25, r19
    44d6:	0c f0       	brlt	.+2      	; 0x44da <mc_arc+0x4b4>
    44d8:	35 cf       	rjmp	.-406    	; 0x4344 <mc_arc+0x31e>
    44da:	20 e0       	ldi	r18, 0x00	; 0
    44dc:	30 e0       	ldi	r19, 0x00	; 0
				ma.dtarget[Z_AXIS], 
				ma.feed_rate, 
				ma.invert_feed_rate);
  	}
	return (TG_OK);
}
    44de:	c9 01       	movw	r24, r18
    44e0:	28 96       	adiw	r28, 0x08	; 8
    44e2:	cd bf       	out	0x3d, r28	; 61
    44e4:	de bf       	out	0x3e, r29	; 62
    44e6:	cf 91       	pop	r28
    44e8:	df 91       	pop	r29
    44ea:	1f 91       	pop	r17
    44ec:	0f 91       	pop	r16
    44ee:	ff 90       	pop	r15
    44f0:	ef 90       	pop	r14
    44f2:	df 90       	pop	r13
    44f4:	cf 90       	pop	r12
    44f6:	bf 90       	pop	r11
    44f8:	af 90       	pop	r10
    44fa:	9f 90       	pop	r9
    44fc:	8f 90       	pop	r8
    44fe:	7f 90       	pop	r7
    4500:	6f 90       	pop	r6
    4502:	5f 90       	pop	r5
    4504:	4f 90       	pop	r4
    4506:	3f 90       	pop	r3
    4508:	2f 90       	pop	r2
    450a:	08 95       	ret

0000450c <spindle_init>:
 *	See config.h for settings
 */

void spindle_init()
{
	SPINDLE_ENABLE_PORT.DIRSET = SPINDLE_ENABLE_BIT_bm;
    450c:	e0 e6       	ldi	r30, 0x60	; 96
    450e:	f6 e0       	ldi	r31, 0x06	; 6
    4510:	80 e4       	ldi	r24, 0x40	; 64
    4512:	81 83       	std	Z+1, r24	; 0x01
	SPINDLE_DIRECTION_PORT.DIRSET = SPINDLE_DIRECTION_BIT_bm;
    4514:	80 e8       	ldi	r24, 0x80	; 128
    4516:	81 83       	std	Z+1, r24	; 0x01
}
    4518:	08 95       	ret

0000451a <spindle_run>:

void spindle_run(int direction, uint32_t rpm) 
{
	if(direction >= 0) {
    451a:	97 fd       	sbrc	r25, 7
    451c:	05 c0       	rjmp	.+10     	; 0x4528 <spindle_run+0xe>
    	SPINDLE_DIRECTION_PORT.OUTSET = SPINDLE_DIRECTION_BIT_bm;
    451e:	80 e8       	ldi	r24, 0x80	; 128
    4520:	e0 e6       	ldi	r30, 0x60	; 96
    4522:	f6 e0       	ldi	r31, 0x06	; 6
    4524:	85 83       	std	Z+5, r24	; 0x05
    4526:	04 c0       	rjmp	.+8      	; 0x4530 <spindle_run+0x16>
	} else {
    	SPINDLE_DIRECTION_PORT.OUTCLR = SPINDLE_DIRECTION_BIT_bm;
    4528:	80 e8       	ldi	r24, 0x80	; 128
    452a:	e0 e6       	ldi	r30, 0x60	; 96
    452c:	f6 e0       	ldi	r31, 0x06	; 6
    452e:	86 83       	std	Z+6, r24	; 0x06
	}
	SPINDLE_ENABLE_PORT.OUTSET = SPINDLE_ENABLE_BIT_bm;
    4530:	80 e4       	ldi	r24, 0x40	; 64
    4532:	e0 e6       	ldi	r30, 0x60	; 96
    4534:	f6 e0       	ldi	r31, 0x06	; 6
    4536:	85 83       	std	Z+5, r24	; 0x05
}
    4538:	08 95       	ret

0000453a <spindle_stop>:

void spindle_stop()
{
	SPINDLE_ENABLE_PORT.OUTCLR = SPINDLE_ENABLE_BIT_bm;
    453a:	80 e4       	ldi	r24, 0x40	; 64
    453c:	e0 e6       	ldi	r30, 0x60	; 96
    453e:	f6 e0       	ldi	r31, 0x06	; 6
    4540:	86 83       	std	Z+6, r24	; 0x06
}
    4542:	08 95       	ret

00004544 <st_init>:
 *	Note: high level interrupts must be enabled in main()
 *	Note: limit switches and other use of the ports may extend this init.
 */

void st_init()
{
    4544:	cf 93       	push	r28
    4546:	df 93       	push	r29
	ax.active_axes = 0;								// clear all active bits
    4548:	10 92 05 24 	sts	0x2405, r1
	ax.exec_mutex = FALSE;
    454c:	10 92 04 24 	sts	0x2404, r1

	ax.a[X_AXIS].port = &X_MOTOR_PORT;				// bind PORTs to structs
    4550:	80 e0       	ldi	r24, 0x00	; 0
    4552:	96 e0       	ldi	r25, 0x06	; 6
    4554:	80 93 13 24 	sts	0x2413, r24
    4558:	90 93 14 24 	sts	0x2414, r25
	ax.a[Y_AXIS].port = &Y_MOTOR_PORT;
    455c:	80 ea       	ldi	r24, 0xA0	; 160
    455e:	96 e0       	ldi	r25, 0x06	; 6
    4560:	80 93 22 24 	sts	0x2422, r24
    4564:	90 93 23 24 	sts	0x2423, r25
	ax.a[Z_AXIS].port = &Z_MOTOR_PORT;
    4568:	80 e8       	ldi	r24, 0x80	; 128
    456a:	96 e0       	ldi	r25, 0x06	; 6
    456c:	80 93 31 24 	sts	0x2431, r24
    4570:	90 93 32 24 	sts	0x2432, r25
	ax.a[A_AXIS].port = &A_MOTOR_PORT;
    4574:	80 e6       	ldi	r24, 0x60	; 96
    4576:	96 e0       	ldi	r25, 0x06	; 6
    4578:	80 93 40 24 	sts	0x2440, r24
    457c:	90 93 41 24 	sts	0x2441, r25

	ax.a[X_AXIS].timer = &X_TIMER;					// bind TIMERs to structs
    4580:	80 e0       	ldi	r24, 0x00	; 0
    4582:	98 e0       	ldi	r25, 0x08	; 8
    4584:	80 93 15 24 	sts	0x2415, r24
    4588:	90 93 16 24 	sts	0x2416, r25
	ax.a[Y_AXIS].timer = &Y_TIMER;
    458c:	80 e0       	ldi	r24, 0x00	; 0
    458e:	99 e0       	ldi	r25, 0x09	; 9
    4590:	80 93 24 24 	sts	0x2424, r24
    4594:	90 93 25 24 	sts	0x2425, r25
	ax.a[Z_AXIS].timer = &Z_TIMER;
    4598:	80 e0       	ldi	r24, 0x00	; 0
    459a:	9a e0       	ldi	r25, 0x0A	; 10
    459c:	80 93 33 24 	sts	0x2433, r24
    45a0:	90 93 34 24 	sts	0x2434, r25
	ax.a[A_AXIS].timer = &A_TIMER;
    45a4:	80 e0       	ldi	r24, 0x00	; 0
    45a6:	9b e0       	ldi	r25, 0x0B	; 11
    45a8:	80 93 42 24 	sts	0x2442, r24
    45ac:	90 93 43 24 	sts	0x2443, r25
    45b0:	c4 e5       	ldi	r28, 0x54	; 84
    45b2:	d4 e2       	ldi	r29, 0x24	; 36
    45b4:	a2 e1       	ldi	r26, 0x12	; 18
    45b6:	b4 e2       	ldi	r27, 0x24	; 36

	for (uint8_t i=0; i <= A_AXIS; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    45b8:	3f e3       	ldi	r19, 0x3F	; 63
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    45ba:	24 e0       	ldi	r18, 0x04	; 4
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    45bc:	93 e0       	ldi	r25, 0x03	; 3
	ax.a[Y_AXIS].timer = &Y_TIMER;
	ax.a[Z_AXIS].timer = &Z_TIMER;
	ax.a[A_AXIS].timer = &A_TIMER;

	for (uint8_t i=0; i <= A_AXIS; i++) {
		ax.a[i].polarity = cfg.a[i].polarity;
    45be:	88 81       	ld	r24, Y
    45c0:	8c 93       	st	X, r24

		ax.a[i].port->DIR = MOTOR_PORT_DIR_gm;		// set inputs and outputs
    45c2:	11 96       	adiw	r26, 0x01	; 1
    45c4:	ed 91       	ld	r30, X+
    45c6:	fc 91       	ld	r31, X
    45c8:	12 97       	sbiw	r26, 0x02	; 2
    45ca:	30 83       	st	Z, r19
		ax.a[i].port->OUT = 0x00;					// set port bits to zero
    45cc:	11 96       	adiw	r26, 0x01	; 1
    45ce:	ed 91       	ld	r30, X+
    45d0:	fc 91       	ld	r31, X
    45d2:	12 97       	sbiw	r26, 0x02	; 2
    45d4:	14 82       	std	Z+4, r1	; 0x04
		ax.a[i].port->OUT |= MICROSTEP_UNITS_bm;	// set microstep bits
    45d6:	11 96       	adiw	r26, 0x01	; 1
    45d8:	ed 91       	ld	r30, X+
    45da:	fc 91       	ld	r31, X
    45dc:	12 97       	sbiw	r26, 0x02	; 2
    45de:	84 81       	ldd	r24, Z+4	; 0x04
    45e0:	88 61       	ori	r24, 0x18	; 24
    45e2:	84 83       	std	Z+4, r24	; 0x04
		ax.a[i].port->OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    45e4:	11 96       	adiw	r26, 0x01	; 1
    45e6:	ed 91       	ld	r30, X+
    45e8:	fc 91       	ld	r31, X
    45ea:	12 97       	sbiw	r26, 0x02	; 2
    45ec:	25 83       	std	Z+5, r18	; 0x05
		// limit switch setup in ls_init()

		ax.a[i].timer->CTRLA = TC_CLK_OFF;			// turn motor off
    45ee:	13 96       	adiw	r26, 0x03	; 3
    45f0:	ed 91       	ld	r30, X+
    45f2:	fc 91       	ld	r31, X
    45f4:	14 97       	sbiw	r26, 0x04	; 4
    45f6:	10 82       	st	Z, r1
		ax.a[i].timer->CTRLB = TC_WGMODE;			// waveform generation mode
    45f8:	13 96       	adiw	r26, 0x03	; 3
    45fa:	ed 91       	ld	r30, X+
    45fc:	fc 91       	ld	r31, X
    45fe:	14 97       	sbiw	r26, 0x04	; 4
    4600:	11 82       	std	Z+1, r1	; 0x01
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
    4602:	13 96       	adiw	r26, 0x03	; 3
    4604:	ed 91       	ld	r30, X+
    4606:	fc 91       	ld	r31, X
    4608:	14 97       	sbiw	r26, 0x04	; 4
    460a:	96 83       	std	Z+6, r25	; 0x06
    460c:	68 96       	adiw	r28, 0x18	; 24
    460e:	1f 96       	adiw	r26, 0x0f	; 15
	ax.a[X_AXIS].timer = &X_TIMER;					// bind TIMERs to structs
	ax.a[Y_AXIS].timer = &Y_TIMER;
	ax.a[Z_AXIS].timer = &Z_TIMER;
	ax.a[A_AXIS].timer = &A_TIMER;

	for (uint8_t i=0; i <= A_AXIS; i++) {
    4610:	84 e2       	ldi	r24, 0x24	; 36
    4612:	c4 3b       	cpi	r28, 0xB4	; 180
    4614:	d8 07       	cpc	r29, r24
    4616:	99 f6       	brne	.-90     	; 0x45be <st_init+0x7a>
		ax.a[i].timer->INTCTRLA = TC_OVFINTLVL;		// interrupt mode
	}
	// if you need to anything special for A_AXIS (e.g. spindle), do it here

//	st_motor_test();							// run the startup motor test
}
    4618:	df 91       	pop	r29
    461a:	cf 91       	pop	r28
    461c:	08 95       	ret

0000461e <st_set_polarity>:
 * st_set_polarity() - setter needed by the config system
 */

void st_set_polarity(uint8_t axis, uint8_t polarity)
{
	ax.a[axis].polarity = polarity;
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	fc 01       	movw	r30, r24
    4622:	24 e0       	ldi	r18, 0x04	; 4
    4624:	ee 0f       	add	r30, r30
    4626:	ff 1f       	adc	r31, r31
    4628:	2a 95       	dec	r18
    462a:	e1 f7       	brne	.-8      	; 0x4624 <st_set_polarity+0x6>
    462c:	e8 1b       	sub	r30, r24
    462e:	f9 0b       	sbc	r31, r25
    4630:	ec 5f       	subi	r30, 0xFC	; 252
    4632:	fb 4d       	sbci	r31, 0xDB	; 219
    4634:	66 87       	std	Z+14, r22	; 0x0e
}
    4636:	08 95       	ret

00004638 <st_motor_test>:
/* 
 * st_motor_test() - test motor subsystem 
 */

void st_motor_test() {
	ax.a[X_AXIS].step_counter = 0x00001000;
    4638:	80 e0       	ldi	r24, 0x00	; 0
    463a:	90 e1       	ldi	r25, 0x10	; 16
    463c:	a0 e0       	ldi	r26, 0x00	; 0
    463e:	b0 e0       	ldi	r27, 0x00	; 0
    4640:	80 93 08 24 	sts	0x2408, r24
    4644:	90 93 09 24 	sts	0x2409, r25
    4648:	a0 93 0a 24 	sts	0x240A, r26
    464c:	b0 93 0b 24 	sts	0x240B, r27
	ax.a[X_AXIS].timer->PER = 0x1000;					// step rate (period)
    4650:	e0 91 15 24 	lds	r30, 0x2415
    4654:	f0 91 16 24 	lds	r31, 0x2416
    4658:	80 e0       	ldi	r24, 0x00	; 0
    465a:	90 e1       	ldi	r25, 0x10	; 16
    465c:	86 a3       	std	Z+38, r24	; 0x26
    465e:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[X_AXIS].timer->CTRLA = TC_CLK_ON;				// start clock
    4660:	21 e0       	ldi	r18, 0x01	; 1
    4662:	20 83       	st	Z, r18

	ax.a[Y_AXIS].step_counter = 0x00000800;
    4664:	80 e0       	ldi	r24, 0x00	; 0
    4666:	98 e0       	ldi	r25, 0x08	; 8
    4668:	a0 e0       	ldi	r26, 0x00	; 0
    466a:	b0 e0       	ldi	r27, 0x00	; 0
    466c:	80 93 17 24 	sts	0x2417, r24
    4670:	90 93 18 24 	sts	0x2418, r25
    4674:	a0 93 19 24 	sts	0x2419, r26
    4678:	b0 93 1a 24 	sts	0x241A, r27
	ax.a[Y_AXIS].timer->PER = 0x2000;
    467c:	e0 91 24 24 	lds	r30, 0x2424
    4680:	f0 91 25 24 	lds	r31, 0x2425
    4684:	80 e0       	ldi	r24, 0x00	; 0
    4686:	90 e2       	ldi	r25, 0x20	; 32
    4688:	86 a3       	std	Z+38, r24	; 0x26
    468a:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Y_AXIS].timer->CTRLA = TC_CLK_ON;
    468c:	20 83       	st	Z, r18

	ax.a[Z_AXIS].step_counter = 0x00000600;
    468e:	80 e0       	ldi	r24, 0x00	; 0
    4690:	96 e0       	ldi	r25, 0x06	; 6
    4692:	a0 e0       	ldi	r26, 0x00	; 0
    4694:	b0 e0       	ldi	r27, 0x00	; 0
    4696:	80 93 26 24 	sts	0x2426, r24
    469a:	90 93 27 24 	sts	0x2427, r25
    469e:	a0 93 28 24 	sts	0x2428, r26
    46a2:	b0 93 29 24 	sts	0x2429, r27
	ax.a[Z_AXIS].timer->PER = 0x3000;
    46a6:	e0 91 33 24 	lds	r30, 0x2433
    46aa:	f0 91 34 24 	lds	r31, 0x2434
    46ae:	80 e0       	ldi	r24, 0x00	; 0
    46b0:	90 e3       	ldi	r25, 0x30	; 48
    46b2:	86 a3       	std	Z+38, r24	; 0x26
    46b4:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[Z_AXIS].timer->CTRLA = TC_CLK_ON;
    46b6:	20 83       	st	Z, r18

	ax.a[A_AXIS].step_counter = 0x00000400;
    46b8:	80 e0       	ldi	r24, 0x00	; 0
    46ba:	94 e0       	ldi	r25, 0x04	; 4
    46bc:	a0 e0       	ldi	r26, 0x00	; 0
    46be:	b0 e0       	ldi	r27, 0x00	; 0
    46c0:	80 93 35 24 	sts	0x2435, r24
    46c4:	90 93 36 24 	sts	0x2436, r25
    46c8:	a0 93 37 24 	sts	0x2437, r26
    46cc:	b0 93 38 24 	sts	0x2438, r27
	ax.a[A_AXIS].timer->PER = 0x4000;
    46d0:	e0 91 42 24 	lds	r30, 0x2442
    46d4:	f0 91 43 24 	lds	r31, 0x2443
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	90 e4       	ldi	r25, 0x40	; 64
    46dc:	86 a3       	std	Z+38, r24	; 0x26
    46de:	97 a3       	std	Z+39, r25	; 0x27
	ax.a[A_AXIS].timer->CTRLA = TC_CLK_ON;
    46e0:	20 83       	st	Z, r18

	ax.active_axes |= (X_ACTIVE_BIT_bm | Y_ACTIVE_BIT_bm | Z_ACTIVE_BIT_bm | A_ACTIVE_BIT_bm);
    46e2:	e5 e0       	ldi	r30, 0x05	; 5
    46e4:	f4 e2       	ldi	r31, 0x24	; 36
    46e6:	80 81       	ld	r24, Z
    46e8:	8f 60       	ori	r24, 0x0F	; 15
    46ea:	80 83       	st	Z, r24
}
    46ec:	08 95       	ret

000046ee <st_terminate>:
 * st_terminate() - stop moves after the current move
 */

void st_terminate()
{
	cli();
    46ee:	f8 94       	cli
	mv_flush();									// flush the move buffer
    46f0:	0e 94 20 30 	call	0x6040	; 0x6040 <mv_flush>
	sei();
    46f4:	78 94       	sei
}
    46f6:	08 95       	ret

000046f8 <st_stop_steppers>:
 * st_kill() - STOP. NOW. UNCONDITIONALLY
 */

void st_stop_steppers()
{
	cli();										// stop interrupts
    46f8:	f8 94       	cli
	ax.a[X_AXIS].timer->CTRLA = TC_CLK_OFF;		// stop the clocks
    46fa:	e0 91 15 24 	lds	r30, 0x2415
    46fe:	f0 91 16 24 	lds	r31, 0x2416
    4702:	10 82       	st	Z, r1
	ax.a[Y_AXIS].timer->CTRLA = TC_CLK_OFF;
    4704:	e0 91 24 24 	lds	r30, 0x2424
    4708:	f0 91 25 24 	lds	r31, 0x2425
    470c:	10 82       	st	Z, r1
	ax.a[Z_AXIS].timer->CTRLA = TC_CLK_OFF;
    470e:	e0 91 33 24 	lds	r30, 0x2433
    4712:	f0 91 34 24 	lds	r31, 0x2434
    4716:	10 82       	st	Z, r1
	ax.a[A_AXIS].timer->CTRLA = TC_CLK_OFF;
    4718:	e0 91 42 24 	lds	r30, 0x2442
    471c:	f0 91 43 24 	lds	r31, 0x2443
    4720:	10 82       	st	Z, r1
	
	mv_flush();									// flush the move buffer
    4722:	0e 94 20 30 	call	0x6040	; 0x6040 <mv_flush>
	ax.active_axes = 0;							// clear all the active bits
    4726:	10 92 05 24 	sts	0x2405, r1
	sei();
    472a:	78 94       	sei
}
    472c:	08 95       	ret

0000472e <st_execute_move>:
 *	reason they are not active - the ISR found nothing to load. So please don't 
 *	mess with the ordering of this code region.
 */

void st_execute_move()
{
    472e:	cf 93       	push	r28
    4730:	df 93       	push	r29
	uint8_t i;

	// ******** don't re-order this code region - from here... ********
	if (ax.exec_mutex) { 	// prevents ISR from clobbering non-ISR invocation
    4732:	80 91 04 24 	lds	r24, 0x2404
    4736:	88 23       	and	r24, r24
    4738:	09 f0       	breq	.+2      	; 0x473c <st_execute_move+0xe>
    473a:	b6 c0       	rjmp	.+364    	; 0x48a8 <st_execute_move+0x17a>
		return;
	}
	ax.exec_mutex = TRUE;
    473c:	81 e0       	ldi	r24, 0x01	; 1
    473e:	80 93 04 24 	sts	0x2404, r24
	if (ax.active_axes != 0) {	// exit if any axis is still busy (any bit set)
    4742:	80 91 05 24 	lds	r24, 0x2405
    4746:	88 23       	and	r24, r24
    4748:	09 f0       	breq	.+2      	; 0x474c <st_execute_move+0x1e>
    474a:	ac c0       	rjmp	.+344    	; 0x48a4 <st_execute_move+0x176>
		ax.exec_mutex = FALSE;	
		return;
	}
	if ((ax.p = mv_dequeue_move_buffer()) == NULL) {// NULL is empty buffer condition
    474c:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <mv_dequeue_move_buffer>
    4750:	80 93 06 24 	sts	0x2406, r24
    4754:	90 93 07 24 	sts	0x2407, r25
    4758:	89 2b       	or	r24, r25
    475a:	09 f4       	brne	.+2      	; 0x475e <st_execute_move+0x30>
    475c:	a3 c0       	rjmp	.+326    	; 0x48a4 <st_execute_move+0x176>
		ax.exec_mutex = FALSE;
		return;
    475e:	c8 e0       	ldi	r28, 0x08	; 8
    4760:	d4 e2       	ldi	r29, 0x24	; 36
    4762:	20 e0       	ldi	r18, 0x00	; 0
    4764:	30 e0       	ldi	r19, 0x00	; 0
		ax.a[i].step_counter = ax.p->a[i].steps;
		ax.a[i].postscale_value = ax.p->a[i].postscale;
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4766:	54 e0       	ldi	r21, 0x04	; 4
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
			continue;
		}
		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    4768:	42 e0       	ldi	r20, 0x02	; 2
	_st_fake_move();
	return;
#endif

	for (i = X_AXIS; i <= Z_AXIS; i++) {
		ax.a[i].timer->CTRLA = TC_CLK_OFF;		// turn clock off, to be sure
    476a:	ed 85       	ldd	r30, Y+13	; 0x0d
    476c:	fe 85       	ldd	r31, Y+14	; 0x0e
    476e:	10 82       	st	Z, r1
		if (ax.p->a[i].steps == 0) {			// skip axis if zero steps
    4770:	e0 91 06 24 	lds	r30, 0x2406
    4774:	f0 91 07 24 	lds	r31, 0x2407
    4778:	c9 01       	movw	r24, r18
    477a:	73 e0       	ldi	r23, 0x03	; 3
    477c:	88 0f       	add	r24, r24
    477e:	99 1f       	adc	r25, r25
    4780:	7a 95       	dec	r23
    4782:	e1 f7       	brne	.-8      	; 0x477c <st_execute_move+0x4e>
    4784:	82 0f       	add	r24, r18
    4786:	93 1f       	adc	r25, r19
    4788:	e8 0f       	add	r30, r24
    478a:	f9 1f       	adc	r31, r25
    478c:	80 81       	ld	r24, Z
    478e:	91 81       	ldd	r25, Z+1	; 0x01
    4790:	a2 81       	ldd	r26, Z+2	; 0x02
    4792:	b3 81       	ldd	r27, Z+3	; 0x03
    4794:	00 97       	sbiw	r24, 0x00	; 0
    4796:	a1 05       	cpc	r26, r1
    4798:	b1 05       	cpc	r27, r1
    479a:	b1 f1       	breq	.+108    	; 0x4808 <st_execute_move+0xda>
			continue;
		}
		// set direction bit and compensate for polarity
		(ax.p->a[i].direction ^ ax.a[i].polarity) ?
    479c:	90 85       	ldd	r25, Z+8	; 0x08
    479e:	8a 85       	ldd	r24, Y+10	; 0x0a
    47a0:	eb 85       	ldd	r30, Y+11	; 0x0b
    47a2:	fc 85       	ldd	r31, Y+12	; 0x0c
    47a4:	98 17       	cp	r25, r24
    47a6:	11 f0       	breq	.+4      	; 0x47ac <st_execute_move+0x7e>
    47a8:	45 83       	std	Z+5, r20	; 0x05
    47aa:	01 c0       	rjmp	.+2      	; 0x47ae <st_execute_move+0x80>
    47ac:	46 83       	std	Z+6, r20	; 0x06
		   (ax.a[i].port->OUTSET = DIRECTION_BIT_bm):	// CCW
		   (ax.a[i].port->OUTCLR = DIRECTION_BIT_bm);	// CW

		// load timers and other stepper ISR values
		ax.a[i].step_counter = ax.p->a[i].steps;
    47ae:	e0 91 06 24 	lds	r30, 0x2406
    47b2:	f0 91 07 24 	lds	r31, 0x2407
    47b6:	c9 01       	movw	r24, r18
    47b8:	63 e0       	ldi	r22, 0x03	; 3
    47ba:	88 0f       	add	r24, r24
    47bc:	99 1f       	adc	r25, r25
    47be:	6a 95       	dec	r22
    47c0:	e1 f7       	brne	.-8      	; 0x47ba <st_execute_move+0x8c>
    47c2:	82 0f       	add	r24, r18
    47c4:	93 1f       	adc	r25, r19
    47c6:	e8 0f       	add	r30, r24
    47c8:	f9 1f       	adc	r31, r25
    47ca:	80 81       	ld	r24, Z
    47cc:	91 81       	ldd	r25, Z+1	; 0x01
    47ce:	a2 81       	ldd	r26, Z+2	; 0x02
    47d0:	b3 81       	ldd	r27, Z+3	; 0x03
    47d2:	88 83       	st	Y, r24
    47d4:	99 83       	std	Y+1, r25	; 0x01
    47d6:	aa 83       	std	Y+2, r26	; 0x02
    47d8:	bb 83       	std	Y+3, r27	; 0x03
		ax.a[i].postscale_value = ax.p->a[i].postscale;
    47da:	86 81       	ldd	r24, Z+6	; 0x06
    47dc:	97 81       	ldd	r25, Z+7	; 0x07
    47de:	8e 83       	std	Y+6, r24	; 0x06
    47e0:	9f 83       	std	Y+7, r25	; 0x07
		ax.a[i].postscale_counter = ax.p->a[i].postscale;
    47e2:	86 81       	ldd	r24, Z+6	; 0x06
    47e4:	97 81       	ldd	r25, Z+7	; 0x07
    47e6:	88 87       	std	Y+8, r24	; 0x08
    47e8:	99 87       	std	Y+9, r25	; 0x09
		ax.a[i].timer_period = ax.p->a[i].period;		// not used for anything
    47ea:	84 81       	ldd	r24, Z+4	; 0x04
    47ec:	95 81       	ldd	r25, Z+5	; 0x05
    47ee:	8c 83       	std	Y+4, r24	; 0x04
    47f0:	9d 83       	std	Y+5, r25	; 0x05
		ax.a[i].timer->PER = ax.p->a[i].period;
    47f2:	ad 85       	ldd	r26, Y+13	; 0x0d
    47f4:	be 85       	ldd	r27, Y+14	; 0x0e
    47f6:	84 81       	ldd	r24, Z+4	; 0x04
    47f8:	95 81       	ldd	r25, Z+5	; 0x05
    47fa:	96 96       	adiw	r26, 0x26	; 38
    47fc:	8d 93       	st	X+, r24
    47fe:	9c 93       	st	X, r25
    4800:	97 97       	sbiw	r26, 0x27	; 39
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
    4802:	eb 85       	ldd	r30, Y+11	; 0x0b
    4804:	fc 85       	ldd	r31, Y+12	; 0x0c
    4806:	56 83       	std	Z+6, r21	; 0x06
    4808:	2f 5f       	subi	r18, 0xFF	; 255
    480a:	3f 4f       	sbci	r19, 0xFF	; 255
    480c:	2f 96       	adiw	r28, 0x0f	; 15
#ifdef __FAKE_STEPPERS	// bypasses the ISR load for fast debugging in simulation
	_st_fake_move();
	return;
#endif

	for (i = X_AXIS; i <= Z_AXIS; i++) {
    480e:	23 30       	cpi	r18, 0x03	; 3
    4810:	31 05       	cpc	r19, r1
    4812:	09 f0       	breq	.+2      	; 0x4816 <st_execute_move+0xe8>
    4814:	aa cf       	rjmp	.-172    	; 0x476a <st_execute_move+0x3c>
		ax.a[i].timer->PER = ax.p->a[i].period;
		ax.a[i].port->OUTCLR = MOTOR_ENABLE_BIT_bm;		// enable motor
	}

	// enable all the axes at the same time (roughly). Better for motor sync.
	ax.active_axes = 0;
    4816:	10 92 05 24 	sts	0x2405, r1
	if (ax.a[X_AXIS].step_counter) { 
    481a:	80 91 08 24 	lds	r24, 0x2408
    481e:	90 91 09 24 	lds	r25, 0x2409
    4822:	a0 91 0a 24 	lds	r26, 0x240A
    4826:	b0 91 0b 24 	lds	r27, 0x240B
    482a:	00 97       	sbiw	r24, 0x00	; 0
    482c:	a1 05       	cpc	r26, r1
    482e:	b1 05       	cpc	r27, r1
    4830:	59 f0       	breq	.+22     	; 0x4848 <st_execute_move+0x11a>
		ax.a[X_AXIS].timer->CTRLA = TC_CLK_ON;
    4832:	e0 91 15 24 	lds	r30, 0x2415
    4836:	f0 91 16 24 	lds	r31, 0x2416
    483a:	81 e0       	ldi	r24, 0x01	; 1
    483c:	80 83       	st	Z, r24
		ax.active_axes |= X_ACTIVE_BIT_bm;
    483e:	80 91 05 24 	lds	r24, 0x2405
    4842:	88 60       	ori	r24, 0x08	; 8
    4844:	80 93 05 24 	sts	0x2405, r24
	}
	if (ax.a[Y_AXIS].step_counter) {
    4848:	80 91 17 24 	lds	r24, 0x2417
    484c:	90 91 18 24 	lds	r25, 0x2418
    4850:	a0 91 19 24 	lds	r26, 0x2419
    4854:	b0 91 1a 24 	lds	r27, 0x241A
    4858:	00 97       	sbiw	r24, 0x00	; 0
    485a:	a1 05       	cpc	r26, r1
    485c:	b1 05       	cpc	r27, r1
    485e:	59 f0       	breq	.+22     	; 0x4876 <st_execute_move+0x148>
		ax.a[Y_AXIS].timer->CTRLA = TC_CLK_ON;
    4860:	e0 91 24 24 	lds	r30, 0x2424
    4864:	f0 91 25 24 	lds	r31, 0x2425
    4868:	81 e0       	ldi	r24, 0x01	; 1
    486a:	80 83       	st	Z, r24
		ax.active_axes |= Y_ACTIVE_BIT_bm;
    486c:	80 91 05 24 	lds	r24, 0x2405
    4870:	84 60       	ori	r24, 0x04	; 4
    4872:	80 93 05 24 	sts	0x2405, r24
	}
	if (ax.a[Z_AXIS].step_counter) {
    4876:	80 91 26 24 	lds	r24, 0x2426
    487a:	90 91 27 24 	lds	r25, 0x2427
    487e:	a0 91 28 24 	lds	r26, 0x2428
    4882:	b0 91 29 24 	lds	r27, 0x2429
    4886:	00 97       	sbiw	r24, 0x00	; 0
    4888:	a1 05       	cpc	r26, r1
    488a:	b1 05       	cpc	r27, r1
    488c:	59 f0       	breq	.+22     	; 0x48a4 <st_execute_move+0x176>
		ax.a[Z_AXIS].timer->CTRLA = TC_CLK_ON;
    488e:	e0 91 33 24 	lds	r30, 0x2433
    4892:	f0 91 34 24 	lds	r31, 0x2434
    4896:	81 e0       	ldi	r24, 0x01	; 1
    4898:	80 83       	st	Z, r24
		ax.active_axes |= Z_ACTIVE_BIT_bm;
    489a:	80 91 05 24 	lds	r24, 0x2405
    489e:	82 60       	ori	r24, 0x02	; 2
    48a0:	80 93 05 24 	sts	0x2405, r24
#ifdef __DEBUG
//	_st_print_exec_line(ax.a[X_AXIS].step_counter,
//						ax.a[Y_AXIS].step_counter,
//						ax.a[Z_AXIS].step_counter, ax.active_axes);
#endif
	ax.exec_mutex = FALSE;
    48a4:	10 92 04 24 	sts	0x2404, r1
}
    48a8:	df 91       	pop	r29
    48aa:	cf 91       	pop	r28
    48ac:	08 95       	ret

000048ae <_st_fake_move>:
 * _st_fake_move() - Debugging tool
 */

void _st_fake_move()
{
	ax.exec_mutex = FALSE;
    48ae:	10 92 04 24 	sts	0x2404, r1
	st_execute_move();		// recursively empty the move queue
    48b2:	0e 94 97 23 	call	0x472e	; 0x472e <st_execute_move>
	return;
}
    48b6:	08 95       	ret

000048b8 <__vector_108>:
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(A_TIMER_ISR_vect)
{
    48b8:	1f 92       	push	r1
    48ba:	0f 92       	push	r0
    48bc:	0f b6       	in	r0, 0x3f	; 63
    48be:	0f 92       	push	r0
    48c0:	0b b6       	in	r0, 0x3b	; 59
    48c2:	0f 92       	push	r0
    48c4:	11 24       	eor	r1, r1
    48c6:	2f 93       	push	r18
    48c8:	3f 93       	push	r19
    48ca:	4f 93       	push	r20
    48cc:	5f 93       	push	r21
    48ce:	6f 93       	push	r22
    48d0:	7f 93       	push	r23
    48d2:	8f 93       	push	r24
    48d4:	9f 93       	push	r25
    48d6:	af 93       	push	r26
    48d8:	bf 93       	push	r27
    48da:	ef 93       	push	r30
    48dc:	ff 93       	push	r31
	if (--ax.a[A_AXIS].postscale_counter != 0) {
    48de:	80 91 3d 24 	lds	r24, 0x243D
    48e2:	90 91 3e 24 	lds	r25, 0x243E
    48e6:	01 97       	sbiw	r24, 0x01	; 1
    48e8:	80 93 3d 24 	sts	0x243D, r24
    48ec:	90 93 3e 24 	sts	0x243E, r25
    48f0:	89 2b       	or	r24, r25
    48f2:	a1 f5       	brne	.+104    	; 0x495c <__vector_108+0xa4>
		return;
	}
	A_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    48f4:	e0 e6       	ldi	r30, 0x60	; 96
    48f6:	f6 e0       	ldi	r31, 0x06	; 6
    48f8:	81 e0       	ldi	r24, 0x01	; 1
    48fa:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[A_AXIS].step_counter == 0) {
    48fc:	80 91 35 24 	lds	r24, 0x2435
    4900:	90 91 36 24 	lds	r25, 0x2436
    4904:	a0 91 37 24 	lds	r26, 0x2437
    4908:	b0 91 38 24 	lds	r27, 0x2438
    490c:	01 97       	sbiw	r24, 0x01	; 1
    490e:	a1 09       	sbc	r26, r1
    4910:	b1 09       	sbc	r27, r1
    4912:	80 93 35 24 	sts	0x2435, r24
    4916:	90 93 36 24 	sts	0x2436, r25
    491a:	a0 93 37 24 	sts	0x2437, r26
    491e:	b0 93 38 24 	sts	0x2438, r27
    4922:	00 97       	sbiw	r24, 0x00	; 0
    4924:	a1 05       	cpc	r26, r1
    4926:	b1 05       	cpc	r27, r1
    4928:	69 f4       	brne	.+26     	; 0x4944 <__vector_108+0x8c>
		A_TIMER.CTRLA = TC_CLK_OFF;
    492a:	10 92 00 0b 	sts	0x0B00, r1
		A_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    492e:	84 e0       	ldi	r24, 0x04	; 4
    4930:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~A_ACTIVE_BIT_bm;
    4932:	80 91 05 24 	lds	r24, 0x2405
    4936:	8e 7f       	andi	r24, 0xFE	; 254
    4938:	80 93 05 24 	sts	0x2405, r24
		if (ax.active_axes == 0) {
    493c:	88 23       	and	r24, r24
    493e:	11 f4       	brne	.+4      	; 0x4944 <__vector_108+0x8c>
			st_execute_move();
    4940:	0e 94 97 23 	call	0x472e	; 0x472e <st_execute_move>
		}
	}
	ax.a[A_AXIS].postscale_counter = ax.a[A_AXIS].postscale_value;
    4944:	80 91 3b 24 	lds	r24, 0x243B
    4948:	90 91 3c 24 	lds	r25, 0x243C
    494c:	80 93 3d 24 	sts	0x243D, r24
    4950:	90 93 3e 24 	sts	0x243E, r25
	STEPPER_DELAY
	A_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4954:	81 e0       	ldi	r24, 0x01	; 1
    4956:	e0 e6       	ldi	r30, 0x60	; 96
    4958:	f6 e0       	ldi	r31, 0x06	; 6
    495a:	86 83       	std	Z+6, r24	; 0x06
}
    495c:	ff 91       	pop	r31
    495e:	ef 91       	pop	r30
    4960:	bf 91       	pop	r27
    4962:	af 91       	pop	r26
    4964:	9f 91       	pop	r25
    4966:	8f 91       	pop	r24
    4968:	7f 91       	pop	r23
    496a:	6f 91       	pop	r22
    496c:	5f 91       	pop	r21
    496e:	4f 91       	pop	r20
    4970:	3f 91       	pop	r19
    4972:	2f 91       	pop	r18
    4974:	0f 90       	pop	r0
    4976:	0b be       	out	0x3b, r0	; 59
    4978:	0f 90       	pop	r0
    497a:	0f be       	out	0x3f, r0	; 63
    497c:	0f 90       	pop	r0
    497e:	1f 90       	pop	r1
    4980:	18 95       	reti

00004982 <__vector_47>:
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
}

ISR(Z_TIMER_ISR_vect)
{
    4982:	1f 92       	push	r1
    4984:	0f 92       	push	r0
    4986:	0f b6       	in	r0, 0x3f	; 63
    4988:	0f 92       	push	r0
    498a:	0b b6       	in	r0, 0x3b	; 59
    498c:	0f 92       	push	r0
    498e:	11 24       	eor	r1, r1
    4990:	2f 93       	push	r18
    4992:	3f 93       	push	r19
    4994:	4f 93       	push	r20
    4996:	5f 93       	push	r21
    4998:	6f 93       	push	r22
    499a:	7f 93       	push	r23
    499c:	8f 93       	push	r24
    499e:	9f 93       	push	r25
    49a0:	af 93       	push	r26
    49a2:	bf 93       	push	r27
    49a4:	ef 93       	push	r30
    49a6:	ff 93       	push	r31
	if (--ax.a[Z_AXIS].postscale_counter != 0) {
    49a8:	80 91 2e 24 	lds	r24, 0x242E
    49ac:	90 91 2f 24 	lds	r25, 0x242F
    49b0:	01 97       	sbiw	r24, 0x01	; 1
    49b2:	80 93 2e 24 	sts	0x242E, r24
    49b6:	90 93 2f 24 	sts	0x242F, r25
    49ba:	89 2b       	or	r24, r25
    49bc:	a1 f5       	brne	.+104    	; 0x4a26 <__vector_47+0xa4>
		return;
	}
	Z_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    49be:	e0 e8       	ldi	r30, 0x80	; 128
    49c0:	f6 e0       	ldi	r31, 0x06	; 6
    49c2:	81 e0       	ldi	r24, 0x01	; 1
    49c4:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Z_AXIS].step_counter == 0) {
    49c6:	80 91 26 24 	lds	r24, 0x2426
    49ca:	90 91 27 24 	lds	r25, 0x2427
    49ce:	a0 91 28 24 	lds	r26, 0x2428
    49d2:	b0 91 29 24 	lds	r27, 0x2429
    49d6:	01 97       	sbiw	r24, 0x01	; 1
    49d8:	a1 09       	sbc	r26, r1
    49da:	b1 09       	sbc	r27, r1
    49dc:	80 93 26 24 	sts	0x2426, r24
    49e0:	90 93 27 24 	sts	0x2427, r25
    49e4:	a0 93 28 24 	sts	0x2428, r26
    49e8:	b0 93 29 24 	sts	0x2429, r27
    49ec:	00 97       	sbiw	r24, 0x00	; 0
    49ee:	a1 05       	cpc	r26, r1
    49f0:	b1 05       	cpc	r27, r1
    49f2:	69 f4       	brne	.+26     	; 0x4a0e <__vector_47+0x8c>
		Z_TIMER.CTRLA = TC_CLK_OFF;	
    49f4:	10 92 00 0a 	sts	0x0A00, r1
		Z_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    49f8:	84 e0       	ldi	r24, 0x04	; 4
    49fa:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Z_ACTIVE_BIT_bm;
    49fc:	80 91 05 24 	lds	r24, 0x2405
    4a00:	8d 7f       	andi	r24, 0xFD	; 253
    4a02:	80 93 05 24 	sts	0x2405, r24
		if (ax.active_axes == 0) {
    4a06:	88 23       	and	r24, r24
    4a08:	11 f4       	brne	.+4      	; 0x4a0e <__vector_47+0x8c>
			st_execute_move();
    4a0a:	0e 94 97 23 	call	0x472e	; 0x472e <st_execute_move>
		}
	}
	ax.a[Z_AXIS].postscale_counter = ax.a[Z_AXIS].postscale_value;
    4a0e:	80 91 2c 24 	lds	r24, 0x242C
    4a12:	90 91 2d 24 	lds	r25, 0x242D
    4a16:	80 93 2e 24 	sts	0x242E, r24
    4a1a:	90 93 2f 24 	sts	0x242F, r25
	STEPPER_DELAY
	Z_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4a1e:	81 e0       	ldi	r24, 0x01	; 1
    4a20:	e0 e8       	ldi	r30, 0x80	; 128
    4a22:	f6 e0       	ldi	r31, 0x06	; 6
    4a24:	86 83       	std	Z+6, r24	; 0x06
}
    4a26:	ff 91       	pop	r31
    4a28:	ef 91       	pop	r30
    4a2a:	bf 91       	pop	r27
    4a2c:	af 91       	pop	r26
    4a2e:	9f 91       	pop	r25
    4a30:	8f 91       	pop	r24
    4a32:	7f 91       	pop	r23
    4a34:	6f 91       	pop	r22
    4a36:	5f 91       	pop	r21
    4a38:	4f 91       	pop	r20
    4a3a:	3f 91       	pop	r19
    4a3c:	2f 91       	pop	r18
    4a3e:	0f 90       	pop	r0
    4a40:	0b be       	out	0x3b, r0	; 59
    4a42:	0f 90       	pop	r0
    4a44:	0f be       	out	0x3f, r0	; 63
    4a46:	0f 90       	pop	r0
    4a48:	1f 90       	pop	r1
    4a4a:	18 95       	reti

00004a4c <__vector_77>:
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
}

ISR(Y_TIMER_ISR_vect)
{
    4a4c:	1f 92       	push	r1
    4a4e:	0f 92       	push	r0
    4a50:	0f b6       	in	r0, 0x3f	; 63
    4a52:	0f 92       	push	r0
    4a54:	0b b6       	in	r0, 0x3b	; 59
    4a56:	0f 92       	push	r0
    4a58:	11 24       	eor	r1, r1
    4a5a:	2f 93       	push	r18
    4a5c:	3f 93       	push	r19
    4a5e:	4f 93       	push	r20
    4a60:	5f 93       	push	r21
    4a62:	6f 93       	push	r22
    4a64:	7f 93       	push	r23
    4a66:	8f 93       	push	r24
    4a68:	9f 93       	push	r25
    4a6a:	af 93       	push	r26
    4a6c:	bf 93       	push	r27
    4a6e:	ef 93       	push	r30
    4a70:	ff 93       	push	r31
	if (--ax.a[Y_AXIS].postscale_counter != 0) {
    4a72:	80 91 1f 24 	lds	r24, 0x241F
    4a76:	90 91 20 24 	lds	r25, 0x2420
    4a7a:	01 97       	sbiw	r24, 0x01	; 1
    4a7c:	80 93 1f 24 	sts	0x241F, r24
    4a80:	90 93 20 24 	sts	0x2420, r25
    4a84:	89 2b       	or	r24, r25
    4a86:	a1 f5       	brne	.+104    	; 0x4af0 <__vector_77+0xa4>
		return;
	}
	Y_MOTOR_PORT.OUTSET = STEP_BIT_bm;
    4a88:	e0 ea       	ldi	r30, 0xA0	; 160
    4a8a:	f6 e0       	ldi	r31, 0x06	; 6
    4a8c:	81 e0       	ldi	r24, 0x01	; 1
    4a8e:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[Y_AXIS].step_counter == 0) {
    4a90:	80 91 17 24 	lds	r24, 0x2417
    4a94:	90 91 18 24 	lds	r25, 0x2418
    4a98:	a0 91 19 24 	lds	r26, 0x2419
    4a9c:	b0 91 1a 24 	lds	r27, 0x241A
    4aa0:	01 97       	sbiw	r24, 0x01	; 1
    4aa2:	a1 09       	sbc	r26, r1
    4aa4:	b1 09       	sbc	r27, r1
    4aa6:	80 93 17 24 	sts	0x2417, r24
    4aaa:	90 93 18 24 	sts	0x2418, r25
    4aae:	a0 93 19 24 	sts	0x2419, r26
    4ab2:	b0 93 1a 24 	sts	0x241A, r27
    4ab6:	00 97       	sbiw	r24, 0x00	; 0
    4ab8:	a1 05       	cpc	r26, r1
    4aba:	b1 05       	cpc	r27, r1
    4abc:	69 f4       	brne	.+26     	; 0x4ad8 <__vector_77+0x8c>
		Y_TIMER.CTRLA = TC_CLK_OFF;
    4abe:	10 92 00 09 	sts	0x0900, r1
		Y_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm;
    4ac2:	84 e0       	ldi	r24, 0x04	; 4
    4ac4:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~Y_ACTIVE_BIT_bm;
    4ac6:	80 91 05 24 	lds	r24, 0x2405
    4aca:	8b 7f       	andi	r24, 0xFB	; 251
    4acc:	80 93 05 24 	sts	0x2405, r24
		if (ax.active_axes == 0) {
    4ad0:	88 23       	and	r24, r24
    4ad2:	11 f4       	brne	.+4      	; 0x4ad8 <__vector_77+0x8c>
			st_execute_move();
    4ad4:	0e 94 97 23 	call	0x472e	; 0x472e <st_execute_move>
		}
	}
	ax.a[Y_AXIS].postscale_counter = ax.a[Y_AXIS].postscale_value;
    4ad8:	80 91 1d 24 	lds	r24, 0x241D
    4adc:	90 91 1e 24 	lds	r25, 0x241E
    4ae0:	80 93 1f 24 	sts	0x241F, r24
    4ae4:	90 93 20 24 	sts	0x2420, r25
	STEPPER_DELAY
	Y_MOTOR_PORT.OUTCLR = STEP_BIT_bm;
    4ae8:	81 e0       	ldi	r24, 0x01	; 1
    4aea:	e0 ea       	ldi	r30, 0xA0	; 160
    4aec:	f6 e0       	ldi	r31, 0x06	; 6
    4aee:	86 83       	std	Z+6, r24	; 0x06
}
    4af0:	ff 91       	pop	r31
    4af2:	ef 91       	pop	r30
    4af4:	bf 91       	pop	r27
    4af6:	af 91       	pop	r26
    4af8:	9f 91       	pop	r25
    4afa:	8f 91       	pop	r24
    4afc:	7f 91       	pop	r23
    4afe:	6f 91       	pop	r22
    4b00:	5f 91       	pop	r21
    4b02:	4f 91       	pop	r20
    4b04:	3f 91       	pop	r19
    4b06:	2f 91       	pop	r18
    4b08:	0f 90       	pop	r0
    4b0a:	0b be       	out	0x3b, r0	; 59
    4b0c:	0f 90       	pop	r0
    4b0e:	0f be       	out	0x3f, r0	; 63
    4b10:	0f 90       	pop	r0
    4b12:	1f 90       	pop	r1
    4b14:	18 95       	reti

00004b16 <__vector_14>:
 *	Uses direct struct addresses and literal values for hardware devices because it's 
 *  faster than using the timer and port pointers in the axis structs
 */

ISR(X_TIMER_ISR_vect)
{
    4b16:	1f 92       	push	r1
    4b18:	0f 92       	push	r0
    4b1a:	0f b6       	in	r0, 0x3f	; 63
    4b1c:	0f 92       	push	r0
    4b1e:	0b b6       	in	r0, 0x3b	; 59
    4b20:	0f 92       	push	r0
    4b22:	11 24       	eor	r1, r1
    4b24:	2f 93       	push	r18
    4b26:	3f 93       	push	r19
    4b28:	4f 93       	push	r20
    4b2a:	5f 93       	push	r21
    4b2c:	6f 93       	push	r22
    4b2e:	7f 93       	push	r23
    4b30:	8f 93       	push	r24
    4b32:	9f 93       	push	r25
    4b34:	af 93       	push	r26
    4b36:	bf 93       	push	r27
    4b38:	ef 93       	push	r30
    4b3a:	ff 93       	push	r31
	if (--ax.a[X_AXIS].postscale_counter != 0) {// get out fast, if you need to
    4b3c:	80 91 10 24 	lds	r24, 0x2410
    4b40:	90 91 11 24 	lds	r25, 0x2411
    4b44:	01 97       	sbiw	r24, 0x01	; 1
    4b46:	80 93 10 24 	sts	0x2410, r24
    4b4a:	90 93 11 24 	sts	0x2411, r25
    4b4e:	89 2b       	or	r24, r25
    4b50:	a1 f5       	brne	.+104    	; 0x4bba <__vector_14+0xa4>
		return;
	}
	X_MOTOR_PORT.OUTSET = STEP_BIT_bm;			// turn X step bit on
    4b52:	e0 e0       	ldi	r30, 0x00	; 0
    4b54:	f6 e0       	ldi	r31, 0x06	; 6
    4b56:	81 e0       	ldi	r24, 0x01	; 1
    4b58:	85 83       	std	Z+5, r24	; 0x05
	if (--ax.a[X_AXIS].step_counter == 0) {		// end-of-move processing
    4b5a:	80 91 08 24 	lds	r24, 0x2408
    4b5e:	90 91 09 24 	lds	r25, 0x2409
    4b62:	a0 91 0a 24 	lds	r26, 0x240A
    4b66:	b0 91 0b 24 	lds	r27, 0x240B
    4b6a:	01 97       	sbiw	r24, 0x01	; 1
    4b6c:	a1 09       	sbc	r26, r1
    4b6e:	b1 09       	sbc	r27, r1
    4b70:	80 93 08 24 	sts	0x2408, r24
    4b74:	90 93 09 24 	sts	0x2409, r25
    4b78:	a0 93 0a 24 	sts	0x240A, r26
    4b7c:	b0 93 0b 24 	sts	0x240B, r27
    4b80:	00 97       	sbiw	r24, 0x00	; 0
    4b82:	a1 05       	cpc	r26, r1
    4b84:	b1 05       	cpc	r27, r1
    4b86:	69 f4       	brne	.+26     	; 0x4ba2 <__vector_14+0x8c>
		X_TIMER.CTRLA = TC_CLK_OFF;				// stop the clock
    4b88:	10 92 00 08 	sts	0x0800, r1
		X_MOTOR_PORT.OUTSET = MOTOR_ENABLE_BIT_bm; // disable the motor
    4b8c:	84 e0       	ldi	r24, 0x04	; 4
    4b8e:	85 83       	std	Z+5, r24	; 0x05
		ax.active_axes &= ~X_ACTIVE_BIT_bm;		// clear the X active bit
    4b90:	80 91 05 24 	lds	r24, 0x2405
    4b94:	87 7f       	andi	r24, 0xF7	; 247
    4b96:	80 93 05 24 	sts	0x2405, r24
		if (ax.active_axes == 0) {				// if all axes are done
    4b9a:	88 23       	and	r24, r24
    4b9c:	11 f4       	brne	.+4      	; 0x4ba2 <__vector_14+0x8c>
			st_execute_move();					// ...run the next move
    4b9e:	0e 94 97 23 	call	0x472e	; 0x472e <st_execute_move>
		}
	}
	ax.a[X_AXIS].postscale_counter = ax.a[X_AXIS].postscale_value;// reset post-scaler counter
    4ba2:	80 91 0e 24 	lds	r24, 0x240E
    4ba6:	90 91 0f 24 	lds	r25, 0x240F
    4baa:	80 93 10 24 	sts	0x2410, r24
    4bae:	90 93 11 24 	sts	0x2411, r25
	STEPPER_DELAY								// optional stepper pulse delay
	X_MOTOR_PORT.OUTCLR = STEP_BIT_bm;			// turn X step bit off
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	e0 e0       	ldi	r30, 0x00	; 0
    4bb6:	f6 e0       	ldi	r31, 0x06	; 6
    4bb8:	86 83       	std	Z+6, r24	; 0x06
}
    4bba:	ff 91       	pop	r31
    4bbc:	ef 91       	pop	r30
    4bbe:	bf 91       	pop	r27
    4bc0:	af 91       	pop	r26
    4bc2:	9f 91       	pop	r25
    4bc4:	8f 91       	pop	r24
    4bc6:	7f 91       	pop	r23
    4bc8:	6f 91       	pop	r22
    4bca:	5f 91       	pop	r21
    4bcc:	4f 91       	pop	r20
    4bce:	3f 91       	pop	r19
    4bd0:	2f 91       	pop	r18
    4bd2:	0f 90       	pop	r0
    4bd4:	0b be       	out	0x3b, r0	; 59
    4bd6:	0f 90       	pop	r0
    4bd8:	0f be       	out	0x3f, r0	; 63
    4bda:	0f 90       	pop	r0
    4bdc:	1f 90       	pop	r1
    4bde:	18 95       	reti

00004be0 <PMIC_SetVectorLocationToBoot>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToBoot( void )
{
	uint8_t temp = PMIC.CTRL | PMIC_IVSEL_bm;
    4be0:	e0 ea       	ldi	r30, 0xA0	; 160
    4be2:	f0 e0       	ldi	r31, 0x00	; 0
    4be4:	82 81       	ldd	r24, Z+2	; 0x02
    4be6:	80 64       	ori	r24, 0x40	; 64
	CCP = CCP_IOREG_gc;
    4be8:	98 ed       	ldi	r25, 0xD8	; 216
    4bea:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4bec:	82 83       	std	Z+2, r24	; 0x02
}
    4bee:	08 95       	ret

00004bf0 <PMIC_SetVectorLocationToApplication>:
 *  Change Protection register before writing the CTRL register. Interrupts are
 *  automatically ignored during the change enable period.
 */
void PMIC_SetVectorLocationToApplication( void )
{
	uint8_t temp = PMIC.CTRL & ~PMIC_IVSEL_bm;
    4bf0:	e0 ea       	ldi	r30, 0xA0	; 160
    4bf2:	f0 e0       	ldi	r31, 0x00	; 0
    4bf4:	82 81       	ldd	r24, Z+2	; 0x02
    4bf6:	8f 7b       	andi	r24, 0xBF	; 191
	CCP = CCP_IOREG_gc;
    4bf8:	98 ed       	ldi	r25, 0xD8	; 216
    4bfa:	94 bf       	out	0x34, r25	; 52
	PMIC.CTRL = temp;
    4bfc:	82 83       	std	Z+2, r24	; 0x02
}
    4bfe:	08 95       	ret

00004c00 <xio_null_signal>:
 */

int xio_null_signal(uint8_t sig)
{
	return (TG_NOOP);
}
    4c00:	81 e0       	ldi	r24, 0x01	; 1
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	08 95       	ret

00004c06 <xio_null_line>:
 */

int xio_null_line(char * buf)
{
	return (TG_OK);
}
    4c06:	80 e0       	ldi	r24, 0x00	; 0
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	08 95       	ret

00004c0c <xio_fget_ln>:
 *	dev		XIO device enumeration
 */

int xio_fget_ln(uint8_t dev, char *buf, uint8_t len)
{
	switch (dev) {
    4c0c:	81 30       	cpi	r24, 0x01	; 1
    4c0e:	51 f0       	breq	.+20     	; 0x4c24 <xio_fget_ln+0x18>
    4c10:	81 30       	cpi	r24, 0x01	; 1
    4c12:	28 f0       	brcs	.+10     	; 0x4c1e <xio_fget_ln+0x12>
    4c14:	84 30       	cpi	r24, 0x04	; 4
    4c16:	59 f0       	breq	.+22     	; 0x4c2e <xio_fget_ln+0x22>
    4c18:	20 e1       	ldi	r18, 0x10	; 16
    4c1a:	30 e0       	ldi	r19, 0x00	; 0
    4c1c:	0d c0       	rjmp	.+26     	; 0x4c38 <xio_fget_ln+0x2c>
    4c1e:	20 e0       	ldi	r18, 0x00	; 0
    4c20:	30 e0       	ldi	r19, 0x00	; 0
    4c22:	0a c0       	rjmp	.+20     	; 0x4c38 <xio_fget_ln+0x2c>
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): return (xio_usb_readln(buf, len));
    4c24:	cb 01       	movw	r24, r22
    4c26:	64 2f       	mov	r22, r20
    4c28:	0e 94 9d 29 	call	0x533a	; 0x533a <xio_usb_readln>
    4c2c:	04 c0       	rjmp	.+8      	; 0x4c36 <xio_fget_ln+0x2a>
//		case (XIO_DEV_AUX): return (xio_aux_readln(buf, len));
//		case (XIO_DEV_RS485): return (xio_rs485_readln(buf, len));
		case (XIO_DEV_PGM): return (xio_pgm_readln(buf, len));
    4c2e:	cb 01       	movw	r24, r22
    4c30:	64 2f       	mov	r22, r20
    4c32:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <xio_pgm_readln>
    4c36:	9c 01       	movw	r18, r24
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4c38:	c9 01       	movw	r24, r18
    4c3a:	08 95       	ret

00004c3c <xio_control>:
 * xio_control() - common entry point for device control functions
 */

int8_t xio_control(uint8_t dev, const uint16_t control, const int16_t arg)
{
	switch (dev) {
    4c3c:	81 30       	cpi	r24, 0x01	; 1
    4c3e:	41 f0       	breq	.+16     	; 0x4c50 <xio_control+0x14>
    4c40:	81 30       	cpi	r24, 0x01	; 1
    4c42:	20 f0       	brcs	.+8      	; 0x4c4c <xio_control+0x10>
    4c44:	84 30       	cpi	r24, 0x04	; 4
    4c46:	49 f0       	breq	.+18     	; 0x4c5a <xio_control+0x1e>
    4c48:	80 e1       	ldi	r24, 0x10	; 16
    4c4a:	08 95       	ret
    4c4c:	80 e0       	ldi	r24, 0x00	; 0
    4c4e:	08 95       	ret
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): return (xio_usb_control(control, arg));
    4c50:	cb 01       	movw	r24, r22
    4c52:	ba 01       	movw	r22, r20
    4c54:	0e 94 31 27 	call	0x4e62	; 0x4e62 <xio_usb_control>
    4c58:	08 95       	ret
//		case (XIO_DEV_AUX): return (xio_aux_control(control, arg));
//		case (XIO_DEV_RS485): return (xio_rs485_control(control, arg));
		case (XIO_DEV_PGM): return (xio_pgm_control(control, arg));
    4c5a:	cb 01       	movw	r24, r22
    4c5c:	ba 01       	movw	r22, r20
    4c5e:	0e 94 ea 2c 	call	0x59d4	; 0x59d4 <xio_pgm_control>
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4c62:	08 95       	ret

00004c64 <xio_dev_init>:
 * xio_dev_init() - common entry point for device init functions
 */

int8_t xio_dev_init(uint8_t dev, const int16_t arg)
{
	switch (dev) {
    4c64:	81 30       	cpi	r24, 0x01	; 1
    4c66:	31 f0       	breq	.+12     	; 0x4c74 <xio_dev_init+0x10>
    4c68:	81 30       	cpi	r24, 0x01	; 1
    4c6a:	38 f0       	brcs	.+14     	; 0x4c7a <xio_dev_init+0x16>
    4c6c:	84 30       	cpi	r24, 0x04	; 4
    4c6e:	39 f0       	breq	.+14     	; 0x4c7e <xio_dev_init+0x1a>
    4c70:	80 e1       	ldi	r24, 0x10	; 16
    4c72:	08 95       	ret
		case (XIO_DEV_NULL): return (TG_OK);
		case (XIO_DEV_USB): xio_usb_init(arg); return (TG_OK);
    4c74:	cb 01       	movw	r24, r22
    4c76:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <xio_usb_init>
    4c7a:	80 e0       	ldi	r24, 0x00	; 0
    4c7c:	08 95       	ret
//		case (XIO_DEV_AUX): xio_aux_init(arg); return (TG_OK);
//		case (XIO_DEV_RS485): xio_rs485_init(arg); return (TG_OK);
		case (XIO_DEV_PGM): xio_pgm_init(arg); return (TG_OK);
    4c7e:	cb 01       	movw	r24, r22
    4c80:	0e 94 48 2c 	call	0x5890	; 0x5890 <xio_pgm_init>
    4c84:	80 e0       	ldi	r24, 0x00	; 0
		default: return (TG_UNRECOGNIZED_DEVICE);
	}
	return (TG_ERROR);		// never should hit this
}
    4c86:	08 95       	ret

00004c88 <xio_init>:
 */

void xio_init(void)
{	
	// USB port defaults are:	XIO_RDWR | XIO_ECHO | XIO_CRLF - open additionally:
	xio_usb_init(XIO_LINEMODE | XIO_SEMICOLONS | XIO_BAUD_115200);
    4c88:	85 e0       	ldi	r24, 0x05	; 5
    4c8a:	90 e5       	ldi	r25, 0x50	; 80
    4c8c:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <xio_usb_init>

	// PGM file defaults are:	XIO_RD | XIO_BLOCK
//	xio_pgm_init(XIO_ECHO | XIO_CRLF | XIO_LINEMODE | XIO_SEMICOLONS);
	xio_pgm_init(XIO_LINEMODE);
    4c90:	80 e0       	ldi	r24, 0x00	; 0
    4c92:	90 e1       	ldi	r25, 0x10	; 16
    4c94:	0e 94 48 2c 	call	0x5890	; 0x5890 <xio_pgm_init>

	stddev = &dev_usb;				// stddev is a convenience
    4c98:	80 e0       	ldi	r24, 0x00	; 0
    4c9a:	90 e2       	ldi	r25, 0x20	; 32
    4c9c:	80 93 b2 24 	sts	0x24B2, r24
    4ca0:	90 93 b3 24 	sts	0x24B3, r25
	stdin = &dev_usb;				// define the console device
    4ca4:	80 93 0c 25 	sts	0x250C, r24
    4ca8:	90 93 0d 25 	sts	0x250D, r25
	stdout = &dev_usb;				// ...
    4cac:	80 93 0e 25 	sts	0x250E, r24
    4cb0:	90 93 0f 25 	sts	0x250F, r25
	stderr = &dev_usb;				// ...
    4cb4:	80 93 10 25 	sts	0x2510, r24
    4cb8:	90 93 11 25 	sts	0x2511, r25

	printf_P(PSTR("\n\n**** Xmega IO subsystem initialized ****\n"));
    4cbc:	0f 92       	push	r0
    4cbe:	0f 92       	push	r0
    4cc0:	8a e3       	ldi	r24, 0x3A	; 58
    4cc2:	97 e0       	ldi	r25, 0x07	; 7
    4cc4:	ed b7       	in	r30, 0x3d	; 61
    4cc6:	fe b7       	in	r31, 0x3e	; 62
    4cc8:	81 83       	std	Z+1, r24	; 0x01
    4cca:	92 83       	std	Z+2, r25	; 0x02
    4ccc:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
    4cd0:	0f 90       	pop	r0
    4cd2:	0f 90       	pop	r0
}
    4cd4:	08 95       	ret

00004cd6 <xio_usb_init>:
 *
 *	XIO_BAUD_xxxxx <null>		One of the supported baud rate enums
 */

void xio_usb_init(const uint16_t control)
{
    4cd6:	9c 01       	movw	r18, r24
	uint8_t baud = (uint8_t)(control & XIO_BAUD_gm);
    4cd8:	e8 2f       	mov	r30, r24
    4cda:	ef 70       	andi	r30, 0x0F	; 15

	// transfer control flags to internal flag bits
	f.flags = XIO_FLAG_USB_DEFS_gm;		// set flags to defaults & initial state
    4cdc:	87 e3       	ldi	r24, 0x37	; 55
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	80 93 9f 21 	sts	0x219F, r24
    4ce4:	90 93 a0 21 	sts	0x21A0, r25
		f.flags |= XIO_FLAG_RD_bm;
	}
	if (control & XIO_WR) {
		f.flags |= XIO_FLAG_WR_bm;
	}
	if (control & XIO_BLOCK) {
    4ce8:	26 ff       	sbrs	r18, 6
    4cea:	06 c0       	rjmp	.+12     	; 0x4cf8 <xio_usb_init+0x22>
		f.flags |= XIO_FLAG_BLOCK_bm;
    4cec:	87 e3       	ldi	r24, 0x37	; 55
    4cee:	90 e0       	ldi	r25, 0x00	; 0
    4cf0:	80 93 9f 21 	sts	0x219F, r24
    4cf4:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_NOBLOCK) {
    4cf8:	27 ff       	sbrs	r18, 7
    4cfa:	06 c0       	rjmp	.+12     	; 0x4d08 <xio_usb_init+0x32>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    4cfc:	83 e3       	ldi	r24, 0x33	; 51
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
    4d00:	80 93 9f 21 	sts	0x219F, r24
    4d04:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_ECHO) {
    4d08:	30 ff       	sbrs	r19, 0
    4d0a:	09 c0       	rjmp	.+18     	; 0x4d1e <xio_usb_init+0x48>
		f.flags |= XIO_FLAG_ECHO_bm;
    4d0c:	80 91 9f 21 	lds	r24, 0x219F
    4d10:	90 91 a0 21 	lds	r25, 0x21A0
    4d14:	80 61       	ori	r24, 0x10	; 16
    4d16:	80 93 9f 21 	sts	0x219F, r24
    4d1a:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_NOECHO) {
    4d1e:	31 ff       	sbrs	r19, 1
    4d20:	09 c0       	rjmp	.+18     	; 0x4d34 <xio_usb_init+0x5e>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    4d22:	80 91 9f 21 	lds	r24, 0x219F
    4d26:	90 91 a0 21 	lds	r25, 0x21A0
    4d2a:	8f 7e       	andi	r24, 0xEF	; 239
    4d2c:	80 93 9f 21 	sts	0x219F, r24
    4d30:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_CRLF) {
    4d34:	32 ff       	sbrs	r19, 2
    4d36:	09 c0       	rjmp	.+18     	; 0x4d4a <xio_usb_init+0x74>
		f.flags |= XIO_FLAG_CRLF_bm;
    4d38:	80 91 9f 21 	lds	r24, 0x219F
    4d3c:	90 91 a0 21 	lds	r25, 0x21A0
    4d40:	80 62       	ori	r24, 0x20	; 32
    4d42:	80 93 9f 21 	sts	0x219F, r24
    4d46:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_NOCRLF) {
    4d4a:	33 ff       	sbrs	r19, 3
    4d4c:	09 c0       	rjmp	.+18     	; 0x4d60 <xio_usb_init+0x8a>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    4d4e:	80 91 9f 21 	lds	r24, 0x219F
    4d52:	90 91 a0 21 	lds	r25, 0x21A0
    4d56:	8f 7d       	andi	r24, 0xDF	; 223
    4d58:	80 93 9f 21 	sts	0x219F, r24
    4d5c:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_LINEMODE) {
    4d60:	34 ff       	sbrs	r19, 4
    4d62:	09 c0       	rjmp	.+18     	; 0x4d76 <xio_usb_init+0xa0>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    4d64:	80 91 9f 21 	lds	r24, 0x219F
    4d68:	90 91 a0 21 	lds	r25, 0x21A0
    4d6c:	80 64       	ori	r24, 0x40	; 64
    4d6e:	80 93 9f 21 	sts	0x219F, r24
    4d72:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_NOLINEMODE) {
    4d76:	35 ff       	sbrs	r19, 5
    4d78:	09 c0       	rjmp	.+18     	; 0x4d8c <xio_usb_init+0xb6>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    4d7a:	80 91 9f 21 	lds	r24, 0x219F
    4d7e:	90 91 a0 21 	lds	r25, 0x21A0
    4d82:	8f 7b       	andi	r24, 0xBF	; 191
    4d84:	80 93 9f 21 	sts	0x219F, r24
    4d88:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_SEMICOLONS) {
    4d8c:	36 ff       	sbrs	r19, 6
    4d8e:	09 c0       	rjmp	.+18     	; 0x4da2 <xio_usb_init+0xcc>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    4d90:	80 91 9f 21 	lds	r24, 0x219F
    4d94:	90 91 a0 21 	lds	r25, 0x21A0
    4d98:	80 68       	ori	r24, 0x80	; 128
    4d9a:	80 93 9f 21 	sts	0x219F, r24
    4d9e:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    4da2:	37 ff       	sbrs	r19, 7
    4da4:	09 c0       	rjmp	.+18     	; 0x4db8 <xio_usb_init+0xe2>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    4da6:	80 91 9f 21 	lds	r24, 0x219F
    4daa:	90 91 a0 21 	lds	r25, 0x21A0
    4dae:	8f 77       	andi	r24, 0x7F	; 127
    4db0:	80 93 9f 21 	sts	0x219F, r24
    4db4:	90 93 a0 21 	sts	0x21A0, r25
	}

	// character signals and error returns
	f.sig = 0;
    4db8:	10 92 a1 21 	sts	0x21A1, r1
	dev_usb.udata = &(f.sig);				// bind sig register to FILE struct
    4dbc:	81 ea       	ldi	r24, 0xA1	; 161
    4dbe:	91 e2       	ldi	r25, 0x21	; 33
    4dc0:	80 93 0c 20 	sts	0x200C, r24
    4dc4:	90 93 0d 20 	sts	0x200D, r25

	// setup internal RX/TX buffers
	f.rx_buf_head = 1;						// can't use location 0
    4dc8:	81 e0       	ldi	r24, 0x01	; 1
    4dca:	80 93 ac 21 	sts	0x21AC, r24
	f.rx_buf_tail = 1;
    4dce:	80 93 ab 21 	sts	0x21AB, r24
	f.tx_buf_head = 1;
    4dd2:	80 93 ae 21 	sts	0x21AE, r24
	f.tx_buf_tail = 1;
    4dd6:	80 93 ad 21 	sts	0x21AD, r24
	f.len = sizeof(f.buf);					// offset to zero
    4dda:	82 e0       	ldi	r24, 0x02	; 2
    4ddc:	80 93 a4 21 	sts	0x21A4, r24

	// bindings
	f.sig_func = &xio_null_signal;			// bind null signal handler
    4de0:	80 e0       	ldi	r24, 0x00	; 0
    4de2:	96 e2       	ldi	r25, 0x26	; 38
    4de4:	80 93 a7 21 	sts	0x21A7, r24
    4de8:	90 93 a8 21 	sts	0x21A8, r25
	f.line_func = &xio_null_line;			// bind null line handler
    4dec:	83 e0       	ldi	r24, 0x03	; 3
    4dee:	96 e2       	ldi	r25, 0x26	; 38
    4df0:	80 93 a9 21 	sts	0x21A9, r24
    4df4:	90 93 aa 21 	sts	0x21AA, r25

	f.usart = &USB_USART;					// bind USART structure
    4df8:	80 ea       	ldi	r24, 0xA0	; 160
    4dfa:	98 e0       	ldi	r25, 0x08	; 8
    4dfc:	80 93 d4 21 	sts	0x21D4, r24
    4e00:	90 93 d5 21 	sts	0x21D5, r25
	f.port = &USB_PORT;						// bind PORT structure
    4e04:	80 e4       	ldi	r24, 0x40	; 64
    4e06:	96 e0       	ldi	r25, 0x06	; 6
    4e08:	80 93 d6 21 	sts	0x21D6, r24
    4e0c:	90 93 d7 21 	sts	0x21D7, r25

	// baud rate and USART setup
	if (baud == XIO_BAUD_UNSPECIFIED) {
    4e10:	ee 23       	and	r30, r30
    4e12:	09 f4       	brne	.+2      	; 0x4e16 <xio_usb_init+0x140>
    4e14:	e5 e0       	ldi	r30, 0x05	; 5
		baud = XIO_BAUD_DEFAULT;
	}
	f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[baud]);
    4e16:	8e 2f       	mov	r24, r30
    4e18:	90 e0       	ldi	r25, 0x00	; 0
    4e1a:	fc 01       	movw	r30, r24
    4e1c:	ec 5d       	subi	r30, 0xDC	; 220
    4e1e:	f8 4f       	sbci	r31, 0xF8	; 248
    4e20:	e4 91       	lpm	r30, Z+
    4e22:	a0 ea       	ldi	r26, 0xA0	; 160
    4e24:	b8 e0       	ldi	r27, 0x08	; 8
    4e26:	16 96       	adiw	r26, 0x06	; 6
    4e28:	ec 93       	st	X, r30
    4e2a:	16 97       	sbiw	r26, 0x06	; 6
	f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[baud]);
    4e2c:	81 5d       	subi	r24, 0xD1	; 209
    4e2e:	98 4f       	sbci	r25, 0xF8	; 248
    4e30:	fc 01       	movw	r30, r24
    4e32:	84 91       	lpm	r24, Z+
    4e34:	17 96       	adiw	r26, 0x07	; 7
    4e36:	8c 93       	st	X, r24
    4e38:	17 97       	sbiw	r26, 0x07	; 7
	f.usart->CTRLB = USART_TXEN_bm | USART_RXEN_bm; // enable tx and rx on USART
    4e3a:	88 e1       	ldi	r24, 0x18	; 24
    4e3c:	14 96       	adiw	r26, 0x04	; 4
    4e3e:	8c 93       	st	X, r24
    4e40:	14 97       	sbiw	r26, 0x04	; 4
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;		// enable tx and rx interrupts
    4e42:	81 e2       	ldi	r24, 0x21	; 33
    4e44:	13 96       	adiw	r26, 0x03	; 3
    4e46:	8c 93       	st	X, r24

	f.port->DIRCLR = USB_RX_bm;	 			// clr RX pin as input
    4e48:	e0 e4       	ldi	r30, 0x40	; 64
    4e4a:	f6 e0       	ldi	r31, 0x06	; 6
    4e4c:	84 e0       	ldi	r24, 0x04	; 4
    4e4e:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_TX_bm; 			// set TX pin as output
    4e50:	88 e0       	ldi	r24, 0x08	; 8
    4e52:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_TX_bm;				// set TX HI as initial state
    4e54:	85 83       	std	Z+5, r24	; 0x05
	f.port->DIRCLR = USB_CTS_bm; 			// set CTS pin as input
    4e56:	81 e0       	ldi	r24, 0x01	; 1
    4e58:	82 83       	std	Z+2, r24	; 0x02
	f.port->DIRSET = USB_RTS_bm; 			// set RTS pin as output
    4e5a:	82 e0       	ldi	r24, 0x02	; 2
    4e5c:	81 83       	std	Z+1, r24	; 0x01
	f.port->OUTSET = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
    4e5e:	85 83       	std	Z+5, r24	; 0x05
//	f.port->OUTCLR = USB_RTS_bm; 			// set RTS HI initially (RTS enabled)
}
    4e60:	08 95       	ret

00004e62 <xio_usb_control>:
 *
 *	XIO_BAUD_xxxxx	<null>		One of the supported baud rate enums
 */

int8_t xio_usb_control(const uint16_t control, const int16_t arg)
{
    4e62:	ac 01       	movw	r20, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    4e64:	84 ff       	sbrs	r24, 4
    4e66:	05 c0       	rjmp	.+10     	; 0x4e72 <xio_usb_control+0x10>
		f.sig_func = (fptr_int_uint8)arg;
    4e68:	60 93 a7 21 	sts	0x21A7, r22
    4e6c:	70 93 a8 21 	sts	0x21A8, r23
    4e70:	8b c0       	rjmp	.+278    	; 0x4f88 <xio_usb_control+0x126>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    4e72:	85 ff       	sbrs	r24, 5
    4e74:	05 c0       	rjmp	.+10     	; 0x4e80 <xio_usb_control+0x1e>
		f.line_func = (fptr_int_char_p)arg;
    4e76:	60 93 a9 21 	sts	0x21A9, r22
    4e7a:	70 93 aa 21 	sts	0x21AA, r23
    4e7e:	84 c0       	rjmp	.+264    	; 0x4f88 <xio_usb_control+0x126>
		return (0);
	}
	// commands with no args
	if ((control & XIO_BAUD_gm) != XIO_BAUD_UNSPECIFIED) {
    4e80:	8f 70       	andi	r24, 0x0F	; 15
    4e82:	90 70       	andi	r25, 0x00	; 0
    4e84:	00 97       	sbiw	r24, 0x00	; 0
    4e86:	91 f0       	breq	.+36     	; 0x4eac <xio_usb_control+0x4a>
		f.usart->BAUDCTRLA = (uint8_t)pgm_read_byte(&bsel[(control & XIO_BAUD_gm)]);
    4e88:	a0 91 d4 21 	lds	r26, 0x21D4
    4e8c:	b0 91 d5 21 	lds	r27, 0x21D5
    4e90:	9c 01       	movw	r18, r24
    4e92:	2c 5d       	subi	r18, 0xDC	; 220
    4e94:	38 4f       	sbci	r19, 0xF8	; 248
    4e96:	f9 01       	movw	r30, r18
    4e98:	24 91       	lpm	r18, Z+
    4e9a:	16 96       	adiw	r26, 0x06	; 6
    4e9c:	2c 93       	st	X, r18
    4e9e:	16 97       	sbiw	r26, 0x06	; 6
		f.usart->BAUDCTRLB = (uint8_t)pgm_read_byte(&bscale[(control & XIO_BAUD_gm)]);
    4ea0:	81 5d       	subi	r24, 0xD1	; 209
    4ea2:	98 4f       	sbci	r25, 0xF8	; 248
    4ea4:	fc 01       	movw	r30, r24
    4ea6:	84 91       	lpm	r24, Z+
    4ea8:	17 96       	adiw	r26, 0x07	; 7
    4eaa:	8c 93       	st	X, r24
	}
	if (control & XIO_BLOCK) {
    4eac:	46 ff       	sbrs	r20, 6
    4eae:	09 c0       	rjmp	.+18     	; 0x4ec2 <xio_usb_control+0x60>
		f.flags |= XIO_FLAG_BLOCK_bm;
    4eb0:	80 91 9f 21 	lds	r24, 0x219F
    4eb4:	90 91 a0 21 	lds	r25, 0x21A0
    4eb8:	84 60       	ori	r24, 0x04	; 4
    4eba:	80 93 9f 21 	sts	0x219F, r24
    4ebe:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_NOBLOCK) {
    4ec2:	47 ff       	sbrs	r20, 7
    4ec4:	09 c0       	rjmp	.+18     	; 0x4ed8 <xio_usb_control+0x76>
		f.flags &= ~XIO_FLAG_BLOCK_bm;
    4ec6:	80 91 9f 21 	lds	r24, 0x219F
    4eca:	90 91 a0 21 	lds	r25, 0x21A0
    4ece:	8b 7f       	andi	r24, 0xFB	; 251
    4ed0:	80 93 9f 21 	sts	0x219F, r24
    4ed4:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_ECHO) {
    4ed8:	50 ff       	sbrs	r21, 0
    4eda:	09 c0       	rjmp	.+18     	; 0x4eee <xio_usb_control+0x8c>
		f.flags |= XIO_FLAG_ECHO_bm;
    4edc:	80 91 9f 21 	lds	r24, 0x219F
    4ee0:	90 91 a0 21 	lds	r25, 0x21A0
    4ee4:	80 61       	ori	r24, 0x10	; 16
    4ee6:	80 93 9f 21 	sts	0x219F, r24
    4eea:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_NOECHO) {
    4eee:	51 ff       	sbrs	r21, 1
    4ef0:	09 c0       	rjmp	.+18     	; 0x4f04 <xio_usb_control+0xa2>
		f.flags &= ~XIO_FLAG_ECHO_bm;
    4ef2:	80 91 9f 21 	lds	r24, 0x219F
    4ef6:	90 91 a0 21 	lds	r25, 0x21A0
    4efa:	8f 7e       	andi	r24, 0xEF	; 239
    4efc:	80 93 9f 21 	sts	0x219F, r24
    4f00:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_CRLF) {
    4f04:	52 ff       	sbrs	r21, 2
    4f06:	09 c0       	rjmp	.+18     	; 0x4f1a <xio_usb_control+0xb8>
		f.flags |= XIO_FLAG_CRLF_bm;
    4f08:	80 91 9f 21 	lds	r24, 0x219F
    4f0c:	90 91 a0 21 	lds	r25, 0x21A0
    4f10:	80 62       	ori	r24, 0x20	; 32
    4f12:	80 93 9f 21 	sts	0x219F, r24
    4f16:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_NOCRLF) {
    4f1a:	53 ff       	sbrs	r21, 3
    4f1c:	09 c0       	rjmp	.+18     	; 0x4f30 <xio_usb_control+0xce>
		f.flags &= ~XIO_FLAG_CRLF_bm;
    4f1e:	80 91 9f 21 	lds	r24, 0x219F
    4f22:	90 91 a0 21 	lds	r25, 0x21A0
    4f26:	8f 7d       	andi	r24, 0xDF	; 223
    4f28:	80 93 9f 21 	sts	0x219F, r24
    4f2c:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_LINEMODE) {
    4f30:	54 ff       	sbrs	r21, 4
    4f32:	09 c0       	rjmp	.+18     	; 0x4f46 <xio_usb_control+0xe4>
		f.flags |= XIO_FLAG_LINEMODE_bm;
    4f34:	80 91 9f 21 	lds	r24, 0x219F
    4f38:	90 91 a0 21 	lds	r25, 0x21A0
    4f3c:	80 64       	ori	r24, 0x40	; 64
    4f3e:	80 93 9f 21 	sts	0x219F, r24
    4f42:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_NOLINEMODE) {
    4f46:	55 ff       	sbrs	r21, 5
    4f48:	09 c0       	rjmp	.+18     	; 0x4f5c <xio_usb_control+0xfa>
		f.flags &= ~XIO_FLAG_LINEMODE_bm;
    4f4a:	80 91 9f 21 	lds	r24, 0x219F
    4f4e:	90 91 a0 21 	lds	r25, 0x21A0
    4f52:	8f 7b       	andi	r24, 0xBF	; 191
    4f54:	80 93 9f 21 	sts	0x219F, r24
    4f58:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_SEMICOLONS) {
    4f5c:	56 ff       	sbrs	r21, 6
    4f5e:	09 c0       	rjmp	.+18     	; 0x4f72 <xio_usb_control+0x110>
		f.flags |= XIO_FLAG_SEMICOLONS_bm;
    4f60:	80 91 9f 21 	lds	r24, 0x219F
    4f64:	90 91 a0 21 	lds	r25, 0x21A0
    4f68:	80 68       	ori	r24, 0x80	; 128
    4f6a:	80 93 9f 21 	sts	0x219F, r24
    4f6e:	90 93 a0 21 	sts	0x21A0, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    4f72:	57 ff       	sbrs	r21, 7
    4f74:	09 c0       	rjmp	.+18     	; 0x4f88 <xio_usb_control+0x126>
		f.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    4f76:	80 91 9f 21 	lds	r24, 0x219F
    4f7a:	90 91 a0 21 	lds	r25, 0x21A0
    4f7e:	8f 77       	andi	r24, 0x7F	; 127
    4f80:	80 93 9f 21 	sts	0x219F, r24
    4f84:	90 93 a0 21 	sts	0x21A0, r25
	}
	return (0);
}
    4f88:	80 e0       	ldi	r24, 0x00	; 0
    4f8a:	08 95       	ret

00004f8c <__vector_25>:
 *
 * 	See end notes in xio.h for a discussion of how the circular bufers work
 */

ISR(USB_RX_ISR_vect)		//ISR(USARTC0_RXC_vect)	// serial port C0 RX interrupt 
{
    4f8c:	1f 92       	push	r1
    4f8e:	0f 92       	push	r0
    4f90:	0f b6       	in	r0, 0x3f	; 63
    4f92:	0f 92       	push	r0
    4f94:	0b b6       	in	r0, 0x3b	; 59
    4f96:	0f 92       	push	r0
    4f98:	11 24       	eor	r1, r1
    4f9a:	8f 93       	push	r24
    4f9c:	9f 93       	push	r25
    4f9e:	af 93       	push	r26
    4fa0:	bf 93       	push	r27
    4fa2:	ef 93       	push	r30
    4fa4:	ff 93       	push	r31
	// normal path
	if ((--f.rx_buf_head) == 0) { 				// advance buffer head with wrap
    4fa6:	80 91 ac 21 	lds	r24, 0x21AC
    4faa:	81 50       	subi	r24, 0x01	; 1
    4fac:	80 93 ac 21 	sts	0x21AC, r24
    4fb0:	80 91 ac 21 	lds	r24, 0x21AC
    4fb4:	88 23       	and	r24, r24
    4fb6:	19 f4       	brne	.+6      	; 0x4fbe <__vector_25+0x32>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    4fb8:	81 e1       	ldi	r24, 0x11	; 17
    4fba:	80 93 ac 21 	sts	0x21AC, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    4fbe:	90 91 ac 21 	lds	r25, 0x21AC
    4fc2:	80 91 ab 21 	lds	r24, 0x21AB
    4fc6:	98 17       	cp	r25, r24
    4fc8:	61 f0       	breq	.+24     	; 0x4fe2 <__vector_25+0x56>
		f.rx_buf[f.rx_buf_head] = f.usart->DATA;// (= USARTC0.DATA;)
    4fca:	e0 91 ac 21 	lds	r30, 0x21AC
    4fce:	f0 e0       	ldi	r31, 0x00	; 0
    4fd0:	a0 91 d4 21 	lds	r26, 0x21D4
    4fd4:	b0 91 d5 21 	lds	r27, 0x21D5
    4fd8:	8c 91       	ld	r24, X
    4fda:	e1 56       	subi	r30, 0x61	; 97
    4fdc:	fe 4d       	sbci	r31, 0xDE	; 222
    4fde:	81 8b       	std	Z+17, r24	; 0x11
    4fe0:	0c c0       	rjmp	.+24     	; 0x4ffa <__vector_25+0x6e>
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    4fe2:	80 91 ac 21 	lds	r24, 0x21AC
    4fe6:	8f 5f       	subi	r24, 0xFF	; 255
    4fe8:	80 93 ac 21 	sts	0x21AC, r24
    4fec:	80 91 ac 21 	lds	r24, 0x21AC
    4ff0:	82 31       	cpi	r24, 0x12	; 18
    4ff2:	18 f0       	brcs	.+6      	; 0x4ffa <__vector_25+0x6e>
		f.rx_buf_head = 1;
    4ff4:	81 e0       	ldi	r24, 0x01	; 1
    4ff6:	80 93 ac 21 	sts	0x21AC, r24
	}
	// activate flow control here or before it gets to this level
}
    4ffa:	ff 91       	pop	r31
    4ffc:	ef 91       	pop	r30
    4ffe:	bf 91       	pop	r27
    5000:	af 91       	pop	r26
    5002:	9f 91       	pop	r25
    5004:	8f 91       	pop	r24
    5006:	0f 90       	pop	r0
    5008:	0b be       	out	0x3b, r0	; 59
    500a:	0f 90       	pop	r0
    500c:	0f be       	out	0x3f, r0	; 63
    500e:	0f 90       	pop	r0
    5010:	1f 90       	pop	r1
    5012:	18 95       	reti

00005014 <xio_usb_queue_RX_char>:
/*
 * xio_usb_queue_RX_char() - fake ISR to put a char in the RX buffer
 */

void xio_usb_queue_RX_char(const char c)
{
    5014:	28 2f       	mov	r18, r24
	// normal path
	if ((--f.rx_buf_head) == 0) { 				// wrap condition
    5016:	80 91 ac 21 	lds	r24, 0x21AC
    501a:	81 50       	subi	r24, 0x01	; 1
    501c:	80 93 ac 21 	sts	0x21AC, r24
    5020:	80 91 ac 21 	lds	r24, 0x21AC
    5024:	88 23       	and	r24, r24
    5026:	19 f4       	brne	.+6      	; 0x502e <xio_usb_queue_RX_char+0x1a>
		f.rx_buf_head = RX_BUFFER_SIZE-1;		// -1 avoids the off-by-one error
    5028:	81 e1       	ldi	r24, 0x11	; 17
    502a:	80 93 ac 21 	sts	0x21AC, r24
	}
	if (f.rx_buf_head != f.rx_buf_tail) {		// write char unless buffer full
    502e:	90 91 ac 21 	lds	r25, 0x21AC
    5032:	80 91 ab 21 	lds	r24, 0x21AB
    5036:	98 17       	cp	r25, r24
    5038:	39 f0       	breq	.+14     	; 0x5048 <xio_usb_queue_RX_char+0x34>
		f.rx_buf[f.rx_buf_head] = c;			// FAKE INPUT DATA
    503a:	e0 91 ac 21 	lds	r30, 0x21AC
    503e:	f0 e0       	ldi	r31, 0x00	; 0
    5040:	e1 56       	subi	r30, 0x61	; 97
    5042:	fe 4d       	sbci	r31, 0xDE	; 222
    5044:	21 8b       	std	Z+17, r18	; 0x11
    5046:	08 95       	ret
		return;
	}
	// buffer-full handling
	if ((++f.rx_buf_head) > RX_BUFFER_SIZE-1) { // reset the head
    5048:	80 91 ac 21 	lds	r24, 0x21AC
    504c:	8f 5f       	subi	r24, 0xFF	; 255
    504e:	80 93 ac 21 	sts	0x21AC, r24
    5052:	80 91 ac 21 	lds	r24, 0x21AC
    5056:	82 31       	cpi	r24, 0x12	; 18
    5058:	18 f0       	brcs	.+6      	; 0x5060 <xio_usb_queue_RX_char+0x4c>
		f.rx_buf_head = 1;
    505a:	81 e0       	ldi	r24, 0x01	; 1
    505c:	80 93 ac 21 	sts	0x21AC, r24
    5060:	08 95       	ret

00005062 <xio_usb_queue_RX_string>:
/*
 * xio_usb_queue_RX_string() - fake ISR to put a string in the RX buffer
 */

void xio_usb_queue_RX_string(char *buf)
{
    5062:	1f 93       	push	r17
    5064:	cf 93       	push	r28
    5066:	df 93       	push	r29
    5068:	ec 01       	movw	r28, r24
    506a:	10 e0       	ldi	r17, 0x00	; 0
    506c:	02 c0       	rjmp	.+4      	; 0x5072 <xio_usb_queue_RX_string+0x10>
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
		xio_usb_queue_RX_char(c);
    506e:	0e 94 0a 28 	call	0x5014	; 0x5014 <xio_usb_queue_RX_char>
void xio_usb_queue_RX_string(char *buf)
{
	char c;
	uint8_t i=0;

	while ((c = buf[i++]) != NUL) {
    5072:	fe 01       	movw	r30, r28
    5074:	e1 0f       	add	r30, r17
    5076:	f1 1d       	adc	r31, r1
    5078:	80 81       	ld	r24, Z
    507a:	1f 5f       	subi	r17, 0xFF	; 255
    507c:	88 23       	and	r24, r24
    507e:	b9 f7       	brne	.-18     	; 0x506e <xio_usb_queue_RX_string+0xc>
		xio_usb_queue_RX_char(c);
	}
}
    5080:	df 91       	pop	r29
    5082:	cf 91       	pop	r28
    5084:	1f 91       	pop	r17
    5086:	08 95       	ret

00005088 <__vector_26>:
 * these two callers don't collide (like only enabling interrupts in putc() AFTER
 * the dequeue has occurred).
 */

ISR(USB_TX_ISR_vect)		//ISR(USARTC0_DRE_vect)	// USARTC0 data register empty
{
    5088:	1f 92       	push	r1
    508a:	0f 92       	push	r0
    508c:	0f b6       	in	r0, 0x3f	; 63
    508e:	0f 92       	push	r0
    5090:	0b b6       	in	r0, 0x3b	; 59
    5092:	0f 92       	push	r0
    5094:	11 24       	eor	r1, r1
    5096:	8f 93       	push	r24
    5098:	9f 93       	push	r25
    509a:	af 93       	push	r26
    509c:	bf 93       	push	r27
    509e:	ef 93       	push	r30
    50a0:	ff 93       	push	r31
	if (f.tx_buf_head == f.tx_buf_tail) {			// buffer empty - disable ints
    50a2:	90 91 ae 21 	lds	r25, 0x21AE
    50a6:	80 91 ad 21 	lds	r24, 0x21AD
    50aa:	98 17       	cp	r25, r24
    50ac:	39 f4       	brne	.+14     	; 0x50bc <__vector_26+0x34>
		f.usart->CTRLA = USARTC0_CTRLA_RXON_TXOFF;	// doesn't work if you just &= it
    50ae:	e0 91 d4 21 	lds	r30, 0x21D4
    50b2:	f0 91 d5 21 	lds	r31, 0x21D5
    50b6:	80 e2       	ldi	r24, 0x20	; 32
    50b8:	83 83       	std	Z+3, r24	; 0x03
    50ba:	1e c0       	rjmp	.+60     	; 0x50f8 <__vector_26+0x70>
//		PMIC_DisableLowLevel(); 					// disable USART TX interrupts
		return;
	}
	if (!TX_MUTEX(f.flags)) {
    50bc:	80 91 9f 21 	lds	r24, 0x219F
    50c0:	90 91 a0 21 	lds	r25, 0x21A0
    50c4:	93 fd       	sbrc	r25, 3
    50c6:	18 c0       	rjmp	.+48     	; 0x50f8 <__vector_26+0x70>
		if (--(f.tx_buf_tail) == 0) {				// advance tail and wrap if needed
    50c8:	80 91 ad 21 	lds	r24, 0x21AD
    50cc:	81 50       	subi	r24, 0x01	; 1
    50ce:	80 93 ad 21 	sts	0x21AD, r24
    50d2:	80 91 ad 21 	lds	r24, 0x21AD
    50d6:	88 23       	and	r24, r24
    50d8:	19 f4       	brne	.+6      	; 0x50e0 <__vector_26+0x58>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    50da:	81 e1       	ldi	r24, 0x11	; 17
    50dc:	80 93 ad 21 	sts	0x21AD, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];	// write char to TX DATA register
    50e0:	e0 91 d4 21 	lds	r30, 0x21D4
    50e4:	f0 91 d5 21 	lds	r31, 0x21D5
    50e8:	a0 91 ad 21 	lds	r26, 0x21AD
    50ec:	b0 e0       	ldi	r27, 0x00	; 0
    50ee:	a1 56       	subi	r26, 0x61	; 97
    50f0:	be 4d       	sbci	r27, 0xDE	; 222
    50f2:	93 96       	adiw	r26, 0x23	; 35
    50f4:	8c 91       	ld	r24, X
    50f6:	80 83       	st	Z, r24
	}
}
    50f8:	ff 91       	pop	r31
    50fa:	ef 91       	pop	r30
    50fc:	bf 91       	pop	r27
    50fe:	af 91       	pop	r26
    5100:	9f 91       	pop	r25
    5102:	8f 91       	pop	r24
    5104:	0f 90       	pop	r0
    5106:	0b be       	out	0x3b, r0	; 59
    5108:	0f 90       	pop	r0
    510a:	0f be       	out	0x3f, r0	; 63
    510c:	0f 90       	pop	r0
    510e:	1f 90       	pop	r1
    5110:	18 95       	reti

00005112 <xio_usb_putc>:
 *		  detection in the dequeue routine - causing the dequeing ISR to lock up
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
    5112:	48 2f       	mov	r20, r24
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    5114:	20 91 9f 21 	lds	r18, 0x219F
    5118:	30 91 a0 21 	lds	r19, 0x21A0
    511c:	d9 01       	movw	r26, r18
    511e:	a4 70       	andi	r26, 0x04	; 4
    5120:	b0 70       	andi	r27, 0x00	; 0
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    5122:	b9 01       	movw	r22, r18
    5124:	60 72       	andi	r22, 0x20	; 32
    5126:	70 70       	andi	r23, 0x00	; 0
 *		  when the buffer was full. Using a local next_tx_buffer_head prevents this
 */

int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
    5128:	90 91 ae 21 	lds	r25, 0x21AE
    512c:	91 50       	subi	r25, 0x01	; 1
    512e:	c1 f4       	brne	.+48     	; 0x5160 <xio_usb_putc+0x4e>
    5130:	91 e1       	ldi	r25, 0x11	; 17
    5132:	16 c0       	rjmp	.+44     	; 0x5160 <xio_usb_putc+0x4e>
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
		if (BLOCKING(f.flags)) {
    5134:	10 97       	sbiw	r26, 0x00	; 0
    5136:	61 f0       	breq	.+24     	; 0x5150 <xio_usb_putc+0x3e>
			sleep_mode();
    5138:	80 91 48 00 	lds	r24, 0x0048
    513c:	81 60       	ori	r24, 0x01	; 1
    513e:	80 93 48 00 	sts	0x0048, r24
    5142:	88 95       	sleep
    5144:	80 91 48 00 	lds	r24, 0x0048
    5148:	8e 7f       	andi	r24, 0xFE	; 254
    514a:	80 93 48 00 	sts	0x0048, r24
    514e:	08 c0       	rjmp	.+16     	; 0x5160 <xio_usb_putc+0x4e>
    5150:	90 93 af 21 	sts	0x21AF, r25
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    5154:	83 e0       	ldi	r24, 0x03	; 3
    5156:	80 93 a1 21 	sts	0x21A1, r24
    515a:	2f ef       	ldi	r18, 0xFF	; 255
    515c:	3f ef       	ldi	r19, 0xFF	; 255
    515e:	54 c0       	rjmp	.+168    	; 0x5208 <xio_usb_putc+0xf6>
int xio_usb_putc(const char c, FILE *stream)
{
	if ((f.next_tx_buf_head = f.tx_buf_head-1) == 0) { // advance head and handle wrap
		f.next_tx_buf_head = TX_BUFFER_SIZE-1;		 // -1 avoids the off-by-one error
	}
	while(f.next_tx_buf_head == f.tx_buf_tail) {   // TX buffer full. sleep or return.
    5160:	80 91 ad 21 	lds	r24, 0x21AD
    5164:	98 17       	cp	r25, r24
    5166:	31 f3       	breq	.-52     	; 0x5134 <xio_usb_putc+0x22>
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	};
	// write to data register
	f.tx_buf_head = f.next_tx_buf_head;			// accept the next buffer head value
    5168:	90 93 ae 21 	sts	0x21AE, r25
	f.tx_buf[f.tx_buf_head] = c;				// ...and write char to buffer
    516c:	e0 91 ae 21 	lds	r30, 0x21AE
    5170:	f0 e0       	ldi	r31, 0x00	; 0
    5172:	e1 56       	subi	r30, 0x61	; 97
    5174:	fe 4d       	sbci	r31, 0xDE	; 222
    5176:	43 a3       	std	Z+35, r20	; 0x23

	if (CRLF(f.flags) && (c == '\n')) {			// detect LF and add a CR
    5178:	61 15       	cp	r22, r1
    517a:	71 05       	cpc	r23, r1
    517c:	21 f0       	breq	.+8      	; 0x5186 <xio_usb_putc+0x74>
    517e:	4a 30       	cpi	r20, 0x0A	; 10
    5180:	11 f4       	brne	.+4      	; 0x5186 <xio_usb_putc+0x74>
    5182:	4d e0       	ldi	r20, 0x0D	; 13
    5184:	d1 cf       	rjmp	.-94     	; 0x5128 <xio_usb_putc+0x16>
    5186:	90 93 af 21 	sts	0x21AF, r25
		return xio_usb_putc('\r', stream);		// recursion.
	}

	// dequeue the buffer if DATA register is ready
	if (f.usart->STATUS & 0x20) {
    518a:	a0 91 d4 21 	lds	r26, 0x21D4
    518e:	b0 91 d5 21 	lds	r27, 0x21D5
    5192:	11 96       	adiw	r26, 0x01	; 1
    5194:	8c 91       	ld	r24, X
    5196:	11 97       	sbiw	r26, 0x01	; 1
    5198:	85 ff       	sbrs	r24, 5
    519a:	27 c0       	rjmp	.+78     	; 0x51ea <xio_usb_putc+0xd8>
		if (f.tx_buf_head == f.tx_buf_tail) {	// buf might be empty if IRQ got it
    519c:	90 91 ae 21 	lds	r25, 0x21AE
    51a0:	80 91 ad 21 	lds	r24, 0x21AD
    51a4:	98 17       	cp	r25, r24
    51a6:	71 f1       	breq	.+92     	; 0x5204 <xio_usb_putc+0xf2>
			return (0);
		}
		f.flags |= XIO_FLAG_TX_MUTEX_bm;		// claim mutual exclusion from ISR
    51a8:	38 60       	ori	r19, 0x08	; 8
    51aa:	20 93 9f 21 	sts	0x219F, r18
    51ae:	30 93 a0 21 	sts	0x21A0, r19
		if (--(f.tx_buf_tail) == 0) {			// advance tail and wrap if needed
    51b2:	80 91 ad 21 	lds	r24, 0x21AD
    51b6:	81 50       	subi	r24, 0x01	; 1
    51b8:	80 93 ad 21 	sts	0x21AD, r24
    51bc:	80 91 ad 21 	lds	r24, 0x21AD
    51c0:	88 23       	and	r24, r24
    51c2:	19 f4       	brne	.+6      	; 0x51ca <xio_usb_putc+0xb8>
			f.tx_buf_tail = TX_BUFFER_SIZE-1;	// -1 avoids off-by-one error (OBOE)
    51c4:	81 e1       	ldi	r24, 0x11	; 17
    51c6:	80 93 ad 21 	sts	0x21AD, r24
		}
		f.usart->DATA = f.tx_buf[f.tx_buf_tail];// write char to TX DATA register
    51ca:	e0 91 ad 21 	lds	r30, 0x21AD
    51ce:	f0 e0       	ldi	r31, 0x00	; 0
    51d0:	e1 56       	subi	r30, 0x61	; 97
    51d2:	fe 4d       	sbci	r31, 0xDE	; 222
    51d4:	83 a1       	ldd	r24, Z+35	; 0x23
    51d6:	8c 93       	st	X, r24
		f.flags &= ~XIO_FLAG_TX_MUTEX_bm;		// release mutual exclusion lock
    51d8:	80 91 9f 21 	lds	r24, 0x219F
    51dc:	90 91 a0 21 	lds	r25, 0x21A0
    51e0:	97 7f       	andi	r25, 0xF7	; 247
    51e2:	80 93 9f 21 	sts	0x219F, r24
    51e6:	90 93 a0 21 	sts	0x21A0, r25
	}
	// enable interrupts regardless
	f.usart->CTRLA = USARTC0_CTRLA_RXON_TXON;	// doesn't work if you just |= it
    51ea:	e0 91 d4 21 	lds	r30, 0x21D4
    51ee:	f0 91 d5 21 	lds	r31, 0x21D5
    51f2:	81 e2       	ldi	r24, 0x21	; 33
    51f4:	83 83       	std	Z+3, r24	; 0x03
	PMIC_EnableLowLevel(); 						// enable USART TX interrupts
    51f6:	80 91 a2 00 	lds	r24, 0x00A2
    51fa:	81 60       	ori	r24, 0x01	; 1
    51fc:	e0 ea       	ldi	r30, 0xA0	; 160
    51fe:	f0 e0       	ldi	r31, 0x00	; 0
    5200:	82 83       	std	Z+2, r24	; 0x02
	sei();										// enable global interrupts
    5202:	78 94       	sei
    5204:	20 e0       	ldi	r18, 0x00	; 0
    5206:	30 e0       	ldi	r19, 0x00	; 0

	return (0);	// 0 = OK
}
    5208:	c9 01       	movw	r24, r18
    520a:	08 95       	ret

0000520c <xio_usb_getc>:
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
		if (BLOCKING(f.flags)) {
    520c:	20 91 9f 21 	lds	r18, 0x219F
    5210:	30 91 a0 21 	lds	r19, 0x21A0
    5214:	24 70       	andi	r18, 0x04	; 4
    5216:	30 70       	andi	r19, 0x00	; 0
    5218:	15 c0       	rjmp	.+42     	; 0x5244 <xio_usb_getc+0x38>
    521a:	21 15       	cp	r18, r1
    521c:	31 05       	cpc	r19, r1
    521e:	61 f0       	breq	.+24     	; 0x5238 <xio_usb_getc+0x2c>
			sleep_mode();
    5220:	80 91 48 00 	lds	r24, 0x0048
    5224:	81 60       	ori	r24, 0x01	; 1
    5226:	80 93 48 00 	sts	0x0048, r24
    522a:	88 95       	sleep
    522c:	80 91 48 00 	lds	r24, 0x0048
    5230:	8e 7f       	andi	r24, 0xFE	; 254
    5232:	80 93 48 00 	sts	0x0048, r24
    5236:	06 c0       	rjmp	.+12     	; 0x5244 <xio_usb_getc+0x38>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
    5238:	83 e0       	ldi	r24, 0x03	; 3
    523a:	80 93 a1 21 	sts	0x21A1, r24
    523e:	2f ef       	ldi	r18, 0xFF	; 255
    5240:	3f ef       	ldi	r19, 0xFF	; 255
    5242:	26 c0       	rjmp	.+76     	; 0x5290 <xio_usb_getc+0x84>
 *		  character helper routines. See them for behaviors
 */

int xio_usb_getc(FILE *stream)
{
	while (f.rx_buf_head == f.rx_buf_tail) {	// RX ISR buffer empty
    5244:	90 91 ac 21 	lds	r25, 0x21AC
    5248:	80 91 ab 21 	lds	r24, 0x21AB
    524c:	98 17       	cp	r25, r24
    524e:	29 f3       	breq	.-54     	; 0x521a <xio_usb_getc+0xe>
		} else {
			f.sig = XIO_SIG_WOULDBLOCK;
			return(_FDEV_ERR);
		}
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    5250:	80 91 ab 21 	lds	r24, 0x21AB
    5254:	81 50       	subi	r24, 0x01	; 1
    5256:	80 93 ab 21 	sts	0x21AB, r24
    525a:	80 91 ab 21 	lds	r24, 0x21AB
    525e:	88 23       	and	r24, r24
    5260:	19 f4       	brne	.+6      	; 0x5268 <xio_usb_getc+0x5c>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    5262:	81 e1       	ldi	r24, 0x11	; 17
    5264:	80 93 ab 21 	sts	0x21AB, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX buffer & mask MSB
    5268:	e0 91 ab 21 	lds	r30, 0x21AB
    526c:	f0 e0       	ldi	r31, 0x00	; 0
    526e:	e1 56       	subi	r30, 0x61	; 97
    5270:	fe 4d       	sbci	r31, 0xDE	; 222
    5272:	81 89       	ldd	r24, Z+17	; 0x11
    5274:	8f 77       	andi	r24, 0x7F	; 127
    5276:	80 93 a2 21 	sts	0x21A2, r24
	// 	call action procedure from dispatch table in FLASH (see xio.h for typedef)
	return (((fptr_int_void)(pgm_read_word(&getcFuncs[f.c])))());
    527a:	90 e0       	ldi	r25, 0x00	; 0
    527c:	88 0f       	add	r24, r24
    527e:	99 1f       	adc	r25, r25
    5280:	8a 59       	subi	r24, 0x9A	; 154
    5282:	97 4f       	sbci	r25, 0xF7	; 247
    5284:	fc 01       	movw	r30, r24
    5286:	25 91       	lpm	r18, Z+
    5288:	34 91       	lpm	r19, Z+
    528a:	f9 01       	movw	r30, r18
    528c:	19 95       	eicall
    528e:	9c 01       	movw	r18, r24
	//return (getcFuncs[c]()); // call action procedure from dispatch table in RAM
}
    5290:	c9 01       	movw	r24, r18
    5292:	08 95       	ret

00005294 <_getc_char>:

/* xio_usb_getc helper routines */

static int _getc_char(void)
{
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    5294:	80 91 9f 21 	lds	r24, 0x219F
    5298:	84 ff       	sbrs	r24, 4
    529a:	08 c0       	rjmp	.+16     	; 0x52ac <_getc_char+0x18>
    529c:	60 91 0e 25 	lds	r22, 0x250E
    52a0:	70 91 0f 25 	lds	r23, 0x250F
    52a4:	80 91 a2 21 	lds	r24, 0x21A2
    52a8:	0e 94 89 28 	call	0x5112	; 0x5112 <xio_usb_putc>
	return(f.c);
}
    52ac:	80 91 a2 21 	lds	r24, 0x21A2
    52b0:	90 e0       	ldi	r25, 0x00	; 0
    52b2:	08 95       	ret

000052b4 <_getc_NEWLINE>:

static int _getc_NEWLINE(void)		// convert CRs and LFs to newlines if line mode
{
	if (LINEMODE(f.flags)) f.c = '\n';
    52b4:	90 91 9f 21 	lds	r25, 0x219F
    52b8:	96 ff       	sbrs	r25, 6
    52ba:	03 c0       	rjmp	.+6      	; 0x52c2 <_getc_NEWLINE+0xe>
    52bc:	8a e0       	ldi	r24, 0x0A	; 10
    52be:	80 93 a2 21 	sts	0x21A2, r24
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    52c2:	94 ff       	sbrs	r25, 4
    52c4:	08 c0       	rjmp	.+16     	; 0x52d6 <_getc_NEWLINE+0x22>
    52c6:	60 91 0e 25 	lds	r22, 0x250E
    52ca:	70 91 0f 25 	lds	r23, 0x250F
    52ce:	80 91 a2 21 	lds	r24, 0x21A2
    52d2:	0e 94 89 28 	call	0x5112	; 0x5112 <xio_usb_putc>
	return(f.c);
}
    52d6:	80 91 a2 21 	lds	r24, 0x21A2
    52da:	90 e0       	ldi	r25, 0x00	; 0
    52dc:	08 95       	ret

000052de <_getc_SEMICOLON>:

static int _getc_SEMICOLON(void)
{
	if (SEMICOLONS(f.flags)) {
    52de:	80 91 9f 21 	lds	r24, 0x219F
    52e2:	87 ff       	sbrs	r24, 7
    52e4:	03 c0       	rjmp	.+6      	; 0x52ec <_getc_SEMICOLON+0xe>
		return (_getc_NEWLINE());			// if semi mode treat as an EOL
    52e6:	0e 94 5a 29 	call	0x52b4	; 0x52b4 <_getc_NEWLINE>
    52ea:	08 95       	ret
	} 
	return (_getc_char());					// else treat as any other character
    52ec:	0e 94 4a 29 	call	0x5294	; 0x5294 <_getc_char>
}
    52f0:	08 95       	ret

000052f2 <_getc_DELETE>:

static int _getc_DELETE(void)				// can't handle a delete very well
{
	f.sig = XIO_SIG_DELETE;
    52f2:	8a e0       	ldi	r24, 0x0A	; 10
    52f4:	80 93 a1 21 	sts	0x21A1, r24
	return(_FDEV_ERR);
}
    52f8:	8f ef       	ldi	r24, 0xFF	; 255
    52fa:	9f ef       	ldi	r25, 0xFF	; 255
    52fc:	08 95       	ret

000052fe <_getc_KILL>:

static int _getc_KILL(void)
{
	f.sig = XIO_SIG_KILL;
    52fe:	84 e0       	ldi	r24, 0x04	; 4
    5300:	80 93 a1 21 	sts	0x21A1, r24
	return(_FDEV_ERR);
}
    5304:	8f ef       	ldi	r24, 0xFF	; 255
    5306:	9f ef       	ldi	r25, 0xFF	; 255
    5308:	08 95       	ret

0000530a <_getc_PAUSE>:

static int _getc_PAUSE(void)
{
	f.sig = XIO_SIG_PAUSE;
    530a:	86 e0       	ldi	r24, 0x06	; 6
    530c:	80 93 a1 21 	sts	0x21A1, r24
	return(_FDEV_ERR);
}
    5310:	8f ef       	ldi	r24, 0xFF	; 255
    5312:	9f ef       	ldi	r25, 0xFF	; 255
    5314:	08 95       	ret

00005316 <_getc_RESUME>:

static int _getc_RESUME(void)
{
	f.sig = XIO_SIG_RESUME;
    5316:	87 e0       	ldi	r24, 0x07	; 7
    5318:	80 93 a1 21 	sts	0x21A1, r24
	return(_FDEV_ERR);
}
    531c:	8f ef       	ldi	r24, 0xFF	; 255
    531e:	9f ef       	ldi	r25, 0xFF	; 255
    5320:	08 95       	ret

00005322 <_getc_SHIFTOUT>:

static int _getc_SHIFTOUT(void)
{
	f.sig = XIO_SIG_SHIFTOUT;
    5322:	88 e0       	ldi	r24, 0x08	; 8
    5324:	80 93 a1 21 	sts	0x21A1, r24
	return(_FDEV_ERR);
}
    5328:	8f ef       	ldi	r24, 0xFF	; 255
    532a:	9f ef       	ldi	r25, 0xFF	; 255
    532c:	08 95       	ret

0000532e <_getc_SHIFTIN>:

static int _getc_SHIFTIN(void)
{
	f.sig = XIO_SIG_SHIFTIN;
    532e:	89 e0       	ldi	r24, 0x09	; 9
    5330:	80 93 a1 21 	sts	0x21A1, r24
	return(_FDEV_ERR);
}
    5334:	8f ef       	ldi	r24, 0xFF	; 255
    5336:	9f ef       	ldi	r25, 0xFF	; 255
    5338:	08 95       	ret

0000533a <xio_usb_readln>:
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_usb_readln(char *buf, uint8_t len)
{
	if (!IN_LINE(f.flags)) {					// first time thru initializations
    533a:	20 91 9f 21 	lds	r18, 0x219F
    533e:	30 91 a0 21 	lds	r19, 0x21A0
    5342:	36 fd       	sbrc	r19, 6
    5344:	0d c0       	rjmp	.+26     	; 0x5360 <xio_usb_readln+0x26>
		f.i = 0;								// zero buffer
    5346:	10 92 a3 21 	sts	0x21A3, r1
		f.len = len;							// save arg into struct 
    534a:	60 93 a4 21 	sts	0x21A4, r22
		f.buf = buf;							// save arg into struct 
    534e:	80 93 a5 21 	sts	0x21A5, r24
    5352:	90 93 a6 21 	sts	0x21A6, r25
//		f.sig = XIO_SIG_OK;						// no signal action
		f.flags |= XIO_FLAG_IN_LINE_bm;			// yes, we are busy getting a line
    5356:	30 64       	ori	r19, 0x40	; 64
    5358:	20 93 9f 21 	sts	0x219F, r18
    535c:	30 93 a0 21 	sts	0x21A0, r19
	}
	if (f.rx_buf_head == f.rx_buf_tail) {		// RX ISR buffer empty
    5360:	90 91 ac 21 	lds	r25, 0x21AC
    5364:	80 91 ab 21 	lds	r24, 0x21AB
    5368:	98 17       	cp	r25, r24
    536a:	19 f4       	brne	.+6      	; 0x5372 <xio_usb_readln+0x38>
    536c:	22 e0       	ldi	r18, 0x02	; 2
    536e:	30 e0       	ldi	r19, 0x00	; 0
    5370:	20 c0       	rjmp	.+64     	; 0x53b2 <xio_usb_readln+0x78>
//		f.sig = XIO_SIG_WOULDBLOCK;
		return(TG_CONTINUE);
	}
	if (--(f.rx_buf_tail) == 0) {				// advance RX tail (RXQ read pointer)
    5372:	80 91 ab 21 	lds	r24, 0x21AB
    5376:	81 50       	subi	r24, 0x01	; 1
    5378:	80 93 ab 21 	sts	0x21AB, r24
    537c:	80 91 ab 21 	lds	r24, 0x21AB
    5380:	88 23       	and	r24, r24
    5382:	19 f4       	brne	.+6      	; 0x538a <xio_usb_readln+0x50>
		f.rx_buf_tail = RX_BUFFER_SIZE-1;		// -1 avoids off-by-one error (OBOE)
    5384:	81 e1       	ldi	r24, 0x11	; 17
    5386:	80 93 ab 21 	sts	0x21AB, r24
	}
	f.c = (f.rx_buf[f.rx_buf_tail] & 0x007F);	// get char from RX Q & mask MSB
    538a:	e0 91 ab 21 	lds	r30, 0x21AB
    538e:	f0 e0       	ldi	r31, 0x00	; 0
    5390:	e1 56       	subi	r30, 0x61	; 97
    5392:	fe 4d       	sbci	r31, 0xDE	; 222
    5394:	81 89       	ldd	r24, Z+17	; 0x11
    5396:	8f 77       	andi	r24, 0x7F	; 127
    5398:	80 93 a2 21 	sts	0x21A2, r24
	return (((fptr_int_void)(pgm_read_word(&readlnFuncs[f.c])))()); // dispatch on character
    539c:	90 e0       	ldi	r25, 0x00	; 0
    539e:	88 0f       	add	r24, r24
    53a0:	99 1f       	adc	r25, r25
    53a2:	8a 59       	subi	r24, 0x9A	; 154
    53a4:	98 4f       	sbci	r25, 0xF8	; 248
    53a6:	fc 01       	movw	r30, r24
    53a8:	25 91       	lpm	r18, Z+
    53aa:	34 91       	lpm	r19, Z+
    53ac:	f9 01       	movw	r30, r18
    53ae:	19 95       	eicall
    53b0:	9c 01       	movw	r18, r24
}
    53b2:	c9 01       	movw	r24, r18
    53b4:	08 95       	ret

000053b6 <_readln_char>:

/* xio_usb_readln helper routines */

static int _readln_char(void)
{
	if (f.i > f.len) {							// trap buffer overflow
    53b6:	90 91 a3 21 	lds	r25, 0x21A3
    53ba:	20 91 a4 21 	lds	r18, 0x21A4
    53be:	e0 91 a5 21 	lds	r30, 0x21A5
    53c2:	f0 91 a6 21 	lds	r31, 0x21A6
    53c6:	29 17       	cp	r18, r25
    53c8:	48 f4       	brcc	.+18     	; 0x53dc <_readln_char+0x26>
		f.sig = XIO_SIG_EOL;
    53ca:	81 e0       	ldi	r24, 0x01	; 1
    53cc:	80 93 a1 21 	sts	0x21A1, r24
		f.buf[f.len] = NUL;						// f.len is zero based
    53d0:	e2 0f       	add	r30, r18
    53d2:	f1 1d       	adc	r31, r1
    53d4:	10 82       	st	Z, r1
    53d6:	26 e0       	ldi	r18, 0x06	; 6
    53d8:	30 e0       	ldi	r19, 0x00	; 0
    53da:	16 c0       	rjmp	.+44     	; 0x5408 <_readln_char+0x52>
		return (TG_BUFFER_FULL);
	}
	f.buf[f.i++] = f.c;
    53dc:	e9 0f       	add	r30, r25
    53de:	f1 1d       	adc	r31, r1
    53e0:	80 91 a2 21 	lds	r24, 0x21A2
    53e4:	80 83       	st	Z, r24
    53e6:	9f 5f       	subi	r25, 0xFF	; 255
    53e8:	90 93 a3 21 	sts	0x21A3, r25
	if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);// conditional echo
    53ec:	80 91 9f 21 	lds	r24, 0x219F
    53f0:	84 ff       	sbrs	r24, 4
    53f2:	08 c0       	rjmp	.+16     	; 0x5404 <_readln_char+0x4e>
    53f4:	60 91 0e 25 	lds	r22, 0x250E
    53f8:	70 91 0f 25 	lds	r23, 0x250F
    53fc:	80 91 a2 21 	lds	r24, 0x21A2
    5400:	0e 94 89 28 	call	0x5112	; 0x5112 <xio_usb_putc>
    5404:	22 e0       	ldi	r18, 0x02	; 2
    5406:	30 e0       	ldi	r19, 0x00	; 0
	return (TG_CONTINUE);						// line is still in process
}
    5408:	c9 01       	movw	r24, r18
    540a:	08 95       	ret

0000540c <_readln_NEWLINE>:

static int _readln_NEWLINE(void)				// handles any valid newline char
{
	f.sig = XIO_SIG_EOL;
    540c:	81 e0       	ldi	r24, 0x01	; 1
    540e:	80 93 a1 21 	sts	0x21A1, r24
	f.buf[f.i] = NUL;
    5412:	80 91 a3 21 	lds	r24, 0x21A3
    5416:	e0 91 a5 21 	lds	r30, 0x21A5
    541a:	f0 91 a6 21 	lds	r31, 0x21A6
    541e:	e8 0f       	add	r30, r24
    5420:	f1 1d       	adc	r31, r1
    5422:	10 82       	st	Z, r1
	f.flags &= ~XIO_FLAG_IN_LINE_bm;			// clear in-line state (reset)
    5424:	20 91 9f 21 	lds	r18, 0x219F
    5428:	30 91 a0 21 	lds	r19, 0x21A0
    542c:	c9 01       	movw	r24, r18
    542e:	9f 7b       	andi	r25, 0xBF	; 191
    5430:	80 93 9f 21 	sts	0x219F, r24
    5434:	90 93 a0 21 	sts	0x21A0, r25
	if (ECHO(f.flags)) xio_usb_putc('\n',stdout);// echo a newline
    5438:	24 ff       	sbrs	r18, 4
    543a:	07 c0       	rjmp	.+14     	; 0x544a <_readln_NEWLINE+0x3e>
    543c:	60 91 0e 25 	lds	r22, 0x250E
    5440:	70 91 0f 25 	lds	r23, 0x250F
    5444:	8a e0       	ldi	r24, 0x0A	; 10
    5446:	0e 94 89 28 	call	0x5112	; 0x5112 <xio_usb_putc>
	return ((int)f.line_func(f.buf));			// call line handler function
    544a:	e0 91 a9 21 	lds	r30, 0x21A9
    544e:	f0 91 aa 21 	lds	r31, 0x21AA
    5452:	80 91 a5 21 	lds	r24, 0x21A5
    5456:	90 91 a6 21 	lds	r25, 0x21A6
    545a:	19 95       	eicall
}
    545c:	08 95       	ret

0000545e <_readln_SEMICOLON>:

static int _readln_SEMICOLON(void)				// semicolon is a conditional newline
{
	if (SEMICOLONS(f.flags)) {
    545e:	80 91 9f 21 	lds	r24, 0x219F
    5462:	87 ff       	sbrs	r24, 7
    5464:	03 c0       	rjmp	.+6      	; 0x546c <_readln_SEMICOLON+0xe>
		return (_readln_NEWLINE());				// if semi mode treat as an EOL
    5466:	0e 94 06 2a 	call	0x540c	; 0x540c <_readln_NEWLINE>
    546a:	08 95       	ret
	} else {
		return (_readln_char());				// else treat as any other character
    546c:	0e 94 db 29 	call	0x53b6	; 0x53b6 <_readln_char>
	}
}
    5470:	08 95       	ret

00005472 <_readln_DELETE>:

static int _readln_DELETE(void)
{
	if (--f.i >= 0) {
    5472:	80 91 a3 21 	lds	r24, 0x21A3
    5476:	81 50       	subi	r24, 0x01	; 1
    5478:	80 93 a3 21 	sts	0x21A3, r24
		if (ECHO(f.flags)) xio_usb_putc(f.c, stdout);
    547c:	80 91 9f 21 	lds	r24, 0x219F
    5480:	84 ff       	sbrs	r24, 4
    5482:	08 c0       	rjmp	.+16     	; 0x5494 <_readln_DELETE+0x22>
    5484:	60 91 0e 25 	lds	r22, 0x250E
    5488:	70 91 0f 25 	lds	r23, 0x250F
    548c:	80 91 a2 21 	lds	r24, 0x21A2
    5490:	0e 94 89 28 	call	0x5112	; 0x5112 <xio_usb_putc>
	} else {
		f.i = 0;
	}
	return (TG_CONTINUE);						// line is still in process
}
    5494:	82 e0       	ldi	r24, 0x02	; 2
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	08 95       	ret

0000549a <_readln_KILL>:

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    549a:	84 e0       	ldi	r24, 0x04	; 4
    549c:	80 93 a1 21 	sts	0x21A1, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    54a0:	e0 91 a7 21 	lds	r30, 0x21A7
    54a4:	f0 91 a8 21 	lds	r31, 0x21A8
    54a8:	19 95       	eicall
}

static int _readln_KILL(void)
{
	return _readln_SIG(XIO_SIG_KILL);
}
    54aa:	08 95       	ret

000054ac <_readln_PAUSE>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    54ac:	86 e0       	ldi	r24, 0x06	; 6
    54ae:	80 93 a1 21 	sts	0x21A1, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    54b2:	e0 91 a7 21 	lds	r30, 0x21A7
    54b6:	f0 91 a8 21 	lds	r31, 0x21A8
    54ba:	19 95       	eicall
}

static int _readln_PAUSE(void)
{
	return _readln_SIG(XIO_SIG_PAUSE);
}
    54bc:	08 95       	ret

000054be <_readln_RESUME>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    54be:	87 e0       	ldi	r24, 0x07	; 7
    54c0:	80 93 a1 21 	sts	0x21A1, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    54c4:	e0 91 a7 21 	lds	r30, 0x21A7
    54c8:	f0 91 a8 21 	lds	r31, 0x21A8
    54cc:	19 95       	eicall
}

static int _readln_RESUME(void)
{
	return _readln_SIG(XIO_SIG_RESUME);
}
    54ce:	08 95       	ret

000054d0 <_readln_SHIFTOUT>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    54d0:	88 e0       	ldi	r24, 0x08	; 8
    54d2:	80 93 a1 21 	sts	0x21A1, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    54d6:	e0 91 a7 21 	lds	r30, 0x21A7
    54da:	f0 91 a8 21 	lds	r31, 0x21A8
    54de:	19 95       	eicall
}

static int _readln_SHIFTOUT(void)
{
	return _readln_SIG(XIO_SIG_SHIFTOUT);
}
    54e0:	08 95       	ret

000054e2 <_readln_SHIFTIN>:
	return (TG_CONTINUE);						// line is still in process
}

static int _readln_SIG(uint8_t sig)
{
	f.sig = sig;
    54e2:	89 e0       	ldi	r24, 0x09	; 9
    54e4:	80 93 a1 21 	sts	0x21A1, r24
	return ((int)f.sig_func(sig));				// call signal handler function	
    54e8:	e0 91 a7 21 	lds	r30, 0x21A7
    54ec:	f0 91 a8 21 	lds	r31, 0x21A8
    54f0:	19 95       	eicall
}

static int _readln_SHIFTIN(void)
{
	return _readln_SIG(XIO_SIG_SHIFTIN);
}
    54f2:	08 95       	ret

000054f4 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    54f4:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    54f6:	e0 ec       	ldi	r30, 0xC0	; 192
    54f8:	f1 e0       	ldi	r31, 0x01	; 1
    54fa:	80 91 cf 01 	lds	r24, 0x01CF
    54fe:	87 fd       	sbrc	r24, 7
    5500:	fa cf       	rjmp	.-12     	; 0x54f6 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    5502:	26 2f       	mov	r18, r22
    5504:	30 e0       	ldi	r19, 0x00	; 0
    5506:	2f 71       	andi	r18, 0x1F	; 31
    5508:	30 70       	andi	r19, 0x00	; 0
    550a:	89 2f       	mov	r24, r25
    550c:	90 e0       	ldi	r25, 0x00	; 0
    550e:	45 e0       	ldi	r20, 0x05	; 5
    5510:	88 0f       	add	r24, r24
    5512:	99 1f       	adc	r25, r25
    5514:	4a 95       	dec	r20
    5516:	e1 f7       	brne	.-8      	; 0x5510 <EEPROM_ReadByte+0x1c>
    5518:	28 2b       	or	r18, r24
    551a:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    551c:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5520:	83 2f       	mov	r24, r19
    5522:	8f 71       	andi	r24, 0x1F	; 31
    5524:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5526:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    5528:	86 e0       	ldi	r24, 0x06	; 6
    552a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    552c:	ef 93       	push	r30
    552e:	ff 93       	push	r31
    5530:	0f 93       	push	r16
    5532:	2f 93       	push	r18
    5534:	eb ec       	ldi	r30, 0xCB	; 203
    5536:	f1 e0       	ldi	r31, 0x01	; 1
    5538:	08 ed       	ldi	r16, 0xD8	; 216
    553a:	21 e0       	ldi	r18, 0x01	; 1
    553c:	04 bf       	out	0x34, r16	; 52
    553e:	20 83       	st	Z, r18
    5540:	2f 91       	pop	r18
    5542:	0f 91       	pop	r16
    5544:	ff 91       	pop	r31
    5546:	ef 91       	pop	r30

	return NVM.DATA0;
    5548:	80 91 c4 01 	lds	r24, 0x01C4
}
    554c:	08 95       	ret

0000554e <eeprom_get_char>:

char eeprom_get_char( unsigned int addr )
{
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
    554e:	68 2f       	mov	r22, r24
    5550:	6f 71       	andi	r22, 0x1F	; 31
    5552:	55 e0       	ldi	r21, 0x05	; 5
    5554:	96 95       	lsr	r25
    5556:	87 95       	ror	r24
    5558:	5a 95       	dec	r21
    555a:	e1 f7       	brne	.-8      	; 0x5554 <eeprom_get_char+0x6>
    555c:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <EEPROM_ReadByte>
}
    5560:	08 95       	ret

00005562 <memcpy_from_eeprom_with_checksum>:
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
    5562:	8f 92       	push	r8
    5564:	9f 92       	push	r9
    5566:	af 92       	push	r10
    5568:	bf 92       	push	r11
    556a:	cf 92       	push	r12
    556c:	df 92       	push	r13
    556e:	ff 92       	push	r15
    5570:	0f 93       	push	r16
    5572:	1f 93       	push	r17
    5574:	cf 93       	push	r28
    5576:	df 93       	push	r29
    5578:	4c 01       	movw	r8, r24
    557a:	5b 01       	movw	r10, r22
    557c:	6a 01       	movw	r12, r20
    557e:	8b 01       	movw	r16, r22
    5580:	ea 01       	movw	r28, r20
    5582:	ff 24       	eor	r15, r15
    5584:	18 c0       	rjmp	.+48     	; 0x55b6 <memcpy_from_eeprom_with_checksum+0x54>
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    5586:	c8 01       	movw	r24, r16
    5588:	0e 94 a7 2a 	call	0x554e	; 0x554e <eeprom_get_char>
    checksum = (checksum << 1) || (checksum >> 7);
    558c:	ff 20       	and	r15, r15
    558e:	19 f0       	breq	.+6      	; 0x5596 <memcpy_from_eeprom_with_checksum+0x34>
    5590:	21 e0       	ldi	r18, 0x01	; 1
    5592:	30 e0       	ldi	r19, 0x00	; 0
    5594:	08 c0       	rjmp	.+16     	; 0x55a6 <memcpy_from_eeprom_with_checksum+0x44>
    5596:	2f 2d       	mov	r18, r15
    5598:	33 27       	eor	r19, r19
    559a:	27 fd       	sbrc	r18, 7
    559c:	30 95       	com	r19
    559e:	22 27       	eor	r18, r18
    55a0:	33 0f       	add	r19, r19
    55a2:	22 1f       	adc	r18, r18
    55a4:	33 27       	eor	r19, r19
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    data = eeprom_get_char(source++);
    55a6:	0f 5f       	subi	r16, 0xFF	; 255
    55a8:	1f 4f       	sbci	r17, 0xFF	; 255
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    55aa:	f8 2e       	mov	r15, r24
    55ac:	f2 0e       	add	r15, r18
    *(destination++) = data; 
    55ae:	f4 01       	movw	r30, r8
    55b0:	81 93       	st	Z+, r24
    55b2:	4f 01       	movw	r8, r30
  eeprom_put_char(destination, checksum);
}

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
    55b4:	21 97       	sbiw	r28, 0x01	; 1
    55b6:	20 97       	sbiw	r28, 0x00	; 0
    55b8:	31 f7       	brne	.-52     	; 0x5586 <memcpy_from_eeprom_with_checksum+0x24>
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += data;    
    *(destination++) = data; 
  }
  return(checksum == eeprom_get_char(source));
    55ba:	c6 01       	movw	r24, r12
    55bc:	8a 0d       	add	r24, r10
    55be:	9b 1d       	adc	r25, r11
    55c0:	0e 94 a7 2a 	call	0x554e	; 0x554e <eeprom_get_char>
    55c4:	20 e0       	ldi	r18, 0x00	; 0
    55c6:	30 e0       	ldi	r19, 0x00	; 0
    55c8:	f8 16       	cp	r15, r24
    55ca:	11 f4       	brne	.+4      	; 0x55d0 <memcpy_from_eeprom_with_checksum+0x6e>
    55cc:	21 e0       	ldi	r18, 0x01	; 1
    55ce:	30 e0       	ldi	r19, 0x00	; 0
}
    55d0:	c9 01       	movw	r24, r18
    55d2:	df 91       	pop	r29
    55d4:	cf 91       	pop	r28
    55d6:	1f 91       	pop	r17
    55d8:	0f 91       	pop	r16
    55da:	ff 90       	pop	r15
    55dc:	df 90       	pop	r13
    55de:	cf 90       	pop	r12
    55e0:	bf 90       	pop	r11
    55e2:	af 90       	pop	r10
    55e4:	9f 90       	pop	r9
    55e6:	8f 90       	pop	r8
    55e8:	08 95       	ret

000055ea <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    55ea:	80 91 cf 01 	lds	r24, 0x01CF
    55ee:	87 fd       	sbrc	r24, 7
    55f0:	fc cf       	rjmp	.-8      	; 0x55ea <EEPROM_WaitForNVM>
}
    55f2:	08 95       	ret

000055f4 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    55f4:	80 91 cf 01 	lds	r24, 0x01CF
    55f8:	87 fd       	sbrc	r24, 7
    55fa:	fc cf       	rjmp	.-8      	; 0x55f4 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    55fc:	80 91 cf 01 	lds	r24, 0x01CF
    5600:	81 ff       	sbrs	r24, 1
    5602:	12 c0       	rjmp	.+36     	; 0x5628 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    5604:	86 e3       	ldi	r24, 0x36	; 54
    5606:	e0 ec       	ldi	r30, 0xC0	; 192
    5608:	f1 e0       	ldi	r31, 0x01	; 1
    560a:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    560c:	ef 93       	push	r30
    560e:	ff 93       	push	r31
    5610:	0f 93       	push	r16
    5612:	2f 93       	push	r18
    5614:	eb ec       	ldi	r30, 0xCB	; 203
    5616:	f1 e0       	ldi	r31, 0x01	; 1
    5618:	08 ed       	ldi	r16, 0xD8	; 216
    561a:	21 e0       	ldi	r18, 0x01	; 1
    561c:	04 bf       	out	0x34, r16	; 52
    561e:	20 83       	st	Z, r18
    5620:	2f 91       	pop	r18
    5622:	0f 91       	pop	r16
    5624:	ff 91       	pop	r31
    5626:	ef 91       	pop	r30
    5628:	08 95       	ret

0000562a <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    562a:	df 92       	push	r13
    562c:	ef 92       	push	r14
    562e:	ff 92       	push	r15
    5630:	0f 93       	push	r16
    5632:	1f 93       	push	r17
    5634:	e8 2e       	mov	r14, r24
    5636:	06 2f       	mov	r16, r22
    5638:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    563a:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    563e:	e0 ec       	ldi	r30, 0xC0	; 192
    5640:	f1 e0       	ldi	r31, 0x01	; 1
    5642:	83 e3       	ldi	r24, 0x33	; 51
    5644:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)|(byteAddr & (EEPROM_PAGESIZE-1));
    5646:	10 e0       	ldi	r17, 0x00	; 0
    5648:	0f 71       	andi	r16, 0x1F	; 31
    564a:	10 70       	andi	r17, 0x00	; 0
    564c:	ff 24       	eor	r15, r15
    564e:	75 e0       	ldi	r23, 0x05	; 5
    5650:	ee 0c       	add	r14, r14
    5652:	ff 1c       	adc	r15, r15
    5654:	7a 95       	dec	r23
    5656:	e1 f7       	brne	.-8      	; 0x5650 <EEPROM_WriteByte+0x26>
    5658:	0e 29       	or	r16, r14
    565a:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    565c:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    565e:	81 2f       	mov	r24, r17
    5660:	8f 71       	andi	r24, 0x1F	; 31
    5662:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    5664:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5666:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5668:	85 e3       	ldi	r24, 0x35	; 53
    566a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    566c:	ef 93       	push	r30
    566e:	ff 93       	push	r31
    5670:	0f 93       	push	r16
    5672:	2f 93       	push	r18
    5674:	eb ec       	ldi	r30, 0xCB	; 203
    5676:	f1 e0       	ldi	r31, 0x01	; 1
    5678:	08 ed       	ldi	r16, 0xD8	; 216
    567a:	21 e0       	ldi	r18, 0x01	; 1
    567c:	04 bf       	out	0x34, r16	; 52
    567e:	20 83       	st	Z, r18
    5680:	2f 91       	pop	r18
    5682:	0f 91       	pop	r16
    5684:	ff 91       	pop	r31
    5686:	ef 91       	pop	r30
}
    5688:	1f 91       	pop	r17
    568a:	0f 91       	pop	r16
    568c:	ff 90       	pop	r15
    568e:	ef 90       	pop	r14
    5690:	df 90       	pop	r13
    5692:	08 95       	ret

00005694 <eeprom_put_char>:
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);
	return (EEPROM_ReadByte( pageAddr, byteAddr ));
}

void eeprom_put_char( unsigned int addr, char value )
{
    5694:	46 2f       	mov	r20, r22
	uint8_t pageAddr = (uint8_t)(addr / EEPROM_PAGESIZE);
	uint8_t byteAddr = (uint8_t)(addr % EEPROM_PAGESIZE);

	EEPROM_WriteByte(pageAddr, byteAddr, value );
    5696:	68 2f       	mov	r22, r24
    5698:	6f 71       	andi	r22, 0x1F	; 31
    569a:	e5 e0       	ldi	r30, 0x05	; 5
    569c:	96 95       	lsr	r25
    569e:	87 95       	ror	r24
    56a0:	ea 95       	dec	r30
    56a2:	e1 f7       	brne	.-8      	; 0x569c <eeprom_put_char+0x8>
    56a4:	0e 94 15 2b 	call	0x562a	; 0x562a <EEPROM_WriteByte>
}
    56a8:	08 95       	ret

000056aa <memcpy_to_eeprom_with_checksum>:

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
    56aa:	8f 92       	push	r8
    56ac:	9f 92       	push	r9
    56ae:	af 92       	push	r10
    56b0:	bf 92       	push	r11
    56b2:	cf 92       	push	r12
    56b4:	df 92       	push	r13
    56b6:	ef 92       	push	r14
    56b8:	ff 92       	push	r15
    56ba:	0f 93       	push	r16
    56bc:	df 93       	push	r29
    56be:	cf 93       	push	r28
    56c0:	0f 92       	push	r0
    56c2:	0f 92       	push	r0
    56c4:	cd b7       	in	r28, 0x3d	; 61
    56c6:	de b7       	in	r29, 0x3e	; 62
    56c8:	5c 01       	movw	r10, r24
    56ca:	6b 01       	movw	r12, r22
    56cc:	7a 01       	movw	r14, r20
    56ce:	4a 01       	movw	r8, r20
    56d0:	00 e0       	ldi	r16, 0x00	; 0
    56d2:	1e c0       	rjmp	.+60     	; 0x5710 <memcpy_to_eeprom_with_checksum+0x66>
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    checksum = (checksum << 1) || (checksum >> 7);
    56d4:	00 23       	and	r16, r16
    56d6:	19 f0       	breq	.+6      	; 0x56de <memcpy_to_eeprom_with_checksum+0x34>
    56d8:	21 e0       	ldi	r18, 0x01	; 1
    56da:	30 e0       	ldi	r19, 0x00	; 0
    56dc:	08 c0       	rjmp	.+16     	; 0x56ee <memcpy_to_eeprom_with_checksum+0x44>
    56de:	20 2f       	mov	r18, r16
    56e0:	33 27       	eor	r19, r19
    56e2:	27 fd       	sbrc	r18, 7
    56e4:	30 95       	com	r19
    56e6:	22 27       	eor	r18, r18
    56e8:	33 0f       	add	r19, r19
    56ea:	22 1f       	adc	r18, r18
    56ec:	33 27       	eor	r19, r19
    checksum += *source;
    56ee:	f6 01       	movw	r30, r12
    56f0:	61 91       	ld	r22, Z+
    56f2:	6f 01       	movw	r12, r30
    56f4:	06 2f       	mov	r16, r22
    56f6:	02 0f       	add	r16, r18
    eeprom_put_char(destination++, *(source++)); 
    56f8:	9c 01       	movw	r18, r24
    56fa:	2f 5f       	subi	r18, 0xFF	; 255
    56fc:	3f 4f       	sbci	r19, 0xFF	; 255
    56fe:	29 83       	std	Y+1, r18	; 0x01
    5700:	3a 83       	std	Y+2, r19	; 0x02
    5702:	0e 94 4a 2b 	call	0x5694	; 0x5694 <eeprom_put_char>
	EEPROM_WriteByte(pageAddr, byteAddr, value );
}

void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
    5706:	08 94       	sec
    5708:	81 08       	sbc	r8, r1
    570a:	91 08       	sbc	r9, r1
    570c:	89 81       	ldd	r24, Y+1	; 0x01
    570e:	9a 81       	ldd	r25, Y+2	; 0x02
    5710:	81 14       	cp	r8, r1
    5712:	91 04       	cpc	r9, r1
    5714:	f9 f6       	brne	.-66     	; 0x56d4 <memcpy_to_eeprom_with_checksum+0x2a>
    checksum = (checksum << 1) || (checksum >> 7);
    checksum += *source;
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
    5716:	c7 01       	movw	r24, r14
    5718:	8a 0d       	add	r24, r10
    571a:	9b 1d       	adc	r25, r11
    571c:	60 2f       	mov	r22, r16
    571e:	0e 94 4a 2b 	call	0x5694	; 0x5694 <eeprom_put_char>
}
    5722:	0f 90       	pop	r0
    5724:	0f 90       	pop	r0
    5726:	cf 91       	pop	r28
    5728:	df 91       	pop	r29
    572a:	0f 91       	pop	r16
    572c:	ff 90       	pop	r15
    572e:	ef 90       	pop	r14
    5730:	df 90       	pop	r13
    5732:	cf 90       	pop	r12
    5734:	bf 90       	pop	r11
    5736:	af 90       	pop	r10
    5738:	9f 90       	pop	r9
    573a:	8f 90       	pop	r8
    573c:	08 95       	ret

0000573e <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    573e:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5740:	e0 ec       	ldi	r30, 0xC0	; 192
    5742:	f1 e0       	ldi	r31, 0x01	; 1
    5744:	80 91 cf 01 	lds	r24, 0x01CF
    5748:	87 fd       	sbrc	r24, 7
    574a:	fa cf       	rjmp	.-12     	; 0x5740 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    574c:	83 e3       	ldi	r24, 0x33	; 51
    574e:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    5750:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    5754:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5756:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    5758:	64 83       	std	Z+4, r22	; 0x04
}
    575a:	08 95       	ret

0000575c <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    575c:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    575e:	e0 ec       	ldi	r30, 0xC0	; 192
    5760:	f1 e0       	ldi	r31, 0x01	; 1
    5762:	80 91 cf 01 	lds	r24, 0x01CF
    5766:	87 fd       	sbrc	r24, 7
    5768:	fa cf       	rjmp	.-12     	; 0x575e <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    576a:	83 e3       	ldi	r24, 0x33	; 51
    576c:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    576e:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    5770:	12 82       	std	Z+2, r1	; 0x02
    5772:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
		NVM.ADDR0 = i;
    5774:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    5778:	8d 91       	ld	r24, X+
    577a:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    577c:	9f 5f       	subi	r25, 0xFF	; 255
    577e:	90 32       	cpi	r25, 0x20	; 32
    5780:	c9 f7       	brne	.-14     	; 0x5774 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    5782:	08 95       	ret

00005784 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    5784:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5786:	e0 ec       	ldi	r30, 0xC0	; 192
    5788:	f1 e0       	ldi	r31, 0x01	; 1
    578a:	80 91 cf 01 	lds	r24, 0x01CF
    578e:	87 fd       	sbrc	r24, 7
    5790:	fa cf       	rjmp	.-12     	; 0x5786 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5792:	89 2f       	mov	r24, r25
    5794:	90 e0       	ldi	r25, 0x00	; 0
    5796:	a5 e0       	ldi	r26, 0x05	; 5
    5798:	88 0f       	add	r24, r24
    579a:	99 1f       	adc	r25, r25
    579c:	aa 95       	dec	r26
    579e:	e1 f7       	brne	.-8      	; 0x5798 <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    57a0:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    57a4:	89 2f       	mov	r24, r25
    57a6:	8f 71       	andi	r24, 0x1F	; 31
    57a8:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    57aa:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    57ac:	85 e3       	ldi	r24, 0x35	; 53
    57ae:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    57b0:	ef 93       	push	r30
    57b2:	ff 93       	push	r31
    57b4:	0f 93       	push	r16
    57b6:	2f 93       	push	r18
    57b8:	eb ec       	ldi	r30, 0xCB	; 203
    57ba:	f1 e0       	ldi	r31, 0x01	; 1
    57bc:	08 ed       	ldi	r16, 0xD8	; 216
    57be:	21 e0       	ldi	r18, 0x01	; 1
    57c0:	04 bf       	out	0x34, r16	; 52
    57c2:	20 83       	st	Z, r18
    57c4:	2f 91       	pop	r18
    57c6:	0f 91       	pop	r16
    57c8:	ff 91       	pop	r31
    57ca:	ef 91       	pop	r30
}
    57cc:	08 95       	ret

000057ce <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    57ce:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    57d0:	e0 ec       	ldi	r30, 0xC0	; 192
    57d2:	f1 e0       	ldi	r31, 0x01	; 1
    57d4:	80 91 cf 01 	lds	r24, 0x01CF
    57d8:	87 fd       	sbrc	r24, 7
    57da:	fa cf       	rjmp	.-12     	; 0x57d0 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    57dc:	89 2f       	mov	r24, r25
    57de:	90 e0       	ldi	r25, 0x00	; 0
    57e0:	b5 e0       	ldi	r27, 0x05	; 5
    57e2:	88 0f       	add	r24, r24
    57e4:	99 1f       	adc	r25, r25
    57e6:	ba 95       	dec	r27
    57e8:	e1 f7       	brne	.-8      	; 0x57e2 <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    57ea:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    57ee:	89 2f       	mov	r24, r25
    57f0:	8f 71       	andi	r24, 0x1F	; 31
    57f2:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    57f4:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    57f6:	82 e3       	ldi	r24, 0x32	; 50
    57f8:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    57fa:	ef 93       	push	r30
    57fc:	ff 93       	push	r31
    57fe:	0f 93       	push	r16
    5800:	2f 93       	push	r18
    5802:	eb ec       	ldi	r30, 0xCB	; 203
    5804:	f1 e0       	ldi	r31, 0x01	; 1
    5806:	08 ed       	ldi	r16, 0xD8	; 216
    5808:	21 e0       	ldi	r18, 0x01	; 1
    580a:	04 bf       	out	0x34, r16	; 52
    580c:	20 83       	st	Z, r18
    580e:	2f 91       	pop	r18
    5810:	0f 91       	pop	r16
    5812:	ff 91       	pop	r31
    5814:	ef 91       	pop	r30
}
    5816:	08 95       	ret

00005818 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    5818:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    581a:	e0 ec       	ldi	r30, 0xC0	; 192
    581c:	f1 e0       	ldi	r31, 0x01	; 1
    581e:	80 91 cf 01 	lds	r24, 0x01CF
    5822:	87 fd       	sbrc	r24, 7
    5824:	fa cf       	rjmp	.-12     	; 0x581a <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    5826:	89 2f       	mov	r24, r25
    5828:	90 e0       	ldi	r25, 0x00	; 0
    582a:	25 e0       	ldi	r18, 0x05	; 5
    582c:	88 0f       	add	r24, r24
    582e:	99 1f       	adc	r25, r25
    5830:	2a 95       	dec	r18
    5832:	e1 f7       	brne	.-8      	; 0x582c <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    5834:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    5838:	89 2f       	mov	r24, r25
    583a:	8f 71       	andi	r24, 0x1F	; 31
    583c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    583e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    5840:	84 e3       	ldi	r24, 0x34	; 52
    5842:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5844:	ef 93       	push	r30
    5846:	ff 93       	push	r31
    5848:	0f 93       	push	r16
    584a:	2f 93       	push	r18
    584c:	eb ec       	ldi	r30, 0xCB	; 203
    584e:	f1 e0       	ldi	r31, 0x01	; 1
    5850:	08 ed       	ldi	r16, 0xD8	; 216
    5852:	21 e0       	ldi	r18, 0x01	; 1
    5854:	04 bf       	out	0x34, r16	; 52
    5856:	20 83       	st	Z, r18
    5858:	2f 91       	pop	r18
    585a:	0f 91       	pop	r16
    585c:	ff 91       	pop	r31
    585e:	ef 91       	pop	r30
}
    5860:	08 95       	ret

00005862 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5862:	80 91 cf 01 	lds	r24, 0x01CF
    5866:	87 fd       	sbrc	r24, 7
    5868:	fc cf       	rjmp	.-8      	; 0x5862 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    586a:	80 e3       	ldi	r24, 0x30	; 48
    586c:	e0 ec       	ldi	r30, 0xC0	; 192
    586e:	f1 e0       	ldi	r31, 0x01	; 1
    5870:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    5872:	ef 93       	push	r30
    5874:	ff 93       	push	r31
    5876:	0f 93       	push	r16
    5878:	2f 93       	push	r18
    587a:	eb ec       	ldi	r30, 0xCB	; 203
    587c:	f1 e0       	ldi	r31, 0x01	; 1
    587e:	08 ed       	ldi	r16, 0xD8	; 216
    5880:	21 e0       	ldi	r18, 0x01	; 1
    5882:	04 bf       	out	0x34, r16	; 52
    5884:	20 83       	st	Z, r18
    5886:	2f 91       	pop	r18
    5888:	0f 91       	pop	r16
    588a:	ff 91       	pop	r31
    588c:	ef 91       	pop	r30
}
    588e:	08 95       	ret

00005890 <xio_pgm_init>:
 *
 *  Control parameters are defaulted and may be set using xio_pgm_control()
 */

void xio_pgm_init(const uint16_t control)
{
    5890:	9c 01       	movw	r18, r24
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;	// set flags to defaults & initial state
    5892:	85 e0       	ldi	r24, 0x05	; 5
    5894:	90 e0       	ldi	r25, 0x00	; 0
    5896:	80 93 d8 21 	sts	0x21D8, r24
    589a:	90 93 d9 21 	sts	0x21D9, r25
	if (control & XIO_WR) {				// this is actually an error. Ignore for now.
    589e:	25 ff       	sbrs	r18, 5
    58a0:	06 c0       	rjmp	.+12     	; 0x58ae <xio_pgm_init+0x1e>
		fpgm.flags |= XIO_FLAG_WR_bm;
    58a2:	87 e0       	ldi	r24, 0x07	; 7
    58a4:	90 e0       	ldi	r25, 0x00	; 0
    58a6:	80 93 d8 21 	sts	0x21D8, r24
    58aa:	90 93 d9 21 	sts	0x21D9, r25
	}
	if (control & XIO_NOBLOCK) {		// this is also technically a config error.
    58ae:	27 ff       	sbrs	r18, 7
    58b0:	09 c0       	rjmp	.+18     	; 0x58c4 <xio_pgm_init+0x34>
		fpgm.flags &= ~XIO_FLAG_BLOCK_bm;
    58b2:	80 91 d8 21 	lds	r24, 0x21D8
    58b6:	90 91 d9 21 	lds	r25, 0x21D9
    58ba:	8b 7f       	andi	r24, 0xFB	; 251
    58bc:	80 93 d8 21 	sts	0x21D8, r24
    58c0:	90 93 d9 21 	sts	0x21D9, r25
	}
	if (control & XIO_ECHO) {
    58c4:	30 ff       	sbrs	r19, 0
    58c6:	09 c0       	rjmp	.+18     	; 0x58da <xio_pgm_init+0x4a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    58c8:	80 91 d8 21 	lds	r24, 0x21D8
    58cc:	90 91 d9 21 	lds	r25, 0x21D9
    58d0:	80 61       	ori	r24, 0x10	; 16
    58d2:	80 93 d8 21 	sts	0x21D8, r24
    58d6:	90 93 d9 21 	sts	0x21D9, r25
	}
	if (control & XIO_NOECHO) {
    58da:	31 ff       	sbrs	r19, 1
    58dc:	09 c0       	rjmp	.+18     	; 0x58f0 <xio_pgm_init+0x60>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    58de:	80 91 d8 21 	lds	r24, 0x21D8
    58e2:	90 91 d9 21 	lds	r25, 0x21D9
    58e6:	8f 7e       	andi	r24, 0xEF	; 239
    58e8:	80 93 d8 21 	sts	0x21D8, r24
    58ec:	90 93 d9 21 	sts	0x21D9, r25
	}
	if (control & XIO_CRLF) {
    58f0:	32 ff       	sbrs	r19, 2
    58f2:	09 c0       	rjmp	.+18     	; 0x5906 <xio_pgm_init+0x76>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    58f4:	80 91 d8 21 	lds	r24, 0x21D8
    58f8:	90 91 d9 21 	lds	r25, 0x21D9
    58fc:	80 62       	ori	r24, 0x20	; 32
    58fe:	80 93 d8 21 	sts	0x21D8, r24
    5902:	90 93 d9 21 	sts	0x21D9, r25
	}
	if (control & XIO_NOCRLF) {
    5906:	33 ff       	sbrs	r19, 3
    5908:	09 c0       	rjmp	.+18     	; 0x591c <xio_pgm_init+0x8c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    590a:	80 91 d8 21 	lds	r24, 0x21D8
    590e:	90 91 d9 21 	lds	r25, 0x21D9
    5912:	8f 7d       	andi	r24, 0xDF	; 223
    5914:	80 93 d8 21 	sts	0x21D8, r24
    5918:	90 93 d9 21 	sts	0x21D9, r25
	}
	if (control & XIO_LINEMODE) {
    591c:	34 ff       	sbrs	r19, 4
    591e:	09 c0       	rjmp	.+18     	; 0x5932 <xio_pgm_init+0xa2>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5920:	80 91 d8 21 	lds	r24, 0x21D8
    5924:	90 91 d9 21 	lds	r25, 0x21D9
    5928:	80 64       	ori	r24, 0x40	; 64
    592a:	80 93 d8 21 	sts	0x21D8, r24
    592e:	90 93 d9 21 	sts	0x21D9, r25
	}
	if (control & XIO_NOLINEMODE) {
    5932:	35 ff       	sbrs	r19, 5
    5934:	09 c0       	rjmp	.+18     	; 0x5948 <xio_pgm_init+0xb8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5936:	80 91 d8 21 	lds	r24, 0x21D8
    593a:	90 91 d9 21 	lds	r25, 0x21D9
    593e:	8f 7b       	andi	r24, 0xBF	; 191
    5940:	80 93 d8 21 	sts	0x21D8, r24
    5944:	90 93 d9 21 	sts	0x21D9, r25
	}
	if (control & XIO_SEMICOLONS) {
    5948:	36 ff       	sbrs	r19, 6
    594a:	09 c0       	rjmp	.+18     	; 0x595e <xio_pgm_init+0xce>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    594c:	80 91 d8 21 	lds	r24, 0x21D8
    5950:	90 91 d9 21 	lds	r25, 0x21D9
    5954:	80 68       	ori	r24, 0x80	; 128
    5956:	80 93 d8 21 	sts	0x21D8, r24
    595a:	90 93 d9 21 	sts	0x21D9, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    595e:	37 ff       	sbrs	r19, 7
    5960:	09 c0       	rjmp	.+18     	; 0x5974 <xio_pgm_init+0xe4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5962:	80 91 d8 21 	lds	r24, 0x21D8
    5966:	90 91 d9 21 	lds	r25, 0x21D9
    596a:	8f 77       	andi	r24, 0x7F	; 127
    596c:	80 93 d8 21 	sts	0x21D8, r24
    5970:	90 93 d9 21 	sts	0x21D9, r25
	}

	fpgm.idx = 0;
    5974:	10 92 e6 21 	sts	0x21E6, r1
    5978:	10 92 e7 21 	sts	0x21E7, r1
	fpgm.sig = 0;
    597c:	10 92 da 21 	sts	0x21DA, r1
	dev_pgm.udata = &(fpgm.sig); 	// bind signals register to pgm FILE struct
    5980:	8a ed       	ldi	r24, 0xDA	; 218
    5982:	91 e2       	ldi	r25, 0x21	; 33
    5984:	80 93 1a 20 	sts	0x201A, r24
    5988:	90 93 1b 20 	sts	0x201B, r25
	fpgm.len = sizeof(fpgm.buf);
    598c:	82 e0       	ldi	r24, 0x02	; 2
    598e:	80 93 dd 21 	sts	0x21DD, r24

	fpgm.sig_func = &xio_null_signal;			// bind null signal handler
    5992:	80 e0       	ldi	r24, 0x00	; 0
    5994:	96 e2       	ldi	r25, 0x26	; 38
    5996:	80 93 de 21 	sts	0x21DE, r24
    599a:	90 93 df 21 	sts	0x21DF, r25
	fpgm.line_func = &xio_null_line;			// bind null line handler
    599e:	83 e0       	ldi	r24, 0x03	; 3
    59a0:	96 e2       	ldi	r25, 0x26	; 38
    59a2:	80 93 e0 21 	sts	0x21E0, r24
    59a6:	90 93 e1 21 	sts	0x21E1, r25
}
    59aa:	08 95       	ret

000059ac <xio_pgm_open>:
 *  Returns a pointer to the stdio FILE struct or -1 on error
 */

FILE * xio_pgm_open(const prog_char *addr)
{
	fpgm.flags &= XIO_FLAG_RESET_gm;			// reset the signaling bits
    59ac:	20 91 d8 21 	lds	r18, 0x21D8
    59b0:	30 91 d9 21 	lds	r19, 0x21D9
    59b4:	3f 70       	andi	r19, 0x0F	; 15
    59b6:	20 93 d8 21 	sts	0x21D8, r18
    59ba:	30 93 d9 21 	sts	0x21D9, r19
	fpgm.pgmbase_P = (PROGMEM char *)addr;		// might want to range check this
    59be:	80 93 e4 21 	sts	0x21E4, r24
    59c2:	90 93 e5 21 	sts	0x21E5, r25
	fpgm.idx = 0;
    59c6:	10 92 e6 21 	sts	0x21E6, r1
    59ca:	10 92 e7 21 	sts	0x21E7, r1
	return(&dev_pgm);
}
    59ce:	8e e0       	ldi	r24, 0x0E	; 14
    59d0:	90 e2       	ldi	r25, 0x20	; 32
    59d2:	08 95       	ret

000059d4 <xio_pgm_control>:
 *	XIO_SEMICOLONS <null>		Treat semicolons as line breaks
 *	XIO_NOSEMICOLONS <null>	Y	Don't treat semicolons as line breaks
 */

int8_t xio_pgm_control(const uint16_t control, const int16_t arg)
{
    59d4:	9c 01       	movw	r18, r24
	// commands with args - only do one flag if there's an arg
	if (control & XIO_SIG_FUNC) {
    59d6:	84 ff       	sbrs	r24, 4
    59d8:	05 c0       	rjmp	.+10     	; 0x59e4 <xio_pgm_control+0x10>
		fpgm.sig_func = (fptr_int_uint8)arg;
    59da:	60 93 de 21 	sts	0x21DE, r22
    59de:	70 93 df 21 	sts	0x21DF, r23
    59e2:	62 c0       	rjmp	.+196    	; 0x5aa8 <xio_pgm_control+0xd4>
		return (0);	
	}
	if (control & XIO_LINE_FUNC) {
    59e4:	85 ff       	sbrs	r24, 5
    59e6:	05 c0       	rjmp	.+10     	; 0x59f2 <xio_pgm_control+0x1e>
		fpgm.line_func = (fptr_int_char_p)arg;
    59e8:	60 93 e0 21 	sts	0x21E0, r22
    59ec:	70 93 e1 21 	sts	0x21E1, r23
    59f0:	5b c0       	rjmp	.+182    	; 0x5aa8 <xio_pgm_control+0xd4>
		return (0);
	}
	// transfer control flags to internal flag bits
	fpgm.flags = XIO_FLAG_PGM_DEFS_gm;		// set flags to defaults & initial state
    59f2:	85 e0       	ldi	r24, 0x05	; 5
    59f4:	90 e0       	ldi	r25, 0x00	; 0
    59f6:	80 93 d8 21 	sts	0x21D8, r24
    59fa:	90 93 d9 21 	sts	0x21D9, r25
	if (control & XIO_ECHO) {
    59fe:	30 ff       	sbrs	r19, 0
    5a00:	06 c0       	rjmp	.+12     	; 0x5a0e <xio_pgm_control+0x3a>
		fpgm.flags |= XIO_FLAG_ECHO_bm;
    5a02:	85 e1       	ldi	r24, 0x15	; 21
    5a04:	90 e0       	ldi	r25, 0x00	; 0
    5a06:	80 93 d8 21 	sts	0x21D8, r24
    5a0a:	90 93 d9 21 	sts	0x21D9, r25
	}
	if (control & XIO_NOECHO) {
    5a0e:	31 ff       	sbrs	r19, 1
    5a10:	09 c0       	rjmp	.+18     	; 0x5a24 <xio_pgm_control+0x50>
		fpgm.flags &= ~XIO_FLAG_ECHO_bm;
    5a12:	80 91 d8 21 	lds	r24, 0x21D8
    5a16:	90 91 d9 21 	lds	r25, 0x21D9
    5a1a:	8f 7e       	andi	r24, 0xEF	; 239
    5a1c:	80 93 d8 21 	sts	0x21D8, r24
    5a20:	90 93 d9 21 	sts	0x21D9, r25
	}
	if (control & XIO_CRLF) {
    5a24:	32 ff       	sbrs	r19, 2
    5a26:	09 c0       	rjmp	.+18     	; 0x5a3a <xio_pgm_control+0x66>
		fpgm.flags |= XIO_FLAG_CRLF_bm;
    5a28:	80 91 d8 21 	lds	r24, 0x21D8
    5a2c:	90 91 d9 21 	lds	r25, 0x21D9
    5a30:	80 62       	ori	r24, 0x20	; 32
    5a32:	80 93 d8 21 	sts	0x21D8, r24
    5a36:	90 93 d9 21 	sts	0x21D9, r25
	}
	if (control & XIO_NOCRLF) {
    5a3a:	33 ff       	sbrs	r19, 3
    5a3c:	09 c0       	rjmp	.+18     	; 0x5a50 <xio_pgm_control+0x7c>
		fpgm.flags &= ~XIO_FLAG_CRLF_bm;
    5a3e:	80 91 d8 21 	lds	r24, 0x21D8
    5a42:	90 91 d9 21 	lds	r25, 0x21D9
    5a46:	8f 7d       	andi	r24, 0xDF	; 223
    5a48:	80 93 d8 21 	sts	0x21D8, r24
    5a4c:	90 93 d9 21 	sts	0x21D9, r25
	}
	if (control & XIO_LINEMODE) {
    5a50:	34 ff       	sbrs	r19, 4
    5a52:	09 c0       	rjmp	.+18     	; 0x5a66 <xio_pgm_control+0x92>
		fpgm.flags |= XIO_FLAG_LINEMODE_bm;
    5a54:	80 91 d8 21 	lds	r24, 0x21D8
    5a58:	90 91 d9 21 	lds	r25, 0x21D9
    5a5c:	80 64       	ori	r24, 0x40	; 64
    5a5e:	80 93 d8 21 	sts	0x21D8, r24
    5a62:	90 93 d9 21 	sts	0x21D9, r25
	}
	if (control & XIO_NOLINEMODE) {
    5a66:	35 ff       	sbrs	r19, 5
    5a68:	09 c0       	rjmp	.+18     	; 0x5a7c <xio_pgm_control+0xa8>
		fpgm.flags &= ~XIO_FLAG_LINEMODE_bm;
    5a6a:	80 91 d8 21 	lds	r24, 0x21D8
    5a6e:	90 91 d9 21 	lds	r25, 0x21D9
    5a72:	8f 7b       	andi	r24, 0xBF	; 191
    5a74:	80 93 d8 21 	sts	0x21D8, r24
    5a78:	90 93 d9 21 	sts	0x21D9, r25
	}
	if (control & XIO_SEMICOLONS) {
    5a7c:	36 ff       	sbrs	r19, 6
    5a7e:	09 c0       	rjmp	.+18     	; 0x5a92 <xio_pgm_control+0xbe>
		fpgm.flags |= XIO_FLAG_SEMICOLONS_bm;
    5a80:	80 91 d8 21 	lds	r24, 0x21D8
    5a84:	90 91 d9 21 	lds	r25, 0x21D9
    5a88:	80 68       	ori	r24, 0x80	; 128
    5a8a:	80 93 d8 21 	sts	0x21D8, r24
    5a8e:	90 93 d9 21 	sts	0x21D9, r25
	}
	if (control & XIO_NOSEMICOLONS) {
    5a92:	37 ff       	sbrs	r19, 7
    5a94:	09 c0       	rjmp	.+18     	; 0x5aa8 <xio_pgm_control+0xd4>
		fpgm.flags &= ~XIO_FLAG_SEMICOLONS_bm;
    5a96:	80 91 d8 21 	lds	r24, 0x21D8
    5a9a:	90 91 d9 21 	lds	r25, 0x21D9
    5a9e:	8f 77       	andi	r24, 0x7F	; 127
    5aa0:	80 93 d8 21 	sts	0x21D8, r24
    5aa4:	90 93 d9 21 	sts	0x21D9, r25
	}
	return (0);
}
    5aa8:	80 e0       	ldi	r24, 0x00	; 0
    5aaa:	08 95       	ret

00005aac <xio_pgm_putc>:
 */

int xio_pgm_putc(const char c, FILE *stream)
{
	return -1;			// always returns an error. Big surprise.
}
    5aac:	8f ef       	ldi	r24, 0xFF	; 255
    5aae:	9f ef       	ldi	r25, 0xFF	; 255
    5ab0:	08 95       	ret

00005ab2 <xio_pgm_readln>:
 *	Non-blocking, run-to-completion return a line from memory
 *	Note: LINEMODE flag is ignored. It's ALWAYS LINEMODE here.
 */

int xio_pgm_readln(char *buf, uint8_t len)
{
    5ab2:	9c 01       	movw	r18, r24
	if (!(fpgm.pgmbase_P)) {					// return OK if no file is open
    5ab4:	80 91 e4 21 	lds	r24, 0x21E4
    5ab8:	90 91 e5 21 	lds	r25, 0x21E5
    5abc:	89 2b       	or	r24, r25
    5abe:	a9 f0       	breq	.+42     	; 0x5aea <xio_pgm_readln+0x38>
		return (TG_OK);					 
	}
	fpgm.sig = XIO_SIG_OK;						// initialize signal
    5ac0:	10 92 da 21 	sts	0x21DA, r1
	if (fgets(buf, len, &dev_pgm) == NULL) {
    5ac4:	c9 01       	movw	r24, r18
    5ac6:	70 e0       	ldi	r23, 0x00	; 0
    5ac8:	4e e0       	ldi	r20, 0x0E	; 14
    5aca:	50 e2       	ldi	r21, 0x20	; 32
    5acc:	0e 94 24 44 	call	0x8848	; 0x8848 <fgets>
    5ad0:	89 2b       	or	r24, r25
    5ad2:	59 f4       	brne	.+22     	; 0x5aea <xio_pgm_readln+0x38>
		fpgm.pgmbase_P = NULL;
    5ad4:	10 92 e4 21 	sts	0x21E4, r1
    5ad8:	10 92 e5 21 	sts	0x21E5, r1
		clearerr(&dev_pgm);
    5adc:	8e e0       	ldi	r24, 0x0E	; 14
    5ade:	90 e2       	ldi	r25, 0x20	; 32
    5ae0:	0e 94 1f 44 	call	0x883e	; 0x883e <clearerr>
    5ae4:	24 e0       	ldi	r18, 0x04	; 4
    5ae6:	30 e0       	ldi	r19, 0x00	; 0
    5ae8:	02 c0       	rjmp	.+4      	; 0x5aee <xio_pgm_readln+0x3c>
		return (TG_EOF);
    5aea:	20 e0       	ldi	r18, 0x00	; 0
    5aec:	30 e0       	ldi	r19, 0x00	; 0
//	return (fpgm.status);

	// return directly without dispatch through line function callback
//	fpgm.status = ((int)fpgm.line_func(buf));	// call line handler function
	return (TG_OK);
}
    5aee:	c9 01       	movw	r24, r18
    5af0:	08 95       	ret

00005af2 <xio_pgm_getc>:
 *		- Note: putc should expand newlines to <cr><lf>
 */

int xio_pgm_getc(FILE *stream)
{
	if (fpgm.flags & XIO_FLAG_EOF_bm) {
    5af2:	40 91 d8 21 	lds	r20, 0x21D8
    5af6:	50 91 d9 21 	lds	r21, 0x21D9
    5afa:	55 ff       	sbrs	r21, 5
    5afc:	06 c0       	rjmp	.+12     	; 0x5b0a <xio_pgm_getc+0x18>
		fpgm.sig = XIO_SIG_EOF;
    5afe:	82 e0       	ldi	r24, 0x02	; 2
    5b00:	80 93 da 21 	sts	0x21DA, r24
    5b04:	2e ef       	ldi	r18, 0xFE	; 254
    5b06:	3f ef       	ldi	r19, 0xFF	; 255
    5b08:	3f c0       	rjmp	.+126    	; 0x5b88 <xio_pgm_getc+0x96>
		return (_FDEV_EOF);
	}
	if ((fpgm.c = pgm_read_byte(&fpgm.pgmbase_P[fpgm.idx])) == NUL) {
    5b0a:	20 91 e6 21 	lds	r18, 0x21E6
    5b0e:	30 91 e7 21 	lds	r19, 0x21E7
    5b12:	e0 91 e4 21 	lds	r30, 0x21E4
    5b16:	f0 91 e5 21 	lds	r31, 0x21E5
    5b1a:	e2 0f       	add	r30, r18
    5b1c:	f3 1f       	adc	r31, r19
    5b1e:	84 91       	lpm	r24, Z+
    5b20:	80 93 db 21 	sts	0x21DB, r24
    5b24:	88 23       	and	r24, r24
    5b26:	29 f4       	brne	.+10     	; 0x5b32 <xio_pgm_getc+0x40>
		fpgm.flags |= XIO_FLAG_EOF_bm;
    5b28:	50 62       	ori	r21, 0x20	; 32
    5b2a:	40 93 d8 21 	sts	0x21D8, r20
    5b2e:	50 93 d9 21 	sts	0x21D9, r21
	}
	++fpgm.idx;
    5b32:	2f 5f       	subi	r18, 0xFF	; 255
    5b34:	3f 4f       	sbci	r19, 0xFF	; 255
    5b36:	20 93 e6 21 	sts	0x21E6, r18
    5b3a:	30 93 e7 21 	sts	0x21E7, r19
	if (!LINEMODE(fpgm.flags)) {		// processing is simple if not LINEMODE
    5b3e:	90 91 d8 21 	lds	r25, 0x21D8
    5b42:	96 fd       	sbrc	r25, 6
    5b44:	07 c0       	rjmp	.+14     	; 0x5b54 <xio_pgm_getc+0x62>
		if (ECHO(fpgm.flags)) {
    5b46:	94 ff       	sbrs	r25, 4
    5b48:	1b c0       	rjmp	.+54     	; 0x5b80 <xio_pgm_getc+0x8e>
			putchar(fpgm.c);
    5b4a:	60 91 0e 25 	lds	r22, 0x250E
    5b4e:	70 91 0f 25 	lds	r23, 0x250F
    5b52:	13 c0       	rjmp	.+38     	; 0x5b7a <xio_pgm_getc+0x88>
		}
		return (fpgm.c);
	}
	// now do the LINEMODE stuff
	if (fpgm.c == NUL) {				// perform newline substitutions
    5b54:	88 23       	and	r24, r24
    5b56:	31 f0       	breq	.+12     	; 0x5b64 <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if (fpgm.c == '\r') {
    5b58:	8d 30       	cpi	r24, 0x0D	; 13
    5b5a:	21 f0       	breq	.+8      	; 0x5b64 <xio_pgm_getc+0x72>
		fpgm.c = '\n';
	} else if ((SEMICOLONS(fpgm.flags)) && (fpgm.c == ';')) {
    5b5c:	97 ff       	sbrs	r25, 7
    5b5e:	05 c0       	rjmp	.+10     	; 0x5b6a <xio_pgm_getc+0x78>
    5b60:	8b 33       	cpi	r24, 0x3B	; 59
    5b62:	19 f4       	brne	.+6      	; 0x5b6a <xio_pgm_getc+0x78>
		fpgm.c = '\n';
    5b64:	8a e0       	ldi	r24, 0x0A	; 10
    5b66:	80 93 db 21 	sts	0x21DB, r24
	}
	if (ECHO(fpgm.flags)) {
    5b6a:	94 ff       	sbrs	r25, 4
    5b6c:	09 c0       	rjmp	.+18     	; 0x5b80 <xio_pgm_getc+0x8e>
		putchar(fpgm.c);
    5b6e:	60 91 0e 25 	lds	r22, 0x250E
    5b72:	70 91 0f 25 	lds	r23, 0x250F
    5b76:	80 91 db 21 	lds	r24, 0x21DB
    5b7a:	90 e0       	ldi	r25, 0x00	; 0
    5b7c:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
	}
	return (fpgm.c);
    5b80:	80 91 db 21 	lds	r24, 0x21DB
    5b84:	28 2f       	mov	r18, r24
    5b86:	30 e0       	ldi	r19, 0x00	; 0
}
    5b88:	c9 01       	movw	r24, r18
    5b8a:	08 95       	ret

00005b8c <_tg_set_source>:
 *	other messages are sent to the active device.
 */

void _tg_set_source(uint8_t d)
{
	tg.source = d;									// d = XIO device #. See xio.h
    5b8c:	80 93 ec 21 	sts	0x21EC, r24
	tg.prompts = TRUE;
    5b90:	61 e0       	ldi	r22, 0x01	; 1
    5b92:	60 93 ee 21 	sts	0x21EE, r22

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5b96:	42 e0       	ldi	r20, 0x02	; 2
    5b98:	40 93 44 22 	sts	0x2244, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5b9c:	2b e4       	ldi	r18, 0x4B	; 75
    5b9e:	3e e2       	ldi	r19, 0x2E	; 46
    5ba0:	20 93 46 22 	sts	0x2246, r18
    5ba4:	30 93 47 22 	sts	0x2247, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5ba8:	90 e5       	ldi	r25, 0x50	; 80
    5baa:	90 93 45 22 	sts	0x2245, r25
	tg.source = d;									// d = XIO device #. See xio.h
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5bae:	40 93 98 22 	sts	0x2298, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5bb2:	20 93 9a 22 	sts	0x229A, r18
    5bb6:	30 93 9b 22 	sts	0x229B, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5bba:	90 93 99 22 	sts	0x2299, r25
	tg.source = d;									// d = XIO device #. See xio.h
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
    5bbe:	40 93 ec 22 	sts	0x22EC, r20
		tg.dev[i].poll_func = &_tg_poll_signal;
    5bc2:	20 93 ee 22 	sts	0x22EE, r18
    5bc6:	30 93 ef 22 	sts	0x22EF, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5bca:	90 93 ed 22 	sts	0x22ED, r25
	tg.prompts = TRUE;

	// reset common settings for all devices
	for (uint8_t i=1; i < XIO_DEV_MAX; i++) {		// don't bother with /dev/null
		tg.dev[i].state = TG_SRC_SIGNAL;
		tg.dev[i].poll_func = &_tg_poll_signal;
    5bce:	20 93 42 23 	sts	0x2342, r18
    5bd2:	30 93 43 23 	sts	0x2343, r19
		tg.dev[i].len = sizeof(tg.dev[i].buf);
    5bd6:	90 93 41 23 	sts	0x2341, r25
	}
	tg.dev[XIO_DEV_PGM].state = TG_SRC_INACTIVE;	// program memory is an exception
    5bda:	10 92 40 23 	sts	0x2340, r1

	// make selected device active
	tg.dev[d].state = TG_SRC_ACTIVE;	
    5bde:	48 2f       	mov	r20, r24
    5be0:	50 e0       	ldi	r21, 0x00	; 0
    5be2:	24 e5       	ldi	r18, 0x54	; 84
    5be4:	30 e0       	ldi	r19, 0x00	; 0
    5be6:	42 9f       	mul	r20, r18
    5be8:	f0 01       	movw	r30, r0
    5bea:	43 9f       	mul	r20, r19
    5bec:	f0 0d       	add	r31, r0
    5bee:	52 9f       	mul	r21, r18
    5bf0:	f0 0d       	add	r31, r0
    5bf2:	11 24       	eor	r1, r1
    5bf4:	e7 51       	subi	r30, 0x17	; 23
    5bf6:	fe 4d       	sbci	r31, 0xDE	; 222
    5bf8:	67 83       	std	Z+7, r22	; 0x07
	tg.dev[d].poll_func = &_tg_poll_active;
    5bfa:	2a e2       	ldi	r18, 0x2A	; 42
    5bfc:	30 e0       	ldi	r19, 0x00	; 0
    5bfe:	42 9f       	mul	r20, r18
    5c00:	f0 01       	movw	r30, r0
    5c02:	43 9f       	mul	r20, r19
    5c04:	f0 0d       	add	r31, r0
    5c06:	52 9f       	mul	r21, r18
    5c08:	f0 0d       	add	r31, r0
    5c0a:	11 24       	eor	r1, r1
    5c0c:	ee 0f       	add	r30, r30
    5c0e:	ff 1f       	adc	r31, r31
    5c10:	e5 51       	subi	r30, 0x15	; 21
    5c12:	fe 4d       	sbci	r31, 0xDE	; 222
    5c14:	23 ec       	ldi	r18, 0xC3	; 195
    5c16:	3e e2       	ldi	r19, 0x2E	; 46
    5c18:	27 83       	std	Z+7, r18	; 0x07
    5c1a:	30 87       	std	Z+8, r19	; 0x08
	if (d == XIO_DEV_PGM) {
    5c1c:	84 30       	cpi	r24, 0x04	; 4
    5c1e:	11 f4       	brne	.+4      	; 0x5c24 <_tg_set_source+0x98>
		tg.prompts = FALSE;							// no prompts for file input
    5c20:	10 92 ee 21 	sts	0x21EE, r1
    5c24:	08 95       	ret

00005c26 <tg_pause>:
}

void tg_pause()
{
	return;
}
    5c26:	08 95       	ret

00005c28 <tg_resume>:

void tg_resume()
{
	return;
}
    5c28:	08 95       	ret

00005c2a <tg_kill>:
	return (0);
}

void tg_kill()
{
	_tg_set_source(tg.source_default);	// return control to standard device
    5c2a:	80 91 ed 21 	lds	r24, 0x21ED
    5c2e:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <_tg_set_source>
	mc_motion_stop();					// stop computing and generating motions
    5c32:	0e 94 2a 1a 	call	0x3454	; 0x3454 <mc_motion_stop>
	mv_flush();							// empty and reset the move queue
    5c36:	0e 94 20 30 	call	0x6040	; 0x6040 <mv_flush>
	st_stop_steppers();					// stop the steppers
    5c3a:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <st_stop_steppers>
	printf_P(PSTR("Got a KILL command or limit switch\n"));
    5c3e:	0f 92       	push	r0
    5c40:	0f 92       	push	r0
    5c42:	80 e9       	ldi	r24, 0x90	; 144
    5c44:	9a e1       	ldi	r25, 0x1A	; 26
    5c46:	ed b7       	in	r30, 0x3d	; 61
    5c48:	fe b7       	in	r31, 0x3e	; 62
    5c4a:	81 83       	std	Z+1, r24	; 0x01
    5c4c:	92 83       	std	Z+2, r25	; 0x02
    5c4e:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
    5c52:	0f 90       	pop	r0
    5c54:	0f 90       	pop	r0
	return;
}
    5c56:	08 95       	ret

00005c58 <tg_terminate>:

void tg_terminate()
{
	tg_kill();
    5c58:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <tg_kill>
	return;
}
    5c5c:	08 95       	ret

00005c5e <tg_signal>:
 * tg_signal() - default signal handler to bind to the line readers
 */

int tg_signal(uint8_t sig)
{
	switch (sig) {
    5c5e:	84 30       	cpi	r24, 0x04	; 4
    5c60:	a9 f0       	breq	.+42     	; 0x5c8c <tg_signal+0x2e>
    5c62:	85 30       	cpi	r24, 0x05	; 5
    5c64:	99 f0       	breq	.+38     	; 0x5c8c <tg_signal+0x2e>
    5c66:	82 30       	cpi	r24, 0x02	; 2
    5c68:	99 f4       	brne	.+38     	; 0x5c90 <tg_signal+0x32>
		case XIO_SIG_OK: break;
 		case XIO_SIG_EOL: break;

		case XIO_SIG_EOF:
			printf_P(PSTR("\r\nEnd of file encountered\r\n"));
    5c6a:	0f 92       	push	r0
    5c6c:	0f 92       	push	r0
    5c6e:	89 ec       	ldi	r24, 0xC9	; 201
    5c70:	9a e1       	ldi	r25, 0x1A	; 26
    5c72:	ed b7       	in	r30, 0x3d	; 61
    5c74:	fe b7       	in	r31, 0x3e	; 62
    5c76:	81 83       	std	Z+1, r24	; 0x01
    5c78:	92 83       	std	Z+2, r25	; 0x02
    5c7a:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
			_tg_set_source(tg.source_default);		// reset to default source
    5c7e:	0f 90       	pop	r0
    5c80:	0f 90       	pop	r0
    5c82:	80 91 ed 21 	lds	r24, 0x21ED
    5c86:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <_tg_set_source>
    5c8a:	02 c0       	rjmp	.+4      	; 0x5c90 <tg_signal+0x32>
	return;
}

void tg_terminate()
{
	tg_kill();
    5c8c:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <tg_kill>
		case XIO_SIG_SHIFTOUT: break;
		case XIO_SIG_SHIFTIN: break;
		default: break;
	}
	return (0);
}
    5c90:	80 e0       	ldi	r24, 0x00	; 0
    5c92:	90 e0       	ldi	r25, 0x00	; 0
    5c94:	08 95       	ret

00005c96 <_tg_poll_signal>:
 *	If a signal is received it's dispatched from the low-level line reader
 *	Any line that's read is ignored (tossed)
 */

static void _tg_poll_signal(uint8_t d)
{
    5c96:	48 2f       	mov	r20, r24
	if (tg.dev[d].state != TG_SRC_SIGNAL) {			// sanity check
    5c98:	28 2f       	mov	r18, r24
    5c9a:	30 e0       	ldi	r19, 0x00	; 0
    5c9c:	84 e5       	ldi	r24, 0x54	; 84
    5c9e:	90 e0       	ldi	r25, 0x00	; 0
    5ca0:	28 9f       	mul	r18, r24
    5ca2:	f0 01       	movw	r30, r0
    5ca4:	29 9f       	mul	r18, r25
    5ca6:	f0 0d       	add	r31, r0
    5ca8:	38 9f       	mul	r19, r24
    5caa:	f0 0d       	add	r31, r0
    5cac:	11 24       	eor	r1, r1
    5cae:	e7 51       	subi	r30, 0x17	; 23
    5cb0:	fe 4d       	sbci	r31, 0xDE	; 222
    5cb2:	87 81       	ldd	r24, Z+7	; 0x07
    5cb4:	82 30       	cpi	r24, 0x02	; 2
    5cb6:	a9 f4       	brne	.+42     	; 0x5ce2 <_tg_poll_signal+0x4c>
		return;
	}
	tg.status = xio_fget_ln(d, tg.dev[d].buf, tg.dev[d].len);
    5cb8:	85 e1       	ldi	r24, 0x15	; 21
    5cba:	90 e0       	ldi	r25, 0x00	; 0
    5cbc:	28 9f       	mul	r18, r24
    5cbe:	b0 01       	movw	r22, r0
    5cc0:	29 9f       	mul	r18, r25
    5cc2:	70 0d       	add	r23, r0
    5cc4:	38 9f       	mul	r19, r24
    5cc6:	70 0d       	add	r23, r0
    5cc8:	11 24       	eor	r1, r1
    5cca:	66 0f       	add	r22, r22
    5ccc:	77 1f       	adc	r23, r23
    5cce:	66 0f       	add	r22, r22
    5cd0:	77 1f       	adc	r23, r23
    5cd2:	6c 50       	subi	r22, 0x0C	; 12
    5cd4:	7e 4d       	sbci	r23, 0xDE	; 222
    5cd6:	84 2f       	mov	r24, r20
    5cd8:	40 85       	ldd	r20, Z+8	; 0x08
    5cda:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <xio_fget_ln>
    5cde:	80 93 ea 21 	sts	0x21EA, r24
    5ce2:	08 95       	ret

00005ce4 <tg_parser>:
 *	Quits from a parser are handled by the controller (not the individual parsers)
 *	Preserves and passes through return codes (status codes) from lower levels
 */

int tg_parser(char * buf)
{
    5ce4:	fc 01       	movw	r30, r24
	// auto-detect mode if not already set 
	if (tg.mode == TG_CONTROL_MODE) {
    5ce6:	80 91 eb 21 	lds	r24, 0x21EB
    5cea:	88 23       	and	r24, r24
    5cec:	79 f5       	brne	.+94     	; 0x5d4c <tg_parser+0x68>
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
    5cee:	90 81       	ld	r25, Z
    5cf0:	89 2f       	mov	r24, r25
    5cf2:	81 56       	subi	r24, 0x61	; 97
    5cf4:	8a 31       	cpi	r24, 0x1A	; 26
    5cf6:	10 f4       	brcc	.+4      	; 0x5cfc <tg_parser+0x18>
			buf[0] = buf[0]-'a'+'A';
    5cf8:	90 52       	subi	r25, 0x20	; 32
    5cfa:	90 83       	st	Z, r25
		}
		switch (buf[0]) {
    5cfc:	80 81       	ld	r24, Z
    5cfe:	86 34       	cpi	r24, 0x46	; 70
    5d00:	b1 f0       	breq	.+44     	; 0x5d2e <tg_parser+0x4a>
    5d02:	87 34       	cpi	r24, 0x47	; 71
    5d04:	38 f4       	brcc	.+14     	; 0x5d14 <tg_parser+0x30>
    5d06:	83 34       	cpi	r24, 0x43	; 67
    5d08:	61 f0       	breq	.+24     	; 0x5d22 <tg_parser+0x3e>
    5d0a:	84 34       	cpi	r24, 0x44	; 68
    5d0c:	71 f0       	breq	.+28     	; 0x5d2a <tg_parser+0x46>
    5d0e:	8f 33       	cpi	r24, 0x3F	; 63
    5d10:	d9 f4       	brne	.+54     	; 0x5d48 <tg_parser+0x64>
    5d12:	07 c0       	rjmp	.+14     	; 0x5d22 <tg_parser+0x3e>
    5d14:	87 34       	cpi	r24, 0x47	; 71
    5d16:	19 f0       	breq	.+6      	; 0x5d1e <tg_parser+0x3a>
    5d18:	8d 54       	subi	r24, 0x4D	; 77
    5d1a:	82 30       	cpi	r24, 0x02	; 2
    5d1c:	a8 f4       	brcc	.+42     	; 0x5d48 <tg_parser+0x64>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5d1e:	82 e0       	ldi	r24, 0x02	; 2
    5d20:	01 c0       	rjmp	.+2      	; 0x5d24 <tg_parser+0x40>
	if (tg.mode == TG_CONTROL_MODE) {
		if (buf[0] >= 'a' && buf[0] <= 'z') {		// convert lower to upper
			buf[0] = buf[0]-'a'+'A';
		}
		switch (buf[0]) {
			case 'G': case 'M': case 'N': _tg_set_mode(TG_GCODE_MODE); break;
    5d22:	81 e0       	ldi	r24, 0x01	; 1
    5d24:	80 93 eb 21 	sts	0x21EB, r24
    5d28:	11 c0       	rjmp	.+34     	; 0x5d4c <tg_parser+0x68>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5d2a:	83 e0       	ldi	r24, 0x03	; 3
    5d2c:	fb cf       	rjmp	.-10     	; 0x5d24 <tg_parser+0x40>
//	xio_pgm_open(PGMFILE(&square_circle_test100));
//	xio_pgm_open(PGMFILE(&spiral_test50a));
//	xio_pgm_open(PGMFILE(&spiral_test5));

//	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
	xio_pgm_open(PGMFILE(&zoetrope));
    5d2e:	8b eb       	ldi	r24, 0xBB	; 187
    5d30:	9c e0       	ldi	r25, 0x0C	; 12
    5d32:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <xio_pgm_open>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5d36:	82 e0       	ldi	r24, 0x02	; 2
    5d38:	80 93 eb 21 	sts	0x21EB, r24
//	xio_pgm_open(PGMFILE(&contraptor_circle)); 	// contraptor circle test
	xio_pgm_open(PGMFILE(&zoetrope));

	// set mode and source for file mode
	_tg_set_mode(TG_GCODE_MODE);
	_tg_set_source(XIO_DEV_PGM);
    5d3c:	84 e0       	ldi	r24, 0x04	; 4
    5d3e:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <_tg_set_source>
    5d42:	20 e0       	ldi	r18, 0x00	; 0
    5d44:	30 e0       	ldi	r19, 0x00	; 0
    5d46:	1d c0       	rjmp	.+58     	; 0x5d82 <tg_parser+0x9e>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5d48:	10 92 eb 21 	sts	0x21EB, r1
			case 'F': return (_tg_test_file());
			default:  _tg_set_mode(TG_CONTROL_MODE); break; //+++ put a help prompt here
		}
	}
	// dispatch based on mode
	tg.status = TG_OK;
    5d4c:	10 92 ea 21 	sts	0x21EA, r1
	switch (tg.mode) {
    5d50:	80 91 eb 21 	lds	r24, 0x21EB
    5d54:	82 30       	cpi	r24, 0x02	; 2
    5d56:	41 f0       	breq	.+16     	; 0x5d68 <tg_parser+0x84>
    5d58:	83 30       	cpi	r24, 0x03	; 3
    5d5a:	51 f0       	breq	.+20     	; 0x5d70 <tg_parser+0x8c>
    5d5c:	81 30       	cpi	r24, 0x01	; 1
    5d5e:	69 f4       	brne	.+26     	; 0x5d7a <tg_parser+0x96>
//		case TG_CONTROL_MODE: 
//			break;

		case TG_CONFIG_MODE:
			tg.status = cfg_parse(buf);
    5d60:	cf 01       	movw	r24, r30
    5d62:	0e 94 0d 18 	call	0x301a	; 0x301a <cfg_parse>
    5d66:	07 c0       	rjmp	.+14     	; 0x5d76 <tg_parser+0x92>
			break;

		case TG_GCODE_MODE: 
			tg.status = gc_gcode_parser(buf);
    5d68:	cf 01       	movw	r24, r30
    5d6a:	0e 94 aa 14 	call	0x2954	; 0x2954 <gc_gcode_parser>
    5d6e:	03 c0       	rjmp	.+6      	; 0x5d76 <tg_parser+0x92>
			break;

		case TG_DIRECT_DRIVE_MODE:
			tg.status = dd_parser(buf);
    5d70:	cf 01       	movw	r24, r30
    5d72:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <dd_parser>
    5d76:	80 93 ea 21 	sts	0x21EA, r24
			break;
	}
	return (tg.status);
    5d7a:	80 91 ea 21 	lds	r24, 0x21EA
    5d7e:	28 2f       	mov	r18, r24
    5d80:	30 e0       	ldi	r19, 0x00	; 0
}
    5d82:	c9 01       	movw	r24, r18
    5d84:	08 95       	ret

00005d86 <_tg_poll_active>:
/* 
 * _tg_poll_active() - Perform a non-blocking line read from active input device
 */

static void _tg_poll_active(uint8_t d)
{
    5d86:	cf 93       	push	r28
    5d88:	df 93       	push	r29
    5d8a:	48 2f       	mov	r20, r24
	if (tg.dev[d].state != TG_SRC_ACTIVE) {			// sanity check
    5d8c:	28 2f       	mov	r18, r24
    5d8e:	30 e0       	ldi	r19, 0x00	; 0
    5d90:	84 e5       	ldi	r24, 0x54	; 84
    5d92:	90 e0       	ldi	r25, 0x00	; 0
    5d94:	28 9f       	mul	r18, r24
    5d96:	f0 01       	movw	r30, r0
    5d98:	29 9f       	mul	r18, r25
    5d9a:	f0 0d       	add	r31, r0
    5d9c:	38 9f       	mul	r19, r24
    5d9e:	f0 0d       	add	r31, r0
    5da0:	11 24       	eor	r1, r1
    5da2:	e7 51       	subi	r30, 0x17	; 23
    5da4:	fe 4d       	sbci	r31, 0xDE	; 222
    5da6:	97 81       	ldd	r25, Z+7	; 0x07
    5da8:	91 30       	cpi	r25, 0x01	; 1
    5daa:	09 f0       	breq	.+2      	; 0x5dae <_tg_poll_active+0x28>
    5dac:	5b c0       	rjmp	.+182    	; 0x5e64 <_tg_poll_active+0xde>
		return;
	}

	// special handling for file sources
	if (tg.source == XIO_DEV_PGM) {
    5dae:	80 91 ec 21 	lds	r24, 0x21EC
    5db2:	84 30       	cpi	r24, 0x04	; 4
    5db4:	39 f4       	brne	.+14     	; 0x5dc4 <_tg_poll_active+0x3e>
		if (tg.state == TG_STATE_READY_UNPROMPTED) {
    5db6:	80 91 e9 21 	lds	r24, 0x21E9
    5dba:	88 23       	and	r24, r24
    5dbc:	09 f0       	breq	.+2      	; 0x5dc0 <_tg_poll_active+0x3a>
    5dbe:	52 c0       	rjmp	.+164    	; 0x5e64 <_tg_poll_active+0xde>
			tg.state = TG_STATE_READY_PROMPTED; 	// issue "virtual prompt"
    5dc0:	90 93 e9 21 	sts	0x21E9, r25
			return;									// not ready for next line
		}
	}

	// read input line or return if not a completed line
	if ((tg.status = xio_fget_ln(d, tg.dev[d].buf, tg.dev[d].len)) == TG_OK) {
    5dc4:	85 e1       	ldi	r24, 0x15	; 21
    5dc6:	90 e0       	ldi	r25, 0x00	; 0
    5dc8:	28 9f       	mul	r18, r24
    5dca:	e0 01       	movw	r28, r0
    5dcc:	29 9f       	mul	r18, r25
    5dce:	d0 0d       	add	r29, r0
    5dd0:	38 9f       	mul	r19, r24
    5dd2:	d0 0d       	add	r29, r0
    5dd4:	11 24       	eor	r1, r1
    5dd6:	cc 0f       	add	r28, r28
    5dd8:	dd 1f       	adc	r29, r29
    5dda:	cc 0f       	add	r28, r28
    5ddc:	dd 1f       	adc	r29, r29
    5dde:	cc 50       	subi	r28, 0x0C	; 12
    5de0:	de 4d       	sbci	r29, 0xDE	; 222
    5de2:	84 e5       	ldi	r24, 0x54	; 84
    5de4:	90 e0       	ldi	r25, 0x00	; 0
    5de6:	28 9f       	mul	r18, r24
    5de8:	f0 01       	movw	r30, r0
    5dea:	29 9f       	mul	r18, r25
    5dec:	f0 0d       	add	r31, r0
    5dee:	38 9f       	mul	r19, r24
    5df0:	f0 0d       	add	r31, r0
    5df2:	11 24       	eor	r1, r1
    5df4:	e7 51       	subi	r30, 0x17	; 23
    5df6:	fe 4d       	sbci	r31, 0xDE	; 222
    5df8:	84 2f       	mov	r24, r20
    5dfa:	be 01       	movw	r22, r28
    5dfc:	40 85       	ldd	r20, Z+8	; 0x08
    5dfe:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <xio_fget_ln>
    5e02:	80 93 ea 21 	sts	0x21EA, r24
    5e06:	88 23       	and	r24, r24
    5e08:	29 f4       	brne	.+10     	; 0x5e14 <_tg_poll_active+0x8e>
		tg.status = tg_parser(tg.dev[d].buf);	// dispatch to parser
    5e0a:	ce 01       	movw	r24, r28
    5e0c:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <tg_parser>
    5e10:	80 93 ea 21 	sts	0x21EA, r24
	}

	// Note: This switch statement could be reduced as most paths lead to
	//		 TG_STATE_READY_UNPROMPTED, but it's written for clarity instead.
	switch (tg.status) {
    5e14:	80 91 ea 21 	lds	r24, 0x21EA
    5e18:	82 30       	cpi	r24, 0x02	; 2
    5e1a:	61 f0       	breq	.+24     	; 0x5e34 <_tg_poll_active+0xae>
    5e1c:	83 30       	cpi	r24, 0x03	; 3
    5e1e:	28 f4       	brcc	.+10     	; 0x5e2a <_tg_poll_active+0xa4>
    5e20:	88 23       	and	r24, r24
    5e22:	f1 f0       	breq	.+60     	; 0x5e60 <_tg_poll_active+0xda>
    5e24:	81 30       	cpi	r24, 0x01	; 1
    5e26:	e1 f4       	brne	.+56     	; 0x5e60 <_tg_poll_active+0xda>
    5e28:	1d c0       	rjmp	.+58     	; 0x5e64 <_tg_poll_active+0xde>
    5e2a:	83 30       	cpi	r24, 0x03	; 3
    5e2c:	31 f0       	breq	.+12     	; 0x5e3a <_tg_poll_active+0xb4>
    5e2e:	84 30       	cpi	r24, 0x04	; 4
    5e30:	b9 f4       	brne	.+46     	; 0x5e60 <_tg_poll_active+0xda>
    5e32:	06 c0       	rjmp	.+12     	; 0x5e40 <_tg_poll_active+0xba>
		case TG_NOOP: {								// no change in state
			break;
		}

		case TG_CONTINUE: { 						// returned without a new line
			tg.state = TG_STATE_READING_COMMAND; 
    5e34:	80 93 e9 21 	sts	0x21E9, r24
    5e38:	15 c0       	rjmp	.+42     	; 0x5e64 <_tg_poll_active+0xde>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5e3a:	10 92 eb 21 	sts	0x21EB, r1
    5e3e:	10 c0       	rjmp	.+32     	; 0x5e60 <_tg_poll_active+0xda>
			tg.state = TG_STATE_READY_UNPROMPTED;
			break;
		}
					  	
		case TG_EOF: {								// file devices only
			printf_P(PSTR("End of command file\n"));
    5e40:	0f 92       	push	r0
    5e42:	0f 92       	push	r0
    5e44:	84 eb       	ldi	r24, 0xB4	; 180
    5e46:	9a e1       	ldi	r25, 0x1A	; 26
    5e48:	ed b7       	in	r30, 0x3d	; 61
    5e4a:	fe b7       	in	r31, 0x3e	; 62
    5e4c:	81 83       	std	Z+1, r24	; 0x01
    5e4e:	92 83       	std	Z+2, r25	; 0x02
    5e50:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
			_tg_set_source(tg.source_default);		// reset to default source
    5e54:	0f 90       	pop	r0
    5e56:	0f 90       	pop	r0
    5e58:	80 91 ed 21 	lds	r24, 0x21ED
    5e5c:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <_tg_set_source>
			tg.state = TG_STATE_READY_UNPROMPTED;
			break;
		}
		default: {
			tg.state = TG_STATE_READY_UNPROMPTED;	// traps various error returns
    5e60:	10 92 e9 21 	sts	0x21E9, r1
		}
	}
}
    5e64:	df 91       	pop	r29
    5e66:	cf 91       	pop	r28
    5e68:	08 95       	ret

00005e6a <tg_controller>:
 *	more to the point - a hack. If the flow of control gets much more complicated 
 *	it will make sense to replace this section with an event driven dispatcher.
 */

void tg_controller()
{
    5e6a:	cf 93       	push	r28
    5e6c:	df 93       	push	r29
	tgModeStringDirect
};

void _tg_prompt()
{
	if ((tg.prompts) && (tg.state == TG_STATE_READY_UNPROMPTED)) {
    5e6e:	80 91 ee 21 	lds	r24, 0x21EE
    5e72:	88 23       	and	r24, r24
    5e74:	09 f1       	breq	.+66     	; 0x5eb8 <tg_controller+0x4e>
    5e76:	80 91 e9 21 	lds	r24, 0x21E9
    5e7a:	88 23       	and	r24, r24
    5e7c:	e9 f4       	brne	.+58     	; 0x5eb8 <tg_controller+0x4e>
		printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5e7e:	80 91 eb 21 	lds	r24, 0x21EB
    5e82:	e8 2f       	mov	r30, r24
    5e84:	f0 e0       	ldi	r31, 0x00	; 0
    5e86:	ee 0f       	add	r30, r30
    5e88:	ff 1f       	adc	r31, r31
    5e8a:	e8 57       	subi	r30, 0x78	; 120
    5e8c:	f5 4e       	sbci	r31, 0xE5	; 229
    5e8e:	25 91       	lpm	r18, Z+
    5e90:	34 91       	lpm	r19, Z+
    5e92:	00 d0       	rcall	.+0      	; 0x5e94 <tg_controller+0x2a>
    5e94:	0f 92       	push	r0
    5e96:	83 ef       	ldi	r24, 0xF3	; 243
    5e98:	9a e1       	ldi	r25, 0x1A	; 26
    5e9a:	ed b7       	in	r30, 0x3d	; 61
    5e9c:	fe b7       	in	r31, 0x3e	; 62
    5e9e:	81 83       	std	Z+1, r24	; 0x01
    5ea0:	92 83       	std	Z+2, r25	; 0x02
    5ea2:	23 83       	std	Z+3, r18	; 0x03
    5ea4:	34 83       	std	Z+4, r19	; 0x04
    5ea6:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
//		printf_P(PSTR("TinyG [%S]*> \n"),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
		tg.state = TG_STATE_READY_PROMPTED;
    5eaa:	81 e0       	ldi	r24, 0x01	; 1
    5eac:	80 93 e9 21 	sts	0x21E9, r24
    5eb0:	0f 90       	pop	r0
    5eb2:	0f 90       	pop	r0
    5eb4:	0f 90       	pop	r0
    5eb6:	0f 90       	pop	r0
	}
	// bastardized prompts for file sources
	if ((!tg.prompts) && (tg.state == TG_STATE_READY_UNPROMPTED)) {
    5eb8:	80 91 ee 21 	lds	r24, 0x21EE
    5ebc:	88 23       	and	r24, r24
    5ebe:	f1 f4       	brne	.+60     	; 0x5efc <tg_controller+0x92>
    5ec0:	80 91 e9 21 	lds	r24, 0x21E9
    5ec4:	88 23       	and	r24, r24
    5ec6:	d1 f4       	brne	.+52     	; 0x5efc <tg_controller+0x92>
		printf_P(PSTR("TinyG [%S]*> "),(PGM_P)pgm_read_word(&tgModeStrings[tg.mode]));
    5ec8:	80 91 eb 21 	lds	r24, 0x21EB
    5ecc:	e8 2f       	mov	r30, r24
    5ece:	f0 e0       	ldi	r31, 0x00	; 0
    5ed0:	ee 0f       	add	r30, r30
    5ed2:	ff 1f       	adc	r31, r31
    5ed4:	e8 57       	subi	r30, 0x78	; 120
    5ed6:	f5 4e       	sbci	r31, 0xE5	; 229
    5ed8:	25 91       	lpm	r18, Z+
    5eda:	34 91       	lpm	r19, Z+
    5edc:	00 d0       	rcall	.+0      	; 0x5ede <tg_controller+0x74>
    5ede:	0f 92       	push	r0
    5ee0:	85 ee       	ldi	r24, 0xE5	; 229
    5ee2:	9a e1       	ldi	r25, 0x1A	; 26
    5ee4:	ed b7       	in	r30, 0x3d	; 61
    5ee6:	fe b7       	in	r31, 0x3e	; 62
    5ee8:	81 83       	std	Z+1, r24	; 0x01
    5eea:	92 83       	std	Z+2, r25	; 0x02
    5eec:	23 83       	std	Z+3, r18	; 0x03
    5eee:	34 83       	std	Z+4, r19	; 0x04
    5ef0:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
    5ef4:	0f 90       	pop	r0
    5ef6:	0f 90       	pop	r0
    5ef8:	0f 90       	pop	r0
    5efa:	0f 90       	pop	r0
{
//	uint8_t i = 1;

	_tg_prompt();		// Send a prompt - but only if controller is ready for input

	if ((tg.status = mc_line_continuation()) == TG_OK) { // Run the line generator 
    5efc:	0e 94 92 1a 	call	0x3524	; 0x3524 <mc_line_continuation>
    5f00:	80 93 ea 21 	sts	0x21EA, r24
    5f04:	88 23       	and	r24, r24
    5f06:	31 f0       	breq	.+12     	; 0x5f14 <tg_controller+0xaa>
		tg.state = TG_STATE_READY_UNPROMPTED;
		return;
	}

	if ((tg.status = mc_arc_continuation()) == TG_OK) {	 // Run the arc generator 
    5f08:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <mc_arc_continuation>
    5f0c:	80 93 ea 21 	sts	0x21EA, r24
    5f10:	88 23       	and	r24, r24
    5f12:	19 f4       	brne	.+6      	; 0x5f1a <tg_controller+0xb0>
		tg.state = TG_STATE_READY_UNPROMPTED;
    5f14:	10 92 e9 21 	sts	0x21E9, r1
    5f18:	21 c0       	rjmp	.+66     	; 0x5f5c <tg_controller+0xf2>
		return;
	}

	for (tg.i=1; tg.i < XIO_DEV_MAX; tg.i++) {	// Scan all input devices 
    5f1a:	81 e0       	ldi	r24, 0x01	; 1
    5f1c:	80 93 ef 21 	sts	0x21EF, r24
		tg.dev[tg.i].poll_func(tg.i);			//   ...(except /dev/null)
    5f20:	ca e2       	ldi	r28, 0x2A	; 42
    5f22:	d0 e0       	ldi	r29, 0x00	; 0
    5f24:	17 c0       	rjmp	.+46     	; 0x5f54 <tg_controller+0xea>
    5f26:	82 2f       	mov	r24, r18
    5f28:	90 e0       	ldi	r25, 0x00	; 0
    5f2a:	8c 9f       	mul	r24, r28
    5f2c:	f0 01       	movw	r30, r0
    5f2e:	8d 9f       	mul	r24, r29
    5f30:	f0 0d       	add	r31, r0
    5f32:	9c 9f       	mul	r25, r28
    5f34:	f0 0d       	add	r31, r0
    5f36:	11 24       	eor	r1, r1
    5f38:	ee 0f       	add	r30, r30
    5f3a:	ff 1f       	adc	r31, r31
    5f3c:	e5 51       	subi	r30, 0x15	; 21
    5f3e:	fe 4d       	sbci	r31, 0xDE	; 222
    5f40:	07 80       	ldd	r0, Z+7	; 0x07
    5f42:	f0 85       	ldd	r31, Z+8	; 0x08
    5f44:	e0 2d       	mov	r30, r0
    5f46:	82 2f       	mov	r24, r18
    5f48:	19 95       	eicall
	if ((tg.status = mc_arc_continuation()) == TG_OK) {	 // Run the arc generator 
		tg.state = TG_STATE_READY_UNPROMPTED;
		return;
	}

	for (tg.i=1; tg.i < XIO_DEV_MAX; tg.i++) {	// Scan all input devices 
    5f4a:	80 91 ef 21 	lds	r24, 0x21EF
    5f4e:	8f 5f       	subi	r24, 0xFF	; 255
    5f50:	80 93 ef 21 	sts	0x21EF, r24
    5f54:	20 91 ef 21 	lds	r18, 0x21EF
    5f58:	25 30       	cpi	r18, 0x05	; 5
    5f5a:	28 f3       	brcs	.-54     	; 0x5f26 <tg_controller+0xbc>
		tg.dev[tg.i].poll_func(tg.i);			//   ...(except /dev/null)
	}
}
    5f5c:	df 91       	pop	r29
    5f5e:	cf 91       	pop	r28
    5f60:	08 95       	ret

00005f62 <tg_init>:
 * tg_init()
 */

void tg_init() 
{
	xio_control(XIO_DEV_USB, XIO_SIG_FUNC, (int)&tg_signal); // bind sig handler
    5f62:	81 e0       	ldi	r24, 0x01	; 1
    5f64:	60 e1       	ldi	r22, 0x10	; 16
    5f66:	70 e0       	ldi	r23, 0x00	; 0
    5f68:	4f e2       	ldi	r20, 0x2F	; 47
    5f6a:	5e e2       	ldi	r21, 0x2E	; 46
    5f6c:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <xio_control>
//	xio_control(XIO_DEV_AUX, XIO_SIG_FUNC, (int)&tg_signal);
//	xio_control(XIO_DEV_RS485, XIO_SIG_FUNC, (int)&tg_signal);

	tg.source_default = XIO_DEV_USB; 
    5f70:	81 e0       	ldi	r24, 0x01	; 1
    5f72:	80 93 ed 21 	sts	0x21ED, r24
	tg.state = TG_STATE_READY_UNPROMPTED;
    5f76:	10 92 e9 21 	sts	0x21E9, r1
	_tg_set_source(tg.source_default);		// set initial active source
    5f7a:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <_tg_set_source>
 * _tg_set_mode() - Set current operating mode
 */

void _tg_set_mode(uint8_t mode)
{
	tg.mode = mode;
    5f7e:	10 92 eb 21 	sts	0x21EB, r1
	tg.source_default = XIO_DEV_USB; 
	tg.state = TG_STATE_READY_UNPROMPTED;
	_tg_set_source(tg.source_default);		// set initial active source
	_tg_set_mode(TG_CONTROL_MODE);			// set initial operating mode

	printf_P(PSTR("TinyG - Version %S\n"), (PSTR(TINYG_VERSION)));
    5f82:	00 d0       	rcall	.+0      	; 0x5f84 <tg_init+0x22>
    5f84:	0f 92       	push	r0
    5f86:	8b e0       	ldi	r24, 0x0B	; 11
    5f88:	9b e1       	ldi	r25, 0x1B	; 27
    5f8a:	ed b7       	in	r30, 0x3d	; 61
    5f8c:	fe b7       	in	r31, 0x3e	; 62
    5f8e:	81 83       	std	Z+1, r24	; 0x01
    5f90:	92 83       	std	Z+2, r25	; 0x02
    5f92:	81 e0       	ldi	r24, 0x01	; 1
    5f94:	9b e1       	ldi	r25, 0x1B	; 27
    5f96:	83 83       	std	Z+3, r24	; 0x03
    5f98:	94 83       	std	Z+4, r25	; 0x04
    5f9a:	0e 94 83 44 	call	0x8906	; 0x8906 <printf_P>
    5f9e:	0f 90       	pop	r0
    5fa0:	0f 90       	pop	r0
    5fa2:	0f 90       	pop	r0
    5fa4:	0f 90       	pop	r0
}
    5fa6:	08 95       	ret

00005fa8 <dd_init>:
 */

void dd_init() 
{
//	cfg_reset();
}
    5fa8:	08 95       	ret

00005faa <dd_parser>:
			}
		default: return (1);	// error
	}
*/
	return (0);
}
    5faa:	80 e0       	ldi	r24, 0x00	; 0
    5fac:	90 e0       	ldi	r25, 0x00	; 0
    5fae:	08 95       	ret

00005fb0 <mv_init>:
 * mv_init() - initialize move buffers
 */

void mv_init()
{
	mv.move_buffer_head = 0;
    5fb0:	10 92 94 23 	sts	0x2394, r1
	mv.move_buffer_tail = 0;
    5fb4:	10 92 95 23 	sts	0x2395, r1
}
    5fb8:	08 95       	ret

00005fba <mv_dequeue_move_buffer>:
 * mv_dequeue_move_buffer() - Return next move from buffer & advance buffer tail
 */

struct mvMove *mv_dequeue_move_buffer()
{
	if (mv.move_buffer_head == mv.move_buffer_tail) {	// buffer empty
    5fba:	90 91 94 23 	lds	r25, 0x2394
    5fbe:	80 91 95 23 	lds	r24, 0x2395
    5fc2:	98 17       	cp	r25, r24
    5fc4:	19 f4       	brne	.+6      	; 0x5fcc <mv_dequeue_move_buffer+0x12>
    5fc6:	20 e0       	ldi	r18, 0x00	; 0
    5fc8:	30 e0       	ldi	r19, 0x00	; 0
    5fca:	17 c0       	rjmp	.+46     	; 0x5ffa <mv_dequeue_move_buffer+0x40>
		return (NULL);
	}
	mv.p = &mv.move_buffer[mv.move_buffer_tail];	// get and save current index
    5fcc:	90 91 95 23 	lds	r25, 0x2395
    5fd0:	8b e1       	ldi	r24, 0x1B	; 27
    5fd2:	98 9f       	mul	r25, r24
    5fd4:	90 01       	movw	r18, r0
    5fd6:	11 24       	eor	r1, r1
    5fd8:	28 56       	subi	r18, 0x68	; 104
    5fda:	3c 4d       	sbci	r19, 0xDC	; 220
    5fdc:	20 93 96 23 	sts	0x2396, r18
    5fe0:	30 93 97 23 	sts	0x2397, r19
	if (++mv.move_buffer_tail >= MOVE_BUFFER_SIZE) { // increment and wrap (no OBOE)
    5fe4:	80 91 95 23 	lds	r24, 0x2395
    5fe8:	8f 5f       	subi	r24, 0xFF	; 255
    5fea:	80 93 95 23 	sts	0x2395, r24
    5fee:	80 91 95 23 	lds	r24, 0x2395
    5ff2:	84 30       	cpi	r24, 0x04	; 4
    5ff4:	10 f0       	brcs	.+4      	; 0x5ffa <mv_dequeue_move_buffer+0x40>
		mv.move_buffer_tail = 0;
    5ff6:	10 92 95 23 	sts	0x2395, r1
	}
	return (mv.p); 
}
    5ffa:	c9 01       	movw	r24, r18
    5ffc:	08 95       	ret

00005ffe <mv_test_move_buffer_full>:

uint8_t mv_test_move_buffer_full() 
{
	uint8_t next_buffer_head;

	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    5ffe:	90 91 94 23 	lds	r25, 0x2394
    6002:	9f 5f       	subi	r25, 0xFF	; 255
    6004:	94 30       	cpi	r25, 0x04	; 4
    6006:	08 f0       	brcs	.+2      	; 0x600a <__stack+0xb>
    6008:	90 e0       	ldi	r25, 0x00	; 0
		next_buffer_head = 0;					  // wrap condition
	}
	if (mv.move_buffer_tail == next_buffer_head) { 	// test if full
    600a:	80 91 95 23 	lds	r24, 0x2395
    600e:	20 e0       	ldi	r18, 0x00	; 0
    6010:	89 17       	cp	r24, r25
    6012:	09 f4       	brne	.+2      	; 0x6016 <__stack+0x17>
    6014:	21 e0       	ldi	r18, 0x01	; 1
		return (TRUE);
	};
	return (FALSE);
}
    6016:	82 2f       	mov	r24, r18
    6018:	08 95       	ret

0000601a <mv_synchronize>:
/* 
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
    601a:	0b c0       	rjmp	.+22     	; 0x6032 <mv_synchronize+0x18>
	while(mv.move_buffer_tail != mv.move_buffer_head) {
		sleep_mode();
    601c:	80 91 48 00 	lds	r24, 0x0048
    6020:	81 60       	ori	r24, 0x01	; 1
    6022:	80 93 48 00 	sts	0x0048, r24
    6026:	88 95       	sleep
    6028:	80 91 48 00 	lds	r24, 0x0048
    602c:	8e 7f       	andi	r24, 0xFE	; 254
    602e:	80 93 48 00 	sts	0x0048, r24
 * mv_synchronize() - block until all buffered steps are executed 
 */

void mv_synchronize()
{
	while(mv.move_buffer_tail != mv.move_buffer_head) {
    6032:	90 91 95 23 	lds	r25, 0x2395
    6036:	80 91 94 23 	lds	r24, 0x2394
    603a:	98 17       	cp	r25, r24
    603c:	79 f7       	brne	.-34     	; 0x601c <mv_synchronize+0x2>
		sleep_mode();
	}    
}
    603e:	08 95       	ret

00006040 <mv_flush>:
 * mv_flush() - cancel all buffered steps 
 */

void mv_flush()
{
	cli();
    6040:	f8 94       	cli
	mv.move_buffer_tail = mv.move_buffer_head;
    6042:	80 91 94 23 	lds	r24, 0x2394
    6046:	80 93 95 23 	sts	0x2395, r24
	mv.p = NULL;
    604a:	10 92 96 23 	sts	0x2396, r1
    604e:	10 92 97 23 	sts	0x2397, r1
	sei();
    6052:	78 94       	sei
}
    6054:	08 95       	ret

00006056 <mv_queue_move_buffer>:

uint8_t mv_queue_move_buffer(int32_t steps_x, 
							 int32_t steps_y, 
							 int32_t steps_z, 
							 uint32_t microseconds)
{
    6056:	2f 92       	push	r2
    6058:	4f 92       	push	r4
    605a:	5f 92       	push	r5
    605c:	6f 92       	push	r6
    605e:	7f 92       	push	r7
    6060:	8f 92       	push	r8
    6062:	9f 92       	push	r9
    6064:	af 92       	push	r10
    6066:	bf 92       	push	r11
    6068:	cf 92       	push	r12
    606a:	df 92       	push	r13
    606c:	ef 92       	push	r14
    606e:	ff 92       	push	r15
    6070:	0f 93       	push	r16
    6072:	1f 93       	push	r17
    6074:	df 93       	push	r29
    6076:	cf 93       	push	r28
    6078:	cd b7       	in	r28, 0x3d	; 61
    607a:	de b7       	in	r29, 0x3e	; 62
    607c:	2e 97       	sbiw	r28, 0x0e	; 14
    607e:	cd bf       	out	0x3d, r28	; 61
    6080:	de bf       	out	0x3e, r29	; 62
    6082:	3b 01       	movw	r6, r22
    6084:	4c 01       	movw	r8, r24
					// Using 64 bits is expensive! The division goes from ~640 
					// cycles at 32 bits to ~3800 cycles using 64 bits
	uint32_t ticks_per_step; // temp variable

	// Bail on a zero length line (perhaps test for abs val < min line length)
	if ((steps_x == 0) && (steps_y == 0) && (steps_z) == 0) {
    6086:	61 15       	cp	r22, r1
    6088:	71 05       	cpc	r23, r1
    608a:	81 05       	cpc	r24, r1
    608c:	91 05       	cpc	r25, r1
    608e:	61 f4       	brne	.+24     	; 0x60a8 <mv_queue_move_buffer+0x52>
    6090:	21 15       	cp	r18, r1
    6092:	31 05       	cpc	r19, r1
    6094:	41 05       	cpc	r20, r1
    6096:	51 05       	cpc	r21, r1
    6098:	39 f4       	brne	.+14     	; 0x60a8 <mv_queue_move_buffer+0x52>
    609a:	e1 14       	cp	r14, r1
    609c:	f1 04       	cpc	r15, r1
    609e:	01 05       	cpc	r16, r1
    60a0:	11 05       	cpc	r17, r1
    60a2:	11 f4       	brne	.+4      	; 0x60a8 <mv_queue_move_buffer+0x52>
    60a4:	89 e0       	ldi	r24, 0x09	; 9
    60a6:	e2 c0       	rjmp	.+452    	; 0x626c <mv_queue_move_buffer+0x216>
		return (TG_ZERO_LENGTH_LINE);
	}

	// Determine the buffer head index needed to store this line
	if ((next_buffer_head = mv.move_buffer_head + 1) >= MOVE_BUFFER_SIZE) {
    60a8:	20 90 94 23 	lds	r2, 0x2394
    60ac:	23 94       	inc	r2
    60ae:	63 e0       	ldi	r22, 0x03	; 3
    60b0:	62 15       	cp	r22, r2
    60b2:	08 f4       	brcc	.+2      	; 0x60b6 <mv_queue_move_buffer+0x60>
    60b4:	22 24       	eor	r2, r2
		next_buffer_head = 0;					 // wrap condition
	}

	// Return with error if the buffer is full 
	if (mv.move_buffer_tail == next_buffer_head) {
    60b6:	80 91 95 23 	lds	r24, 0x2395
    60ba:	82 15       	cp	r24, r2
    60bc:	11 f4       	brne	.+4      	; 0x60c2 <mv_queue_move_buffer+0x6c>
    60be:	86 e0       	ldi	r24, 0x06	; 6
    60c0:	d5 c0       	rjmp	.+426    	; 0x626c <mv_queue_move_buffer+0x216>
		return (TG_BUFFER_FULL);
//		sleep_mode();	// USE INSTEAD OF THE RETURN IF YOU WANT BLOCKING BEHAVIOR
	}

	// setup
	mv.p = &mv.move_buffer[mv.move_buffer_head];
    60c2:	e0 91 94 23 	lds	r30, 0x2394
    60c6:	8b e1       	ldi	r24, 0x1B	; 27
    60c8:	e8 9f       	mul	r30, r24
    60ca:	f0 01       	movw	r30, r0
    60cc:	11 24       	eor	r1, r1
    60ce:	e8 56       	subi	r30, 0x68	; 104
    60d0:	fc 4d       	sbci	r31, 0xDC	; 220
    60d2:	e0 93 96 23 	sts	0x2396, r30
    60d6:	f0 93 97 23 	sts	0x2397, r31
	mv.p->a[X_AXIS].steps = steps_x;
    60da:	60 82       	st	Z, r6
    60dc:	71 82       	std	Z+1, r7	; 0x01
    60de:	82 82       	std	Z+2, r8	; 0x02
    60e0:	93 82       	std	Z+3, r9	; 0x03
	mv.p->a[Y_AXIS].steps = steps_y;
    60e2:	21 87       	std	Z+9, r18	; 0x09
    60e4:	32 87       	std	Z+10, r19	; 0x0a
    60e6:	43 87       	std	Z+11, r20	; 0x0b
    60e8:	54 87       	std	Z+12, r21	; 0x0c
	mv.p->a[Z_AXIS].steps = steps_z;
    60ea:	e2 8a       	std	Z+18, r14	; 0x12
    60ec:	f3 8a       	std	Z+19, r15	; 0x13
    60ee:	04 8b       	std	Z+20, r16	; 0x14
    60f0:	15 8b       	std	Z+21, r17	; 0x15

	ticks = microseconds * TICKS_PER_MICROSECOND;
    60f2:	65 e0       	ldi	r22, 0x05	; 5
    60f4:	aa 0c       	add	r10, r10
    60f6:	bb 1c       	adc	r11, r11
    60f8:	cc 1c       	adc	r12, r12
    60fa:	dd 1c       	adc	r13, r13
    60fc:	6a 95       	dec	r22
    60fe:	d1 f7       	brne	.-12     	; 0x60f4 <mv_queue_move_buffer+0x9e>
    6100:	a6 01       	movw	r20, r12
    6102:	95 01       	movw	r18, r10
    6104:	60 e0       	ldi	r22, 0x00	; 0
    6106:	70 e0       	ldi	r23, 0x00	; 0
    6108:	80 e0       	ldi	r24, 0x00	; 0
    610a:	90 e0       	ldi	r25, 0x00	; 0
    610c:	ab 82       	std	Y+3, r10	; 0x03
    610e:	3c 83       	std	Y+4, r19	; 0x04
    6110:	4d 83       	std	Y+5, r20	; 0x05
    6112:	5e 83       	std	Y+6, r21	; 0x06
    6114:	6f 83       	std	Y+7, r22	; 0x07
    6116:	78 87       	std	Y+8, r23	; 0x08
    6118:	89 87       	std	Y+9, r24	; 0x09
    611a:	9a 87       	std	Y+10, r25	; 0x0a
    611c:	1d 86       	std	Y+13, r1	; 0x0d
    611e:	1e 86       	std	Y+14, r1	; 0x0e

	// load axis values
	for (i = X_AXIS; i <= Z_AXIS; i++) {

		if (mv.p->a[i].steps) { 				// skip axes with zero steps
    6120:	20 91 96 23 	lds	r18, 0x2396
    6124:	30 91 97 23 	lds	r19, 0x2397
    6128:	ed 85       	ldd	r30, Y+13	; 0x0d
    612a:	fe 85       	ldd	r31, Y+14	; 0x0e
    612c:	53 e0       	ldi	r21, 0x03	; 3
    612e:	ee 0f       	add	r30, r30
    6130:	ff 1f       	adc	r31, r31
    6132:	5a 95       	dec	r21
    6134:	e1 f7       	brne	.-8      	; 0x612e <mv_queue_move_buffer+0xd8>
    6136:	4d 85       	ldd	r20, Y+13	; 0x0d
    6138:	5e 85       	ldd	r21, Y+14	; 0x0e
    613a:	e4 0f       	add	r30, r20
    613c:	f5 1f       	adc	r31, r21
    613e:	e2 0f       	add	r30, r18
    6140:	f3 1f       	adc	r31, r19
    6142:	80 81       	ld	r24, Z
    6144:	91 81       	ldd	r25, Z+1	; 0x01
    6146:	a2 81       	ldd	r26, Z+2	; 0x02
    6148:	b3 81       	ldd	r27, Z+3	; 0x03
    614a:	00 97       	sbiw	r24, 0x00	; 0
    614c:	a1 05       	cpc	r26, r1
    614e:	b1 05       	cpc	r27, r1
    6150:	09 f4       	brne	.+2      	; 0x6154 <mv_queue_move_buffer+0xfe>
    6152:	7f c0       	rjmp	.+254    	; 0x6252 <mv_queue_move_buffer+0x1fc>

			// set direction: (polarity is corrected during execute move)
			(mv.p->a[i].steps < 0) ? 
    6154:	b7 ff       	sbrs	r27, 7
    6156:	03 c0       	rjmp	.+6      	; 0x615e <mv_queue_move_buffer+0x108>
    6158:	51 e0       	ldi	r21, 0x01	; 1
    615a:	50 87       	std	Z+8, r21	; 0x08
    615c:	01 c0       	rjmp	.+2      	; 0x6160 <mv_queue_move_buffer+0x10a>
    615e:	10 86       	std	Z+8, r1	; 0x08
			(mv.p->a[i].direction = 1): 		// CCW = 1 
			(mv.p->a[i].direction = 0);			// CW = 0

			// set steps to absolute value
			mv.p->a[i].steps = labs(mv.p->a[i].steps);
    6160:	ed 85       	ldd	r30, Y+13	; 0x0d
    6162:	fe 85       	ldd	r31, Y+14	; 0x0e
    6164:	43 e0       	ldi	r20, 0x03	; 3
    6166:	ee 0f       	add	r30, r30
    6168:	ff 1f       	adc	r31, r31
    616a:	4a 95       	dec	r20
    616c:	e1 f7       	brne	.-8      	; 0x6166 <mv_queue_move_buffer+0x110>
    616e:	6d 85       	ldd	r22, Y+13	; 0x0d
    6170:	7e 85       	ldd	r23, Y+14	; 0x0e
    6172:	e6 0f       	add	r30, r22
    6174:	f7 1f       	adc	r31, r23
    6176:	e2 0f       	add	r30, r18
    6178:	f3 1f       	adc	r31, r19
    617a:	80 81       	ld	r24, Z
    617c:	91 81       	ldd	r25, Z+1	; 0x01
    617e:	a2 81       	ldd	r26, Z+2	; 0x02
    6180:	b3 81       	ldd	r27, Z+3	; 0x03
    6182:	b7 ff       	sbrs	r27, 7
    6184:	07 c0       	rjmp	.+14     	; 0x6194 <mv_queue_move_buffer+0x13e>
    6186:	b0 95       	com	r27
    6188:	a0 95       	com	r26
    618a:	90 95       	com	r25
    618c:	81 95       	neg	r24
    618e:	9f 4f       	sbci	r25, 0xFF	; 255
    6190:	af 4f       	sbci	r26, 0xFF	; 255
    6192:	bf 4f       	sbci	r27, 0xFF	; 255
    6194:	80 83       	st	Z, r24
    6196:	91 83       	std	Z+1, r25	; 0x01
    6198:	a2 83       	std	Z+2, r26	; 0x02
    619a:	b3 83       	std	Z+3, r27	; 0x03

			// Normalize ticks_per_step by right shifting until the MSword = 0
			// Accumulate LSBs shifted out of ticks_per_step into postscale
			mv.p->a[i].postscale = 1;
    619c:	80 91 96 23 	lds	r24, 0x2396
    61a0:	90 91 97 23 	lds	r25, 0x2397
    61a4:	89 83       	std	Y+1, r24	; 0x01
    61a6:	9a 83       	std	Y+2, r25	; 0x02
    61a8:	4d 84       	ldd	r4, Y+13	; 0x0d
    61aa:	5e 84       	ldd	r5, Y+14	; 0x0e
    61ac:	23 e0       	ldi	r18, 0x03	; 3
    61ae:	44 0c       	add	r4, r4
    61b0:	55 1c       	adc	r5, r5
    61b2:	2a 95       	dec	r18
    61b4:	e1 f7       	brne	.-8      	; 0x61ae <mv_queue_move_buffer+0x158>
    61b6:	ed 85       	ldd	r30, Y+13	; 0x0d
    61b8:	fe 85       	ldd	r31, Y+14	; 0x0e
    61ba:	e4 0d       	add	r30, r4
    61bc:	f5 1d       	adc	r31, r5
    61be:	e8 0f       	add	r30, r24
    61c0:	f9 1f       	adc	r31, r25
    61c2:	df 01       	movw	r26, r30
    61c4:	16 96       	adiw	r26, 0x06	; 6
    61c6:	ab 87       	std	Y+11, r26	; 0x0b
    61c8:	bc 87       	std	Y+12, r27	; 0x0c
    61ca:	21 e0       	ldi	r18, 0x01	; 1
    61cc:	30 e0       	ldi	r19, 0x00	; 0
    61ce:	26 83       	std	Z+6, r18	; 0x06
    61d0:	37 83       	std	Z+7, r19	; 0x07
			ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
    61d2:	e0 80       	ld	r14, Z
    61d4:	f1 80       	ldd	r15, Z+1	; 0x01
    61d6:	02 81       	ldd	r16, Z+2	; 0x02
    61d8:	13 81       	ldd	r17, Z+3	; 0x03
    61da:	37 01       	movw	r6, r14
    61dc:	48 01       	movw	r8, r16
    61de:	99 0c       	add	r9, r9
    61e0:	66 08       	sbc	r6, r6
    61e2:	76 2c       	mov	r7, r6
    61e4:	43 01       	movw	r8, r6
    61e6:	2b 81       	ldd	r18, Y+3	; 0x03
    61e8:	3c 81       	ldd	r19, Y+4	; 0x04
    61ea:	4d 81       	ldd	r20, Y+5	; 0x05
    61ec:	5e 81       	ldd	r21, Y+6	; 0x06
    61ee:	6f 81       	ldd	r22, Y+7	; 0x07
    61f0:	78 85       	ldd	r23, Y+8	; 0x08
    61f2:	89 85       	ldd	r24, Y+9	; 0x09
    61f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    61f6:	57 01       	movw	r10, r14
    61f8:	68 01       	movw	r12, r16
    61fa:	e6 2c       	mov	r14, r6
    61fc:	f6 2c       	mov	r15, r6
    61fe:	06 2d       	mov	r16, r6
    6200:	16 2d       	mov	r17, r6
    6202:	0e 94 b3 32 	call	0x6566	; 0x6566 <__udivdi3>
    6206:	c9 01       	movw	r24, r18
    6208:	da 01       	movw	r26, r20
    620a:	9c 01       	movw	r18, r24
    620c:	ad 01       	movw	r20, r26
    620e:	b2 01       	movw	r22, r4
			while (ticks_per_step & 0xFFFF0000) {
				ticks_per_step >>= 1;
				mv.p->a[i].postscale <<= 1;
    6210:	eb 85       	ldd	r30, Y+11	; 0x0b
    6212:	fc 85       	ldd	r31, Y+12	; 0x0c
    6214:	0a c0       	rjmp	.+20     	; 0x622a <mv_queue_move_buffer+0x1d4>
			// Normalize ticks_per_step by right shifting until the MSword = 0
			// Accumulate LSBs shifted out of ticks_per_step into postscale
			mv.p->a[i].postscale = 1;
			ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
			while (ticks_per_step & 0xFFFF0000) {
				ticks_per_step >>= 1;
    6216:	56 95       	lsr	r21
    6218:	47 95       	ror	r20
    621a:	37 95       	ror	r19
    621c:	27 95       	ror	r18
				mv.p->a[i].postscale <<= 1;
    621e:	80 81       	ld	r24, Z
    6220:	91 81       	ldd	r25, Z+1	; 0x01
    6222:	88 0f       	add	r24, r24
    6224:	99 1f       	adc	r25, r25
    6226:	80 83       	st	Z, r24
    6228:	91 83       	std	Z+1, r25	; 0x01

			// Normalize ticks_per_step by right shifting until the MSword = 0
			// Accumulate LSBs shifted out of ticks_per_step into postscale
			mv.p->a[i].postscale = 1;
			ticks_per_step = (uint32_t)(ticks / mv.p->a[i].steps);// expensive!
			while (ticks_per_step & 0xFFFF0000) {
    622a:	da 01       	movw	r26, r20
    622c:	c9 01       	movw	r24, r18
    622e:	80 70       	andi	r24, 0x00	; 0
    6230:	90 70       	andi	r25, 0x00	; 0
    6232:	00 97       	sbiw	r24, 0x00	; 0
    6234:	a1 05       	cpc	r26, r1
    6236:	b1 05       	cpc	r27, r1
    6238:	71 f7       	brne	.-36     	; 0x6216 <mv_queue_move_buffer+0x1c0>
				ticks_per_step >>= 1;
				mv.p->a[i].postscale <<= 1;
			}
			mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
    623a:	8d 85       	ldd	r24, Y+13	; 0x0d
    623c:	9e 85       	ldd	r25, Y+14	; 0x0e
    623e:	68 0f       	add	r22, r24
    6240:	79 1f       	adc	r23, r25
    6242:	a9 81       	ldd	r26, Y+1	; 0x01
    6244:	ba 81       	ldd	r27, Y+2	; 0x02
    6246:	a6 0f       	add	r26, r22
    6248:	b7 1f       	adc	r27, r23
    624a:	14 96       	adiw	r26, 0x04	; 4
    624c:	2d 93       	st	X+, r18
    624e:	3c 93       	st	X, r19
    6250:	15 97       	sbiw	r26, 0x05	; 5
    6252:	ed 85       	ldd	r30, Y+13	; 0x0d
    6254:	fe 85       	ldd	r31, Y+14	; 0x0e
    6256:	31 96       	adiw	r30, 0x01	; 1
    6258:	ed 87       	std	Y+13, r30	; 0x0d
    625a:	fe 87       	std	Y+14, r31	; 0x0e
	mv.p->a[Z_AXIS].steps = steps_z;

	ticks = microseconds * TICKS_PER_MICROSECOND;

	// load axis values
	for (i = X_AXIS; i <= Z_AXIS; i++) {
    625c:	33 97       	sbiw	r30, 0x03	; 3
    625e:	09 f0       	breq	.+2      	; 0x6262 <mv_queue_move_buffer+0x20c>
    6260:	5f cf       	rjmp	.-322    	; 0x6120 <mv_queue_move_buffer+0xca>
				mv.p->a[i].postscale <<= 1;
			}
			mv.p->a[i].period = (uint16_t)(ticks_per_step & 0x0000FFFF);
		}
	}
	mv.move_buffer_head = next_buffer_head;
    6262:	20 92 94 23 	sts	0x2394, r2
	st_execute_move();
    6266:	0e 94 97 23 	call	0x472e	; 0x472e <st_execute_move>
    626a:	80 e0       	ldi	r24, 0x00	; 0
	return (TG_OK);
}
    626c:	2e 96       	adiw	r28, 0x0e	; 14
    626e:	cd bf       	out	0x3d, r28	; 61
    6270:	de bf       	out	0x3e, r29	; 62
    6272:	cf 91       	pop	r28
    6274:	df 91       	pop	r29
    6276:	1f 91       	pop	r17
    6278:	0f 91       	pop	r16
    627a:	ff 90       	pop	r15
    627c:	ef 90       	pop	r14
    627e:	df 90       	pop	r13
    6280:	cf 90       	pop	r12
    6282:	bf 90       	pop	r11
    6284:	af 90       	pop	r10
    6286:	9f 90       	pop	r9
    6288:	8f 90       	pop	r8
    628a:	7f 90       	pop	r7
    628c:	6f 90       	pop	r6
    628e:	5f 90       	pop	r5
    6290:	4f 90       	pop	r4
    6292:	2f 90       	pop	r2
    6294:	08 95       	ret

00006296 <ls_init>:

#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
    6296:	a3 e1       	ldi	r26, 0x13	; 19
    6298:	b4 e2       	ldi	r27, 0x24	; 36
	for (uint8_t i=0; i <= A_AXIS; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    629a:	20 e4       	ldi	r18, 0x40	; 64
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    629c:	90 e8       	ldi	r25, 0x80	; 128
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    629e:	89 e1       	ldi	r24, 0x19	; 25
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    62a0:	3a e0       	ldi	r19, 0x0A	; 10
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=0; i <= A_AXIS; i++) {
		AXIS(i).port->DIRCLR = (1<<MIN_LIMIT_BIT_bp);		// min - set as input
    62a2:	ed 91       	ld	r30, X+
    62a4:	fc 91       	ld	r31, X
    62a6:	11 97       	sbiw	r26, 0x01	; 1
    62a8:	22 83       	std	Z+2, r18	; 0x02
		AXIS(i).port->DIRCLR = (1<<MAX_LIMIT_BIT_bp);		// max - set as input
    62aa:	ed 91       	ld	r30, X+
    62ac:	fc 91       	ld	r31, X
    62ae:	11 97       	sbiw	r26, 0x01	; 1
    62b0:	92 83       	std	Z+2, r25	; 0x02
		AXIS(i).port->PIN6CTRL = (LS_OPC_gc | LS_ISC_gc);	// min - pin modes
    62b2:	ed 91       	ld	r30, X+
    62b4:	fc 91       	ld	r31, X
    62b6:	11 97       	sbiw	r26, 0x01	; 1
    62b8:	86 8b       	std	Z+22, r24	; 0x16
		AXIS(i).port->PIN7CTRL = (LS_OPC_gc | LS_ISC_gc);	// max - pin modes
    62ba:	ed 91       	ld	r30, X+
    62bc:	fc 91       	ld	r31, X
    62be:	11 97       	sbiw	r26, 0x01	; 1
    62c0:	87 8b       	std	Z+23, r24	; 0x17
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
    62c2:	ed 91       	ld	r30, X+
    62c4:	fc 91       	ld	r31, X
    62c6:	11 97       	sbiw	r26, 0x01	; 1
    62c8:	22 87       	std	Z+10, r18	; 0x0a
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
    62ca:	ed 91       	ld	r30, X+
    62cc:	fc 91       	ld	r31, X
    62ce:	11 97       	sbiw	r26, 0x01	; 1
    62d0:	93 87       	std	Z+11, r25	; 0x0b
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
    62d2:	ed 91       	ld	r30, X+
    62d4:	fc 91       	ld	r31, X
    62d6:	11 97       	sbiw	r26, 0x01	; 1
    62d8:	31 87       	std	Z+9, r19	; 0x09
    62da:	1f 96       	adiw	r26, 0x0f	; 15
#define	LS_OPC_gc PORT_OPC_PULLUP_gc				// totem poll pullup mode
#define LS_ISC_gc PORT_ISC_RISING_gc				// ISRs on rising edge

void ls_init(void) 
{
	for (uint8_t i=0; i <= A_AXIS; i++) {
    62dc:	44 e2       	ldi	r20, 0x24	; 36
    62de:	af 34       	cpi	r26, 0x4F	; 79
    62e0:	b4 07       	cpc	r27, r20
    62e2:	f9 f6       	brne	.-66     	; 0x62a2 <ls_init+0xc>
		AXIS(i).port->INT0MASK = (1<<MIN_LIMIT_BIT_bp);		// min - INT0
		AXIS(i).port->INT1MASK = (1<<MAX_LIMIT_BIT_bp);		// max - INT1
		// set interrupt levels. Interrupts must be enabled in main()
		AXIS(i).port->INTCTRL = (PORT_INT0LVL_MED_gc | PORT_INT1LVL_MED_gc);
	}
}
    62e4:	08 95       	ret

000062e6 <__vector_65>:
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    62e6:	1f 92       	push	r1
    62e8:	0f 92       	push	r0
    62ea:	0f b6       	in	r0, 0x3f	; 63
    62ec:	0f 92       	push	r0
    62ee:	0b b6       	in	r0, 0x3b	; 59
    62f0:	0f 92       	push	r0
    62f2:	11 24       	eor	r1, r1
    62f4:	2f 93       	push	r18
    62f6:	3f 93       	push	r19
    62f8:	4f 93       	push	r20
    62fa:	5f 93       	push	r21
    62fc:	6f 93       	push	r22
    62fe:	7f 93       	push	r23
    6300:	8f 93       	push	r24
    6302:	9f 93       	push	r25
    6304:	af 93       	push	r26
    6306:	bf 93       	push	r27
    6308:	ef 93       	push	r30
    630a:	ff 93       	push	r31

void _ls_handler() {
	tg_kill();
    630c:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <tg_kill>
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }
    6310:	ff 91       	pop	r31
    6312:	ef 91       	pop	r30
    6314:	bf 91       	pop	r27
    6316:	af 91       	pop	r26
    6318:	9f 91       	pop	r25
    631a:	8f 91       	pop	r24
    631c:	7f 91       	pop	r23
    631e:	6f 91       	pop	r22
    6320:	5f 91       	pop	r21
    6322:	4f 91       	pop	r20
    6324:	3f 91       	pop	r19
    6326:	2f 91       	pop	r18
    6328:	0f 90       	pop	r0
    632a:	0b be       	out	0x3b, r0	; 59
    632c:	0f 90       	pop	r0
    632e:	0f be       	out	0x3f, r0	; 63
    6330:	0f 90       	pop	r0
    6332:	1f 90       	pop	r1
    6334:	18 95       	reti

00006336 <__vector_64>:
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    6336:	1f 92       	push	r1
    6338:	0f 92       	push	r0
    633a:	0f b6       	in	r0, 0x3f	; 63
    633c:	0f 92       	push	r0
    633e:	0b b6       	in	r0, 0x3b	; 59
    6340:	0f 92       	push	r0
    6342:	11 24       	eor	r1, r1
    6344:	2f 93       	push	r18
    6346:	3f 93       	push	r19
    6348:	4f 93       	push	r20
    634a:	5f 93       	push	r21
    634c:	6f 93       	push	r22
    634e:	7f 93       	push	r23
    6350:	8f 93       	push	r24
    6352:	9f 93       	push	r25
    6354:	af 93       	push	r26
    6356:	bf 93       	push	r27
    6358:	ef 93       	push	r30
    635a:	ff 93       	push	r31
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    635c:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <tg_kill>
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
    6360:	ff 91       	pop	r31
    6362:	ef 91       	pop	r30
    6364:	bf 91       	pop	r27
    6366:	af 91       	pop	r26
    6368:	9f 91       	pop	r25
    636a:	8f 91       	pop	r24
    636c:	7f 91       	pop	r23
    636e:	6f 91       	pop	r22
    6370:	5f 91       	pop	r21
    6372:	4f 91       	pop	r20
    6374:	3f 91       	pop	r19
    6376:	2f 91       	pop	r18
    6378:	0f 90       	pop	r0
    637a:	0b be       	out	0x3b, r0	; 59
    637c:	0f 90       	pop	r0
    637e:	0f be       	out	0x3f, r0	; 63
    6380:	0f 90       	pop	r0
    6382:	1f 90       	pop	r1
    6384:	18 95       	reti

00006386 <__vector_44>:
ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    6386:	1f 92       	push	r1
    6388:	0f 92       	push	r0
    638a:	0f b6       	in	r0, 0x3f	; 63
    638c:	0f 92       	push	r0
    638e:	0b b6       	in	r0, 0x3b	; 59
    6390:	0f 92       	push	r0
    6392:	11 24       	eor	r1, r1
    6394:	2f 93       	push	r18
    6396:	3f 93       	push	r19
    6398:	4f 93       	push	r20
    639a:	5f 93       	push	r21
    639c:	6f 93       	push	r22
    639e:	7f 93       	push	r23
    63a0:	8f 93       	push	r24
    63a2:	9f 93       	push	r25
    63a4:	af 93       	push	r26
    63a6:	bf 93       	push	r27
    63a8:	ef 93       	push	r30
    63aa:	ff 93       	push	r31
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    63ac:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <tg_kill>
ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
    63b0:	ff 91       	pop	r31
    63b2:	ef 91       	pop	r30
    63b4:	bf 91       	pop	r27
    63b6:	af 91       	pop	r26
    63b8:	9f 91       	pop	r25
    63ba:	8f 91       	pop	r24
    63bc:	7f 91       	pop	r23
    63be:	6f 91       	pop	r22
    63c0:	5f 91       	pop	r21
    63c2:	4f 91       	pop	r20
    63c4:	3f 91       	pop	r19
    63c6:	2f 91       	pop	r18
    63c8:	0f 90       	pop	r0
    63ca:	0b be       	out	0x3b, r0	; 59
    63cc:	0f 90       	pop	r0
    63ce:	0f be       	out	0x3f, r0	; 63
    63d0:	0f 90       	pop	r0
    63d2:	1f 90       	pop	r1
    63d4:	18 95       	reti

000063d6 <__vector_43>:

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    63d6:	1f 92       	push	r1
    63d8:	0f 92       	push	r0
    63da:	0f b6       	in	r0, 0x3f	; 63
    63dc:	0f 92       	push	r0
    63de:	0b b6       	in	r0, 0x3b	; 59
    63e0:	0f 92       	push	r0
    63e2:	11 24       	eor	r1, r1
    63e4:	2f 93       	push	r18
    63e6:	3f 93       	push	r19
    63e8:	4f 93       	push	r20
    63ea:	5f 93       	push	r21
    63ec:	6f 93       	push	r22
    63ee:	7f 93       	push	r23
    63f0:	8f 93       	push	r24
    63f2:	9f 93       	push	r25
    63f4:	af 93       	push	r26
    63f6:	bf 93       	push	r27
    63f8:	ef 93       	push	r30
    63fa:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    63fc:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <tg_kill>

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Z_MIN_ISR_vect)	{ _ls_handler(); }
    6400:	ff 91       	pop	r31
    6402:	ef 91       	pop	r30
    6404:	bf 91       	pop	r27
    6406:	af 91       	pop	r26
    6408:	9f 91       	pop	r25
    640a:	8f 91       	pop	r24
    640c:	7f 91       	pop	r23
    640e:	6f 91       	pop	r22
    6410:	5f 91       	pop	r21
    6412:	4f 91       	pop	r20
    6414:	3f 91       	pop	r19
    6416:	2f 91       	pop	r18
    6418:	0f 90       	pop	r0
    641a:	0b be       	out	0x3b, r0	; 59
    641c:	0f 90       	pop	r0
    641e:	0f be       	out	0x3f, r0	; 63
    6420:	0f 90       	pop	r0
    6422:	1f 90       	pop	r1
    6424:	18 95       	reti

00006426 <__vector_105>:
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    6426:	1f 92       	push	r1
    6428:	0f 92       	push	r0
    642a:	0f b6       	in	r0, 0x3f	; 63
    642c:	0f 92       	push	r0
    642e:	0b b6       	in	r0, 0x3b	; 59
    6430:	0f 92       	push	r0
    6432:	11 24       	eor	r1, r1
    6434:	2f 93       	push	r18
    6436:	3f 93       	push	r19
    6438:	4f 93       	push	r20
    643a:	5f 93       	push	r21
    643c:	6f 93       	push	r22
    643e:	7f 93       	push	r23
    6440:	8f 93       	push	r24
    6442:	9f 93       	push	r25
    6444:	af 93       	push	r26
    6446:	bf 93       	push	r27
    6448:	ef 93       	push	r30
    644a:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    644c:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <tg_kill>
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
ISR(Y_MAX_ISR_vect)	{ _ls_handler(); }
    6450:	ff 91       	pop	r31
    6452:	ef 91       	pop	r30
    6454:	bf 91       	pop	r27
    6456:	af 91       	pop	r26
    6458:	9f 91       	pop	r25
    645a:	8f 91       	pop	r24
    645c:	7f 91       	pop	r23
    645e:	6f 91       	pop	r22
    6460:	5f 91       	pop	r21
    6462:	4f 91       	pop	r20
    6464:	3f 91       	pop	r19
    6466:	2f 91       	pop	r18
    6468:	0f 90       	pop	r0
    646a:	0b be       	out	0x3b, r0	; 59
    646c:	0f 90       	pop	r0
    646e:	0f be       	out	0x3f, r0	; 63
    6470:	0f 90       	pop	r0
    6472:	1f 90       	pop	r1
    6474:	18 95       	reti

00006476 <__vector_104>:
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    6476:	1f 92       	push	r1
    6478:	0f 92       	push	r0
    647a:	0f b6       	in	r0, 0x3f	; 63
    647c:	0f 92       	push	r0
    647e:	0b b6       	in	r0, 0x3b	; 59
    6480:	0f 92       	push	r0
    6482:	11 24       	eor	r1, r1
    6484:	2f 93       	push	r18
    6486:	3f 93       	push	r19
    6488:	4f 93       	push	r20
    648a:	5f 93       	push	r21
    648c:	6f 93       	push	r22
    648e:	7f 93       	push	r23
    6490:	8f 93       	push	r24
    6492:	9f 93       	push	r25
    6494:	af 93       	push	r26
    6496:	bf 93       	push	r27
    6498:	ef 93       	push	r30
    649a:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    649c:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <tg_kill>
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
ISR(Y_MIN_ISR_vect)	{ _ls_handler(); }
    64a0:	ff 91       	pop	r31
    64a2:	ef 91       	pop	r30
    64a4:	bf 91       	pop	r27
    64a6:	af 91       	pop	r26
    64a8:	9f 91       	pop	r25
    64aa:	8f 91       	pop	r24
    64ac:	7f 91       	pop	r23
    64ae:	6f 91       	pop	r22
    64b0:	5f 91       	pop	r21
    64b2:	4f 91       	pop	r20
    64b4:	3f 91       	pop	r19
    64b6:	2f 91       	pop	r18
    64b8:	0f 90       	pop	r0
    64ba:	0b be       	out	0x3b, r0	; 59
    64bc:	0f 90       	pop	r0
    64be:	0f be       	out	0x3f, r0	; 63
    64c0:	0f 90       	pop	r0
    64c2:	1f 90       	pop	r1
    64c4:	18 95       	reti

000064c6 <__vector_67>:
/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    64c6:	1f 92       	push	r1
    64c8:	0f 92       	push	r0
    64ca:	0f b6       	in	r0, 0x3f	; 63
    64cc:	0f 92       	push	r0
    64ce:	0b b6       	in	r0, 0x3b	; 59
    64d0:	0f 92       	push	r0
    64d2:	11 24       	eor	r1, r1
    64d4:	2f 93       	push	r18
    64d6:	3f 93       	push	r19
    64d8:	4f 93       	push	r20
    64da:	5f 93       	push	r21
    64dc:	6f 93       	push	r22
    64de:	7f 93       	push	r23
    64e0:	8f 93       	push	r24
    64e2:	9f 93       	push	r25
    64e4:	af 93       	push	r26
    64e6:	bf 93       	push	r27
    64e8:	ef 93       	push	r30
    64ea:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    64ec:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <tg_kill>
/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
ISR(X_MAX_ISR_vect)	{ _ls_handler(); }
    64f0:	ff 91       	pop	r31
    64f2:	ef 91       	pop	r30
    64f4:	bf 91       	pop	r27
    64f6:	af 91       	pop	r26
    64f8:	9f 91       	pop	r25
    64fa:	8f 91       	pop	r24
    64fc:	7f 91       	pop	r23
    64fe:	6f 91       	pop	r22
    6500:	5f 91       	pop	r21
    6502:	4f 91       	pop	r20
    6504:	3f 91       	pop	r19
    6506:	2f 91       	pop	r18
    6508:	0f 90       	pop	r0
    650a:	0b be       	out	0x3b, r0	; 59
    650c:	0f 90       	pop	r0
    650e:	0f be       	out	0x3f, r0	; 63
    6510:	0f 90       	pop	r0
    6512:	1f 90       	pop	r1
    6514:	18 95       	reti

00006516 <__vector_66>:

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    6516:	1f 92       	push	r1
    6518:	0f 92       	push	r0
    651a:	0f b6       	in	r0, 0x3f	; 63
    651c:	0f 92       	push	r0
    651e:	0b b6       	in	r0, 0x3b	; 59
    6520:	0f 92       	push	r0
    6522:	11 24       	eor	r1, r1
    6524:	2f 93       	push	r18
    6526:	3f 93       	push	r19
    6528:	4f 93       	push	r20
    652a:	5f 93       	push	r21
    652c:	6f 93       	push	r22
    652e:	7f 93       	push	r23
    6530:	8f 93       	push	r24
    6532:	9f 93       	push	r25
    6534:	af 93       	push	r26
    6536:	bf 93       	push	r27
    6538:	ef 93       	push	r30
    653a:	ff 93       	push	r31
ISR(Z_MAX_ISR_vect)	{ _ls_handler(); }
ISR(A_MIN_ISR_vect)	{ _ls_handler(); }
ISR(A_MAX_ISR_vect)	{ _ls_handler(); }

void _ls_handler() {
	tg_kill();
    653c:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <tg_kill>

/*
 * ISRs - Limit switch interrupt handler routine and vectors
 */

ISR(X_MIN_ISR_vect)	{ _ls_handler(); }
    6540:	ff 91       	pop	r31
    6542:	ef 91       	pop	r30
    6544:	bf 91       	pop	r27
    6546:	af 91       	pop	r26
    6548:	9f 91       	pop	r25
    654a:	8f 91       	pop	r24
    654c:	7f 91       	pop	r23
    654e:	6f 91       	pop	r22
    6550:	5f 91       	pop	r21
    6552:	4f 91       	pop	r20
    6554:	3f 91       	pop	r19
    6556:	2f 91       	pop	r18
    6558:	0f 90       	pop	r0
    655a:	0b be       	out	0x3b, r0	; 59
    655c:	0f 90       	pop	r0
    655e:	0f be       	out	0x3f, r0	; 63
    6560:	0f 90       	pop	r0
    6562:	1f 90       	pop	r1
    6564:	18 95       	reti

00006566 <__udivdi3>:
    6566:	ae e5       	ldi	r26, 0x5E	; 94
    6568:	b0 e0       	ldi	r27, 0x00	; 0
    656a:	e9 eb       	ldi	r30, 0xB9	; 185
    656c:	f2 e3       	ldi	r31, 0x32	; 50
    656e:	0c 94 46 41 	jmp	0x828c	; 0x828c <__prologue_saves__>
    6572:	a8 e0       	ldi	r26, 0x08	; 8
    6574:	4e 01       	movw	r8, r28
    6576:	08 94       	sec
    6578:	81 1c       	adc	r8, r1
    657a:	91 1c       	adc	r9, r1
    657c:	f4 01       	movw	r30, r8
    657e:	6a 2e       	mov	r6, r26
    6580:	11 92       	st	Z+, r1
    6582:	6a 94       	dec	r6
    6584:	e9 f7       	brne	.-6      	; 0x6580 <__udivdi3+0x1a>
    6586:	29 83       	std	Y+1, r18	; 0x01
    6588:	3a 83       	std	Y+2, r19	; 0x02
    658a:	4b 83       	std	Y+3, r20	; 0x03
    658c:	5c 83       	std	Y+4, r21	; 0x04
    658e:	6d 83       	std	Y+5, r22	; 0x05
    6590:	7e 83       	std	Y+6, r23	; 0x06
    6592:	8f 83       	std	Y+7, r24	; 0x07
    6594:	98 87       	std	Y+8, r25	; 0x08
    6596:	ce 01       	movw	r24, r28
    6598:	09 96       	adiw	r24, 0x09	; 9
    659a:	fc 01       	movw	r30, r24
    659c:	11 92       	st	Z+, r1
    659e:	aa 95       	dec	r26
    65a0:	e9 f7       	brne	.-6      	; 0x659c <__udivdi3+0x36>
    65a2:	a9 86       	std	Y+9, r10	; 0x09
    65a4:	ba 86       	std	Y+10, r11	; 0x0a
    65a6:	cb 86       	std	Y+11, r12	; 0x0b
    65a8:	dc 86       	std	Y+12, r13	; 0x0c
    65aa:	ed 86       	std	Y+13, r14	; 0x0d
    65ac:	fe 86       	std	Y+14, r15	; 0x0e
    65ae:	0f 87       	std	Y+15, r16	; 0x0f
    65b0:	18 8b       	std	Y+16, r17	; 0x10
    65b2:	29 84       	ldd	r2, Y+9	; 0x09
    65b4:	3a 84       	ldd	r3, Y+10	; 0x0a
    65b6:	4b 84       	ldd	r4, Y+11	; 0x0b
    65b8:	5c 84       	ldd	r5, Y+12	; 0x0c
    65ba:	ed 84       	ldd	r14, Y+13	; 0x0d
    65bc:	fe 84       	ldd	r15, Y+14	; 0x0e
    65be:	0f 85       	ldd	r16, Y+15	; 0x0f
    65c0:	18 89       	ldd	r17, Y+16	; 0x10
    65c2:	69 80       	ldd	r6, Y+1	; 0x01
    65c4:	7a 80       	ldd	r7, Y+2	; 0x02
    65c6:	8b 80       	ldd	r8, Y+3	; 0x03
    65c8:	9c 80       	ldd	r9, Y+4	; 0x04
    65ca:	6d a6       	std	Y+45, r6	; 0x2d
    65cc:	7e a6       	std	Y+46, r7	; 0x2e
    65ce:	8f a6       	std	Y+47, r8	; 0x2f
    65d0:	98 aa       	std	Y+48, r9	; 0x30
    65d2:	6d 80       	ldd	r6, Y+5	; 0x05
    65d4:	7e 80       	ldd	r7, Y+6	; 0x06
    65d6:	8f 80       	ldd	r8, Y+7	; 0x07
    65d8:	98 84       	ldd	r9, Y+8	; 0x08
    65da:	e1 14       	cp	r14, r1
    65dc:	f1 04       	cpc	r15, r1
    65de:	01 05       	cpc	r16, r1
    65e0:	11 05       	cpc	r17, r1
    65e2:	09 f0       	breq	.+2      	; 0x65e6 <__udivdi3+0x80>
    65e4:	b3 c3       	rjmp	.+1894   	; 0x6d4c <__udivdi3+0x7e6>
    65e6:	62 14       	cp	r6, r2
    65e8:	73 04       	cpc	r7, r3
    65ea:	84 04       	cpc	r8, r4
    65ec:	95 04       	cpc	r9, r5
    65ee:	08 f0       	brcs	.+2      	; 0x65f2 <__udivdi3+0x8c>
    65f0:	3d c1       	rjmp	.+634    	; 0x686c <__udivdi3+0x306>
    65f2:	00 e0       	ldi	r16, 0x00	; 0
    65f4:	20 16       	cp	r2, r16
    65f6:	00 e0       	ldi	r16, 0x00	; 0
    65f8:	30 06       	cpc	r3, r16
    65fa:	01 e0       	ldi	r16, 0x01	; 1
    65fc:	40 06       	cpc	r4, r16
    65fe:	00 e0       	ldi	r16, 0x00	; 0
    6600:	50 06       	cpc	r5, r16
    6602:	88 f4       	brcc	.+34     	; 0x6626 <__udivdi3+0xc0>
    6604:	1f ef       	ldi	r17, 0xFF	; 255
    6606:	21 16       	cp	r2, r17
    6608:	31 04       	cpc	r3, r1
    660a:	41 04       	cpc	r4, r1
    660c:	51 04       	cpc	r5, r1
    660e:	39 f0       	breq	.+14     	; 0x661e <__udivdi3+0xb8>
    6610:	30 f0       	brcs	.+12     	; 0x661e <__udivdi3+0xb8>
    6612:	48 e0       	ldi	r20, 0x08	; 8
    6614:	e4 2e       	mov	r14, r20
    6616:	f1 2c       	mov	r15, r1
    6618:	01 2d       	mov	r16, r1
    661a:	11 2d       	mov	r17, r1
    661c:	18 c0       	rjmp	.+48     	; 0x664e <__udivdi3+0xe8>
    661e:	ee 24       	eor	r14, r14
    6620:	ff 24       	eor	r15, r15
    6622:	87 01       	movw	r16, r14
    6624:	14 c0       	rjmp	.+40     	; 0x664e <__udivdi3+0xe8>
    6626:	20 e0       	ldi	r18, 0x00	; 0
    6628:	22 16       	cp	r2, r18
    662a:	20 e0       	ldi	r18, 0x00	; 0
    662c:	32 06       	cpc	r3, r18
    662e:	20 e0       	ldi	r18, 0x00	; 0
    6630:	42 06       	cpc	r4, r18
    6632:	21 e0       	ldi	r18, 0x01	; 1
    6634:	52 06       	cpc	r5, r18
    6636:	30 f0       	brcs	.+12     	; 0x6644 <__udivdi3+0xde>
    6638:	38 e1       	ldi	r19, 0x18	; 24
    663a:	e3 2e       	mov	r14, r19
    663c:	f1 2c       	mov	r15, r1
    663e:	01 2d       	mov	r16, r1
    6640:	11 2d       	mov	r17, r1
    6642:	05 c0       	rjmp	.+10     	; 0x664e <__udivdi3+0xe8>
    6644:	20 e1       	ldi	r18, 0x10	; 16
    6646:	e2 2e       	mov	r14, r18
    6648:	f1 2c       	mov	r15, r1
    664a:	01 2d       	mov	r16, r1
    664c:	11 2d       	mov	r17, r1
    664e:	d2 01       	movw	r26, r4
    6650:	c1 01       	movw	r24, r2
    6652:	0e 2c       	mov	r0, r14
    6654:	04 c0       	rjmp	.+8      	; 0x665e <__udivdi3+0xf8>
    6656:	b6 95       	lsr	r27
    6658:	a7 95       	ror	r26
    665a:	97 95       	ror	r25
    665c:	87 95       	ror	r24
    665e:	0a 94       	dec	r0
    6660:	d2 f7       	brpl	.-12     	; 0x6656 <__udivdi3+0xf0>
    6662:	84 5e       	subi	r24, 0xE4	; 228
    6664:	9f 4d       	sbci	r25, 0xDF	; 223
    6666:	dc 01       	movw	r26, r24
    6668:	2c 91       	ld	r18, X
    666a:	80 e2       	ldi	r24, 0x20	; 32
    666c:	90 e0       	ldi	r25, 0x00	; 0
    666e:	a0 e0       	ldi	r26, 0x00	; 0
    6670:	b0 e0       	ldi	r27, 0x00	; 0
    6672:	8e 19       	sub	r24, r14
    6674:	9f 09       	sbc	r25, r15
    6676:	a0 0b       	sbc	r26, r16
    6678:	b1 0b       	sbc	r27, r17
    667a:	7c 01       	movw	r14, r24
    667c:	8d 01       	movw	r16, r26
    667e:	e2 1a       	sub	r14, r18
    6680:	f1 08       	sbc	r15, r1
    6682:	01 09       	sbc	r16, r1
    6684:	11 09       	sbc	r17, r1
    6686:	e1 14       	cp	r14, r1
    6688:	f1 04       	cpc	r15, r1
    668a:	01 05       	cpc	r16, r1
    668c:	11 05       	cpc	r17, r1
    668e:	a1 f1       	breq	.+104    	; 0x66f8 <__udivdi3+0x192>
    6690:	0e 2c       	mov	r0, r14
    6692:	04 c0       	rjmp	.+8      	; 0x669c <__udivdi3+0x136>
    6694:	22 0c       	add	r2, r2
    6696:	33 1c       	adc	r3, r3
    6698:	44 1c       	adc	r4, r4
    669a:	55 1c       	adc	r5, r5
    669c:	0a 94       	dec	r0
    669e:	d2 f7       	brpl	.-12     	; 0x6694 <__udivdi3+0x12e>
    66a0:	a4 01       	movw	r20, r8
    66a2:	93 01       	movw	r18, r6
    66a4:	0e 2c       	mov	r0, r14
    66a6:	04 c0       	rjmp	.+8      	; 0x66b0 <__udivdi3+0x14a>
    66a8:	22 0f       	add	r18, r18
    66aa:	33 1f       	adc	r19, r19
    66ac:	44 1f       	adc	r20, r20
    66ae:	55 1f       	adc	r21, r21
    66b0:	0a 94       	dec	r0
    66b2:	d2 f7       	brpl	.-12     	; 0x66a8 <__udivdi3+0x142>
    66b4:	80 e2       	ldi	r24, 0x20	; 32
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	8e 19       	sub	r24, r14
    66ba:	9f 09       	sbc	r25, r15
    66bc:	6d a4       	ldd	r6, Y+45	; 0x2d
    66be:	7e a4       	ldd	r7, Y+46	; 0x2e
    66c0:	8f a4       	ldd	r8, Y+47	; 0x2f
    66c2:	98 a8       	ldd	r9, Y+48	; 0x30
    66c4:	04 c0       	rjmp	.+8      	; 0x66ce <__udivdi3+0x168>
    66c6:	96 94       	lsr	r9
    66c8:	87 94       	ror	r8
    66ca:	77 94       	ror	r7
    66cc:	67 94       	ror	r6
    66ce:	8a 95       	dec	r24
    66d0:	d2 f7       	brpl	.-12     	; 0x66c6 <__udivdi3+0x160>
    66d2:	62 2a       	or	r6, r18
    66d4:	73 2a       	or	r7, r19
    66d6:	84 2a       	or	r8, r20
    66d8:	95 2a       	or	r9, r21
    66da:	ad a4       	ldd	r10, Y+45	; 0x2d
    66dc:	be a4       	ldd	r11, Y+46	; 0x2e
    66de:	cf a4       	ldd	r12, Y+47	; 0x2f
    66e0:	d8 a8       	ldd	r13, Y+48	; 0x30
    66e2:	04 c0       	rjmp	.+8      	; 0x66ec <__udivdi3+0x186>
    66e4:	aa 0c       	add	r10, r10
    66e6:	bb 1c       	adc	r11, r11
    66e8:	cc 1c       	adc	r12, r12
    66ea:	dd 1c       	adc	r13, r13
    66ec:	ea 94       	dec	r14
    66ee:	d2 f7       	brpl	.-12     	; 0x66e4 <__udivdi3+0x17e>
    66f0:	ad a6       	std	Y+45, r10	; 0x2d
    66f2:	be a6       	std	Y+46, r11	; 0x2e
    66f4:	cf a6       	std	Y+47, r12	; 0x2f
    66f6:	d8 aa       	std	Y+48, r13	; 0x30
    66f8:	62 01       	movw	r12, r4
    66fa:	ee 24       	eor	r14, r14
    66fc:	ff 24       	eor	r15, r15
    66fe:	cd aa       	std	Y+53, r12	; 0x35
    6700:	de aa       	std	Y+54, r13	; 0x36
    6702:	ef aa       	std	Y+55, r14	; 0x37
    6704:	f8 ae       	std	Y+56, r15	; 0x38
    6706:	92 01       	movw	r18, r4
    6708:	81 01       	movw	r16, r2
    670a:	20 70       	andi	r18, 0x00	; 0
    670c:	30 70       	andi	r19, 0x00	; 0
    670e:	09 af       	std	Y+57, r16	; 0x39
    6710:	1a af       	std	Y+58, r17	; 0x3a
    6712:	2b af       	std	Y+59, r18	; 0x3b
    6714:	3c af       	std	Y+60, r19	; 0x3c
    6716:	c4 01       	movw	r24, r8
    6718:	b3 01       	movw	r22, r6
    671a:	a7 01       	movw	r20, r14
    671c:	96 01       	movw	r18, r12
    671e:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodsi4>
    6722:	7b 01       	movw	r14, r22
    6724:	8c 01       	movw	r16, r24
    6726:	c4 01       	movw	r24, r8
    6728:	b3 01       	movw	r22, r6
    672a:	2d a9       	ldd	r18, Y+53	; 0x35
    672c:	3e a9       	ldd	r19, Y+54	; 0x36
    672e:	4f a9       	ldd	r20, Y+55	; 0x37
    6730:	58 ad       	ldd	r21, Y+56	; 0x38
    6732:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodsi4>
    6736:	c9 01       	movw	r24, r18
    6738:	da 01       	movw	r26, r20
    673a:	3c 01       	movw	r6, r24
    673c:	4d 01       	movw	r8, r26
    673e:	c4 01       	movw	r24, r8
    6740:	b3 01       	movw	r22, r6
    6742:	29 ad       	ldd	r18, Y+57	; 0x39
    6744:	3a ad       	ldd	r19, Y+58	; 0x3a
    6746:	4b ad       	ldd	r20, Y+59	; 0x3b
    6748:	5c ad       	ldd	r21, Y+60	; 0x3c
    674a:	0e 94 05 41 	call	0x820a	; 0x820a <__mulsi3>
    674e:	9b 01       	movw	r18, r22
    6750:	ac 01       	movw	r20, r24
    6752:	87 01       	movw	r16, r14
    6754:	ff 24       	eor	r15, r15
    6756:	ee 24       	eor	r14, r14
    6758:	ad a4       	ldd	r10, Y+45	; 0x2d
    675a:	be a4       	ldd	r11, Y+46	; 0x2e
    675c:	cf a4       	ldd	r12, Y+47	; 0x2f
    675e:	d8 a8       	ldd	r13, Y+48	; 0x30
    6760:	c6 01       	movw	r24, r12
    6762:	aa 27       	eor	r26, r26
    6764:	bb 27       	eor	r27, r27
    6766:	57 01       	movw	r10, r14
    6768:	68 01       	movw	r12, r16
    676a:	a8 2a       	or	r10, r24
    676c:	b9 2a       	or	r11, r25
    676e:	ca 2a       	or	r12, r26
    6770:	db 2a       	or	r13, r27
    6772:	a2 16       	cp	r10, r18
    6774:	b3 06       	cpc	r11, r19
    6776:	c4 06       	cpc	r12, r20
    6778:	d5 06       	cpc	r13, r21
    677a:	e0 f4       	brcc	.+56     	; 0x67b4 <__udivdi3+0x24e>
    677c:	08 94       	sec
    677e:	61 08       	sbc	r6, r1
    6780:	71 08       	sbc	r7, r1
    6782:	81 08       	sbc	r8, r1
    6784:	91 08       	sbc	r9, r1
    6786:	a2 0c       	add	r10, r2
    6788:	b3 1c       	adc	r11, r3
    678a:	c4 1c       	adc	r12, r4
    678c:	d5 1c       	adc	r13, r5
    678e:	a2 14       	cp	r10, r2
    6790:	b3 04       	cpc	r11, r3
    6792:	c4 04       	cpc	r12, r4
    6794:	d5 04       	cpc	r13, r5
    6796:	70 f0       	brcs	.+28     	; 0x67b4 <__udivdi3+0x24e>
    6798:	a2 16       	cp	r10, r18
    679a:	b3 06       	cpc	r11, r19
    679c:	c4 06       	cpc	r12, r20
    679e:	d5 06       	cpc	r13, r21
    67a0:	48 f4       	brcc	.+18     	; 0x67b4 <__udivdi3+0x24e>
    67a2:	08 94       	sec
    67a4:	61 08       	sbc	r6, r1
    67a6:	71 08       	sbc	r7, r1
    67a8:	81 08       	sbc	r8, r1
    67aa:	91 08       	sbc	r9, r1
    67ac:	a2 0c       	add	r10, r2
    67ae:	b3 1c       	adc	r11, r3
    67b0:	c4 1c       	adc	r12, r4
    67b2:	d5 1c       	adc	r13, r5
    67b4:	a2 1a       	sub	r10, r18
    67b6:	b3 0a       	sbc	r11, r19
    67b8:	c4 0a       	sbc	r12, r20
    67ba:	d5 0a       	sbc	r13, r21
    67bc:	c6 01       	movw	r24, r12
    67be:	b5 01       	movw	r22, r10
    67c0:	2d a9       	ldd	r18, Y+53	; 0x35
    67c2:	3e a9       	ldd	r19, Y+54	; 0x36
    67c4:	4f a9       	ldd	r20, Y+55	; 0x37
    67c6:	58 ad       	ldd	r21, Y+56	; 0x38
    67c8:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodsi4>
    67cc:	7b 01       	movw	r14, r22
    67ce:	8c 01       	movw	r16, r24
    67d0:	c6 01       	movw	r24, r12
    67d2:	b5 01       	movw	r22, r10
    67d4:	2d a9       	ldd	r18, Y+53	; 0x35
    67d6:	3e a9       	ldd	r19, Y+54	; 0x36
    67d8:	4f a9       	ldd	r20, Y+55	; 0x37
    67da:	58 ad       	ldd	r21, Y+56	; 0x38
    67dc:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodsi4>
    67e0:	c9 01       	movw	r24, r18
    67e2:	da 01       	movw	r26, r20
    67e4:	5c 01       	movw	r10, r24
    67e6:	6d 01       	movw	r12, r26
    67e8:	c6 01       	movw	r24, r12
    67ea:	b5 01       	movw	r22, r10
    67ec:	29 ad       	ldd	r18, Y+57	; 0x39
    67ee:	3a ad       	ldd	r19, Y+58	; 0x3a
    67f0:	4b ad       	ldd	r20, Y+59	; 0x3b
    67f2:	5c ad       	ldd	r21, Y+60	; 0x3c
    67f4:	0e 94 05 41 	call	0x820a	; 0x820a <__mulsi3>
    67f8:	9b 01       	movw	r18, r22
    67fa:	ac 01       	movw	r20, r24
    67fc:	87 01       	movw	r16, r14
    67fe:	ff 24       	eor	r15, r15
    6800:	ee 24       	eor	r14, r14
    6802:	8d a5       	ldd	r24, Y+45	; 0x2d
    6804:	9e a5       	ldd	r25, Y+46	; 0x2e
    6806:	af a5       	ldd	r26, Y+47	; 0x2f
    6808:	b8 a9       	ldd	r27, Y+48	; 0x30
    680a:	a0 70       	andi	r26, 0x00	; 0
    680c:	b0 70       	andi	r27, 0x00	; 0
    680e:	e8 2a       	or	r14, r24
    6810:	f9 2a       	or	r15, r25
    6812:	0a 2b       	or	r16, r26
    6814:	1b 2b       	or	r17, r27
    6816:	e2 16       	cp	r14, r18
    6818:	f3 06       	cpc	r15, r19
    681a:	04 07       	cpc	r16, r20
    681c:	15 07       	cpc	r17, r21
    681e:	c0 f4       	brcc	.+48     	; 0x6850 <__udivdi3+0x2ea>
    6820:	08 94       	sec
    6822:	a1 08       	sbc	r10, r1
    6824:	b1 08       	sbc	r11, r1
    6826:	c1 08       	sbc	r12, r1
    6828:	d1 08       	sbc	r13, r1
    682a:	e2 0c       	add	r14, r2
    682c:	f3 1c       	adc	r15, r3
    682e:	04 1d       	adc	r16, r4
    6830:	15 1d       	adc	r17, r5
    6832:	e2 14       	cp	r14, r2
    6834:	f3 04       	cpc	r15, r3
    6836:	04 05       	cpc	r16, r4
    6838:	15 05       	cpc	r17, r5
    683a:	50 f0       	brcs	.+20     	; 0x6850 <__udivdi3+0x2ea>
    683c:	e2 16       	cp	r14, r18
    683e:	f3 06       	cpc	r15, r19
    6840:	04 07       	cpc	r16, r20
    6842:	15 07       	cpc	r17, r21
    6844:	28 f4       	brcc	.+10     	; 0x6850 <__udivdi3+0x2ea>
    6846:	08 94       	sec
    6848:	a1 08       	sbc	r10, r1
    684a:	b1 08       	sbc	r11, r1
    684c:	c1 08       	sbc	r12, r1
    684e:	d1 08       	sbc	r13, r1
    6850:	d3 01       	movw	r26, r6
    6852:	99 27       	eor	r25, r25
    6854:	88 27       	eor	r24, r24
    6856:	86 01       	movw	r16, r12
    6858:	75 01       	movw	r14, r10
    685a:	e8 2a       	or	r14, r24
    685c:	f9 2a       	or	r15, r25
    685e:	0a 2b       	or	r16, r26
    6860:	1b 2b       	or	r17, r27
    6862:	e9 aa       	std	Y+49, r14	; 0x31
    6864:	fa aa       	std	Y+50, r15	; 0x32
    6866:	0b ab       	std	Y+51, r16	; 0x33
    6868:	1c ab       	std	Y+52, r17	; 0x34
    686a:	cf c4       	rjmp	.+2462   	; 0x720a <__udivdi3+0xca4>
    686c:	21 14       	cp	r2, r1
    686e:	31 04       	cpc	r3, r1
    6870:	41 04       	cpc	r4, r1
    6872:	51 04       	cpc	r5, r1
    6874:	71 f4       	brne	.+28     	; 0x6892 <__udivdi3+0x32c>
    6876:	61 e0       	ldi	r22, 0x01	; 1
    6878:	70 e0       	ldi	r23, 0x00	; 0
    687a:	80 e0       	ldi	r24, 0x00	; 0
    687c:	90 e0       	ldi	r25, 0x00	; 0
    687e:	20 e0       	ldi	r18, 0x00	; 0
    6880:	30 e0       	ldi	r19, 0x00	; 0
    6882:	40 e0       	ldi	r20, 0x00	; 0
    6884:	50 e0       	ldi	r21, 0x00	; 0
    6886:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodsi4>
    688a:	c9 01       	movw	r24, r18
    688c:	da 01       	movw	r26, r20
    688e:	1c 01       	movw	r2, r24
    6890:	2d 01       	movw	r4, r26
    6892:	00 e0       	ldi	r16, 0x00	; 0
    6894:	20 16       	cp	r2, r16
    6896:	00 e0       	ldi	r16, 0x00	; 0
    6898:	30 06       	cpc	r3, r16
    689a:	01 e0       	ldi	r16, 0x01	; 1
    689c:	40 06       	cpc	r4, r16
    689e:	00 e0       	ldi	r16, 0x00	; 0
    68a0:	50 06       	cpc	r5, r16
    68a2:	88 f4       	brcc	.+34     	; 0x68c6 <__udivdi3+0x360>
    68a4:	1f ef       	ldi	r17, 0xFF	; 255
    68a6:	21 16       	cp	r2, r17
    68a8:	31 04       	cpc	r3, r1
    68aa:	41 04       	cpc	r4, r1
    68ac:	51 04       	cpc	r5, r1
    68ae:	31 f0       	breq	.+12     	; 0x68bc <__udivdi3+0x356>
    68b0:	28 f0       	brcs	.+10     	; 0x68bc <__udivdi3+0x356>
    68b2:	48 e0       	ldi	r20, 0x08	; 8
    68b4:	50 e0       	ldi	r21, 0x00	; 0
    68b6:	60 e0       	ldi	r22, 0x00	; 0
    68b8:	70 e0       	ldi	r23, 0x00	; 0
    68ba:	17 c0       	rjmp	.+46     	; 0x68ea <__udivdi3+0x384>
    68bc:	40 e0       	ldi	r20, 0x00	; 0
    68be:	50 e0       	ldi	r21, 0x00	; 0
    68c0:	60 e0       	ldi	r22, 0x00	; 0
    68c2:	70 e0       	ldi	r23, 0x00	; 0
    68c4:	12 c0       	rjmp	.+36     	; 0x68ea <__udivdi3+0x384>
    68c6:	20 e0       	ldi	r18, 0x00	; 0
    68c8:	22 16       	cp	r2, r18
    68ca:	20 e0       	ldi	r18, 0x00	; 0
    68cc:	32 06       	cpc	r3, r18
    68ce:	20 e0       	ldi	r18, 0x00	; 0
    68d0:	42 06       	cpc	r4, r18
    68d2:	21 e0       	ldi	r18, 0x01	; 1
    68d4:	52 06       	cpc	r5, r18
    68d6:	28 f0       	brcs	.+10     	; 0x68e2 <__udivdi3+0x37c>
    68d8:	48 e1       	ldi	r20, 0x18	; 24
    68da:	50 e0       	ldi	r21, 0x00	; 0
    68dc:	60 e0       	ldi	r22, 0x00	; 0
    68de:	70 e0       	ldi	r23, 0x00	; 0
    68e0:	04 c0       	rjmp	.+8      	; 0x68ea <__udivdi3+0x384>
    68e2:	40 e1       	ldi	r20, 0x10	; 16
    68e4:	50 e0       	ldi	r21, 0x00	; 0
    68e6:	60 e0       	ldi	r22, 0x00	; 0
    68e8:	70 e0       	ldi	r23, 0x00	; 0
    68ea:	d2 01       	movw	r26, r4
    68ec:	c1 01       	movw	r24, r2
    68ee:	04 2e       	mov	r0, r20
    68f0:	04 c0       	rjmp	.+8      	; 0x68fa <__udivdi3+0x394>
    68f2:	b6 95       	lsr	r27
    68f4:	a7 95       	ror	r26
    68f6:	97 95       	ror	r25
    68f8:	87 95       	ror	r24
    68fa:	0a 94       	dec	r0
    68fc:	d2 f7       	brpl	.-12     	; 0x68f2 <__udivdi3+0x38c>
    68fe:	84 5e       	subi	r24, 0xE4	; 228
    6900:	9f 4d       	sbci	r25, 0xDF	; 223
    6902:	dc 01       	movw	r26, r24
    6904:	2c 91       	ld	r18, X
    6906:	e0 e2       	ldi	r30, 0x20	; 32
    6908:	ee 2e       	mov	r14, r30
    690a:	f1 2c       	mov	r15, r1
    690c:	01 2d       	mov	r16, r1
    690e:	11 2d       	mov	r17, r1
    6910:	d8 01       	movw	r26, r16
    6912:	c7 01       	movw	r24, r14
    6914:	84 1b       	sub	r24, r20
    6916:	95 0b       	sbc	r25, r21
    6918:	a6 0b       	sbc	r26, r22
    691a:	b7 0b       	sbc	r27, r23
    691c:	82 1b       	sub	r24, r18
    691e:	91 09       	sbc	r25, r1
    6920:	a1 09       	sbc	r26, r1
    6922:	b1 09       	sbc	r27, r1
    6924:	00 97       	sbiw	r24, 0x00	; 0
    6926:	a1 05       	cpc	r26, r1
    6928:	b1 05       	cpc	r27, r1
    692a:	61 f4       	brne	.+24     	; 0x6944 <__udivdi3+0x3de>
    692c:	64 01       	movw	r12, r8
    692e:	53 01       	movw	r10, r6
    6930:	a2 18       	sub	r10, r2
    6932:	b3 08       	sbc	r11, r3
    6934:	c4 08       	sbc	r12, r4
    6936:	d5 08       	sbc	r13, r5
    6938:	31 e0       	ldi	r19, 0x01	; 1
    693a:	63 2e       	mov	r6, r19
    693c:	71 2c       	mov	r7, r1
    693e:	81 2c       	mov	r8, r1
    6940:	91 2c       	mov	r9, r1
    6942:	1e c1       	rjmp	.+572    	; 0x6b80 <__udivdi3+0x61a>
    6944:	6f 96       	adiw	r28, 0x1f	; 31
    6946:	8f af       	std	Y+63, r24	; 0x3f
    6948:	6f 97       	sbiw	r28, 0x1f	; 31
    694a:	08 2e       	mov	r0, r24
    694c:	04 c0       	rjmp	.+8      	; 0x6956 <__udivdi3+0x3f0>
    694e:	22 0c       	add	r2, r2
    6950:	33 1c       	adc	r3, r3
    6952:	44 1c       	adc	r4, r4
    6954:	55 1c       	adc	r5, r5
    6956:	0a 94       	dec	r0
    6958:	d2 f7       	brpl	.-12     	; 0x694e <__udivdi3+0x3e8>
    695a:	ee 2d       	mov	r30, r14
    695c:	e8 1b       	sub	r30, r24
    695e:	64 01       	movw	r12, r8
    6960:	53 01       	movw	r10, r6
    6962:	0e 2e       	mov	r0, r30
    6964:	04 c0       	rjmp	.+8      	; 0x696e <__udivdi3+0x408>
    6966:	d6 94       	lsr	r13
    6968:	c7 94       	ror	r12
    696a:	b7 94       	ror	r11
    696c:	a7 94       	ror	r10
    696e:	0a 94       	dec	r0
    6970:	d2 f7       	brpl	.-12     	; 0x6966 <__udivdi3+0x400>
    6972:	a4 01       	movw	r20, r8
    6974:	93 01       	movw	r18, r6
    6976:	6f 96       	adiw	r28, 0x1f	; 31
    6978:	0f ac       	ldd	r0, Y+63	; 0x3f
    697a:	6f 97       	sbiw	r28, 0x1f	; 31
    697c:	04 c0       	rjmp	.+8      	; 0x6986 <__udivdi3+0x420>
    697e:	22 0f       	add	r18, r18
    6980:	33 1f       	adc	r19, r19
    6982:	44 1f       	adc	r20, r20
    6984:	55 1f       	adc	r21, r21
    6986:	0a 94       	dec	r0
    6988:	d2 f7       	brpl	.-12     	; 0x697e <__udivdi3+0x418>
    698a:	6d a4       	ldd	r6, Y+45	; 0x2d
    698c:	7e a4       	ldd	r7, Y+46	; 0x2e
    698e:	8f a4       	ldd	r8, Y+47	; 0x2f
    6990:	98 a8       	ldd	r9, Y+48	; 0x30
    6992:	0e 2e       	mov	r0, r30
    6994:	04 c0       	rjmp	.+8      	; 0x699e <__udivdi3+0x438>
    6996:	96 94       	lsr	r9
    6998:	87 94       	ror	r8
    699a:	77 94       	ror	r7
    699c:	67 94       	ror	r6
    699e:	0a 94       	dec	r0
    69a0:	d2 f7       	brpl	.-12     	; 0x6996 <__udivdi3+0x430>
    69a2:	84 01       	movw	r16, r8
    69a4:	73 01       	movw	r14, r6
    69a6:	e2 2a       	or	r14, r18
    69a8:	f3 2a       	or	r15, r19
    69aa:	04 2b       	or	r16, r20
    69ac:	15 2b       	or	r17, r21
    69ae:	e9 a6       	std	Y+41, r14	; 0x29
    69b0:	fa a6       	std	Y+42, r15	; 0x2a
    69b2:	0b a7       	std	Y+43, r16	; 0x2b
    69b4:	1c a7       	std	Y+44, r17	; 0x2c
    69b6:	32 01       	movw	r6, r4
    69b8:	88 24       	eor	r8, r8
    69ba:	99 24       	eor	r9, r9
    69bc:	92 01       	movw	r18, r4
    69be:	81 01       	movw	r16, r2
    69c0:	20 70       	andi	r18, 0x00	; 0
    69c2:	30 70       	andi	r19, 0x00	; 0
    69c4:	21 96       	adiw	r28, 0x01	; 1
    69c6:	0c af       	std	Y+60, r16	; 0x3c
    69c8:	1d af       	std	Y+61, r17	; 0x3d
    69ca:	2e af       	std	Y+62, r18	; 0x3e
    69cc:	3f af       	std	Y+63, r19	; 0x3f
    69ce:	21 97       	sbiw	r28, 0x01	; 1
    69d0:	c6 01       	movw	r24, r12
    69d2:	b5 01       	movw	r22, r10
    69d4:	a4 01       	movw	r20, r8
    69d6:	93 01       	movw	r18, r6
    69d8:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodsi4>
    69dc:	7b 01       	movw	r14, r22
    69de:	8c 01       	movw	r16, r24
    69e0:	c6 01       	movw	r24, r12
    69e2:	b5 01       	movw	r22, r10
    69e4:	a4 01       	movw	r20, r8
    69e6:	93 01       	movw	r18, r6
    69e8:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodsi4>
    69ec:	c9 01       	movw	r24, r18
    69ee:	da 01       	movw	r26, r20
    69f0:	25 96       	adiw	r28, 0x05	; 5
    69f2:	8c af       	std	Y+60, r24	; 0x3c
    69f4:	9d af       	std	Y+61, r25	; 0x3d
    69f6:	ae af       	std	Y+62, r26	; 0x3e
    69f8:	bf af       	std	Y+63, r27	; 0x3f
    69fa:	25 97       	sbiw	r28, 0x05	; 5
    69fc:	bc 01       	movw	r22, r24
    69fe:	cd 01       	movw	r24, r26
    6a00:	21 96       	adiw	r28, 0x01	; 1
    6a02:	2c ad       	ldd	r18, Y+60	; 0x3c
    6a04:	3d ad       	ldd	r19, Y+61	; 0x3d
    6a06:	4e ad       	ldd	r20, Y+62	; 0x3e
    6a08:	5f ad       	ldd	r21, Y+63	; 0x3f
    6a0a:	21 97       	sbiw	r28, 0x01	; 1
    6a0c:	0e 94 05 41 	call	0x820a	; 0x820a <__mulsi3>
    6a10:	9b 01       	movw	r18, r22
    6a12:	ac 01       	movw	r20, r24
    6a14:	87 01       	movw	r16, r14
    6a16:	ff 24       	eor	r15, r15
    6a18:	ee 24       	eor	r14, r14
    6a1a:	a9 a4       	ldd	r10, Y+41	; 0x29
    6a1c:	ba a4       	ldd	r11, Y+42	; 0x2a
    6a1e:	cb a4       	ldd	r12, Y+43	; 0x2b
    6a20:	dc a4       	ldd	r13, Y+44	; 0x2c
    6a22:	c6 01       	movw	r24, r12
    6a24:	aa 27       	eor	r26, r26
    6a26:	bb 27       	eor	r27, r27
    6a28:	5c 01       	movw	r10, r24
    6a2a:	6d 01       	movw	r12, r26
    6a2c:	ae 28       	or	r10, r14
    6a2e:	bf 28       	or	r11, r15
    6a30:	c0 2a       	or	r12, r16
    6a32:	d1 2a       	or	r13, r17
    6a34:	a2 16       	cp	r10, r18
    6a36:	b3 06       	cpc	r11, r19
    6a38:	c4 06       	cpc	r12, r20
    6a3a:	d5 06       	cpc	r13, r21
    6a3c:	60 f5       	brcc	.+88     	; 0x6a96 <__udivdi3+0x530>
    6a3e:	25 96       	adiw	r28, 0x05	; 5
    6a40:	6c ad       	ldd	r22, Y+60	; 0x3c
    6a42:	7d ad       	ldd	r23, Y+61	; 0x3d
    6a44:	8e ad       	ldd	r24, Y+62	; 0x3e
    6a46:	9f ad       	ldd	r25, Y+63	; 0x3f
    6a48:	25 97       	sbiw	r28, 0x05	; 5
    6a4a:	61 50       	subi	r22, 0x01	; 1
    6a4c:	70 40       	sbci	r23, 0x00	; 0
    6a4e:	80 40       	sbci	r24, 0x00	; 0
    6a50:	90 40       	sbci	r25, 0x00	; 0
    6a52:	25 96       	adiw	r28, 0x05	; 5
    6a54:	6c af       	std	Y+60, r22	; 0x3c
    6a56:	7d af       	std	Y+61, r23	; 0x3d
    6a58:	8e af       	std	Y+62, r24	; 0x3e
    6a5a:	9f af       	std	Y+63, r25	; 0x3f
    6a5c:	25 97       	sbiw	r28, 0x05	; 5
    6a5e:	a2 0c       	add	r10, r2
    6a60:	b3 1c       	adc	r11, r3
    6a62:	c4 1c       	adc	r12, r4
    6a64:	d5 1c       	adc	r13, r5
    6a66:	a2 14       	cp	r10, r2
    6a68:	b3 04       	cpc	r11, r3
    6a6a:	c4 04       	cpc	r12, r4
    6a6c:	d5 04       	cpc	r13, r5
    6a6e:	98 f0       	brcs	.+38     	; 0x6a96 <__udivdi3+0x530>
    6a70:	a2 16       	cp	r10, r18
    6a72:	b3 06       	cpc	r11, r19
    6a74:	c4 06       	cpc	r12, r20
    6a76:	d5 06       	cpc	r13, r21
    6a78:	70 f4       	brcc	.+28     	; 0x6a96 <__udivdi3+0x530>
    6a7a:	61 50       	subi	r22, 0x01	; 1
    6a7c:	70 40       	sbci	r23, 0x00	; 0
    6a7e:	80 40       	sbci	r24, 0x00	; 0
    6a80:	90 40       	sbci	r25, 0x00	; 0
    6a82:	25 96       	adiw	r28, 0x05	; 5
    6a84:	6c af       	std	Y+60, r22	; 0x3c
    6a86:	7d af       	std	Y+61, r23	; 0x3d
    6a88:	8e af       	std	Y+62, r24	; 0x3e
    6a8a:	9f af       	std	Y+63, r25	; 0x3f
    6a8c:	25 97       	sbiw	r28, 0x05	; 5
    6a8e:	a2 0c       	add	r10, r2
    6a90:	b3 1c       	adc	r11, r3
    6a92:	c4 1c       	adc	r12, r4
    6a94:	d5 1c       	adc	r13, r5
    6a96:	a2 1a       	sub	r10, r18
    6a98:	b3 0a       	sbc	r11, r19
    6a9a:	c4 0a       	sbc	r12, r20
    6a9c:	d5 0a       	sbc	r13, r21
    6a9e:	c6 01       	movw	r24, r12
    6aa0:	b5 01       	movw	r22, r10
    6aa2:	a4 01       	movw	r20, r8
    6aa4:	93 01       	movw	r18, r6
    6aa6:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodsi4>
    6aaa:	7b 01       	movw	r14, r22
    6aac:	8c 01       	movw	r16, r24
    6aae:	c6 01       	movw	r24, r12
    6ab0:	b5 01       	movw	r22, r10
    6ab2:	a4 01       	movw	r20, r8
    6ab4:	93 01       	movw	r18, r6
    6ab6:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodsi4>
    6aba:	c9 01       	movw	r24, r18
    6abc:	da 01       	movw	r26, r20
    6abe:	3c 01       	movw	r6, r24
    6ac0:	4d 01       	movw	r8, r26
    6ac2:	c4 01       	movw	r24, r8
    6ac4:	b3 01       	movw	r22, r6
    6ac6:	21 96       	adiw	r28, 0x01	; 1
    6ac8:	2c ad       	ldd	r18, Y+60	; 0x3c
    6aca:	3d ad       	ldd	r19, Y+61	; 0x3d
    6acc:	4e ad       	ldd	r20, Y+62	; 0x3e
    6ace:	5f ad       	ldd	r21, Y+63	; 0x3f
    6ad0:	21 97       	sbiw	r28, 0x01	; 1
    6ad2:	0e 94 05 41 	call	0x820a	; 0x820a <__mulsi3>
    6ad6:	9b 01       	movw	r18, r22
    6ad8:	ac 01       	movw	r20, r24
    6ada:	87 01       	movw	r16, r14
    6adc:	ff 24       	eor	r15, r15
    6ade:	ee 24       	eor	r14, r14
    6ae0:	89 a5       	ldd	r24, Y+41	; 0x29
    6ae2:	9a a5       	ldd	r25, Y+42	; 0x2a
    6ae4:	ab a5       	ldd	r26, Y+43	; 0x2b
    6ae6:	bc a5       	ldd	r27, Y+44	; 0x2c
    6ae8:	a0 70       	andi	r26, 0x00	; 0
    6aea:	b0 70       	andi	r27, 0x00	; 0
    6aec:	57 01       	movw	r10, r14
    6aee:	68 01       	movw	r12, r16
    6af0:	a8 2a       	or	r10, r24
    6af2:	b9 2a       	or	r11, r25
    6af4:	ca 2a       	or	r12, r26
    6af6:	db 2a       	or	r13, r27
    6af8:	a2 16       	cp	r10, r18
    6afa:	b3 06       	cpc	r11, r19
    6afc:	c4 06       	cpc	r12, r20
    6afe:	d5 06       	cpc	r13, r21
    6b00:	e0 f4       	brcc	.+56     	; 0x6b3a <__udivdi3+0x5d4>
    6b02:	08 94       	sec
    6b04:	61 08       	sbc	r6, r1
    6b06:	71 08       	sbc	r7, r1
    6b08:	81 08       	sbc	r8, r1
    6b0a:	91 08       	sbc	r9, r1
    6b0c:	a2 0c       	add	r10, r2
    6b0e:	b3 1c       	adc	r11, r3
    6b10:	c4 1c       	adc	r12, r4
    6b12:	d5 1c       	adc	r13, r5
    6b14:	a2 14       	cp	r10, r2
    6b16:	b3 04       	cpc	r11, r3
    6b18:	c4 04       	cpc	r12, r4
    6b1a:	d5 04       	cpc	r13, r5
    6b1c:	70 f0       	brcs	.+28     	; 0x6b3a <__udivdi3+0x5d4>
    6b1e:	a2 16       	cp	r10, r18
    6b20:	b3 06       	cpc	r11, r19
    6b22:	c4 06       	cpc	r12, r20
    6b24:	d5 06       	cpc	r13, r21
    6b26:	48 f4       	brcc	.+18     	; 0x6b3a <__udivdi3+0x5d4>
    6b28:	08 94       	sec
    6b2a:	61 08       	sbc	r6, r1
    6b2c:	71 08       	sbc	r7, r1
    6b2e:	81 08       	sbc	r8, r1
    6b30:	91 08       	sbc	r9, r1
    6b32:	a2 0c       	add	r10, r2
    6b34:	b3 1c       	adc	r11, r3
    6b36:	c4 1c       	adc	r12, r4
    6b38:	d5 1c       	adc	r13, r5
    6b3a:	8d a5       	ldd	r24, Y+45	; 0x2d
    6b3c:	9e a5       	ldd	r25, Y+46	; 0x2e
    6b3e:	af a5       	ldd	r26, Y+47	; 0x2f
    6b40:	b8 a9       	ldd	r27, Y+48	; 0x30
    6b42:	6f 96       	adiw	r28, 0x1f	; 31
    6b44:	0f ac       	ldd	r0, Y+63	; 0x3f
    6b46:	6f 97       	sbiw	r28, 0x1f	; 31
    6b48:	04 c0       	rjmp	.+8      	; 0x6b52 <__udivdi3+0x5ec>
    6b4a:	88 0f       	add	r24, r24
    6b4c:	99 1f       	adc	r25, r25
    6b4e:	aa 1f       	adc	r26, r26
    6b50:	bb 1f       	adc	r27, r27
    6b52:	0a 94       	dec	r0
    6b54:	d2 f7       	brpl	.-12     	; 0x6b4a <__udivdi3+0x5e4>
    6b56:	8d a7       	std	Y+45, r24	; 0x2d
    6b58:	9e a7       	std	Y+46, r25	; 0x2e
    6b5a:	af a7       	std	Y+47, r26	; 0x2f
    6b5c:	b8 ab       	std	Y+48, r27	; 0x30
    6b5e:	a2 1a       	sub	r10, r18
    6b60:	b3 0a       	sbc	r11, r19
    6b62:	c4 0a       	sbc	r12, r20
    6b64:	d5 0a       	sbc	r13, r21
    6b66:	25 96       	adiw	r28, 0x05	; 5
    6b68:	ec ac       	ldd	r14, Y+60	; 0x3c
    6b6a:	fd ac       	ldd	r15, Y+61	; 0x3d
    6b6c:	0e ad       	ldd	r16, Y+62	; 0x3e
    6b6e:	1f ad       	ldd	r17, Y+63	; 0x3f
    6b70:	25 97       	sbiw	r28, 0x05	; 5
    6b72:	d7 01       	movw	r26, r14
    6b74:	99 27       	eor	r25, r25
    6b76:	88 27       	eor	r24, r24
    6b78:	68 2a       	or	r6, r24
    6b7a:	79 2a       	or	r7, r25
    6b7c:	8a 2a       	or	r8, r26
    6b7e:	9b 2a       	or	r9, r27
    6b80:	82 01       	movw	r16, r4
    6b82:	22 27       	eor	r18, r18
    6b84:	33 27       	eor	r19, r19
    6b86:	29 96       	adiw	r28, 0x09	; 9
    6b88:	0c af       	std	Y+60, r16	; 0x3c
    6b8a:	1d af       	std	Y+61, r17	; 0x3d
    6b8c:	2e af       	std	Y+62, r18	; 0x3e
    6b8e:	3f af       	std	Y+63, r19	; 0x3f
    6b90:	29 97       	sbiw	r28, 0x09	; 9
    6b92:	a2 01       	movw	r20, r4
    6b94:	91 01       	movw	r18, r2
    6b96:	40 70       	andi	r20, 0x00	; 0
    6b98:	50 70       	andi	r21, 0x00	; 0
    6b9a:	2d 96       	adiw	r28, 0x0d	; 13
    6b9c:	2c af       	std	Y+60, r18	; 0x3c
    6b9e:	3d af       	std	Y+61, r19	; 0x3d
    6ba0:	4e af       	std	Y+62, r20	; 0x3e
    6ba2:	5f af       	std	Y+63, r21	; 0x3f
    6ba4:	2d 97       	sbiw	r28, 0x0d	; 13
    6ba6:	c6 01       	movw	r24, r12
    6ba8:	b5 01       	movw	r22, r10
    6baa:	29 96       	adiw	r28, 0x09	; 9
    6bac:	2c ad       	ldd	r18, Y+60	; 0x3c
    6bae:	3d ad       	ldd	r19, Y+61	; 0x3d
    6bb0:	4e ad       	ldd	r20, Y+62	; 0x3e
    6bb2:	5f ad       	ldd	r21, Y+63	; 0x3f
    6bb4:	29 97       	sbiw	r28, 0x09	; 9
    6bb6:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodsi4>
    6bba:	7b 01       	movw	r14, r22
    6bbc:	8c 01       	movw	r16, r24
    6bbe:	c6 01       	movw	r24, r12
    6bc0:	b5 01       	movw	r22, r10
    6bc2:	29 96       	adiw	r28, 0x09	; 9
    6bc4:	2c ad       	ldd	r18, Y+60	; 0x3c
    6bc6:	3d ad       	ldd	r19, Y+61	; 0x3d
    6bc8:	4e ad       	ldd	r20, Y+62	; 0x3e
    6bca:	5f ad       	ldd	r21, Y+63	; 0x3f
    6bcc:	29 97       	sbiw	r28, 0x09	; 9
    6bce:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodsi4>
    6bd2:	c9 01       	movw	r24, r18
    6bd4:	da 01       	movw	r26, r20
    6bd6:	61 96       	adiw	r28, 0x11	; 17
    6bd8:	8c af       	std	Y+60, r24	; 0x3c
    6bda:	9d af       	std	Y+61, r25	; 0x3d
    6bdc:	ae af       	std	Y+62, r26	; 0x3e
    6bde:	bf af       	std	Y+63, r27	; 0x3f
    6be0:	61 97       	sbiw	r28, 0x11	; 17
    6be2:	bc 01       	movw	r22, r24
    6be4:	cd 01       	movw	r24, r26
    6be6:	2d 96       	adiw	r28, 0x0d	; 13
    6be8:	2c ad       	ldd	r18, Y+60	; 0x3c
    6bea:	3d ad       	ldd	r19, Y+61	; 0x3d
    6bec:	4e ad       	ldd	r20, Y+62	; 0x3e
    6bee:	5f ad       	ldd	r21, Y+63	; 0x3f
    6bf0:	2d 97       	sbiw	r28, 0x0d	; 13
    6bf2:	0e 94 05 41 	call	0x820a	; 0x820a <__mulsi3>
    6bf6:	9b 01       	movw	r18, r22
    6bf8:	ac 01       	movw	r20, r24
    6bfa:	87 01       	movw	r16, r14
    6bfc:	ff 24       	eor	r15, r15
    6bfe:	ee 24       	eor	r14, r14
    6c00:	ad a4       	ldd	r10, Y+45	; 0x2d
    6c02:	be a4       	ldd	r11, Y+46	; 0x2e
    6c04:	cf a4       	ldd	r12, Y+47	; 0x2f
    6c06:	d8 a8       	ldd	r13, Y+48	; 0x30
    6c08:	c6 01       	movw	r24, r12
    6c0a:	aa 27       	eor	r26, r26
    6c0c:	bb 27       	eor	r27, r27
    6c0e:	57 01       	movw	r10, r14
    6c10:	68 01       	movw	r12, r16
    6c12:	a8 2a       	or	r10, r24
    6c14:	b9 2a       	or	r11, r25
    6c16:	ca 2a       	or	r12, r26
    6c18:	db 2a       	or	r13, r27
    6c1a:	a2 16       	cp	r10, r18
    6c1c:	b3 06       	cpc	r11, r19
    6c1e:	c4 06       	cpc	r12, r20
    6c20:	d5 06       	cpc	r13, r21
    6c22:	60 f5       	brcc	.+88     	; 0x6c7c <__udivdi3+0x716>
    6c24:	61 96       	adiw	r28, 0x11	; 17
    6c26:	6c ad       	ldd	r22, Y+60	; 0x3c
    6c28:	7d ad       	ldd	r23, Y+61	; 0x3d
    6c2a:	8e ad       	ldd	r24, Y+62	; 0x3e
    6c2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    6c2e:	61 97       	sbiw	r28, 0x11	; 17
    6c30:	61 50       	subi	r22, 0x01	; 1
    6c32:	70 40       	sbci	r23, 0x00	; 0
    6c34:	80 40       	sbci	r24, 0x00	; 0
    6c36:	90 40       	sbci	r25, 0x00	; 0
    6c38:	61 96       	adiw	r28, 0x11	; 17
    6c3a:	6c af       	std	Y+60, r22	; 0x3c
    6c3c:	7d af       	std	Y+61, r23	; 0x3d
    6c3e:	8e af       	std	Y+62, r24	; 0x3e
    6c40:	9f af       	std	Y+63, r25	; 0x3f
    6c42:	61 97       	sbiw	r28, 0x11	; 17
    6c44:	a2 0c       	add	r10, r2
    6c46:	b3 1c       	adc	r11, r3
    6c48:	c4 1c       	adc	r12, r4
    6c4a:	d5 1c       	adc	r13, r5
    6c4c:	a2 14       	cp	r10, r2
    6c4e:	b3 04       	cpc	r11, r3
    6c50:	c4 04       	cpc	r12, r4
    6c52:	d5 04       	cpc	r13, r5
    6c54:	98 f0       	brcs	.+38     	; 0x6c7c <__udivdi3+0x716>
    6c56:	a2 16       	cp	r10, r18
    6c58:	b3 06       	cpc	r11, r19
    6c5a:	c4 06       	cpc	r12, r20
    6c5c:	d5 06       	cpc	r13, r21
    6c5e:	70 f4       	brcc	.+28     	; 0x6c7c <__udivdi3+0x716>
    6c60:	61 50       	subi	r22, 0x01	; 1
    6c62:	70 40       	sbci	r23, 0x00	; 0
    6c64:	80 40       	sbci	r24, 0x00	; 0
    6c66:	90 40       	sbci	r25, 0x00	; 0
    6c68:	61 96       	adiw	r28, 0x11	; 17
    6c6a:	6c af       	std	Y+60, r22	; 0x3c
    6c6c:	7d af       	std	Y+61, r23	; 0x3d
    6c6e:	8e af       	std	Y+62, r24	; 0x3e
    6c70:	9f af       	std	Y+63, r25	; 0x3f
    6c72:	61 97       	sbiw	r28, 0x11	; 17
    6c74:	a2 0c       	add	r10, r2
    6c76:	b3 1c       	adc	r11, r3
    6c78:	c4 1c       	adc	r12, r4
    6c7a:	d5 1c       	adc	r13, r5
    6c7c:	a2 1a       	sub	r10, r18
    6c7e:	b3 0a       	sbc	r11, r19
    6c80:	c4 0a       	sbc	r12, r20
    6c82:	d5 0a       	sbc	r13, r21
    6c84:	c6 01       	movw	r24, r12
    6c86:	b5 01       	movw	r22, r10
    6c88:	29 96       	adiw	r28, 0x09	; 9
    6c8a:	2c ad       	ldd	r18, Y+60	; 0x3c
    6c8c:	3d ad       	ldd	r19, Y+61	; 0x3d
    6c8e:	4e ad       	ldd	r20, Y+62	; 0x3e
    6c90:	5f ad       	ldd	r21, Y+63	; 0x3f
    6c92:	29 97       	sbiw	r28, 0x09	; 9
    6c94:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodsi4>
    6c98:	7b 01       	movw	r14, r22
    6c9a:	8c 01       	movw	r16, r24
    6c9c:	c6 01       	movw	r24, r12
    6c9e:	b5 01       	movw	r22, r10
    6ca0:	29 96       	adiw	r28, 0x09	; 9
    6ca2:	2c ad       	ldd	r18, Y+60	; 0x3c
    6ca4:	3d ad       	ldd	r19, Y+61	; 0x3d
    6ca6:	4e ad       	ldd	r20, Y+62	; 0x3e
    6ca8:	5f ad       	ldd	r21, Y+63	; 0x3f
    6caa:	29 97       	sbiw	r28, 0x09	; 9
    6cac:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodsi4>
    6cb0:	c9 01       	movw	r24, r18
    6cb2:	da 01       	movw	r26, r20
    6cb4:	5c 01       	movw	r10, r24
    6cb6:	6d 01       	movw	r12, r26
    6cb8:	c6 01       	movw	r24, r12
    6cba:	b5 01       	movw	r22, r10
    6cbc:	2d 96       	adiw	r28, 0x0d	; 13
    6cbe:	2c ad       	ldd	r18, Y+60	; 0x3c
    6cc0:	3d ad       	ldd	r19, Y+61	; 0x3d
    6cc2:	4e ad       	ldd	r20, Y+62	; 0x3e
    6cc4:	5f ad       	ldd	r21, Y+63	; 0x3f
    6cc6:	2d 97       	sbiw	r28, 0x0d	; 13
    6cc8:	0e 94 05 41 	call	0x820a	; 0x820a <__mulsi3>
    6ccc:	9b 01       	movw	r18, r22
    6cce:	ac 01       	movw	r20, r24
    6cd0:	87 01       	movw	r16, r14
    6cd2:	ff 24       	eor	r15, r15
    6cd4:	ee 24       	eor	r14, r14
    6cd6:	8d a5       	ldd	r24, Y+45	; 0x2d
    6cd8:	9e a5       	ldd	r25, Y+46	; 0x2e
    6cda:	af a5       	ldd	r26, Y+47	; 0x2f
    6cdc:	b8 a9       	ldd	r27, Y+48	; 0x30
    6cde:	a0 70       	andi	r26, 0x00	; 0
    6ce0:	b0 70       	andi	r27, 0x00	; 0
    6ce2:	e8 2a       	or	r14, r24
    6ce4:	f9 2a       	or	r15, r25
    6ce6:	0a 2b       	or	r16, r26
    6ce8:	1b 2b       	or	r17, r27
    6cea:	e2 16       	cp	r14, r18
    6cec:	f3 06       	cpc	r15, r19
    6cee:	04 07       	cpc	r16, r20
    6cf0:	15 07       	cpc	r17, r21
    6cf2:	c0 f4       	brcc	.+48     	; 0x6d24 <__udivdi3+0x7be>
    6cf4:	08 94       	sec
    6cf6:	a1 08       	sbc	r10, r1
    6cf8:	b1 08       	sbc	r11, r1
    6cfa:	c1 08       	sbc	r12, r1
    6cfc:	d1 08       	sbc	r13, r1
    6cfe:	e2 0c       	add	r14, r2
    6d00:	f3 1c       	adc	r15, r3
    6d02:	04 1d       	adc	r16, r4
    6d04:	15 1d       	adc	r17, r5
    6d06:	e2 14       	cp	r14, r2
    6d08:	f3 04       	cpc	r15, r3
    6d0a:	04 05       	cpc	r16, r4
    6d0c:	15 05       	cpc	r17, r5
    6d0e:	50 f0       	brcs	.+20     	; 0x6d24 <__udivdi3+0x7be>
    6d10:	e2 16       	cp	r14, r18
    6d12:	f3 06       	cpc	r15, r19
    6d14:	04 07       	cpc	r16, r20
    6d16:	15 07       	cpc	r17, r21
    6d18:	28 f4       	brcc	.+10     	; 0x6d24 <__udivdi3+0x7be>
    6d1a:	08 94       	sec
    6d1c:	a1 08       	sbc	r10, r1
    6d1e:	b1 08       	sbc	r11, r1
    6d20:	c1 08       	sbc	r12, r1
    6d22:	d1 08       	sbc	r13, r1
    6d24:	61 96       	adiw	r28, 0x11	; 17
    6d26:	ec ac       	ldd	r14, Y+60	; 0x3c
    6d28:	fd ac       	ldd	r15, Y+61	; 0x3d
    6d2a:	0e ad       	ldd	r16, Y+62	; 0x3e
    6d2c:	1f ad       	ldd	r17, Y+63	; 0x3f
    6d2e:	61 97       	sbiw	r28, 0x11	; 17
    6d30:	d7 01       	movw	r26, r14
    6d32:	99 27       	eor	r25, r25
    6d34:	88 27       	eor	r24, r24
    6d36:	96 01       	movw	r18, r12
    6d38:	85 01       	movw	r16, r10
    6d3a:	08 2b       	or	r16, r24
    6d3c:	19 2b       	or	r17, r25
    6d3e:	2a 2b       	or	r18, r26
    6d40:	3b 2b       	or	r19, r27
    6d42:	09 ab       	std	Y+49, r16	; 0x31
    6d44:	1a ab       	std	Y+50, r17	; 0x32
    6d46:	2b ab       	std	Y+51, r18	; 0x33
    6d48:	3c ab       	std	Y+52, r19	; 0x34
    6d4a:	62 c2       	rjmp	.+1220   	; 0x7210 <__udivdi3+0xcaa>
    6d4c:	6e 14       	cp	r6, r14
    6d4e:	7f 04       	cpc	r7, r15
    6d50:	80 06       	cpc	r8, r16
    6d52:	91 06       	cpc	r9, r17
    6d54:	08 f4       	brcc	.+2      	; 0x6d58 <__udivdi3+0x7f2>
    6d56:	51 c2       	rjmp	.+1186   	; 0x71fa <__udivdi3+0xc94>
    6d58:	20 e0       	ldi	r18, 0x00	; 0
    6d5a:	e2 16       	cp	r14, r18
    6d5c:	20 e0       	ldi	r18, 0x00	; 0
    6d5e:	f2 06       	cpc	r15, r18
    6d60:	21 e0       	ldi	r18, 0x01	; 1
    6d62:	02 07       	cpc	r16, r18
    6d64:	20 e0       	ldi	r18, 0x00	; 0
    6d66:	12 07       	cpc	r17, r18
    6d68:	88 f4       	brcc	.+34     	; 0x6d8c <__udivdi3+0x826>
    6d6a:	3f ef       	ldi	r19, 0xFF	; 255
    6d6c:	e3 16       	cp	r14, r19
    6d6e:	f1 04       	cpc	r15, r1
    6d70:	01 05       	cpc	r16, r1
    6d72:	11 05       	cpc	r17, r1
    6d74:	31 f0       	breq	.+12     	; 0x6d82 <__udivdi3+0x81c>
    6d76:	28 f0       	brcs	.+10     	; 0x6d82 <__udivdi3+0x81c>
    6d78:	48 e0       	ldi	r20, 0x08	; 8
    6d7a:	50 e0       	ldi	r21, 0x00	; 0
    6d7c:	60 e0       	ldi	r22, 0x00	; 0
    6d7e:	70 e0       	ldi	r23, 0x00	; 0
    6d80:	17 c0       	rjmp	.+46     	; 0x6db0 <__udivdi3+0x84a>
    6d82:	40 e0       	ldi	r20, 0x00	; 0
    6d84:	50 e0       	ldi	r21, 0x00	; 0
    6d86:	60 e0       	ldi	r22, 0x00	; 0
    6d88:	70 e0       	ldi	r23, 0x00	; 0
    6d8a:	12 c0       	rjmp	.+36     	; 0x6db0 <__udivdi3+0x84a>
    6d8c:	40 e0       	ldi	r20, 0x00	; 0
    6d8e:	e4 16       	cp	r14, r20
    6d90:	40 e0       	ldi	r20, 0x00	; 0
    6d92:	f4 06       	cpc	r15, r20
    6d94:	40 e0       	ldi	r20, 0x00	; 0
    6d96:	04 07       	cpc	r16, r20
    6d98:	41 e0       	ldi	r20, 0x01	; 1
    6d9a:	14 07       	cpc	r17, r20
    6d9c:	28 f0       	brcs	.+10     	; 0x6da8 <__udivdi3+0x842>
    6d9e:	48 e1       	ldi	r20, 0x18	; 24
    6da0:	50 e0       	ldi	r21, 0x00	; 0
    6da2:	60 e0       	ldi	r22, 0x00	; 0
    6da4:	70 e0       	ldi	r23, 0x00	; 0
    6da6:	04 c0       	rjmp	.+8      	; 0x6db0 <__udivdi3+0x84a>
    6da8:	40 e1       	ldi	r20, 0x10	; 16
    6daa:	50 e0       	ldi	r21, 0x00	; 0
    6dac:	60 e0       	ldi	r22, 0x00	; 0
    6dae:	70 e0       	ldi	r23, 0x00	; 0
    6db0:	d8 01       	movw	r26, r16
    6db2:	c7 01       	movw	r24, r14
    6db4:	04 2e       	mov	r0, r20
    6db6:	04 c0       	rjmp	.+8      	; 0x6dc0 <__udivdi3+0x85a>
    6db8:	b6 95       	lsr	r27
    6dba:	a7 95       	ror	r26
    6dbc:	97 95       	ror	r25
    6dbe:	87 95       	ror	r24
    6dc0:	0a 94       	dec	r0
    6dc2:	d2 f7       	brpl	.-12     	; 0x6db8 <__udivdi3+0x852>
    6dc4:	84 5e       	subi	r24, 0xE4	; 228
    6dc6:	9f 4d       	sbci	r25, 0xDF	; 223
    6dc8:	dc 01       	movw	r26, r24
    6dca:	2c 91       	ld	r18, X
    6dcc:	30 e2       	ldi	r19, 0x20	; 32
    6dce:	a3 2e       	mov	r10, r19
    6dd0:	b1 2c       	mov	r11, r1
    6dd2:	c1 2c       	mov	r12, r1
    6dd4:	d1 2c       	mov	r13, r1
    6dd6:	d6 01       	movw	r26, r12
    6dd8:	c5 01       	movw	r24, r10
    6dda:	84 1b       	sub	r24, r20
    6ddc:	95 0b       	sbc	r25, r21
    6dde:	a6 0b       	sbc	r26, r22
    6de0:	b7 0b       	sbc	r27, r23
    6de2:	82 1b       	sub	r24, r18
    6de4:	91 09       	sbc	r25, r1
    6de6:	a1 09       	sbc	r26, r1
    6de8:	b1 09       	sbc	r27, r1
    6dea:	00 97       	sbiw	r24, 0x00	; 0
    6dec:	a1 05       	cpc	r26, r1
    6dee:	b1 05       	cpc	r27, r1
    6df0:	89 f4       	brne	.+34     	; 0x6e14 <__udivdi3+0x8ae>
    6df2:	e6 14       	cp	r14, r6
    6df4:	f7 04       	cpc	r15, r7
    6df6:	08 05       	cpc	r16, r8
    6df8:	19 05       	cpc	r17, r9
    6dfa:	08 f4       	brcc	.+2      	; 0x6dfe <__udivdi3+0x898>
    6dfc:	f2 c1       	rjmp	.+996    	; 0x71e2 <__udivdi3+0xc7c>
    6dfe:	6d a4       	ldd	r6, Y+45	; 0x2d
    6e00:	7e a4       	ldd	r7, Y+46	; 0x2e
    6e02:	8f a4       	ldd	r8, Y+47	; 0x2f
    6e04:	98 a8       	ldd	r9, Y+48	; 0x30
    6e06:	62 14       	cp	r6, r2
    6e08:	73 04       	cpc	r7, r3
    6e0a:	84 04       	cpc	r8, r4
    6e0c:	95 04       	cpc	r9, r5
    6e0e:	08 f0       	brcs	.+2      	; 0x6e12 <__udivdi3+0x8ac>
    6e10:	e8 c1       	rjmp	.+976    	; 0x71e2 <__udivdi3+0xc7c>
    6e12:	f3 c1       	rjmp	.+998    	; 0x71fa <__udivdi3+0xc94>
    6e14:	6e 96       	adiw	r28, 0x1e	; 30
    6e16:	8f af       	std	Y+63, r24	; 0x3f
    6e18:	6e 97       	sbiw	r28, 0x1e	; 30
    6e1a:	08 2e       	mov	r0, r24
    6e1c:	04 c0       	rjmp	.+8      	; 0x6e26 <__udivdi3+0x8c0>
    6e1e:	ee 0c       	add	r14, r14
    6e20:	ff 1c       	adc	r15, r15
    6e22:	00 1f       	adc	r16, r16
    6e24:	11 1f       	adc	r17, r17
    6e26:	0a 94       	dec	r0
    6e28:	d2 f7       	brpl	.-12     	; 0x6e1e <__udivdi3+0x8b8>
    6e2a:	6a 2d       	mov	r22, r10
    6e2c:	68 1b       	sub	r22, r24
    6e2e:	d2 01       	movw	r26, r4
    6e30:	c1 01       	movw	r24, r2
    6e32:	06 2e       	mov	r0, r22
    6e34:	04 c0       	rjmp	.+8      	; 0x6e3e <__udivdi3+0x8d8>
    6e36:	b6 95       	lsr	r27
    6e38:	a7 95       	ror	r26
    6e3a:	97 95       	ror	r25
    6e3c:	87 95       	ror	r24
    6e3e:	0a 94       	dec	r0
    6e40:	d2 f7       	brpl	.-12     	; 0x6e36 <__udivdi3+0x8d0>
    6e42:	5c 01       	movw	r10, r24
    6e44:	6d 01       	movw	r12, r26
    6e46:	ae 28       	or	r10, r14
    6e48:	bf 28       	or	r11, r15
    6e4a:	c0 2a       	or	r12, r16
    6e4c:	d1 2a       	or	r13, r17
    6e4e:	ad a2       	std	Y+37, r10	; 0x25
    6e50:	be a2       	std	Y+38, r11	; 0x26
    6e52:	cf a2       	std	Y+39, r12	; 0x27
    6e54:	d8 a6       	std	Y+40, r13	; 0x28
    6e56:	72 01       	movw	r14, r4
    6e58:	61 01       	movw	r12, r2
    6e5a:	6e 96       	adiw	r28, 0x1e	; 30
    6e5c:	0f ac       	ldd	r0, Y+63	; 0x3f
    6e5e:	6e 97       	sbiw	r28, 0x1e	; 30
    6e60:	04 c0       	rjmp	.+8      	; 0x6e6a <__udivdi3+0x904>
    6e62:	cc 0c       	add	r12, r12
    6e64:	dd 1c       	adc	r13, r13
    6e66:	ee 1c       	adc	r14, r14
    6e68:	ff 1c       	adc	r15, r15
    6e6a:	0a 94       	dec	r0
    6e6c:	d2 f7       	brpl	.-12     	; 0x6e62 <__udivdi3+0x8fc>
    6e6e:	c9 a2       	std	Y+33, r12	; 0x21
    6e70:	da a2       	std	Y+34, r13	; 0x22
    6e72:	eb a2       	std	Y+35, r14	; 0x23
    6e74:	fc a2       	std	Y+36, r15	; 0x24
    6e76:	64 01       	movw	r12, r8
    6e78:	53 01       	movw	r10, r6
    6e7a:	06 2e       	mov	r0, r22
    6e7c:	04 c0       	rjmp	.+8      	; 0x6e86 <__udivdi3+0x920>
    6e7e:	d6 94       	lsr	r13
    6e80:	c7 94       	ror	r12
    6e82:	b7 94       	ror	r11
    6e84:	a7 94       	ror	r10
    6e86:	0a 94       	dec	r0
    6e88:	d2 f7       	brpl	.-12     	; 0x6e7e <__udivdi3+0x918>
    6e8a:	d4 01       	movw	r26, r8
    6e8c:	c3 01       	movw	r24, r6
    6e8e:	6e 96       	adiw	r28, 0x1e	; 30
    6e90:	0f ac       	ldd	r0, Y+63	; 0x3f
    6e92:	6e 97       	sbiw	r28, 0x1e	; 30
    6e94:	04 c0       	rjmp	.+8      	; 0x6e9e <__udivdi3+0x938>
    6e96:	88 0f       	add	r24, r24
    6e98:	99 1f       	adc	r25, r25
    6e9a:	aa 1f       	adc	r26, r26
    6e9c:	bb 1f       	adc	r27, r27
    6e9e:	0a 94       	dec	r0
    6ea0:	d2 f7       	brpl	.-12     	; 0x6e96 <__udivdi3+0x930>
    6ea2:	ed a4       	ldd	r14, Y+45	; 0x2d
    6ea4:	fe a4       	ldd	r15, Y+46	; 0x2e
    6ea6:	0f a5       	ldd	r16, Y+47	; 0x2f
    6ea8:	18 a9       	ldd	r17, Y+48	; 0x30
    6eaa:	04 c0       	rjmp	.+8      	; 0x6eb4 <__udivdi3+0x94e>
    6eac:	16 95       	lsr	r17
    6eae:	07 95       	ror	r16
    6eb0:	f7 94       	ror	r15
    6eb2:	e7 94       	ror	r14
    6eb4:	6a 95       	dec	r22
    6eb6:	d2 f7       	brpl	.-12     	; 0x6eac <__udivdi3+0x946>
    6eb8:	37 01       	movw	r6, r14
    6eba:	48 01       	movw	r8, r16
    6ebc:	68 2a       	or	r6, r24
    6ebe:	79 2a       	or	r7, r25
    6ec0:	8a 2a       	or	r8, r26
    6ec2:	9b 2a       	or	r9, r27
    6ec4:	6d 8e       	std	Y+29, r6	; 0x1d
    6ec6:	7e 8e       	std	Y+30, r7	; 0x1e
    6ec8:	8f 8e       	std	Y+31, r8	; 0x1f
    6eca:	98 a2       	std	Y+32, r9	; 0x20
    6ecc:	ed a0       	ldd	r14, Y+37	; 0x25
    6ece:	fe a0       	ldd	r15, Y+38	; 0x26
    6ed0:	0f a1       	ldd	r16, Y+39	; 0x27
    6ed2:	18 a5       	ldd	r17, Y+40	; 0x28
    6ed4:	38 01       	movw	r6, r16
    6ed6:	88 24       	eor	r8, r8
    6ed8:	99 24       	eor	r9, r9
    6eda:	98 01       	movw	r18, r16
    6edc:	87 01       	movw	r16, r14
    6ede:	20 70       	andi	r18, 0x00	; 0
    6ee0:	30 70       	andi	r19, 0x00	; 0
    6ee2:	65 96       	adiw	r28, 0x15	; 21
    6ee4:	0c af       	std	Y+60, r16	; 0x3c
    6ee6:	1d af       	std	Y+61, r17	; 0x3d
    6ee8:	2e af       	std	Y+62, r18	; 0x3e
    6eea:	3f af       	std	Y+63, r19	; 0x3f
    6eec:	65 97       	sbiw	r28, 0x15	; 21
    6eee:	c6 01       	movw	r24, r12
    6ef0:	b5 01       	movw	r22, r10
    6ef2:	a4 01       	movw	r20, r8
    6ef4:	93 01       	movw	r18, r6
    6ef6:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodsi4>
    6efa:	7b 01       	movw	r14, r22
    6efc:	8c 01       	movw	r16, r24
    6efe:	c6 01       	movw	r24, r12
    6f00:	b5 01       	movw	r22, r10
    6f02:	a4 01       	movw	r20, r8
    6f04:	93 01       	movw	r18, r6
    6f06:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodsi4>
    6f0a:	c9 01       	movw	r24, r18
    6f0c:	da 01       	movw	r26, r20
    6f0e:	1c 01       	movw	r2, r24
    6f10:	2d 01       	movw	r4, r26
    6f12:	c2 01       	movw	r24, r4
    6f14:	b1 01       	movw	r22, r2
    6f16:	65 96       	adiw	r28, 0x15	; 21
    6f18:	2c ad       	ldd	r18, Y+60	; 0x3c
    6f1a:	3d ad       	ldd	r19, Y+61	; 0x3d
    6f1c:	4e ad       	ldd	r20, Y+62	; 0x3e
    6f1e:	5f ad       	ldd	r21, Y+63	; 0x3f
    6f20:	65 97       	sbiw	r28, 0x15	; 21
    6f22:	0e 94 05 41 	call	0x820a	; 0x820a <__mulsi3>
    6f26:	9b 01       	movw	r18, r22
    6f28:	ac 01       	movw	r20, r24
    6f2a:	87 01       	movw	r16, r14
    6f2c:	ff 24       	eor	r15, r15
    6f2e:	ee 24       	eor	r14, r14
    6f30:	ad 8c       	ldd	r10, Y+29	; 0x1d
    6f32:	be 8c       	ldd	r11, Y+30	; 0x1e
    6f34:	cf 8c       	ldd	r12, Y+31	; 0x1f
    6f36:	d8 a0       	ldd	r13, Y+32	; 0x20
    6f38:	c6 01       	movw	r24, r12
    6f3a:	aa 27       	eor	r26, r26
    6f3c:	bb 27       	eor	r27, r27
    6f3e:	57 01       	movw	r10, r14
    6f40:	68 01       	movw	r12, r16
    6f42:	a8 2a       	or	r10, r24
    6f44:	b9 2a       	or	r11, r25
    6f46:	ca 2a       	or	r12, r26
    6f48:	db 2a       	or	r13, r27
    6f4a:	a2 16       	cp	r10, r18
    6f4c:	b3 06       	cpc	r11, r19
    6f4e:	c4 06       	cpc	r12, r20
    6f50:	d5 06       	cpc	r13, r21
    6f52:	00 f5       	brcc	.+64     	; 0x6f94 <__udivdi3+0xa2e>
    6f54:	08 94       	sec
    6f56:	21 08       	sbc	r2, r1
    6f58:	31 08       	sbc	r3, r1
    6f5a:	41 08       	sbc	r4, r1
    6f5c:	51 08       	sbc	r5, r1
    6f5e:	ed a0       	ldd	r14, Y+37	; 0x25
    6f60:	fe a0       	ldd	r15, Y+38	; 0x26
    6f62:	0f a1       	ldd	r16, Y+39	; 0x27
    6f64:	18 a5       	ldd	r17, Y+40	; 0x28
    6f66:	ae 0c       	add	r10, r14
    6f68:	bf 1c       	adc	r11, r15
    6f6a:	c0 1e       	adc	r12, r16
    6f6c:	d1 1e       	adc	r13, r17
    6f6e:	ae 14       	cp	r10, r14
    6f70:	bf 04       	cpc	r11, r15
    6f72:	c0 06       	cpc	r12, r16
    6f74:	d1 06       	cpc	r13, r17
    6f76:	70 f0       	brcs	.+28     	; 0x6f94 <__udivdi3+0xa2e>
    6f78:	a2 16       	cp	r10, r18
    6f7a:	b3 06       	cpc	r11, r19
    6f7c:	c4 06       	cpc	r12, r20
    6f7e:	d5 06       	cpc	r13, r21
    6f80:	48 f4       	brcc	.+18     	; 0x6f94 <__udivdi3+0xa2e>
    6f82:	08 94       	sec
    6f84:	21 08       	sbc	r2, r1
    6f86:	31 08       	sbc	r3, r1
    6f88:	41 08       	sbc	r4, r1
    6f8a:	51 08       	sbc	r5, r1
    6f8c:	ae 0c       	add	r10, r14
    6f8e:	bf 1c       	adc	r11, r15
    6f90:	c0 1e       	adc	r12, r16
    6f92:	d1 1e       	adc	r13, r17
    6f94:	a2 1a       	sub	r10, r18
    6f96:	b3 0a       	sbc	r11, r19
    6f98:	c4 0a       	sbc	r12, r20
    6f9a:	d5 0a       	sbc	r13, r21
    6f9c:	c6 01       	movw	r24, r12
    6f9e:	b5 01       	movw	r22, r10
    6fa0:	a4 01       	movw	r20, r8
    6fa2:	93 01       	movw	r18, r6
    6fa4:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodsi4>
    6fa8:	7b 01       	movw	r14, r22
    6faa:	8c 01       	movw	r16, r24
    6fac:	c6 01       	movw	r24, r12
    6fae:	b5 01       	movw	r22, r10
    6fb0:	a4 01       	movw	r20, r8
    6fb2:	93 01       	movw	r18, r6
    6fb4:	0e 94 24 41 	call	0x8248	; 0x8248 <__udivmodsi4>
    6fb8:	c9 01       	movw	r24, r18
    6fba:	da 01       	movw	r26, r20
    6fbc:	3c 01       	movw	r6, r24
    6fbe:	4d 01       	movw	r8, r26
    6fc0:	c4 01       	movw	r24, r8
    6fc2:	b3 01       	movw	r22, r6
    6fc4:	65 96       	adiw	r28, 0x15	; 21
    6fc6:	2c ad       	ldd	r18, Y+60	; 0x3c
    6fc8:	3d ad       	ldd	r19, Y+61	; 0x3d
    6fca:	4e ad       	ldd	r20, Y+62	; 0x3e
    6fcc:	5f ad       	ldd	r21, Y+63	; 0x3f
    6fce:	65 97       	sbiw	r28, 0x15	; 21
    6fd0:	0e 94 05 41 	call	0x820a	; 0x820a <__mulsi3>
    6fd4:	9b 01       	movw	r18, r22
    6fd6:	ac 01       	movw	r20, r24
    6fd8:	87 01       	movw	r16, r14
    6fda:	ff 24       	eor	r15, r15
    6fdc:	ee 24       	eor	r14, r14
    6fde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6fe0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6fe2:	af 8d       	ldd	r26, Y+31	; 0x1f
    6fe4:	b8 a1       	ldd	r27, Y+32	; 0x20
    6fe6:	a0 70       	andi	r26, 0x00	; 0
    6fe8:	b0 70       	andi	r27, 0x00	; 0
    6fea:	57 01       	movw	r10, r14
    6fec:	68 01       	movw	r12, r16
    6fee:	a8 2a       	or	r10, r24
    6ff0:	b9 2a       	or	r11, r25
    6ff2:	ca 2a       	or	r12, r26
    6ff4:	db 2a       	or	r13, r27
    6ff6:	a2 16       	cp	r10, r18
    6ff8:	b3 06       	cpc	r11, r19
    6ffa:	c4 06       	cpc	r12, r20
    6ffc:	d5 06       	cpc	r13, r21
    6ffe:	00 f5       	brcc	.+64     	; 0x7040 <__udivdi3+0xada>
    7000:	08 94       	sec
    7002:	61 08       	sbc	r6, r1
    7004:	71 08       	sbc	r7, r1
    7006:	81 08       	sbc	r8, r1
    7008:	91 08       	sbc	r9, r1
    700a:	6d a1       	ldd	r22, Y+37	; 0x25
    700c:	7e a1       	ldd	r23, Y+38	; 0x26
    700e:	8f a1       	ldd	r24, Y+39	; 0x27
    7010:	98 a5       	ldd	r25, Y+40	; 0x28
    7012:	a6 0e       	add	r10, r22
    7014:	b7 1e       	adc	r11, r23
    7016:	c8 1e       	adc	r12, r24
    7018:	d9 1e       	adc	r13, r25
    701a:	a6 16       	cp	r10, r22
    701c:	b7 06       	cpc	r11, r23
    701e:	c8 06       	cpc	r12, r24
    7020:	d9 06       	cpc	r13, r25
    7022:	70 f0       	brcs	.+28     	; 0x7040 <__udivdi3+0xada>
    7024:	a2 16       	cp	r10, r18
    7026:	b3 06       	cpc	r11, r19
    7028:	c4 06       	cpc	r12, r20
    702a:	d5 06       	cpc	r13, r21
    702c:	48 f4       	brcc	.+18     	; 0x7040 <__udivdi3+0xada>
    702e:	08 94       	sec
    7030:	61 08       	sbc	r6, r1
    7032:	71 08       	sbc	r7, r1
    7034:	81 08       	sbc	r8, r1
    7036:	91 08       	sbc	r9, r1
    7038:	a6 0e       	add	r10, r22
    703a:	b7 1e       	adc	r11, r23
    703c:	c8 1e       	adc	r12, r24
    703e:	d9 1e       	adc	r13, r25
    7040:	d6 01       	movw	r26, r12
    7042:	c5 01       	movw	r24, r10
    7044:	82 1b       	sub	r24, r18
    7046:	93 0b       	sbc	r25, r19
    7048:	a4 0b       	sbc	r26, r20
    704a:	b5 0b       	sbc	r27, r21
    704c:	89 8f       	std	Y+25, r24	; 0x19
    704e:	9a 8f       	std	Y+26, r25	; 0x1a
    7050:	ab 8f       	std	Y+27, r26	; 0x1b
    7052:	bc 8f       	std	Y+28, r27	; 0x1c
    7054:	d1 01       	movw	r26, r2
    7056:	99 27       	eor	r25, r25
    7058:	88 27       	eor	r24, r24
    705a:	64 01       	movw	r12, r8
    705c:	53 01       	movw	r10, r6
    705e:	a8 2a       	or	r10, r24
    7060:	b9 2a       	or	r11, r25
    7062:	ca 2a       	or	r12, r26
    7064:	db 2a       	or	r13, r27
    7066:	a9 aa       	std	Y+49, r10	; 0x31
    7068:	ba aa       	std	Y+50, r11	; 0x32
    706a:	cb aa       	std	Y+51, r12	; 0x33
    706c:	dc aa       	std	Y+52, r13	; 0x34
    706e:	86 01       	movw	r16, r12
    7070:	75 01       	movw	r14, r10
    7072:	2f ef       	ldi	r18, 0xFF	; 255
    7074:	3f ef       	ldi	r19, 0xFF	; 255
    7076:	40 e0       	ldi	r20, 0x00	; 0
    7078:	50 e0       	ldi	r21, 0x00	; 0
    707a:	e2 22       	and	r14, r18
    707c:	f3 22       	and	r15, r19
    707e:	04 23       	and	r16, r20
    7080:	15 23       	and	r17, r21
    7082:	a6 01       	movw	r20, r12
    7084:	66 27       	eor	r22, r22
    7086:	77 27       	eor	r23, r23
    7088:	6d 96       	adiw	r28, 0x1d	; 29
    708a:	4c af       	std	Y+60, r20	; 0x3c
    708c:	5d af       	std	Y+61, r21	; 0x3d
    708e:	6e af       	std	Y+62, r22	; 0x3e
    7090:	7f af       	std	Y+63, r23	; 0x3f
    7092:	6d 97       	sbiw	r28, 0x1d	; 29
    7094:	a9 a0       	ldd	r10, Y+33	; 0x21
    7096:	ba a0       	ldd	r11, Y+34	; 0x22
    7098:	cb a0       	ldd	r12, Y+35	; 0x23
    709a:	dc a0       	ldd	r13, Y+36	; 0x24
    709c:	6f ef       	ldi	r22, 0xFF	; 255
    709e:	7f ef       	ldi	r23, 0xFF	; 255
    70a0:	80 e0       	ldi	r24, 0x00	; 0
    70a2:	90 e0       	ldi	r25, 0x00	; 0
    70a4:	a6 22       	and	r10, r22
    70a6:	b7 22       	and	r11, r23
    70a8:	c8 22       	and	r12, r24
    70aa:	d9 22       	and	r13, r25
    70ac:	89 a1       	ldd	r24, Y+33	; 0x21
    70ae:	9a a1       	ldd	r25, Y+34	; 0x22
    70b0:	ab a1       	ldd	r26, Y+35	; 0x23
    70b2:	bc a1       	ldd	r27, Y+36	; 0x24
    70b4:	1d 01       	movw	r2, r26
    70b6:	44 24       	eor	r4, r4
    70b8:	55 24       	eor	r5, r5
    70ba:	c8 01       	movw	r24, r16
    70bc:	b7 01       	movw	r22, r14
    70be:	a6 01       	movw	r20, r12
    70c0:	95 01       	movw	r18, r10
    70c2:	0e 94 05 41 	call	0x820a	; 0x820a <__mulsi3>
    70c6:	69 96       	adiw	r28, 0x19	; 25
    70c8:	6c af       	std	Y+60, r22	; 0x3c
    70ca:	7d af       	std	Y+61, r23	; 0x3d
    70cc:	8e af       	std	Y+62, r24	; 0x3e
    70ce:	9f af       	std	Y+63, r25	; 0x3f
    70d0:	69 97       	sbiw	r28, 0x19	; 25
    70d2:	c8 01       	movw	r24, r16
    70d4:	b7 01       	movw	r22, r14
    70d6:	a2 01       	movw	r20, r4
    70d8:	91 01       	movw	r18, r2
    70da:	0e 94 05 41 	call	0x820a	; 0x820a <__mulsi3>
    70de:	3b 01       	movw	r6, r22
    70e0:	4c 01       	movw	r8, r24
    70e2:	6d 96       	adiw	r28, 0x1d	; 29
    70e4:	6c ad       	ldd	r22, Y+60	; 0x3c
    70e6:	7d ad       	ldd	r23, Y+61	; 0x3d
    70e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    70ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    70ec:	6d 97       	sbiw	r28, 0x1d	; 29
    70ee:	a6 01       	movw	r20, r12
    70f0:	95 01       	movw	r18, r10
    70f2:	0e 94 05 41 	call	0x820a	; 0x820a <__mulsi3>
    70f6:	7b 01       	movw	r14, r22
    70f8:	8c 01       	movw	r16, r24
    70fa:	6d 96       	adiw	r28, 0x1d	; 29
    70fc:	6c ad       	ldd	r22, Y+60	; 0x3c
    70fe:	7d ad       	ldd	r23, Y+61	; 0x3d
    7100:	8e ad       	ldd	r24, Y+62	; 0x3e
    7102:	9f ad       	ldd	r25, Y+63	; 0x3f
    7104:	6d 97       	sbiw	r28, 0x1d	; 29
    7106:	a2 01       	movw	r20, r4
    7108:	91 01       	movw	r18, r2
    710a:	0e 94 05 41 	call	0x820a	; 0x820a <__mulsi3>
    710e:	5b 01       	movw	r10, r22
    7110:	6c 01       	movw	r12, r24
    7112:	a8 01       	movw	r20, r16
    7114:	97 01       	movw	r18, r14
    7116:	26 0d       	add	r18, r6
    7118:	37 1d       	adc	r19, r7
    711a:	48 1d       	adc	r20, r8
    711c:	59 1d       	adc	r21, r9
    711e:	69 96       	adiw	r28, 0x19	; 25
    7120:	6c ac       	ldd	r6, Y+60	; 0x3c
    7122:	7d ac       	ldd	r7, Y+61	; 0x3d
    7124:	8e ac       	ldd	r8, Y+62	; 0x3e
    7126:	9f ac       	ldd	r9, Y+63	; 0x3f
    7128:	69 97       	sbiw	r28, 0x19	; 25
    712a:	c4 01       	movw	r24, r8
    712c:	aa 27       	eor	r26, r26
    712e:	bb 27       	eor	r27, r27
    7130:	28 0f       	add	r18, r24
    7132:	39 1f       	adc	r19, r25
    7134:	4a 1f       	adc	r20, r26
    7136:	5b 1f       	adc	r21, r27
    7138:	2e 15       	cp	r18, r14
    713a:	3f 05       	cpc	r19, r15
    713c:	40 07       	cpc	r20, r16
    713e:	51 07       	cpc	r21, r17
    7140:	48 f4       	brcc	.+18     	; 0x7154 <__udivdi3+0xbee>
    7142:	e1 2c       	mov	r14, r1
    7144:	f1 2c       	mov	r15, r1
    7146:	61 e0       	ldi	r22, 0x01	; 1
    7148:	06 2f       	mov	r16, r22
    714a:	11 2d       	mov	r17, r1
    714c:	ae 0c       	add	r10, r14
    714e:	bf 1c       	adc	r11, r15
    7150:	c0 1e       	adc	r12, r16
    7152:	d1 1e       	adc	r13, r17
    7154:	ca 01       	movw	r24, r20
    7156:	aa 27       	eor	r26, r26
    7158:	bb 27       	eor	r27, r27
    715a:	bc 01       	movw	r22, r24
    715c:	cd 01       	movw	r24, r26
    715e:	6a 0d       	add	r22, r10
    7160:	7b 1d       	adc	r23, r11
    7162:	8c 1d       	adc	r24, r12
    7164:	9d 1d       	adc	r25, r13
    7166:	69 8c       	ldd	r6, Y+25	; 0x19
    7168:	7a 8c       	ldd	r7, Y+26	; 0x1a
    716a:	8b 8c       	ldd	r8, Y+27	; 0x1b
    716c:	9c 8c       	ldd	r9, Y+28	; 0x1c
    716e:	66 16       	cp	r6, r22
    7170:	77 06       	cpc	r7, r23
    7172:	88 06       	cpc	r8, r24
    7174:	99 06       	cpc	r9, r25
    7176:	40 f1       	brcs	.+80     	; 0x71c8 <__udivdi3+0xc62>
    7178:	66 15       	cp	r22, r6
    717a:	77 05       	cpc	r23, r7
    717c:	88 05       	cpc	r24, r8
    717e:	99 05       	cpc	r25, r9
    7180:	09 f0       	breq	.+2      	; 0x7184 <__udivdi3+0xc1e>
    7182:	43 c0       	rjmp	.+134    	; 0x720a <__udivdi3+0xca4>
    7184:	d9 01       	movw	r26, r18
    7186:	99 27       	eor	r25, r25
    7188:	88 27       	eor	r24, r24
    718a:	69 96       	adiw	r28, 0x19	; 25
    718c:	2c ad       	ldd	r18, Y+60	; 0x3c
    718e:	3d ad       	ldd	r19, Y+61	; 0x3d
    7190:	4e ad       	ldd	r20, Y+62	; 0x3e
    7192:	5f ad       	ldd	r21, Y+63	; 0x3f
    7194:	69 97       	sbiw	r28, 0x19	; 25
    7196:	40 70       	andi	r20, 0x00	; 0
    7198:	50 70       	andi	r21, 0x00	; 0
    719a:	82 0f       	add	r24, r18
    719c:	93 1f       	adc	r25, r19
    719e:	a4 1f       	adc	r26, r20
    71a0:	b5 1f       	adc	r27, r21
    71a2:	2d a5       	ldd	r18, Y+45	; 0x2d
    71a4:	3e a5       	ldd	r19, Y+46	; 0x2e
    71a6:	4f a5       	ldd	r20, Y+47	; 0x2f
    71a8:	58 a9       	ldd	r21, Y+48	; 0x30
    71aa:	6e 96       	adiw	r28, 0x1e	; 30
    71ac:	0f ac       	ldd	r0, Y+63	; 0x3f
    71ae:	6e 97       	sbiw	r28, 0x1e	; 30
    71b0:	04 c0       	rjmp	.+8      	; 0x71ba <__udivdi3+0xc54>
    71b2:	22 0f       	add	r18, r18
    71b4:	33 1f       	adc	r19, r19
    71b6:	44 1f       	adc	r20, r20
    71b8:	55 1f       	adc	r21, r21
    71ba:	0a 94       	dec	r0
    71bc:	d2 f7       	brpl	.-12     	; 0x71b2 <__udivdi3+0xc4c>
    71be:	28 17       	cp	r18, r24
    71c0:	39 07       	cpc	r19, r25
    71c2:	4a 07       	cpc	r20, r26
    71c4:	5b 07       	cpc	r21, r27
    71c6:	08 f5       	brcc	.+66     	; 0x720a <__udivdi3+0xca4>
    71c8:	09 a9       	ldd	r16, Y+49	; 0x31
    71ca:	1a a9       	ldd	r17, Y+50	; 0x32
    71cc:	2b a9       	ldd	r18, Y+51	; 0x33
    71ce:	3c a9       	ldd	r19, Y+52	; 0x34
    71d0:	01 50       	subi	r16, 0x01	; 1
    71d2:	10 40       	sbci	r17, 0x00	; 0
    71d4:	20 40       	sbci	r18, 0x00	; 0
    71d6:	30 40       	sbci	r19, 0x00	; 0
    71d8:	09 ab       	std	Y+49, r16	; 0x31
    71da:	1a ab       	std	Y+50, r17	; 0x32
    71dc:	2b ab       	std	Y+51, r18	; 0x33
    71de:	3c ab       	std	Y+52, r19	; 0x34
    71e0:	14 c0       	rjmp	.+40     	; 0x720a <__udivdi3+0xca4>
    71e2:	66 24       	eor	r6, r6
    71e4:	77 24       	eor	r7, r7
    71e6:	43 01       	movw	r8, r6
    71e8:	21 e0       	ldi	r18, 0x01	; 1
    71ea:	30 e0       	ldi	r19, 0x00	; 0
    71ec:	40 e0       	ldi	r20, 0x00	; 0
    71ee:	50 e0       	ldi	r21, 0x00	; 0
    71f0:	29 ab       	std	Y+49, r18	; 0x31
    71f2:	3a ab       	std	Y+50, r19	; 0x32
    71f4:	4b ab       	std	Y+51, r20	; 0x33
    71f6:	5c ab       	std	Y+52, r21	; 0x34
    71f8:	0b c0       	rjmp	.+22     	; 0x7210 <__udivdi3+0xcaa>
    71fa:	66 24       	eor	r6, r6
    71fc:	77 24       	eor	r7, r7
    71fe:	43 01       	movw	r8, r6
    7200:	19 aa       	std	Y+49, r1	; 0x31
    7202:	1a aa       	std	Y+50, r1	; 0x32
    7204:	1b aa       	std	Y+51, r1	; 0x33
    7206:	1c aa       	std	Y+52, r1	; 0x34
    7208:	03 c0       	rjmp	.+6      	; 0x7210 <__udivdi3+0xcaa>
    720a:	66 24       	eor	r6, r6
    720c:	77 24       	eor	r7, r7
    720e:	43 01       	movw	r8, r6
    7210:	fe 01       	movw	r30, r28
    7212:	71 96       	adiw	r30, 0x11	; 17
    7214:	88 e0       	ldi	r24, 0x08	; 8
    7216:	df 01       	movw	r26, r30
    7218:	1d 92       	st	X+, r1
    721a:	8a 95       	dec	r24
    721c:	e9 f7       	brne	.-6      	; 0x7218 <__udivdi3+0xcb2>
    721e:	a9 a8       	ldd	r10, Y+49	; 0x31
    7220:	ba a8       	ldd	r11, Y+50	; 0x32
    7222:	cb a8       	ldd	r12, Y+51	; 0x33
    7224:	dc a8       	ldd	r13, Y+52	; 0x34
    7226:	a9 8a       	std	Y+17, r10	; 0x11
    7228:	ba 8a       	std	Y+18, r11	; 0x12
    722a:	cb 8a       	std	Y+19, r12	; 0x13
    722c:	dc 8a       	std	Y+20, r13	; 0x14
    722e:	6d 8a       	std	Y+21, r6	; 0x15
    7230:	7e 8a       	std	Y+22, r7	; 0x16
    7232:	8f 8a       	std	Y+23, r8	; 0x17
    7234:	98 8e       	std	Y+24, r9	; 0x18
    7236:	29 a9       	ldd	r18, Y+49	; 0x31
    7238:	3a 89       	ldd	r19, Y+18	; 0x12
    723a:	4b 89       	ldd	r20, Y+19	; 0x13
    723c:	5c 89       	ldd	r21, Y+20	; 0x14
    723e:	66 2d       	mov	r22, r6
    7240:	7e 89       	ldd	r23, Y+22	; 0x16
    7242:	8f 89       	ldd	r24, Y+23	; 0x17
    7244:	98 8d       	ldd	r25, Y+24	; 0x18
    7246:	c2 5a       	subi	r28, 0xA2	; 162
    7248:	df 4f       	sbci	r29, 0xFF	; 255
    724a:	e2 e1       	ldi	r30, 0x12	; 18
    724c:	0c 94 62 41 	jmp	0x82c4	; 0x82c4 <__epilogue_restores__>

00007250 <vfprintf>:
    7250:	2f 92       	push	r2
    7252:	3f 92       	push	r3
    7254:	4f 92       	push	r4
    7256:	5f 92       	push	r5
    7258:	6f 92       	push	r6
    725a:	7f 92       	push	r7
    725c:	8f 92       	push	r8
    725e:	9f 92       	push	r9
    7260:	af 92       	push	r10
    7262:	bf 92       	push	r11
    7264:	cf 92       	push	r12
    7266:	df 92       	push	r13
    7268:	ef 92       	push	r14
    726a:	ff 92       	push	r15
    726c:	0f 93       	push	r16
    726e:	1f 93       	push	r17
    7270:	df 93       	push	r29
    7272:	cf 93       	push	r28
    7274:	cd b7       	in	r28, 0x3d	; 61
    7276:	de b7       	in	r29, 0x3e	; 62
    7278:	61 97       	sbiw	r28, 0x11	; 17
    727a:	cd bf       	out	0x3d, r28	; 61
    727c:	de bf       	out	0x3e, r29	; 62
    727e:	3c 01       	movw	r6, r24
    7280:	6e 87       	std	Y+14, r22	; 0x0e
    7282:	7f 87       	std	Y+15, r23	; 0x0f
    7284:	6a 01       	movw	r12, r20
    7286:	fc 01       	movw	r30, r24
    7288:	16 82       	std	Z+6, r1	; 0x06
    728a:	17 82       	std	Z+7, r1	; 0x07
    728c:	83 81       	ldd	r24, Z+3	; 0x03
    728e:	81 fd       	sbrc	r24, 1
    7290:	03 c0       	rjmp	.+6      	; 0x7298 <vfprintf+0x48>
    7292:	6f ef       	ldi	r22, 0xFF	; 255
    7294:	7f ef       	ldi	r23, 0xFF	; 255
    7296:	6f c3       	rjmp	.+1758   	; 0x7976 <vfprintf+0x726>
    7298:	9e 01       	movw	r18, r28
    729a:	2f 5f       	subi	r18, 0xFF	; 255
    729c:	3f 4f       	sbci	r19, 0xFF	; 255
    729e:	28 8b       	std	Y+16, r18	; 0x10
    72a0:	39 8b       	std	Y+17, r19	; 0x11
    72a2:	f3 01       	movw	r30, r6
    72a4:	23 81       	ldd	r18, Z+3	; 0x03
    72a6:	ee 85       	ldd	r30, Y+14	; 0x0e
    72a8:	ff 85       	ldd	r31, Y+15	; 0x0f
    72aa:	23 fd       	sbrc	r18, 3
    72ac:	85 91       	lpm	r24, Z+
    72ae:	23 ff       	sbrs	r18, 3
    72b0:	81 91       	ld	r24, Z+
    72b2:	ee 87       	std	Y+14, r30	; 0x0e
    72b4:	ff 87       	std	Y+15, r31	; 0x0f
    72b6:	88 23       	and	r24, r24
    72b8:	09 f4       	brne	.+2      	; 0x72bc <vfprintf+0x6c>
    72ba:	5a c3       	rjmp	.+1716   	; 0x7970 <vfprintf+0x720>
    72bc:	85 32       	cpi	r24, 0x25	; 37
    72be:	51 f4       	brne	.+20     	; 0x72d4 <vfprintf+0x84>
    72c0:	ee 85       	ldd	r30, Y+14	; 0x0e
    72c2:	ff 85       	ldd	r31, Y+15	; 0x0f
    72c4:	23 fd       	sbrc	r18, 3
    72c6:	85 91       	lpm	r24, Z+
    72c8:	23 ff       	sbrs	r18, 3
    72ca:	81 91       	ld	r24, Z+
    72cc:	ee 87       	std	Y+14, r30	; 0x0e
    72ce:	ff 87       	std	Y+15, r31	; 0x0f
    72d0:	85 32       	cpi	r24, 0x25	; 37
    72d2:	29 f4       	brne	.+10     	; 0x72de <vfprintf+0x8e>
    72d4:	90 e0       	ldi	r25, 0x00	; 0
    72d6:	b3 01       	movw	r22, r6
    72d8:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    72dc:	e2 cf       	rjmp	.-60     	; 0x72a2 <vfprintf+0x52>
    72de:	98 2f       	mov	r25, r24
    72e0:	10 e0       	ldi	r17, 0x00	; 0
    72e2:	88 24       	eor	r8, r8
    72e4:	99 24       	eor	r9, r9
    72e6:	10 32       	cpi	r17, 0x20	; 32
    72e8:	b0 f4       	brcc	.+44     	; 0x7316 <vfprintf+0xc6>
    72ea:	9b 32       	cpi	r25, 0x2B	; 43
    72ec:	69 f0       	breq	.+26     	; 0x7308 <vfprintf+0xb8>
    72ee:	9c 32       	cpi	r25, 0x2C	; 44
    72f0:	28 f4       	brcc	.+10     	; 0x72fc <vfprintf+0xac>
    72f2:	90 32       	cpi	r25, 0x20	; 32
    72f4:	51 f0       	breq	.+20     	; 0x730a <vfprintf+0xba>
    72f6:	93 32       	cpi	r25, 0x23	; 35
    72f8:	71 f4       	brne	.+28     	; 0x7316 <vfprintf+0xc6>
    72fa:	0b c0       	rjmp	.+22     	; 0x7312 <vfprintf+0xc2>
    72fc:	9d 32       	cpi	r25, 0x2D	; 45
    72fe:	39 f0       	breq	.+14     	; 0x730e <vfprintf+0xbe>
    7300:	90 33       	cpi	r25, 0x30	; 48
    7302:	49 f4       	brne	.+18     	; 0x7316 <vfprintf+0xc6>
    7304:	11 60       	ori	r17, 0x01	; 1
    7306:	28 c0       	rjmp	.+80     	; 0x7358 <vfprintf+0x108>
    7308:	12 60       	ori	r17, 0x02	; 2
    730a:	14 60       	ori	r17, 0x04	; 4
    730c:	25 c0       	rjmp	.+74     	; 0x7358 <vfprintf+0x108>
    730e:	18 60       	ori	r17, 0x08	; 8
    7310:	23 c0       	rjmp	.+70     	; 0x7358 <vfprintf+0x108>
    7312:	10 61       	ori	r17, 0x10	; 16
    7314:	21 c0       	rjmp	.+66     	; 0x7358 <vfprintf+0x108>
    7316:	17 fd       	sbrc	r17, 7
    7318:	2a c0       	rjmp	.+84     	; 0x736e <vfprintf+0x11e>
    731a:	89 2f       	mov	r24, r25
    731c:	80 53       	subi	r24, 0x30	; 48
    731e:	8a 30       	cpi	r24, 0x0A	; 10
    7320:	78 f4       	brcc	.+30     	; 0x7340 <vfprintf+0xf0>
    7322:	16 ff       	sbrs	r17, 6
    7324:	06 c0       	rjmp	.+12     	; 0x7332 <vfprintf+0xe2>
    7326:	fa e0       	ldi	r31, 0x0A	; 10
    7328:	9f 9e       	mul	r9, r31
    732a:	90 2c       	mov	r9, r0
    732c:	11 24       	eor	r1, r1
    732e:	98 0e       	add	r9, r24
    7330:	13 c0       	rjmp	.+38     	; 0x7358 <vfprintf+0x108>
    7332:	3a e0       	ldi	r19, 0x0A	; 10
    7334:	83 9e       	mul	r8, r19
    7336:	80 2c       	mov	r8, r0
    7338:	11 24       	eor	r1, r1
    733a:	88 0e       	add	r8, r24
    733c:	10 62       	ori	r17, 0x20	; 32
    733e:	0c c0       	rjmp	.+24     	; 0x7358 <vfprintf+0x108>
    7340:	9e 32       	cpi	r25, 0x2E	; 46
    7342:	21 f4       	brne	.+8      	; 0x734c <vfprintf+0xfc>
    7344:	16 fd       	sbrc	r17, 6
    7346:	14 c3       	rjmp	.+1576   	; 0x7970 <vfprintf+0x720>
    7348:	10 64       	ori	r17, 0x40	; 64
    734a:	06 c0       	rjmp	.+12     	; 0x7358 <vfprintf+0x108>
    734c:	9c 36       	cpi	r25, 0x6C	; 108
    734e:	11 f4       	brne	.+4      	; 0x7354 <vfprintf+0x104>
    7350:	10 68       	ori	r17, 0x80	; 128
    7352:	02 c0       	rjmp	.+4      	; 0x7358 <vfprintf+0x108>
    7354:	98 36       	cpi	r25, 0x68	; 104
    7356:	59 f4       	brne	.+22     	; 0x736e <vfprintf+0x11e>
    7358:	ee 85       	ldd	r30, Y+14	; 0x0e
    735a:	ff 85       	ldd	r31, Y+15	; 0x0f
    735c:	23 fd       	sbrc	r18, 3
    735e:	95 91       	lpm	r25, Z+
    7360:	23 ff       	sbrs	r18, 3
    7362:	91 91       	ld	r25, Z+
    7364:	ee 87       	std	Y+14, r30	; 0x0e
    7366:	ff 87       	std	Y+15, r31	; 0x0f
    7368:	99 23       	and	r25, r25
    736a:	09 f0       	breq	.+2      	; 0x736e <vfprintf+0x11e>
    736c:	bc cf       	rjmp	.-136    	; 0x72e6 <vfprintf+0x96>
    736e:	89 2f       	mov	r24, r25
    7370:	85 54       	subi	r24, 0x45	; 69
    7372:	83 30       	cpi	r24, 0x03	; 3
    7374:	20 f4       	brcc	.+8      	; 0x737e <vfprintf+0x12e>
    7376:	81 2f       	mov	r24, r17
    7378:	80 61       	ori	r24, 0x10	; 16
    737a:	90 5e       	subi	r25, 0xE0	; 224
    737c:	07 c0       	rjmp	.+14     	; 0x738c <vfprintf+0x13c>
    737e:	89 2f       	mov	r24, r25
    7380:	85 56       	subi	r24, 0x65	; 101
    7382:	83 30       	cpi	r24, 0x03	; 3
    7384:	08 f0       	brcs	.+2      	; 0x7388 <vfprintf+0x138>
    7386:	9f c1       	rjmp	.+830    	; 0x76c6 <vfprintf+0x476>
    7388:	81 2f       	mov	r24, r17
    738a:	8f 7e       	andi	r24, 0xEF	; 239
    738c:	86 fd       	sbrc	r24, 6
    738e:	02 c0       	rjmp	.+4      	; 0x7394 <vfprintf+0x144>
    7390:	76 e0       	ldi	r23, 0x06	; 6
    7392:	97 2e       	mov	r9, r23
    7394:	6f e3       	ldi	r22, 0x3F	; 63
    7396:	f6 2e       	mov	r15, r22
    7398:	f8 22       	and	r15, r24
    739a:	95 36       	cpi	r25, 0x65	; 101
    739c:	19 f4       	brne	.+6      	; 0x73a4 <vfprintf+0x154>
    739e:	f0 e4       	ldi	r31, 0x40	; 64
    73a0:	ff 2a       	or	r15, r31
    73a2:	07 c0       	rjmp	.+14     	; 0x73b2 <vfprintf+0x162>
    73a4:	96 36       	cpi	r25, 0x66	; 102
    73a6:	19 f4       	brne	.+6      	; 0x73ae <vfprintf+0x15e>
    73a8:	20 e8       	ldi	r18, 0x80	; 128
    73aa:	f2 2a       	or	r15, r18
    73ac:	02 c0       	rjmp	.+4      	; 0x73b2 <vfprintf+0x162>
    73ae:	91 10       	cpse	r9, r1
    73b0:	9a 94       	dec	r9
    73b2:	f7 fe       	sbrs	r15, 7
    73b4:	0a c0       	rjmp	.+20     	; 0x73ca <vfprintf+0x17a>
    73b6:	3b e3       	ldi	r19, 0x3B	; 59
    73b8:	39 15       	cp	r19, r9
    73ba:	18 f4       	brcc	.+6      	; 0x73c2 <vfprintf+0x172>
    73bc:	5c e3       	ldi	r21, 0x3C	; 60
    73be:	b5 2e       	mov	r11, r21
    73c0:	02 c0       	rjmp	.+4      	; 0x73c6 <vfprintf+0x176>
    73c2:	b9 2c       	mov	r11, r9
    73c4:	b3 94       	inc	r11
    73c6:	27 e0       	ldi	r18, 0x07	; 7
    73c8:	09 c0       	rjmp	.+18     	; 0x73dc <vfprintf+0x18c>
    73ca:	47 e0       	ldi	r20, 0x07	; 7
    73cc:	49 15       	cp	r20, r9
    73ce:	20 f4       	brcc	.+8      	; 0x73d8 <vfprintf+0x188>
    73d0:	bb 24       	eor	r11, r11
    73d2:	47 e0       	ldi	r20, 0x07	; 7
    73d4:	94 2e       	mov	r9, r20
    73d6:	f7 cf       	rjmp	.-18     	; 0x73c6 <vfprintf+0x176>
    73d8:	29 2d       	mov	r18, r9
    73da:	bb 24       	eor	r11, r11
    73dc:	c6 01       	movw	r24, r12
    73de:	04 96       	adiw	r24, 0x04	; 4
    73e0:	8c 87       	std	Y+12, r24	; 0x0c
    73e2:	9d 87       	std	Y+13, r25	; 0x0d
    73e4:	f6 01       	movw	r30, r12
    73e6:	60 81       	ld	r22, Z
    73e8:	71 81       	ldd	r23, Z+1	; 0x01
    73ea:	82 81       	ldd	r24, Z+2	; 0x02
    73ec:	93 81       	ldd	r25, Z+3	; 0x03
    73ee:	ae 01       	movw	r20, r28
    73f0:	4f 5f       	subi	r20, 0xFF	; 255
    73f2:	5f 4f       	sbci	r21, 0xFF	; 255
    73f4:	0b 2d       	mov	r16, r11
    73f6:	0e 94 09 43 	call	0x8612	; 0x8612 <__ftoa_engine>
    73fa:	6c 01       	movw	r12, r24
    73fc:	09 81       	ldd	r16, Y+1	; 0x01
    73fe:	20 2e       	mov	r2, r16
    7400:	33 24       	eor	r3, r3
    7402:	00 ff       	sbrs	r16, 0
    7404:	04 c0       	rjmp	.+8      	; 0x740e <vfprintf+0x1be>
    7406:	03 fd       	sbrc	r16, 3
    7408:	02 c0       	rjmp	.+4      	; 0x740e <vfprintf+0x1be>
    740a:	1d e2       	ldi	r17, 0x2D	; 45
    740c:	09 c0       	rjmp	.+18     	; 0x7420 <vfprintf+0x1d0>
    740e:	f1 fe       	sbrs	r15, 1
    7410:	02 c0       	rjmp	.+4      	; 0x7416 <vfprintf+0x1c6>
    7412:	1b e2       	ldi	r17, 0x2B	; 43
    7414:	05 c0       	rjmp	.+10     	; 0x7420 <vfprintf+0x1d0>
    7416:	f2 fc       	sbrc	r15, 2
    7418:	02 c0       	rjmp	.+4      	; 0x741e <vfprintf+0x1ce>
    741a:	10 e0       	ldi	r17, 0x00	; 0
    741c:	01 c0       	rjmp	.+2      	; 0x7420 <vfprintf+0x1d0>
    741e:	10 e2       	ldi	r17, 0x20	; 32
    7420:	c1 01       	movw	r24, r2
    7422:	8c 70       	andi	r24, 0x0C	; 12
    7424:	90 70       	andi	r25, 0x00	; 0
    7426:	89 2b       	or	r24, r25
    7428:	b9 f1       	breq	.+110    	; 0x7498 <vfprintf+0x248>
    742a:	11 23       	and	r17, r17
    742c:	11 f4       	brne	.+4      	; 0x7432 <vfprintf+0x1e2>
    742e:	83 e0       	ldi	r24, 0x03	; 3
    7430:	01 c0       	rjmp	.+2      	; 0x7434 <vfprintf+0x1e4>
    7432:	84 e0       	ldi	r24, 0x04	; 4
    7434:	88 15       	cp	r24, r8
    7436:	10 f0       	brcs	.+4      	; 0x743c <vfprintf+0x1ec>
    7438:	88 24       	eor	r8, r8
    743a:	0a c0       	rjmp	.+20     	; 0x7450 <vfprintf+0x200>
    743c:	88 1a       	sub	r8, r24
    743e:	f3 fc       	sbrc	r15, 3
    7440:	07 c0       	rjmp	.+14     	; 0x7450 <vfprintf+0x200>
    7442:	80 e2       	ldi	r24, 0x20	; 32
    7444:	90 e0       	ldi	r25, 0x00	; 0
    7446:	b3 01       	movw	r22, r6
    7448:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    744c:	8a 94       	dec	r8
    744e:	c9 f7       	brne	.-14     	; 0x7442 <vfprintf+0x1f2>
    7450:	11 23       	and	r17, r17
    7452:	29 f0       	breq	.+10     	; 0x745e <vfprintf+0x20e>
    7454:	81 2f       	mov	r24, r17
    7456:	90 e0       	ldi	r25, 0x00	; 0
    7458:	b3 01       	movw	r22, r6
    745a:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    745e:	23 fe       	sbrs	r2, 3
    7460:	03 c0       	rjmp	.+6      	; 0x7468 <vfprintf+0x218>
    7462:	03 e3       	ldi	r16, 0x33	; 51
    7464:	12 e0       	ldi	r17, 0x02	; 2
    7466:	0e c0       	rjmp	.+28     	; 0x7484 <vfprintf+0x234>
    7468:	07 e3       	ldi	r16, 0x37	; 55
    746a:	12 e0       	ldi	r17, 0x02	; 2
    746c:	0b c0       	rjmp	.+22     	; 0x7484 <vfprintf+0x234>
    746e:	e1 14       	cp	r14, r1
    7470:	f1 04       	cpc	r15, r1
    7472:	09 f0       	breq	.+2      	; 0x7476 <vfprintf+0x226>
    7474:	80 52       	subi	r24, 0x20	; 32
    7476:	90 e0       	ldi	r25, 0x00	; 0
    7478:	b3 01       	movw	r22, r6
    747a:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    747e:	0f 5f       	subi	r16, 0xFF	; 255
    7480:	1f 4f       	sbci	r17, 0xFF	; 255
    7482:	05 c0       	rjmp	.+10     	; 0x748e <vfprintf+0x23e>
    7484:	ef 2c       	mov	r14, r15
    7486:	ff 24       	eor	r15, r15
    7488:	f0 e1       	ldi	r31, 0x10	; 16
    748a:	ef 22       	and	r14, r31
    748c:	ff 24       	eor	r15, r15
    748e:	f8 01       	movw	r30, r16
    7490:	84 91       	lpm	r24, Z+
    7492:	88 23       	and	r24, r24
    7494:	61 f7       	brne	.-40     	; 0x746e <vfprintf+0x21e>
    7496:	14 c1       	rjmp	.+552    	; 0x76c0 <vfprintf+0x470>
    7498:	f7 fe       	sbrs	r15, 7
    749a:	12 c0       	rjmp	.+36     	; 0x74c0 <vfprintf+0x270>
    749c:	bc 0c       	add	r11, r12
    749e:	24 fe       	sbrs	r2, 4
    74a0:	04 c0       	rjmp	.+8      	; 0x74aa <vfprintf+0x25a>
    74a2:	8a 81       	ldd	r24, Y+2	; 0x02
    74a4:	81 33       	cpi	r24, 0x31	; 49
    74a6:	09 f4       	brne	.+2      	; 0x74aa <vfprintf+0x25a>
    74a8:	ba 94       	dec	r11
    74aa:	1b 14       	cp	r1, r11
    74ac:	1c f0       	brlt	.+6      	; 0x74b4 <vfprintf+0x264>
    74ae:	bb 24       	eor	r11, r11
    74b0:	b3 94       	inc	r11
    74b2:	2d c0       	rjmp	.+90     	; 0x750e <vfprintf+0x2be>
    74b4:	f8 e0       	ldi	r31, 0x08	; 8
    74b6:	fb 15       	cp	r31, r11
    74b8:	50 f5       	brcc	.+84     	; 0x750e <vfprintf+0x2be>
    74ba:	38 e0       	ldi	r19, 0x08	; 8
    74bc:	b3 2e       	mov	r11, r19
    74be:	27 c0       	rjmp	.+78     	; 0x750e <vfprintf+0x2be>
    74c0:	f6 fc       	sbrc	r15, 6
    74c2:	25 c0       	rjmp	.+74     	; 0x750e <vfprintf+0x2be>
    74c4:	89 2d       	mov	r24, r9
    74c6:	90 e0       	ldi	r25, 0x00	; 0
    74c8:	8c 15       	cp	r24, r12
    74ca:	9d 05       	cpc	r25, r13
    74cc:	4c f0       	brlt	.+18     	; 0x74e0 <vfprintf+0x290>
    74ce:	2c ef       	ldi	r18, 0xFC	; 252
    74d0:	c2 16       	cp	r12, r18
    74d2:	2f ef       	ldi	r18, 0xFF	; 255
    74d4:	d2 06       	cpc	r13, r18
    74d6:	24 f0       	brlt	.+8      	; 0x74e0 <vfprintf+0x290>
    74d8:	30 e8       	ldi	r19, 0x80	; 128
    74da:	f3 2a       	or	r15, r19
    74dc:	01 c0       	rjmp	.+2      	; 0x74e0 <vfprintf+0x290>
    74de:	9a 94       	dec	r9
    74e0:	99 20       	and	r9, r9
    74e2:	49 f0       	breq	.+18     	; 0x74f6 <vfprintf+0x2a6>
    74e4:	e2 e0       	ldi	r30, 0x02	; 2
    74e6:	f0 e0       	ldi	r31, 0x00	; 0
    74e8:	ec 0f       	add	r30, r28
    74ea:	fd 1f       	adc	r31, r29
    74ec:	e9 0d       	add	r30, r9
    74ee:	f1 1d       	adc	r31, r1
    74f0:	80 81       	ld	r24, Z
    74f2:	80 33       	cpi	r24, 0x30	; 48
    74f4:	a1 f3       	breq	.-24     	; 0x74de <vfprintf+0x28e>
    74f6:	f7 fe       	sbrs	r15, 7
    74f8:	0a c0       	rjmp	.+20     	; 0x750e <vfprintf+0x2be>
    74fa:	b9 2c       	mov	r11, r9
    74fc:	b3 94       	inc	r11
    74fe:	89 2d       	mov	r24, r9
    7500:	90 e0       	ldi	r25, 0x00	; 0
    7502:	c8 16       	cp	r12, r24
    7504:	d9 06       	cpc	r13, r25
    7506:	14 f0       	brlt	.+4      	; 0x750c <vfprintf+0x2bc>
    7508:	99 24       	eor	r9, r9
    750a:	01 c0       	rjmp	.+2      	; 0x750e <vfprintf+0x2be>
    750c:	9c 18       	sub	r9, r12
    750e:	f7 fc       	sbrc	r15, 7
    7510:	03 c0       	rjmp	.+6      	; 0x7518 <vfprintf+0x2c8>
    7512:	25 e0       	ldi	r18, 0x05	; 5
    7514:	30 e0       	ldi	r19, 0x00	; 0
    7516:	09 c0       	rjmp	.+18     	; 0x752a <vfprintf+0x2da>
    7518:	1c 14       	cp	r1, r12
    751a:	1d 04       	cpc	r1, r13
    751c:	1c f0       	brlt	.+6      	; 0x7524 <vfprintf+0x2d4>
    751e:	21 e0       	ldi	r18, 0x01	; 1
    7520:	30 e0       	ldi	r19, 0x00	; 0
    7522:	03 c0       	rjmp	.+6      	; 0x752a <vfprintf+0x2da>
    7524:	96 01       	movw	r18, r12
    7526:	2f 5f       	subi	r18, 0xFF	; 255
    7528:	3f 4f       	sbci	r19, 0xFF	; 255
    752a:	11 23       	and	r17, r17
    752c:	11 f0       	breq	.+4      	; 0x7532 <vfprintf+0x2e2>
    752e:	2f 5f       	subi	r18, 0xFF	; 255
    7530:	3f 4f       	sbci	r19, 0xFF	; 255
    7532:	99 20       	and	r9, r9
    7534:	29 f0       	breq	.+10     	; 0x7540 <vfprintf+0x2f0>
    7536:	89 2d       	mov	r24, r9
    7538:	90 e0       	ldi	r25, 0x00	; 0
    753a:	01 96       	adiw	r24, 0x01	; 1
    753c:	28 0f       	add	r18, r24
    753e:	39 1f       	adc	r19, r25
    7540:	88 2d       	mov	r24, r8
    7542:	90 e0       	ldi	r25, 0x00	; 0
    7544:	28 17       	cp	r18, r24
    7546:	39 07       	cpc	r19, r25
    7548:	14 f0       	brlt	.+4      	; 0x754e <vfprintf+0x2fe>
    754a:	88 24       	eor	r8, r8
    754c:	01 c0       	rjmp	.+2      	; 0x7550 <vfprintf+0x300>
    754e:	82 1a       	sub	r8, r18
    7550:	4f 2c       	mov	r4, r15
    7552:	55 24       	eor	r5, r5
    7554:	c2 01       	movw	r24, r4
    7556:	89 70       	andi	r24, 0x09	; 9
    7558:	90 70       	andi	r25, 0x00	; 0
    755a:	89 2b       	or	r24, r25
    755c:	39 f0       	breq	.+14     	; 0x756c <vfprintf+0x31c>
    755e:	08 c0       	rjmp	.+16     	; 0x7570 <vfprintf+0x320>
    7560:	80 e2       	ldi	r24, 0x20	; 32
    7562:	90 e0       	ldi	r25, 0x00	; 0
    7564:	b3 01       	movw	r22, r6
    7566:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    756a:	8a 94       	dec	r8
    756c:	88 20       	and	r8, r8
    756e:	c1 f7       	brne	.-16     	; 0x7560 <vfprintf+0x310>
    7570:	11 23       	and	r17, r17
    7572:	29 f0       	breq	.+10     	; 0x757e <vfprintf+0x32e>
    7574:	81 2f       	mov	r24, r17
    7576:	90 e0       	ldi	r25, 0x00	; 0
    7578:	b3 01       	movw	r22, r6
    757a:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    757e:	43 fe       	sbrs	r4, 3
    7580:	07 c0       	rjmp	.+14     	; 0x7590 <vfprintf+0x340>
    7582:	08 c0       	rjmp	.+16     	; 0x7594 <vfprintf+0x344>
    7584:	80 e3       	ldi	r24, 0x30	; 48
    7586:	90 e0       	ldi	r25, 0x00	; 0
    7588:	b3 01       	movw	r22, r6
    758a:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    758e:	8a 94       	dec	r8
    7590:	88 20       	and	r8, r8
    7592:	c1 f7       	brne	.-16     	; 0x7584 <vfprintf+0x334>
    7594:	f7 fe       	sbrs	r15, 7
    7596:	46 c0       	rjmp	.+140    	; 0x7624 <vfprintf+0x3d4>
    7598:	86 01       	movw	r16, r12
    759a:	d7 fe       	sbrs	r13, 7
    759c:	02 c0       	rjmp	.+4      	; 0x75a2 <vfprintf+0x352>
    759e:	00 e0       	ldi	r16, 0x00	; 0
    75a0:	10 e0       	ldi	r17, 0x00	; 0
    75a2:	76 01       	movw	r14, r12
    75a4:	08 94       	sec
    75a6:	e1 1c       	adc	r14, r1
    75a8:	f1 1c       	adc	r15, r1
    75aa:	e0 1a       	sub	r14, r16
    75ac:	f1 0a       	sbc	r15, r17
    75ae:	41 e0       	ldi	r20, 0x01	; 1
    75b0:	50 e0       	ldi	r21, 0x00	; 0
    75b2:	4c 0f       	add	r20, r28
    75b4:	5d 1f       	adc	r21, r29
    75b6:	e4 0e       	add	r14, r20
    75b8:	f5 1e       	adc	r15, r21
    75ba:	26 01       	movw	r4, r12
    75bc:	4b 18       	sub	r4, r11
    75be:	51 08       	sbc	r5, r1
    75c0:	89 2d       	mov	r24, r9
    75c2:	90 e0       	ldi	r25, 0x00	; 0
    75c4:	aa 24       	eor	r10, r10
    75c6:	bb 24       	eor	r11, r11
    75c8:	a8 1a       	sub	r10, r24
    75ca:	b9 0a       	sbc	r11, r25
    75cc:	5f ef       	ldi	r21, 0xFF	; 255
    75ce:	0f 3f       	cpi	r16, 0xFF	; 255
    75d0:	15 07       	cpc	r17, r21
    75d2:	29 f4       	brne	.+10     	; 0x75de <vfprintf+0x38e>
    75d4:	8e e2       	ldi	r24, 0x2E	; 46
    75d6:	90 e0       	ldi	r25, 0x00	; 0
    75d8:	b3 01       	movw	r22, r6
    75da:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    75de:	c0 16       	cp	r12, r16
    75e0:	d1 06       	cpc	r13, r17
    75e2:	34 f0       	brlt	.+12     	; 0x75f0 <vfprintf+0x3a0>
    75e4:	40 16       	cp	r4, r16
    75e6:	51 06       	cpc	r5, r17
    75e8:	1c f4       	brge	.+6      	; 0x75f0 <vfprintf+0x3a0>
    75ea:	f7 01       	movw	r30, r14
    75ec:	80 81       	ld	r24, Z
    75ee:	01 c0       	rjmp	.+2      	; 0x75f2 <vfprintf+0x3a2>
    75f0:	80 e3       	ldi	r24, 0x30	; 48
    75f2:	01 50       	subi	r16, 0x01	; 1
    75f4:	10 40       	sbci	r17, 0x00	; 0
    75f6:	08 94       	sec
    75f8:	e1 1c       	adc	r14, r1
    75fa:	f1 1c       	adc	r15, r1
    75fc:	0a 15       	cp	r16, r10
    75fe:	1b 05       	cpc	r17, r11
    7600:	2c f0       	brlt	.+10     	; 0x760c <vfprintf+0x3bc>
    7602:	90 e0       	ldi	r25, 0x00	; 0
    7604:	b3 01       	movw	r22, r6
    7606:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    760a:	e0 cf       	rjmp	.-64     	; 0x75cc <vfprintf+0x37c>
    760c:	0c 15       	cp	r16, r12
    760e:	1d 05       	cpc	r17, r13
    7610:	39 f4       	brne	.+14     	; 0x7620 <vfprintf+0x3d0>
    7612:	9a 81       	ldd	r25, Y+2	; 0x02
    7614:	96 33       	cpi	r25, 0x36	; 54
    7616:	18 f4       	brcc	.+6      	; 0x761e <vfprintf+0x3ce>
    7618:	95 33       	cpi	r25, 0x35	; 53
    761a:	11 f4       	brne	.+4      	; 0x7620 <vfprintf+0x3d0>
    761c:	24 fe       	sbrs	r2, 4
    761e:	81 e3       	ldi	r24, 0x31	; 49
    7620:	90 e0       	ldi	r25, 0x00	; 0
    7622:	4b c0       	rjmp	.+150    	; 0x76ba <vfprintf+0x46a>
    7624:	8a 81       	ldd	r24, Y+2	; 0x02
    7626:	81 33       	cpi	r24, 0x31	; 49
    7628:	09 f0       	breq	.+2      	; 0x762c <vfprintf+0x3dc>
    762a:	0f 7e       	andi	r16, 0xEF	; 239
    762c:	90 e0       	ldi	r25, 0x00	; 0
    762e:	b3 01       	movw	r22, r6
    7630:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    7634:	99 20       	and	r9, r9
    7636:	a1 f0       	breq	.+40     	; 0x7660 <vfprintf+0x410>
    7638:	8e e2       	ldi	r24, 0x2E	; 46
    763a:	90 e0       	ldi	r25, 0x00	; 0
    763c:	b3 01       	movw	r22, r6
    763e:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    7642:	12 e0       	ldi	r17, 0x02	; 2
    7644:	e1 e0       	ldi	r30, 0x01	; 1
    7646:	f0 e0       	ldi	r31, 0x00	; 0
    7648:	ec 0f       	add	r30, r28
    764a:	fd 1f       	adc	r31, r29
    764c:	e1 0f       	add	r30, r17
    764e:	f1 1d       	adc	r31, r1
    7650:	1f 5f       	subi	r17, 0xFF	; 255
    7652:	80 81       	ld	r24, Z
    7654:	90 e0       	ldi	r25, 0x00	; 0
    7656:	b3 01       	movw	r22, r6
    7658:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    765c:	9a 94       	dec	r9
    765e:	91 f7       	brne	.-28     	; 0x7644 <vfprintf+0x3f4>
    7660:	44 fc       	sbrc	r4, 4
    7662:	03 c0       	rjmp	.+6      	; 0x766a <vfprintf+0x41a>
    7664:	85 e6       	ldi	r24, 0x65	; 101
    7666:	90 e0       	ldi	r25, 0x00	; 0
    7668:	02 c0       	rjmp	.+4      	; 0x766e <vfprintf+0x41e>
    766a:	85 e4       	ldi	r24, 0x45	; 69
    766c:	90 e0       	ldi	r25, 0x00	; 0
    766e:	b3 01       	movw	r22, r6
    7670:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    7674:	d7 fc       	sbrc	r13, 7
    7676:	05 c0       	rjmp	.+10     	; 0x7682 <vfprintf+0x432>
    7678:	c1 14       	cp	r12, r1
    767a:	d1 04       	cpc	r13, r1
    767c:	41 f4       	brne	.+16     	; 0x768e <vfprintf+0x43e>
    767e:	04 ff       	sbrs	r16, 4
    7680:	06 c0       	rjmp	.+12     	; 0x768e <vfprintf+0x43e>
    7682:	d0 94       	com	r13
    7684:	c1 94       	neg	r12
    7686:	d1 08       	sbc	r13, r1
    7688:	d3 94       	inc	r13
    768a:	8d e2       	ldi	r24, 0x2D	; 45
    768c:	01 c0       	rjmp	.+2      	; 0x7690 <vfprintf+0x440>
    768e:	8b e2       	ldi	r24, 0x2B	; 43
    7690:	90 e0       	ldi	r25, 0x00	; 0
    7692:	b3 01       	movw	r22, r6
    7694:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    7698:	80 e3       	ldi	r24, 0x30	; 48
    769a:	05 c0       	rjmp	.+10     	; 0x76a6 <vfprintf+0x456>
    769c:	8f 5f       	subi	r24, 0xFF	; 255
    769e:	26 ef       	ldi	r18, 0xF6	; 246
    76a0:	3f ef       	ldi	r19, 0xFF	; 255
    76a2:	c2 0e       	add	r12, r18
    76a4:	d3 1e       	adc	r13, r19
    76a6:	3a e0       	ldi	r19, 0x0A	; 10
    76a8:	c3 16       	cp	r12, r19
    76aa:	d1 04       	cpc	r13, r1
    76ac:	bc f7       	brge	.-18     	; 0x769c <vfprintf+0x44c>
    76ae:	90 e0       	ldi	r25, 0x00	; 0
    76b0:	b3 01       	movw	r22, r6
    76b2:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    76b6:	c6 01       	movw	r24, r12
    76b8:	c0 96       	adiw	r24, 0x30	; 48
    76ba:	b3 01       	movw	r22, r6
    76bc:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    76c0:	cc 84       	ldd	r12, Y+12	; 0x0c
    76c2:	dd 84       	ldd	r13, Y+13	; 0x0d
    76c4:	52 c1       	rjmp	.+676    	; 0x796a <vfprintf+0x71a>
    76c6:	93 36       	cpi	r25, 0x63	; 99
    76c8:	31 f0       	breq	.+12     	; 0x76d6 <vfprintf+0x486>
    76ca:	93 37       	cpi	r25, 0x73	; 115
    76cc:	99 f0       	breq	.+38     	; 0x76f4 <vfprintf+0x4a4>
    76ce:	93 35       	cpi	r25, 0x53	; 83
    76d0:	09 f0       	breq	.+2      	; 0x76d4 <vfprintf+0x484>
    76d2:	59 c0       	rjmp	.+178    	; 0x7786 <vfprintf+0x536>
    76d4:	23 c0       	rjmp	.+70     	; 0x771c <vfprintf+0x4cc>
    76d6:	f6 01       	movw	r30, r12
    76d8:	80 81       	ld	r24, Z
    76da:	89 83       	std	Y+1, r24	; 0x01
    76dc:	5e 01       	movw	r10, r28
    76de:	08 94       	sec
    76e0:	a1 1c       	adc	r10, r1
    76e2:	b1 1c       	adc	r11, r1
    76e4:	22 e0       	ldi	r18, 0x02	; 2
    76e6:	30 e0       	ldi	r19, 0x00	; 0
    76e8:	c2 0e       	add	r12, r18
    76ea:	d3 1e       	adc	r13, r19
    76ec:	21 e0       	ldi	r18, 0x01	; 1
    76ee:	e2 2e       	mov	r14, r18
    76f0:	f1 2c       	mov	r15, r1
    76f2:	12 c0       	rjmp	.+36     	; 0x7718 <vfprintf+0x4c8>
    76f4:	f6 01       	movw	r30, r12
    76f6:	a0 80       	ld	r10, Z
    76f8:	b1 80       	ldd	r11, Z+1	; 0x01
    76fa:	16 fd       	sbrc	r17, 6
    76fc:	03 c0       	rjmp	.+6      	; 0x7704 <vfprintf+0x4b4>
    76fe:	6f ef       	ldi	r22, 0xFF	; 255
    7700:	7f ef       	ldi	r23, 0xFF	; 255
    7702:	02 c0       	rjmp	.+4      	; 0x7708 <vfprintf+0x4b8>
    7704:	69 2d       	mov	r22, r9
    7706:	70 e0       	ldi	r23, 0x00	; 0
    7708:	22 e0       	ldi	r18, 0x02	; 2
    770a:	30 e0       	ldi	r19, 0x00	; 0
    770c:	c2 0e       	add	r12, r18
    770e:	d3 1e       	adc	r13, r19
    7710:	c5 01       	movw	r24, r10
    7712:	0e 94 0c 44 	call	0x8818	; 0x8818 <strnlen>
    7716:	7c 01       	movw	r14, r24
    7718:	1f 77       	andi	r17, 0x7F	; 127
    771a:	13 c0       	rjmp	.+38     	; 0x7742 <vfprintf+0x4f2>
    771c:	f6 01       	movw	r30, r12
    771e:	a0 80       	ld	r10, Z
    7720:	b1 80       	ldd	r11, Z+1	; 0x01
    7722:	16 fd       	sbrc	r17, 6
    7724:	03 c0       	rjmp	.+6      	; 0x772c <vfprintf+0x4dc>
    7726:	6f ef       	ldi	r22, 0xFF	; 255
    7728:	7f ef       	ldi	r23, 0xFF	; 255
    772a:	02 c0       	rjmp	.+4      	; 0x7730 <vfprintf+0x4e0>
    772c:	69 2d       	mov	r22, r9
    772e:	70 e0       	ldi	r23, 0x00	; 0
    7730:	22 e0       	ldi	r18, 0x02	; 2
    7732:	30 e0       	ldi	r19, 0x00	; 0
    7734:	c2 0e       	add	r12, r18
    7736:	d3 1e       	adc	r13, r19
    7738:	c5 01       	movw	r24, r10
    773a:	0e 94 01 44 	call	0x8802	; 0x8802 <strnlen_P>
    773e:	7c 01       	movw	r14, r24
    7740:	10 68       	ori	r17, 0x80	; 128
    7742:	13 ff       	sbrs	r17, 3
    7744:	07 c0       	rjmp	.+14     	; 0x7754 <vfprintf+0x504>
    7746:	1b c0       	rjmp	.+54     	; 0x777e <vfprintf+0x52e>
    7748:	80 e2       	ldi	r24, 0x20	; 32
    774a:	90 e0       	ldi	r25, 0x00	; 0
    774c:	b3 01       	movw	r22, r6
    774e:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    7752:	8a 94       	dec	r8
    7754:	88 2d       	mov	r24, r8
    7756:	90 e0       	ldi	r25, 0x00	; 0
    7758:	e8 16       	cp	r14, r24
    775a:	f9 06       	cpc	r15, r25
    775c:	a8 f3       	brcs	.-22     	; 0x7748 <vfprintf+0x4f8>
    775e:	0f c0       	rjmp	.+30     	; 0x777e <vfprintf+0x52e>
    7760:	f5 01       	movw	r30, r10
    7762:	17 fd       	sbrc	r17, 7
    7764:	85 91       	lpm	r24, Z+
    7766:	17 ff       	sbrs	r17, 7
    7768:	81 91       	ld	r24, Z+
    776a:	5f 01       	movw	r10, r30
    776c:	90 e0       	ldi	r25, 0x00	; 0
    776e:	b3 01       	movw	r22, r6
    7770:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    7774:	81 10       	cpse	r8, r1
    7776:	8a 94       	dec	r8
    7778:	08 94       	sec
    777a:	e1 08       	sbc	r14, r1
    777c:	f1 08       	sbc	r15, r1
    777e:	e1 14       	cp	r14, r1
    7780:	f1 04       	cpc	r15, r1
    7782:	71 f7       	brne	.-36     	; 0x7760 <vfprintf+0x510>
    7784:	f2 c0       	rjmp	.+484    	; 0x796a <vfprintf+0x71a>
    7786:	94 36       	cpi	r25, 0x64	; 100
    7788:	11 f0       	breq	.+4      	; 0x778e <vfprintf+0x53e>
    778a:	99 36       	cpi	r25, 0x69	; 105
    778c:	89 f5       	brne	.+98     	; 0x77f0 <vfprintf+0x5a0>
    778e:	17 ff       	sbrs	r17, 7
    7790:	08 c0       	rjmp	.+16     	; 0x77a2 <vfprintf+0x552>
    7792:	f6 01       	movw	r30, r12
    7794:	20 81       	ld	r18, Z
    7796:	31 81       	ldd	r19, Z+1	; 0x01
    7798:	42 81       	ldd	r20, Z+2	; 0x02
    779a:	53 81       	ldd	r21, Z+3	; 0x03
    779c:	84 e0       	ldi	r24, 0x04	; 4
    779e:	90 e0       	ldi	r25, 0x00	; 0
    77a0:	0a c0       	rjmp	.+20     	; 0x77b6 <vfprintf+0x566>
    77a2:	f6 01       	movw	r30, r12
    77a4:	80 81       	ld	r24, Z
    77a6:	91 81       	ldd	r25, Z+1	; 0x01
    77a8:	9c 01       	movw	r18, r24
    77aa:	44 27       	eor	r20, r20
    77ac:	37 fd       	sbrc	r19, 7
    77ae:	40 95       	com	r20
    77b0:	54 2f       	mov	r21, r20
    77b2:	82 e0       	ldi	r24, 0x02	; 2
    77b4:	90 e0       	ldi	r25, 0x00	; 0
    77b6:	c8 0e       	add	r12, r24
    77b8:	d9 1e       	adc	r13, r25
    77ba:	9f e6       	ldi	r25, 0x6F	; 111
    77bc:	f9 2e       	mov	r15, r25
    77be:	f1 22       	and	r15, r17
    77c0:	57 ff       	sbrs	r21, 7
    77c2:	09 c0       	rjmp	.+18     	; 0x77d6 <vfprintf+0x586>
    77c4:	50 95       	com	r21
    77c6:	40 95       	com	r20
    77c8:	30 95       	com	r19
    77ca:	21 95       	neg	r18
    77cc:	3f 4f       	sbci	r19, 0xFF	; 255
    77ce:	4f 4f       	sbci	r20, 0xFF	; 255
    77d0:	5f 4f       	sbci	r21, 0xFF	; 255
    77d2:	90 e8       	ldi	r25, 0x80	; 128
    77d4:	f9 2a       	or	r15, r25
    77d6:	ca 01       	movw	r24, r20
    77d8:	b9 01       	movw	r22, r18
    77da:	ae 01       	movw	r20, r28
    77dc:	4f 5f       	subi	r20, 0xFF	; 255
    77de:	5f 4f       	sbci	r21, 0xFF	; 255
    77e0:	2a e0       	ldi	r18, 0x0A	; 10
    77e2:	30 e0       	ldi	r19, 0x00	; 0
    77e4:	0e 94 a6 44 	call	0x894c	; 0x894c <__ultoa_invert>
    77e8:	e8 2e       	mov	r14, r24
    77ea:	e8 89       	ldd	r30, Y+16	; 0x10
    77ec:	ee 1a       	sub	r14, r30
    77ee:	41 c0       	rjmp	.+130    	; 0x7872 <vfprintf+0x622>
    77f0:	95 37       	cpi	r25, 0x75	; 117
    77f2:	21 f4       	brne	.+8      	; 0x77fc <vfprintf+0x5ac>
    77f4:	1f 7e       	andi	r17, 0xEF	; 239
    77f6:	2a e0       	ldi	r18, 0x0A	; 10
    77f8:	30 e0       	ldi	r19, 0x00	; 0
    77fa:	1c c0       	rjmp	.+56     	; 0x7834 <vfprintf+0x5e4>
    77fc:	19 7f       	andi	r17, 0xF9	; 249
    77fe:	9f 36       	cpi	r25, 0x6F	; 111
    7800:	61 f0       	breq	.+24     	; 0x781a <vfprintf+0x5ca>
    7802:	90 37       	cpi	r25, 0x70	; 112
    7804:	20 f4       	brcc	.+8      	; 0x780e <vfprintf+0x5be>
    7806:	98 35       	cpi	r25, 0x58	; 88
    7808:	09 f0       	breq	.+2      	; 0x780c <vfprintf+0x5bc>
    780a:	b2 c0       	rjmp	.+356    	; 0x7970 <vfprintf+0x720>
    780c:	0f c0       	rjmp	.+30     	; 0x782c <vfprintf+0x5dc>
    780e:	90 37       	cpi	r25, 0x70	; 112
    7810:	39 f0       	breq	.+14     	; 0x7820 <vfprintf+0x5d0>
    7812:	98 37       	cpi	r25, 0x78	; 120
    7814:	09 f0       	breq	.+2      	; 0x7818 <vfprintf+0x5c8>
    7816:	ac c0       	rjmp	.+344    	; 0x7970 <vfprintf+0x720>
    7818:	04 c0       	rjmp	.+8      	; 0x7822 <vfprintf+0x5d2>
    781a:	28 e0       	ldi	r18, 0x08	; 8
    781c:	30 e0       	ldi	r19, 0x00	; 0
    781e:	0a c0       	rjmp	.+20     	; 0x7834 <vfprintf+0x5e4>
    7820:	10 61       	ori	r17, 0x10	; 16
    7822:	14 fd       	sbrc	r17, 4
    7824:	14 60       	ori	r17, 0x04	; 4
    7826:	20 e1       	ldi	r18, 0x10	; 16
    7828:	30 e0       	ldi	r19, 0x00	; 0
    782a:	04 c0       	rjmp	.+8      	; 0x7834 <vfprintf+0x5e4>
    782c:	14 fd       	sbrc	r17, 4
    782e:	16 60       	ori	r17, 0x06	; 6
    7830:	20 e1       	ldi	r18, 0x10	; 16
    7832:	32 e0       	ldi	r19, 0x02	; 2
    7834:	17 ff       	sbrs	r17, 7
    7836:	08 c0       	rjmp	.+16     	; 0x7848 <vfprintf+0x5f8>
    7838:	f6 01       	movw	r30, r12
    783a:	60 81       	ld	r22, Z
    783c:	71 81       	ldd	r23, Z+1	; 0x01
    783e:	82 81       	ldd	r24, Z+2	; 0x02
    7840:	93 81       	ldd	r25, Z+3	; 0x03
    7842:	44 e0       	ldi	r20, 0x04	; 4
    7844:	50 e0       	ldi	r21, 0x00	; 0
    7846:	08 c0       	rjmp	.+16     	; 0x7858 <vfprintf+0x608>
    7848:	f6 01       	movw	r30, r12
    784a:	80 81       	ld	r24, Z
    784c:	91 81       	ldd	r25, Z+1	; 0x01
    784e:	bc 01       	movw	r22, r24
    7850:	80 e0       	ldi	r24, 0x00	; 0
    7852:	90 e0       	ldi	r25, 0x00	; 0
    7854:	42 e0       	ldi	r20, 0x02	; 2
    7856:	50 e0       	ldi	r21, 0x00	; 0
    7858:	c4 0e       	add	r12, r20
    785a:	d5 1e       	adc	r13, r21
    785c:	ae 01       	movw	r20, r28
    785e:	4f 5f       	subi	r20, 0xFF	; 255
    7860:	5f 4f       	sbci	r21, 0xFF	; 255
    7862:	0e 94 a6 44 	call	0x894c	; 0x894c <__ultoa_invert>
    7866:	e8 2e       	mov	r14, r24
    7868:	58 89       	ldd	r21, Y+16	; 0x10
    786a:	e5 1a       	sub	r14, r21
    786c:	8f e7       	ldi	r24, 0x7F	; 127
    786e:	f8 2e       	mov	r15, r24
    7870:	f1 22       	and	r15, r17
    7872:	f6 fe       	sbrs	r15, 6
    7874:	0b c0       	rjmp	.+22     	; 0x788c <vfprintf+0x63c>
    7876:	8e ef       	ldi	r24, 0xFE	; 254
    7878:	f8 22       	and	r15, r24
    787a:	e9 14       	cp	r14, r9
    787c:	38 f4       	brcc	.+14     	; 0x788c <vfprintf+0x63c>
    787e:	f4 fe       	sbrs	r15, 4
    7880:	07 c0       	rjmp	.+14     	; 0x7890 <vfprintf+0x640>
    7882:	f2 fc       	sbrc	r15, 2
    7884:	05 c0       	rjmp	.+10     	; 0x7890 <vfprintf+0x640>
    7886:	9f ee       	ldi	r25, 0xEF	; 239
    7888:	f9 22       	and	r15, r25
    788a:	02 c0       	rjmp	.+4      	; 0x7890 <vfprintf+0x640>
    788c:	1e 2d       	mov	r17, r14
    788e:	01 c0       	rjmp	.+2      	; 0x7892 <vfprintf+0x642>
    7890:	19 2d       	mov	r17, r9
    7892:	f4 fe       	sbrs	r15, 4
    7894:	0d c0       	rjmp	.+26     	; 0x78b0 <vfprintf+0x660>
    7896:	fe 01       	movw	r30, r28
    7898:	ee 0d       	add	r30, r14
    789a:	f1 1d       	adc	r31, r1
    789c:	80 81       	ld	r24, Z
    789e:	80 33       	cpi	r24, 0x30	; 48
    78a0:	19 f4       	brne	.+6      	; 0x78a8 <vfprintf+0x658>
    78a2:	e9 ee       	ldi	r30, 0xE9	; 233
    78a4:	fe 22       	and	r15, r30
    78a6:	08 c0       	rjmp	.+16     	; 0x78b8 <vfprintf+0x668>
    78a8:	1f 5f       	subi	r17, 0xFF	; 255
    78aa:	f2 fe       	sbrs	r15, 2
    78ac:	05 c0       	rjmp	.+10     	; 0x78b8 <vfprintf+0x668>
    78ae:	03 c0       	rjmp	.+6      	; 0x78b6 <vfprintf+0x666>
    78b0:	8f 2d       	mov	r24, r15
    78b2:	86 78       	andi	r24, 0x86	; 134
    78b4:	09 f0       	breq	.+2      	; 0x78b8 <vfprintf+0x668>
    78b6:	1f 5f       	subi	r17, 0xFF	; 255
    78b8:	0f 2d       	mov	r16, r15
    78ba:	f3 fc       	sbrc	r15, 3
    78bc:	14 c0       	rjmp	.+40     	; 0x78e6 <vfprintf+0x696>
    78be:	f0 fe       	sbrs	r15, 0
    78c0:	0f c0       	rjmp	.+30     	; 0x78e0 <vfprintf+0x690>
    78c2:	18 15       	cp	r17, r8
    78c4:	10 f0       	brcs	.+4      	; 0x78ca <vfprintf+0x67a>
    78c6:	9e 2c       	mov	r9, r14
    78c8:	0b c0       	rjmp	.+22     	; 0x78e0 <vfprintf+0x690>
    78ca:	9e 2c       	mov	r9, r14
    78cc:	98 0c       	add	r9, r8
    78ce:	91 1a       	sub	r9, r17
    78d0:	18 2d       	mov	r17, r8
    78d2:	06 c0       	rjmp	.+12     	; 0x78e0 <vfprintf+0x690>
    78d4:	80 e2       	ldi	r24, 0x20	; 32
    78d6:	90 e0       	ldi	r25, 0x00	; 0
    78d8:	b3 01       	movw	r22, r6
    78da:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    78de:	1f 5f       	subi	r17, 0xFF	; 255
    78e0:	18 15       	cp	r17, r8
    78e2:	c0 f3       	brcs	.-16     	; 0x78d4 <vfprintf+0x684>
    78e4:	04 c0       	rjmp	.+8      	; 0x78ee <vfprintf+0x69e>
    78e6:	18 15       	cp	r17, r8
    78e8:	10 f4       	brcc	.+4      	; 0x78ee <vfprintf+0x69e>
    78ea:	81 1a       	sub	r8, r17
    78ec:	01 c0       	rjmp	.+2      	; 0x78f0 <vfprintf+0x6a0>
    78ee:	88 24       	eor	r8, r8
    78f0:	04 ff       	sbrs	r16, 4
    78f2:	0f c0       	rjmp	.+30     	; 0x7912 <vfprintf+0x6c2>
    78f4:	80 e3       	ldi	r24, 0x30	; 48
    78f6:	90 e0       	ldi	r25, 0x00	; 0
    78f8:	b3 01       	movw	r22, r6
    78fa:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    78fe:	02 ff       	sbrs	r16, 2
    7900:	1d c0       	rjmp	.+58     	; 0x793c <vfprintf+0x6ec>
    7902:	01 fd       	sbrc	r16, 1
    7904:	03 c0       	rjmp	.+6      	; 0x790c <vfprintf+0x6bc>
    7906:	88 e7       	ldi	r24, 0x78	; 120
    7908:	90 e0       	ldi	r25, 0x00	; 0
    790a:	0e c0       	rjmp	.+28     	; 0x7928 <vfprintf+0x6d8>
    790c:	88 e5       	ldi	r24, 0x58	; 88
    790e:	90 e0       	ldi	r25, 0x00	; 0
    7910:	0b c0       	rjmp	.+22     	; 0x7928 <vfprintf+0x6d8>
    7912:	80 2f       	mov	r24, r16
    7914:	86 78       	andi	r24, 0x86	; 134
    7916:	91 f0       	breq	.+36     	; 0x793c <vfprintf+0x6ec>
    7918:	01 ff       	sbrs	r16, 1
    791a:	02 c0       	rjmp	.+4      	; 0x7920 <vfprintf+0x6d0>
    791c:	8b e2       	ldi	r24, 0x2B	; 43
    791e:	01 c0       	rjmp	.+2      	; 0x7922 <vfprintf+0x6d2>
    7920:	80 e2       	ldi	r24, 0x20	; 32
    7922:	f7 fc       	sbrc	r15, 7
    7924:	8d e2       	ldi	r24, 0x2D	; 45
    7926:	90 e0       	ldi	r25, 0x00	; 0
    7928:	b3 01       	movw	r22, r6
    792a:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    792e:	06 c0       	rjmp	.+12     	; 0x793c <vfprintf+0x6ec>
    7930:	80 e3       	ldi	r24, 0x30	; 48
    7932:	90 e0       	ldi	r25, 0x00	; 0
    7934:	b3 01       	movw	r22, r6
    7936:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    793a:	9a 94       	dec	r9
    793c:	e9 14       	cp	r14, r9
    793e:	c0 f3       	brcs	.-16     	; 0x7930 <vfprintf+0x6e0>
    7940:	ea 94       	dec	r14
    7942:	e1 e0       	ldi	r30, 0x01	; 1
    7944:	f0 e0       	ldi	r31, 0x00	; 0
    7946:	ec 0f       	add	r30, r28
    7948:	fd 1f       	adc	r31, r29
    794a:	ee 0d       	add	r30, r14
    794c:	f1 1d       	adc	r31, r1
    794e:	80 81       	ld	r24, Z
    7950:	90 e0       	ldi	r25, 0x00	; 0
    7952:	b3 01       	movw	r22, r6
    7954:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    7958:	ee 20       	and	r14, r14
    795a:	91 f7       	brne	.-28     	; 0x7940 <vfprintf+0x6f0>
    795c:	06 c0       	rjmp	.+12     	; 0x796a <vfprintf+0x71a>
    795e:	80 e2       	ldi	r24, 0x20	; 32
    7960:	90 e0       	ldi	r25, 0x00	; 0
    7962:	b3 01       	movw	r22, r6
    7964:	0e 94 57 44 	call	0x88ae	; 0x88ae <fputc>
    7968:	8a 94       	dec	r8
    796a:	88 20       	and	r8, r8
    796c:	c1 f7       	brne	.-16     	; 0x795e <vfprintf+0x70e>
    796e:	99 cc       	rjmp	.-1742   	; 0x72a2 <vfprintf+0x52>
    7970:	f3 01       	movw	r30, r6
    7972:	66 81       	ldd	r22, Z+6	; 0x06
    7974:	77 81       	ldd	r23, Z+7	; 0x07
    7976:	cb 01       	movw	r24, r22
    7978:	61 96       	adiw	r28, 0x11	; 17
    797a:	cd bf       	out	0x3d, r28	; 61
    797c:	de bf       	out	0x3e, r29	; 62
    797e:	cf 91       	pop	r28
    7980:	df 91       	pop	r29
    7982:	1f 91       	pop	r17
    7984:	0f 91       	pop	r16
    7986:	ff 90       	pop	r15
    7988:	ef 90       	pop	r14
    798a:	df 90       	pop	r13
    798c:	cf 90       	pop	r12
    798e:	bf 90       	pop	r11
    7990:	af 90       	pop	r10
    7992:	9f 90       	pop	r9
    7994:	8f 90       	pop	r8
    7996:	7f 90       	pop	r7
    7998:	6f 90       	pop	r6
    799a:	5f 90       	pop	r5
    799c:	4f 90       	pop	r4
    799e:	3f 90       	pop	r3
    79a0:	2f 90       	pop	r2
    79a2:	08 95       	ret

000079a4 <__subsf3>:
    79a4:	50 58       	subi	r21, 0x80	; 128

000079a6 <__addsf3>:
    79a6:	bb 27       	eor	r27, r27
    79a8:	aa 27       	eor	r26, r26
    79aa:	0e d0       	rcall	.+28     	; 0x79c8 <__addsf3x>
    79ac:	29 c2       	rjmp	.+1106   	; 0x7e00 <__fp_round>
    79ae:	f2 d1       	rcall	.+996    	; 0x7d94 <__fp_pscA>
    79b0:	30 f0       	brcs	.+12     	; 0x79be <__addsf3+0x18>
    79b2:	f7 d1       	rcall	.+1006   	; 0x7da2 <__fp_pscB>
    79b4:	20 f0       	brcs	.+8      	; 0x79be <__addsf3+0x18>
    79b6:	31 f4       	brne	.+12     	; 0x79c4 <__addsf3+0x1e>
    79b8:	9f 3f       	cpi	r25, 0xFF	; 255
    79ba:	11 f4       	brne	.+4      	; 0x79c0 <__addsf3+0x1a>
    79bc:	1e f4       	brtc	.+6      	; 0x79c4 <__addsf3+0x1e>
    79be:	c2 c1       	rjmp	.+900    	; 0x7d44 <__fp_nan>
    79c0:	0e f4       	brtc	.+2      	; 0x79c4 <__addsf3+0x1e>
    79c2:	e0 95       	com	r30
    79c4:	e7 fb       	bst	r30, 7
    79c6:	8f c1       	rjmp	.+798    	; 0x7ce6 <__fp_inf>

000079c8 <__addsf3x>:
    79c8:	e9 2f       	mov	r30, r25
    79ca:	3c d2       	rcall	.+1144   	; 0x7e44 <__fp_split3>
    79cc:	80 f3       	brcs	.-32     	; 0x79ae <__addsf3+0x8>
    79ce:	ba 17       	cp	r27, r26
    79d0:	62 07       	cpc	r22, r18
    79d2:	73 07       	cpc	r23, r19
    79d4:	84 07       	cpc	r24, r20
    79d6:	95 07       	cpc	r25, r21
    79d8:	18 f0       	brcs	.+6      	; 0x79e0 <__addsf3x+0x18>
    79da:	71 f4       	brne	.+28     	; 0x79f8 <__addsf3x+0x30>
    79dc:	9e f5       	brtc	.+102    	; 0x7a44 <__addsf3x+0x7c>
    79de:	6b c2       	rjmp	.+1238   	; 0x7eb6 <__fp_zero>
    79e0:	0e f4       	brtc	.+2      	; 0x79e4 <__addsf3x+0x1c>
    79e2:	e0 95       	com	r30
    79e4:	0b 2e       	mov	r0, r27
    79e6:	ba 2f       	mov	r27, r26
    79e8:	a0 2d       	mov	r26, r0
    79ea:	0b 01       	movw	r0, r22
    79ec:	b9 01       	movw	r22, r18
    79ee:	90 01       	movw	r18, r0
    79f0:	0c 01       	movw	r0, r24
    79f2:	ca 01       	movw	r24, r20
    79f4:	a0 01       	movw	r20, r0
    79f6:	11 24       	eor	r1, r1
    79f8:	ff 27       	eor	r31, r31
    79fa:	59 1b       	sub	r21, r25
    79fc:	99 f0       	breq	.+38     	; 0x7a24 <__addsf3x+0x5c>
    79fe:	59 3f       	cpi	r21, 0xF9	; 249
    7a00:	50 f4       	brcc	.+20     	; 0x7a16 <__addsf3x+0x4e>
    7a02:	50 3e       	cpi	r21, 0xE0	; 224
    7a04:	68 f1       	brcs	.+90     	; 0x7a60 <__addsf3x+0x98>
    7a06:	1a 16       	cp	r1, r26
    7a08:	f0 40       	sbci	r31, 0x00	; 0
    7a0a:	a2 2f       	mov	r26, r18
    7a0c:	23 2f       	mov	r18, r19
    7a0e:	34 2f       	mov	r19, r20
    7a10:	44 27       	eor	r20, r20
    7a12:	58 5f       	subi	r21, 0xF8	; 248
    7a14:	f3 cf       	rjmp	.-26     	; 0x79fc <__addsf3x+0x34>
    7a16:	46 95       	lsr	r20
    7a18:	37 95       	ror	r19
    7a1a:	27 95       	ror	r18
    7a1c:	a7 95       	ror	r26
    7a1e:	f0 40       	sbci	r31, 0x00	; 0
    7a20:	53 95       	inc	r21
    7a22:	c9 f7       	brne	.-14     	; 0x7a16 <__addsf3x+0x4e>
    7a24:	7e f4       	brtc	.+30     	; 0x7a44 <__addsf3x+0x7c>
    7a26:	1f 16       	cp	r1, r31
    7a28:	ba 0b       	sbc	r27, r26
    7a2a:	62 0b       	sbc	r22, r18
    7a2c:	73 0b       	sbc	r23, r19
    7a2e:	84 0b       	sbc	r24, r20
    7a30:	ba f0       	brmi	.+46     	; 0x7a60 <__addsf3x+0x98>
    7a32:	91 50       	subi	r25, 0x01	; 1
    7a34:	a1 f0       	breq	.+40     	; 0x7a5e <__addsf3x+0x96>
    7a36:	ff 0f       	add	r31, r31
    7a38:	bb 1f       	adc	r27, r27
    7a3a:	66 1f       	adc	r22, r22
    7a3c:	77 1f       	adc	r23, r23
    7a3e:	88 1f       	adc	r24, r24
    7a40:	c2 f7       	brpl	.-16     	; 0x7a32 <__addsf3x+0x6a>
    7a42:	0e c0       	rjmp	.+28     	; 0x7a60 <__addsf3x+0x98>
    7a44:	ba 0f       	add	r27, r26
    7a46:	62 1f       	adc	r22, r18
    7a48:	73 1f       	adc	r23, r19
    7a4a:	84 1f       	adc	r24, r20
    7a4c:	48 f4       	brcc	.+18     	; 0x7a60 <__addsf3x+0x98>
    7a4e:	87 95       	ror	r24
    7a50:	77 95       	ror	r23
    7a52:	67 95       	ror	r22
    7a54:	b7 95       	ror	r27
    7a56:	f7 95       	ror	r31
    7a58:	9e 3f       	cpi	r25, 0xFE	; 254
    7a5a:	08 f0       	brcs	.+2      	; 0x7a5e <__addsf3x+0x96>
    7a5c:	b3 cf       	rjmp	.-154    	; 0x79c4 <__addsf3+0x1e>
    7a5e:	93 95       	inc	r25
    7a60:	88 0f       	add	r24, r24
    7a62:	08 f0       	brcs	.+2      	; 0x7a66 <__addsf3x+0x9e>
    7a64:	99 27       	eor	r25, r25
    7a66:	ee 0f       	add	r30, r30
    7a68:	97 95       	ror	r25
    7a6a:	87 95       	ror	r24
    7a6c:	08 95       	ret

00007a6e <atan>:
    7a6e:	df 93       	push	r29
    7a70:	dd 27       	eor	r29, r29
    7a72:	b9 2f       	mov	r27, r25
    7a74:	bf 77       	andi	r27, 0x7F	; 127
    7a76:	40 e8       	ldi	r20, 0x80	; 128
    7a78:	5f e3       	ldi	r21, 0x3F	; 63
    7a7a:	16 16       	cp	r1, r22
    7a7c:	17 06       	cpc	r1, r23
    7a7e:	48 07       	cpc	r20, r24
    7a80:	5b 07       	cpc	r21, r27
    7a82:	10 f4       	brcc	.+4      	; 0x7a88 <atan+0x1a>
    7a84:	d9 2f       	mov	r29, r25
    7a86:	83 d2       	rcall	.+1286   	; 0x7f8e <inverse>
    7a88:	9f 93       	push	r25
    7a8a:	8f 93       	push	r24
    7a8c:	7f 93       	push	r23
    7a8e:	6f 93       	push	r22
    7a90:	96 d3       	rcall	.+1836   	; 0x81be <square>
    7a92:	e8 ee       	ldi	r30, 0xE8	; 232
    7a94:	f1 e0       	ldi	r31, 0x01	; 1
    7a96:	59 d1       	rcall	.+690    	; 0x7d4a <__fp_powser>
    7a98:	b3 d1       	rcall	.+870    	; 0x7e00 <__fp_round>
    7a9a:	2f 91       	pop	r18
    7a9c:	3f 91       	pop	r19
    7a9e:	4f 91       	pop	r20
    7aa0:	5f 91       	pop	r21
    7aa2:	ee d2       	rcall	.+1500   	; 0x8080 <__mulsf3x>
    7aa4:	dd 23       	and	r29, r29
    7aa6:	49 f0       	breq	.+18     	; 0x7aba <atan+0x4c>
    7aa8:	90 58       	subi	r25, 0x80	; 128
    7aaa:	a2 ea       	ldi	r26, 0xA2	; 162
    7aac:	2a ed       	ldi	r18, 0xDA	; 218
    7aae:	3f e0       	ldi	r19, 0x0F	; 15
    7ab0:	49 ec       	ldi	r20, 0xC9	; 201
    7ab2:	5f e3       	ldi	r21, 0x3F	; 63
    7ab4:	d0 78       	andi	r29, 0x80	; 128
    7ab6:	5d 27       	eor	r21, r29
    7ab8:	87 df       	rcall	.-242    	; 0x79c8 <__addsf3x>
    7aba:	df 91       	pop	r29
    7abc:	a1 c1       	rjmp	.+834    	; 0x7e00 <__fp_round>

00007abe <ceil>:
    7abe:	e4 d1       	rcall	.+968    	; 0x7e88 <__fp_trunc>
    7ac0:	80 f0       	brcs	.+32     	; 0x7ae2 <ceil+0x24>
    7ac2:	9f 37       	cpi	r25, 0x7F	; 127
    7ac4:	40 f4       	brcc	.+16     	; 0x7ad6 <ceil+0x18>
    7ac6:	91 11       	cpse	r25, r1
    7ac8:	0e f4       	brtc	.+2      	; 0x7acc <ceil+0xe>
    7aca:	f6 c1       	rjmp	.+1004   	; 0x7eb8 <__fp_szero>
    7acc:	60 e0       	ldi	r22, 0x00	; 0
    7ace:	70 e0       	ldi	r23, 0x00	; 0
    7ad0:	80 e8       	ldi	r24, 0x80	; 128
    7ad2:	9f e3       	ldi	r25, 0x3F	; 63
    7ad4:	08 95       	ret
    7ad6:	26 f0       	brts	.+8      	; 0x7ae0 <ceil+0x22>
    7ad8:	1b 16       	cp	r1, r27
    7ada:	61 1d       	adc	r22, r1
    7adc:	71 1d       	adc	r23, r1
    7ade:	81 1d       	adc	r24, r1
    7ae0:	08 c1       	rjmp	.+528    	; 0x7cf2 <__fp_mintl>
    7ae2:	22 c1       	rjmp	.+580    	; 0x7d28 <__fp_mpack>

00007ae4 <__cmpsf2>:
    7ae4:	dc d0       	rcall	.+440    	; 0x7c9e <__fp_cmp>
    7ae6:	08 f4       	brcc	.+2      	; 0x7aea <__cmpsf2+0x6>
    7ae8:	81 e0       	ldi	r24, 0x01	; 1
    7aea:	08 95       	ret

00007aec <cos>:
    7aec:	62 d1       	rcall	.+708    	; 0x7db2 <__fp_rempio2>
    7aee:	e3 95       	inc	r30
    7af0:	98 c1       	rjmp	.+816    	; 0x7e22 <__fp_sinus>

00007af2 <__divsf3>:
    7af2:	0c d0       	rcall	.+24     	; 0x7b0c <__divsf3x>
    7af4:	85 c1       	rjmp	.+778    	; 0x7e00 <__fp_round>
    7af6:	55 d1       	rcall	.+682    	; 0x7da2 <__fp_pscB>
    7af8:	40 f0       	brcs	.+16     	; 0x7b0a <__divsf3+0x18>
    7afa:	4c d1       	rcall	.+664    	; 0x7d94 <__fp_pscA>
    7afc:	30 f0       	brcs	.+12     	; 0x7b0a <__divsf3+0x18>
    7afe:	21 f4       	brne	.+8      	; 0x7b08 <__divsf3+0x16>
    7b00:	5f 3f       	cpi	r21, 0xFF	; 255
    7b02:	19 f0       	breq	.+6      	; 0x7b0a <__divsf3+0x18>
    7b04:	f0 c0       	rjmp	.+480    	; 0x7ce6 <__fp_inf>
    7b06:	51 11       	cpse	r21, r1
    7b08:	d7 c1       	rjmp	.+942    	; 0x7eb8 <__fp_szero>
    7b0a:	1c c1       	rjmp	.+568    	; 0x7d44 <__fp_nan>

00007b0c <__divsf3x>:
    7b0c:	9b d1       	rcall	.+822    	; 0x7e44 <__fp_split3>
    7b0e:	98 f3       	brcs	.-26     	; 0x7af6 <__divsf3+0x4>

00007b10 <__divsf3_pse>:
    7b10:	99 23       	and	r25, r25
    7b12:	c9 f3       	breq	.-14     	; 0x7b06 <__divsf3+0x14>
    7b14:	55 23       	and	r21, r21
    7b16:	b1 f3       	breq	.-20     	; 0x7b04 <__divsf3+0x12>
    7b18:	95 1b       	sub	r25, r21
    7b1a:	55 0b       	sbc	r21, r21
    7b1c:	bb 27       	eor	r27, r27
    7b1e:	aa 27       	eor	r26, r26
    7b20:	62 17       	cp	r22, r18
    7b22:	73 07       	cpc	r23, r19
    7b24:	84 07       	cpc	r24, r20
    7b26:	38 f0       	brcs	.+14     	; 0x7b36 <__divsf3_pse+0x26>
    7b28:	9f 5f       	subi	r25, 0xFF	; 255
    7b2a:	5f 4f       	sbci	r21, 0xFF	; 255
    7b2c:	22 0f       	add	r18, r18
    7b2e:	33 1f       	adc	r19, r19
    7b30:	44 1f       	adc	r20, r20
    7b32:	aa 1f       	adc	r26, r26
    7b34:	a9 f3       	breq	.-22     	; 0x7b20 <__divsf3_pse+0x10>
    7b36:	33 d0       	rcall	.+102    	; 0x7b9e <__divsf3_pse+0x8e>
    7b38:	0e 2e       	mov	r0, r30
    7b3a:	3a f0       	brmi	.+14     	; 0x7b4a <__divsf3_pse+0x3a>
    7b3c:	e0 e8       	ldi	r30, 0x80	; 128
    7b3e:	30 d0       	rcall	.+96     	; 0x7ba0 <__divsf3_pse+0x90>
    7b40:	91 50       	subi	r25, 0x01	; 1
    7b42:	50 40       	sbci	r21, 0x00	; 0
    7b44:	e6 95       	lsr	r30
    7b46:	00 1c       	adc	r0, r0
    7b48:	ca f7       	brpl	.-14     	; 0x7b3c <__divsf3_pse+0x2c>
    7b4a:	29 d0       	rcall	.+82     	; 0x7b9e <__divsf3_pse+0x8e>
    7b4c:	fe 2f       	mov	r31, r30
    7b4e:	27 d0       	rcall	.+78     	; 0x7b9e <__divsf3_pse+0x8e>
    7b50:	66 0f       	add	r22, r22
    7b52:	77 1f       	adc	r23, r23
    7b54:	88 1f       	adc	r24, r24
    7b56:	bb 1f       	adc	r27, r27
    7b58:	26 17       	cp	r18, r22
    7b5a:	37 07       	cpc	r19, r23
    7b5c:	48 07       	cpc	r20, r24
    7b5e:	ab 07       	cpc	r26, r27
    7b60:	b0 e8       	ldi	r27, 0x80	; 128
    7b62:	09 f0       	breq	.+2      	; 0x7b66 <__divsf3_pse+0x56>
    7b64:	bb 0b       	sbc	r27, r27
    7b66:	80 2d       	mov	r24, r0
    7b68:	bf 01       	movw	r22, r30
    7b6a:	ff 27       	eor	r31, r31
    7b6c:	93 58       	subi	r25, 0x83	; 131
    7b6e:	5f 4f       	sbci	r21, 0xFF	; 255
    7b70:	2a f0       	brmi	.+10     	; 0x7b7c <__divsf3_pse+0x6c>
    7b72:	9e 3f       	cpi	r25, 0xFE	; 254
    7b74:	51 05       	cpc	r21, r1
    7b76:	68 f0       	brcs	.+26     	; 0x7b92 <__divsf3_pse+0x82>
    7b78:	b6 c0       	rjmp	.+364    	; 0x7ce6 <__fp_inf>
    7b7a:	9e c1       	rjmp	.+828    	; 0x7eb8 <__fp_szero>
    7b7c:	5f 3f       	cpi	r21, 0xFF	; 255
    7b7e:	ec f3       	brlt	.-6      	; 0x7b7a <__divsf3_pse+0x6a>
    7b80:	98 3e       	cpi	r25, 0xE8	; 232
    7b82:	dc f3       	brlt	.-10     	; 0x7b7a <__divsf3_pse+0x6a>
    7b84:	86 95       	lsr	r24
    7b86:	77 95       	ror	r23
    7b88:	67 95       	ror	r22
    7b8a:	b7 95       	ror	r27
    7b8c:	f7 95       	ror	r31
    7b8e:	9f 5f       	subi	r25, 0xFF	; 255
    7b90:	c9 f7       	brne	.-14     	; 0x7b84 <__divsf3_pse+0x74>
    7b92:	88 0f       	add	r24, r24
    7b94:	91 1d       	adc	r25, r1
    7b96:	96 95       	lsr	r25
    7b98:	87 95       	ror	r24
    7b9a:	97 f9       	bld	r25, 7
    7b9c:	08 95       	ret
    7b9e:	e1 e0       	ldi	r30, 0x01	; 1
    7ba0:	66 0f       	add	r22, r22
    7ba2:	77 1f       	adc	r23, r23
    7ba4:	88 1f       	adc	r24, r24
    7ba6:	bb 1f       	adc	r27, r27
    7ba8:	62 17       	cp	r22, r18
    7baa:	73 07       	cpc	r23, r19
    7bac:	84 07       	cpc	r24, r20
    7bae:	ba 07       	cpc	r27, r26
    7bb0:	20 f0       	brcs	.+8      	; 0x7bba <__divsf3_pse+0xaa>
    7bb2:	62 1b       	sub	r22, r18
    7bb4:	73 0b       	sbc	r23, r19
    7bb6:	84 0b       	sbc	r24, r20
    7bb8:	ba 0b       	sbc	r27, r26
    7bba:	ee 1f       	adc	r30, r30
    7bbc:	88 f7       	brcc	.-30     	; 0x7ba0 <__divsf3_pse+0x90>
    7bbe:	e0 95       	com	r30
    7bc0:	08 95       	ret

00007bc2 <__fixsfsi>:
    7bc2:	04 d0       	rcall	.+8      	; 0x7bcc <__fixunssfsi>
    7bc4:	68 94       	set
    7bc6:	b1 11       	cpse	r27, r1
    7bc8:	77 c1       	rjmp	.+750    	; 0x7eb8 <__fp_szero>
    7bca:	08 95       	ret

00007bcc <__fixunssfsi>:
    7bcc:	43 d1       	rcall	.+646    	; 0x7e54 <__fp_splitA>
    7bce:	88 f0       	brcs	.+34     	; 0x7bf2 <__fixunssfsi+0x26>
    7bd0:	9f 57       	subi	r25, 0x7F	; 127
    7bd2:	90 f0       	brcs	.+36     	; 0x7bf8 <__fixunssfsi+0x2c>
    7bd4:	b9 2f       	mov	r27, r25
    7bd6:	99 27       	eor	r25, r25
    7bd8:	b7 51       	subi	r27, 0x17	; 23
    7bda:	a0 f0       	brcs	.+40     	; 0x7c04 <__fixunssfsi+0x38>
    7bdc:	d1 f0       	breq	.+52     	; 0x7c12 <__fixunssfsi+0x46>
    7bde:	66 0f       	add	r22, r22
    7be0:	77 1f       	adc	r23, r23
    7be2:	88 1f       	adc	r24, r24
    7be4:	99 1f       	adc	r25, r25
    7be6:	1a f0       	brmi	.+6      	; 0x7bee <__fixunssfsi+0x22>
    7be8:	ba 95       	dec	r27
    7bea:	c9 f7       	brne	.-14     	; 0x7bde <__fixunssfsi+0x12>
    7bec:	12 c0       	rjmp	.+36     	; 0x7c12 <__fixunssfsi+0x46>
    7bee:	b1 30       	cpi	r27, 0x01	; 1
    7bf0:	81 f0       	breq	.+32     	; 0x7c12 <__fixunssfsi+0x46>
    7bf2:	61 d1       	rcall	.+706    	; 0x7eb6 <__fp_zero>
    7bf4:	b1 e0       	ldi	r27, 0x01	; 1
    7bf6:	08 95       	ret
    7bf8:	5e c1       	rjmp	.+700    	; 0x7eb6 <__fp_zero>
    7bfa:	67 2f       	mov	r22, r23
    7bfc:	78 2f       	mov	r23, r24
    7bfe:	88 27       	eor	r24, r24
    7c00:	b8 5f       	subi	r27, 0xF8	; 248
    7c02:	39 f0       	breq	.+14     	; 0x7c12 <__fixunssfsi+0x46>
    7c04:	b9 3f       	cpi	r27, 0xF9	; 249
    7c06:	cc f3       	brlt	.-14     	; 0x7bfa <__fixunssfsi+0x2e>
    7c08:	86 95       	lsr	r24
    7c0a:	77 95       	ror	r23
    7c0c:	67 95       	ror	r22
    7c0e:	b3 95       	inc	r27
    7c10:	d9 f7       	brne	.-10     	; 0x7c08 <__fixunssfsi+0x3c>
    7c12:	3e f4       	brtc	.+14     	; 0x7c22 <__fixunssfsi+0x56>
    7c14:	90 95       	com	r25
    7c16:	80 95       	com	r24
    7c18:	70 95       	com	r23
    7c1a:	61 95       	neg	r22
    7c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    7c1e:	8f 4f       	sbci	r24, 0xFF	; 255
    7c20:	9f 4f       	sbci	r25, 0xFF	; 255
    7c22:	08 95       	ret

00007c24 <__floatunsisf>:
    7c24:	e8 94       	clt
    7c26:	09 c0       	rjmp	.+18     	; 0x7c3a <__floatsisf+0x12>

00007c28 <__floatsisf>:
    7c28:	97 fb       	bst	r25, 7
    7c2a:	3e f4       	brtc	.+14     	; 0x7c3a <__floatsisf+0x12>
    7c2c:	90 95       	com	r25
    7c2e:	80 95       	com	r24
    7c30:	70 95       	com	r23
    7c32:	61 95       	neg	r22
    7c34:	7f 4f       	sbci	r23, 0xFF	; 255
    7c36:	8f 4f       	sbci	r24, 0xFF	; 255
    7c38:	9f 4f       	sbci	r25, 0xFF	; 255
    7c3a:	99 23       	and	r25, r25
    7c3c:	a9 f0       	breq	.+42     	; 0x7c68 <__floatsisf+0x40>
    7c3e:	f9 2f       	mov	r31, r25
    7c40:	96 e9       	ldi	r25, 0x96	; 150
    7c42:	bb 27       	eor	r27, r27
    7c44:	93 95       	inc	r25
    7c46:	f6 95       	lsr	r31
    7c48:	87 95       	ror	r24
    7c4a:	77 95       	ror	r23
    7c4c:	67 95       	ror	r22
    7c4e:	b7 95       	ror	r27
    7c50:	f1 11       	cpse	r31, r1
    7c52:	f8 cf       	rjmp	.-16     	; 0x7c44 <__floatsisf+0x1c>
    7c54:	fa f4       	brpl	.+62     	; 0x7c94 <__floatsisf+0x6c>
    7c56:	bb 0f       	add	r27, r27
    7c58:	11 f4       	brne	.+4      	; 0x7c5e <__floatsisf+0x36>
    7c5a:	60 ff       	sbrs	r22, 0
    7c5c:	1b c0       	rjmp	.+54     	; 0x7c94 <__floatsisf+0x6c>
    7c5e:	6f 5f       	subi	r22, 0xFF	; 255
    7c60:	7f 4f       	sbci	r23, 0xFF	; 255
    7c62:	8f 4f       	sbci	r24, 0xFF	; 255
    7c64:	9f 4f       	sbci	r25, 0xFF	; 255
    7c66:	16 c0       	rjmp	.+44     	; 0x7c94 <__floatsisf+0x6c>
    7c68:	88 23       	and	r24, r24
    7c6a:	11 f0       	breq	.+4      	; 0x7c70 <__floatsisf+0x48>
    7c6c:	96 e9       	ldi	r25, 0x96	; 150
    7c6e:	11 c0       	rjmp	.+34     	; 0x7c92 <__floatsisf+0x6a>
    7c70:	77 23       	and	r23, r23
    7c72:	21 f0       	breq	.+8      	; 0x7c7c <__floatsisf+0x54>
    7c74:	9e e8       	ldi	r25, 0x8E	; 142
    7c76:	87 2f       	mov	r24, r23
    7c78:	76 2f       	mov	r23, r22
    7c7a:	05 c0       	rjmp	.+10     	; 0x7c86 <__floatsisf+0x5e>
    7c7c:	66 23       	and	r22, r22
    7c7e:	71 f0       	breq	.+28     	; 0x7c9c <__floatsisf+0x74>
    7c80:	96 e8       	ldi	r25, 0x86	; 134
    7c82:	86 2f       	mov	r24, r22
    7c84:	70 e0       	ldi	r23, 0x00	; 0
    7c86:	60 e0       	ldi	r22, 0x00	; 0
    7c88:	2a f0       	brmi	.+10     	; 0x7c94 <__floatsisf+0x6c>
    7c8a:	9a 95       	dec	r25
    7c8c:	66 0f       	add	r22, r22
    7c8e:	77 1f       	adc	r23, r23
    7c90:	88 1f       	adc	r24, r24
    7c92:	da f7       	brpl	.-10     	; 0x7c8a <__floatsisf+0x62>
    7c94:	88 0f       	add	r24, r24
    7c96:	96 95       	lsr	r25
    7c98:	87 95       	ror	r24
    7c9a:	97 f9       	bld	r25, 7
    7c9c:	08 95       	ret

00007c9e <__fp_cmp>:
    7c9e:	99 0f       	add	r25, r25
    7ca0:	00 08       	sbc	r0, r0
    7ca2:	55 0f       	add	r21, r21
    7ca4:	aa 0b       	sbc	r26, r26
    7ca6:	e0 e8       	ldi	r30, 0x80	; 128
    7ca8:	fe ef       	ldi	r31, 0xFE	; 254
    7caa:	16 16       	cp	r1, r22
    7cac:	17 06       	cpc	r1, r23
    7cae:	e8 07       	cpc	r30, r24
    7cb0:	f9 07       	cpc	r31, r25
    7cb2:	c0 f0       	brcs	.+48     	; 0x7ce4 <__fp_cmp+0x46>
    7cb4:	12 16       	cp	r1, r18
    7cb6:	13 06       	cpc	r1, r19
    7cb8:	e4 07       	cpc	r30, r20
    7cba:	f5 07       	cpc	r31, r21
    7cbc:	98 f0       	brcs	.+38     	; 0x7ce4 <__fp_cmp+0x46>
    7cbe:	62 1b       	sub	r22, r18
    7cc0:	73 0b       	sbc	r23, r19
    7cc2:	84 0b       	sbc	r24, r20
    7cc4:	95 0b       	sbc	r25, r21
    7cc6:	39 f4       	brne	.+14     	; 0x7cd6 <__fp_cmp+0x38>
    7cc8:	0a 26       	eor	r0, r26
    7cca:	61 f0       	breq	.+24     	; 0x7ce4 <__fp_cmp+0x46>
    7ccc:	23 2b       	or	r18, r19
    7cce:	24 2b       	or	r18, r20
    7cd0:	25 2b       	or	r18, r21
    7cd2:	21 f4       	brne	.+8      	; 0x7cdc <__fp_cmp+0x3e>
    7cd4:	08 95       	ret
    7cd6:	0a 26       	eor	r0, r26
    7cd8:	09 f4       	brne	.+2      	; 0x7cdc <__fp_cmp+0x3e>
    7cda:	a1 40       	sbci	r26, 0x01	; 1
    7cdc:	a6 95       	lsr	r26
    7cde:	8f ef       	ldi	r24, 0xFF	; 255
    7ce0:	81 1d       	adc	r24, r1
    7ce2:	81 1d       	adc	r24, r1
    7ce4:	08 95       	ret

00007ce6 <__fp_inf>:
    7ce6:	97 f9       	bld	r25, 7
    7ce8:	9f 67       	ori	r25, 0x7F	; 127
    7cea:	80 e8       	ldi	r24, 0x80	; 128
    7cec:	70 e0       	ldi	r23, 0x00	; 0
    7cee:	60 e0       	ldi	r22, 0x00	; 0
    7cf0:	08 95       	ret

00007cf2 <__fp_mintl>:
    7cf2:	88 23       	and	r24, r24
    7cf4:	71 f4       	brne	.+28     	; 0x7d12 <__fp_mintl+0x20>
    7cf6:	77 23       	and	r23, r23
    7cf8:	21 f0       	breq	.+8      	; 0x7d02 <__fp_mintl+0x10>
    7cfa:	98 50       	subi	r25, 0x08	; 8
    7cfc:	87 2b       	or	r24, r23
    7cfe:	76 2f       	mov	r23, r22
    7d00:	07 c0       	rjmp	.+14     	; 0x7d10 <__fp_mintl+0x1e>
    7d02:	66 23       	and	r22, r22
    7d04:	11 f4       	brne	.+4      	; 0x7d0a <__fp_mintl+0x18>
    7d06:	99 27       	eor	r25, r25
    7d08:	0d c0       	rjmp	.+26     	; 0x7d24 <__fp_mintl+0x32>
    7d0a:	90 51       	subi	r25, 0x10	; 16
    7d0c:	86 2b       	or	r24, r22
    7d0e:	70 e0       	ldi	r23, 0x00	; 0
    7d10:	60 e0       	ldi	r22, 0x00	; 0
    7d12:	2a f0       	brmi	.+10     	; 0x7d1e <__fp_mintl+0x2c>
    7d14:	9a 95       	dec	r25
    7d16:	66 0f       	add	r22, r22
    7d18:	77 1f       	adc	r23, r23
    7d1a:	88 1f       	adc	r24, r24
    7d1c:	da f7       	brpl	.-10     	; 0x7d14 <__fp_mintl+0x22>
    7d1e:	88 0f       	add	r24, r24
    7d20:	96 95       	lsr	r25
    7d22:	87 95       	ror	r24
    7d24:	97 f9       	bld	r25, 7
    7d26:	08 95       	ret

00007d28 <__fp_mpack>:
    7d28:	9f 3f       	cpi	r25, 0xFF	; 255
    7d2a:	31 f0       	breq	.+12     	; 0x7d38 <__fp_mpack_finite+0xc>

00007d2c <__fp_mpack_finite>:
    7d2c:	91 50       	subi	r25, 0x01	; 1
    7d2e:	20 f4       	brcc	.+8      	; 0x7d38 <__fp_mpack_finite+0xc>
    7d30:	87 95       	ror	r24
    7d32:	77 95       	ror	r23
    7d34:	67 95       	ror	r22
    7d36:	b7 95       	ror	r27
    7d38:	88 0f       	add	r24, r24
    7d3a:	91 1d       	adc	r25, r1
    7d3c:	96 95       	lsr	r25
    7d3e:	87 95       	ror	r24
    7d40:	97 f9       	bld	r25, 7
    7d42:	08 95       	ret

00007d44 <__fp_nan>:
    7d44:	9f ef       	ldi	r25, 0xFF	; 255
    7d46:	80 ec       	ldi	r24, 0xC0	; 192
    7d48:	08 95       	ret

00007d4a <__fp_powser>:
    7d4a:	df 93       	push	r29
    7d4c:	cf 93       	push	r28
    7d4e:	1f 93       	push	r17
    7d50:	0f 93       	push	r16
    7d52:	ff 92       	push	r15
    7d54:	ef 92       	push	r14
    7d56:	df 92       	push	r13
    7d58:	7b 01       	movw	r14, r22
    7d5a:	8c 01       	movw	r16, r24
    7d5c:	68 94       	set
    7d5e:	05 c0       	rjmp	.+10     	; 0x7d6a <__fp_powser+0x20>
    7d60:	da 2e       	mov	r13, r26
    7d62:	ef 01       	movw	r28, r30
    7d64:	8d d1       	rcall	.+794    	; 0x8080 <__mulsf3x>
    7d66:	fe 01       	movw	r30, r28
    7d68:	e8 94       	clt
    7d6a:	a5 91       	lpm	r26, Z+
    7d6c:	25 91       	lpm	r18, Z+
    7d6e:	35 91       	lpm	r19, Z+
    7d70:	45 91       	lpm	r20, Z+
    7d72:	55 91       	lpm	r21, Z+
    7d74:	ae f3       	brts	.-22     	; 0x7d60 <__fp_powser+0x16>
    7d76:	ef 01       	movw	r28, r30
    7d78:	27 de       	rcall	.-946    	; 0x79c8 <__addsf3x>
    7d7a:	fe 01       	movw	r30, r28
    7d7c:	97 01       	movw	r18, r14
    7d7e:	a8 01       	movw	r20, r16
    7d80:	da 94       	dec	r13
    7d82:	79 f7       	brne	.-34     	; 0x7d62 <__fp_powser+0x18>
    7d84:	df 90       	pop	r13
    7d86:	ef 90       	pop	r14
    7d88:	ff 90       	pop	r15
    7d8a:	0f 91       	pop	r16
    7d8c:	1f 91       	pop	r17
    7d8e:	cf 91       	pop	r28
    7d90:	df 91       	pop	r29
    7d92:	08 95       	ret

00007d94 <__fp_pscA>:
    7d94:	00 24       	eor	r0, r0
    7d96:	0a 94       	dec	r0
    7d98:	16 16       	cp	r1, r22
    7d9a:	17 06       	cpc	r1, r23
    7d9c:	18 06       	cpc	r1, r24
    7d9e:	09 06       	cpc	r0, r25
    7da0:	08 95       	ret

00007da2 <__fp_pscB>:
    7da2:	00 24       	eor	r0, r0
    7da4:	0a 94       	dec	r0
    7da6:	12 16       	cp	r1, r18
    7da8:	13 06       	cpc	r1, r19
    7daa:	14 06       	cpc	r1, r20
    7dac:	05 06       	cpc	r0, r21
    7dae:	08 95       	ret
    7db0:	c9 cf       	rjmp	.-110    	; 0x7d44 <__fp_nan>

00007db2 <__fp_rempio2>:
    7db2:	50 d0       	rcall	.+160    	; 0x7e54 <__fp_splitA>
    7db4:	e8 f3       	brcs	.-6      	; 0x7db0 <__fp_pscB+0xe>
    7db6:	e8 94       	clt
    7db8:	e0 e0       	ldi	r30, 0x00	; 0
    7dba:	bb 27       	eor	r27, r27
    7dbc:	9f 57       	subi	r25, 0x7F	; 127
    7dbe:	f0 f0       	brcs	.+60     	; 0x7dfc <__fp_rempio2+0x4a>
    7dc0:	2a ed       	ldi	r18, 0xDA	; 218
    7dc2:	3f e0       	ldi	r19, 0x0F	; 15
    7dc4:	49 ec       	ldi	r20, 0xC9	; 201
    7dc6:	06 c0       	rjmp	.+12     	; 0x7dd4 <__fp_rempio2+0x22>
    7dc8:	ee 0f       	add	r30, r30
    7dca:	bb 0f       	add	r27, r27
    7dcc:	66 1f       	adc	r22, r22
    7dce:	77 1f       	adc	r23, r23
    7dd0:	88 1f       	adc	r24, r24
    7dd2:	28 f0       	brcs	.+10     	; 0x7dde <__fp_rempio2+0x2c>
    7dd4:	b2 3a       	cpi	r27, 0xA2	; 162
    7dd6:	62 07       	cpc	r22, r18
    7dd8:	73 07       	cpc	r23, r19
    7dda:	84 07       	cpc	r24, r20
    7ddc:	28 f0       	brcs	.+10     	; 0x7de8 <__fp_rempio2+0x36>
    7dde:	b2 5a       	subi	r27, 0xA2	; 162
    7de0:	62 0b       	sbc	r22, r18
    7de2:	73 0b       	sbc	r23, r19
    7de4:	84 0b       	sbc	r24, r20
    7de6:	e3 95       	inc	r30
    7de8:	9a 95       	dec	r25
    7dea:	72 f7       	brpl	.-36     	; 0x7dc8 <__fp_rempio2+0x16>
    7dec:	80 38       	cpi	r24, 0x80	; 128
    7dee:	30 f4       	brcc	.+12     	; 0x7dfc <__fp_rempio2+0x4a>
    7df0:	9a 95       	dec	r25
    7df2:	bb 0f       	add	r27, r27
    7df4:	66 1f       	adc	r22, r22
    7df6:	77 1f       	adc	r23, r23
    7df8:	88 1f       	adc	r24, r24
    7dfa:	d2 f7       	brpl	.-12     	; 0x7df0 <__fp_rempio2+0x3e>
    7dfc:	90 48       	sbci	r25, 0x80	; 128
    7dfe:	96 cf       	rjmp	.-212    	; 0x7d2c <__fp_mpack_finite>

00007e00 <__fp_round>:
    7e00:	09 2e       	mov	r0, r25
    7e02:	03 94       	inc	r0
    7e04:	00 0c       	add	r0, r0
    7e06:	11 f4       	brne	.+4      	; 0x7e0c <__fp_round+0xc>
    7e08:	88 23       	and	r24, r24
    7e0a:	52 f0       	brmi	.+20     	; 0x7e20 <__fp_round+0x20>
    7e0c:	bb 0f       	add	r27, r27
    7e0e:	40 f4       	brcc	.+16     	; 0x7e20 <__fp_round+0x20>
    7e10:	bf 2b       	or	r27, r31
    7e12:	11 f4       	brne	.+4      	; 0x7e18 <__fp_round+0x18>
    7e14:	60 ff       	sbrs	r22, 0
    7e16:	04 c0       	rjmp	.+8      	; 0x7e20 <__fp_round+0x20>
    7e18:	6f 5f       	subi	r22, 0xFF	; 255
    7e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    7e1c:	8f 4f       	sbci	r24, 0xFF	; 255
    7e1e:	9f 4f       	sbci	r25, 0xFF	; 255
    7e20:	08 95       	ret

00007e22 <__fp_sinus>:
    7e22:	ef 93       	push	r30
    7e24:	e0 ff       	sbrs	r30, 0
    7e26:	06 c0       	rjmp	.+12     	; 0x7e34 <__fp_sinus+0x12>
    7e28:	a2 ea       	ldi	r26, 0xA2	; 162
    7e2a:	2a ed       	ldi	r18, 0xDA	; 218
    7e2c:	3f e0       	ldi	r19, 0x0F	; 15
    7e2e:	49 ec       	ldi	r20, 0xC9	; 201
    7e30:	5f eb       	ldi	r21, 0xBF	; 191
    7e32:	ca dd       	rcall	.-1132   	; 0x79c8 <__addsf3x>
    7e34:	e5 df       	rcall	.-54     	; 0x7e00 <__fp_round>
    7e36:	0f 90       	pop	r0
    7e38:	03 94       	inc	r0
    7e3a:	01 fc       	sbrc	r0, 1
    7e3c:	90 58       	subi	r25, 0x80	; 128
    7e3e:	e5 e1       	ldi	r30, 0x15	; 21
    7e40:	f2 e0       	ldi	r31, 0x02	; 2
    7e42:	d2 c1       	rjmp	.+932    	; 0x81e8 <__fp_powsodd>

00007e44 <__fp_split3>:
    7e44:	57 fd       	sbrc	r21, 7
    7e46:	90 58       	subi	r25, 0x80	; 128
    7e48:	44 0f       	add	r20, r20
    7e4a:	55 1f       	adc	r21, r21
    7e4c:	59 f0       	breq	.+22     	; 0x7e64 <__fp_splitA+0x10>
    7e4e:	5f 3f       	cpi	r21, 0xFF	; 255
    7e50:	71 f0       	breq	.+28     	; 0x7e6e <__fp_splitA+0x1a>
    7e52:	47 95       	ror	r20

00007e54 <__fp_splitA>:
    7e54:	88 0f       	add	r24, r24
    7e56:	97 fb       	bst	r25, 7
    7e58:	99 1f       	adc	r25, r25
    7e5a:	61 f0       	breq	.+24     	; 0x7e74 <__fp_splitA+0x20>
    7e5c:	9f 3f       	cpi	r25, 0xFF	; 255
    7e5e:	79 f0       	breq	.+30     	; 0x7e7e <__fp_splitA+0x2a>
    7e60:	87 95       	ror	r24
    7e62:	08 95       	ret
    7e64:	12 16       	cp	r1, r18
    7e66:	13 06       	cpc	r1, r19
    7e68:	14 06       	cpc	r1, r20
    7e6a:	55 1f       	adc	r21, r21
    7e6c:	f2 cf       	rjmp	.-28     	; 0x7e52 <__fp_split3+0xe>
    7e6e:	46 95       	lsr	r20
    7e70:	f1 df       	rcall	.-30     	; 0x7e54 <__fp_splitA>
    7e72:	08 c0       	rjmp	.+16     	; 0x7e84 <__fp_splitA+0x30>
    7e74:	16 16       	cp	r1, r22
    7e76:	17 06       	cpc	r1, r23
    7e78:	18 06       	cpc	r1, r24
    7e7a:	99 1f       	adc	r25, r25
    7e7c:	f1 cf       	rjmp	.-30     	; 0x7e60 <__fp_splitA+0xc>
    7e7e:	86 95       	lsr	r24
    7e80:	71 05       	cpc	r23, r1
    7e82:	61 05       	cpc	r22, r1
    7e84:	08 94       	sec
    7e86:	08 95       	ret

00007e88 <__fp_trunc>:
    7e88:	e5 df       	rcall	.-54     	; 0x7e54 <__fp_splitA>
    7e8a:	a0 f0       	brcs	.+40     	; 0x7eb4 <__fp_trunc+0x2c>
    7e8c:	be e7       	ldi	r27, 0x7E	; 126
    7e8e:	b9 17       	cp	r27, r25
    7e90:	88 f4       	brcc	.+34     	; 0x7eb4 <__fp_trunc+0x2c>
    7e92:	bb 27       	eor	r27, r27
    7e94:	9f 38       	cpi	r25, 0x8F	; 143
    7e96:	60 f4       	brcc	.+24     	; 0x7eb0 <__fp_trunc+0x28>
    7e98:	16 16       	cp	r1, r22
    7e9a:	b1 1d       	adc	r27, r1
    7e9c:	67 2f       	mov	r22, r23
    7e9e:	78 2f       	mov	r23, r24
    7ea0:	88 27       	eor	r24, r24
    7ea2:	98 5f       	subi	r25, 0xF8	; 248
    7ea4:	f7 cf       	rjmp	.-18     	; 0x7e94 <__fp_trunc+0xc>
    7ea6:	86 95       	lsr	r24
    7ea8:	77 95       	ror	r23
    7eaa:	67 95       	ror	r22
    7eac:	b1 1d       	adc	r27, r1
    7eae:	93 95       	inc	r25
    7eb0:	96 39       	cpi	r25, 0x96	; 150
    7eb2:	c8 f3       	brcs	.-14     	; 0x7ea6 <__fp_trunc+0x1e>
    7eb4:	08 95       	ret

00007eb6 <__fp_zero>:
    7eb6:	e8 94       	clt

00007eb8 <__fp_szero>:
    7eb8:	bb 27       	eor	r27, r27
    7eba:	66 27       	eor	r22, r22
    7ebc:	77 27       	eor	r23, r23
    7ebe:	cb 01       	movw	r24, r22
    7ec0:	97 f9       	bld	r25, 7
    7ec2:	08 95       	ret

00007ec4 <__gesf2>:
    7ec4:	ec de       	rcall	.-552    	; 0x7c9e <__fp_cmp>
    7ec6:	08 f4       	brcc	.+2      	; 0x7eca <__gesf2+0x6>
    7ec8:	8f ef       	ldi	r24, 0xFF	; 255
    7eca:	08 95       	ret
    7ecc:	63 df       	rcall	.-314    	; 0x7d94 <__fp_pscA>
    7ece:	19 f0       	breq	.+6      	; 0x7ed6 <__gesf2+0x12>
    7ed0:	68 df       	rcall	.-304    	; 0x7da2 <__fp_pscB>
    7ed2:	09 f0       	breq	.+2      	; 0x7ed6 <__gesf2+0x12>
    7ed4:	37 cf       	rjmp	.-402    	; 0x7d44 <__fp_nan>
    7ed6:	07 cf       	rjmp	.-498    	; 0x7ce6 <__fp_inf>
    7ed8:	b9 01       	movw	r22, r18
    7eda:	ca 01       	movw	r24, r20
    7edc:	25 cf       	rjmp	.-438    	; 0x7d28 <__fp_mpack>

00007ede <hypot>:
    7ede:	9f 77       	andi	r25, 0x7F	; 127
    7ee0:	5f 77       	andi	r21, 0x7F	; 127
    7ee2:	b0 df       	rcall	.-160    	; 0x7e44 <__fp_split3>
    7ee4:	98 f3       	brcs	.-26     	; 0x7ecc <__gesf2+0x8>
    7ee6:	99 23       	and	r25, r25
    7ee8:	b9 f3       	breq	.-18     	; 0x7ed8 <__gesf2+0x14>
    7eea:	55 23       	and	r21, r21
    7eec:	b9 f3       	breq	.-18     	; 0x7edc <__gesf2+0x18>
    7eee:	ff 27       	eor	r31, r31
    7ef0:	95 17       	cp	r25, r21
    7ef2:	58 f4       	brcc	.+22     	; 0x7f0a <hypot+0x2c>
    7ef4:	e5 2f       	mov	r30, r21
    7ef6:	e9 1b       	sub	r30, r25
    7ef8:	ed 30       	cpi	r30, 0x0D	; 13
    7efa:	70 f7       	brcc	.-36     	; 0x7ed8 <__gesf2+0x14>
    7efc:	5e 3b       	cpi	r21, 0xBE	; 190
    7efe:	10 f0       	brcs	.+4      	; 0x7f04 <hypot+0x26>
    7f00:	f1 e4       	ldi	r31, 0x41	; 65
    7f02:	1c c0       	rjmp	.+56     	; 0x7f3c <hypot+0x5e>
    7f04:	90 34       	cpi	r25, 0x40	; 64
    7f06:	e0 f4       	brcc	.+56     	; 0x7f40 <hypot+0x62>
    7f08:	0a c0       	rjmp	.+20     	; 0x7f1e <hypot+0x40>
    7f0a:	e9 2f       	mov	r30, r25
    7f0c:	e5 1b       	sub	r30, r21
    7f0e:	ed 30       	cpi	r30, 0x0D	; 13
    7f10:	28 f7       	brcc	.-54     	; 0x7edc <__gesf2+0x18>
    7f12:	9e 3b       	cpi	r25, 0xBE	; 190
    7f14:	10 f0       	brcs	.+4      	; 0x7f1a <hypot+0x3c>
    7f16:	f1 e4       	ldi	r31, 0x41	; 65
    7f18:	11 c0       	rjmp	.+34     	; 0x7f3c <hypot+0x5e>
    7f1a:	50 34       	cpi	r21, 0x40	; 64
    7f1c:	88 f4       	brcc	.+34     	; 0x7f40 <hypot+0x62>
    7f1e:	f9 ea       	ldi	r31, 0xA9	; 169
    7f20:	88 23       	and	r24, r24
    7f22:	2a f0       	brmi	.+10     	; 0x7f2e <hypot+0x50>
    7f24:	9a 95       	dec	r25
    7f26:	66 0f       	add	r22, r22
    7f28:	77 1f       	adc	r23, r23
    7f2a:	88 1f       	adc	r24, r24
    7f2c:	da f7       	brpl	.-10     	; 0x7f24 <hypot+0x46>
    7f2e:	44 23       	and	r20, r20
    7f30:	2a f0       	brmi	.+10     	; 0x7f3c <hypot+0x5e>
    7f32:	5a 95       	dec	r21
    7f34:	22 0f       	add	r18, r18
    7f36:	33 1f       	adc	r19, r19
    7f38:	44 1f       	adc	r20, r20
    7f3a:	da f7       	brpl	.-10     	; 0x7f32 <hypot+0x54>
    7f3c:	9f 1b       	sub	r25, r31
    7f3e:	5f 1b       	sub	r21, r31
    7f40:	ff 93       	push	r31
    7f42:	1f 93       	push	r17
    7f44:	0f 93       	push	r16
    7f46:	ff 92       	push	r15
    7f48:	ef 92       	push	r14
    7f4a:	79 01       	movw	r14, r18
    7f4c:	8a 01       	movw	r16, r20
    7f4e:	bb 27       	eor	r27, r27
    7f50:	ab 2f       	mov	r26, r27
    7f52:	9b 01       	movw	r18, r22
    7f54:	ac 01       	movw	r20, r24
    7f56:	96 d0       	rcall	.+300    	; 0x8084 <__mulsf3_pse>
    7f58:	97 01       	movw	r18, r14
    7f5a:	a8 01       	movw	r20, r16
    7f5c:	bf 93       	push	r27
    7f5e:	7b 01       	movw	r14, r22
    7f60:	8c 01       	movw	r16, r24
    7f62:	aa 27       	eor	r26, r26
    7f64:	ba 2f       	mov	r27, r26
    7f66:	b9 01       	movw	r22, r18
    7f68:	ca 01       	movw	r24, r20
    7f6a:	8c d0       	rcall	.+280    	; 0x8084 <__mulsf3_pse>
    7f6c:	af 91       	pop	r26
    7f6e:	97 01       	movw	r18, r14
    7f70:	a8 01       	movw	r20, r16
    7f72:	ef 90       	pop	r14
    7f74:	ff 90       	pop	r15
    7f76:	0f 91       	pop	r16
    7f78:	1f 91       	pop	r17
    7f7a:	26 dd       	rcall	.-1460   	; 0x79c8 <__addsf3x>
    7f7c:	41 df       	rcall	.-382    	; 0x7e00 <__fp_round>
    7f7e:	e1 d0       	rcall	.+450    	; 0x8142 <sqrt>
    7f80:	4f 91       	pop	r20
    7f82:	40 ff       	sbrs	r20, 0
    7f84:	08 95       	ret
    7f86:	55 27       	eor	r21, r21
    7f88:	47 fd       	sbrc	r20, 7
    7f8a:	50 95       	com	r21
    7f8c:	09 c0       	rjmp	.+18     	; 0x7fa0 <ldexp>

00007f8e <inverse>:
    7f8e:	9b 01       	movw	r18, r22
    7f90:	ac 01       	movw	r20, r24
    7f92:	60 e0       	ldi	r22, 0x00	; 0
    7f94:	70 e0       	ldi	r23, 0x00	; 0
    7f96:	80 e8       	ldi	r24, 0x80	; 128
    7f98:	9f e3       	ldi	r25, 0x3F	; 63
    7f9a:	ab cd       	rjmp	.-1194   	; 0x7af2 <__divsf3>
    7f9c:	a4 ce       	rjmp	.-696    	; 0x7ce6 <__fp_inf>
    7f9e:	c4 ce       	rjmp	.-632    	; 0x7d28 <__fp_mpack>

00007fa0 <ldexp>:
    7fa0:	59 df       	rcall	.-334    	; 0x7e54 <__fp_splitA>
    7fa2:	e8 f3       	brcs	.-6      	; 0x7f9e <inverse+0x10>
    7fa4:	99 23       	and	r25, r25
    7fa6:	d9 f3       	breq	.-10     	; 0x7f9e <inverse+0x10>
    7fa8:	94 0f       	add	r25, r20
    7faa:	51 1d       	adc	r21, r1
    7fac:	bb f3       	brvs	.-18     	; 0x7f9c <inverse+0xe>
    7fae:	91 50       	subi	r25, 0x01	; 1
    7fb0:	50 40       	sbci	r21, 0x00	; 0
    7fb2:	94 f0       	brlt	.+36     	; 0x7fd8 <ldexp+0x38>
    7fb4:	59 f0       	breq	.+22     	; 0x7fcc <ldexp+0x2c>
    7fb6:	88 23       	and	r24, r24
    7fb8:	32 f0       	brmi	.+12     	; 0x7fc6 <ldexp+0x26>
    7fba:	66 0f       	add	r22, r22
    7fbc:	77 1f       	adc	r23, r23
    7fbe:	88 1f       	adc	r24, r24
    7fc0:	91 50       	subi	r25, 0x01	; 1
    7fc2:	50 40       	sbci	r21, 0x00	; 0
    7fc4:	c1 f7       	brne	.-16     	; 0x7fb6 <ldexp+0x16>
    7fc6:	9e 3f       	cpi	r25, 0xFE	; 254
    7fc8:	51 05       	cpc	r21, r1
    7fca:	44 f7       	brge	.-48     	; 0x7f9c <inverse+0xe>
    7fcc:	88 0f       	add	r24, r24
    7fce:	91 1d       	adc	r25, r1
    7fd0:	96 95       	lsr	r25
    7fd2:	87 95       	ror	r24
    7fd4:	97 f9       	bld	r25, 7
    7fd6:	08 95       	ret
    7fd8:	5f 3f       	cpi	r21, 0xFF	; 255
    7fda:	ac f0       	brlt	.+42     	; 0x8006 <ldexp+0x66>
    7fdc:	98 3e       	cpi	r25, 0xE8	; 232
    7fde:	9c f0       	brlt	.+38     	; 0x8006 <ldexp+0x66>
    7fe0:	bb 27       	eor	r27, r27
    7fe2:	86 95       	lsr	r24
    7fe4:	77 95       	ror	r23
    7fe6:	67 95       	ror	r22
    7fe8:	b7 95       	ror	r27
    7fea:	08 f4       	brcc	.+2      	; 0x7fee <ldexp+0x4e>
    7fec:	b1 60       	ori	r27, 0x01	; 1
    7fee:	93 95       	inc	r25
    7ff0:	c1 f7       	brne	.-16     	; 0x7fe2 <ldexp+0x42>
    7ff2:	bb 0f       	add	r27, r27
    7ff4:	58 f7       	brcc	.-42     	; 0x7fcc <ldexp+0x2c>
    7ff6:	11 f4       	brne	.+4      	; 0x7ffc <ldexp+0x5c>
    7ff8:	60 ff       	sbrs	r22, 0
    7ffa:	e8 cf       	rjmp	.-48     	; 0x7fcc <ldexp+0x2c>
    7ffc:	6f 5f       	subi	r22, 0xFF	; 255
    7ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    8000:	8f 4f       	sbci	r24, 0xFF	; 255
    8002:	9f 4f       	sbci	r25, 0xFF	; 255
    8004:	e3 cf       	rjmp	.-58     	; 0x7fcc <ldexp+0x2c>
    8006:	58 cf       	rjmp	.-336    	; 0x7eb8 <__fp_szero>

00008008 <lround>:
    8008:	25 df       	rcall	.-438    	; 0x7e54 <__fp_splitA>
    800a:	58 f1       	brcs	.+86     	; 0x8062 <lround+0x5a>
    800c:	9e 57       	subi	r25, 0x7E	; 126
    800e:	58 f1       	brcs	.+86     	; 0x8066 <lround+0x5e>
    8010:	98 51       	subi	r25, 0x18	; 24
    8012:	a0 f0       	brcs	.+40     	; 0x803c <lround+0x34>
    8014:	e9 f0       	breq	.+58     	; 0x8050 <lround+0x48>
    8016:	98 30       	cpi	r25, 0x08	; 8
    8018:	20 f5       	brcc	.+72     	; 0x8062 <lround+0x5a>
    801a:	09 2e       	mov	r0, r25
    801c:	99 27       	eor	r25, r25
    801e:	66 0f       	add	r22, r22
    8020:	77 1f       	adc	r23, r23
    8022:	88 1f       	adc	r24, r24
    8024:	99 1f       	adc	r25, r25
    8026:	0a 94       	dec	r0
    8028:	d1 f7       	brne	.-12     	; 0x801e <lround+0x16>
    802a:	12 c0       	rjmp	.+36     	; 0x8050 <lround+0x48>
    802c:	06 2e       	mov	r0, r22
    802e:	67 2f       	mov	r22, r23
    8030:	78 2f       	mov	r23, r24
    8032:	88 27       	eor	r24, r24
    8034:	98 5f       	subi	r25, 0xF8	; 248
    8036:	11 f4       	brne	.+4      	; 0x803c <lround+0x34>
    8038:	00 0c       	add	r0, r0
    803a:	07 c0       	rjmp	.+14     	; 0x804a <lround+0x42>
    803c:	99 3f       	cpi	r25, 0xF9	; 249
    803e:	b4 f3       	brlt	.-20     	; 0x802c <lround+0x24>
    8040:	86 95       	lsr	r24
    8042:	77 95       	ror	r23
    8044:	67 95       	ror	r22
    8046:	93 95       	inc	r25
    8048:	d9 f7       	brne	.-10     	; 0x8040 <lround+0x38>
    804a:	61 1d       	adc	r22, r1
    804c:	71 1d       	adc	r23, r1
    804e:	81 1d       	adc	r24, r1
    8050:	3e f4       	brtc	.+14     	; 0x8060 <lround+0x58>
    8052:	90 95       	com	r25
    8054:	80 95       	com	r24
    8056:	70 95       	com	r23
    8058:	61 95       	neg	r22
    805a:	7f 4f       	sbci	r23, 0xFF	; 255
    805c:	8f 4f       	sbci	r24, 0xFF	; 255
    805e:	9f 4f       	sbci	r25, 0xFF	; 255
    8060:	08 95       	ret
    8062:	68 94       	set
    8064:	29 cf       	rjmp	.-430    	; 0x7eb8 <__fp_szero>
    8066:	27 cf       	rjmp	.-434    	; 0x7eb6 <__fp_zero>

00008068 <__mulsf3>:
    8068:	0b d0       	rcall	.+22     	; 0x8080 <__mulsf3x>
    806a:	ca ce       	rjmp	.-620    	; 0x7e00 <__fp_round>
    806c:	93 de       	rcall	.-730    	; 0x7d94 <__fp_pscA>
    806e:	28 f0       	brcs	.+10     	; 0x807a <__mulsf3+0x12>
    8070:	98 de       	rcall	.-720    	; 0x7da2 <__fp_pscB>
    8072:	18 f0       	brcs	.+6      	; 0x807a <__mulsf3+0x12>
    8074:	95 23       	and	r25, r21
    8076:	09 f0       	breq	.+2      	; 0x807a <__mulsf3+0x12>
    8078:	36 ce       	rjmp	.-916    	; 0x7ce6 <__fp_inf>
    807a:	64 ce       	rjmp	.-824    	; 0x7d44 <__fp_nan>
    807c:	11 24       	eor	r1, r1
    807e:	1c cf       	rjmp	.-456    	; 0x7eb8 <__fp_szero>

00008080 <__mulsf3x>:
    8080:	e1 de       	rcall	.-574    	; 0x7e44 <__fp_split3>
    8082:	a0 f3       	brcs	.-24     	; 0x806c <__mulsf3+0x4>

00008084 <__mulsf3_pse>:
    8084:	95 9f       	mul	r25, r21
    8086:	d1 f3       	breq	.-12     	; 0x807c <__mulsf3+0x14>
    8088:	95 0f       	add	r25, r21
    808a:	50 e0       	ldi	r21, 0x00	; 0
    808c:	55 1f       	adc	r21, r21
    808e:	62 9f       	mul	r22, r18
    8090:	f0 01       	movw	r30, r0
    8092:	72 9f       	mul	r23, r18
    8094:	bb 27       	eor	r27, r27
    8096:	f0 0d       	add	r31, r0
    8098:	b1 1d       	adc	r27, r1
    809a:	63 9f       	mul	r22, r19
    809c:	aa 27       	eor	r26, r26
    809e:	f0 0d       	add	r31, r0
    80a0:	b1 1d       	adc	r27, r1
    80a2:	aa 1f       	adc	r26, r26
    80a4:	64 9f       	mul	r22, r20
    80a6:	66 27       	eor	r22, r22
    80a8:	b0 0d       	add	r27, r0
    80aa:	a1 1d       	adc	r26, r1
    80ac:	66 1f       	adc	r22, r22
    80ae:	82 9f       	mul	r24, r18
    80b0:	22 27       	eor	r18, r18
    80b2:	b0 0d       	add	r27, r0
    80b4:	a1 1d       	adc	r26, r1
    80b6:	62 1f       	adc	r22, r18
    80b8:	73 9f       	mul	r23, r19
    80ba:	b0 0d       	add	r27, r0
    80bc:	a1 1d       	adc	r26, r1
    80be:	62 1f       	adc	r22, r18
    80c0:	83 9f       	mul	r24, r19
    80c2:	a0 0d       	add	r26, r0
    80c4:	61 1d       	adc	r22, r1
    80c6:	22 1f       	adc	r18, r18
    80c8:	74 9f       	mul	r23, r20
    80ca:	33 27       	eor	r19, r19
    80cc:	a0 0d       	add	r26, r0
    80ce:	61 1d       	adc	r22, r1
    80d0:	23 1f       	adc	r18, r19
    80d2:	84 9f       	mul	r24, r20
    80d4:	60 0d       	add	r22, r0
    80d6:	21 1d       	adc	r18, r1
    80d8:	82 2f       	mov	r24, r18
    80da:	76 2f       	mov	r23, r22
    80dc:	6a 2f       	mov	r22, r26
    80de:	11 24       	eor	r1, r1
    80e0:	9f 57       	subi	r25, 0x7F	; 127
    80e2:	50 40       	sbci	r21, 0x00	; 0
    80e4:	8a f0       	brmi	.+34     	; 0x8108 <__mulsf3_pse+0x84>
    80e6:	e1 f0       	breq	.+56     	; 0x8120 <__mulsf3_pse+0x9c>
    80e8:	88 23       	and	r24, r24
    80ea:	4a f0       	brmi	.+18     	; 0x80fe <__mulsf3_pse+0x7a>
    80ec:	ee 0f       	add	r30, r30
    80ee:	ff 1f       	adc	r31, r31
    80f0:	bb 1f       	adc	r27, r27
    80f2:	66 1f       	adc	r22, r22
    80f4:	77 1f       	adc	r23, r23
    80f6:	88 1f       	adc	r24, r24
    80f8:	91 50       	subi	r25, 0x01	; 1
    80fa:	50 40       	sbci	r21, 0x00	; 0
    80fc:	a9 f7       	brne	.-22     	; 0x80e8 <__mulsf3_pse+0x64>
    80fe:	9e 3f       	cpi	r25, 0xFE	; 254
    8100:	51 05       	cpc	r21, r1
    8102:	70 f0       	brcs	.+28     	; 0x8120 <__mulsf3_pse+0x9c>
    8104:	f0 cd       	rjmp	.-1056   	; 0x7ce6 <__fp_inf>
    8106:	d8 ce       	rjmp	.-592    	; 0x7eb8 <__fp_szero>
    8108:	5f 3f       	cpi	r21, 0xFF	; 255
    810a:	ec f3       	brlt	.-6      	; 0x8106 <__mulsf3_pse+0x82>
    810c:	98 3e       	cpi	r25, 0xE8	; 232
    810e:	dc f3       	brlt	.-10     	; 0x8106 <__mulsf3_pse+0x82>
    8110:	86 95       	lsr	r24
    8112:	77 95       	ror	r23
    8114:	67 95       	ror	r22
    8116:	b7 95       	ror	r27
    8118:	f7 95       	ror	r31
    811a:	e7 95       	ror	r30
    811c:	9f 5f       	subi	r25, 0xFF	; 255
    811e:	c1 f7       	brne	.-16     	; 0x8110 <__mulsf3_pse+0x8c>
    8120:	fe 2b       	or	r31, r30
    8122:	88 0f       	add	r24, r24
    8124:	91 1d       	adc	r25, r1
    8126:	96 95       	lsr	r25
    8128:	87 95       	ror	r24
    812a:	97 f9       	bld	r25, 7
    812c:	08 95       	ret

0000812e <sin>:
    812e:	9f 93       	push	r25
    8130:	40 de       	rcall	.-896    	; 0x7db2 <__fp_rempio2>
    8132:	0f 90       	pop	r0
    8134:	07 fc       	sbrc	r0, 7
    8136:	ee 5f       	subi	r30, 0xFE	; 254
    8138:	74 ce       	rjmp	.-792    	; 0x7e22 <__fp_sinus>
    813a:	11 f4       	brne	.+4      	; 0x8140 <sin+0x12>
    813c:	0e f4       	brtc	.+2      	; 0x8140 <sin+0x12>
    813e:	02 ce       	rjmp	.-1020   	; 0x7d44 <__fp_nan>
    8140:	f3 cd       	rjmp	.-1050   	; 0x7d28 <__fp_mpack>

00008142 <sqrt>:
    8142:	88 de       	rcall	.-752    	; 0x7e54 <__fp_splitA>
    8144:	d0 f3       	brcs	.-12     	; 0x813a <sin+0xc>
    8146:	99 23       	and	r25, r25
    8148:	d9 f3       	breq	.-10     	; 0x8140 <sin+0x12>
    814a:	ce f3       	brts	.-14     	; 0x813e <sin+0x10>
    814c:	9f 57       	subi	r25, 0x7F	; 127
    814e:	55 0b       	sbc	r21, r21
    8150:	87 ff       	sbrs	r24, 7
    8152:	43 d0       	rcall	.+134    	; 0x81da <__fp_norm2>
    8154:	00 24       	eor	r0, r0
    8156:	a0 e6       	ldi	r26, 0x60	; 96
    8158:	40 ea       	ldi	r20, 0xA0	; 160
    815a:	90 01       	movw	r18, r0
    815c:	80 58       	subi	r24, 0x80	; 128
    815e:	56 95       	lsr	r21
    8160:	97 95       	ror	r25
    8162:	28 f4       	brcc	.+10     	; 0x816e <sqrt+0x2c>
    8164:	80 5c       	subi	r24, 0xC0	; 192
    8166:	66 0f       	add	r22, r22
    8168:	77 1f       	adc	r23, r23
    816a:	88 1f       	adc	r24, r24
    816c:	20 f0       	brcs	.+8      	; 0x8176 <sqrt+0x34>
    816e:	26 17       	cp	r18, r22
    8170:	37 07       	cpc	r19, r23
    8172:	48 07       	cpc	r20, r24
    8174:	30 f4       	brcc	.+12     	; 0x8182 <sqrt+0x40>
    8176:	62 1b       	sub	r22, r18
    8178:	73 0b       	sbc	r23, r19
    817a:	84 0b       	sbc	r24, r20
    817c:	20 29       	or	r18, r0
    817e:	31 29       	or	r19, r1
    8180:	4a 2b       	or	r20, r26
    8182:	a6 95       	lsr	r26
    8184:	17 94       	ror	r1
    8186:	07 94       	ror	r0
    8188:	20 25       	eor	r18, r0
    818a:	31 25       	eor	r19, r1
    818c:	4a 27       	eor	r20, r26
    818e:	58 f7       	brcc	.-42     	; 0x8166 <sqrt+0x24>
    8190:	66 0f       	add	r22, r22
    8192:	77 1f       	adc	r23, r23
    8194:	88 1f       	adc	r24, r24
    8196:	20 f0       	brcs	.+8      	; 0x81a0 <sqrt+0x5e>
    8198:	26 17       	cp	r18, r22
    819a:	37 07       	cpc	r19, r23
    819c:	48 07       	cpc	r20, r24
    819e:	30 f4       	brcc	.+12     	; 0x81ac <sqrt+0x6a>
    81a0:	62 0b       	sbc	r22, r18
    81a2:	73 0b       	sbc	r23, r19
    81a4:	84 0b       	sbc	r24, r20
    81a6:	20 0d       	add	r18, r0
    81a8:	31 1d       	adc	r19, r1
    81aa:	41 1d       	adc	r20, r1
    81ac:	a0 95       	com	r26
    81ae:	81 f7       	brne	.-32     	; 0x8190 <sqrt+0x4e>
    81b0:	b9 01       	movw	r22, r18
    81b2:	84 2f       	mov	r24, r20
    81b4:	91 58       	subi	r25, 0x81	; 129
    81b6:	88 0f       	add	r24, r24
    81b8:	96 95       	lsr	r25
    81ba:	87 95       	ror	r24
    81bc:	08 95       	ret

000081be <square>:
    81be:	9b 01       	movw	r18, r22
    81c0:	ac 01       	movw	r20, r24
    81c2:	52 cf       	rjmp	.-348    	; 0x8068 <__mulsf3>

000081c4 <trunc>:
    81c4:	61 de       	rcall	.-830    	; 0x7e88 <__fp_trunc>
    81c6:	20 f0       	brcs	.+8      	; 0x81d0 <trunc+0xc>
    81c8:	9f 37       	cpi	r25, 0x7F	; 127
    81ca:	08 f4       	brcc	.+2      	; 0x81ce <trunc+0xa>
    81cc:	75 ce       	rjmp	.-790    	; 0x7eb8 <__fp_szero>
    81ce:	91 cd       	rjmp	.-1246   	; 0x7cf2 <__fp_mintl>
    81d0:	ab cd       	rjmp	.-1194   	; 0x7d28 <__fp_mpack>

000081d2 <__unordsf2>:
    81d2:	65 dd       	rcall	.-1334   	; 0x7c9e <__fp_cmp>
    81d4:	88 0b       	sbc	r24, r24
    81d6:	99 0b       	sbc	r25, r25
    81d8:	08 95       	ret

000081da <__fp_norm2>:
    81da:	91 50       	subi	r25, 0x01	; 1
    81dc:	50 40       	sbci	r21, 0x00	; 0
    81de:	66 0f       	add	r22, r22
    81e0:	77 1f       	adc	r23, r23
    81e2:	88 1f       	adc	r24, r24
    81e4:	d2 f7       	brpl	.-12     	; 0x81da <__fp_norm2>
    81e6:	08 95       	ret

000081e8 <__fp_powsodd>:
    81e8:	9f 93       	push	r25
    81ea:	8f 93       	push	r24
    81ec:	7f 93       	push	r23
    81ee:	6f 93       	push	r22
    81f0:	ff 93       	push	r31
    81f2:	ef 93       	push	r30
    81f4:	9b 01       	movw	r18, r22
    81f6:	ac 01       	movw	r20, r24
    81f8:	37 df       	rcall	.-402    	; 0x8068 <__mulsf3>
    81fa:	ef 91       	pop	r30
    81fc:	ff 91       	pop	r31
    81fe:	a5 dd       	rcall	.-1206   	; 0x7d4a <__fp_powser>
    8200:	2f 91       	pop	r18
    8202:	3f 91       	pop	r19
    8204:	4f 91       	pop	r20
    8206:	5f 91       	pop	r21
    8208:	2f cf       	rjmp	.-418    	; 0x8068 <__mulsf3>

0000820a <__mulsi3>:
    820a:	62 9f       	mul	r22, r18
    820c:	d0 01       	movw	r26, r0
    820e:	73 9f       	mul	r23, r19
    8210:	f0 01       	movw	r30, r0
    8212:	82 9f       	mul	r24, r18
    8214:	e0 0d       	add	r30, r0
    8216:	f1 1d       	adc	r31, r1
    8218:	64 9f       	mul	r22, r20
    821a:	e0 0d       	add	r30, r0
    821c:	f1 1d       	adc	r31, r1
    821e:	92 9f       	mul	r25, r18
    8220:	f0 0d       	add	r31, r0
    8222:	83 9f       	mul	r24, r19
    8224:	f0 0d       	add	r31, r0
    8226:	74 9f       	mul	r23, r20
    8228:	f0 0d       	add	r31, r0
    822a:	65 9f       	mul	r22, r21
    822c:	f0 0d       	add	r31, r0
    822e:	99 27       	eor	r25, r25
    8230:	72 9f       	mul	r23, r18
    8232:	b0 0d       	add	r27, r0
    8234:	e1 1d       	adc	r30, r1
    8236:	f9 1f       	adc	r31, r25
    8238:	63 9f       	mul	r22, r19
    823a:	b0 0d       	add	r27, r0
    823c:	e1 1d       	adc	r30, r1
    823e:	f9 1f       	adc	r31, r25
    8240:	bd 01       	movw	r22, r26
    8242:	cf 01       	movw	r24, r30
    8244:	11 24       	eor	r1, r1
    8246:	08 95       	ret

00008248 <__udivmodsi4>:
    8248:	a1 e2       	ldi	r26, 0x21	; 33
    824a:	1a 2e       	mov	r1, r26
    824c:	aa 1b       	sub	r26, r26
    824e:	bb 1b       	sub	r27, r27
    8250:	fd 01       	movw	r30, r26
    8252:	0d c0       	rjmp	.+26     	; 0x826e <__udivmodsi4_ep>

00008254 <__udivmodsi4_loop>:
    8254:	aa 1f       	adc	r26, r26
    8256:	bb 1f       	adc	r27, r27
    8258:	ee 1f       	adc	r30, r30
    825a:	ff 1f       	adc	r31, r31
    825c:	a2 17       	cp	r26, r18
    825e:	b3 07       	cpc	r27, r19
    8260:	e4 07       	cpc	r30, r20
    8262:	f5 07       	cpc	r31, r21
    8264:	20 f0       	brcs	.+8      	; 0x826e <__udivmodsi4_ep>
    8266:	a2 1b       	sub	r26, r18
    8268:	b3 0b       	sbc	r27, r19
    826a:	e4 0b       	sbc	r30, r20
    826c:	f5 0b       	sbc	r31, r21

0000826e <__udivmodsi4_ep>:
    826e:	66 1f       	adc	r22, r22
    8270:	77 1f       	adc	r23, r23
    8272:	88 1f       	adc	r24, r24
    8274:	99 1f       	adc	r25, r25
    8276:	1a 94       	dec	r1
    8278:	69 f7       	brne	.-38     	; 0x8254 <__udivmodsi4_loop>
    827a:	60 95       	com	r22
    827c:	70 95       	com	r23
    827e:	80 95       	com	r24
    8280:	90 95       	com	r25
    8282:	9b 01       	movw	r18, r22
    8284:	ac 01       	movw	r20, r24
    8286:	bd 01       	movw	r22, r26
    8288:	cf 01       	movw	r24, r30
    828a:	08 95       	ret

0000828c <__prologue_saves__>:
    828c:	2f 92       	push	r2
    828e:	3f 92       	push	r3
    8290:	4f 92       	push	r4
    8292:	5f 92       	push	r5
    8294:	6f 92       	push	r6
    8296:	7f 92       	push	r7
    8298:	8f 92       	push	r8
    829a:	9f 92       	push	r9
    829c:	af 92       	push	r10
    829e:	bf 92       	push	r11
    82a0:	cf 92       	push	r12
    82a2:	df 92       	push	r13
    82a4:	ef 92       	push	r14
    82a6:	ff 92       	push	r15
    82a8:	0f 93       	push	r16
    82aa:	1f 93       	push	r17
    82ac:	cf 93       	push	r28
    82ae:	df 93       	push	r29
    82b0:	cd b7       	in	r28, 0x3d	; 61
    82b2:	de b7       	in	r29, 0x3e	; 62
    82b4:	ca 1b       	sub	r28, r26
    82b6:	db 0b       	sbc	r29, r27
    82b8:	0f b6       	in	r0, 0x3f	; 63
    82ba:	f8 94       	cli
    82bc:	de bf       	out	0x3e, r29	; 62
    82be:	0f be       	out	0x3f, r0	; 63
    82c0:	cd bf       	out	0x3d, r28	; 61
    82c2:	19 94       	eijmp

000082c4 <__epilogue_restores__>:
    82c4:	2a 88       	ldd	r2, Y+18	; 0x12
    82c6:	39 88       	ldd	r3, Y+17	; 0x11
    82c8:	48 88       	ldd	r4, Y+16	; 0x10
    82ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    82cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    82ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    82d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    82d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    82d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    82d6:	b9 84       	ldd	r11, Y+9	; 0x09
    82d8:	c8 84       	ldd	r12, Y+8	; 0x08
    82da:	df 80       	ldd	r13, Y+7	; 0x07
    82dc:	ee 80       	ldd	r14, Y+6	; 0x06
    82de:	fd 80       	ldd	r15, Y+5	; 0x05
    82e0:	0c 81       	ldd	r16, Y+4	; 0x04
    82e2:	1b 81       	ldd	r17, Y+3	; 0x03
    82e4:	aa 81       	ldd	r26, Y+2	; 0x02
    82e6:	b9 81       	ldd	r27, Y+1	; 0x01
    82e8:	ce 0f       	add	r28, r30
    82ea:	d1 1d       	adc	r29, r1
    82ec:	0f b6       	in	r0, 0x3f	; 63
    82ee:	f8 94       	cli
    82f0:	de bf       	out	0x3e, r29	; 62
    82f2:	0f be       	out	0x3f, r0	; 63
    82f4:	cd bf       	out	0x3d, r28	; 61
    82f6:	ed 01       	movw	r28, r26
    82f8:	08 95       	ret

000082fa <strtod>:
    82fa:	8f 92       	push	r8
    82fc:	9f 92       	push	r9
    82fe:	af 92       	push	r10
    8300:	bf 92       	push	r11
    8302:	cf 92       	push	r12
    8304:	df 92       	push	r13
    8306:	ef 92       	push	r14
    8308:	ff 92       	push	r15
    830a:	0f 93       	push	r16
    830c:	1f 93       	push	r17
    830e:	cf 93       	push	r28
    8310:	df 93       	push	r29
    8312:	ec 01       	movw	r28, r24
    8314:	5b 01       	movw	r10, r22
    8316:	61 15       	cp	r22, r1
    8318:	71 05       	cpc	r23, r1
    831a:	19 f0       	breq	.+6      	; 0x8322 <strtod+0x28>
    831c:	fb 01       	movw	r30, r22
    831e:	80 83       	st	Z, r24
    8320:	91 83       	std	Z+1, r25	; 0x01
    8322:	f9 90       	ld	r15, Y+
    8324:	8f 2d       	mov	r24, r15
    8326:	90 e0       	ldi	r25, 0x00	; 0
    8328:	0e 94 e1 43 	call	0x87c2	; 0x87c2 <isspace>
    832c:	89 2b       	or	r24, r25
    832e:	c9 f7       	brne	.-14     	; 0x8322 <strtod+0x28>
    8330:	fd e2       	ldi	r31, 0x2D	; 45
    8332:	ff 16       	cp	r15, r31
    8334:	21 f4       	brne	.+8      	; 0x833e <strtod+0x44>
    8336:	f9 90       	ld	r15, Y+
    8338:	ee 24       	eor	r14, r14
    833a:	e3 94       	inc	r14
    833c:	05 c0       	rjmp	.+10     	; 0x8348 <strtod+0x4e>
    833e:	2b e2       	ldi	r18, 0x2B	; 43
    8340:	f2 16       	cp	r15, r18
    8342:	09 f4       	brne	.+2      	; 0x8346 <strtod+0x4c>
    8344:	f9 90       	ld	r15, Y+
    8346:	ee 24       	eor	r14, r14
    8348:	8e 01       	movw	r16, r28
    834a:	01 50       	subi	r16, 0x01	; 1
    834c:	10 40       	sbci	r17, 0x00	; 0
    834e:	c8 01       	movw	r24, r16
    8350:	6f e1       	ldi	r22, 0x1F	; 31
    8352:	7b e1       	ldi	r23, 0x1B	; 27
    8354:	43 e0       	ldi	r20, 0x03	; 3
    8356:	50 e0       	ldi	r21, 0x00	; 0
    8358:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <strncasecmp_P>
    835c:	89 2b       	or	r24, r25
    835e:	01 f5       	brne	.+64     	; 0x83a0 <strtod+0xa6>
    8360:	8e 01       	movw	r16, r28
    8362:	0e 5f       	subi	r16, 0xFE	; 254
    8364:	1f 4f       	sbci	r17, 0xFF	; 255
    8366:	c8 01       	movw	r24, r16
    8368:	62 e2       	ldi	r22, 0x22	; 34
    836a:	7b e1       	ldi	r23, 0x1B	; 27
    836c:	45 e0       	ldi	r20, 0x05	; 5
    836e:	50 e0       	ldi	r21, 0x00	; 0
    8370:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <strncasecmp_P>
    8374:	89 2b       	or	r24, r25
    8376:	19 f4       	brne	.+6      	; 0x837e <strtod+0x84>
    8378:	8e 01       	movw	r16, r28
    837a:	09 5f       	subi	r16, 0xF9	; 249
    837c:	1f 4f       	sbci	r17, 0xFF	; 255
    837e:	a1 14       	cp	r10, r1
    8380:	b1 04       	cpc	r11, r1
    8382:	19 f0       	breq	.+6      	; 0x838a <strtod+0x90>
    8384:	f5 01       	movw	r30, r10
    8386:	00 83       	st	Z, r16
    8388:	11 83       	std	Z+1, r17	; 0x01
    838a:	e0 fc       	sbrc	r14, 0
    838c:	04 c0       	rjmp	.+8      	; 0x8396 <strtod+0x9c>
    838e:	70 e0       	ldi	r23, 0x00	; 0
    8390:	90 e0       	ldi	r25, 0x00	; 0
    8392:	80 e8       	ldi	r24, 0x80	; 128
    8394:	14 c0       	rjmp	.+40     	; 0x83be <strtod+0xc4>
    8396:	70 e0       	ldi	r23, 0x00	; 0
    8398:	90 e0       	ldi	r25, 0x00	; 0
    839a:	80 e8       	ldi	r24, 0x80	; 128
    839c:	6f ef       	ldi	r22, 0xFF	; 255
    839e:	08 c1       	rjmp	.+528    	; 0x85b0 <strtod+0x2b6>
    83a0:	c8 01       	movw	r24, r16
    83a2:	67 e2       	ldi	r22, 0x27	; 39
    83a4:	7b e1       	ldi	r23, 0x1B	; 27
    83a6:	43 e0       	ldi	r20, 0x03	; 3
    83a8:	50 e0       	ldi	r21, 0x00	; 0
    83aa:	0e 94 e9 43 	call	0x87d2	; 0x87d2 <strncasecmp_P>
    83ae:	89 2b       	or	r24, r25
    83b0:	69 f4       	brne	.+26     	; 0x83cc <strtod+0xd2>
    83b2:	a1 14       	cp	r10, r1
    83b4:	b1 04       	cpc	r11, r1
    83b6:	29 f4       	brne	.+10     	; 0x83c2 <strtod+0xc8>
    83b8:	70 e0       	ldi	r23, 0x00	; 0
    83ba:	90 e0       	ldi	r25, 0x00	; 0
    83bc:	80 ec       	ldi	r24, 0xC0	; 192
    83be:	6f e7       	ldi	r22, 0x7F	; 127
    83c0:	f7 c0       	rjmp	.+494    	; 0x85b0 <strtod+0x2b6>
    83c2:	22 96       	adiw	r28, 0x02	; 2
    83c4:	f5 01       	movw	r30, r10
    83c6:	c0 83       	st	Z, r28
    83c8:	d1 83       	std	Z+1, r29	; 0x01
    83ca:	f6 cf       	rjmp	.-20     	; 0x83b8 <strtod+0xbe>
    83cc:	88 24       	eor	r8, r8
    83ce:	99 24       	eor	r9, r9
    83d0:	40 e0       	ldi	r20, 0x00	; 0
    83d2:	50 e0       	ldi	r21, 0x00	; 0
    83d4:	60 e0       	ldi	r22, 0x00	; 0
    83d6:	70 e0       	ldi	r23, 0x00	; 0
    83d8:	ef 2d       	mov	r30, r15
    83da:	e0 53       	subi	r30, 0x30	; 48
    83dc:	ea 30       	cpi	r30, 0x0A	; 10
    83de:	a0 f5       	brcc	.+104    	; 0x8448 <strtod+0x14e>
    83e0:	f2 e0       	ldi	r31, 0x02	; 2
    83e2:	ef 2a       	or	r14, r31
    83e4:	8e 2d       	mov	r24, r14
    83e6:	90 e0       	ldi	r25, 0x00	; 0
    83e8:	9c 01       	movw	r18, r24
    83ea:	28 70       	andi	r18, 0x08	; 8
    83ec:	30 70       	andi	r19, 0x00	; 0
    83ee:	e2 fe       	sbrs	r14, 2
    83f0:	06 c0       	rjmp	.+12     	; 0x83fe <strtod+0x104>
    83f2:	23 2b       	or	r18, r19
    83f4:	79 f5       	brne	.+94     	; 0x8454 <strtod+0x15a>
    83f6:	08 94       	sec
    83f8:	81 1c       	adc	r8, r1
    83fa:	91 1c       	adc	r9, r1
    83fc:	2b c0       	rjmp	.+86     	; 0x8454 <strtod+0x15a>
    83fe:	23 2b       	or	r18, r19
    8400:	19 f0       	breq	.+6      	; 0x8408 <strtod+0x10e>
    8402:	08 94       	sec
    8404:	81 08       	sbc	r8, r1
    8406:	91 08       	sbc	r9, r1
    8408:	db 01       	movw	r26, r22
    840a:	ca 01       	movw	r24, r20
    840c:	12 e0       	ldi	r17, 0x02	; 2
    840e:	88 0f       	add	r24, r24
    8410:	99 1f       	adc	r25, r25
    8412:	aa 1f       	adc	r26, r26
    8414:	bb 1f       	adc	r27, r27
    8416:	1a 95       	dec	r17
    8418:	d1 f7       	brne	.-12     	; 0x840e <strtod+0x114>
    841a:	48 0f       	add	r20, r24
    841c:	59 1f       	adc	r21, r25
    841e:	6a 1f       	adc	r22, r26
    8420:	7b 1f       	adc	r23, r27
    8422:	44 0f       	add	r20, r20
    8424:	55 1f       	adc	r21, r21
    8426:	66 1f       	adc	r22, r22
    8428:	77 1f       	adc	r23, r23
    842a:	4e 0f       	add	r20, r30
    842c:	51 1d       	adc	r21, r1
    842e:	61 1d       	adc	r22, r1
    8430:	71 1d       	adc	r23, r1
    8432:	48 39       	cpi	r20, 0x98	; 152
    8434:	29 e9       	ldi	r18, 0x99	; 153
    8436:	52 07       	cpc	r21, r18
    8438:	29 e9       	ldi	r18, 0x99	; 153
    843a:	62 07       	cpc	r22, r18
    843c:	29 e1       	ldi	r18, 0x19	; 25
    843e:	72 07       	cpc	r23, r18
    8440:	48 f0       	brcs	.+18     	; 0x8454 <strtod+0x15a>
    8442:	84 e0       	ldi	r24, 0x04	; 4
    8444:	e8 2a       	or	r14, r24
    8446:	06 c0       	rjmp	.+12     	; 0x8454 <strtod+0x15a>
    8448:	ee 3f       	cpi	r30, 0xFE	; 254
    844a:	31 f4       	brne	.+12     	; 0x8458 <strtod+0x15e>
    844c:	e3 fc       	sbrc	r14, 3
    844e:	39 c0       	rjmp	.+114    	; 0x84c2 <strtod+0x1c8>
    8450:	98 e0       	ldi	r25, 0x08	; 8
    8452:	e9 2a       	or	r14, r25
    8454:	f9 90       	ld	r15, Y+
    8456:	c0 cf       	rjmp	.-128    	; 0x83d8 <strtod+0xde>
    8458:	e5 33       	cpi	r30, 0x35	; 53
    845a:	11 f0       	breq	.+4      	; 0x8460 <strtod+0x166>
    845c:	e5 31       	cpi	r30, 0x15	; 21
    845e:	89 f5       	brne	.+98     	; 0x84c2 <strtod+0x1c8>
    8460:	29 91       	ld	r18, Y+
    8462:	2d 32       	cpi	r18, 0x2D	; 45
    8464:	19 f4       	brne	.+6      	; 0x846c <strtod+0x172>
    8466:	e0 e1       	ldi	r30, 0x10	; 16
    8468:	ee 2a       	or	r14, r30
    846a:	05 c0       	rjmp	.+10     	; 0x8476 <strtod+0x17c>
    846c:	2b 32       	cpi	r18, 0x2B	; 43
    846e:	19 f0       	breq	.+6      	; 0x8476 <strtod+0x17c>
    8470:	81 e0       	ldi	r24, 0x01	; 1
    8472:	90 e0       	ldi	r25, 0x00	; 0
    8474:	03 c0       	rjmp	.+6      	; 0x847c <strtod+0x182>
    8476:	29 91       	ld	r18, Y+
    8478:	82 e0       	ldi	r24, 0x02	; 2
    847a:	90 e0       	ldi	r25, 0x00	; 0
    847c:	e2 2f       	mov	r30, r18
    847e:	e0 53       	subi	r30, 0x30	; 48
    8480:	ea 30       	cpi	r30, 0x0A	; 10
    8482:	18 f0       	brcs	.+6      	; 0x848a <strtod+0x190>
    8484:	c8 1b       	sub	r28, r24
    8486:	d9 0b       	sbc	r29, r25
    8488:	1c c0       	rjmp	.+56     	; 0x84c2 <strtod+0x1c8>
    848a:	20 e0       	ldi	r18, 0x00	; 0
    848c:	30 e0       	ldi	r19, 0x00	; 0
    848e:	fc e0       	ldi	r31, 0x0C	; 12
    8490:	20 38       	cpi	r18, 0x80	; 128
    8492:	3f 07       	cpc	r19, r31
    8494:	5c f4       	brge	.+22     	; 0x84ac <strtod+0x1b2>
    8496:	c9 01       	movw	r24, r18
    8498:	88 0f       	add	r24, r24
    849a:	99 1f       	adc	r25, r25
    849c:	88 0f       	add	r24, r24
    849e:	99 1f       	adc	r25, r25
    84a0:	28 0f       	add	r18, r24
    84a2:	39 1f       	adc	r19, r25
    84a4:	22 0f       	add	r18, r18
    84a6:	33 1f       	adc	r19, r19
    84a8:	2e 0f       	add	r18, r30
    84aa:	31 1d       	adc	r19, r1
    84ac:	e9 91       	ld	r30, Y+
    84ae:	e0 53       	subi	r30, 0x30	; 48
    84b0:	ea 30       	cpi	r30, 0x0A	; 10
    84b2:	68 f3       	brcs	.-38     	; 0x848e <strtod+0x194>
    84b4:	e4 fe       	sbrs	r14, 4
    84b6:	03 c0       	rjmp	.+6      	; 0x84be <strtod+0x1c4>
    84b8:	30 95       	com	r19
    84ba:	21 95       	neg	r18
    84bc:	3f 4f       	sbci	r19, 0xFF	; 255
    84be:	82 0e       	add	r8, r18
    84c0:	93 1e       	adc	r9, r19
    84c2:	ce 2c       	mov	r12, r14
    84c4:	dd 24       	eor	r13, r13
    84c6:	e1 fe       	sbrs	r14, 1
    84c8:	07 c0       	rjmp	.+14     	; 0x84d8 <strtod+0x1de>
    84ca:	a1 14       	cp	r10, r1
    84cc:	b1 04       	cpc	r11, r1
    84ce:	21 f0       	breq	.+8      	; 0x84d8 <strtod+0x1de>
    84d0:	21 97       	sbiw	r28, 0x01	; 1
    84d2:	f5 01       	movw	r30, r10
    84d4:	c0 83       	st	Z, r28
    84d6:	d1 83       	std	Z+1, r29	; 0x01
    84d8:	cb 01       	movw	r24, r22
    84da:	ba 01       	movw	r22, r20
    84dc:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__floatunsisf>
    84e0:	7b 01       	movw	r14, r22
    84e2:	8c 01       	movw	r16, r24
    84e4:	f3 e0       	ldi	r31, 0x03	; 3
    84e6:	cf 22       	and	r12, r31
    84e8:	dd 24       	eor	r13, r13
    84ea:	23 e0       	ldi	r18, 0x03	; 3
    84ec:	c2 16       	cp	r12, r18
    84ee:	d1 04       	cpc	r13, r1
    84f0:	21 f4       	brne	.+8      	; 0x84fa <strtod+0x200>
    84f2:	17 fb       	bst	r17, 7
    84f4:	10 95       	com	r17
    84f6:	17 f9       	bld	r17, 7
    84f8:	10 95       	com	r17
    84fa:	57 01       	movw	r10, r14
    84fc:	68 01       	movw	r12, r16
    84fe:	c8 01       	movw	r24, r16
    8500:	b7 01       	movw	r22, r14
    8502:	20 e0       	ldi	r18, 0x00	; 0
    8504:	30 e0       	ldi	r19, 0x00	; 0
    8506:	40 e0       	ldi	r20, 0x00	; 0
    8508:	50 e0       	ldi	r21, 0x00	; 0
    850a:	0e 94 72 3d 	call	0x7ae4	; 0x7ae4 <__cmpsf2>
    850e:	88 23       	and	r24, r24
    8510:	09 f4       	brne	.+2      	; 0x8514 <strtod+0x21a>
    8512:	4a c0       	rjmp	.+148    	; 0x85a8 <strtod+0x2ae>
    8514:	97 fe       	sbrs	r9, 7
    8516:	0d c0       	rjmp	.+26     	; 0x8532 <strtod+0x238>
    8518:	2e e3       	ldi	r18, 0x3E	; 62
    851a:	e2 2e       	mov	r14, r18
    851c:	2b e1       	ldi	r18, 0x1B	; 27
    851e:	f2 2e       	mov	r15, r18
    8520:	90 94       	com	r9
    8522:	81 94       	neg	r8
    8524:	91 08       	sbc	r9, r1
    8526:	93 94       	inc	r9
    8528:	c0 e2       	ldi	r28, 0x20	; 32
    852a:	d0 e0       	ldi	r29, 0x00	; 0
    852c:	00 e0       	ldi	r16, 0x00	; 0
    852e:	10 e0       	ldi	r17, 0x00	; 0
    8530:	12 c0       	rjmp	.+36     	; 0x8556 <strtod+0x25c>
    8532:	96 e5       	ldi	r25, 0x56	; 86
    8534:	e9 2e       	mov	r14, r25
    8536:	9b e1       	ldi	r25, 0x1B	; 27
    8538:	f9 2e       	mov	r15, r25
    853a:	f6 cf       	rjmp	.-20     	; 0x8528 <strtod+0x22e>
    853c:	f7 01       	movw	r30, r14
    853e:	25 91       	lpm	r18, Z+
    8540:	35 91       	lpm	r19, Z+
    8542:	45 91       	lpm	r20, Z+
    8544:	54 91       	lpm	r21, Z+
    8546:	c6 01       	movw	r24, r12
    8548:	b5 01       	movw	r22, r10
    854a:	0e 94 34 40 	call	0x8068	; 0x8068 <__mulsf3>
    854e:	5b 01       	movw	r10, r22
    8550:	6c 01       	movw	r12, r24
    8552:	8c 1a       	sub	r8, r28
    8554:	9d 0a       	sbc	r9, r29
    8556:	8c 16       	cp	r8, r28
    8558:	9d 06       	cpc	r9, r29
    855a:	84 f7       	brge	.-32     	; 0x853c <strtod+0x242>
    855c:	d5 95       	asr	r29
    855e:	c7 95       	ror	r28
    8560:	0f 5f       	subi	r16, 0xFF	; 255
    8562:	1f 4f       	sbci	r17, 0xFF	; 255
    8564:	06 30       	cpi	r16, 0x06	; 6
    8566:	11 05       	cpc	r17, r1
    8568:	29 f0       	breq	.+10     	; 0x8574 <strtod+0x27a>
    856a:	8c ef       	ldi	r24, 0xFC	; 252
    856c:	9f ef       	ldi	r25, 0xFF	; 255
    856e:	e8 0e       	add	r14, r24
    8570:	f9 1e       	adc	r15, r25
    8572:	f1 cf       	rjmp	.-30     	; 0x8556 <strtod+0x25c>
    8574:	c5 01       	movw	r24, r10
    8576:	d6 01       	movw	r26, r12
    8578:	7c 01       	movw	r14, r24
    857a:	8d 01       	movw	r16, r26
    857c:	8c 2d       	mov	r24, r12
    857e:	88 0f       	add	r24, r24
    8580:	8d 2d       	mov	r24, r13
    8582:	88 1f       	adc	r24, r24
    8584:	8f 3f       	cpi	r24, 0xFF	; 255
    8586:	51 f0       	breq	.+20     	; 0x859c <strtod+0x2a2>
    8588:	c6 01       	movw	r24, r12
    858a:	b5 01       	movw	r22, r10
    858c:	20 e0       	ldi	r18, 0x00	; 0
    858e:	30 e0       	ldi	r19, 0x00	; 0
    8590:	40 e0       	ldi	r20, 0x00	; 0
    8592:	50 e0       	ldi	r21, 0x00	; 0
    8594:	0e 94 72 3d 	call	0x7ae4	; 0x7ae4 <__cmpsf2>
    8598:	88 23       	and	r24, r24
    859a:	31 f4       	brne	.+12     	; 0x85a8 <strtod+0x2ae>
    859c:	82 e2       	ldi	r24, 0x22	; 34
    859e:	90 e0       	ldi	r25, 0x00	; 0
    85a0:	80 93 12 25 	sts	0x2512, r24
    85a4:	90 93 13 25 	sts	0x2513, r25
    85a8:	7e 2d       	mov	r23, r14
    85aa:	9f 2d       	mov	r25, r15
    85ac:	80 2f       	mov	r24, r16
    85ae:	61 2f       	mov	r22, r17
    85b0:	27 2f       	mov	r18, r23
    85b2:	39 2f       	mov	r19, r25
    85b4:	48 2f       	mov	r20, r24
    85b6:	56 2f       	mov	r21, r22
    85b8:	b9 01       	movw	r22, r18
    85ba:	ca 01       	movw	r24, r20
    85bc:	df 91       	pop	r29
    85be:	cf 91       	pop	r28
    85c0:	1f 91       	pop	r17
    85c2:	0f 91       	pop	r16
    85c4:	ff 90       	pop	r15
    85c6:	ef 90       	pop	r14
    85c8:	df 90       	pop	r13
    85ca:	cf 90       	pop	r12
    85cc:	bf 90       	pop	r11
    85ce:	af 90       	pop	r10
    85d0:	9f 90       	pop	r9
    85d2:	8f 90       	pop	r8
    85d4:	08 95       	ret

000085d6 <atoi>:
    85d6:	fc 01       	movw	r30, r24
    85d8:	88 27       	eor	r24, r24
    85da:	99 27       	eor	r25, r25
    85dc:	e8 94       	clt
    85de:	21 91       	ld	r18, Z+
    85e0:	20 32       	cpi	r18, 0x20	; 32
    85e2:	e9 f3       	breq	.-6      	; 0x85de <atoi+0x8>
    85e4:	29 30       	cpi	r18, 0x09	; 9
    85e6:	10 f0       	brcs	.+4      	; 0x85ec <atoi+0x16>
    85e8:	2e 30       	cpi	r18, 0x0E	; 14
    85ea:	c8 f3       	brcs	.-14     	; 0x85de <atoi+0x8>
    85ec:	2b 32       	cpi	r18, 0x2B	; 43
    85ee:	41 f0       	breq	.+16     	; 0x8600 <atoi+0x2a>
    85f0:	2d 32       	cpi	r18, 0x2D	; 45
    85f2:	39 f4       	brne	.+14     	; 0x8602 <atoi+0x2c>
    85f4:	68 94       	set
    85f6:	04 c0       	rjmp	.+8      	; 0x8600 <atoi+0x2a>
    85f8:	0e 94 17 44 	call	0x882e	; 0x882e <__mulhi_const_10>
    85fc:	82 0f       	add	r24, r18
    85fe:	91 1d       	adc	r25, r1
    8600:	21 91       	ld	r18, Z+
    8602:	20 53       	subi	r18, 0x30	; 48
    8604:	2a 30       	cpi	r18, 0x0A	; 10
    8606:	c0 f3       	brcs	.-16     	; 0x85f8 <atoi+0x22>
    8608:	1e f4       	brtc	.+6      	; 0x8610 <atoi+0x3a>
    860a:	90 95       	com	r25
    860c:	81 95       	neg	r24
    860e:	9f 4f       	sbci	r25, 0xFF	; 255
    8610:	08 95       	ret

00008612 <__ftoa_engine>:
    8612:	28 30       	cpi	r18, 0x08	; 8
    8614:	08 f0       	brcs	.+2      	; 0x8618 <__ftoa_engine+0x6>
    8616:	27 e0       	ldi	r18, 0x07	; 7
    8618:	33 27       	eor	r19, r19
    861a:	da 01       	movw	r26, r20
    861c:	99 0f       	add	r25, r25
    861e:	31 1d       	adc	r19, r1
    8620:	87 fd       	sbrc	r24, 7
    8622:	91 60       	ori	r25, 0x01	; 1
    8624:	00 96       	adiw	r24, 0x00	; 0
    8626:	61 05       	cpc	r22, r1
    8628:	71 05       	cpc	r23, r1
    862a:	39 f4       	brne	.+14     	; 0x863a <__ftoa_engine+0x28>
    862c:	32 60       	ori	r19, 0x02	; 2
    862e:	2e 5f       	subi	r18, 0xFE	; 254
    8630:	3d 93       	st	X+, r19
    8632:	30 e3       	ldi	r19, 0x30	; 48
    8634:	2a 95       	dec	r18
    8636:	e1 f7       	brne	.-8      	; 0x8630 <__ftoa_engine+0x1e>
    8638:	08 95       	ret
    863a:	9f 3f       	cpi	r25, 0xFF	; 255
    863c:	30 f0       	brcs	.+12     	; 0x864a <__ftoa_engine+0x38>
    863e:	80 38       	cpi	r24, 0x80	; 128
    8640:	71 05       	cpc	r23, r1
    8642:	61 05       	cpc	r22, r1
    8644:	09 f0       	breq	.+2      	; 0x8648 <__ftoa_engine+0x36>
    8646:	3c 5f       	subi	r19, 0xFC	; 252
    8648:	3c 5f       	subi	r19, 0xFC	; 252
    864a:	3d 93       	st	X+, r19
    864c:	91 30       	cpi	r25, 0x01	; 1
    864e:	08 f0       	brcs	.+2      	; 0x8652 <__ftoa_engine+0x40>
    8650:	80 68       	ori	r24, 0x80	; 128
    8652:	91 1d       	adc	r25, r1
    8654:	df 93       	push	r29
    8656:	cf 93       	push	r28
    8658:	1f 93       	push	r17
    865a:	0f 93       	push	r16
    865c:	ff 92       	push	r15
    865e:	ef 92       	push	r14
    8660:	19 2f       	mov	r17, r25
    8662:	98 7f       	andi	r25, 0xF8	; 248
    8664:	96 95       	lsr	r25
    8666:	e9 2f       	mov	r30, r25
    8668:	96 95       	lsr	r25
    866a:	96 95       	lsr	r25
    866c:	e9 0f       	add	r30, r25
    866e:	ff 27       	eor	r31, r31
    8670:	ec 54       	subi	r30, 0x4C	; 76
    8672:	f4 4e       	sbci	r31, 0xE4	; 228
    8674:	99 27       	eor	r25, r25
    8676:	33 27       	eor	r19, r19
    8678:	ee 24       	eor	r14, r14
    867a:	ff 24       	eor	r15, r15
    867c:	a7 01       	movw	r20, r14
    867e:	e7 01       	movw	r28, r14
    8680:	05 90       	lpm	r0, Z+
    8682:	08 94       	sec
    8684:	07 94       	ror	r0
    8686:	28 f4       	brcc	.+10     	; 0x8692 <__ftoa_engine+0x80>
    8688:	36 0f       	add	r19, r22
    868a:	e7 1e       	adc	r14, r23
    868c:	f8 1e       	adc	r15, r24
    868e:	49 1f       	adc	r20, r25
    8690:	51 1d       	adc	r21, r1
    8692:	66 0f       	add	r22, r22
    8694:	77 1f       	adc	r23, r23
    8696:	88 1f       	adc	r24, r24
    8698:	99 1f       	adc	r25, r25
    869a:	06 94       	lsr	r0
    869c:	a1 f7       	brne	.-24     	; 0x8686 <__ftoa_engine+0x74>
    869e:	05 90       	lpm	r0, Z+
    86a0:	07 94       	ror	r0
    86a2:	28 f4       	brcc	.+10     	; 0x86ae <__ftoa_engine+0x9c>
    86a4:	e7 0e       	add	r14, r23
    86a6:	f8 1e       	adc	r15, r24
    86a8:	49 1f       	adc	r20, r25
    86aa:	56 1f       	adc	r21, r22
    86ac:	c1 1d       	adc	r28, r1
    86ae:	77 0f       	add	r23, r23
    86b0:	88 1f       	adc	r24, r24
    86b2:	99 1f       	adc	r25, r25
    86b4:	66 1f       	adc	r22, r22
    86b6:	06 94       	lsr	r0
    86b8:	a1 f7       	brne	.-24     	; 0x86a2 <__ftoa_engine+0x90>
    86ba:	05 90       	lpm	r0, Z+
    86bc:	07 94       	ror	r0
    86be:	28 f4       	brcc	.+10     	; 0x86ca <__ftoa_engine+0xb8>
    86c0:	f8 0e       	add	r15, r24
    86c2:	49 1f       	adc	r20, r25
    86c4:	56 1f       	adc	r21, r22
    86c6:	c7 1f       	adc	r28, r23
    86c8:	d1 1d       	adc	r29, r1
    86ca:	88 0f       	add	r24, r24
    86cc:	99 1f       	adc	r25, r25
    86ce:	66 1f       	adc	r22, r22
    86d0:	77 1f       	adc	r23, r23
    86d2:	06 94       	lsr	r0
    86d4:	a1 f7       	brne	.-24     	; 0x86be <__ftoa_engine+0xac>
    86d6:	05 90       	lpm	r0, Z+
    86d8:	07 94       	ror	r0
    86da:	20 f4       	brcc	.+8      	; 0x86e4 <__ftoa_engine+0xd2>
    86dc:	49 0f       	add	r20, r25
    86de:	56 1f       	adc	r21, r22
    86e0:	c7 1f       	adc	r28, r23
    86e2:	d8 1f       	adc	r29, r24
    86e4:	99 0f       	add	r25, r25
    86e6:	66 1f       	adc	r22, r22
    86e8:	77 1f       	adc	r23, r23
    86ea:	88 1f       	adc	r24, r24
    86ec:	06 94       	lsr	r0
    86ee:	a9 f7       	brne	.-22     	; 0x86da <__ftoa_engine+0xc8>
    86f0:	84 91       	lpm	r24, Z+
    86f2:	10 95       	com	r17
    86f4:	17 70       	andi	r17, 0x07	; 7
    86f6:	41 f0       	breq	.+16     	; 0x8708 <__ftoa_engine+0xf6>
    86f8:	d6 95       	lsr	r29
    86fa:	c7 95       	ror	r28
    86fc:	57 95       	ror	r21
    86fe:	47 95       	ror	r20
    8700:	f7 94       	ror	r15
    8702:	e7 94       	ror	r14
    8704:	1a 95       	dec	r17
    8706:	c1 f7       	brne	.-16     	; 0x86f8 <__ftoa_engine+0xe6>
    8708:	ea e5       	ldi	r30, 0x5A	; 90
    870a:	fb e1       	ldi	r31, 0x1B	; 27
    870c:	68 94       	set
    870e:	15 90       	lpm	r1, Z+
    8710:	15 91       	lpm	r17, Z+
    8712:	35 91       	lpm	r19, Z+
    8714:	65 91       	lpm	r22, Z+
    8716:	95 91       	lpm	r25, Z+
    8718:	05 90       	lpm	r0, Z+
    871a:	7f e2       	ldi	r23, 0x2F	; 47
    871c:	73 95       	inc	r23
    871e:	e1 18       	sub	r14, r1
    8720:	f1 0a       	sbc	r15, r17
    8722:	43 0b       	sbc	r20, r19
    8724:	56 0b       	sbc	r21, r22
    8726:	c9 0b       	sbc	r28, r25
    8728:	d0 09       	sbc	r29, r0
    872a:	c0 f7       	brcc	.-16     	; 0x871c <__ftoa_engine+0x10a>
    872c:	e1 0c       	add	r14, r1
    872e:	f1 1e       	adc	r15, r17
    8730:	43 1f       	adc	r20, r19
    8732:	56 1f       	adc	r21, r22
    8734:	c9 1f       	adc	r28, r25
    8736:	d0 1d       	adc	r29, r0
    8738:	7e f4       	brtc	.+30     	; 0x8758 <__ftoa_engine+0x146>
    873a:	70 33       	cpi	r23, 0x30	; 48
    873c:	11 f4       	brne	.+4      	; 0x8742 <__ftoa_engine+0x130>
    873e:	8a 95       	dec	r24
    8740:	e6 cf       	rjmp	.-52     	; 0x870e <__ftoa_engine+0xfc>
    8742:	e8 94       	clt
    8744:	01 50       	subi	r16, 0x01	; 1
    8746:	30 f0       	brcs	.+12     	; 0x8754 <__ftoa_engine+0x142>
    8748:	08 0f       	add	r16, r24
    874a:	0a f4       	brpl	.+2      	; 0x874e <__ftoa_engine+0x13c>
    874c:	00 27       	eor	r16, r16
    874e:	02 17       	cp	r16, r18
    8750:	08 f4       	brcc	.+2      	; 0x8754 <__ftoa_engine+0x142>
    8752:	20 2f       	mov	r18, r16
    8754:	23 95       	inc	r18
    8756:	02 2f       	mov	r16, r18
    8758:	7a 33       	cpi	r23, 0x3A	; 58
    875a:	28 f0       	brcs	.+10     	; 0x8766 <__ftoa_engine+0x154>
    875c:	79 e3       	ldi	r23, 0x39	; 57
    875e:	7d 93       	st	X+, r23
    8760:	2a 95       	dec	r18
    8762:	e9 f7       	brne	.-6      	; 0x875e <__ftoa_engine+0x14c>
    8764:	10 c0       	rjmp	.+32     	; 0x8786 <__ftoa_engine+0x174>
    8766:	7d 93       	st	X+, r23
    8768:	2a 95       	dec	r18
    876a:	89 f6       	brne	.-94     	; 0x870e <__ftoa_engine+0xfc>
    876c:	06 94       	lsr	r0
    876e:	97 95       	ror	r25
    8770:	67 95       	ror	r22
    8772:	37 95       	ror	r19
    8774:	17 95       	ror	r17
    8776:	17 94       	ror	r1
    8778:	e1 18       	sub	r14, r1
    877a:	f1 0a       	sbc	r15, r17
    877c:	43 0b       	sbc	r20, r19
    877e:	56 0b       	sbc	r21, r22
    8780:	c9 0b       	sbc	r28, r25
    8782:	d0 09       	sbc	r29, r0
    8784:	98 f0       	brcs	.+38     	; 0x87ac <__ftoa_engine+0x19a>
    8786:	23 95       	inc	r18
    8788:	7e 91       	ld	r23, -X
    878a:	73 95       	inc	r23
    878c:	7a 33       	cpi	r23, 0x3A	; 58
    878e:	08 f0       	brcs	.+2      	; 0x8792 <__ftoa_engine+0x180>
    8790:	70 e3       	ldi	r23, 0x30	; 48
    8792:	7c 93       	st	X, r23
    8794:	20 13       	cpse	r18, r16
    8796:	b8 f7       	brcc	.-18     	; 0x8786 <__ftoa_engine+0x174>
    8798:	7e 91       	ld	r23, -X
    879a:	70 61       	ori	r23, 0x10	; 16
    879c:	7d 93       	st	X+, r23
    879e:	30 f0       	brcs	.+12     	; 0x87ac <__ftoa_engine+0x19a>
    87a0:	83 95       	inc	r24
    87a2:	71 e3       	ldi	r23, 0x31	; 49
    87a4:	7d 93       	st	X+, r23
    87a6:	70 e3       	ldi	r23, 0x30	; 48
    87a8:	2a 95       	dec	r18
    87aa:	e1 f7       	brne	.-8      	; 0x87a4 <__ftoa_engine+0x192>
    87ac:	11 24       	eor	r1, r1
    87ae:	ef 90       	pop	r14
    87b0:	ff 90       	pop	r15
    87b2:	0f 91       	pop	r16
    87b4:	1f 91       	pop	r17
    87b6:	cf 91       	pop	r28
    87b8:	df 91       	pop	r29
    87ba:	99 27       	eor	r25, r25
    87bc:	87 fd       	sbrc	r24, 7
    87be:	90 95       	com	r25
    87c0:	08 95       	ret

000087c2 <isspace>:
    87c2:	91 11       	cpse	r25, r1
    87c4:	21 c1       	rjmp	.+578    	; 0x8a08 <__ctype_isfalse>
    87c6:	80 32       	cpi	r24, 0x20	; 32
    87c8:	19 f0       	breq	.+6      	; 0x87d0 <isspace+0xe>
    87ca:	89 50       	subi	r24, 0x09	; 9
    87cc:	85 50       	subi	r24, 0x05	; 5
    87ce:	d0 f7       	brcc	.-12     	; 0x87c4 <isspace+0x2>
    87d0:	08 95       	ret

000087d2 <strncasecmp_P>:
    87d2:	fb 01       	movw	r30, r22
    87d4:	dc 01       	movw	r26, r24
    87d6:	41 50       	subi	r20, 0x01	; 1
    87d8:	50 40       	sbci	r21, 0x00	; 0
    87da:	88 f0       	brcs	.+34     	; 0x87fe <strncasecmp_P+0x2c>
    87dc:	8d 91       	ld	r24, X+
    87de:	81 34       	cpi	r24, 0x41	; 65
    87e0:	1c f0       	brlt	.+6      	; 0x87e8 <strncasecmp_P+0x16>
    87e2:	8b 35       	cpi	r24, 0x5B	; 91
    87e4:	0c f4       	brge	.+2      	; 0x87e8 <strncasecmp_P+0x16>
    87e6:	80 5e       	subi	r24, 0xE0	; 224
    87e8:	65 91       	lpm	r22, Z+
    87ea:	61 34       	cpi	r22, 0x41	; 65
    87ec:	1c f0       	brlt	.+6      	; 0x87f4 <strncasecmp_P+0x22>
    87ee:	6b 35       	cpi	r22, 0x5B	; 91
    87f0:	0c f4       	brge	.+2      	; 0x87f4 <strncasecmp_P+0x22>
    87f2:	60 5e       	subi	r22, 0xE0	; 224
    87f4:	86 1b       	sub	r24, r22
    87f6:	61 11       	cpse	r22, r1
    87f8:	71 f3       	breq	.-36     	; 0x87d6 <strncasecmp_P+0x4>
    87fa:	99 0b       	sbc	r25, r25
    87fc:	08 95       	ret
    87fe:	88 1b       	sub	r24, r24
    8800:	fc cf       	rjmp	.-8      	; 0x87fa <strncasecmp_P+0x28>

00008802 <strnlen_P>:
    8802:	fc 01       	movw	r30, r24
    8804:	05 90       	lpm	r0, Z+
    8806:	61 50       	subi	r22, 0x01	; 1
    8808:	70 40       	sbci	r23, 0x00	; 0
    880a:	01 10       	cpse	r0, r1
    880c:	d8 f7       	brcc	.-10     	; 0x8804 <strnlen_P+0x2>
    880e:	80 95       	com	r24
    8810:	90 95       	com	r25
    8812:	8e 0f       	add	r24, r30
    8814:	9f 1f       	adc	r25, r31
    8816:	08 95       	ret

00008818 <strnlen>:
    8818:	fc 01       	movw	r30, r24
    881a:	61 50       	subi	r22, 0x01	; 1
    881c:	70 40       	sbci	r23, 0x00	; 0
    881e:	01 90       	ld	r0, Z+
    8820:	01 10       	cpse	r0, r1
    8822:	d8 f7       	brcc	.-10     	; 0x881a <strnlen+0x2>
    8824:	80 95       	com	r24
    8826:	90 95       	com	r25
    8828:	8e 0f       	add	r24, r30
    882a:	9f 1f       	adc	r25, r31
    882c:	08 95       	ret

0000882e <__mulhi_const_10>:
    882e:	7a e0       	ldi	r23, 0x0A	; 10
    8830:	97 9f       	mul	r25, r23
    8832:	90 2d       	mov	r25, r0
    8834:	87 9f       	mul	r24, r23
    8836:	80 2d       	mov	r24, r0
    8838:	91 0d       	add	r25, r1
    883a:	11 24       	eor	r1, r1
    883c:	08 95       	ret

0000883e <clearerr>:
    883e:	fc 01       	movw	r30, r24
    8840:	83 81       	ldd	r24, Z+3	; 0x03
    8842:	8f 7c       	andi	r24, 0xCF	; 207
    8844:	83 83       	std	Z+3, r24	; 0x03
    8846:	08 95       	ret

00008848 <fgets>:
    8848:	cf 92       	push	r12
    884a:	df 92       	push	r13
    884c:	ef 92       	push	r14
    884e:	ff 92       	push	r15
    8850:	0f 93       	push	r16
    8852:	1f 93       	push	r17
    8854:	cf 93       	push	r28
    8856:	df 93       	push	r29
    8858:	7c 01       	movw	r14, r24
    885a:	6a 01       	movw	r12, r20
    885c:	fa 01       	movw	r30, r20
    885e:	83 81       	ldd	r24, Z+3	; 0x03
    8860:	80 ff       	sbrs	r24, 0
    8862:	19 c0       	rjmp	.+50     	; 0x8896 <fgets+0x4e>
    8864:	16 16       	cp	r1, r22
    8866:	17 06       	cpc	r1, r23
    8868:	b4 f4       	brge	.+44     	; 0x8896 <fgets+0x4e>
    886a:	eb 01       	movw	r28, r22
    886c:	21 97       	sbiw	r28, 0x01	; 1
    886e:	87 01       	movw	r16, r14
    8870:	0d c0       	rjmp	.+26     	; 0x888c <fgets+0x44>
    8872:	c6 01       	movw	r24, r12
    8874:	0e 94 07 45 	call	0x8a0e	; 0x8a0e <fgetc>
    8878:	ff ef       	ldi	r31, 0xFF	; 255
    887a:	8f 3f       	cpi	r24, 0xFF	; 255
    887c:	9f 07       	cpc	r25, r31
    887e:	59 f0       	breq	.+22     	; 0x8896 <fgets+0x4e>
    8880:	f8 01       	movw	r30, r16
    8882:	81 93       	st	Z+, r24
    8884:	8f 01       	movw	r16, r30
    8886:	0a 97       	sbiw	r24, 0x0a	; 10
    8888:	19 f0       	breq	.+6      	; 0x8890 <fgets+0x48>
    888a:	21 97       	sbiw	r28, 0x01	; 1
    888c:	20 97       	sbiw	r28, 0x00	; 0
    888e:	89 f7       	brne	.-30     	; 0x8872 <fgets+0x2a>
    8890:	f8 01       	movw	r30, r16
    8892:	10 82       	st	Z, r1
    8894:	02 c0       	rjmp	.+4      	; 0x889a <fgets+0x52>
    8896:	ee 24       	eor	r14, r14
    8898:	ff 24       	eor	r15, r15
    889a:	c7 01       	movw	r24, r14
    889c:	df 91       	pop	r29
    889e:	cf 91       	pop	r28
    88a0:	1f 91       	pop	r17
    88a2:	0f 91       	pop	r16
    88a4:	ff 90       	pop	r15
    88a6:	ef 90       	pop	r14
    88a8:	df 90       	pop	r13
    88aa:	cf 90       	pop	r12
    88ac:	08 95       	ret

000088ae <fputc>:
    88ae:	0f 93       	push	r16
    88b0:	1f 93       	push	r17
    88b2:	cf 93       	push	r28
    88b4:	df 93       	push	r29
    88b6:	8c 01       	movw	r16, r24
    88b8:	eb 01       	movw	r28, r22
    88ba:	8b 81       	ldd	r24, Y+3	; 0x03
    88bc:	81 ff       	sbrs	r24, 1
    88be:	1b c0       	rjmp	.+54     	; 0x88f6 <fputc+0x48>
    88c0:	82 ff       	sbrs	r24, 2
    88c2:	0d c0       	rjmp	.+26     	; 0x88de <fputc+0x30>
    88c4:	2e 81       	ldd	r18, Y+6	; 0x06
    88c6:	3f 81       	ldd	r19, Y+7	; 0x07
    88c8:	8c 81       	ldd	r24, Y+4	; 0x04
    88ca:	9d 81       	ldd	r25, Y+5	; 0x05
    88cc:	28 17       	cp	r18, r24
    88ce:	39 07       	cpc	r19, r25
    88d0:	64 f4       	brge	.+24     	; 0x88ea <fputc+0x3c>
    88d2:	e8 81       	ld	r30, Y
    88d4:	f9 81       	ldd	r31, Y+1	; 0x01
    88d6:	01 93       	st	Z+, r16
    88d8:	e8 83       	st	Y, r30
    88da:	f9 83       	std	Y+1, r31	; 0x01
    88dc:	06 c0       	rjmp	.+12     	; 0x88ea <fputc+0x3c>
    88de:	e8 85       	ldd	r30, Y+8	; 0x08
    88e0:	f9 85       	ldd	r31, Y+9	; 0x09
    88e2:	80 2f       	mov	r24, r16
    88e4:	19 95       	eicall
    88e6:	89 2b       	or	r24, r25
    88e8:	31 f4       	brne	.+12     	; 0x88f6 <fputc+0x48>
    88ea:	8e 81       	ldd	r24, Y+6	; 0x06
    88ec:	9f 81       	ldd	r25, Y+7	; 0x07
    88ee:	01 96       	adiw	r24, 0x01	; 1
    88f0:	8e 83       	std	Y+6, r24	; 0x06
    88f2:	9f 83       	std	Y+7, r25	; 0x07
    88f4:	02 c0       	rjmp	.+4      	; 0x88fa <fputc+0x4c>
    88f6:	0f ef       	ldi	r16, 0xFF	; 255
    88f8:	1f ef       	ldi	r17, 0xFF	; 255
    88fa:	c8 01       	movw	r24, r16
    88fc:	df 91       	pop	r29
    88fe:	cf 91       	pop	r28
    8900:	1f 91       	pop	r17
    8902:	0f 91       	pop	r16
    8904:	08 95       	ret

00008906 <printf_P>:
    8906:	df 93       	push	r29
    8908:	cf 93       	push	r28
    890a:	cd b7       	in	r28, 0x3d	; 61
    890c:	de b7       	in	r29, 0x3e	; 62
    890e:	fe 01       	movw	r30, r28
    8910:	36 96       	adiw	r30, 0x06	; 6
    8912:	61 91       	ld	r22, Z+
    8914:	71 91       	ld	r23, Z+
    8916:	a0 91 0e 25 	lds	r26, 0x250E
    891a:	b0 91 0f 25 	lds	r27, 0x250F
    891e:	13 96       	adiw	r26, 0x03	; 3
    8920:	8c 91       	ld	r24, X
    8922:	13 97       	sbiw	r26, 0x03	; 3
    8924:	88 60       	ori	r24, 0x08	; 8
    8926:	13 96       	adiw	r26, 0x03	; 3
    8928:	8c 93       	st	X, r24
    892a:	80 91 0e 25 	lds	r24, 0x250E
    892e:	90 91 0f 25 	lds	r25, 0x250F
    8932:	af 01       	movw	r20, r30
    8934:	0e 94 28 39 	call	0x7250	; 0x7250 <vfprintf>
    8938:	e0 91 0e 25 	lds	r30, 0x250E
    893c:	f0 91 0f 25 	lds	r31, 0x250F
    8940:	23 81       	ldd	r18, Z+3	; 0x03
    8942:	27 7f       	andi	r18, 0xF7	; 247
    8944:	23 83       	std	Z+3, r18	; 0x03
    8946:	cf 91       	pop	r28
    8948:	df 91       	pop	r29
    894a:	08 95       	ret

0000894c <__ultoa_invert>:
    894c:	fa 01       	movw	r30, r20
    894e:	aa 27       	eor	r26, r26
    8950:	28 30       	cpi	r18, 0x08	; 8
    8952:	51 f1       	breq	.+84     	; 0x89a8 <__ultoa_invert+0x5c>
    8954:	20 31       	cpi	r18, 0x10	; 16
    8956:	81 f1       	breq	.+96     	; 0x89b8 <__ultoa_invert+0x6c>
    8958:	e8 94       	clt
    895a:	6f 93       	push	r22
    895c:	6e 7f       	andi	r22, 0xFE	; 254
    895e:	6e 5f       	subi	r22, 0xFE	; 254
    8960:	7f 4f       	sbci	r23, 0xFF	; 255
    8962:	8f 4f       	sbci	r24, 0xFF	; 255
    8964:	9f 4f       	sbci	r25, 0xFF	; 255
    8966:	af 4f       	sbci	r26, 0xFF	; 255
    8968:	b1 e0       	ldi	r27, 0x01	; 1
    896a:	3e d0       	rcall	.+124    	; 0x89e8 <__ultoa_invert+0x9c>
    896c:	b4 e0       	ldi	r27, 0x04	; 4
    896e:	3c d0       	rcall	.+120    	; 0x89e8 <__ultoa_invert+0x9c>
    8970:	67 0f       	add	r22, r23
    8972:	78 1f       	adc	r23, r24
    8974:	89 1f       	adc	r24, r25
    8976:	9a 1f       	adc	r25, r26
    8978:	a1 1d       	adc	r26, r1
    897a:	68 0f       	add	r22, r24
    897c:	79 1f       	adc	r23, r25
    897e:	8a 1f       	adc	r24, r26
    8980:	91 1d       	adc	r25, r1
    8982:	a1 1d       	adc	r26, r1
    8984:	6a 0f       	add	r22, r26
    8986:	71 1d       	adc	r23, r1
    8988:	81 1d       	adc	r24, r1
    898a:	91 1d       	adc	r25, r1
    898c:	a1 1d       	adc	r26, r1
    898e:	20 d0       	rcall	.+64     	; 0x89d0 <__ultoa_invert+0x84>
    8990:	09 f4       	brne	.+2      	; 0x8994 <__ultoa_invert+0x48>
    8992:	68 94       	set
    8994:	3f 91       	pop	r19
    8996:	2a e0       	ldi	r18, 0x0A	; 10
    8998:	26 9f       	mul	r18, r22
    899a:	11 24       	eor	r1, r1
    899c:	30 19       	sub	r19, r0
    899e:	30 5d       	subi	r19, 0xD0	; 208
    89a0:	31 93       	st	Z+, r19
    89a2:	de f6       	brtc	.-74     	; 0x895a <__ultoa_invert+0xe>
    89a4:	cf 01       	movw	r24, r30
    89a6:	08 95       	ret
    89a8:	46 2f       	mov	r20, r22
    89aa:	47 70       	andi	r20, 0x07	; 7
    89ac:	40 5d       	subi	r20, 0xD0	; 208
    89ae:	41 93       	st	Z+, r20
    89b0:	b3 e0       	ldi	r27, 0x03	; 3
    89b2:	0f d0       	rcall	.+30     	; 0x89d2 <__ultoa_invert+0x86>
    89b4:	c9 f7       	brne	.-14     	; 0x89a8 <__ultoa_invert+0x5c>
    89b6:	f6 cf       	rjmp	.-20     	; 0x89a4 <__ultoa_invert+0x58>
    89b8:	46 2f       	mov	r20, r22
    89ba:	4f 70       	andi	r20, 0x0F	; 15
    89bc:	40 5d       	subi	r20, 0xD0	; 208
    89be:	4a 33       	cpi	r20, 0x3A	; 58
    89c0:	18 f0       	brcs	.+6      	; 0x89c8 <__ultoa_invert+0x7c>
    89c2:	49 5d       	subi	r20, 0xD9	; 217
    89c4:	31 fd       	sbrc	r19, 1
    89c6:	40 52       	subi	r20, 0x20	; 32
    89c8:	41 93       	st	Z+, r20
    89ca:	02 d0       	rcall	.+4      	; 0x89d0 <__ultoa_invert+0x84>
    89cc:	a9 f7       	brne	.-22     	; 0x89b8 <__ultoa_invert+0x6c>
    89ce:	ea cf       	rjmp	.-44     	; 0x89a4 <__ultoa_invert+0x58>
    89d0:	b4 e0       	ldi	r27, 0x04	; 4
    89d2:	a6 95       	lsr	r26
    89d4:	97 95       	ror	r25
    89d6:	87 95       	ror	r24
    89d8:	77 95       	ror	r23
    89da:	67 95       	ror	r22
    89dc:	ba 95       	dec	r27
    89de:	c9 f7       	brne	.-14     	; 0x89d2 <__ultoa_invert+0x86>
    89e0:	00 97       	sbiw	r24, 0x00	; 0
    89e2:	61 05       	cpc	r22, r1
    89e4:	71 05       	cpc	r23, r1
    89e6:	08 95       	ret
    89e8:	9b 01       	movw	r18, r22
    89ea:	ac 01       	movw	r20, r24
    89ec:	0a 2e       	mov	r0, r26
    89ee:	06 94       	lsr	r0
    89f0:	57 95       	ror	r21
    89f2:	47 95       	ror	r20
    89f4:	37 95       	ror	r19
    89f6:	27 95       	ror	r18
    89f8:	ba 95       	dec	r27
    89fa:	c9 f7       	brne	.-14     	; 0x89ee <__ultoa_invert+0xa2>
    89fc:	62 0f       	add	r22, r18
    89fe:	73 1f       	adc	r23, r19
    8a00:	84 1f       	adc	r24, r20
    8a02:	95 1f       	adc	r25, r21
    8a04:	a0 1d       	adc	r26, r0
    8a06:	08 95       	ret

00008a08 <__ctype_isfalse>:
    8a08:	99 27       	eor	r25, r25
    8a0a:	88 27       	eor	r24, r24

00008a0c <__ctype_istrue>:
    8a0c:	08 95       	ret

00008a0e <fgetc>:
    8a0e:	cf 93       	push	r28
    8a10:	df 93       	push	r29
    8a12:	ec 01       	movw	r28, r24
    8a14:	4b 81       	ldd	r20, Y+3	; 0x03
    8a16:	40 ff       	sbrs	r20, 0
    8a18:	1a c0       	rjmp	.+52     	; 0x8a4e <fgetc+0x40>
    8a1a:	46 ff       	sbrs	r20, 6
    8a1c:	0a c0       	rjmp	.+20     	; 0x8a32 <fgetc+0x24>
    8a1e:	4f 7b       	andi	r20, 0xBF	; 191
    8a20:	4b 83       	std	Y+3, r20	; 0x03
    8a22:	8e 81       	ldd	r24, Y+6	; 0x06
    8a24:	9f 81       	ldd	r25, Y+7	; 0x07
    8a26:	01 96       	adiw	r24, 0x01	; 1
    8a28:	8e 83       	std	Y+6, r24	; 0x06
    8a2a:	9f 83       	std	Y+7, r25	; 0x07
    8a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    8a2e:	28 2f       	mov	r18, r24
    8a30:	2b c0       	rjmp	.+86     	; 0x8a88 <fgetc+0x7a>
    8a32:	42 ff       	sbrs	r20, 2
    8a34:	13 c0       	rjmp	.+38     	; 0x8a5c <fgetc+0x4e>
    8a36:	e8 81       	ld	r30, Y
    8a38:	f9 81       	ldd	r31, Y+1	; 0x01
    8a3a:	80 81       	ld	r24, Z
    8a3c:	28 2f       	mov	r18, r24
    8a3e:	33 27       	eor	r19, r19
    8a40:	27 fd       	sbrc	r18, 7
    8a42:	30 95       	com	r19
    8a44:	21 15       	cp	r18, r1
    8a46:	31 05       	cpc	r19, r1
    8a48:	29 f4       	brne	.+10     	; 0x8a54 <fgetc+0x46>
    8a4a:	40 62       	ori	r20, 0x20	; 32
    8a4c:	4b 83       	std	Y+3, r20	; 0x03
    8a4e:	2f ef       	ldi	r18, 0xFF	; 255
    8a50:	3f ef       	ldi	r19, 0xFF	; 255
    8a52:	1b c0       	rjmp	.+54     	; 0x8a8a <fgetc+0x7c>
    8a54:	31 96       	adiw	r30, 0x01	; 1
    8a56:	e8 83       	st	Y, r30
    8a58:	f9 83       	std	Y+1, r31	; 0x01
    8a5a:	11 c0       	rjmp	.+34     	; 0x8a7e <fgetc+0x70>
    8a5c:	ea 85       	ldd	r30, Y+10	; 0x0a
    8a5e:	fb 85       	ldd	r31, Y+11	; 0x0b
    8a60:	ce 01       	movw	r24, r28
    8a62:	19 95       	eicall
    8a64:	9c 01       	movw	r18, r24
    8a66:	97 ff       	sbrs	r25, 7
    8a68:	0a c0       	rjmp	.+20     	; 0x8a7e <fgetc+0x70>
    8a6a:	9b 81       	ldd	r25, Y+3	; 0x03
    8a6c:	2f 5f       	subi	r18, 0xFF	; 255
    8a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    8a70:	11 f0       	breq	.+4      	; 0x8a76 <fgetc+0x68>
    8a72:	80 e2       	ldi	r24, 0x20	; 32
    8a74:	01 c0       	rjmp	.+2      	; 0x8a78 <fgetc+0x6a>
    8a76:	80 e1       	ldi	r24, 0x10	; 16
    8a78:	89 2b       	or	r24, r25
    8a7a:	8b 83       	std	Y+3, r24	; 0x03
    8a7c:	e8 cf       	rjmp	.-48     	; 0x8a4e <fgetc+0x40>
    8a7e:	8e 81       	ldd	r24, Y+6	; 0x06
    8a80:	9f 81       	ldd	r25, Y+7	; 0x07
    8a82:	01 96       	adiw	r24, 0x01	; 1
    8a84:	8e 83       	std	Y+6, r24	; 0x06
    8a86:	9f 83       	std	Y+7, r25	; 0x07
    8a88:	30 e0       	ldi	r19, 0x00	; 0
    8a8a:	c9 01       	movw	r24, r18
    8a8c:	df 91       	pop	r29
    8a8e:	cf 91       	pop	r28
    8a90:	08 95       	ret

00008a92 <_exit>:
    8a92:	f8 94       	cli

00008a94 <__stop_program>:
    8a94:	ff cf       	rjmp	.-2      	; 0x8a94 <__stop_program>
